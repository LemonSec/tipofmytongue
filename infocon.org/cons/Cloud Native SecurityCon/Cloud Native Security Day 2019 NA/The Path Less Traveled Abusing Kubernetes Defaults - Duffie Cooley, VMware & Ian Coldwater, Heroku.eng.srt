1
00:00:00,000 --> 00:00:03,990
all right everybody hi everyone I came

2
00:00:03,990 --> 00:00:08,940
right here us okay sweet this talk is

3
00:00:08,940 --> 00:00:10,710
called the path less traveled abusing

4
00:00:10,710 --> 00:00:13,170
kubernetes defaults and it is going to

5
00:00:13,170 --> 00:00:14,670
be demonstrating to you some interesting

6
00:00:14,670 --> 00:00:16,079
things that can happen with the

7
00:00:16,079 --> 00:00:19,130
kubernetes cluster set up out of the box

8
00:00:19,130 --> 00:00:20,789
so let's get to it

9
00:00:20,789 --> 00:00:23,340
my name is Ian Coldwater I am a lead

10
00:00:23,340 --> 00:00:25,849
platform security engineer at Heroku

11
00:00:25,849 --> 00:00:27,510
before that I was an independent

12
00:00:27,510 --> 00:00:28,920
penetration testing consultant

13
00:00:28,920 --> 00:00:30,390
specializing in hacking and hardening

14
00:00:30,390 --> 00:00:31,590
kubernetes containers and cloud

15
00:00:31,590 --> 00:00:34,500
infrastructure my name is Duffy Cooley

16
00:00:34,500 --> 00:00:35,940
and my staff cognitive architect at

17
00:00:35,940 --> 00:00:37,559
VMware I came there as part of the hefty

18
00:00:37,559 --> 00:00:39,030
acquisition I've been working on

19
00:00:39,030 --> 00:00:41,100
kubernetes since about 2016 just jumping

20
00:00:41,100 --> 00:00:42,270
into the community channel and helping

21
00:00:42,270 --> 00:00:44,520
everybody that I can I'm also a co-host

22
00:00:44,520 --> 00:00:46,860
of TGI kada i/o if you're interested in

23
00:00:46,860 --> 00:00:48,390
the space around kubernetes or pretty

24
00:00:48,390 --> 00:00:49,289
much anything in the cloud native

25
00:00:49,289 --> 00:00:51,989
ecosystem I highly recommend that we do

26
00:00:51,989 --> 00:00:54,030
it every Friday at one o'clock so check

27
00:00:54,030 --> 00:00:57,690
it out so the first thing we want to say

28
00:00:57,690 --> 00:01:00,629
is check your assumptions a lot of

29
00:01:00,629 --> 00:01:02,640
people maybe not necessarily and people

30
00:01:02,640 --> 00:01:04,530
in this room but a lot of people assume

31
00:01:04,530 --> 00:01:06,510
that kubernetes is secure by default and

32
00:01:06,510 --> 00:01:10,729
it's not Cooper Nettie's by design is

33
00:01:10,729 --> 00:01:13,530
designed for granular control so the

34
00:01:13,530 --> 00:01:15,210
defaults are actually quite open and

35
00:01:15,210 --> 00:01:18,240
allow for you to be able to customize

36
00:01:18,240 --> 00:01:19,770
your cluster according to your needs in

37
00:01:19,770 --> 00:01:22,409
your use case and that's not bad but it

38
00:01:22,409 --> 00:01:24,450
isn't secure out of the box and neither

39
00:01:24,450 --> 00:01:26,720
are the applications deployed upon it so

40
00:01:26,720 --> 00:01:31,740
let's break that down a little bit for

41
00:01:31,740 --> 00:01:33,540
one thing it's a little bit of a

42
00:01:33,540 --> 00:01:34,799
misnomer to talk about kubernetes

43
00:01:34,799 --> 00:01:36,600
defaults because there is no singular

44
00:01:36,600 --> 00:01:39,000
set of kubernetes defaults all of the

45
00:01:39,000 --> 00:01:40,380
distributions have slightly different

46
00:01:40,380 --> 00:01:42,540
default out of the box and every cluster

47
00:01:42,540 --> 00:01:43,380
is going to be slightly different

48
00:01:43,380 --> 00:01:44,670
according to what kinds of

49
00:01:44,670 --> 00:01:46,170
configurations plugins and other things

50
00:01:46,170 --> 00:01:47,729
you have running in it so it's a little

51
00:01:47,729 --> 00:01:49,619
hard to give one-size-fits-all security

52
00:01:49,619 --> 00:01:51,570
advice either on attack or on defense

53
00:01:51,570 --> 00:01:54,090
but there are a lot of commonalities and

54
00:01:54,090 --> 00:01:55,640
so we're going to talk about those today

55
00:01:55,640 --> 00:01:58,170
this talk uses a cluster that's actually

56
00:01:58,170 --> 00:02:01,170
user defaults as defined by cube a DM

57
00:02:01,170 --> 00:02:03,119
cube medium is a project that is

58
00:02:03,119 --> 00:02:04,920
actually meant to provide common tooling

59
00:02:04,920 --> 00:02:06,000
that gets you from the place where you

60
00:02:06,000 --> 00:02:07,469
have infrastructure up to the point

61
00:02:07,469 --> 00:02:09,360
where you have kubernetes and the

62
00:02:09,360 --> 00:02:11,280
benefit of having that common tooling is

63
00:02:11,280 --> 00:02:13,440
that we can extend that we

64
00:02:13,440 --> 00:02:14,730
have a single place where we can kind of

65
00:02:14,730 --> 00:02:16,440
extend what those rational defaults are

66
00:02:16,440 --> 00:02:18,150
right if we provide a good configurable

67
00:02:18,150 --> 00:02:19,950
surface and we also provide kind of a

68
00:02:19,950 --> 00:02:21,900
better set of defaults for getting you

69
00:02:21,900 --> 00:02:22,980
from a place where you have

70
00:02:22,980 --> 00:02:25,620
infrastructure who we need is it's

71
00:02:25,620 --> 00:02:27,150
important to note here that coop ADM

72
00:02:27,150 --> 00:02:28,710
actually is designed for having

73
00:02:28,710 --> 00:02:30,750
relatively sane defaults and so this is

74
00:02:30,750 --> 00:02:31,560
the thing that we're going to be

75
00:02:31,560 --> 00:02:32,460
exploiting out of the box

76
00:02:32,460 --> 00:02:35,790
today many kinds of configurations or

77
00:02:35,790 --> 00:02:37,380
like installers will actually have

78
00:02:37,380 --> 00:02:39,900
defaults that are weaker and that's

79
00:02:39,900 --> 00:02:41,490
important to note it's also important to

80
00:02:41,490 --> 00:02:42,960
note that kubernetes by default

81
00:02:42,960 --> 00:02:45,420
overrides Dockers defaults at comp

82
00:02:45,420 --> 00:02:47,490
profiles and the security position that

83
00:02:47,490 --> 00:02:49,290
docker sets up by default a lot of

84
00:02:49,290 --> 00:02:51,090
people assume that that's inherited and

85
00:02:51,090 --> 00:02:52,800
it's not it's actually overridden to

86
00:02:52,800 --> 00:02:54,330
avoid breaking changes so we wanted to

87
00:02:54,330 --> 00:02:57,560
point that out because it's important

88
00:02:57,920 --> 00:03:00,000
what do we mean when we're talking about

89
00:03:00,000 --> 00:03:01,800
kubernetes here presumably if you're at

90
00:03:01,800 --> 00:03:03,210
cube con you have a general idea that

91
00:03:03,210 --> 00:03:04,830
kubernetes is a container Orchestrator

92
00:03:04,830 --> 00:03:05,910
you know that it does all these things

93
00:03:05,910 --> 00:03:08,190
but for the purposes of talking about it

94
00:03:08,190 --> 00:03:10,170
as an attack surface kubernetes is two

95
00:03:10,170 --> 00:03:11,910
different things it is both an

96
00:03:11,910 --> 00:03:13,800
application and its associated set of

97
00:03:13,800 --> 00:03:15,840
binaries and in-district like a loosely

98
00:03:15,840 --> 00:03:17,730
coupled distributed system and it's an

99
00:03:17,730 --> 00:03:21,060
API platform defined by gamal so like

100
00:03:21,060 --> 00:03:23,130
it's both and both of those are attack

101
00:03:23,130 --> 00:03:24,630
surfaces but they're not necessarily the

102
00:03:24,630 --> 00:03:26,280
same attack surface so we're going to

103
00:03:26,280 --> 00:03:32,100
cover that as a whole today so anybody

104
00:03:32,100 --> 00:03:34,530
want to attack some stuff let's tag some

105
00:03:34,530 --> 00:03:37,290
stuff it's gonna do it so what's going

106
00:03:37,290 --> 00:03:39,230
on here

107
00:03:39,230 --> 00:03:41,730
so this first session what I'm going to

108
00:03:41,730 --> 00:03:43,440
use for this for the first demonstration

109
00:03:43,440 --> 00:03:45,810
we're going to talk about a tool that I

110
00:03:45,810 --> 00:03:48,989
wrote it helps me diagnose or debug

111
00:03:48,989 --> 00:03:51,989
what's happening with with sed if

112
00:03:51,989 --> 00:03:53,880
there's actually a problem so what this

113
00:03:53,880 --> 00:03:55,590
tool does is it basically it's just a

114
00:03:55,590 --> 00:03:57,150
static pod or a pod that you can

115
00:03:57,150 --> 00:03:59,820
actually deploy as a as a deployable pod

116
00:03:59,820 --> 00:04:02,280
and it's going to grab the sed binary

117
00:04:02,280 --> 00:04:03,780
from that it's actually being used

118
00:04:03,780 --> 00:04:05,310
within the cluster so just a version of

119
00:04:05,310 --> 00:04:07,890
sed I set some environment variables and

120
00:04:07,890 --> 00:04:10,320
I'm making use of host path here to be

121
00:04:10,320 --> 00:04:13,590
able to pull in all of the certificates

122
00:04:13,590 --> 00:04:16,440
necessary to allow sed client to

123
00:04:16,440 --> 00:04:18,390
authenticate to the sed cluster that is

124
00:04:18,390 --> 00:04:21,089
hosted inside of the system I'm actually

125
00:04:21,089 --> 00:04:23,010
targeting localhost here to connect to

126
00:04:23,010 --> 00:04:25,470
it and to that end I actually need to

127
00:04:25,470 --> 00:04:27,139
make sure that this pod is running you

128
00:04:27,139 --> 00:04:28,669
the host network so that I can actually

129
00:04:28,669 --> 00:04:34,129
provide that access once I get this

130
00:04:34,129 --> 00:04:37,699
deployed I'll be able to use it to

131
00:04:37,699 --> 00:04:39,229
diagnose things so one of the things I

132
00:04:39,229 --> 00:04:41,330
might do is just do a member list or a

133
00:04:41,330 --> 00:04:42,860
member status just to understand the

134
00:04:42,860 --> 00:04:46,250
current state of that sed cluster so

135
00:04:46,250 --> 00:04:48,139
that's a legitimate use case for a

136
00:04:48,139 --> 00:04:49,460
sysadmin or somebody who's trying to

137
00:04:49,460 --> 00:04:51,740
debug a cluster but what else could you

138
00:04:51,740 --> 00:04:53,840
do with a list of members and their

139
00:04:53,840 --> 00:04:56,539
associated permissions let's find out so

140
00:04:56,539 --> 00:05:00,110
I'm dumping all of the secrets from this

141
00:05:00,110 --> 00:05:03,199
at CD and that's interesting what do we

142
00:05:03,199 --> 00:05:05,270
have here we have various kinds of

143
00:05:05,270 --> 00:05:07,279
things under cube system namespace one

144
00:05:07,279 --> 00:05:09,110
of the things we have is called cluster

145
00:05:09,110 --> 00:05:11,210
roll aggregation controller this has

146
00:05:11,210 --> 00:05:14,419
been patched as of 1.16 but in previous

147
00:05:14,419 --> 00:05:16,580
versions it still works cluster roll

148
00:05:16,580 --> 00:05:18,919
aggregation controller because its role

149
00:05:18,919 --> 00:05:20,689
is literally to aggregate cluster rolls

150
00:05:20,689 --> 00:05:22,610
has access to everything it has

151
00:05:22,610 --> 00:05:24,020
administrative control over the cluster

152
00:05:24,020 --> 00:05:26,300
by default so that one looks interesting

153
00:05:26,300 --> 00:05:28,520
let's see if we can get a token out of

154
00:05:28,520 --> 00:05:34,039
it as it turns out yes we can so with

155
00:05:34,039 --> 00:05:35,300
this token let's see what kind of

156
00:05:35,300 --> 00:05:38,270
permissions we've got on it coups ETL of

157
00:05:38,270 --> 00:05:41,240
auth can i - - list which is the best

158
00:05:41,240 --> 00:05:42,889
tool for pen testers that's come out in

159
00:05:42,889 --> 00:05:45,500
years as far as I'm concerned handily

160
00:05:45,500 --> 00:05:47,449
enumerates all of the possible

161
00:05:47,449 --> 00:05:49,430
permissions that we have so we can

162
00:05:49,430 --> 00:05:51,259
figure out exactly what we can do with

163
00:05:51,259 --> 00:05:54,080
this token in a very neat automated

164
00:05:54,080 --> 00:05:55,550
fashion previously when we were pen

165
00:05:55,550 --> 00:05:57,050
testing a cluster we would have to do

166
00:05:57,050 --> 00:05:59,719
every single call individually to figure

167
00:05:59,719 --> 00:06:01,129
out what kinds of permissions we had and

168
00:06:01,129 --> 00:06:02,870
that was annoying it took a long time

169
00:06:02,870 --> 00:06:04,460
so thanks kubernetes for helping our

170
00:06:04,460 --> 00:06:07,189
enumeration process so what kinds of

171
00:06:07,189 --> 00:06:09,110
access does this have well as it turns

172
00:06:09,110 --> 00:06:10,339
out one of the things that has is

173
00:06:10,339 --> 00:06:13,189
wildcard wildcard which that seems like

174
00:06:13,189 --> 00:06:15,740
that could be potentially useful so with

175
00:06:15,740 --> 00:06:17,419
our lovely cluster role aggregation

176
00:06:17,419 --> 00:06:19,099
controller wildcard we will now take

177
00:06:19,099 --> 00:06:21,289
over not only this cluster but the

178
00:06:21,289 --> 00:06:23,270
underlying node because we have mounted

179
00:06:23,270 --> 00:06:26,089
it on host path and it's mine game over

180
00:06:26,089 --> 00:06:32,229
I get to go home too bad so there's that

181
00:06:35,319 --> 00:06:37,189
one of the things we're going to keep

182
00:06:37,189 --> 00:06:39,349
talking about here is how a lot of the

183
00:06:39,349 --> 00:06:40,789
time things that are very useful

184
00:06:40,789 --> 00:06:42,439
debugging things for sis admins for

185
00:06:42,439 --> 00:06:44,629
example or like legitimate use cases for

186
00:06:44,629 --> 00:06:46,370
somebody who is like trying to operate a

187
00:06:46,370 --> 00:06:48,590
cluster can be used exactly the same way

188
00:06:48,590 --> 00:06:50,629
but for nefarious purposes by somebody

189
00:06:50,629 --> 00:06:52,849
who is maybe up to something else so

190
00:06:52,849 --> 00:06:53,870
that's an important thing to be able to

191
00:06:53,870 --> 00:06:55,370
think about and I'm good this is what my

192
00:06:55,370 --> 00:06:58,039
keynote on Thursday is about so we

193
00:06:58,039 --> 00:07:01,909
directly scheduled that that on the

194
00:07:01,909 --> 00:07:04,249
underlying note because the couplet was

195
00:07:04,249 --> 00:07:07,310
running in the same node and that is

196
00:07:07,310 --> 00:07:09,919
problematic because if you run a couplet

197
00:07:09,919 --> 00:07:11,449
on your control plane note if you take

198
00:07:11,449 --> 00:07:14,529
over the underlying node there you go

199
00:07:14,529 --> 00:07:16,580
okay so what do we take away from this

200
00:07:16,580 --> 00:07:19,099
demo for one thing if you're authorized

201
00:07:19,099 --> 00:07:21,979
to create pods you can do a hell of a

202
00:07:21,979 --> 00:07:24,080
lot by default because it just allows

203
00:07:24,080 --> 00:07:27,020
you to that's right you can also and to

204
00:07:27,020 --> 00:07:27,979
your point scheduling it's not a

205
00:07:27,979 --> 00:07:29,089
security boundary you can directly

206
00:07:29,089 --> 00:07:31,550
schedule any pod that you want namespace

207
00:07:31,550 --> 00:07:33,710
isolation especially in the absence of

208
00:07:33,710 --> 00:07:35,120
admission control is not enough

209
00:07:35,120 --> 00:07:37,069
isolation right if you have if you have

210
00:07:37,069 --> 00:07:38,599
the ability to make you supposed to pass

211
00:07:38,599 --> 00:07:41,240
it's very scary it's not this and the

212
00:07:41,240 --> 00:07:42,529
mitigations that we can do in our

213
00:07:42,529 --> 00:07:44,509
example we were showing the ability just

214
00:07:44,509 --> 00:07:46,669
to grab the plaintext as it was stored

215
00:07:46,669 --> 00:07:49,279
in sed if you were encrypting sed at

216
00:07:49,279 --> 00:07:51,439
rest especially in the secrets and that

217
00:07:51,439 --> 00:07:52,879
output would have been encrypted output

218
00:07:52,879 --> 00:07:54,800
and it would have been much better to be

219
00:07:54,800 --> 00:08:01,099
you like worse for me so okay yeah make

220
00:08:01,099 --> 00:08:03,080
sure that you are applying appropriate

221
00:08:03,080 --> 00:08:04,969
forms of isolation and don't assume

222
00:08:04,969 --> 00:08:07,580
again check your assumptions that any

223
00:08:07,580 --> 00:08:10,149
one of them is going to be enough

224
00:08:10,149 --> 00:08:12,560
so we'd mentioned host path a couple of

225
00:08:12,560 --> 00:08:14,419
times and I wanted to talk more about it

226
00:08:14,419 --> 00:08:17,960
because host path is wild host path is

227
00:08:17,960 --> 00:08:20,169
so wild that we named this talk after it

228
00:08:20,169 --> 00:08:22,969
host path is defined to this day you can

229
00:08:22,969 --> 00:08:24,229
look at it on the site this is a

230
00:08:24,229 --> 00:08:25,969
screenshot from it in the kubernetes

231
00:08:25,969 --> 00:08:28,039
documentation as a powerful escape hatch

232
00:08:28,039 --> 00:08:30,919
they are not kidding it is an incredible

233
00:08:30,919 --> 00:08:33,110
powerful escape hatch you can escape all

234
00:08:33,110 --> 00:08:34,250
kinds of things with it

235
00:08:34,250 --> 00:08:36,799
host path has legitimate use cases and

236
00:08:36,799 --> 00:08:39,140
is used fairly commonly in a couple of

237
00:08:39,140 --> 00:08:40,940
use cases that we'll talk about in a

238
00:08:40,940 --> 00:08:43,640
second but it is so powerful and so ripe

239
00:08:43,640 --> 00:08:45,649
for abuse that it's really important to

240
00:08:45,649 --> 00:08:46,770
understand that

241
00:08:46,770 --> 00:08:49,320
so that you can protect against how easy

242
00:08:49,320 --> 00:08:51,450
and how powerful a path it is for an

243
00:08:51,450 --> 00:08:56,160
attacker one potential use case for hos

244
00:08:56,160 --> 00:08:59,070
path is doctor and doctor so doctor and

245
00:08:59,070 --> 00:09:00,270
doctor actually there's a couple of

246
00:09:00,270 --> 00:09:01,350
different definitions for doctor a

247
00:09:01,350 --> 00:09:03,360
doctor out there and this and in this

248
00:09:03,360 --> 00:09:04,670
next session we're going to show you how

249
00:09:04,670 --> 00:09:07,620
the definition in which you expose the

250
00:09:07,620 --> 00:09:09,450
doctor socket of the underlying host up

251
00:09:09,450 --> 00:09:12,000
into the container by expressing by

252
00:09:12,000 --> 00:09:15,260
youth by leveraging host path

253
00:09:15,260 --> 00:09:17,610
the problem isn't actually specific to

254
00:09:17,610 --> 00:09:19,230
doctor all of the container runtimes

255
00:09:19,230 --> 00:09:19,920
that I'm aware of

256
00:09:19,920 --> 00:09:21,959
all have the same set of the same set of

257
00:09:21,959 --> 00:09:25,170
the same setup I should say so people

258
00:09:25,170 --> 00:09:26,910
use doctor and doctor a lot but it's

259
00:09:26,910 --> 00:09:28,470
important to know that exposing the

260
00:09:28,470 --> 00:09:32,880
doctor socket allows users who have

261
00:09:32,880 --> 00:09:35,910
access to the docker group pretty much

262
00:09:35,910 --> 00:09:37,410
root access on the host and like

263
00:09:37,410 --> 00:09:39,630
immediately like an exposed docker

264
00:09:39,630 --> 00:09:41,160
socket as a pen tester means that

265
00:09:41,160 --> 00:09:42,570
literally by the time I'm done pushing

266
00:09:42,570 --> 00:09:44,730
the k-cup button I've got root and I can

267
00:09:44,730 --> 00:09:48,390
go home so all of the container runtimes

268
00:09:48,390 --> 00:09:49,529
of stuff he said have this kind of

269
00:09:49,529 --> 00:09:52,230
socket and it's really important to know

270
00:09:52,230 --> 00:09:55,620
that like have giving users access to

271
00:09:55,620 --> 00:09:57,240
this socket even if you are running them

272
00:09:57,240 --> 00:10:00,060
as non-root as non-privileged actually

273
00:10:00,060 --> 00:10:01,350
gives them read access to the underlying

274
00:10:01,350 --> 00:10:03,540
host it's um it's important to know that

275
00:10:03,540 --> 00:10:05,760
because even if you are setting up

276
00:10:05,760 --> 00:10:07,649
things that aren't privileged they can

277
00:10:07,649 --> 00:10:09,300
escalate the privileges remarkably

278
00:10:09,300 --> 00:10:11,540
easily we're gonna demonstrate this

279
00:10:11,540 --> 00:10:14,959
let's talk about it

280
00:10:17,580 --> 00:10:19,440
so when this part of it we're going to

281
00:10:19,440 --> 00:10:20,640
show we're gonna show a doctor and

282
00:10:20,640 --> 00:10:21,810
doctor example here we're going to show

283
00:10:21,810 --> 00:10:24,209
exactly why it is kind of a scary thing

284
00:10:24,209 --> 00:10:26,459
so in this um this is a pod manifest

285
00:10:26,459 --> 00:10:27,899
that I'm going to use to explode to

286
00:10:27,899 --> 00:10:29,430
express this and you can see that I'm

287
00:10:29,430 --> 00:10:30,779
doing a lot of the like reasonable

288
00:10:30,779 --> 00:10:32,310
security things I've got a set comp

289
00:10:32,310 --> 00:10:34,589
profile defined leveraging the docker

290
00:10:34,589 --> 00:10:37,110
default I'm running as not root within

291
00:10:37,110 --> 00:10:38,579
the context of the container

292
00:10:38,579 --> 00:10:39,870
and the interesting thing about this

293
00:10:39,870 --> 00:10:41,490
security context is I can actually fill

294
00:10:41,490 --> 00:10:43,320
in these numbers however I want I get

295
00:10:43,320 --> 00:10:45,089
and when the container starts up it will

296
00:10:45,089 --> 00:10:47,220
be operating as that user as that group

297
00:10:47,220 --> 00:10:48,959
that's being defined we're gonna get

298
00:10:48,959 --> 00:10:50,339
more into why that's interesting in just

299
00:10:50,339 --> 00:10:51,959
a minute but the other thing I'm doing

300
00:10:51,959 --> 00:10:53,820
is I'm going and I'm counting in that

301
00:10:53,820 --> 00:10:56,070
var run docker socket and I'm again

302
00:10:56,070 --> 00:10:58,050
specifying that node name so this is

303
00:10:58,050 --> 00:10:59,700
yeah this again is I could turn the

304
00:10:59,700 --> 00:11:01,470
scheduler and the controller manager off

305
00:11:01,470 --> 00:11:04,769
and still operate this pod right this is

306
00:11:04,769 --> 00:11:06,029
a loosely coupled system within

307
00:11:06,029 --> 00:11:08,070
kubernetes so if I because I'm actually

308
00:11:08,070 --> 00:11:09,720
fully defining the pod I can do anything

309
00:11:09,720 --> 00:11:18,089
here if I go ahead and apply this and

310
00:11:18,089 --> 00:11:22,079
this is a pretty well secured setup in

311
00:11:22,079 --> 00:11:26,279
theory except so we can see that when I

312
00:11:26,279 --> 00:11:27,839
jump in here and I type ID I'm running

313
00:11:27,839 --> 00:11:29,190
as that user in that group that we saw

314
00:11:29,190 --> 00:11:30,510
before and the reason I picked that

315
00:11:30,510 --> 00:11:32,880
particular GID is because in this

316
00:11:32,880 --> 00:11:34,110
install of docker

317
00:11:34,110 --> 00:11:36,450
as with most installs of docker there's

318
00:11:36,450 --> 00:11:37,980
going to be a docker group that's been

319
00:11:37,980 --> 00:11:40,560
defined right and the group ID for this

320
00:11:40,560 --> 00:11:43,529
particular install was 132 so I just

321
00:11:43,529 --> 00:11:45,450
specified that in my pod spec so that I

322
00:11:45,450 --> 00:11:46,950
could actually go ahead and impersonate

323
00:11:46,950 --> 00:11:49,170
someone in that you in that group inside

324
00:11:49,170 --> 00:11:51,510
of the context of the container so with

325
00:11:51,510 --> 00:11:53,010
this setup I can do things like build

326
00:11:53,010 --> 00:11:55,230
and push images which is kind of the the

327
00:11:55,230 --> 00:11:57,270
key use case for a doctor in docker

328
00:11:57,270 --> 00:11:59,940
implementation and and I can go ahead

329
00:11:59,940 --> 00:12:02,730
and start things so I if I exact into

330
00:12:02,730 --> 00:12:05,010
that container I can run a command like

331
00:12:05,010 --> 00:12:07,770
docker run nginx and point it to a

332
00:12:07,770 --> 00:12:09,480
particular image and it will go ahead

333
00:12:09,480 --> 00:12:12,510
and start up but because I actually

334
00:12:12,510 --> 00:12:14,339
targeted a specific node I actually

335
00:12:14,339 --> 00:12:17,160
targeted my laptop here and if I do dr.

336
00:12:17,160 --> 00:12:19,709
PS on the underlying node my laptop I

337
00:12:19,709 --> 00:12:21,690
can see that image that was created and

338
00:12:21,690 --> 00:12:22,709
we know it's the same one because it was

339
00:12:22,709 --> 00:12:24,810
started 19 seconds ago this is this is

340
00:12:24,810 --> 00:12:25,980
the image that I started with in the

341
00:12:25,980 --> 00:12:29,390
context of that unprivileged container

342
00:12:29,390 --> 00:12:31,170
right so this

343
00:12:31,170 --> 00:12:33,899
an example of some of the power of that

344
00:12:33,899 --> 00:12:40,260
capability the other kind of power of

345
00:12:40,260 --> 00:12:42,720
this capability though is that it allows

346
00:12:42,720 --> 00:12:44,730
us to get pretty much immediate broad

347
00:12:44,730 --> 00:12:46,950
access to the underlying node so we can

348
00:12:46,950 --> 00:12:48,269
also take over the hose with it as it

349
00:12:48,269 --> 00:12:52,199
turns out so in this example I'm going

350
00:12:52,199 --> 00:12:53,550
to go ahead and create a file inside of

351
00:12:53,550 --> 00:12:55,199
the sed directory and you can see that

352
00:12:55,199 --> 00:12:56,820
to create this file I have to have sudou

353
00:12:56,820 --> 00:12:58,230
access because I'm not running I'm just

354
00:12:58,230 --> 00:13:01,050
running as a normal user but I can

355
00:13:01,050 --> 00:13:03,720
actually use that same access to go

356
00:13:03,720 --> 00:13:05,040
ahead and remove this file just by

357
00:13:05,040 --> 00:13:07,380
running a container within the context

358
00:13:07,380 --> 00:13:12,199
of that of that doctor and doctor socket

359
00:13:14,420 --> 00:13:16,589
right so if you're running docker and

360
00:13:16,589 --> 00:13:16,949
docker

361
00:13:16,949 --> 00:13:18,839
you have the underlying host you can do

362
00:13:18,839 --> 00:13:20,220
pretty much anything to the underlying

363
00:13:20,220 --> 00:13:22,589
file system because everything that you

364
00:13:22,589 --> 00:13:25,260
express in against that docker API

365
00:13:25,260 --> 00:13:27,720
inside the container contextually is

366
00:13:27,720 --> 00:13:29,760
represented by the underlying host stuff

367
00:13:29,760 --> 00:13:32,730
so if I mount in a volume like at CD for

368
00:13:32,730 --> 00:13:35,459
the /se directory for example that's the

369
00:13:35,459 --> 00:13:37,709
underlying hosts at sea directory it's

370
00:13:37,709 --> 00:13:38,940
not the one that's actually expressed

371
00:13:38,940 --> 00:13:41,130
inside of the container because that

372
00:13:41,130 --> 00:13:42,360
docker socket is running on the

373
00:13:42,360 --> 00:13:44,339
underlying host this is why this

374
00:13:44,339 --> 00:13:46,170
particular form of doctrine docker is a

375
00:13:46,170 --> 00:13:50,610
terrible idea and as an attacker if I'm

376
00:13:50,610 --> 00:13:52,279
able to do whatever I can dream up

377
00:13:52,279 --> 00:13:54,510
there's a lot I can do there because I

378
00:13:54,510 --> 00:13:55,860
was an attacker I have a pretty good

379
00:13:55,860 --> 00:13:57,390
imagination and there's a lot I can

380
00:13:57,390 --> 00:13:59,190
dream up that's not necessarily the kind

381
00:13:59,190 --> 00:14:03,720
of access you want to give so what can I

382
00:14:03,720 --> 00:14:05,670
take away from this demo doctor and

383
00:14:05,670 --> 00:14:07,019
docker gives a lot of access to the

384
00:14:07,019 --> 00:14:09,779
underlying host by default like a lot

385
00:14:09,779 --> 00:14:14,069
like root and it allows an attacker or a

386
00:14:14,069 --> 00:14:16,470
legitimate admin to gain full access to

387
00:14:16,470 --> 00:14:18,449
the kernel when used in that way so it's

388
00:14:18,449 --> 00:14:19,500
really important to be careful when

389
00:14:19,500 --> 00:14:20,970
you're using it be careful about what

390
00:14:20,970 --> 00:14:22,350
you're exposing and be careful about

391
00:14:22,350 --> 00:14:26,370
like how you're working that out so how

392
00:14:26,370 --> 00:14:30,389
can we fix that say that again sorry

393
00:14:30,389 --> 00:14:32,790
so you can mitigate that by restricting

394
00:14:32,790 --> 00:14:34,290
the use of host paths with admission

395
00:14:34,290 --> 00:14:35,819
control which is a thing that you can do

396
00:14:35,819 --> 00:14:37,920
in a pod security policy and it's

397
00:14:37,920 --> 00:14:39,329
actually very granular like that like

398
00:14:39,329 --> 00:14:40,470
being able to mitigate that you can

399
00:14:40,470 --> 00:14:42,569
actually whitelist specific paths that

400
00:14:42,569 --> 00:14:43,900
you've been exposed to the node

401
00:14:43,900 --> 00:14:45,640
container so it's pretty neat but

402
00:14:45,640 --> 00:14:47,200
leaving it open by default can we be

403
00:14:47,200 --> 00:14:51,250
vulnerable yeah so when we were talking

404
00:14:51,250 --> 00:14:52,630
about that that wasn't kubernetes

405
00:14:52,630 --> 00:14:54,610
specific you might have noticed that was

406
00:14:54,610 --> 00:14:57,220
a knocker attack it because container

407
00:14:57,220 --> 00:14:59,080
because kid kubernetes is a container

408
00:14:59,080 --> 00:15:01,060
Orchestrator attacks on containers are

409
00:15:01,060 --> 00:15:02,820
still viable you can still do them and

410
00:15:02,820 --> 00:15:05,590
it's important to know that because if

411
00:15:05,590 --> 00:15:07,450
we understand how to attack containers

412
00:15:07,450 --> 00:15:09,010
we can understand better how to attack

413
00:15:09,010 --> 00:15:11,170
kubernetes and if we understand how to

414
00:15:11,170 --> 00:15:12,940
attack linux we can understand better

415
00:15:12,940 --> 00:15:15,430
how to attack containers and also how to

416
00:15:15,430 --> 00:15:18,130
secure them because it's containers

417
00:15:18,130 --> 00:15:20,140
aren't magic they're just Linux and if

418
00:15:20,140 --> 00:15:22,030
you understand the low levels it can

419
00:15:22,030 --> 00:15:24,330
help you both be able to understand how

420
00:15:24,330 --> 00:15:26,260
if you understand how they work you can

421
00:15:26,260 --> 00:15:27,430
understand how they break and you can

422
00:15:27,430 --> 00:15:28,360
understand how to prevent them from

423
00:15:28,360 --> 00:15:30,780
breaking that's right

424
00:15:30,780 --> 00:15:32,710
yeah containers are made of Linux

425
00:15:32,710 --> 00:15:34,330
primitives it's just Linux attacks and

426
00:15:34,330 --> 00:15:36,990
that's important to know

427
00:15:37,770 --> 00:15:40,540
containers I assume many of you are

428
00:15:40,540 --> 00:15:42,070
somewhat familiar with but we want to

429
00:15:42,070 --> 00:15:44,200
cover a little bit just to like kind of

430
00:15:44,200 --> 00:15:46,360
cover this because containers aren't new

431
00:15:46,360 --> 00:15:48,250
tech they're really just made of Linux

432
00:15:48,250 --> 00:15:49,390
primitives there's C groups they're

433
00:15:49,390 --> 00:15:51,580
namespaces and they're process isolation

434
00:15:51,580 --> 00:15:55,930
and the same attack surface that applies

435
00:15:55,930 --> 00:15:57,640
to Linux applies to containers in

436
00:15:57,640 --> 00:16:00,970
general because containers are a single

437
00:16:00,970 --> 00:16:03,640
process on a shared host jaring

438
00:16:03,640 --> 00:16:05,260
resources often with each other and with

439
00:16:05,260 --> 00:16:09,760
their posts and underlying nodes a

440
00:16:09,760 --> 00:16:12,070
kernel attack surface in a single

441
00:16:12,070 --> 00:16:15,520
container or on that host is a shared

442
00:16:15,520 --> 00:16:17,620
kernel attack surface and so container

443
00:16:17,620 --> 00:16:19,900
security is a holistic thing it's only

444
00:16:19,900 --> 00:16:22,090
as secure as the individual container as

445
00:16:22,090 --> 00:16:23,800
the applications that are running on it

446
00:16:23,800 --> 00:16:26,200
as the underlying node as the host as

447
00:16:26,200 --> 00:16:28,570
the OS as the silicon and so it's

448
00:16:28,570 --> 00:16:29,530
important to think about that

449
00:16:29,530 --> 00:16:30,610
holistically when you're trying to

450
00:16:30,610 --> 00:16:32,380
secure it to make sure that all of those

451
00:16:32,380 --> 00:16:34,660
layers are actually being secured and as

452
00:16:34,660 --> 00:16:38,200
an attacker it means that I have a wide

453
00:16:38,200 --> 00:16:40,180
multi variate attack surface it means

454
00:16:40,180 --> 00:16:43,030
that I if I can attack that kernel if I

455
00:16:43,030 --> 00:16:45,040
can attack that the application in that

456
00:16:45,040 --> 00:16:46,810
container if I can attack anything along

457
00:16:46,810 --> 00:16:49,090
that stack I get access to a lot of it

458
00:16:49,090 --> 00:16:51,220
people are doing really interesting work

459
00:16:51,220 --> 00:16:52,630
with process isolate with container

460
00:16:52,630 --> 00:16:53,950
isolation right now that I want to

461
00:16:53,950 --> 00:16:55,660
acknowledge but if you're not doing that

462
00:16:55,660 --> 00:16:57,400
it's important to know what kinds of

463
00:16:57,400 --> 00:16:57,730
access

464
00:16:57,730 --> 00:16:58,959
somebody can get if they compromised

465
00:16:58,959 --> 00:17:01,600
that container or that cluster because

466
00:17:01,600 --> 00:17:03,399
your resources make for a shared attack

467
00:17:03,399 --> 00:17:06,760
surface this is a diagram about

468
00:17:06,760 --> 00:17:09,819
containers and I don't actually know how

469
00:17:09,819 --> 00:17:11,020
we're doing on time if we need to go all

470
00:17:11,020 --> 00:17:12,880
the way through it but this is how they

471
00:17:12,880 --> 00:17:15,339
work in relation to the underlying Linux

472
00:17:15,339 --> 00:17:18,220
that powers them and I'm gonna enough II

473
00:17:18,220 --> 00:17:23,559
talk yeah so um as you can pointed out

474
00:17:23,559 --> 00:17:25,179
like containers are basically to process

475
00:17:25,179 --> 00:17:26,619
isolation if you take nothing away from

476
00:17:26,619 --> 00:17:29,169
this talk other than that that's that's

477
00:17:29,169 --> 00:17:30,910
enough right when we actually think

478
00:17:30,910 --> 00:17:32,679
about container orchestrating containers

479
00:17:32,679 --> 00:17:33,850
really what we're just doing is putting

480
00:17:33,850 --> 00:17:35,890
a process on a server and we're

481
00:17:35,890 --> 00:17:37,600
associating that process with these sets

482
00:17:37,600 --> 00:17:39,520
of primitives so if that's the invest

483
00:17:39,520 --> 00:17:40,720
the important part here right we can

484
00:17:40,720 --> 00:17:42,040
give it its own file system we can give

485
00:17:42,040 --> 00:17:43,600
it its own Network we can give it its

486
00:17:43,600 --> 00:17:46,570
own we can constrain how much memory CPU

487
00:17:46,570 --> 00:17:48,220
and that sort of stuff that it uses but

488
00:17:48,220 --> 00:17:49,570
really what we're constraining and all

489
00:17:49,570 --> 00:17:51,250
of the thing we're working is just that

490
00:17:51,250 --> 00:17:54,429
process level so so to demonstrate this

491
00:17:54,429 --> 00:17:56,890
a little bit this is a single tweet that

492
00:17:56,890 --> 00:17:58,570
allows us to get route on the underlying

493
00:17:58,570 --> 00:18:01,210
node not using host path so we're gonna

494
00:18:01,210 --> 00:18:03,309
go through this because it's interesting

495
00:18:03,309 --> 00:18:05,350
and it illustrates some things about how

496
00:18:05,350 --> 00:18:07,900
you can interact with and also attack

497
00:18:07,900 --> 00:18:10,059
containers on the underlying you know if

498
00:18:10,059 --> 00:18:13,809
you understand the low levels of them so

499
00:18:13,809 --> 00:18:15,880
we're gonna get route via an ax Center

500
00:18:15,880 --> 00:18:18,429
here so let's take a look at this

501
00:18:18,429 --> 00:18:19,900
manifest this manifest is actually just

502
00:18:19,900 --> 00:18:21,610
generated basically from that same one

503
00:18:21,610 --> 00:18:23,100
treat lines it's a little easier to read

504
00:18:23,100 --> 00:18:25,540
and it's a very simple one again I'm

505
00:18:25,540 --> 00:18:27,850
doing a direct a direct target I'm tired

506
00:18:27,850 --> 00:18:29,710
I'm targeting a particular node name I

507
00:18:29,710 --> 00:18:32,410
have specified host pid' true and the

508
00:18:32,410 --> 00:18:35,350
what that allows me to do is it's inside

509
00:18:35,350 --> 00:18:37,000
of the containers context and you type

510
00:18:37,000 --> 00:18:39,309
PS minus EF you'll see all of the

511
00:18:39,309 --> 00:18:41,559
processes of the host I'm also giving

512
00:18:41,559 --> 00:18:44,200
privileged access which is like God mode

513
00:18:44,200 --> 00:18:46,120
for these processes right like if you

514
00:18:46,120 --> 00:18:47,980
have privileged access that means that

515
00:18:47,980 --> 00:18:49,900
you have the ability to understand to

516
00:18:49,900 --> 00:18:51,370
interact with pretty much any system

517
00:18:51,370 --> 00:18:52,809
call that is available to you in the

518
00:18:52,809 --> 00:18:54,570
side of the Linux kernel all of it and

519
00:18:54,570 --> 00:18:57,070
I'm not I mean I'm just an authenticated

520
00:18:57,070 --> 00:18:58,840
user here like without the in the

521
00:18:58,840 --> 00:19:00,370
absence of admission control there's

522
00:19:00,370 --> 00:19:01,960
nothing that you can do to keep that

523
00:19:01,960 --> 00:19:03,429
keeps a user from being able to exit

524
00:19:03,429 --> 00:19:06,360
exercise this this is not a magic thing

525
00:19:06,360 --> 00:19:08,799
might be fun to operate this on your own

526
00:19:08,799 --> 00:19:10,809
cluster and see what that looks like so

527
00:19:10,809 --> 00:19:13,379
let's go ahead and deploy

528
00:19:14,940 --> 00:19:17,440
and if I jump in it'll actually I wanted

529
00:19:17,440 --> 00:19:19,180
to kind of give you a quick view into

530
00:19:19,180 --> 00:19:20,590
the kind of the tool that I'm using to

531
00:19:20,590 --> 00:19:22,360
do some of this work this tool is called

532
00:19:22,360 --> 00:19:24,280
enna Center and you can think of it like

533
00:19:24,280 --> 00:19:25,930
a Swiss Army knife for all of those

534
00:19:25,930 --> 00:19:28,120
namespaces that comprise that isolation

535
00:19:28,120 --> 00:19:29,710
model for processes that we talked about

536
00:19:29,710 --> 00:19:30,250
right

537
00:19:30,250 --> 00:19:32,980
so you can see the list here on the left

538
00:19:32,980 --> 00:19:34,450
and it looks very similar to the list

539
00:19:34,450 --> 00:19:36,220
that you might or that that that

540
00:19:36,220 --> 00:19:37,600
represents all of those processes and

541
00:19:37,600 --> 00:19:38,380
we're going to show that here in a

542
00:19:38,380 --> 00:19:40,420
second for any given process within the

543
00:19:40,420 --> 00:19:43,480
Linux kernel it gives you the ability to

544
00:19:43,480 --> 00:19:45,220
enter into any one of those namespaces

545
00:19:45,220 --> 00:19:46,960
and I've used it to actually solve kind

546
00:19:46,960 --> 00:19:50,290
of some mysteries around how containers

547
00:19:50,290 --> 00:19:52,570
are actually operating so in my example

548
00:19:52,570 --> 00:19:54,220
I'm going to go ahead and pull the pit

549
00:19:54,220 --> 00:19:57,340
of an engine X process we can jump in we

550
00:19:57,340 --> 00:19:58,929
can identify once we've identified that

551
00:19:58,929 --> 00:20:01,420
Pig I can use NS enter to enter into the

552
00:20:01,420 --> 00:20:03,280
network name space associated with that

553
00:20:03,280 --> 00:20:06,400
process and do a list of listening

554
00:20:06,400 --> 00:20:07,840
sockets right and so I can see in my

555
00:20:07,840 --> 00:20:09,550
case I was trying to figure out why this

556
00:20:09,550 --> 00:20:11,320
host wasn't or why this container wasn't

557
00:20:11,320 --> 00:20:13,870
listening on port 443 it looks like it's

558
00:20:13,870 --> 00:20:15,280
just not configured to write it's only

559
00:20:15,280 --> 00:20:19,470
listening on port 80 so as an attacker

560
00:20:19,470 --> 00:20:25,150
we can do other things with this as an

561
00:20:25,150 --> 00:20:27,250
attacker if I'm trying to get into

562
00:20:27,250 --> 00:20:28,870
somebody's container and they don't put

563
00:20:28,870 --> 00:20:30,700
shell access in the container which is

564
00:20:30,700 --> 00:20:33,490
common that makes my job much more

565
00:20:33,490 --> 00:20:34,960
annoying because I would really like

566
00:20:34,960 --> 00:20:36,520
text exactly to that container and see

567
00:20:36,520 --> 00:20:37,510
what's going on and be able to interact

568
00:20:37,510 --> 00:20:39,610
with it and then I have to like it's you

569
00:20:39,610 --> 00:20:41,290
know figure out how to do that and a

570
00:20:41,290 --> 00:20:43,059
center as it turns out is one way to do

571
00:20:43,059 --> 00:20:44,980
that you can just interact with that

572
00:20:44,980 --> 00:20:46,300
container even if it doesn't give you

573
00:20:46,300 --> 00:20:47,950
shell access and if it has something

574
00:20:47,950 --> 00:20:50,380
like host pit then we can interact with

575
00:20:50,380 --> 00:20:54,300
that process on the underlying node

576
00:20:54,630 --> 00:20:56,830
because of the way that Linux treats a

577
00:20:56,830 --> 00:20:58,480
filesystem everything is a file

578
00:20:58,480 --> 00:21:00,820
you can't interact with that filesystem

579
00:21:00,820 --> 00:21:05,020
in interesting ways so yeah we did that

580
00:21:05,020 --> 00:21:09,929
and this allows us if we if we exec that

581
00:21:09,929 --> 00:21:13,900
cube CTL manifests that he made it just

582
00:21:13,900 --> 00:21:15,400
allows us to get rid immediately on the

583
00:21:15,400 --> 00:21:18,220
underlying node by way of being able to

584
00:21:18,220 --> 00:21:20,980
interact with that kid and then I'll put

585
00:21:20,980 --> 00:21:21,970
here on the bottom of the screen I just

586
00:21:21,970 --> 00:21:23,560
wanted to point out like if you're

587
00:21:23,560 --> 00:21:24,930
looking for a way in it

588
00:21:24,930 --> 00:21:27,150
to visualize what a container is this

589
00:21:27,150 --> 00:21:29,490
output describes what a container is so

590
00:21:29,490 --> 00:21:30,780
all of those namespaces that are

591
00:21:30,780 --> 00:21:32,460
associated with this particular process

592
00:21:32,460 --> 00:21:34,650
ID are actually going to be unique on

593
00:21:34,650 --> 00:21:36,750
each container like some of them will be

594
00:21:36,750 --> 00:21:38,310
some of them will be common but most of

595
00:21:38,310 --> 00:21:40,350
them will be unique and that was part of

596
00:21:40,350 --> 00:21:41,550
the point of what I wanted to show up

597
00:21:41,550 --> 00:21:44,910
here yeah this kind of thing can help

598
00:21:44,910 --> 00:21:46,440
you understand how containers work which

599
00:21:46,440 --> 00:21:49,020
as we said is really important as a pen

600
00:21:49,020 --> 00:21:52,110
tester I feel like I really leveled up a

601
00:21:52,110 --> 00:21:54,540
lot in terms of being able to attack

602
00:21:54,540 --> 00:21:56,250
clusters and containers in kubernetes

603
00:21:56,250 --> 00:21:57,900
context when I understood the low levels

604
00:21:57,900 --> 00:22:01,470
better because if the better you know

605
00:22:01,470 --> 00:22:03,060
how that works the better you know where

606
00:22:03,060 --> 00:22:04,650
the rough edges are and those rough

607
00:22:04,650 --> 00:22:05,940
edges are where the attack surface often

608
00:22:05,940 --> 00:22:09,060
lives so we're gonna do this we can take

609
00:22:09,060 --> 00:22:13,190
it over and just like that we're route

610
00:22:13,190 --> 00:22:15,720
so that gives us the ability to enter

611
00:22:15,720 --> 00:22:17,640
all the namespaces of the first process

612
00:22:17,640 --> 00:22:19,410
in it process so that gives us complete

613
00:22:19,410 --> 00:22:24,060
access over the house well did you just

614
00:22:24,060 --> 00:22:26,160
do that okay all right so what are we

615
00:22:26,160 --> 00:22:27,960
taking away here restrict use of

616
00:22:27,960 --> 00:22:30,600
privileged containers it's very common

617
00:22:30,600 --> 00:22:31,950
you'll see it in every tutorial in

618
00:22:31,950 --> 00:22:34,020
existence to run docker - - privileged

619
00:22:34,020 --> 00:22:37,680
doing that allows all kinds of access

620
00:22:37,680 --> 00:22:39,990
for you but also all kinds of access for

621
00:22:39,990 --> 00:22:40,980
an attacker and you don't necessarily

622
00:22:40,980 --> 00:22:43,140
want that you want to restrict the use

623
00:22:43,140 --> 00:22:45,330
of hosts pit as well as host paths in

624
00:22:45,330 --> 00:22:47,040
your admission control setup because

625
00:22:47,040 --> 00:22:49,710
that's an issue - so is host network and

626
00:22:49,710 --> 00:22:53,220
also NS enter really cool and it allows

627
00:22:53,220 --> 00:22:54,480
you to enter any process on the

628
00:22:54,480 --> 00:22:59,480
underlying good so can we fix this yes

629
00:22:59,480 --> 00:23:02,580
mostly and the way that we have to fix

630
00:23:02,580 --> 00:23:04,260
this is by use of admission control

631
00:23:04,260 --> 00:23:05,940
which is basically the only line of

632
00:23:05,940 --> 00:23:08,880
defense against a lot of the stuff that

633
00:23:08,880 --> 00:23:10,710
we've demonstrated here today it lets

634
00:23:10,710 --> 00:23:12,570
you limit what a user or controller can

635
00:23:12,570 --> 00:23:14,340
do in depth you get a lot of granular

636
00:23:14,340 --> 00:23:17,910
control over it and muscian control can

637
00:23:17,910 --> 00:23:20,610
be validating or mutating real quick I

638
00:23:20,610 --> 00:23:22,290
want to note that mutating admission

639
00:23:22,290 --> 00:23:23,700
control is really interesting as an

640
00:23:23,700 --> 00:23:25,590
attack surface much in the same way that

641
00:23:25,590 --> 00:23:28,230
LD preload is because if you can turn

642
00:23:28,230 --> 00:23:29,790
anything into anything

643
00:23:29,790 --> 00:23:32,040
with the imagination of attacker you

644
00:23:32,040 --> 00:23:33,750
could potentially be able to make a

645
00:23:33,750 --> 00:23:36,330
legitimate process turn into something

646
00:23:36,330 --> 00:23:38,190
that can be used for I can turn it

647
00:23:38,190 --> 00:23:39,450
something a bit used for my purposes

648
00:23:39,450 --> 00:23:42,299
that would maybe display unexpected

649
00:23:42,299 --> 00:23:44,549
behavior and there's lots of valid use

650
00:23:44,549 --> 00:23:46,860
cases for mutating admission control but

651
00:23:46,860 --> 00:23:48,090
it can present some pretty interesting

652
00:23:48,090 --> 00:23:49,590
opportunities we don't have time to

653
00:23:49,590 --> 00:23:52,009
cover them today but take a look at them

654
00:23:52,009 --> 00:23:54,629
I think we're gonna skip the demo about

655
00:23:54,629 --> 00:23:57,120
pod security policies but rest to say

656
00:23:57,120 --> 00:24:00,419
there was a pod security policy on and I

657
00:24:00,419 --> 00:24:02,429
tried to do the same attack that we did

658
00:24:02,429 --> 00:24:04,679
earlier and it didn't work because I was

659
00:24:04,679 --> 00:24:06,360
forbidden from doing it so put on your

660
00:24:06,360 --> 00:24:08,549
pod security policies it's important the

661
00:24:08,549 --> 00:24:11,309
UX is not always as easy as it could be

662
00:24:11,309 --> 00:24:13,320
and we see that and we validate it so to

663
00:24:13,320 --> 00:24:15,090
speak but it's still really important to

664
00:24:15,090 --> 00:24:18,629
do there will be there is actually this

665
00:24:18,629 --> 00:24:21,539
content is available if you would like

666
00:24:21,539 --> 00:24:31,049
to work through it yourself well okay

667
00:24:31,049 --> 00:24:33,360
but there is one thing about admission

668
00:24:33,360 --> 00:24:36,000
control though which is that it doesn't

669
00:24:36,000 --> 00:24:38,039
actually work in relation to static pods

670
00:24:38,039 --> 00:24:40,259
because of the way that pod priorities

671
00:24:40,259 --> 00:24:40,889
are set

672
00:24:40,889 --> 00:24:43,470
static pods actually go into effect

673
00:24:43,470 --> 00:24:44,879
before admission control takes into

674
00:24:44,879 --> 00:24:47,460
effect so because kubernetes is a

675
00:24:47,460 --> 00:24:49,200
loosely coupled distributed system you

676
00:24:49,200 --> 00:24:50,639
can schedule directly on to the

677
00:24:50,639 --> 00:24:52,139
underlying node without use of the

678
00:24:52,139 --> 00:24:54,210
controller like manager scheduler at all

679
00:24:54,210 --> 00:24:56,879
and if you are able to directly schedule

680
00:24:56,879 --> 00:24:59,460
a static pod that actually bypasses

681
00:24:59,460 --> 00:25:02,129
admission control entirely so admission

682
00:25:02,129 --> 00:25:03,539
control doesn't fix everything and

683
00:25:03,539 --> 00:25:05,429
static pods are an interesting attack

684
00:25:05,429 --> 00:25:06,899
surface that we also don't have time to

685
00:25:06,899 --> 00:25:10,590
cover today so it's important to be

686
00:25:10,590 --> 00:25:13,139
aware of that but really it is the best

687
00:25:13,139 --> 00:25:15,179
line of defense so it's really important

688
00:25:15,179 --> 00:25:16,470
to do and it's important to do well

689
00:25:16,470 --> 00:25:18,419
because it can be hard to configure

690
00:25:18,419 --> 00:25:20,009
there's a lot of moving parts and it can

691
00:25:20,009 --> 00:25:22,080
be easy to miss configure so we know

692
00:25:22,080 --> 00:25:23,399
that's real but it's also really

693
00:25:23,399 --> 00:25:27,690
important sub coming full circle we're

694
00:25:27,690 --> 00:25:30,179
really not trying to scare you here it

695
00:25:30,179 --> 00:25:31,889
is possible to secure kubernetes

696
00:25:31,889 --> 00:25:35,850
clusters at least a lot but it's not

697
00:25:35,850 --> 00:25:38,519
going to happen that way out of the box

698
00:25:38,519 --> 00:25:40,019
it's going to take some work on your

699
00:25:40,019 --> 00:25:42,320
part that work won't always be easy and

700
00:25:42,320 --> 00:25:45,389
we should not assume that kubernetes is

701
00:25:45,389 --> 00:25:47,159
going to be secured by default without

702
00:25:47,159 --> 00:25:50,850
doing that work because it's not and if

703
00:25:50,850 --> 00:25:51,809
we assume that it is

704
00:25:51,809 --> 00:25:54,179
we are leaving wide-open paths for an

705
00:25:54,179 --> 00:25:55,649
attacker to happily travel down and

706
00:25:55,649 --> 00:25:57,149
that's gonna be happy for the attacker

707
00:25:57,149 --> 00:25:58,889
but not necessarily happy for you

708
00:25:58,889 --> 00:26:02,039
kubernetes is powerful it's complex it's

709
00:26:02,039 --> 00:26:03,749
got a lot of moving parts and a lot of

710
00:26:03,749 --> 00:26:05,340
things that need configuration and can

711
00:26:05,340 --> 00:26:06,779
be easy to miss configure the attack

712
00:26:06,779 --> 00:26:08,460
surface is wide and varied as an

713
00:26:08,460 --> 00:26:10,349
attacker I love this it's like it's like

714
00:26:10,349 --> 00:26:12,029
an orchard I just have all kinds of

715
00:26:12,029 --> 00:26:13,710
fruit I can run around picking as a

716
00:26:13,710 --> 00:26:15,029
defender that can make it really

717
00:26:15,029 --> 00:26:16,830
complicated but it's still really

718
00:26:16,830 --> 00:26:18,690
important to do because otherwise I have

719
00:26:18,690 --> 00:26:19,859
free rein of your orchard and I'm eating

720
00:26:19,859 --> 00:26:23,009
all of your apples so it is possible but

721
00:26:23,009 --> 00:26:25,830
we do need your help to do that and how

722
00:26:25,830 --> 00:26:27,570
can we do that since we're here at a

723
00:26:27,570 --> 00:26:28,830
thing where everybody is presumably

724
00:26:28,830 --> 00:26:32,129
interested in contributing I let's talk

725
00:26:32,129 --> 00:26:35,849
about that so if you aren't already

726
00:26:35,849 --> 00:26:37,700
contributing to the kubernetes project

727
00:26:37,700 --> 00:26:39,690
we'd really like to encourage you to

728
00:26:39,690 --> 00:26:41,369
especially if your security minded and

729
00:26:41,369 --> 00:26:42,210
know how to think like an attacker

730
00:26:42,210 --> 00:26:44,339
because I think the project needs a lot

731
00:26:44,339 --> 00:26:46,729
of help with that and not necessarily

732
00:26:46,729 --> 00:26:51,809
just in sig auth or sig security peep

733
00:26:51,809 --> 00:26:53,219
security minded people need to be

734
00:26:53,219 --> 00:26:54,779
involved in all the things across all

735
00:26:54,779 --> 00:26:57,419
the levels of the stack because we all

736
00:26:57,419 --> 00:26:58,950
need to be looking at the project in

737
00:26:58,950 --> 00:26:59,879
that way and you're gonna hear me say

738
00:26:59,879 --> 00:27:02,669
this again in a couple of days but I'm

739
00:27:02,669 --> 00:27:04,619
cüneyt security posture has been

740
00:27:04,619 --> 00:27:07,409
improving over time there is a bug

741
00:27:07,409 --> 00:27:09,299
bounty coming up there was a security

742
00:27:09,299 --> 00:27:10,799
audit that happened to this summer that

743
00:27:10,799 --> 00:27:12,210
put out some really interesting

744
00:27:12,210 --> 00:27:14,789
deliverables and a threat model and

745
00:27:14,789 --> 00:27:16,019
that's worth taking a look at and

746
00:27:16,019 --> 00:27:22,200
reading yep so again here's your

747
00:27:22,200 --> 00:27:24,599
takeaways check your assumptions

748
00:27:24,599 --> 00:27:27,599
kubernetes not secure by default if you

749
00:27:27,599 --> 00:27:29,519
understand well though how it works you

750
00:27:29,519 --> 00:27:32,009
can understand it better as an admin or

751
00:27:32,009 --> 00:27:34,289
an operator and you can understand it

752
00:27:34,289 --> 00:27:36,089
better as an attacker you can understand

753
00:27:36,089 --> 00:27:37,440
the if you understand the attack surface

754
00:27:37,440 --> 00:27:38,639
you can also understand how to prevent

755
00:27:38,639 --> 00:27:41,849
those kinds of attacks and yeah it is

756
00:27:41,849 --> 00:27:43,619
possible to make this project more

757
00:27:43,619 --> 00:27:44,940
secure and to make your clusters more

758
00:27:44,940 --> 00:27:46,859
secure so putting Mission Control on

759
00:27:46,859 --> 00:27:48,330
your clusters and come get involved in

760
00:27:48,330 --> 00:27:50,429
contribute in the project and that's

761
00:27:50,429 --> 00:27:51,749
what we've got thank you all very much

762
00:27:51,749 --> 00:27:54,799
thank you very much

763
00:27:54,800 --> 00:28:00,559
[Applause]

