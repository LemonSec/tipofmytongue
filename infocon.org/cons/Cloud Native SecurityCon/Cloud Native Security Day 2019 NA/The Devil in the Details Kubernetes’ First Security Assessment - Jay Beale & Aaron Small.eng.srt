1
00:00:00,380 --> 00:00:04,710
so I know I'm the last speaker before we

2
00:00:04,710 --> 00:00:06,180
all get to relax and have a couple

3
00:00:06,180 --> 00:00:10,050
drinks I will try and keep it brief at

4
00:00:10,050 --> 00:00:12,450
least not go over this is the devil in

5
00:00:12,450 --> 00:00:14,040
the details kubernetes first here the

6
00:00:14,040 --> 00:00:17,220
assessment my name is Aaron small by day

7
00:00:17,220 --> 00:00:19,890
I'm a product manager at Google I work

8
00:00:19,890 --> 00:00:22,769
on kubernetes security and gke with me

9
00:00:22,769 --> 00:00:23,880
I've got Jay Beall

10
00:00:23,880 --> 00:00:26,250
he's the CTO of n Guardians they do a

11
00:00:26,250 --> 00:00:28,230
bunch of kubernetes penetration testing

12
00:00:28,230 --> 00:00:30,929
and he's also a seasoned instructor at

13
00:00:30,929 --> 00:00:32,340
blackhat so we're really lucky to have

14
00:00:32,340 --> 00:00:34,649
him both with us today and also for all

15
00:00:34,649 --> 00:00:36,300
of his contributions on the audit which

16
00:00:36,300 --> 00:00:40,170
is what we're going to talk about so

17
00:00:40,170 --> 00:00:42,660
these are the other two co-leads for the

18
00:00:42,660 --> 00:00:43,980
working group these are the guys who

19
00:00:43,980 --> 00:00:45,629
were smart enough to avoid having a

20
00:00:45,629 --> 00:00:48,899
slide deadline craig and guram works for

21
00:00:48,899 --> 00:00:50,910
Salesforce where he works on securing

22
00:00:50,910 --> 00:00:52,770
kubernetes container and cloud for

23
00:00:52,770 --> 00:00:55,590
Heroku Joel Smith of Red Hat works on

24
00:00:55,590 --> 00:00:56,340
OpenShift

25
00:00:56,340 --> 00:00:57,930
and he's also a member of the product

26
00:00:57,930 --> 00:00:59,699
security committee and we'll talk about

27
00:00:59,699 --> 00:01:01,800
them both a little bit more you're going

28
00:01:01,800 --> 00:01:03,149
to notice that there are little logos

29
00:01:03,149 --> 00:01:06,119
next to our names Aaron and I both have

30
00:01:06,119 --> 00:01:08,369
our open source projects you can get a

31
00:01:08,369 --> 00:01:11,869
sticker for one of mine if you catch me

32
00:01:11,869 --> 00:01:14,610
afterwards

33
00:01:14,610 --> 00:01:17,100
Craig's is for his capture the flag team

34
00:01:17,100 --> 00:01:19,380
and Joel's was pretty cool as for his

35
00:01:19,380 --> 00:01:22,259
project Euler level badge so if you're

36
00:01:22,259 --> 00:01:26,400
into math take a look at that okay so we

37
00:01:26,400 --> 00:01:28,500
have like 30 minutes to talk about a

38
00:01:28,500 --> 00:01:30,509
security audit that took us a year to

39
00:01:30,509 --> 00:01:33,659
plan and execute and yielded 241 pages

40
00:01:33,659 --> 00:01:37,530
of white papers and reports we won't be

41
00:01:37,530 --> 00:01:39,420
able to cover everything so instead I

42
00:01:39,420 --> 00:01:41,700
want to give like kind of an overview of

43
00:01:41,700 --> 00:01:43,860
the kubernetes ecosystem that surrounded

44
00:01:43,860 --> 00:01:45,689
the audit why now was the right time to

45
00:01:45,689 --> 00:01:47,759
run it and to invest all this time and

46
00:01:47,759 --> 00:01:51,030
money and energy into it we'll also talk

47
00:01:51,030 --> 00:01:53,009
about the philosophy that grounded our

48
00:01:53,009 --> 00:01:54,780
approach to it and why that's a little

49
00:01:54,780 --> 00:01:57,299
bit unique with communities and we'll

50
00:01:57,299 --> 00:01:58,829
look at kubernetes through the lens of

51
00:01:58,829 --> 00:02:00,750
an adversary and how that can help shape

52
00:02:00,750 --> 00:02:03,149
our thinking and then we'll talk to you

53
00:02:03,149 --> 00:02:05,189
about the high-level results of the

54
00:02:05,189 --> 00:02:06,810
threat model and of the source

55
00:02:06,810 --> 00:02:08,580
assessment we'll talk about next steps

56
00:02:08,580 --> 00:02:10,560
and then in true open source fashion

57
00:02:10,560 --> 00:02:13,819
we'll ask you for help

58
00:02:13,910 --> 00:02:17,340
okay backstory this whole journey

59
00:02:17,340 --> 00:02:20,850
started back in 2018 the CNC F reached

60
00:02:20,850 --> 00:02:22,860
out to a couple of their projects it was

61
00:02:22,860 --> 00:02:25,680
a core DNS Prometheus and envoy and

62
00:02:25,680 --> 00:02:27,870
asked them to run a security audit it

63
00:02:27,870 --> 00:02:29,880
was kind of a trial balloon to see if a

64
00:02:29,880 --> 00:02:32,040
formal audit process like this would

65
00:02:32,040 --> 00:02:35,400
bring value the short end to that long

66
00:02:35,400 --> 00:02:37,470
story is that it did they got good

67
00:02:37,470 --> 00:02:39,750
findings they got good bugs and overall

68
00:02:39,750 --> 00:02:40,830
it improved the security of those

69
00:02:40,830 --> 00:02:43,170
products at the end we'll have links to

70
00:02:43,170 --> 00:02:44,970
those initial reviews if you want to

71
00:02:44,970 --> 00:02:48,360
take a look so we left at the

72
00:02:48,360 --> 00:02:49,770
opportunity when they opened it up two

73
00:02:49,770 --> 00:02:52,140
graduated products and the steering

74
00:02:52,140 --> 00:02:53,580
committee said to the community who

75
00:02:53,580 --> 00:02:55,260
would be some good people to run an

76
00:02:55,260 --> 00:02:56,970
audit like this and we formed the

77
00:02:56,970 --> 00:02:59,070
working group it's gone through a few

78
00:02:59,070 --> 00:03:00,630
iterations since then but by and large

79
00:03:00,630 --> 00:03:02,430
the people you just saw up there been

80
00:03:02,430 --> 00:03:06,960
working on this for just over a year so

81
00:03:06,960 --> 00:03:09,750
I said why now why is this the time to

82
00:03:09,750 --> 00:03:13,410
invest in an audit like this I think

83
00:03:13,410 --> 00:03:14,970
it's important to acknowledge that

84
00:03:14,970 --> 00:03:17,070
kubernetes has become business critical

85
00:03:17,070 --> 00:03:20,220
it's the de facto way to run

86
00:03:20,220 --> 00:03:22,440
containerized workloads and containerize

87
00:03:22,440 --> 00:03:23,940
workloads aren't just for our side

88
00:03:23,940 --> 00:03:26,120
projects anymore the world runs on them

89
00:03:26,120 --> 00:03:28,530
this is a survey that the new stack ran

90
00:03:28,530 --> 00:03:31,320
back in 2017 and even at first glance

91
00:03:31,320 --> 00:03:33,300
it's apparent that kubernetes was like

92
00:03:33,300 --> 00:03:35,910
far and away the leader but then we dug

93
00:03:35,910 --> 00:03:37,110
in a little bit it turns out it's

94
00:03:37,110 --> 00:03:40,830
actually a check all that apply so many

95
00:03:40,830 --> 00:03:42,090
of the other responses were probably

96
00:03:42,090 --> 00:03:44,160
also running kubernetes and if you take

97
00:03:44,160 --> 00:03:45,870
an even deeper you'll notice that a

98
00:03:45,870 --> 00:03:48,090
bunch of the options are just kubernetes

99
00:03:48,090 --> 00:03:52,470
under the hood also security is top of

100
00:03:52,470 --> 00:03:54,240
mind is the number one challenge

101
00:03:54,240 --> 00:03:55,890
reported for people trying to adopt

102
00:03:55,890 --> 00:03:57,360
containers and the containerization

103
00:03:57,360 --> 00:04:00,150
methodologies and it's an entirely

104
00:04:00,150 --> 00:04:01,890
different security model than these more

105
00:04:01,890 --> 00:04:03,690
traditional companies were accustomed to

106
00:04:03,690 --> 00:04:06,660
and while this survey was taken back in

107
00:04:06,660 --> 00:04:09,450
2017 it's not like interest has been

108
00:04:09,450 --> 00:04:12,780
declining I know Google Trends is not

109
00:04:12,780 --> 00:04:14,280
the most scientific approach for

110
00:04:14,280 --> 00:04:15,690
interest but I think it tells a pretty

111
00:04:15,690 --> 00:04:17,519
clean story about a four-fold increase

112
00:04:17,519 --> 00:04:21,529
since 2017 when that survey was taken

113
00:04:21,529 --> 00:04:24,150
also this is kubernetes time in the

114
00:04:24,150 --> 00:04:26,880
spotlight not only is it business Krita

115
00:04:26,880 --> 00:04:28,440
goal to those people who have adopted it

116
00:04:28,440 --> 00:04:30,690
but it's being very widely adopted and

117
00:04:30,690 --> 00:04:32,490
it's being adopted both in cloud native

118
00:04:32,490 --> 00:04:35,480
companies but also more traditional ones

119
00:04:35,480 --> 00:04:38,540
some of those companies operate in very

120
00:04:38,540 --> 00:04:41,190
security sensitive industries we have

121
00:04:41,190 --> 00:04:44,130
banks we have financial institutions we

122
00:04:44,130 --> 00:04:46,320
have e-commerce we have retail we even

123
00:04:46,320 --> 00:04:49,110
have CERN so like don't let CERN get

124
00:04:49,110 --> 00:04:51,290
hacked

125
00:04:52,280 --> 00:04:56,100
finally this isn't theoretical the

126
00:04:56,100 --> 00:04:58,440
vulnerabilities exist and they're being

127
00:04:58,440 --> 00:05:00,330
exploited in the wild I know a couple of

128
00:05:00,330 --> 00:05:03,360
people in this room work on managing and

129
00:05:03,360 --> 00:05:04,800
reporting those vulnerabilities every

130
00:05:04,800 --> 00:05:06,600
day it's very real

131
00:05:06,600 --> 00:05:09,450
I charge and headlines aside what this

132
00:05:09,450 --> 00:05:11,520
means to me is that our market is

133
00:05:11,520 --> 00:05:14,190
calling out for maturity and security

134
00:05:14,190 --> 00:05:16,680
maturity at that one of the ways that we

135
00:05:16,680 --> 00:05:19,290
can demonstrate this maturity is to run

136
00:05:19,290 --> 00:05:21,510
these independent third party audits in

137
00:05:21,510 --> 00:05:24,230
the more traditional software

138
00:05:24,230 --> 00:05:27,030
acquisition model these would be part of

139
00:05:27,030 --> 00:05:28,560
the package that a company would get

140
00:05:28,560 --> 00:05:30,210
when they were looking to adopt a new

141
00:05:30,210 --> 00:05:32,730
piece of software or a new software

142
00:05:32,730 --> 00:05:35,040
stack the open source nature of

143
00:05:35,040 --> 00:05:37,110
kubernetes does change this a little bit

144
00:05:37,110 --> 00:05:39,030
but that need to demonstrate maturity

145
00:05:39,030 --> 00:05:43,980
remains so when we approach this audit a

146
00:05:43,980 --> 00:05:46,320
number of us had done this before

147
00:05:46,320 --> 00:05:48,840
I've run lots of audits allocable on the

148
00:05:48,840 --> 00:05:51,210
on the team had run audits but this was

149
00:05:51,210 --> 00:05:52,710
different than anything any of us had

150
00:05:52,710 --> 00:05:54,810
done and that's basically for two

151
00:05:54,810 --> 00:05:56,910
reasons kubernetes is very very very big

152
00:05:56,910 --> 00:06:00,210
and it's open source so instead of

153
00:06:00,210 --> 00:06:01,650
trying to run our old play books we

154
00:06:01,650 --> 00:06:04,110
decided to build some fundamental

155
00:06:04,110 --> 00:06:06,210
philosophy around how we wanted to

156
00:06:06,210 --> 00:06:09,240
approach it first kubernetes is built in

157
00:06:09,240 --> 00:06:11,220
the open and we wanted to audit

158
00:06:11,220 --> 00:06:13,800
kubernetes the kubernetes way so to this

159
00:06:13,800 --> 00:06:16,530
end the RFP that we published to get

160
00:06:16,530 --> 00:06:18,420
proposals from potential vendors was all

161
00:06:18,420 --> 00:06:20,120
written and published in the open I

162
00:06:20,120 --> 00:06:22,080
think more interesting than that though

163
00:06:22,080 --> 00:06:24,540
the selection methodology for how we

164
00:06:24,540 --> 00:06:25,770
picked each vendor and what the criteria

165
00:06:25,770 --> 00:06:28,650
was for a selection was also all

166
00:06:28,650 --> 00:06:31,110
published in the open I want a big thank

167
00:06:31,110 --> 00:06:33,930
you to Craig Ingram who wrote our our

168
00:06:33,930 --> 00:06:35,820
publication around why we picked who and

169
00:06:35,820 --> 00:06:39,030
what the criteria was and we're doing

170
00:06:39,030 --> 00:06:40,630
this because we hope that

171
00:06:40,630 --> 00:06:42,940
by keeping the framework open it enables

172
00:06:42,940 --> 00:06:45,250
repeatability not only repeatability for

173
00:06:45,250 --> 00:06:46,810
his subsequent open source kubernetes

174
00:06:46,810 --> 00:06:48,970
audits but any open source project can

175
00:06:48,970 --> 00:06:50,290
take a look at our methodology and

176
00:06:50,290 --> 00:06:51,880
either you just use it or they can

177
00:06:51,880 --> 00:06:55,120
improve upon it we also opted for as

178
00:06:55,120 --> 00:06:57,760
much transparency as possible of course

179
00:06:57,760 --> 00:06:59,590
when you're handling really sensitive

180
00:06:59,590 --> 00:07:02,080
information like undisclosed unreported

181
00:07:02,080 --> 00:07:03,970
unpatched vulnerabilities and something

182
00:07:03,970 --> 00:07:06,490
as big as kubernetes you can't be very

183
00:07:06,490 --> 00:07:09,760
carefree about it so we did follow like

184
00:07:09,760 --> 00:07:12,070
industry best practices it turns out

185
00:07:12,070 --> 00:07:14,950
that attackers are notoriously faster at

186
00:07:14,950 --> 00:07:16,570
building exploits then defenders are

187
00:07:16,570 --> 00:07:19,660
rolling out patches so we gave the

188
00:07:19,660 --> 00:07:21,400
product Security Council time to review

189
00:07:21,400 --> 00:07:22,660
all of our findings and potentially

190
00:07:22,660 --> 00:07:24,310
embargo them before we published all of

191
00:07:24,310 --> 00:07:26,650
them but we did eventually publish all

192
00:07:26,650 --> 00:07:28,480
of the findings and also all of the

193
00:07:28,480 --> 00:07:32,740
qualitative analysis of kubernetes also

194
00:07:32,740 --> 00:07:35,560
in the vein of transparency the vendors

195
00:07:35,560 --> 00:07:36,850
who are working on it the security

196
00:07:36,850 --> 00:07:39,550
vendors they did all of their work and

197
00:07:39,550 --> 00:07:40,750
all their research in their own private

198
00:07:40,750 --> 00:07:43,300
github repo and then when we finished

199
00:07:43,300 --> 00:07:44,590
after we published all the findings

200
00:07:44,590 --> 00:07:46,450
after we published the white papers they

201
00:07:46,450 --> 00:07:48,070
actually opened that repo up to the

202
00:07:48,070 --> 00:07:49,990
world so you can read there you can read

203
00:07:49,990 --> 00:07:51,310
all their scripts you can read all of

204
00:07:51,310 --> 00:07:53,440
their incomplete findings all the dead

205
00:07:53,440 --> 00:07:55,090
ends and all of their let's call them

206
00:07:55,090 --> 00:07:57,400
enthusiastic debates about whether

207
00:07:57,400 --> 00:07:59,070
something was a vulnerability or not

208
00:07:59,070 --> 00:08:01,270
like that links at the end I'd highly

209
00:08:01,270 --> 00:08:04,120
recommend you go dig in frugal alright

210
00:08:04,120 --> 00:08:06,010
we were working with the CNC F the CNC F

211
00:08:06,010 --> 00:08:07,540
is a nonprofit we wanted to be good

212
00:08:07,540 --> 00:08:10,330
custodians of their resources one of the

213
00:08:10,330 --> 00:08:12,160
ways that we did this was we tried to

214
00:08:12,160 --> 00:08:13,780
focus our efforts on what we thought

215
00:08:13,780 --> 00:08:15,910
were the most security critical

216
00:08:15,910 --> 00:08:18,370
components of kubernetes we didn't want

217
00:08:18,370 --> 00:08:20,170
to like peanut butter our efforts over

218
00:08:20,170 --> 00:08:22,270
the 1.4 million lines of code that is

219
00:08:22,270 --> 00:08:25,570
kubernetes so we just picked the key

220
00:08:25,570 --> 00:08:27,880
areas to get to some level of depth we

221
00:08:27,880 --> 00:08:29,230
didn't in the areas that we did look at

222
00:08:29,230 --> 00:08:30,580
we didn't want to leave anything on the

223
00:08:30,580 --> 00:08:32,469
table that was obvious we want to have

224
00:08:32,469 --> 00:08:34,090
some level of confidence we had found

225
00:08:34,090 --> 00:08:37,840
what was there finally we wanted to be

226
00:08:37,840 --> 00:08:40,870
future focused to this end we knew we

227
00:08:40,870 --> 00:08:42,610
couldn't cover everything and we knew

228
00:08:42,610 --> 00:08:44,140
this couldn't be the last audit so we

229
00:08:44,140 --> 00:08:45,730
wanted to invest some of our resources

230
00:08:45,730 --> 00:08:48,310
into creating a threat model and an

231
00:08:48,310 --> 00:08:51,130
attackers guide we want this effort to

232
00:08:51,130 --> 00:08:53,980
like to pave the way for future research

233
00:08:53,980 --> 00:08:56,200
by independent researchers and more

234
00:08:56,200 --> 00:09:00,070
formal processes so from that philosophy

235
00:09:00,070 --> 00:09:01,839
we asked for these four deliverables I

236
00:09:01,839 --> 00:09:04,510
know it's a very pretty slide thank you

237
00:09:04,510 --> 00:09:06,130
these four core deliverables from the

238
00:09:06,130 --> 00:09:08,019
researchers we wanted the traditional

239
00:09:08,019 --> 00:09:09,730
assessment which is a list of

240
00:09:09,730 --> 00:09:11,079
vulnerabilities who wanted to give the

241
00:09:11,079 --> 00:09:13,269
researchers time to go find these good

242
00:09:13,269 --> 00:09:15,040
vulnerabilities learn how to exploit

243
00:09:15,040 --> 00:09:17,199
them and report them back to the PSC but

244
00:09:17,199 --> 00:09:19,570
we also wanted to create some documents

245
00:09:19,570 --> 00:09:22,089
to help future research and these were

246
00:09:22,089 --> 00:09:25,690
the attackers guide which is it covers

247
00:09:25,690 --> 00:09:27,040
how to build a reference cluster that's

248
00:09:27,040 --> 00:09:28,690
a reference cluster that's good for

249
00:09:28,690 --> 00:09:30,579
attacking it'll tell you what the

250
00:09:30,579 --> 00:09:32,350
networking layer might be might look

251
00:09:32,350 --> 00:09:34,690
like in that cluster and it discusses

252
00:09:34,690 --> 00:09:36,550
what the available attack surface is on

253
00:09:36,550 --> 00:09:38,709
all of the critical components the

254
00:09:38,709 --> 00:09:39,850
threat model of course we talked about

255
00:09:39,850 --> 00:09:42,310
data flow between these components what

256
00:09:42,310 --> 00:09:43,959
the trust relationships are between them

257
00:09:43,959 --> 00:09:46,540
as well as a body of qualitative

258
00:09:46,540 --> 00:09:48,070
findings that I think are really useful

259
00:09:48,070 --> 00:09:50,920
for attackers and defenders and then

260
00:09:50,920 --> 00:09:53,410
there's the operator white paper the

261
00:09:53,410 --> 00:09:55,089
operator white paper is effectively what

262
00:09:55,089 --> 00:09:57,190
you need to know about defense from an

263
00:09:57,190 --> 00:09:58,779
attackers perspective if you have

264
00:09:58,779 --> 00:10:00,459
kubernetes in your job description

265
00:10:00,459 --> 00:10:02,410
anywhere I think this should be required

266
00:10:02,410 --> 00:10:05,470
reading okay that's my initial spiel

267
00:10:05,470 --> 00:10:08,470
we're gonna move into what the attackers

268
00:10:08,470 --> 00:10:10,870
perspective is and because Jay is a

269
00:10:10,870 --> 00:10:13,180
professional kubernetes attacker he's

270
00:10:13,180 --> 00:10:18,730
gonna take over thanks Aaron so let's

271
00:10:18,730 --> 00:10:21,640
see so when we're when we're exploring

272
00:10:21,640 --> 00:10:25,019
or exploiting a cluster we're thinking

273
00:10:25,019 --> 00:10:26,920
here's how we're thinking about it we're

274
00:10:26,920 --> 00:10:28,750
thinking about how data flows through

275
00:10:28,750 --> 00:10:30,730
the cluster both in the control plane

276
00:10:30,730 --> 00:10:33,130
and even through the workloads were

277
00:10:33,130 --> 00:10:35,050
targeting critical components especially

278
00:10:35,050 --> 00:10:37,149
anything anything that could grant us

279
00:10:37,149 --> 00:10:39,370
access or do something that developers

280
00:10:39,370 --> 00:10:41,800
or operators didn't intend or hopefully

281
00:10:41,800 --> 00:10:44,620
didn't even think of we're watching to

282
00:10:44,620 --> 00:10:46,449
see whether network isolation is either

283
00:10:46,449 --> 00:10:49,120
hampering us well more often restricting

284
00:10:49,120 --> 00:10:51,880
our view of the situation of the cluster

285
00:10:51,880 --> 00:10:54,750
we're looking to evade that isolation

286
00:10:54,750 --> 00:10:57,910
more otherwise try to break it so part

287
00:10:57,910 --> 00:11:00,339
of how we do that we'll look at how we

288
00:11:00,339 --> 00:11:02,440
can traverse trust boundaries and how he

289
00:11:02,440 --> 00:11:04,360
can gain lateral levels of privilege

290
00:11:04,360 --> 00:11:05,829
they might give us better visibility

291
00:11:05,829 --> 00:11:07,990
around that network isolation

292
00:11:07,990 --> 00:11:09,430
we'll be looking at how we can escalate

293
00:11:09,430 --> 00:11:12,280
privilege we're trying to find any

294
00:11:12,280 --> 00:11:14,140
opportunity to perform a monkey in the

295
00:11:14,140 --> 00:11:16,900
middle attack I demoed one of these in a

296
00:11:16,900 --> 00:11:18,850
recent talk actually we're showing if an

297
00:11:18,850 --> 00:11:21,580
attacker can create pods in a namespace

298
00:11:21,580 --> 00:11:23,710
then they can basically monkey in the

299
00:11:23,710 --> 00:11:25,900
middle any traffic that's headed to a

300
00:11:25,900 --> 00:11:29,080
service in that namespace let's see and

301
00:11:29,080 --> 00:11:31,570
perhaps most crucially we're trying to

302
00:11:31,570 --> 00:11:34,120
get or modify secrets and those could be

303
00:11:34,120 --> 00:11:35,920
access tokens they could also be

304
00:11:35,920 --> 00:11:38,770
passwords TLS private keys configuration

305
00:11:38,770 --> 00:11:40,240
lines anything the defenders don't want

306
00:11:40,240 --> 00:11:45,070
us to get at so the other interesting

307
00:11:45,070 --> 00:11:46,930
thing from an attackers perspective is

308
00:11:46,930 --> 00:11:48,130
to think about the vantage point at

309
00:11:48,130 --> 00:11:50,200
which you're attacking a cluster so on

310
00:11:50,200 --> 00:11:52,120
first glance people tend to think about

311
00:11:52,120 --> 00:11:54,460
attack attacking something meaning that

312
00:11:54,460 --> 00:11:56,500
you're hitting it across the internet as

313
00:11:56,500 --> 00:11:58,240
an attacker we consider those situations

314
00:11:58,240 --> 00:11:59,860
to be lucky breaks those places like

315
00:11:59,860 --> 00:12:02,430
where Tesla happened to leave there

316
00:12:02,430 --> 00:12:05,980
happen to leave their dashboard

317
00:12:05,980 --> 00:12:08,620
available to the Internet basically on

318
00:12:08,620 --> 00:12:11,560
authenticated as I recall those are that

319
00:12:11,560 --> 00:12:13,630
that happens but it's kind of rare

320
00:12:13,630 --> 00:12:15,970
so as an attacker most often we're

321
00:12:15,970 --> 00:12:17,320
attacking kubernetes clusters from

322
00:12:17,320 --> 00:12:19,750
inside the cluster so how do we get

323
00:12:19,750 --> 00:12:21,940
inside the cluster most the time we're

324
00:12:21,940 --> 00:12:24,100
working we start working from some

325
00:12:24,100 --> 00:12:26,860
compromised workload on the cluster if

326
00:12:26,860 --> 00:12:28,810
we're really lucky that's some control

327
00:12:28,810 --> 00:12:31,660
plane elements if we're really really

328
00:12:31,660 --> 00:12:34,060
lucky either way there just happens to

329
00:12:34,060 --> 00:12:35,800
be a container breakout vulnerability

330
00:12:35,800 --> 00:12:38,500
that gets us execution on the node we're

331
00:12:38,500 --> 00:12:39,460
gonna look at this a little more

332
00:12:39,460 --> 00:12:41,200
graphically on the next slide this is

333
00:12:41,200 --> 00:12:42,700
the one time where I get to use my laser

334
00:12:42,700 --> 00:12:48,910
pointer so Erin can you just put your

335
00:12:48,910 --> 00:12:52,960
eyeballs right no no we had to we've had

336
00:12:52,960 --> 00:12:55,030
to argue here and there about content so

337
00:12:55,030 --> 00:12:58,120
you know give me the laser so this

338
00:12:58,120 --> 00:12:59,860
diagram actually came right it came

339
00:12:59,860 --> 00:13:03,160
right out of the threat model and and

340
00:13:03,160 --> 00:13:06,010
it's a and it's pretty useful so as an

341
00:13:06,010 --> 00:13:08,170
attacker like the the first place is I

342
00:13:08,170 --> 00:13:09,550
might be coming from outside the cluster

343
00:13:09,550 --> 00:13:11,590
and you'll note it says user here and

344
00:13:11,590 --> 00:13:13,510
it's his external attacker here and for

345
00:13:13,510 --> 00:13:15,670
me those are the same thing I'm a I'm a

346
00:13:15,670 --> 00:13:17,620
security guy so and I'm a defender I

347
00:13:17,620 --> 00:13:19,540
think every user is an attacker and when

348
00:13:19,540 --> 00:13:19,699
I'm

349
00:13:19,699 --> 00:13:22,309
attacker i well yeah i'm an attacker so

350
00:13:22,309 --> 00:13:23,359
of course I think everybody's an

351
00:13:23,359 --> 00:13:26,809
attacker so anyway I can be what I'm

352
00:13:26,809 --> 00:13:28,790
going from the outside of the cluster I

353
00:13:28,790 --> 00:13:30,889
don't see a lot of attack surface I see

354
00:13:30,889 --> 00:13:33,799
any of the in grasses any of the

355
00:13:33,799 --> 00:13:36,739
services that actually land you know any

356
00:13:36,739 --> 00:13:38,359
of the services that are exposed outside

357
00:13:38,359 --> 00:13:44,569
that land on pods and that's what am I

358
00:13:44,569 --> 00:13:49,669
said I'm sorry so so I've got so so

359
00:13:49,669 --> 00:13:51,379
that's you know that's what I'm seeing

360
00:13:51,379 --> 00:13:55,819
from outside I and I need that and

361
00:13:55,819 --> 00:13:57,439
that's my main way of actually getting

362
00:13:57,439 --> 00:13:59,720
into the clusters basically can I find a

363
00:13:59,720 --> 00:14:01,549
vulnerable workload I have an

364
00:14:01,549 --> 00:14:03,079
intentionally vulnerable cluster called

365
00:14:03,079 --> 00:14:04,669
Busta Kubb that's what one of my

366
00:14:04,669 --> 00:14:07,209
stickers is for and in this Busta Kubb

367
00:14:07,209 --> 00:14:09,589
every capture-the-flag scenario in it

368
00:14:09,589 --> 00:14:11,419
starts with the vulnerability in one of

369
00:14:11,419 --> 00:14:13,399
these in one of these pods so that you

370
00:14:13,399 --> 00:14:14,809
have an excuse for being inside the

371
00:14:14,809 --> 00:14:17,899
cluster so but before I get there what

372
00:14:17,899 --> 00:14:20,419
else do I see from the outside often I

373
00:14:20,419 --> 00:14:23,119
don't see much right I see services that

374
00:14:23,119 --> 00:14:26,149
land that land on pods if I'm lucky I

375
00:14:26,149 --> 00:14:28,249
might have one of those great situations

376
00:14:28,249 --> 00:14:29,299
where I'm attacking something in the

377
00:14:29,299 --> 00:14:31,009
cloud and the Installer is set up the

378
00:14:31,009 --> 00:14:33,289
API server so that it's available to the

379
00:14:33,289 --> 00:14:35,179
entire Internet that kind of mistake is

380
00:14:35,179 --> 00:14:38,779
rare but I might find it finding any

381
00:14:38,779 --> 00:14:40,249
other control plane component that's

382
00:14:40,249 --> 00:14:41,769
accessible from the Internet at large

383
00:14:41,769 --> 00:14:43,189
good luck

384
00:14:43,189 --> 00:14:45,350
so I don't see a whole lot from the

385
00:14:45,350 --> 00:14:47,539
outside now when I'm inside I have far

386
00:14:47,539 --> 00:14:49,009
more attack servers and that's what this

387
00:14:49,009 --> 00:14:51,829
whole right side of the diagram is first

388
00:14:51,829 --> 00:14:54,619
I've got every pot in service not just

389
00:14:54,619 --> 00:14:56,929
the not just the ones that have ingress

390
00:14:56,929 --> 00:14:59,389
is from outside

391
00:14:59,389 --> 00:15:01,660
I might have access to attack coop proxy

392
00:15:01,660 --> 00:15:04,429
then next I've got the API server and

393
00:15:04,429 --> 00:15:06,259
the API servers where I do most of my

394
00:15:06,259 --> 00:15:08,929
attack work on a pen test or from a bad

395
00:15:08,929 --> 00:15:11,269
actor where I do most of my work to try

396
00:15:11,269 --> 00:15:13,669
to to try to get access and get my

397
00:15:13,669 --> 00:15:15,259
whatever I'm gonna do with this cluster

398
00:15:15,259 --> 00:15:16,850
cryptocurrency data theft or

399
00:15:16,850 --> 00:15:18,230
what-have-you

400
00:15:18,230 --> 00:15:20,239
so I can almost always see the API

401
00:15:20,239 --> 00:15:23,299
server in fact since most clusters don't

402
00:15:23,299 --> 00:15:26,449
have egress network policies I can often

403
00:15:26,449 --> 00:15:29,119
also communicate with the cubelet on

404
00:15:29,119 --> 00:15:32,029
each of the pods so I'm almost always

405
00:15:32,029 --> 00:15:34,220
able to see the cloud provider eight

406
00:15:34,220 --> 00:15:36,290
and honestly that's where like half of

407
00:15:36,290 --> 00:15:38,990
the juice comes from including this

408
00:15:38,990 --> 00:15:40,040
metadata API

409
00:15:40,040 --> 00:15:42,740
that'll give me cloud credentials that

410
00:15:42,740 --> 00:15:44,240
let me interact with all the cloud api's

411
00:15:44,240 --> 00:15:46,160
and honestly a bunch of cluster

412
00:15:46,160 --> 00:15:48,410
compromises come that way but I'm on a

413
00:15:48,410 --> 00:15:51,020
tangent so even in an on-prem cluster

414
00:15:51,020 --> 00:15:53,690
I'm still looking even a non-prime

415
00:15:53,690 --> 00:15:54,950
cluster they're still gonna end up being

416
00:15:54,950 --> 00:15:57,260
some kind of data center resources often

417
00:15:57,260 --> 00:15:59,360
data center api's that are providing the

418
00:15:59,360 --> 00:16:01,459
cluster with storage but sometimes just

419
00:16:01,459 --> 00:16:03,440
whatever the heck else was in that data

420
00:16:03,440 --> 00:16:07,430
center let's see what else so attacking

421
00:16:07,430 --> 00:16:09,890
the scheduler and the controllers is

422
00:16:09,890 --> 00:16:11,810
available but to be honest most of my

423
00:16:11,810 --> 00:16:14,060
access to those is coming through API

424
00:16:14,060 --> 00:16:17,029
server before I can get to before I can

425
00:16:17,029 --> 00:16:18,529
get to those ritu the to the other

426
00:16:18,529 --> 00:16:22,220
master components at CD again is that

427
00:16:22,220 --> 00:16:24,709
similar is also similarly something I

428
00:16:24,709 --> 00:16:26,750
basically attack from starting from the

429
00:16:26,750 --> 00:16:30,110
API server so finally I might be able to

430
00:16:30,110 --> 00:16:32,000
attack the container runtime when it

431
00:16:32,000 --> 00:16:35,450
come and and when I get lucky there I

432
00:16:35,450 --> 00:16:37,520
really like it the biggest place I end

433
00:16:37,520 --> 00:16:38,959
up getting an ability to attack

434
00:16:38,959 --> 00:16:41,120
container runtime if I don't have some

435
00:16:41,120 --> 00:16:42,380
kind of way of breaking out of the

436
00:16:42,380 --> 00:16:45,020
container is if I end up in a wonderful

437
00:16:45,020 --> 00:16:47,480
container and wonderful pod that has the

438
00:16:47,480 --> 00:16:49,640
docker socket or what have you mount it

439
00:16:49,640 --> 00:16:51,740
in and before you think that's

440
00:16:51,740 --> 00:16:55,339
unrealistic it's it's not talk to me

441
00:16:55,339 --> 00:17:01,730
after so ok so Aaron Aaron actually

442
00:17:01,730 --> 00:17:03,260
convinced us on the working group to put

443
00:17:03,260 --> 00:17:04,970
threat modeling on this effort on this

444
00:17:04,970 --> 00:17:06,589
effort that was looking for bugs and

445
00:17:06,589 --> 00:17:08,359
vulnerabilities Aaron spoke very

446
00:17:08,359 --> 00:17:10,040
strongly about the need to get threat

447
00:17:10,040 --> 00:17:11,420
modeling and convinced us so I want to

448
00:17:11,420 --> 00:17:12,800
let him I want to let him talk about

449
00:17:12,800 --> 00:17:17,510
that with a beeper yeah I felt so

450
00:17:17,510 --> 00:17:19,309
strongly about this because I kept

451
00:17:19,309 --> 00:17:21,380
talking to independent researchers in

452
00:17:21,380 --> 00:17:23,359
the security community and they kept

453
00:17:23,359 --> 00:17:24,559
telling me they wanted to hack on

454
00:17:24,559 --> 00:17:25,699
kubernetes but they didn't really know

455
00:17:25,699 --> 00:17:29,540
where to get started I wanted to unlock

456
00:17:29,540 --> 00:17:31,130
all that talent but the exists out there

457
00:17:31,130 --> 00:17:34,070
and one of the ways I could think of to

458
00:17:34,070 --> 00:17:35,480
do that was to hand to them a threat

459
00:17:35,480 --> 00:17:37,100
model or like a roadmap for how to

460
00:17:37,100 --> 00:17:39,050
attack kubernetes a good threat model

461
00:17:39,050 --> 00:17:40,730
really highlights where the critical

462
00:17:40,730 --> 00:17:42,440
security boundaries are and what

463
00:17:42,440 --> 00:17:43,790
assumptions the security model is

464
00:17:43,790 --> 00:17:47,210
grounded in I've been threat model

465
00:17:47,210 --> 00:17:49,940
Ling software for most of my career and

466
00:17:49,940 --> 00:17:51,289
the methodologies I've developed over

467
00:17:51,289 --> 00:17:53,600
that time tend to result in like really

468
00:17:53,600 --> 00:17:56,450
detailed really deep threat models for

469
00:17:56,450 --> 00:17:58,370
use of you who are in the biz it's like

470
00:17:58,370 --> 00:18:00,289
the the atom Shostak model that

471
00:18:00,289 --> 00:18:03,080
Microsoft adopted but I was working with

472
00:18:03,080 --> 00:18:05,350
this guy Stefan from trail of bits and

473
00:18:05,350 --> 00:18:08,120
we elected to take a different approach

474
00:18:08,120 --> 00:18:09,830
due to the unique nature of kubernetes

475
00:18:09,830 --> 00:18:11,809
and the unique distributed nature of all

476
00:18:11,809 --> 00:18:14,510
the talent that built it we went for a

477
00:18:14,510 --> 00:18:16,760
derivative of Mozilla's rapid risk

478
00:18:16,760 --> 00:18:21,350
assessment model and primarily we chose

479
00:18:21,350 --> 00:18:23,899
that because the people who know where

480
00:18:23,899 --> 00:18:27,190
the bodies are buried in kubernetes are

481
00:18:27,190 --> 00:18:30,169
scattered everywhere so and they might

482
00:18:30,169 --> 00:18:31,940
not necessarily have a security

483
00:18:31,940 --> 00:18:33,710
background or know exactly how to talk

484
00:18:33,710 --> 00:18:35,360
about the security controls that they

485
00:18:35,360 --> 00:18:38,390
built into their software so we need to

486
00:18:38,390 --> 00:18:40,190
unlock that knowledge we need to view it

487
00:18:40,190 --> 00:18:42,200
through a security lens and then we need

488
00:18:42,200 --> 00:18:44,779
to draw conclusions from it the rapid

489
00:18:44,779 --> 00:18:47,570
risk assessment is just a really good at

490
00:18:47,570 --> 00:18:48,830
getting people who aren't security

491
00:18:48,830 --> 00:18:52,370
people to talk about security stuff so

492
00:18:52,370 --> 00:18:54,110
in the end we use that process and we

493
00:18:54,110 --> 00:18:55,789
interviewed a bunch of people across a

494
00:18:55,789 --> 00:18:57,919
bunch of different SIG's and distilled

495
00:18:57,919 --> 00:19:00,770
that into a consumable report Jay's

496
00:19:00,770 --> 00:19:02,330
gonna talk about some one stuff we found

497
00:19:02,330 --> 00:19:06,919
cool thanks so the most common question

498
00:19:06,919 --> 00:19:09,260
we've gotten when we talk to people what

499
00:19:09,260 --> 00:19:11,779
the threat model is why these components

500
00:19:11,779 --> 00:19:13,340
and not others well look the question

501
00:19:13,340 --> 00:19:15,289
really should be why these trust zones

502
00:19:15,289 --> 00:19:17,630
and some of you are probably thinking to

503
00:19:17,630 --> 00:19:19,870
yourself well wait what's a trust zone

504
00:19:19,870 --> 00:19:22,159
so we looked at the architecture of a

505
00:19:22,159 --> 00:19:23,570
kubernetes cluster and broke it down

506
00:19:23,570 --> 00:19:26,450
into these six areas so components in

507
00:19:26,450 --> 00:19:28,159
these areas and I really should be using

508
00:19:28,159 --> 00:19:29,510
our pointer I guess components in these

509
00:19:29,510 --> 00:19:32,539
areas have very few security controls

510
00:19:32,539 --> 00:19:34,640
between them

511
00:19:34,640 --> 00:19:38,809
so trust zones areas so components in

512
00:19:38,809 --> 00:19:40,610
these areas have very few security

513
00:19:40,610 --> 00:19:42,679
controls between them within the area

514
00:19:42,679 --> 00:19:44,690
but there but each of them are

515
00:19:44,690 --> 00:19:46,490
responsible for enforcing controls on

516
00:19:46,490 --> 00:19:48,470
communication that are passing into and

517
00:19:48,470 --> 00:19:51,649
out of their area or trust zone so for

518
00:19:51,649 --> 00:19:53,480
example the API server can't blindly

519
00:19:53,480 --> 00:19:55,549
trust the Internet but the worker

520
00:19:55,549 --> 00:19:57,590
components implicitly trust the API

521
00:19:57,590 --> 00:20:00,620
server and the API server in turn fully

522
00:20:00,620 --> 00:20:03,049
trusts @cd for its state of the war it's

523
00:20:03,049 --> 00:20:05,419
for its view of the world so we looked

524
00:20:05,419 --> 00:20:06,770
at each of these trust zones and chose

525
00:20:06,770 --> 00:20:08,090
the components in them that had the

526
00:20:08,090 --> 00:20:11,539
biggest security impact on that zone so

527
00:20:11,539 --> 00:20:12,919
at the top of the food chain you have

528
00:20:12,919 --> 00:20:15,440
Etsy D and the API server and now these

529
00:20:15,440 --> 00:20:17,299
are the these are the crown jewels of

530
00:20:17,299 --> 00:20:19,610
the cluster if you're able to control

531
00:20:19,610 --> 00:20:21,649
these components you have full control

532
00:20:21,649 --> 00:20:23,000
over the cluster itself and it's just

533
00:20:23,000 --> 00:20:26,450
game over easy in the controller manager

534
00:20:26,450 --> 00:20:29,029
zone we looked at coop scheduler coop

535
00:20:29,029 --> 00:20:30,500
controller manager and the cloud

536
00:20:30,500 --> 00:20:32,419
controller manager and these components

537
00:20:32,419 --> 00:20:34,039
control the topology of the cluster and

538
00:20:34,039 --> 00:20:36,080
if you own them boom privilege

539
00:20:36,080 --> 00:20:38,659
escalation so a lot of the kubernetes

540
00:20:38,659 --> 00:20:40,730
security controls also are actually

541
00:20:40,730 --> 00:20:43,159
really node centric for example

542
00:20:43,159 --> 00:20:44,809
kubernetes will make sure that the

543
00:20:44,809 --> 00:20:47,059
secrets that are the secrets that

544
00:20:47,059 --> 00:20:48,799
secrets are available only to the nodes

545
00:20:48,799 --> 00:20:51,080
that have pods scheduled on them that

546
00:20:51,080 --> 00:20:53,690
actually need those secrets well if you

547
00:20:53,690 --> 00:20:56,330
have any control of scheduling then you

548
00:20:56,330 --> 00:20:58,130
can trivially bypass that control and

549
00:20:58,130 --> 00:20:59,779
make sure that the node that you've got

550
00:20:59,779 --> 00:21:02,679
compromise on has the secrets you want

551
00:21:02,679 --> 00:21:05,149
we looked at the couplet which ties

552
00:21:05,149 --> 00:21:07,250
kubernetes to the container runtime and

553
00:21:07,250 --> 00:21:09,529
des coop proxy which handles the pods

554
00:21:09,529 --> 00:21:11,870
networking needs if you own the couplet

555
00:21:11,870 --> 00:21:14,990
you own every workload secret data

556
00:21:14,990 --> 00:21:17,990
volume on the node if you don't but you

557
00:21:17,990 --> 00:21:20,000
own coop proxy you get to control where

558
00:21:20,000 --> 00:21:22,460
all the network traffic goes that's on

559
00:21:22,460 --> 00:21:25,490
its way to or from pods we didn't look

560
00:21:25,490 --> 00:21:27,440
at any specific container runtimes

561
00:21:27,440 --> 00:21:28,909
instead we would looked at the container

562
00:21:28,909 --> 00:21:30,710
runtime interface we had to make sure

563
00:21:30,710 --> 00:21:32,029
there weren't any bad behaviors

564
00:21:32,029 --> 00:21:33,980
introduced by that by the container

565
00:21:33,980 --> 00:21:36,649
runtime interfaces abstraction layer

566
00:21:36,649 --> 00:21:39,470
that between the kulit and the container

567
00:21:39,470 --> 00:21:42,919
runtime so next we're going to talk a

568
00:21:42,919 --> 00:21:44,870
little bit about the threat models

569
00:21:44,870 --> 00:21:46,429
results so we're giving you the

570
00:21:46,429 --> 00:21:49,340
highlights as Erin said this effort

571
00:21:49,340 --> 00:21:53,120
produced hundreds of pages of really

572
00:21:53,120 --> 00:21:56,090
really useful stuff and we have 35

573
00:21:56,090 --> 00:21:57,710
minutes so we're gonna give you the

574
00:21:57,710 --> 00:21:58,990
we're gonna give you the highlights so

575
00:21:58,990 --> 00:22:02,240
first there are at least a couple areas

576
00:22:02,240 --> 00:22:03,710
where a user can configure security

577
00:22:03,710 --> 00:22:06,590
control have the API server accept that

578
00:22:06,590 --> 00:22:08,809
security control and then have that

579
00:22:08,809 --> 00:22:11,270
configuration achieve no result we'll

580
00:22:11,270 --> 00:22:13,440
call that a we'll call that a no op

581
00:22:13,440 --> 00:22:15,000
so as an example if you're using a

582
00:22:15,000 --> 00:22:16,860
networking provider that doesn't support

583
00:22:16,860 --> 00:22:19,320
egress doesn't support egress policies

584
00:22:19,320 --> 00:22:22,110
you can put egress rules in place but

585
00:22:22,110 --> 00:22:24,480
crib annuities won't warn you that you

586
00:22:24,480 --> 00:22:26,250
haven't actually got any firewall rules

587
00:22:26,250 --> 00:22:28,830
governing outbound traffic now you find

588
00:22:28,830 --> 00:22:30,720
out only if you either do your own test

589
00:22:30,720 --> 00:22:32,850
or if you're like most people you find

590
00:22:32,850 --> 00:22:34,470
out when attacker shows you that there

591
00:22:34,470 --> 00:22:37,080
was no egress policy enforced and they

592
00:22:37,080 --> 00:22:39,540
show you in a really bad way so pod

593
00:22:39,540 --> 00:22:41,310
security policies have the same problem

594
00:22:41,310 --> 00:22:44,100
you can apply a policy but if you don't

595
00:22:44,100 --> 00:22:45,690
realize that you have to actually

596
00:22:45,690 --> 00:22:47,040
activate the pod security policy

597
00:22:47,040 --> 00:22:48,900
admission controller you're left

598
00:22:48,900 --> 00:22:50,190
thinking you have policy enforcement

599
00:22:50,190 --> 00:22:53,790
when you don't and that's kind of it's

600
00:22:53,790 --> 00:22:56,010
just another it's just a that's another

601
00:22:56,010 --> 00:22:57,990
case where you think you but control you

602
00:22:57,990 --> 00:23:00,180
don't have it it's kind of sale fail

603
00:23:00,180 --> 00:23:05,520
silently or apparently sale filin so

604
00:23:05,520 --> 00:23:07,740
second the threat model pointed out that

605
00:23:07,740 --> 00:23:10,710
we're not perfect or even consistent on

606
00:23:10,710 --> 00:23:12,050
how we're using transport encryption

607
00:23:12,050 --> 00:23:14,550
they found some they found some use of

608
00:23:14,550 --> 00:23:17,580
clear text HTTP they found that some of

609
00:23:17,580 --> 00:23:19,890
our HTTPS doesn't check the server

610
00:23:19,890 --> 00:23:22,170
certificate making us open for monkey in

611
00:23:22,170 --> 00:23:23,360
the middle

612
00:23:23,360 --> 00:23:25,250
unfortunately the one thing we are doing

613
00:23:25,250 --> 00:23:28,200
consistently is setting kubernetes

614
00:23:28,200 --> 00:23:30,720
internal SSH connections to never check

615
00:23:30,720 --> 00:23:33,810
the survey to check the server certs

616
00:23:33,810 --> 00:23:35,730
let's see third the threat model found

617
00:23:35,730 --> 00:23:37,140
out that we weren't doing enough to stop

618
00:23:37,140 --> 00:23:40,170
a worker node compromise from leading to

619
00:23:40,170 --> 00:23:41,370
a cluster compromise we're going to

620
00:23:41,370 --> 00:23:42,420
speak to this a little bit more in a

621
00:23:42,420 --> 00:23:45,750
couple slides forth researchers told us

622
00:23:45,750 --> 00:23:46,770
that we really needed to provide a

623
00:23:46,770 --> 00:23:48,930
unified audit trail so you could trace

624
00:23:48,930 --> 00:23:51,030
an attackers path through the system you

625
00:23:51,030 --> 00:23:52,260
can do this in kubernetes but it's not a

626
00:23:52,260 --> 00:23:53,910
default configuration and this is

627
00:23:53,910 --> 00:23:55,440
something that every incident responder

628
00:23:55,440 --> 00:23:57,240
needs to handle a breach you have to be

629
00:23:57,240 --> 00:23:58,560
able to lay down that you have to be

630
00:23:58,560 --> 00:24:00,480
able a down that timetable on that

631
00:24:00,480 --> 00:24:03,600
timeline of what happened fifth and

632
00:24:03,600 --> 00:24:06,390
probably the toughest to solve here is

633
00:24:06,390 --> 00:24:08,010
that the controllers all have the same

634
00:24:08,010 --> 00:24:09,600
level of privilege due to their being

635
00:24:09,600 --> 00:24:12,060
compiled into one of two large binaries

636
00:24:12,060 --> 00:24:14,700
into the controller manager or the cloud

637
00:24:14,700 --> 00:24:17,220
controller manager so the researchers

638
00:24:17,220 --> 00:24:18,450
recommended that we figure out how to do

639
00:24:18,450 --> 00:24:21,810
least privilege here in addition I'm

640
00:24:21,810 --> 00:24:23,160
going to move on and talk about the

641
00:24:23,160 --> 00:24:25,410
sources husband findings but you should

642
00:24:25,410 --> 00:24:26,730
know that in addition to the final

643
00:24:26,730 --> 00:24:28,530
model report which has more than I'm

644
00:24:28,530 --> 00:24:30,750
just giving you these highlights all the

645
00:24:30,750 --> 00:24:32,970
raw rapid risk assessment Doc's are

646
00:24:32,970 --> 00:24:34,530
available in our repo if you want to dig

647
00:24:34,530 --> 00:24:37,770
a little deeper so now I want to talk

648
00:24:37,770 --> 00:24:40,080
with the source assessment in this 2019

649
00:24:40,080 --> 00:24:41,880
round weighted split the time between a

650
00:24:41,880 --> 00:24:43,169
bunch of deliverables we've still got a

651
00:24:43,169 --> 00:24:44,940
heavy focused on bug hunting they found

652
00:24:44,940 --> 00:24:47,370
37 vulnerabilities which got supported

653
00:24:47,370 --> 00:24:48,780
in through the reported in through the

654
00:24:48,780 --> 00:24:51,120
product Security Committee the PSC so

655
00:24:51,120 --> 00:24:52,830
Craig opened an issue for each Joel

656
00:24:52,830 --> 00:24:54,390
coordinator with a PSC and what actions

657
00:24:54,390 --> 00:24:55,679
we could take in it like embargoes and

658
00:24:55,679 --> 00:24:57,630
so on on the next slide we've got a

659
00:24:57,630 --> 00:24:59,850
chart with the with those same with some

660
00:24:59,850 --> 00:25:02,250
of the highlights so the first one is

661
00:25:02,250 --> 00:25:04,740
those non authenticated HTTP connections

662
00:25:04,740 --> 00:25:06,809
which we've already talked about in the

663
00:25:06,809 --> 00:25:08,730
second one we got dinged on not

664
00:25:08,730 --> 00:25:11,520
supporting certificate revocation this

665
00:25:11,520 --> 00:25:13,080
is another one that's really important

666
00:25:13,080 --> 00:25:14,429
you have a breach if the certificates

667
00:25:14,429 --> 00:25:16,980
can't be revoked and the attacker got

668
00:25:16,980 --> 00:25:19,500
those certs then the attacker might have

669
00:25:19,500 --> 00:25:21,330
access a lot longer than you think they

670
00:25:21,330 --> 00:25:24,720
do 30 in the third finding here we've

671
00:25:24,720 --> 00:25:26,700
got a pod security policy bypass and

672
00:25:26,700 --> 00:25:29,400
this one was kind of fun to me because

673
00:25:29,400 --> 00:25:31,679
if you've ever mounted the nodes root

674
00:25:31,679 --> 00:25:33,270
filesystem into a container and that

675
00:25:33,270 --> 00:25:35,400
containers running as root this is

676
00:25:35,400 --> 00:25:36,750
something we do in docker all the time

677
00:25:36,750 --> 00:25:37,770
we're just playing with docker not

678
00:25:37,770 --> 00:25:39,809
kubernetes you realize it gives the

679
00:25:39,809 --> 00:25:41,280
attacker great opportunity to compromise

680
00:25:41,280 --> 00:25:43,710
the node through its file system so the

681
00:25:43,710 --> 00:25:45,540
canonical way to prevent pods from doing

682
00:25:45,540 --> 00:25:48,179
this is with pod security policies and

683
00:25:48,179 --> 00:25:50,250
the source assessment team found that an

684
00:25:50,250 --> 00:25:51,690
attacker can get around this restriction

685
00:25:51,690 --> 00:25:54,210
just by mounting the nodes filesystem as

686
00:25:54,210 --> 00:25:56,520
persistent volumes instead of as the

687
00:25:56,520 --> 00:25:58,410
instead of as host paths host path

688
00:25:58,410 --> 00:26:01,320
volumes fourth one was a time of check

689
00:26:01,320 --> 00:26:02,970
time of useful in their ability attacker

690
00:26:02,970 --> 00:26:05,130
can chain with another one to get

691
00:26:05,130 --> 00:26:06,660
privilege escalation for their container

692
00:26:06,660 --> 00:26:09,000
on a node and get full privilege on the

693
00:26:09,000 --> 00:26:11,880
node the fifth one was pretty cool

694
00:26:11,880 --> 00:26:14,700
researchers found a directory traversal

695
00:26:14,700 --> 00:26:18,330
issue in coop control copy and because

696
00:26:18,330 --> 00:26:20,340
it uses tar and here's what was cool the

697
00:26:20,340 --> 00:26:21,510
vulnerability already been discovered

698
00:26:21,510 --> 00:26:22,860
and fixed by crew Burnett by the

699
00:26:22,860 --> 00:26:24,960
criminals project but the fix had a bug

700
00:26:24,960 --> 00:26:28,950
so the work was valuable in the last one

701
00:26:28,950 --> 00:26:30,780
we combined a couple issues that concern

702
00:26:30,780 --> 00:26:32,730
turning a node compromising to a cluster

703
00:26:32,730 --> 00:26:35,490
compromise and this is kind of my this

704
00:26:35,490 --> 00:26:37,290
is my like this is a medium but it's

705
00:26:37,290 --> 00:26:38,460
still really really worth highlighting

706
00:26:38,460 --> 00:26:41,300
because it's points to something

707
00:26:41,300 --> 00:26:44,000
one was bearer tokens being logged to

708
00:26:44,000 --> 00:26:47,060
the nodes system logs the other was the

709
00:26:47,060 --> 00:26:48,920
I scuzzy credentials whenever using I I

710
00:26:48,920 --> 00:26:51,890
scuzzy for volume storage being logged

711
00:26:51,890 --> 00:26:54,830
to the node system logs and these point

712
00:26:54,830 --> 00:26:56,000
is something systemic

713
00:26:56,000 --> 00:26:58,220
not just with logging but overall

714
00:26:58,220 --> 00:26:59,990
kubernetes isn't particularly hardened

715
00:26:59,990 --> 00:27:01,820
against an attacker he's able to break

716
00:27:01,820 --> 00:27:03,290
out of a container and take an

717
00:27:03,290 --> 00:27:05,450
administrative control of a node once

718
00:27:05,450 --> 00:27:07,100
you're on a node there are privilege

719
00:27:07,100 --> 00:27:08,600
escalations some are obvious like

720
00:27:08,600 --> 00:27:10,580
credentials being visible in the command

721
00:27:10,580 --> 00:27:12,110
lines and environment variables being

722
00:27:12,110 --> 00:27:14,540
available and having secrets in them but

723
00:27:14,540 --> 00:27:16,250
others are less obvious like tons of

724
00:27:16,250 --> 00:27:18,590
world writable world readable and world

725
00:27:18,590 --> 00:27:20,900
writable file permissions I really like

726
00:27:20,900 --> 00:27:23,420
this whole area for research and there's

727
00:27:23,420 --> 00:27:25,640
a talk tomorrow by Greg castle and Tim

728
00:27:25,640 --> 00:27:27,230
all players here somewhere

729
00:27:27,230 --> 00:27:29,450
yeah there is so Greg's in the back of

730
00:27:29,450 --> 00:27:32,180
the room afterwards please mob him but

731
00:27:32,180 --> 00:27:34,390
there's a great talk by Greg and Tim

732
00:27:34,390 --> 00:27:37,040
that looks at turning a node compromise

733
00:27:37,040 --> 00:27:39,530
into a wired wider cluster attack and so

734
00:27:39,530 --> 00:27:40,520
we really recommend that

735
00:27:40,520 --> 00:27:42,860
and honestly we recommend that as an

736
00:27:42,860 --> 00:27:45,530
area for research so I also want to show

737
00:27:45,530 --> 00:27:47,060
you share show you a quote from the

738
00:27:47,060 --> 00:27:49,490
reports exact summary and it says we

739
00:27:49,490 --> 00:27:51,050
need to do three things the one is we

740
00:27:51,050 --> 00:27:52,940
have to ease security configuration

741
00:27:52,940 --> 00:27:55,100
because it's too easy to accidentally

742
00:27:55,100 --> 00:27:57,140
configure kubernetes badly and that

743
00:27:57,140 --> 00:27:59,180
leads to vulnerable clusters and those

744
00:27:59,180 --> 00:28:00,860
vulnerable clusters may not be our

745
00:28:00,860 --> 00:28:02,930
faults but it's our responsibility to

746
00:28:02,930 --> 00:28:06,170
fix the situation we can also improve

747
00:28:06,170 --> 00:28:09,110
documentation in the code both by

748
00:28:09,110 --> 00:28:11,480
getting more of it but also making sure

749
00:28:11,480 --> 00:28:13,610
to document our dependencies especially

750
00:28:13,610 --> 00:28:14,690
when we're dealing with external

751
00:28:14,690 --> 00:28:18,170
dependencies and then finally this is

752
00:28:18,170 --> 00:28:20,990
kind of tie to that HTTP thing there are

753
00:28:20,990 --> 00:28:22,700
there are tons of places in the code

754
00:28:22,700 --> 00:28:24,410
where somebody implements somebody

755
00:28:24,410 --> 00:28:25,610
implements functionality somebody else

756
00:28:25,610 --> 00:28:26,960
has implemented in another place and

757
00:28:26,960 --> 00:28:28,760
it's been implemented by someone else in

758
00:28:28,760 --> 00:28:30,470
another place so you've a ton of this

759
00:28:30,470 --> 00:28:32,870
logic riri implementation and they said

760
00:28:32,870 --> 00:28:34,460
listen you've got to find these you've

761
00:28:34,460 --> 00:28:36,560
got to stop having like a whole ton of

762
00:28:36,560 --> 00:28:37,850
different places that are starting up

763
00:28:37,850 --> 00:28:40,040
HTTP connections and just make one

764
00:28:40,040 --> 00:28:41,510
library that does it and does it well

765
00:28:41,510 --> 00:28:43,370
and get it then educate everybody at

766
00:28:43,370 --> 00:28:46,040
disk so that they use it so this being

767
00:28:46,040 --> 00:28:47,390
an open-source talk it's time for us to

768
00:28:47,390 --> 00:28:50,210
ask you to help and join in fixing

769
00:28:50,210 --> 00:28:52,610
issues that got CVEs

770
00:28:52,610 --> 00:28:54,029
was the urgent and

771
00:28:54,029 --> 00:28:56,009
Fortin part on that Eisenhower urgency

772
00:28:56,009 --> 00:28:58,619
importance quadrant thing that the

773
00:28:58,619 --> 00:29:00,509
projects product security committee has

774
00:29:00,509 --> 00:29:03,059
responsibility for but that leaves a

775
00:29:03,059 --> 00:29:05,279
good bit of systemic work to do and so

776
00:29:05,279 --> 00:29:07,679
here are some things you could do and

777
00:29:07,679 --> 00:29:08,969
I'm just going to touch on a few from

778
00:29:08,969 --> 00:29:11,580
this slide so you could take one of

779
00:29:11,580 --> 00:29:13,799
those one of those areas where we have

780
00:29:13,799 --> 00:29:15,989
tons of reimplementation x' and make

781
00:29:15,989 --> 00:29:17,909
that Central Library

782
00:29:17,909 --> 00:29:20,369
you could you could create a better

783
00:29:20,369 --> 00:29:22,139
default audit policy either for the

784
00:29:22,139 --> 00:29:23,399
project or at least for some of the

785
00:29:23,399 --> 00:29:25,889
installers or distributions find some

786
00:29:25,889 --> 00:29:27,179
weak file permissions in the codebase

787
00:29:27,179 --> 00:29:30,629
and improve them here's getting a little

788
00:29:30,629 --> 00:29:32,279
bit more getting a little bit more

789
00:29:32,279 --> 00:29:34,559
focused or systemic years you could work

790
00:29:34,559 --> 00:29:37,919
on documentation for the developers that

791
00:29:37,919 --> 00:29:39,929
avoid these issues you can also focus

792
00:29:39,929 --> 00:29:42,570
that documentation on approvers so that

793
00:29:42,570 --> 00:29:44,190
the approvers are able to are able to

794
00:29:44,190 --> 00:29:46,469
catch more of this stuff on its way into

795
00:29:46,469 --> 00:29:48,200
the codebase

796
00:29:48,200 --> 00:29:50,279
finally you can attack kubernetes and

797
00:29:50,279 --> 00:29:51,749
find your volt find role in the votans

798
00:29:51,749 --> 00:29:53,999
and report them in and of course can

799
00:29:53,999 --> 00:29:56,039
participate in the next audit well go

800
00:29:56,039 --> 00:29:58,739
back oh yeah because it is I only saw

801
00:29:58,739 --> 00:30:00,539
like three people take pictures and this

802
00:30:00,539 --> 00:30:05,219
is your homework slide good boy we

803
00:30:05,219 --> 00:30:06,629
actually really do need your help we are

804
00:30:06,629 --> 00:30:09,149
getting started on the next round of

805
00:30:09,149 --> 00:30:10,830
audits we all have ways to get in touch

806
00:30:10,830 --> 00:30:13,080
with us at the end but like we need help

807
00:30:13,080 --> 00:30:15,210
now with all this stuff there's a ton of

808
00:30:15,210 --> 00:30:16,979
the qualitative stuff to come out of the

809
00:30:16,979 --> 00:30:19,859
reports are like real and we need to fix

810
00:30:19,859 --> 00:30:21,719
them so Trinities is more secure and

811
00:30:21,719 --> 00:30:24,419
CERN doesn't get hacked okay bones out

812
00:30:24,419 --> 00:30:30,389
or there'll be no drinks no drinks we're

813
00:30:30,389 --> 00:30:31,769
gonna take just a very brief second to

814
00:30:31,769 --> 00:30:34,109
say thank you everyone on the working

815
00:30:34,109 --> 00:30:36,450
group was really phenomenal Craig and

816
00:30:36,450 --> 00:30:38,279
Joel we already mentioned we're so

817
00:30:38,279 --> 00:30:38,969
helpful

818
00:30:38,969 --> 00:30:42,179
Chris at the CN CF not only helped us

819
00:30:42,179 --> 00:30:43,950
get the money to fund it but was our

820
00:30:43,950 --> 00:30:45,330
liaison with them for anything that we

821
00:30:45,330 --> 00:30:48,239
needed was incredibly helpful and all

822
00:30:48,239 --> 00:30:49,559
everyone who volunteered to work on the

823
00:30:49,559 --> 00:30:50,399
threat model I don't know we got

824
00:30:50,399 --> 00:30:53,580
everybody here but these people are very

825
00:30:53,580 --> 00:30:55,499
busy and they spent a ton of their time

826
00:30:55,499 --> 00:30:57,479
to make there's a quality report and I

827
00:30:57,479 --> 00:30:59,249
think it shows some good results if we

828
00:30:59,249 --> 00:31:01,259
missed anybody there it's my fault will

829
00:31:01,259 --> 00:31:04,049
publicly correct it we'd also like to

830
00:31:04,049 --> 00:31:06,210
thank the first to third-party firms to

831
00:31:06,210 --> 00:31:07,440
participate in kubernetes

832
00:31:07,440 --> 00:31:09,840
in third party kubernetes audits that's

833
00:31:09,840 --> 00:31:11,850
trail of bits and at Redis partners we

834
00:31:11,850 --> 00:31:13,830
want to give special thanks to Stefan

835
00:31:13,830 --> 00:31:15,419
Edwards and Bobby tonic for their great

836
00:31:15,419 --> 00:31:18,120
work and you should catch their talk to

837
00:31:18,120 --> 00:31:19,950
finally well thank you in advance

838
00:31:19,950 --> 00:31:22,679
let's go fast he's standing there all

839
00:31:22,679 --> 00:31:25,769
right okay cool so also there are five

840
00:31:25,769 --> 00:31:27,299
great attack and defense talks we want

841
00:31:27,299 --> 00:31:29,250
to recommend here the last one on the

842
00:31:29,250 --> 00:31:31,259
slide is my recent Scott Pilgrim themed

843
00:31:31,259 --> 00:31:32,879
attack and defense talk from blue hat a

844
00:31:32,879 --> 00:31:34,799
few weeks ago the others are talks at

845
00:31:34,799 --> 00:31:36,559
this conference so here's your schedule

846
00:31:36,559 --> 00:31:39,330
on Tuesday you've got Tim all players

847
00:31:39,330 --> 00:31:41,009
and Greg's talk on node privilege

848
00:31:41,009 --> 00:31:44,039
escalation then Wednesday you've got a

849
00:31:44,039 --> 00:31:46,230
trail of bits talking about their threat

850
00:31:46,230 --> 00:31:48,960
modeling work on Thursday catch Ian cold

851
00:31:48,960 --> 00:31:51,059
waters keynote in the morning and then

852
00:31:51,059 --> 00:31:54,210
Brad Guzman's 90 minute tutorial and

853
00:31:54,210 --> 00:31:56,490
most the talks here like 35 minutes

854
00:31:56,490 --> 00:31:58,080
you're getting 90 minutes that's some

855
00:31:58,080 --> 00:32:00,299
good stuff and that guy really puts a

856
00:32:00,299 --> 00:32:01,799
ton of material and it stops you've ever

857
00:32:01,799 --> 00:32:03,570
seen his talk before he also talks

858
00:32:03,570 --> 00:32:05,909
really fast so 90 minutes of Brad is

859
00:32:05,909 --> 00:32:09,389
gonna be something to see it's like it's

860
00:32:09,389 --> 00:32:11,159
got to be like three four five hours

861
00:32:11,159 --> 00:32:15,299
word okay we do we have time for

862
00:32:15,299 --> 00:32:17,820
questions all right can you are you

863
00:32:17,820 --> 00:32:20,250
gonna run a mic run a mic awesome thank

864
00:32:20,250 --> 00:32:22,860
you I'm good I'm gonna leave this slide

865
00:32:22,860 --> 00:32:24,299
up for questions though this is another

866
00:32:24,299 --> 00:32:27,179
photo slide it's all the reports links

867
00:32:27,179 --> 00:32:28,909
to everything we already talked about

868
00:32:28,909 --> 00:32:33,679
thank you big round of applause

869
00:32:36,070 --> 00:32:38,529
all right I think we can probably do two

870
00:32:38,529 --> 00:32:40,210
because we have a short closing we want

871
00:32:40,210 --> 00:32:43,679
to do all the way in the back

872
00:32:50,470 --> 00:32:53,649
Santiago what can a toda project can you

873
00:32:53,649 --> 00:32:58,869
go back to your threat model slide which

874
00:32:58,869 --> 00:32:59,619
one this one

875
00:32:59,619 --> 00:33:04,379
or what's the list of three-layer yeah

876
00:33:04,379 --> 00:33:08,470
this one Alan so I'm curious that you

877
00:33:08,470 --> 00:33:13,049
guys if at all considered things such as

878
00:33:13,049 --> 00:33:16,090
developer compromised or build system

879
00:33:16,090 --> 00:33:18,099
compromise or anything that happened at

880
00:33:18,099 --> 00:33:20,259
the left of the elements we talked about

881
00:33:20,259 --> 00:33:23,139
it a little bit the short answer is no

882
00:33:23,139 --> 00:33:26,229
long answer is we were trying to say as

883
00:33:26,229 --> 00:33:29,529
focused on the kubernetes as defined by

884
00:33:29,529 --> 00:33:31,869
what's in the kubernetes repo as opposed

885
00:33:31,869 --> 00:33:34,059
to kubernetes as defined as the thing

886
00:33:34,059 --> 00:33:35,830
that runs your application and the

887
00:33:35,830 --> 00:33:37,299
reason for that was just we didn't have

888
00:33:37,299 --> 00:33:40,749
time to cover every potential CNI plugin

889
00:33:40,749 --> 00:33:43,349
every potential container run time or

890
00:33:43,349 --> 00:33:45,700
the entire attack surface exists before

891
00:33:45,700 --> 00:33:47,529
and after the cluster is up and running

892
00:33:47,529 --> 00:33:49,330
I do think that's a fantastic place for

893
00:33:49,330 --> 00:33:51,549
research and probably where I would

894
00:33:51,549 --> 00:33:55,239
start as a malicious actor right but no

895
00:33:55,239 --> 00:33:56,769
we didn't cover in the threat model yeah

896
00:33:56,769 --> 00:33:58,419
when I talked when I talked about like

897
00:33:58,419 --> 00:34:00,190
when I talked about how we end up inside

898
00:34:00,190 --> 00:34:02,379
the cluster I left that I left out the

899
00:34:02,379 --> 00:34:04,149
idea of the malicious developer or the

900
00:34:04,149 --> 00:34:07,899
compromised developer but that's very

901
00:34:07,899 --> 00:34:09,339
realistic and that's where a lot of

902
00:34:09,339 --> 00:34:11,260
tasks start a lot of tax can start from

903
00:34:11,260 --> 00:34:13,780
but the developer would then start their

904
00:34:13,780 --> 00:34:15,099
malicious action from one of the

905
00:34:15,099 --> 00:34:17,500
components modeled right so you can at

906
00:34:17,500 --> 00:34:19,480
least build the depth defense for that

907
00:34:19,480 --> 00:34:22,418
attack well maybe not having the edge

908
00:34:22,418 --> 00:34:24,899
covered

909
00:34:25,100 --> 00:34:28,230
[Music]

910
00:34:30,320 --> 00:34:32,668
certainly the the what the gentleman

911
00:34:32,668 --> 00:34:33,989
said was if you that goes back to

912
00:34:33,989 --> 00:34:34,980
something else you were saying earlier

913
00:34:34,980 --> 00:34:36,780
which was if you have a lot of repeated

914
00:34:36,780 --> 00:34:38,790
code if things aren't if things are not

915
00:34:38,790 --> 00:34:40,889
as commented or not clear it's a whole

916
00:34:40,889 --> 00:34:44,369
lot easier for a compromise developer to

917
00:34:44,369 --> 00:34:47,070
to insert something bad and we've all

918
00:34:47,070 --> 00:34:48,359
seen that with Linux kernel I remember

919
00:34:48,359 --> 00:34:49,770
the first big Linux kernel privilege

920
00:34:49,770 --> 00:34:51,810
escalation was like a double equal sign

921
00:34:51,810 --> 00:34:53,129
being changed to a single equals sign

922
00:34:53,129 --> 00:34:58,879
meant you got really all right one more

923
00:35:00,800 --> 00:35:04,410
you mentioned about 240 page your white

924
00:35:04,410 --> 00:35:06,869
paper on the research that you have done

925
00:35:06,869 --> 00:35:09,119
where where is that is it available for

926
00:35:09,119 --> 00:35:11,430
download Oh at the end of this

927
00:35:11,430 --> 00:35:14,100
presentation or or every link you could

928
00:35:14,100 --> 00:35:17,790
ever want yeah

929
00:35:17,790 --> 00:35:20,609
so there a the report link is gonna take

930
00:35:20,609 --> 00:35:23,580
you to our repo on the Cadiz repo and it

931
00:35:23,580 --> 00:35:27,869
has all four papers and all of the

932
00:35:27,869 --> 00:35:30,359
supporting our A's and everything is up

933
00:35:30,359 --> 00:35:33,030
there all right thanks everybody thank

934
00:35:33,030 --> 00:35:37,609
you thanks everybody get a sticker

