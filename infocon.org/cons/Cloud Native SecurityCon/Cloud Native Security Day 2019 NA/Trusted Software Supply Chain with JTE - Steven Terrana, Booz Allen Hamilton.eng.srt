1
00:00:00,030 --> 00:00:03,030
hi Ron so I'm Steven Tirana I was lucky

2
00:00:03,030 --> 00:00:04,440
enough to be sitting next to Michael

3
00:00:04,440 --> 00:00:07,710
last night so I work at Booz Allen

4
00:00:07,710 --> 00:00:10,200
Hamilton I'm we're a federal consulting

5
00:00:10,200 --> 00:00:13,380
firm so my day-to-day life involves

6
00:00:13,380 --> 00:00:14,820
working with different government

7
00:00:14,820 --> 00:00:17,340
agencies to help modernize legacy IT

8
00:00:17,340 --> 00:00:21,900
systems or help develop new ones so this

9
00:00:21,900 --> 00:00:23,369
is actually the perfect talk to follow

10
00:00:23,369 --> 00:00:25,590
up what we just saw around some some

11
00:00:25,590 --> 00:00:26,789
dangers and your kubernetes

12
00:00:26,789 --> 00:00:28,289
configurations and today we're going to

13
00:00:28,289 --> 00:00:30,029
talk about building trusted software

14
00:00:30,029 --> 00:00:32,430
supply chains all right so how do we get

15
00:00:32,430 --> 00:00:34,710
applications onto our clusters that are

16
00:00:34,710 --> 00:00:38,820
as secure as they can be by default so

17
00:00:38,820 --> 00:00:40,110
today we're going to talk about what

18
00:00:40,110 --> 00:00:42,540
does dedsec ops actually mean walk

19
00:00:42,540 --> 00:00:44,010
through a couple different kinds of

20
00:00:44,010 --> 00:00:45,920
security testing that you can integrate

21
00:00:45,920 --> 00:00:48,420
and then we'll talk about what I've been

22
00:00:48,420 --> 00:00:49,980
working on the last couple years for how

23
00:00:49,980 --> 00:00:52,230
we implement this at the enterprise

24
00:00:52,230 --> 00:00:56,579
scale next slide so this is probably the

25
00:00:56,579 --> 00:00:58,859
most important slide and in the deck

26
00:00:58,859 --> 00:01:00,930
that I have I talked to a lot of

27
00:01:00,930 --> 00:01:02,820
different people about DevOps and I've

28
00:01:02,820 --> 00:01:05,069
never spoken to any two people that have

29
00:01:05,069 --> 00:01:07,439
the same definition so this slide serves

30
00:01:07,439 --> 00:01:09,869
to a level set on what I mean when I'm

31
00:01:09,869 --> 00:01:12,600
talking about dedsec ops so in general

32
00:01:12,600 --> 00:01:15,420
the DevOps cultural transformation if

33
00:01:15,420 --> 00:01:17,060
you will was about getting application

34
00:01:17,060 --> 00:01:19,950
developers and operations engineers to

35
00:01:19,950 --> 00:01:21,750
work together more effectively through

36
00:01:21,750 --> 00:01:23,540
things like infrastructure as code

37
00:01:23,540 --> 00:01:26,549
automated testing and in large part that

38
00:01:26,549 --> 00:01:29,430
was successful we can now reliably and

39
00:01:29,430 --> 00:01:31,619
confidently build test and deploy our

40
00:01:31,619 --> 00:01:35,189
applications but maybe specifically in

41
00:01:35,189 --> 00:01:36,420
the federal space but I'm willing to

42
00:01:36,420 --> 00:01:38,700
assume this applies more generally we

43
00:01:38,700 --> 00:01:40,110
were still seeing a pretty significant

44
00:01:40,110 --> 00:01:41,930
bottleneck when it came time to actually

45
00:01:41,930 --> 00:01:44,280
releasing software out to a production

46
00:01:44,280 --> 00:01:46,530
for our end users that's because we left

47
00:01:46,530 --> 00:01:49,140
out a very important team at no point

48
00:01:49,140 --> 00:01:50,700
had we pulled in the security team to

49
00:01:50,700 --> 00:01:52,590
see what the requirements were to be

50
00:01:52,590 --> 00:01:54,360
allowed to release our code into

51
00:01:54,360 --> 00:01:58,350
production so enter dead set cops and

52
00:01:58,350 --> 00:02:00,600
dead set cops if if you take away one

53
00:02:00,600 --> 00:02:02,759
sentence from the next half hour it's

54
00:02:02,759 --> 00:02:04,259
that dead SEC ops is all about

55
00:02:04,259 --> 00:02:06,570
incorporating security into every step

56
00:02:06,570 --> 00:02:07,590
of the software development lifecycle

57
00:02:07,590 --> 00:02:10,348
and shifting it left as much as possible

58
00:02:10,348 --> 00:02:12,030
to make sure that the security teams

59
00:02:12,030 --> 00:02:13,740
that your organization

60
00:02:13,740 --> 00:02:15,780
their requirements reflected in the

61
00:02:15,780 --> 00:02:17,220
automated processes to get your

62
00:02:17,220 --> 00:02:19,440
applications from your laptops out to

63
00:02:19,440 --> 00:02:22,080
end-users in production so there's

64
00:02:22,080 --> 00:02:24,810
there's six different boxes there I'm

65
00:02:24,810 --> 00:02:26,700
going to go through each of them and a

66
00:02:26,700 --> 00:02:28,320
lot more detail and sort of talk about

67
00:02:28,320 --> 00:02:29,490
what is it

68
00:02:29,490 --> 00:02:31,470
why do you actually care and what are

69
00:02:31,470 --> 00:02:33,300
some some common tools that I'm seeing

70
00:02:33,300 --> 00:02:37,410
folks use to implement this so first up

71
00:02:37,410 --> 00:02:40,140
is is application dependency scanning so

72
00:02:40,140 --> 00:02:43,620
we're all building applications most of

73
00:02:43,620 --> 00:02:45,090
us have not ran every single line of

74
00:02:45,090 --> 00:02:47,070
code that goes into our application and

75
00:02:47,070 --> 00:02:48,260
that's because we're pulling in

76
00:02:48,260 --> 00:02:50,460
third-party application dependencies

77
00:02:50,460 --> 00:02:53,670
they frequently take care of common

78
00:02:53,670 --> 00:02:55,770
coding problems that it's not worth the

79
00:02:55,770 --> 00:02:56,880
time for all of us to code it

80
00:02:56,880 --> 00:02:59,370
individually the challenge here is that

81
00:02:59,370 --> 00:03:01,160
because we didn't write that code

82
00:03:01,160 --> 00:03:03,120
there's frequently vulnerabilities

83
00:03:03,120 --> 00:03:04,740
that's sort of just how building

84
00:03:04,740 --> 00:03:07,830
software goes the the real problem

85
00:03:07,830 --> 00:03:09,540
though is when you don't patch these

86
00:03:09,540 --> 00:03:10,950
vulnerabilities all right so you'll

87
00:03:10,950 --> 00:03:13,170
start a project you'll pull in sort of

88
00:03:13,170 --> 00:03:15,870
the boilerplate you know react starter

89
00:03:15,870 --> 00:03:18,180
or you know spring boot starter API and

90
00:03:18,180 --> 00:03:21,780
you get a dependency list and you never

91
00:03:21,780 --> 00:03:23,730
patch it you know years go by you have a

92
00:03:23,730 --> 00:03:26,750
very full backlog understandably and

93
00:03:26,750 --> 00:03:28,560
upgrading the versions of these

94
00:03:28,560 --> 00:03:30,600
application dependencies never seems to

95
00:03:30,600 --> 00:03:33,840
be the highest priority so if we're

96
00:03:33,840 --> 00:03:36,390
talking about our dev sack ops pipelines

97
00:03:36,390 --> 00:03:38,400
as a trusted software supply chain you

98
00:03:38,400 --> 00:03:39,990
can think of these application

99
00:03:39,990 --> 00:03:42,270
dependencies as the ingredients that are

100
00:03:42,270 --> 00:03:44,520
going into building your application so

101
00:03:44,520 --> 00:03:46,770
application dependency scanning is all

102
00:03:46,770 --> 00:03:49,380
about how do we scan these to make sure

103
00:03:49,380 --> 00:03:50,670
that they don't have known

104
00:03:50,670 --> 00:03:53,850
vulnerabilities right so another

105
00:03:53,850 --> 00:03:55,500
challenge is that these are changing

106
00:03:55,500 --> 00:03:58,050
every single day it's very likely that

107
00:03:58,050 --> 00:04:01,380
new CVEs are being released that are

108
00:04:01,380 --> 00:04:04,110
exposing our applications to security

109
00:04:04,110 --> 00:04:07,050
vulnerabilities so how do we actually go

110
00:04:07,050 --> 00:04:09,959
about fixing this one best practice is

111
00:04:09,959 --> 00:04:11,760
to leverage a centralized artifact

112
00:04:11,760 --> 00:04:14,160
repository and do some actual scanning

113
00:04:14,160 --> 00:04:16,709
on these dependencies so a tool that

114
00:04:16,709 --> 00:04:19,320
I've used used in an fonda would be like

115
00:04:19,320 --> 00:04:22,169
Nexus Nexus which is an artifact

116
00:04:22,169 --> 00:04:23,940
repository the idea here is that instead

117
00:04:23,940 --> 00:04:25,770
of pulling your dependencies directly

118
00:04:25,770 --> 00:04:27,650
from the internet you can

119
00:04:27,650 --> 00:04:29,960
store these in a centralized artifact

120
00:04:29,960 --> 00:04:32,570
repository as artifacts are being pulled

121
00:04:32,570 --> 00:04:34,790
into your environment you can scan them

122
00:04:34,790 --> 00:04:36,080
to see if there is any known

123
00:04:36,080 --> 00:04:38,449
vulnerabilities against them and then

124
00:04:38,449 --> 00:04:40,280
you know the first day that you pull in

125
00:04:40,280 --> 00:04:42,500
a dependency it might be secure but

126
00:04:42,500 --> 00:04:44,780
tomorrow it might not so having all the

127
00:04:44,780 --> 00:04:46,699
dependencies that you're using in a

128
00:04:46,699 --> 00:04:49,130
common place lets you continuously scan

129
00:04:49,130 --> 00:04:51,139
what's in your environment so that you

130
00:04:51,139 --> 00:04:53,120
can generate a bill of materials that

131
00:04:53,120 --> 00:04:54,860
represent the ingredients comprising

132
00:04:54,860 --> 00:05:00,860
your application so let's assume we did

133
00:05:00,860 --> 00:05:03,139
that we know that all of our application

134
00:05:03,139 --> 00:05:04,940
dependencies are secure we're not

135
00:05:04,940 --> 00:05:06,620
pulling in an old Struck's package

136
00:05:06,620 --> 00:05:09,250
that's gonna expose the organization

137
00:05:09,250 --> 00:05:12,050
next up is actually scanning the code

138
00:05:12,050 --> 00:05:13,550
that we've written to make sure that

139
00:05:13,550 --> 00:05:14,720
does it doesn't have any inherent

140
00:05:14,720 --> 00:05:17,240
security vulnerabilities so that means

141
00:05:17,240 --> 00:05:19,699
did you hard code IP addresses or

142
00:05:19,699 --> 00:05:22,849
passwords so why does this actually

143
00:05:22,849 --> 00:05:25,820
matter the first is it can assist a lot

144
00:05:25,820 --> 00:05:27,800
in code review these tools can help you

145
00:05:27,800 --> 00:05:30,320
from a security practice perspective but

146
00:05:30,320 --> 00:05:32,210
it can also help from some of the

147
00:05:32,210 --> 00:05:34,699
industry standardized best practices so

148
00:05:34,699 --> 00:05:35,900
that when you're doing code reviews on

149
00:05:35,900 --> 00:05:38,720
your applications you can focus on you

150
00:05:38,720 --> 00:05:40,220
know the aspects that are specific to

151
00:05:40,220 --> 00:05:42,349
your team and allow these tools to

152
00:05:42,349 --> 00:05:45,260
automate the the quality of you know you

153
00:05:45,260 --> 00:05:46,250
don't have dead code in your application

154
00:05:46,250 --> 00:05:47,840
that's ever actually going to be run

155
00:05:47,840 --> 00:05:51,860
alongside those security bugs of you

156
00:05:51,860 --> 00:05:53,900
know you're not hard-coding IP addresses

157
00:05:53,900 --> 00:05:56,120
that Ian can go find and then hack the

158
00:05:56,120 --> 00:05:59,389
application some common tools to do this

159
00:05:59,389 --> 00:06:01,159
so in our cube is one of the most

160
00:06:01,159 --> 00:06:04,669
popular there's fortify there's a whole

161
00:06:04,669 --> 00:06:06,169
bunch of different tools that can scan

162
00:06:06,169 --> 00:06:07,490
the code you've written to make sure

163
00:06:07,490 --> 00:06:09,080
that there aren't inherently ulnar

164
00:06:09,080 --> 00:06:13,340
abilities in it so up until this point

165
00:06:13,340 --> 00:06:15,530
we've made sure that the ingredients in

166
00:06:15,530 --> 00:06:17,539
our application are secure we actually

167
00:06:17,539 --> 00:06:19,220
wrote some code and we scanned it to

168
00:06:19,220 --> 00:06:21,289
make sure that the code we were in isn't

169
00:06:21,289 --> 00:06:23,750
inherently insecure so next up we are a

170
00:06:23,750 --> 00:06:25,970
cube con so I would assume that a lot of

171
00:06:25,970 --> 00:06:27,349
us are building containerized

172
00:06:27,349 --> 00:06:29,840
applications so now that we've written

173
00:06:29,840 --> 00:06:32,060
code we want to package that pulling in

174
00:06:32,060 --> 00:06:34,010
those application dependencies into a a

175
00:06:34,010 --> 00:06:36,710
container image this is a new artifact

176
00:06:36,710 --> 00:06:38,779
so we need to scan it we need to make

177
00:06:38,779 --> 00:06:40,060
sure that the

178
00:06:40,060 --> 00:06:41,350
you know if we're just pulling random

179
00:06:41,350 --> 00:06:43,419
images from docker hub make sure that

180
00:06:43,419 --> 00:06:45,880
there aren't crypto minors on there

181
00:06:45,880 --> 00:06:47,650
making sure that there aren't vole nura

182
00:06:47,650 --> 00:06:49,419
below s packages and our container

183
00:06:49,419 --> 00:06:53,080
images so why does this matter it's the

184
00:06:53,080 --> 00:06:54,610
same thing as application dependencies

185
00:06:54,610 --> 00:06:55,690
if you're pulling straight from docker

186
00:06:55,690 --> 00:06:58,660
hub you don't know exactly what went

187
00:06:58,660 --> 00:07:01,510
into building that container image so

188
00:07:01,510 --> 00:07:04,000
what can you do to prevent this there's

189
00:07:04,000 --> 00:07:05,680
some tools out there that can do some

190
00:07:05,680 --> 00:07:07,780
container image scanning if you go into

191
00:07:07,780 --> 00:07:08,950
the vendor Hall there will probably be

192
00:07:08,950 --> 00:07:11,830
about 604 container image scanning tools

193
00:07:11,830 --> 00:07:15,220
that you can choose your favorite and

194
00:07:15,220 --> 00:07:17,590
what are some best practices to help

195
00:07:17,590 --> 00:07:21,639
with this so a lot of what I do is my

196
00:07:21,639 --> 00:07:23,800
day to day is being on a DevOps team

197
00:07:23,800 --> 00:07:25,510
that's that's supporting multiple

198
00:07:25,510 --> 00:07:28,870
application teams simultaneously a lot

199
00:07:28,870 --> 00:07:31,030
of application developers would prefer

200
00:07:31,030 --> 00:07:32,860
to just write code and not necessarily

201
00:07:32,860 --> 00:07:34,810
be concerned with how does my code turn

202
00:07:34,810 --> 00:07:36,700
into a container image how do I write a

203
00:07:36,700 --> 00:07:38,729
helm chart to play that on to kubernetes

204
00:07:38,729 --> 00:07:41,400
so when it comes to choosing base images

205
00:07:41,400 --> 00:07:43,690
one thing that I've seen be successful

206
00:07:43,690 --> 00:07:45,550
is to have a heavier centralized

207
00:07:45,550 --> 00:07:47,620
platform team or DevOps team actually

208
00:07:47,620 --> 00:07:50,020
manage some gold images that the

209
00:07:50,020 --> 00:07:52,000
application developers can start with so

210
00:07:52,000 --> 00:07:53,320
instead of just going out to docker hub

211
00:07:53,320 --> 00:07:55,990
for every team and choosing the the

212
00:07:55,990 --> 00:07:57,250
latest thing that seems like it does

213
00:07:57,250 --> 00:08:00,640
what you want you can sort of curate

214
00:08:00,640 --> 00:08:03,070
some starting points for the application

215
00:08:03,070 --> 00:08:04,479
development teams in your organization

216
00:08:04,479 --> 00:08:07,090
and then continuously scan those and be

217
00:08:07,090 --> 00:08:09,010
responsible for patching them so that

218
00:08:09,010 --> 00:08:10,750
you can sort of offload a lot of that

219
00:08:10,750 --> 00:08:12,310
responsibility from the application

220
00:08:12,310 --> 00:08:14,470
teams when you do that it means that the

221
00:08:14,470 --> 00:08:15,910
application developers now have a much

222
00:08:15,910 --> 00:08:18,490
smaller boundary of control that they're

223
00:08:18,490 --> 00:08:20,440
responsible for if they're inheriting

224
00:08:20,440 --> 00:08:23,530
all of the patches from this centralized

225
00:08:23,530 --> 00:08:25,510
base image then they're only responsible

226
00:08:25,510 --> 00:08:26,889
for patching their application

227
00:08:26,889 --> 00:08:28,120
dependencies or whatever they're

228
00:08:28,120 --> 00:08:33,610
customizing on top of that base image so

229
00:08:33,610 --> 00:08:35,500
security vulnerability is in general

230
00:08:35,500 --> 00:08:38,610
come in two flavors right you have

231
00:08:38,610 --> 00:08:41,919
vulnerable packages so we pulled in an

232
00:08:41,919 --> 00:08:43,958
insecure ingredient into our application

233
00:08:43,958 --> 00:08:47,080
or we pulled a image from docker hub

234
00:08:47,080 --> 00:08:49,839
that has crypto miners on it but there's

235
00:08:49,839 --> 00:08:52,600
also configuration errors which we saw a

236
00:08:52,600 --> 00:08:54,250
whole whole lot of and

237
00:08:54,250 --> 00:08:56,470
previous talk so a lot of those

238
00:08:56,470 --> 00:08:59,110
container image scanning tools that

239
00:08:59,110 --> 00:09:01,300
we're using to scan our container images

240
00:09:01,300 --> 00:09:04,690
can also scan the configuration of the

241
00:09:04,690 --> 00:09:05,620
infrastructure that we're building

242
00:09:05,620 --> 00:09:07,900
whether it's the underlying hosts or

243
00:09:07,900 --> 00:09:10,450
your kubernetes cluster or the

244
00:09:10,450 --> 00:09:12,850
configuration of a container image to

245
00:09:12,850 --> 00:09:13,930
make sure that it doesn't have known

246
00:09:13,930 --> 00:09:16,690
vulnerabilities so being a federal

247
00:09:16,690 --> 00:09:18,460
consultant there are a lot of federally

248
00:09:18,460 --> 00:09:20,680
regulated guidelines on how you're

249
00:09:20,680 --> 00:09:22,420
supposed to build and deploy

250
00:09:22,420 --> 00:09:24,580
infrastructure so things like secure

251
00:09:24,580 --> 00:09:26,800
technical implementation guides and this

252
00:09:26,800 --> 00:09:30,670
guidelines FISMA compliance so if you

253
00:09:30,670 --> 00:09:32,530
are working in that space as well a lot

254
00:09:32,530 --> 00:09:35,230
of these scanning tools have specific

255
00:09:35,230 --> 00:09:38,620
rule sets or profiles aligned with these

256
00:09:38,620 --> 00:09:41,350
different federally regulated policies

257
00:09:41,350 --> 00:09:44,350
and that can be very helpful if you're

258
00:09:44,350 --> 00:09:47,680
developing software in in the federal

259
00:09:47,680 --> 00:09:49,810
space you need to acquire what's called

260
00:09:49,810 --> 00:09:51,910
an authority to operate which means that

261
00:09:51,910 --> 00:09:54,220
someone is is taking responsibility for

262
00:09:54,220 --> 00:09:56,110
your application and saying that if

263
00:09:56,110 --> 00:09:58,060
something bad happens in production I'm

264
00:09:58,060 --> 00:10:00,730
responsible for that and understandably

265
00:10:00,730 --> 00:10:04,210
they are often wary to do this so making

266
00:10:04,210 --> 00:10:05,530
sure that what you're building and

267
00:10:05,530 --> 00:10:07,330
deploying complies with all of the

268
00:10:07,330 --> 00:10:09,700
federally regulated guidelines can

269
00:10:09,700 --> 00:10:12,339
greatly accelerate your acquisition of

270
00:10:12,339 --> 00:10:17,890
an authority to operate so up until this

271
00:10:17,890 --> 00:10:19,900
point I'm going to keep repeating it

272
00:10:19,900 --> 00:10:23,080
because it's important to remember that

273
00:10:23,080 --> 00:10:25,450
all these steps put together are what

274
00:10:25,450 --> 00:10:27,550
result in a trusted software supply

275
00:10:27,550 --> 00:10:29,110
chain right just like if we're building

276
00:10:29,110 --> 00:10:30,670
a car we want to know where all the

277
00:10:30,670 --> 00:10:31,930
different pieces are coming from and

278
00:10:31,930 --> 00:10:33,760
who's manufacturing it the same thing

279
00:10:33,760 --> 00:10:35,310
applies when you're building your

280
00:10:35,310 --> 00:10:37,690
applications so up until this point

281
00:10:37,690 --> 00:10:39,430
we've made sure that the ingredients of

282
00:10:39,430 --> 00:10:42,190
our application are secure by leveraging

283
00:10:42,190 --> 00:10:44,260
a centralized artifact repository and

284
00:10:44,260 --> 00:10:46,720
doing application dependency scanning we

285
00:10:46,720 --> 00:10:48,310
then wrote some code and we made sure

286
00:10:48,310 --> 00:10:50,410
that it's secure by doing some static

287
00:10:50,410 --> 00:10:51,730
code analysis and making sure we're not

288
00:10:51,730 --> 00:10:54,220
hard coding IP addresses or otherwise

289
00:10:54,220 --> 00:10:55,660
writing code that's going to leave us

290
00:10:55,660 --> 00:10:59,290
susceptible to exploitation after that

291
00:10:59,290 --> 00:11:01,270
we built an artifact in our container

292
00:11:01,270 --> 00:11:03,550
image if you're working in a large

293
00:11:03,550 --> 00:11:05,290
organization it's likely that there's a

294
00:11:05,290 --> 00:11:06,820
centralized team that helps with that

295
00:11:06,820 --> 00:11:08,680
and they might help you may

296
00:11:08,680 --> 00:11:11,709
a gold image that has some security

297
00:11:11,709 --> 00:11:14,529
configurations set up or help you with

298
00:11:14,529 --> 00:11:18,249
patching of that so and then we scanned

299
00:11:18,249 --> 00:11:19,629
it right so with continuous compliance

300
00:11:19,629 --> 00:11:21,910
we're able to then scan that container

301
00:11:21,910 --> 00:11:23,619
image to make sure that we're not

302
00:11:23,619 --> 00:11:25,029
running it as the root user

303
00:11:25,029 --> 00:11:26,619
make sure it's compliant with the

304
00:11:26,619 --> 00:11:29,019
different security profiles that help

305
00:11:29,019 --> 00:11:30,490
enforce some of these security

306
00:11:30,490 --> 00:11:32,679
configurations so that you can't get

307
00:11:32,679 --> 00:11:34,240
root access to the underlying host as

308
00:11:34,240 --> 00:11:37,389
easily as we just saw so at this point

309
00:11:37,389 --> 00:11:39,189
you can now actually deploy the

310
00:11:39,189 --> 00:11:40,779
application and make sure it's not

311
00:11:40,779 --> 00:11:43,540
susceptible so dynamic application

312
00:11:43,540 --> 00:11:45,610
security testing is a mouthful of a way

313
00:11:45,610 --> 00:11:47,889
to say penetration testing so we can

314
00:11:47,889 --> 00:11:49,629
actually deploy our applications and

315
00:11:49,629 --> 00:11:51,519
make sure that they're not susceptible

316
00:11:51,519 --> 00:11:55,360
to common exploitations you know if you

317
00:11:55,360 --> 00:11:57,429
have a forum is there a way for me to do

318
00:11:57,429 --> 00:11:59,800
arbitrary code execution things like

319
00:11:59,800 --> 00:12:03,220
that so a common tool to do this is a

320
00:12:03,220 --> 00:12:05,350
lot of SAP it's open source there's a

321
00:12:05,350 --> 00:12:06,939
whole bunch of other tools that can help

322
00:12:06,939 --> 00:12:09,670
out with this and what why does this one

323
00:12:09,670 --> 00:12:11,559
matter because everything up until now

324
00:12:11,559 --> 00:12:14,050
we hadn't actually deployed anything so

325
00:12:14,050 --> 00:12:15,730
penetration testing is how we can

326
00:12:15,730 --> 00:12:17,740
actually start to attack our deployed

327
00:12:17,740 --> 00:12:21,550
applications so this talk is primarily

328
00:12:21,550 --> 00:12:23,889
about the supply chain of our

329
00:12:23,889 --> 00:12:26,800
applications but another good tool or

330
00:12:26,800 --> 00:12:28,179
practice that you can be implementing is

331
00:12:28,179 --> 00:12:30,370
like continuous security monitoring of

332
00:12:30,370 --> 00:12:32,740
your clusters all right so there's the

333
00:12:32,740 --> 00:12:35,679
CNCs project Falco so if you had that

334
00:12:35,679 --> 00:12:37,509
configured on your cluster it can be

335
00:12:37,509 --> 00:12:40,600
monitoring all of the different you know

336
00:12:40,600 --> 00:12:41,980
colonel or commands that are happening

337
00:12:41,980 --> 00:12:43,480
on your node so if you're running

338
00:12:43,480 --> 00:12:45,939
penetration testing and you have Falco

339
00:12:45,939 --> 00:12:48,819
rules configured that can monitor the

340
00:12:48,819 --> 00:12:50,860
environment to make sure that only the

341
00:12:50,860 --> 00:12:52,389
correct commands or commands that you

342
00:12:52,389 --> 00:12:53,730
expect are being executed

343
00:12:53,730 --> 00:12:56,679
it's a powerful combination right

344
00:12:56,679 --> 00:12:58,240
anytime you see a new shell open a

345
00:12:58,240 --> 00:12:59,889
container there there's probably

346
00:12:59,889 --> 00:13:01,720
something you want to be aware of either

347
00:13:01,720 --> 00:13:03,339
somebody is debugging something or

348
00:13:03,339 --> 00:13:07,809
you're about to get hacked so the

349
00:13:07,809 --> 00:13:11,110
pipeline everything up until now there's

350
00:13:11,110 --> 00:13:12,610
a lot of different tools that can

351
00:13:12,610 --> 00:13:15,399
implement it and doing them all manually

352
00:13:15,399 --> 00:13:17,549
would take a significant amount of time

353
00:13:17,549 --> 00:13:21,069
if all of this put together is in part

354
00:13:21,069 --> 00:13:22,510
to help us accelerate our

355
00:13:22,510 --> 00:13:24,640
for delivery we need a way to tie all

356
00:13:24,640 --> 00:13:27,610
that together and automate it so that's

357
00:13:27,610 --> 00:13:29,470
what the pipelines responsible for so

358
00:13:29,470 --> 00:13:31,570
it's going to orchestrate all of these

359
00:13:31,570 --> 00:13:33,880
different software delivery related

360
00:13:33,880 --> 00:13:36,520
activities basically when a developer

361
00:13:36,520 --> 00:13:38,830
does something in github what types of

362
00:13:38,830 --> 00:13:40,960
automated scans or quality assurance

363
00:13:40,960 --> 00:13:43,810
tests are gonna be executed so why does

364
00:13:43,810 --> 00:13:46,510
this matter it helps reduce friction and

365
00:13:46,510 --> 00:13:47,860
adopting these practices through

366
00:13:47,860 --> 00:13:51,550
automation if the expectation was for

367
00:13:51,550 --> 00:13:53,410
every development team and a large

368
00:13:53,410 --> 00:13:56,590
organization to learn how to administer

369
00:13:56,590 --> 00:13:58,090
the tools that help you do these things

370
00:13:58,090 --> 00:14:02,020
and then further to go automate it it's

371
00:14:02,020 --> 00:14:03,480
going to be extremely challenging to

372
00:14:03,480 --> 00:14:06,370
find time in their sprint capacity to

373
00:14:06,370 --> 00:14:09,430
dedicate cycles to learning how to do

374
00:14:09,430 --> 00:14:12,070
continuous compliance or fine tune

375
00:14:12,070 --> 00:14:14,680
static code analysis profiles or what

376
00:14:14,680 --> 00:14:17,170
have you so by setting up an automated

377
00:14:17,170 --> 00:14:19,090
dev psych ops pipeline you can reduce

378
00:14:19,090 --> 00:14:20,740
friction and you know accelerate

379
00:14:20,740 --> 00:14:24,220
adoption the second is you can mitigate

380
00:14:24,220 --> 00:14:25,690
technical debt by doing this

381
00:14:25,690 --> 00:14:28,750
continuously another common pitfall is

382
00:14:28,750 --> 00:14:31,740
to push security to the right right so

383
00:14:31,740 --> 00:14:34,090
you've been developing something for six

384
00:14:34,090 --> 00:14:35,380
months you want to release it out to

385
00:14:35,380 --> 00:14:37,060
production and then you go do these

386
00:14:37,060 --> 00:14:38,980
security scans and you find several

387
00:14:38,980 --> 00:14:40,630
hundred vulnerabilities that need to be

388
00:14:40,630 --> 00:14:42,190
patched before you're actually going to

389
00:14:42,190 --> 00:14:45,040
be approved to do that deployment so by

390
00:14:45,040 --> 00:14:47,440
having an automated dedsec ops pipeline

391
00:14:47,440 --> 00:14:49,180
if you're doing this on every single

392
00:14:49,180 --> 00:14:53,200
change it's going to help you with you

393
00:14:53,200 --> 00:14:54,430
know continuously making sure that

394
00:14:54,430 --> 00:14:56,650
you're secure if you open a pull request

395
00:14:56,650 --> 00:14:58,740
and you add a dependency to your

396
00:14:58,740 --> 00:15:02,050
package.json or your pom file and you

397
00:15:02,050 --> 00:15:03,880
can immediately scan that it's going to

398
00:15:03,880 --> 00:15:06,580
be significantly easier to get that fast

399
00:15:06,580 --> 00:15:08,620
feedback and incorporate it then if you

400
00:15:08,620 --> 00:15:10,930
wait six months and had then have to go

401
00:15:10,930 --> 00:15:13,330
back and sort of remember the context of

402
00:15:13,330 --> 00:15:15,670
why you added that in the first place so

403
00:15:15,670 --> 00:15:17,980
by doing it continuously that fast

404
00:15:17,980 --> 00:15:20,080
feedback can help a lot with with fixing

405
00:15:20,080 --> 00:15:22,870
problems as they arise and then again

406
00:15:22,870 --> 00:15:25,090
from the federal space authorizing

407
00:15:25,090 --> 00:15:26,560
officials are those people that are

408
00:15:26,560 --> 00:15:28,330
willing to take responsibility for your

409
00:15:28,330 --> 00:15:31,120
applications so if you can communicate

410
00:15:31,120 --> 00:15:32,710
to them that every single change is

411
00:15:32,710 --> 00:15:34,210
being run through all these different

412
00:15:34,210 --> 00:15:36,040
kinds of security testing

413
00:15:36,040 --> 00:15:37,089
helps them feel a lot more comfortable

414
00:15:37,089 --> 00:15:39,130
which if they're comfortable they're

415
00:15:39,130 --> 00:15:42,459
gonna be a lot more eager or willing to

416
00:15:42,459 --> 00:15:45,000
do frequent deployments to production

417
00:15:45,000 --> 00:15:48,029
does anyone work in the federal space

418
00:15:48,029 --> 00:15:50,259
all right let's see a couple hands so

419
00:15:50,259 --> 00:15:52,029
I'm hoping some of these concepts are

420
00:15:52,029 --> 00:15:55,449
familiar I assume a lot of this you know

421
00:15:55,449 --> 00:15:58,509
strict approach to software delivery

422
00:15:58,509 --> 00:16:00,459
also applies in industries like you know

423
00:16:00,459 --> 00:16:03,220
finance or healthcare anywhere that you

424
00:16:03,220 --> 00:16:07,360
have like PII or payment data or really

425
00:16:07,360 --> 00:16:08,740
any data no one wants to go get their

426
00:16:08,740 --> 00:16:11,019
data hacked but especially in the

427
00:16:11,019 --> 00:16:13,839
federal space getting an authority to

428
00:16:13,839 --> 00:16:16,269
operate for a new application if you're

429
00:16:16,269 --> 00:16:18,940
lucky takes three months if you're

430
00:16:18,940 --> 00:16:22,269
average it takes a year and a half so by

431
00:16:22,269 --> 00:16:24,130
implementing a lot of these practices

432
00:16:24,130 --> 00:16:26,800
you can drastically reduce how long it's

433
00:16:26,800 --> 00:16:28,569
going to take for a new government

434
00:16:28,569 --> 00:16:30,519
system to be approved and deployed into

435
00:16:30,519 --> 00:16:36,180
production so putting it all together

436
00:16:36,180 --> 00:16:39,069
all of the security testing that we're

437
00:16:39,069 --> 00:16:41,230
talking about is in addition to all of

438
00:16:41,230 --> 00:16:44,290
the other kinds of automated testing

439
00:16:44,290 --> 00:16:46,360
that the industry has been doing for

440
00:16:46,360 --> 00:16:51,370
several years so when you're dealing

441
00:16:51,370 --> 00:16:53,769
with enterprise scale adoption of DEP

442
00:16:53,769 --> 00:16:56,500
SEC ops or you have a diverse

443
00:16:56,500 --> 00:16:58,720
application portfolio which lets as

444
00:16:58,720 --> 00:17:00,730
consultants speak for there's different

445
00:17:00,730 --> 00:17:02,819
kinds of apps that your organization

446
00:17:02,819 --> 00:17:05,349
depending on the application there might

447
00:17:05,349 --> 00:17:07,030
be different tools that are being used

448
00:17:07,030 --> 00:17:08,349
to implement each of these different

449
00:17:08,349 --> 00:17:10,750
practices all right so if you take an

450
00:17:10,750 --> 00:17:13,179
easy example in in you know testing if

451
00:17:13,179 --> 00:17:14,770
you've got a front-end application it

452
00:17:14,770 --> 00:17:16,900
might be using something like karma or

453
00:17:16,900 --> 00:17:19,869
just to do it's you know testing if it's

454
00:17:19,869 --> 00:17:21,790
a back-end application it could be

455
00:17:21,790 --> 00:17:26,409
j-unit or or python some teams in an

456
00:17:26,409 --> 00:17:28,329
organization might be using sonar cube

457
00:17:28,329 --> 00:17:30,490
for static code analysis other teams

458
00:17:30,490 --> 00:17:33,370
might be using fortify so the purpose of

459
00:17:33,370 --> 00:17:35,409
this slide is is admittedly to be a

460
00:17:35,409 --> 00:17:37,380
little intimidating there's a lot of

461
00:17:37,380 --> 00:17:40,210
activities that go on in automating a

462
00:17:40,210 --> 00:17:43,900
fully matured dedsec ops pipeline and if

463
00:17:43,900 --> 00:17:46,960
you're a central dev ops team that's

464
00:17:46,960 --> 00:17:48,669
helping automate these software delivery

465
00:17:48,669 --> 00:17:49,980
processes for a lot of

466
00:17:49,980 --> 00:17:53,200
different application teams at the same

467
00:17:53,200 --> 00:17:55,750
time a lot of the tools are actually

468
00:17:55,750 --> 00:17:58,720
most are all of the tools in the CI CD

469
00:17:58,720 --> 00:18:00,670
landscape right now are primarily

470
00:18:00,670 --> 00:18:04,120
focused on individual applications you

471
00:18:04,120 --> 00:18:06,270
get a pipeline as code artifact that

472
00:18:06,270 --> 00:18:08,920
represents as code what your software

473
00:18:08,920 --> 00:18:10,690
delivery process is going to be when a

474
00:18:10,690 --> 00:18:13,780
change happens so if you're supporting

475
00:18:13,780 --> 00:18:16,510
let's take an example that I've had to

476
00:18:16,510 --> 00:18:17,770
work with something like sixty

477
00:18:17,770 --> 00:18:20,140
micro-services being developed by

478
00:18:20,140 --> 00:18:21,640
different contractors that are

479
00:18:21,640 --> 00:18:23,620
geographically dispersed in using

480
00:18:23,620 --> 00:18:27,130
different tools managing a dedsec ops

481
00:18:27,130 --> 00:18:28,900
pipeline for all of those applications

482
00:18:28,900 --> 00:18:30,880
at the same time is extremely

483
00:18:30,880 --> 00:18:34,030
challenging because usually the way that

484
00:18:34,030 --> 00:18:37,150
it works is you have a jenkins file if

485
00:18:37,150 --> 00:18:39,010
you're using jenkins that you've copied

486
00:18:39,010 --> 00:18:41,560
and pasted and then tweaked to fit the

487
00:18:41,560 --> 00:18:43,060
specific set of tools that are being

488
00:18:43,060 --> 00:18:45,580
used for any given application and

489
00:18:45,580 --> 00:18:47,590
that's duplicated across all the source

490
00:18:47,590 --> 00:18:49,870
code repositories in your organization

491
00:18:49,870 --> 00:18:52,780
so let's say over time you want to make

492
00:18:52,780 --> 00:18:55,810
a change to your dedsec ops pipeline you

493
00:18:55,810 --> 00:18:57,790
know you're continuously improving

494
00:18:57,790 --> 00:18:59,830
you've identified something that would

495
00:18:59,830 --> 00:19:02,080
make this process flow better if you

496
00:19:02,080 --> 00:19:03,670
want to roll that change out now you

497
00:19:03,670 --> 00:19:07,120
have to open 64 requests and modify 60

498
00:19:07,120 --> 00:19:09,790
different pipelines and from a Booz

499
00:19:09,790 --> 00:19:12,730
Allen perspective as a consultant were

500
00:19:12,730 --> 00:19:14,380
we're doing this kind of large-scale

501
00:19:14,380 --> 00:19:17,050
support of dedsec ops pipelines at

502
00:19:17,050 --> 00:19:19,450
multiple clients so what we were finding

503
00:19:19,450 --> 00:19:22,930
was that within any given client you've

504
00:19:22,930 --> 00:19:24,670
got a whole bunch of duplication with

505
00:19:24,670 --> 00:19:26,860
these application specific pipeline

506
00:19:26,860 --> 00:19:29,500
implementations and then if you zoom out

507
00:19:29,500 --> 00:19:31,420
across all of Booz Allen

508
00:19:31,420 --> 00:19:33,730
we've got DevOps engineers in the firm

509
00:19:33,730 --> 00:19:35,230
at all of our different client

510
00:19:35,230 --> 00:19:36,670
engagements that are doing the same

511
00:19:36,670 --> 00:19:38,590
thing so we were finding that I was

512
00:19:38,590 --> 00:19:40,390
taking something like four to six months

513
00:19:40,390 --> 00:19:42,130
when our project started to end up with

514
00:19:42,130 --> 00:19:46,590
a fully mature dev SEC ops pipeline and

515
00:19:46,590 --> 00:19:50,020
the ongoing sustainment of that pipeline

516
00:19:50,020 --> 00:19:53,560
was pretty high because of the these the

517
00:19:53,560 --> 00:19:55,590
implementation of this automated process

518
00:19:55,590 --> 00:19:58,810
was a pretty tailored implementation for

519
00:19:58,810 --> 00:20:01,870
for each application so about three

520
00:20:01,870 --> 00:20:03,700
years ago we

521
00:20:03,700 --> 00:20:06,900
we sort of sat down and said every

522
00:20:06,900 --> 00:20:09,550
application regardless of what tool it's

523
00:20:09,550 --> 00:20:12,250
using is going to follow basically the

524
00:20:12,250 --> 00:20:14,260
same process or a set of processes at

525
00:20:14,260 --> 00:20:17,320
any given organization you're going to

526
00:20:17,320 --> 00:20:19,180
build something you're going to test it

527
00:20:19,180 --> 00:20:21,100
somehow and package it you're going to

528
00:20:21,100 --> 00:20:23,860
deploy it and you're going to test it it

529
00:20:23,860 --> 00:20:25,810
doesn't matter if you're building a jar

530
00:20:25,810 --> 00:20:29,740
file to SCP it onto a server or your you

531
00:20:29,740 --> 00:20:31,540
know building a container image and

532
00:20:31,540 --> 00:20:32,680
deploying it with helm do with

533
00:20:32,680 --> 00:20:34,480
kubernetes cluster there's generic

534
00:20:34,480 --> 00:20:37,350
workflow is largely the same and

535
00:20:37,350 --> 00:20:40,000
furthermore a lot of the time the

536
00:20:40,000 --> 00:20:42,610
implementation of those specific steps

537
00:20:42,610 --> 00:20:45,490
is pretty undifferentiated work there

538
00:20:45,490 --> 00:20:48,070
was no reason that every DevOps engineer

539
00:20:48,070 --> 00:20:50,080
at the firm should Google sonar cube

540
00:20:50,080 --> 00:20:52,210
plus Jenkins find the six lines of

541
00:20:52,210 --> 00:20:54,430
pipeline code that go into doing static

542
00:20:54,430 --> 00:20:56,740
code analysis and copy and paste it into

543
00:20:56,740 --> 00:20:59,680
their Jenkins files so we started out

544
00:20:59,680 --> 00:21:01,480
trying to figure out like how can we

545
00:21:01,480 --> 00:21:03,850
accelerate pipeline development to ease

546
00:21:03,850 --> 00:21:07,600
the adoption of these practices and how

547
00:21:07,600 --> 00:21:10,200
can we ease the maintenance of

548
00:21:10,200 --> 00:21:15,130
large-scale enterprise level dedsec ops

549
00:21:15,130 --> 00:21:18,700
pipelines in three years later and more

550
00:21:18,700 --> 00:21:21,400
weekends than I want to admit we have

551
00:21:21,400 --> 00:21:24,460
the Jenkins templating engine how many

552
00:21:24,460 --> 00:21:26,050
people are using Jenkins or familiar

553
00:21:26,050 --> 00:21:30,090
with Jenkins that's a lot of hands

554
00:21:30,090 --> 00:21:34,420
so Jenkins by default you have a Jenkins

555
00:21:34,420 --> 00:21:36,850
file that goes in the source code

556
00:21:36,850 --> 00:21:39,070
repository and now it outlines what your

557
00:21:39,070 --> 00:21:42,400
pipeline is going to do so with the

558
00:21:42,400 --> 00:21:44,530
Jenkins templating engine the idea was

559
00:21:44,530 --> 00:21:48,430
why don't we just define a pipeline kind

560
00:21:48,430 --> 00:21:50,800
of like we did on this slide in a tool

561
00:21:50,800 --> 00:21:53,110
agnostic templated way while still

562
00:21:53,110 --> 00:21:54,730
giving teams the flexibility they need

563
00:21:54,730 --> 00:21:56,680
to choose the tools that are that are

564
00:21:56,680 --> 00:21:59,710
the best for the job so this is what I

565
00:21:59,710 --> 00:22:01,150
was able to throw together sitting next

566
00:22:01,150 --> 00:22:04,120
to Michael yesterday as a representation

567
00:22:04,120 --> 00:22:06,340
of what that looks like in the middle

568
00:22:06,340 --> 00:22:08,560
you have what would be a template they

569
00:22:08,560 --> 00:22:10,420
get a lot more complicated than that but

570
00:22:10,420 --> 00:22:12,970
from a conceptual standpoint you're

571
00:22:12,970 --> 00:22:14,980
going to do something like build scan

572
00:22:14,980 --> 00:22:17,270
deploy and test you can

573
00:22:17,270 --> 00:22:19,840
one application that's using docker

574
00:22:19,840 --> 00:22:21,800
performing static code analysis with

575
00:22:21,800 --> 00:22:25,720
sonar cube deploying it with helm and

576
00:22:25,720 --> 00:22:28,280
using selenium for integration testing

577
00:22:28,280 --> 00:22:29,740
or you could have the second application

578
00:22:29,740 --> 00:22:33,440
that's building an app with Gradle using

579
00:22:33,440 --> 00:22:35,930
fortify to scan it using ansible to

580
00:22:35,930 --> 00:22:38,120
automate some deployments and then using

581
00:22:38,120 --> 00:22:40,100
something like rest assured to test its

582
00:22:40,100 --> 00:22:43,910
restful api the power here is that you

583
00:22:43,910 --> 00:22:46,160
no longer have individualized jenkins

584
00:22:46,160 --> 00:22:48,920
files you have tool agnostic pipeline

585
00:22:48,920 --> 00:22:51,020
templates that can be applied at the

586
00:22:51,020 --> 00:22:54,800
organization level where you get to

587
00:22:54,800 --> 00:22:56,720
specify what are the organizationally

588
00:22:56,720 --> 00:22:59,240
approved software delivery practices to

589
00:22:59,240 --> 00:23:01,370
get code into production while still

590
00:23:01,370 --> 00:23:03,050
giving teams the flexibility that they

591
00:23:03,050 --> 00:23:04,850
need to choose the best tools for the

592
00:23:04,850 --> 00:23:09,370
job so i have about five minutes

593
00:23:09,370 --> 00:23:13,340
real quick on that i'll go over the the

594
00:23:13,340 --> 00:23:14,750
value of it i think i've got five

595
00:23:14,750 --> 00:23:16,550
minutes so i might show a quick demo or

596
00:23:16,550 --> 00:23:19,790
open it up to questions so what's the

597
00:23:19,790 --> 00:23:21,860
what's the value of doing it this way

598
00:23:21,860 --> 00:23:24,040
the first is organizational governance

599
00:23:24,040 --> 00:23:27,080
so if you have 60 copy and pasted

600
00:23:27,080 --> 00:23:29,630
jenkins files you have no assurance that

601
00:23:29,630 --> 00:23:31,220
everyone is actually following the same

602
00:23:31,220 --> 00:23:34,490
process everyone went and implemented it

603
00:23:34,490 --> 00:23:38,060
in their own way which was a significant

604
00:23:38,060 --> 00:23:41,000
waste of time to be honest so the second

605
00:23:41,000 --> 00:23:42,770
value there is optimizing pipeline code

606
00:23:42,770 --> 00:23:44,900
reuse like I said there's no reason

607
00:23:44,900 --> 00:23:46,970
everyone should go figure out how to do

608
00:23:46,970 --> 00:23:49,640
so in our cube analysis and Jenkins like

609
00:23:49,640 --> 00:23:52,010
we all already know if you Google is the

610
00:23:52,010 --> 00:23:54,290
first result so at Booz Allen we were

611
00:23:54,290 --> 00:23:57,020
able to open-source our pipeline

612
00:23:57,020 --> 00:23:59,360
libraries right so the tool specific

613
00:23:59,360 --> 00:24:01,550
implementations of different steps of

614
00:24:01,550 --> 00:24:03,830
that pipeline are organized into what we

615
00:24:03,830 --> 00:24:05,780
call pipeline libraries so if you want

616
00:24:05,780 --> 00:24:07,700
to do a deployment with helm there's a

617
00:24:07,700 --> 00:24:10,160
helm library that contributes a deploy

618
00:24:10,160 --> 00:24:12,890
to step so through that we've seen

619
00:24:12,890 --> 00:24:15,500
pipeline development time go from four

620
00:24:15,500 --> 00:24:17,660
to six months to a four to six days if

621
00:24:17,660 --> 00:24:19,280
you're leveraging tools that we've

622
00:24:19,280 --> 00:24:20,990
already integrated with and if you

623
00:24:20,990 --> 00:24:24,020
aren't writing a new library is the same

624
00:24:24,020 --> 00:24:25,370
thing as writing regular jenkins

625
00:24:25,370 --> 00:24:27,290
pipeline is code it's just a slightly

626
00:24:27,290 --> 00:24:29,330
different way to organize it so you can

627
00:24:29,330 --> 00:24:31,160
dynamically compose your pipeline

628
00:24:31,160 --> 00:24:33,500
leveraging a reusable template instead

629
00:24:33,500 --> 00:24:35,270
of building individualized pipelines for

630
00:24:35,270 --> 00:24:38,140
each application and then the last point

631
00:24:38,140 --> 00:24:42,260
having had to support a 60 micro service

632
00:24:42,260 --> 00:24:45,230
system worth with copied and pasted

633
00:24:45,230 --> 00:24:47,780
jenga's files in my humble opinion it is

634
00:24:47,780 --> 00:24:49,850
a lot easier to manage a pipeline

635
00:24:49,850 --> 00:24:51,410
template that outlines the business

636
00:24:51,410 --> 00:24:53,030
logic of your software delivery

637
00:24:53,030 --> 00:24:56,090
processes and then modularized tool

638
00:24:56,090 --> 00:24:58,370
libraries than it is to manage those

639
00:24:58,370 --> 00:25:03,980
sixty separate jenkins files so it's

640
00:25:03,980 --> 00:25:05,750
open source it's on github if you're

641
00:25:05,750 --> 00:25:06,950
interested in it it's called the

642
00:25:06,950 --> 00:25:08,990
template engine plug-in there's a whole

643
00:25:08,990 --> 00:25:12,050
bunch of documentation at this point I

644
00:25:12,050 --> 00:25:13,760
don't know that I have time for a demo

645
00:25:13,760 --> 00:25:16,310
but I'm always happy to to talk if

646
00:25:16,310 --> 00:25:19,220
anyone's interested so I hope that I

647
00:25:19,220 --> 00:25:21,650
hope that resonates for you you have

648
00:25:21,650 --> 00:25:23,120
three minutes go ahead and do your demo

649
00:25:23,120 --> 00:25:24,470
and then we're going into break anyway

650
00:25:24,470 --> 00:25:26,810
so we lose a little bit of time to break

651
00:25:26,810 --> 00:25:30,260
them sorry all right I have three

652
00:25:30,260 --> 00:25:31,610
minutes that's that should be enough

653
00:25:31,610 --> 00:25:35,570
time so this is Jenkins I'm gonna demo a

654
00:25:35,570 --> 00:25:37,910
pipeline that primarily shows off the

655
00:25:37,910 --> 00:25:40,700
templating side of things so there's a

656
00:25:40,700 --> 00:25:42,980
couple different use cases and I'm gonna

657
00:25:42,980 --> 00:25:45,740
go admittedly a little quick here to

658
00:25:45,740 --> 00:25:48,400
show all the different examples here but

659
00:25:48,400 --> 00:25:51,500
on the top we have a pipeline template

660
00:25:51,500 --> 00:25:54,380
so nothing there is specific to a tool

661
00:25:54,380 --> 00:25:56,480
it says we're gonna do build static code

662
00:25:56,480 --> 00:25:58,420
analysis and then deploy to dev

663
00:25:58,420 --> 00:26:00,920
alongside your pipeline template you get

664
00:26:00,920 --> 00:26:03,080
a configuration file so instead of

665
00:26:03,080 --> 00:26:05,810
defining a 700 line Jenkins file for

666
00:26:05,810 --> 00:26:07,790
each application we were able to define

667
00:26:07,790 --> 00:26:10,460
a pipeline configuration that's going to

668
00:26:10,460 --> 00:26:12,050
implement this template so it's going to

669
00:26:12,050 --> 00:26:13,940
read a lot like your text sack where

670
00:26:13,940 --> 00:26:15,830
there's a library section that's going

671
00:26:15,830 --> 00:26:18,050
to pull in exactly what tools are being

672
00:26:18,050 --> 00:26:20,320
used to implement these different steps

673
00:26:20,320 --> 00:26:22,700
so in this case we've got a maven

674
00:26:22,700 --> 00:26:25,730
application using sonar cube ansible for

675
00:26:25,730 --> 00:26:28,760
deployment and then a Splunk library for

676
00:26:28,760 --> 00:26:31,250
for some monitoring of the pipeline down

677
00:26:31,250 --> 00:26:32,780
below we have an application

678
00:26:32,780 --> 00:26:35,900
environments definition every everyone

679
00:26:35,900 --> 00:26:37,580
has different application environments

680
00:26:37,580 --> 00:26:39,170
and different numbers of them so here

681
00:26:39,170 --> 00:26:40,870
we're able to define a dev environment

682
00:26:40,870 --> 00:26:43,490
which we can use in our ansible library

683
00:26:43,490 --> 00:26:44,570
for deployment

684
00:26:44,570 --> 00:26:47,870
so if we click build or actually since

685
00:26:47,870 --> 00:26:49,430
we've got three minutes I'll show an

686
00:26:49,430 --> 00:26:52,310
existing run it's going to pull in all

687
00:26:52,310 --> 00:26:54,770
these libraries dynamically compose what

688
00:26:54,770 --> 00:26:56,510
that template actually means with this

689
00:26:56,510 --> 00:26:59,020
configuration and then go and execute it

690
00:26:59,020 --> 00:27:02,300
so if we scale that out it's

691
00:27:02,300 --> 00:27:04,190
traditionally not going to be defined in

692
00:27:04,190 --> 00:27:06,710
the Jenkins UI you can apply this to an

693
00:27:06,710 --> 00:27:09,890
entire github repository or an entire

694
00:27:09,890 --> 00:27:12,290
github organization alright so if I have

695
00:27:12,290 --> 00:27:15,320
a single application instead of having a

696
00:27:15,320 --> 00:27:17,570
Jenkins file in the repository I can

697
00:27:17,570 --> 00:27:19,640
pull it out into a centralized pipeline

698
00:27:19,640 --> 00:27:21,860
configuration repository and I can

699
00:27:21,860 --> 00:27:23,450
achieve the exact same thing without

700
00:27:23,450 --> 00:27:25,190
giving developers access to the Jenkins

701
00:27:25,190 --> 00:27:28,070
file and by leveraging these modularized

702
00:27:28,070 --> 00:27:31,280
tool agnostic pipelines so the real

703
00:27:31,280 --> 00:27:34,190
power here is if we go to an entire

704
00:27:34,190 --> 00:27:36,350
github organization I can define

705
00:27:36,350 --> 00:27:38,210
multiple configuration files that have a

706
00:27:38,210 --> 00:27:41,360
hierarchical taxonomy right so maybe at

707
00:27:41,360 --> 00:27:43,400
the entire organization level everyone's

708
00:27:43,400 --> 00:27:45,410
using sonar cube so I can define

709
00:27:45,410 --> 00:27:47,390
everyone has to use sonar cube and then

710
00:27:47,390 --> 00:27:49,100
give teams the flexibility they need to

711
00:27:49,100 --> 00:27:51,380
pick what specific libraries they're

712
00:27:51,380 --> 00:27:53,510
using for other things so here we've got

713
00:27:53,510 --> 00:27:57,050
a Gradle application it's going to look

714
00:27:57,050 --> 00:27:59,660
like you would expect Gradle sonar cube

715
00:27:59,660 --> 00:28:01,790
analysis I can go over to the maven

716
00:28:01,790 --> 00:28:03,770
application and it's going to be using

717
00:28:03,770 --> 00:28:06,410
maven in sonar cube analysis so both of

718
00:28:06,410 --> 00:28:08,210
these repositories and all of these jobs

719
00:28:08,210 --> 00:28:09,770
are leveraging the exact same pipeline

720
00:28:09,770 --> 00:28:11,660
template so I know that every

721
00:28:11,660 --> 00:28:13,310
development team in my organization is

722
00:28:13,310 --> 00:28:15,560
following the same software delivery

723
00:28:15,560 --> 00:28:17,330
practices and that same pipeline

724
00:28:17,330 --> 00:28:19,250
template and now we're giving teams the

725
00:28:19,250 --> 00:28:21,320
flexibility they need if you want to

726
00:28:21,320 --> 00:28:23,180
because governance is a dial and the

727
00:28:23,180 --> 00:28:25,340
framework to choose the best tools for

728
00:28:25,340 --> 00:28:25,610
the job

729
00:28:25,610 --> 00:28:27,950
so like I said I think I'm out of time

730
00:28:27,950 --> 00:28:29,660
but I'm more than happy to talk in the

731
00:28:29,660 --> 00:28:31,580
hallway track if if this resonates with

732
00:28:31,580 --> 00:28:34,460
anybody very much good round of applause

733
00:28:34,460 --> 00:28:41,180
[Applause]

