1
00:00:00,399 --> 00:00:02,639
hi welcome to the section in this

2
00:00:02,639 --> 00:00:05,520
session we'll talk about how open policy

3
00:00:05,520 --> 00:00:07,200
agent gatekeeper

4
00:00:07,200 --> 00:00:09,840
can help you to strengthen your supply

5
00:00:09,840 --> 00:00:11,360
chain security

6
00:00:11,360 --> 00:00:12,960
i'm rita

7
00:00:12,960 --> 00:00:14,639
hello i'm sartech

8
00:00:14,639 --> 00:00:16,400
we are maintainers of the oppa

9
00:00:16,400 --> 00:00:18,320
gatekeeper project

10
00:00:18,320 --> 00:00:21,439
so uh first you might ask well what is

11
00:00:21,439 --> 00:00:22,800
gatekeeper

12
00:00:22,800 --> 00:00:26,000
um well gatekeeper is a customizable

13
00:00:26,000 --> 00:00:29,519
kubernetes emission and mutation webhook

14
00:00:29,519 --> 00:00:32,079
it helps us enforce policies and

15
00:00:32,079 --> 00:00:33,680
strengthen governance

16
00:00:33,680 --> 00:00:36,960
it enforces policies executed by the

17
00:00:36,960 --> 00:00:38,960
open policy agent

18
00:00:38,960 --> 00:00:41,120
a policy agent for

19
00:00:41,120 --> 00:00:43,760
cloud native environments and it is a

20
00:00:43,760 --> 00:00:46,239
cncf graduated project

21
00:00:46,239 --> 00:00:48,000
let's see how you can leverage it to

22
00:00:48,000 --> 00:00:50,399
extend supply chain security and

23
00:00:50,399 --> 00:00:51,920
governance in your kubernetes

24
00:00:51,920 --> 00:00:53,440
environment

25
00:00:53,440 --> 00:00:55,199
all right so let's uh

26
00:00:55,199 --> 00:00:57,840
dive a little deeper in gatekeeper for

27
00:00:57,840 --> 00:01:00,000
supply chain security

28
00:01:00,000 --> 00:01:02,320
with external data feature

29
00:01:02,320 --> 00:01:04,000
gatekeeper can now

30
00:01:04,000 --> 00:01:06,880
be used for validating and mutating

31
00:01:06,880 --> 00:01:09,360
kubernetes objects using

32
00:01:09,360 --> 00:01:12,240
the data that is coming from external

33
00:01:12,240 --> 00:01:14,720
data sources in a generic and plugable

34
00:01:14,720 --> 00:01:16,080
way

35
00:01:16,080 --> 00:01:18,880
gatekeeper is an interface to external

36
00:01:18,880 --> 00:01:22,560
data sources such as image registries

37
00:01:22,560 --> 00:01:25,040
and it is developed using a

38
00:01:25,040 --> 00:01:27,040
provider-based model

39
00:01:27,040 --> 00:01:30,159
so that the specific external data logic

40
00:01:30,159 --> 00:01:33,280
can be written by providers

41
00:01:33,280 --> 00:01:35,119
outside of gatekeeper

42
00:01:35,119 --> 00:01:36,880
and let's look at some potential use

43
00:01:36,880 --> 00:01:37,840
cases

44
00:01:37,840 --> 00:01:40,240
for validation for example we have image

45
00:01:40,240 --> 00:01:41,200
signing

46
00:01:41,200 --> 00:01:43,439
we can check whether an image is signed

47
00:01:43,439 --> 00:01:44,880
or not

48
00:01:44,880 --> 00:01:47,759
another example is image vulnerabilities

49
00:01:47,759 --> 00:01:50,000
you can check if an image of critical

50
00:01:50,000 --> 00:01:52,479
vulnerabilities for example

51
00:01:52,479 --> 00:01:54,399
and then on the mutation side

52
00:01:54,399 --> 00:01:57,200
we can mutate an image tracked to a

53
00:01:57,200 --> 00:02:01,200
digest uh so which helping us to uh pin

54
00:02:01,200 --> 00:02:04,479
to a specific uh shot digest for for a

55
00:02:04,479 --> 00:02:06,079
uh for an image

56
00:02:06,079 --> 00:02:08,959
and um another example of a mutation is

57
00:02:08,959 --> 00:02:11,599
uh we could use um active directory or

58
00:02:11,599 --> 00:02:14,879
ldap directory uh to mutate uh labels

59
00:02:14,879 --> 00:02:17,840
and or annotations to add owners so you

60
00:02:17,840 --> 00:02:21,040
can tell who created those communities

61
00:02:21,040 --> 00:02:23,040
objects

62
00:02:23,040 --> 00:02:25,360
do we get to see this in action

63
00:02:25,360 --> 00:02:28,480
yes let's do a demo awesome

64
00:02:28,480 --> 00:02:30,239
yeah let's start with our demo and we're

65
00:02:30,239 --> 00:02:31,200
going to look at take a look at our

66
00:02:31,200 --> 00:02:33,839
cluster first

67
00:02:34,239 --> 00:02:35,920
here you can see our gatekeeper

68
00:02:35,920 --> 00:02:37,599
controller manager and gatekeeper audit

69
00:02:37,599 --> 00:02:40,079
pods here

70
00:02:40,959 --> 00:02:43,760
and let's look at our providers next uh

71
00:02:43,760 --> 00:02:45,280
here you can see there are the the

72
00:02:45,280 --> 00:02:48,080
registered providers uh with gatekeeper

73
00:02:48,080 --> 00:02:48,840
they

74
00:02:48,840 --> 00:02:51,680
basically uh map to services that are

75
00:02:51,680 --> 00:02:53,599
running behind these

76
00:02:53,599 --> 00:02:55,360
deployments such as the treaty provider

77
00:02:55,360 --> 00:02:58,640
or tag to digest provider

78
00:03:01,040 --> 00:03:04,000
so in next we are going to look at our

79
00:03:04,000 --> 00:03:05,040
assign

80
00:03:05,040 --> 00:03:07,280
crd which is the mutation

81
00:03:07,280 --> 00:03:09,200
crd

82
00:03:09,200 --> 00:03:12,480
one of the mutation crds for gatekeeper

83
00:03:12,480 --> 00:03:14,080
so you can see that

84
00:03:14,080 --> 00:03:15,490
this

85
00:03:15,490 --> 00:03:17,120
[Music]

86
00:03:17,120 --> 00:03:20,800
this object uh takes a an image

87
00:03:20,800 --> 00:03:21,680
and

88
00:03:21,680 --> 00:03:24,640
uh for for all containers and then it

89
00:03:24,640 --> 00:03:26,239
uses the

90
00:03:26,239 --> 00:03:28,319
external data data source which is value

91
00:03:28,319 --> 00:03:30,480
at location which means the images

92
00:03:30,480 --> 00:03:33,519
images value by using the tag to digest

93
00:03:33,519 --> 00:03:34,640
provider

94
00:03:34,640 --> 00:03:36,239
to mutate

95
00:03:36,239 --> 00:03:38,080
the value of the

96
00:03:38,080 --> 00:03:42,239
image to the same um

97
00:03:42,239 --> 00:03:43,840
value of the image

98
00:03:43,840 --> 00:03:46,400
a pendant would it with the

99
00:03:46,400 --> 00:03:48,799
image image digest

100
00:03:48,799 --> 00:03:50,400
and in the

101
00:03:50,400 --> 00:03:52,480
next example we are going to

102
00:03:52,480 --> 00:03:55,200
take a look at the

103
00:03:55,439 --> 00:03:57,200
the

104
00:03:57,200 --> 00:03:59,200
deployment file

105
00:03:59,200 --> 00:04:00,400
here you can see

106
00:04:00,400 --> 00:04:02,879
uh the tag

107
00:04:02,879 --> 00:04:05,439
which which does not have uh contain a

108
00:04:05,439 --> 00:04:08,720
sha in here is the the one uh with the

109
00:04:08,720 --> 00:04:10,799
digest already included so we should see

110
00:04:10,799 --> 00:04:13,360
the first one to mutate well the second

111
00:04:13,360 --> 00:04:16,560
one does not get mutated

112
00:04:16,560 --> 00:04:18,720
so let's go ahead and deploy

113
00:04:18,720 --> 00:04:19,440
our

114
00:04:19,440 --> 00:04:22,079
deployment

115
00:04:24,880 --> 00:04:27,600
and then let's take a look at uh the

116
00:04:27,600 --> 00:04:29,840
object

117
00:04:30,639 --> 00:04:32,560
as i mentioned earlier we could see that

118
00:04:32,560 --> 00:04:35,600
the first um container got mutated with

119
00:04:35,600 --> 00:04:38,240
the digest while second one still has

120
00:04:38,240 --> 00:04:39,120
the

121
00:04:39,120 --> 00:04:42,000
same digest

122
00:04:42,000 --> 00:04:43,919
very cool

123
00:04:43,919 --> 00:04:46,000
and then the next one uh we want to take

124
00:04:46,000 --> 00:04:48,560
a look at is the cosine provider uh

125
00:04:48,560 --> 00:04:51,440
cosine provider is a validation based uh

126
00:04:51,440 --> 00:04:55,520
provider where um you can check the

127
00:04:55,520 --> 00:04:58,639
if a container image uh is is signed or

128
00:04:58,639 --> 00:05:00,560
not using the cosine

129
00:05:00,560 --> 00:05:03,840
project in six store

130
00:05:03,919 --> 00:05:06,800
and um this is our gatekeeper constraint

131
00:05:06,800 --> 00:05:10,720
template uh where we pass the container

132
00:05:10,720 --> 00:05:13,360
image to the external data source and we

133
00:05:13,360 --> 00:05:17,600
basically check the response from the

134
00:05:18,800 --> 00:05:20,960
external data provider and then here you

135
00:05:20,960 --> 00:05:22,560
can see our constraint which has the

136
00:05:22,560 --> 00:05:24,880
enforcement action denied so we we

137
00:05:24,880 --> 00:05:28,240
should uh didn't deny the deployment if

138
00:05:28,240 --> 00:05:30,000
it is not signed

139
00:05:30,000 --> 00:05:32,240
and then in here you can see a test

140
00:05:32,240 --> 00:05:34,720
deployment which is an unsigned image uh

141
00:05:34,720 --> 00:05:36,880
this is like a pause image which is not

142
00:05:36,880 --> 00:05:37,840
signed

143
00:05:37,840 --> 00:05:39,280
so we are going to go ahead and deploy

144
00:05:39,280 --> 00:05:40,639
this

145
00:05:40,639 --> 00:05:42,639
and we should see

146
00:05:42,639 --> 00:05:47,039
our container should be denied

147
00:05:51,360 --> 00:05:55,039
and uh like we mentioned um it did get

148
00:05:55,039 --> 00:05:57,360
declined because it does not contain a

149
00:05:57,360 --> 00:05:59,039
valid cosine image

150
00:05:59,039 --> 00:06:01,280
and then so let's look at a a signed

151
00:06:01,280 --> 00:06:03,120
image so in this case we are looking at

152
00:06:03,120 --> 00:06:06,080
the distributor static uh

153
00:06:06,080 --> 00:06:07,919
latest tag and we're going to deploy

154
00:06:07,919 --> 00:06:10,960
that and this should

155
00:06:10,960 --> 00:06:13,840
go and be created

156
00:06:15,759 --> 00:06:18,639
all right so next let's look at how we

157
00:06:18,639 --> 00:06:20,639
can use this feature to block

158
00:06:20,639 --> 00:06:22,160
vulnerabilities

159
00:06:22,160 --> 00:06:24,240
here as you can see is a gatekeeper

160
00:06:24,240 --> 00:06:26,560
constraint template which contains the

161
00:06:26,560 --> 00:06:29,919
rego that says hey for any containers we

162
00:06:29,919 --> 00:06:31,280
want to

163
00:06:31,280 --> 00:06:33,600
talk to the trivia provider

164
00:06:33,600 --> 00:06:35,919
which provides us with vulnerability

165
00:06:35,919 --> 00:06:38,319
data right the attribute

166
00:06:38,319 --> 00:06:39,520
does a lot of

167
00:06:39,520 --> 00:06:42,400
scanning and returns the number of

168
00:06:42,400 --> 00:06:44,960
vulnerabilities and the high low or

169
00:06:44,960 --> 00:06:47,919
medium and based on that then uh you

170
00:06:47,919 --> 00:06:50,080
know we in the in our policies we can

171
00:06:50,080 --> 00:06:52,319
decide if we want to deploy or block the

172
00:06:52,319 --> 00:06:54,720
vulnerability or not or or maybe return

173
00:06:54,720 --> 00:06:57,360
a warning right so here uh next we're

174
00:06:57,360 --> 00:07:00,639
gonna deploy this constraint template

175
00:07:00,639 --> 00:07:03,120
and

176
00:07:06,560 --> 00:07:08,080
and here

177
00:07:08,080 --> 00:07:10,800
gatekeeper will basically reach out to

178
00:07:10,800 --> 00:07:12,639
trivia provider

179
00:07:12,639 --> 00:07:14,080
and then here as you can see we have a

180
00:07:14,080 --> 00:07:15,199
constraint

181
00:07:15,199 --> 00:07:17,520
and the constraint says okay enforcement

182
00:07:17,520 --> 00:07:19,440
action is worn so i don't actually want

183
00:07:19,440 --> 00:07:21,759
to block but just give people a warning

184
00:07:21,759 --> 00:07:23,680
that they're deploying something

185
00:07:23,680 --> 00:07:26,240
bad and here as you can see is an

186
00:07:26,240 --> 00:07:28,560
example deployment that contains vote

187
00:07:28,560 --> 00:07:30,800
that may contain a vulnerability

188
00:07:30,800 --> 00:07:34,160
and here we are using alpine as our

189
00:07:34,160 --> 00:07:35,520
example

190
00:07:35,520 --> 00:07:36,720
image

191
00:07:36,720 --> 00:07:38,880
and as soon as i deployed this let's see

192
00:07:38,880 --> 00:07:42,240
what trivia returns

193
00:07:43,440 --> 00:07:45,599
all right and here as you can see it

194
00:07:45,599 --> 00:07:48,319
returns a warning it's telling us hey

195
00:07:48,319 --> 00:07:51,039
for this alpine image you have 30

196
00:07:51,039 --> 00:07:53,360
vulnerabilities but we're not actually

197
00:07:53,360 --> 00:07:56,879
going to block the deployment

198
00:07:56,879 --> 00:08:00,000
all right uh next um let's see how it

199
00:08:00,000 --> 00:08:02,479
will work for a phone an image that's

200
00:08:02,479 --> 00:08:04,000
not vulnerable right

201
00:08:04,000 --> 00:08:06,960
um here as you can see we're using uh

202
00:08:06,960 --> 00:08:09,280
the static digitalist image

203
00:08:09,280 --> 00:08:12,479
let's see if um if we're right let's see

204
00:08:12,479 --> 00:08:14,560
if see if trivia identifies any

205
00:08:14,560 --> 00:08:17,199
vulnerability

206
00:08:17,280 --> 00:08:19,680
all right so it was true

207
00:08:19,680 --> 00:08:20,560
yeah

208
00:08:20,560 --> 00:08:24,160
all right next we have the aad

209
00:08:24,160 --> 00:08:25,280
use case

210
00:08:25,280 --> 00:08:27,120
in which case you know a lot of

211
00:08:27,120 --> 00:08:29,199
companies a lot of organizations want to

212
00:08:29,199 --> 00:08:32,799
identify owners of kubernetes resources

213
00:08:32,799 --> 00:08:35,279
and here we are leveraging

214
00:08:35,279 --> 00:08:37,679
mutating the mutation feature in

215
00:08:37,679 --> 00:08:40,799
gatekeeper which as you can see here

216
00:08:40,799 --> 00:08:43,440
is a custom resource called assign

217
00:08:43,440 --> 00:08:47,040
metadata which says hey for

218
00:08:47,040 --> 00:08:49,519
you know for config maps that i'm

219
00:08:49,519 --> 00:08:51,600
deploying i want to

220
00:08:51,600 --> 00:08:54,000
provide a label called owner and that

221
00:08:54,000 --> 00:08:56,560
data actually comes from a provider

222
00:08:56,560 --> 00:08:58,720
called aad provider right

223
00:08:58,720 --> 00:09:01,200
and that data will then be mapped as it

224
00:09:01,200 --> 00:09:04,240
would then be used as the owner label

225
00:09:04,240 --> 00:09:04,959
for

226
00:09:04,959 --> 00:09:07,200
these configmap resources

227
00:09:07,200 --> 00:09:10,880
so let's take a look at how that works

228
00:09:11,279 --> 00:09:12,480
so we're going to

229
00:09:12,480 --> 00:09:13,519
apply

230
00:09:13,519 --> 00:09:17,120
this assign metadata

231
00:09:17,120 --> 00:09:18,959
resource and then

232
00:09:18,959 --> 00:09:20,800
and then now as you can see we have a

233
00:09:20,800 --> 00:09:22,399
test config map

234
00:09:22,399 --> 00:09:25,360
and once we apply it let's see if it

235
00:09:25,360 --> 00:09:26,640
actually

236
00:09:26,640 --> 00:09:28,160
gives us the

237
00:09:28,160 --> 00:09:30,320
label it looks like you're applying that

238
00:09:30,320 --> 00:09:33,200
with a specific user um

239
00:09:33,200 --> 00:09:36,560
yes you're and this is the user the aad

240
00:09:36,560 --> 00:09:38,959
user

241
00:09:39,200 --> 00:09:41,440
all right let's take a look if the

242
00:09:41,440 --> 00:09:43,839
mutation is

243
00:09:43,839 --> 00:09:45,920
working

244
00:09:45,920 --> 00:09:47,440
yeah it looks like i the labels got

245
00:09:47,440 --> 00:09:49,440
mutated and that's my

246
00:09:49,440 --> 00:09:50,880
yeah it's you

247
00:09:50,880 --> 00:09:53,200
so it works great

248
00:09:53,200 --> 00:09:55,279
all right that was a fun demo um hope

249
00:09:55,279 --> 00:09:56,880
you enjoyed the

250
00:09:56,880 --> 00:10:00,240
demonstration of many many use cases

251
00:10:00,240 --> 00:10:03,040
that you can actually

252
00:10:03,040 --> 00:10:05,120
start applying in your organization with

253
00:10:05,120 --> 00:10:07,120
gatekeeper and the new external data

254
00:10:07,120 --> 00:10:08,160
feature

255
00:10:08,160 --> 00:10:10,959
we would love to get feedback

256
00:10:10,959 --> 00:10:13,839
from from the community so definitely

257
00:10:13,839 --> 00:10:16,640
come give us feedback and open issues in

258
00:10:16,640 --> 00:10:19,120
github and slack and join us in our

259
00:10:19,120 --> 00:10:21,360
weekly community call

260
00:10:21,360 --> 00:10:24,560
thank you thank you

