1
00:00:00,560 --> 00:00:02,320
good evening cloud native security

2
00:00:02,320 --> 00:00:03,760
conference

3
00:00:03,760 --> 00:00:05,680
it's an honor to be joining you for this

4
00:00:05,680 --> 00:00:06,720
first

5
00:00:06,720 --> 00:00:09,120
instance of this new event

6
00:00:09,120 --> 00:00:11,280
i'm joining you from boston this is red

7
00:00:11,280 --> 00:00:14,480
hat's famed westward office although you

8
00:00:14,480 --> 00:00:16,960
can't see much of it and this is just a

9
00:00:16,960 --> 00:00:19,119
small conference room that we turned

10
00:00:19,119 --> 00:00:22,880
into a virtual event recording booth

11
00:00:22,880 --> 00:00:25,439
but um with that

12
00:00:25,439 --> 00:00:27,920
and without further ado let's get going

13
00:00:27,920 --> 00:00:30,080
now my marketing manager wouldn't let me

14
00:00:30,080 --> 00:00:32,800
um get away from the concept that i need

15
00:00:32,800 --> 00:00:34,719
to introduce myself so here it is very

16
00:00:34,719 --> 00:00:37,040
briefly had the privilege of spending my

17
00:00:37,040 --> 00:00:38,879
entire career in free and open source

18
00:00:38,879 --> 00:00:40,320
software

19
00:00:40,320 --> 00:00:42,399
uh i was the product management director

20
00:00:42,399 --> 00:00:43,440
for

21
00:00:43,440 --> 00:00:46,719
trite hat for the last seven years

22
00:00:46,719 --> 00:00:49,760
i previously was the ubuntu server pm at

23
00:00:49,760 --> 00:00:53,280
canonical if you remember 1404

24
00:00:53,280 --> 00:00:56,160
that was my favorite release there

25
00:00:56,160 --> 00:00:58,160
and if you go back the decade i was the

26
00:00:58,160 --> 00:01:01,199
systems management tsar at susa

27
00:01:01,199 --> 00:01:03,920
uh the dreaded systems management czar

28
00:01:03,920 --> 00:01:05,760
actually

29
00:01:05,760 --> 00:01:08,560
some things i worked on on the slide a

30
00:01:08,560 --> 00:01:11,520
bunch of different products

31
00:01:11,520 --> 00:01:14,479
and uh i was the maintainer of man for

32
00:01:14,479 --> 00:01:16,240
about 10 years

33
00:01:16,240 --> 00:01:18,640
technically i still am i suppose but i'm

34
00:01:18,640 --> 00:01:20,159
letting uh

35
00:01:20,159 --> 00:01:22,080
colin take the lead with with this

36
00:01:22,080 --> 00:01:23,759
version it seems like the right thing to

37
00:01:23,759 --> 00:01:25,040
do

38
00:01:25,040 --> 00:01:26,799
um

39
00:01:26,799 --> 00:01:30,560
so uh one last thing i have a book out

40
00:01:30,560 --> 00:01:33,520
on aws operations by o'reilly that's why

41
00:01:33,520 --> 00:01:35,920
you see me surrounded by clouds and

42
00:01:35,920 --> 00:01:39,360
that's plenty enough i guess

43
00:01:39,360 --> 00:01:42,000
now rook for those of you that are not

44
00:01:42,000 --> 00:01:42,640
in

45
00:01:42,640 --> 00:01:43,680
storage

46
00:01:43,680 --> 00:01:46,479
rook helps reduce the operational burden

47
00:01:46,479 --> 00:01:48,399
storage team faces

48
00:01:48,399 --> 00:01:50,479
creating horizontally scaled

49
00:01:50,479 --> 00:01:53,680
self-healing clusters and stuff

50
00:01:53,680 --> 00:01:55,759
and

51
00:01:55,759 --> 00:01:58,000
ceph is complemented by rook making them

52
00:01:58,000 --> 00:02:00,399
increasingly self-managing

53
00:02:00,399 --> 00:02:02,880
even self-scaling you could say

54
00:02:02,880 --> 00:02:04,960
rock enables have to deploy kubernetes

55
00:02:04,960 --> 00:02:07,520
with on kubernetes with ease

56
00:02:07,520 --> 00:02:08,720
enabling the benefits of

57
00:02:08,720 --> 00:02:10,399
containerization

58
00:02:10,399 --> 00:02:13,040
storage is just another workload

59
00:02:13,040 --> 00:02:16,879
running on top of the compute plane

60
00:02:17,360 --> 00:02:20,160
or on bare metal as an external entity

61
00:02:20,160 --> 00:02:22,480
for petabyte scale independently managed

62
00:02:22,480 --> 00:02:25,360
storage clusters serving different

63
00:02:25,360 --> 00:02:27,599
kubernetes clusters and possibly other

64
00:02:27,599 --> 00:02:29,680
workloads so

65
00:02:29,680 --> 00:02:32,560
as usual we can make things abundantly

66
00:02:32,560 --> 00:02:34,800
complicated

67
00:02:34,800 --> 00:02:37,599
the combination of the two is a quite

68
00:02:37,599 --> 00:02:38,800
sweet

69
00:02:38,800 --> 00:02:40,480
storage solution

70
00:02:40,480 --> 00:02:43,519
in general and obviously perfect for

71
00:02:43,519 --> 00:02:45,680
kubernetes which is what it is designed

72
00:02:45,680 --> 00:02:47,440
for

73
00:02:47,440 --> 00:02:51,280
now security practices harden a specific

74
00:02:51,280 --> 00:02:54,000
point on the infrastructure

75
00:02:54,000 --> 00:02:55,840
cherry picking practices without the

76
00:02:55,840 --> 00:02:58,000
model of the threat

77
00:02:58,000 --> 00:02:59,599
and the attacker

78
00:02:59,599 --> 00:03:00,959
carrying it out

79
00:03:00,959 --> 00:03:03,200
is not a viable strategy

80
00:03:03,200 --> 00:03:04,879
the joke usually goes if you want to

81
00:03:04,879 --> 00:03:06,879
protect from all possible threats you

82
00:03:06,879 --> 00:03:09,120
need to turn the computer off bury it in

83
00:03:09,120 --> 00:03:11,200
concrete drop it at the bottom of the

84
00:03:11,200 --> 00:03:12,159
ocean

85
00:03:12,159 --> 00:03:15,040
in other words absolute security is not

86
00:03:15,040 --> 00:03:17,680
usable and probably unattainable

87
00:03:17,680 --> 00:03:20,080
it needs to be defined in the context of

88
00:03:20,080 --> 00:03:21,599
a threat model

89
00:03:21,599 --> 00:03:25,280
are you facing script kitties or the gru

90
00:03:25,280 --> 00:03:27,519
or the dreaded privileged insider that

91
00:03:27,519 --> 00:03:30,239
we should all be worrying about

92
00:03:30,239 --> 00:03:32,959
these are very very different scenarios

93
00:03:32,959 --> 00:03:34,640
that's the starting point for any

94
00:03:34,640 --> 00:03:37,760
security consideration

95
00:03:37,760 --> 00:03:40,159
now let's dive in on once we have the

96
00:03:40,159 --> 00:03:41,760
profile

97
00:03:41,760 --> 00:03:44,640
what are we going to tighten and

98
00:03:44,640 --> 00:03:49,040
what is what can be tightened

99
00:03:49,040 --> 00:03:51,040
starting from the network we can break

100
00:03:51,040 --> 00:03:52,799
the network in security zones and the

101
00:03:52,799 --> 00:03:55,280
public security zone is the easiest to

102
00:03:55,280 --> 00:03:57,360
understand it's an entirely untrusted

103
00:03:57,360 --> 00:03:58,879
area of the cloud

104
00:03:58,879 --> 00:04:01,040
it could be the internet as a whole or

105
00:04:01,040 --> 00:04:03,120
you could conceptualize it as just

106
00:04:03,120 --> 00:04:05,599
networks external to your cluster that

107
00:04:05,599 --> 00:04:08,400
you have no authority over

108
00:04:08,400 --> 00:04:10,799
data transmissions crossing this zone

109
00:04:10,799 --> 00:04:13,519
should make use of encryption

110
00:04:13,519 --> 00:04:15,680
note that the public zone as i just

111
00:04:15,680 --> 00:04:17,839
defined it does not include the storage

112
00:04:17,839 --> 00:04:19,358
cluster front end

113
00:04:19,358 --> 00:04:21,519
what in ceph is called the public

114
00:04:21,519 --> 00:04:23,440
underscore network

115
00:04:23,440 --> 00:04:25,919
which defines something different the

116
00:04:25,919 --> 00:04:28,960
storage front end which properly belongs

117
00:04:28,960 --> 00:04:33,280
in the storage access zone

118
00:04:33,280 --> 00:04:35,199
the self-client zone refers to the

119
00:04:35,199 --> 00:04:36,160
network

120
00:04:36,160 --> 00:04:39,919
networks accessing ceph clients like the

121
00:04:39,919 --> 00:04:42,639
object gateway the ceph file system or

122
00:04:42,639 --> 00:04:44,240
block storage

123
00:04:44,240 --> 00:04:46,400
ceph clients are not always excluded

124
00:04:46,400 --> 00:04:48,639
from the public security zone for

125
00:04:48,639 --> 00:04:50,720
instance it is possible to expose the

126
00:04:50,720 --> 00:04:53,680
object gateways as 3 and swift api

127
00:04:53,680 --> 00:04:56,880
in the public security zone the storage

128
00:04:56,880 --> 00:04:59,199
access zone instead is an internal

129
00:04:59,199 --> 00:05:01,360
network providing safe clients with

130
00:05:01,360 --> 00:05:05,280
access to the storage cluster itself

131
00:05:05,440 --> 00:05:07,520
finally the cluster zone refers to the

132
00:05:07,520 --> 00:05:09,440
most internal network

133
00:05:09,440 --> 00:05:10,880
providing storage nodes with

134
00:05:10,880 --> 00:05:13,039
connectivity for replication heartbeat

135
00:05:13,039 --> 00:05:15,280
backfill and recovery tasks

136
00:05:15,280 --> 00:05:17,280
this zone includes the ceph cluster's

137
00:05:17,280 --> 00:05:19,520
backend network called the cluster

138
00:05:19,520 --> 00:05:22,000
network itself

139
00:05:22,000 --> 00:05:25,039
operators often run clear text traffic

140
00:05:25,039 --> 00:05:27,440
in the cluster zone relying on the

141
00:05:27,440 --> 00:05:29,280
physical separation

142
00:05:29,280 --> 00:05:31,680
or vlan logical separation of the

143
00:05:31,680 --> 00:05:34,639
network from all other traffic

144
00:05:34,639 --> 00:05:36,720
this would not be a valid choice if your

145
00:05:36,720 --> 00:05:38,880
threat model includes adversarial

146
00:05:38,880 --> 00:05:41,199
privileged insiders for example

147
00:05:41,199 --> 00:05:43,360
but it is a perfectly fine assumption

148
00:05:43,360 --> 00:05:45,919
for other models and this is a good

149
00:05:45,919 --> 00:05:47,520
example of what i was just saying

150
00:05:47,520 --> 00:05:49,120
earlier

151
00:05:49,120 --> 00:05:51,759
these four zones are separately mapped

152
00:05:51,759 --> 00:05:54,400
or combined depending on the use case

153
00:05:54,400 --> 00:05:57,840
and the threat model in use

154
00:05:57,840 --> 00:06:00,160
now components spanning the boundary of

155
00:06:00,160 --> 00:06:02,479
two security zones with different trust

156
00:06:02,479 --> 00:06:04,880
or authentication requirements must be

157
00:06:04,880 --> 00:06:07,039
carefully configured

158
00:06:07,039 --> 00:06:09,440
these are natural weak points in network

159
00:06:09,440 --> 00:06:11,039
architecture and should always be

160
00:06:11,039 --> 00:06:12,800
configured to meet the requirements of

161
00:06:12,800 --> 00:06:15,120
the highest thrust level of the zones

162
00:06:15,120 --> 00:06:16,479
connected

163
00:06:16,479 --> 00:06:18,960
in many cases the security controls

164
00:06:18,960 --> 00:06:21,120
should be a primary concern

165
00:06:21,120 --> 00:06:23,360
due to the likelihood of attack at this

166
00:06:23,360 --> 00:06:25,199
point

167
00:06:25,199 --> 00:06:27,520
operators should consider exceeding zone

168
00:06:27,520 --> 00:06:29,840
requirements at integration points which

169
00:06:29,840 --> 00:06:31,680
for a storage product is often easier to

170
00:06:31,680 --> 00:06:33,360
accomplish than for other types of

171
00:06:33,360 --> 00:06:34,400
products

172
00:06:34,400 --> 00:06:35,759
for example

173
00:06:35,759 --> 00:06:37,680
the cluster security zone can be

174
00:06:37,680 --> 00:06:40,960
isolated from other zones easily because

175
00:06:40,960 --> 00:06:43,039
there is no reason for it to connect to

176
00:06:43,039 --> 00:06:44,319
other zones

177
00:06:44,319 --> 00:06:46,720
conversely an object gateway in the

178
00:06:46,720 --> 00:06:49,199
client security zone will need to access

179
00:06:49,199 --> 00:06:52,000
the cluster security zones monitors

180
00:06:52,000 --> 00:06:55,360
port 6789

181
00:06:55,360 --> 00:06:59,940
the osds all of them on port 6800 to 73

182
00:06:59,940 --> 00:07:01,280
[Music]

183
00:07:01,280 --> 00:07:03,599
7300

184
00:07:03,599 --> 00:07:06,720
and will likely expose its s3 api to the

185
00:07:06,720 --> 00:07:08,479
public security zone

186
00:07:08,479 --> 00:07:12,080
port 80 and 443

187
00:07:12,720 --> 00:07:15,120
let's move on to encryption

188
00:07:15,120 --> 00:07:17,759
server-side operators overwhelmingly

189
00:07:17,759 --> 00:07:20,479
choose to encrypt data at rest using the

190
00:07:20,479 --> 00:07:23,599
linux unified key setup mechanism

191
00:07:23,599 --> 00:07:26,720
better known by all of us as lux

192
00:07:26,720 --> 00:07:29,759
all data and metadata of a cef storage

193
00:07:29,759 --> 00:07:32,160
cluster can be secured using a variety

194
00:07:32,160 --> 00:07:34,479
of dmcrypt configurations

195
00:07:34,479 --> 00:07:37,280
and almost all of red hat customers

196
00:07:37,280 --> 00:07:39,759
choose to use this facility

197
00:07:39,759 --> 00:07:42,479
a security best practice is to locate

198
00:07:42,479 --> 00:07:45,039
monitor demons the mons

199
00:07:45,039 --> 00:07:47,520
on separate hosts from the storage

200
00:07:47,520 --> 00:07:50,000
daemons osd's

201
00:07:50,000 --> 00:07:52,319
ensuring anti-affinity of the keys and

202
00:07:52,319 --> 00:07:54,319
the data that they encrypt

203
00:07:54,319 --> 00:07:58,879
this results in physically removing

204
00:07:58,879 --> 00:08:00,639
this results in protecting against the

205
00:08:00,639 --> 00:08:02,639
scenario where physically stealing a

206
00:08:02,639 --> 00:08:04,720
machine or removing the drives

207
00:08:04,720 --> 00:08:07,599
does not carry the keys with the

208
00:08:07,599 --> 00:08:10,319
with the part that was stolen

209
00:08:10,319 --> 00:08:12,319
the object store gateway has additional

210
00:08:12,319 --> 00:08:15,039
capabilities including encryption at

211
00:08:15,039 --> 00:08:16,720
ingestion time

212
00:08:16,720 --> 00:08:19,360
the use of per user keys

213
00:08:19,360 --> 00:08:21,680
as opposed to per drive keys

214
00:08:21,680 --> 00:08:24,960
their rotation with tools like vault

215
00:08:24,960 --> 00:08:28,960
support for amazon aws ssc ems and many

216
00:08:28,960 --> 00:08:31,120
more things

217
00:08:31,120 --> 00:08:32,640
one thing that i'm going to call out is

218
00:08:32,640 --> 00:08:34,559
the department of defense ciphers

219
00:08:34,559 --> 00:08:38,159
certified under fips 140-2

220
00:08:38,159 --> 00:08:41,200
these can be used throughout ceph

221
00:08:41,200 --> 00:08:43,599
as supplied by rel in appropriate

222
00:08:43,599 --> 00:08:46,000
versions

223
00:08:46,000 --> 00:08:48,240
network communication can be secured by

224
00:08:48,240 --> 00:08:49,440
turning on

225
00:08:49,440 --> 00:08:51,680
ceph protocol encryption

226
00:08:51,680 --> 00:08:55,279
in the messenger v 2.1 protocol

227
00:08:55,279 --> 00:08:57,839
introduced with the upstream gnarliest

228
00:08:57,839 --> 00:09:00,399
release and

229
00:09:00,399 --> 00:09:02,480
updated sense

230
00:09:02,480 --> 00:09:03,440
here

231
00:09:03,440 --> 00:09:06,080
clear text is preponderant

232
00:09:06,080 --> 00:09:08,080
because the networks where the cluster

233
00:09:08,080 --> 00:09:10,720
uses the sef protocol are usually the

234
00:09:10,720 --> 00:09:12,160
trusted ones

235
00:09:12,160 --> 00:09:13,600
and they're usually physically or

236
00:09:13,600 --> 00:09:16,160
logically isolated from access

237
00:09:16,160 --> 00:09:18,080
compatibility and overheads are the

238
00:09:18,080 --> 00:09:20,160
primary reason why back-end protocols

239
00:09:20,160 --> 00:09:23,200
are not encrypted by default

240
00:09:23,200 --> 00:09:25,440
but in most use cases the performance

241
00:09:25,440 --> 00:09:28,080
impact is negligible for a properly

242
00:09:28,080 --> 00:09:29,760
designed cluster

243
00:09:29,760 --> 00:09:31,920
latency is shadowed by the network

244
00:09:31,920 --> 00:09:34,839
communication provided that you size the

245
00:09:34,839 --> 00:09:38,080
cpu the cpu core count to account for

246
00:09:38,080 --> 00:09:39,440
the fact that you're going to encrypt

247
00:09:39,440 --> 00:09:41,440
everything so it's going to cost you a

248
00:09:41,440 --> 00:09:43,440
little bit in hardware but you can do it

249
00:09:43,440 --> 00:09:45,920
without without seeing a performance

250
00:09:45,920 --> 00:09:49,279
impact for most workloads

251
00:09:49,279 --> 00:09:51,680
looking at more specific protocols

252
00:09:51,680 --> 00:09:53,839
the s3 service is usually secured

253
00:09:53,839 --> 00:09:55,760
between rgw and

254
00:09:55,760 --> 00:09:59,680
ds3 client with tls and port 443

255
00:09:59,680 --> 00:10:02,720
although plain http on port 80 is

256
00:10:02,720 --> 00:10:04,720
obviously also an option depending on

257
00:10:04,720 --> 00:10:06,480
the nature of the data served

258
00:10:06,480 --> 00:10:08,480
confidential versus public

259
00:10:08,480 --> 00:10:11,440
there is plenty of scenarios where rgw

260
00:10:11,440 --> 00:10:13,279
may be

261
00:10:13,279 --> 00:10:15,440
serving just web pages

262
00:10:15,440 --> 00:10:19,200
tls termination at an h a proxy endpoint

263
00:10:19,200 --> 00:10:20,800
is a special case

264
00:10:20,800 --> 00:10:24,000
where the link between h a proxy and rgw

265
00:10:24,000 --> 00:10:24,959
itself

266
00:10:24,959 --> 00:10:27,519
is in the clear text and needs to be

267
00:10:27,519 --> 00:10:30,320
located in the appropriate security zone

268
00:10:30,320 --> 00:10:33,120
standard network practices like

269
00:10:33,120 --> 00:10:35,279
firewalling individual nodes to only

270
00:10:35,279 --> 00:10:38,640
expose the clear list of ports apply all

271
00:10:38,640 --> 00:10:40,959
the usual network hygiene things that

272
00:10:40,959 --> 00:10:43,920
you would normally do

273
00:10:43,920 --> 00:10:46,079
and let's look at rook specific things

274
00:10:46,079 --> 00:10:49,040
for a second rook can use crds to encode

275
00:10:49,040 --> 00:10:51,440
many of these settings like configuring

276
00:10:51,440 --> 00:10:55,920
trust certificates for rgw's web server

277
00:10:56,000 --> 00:10:58,560
the kubernetes secrets mechanism is not

278
00:10:58,560 --> 00:11:00,320
really secured by default so that's

279
00:11:00,320 --> 00:11:02,000
another thing to account for

280
00:11:02,000 --> 00:11:04,959
base64 is easily reverted and needs to

281
00:11:04,959 --> 00:11:08,160
be hardened with encryption at rest

282
00:11:08,160 --> 00:11:11,120
and access policies to containers using

283
00:11:11,120 --> 00:11:12,959
secrets

284
00:11:12,959 --> 00:11:16,959
base64 is not encryption base64 is just

285
00:11:16,959 --> 00:11:19,680
encoding it can be revo reverted with

286
00:11:19,680 --> 00:11:22,319
one command

287
00:11:22,959 --> 00:11:25,519
rook supports at rest data encryption as

288
00:11:25,519 --> 00:11:28,320
we discussed earlier same thing with

289
00:11:28,320 --> 00:11:31,040
in-flight self-protocol encryption

290
00:11:31,040 --> 00:11:34,959
not supported yet but coming soon

291
00:11:34,959 --> 00:11:36,959
you should in any event be using the

292
00:11:36,959 --> 00:11:38,800
cloud's extremely flexible

293
00:11:38,800 --> 00:11:41,519
software-defined networking to segregate

294
00:11:41,519 --> 00:11:44,000
unencrypted traffic um to private

295
00:11:44,000 --> 00:11:45,279
networks

296
00:11:45,279 --> 00:11:47,920
really on on a public cloud environment

297
00:11:47,920 --> 00:11:50,639
you have no excuse not to be doing

298
00:11:50,639 --> 00:11:53,600
things that way you can go wild with

299
00:11:53,600 --> 00:11:56,320
creating zones

300
00:11:56,320 --> 00:11:58,160
kubernetes user permission system

301
00:11:58,160 --> 00:12:01,600
applies to pvs so permissions quotas and

302
00:12:01,600 --> 00:12:03,519
all the rest all of that comes from

303
00:12:03,519 --> 00:12:06,240
kubernetes with nothing

304
00:12:06,240 --> 00:12:09,839
for rook to do here which is great

305
00:12:09,839 --> 00:12:12,000
more interesting perhaps is

306
00:12:12,000 --> 00:12:15,519
kms support in the csi driver

307
00:12:15,519 --> 00:12:17,440
this allows individual volumes to be

308
00:12:17,440 --> 00:12:19,760
encrypted with their own key

309
00:12:19,760 --> 00:12:22,000
something that for example in block

310
00:12:22,000 --> 00:12:23,839
storage we would like to do but we

311
00:12:23,839 --> 00:12:25,839
cannot do without rook at this point not

312
00:12:25,839 --> 00:12:28,880
yet we're working on it

313
00:12:28,880 --> 00:12:32,160
saf adm sensible and other deployment

314
00:12:32,160 --> 00:12:35,360
and day one tools use ssh

315
00:12:35,360 --> 00:12:37,200
to provide a secure command path for

316
00:12:37,200 --> 00:12:39,279
install and upgrade operations

317
00:12:39,279 --> 00:12:41,279
this is common these days it is the

318
00:12:41,279 --> 00:12:43,600
control channel popularized by ansible

319
00:12:43,600 --> 00:12:45,600
for host management

320
00:12:45,600 --> 00:12:48,320
the dashboard is usually not exposed to

321
00:12:48,320 --> 00:12:49,600
the world

322
00:12:49,600 --> 00:12:51,120
but it needs to be reachable by the

323
00:12:51,120 --> 00:12:55,279
operator's workstation to be of use

324
00:12:56,000 --> 00:12:58,560
lastly the manager daemon supports the

325
00:12:58,560 --> 00:13:00,079
whole infrastructure and needs to be

326
00:13:00,079 --> 00:13:03,760
reachable on the storage access

327
00:13:04,839 --> 00:13:08,160
zone a few of keys

328
00:13:08,160 --> 00:13:09,760
protects the cluster from man in the

329
00:13:09,760 --> 00:13:12,320
middle attacks by default

330
00:13:12,320 --> 00:13:14,959
a good practice here is to grant keyring

331
00:13:14,959 --> 00:13:17,440
read and write permissions only for the

332
00:13:17,440 --> 00:13:19,519
current user and root

333
00:13:19,519 --> 00:13:21,839
with client admin user restricted to

334
00:13:21,839 --> 00:13:23,839
root only

335
00:13:23,839 --> 00:13:26,399
rgw predictably supports the key and

336
00:13:26,399 --> 00:13:29,360
secret model of aws s3

337
00:13:29,360 --> 00:13:31,120
and the equivalent model for openstack

338
00:13:31,120 --> 00:13:32,720
swift

339
00:13:32,720 --> 00:13:34,480
the administrator's key and secrets

340
00:13:34,480 --> 00:13:36,000
should be treated with the appropriate

341
00:13:36,000 --> 00:13:37,200
respect

342
00:13:37,200 --> 00:13:39,839
use administrative users sparingly to

343
00:13:39,839 --> 00:13:42,079
reduce risk profile as you would do

344
00:13:42,079 --> 00:13:44,320
anywhere else

345
00:13:44,320 --> 00:13:47,920
rgw users data is stored in ceph pools

346
00:13:47,920 --> 00:13:50,000
which should be secured as we discussed

347
00:13:50,000 --> 00:13:52,959
previously regarding data at rest

348
00:13:52,959 --> 00:13:54,800
processes

349
00:13:54,800 --> 00:13:57,199
ldap active directory and keystone

350
00:13:57,199 --> 00:14:01,560
identity vaults are all supported

351
00:14:02,639 --> 00:14:04,959
operator actions against the cluster are

352
00:14:04,959 --> 00:14:07,680
logged and should be periodically

353
00:14:07,680 --> 00:14:08,800
reviewed

354
00:14:08,800 --> 00:14:10,639
as well as aggregated to your log

355
00:14:10,639 --> 00:14:12,800
management system if you have one and

356
00:14:12,800 --> 00:14:14,480
you should

357
00:14:14,480 --> 00:14:17,199
have one

358
00:14:17,199 --> 00:14:20,240
once data is deleted from a seph cluster

359
00:14:20,240 --> 00:14:22,720
it generally cannot be recovered for

360
00:14:22,720 --> 00:14:24,639
practical use

361
00:14:24,639 --> 00:14:27,440
there are exceptions however rbd has a

362
00:14:27,440 --> 00:14:29,680
new facility called trash bin

363
00:14:29,680 --> 00:14:31,120
where

364
00:14:31,120 --> 00:14:33,680
dynamic use of spare pool capacity can

365
00:14:33,680 --> 00:14:36,639
be used to retain deleted images until

366
00:14:36,639 --> 00:14:37,680
that

367
00:14:37,680 --> 00:14:39,519
spare capacity is needed or until a

368
00:14:39,519 --> 00:14:42,639
certain number of days is elapsed

369
00:14:42,639 --> 00:14:46,000
similar similarly on rgw versioning of

370
00:14:46,000 --> 00:14:47,920
object store buckets

371
00:14:47,920 --> 00:14:50,560
may result in deleted objects preserved

372
00:14:50,560 --> 00:14:52,720
as part of version history

373
00:14:52,720 --> 00:14:55,519
until they are deleted by a policy or by

374
00:14:55,519 --> 00:14:58,639
the administrator

375
00:14:58,639 --> 00:15:01,440
wherever user data retention is a

376
00:15:01,440 --> 00:15:02,720
concern

377
00:15:02,720 --> 00:15:04,399
configure your

378
00:15:04,399 --> 00:15:07,760
data storage pools accordingly

379
00:15:07,760 --> 00:15:11,279
additionally individual data blocks that

380
00:15:11,279 --> 00:15:13,920
used to constitute an object file or

381
00:15:13,920 --> 00:15:15,279
volume

382
00:15:15,279 --> 00:15:17,199
are typically still present on the

383
00:15:17,199 --> 00:15:19,040
persistent storage

384
00:15:19,040 --> 00:15:20,079
system

385
00:15:20,079 --> 00:15:23,519
until they are overwritten by use

386
00:15:23,519 --> 00:15:25,279
you cannot overwrite a sf cluster just

387
00:15:25,279 --> 00:15:28,160
by writing a lot of data to it it's um

388
00:15:28,160 --> 00:15:30,079
it's not going to work

389
00:15:30,079 --> 00:15:33,040
so secure deletion is another question

390
00:15:33,040 --> 00:15:36,480
that we often see and the easiest way

391
00:15:36,480 --> 00:15:39,680
to sanitize media is to do the right

392
00:15:39,680 --> 00:15:42,800
thing and use osd encryption

393
00:15:42,800 --> 00:15:44,959
and when you need to sanitize the media

394
00:15:44,959 --> 00:15:46,880
you

395
00:15:46,880 --> 00:15:48,399
forget the key

396
00:15:48,399 --> 00:15:49,199
and

397
00:15:49,199 --> 00:15:52,719
that's the most effective way to

398
00:15:52,800 --> 00:15:55,360
to be able to discard uh drives safely

399
00:15:55,360 --> 00:15:56,320
without

400
00:15:56,320 --> 00:15:58,480
overwriting with a separate device or

401
00:15:58,480 --> 00:16:00,880
de-gaussing or shredding or anything of

402
00:16:00,880 --> 00:16:01,920
that sort

403
00:16:01,920 --> 00:16:03,680
which is usually not possible when you

404
00:16:03,680 --> 00:16:06,880
have to return them under warranty

405
00:16:06,880 --> 00:16:09,839
um

406
00:16:10,160 --> 00:16:12,399
hardening options are highly vendor

407
00:16:12,399 --> 00:16:14,079
dependent

408
00:16:14,079 --> 00:16:15,680
the following are some of red hat's

409
00:16:15,680 --> 00:16:18,079
choices other seph distributions will of

410
00:16:18,079 --> 00:16:19,600
course vary

411
00:16:19,600 --> 00:16:22,000
we ship with selinux on by default in

412
00:16:22,000 --> 00:16:24,639
enforcing mode

413
00:16:24,639 --> 00:16:26,399
of course you know that sc linux is sort

414
00:16:26,399 --> 00:16:28,079
of a religion at red hat so that's

415
00:16:28,079 --> 00:16:30,079
hardly surprising

416
00:16:30,079 --> 00:16:32,800
and we can make use of fips 140-2

417
00:16:32,800 --> 00:16:36,160
certified ciphers as supplied by rel

418
00:16:36,160 --> 00:16:39,199
when configured to do so

419
00:16:39,199 --> 00:16:41,120
hardening of binaries is also of

420
00:16:41,120 --> 00:16:42,160
interest

421
00:16:42,160 --> 00:16:44,079
because of what i told you about

422
00:16:44,079 --> 00:16:46,320
demons sitting at the boundaries between

423
00:16:46,320 --> 00:16:48,720
security zones and being natural

424
00:16:48,720 --> 00:16:50,560
targets for attacks to cross those

425
00:16:50,560 --> 00:16:52,639
boundaries

426
00:16:52,639 --> 00:16:55,279
i believe red hat self storage binaries

427
00:16:55,279 --> 00:16:57,279
use sec comp

428
00:16:57,279 --> 00:17:02,160
pi and several if not all of the aslr

429
00:17:02,160 --> 00:17:04,079
options but

430
00:17:04,079 --> 00:17:06,240
i didn't manage to catch my build master

431
00:17:06,240 --> 00:17:08,640
to confirm before recording this so

432
00:17:08,640 --> 00:17:11,280
i'll have to defer this to the q a

433
00:17:11,280 --> 00:17:13,359
session if you are interested

434
00:17:13,359 --> 00:17:15,760
in any event these are worth exploring

435
00:17:15,760 --> 00:17:17,599
because it makes

436
00:17:17,599 --> 00:17:19,599
exploiting of overflows or that kind of

437
00:17:19,599 --> 00:17:20,959
binary attacks

438
00:17:20,959 --> 00:17:22,640
all

439
00:17:22,640 --> 00:17:25,199
all that much harder

440
00:17:25,199 --> 00:17:28,240
and on that note

441
00:17:28,240 --> 00:17:30,320
that's what we have for today

442
00:17:30,320 --> 00:17:32,320
i hope that i've given you some useful

443
00:17:32,320 --> 00:17:34,559
information i'm very interested in

444
00:17:34,559 --> 00:17:36,640
hearing what your questions are

445
00:17:36,640 --> 00:17:39,840
and um remember speakers are pavlovian

446
00:17:39,840 --> 00:17:41,679
devices so

447
00:17:41,679 --> 00:17:43,600
if you like the talk let us know that

448
00:17:43,600 --> 00:17:44,880
you did

449
00:17:44,880 --> 00:17:47,679
if you wanted more of something

450
00:17:47,679 --> 00:17:50,080
tell us what is missing what

451
00:17:50,080 --> 00:17:52,080
what you'd like to hear

452
00:17:52,080 --> 00:17:53,760
and

453
00:17:53,760 --> 00:17:55,840
i guess that's it for today

454
00:17:55,840 --> 00:17:59,000
thank you

