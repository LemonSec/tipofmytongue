1
00:00:01,040 --> 00:00:02,639
hey everyone today i'll be talking to

2
00:00:02,639 --> 00:00:04,400
you about pinup head the unified

3
00:00:04,400 --> 00:00:06,160
framework for user authentication to

4
00:00:06,160 --> 00:00:08,320
kubernetes clusters

5
00:00:08,320 --> 00:00:11,280
so today i'm joined by anjali the pm for

6
00:00:11,280 --> 00:00:13,040
the project myself uh one of the

7
00:00:13,040 --> 00:00:16,720
engineers on the pinniped team

8
00:00:16,720 --> 00:00:19,039
so let's imagine that you use kubernetes

9
00:00:19,039 --> 00:00:20,560
and you've started to get used to using

10
00:00:20,560 --> 00:00:22,880
cube's retail and i'm really enjoying it

11
00:00:22,880 --> 00:00:24,400
and it's now time to start deploying it

12
00:00:24,400 --> 00:00:26,320
for real in your environment where you

13
00:00:26,320 --> 00:00:27,680
happen to use active directory to

14
00:00:27,680 --> 00:00:30,560
provide identities for your end users

15
00:00:30,560 --> 00:00:32,079
it seems like a fairly common thing to

16
00:00:32,079 --> 00:00:33,280
want to do

17
00:00:33,280 --> 00:00:34,640
um so

18
00:00:34,640 --> 00:00:35,920
let's think about how much you might

19
00:00:35,920 --> 00:00:38,160
imagine doing that

20
00:00:38,160 --> 00:00:41,839
we might start off with a google search

21
00:00:42,160 --> 00:00:44,320
and it appears that the first result for

22
00:00:44,320 --> 00:00:46,079
the most obvious google search is

23
00:00:46,079 --> 00:00:48,480
somebody's blog post so let's see where

24
00:00:48,480 --> 00:00:50,640
that takes us

25
00:00:50,640 --> 00:00:52,879
now if you've used q ttl and kubernetes

26
00:00:52,879 --> 00:00:54,879
for a while you'd imagine it would be a

27
00:00:54,879 --> 00:00:57,840
series of qc telephi commands

28
00:00:57,840 --> 00:01:01,039
instead what you encounter is

29
00:01:01,039 --> 00:01:03,440
a very complex set of configuration

30
00:01:03,440 --> 00:01:08,000
using two components dex and gangway

31
00:01:08,080 --> 00:01:11,680
that is unexpected there's a lot of ammo

32
00:01:11,680 --> 00:01:12,720
a lot of

33
00:01:12,720 --> 00:01:15,200
construction and it's not really clear

34
00:01:15,200 --> 00:01:18,640
what you're getting yourself into here

35
00:01:18,960 --> 00:01:20,080
so

36
00:01:20,080 --> 00:01:21,360
maybe

37
00:01:21,360 --> 00:01:23,200
let's back up maybe that was a bad

38
00:01:23,200 --> 00:01:25,119
search result let's back up and see what

39
00:01:25,119 --> 00:01:27,119
the second thing is that appears to be

40
00:01:27,119 --> 00:01:29,040
some official programs documentation

41
00:01:29,040 --> 00:01:31,520
maybe that can help us find a way to use

42
00:01:31,520 --> 00:01:35,119
active directory for kubernetes

43
00:01:36,640 --> 00:01:38,880
and so we looked through the official

44
00:01:38,880 --> 00:01:41,280
authentication documents for kubernetes

45
00:01:41,280 --> 00:01:44,079
and they refer to client certificates

46
00:01:44,079 --> 00:01:46,479
tokens and proxies

47
00:01:46,479 --> 00:01:48,640
nothing specific about using active

48
00:01:48,640 --> 00:01:51,119
directory

49
00:01:51,840 --> 00:01:53,920
and so here we start learning some of

50
00:01:53,920 --> 00:01:55,119
the problems

51
00:01:55,119 --> 00:01:58,320
kubernetes is very pluggable

52
00:01:58,320 --> 00:02:00,240
it does not have direct integration with

53
00:02:00,240 --> 00:02:01,680
active directory

54
00:02:01,680 --> 00:02:03,600
you're kind of on your own on that

55
00:02:03,600 --> 00:02:05,040
so this is beneficial if you want to

56
00:02:05,040 --> 00:02:07,520
build custom integrations but not so fun

57
00:02:07,520 --> 00:02:10,000
if you just want to get some work done

58
00:02:10,000 --> 00:02:10,800
so

59
00:02:10,800 --> 00:02:12,640
maybe let's head back to the blog post

60
00:02:12,640 --> 00:02:15,599
and see what it entails

61
00:02:15,599 --> 00:02:17,840
so

62
00:02:18,080 --> 00:02:20,080
we have to deploy two components dex and

63
00:02:20,080 --> 00:02:23,280
gangway and concert we have to configure

64
00:02:23,280 --> 00:02:26,560
various cli flags on the api server

65
00:02:26,560 --> 00:02:28,239
um

66
00:02:28,239 --> 00:02:29,920
we have to learn some

67
00:02:29,920 --> 00:02:32,080
oauth semantics

68
00:02:32,080 --> 00:02:33,920
have some very specific coordinated

69
00:02:33,920 --> 00:02:36,319
state between these components and the

70
00:02:36,319 --> 00:02:38,080
reality is these components were not

71
00:02:38,080 --> 00:02:40,000
built together

72
00:02:40,000 --> 00:02:42,080
they're open source projects

73
00:02:42,080 --> 00:02:44,400
important in their own right

74
00:02:44,400 --> 00:02:45,760
and certainly there's not necessarily

75
00:02:45,760 --> 00:02:48,000
anything wrong with this setup it's just

76
00:02:48,000 --> 00:02:50,239
not curated and it can be difficult to

77
00:02:50,239 --> 00:02:52,239
understand what's happening

78
00:02:52,239 --> 00:02:56,000
is really really per single cluster

79
00:02:56,000 --> 00:02:58,640
and it doesn't really scale out

80
00:02:58,640 --> 00:03:01,040
you know you can imagine a ton of extra

81
00:03:01,040 --> 00:03:02,239
work to

82
00:03:02,239 --> 00:03:04,000
add these components to every single

83
00:03:04,000 --> 00:03:05,599
cluster you use and that doesn't

84
00:03:05,599 --> 00:03:07,200
necessarily lead to the most convenient

85
00:03:07,200 --> 00:03:10,159
or secure deployment

86
00:03:10,319 --> 00:03:12,159
so

87
00:03:12,159 --> 00:03:14,159
pinpat attempts to solve these types of

88
00:03:14,159 --> 00:03:15,680
problems by providing a much more

89
00:03:15,680 --> 00:03:17,599
kubernetes native approach to

90
00:03:17,599 --> 00:03:19,040
authentication

91
00:03:19,040 --> 00:03:22,480
via comic providers such as oibc and ad

92
00:03:22,480 --> 00:03:24,159
and allows you to configure these at

93
00:03:24,159 --> 00:03:25,920
runtime

94
00:03:25,920 --> 00:03:27,599
it is an open source project that you

95
00:03:27,599 --> 00:03:30,080
can use on any kubernetes distribution

96
00:03:30,080 --> 00:03:32,480
so you want to start installing piniped

97
00:03:32,480 --> 00:03:34,640
the first steps are really easy you just

98
00:03:34,640 --> 00:03:37,120
keep ctl apply the manifest and install

99
00:03:37,120 --> 00:03:38,959
the two core components which are the

100
00:03:38,959 --> 00:03:40,879
pinniped supervisor and the pinniped

101
00:03:40,879 --> 00:03:43,440
concierge

102
00:03:43,440 --> 00:03:45,840
the pinniped supervisor is just a web

103
00:03:45,840 --> 00:03:48,239
server so it will require you to

104
00:03:48,239 --> 00:03:51,120
configure the ingress and tls for it

105
00:03:51,120 --> 00:03:53,439
here's an example of how we've done it

106
00:03:53,439 --> 00:03:56,159
in on a gke cluster with sort manager

107
00:03:56,159 --> 00:03:57,680
and let's encrypt

108
00:03:57,680 --> 00:03:59,599
so we start off by creating load

109
00:03:59,599 --> 00:04:04,079
balancer as a service for the supervisor

110
00:04:04,560 --> 00:04:06,720
next we configure google cloud dns to

111
00:04:06,720 --> 00:04:09,680
point to the service

112
00:04:10,720 --> 00:04:14,959
we install cert manager

113
00:04:14,959 --> 00:04:16,720
and then we request certificates from

114
00:04:16,720 --> 00:04:18,798
cert manager for the particular host

115
00:04:18,798 --> 00:04:22,078
name that you intend to use

116
00:04:23,680 --> 00:04:25,840
so if we finally come to the

117
00:04:25,840 --> 00:04:27,680
configuration steps that are more

118
00:04:27,680 --> 00:04:30,400
pinniped specific so all previous steps

119
00:04:30,400 --> 00:04:33,040
that you saw were just configuring the

120
00:04:33,040 --> 00:04:35,120
web server and you've probably done that

121
00:04:35,120 --> 00:04:37,040
for other applications that you may be

122
00:04:37,040 --> 00:04:38,560
using

123
00:04:38,560 --> 00:04:41,040
so the first core step is to create

124
00:04:41,040 --> 00:04:43,360
federation domain and configure it with

125
00:04:43,360 --> 00:04:46,160
the issuer url that you created in the

126
00:04:46,160 --> 00:04:47,759
previous steps

127
00:04:47,759 --> 00:04:48,479
so

128
00:04:48,479 --> 00:04:50,479
federation domain what this means or

129
00:04:50,479 --> 00:04:53,280
what this entails is in this case

130
00:04:53,280 --> 00:04:54,080
the

131
00:04:54,080 --> 00:04:55,360
issuer for example

132
00:04:55,360 --> 00:04:58,240
supervisor.mycompany.com

133
00:04:58,240 --> 00:05:00,320
this represents the set of kubernetes

134
00:05:00,320 --> 00:05:02,800
clusters that are going to trust this

135
00:05:02,800 --> 00:05:06,560
particular pinniped supervisor

136
00:05:08,160 --> 00:05:10,080
now let's go to active directory

137
00:05:10,080 --> 00:05:11,680
configuration

138
00:05:11,680 --> 00:05:14,479
well it's as easy as you can imagine

139
00:05:14,479 --> 00:05:16,720
you create an active directory custom

140
00:05:16,720 --> 00:05:19,280
resource uh you point it at the host

141
00:05:19,280 --> 00:05:21,840
name of your directory server and you

142
00:05:21,840 --> 00:05:24,479
provide it with bind credentials so

143
00:05:24,479 --> 00:05:26,000
that's it

144
00:05:26,000 --> 00:05:28,400
so there are other configuration options

145
00:05:28,400 --> 00:05:30,800
that you can do for example user search

146
00:05:30,800 --> 00:05:32,400
and group search

147
00:05:32,400 --> 00:05:34,160
with custom attributes

148
00:05:34,160 --> 00:05:36,479
but the default configuration that we

149
00:05:36,479 --> 00:05:39,199
provide is very well curated for most of

150
00:05:39,199 --> 00:05:43,120
the active directorate deployments

151
00:05:44,960 --> 00:05:47,039
okay so now the next step is to

152
00:05:47,039 --> 00:05:50,560
configure the pinniped considerage

153
00:05:50,560 --> 00:05:52,400
so we wanted to trust the pinniped

154
00:05:52,400 --> 00:05:55,600
supervisor as an identity issuer and

155
00:05:55,600 --> 00:05:57,600
this is going to be for a specific

156
00:05:57,600 --> 00:06:00,080
cluster audience in this case it is the

157
00:06:00,080 --> 00:06:02,560
dev cluster so this is likely going to

158
00:06:02,560 --> 00:06:06,440
be used by developers

159
00:06:08,560 --> 00:06:10,400
so now you're ready to get the cube

160
00:06:10,400 --> 00:06:13,039
config and distribute this to your

161
00:06:13,039 --> 00:06:14,319
developers

162
00:06:14,319 --> 00:06:16,080
uh notice here that there are no

163
00:06:16,080 --> 00:06:18,560
credentials in the cubeconfig so it is

164
00:06:18,560 --> 00:06:22,080
safe to distribute to users

165
00:06:26,319 --> 00:06:28,400
now your developers can take that cube

166
00:06:28,400 --> 00:06:29,680
config and

167
00:06:29,680 --> 00:06:31,600
start accessing the cluster with cube

168
00:06:31,600 --> 00:06:34,560
ctl commands here's an example of a

169
00:06:34,560 --> 00:06:36,800
developer that may be

170
00:06:36,800 --> 00:06:39,199
using a cube ctl get namespaces command

171
00:06:39,199 --> 00:06:42,319
on the cli they get prompted for user

172
00:06:42,319 --> 00:06:44,639
name and password because of course

173
00:06:44,639 --> 00:06:46,319
we've done active directory

174
00:06:46,319 --> 00:06:48,720
configuration so they get prompted for

175
00:06:48,720 --> 00:06:51,599
the username and password here and once

176
00:06:51,599 --> 00:06:53,680
they are successfully logged in

177
00:06:53,680 --> 00:06:55,919
then they can see the namespaces on the

178
00:06:55,919 --> 00:06:58,400
cluster

179
00:07:00,080 --> 00:07:02,720
now your developers may want to

180
00:07:02,720 --> 00:07:04,560
send more cube ctl commands to the

181
00:07:04,560 --> 00:07:05,680
cluster

182
00:07:05,680 --> 00:07:06,479
but

183
00:07:06,479 --> 00:07:07,759
of course they are not going to be

184
00:07:07,759 --> 00:07:09,919
prompted again for username and password

185
00:07:09,919 --> 00:07:11,919
because all of their credentials are

186
00:07:11,919 --> 00:07:14,318
cached

187
00:07:14,720 --> 00:07:16,800
so we provide some helpful commands for

188
00:07:16,800 --> 00:07:18,720
example the whoa command that helps you

189
00:07:18,720 --> 00:07:20,319
understand how you are logged into the

190
00:07:20,319 --> 00:07:23,120
cluster now in the previous example you

191
00:07:23,120 --> 00:07:26,240
had put in penny as the username

192
00:07:26,240 --> 00:07:28,400
but kubernetes will display the full

193
00:07:28,400 --> 00:07:31,840
user principle name the flexibility that

194
00:07:31,840 --> 00:07:34,160
we offer to the id administrator is to

195
00:07:34,160 --> 00:07:36,160
configure the user name however they

196
00:07:36,160 --> 00:07:39,120
want for example using sam account name

197
00:07:39,120 --> 00:07:41,039
user principal name or the mail

198
00:07:41,039 --> 00:07:42,319
attribute

199
00:07:42,319 --> 00:07:45,039
also by default we give you all of the

200
00:07:45,039 --> 00:07:47,840
direct and nested groups you can easily

201
00:07:47,840 --> 00:07:49,919
change and customize this based on your

202
00:07:49,919 --> 00:07:52,160
needs and we provide ample documentation

203
00:07:52,160 --> 00:07:55,520
examples to support this

204
00:07:57,280 --> 00:07:59,599
okay so you logged into

205
00:07:59,599 --> 00:08:00,400
uh

206
00:08:00,400 --> 00:08:02,639
one cluster with the supervisor and

207
00:08:02,639 --> 00:08:04,080
consideration

208
00:08:04,080 --> 00:08:06,479
now you may want to add another cluster

209
00:08:06,479 --> 00:08:08,160
and you may want to give access to

210
00:08:08,160 --> 00:08:10,160
another cluster to your user

211
00:08:10,160 --> 00:08:12,639
well it's as simple as installing the

212
00:08:12,639 --> 00:08:14,720
concierge on the second cluster with

213
00:08:14,720 --> 00:08:17,120
just two cube ctl commands

214
00:08:17,120 --> 00:08:18,639
and then configuring the jot

215
00:08:18,639 --> 00:08:21,199
authenticator to trust the supervisor

216
00:08:21,199 --> 00:08:23,440
and give it a unique audience

217
00:08:23,440 --> 00:08:25,680
so we don't need to install supervisor

218
00:08:25,680 --> 00:08:29,440
or any other configuration again

219
00:08:30,000 --> 00:08:32,399
so now you can get config for the second

220
00:08:32,399 --> 00:08:34,880
cluster and pass it to your users and

221
00:08:34,880 --> 00:08:36,159
developers

222
00:08:36,159 --> 00:08:38,240
also users don't get prompted a second

223
00:08:38,240 --> 00:08:40,479
time as the credentials are safely

224
00:08:40,479 --> 00:08:41,440
cached

225
00:08:41,440 --> 00:08:44,000
and can be used across the clusters as

226
00:08:44,000 --> 00:08:46,000
long as they are part of the same

227
00:08:46,000 --> 00:08:48,959
federation domain

228
00:08:51,040 --> 00:08:53,040
so to recap

229
00:08:53,040 --> 00:08:56,080
allows you to add and remove

230
00:08:56,080 --> 00:08:58,000
identity providers at runtime using

231
00:08:58,000 --> 00:08:59,040
standard

232
00:08:59,040 --> 00:09:01,600
programs resources it supports multiple

233
00:09:01,600 --> 00:09:03,519
different types of identity providers it

234
00:09:03,519 --> 00:09:06,000
allows easy logging across many clusters

235
00:09:06,000 --> 00:09:08,720
with single sign-on support

236
00:09:08,720 --> 00:09:11,680
and of course it's open source

237
00:09:11,680 --> 00:09:13,839
so looking to the future we're looking

238
00:09:13,839 --> 00:09:16,480
to add multiple idp support

239
00:09:16,480 --> 00:09:18,320
uh if folks are interested in this

240
00:09:18,320 --> 00:09:20,240
community interest we would like to add

241
00:09:20,240 --> 00:09:22,080
kerberos support for active directory so

242
00:09:22,080 --> 00:09:23,600
you no longer even have to type in your

243
00:09:23,600 --> 00:09:24,720
password

244
00:09:24,720 --> 00:09:26,880
uh additional ide types like github and

245
00:09:26,880 --> 00:09:28,560
google

246
00:09:28,560 --> 00:09:30,399
could be implemented and we're looking

247
00:09:30,399 --> 00:09:32,640
at various security hardening efforts

248
00:09:32,640 --> 00:09:33,760
such as

249
00:09:33,760 --> 00:09:35,680
more frequent and automatic rotation of

250
00:09:35,680 --> 00:09:36,800
all

251
00:09:36,800 --> 00:09:38,720
signing keys

252
00:09:38,720 --> 00:09:40,080
and we're really looking to have

253
00:09:40,080 --> 00:09:41,920
community members provide input on our

254
00:09:41,920 --> 00:09:44,160
roadmap so we can prioritize things that

255
00:09:44,160 --> 00:09:45,760
people are looking to have in their

256
00:09:45,760 --> 00:09:47,680
kubernetes environments

257
00:09:47,680 --> 00:09:49,120
we welcome your feedback and look

258
00:09:49,120 --> 00:09:51,760
forward to working with you

259
00:09:51,760 --> 00:09:54,320
you can find us in the kubernetes slack

260
00:09:54,320 --> 00:09:56,399
as well as on github

261
00:09:56,399 --> 00:09:58,880
everything here is apache apache license

262
00:09:58,880 --> 00:10:01,120
2.0 just like the rest of the brand's

263
00:10:01,120 --> 00:10:02,399
ecosystem

264
00:10:02,399 --> 00:10:04,399
and we look forward to working

265
00:10:04,399 --> 00:10:07,519
thank you

