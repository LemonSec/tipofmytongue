1
00:00:02,720 --> 00:00:05,279
hi everyone my name is adam wallace i'm

2
00:00:05,279 --> 00:00:07,279
a senior security software engineer at

3
00:00:07,279 --> 00:00:09,599
nvidia i've been here for three years i

4
00:00:09,599 --> 00:00:12,320
have a focus on devops and applications

5
00:00:12,320 --> 00:00:13,519
development

6
00:00:13,519 --> 00:00:14,880
i'd like to talk today a little bit

7
00:00:14,880 --> 00:00:17,359
about how nvidia is working to secure

8
00:00:17,359 --> 00:00:18,800
containers not only within our

9
00:00:18,800 --> 00:00:20,400
infrastructure but also those that we

10
00:00:20,400 --> 00:00:24,159
get to deliver to our customers

11
00:00:24,640 --> 00:00:25,840
i'm going to talk a little bit about

12
00:00:25,840 --> 00:00:28,000
nvidia's background in history uh and

13
00:00:28,000 --> 00:00:31,920
then also our ngc container catalog

14
00:00:31,920 --> 00:00:33,760
i'm also going to talk about our

15
00:00:33,760 --> 00:00:36,000
approach to security sort of some of the

16
00:00:36,000 --> 00:00:37,600
practical ways that we're approaching

17
00:00:37,600 --> 00:00:39,760
security with those containers and then

18
00:00:39,760 --> 00:00:41,360
i'm going to wrap up at the end with

19
00:00:41,360 --> 00:00:44,920
bring your own policy

20
00:00:46,480 --> 00:00:48,480
so many know us for the graphics card

21
00:00:48,480 --> 00:00:49,760
you know we've been synonymous with

22
00:00:49,760 --> 00:00:52,000
graphics cards pretty much since the

23
00:00:52,000 --> 00:00:53,920
invention of the graphics card it's been

24
00:00:53,920 --> 00:00:55,760
a really important core business for

25
00:00:55,760 --> 00:00:58,800
decades you know with a focus on gaming

26
00:00:58,800 --> 00:01:01,039
but there's been a shift over the last

27
00:01:01,039 --> 00:01:03,039
you know decade or so the importance of

28
00:01:03,039 --> 00:01:05,600
the gpu has really changed in that there

29
00:01:05,600 --> 00:01:07,760
have been massive pushes into machine

30
00:01:07,760 --> 00:01:09,920
learning deep learning and artificial

31
00:01:09,920 --> 00:01:11,760
intelligence it's pushing these

32
00:01:11,760 --> 00:01:13,760
incredibly complicated systems directly

33
00:01:13,760 --> 00:01:15,840
to the consumer

34
00:01:15,840 --> 00:01:17,840
with these pushes it really changes the

35
00:01:17,840 --> 00:01:19,920
way that we look at the graphics card

36
00:01:19,920 --> 00:01:22,159
and how we support the graphics card

37
00:01:22,159 --> 00:01:25,280
this is a full software stack that is

38
00:01:25,280 --> 00:01:26,880
required in order to support the new

39
00:01:26,880 --> 00:01:28,799
development and it changes the way that

40
00:01:28,799 --> 00:01:30,799
we have to look at securing this stack

41
00:01:30,799 --> 00:01:32,240
not only internally but for our

42
00:01:32,240 --> 00:01:34,720
customers

43
00:01:36,159 --> 00:01:39,119
ngc is an exciting service that we offer

44
00:01:39,119 --> 00:01:40,640
it's a catalog

45
00:01:40,640 --> 00:01:42,960
it's a catalog of toolkits that enable

46
00:01:42,960 --> 00:01:45,119
and accelerate machine learning deep

47
00:01:45,119 --> 00:01:47,520
learning and artificial intelligence

48
00:01:47,520 --> 00:01:50,159
the catalog offers a few key features

49
00:01:50,159 --> 00:01:52,320
some of which are storing docker images

50
00:01:52,320 --> 00:01:54,880
so it is a full docker registry

51
00:01:54,880 --> 00:01:56,640
it allows storage of helm charts for

52
00:01:56,640 --> 00:01:58,719
your different kubernetes workloads it

53
00:01:58,719 --> 00:02:00,640
allows storage of artificial

54
00:02:00,640 --> 00:02:02,159
intelligence models this really helps

55
00:02:02,159 --> 00:02:03,439
you get off the ground quickly if you're

56
00:02:03,439 --> 00:02:04,799
new to ai

57
00:02:04,799 --> 00:02:07,200
with models that are proven to work

58
00:02:07,200 --> 00:02:08,560
this is all done with the goal of

59
00:02:08,560 --> 00:02:10,399
simplifying the effort required to

60
00:02:10,399 --> 00:02:13,280
enable gpu optimized workloads

61
00:02:13,280 --> 00:02:14,959
additionally a private registry is

62
00:02:14,959 --> 00:02:17,120
offered this is so that enterprises or

63
00:02:17,120 --> 00:02:19,520
teams can collaborate within a private

64
00:02:19,520 --> 00:02:21,120
space and store their different docker

65
00:02:21,120 --> 00:02:23,840
images helm charts etc that they're

66
00:02:23,840 --> 00:02:25,599
maybe not ready to share or don't have

67
00:02:25,599 --> 00:02:28,160
the intention of sharing

68
00:02:28,160 --> 00:02:30,720
we use encore enterprise as part of ngc

69
00:02:30,720 --> 00:02:33,120
to help scan for security issues and let

70
00:02:33,120 --> 00:02:34,640
our customers know

71
00:02:34,640 --> 00:02:37,519
what sort of vulnerabilities might be

72
00:02:37,519 --> 00:02:39,120
applicable to them within the images

73
00:02:39,120 --> 00:02:41,120
that they're deploying

74
00:02:41,120 --> 00:02:42,560
you can see a link in the bottom right

75
00:02:42,560 --> 00:02:46,959
there for more information on ngc

76
00:02:48,160 --> 00:02:51,120
so often security gets a bad rap what

77
00:02:51,120 --> 00:02:54,080
happens is you know it's three days to a

78
00:02:54,080 --> 00:02:56,480
release cycle developer comes to us

79
00:02:56,480 --> 00:02:58,319
and realizes they have a bunch of

80
00:02:58,319 --> 00:03:00,159
security problems they didn't address or

81
00:03:00,159 --> 00:03:01,840
weren't even aware of

82
00:03:01,840 --> 00:03:03,519
you know they want us to drop everything

83
00:03:03,519 --> 00:03:05,200
and help them right away

84
00:03:05,200 --> 00:03:07,360
and hopefully this doesn't actually come

85
00:03:07,360 --> 00:03:09,360
out of our mouths and security but you

86
00:03:09,360 --> 00:03:10,720
know the snarky response would be

87
00:03:10,720 --> 00:03:12,239
something sure i'm not doing anything

88
00:03:12,239 --> 00:03:14,480
else i'll just you know help you and

89
00:03:14,480 --> 00:03:16,640
drop everything else i'm doing

90
00:03:16,640 --> 00:03:18,560
uh and by the way you're probably gonna

91
00:03:18,560 --> 00:03:20,159
have a bunch of issues that you won't

92
00:03:20,159 --> 00:03:21,519
have time to fix and you'll have to

93
00:03:21,519 --> 00:03:23,840
decide to either you know ship with them

94
00:03:23,840 --> 00:03:25,840
and acknowledge the risk there or you're

95
00:03:25,840 --> 00:03:27,280
gonna have to delay your release which

96
00:03:27,280 --> 00:03:29,440
no developer wants to hear no program

97
00:03:29,440 --> 00:03:31,840
manager wants to hear

98
00:03:31,840 --> 00:03:33,840
this presentation is really more about

99
00:03:33,840 --> 00:03:36,159
moving from the end of the process and

100
00:03:36,159 --> 00:03:38,640
shifting left as part of your

101
00:03:38,640 --> 00:03:42,480
thought in your development life cycle

102
00:03:42,480 --> 00:03:44,159
you know a view of this is as

103
00:03:44,159 --> 00:03:45,920
development starts kicking off you know

104
00:03:45,920 --> 00:03:47,519
you can think of rapid prototyping and

105
00:03:47,519 --> 00:03:49,680
development of software i'm probably not

106
00:03:49,680 --> 00:03:51,760
even really testing it um things start

107
00:03:51,760 --> 00:03:53,280
off kind of hot and heavy start moving

108
00:03:53,280 --> 00:03:55,680
down this hill that we have here and you

109
00:03:55,680 --> 00:03:57,760
realize i should be unit testing so you

110
00:03:57,760 --> 00:03:59,040
kind of bolt that on after the

111
00:03:59,040 --> 00:04:01,040
development start improving your code

112
00:04:01,040 --> 00:04:03,280
coverage a little bit you know you move

113
00:04:03,280 --> 00:04:05,040
on to integration testing to make sure

114
00:04:05,040 --> 00:04:06,959
that the different components really

115
00:04:06,959 --> 00:04:09,920
sort of interact together as expected

116
00:04:09,920 --> 00:04:10,799
um

117
00:04:10,799 --> 00:04:12,319
you know start moving down the hill this

118
00:04:12,319 --> 00:04:13,840
is where you might really hit your first

119
00:04:13,840 --> 00:04:16,238
big hiccup in that based on your

120
00:04:16,238 --> 00:04:18,880
different team's review styles you might

121
00:04:18,880 --> 00:04:20,079
have uh

122
00:04:20,079 --> 00:04:22,320
you know a lot of feedback that is based

123
00:04:22,320 --> 00:04:24,479
on opinion maybe that's coding style

124
00:04:24,479 --> 00:04:26,720
maybe true problems are found or corner

125
00:04:26,720 --> 00:04:28,160
cases that weren't anticipated or

126
00:04:28,160 --> 00:04:30,240
brought up and you have to go back and

127
00:04:30,240 --> 00:04:32,080
now readdress all the three phases we

128
00:04:32,080 --> 00:04:33,520
just talked about

129
00:04:33,520 --> 00:04:35,199
finally you make it through that phase

130
00:04:35,199 --> 00:04:36,400
you get the point where you're ready to

131
00:04:36,400 --> 00:04:37,280
merge

132
00:04:37,280 --> 00:04:39,280
and then you think about security you

133
00:04:39,280 --> 00:04:41,759
know and as a security team we don't

134
00:04:41,759 --> 00:04:43,280
want to be the police we want to be a

135
00:04:43,280 --> 00:04:45,680
partner we want to provide guard rails

136
00:04:45,680 --> 00:04:48,320
and not gates so how can we help these

137
00:04:48,320 --> 00:04:50,400
teams you know are we just plugging in

138
00:04:50,400 --> 00:04:51,680
after the merge point looking for

139
00:04:51,680 --> 00:04:53,120
security problems

140
00:04:53,120 --> 00:04:54,320
well i think you know the answer is

141
00:04:54,320 --> 00:04:55,600
probably no it's a little late in the

142
00:04:55,600 --> 00:04:58,320
game to do that so as you can imagine we

143
00:04:58,320 --> 00:05:00,479
keep moving up the hill here trying to

144
00:05:00,479 --> 00:05:02,720
look for the best places to plug in

145
00:05:02,720 --> 00:05:05,039
and the best place to start is at the

146
00:05:05,039 --> 00:05:07,440
beginning

147
00:05:07,600 --> 00:05:09,440
so some of the practical ways we can

148
00:05:09,440 --> 00:05:11,440
look at hooking in is described in this

149
00:05:11,440 --> 00:05:13,520
graphic here so we'll start off in the

150
00:05:13,520 --> 00:05:15,840
first bucket talking about your code you

151
00:05:15,840 --> 00:05:17,919
know open source screening as described

152
00:05:17,919 --> 00:05:19,600
down there might be something like

153
00:05:19,600 --> 00:05:22,080
static analysis checkers this is looking

154
00:05:22,080 --> 00:05:24,560
for uh you know basic security checks

155
00:05:24,560 --> 00:05:26,000
making sure that you're writing secure

156
00:05:26,000 --> 00:05:27,600
code this isn't going to catch

157
00:05:27,600 --> 00:05:28,880
everything but it's a really good thing

158
00:05:28,880 --> 00:05:30,400
to automate

159
00:05:30,400 --> 00:05:32,400
this is also reviewing your open source

160
00:05:32,400 --> 00:05:33,759
dependencies

161
00:05:33,759 --> 00:05:35,759
looking for known open source problems

162
00:05:35,759 --> 00:05:37,360
and vulnerabilities directly in the

163
00:05:37,360 --> 00:05:40,000
source code repository

164
00:05:40,000 --> 00:05:42,560
this can be done potentially even

165
00:05:42,560 --> 00:05:44,560
directly at the developer's workspace

166
00:05:44,560 --> 00:05:46,479
potentially in their code editor so

167
00:05:46,479 --> 00:05:48,880
think about like a vs code plugin that

168
00:05:48,880 --> 00:05:51,600
offers some sort of a static analysis or

169
00:05:51,600 --> 00:05:54,000
security code plugin if they can be

170
00:05:54,000 --> 00:05:55,759
alerted before they ever even commit the

171
00:05:55,759 --> 00:05:57,919
code they get the opportunity to address

172
00:05:57,919 --> 00:06:00,160
it right up front

173
00:06:00,160 --> 00:06:02,319
moving on to the build phase this is

174
00:06:02,319 --> 00:06:04,400
running scans and checks as part of

175
00:06:04,400 --> 00:06:06,560
every merge request or even better every

176
00:06:06,560 --> 00:06:08,160
commit

177
00:06:08,160 --> 00:06:10,160
this isn't just security this can be

178
00:06:10,160 --> 00:06:12,960
code formatting linting type checking

179
00:06:12,960 --> 00:06:15,919
for example my pi and python

180
00:06:15,919 --> 00:06:18,240
in addition to those security scans

181
00:06:18,240 --> 00:06:20,479
this is probably your best time to

182
00:06:20,479 --> 00:06:23,360
evaluate your your dependencies this is

183
00:06:23,360 --> 00:06:25,199
not just your direct dependencies so in

184
00:06:25,199 --> 00:06:26,800
python if you were you asked for the

185
00:06:26,800 --> 00:06:29,039
request library to be part of your

186
00:06:29,039 --> 00:06:31,360
package you're also indirectly or

187
00:06:31,360 --> 00:06:34,080
transitively requesting url lib3 and a

188
00:06:34,080 --> 00:06:36,479
bunch of other different python packages

189
00:06:36,479 --> 00:06:38,720
so this is evaluating your direct and

190
00:06:38,720 --> 00:06:41,360
your transitive dependencies um also

191
00:06:41,360 --> 00:06:43,360
committing those lock files directly

192
00:06:43,360 --> 00:06:45,520
into your source code repo so that you

193
00:06:45,520 --> 00:06:47,680
understand the artifacts that you are

194
00:06:47,680 --> 00:06:50,400
intending to ship

195
00:06:50,400 --> 00:06:52,960
um these dependency files might not be

196
00:06:52,960 --> 00:06:54,560
published in your final artifact and i

197
00:06:54,560 --> 00:06:56,080
would even argue they probably shouldn't

198
00:06:56,080 --> 00:06:58,479
be so this might be your best and only

199
00:06:58,479 --> 00:07:00,160
time to really evaluate those

200
00:07:00,160 --> 00:07:03,199
dependencies against what's expected

201
00:07:03,199 --> 00:07:05,199
moving on to packaging you know we're at

202
00:07:05,199 --> 00:07:07,120
kubecon so the obvious thought here is

203
00:07:07,120 --> 00:07:09,199
docker this is combining all of the

204
00:07:09,199 --> 00:07:11,759
artifacts into a singular package view

205
00:07:11,759 --> 00:07:14,400
container whatever you want to say

206
00:07:14,400 --> 00:07:15,520
that you're going to deliver to the

207
00:07:15,520 --> 00:07:16,880
customer

208
00:07:16,880 --> 00:07:17,919
um

209
00:07:17,919 --> 00:07:19,840
these artifacts that you have done in

210
00:07:19,840 --> 00:07:22,560
the previous two fill uh stages of the

211
00:07:22,560 --> 00:07:24,639
build really need to be looked at

212
00:07:24,639 --> 00:07:26,240
through the lens of the operating

213
00:07:26,240 --> 00:07:28,800
environment and what i mean by that is

214
00:07:28,800 --> 00:07:31,199
if you're using a package for example

215
00:07:31,199 --> 00:07:33,360
let's say you rely on lib ssl

216
00:07:33,360 --> 00:07:35,199
whether or not lib ssl is running an

217
00:07:35,199 --> 00:07:37,759
ubuntu versus red hat has security

218
00:07:37,759 --> 00:07:39,520
implications it may have been patched in

219
00:07:39,520 --> 00:07:41,599
one environment and not the other so

220
00:07:41,599 --> 00:07:42,880
it's important to look at it through

221
00:07:42,880 --> 00:07:45,840
that lens

222
00:07:45,919 --> 00:07:47,840
also this is a great time to look at the

223
00:07:47,840 --> 00:07:49,520
artifacts that were actually built into

224
00:07:49,520 --> 00:07:51,120
the container and compare them to the

225
00:07:51,120 --> 00:07:53,199
dependency list that you published in

226
00:07:53,199 --> 00:07:54,800
the previous stage

227
00:07:54,800 --> 00:07:56,400
do the direct and transitive

228
00:07:56,400 --> 00:07:58,080
dependencies that you requested did

229
00:07:58,080 --> 00:08:00,560
those actually show up in the container

230
00:08:00,560 --> 00:08:02,240
what other dependencies are now showing

231
00:08:02,240 --> 00:08:04,479
up for example from the operating system

232
00:08:04,479 --> 00:08:05,919
in the container that you've chosen to

233
00:08:05,919 --> 00:08:08,160
deploy from

234
00:08:08,160 --> 00:08:09,840
moving on to release

235
00:08:09,840 --> 00:08:12,000
this is hopefully just a set of checks

236
00:08:12,000 --> 00:08:14,319
and balances uh you know that the

237
00:08:14,319 --> 00:08:15,520
previous stages that we've already

238
00:08:15,520 --> 00:08:17,360
talked about meet the certifications

239
00:08:17,360 --> 00:08:20,080
that your team has to adhere to

240
00:08:20,080 --> 00:08:21,759
this should tie back through all three

241
00:08:21,759 --> 00:08:23,520
of those stages

242
00:08:23,520 --> 00:08:25,520
moving on to config

243
00:08:25,520 --> 00:08:27,440
ideally your configuration is being

244
00:08:27,440 --> 00:08:30,160
stored and treated as code

245
00:08:30,160 --> 00:08:32,159
for example you know let's say you're

246
00:08:32,159 --> 00:08:33,760
using terraform to keep track of your

247
00:08:33,760 --> 00:08:35,839
aws security groups this should be

248
00:08:35,839 --> 00:08:38,240
tracked and committed as code that

249
00:08:38,240 --> 00:08:40,320
describes your expected state so as we

250
00:08:40,320 --> 00:08:42,559
move on to monitoring you can check and

251
00:08:42,559 --> 00:08:44,159
see if there's any sort of drift in your

252
00:08:44,159 --> 00:08:45,760
configuration

253
00:08:45,760 --> 00:08:47,120
um you want to make sure that there is

254
00:08:47,120 --> 00:08:49,680
no drift and if there is drift you need

255
00:08:49,680 --> 00:08:51,839
to know do you do you know how to alert

256
00:08:51,839 --> 00:08:53,440
the appropriate parties do you actually

257
00:08:53,440 --> 00:08:55,279
have alerting in place so you could

258
00:08:55,279 --> 00:08:57,279
contact those parties in an automated

259
00:08:57,279 --> 00:08:59,600
fashion

260
00:09:01,040 --> 00:09:03,360
this is just a quick view of an internal

261
00:09:03,360 --> 00:09:05,200
tool that we develop within my team

262
00:09:05,200 --> 00:09:07,120
called inspect it's sort of a product

263
00:09:07,120 --> 00:09:09,519
security catalog the idea is to give you

264
00:09:09,519 --> 00:09:11,120
a single pane view

265
00:09:11,120 --> 00:09:13,279
of your wrist posture against your bill

266
00:09:13,279 --> 00:09:16,560
of materials um this is not tied to just

267
00:09:16,560 --> 00:09:18,640
one single scanning tool on the back end

268
00:09:18,640 --> 00:09:20,640
it combines multiple tools and gives you

269
00:09:20,640 --> 00:09:22,640
this single pane it allows you to see

270
00:09:22,640 --> 00:09:24,480
different cves against some of your open

271
00:09:24,480 --> 00:09:28,080
source dependencies etc

272
00:09:28,240 --> 00:09:30,640
it also allows you to sort based on

273
00:09:30,640 --> 00:09:32,800
vulnerabilities and give an idea of what

274
00:09:32,800 --> 00:09:34,480
linked packages are providing those so

275
00:09:34,480 --> 00:09:36,080
that we can work with the teams and see

276
00:09:36,080 --> 00:09:37,839
if those vulnerabilities really apply to

277
00:09:37,839 --> 00:09:39,440
them oftentimes you'll find that a

278
00:09:39,440 --> 00:09:41,360
vulnerability doesn't apply because of

279
00:09:41,360 --> 00:09:43,120
the way it was deployed or because

280
00:09:43,120 --> 00:09:44,800
they're not using certain functionality

281
00:09:44,800 --> 00:09:48,399
that only that cve applies to

282
00:09:48,880 --> 00:09:51,519
moving on to container security um as

283
00:09:51,519 --> 00:09:53,279
many of you here probably uh dealing

284
00:09:53,279 --> 00:09:55,040
with nvidia is also dealing with

285
00:09:55,040 --> 00:09:57,040
containers at scale you know we're

286
00:09:57,040 --> 00:09:58,560
talking about hundreds of thousands of

287
00:09:58,560 --> 00:10:00,240
individual container digests that we

288
00:10:00,240 --> 00:10:01,279
care about

289
00:10:01,279 --> 00:10:02,800
thousands of containers that must be

290
00:10:02,800 --> 00:10:04,959
scanned every day and i don't know what

291
00:10:04,959 --> 00:10:06,560
it is about machine learning deep

292
00:10:06,560 --> 00:10:08,800
learning and ai containers that are so

293
00:10:08,800 --> 00:10:10,560
complicated but for some reason they

294
00:10:10,560 --> 00:10:13,040
tend to be large you know i'm talking 20

295
00:10:13,040 --> 00:10:15,200
gigabytes or more and as you know that's

296
00:10:15,200 --> 00:10:17,279
pretty large for a docker image

297
00:10:17,279 --> 00:10:18,880
so there's challenges that come along

298
00:10:18,880 --> 00:10:20,959
with these large containers

299
00:10:20,959 --> 00:10:22,560
but however having all these things

300
00:10:22,560 --> 00:10:24,000
containerized really do bring some

301
00:10:24,000 --> 00:10:26,480
exciting possibilities and new risks and

302
00:10:26,480 --> 00:10:28,720
considerations to any developer on how

303
00:10:28,720 --> 00:10:30,720
this code is being deployed this is

304
00:10:30,720 --> 00:10:32,399
definitely not an all-encompassing list

305
00:10:32,399 --> 00:10:34,000
of those challenges but just a few i

306
00:10:34,000 --> 00:10:35,440
wanted to highlight

307
00:10:35,440 --> 00:10:37,360
tags are not immutable this is probably

308
00:10:37,360 --> 00:10:39,760
not used to anybody on this call but a

309
00:10:39,760 --> 00:10:42,079
tag is just a pointer to a digest and

310
00:10:42,079 --> 00:10:44,320
while that digest is immutable the tag

311
00:10:44,320 --> 00:10:45,839
is intentionally changeable it's a

312
00:10:45,839 --> 00:10:47,440
feature and one that we all rely on

313
00:10:47,440 --> 00:10:48,320
really

314
00:10:48,320 --> 00:10:50,240
allows easy updates to the consumers of

315
00:10:50,240 --> 00:10:51,920
your container

316
00:10:51,920 --> 00:10:53,920
but based on the fact that tags are not

317
00:10:53,920 --> 00:10:56,560
immutable reliance on tagging strategies

318
00:10:56,560 --> 00:10:58,000
really can introduce risk if you're not

319
00:10:58,000 --> 00:10:59,279
paying attention

320
00:10:59,279 --> 00:11:02,079
this can really range from a developer

321
00:11:02,079 --> 00:11:04,399
changing the contents of a container out

322
00:11:04,399 --> 00:11:06,000
from underneath of you this might be

323
00:11:06,000 --> 00:11:08,160
unintentional it could be careless or

324
00:11:08,160 --> 00:11:09,680
even malicious

325
00:11:09,680 --> 00:11:11,600
but other times this might be a very

326
00:11:11,600 --> 00:11:14,320
intentional change uh that the developer

327
00:11:14,320 --> 00:11:15,839
you know wanted to have in the container

328
00:11:15,839 --> 00:11:17,760
they've been broadcasting it but perhaps

329
00:11:17,760 --> 00:11:19,040
your team hasn't been paying attention

330
00:11:19,040 --> 00:11:20,880
to their release notes or you're just

331
00:11:20,880 --> 00:11:22,640
not paying attention at all and you're

332
00:11:22,640 --> 00:11:25,040
not ready for those changes

333
00:11:25,040 --> 00:11:27,680
uh in the in the context of kubernetes

334
00:11:27,680 --> 00:11:29,440
your different pull policies can affect

335
00:11:29,440 --> 00:11:30,959
whether or not you're pulling the latest

336
00:11:30,959 --> 00:11:32,959
and greatest containers down at all you

337
00:11:32,959 --> 00:11:34,640
might be stuck in a really old container

338
00:11:34,640 --> 00:11:37,279
image because your kubernetes uh

339
00:11:37,279 --> 00:11:39,600
deployment has reference to an old image

340
00:11:39,600 --> 00:11:41,040
and you've been telling it not to update

341
00:11:41,040 --> 00:11:42,959
it

342
00:11:42,959 --> 00:11:45,360
often docker daemons that are shipped

343
00:11:45,360 --> 00:11:47,440
with popular distributions don't enable

344
00:11:47,440 --> 00:11:49,120
user names facing by default so you

345
00:11:49,120 --> 00:11:51,519
might be over provisioning access to the

346
00:11:51,519 --> 00:11:52,720
containers that run within your

347
00:11:52,720 --> 00:11:55,519
infrastructure this is granting

348
00:11:55,519 --> 00:11:57,279
increased you know privilege to

349
00:11:57,279 --> 00:11:59,120
resources on the host that you may not

350
00:11:59,120 --> 00:12:01,839
wish to deploy

351
00:12:01,839 --> 00:12:03,360
we've already talked a little bit about

352
00:12:03,360 --> 00:12:05,920
some of nvidia's large docker images but

353
00:12:05,920 --> 00:12:07,760
you know scanning these containers bring

354
00:12:07,760 --> 00:12:10,000
additional challenges it requires more

355
00:12:10,000 --> 00:12:12,880
cpu more memory and more disk space as

356
00:12:12,880 --> 00:12:14,480
compared to just a regular static

357
00:12:14,480 --> 00:12:17,279
analysis code checker

358
00:12:17,279 --> 00:12:19,680
um not to mention secrets and sensitive

359
00:12:19,680 --> 00:12:21,440
data right i actually believe it's

360
00:12:21,440 --> 00:12:23,519
easier within containers to accidentally

361
00:12:23,519 --> 00:12:25,760
leave a secret or something sensitive in

362
00:12:25,760 --> 00:12:28,399
a container than it is to properly leave

363
00:12:28,399 --> 00:12:30,000
it out during a build there's a lot of

364
00:12:30,000 --> 00:12:32,399
ways to mess it up it's a huge risk to

365
00:12:32,399 --> 00:12:35,680
an organization if an api token or an

366
00:12:35,680 --> 00:12:37,680
encryption key is accidentally left

367
00:12:37,680 --> 00:12:41,120
within a container and it gets published

368
00:12:41,120 --> 00:12:43,120
and a container digest can persist

369
00:12:43,120 --> 00:12:44,160
forever

370
00:12:44,160 --> 00:12:46,800
but a tag of latest as you know induces

371
00:12:46,800 --> 00:12:49,680
a false sense of security that container

372
00:12:49,680 --> 00:12:51,200
might be the latest but it might be

373
00:12:51,200 --> 00:12:52,880
three years old and not be receiving

374
00:12:52,880 --> 00:12:56,639
regular updates at all

375
00:12:58,079 --> 00:12:59,600
so scanning these containers really

376
00:12:59,600 --> 00:13:02,480
grants us some unique considerations

377
00:13:02,480 --> 00:13:04,959
packages and artifacts can be inspected

378
00:13:04,959 --> 00:13:06,560
in the environment in which it will

379
00:13:06,560 --> 00:13:08,000
actually run

380
00:13:08,000 --> 00:13:09,760
so for example you can validate that a

381
00:13:09,760 --> 00:13:12,320
compiled binary in the linkages so for

382
00:13:12,320 --> 00:13:14,639
example the libraries it relies on

383
00:13:14,639 --> 00:13:16,160
exists within the container and meets

384
00:13:16,160 --> 00:13:18,880
the expectations the developer had

385
00:13:18,880 --> 00:13:20,320
scanning those packages i've talked

386
00:13:20,320 --> 00:13:22,639
about this before though uh before

387
00:13:22,639 --> 00:13:24,399
gives you the ability to look through a

388
00:13:24,399 --> 00:13:27,200
lens to reduce false positives so if

389
00:13:27,200 --> 00:13:29,360
ubuntu has in fact patched a version of

390
00:13:29,360 --> 00:13:32,079
live ssl and you're using that container

391
00:13:32,079 --> 00:13:33,680
you don't want to see all the cves that

392
00:13:33,680 --> 00:13:35,440
don't apply to you in your list it's

393
00:13:35,440 --> 00:13:36,880
extra noise that you don't want to deal

394
00:13:36,880 --> 00:13:38,160
with

395
00:13:38,160 --> 00:13:40,079
containers should also be continually

396
00:13:40,079 --> 00:13:41,519
checked against the feeds for

397
00:13:41,519 --> 00:13:43,279
ever-growing lists of vulnerabilities

398
00:13:43,279 --> 00:13:44,880
the different feeds we have access to

399
00:13:44,880 --> 00:13:48,079
from nvd from red hat ubuntu etc they're

400
00:13:48,079 --> 00:13:50,800
updated practically daily um sometimes

401
00:13:50,800 --> 00:13:53,279
hourly so you can't just set and forget

402
00:13:53,279 --> 00:13:55,040
um you need to constantly monitor and be

403
00:13:55,040 --> 00:13:56,800
aware of the vulnerability posture that

404
00:13:56,800 --> 00:13:59,920
you have against your deployed code

405
00:13:59,920 --> 00:14:02,000
one of the exciting changes to the uh

406
00:14:02,000 --> 00:14:04,480
version two of docker registry was this

407
00:14:04,480 --> 00:14:06,720
um multi-architectural support under a

408
00:14:06,720 --> 00:14:08,399
single tag name

409
00:14:08,399 --> 00:14:10,079
it's really nice from an organizational

410
00:14:10,079 --> 00:14:11,600
standpoint because you can have a single

411
00:14:11,600 --> 00:14:14,320
tag that covers both arm 64 for example

412
00:14:14,320 --> 00:14:17,839
and amd 64. but that also introduces the

413
00:14:17,839 --> 00:14:20,240
challenge of uh knowing the risk

414
00:14:20,240 --> 00:14:22,240
associated with each of the container

415
00:14:22,240 --> 00:14:24,399
images that rely within that tag you

416
00:14:24,399 --> 00:14:25,920
might have a vulnerability that only

417
00:14:25,920 --> 00:14:28,560
affects arm but doesn't affect intel or

418
00:14:28,560 --> 00:14:31,560
amd64

419
00:14:32,560 --> 00:14:33,680
so some of the ways that we're

420
00:14:33,680 --> 00:14:35,360
approaching this in nvidia

421
00:14:35,360 --> 00:14:37,199
um i'm going to switch gears here a

422
00:14:37,199 --> 00:14:38,480
little bit and talk about sort of the

423
00:14:38,480 --> 00:14:40,000
evolution of like how we've tried to

424
00:14:40,000 --> 00:14:42,560
approach this initially we really tried

425
00:14:42,560 --> 00:14:43,600
to

426
00:14:43,600 --> 00:14:44,639
use

427
00:14:44,639 --> 00:14:46,399
this sort of decentralized approach

428
00:14:46,399 --> 00:14:48,720
directly in developers pipelines we used

429
00:14:48,720 --> 00:14:51,519
encore's open source engine

430
00:14:51,519 --> 00:14:53,120
which allowed this game stored right in

431
00:14:53,120 --> 00:14:54,639
the pipeline so it's nice each team

432
00:14:54,639 --> 00:14:56,399
could use their own resources to handle

433
00:14:56,399 --> 00:14:57,120
it

434
00:14:57,120 --> 00:14:58,959
the results were also captured directly

435
00:14:58,959 --> 00:15:02,000
as artifacts in the team's pipelines but

436
00:15:02,000 --> 00:15:03,199
they weren't really restored in some

437
00:15:03,199 --> 00:15:05,440
sort of common database or an api where

438
00:15:05,440 --> 00:15:07,279
like the security team could go and

439
00:15:07,279 --> 00:15:09,120
query the security posture of different

440
00:15:09,120 --> 00:15:10,399
teams

441
00:15:10,399 --> 00:15:12,560
so the next logical step was purchasing

442
00:15:12,560 --> 00:15:15,120
in-core enterprise um and deploying our

443
00:15:15,120 --> 00:15:17,199
in-core scanners within the sas endpoint

444
00:15:17,199 --> 00:15:19,040
within kubernetes

445
00:15:19,040 --> 00:15:21,120
um a lot of benefits here really like

446
00:15:21,120 --> 00:15:22,800
you have a centralized api where you can

447
00:15:22,800 --> 00:15:25,040
retrieve those results it's constantly

448
00:15:25,040 --> 00:15:26,880
refreshing the feed databases so that

449
00:15:26,880 --> 00:15:29,120
you can if you ever need to check your

450
00:15:29,120 --> 00:15:31,040
security posture against certain

451
00:15:31,040 --> 00:15:32,399
policies and checks that you have

452
00:15:32,399 --> 00:15:34,160
deployed you can get those on a

453
00:15:34,160 --> 00:15:36,000
practically real-time basis

454
00:15:36,000 --> 00:15:37,519
but there were some drawbacks of this

455
00:15:37,519 --> 00:15:38,399
approach

456
00:15:38,399 --> 00:15:41,040
we had to store teams api tokens uh

457
00:15:41,040 --> 00:15:43,360
within our sas instance so that we had

458
00:15:43,360 --> 00:15:45,120
access to different private registries

459
00:15:45,120 --> 00:15:47,360
that teams have within nvidia

460
00:15:47,360 --> 00:15:49,279
um performance can also be a bottleneck

461
00:15:49,279 --> 00:15:50,720
of a whole bunch of teams queue up at

462
00:15:50,720 --> 00:15:53,600
the same time and could cause uh you

463
00:15:53,600 --> 00:15:56,639
know a tremendous slowdown in pipelines

464
00:15:56,639 --> 00:15:58,000
so some of what we're working towards

465
00:15:58,000 --> 00:16:00,639
now is that kind of decentralized plus

466
00:16:00,639 --> 00:16:03,279
sas architecture this is using the open

467
00:16:03,279 --> 00:16:05,440
source product by encore called sift

468
00:16:05,440 --> 00:16:07,199
which generates a bill of materials

469
00:16:07,199 --> 00:16:08,959
within teams pipeline so the heavy

470
00:16:08,959 --> 00:16:10,480
lifting of generating the bill of

471
00:16:10,480 --> 00:16:12,000
materials is done within the team's

472
00:16:12,000 --> 00:16:13,199
pipelines

473
00:16:13,199 --> 00:16:15,600
and then sif uh promotes that bill of

474
00:16:15,600 --> 00:16:18,079
materials back to the sas endpoint for a

475
00:16:18,079 --> 00:16:20,240
quick processing to do a vulnerability

476
00:16:20,240 --> 00:16:22,160
check

477
00:16:22,160 --> 00:16:23,600
another advantage is that teams don't

478
00:16:23,600 --> 00:16:25,600
have to provide any credentials at all

479
00:16:25,600 --> 00:16:27,120
since sift is operated within their

480
00:16:27,120 --> 00:16:28,399
infrastructure and that's where the

481
00:16:28,399 --> 00:16:32,160
image is intro or inspected i mean

482
00:16:32,160 --> 00:16:33,759
it gives us the advantage of not needing

483
00:16:33,759 --> 00:16:35,839
those credentials so we sort of retain

484
00:16:35,839 --> 00:16:38,720
the benefits of sas api for the catalog

485
00:16:38,720 --> 00:16:40,560
vulnerabilities on demand

486
00:16:40,560 --> 00:16:42,560
without having to have a whole bunch of

487
00:16:42,560 --> 00:16:44,560
infrastructure within sas to support it

488
00:16:44,560 --> 00:16:46,560
we allow each team to scale as they need

489
00:16:46,560 --> 00:16:50,758
to based on their number of images

490
00:16:52,160 --> 00:16:54,880
so continuing along this whole idea of

491
00:16:54,880 --> 00:16:57,519
guard rails and not gates you know we

492
00:16:57,519 --> 00:16:59,839
realized pretty quickly that policies

493
00:16:59,839 --> 00:17:02,240
were not a one-size-fits-all

494
00:17:02,240 --> 00:17:03,600
sort of

495
00:17:03,600 --> 00:17:05,520
idea for different teams

496
00:17:05,520 --> 00:17:08,000
so we do want to provide guidance in a

497
00:17:08,000 --> 00:17:11,199
sane set of default policies for teams

498
00:17:11,199 --> 00:17:13,439
you know this real life this is along

499
00:17:13,439 --> 00:17:15,119
the lines of vulnerability so certain

500
00:17:15,119 --> 00:17:16,959
cve scores you know we might want to

501
00:17:16,959 --> 00:17:19,760
mark as critical or high and not allow a

502
00:17:19,760 --> 00:17:21,359
pipeline to pass

503
00:17:21,359 --> 00:17:23,119
this is looking for secrets and

504
00:17:23,119 --> 00:17:24,799
credentials perhaps stored within the

505
00:17:24,799 --> 00:17:27,039
different layers of an image

506
00:17:27,039 --> 00:17:29,360
this might be internal or secret project

507
00:17:29,360 --> 00:17:31,760
names that we're not quite ready to get

508
00:17:31,760 --> 00:17:34,400
twitter or reddit excited over

509
00:17:34,400 --> 00:17:37,120
uh malware so we can do malware scans in

510
00:17:37,120 --> 00:17:39,600
the different images um as part of same

511
00:17:39,600 --> 00:17:40,799
defaults

512
00:17:40,799 --> 00:17:43,360
and even things like looking for

513
00:17:43,360 --> 00:17:45,919
you know mistakes typos or even typo

514
00:17:45,919 --> 00:17:47,600
squatting that might be released in an

515
00:17:47,600 --> 00:17:49,919
image that might direct uh

516
00:17:49,919 --> 00:17:54,480
customers traffic to incorrect domains

517
00:17:54,480 --> 00:17:56,240
so what we really want to do here though

518
00:17:56,240 --> 00:17:58,720
at nvidia is encourage each team to sign

519
00:17:58,720 --> 00:18:00,960
off on their set of policies that are

520
00:18:00,960 --> 00:18:02,880
appropriate to their program commit

521
00:18:02,880 --> 00:18:04,960
these policies as code directly within

522
00:18:04,960 --> 00:18:07,520
their source code repositories and keep

523
00:18:07,520 --> 00:18:09,600
track of it

524
00:18:09,600 --> 00:18:11,360
and then we allow them to submit that to

525
00:18:11,360 --> 00:18:13,919
our sas endpoint to evaluate their their

526
00:18:13,919 --> 00:18:16,559
risk posture this really allows us sort

527
00:18:16,559 --> 00:18:19,440
of on the fly policy

528
00:18:19,440 --> 00:18:21,679
and has really you know worked out well

529
00:18:21,679 --> 00:18:24,720
for our team so far

530
00:18:26,320 --> 00:18:28,240
so as i'm wrapping up i just want to

531
00:18:28,240 --> 00:18:29,600
talk about like how we're trying to

532
00:18:29,600 --> 00:18:31,760
support developers in nvidia how we're

533
00:18:31,760 --> 00:18:33,919
trying to make their lives um

534
00:18:33,919 --> 00:18:36,240
how to to help them without inhibiting

535
00:18:36,240 --> 00:18:37,919
them

536
00:18:37,919 --> 00:18:39,360
so one of the first things we look at

537
00:18:39,360 --> 00:18:42,160
when we uh investigate a new tool is

538
00:18:42,160 --> 00:18:44,559
sort of its api posture so we're api

539
00:18:44,559 --> 00:18:47,520
first we use a variety of build tools uh

540
00:18:47,520 --> 00:18:49,600
that developers are already comfortable

541
00:18:49,600 --> 00:18:52,000
with and by build tools i'm talking more

542
00:18:52,000 --> 00:18:53,679
more along the lines of pipelines so

543
00:18:53,679 --> 00:18:56,320
jenkins get lab ci cd github actions

544
00:18:56,320 --> 00:18:57,679
team city

545
00:18:57,679 --> 00:18:59,679
so we're working in a variety of

546
00:18:59,679 --> 00:19:01,120
environments so apis are really

547
00:19:01,120 --> 00:19:02,320
important

548
00:19:02,320 --> 00:19:03,760
teams don't have the

549
00:19:03,760 --> 00:19:05,919
time or the luxury to learn a new ui

550
00:19:05,919 --> 00:19:08,880
tool for every single tool we roll out

551
00:19:08,880 --> 00:19:10,320
and even worse we know they're not going

552
00:19:10,320 --> 00:19:12,720
to be checking on any sort of a reliable

553
00:19:12,720 --> 00:19:14,000
schedule to see if they're now

554
00:19:14,000 --> 00:19:16,960
vulnerable to some newly released cve

555
00:19:16,960 --> 00:19:19,520
um within that ui so we have to use the

556
00:19:19,520 --> 00:19:22,160
api within their pipeline to query and

557
00:19:22,160 --> 00:19:24,799
return their results we need robust apis

558
00:19:24,799 --> 00:19:27,360
for the services deployed at nvidia

559
00:19:27,360 --> 00:19:29,679
we want to minimize the impact on

560
00:19:29,679 --> 00:19:31,840
development teams scan times have to be

561
00:19:31,840 --> 00:19:34,640
reasonable if we're adding 15 minutes or

562
00:19:34,640 --> 00:19:36,799
even five minutes to a pipeline

563
00:19:36,799 --> 00:19:38,480
developers are likely going to start

564
00:19:38,480 --> 00:19:40,640
looking for ways to bypass our scans or

565
00:19:40,640 --> 00:19:42,240
reduce the frequency

566
00:19:42,240 --> 00:19:43,919
um i mean this just makes sense as a

567
00:19:43,919 --> 00:19:45,679
developer you're on a tight schedule you

568
00:19:45,679 --> 00:19:47,520
have a lot of work to get done so we

569
00:19:47,520 --> 00:19:49,120
don't want to slow them down

570
00:19:49,120 --> 00:19:50,880
um kind of combined with that is alert

571
00:19:50,880 --> 00:19:52,400
fatigue you know we've really found that

572
00:19:52,400 --> 00:19:54,080
it's counterproductive to over alert

573
00:19:54,080 --> 00:19:56,400
teams receiving a slack message for

574
00:19:56,400 --> 00:19:58,080
every different vulnerability report or

575
00:19:58,080 --> 00:19:58,960
every

576
00:19:58,960 --> 00:20:01,120
cve is really just going to force them

577
00:20:01,120 --> 00:20:02,720
to invest more time in learning how to

578
00:20:02,720 --> 00:20:03,520
mute

579
00:20:03,520 --> 00:20:05,520
mute channels in slack than it is going

580
00:20:05,520 --> 00:20:06,720
to be with them trying to fix their

581
00:20:06,720 --> 00:20:08,960
vulnerabilities and then optimizing the

582
00:20:08,960 --> 00:20:11,440
signal-to-noise ratio every tool is

583
00:20:11,440 --> 00:20:13,120
going to generate some threshold of

584
00:20:13,120 --> 00:20:15,120
false positives or even worse false

585
00:20:15,120 --> 00:20:17,360
negatives so we're looking for tools

586
00:20:17,360 --> 00:20:19,200
that do a good job at trying to minimize

587
00:20:19,200 --> 00:20:20,480
that that's why it's important to look

588
00:20:20,480 --> 00:20:22,720
at vulnerabilities against a vendor feed

589
00:20:22,720 --> 00:20:24,559
or against the operating system in which

590
00:20:24,559 --> 00:20:25,600
they run

591
00:20:25,600 --> 00:20:27,039
it's a high priority for us and a

592
00:20:27,039 --> 00:20:29,200
primary consideration

593
00:20:29,200 --> 00:20:30,640
um you know

594
00:20:30,640 --> 00:20:32,480
the last thing i want to say is you just

595
00:20:32,480 --> 00:20:34,080
really want to provide these guard rails

596
00:20:34,080 --> 00:20:36,240
and not gates uh you know we work

597
00:20:36,240 --> 00:20:38,000
carefully and closely with our product

598
00:20:38,000 --> 00:20:40,400
security incident response team and we

599
00:20:40,400 --> 00:20:42,400
help to encourage teams and guide them

600
00:20:42,400 --> 00:20:44,000
through the process if a vulnerability

601
00:20:44,000 --> 00:20:46,240
is found within their products we also

602
00:20:46,240 --> 00:20:48,720
help to provide a healthy set of

603
00:20:48,720 --> 00:20:50,159
guidelines to the team so that they

604
00:20:50,159 --> 00:20:52,240
don't all need to be experts on every

605
00:20:52,240 --> 00:20:54,080
facet of every tool that is provided to

606
00:20:54,080 --> 00:20:56,320
them

607
00:20:57,840 --> 00:20:59,760
just wrapping up here we're going to

608
00:20:59,760 --> 00:21:02,480
have a q a session now if you have any

609
00:21:02,480 --> 00:21:04,400
questions feel free to ask them now if

610
00:21:04,400 --> 00:21:06,320
you have more interest in ngc you can

611
00:21:06,320 --> 00:21:08,240
find a link here below and if you're

612
00:21:08,240 --> 00:21:10,000
interested in sift for getting an idea

613
00:21:10,000 --> 00:21:12,240
of your bill of materials please check

614
00:21:12,240 --> 00:21:14,159
out the github link below thanks for

615
00:21:14,159 --> 00:21:17,480
your time everybody

