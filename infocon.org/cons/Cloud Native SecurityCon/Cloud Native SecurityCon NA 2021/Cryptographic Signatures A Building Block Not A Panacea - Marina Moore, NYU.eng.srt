1
00:00:00,399 --> 00:00:02,560
hey hi um

2
00:00:02,560 --> 00:00:04,240
so like they mentioned i'm

3
00:00:04,240 --> 00:00:07,839
marina moore i'm a phd student at nyu i

4
00:00:07,839 --> 00:00:11,120
work with dr justin capos in the um

5
00:00:11,120 --> 00:00:12,880
seeker systems lab there

6
00:00:12,880 --> 00:00:15,200
and i contribute to tough and various

7
00:00:15,200 --> 00:00:16,079
other

8
00:00:16,079 --> 00:00:17,840
open source projects and

9
00:00:17,840 --> 00:00:19,119
they talk a little bit today about some

10
00:00:19,119 --> 00:00:20,560
of the lessons i've learned through

11
00:00:20,560 --> 00:00:22,400
working in the secure software supply

12
00:00:22,400 --> 00:00:24,400
chain space about cryptographic

13
00:00:24,400 --> 00:00:25,920
signatures and what they like do and

14
00:00:25,920 --> 00:00:27,439
don't provide

15
00:00:27,439 --> 00:00:28,840
for your

16
00:00:28,840 --> 00:00:31,359
systems so yeah um if you know if you're

17
00:00:31,359 --> 00:00:33,920
here today at um cloud native security

18
00:00:33,920 --> 00:00:35,120
conference you've probably heard a

19
00:00:35,120 --> 00:00:37,040
little bit about these cryptographic

20
00:00:37,040 --> 00:00:38,480
signature things

21
00:00:38,480 --> 00:00:40,000
um

22
00:00:40,000 --> 00:00:41,280
you know it's a bunch of math that does

23
00:00:41,280 --> 00:00:43,600
that provides a cryptographic guarantee

24
00:00:43,600 --> 00:00:45,440
that a particular private key signed a

25
00:00:45,440 --> 00:00:47,520
data and you can verify this using a

26
00:00:47,520 --> 00:00:49,920
public key associated with that private

27
00:00:49,920 --> 00:00:52,360
key some you may have heard of include

28
00:00:52,360 --> 00:00:56,719
825519 eddsa rsa and and many others

29
00:00:56,719 --> 00:00:58,879
that aren't listed here

30
00:00:58,879 --> 00:01:00,320
so make sure we're on the same page in

31
00:01:00,320 --> 00:01:01,600
case this is the first you've ever heard

32
00:01:01,600 --> 00:01:03,840
of a cryptographic signature

33
00:01:03,840 --> 00:01:06,240
kind of an overview of how these work is

34
00:01:06,240 --> 00:01:07,920
that um

35
00:01:07,920 --> 00:01:09,040
either you have one entity with a

36
00:01:09,040 --> 00:01:11,040
private key that signs an artifact or

37
00:01:11,040 --> 00:01:12,479
really any message

38
00:01:12,479 --> 00:01:13,840
that contains some content that they're

39
00:01:13,840 --> 00:01:16,400
signing this the artifact and the

40
00:01:16,400 --> 00:01:17,759
signature that's kind of attached to

41
00:01:17,759 --> 00:01:20,400
that artifact is then sent to a verifier

42
00:01:20,400 --> 00:01:22,880
or really to anyone who then can use a

43
00:01:22,880 --> 00:01:24,159
public key

44
00:01:24,159 --> 00:01:25,680
that's you know cryptographically linked

45
00:01:25,680 --> 00:01:27,439
to this private key they can use that

46
00:01:27,439 --> 00:01:29,360
key to then verify the artifact and

47
00:01:29,360 --> 00:01:31,680
really ensure that the signature came

48
00:01:31,680 --> 00:01:33,439
from the private key like it was

49
00:01:33,439 --> 00:01:35,919
supposed to

50
00:01:36,000 --> 00:01:37,680
but okay so what does this actually mean

51
00:01:37,680 --> 00:01:40,640
for you know for us making um secure

52
00:01:40,640 --> 00:01:41,840
systems

53
00:01:41,840 --> 00:01:43,680
the main guarantee that is this still

54
00:01:43,680 --> 00:01:46,640
working good okay

55
00:01:46,640 --> 00:01:48,720
the main guarantee that um

56
00:01:48,720 --> 00:01:50,720
is is given by a cryptographic signature

57
00:01:50,720 --> 00:01:52,799
is that at one point in time some entity

58
00:01:52,799 --> 00:01:55,200
that controlled this private key decided

59
00:01:55,200 --> 00:01:58,159
to sign this message or this artifact

60
00:01:58,159 --> 00:01:59,360
um

61
00:01:59,360 --> 00:02:00,479
but it doesn't really say like that's

62
00:02:00,479 --> 00:02:02,399
the only guarantee you really get and

63
00:02:02,399 --> 00:02:04,000
you can do a lot of really powerful

64
00:02:04,000 --> 00:02:06,079
things with this mechanism but on its

65
00:02:06,079 --> 00:02:08,639
own it doesn't have a lot of

66
00:02:08,639 --> 00:02:11,760
like semantic meaning by itself

67
00:02:11,760 --> 00:02:13,520
but if you put these signatures in

68
00:02:13,520 --> 00:02:15,440
context with a lot of other policies and

69
00:02:15,440 --> 00:02:17,680
rules and kind of

70
00:02:17,680 --> 00:02:19,440
you know formulations you can really get

71
00:02:19,440 --> 00:02:21,440
a lot out of the system

72
00:02:21,440 --> 00:02:22,640
so some of the things to kind of think

73
00:02:22,640 --> 00:02:23,920
about and we're going to go into a lot

74
00:02:23,920 --> 00:02:27,200
more detail about some of these is um

75
00:02:27,200 --> 00:02:28,959
who should sign like who controls this

76
00:02:28,959 --> 00:02:30,879
private key that is then signing

77
00:02:30,879 --> 00:02:32,800
information how do you know that they

78
00:02:32,800 --> 00:02:35,200
actually control this private key

79
00:02:35,200 --> 00:02:37,120
um

80
00:02:37,120 --> 00:02:39,840
uh what what what is each key allowed to

81
00:02:39,840 --> 00:02:41,200
sign

82
00:02:41,200 --> 00:02:42,640
what should you do if something is not

83
00:02:42,640 --> 00:02:44,800
signed or if the verification fails like

84
00:02:44,800 --> 00:02:46,239
what are your next steps what do you do

85
00:02:46,239 --> 00:02:47,360
then

86
00:02:47,360 --> 00:02:48,720
and what do you do if this key ends up

87
00:02:48,720 --> 00:02:50,080
in the hands of the wrong person and you

88
00:02:50,080 --> 00:02:51,760
find out that this went wrong

89
00:02:51,760 --> 00:02:53,360
and how should you store both the public

90
00:02:53,360 --> 00:02:55,200
and the private keys to ensure that

91
00:02:55,200 --> 00:02:56,480
they're

92
00:02:56,480 --> 00:02:58,319
properly accessed

93
00:02:58,319 --> 00:02:59,760
so the first step in answering a lot of

94
00:02:59,760 --> 00:03:01,599
these questions is looking at why you

95
00:03:01,599 --> 00:03:03,040
actually want to use cryptographic

96
00:03:03,040 --> 00:03:05,440
signatures i think a lot of people

97
00:03:05,440 --> 00:03:06,400
um

98
00:03:06,400 --> 00:03:07,680
look at like you know distribution of

99
00:03:07,680 --> 00:03:09,440
artifacts or messages and say you know

100
00:03:09,440 --> 00:03:10,640
we need to sign them so that they're

101
00:03:10,640 --> 00:03:12,800
secure when they're you know sent across

102
00:03:12,800 --> 00:03:14,000
but i think it's important to think

103
00:03:14,000 --> 00:03:16,080
about what meaning you're hoping to get

104
00:03:16,080 --> 00:03:18,080
from that signature does the signature

105
00:03:18,080 --> 00:03:20,000
just mean that the correct person wrote

106
00:03:20,000 --> 00:03:22,080
the software that you're then receiving

107
00:03:22,080 --> 00:03:23,280
or does it mean that like you know a

108
00:03:23,280 --> 00:03:25,599
security team reviewed this software

109
00:03:25,599 --> 00:03:27,040
and really you know ensure that that was

110
00:03:27,040 --> 00:03:28,319
also done

111
00:03:28,319 --> 00:03:30,000
or you can do you can make very various

112
00:03:30,000 --> 00:03:30,799
other

113
00:03:30,799 --> 00:03:33,120
um guarantees around it but you have to

114
00:03:33,120 --> 00:03:34,959
really like decide upfront what it is

115
00:03:34,959 --> 00:03:37,280
you want to get from the signature

116
00:03:37,280 --> 00:03:38,159
on

117
00:03:38,159 --> 00:03:40,720
a piece of data

118
00:03:40,720 --> 00:03:42,159
and another kind of general principle

119
00:03:42,159 --> 00:03:44,720
that i'm going to talk a lot about

120
00:03:44,720 --> 00:03:46,879
later on is this idea of compromise

121
00:03:46,879 --> 00:03:48,000
resilience

122
00:03:48,000 --> 00:03:49,440
or what do you do when something goes

123
00:03:49,440 --> 00:03:52,080
wrong so especially for the more

124
00:03:52,080 --> 00:03:54,239
critical assets that you

125
00:03:54,239 --> 00:03:55,599
find when you when you look at a threat

126
00:03:55,599 --> 00:03:57,439
model of your system

127
00:03:57,439 --> 00:03:58,799
it's important to think of like if any

128
00:03:58,799 --> 00:04:00,560
one piece of the system is compromised

129
00:04:00,560 --> 00:04:02,720
if any one key is lost if any one server

130
00:04:02,720 --> 00:04:05,040
is compromised or any other like piece

131
00:04:05,040 --> 00:04:06,560
of whatever system

132
00:04:06,560 --> 00:04:08,239
is being secured

133
00:04:08,239 --> 00:04:10,239
what can you do to make sure that you

134
00:04:10,239 --> 00:04:13,120
can both recover from that compromise

135
00:04:13,120 --> 00:04:14,959
and maybe prevent the compromise from

136
00:04:14,959 --> 00:04:16,000
really

137
00:04:16,000 --> 00:04:18,079
like you know a single compromise from

138
00:04:18,079 --> 00:04:22,000
from getting bigger than it needs to

139
00:04:22,000 --> 00:04:23,199
so i'm going to talk a little bit about

140
00:04:23,199 --> 00:04:24,720
some various properties that you can put

141
00:04:24,720 --> 00:04:26,639
around cryptographic signatures to

142
00:04:26,639 --> 00:04:28,479
really give them some more meaning and i

143
00:04:28,479 --> 00:04:30,080
think the first most important one of

144
00:04:30,080 --> 00:04:32,479
these properties is verification

145
00:04:32,479 --> 00:04:34,560
um it's great to have a signature on an

146
00:04:34,560 --> 00:04:36,880
artifact but it's surprisingly common to

147
00:04:36,880 --> 00:04:39,040
have a you know a repository full of

148
00:04:39,040 --> 00:04:41,120
software artifacts and signatures and

149
00:04:41,120 --> 00:04:42,720
then client systems that download the

150
00:04:42,720 --> 00:04:44,639
artifacts and ignore the signatures in

151
00:04:44,639 --> 00:04:45,919
which case the signatures aren't really

152
00:04:45,919 --> 00:04:47,840
providing any semantic meaning at all

153
00:04:47,840 --> 00:04:49,759
they're just there to make people feel

154
00:04:49,759 --> 00:04:52,560
like the code has been signed

155
00:04:52,560 --> 00:04:54,720
and so through verification you can use

156
00:04:54,720 --> 00:04:57,840
the public keys to ensure that

157
00:04:57,840 --> 00:04:59,520
the artifact that you're downloading you

158
00:04:59,520 --> 00:05:01,360
know is the correct artifact and a

159
00:05:01,360 --> 00:05:03,600
couple questions to um to look at here

160
00:05:03,600 --> 00:05:05,680
are which public key are you using for

161
00:05:05,680 --> 00:05:07,440
verification and how do you know this is

162
00:05:07,440 --> 00:05:09,120
the public key

163
00:05:09,120 --> 00:05:11,199
that is correct how did you get that

164
00:05:11,199 --> 00:05:12,800
and what are you gonna do when this

165
00:05:12,800 --> 00:05:14,639
verification fails are you gonna you

166
00:05:14,639 --> 00:05:16,720
know fail open and download the software

167
00:05:16,720 --> 00:05:20,320
anyway or feel closed and potentially um

168
00:05:20,320 --> 00:05:21,759
you know leave the attack an attacker

169
00:05:21,759 --> 00:05:23,759
away to generalize sort of denial of

170
00:05:23,759 --> 00:05:25,840
service your application by just issuing

171
00:05:25,840 --> 00:05:27,360
really bad signatures for a lot of

172
00:05:27,360 --> 00:05:29,199
different content there are definitely

173
00:05:29,199 --> 00:05:30,240
pros and cons to both of those

174
00:05:30,240 --> 00:05:31,840
approaches but something that you need

175
00:05:31,840 --> 00:05:33,759
to think about you know upfront and not

176
00:05:33,759 --> 00:05:35,199
just default to

177
00:05:35,199 --> 00:05:38,000
to one of them

178
00:05:38,000 --> 00:05:40,720
next topic is storage um this

179
00:05:40,720 --> 00:05:42,639
specifically this is storage of

180
00:05:42,639 --> 00:05:45,280
the private keys that are used to sign

181
00:05:45,280 --> 00:05:46,400
artifacts

182
00:05:46,400 --> 00:05:47,680
and the first kind of big decision is

183
00:05:47,680 --> 00:05:49,280
whether sorry these keys should be

184
00:05:49,280 --> 00:05:51,600
online or offline

185
00:05:51,600 --> 00:05:52,800
and the big advantage of having them be

186
00:05:52,800 --> 00:05:54,320
online is that you can have things be

187
00:05:54,320 --> 00:05:56,000
automatically signed and this can really

188
00:05:56,000 --> 00:05:57,759
make a seat for um seamless adoption

189
00:05:57,759 --> 00:05:59,280
because

190
00:05:59,280 --> 00:06:01,759
if the signing happens automatically you

191
00:06:01,759 --> 00:06:03,039
know you know that people won't just

192
00:06:03,039 --> 00:06:05,280
skip this step and it can happen without

193
00:06:05,280 --> 00:06:07,360
any kind of user interaction needed

194
00:06:07,360 --> 00:06:08,319
however

195
00:06:08,319 --> 00:06:10,240
because the keys are on you know some

196
00:06:10,240 --> 00:06:11,840
server on the internet

197
00:06:11,840 --> 00:06:13,280
um they are more vulnerable to

198
00:06:13,280 --> 00:06:14,960
compromise than a key that's stored

199
00:06:14,960 --> 00:06:16,960
offline on something like a you know

200
00:06:16,960 --> 00:06:19,199
uvic hsm or something that's that

201
00:06:19,199 --> 00:06:21,120
requires some kind of human interaction

202
00:06:21,120 --> 00:06:22,800
to then connect it to

203
00:06:22,800 --> 00:06:25,120
another device use it to create that

204
00:06:25,120 --> 00:06:26,560
signature

205
00:06:26,560 --> 00:06:27,840
so these keys are harder to compromise

206
00:06:27,840 --> 00:06:29,039
but they do require you know that actual

207
00:06:29,039 --> 00:06:31,840
human step of of connecting them which

208
00:06:31,840 --> 00:06:33,680
might make it so that these signatures

209
00:06:33,680 --> 00:06:36,240
are used a little bit less often

210
00:06:36,240 --> 00:06:38,160
and whether using online or offline keys

211
00:06:38,160 --> 00:06:39,759
it's important to manage who has access

212
00:06:39,759 --> 00:06:41,360
to these keys

213
00:06:41,360 --> 00:06:43,120
for online keys managing like

214
00:06:43,120 --> 00:06:45,039
credentials to access the the servers

215
00:06:45,039 --> 00:06:46,800
where these keys are stored and for

216
00:06:46,800 --> 00:06:49,120
offline he's you know deciding

217
00:06:49,120 --> 00:06:50,400
you know if there's a safe who has keys

218
00:06:50,400 --> 00:06:51,759
to that safe or if there's like just

219
00:06:51,759 --> 00:06:54,000
like you know a juror in the office

220
00:06:54,000 --> 00:06:56,080
who's who's whose um office is that

221
00:06:56,080 --> 00:06:57,199
drawer in

222
00:06:57,199 --> 00:07:00,000
that kind of situation

223
00:07:00,000 --> 00:07:02,000
the next issue is establishing trust so

224
00:07:02,000 --> 00:07:03,759
how do you once you have these pub these

225
00:07:03,759 --> 00:07:05,759
private keys that are signing the data

226
00:07:05,759 --> 00:07:07,840
you have these associated public keys

227
00:07:07,840 --> 00:07:09,599
which you know you can distribute these

228
00:07:09,599 --> 00:07:10,960
widely because they're public keys they

229
00:07:10,960 --> 00:07:12,800
don't need to be kept secret but you do

230
00:07:12,800 --> 00:07:14,560
want to ensure that

231
00:07:14,560 --> 00:07:15,360
um

232
00:07:15,360 --> 00:07:16,560
you know you know what public key you

233
00:07:16,560 --> 00:07:18,319
have and you know that this public key

234
00:07:18,319 --> 00:07:20,479
is associated with an identity that you

235
00:07:20,479 --> 00:07:21,919
trust

236
00:07:21,919 --> 00:07:24,000
for a particular operation

237
00:07:24,000 --> 00:07:25,360
there are various ways to do this i

238
00:07:25,360 --> 00:07:26,560
think there's a lot of very cool

239
00:07:26,560 --> 00:07:28,800
technologies out there that can um

240
00:07:28,800 --> 00:07:30,800
establish kind of a trusted channel to

241
00:07:30,800 --> 00:07:31,520
to

242
00:07:31,520 --> 00:07:33,360
communicate this i think the you know

243
00:07:33,360 --> 00:07:34,800
the classical fashion method would just

244
00:07:34,800 --> 00:07:37,120
be to meet up in person and say you know

245
00:07:37,120 --> 00:07:39,120
this this is the key that that i control

246
00:07:39,120 --> 00:07:40,479
this is the public key

247
00:07:40,479 --> 00:07:41,919
um you know you know i'm you know it's

248
00:07:41,919 --> 00:07:43,440
mine because i'm giving it to you in

249
00:07:43,440 --> 00:07:45,919
person and you can kind of fake these

250
00:07:45,919 --> 00:07:47,680
online to use a variety of different

251
00:07:47,680 --> 00:07:48,879
methods

252
00:07:48,879 --> 00:07:50,000
and then there's another method that

253
00:07:50,000 --> 00:07:52,479
gets it it's a lot of you know bad press

254
00:07:52,479 --> 00:07:54,319
but it's a surprisingly useful one which

255
00:07:54,319 --> 00:07:56,160
can be trust on first use

256
00:07:56,160 --> 00:07:57,599
i think the dangerous thing about trust

257
00:07:57,599 --> 00:08:00,080
on first use is when you look at um like

258
00:08:00,080 --> 00:08:02,240
ephemeral clients and other things where

259
00:08:02,240 --> 00:08:05,120
every use is a first use but if it's um

260
00:08:05,120 --> 00:08:06,319
you know a client system that can be

261
00:08:06,319 --> 00:08:08,080
accessing the same repository over and

262
00:08:08,080 --> 00:08:09,280
over again

263
00:08:09,280 --> 00:08:10,319
um

264
00:08:10,319 --> 00:08:11,759
trusting that the first time you connect

265
00:08:11,759 --> 00:08:15,039
to it you happen to get the correct um

266
00:08:15,039 --> 00:08:16,400
you know the correct key and then using

267
00:08:16,400 --> 00:08:18,000
that key over and over again

268
00:08:18,000 --> 00:08:20,000
can actually be a reasonable method to

269
00:08:20,000 --> 00:08:21,599
ensure this as well and it's actually

270
00:08:21,599 --> 00:08:23,120
very commonly used

271
00:08:23,120 --> 00:08:27,360
when connecting to servers over um

272
00:08:27,360 --> 00:08:28,800
it would like authenticating to servers

273
00:08:28,800 --> 00:08:30,080
on the internet because often says gives

274
00:08:30,080 --> 00:08:31,120
you a fingerprint you know the first

275
00:08:31,120 --> 00:08:32,799
time you connect like you know does this

276
00:08:32,799 --> 00:08:34,799
look like the correct server and if you

277
00:08:34,799 --> 00:08:37,440
um and if you say yes then you can from

278
00:08:37,440 --> 00:08:38,958
then on your computer recognizes that

279
00:08:38,958 --> 00:08:42,159
server that you're connecting to

280
00:08:42,640 --> 00:08:44,480
so next is placing limitations on the

281
00:08:44,480 --> 00:08:46,240
trust of each public key that you're

282
00:08:46,240 --> 00:08:48,320
using so there's some dangerous having

283
00:08:48,320 --> 00:08:50,480
kind of a universal trust where you have

284
00:08:50,480 --> 00:08:52,800
a single queueing that has every single

285
00:08:52,800 --> 00:08:54,959
public key that you use for throughout

286
00:08:54,959 --> 00:08:56,160
your application

287
00:08:56,160 --> 00:08:57,839
because if any single private key

288
00:08:57,839 --> 00:08:59,680
associated with one of those public keys

289
00:08:59,680 --> 00:09:00,959
that you trust

290
00:09:00,959 --> 00:09:03,040
is compromised then the person who

291
00:09:03,040 --> 00:09:05,040
compromises that key can then sign

292
00:09:05,040 --> 00:09:07,040
anything in the entire system

293
00:09:07,040 --> 00:09:09,279
and you'll interpret it as valid because

294
00:09:09,279 --> 00:09:11,120
you trust that key for any of these

295
00:09:11,120 --> 00:09:12,480
different pieces

296
00:09:12,480 --> 00:09:13,680
there's a couple of different ways that

297
00:09:13,680 --> 00:09:15,120
you can add some limitations on the

298
00:09:15,120 --> 00:09:17,600
trust so that a key compromise

299
00:09:17,600 --> 00:09:19,760
isn't as big of a deal you can achieve a

300
00:09:19,760 --> 00:09:20,959
little bit more of this compromise

301
00:09:20,959 --> 00:09:25,040
resilience that i talked about earlier

302
00:09:25,040 --> 00:09:26,160
so the first way you can place

303
00:09:26,160 --> 00:09:28,000
limitations on trust is through the use

304
00:09:28,000 --> 00:09:29,839
of delegations

305
00:09:29,839 --> 00:09:31,440
one of the kind of nice pieces of

306
00:09:31,440 --> 00:09:33,760
delegations is they can be used to also

307
00:09:33,760 --> 00:09:36,399
usb used to prevent sharing of keys

308
00:09:36,399 --> 00:09:38,800
between members of an organization

309
00:09:38,800 --> 00:09:40,480
so the idea of a delegation is that if

310
00:09:40,480 --> 00:09:42,880
you trust a particular private key or a

311
00:09:42,880 --> 00:09:44,399
particular identity

312
00:09:44,399 --> 00:09:45,279
to

313
00:09:45,279 --> 00:09:47,360
sign something that identity can then

314
00:09:47,360 --> 00:09:49,360
pass on some amount of that trust to

315
00:09:49,360 --> 00:09:50,880
another entity

316
00:09:50,880 --> 00:09:52,240
so um

317
00:09:52,240 --> 00:09:53,680
in general they want you you want them

318
00:09:53,680 --> 00:09:57,120
to pass on a subset or at least

319
00:09:57,120 --> 00:09:59,440
you know only what they are allowed to

320
00:09:59,440 --> 00:10:01,279
sign right so you say you know in this

321
00:10:01,279 --> 00:10:03,040
example i have here

322
00:10:03,040 --> 00:10:05,120
if you have a person trusted to sign the

323
00:10:05,120 --> 00:10:06,560
ubuntu project and they have an intern

324
00:10:06,560 --> 00:10:08,399
who joins the team instead of giving

325
00:10:08,399 --> 00:10:10,399
this intern the power to also assign

326
00:10:10,399 --> 00:10:12,240
anything in the boot to project you can

327
00:10:12,240 --> 00:10:14,240
just give them a specific key that can

328
00:10:14,240 --> 00:10:16,160
be used for the documentation or for

329
00:10:16,160 --> 00:10:18,079
whatever project or subset of this

330
00:10:18,079 --> 00:10:21,120
project that they're actually using

331
00:10:21,120 --> 00:10:24,000
the next kind of big way to prevent

332
00:10:24,000 --> 00:10:25,120
um

333
00:10:25,120 --> 00:10:27,839
or to add this this sense of limiting

334
00:10:27,839 --> 00:10:29,399
trust is through the use of

335
00:10:29,399 --> 00:10:32,720
multi-signatures or threshold signature

336
00:10:32,720 --> 00:10:34,000
signing

337
00:10:34,000 --> 00:10:35,680
and the idea here is that you require

338
00:10:35,680 --> 00:10:37,120
multiple different

339
00:10:37,120 --> 00:10:38,399
keys

340
00:10:38,399 --> 00:10:39,920
just multiple different private keys to

341
00:10:39,920 --> 00:10:41,680
sign the same artifact and then as a

342
00:10:41,680 --> 00:10:44,079
verifier you ensure that

343
00:10:44,079 --> 00:10:45,680
both like multiple different public keys

344
00:10:45,680 --> 00:10:47,519
that you use to then verify it come up

345
00:10:47,519 --> 00:10:48,800
with the same results so that you can

346
00:10:48,800 --> 00:10:51,040
see that you know the hashes match

347
00:10:51,040 --> 00:10:53,279
basically that both of these keys sign

348
00:10:53,279 --> 00:10:54,720
the same artifact and therefore you have

349
00:10:54,720 --> 00:10:56,000
this kind of additional level of

350
00:10:56,000 --> 00:10:57,200
assurance

351
00:10:57,200 --> 00:10:58,640
that um

352
00:10:58,640 --> 00:11:00,000
that you can trust it and you can set

353
00:11:00,000 --> 00:11:02,320
these thresholds to you know to whatever

354
00:11:02,320 --> 00:11:03,760
you want depending on the the

355
00:11:03,760 --> 00:11:05,920
criticality of the particular piece

356
00:11:05,920 --> 00:11:07,920
or the of the um

357
00:11:07,920 --> 00:11:10,399
of the process

358
00:11:10,399 --> 00:11:12,240
and there's also ways you can achieve

359
00:11:12,240 --> 00:11:14,560
similar multi-signature properties using

360
00:11:14,560 --> 00:11:16,399
different cryptographic primitives if

361
00:11:16,399 --> 00:11:18,480
you want like a a fancy way to do this

362
00:11:18,480 --> 00:11:19,440
with

363
00:11:19,440 --> 00:11:21,440
variations of

364
00:11:21,440 --> 00:11:23,279
like sharding of keys and other other

365
00:11:23,279 --> 00:11:25,920
technologies to achieve kind of a

366
00:11:25,920 --> 00:11:27,360
more enforceable version of the same

367
00:11:27,360 --> 00:11:29,839
property

368
00:11:30,000 --> 00:11:31,120
and now i'm going to talk a little bit

369
00:11:31,120 --> 00:11:33,680
about a few projects that that i work on

370
00:11:33,680 --> 00:11:35,360
or at least

371
00:11:35,360 --> 00:11:36,480
i'm adjacent to you that have used

372
00:11:36,480 --> 00:11:38,480
signatures in practice and talk a bit

373
00:11:38,480 --> 00:11:40,320
about some of the these

374
00:11:40,320 --> 00:11:41,440
decisions that were made in these

375
00:11:41,440 --> 00:11:42,800
projects and maybe hopefully give you

376
00:11:42,800 --> 00:11:44,480
some context if you ever have to make

377
00:11:44,480 --> 00:11:46,480
some of these decisions um but your own

378
00:11:46,480 --> 00:11:47,680
projects about like the kinds of

379
00:11:47,680 --> 00:11:51,920
trade-offs um that you have to make

380
00:11:51,920 --> 00:11:53,040
so the first project i want to talk

381
00:11:53,040 --> 00:11:55,600
about is notation which is kind of a

382
00:11:55,600 --> 00:11:57,680
subset of the notary v2

383
00:11:57,680 --> 00:11:59,120
effort

384
00:11:59,120 --> 00:12:00,560
and specifically it's kind of the

385
00:12:00,560 --> 00:12:02,160
signing solution it's the piece that

386
00:12:02,160 --> 00:12:04,320
really just provides signatures that can

387
00:12:04,320 --> 00:12:06,320
go on registries and it uses this

388
00:12:06,320 --> 00:12:10,000
artifact manifest reference type um in

389
00:12:10,000 --> 00:12:11,440
order to achieve that

390
00:12:11,440 --> 00:12:13,279
and the notation um

391
00:12:13,279 --> 00:12:16,160
really focuses on the signing aspect and

392
00:12:16,160 --> 00:12:18,320
having the signatures and artifacts

393
00:12:18,320 --> 00:12:19,839
sorry having signatures that are

394
00:12:19,839 --> 00:12:22,320
attached to artifacts on a registry and

395
00:12:22,320 --> 00:12:24,000
it leaves a lot of this context and kind

396
00:12:24,000 --> 00:12:26,560
of policy decisions up to the end user

397
00:12:26,560 --> 00:12:28,240
it kind of allows each user of the

398
00:12:28,240 --> 00:12:30,560
system to set kind of their own

399
00:12:30,560 --> 00:12:32,560
policy decisions about like the number

400
00:12:32,560 --> 00:12:34,639
of keys that need to be used in order to

401
00:12:34,639 --> 00:12:37,120
sign a particular artifact or

402
00:12:37,120 --> 00:12:39,600
which keys should be used to verify in

403
00:12:39,600 --> 00:12:41,360
all these different pieces and this is

404
00:12:41,360 --> 00:12:43,920
partly to add some flexibility

405
00:12:43,920 --> 00:12:45,360
so that notation can be used across

406
00:12:45,360 --> 00:12:47,200
different kinds of registries that have

407
00:12:47,200 --> 00:12:48,560
different kinds of users with different

408
00:12:48,560 --> 00:12:50,880
needs and so it kind of

409
00:12:50,880 --> 00:12:52,079
allows people to do all of those

410
00:12:52,079 --> 00:12:54,399
different things

411
00:12:54,399 --> 00:12:56,160
another signing solution in kind of a

412
00:12:56,160 --> 00:12:57,519
similar vein

413
00:12:57,519 --> 00:13:00,320
is cosine which i think which um is sig

414
00:13:00,320 --> 00:13:02,240
star signing solution which is and in

415
00:13:02,240 --> 00:13:05,360
many ways similar to notation it adds

416
00:13:05,360 --> 00:13:07,519
signatures to

417
00:13:07,519 --> 00:13:09,680
artifacts on oci registries using

418
00:13:09,680 --> 00:13:11,519
slightly different apis

419
00:13:11,519 --> 00:13:13,279
and it really focuses on this idea of

420
00:13:13,279 --> 00:13:15,200
usability and one of the big pieces of

421
00:13:15,200 --> 00:13:17,839
context that cosine kind of adds in is

422
00:13:17,839 --> 00:13:19,680
this integration with another sigster

423
00:13:19,680 --> 00:13:21,839
project called recore which is a

424
00:13:21,839 --> 00:13:23,760
transparency log

425
00:13:23,760 --> 00:13:24,880
so

426
00:13:24,880 --> 00:13:27,200
any artifact that is signed with cosine

427
00:13:27,200 --> 00:13:29,519
that signature is automatically uploaded

428
00:13:29,519 --> 00:13:32,639
to record which means that it is

429
00:13:32,639 --> 00:13:35,120
fully auditable and on the immutable log

430
00:13:35,120 --> 00:13:37,200
so anyone in the future can go through

431
00:13:37,200 --> 00:13:39,040
and see you know when this artifact was

432
00:13:39,040 --> 00:13:41,040
signed and um

433
00:13:41,040 --> 00:13:42,240
you know make sure there was no no

434
00:13:42,240 --> 00:13:46,079
tampering going on in that situation

435
00:13:46,160 --> 00:13:47,360
next we're talking about a couple

436
00:13:47,360 --> 00:13:49,600
projects that focus a lot more on the

437
00:13:49,600 --> 00:13:52,000
context around these signatures so first

438
00:13:52,000 --> 00:13:53,839
of all there's the update framework or

439
00:13:53,839 --> 00:13:55,839
taf which is a compromise resilient

440
00:13:55,839 --> 00:13:57,920
framework for secure software update and

441
00:13:57,920 --> 00:13:59,360
distribution

442
00:13:59,360 --> 00:14:01,440
and this really adds in a lot of these

443
00:14:01,440 --> 00:14:02,720
different mechanisms that i've talked

444
00:14:02,720 --> 00:14:04,160
about on top of just signatures

445
00:14:04,160 --> 00:14:05,199
themselves

446
00:14:05,199 --> 00:14:07,360
including things like delegations

447
00:14:07,360 --> 00:14:09,760
um throughout the delegations that chain

448
00:14:09,760 --> 00:14:11,199
all the way up to these offline root

449
00:14:11,199 --> 00:14:13,600
keys that tough kind of mandates and it

450
00:14:13,600 --> 00:14:15,040
also includes

451
00:14:15,040 --> 00:14:16,959
the option for thresholds at all the

452
00:14:16,959 --> 00:14:19,360
different levels of the tough framework

453
00:14:19,360 --> 00:14:21,040
there's actually ongoing integrations of

454
00:14:21,040 --> 00:14:23,120
tough both into into both notation and

455
00:14:23,120 --> 00:14:25,680
cosine just to to be clear for those

456
00:14:25,680 --> 00:14:27,120
who's watching and so these things

457
00:14:27,120 --> 00:14:30,639
aren't mutually exclusive this is just

458
00:14:30,639 --> 00:14:32,079
some additional policy that's added on

459
00:14:32,079 --> 00:14:32,959
here

460
00:14:32,959 --> 00:14:35,279
there's also some flexibility in in

461
00:14:35,279 --> 00:14:37,600
tough which includes how developers

462
00:14:37,600 --> 00:14:39,120
actually manage

463
00:14:39,120 --> 00:14:41,040
the keys so like that kind of online

464
00:14:41,040 --> 00:14:42,720
versus offline

465
00:14:42,720 --> 00:14:44,959
decision tough mandates that the root

466
00:14:44,959 --> 00:14:46,880
keys of the system are stored offline

467
00:14:46,880 --> 00:14:47,839
because this is kind of the root of

468
00:14:47,839 --> 00:14:49,920
trust for the system and so the most

469
00:14:49,920 --> 00:14:51,519
critical piece

470
00:14:51,519 --> 00:14:54,720
um but developers can decide whether it

471
00:14:54,720 --> 00:14:56,399
makes more sense for them at the

472
00:14:56,399 --> 00:14:58,480
developer level to store these keys

473
00:14:58,480 --> 00:15:00,480
online or offline and and how to manage

474
00:15:00,480 --> 00:15:02,320
them themselves

475
00:15:02,320 --> 00:15:04,480
another piece of um context that tough

476
00:15:04,480 --> 00:15:06,959
adds in that chef leaves to

477
00:15:06,959 --> 00:15:10,000
individual users is how to do root key

478
00:15:10,000 --> 00:15:11,519
distribution

479
00:15:11,519 --> 00:15:13,839
so tuf actually handles the distribution

480
00:15:13,839 --> 00:15:16,000
of all non-root keys through the

481
00:15:16,000 --> 00:15:17,760
framework itself it has policies and

482
00:15:17,760 --> 00:15:19,519
mechanisms they basically use

483
00:15:19,519 --> 00:15:21,600
delegations in order to

484
00:15:21,600 --> 00:15:23,920
distribute keys but these all train back

485
00:15:23,920 --> 00:15:25,680
up to these root keys which which then

486
00:15:25,680 --> 00:15:27,680
still need to be distributed

487
00:15:27,680 --> 00:15:28,959
um

488
00:15:28,959 --> 00:15:31,120
a lot of systems using tough do use

489
00:15:31,120 --> 00:15:33,600
trust on first use but there it it also

490
00:15:33,600 --> 00:15:35,199
supports any other kind of key

491
00:15:35,199 --> 00:15:36,880
distribution mechanism you know

492
00:15:36,880 --> 00:15:38,560
depending on what can be set up in a

493
00:15:38,560 --> 00:15:40,480
particular context and this kind of

494
00:15:40,480 --> 00:15:41,839
depends on the

495
00:15:41,839 --> 00:15:43,440
kind of closeness between the person

496
00:15:43,440 --> 00:15:44,800
downloading the software and the person

497
00:15:44,800 --> 00:15:46,000
like uploading

498
00:15:46,000 --> 00:15:48,160
the the the software to be downloaded

499
00:15:48,160 --> 00:15:49,600
and how much they're able to communicate

500
00:15:49,600 --> 00:15:51,600
in order to do this secure root key

501
00:15:51,600 --> 00:15:53,040
distribution

502
00:15:53,040 --> 00:15:54,639
and also as tuff supports these

503
00:15:54,639 --> 00:15:56,560
thresholds but deciding you know whether

504
00:15:56,560 --> 00:15:57,839
you should have a threshold of one or a

505
00:15:57,839 --> 00:16:00,959
threshold of 50 um really depends on

506
00:16:00,959 --> 00:16:03,199
your particular uses and whether

507
00:16:03,199 --> 00:16:04,800
um for a particular role it makes more

508
00:16:04,800 --> 00:16:08,639
sense to set it in a different place

509
00:16:08,639 --> 00:16:10,079
the final piece i want to talk a bit

510
00:16:10,079 --> 00:16:13,759
about is intoto which is a framework for

511
00:16:13,759 --> 00:16:16,480
software supply chain security

512
00:16:16,480 --> 00:16:19,519
it entoto allows users to set policies

513
00:16:19,519 --> 00:16:20,800
for all the different stages of the

514
00:16:20,800 --> 00:16:22,079
software supply chain and what they

515
00:16:22,079 --> 00:16:24,000
expect to happen at these different

516
00:16:24,000 --> 00:16:25,440
stages

517
00:16:25,440 --> 00:16:27,120
and then allows the users to verify that

518
00:16:27,120 --> 00:16:28,959
all these different steps happened and

519
00:16:28,959 --> 00:16:30,800
one of the really interesting kind of

520
00:16:30,800 --> 00:16:33,199
pieces of context that ntoto adds is

521
00:16:33,199 --> 00:16:35,360
really about this identity because

522
00:16:35,360 --> 00:16:36,959
because entourage goes across the entire

523
00:16:36,959 --> 00:16:38,240
supply chain

524
00:16:38,240 --> 00:16:40,079
it needs to

525
00:16:40,079 --> 00:16:41,839
keep track of the public keys that

526
00:16:41,839 --> 00:16:43,920
should be used to verify each step in

527
00:16:43,920 --> 00:16:45,519
the supply chain

528
00:16:45,519 --> 00:16:47,120
and it really it does a great job i

529
00:16:47,120 --> 00:16:49,199
think of tying

530
00:16:49,199 --> 00:16:50,800
the identity to the specific step that

531
00:16:50,800 --> 00:16:53,120
that identity should be used to sign to

532
00:16:53,120 --> 00:16:55,120
really ensure that each key is used for

533
00:16:55,120 --> 00:16:56,480
the thing that it's supposed to be used

534
00:16:56,480 --> 00:16:57,519
for

535
00:16:57,519 --> 00:16:59,120
it's similar to tough it supports

536
00:16:59,120 --> 00:17:00,560
thresholds for each of these stages as

537
00:17:00,560 --> 00:17:02,560
well so in certain cases

538
00:17:02,560 --> 00:17:05,760
for example you may want um

539
00:17:05,760 --> 00:17:07,439
the code to be you know

540
00:17:07,439 --> 00:17:08,880
signed off by more than one different

541
00:17:08,880 --> 00:17:11,039
developer to ensure that you know you've

542
00:17:11,039 --> 00:17:12,319
had more than one set of eyes on the

543
00:17:12,319 --> 00:17:15,119
code and you can enforce that using

544
00:17:15,119 --> 00:17:18,220
thresholds in nintendo

545
00:17:18,220 --> 00:17:19,280
[Music]

546
00:17:19,280 --> 00:17:20,319
yeah this really defines those

547
00:17:20,319 --> 00:17:23,280
identities across the selection

548
00:17:23,280 --> 00:17:24,480
that's kind of what i have here's some

549
00:17:24,480 --> 00:17:26,559
contact info from me let me know if you

550
00:17:26,559 --> 00:17:28,160
have any questions or

551
00:17:28,160 --> 00:17:30,080
anything else i think you went a little

552
00:17:30,080 --> 00:17:31,280
under time but

553
00:17:31,280 --> 00:17:32,720
let me know if anything else you can

554
00:17:32,720 --> 00:17:35,440
talk about yes

555
00:17:35,600 --> 00:17:36,720
thank you

556
00:17:36,720 --> 00:17:37,760
oh yeah

557
00:17:37,760 --> 00:17:38,720
okay

558
00:17:38,720 --> 00:17:41,280
andres

559
00:17:41,919 --> 00:17:44,559
marina great presentation say someone's

560
00:17:44,559 --> 00:17:47,600
starting off with in toto

561
00:17:47,600 --> 00:17:49,200
can you elaborate

562
00:17:49,200 --> 00:17:52,320
what's an approach to formulate a layout

563
00:17:52,320 --> 00:17:54,559
what does that entail yeah i did go

564
00:17:54,559 --> 00:17:56,480
through that little fast so yeah the um

565
00:17:56,480 --> 00:17:58,080
basically what it means is looking at

566
00:17:58,080 --> 00:17:59,919
how your software goes from the

567
00:17:59,919 --> 00:18:02,240
developer to the end user looking at all

568
00:18:02,240 --> 00:18:04,160
the different stages it usually involves

569
00:18:04,160 --> 00:18:06,000
some kind of you know code being

570
00:18:06,000 --> 00:18:08,000
uploaded some kind of ci cd system some

571
00:18:08,000 --> 00:18:09,520
kind of build system some kind of

572
00:18:09,520 --> 00:18:11,600
distribution system plus maybe some

573
00:18:11,600 --> 00:18:14,160
other steps depending on what you do so

574
00:18:14,160 --> 00:18:15,760
the first step is really defining what

575
00:18:15,760 --> 00:18:17,679
those steps are for you what systems are

576
00:18:17,679 --> 00:18:20,080
you using what machines or people are

577
00:18:20,080 --> 00:18:21,600
responsible for each of those different

578
00:18:21,600 --> 00:18:22,559
steps

579
00:18:22,559 --> 00:18:23,440
and then

580
00:18:23,440 --> 00:18:24,480
i don't have

581
00:18:24,480 --> 00:18:26,160
pictures of it or anything but entoto

582
00:18:26,160 --> 00:18:28,160
has you know specific formats basically

583
00:18:28,160 --> 00:18:29,600
that you just put all that information

584
00:18:29,600 --> 00:18:31,440
into and then it can

585
00:18:31,440 --> 00:18:32,960
and then if you actually follow those

586
00:18:32,960 --> 00:18:34,799
steps of the supply chain you can then

587
00:18:34,799 --> 00:18:37,120
use into verify that each of these steps

588
00:18:37,120 --> 00:18:38,000
happened

589
00:18:38,000 --> 00:18:41,039
so you don't map like pseudocode

590
00:18:41,039 --> 00:18:42,960
from those steps you actually just fill

591
00:18:42,960 --> 00:18:44,799
out parameters into

592
00:18:44,799 --> 00:18:46,000
an entodo

593
00:18:46,000 --> 00:18:47,120
template

594
00:18:47,120 --> 00:18:48,480
let's say

595
00:18:48,480 --> 00:18:50,559
yeah okay exactly

596
00:18:50,559 --> 00:18:52,960
that's what you would use

597
00:18:52,960 --> 00:18:55,200
have you seen that work um you know i

598
00:18:55,200 --> 00:18:57,679
was following on cncf slack and i saw

599
00:18:57,679 --> 00:19:00,799
someone had posted a tool that took a

600
00:19:00,799 --> 00:19:02,799
tecton chains

601
00:19:02,799 --> 00:19:04,559
um and turned that into an in total

602
00:19:04,559 --> 00:19:06,880
layout what do you think about that type

603
00:19:06,880 --> 00:19:08,400
of uh method for generating these

604
00:19:08,400 --> 00:19:10,480
layouts i think that's a great idea yeah

605
00:19:10,480 --> 00:19:12,000
i think that um being able to kind of

606
00:19:12,000 --> 00:19:14,080
automate that process and use the tools

607
00:19:14,080 --> 00:19:15,760
that already exist to do it is a great

608
00:19:15,760 --> 00:19:17,039
idea

609
00:19:17,039 --> 00:19:18,640
all right any more questions

610
00:19:18,640 --> 00:19:20,400
yeah

611
00:19:20,400 --> 00:19:22,400
all right well hey thank you so much and

612
00:19:22,400 --> 00:19:24,880
you know marina has been such a uh

613
00:19:24,880 --> 00:19:26,400
she's been giving so much to the open

614
00:19:26,400 --> 00:19:28,080
source community and i just really want

615
00:19:28,080 --> 00:19:29,120
to thank her for the work she's been

616
00:19:29,120 --> 00:19:33,239
doing and great talk thank you

