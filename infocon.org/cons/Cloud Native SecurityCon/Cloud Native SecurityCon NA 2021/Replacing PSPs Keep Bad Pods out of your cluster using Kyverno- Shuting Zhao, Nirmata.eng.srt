1
00:00:00,080 --> 00:00:02,560
all right cool um thank you thank you

2
00:00:02,560 --> 00:00:05,120
everyone for joining me today um as you

3
00:00:05,120 --> 00:00:05,920
know

4
00:00:05,920 --> 00:00:09,040
pod secured pod is the smallest unit in

5
00:00:09,040 --> 00:00:11,599
uh kubernetes for execution

6
00:00:11,599 --> 00:00:14,000
and uh the pot security would probably

7
00:00:14,000 --> 00:00:15,920
be the most the first thing you want to

8
00:00:15,920 --> 00:00:19,039
address during our deployment so today

9
00:00:19,039 --> 00:00:21,520
we're going to be talking about um the

10
00:00:21,520 --> 00:00:24,560
pod security and how to use caverno to

11
00:00:24,560 --> 00:00:27,680
manage the pot security

12
00:00:27,680 --> 00:00:31,760
oops um i guess we're in the run um

13
00:00:31,760 --> 00:00:34,320
flight

14
00:00:36,320 --> 00:00:38,480
all right just done quick introduction

15
00:00:38,480 --> 00:00:40,960
of myself my name is shooting zhao i'm a

16
00:00:40,960 --> 00:00:43,200
covernament tenor and i've been

17
00:00:43,200 --> 00:00:45,600
contributing to kubernetes policy work

18
00:00:45,600 --> 00:00:47,760
group as well as multi-tenancy work

19
00:00:47,760 --> 00:00:49,760
group and i'm currently working at

20
00:00:49,760 --> 00:00:52,079
nemata

21
00:00:52,079 --> 00:00:54,559
all right so pod security it is

22
00:00:54,559 --> 00:00:57,760
important right and kubernetes has

23
00:00:57,760 --> 00:01:00,640
introduced this security standards to

24
00:01:00,640 --> 00:01:02,879
help you um configure the security

25
00:01:02,879 --> 00:01:05,360
contacts of your pod manifest

26
00:01:05,360 --> 00:01:08,400
and the port security standards has been

27
00:01:08,400 --> 00:01:10,840
defined in thread into the three

28
00:01:10,840 --> 00:01:13,840
different levels the first one is the

29
00:01:13,840 --> 00:01:17,280
privilege level which contains the most

30
00:01:17,280 --> 00:01:19,840
unrestricted policy it provides the

31
00:01:19,840 --> 00:01:22,960
widest possible level of permissions and

32
00:01:22,960 --> 00:01:25,200
then they have this baseline or default

33
00:01:25,200 --> 00:01:28,479
policy which are minimally restrictive

34
00:01:28,479 --> 00:01:29,520
policy

35
00:01:29,520 --> 00:01:31,520
while preventing non-privileged

36
00:01:31,520 --> 00:01:34,960
escalations and we also have this most

37
00:01:34,960 --> 00:01:37,840
restricted policies following the

38
00:01:37,840 --> 00:01:42,159
current pot hardening best practices

39
00:01:42,479 --> 00:01:45,200
so what are the current like existing

40
00:01:45,200 --> 00:01:47,520
solutions provided in kubernetes what

41
00:01:47,520 --> 00:01:49,360
are the built-in solutions

42
00:01:49,360 --> 00:01:51,920
as of now in kubernetes they have

43
00:01:51,920 --> 00:01:54,720
introduced the port security emission

44
00:01:54,720 --> 00:01:58,960
in kubernetes 122 and it is offered as a

45
00:01:58,960 --> 00:02:00,159
built in

46
00:02:00,159 --> 00:02:02,399
as a built-in pod security and mission

47
00:02:02,399 --> 00:02:05,280
controller and it's currently supported

48
00:02:05,280 --> 00:02:06,960
and alpha feature

49
00:02:06,960 --> 00:02:09,919
and the other built-in solution is the

50
00:02:09,919 --> 00:02:12,720
pot security policies as you know it was

51
00:02:12,720 --> 00:02:14,879
running in beta for a long time and it

52
00:02:14,879 --> 00:02:18,319
has been deprecated in kubernetes 122

53
00:02:18,319 --> 00:02:19,920
and i believe it will be removed in

54
00:02:19,920 --> 00:02:22,319
kubernetes 125.

55
00:02:22,319 --> 00:02:24,400
there are a lot of blog posts

56
00:02:24,400 --> 00:02:27,760
discussions around psp and why it's been

57
00:02:27,760 --> 00:02:30,160
deprecated if you're interested in

58
00:02:30,160 --> 00:02:32,640
learning more about that i have attached

59
00:02:32,640 --> 00:02:36,160
a few links here for you to visit later

60
00:02:36,160 --> 00:02:37,280
so now

61
00:02:37,280 --> 00:02:40,000
let's take a close look at pot security

62
00:02:40,000 --> 00:02:43,280
emission right the psa is good it is a

63
00:02:43,280 --> 00:02:46,560
beaut and kubernetes validating a

64
00:02:46,560 --> 00:02:50,160
mission controller and um it also it'll

65
00:02:50,160 --> 00:02:52,400
also help you to migrate from your

66
00:02:52,400 --> 00:02:55,599
existing pod security policies but there

67
00:02:55,599 --> 00:02:58,560
are always trade-offs right since it's

68
00:02:58,560 --> 00:03:00,959
been currently supported and alpha

69
00:03:00,959 --> 00:03:01,920
feature

70
00:03:01,920 --> 00:03:04,239
enabling the any alpha feature in

71
00:03:04,239 --> 00:03:07,519
kubernetes would require the access to

72
00:03:07,519 --> 00:03:11,599
the api server which is not provided or

73
00:03:11,599 --> 00:03:13,920
available in most of the

74
00:03:13,920 --> 00:03:16,879
managed kubernetes services like

75
00:03:16,879 --> 00:03:19,760
ake eks or jke

76
00:03:19,760 --> 00:03:22,560
and the psa can be enabled in three

77
00:03:22,560 --> 00:03:26,239
different modes like the audit def audit

78
00:03:26,239 --> 00:03:29,599
learn and enforce and if you have the

79
00:03:29,599 --> 00:03:32,239
psa configured in audit mode the

80
00:03:32,239 --> 00:03:35,200
reporting ability is really limited to

81
00:03:35,200 --> 00:03:36,480
audio logs

82
00:03:36,480 --> 00:03:38,640
and now in order to enable that you have

83
00:03:38,640 --> 00:03:41,200
to configure the audit policy

84
00:03:41,200 --> 00:03:43,440
via the kuberps server which again

85
00:03:43,440 --> 00:03:45,840
requires the access to the kubernetes

86
00:03:45,840 --> 00:03:48,560
control plan component

87
00:03:48,560 --> 00:03:50,959
and if you have the psa enabled and in

88
00:03:50,959 --> 00:03:53,760
force mode the enforcement is really at

89
00:03:53,760 --> 00:03:56,000
the pod level not at port controller

90
00:03:56,000 --> 00:03:58,400
level let's let's say

91
00:03:58,400 --> 00:04:00,080
if someone is trying to create a

92
00:04:00,080 --> 00:04:02,720
deployment in the kubernetes cluster

93
00:04:02,720 --> 00:04:04,799
then on the creation of that deployment

94
00:04:04,799 --> 00:04:07,599
will actually be allowed but the pod

95
00:04:07,599 --> 00:04:10,000
will not be scheduled into your cluster

96
00:04:10,000 --> 00:04:13,280
and it may take a few extra steps for

97
00:04:13,280 --> 00:04:14,400
developers

98
00:04:14,400 --> 00:04:16,880
to troubleshoot why the pod isn't being

99
00:04:16,880 --> 00:04:19,918
scheduled and why like um

100
00:04:19,918 --> 00:04:23,520
yeah that's kind of thing and um if all

101
00:04:23,520 --> 00:04:26,560
these three different modes are enabled

102
00:04:26,560 --> 00:04:28,400
at namespace level

103
00:04:28,400 --> 00:04:31,199
which means there is no support for

104
00:04:31,199 --> 00:04:33,680
fine-grained privilege

105
00:04:33,680 --> 00:04:36,479
for example there is no exception that

106
00:04:36,479 --> 00:04:39,120
you can made to allow a pod to be

107
00:04:39,120 --> 00:04:41,360
scheduled into that namespace if you

108
00:04:41,360 --> 00:04:44,320
have psa configured at that particular

109
00:04:44,320 --> 00:04:46,479
namespace

110
00:04:46,479 --> 00:04:49,199
and since the psa runs the validating

111
00:04:49,199 --> 00:04:51,680
webhook controller

112
00:04:51,680 --> 00:04:54,240
there is no ability to mutate the

113
00:04:54,240 --> 00:04:56,479
default values to set the security

114
00:04:56,479 --> 00:05:00,800
context of your workload and the pod

115
00:05:01,440 --> 00:05:04,400
all right psa is good it is encouraged

116
00:05:04,400 --> 00:05:07,039
to start with the psa for secure

117
00:05:07,039 --> 00:05:09,360
defaults right and it is also

118
00:05:09,360 --> 00:05:12,479
recommended to use a policy engine like

119
00:05:12,479 --> 00:05:13,680
kiverno

120
00:05:13,680 --> 00:05:16,960
for fine-grained security configurations

121
00:05:16,960 --> 00:05:19,120
and the enforcement of the additional

122
00:05:19,120 --> 00:05:22,560
workload and configuration security

123
00:05:22,560 --> 00:05:24,880
for the centralized reporting the

124
00:05:24,880 --> 00:05:27,520
enforcing best practices and the

125
00:05:27,520 --> 00:05:30,880
automation of defaults

126
00:05:31,600 --> 00:05:34,880
so why use kiverno there are plenty a

127
00:05:34,880 --> 00:05:37,440
lot of policy engines out there why you

128
00:05:37,440 --> 00:05:40,000
would choose kiverno to answer that

129
00:05:40,000 --> 00:05:42,960
question we have to first understand the

130
00:05:42,960 --> 00:05:45,360
goals of kubernetes project what it

131
00:05:45,360 --> 00:05:48,639
currently offers right so kiverno is a

132
00:05:48,639 --> 00:05:52,000
kubernetes native policy engine which

133
00:05:52,000 --> 00:05:54,800
makes the kubernetes policy easy to

134
00:05:54,800 --> 00:05:57,759
write and manage and it makes policy

135
00:05:57,759 --> 00:06:00,560
results easy to process

136
00:06:00,560 --> 00:06:02,960
in kiverno we support the validate

137
00:06:02,960 --> 00:06:05,680
policy in audit and in false mode we

138
00:06:05,680 --> 00:06:07,600
have the mutate policy to add the

139
00:06:07,600 --> 00:06:10,000
default values for your

140
00:06:10,000 --> 00:06:12,639
security contacts and then we have this

141
00:06:12,639 --> 00:06:15,919
generate policy for you to generate any

142
00:06:15,919 --> 00:06:16,800
uh

143
00:06:16,800 --> 00:06:20,560
like default resources upon triggers

144
00:06:20,560 --> 00:06:22,800
kiverno supports all different types of

145
00:06:22,800 --> 00:06:25,880
kubernetes resources including customer

146
00:06:25,880 --> 00:06:28,800
resource and they use kubernetes

147
00:06:28,800 --> 00:06:30,160
patterns and

148
00:06:30,160 --> 00:06:32,479
practices

149
00:06:32,479 --> 00:06:34,400
with all those being supported in

150
00:06:34,400 --> 00:06:37,600
caverno and by being kubernetes native

151
00:06:37,600 --> 00:06:40,160
policy engine kiverno really simple

152
00:06:40,160 --> 00:06:43,120
simplifies the kubernetes policy and

153
00:06:43,120 --> 00:06:46,880
management in this case

154
00:06:47,039 --> 00:06:48,800
all right if you look at a cuberno

155
00:06:48,800 --> 00:06:52,400
policy within a policy um you can define

156
00:06:52,400 --> 00:06:55,919
one or multiple kirin rules and within

157
00:06:55,919 --> 00:06:56,880
different

158
00:06:56,880 --> 00:06:59,360
within each rule you can have this match

159
00:06:59,360 --> 00:07:02,160
and exclude block defined to select the

160
00:07:02,160 --> 00:07:03,680
target resource

161
00:07:03,680 --> 00:07:07,199
based on the labels namespaces namespace

162
00:07:07,199 --> 00:07:10,400
selectors and the user infos even the

163
00:07:10,400 --> 00:07:13,919
the pod images or any attributes inside

164
00:07:13,919 --> 00:07:15,120
the pod

165
00:07:15,120 --> 00:07:17,440
and on with the bud in the body of the

166
00:07:17,440 --> 00:07:20,479
current policy you can specify any of

167
00:07:20,479 --> 00:07:22,160
these four patterns

168
00:07:22,160 --> 00:07:25,919
to mutate validate generate resources as

169
00:07:25,919 --> 00:07:28,400
well as verify images that are used in

170
00:07:28,400 --> 00:07:31,840
your workload and pod

171
00:07:32,560 --> 00:07:35,440
kiverno by default provides this

172
00:07:35,440 --> 00:07:38,080
a simple policy library which covers the

173
00:07:38,080 --> 00:07:40,080
pod security standards

174
00:07:40,080 --> 00:07:42,240
from baseline to

175
00:07:42,240 --> 00:07:45,120
restrict level right so if you look at

176
00:07:45,120 --> 00:07:48,080
the screenshot it is a kiverno validate

177
00:07:48,080 --> 00:07:50,800
policy which helps you enforce the

178
00:07:50,800 --> 00:07:54,400
security contacts of your pod must have

179
00:07:54,400 --> 00:07:57,599
run as non-root set to true both in the

180
00:07:57,599 --> 00:08:00,319
pot level containers level as well as

181
00:08:00,319 --> 00:08:02,800
inside the innate containers

182
00:08:02,800 --> 00:08:06,240
right and this pss policy can be easily

183
00:08:06,240 --> 00:08:08,960
installed into your kubernetes cluster

184
00:08:08,960 --> 00:08:12,479
using a single line command um with

185
00:08:12,479 --> 00:08:15,199
customize and coupe cuddle so next i'm

186
00:08:15,199 --> 00:08:17,280
going to jump directly to the demo to

187
00:08:17,280 --> 00:08:19,360
show you how to install those pss

188
00:08:19,360 --> 00:08:21,680
policies

189
00:08:21,680 --> 00:08:24,479
all right so let's like to look at the

190
00:08:24,479 --> 00:08:27,520
command first it is a customize command

191
00:08:27,520 --> 00:08:30,800
and it pulls from the remote github repo

192
00:08:30,800 --> 00:08:32,719
and then we'll be applying all the

193
00:08:32,719 --> 00:08:36,399
resource manifest using kubeco apply and

194
00:08:36,399 --> 00:08:39,039
the policies will be installed right so

195
00:08:39,039 --> 00:08:42,080
let me quickly switch to my

196
00:08:42,080 --> 00:08:44,000
terminal

197
00:08:44,000 --> 00:08:46,480
and i hope the font size looks good i

198
00:08:46,480 --> 00:08:49,920
can make it larger

199
00:08:50,399 --> 00:08:53,279
real quick all right so before we do

200
00:08:53,279 --> 00:08:54,880
that i'm going to

201
00:08:54,880 --> 00:08:58,160
show you the setup for today i have a

202
00:08:58,160 --> 00:09:01,680
simple docker desktop cluster running if

203
00:09:01,680 --> 00:09:04,240
i do kokoto get

204
00:09:04,240 --> 00:09:05,440
pot

205
00:09:05,440 --> 00:09:08,080
get node there is a single node cluster

206
00:09:08,080 --> 00:09:09,680
running there

207
00:09:09,680 --> 00:09:11,760
and i have already have kevin run in my

208
00:09:11,760 --> 00:09:13,920
cluster if you haven't installed that it

209
00:09:13,920 --> 00:09:16,720
can be easily done by a single kubekata

210
00:09:16,720 --> 00:09:18,640
command or you can use

211
00:09:18,640 --> 00:09:20,959
ham chart to install kyberno

212
00:09:20,959 --> 00:09:23,680
and then with all the setup being done

213
00:09:23,680 --> 00:09:26,160
on your cluster let's do the command

214
00:09:26,160 --> 00:09:28,720
right let's do customize

215
00:09:28,720 --> 00:09:31,360
viewed and let's prove from

216
00:09:31,360 --> 00:09:33,839
github

217
00:09:34,839 --> 00:09:37,680
ripple okay i'm not gonna

218
00:09:37,680 --> 00:09:40,240
all right there here is the the command

219
00:09:40,240 --> 00:09:43,839
so if i once i run that

220
00:09:43,920 --> 00:09:46,480
it'll prove from the kiverno sample

221
00:09:46,480 --> 00:09:48,880
library repo and you can see a bunch of

222
00:09:48,880 --> 00:09:51,680
cluster policies has been created in the

223
00:09:51,680 --> 00:09:54,480
into the kubernetes cluster so since

224
00:09:54,480 --> 00:09:57,839
kiverno uh policy is just a kubernetes

225
00:09:57,839 --> 00:10:00,800
crd so you can easily get it using the

226
00:10:00,800 --> 00:10:04,959
coupo get cluster policy and then you'll

227
00:10:04,959 --> 00:10:07,279
see all the policies uh are installed

228
00:10:07,279 --> 00:10:09,760
and it's currently in ready state

229
00:10:09,760 --> 00:10:12,320
right so let's go let me go back to the

230
00:10:12,320 --> 00:10:15,200
slides and um let's talk about how we

231
00:10:15,200 --> 00:10:19,279
can use those pss policies to manage the

232
00:10:19,279 --> 00:10:22,000
the pod security contacts

233
00:10:22,000 --> 00:10:22,800
right

234
00:10:22,800 --> 00:10:26,640
um so with kverno validation policy uh

235
00:10:26,640 --> 00:10:30,079
it can be configured in infos or audit

236
00:10:30,079 --> 00:10:33,040
mode when you have the validate policy

237
00:10:33,040 --> 00:10:35,440
running in enforcement which means the

238
00:10:35,440 --> 00:10:38,480
violations will cause the resource to be

239
00:10:38,480 --> 00:10:39,839
rejected

240
00:10:39,839 --> 00:10:41,680
and you can also configure the valid

241
00:10:41,680 --> 00:10:44,160
policy in audit mode which is kind of a

242
00:10:44,160 --> 00:10:47,200
soft limit policy that means when you

243
00:10:47,200 --> 00:10:49,839
have any policy violation the violations

244
00:10:49,839 --> 00:10:52,880
will be locked into the policy reports

245
00:10:52,880 --> 00:10:56,000
and recorded in the events but otherwise

246
00:10:56,000 --> 00:11:00,560
the resource creation would be allowed

247
00:11:00,560 --> 00:11:02,880
an awesome thing that is supported by

248
00:11:02,880 --> 00:11:05,920
kiverno is this autogen ability um

249
00:11:05,920 --> 00:11:08,320
kiverno automatically generates the

250
00:11:08,320 --> 00:11:11,120
policy rules for part controllers when

251
00:11:11,120 --> 00:11:13,839
you have any rules written on par right

252
00:11:13,839 --> 00:11:15,120
which means

253
00:11:15,120 --> 00:11:17,519
you can you can simply define a single

254
00:11:17,519 --> 00:11:20,000
rule written on part and kiverno would

255
00:11:20,000 --> 00:11:21,920
understand that and convert all the

256
00:11:21,920 --> 00:11:23,760
parts rules to cover the part

257
00:11:23,760 --> 00:11:26,480
controllers and this feature is enabled

258
00:11:26,480 --> 00:11:29,040
by default and can be configured with

259
00:11:29,040 --> 00:11:31,680
this annotation to match a particular

260
00:11:31,680 --> 00:11:36,000
port controller or even turn it off

261
00:11:36,079 --> 00:11:38,320
right so then the next demo i'm going to

262
00:11:38,320 --> 00:11:41,040
show you today is how kivernal enforce

263
00:11:41,040 --> 00:11:44,399
policy works in a live cluster what i'm

264
00:11:44,399 --> 00:11:46,399
going to do is that i'm going to create

265
00:11:46,399 --> 00:11:50,320
a workload resource deployment and then

266
00:11:50,320 --> 00:11:53,360
with all those pss policies installed i

267
00:11:53,360 --> 00:11:56,399
would expect kiverno reject the resource

268
00:11:56,399 --> 00:11:58,320
creation reject the deployment creation

269
00:11:58,320 --> 00:12:00,720
for me

270
00:12:00,959 --> 00:12:04,560
okay so before we do that let's inspect

271
00:12:04,560 --> 00:12:07,200
one of the cluster policy

272
00:12:07,200 --> 00:12:08,720
let's say

273
00:12:08,720 --> 00:12:12,240
kukkoto get cluster policy and then

274
00:12:12,240 --> 00:12:14,480
let's look at this require run as

275
00:12:14,480 --> 00:12:16,320
non-rule

276
00:12:16,320 --> 00:12:18,560
all right actually before i do that um

277
00:12:18,560 --> 00:12:21,040
this is the sample policy available from

278
00:12:21,040 --> 00:12:22,000
the

279
00:12:22,000 --> 00:12:24,959
github repo you can see that i have a

280
00:12:24,959 --> 00:12:26,320
kvernal

281
00:12:26,320 --> 00:12:30,240
validate rule which matches to the pod

282
00:12:30,240 --> 00:12:32,480
and then there i'm going to validate the

283
00:12:32,480 --> 00:12:35,360
security contacts run as non-root has to

284
00:12:35,360 --> 00:12:38,480
be set to true right so if we

285
00:12:38,480 --> 00:12:40,800
install that in the into the kubernetes

286
00:12:40,800 --> 00:12:44,800
cluster and then spec the policy

287
00:12:45,040 --> 00:12:46,000
oops

288
00:12:46,000 --> 00:12:49,000
uh

289
00:12:52,000 --> 00:12:55,200
let me just grab the manifest

290
00:12:55,200 --> 00:12:57,360
so you will see there are three rules in

291
00:12:57,360 --> 00:13:00,240
total remember and and this and this uh

292
00:13:00,240 --> 00:13:02,639
static manifest i only have a single

293
00:13:02,639 --> 00:13:05,200
rule available right but if you install

294
00:13:05,200 --> 00:13:08,000
that kiberno would convert the plot

295
00:13:08,000 --> 00:13:10,639
rules to cover the pot controller so

296
00:13:10,639 --> 00:13:12,800
that you can see there are additional

297
00:13:12,800 --> 00:13:16,240
rules being generated this one is

298
00:13:16,240 --> 00:13:19,120
matches the cron drop and we also have

299
00:13:19,120 --> 00:13:21,680
another one uh another rule

300
00:13:21,680 --> 00:13:24,320
match the deployment daemon set jobs

301
00:13:24,320 --> 00:13:26,560
deficit all those controllers pod

302
00:13:26,560 --> 00:13:28,000
controllers right

303
00:13:28,000 --> 00:13:29,680
so let's go ahead and create the

304
00:13:29,680 --> 00:13:30,800
workload

305
00:13:30,800 --> 00:13:33,120
create the uh deployment in this case

306
00:13:33,120 --> 00:13:36,320
let's do coop cuddle

307
00:13:36,320 --> 00:13:40,240
create deployment demo engine x dash

308
00:13:40,240 --> 00:13:44,320
dash image i'm going to use the nginx

309
00:13:44,320 --> 00:13:45,199
image

310
00:13:45,199 --> 00:13:47,920
and uh with this command you can see i i

311
00:13:47,920 --> 00:13:50,639
have no security contacts and especially

312
00:13:50,639 --> 00:13:53,360
with that roundness downroot tag i don't

313
00:13:53,360 --> 00:13:57,040
have it set in my deployment so if i run

314
00:13:57,040 --> 00:13:59,519
that command you would say um

315
00:13:59,519 --> 00:14:02,160
okay so my resource question is rejected

316
00:14:02,160 --> 00:14:05,199
by kiverno validating webhook and you

317
00:14:05,199 --> 00:14:07,760
can see these are the policies that are

318
00:14:07,760 --> 00:14:10,240
actually rejecting the resource creation

319
00:14:10,240 --> 00:14:13,199
right this is good so they they don't um

320
00:14:13,199 --> 00:14:14,800
the developers don't need to

321
00:14:14,800 --> 00:14:17,760
troubleshoot or find any choices of like

322
00:14:17,760 --> 00:14:19,600
why the pot hasn't been scheduled to the

323
00:14:19,600 --> 00:14:22,720
cluster and so on

324
00:14:22,720 --> 00:14:25,600
all right so this is how kiberno val and

325
00:14:25,600 --> 00:14:27,040
false policy

326
00:14:27,040 --> 00:14:29,440
works in the cluster

327
00:14:29,440 --> 00:14:32,079
helps you enforce the port controllers

328
00:14:32,079 --> 00:14:34,880
and then what if you what about your

329
00:14:34,880 --> 00:14:36,959
existing resources that are already

330
00:14:36,959 --> 00:14:39,279
deployed in your cluster right

331
00:14:39,279 --> 00:14:42,480
with covernal policies we can also scan

332
00:14:42,480 --> 00:14:44,560
all your existing resources

333
00:14:44,560 --> 00:14:45,440
and

334
00:14:45,440 --> 00:14:47,760
audit all the policy results in the

335
00:14:47,760 --> 00:14:49,279
policy report

336
00:14:49,279 --> 00:14:51,920
by the way kiverno uses the policy

337
00:14:51,920 --> 00:14:54,720
report crd which is provided from

338
00:14:54,720 --> 00:14:57,440
kubernetes policy work group

339
00:14:57,440 --> 00:15:00,560
and you can use kubernetes to generate

340
00:15:00,560 --> 00:15:03,440
either in cluster policy report or if

341
00:15:03,440 --> 00:15:04,959
you don't want to install kubernetes

342
00:15:04,959 --> 00:15:07,120
into your cluster you can also get the

343
00:15:07,120 --> 00:15:09,760
reports from kivernal cli

344
00:15:09,760 --> 00:15:11,839
and i've attached a few attributes

345
00:15:11,839 --> 00:15:14,880
inside the policy result

346
00:15:14,880 --> 00:15:16,880
attribute and you can see we have the

347
00:15:16,880 --> 00:15:20,480
policy names name available here we have

348
00:15:20,480 --> 00:15:23,360
the resource information we have the

349
00:15:23,360 --> 00:15:25,440
rules and the final result being

350
00:15:25,440 --> 00:15:29,199
recorded and in the uh policy report

351
00:15:29,199 --> 00:15:31,839
so let's go back to the class cluster

352
00:15:31,839 --> 00:15:34,800
before i install all the policies i have

353
00:15:34,800 --> 00:15:37,360
a single pod running in my cluster it's

354
00:15:37,360 --> 00:15:39,920
just a ninja next part right so since

355
00:15:39,920 --> 00:15:42,399
again policy report is another crd we

356
00:15:42,399 --> 00:15:45,440
can get the policy report using this

357
00:15:45,440 --> 00:15:46,639
kukudo

358
00:15:46,639 --> 00:15:48,800
get policy report

359
00:15:48,800 --> 00:15:50,639
and then you can see the summarize of

360
00:15:50,639 --> 00:15:52,639
the report so this is the report

361
00:15:52,639 --> 00:15:55,680
generated for a default namespace

362
00:15:55,680 --> 00:15:59,120
and there are 34 rules passed and two

363
00:15:59,120 --> 00:16:01,600
failures right so let's inspect the

364
00:16:01,600 --> 00:16:04,720
policy report and see what are the exact

365
00:16:04,720 --> 00:16:06,079
failure there

366
00:16:06,079 --> 00:16:09,680
so let's do couple describe paul r by

367
00:16:09,680 --> 00:16:11,680
the way paul rh is the short name of

368
00:16:11,680 --> 00:16:14,720
paul's report and you give it name

369
00:16:14,720 --> 00:16:17,680
grab on the failed status

370
00:16:17,680 --> 00:16:19,759
if i do that you will say

371
00:16:19,759 --> 00:16:21,759
there uh there are two violations

372
00:16:21,759 --> 00:16:24,639
umpired nginx inside the default

373
00:16:24,639 --> 00:16:27,360
namespace and here is the policy that

374
00:16:27,360 --> 00:16:30,079
the resource is violating right here on

375
00:16:30,079 --> 00:16:33,120
again this is another policy that is

376
00:16:33,120 --> 00:16:37,279
enforcing the the pod configuration

377
00:16:37,279 --> 00:16:39,040
all right this with the coop cuddle

378
00:16:39,040 --> 00:16:40,720
command you can get you can view the

379
00:16:40,720 --> 00:16:44,320
policy report right but we also

380
00:16:44,320 --> 00:16:47,360
we also provide uh this policy reporter

381
00:16:47,360 --> 00:16:50,880
as another two which help you

382
00:16:50,880 --> 00:16:52,880
view the policy results

383
00:16:52,880 --> 00:16:55,759
generated from either kiverno falco

384
00:16:55,759 --> 00:16:58,560
coupe bench or trivia and the pulse

385
00:16:58,560 --> 00:17:01,839
reporter can also be configured to send

386
00:17:01,839 --> 00:17:05,520
the notifications to different targets

387
00:17:05,520 --> 00:17:09,439
like loki elasticsearch teams discord

388
00:17:09,439 --> 00:17:12,880
slack and so on here is just a ui of the

389
00:17:12,880 --> 00:17:15,520
pulse reporter which gives you the

390
00:17:15,520 --> 00:17:17,679
centralized view of all the policy

391
00:17:17,679 --> 00:17:20,319
violations

392
00:17:20,319 --> 00:17:22,240
all right we also have this grandfather

393
00:17:22,240 --> 00:17:25,039
dashboard provided here if you configure

394
00:17:25,039 --> 00:17:27,359
that in your cluster you will see the

395
00:17:27,359 --> 00:17:29,760
score of your cluster currently on you

396
00:17:29,760 --> 00:17:32,480
can see this cluster got a 100 score

397
00:17:32,480 --> 00:17:35,039
here since there is no violation but if

398
00:17:35,039 --> 00:17:37,280
there's any it will be reported in this

399
00:17:37,280 --> 00:17:40,399
grandfather dashboard

400
00:17:40,480 --> 00:17:42,799
all right but so far we've seen how

401
00:17:42,799 --> 00:17:45,280
kiverno enforce your incoming

402
00:17:45,280 --> 00:17:48,080
admission request how kiberno would uh

403
00:17:48,080 --> 00:17:50,320
generate the reports against your

404
00:17:50,320 --> 00:17:54,000
existing resource but how do we remedy

405
00:17:54,000 --> 00:17:56,000
the policy violation

406
00:17:56,000 --> 00:17:57,760
right um the most

407
00:17:57,760 --> 00:17:59,919
the simplest way to do that is just to

408
00:17:59,919 --> 00:18:02,160
modify the pod manifest

409
00:18:02,160 --> 00:18:04,880
and uh to let it comply with the policy

410
00:18:04,880 --> 00:18:06,480
you're gonna you install and configure

411
00:18:06,480 --> 00:18:09,440
it in the in the cluster but think of if

412
00:18:09,440 --> 00:18:12,400
you have hundreds of applications

413
00:18:12,400 --> 00:18:14,559
you want to manage as a cluster and then

414
00:18:14,559 --> 00:18:17,679
it is not an easy job to do right so

415
00:18:17,679 --> 00:18:22,240
caverno we provide this mutate policy

416
00:18:22,240 --> 00:18:25,200
which helps you to set the default on

417
00:18:25,200 --> 00:18:27,600
security contacts or any other values

418
00:18:27,600 --> 00:18:29,760
inside the pod configuration or any

419
00:18:29,760 --> 00:18:33,200
other like kubernetes resource

420
00:18:33,200 --> 00:18:36,559
resource manifest in the flex flexible

421
00:18:36,559 --> 00:18:39,760
manner so you can choose the resource

422
00:18:39,760 --> 00:18:43,200
based on the labels the select selectors

423
00:18:43,200 --> 00:18:45,919
and the annotations um any attributes

424
00:18:45,919 --> 00:18:48,640
inside the inside the resource manifest

425
00:18:48,640 --> 00:18:52,000
and to inject the default values right

426
00:18:52,000 --> 00:18:54,000
on this example

427
00:18:54,000 --> 00:18:57,120
uh policy it's just a mutated policy

428
00:18:57,120 --> 00:18:58,160
which

429
00:18:58,160 --> 00:19:01,200
would operate on the resource type part

430
00:19:01,200 --> 00:19:03,360
and i'm i'm saying that i want to inject

431
00:19:03,360 --> 00:19:06,720
the security context privileged to set

432
00:19:06,720 --> 00:19:09,360
to false

433
00:19:09,600 --> 00:19:12,480
okay so let's go back to the cluster and

434
00:19:12,480 --> 00:19:15,360
see how the kivernal policy injects the

435
00:19:15,360 --> 00:19:18,160
defaults by the way the autogen is also

436
00:19:18,160 --> 00:19:21,280
supported in muted policy which means if

437
00:19:21,280 --> 00:19:23,600
i have my rule defined on pod the

438
00:19:23,600 --> 00:19:26,320
kiverno would convert that and mutate

439
00:19:26,320 --> 00:19:30,559
the default values to port controllers

440
00:19:30,559 --> 00:19:32,960
all right uh before we do that let's

441
00:19:32,960 --> 00:19:35,600
look at the policy again here um i have

442
00:19:35,600 --> 00:19:39,200
a sim simple single rule which applied

443
00:19:39,200 --> 00:19:42,160
to kubernetes part and i want to set the

444
00:19:42,160 --> 00:19:45,360
security contacts privilege to foss

445
00:19:45,360 --> 00:19:47,919
and what i'm going to do next is to

446
00:19:47,919 --> 00:19:50,559
create a deployment which is a workload

447
00:19:50,559 --> 00:19:52,799
and in kubernetes right so i would

448
00:19:52,799 --> 00:19:55,039
expect after the um

449
00:19:55,039 --> 00:19:57,280
mutated policies being applied to the

450
00:19:57,280 --> 00:20:00,720
deployment um it should have has this

451
00:20:00,720 --> 00:20:04,960
privilege security context set to false

452
00:20:04,960 --> 00:20:07,840
right let me put up the terminal and

453
00:20:07,840 --> 00:20:09,280
install the

454
00:20:09,280 --> 00:20:12,480
uh mutate policies to cook cuddle

455
00:20:12,480 --> 00:20:14,640
create chef

456
00:20:14,640 --> 00:20:17,679
mutate privileged

457
00:20:17,679 --> 00:20:20,080
all right before i create the deployment

458
00:20:20,080 --> 00:20:23,679
let's look at the policy again um since

459
00:20:23,679 --> 00:20:26,640
i installed all the pss policies in

460
00:20:26,640 --> 00:20:29,600
enforce mode it'll you know block the

461
00:20:29,600 --> 00:20:31,760
resource creation so in this case i'm

462
00:20:31,760 --> 00:20:35,840
going to first patch of the

463
00:20:35,919 --> 00:20:38,480
validation failure action to audit to

464
00:20:38,480 --> 00:20:42,080
let my resource creation pass through

465
00:20:42,080 --> 00:20:43,280
so let's do

466
00:20:43,280 --> 00:20:46,960
customize viewed

467
00:20:49,760 --> 00:20:52,480
policies

468
00:20:52,480 --> 00:20:55,600
i believe that's enough cocoa applied

469
00:20:55,600 --> 00:20:58,400
chef brush

470
00:20:58,400 --> 00:21:01,400
oops

471
00:21:02,080 --> 00:21:03,120
where am i

472
00:21:03,120 --> 00:21:05,600
no objects

473
00:21:05,600 --> 00:21:08,559
that's interesting

474
00:21:09,120 --> 00:21:12,960
customize spot security let's added this

475
00:21:12,960 --> 00:21:15,960
command

476
00:21:18,000 --> 00:21:19,520
vernal

477
00:21:19,520 --> 00:21:23,440
policies pod security

478
00:21:23,600 --> 00:21:26,320
all right so let's let's let's get the

479
00:21:26,320 --> 00:21:29,280
cluster policy again and see

480
00:21:29,280 --> 00:21:30,640
all the

481
00:21:30,640 --> 00:21:33,200
yeah all the failure action is now

482
00:21:33,200 --> 00:21:35,440
patched to uh audit

483
00:21:35,440 --> 00:21:37,919
so um which means my deployment creation

484
00:21:37,919 --> 00:21:39,679
would be allowed

485
00:21:39,679 --> 00:21:42,960
right then let's go ahead and do cocado

486
00:21:42,960 --> 00:21:45,520
create deployment

487
00:21:45,520 --> 00:21:47,679
let's say nginx

488
00:21:47,679 --> 00:21:51,360
image nginx latest

489
00:21:51,360 --> 00:21:55,440
and once my deployment is created let's

490
00:21:55,440 --> 00:21:57,120
do cocado

491
00:21:57,120 --> 00:21:58,720
get

492
00:21:58,720 --> 00:22:01,600
deployment in genex and grab on the

493
00:22:01,600 --> 00:22:03,840
container object

494
00:22:03,840 --> 00:22:06,080
you can see that the security context

495
00:22:06,080 --> 00:22:07,520
has been set

496
00:22:07,520 --> 00:22:09,280
privileged has been set to false

497
00:22:09,280 --> 00:22:11,440
successfully this is

498
00:22:11,440 --> 00:22:13,760
how kubernetes policy injects the

499
00:22:13,760 --> 00:22:14,880
defaults

500
00:22:14,880 --> 00:22:19,280
against your incoming admission request

501
00:22:20,400 --> 00:22:23,360
all right so we've been talked about how

502
00:22:23,360 --> 00:22:25,520
to manage the pod security how to

503
00:22:25,520 --> 00:22:28,159
automate the defaults using kvernal

504
00:22:28,159 --> 00:22:31,280
policies but there is more beyond part

505
00:22:31,280 --> 00:22:33,840
security it's not just the security for

506
00:22:33,840 --> 00:22:36,640
pod configuration other configurations

507
00:22:36,640 --> 00:22:39,120
also need to be secured right some of

508
00:22:39,120 --> 00:22:42,400
the examples today um for example the

509
00:22:42,400 --> 00:22:45,679
workload identity so you would um want

510
00:22:45,679 --> 00:22:48,240
to guarantee that the single service

511
00:22:48,240 --> 00:22:50,720
account can only schedule the same

512
00:22:50,720 --> 00:22:54,320
application once into your cluster and

513
00:22:54,320 --> 00:22:56,720
for the fine grain are back the service

514
00:22:56,720 --> 00:22:59,679
configurations and um there is

515
00:22:59,679 --> 00:23:02,159
one vulnerability issue has been

516
00:23:02,159 --> 00:23:05,440
discovered in kubernetes is that um the

517
00:23:05,440 --> 00:23:09,039
kubernetes api server allows the

518
00:23:09,039 --> 00:23:12,400
attacker who has the ability to create

519
00:23:12,400 --> 00:23:14,720
the cluster type cluster ip type of

520
00:23:14,720 --> 00:23:18,720
service and set the spec dot cluster ip

521
00:23:18,720 --> 00:23:21,840
field to intercept the traffic to that

522
00:23:21,840 --> 00:23:24,799
particular ip address right similarly

523
00:23:24,799 --> 00:23:27,120
you would also want to secure the

524
00:23:27,120 --> 00:23:29,200
ingress configuration in a similar

525
00:23:29,200 --> 00:23:30,880
manner

526
00:23:30,880 --> 00:23:32,960
the images that are used in your

527
00:23:32,960 --> 00:23:35,840
application in your pod also need to be

528
00:23:35,840 --> 00:23:38,080
verified for signatures and the test

529
00:23:38,080 --> 00:23:41,919
stations to prevent supply chain attacks

530
00:23:41,919 --> 00:23:44,960
and the best practice configurations

531
00:23:44,960 --> 00:23:47,840
should always be standardized in your

532
00:23:47,840 --> 00:23:51,200
kubernetes cluster

533
00:23:51,200 --> 00:23:53,600
all right to summarize it a few

534
00:23:53,600 --> 00:23:56,400
takeaways from today's session right so

535
00:23:56,400 --> 00:23:58,640
it's good to start with the built-in

536
00:23:58,640 --> 00:24:01,120
security configurations like psa in

537
00:24:01,120 --> 00:24:04,880
kubernetes and you also need a policy

538
00:24:04,880 --> 00:24:07,279
engine for additional checks

539
00:24:07,279 --> 00:24:11,360
configurations and automation and there

540
00:24:11,360 --> 00:24:14,480
kiverno provides a kubernetes native

541
00:24:14,480 --> 00:24:17,360
experience to help you enforce best

542
00:24:17,360 --> 00:24:18,640
practices

543
00:24:18,640 --> 00:24:23,279
on pod as well as other configurations

544
00:24:23,279 --> 00:24:24,080
okay

545
00:24:24,080 --> 00:24:25,840
if you like kuvernel if you're

546
00:24:25,840 --> 00:24:28,240
interested in any of the features we've

547
00:24:28,240 --> 00:24:30,080
discussed today

548
00:24:30,080 --> 00:24:32,640
or if you have any further uh like

549
00:24:32,640 --> 00:24:34,320
discussions you want to continue with

550
00:24:34,320 --> 00:24:36,720
this please feel free to visit us at

551
00:24:36,720 --> 00:24:39,919
kirono booth and you're welcome to join

552
00:24:39,919 --> 00:24:42,159
our office hour which is scheduled on

553
00:24:42,159 --> 00:24:43,600
this thursday

554
00:24:43,600 --> 00:24:47,520
4 30 p.m and if your online audience

555
00:24:47,520 --> 00:24:49,039
feel free to join the kubernetes

556
00:24:49,039 --> 00:24:51,679
community we have the documentation all

557
00:24:51,679 --> 00:24:54,480
the sample policies for today available

558
00:24:54,480 --> 00:24:57,120
from kiverno official website we're also

559
00:24:57,120 --> 00:24:59,440
maintaining the kiverno slack channels

560
00:24:59,440 --> 00:25:00,720
under both

561
00:25:00,720 --> 00:25:04,080
kubernetes workspace as well as cncf

562
00:25:04,080 --> 00:25:06,559
workspace we meet monthly for our

563
00:25:06,559 --> 00:25:09,600
community upon communities and we meet

564
00:25:09,600 --> 00:25:13,120
weekly for to discuss any issues

565
00:25:13,120 --> 00:25:15,520
from contributors and uh the feature

566
00:25:15,520 --> 00:25:17,679
request

567
00:25:17,679 --> 00:25:20,640
all right thank you everybody i'm um on

568
00:25:20,640 --> 00:25:23,440
twitter linkedin slack anywhere if you

569
00:25:23,440 --> 00:25:26,159
are interested i'd be happy to connect

570
00:25:26,159 --> 00:25:31,039
thank you anyone have any questions

