1
00:00:00,000 --> 00:00:01,280
thanks dan

2
00:00:01,280 --> 00:00:04,000
uh so we are going to talk about service

3
00:00:04,000 --> 00:00:07,759
authentication and specifically um

4
00:00:07,759 --> 00:00:09,519
how to choose whether or not you're

5
00:00:09,519 --> 00:00:11,920
going to use tokens or certificates in

6
00:00:11,920 --> 00:00:14,080
your authentication

7
00:00:14,080 --> 00:00:15,839
real quick who am i like dan said i'm

8
00:00:15,839 --> 00:00:18,160
the cto of tremolo security

9
00:00:18,160 --> 00:00:20,000
um

10
00:00:20,000 --> 00:00:21,600
got 20 years of identity management

11
00:00:21,600 --> 00:00:22,880
experience

12
00:00:22,880 --> 00:00:24,240
uh

13
00:00:24,240 --> 00:00:25,039
big

14
00:00:25,039 --> 00:00:27,039
you know fortune 100 companies

15
00:00:27,039 --> 00:00:28,480
governments

16
00:00:28,480 --> 00:00:31,439
um you know various vendors over the

17
00:00:31,439 --> 00:00:33,360
years

18
00:00:33,360 --> 00:00:35,200
i've been working with kubernetes since

19
00:00:35,200 --> 00:00:37,120
2016

20
00:00:37,120 --> 00:00:38,800
wrote a lot of documentation around open

21
00:00:38,800 --> 00:00:41,520
id connect worked on

22
00:00:41,520 --> 00:00:42,960
implementing authentication the

23
00:00:42,960 --> 00:00:45,600
dashboard and in

24
00:00:45,600 --> 00:00:48,640
most recently in kiali

25
00:00:48,640 --> 00:00:50,960
and co-author of kubernetes and docker

26
00:00:50,960 --> 00:00:53,360
and enterprise guide

27
00:00:53,360 --> 00:00:55,760
so enough about me uh so

28
00:00:55,760 --> 00:00:57,280
when we're talking about whether or not

29
00:00:57,280 --> 00:00:58,960
we're going to use tokens or

30
00:00:58,960 --> 00:01:00,480
certificates

31
00:01:00,480 --> 00:01:01,680
inside

32
00:01:01,680 --> 00:01:03,920
or to authenticate your services

33
00:01:03,920 --> 00:01:06,799
start by asking yourself a few questions

34
00:01:06,799 --> 00:01:08,799
you know first off does your service use

35
00:01:08,799 --> 00:01:10,560
end user data

36
00:01:10,560 --> 00:01:12,560
some services are service to service

37
00:01:12,560 --> 00:01:14,720
some services are used by end user

38
00:01:14,720 --> 00:01:16,720
applications and a lot of that will

39
00:01:16,720 --> 00:01:19,360
dictate uh the easiest way to go for

40
00:01:19,360 --> 00:01:20,720
authentication

41
00:01:20,720 --> 00:01:21,759
um

42
00:01:21,759 --> 00:01:24,320
how much is automated uh if you're not

43
00:01:24,320 --> 00:01:26,240
automating at least something then you

44
00:01:26,240 --> 00:01:27,520
should probably take a step back and

45
00:01:27,520 --> 00:01:29,840
think about how you would automate it

46
00:01:29,840 --> 00:01:31,920
because trying to do this stuff manually

47
00:01:31,920 --> 00:01:33,600
is going to get you into a lot of

48
00:01:33,600 --> 00:01:35,439
trouble

49
00:01:35,439 --> 00:01:37,600
how complex is the network

50
00:01:37,600 --> 00:01:39,040
a lot of times when we start talking

51
00:01:39,040 --> 00:01:41,119
about certificate authentication versus

52
00:01:41,119 --> 00:01:42,720
token authentication

53
00:01:42,720 --> 00:01:44,720
a big thing to think about is how close

54
00:01:44,720 --> 00:01:45,600
is

55
00:01:45,600 --> 00:01:47,680
your authentication point for the

56
00:01:47,680 --> 00:01:48,960
certificate

57
00:01:48,960 --> 00:01:50,399
to the actual system that it's

58
00:01:50,399 --> 00:01:52,960
protecting

59
00:01:53,119 --> 00:01:54,399
and then finally

60
00:01:54,399 --> 00:01:56,159
how does a transaction span multiple

61
00:01:56,159 --> 00:01:58,960
service calls you know most

62
00:01:58,960 --> 00:02:01,439
complex services are more than one call

63
00:02:01,439 --> 00:02:03,680
you're not just gonna say okay call this

64
00:02:03,680 --> 00:02:05,680
one service get your answer back you're

65
00:02:05,680 --> 00:02:07,920
done often you'll call one service

66
00:02:07,920 --> 00:02:09,758
they'll call two other services to get

67
00:02:09,758 --> 00:02:11,200
the job done

68
00:02:11,200 --> 00:02:13,680
does the transaction span that do you

69
00:02:13,680 --> 00:02:16,480
have to be able to get user context

70
00:02:16,480 --> 00:02:19,440
across those services

71
00:02:19,440 --> 00:02:21,760
that makes a big impact on which way you

72
00:02:21,760 --> 00:02:25,840
decide to do your service authentication

73
00:02:26,640 --> 00:02:28,319
uh so this slide's really the biggest

74
00:02:28,319 --> 00:02:29,599
slide i'm actually gonna see if i can

75
00:02:29,599 --> 00:02:32,160
get rid of the

76
00:02:32,160 --> 00:02:34,319
make it a little easier for me

77
00:02:34,319 --> 00:02:36,160
um

78
00:02:36,160 --> 00:02:38,400
no no maybe not

79
00:02:38,400 --> 00:02:39,280
oh

80
00:02:39,280 --> 00:02:43,519
am i still sharing i am not shoot

81
00:02:45,360 --> 00:02:46,879
try that again

82
00:02:46,879 --> 00:02:51,040
all right cool um so uh this particular

83
00:02:51,040 --> 00:02:52,480
side is really the one that you want to

84
00:02:52,480 --> 00:02:54,560
pay the most attention to it it brings

85
00:02:54,560 --> 00:02:56,640
together a lot of the information on

86
00:02:56,640 --> 00:02:58,800
comparing and contrasting certificates

87
00:02:58,800 --> 00:02:59,840
and

88
00:02:59,840 --> 00:03:00,879
um

89
00:03:00,879 --> 00:03:03,840
uh tokens when we're talking about uh

90
00:03:03,840 --> 00:03:05,840
certificates you know the big strength

91
00:03:05,840 --> 00:03:07,760
of the certificate is you have no secret

92
00:03:07,760 --> 00:03:09,200
going over the wire

93
00:03:09,200 --> 00:03:11,120
very very secure when you do it

94
00:03:11,120 --> 00:03:12,480
correctly

95
00:03:12,480 --> 00:03:14,000
um

96
00:03:14,000 --> 00:03:16,159
you know a big benefit there is the fact

97
00:03:16,159 --> 00:03:16,959
that

98
00:03:16,959 --> 00:03:19,280
uh you're you're you know

99
00:03:19,280 --> 00:03:21,120
you're generating your private key

100
00:03:21,120 --> 00:03:22,480
you're generating certificates getting

101
00:03:22,480 --> 00:03:23,599
trusted

102
00:03:23,599 --> 00:03:25,360
your your service doesn't need to know

103
00:03:25,360 --> 00:03:26,959
anything about that private key there's

104
00:03:26,959 --> 00:03:29,599
no shared secret you look at tokens the

105
00:03:29,599 --> 00:03:32,159
big strength is its ability to be able

106
00:03:32,159 --> 00:03:34,319
to move across networks

107
00:03:34,319 --> 00:03:36,000
easily

108
00:03:36,000 --> 00:03:38,799
you're able to say okay here's my token

109
00:03:38,799 --> 00:03:40,640
doesn't matter how complex the network

110
00:03:40,640 --> 00:03:42,798
is

111
00:03:43,360 --> 00:03:44,879
the other big thing that's great about

112
00:03:44,879 --> 00:03:47,519
tokens is that it can generally include

113
00:03:47,519 --> 00:03:50,000
identity claim information in it

114
00:03:50,000 --> 00:03:50,879
so

115
00:03:50,879 --> 00:03:54,000
you're able to uh put for instance user

116
00:03:54,000 --> 00:03:57,040
context information group information

117
00:03:57,040 --> 00:03:58,799
perhaps transactional information that

118
00:03:58,799 --> 00:04:00,640
can all be verified so you don't have to

119
00:04:00,640 --> 00:04:02,799
go back to the source

120
00:04:02,799 --> 00:04:06,239
in order to get that data

121
00:04:06,239 --> 00:04:09,040
now when you're looking at the drawbacks

122
00:04:09,040 --> 00:04:11,120
of these two methods with certificates

123
00:04:11,120 --> 00:04:12,799
the biggest drawback

124
00:04:12,799 --> 00:04:15,760
is one that security that i mentioned

125
00:04:15,760 --> 00:04:18,399
only comes if you do it the right way

126
00:04:18,399 --> 00:04:20,160
and by right way i mean

127
00:04:20,160 --> 00:04:23,120
you're generating a private key in a

128
00:04:23,120 --> 00:04:24,560
secure store

129
00:04:24,560 --> 00:04:27,040
you're generating a public key

130
00:04:27,040 --> 00:04:29,120
and a certificate signing request that

131
00:04:29,120 --> 00:04:30,880
certificate signing request is getting

132
00:04:30,880 --> 00:04:33,280
signed properly and then re-imported

133
00:04:33,280 --> 00:04:34,800
using something like istio or other

134
00:04:34,800 --> 00:04:36,720
service meshes where this is done for

135
00:04:36,720 --> 00:04:37,600
you

136
00:04:37,600 --> 00:04:39,919
that makes it a lot easier if you're

137
00:04:39,919 --> 00:04:42,880
doing you know generating a p12 file and

138
00:04:42,880 --> 00:04:44,560
then downloading it

139
00:04:44,560 --> 00:04:45,840
chances are you're not doing it

140
00:04:45,840 --> 00:04:47,360
correctly so doing that correctly is

141
00:04:47,360 --> 00:04:49,680
very very difficult

142
00:04:49,680 --> 00:04:51,759
another aspect of certificate

143
00:04:51,759 --> 00:04:53,759
authentication that can be much harder

144
00:04:53,759 --> 00:04:54,639
is

145
00:04:54,639 --> 00:04:57,199
revocation checking certificates tend to

146
00:04:57,199 --> 00:04:59,600
be very long-lived

147
00:04:59,600 --> 00:05:01,600
because you don't have that secret going

148
00:05:01,600 --> 00:05:03,759
over the wire

149
00:05:03,759 --> 00:05:07,280
and so with that long-lived

150
00:05:07,360 --> 00:05:09,199
credential

151
00:05:09,199 --> 00:05:10,400
there's a chance that that credential

152
00:05:10,400 --> 00:05:11,840
has been revoked that certificate's been

153
00:05:11,840 --> 00:05:14,720
revoked well there are only three ways

154
00:05:14,720 --> 00:05:16,720
really two ways honestly that are

155
00:05:16,720 --> 00:05:18,240
standards-based that you can do that

156
00:05:18,240 --> 00:05:19,680
either you're checking what's called a

157
00:05:19,680 --> 00:05:22,560
separate certificate revocation list

158
00:05:22,560 --> 00:05:24,000
might be pulling it from a file system

159
00:05:24,000 --> 00:05:25,199
or ldap

160
00:05:25,199 --> 00:05:27,759
or you're

161
00:05:27,759 --> 00:05:29,919
querying ocsp

162
00:05:29,919 --> 00:05:30,800
a

163
00:05:30,800 --> 00:05:33,280
very old protocol to check to see

164
00:05:33,280 --> 00:05:35,120
whether or not the certificate is still

165
00:05:35,120 --> 00:05:37,039
valid um

166
00:05:37,039 --> 00:05:39,360
kind of a flaky protocol truth be told

167
00:05:39,360 --> 00:05:42,639
and it can be very problematic so if you

168
00:05:42,639 --> 00:05:45,039
have the the certificate

169
00:05:45,039 --> 00:05:46,639
in order to do it securely you need to

170
00:05:46,639 --> 00:05:47,759
make sure that you're generating it

171
00:05:47,759 --> 00:05:50,240
securely you also need to make sure that

172
00:05:50,240 --> 00:05:52,240
you are

173
00:05:52,240 --> 00:05:54,080
checking for revocation that revocation

174
00:05:54,080 --> 00:05:55,680
part is very hard to do in most

175
00:05:55,680 --> 00:05:57,199
instances

176
00:05:57,199 --> 00:05:59,759
with tokens the big drawback is you have

177
00:05:59,759 --> 00:06:02,319
to have send that secret over the wire

178
00:06:02,319 --> 00:06:05,440
so whether that secret is um

179
00:06:05,440 --> 00:06:07,280
a really

180
00:06:07,280 --> 00:06:10,720
well-built cryptographic secret or

181
00:06:10,720 --> 00:06:12,960
um a really poorly built you know hand

182
00:06:12,960 --> 00:06:14,639
encrypted secret doesn't really matter

183
00:06:14,639 --> 00:06:17,120
the fact is it's going over the wire so

184
00:06:17,120 --> 00:06:20,319
if somebody gets a hold of that token

185
00:06:20,319 --> 00:06:22,800
they're able to use it

186
00:06:22,800 --> 00:06:24,720
without having any other piece of

187
00:06:24,720 --> 00:06:26,319
information

188
00:06:26,319 --> 00:06:27,759
there have been attempts to build

189
00:06:27,759 --> 00:06:29,520
standards

190
00:06:29,520 --> 00:06:32,800
to to bind a token to a connection

191
00:06:32,800 --> 00:06:35,120
they had one a couple years ago that

192
00:06:35,120 --> 00:06:37,280
microsoft was really pushing

193
00:06:37,280 --> 00:06:39,039
didn't really go anywhere

194
00:06:39,039 --> 00:06:41,039
chrome decided to take it out of

195
00:06:41,039 --> 00:06:43,039
its own implementation

196
00:06:43,039 --> 00:06:45,280
um

197
00:06:45,280 --> 00:06:47,600
so uh you know that that's always been

198
00:06:47,600 --> 00:06:49,840
the biggest issue with tokens is

199
00:06:49,840 --> 00:06:51,599
how do you protect that secret over the

200
00:06:51,599 --> 00:06:54,000
wire uh the biggest way

201
00:06:54,000 --> 00:06:56,240
to mitigate that risk is to have very

202
00:06:56,240 --> 00:06:58,960
very short-lived tokens so if your

203
00:06:58,960 --> 00:07:01,199
token's only alive for a minute chances

204
00:07:01,199 --> 00:07:02,800
are by the time the attacker gets a

205
00:07:02,800 --> 00:07:05,280
token figures out what it is figures out

206
00:07:05,280 --> 00:07:06,880
what they can use it for

207
00:07:06,880 --> 00:07:08,479
it's already expired so that goes back

208
00:07:08,479 --> 00:07:10,080
to the automation piece about why

209
00:07:10,080 --> 00:07:12,080
automation is so important

210
00:07:12,080 --> 00:07:14,160
for your security

211
00:07:14,160 --> 00:07:17,160
um

212
00:07:17,520 --> 00:07:19,680
and then the other major drawback for

213
00:07:19,680 --> 00:07:22,319
tokens is that doing a proper

214
00:07:22,319 --> 00:07:24,400
service to service exchange

215
00:07:24,400 --> 00:07:27,120
can be really painful uh there is a

216
00:07:27,120 --> 00:07:28,960
specification that lets you do it it's

217
00:07:28,960 --> 00:07:31,199
called the oauth 2 token exchange i just

218
00:07:31,199 --> 00:07:33,599
probably i'm still wearing my mask sorry

219
00:07:33,599 --> 00:07:36,639
the os2 token exchange

220
00:07:36,639 --> 00:07:39,680
it's doable it works very well but it's

221
00:07:39,680 --> 00:07:41,120
something that you need to know how to

222
00:07:41,120 --> 00:07:45,800
do inside of your code inside your token

223
00:07:46,319 --> 00:07:48,160
the big risks with certificate

224
00:07:48,160 --> 00:07:50,879
authentication boiled down to are you

225
00:07:50,879 --> 00:07:53,919
using it properly and then how far away

226
00:07:53,919 --> 00:07:57,120
from the application is the certificate

227
00:07:57,120 --> 00:07:58,800
so when you're doing something like

228
00:07:58,800 --> 00:08:01,199
istio where you know you've got that

229
00:08:01,199 --> 00:08:03,360
side car that's validating the

230
00:08:03,360 --> 00:08:05,039
certificate for you right up against

231
00:08:05,039 --> 00:08:06,960
your pod that's really great because

232
00:08:06,960 --> 00:08:09,280
there's very little distance

233
00:08:09,280 --> 00:08:12,080
between your certificate validation your

234
00:08:12,080 --> 00:08:13,520
applications the fact that it's just

235
00:08:13,520 --> 00:08:16,240
injecting some identity data as headers

236
00:08:16,240 --> 00:08:18,639
is not a big deal if however your

237
00:08:18,639 --> 00:08:21,520
certificate validation point is you know

238
00:08:21,520 --> 00:08:23,360
four proxies up

239
00:08:23,360 --> 00:08:25,759
and now you just have some standard

240
00:08:25,759 --> 00:08:28,240
contact information going through these

241
00:08:28,240 --> 00:08:30,639
proxies there's no way to validate it

242
00:08:30,639 --> 00:08:33,039
that becomes a real security risk at

243
00:08:33,039 --> 00:08:34,880
that point that anybody can inject that

244
00:08:34,880 --> 00:08:36,240
information along the way you can't

245
00:08:36,240 --> 00:08:37,599
really track it

246
00:08:37,599 --> 00:08:41,320
from level to level

247
00:08:41,760 --> 00:08:44,159
the major risk for tokens is going to be

248
00:08:44,159 --> 00:08:46,560
the fact that it is a bearer token it's

249
00:08:46,560 --> 00:08:47,600
a

250
00:08:47,600 --> 00:08:49,920
something that goes across the wire

251
00:08:49,920 --> 00:08:52,320
somebody catches that somebody logs it

252
00:08:52,320 --> 00:08:53,760
by accident

253
00:08:53,760 --> 00:08:55,040
that's where you're going to run into

254
00:08:55,040 --> 00:08:57,439
issues

255
00:08:58,320 --> 00:08:59,920
so food for thought while you're looking

256
00:08:59,920 --> 00:09:02,480
at which one to choose

257
00:09:02,480 --> 00:09:04,320
don't be afraid to mix and match

258
00:09:04,320 --> 00:09:06,160
there may be scenarios where you're

259
00:09:06,160 --> 00:09:08,160
going to start off let's say you have an

260
00:09:08,160 --> 00:09:09,760
application that application is going to

261
00:09:09,760 --> 00:09:11,360
talk to your services

262
00:09:11,360 --> 00:09:14,080
that part might be

263
00:09:14,080 --> 00:09:16,399
token based because it's really easy for

264
00:09:16,399 --> 00:09:18,000
a web application to work with tokens

265
00:09:18,000 --> 00:09:20,640
users aren't generally going to have

266
00:09:20,640 --> 00:09:22,720
certificates there are some instances

267
00:09:22,720 --> 00:09:24,560
where that's not true

268
00:09:24,560 --> 00:09:26,880
but for the most part

269
00:09:26,880 --> 00:09:28,560
your users will have tokens they won't

270
00:09:28,560 --> 00:09:30,800
have certificates but then once you get

271
00:09:30,800 --> 00:09:33,279
into your infrastructure maybe you then

272
00:09:33,279 --> 00:09:35,600
switch from certificates

273
00:09:35,600 --> 00:09:37,920
or from tokens over to certificates

274
00:09:37,920 --> 00:09:39,680
that's perfectly valid to do that

275
00:09:39,680 --> 00:09:41,519
transition just make sure you're logging

276
00:09:41,519 --> 00:09:45,519
it keeping track of it things like that

277
00:09:45,760 --> 00:09:47,519
service meshes and api gateways are

278
00:09:47,519 --> 00:09:49,360
really important

279
00:09:49,360 --> 00:09:51,360
and the line has gotten fuzzier and

280
00:09:51,360 --> 00:09:54,080
fuzzier over the last couple years as to

281
00:09:54,080 --> 00:09:55,920
whether you'd use a service mesh to do

282
00:09:55,920 --> 00:09:58,720
authentication or an api gateway

283
00:09:58,720 --> 00:10:00,800
but whichever one you choose and i'm not

284
00:10:00,800 --> 00:10:02,560
going to say one should be used over the

285
00:10:02,560 --> 00:10:04,079
other it's going to really depend on

286
00:10:04,079 --> 00:10:06,880
your situation

287
00:10:07,440 --> 00:10:09,279
don't do it alone don't try and reinvent

288
00:10:09,279 --> 00:10:11,760
the wheel because chances are

289
00:10:11,760 --> 00:10:13,279
it will go

290
00:10:13,279 --> 00:10:15,360
horribly wrong

291
00:10:15,360 --> 00:10:17,440
and it i kind of say like inventing your

292
00:10:17,440 --> 00:10:18,880
own authentication systems like

293
00:10:18,880 --> 00:10:22,160
inventing your own crypto don't do it um

294
00:10:22,160 --> 00:10:24,720
there are a lot of

295
00:10:24,720 --> 00:10:26,880
standards out there with thousands of

296
00:10:26,880 --> 00:10:28,880
hours of peer review

297
00:10:28,880 --> 00:10:30,839
thousands of

298
00:10:30,839 --> 00:10:32,720
implementations um

299
00:10:32,720 --> 00:10:34,640
you know stick with those standards the

300
00:10:34,640 --> 00:10:36,800
you know they might not be perfect uh

301
00:10:36,800 --> 00:10:38,640
you might not think it suits your need

302
00:10:38,640 --> 00:10:40,480
or the what you want

303
00:10:40,480 --> 00:10:41,839
but chances are the terrible

304
00:10:41,839 --> 00:10:43,519
documentation for those systems is

305
00:10:43,519 --> 00:10:47,720
really what the problem is

306
00:10:48,079 --> 00:10:50,479
so yeah

307
00:10:51,360 --> 00:10:54,640
some links and resources

308
00:10:54,880 --> 00:10:57,360
a couple of blog posts that i've written

309
00:10:57,360 --> 00:11:01,839
about certificates versus

310
00:11:02,000 --> 00:11:05,760
certs for the api server specifically

311
00:11:05,760 --> 00:11:07,279
and then using

312
00:11:07,279 --> 00:11:09,600
tokens in pipeline authentication just

313
00:11:09,600 --> 00:11:12,640
gets into the real nitty d gritty detail

314
00:11:12,640 --> 00:11:15,200
of how service accounts work

315
00:11:15,200 --> 00:11:17,279
and then this blog is written by a

316
00:11:17,279 --> 00:11:19,279
friend of mine alex ellis he's the

317
00:11:19,279 --> 00:11:22,320
author of open faz and inlets

318
00:11:22,320 --> 00:11:23,600
and this blog is really interesting

319
00:11:23,600 --> 00:11:26,560
because it talks about

320
00:11:26,839 --> 00:11:29,519
using uh uh

321
00:11:29,519 --> 00:11:32,000
oidc with tokens from github action so

322
00:11:32,000 --> 00:11:36,800
using github actions to securely call

323
00:11:37,839 --> 00:11:39,360
open fads

324
00:11:39,360 --> 00:11:41,920
he based it off of a new release of a

325
00:11:41,920 --> 00:11:44,399
tool that lets you use github actions

326
00:11:44,399 --> 00:11:47,760
oidc to call

327
00:11:47,920 --> 00:11:50,079
gke resource and the great this really

328
00:11:50,079 --> 00:11:51,440
shows both the

329
00:11:51,440 --> 00:11:52,560
um

330
00:11:52,560 --> 00:11:53,360
the

331
00:11:53,360 --> 00:11:56,160
benefits and the risks of using tokens

332
00:11:56,160 --> 00:11:58,399
because in this one example you're able

333
00:11:58,399 --> 00:11:59,680
to both

334
00:11:59,680 --> 00:12:03,040
generate tokens across different mediums

335
00:12:03,040 --> 00:12:04,880
but at the same time that means secrets

336
00:12:04,880 --> 00:12:06,160
are going over the wire so you're

337
00:12:06,160 --> 00:12:09,440
getting better security by not having a

338
00:12:09,440 --> 00:12:11,839
secret stored locally

339
00:12:11,839 --> 00:12:15,279
but then you're still getting

340
00:12:15,279 --> 00:12:19,040
a security boost because now okay i'm

341
00:12:19,040 --> 00:12:21,120
running my github action but i don't

342
00:12:21,120 --> 00:12:24,079
have to generate a secret in order to

343
00:12:24,079 --> 00:12:27,279
use gke

344
00:12:28,399 --> 00:12:29,839
uh and then finally some shameless

345
00:12:29,839 --> 00:12:33,279
self-promotion say hi on twitter

346
00:12:33,279 --> 00:12:34,800
if you are looking for an identity

347
00:12:34,800 --> 00:12:35,920
provider

348
00:12:35,920 --> 00:12:38,079
we make open unison open source identity

349
00:12:38,079 --> 00:12:40,639
provider deploys writing to cates

350
00:12:40,639 --> 00:12:41,920
and then

351
00:12:41,920 --> 00:12:43,920
our book kubernetes and docker and

352
00:12:43,920 --> 00:12:45,680
enterprise guide

353
00:12:45,680 --> 00:12:47,760
that's it thanks

354
00:12:47,760 --> 00:12:51,399
thanks so much mark

