1
00:00:00,160 --> 00:00:03,120
okay uh hello everyone uh my name is

2
00:00:03,120 --> 00:00:05,520
sripad nada i'm a senior technical staff

3
00:00:05,520 --> 00:00:07,520
member at ibm research

4
00:00:07,520 --> 00:00:09,519
and today i'm going to talk about how we

5
00:00:09,519 --> 00:00:13,120
secure our ci cd pipelines

6
00:00:13,280 --> 00:00:15,599
now let's revisit this office supply

7
00:00:15,599 --> 00:00:16,960
chain right so

8
00:00:16,960 --> 00:00:18,560
it typically starts with the developer

9
00:00:18,560 --> 00:00:20,560
who is writing our code and while

10
00:00:20,560 --> 00:00:22,400
writing the code we declare uh it

11
00:00:22,400 --> 00:00:25,119
declares various dependencies like the

12
00:00:25,119 --> 00:00:26,400
package dependencies the image

13
00:00:26,400 --> 00:00:27,920
dependencies

14
00:00:27,920 --> 00:00:29,920
then we run our ci cd pipeline in the

15
00:00:29,920 --> 00:00:32,479
pipeline we we do various security and

16
00:00:32,479 --> 00:00:34,000
compliance functions

17
00:00:34,000 --> 00:00:35,920
like we generate s1 we do vulnerability

18
00:00:35,920 --> 00:00:37,840
analysis we do validation of all the

19
00:00:37,840 --> 00:00:39,440
dependencies whether they are coming

20
00:00:39,440 --> 00:00:41,360
from trusted source and not

21
00:00:41,360 --> 00:00:43,120
then finally we build some artifacts

22
00:00:43,120 --> 00:00:44,960
typically an image we push it to some

23
00:00:44,960 --> 00:00:47,600
registry and deploy it onto the onto the

24
00:00:47,600 --> 00:00:49,039
cloud

25
00:00:49,039 --> 00:00:51,360
now the supply chain security applies

26
00:00:51,360 --> 00:00:53,120
is applicable across the spectrum from

27
00:00:53,120 --> 00:00:55,440
developer to the workload that is

28
00:00:55,440 --> 00:00:57,120
running on the cloud

29
00:00:57,120 --> 00:00:59,199
now in this talk we'll be focusing on

30
00:00:59,199 --> 00:01:02,160
the security of our ci cd pipeline

31
00:01:02,160 --> 00:01:04,239
because as i said right this is the

32
00:01:04,239 --> 00:01:06,880
place where we are embedding and we are

33
00:01:06,880 --> 00:01:08,960
bringing the innovations of how we do a

34
00:01:08,960 --> 00:01:11,280
lot of security analytics and

35
00:01:11,280 --> 00:01:14,400
how we secure our code but it's also

36
00:01:14,400 --> 00:01:16,799
important that we we make we give due

37
00:01:16,799 --> 00:01:18,640
diligence of basically ensuring our

38
00:01:18,640 --> 00:01:21,200
pipelines are secure then stuff right

39
00:01:21,200 --> 00:01:23,280
so that's what is going to be the focus

40
00:01:23,280 --> 00:01:24,960
of this talk

41
00:01:24,960 --> 00:01:27,200
so just like our applications our

42
00:01:27,200 --> 00:01:29,119
pipelines also have their own lifecycle

43
00:01:29,119 --> 00:01:31,520
it starts with the composition now this

44
00:01:31,520 --> 00:01:33,920
is the place where we are composing or

45
00:01:33,920 --> 00:01:35,280
we are creating our pipeline we are

46
00:01:35,280 --> 00:01:37,200
defining our pipelines

47
00:01:37,200 --> 00:01:40,159
now there are number of open source uh

48
00:01:40,159 --> 00:01:41,840
catalogs like if you are building a tech

49
00:01:41,840 --> 00:01:43,200
town pipeline then you have tecton

50
00:01:43,200 --> 00:01:44,720
catalog if you are building github

51
00:01:44,720 --> 00:01:46,320
actions then there is get a marketplace

52
00:01:46,320 --> 00:01:48,799
so we'll most probably when we are

53
00:01:48,799 --> 00:01:50,640
defining our pipeline we'll be using

54
00:01:50,640 --> 00:01:52,320
this pipeline definitions which are

55
00:01:52,320 --> 00:01:55,119
ready to use right so at this point we

56
00:01:55,119 --> 00:01:57,200
need to make sure that when we are

57
00:01:57,200 --> 00:01:59,119
bringing in these pipeline definitions

58
00:01:59,119 --> 00:02:01,600
that we we do the do validations of this

59
00:02:01,600 --> 00:02:02,960
whether they are coming from trusted

60
00:02:02,960 --> 00:02:04,719
source can we trust these

61
00:02:04,719 --> 00:02:06,079
definitions

62
00:02:06,079 --> 00:02:08,000
and also we need to ensure that when we

63
00:02:08,000 --> 00:02:11,200
define we configure them securely

64
00:02:11,200 --> 00:02:13,280
then we set up or we configure or

65
00:02:13,280 --> 00:02:15,280
install our pipelines right at this

66
00:02:15,280 --> 00:02:17,440
point again we need to ensure

67
00:02:17,440 --> 00:02:19,280
ensure that our pipeline is properly

68
00:02:19,280 --> 00:02:21,680
configured because our pipelines

69
00:02:21,680 --> 00:02:23,680
they have access to a lot of credentials

70
00:02:23,680 --> 00:02:25,360
right they have access to our registry

71
00:02:25,360 --> 00:02:27,599
their access to our github credentials

72
00:02:27,599 --> 00:02:29,520
their access to our keys

73
00:02:29,520 --> 00:02:30,239
so

74
00:02:30,239 --> 00:02:32,080
it's important that when we are setting

75
00:02:32,080 --> 00:02:34,239
up or installing a pipeline configuring

76
00:02:34,239 --> 00:02:35,680
pipeline we make sure that they are

77
00:02:35,680 --> 00:02:38,720
securely configured

78
00:02:38,720 --> 00:02:40,080
we can again use some admission

79
00:02:40,080 --> 00:02:41,519
controller to ensure that when we are

80
00:02:41,519 --> 00:02:43,120
installing we are

81
00:02:43,120 --> 00:02:45,120
only allowing this design and the

82
00:02:45,120 --> 00:02:47,120
verified artifact to be configured on

83
00:02:47,120 --> 00:02:48,879
the pipeline

84
00:02:48,879 --> 00:02:50,720
then finally our pipeline gets triggered

85
00:02:50,720 --> 00:02:51,760
right it

86
00:02:51,760 --> 00:02:53,760
may it could be a manual event it could

87
00:02:53,760 --> 00:02:56,400
be a github event and our pipeline is

88
00:02:56,400 --> 00:02:58,720
basically is ready to execute

89
00:02:58,720 --> 00:03:00,800
now this is the last point where we need

90
00:03:00,800 --> 00:03:02,560
to do the verification again

91
00:03:02,560 --> 00:03:04,239
and we need to ensure that the pipeline

92
00:03:04,239 --> 00:03:05,760
that we are going to instantiate or

93
00:03:05,760 --> 00:03:08,480
execute it is safe to uh

94
00:03:08,480 --> 00:03:10,400
trigger except to execute right we are

95
00:03:10,400 --> 00:03:13,120
done all the verifications and now we

96
00:03:13,120 --> 00:03:16,000
can execute the pipeline

97
00:03:16,000 --> 00:03:18,159
then finally once our pipeline starts

98
00:03:18,159 --> 00:03:19,920
executing we need to ensure that we

99
00:03:19,920 --> 00:03:22,959
monitor the uh our pipelines because in

100
00:03:22,959 --> 00:03:24,560
my personal opinion

101
00:03:24,560 --> 00:03:26,080
monitoring is probably the under

102
00:03:26,080 --> 00:03:28,000
appreciated security tool

103
00:03:28,000 --> 00:03:30,879
it doesn't help preventing any security

104
00:03:30,879 --> 00:03:33,599
uh incident but it is probably the most

105
00:03:33,599 --> 00:03:36,159
mature and oldest uh tool that we can

106
00:03:36,159 --> 00:03:38,879
use to discover if there are any uh uh

107
00:03:38,879 --> 00:03:40,879
any issues with your pipelines or any

108
00:03:40,879 --> 00:03:42,560
issue with your applications on the

109
00:03:42,560 --> 00:03:45,040
cloud right so

110
00:03:45,040 --> 00:03:46,480
that's why i think when the pipeline is

111
00:03:46,480 --> 00:03:48,480
executing we need to ensure that we have

112
00:03:48,480 --> 00:03:50,640
proper monitoring established

113
00:03:50,640 --> 00:03:53,280
then once our pipeline finishes

114
00:03:53,280 --> 00:03:54,560
we need to collect the automated

115
00:03:54,560 --> 00:03:55,920
registration of

116
00:03:55,920 --> 00:03:57,920
the execution state and any artifact

117
00:03:57,920 --> 00:04:00,400
that is produced by the pipeline right

118
00:04:00,400 --> 00:04:02,400
and once at any point in time when the

119
00:04:02,400 --> 00:04:03,439
pipeline

120
00:04:03,439 --> 00:04:05,360
is in the history we need to ensure that

121
00:04:05,360 --> 00:04:07,120
we have the ability to audit this

122
00:04:07,120 --> 00:04:08,239
pipeline

123
00:04:08,239 --> 00:04:10,000
and there are exists and we don't want

124
00:04:10,000 --> 00:04:11,360
to start from scratch right there are

125
00:04:11,360 --> 00:04:13,280
open source projects that that are there

126
00:04:13,280 --> 00:04:14,879
that are trying to solve some of this

127
00:04:14,879 --> 00:04:16,798
problem for instance these are techno

128
00:04:16,798 --> 00:04:19,279
chains uh that can capture the

129
00:04:19,279 --> 00:04:22,079
attestation of automated registration of

130
00:04:22,079 --> 00:04:24,479
the task run and the images that are

131
00:04:24,479 --> 00:04:26,720
produced we can sign it automatically uh

132
00:04:26,720 --> 00:04:29,280
i also put in a tecton

133
00:04:29,280 --> 00:04:31,840
extension protocol proposal to extend

134
00:04:31,840 --> 00:04:33,520
this capability to the pipeline run so

135
00:04:33,520 --> 00:04:35,040
we can have the end-to-end province

136
00:04:35,040 --> 00:04:36,320
collection

137
00:04:36,320 --> 00:04:38,479
and we can improve on this

138
00:04:38,479 --> 00:04:39,759
then we are existing cloud native

139
00:04:39,759 --> 00:04:41,520
monitors that we can use to basically

140
00:04:41,520 --> 00:04:43,600
monitor our pipelines only thing we need

141
00:04:43,600 --> 00:04:44,720
to do is we need to do the right

142
00:04:44,720 --> 00:04:46,720
instrumentation of the our pipeline

143
00:04:46,720 --> 00:04:48,639
components so whenever

144
00:04:48,639 --> 00:04:50,720
for instance the takedown pipeline then

145
00:04:50,720 --> 00:04:53,280
when all the com all the

146
00:04:53,280 --> 00:04:54,639
parts or all the containers that are

147
00:04:54,639 --> 00:04:56,240
executing they have the common label so

148
00:04:56,240 --> 00:04:58,160
we can aggregate and view them in the

149
00:04:58,160 --> 00:04:59,840
through the common lens

150
00:04:59,840 --> 00:05:01,360
and for rest of the stuff there is some

151
00:05:01,360 --> 00:05:02,800
work in progress that i'm basically

152
00:05:02,800 --> 00:05:05,039
working on and this is again working

153
00:05:05,039 --> 00:05:07,039
with the open source community so if you

154
00:05:07,039 --> 00:05:09,280
are interested we welcome your feedback

155
00:05:09,280 --> 00:05:10,800
and help

156
00:05:10,800 --> 00:05:12,400
so one thing that i'm looking into is

157
00:05:12,400 --> 00:05:15,120
pipe validate right so just like our

158
00:05:15,120 --> 00:05:17,680
container or our kubernetes uh

159
00:05:17,680 --> 00:05:19,680
they have their own cis benchmark that

160
00:05:19,680 --> 00:05:21,280
provide them the guideline of how you

161
00:05:21,280 --> 00:05:22,960
basically configure your cluster how you

162
00:05:22,960 --> 00:05:24,400
configure a workload

163
00:05:24,400 --> 00:05:25,919
similarly we are trying to come up with

164
00:05:25,919 --> 00:05:28,000
basically a set of guidelines that how

165
00:05:28,000 --> 00:05:29,840
you can basically configure your

166
00:05:29,840 --> 00:05:31,840
pipelines if how you can identify any

167
00:05:31,840 --> 00:05:33,919
misconfiguration in your pipeline and

168
00:05:33,919 --> 00:05:36,160
again these are going to be codified so

169
00:05:36,160 --> 00:05:37,759
you don't these are not going to be just

170
00:05:37,759 --> 00:05:39,120
guidelines just ensure that you are

171
00:05:39,120 --> 00:05:40,160
using this

172
00:05:40,160 --> 00:05:42,080
latest version of this image on these

173
00:05:42,080 --> 00:05:43,600
are basically actionable ones that we

174
00:05:43,600 --> 00:05:46,479
can codify and we can uh validate them

175
00:05:46,479 --> 00:05:47,520
in in our

176
00:05:47,520 --> 00:05:49,600
through our automations

177
00:05:49,600 --> 00:05:50,960
then there is the animation controller

178
00:05:50,960 --> 00:05:53,680
that we are looking into

179
00:05:53,680 --> 00:05:54,720
uh

180
00:05:54,720 --> 00:05:56,560
that that will again prevent uh

181
00:05:56,560 --> 00:05:59,199
execution of any

182
00:05:59,199 --> 00:06:01,280
providers the ability to validate and

183
00:06:01,280 --> 00:06:03,440
verify the pipeline

184
00:06:03,440 --> 00:06:05,759
executions and pipe auditor is again

185
00:06:05,759 --> 00:06:07,520
some automation that we are doing to

186
00:06:07,520 --> 00:06:09,680
allow us the validation of any artifact

187
00:06:09,680 --> 00:06:11,120
that are produced by the pipeline you

188
00:06:11,120 --> 00:06:13,120
can validate how it was produced which

189
00:06:13,120 --> 00:06:15,120
pipeline produced it and what

190
00:06:15,120 --> 00:06:16,960
texts were done

191
00:06:16,960 --> 00:06:18,080
in this one

192
00:06:18,080 --> 00:06:19,360
in this particular talk i'm going to

193
00:06:19,360 --> 00:06:22,000
talk about the sign signing part of it

194
00:06:22,000 --> 00:06:24,000
so why it is important

195
00:06:24,000 --> 00:06:26,400
uh is let's say i'm building a simple

196
00:06:26,400 --> 00:06:27,919
takedown pipeline right i have three

197
00:06:27,919 --> 00:06:29,759
tasks git clone vulnerability scan and

198
00:06:29,759 --> 00:06:31,039
build image

199
00:06:31,039 --> 00:06:31,919
now

200
00:06:31,919 --> 00:06:33,600
if one of the tasks and i'm bringing

201
00:06:33,600 --> 00:06:35,680
this task from the open catalog now if

202
00:06:35,680 --> 00:06:37,919
my git clone task is compromised now in

203
00:06:37,919 --> 00:06:39,680
the sense that it is comp it is

204
00:06:39,680 --> 00:06:41,120
tempering with the original artifact

205
00:06:41,120 --> 00:06:43,600
that are in the gate repository and

206
00:06:43,600 --> 00:06:46,560
it is as a part of the cloning now my

207
00:06:46,560 --> 00:06:48,160
remaining tasks they are automatically

208
00:06:48,160 --> 00:06:50,080
compromised because they rely on what

209
00:06:50,080 --> 00:06:53,840
the first git clone task produces so

210
00:06:53,840 --> 00:06:55,680
if one task is compromised then my whole

211
00:06:55,680 --> 00:06:57,280
pipeline essentially can be compromised

212
00:06:57,280 --> 00:06:58,720
so that's why it is essential that we

213
00:06:58,720 --> 00:07:00,319
have when we are bringing in this open

214
00:07:00,319 --> 00:07:02,880
source element into our pipeline

215
00:07:02,880 --> 00:07:04,639
we make sure that they are signed we

216
00:07:04,639 --> 00:07:06,000
make sure they are coming from trusted

217
00:07:06,000 --> 00:07:07,120
source

218
00:07:07,120 --> 00:07:08,720
and that's what we are doing in this

219
00:07:08,720 --> 00:07:11,039
pipeline signing utility again this is

220
00:07:11,039 --> 00:07:14,240
open source i encourage you to basically

221
00:07:14,240 --> 00:07:16,160
see this so the approach that we are

222
00:07:16,160 --> 00:07:18,479
taking is we are assigning this in

223
00:07:18,479 --> 00:07:20,240
multiple layers right so this is again

224
00:07:20,240 --> 00:07:22,000
example of takedown but it applies

225
00:07:22,000 --> 00:07:24,560
equally to the github workflows

226
00:07:24,560 --> 00:07:26,080
so first thing we do is we assign the

227
00:07:26,080 --> 00:07:28,319
pipeline definition now the pipeline

228
00:07:28,319 --> 00:07:30,319
encodes the task layout and the shared

229
00:07:30,319 --> 00:07:31,440
resources

230
00:07:31,440 --> 00:07:32,880
so

231
00:07:32,880 --> 00:07:34,560
we by signing it we ensure that these

232
00:07:34,560 --> 00:07:36,000
are the only authorized tasks and this

233
00:07:36,000 --> 00:07:37,520
is the order in which this task can be

234
00:07:37,520 --> 00:07:40,000
executed then we sign the task which

235
00:07:40,000 --> 00:07:42,400
encodes the execution logic that these

236
00:07:42,400 --> 00:07:44,240
are the execution function that i'm

237
00:07:44,240 --> 00:07:45,919
going to run and these are the runtime

238
00:07:45,919 --> 00:07:48,560
of the base image that i'm going to use

239
00:07:48,560 --> 00:07:50,240
so when we are signing we are assigning

240
00:07:50,240 --> 00:07:53,280
it in this multiple layers

241
00:07:53,280 --> 00:07:55,440
we sign the pipeline we sign the

242
00:07:55,440 --> 00:07:59,599
task and the image separately and the uh

243
00:07:59,599 --> 00:08:01,120
we are basically taking two approach one

244
00:08:01,120 --> 00:08:02,800
is we are signing the uh

245
00:08:02,800 --> 00:08:05,039
the yaml and now we are basically

246
00:08:05,039 --> 00:08:06,400
building new approach where we are

247
00:08:06,400 --> 00:08:08,479
converting this task uh

248
00:08:08,479 --> 00:08:12,240
the techno resources into into a format

249
00:08:12,240 --> 00:08:14,240
a representation and then we are signing

250
00:08:14,240 --> 00:08:15,919
it with this six door right so we are

251
00:08:15,919 --> 00:08:17,840
signing it with cosine and all the

252
00:08:17,840 --> 00:08:19,919
artifacts that are basically represented

253
00:08:19,919 --> 00:08:22,000
in there

254
00:08:22,000 --> 00:08:24,720
i just want to show you quick demo so

255
00:08:24,720 --> 00:08:26,319
this is again as i said this is an open

256
00:08:26,319 --> 00:08:30,000
source project called tapest pipeline so

257
00:08:30,000 --> 00:08:32,400
in here

258
00:08:33,679 --> 00:08:35,679
in here i have basically my pipeline

259
00:08:35,679 --> 00:08:37,760
definitions in this particular directory

260
00:08:37,760 --> 00:08:39,839
and i'm basically saying tkn for

261
00:08:39,839 --> 00:08:41,440
tectonic show

262
00:08:41,440 --> 00:08:43,679
this will show this will pass all the

263
00:08:43,679 --> 00:08:45,200
definitions it will identify what are

264
00:08:45,200 --> 00:08:47,279
the pipeline it will identify the layout

265
00:08:47,279 --> 00:08:49,519
uh the task that i use the images that

266
00:08:49,519 --> 00:08:51,200
are used that are used

267
00:08:51,200 --> 00:08:53,360
then i can go ahead and i can basically

268
00:08:53,360 --> 00:08:55,839
sign this

269
00:08:58,320 --> 00:09:00,880
i can sign this particular resources

270
00:09:00,880 --> 00:09:03,760
with with the my key and i can point it

271
00:09:03,760 --> 00:09:05,519
to the registries

272
00:09:05,519 --> 00:09:07,680
where okay i think i'm running out of

273
00:09:07,680 --> 00:09:09,839
time so i'll just show you one

274
00:09:09,839 --> 00:09:12,640
uh command called verify so by

275
00:09:12,640 --> 00:09:15,440
verification we can essentially say

276
00:09:15,440 --> 00:09:16,720
this through essentially allows us to

277
00:09:16,720 --> 00:09:19,120
statically uh sign the pipelines and

278
00:09:19,120 --> 00:09:22,399
verify it in the uh

279
00:09:22,399 --> 00:09:23,360
in your

280
00:09:23,360 --> 00:09:25,279
in your workflows right and at the same

281
00:09:25,279 --> 00:09:26,959
time i wanted to show you a simple

282
00:09:26,959 --> 00:09:29,040
admission controller where if we

283
00:09:29,040 --> 00:09:31,279
basically

284
00:09:31,279 --> 00:09:33,279
try to apply some pipeline or create

285
00:09:33,279 --> 00:09:35,839
some pipeline that is not sign

286
00:09:35,839 --> 00:09:37,200
we have basically admission controller

287
00:09:37,200 --> 00:09:38,880
that can identify it and it can

288
00:09:38,880 --> 00:09:40,560
basically deny the request that

289
00:09:40,560 --> 00:09:42,399
signature or message annotations are

290
00:09:42,399 --> 00:09:44,560
formed so we can block this execution of

291
00:09:44,560 --> 00:09:46,160
the pipeline

292
00:09:46,160 --> 00:09:47,519
and

293
00:09:47,519 --> 00:09:49,680
finally

294
00:09:49,680 --> 00:09:52,080
as i said this the code is

295
00:09:52,080 --> 00:09:54,880
open source so

296
00:09:55,200 --> 00:09:56,320
you can

297
00:09:56,320 --> 00:09:57,760
find it

298
00:09:57,760 --> 00:09:59,760
at this particular location we have this

299
00:09:59,760 --> 00:10:01,440
the talk that i give we have article

300
00:10:01,440 --> 00:10:03,600
publish also when you start and

301
00:10:03,600 --> 00:10:05,440
if you want to basically we're looking

302
00:10:05,440 --> 00:10:06,880
for help right because this is a big

303
00:10:06,880 --> 00:10:09,360
spectrum so if you are uh interested

304
00:10:09,360 --> 00:10:11,200
contact me by email

305
00:10:11,200 --> 00:10:13,839
on github or on twitter

306
00:10:13,839 --> 00:10:17,320
yeah thank you

307
00:10:18,560 --> 00:10:20,640
you

