1
00:00:00,719 --> 00:00:02,800
good afternoon everyone my name is

2
00:00:02,800 --> 00:00:04,160
eduard marin and i'm a researcher at

3
00:00:04,160 --> 00:00:05,759
telefonica research

4
00:00:05,759 --> 00:00:07,759
today i will talk about the security of

5
00:00:07,759 --> 00:00:09,920
serverless a new computing paradigm that

6
00:00:09,920 --> 00:00:11,440
has experienced significant growth over

7
00:00:11,440 --> 00:00:12,639
the last few years

8
00:00:12,639 --> 00:00:14,080
and is expected to become the dominant

9
00:00:14,080 --> 00:00:15,440
pattern for cloud computing in the

10
00:00:15,440 --> 00:00:17,919
future

11
00:00:18,480 --> 00:00:20,240
over the last decade we have witnessed

12
00:00:20,240 --> 00:00:21,520
significant advancements in cloud

13
00:00:21,520 --> 00:00:22,880
computing

14
00:00:22,880 --> 00:00:24,800
these were intended to simplify the

15
00:00:24,800 --> 00:00:26,160
development and management of

16
00:00:26,160 --> 00:00:27,199
applications

17
00:00:27,199 --> 00:00:30,800
as well as reduce the cost of running

18
00:00:30,800 --> 00:00:33,360
these applications in the cloud in the

19
00:00:33,360 --> 00:00:34,960
early days of cloud computing

20
00:00:34,960 --> 00:00:37,040
cloud providers gave users the ability

21
00:00:37,040 --> 00:00:38,640
to port their monolithic applications to

22
00:00:38,640 --> 00:00:39,520
the cloud

23
00:00:39,520 --> 00:00:41,360
virtual machines were key to achieving

24
00:00:41,360 --> 00:00:43,520
this offering strong isolation while

25
00:00:43,520 --> 00:00:45,039
providing users a sense of having an

26
00:00:45,039 --> 00:00:47,120
infinite amount of resources

27
00:00:47,120 --> 00:00:48,879
the main downside of this approach was

28
00:00:48,879 --> 00:00:50,640
that users not only had to manage the

29
00:00:50,640 --> 00:00:52,160
virtual machines themselves

30
00:00:52,160 --> 00:00:53,840
but also had to develop mechanisms to

31
00:00:53,840 --> 00:00:55,760
scale their applications

32
00:00:55,760 --> 00:00:58,160
motivated by these limitations it was

33
00:00:58,160 --> 00:01:00,079
proposed to decompose applications into

34
00:01:00,079 --> 00:01:00,800
smaller

35
00:01:00,800 --> 00:01:02,719
independent components known as

36
00:01:02,719 --> 00:01:04,080
microservices

37
00:01:04,080 --> 00:01:07,280
and placed them inside containers this

38
00:01:07,280 --> 00:01:08,000
approach

39
00:01:08,000 --> 00:01:11,119
increased portability it provided

40
00:01:11,119 --> 00:01:13,439
lower startup times compared to virtual

41
00:01:13,439 --> 00:01:14,640
machines

42
00:01:14,640 --> 00:01:18,560
and it allowed for greater efficiency

43
00:01:18,560 --> 00:01:20,080
but it also came with some important

44
00:01:20,080 --> 00:01:22,479
limitations as all containers in a host

45
00:01:22,479 --> 00:01:23,759
share the same kernel

46
00:01:23,759 --> 00:01:25,520
containers offer weaker isolation

47
00:01:25,520 --> 00:01:27,360
guarantees than virtual machines

48
00:01:27,360 --> 00:01:30,159
also software developers still need to

49
00:01:30,159 --> 00:01:31,920
configure and manage the containers

50
00:01:31,920 --> 00:01:34,000
themselves

51
00:01:34,000 --> 00:01:35,600
in addition to this a common limitation

52
00:01:35,600 --> 00:01:37,040
of the previous approaches is that they

53
00:01:37,040 --> 00:01:38,560
rely on a static

54
00:01:38,560 --> 00:01:40,960
billing model where users pay a monthly

55
00:01:40,960 --> 00:01:42,079
fixed amount

56
00:01:42,079 --> 00:01:43,680
regardless of the number of resources

57
00:01:43,680 --> 00:01:46,079
they consume

58
00:01:46,079 --> 00:01:48,320
serverless allows us to overcome these

59
00:01:48,320 --> 00:01:49,439
limitations

60
00:01:49,439 --> 00:01:51,920
first it allows software developers to

61
00:01:51,920 --> 00:01:53,280
outsource all operational

62
00:01:53,280 --> 00:01:56,240
infrastructure tasks to cloud providers

63
00:01:56,240 --> 00:01:57,840
allowing software developers to focus

64
00:01:57,840 --> 00:01:59,200
only on writing

65
00:01:59,200 --> 00:02:01,360
the code for their applications

66
00:02:01,360 --> 00:02:02,320
serverless

67
00:02:02,320 --> 00:02:04,399
proposes to the couple storage from

68
00:02:04,399 --> 00:02:05,680
computation

69
00:02:05,680 --> 00:02:07,600
the application logic is divided into a

70
00:02:07,600 --> 00:02:09,520
set of short-lived stateless

71
00:02:09,520 --> 00:02:11,038
functions each running inside an

72
00:02:11,038 --> 00:02:13,520
execution environment storage

73
00:02:13,520 --> 00:02:16,560
is provided by cloud services such as

74
00:02:16,560 --> 00:02:20,000
s3 or dynamodb

75
00:02:20,000 --> 00:02:22,560
in serverless scaling of applications is

76
00:02:22,560 --> 00:02:23,599
managed directly

77
00:02:23,599 --> 00:02:25,840
by cloud providers meaning that software

78
00:02:25,840 --> 00:02:27,520
developers don't need to worry about

79
00:02:27,520 --> 00:02:28,959
when and how the application

80
00:02:28,959 --> 00:02:31,760
needs to be scaled up or down unlike

81
00:02:31,760 --> 00:02:33,120
previous approaches

82
00:02:33,120 --> 00:02:36,160
serverless offers a pure pay-per-use

83
00:02:36,160 --> 00:02:36,720
model

84
00:02:36,720 --> 00:02:38,720
where users pay only for the resources

85
00:02:38,720 --> 00:02:39,840
they consume

86
00:02:39,840 --> 00:02:41,920
cloud providers such as amazon microsoft

87
00:02:41,920 --> 00:02:44,000
and google are already offering service

88
00:02:44,000 --> 00:02:44,959
less

89
00:02:44,959 --> 00:02:47,599
computing services to their customers

90
00:02:47,599 --> 00:02:48,640
meanwhile

91
00:02:48,640 --> 00:02:50,319
several open source serverless platforms

92
00:02:50,319 --> 00:02:51,920
have also been developed over the last

93
00:02:51,920 --> 00:02:52,959
few years

94
00:02:52,959 --> 00:02:55,360
before going into the details of

95
00:02:55,360 --> 00:02:57,040
serverless security

96
00:02:57,040 --> 00:02:58,560
let me briefly explain how serverless

97
00:02:58,560 --> 00:03:00,959
platforms work functions are the main

98
00:03:00,959 --> 00:03:02,640
element in circle computing

99
00:03:02,640 --> 00:03:05,599
they run inside a fresh isolated

100
00:03:05,599 --> 00:03:06,879
execution environment such as a

101
00:03:06,879 --> 00:03:07,840
container

102
00:03:07,840 --> 00:03:09,440
and are typically executed in response

103
00:03:09,440 --> 00:03:11,840
to several types of events

104
00:03:11,840 --> 00:03:14,800
such as a web request another important

105
00:03:14,800 --> 00:03:16,640
component in serverless platforms

106
00:03:16,640 --> 00:03:19,920
are api gateways which expose

107
00:03:19,920 --> 00:03:21,920
rest endpoints to customers and act as a

108
00:03:21,920 --> 00:03:25,360
bridge between users and functions

109
00:03:25,360 --> 00:03:27,440
if a function is triggered many times

110
00:03:27,440 --> 00:03:29,200
the cloud provider can opt for creating

111
00:03:29,200 --> 00:03:31,040
new instances of the same function

112
00:03:31,040 --> 00:03:32,799
in other execution environments and

113
00:03:32,799 --> 00:03:35,120
redirecting some requests to them

114
00:03:35,120 --> 00:03:36,480
functions typically communicate with

115
00:03:36,480 --> 00:03:39,120
other functions and also with

116
00:03:39,120 --> 00:03:42,640
other cloud services so for example for

117
00:03:42,640 --> 00:03:47,360
for achieving for storage purposes

118
00:03:47,360 --> 00:03:49,760
and all this communication is done via

119
00:03:49,760 --> 00:03:51,680
standard apis

120
00:03:51,680 --> 00:03:53,760
in addition to this serverless platforms

121
00:03:53,760 --> 00:03:55,200
include a set of control plane

122
00:03:55,200 --> 00:03:56,480
functionalities

123
00:03:56,480 --> 00:03:58,400
for example one could be an

124
00:03:58,400 --> 00:04:00,159
authentication server

125
00:04:00,159 --> 00:04:02,080
that authenticates incoming requests

126
00:04:02,080 --> 00:04:04,159
before passing them to the corresponding

127
00:04:04,159 --> 00:04:07,760
functions another one could be

128
00:04:07,760 --> 00:04:09,519
the so-called identity and access

129
00:04:09,519 --> 00:04:10,959
management component

130
00:04:10,959 --> 00:04:14,159
which is responsible for specifying

131
00:04:14,159 --> 00:04:17,199
the functions and cloud services that

132
00:04:17,199 --> 00:04:18,160
each function can

133
00:04:18,160 --> 00:04:21,759
can access another well-known component

134
00:04:21,759 --> 00:04:23,520
is the so-called virtual private

135
00:04:23,520 --> 00:04:25,520
component which

136
00:04:25,520 --> 00:04:28,080
basically allows to create virtual

137
00:04:28,080 --> 00:04:29,440
networks

138
00:04:29,440 --> 00:04:31,520
with all the functions that belong to

139
00:04:31,520 --> 00:04:32,720
the same application

140
00:04:32,720 --> 00:04:34,560
so that all the functions that belong to

141
00:04:34,560 --> 00:04:36,000
this application can communicate with

142
00:04:36,000 --> 00:04:37,120
each other

143
00:04:37,120 --> 00:04:39,520
while preventing others from from doing

144
00:04:39,520 --> 00:04:41,440
from doing this

145
00:04:41,440 --> 00:04:43,759
in practice the serverless ecosystem is

146
00:04:43,759 --> 00:04:45,280
much more complex than that

147
00:04:45,280 --> 00:04:46,960
the figure shown in the slide is a

148
00:04:46,960 --> 00:04:48,320
simple example illustrating

149
00:04:48,320 --> 00:04:50,240
a real state website using serverless

150
00:04:50,240 --> 00:04:51,600
functions

151
00:04:51,600 --> 00:04:53,520
note that server developers can choose

152
00:04:53,520 --> 00:04:56,080
to write the functions themselves

153
00:04:56,080 --> 00:04:58,080
use functions from third parties or use

154
00:04:58,080 --> 00:04:59,919
preparative functions for which they pay

155
00:04:59,919 --> 00:05:02,639
licensing fees also note that only a

156
00:05:02,639 --> 00:05:04,560
subset of functions can communicate with

157
00:05:04,560 --> 00:05:06,400
the outside world

158
00:05:06,400 --> 00:05:08,240
let's now try to understand what the

159
00:05:08,240 --> 00:05:10,560
threat model of serverless

160
00:05:10,560 --> 00:05:12,639
in any serverless platform adversaries

161
00:05:12,639 --> 00:05:14,400
can try to steal sensitive information

162
00:05:14,400 --> 00:05:15,360
such as

163
00:05:15,360 --> 00:05:17,360
cryptographic keys or the application

164
00:05:17,360 --> 00:05:19,199
logic they can try to

165
00:05:19,199 --> 00:05:21,199
exfiltrate data control the function's

166
00:05:21,199 --> 00:05:22,320
execution flow

167
00:05:22,320 --> 00:05:24,080
disrupt other applications run

168
00:05:24,080 --> 00:05:26,000
applications without being charged

169
00:05:26,000 --> 00:05:27,360
or even worse associate their

170
00:05:27,360 --> 00:05:29,919
application cost to other users

171
00:05:29,919 --> 00:05:31,600
these attacks can be performed by

172
00:05:31,600 --> 00:05:34,720
external and internal adversaries

173
00:05:34,720 --> 00:05:38,479
that is malicious external users that

174
00:05:38,479 --> 00:05:40,080
leverage any of the existing external

175
00:05:40,080 --> 00:05:42,240
apis malicious

176
00:05:42,240 --> 00:05:44,240
functions or compromise functions that

177
00:05:44,240 --> 00:05:46,080
try to bypass specified security

178
00:05:46,080 --> 00:05:47,440
policies

179
00:05:47,440 --> 00:05:50,639
or even the cloud provider

180
00:05:50,639 --> 00:05:52,080
we think that it's important to model

181
00:05:52,080 --> 00:05:53,919
cloud providers as honest but curious

182
00:05:53,919 --> 00:05:54,880
entities

183
00:05:54,880 --> 00:05:56,080
since they can potentially learn

184
00:05:56,080 --> 00:05:57,919
sensitive information about users

185
00:05:57,919 --> 00:06:00,800
while running their applications with

186
00:06:00,800 --> 00:06:02,479
the increase in diversity of attacks

187
00:06:02,479 --> 00:06:03,600
against the cloud

188
00:06:03,600 --> 00:06:05,199
security and privacy are a key factor

189
00:06:05,199 --> 00:06:06,720
for the widespread adoption

190
00:06:06,720 --> 00:06:08,720
of surveillance computing at first

191
00:06:08,720 --> 00:06:10,400
glance one could argue that serverless

192
00:06:10,400 --> 00:06:11,759
computing is intrinsically more secure

193
00:06:11,759 --> 00:06:13,120
than its predecessors

194
00:06:13,120 --> 00:06:14,800
however in practice serverless improves

195
00:06:14,800 --> 00:06:16,720
some security aspects but also makes

196
00:06:16,720 --> 00:06:19,840
some other matters worse let's first

197
00:06:19,840 --> 00:06:20,880
talk about the

198
00:06:20,880 --> 00:06:23,919
positive ones for example

199
00:06:23,919 --> 00:06:26,240
the fact that functions are short-lived

200
00:06:26,240 --> 00:06:27,440
makes it more difficult for the

201
00:06:27,440 --> 00:06:30,080
nurses to find ways to persist in their

202
00:06:30,080 --> 00:06:30,960
attacks

203
00:06:30,960 --> 00:06:32,400
the bad news is that adversaries have

204
00:06:32,400 --> 00:06:34,000
already proven to be capable of

205
00:06:34,000 --> 00:06:36,080
bypassing these to mounted attacks

206
00:06:36,080 --> 00:06:38,800
but despite this it is positive for

207
00:06:38,800 --> 00:06:40,160
security that functions

208
00:06:40,160 --> 00:06:43,120
run for such a short period of time with

209
00:06:43,120 --> 00:06:43,840
serverless

210
00:06:43,840 --> 00:06:46,319
security is a shared responsibility

211
00:06:46,319 --> 00:06:47,440
software developers are still

212
00:06:47,440 --> 00:06:48,720
responsible for application level

213
00:06:48,720 --> 00:06:49,680
security

214
00:06:49,680 --> 00:06:51,680
but the rest of the security tasks are

215
00:06:51,680 --> 00:06:54,160
now carried out by cloud providers

216
00:06:54,160 --> 00:06:55,919
this is expected to eliminate the number

217
00:06:55,919 --> 00:06:57,280
of attacks against serverless

218
00:06:57,280 --> 00:06:58,880
applications

219
00:06:58,880 --> 00:07:00,479
due to the flexibility and elasticity

220
00:07:00,479 --> 00:07:02,639
serverless provides it is now also

221
00:07:02,639 --> 00:07:04,319
possible to mitigate denial of service

222
00:07:04,319 --> 00:07:06,240
attacks that aim to overload the server

223
00:07:06,240 --> 00:07:08,240
where the application runs

224
00:07:08,240 --> 00:07:10,479
despite these advantages we can argue

225
00:07:10,479 --> 00:07:11,840
that serverless increases the attack

226
00:07:11,840 --> 00:07:12,560
surface

227
00:07:12,560 --> 00:07:14,000
and introduces unique trade-offs and

228
00:07:14,000 --> 00:07:15,599
design choices that can negatively

229
00:07:15,599 --> 00:07:17,280
impact security

230
00:07:17,280 --> 00:07:18,960
in the next slides i will go more in

231
00:07:18,960 --> 00:07:20,560
depth on those

232
00:07:20,560 --> 00:07:23,520
negative aspects

233
00:07:24,240 --> 00:07:25,520
there are three main reasons why the

234
00:07:25,520 --> 00:07:27,360
attack surface of serverless is larger

235
00:07:27,360 --> 00:07:28,880
than in previous approaches

236
00:07:28,880 --> 00:07:32,319
first functions are even event driven

237
00:07:32,319 --> 00:07:33,680
which means that they can be triggered

238
00:07:33,680 --> 00:07:35,360
by many types of internal

239
00:07:35,360 --> 00:07:37,919
and external event sources with multiple

240
00:07:37,919 --> 00:07:39,440
formats and encodings

241
00:07:39,440 --> 00:07:41,280
this clearly opens the door for

242
00:07:41,280 --> 00:07:42,479
aggressors to perform

243
00:07:42,479 --> 00:07:45,440
many attacks as functions are stateless

244
00:07:45,440 --> 00:07:46,720
and are intended to perform a single

245
00:07:46,720 --> 00:07:47,360
task

246
00:07:47,360 --> 00:07:48,800
they are required to constantly interact

247
00:07:48,800 --> 00:07:50,400
with other functions and cloud services

248
00:07:50,400 --> 00:07:52,800
to realize more complex functionalities

249
00:07:52,800 --> 00:07:54,639
however the definition and enforcement

250
00:07:54,639 --> 00:07:56,800
of security policies that specify how

251
00:07:56,800 --> 00:07:58,800
functions interact with each other

252
00:07:58,800 --> 00:08:01,840
and with which cloud

253
00:08:01,840 --> 00:08:05,520
services functions can interact with

254
00:08:05,520 --> 00:08:07,280
in such dynamic environments is very

255
00:08:07,280 --> 00:08:08,879
challenging

256
00:08:08,879 --> 00:08:10,879
finally serverless platforms include

257
00:08:10,879 --> 00:08:12,240
several new components and cloud

258
00:08:12,240 --> 00:08:13,120
services

259
00:08:13,120 --> 00:08:16,720
many of which are shared across users

260
00:08:16,720 --> 00:08:19,599
these may lead to new forms of cover and

261
00:08:19,599 --> 00:08:21,759
side channels that can result in attacks

262
00:08:21,759 --> 00:08:24,639
aimed to retrieve sensitive data or

263
00:08:24,639 --> 00:08:26,160
allow malicious functions to communicate

264
00:08:26,160 --> 00:08:27,360
with each other without the cloud

265
00:08:27,360 --> 00:08:30,400
provider noticing it

266
00:08:32,240 --> 00:08:34,719
ideally cloud providers would like to

267
00:08:34,719 --> 00:08:36,559
develop serverless platforms that jolly

268
00:08:36,559 --> 00:08:37,599
maximize

269
00:08:37,599 --> 00:08:39,360
security and performance in their

270
00:08:39,360 --> 00:08:41,519
infrastructures and their customers

271
00:08:41,519 --> 00:08:43,919
applications while keeping their cost as

272
00:08:43,919 --> 00:08:45,120
low as possible

273
00:08:45,120 --> 00:08:47,040
in practice however experience has shown

274
00:08:47,040 --> 00:08:48,640
that cloud providers often sacrifice

275
00:08:48,640 --> 00:08:49,519
some security

276
00:08:49,519 --> 00:08:51,279
to be able to accommodate more users and

277
00:08:51,279 --> 00:08:53,279
to provide greater performance to their

278
00:08:53,279 --> 00:08:54,240
users

279
00:08:54,240 --> 00:08:56,880
applications one clear example is on the

280
00:08:56,880 --> 00:08:58,880
selection of the sandboxing mechanisms

281
00:08:58,880 --> 00:09:00,240
as we explained before

282
00:09:00,240 --> 00:09:02,399
with the example of the bm and the

283
00:09:02,399 --> 00:09:03,519
container

284
00:09:03,519 --> 00:09:05,200
another example is on whether to use

285
00:09:05,200 --> 00:09:07,360
cold or warm containers

286
00:09:07,360 --> 00:09:09,200
called containers refer to containers

287
00:09:09,200 --> 00:09:10,800
that are used only once

288
00:09:10,800 --> 00:09:12,560
the problem with cold containers is that

289
00:09:12,560 --> 00:09:14,160
their booting time is often similar to

290
00:09:14,160 --> 00:09:15,279
the time it takes to execute the

291
00:09:15,279 --> 00:09:16,880
function itself

292
00:09:16,880 --> 00:09:18,399
therefore the latency introduced when

293
00:09:18,399 --> 00:09:20,959
booting can significantly affect the

294
00:09:20,959 --> 00:09:22,080
function's performance

295
00:09:22,080 --> 00:09:24,399
in addition to this cloud providers

296
00:09:24,399 --> 00:09:25,440
don't build

297
00:09:25,440 --> 00:09:27,920
users based on the booting time of their

298
00:09:27,920 --> 00:09:28,560
functions

299
00:09:28,560 --> 00:09:31,600
so of course they want to minimize it as

300
00:09:31,600 --> 00:09:32,880
much as possible

301
00:09:32,880 --> 00:09:35,680
to solve this problem cloud providers

302
00:09:35,680 --> 00:09:36,080
have

303
00:09:36,080 --> 00:09:38,480
started to use so-called worm containers

304
00:09:38,480 --> 00:09:39,600
one containers are

305
00:09:39,600 --> 00:09:41,279
normal containers that are reused to run

306
00:09:41,279 --> 00:09:43,760
several instances of the same function

307
00:09:43,760 --> 00:09:46,480
they provide much lower startup times

308
00:09:46,480 --> 00:09:47,920
but at the same time they also introduce

309
00:09:47,920 --> 00:09:49,839
some security risk as advantages could

310
00:09:49,839 --> 00:09:50,640
mount

311
00:09:50,640 --> 00:09:54,560
cross-invocation attacks another

312
00:09:54,560 --> 00:09:58,160
example has to do with the process of

313
00:09:58,160 --> 00:10:00,720
assigning functions to the host

314
00:10:00,720 --> 00:10:02,399
this can be done using deterministic of

315
00:10:02,399 --> 00:10:04,800
randomized scheduling algorithms

316
00:10:04,800 --> 00:10:06,320
while deterministic scheduling

317
00:10:06,320 --> 00:10:07,839
algorithms can lead to a more optimal

318
00:10:07,839 --> 00:10:09,440
use of resources and less communication

319
00:10:09,440 --> 00:10:11,279
overhead

320
00:10:11,279 --> 00:10:13,040
randomized algorithms can offer stronger

321
00:10:13,040 --> 00:10:14,320
protection

322
00:10:14,320 --> 00:10:16,240
against attacks that exploit residency

323
00:10:16,240 --> 00:10:19,120
with the victim all these examples

324
00:10:19,120 --> 00:10:20,480
show that there is a need to achieve a

325
00:10:20,480 --> 00:10:21,760
good balance between security and

326
00:10:21,760 --> 00:10:24,240
performance

327
00:10:27,519 --> 00:10:29,760
one of the main advantages of serverless

328
00:10:29,760 --> 00:10:32,160
is that cloud providers are now only

329
00:10:32,160 --> 00:10:33,760
responsible for conducting

330
00:10:33,760 --> 00:10:35,920
all operational infrastructure tasks

331
00:10:35,920 --> 00:10:37,600
including those aim to protect their

332
00:10:37,600 --> 00:10:39,120
infrastructures and the workloads

333
00:10:39,120 --> 00:10:40,079
running on them

334
00:10:40,079 --> 00:10:43,040
from internal and external threats at

335
00:10:43,040 --> 00:10:43,760
first

336
00:10:43,760 --> 00:10:45,200
this is expected to reduce the number of

337
00:10:45,200 --> 00:10:46,959
attacks against severus platforms

338
00:10:46,959 --> 00:10:48,720
yet this can also lead software

339
00:10:48,720 --> 00:10:50,240
developers to ignore security in their

340
00:10:50,240 --> 00:10:52,079
applications and to make realistic

341
00:10:52,079 --> 00:10:54,399
unrealistic assumptions about the

342
00:10:54,399 --> 00:10:56,399
security measures in place

343
00:10:56,399 --> 00:10:58,839
this could create a false sense of

344
00:10:58,839 --> 00:11:00,000
security

345
00:11:00,000 --> 00:11:02,000
to make things worse cloud providers

346
00:11:02,000 --> 00:11:03,040
typically keep all

347
00:11:03,040 --> 00:11:04,800
or most information about their backups

348
00:11:04,800 --> 00:11:06,800
confidential this makes it difficult to

349
00:11:06,800 --> 00:11:08,399
scrutinize the security and privacy of

350
00:11:08,399 --> 00:11:11,120
such platforms

351
00:11:12,560 --> 00:11:14,240
some of the infrastructure aspects cloud

352
00:11:14,240 --> 00:11:16,560
providers tend to keep

353
00:11:16,560 --> 00:11:20,240
confidential includes how functions

354
00:11:20,240 --> 00:11:23,600
instances are placed in host how

355
00:11:23,600 --> 00:11:25,839
the resources are assigned and managed

356
00:11:25,839 --> 00:11:29,200
or how isolation is achieved

357
00:11:29,200 --> 00:11:32,640
among others all of them have in common

358
00:11:32,640 --> 00:11:34,160
that they can impact the security and

359
00:11:34,160 --> 00:11:37,279
privacy serverless platforms provide

360
00:11:37,279 --> 00:11:40,399
in recent times researchers have devoted

361
00:11:40,399 --> 00:11:42,000
significant efforts into understanding

362
00:11:42,000 --> 00:11:44,320
and documenting the way

363
00:11:44,320 --> 00:11:46,720
serverless platforms of the main cloud

364
00:11:46,720 --> 00:11:49,440
providers operate

365
00:11:49,440 --> 00:11:52,079
their studies showed that despite cloud

366
00:11:52,079 --> 00:11:53,120
providers

367
00:11:53,120 --> 00:11:55,360
share the same goals there are important

368
00:11:55,360 --> 00:11:56,800
differences in the way they implemented

369
00:11:56,800 --> 00:12:00,079
their serverless infrastructures

370
00:12:00,560 --> 00:12:02,800
let's now talk about the main attacks

371
00:12:02,800 --> 00:12:04,480
against

372
00:12:04,480 --> 00:12:07,440
serverless we have identified three

373
00:12:07,440 --> 00:12:09,200
three main classes

374
00:12:09,200 --> 00:12:11,839
one of them is

375
00:12:12,240 --> 00:12:13,760
related to their application level

376
00:12:13,760 --> 00:12:16,079
attacks the other one is more specific

377
00:12:16,079 --> 00:12:16,480
to

378
00:12:16,480 --> 00:12:20,480
to serverless and the last one

379
00:12:20,560 --> 00:12:22,839
is about hardware attacks such as

380
00:12:22,839 --> 00:12:24,079
microarchitectural

381
00:12:24,079 --> 00:12:26,480
type of attacks like meltdown or raw

382
00:12:26,480 --> 00:12:27,920
hammer type of attacks

383
00:12:27,920 --> 00:12:29,600
due to the time constraints i will not

384
00:12:29,600 --> 00:12:31,200
cover hardware attacks in this

385
00:12:31,200 --> 00:12:34,560
in this talk o wasp

386
00:12:34,560 --> 00:12:37,279
has recently released a report

387
00:12:37,279 --> 00:12:38,880
explaining the top 10 security threats

388
00:12:38,880 --> 00:12:40,240
for surveillance allocations

389
00:12:40,240 --> 00:12:43,680
you can see them on the on the slide you

390
00:12:43,680 --> 00:12:46,720
you're probably thinking that all these

391
00:12:46,720 --> 00:12:48,800
type of threats are well understood by

392
00:12:48,800 --> 00:12:50,000
industry and academia

393
00:12:50,000 --> 00:12:52,000
but unfortunately software developers

394
00:12:52,000 --> 00:12:53,440
keep designing applications with this

395
00:12:53,440 --> 00:12:54,000
kind of

396
00:12:54,000 --> 00:12:57,680
vulnerabilities some of the

397
00:12:57,680 --> 00:13:00,399
most well-known ones such as for example

398
00:13:00,399 --> 00:13:01,040
injection

399
00:13:01,040 --> 00:13:03,680
attacks due to some data not being

400
00:13:03,680 --> 00:13:05,440
properly stabilized

401
00:13:05,440 --> 00:13:08,079
can allow bursaries to fully control

402
00:13:08,079 --> 00:13:10,160
functions

403
00:13:10,160 --> 00:13:12,399
other types of attacks for example are

404
00:13:12,399 --> 00:13:13,360
caused by

405
00:13:13,360 --> 00:13:14,959
software developers giving too many

406
00:13:14,959 --> 00:13:16,880
permissions to a function

407
00:13:16,880 --> 00:13:21,200
another classical type of type of threat

408
00:13:21,200 --> 00:13:24,880
is the one is the one caused by

409
00:13:24,880 --> 00:13:26,480
using third-party components with

410
00:13:26,480 --> 00:13:29,440
non-vulnerabilities

411
00:13:30,079 --> 00:13:32,560
to mitigate the previous issues it is

412
00:13:32,560 --> 00:13:34,480
recommended to treat every function as a

413
00:13:34,480 --> 00:13:35,600
separate

414
00:13:35,600 --> 00:13:38,639
security perimeter it's also

415
00:13:38,639 --> 00:13:41,519
recommended that software developers

416
00:13:41,519 --> 00:13:42,320
follow

417
00:13:42,320 --> 00:13:45,680
standard secure coding best practices

418
00:13:45,680 --> 00:13:49,120
so for example they should not trust the

419
00:13:49,120 --> 00:13:51,440
inputs that are received in each

420
00:13:51,440 --> 00:13:53,600
function

421
00:13:53,600 --> 00:13:57,199
additionally software developers

422
00:13:57,199 --> 00:14:00,240
should also follow the principle of

423
00:14:00,240 --> 00:14:02,560
least privilege because

424
00:14:02,560 --> 00:14:05,440
functions will eventually be compromised

425
00:14:05,440 --> 00:14:06,320
and once

426
00:14:06,320 --> 00:14:08,639
a function is compromised the goal

427
00:14:08,639 --> 00:14:10,000
should be is to

428
00:14:10,000 --> 00:14:13,040
to reduce the the amount of damage that

429
00:14:13,040 --> 00:14:15,199
the bursary can do

430
00:14:15,199 --> 00:14:17,199
and finally to prevent this kind of

431
00:14:17,199 --> 00:14:19,040
attacks it's also it's very important

432
00:14:19,040 --> 00:14:21,519
to secure data both at rest and in

433
00:14:21,519 --> 00:14:22,800
transit

434
00:14:22,800 --> 00:14:26,079
to secure data address one can use cloud

435
00:14:26,079 --> 00:14:27,360
services

436
00:14:27,360 --> 00:14:29,680
and to secure data in transit for

437
00:14:29,680 --> 00:14:30,800
example one can use

438
00:14:30,800 --> 00:14:33,120
strong cryptographic protocols such as

439
00:14:33,120 --> 00:14:35,600
tls

440
00:14:36,160 --> 00:14:39,519
let's now go a little bit more in depth

441
00:14:39,519 --> 00:14:43,120
on the surface specific type of attacks

442
00:14:43,120 --> 00:14:46,959
one of them is the the one so-called

443
00:14:46,959 --> 00:14:49,360
resource exhaustion attacks the goal of

444
00:14:49,360 --> 00:14:50,639
this kind of attack is to

445
00:14:50,639 --> 00:14:53,279
over utilize the resources of the victim

446
00:14:53,279 --> 00:14:54,079
to either

447
00:14:54,079 --> 00:14:57,199
disrupt the service or to impose

448
00:14:57,199 --> 00:15:00,560
excessive financial loads to the victim

449
00:15:00,560 --> 00:15:02,560
so basically to perform so-called denial

450
00:15:02,560 --> 00:15:05,120
of wallet attacks

451
00:15:05,120 --> 00:15:08,000
in such a complex and dynamic type of

452
00:15:08,000 --> 00:15:08,880
system

453
00:15:08,880 --> 00:15:10,959
adversaries can also try to leverage

454
00:15:10,959 --> 00:15:12,639
inconsistencies in functions and cloud

455
00:15:12,639 --> 00:15:13,920
services

456
00:15:13,920 --> 00:15:17,040
this remains unexplored so far but i

457
00:15:17,040 --> 00:15:18,320
think it's an interesting

458
00:15:18,320 --> 00:15:21,519
avenue for for research

459
00:15:21,519 --> 00:15:23,199
site channel attacks are also very

460
00:15:23,199 --> 00:15:25,360
important in serverless platforms

461
00:15:25,360 --> 00:15:27,760
they can come with different flavors

462
00:15:27,760 --> 00:15:28,959
there are different

463
00:15:28,959 --> 00:15:31,600
ways these kind of attacks can be can be

464
00:15:31,600 --> 00:15:32,639
achieved

465
00:15:32,639 --> 00:15:35,199
one of them is based on for example the

466
00:15:35,199 --> 00:15:37,759
access patterns or timing information

467
00:15:37,759 --> 00:15:39,680
then i also envision that there will be

468
00:15:39,680 --> 00:15:41,680
some inter container and

469
00:15:41,680 --> 00:15:45,199
intra host type of said channel so

470
00:15:45,199 --> 00:15:48,240
i expect that there will be some

471
00:15:48,240 --> 00:15:50,000
new attacks coming in this space in the

472
00:15:50,000 --> 00:15:51,519
next in the next

473
00:15:51,519 --> 00:15:55,519
years and last but not least

474
00:15:55,519 --> 00:15:57,040
there is also the possibility for

475
00:15:57,040 --> 00:15:58,959
adversaries to exploit

476
00:15:58,959 --> 00:16:02,160
the disks the disk space

477
00:16:02,160 --> 00:16:05,759
in the temp directory this is used to to

478
00:16:05,759 --> 00:16:08,320
keep state that is used

479
00:16:08,320 --> 00:16:10,160
across different instances of the same

480
00:16:10,160 --> 00:16:12,720
function that run on the same

481
00:16:12,720 --> 00:16:16,079
on the same container

482
00:16:18,320 --> 00:16:21,199
as the future work i think it's

483
00:16:21,199 --> 00:16:22,639
interesting to

484
00:16:22,639 --> 00:16:24,720
explore all the all the attacks that i

485
00:16:24,720 --> 00:16:26,240
explained before in the in the previous

486
00:16:26,240 --> 00:16:27,199
slide

487
00:16:27,199 --> 00:16:31,040
in in depth i also think that it's very

488
00:16:31,040 --> 00:16:31,839
important to

489
00:16:31,839 --> 00:16:34,240
better understand the cloud provider

490
00:16:34,240 --> 00:16:35,920
back ends so for example investigate the

491
00:16:35,920 --> 00:16:38,639
security of new execution environments

492
00:16:38,639 --> 00:16:43,199
such as amazon's solution called

493
00:16:43,199 --> 00:16:46,320
firecracker and i also think that

494
00:16:46,320 --> 00:16:48,560
it's very important to mitigate all

495
00:16:48,560 --> 00:16:51,518
sites and tags

496
00:16:52,560 --> 00:16:54,639
to conclude my presentation i would like

497
00:16:54,639 --> 00:16:55,920
to to say that

498
00:16:55,920 --> 00:16:59,440
this is a very challenging and a very

499
00:16:59,440 --> 00:17:02,880
active uh research area clearly i mean i

500
00:17:02,880 --> 00:17:04,079
hope that uh

501
00:17:04,079 --> 00:17:05,439
with this presentation i convince you

502
00:17:05,439 --> 00:17:07,760
that there are some very unique security

503
00:17:07,760 --> 00:17:10,000
and privacy threats and challenges

504
00:17:10,000 --> 00:17:13,039
that will probably come with new attacks

505
00:17:13,039 --> 00:17:14,160
and

506
00:17:14,160 --> 00:17:18,559
hopefully better defenses for the future

507
00:17:18,559 --> 00:17:21,039
so i hope that you're convinced that

508
00:17:21,039 --> 00:17:22,240
serverless

509
00:17:22,240 --> 00:17:24,480
is the is the way to go and that

510
00:17:24,480 --> 00:17:25,919
security and privacy

511
00:17:25,919 --> 00:17:28,720
should be considered by design and it

512
00:17:28,720 --> 00:17:30,480
should be considered now that serverless

513
00:17:30,480 --> 00:17:33,679
is started to be to be adopted

514
00:17:33,679 --> 00:17:36,400
finally i want to refer to you to uh to

515
00:17:36,400 --> 00:17:37,520
a paper

516
00:17:37,520 --> 00:17:41,280
on serverless security that explores

517
00:17:41,280 --> 00:17:43,760
uh in more depth all the of the

518
00:17:43,760 --> 00:17:45,360
different aspects that i've been

519
00:17:45,360 --> 00:17:47,280
discussing in this presentation you can

520
00:17:47,280 --> 00:17:50,000
find it in my personal website

521
00:17:50,000 --> 00:17:53,520
and i also want to to mention that we're

522
00:17:53,520 --> 00:17:54,799
organizing a workshop

523
00:17:54,799 --> 00:17:57,600
on serverless for mobile networks you

524
00:17:57,600 --> 00:18:00,160
can also see the website there

525
00:18:00,160 --> 00:18:02,720
and that's all from my site if you have

526
00:18:02,720 --> 00:18:03,840
any questions i'll be

527
00:18:03,840 --> 00:18:08,240
very happy to take them thank you

