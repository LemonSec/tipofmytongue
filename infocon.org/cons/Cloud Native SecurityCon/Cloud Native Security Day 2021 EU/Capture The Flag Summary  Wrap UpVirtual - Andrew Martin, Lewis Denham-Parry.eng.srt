1
00:00:00,000 --> 00:00:01,599
hey andy i think it's time for us to

2
00:00:01,599 --> 00:00:04,879
start doing this wrap-up talk

3
00:00:05,920 --> 00:00:09,679
fabulous and wonderful well

4
00:00:09,679 --> 00:00:12,000
welcome to the cloud native security day

5
00:00:12,000 --> 00:00:12,799
ctf

6
00:00:12,799 --> 00:00:15,679
outro uh oh he says outro and this is

7
00:00:15,679 --> 00:00:17,520
the recap

8
00:00:17,520 --> 00:00:21,600
let's go to bear instead there we are

9
00:00:21,600 --> 00:00:24,560
welcome to the recap we will do a post

10
00:00:24,560 --> 00:00:24,960
cap

11
00:00:24,960 --> 00:00:27,920
recap decap uh walk through what we did

12
00:00:27,920 --> 00:00:28,880
today

13
00:00:28,880 --> 00:00:31,519
and go under the hood to explain some of

14
00:00:31,519 --> 00:00:32,880
the attacks

15
00:00:32,880 --> 00:00:35,920
peace indeed is never an option for a

16
00:00:35,920 --> 00:00:37,280
naughty goose

17
00:00:37,280 --> 00:00:40,320
and today we were off

18
00:00:40,320 --> 00:00:44,719
hunting clusters in the wild

19
00:00:44,719 --> 00:00:46,879
but actually it was not the public

20
00:00:46,879 --> 00:00:48,239
internet we were using

21
00:00:48,239 --> 00:00:52,559
it was uh far more whoops a lazy

22
00:00:52,559 --> 00:00:56,399
a far more constrained environment

23
00:00:56,399 --> 00:01:00,160
whereby we stood everything up in order

24
00:01:00,160 --> 00:01:02,319
to

25
00:01:02,399 --> 00:01:05,040
practice and learn in a safe place so

26
00:01:05,040 --> 00:01:07,600
every cluster had a bastion host

27
00:01:07,600 --> 00:01:10,320
and every cluster was inaccessible from

28
00:01:10,320 --> 00:01:11,040
the public

29
00:01:11,040 --> 00:01:14,880
internet so what were we trying to do

30
00:01:14,880 --> 00:01:17,200
we were trying to avoid this kind of

31
00:01:17,200 --> 00:01:19,360
thing

32
00:01:19,360 --> 00:01:21,280
but you know a little bit of frustration

33
00:01:21,280 --> 00:01:23,680
is a helpful learning tool

34
00:01:23,680 --> 00:01:27,840
but by having a taskmaster available

35
00:01:27,840 --> 00:01:31,119
and hopefully responsive enough we uh

36
00:01:31,119 --> 00:01:33,759
we look to assuage some of those

37
00:01:33,759 --> 00:01:35,920
concerns

38
00:01:35,920 --> 00:01:39,280
so let's have a look

39
00:01:39,280 --> 00:01:42,960
at the spoilers we do not have very long

40
00:01:42,960 --> 00:01:45,600
to get through all of these so we're

41
00:01:45,600 --> 00:01:47,439
going to try and do them as quickly as

42
00:01:47,439 --> 00:01:49,919
possible

43
00:01:50,479 --> 00:01:54,399
and do a pwn bipon demo of

44
00:01:54,399 --> 00:01:57,040
uh well as you say everything that we

45
00:01:57,040 --> 00:01:58,159
were doing

46
00:01:58,159 --> 00:02:03,680
so we will start off

47
00:02:05,439 --> 00:02:08,800
he says sorry

48
00:02:08,800 --> 00:02:10,399
yeah so i think we're going to start off

49
00:02:10,399 --> 00:02:12,560
with scenario 3 which is avalanche so

50
00:02:12,560 --> 00:02:14,480
earlier on today we had

51
00:02:14,480 --> 00:02:17,599
uh two separate twitch streams um in a

52
00:02:17,599 --> 00:02:18,879
first twitch stream we went through

53
00:02:18,879 --> 00:02:20,160
scenario one

54
00:02:20,160 --> 00:02:21,520
and they'll be available for you to

55
00:02:21,520 --> 00:02:23,840
review and then also in the afternoon

56
00:02:23,840 --> 00:02:24,800
twitch stream

57
00:02:24,800 --> 00:02:27,040
we went through scenario five so without

58
00:02:27,040 --> 00:02:28,879
further ado i'll pass back to

59
00:02:28,879 --> 00:02:31,360
mr andrew martin to uh show us a way

60
00:02:31,360 --> 00:02:32,000
through the

61
00:02:32,000 --> 00:02:35,840
uh scenario free which was called avalon

62
00:02:35,840 --> 00:02:38,080
thank you very much so with the purpose

63
00:02:38,080 --> 00:02:39,760
of this

64
00:02:39,760 --> 00:02:43,120
excuse me the purpose of this is

65
00:02:43,120 --> 00:02:47,200
uh we trust within our private networks

66
00:02:47,200 --> 00:02:50,080
um our own container registers hold code

67
00:02:50,080 --> 00:02:52,640
that we believe is safe to use

68
00:02:52,640 --> 00:02:53,840
so we've deployed an image from our

69
00:02:53,840 --> 00:02:56,720
private registry but the pirates captain

70
00:02:56,720 --> 00:02:58,640
hash jack and the nefarious crew have

71
00:02:58,640 --> 00:03:00,080
taken the registry down

72
00:03:00,080 --> 00:03:03,920
so we can no longer get images from it

73
00:03:03,920 --> 00:03:05,120
but there's a secret

74
00:03:05,120 --> 00:03:07,120
in one of those deployed images so let's

75
00:03:07,120 --> 00:03:09,200
have a look for the secret key

76
00:03:09,200 --> 00:03:11,360
to uh unlock the plug in the bottom of

77
00:03:11,360 --> 00:03:13,120
the captain's prize ship

78
00:03:13,120 --> 00:03:16,000
and hopefully scuttle it so we're in the

79
00:03:16,000 --> 00:03:17,280
hash jackpot

80
00:03:17,280 --> 00:03:20,800
in the avalon namespace well what does

81
00:03:20,800 --> 00:03:21,440
that mean

82
00:03:21,440 --> 00:03:24,720
as usual let's just see what the

83
00:03:24,720 --> 00:03:27,760
mount points look like let's check df

84
00:03:27,760 --> 00:03:31,360
and see okay the

85
00:03:31,360 --> 00:03:33,599
initial dual in any kubernetes

86
00:03:33,599 --> 00:03:36,560
escalation is the service count

87
00:03:36,560 --> 00:03:38,720
so let's see what we've got available so

88
00:03:38,720 --> 00:03:40,239
we have queue control installed

89
00:03:40,239 --> 00:03:41,440
so we're probably in a container that

90
00:03:41,440 --> 00:03:44,480
was used internally by administrators to

91
00:03:44,480 --> 00:03:46,400
do something useful

92
00:03:46,400 --> 00:03:48,560
and we will try and use for something

93
00:03:48,560 --> 00:03:51,519
that's less than useful

94
00:03:51,519 --> 00:03:53,920
so let's see what access we've got well

95
00:03:53,920 --> 00:03:56,080
we can hit the api server

96
00:03:56,080 --> 00:03:58,159
we can see in the m that we've got

97
00:03:58,159 --> 00:03:59,760
routing to these things

98
00:03:59,760 --> 00:04:02,799
it is the bitnami cubecontrol app thank

99
00:04:02,799 --> 00:04:04,480
you very much bitnami

100
00:04:04,480 --> 00:04:06,080
that probably means it's relatively well

101
00:04:06,080 --> 00:04:08,159
configured from a file system

102
00:04:08,159 --> 00:04:09,280
perspective

103
00:04:09,280 --> 00:04:11,040
what does that mean it means that we're

104
00:04:11,040 --> 00:04:12,959
uid 1001

105
00:04:12,959 --> 00:04:16,320
but group id zero does that uh

106
00:04:16,320 --> 00:04:18,880
does that show us anything well actually

107
00:04:18,880 --> 00:04:20,000
there is no

108
00:04:20,000 --> 00:04:23,040
you at 1001 so that means that our file

109
00:04:23,040 --> 00:04:25,199
system access is going to be difficult

110
00:04:25,199 --> 00:04:27,600
it's also why we see i have no name

111
00:04:27,600 --> 00:04:28,240
because

112
00:04:28,240 --> 00:04:30,000
our username is pulled from etsy

113
00:04:30,000 --> 00:04:32,400
password and we have no reconciliation

114
00:04:32,400 --> 00:04:34,479
because we have no

115
00:04:34,479 --> 00:04:37,919
entry no line in there

116
00:04:37,919 --> 00:04:40,720
okay so we do have cube control and this

117
00:04:40,720 --> 00:04:42,400
is probably a bad day for cluster

118
00:04:42,400 --> 00:04:43,680
administrators

119
00:04:43,680 --> 00:04:47,040
what pods do we have okay so we can see

120
00:04:47,040 --> 00:04:48,639
already that we've

121
00:04:48,639 --> 00:04:52,400
got uh three private earpods

122
00:04:52,400 --> 00:04:53,759
and if we try and do this across all

123
00:04:53,759 --> 00:04:55,840
name

124
00:04:55,840 --> 00:04:58,880
excuse me that's not quite how you spell

125
00:04:58,880 --> 00:05:00,960
spaces

126
00:05:00,960 --> 00:05:02,720
then we can see here so we have a we

127
00:05:02,720 --> 00:05:05,039
have a forbidden

128
00:05:05,039 --> 00:05:09,120
and the api server has leaked our

129
00:05:09,120 --> 00:05:13,600
um service count name and

130
00:05:13,600 --> 00:05:16,560
the namespace back to us so we can't

131
00:05:16,560 --> 00:05:18,479
list pods across all namespaces

132
00:05:18,479 --> 00:05:22,080
fine but we do have access to our own

133
00:05:22,080 --> 00:05:24,560
local namespace so what do we know about

134
00:05:24,560 --> 00:05:26,560
the scenario well just going back to the

135
00:05:26,560 --> 00:05:28,639
beginning

136
00:05:28,639 --> 00:05:30,479
we can see there's a secret in one of

137
00:05:30,479 --> 00:05:32,800
the deployed images

138
00:05:32,800 --> 00:05:36,479
so we've got access to these pods

139
00:05:36,479 --> 00:05:38,000
how do we find out what images they're

140
00:05:38,000 --> 00:05:40,320
running we

141
00:05:40,320 --> 00:05:43,199
examine them as yellow and we grep for

142
00:05:43,199 --> 00:05:43,600
the

143
00:05:43,600 --> 00:05:46,880
image tag or the image

144
00:05:46,880 --> 00:05:50,320
key there we go

145
00:05:50,320 --> 00:05:53,600
so that looks pretty hopeful

146
00:05:53,600 --> 00:05:55,919
this container image is probably the one

147
00:05:55,919 --> 00:05:57,919
that we want

148
00:05:57,919 --> 00:06:00,240
so let's just see if we can exact

149
00:06:00,240 --> 00:06:02,000
straight in

150
00:06:02,000 --> 00:06:05,440
control exec interactive session

151
00:06:05,440 --> 00:06:08,400
attached to sudo terminal let's go into

152
00:06:08,400 --> 00:06:09,600
privateer

153
00:06:09,600 --> 00:06:11,680
oh we don't have a completion which

154
00:06:11,680 --> 00:06:13,440
we'll fix

155
00:06:13,440 --> 00:06:16,639
and let's run sh okay so we

156
00:06:16,639 --> 00:06:20,240
do not have pods exec that's not very

157
00:06:20,240 --> 00:06:21,600
helpful when we want to read the

158
00:06:21,600 --> 00:06:22,560
contents of the

159
00:06:22,560 --> 00:06:25,440
image that the pod is running from but

160
00:06:25,440 --> 00:06:27,039
we can do something slightly different

161
00:06:27,039 --> 00:06:28,400
which is

162
00:06:28,400 --> 00:06:31,919
run the thing instead

163
00:06:31,919 --> 00:06:35,840
and then see if that works

164
00:06:36,800 --> 00:06:38,800
okay so we've managed to do something

165
00:06:38,800 --> 00:06:40,800
and in fact i've called pod sh which is

166
00:06:40,800 --> 00:06:41,759
never a good look

167
00:06:41,759 --> 00:06:45,360
let's call it test random

168
00:06:47,280 --> 00:06:49,919
okay so we're able to run but we're not

169
00:06:49,919 --> 00:06:51,680
able to attach to the pod

170
00:06:51,680 --> 00:06:55,039
that's not very useful uh let's just

171
00:06:55,039 --> 00:06:55,919
have a look again

172
00:06:55,919 --> 00:06:58,560
and see what pods we have so here's the

173
00:06:58,560 --> 00:07:00,080
erroneously named and here's the

174
00:07:00,080 --> 00:07:02,880
recently named

175
00:07:02,880 --> 00:07:06,000
so what can we do here well we're

176
00:07:06,000 --> 00:07:07,599
looking for something in the file system

177
00:07:07,599 --> 00:07:08,960
of a pod

178
00:07:08,960 --> 00:07:11,360
of an image rather we can't get that

179
00:07:11,360 --> 00:07:12,160
image

180
00:07:12,160 --> 00:07:14,080
because it's from a private registry so

181
00:07:14,080 --> 00:07:15,360
the only thing we can do here is to

182
00:07:15,360 --> 00:07:16,319
execute something

183
00:07:16,319 --> 00:07:19,840
inside the pod that will reveal unto us

184
00:07:19,840 --> 00:07:24,800
the actual flag on the file system so

185
00:07:24,800 --> 00:07:27,039
um

186
00:07:28,240 --> 00:07:32,560
let us say pods is going to be called

187
00:07:32,560 --> 00:07:35,440
uh test and we'll give it a random name

188
00:07:35,440 --> 00:07:37,360
so that we can we can use the bash built

189
00:07:37,360 --> 00:07:39,280
in random variable

190
00:07:39,280 --> 00:07:42,840
so that we get excuse me so that we get

191
00:07:42,840 --> 00:07:46,560
a different name every time

192
00:07:46,560 --> 00:07:48,800
then that's our pod name and then the

193
00:07:48,800 --> 00:07:50,240
command we want to run

194
00:07:50,240 --> 00:07:53,599
is probably uh bash

195
00:07:53,599 --> 00:07:56,800
and then let's just get our id and then

196
00:07:56,800 --> 00:07:57,599
once we've done

197
00:07:57,599 --> 00:07:59,360
that give it a few seconds for the pod

198
00:07:59,360 --> 00:08:02,319
to start at the cube control logs

199
00:08:02,319 --> 00:08:06,720
on the pod just see what happens

200
00:08:07,599 --> 00:08:13,840
so three seconds pod starting hopefully

201
00:08:14,720 --> 00:08:18,000
pod apparently not starting

202
00:08:18,000 --> 00:08:21,360
i don't know if i need those in there

203
00:08:25,440 --> 00:08:26,960
okay maybe we'll try a slightly

204
00:08:26,960 --> 00:08:29,360
different approach to this

205
00:08:29,360 --> 00:08:32,639
why would that not work

206
00:08:33,279 --> 00:08:36,799
so andy the way that i did this earlier

207
00:08:36,799 --> 00:08:37,760
was just

208
00:08:37,760 --> 00:08:41,120
to uh in the sleeper command during it

209
00:08:41,120 --> 00:08:42,880
is just to write out those logs as

210
00:08:42,880 --> 00:08:44,720
you've done but then keep call logs

211
00:08:44,720 --> 00:08:47,279
on the pod and then write it to a dump

212
00:08:47,279 --> 00:08:48,880
so temp dump

213
00:08:48,880 --> 00:08:50,560
and then to cut it out from there that's

214
00:08:50,560 --> 00:08:52,160
how i

215
00:08:52,160 --> 00:08:55,920
that's a good idea so let's just

216
00:08:55,920 --> 00:08:57,600
so we've named the pod something the

217
00:08:57,600 --> 00:08:59,279
other thing we can do here while we're

218
00:08:59,279 --> 00:08:59,519
at

219
00:08:59,519 --> 00:09:01,519
it is just to turn debug mode on and

220
00:09:01,519 --> 00:09:03,279
bash to make sure that the command is as

221
00:09:03,279 --> 00:09:05,839
i think it is

222
00:09:05,839 --> 00:09:09,519
okay well mystically that worked

223
00:09:09,519 --> 00:09:12,880
so let's just do uh

224
00:09:12,880 --> 00:09:15,920
shell command id make sure that we have

225
00:09:15,920 --> 00:09:18,319
something

226
00:09:20,839 --> 00:09:23,839
um

227
00:09:28,000 --> 00:09:29,760
okay we may have to come back to this

228
00:09:29,760 --> 00:09:31,200
one because i would expect

229
00:09:31,200 --> 00:09:35,200
this to reveal something to us at least

230
00:09:35,200 --> 00:09:36,480
looks like we're just hanging with the

231
00:09:36,480 --> 00:09:39,040
invocation

232
00:09:41,920 --> 00:09:44,720
live demos hey joy joy of live demos

233
00:09:44,720 --> 00:09:45,519
yeah

234
00:09:45,519 --> 00:09:48,839
we spin up over well i've forgotten the

235
00:09:48,839 --> 00:09:51,839
numbers

236
00:09:56,000 --> 00:09:58,000
okay so it was because i tried to attach

237
00:09:58,000 --> 00:09:59,519
terminal to it

238
00:09:59,519 --> 00:10:02,880
so let's get back to where we were

239
00:10:02,880 --> 00:10:06,000
uh command id and then we'll pull the

240
00:10:06,000 --> 00:10:08,399
logs

241
00:10:10,160 --> 00:10:12,880
as so

242
00:10:14,640 --> 00:10:15,920
okay but we do need to leave a few

243
00:10:15,920 --> 00:10:18,720
seconds for the pod to actually start

244
00:10:18,720 --> 00:10:21,040
this is a kind of blind injection attack

245
00:10:21,040 --> 00:10:22,079
against the pod

246
00:10:22,079 --> 00:10:24,399
there we go so now we can execute

247
00:10:24,399 --> 00:10:27,200
commands within this one shot container

248
00:10:27,200 --> 00:10:29,600
in the interests of the time that i've

249
00:10:29,600 --> 00:10:32,079
wasted that you will never get back uh

250
00:10:32,079 --> 00:10:33,920
let's grab for the flag with my

251
00:10:33,920 --> 00:10:35,120
favorites

252
00:10:35,120 --> 00:10:39,040
one liner which looks a bit like this

253
00:10:39,040 --> 00:10:40,959
so we're going to find something now we

254
00:10:40,959 --> 00:10:42,320
happen to know

255
00:10:42,320 --> 00:10:43,680
that it's in the temp directory to save

256
00:10:43,680 --> 00:10:45,680
us a little bit of time

257
00:10:45,680 --> 00:10:48,959
and that hopefully should now dump out

258
00:10:48,959 --> 00:10:52,480
a flag if i'm being sensible

259
00:10:52,480 --> 00:10:54,160
and as as people have pointed out before

260
00:10:54,160 --> 00:10:57,600
we don't have to use find here

261
00:10:57,839 --> 00:11:00,800
we do have to oh no that's not correct

262
00:11:00,800 --> 00:11:03,839
sorry we do want to search this

263
00:11:03,839 --> 00:11:05,279
we could just grep from the root of the

264
00:11:05,279 --> 00:11:07,200
file system

265
00:11:07,200 --> 00:11:10,560
um okay finally use a share never going

266
00:11:10,560 --> 00:11:11,519
to make you

267
00:11:11,519 --> 00:11:14,720
this smells of lewis denim paris cluster

268
00:11:14,720 --> 00:11:15,920
perturbering

269
00:11:15,920 --> 00:11:18,160
uh but there is our flag finally hidden

270
00:11:18,160 --> 00:11:20,959
in some nefarious local coil system

271
00:11:20,959 --> 00:11:22,160
and we've pulled that from inside the

272
00:11:22,160 --> 00:11:24,320
container now that puts us

273
00:11:24,320 --> 00:11:26,160
slightly behind time so let's see how

274
00:11:26,160 --> 00:11:27,760
quickly we can get through the next so

275
00:11:27,760 --> 00:11:30,160
whilst do you get that next one set up

276
00:11:30,160 --> 00:11:31,120
yes um

277
00:11:31,120 --> 00:11:33,680
value to my calling card to rick roll

278
00:11:33,680 --> 00:11:35,279
whenever i get into a cluster or these

279
00:11:35,279 --> 00:11:36,480
scenarios

280
00:11:36,480 --> 00:11:38,959
um again we're tight on time today so

281
00:11:38,959 --> 00:11:40,240
we're going to see if we can get

282
00:11:40,240 --> 00:11:43,440
to the second but andy whenever you're

283
00:11:43,440 --> 00:11:44,720
ready to go give me a shout

284
00:11:44,720 --> 00:11:46,720
and for i think we're going to go on to

285
00:11:46,720 --> 00:11:49,120
scenario four now

286
00:11:49,120 --> 00:11:50,399
what is the name of that scenario when

287
00:11:50,399 --> 00:11:52,240
it's home one second it is

288
00:11:52,240 --> 00:11:57,839
escalates okay there we go

289
00:12:04,480 --> 00:12:06,160
okay so what are we doing here the

290
00:12:06,160 --> 00:12:07,920
supply chain is compromised

291
00:12:07,920 --> 00:12:09,760
who would have thought such a thing

292
00:12:09,760 --> 00:12:11,680
hashtag and the motley crew have managed

293
00:12:11,680 --> 00:12:12,160
to get

294
00:12:12,160 --> 00:12:15,279
code merged into the application library

295
00:12:15,279 --> 00:12:17,519
that developers use the lobby runs in a

296
00:12:17,519 --> 00:12:19,120
pod and attackers

297
00:12:19,120 --> 00:12:21,519
have then escalated trying to find

298
00:12:21,519 --> 00:12:24,079
secrets on the host

299
00:12:24,079 --> 00:12:27,040
so what do we know here well we know

300
00:12:27,040 --> 00:12:28,480
that we

301
00:12:28,480 --> 00:12:32,240
have uh we have two

302
00:12:32,240 --> 00:12:33,680
unknown containers from the starting

303
00:12:33,680 --> 00:12:36,320
point in the process audit pod

304
00:12:36,320 --> 00:12:38,399
so again we'll just do standards just

305
00:12:38,399 --> 00:12:40,800
see what's uh what exists here

306
00:12:40,800 --> 00:12:43,920
we have we have a service account we

307
00:12:43,920 --> 00:12:45,200
don't have cube control

308
00:12:45,200 --> 00:12:48,000
uh we could install it but let's look at

309
00:12:48,000 --> 00:12:52,079
some other things first

310
00:12:52,079 --> 00:12:55,839
the process table is interesting

311
00:12:55,839 --> 00:12:58,800
so we can see here that we've got sleep

312
00:12:58,800 --> 00:13:01,680
infinity twice

313
00:13:01,680 --> 00:13:03,920
the reason for this is that there are

314
00:13:03,920 --> 00:13:06,160
two containers in this pod

315
00:13:06,160 --> 00:13:08,639
and for some reason the containers can

316
00:13:08,639 --> 00:13:10,000
see each other's init

317
00:13:10,000 --> 00:13:13,200
process that is generally a

318
00:13:13,200 --> 00:13:16,480
bad day because once we share process

319
00:13:16,480 --> 00:13:17,360
namespaces

320
00:13:17,360 --> 00:13:20,480
we share proc and proc

321
00:13:20,480 --> 00:13:23,200
gives us access to all the good stuff so

322
00:13:23,200 --> 00:13:25,200
we can now see for example

323
00:13:25,200 --> 00:13:29,120
uh how that process was invoked

324
00:13:29,120 --> 00:13:32,079
uh and actually we need to do some uh

325
00:13:32,079 --> 00:13:33,040
some null bytes

326
00:13:33,040 --> 00:13:34,800
fixing so it's visible so we've got

327
00:13:34,800 --> 00:13:36,240
sleep infinity in there so we know that

328
00:13:36,240 --> 00:13:37,200
it's

329
00:13:37,200 --> 00:13:39,839
process 11 here's 11. we've got the

330
00:13:39,839 --> 00:13:41,440
right one

331
00:13:41,440 --> 00:13:43,120
okay so what else could we look for in

332
00:13:43,120 --> 00:13:45,199
here well we have access to the entire

333
00:13:45,199 --> 00:13:46,639
root file system

334
00:13:46,639 --> 00:13:49,839
of that process

335
00:13:49,839 --> 00:13:52,800
uh which of course is is a joy for um

336
00:13:52,800 --> 00:13:55,519
all to behold

337
00:13:55,519 --> 00:13:59,360
let's just go back and do an ls

338
00:14:00,000 --> 00:14:01,680
okay so there's some stuff in there but

339
00:14:01,680 --> 00:14:02,959
that's not actually what we're looking

340
00:14:02,959 --> 00:14:03,920
for

341
00:14:03,920 --> 00:14:08,320
um got some stuff in temp

342
00:14:08,320 --> 00:14:12,000
but what are we looking for here well

343
00:14:12,000 --> 00:14:17,120
actually in this case we are looking for

344
00:14:17,120 --> 00:14:19,360
perhaps something in the environment so

345
00:14:19,360 --> 00:14:21,360
again we're looking in the environment

346
00:14:21,360 --> 00:14:24,560
of the other container in the pod there

347
00:14:24,560 --> 00:14:25,279
are two

348
00:14:25,279 --> 00:14:28,399
containers in this pod and this one is

349
00:14:28,399 --> 00:14:29,120
giving us

350
00:14:29,120 --> 00:14:32,160
some useful information perhaps again

351
00:14:32,160 --> 00:14:35,839
things are not bite delimited

352
00:14:35,839 --> 00:14:38,959
and their joyful joys is something that

353
00:14:38,959 --> 00:14:39,360
looks

354
00:14:39,360 --> 00:14:43,600
suspiciously like a flag happy days

355
00:14:43,600 --> 00:14:48,000
there we go um on to uh on to the next

356
00:14:48,000 --> 00:14:49,920
in the last five minutes i'm sure we can

357
00:14:49,920 --> 00:14:52,000
hear it so whilst you get set up for

358
00:14:52,000 --> 00:14:52,399
that

359
00:14:52,399 --> 00:14:54,240
some honorable mentions to today so we

360
00:14:54,240 --> 00:14:55,920
had chris stuffed um

361
00:14:55,920 --> 00:14:59,920
well d um noel mahey

362
00:14:59,920 --> 00:15:03,040
uh we had you val all just

363
00:15:03,040 --> 00:15:05,519
smashing through the scenarios uh thank

364
00:15:05,519 --> 00:15:07,199
you to wallet as well who is

365
00:15:07,199 --> 00:15:09,120
i feel is the community support officer

366
00:15:09,120 --> 00:15:11,120
so thank you ever so much

367
00:15:11,120 --> 00:15:13,040
for the channel uh lena thank you for

368
00:15:13,040 --> 00:15:14,800
being the most eager person to request a

369
00:15:14,800 --> 00:15:15,680
cluster 20 min

370
00:15:15,680 --> 00:15:17,519
20 hours before the event starts but

371
00:15:17,519 --> 00:15:18,959
it's totally awesome

372
00:15:18,959 --> 00:15:22,000
and a safe as well but at this point

373
00:15:22,000 --> 00:15:25,839
and you've got four minutes to do a hack

374
00:15:25,839 --> 00:15:26,720
uh excellent

375
00:15:26,720 --> 00:15:28,560
okay so the cluster is almost about to

376
00:15:28,560 --> 00:15:29,839
die as well because it's an

377
00:15:29,839 --> 00:15:32,560
old one so what are we going to do well

378
00:15:32,560 --> 00:15:33,519
um

379
00:15:33,519 --> 00:15:35,360
the environment doesn't give us much

380
00:15:35,360 --> 00:15:37,120
cube control

381
00:15:37,120 --> 00:15:40,720
has no local routing okay so in this

382
00:15:40,720 --> 00:15:41,120
case

383
00:15:41,120 --> 00:15:43,360
again i'd like to check the mount points

384
00:15:43,360 --> 00:15:44,720
this is not something that we would

385
00:15:44,720 --> 00:15:45,519
expect to see

386
00:15:45,519 --> 00:15:48,160
so let's unmount whatever is bind mount

387
00:15:48,160 --> 00:15:48,800
is

388
00:15:48,800 --> 00:15:52,000
over root.cube have a look there's still

389
00:15:52,000 --> 00:15:53,040
nothing there

390
00:15:53,040 --> 00:15:54,880
why might that be because there are two

391
00:15:54,880 --> 00:15:56,079
bind mounts

392
00:15:56,079 --> 00:15:57,759
okay and then let's just double check

393
00:15:57,759 --> 00:15:59,680
that the mounts are actually gone

394
00:15:59,680 --> 00:16:01,600
yeah there's nothing there anymore bind

395
00:16:01,600 --> 00:16:03,040
mounts are just a way of hiding things

396
00:16:03,040 --> 00:16:04,800
on a file system you can hide processes

397
00:16:04,800 --> 00:16:05,680
as well

398
00:16:05,680 --> 00:16:07,880
but in this case we were hiding

399
00:16:07,880 --> 00:16:09,600
root.cube

400
00:16:09,600 --> 00:16:12,639
and now we've got cubecontrol access

401
00:16:12,639 --> 00:16:14,240
and there we go we can route to the

402
00:16:14,240 --> 00:16:17,519
master the api server

403
00:16:17,519 --> 00:16:20,399
so what is the point of this exercise i

404
00:16:20,399 --> 00:16:22,720
hear you ask

405
00:16:22,720 --> 00:16:26,399
what's the point of this exercise andy

406
00:16:27,279 --> 00:16:30,720
it is to find where hashtag has hidden

407
00:16:30,720 --> 00:16:32,639
his ill-gotten treasure in a

408
00:16:32,639 --> 00:16:33,759
hard-to-find

409
00:16:33,759 --> 00:16:36,880
place okay so first of all

410
00:16:36,880 --> 00:16:40,399
we probably want to uh get onto the

411
00:16:40,399 --> 00:16:41,920
master but we don't know how we can do

412
00:16:41,920 --> 00:16:42,320
that

413
00:16:42,320 --> 00:16:44,720
easily let's see if we can get any

414
00:16:44,720 --> 00:16:46,720
secrets

415
00:16:46,720 --> 00:16:49,959
um irredeemable villainy and

416
00:16:49,959 --> 00:16:52,720
pseudo-reminiscent uh are both potential

417
00:16:52,720 --> 00:16:53,839
candidates

418
00:16:53,839 --> 00:16:56,160
but of course if we have access to all

419
00:16:56,160 --> 00:16:56,880
name spaces

420
00:16:56,880 --> 00:16:59,519
let's just take that one down two down

421
00:16:59,519 --> 00:16:59,920
uh

422
00:16:59,920 --> 00:17:02,839
we can see there's a fair bit more in

423
00:17:02,839 --> 00:17:04,480
here

424
00:17:04,480 --> 00:17:06,240
so noticeably some of these controller

425
00:17:06,240 --> 00:17:07,760
tokens are masquerading

426
00:17:07,760 --> 00:17:09,919
so that suggests that it's a service

427
00:17:09,919 --> 00:17:11,599
account token but it's not that is

428
00:17:11,599 --> 00:17:12,319
created by

429
00:17:12,319 --> 00:17:14,400
a human in the same way these default

430
00:17:14,400 --> 00:17:16,319
tokens

431
00:17:16,319 --> 00:17:19,679
that's not how it should be so

432
00:17:19,679 --> 00:17:24,799
um subcompensatory super averageness

433
00:17:24,799 --> 00:17:26,720
let's see if we can figure out which of

434
00:17:26,720 --> 00:17:27,919
these uh

435
00:17:27,919 --> 00:17:31,120
actually holds

436
00:17:31,600 --> 00:17:34,640
the uh the token so what are we going to

437
00:17:34,640 --> 00:17:35,360
do

438
00:17:35,360 --> 00:17:38,960
let's uh let's get a secret

439
00:17:38,960 --> 00:17:41,280
and i will be honest lewis i i'm not

440
00:17:41,280 --> 00:17:42,480
actually sure which is what so

441
00:17:42,480 --> 00:17:45,679
if you um so what i did andy when you

442
00:17:45,679 --> 00:17:46,000
dropped

443
00:17:46,000 --> 00:17:48,559
this one on me was to go all name spaces

444
00:17:48,559 --> 00:17:50,240
get secrets hyphen

445
00:17:50,240 --> 00:17:53,600
o yaml life

446
00:17:53,600 --> 00:17:55,120
and then just grab from that because it

447
00:17:55,120 --> 00:17:57,039
will give you everything so grab

448
00:17:57,039 --> 00:18:00,640
um ssh i think yeah

449
00:18:00,640 --> 00:18:02,720
and there we go is something that looks

450
00:18:02,720 --> 00:18:04,320
like a private key

451
00:18:04,320 --> 00:18:07,600
here's one that we made earlier

452
00:18:09,120 --> 00:18:10,559
there we go so we've now got a private

453
00:18:10,559 --> 00:18:12,240
key let's stick that

454
00:18:12,240 --> 00:18:16,880
into ssh id i suppose

455
00:18:16,880 --> 00:18:19,280
and

456
00:18:21,520 --> 00:18:24,799
so maybe if we did an

457
00:18:24,799 --> 00:18:26,559
nmap andy we would have found a certain

458
00:18:26,559 --> 00:18:28,559
port open but again to save you from

459
00:18:28,559 --> 00:18:31,600
doing it if you curled the master ip

460
00:18:31,600 --> 00:18:35,039
um and port 5678

461
00:18:35,039 --> 00:18:37,679
so if you've got the master ip node uh

462
00:18:37,679 --> 00:18:39,200
if you have a master ip

463
00:18:39,200 --> 00:18:40,640
from doing cube called get notice i have

464
00:18:40,640 --> 00:18:42,640
no wide and

465
00:18:42,640 --> 00:18:44,000
oh there you go you've already done that

466
00:18:44,000 --> 00:18:46,559
so unfair so okay very nice information

467
00:18:46,559 --> 00:18:48,320
thank you very much so it's a message

468
00:18:48,320 --> 00:18:50,320
from our archetypal

469
00:18:50,320 --> 00:18:53,520
arch adversary follow the 22 white

470
00:18:53,520 --> 00:18:54,640
rabbits

471
00:18:54,640 --> 00:18:57,039
so had we done this beforehand we may

472
00:18:57,039 --> 00:18:57,919
have then

473
00:18:57,919 --> 00:19:00,080
thought about trying to find ssh keys

474
00:19:00,080 --> 00:19:01,679
which at this point we have done

475
00:19:01,679 --> 00:19:04,000
anachronously but so we now have access

476
00:19:04,000 --> 00:19:06,080
to this uh we also know

477
00:19:06,080 --> 00:19:09,360
from running keep control version

478
00:19:09,360 --> 00:19:12,000
what the master appears of course we can

479
00:19:12,000 --> 00:19:13,520
get that from our local cube config as

480
00:19:13,520 --> 00:19:14,320
well

481
00:19:14,320 --> 00:19:17,039
which is probably that much easier there

482
00:19:17,039 --> 00:19:18,320
we go

483
00:19:18,320 --> 00:19:21,679
so let's follow

484
00:19:21,679 --> 00:19:25,919
the captain onto the master node whoops

485
00:19:25,919 --> 00:19:28,080
and you've got about a minute as well to

486
00:19:28,080 --> 00:19:29,120
pull this up so i'm

487
00:19:29,120 --> 00:19:30,799
going forward okay yes so that's

488
00:19:30,799 --> 00:19:32,080
permission denied but that is because

489
00:19:32,080 --> 00:19:34,960
we're not using the right key

490
00:19:34,960 --> 00:19:38,559
there's the shid and we do a classic

491
00:19:38,559 --> 00:19:39,440
trick

492
00:19:39,440 --> 00:19:42,480
of not setting our permissions okay off

493
00:19:42,480 --> 00:19:43,600
we go we're onto the master

494
00:19:43,600 --> 00:19:45,200
so at this point what am i actually

495
00:19:45,200 --> 00:19:47,120
doing here um we need

496
00:19:47,120 --> 00:19:50,000
to we need to inspect we need to find

497
00:19:50,000 --> 00:19:51,520
that there's an image on there control

498
00:19:51,520 --> 00:19:52,480
plane i o

499
00:19:52,480 --> 00:19:56,160
valiant effort and we want to inspect

500
00:19:56,160 --> 00:19:57,280
that image

501
00:19:57,280 --> 00:20:00,880
and we want to find uh where the diff is

502
00:20:00,880 --> 00:20:04,080
so um nice and then

503
00:20:04,080 --> 00:20:05,520
but we want to gain access to that diff

504
00:20:05,520 --> 00:20:07,760
but to be able to do so um we don't have

505
00:20:07,760 --> 00:20:09,760
pseudo access on this so if we remember

506
00:20:09,760 --> 00:20:11,440
back to the first scenario of today we

507
00:20:11,440 --> 00:20:12,000
showed you

508
00:20:12,000 --> 00:20:13,760
how to get privileged access if you run

509
00:20:13,760 --> 00:20:15,039
a privileged container so

510
00:20:15,039 --> 00:20:17,679
let's if we could just loop back to

511
00:20:17,679 --> 00:20:19,200
trying to do a docker run to run a

512
00:20:19,200 --> 00:20:20,159
private uh

513
00:20:20,159 --> 00:20:23,440
i can't say it a privileged container on

514
00:20:23,440 --> 00:20:26,720
on our kubernetes master which would

515
00:20:26,720 --> 00:20:27,600
then allow us

516
00:20:27,600 --> 00:20:30,400
to mount the dev xv da1 mount the same

517
00:20:30,400 --> 00:20:33,200
thing that we did in scenario one today

518
00:20:33,200 --> 00:20:35,600
which then allows us to traverse to the

519
00:20:35,600 --> 00:20:36,400
file system

520
00:20:36,400 --> 00:20:40,960
that the docker image is within and

521
00:20:43,840 --> 00:20:47,120
speed running it really is so it first

522
00:20:47,120 --> 00:20:49,440
says this far live docker location is on

523
00:20:49,440 --> 00:20:50,559
the hosts

524
00:20:50,559 --> 00:20:53,600
um uh it's on the host file system which

525
00:20:53,600 --> 00:20:54,320
we're on

526
00:20:54,320 --> 00:20:56,240
but it's owned by root so that means

527
00:20:56,240 --> 00:20:57,520
that we have to escalate

528
00:20:57,520 --> 00:20:59,280
we can do that through a container or we

529
00:20:59,280 --> 00:21:02,320
can just mount the file system as we're

530
00:21:02,320 --> 00:21:03,440
about to do

531
00:21:03,440 --> 00:21:05,600
here so we've mounted the so if we go

532
00:21:05,600 --> 00:21:07,360
into host

533
00:21:07,360 --> 00:21:08,960
there we go so now we should have access

534
00:21:08,960 --> 00:21:11,600
to this

535
00:21:15,039 --> 00:21:18,799
he says access

536
00:21:20,480 --> 00:21:23,440
oh yeah thanks

537
00:21:24,320 --> 00:21:27,280
okay yes it's the directory and then

538
00:21:27,280 --> 00:21:29,600
proc self command line is the only

539
00:21:29,600 --> 00:21:32,880
file hidden in the container image

540
00:21:32,880 --> 00:21:35,360
and therein lies the flag that was a

541
00:21:35,360 --> 00:21:36,559
speed run and a half

542
00:21:36,559 --> 00:21:38,080
there are a couple more that you can see

543
00:21:38,080 --> 00:21:40,400
that were on the live streams earlier

544
00:21:40,400 --> 00:21:42,640
and i hope that's been at least vaguely

545
00:21:42,640 --> 00:21:44,240
informative if not a little bit

546
00:21:44,240 --> 00:21:47,840
too fast to follow thank you

547
00:21:47,840 --> 00:21:50,320
that's a good question just to say for

548
00:21:50,320 --> 00:21:52,000
thank yous

549
00:21:52,000 --> 00:21:53,360
that's an excellent point and there are

550
00:21:53,360 --> 00:21:56,240
the thank yous yes indeed

551
00:21:56,240 --> 00:21:58,240
thank you to everybody who's uh helped

552
00:21:58,240 --> 00:21:59,760
putting everything together

553
00:21:59,760 --> 00:22:03,360
and also the organizers the work done to

554
00:22:03,360 --> 00:22:04,559
get today

555
00:22:04,559 --> 00:22:09,039
uh smooth and um speed bump free

556
00:22:09,039 --> 00:22:11,200
and uh and control plane folks who've

557
00:22:11,200 --> 00:22:13,120
been laboring on the back end

558
00:22:13,120 --> 00:22:16,799
past and present thanks to you all

559
00:22:16,799 --> 00:22:18,480
there is the the great passing of the

560
00:22:18,480 --> 00:22:20,080
seas

561
00:22:20,080 --> 00:22:23,840
uh some attendees enjoyed themselves

562
00:22:23,840 --> 00:22:25,520
and yes of course don't put kubernetes

563
00:22:25,520 --> 00:22:28,880
api servers on the public internet

564
00:22:28,880 --> 00:22:30,559
control plane does this for a living if

565
00:22:30,559 --> 00:22:32,480
you'd like us to run a ctf for you

566
00:22:32,480 --> 00:22:34,240
um or indeed you'd like to attend some

567
00:22:34,240 --> 00:22:35,840
of the sans training courses

568
00:22:35,840 --> 00:22:37,760
then uh please do reach out to the

569
00:22:37,760 --> 00:22:38,880
relevant channels

570
00:22:38,880 --> 00:22:40,559
and thank you very much for playing have

571
00:22:40,559 --> 00:22:43,760
a wonderful day

