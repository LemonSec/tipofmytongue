1
00:00:00,320 --> 00:00:04,319
hello welcome to my session today

2
00:00:04,319 --> 00:00:06,080
today we're going to be taking a look at

3
00:00:06,080 --> 00:00:07,919
securing the

4
00:00:07,919 --> 00:00:09,840
continuous integration and delivery

5
00:00:09,840 --> 00:00:12,240
infrastructure for the tinker bell

6
00:00:12,240 --> 00:00:15,519
project my name is david mckay

7
00:00:15,519 --> 00:00:17,600
and i am a senior developer advocate for

8
00:00:17,600 --> 00:00:19,199
equinix metal

9
00:00:19,199 --> 00:00:22,480
i am also a cncf ambassador

10
00:00:22,480 --> 00:00:24,960
and i do quite a lot of live streaming

11
00:00:24,960 --> 00:00:28,320
you can find my streams at rawcode.live

12
00:00:28,320 --> 00:00:30,720
my goal with streaming is to provide

13
00:00:30,720 --> 00:00:31,519
educational

14
00:00:31,519 --> 00:00:33,760
resources for all of us to learn the

15
00:00:33,760 --> 00:00:35,520
vast cloud native landscape

16
00:00:35,520 --> 00:00:37,920
together

17
00:00:38,559 --> 00:00:40,000
and today i want to introduce you to

18
00:00:40,000 --> 00:00:42,079
tinkerbell a bare metal provisioning

19
00:00:42,079 --> 00:00:42,559
system

20
00:00:42,559 --> 00:00:45,600
open sourced by equinix metal now a cncf

21
00:00:45,600 --> 00:00:47,440
sandbox project

22
00:00:47,440 --> 00:00:49,920
that aims to solve some challenges that

23
00:00:49,920 --> 00:00:51,840
have been difficult for a long time

24
00:00:51,840 --> 00:00:54,640
and that is commoditizing bare metal

25
00:00:54,640 --> 00:00:56,640
which is no easy task

26
00:00:56,640 --> 00:00:59,039
so before we dive right in let me just

27
00:00:59,039 --> 00:01:02,079
shrink myself down

28
00:01:05,600 --> 00:01:07,119
so tinkerbell isn't your run-of-the-mill

29
00:01:07,119 --> 00:01:08,880
project when we're working directly with

30
00:01:08,880 --> 00:01:10,560
the metal there are a lot of things that

31
00:01:10,560 --> 00:01:12,159
a little bit harder than working with

32
00:01:12,159 --> 00:01:13,680
virtual machines

33
00:01:13,680 --> 00:01:17,040
first tinkerbell has to run an n memory

34
00:01:17,040 --> 00:01:19,040
operating system

35
00:01:19,040 --> 00:01:21,439
that can handle partitioning disks

36
00:01:21,439 --> 00:01:22,159
encrypting

37
00:01:22,159 --> 00:01:24,400
disks writing and installing operating

38
00:01:24,400 --> 00:01:25,600
systems through container-based

39
00:01:25,600 --> 00:01:27,759
workflows

40
00:01:27,759 --> 00:01:30,880
there's multiple microservices that are

41
00:01:30,880 --> 00:01:32,079
responsible for

42
00:01:32,079 --> 00:01:33,600
understanding which bare metal devices

43
00:01:33,600 --> 00:01:35,119
are coming online through mac address

44
00:01:35,119 --> 00:01:36,479
identification

45
00:01:36,479 --> 00:01:38,320
there is ipexa for building the

46
00:01:38,320 --> 00:01:39,520
operating system

47
00:01:39,520 --> 00:01:41,360
and streaming the operating systems over

48
00:01:41,360 --> 00:01:43,119
the network and of course there's ip

49
00:01:43,119 --> 00:01:46,640
address management too in dhcp

50
00:01:46,640 --> 00:01:48,640
and while you can use traditional ci

51
00:01:48,640 --> 00:01:50,320
systems you're probably

52
00:01:50,320 --> 00:01:52,840
you definitely have to provide your own

53
00:01:52,840 --> 00:01:55,600
runners

54
00:01:55,600 --> 00:01:57,600
so in order to build out our continuous

55
00:01:57,600 --> 00:01:59,200
integration and delivery system for the

56
00:01:59,200 --> 00:02:00,399
tinkerbell project

57
00:02:00,399 --> 00:02:04,159
we need access to some metal personally

58
00:02:04,159 --> 00:02:06,000
i work for echo next metal and economics

59
00:02:06,000 --> 00:02:07,200
metal do donate

60
00:02:07,200 --> 00:02:08,800
a substantial amount of infrastructure

61
00:02:08,800 --> 00:02:10,560
and inventory to the cloud data

62
00:02:10,560 --> 00:02:11,280
foundation

63
00:02:11,280 --> 00:02:14,480
for projects like this

64
00:02:14,800 --> 00:02:18,080
my go-to tool for spinning up brand new

65
00:02:18,080 --> 00:02:20,160
machines on any cloud provider of choice

66
00:02:20,160 --> 00:02:21,760
is blooming

67
00:02:21,760 --> 00:02:23,520
and there are a few reasons i want to

68
00:02:23,520 --> 00:02:24,879
talk about polymer

69
00:02:24,879 --> 00:02:28,239
for this session one polymer very

70
00:02:28,239 --> 00:02:29,040
graciously

71
00:02:29,040 --> 00:02:31,280
gave us a free access to polymer cloud

72
00:02:31,280 --> 00:02:33,040
for the tinkerbell project

73
00:02:33,040 --> 00:02:34,239
this comes with a whole bunch of

74
00:02:34,239 --> 00:02:36,239
benefits from the security side

75
00:02:36,239 --> 00:02:38,239
it meant that we could commoditize

76
00:02:38,239 --> 00:02:41,120
access through their our back system

77
00:02:41,120 --> 00:02:42,640
it also meant we could take advantage of

78
00:02:42,640 --> 00:02:45,680
their secrets management as well

79
00:02:45,680 --> 00:02:47,680
something that bulumi does really well

80
00:02:47,680 --> 00:02:49,440
is allow us to really

81
00:02:49,440 --> 00:02:52,400
adhere and adopt get ops by having

82
00:02:52,400 --> 00:02:53,360
everything that we need

83
00:02:53,360 --> 00:02:55,519
including secrets and the repository and

84
00:02:55,519 --> 00:02:57,200
pushed

85
00:02:57,200 --> 00:02:59,360
they are of course encrypted using the

86
00:02:59,360 --> 00:03:00,640
polumi cloud

87
00:03:00,640 --> 00:03:04,000
back end however if you want to use

88
00:03:04,000 --> 00:03:05,440
pollumi and you want to stick to the

89
00:03:05,440 --> 00:03:06,959
open source you can

90
00:03:06,959 --> 00:03:11,760
use any cloud kms as a backend as well

91
00:03:11,920 --> 00:03:14,159
and this is our actual production stack

92
00:03:14,159 --> 00:03:16,480
file which is open source on github.com

93
00:03:16,480 --> 00:03:19,680
you can see we have aws credentials here

94
00:03:19,680 --> 00:03:21,120
and we also have our equinix metal

95
00:03:21,120 --> 00:03:23,680
credentials

96
00:03:26,319 --> 00:03:29,440
and next it's not we can't just spin up

97
00:03:29,440 --> 00:03:30,080
metal and

98
00:03:30,080 --> 00:03:31,440
magically does something right we have

99
00:03:31,440 --> 00:03:32,959
to go through some professioning stage

100
00:03:32,959 --> 00:03:34,959
so we need some software on the devices

101
00:03:34,959 --> 00:03:35,840
too

102
00:03:35,840 --> 00:03:38,000
my go to tool for this is solid stack

103
00:03:38,000 --> 00:03:40,480
again focusing on the security reasons

104
00:03:40,480 --> 00:03:42,720
of why i'm using the salt stack there's

105
00:03:42,720 --> 00:03:44,480
one there's no ssh

106
00:03:44,480 --> 00:03:46,640
as a transport protocol solstack uses

107
00:03:46,640 --> 00:03:48,720
0mq based messaging

108
00:03:48,720 --> 00:03:50,879
to pass messages which the minions are

109
00:03:50,879 --> 00:03:52,560
subscribing to from the master

110
00:03:52,560 --> 00:03:56,319
and executing those days

111
00:03:56,400 --> 00:03:58,799
salt also has a concept of pillars which

112
00:03:58,799 --> 00:04:00,480
allows us to have secret information

113
00:04:00,480 --> 00:04:02,799
available on the salt master node

114
00:04:02,799 --> 00:04:04,959
and selectively distributing the keys

115
00:04:04,959 --> 00:04:07,040
that we want to each individual machine

116
00:04:07,040 --> 00:04:09,040
or minion based on a whole bunch of

117
00:04:09,040 --> 00:04:12,239
grains and parameters

118
00:04:12,879 --> 00:04:14,480
one final thing about the messaging

119
00:04:14,480 --> 00:04:16,560
system here is that it simplifies all of

120
00:04:16,560 --> 00:04:17,918
our network policies

121
00:04:17,918 --> 00:04:19,440
the minions only have to be able to

122
00:04:19,440 --> 00:04:21,199
speak to the salt master we're not

123
00:04:21,199 --> 00:04:22,800
opening up ports for the salt master to

124
00:04:22,800 --> 00:04:24,240
reach all of our minions

125
00:04:24,240 --> 00:04:29,120
and that's a big win too

126
00:04:29,120 --> 00:04:31,440
and the way that we're consuming salt

127
00:04:31,440 --> 00:04:33,199
stack or a provisioning salt stack on

128
00:04:33,199 --> 00:04:34,639
these machines

129
00:04:34,639 --> 00:04:38,639
is leveraging palumi's secret store

130
00:04:38,639 --> 00:04:40,080
writing the secrets that we need to

131
00:04:40,080 --> 00:04:42,240
cloud in it

132
00:04:42,240 --> 00:04:45,280
and then they'll come available to salt

133
00:04:45,280 --> 00:04:47,040
and the secrets being stored in pillars

134
00:04:47,040 --> 00:04:48,720
means that we can selectively distribute

135
00:04:48,720 --> 00:04:50,080
them based on grain data

136
00:04:50,080 --> 00:04:52,479
to each of the minions so the menus only

137
00:04:52,479 --> 00:04:54,840
get the secrets that we allow them to

138
00:04:54,840 --> 00:04:57,440
see

139
00:04:57,440 --> 00:04:59,759
and it's worth pointing out the while

140
00:04:59,759 --> 00:05:01,360
tinkerbell was open sourced by equinix

141
00:05:01,360 --> 00:05:02,960
metal and a majority of the team comes

142
00:05:02,960 --> 00:05:04,880
from equinix metal that is a cncf

143
00:05:04,880 --> 00:05:06,800
sandbox project

144
00:05:06,800 --> 00:05:08,880
this means that we're using hardware not

145
00:05:08,880 --> 00:05:10,800
on our equinox metal accounts

146
00:05:10,800 --> 00:05:13,600
but on our cncf accounts it also means

147
00:05:13,600 --> 00:05:15,199
that any maintainer or contributor

148
00:05:15,199 --> 00:05:16,560
regardless of where they

149
00:05:16,560 --> 00:05:19,280
where they are employed should be able

150
00:05:19,280 --> 00:05:20,560
to have the same amount of access we

151
00:05:20,560 --> 00:05:22,400
want to protect against the bus factor

152
00:05:22,400 --> 00:05:25,840
of course as well

153
00:05:25,840 --> 00:05:27,840
so we need to commoditize the access to

154
00:05:27,840 --> 00:05:30,479
the machines

155
00:05:31,440 --> 00:05:33,360
and for that i'm falling back on one of

156
00:05:33,360 --> 00:05:34,720
my other favorite tools

157
00:05:34,720 --> 00:05:38,639
teleport teleport allows us to disable

158
00:05:38,639 --> 00:05:43,520
open ssh we don't need to rely

159
00:05:43,520 --> 00:05:46,639
on giving people access to the machines

160
00:05:46,639 --> 00:05:49,120
by reaching out and getting their ssh

161
00:05:49,120 --> 00:05:49,840
keys

162
00:05:49,840 --> 00:05:52,720
or scraping them from github we don't

163
00:05:52,720 --> 00:05:54,160
need to add everybody

164
00:05:54,160 --> 00:05:57,919
to the project on equinix metal

165
00:05:58,000 --> 00:06:00,960
we can use teleport's ssh server which

166
00:06:00,960 --> 00:06:01,680
is backed by

167
00:06:01,680 --> 00:06:05,600
github sso and restrict access to these

168
00:06:05,600 --> 00:06:07,840
machines based on a group that we create

169
00:06:07,840 --> 00:06:09,440
within the tinkerbell organization on

170
00:06:09,440 --> 00:06:11,520
github

171
00:06:11,520 --> 00:06:13,360
so in order to give people access to the

172
00:06:13,360 --> 00:06:15,759
runners or to the salt master itself

173
00:06:15,759 --> 00:06:17,520
we just have to add them to a group on

174
00:06:17,520 --> 00:06:18,880
github

175
00:06:18,880 --> 00:06:21,840
and that's pretty cool

176
00:06:24,000 --> 00:06:26,639
we're keeping teleport secure by only

177
00:06:26,639 --> 00:06:27,280
allowing

178
00:06:27,280 --> 00:06:30,319
private ipv4 access for other nodes to

179
00:06:30,319 --> 00:06:31,759
join the cluster

180
00:06:31,759 --> 00:06:33,840
and again the tokens are all stored in

181
00:06:33,840 --> 00:06:34,880
the blooming store

182
00:06:34,880 --> 00:06:36,960
are encrypted by polumi and distributed

183
00:06:36,960 --> 00:06:38,720
via cloud and at two salt stack to the

184
00:06:38,720 --> 00:06:39,280
runners

185
00:06:39,280 --> 00:06:42,239
as needed

186
00:06:43,199 --> 00:06:49,840
so what does that all look like

187
00:06:50,160 --> 00:06:54,080
okay so first you can see all the codes

188
00:06:54,080 --> 00:06:54,880
to provision

189
00:06:54,880 --> 00:06:56,720
this infrastructure and the applications

190
00:06:56,720 --> 00:06:58,319
running on top of the machines

191
00:06:58,319 --> 00:07:02,400
at github.com tinkerbell infrastructure

192
00:07:02,400 --> 00:07:04,160
we have the paloma directory which is

193
00:07:04,160 --> 00:07:07,280
responsible for running the pollute up

194
00:07:07,280 --> 00:07:09,440
provisioning the bare metal writing

195
00:07:09,440 --> 00:07:10,880
everything that we need to cloud in it

196
00:07:10,880 --> 00:07:11,680
to self

197
00:07:11,680 --> 00:07:14,319
bootstrap the salt setup from there salt

198
00:07:14,319 --> 00:07:15,120
takes over

199
00:07:15,120 --> 00:07:16,400
and installs everything else that we

200
00:07:16,400 --> 00:07:18,160
need on itself

201
00:07:18,160 --> 00:07:21,680
and the runner devices

202
00:07:22,000 --> 00:07:24,400
using polumi's cloud we have access to

203
00:07:24,400 --> 00:07:26,720
see when pollutant commands are run

204
00:07:26,720 --> 00:07:29,840
against a stack we can just click on

205
00:07:29,840 --> 00:07:32,800
tinkerbell infrastructure production

206
00:07:32,800 --> 00:07:35,840
we can see the outputs you can see the

207
00:07:35,840 --> 00:07:38,400
configuration used including secrets

208
00:07:38,400 --> 00:07:41,360
although they are nicely sophisticated

209
00:07:41,360 --> 00:07:41,840
and

210
00:07:41,840 --> 00:07:43,520
what else is cool is that we have the

211
00:07:43,520 --> 00:07:45,520
activity view that shows us every time

212
00:07:45,520 --> 00:07:46,080
someone

213
00:07:46,080 --> 00:07:48,080
ran the blooming stack so we got really

214
00:07:48,080 --> 00:07:49,199
good visibility

215
00:07:49,199 --> 00:07:50,879
and to when any of these seekers were

216
00:07:50,879 --> 00:07:52,720
accessed the state was changed and nodes

217
00:07:52,720 --> 00:07:55,360
were spun up

218
00:07:56,639 --> 00:07:58,240
now in order to get access to the

219
00:07:58,240 --> 00:08:00,199
machines we can browse to

220
00:08:00,199 --> 00:08:01,759
teleport.tankerbill.org

221
00:08:01,759 --> 00:08:03,680
there is only one option to log in and

222
00:08:03,680 --> 00:08:06,000
that is through github

223
00:08:06,000 --> 00:08:08,160
i click the magic button and i now have

224
00:08:08,160 --> 00:08:10,840
access to all of the machines within the

225
00:08:10,840 --> 00:08:12,000
infrastructure

226
00:08:12,000 --> 00:08:14,160
think what is really cool about teleport

227
00:08:14,160 --> 00:08:16,160
as our ssh means

228
00:08:16,160 --> 00:08:19,039
is that we can have the ability to see

229
00:08:19,039 --> 00:08:20,800
active sessions and in fact we can even

230
00:08:20,800 --> 00:08:22,560
join them if they were in progress and

231
00:08:22,560 --> 00:08:24,240
see what the people are typing or doing

232
00:08:24,240 --> 00:08:27,120
or whatever and the sessions are also

233
00:08:27,120 --> 00:08:28,240
recorded

234
00:08:28,240 --> 00:08:31,280
so let's take a look at that

235
00:08:31,280 --> 00:08:36,159
we can jump on to our salt master

236
00:08:37,519 --> 00:08:39,599
and i can just run nice simple salt

237
00:08:39,599 --> 00:08:41,760
command to ensure that all of my devices

238
00:08:41,760 --> 00:08:44,319
are online

239
00:08:44,560 --> 00:08:48,080
if we pop back over here we can click on

240
00:08:48,080 --> 00:08:49,680
active sessions and we can see

241
00:08:49,680 --> 00:08:52,720
that i have an ssh session in progress

242
00:08:52,720 --> 00:08:56,080
and i have a join button which if i type

243
00:08:56,080 --> 00:08:56,959
echo

244
00:08:56,959 --> 00:09:00,560
hello i can see

245
00:09:00,560 --> 00:09:04,240
both of my terminals very very cool

246
00:09:04,240 --> 00:09:08,399
let's end both of these sessions

247
00:09:08,399 --> 00:09:10,480
and refresh and that'll end in just a

248
00:09:10,480 --> 00:09:13,430
moment hopefully it shows up here

249
00:09:13,430 --> 00:09:16,760
[Music]

250
00:09:19,760 --> 00:09:22,640
and now our session is gone we can go to

251
00:09:22,640 --> 00:09:24,560
our audit log we can see that sessions

252
00:09:24,560 --> 00:09:26,160
were started we can see the single

253
00:09:26,160 --> 00:09:27,760
sign-on from github

254
00:09:27,760 --> 00:09:29,920
we can see that someone joined a session

255
00:09:29,920 --> 00:09:32,480
and we can see the user disconnected

256
00:09:32,480 --> 00:09:35,519
we can come back here and click play on

257
00:09:35,519 --> 00:09:37,040
our recorded session

258
00:09:37,040 --> 00:09:38,560
and see all of those commands that were

259
00:09:38,560 --> 00:09:40,720
executed we got the cell

260
00:09:40,720 --> 00:09:44,080
we have the cell test.peng followed

261
00:09:44,080 --> 00:09:50,640
by our echo

262
00:09:50,640 --> 00:09:53,519
thank you for watching this session i

263
00:09:53,519 --> 00:09:53,920
hope

264
00:09:53,920 --> 00:09:56,000
you get as much value out of pollumi

265
00:09:56,000 --> 00:09:57,680
soul stack and teleport

266
00:09:57,680 --> 00:10:01,040
as i the tinker bell and equinix metal

267
00:10:01,040 --> 00:10:04,399
have a great day

