1
00:00:00,160 --> 00:00:02,000
hello everyone welcome to our talk

2
00:00:02,000 --> 00:00:03,679
securing the supply chain

3
00:00:03,679 --> 00:00:07,680
xero trust builds with intel inspire

4
00:00:08,080 --> 00:00:10,160
let me start by introducing my myself

5
00:00:10,160 --> 00:00:11,440
there i am right there

6
00:00:11,440 --> 00:00:14,480
um i'm a solutions architect at box boat

7
00:00:14,480 --> 00:00:15,280
technology

8
00:00:15,280 --> 00:00:17,760
i also lead a lot of our technical

9
00:00:17,760 --> 00:00:18,480
initiatives

10
00:00:18,480 --> 00:00:20,880
are at box boat dealing with the federal

11
00:00:20,880 --> 00:00:22,080
and high compliance

12
00:00:22,080 --> 00:00:24,880
industries um i'm a contributor to the

13
00:00:24,880 --> 00:00:25,920
cncf

14
00:00:25,920 --> 00:00:28,480
sig security supply chain working group

15
00:00:28,480 --> 00:00:30,080
right now we are working

16
00:00:30,080 --> 00:00:33,200
on a supply chain security white paper

17
00:00:33,200 --> 00:00:35,440
hopefully by the time you see this video

18
00:00:35,440 --> 00:00:37,120
it will be released or soon to be

19
00:00:37,120 --> 00:00:37,760
released so

20
00:00:37,760 --> 00:00:40,640
so be on the lookout for that um i'll be

21
00:00:40,640 --> 00:00:44,719
posting it on my linkedin and twitter

22
00:00:44,719 --> 00:00:47,280
once that becomes available i work in

23
00:00:47,280 --> 00:00:48,160
defense

24
00:00:48,160 --> 00:00:50,800
banking and utilities you know generally

25
00:00:50,800 --> 00:00:51,360
those

26
00:00:51,360 --> 00:00:53,680
high compliance environments or high

27
00:00:53,680 --> 00:00:56,079
compliance verticals

28
00:00:56,079 --> 00:00:58,239
right they they all want to move to

29
00:00:58,239 --> 00:01:00,079
devsec ops but they have

30
00:01:00,079 --> 00:01:02,399
all this baggage and regulation involved

31
00:01:02,399 --> 00:01:03,280
with it

32
00:01:03,280 --> 00:01:06,479
it makes it very very difficult to do

33
00:01:06,479 --> 00:01:08,640
that so so we help them out there

34
00:01:08,640 --> 00:01:10,880
and then with me i have michael swift

35
00:01:10,880 --> 00:01:11,760
he's an amazing

36
00:01:11,760 --> 00:01:14,560
engineer he's a devops engineer with us

37
00:01:14,560 --> 00:01:15,680
at box boat

38
00:01:15,680 --> 00:01:18,080
as well he he contributes with me to

39
00:01:18,080 --> 00:01:19,280
that white paper

40
00:01:19,280 --> 00:01:22,080
i talked about and then he works on the

41
00:01:22,080 --> 00:01:23,360
us air force

42
00:01:23,360 --> 00:01:25,759
platform one so he helps bring some of

43
00:01:25,759 --> 00:01:27,759
their mission partners on board

44
00:01:27,759 --> 00:01:29,280
so if you think like these large

45
00:01:29,280 --> 00:01:32,000
traditional slow-moving uh defense

46
00:01:32,000 --> 00:01:34,479
integrators right they need to as the

47
00:01:34,479 --> 00:01:35,759
u.s air force moves

48
00:01:35,759 --> 00:01:38,000
into a devsec ops environment they need

49
00:01:38,000 --> 00:01:40,079
to bring these large

50
00:01:40,079 --> 00:01:42,479
uh so mikhail's working on a team that

51
00:01:42,479 --> 00:01:44,079
is really helping enable

52
00:01:44,079 --> 00:01:45,759
one of those large integrators to to

53
00:01:45,759 --> 00:01:48,640
work in that u.s air force platform

54
00:01:48,640 --> 00:01:51,680
i'm really proud of the work

55
00:01:51,759 --> 00:01:53,040
and then i'll talk about a little bit

56
00:01:53,040 --> 00:01:54,880
about boxboat we are

57
00:01:54,880 --> 00:01:58,240
a professional services uh

58
00:01:58,240 --> 00:02:01,439
company i like to call say cloud native

59
00:02:01,439 --> 00:02:02,640
integrators

60
00:02:02,640 --> 00:02:04,240
so we can take your you know your

61
00:02:04,240 --> 00:02:05,680
business requirements and then we take

62
00:02:05,680 --> 00:02:07,119
the cloud native landscape

63
00:02:07,119 --> 00:02:08,318
and come up with a plan to really

64
00:02:08,318 --> 00:02:10,160
accelerate your your devops journey and

65
00:02:10,160 --> 00:02:12,959
your digital monitor

66
00:02:12,959 --> 00:02:15,040
uh but let's get to the problem at hand

67
00:02:15,040 --> 00:02:16,959
right um

68
00:02:16,959 --> 00:02:20,480
there was some stuff that happened

69
00:02:20,480 --> 00:02:22,560
this past winter and it really kind of

70
00:02:22,560 --> 00:02:23,680
shook the entire

71
00:02:23,680 --> 00:02:26,239
industry um security administrators are

72
00:02:26,239 --> 00:02:28,000
finally trying to figure out that

73
00:02:28,000 --> 00:02:31,680
they have no way to assess the risk

74
00:02:31,680 --> 00:02:33,040
level of software running on their

75
00:02:33,040 --> 00:02:33,760
systems right

76
00:02:33,760 --> 00:02:37,360
it's a system based upon trust um

77
00:02:37,360 --> 00:02:40,160
and that's a problem right because a lot

78
00:02:40,160 --> 00:02:42,160
of organizations don't even sign their

79
00:02:42,160 --> 00:02:42,879
artifacts

80
00:02:42,879 --> 00:02:45,280
or any other metadata we look at the

81
00:02:45,280 --> 00:02:46,879
open source community right it's even a

82
00:02:46,879 --> 00:02:48,480
larger problem

83
00:02:48,480 --> 00:02:51,120
and it all goes back to right how do we

84
00:02:51,120 --> 00:02:52,720
sign those artifacts right it becomes

85
00:02:52,720 --> 00:02:54,080
very difficult especially when you're a

86
00:02:54,080 --> 00:02:55,680
large distributed organization

87
00:02:55,680 --> 00:02:57,920
to distributing those pr that private

88
00:02:57,920 --> 00:03:00,879
key material and certain consistency

89
00:03:00,879 --> 00:03:02,879
if you've ever worked in a large

90
00:03:02,879 --> 00:03:04,480
corporation and

91
00:03:04,480 --> 00:03:07,519
have tried to do some sort of request

92
00:03:07,519 --> 00:03:08,720
for certificates

93
00:03:08,720 --> 00:03:10,640
you understand that the process is

94
00:03:10,640 --> 00:03:11,760
different everywhere

95
00:03:11,760 --> 00:03:13,360
and it's generally very streamlined

96
00:03:13,360 --> 00:03:14,879
right it's something that that takes you

97
00:03:14,879 --> 00:03:16,840
know multiple levels of approval

98
00:03:16,840 --> 00:03:19,920
uh it can take multiple days

99
00:03:19,920 --> 00:03:22,239
so it's just a really difficult thing to

100
00:03:22,239 --> 00:03:23,599
do

101
00:03:23,599 --> 00:03:25,519
and all this really boils down to is

102
00:03:25,519 --> 00:03:27,680
that sometimes when we deliver software

103
00:03:27,680 --> 00:03:28,480
faster

104
00:03:28,480 --> 00:03:30,400
we're really delivering vulnerabilities

105
00:03:30,400 --> 00:03:32,799
in this high compliance environment

106
00:03:32,799 --> 00:03:34,879
defense banking utilities right that's

107
00:03:34,879 --> 00:03:36,400
just not acceptable

108
00:03:36,400 --> 00:03:39,040
we'd rather be slow and decades behind

109
00:03:39,040 --> 00:03:40,879
than have a system that's vulnerable

110
00:03:40,879 --> 00:03:42,959
um now we all know that you know

111
00:03:42,959 --> 00:03:44,480
existing systems that haven't been

112
00:03:44,480 --> 00:03:46,400
patched are vulnerable

113
00:03:46,400 --> 00:03:48,159
but we can't introduce neuter

114
00:03:48,159 --> 00:03:50,159
vulnerabilities into a system

115
00:03:50,159 --> 00:03:52,080
uh and we just can't move fast enough to

116
00:03:52,080 --> 00:03:53,439
have the assurance that we

117
00:03:53,439 --> 00:03:57,439
we know that that's happened so

118
00:03:57,439 --> 00:03:59,120
when i opened this talk i talked about

119
00:03:59,120 --> 00:04:01,120
zero trust that's a that's a big

120
00:04:01,120 --> 00:04:02,319
marketing

121
00:04:02,319 --> 00:04:04,480
and i kind of want to break that down a

122
00:04:04,480 --> 00:04:06,640
little

123
00:04:06,799 --> 00:04:11,599
and there's this idea right that

124
00:04:11,599 --> 00:04:13,040
that zero trust architecture is a

125
00:04:13,040 --> 00:04:14,480
product that you can buy but that that's

126
00:04:14,480 --> 00:04:15,680
just not the case right it's an

127
00:04:15,680 --> 00:04:18,238
architecture it's a design decision that

128
00:04:18,238 --> 00:04:20,160
that your company or your organization

129
00:04:20,160 --> 00:04:21,519
needs to make

130
00:04:21,519 --> 00:04:24,000
um and i like to distill zero trust

131
00:04:24,000 --> 00:04:24,960
architect

132
00:04:24,960 --> 00:04:27,680
three three points so you have identity

133
00:04:27,680 --> 00:04:28,000
that

134
00:04:28,000 --> 00:04:30,800
is your workload's identity based upon

135
00:04:30,800 --> 00:04:32,639
the attributes of that the immutable

136
00:04:32,639 --> 00:04:34,320
attributes of that workload

137
00:04:34,320 --> 00:04:37,360
such as a container hash the process

138
00:04:37,360 --> 00:04:38,400
binary

139
00:04:38,400 --> 00:04:40,560
hash right there has to be something

140
00:04:40,560 --> 00:04:42,080
about that workload that

141
00:04:42,080 --> 00:04:44,639
uniquely identifies it or identifies it

142
00:04:44,639 --> 00:04:46,479
as a part of a group

143
00:04:46,479 --> 00:04:48,720
the same goes for users right identity

144
00:04:48,720 --> 00:04:50,320
is not just workload identity right

145
00:04:50,320 --> 00:04:52,240
most of us understand identity as a user

146
00:04:52,240 --> 00:04:53,600
identity

147
00:04:53,600 --> 00:04:56,160
so we need to have strong identity

148
00:04:56,160 --> 00:04:57,759
systems for both users

149
00:04:57,759 --> 00:05:01,280
and work the next part is policy right

150
00:05:01,280 --> 00:05:03,440
so traditionally when we talk about

151
00:05:03,440 --> 00:05:04,960
policy we're talking about

152
00:05:04,960 --> 00:05:06,720
organizational policy right

153
00:05:06,720 --> 00:05:08,160
what can users do what can

154
00:05:08,160 --> 00:05:09,919
administrators do what are our left and

155
00:05:09,919 --> 00:05:11,199
right limbs

156
00:05:11,199 --> 00:05:13,680
generally in a traditional architecture

157
00:05:13,680 --> 00:05:15,520
you have your policy that's managed by a

158
00:05:15,520 --> 00:05:16,960
change control board so you'll bring a

159
00:05:16,960 --> 00:05:18,400
change to that change control board and

160
00:05:18,400 --> 00:05:20,080
they'll examine the policy to

161
00:05:20,080 --> 00:05:22,800
know hey is this going to go can this go

162
00:05:22,800 --> 00:05:25,440
into production based upon

163
00:05:25,440 --> 00:05:28,160
it's a very slow process it really

164
00:05:28,160 --> 00:05:29,919
doesn't work with a devsecops

165
00:05:29,919 --> 00:05:31,199
methodology

166
00:05:31,199 --> 00:05:33,120
um so what we do in the zero trust

167
00:05:33,120 --> 00:05:35,039
architecture is we take that policy and

168
00:05:35,039 --> 00:05:36,160
we

169
00:05:36,160 --> 00:05:38,479
we enable it as policy as code right so

170
00:05:38,479 --> 00:05:40,080
we have our left and right limits

171
00:05:40,080 --> 00:05:43,120
defined as some piece of automation

172
00:05:43,120 --> 00:05:46,000
um you know open policy agent is a great

173
00:05:46,000 --> 00:05:47,280
tool to do this

174
00:05:47,280 --> 00:05:49,680
and then finally we have control right

175
00:05:49,680 --> 00:05:51,600
what is actually taking these identity

176
00:05:51,600 --> 00:05:53,600
documents and policy documents

177
00:05:53,600 --> 00:05:57,280
to make decisions in the system

178
00:05:58,240 --> 00:06:01,440
so an example here may be that you know

179
00:06:01,440 --> 00:06:03,759
if you have a network policy that says

180
00:06:03,759 --> 00:06:05,360
two workloads can talk to each other

181
00:06:05,360 --> 00:06:06,800
right you need some sort of controller

182
00:06:06,800 --> 00:06:07,280
that

183
00:06:07,280 --> 00:06:09,680
that actuates those ip tables to make

184
00:06:09,680 --> 00:06:10,960
that

185
00:06:10,960 --> 00:06:13,759
so when you have these three things

186
00:06:13,759 --> 00:06:15,440
working together you do have a zero

187
00:06:15,440 --> 00:06:17,120
trust architecture and you take these

188
00:06:17,120 --> 00:06:18,080
three ideas

189
00:06:18,080 --> 00:06:19,759
and you can apply them to just about any

190
00:06:19,759 --> 00:06:21,759
problem in your space

191
00:06:21,759 --> 00:06:25,039
and design it securely so when we apply

192
00:06:25,039 --> 00:06:26,880
it to the ci cd pipeline we see that

193
00:06:26,880 --> 00:06:28,479
there's a

194
00:06:28,479 --> 00:06:31,520
traditional cicd pipeline all of the

195
00:06:31,520 --> 00:06:32,639
data

196
00:06:32,639 --> 00:06:34,560
that is collected or generated during

197
00:06:34,560 --> 00:06:36,560
the build process it's thrown away

198
00:06:36,560 --> 00:06:39,680
and not distributed along with the

199
00:06:39,680 --> 00:06:40,560
artifact

200
00:06:40,560 --> 00:06:42,479
that that metadata is extremely

201
00:06:42,479 --> 00:06:44,160
important to a testing of the

202
00:06:44,160 --> 00:06:48,080
validity of of that software that it was

203
00:06:48,080 --> 00:06:49,599
built on the machines you expected it to

204
00:06:49,599 --> 00:06:50,400
be built on

205
00:06:50,400 --> 00:06:52,160
it was built by the compilers you

206
00:06:52,160 --> 00:06:53,680
expected it to be built on

207
00:06:53,680 --> 00:06:55,840
there was no man-in-the-middle attacks

208
00:06:55,840 --> 00:06:57,919
that that modified the code in between

209
00:06:57,919 --> 00:06:59,440
these different processes

210
00:06:59,440 --> 00:07:02,080
you you want to have that assurance that

211
00:07:02,080 --> 00:07:03,680
your vendors did the right thing there

212
00:07:03,680 --> 00:07:05,199
before you deploy

213
00:07:05,199 --> 00:07:07,680
uh the software into mission critical

214
00:07:07,680 --> 00:07:08,639
systems

215
00:07:08,639 --> 00:07:11,039
and right now we're placing our trust in

216
00:07:11,039 --> 00:07:11,759
the pro

217
00:07:11,759 --> 00:07:14,080
we're saying okay you sign that artifact

218
00:07:14,080 --> 00:07:16,240
so we're gonna trust it in our system

219
00:07:16,240 --> 00:07:18,479
and you know the events of this past

220
00:07:18,479 --> 00:07:19,599
winter or

221
00:07:19,599 --> 00:07:22,400
past year in 2020 with uh with some of

222
00:07:22,400 --> 00:07:23,840
the supply chain attacks we've seen

223
00:07:23,840 --> 00:07:25,199
we just see that that's not the case

224
00:07:25,199 --> 00:07:26,960
right we cannot

225
00:07:26,960 --> 00:07:30,400
trust external processes in our mission

226
00:07:30,400 --> 00:07:31,360
critical systems

227
00:07:31,360 --> 00:07:33,440
we need to place trust and data not the

228
00:07:33,440 --> 00:07:35,759
process

229
00:07:36,000 --> 00:07:39,280
so this means we need to move to a

230
00:07:39,280 --> 00:07:40,080
system of

231
00:07:40,080 --> 00:07:42,160
evidence-based trust rather than a

232
00:07:42,160 --> 00:07:44,000
signature based

233
00:07:44,000 --> 00:07:47,199
um and this is this is somewhat of a

234
00:07:47,199 --> 00:07:51,039
new idea i know uh the ntia

235
00:07:51,039 --> 00:07:53,919
and mitre have been working on this the

236
00:07:53,919 --> 00:07:55,840
past couple

237
00:07:55,840 --> 00:07:57,360
and there's a paper called deliver

238
00:07:57,360 --> 00:07:58,879
uncompromised that that might have

239
00:07:58,879 --> 00:08:00,319
released

240
00:08:00,319 --> 00:08:03,039
a couple months ago and really kind of

241
00:08:03,039 --> 00:08:07,039
explains this concept and expands upon

242
00:08:07,039 --> 00:08:10,400
and you have this idea of an this is a

243
00:08:10,400 --> 00:08:12,080
piece of metadata that is

244
00:08:12,080 --> 00:08:15,120
emitted from each step of the build

245
00:08:15,120 --> 00:08:17,039
so if we take those s-bombs assigned

246
00:08:17,039 --> 00:08:18,240
s-bombs and

247
00:08:18,240 --> 00:08:20,160
you know put them all together we and

248
00:08:20,160 --> 00:08:22,080
use it and deliver them to the execution

249
00:08:22,080 --> 00:08:23,199
phase right

250
00:08:23,199 --> 00:08:24,960
we can actually use a controller at the

251
00:08:24,960 --> 00:08:26,960
execution phase to determine whether we

252
00:08:26,960 --> 00:08:29,919
trust that software

253
00:08:29,919 --> 00:08:31,680
and that allows our system

254
00:08:31,680 --> 00:08:34,320
administrators to examine that software

255
00:08:34,320 --> 00:08:36,159
to make sure that it does meet that

256
00:08:36,159 --> 00:08:38,479
organizational policy

257
00:08:38,479 --> 00:08:40,559
we're placing our trust in signed data

258
00:08:40,559 --> 00:08:41,599
we're placing our trust

259
00:08:41,599 --> 00:08:44,159
in public key infrastructure not the

260
00:08:44,159 --> 00:08:45,680
process when we move to an

261
00:08:45,680 --> 00:08:49,199
evidence-based trust model for

262
00:08:51,920 --> 00:08:54,080
the problem is that miner actually

263
00:08:54,080 --> 00:08:56,240
didn't release an implementation or any

264
00:08:56,240 --> 00:08:59,440
implementation guidance on

265
00:08:59,440 --> 00:09:01,680
so at box what we kind of took it upon

266
00:09:01,680 --> 00:09:02,560
ourselves uh

267
00:09:02,560 --> 00:09:05,200
you know we we've been working in supply

268
00:09:05,200 --> 00:09:07,440
chain and supply chain security for

269
00:09:07,440 --> 00:09:09,120
you know the entire history of our

270
00:09:09,120 --> 00:09:11,279
company it's what we do

271
00:09:11,279 --> 00:09:12,720
traditionally we've been focused on

272
00:09:12,720 --> 00:09:14,320
delivering software faster but as we

273
00:09:14,320 --> 00:09:15,600
move into these high compliance

274
00:09:15,600 --> 00:09:16,480
environments they have

275
00:09:16,480 --> 00:09:18,480
new requirements right they want to

276
00:09:18,480 --> 00:09:20,000
actually be able to trust that

277
00:09:20,000 --> 00:09:22,080
that software so we started looking at

278
00:09:22,080 --> 00:09:23,600
the in toto

279
00:09:23,600 --> 00:09:25,920
project um and toto is a great project

280
00:09:25,920 --> 00:09:27,360
it does what we need to do right it

281
00:09:27,360 --> 00:09:29,200
emits those s-bombs that metadata that

282
00:09:29,200 --> 00:09:31,040
signed metadata for each stage of the

283
00:09:31,040 --> 00:09:32,160
build

284
00:09:32,160 --> 00:09:34,320
it allows us to verify that by an

285
00:09:34,320 --> 00:09:36,000
out-of-band uh

286
00:09:36,000 --> 00:09:38,640
policy enforcement uh they call that a

287
00:09:38,640 --> 00:09:39,760
layout file

288
00:09:39,760 --> 00:09:41,120
right so that when you put these

289
00:09:41,120 --> 00:09:42,640
together it allows you to

290
00:09:42,640 --> 00:09:44,399
cryptographically verify

291
00:09:44,399 --> 00:09:47,120
the build process wherever you are right

292
00:09:47,120 --> 00:09:49,040
so we can we can verify that build

293
00:09:49,040 --> 00:09:49,600
process

294
00:09:49,600 --> 00:09:51,600
at the execution phase not having to

295
00:09:51,600 --> 00:09:53,440
rely on

296
00:09:53,440 --> 00:09:56,720
um trust of of that that

297
00:09:56,720 --> 00:10:00,399
business process from that vendor that

298
00:10:00,800 --> 00:10:05,839
so how does this actually work so uh

299
00:10:06,160 --> 00:10:08,480
then total effectively decouples the

300
00:10:08,480 --> 00:10:10,560
build policy from the build process

301
00:10:10,560 --> 00:10:12,720
itself so in a traditional build process

302
00:10:12,720 --> 00:10:14,480
you may have

303
00:10:14,480 --> 00:10:17,920
a gitlab ci pipeline that that is

304
00:10:17,920 --> 00:10:19,440
enforced at some point right but if

305
00:10:19,440 --> 00:10:20,720
you're using

306
00:10:20,720 --> 00:10:22,320
but once you leave that git lab

307
00:10:22,320 --> 00:10:24,480
environment or that ci environment

308
00:10:24,480 --> 00:10:26,560
you have no way to validate that right

309
00:10:26,560 --> 00:10:28,160
so what in total does is it gives us

310
00:10:28,160 --> 00:10:29,200
this out-of-band

311
00:10:29,200 --> 00:10:32,720
validation um in this in this diagram

312
00:10:32,720 --> 00:10:34,320
you see there's a project owner diana

313
00:10:34,320 --> 00:10:36,079
right she's going to define what that

314
00:10:36,079 --> 00:10:37,360
build policy is

315
00:10:37,360 --> 00:10:39,920
she can say hey all my builds need to

316
00:10:39,920 --> 00:10:40,640
meet

317
00:10:40,640 --> 00:10:44,000
certain criteria um and then each of the

318
00:10:44,000 --> 00:10:45,040
functionaries

319
00:10:45,040 --> 00:10:47,279
here are responsible for fulfilling or

320
00:10:47,279 --> 00:10:48,800
satisfying

321
00:10:48,800 --> 00:10:52,560
those requirements each functionary

322
00:10:52,560 --> 00:10:54,480
which could also be it could be a person

323
00:10:54,480 --> 00:10:56,560
or an actual build step

324
00:10:56,560 --> 00:10:58,839
does require a private key to sign that

325
00:10:58,839 --> 00:11:00,160
metadata

326
00:11:00,160 --> 00:11:02,560
which kind of causes some issues when we

327
00:11:02,560 --> 00:11:03,680
bring this into an enterprise

328
00:11:03,680 --> 00:11:05,839
environment

329
00:11:05,839 --> 00:11:08,880
so enter spiffy spire uh you know we're

330
00:11:08,880 --> 00:11:10,959
not gonna do a real big deep dive into

331
00:11:10,959 --> 00:11:12,320
what spiffy spire

332
00:11:12,320 --> 00:11:15,120
uh is and how it works there's a lot of

333
00:11:15,120 --> 00:11:16,880
really really great talks on that and a

334
00:11:16,880 --> 00:11:18,480
great active community

335
00:11:18,480 --> 00:11:21,519
uh but spiffy is the

336
00:11:21,519 --> 00:11:23,200
spire is the implementation of the

337
00:11:23,200 --> 00:11:24,959
spiffy apis it's a

338
00:11:24,959 --> 00:11:26,640
reference implementation is what we used

339
00:11:26,640 --> 00:11:28,720
in this project here

340
00:11:28,720 --> 00:11:31,760
and spire allows us to issue

341
00:11:31,760 --> 00:11:34,000
identities in the form of x509

342
00:11:34,000 --> 00:11:34,880
certificates

343
00:11:34,880 --> 00:11:37,680
to workloads based upon their immutable

344
00:11:37,680 --> 00:11:38,720
attribute

345
00:11:38,720 --> 00:11:41,680
container hash what user there's there's

346
00:11:41,680 --> 00:11:43,120
a lot of different selectors that we can

347
00:11:43,120 --> 00:11:43,760
pick on

348
00:11:43,760 --> 00:11:46,640
including you know what machine that

349
00:11:46,640 --> 00:11:47,760
they're being built on

350
00:11:47,760 --> 00:11:49,519
in one of our engagement we're actually

351
00:11:49,519 --> 00:11:51,839
able to tie issuing these identities

352
00:11:51,839 --> 00:11:52,560
down to

353
00:11:52,560 --> 00:11:56,800
a the public hash of that tpm key

354
00:11:56,800 --> 00:11:58,480
on that machine right so we can

355
00:11:58,480 --> 00:12:00,079
cryptographically prove that builds

356
00:12:00,079 --> 00:12:01,519
happen on a specific

357
00:12:01,519 --> 00:12:04,000
machine

358
00:12:06,160 --> 00:12:09,440
all right and so

359
00:12:09,440 --> 00:12:11,440
this allows us to register these

360
00:12:11,440 --> 00:12:12,880
functionaries through the

361
00:12:12,880 --> 00:12:15,040
spire registration and once we've

362
00:12:15,040 --> 00:12:16,000
registered these

363
00:12:16,000 --> 00:12:17,360
these functionaries to the spire

364
00:12:17,360 --> 00:12:19,360
registration api

365
00:12:19,360 --> 00:12:21,760
those functionaries are issued the keys

366
00:12:21,760 --> 00:12:23,519
that we specify and then they can sign

367
00:12:23,519 --> 00:12:24,800
that metadata

368
00:12:24,800 --> 00:12:28,800
and the whole process becomes automated

369
00:12:29,760 --> 00:12:33,519
you know we are able to again

370
00:12:33,519 --> 00:12:35,839
attest to the machine it was running on

371
00:12:35,839 --> 00:12:37,680
or the cloud environment was running on

372
00:12:37,680 --> 00:12:40,880
as well as a specific workload

373
00:12:40,880 --> 00:12:44,000
that is running on the

374
00:12:44,720 --> 00:12:46,240
when we take those two projects and put

375
00:12:46,240 --> 00:12:49,200
them together it allows us to create an

376
00:12:49,200 --> 00:12:51,040
automated architecture that that

377
00:12:51,040 --> 00:12:53,040
implements that reference design that

378
00:12:53,040 --> 00:12:54,720
that we talked about earlier that

379
00:12:54,720 --> 00:12:56,160
might have released that deliver

380
00:12:56,160 --> 00:12:57,920
uncompromised paper

381
00:12:57,920 --> 00:13:01,360
um allows us to tell

382
00:13:01,360 --> 00:13:03,360
allows us to attest for the workload

383
00:13:03,360 --> 00:13:04,560
identity right

384
00:13:04,560 --> 00:13:07,120
what who built the software and where it

385
00:13:07,120 --> 00:13:08,800
was built

386
00:13:08,800 --> 00:13:10,800
and allows us to pass that information

387
00:13:10,800 --> 00:13:11,839
downstream

388
00:13:11,839 --> 00:13:15,920
to consumers of the software so they can

389
00:13:18,839 --> 00:13:20,800
actually

390
00:13:20,800 --> 00:13:23,839
so without further ado i'm going to pass

391
00:13:23,839 --> 00:13:25,279
it over to mikhail and he's going to

392
00:13:25,279 --> 00:13:26,240
actually go over

393
00:13:26,240 --> 00:13:30,480
a demonstration of this working out

394
00:13:31,360 --> 00:13:33,040
damn thanks cole i'm going to give a

395
00:13:33,040 --> 00:13:34,480
quick demo of the work that we've done

396
00:13:34,480 --> 00:13:36,480
within toto inspire

397
00:13:36,480 --> 00:13:38,320
we have a sample hello world project

398
00:13:38,320 --> 00:13:39,839
here

399
00:13:39,839 --> 00:13:41,440
as part of this hello world project we

400
00:13:41,440 --> 00:13:43,600
defined a simple build pipeline

401
00:13:43,600 --> 00:13:46,480
it clones build both a binary and a

402
00:13:46,480 --> 00:13:47,440
docker image

403
00:13:47,440 --> 00:13:49,519
scans a docker image and then finally

404
00:13:49,519 --> 00:13:52,079
uses in toto to verify that image before

405
00:13:52,079 --> 00:13:55,519
it publishes it to a docker registry

406
00:13:55,519 --> 00:13:57,279
the only difference between this and any

407
00:13:57,279 --> 00:13:58,800
other pipeline that you've probably seen

408
00:13:58,800 --> 00:14:00,480
is that we wrap every command

409
00:14:00,480 --> 00:14:03,920
in an in total run this allows in toto

410
00:14:03,920 --> 00:14:04,560
to capture

411
00:14:04,560 --> 00:14:06,399
any materials which are things that we

412
00:14:06,399 --> 00:14:08,720
use in our built on our stage

413
00:14:08,720 --> 00:14:10,160
and products which are things that we

414
00:14:10,160 --> 00:14:12,000
create in our state

415
00:14:12,000 --> 00:14:14,079
we are also connecting to the spiffy

416
00:14:14,079 --> 00:14:15,519
spire

417
00:14:15,519 --> 00:14:18,560
socket which allows us to get ease and

418
00:14:18,560 --> 00:14:20,880
do some workload uh attestation to make

419
00:14:20,880 --> 00:14:21,839
sure that

420
00:14:21,839 --> 00:14:23,680
we're actually verified to do this and

421
00:14:23,680 --> 00:14:26,800
we're a trusted workload

422
00:14:26,800 --> 00:14:29,279
and then finally it just wraps our git

423
00:14:29,279 --> 00:14:30,480
clone or whatever

424
00:14:30,480 --> 00:14:34,000
else we're going to run here

425
00:14:35,279 --> 00:14:37,440
and we can see this reflected in our in

426
00:14:37,440 --> 00:14:38,720
total layout

427
00:14:38,720 --> 00:14:40,480
the layout is what's going to tell in

428
00:14:40,480 --> 00:14:42,240
toto what each step

429
00:14:42,240 --> 00:14:44,800
should do who's allowed to do that step

430
00:14:44,800 --> 00:14:46,320
as a functionary

431
00:14:46,320 --> 00:14:48,320
and then what materials and what

432
00:14:48,320 --> 00:14:51,040
products are expected for each step

433
00:14:51,040 --> 00:14:53,279
so everything here has to match what

434
00:14:53,279 --> 00:14:55,120
happens in our pipeline

435
00:14:55,120 --> 00:14:57,839
for example if our command doesn't match

436
00:14:57,839 --> 00:14:59,440
and toto will throw warnings

437
00:14:59,440 --> 00:15:01,279
it won't outright fail because sometimes

438
00:15:01,279 --> 00:15:03,600
commands not matching as expected

439
00:15:03,600 --> 00:15:05,839
there are some things you may your

440
00:15:05,839 --> 00:15:07,440
variables that may vary that you just

441
00:15:07,440 --> 00:15:09,360
won't know ahead of time

442
00:15:09,360 --> 00:15:11,199
but everything else such as our

443
00:15:11,199 --> 00:15:12,800
materials will fail

444
00:15:12,800 --> 00:15:16,320
and cause a hard failure on verification

445
00:15:16,320 --> 00:15:19,120
so for example in our in our clone stage

446
00:15:19,120 --> 00:15:20,000
we are saying

447
00:15:20,000 --> 00:15:21,600
we don't need any materials we should

448
00:15:21,600 --> 00:15:22,959
not have any materials because we're

449
00:15:22,959 --> 00:15:24,320
cloning

450
00:15:24,320 --> 00:15:27,279
we're going to create everything in our

451
00:15:27,279 --> 00:15:27,920
folder

452
00:15:27,920 --> 00:15:29,120
saying that we basically clear it

453
00:15:29,120 --> 00:15:31,759
created the world when we clone

454
00:15:31,759 --> 00:15:33,360
then as part of our build stage we're

455
00:15:33,360 --> 00:15:35,040
going to say our build command should be

456
00:15:35,040 --> 00:15:36,959
go build

457
00:15:36,959 --> 00:15:38,800
and then our expected materials must

458
00:15:38,800 --> 00:15:41,120
match our products from our clone state

459
00:15:41,120 --> 00:15:43,839
so this prevents any files from changing

460
00:15:43,839 --> 00:15:45,519
any files from being added

461
00:15:45,519 --> 00:15:47,440
things like that in between stages and

462
00:15:47,440 --> 00:15:49,199
making sure we only use

463
00:15:49,199 --> 00:15:51,519
files that we created in the clone step

464
00:15:51,519 --> 00:15:54,480
and our build step

465
00:15:54,480 --> 00:15:56,240
and then the final part of the in total

466
00:15:56,240 --> 00:15:59,839
stage is the inspection and verification

467
00:15:59,839 --> 00:16:02,240
so by default in total we'll look at

468
00:16:02,240 --> 00:16:03,120
every single

469
00:16:03,120 --> 00:16:05,120
metadata prevented by each of these

470
00:16:05,120 --> 00:16:06,959
steps and it'll make sure that the

471
00:16:06,959 --> 00:16:08,000
materials and products

472
00:16:08,000 --> 00:16:10,320
match your defined rules you can also

473
00:16:10,320 --> 00:16:11,600
define this

474
00:16:11,600 --> 00:16:13,680
inspection stage which may do extra

475
00:16:13,680 --> 00:16:16,240
stuff that you define

476
00:16:16,240 --> 00:16:18,959
in our case in our previous build image

477
00:16:18,959 --> 00:16:20,880
stage we tarred up our file

478
00:16:20,880 --> 00:16:24,320
our docker image and now we're going to

479
00:16:24,320 --> 00:16:25,519
say that

480
00:16:25,519 --> 00:16:28,639
this docker image bar that we have now

481
00:16:28,639 --> 00:16:30,399
must match the one that was created from

482
00:16:30,399 --> 00:16:31,920
the build image stage

483
00:16:31,920 --> 00:16:34,480
so if someone were to download a target

484
00:16:34,480 --> 00:16:36,480
copy of our image they'd be able to

485
00:16:36,480 --> 00:16:37,440
verify

486
00:16:37,440 --> 00:16:39,920
with the signed metadata that the image

487
00:16:39,920 --> 00:16:41,440
they have was the same one that we

488
00:16:41,440 --> 00:16:44,720
created as part of our build process

489
00:16:44,720 --> 00:16:47,680
the final part that we added is this

490
00:16:47,680 --> 00:16:50,000
root case

491
00:16:50,000 --> 00:16:52,959
by d are currently today entoto allows

492
00:16:52,959 --> 00:16:54,800
you to sign metadata

493
00:16:54,800 --> 00:16:58,160
and verify functionaries with dpg and

494
00:16:58,160 --> 00:17:00,000
public private key pairs that are

495
00:17:00,000 --> 00:17:02,560
embedded in this layout

496
00:17:02,560 --> 00:17:04,400
with our integration with spiffy we

497
00:17:04,400 --> 00:17:06,160
wanted to make sure that we could sign

498
00:17:06,160 --> 00:17:07,039
metadata

499
00:17:07,039 --> 00:17:09,599
with any key and certificate pair

500
00:17:09,599 --> 00:17:10,480
belonging

501
00:17:10,480 --> 00:17:14,000
to a trusted root so as part of that we

502
00:17:14,000 --> 00:17:15,760
added in the root

503
00:17:15,760 --> 00:17:17,679
certificate as part of the layout

504
00:17:17,679 --> 00:17:19,039
that'll then be signed by

505
00:17:19,039 --> 00:17:21,760
another trusted key one that could be

506
00:17:21,760 --> 00:17:23,520
pre-shared between bill agents

507
00:17:23,520 --> 00:17:26,319
and anyone who needs to verify in a

508
00:17:26,319 --> 00:17:29,760
separate out-of-band process

509
00:17:30,240 --> 00:17:32,799
from there each step we added to a cert

510
00:17:32,799 --> 00:17:34,880
constraint field too

511
00:17:34,880 --> 00:17:37,200
this is saying that certain attributes

512
00:17:37,200 --> 00:17:38,480
of our certificate

513
00:17:38,480 --> 00:17:41,120
must match these things so for example

514
00:17:41,120 --> 00:17:42,320
the clone

515
00:17:42,320 --> 00:17:45,280
any common name is okay we want this

516
00:17:45,280 --> 00:17:46,559
specific uri

517
00:17:46,559 --> 00:17:49,039
in our certificate and this is a spiffy

518
00:17:49,039 --> 00:17:50,320
id that

519
00:17:50,320 --> 00:17:54,559
will be in any key made by our

520
00:17:54,559 --> 00:17:59,200
fifi agent and provided to our builders

521
00:17:59,520 --> 00:18:00,960
the show how when toto can catch

522
00:18:00,960 --> 00:18:02,559
unexpected things from happening in your

523
00:18:02,559 --> 00:18:03,440
build process

524
00:18:03,440 --> 00:18:04,559
you can take a look at this merge

525
00:18:04,559 --> 00:18:06,480
request i've opened

526
00:18:06,480 --> 00:18:08,640
and here i'm just adding a line after

527
00:18:08,640 --> 00:18:10,240
our main function

528
00:18:10,240 --> 00:18:13,039
this is printing this shouldn't be here

529
00:18:13,039 --> 00:18:14,080
as our opening

530
00:18:14,080 --> 00:18:16,880
statement in our main function doing

531
00:18:16,880 --> 00:18:18,480
this outside of in toto run

532
00:18:18,480 --> 00:18:20,080
so in toto should have no idea this

533
00:18:20,080 --> 00:18:22,480
happened if i take a look at our build

534
00:18:22,480 --> 00:18:24,559
property volume for this merge request

535
00:18:24,559 --> 00:18:27,360
i see it's failing image verification if

536
00:18:27,360 --> 00:18:28,559
we take a look as to why

537
00:18:28,559 --> 00:18:31,440
it's in failing the inspection step for

538
00:18:31,440 --> 00:18:33,520
artifact verification failed for step

539
00:18:33,520 --> 00:18:35,120
build materials may not go were

540
00:18:35,120 --> 00:18:36,480
disallowed by the rule

541
00:18:36,480 --> 00:18:39,679
disallow star as part of our rules for

542
00:18:39,679 --> 00:18:40,400
verification

543
00:18:40,400 --> 00:18:42,400
for our build stage we said that

544
00:18:42,400 --> 00:18:44,240
everything used as materials had to

545
00:18:44,240 --> 00:18:46,400
match the products from our clone

546
00:18:46,400 --> 00:18:48,080
since that didn't it got caught by the

547
00:18:48,080 --> 00:18:50,720
disallow star stage

548
00:18:50,720 --> 00:18:52,080
you can distribute your in total

549
00:18:52,080 --> 00:18:54,160
metadata from these build stages so that

550
00:18:54,160 --> 00:18:56,000
anyone who gets your software and the

551
00:18:56,000 --> 00:18:58,080
metadata can verify that you are the one

552
00:18:58,080 --> 00:18:59,200
who built it

553
00:18:59,200 --> 00:19:01,520
and that they can trust it when you

554
00:19:01,520 --> 00:19:02,480
start to combine

555
00:19:02,480 --> 00:19:05,039
in toto with things such as reproducible

556
00:19:05,039 --> 00:19:07,200
builds and distributed builds

557
00:19:07,200 --> 00:19:09,120
it really gives you a strong idea of

558
00:19:09,120 --> 00:19:10,720
maybe when a build environment has just

559
00:19:10,720 --> 00:19:11,600
diverged

560
00:19:11,600 --> 00:19:14,080
and is producing different builds or

561
00:19:14,080 --> 00:19:15,919
maybe something malicious is going on in

562
00:19:15,919 --> 00:19:17,200
that build environment and you need to

563
00:19:17,200 --> 00:19:19,760
dig in deeper

564
00:19:19,760 --> 00:19:21,440
if you want to play with our code we've

565
00:19:21,440 --> 00:19:22,799
published it here on github

566
00:19:22,799 --> 00:19:26,240
on the box vote and toto golang repo

567
00:19:26,240 --> 00:19:29,520
thank you and i'll hand it back to cole

568
00:19:29,520 --> 00:19:32,799
as you can see we built a system with

569
00:19:32,799 --> 00:19:35,840
both intel inspire that allows us

570
00:19:35,840 --> 00:19:39,840
validity the trustworthy software

571
00:19:39,840 --> 00:19:43,760
decouple we'll be sticking around for

572
00:19:43,760 --> 00:19:48,879
any questions

