1
00:00:00,080 --> 00:00:02,560
hi i'm ali golshan senior director of

2
00:00:02,560 --> 00:00:04,000
software engineering at red hat

3
00:00:04,000 --> 00:00:05,680
previously cto and co-founder at

4
00:00:05,680 --> 00:00:06,799
stackrocks

5
00:00:06,799 --> 00:00:08,080
today we're going to be talking a little

6
00:00:08,080 --> 00:00:10,320
bit about supply chain security and why

7
00:00:10,320 --> 00:00:12,320
recently it has become such a hot topic

8
00:00:12,320 --> 00:00:14,400
in cloud native technologies

9
00:00:14,400 --> 00:00:16,160
one of the main things that we have seen

10
00:00:16,160 --> 00:00:17,600
is this change and

11
00:00:17,600 --> 00:00:19,920
shift in the attack landscape and attack

12
00:00:19,920 --> 00:00:20,720
surface

13
00:00:20,720 --> 00:00:22,800
from traditional exploitation and

14
00:00:22,800 --> 00:00:25,439
vulnerability exploitation at run time

15
00:00:25,439 --> 00:00:27,439
towards the supply chain and the reason

16
00:00:27,439 --> 00:00:29,439
for this is is that very simple

17
00:00:29,439 --> 00:00:31,679
um it's the fact that on the supply

18
00:00:31,679 --> 00:00:32,479
chain side

19
00:00:32,479 --> 00:00:34,559
there is a much more proliferated set of

20
00:00:34,559 --> 00:00:36,480
tools and solutions to use and there's

21
00:00:36,480 --> 00:00:38,160
truly no perimeter

22
00:00:38,160 --> 00:00:40,320
combined with the fact that there's less

23
00:00:40,320 --> 00:00:43,040
maturity around security tooling

24
00:00:43,040 --> 00:00:44,960
dev teams need to continuously

25
00:00:44,960 --> 00:00:46,800
communicate with security teams

26
00:00:46,800 --> 00:00:48,719
there's generally less controls around

27
00:00:48,719 --> 00:00:50,800
tools and products

28
00:00:50,800 --> 00:00:53,840
and the main goal on the developing side

29
00:00:53,840 --> 00:00:56,480
on the devops side on the left side is

30
00:00:56,480 --> 00:00:58,399
really lowering friction

31
00:00:58,399 --> 00:01:00,480
injecting velocity and as a result

32
00:01:00,480 --> 00:01:02,160
removing any blockers which has

33
00:01:02,160 --> 00:01:04,479
typically been associated with security

34
00:01:04,479 --> 00:01:07,119
has created this landscape where attacks

35
00:01:07,119 --> 00:01:09,600
are starting to grow substantially more

36
00:01:09,600 --> 00:01:11,840
the other aspect of it is that

37
00:01:11,840 --> 00:01:14,400
traditional attribution is substantially

38
00:01:14,400 --> 00:01:15,920
more difficult to apply

39
00:01:15,920 --> 00:01:18,479
on the supply chain side as a result it

40
00:01:18,479 --> 00:01:20,720
reduces the risk of discovery

41
00:01:20,720 --> 00:01:22,880
and it can actually increase the attack

42
00:01:22,880 --> 00:01:25,680
surface as an attacker you can go after

43
00:01:25,680 --> 00:01:27,840
this is also why it's very important and

44
00:01:27,840 --> 00:01:29,840
this is why at red hat we believe

45
00:01:29,840 --> 00:01:31,840
it's very important for security to be

46
00:01:31,840 --> 00:01:34,320
built in versus bolted on for developer

47
00:01:34,320 --> 00:01:36,960
tools and as part of the supply chain

48
00:01:36,960 --> 00:01:38,720
now what are some of the things that you

49
00:01:38,720 --> 00:01:40,560
have to consider and be able to make

50
00:01:40,560 --> 00:01:42,880
sure you take into consideration as part

51
00:01:42,880 --> 00:01:45,200
of your supply chain security well one

52
00:01:45,200 --> 00:01:46,560
major question is where am i

53
00:01:46,560 --> 00:01:48,320
where do my software components come

54
00:01:48,320 --> 00:01:50,240
from where am i getting my tools where

55
00:01:50,240 --> 00:01:52,720
am i getting all these particular images

56
00:01:52,720 --> 00:01:54,560
images and public registries can be

57
00:01:54,560 --> 00:01:56,560
potentially poisoned with unwanted

58
00:01:56,560 --> 00:01:57,360
application

59
00:01:57,360 --> 00:02:00,640
malware back doors or potentially

60
00:02:00,640 --> 00:02:03,040
components that are unuseful to you

61
00:02:03,040 --> 00:02:05,920
but could be very useful for attackers

62
00:02:05,920 --> 00:02:07,680
and for anybody trying to infiltrate

63
00:02:07,680 --> 00:02:08,959
your network

64
00:02:08,959 --> 00:02:11,360
in some cases these can be detected with

65
00:02:11,360 --> 00:02:13,200
static tool analysis

66
00:02:13,200 --> 00:02:14,720
and this is why it's very important to

67
00:02:14,720 --> 00:02:16,400
have static analysis as part of your

68
00:02:16,400 --> 00:02:17,120
system

69
00:02:17,120 --> 00:02:19,120
however introducing a lot of vanilla

70
00:02:19,120 --> 00:02:21,440
images and ensuring that there's a large

71
00:02:21,440 --> 00:02:23,840
touch point to your potentially infected

72
00:02:23,840 --> 00:02:24,560
images

73
00:02:24,560 --> 00:02:26,640
can also ensure that the deployment of

74
00:02:26,640 --> 00:02:28,560
these images increases and eventually

75
00:02:28,560 --> 00:02:29,200
they make them

76
00:02:29,200 --> 00:02:31,680
into the stream of the development the

77
00:02:31,680 --> 00:02:33,040
other part of it is

78
00:02:33,040 --> 00:02:34,480
vulnerability management and

79
00:02:34,480 --> 00:02:36,160
configuration management as part of the

80
00:02:36,160 --> 00:02:38,480
supply chain in a declarative fashion

81
00:02:38,480 --> 00:02:40,640
is still a substantially unsolved

82
00:02:40,640 --> 00:02:41,519
problem

83
00:02:41,519 --> 00:02:43,680
the volume of attacks is increasing

84
00:02:43,680 --> 00:02:45,599
dramatically suggesting that there's

85
00:02:45,599 --> 00:02:45,920
more

86
00:02:45,920 --> 00:02:48,480
and more organized infrastructure and

87
00:02:48,480 --> 00:02:48,959
some

88
00:02:48,959 --> 00:02:51,840
targeting of which companies introduce a

89
00:02:51,840 --> 00:02:52,400
higher

90
00:02:52,400 --> 00:02:54,480
level of tooling into other companies

91
00:02:54,480 --> 00:02:55,680
supply chains

92
00:02:55,680 --> 00:02:57,280
obviously this is an example that we

93
00:02:57,280 --> 00:02:58,959
recently saw with the

94
00:02:58,959 --> 00:03:01,519
solar winds attacks combined with the

95
00:03:01,519 --> 00:03:03,440
attribution we talked about and the

96
00:03:03,440 --> 00:03:05,120
problem that it presents on the supply

97
00:03:05,120 --> 00:03:05,920
chain

98
00:03:05,920 --> 00:03:07,280
poisoning the well can be a

99
00:03:07,280 --> 00:03:09,040
substantially more lucrative way to

100
00:03:09,040 --> 00:03:10,319
attack businesses

101
00:03:10,319 --> 00:03:12,959
versus actively engaging of exploitation

102
00:03:12,959 --> 00:03:14,959
exploitation of vulnerabilities

103
00:03:14,959 --> 00:03:18,159
at run time so when we talk about cves

104
00:03:18,159 --> 00:03:20,480
even though this is an unsolved problem

105
00:03:20,480 --> 00:03:21,680
there is still a lot of

106
00:03:21,680 --> 00:03:23,680
gaps that we need to go and figure out

107
00:03:23,680 --> 00:03:25,840
so we need to pay more attention to it

108
00:03:25,840 --> 00:03:28,159
um understanding vulnerability packages

109
00:03:28,159 --> 00:03:29,920
and their dependencies

110
00:03:29,920 --> 00:03:31,760
these typically create thousands of

111
00:03:31,760 --> 00:03:33,840
alerts and there's no good way to triage

112
00:03:33,840 --> 00:03:35,440
these understanding what are they

113
00:03:35,440 --> 00:03:37,120
actually relevant to

114
00:03:37,120 --> 00:03:39,840
which ones can be solved or upgraded if

115
00:03:39,840 --> 00:03:42,239
they are upgraded what can they break

116
00:03:42,239 --> 00:03:44,480
um which ones are actually exposed to me

117
00:03:44,480 --> 00:03:45,599
in runtime

118
00:03:45,599 --> 00:03:47,440
are they allowing for permissive attack

119
00:03:47,440 --> 00:03:50,560
surface do i have proper configurations

120
00:03:50,560 --> 00:03:52,000
to be able to prevent them

121
00:03:52,000 --> 00:03:53,439
and more importantly which ones are

122
00:03:53,439 --> 00:03:55,760
actually being exploited into the wild

123
00:03:55,760 --> 00:03:57,920
so i can push that information back to

124
00:03:57,920 --> 00:04:00,640
my engineers to my developers to reduce

125
00:04:00,640 --> 00:04:02,720
that time in resolving those particular

126
00:04:02,720 --> 00:04:03,760
problems

127
00:04:03,760 --> 00:04:05,439
now typically one of the things that we

128
00:04:05,439 --> 00:04:07,519
have seen from supply chain attacks and

129
00:04:07,519 --> 00:04:10,319
general attacks on misconfigurations

130
00:04:10,319 --> 00:04:11,840
really the way we can solve these

131
00:04:11,840 --> 00:04:13,840
problems through a declarative fashion

132
00:04:13,840 --> 00:04:15,840
the problems have centered around mostly

133
00:04:15,840 --> 00:04:17,839
for example installing cryptocurrency

134
00:04:17,839 --> 00:04:19,040
miners

135
00:04:19,040 --> 00:04:20,798
or establishing a footprint for

136
00:04:20,798 --> 00:04:22,880
distributed dental service attacks

137
00:04:22,880 --> 00:04:24,960
but more recently we have started to see

138
00:04:24,960 --> 00:04:26,000
a substantially more

139
00:04:26,000 --> 00:04:28,639
targeted approach for supply chain

140
00:04:28,639 --> 00:04:29,759
attacks

141
00:04:29,759 --> 00:04:31,919
again being able to push yourself into a

142
00:04:31,919 --> 00:04:34,080
stream where because of all these layers

143
00:04:34,080 --> 00:04:36,000
and all these abstractions you become

144
00:04:36,000 --> 00:04:37,919
embedded into images and tools

145
00:04:37,919 --> 00:04:39,440
and eventually become part of the

146
00:04:39,440 --> 00:04:42,160
existing stack which creates substantial

147
00:04:42,160 --> 00:04:44,639
problems now you combine this with

148
00:04:44,639 --> 00:04:46,320
additional problems like

149
00:04:46,320 --> 00:04:48,560
uh the fact that more and more we're

150
00:04:48,560 --> 00:04:50,479
using from a development and automation

151
00:04:50,479 --> 00:04:52,320
standpoint infrastructure as code

152
00:04:52,320 --> 00:04:53,199
templates

153
00:04:53,199 --> 00:04:54,639
so whether we're using things like

154
00:04:54,639 --> 00:04:56,800
hashicorp terra hashicorp terraform

155
00:04:56,800 --> 00:04:59,600
aws cloud formation templates kubernetes

156
00:04:59,600 --> 00:05:01,440
app manifest yamls

157
00:05:01,440 --> 00:05:02,960
these are things developers use and

158
00:05:02,960 --> 00:05:05,360
devops teams use to be able to move

159
00:05:05,360 --> 00:05:07,759
faster but at the same time if we can

160
00:05:07,759 --> 00:05:08,560
essentially

161
00:05:08,560 --> 00:05:10,960
move more and more to the left and be

162
00:05:10,960 --> 00:05:12,800
able to do things as an example

163
00:05:12,800 --> 00:05:15,199
tools like for example kube linter where

164
00:05:15,199 --> 00:05:16,000
we can actually

165
00:05:16,000 --> 00:05:18,000
fix misconfiguration and be able to

166
00:05:18,000 --> 00:05:20,160
identify some of these problems in

167
00:05:20,160 --> 00:05:22,560
configuration and supply chain issues

168
00:05:22,560 --> 00:05:24,160
before they're introduced into

169
00:05:24,160 --> 00:05:25,759
infrastructure at runtime

170
00:05:25,759 --> 00:05:28,080
they present a much easier way to solve

171
00:05:28,080 --> 00:05:29,280
these things

172
00:05:29,280 --> 00:05:30,720
the other reason why supply chain

173
00:05:30,720 --> 00:05:32,479
security is very important is

174
00:05:32,479 --> 00:05:33,520
understanding these

175
00:05:33,520 --> 00:05:36,800
deep dependencies several layers down

176
00:05:36,800 --> 00:05:38,400
and being able to understand what is

177
00:05:38,400 --> 00:05:39,840
good and what is bad

178
00:05:39,840 --> 00:05:41,440
um in a lot of the cases the

179
00:05:41,440 --> 00:05:43,280
dependencies become a problem

180
00:05:43,280 --> 00:05:45,120
because sometimes you have maintainers

181
00:05:45,120 --> 00:05:47,120
that abandon them or sell them

182
00:05:47,120 --> 00:05:49,039
or you have in a case where bad actors

183
00:05:49,039 --> 00:05:50,720
take control of them

184
00:05:50,720 --> 00:05:52,479
and they somehow end up on a developer's

185
00:05:52,479 --> 00:05:54,240
machine so to be able to understand and

186
00:05:54,240 --> 00:05:56,160
have good hygiene as part of your supply

187
00:05:56,160 --> 00:05:56,639
chain

188
00:05:56,639 --> 00:05:58,800
to be able to understand dependencies

189
00:05:58,800 --> 00:06:00,639
these assets and then managing this

190
00:06:00,639 --> 00:06:02,160
inventory of assets and how they're

191
00:06:02,160 --> 00:06:03,280
getting introduced into your

192
00:06:03,280 --> 00:06:04,319
infrastructure

193
00:06:04,319 --> 00:06:06,800
is very critical this is why we think

194
00:06:06,800 --> 00:06:08,400
it's very important not just to have

195
00:06:08,400 --> 00:06:09,199
security for

196
00:06:09,199 --> 00:06:11,520
build deploy and run but it's very

197
00:06:11,520 --> 00:06:12,800
important to be able to tie

198
00:06:12,800 --> 00:06:14,720
all these stages together through a

199
00:06:14,720 --> 00:06:16,800
cohesive policy language

200
00:06:16,800 --> 00:06:19,039
where context can be shared and problems

201
00:06:19,039 --> 00:06:20,080
can be solved

202
00:06:20,080 --> 00:06:23,120
based on actual relevance and impact

203
00:06:23,120 --> 00:06:24,960
one of the other types of more recent

204
00:06:24,960 --> 00:06:26,880
attacks we've seen on the supply chain

205
00:06:26,880 --> 00:06:28,560
is actually the notions of typo

206
00:06:28,560 --> 00:06:30,000
squatting which is we're starting to see

207
00:06:30,000 --> 00:06:31,600
a more rise towards

208
00:06:31,600 --> 00:06:33,199
so as we talk more and more about

209
00:06:33,199 --> 00:06:35,199
infrastructure as code templates

210
00:06:35,199 --> 00:06:37,680
it's very important to understand that

211
00:06:37,680 --> 00:06:39,520
if these misconfigurations are

212
00:06:39,520 --> 00:06:41,120
introduced into your infrastructure

213
00:06:41,120 --> 00:06:43,440
they substantially amplify the risk that

214
00:06:43,440 --> 00:06:45,840
goes into your runtime infrastructure

215
00:06:45,840 --> 00:06:47,680
and in a lot of cases these become

216
00:06:47,680 --> 00:06:49,520
embedded in your infrastructure and

217
00:06:49,520 --> 00:06:51,919
very difficult to roll back this is why

218
00:06:51,919 --> 00:06:53,759
you constantly now hear about this

219
00:06:53,759 --> 00:06:55,680
notion of shift left and why it's very

220
00:06:55,680 --> 00:06:57,039
important to do that

221
00:06:57,039 --> 00:06:59,440
now we recognize at red hat that there

222
00:06:59,440 --> 00:07:00,400
is a very fine

223
00:07:00,400 --> 00:07:02,880
balance between velocity and flexibility

224
00:07:02,880 --> 00:07:04,000
for developers

225
00:07:04,000 --> 00:07:05,360
developers want to be able to choose

226
00:07:05,360 --> 00:07:06,720
their packages want to be able to

227
00:07:06,720 --> 00:07:08,400
determine which containers they want to

228
00:07:08,400 --> 00:07:09,280
use

229
00:07:09,280 --> 00:07:11,199
and being able to essentially determine

230
00:07:11,199 --> 00:07:12,720
how they build together

231
00:07:12,720 --> 00:07:15,120
their tools that allow them to move

232
00:07:15,120 --> 00:07:16,000
faster and deliver

233
00:07:16,000 --> 00:07:18,000
business goals but at the same time we

234
00:07:18,000 --> 00:07:20,000
want to have vetting and controls in

235
00:07:20,000 --> 00:07:20,479
place

236
00:07:20,479 --> 00:07:22,400
so we can apply compliance whether it

237
00:07:22,400 --> 00:07:24,880
starts from very basic aspects of cis

238
00:07:24,880 --> 00:07:25,840
benchmarks

239
00:07:25,840 --> 00:07:29,039
or more custom or very specific useful

240
00:07:29,039 --> 00:07:31,520
custom tools and controls that are

241
00:07:31,520 --> 00:07:33,120
specific to your business and

242
00:07:33,120 --> 00:07:35,919
organization to be able to vet these out

243
00:07:35,919 --> 00:07:38,479
the other reason as to why supply chain

244
00:07:38,479 --> 00:07:40,319
security becomes very important and

245
00:07:40,319 --> 00:07:41,440
dealing with these issues in a

246
00:07:41,440 --> 00:07:42,800
declarative fashion

247
00:07:42,800 --> 00:07:44,879
is not just the infrastructure itself

248
00:07:44,879 --> 00:07:47,120
but all the new layers of tooling that

249
00:07:47,120 --> 00:07:48,960
are highly automating and contributing

250
00:07:48,960 --> 00:07:50,080
to scale

251
00:07:50,080 --> 00:07:51,919
for example going from kubernetes to

252
00:07:51,919 --> 00:07:53,919
istio general service meshes

253
00:07:53,919 --> 00:07:55,759
these are all components that are highly

254
00:07:55,759 --> 00:07:57,440
contributing to the velocity of

255
00:07:57,440 --> 00:07:58,319
development

256
00:07:58,319 --> 00:08:00,319
so if we do not take on this notion of

257
00:08:00,319 --> 00:08:02,479
shared responsibility and ensure that

258
00:08:02,479 --> 00:08:04,080
our supply chains are properly locked

259
00:08:04,080 --> 00:08:04,800
down

260
00:08:04,800 --> 00:08:06,400
looking for bad indicators and

261
00:08:06,400 --> 00:08:07,840
eventually solving these through

262
00:08:07,840 --> 00:08:08,879
configurations

263
00:08:08,879 --> 00:08:11,360
and declarative fashions we end up with

264
00:08:11,360 --> 00:08:12,000
a runtime

265
00:08:12,000 --> 00:08:13,919
environment that you really don't have

266
00:08:13,919 --> 00:08:15,440
to think about your highest risk

267
00:08:15,440 --> 00:08:17,520
environment being even a vulnerability

268
00:08:17,520 --> 00:08:19,039
that is going to be exploited

269
00:08:19,039 --> 00:08:21,039
it could be simple misconfigurations in

270
00:08:21,039 --> 00:08:24,000
your our back or even exposed apis

271
00:08:24,000 --> 00:08:25,840
and this is again what brings us back

272
00:08:25,840 --> 00:08:27,919
where at red hat what we are focused on

273
00:08:27,919 --> 00:08:30,319
is ensuring developer velocity business

274
00:08:30,319 --> 00:08:32,240
moving as quickly as possible

275
00:08:32,240 --> 00:08:34,479
but at the same time for us to integrate

276
00:08:34,479 --> 00:08:36,080
all of our security tooling and

277
00:08:36,080 --> 00:08:36,880
knowledge

278
00:08:36,880 --> 00:08:39,519
across the entire life cycle and ensure

279
00:08:39,519 --> 00:08:41,279
that we are leveraging as many open

280
00:08:41,279 --> 00:08:43,039
source tools and as many tools that the

281
00:08:43,039 --> 00:08:44,800
developers can integrate into their

282
00:08:44,800 --> 00:08:46,320
existing workflows

283
00:08:46,320 --> 00:08:48,080
to solve for a lot of these particular

284
00:08:48,080 --> 00:08:49,760
supply chain securities

285
00:08:49,760 --> 00:08:51,279
thank you very much for your time and if

286
00:08:51,279 --> 00:08:52,399
you have any questions feel free to

287
00:08:52,399 --> 00:08:55,839
reach out to me

