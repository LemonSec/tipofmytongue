1
00:00:00,719 --> 00:00:02,560
hey everyone this is jim beguardia from

2
00:00:02,560 --> 00:00:04,720
nermata and i'm here with adrian ludman

3
00:00:04,720 --> 00:00:05,759
from google

4
00:00:05,759 --> 00:00:07,600
and we're going to talk about namespaces

5
00:00:07,600 --> 00:00:09,120
as a service using

6
00:00:09,120 --> 00:00:12,400
hnc and kiverno so in kubernetes

7
00:00:12,400 --> 00:00:13,599
namespaces as a

8
00:00:13,599 --> 00:00:15,519
are a fundamental building block for

9
00:00:15,519 --> 00:00:17,680
segmentation isolation

10
00:00:17,680 --> 00:00:19,359
and a number of other kubernetes

11
00:00:19,359 --> 00:00:21,359
resources such as

12
00:00:21,359 --> 00:00:25,279
roles or role bindings secrets

13
00:00:25,279 --> 00:00:27,760
quotas all of these also build on top of

14
00:00:27,760 --> 00:00:30,000
name spaces

15
00:00:30,000 --> 00:00:32,159
when kubernetes is used within an

16
00:00:32,159 --> 00:00:34,079
organization

17
00:00:34,079 --> 00:00:36,320
and every organization of course is

18
00:00:36,320 --> 00:00:37,360
looking to deliver

19
00:00:37,360 --> 00:00:39,840
value faster to their customers to

20
00:00:39,840 --> 00:00:41,600
increase efficiencies

21
00:00:41,600 --> 00:00:43,760
multi-tenancy very quickly becomes

22
00:00:43,760 --> 00:00:45,440
important

23
00:00:45,440 --> 00:00:47,680
as a way of achieving some of these

24
00:00:47,680 --> 00:00:49,120
goals

25
00:00:49,120 --> 00:00:51,039
so there are two common ways that

26
00:00:51,039 --> 00:00:53,039
multi-tenancy is typically delivered

27
00:00:53,039 --> 00:00:54,800
within organizations

28
00:00:54,800 --> 00:00:57,280
either using clusters as a service where

29
00:00:57,280 --> 00:00:58,559
entire clusters

30
00:00:58,559 --> 00:01:01,520
are created for application or protein

31
00:01:01,520 --> 00:01:02,960
or using namespaces

32
00:01:02,960 --> 00:01:06,400
as a service where a shared cluster

33
00:01:06,400 --> 00:01:08,640
is used and different teams different

34
00:01:08,640 --> 00:01:10,960
apps can leverage namespaces

35
00:01:10,960 --> 00:01:13,200
so each model has different pros and

36
00:01:13,200 --> 00:01:14,159
cons

37
00:01:14,159 --> 00:01:16,320
namespaces as a service is slightly less

38
00:01:16,320 --> 00:01:17,439
flexible

39
00:01:17,439 --> 00:01:19,360
because you know you cannot have

40
00:01:19,360 --> 00:01:22,000
cluster-wide resources per tenant

41
00:01:22,000 --> 00:01:24,479
but there's a lot of value in utilizing

42
00:01:24,479 --> 00:01:25,759
namespaces

43
00:01:25,759 --> 00:01:28,479
as a service for agility for increased

44
00:01:28,479 --> 00:01:30,640
efficiencies

45
00:01:30,640 --> 00:01:32,799
so today what we're going to see is how

46
00:01:32,799 --> 00:01:35,600
hnc or hierarchical namespace controller

47
00:01:35,600 --> 00:01:37,520
and caverno work together

48
00:01:37,520 --> 00:01:40,159
to deliver namespaces as a service for

49
00:01:40,159 --> 00:01:43,119
organizations

50
00:01:43,520 --> 00:01:45,680
so i'm going to talk a little bit about

51
00:01:45,680 --> 00:01:47,360
hnc itself

52
00:01:47,360 --> 00:01:49,840
so as the name implies what we're doing

53
00:01:49,840 --> 00:01:51,439
is we're taking existing kubernetes

54
00:01:51,439 --> 00:01:52,399
namespaces

55
00:01:52,399 --> 00:01:54,079
and making them hierarchical now why

56
00:01:54,079 --> 00:01:55,680
would you want to do this uh

57
00:01:55,680 --> 00:01:58,479
namespaces as jim said are fundamental

58
00:01:58,479 --> 00:02:00,000
to a lot of different areas but they are

59
00:02:00,000 --> 00:02:02,000
also cluster level resources

60
00:02:02,000 --> 00:02:03,200
and by default are completely

61
00:02:03,200 --> 00:02:04,560
independent from each other this does

62
00:02:04,560 --> 00:02:06,719
not make them very useful

63
00:02:06,719 --> 00:02:10,080
uh within any kind of level of tenancy

64
00:02:10,080 --> 00:02:11,760
uh because you need cluster level

65
00:02:11,760 --> 00:02:13,520
permissions to modify them

66
00:02:13,520 --> 00:02:16,720
and it's hard to apply policies across

67
00:02:16,720 --> 00:02:19,840
um across a set of namespaces so with

68
00:02:19,840 --> 00:02:21,440
hierarchical namespaces you can arrange

69
00:02:21,440 --> 00:02:22,800
them into a hierarchy

70
00:02:22,800 --> 00:02:24,560
with an arbitrary depth and you could

71
00:02:24,560 --> 00:02:25,840
modify that

72
00:02:25,840 --> 00:02:27,200
that hierarchy over time with enough

73
00:02:27,200 --> 00:02:29,040
permissions what this allows you to do

74
00:02:29,040 --> 00:02:30,959
is it allows you to propagate policies

75
00:02:30,959 --> 00:02:32,480
from parents to children

76
00:02:32,480 --> 00:02:34,640
and also it lets you do some neat things

77
00:02:34,640 --> 00:02:36,560
with applying policies such as network

78
00:02:36,560 --> 00:02:38,080
policy across a group of related name

79
00:02:38,080 --> 00:02:39,599
spaces as well

80
00:02:39,599 --> 00:02:41,840
and there's a bunch of other talks

81
00:02:41,840 --> 00:02:43,519
online that you can find about this

82
00:02:43,519 --> 00:02:44,800
another thing that lets you do is

83
00:02:44,800 --> 00:02:46,800
self-service namespace creation so

84
00:02:46,800 --> 00:02:48,080
typically you need cluster level

85
00:02:48,080 --> 00:02:49,840
permissions to create a namespace but

86
00:02:49,840 --> 00:02:52,160
with hncu you can create a small object

87
00:02:52,160 --> 00:02:53,440
called an anchor in the parent which

88
00:02:53,440 --> 00:02:54,720
we'll demonstrate later

89
00:02:54,720 --> 00:02:56,879
and agency will create the subname space

90
00:02:56,879 --> 00:02:59,120
for you and then automatically propagate

91
00:02:59,120 --> 00:03:02,800
all the configured policies as well

92
00:03:02,800 --> 00:03:04,400
so why would you use this well it's

93
00:03:04,400 --> 00:03:06,159
great for really fine-grained namespaces

94
00:03:06,159 --> 00:03:06,800
if you just

95
00:03:06,800 --> 00:03:08,800
gave every tenant to one namespace and

96
00:03:08,800 --> 00:03:10,239
said well okay here's your playground

97
00:03:10,239 --> 00:03:11,840
you can do everything in there

98
00:03:11,840 --> 00:03:13,680
that can work but it doesn't allow you

99
00:03:13,680 --> 00:03:15,440
to differentiate between

100
00:03:15,440 --> 00:03:17,680
uh different security policies that

101
00:03:17,680 --> 00:03:19,360
might be applied to different workloads

102
00:03:19,360 --> 00:03:22,159
that are run by that one tenant um and

103
00:03:22,159 --> 00:03:22,879
so

104
00:03:22,879 --> 00:03:24,879
with hsc you can write composable

105
00:03:24,879 --> 00:03:26,959
multi-name space policies where you need

106
00:03:26,959 --> 00:03:29,040
and also apply workload specific

107
00:03:29,040 --> 00:03:30,480
policies where those are required as

108
00:03:30,480 --> 00:03:31,200
well

109
00:03:31,200 --> 00:03:33,680
and also it's useful for cell service

110
00:03:33,680 --> 00:03:35,280
name spaces any time where you wouldn't

111
00:03:35,280 --> 00:03:36,879
want to file a ticket for a cluster

112
00:03:36,879 --> 00:03:37,920
level operation

113
00:03:37,920 --> 00:03:39,760
this can be very useful in dev clusters

114
00:03:39,760 --> 00:03:41,280
or in clusters that use for things like

115
00:03:41,280 --> 00:03:43,840
batch operations

116
00:03:43,840 --> 00:03:46,720
now um hnc on its own can't really

117
00:03:46,720 --> 00:03:49,120
provide namespaces as a service because

118
00:03:49,120 --> 00:03:51,120
if you create a new top level namespace

119
00:03:51,120 --> 00:03:52,560
it's completely empty there's nothing in

120
00:03:52,560 --> 00:03:53,360
there

121
00:03:53,360 --> 00:03:56,720
um and when you create a subname space

122
00:03:56,720 --> 00:03:57,439
it only

123
00:03:57,439 --> 00:03:59,439
propagates objects from the parents so

124
00:03:59,439 --> 00:04:01,439
for example you can't put a quota

125
00:04:01,439 --> 00:04:02,959
in a child that wasn't defined and

126
00:04:02,959 --> 00:04:05,920
apparent um but with caverno you can

127
00:04:05,920 --> 00:04:09,040
use its generation in mutation um

128
00:04:09,040 --> 00:04:11,439
capabilities which can execute actions

129
00:04:11,439 --> 00:04:12,959
when you create a new namespace versus

130
00:04:12,959 --> 00:04:14,319
up namespace and the two of these

131
00:04:14,319 --> 00:04:15,439
together

132
00:04:15,439 --> 00:04:17,680
can give you a big piece of the

133
00:04:17,680 --> 00:04:20,798
namespace as a service picture

134
00:04:20,798 --> 00:04:22,960
so very briefly caverno is a policy

135
00:04:22,960 --> 00:04:25,040
engine designed for kubernetes

136
00:04:25,040 --> 00:04:27,199
where policies are just modeled as

137
00:04:27,199 --> 00:04:29,360
kubernetes resources itself

138
00:04:29,360 --> 00:04:31,280
there's no new language to learn so you

139
00:04:31,280 --> 00:04:32,720
can use familiar

140
00:04:32,720 --> 00:04:35,840
yaml syntax um very similar to

141
00:04:35,840 --> 00:04:38,160
customizers overlay patterns

142
00:04:38,160 --> 00:04:39,600
which you can use to define your

143
00:04:39,600 --> 00:04:41,840
policies itself and with caverno

144
00:04:41,840 --> 00:04:44,080
policies you can validate configurations

145
00:04:44,080 --> 00:04:45,600
you can also mutate existing

146
00:04:45,600 --> 00:04:46,960
configurations

147
00:04:46,960 --> 00:04:49,360
and generate new resources as required

148
00:04:49,360 --> 00:04:50,639
based on different

149
00:04:50,639 --> 00:04:53,360
triggers so what we'll take a quick look

150
00:04:53,360 --> 00:04:54,560
at in a demo

151
00:04:54,560 --> 00:04:56,479
is caverno managing the top level

152
00:04:56,479 --> 00:04:57,919
namespaces and then

153
00:04:57,919 --> 00:05:01,600
hnc working to create the subname spaces

154
00:05:01,600 --> 00:05:03,600
and propagating resources

155
00:05:03,600 --> 00:05:06,560
within that hierarchy itself so let me

156
00:05:06,560 --> 00:05:07,600
switch to my

157
00:05:07,600 --> 00:05:10,639
console and what i have here um

158
00:05:10,639 --> 00:05:13,759
is agency and group config

159
00:05:13,759 --> 00:05:17,039
and and given our already installed

160
00:05:17,039 --> 00:05:20,240
and if i look at the hnc setup um i'm

161
00:05:20,240 --> 00:05:21,039
going to use the

162
00:05:21,039 --> 00:05:23,759
hns command line plugin and describe the

163
00:05:23,759 --> 00:05:25,759
configuration i already have it set up

164
00:05:25,759 --> 00:05:27,759
to propagate different resources like

165
00:05:27,759 --> 00:05:29,280
network policies

166
00:05:29,280 --> 00:05:31,600
role bindings and roles so the first

167
00:05:31,600 --> 00:05:32,560
thing i'm going to do

168
00:05:32,560 --> 00:05:34,639
and just to further you know kind of

169
00:05:34,639 --> 00:05:36,320
explain the setup i have

170
00:05:36,320 --> 00:05:38,639
i've created a couple of custom roles

171
00:05:38,639 --> 00:05:41,440
these roles can only create namespaces

172
00:05:41,440 --> 00:05:43,440
when they can only operate based on

173
00:05:43,440 --> 00:05:45,039
kivernal policies they'll get

174
00:05:45,039 --> 00:05:46,800
fine-grained permissions

175
00:05:46,800 --> 00:05:50,160
to only operate on their particular

176
00:05:50,160 --> 00:05:52,639
namespaces itself so i'll

177
00:05:52,639 --> 00:05:54,240
go ahead and create try to create a

178
00:05:54,240 --> 00:05:56,400
namespace called test

179
00:05:56,400 --> 00:05:59,680
as a user one of the namespace admin

180
00:05:59,680 --> 00:06:01,199
users nancy

181
00:06:01,199 --> 00:06:03,039
and kivarno is going to block that and

182
00:06:03,039 --> 00:06:05,680
say that the namespace needs to have a

183
00:06:05,680 --> 00:06:06,720
label

184
00:06:06,720 --> 00:06:08,720
which designates what kind of resource

185
00:06:08,720 --> 00:06:10,400
quota it requires

186
00:06:10,400 --> 00:06:12,639
so to go ahead and create this i'm going

187
00:06:12,639 --> 00:06:14,560
to now use

188
00:06:14,560 --> 00:06:17,360
a yaml i already have with the necessary

189
00:06:17,360 --> 00:06:18,160
label

190
00:06:18,160 --> 00:06:21,759
and in fact what i should do is i'm

191
00:06:21,759 --> 00:06:23,120
going to create this as

192
00:06:23,120 --> 00:06:26,479
the as the right user so i'll delete

193
00:06:26,479 --> 00:06:28,319
that namespace which i created as an

194
00:06:28,319 --> 00:06:29,440
admin

195
00:06:29,440 --> 00:06:33,360
and we'll go ahead and create it again

196
00:06:33,360 --> 00:06:37,759
as the user

197
00:06:37,759 --> 00:06:42,639
nancy so let's try that again

198
00:06:46,800 --> 00:06:48,479
okay so now that the namespace is

199
00:06:48,479 --> 00:06:50,080
created as this user

200
00:06:50,080 --> 00:06:51,520
if we go ahead and describe the

201
00:06:51,520 --> 00:06:54,080
namespace what we should see

202
00:06:54,080 --> 00:06:58,000
um is that the properties for that

203
00:06:58,000 --> 00:07:00,880
namespace so we created test so it

204
00:07:00,880 --> 00:07:02,160
already has the resource

205
00:07:02,160 --> 00:07:05,120
quotas it has you know other uh like the

206
00:07:05,120 --> 00:07:06,800
limit range configured

207
00:07:06,800 --> 00:07:10,560
and it should also have if we do

208
00:07:10,560 --> 00:07:14,000
um a get you know for the net

209
00:07:14,000 --> 00:07:17,039
network policy

210
00:07:17,039 --> 00:07:19,919
on that namespace as that user we should

211
00:07:19,919 --> 00:07:21,840
see that we're allowed to

212
00:07:21,840 --> 00:07:23,919
see the there's a default deny network

213
00:07:23,919 --> 00:07:25,680
policy and the

214
00:07:25,680 --> 00:07:28,319
as that user we have visibility into it

215
00:07:28,319 --> 00:07:29,440
now just as a quick

216
00:07:29,440 --> 00:07:31,840
test if i try this as the other user i'm

217
00:07:31,840 --> 00:07:33,759
not allowed access to it

218
00:07:33,759 --> 00:07:35,840
so now let's go ahead and create a sub

219
00:07:35,840 --> 00:07:37,440
namespace using

220
00:07:37,440 --> 00:07:41,680
hnc um so i'll use the hns plugin

221
00:07:41,680 --> 00:07:45,280
and here i'm gonna to for that

222
00:07:45,280 --> 00:07:47,440
user i'm going to create another

223
00:07:47,440 --> 00:07:49,280
namespace called test2

224
00:07:49,280 --> 00:07:52,960
under test and we'll also do this

225
00:07:52,960 --> 00:07:56,479
as the namespace admin user nancy

226
00:07:56,479 --> 00:07:58,800
and so this creates the name the sub

227
00:07:58,800 --> 00:08:01,039
name space and just to see

228
00:08:01,039 --> 00:08:04,400
how that's set up if we look at that

229
00:08:04,400 --> 00:08:07,280
as nancy we should be able to see the

230
00:08:07,280 --> 00:08:08,080
tree

231
00:08:08,080 --> 00:08:10,479
and we should also again just to verify

232
00:08:10,479 --> 00:08:12,000
if we try it as the other user

233
00:08:12,000 --> 00:08:15,120
we're not able to see that and if i do a

234
00:08:15,120 --> 00:08:17,440
describe on this

235
00:08:17,440 --> 00:08:20,400
on test2 which is the other namespace i

236
00:08:20,400 --> 00:08:22,240
also see that the right resources are

237
00:08:22,240 --> 00:08:23,599
propagated

238
00:08:23,599 --> 00:08:25,360
so this is just a really quick demo

239
00:08:25,360 --> 00:08:27,440
which shows how the two tools again can

240
00:08:27,440 --> 00:08:28,800
work together

241
00:08:28,800 --> 00:08:30,800
to solve some of the main problems for

242
00:08:30,800 --> 00:08:34,240
namespaces as a service

243
00:08:34,479 --> 00:08:36,958
so just to summarize multi-tenancy is

244
00:08:36,958 --> 00:08:39,279
essential for most organizations for

245
00:08:39,279 --> 00:08:40,799
community success

246
00:08:40,799 --> 00:08:43,120
and namespaces as a service is a handy

247
00:08:43,120 --> 00:08:45,440
way of providing multi-tenancy for a

248
00:08:45,440 --> 00:08:46,240
large

249
00:08:46,240 --> 00:08:49,279
segment of applications and hnc and

250
00:08:49,279 --> 00:08:51,040
kiverno can work together

251
00:08:51,040 --> 00:08:53,760
to automate some of the key concerns for

252
00:08:53,760 --> 00:08:55,680
namespaces as a service

253
00:08:55,680 --> 00:08:57,200
so please reach out if you have more

254
00:08:57,200 --> 00:08:59,680
questions we are on the multi-tenancy

255
00:08:59,680 --> 00:09:00,880
slack channel

256
00:09:00,880 --> 00:09:03,920
uh on the kubernetes slack and i also

257
00:09:03,920 --> 00:09:04,480
have some

258
00:09:04,480 --> 00:09:07,920
we have links here for the repos for hnc

259
00:09:07,920 --> 00:09:09,519
as well as kiberno

260
00:09:09,519 --> 00:09:11,680
and if you want to learn more about uh

261
00:09:11,680 --> 00:09:13,760
hnc you can go check out some past

262
00:09:13,760 --> 00:09:16,959
talks that we've given at uh q con over

263
00:09:16,959 --> 00:09:18,399
the past year or so

264
00:09:18,399 --> 00:09:21,920
thanks a lot

