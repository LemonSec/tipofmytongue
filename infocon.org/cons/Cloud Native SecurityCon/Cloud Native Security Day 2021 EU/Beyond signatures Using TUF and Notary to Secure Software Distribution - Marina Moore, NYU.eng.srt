1
00:00:01,360 --> 00:00:03,760
hello everyone my name is marina

2
00:00:03,760 --> 00:00:06,399
and i am a phd student at nyu and i'm

3
00:00:06,399 --> 00:00:07,759
going to talk to you today

4
00:00:07,759 --> 00:00:09,200
about some of the work i've been doing

5
00:00:09,200 --> 00:00:12,799
for secure software distribution

6
00:00:14,000 --> 00:00:15,519
so why do we care about secure software

7
00:00:15,519 --> 00:00:17,440
distribution this is an attack factor

8
00:00:17,440 --> 00:00:18,720
that's being used a lot

9
00:00:18,720 --> 00:00:20,640
especially recently to distribute

10
00:00:20,640 --> 00:00:22,640
malware to large numbers of systems all

11
00:00:22,640 --> 00:00:23,519
at once

12
00:00:23,519 --> 00:00:25,119
this includes the recent solar wind

13
00:00:25,119 --> 00:00:27,279
attack which relied on software updates

14
00:00:27,279 --> 00:00:27,920
as well as

15
00:00:27,920 --> 00:00:31,439
a wider software supply chain attack to

16
00:00:31,439 --> 00:00:32,238
distribute

17
00:00:32,238 --> 00:00:36,079
that malware in addition the mall

18
00:00:36,079 --> 00:00:38,559
sorry let's flame malware was

19
00:00:38,559 --> 00:00:40,320
distributed through microsoft windows

20
00:00:40,320 --> 00:00:40,879
update

21
00:00:40,879 --> 00:00:43,360
not pettya which caused all kinds of

22
00:00:43,360 --> 00:00:44,000
outages

23
00:00:44,000 --> 00:00:46,000
in hospitals and major companies also

24
00:00:46,000 --> 00:00:48,480
spread through software updates

25
00:00:48,480 --> 00:00:50,239
more close to this community the docker

26
00:00:50,239 --> 00:00:52,320
hub password database compromised was

27
00:00:52,320 --> 00:00:52,800
part of

28
00:00:52,800 --> 00:00:55,199
you know a docker hub compromise and

29
00:00:55,199 --> 00:00:57,199
many images were compromised there

30
00:00:57,199 --> 00:00:59,120
although this was very much mitigated by

31
00:00:59,120 --> 00:01:00,160
an earlier version

32
00:01:00,160 --> 00:01:02,719
of this work in addition all these

33
00:01:02,719 --> 00:01:04,959
attacks have huge economic damages

34
00:01:04,959 --> 00:01:07,840
including this one example where malware

35
00:01:07,840 --> 00:01:09,360
distributed over

36
00:01:09,360 --> 00:01:10,960
software updates in south korea caused

37
00:01:10,960 --> 00:01:13,119
almost 800 million dollars

38
00:01:13,119 --> 00:01:15,840
of damages

39
00:01:16,799 --> 00:01:18,720
so what are we going to do about this so

40
00:01:18,720 --> 00:01:20,400
in the cloud in this space i've been

41
00:01:20,400 --> 00:01:21,200
working on

42
00:01:21,200 --> 00:01:23,920
the node v2 effort which is an effort to

43
00:01:23,920 --> 00:01:25,680
create a more broadly used secure

44
00:01:25,680 --> 00:01:27,920
distribution system for registries

45
00:01:27,920 --> 00:01:30,560
by building onto the work done in notary

46
00:01:30,560 --> 00:01:32,320
and addressing some of the limitations

47
00:01:32,320 --> 00:01:33,600
of that system

48
00:01:33,600 --> 00:01:36,159
these include avoiding trust on first

49
00:01:36,159 --> 00:01:37,680
use for keys

50
00:01:37,680 --> 00:01:39,280
and really consolidating the key

51
00:01:39,280 --> 00:01:41,200
management to make it much easier to use

52
00:01:41,200 --> 00:01:44,079
and use securely hosting metadata

53
00:01:44,079 --> 00:01:46,240
directly on repositories to avoid

54
00:01:46,240 --> 00:01:48,240
users having to run additional services

55
00:01:48,240 --> 00:01:49,360
in order to

56
00:01:49,360 --> 00:01:52,479
use secure distribution

57
00:01:52,479 --> 00:01:54,000
this space is especially interesting

58
00:01:54,000 --> 00:01:56,560
from um this perspective

59
00:01:56,560 --> 00:01:58,320
in in the way that it's different from

60
00:01:58,320 --> 00:02:01,439
traditional software repository systems

61
00:02:01,439 --> 00:02:04,320
in that we also have to secure ephemeral

62
00:02:04,320 --> 00:02:06,560
clients which don't have any state

63
00:02:06,560 --> 00:02:08,160
on them that we can use to store

64
00:02:08,160 --> 00:02:10,080
information to be used as part of this

65
00:02:10,080 --> 00:02:11,680
update process

66
00:02:11,680 --> 00:02:14,480
update or distribution process sorry we

67
00:02:14,480 --> 00:02:15,360
also have shared

68
00:02:15,360 --> 00:02:17,360
repositories with private data and you

69
00:02:17,360 --> 00:02:18,879
don't want this private data

70
00:02:18,879 --> 00:02:20,879
to leak to other users through the use

71
00:02:20,879 --> 00:02:22,319
of metadata

72
00:02:22,319 --> 00:02:23,760
and finally we have this idea of

73
00:02:23,760 --> 00:02:25,840
scalability where

74
00:02:25,840 --> 00:02:27,920
some registries have have millions of

75
00:02:27,920 --> 00:02:30,080
images and we want to make sure that

76
00:02:30,080 --> 00:02:31,840
the security solution we have scales to

77
00:02:31,840 --> 00:02:33,440
registries even when they are

78
00:02:33,440 --> 00:02:36,480
that large

79
00:02:36,480 --> 00:02:39,200
so to do so we have a threat model this

80
00:02:39,200 --> 00:02:40,959
is the place to start with how to design

81
00:02:40,959 --> 00:02:42,560
a security solution

82
00:02:42,560 --> 00:02:44,879
so in our threat model we looking at

83
00:02:44,879 --> 00:02:46,480
these previous compromises that i've

84
00:02:46,480 --> 00:02:47,680
talked about we kind of make this

85
00:02:47,680 --> 00:02:48,319
assumption

86
00:02:48,319 --> 00:02:51,519
that it's not a question of

87
00:02:51,519 --> 00:02:54,239
you know if your repository or your

88
00:02:54,239 --> 00:02:55,519
registry will be compromised

89
00:02:55,519 --> 00:02:56,879
it's a question of what will you do when

90
00:02:56,879 --> 00:02:58,560
that happens and and how protected will

91
00:02:58,560 --> 00:02:59,280
you be

92
00:02:59,280 --> 00:03:00,720
when that happens because even these

93
00:03:00,720 --> 00:03:02,800
companies with huge huge security

94
00:03:02,800 --> 00:03:03,360
budgets

95
00:03:03,360 --> 00:03:05,280
and people focusing on this this still

96
00:03:05,280 --> 00:03:07,280
happens to them and so we want to make

97
00:03:07,280 --> 00:03:08,080
sure that even

98
00:03:08,080 --> 00:03:10,640
even when this happens we're protected

99
00:03:10,640 --> 00:03:12,080
so we assume that the attacker can

100
00:03:12,080 --> 00:03:12,879
compromise

101
00:03:12,879 --> 00:03:15,599
some but not all signing keys and that

102
00:03:15,599 --> 00:03:16,000
they

103
00:03:16,000 --> 00:03:17,599
can have control of the registry for

104
00:03:17,599 --> 00:03:19,519
some period of time

105
00:03:19,519 --> 00:03:21,360
in addition the attacker is able to

106
00:03:21,360 --> 00:03:23,920
watch traffic to or from the registry

107
00:03:23,920 --> 00:03:27,680
and alter this traffic and the goal

108
00:03:27,680 --> 00:03:29,840
in the system is to prevent users from

109
00:03:29,840 --> 00:03:31,840
installing a package that doesn't have a

110
00:03:31,840 --> 00:03:33,040
currently valid

111
00:03:33,040 --> 00:03:35,280
signature this includes of course

112
00:03:35,280 --> 00:03:36,959
arbitrary software installation

113
00:03:36,959 --> 00:03:39,440
or when the attacker can install

114
00:03:39,440 --> 00:03:40,560
arbitrary malware

115
00:03:40,560 --> 00:03:43,120
onto users machines but it also includes

116
00:03:43,120 --> 00:03:44,799
things like rollback attacks where the

117
00:03:44,799 --> 00:03:47,280
attacker is able to convince users

118
00:03:47,280 --> 00:03:50,159
to install a previous version or version

119
00:03:50,159 --> 00:03:52,480
that no longer has a valid signature

120
00:03:52,480 --> 00:03:54,480
or maybe was has a signature with a

121
00:03:54,480 --> 00:03:55,519
revoked key

122
00:03:55,519 --> 00:03:57,680
any of the situations we want to avoid

123
00:03:57,680 --> 00:03:59,840
as well as a few more subtle attacks

124
00:03:59,840 --> 00:04:01,280
in ways that the attacker can try and

125
00:04:01,280 --> 00:04:03,040
convince the user to install

126
00:04:03,040 --> 00:04:08,080
a non-optimal version of the software

127
00:04:08,080 --> 00:04:09,360
so the first approach that i'll talk

128
00:04:09,360 --> 00:04:11,840
about for how to secure software

129
00:04:11,840 --> 00:04:13,040
distribution

130
00:04:13,040 --> 00:04:15,439
in general is using cryptographic

131
00:04:15,439 --> 00:04:16,478
signatures

132
00:04:16,478 --> 00:04:18,000
and these are a piece of probably any

133
00:04:18,000 --> 00:04:20,238
system for secure distribution

134
00:04:20,238 --> 00:04:21,600
that you'll see but this is kind of

135
00:04:21,600 --> 00:04:23,440
looking at looking at systems that kind

136
00:04:23,440 --> 00:04:24,560
of focus on

137
00:04:24,560 --> 00:04:27,600
the cryptographic signature aspect

138
00:04:27,600 --> 00:04:29,199
and so what these signatures do is they

139
00:04:29,199 --> 00:04:31,280
attest that the person with the private

140
00:04:31,280 --> 00:04:32,320
key who signs

141
00:04:32,320 --> 00:04:35,120
an image has access to this private key

142
00:04:35,120 --> 00:04:36,720
and they attest to the contents of the

143
00:04:36,720 --> 00:04:38,400
image

144
00:04:38,400 --> 00:04:41,680
in tls this is often done through

145
00:04:41,680 --> 00:04:43,440
keys that are stored on a repository or

146
00:04:43,440 --> 00:04:44,880
on a server somewhere

147
00:04:44,880 --> 00:04:48,240
and then images are going there and the

148
00:04:48,240 --> 00:04:50,000
user can make sure that the image that

149
00:04:50,000 --> 00:04:50,880
they're downloading

150
00:04:50,880 --> 00:04:52,479
is the same one that's hosted on the

151
00:04:52,479 --> 00:04:54,960
repository and this can also

152
00:04:54,960 --> 00:04:57,280
include keys that are controlled by

153
00:04:57,280 --> 00:04:59,759
individual developers or individual

154
00:04:59,759 --> 00:05:01,520
you know other machines that develop

155
00:05:01,520 --> 00:05:04,000
code like cicd systems

156
00:05:04,000 --> 00:05:05,600
and um and then these individual

157
00:05:05,600 --> 00:05:06,880
developers i'll just call them

158
00:05:06,880 --> 00:05:07,680
developers

159
00:05:07,680 --> 00:05:11,280
for simplicity um you can sign the sign

160
00:05:11,280 --> 00:05:13,360
an image or artifact locally and then

161
00:05:13,360 --> 00:05:15,120
upload that artifact and the signature

162
00:05:15,120 --> 00:05:16,400
attached to it

163
00:05:16,400 --> 00:05:20,080
up to a registry the downside with just

164
00:05:20,080 --> 00:05:20,720
this approach

165
00:05:20,720 --> 00:05:22,960
is that whoever has control of the keys

166
00:05:22,960 --> 00:05:25,120
in the system has full control over the

167
00:05:25,120 --> 00:05:26,000
system

168
00:05:26,000 --> 00:05:29,280
and can consign arbitrary software or

169
00:05:29,280 --> 00:05:30,479
arbitrary malware

170
00:05:30,479 --> 00:05:32,880
as the case may be and convince users to

171
00:05:32,880 --> 00:05:34,320
install it

172
00:05:34,320 --> 00:05:36,639
so if the if these keys are on a

173
00:05:36,639 --> 00:05:38,720
repository or a registry

174
00:05:38,720 --> 00:05:39,919
i'm using those terms a little bit

175
00:05:39,919 --> 00:05:42,560
interchangeably but um

176
00:05:42,560 --> 00:05:43,759
it's basically whatever server you're

177
00:05:43,759 --> 00:05:45,520
hosting your code for the purpose of

178
00:05:45,520 --> 00:05:47,120
this talk that's what i mean

179
00:05:47,120 --> 00:05:50,160
by either of those terms um but yeah if

180
00:05:50,160 --> 00:05:52,479
an attacker compromises

181
00:05:52,479 --> 00:05:54,720
this repository there and there's an

182
00:05:54,720 --> 00:05:56,639
online key on this repository

183
00:05:56,639 --> 00:05:58,960
they're able to sign any any images and

184
00:05:58,960 --> 00:06:00,479
give them to the client

185
00:06:00,479 --> 00:06:02,479
if the developer controls these

186
00:06:02,479 --> 00:06:03,680
signatures

187
00:06:03,680 --> 00:06:06,400
an attacker and an attacker compromises

188
00:06:06,400 --> 00:06:07,600
a developer key

189
00:06:07,600 --> 00:06:10,080
they're also able to sign arbitrary

190
00:06:10,080 --> 00:06:11,280
images

191
00:06:11,280 --> 00:06:13,440
and this is in part because users don't

192
00:06:13,440 --> 00:06:14,960
have a good way to know

193
00:06:14,960 --> 00:06:16,479
which signatures to trust and which

194
00:06:16,479 --> 00:06:18,400
signatures to trust for which particular

195
00:06:18,400 --> 00:06:19,360
images

196
00:06:19,360 --> 00:06:21,840
and so they often have a key ring and if

197
00:06:21,840 --> 00:06:23,600
any key in that ring is compromised

198
00:06:23,600 --> 00:06:25,440
it can be used just to sign arbitrary

199
00:06:25,440 --> 00:06:26,720
malware and they'll

200
00:06:26,720 --> 00:06:29,199
then trust and install it and in this

201
00:06:29,199 --> 00:06:30,960
system there's often

202
00:06:30,960 --> 00:06:32,880
no good ability to rebuild keys and

203
00:06:32,880 --> 00:06:34,880
ensure timely revocation

204
00:06:34,880 --> 00:06:38,479
of keys there's a quick summary of

205
00:06:38,479 --> 00:06:40,639
those attacks that i just talked about

206
00:06:40,639 --> 00:06:42,880
if a developer key is compromised

207
00:06:42,880 --> 00:06:45,039
the malicious developer key can be

208
00:06:45,039 --> 00:06:47,840
trusted by all users

209
00:06:47,840 --> 00:06:50,639
even if you know to sign malware if a

210
00:06:50,639 --> 00:06:52,560
repository or registry is compromised

211
00:06:52,560 --> 00:06:54,479
the attacker can alter content

212
00:06:54,479 --> 00:06:57,120
and show older versions of images that

213
00:06:57,120 --> 00:06:58,479
were previously signed

214
00:06:58,479 --> 00:07:00,960
by developers um even if those developer

215
00:07:00,960 --> 00:07:03,360
signatures are no longer valid

216
00:07:03,360 --> 00:07:04,960
if a mirror is compromised it has pretty

217
00:07:04,960 --> 00:07:07,759
much the same abilities as a registry to

218
00:07:07,759 --> 00:07:08,800
alter content

219
00:07:08,800 --> 00:07:12,000
or share old versions and then if the

220
00:07:12,000 --> 00:07:13,360
attacker is acting as like a machine in

221
00:07:13,360 --> 00:07:15,360
the middle or on the network

222
00:07:15,360 --> 00:07:17,919
they can save and replay old signatures

223
00:07:17,919 --> 00:07:19,120
even after

224
00:07:19,120 --> 00:07:21,120
a vulnerability is discovered or the

225
00:07:21,120 --> 00:07:23,520
software is otherwise

226
00:07:23,520 --> 00:07:27,039
no longer signed

227
00:07:27,759 --> 00:07:29,360
so next i'll introduce the update

228
00:07:29,360 --> 00:07:31,440
framework or taf as we like to call it

229
00:07:31,440 --> 00:07:33,120
which is a framework for secure software

230
00:07:33,120 --> 00:07:33,919
updates

231
00:07:33,919 --> 00:07:35,599
that i participate in the research and

232
00:07:35,599 --> 00:07:37,520
development for that was designed with

233
00:07:37,520 --> 00:07:39,120
compromised resilience in mind

234
00:07:39,120 --> 00:07:42,400
to get addressed some of these issues

235
00:07:42,400 --> 00:07:44,000
as part of that key revocation and

236
00:07:44,000 --> 00:07:46,080
delegation are first class primitives

237
00:07:46,080 --> 00:07:47,280
they're really built in from

238
00:07:47,280 --> 00:07:48,560
from the bottom to make sure that

239
00:07:48,560 --> 00:07:50,319
they're always used and they're always

240
00:07:50,319 --> 00:07:52,800
easy to use in any of these compromise

241
00:07:52,800 --> 00:07:54,319
situations

242
00:07:54,319 --> 00:07:56,080
and because of all the additional

243
00:07:56,080 --> 00:07:58,080
security focus on security

244
00:07:58,080 --> 00:08:00,720
we also just we also in in tough focus

245
00:08:00,720 --> 00:08:03,199
on this idea of invisible usability

246
00:08:03,199 --> 00:08:04,560
which means that even though there's a

247
00:08:04,560 --> 00:08:06,720
lot of security going on behind the

248
00:08:06,720 --> 00:08:07,360
scenes

249
00:08:07,360 --> 00:08:09,840
the users don't need to know exactly

250
00:08:09,840 --> 00:08:10,639
what's happening

251
00:08:10,639 --> 00:08:12,479
unless something goes wrong so for the

252
00:08:12,479 --> 00:08:14,000
most part they all they know is that

253
00:08:14,000 --> 00:08:15,120
they're downloading software and it's

254
00:08:15,120 --> 00:08:16,240
being verified

255
00:08:16,240 --> 00:08:18,080
they're like they don't they would they

256
00:08:18,080 --> 00:08:20,000
don't have to specifically do

257
00:08:20,000 --> 00:08:21,759
a lot of steps it's all part of an

258
00:08:21,759 --> 00:08:23,199
automated process

259
00:08:23,199 --> 00:08:24,319
trying to make this easier for both

260
00:08:24,319 --> 00:08:28,240
developers and users of software

261
00:08:28,240 --> 00:08:30,000
and using tough and i'll go into a lot

262
00:08:30,000 --> 00:08:31,599
more detail about how tough works in a

263
00:08:31,599 --> 00:08:33,279
minute but i just wanted to summarize

264
00:08:33,279 --> 00:08:37,519
those same attacks here at the beginning

265
00:08:37,519 --> 00:08:39,919
so if a developer key is compromised in

266
00:08:39,919 --> 00:08:41,919
a system using tuff

267
00:08:41,919 --> 00:08:44,000
only the files that that developer key

268
00:08:44,000 --> 00:08:45,519
is specifically

269
00:08:45,519 --> 00:08:47,680
like the artifacts that are specifically

270
00:08:47,680 --> 00:08:49,200
assigned to that developer

271
00:08:49,200 --> 00:08:51,440
could be compromised using this

272
00:08:51,440 --> 00:08:52,320
developer key

273
00:08:52,320 --> 00:08:54,160
and that's only if a threshold of

274
00:08:54,160 --> 00:08:55,760
developer keys are compromised and i'll

275
00:08:55,760 --> 00:08:57,279
go into what that means

276
00:08:57,279 --> 00:08:59,120
in a minute and in addition developer

277
00:08:59,120 --> 00:09:00,800
keys can be revoked

278
00:09:00,800 --> 00:09:04,160
by more trusted roles at any time if a

279
00:09:04,160 --> 00:09:06,000
repository or registry

280
00:09:06,000 --> 00:09:08,640
is compromised in a system using tough

281
00:09:08,640 --> 00:09:11,040
the attacker would be able to

282
00:09:11,040 --> 00:09:14,080
to a limited extent show old metadata

283
00:09:14,080 --> 00:09:17,040
but this is mitigated a little bit by a

284
00:09:17,040 --> 00:09:18,399
client's verification that

285
00:09:18,399 --> 00:09:20,720
any metadata they see is newer than

286
00:09:20,720 --> 00:09:22,640
metadata already on the system

287
00:09:22,640 --> 00:09:24,800
and this is also recoverable using

288
00:09:24,800 --> 00:09:27,839
delegation for more trusted roles

289
00:09:27,839 --> 00:09:30,720
um for mirrors the mirrors actually

290
00:09:30,720 --> 00:09:32,000
don't have any trust

291
00:09:32,000 --> 00:09:34,320
in a system using trust using tough and

292
00:09:34,320 --> 00:09:36,000
so the mirrors aren't able to change any

293
00:09:36,000 --> 00:09:36,959
content

294
00:09:36,959 --> 00:09:39,680
without detection and then somewhat

295
00:09:39,680 --> 00:09:40,320
similarly

296
00:09:40,320 --> 00:09:42,880
a machine in the middle or attacker on

297
00:09:42,880 --> 00:09:43,839
the network

298
00:09:43,839 --> 00:09:46,880
is not able to alter any anything and

299
00:09:46,880 --> 00:09:49,519
any um old signatures will be detected

300
00:09:49,519 --> 00:09:51,760
by the clients and so they can't be used

301
00:09:51,760 --> 00:09:54,000
to install old versions

302
00:09:54,000 --> 00:09:57,600
of the software so how does stuff do

303
00:09:57,600 --> 00:09:58,000
this

304
00:09:58,000 --> 00:10:00,959
so it uses a few principles in order to

305
00:10:00,959 --> 00:10:03,360
achieve kind of this level of security

306
00:10:03,360 --> 00:10:04,880
the first principle is this idea of

307
00:10:04,880 --> 00:10:06,480
separation of duties

308
00:10:06,480 --> 00:10:08,480
where any one person or anyone signing

309
00:10:08,480 --> 00:10:09,519
key

310
00:10:09,519 --> 00:10:12,000
is only trusted to do a certain set of

311
00:10:12,000 --> 00:10:13,519
things within the system

312
00:10:13,519 --> 00:10:14,959
and the way this works is it starts with

313
00:10:14,959 --> 00:10:16,720
a root of trust

314
00:10:16,720 --> 00:10:18,800
or root role which serves as the root of

315
00:10:18,800 --> 00:10:20,320
trust for the system

316
00:10:20,320 --> 00:10:22,399
and this role then delegates or provides

317
00:10:22,399 --> 00:10:23,839
the public keys for

318
00:10:23,839 --> 00:10:26,240
some other top level roles so these are

319
00:10:26,240 --> 00:10:28,000
the time stamp role which provides a

320
00:10:28,000 --> 00:10:29,440
notion of timeliness

321
00:10:29,440 --> 00:10:31,680
which ensures that for example

322
00:10:31,680 --> 00:10:33,600
revocations and metadata

323
00:10:33,600 --> 00:10:36,160
are always timely and consistent with

324
00:10:36,160 --> 00:10:37,680
what's currently on

325
00:10:37,680 --> 00:10:40,399
the registry or repository a snapshot

326
00:10:40,399 --> 00:10:41,279
role

327
00:10:41,279 --> 00:10:45,120
which ensures consistency of images

328
00:10:45,120 --> 00:10:47,440
and then a top level targets role which

329
00:10:47,440 --> 00:10:49,519
um is where you start to provide actual

330
00:10:49,519 --> 00:10:51,680
information about the artifacts and

331
00:10:51,680 --> 00:10:52,560
images

332
00:10:52,560 --> 00:10:55,279
on the registry and this targets role is

333
00:10:55,279 --> 00:10:57,600
also able to provide further delegations

334
00:10:57,600 --> 00:11:00,480
to other individual developers or teams

335
00:11:00,480 --> 00:11:00,800
to

336
00:11:00,800 --> 00:11:03,120
prevent any key sharing even at that

337
00:11:03,120 --> 00:11:05,279
level to make sure that

338
00:11:05,279 --> 00:11:06,720
each key is only trusted for the

339
00:11:06,720 --> 00:11:09,200
specific piece of the system

340
00:11:09,200 --> 00:11:12,800
that it is attesting to

341
00:11:12,959 --> 00:11:15,760
next we have threshold signatures um the

342
00:11:15,760 --> 00:11:16,959
idea here is that

343
00:11:16,959 --> 00:11:19,839
um especially for more high security

344
00:11:19,839 --> 00:11:21,040
roles

345
00:11:21,040 --> 00:11:22,399
the role isn't trusted unless a

346
00:11:22,399 --> 00:11:24,399
threshold of signatures all signs the

347
00:11:24,399 --> 00:11:26,560
same piece of metadata for that role

348
00:11:26,560 --> 00:11:28,079
so in this example here the target's

349
00:11:28,079 --> 00:11:29,760
metadata isn't trusted

350
00:11:29,760 --> 00:11:31,920
unless three out of the four keys for

351
00:11:31,920 --> 00:11:33,680
that role have all signed the same

352
00:11:33,680 --> 00:11:34,640
metadata

353
00:11:34,640 --> 00:11:37,519
and this just makes sure that um if

354
00:11:37,519 --> 00:11:38,959
there are different people trusted

355
00:11:38,959 --> 00:11:40,399
for the role they all sign it and it

356
00:11:40,399 --> 00:11:42,240
takes a it would take in this example

357
00:11:42,240 --> 00:11:43,760
three key compromises

358
00:11:43,760 --> 00:11:45,920
for an attacker to be able to sign

359
00:11:45,920 --> 00:11:49,360
arbitrary targets metadata

360
00:11:49,360 --> 00:11:51,120
next we have explicit and implicit

361
00:11:51,120 --> 00:11:52,959
relocation of keys

362
00:11:52,959 --> 00:11:54,800
so the implicit relocation of keys is

363
00:11:54,800 --> 00:11:56,480
just that all keys in the system

364
00:11:56,480 --> 00:11:59,600
have a a time

365
00:11:59,600 --> 00:12:02,240
a time stamp and they all they expire

366
00:12:02,240 --> 00:12:04,639
after a certain period of time

367
00:12:04,639 --> 00:12:07,839
and the explicit revocation

368
00:12:07,839 --> 00:12:09,600
means that any higher level role in the

369
00:12:09,600 --> 00:12:12,240
system can explicitly sign new metadata

370
00:12:12,240 --> 00:12:13,920
that removes a signature that removes a

371
00:12:13,920 --> 00:12:16,480
public key for a lower level role so any

372
00:12:16,480 --> 00:12:18,079
key in the system can be explicitly

373
00:12:18,079 --> 00:12:19,680
revoked at any time

374
00:12:19,680 --> 00:12:21,680
and users and because of the notion of

375
00:12:21,680 --> 00:12:24,160
timeliness users will know right away

376
00:12:24,160 --> 00:12:26,399
when a key has been revoked and they'll

377
00:12:26,399 --> 00:12:28,240
be prevented from using

378
00:12:28,240 --> 00:12:32,240
a revoked key in their verification

379
00:12:32,240 --> 00:12:34,480
and finally tuff minimizes the risk

380
00:12:34,480 --> 00:12:36,480
using offline keys

381
00:12:36,480 --> 00:12:38,000
so for especially again these more high

382
00:12:38,000 --> 00:12:40,079
security roles especially the root role

383
00:12:40,079 --> 00:12:40,880
and also the

384
00:12:40,880 --> 00:12:46,320
top level targets role tough encourages

385
00:12:46,399 --> 00:12:48,720
users of the system to use offline keys

386
00:12:48,720 --> 00:12:49,920
for these roles

387
00:12:49,920 --> 00:12:51,519
because as we've mentioned one of the

388
00:12:51,519 --> 00:12:54,000
assumptions in the system is that

389
00:12:54,000 --> 00:12:54,959
you know your servers will be

390
00:12:54,959 --> 00:12:56,959
compromised at one point or another so

391
00:12:56,959 --> 00:12:58,639
if these keys are not on any servers if

392
00:12:58,639 --> 00:12:59,760
they're just

393
00:12:59,760 --> 00:13:01,519
you know exist physically in some lock

394
00:13:01,519 --> 00:13:03,040
box somewhere an

395
00:13:03,040 --> 00:13:05,040
attacker using just the internet can't

396
00:13:05,040 --> 00:13:06,560
possibly compromise them

397
00:13:06,560 --> 00:13:07,920
and they would need to do some kind of

398
00:13:07,920 --> 00:13:10,160
you know ocean's level and ocean's 11

399
00:13:10,160 --> 00:13:12,800
heist kind of you know physical attack

400
00:13:12,800 --> 00:13:14,000
to actually get access

401
00:13:14,000 --> 00:13:16,079
to these keys which just really

402
00:13:16,079 --> 00:13:20,000
increases the security of your system

403
00:13:20,000 --> 00:13:22,079
putting it all together when there's a

404
00:13:22,079 --> 00:13:24,880
compromise of your system

405
00:13:24,880 --> 00:13:27,120
protects it using a combination of all

406
00:13:27,120 --> 00:13:28,399
of these properties

407
00:13:28,399 --> 00:13:30,959
so um the timestamp and snapshot rule

408
00:13:30,959 --> 00:13:31,839
are

409
00:13:31,839 --> 00:13:34,480
are both on the registry or repository

410
00:13:34,480 --> 00:13:36,320
so if the register repository is

411
00:13:36,320 --> 00:13:37,839
compromised

412
00:13:37,839 --> 00:13:39,680
these two roles would probably also be

413
00:13:39,680 --> 00:13:41,199
compromised but in this

414
00:13:41,199 --> 00:13:44,079
situation the actual targets roles and

415
00:13:44,079 --> 00:13:46,079
the actual keys used to cite images

416
00:13:46,079 --> 00:13:48,720
aren't compromised and so the attacker

417
00:13:48,720 --> 00:13:50,320
isn't able to change any of that

418
00:13:50,320 --> 00:13:51,839
information

419
00:13:51,839 --> 00:13:54,320
and also the root role is able to be is

420
00:13:54,320 --> 00:13:55,040
can be used

421
00:13:55,040 --> 00:13:58,240
to revoke the time stamp and snapshot

422
00:13:58,240 --> 00:14:00,480
rules and kind of re-establish trust

423
00:14:00,480 --> 00:14:02,480
in the system once you get back control

424
00:14:02,480 --> 00:14:04,399
of your registry

425
00:14:04,399 --> 00:14:06,639
and without any manual intervention on

426
00:14:06,639 --> 00:14:09,680
decline systems to kind of

427
00:14:09,680 --> 00:14:11,519
re-establish trust it's all kind of

428
00:14:11,519 --> 00:14:12,800
automatically done

429
00:14:12,800 --> 00:14:15,440
after the attack and then if any single

430
00:14:15,440 --> 00:14:17,120
developer key is compromised

431
00:14:17,120 --> 00:14:20,399
only that one package or that one thing

432
00:14:20,399 --> 00:14:22,399
that the developer was trusted to sign

433
00:14:22,399 --> 00:14:24,639
would be compromised and again that can

434
00:14:24,639 --> 00:14:25,680
be

435
00:14:25,680 --> 00:14:28,399
revoked by any of the higher level

436
00:14:28,399 --> 00:14:29,360
targets keys

437
00:14:29,360 --> 00:14:30,639
all the way up to the boot roll which

438
00:14:30,639 --> 00:14:33,519
could just revoke all of them if need be

439
00:14:33,519 --> 00:14:35,279
although probably a lower level one

440
00:14:35,279 --> 00:14:38,560
should be broken first just prevent

441
00:14:38,560 --> 00:14:41,279
the overhead there

442
00:14:41,839 --> 00:14:43,360
and in addition to all of these kind of

443
00:14:43,360 --> 00:14:44,959
existing features of tough and kind of

444
00:14:44,959 --> 00:14:45,600
this

445
00:14:45,600 --> 00:14:47,839
whole kind of philosophy around secure

446
00:14:47,839 --> 00:14:49,279
software distribution

447
00:14:49,279 --> 00:14:50,959
in order to kind of adapt this more for

448
00:14:50,959 --> 00:14:52,399
the nodeov2 effort

449
00:14:52,399 --> 00:14:54,959
and the container registry specific

450
00:14:54,959 --> 00:14:55,920
scenarios

451
00:14:55,920 --> 00:14:57,440
we have a couple of new features that

452
00:14:57,440 --> 00:14:59,839
i'm going to talk about here today

453
00:14:59,839 --> 00:15:02,320
so the first of these is client pinning

454
00:15:02,320 --> 00:15:04,000
of targets keys

455
00:15:04,000 --> 00:15:05,920
so the idea here is to reduce trust in

456
00:15:05,920 --> 00:15:08,079
the registry by allowing the client to

457
00:15:08,079 --> 00:15:09,360
define

458
00:15:09,360 --> 00:15:13,040
the pr i'm sorry the public keys that

459
00:15:13,040 --> 00:15:14,800
they would like to trust in order to

460
00:15:14,800 --> 00:15:17,279
sign specific targets files

461
00:15:17,279 --> 00:15:19,360
um this means that the even the root

462
00:15:19,360 --> 00:15:20,320
role

463
00:15:20,320 --> 00:15:22,880
on the registry or repository itself

464
00:15:22,880 --> 00:15:23,680
doesn't have

465
00:15:23,680 --> 00:15:25,040
won't be able to override this without

466
00:15:25,040 --> 00:15:26,399
the client knowing about it so the

467
00:15:26,399 --> 00:15:28,000
client will know

468
00:15:28,000 --> 00:15:29,519
um you know whenever this key is changed

469
00:15:29,519 --> 00:15:31,120
whenever a new developer is signing it

470
00:15:31,120 --> 00:15:31,759
whenever

471
00:15:31,759 --> 00:15:33,600
something changes like that and this can

472
00:15:33,600 --> 00:15:34,880
be especially useful

473
00:15:34,880 --> 00:15:36,480
in open source projects where you want

474
00:15:36,480 --> 00:15:38,399
to keep track of who is currently

475
00:15:38,399 --> 00:15:39,279
signing

476
00:15:39,279 --> 00:15:42,880
for this release and also just you want

477
00:15:42,880 --> 00:15:44,480
more control over

478
00:15:44,480 --> 00:15:46,399
over the process it's also good for

479
00:15:46,399 --> 00:15:48,079
unlisted packages so kind of these

480
00:15:48,079 --> 00:15:49,440
private packages

481
00:15:49,440 --> 00:15:51,759
that might not be covered by the

482
00:15:51,759 --> 00:15:54,160
registry's top level targets metadata

483
00:15:54,160 --> 00:15:55,600
but is still kind of listed on the

484
00:15:55,600 --> 00:15:57,759
registry and this can provide the client

485
00:15:57,759 --> 00:15:58,560
a way to

486
00:15:58,560 --> 00:16:01,199
list public keys for those files as well

487
00:16:01,199 --> 00:16:02,639
and kind of work with

488
00:16:02,639 --> 00:16:05,839
the security measures of the top level

489
00:16:05,839 --> 00:16:08,160
rules of tough the time stamp and

490
00:16:08,160 --> 00:16:09,920
snapshot roles but provide kind of a

491
00:16:09,920 --> 00:16:11,759
separate chain of trust

492
00:16:11,759 --> 00:16:14,959
for specific targets

493
00:16:14,959 --> 00:16:17,839
another new feature for node v2 that

494
00:16:17,839 --> 00:16:18,560
we've

495
00:16:18,560 --> 00:16:21,120
been discussing is this idea of succinct

496
00:16:21,120 --> 00:16:22,720
fin delegations

497
00:16:22,720 --> 00:16:25,040
which is kind of a way to reduce the

498
00:16:25,040 --> 00:16:27,279
size of delegations

499
00:16:27,279 --> 00:16:30,079
especially this is especially useful for

500
00:16:30,079 --> 00:16:31,759
larger public registries where

501
00:16:31,759 --> 00:16:34,079
a lot of the packages are signed by the

502
00:16:34,079 --> 00:16:35,360
registry itself and not

503
00:16:35,360 --> 00:16:38,399
offline by developers

504
00:16:38,399 --> 00:16:40,320
and in this case that the registry can

505
00:16:40,320 --> 00:16:42,079
sign

506
00:16:42,079 --> 00:16:43,360
you can automatically sign for these

507
00:16:43,360 --> 00:16:45,519
images using online keys

508
00:16:45,519 --> 00:16:48,560
by um by separating the packages into

509
00:16:48,560 --> 00:16:50,240
bins based on the hash

510
00:16:50,240 --> 00:16:51,680
and this just reduces the size of the

511
00:16:51,680 --> 00:16:53,120
metadata when you're doing a lot of

512
00:16:53,120 --> 00:16:55,279
online signatures

513
00:16:55,279 --> 00:16:57,519
for again for those really large public

514
00:16:57,519 --> 00:17:00,639
registry use cases

515
00:17:01,120 --> 00:17:03,360
so if you'd like to learn more about

516
00:17:03,360 --> 00:17:04,720
tough we have our

517
00:17:04,720 --> 00:17:06,799
our website as well as the specification

518
00:17:06,799 --> 00:17:08,400
which goes into a lot more detail about

519
00:17:08,400 --> 00:17:08,959
how the

520
00:17:08,959 --> 00:17:11,199
all of the aspects of the system work

521
00:17:11,199 --> 00:17:12,799
there's also a reference implementation

522
00:17:12,799 --> 00:17:14,079
for tuff

523
00:17:14,079 --> 00:17:16,160
um which you can find from the website

524
00:17:16,160 --> 00:17:18,000
or you can contact me and i can get that

525
00:17:18,000 --> 00:17:18,799
to you

526
00:17:18,799 --> 00:17:20,720
we're also available on the the cncf

527
00:17:20,720 --> 00:17:22,160
slack um

528
00:17:22,160 --> 00:17:24,000
we have a couple of channels one got the

529
00:17:24,000 --> 00:17:25,520
tough channel as well as the

530
00:17:25,520 --> 00:17:27,919
python tuff channel where we talk about

531
00:17:27,919 --> 00:17:29,280
you know the reference invitation

532
00:17:29,280 --> 00:17:31,360
specifically

533
00:17:31,360 --> 00:17:33,360
for the nodejs v2 this is an ongoing

534
00:17:33,360 --> 00:17:34,880
design process so if you have any

535
00:17:34,880 --> 00:17:35,360
interest

536
00:17:35,360 --> 00:17:37,200
in secure distribution this is kind of i

537
00:17:37,200 --> 00:17:39,280
think a good great place to get involved

538
00:17:39,280 --> 00:17:42,640
we are we're on the cncf slack and

539
00:17:42,640 --> 00:17:43,840
a lot of the work that i've presented

540
00:17:43,840 --> 00:17:46,799
here is included in a tough prototype

541
00:17:46,799 --> 00:17:49,919
design piece which is is there's a link

542
00:17:49,919 --> 00:17:50,240
to

543
00:17:50,240 --> 00:17:53,200
here and yeah we'd love to work more

544
00:17:53,200 --> 00:17:53,919
with

545
00:17:53,919 --> 00:17:56,160
with folks and see how we can solve all

546
00:17:56,160 --> 00:17:57,600
of our use cases and get

547
00:17:57,600 --> 00:18:01,120
everyone's packages signed on registries

548
00:18:01,120 --> 00:18:02,960
and so feel free to email me or contact

549
00:18:02,960 --> 00:18:05,280
me on the cncf slack

550
00:18:05,280 --> 00:18:06,799
and i will be available live for

551
00:18:06,799 --> 00:18:12,240
questions thank you everyone

