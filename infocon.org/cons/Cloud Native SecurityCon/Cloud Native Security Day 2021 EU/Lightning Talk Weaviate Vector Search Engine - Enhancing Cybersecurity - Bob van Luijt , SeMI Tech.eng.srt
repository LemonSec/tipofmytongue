1
00:00:00,000 --> 00:00:02,320
hello everybody thank you for watching

2
00:00:02,320 --> 00:00:03,199
this video

3
00:00:03,199 --> 00:00:05,680
i'm going to talk about the viviate

4
00:00:05,680 --> 00:00:07,040
vector search engine

5
00:00:07,040 --> 00:00:09,840
and then specifically from the

6
00:00:09,840 --> 00:00:10,960
perspective of

7
00:00:10,960 --> 00:00:14,639
threat analysis in cyber security

8
00:00:14,639 --> 00:00:17,119
on mostly we're gonna focusing on i'm

9
00:00:17,119 --> 00:00:17,840
gonna

10
00:00:17,840 --> 00:00:19,279
tell a little bit about what weave it is

11
00:00:19,279 --> 00:00:21,760
and then we're gonna focus on the demo

12
00:00:21,760 --> 00:00:23,840
um and i'm also gonna show give you some

13
00:00:23,840 --> 00:00:26,240
pointers how you can start working with

14
00:00:26,240 --> 00:00:29,439
it yourself so we've hit is a vector

15
00:00:29,439 --> 00:00:29,840
search

16
00:00:29,840 --> 00:00:33,600
engine and it's a it's a full across

17
00:00:33,600 --> 00:00:34,960
support database

18
00:00:34,960 --> 00:00:36,719
but the most important thing to bear in

19
00:00:36,719 --> 00:00:38,879
mind is that the

20
00:00:38,879 --> 00:00:42,160
the difference between traditional

21
00:00:42,160 --> 00:00:43,200
search engines

22
00:00:43,200 --> 00:00:46,000
and vector search engines like we've yet

23
00:00:46,000 --> 00:00:47,840
is that we've yet focuses

24
00:00:47,840 --> 00:00:51,760
on the vector representation of the data

25
00:00:51,760 --> 00:00:54,000
that is stored within it and those

26
00:00:54,000 --> 00:00:56,160
factory representations are given to it

27
00:00:56,160 --> 00:00:59,199
based on machine learning models

28
00:00:59,199 --> 00:01:01,920
and the simplest way to show you the

29
00:01:01,920 --> 00:01:04,080
difference between a traditional search

30
00:01:04,080 --> 00:01:06,479
engine and a vector search engine

31
00:01:06,479 --> 00:01:09,600
is the following so let's look at this

32
00:01:09,600 --> 00:01:10,560
data object

33
00:01:10,560 --> 00:01:12,640
so we have here data object representing

34
00:01:12,640 --> 00:01:14,479
a in this case

35
00:01:14,479 --> 00:01:16,640
cybersecurity threat group so we have

36
00:01:16,640 --> 00:01:18,159
here fin6

37
00:01:18,159 --> 00:01:19,520
and then you see like a group that has

38
00:01:19,520 --> 00:01:21,200
focused on an attacking point of sales

39
00:01:21,200 --> 00:01:22,320
devices

40
00:01:22,320 --> 00:01:24,640
well if he would store this data object

41
00:01:24,640 --> 00:01:26,080
in a traditional search

42
00:01:26,080 --> 00:01:28,080
engine and we want to retrieve it and

43
00:01:28,080 --> 00:01:29,920
now we say for example we are looking

44
00:01:29,920 --> 00:01:30,640
for something

45
00:01:30,640 --> 00:01:33,680
related to finance hardware attacks

46
00:01:33,680 --> 00:01:35,840
then it will not find anything because

47
00:01:35,840 --> 00:01:38,320
we know that fin6 is related to these

48
00:01:38,320 --> 00:01:42,240
this query but well the um

49
00:01:42,240 --> 00:01:45,119
the exact keywords are not matched in

50
00:01:45,119 --> 00:01:46,640
this

51
00:01:46,640 --> 00:01:48,960
data object however when you do this in

52
00:01:48,960 --> 00:01:51,200
a vector search engine like we've yet

53
00:01:51,200 --> 00:01:53,840
it will actually return fin6 because it

54
00:01:53,840 --> 00:01:55,439
know that there's a relation between

55
00:01:55,439 --> 00:01:57,840
finance hardware and attack

56
00:01:57,840 --> 00:02:01,040
based on a group that focuses on

57
00:02:01,040 --> 00:02:03,360
attacking point of sales devices

58
00:02:03,360 --> 00:02:05,680
and that is the most important added

59
00:02:05,680 --> 00:02:07,280
value of these

60
00:02:07,280 --> 00:02:10,399
vector search engines like we've yet and

61
00:02:10,399 --> 00:02:13,200
as you will see in the demo a lot of new

62
00:02:13,200 --> 00:02:15,440
use cases come from this

63
00:02:15,440 --> 00:02:17,680
so when it comes to the cyber security

64
00:02:17,680 --> 00:02:19,680
domain our main focus

65
00:02:19,680 --> 00:02:21,280
or our main question that we want to

66
00:02:21,280 --> 00:02:23,680
answer is like can we go from like a

67
00:02:23,680 --> 00:02:25,120
rule-based approach to a

68
00:02:25,120 --> 00:02:28,160
prediction-based approach

69
00:02:28,160 --> 00:02:30,800
so a little bit about the core features

70
00:02:30,800 --> 00:02:31,680
so with that

71
00:02:31,680 --> 00:02:33,280
two core features the first one is

72
00:02:33,280 --> 00:02:35,599
search or as we like to say

73
00:02:35,599 --> 00:02:38,480
search and discovery in your data so the

74
00:02:38,480 --> 00:02:40,000
demo that i'm going to show you is

75
00:02:40,000 --> 00:02:42,239
completely focusing on search and how to

76
00:02:42,239 --> 00:02:45,120
find things using we've yet but on the

77
00:02:45,120 --> 00:02:47,440
other hand we also have classification

78
00:02:47,440 --> 00:02:48,720
and the easiest way to think of

79
00:02:48,720 --> 00:02:50,959
classification is context is that we've

80
00:02:50,959 --> 00:02:53,200
yet can automatically make relations in

81
00:02:53,200 --> 00:02:54,480
your data sets

82
00:02:54,480 --> 00:02:56,800
so where search there's some form of

83
00:02:56,800 --> 00:02:58,159
human or machine

84
00:02:58,159 --> 00:03:00,800
input to get to insights with

85
00:03:00,800 --> 00:03:02,400
classification you can ask we've yet to

86
00:03:02,400 --> 00:03:04,480
do that automatically

87
00:03:04,480 --> 00:03:07,599
then we have some other well unique

88
00:03:07,599 --> 00:03:08,319
features from

89
00:03:08,319 --> 00:03:11,040
eva's so first the modules as i just

90
00:03:11,040 --> 00:03:12,720
described

91
00:03:12,720 --> 00:03:14,560
we have a bunch of them if you have

92
00:03:14,560 --> 00:03:17,360
ideas for modules we're more than

93
00:03:17,360 --> 00:03:20,879
happy to hear um you know how you think

94
00:03:20,879 --> 00:03:21,920
we can

95
00:03:21,920 --> 00:03:24,239
improve vva's module ecosystem by the

96
00:03:24,239 --> 00:03:25,519
way you can also create your

97
00:03:25,519 --> 00:03:29,200
own modules then we support any media

98
00:03:29,200 --> 00:03:29,680
type

99
00:03:29,680 --> 00:03:33,040
so we've had not only the vector

100
00:03:33,040 --> 00:03:35,599
representations that we've yet can store

101
00:03:35,599 --> 00:03:37,760
but also the data objects can be of any

102
00:03:37,760 --> 00:03:38,799
media type

103
00:03:38,799 --> 00:03:42,000
so within one single vp8 you can store

104
00:03:42,000 --> 00:03:45,280
textual text objects and text effect

105
00:03:45,280 --> 00:03:47,360
vectors to represent these data objects

106
00:03:47,360 --> 00:03:51,360
but also for example images or video

107
00:03:51,360 --> 00:03:54,400
we've hit itself has a graph like

108
00:03:54,400 --> 00:03:57,680
a data model so what you will see when

109
00:03:57,680 --> 00:04:01,040
i show the demo to you we use graphql

110
00:04:01,040 --> 00:04:04,400
graphql is used to

111
00:04:04,400 --> 00:04:06,799
not only do the machine learning

112
00:04:06,799 --> 00:04:08,159
matching but also

113
00:04:08,159 --> 00:04:10,959
to make traditional graph relations and

114
00:04:10,959 --> 00:04:13,840
most importantly to mix and match them

115
00:04:13,840 --> 00:04:15,760
and then of course we focus on we

116
00:04:15,760 --> 00:04:18,320
being scalable and fast and we're

117
00:04:18,320 --> 00:04:20,000
constantly updating and improving we've

118
00:04:20,000 --> 00:04:21,199
yet so with every

119
00:04:21,199 --> 00:04:24,320
release we get a bit more a bit more

120
00:04:24,320 --> 00:04:26,720
faster and a bit more scalable

121
00:04:26,720 --> 00:04:30,639
so when it comes to the um the vertical

122
00:04:30,639 --> 00:04:33,680
of cyber security um

123
00:04:33,680 --> 00:04:36,720
uh we mostly focus on intelligent threat

124
00:04:36,720 --> 00:04:38,080
analysis

125
00:04:38,080 --> 00:04:41,199
um meaning that we we've had focuses on

126
00:04:41,199 --> 00:04:42,560
structured data

127
00:04:42,560 --> 00:04:44,639
so that can be descriptions text

128
00:04:44,639 --> 00:04:46,479
documents or those kind of things

129
00:04:46,479 --> 00:04:51,040
that are related to a threat analysis

130
00:04:51,040 --> 00:04:53,840
so for this demo we're using the metro

131
00:04:53,840 --> 00:04:54,840
tech

132
00:04:54,840 --> 00:04:57,840
framework for the simple reason that it

133
00:04:57,840 --> 00:05:00,000
contains a lot of graph relations but

134
00:05:00,000 --> 00:05:00,479
also

135
00:05:00,479 --> 00:05:04,320
a lot of unstructured data

136
00:05:04,880 --> 00:05:08,960
we use a vva transformers module

137
00:05:08,960 --> 00:05:11,120
which is fine to fine-tune with cyber

138
00:05:11,120 --> 00:05:12,720
security data

139
00:05:12,720 --> 00:05:15,919
uh in this case we use sentence birth

140
00:05:15,919 --> 00:05:19,680
and that brings me to the demo

141
00:05:19,680 --> 00:05:23,039
so when we are in the we've hit console

142
00:05:23,039 --> 00:05:24,960
we get an interface where we can use

143
00:05:24,960 --> 00:05:27,600
graphql to query true vp8

144
00:05:27,600 --> 00:05:31,919
and the setup how ev8 works is actually

145
00:05:31,919 --> 00:05:33,120
very simple so

146
00:05:33,120 --> 00:05:36,880
um with it has three core functions

147
00:05:36,880 --> 00:05:40,240
meaning that's aggregate that is

148
00:05:40,240 --> 00:05:43,840
explore and that is get

149
00:05:43,840 --> 00:05:47,039
and aggregate is used to

150
00:05:47,039 --> 00:05:49,520
well get an as an aggregate function so

151
00:05:49,520 --> 00:05:51,199
for example how many objects

152
00:05:51,199 --> 00:05:53,919
are stored in wv8 explorer is used to

153
00:05:53,919 --> 00:05:56,000
search for the complete vector space

154
00:05:56,000 --> 00:05:59,280
but get is used to make a mix of

155
00:05:59,280 --> 00:06:02,000
vector searches and graph searches and

156
00:06:02,000 --> 00:06:03,199
that's what we're going to use for the

157
00:06:03,199 --> 00:06:04,160
demo

158
00:06:04,160 --> 00:06:08,160
inside vv8 you have a

159
00:06:08,960 --> 00:06:11,680
graph like data model so that means that

160
00:06:11,680 --> 00:06:12,800
you can create

161
00:06:12,800 --> 00:06:15,600
any class and any property so in this

162
00:06:15,600 --> 00:06:17,600
case our class and property structure is

163
00:06:17,600 --> 00:06:19,680
based on the meteor attack framework

164
00:06:19,680 --> 00:06:22,560
so let's take a look at the first one so

165
00:06:22,560 --> 00:06:23,600
let's take a look at

166
00:06:23,600 --> 00:06:26,319
thread groups so the thread groups have

167
00:06:26,319 --> 00:06:27,600
a name

168
00:06:27,600 --> 00:06:29,919
and this very simple query says like get

169
00:06:29,919 --> 00:06:31,840
me thread groups and show them

170
00:06:31,840 --> 00:06:34,400
show me their names so running this

171
00:06:34,400 --> 00:06:36,160
query you see a bunch of

172
00:06:36,160 --> 00:06:38,240
thread groups they're not organized in

173
00:06:38,240 --> 00:06:40,400
any way they're just randomly shown

174
00:06:40,400 --> 00:06:44,400
based on this query we can also go

175
00:06:44,400 --> 00:06:47,039
add properties so we can say for example

176
00:06:47,039 --> 00:06:49,280
say like a show the description

177
00:06:49,280 --> 00:06:50,880
and there you see for example copy

178
00:06:50,880 --> 00:06:53,520
kittens you see the the description of

179
00:06:53,520 --> 00:06:53,840
the

180
00:06:53,840 --> 00:06:56,880
the thread group so let's go one step

181
00:06:56,880 --> 00:06:57,680
back

182
00:06:57,680 --> 00:06:59,759
now what we now can do is that we can

183
00:06:59,759 --> 00:07:00,880
enable the

184
00:07:00,880 --> 00:07:03,199
machine learning model and in this we've

185
00:07:03,199 --> 00:07:05,919
had instance we have two modules enabled

186
00:07:05,919 --> 00:07:09,199
the factorization module and the q and a

187
00:07:09,199 --> 00:07:11,440
modules so let's start by looking at the

188
00:07:11,440 --> 00:07:12,560
from the perspective

189
00:07:12,560 --> 00:07:14,880
of the q a module so what we can do is

190
00:07:14,880 --> 00:07:16,400
that we can say well we want to ask a

191
00:07:16,400 --> 00:07:17,039
question

192
00:07:17,039 --> 00:07:19,840
then of course we have the question and

193
00:07:19,840 --> 00:07:20,639
um

194
00:07:20,639 --> 00:07:23,759
the question that we want to ask is

195
00:07:23,759 --> 00:07:27,039
who targeted

196
00:07:27,039 --> 00:07:30,560
the government in the

197
00:07:30,560 --> 00:07:34,319
middle east make an array that's

198
00:07:34,319 --> 00:07:34,960
incorrect

199
00:07:34,960 --> 00:07:38,319
should like do it like this we can se

200
00:07:38,319 --> 00:07:40,240
the properties that we want to search

201
00:07:40,240 --> 00:07:41,759
through and that is something we want to

202
00:07:41,759 --> 00:07:43,280
do based on the

203
00:07:43,280 --> 00:07:46,080
descriptions and then we have so-called

204
00:07:46,080 --> 00:07:48,240
underscore properties

205
00:07:48,240 --> 00:07:50,400
additional or we can say well this is

206
00:07:50,400 --> 00:07:51,680
where we want to see the

207
00:07:51,680 --> 00:07:53,919
answer to the question and we want to

208
00:07:53,919 --> 00:07:55,039
see the result so

209
00:07:55,039 --> 00:07:57,039
very simple question a query where we

210
00:07:57,039 --> 00:07:58,800
say based on these

211
00:07:58,800 --> 00:08:00,479
thread groups search for the

212
00:08:00,479 --> 00:08:02,240
descriptions and show us

213
00:08:02,240 --> 00:08:04,000
who targeted the government in the

214
00:08:04,000 --> 00:08:07,280
middle east so let's run this query

215
00:08:07,280 --> 00:08:10,240
so here we'll find the answer oral rig

216
00:08:10,240 --> 00:08:12,879
what we now can do with uh with y8 is

217
00:08:12,879 --> 00:08:13,840
that we can

218
00:08:13,840 --> 00:08:16,960
say like well for example also include

219
00:08:16,960 --> 00:08:19,120
the name of this thread the description

220
00:08:19,120 --> 00:08:20,639
of this thread group

221
00:08:20,639 --> 00:08:21,919
and then you see that the name is

222
00:08:21,919 --> 00:08:24,800
actually also oil rig

223
00:08:24,800 --> 00:08:27,599
but if you're also gonna look at um uh

224
00:08:27,599 --> 00:08:28,960
the description

225
00:08:28,960 --> 00:08:30,800
uh then we see that actually inside the

226
00:08:30,800 --> 00:08:32,799
description there's more information

227
00:08:32,799 --> 00:08:36,080
about oil rig so let's go one step

228
00:08:36,080 --> 00:08:36,559
deeper

229
00:08:36,559 --> 00:08:40,479
so let's say like uh what kind of

230
00:08:40,479 --> 00:08:44,399
attacks does all rig

231
00:08:44,399 --> 00:08:47,680
use and we find that

232
00:08:47,680 --> 00:08:50,240
in the document white ulric the answer

233
00:08:50,240 --> 00:08:53,040
is found which is supply chain attacks

234
00:08:53,040 --> 00:08:55,120
um we've now been looking at the graph

235
00:08:55,120 --> 00:08:56,480
from the level of the

236
00:08:56,480 --> 00:08:59,279
thread group so let's take a completely

237
00:08:59,279 --> 00:08:59,839
different

238
00:08:59,839 --> 00:09:02,000
approach and use the supply chain

239
00:09:02,000 --> 00:09:03,680
effects in there

240
00:09:03,680 --> 00:09:05,760
so let's start from the perspective of

241
00:09:05,760 --> 00:09:08,000
the attack technique

242
00:09:08,000 --> 00:09:10,480
and so if you now also say i have this

243
00:09:10,480 --> 00:09:12,640
simple query say where we say get

244
00:09:12,640 --> 00:09:14,560
attack techniques and show me the names

245
00:09:14,560 --> 00:09:15,920
and if we run this query

246
00:09:15,920 --> 00:09:17,839
we just get a bunch of attack techniques

247
00:09:17,839 --> 00:09:19,600
coming from the metro attack framework

248
00:09:19,600 --> 00:09:21,120
now when we hit we can do question

249
00:09:21,120 --> 00:09:22,000
answering but we can

250
00:09:22,000 --> 00:09:26,240
also do a near searches so we can also

251
00:09:26,240 --> 00:09:29,120
search for neighboring concepts so let's

252
00:09:29,120 --> 00:09:30,399
say for example here we have

253
00:09:30,399 --> 00:09:32,560
near text and we're going to look for

254
00:09:32,560 --> 00:09:33,600
concepts and then

255
00:09:33,600 --> 00:09:35,920
for the concepts let's look at the

256
00:09:35,920 --> 00:09:38,000
supply chain attacks

257
00:09:38,000 --> 00:09:40,959
and let's say for this query limit that

258
00:09:40,959 --> 00:09:41,760
to the first

259
00:09:41,760 --> 00:09:46,000
10 results so if i now run these queries

260
00:09:46,000 --> 00:09:47,839
then with supply chain attacks then the

261
00:09:47,839 --> 00:09:49,680
most neighboring concepts are of course

262
00:09:49,680 --> 00:09:51,839
well the supply chain compromise

263
00:09:51,839 --> 00:09:53,519
the supply chain compromise or the

264
00:09:53,519 --> 00:09:56,959
compromising hardware supply chain etc

265
00:09:56,959 --> 00:10:00,880
so a port was opened

266
00:10:00,880 --> 00:10:04,800
at the hosts

267
00:10:04,800 --> 00:10:07,839
firewall so same query but we're now

268
00:10:07,839 --> 00:10:08,560
going to say

269
00:10:08,560 --> 00:10:12,240
well inside the the attack

270
00:10:12,240 --> 00:10:15,760
they somehow opened uh

271
00:10:15,760 --> 00:10:18,480
they opened a port at the hostess

272
00:10:18,480 --> 00:10:19,600
firewall

273
00:10:19,600 --> 00:10:22,560
we want to be at least 80 certain and we

274
00:10:22,560 --> 00:10:24,720
want immediately shown what the known

275
00:10:24,720 --> 00:10:27,200
mitigations are for these solutions

276
00:10:27,200 --> 00:10:30,240
and we want to see names for these types

277
00:10:30,240 --> 00:10:32,320
of attacks

278
00:10:32,320 --> 00:10:33,760
so thank you very much for listening my

279
00:10:33,760 --> 00:10:36,240
name is bob fallout feel free to reach

280
00:10:36,240 --> 00:10:37,920
out to me on bob at seminar technology

281
00:10:37,920 --> 00:10:40,079
if you want to learn more about how bv8

282
00:10:40,079 --> 00:10:41,680
can help

283
00:10:41,680 --> 00:10:45,279
in your domain or with your

284
00:10:45,279 --> 00:10:47,560
the challenges that you have on

285
00:10:47,560 --> 00:10:49,440
semi.technology you can also find our

286
00:10:49,440 --> 00:10:51,040
open core software so you can play

287
00:10:51,040 --> 00:10:53,360
around with it you can try it out

288
00:10:53,360 --> 00:10:55,040
so i'm looking very much forward to

289
00:10:55,040 --> 00:10:57,279
hearing from you and hopefully we can

290
00:10:57,279 --> 00:10:58,480
help you

291
00:10:58,480 --> 00:11:01,839
taking the next step in intelligent

292
00:11:01,839 --> 00:11:03,279
threat analysis

293
00:11:03,279 --> 00:11:07,439
thank you so much for listening bye-bye

