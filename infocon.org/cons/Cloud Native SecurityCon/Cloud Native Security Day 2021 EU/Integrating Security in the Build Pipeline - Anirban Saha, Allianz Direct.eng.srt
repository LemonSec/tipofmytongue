1
00:00:00,640 --> 00:00:02,560
hey everyone i hope you have been having

2
00:00:02,560 --> 00:00:03,600
a great experience

3
00:00:03,600 --> 00:00:05,680
at the cloud native security day europe

4
00:00:05,680 --> 00:00:06,879
virtual event

5
00:00:06,879 --> 00:00:08,880
and i'm here to try and add to that

6
00:00:08,880 --> 00:00:10,960
experience with this session

7
00:00:10,960 --> 00:00:12,880
integrating security in the bill

8
00:00:12,880 --> 00:00:14,400
pipeline

9
00:00:14,400 --> 00:00:16,880
let me take a moment to introduce myself

10
00:00:16,880 --> 00:00:18,160
my name is anirban

11
00:00:18,160 --> 00:00:20,080
and i'm a member of the devops

12
00:00:20,080 --> 00:00:21,199
engineering team

13
00:00:21,199 --> 00:00:23,680
at allianz direct based in munich

14
00:00:23,680 --> 00:00:24,560
islands direct

15
00:00:24,560 --> 00:00:26,400
is the online insurance platform of

16
00:00:26,400 --> 00:00:27,920
allianz operating

17
00:00:27,920 --> 00:00:30,560
in a few countries in europe i have been

18
00:00:30,560 --> 00:00:31,679
working with cloud native

19
00:00:31,679 --> 00:00:33,840
infrastructures for almost 10 years

20
00:00:33,840 --> 00:00:36,000
and tend to automate solutions to make

21
00:00:36,000 --> 00:00:37,120
others and

22
00:00:37,120 --> 00:00:39,920
my life easier also with so many

23
00:00:39,920 --> 00:00:41,680
security incidents happening in our

24
00:00:41,680 --> 00:00:42,640
daily lives

25
00:00:42,640 --> 00:00:45,280
i sometimes tend to get a bit paranoid

26
00:00:45,280 --> 00:00:46,320
about security

27
00:00:46,320 --> 00:00:49,920
in my projects i should also mention

28
00:00:49,920 --> 00:00:51,840
here that all the information

29
00:00:51,840 --> 00:00:54,719
tools strategies opinions and

30
00:00:54,719 --> 00:00:57,120
demonstration presented in this session

31
00:00:57,120 --> 00:00:59,440
are entirely my own and they do not

32
00:00:59,440 --> 00:01:01,680
represent the views of alias direct

33
00:01:01,680 --> 00:01:04,799
or any other allianz entity although we

34
00:01:04,799 --> 00:01:07,280
do a lot of cool stuff at alias direct

35
00:01:07,280 --> 00:01:10,080
the contents of this session are not

36
00:01:10,080 --> 00:01:12,720
really aligned with them

37
00:01:12,720 --> 00:01:14,400
this session ends with a live

38
00:01:14,400 --> 00:01:16,880
demonstration of a ci cd pipeline

39
00:01:16,880 --> 00:01:20,080
with security tests enabled and involves

40
00:01:20,080 --> 00:01:22,720
a cloud native setup i'll explain the

41
00:01:22,720 --> 00:01:24,479
tools that have been used here

42
00:01:24,479 --> 00:01:26,799
during the session and for the attendees

43
00:01:26,799 --> 00:01:28,479
who are really interested in trying it

44
00:01:28,479 --> 00:01:29,520
out themselves

45
00:01:29,520 --> 00:01:31,680
i have added the configuration files in

46
00:01:31,680 --> 00:01:34,240
a couple of github repositories

47
00:01:34,240 --> 00:01:36,880
the build pipeline repository also has

48
00:01:36,880 --> 00:01:38,079
general guidelines

49
00:01:38,079 --> 00:01:40,240
about the base components that we are

50
00:01:40,240 --> 00:01:41,600
using in the demo

51
00:01:41,600 --> 00:01:44,560
and the commands to set them up i

52
00:01:44,560 --> 00:01:46,399
understand that for some beginners

53
00:01:46,399 --> 00:01:48,799
it might be a bit much to grasp but

54
00:01:48,799 --> 00:01:50,799
unfortunately because of some time

55
00:01:50,799 --> 00:01:52,960
constraints i'll not be able to

56
00:01:52,960 --> 00:01:54,799
demonstrate setting up the base

57
00:01:54,799 --> 00:01:55,600
components

58
00:01:55,600 --> 00:01:57,920
such as the kubernetes cluster the auto

59
00:01:57,920 --> 00:01:58,719
scaler

60
00:01:58,719 --> 00:02:02,159
and the ingress controllers so we will

61
00:02:02,159 --> 00:02:02,880
first look

62
00:02:02,880 --> 00:02:04,960
at why we are here understand the

63
00:02:04,960 --> 00:02:06,880
problem analyze it

64
00:02:06,880 --> 00:02:09,119
find out reasons for them and look at

65
00:02:09,119 --> 00:02:10,878
ways to mitigate them

66
00:02:10,878 --> 00:02:12,800
we will look at how a vulnerability

67
00:02:12,800 --> 00:02:14,560
scanning workflow works

68
00:02:14,560 --> 00:02:16,959
how they plug into the build pipeline

69
00:02:16,959 --> 00:02:18,400
the options that we have

70
00:02:18,400 --> 00:02:20,800
in terms of tools analyze different

71
00:02:20,800 --> 00:02:21,680
strategies

72
00:02:21,680 --> 00:02:23,840
to integrate security scans into the

73
00:02:23,840 --> 00:02:25,280
build pipeline

74
00:02:25,280 --> 00:02:27,520
and finally we will watch one such

75
00:02:27,520 --> 00:02:30,480
pipeline in live action

76
00:02:30,480 --> 00:02:32,160
i know that we all hate staring at

77
00:02:32,160 --> 00:02:33,680
powerpoint presentations

78
00:02:33,680 --> 00:02:35,440
believe me i know i really know that

79
00:02:35,440 --> 00:02:37,680
pain so i'm gonna finish up with the

80
00:02:37,680 --> 00:02:38,560
presentation

81
00:02:38,560 --> 00:02:41,440
as fast as possible and we'll dive into

82
00:02:41,440 --> 00:02:43,040
the fun stuff

83
00:02:43,040 --> 00:02:45,440
this is required as i really want to

84
00:02:45,440 --> 00:02:46,800
keep this simple

85
00:02:46,800 --> 00:02:48,879
and really want you to understand what

86
00:02:48,879 --> 00:02:52,560
we are doing and why we are doing it

87
00:02:52,560 --> 00:02:54,800
so why are we really here what is the

88
00:02:54,800 --> 00:02:56,800
problem that we are trying to solve

89
00:02:56,800 --> 00:02:58,879
in general terms we are trying to

90
00:02:58,879 --> 00:03:01,360
implement software security

91
00:03:01,360 --> 00:03:04,720
so how do we do it generally it starts

92
00:03:04,720 --> 00:03:06,000
with the business goals

93
00:03:06,000 --> 00:03:09,200
being defined resulting in products to

94
00:03:09,200 --> 00:03:11,040
be launched which happens

95
00:03:11,040 --> 00:03:13,840
at the management level the architect

96
00:03:13,840 --> 00:03:15,280
designs the software

97
00:03:15,280 --> 00:03:17,840
as per requirements developers get on

98
00:03:17,840 --> 00:03:19,519
the same page with the architect

99
00:03:19,519 --> 00:03:21,120
and they start creating some cool

100
00:03:21,120 --> 00:03:23,840
software with modern life cycle

101
00:03:23,840 --> 00:03:26,720
software life cycle processes testing

102
00:03:26,720 --> 00:03:28,400
the software is very essential

103
00:03:28,400 --> 00:03:30,959
we all we all know that once all of this

104
00:03:30,959 --> 00:03:32,080
is achieved

105
00:03:32,080 --> 00:03:34,560
the artifact is created and the product

106
00:03:34,560 --> 00:03:35,920
is released

107
00:03:35,920 --> 00:03:38,959
generally at this point a security or

108
00:03:38,959 --> 00:03:40,159
penetration test

109
00:03:40,159 --> 00:03:42,480
is scheduled where vulnerabilities are

110
00:03:42,480 --> 00:03:43,840
detected

111
00:03:43,840 --> 00:03:46,080
or sometimes unfortunately there's

112
00:03:46,080 --> 00:03:49,040
really no security test done at all

113
00:03:49,040 --> 00:03:51,120
as the software has never been scanned

114
00:03:51,120 --> 00:03:52,640
before this list

115
00:03:52,640 --> 00:03:55,760
is quite long now think about a cloud

116
00:03:55,760 --> 00:03:56,879
native scenario

117
00:03:56,879 --> 00:03:59,519
where we are talking about more than 50

118
00:03:59,519 --> 00:04:01,439
to 60 micro services

119
00:04:01,439 --> 00:04:03,920
and the amount of time it would require

120
00:04:03,920 --> 00:04:05,439
to fix those problems

121
00:04:05,439 --> 00:04:08,159
that's huge right now with product

122
00:04:08,159 --> 00:04:08,959
priorities

123
00:04:08,959 --> 00:04:10,879
and feature requests it is quite

124
00:04:10,879 --> 00:04:12,720
difficult to devote dedicated time for

125
00:04:12,720 --> 00:04:14,239
such fixes

126
00:04:14,239 --> 00:04:17,120
as a result it gets postponed or greatly

127
00:04:17,120 --> 00:04:18,798
neglected altogether

128
00:04:18,798 --> 00:04:21,040
and before we know there is a breach

129
00:04:21,040 --> 00:04:22,880
taking place

130
00:04:22,880 --> 00:04:25,440
so how do we approach the problem you

131
00:04:25,440 --> 00:04:27,360
might have come across the phase

132
00:04:27,360 --> 00:04:30,880
shifting left on security this

133
00:04:30,880 --> 00:04:33,680
very very simply means that in the left

134
00:04:33,680 --> 00:04:34,800
to right process

135
00:04:34,800 --> 00:04:37,680
progress of software development life

136
00:04:37,680 --> 00:04:38,400
cycle

137
00:04:38,400 --> 00:04:40,479
we need to move the security testing

138
00:04:40,479 --> 00:04:41,840
towards the left

139
00:04:41,840 --> 00:04:44,560
that is early on in the development

140
00:04:44,560 --> 00:04:46,400
process

141
00:04:46,400 --> 00:04:49,759
the basic idea is to detect and fix

142
00:04:49,759 --> 00:04:52,720
security problems during development and

143
00:04:52,720 --> 00:04:55,120
not after the service is released

144
00:04:55,120 --> 00:04:56,960
so how do we actually go about

145
00:04:56,960 --> 00:04:59,759
addressing the issue

146
00:04:59,759 --> 00:05:02,240
the final objective of any business is

147
00:05:02,240 --> 00:05:04,080
to create a trust relationship

148
00:05:04,080 --> 00:05:08,080
with the customers the clients and

149
00:05:08,080 --> 00:05:10,800
and the registered users to do this you

150
00:05:10,800 --> 00:05:12,639
need to be able to convince them

151
00:05:12,639 --> 00:05:14,960
that when they provide you with the data

152
00:05:14,960 --> 00:05:16,800
it is not going to be compromised

153
00:05:16,800 --> 00:05:19,840
under any circumstances at present

154
00:05:19,840 --> 00:05:23,120
we are providing our financial insurance

155
00:05:23,120 --> 00:05:26,800
medical and our personal data online

156
00:05:26,800 --> 00:05:29,680
to service providers every day we would

157
00:05:29,680 --> 00:05:31,440
definitely not want to be associated

158
00:05:31,440 --> 00:05:32,639
with a service

159
00:05:32,639 --> 00:05:35,680
who are not able to protect our data

160
00:05:35,680 --> 00:05:38,080
to do this first and foremost thing to

161
00:05:38,080 --> 00:05:39,039
be done

162
00:05:39,039 --> 00:05:41,440
is to make each and every person

163
00:05:41,440 --> 00:05:44,479
responsible for security

164
00:05:44,479 --> 00:05:46,160
when you leave your office door open by

165
00:05:46,160 --> 00:05:48,000
mistake you are responsible for the

166
00:05:48,000 --> 00:05:50,160
safety of hundreds of your colleagues in

167
00:05:50,160 --> 00:05:51,680
the office building

168
00:05:51,680 --> 00:05:53,759
and you can compromise it by letting in

169
00:05:53,759 --> 00:05:55,199
an intruder

170
00:05:55,199 --> 00:05:57,360
this person can be an office

171
00:05:57,360 --> 00:05:58,560
administrator

172
00:05:58,560 --> 00:06:01,759
he can be an engineer a manager or even

173
00:06:01,759 --> 00:06:04,160
the ceo of the company

174
00:06:04,160 --> 00:06:06,000
similarly in the software product

175
00:06:06,000 --> 00:06:08,000
lifecycle each person

176
00:06:08,000 --> 00:06:10,080
needs to understand that they need to be

177
00:06:10,080 --> 00:06:12,240
responsible for security

178
00:06:12,240 --> 00:06:14,720
whether it is via software design code

179
00:06:14,720 --> 00:06:15,520
creation

180
00:06:15,520 --> 00:06:18,840
software deployment or really site

181
00:06:18,840 --> 00:06:21,199
reliability

182
00:06:21,199 --> 00:06:23,440
developers really understand features

183
00:06:23,440 --> 00:06:25,840
and feature requests very well right

184
00:06:25,840 --> 00:06:28,560
so start treating security fixes as

185
00:06:28,560 --> 00:06:29,520
features

186
00:06:29,520 --> 00:06:31,440
and integrate them in the development

187
00:06:31,440 --> 00:06:32,639
process

188
00:06:32,639 --> 00:06:35,039
in large development teams instead of

189
00:06:35,039 --> 00:06:37,360
asking and expecting everyone to fix

190
00:06:37,360 --> 00:06:38,720
their libraries

191
00:06:38,720 --> 00:06:41,360
use a pre-built library repository which

192
00:06:41,360 --> 00:06:43,120
only contains pre-approved

193
00:06:43,120 --> 00:06:46,240
and vulnerability-free libraries to fix

194
00:06:46,240 --> 00:06:46,960
problems

195
00:06:46,960 --> 00:06:48,880
you need to detect them first and know

196
00:06:48,880 --> 00:06:51,199
how to make it part of the process

197
00:06:51,199 --> 00:06:53,039
so go for professional help in such

198
00:06:53,039 --> 00:06:54,720
cases or

199
00:06:54,720 --> 00:06:58,400
really hire dedicated security personnel

200
00:06:58,400 --> 00:07:00,160
train the teams so that they first

201
00:07:00,160 --> 00:07:02,319
understand what they are doing and why

202
00:07:02,319 --> 00:07:04,400
they are doing it

203
00:07:04,400 --> 00:07:06,639
it's not only important to decide to

204
00:07:06,639 --> 00:07:08,560
shift left on security

205
00:07:08,560 --> 00:07:12,160
but also to understand what to scan for

206
00:07:12,160 --> 00:07:14,400
vulnerabilities are of different kinds

207
00:07:14,400 --> 00:07:16,240
and there are different stages when they

208
00:07:16,240 --> 00:07:17,280
can be detected

209
00:07:17,280 --> 00:07:19,840
and fixed the first step in this

210
00:07:19,840 --> 00:07:20,800
direction

211
00:07:20,800 --> 00:07:23,039
is to look for package or dependency

212
00:07:23,039 --> 00:07:24,479
vulnerabilities

213
00:07:24,479 --> 00:07:26,240
they include base operating system

214
00:07:26,240 --> 00:07:27,919
packages and also

215
00:07:27,919 --> 00:07:31,280
application packages such as ruby python

216
00:07:31,280 --> 00:07:34,160
java node or just any other programming

217
00:07:34,160 --> 00:07:36,240
language dependencies

218
00:07:36,240 --> 00:07:38,160
this is a stage where the code is not

219
00:07:38,160 --> 00:07:39,360
involved yet

220
00:07:39,360 --> 00:07:41,599
it's just the system on which the code

221
00:07:41,599 --> 00:07:43,680
is supposed to run

222
00:07:43,680 --> 00:07:45,759
next we need to scan for vulnerabilities

223
00:07:45,759 --> 00:07:48,879
in code which has not been compiled yet

224
00:07:48,879 --> 00:07:51,199
these are situations when problems in

225
00:07:51,199 --> 00:07:54,000
the code can lead to unintended code

226
00:07:54,000 --> 00:07:57,199
executions this is called static

227
00:07:57,199 --> 00:07:58,000
application

228
00:07:58,000 --> 00:08:01,440
security testing or sast

229
00:08:01,440 --> 00:08:04,960
because the code is not running yet

230
00:08:04,960 --> 00:08:07,520
another type of security scanning is the

231
00:08:07,520 --> 00:08:08,639
dasd

232
00:08:08,639 --> 00:08:12,160
or dynamic application security testing

233
00:08:12,160 --> 00:08:14,639
in this stage the application needs to

234
00:08:14,639 --> 00:08:15,360
be scanned

235
00:08:15,360 --> 00:08:18,080
for vulnerabilities which exist when the

236
00:08:18,080 --> 00:08:20,879
code has been executed

237
00:08:20,879 --> 00:08:23,120
this need needs to be done against a

238
00:08:23,120 --> 00:08:25,440
running web application

239
00:08:25,440 --> 00:08:27,919
so we can really see that the attack

240
00:08:27,919 --> 00:08:28,639
vector

241
00:08:28,639 --> 00:08:31,759
is quite huge

242
00:08:31,759 --> 00:08:33,440
next we will look at general

243
00:08:33,440 --> 00:08:36,000
vulnerability scanning workflow

244
00:08:36,000 --> 00:08:38,559
the ci cd tool is probably one of the

245
00:08:38,559 --> 00:08:40,320
most important component

246
00:08:40,320 --> 00:08:42,799
in the setup which orchestrates the

247
00:08:42,799 --> 00:08:44,880
entire pipeline

248
00:08:44,880 --> 00:08:47,600
the code repository is used as a source

249
00:08:47,600 --> 00:08:48,720
for our code

250
00:08:48,720 --> 00:08:50,880
and the image repository for image

251
00:08:50,880 --> 00:08:53,040
artifact storage

252
00:08:53,040 --> 00:08:55,120
the security tool is really not

253
00:08:55,120 --> 00:08:56,080
mandatory

254
00:08:56,080 --> 00:08:59,200
in most cases there is a central

255
00:08:59,200 --> 00:09:03,040
solution security platform or tool

256
00:09:03,040 --> 00:09:05,920
which coordinates the communication

257
00:09:05,920 --> 00:09:07,519
between the build pipeline

258
00:09:07,519 --> 00:09:10,240
and the vulnerability scanners it is

259
00:09:10,240 --> 00:09:12,080
also used as a visibility tool

260
00:09:12,080 --> 00:09:14,640
to visualize vulnerability reports

261
00:09:14,640 --> 00:09:16,160
believe me when you look at the command

262
00:09:16,160 --> 00:09:19,440
line and see all those vulnerabilities

263
00:09:19,440 --> 00:09:22,080
it's not really that helpful a dashboard

264
00:09:22,080 --> 00:09:24,800
can really help you here

265
00:09:24,800 --> 00:09:26,720
pipelines can also direct commun

266
00:09:26,720 --> 00:09:28,160
directly communicate

267
00:09:28,160 --> 00:09:30,640
with the scanners the vulnerability

268
00:09:30,640 --> 00:09:31,360
scanners

269
00:09:31,360 --> 00:09:33,839
are the databases against which we

270
00:09:33,839 --> 00:09:36,560
compare our image packages

271
00:09:36,560 --> 00:09:38,880
if all goes well we can deploy our

272
00:09:38,880 --> 00:09:39,600
artifact

273
00:09:39,600 --> 00:09:43,279
on the container orchestration platform

274
00:09:43,279 --> 00:09:45,920
for our demo we will use a similar setup

275
00:09:45,920 --> 00:09:47,760
where we will use github as the code

276
00:09:47,760 --> 00:09:48,880
repository

277
00:09:48,880 --> 00:09:52,399
techton and argo cd as the cicd tool

278
00:09:52,399 --> 00:09:55,200
harbour as a security tool and the image

279
00:09:55,200 --> 00:09:56,160
repository

280
00:09:56,160 --> 00:09:58,480
and kubernetes as a container

281
00:09:58,480 --> 00:09:59,360
orchestration

282
00:09:59,360 --> 00:10:02,000
platform there are few open source

283
00:10:02,000 --> 00:10:03,440
vulnerability scanners

284
00:10:03,440 --> 00:10:06,640
available such as clear and trivi which

285
00:10:06,640 --> 00:10:09,040
are really really powerful tools

286
00:10:09,040 --> 00:10:11,279
the default deployment of harbor ships

287
00:10:11,279 --> 00:10:12,079
with trivi

288
00:10:12,079 --> 00:10:15,440
as the default scanner we will fetch

289
00:10:15,440 --> 00:10:18,240
our application code and dockerfile from

290
00:10:18,240 --> 00:10:19,920
the app repository

291
00:10:19,920 --> 00:10:22,560
build it and push it to a test image

292
00:10:22,560 --> 00:10:24,000
repository

293
00:10:24,000 --> 00:10:26,079
we will then scan the image from the

294
00:10:26,079 --> 00:10:27,200
test repository

295
00:10:27,200 --> 00:10:29,839
for vulnerabilities if there are none to

296
00:10:29,839 --> 00:10:30,640
be found

297
00:10:30,640 --> 00:10:33,279
then the image is promoted from the test

298
00:10:33,279 --> 00:10:35,040
to a prod repository

299
00:10:35,040 --> 00:10:37,600
finally we will deploy the app from the

300
00:10:37,600 --> 00:10:39,279
prod repository

301
00:10:39,279 --> 00:10:41,279
we definitely wouldn't want vulnerable

302
00:10:41,279 --> 00:10:43,200
images to land up in plot repositories

303
00:10:43,200 --> 00:10:44,320
right

304
00:10:44,320 --> 00:10:46,560
if the image has vulnerabilities the

305
00:10:46,560 --> 00:10:47,760
pipeline will stop

306
00:10:47,760 --> 00:10:50,160
at that stage and we can visualize the

307
00:10:50,160 --> 00:10:53,279
vulnerabilities in the harvard dashboard

308
00:10:53,279 --> 00:10:56,959
for our demo our app is a simple nginx

309
00:10:56,959 --> 00:11:00,240
container built from a debian or ubuntu

310
00:11:00,240 --> 00:11:00,720
based

311
00:11:00,720 --> 00:11:04,399
image nginx is installed on this image

312
00:11:04,399 --> 00:11:07,360
and a test web page is added so really

313
00:11:07,360 --> 00:11:07,760
really

314
00:11:07,760 --> 00:11:11,360
simple stuff the debian image has high

315
00:11:11,360 --> 00:11:13,360
and critical vulnerabilities which we

316
00:11:13,360 --> 00:11:15,200
don't want to be in fraud

317
00:11:15,200 --> 00:11:18,560
whereas the ubuntu image only has medium

318
00:11:18,560 --> 00:11:20,800
and lower vulnerabilities which we

319
00:11:20,800 --> 00:11:23,120
definitely want deployed

320
00:11:23,120 --> 00:11:24,720
that that will actually be our

321
00:11:24,720 --> 00:11:26,640
simulation

322
00:11:26,640 --> 00:11:28,880
we will use techton to create a build

323
00:11:28,880 --> 00:11:29,760
pipeline

324
00:11:29,760 --> 00:11:32,160
an argo cd to run the pipeline and

325
00:11:32,160 --> 00:11:34,240
deploy it on kubernetes

326
00:11:34,240 --> 00:11:36,720
argo cd is a cloud native deployment

327
00:11:36,720 --> 00:11:37,440
tool

328
00:11:37,440 --> 00:11:40,560
based on the gitops methodology there

329
00:11:40,560 --> 00:11:42,720
are some two specific terminologies

330
00:11:42,720 --> 00:11:45,200
used in the session but if you feel

331
00:11:45,200 --> 00:11:46,720
intimidated

332
00:11:46,720 --> 00:11:49,519
please feel free to use any other ci

333
00:11:49,519 --> 00:11:51,600
tool of your choice

334
00:11:51,600 --> 00:11:55,040
it is also a cncf incubating project

335
00:11:55,040 --> 00:11:58,160
however is also a cncf graduated project

336
00:11:58,160 --> 00:12:00,320
which is an image registry and helm

337
00:12:00,320 --> 00:12:01,519
repository

338
00:12:01,519 --> 00:12:04,160
it can also add plugable vulnerability

339
00:12:04,160 --> 00:12:04,959
scanners

340
00:12:04,959 --> 00:12:08,880
to be able to scan the uploaded images

341
00:12:08,880 --> 00:12:10,560
although we will demonstrate an

342
00:12:10,560 --> 00:12:12,800
automated bill pipeline in this demo

343
00:12:12,800 --> 00:12:14,880
this is quite far from a production

344
00:12:14,880 --> 00:12:16,320
build setup

345
00:12:16,320 --> 00:12:18,399
advanced features such as triggering

346
00:12:18,399 --> 00:12:20,000
pipelines via events

347
00:12:20,000 --> 00:12:22,320
and passing parameters are not part of

348
00:12:22,320 --> 00:12:23,760
this demo

349
00:12:23,760 --> 00:12:26,399
i have kept the app repo with helm chart

350
00:12:26,399 --> 00:12:27,839
and the pipeline repo

351
00:12:27,839 --> 00:12:30,079
different to help you understand this

352
00:12:30,079 --> 00:12:31,200
better

353
00:12:31,200 --> 00:12:34,079
however they can be modified to create a

354
00:12:34,079 --> 00:12:36,800
more sophisticated workflow

355
00:12:36,800 --> 00:12:40,320
okay so we will now start with our demo

356
00:12:40,320 --> 00:12:42,079
this is the hardware dashboard that we

357
00:12:42,079 --> 00:12:44,079
have already installed in our kubernetes

358
00:12:44,079 --> 00:12:45,279
cluster

359
00:12:45,279 --> 00:12:47,360
we have created two different projects

360
00:12:47,360 --> 00:12:48,320
one for broad

361
00:12:48,320 --> 00:12:52,240
and one for test each harbour project

362
00:12:52,240 --> 00:12:55,519
acts as a docker image registry and

363
00:12:55,519 --> 00:12:58,320
also a help chart repository we have

364
00:12:58,320 --> 00:13:00,320
already gone to the configuration page

365
00:13:00,320 --> 00:13:02,959
for both projects and enabled the option

366
00:13:02,959 --> 00:13:04,399
to automatically scan

367
00:13:04,399 --> 00:13:07,839
images on push

368
00:13:08,320 --> 00:13:10,320
if we go to integration services we can

369
00:13:10,320 --> 00:13:12,639
see that trivi is already installed

370
00:13:12,639 --> 00:13:15,680
as the default scanner if we want

371
00:13:15,680 --> 00:13:19,360
we can add a new scanner like claire

372
00:13:19,360 --> 00:13:21,839
we have already set up claire in the

373
00:13:21,839 --> 00:13:22,560
harbour

374
00:13:22,560 --> 00:13:25,120
namespace in kubernetes if we check the

375
00:13:25,120 --> 00:13:27,040
parts

376
00:13:27,040 --> 00:13:29,120
we can see we have a clear part running

377
00:13:29,120 --> 00:13:31,040
and a clear postgres board which is a

378
00:13:31,040 --> 00:13:31,760
database

379
00:13:31,760 --> 00:13:33,920
where it stores the vulnerabilities

380
00:13:33,920 --> 00:13:35,760
database

381
00:13:35,760 --> 00:13:38,959
we also have a clear scanner adapter

382
00:13:38,959 --> 00:13:41,279
which helps clear to communicate with

383
00:13:41,279 --> 00:13:43,279
hardware

384
00:13:43,279 --> 00:13:46,560
if we add a new scanner

385
00:13:46,560 --> 00:13:49,839
we name it claire

386
00:13:50,959 --> 00:13:53,360
we put in the address which is the

387
00:13:53,360 --> 00:13:54,079
service

388
00:13:54,079 --> 00:13:58,560
for glare and the port

389
00:13:59,440 --> 00:14:02,560
there you can see we have added glare as

390
00:14:02,560 --> 00:14:04,320
a secondary

391
00:14:04,320 --> 00:14:07,680
vulnerability scanner for our demo

392
00:14:07,680 --> 00:14:10,959
we will still use trivi

393
00:14:10,959 --> 00:14:12,880
for our demo we have created couple of

394
00:14:12,880 --> 00:14:15,279
help charts which will help us

395
00:14:15,279 --> 00:14:18,320
run our pipeline the first term chart is

396
00:14:18,320 --> 00:14:19,839
called app deploy

397
00:14:19,839 --> 00:14:22,959
which is actually a simple help chart

398
00:14:22,959 --> 00:14:25,440
to deploy an application and create an

399
00:14:25,440 --> 00:14:26,399
ingress for it

400
00:14:26,399 --> 00:14:29,360
to expose it to the internet the second

401
00:14:29,360 --> 00:14:30,000
helm chart

402
00:14:30,000 --> 00:14:34,240
is called tecton build pipeline which

403
00:14:34,240 --> 00:14:37,040
contains all the configurations to run a

404
00:14:37,040 --> 00:14:37,760
tecton

405
00:14:37,760 --> 00:14:41,600
build pipeline we have already built

406
00:14:41,600 --> 00:14:44,880
both of these hunt charts

407
00:14:44,880 --> 00:14:47,519
and we have already uploaded them to the

408
00:14:47,519 --> 00:14:49,440
health charts repository

409
00:14:49,440 --> 00:14:52,480
in the broad project in harbour

410
00:14:52,480 --> 00:14:54,079
if we check the build pipeline

411
00:14:54,079 --> 00:14:56,079
repository we will find a directory

412
00:14:56,079 --> 00:14:57,360
called secrets

413
00:14:57,360 --> 00:14:59,199
which are some kubernetes secret

414
00:14:59,199 --> 00:15:01,199
manifests which are to be applied

415
00:15:01,199 --> 00:15:03,360
to the combinator's namespaces before

416
00:15:03,360 --> 00:15:05,279
our demo can be run

417
00:15:05,279 --> 00:15:06,880
they are just basic authentication

418
00:15:06,880 --> 00:15:09,120
credentials as some and some docker

419
00:15:09,120 --> 00:15:12,240
registry credentials

420
00:15:12,240 --> 00:15:15,920
next if we check our health charts

421
00:15:15,920 --> 00:15:17,920
we will quickly go to the components

422
00:15:17,920 --> 00:15:19,440
that we have added here

423
00:15:19,440 --> 00:15:22,399
we have added some pipeline resources

424
00:15:22,399 --> 00:15:24,399
which have our git repository

425
00:15:24,399 --> 00:15:27,839
and the image registry

426
00:15:28,639 --> 00:15:31,680
we have added some config maps which has

427
00:15:31,680 --> 00:15:34,800
the metadata for our build pipeline like

428
00:15:34,800 --> 00:15:36,560
docker tag the image name

429
00:15:36,560 --> 00:15:39,600
the namespaces and the argo cd server

430
00:15:39,600 --> 00:15:43,519
and the argosy application name

431
00:15:43,680 --> 00:15:46,959
we also have a series of tasks that we

432
00:15:46,959 --> 00:15:47,680
are going to run

433
00:15:47,680 --> 00:15:49,519
in our pipeline which we have already

434
00:15:49,519 --> 00:15:52,720
discussed which is the docker build task

435
00:15:52,720 --> 00:15:54,959
the security scan task the image

436
00:15:54,959 --> 00:15:56,160
promotion task

437
00:15:56,160 --> 00:16:01,199
and finally the rocd up sync task

438
00:16:02,480 --> 00:16:04,720
we also have a service account which is

439
00:16:04,720 --> 00:16:06,399
attached to one of the docker

440
00:16:06,399 --> 00:16:07,680
credentials

441
00:16:07,680 --> 00:16:09,920
which helps us to provide authentication

442
00:16:09,920 --> 00:16:12,800
for our pipeline

443
00:16:12,800 --> 00:16:16,079
we have a pipeline definition which

444
00:16:16,079 --> 00:16:18,079
integrates all the tasks that we have

445
00:16:18,079 --> 00:16:20,720
already created

446
00:16:20,720 --> 00:16:23,440
and finally we have a pipeline run

447
00:16:23,440 --> 00:16:24,160
definition

448
00:16:24,160 --> 00:16:27,279
which actually runs our pipeline

449
00:16:27,279 --> 00:16:30,320
using tecton our second repository is

450
00:16:30,320 --> 00:16:31,600
called example app

451
00:16:31,600 --> 00:16:33,440
which has the configurations for the

452
00:16:33,440 --> 00:16:36,000
application that we are going to deploy

453
00:16:36,000 --> 00:16:38,160
the first directory is called app and it

454
00:16:38,160 --> 00:16:40,160
contains the docker file

455
00:16:40,160 --> 00:16:41,839
and the sample web page that we are

456
00:16:41,839 --> 00:16:44,079
going to deploy we are going to start

457
00:16:44,079 --> 00:16:45,839
with the debian image which is supposed

458
00:16:45,839 --> 00:16:47,120
to have the high and critical

459
00:16:47,120 --> 00:16:48,240
vulnerabilities

460
00:16:48,240 --> 00:16:51,279
and will be breaking our pipeline

461
00:16:51,279 --> 00:16:53,519
the second directory is called hell map

462
00:16:53,519 --> 00:16:54,480
and it has

463
00:16:54,480 --> 00:16:57,600
the helm chart specification to deploy

464
00:16:57,600 --> 00:16:58,160
the

465
00:16:58,160 --> 00:17:00,160
application and it uses the app

466
00:17:00,160 --> 00:17:04,480
deployment chart as a dependency

467
00:17:04,480 --> 00:17:06,079
the third directory is called helm

468
00:17:06,079 --> 00:17:08,640
pipeline and it uses the tecton build

469
00:17:08,640 --> 00:17:11,119
pipeline helm chart as a dependency and

470
00:17:11,119 --> 00:17:11,919
will be used

471
00:17:11,919 --> 00:17:14,959
to run a tecton pipeline

472
00:17:14,959 --> 00:17:17,119
in the build pipeline repository there's

473
00:17:17,119 --> 00:17:18,959
another directory called argo cd

474
00:17:18,959 --> 00:17:19,839
resources

475
00:17:19,839 --> 00:17:22,480
which has some manifests for our argo cd

476
00:17:22,480 --> 00:17:24,720
application

477
00:17:24,720 --> 00:17:28,160
the first one is used to add the

478
00:17:28,160 --> 00:17:30,480
hardware registry information into argo

479
00:17:30,480 --> 00:17:32,080
cd so that it can fetch

480
00:17:32,080 --> 00:17:34,720
help charts

481
00:17:35,120 --> 00:17:38,000
the example app manifest is used to

482
00:17:38,000 --> 00:17:38,960
create the applique

483
00:17:38,960 --> 00:17:41,520
the argo cd application to deploy to

484
00:17:41,520 --> 00:17:44,160
actually deploy the application

485
00:17:44,160 --> 00:17:46,320
and the third manifest is used to create

486
00:17:46,320 --> 00:17:47,919
the argo city application

487
00:17:47,919 --> 00:17:51,200
which will run our pill pipeline we will

488
00:17:51,200 --> 00:17:53,600
now go to the command line

489
00:17:53,600 --> 00:17:56,559
go to the argo city resources directory

490
00:17:56,559 --> 00:17:58,879
and

491
00:17:59,200 --> 00:18:02,240
we will apply each

492
00:18:02,240 --> 00:18:14,720
of this manifests

493
00:18:14,720 --> 00:18:18,559
if we now go to the argo cd dashboard

494
00:18:18,559 --> 00:18:21,520
we will see both our applications have

495
00:18:21,520 --> 00:18:23,200
been created

496
00:18:23,200 --> 00:18:25,360
and if we go to the repositories page we

497
00:18:25,360 --> 00:18:27,520
will see that our hardware

498
00:18:27,520 --> 00:18:30,880
helmet repository has automatically been

499
00:18:30,880 --> 00:18:31,679
added

500
00:18:31,679 --> 00:18:34,160
and the connection is successful the

501
00:18:34,160 --> 00:18:35,919
example lab build pipeline

502
00:18:35,919 --> 00:18:38,799
gets its configuration from the helm

503
00:18:38,799 --> 00:18:40,160
pipeline directory

504
00:18:40,160 --> 00:18:43,760
of the example app repository the values

505
00:18:43,760 --> 00:18:45,039
file

506
00:18:45,039 --> 00:18:47,280
of the sun chart has the corresponding

507
00:18:47,280 --> 00:18:48,080
values

508
00:18:48,080 --> 00:18:50,799
which helps the pipeline determine its

509
00:18:50,799 --> 00:18:52,400
status

510
00:18:52,400 --> 00:18:54,960
if we go to the argo cd application we

511
00:18:54,960 --> 00:18:55,760
will see

512
00:18:55,760 --> 00:18:57,919
that all of these resources are ready to

513
00:18:57,919 --> 00:18:59,120
be created

514
00:18:59,120 --> 00:19:01,679
and it creates a dynamic name for the

515
00:19:01,679 --> 00:19:03,120
pipeline run

516
00:19:03,120 --> 00:19:06,160
with help of the tag

517
00:19:06,160 --> 00:19:09,200
that we have added in the values file

518
00:19:09,200 --> 00:19:11,360
in a more sophisticated workflow we will

519
00:19:11,360 --> 00:19:13,360
not be adding this tag manually

520
00:19:13,360 --> 00:19:16,000
but it will be created when our

521
00:19:16,000 --> 00:19:17,840
automated build pipeline works

522
00:19:17,840 --> 00:19:21,440
via triggers and events so finally

523
00:19:21,440 --> 00:19:24,080
it's time for us to run our pipeline and

524
00:19:24,080 --> 00:19:24,480
see

525
00:19:24,480 --> 00:19:28,000
the output we will run the sync option

526
00:19:28,000 --> 00:19:30,480
and we will select the prone parameter

527
00:19:30,480 --> 00:19:31,200
here

528
00:19:31,200 --> 00:19:34,400
and we will run synchronize this will

529
00:19:34,400 --> 00:19:36,160
take some time so i will skip

530
00:19:36,160 --> 00:19:39,200
the video here if we now check our

531
00:19:39,200 --> 00:19:40,880
pipeline we will see that

532
00:19:40,880 --> 00:19:45,679
it has stopped at the security scan step

533
00:19:45,679 --> 00:19:47,840
and we will see the reason why because

534
00:19:47,840 --> 00:19:49,440
it has found high

535
00:19:49,440 --> 00:19:52,480
and critical vulnerabilities so in the

536
00:19:52,480 --> 00:19:53,520
meantime

537
00:19:53,520 --> 00:19:55,600
we have gone ahead and we have edited a

538
00:19:55,600 --> 00:19:57,840
docker file to change the image from

539
00:19:57,840 --> 00:19:58,480
debian

540
00:19:58,480 --> 00:20:01,840
to ubuntu and we have

541
00:20:01,840 --> 00:20:04,960
also bumped

542
00:20:04,960 --> 00:20:08,880
the tag for the image if we go to argo

543
00:20:08,880 --> 00:20:09,360
cd

544
00:20:09,360 --> 00:20:11,120
we will see that the change has

545
00:20:11,120 --> 00:20:13,200
automatically been detected

546
00:20:13,200 --> 00:20:15,760
and the zero zero one pipeline run is to

547
00:20:15,760 --> 00:20:16,640
be removed

548
00:20:16,640 --> 00:20:19,919
and a new pipeline run with 002 will be

549
00:20:19,919 --> 00:20:20,480
started

550
00:20:20,480 --> 00:20:23,200
when we synchronize the pipeline so we

551
00:20:23,200 --> 00:20:24,320
will go ahead

552
00:20:24,320 --> 00:20:27,200
and run synchronize again and we will

553
00:20:27,200 --> 00:20:28,400
select the prune option

554
00:20:28,400 --> 00:20:31,039
so that the old pipeline's old tasks are

555
00:20:31,039 --> 00:20:31,679
removed

556
00:20:31,679 --> 00:20:35,840
and the new ones are created

557
00:20:37,440 --> 00:20:39,440
if we now check our pipeline we will see

558
00:20:39,440 --> 00:20:41,520
that it has completed successfully

559
00:20:41,520 --> 00:20:44,720
because the security scan step was not

560
00:20:44,720 --> 00:20:45,600
able to find

561
00:20:45,600 --> 00:20:48,640
high or critical vulnerabilities

562
00:20:48,640 --> 00:20:50,559
if we now quickly check our hardware

563
00:20:50,559 --> 00:20:53,120
dashboard and check the test project

564
00:20:53,120 --> 00:20:56,400
we will find our example have image here

565
00:20:56,400 --> 00:20:58,799
and if we go into details we will see

566
00:20:58,799 --> 00:21:00,159
each of our tags

567
00:21:00,159 --> 00:21:02,480
with its corresponding vulnerabilities

568
00:21:02,480 --> 00:21:03,360
here we can see

569
00:21:03,360 --> 00:21:06,400
tag 001 has critical vulnerabilities and

570
00:21:06,400 --> 00:21:07,039
0 0

571
00:21:07,039 --> 00:21:10,080
2 has medium and lower ones which is why

572
00:21:10,080 --> 00:21:14,000
it allowed us to perform our deployment

573
00:21:14,000 --> 00:21:16,240
if we go further we can actually get

574
00:21:16,240 --> 00:21:18,640
details about all the vulnerabilities

575
00:21:18,640 --> 00:21:21,679
that were found if you're curious as to

576
00:21:21,679 --> 00:21:24,400
what we did for the security scan step

577
00:21:24,400 --> 00:21:26,640
just go to the tasks manifest file in

578
00:21:26,640 --> 00:21:29,440
the tecton build pipeline head chart

579
00:21:29,440 --> 00:21:32,400
go to the app docker security scan task

580
00:21:32,400 --> 00:21:34,159
and there you will be able to see

581
00:21:34,159 --> 00:21:37,600
that we used the trivi docker image

582
00:21:37,600 --> 00:21:40,880
and we ran the trivi command to scan

583
00:21:40,880 --> 00:21:44,159
our image from the test repository and

584
00:21:44,159 --> 00:21:44,480
we

585
00:21:44,480 --> 00:21:46,400
checked for high and critical

586
00:21:46,400 --> 00:21:47,679
vulnerabilities

587
00:21:47,679 --> 00:21:50,480
and we asked the command to fail if it

588
00:21:50,480 --> 00:21:52,799
did find such vulnerabilities

589
00:21:52,799 --> 00:21:54,960
so with that we have reached the end of

590
00:21:54,960 --> 00:21:55,919
this session

591
00:21:55,919 --> 00:21:58,080
i hope the session was able to help you

592
00:21:58,080 --> 00:21:59,360
get some understanding

593
00:21:59,360 --> 00:22:01,600
of how we can have better and secure

594
00:22:01,600 --> 00:22:02,640
build pipelines

595
00:22:02,640 --> 00:22:04,880
and optimize the software development

596
00:22:04,880 --> 00:22:05,919
process

597
00:22:05,919 --> 00:22:08,400
i have added some links about this topic

598
00:22:08,400 --> 00:22:10,640
so be sure to check them out

599
00:22:10,640 --> 00:22:13,039
i hope to see you in another awesome

600
00:22:13,039 --> 00:22:14,720
event in the future

601
00:22:14,720 --> 00:22:17,600
thank you

