1
00:00:01,520 --> 00:00:03,919
um hello everyone welcome to this

2
00:00:03,919 --> 00:00:06,640
talk this recording uh for secure code

3
00:00:06,640 --> 00:00:08,559
development and lessons learned from

4
00:00:08,559 --> 00:00:11,200
hd security edit my name is sadio zala i

5
00:00:11,200 --> 00:00:14,320
am a senior software engineer at ibm

6
00:00:14,320 --> 00:00:16,640
and in context of this stock i am one of

7
00:00:16,640 --> 00:00:19,119
the fcd project maintainer

8
00:00:19,119 --> 00:00:22,560
and i have hitoshi mitake with me uh he

9
00:00:22,560 --> 00:00:26,320
is a site reliability engineer at indeed

10
00:00:26,320 --> 00:00:28,560
and he is also one of the project

11
00:00:28,560 --> 00:00:29,359
manager

12
00:00:29,359 --> 00:00:32,800
for the lcd

13
00:00:34,000 --> 00:00:36,960
all right so in this talk we basically

14
00:00:36,960 --> 00:00:37,360
will

15
00:00:37,360 --> 00:00:40,079
uh briefly cover you know a couple of

16
00:00:40,079 --> 00:00:41,360
the best practices

17
00:00:41,360 --> 00:00:43,760
like identifying the you know areas

18
00:00:43,760 --> 00:00:44,879
where you should be paying more

19
00:00:44,879 --> 00:00:45,600
attention

20
00:00:45,600 --> 00:00:48,239
as far as security of your project your

21
00:00:48,239 --> 00:00:50,239
software is concerned

22
00:00:50,239 --> 00:00:53,440
uh we'll talk about code analysis uh

23
00:00:53,440 --> 00:00:56,719
and you know then we will have uh

24
00:00:56,719 --> 00:00:59,039
mitaki uh talk about uh that's the

25
00:00:59,039 --> 00:01:02,160
security model we'll talk about

26
00:01:02,160 --> 00:01:04,640
uh some of the vulnerabilities uh

27
00:01:04,640 --> 00:01:05,438
examples

28
00:01:05,438 --> 00:01:08,080
that uh you know we they are real life

29
00:01:08,080 --> 00:01:09,439
examples that we run

30
00:01:09,439 --> 00:01:13,439
uh while uh doing the cd security audit

31
00:01:13,439 --> 00:01:15,920
and then we'll talk about uh you know

32
00:01:15,920 --> 00:01:17,119
working with github

33
00:01:17,119 --> 00:01:20,400
uh to publish series

34
00:01:20,400 --> 00:01:23,040
uh and then we'll conclude the talk uh

35
00:01:23,040 --> 00:01:24,159
we will not

36
00:01:24,159 --> 00:01:27,439
go into the you know the full software

37
00:01:27,439 --> 00:01:30,079
development life cycle and security will

38
00:01:30,079 --> 00:01:31,119
pretty much you know

39
00:01:31,119 --> 00:01:34,240
focus on the coding aspect

40
00:01:34,240 --> 00:01:37,040
uh in other things are out of scope for

41
00:01:37,040 --> 00:01:38,840
this talk

42
00:01:38,840 --> 00:01:40,960
so all right um

43
00:01:40,960 --> 00:01:42,799
so there are a couple of things that we

44
00:01:42,799 --> 00:01:44,720
really want to emphasize here you know

45
00:01:44,720 --> 00:01:46,000
as far as these

46
00:01:46,000 --> 00:01:48,159
uh secure coding practices are concerned

47
00:01:48,159 --> 00:01:49,439
the first one is

48
00:01:49,439 --> 00:01:52,640
you know identify uh

49
00:01:52,640 --> 00:01:54,880
you know high securities areas right

50
00:01:54,880 --> 00:01:58,240
that you want to pay a special attention

51
00:01:58,240 --> 00:02:01,200
um and you know how do you do that well

52
00:02:01,200 --> 00:02:03,439
refer to your project architecture right

53
00:02:03,439 --> 00:02:05,840
uh your software architecture that will

54
00:02:05,840 --> 00:02:09,598
help you to identify those areas where

55
00:02:09,598 --> 00:02:11,840
you know that it needs a special

56
00:02:11,840 --> 00:02:13,280
attention

57
00:02:13,280 --> 00:02:16,319
and we'll talk more about those

58
00:02:16,319 --> 00:02:19,520
checklists in the next slide then we'll

59
00:02:19,520 --> 00:02:21,440
talk about you know

60
00:02:21,440 --> 00:02:23,120
the most important part right the code

61
00:02:23,120 --> 00:02:24,720
assessment uh

62
00:02:24,720 --> 00:02:28,000
there are like two main methods in

63
00:02:28,000 --> 00:02:29,200
automated

64
00:02:29,200 --> 00:02:31,040
code assessment using the automated

65
00:02:31,040 --> 00:02:32,480
tools and

66
00:02:32,480 --> 00:02:35,200
doing the code review manually you want

67
00:02:35,200 --> 00:02:37,760
to make sure that you define the role

68
00:02:37,760 --> 00:02:40,480
of the assessment team up front right so

69
00:02:40,480 --> 00:02:41,440
that will help you

70
00:02:41,440 --> 00:02:45,120
as you go forward with the process and

71
00:02:45,120 --> 00:02:47,519
you also want to make sure that you plan

72
00:02:47,519 --> 00:02:49,120
on how do you

73
00:02:49,120 --> 00:02:51,040
how you will be addressing the findings

74
00:02:51,040 --> 00:02:52,720
right in short term

75
00:02:52,720 --> 00:02:54,640
like you know as soon as possible and

76
00:02:54,640 --> 00:02:56,319
then

77
00:02:56,319 --> 00:02:58,879
have it uh plan for the longer term

78
00:02:58,879 --> 00:03:00,319
something that you can

79
00:03:00,319 --> 00:03:04,239
uh you know apply so that

80
00:03:04,239 --> 00:03:06,879
in future you can prevent any any any of

81
00:03:06,879 --> 00:03:07,360
these

82
00:03:07,360 --> 00:03:09,280
issues that you ran into it as part of

83
00:03:09,280 --> 00:03:11,440
your code review

84
00:03:11,440 --> 00:03:13,200
and then you know depending on your

85
00:03:13,200 --> 00:03:15,760
project depending on your software

86
00:03:15,760 --> 00:03:18,959
uh you may want to plan uh

87
00:03:18,959 --> 00:03:22,480
on on you know publishing the cves right

88
00:03:22,480 --> 00:03:25,200
you may not need you may um so you

89
00:03:25,200 --> 00:03:26,720
decided but cbe is

90
00:03:26,720 --> 00:03:30,080
uh they help you uh you know

91
00:03:30,080 --> 00:03:33,440
typically uh to disclose uh any security

92
00:03:33,440 --> 00:03:35,200
flows with your software

93
00:03:35,200 --> 00:03:38,560
uh publicly right it helps the consumer

94
00:03:38,560 --> 00:03:40,879
of your software your project

95
00:03:40,879 --> 00:03:44,959
to stay relevant um all right so

96
00:03:44,959 --> 00:03:47,599
you know the things will talk they apply

97
00:03:47,599 --> 00:03:48,159
to

98
00:03:48,159 --> 00:03:50,879
you know pretty much uh any development

99
00:03:50,879 --> 00:03:52,879
environments you know any programming

100
00:03:52,879 --> 00:03:54,239
language that you are using

101
00:03:54,239 --> 00:03:57,280
but uh for this talk we will use

102
00:03:57,280 --> 00:04:00,480
uh you know golang and the lcd project

103
00:04:00,480 --> 00:04:01,680
as an example

104
00:04:01,680 --> 00:04:04,959
okay all right

105
00:04:04,959 --> 00:04:06,640
so i mentioned earlier that it's very

106
00:04:06,640 --> 00:04:08,159
important

107
00:04:08,159 --> 00:04:11,439
to identify the the areas that

108
00:04:11,439 --> 00:04:14,879
you think are you know critical crucial

109
00:04:14,879 --> 00:04:16,959
for your uh project security right

110
00:04:16,959 --> 00:04:20,000
so here is list of uh some of

111
00:04:20,000 --> 00:04:23,440
some of these um areas right uh

112
00:04:23,440 --> 00:04:26,720
you can have more uh than what i'm gonna

113
00:04:26,720 --> 00:04:30,400
mention here but these are some things

114
00:04:30,400 --> 00:04:32,240
that you definitely want to

115
00:04:32,240 --> 00:04:35,759
keep in mind while you uh you know worry

116
00:04:35,759 --> 00:04:37,520
about the security of your

117
00:04:37,520 --> 00:04:39,120
your project your software your

118
00:04:39,120 --> 00:04:41,280
application

119
00:04:41,280 --> 00:04:44,560
so as you know uh the first steps for

120
00:04:44,560 --> 00:04:47,120
you know security or software security

121
00:04:47,120 --> 00:04:47,600
is

122
00:04:47,600 --> 00:04:49,360
you know it starts with authentication

123
00:04:49,360 --> 00:04:50,880
right so

124
00:04:50,880 --> 00:04:54,639
uh for external users for internal users

125
00:04:54,639 --> 00:04:57,759
you know regardless make sure

126
00:04:57,759 --> 00:05:00,720
uh you have a a good authentication

127
00:05:00,720 --> 00:05:02,000
method

128
00:05:02,000 --> 00:05:05,199
uh in place right and then you know

129
00:05:05,199 --> 00:05:06,960
you are doing a lot of things like you

130
00:05:06,960 --> 00:05:09,600
know not just accepting any password

131
00:05:09,600 --> 00:05:10,080
right

132
00:05:10,080 --> 00:05:12,560
i have some validations there password

133
00:05:12,560 --> 00:05:15,840
length and you know that kind of things

134
00:05:15,840 --> 00:05:18,479
and the the follow-up step is uh

135
00:05:18,479 --> 00:05:19,840
authorizations right

136
00:05:19,840 --> 00:05:22,720
so once user get authenticated you're

137
00:05:22,720 --> 00:05:24,000
just making sure that

138
00:05:24,000 --> 00:05:27,039
they only have access where they

139
00:05:27,039 --> 00:05:29,440
are authorized right so you know using

140
00:05:29,440 --> 00:05:33,120
like a role based access control

141
00:05:33,120 --> 00:05:35,039
um tls certificates you want to make

142
00:05:35,039 --> 00:05:36,400
sure that you have a

143
00:05:36,400 --> 00:05:40,080
encrypted communication right and

144
00:05:40,080 --> 00:05:42,000
you don't allow the monkey in the middle

145
00:05:42,000 --> 00:05:43,600
interface

146
00:05:43,600 --> 00:05:46,800
uh input or data validations you know

147
00:05:46,800 --> 00:05:47,840
when it did all

148
00:05:47,840 --> 00:05:50,960
uh input parameters right um

149
00:05:50,960 --> 00:05:54,080
you know data type length range

150
00:05:54,080 --> 00:05:56,960
whatever you can think of uh do the

151
00:05:56,960 --> 00:05:59,039
proper validation

152
00:05:59,039 --> 00:06:01,199
right uh file permissions it's another

153
00:06:01,199 --> 00:06:02,160
important area

154
00:06:02,160 --> 00:06:05,120
uh you know make sure that while

155
00:06:05,120 --> 00:06:06,240
creating new files

156
00:06:06,240 --> 00:06:08,560
while working with any existing files

157
00:06:08,560 --> 00:06:09,840
directories

158
00:06:09,840 --> 00:06:12,160
you are checking and handling the

159
00:06:12,160 --> 00:06:13,840
permissions you know and pay special

160
00:06:13,840 --> 00:06:15,520
attention

161
00:06:15,520 --> 00:06:18,000
to any third party libraries or tools

162
00:06:18,000 --> 00:06:20,960
that you are using for file management

163
00:06:20,960 --> 00:06:22,400
we will actually show you an example

164
00:06:22,400 --> 00:06:25,039
later in this talk

165
00:06:25,039 --> 00:06:27,360
error handling uh that's another

166
00:06:27,360 --> 00:06:28,160
important

167
00:06:28,160 --> 00:06:31,360
idea for the overall health the security

168
00:06:31,360 --> 00:06:32,560
of the project

169
00:06:32,560 --> 00:06:36,479
or software so make sure that

170
00:06:36,479 --> 00:06:39,680
you know accidentally you're not leaking

171
00:06:39,680 --> 00:06:40,639
any information

172
00:06:40,639 --> 00:06:43,360
that can help you know hacks attackers

173
00:06:43,360 --> 00:06:44,080
write

174
00:06:44,080 --> 00:06:47,680
for example the password um

175
00:06:47,680 --> 00:06:51,120
and then locking right uh anything

176
00:06:51,120 --> 00:06:54,240
that you think uh can helpful towards

177
00:06:54,240 --> 00:06:57,120
uh identifying any security issues uh

178
00:06:57,120 --> 00:06:57,759
you know

179
00:06:57,759 --> 00:06:59,840
uh alerts right you you should be

180
00:06:59,840 --> 00:07:02,160
logging it

181
00:07:02,160 --> 00:07:03,440
you know that can help you with the

182
00:07:03,440 --> 00:07:05,599
auditing purpose later on like where the

183
00:07:05,599 --> 00:07:07,120
request is coming from

184
00:07:07,120 --> 00:07:11,440
uh who is sending the request right

185
00:07:12,080 --> 00:07:15,280
data exposure to make sure that you are

186
00:07:15,280 --> 00:07:15,599
not

187
00:07:15,599 --> 00:07:18,639
exposing any sensitive data uh so keep

188
00:07:18,639 --> 00:07:19,520
that in mind

189
00:07:19,520 --> 00:07:22,080
and you know the last but not least is

190
00:07:22,080 --> 00:07:25,360
uh if you are using a third party

191
00:07:25,360 --> 00:07:29,680
tools uh then make sure uh you know you

192
00:07:29,680 --> 00:07:31,759
you you use their latest release right

193
00:07:31,759 --> 00:07:33,840
and you keep buying any

194
00:07:33,840 --> 00:07:38,080
cve advisories okay uh

195
00:07:38,400 --> 00:07:42,319
all right um so

196
00:07:42,319 --> 00:07:45,440
code analysis uh as i mentioned earlier

197
00:07:45,440 --> 00:07:48,879
uh that that is critical uh

198
00:07:48,879 --> 00:07:53,120
for the uh you know overall security of

199
00:07:53,120 --> 00:07:55,840
uh your code right uh just making sure

200
00:07:55,840 --> 00:07:58,319
that uh

201
00:07:58,319 --> 00:08:00,479
you you know things up front while your

202
00:08:00,479 --> 00:08:02,639
development or you know after your codes

203
00:08:02,639 --> 00:08:03,199
in place

204
00:08:03,199 --> 00:08:05,680
right make sure you you do the

205
00:08:05,680 --> 00:08:06,319
assessment

206
00:08:06,319 --> 00:08:08,720
right um and there are two main ways um

207
00:08:08,720 --> 00:08:11,120
either it's going to be an automated way

208
00:08:11,120 --> 00:08:14,160
using the tools or you can do the manual

209
00:08:14,160 --> 00:08:16,720
code review

210
00:08:16,720 --> 00:08:18,800
so when you talk about automated tools

211
00:08:18,800 --> 00:08:20,479
you know you have uh

212
00:08:20,479 --> 00:08:22,479
you know either going to use the static

213
00:08:22,479 --> 00:08:24,400
tools right that can

214
00:08:24,400 --> 00:08:27,599
prevent uh you know uh

215
00:08:27,599 --> 00:08:30,800
you know mistakes that can you know if

216
00:08:30,800 --> 00:08:31,759
not directly

217
00:08:31,759 --> 00:08:34,080
uh maybe indirectly impact your security

218
00:08:34,080 --> 00:08:35,039
uh off code

219
00:08:35,039 --> 00:08:36,958
right so for example like variable

220
00:08:36,958 --> 00:08:39,200
shadowing you know the unreachable code

221
00:08:39,200 --> 00:08:41,120
right so

222
00:08:41,120 --> 00:08:43,120
um i'm sure you know most programming

223
00:08:43,120 --> 00:08:44,240
languages they have

224
00:08:44,240 --> 00:08:47,760
uh tools uh specific the language right

225
00:08:47,760 --> 00:08:48,720
for go

226
00:08:48,720 --> 00:08:51,760
you have actually a whole list of

227
00:08:51,760 --> 00:08:53,600
tools available i have provided link

228
00:08:53,600 --> 00:08:55,920
here how you can take a look uh

229
00:08:55,920 --> 00:08:58,000
to see the whole list but like you know

230
00:08:58,000 --> 00:08:59,839
those like go wait static check

231
00:08:59,839 --> 00:09:03,040
you should be using

232
00:09:03,200 --> 00:09:06,320
and then uh dynamic tools right so like

233
00:09:06,320 --> 00:09:09,760
fuzzer right uh that can help you

234
00:09:09,760 --> 00:09:12,959
find uh bugs by you know they

235
00:09:12,959 --> 00:09:16,480
by automatically injecting uh randomly

236
00:09:16,480 --> 00:09:19,839
uh injecting uh data and and you know

237
00:09:19,839 --> 00:09:22,959
uh find uh

238
00:09:22,959 --> 00:09:25,920
you know different kinds of uh bugs

239
00:09:25,920 --> 00:09:26,880
based on their

240
00:09:26,880 --> 00:09:30,240
the injection data injection

241
00:09:30,240 --> 00:09:32,240
uh the second thing is manual code

242
00:09:32,240 --> 00:09:33,279
review uh

243
00:09:33,279 --> 00:09:36,399
you know tools are great they can take a

244
00:09:36,399 --> 00:09:37,519
look at the code

245
00:09:37,519 --> 00:09:40,399
automatically you know and and point out

246
00:09:40,399 --> 00:09:42,560
to the possible issues but definitely a

247
00:09:42,560 --> 00:09:43,519
human needs to

248
00:09:43,519 --> 00:09:46,720
verify those issues right and make sure

249
00:09:46,720 --> 00:09:48,640
they are the real issues

250
00:09:48,640 --> 00:09:52,560
and you know also uh

251
00:09:52,560 --> 00:09:54,800
the development team they should be you

252
00:09:54,800 --> 00:09:57,279
know doing the thorough code review

253
00:09:57,279 --> 00:09:59,440
of all the areas we talked about right

254
00:09:59,440 --> 00:10:01,200
and make sure

255
00:10:01,200 --> 00:10:04,320
that it looks good to them right um

256
00:10:04,320 --> 00:10:06,480
and keep in mind that there's no

257
00:10:06,480 --> 00:10:07,440
alternative to

258
00:10:07,440 --> 00:10:09,440
you know manual code review right that

259
00:10:09,440 --> 00:10:12,880
is critically important

260
00:10:13,120 --> 00:10:16,800
um all right so you know with that uh

261
00:10:16,800 --> 00:10:19,440
you know before we talk more about a cd

262
00:10:19,440 --> 00:10:20,240
security

263
00:10:20,240 --> 00:10:22,320
model before we talk about uh some of

264
00:10:22,320 --> 00:10:24,480
the examples of the vulnerabilities that

265
00:10:24,480 --> 00:10:26,320
we ran into

266
00:10:26,320 --> 00:10:29,440
uh as part of the audit right and

267
00:10:29,440 --> 00:10:32,000
and you know how we address them let me

268
00:10:32,000 --> 00:10:33,200
just briefly mention

269
00:10:33,200 --> 00:10:35,600
about lcd you might already know it

270
00:10:35,600 --> 00:10:36,399
right that

271
00:10:36,399 --> 00:10:39,440
hd is an open source distributed qle

272
00:10:39,440 --> 00:10:40,959
store

273
00:10:40,959 --> 00:10:44,160
uh it you know

274
00:10:44,160 --> 00:10:47,200
provides you consistency

275
00:10:47,200 --> 00:10:49,839
and high availability and it is used to

276
00:10:49,839 --> 00:10:50,480
store

277
00:10:50,480 --> 00:10:52,320
critical data of a distributed system so

278
00:10:52,320 --> 00:10:54,560
for example kubernetes store

279
00:10:54,560 --> 00:10:58,880
all its cluster data in hcd

280
00:10:58,880 --> 00:11:01,839
the diagram here uh it just shows a

281
00:11:01,839 --> 00:11:02,640
single

282
00:11:02,640 --> 00:11:05,920
node hd cluster uh as you can see has to

283
00:11:05,920 --> 00:11:09,120
use raft consistence algorithm

284
00:11:09,120 --> 00:11:11,440
uh to maintain the replicated states and

285
00:11:11,440 --> 00:11:12,560
the data

286
00:11:12,560 --> 00:11:15,680
are first persistent white uh storing

287
00:11:15,680 --> 00:11:16,800
disk

288
00:11:16,800 --> 00:11:18,800
uh typically in productions uh you would

289
00:11:18,800 --> 00:11:20,880
use uh three to

290
00:11:20,880 --> 00:11:24,399
five node cluster uh

291
00:11:24,399 --> 00:11:27,760
the lcd is a it's a you know

292
00:11:27,760 --> 00:11:30,240
it's a cncf project and you can learn

293
00:11:30,240 --> 00:11:33,040
more about it on etsy.io

294
00:11:33,040 --> 00:11:35,200
and the hd community they love new

295
00:11:35,200 --> 00:11:37,360
contributors you know that helps

296
00:11:37,360 --> 00:11:40,320
grow the growth of the project the you

297
00:11:40,320 --> 00:11:42,320
know makes the project better so

298
00:11:42,320 --> 00:11:44,800
you know um if you're interested please

299
00:11:44,800 --> 00:11:46,480
contribute

300
00:11:46,480 --> 00:11:48,160
uh you can find more details on

301
00:11:48,160 --> 00:11:49,680
contribution guidelines

302
00:11:49,680 --> 00:11:52,240
and you know uh other things on the

303
00:11:52,240 --> 00:11:54,160
development environments and whatnot

304
00:11:54,160 --> 00:11:57,920
on the gita repo

305
00:11:58,000 --> 00:12:00,800
um all right with that uh i will hand it

306
00:12:00,800 --> 00:12:01,839
over to

307
00:12:01,839 --> 00:12:04,320
mitaki to talk about its city security

308
00:12:04,320 --> 00:12:04,959
model

309
00:12:04,959 --> 00:12:07,600
and you know some of the examples so

310
00:12:07,600 --> 00:12:10,800
medaki to you okay

311
00:12:10,800 --> 00:12:12,720
let me introduce the security model

312
00:12:12,720 --> 00:12:14,320
opacity

313
00:12:14,320 --> 00:12:16,560
it's the clients and it's these servers

314
00:12:16,560 --> 00:12:17,440
communicate with

315
00:12:17,440 --> 00:12:21,040
jrpc over tcp it's also possible to use

316
00:12:21,040 --> 00:12:22,399
grpc proxy for

317
00:12:22,399 --> 00:12:26,000
multiplexing at the clients etsy servers

318
00:12:26,000 --> 00:12:28,240
use a specialized http protocol

319
00:12:28,240 --> 00:12:32,800
named after http and the tcp connections

320
00:12:32,800 --> 00:12:35,200
used for jrpc and http protocols are

321
00:12:35,200 --> 00:12:37,760
encrypted and authenticated with trls if

322
00:12:37,760 --> 00:12:39,440
our cluster follows a recommended

323
00:12:39,440 --> 00:12:41,519
configuration

324
00:12:41,519 --> 00:12:44,240
we also have a component named gateway

325
00:12:44,240 --> 00:12:46,560
this is a component which only lays tcp

326
00:12:46,560 --> 00:12:49,200
connections between clients and servers

327
00:12:49,200 --> 00:12:51,120
this is a component which only helps

328
00:12:51,120 --> 00:12:54,240
discover your bentley cluster

329
00:12:54,240 --> 00:12:57,040
visible next

330
00:12:59,040 --> 00:13:01,200
and if a user needs more fine-grained

331
00:13:01,200 --> 00:13:02,079
access control

332
00:13:02,079 --> 00:13:04,320
keys the 3d provides artwork-based

333
00:13:04,320 --> 00:13:06,320
authentication and authorization as an

334
00:13:06,320 --> 00:13:08,000
optional feature

335
00:13:08,000 --> 00:13:10,639
with this feature we can grant

336
00:13:10,639 --> 00:13:11,519
permission to

337
00:13:11,519 --> 00:13:14,399
read and or write about specific gear

338
00:13:14,399 --> 00:13:16,240
range to users

339
00:13:16,240 --> 00:13:18,399
from the cluster use this feature

340
00:13:18,399 --> 00:13:19,360
servers have

341
00:13:19,360 --> 00:13:21,200
two options for authenticating and

342
00:13:21,200 --> 00:13:22,880
authorizing users

343
00:13:22,880 --> 00:13:25,839
one is using authenticate jrpc method in

344
00:13:25,839 --> 00:13:26,639
this case

345
00:13:26,639 --> 00:13:28,480
clients invoke the method during

346
00:13:28,480 --> 00:13:30,320
initializing the client plot

347
00:13:30,320 --> 00:13:33,600
object information of authenticated user

348
00:13:33,600 --> 00:13:35,440
is stored in a job

349
00:13:35,440 --> 00:13:38,160
token returned by the server another

350
00:13:38,160 --> 00:13:38,560
option

351
00:13:38,560 --> 00:13:41,120
is using commonly period of trs

352
00:13:41,120 --> 00:13:42,720
certificate

353
00:13:42,720 --> 00:13:44,800
in this case no password-based

354
00:13:44,800 --> 00:13:48,160
authentication is required

355
00:13:48,160 --> 00:13:50,480
this mechanism also supports limiting uh

356
00:13:50,480 --> 00:13:52,639
special administrative observations like

357
00:13:52,639 --> 00:13:54,320
membership change

358
00:13:54,320 --> 00:13:56,959
the special user root is the only user

359
00:13:56,959 --> 00:13:58,720
which is allowed to execute such

360
00:13:58,720 --> 00:14:01,360
applications

361
00:14:06,880 --> 00:14:09,040
let me introduce the security audit

362
00:14:09,040 --> 00:14:10,399
project

363
00:14:10,399 --> 00:14:12,959
it's liquidity performed security audit

364
00:14:12,959 --> 00:14:14,160
last year

365
00:14:14,160 --> 00:14:17,360
cnc supported this third-party audit

366
00:14:17,360 --> 00:14:20,720
and trailer bit helped this project

367
00:14:20,720 --> 00:14:22,639
you can download the full report of the

368
00:14:22,639 --> 00:14:24,639
audit from the url

369
00:14:24,639 --> 00:14:27,199
we will introduce some findings from the

370
00:14:27,199 --> 00:14:29,120
report

371
00:14:29,120 --> 00:14:31,920
critical things

372
00:14:33,600 --> 00:14:36,079
the first example is an issue related to

373
00:14:36,079 --> 00:14:37,040
logs

374
00:14:37,040 --> 00:14:40,639
a cd has a problem of inaudible related

375
00:14:40,639 --> 00:14:42,639
to failed authentication attempts for

376
00:14:42,639 --> 00:14:43,519
users

377
00:14:43,519 --> 00:14:45,839
which can only be used with common name

378
00:14:45,839 --> 00:14:47,920
based authentication

379
00:14:47,920 --> 00:14:50,639
as i mentioned earlier silly supports

380
00:14:50,639 --> 00:14:52,480
multiple user authentication mechanisms

381
00:14:52,480 --> 00:14:54,079
for our work

382
00:14:54,079 --> 00:14:56,399
username password-based upload and

383
00:14:56,399 --> 00:14:58,240
common name of the trs certificate

384
00:14:58,240 --> 00:14:59,680
approach

385
00:14:59,680 --> 00:15:02,000
especially for the other one it's only

386
00:15:02,000 --> 00:15:03,199
supposed to create

387
00:15:03,199 --> 00:15:05,760
users which only support commonly based

388
00:15:05,760 --> 00:15:07,360
authentication

389
00:15:07,360 --> 00:15:09,120
which doesn't support username plus

390
00:15:09,120 --> 00:15:11,360
password-based approach

391
00:15:11,360 --> 00:15:14,000
when a client applies authentication

392
00:15:14,000 --> 00:15:15,120
with password

393
00:15:15,120 --> 00:15:18,320
for such a user a cd log

394
00:15:18,320 --> 00:15:21,279
isn't useful for understanding that the

395
00:15:21,279 --> 00:15:22,079
client gave

396
00:15:22,079 --> 00:15:25,360
a wrong password or user gave a password

397
00:15:25,360 --> 00:15:25,760
to

398
00:15:25,760 --> 00:15:29,040
no password user it is harmful for

399
00:15:29,040 --> 00:15:31,519
auditing failed attempts for from the

400
00:15:31,519 --> 00:15:32,800
box

401
00:15:32,800 --> 00:15:34,959
we fixed the issue by adding the new

402
00:15:34,959 --> 00:15:37,120
record for representing such a failed

403
00:15:37,120 --> 00:15:37,759
attempt

404
00:15:37,759 --> 00:15:41,759
and make the log clearer

405
00:15:41,759 --> 00:15:46,880
next i'm not sure

406
00:15:47,600 --> 00:15:50,720
the next example is related to gateway

407
00:15:50,720 --> 00:15:53,199
gateway there is tcp connection between

408
00:15:53,199 --> 00:15:55,600
sv client and servo

409
00:15:55,600 --> 00:15:57,600
the component doesn't validate

410
00:15:57,600 --> 00:15:59,279
acceptance of trs connection

411
00:15:59,279 --> 00:16:02,639
to its endpoint it only checks

412
00:16:02,639 --> 00:16:06,320
tcp itability during initialization

413
00:16:06,320 --> 00:16:08,639
so if the pain if the endpoints are

414
00:16:08,639 --> 00:16:10,800
misconfigured and appoint a malicious

415
00:16:10,800 --> 00:16:11,360
server

416
00:16:11,360 --> 00:16:14,880
accidentally they can receive

417
00:16:14,880 --> 00:16:17,600
data sent by the clients if the clients

418
00:16:17,600 --> 00:16:19,120
don't use tls

419
00:16:19,120 --> 00:16:22,959
probably properly gateway is a component

420
00:16:22,959 --> 00:16:24,959
which only helps discovery of the

421
00:16:24,959 --> 00:16:25,519
cluster

422
00:16:25,519 --> 00:16:28,720
and doesn't tell me a tals connection

423
00:16:28,720 --> 00:16:30,800
using theories is the responsibility of

424
00:16:30,800 --> 00:16:32,399
the development

425
00:16:32,399 --> 00:16:35,440
we fixed the ambiguity of this program

426
00:16:35,440 --> 00:16:38,399
in the documentation

427
00:16:40,959 --> 00:16:44,160
sure the next

428
00:16:44,160 --> 00:16:47,199
example is related to metric total

429
00:16:47,199 --> 00:16:49,040
number of database key is compounded

430
00:16:49,040 --> 00:16:51,759
battery was never changed

431
00:16:51,759 --> 00:16:53,680
this is because the code of conduction

432
00:16:53,680 --> 00:16:55,839
will work the statement of increment

433
00:16:55,839 --> 00:16:58,880
the variable for the metric

434
00:16:58,880 --> 00:17:01,519
the issue can result with understanding

435
00:17:01,519 --> 00:17:04,000
about the resource usage

436
00:17:04,000 --> 00:17:06,160
at the time of auditing the issue was

437
00:17:06,160 --> 00:17:08,079
already fixed in the master blanche but

438
00:17:08,079 --> 00:17:08,959
the fix wasn't

439
00:17:08,959 --> 00:17:12,880
but ported to the stable bbc's

440
00:17:13,760 --> 00:17:17,679
okay next and i'd like to handle it

441
00:17:17,679 --> 00:17:20,720
sure uh you want me to talk on this

442
00:17:20,720 --> 00:17:23,039
mitagi

443
00:17:23,039 --> 00:17:26,480
yeah okay thank you hey uh thank you so

444
00:17:26,480 --> 00:17:28,000
much again uh

445
00:17:28,000 --> 00:17:31,039
so all right a couple more examples

446
00:17:31,039 --> 00:17:33,840
right uh mitaki did explained a few of

447
00:17:33,840 --> 00:17:35,440
them i'll talk about couple more

448
00:17:35,440 --> 00:17:37,120
examples here

449
00:17:37,120 --> 00:17:40,480
uh so very uh you know a small snippet

450
00:17:40,480 --> 00:17:40,960
here

451
00:17:40,960 --> 00:17:43,919
um which is basically doing nothing but

452
00:17:43,919 --> 00:17:45,200
creating a new directory

453
00:17:45,200 --> 00:17:49,520
by calling make their all do you see any

454
00:17:49,520 --> 00:17:53,760
security issue in this snippet

455
00:17:53,760 --> 00:17:57,280
well i wish we were talking in person

456
00:17:57,280 --> 00:18:00,320
and i could see the raised hands

457
00:18:00,320 --> 00:18:03,679
uh you know besides mitaki smiling

458
00:18:03,679 --> 00:18:08,000
uh but uh we're recording so i will go

459
00:18:08,000 --> 00:18:08,480
ahead

460
00:18:08,480 --> 00:18:12,720
and show what's wrong here

461
00:18:12,720 --> 00:18:15,840
right well so

462
00:18:16,080 --> 00:18:19,520
the problem here is if the provided

463
00:18:19,520 --> 00:18:20,640
directory path

464
00:18:20,640 --> 00:18:23,919
is already existing right it's

465
00:18:23,919 --> 00:18:26,000
it's an existing directory then the

466
00:18:26,000 --> 00:18:27,039
maker all

467
00:18:27,039 --> 00:18:30,080
does nothing and it returns new so then

468
00:18:30,080 --> 00:18:32,080
the flow continues right

469
00:18:32,080 --> 00:18:33,760
with the nail you are controlling the

470
00:18:33,760 --> 00:18:35,919
flow that's what the project was doing

471
00:18:35,919 --> 00:18:39,360
and uh

472
00:18:39,360 --> 00:18:41,200
that's not something we were expecting

473
00:18:41,200 --> 00:18:42,480
right uh

474
00:18:42,480 --> 00:18:44,799
because what happens if there is an

475
00:18:44,799 --> 00:18:46,160
existing directory with

476
00:18:46,160 --> 00:18:51,679
uh you know 777 uh permission mode right

477
00:18:51,679 --> 00:18:53,280
somebody could have created that

478
00:18:53,280 --> 00:18:54,720
directory upfront

479
00:18:54,720 --> 00:18:58,080
with extra permissions there and

480
00:18:58,080 --> 00:19:00,720
you know with some malicious desire and

481
00:19:00,720 --> 00:19:02,000
you know could hurt

482
00:19:02,000 --> 00:19:06,960
uh the the project uh

483
00:19:06,960 --> 00:19:10,240
you know running ncd eventually right

484
00:19:10,240 --> 00:19:14,080
so the fix was you know to make sure

485
00:19:14,080 --> 00:19:17,760
that if the directory exists then uh

486
00:19:17,760 --> 00:19:19,919
it has the desired permission if not

487
00:19:19,919 --> 00:19:22,320
then you know we will

488
00:19:22,320 --> 00:19:26,160
consider that as an error case right um

489
00:19:26,160 --> 00:19:29,919
so that's how it was fixed

490
00:19:29,919 --> 00:19:32,640
right uh it was pretty quick fix small

491
00:19:32,640 --> 00:19:33,679
fix but

492
00:19:33,679 --> 00:19:36,720
could have uh you know

493
00:19:36,720 --> 00:19:40,080
security related uh problem

494
00:19:40,080 --> 00:19:43,919
if not handled um so another snippet

495
00:19:43,919 --> 00:19:44,480
here

496
00:19:44,480 --> 00:19:46,880
uh another small snippet you know we we

497
00:19:46,880 --> 00:19:48,720
try to put uh some of the smaller

498
00:19:48,720 --> 00:19:52,080
uh issues here uh

499
00:19:52,080 --> 00:19:54,799
so data validation rights uh remember i

500
00:19:54,799 --> 00:19:56,480
mentioned earlier the input data

501
00:19:56,480 --> 00:19:59,280
validation uh is very important and you

502
00:19:59,280 --> 00:20:00,240
want to

503
00:20:00,240 --> 00:20:02,240
basically validate you know everything

504
00:20:02,240 --> 00:20:03,760
right

505
00:20:03,760 --> 00:20:06,400
if you don't then that could hurt the

506
00:20:06,400 --> 00:20:07,760
running

507
00:20:07,760 --> 00:20:11,039
project right so

508
00:20:11,280 --> 00:20:14,240
the parts compaction retention function

509
00:20:14,240 --> 00:20:15,280
uh

510
00:20:15,280 --> 00:20:17,919
do you see what's wrong here any

511
00:20:17,919 --> 00:20:19,200
security issues

512
00:20:19,200 --> 00:20:21,840
well again i wish we had to raise ends

513
00:20:21,840 --> 00:20:22,240
but

514
00:20:22,240 --> 00:20:26,159
let me go ahead here so the problem here

515
00:20:26,159 --> 00:20:28,480
as you can see the string conversion

516
00:20:28,480 --> 00:20:29,679
functions right

517
00:20:29,679 --> 00:20:34,240
uh the written value can be negative

518
00:20:34,240 --> 00:20:37,840
and uh that's not an error case

519
00:20:37,840 --> 00:20:40,480
okay you can write a negative value and

520
00:20:40,480 --> 00:20:41,919
that's not my error case

521
00:20:41,919 --> 00:20:45,840
and as you could see the

522
00:20:45,840 --> 00:20:48,000
project you know we weren't handling the

523
00:20:48,000 --> 00:20:49,039
issue right

524
00:20:49,039 --> 00:20:50,640
and we were just checking the error and

525
00:20:50,640 --> 00:20:52,799
if that's me we will just go ahead and

526
00:20:52,799 --> 00:20:53,520
you know

527
00:20:53,520 --> 00:20:56,799
continue the flow uh the secret issue

528
00:20:56,799 --> 00:20:58,080
here was

529
00:20:58,080 --> 00:21:00,799
if someone uh you know who has that

530
00:21:00,799 --> 00:21:01,360
access

531
00:21:01,360 --> 00:21:04,080
right that that role who could uh

532
00:21:04,080 --> 00:21:05,280
misconfigure

533
00:21:05,280 --> 00:21:07,120
the art of competition compaction

534
00:21:07,120 --> 00:21:08,720
retention

535
00:21:08,720 --> 00:21:12,400
uh by setting it to negative or you know

536
00:21:12,400 --> 00:21:14,240
maybe accidentally right but if it's set

537
00:21:14,240 --> 00:21:16,080
to negative value then

538
00:21:16,080 --> 00:21:19,440
you know that could impact uh

539
00:21:19,440 --> 00:21:22,640
the absolute uh you know the process

540
00:21:22,640 --> 00:21:23,760
right

541
00:21:23,760 --> 00:21:26,080
it may not work properly as expected

542
00:21:26,080 --> 00:21:26,960
right

543
00:21:26,960 --> 00:21:29,440
because that would be that could be like

544
00:21:29,440 --> 00:21:30,000
a forever

545
00:21:30,000 --> 00:21:32,799
compacting um fill up the disk space and

546
00:21:32,799 --> 00:21:35,280
whatnot

547
00:21:35,360 --> 00:21:37,919
so the solution again here was simple

548
00:21:37,919 --> 00:21:39,919
you know just not to accept any negative

549
00:21:39,919 --> 00:21:40,400
value

550
00:21:40,400 --> 00:21:43,440
and you know handle it

551
00:21:43,440 --> 00:21:48,000
properly the other thing i would mention

552
00:21:48,000 --> 00:21:48,559
here

553
00:21:48,559 --> 00:21:51,600
is the documentation right we

554
00:21:51,600 --> 00:21:54,480
need to make sure

555
00:21:55,200 --> 00:21:58,480
that you have a proper

556
00:21:58,480 --> 00:22:01,919
documentation uh for the for the you

557
00:22:01,919 --> 00:22:03,919
know for the for the soft right in the

558
00:22:03,919 --> 00:22:06,080
code

559
00:22:06,080 --> 00:22:08,080
uh you may not see that as an you know

560
00:22:08,080 --> 00:22:10,320
direct impacting direct impact on your

561
00:22:10,320 --> 00:22:12,320
security uh

562
00:22:12,320 --> 00:22:15,520
for the project but but you know three

563
00:22:15,520 --> 00:22:17,120
of the report issues that

564
00:22:17,120 --> 00:22:19,280
we had in uh city secure audits they

565
00:22:19,280 --> 00:22:20,880
were related to the documentations

566
00:22:20,880 --> 00:22:24,400
and and naming of functions

567
00:22:24,400 --> 00:22:27,200
so you know we had a couple functions

568
00:22:27,200 --> 00:22:28,240
they were

569
00:22:28,240 --> 00:22:31,360
uh having a misleading name um

570
00:22:31,360 --> 00:22:33,440
again that happens accidentally and you

571
00:22:33,440 --> 00:22:35,200
know something that were not

572
00:22:35,200 --> 00:22:37,520
caught as part of uh in a good review

573
00:22:37,520 --> 00:22:38,320
while

574
00:22:38,320 --> 00:22:42,880
you know those pull requests right um

575
00:22:42,880 --> 00:22:46,159
and then we had uh a couple of uh

576
00:22:46,159 --> 00:22:48,159
you know misleading uh documentation

577
00:22:48,159 --> 00:22:50,000
right description so

578
00:22:50,000 --> 00:22:51,760
you know that that as i said you know

579
00:22:51,760 --> 00:22:53,600
that that ended uh

580
00:22:53,600 --> 00:22:57,280
up as in three reported issues by

581
00:22:57,280 --> 00:23:00,480
the auditing team uh so you know the

582
00:23:00,480 --> 00:23:02,080
lack of documentations

583
00:23:02,080 --> 00:23:05,360
or not enough coverage right or poor

584
00:23:05,360 --> 00:23:07,039
naming of functions

585
00:23:07,039 --> 00:23:09,280
they can create confusions right during

586
00:23:09,280 --> 00:23:10,240
the code

587
00:23:10,240 --> 00:23:12,960
review process and that can impact

588
00:23:12,960 --> 00:23:14,000
productivity and

589
00:23:14,000 --> 00:23:17,039
it can also mislead users so

590
00:23:17,039 --> 00:23:20,159
uh you want to keep in mind that

591
00:23:20,159 --> 00:23:22,480
you know you have a good documentations

592
00:23:22,480 --> 00:23:24,720
right

593
00:23:25,120 --> 00:23:28,400
the other thing i want to cover is uh

594
00:23:28,400 --> 00:23:30,400
you know before i hand it over to metaki

595
00:23:30,400 --> 00:23:32,320
again

596
00:23:32,320 --> 00:23:36,000
is uh this is something we learned

597
00:23:36,000 --> 00:23:39,440
as part of uh the auditing process right

598
00:23:39,440 --> 00:23:41,919
uh as as i mentioned earlier the cves

599
00:23:41,919 --> 00:23:43,039
are important

600
00:23:43,039 --> 00:23:46,240
and uh you know they can uh

601
00:23:46,240 --> 00:23:49,360
basically help you to to

602
00:23:49,360 --> 00:23:52,480
you know disclose uh the security flaws

603
00:23:52,480 --> 00:23:53,919
issues publicly

604
00:23:53,919 --> 00:23:56,880
uh and so that the users of project

605
00:23:56,880 --> 00:23:57,600
software

606
00:23:57,600 --> 00:24:00,639
uh stay relevant

607
00:24:00,799 --> 00:24:03,600
uh the process can be confusing uh but

608
00:24:03,600 --> 00:24:05,679
we learned during this process

609
00:24:05,679 --> 00:24:08,720
you know the security audit process that

610
00:24:08,720 --> 00:24:11,919
we can use the relatively new features

611
00:24:11,919 --> 00:24:14,880
which is integrated part of github

612
00:24:14,880 --> 00:24:17,440
to request and publish cvs and

613
00:24:17,440 --> 00:24:18,480
advisories right

614
00:24:18,480 --> 00:24:22,480
so we just tried that and you know we

615
00:24:22,480 --> 00:24:23,039
loved it

616
00:24:23,039 --> 00:24:26,480
that was easy to use uh and very you

617
00:24:26,480 --> 00:24:28,240
know this can be very handy for you

618
00:24:28,240 --> 00:24:29,919
if your project is hosted on github

619
00:24:29,919 --> 00:24:31,279
right and

620
00:24:31,279 --> 00:24:34,000
you want to publish advisories and you

621
00:24:34,000 --> 00:24:34,640
know

622
00:24:34,640 --> 00:24:37,840
cves right because

623
00:24:37,840 --> 00:24:39,679
now everything you're doing is is on

624
00:24:39,679 --> 00:24:41,360
github you know you're not going

625
00:24:41,360 --> 00:24:45,600
to like a military websites or you know

626
00:24:45,600 --> 00:24:49,840
anywhere else uh to work on cvs right

627
00:24:49,840 --> 00:24:50,960
the publishing uh

628
00:24:50,960 --> 00:24:54,320
other stuff so if you uh

629
00:24:54,320 --> 00:24:56,640
have an admit admin access to your

630
00:24:56,640 --> 00:24:57,520
github repo

631
00:24:57,520 --> 00:25:01,279
right then you you will actually see

632
00:25:01,279 --> 00:25:04,400
under the security tab and

633
00:25:04,400 --> 00:25:07,679
option to you know to draft security

634
00:25:07,679 --> 00:25:09,919
advisory

635
00:25:09,919 --> 00:25:13,120
excuse me and

636
00:25:13,120 --> 00:25:15,279
uh the you know the other great thing

637
00:25:15,279 --> 00:25:17,120
here is you can actually privately

638
00:25:17,120 --> 00:25:18,000
discuss

639
00:25:18,000 --> 00:25:20,960
uh and and you know the issues and fix

640
00:25:20,960 --> 00:25:23,520
issues with your code changes and it's

641
00:25:23,520 --> 00:25:25,039
all private and then you basically

642
00:25:25,039 --> 00:25:26,000
publish

643
00:25:26,000 --> 00:25:28,320
you know after having reviews uh in your

644
00:25:28,320 --> 00:25:29,840
internal teams right uh

645
00:25:29,840 --> 00:25:31,919
a team of maintainers for example right

646
00:25:31,919 --> 00:25:34,799
or interested parties

647
00:25:34,799 --> 00:25:37,919
and then you basically you know uh push

648
00:25:37,919 --> 00:25:38,400
them

649
00:25:38,400 --> 00:25:42,799
uh those changes to your repository um

650
00:25:42,799 --> 00:25:45,440
it also has a really good template uh

651
00:25:45,440 --> 00:25:46,960
you know it shows what kind of

652
00:25:46,960 --> 00:25:50,159
uh vulnerability is it right the one

653
00:25:50,159 --> 00:25:53,600
that you are interested in publishing uh

654
00:25:53,600 --> 00:25:56,799
who is impacted you know any

655
00:25:56,799 --> 00:26:01,600
any problem

656
00:26:02,480 --> 00:26:05,520
that has been patched

657
00:26:05,520 --> 00:26:08,840
what version should the user of software

658
00:26:08,840 --> 00:26:10,000
project

659
00:26:10,000 --> 00:26:13,039
uh you know they should upgrade to right

660
00:26:13,039 --> 00:26:15,440
and and if there's any work around so it

661
00:26:15,440 --> 00:26:17,200
it the template allows you to put like a

662
00:26:17,200 --> 00:26:18,559
good detail that can help

663
00:26:18,559 --> 00:26:21,520
uh users understand the cv so we want to

664
00:26:21,520 --> 00:26:22,320
mention because

665
00:26:22,320 --> 00:26:25,039
as i said this is something we learned

666
00:26:25,039 --> 00:26:26,240
as as part of the

667
00:26:26,240 --> 00:26:30,080
security audit process okay

668
00:26:30,240 --> 00:26:33,279
um with that uh mitaki would you

669
00:26:33,279 --> 00:26:37,120
would you like to conclude the talk

670
00:26:37,120 --> 00:26:39,919
uh let me conclude this talk uh yeah

671
00:26:39,919 --> 00:26:42,080
writing security is challenging but

672
00:26:42,080 --> 00:26:43,279
possible

673
00:26:43,279 --> 00:26:45,760
uh for the purpose of the code review

674
00:26:45,760 --> 00:26:47,120
and various tests

675
00:26:47,120 --> 00:26:49,919
and uh numbers two starting static

676
00:26:49,919 --> 00:26:53,360
analyzer and further very helpful

677
00:26:53,360 --> 00:26:55,840
and also although it costs time and

678
00:26:55,840 --> 00:26:56,480
budget

679
00:26:56,480 --> 00:26:58,480
somebody audit is helpful for checking

680
00:26:58,480 --> 00:27:00,960
the status of the project

681
00:27:00,960 --> 00:27:02,960
and also making documentation and

682
00:27:02,960 --> 00:27:05,760
walking is difficult uh it's not trivial

683
00:27:05,760 --> 00:27:06,000
at

684
00:27:06,000 --> 00:27:09,039
all and creating and publishing uh cds

685
00:27:09,039 --> 00:27:10,240
with github is easy

686
00:27:10,240 --> 00:27:12,159
uh let's utilize the future for managing

687
00:27:12,159 --> 00:27:14,080
security issues

688
00:27:14,080 --> 00:27:16,400
and also less popular features can use

689
00:27:16,400 --> 00:27:17,520
also problems

690
00:27:17,520 --> 00:27:19,840
in this case of security entity security

691
00:27:19,840 --> 00:27:20,559
audit

692
00:27:20,559 --> 00:27:22,960
multiple issues were found in gateway

693
00:27:22,960 --> 00:27:23,760
features

694
00:27:23,760 --> 00:27:26,399
which isn't used heavily we need to be

695
00:27:26,399 --> 00:27:27,919
careful about such features and think

696
00:27:27,919 --> 00:27:28,399
before

697
00:27:28,399 --> 00:27:29,919
on the new features for making the

698
00:27:29,919 --> 00:27:35,840
entire project secure

699
00:27:38,240 --> 00:27:42,960
let me this is the last slide we have so

700
00:27:42,960 --> 00:27:46,159
uh uh we want to thank you uh

701
00:27:46,159 --> 00:27:48,640
you know uh many folks here all the

702
00:27:48,640 --> 00:27:50,080
contributors of that city all the

703
00:27:50,080 --> 00:27:50,960
mentors

704
00:27:50,960 --> 00:27:53,679
right uh especially wanna thanks uh

705
00:27:53,679 --> 00:27:54,640
siang li

706
00:27:54,640 --> 00:27:58,399
yoli jingy and brandon philippe they are

707
00:27:58,399 --> 00:28:00,880
maintainers and they were you know

708
00:28:00,880 --> 00:28:02,080
integrated part of

709
00:28:02,080 --> 00:28:05,200
uh you know working with uh

710
00:28:05,200 --> 00:28:07,200
the security issues that that we

711
00:28:07,200 --> 00:28:09,200
resolved that came out of the

712
00:28:09,200 --> 00:28:13,200
lcd security audit uh we

713
00:28:13,200 --> 00:28:17,600
wanna thank cncf for

714
00:28:17,600 --> 00:28:20,880
sponsoring the uh the audits are going

715
00:28:20,880 --> 00:28:21,520
to

716
00:28:21,520 --> 00:28:25,120
thanks trail of bits for conducting the

717
00:28:25,120 --> 00:28:26,320
audits

718
00:28:26,320 --> 00:28:29,600
uh they have great materials you know

719
00:28:29,600 --> 00:28:33,120
blog post right that can be like a

720
00:28:33,120 --> 00:28:34,000
really big

721
00:28:34,000 --> 00:28:36,080
good learning resource for security uh

722
00:28:36,080 --> 00:28:38,320
understanding the security

723
00:28:38,320 --> 00:28:41,919
of the project uh we want to thank owasp

724
00:28:41,919 --> 00:28:44,159
we have a lot of good practices and

725
00:28:44,159 --> 00:28:45,440
other materials so

726
00:28:45,440 --> 00:28:48,399
we did refer them those materials we

727
00:28:48,399 --> 00:28:50,559
definitely thank our employer

728
00:28:50,559 --> 00:28:53,840
um ibm and indeed uh and

729
00:28:53,840 --> 00:28:56,640
thank you all of you who are watching

730
00:28:56,640 --> 00:28:58,559
this video

731
00:28:58,559 --> 00:29:00,559
all right well thank you so much with

732
00:29:00,559 --> 00:29:01,679
that

733
00:29:01,679 --> 00:29:04,720
i think uh we will end the thought

734
00:29:04,720 --> 00:29:10,240
mitaki that sounds good

