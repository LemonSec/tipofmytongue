1
00:00:00,080 --> 00:00:01,280
thanks for joining me from san francisco

2
00:00:01,280 --> 00:00:02,800
today i'm on a zoom i wish i was in a

3
00:00:02,800 --> 00:00:03,439
room

4
00:00:03,439 --> 00:00:05,520
uh but here we are and uh i appreciate

5
00:00:05,520 --> 00:00:06,799
any feedback and some of these ideas i'm

6
00:00:06,799 --> 00:00:08,320
just starting to scratch them down

7
00:00:08,320 --> 00:00:09,679
and uh hopefully we'll both have a good

8
00:00:09,679 --> 00:00:11,120
time kicking this around so hit me on

9
00:00:11,120 --> 00:00:12,880
twitter i'm at waters james if you watch

10
00:00:12,880 --> 00:00:14,320
this let me know you saw it

11
00:00:14,320 --> 00:00:15,599
let me know what you think thanks so

12
00:00:15,599 --> 00:00:17,520
much we'll keep it fun like that

13
00:00:17,520 --> 00:00:20,640
uh next slide here

14
00:00:20,640 --> 00:00:23,600
so everywhere i go over zoom uh today

15
00:00:23,600 --> 00:00:25,359
you know i'm running into more and more

16
00:00:25,359 --> 00:00:26,720
teams that consider themselves

17
00:00:26,720 --> 00:00:28,480
essentially the platform teams

18
00:00:28,480 --> 00:00:29,760
of these organizations and they're not

19
00:00:29,760 --> 00:00:31,519
pure infrastructure teams

20
00:00:31,519 --> 00:00:33,680
um and they're not uh you know if you

21
00:00:33,680 --> 00:00:35,520
were pure application teams

22
00:00:35,520 --> 00:00:38,000
their their you know reason for being is

23
00:00:38,000 --> 00:00:39,280
that they're connecting

24
00:00:39,280 --> 00:00:41,520
developers to infrastructure in a secure

25
00:00:41,520 --> 00:00:42,640
pipeline

26
00:00:42,640 --> 00:00:45,039
um typically using kubernetes as the

27
00:00:45,039 --> 00:00:47,760
final infrastructure api

28
00:00:47,760 --> 00:00:50,079
and i'm seeing you know a convergence in

29
00:00:50,079 --> 00:00:51,680
enterprises at least where security has

30
00:00:51,680 --> 00:00:53,600
always been a paramount value

31
00:00:53,600 --> 00:00:54,960
essentially you know the definition of

32
00:00:54,960 --> 00:00:56,320
an enterprise is you become an

33
00:00:56,320 --> 00:00:57,360
institution

34
00:00:57,360 --> 00:00:58,719
and the first job of an institution is

35
00:00:58,719 --> 00:01:00,480
survivability sustainability in some

36
00:01:00,480 --> 00:01:01,359
sense

37
00:01:01,359 --> 00:01:03,840
uh and so this focus on devsecops has

38
00:01:03,840 --> 00:01:05,519
been really strong in these platform

39
00:01:05,519 --> 00:01:06,080
teams

40
00:01:06,080 --> 00:01:07,600
and i'd say about 60 of the

41
00:01:07,600 --> 00:01:09,119
organizations i mean there's now someone

42
00:01:09,119 --> 00:01:11,840
carrying a director of devsecops title

43
00:01:11,840 --> 00:01:12,880
so in some ways that's

44
00:01:12,880 --> 00:01:15,840
a new and exciting thing um and i think

45
00:01:15,840 --> 00:01:16,960
it reflects that

46
00:01:16,960 --> 00:01:19,680
organizational patterns have changed um

47
00:01:19,680 --> 00:01:21,520
our security culture and methods

48
00:01:21,520 --> 00:01:23,600
are evolving to meet modern applications

49
00:01:23,600 --> 00:01:25,360
we want the continuous delivery of

50
00:01:25,360 --> 00:01:26,240
features

51
00:01:26,240 --> 00:01:28,320
we want to be able to respond to a user

52
00:01:28,320 --> 00:01:31,439
need in days or under a week

53
00:01:31,439 --> 00:01:34,000
versus on a more waterfall six-month

54
00:01:34,000 --> 00:01:34,640
three-month

55
00:01:34,640 --> 00:01:37,040
two-month schedule and we'd like to see

56
00:01:37,040 --> 00:01:38,079
those changes

57
00:01:38,079 --> 00:01:39,520
you know make their way to production

58
00:01:39,520 --> 00:01:41,200
for feedback to the developers as

59
00:01:41,200 --> 00:01:42,720
rapidly as possible

60
00:01:42,720 --> 00:01:44,000
i'm going to talk a little bit about how

61
00:01:44,000 --> 00:01:46,159
i think security is part of devsecops is

62
00:01:46,159 --> 00:01:48,079
really just coming along for that ride

63
00:01:48,079 --> 00:01:49,600
and how in the same way that as an

64
00:01:49,600 --> 00:01:51,680
organization wants to get a feature to

65
00:01:51,680 --> 00:01:53,520
production as fast as possible

66
00:01:53,520 --> 00:01:54,960
if there's a vulnerability discovered

67
00:01:54,960 --> 00:01:56,320
somewhere in the world as opposed to

68
00:01:56,320 --> 00:01:58,159
there being meetings about it

69
00:01:58,159 --> 00:01:59,759
i think our modern cloud native software

70
00:01:59,759 --> 00:02:01,280
systems need to be responsive

71
00:02:01,280 --> 00:02:03,040
and almost at the moment of that event

72
00:02:03,040 --> 00:02:04,719
of that vulnerability occurring

73
00:02:04,719 --> 00:02:06,320
starts to kick off a series of processes

74
00:02:06,320 --> 00:02:07,759
and controller reconciler patterns that

75
00:02:07,759 --> 00:02:09,119
bring it to production as rapidly as

76
00:02:09,119 --> 00:02:09,919
possible

77
00:02:09,919 --> 00:02:11,840
so this is a time of great adaptation to

78
00:02:11,840 --> 00:02:13,680
this era of microservices continuous

79
00:02:13,680 --> 00:02:16,000
delivery containerization

80
00:02:16,000 --> 00:02:19,599
um and there's a ever growing focus on

81
00:02:19,599 --> 00:02:20,480
concepts

82
00:02:20,480 --> 00:02:22,480
of things like xero trust now that we've

83
00:02:22,480 --> 00:02:24,480
got these distributed microservices

84
00:02:24,480 --> 00:02:26,000
and you're suddenly adding all of this

85
00:02:26,000 --> 00:02:27,760
network networking into the core

86
00:02:27,760 --> 00:02:29,760
business logic of an application

87
00:02:29,760 --> 00:02:31,120
well how do we build our application

88
00:02:31,120 --> 00:02:33,760
level networks uh before you know a java

89
00:02:33,760 --> 00:02:34,560
program

90
00:02:34,560 --> 00:02:37,920
1200 functions running and one jvm um

91
00:02:37,920 --> 00:02:39,280
you understood the privilege model of

92
00:02:39,280 --> 00:02:40,480
that application because it was all

93
00:02:40,480 --> 00:02:41,680
inherently one application but now

94
00:02:41,680 --> 00:02:43,200
you've introduced networking

95
00:02:43,200 --> 00:02:45,200
and so the idea of the zero trust

96
00:02:45,200 --> 00:02:47,200
heavily identity centric network has

97
00:02:47,200 --> 00:02:48,959
come into play and in some ways that

98
00:02:48,959 --> 00:02:51,040
feels like a new fresh take

99
00:02:51,040 --> 00:02:53,519
on how we should do networking but in

100
00:02:53,519 --> 00:02:54,319
some sense

101
00:02:54,319 --> 00:02:56,080
i think that's also not true and we've

102
00:02:56,080 --> 00:02:57,840
been on this trend of least privileged

103
00:02:57,840 --> 00:02:59,519
for a long time

104
00:02:59,519 --> 00:03:02,560
in fact if you go back to you know acm

105
00:03:02,560 --> 00:03:04,480
journals in the early 70s

106
00:03:04,480 --> 00:03:06,480
there were people articulating this idea

107
00:03:06,480 --> 00:03:07,920
of least privilege then

108
00:03:07,920 --> 00:03:09,360
the idea that every program and every

109
00:03:09,360 --> 00:03:11,200
privileged user of the system

110
00:03:11,200 --> 00:03:12,319
should operate the least amount of

111
00:03:12,319 --> 00:03:14,640
privilege necessary to complete the job

112
00:03:14,640 --> 00:03:16,319
and i think while in some sense the

113
00:03:16,319 --> 00:03:18,159
internet was really not about least

114
00:03:18,159 --> 00:03:19,360
privilege because the internet was built

115
00:03:19,360 --> 00:03:20,959
for collaboration and sharing like

116
00:03:20,959 --> 00:03:23,760
http smtp these were protocols really

117
00:03:23,760 --> 00:03:24,640
meant to say

118
00:03:24,640 --> 00:03:26,319
here's some content i want to share with

119
00:03:26,319 --> 00:03:28,480
you um and that's a great quote from the

120
00:03:28,480 --> 00:03:30,239
woman who founded yubikey where she said

121
00:03:30,239 --> 00:03:30,640
hey

122
00:03:30,640 --> 00:03:33,599
we're now trying to retrofit uh you know

123
00:03:33,599 --> 00:03:35,040
kind of identity and access management

124
00:03:35,040 --> 00:03:36,560
and controls into an organ

125
00:03:36,560 --> 00:03:38,640
into a series of protocols built for

126
00:03:38,640 --> 00:03:40,799
sharing and collaboration first

127
00:03:40,799 --> 00:03:43,200
but if you think of the cloud really as

128
00:03:43,200 --> 00:03:44,720
a modern

129
00:03:44,720 --> 00:03:47,280
at scale continuously delivered model of

130
00:03:47,280 --> 00:03:48,959
what the mainframe really was providing

131
00:03:48,959 --> 00:03:49,840
in the 70s

132
00:03:49,840 --> 00:03:51,760
this articulated articulation of least

133
00:03:51,760 --> 00:03:52,959
privilege starts to make sense

134
00:03:52,959 --> 00:03:54,159
and you can start to look at some of the

135
00:03:54,159 --> 00:03:56,159
zero trust networking devsecops a lot of

136
00:03:56,159 --> 00:03:57,840
these modern security practices

137
00:03:57,840 --> 00:03:59,680
as bringing cloud computing back into

138
00:03:59,680 --> 00:04:00,879
that uh

139
00:04:00,879 --> 00:04:03,679
era of design

140
00:04:04,480 --> 00:04:06,080
and i think as i think back over the

141
00:04:06,080 --> 00:04:07,439
last 10 years that i've worked in

142
00:04:07,439 --> 00:04:08,400
computing

143
00:04:08,400 --> 00:04:11,439
i've always seen security and especially

144
00:04:11,439 --> 00:04:13,519
designs of enterprise systems that favor

145
00:04:13,519 --> 00:04:14,720
least privilege

146
00:04:14,720 --> 00:04:17,279
to be highly attractive and i like to

147
00:04:17,279 --> 00:04:18,399
think about this quote

148
00:04:18,399 --> 00:04:21,600
uh from jeff bezos where he basically

149
00:04:21,600 --> 00:04:22,880
articulates that everyone talks about

150
00:04:22,880 --> 00:04:24,720
what will change over the next 10 years

151
00:04:24,720 --> 00:04:26,320
but what you can really build on is what

152
00:04:26,320 --> 00:04:28,400
won't change and i think

153
00:04:28,400 --> 00:04:29,759
as i think over the last 10 years that

154
00:04:29,759 --> 00:04:30,800
i've been working on cloud native

155
00:04:30,800 --> 00:04:31,759
systems

156
00:04:31,759 --> 00:04:33,520
the idea of least privilege and high

157
00:04:33,520 --> 00:04:34,560
security has been something i

158
00:04:34,560 --> 00:04:36,320
consistently bet on uh

159
00:04:36,320 --> 00:04:37,759
and our organization has consistently

160
00:04:37,759 --> 00:04:39,840
bet on successfully

161
00:04:39,840 --> 00:04:42,880
we took uh you know articulate it more

162
00:04:42,880 --> 00:04:45,280
we took one bank from you know on

163
00:04:45,280 --> 00:04:47,360
average a six-month wait for patching

164
00:04:47,360 --> 00:04:49,440
um of their core systems and platforms

165
00:04:49,440 --> 00:04:51,120
to about an every three-day pace because

166
00:04:51,120 --> 00:04:52,720
we made it a first-class object of the

167
00:04:52,720 --> 00:04:54,080
system they were using of the platform

168
00:04:54,080 --> 00:04:55,440
they were using

169
00:04:55,440 --> 00:04:57,199
and they were so excited about it the

170
00:04:57,199 --> 00:04:58,880
cio is excited about it everyone was

171
00:04:58,880 --> 00:05:00,560
excited about it

172
00:05:00,560 --> 00:05:01,919
and someone asked me once they said well

173
00:05:01,919 --> 00:05:04,000
you know how did you know to design for

174
00:05:04,000 --> 00:05:05,280
security how did you know to make

175
00:05:05,280 --> 00:05:06,479
security a focus

176
00:05:06,479 --> 00:05:08,160
of that microservices platform and

177
00:05:08,160 --> 00:05:09,520
actually was pretty inarticulate at the

178
00:05:09,520 --> 00:05:11,360
time it was almost like a fish and water

179
00:05:11,360 --> 00:05:11,600
i

180
00:05:11,600 --> 00:05:13,120
had been so close to enterprises that

181
00:05:13,120 --> 00:05:14,960
always favored this model that i wasn't

182
00:05:14,960 --> 00:05:16,960
able to be crisp about why

183
00:05:16,960 --> 00:05:19,520
um but i think this idea of least

184
00:05:19,520 --> 00:05:21,280
privilege coming to cloud native

185
00:05:21,280 --> 00:05:23,440
is an important articulation of why

186
00:05:23,440 --> 00:05:24,880
enterprises really want to bet on this

187
00:05:24,880 --> 00:05:26,960
for the next 10 years as well

188
00:05:26,960 --> 00:05:28,800
and what we saw with the first

189
00:05:28,800 --> 00:05:30,880
generation of our cloud native designs

190
00:05:30,880 --> 00:05:33,039
was that we were able to articulate and

191
00:05:33,039 --> 00:05:35,520
expose the right set of interfaces

192
00:05:35,520 --> 00:05:37,360
such that we achieved what we called at

193
00:05:37,360 --> 00:05:38,960
the time the three r's and those are

194
00:05:38,960 --> 00:05:40,160
still really important i think for the

195
00:05:40,160 --> 00:05:41,440
cloud native computer community to

196
00:05:41,440 --> 00:05:42,960
design around

197
00:05:42,960 --> 00:05:44,240
i'll give you an example of the three

198
00:05:44,240 --> 00:05:46,639
r's in terms of repair

199
00:05:46,639 --> 00:05:49,120
if a cve came out we would automatically

200
00:05:49,120 --> 00:05:50,080
do a

201
00:05:50,080 --> 00:05:52,560
rolling update of that system so one

202
00:05:52,560 --> 00:05:54,160
node at a time would be replaced

203
00:05:54,160 --> 00:05:56,240
declaratively a manifest would inspect

204
00:05:56,240 --> 00:05:58,000
version one versus version two see the

205
00:05:58,000 --> 00:05:59,600
diff and apply the diff

206
00:05:59,600 --> 00:06:01,280
and we did that the entire way from the

207
00:06:01,280 --> 00:06:02,639
operating system

208
00:06:02,639 --> 00:06:04,080
up to some of the application runtime

209
00:06:04,080 --> 00:06:06,479
vulnerabilities so anytime a repair

210
00:06:06,479 --> 00:06:08,400
you know event hit the system it would

211
00:06:08,400 --> 00:06:10,080
be replaced

212
00:06:10,080 --> 00:06:12,240
we would as part of that repair also

213
00:06:12,240 --> 00:06:14,319
recreate those immutable images

214
00:06:14,319 --> 00:06:16,560
from scratch and so organizations were

215
00:06:16,560 --> 00:06:18,080
much more comfortable that the platform

216
00:06:18,080 --> 00:06:19,360
they were consuming

217
00:06:19,360 --> 00:06:20,880
was free of malware because we were

218
00:06:20,880 --> 00:06:22,960
always rebuilding from sign source

219
00:06:22,960 --> 00:06:25,199
and people you know as high up as cios

220
00:06:25,199 --> 00:06:26,720
and major banking organizations now

221
00:06:26,720 --> 00:06:28,240
swear by this repaving model where

222
00:06:28,240 --> 00:06:29,120
they're like

223
00:06:29,120 --> 00:06:30,960
every week we rebuild every node in the

224
00:06:30,960 --> 00:06:32,319
system and i think this is a really

225
00:06:32,319 --> 00:06:33,680
important part of it of

226
00:06:33,680 --> 00:06:36,639
modern application platform security

227
00:06:36,639 --> 00:06:38,160
designs

228
00:06:38,160 --> 00:06:40,319
we'd also build as much as possible of

229
00:06:40,319 --> 00:06:41,919
you know the controls right into the

230
00:06:41,919 --> 00:06:43,520
standard developer experience

231
00:06:43,520 --> 00:06:45,680
so as you went to execute a pipeline say

232
00:06:45,680 --> 00:06:47,280
10 out of 12 controls were

233
00:06:47,280 --> 00:06:49,280
embedded in the process already so while

234
00:06:49,280 --> 00:06:50,960
the developer might be responsible for

235
00:06:50,960 --> 00:06:52,240
and you know ensuring some of the

236
00:06:52,240 --> 00:06:53,840
controls were still met a lot of them

237
00:06:53,840 --> 00:06:55,520
were automated and part of the developer

238
00:06:55,520 --> 00:06:56,639
experience

239
00:06:56,639 --> 00:06:58,240
and finally you know if anyone who's

240
00:06:58,240 --> 00:06:59,840
seen some of the postmortem on the

241
00:06:59,840 --> 00:07:01,120
equifax study knows that

242
00:07:01,120 --> 00:07:03,039
you know letting uh secret space

243
00:07:03,039 --> 00:07:04,160
credentials

244
00:07:04,160 --> 00:07:06,240
uh languish in the system or be exposed

245
00:07:06,240 --> 00:07:07,599
in plain text or

246
00:07:07,599 --> 00:07:10,240
uh persist is a really dangerous thing a

247
00:07:10,240 --> 00:07:10,880
lot of the

248
00:07:10,880 --> 00:07:12,880
exploits we see come come down to the

249
00:07:12,880 --> 00:07:14,240
acquisition and exploitation and

250
00:07:14,240 --> 00:07:15,280
privilege escalation of these

251
00:07:15,280 --> 00:07:16,240
credentials

252
00:07:16,240 --> 00:07:18,160
so we really you know fashioned our

253
00:07:18,160 --> 00:07:20,000
platform after idea that constantly

254
00:07:20,000 --> 00:07:21,599
anytime a node would be touched we could

255
00:07:21,599 --> 00:07:23,120
rotate the credentials so these were the

256
00:07:23,120 --> 00:07:24,000
three r's

257
00:07:24,000 --> 00:07:25,599
and there was incredible demand almost

258
00:07:25,599 --> 00:07:27,840
that jeff bezos like limitless demand to

259
00:07:27,840 --> 00:07:29,520
go as fast as possible in those three

260
00:07:29,520 --> 00:07:30,160
r's

261
00:07:30,160 --> 00:07:31,680
just like an amazon customer would

262
00:07:31,680 --> 00:07:33,440
rather have everything they order as a

263
00:07:33,440 --> 00:07:34,800
consumer to be cheaper

264
00:07:34,800 --> 00:07:37,440
and sooner enterprises really like this

265
00:07:37,440 --> 00:07:39,039
model of least privilege

266
00:07:39,039 --> 00:07:41,120
in terms of what any node in the system

267
00:07:41,120 --> 00:07:42,319
how long it persisted

268
00:07:42,319 --> 00:07:44,000
how long it kept credentials and how

269
00:07:44,000 --> 00:07:45,440
long it went without being updated and

270
00:07:45,440 --> 00:07:46,960
how compliant the pipeline was by

271
00:07:46,960 --> 00:07:48,639
default

272
00:07:48,639 --> 00:07:50,560
and i think if we apply some of those

273
00:07:50,560 --> 00:07:52,639
gen one platform designs to our modern

274
00:07:52,639 --> 00:07:54,000
systems

275
00:07:54,000 --> 00:07:55,039
that we're building now as the next

276
00:07:55,039 --> 00:07:57,120
generation in tanzu i think of the

277
00:07:57,120 --> 00:07:59,199
checklist sort of like this

278
00:07:59,199 --> 00:08:01,360
at a baseline of course immutability and

279
00:08:01,360 --> 00:08:02,879
manifest based deployments

280
00:08:02,879 --> 00:08:05,599
so that governance um and controls are

281
00:08:05,599 --> 00:08:06,000
very

282
00:08:06,000 --> 00:08:09,039
clear and explicit so that's a baseline

283
00:08:09,039 --> 00:08:10,560
but i don't think it's enough i really

284
00:08:10,560 --> 00:08:12,319
think this trend towards a high a more

285
00:08:12,319 --> 00:08:14,800
highly ephemeral system is part of

286
00:08:14,800 --> 00:08:17,199
modern least privilege i think time has

287
00:08:17,199 --> 00:08:18,479
entered out as a dimension

288
00:08:18,479 --> 00:08:20,639
of how long something should even exist

289
00:08:20,639 --> 00:08:22,160
is almost in a sense part of the

290
00:08:22,160 --> 00:08:23,680
metaphor of privilege

291
00:08:23,680 --> 00:08:25,599
the shorter something shorter something

292
00:08:25,599 --> 00:08:27,120
is uh you know

293
00:08:27,120 --> 00:08:29,599
available um the less time anyone trying

294
00:08:29,599 --> 00:08:30,639
to exploit it could

295
00:08:30,639 --> 00:08:32,719
exercise its privilege and so the idea

296
00:08:32,719 --> 00:08:33,919
that nodes should be

297
00:08:33,919 --> 00:08:36,080
rebuilt constantly replicated from sort

298
00:08:36,080 --> 00:08:37,519
of a sign source model of

299
00:08:37,519 --> 00:08:40,399
the original intention is important uh

300
00:08:40,399 --> 00:08:42,399
the identity of that short lived node

301
00:08:42,399 --> 00:08:44,560
is also important and i think in

302
00:08:44,560 --> 00:08:46,320
tanzania we're tilting away from this

303
00:08:46,320 --> 00:08:48,160
idea of these shared secrets

304
00:08:48,160 --> 00:08:50,320
sort of like the aftermarket secrets you

305
00:08:50,320 --> 00:08:51,279
know model

306
00:08:51,279 --> 00:08:52,959
versus more of an inherent strong

307
00:08:52,959 --> 00:08:54,480
ephemeral identity baked into the

308
00:08:54,480 --> 00:08:57,519
platform with things like spiffy inspire

309
00:08:57,519 --> 00:08:58,640
i'm very excited about some of the

310
00:08:58,640 --> 00:09:00,000
demonstrations i've seen where more of

311
00:09:00,000 --> 00:09:01,680
an event-driven vulnerability management

312
00:09:01,680 --> 00:09:03,120
i'll talk a little bit about build packs

313
00:09:03,120 --> 00:09:05,839
but as a vulnerability is found the

314
00:09:05,839 --> 00:09:07,519
build pipeline is automatically updated

315
00:09:07,519 --> 00:09:08,080
in some cases

316
00:09:08,080 --> 00:09:09,600
the application is automatically updated

317
00:09:09,600 --> 00:09:11,200
to remove that vulnerability

318
00:09:11,200 --> 00:09:13,839
so ideally just like that jeff bezos

319
00:09:13,839 --> 00:09:14,480
statement

320
00:09:14,480 --> 00:09:16,160
we should be converging to zero time

321
00:09:16,160 --> 00:09:17,519
between vulnerability discovery and

322
00:09:17,519 --> 00:09:18,959
vulnerability patching in the system if

323
00:09:18,959 --> 00:09:19,680
possible

324
00:09:19,680 --> 00:09:21,279
enterprises are always going to want a

325
00:09:21,279 --> 00:09:22,880
shorter and shorter time

326
00:09:22,880 --> 00:09:25,279
between the discovery of a vulnerability

327
00:09:25,279 --> 00:09:27,600
and the replacement of it in a safe way

328
00:09:27,600 --> 00:09:29,279
and finally one of the biggest things

329
00:09:29,279 --> 00:09:31,279
we've seen is this merge of devx and

330
00:09:31,279 --> 00:09:32,160
control

331
00:09:32,160 --> 00:09:34,480
is super powerful so by paving the path

332
00:09:34,480 --> 00:09:36,480
for developers by giving them

333
00:09:36,480 --> 00:09:37,920
a set of conditions by which they can

334
00:09:37,920 --> 00:09:39,519
get code to production quickly

335
00:09:39,519 --> 00:09:41,440
that also meet compliance and security

336
00:09:41,440 --> 00:09:43,200
needs it's an incredible one plus one

337
00:09:43,200 --> 00:09:44,000
equals five so see

338
00:09:44,000 --> 00:09:45,760
these are some of i think the modern

339
00:09:45,760 --> 00:09:47,040
principles of least privilege that i'm

340
00:09:47,040 --> 00:09:48,240
going to keep riffing on and

341
00:09:48,240 --> 00:09:49,760
looking to encourage all of our teams

342
00:09:49,760 --> 00:09:51,680
building tonsil around

343
00:09:51,680 --> 00:09:53,040
let me give you some examples of where i

344
00:09:53,040 --> 00:09:54,640
think this is going to take off and i'll

345
00:09:54,640 --> 00:09:56,000
close with that

346
00:09:56,000 --> 00:09:58,399
um i'm super excited about the ephemeral

347
00:09:58,399 --> 00:10:00,000
node model of k-native that scales to

348
00:10:00,000 --> 00:10:00,560
zero

349
00:10:00,560 --> 00:10:02,160
because as you start to articulate an

350
00:10:02,160 --> 00:10:04,079
application as more of the serverless

351
00:10:04,079 --> 00:10:08,079
model where you've got an api or a route

352
00:10:08,079 --> 00:10:09,200
and then you've got a series of

353
00:10:09,200 --> 00:10:11,120
revisions and you can constantly restart

354
00:10:11,120 --> 00:10:11,839
that node

355
00:10:11,839 --> 00:10:13,519
based off of traffic well that gives us

356
00:10:13,519 --> 00:10:15,200
the opportunity to

357
00:10:15,200 --> 00:10:16,880
refresh the node to make it more

358
00:10:16,880 --> 00:10:19,200
ephemeral to make sure this identity is

359
00:10:19,200 --> 00:10:20,079
short-lived

360
00:10:20,079 --> 00:10:21,600
so i think building applications that

361
00:10:21,600 --> 00:10:23,680
fit the serverless canadian model first

362
00:10:23,680 --> 00:10:25,680
when possible is super exciting and

363
00:10:25,680 --> 00:10:27,360
we're looking to bring a modern devx the

364
00:10:27,360 --> 00:10:28,800
whole way to this k-native model and i

365
00:10:28,800 --> 00:10:29,440
think

366
00:10:29,440 --> 00:10:31,360
this application pattern this modern

367
00:10:31,360 --> 00:10:32,720
microservices pattern

368
00:10:32,720 --> 00:10:34,640
mixed with modern security practices

369
00:10:34,640 --> 00:10:36,079
together is super powerful

370
00:10:36,079 --> 00:10:37,600
because it allows that three hours model

371
00:10:37,600 --> 00:10:38,800
of security to come into the next

372
00:10:38,800 --> 00:10:40,399
generation of platform designs

373
00:10:40,399 --> 00:10:42,160
and we can start to say shorter and

374
00:10:42,160 --> 00:10:43,920
shorter time to lives for all the nodes

375
00:10:43,920 --> 00:10:45,600
identities secrets

376
00:10:45,600 --> 00:10:49,279
excess etc on the platform

377
00:10:49,440 --> 00:10:51,920
we're also going to bring a modern

378
00:10:51,920 --> 00:10:53,760
software supply chain

379
00:10:53,760 --> 00:10:56,000
to to the k-native experience so the

380
00:10:56,000 --> 00:10:57,600
tons of build service and the modern

381
00:10:57,600 --> 00:10:58,880
software supply chain we're building

382
00:10:58,880 --> 00:11:00,000
with it let me just give you a quick

383
00:11:00,000 --> 00:11:01,120
highlight of why i think that's so

384
00:11:01,120 --> 00:11:02,320
important

385
00:11:02,320 --> 00:11:04,800
by default a developer should not have

386
00:11:04,800 --> 00:11:06,240
to craft

387
00:11:06,240 --> 00:11:08,160
a python microservice or a java

388
00:11:08,160 --> 00:11:10,000
microservices docker file

389
00:11:10,000 --> 00:11:11,839
in a sense that's a real violation of

390
00:11:11,839 --> 00:11:14,079
lease privilege instead of just having

391
00:11:14,079 --> 00:11:17,279
the uh the the application

392
00:11:17,279 --> 00:11:19,680
be deriving the docker image through the

393
00:11:19,680 --> 00:11:20,959
build service the build service runs a

394
00:11:20,959 --> 00:11:21,760
process and

395
00:11:21,760 --> 00:11:23,600
build pack called detect compile it

396
00:11:23,600 --> 00:11:25,040
detects what's in the

397
00:11:25,040 --> 00:11:26,240
application what it needs and it

398
00:11:26,240 --> 00:11:28,240
compiles in a safe and secure way that's

399
00:11:28,240 --> 00:11:30,079
constantly updated for vulnerabilities

400
00:11:30,079 --> 00:11:31,519
a fresh image and runs that in the

401
00:11:31,519 --> 00:11:33,200
docker registry of your choice

402
00:11:33,200 --> 00:11:34,959
to me that's right on this idea of least

403
00:11:34,959 --> 00:11:36,320
privilege that we're converging more and

404
00:11:36,320 --> 00:11:37,600
more on throughout the devsecops

405
00:11:37,600 --> 00:11:38,880
pipeline

406
00:11:38,880 --> 00:11:40,240
by reducing the privilege of the

407
00:11:40,240 --> 00:11:42,000
developer themselves

408
00:11:42,000 --> 00:11:44,079
she no longer is crafting her own custom

409
00:11:44,079 --> 00:11:45,120
docker image

410
00:11:45,120 --> 00:11:46,240
and the vulnerabilities are

411
00:11:46,240 --> 00:11:47,839
automatically updated i think that fits

412
00:11:47,839 --> 00:11:49,680
that modern model of uh least privilege

413
00:11:49,680 --> 00:11:51,519
of devsecops so it's super exciting

414
00:11:51,519 --> 00:11:53,519
we're seeing people almost debate what

415
00:11:53,519 --> 00:11:55,360
build service is is it a security layer

416
00:11:55,360 --> 00:11:57,040
or is it a devex later is it a speed

417
00:11:57,040 --> 00:11:58,399
layer we have some organizations calling

418
00:11:58,399 --> 00:11:59,120
it all three

419
00:11:59,120 --> 00:12:00,399
and all three are right and that's that

420
00:12:00,399 --> 00:12:01,839
magic convergence of developer

421
00:12:01,839 --> 00:12:03,519
experience and controls

422
00:12:03,519 --> 00:12:04,800
that i think are made possible through

423
00:12:04,800 --> 00:12:06,320
this new server-less model of

424
00:12:06,320 --> 00:12:09,360
applications and platforms

425
00:12:09,360 --> 00:12:11,040
uh we want to bring that same os

426
00:12:11,040 --> 00:12:13,200
patching uh speed and alacrity

427
00:12:13,200 --> 00:12:15,120
uh in a declarative fashion that we had

428
00:12:15,120 --> 00:12:17,200
in generation one platform designs

429
00:12:17,200 --> 00:12:19,440
uh to tonzu and to our next generation

430
00:12:19,440 --> 00:12:20,320
of systems

431
00:12:20,320 --> 00:12:22,240
and so uh we're working with some of the

432
00:12:22,240 --> 00:12:23,600
same customers that did that continuous

433
00:12:23,600 --> 00:12:25,040
rebuild of their operating system

434
00:12:25,040 --> 00:12:27,279
to bring os management and os update to

435
00:12:27,279 --> 00:12:28,720
cluster api so now we've got the

436
00:12:28,720 --> 00:12:29,920
kubernetes native

437
00:12:29,920 --> 00:12:31,600
cluster api way of articulating

438
00:12:31,600 --> 00:12:32,880
configurations you've got that

439
00:12:32,880 --> 00:12:34,000
declarative config

440
00:12:34,000 --> 00:12:35,920
the os is just baked into it so as the i

441
00:12:35,920 --> 00:12:38,160
as rolls the node you're rolling the os

442
00:12:38,160 --> 00:12:39,519
and building the event and alerting

443
00:12:39,519 --> 00:12:41,519
model around when that os needs updated

444
00:12:41,519 --> 00:12:42,320
and patched

445
00:12:42,320 --> 00:12:44,079
uh right into our platform is an

446
00:12:44,079 --> 00:12:45,440
important part of this modern security

447
00:12:45,440 --> 00:12:46,720
posture

448
00:12:46,720 --> 00:12:49,600
so imagine the oneplus one here of a

449
00:12:49,600 --> 00:12:51,440
k-native style serverless application

450
00:12:51,440 --> 00:12:53,760
and then a cluster api managed os

451
00:12:53,760 --> 00:12:55,519
anytime that you want to update that os

452
00:12:55,519 --> 00:12:57,279
your application is always ready for a

453
00:12:57,279 --> 00:12:58,880
restart because it's inherently scale

454
00:12:58,880 --> 00:13:00,000
out scale to zero

455
00:13:00,000 --> 00:13:01,839
so applying these updates becomes really

456
00:13:01,839 --> 00:13:03,120
intuitive and proven

457
00:13:03,120 --> 00:13:04,959
uh operational model for the platform

458
00:13:04,959 --> 00:13:07,200
team so that devsecops team can say

459
00:13:07,200 --> 00:13:08,639
if there's a vulnerability in either the

460
00:13:08,639 --> 00:13:10,240
application in the build pack or in the

461
00:13:10,240 --> 00:13:10,639
os

462
00:13:10,639 --> 00:13:12,959
and in kubernetes between cluster api

463
00:13:12,959 --> 00:13:14,160
and the buildpack model

464
00:13:14,160 --> 00:13:15,519
we're going to patch that and update

465
00:13:15,519 --> 00:13:17,040
that immediately and i think we'll see

466
00:13:17,040 --> 00:13:18,800
that same convergence too as the event

467
00:13:18,800 --> 00:13:20,079
happens it can be updated

468
00:13:20,079 --> 00:13:21,360
and i think that's really this

469
00:13:21,360 --> 00:13:23,040
long-standing demand in the market for

470
00:13:23,040 --> 00:13:25,519
more and more security over time

471
00:13:25,519 --> 00:13:28,240
it's never fast enough uh really quickly

472
00:13:28,240 --> 00:13:29,440
touching on this there's some things

473
00:13:29,440 --> 00:13:30,800
that aren't custom applications for

474
00:13:30,800 --> 00:13:32,000
things that aren't custom applications

475
00:13:32,000 --> 00:13:32,880
for things that are

476
00:13:32,880 --> 00:13:34,399
packaged open source we have a secure

477
00:13:34,399 --> 00:13:35,600
pipeline that builds something called

478
00:13:35,600 --> 00:13:37,200
the tonzo application catalog

479
00:13:37,200 --> 00:13:39,600
to give you providence proven proof of

480
00:13:39,600 --> 00:13:40,320
testing

481
00:13:40,320 --> 00:13:41,920
uh open source deployed to production

482
00:13:41,920 --> 00:13:42,959
with confidence we have so many people

483
00:13:42,959 --> 00:13:44,240
that are saying oh we used to go out and

484
00:13:44,240 --> 00:13:46,079
just grab any open source off the web

485
00:13:46,079 --> 00:13:47,920
compile it ourselves uh we're now

486
00:13:47,920 --> 00:13:49,440
trusting this proven software supply

487
00:13:49,440 --> 00:13:50,639
chain from the tanzania application

488
00:13:50,639 --> 00:13:51,279
catalog

489
00:13:51,279 --> 00:13:53,199
to surround our customer applications

490
00:13:53,199 --> 00:13:55,360
with that code

491
00:13:55,360 --> 00:13:56,800
the last thing then though is that you

492
00:13:56,800 --> 00:13:58,000
know these microservices running in

493
00:13:58,000 --> 00:13:59,199
containers or apps

494
00:13:59,199 --> 00:14:00,959
often apps and so we're building into

495
00:14:00,959 --> 00:14:02,320
the spring framework

496
00:14:02,320 --> 00:14:04,320
more and more out of the box devx around

497
00:14:04,320 --> 00:14:06,560
security and i won't cover it all today

498
00:14:06,560 --> 00:14:07,839
but i'll give you a quick preview of

499
00:14:07,839 --> 00:14:09,680
where we're headed there

500
00:14:09,680 --> 00:14:11,040
if you think about that k-native

501
00:14:11,040 --> 00:14:12,720
server-less application it starts to

502
00:14:12,720 --> 00:14:13,279
expose

503
00:14:13,279 --> 00:14:15,839
an api and you really want to mix the

504
00:14:15,839 --> 00:14:17,920
best of api management and microservices

505
00:14:17,920 --> 00:14:18,880
management

506
00:14:18,880 --> 00:14:21,040
and in the past we saw that there were

507
00:14:21,040 --> 00:14:22,399
separate teams

508
00:14:22,399 --> 00:14:24,079
one that was running the application

509
00:14:24,079 --> 00:14:25,839
another was running the api security

510
00:14:25,839 --> 00:14:27,120
team

511
00:14:27,120 --> 00:14:28,839
and if you wanted uh you know strong

512
00:14:28,839 --> 00:14:31,199
authentication rate limiting

513
00:14:31,199 --> 00:14:34,800
um routing or security controls on that

514
00:14:34,800 --> 00:14:35,519
application

515
00:14:35,519 --> 00:14:37,600
say anomaly detection of the application

516
00:14:37,600 --> 00:14:39,040
and api behavior

517
00:14:39,040 --> 00:14:40,959
you had to have one team separate from

518
00:14:40,959 --> 00:14:42,880
the other so we're doing two things

519
00:14:42,880 --> 00:14:43,600
there

520
00:14:43,600 --> 00:14:44,959
we think this lease privilege also

521
00:14:44,959 --> 00:14:46,720
applies to the applications models as

522
00:14:46,720 --> 00:14:47,199
well

523
00:14:47,199 --> 00:14:48,720
we think that every microservices should

524
00:14:48,720 --> 00:14:50,560
have full api security both in terms of

525
00:14:50,560 --> 00:14:52,240
a micro gateway to protect it

526
00:14:52,240 --> 00:14:54,240
um from ddos attacks with rate limiting

527
00:14:54,240 --> 00:14:56,839
should have strong oidc integration for

528
00:14:56,839 --> 00:14:58,800
authentication and then we're taking

529
00:14:58,800 --> 00:15:00,079
that even further than just the spring

530
00:15:00,079 --> 00:15:01,440
gateway itself

531
00:15:01,440 --> 00:15:03,600
um and we made an acquisition uh a

532
00:15:03,600 --> 00:15:04,959
company called mesh seven

533
00:15:04,959 --> 00:15:06,240
and now we're starting to take what used

534
00:15:06,240 --> 00:15:07,680
to be the exclusive you know

535
00:15:07,680 --> 00:15:09,600
capabilities of these api security

536
00:15:09,600 --> 00:15:10,800
gateways and we're bringing that into

537
00:15:10,800 --> 00:15:12,240
the envoy ecosystem into the cloud

538
00:15:12,240 --> 00:15:13,600
native ecosystem

539
00:15:13,600 --> 00:15:15,279
and we're saying with the extensible you

540
00:15:15,279 --> 00:15:16,639
know envoy model

541
00:15:16,639 --> 00:15:18,720
could we bring an over time potentially

542
00:15:18,720 --> 00:15:20,800
even awesome compatible ecosystem of

543
00:15:20,800 --> 00:15:22,560
security and observability features to

544
00:15:22,560 --> 00:15:23,600
every envoy

545
00:15:23,600 --> 00:15:25,120
such that every microservice can be

546
00:15:25,120 --> 00:15:27,600
protected as it's created within

547
00:15:27,600 --> 00:15:28,639
kubernetes

548
00:15:28,639 --> 00:15:30,399
as opposed to that being a separate job

549
00:15:30,399 --> 00:15:32,560
of an api only team

550
00:15:32,560 --> 00:15:33,839
and i'll just close with this example of

551
00:15:33,839 --> 00:15:35,600
why i think that's another you know

552
00:15:35,600 --> 00:15:37,279
the endless demand for security within

553
00:15:37,279 --> 00:15:38,560
enterprise is always bringing that

554
00:15:38,560 --> 00:15:40,000
closer that devsecops model

555
00:15:40,000 --> 00:15:41,360
we've talked to some organizations where

556
00:15:41,360 --> 00:15:43,680
they might have 2000 apis but only

557
00:15:43,680 --> 00:15:45,279
800 of them formerly protected by their

558
00:15:45,279 --> 00:15:47,199
api management team and the reason was

559
00:15:47,199 --> 00:15:48,880
is that that api management team wasn't

560
00:15:48,880 --> 00:15:50,399
as close to the sdlc to container

561
00:15:50,399 --> 00:15:52,079
management to that devsecops pipeline

562
00:15:52,079 --> 00:15:52,720
team

563
00:15:52,720 --> 00:15:54,240
but now with mesh 7 and the spring

564
00:15:54,240 --> 00:15:55,839
gateway we think we can bring

565
00:15:55,839 --> 00:15:58,880
all of the security and control um and

566
00:15:58,880 --> 00:16:01,440
uh observability of those you know

567
00:16:01,440 --> 00:16:03,279
enterprise api management tools to every

568
00:16:03,279 --> 00:16:04,240
microservice

569
00:16:04,240 --> 00:16:05,839
and what's a microservice what's an api

570
00:16:05,839 --> 00:16:07,120
they have the superpowers of each other

571
00:16:07,120 --> 00:16:08,000
immediately so

572
00:16:08,000 --> 00:16:09,120
you can deploy with the speed of

573
00:16:09,120 --> 00:16:11,279
microservices and the security

574
00:16:11,279 --> 00:16:13,440
and control of an api all in one so

575
00:16:13,440 --> 00:16:14,560
we're really excited about

576
00:16:14,560 --> 00:16:16,639
you know kind of that roadmap bringing

577
00:16:16,639 --> 00:16:18,880
this least privilege this endless demand

578
00:16:18,880 --> 00:16:20,079
that enterprises want to be more and

579
00:16:20,079 --> 00:16:22,000
more secure every day

580
00:16:22,000 --> 00:16:24,160
to every application so that's a little

581
00:16:24,160 --> 00:16:25,440
bit of my current thinking

582
00:16:25,440 --> 00:16:28,480
um you know i'm pretty excited about

583
00:16:28,480 --> 00:16:31,040
looking to bring uh that model to our

584
00:16:31,040 --> 00:16:32,320
modern application platforms on

585
00:16:32,320 --> 00:16:33,199
kubernetes

586
00:16:33,199 --> 00:16:34,639
and i think it's an extension really of

587
00:16:34,639 --> 00:16:36,639
a trend we've seen for a long long time

588
00:16:36,639 --> 00:16:38,000
but we're bringing to this distributed

589
00:16:38,000 --> 00:16:39,680
application model so it's an exciting

590
00:16:39,680 --> 00:16:41,279
time to work on distributed applications

591
00:16:41,279 --> 00:16:42,560
container applications

592
00:16:42,560 --> 00:16:43,680
as we start to bring some of the

593
00:16:43,680 --> 00:16:44,720
security we might have had to

594
00:16:44,720 --> 00:16:46,480
consolidated monoliths into consolidated

595
00:16:46,480 --> 00:16:48,240
systems to our distributed systems

596
00:16:48,240 --> 00:16:49,759
so thanks for listening in the talk

597
00:16:49,759 --> 00:16:51,120
throw me a tweet if any of this makes

598
00:16:51,120 --> 00:16:51,839
sense or

599
00:16:51,839 --> 00:16:53,360
is thought provoking i'd like to

600
00:16:53,360 --> 00:16:54,720
continue to work on this kind of least

601
00:16:54,720 --> 00:16:56,240
privilege for distributed applications

602
00:16:56,240 --> 00:16:57,199
uh model together

603
00:16:57,199 --> 00:17:00,399
thanks so much

