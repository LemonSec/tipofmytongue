1
00:00:00,299 --> 00:00:03,140
oh my

2
00:00:09,320 --> 00:00:12,000
God's injection breaking all micro

3
00:00:12,000 --> 00:00:13,740
security layers with a single film

4
00:00:13,740 --> 00:00:15,540
ability

5
00:00:15,540 --> 00:00:17,760
if you have started the xcode since

6
00:00:17,760 --> 00:00:20,640
updating to version 4D you may have seen

7
00:00:20,640 --> 00:00:22,400
this new function in the template

8
00:00:22,400 --> 00:00:24,960
application supports secure restorable

9
00:00:24,960 --> 00:00:27,900
state which by default returns true

10
00:00:27,900 --> 00:00:29,939
in this talk I'm going to talk about the

11
00:00:29,939 --> 00:00:31,460
vulnerability that's

12
00:00:31,460 --> 00:00:34,260
necessitated this change and what what

13
00:00:34,260 --> 00:00:36,480
this actually means and then yeah how

14
00:00:36,480 --> 00:00:38,100
does vulnerability could be applied in

15
00:00:38,100 --> 00:00:40,640
different ways

16
00:00:41,480 --> 00:00:43,680
and here together with my colleague Dan

17
00:00:43,680 --> 00:00:46,440
Cooper we are the security research team

18
00:00:46,440 --> 00:00:48,780
at computest we are the research

19
00:00:48,780 --> 00:00:51,719
Department of course our sector seven

20
00:00:51,719 --> 00:00:53,640
competency security company in the

21
00:00:53,640 --> 00:00:55,379
Netherlands doing stuff like pen testing

22
00:00:55,379 --> 00:00:57,840
it's in response so but we don't work

23
00:00:57,840 --> 00:01:00,960
for customers we just do research to

24
00:01:00,960 --> 00:01:04,080
help make the world better and to talk

25
00:01:04,080 --> 00:01:06,360
about it and to publish about it

26
00:01:06,360 --> 00:01:08,280
at places like this

27
00:01:08,280 --> 00:01:09,960
all the work that you may have seen from

28
00:01:09,960 --> 00:01:11,820
us over the past couple of years is uh

29
00:01:11,820 --> 00:01:14,460
zero click RC and zoom equivalence over

30
00:01:14,460 --> 00:01:16,439
loss here you know when it comes to

31
00:01:16,439 --> 00:01:17,700
Miami this year with five

32
00:01:17,700 --> 00:01:21,680
vulnerabilities and ICS systems

33
00:01:22,080 --> 00:01:26,060
but my quest has always been a bit of a

34
00:01:26,060 --> 00:01:29,159
background research project for me if

35
00:01:29,159 --> 00:01:31,920
I'm stuck with the the main focus of my

36
00:01:31,920 --> 00:01:34,080
research and I want to do something else

37
00:01:34,080 --> 00:01:36,000
for a change than what I just end up

38
00:01:36,000 --> 00:01:38,400
doing is looking at what's running on my

39
00:01:38,400 --> 00:01:41,280
system so looking at some processes so I

40
00:01:41,280 --> 00:01:43,619
can get some files and most of the time

41
00:01:43,619 --> 00:01:45,299
that it doesn't turn out to be anything

42
00:01:45,299 --> 00:01:48,119
there but sometimes I do find stuff so

43
00:01:48,119 --> 00:01:50,579
yeah over the years I've you know found

44
00:01:50,579 --> 00:01:52,020
a couple of things word of those to

45
00:01:52,020 --> 00:01:54,180
Apple and today I'm going to talk about

46
00:01:54,180 --> 00:01:56,640
one of the yeah most interesting

47
00:01:56,640 --> 00:01:59,579
probabilities I find

48
00:01:59,579 --> 00:02:01,380
uh to describe it I'm going to go

49
00:02:01,380 --> 00:02:03,720
quickly over the micro security model

50
00:02:03,720 --> 00:02:05,939
it's probably well known to most of you

51
00:02:05,939 --> 00:02:07,500
here but I just want to make sure that

52
00:02:07,500 --> 00:02:08,940
the context is clear

53
00:02:08,940 --> 00:02:11,220
and then you start this process

54
00:02:11,220 --> 00:02:13,800
injection permeability I found and then

55
00:02:13,800 --> 00:02:15,780
in the third part I will apply it for

56
00:02:15,780 --> 00:02:18,300
sandbox escape from this escalation and

57
00:02:18,300 --> 00:02:21,620
then finally buy Personal ship

58
00:02:22,920 --> 00:02:26,340
so the security model in Macos

59
00:02:26,340 --> 00:02:29,879
current Macos Monterey

60
00:02:29,879 --> 00:02:32,640
first I want to compare it to like the

61
00:02:32,640 --> 00:02:35,599
old sort of Unix Linux security model

62
00:02:35,599 --> 00:02:39,239
and that's basically means that the

63
00:02:39,239 --> 00:02:41,459
users are basically privileged

64
00:02:41,459 --> 00:02:43,680
boundaries with processes are not

65
00:02:43,680 --> 00:02:45,480
you can see this if you look at files

66
00:02:45,480 --> 00:02:47,459
files always have an owner and a group

67
00:02:47,459 --> 00:02:49,560
and a number of flags that determine who

68
00:02:49,560 --> 00:02:51,360
is allowed to read or write or execute

69
00:02:51,360 --> 00:02:52,560
that file

70
00:02:52,560 --> 00:02:55,680
the same thing for processes if the

71
00:02:55,680 --> 00:02:56,940
process wants to attach to another

72
00:02:56,940 --> 00:02:59,640
process as a debugger and then read this

73
00:02:59,640 --> 00:03:02,459
memory or affect this execution then you

74
00:03:02,459 --> 00:03:05,220
need to be running as the same user

75
00:03:05,220 --> 00:03:06,780
and the exception of course is roots

76
00:03:06,780 --> 00:03:09,720
rules can always read all files they can

77
00:03:09,720 --> 00:03:12,599
attach to any process read all memory so

78
00:03:12,599 --> 00:03:15,000
basically root has access to all of the

79
00:03:15,000 --> 00:03:16,620
data on the system whether on disk

80
00:03:16,620 --> 00:03:19,319
whether in Ram anything

81
00:03:19,319 --> 00:03:21,599
and this was the security model of Mac

82
00:03:21,599 --> 00:03:23,459
OS up until the introduction of system

83
00:03:23,459 --> 00:03:25,860
Integrity protection

84
00:03:25,860 --> 00:03:28,680
so this was induced introduced in 2015

85
00:03:28,680 --> 00:03:30,480
with El Capitan

86
00:03:30,480 --> 00:03:33,260
uh this screenshots from the WWDC

87
00:03:33,260 --> 00:03:36,239
presentation where this was announced

88
00:03:36,239 --> 00:03:38,760
and the basic motivation at that time

89
00:03:38,760 --> 00:03:40,560
was like two things

90
00:03:40,560 --> 00:03:41,879
so

91
00:03:41,879 --> 00:03:43,860
adding a privileged boundary between the

92
00:03:43,860 --> 00:03:45,840
root user and the kernel

93
00:03:45,840 --> 00:03:48,480
and protecting the system itself from

94
00:03:48,480 --> 00:03:50,879
being Modified by other software so the

95
00:03:50,879 --> 00:03:52,980
operating system itself

96
00:03:52,980 --> 00:03:55,379
should not be modified by malicious

97
00:03:55,379 --> 00:03:59,280
software even if it has root privileges

98
00:03:59,280 --> 00:04:01,620
so you see that there's now no longer

99
00:04:01,620 --> 00:04:05,340
just Roots can do anything but in order

100
00:04:05,340 --> 00:04:07,680
for roots to do certain stuff that it

101
00:04:07,680 --> 00:04:09,720
needs to also have something else

102
00:04:09,720 --> 00:04:12,360
and that's what entitlements are for

103
00:04:12,360 --> 00:04:15,900
so if an application wants to load a

104
00:04:15,900 --> 00:04:17,339
kernel extension that it needs to have a

105
00:04:17,339 --> 00:04:19,199
specific entitlement if it wants to

106
00:04:19,199 --> 00:04:20,820
modify system files then it needs to

107
00:04:20,820 --> 00:04:22,620
have another entitlement

108
00:04:22,620 --> 00:04:24,360
if you want to debug processes then

109
00:04:24,360 --> 00:04:26,000
there also need to be

110
00:04:26,000 --> 00:04:28,199
entitlements on probably in both

111
00:04:28,199 --> 00:04:30,000
processes

112
00:04:30,000 --> 00:04:32,520
and this is so that those privileges

113
00:04:32,520 --> 00:04:34,740
that can then be given back to certain

114
00:04:34,740 --> 00:04:36,479
processes we still need to be able to

115
00:04:36,479 --> 00:04:38,220
update your system you still need to be

116
00:04:38,220 --> 00:04:42,380
able to load a kernel extension

117
00:04:42,419 --> 00:04:44,040
and after the introduction of sip

118
00:04:44,040 --> 00:04:45,900
originally there have been more and more

119
00:04:45,900 --> 00:04:48,180
restrictions added over the years

120
00:04:48,180 --> 00:04:50,160
so debugging any application is now

121
00:04:50,160 --> 00:04:52,280
requires Privileges and

122
00:04:52,280 --> 00:04:55,020
probably need to turn up off zip if you

123
00:04:55,020 --> 00:04:58,199
want to attach to some other process

124
00:04:58,199 --> 00:05:01,199
and one interesting feature is I will

125
00:05:01,199 --> 00:05:03,000
refer to as data faults I'm not

126
00:05:03,000 --> 00:05:04,380
completely sure if that's the official

127
00:05:04,380 --> 00:05:06,479
name for it

128
00:05:06,479 --> 00:05:08,520
um but this basically means that there

129
00:05:08,520 --> 00:05:10,139
are certain locations on the file system

130
00:05:10,139 --> 00:05:13,139
that even root cannot read from without

131
00:05:13,139 --> 00:05:14,580
an entitlement

132
00:05:14,580 --> 00:05:16,440
so for example your Mill folder Apple

133
00:05:16,440 --> 00:05:18,240
considers your email to be very

134
00:05:18,240 --> 00:05:21,479
sensitive so if you try to list that in

135
00:05:21,479 --> 00:05:22,800
your terminal then you will get a

136
00:05:22,800 --> 00:05:25,020
permission denied error even if you do

137
00:05:25,020 --> 00:05:27,780
it with sudo

138
00:05:27,780 --> 00:05:29,820
and there's also no TCC prompt for this

139
00:05:29,820 --> 00:05:32,699
this is just it's always blocked

140
00:05:32,699 --> 00:05:35,479
unless you have full disk access

141
00:05:35,479 --> 00:05:38,400
and then of course your mail application

142
00:05:38,400 --> 00:05:40,020
does need to be able to access those

143
00:05:40,020 --> 00:05:42,419
files so there's a specific specific

144
00:05:42,419 --> 00:05:44,580
entitlement for mail to be able to

145
00:05:44,580 --> 00:05:46,320
access those files and only applications

146
00:05:46,320 --> 00:05:48,120
with an entitlement like this can then

147
00:05:48,120 --> 00:05:51,960
access those locations

148
00:05:51,960 --> 00:05:54,180
now this is a pretty big shift in the

149
00:05:54,180 --> 00:05:56,820
security model of Mac OS and I don't

150
00:05:56,820 --> 00:05:58,320
think many people have realized how much

151
00:05:58,320 --> 00:06:00,900
that that model has changed things

152
00:06:00,900 --> 00:06:02,280
this also means that there's now

153
00:06:02,280 --> 00:06:04,320
different classes of vulnerabilities

154
00:06:04,320 --> 00:06:06,500
that are certainly become very important

155
00:06:06,500 --> 00:06:10,020
like a process injection vulnerability

156
00:06:10,020 --> 00:06:12,900
so process injection basically means

157
00:06:12,900 --> 00:06:16,440
that one process is executing code as if

158
00:06:16,440 --> 00:06:18,180
it is another process so it may be

159
00:06:18,180 --> 00:06:19,979
launching that process and then adding

160
00:06:19,979 --> 00:06:22,740
some a shared Library like project was

161
00:06:22,740 --> 00:06:25,800
shown yesterday maybe replacing certain

162
00:06:25,800 --> 00:06:28,819
parts of the application

163
00:06:28,979 --> 00:06:30,840
there's there's various ways that you

164
00:06:30,840 --> 00:06:32,819
might be able to do that

165
00:06:32,819 --> 00:06:34,500
now Apple has blocked a lot of these

166
00:06:34,500 --> 00:06:37,080
things already with zip so from your

167
00:06:37,080 --> 00:06:38,520
original presentation there was already

168
00:06:38,520 --> 00:06:39,680
stuff like

169
00:06:39,680 --> 00:06:42,000
blocking tasks for bits and stuff like

170
00:06:42,000 --> 00:06:43,819
that and and

171
00:06:43,819 --> 00:06:47,340
dynamic Linker environment variables

172
00:06:47,340 --> 00:06:49,560
and also third party applications can

173
00:06:49,560 --> 00:06:52,860
also prevent a lot of those features in

174
00:06:52,860 --> 00:06:56,639
applications if they enable it so like

175
00:06:56,639 --> 00:06:58,259
the environment variables in library

176
00:06:58,259 --> 00:07:00,600
validation which means that you can no

177
00:07:00,600 --> 00:07:03,600
longer load a dynamic Library unless it

178
00:07:03,600 --> 00:07:05,819
is signed by either apple or by the same

179
00:07:05,819 --> 00:07:07,740
developer

180
00:07:07,740 --> 00:07:09,600
but Macos is pretty old it's pretty

181
00:07:09,600 --> 00:07:11,300
large it's it's been

182
00:07:11,300 --> 00:07:13,500
waiting for a long time and the other

183
00:07:13,500 --> 00:07:14,940
security model

184
00:07:14,940 --> 00:07:16,919
so there's still a lot of places where

185
00:07:16,919 --> 00:07:18,960
process injection vulnerabilities may

186
00:07:18,960 --> 00:07:21,240
exist

187
00:07:21,240 --> 00:07:23,759
now it's pretty common to find a process

188
00:07:23,759 --> 00:07:25,620
injection probability in a third-party

189
00:07:25,620 --> 00:07:26,759
application

190
00:07:26,759 --> 00:07:29,880
especially by third party developers

191
00:07:29,880 --> 00:07:31,740
don't often know about these these

192
00:07:31,740 --> 00:07:33,860
different kinds of permissions

193
00:07:33,860 --> 00:07:37,319
so it's you often have to explain the

194
00:07:37,319 --> 00:07:39,240
entire security model and then why what

195
00:07:39,240 --> 00:07:41,759
they are doing is an issue

196
00:07:41,759 --> 00:07:43,860
um and then often it's an issue like we

197
00:07:43,860 --> 00:07:45,960
can modify the application and then

198
00:07:45,960 --> 00:07:48,479
abuse its DCC permissions so you don't

199
00:07:48,479 --> 00:07:50,160
need to ask for webcam permission and

200
00:07:50,160 --> 00:07:52,080
stuff like that

201
00:07:52,080 --> 00:07:53,940
and often it's also possible to just

202
00:07:53,940 --> 00:07:55,740
downgrade an application even if it's

203
00:07:55,740 --> 00:07:57,780
currently secure you can download great

204
00:07:57,780 --> 00:07:59,400
to an older version that may not have

205
00:07:59,400 --> 00:08:01,620
the hardened run time and then you can

206
00:08:01,620 --> 00:08:04,560
inject into that application and get the

207
00:08:04,560 --> 00:08:06,900
webcam or something like that

208
00:08:06,900 --> 00:08:09,419
those are often just single instances of

209
00:08:09,419 --> 00:08:10,620
vulnerability

210
00:08:10,620 --> 00:08:13,259
of course it's way more fun for me as an

211
00:08:13,259 --> 00:08:14,639
attacker is a process injection

212
00:08:14,639 --> 00:08:16,860
vulnerability everywhere

213
00:08:16,860 --> 00:08:18,660
so that's what this talk is going to be

214
00:08:18,660 --> 00:08:19,860
about

215
00:08:19,860 --> 00:08:22,319
so this cve was a process injection

216
00:08:22,319 --> 00:08:24,479
probability in apkit so basically it

217
00:08:24,479 --> 00:08:26,879
affected all Macos

218
00:08:26,879 --> 00:08:29,639
user interface applications

219
00:08:29,639 --> 00:08:32,099
so anything that's yeah following the

220
00:08:32,099 --> 00:08:35,180
normal Mac OS UI

221
00:08:35,399 --> 00:08:36,779
and

222
00:08:36,779 --> 00:08:38,580
the feature where this vulnerability was

223
00:08:38,580 --> 00:08:41,940
in was in What's called the saved state

224
00:08:41,940 --> 00:08:43,740
or internally I think it's called

225
00:08:43,740 --> 00:08:45,959
persistence UI

226
00:08:45,959 --> 00:08:48,240
and one of the ways you can see it as a

227
00:08:48,240 --> 00:08:50,220
user is if you shut down your Mac you

228
00:08:50,220 --> 00:08:51,680
get this prompt

229
00:08:51,680 --> 00:08:54,600
with the checkbox for reopen Windows

230
00:08:54,600 --> 00:08:56,760
when logging back in so this is part of

231
00:08:56,760 --> 00:08:58,680
that safe State feature

232
00:08:58,680 --> 00:09:00,720
but it's used for a lot of other

233
00:09:00,720 --> 00:09:02,279
features as well

234
00:09:02,279 --> 00:09:05,279
so for example there's appnap which is

235
00:09:05,279 --> 00:09:07,380
basically a feature where the system can

236
00:09:07,380 --> 00:09:10,380
see well you haven't switched to this

237
00:09:10,380 --> 00:09:11,880
application in a while it's not playing

238
00:09:11,880 --> 00:09:13,260
any music

239
00:09:13,260 --> 00:09:15,600
I don't think you're using it and what

240
00:09:15,600 --> 00:09:17,580
it then says is it asks the application

241
00:09:17,580 --> 00:09:20,399
to save its state it terminates the

242
00:09:20,399 --> 00:09:22,560
process but it keeps just drawing a

243
00:09:22,560 --> 00:09:24,660
bitmap picture of the application so the

244
00:09:24,660 --> 00:09:26,519
user still thinks that application is

245
00:09:26,519 --> 00:09:27,360
running

246
00:09:27,360 --> 00:09:29,220
but then when they switch back the

247
00:09:29,220 --> 00:09:31,200
application is quickly reopened again

248
00:09:31,200 --> 00:09:33,560
and it restores its state

249
00:09:33,560 --> 00:09:36,600
so yeah the system can save some memory

250
00:09:36,600 --> 00:09:38,940
about the user still still thinks the

251
00:09:38,940 --> 00:09:41,700
application is open

252
00:09:41,700 --> 00:09:43,860
and it's also one of the other things it

253
00:09:43,860 --> 00:09:46,260
can do is it can restore your unsafe

254
00:09:46,260 --> 00:09:48,180
documents if you reboot while you have a

255
00:09:48,180 --> 00:09:51,000
document open even if you didn't save it

256
00:09:51,000 --> 00:09:52,800
anywhere on your disk it can still be

257
00:09:52,800 --> 00:09:56,959
there if it's implemented correctly

258
00:09:57,300 --> 00:09:59,300
now a large part of this

259
00:09:59,300 --> 00:10:02,100
already works if you just create a new

260
00:10:02,100 --> 00:10:03,959
application you don't need to opt in as

261
00:10:03,959 --> 00:10:06,839
a developer it already does a lot of

262
00:10:06,839 --> 00:10:09,660
this for you but you can extend it if

263
00:10:09,660 --> 00:10:12,420
you need to so for example if you have a

264
00:10:12,420 --> 00:10:14,580
document based application then you may

265
00:10:14,580 --> 00:10:16,800
have your own States for the documents

266
00:10:16,800 --> 00:10:18,839
and then you might might want to store

267
00:10:18,839 --> 00:10:21,899
that state in the safe State as well for

268
00:10:21,899 --> 00:10:24,440
each document

269
00:10:25,920 --> 00:10:30,540
now those safe states are stored in this

270
00:10:30,540 --> 00:10:32,339
directory in your safe application State

271
00:10:32,339 --> 00:10:35,339
directory in your library folder

272
00:10:35,339 --> 00:10:37,019
there's basically two files here that

273
00:10:37,019 --> 00:10:39,000
are important for this there's a couple

274
00:10:39,000 --> 00:10:41,399
more I don't really know what they do

275
00:10:41,399 --> 00:10:44,160
that's the windows.plist file this is

276
00:10:44,160 --> 00:10:46,380
basically an array of all of the windows

277
00:10:46,380 --> 00:10:48,540
of the application and a couple of other

278
00:10:48,540 --> 00:10:50,839
things like a doc menu but

279
00:10:50,839 --> 00:10:54,600
every window has one entry here

280
00:10:54,600 --> 00:10:57,500
and they'll see very recently named

281
00:10:57,500 --> 00:10:59,220
data.data file

282
00:10:59,220 --> 00:11:02,100
and this is a custom format and it's not

283
00:11:02,100 --> 00:11:05,279
used anywhere else as far as I know

284
00:11:05,279 --> 00:11:07,560
and it contains a list of records and

285
00:11:07,560 --> 00:11:10,800
each record has an ID that refers to one

286
00:11:10,800 --> 00:11:14,399
of the entries in the windows.plist file

287
00:11:14,399 --> 00:11:16,560
and it's in the windows or PLS

288
00:11:16,560 --> 00:11:18,720
Foundation encryption key and every

289
00:11:18,720 --> 00:11:21,120
records in the data.data file is

290
00:11:21,120 --> 00:11:24,019
encrypted with AES CBC

291
00:11:24,019 --> 00:11:27,600
and it's an encrypted serialized object

292
00:11:27,600 --> 00:11:30,720
now I don't know why this is encrypted

293
00:11:30,720 --> 00:11:33,839
because the the encryption key is right

294
00:11:33,839 --> 00:11:35,100
next to it there are no different

295
00:11:35,100 --> 00:11:37,440
permissions there's no

296
00:11:37,440 --> 00:11:38,519
um

297
00:11:38,519 --> 00:11:40,500
yeah there's no entitlements here for

298
00:11:40,500 --> 00:11:42,480
accessing those files

299
00:11:42,480 --> 00:11:45,180
my best guess is that they wanted to

300
00:11:45,180 --> 00:11:46,800
store this in the keychain but that

301
00:11:46,800 --> 00:11:48,360
turned out to be complicated or

302
00:11:48,360 --> 00:11:49,980
something like that maybe the keychain

303
00:11:49,980 --> 00:11:52,500
is locked and then your stage is gone

304
00:11:52,500 --> 00:11:54,779
or maybe to prevent these files from

305
00:11:54,779 --> 00:11:57,899
being indexed I I don't know

306
00:11:57,899 --> 00:11:58,560
um

307
00:11:58,560 --> 00:12:00,420
because there's no Integrity check as

308
00:12:00,420 --> 00:12:02,220
well you can just any application can

309
00:12:02,220 --> 00:12:04,200
modify it as long as they can just grab

310
00:12:04,200 --> 00:12:07,380
the key and modify the state

311
00:12:07,380 --> 00:12:09,180
but what this really is about is this

312
00:12:09,180 --> 00:12:12,140
serialized object

313
00:12:12,540 --> 00:12:15,540
now insecure deserialization is a type

314
00:12:15,540 --> 00:12:17,220
of vulnerability that's very well known

315
00:12:17,220 --> 00:12:20,820
in many programming languages but mainly

316
00:12:20,820 --> 00:12:23,519
C sharp and Java are well known for this

317
00:12:23,519 --> 00:12:27,180
being able to lead to code execution

318
00:12:27,180 --> 00:12:29,220
so there's these projects that you can

319
00:12:29,220 --> 00:12:31,740
just use to generate your c-sharp

320
00:12:31,740 --> 00:12:33,660
serialized object and that will then

321
00:12:33,660 --> 00:12:35,399
bring some sales kit for you if it's

322
00:12:35,399 --> 00:12:38,820
deserialized same for Java I think for

323
00:12:38,820 --> 00:12:41,700
python it's pretty trivial to do as well

324
00:12:41,700 --> 00:12:45,540
uh I think Ruby as well

325
00:12:45,540 --> 00:12:47,519
um and apple also has a serialization

326
00:12:47,519 --> 00:12:50,220
format called nscoding

327
00:12:50,220 --> 00:12:52,800
but Apple also realized this risk of

328
00:12:52,800 --> 00:12:55,800
insecure deserialization and he realized

329
00:12:55,800 --> 00:12:57,959
this back in 2012

330
00:12:57,959 --> 00:13:00,180
so the edits are secure for variant the

331
00:13:00,180 --> 00:13:01,740
NS secure coding

332
00:13:01,740 --> 00:13:05,040
and and that's back in Mountain line

333
00:13:05,040 --> 00:13:07,139
but the older version of the protocol is

334
00:13:07,139 --> 00:13:10,380
still in use it still exists and um

335
00:13:10,380 --> 00:13:14,660
yeah still used in in certain places

336
00:13:15,420 --> 00:13:18,300
so to compare those two different uh

337
00:13:18,300 --> 00:13:20,160
variants

338
00:13:20,160 --> 00:13:22,740
so the insecure version what this does

339
00:13:22,740 --> 00:13:25,860
is it first decodes an object

340
00:13:25,860 --> 00:13:27,839
and then it checks is this of the class

341
00:13:27,839 --> 00:13:30,860
that I expect here

342
00:13:33,899 --> 00:13:35,820
and this is a risk because at the time

343
00:13:35,820 --> 00:13:37,800
you check its type the object already

344
00:13:37,800 --> 00:13:40,860
exists it may already have done stuff

345
00:13:40,860 --> 00:13:43,380
maybe it's Constructors doing stuff or

346
00:13:43,380 --> 00:13:46,800
it's destructors doing stuff

347
00:13:46,800 --> 00:13:50,040
but the secure version

348
00:13:50,040 --> 00:13:52,980
for that to decode an object you need to

349
00:13:52,980 --> 00:13:55,019
specify init fonts that it needs to be

350
00:13:55,019 --> 00:13:56,880
of a specific class

351
00:13:56,880 --> 00:13:58,560
if it's not of that class it's not

352
00:13:58,560 --> 00:14:00,060
created

353
00:14:00,060 --> 00:14:02,459
so this is much safer because you now

354
00:14:02,459 --> 00:14:04,920
can no longer just create arbitrary

355
00:14:04,920 --> 00:14:06,779
objects it really needs to be that class

356
00:14:06,779 --> 00:14:09,600
or a subclass of it

357
00:14:09,600 --> 00:14:11,399
doesn't mean it's impossible to attack

358
00:14:11,399 --> 00:14:13,560
this there still have been attacks

359
00:14:13,560 --> 00:14:15,240
against each secure coders but it's much

360
00:14:15,240 --> 00:14:18,620
harder than an insecure version

361
00:14:19,019 --> 00:14:20,519
so

362
00:14:20,519 --> 00:14:23,100
um I had this idea for an attack

363
00:14:23,100 --> 00:14:25,620
I create a safe state with a malicious

364
00:14:25,620 --> 00:14:27,240
serialized object

365
00:14:27,240 --> 00:14:29,100
invited to the safe State directly with

366
00:14:29,100 --> 00:14:31,260
another application

367
00:14:31,260 --> 00:14:33,600
I launched your application

368
00:14:33,600 --> 00:14:35,880
it deserializes that object and if code

369
00:14:35,880 --> 00:14:39,380
execution in that other app

370
00:14:43,139 --> 00:14:45,959
this sounded really easy but then I

371
00:14:45,959 --> 00:14:47,639
started looking into this

372
00:14:47,639 --> 00:14:50,579
well did somebody else already find such

373
00:14:50,579 --> 00:14:52,339
a serialization

374
00:14:52,339 --> 00:14:56,839
chain of objects that I can use here

375
00:14:56,940 --> 00:14:59,220
so this is why so serial projects

376
00:14:59,220 --> 00:15:03,180
watching serial uh for c-sharp as well

377
00:15:03,180 --> 00:15:05,519
that you can use for Java serialization

378
00:15:05,519 --> 00:15:07,920
or for c-sharp serialization

379
00:15:07,920 --> 00:15:09,720
but nothing like that for objective c

380
00:15:09,720 --> 00:15:12,620
seem to exist

381
00:15:14,459 --> 00:15:16,440
I looked into a couple of project zero

382
00:15:16,440 --> 00:15:20,699
white tips about security serialization

383
00:15:20,699 --> 00:15:23,040
but those all use very specific filter

384
00:15:23,040 --> 00:15:25,139
abilities in the these in the secure

385
00:15:25,139 --> 00:15:27,180
serialization that has since been fixed

386
00:15:27,180 --> 00:15:29,220
so those weren't really techniques that

387
00:15:29,220 --> 00:15:31,740
it could apply anymore

388
00:15:31,740 --> 00:15:33,959
so I could not find any prior work on

389
00:15:33,959 --> 00:15:34,740
this

390
00:15:34,740 --> 00:15:38,279
um it might exist but uh eventually I

391
00:15:38,279 --> 00:15:39,959
just concluded I had to do all of this

392
00:15:39,959 --> 00:15:42,979
from scratch

393
00:15:45,180 --> 00:15:46,800
so

394
00:15:46,800 --> 00:15:48,959
finding a chain of objects that I can

395
00:15:48,959 --> 00:15:51,540
pass through that uh

396
00:15:51,540 --> 00:15:55,139
into that format to eventually evaluate

397
00:15:55,139 --> 00:15:58,740
applescripts within another process

398
00:15:58,740 --> 00:16:01,620
so how did I do that well I disassembled

399
00:16:01,620 --> 00:16:04,620
a lot of those initial coder methods

400
00:16:04,620 --> 00:16:06,680
those are the methods that are used for

401
00:16:06,680 --> 00:16:10,620
creating a d sharedized object

402
00:16:10,620 --> 00:16:12,660
and what I noticed is that especially in

403
00:16:12,660 --> 00:16:14,579
appkits many of them do not support

404
00:16:14,579 --> 00:16:16,880
secure coding

405
00:16:16,880 --> 00:16:20,040
kind of surprised me but it's also many

406
00:16:20,040 --> 00:16:21,600
of them aren't really objects that you

407
00:16:21,600 --> 00:16:24,120
want to send to somebody else so they're

408
00:16:24,120 --> 00:16:26,820
not just xpc or something like that so

409
00:16:26,820 --> 00:16:30,120
also really no need for secure coding

410
00:16:30,120 --> 00:16:32,040
and also many of those were not very

411
00:16:32,040 --> 00:16:34,380
interesting so they just recursively

412
00:16:34,380 --> 00:16:36,420
decode some instance variables and then

413
00:16:36,420 --> 00:16:39,060
they're done so took a while to find any

414
00:16:39,060 --> 00:16:40,740
of them that had anything actually

415
00:16:40,740 --> 00:16:43,519
useful

416
00:16:44,459 --> 00:16:46,860
then the first step I found was the NS

417
00:16:46,860 --> 00:16:49,579
rule editor

418
00:16:50,040 --> 00:16:54,600
and when this object is deserialized

419
00:16:54,600 --> 00:16:56,459
what it will do is it will create a

420
00:16:56,459 --> 00:16:58,680
binding to another object

421
00:16:58,680 --> 00:17:03,480
using a key path also from the archive

422
00:17:03,480 --> 00:17:05,640
so bindings if you're not familiar with

423
00:17:05,640 --> 00:17:07,500
Mac OS

424
00:17:07,500 --> 00:17:09,720
development they're basically like a

425
00:17:09,720 --> 00:17:11,699
reactive programming technique where you

426
00:17:11,699 --> 00:17:14,459
can just directly connect a model to a

427
00:17:14,459 --> 00:17:16,699
view without having a controller full of

428
00:17:16,699 --> 00:17:20,040
boilerplate code in between

429
00:17:20,040 --> 00:17:22,559
so for example you can have your model

430
00:17:22,559 --> 00:17:25,619
as a person an indicate a few with a

431
00:17:25,619 --> 00:17:27,419
text field and you can bind that field

432
00:17:27,419 --> 00:17:30,059
to the name of the person

433
00:17:30,059 --> 00:17:31,860
and then the key part that you have is

434
00:17:31,860 --> 00:17:33,059
the name

435
00:17:33,059 --> 00:17:35,400
property of that person and then if you

436
00:17:35,400 --> 00:17:37,140
modify the text field then the model is

437
00:17:37,140 --> 00:17:38,760
automatically updated or if the model is

438
00:17:38,760 --> 00:17:40,340
updated then the

439
00:17:40,340 --> 00:17:44,100
view is also automatically updated

440
00:17:44,100 --> 00:17:47,280
now how this works internally

441
00:17:47,280 --> 00:17:49,620
is that if you create a binding then you

442
00:17:49,620 --> 00:17:50,880
should

443
00:17:50,880 --> 00:17:53,520
select a property of the object but

444
00:17:53,520 --> 00:17:56,160
there's really no check for that so what

445
00:17:56,160 --> 00:17:58,320
you can just do is you can pull any

446
00:17:58,320 --> 00:18:02,400
methods as long as it has no arguments

447
00:18:02,400 --> 00:18:03,780
um on an object

448
00:18:03,780 --> 00:18:06,299
and whenever you make that binding it

449
00:18:06,299 --> 00:18:08,400
needs to create an initial value so that

450
00:18:08,400 --> 00:18:10,799
method is invoked immediately as you

451
00:18:10,799 --> 00:18:12,840
deserialize this object

452
00:18:12,840 --> 00:18:15,900
so for example if you have a

453
00:18:15,900 --> 00:18:18,660
NS process clause which has a launch

454
00:18:18,660 --> 00:18:21,600
method it has no arguments so you can

455
00:18:21,600 --> 00:18:23,460
okay The Binding to the launch method

456
00:18:23,460 --> 00:18:25,380
and then at the moment that binding is

457
00:18:25,380 --> 00:18:28,260
created that method is invoked so you're

458
00:18:28,260 --> 00:18:30,179
not supposed to do this it's not a

459
00:18:30,179 --> 00:18:31,860
property that you should be binding to

460
00:18:31,860 --> 00:18:34,799
but by doing this I was able to call

461
00:18:34,799 --> 00:18:39,360
arbitrary methods during deserialization

462
00:18:39,360 --> 00:18:42,720
as long as they have no arguments

463
00:18:42,720 --> 00:18:46,140
and then as a second step I use this NS

464
00:18:46,140 --> 00:18:48,600
Custom Image wrap

465
00:18:48,600 --> 00:18:51,179
and when this object is deserialized it

466
00:18:51,179 --> 00:18:54,539
decodes two things from the archive

467
00:18:54,539 --> 00:18:56,160
a draw method

468
00:18:56,160 --> 00:18:58,559
which is a selector it's like a function

469
00:18:58,559 --> 00:19:01,620
pointer for a object Objective C method

470
00:19:01,620 --> 00:19:03,539
and an object

471
00:19:03,539 --> 00:19:05,640
but it wouldn't use those yet at this

472
00:19:05,640 --> 00:19:07,140
point

473
00:19:07,140 --> 00:19:09,419
but it has a draw function

474
00:19:09,419 --> 00:19:12,179
uh and we call this draw function it

475
00:19:12,179 --> 00:19:14,400
will perform the selector that is

476
00:19:14,400 --> 00:19:16,380
decoded from the archive on the object

477
00:19:16,380 --> 00:19:18,720
is also decoded from the archive

478
00:19:18,720 --> 00:19:23,120
passing itself as the first argument

479
00:19:23,220 --> 00:19:25,320
so by combining this with the previous

480
00:19:25,320 --> 00:19:27,419
one by creating a binding to that draw

481
00:19:27,419 --> 00:19:28,679
method

482
00:19:28,679 --> 00:19:31,679
I was then able to call arbitrary

483
00:19:31,679 --> 00:19:34,260
methods although I did not have any

484
00:19:34,260 --> 00:19:36,720
control over the arguments yet

485
00:19:36,720 --> 00:19:38,580
I could

486
00:19:38,580 --> 00:19:41,220
call these arbitrary methods or objects

487
00:19:41,220 --> 00:19:43,980
that are deserialized

488
00:19:43,980 --> 00:19:48,000
now sadly for the next step I have to

489
00:19:48,000 --> 00:19:50,220
skip a little bit because it involves a

490
00:19:50,220 --> 00:19:52,620
vulnerability that's not yet fixed

491
00:19:52,620 --> 00:19:55,320
hopefully it will be in Ventura so I'm

492
00:19:55,320 --> 00:19:58,980
going to step skip ahead a little bit

493
00:19:58,980 --> 00:20:00,960
and summarize a bit the steps that I

494
00:20:00,960 --> 00:20:03,299
just did so first of all I could call

495
00:20:03,299 --> 00:20:05,280
zero arguments methods on these

496
00:20:05,280 --> 00:20:07,080
serialized objects

497
00:20:07,080 --> 00:20:10,080
and I could call any R methods on the

498
00:20:10,080 --> 00:20:12,480
serialized objects

499
00:20:12,480 --> 00:20:15,179
I could use this

500
00:20:15,179 --> 00:20:17,039
reject this vulnerability to create

501
00:20:17,039 --> 00:20:19,260
arbitrary objects so not just the

502
00:20:19,260 --> 00:20:23,360
serializable objects with any objects

503
00:20:23,520 --> 00:20:25,799
and then I used actually a similar trick

504
00:20:25,799 --> 00:20:28,440
to call zero argument methods on those

505
00:20:28,440 --> 00:20:29,940
objects

506
00:20:29,940 --> 00:20:32,000
called arbitrary methods with another

507
00:20:32,000 --> 00:20:33,900
rejected parts

508
00:20:33,900 --> 00:20:35,460
and at that point I can basically

509
00:20:35,460 --> 00:20:38,100
execute applescript

510
00:20:38,100 --> 00:20:40,440
so this applescript is running inside

511
00:20:40,440 --> 00:20:42,480
another process so it's running with the

512
00:20:42,480 --> 00:20:44,100
entitlements and the permissions of

513
00:20:44,100 --> 00:20:45,539
another process

514
00:20:45,539 --> 00:20:48,780
so for example if I would attack mail I

515
00:20:48,780 --> 00:20:50,460
could just tell it to copy the entire

516
00:20:50,460 --> 00:20:53,160
meal database from the data fault to a

517
00:20:53,160 --> 00:20:54,780
location where I can read it and then

518
00:20:54,780 --> 00:20:57,360
upload it do stuff with it

519
00:20:57,360 --> 00:20:59,280
applescript also music and spawn a shell

520
00:20:59,280 --> 00:21:01,980
with virtual stuff like that so at this

521
00:21:01,980 --> 00:21:04,500
point I had pretty well compromised the

522
00:21:04,500 --> 00:21:06,980
application

523
00:21:07,320 --> 00:21:10,380
but then it turned out that this was not

524
00:21:10,380 --> 00:21:11,880
quite enough for everything that I

525
00:21:11,880 --> 00:21:14,940
wanted to do every the second one of the

526
00:21:14,940 --> 00:21:17,100
exploits that I was here later

527
00:21:17,100 --> 00:21:19,740
uh this was not enough for

528
00:21:19,740 --> 00:21:22,860
I wanted to be able to execute something

529
00:21:22,860 --> 00:21:24,960
equivalent to Native codes

530
00:21:24,960 --> 00:21:28,740
and it was not yet possible with this

531
00:21:28,740 --> 00:21:30,780
and then what I had to deal with is the

532
00:21:30,780 --> 00:21:32,220
hardened drone time that was really the

533
00:21:32,220 --> 00:21:35,000
main issue here

534
00:21:37,380 --> 00:21:39,900
so at this point I could interact with

535
00:21:39,900 --> 00:21:41,760
the objective c runtime I could call

536
00:21:41,760 --> 00:21:43,980
methods I could create arbitrary objects

537
00:21:43,980 --> 00:21:45,960
but stuff that I could not do is called

538
00:21:45,960 --> 00:21:48,840
C functions could not create any structs

539
00:21:48,840 --> 00:21:50,940
I could not create C strings no pointer

540
00:21:50,940 --> 00:21:53,400
D reference nothing like that

541
00:21:53,400 --> 00:21:55,020
but due to the heart and dream time

542
00:21:55,020 --> 00:21:57,480
versus not allowed to create jet memory

543
00:21:57,480 --> 00:22:00,240
Pages or inside memory at all so I can

544
00:22:00,240 --> 00:22:02,400
just not just

545
00:22:02,400 --> 00:22:05,159
yeah create some some

546
00:22:05,159 --> 00:22:07,140
memory write my payload into there and

547
00:22:07,140 --> 00:22:09,960
you jump to it so memory corruption that

548
00:22:09,960 --> 00:22:11,460
would be possible with the methods that

549
00:22:11,460 --> 00:22:13,140
I had but it would be

550
00:22:13,140 --> 00:22:14,820
pretty tricky

551
00:22:14,820 --> 00:22:17,580
and Library validation also means that I

552
00:22:17,580 --> 00:22:20,340
was not able to load a malicious Library

553
00:22:20,340 --> 00:22:22,020
into the process

554
00:22:22,020 --> 00:22:24,780
but I could load libraries signed by

555
00:22:24,780 --> 00:22:25,740
Apple

556
00:22:25,740 --> 00:22:28,260
now that's very interesting because

557
00:22:28,260 --> 00:22:30,120
Apple includes quite a few scripting

558
00:22:30,120 --> 00:22:33,559
languages within Mac OS

559
00:22:35,760 --> 00:22:37,380
so I looked at all of those scripting

560
00:22:37,380 --> 00:22:39,360
languages see which of those has a

561
00:22:39,360 --> 00:22:41,159
foreign function interface that

562
00:22:41,159 --> 00:22:43,140
interacts with c

563
00:22:43,140 --> 00:22:45,000
and I notice all of these were included

564
00:22:45,000 --> 00:22:48,360
in Macos at the time so python has been

565
00:22:48,360 --> 00:22:50,480
removed since then in

566
00:22:50,480 --> 00:22:53,280
12.43 I think but this although affected

567
00:22:53,280 --> 00:22:56,100
big serve so it was still there

568
00:22:56,100 --> 00:22:58,320
so I evaluated all of these things and

569
00:22:58,320 --> 00:23:00,720
what I could do with them

570
00:23:00,720 --> 00:23:04,080
uh for Apple scripts I just concluded

571
00:23:04,080 --> 00:23:05,700
this was not powerful enough didn't give

572
00:23:05,700 --> 00:23:07,320
me The Primitives to do what I wanted to

573
00:23:07,320 --> 00:23:08,340
do

574
00:23:08,340 --> 00:23:10,740
JavaScript had no ffi that they could

575
00:23:10,740 --> 00:23:12,000
use

576
00:23:12,000 --> 00:23:16,799
you had to expose the new stuff to the

577
00:23:16,799 --> 00:23:18,780
JavaScript world and I could not access

578
00:23:18,780 --> 00:23:20,640
that

579
00:23:20,640 --> 00:23:23,220
Pearl and Ruby were interesting but the

580
00:23:23,220 --> 00:23:27,600
ffi uh modules are not included

581
00:23:27,600 --> 00:23:29,580
so if I wanted to install those they

582
00:23:29,580 --> 00:23:32,340
would create new binaries which would

583
00:23:32,340 --> 00:23:34,080
not be signed by Apple

584
00:23:34,080 --> 00:23:36,720
and I would not be able to load them

585
00:23:36,720 --> 00:23:39,600
TCL might work but I I think I'm too

586
00:23:39,600 --> 00:23:41,640
young to know what this is

587
00:23:41,640 --> 00:23:45,480
but python python was interesting for me

588
00:23:45,480 --> 00:23:47,820
because python on Mac OS did include the

589
00:23:47,820 --> 00:23:49,980
C types module

590
00:23:49,980 --> 00:23:51,900
so I didn't need to compile anything I

591
00:23:51,900 --> 00:23:54,059
could just load the C types module

592
00:23:54,059 --> 00:23:56,280
with C types you can do a lot that you

593
00:23:56,280 --> 00:23:57,780
can also do in C you can call C

594
00:23:57,780 --> 00:23:59,700
functions the reference pointer C string

595
00:23:59,700 --> 00:24:01,679
structs anything

596
00:24:01,679 --> 00:24:04,080
and most of it works with the art engine

597
00:24:04,080 --> 00:24:07,500
time on there's there's a few things so

598
00:24:07,500 --> 00:24:08,580
um

599
00:24:08,580 --> 00:24:11,880
C types as a feature where you can pass

600
00:24:11,880 --> 00:24:15,120
a python function as a function pointer

601
00:24:15,120 --> 00:24:17,880
so C function pointer and to do that you

602
00:24:17,880 --> 00:24:19,679
need to have Js memory so you need to

603
00:24:19,679 --> 00:24:22,559
have writable executable memory

604
00:24:22,559 --> 00:24:24,179
and the hardens runtime wasn't allowing

605
00:24:24,179 --> 00:24:26,400
me to do that but it could just delete

606
00:24:26,400 --> 00:24:28,140
all of those parts from the C types

607
00:24:28,140 --> 00:24:29,700
module because I wasn't interesting

608
00:24:29,700 --> 00:24:32,039
interested in using them anyway if I

609
00:24:32,039 --> 00:24:34,260
just deleted all of those I could load

610
00:24:34,260 --> 00:24:36,059
the module file

611
00:24:36,059 --> 00:24:38,100
so in practice this is

612
00:24:38,100 --> 00:24:40,320
equivalent to native code execution

613
00:24:40,320 --> 00:24:43,140
within a process

614
00:24:43,140 --> 00:24:44,880
but now I'm still back at the same

615
00:24:44,880 --> 00:24:46,919
problem because python doesn't have an

616
00:24:46,919 --> 00:24:50,400
objective-c interface I wanted to load a

617
00:24:50,400 --> 00:24:54,480
different language to call C functions

618
00:24:54,480 --> 00:24:56,460
and now I need to call C function to

619
00:24:56,460 --> 00:24:58,860
execute python so it's back at the same

620
00:24:58,860 --> 00:25:01,140
problem again

621
00:25:01,140 --> 00:25:03,900
but then I noticed that one of the steps

622
00:25:03,900 --> 00:25:06,960
that I previously saw was The

623
00:25:06,960 --> 00:25:10,020
applescript Objective C Bridge

624
00:25:10,020 --> 00:25:13,559
so this is basically applescript

625
00:25:13,559 --> 00:25:16,860
with access to the objective-c runtime

626
00:25:16,860 --> 00:25:18,480
and it's a framework that's been

627
00:25:18,480 --> 00:25:22,500
included in Macos for a couple of years

628
00:25:22,500 --> 00:25:25,919
in The applescript Objective C framework

629
00:25:25,919 --> 00:25:27,900
and what you can do is if you load it

630
00:25:27,900 --> 00:25:30,779
and you can then load the scripts from a

631
00:25:30,779 --> 00:25:32,580
bundle so instead of loading the bundle

632
00:25:32,580 --> 00:25:35,340
itself you can just load the scripts

633
00:25:35,340 --> 00:25:37,320
from the bundle and even if that's not

634
00:25:37,320 --> 00:25:39,600
signed by Apple even if there's no code

635
00:25:39,600 --> 00:25:41,700
signature on that at all you can just

636
00:25:41,700 --> 00:25:43,860
load it and add new Apple scripts into

637
00:25:43,860 --> 00:25:46,459
the runtime

638
00:25:46,919 --> 00:25:49,860
now this was able to interact with the

639
00:25:49,860 --> 00:25:51,659
objective-c runtime

640
00:25:51,659 --> 00:25:53,940
but one interesting thing here is that

641
00:25:53,940 --> 00:25:56,039
it can cause C functions so it did give

642
00:25:56,039 --> 00:25:58,020
me that extra thing of being able to

643
00:25:58,020 --> 00:26:00,000
call C function

644
00:26:00,000 --> 00:26:01,980
but it cannot create those non-object

645
00:26:01,980 --> 00:26:04,559
pointers structs C strings stuff like

646
00:26:04,559 --> 00:26:05,760
that

647
00:26:05,760 --> 00:26:07,559
so this gives me just this little step

648
00:26:07,559 --> 00:26:09,240
further

649
00:26:09,240 --> 00:26:11,520
but then there was still the issue of

650
00:26:11,520 --> 00:26:13,620
how do I execute python

651
00:26:13,620 --> 00:26:16,020
because for python all of the C

652
00:26:16,020 --> 00:26:17,940
functions

653
00:26:17,940 --> 00:26:20,159
that I was interested in take a string

654
00:26:20,159 --> 00:26:21,179
argument

655
00:26:21,179 --> 00:26:23,100
for example file path or the actual

656
00:26:23,100 --> 00:26:25,380
python code to evaluate there

657
00:26:25,380 --> 00:26:28,679
and it took me a while to see what I

658
00:26:28,679 --> 00:26:30,059
could do there

659
00:26:30,059 --> 00:26:33,120
but if you call Pi main with

660
00:26:33,120 --> 00:26:35,279
zero arguments and nil as a second

661
00:26:35,279 --> 00:26:36,299
pointer

662
00:26:36,299 --> 00:26:38,880
what it will actually do is it will act

663
00:26:38,880 --> 00:26:40,559
like a rebel just like if you enter

664
00:26:40,559 --> 00:26:43,200
python in your terminal just the the

665
00:26:43,200 --> 00:26:45,900
actual Rebel stuff would start within

666
00:26:45,900 --> 00:26:48,000
the process that I was attacking

667
00:26:48,000 --> 00:26:50,760
so I could create a new pointer and I

668
00:26:50,760 --> 00:26:52,740
could pass it to this function

669
00:26:52,740 --> 00:26:55,440
and then at that point I could execute

670
00:26:55,440 --> 00:26:57,539
python on standard input in the process

671
00:26:57,539 --> 00:27:00,000
that I was attacking

672
00:27:00,000 --> 00:27:02,520
now if you think applescript or

673
00:27:02,520 --> 00:27:03,980
objective c is a little bit for Boost

674
00:27:03,980 --> 00:27:06,720
you should see how code in The aposcript

675
00:27:06,720 --> 00:27:08,760
Objective C Bridge looks like

676
00:27:08,760 --> 00:27:10,799
so all of this you need to prefix stuff

677
00:27:10,799 --> 00:27:13,140
with like tell current application or

678
00:27:13,140 --> 00:27:15,299
current applications anus bundles Alex

679
00:27:15,299 --> 00:27:18,240
and then pass the the method name and

680
00:27:18,240 --> 00:27:19,799
it's

681
00:27:19,799 --> 00:27:22,080
pretty terrible to read this

682
00:27:22,080 --> 00:27:25,200
but with it by main line at the end I

683
00:27:25,200 --> 00:27:27,120
could start a spiral Rebel within that

684
00:27:27,120 --> 00:27:29,479
process

685
00:27:31,559 --> 00:27:33,539
so to go back to that summary of the

686
00:27:33,539 --> 00:27:36,120
different steps I could go any methods

687
00:27:36,120 --> 00:27:38,940
on arbitrary Objective C objects

688
00:27:38,940 --> 00:27:40,919
evaluate applescript to the Apple script

689
00:27:40,919 --> 00:27:42,779
Objective C Bridge

690
00:27:42,779 --> 00:27:44,760
evaluate python

691
00:27:44,760 --> 00:27:47,039
import C types and then I had code

692
00:27:47,039 --> 00:27:49,679
execution basically equivalent to Native

693
00:27:49,679 --> 00:27:51,980
codes

694
00:27:52,740 --> 00:27:55,980
so I could apply this vulnerability on

695
00:27:55,980 --> 00:27:57,299
any application

696
00:27:57,299 --> 00:27:59,460
but of course I was very interested in

697
00:27:59,460 --> 00:28:02,640
seeing what is the maximum input Maximum

698
00:28:02,640 --> 00:28:04,080
Impact I can have with this

699
00:28:04,080 --> 00:28:06,240
vulnerability so if you report something

700
00:28:06,240 --> 00:28:07,620
to Apple you really want to make sure

701
00:28:07,620 --> 00:28:10,080
that you have understood the full impact

702
00:28:10,080 --> 00:28:12,059
and that you can demonstrate it because

703
00:28:12,059 --> 00:28:13,919
they're not going to figure that out for

704
00:28:13,919 --> 00:28:15,480
you if you want the full boundary you

705
00:28:15,480 --> 00:28:16,740
really need to demonstrate it yourself

706
00:28:16,740 --> 00:28:19,500
is my experience

707
00:28:19,500 --> 00:28:22,919
so first of all that's sandbox Escape

708
00:28:22,919 --> 00:28:26,640
for that I used uh what's known as an

709
00:28:26,640 --> 00:28:28,200
open Panel

710
00:28:28,200 --> 00:28:31,260
it may look quite boring if your Mac OS

711
00:28:31,260 --> 00:28:33,360
user you probably see this one 10 times

712
00:28:33,360 --> 00:28:35,940
a day and you don't think much about it

713
00:28:35,940 --> 00:28:37,559
but it's actually technically quite

714
00:28:37,559 --> 00:28:39,659
complicated

715
00:28:39,659 --> 00:28:42,179
so what you have here is that

716
00:28:42,179 --> 00:28:44,460
the application may be sandboxed so the

717
00:28:44,460 --> 00:28:46,020
application has no access to your list

718
00:28:46,020 --> 00:28:48,419
of files with the open Panel can see

719
00:28:48,419 --> 00:28:50,279
your full disk

720
00:28:50,279 --> 00:28:52,140
so the way this works

721
00:28:52,140 --> 00:28:54,179
is that the window itself is actually

722
00:28:54,179 --> 00:28:56,279
part of your application

723
00:28:56,279 --> 00:28:58,679
but the contents are being drawn by a

724
00:28:58,679 --> 00:29:00,240
different service

725
00:29:00,240 --> 00:29:02,039
so you can kind of see this like an

726
00:29:02,039 --> 00:29:04,620
iframe on the website but we need an

727
00:29:04,620 --> 00:29:07,100
application

728
00:29:09,179 --> 00:29:11,700
and that content or that open and panel

729
00:29:11,700 --> 00:29:12,919
save service

730
00:29:12,919 --> 00:29:15,600
is not sandboxed because yeah it needs

731
00:29:15,600 --> 00:29:18,659
to see all of your files

732
00:29:18,659 --> 00:29:20,399
now as it turned out

733
00:29:20,399 --> 00:29:22,260
for some reason

734
00:29:22,260 --> 00:29:24,899
is open a safe panel was loading its

735
00:29:24,899 --> 00:29:27,720
safe state from the same directory as

736
00:29:27,720 --> 00:29:29,700
the application itself

737
00:29:29,700 --> 00:29:32,159
I'm guessing because you might want to

738
00:29:32,159 --> 00:29:34,080
resize the panel and then the state

739
00:29:34,080 --> 00:29:35,940
needs to be saved per different

740
00:29:35,940 --> 00:29:37,559
application differently or something

741
00:29:37,559 --> 00:29:38,700
like that

742
00:29:38,700 --> 00:29:40,919
not completely clear to me

743
00:29:40,919 --> 00:29:43,020
so what I could do is just write a saved

744
00:29:43,020 --> 00:29:44,760
state in my own applications directory

745
00:29:44,760 --> 00:29:47,700
open that panel and then I had escaped

746
00:29:47,700 --> 00:29:49,620
the sandbox

747
00:29:49,620 --> 00:29:51,419
now this one was actually fixed a little

748
00:29:51,419 --> 00:29:54,720
bit earlier by Apple in 11.3 by no

749
00:29:54,720 --> 00:29:56,940
longer sharing the directory with the

750
00:29:56,940 --> 00:29:59,520
open a safe panel service

751
00:29:59,520 --> 00:30:01,919
so I could just use the aposcript

752
00:30:01,919 --> 00:30:04,260
evaluation and then execute the sales

753
00:30:04,260 --> 00:30:05,820
script and I reach first shell or

754
00:30:05,820 --> 00:30:07,679
something like that at that point that

755
00:30:07,679 --> 00:30:10,700
was outside of the sandbox

756
00:30:11,520 --> 00:30:13,860
now privileged escalation to Ruth and

757
00:30:13,860 --> 00:30:15,659
this one requires all of that extra

758
00:30:15,659 --> 00:30:19,159
python evaluation stuff

759
00:30:19,620 --> 00:30:22,320
so for this I used a technique I

760
00:30:22,320 --> 00:30:26,220
borrowed from Elias Moritz in in of d

761
00:30:26,220 --> 00:30:29,220
so I looked for an application with the

762
00:30:29,220 --> 00:30:30,980
entitlements

763
00:30:30,980 --> 00:30:33,000
com.apple.private dot authorization

764
00:30:33,000 --> 00:30:34,620
Services containing

765
00:30:34,620 --> 00:30:37,620
system.install.apple-software

766
00:30:39,059 --> 00:30:40,860
for example install command line

767
00:30:40,860 --> 00:30:42,659
developer tools

768
00:30:42,659 --> 00:30:44,820
and what this basically means

769
00:30:44,820 --> 00:30:47,159
is that this application is allowed to

770
00:30:47,159 --> 00:30:50,220
install packages signed by Apple without

771
00:30:50,220 --> 00:30:53,279
authorization from the user so normally

772
00:30:53,279 --> 00:30:55,740
if you install package the user need to

773
00:30:55,740 --> 00:30:58,380
answer needs to enter their passwords or

774
00:30:58,380 --> 00:30:59,820
something similar to that

775
00:30:59,820 --> 00:31:02,399
but if you have this entitlement you can

776
00:31:02,399 --> 00:31:04,320
just install any Apple sign package

777
00:31:04,320 --> 00:31:06,720
without authorization

778
00:31:06,720 --> 00:31:09,480
and any installation of the Packers wins

779
00:31:09,480 --> 00:31:11,520
US Route

780
00:31:11,520 --> 00:31:13,620
so then from the right up of Ilias

781
00:31:13,620 --> 00:31:15,779
there's also this macros public beta

782
00:31:15,779 --> 00:31:17,820
access utility package

783
00:31:17,820 --> 00:31:20,460
this is basically if you want to enroll

784
00:31:20,460 --> 00:31:22,080
into the Macos data you need to install

785
00:31:22,080 --> 00:31:23,880
this package

786
00:31:23,880 --> 00:31:27,000
and what this package does is that it's

787
00:31:27,000 --> 00:31:29,520
in its post install script

788
00:31:29,520 --> 00:31:32,399
it runs a command from the disk you

789
00:31:32,399 --> 00:31:34,860
install it to

790
00:31:34,860 --> 00:31:37,260
but as a normal user you can just attach

791
00:31:37,260 --> 00:31:39,120
a new disk image or you could create a

792
00:31:39,120 --> 00:31:40,380
ram disk

793
00:31:40,380 --> 00:31:42,539
and then use this

794
00:31:42,539 --> 00:31:45,960
service to install to that disk

795
00:31:45,960 --> 00:31:48,059
and at that point you are winning a

796
00:31:48,059 --> 00:31:52,380
commands that the user specified as root

797
00:31:52,380 --> 00:31:56,159
so just mount a disk put that file on

798
00:31:56,159 --> 00:31:57,779
the same path there and there's no check

799
00:31:57,779 --> 00:32:00,000
if it's a Mac OS disk just go to the

800
00:32:00,000 --> 00:32:01,440
installation on that disk and you're

801
00:32:01,440 --> 00:32:04,740
executing code as root

802
00:32:04,740 --> 00:32:07,080
now I think Apple has fixed this in the

803
00:32:07,080 --> 00:32:09,240
newest version of this package but

804
00:32:09,240 --> 00:32:11,700
because it's still Apple signed and I'm

805
00:32:11,700 --> 00:32:13,200
not sure if they even have a way to

806
00:32:13,200 --> 00:32:15,539
revoke package signatures

807
00:32:15,539 --> 00:32:17,460
if as long as you have this package you

808
00:32:17,460 --> 00:32:20,460
can just keep doing this attack

809
00:32:20,460 --> 00:32:24,179
now if you want to see what that uh

810
00:32:24,179 --> 00:32:27,600
uh c-types python code looks like to do

811
00:32:27,600 --> 00:32:29,460
this it's a

812
00:32:29,460 --> 00:32:30,960
yeah it's pretty similar to how you

813
00:32:30,960 --> 00:32:33,960
would do is this from C

814
00:32:33,960 --> 00:32:35,399
you can create an authorization

815
00:32:35,399 --> 00:32:39,779
reference uh grab that uh

816
00:32:39,779 --> 00:32:42,360
right for the install Apple software and

817
00:32:42,360 --> 00:32:45,840
then pass it to the PK install client

818
00:32:45,840 --> 00:32:48,299
that can then use it to install the

819
00:32:48,299 --> 00:32:49,620
package

820
00:32:49,620 --> 00:32:51,659
so it's very

821
00:32:51,659 --> 00:32:53,460
for Boost writing something like that

822
00:32:53,460 --> 00:32:56,640
but yeah in the end this works and I got

823
00:32:56,640 --> 00:33:00,799
it to elevate privileges to root

824
00:33:03,059 --> 00:33:05,240
foreign

825
00:33:05,340 --> 00:33:09,559
ly I also wanted to bypass sip of course

826
00:33:09,559 --> 00:33:12,600
so to do that I just looked at all of

827
00:33:12,600 --> 00:33:14,640
the applications that were available to

828
00:33:14,640 --> 00:33:16,200
me I try to

829
00:33:16,200 --> 00:33:18,840
find them everywhere that I could and

830
00:33:18,840 --> 00:33:21,419
one of the places I looked is on the

831
00:33:21,419 --> 00:33:26,159
install disk for the Macos Big Sur beta

832
00:33:26,159 --> 00:33:28,919
and on the disk I found a application

833
00:33:28,919 --> 00:33:30,840
I'm really not sure what it's supposed

834
00:33:30,840 --> 00:33:32,760
to do

835
00:33:32,760 --> 00:33:34,140
but it has the entitlement

836
00:33:34,140 --> 00:33:37,140
com.apple.rootlist.install.heritable

837
00:33:38,039 --> 00:33:39,960
and what this entitlement basically

838
00:33:39,960 --> 00:33:41,039
means

839
00:33:41,039 --> 00:33:44,760
is that it can access any sub projected

840
00:33:44,760 --> 00:33:46,320
files

841
00:33:46,320 --> 00:33:48,480
and it's also heritable which is a nice

842
00:33:48,480 --> 00:33:50,399
bonus because then you can just spawn

843
00:33:50,399 --> 00:33:52,380
the shell or something like that you

844
00:33:52,380 --> 00:33:53,760
don't need to work within the process

845
00:33:53,760 --> 00:33:55,919
itself

846
00:33:55,919 --> 00:33:59,340
and even though this was included on the

847
00:33:59,340 --> 00:34:02,279
data disk image I could just copy it

848
00:34:02,279 --> 00:34:04,200
into a Mac OS environment and there the

849
00:34:04,200 --> 00:34:05,760
application would still

850
00:34:05,760 --> 00:34:08,940
open as normally

851
00:34:08,940 --> 00:34:11,219
so what can you do if you bypass ship

852
00:34:11,219 --> 00:34:14,460
well as I mentioned you can read user's

853
00:34:14,460 --> 00:34:17,580
email also the messages database Safari

854
00:34:17,580 --> 00:34:21,319
history also protects it in the same way

855
00:34:21,659 --> 00:34:24,239
I can modify the TCC database so I can

856
00:34:24,239 --> 00:34:25,800
just give myself permission to access

857
00:34:25,800 --> 00:34:28,199
the webcam the microphone anything like

858
00:34:28,199 --> 00:34:30,359
that

859
00:34:30,359 --> 00:34:33,418
I can also persist in locations that are

860
00:34:33,418 --> 00:34:35,280
sip protected normally

861
00:34:35,280 --> 00:34:38,760
so if I buy to some protected uh

862
00:34:38,760 --> 00:34:41,820
place your antivirus would not be able

863
00:34:41,820 --> 00:34:43,560
to remove me probably

864
00:34:43,560 --> 00:34:46,440
and maybe useful this is not completely

865
00:34:46,440 --> 00:34:48,540
sure could also probably delete all my

866
00:34:48,540 --> 00:34:50,339
removal tools so Apple would really need

867
00:34:50,339 --> 00:34:51,960
to push the software update to delete

868
00:34:51,960 --> 00:34:53,879
this

869
00:34:53,879 --> 00:34:57,599
and also as a final step I could load a

870
00:34:57,599 --> 00:35:00,119
kernel extension without user approval

871
00:35:00,119 --> 00:35:02,220
so there's a database for kernel

872
00:35:02,220 --> 00:35:04,500
extensions that the user has approved

873
00:35:04,500 --> 00:35:07,619
and normally the user needs to see a

874
00:35:07,619 --> 00:35:08,700
prompt like this where they need to

875
00:35:08,700 --> 00:35:10,500
click OK and go to system preferences

876
00:35:10,500 --> 00:35:12,900
and also approve a kernel extension

877
00:35:12,900 --> 00:35:14,700
specifically

878
00:35:14,700 --> 00:35:16,859
but because I could modify the database

879
00:35:16,859 --> 00:35:18,780
I could just load any kernel extension

880
00:35:18,780 --> 00:35:21,180
without the user ever seeing anything

881
00:35:21,180 --> 00:35:22,380
happen

882
00:35:22,380 --> 00:35:25,200
so that's not yet kernel code execution

883
00:35:25,200 --> 00:35:29,160
because uh you still need a apple kernel

884
00:35:29,160 --> 00:35:33,540
extension certificate to sign those

885
00:35:33,540 --> 00:35:36,480
but if you would for example find the

886
00:35:36,480 --> 00:35:38,599
vulnerability in any kernel extension

887
00:35:38,599 --> 00:35:40,740
then you would be able to load that

888
00:35:40,740 --> 00:35:43,140
exploit the film ability and then

889
00:35:43,140 --> 00:35:46,920
execute code or get a certificate from

890
00:35:46,920 --> 00:35:50,400
somewhere maybe

891
00:35:50,400 --> 00:35:53,040
now I have a demo of the attack so first

892
00:35:53,040 --> 00:35:54,960
of all it will demonstrate the sandbox

893
00:35:54,960 --> 00:35:58,760
application is actually sandboxed

894
00:36:03,060 --> 00:36:05,339
and then start the attack the first one

895
00:36:05,339 --> 00:36:07,859
should be really quick

896
00:36:07,859 --> 00:36:10,140
the Second Step takes a little bit

897
00:36:10,140 --> 00:36:11,820
longer because it needs to create a disk

898
00:36:11,820 --> 00:36:13,740
image to perform the entire installation

899
00:36:13,740 --> 00:36:16,578
stuff like that

900
00:36:17,339 --> 00:36:19,560
it's it's also not trying to be stealthy

901
00:36:19,560 --> 00:36:21,300
in any way so you can see the ram disk

902
00:36:21,300 --> 00:36:23,700
bearing but might be some way to hide it

903
00:36:23,700 --> 00:36:25,140
from the user

904
00:36:25,140 --> 00:36:27,180
Amanda said bypass is also really quick

905
00:36:27,180 --> 00:36:28,440
because it doesn't need to do anything

906
00:36:28,440 --> 00:36:29,579
other than

907
00:36:29,579 --> 00:36:31,619
the serialize the object

908
00:36:31,619 --> 00:36:33,359
as you can see we now have a root shell

909
00:36:33,359 --> 00:36:36,900
and to demonstrate also the Sip bypass

910
00:36:36,900 --> 00:36:38,820
go to the system policy configuration

911
00:36:38,820 --> 00:36:41,040
directory this is where your approved

912
00:36:41,040 --> 00:36:43,380
kernel extensions are stored

913
00:36:43,380 --> 00:36:45,000
and I create a new file just to

914
00:36:45,000 --> 00:36:47,339
demonstrate that I can write here which

915
00:36:47,339 --> 00:36:49,020
should normally not be possible with

916
00:36:49,020 --> 00:36:52,220
just a root user

917
00:36:58,099 --> 00:37:00,839
thank you

918
00:37:00,839 --> 00:37:03,180
so a little bit about how Apple fixed

919
00:37:03,180 --> 00:37:04,380
this

920
00:37:04,380 --> 00:37:07,560
so to go back to the very first slide in

921
00:37:07,560 --> 00:37:10,200
Monterey apps can now indicate that they

922
00:37:10,200 --> 00:37:12,599
only accept secure serialized objects so

923
00:37:12,599 --> 00:37:14,280
they can just set that secure flag to

924
00:37:14,280 --> 00:37:15,839
true

925
00:37:15,839 --> 00:37:17,579
and for all of Apple's apps this is

926
00:37:17,579 --> 00:37:19,980
already automatically enabled

927
00:37:19,980 --> 00:37:23,040
but existing applications may want to

928
00:37:23,040 --> 00:37:25,440
store insecure deserialized objects if

929
00:37:25,440 --> 00:37:27,540
they have like a document format that

930
00:37:27,540 --> 00:37:30,359
they need to serialize their

931
00:37:30,359 --> 00:37:33,320
so for those applications that methods

932
00:37:33,320 --> 00:37:37,859
might be needed to return false there

933
00:37:37,859 --> 00:37:39,960
it's not completely clear to me if it's

934
00:37:39,960 --> 00:37:42,240
exploitable if the method is not

935
00:37:42,240 --> 00:37:43,920
implemented but the application doesn't

936
00:37:43,920 --> 00:37:45,839
store their own objects

937
00:37:45,839 --> 00:37:48,720
I'm not completely sure I haven't

938
00:37:48,720 --> 00:37:51,780
controlled well enough to say for sure

939
00:37:51,780 --> 00:37:54,359
I reported this to Apple on December 4th

940
00:37:54,359 --> 00:37:56,700
in 2020 and the effects of sandbox

941
00:37:56,700 --> 00:37:59,760
Escape pretty early in 11.3 in April

942
00:37:59,760 --> 00:38:02,040
last year

943
00:38:02,040 --> 00:38:04,380
and then the complete fix was included

944
00:38:04,380 --> 00:38:08,160
in Macos Monterey October 25th in last

945
00:38:08,160 --> 00:38:09,599
year

946
00:38:09,599 --> 00:38:11,880
and supposedly it's backboarded to Big

947
00:38:11,880 --> 00:38:14,339
Sur and Catalina now I didn't know about

948
00:38:14,339 --> 00:38:15,240
that

949
00:38:15,240 --> 00:38:18,900
so it was not in the patch notes for Big

950
00:38:18,900 --> 00:38:21,000
Sur or Catalina at the time it was

951
00:38:21,000 --> 00:38:22,020
released

952
00:38:22,020 --> 00:38:24,300
so as you can see here it was released

953
00:38:24,300 --> 00:38:27,119
on October the 25th and then they added

954
00:38:27,119 --> 00:38:28,800
it to the security to secure the

955
00:38:28,800 --> 00:38:32,640
security advisories page on May the 25th

956
00:38:32,640 --> 00:38:35,839
in 2022.

957
00:38:36,119 --> 00:38:38,400
I don't check that page very often so if

958
00:38:38,400 --> 00:38:40,440
they updated seven months later then I'm

959
00:38:40,440 --> 00:38:42,900
not going to see that so I was assuming

960
00:38:42,900 --> 00:38:44,579
they didn't backboard it because it's

961
00:38:44,579 --> 00:38:47,640
it's quite an involved change

962
00:38:47,640 --> 00:38:50,400
um it's also not in the Big Sur patch

963
00:38:50,400 --> 00:38:52,380
notes anywhere as far as I can tell so

964
00:38:52,380 --> 00:38:54,060
it's a bit weird that they skip a

965
00:38:54,060 --> 00:38:54,839
version

966
00:38:54,839 --> 00:38:56,760
I also have not verified if it's

967
00:38:56,760 --> 00:38:58,920
correctly fixed or if they use the same

968
00:38:58,920 --> 00:39:00,119
approach

969
00:39:00,119 --> 00:39:03,060
uh yeah it's been so long that even

970
00:39:03,060 --> 00:39:04,619
getting it to work again to make this

971
00:39:04,619 --> 00:39:06,660
demonstration already took some time so

972
00:39:06,660 --> 00:39:09,780
find all of those old versions I didn't

973
00:39:09,780 --> 00:39:12,680
have the time for that

974
00:39:13,140 --> 00:39:15,920
to conclude

975
00:39:15,920 --> 00:39:18,540
security boundary between processors now

976
00:39:18,540 --> 00:39:21,359
it's not just users and there's all of

977
00:39:21,359 --> 00:39:22,680
these different permissions and

978
00:39:22,680 --> 00:39:24,000
entitlements

979
00:39:24,000 --> 00:39:27,000
that separates processes

980
00:39:27,000 --> 00:39:28,800
and process injection vulnerabilities

981
00:39:28,800 --> 00:39:31,440
can break those security boundaries by

982
00:39:31,440 --> 00:39:33,300
allowing malware to get actual

983
00:39:33,300 --> 00:39:36,660
permissions and abuse them

984
00:39:36,660 --> 00:39:37,980
this was a process injection

985
00:39:37,980 --> 00:39:39,900
vulnerability affecting all applicant

986
00:39:39,900 --> 00:39:42,359
applications and could be used to escape

987
00:39:42,359 --> 00:39:44,880
the sandbox Elevate privileges to roots

988
00:39:44,880 --> 00:39:47,579
and bypasses it it was fixed in October

989
00:39:47,579 --> 00:39:49,140
last year

990
00:39:49,140 --> 00:39:52,320
I find some finally some takeaways

991
00:39:52,320 --> 00:39:54,359
you see that Mac OS keeps adding more

992
00:39:54,359 --> 00:39:56,640
and more defensive security layers

993
00:39:56,640 --> 00:39:59,460
but adding security layers to an

994
00:39:59,460 --> 00:40:01,079
established system with such a large

995
00:40:01,079 --> 00:40:03,240
history is Mac OS that's really

996
00:40:03,240 --> 00:40:05,339
difficult there's all of these places in

997
00:40:05,339 --> 00:40:07,560
code that was written like more than 10

998
00:40:07,560 --> 00:40:08,880
years ago

999
00:40:08,880 --> 00:40:10,500
at the Assumption of a completely

1000
00:40:10,500 --> 00:40:12,599
different security model and a

1001
00:40:12,599 --> 00:40:13,920
completely different security

1002
00:40:13,920 --> 00:40:16,560
requirements and suddenly all of that

1003
00:40:16,560 --> 00:40:18,300
code is now a tech service so

1004
00:40:18,300 --> 00:40:20,760
application can now suddenly attack each

1005
00:40:20,760 --> 00:40:21,599
other

1006
00:40:21,599 --> 00:40:23,280
and there's still a lot of gold in the

1007
00:40:23,280 --> 00:40:25,260
system that is not really

1008
00:40:25,260 --> 00:40:28,140
making that assumption

1009
00:40:28,140 --> 00:40:30,300
and also what I think is a important

1010
00:40:30,300 --> 00:40:32,940
point to make here is that effort of

1011
00:40:32,940 --> 00:40:34,859
attackers may not increase if you add

1012
00:40:34,859 --> 00:40:37,140
more security layers because sometimes

1013
00:40:37,140 --> 00:40:38,940
you can just have one vulnerability and

1014
00:40:38,940 --> 00:40:42,740
bypass all of those layers at once

1015
00:40:43,320 --> 00:40:45,780
I have a few references that are used so

1016
00:40:45,780 --> 00:40:48,000
the Google project serial y tips for the

1017
00:40:48,000 --> 00:40:49,760
insecurity serialization

1018
00:40:49,760 --> 00:40:53,880
the and of the bug from Ilias and a few

1019
00:40:53,880 --> 00:40:56,700
other things about secure coding

1020
00:40:56,700 --> 00:40:58,619
and finally we have a write-up on our

1021
00:40:58,619 --> 00:41:00,480
website

1022
00:41:00,480 --> 00:41:04,320
it's still just the first part of the

1023
00:41:04,320 --> 00:41:06,000
exploit chain they're still part missing

1024
00:41:06,000 --> 00:41:07,800
I hope to be able to publish that soon

1025
00:41:07,800 --> 00:41:10,020
after Venture is released

1026
00:41:10,020 --> 00:41:11,579
um you can will also be able to find

1027
00:41:11,579 --> 00:41:14,400
that on our website

1028
00:41:14,400 --> 00:41:17,900
now do you have any questions

1029
00:41:20,160 --> 00:41:22,020
and can you repeat the question for the

1030
00:41:22,020 --> 00:41:24,619
live stream please

1031
00:41:32,960 --> 00:41:35,520
so the question is did I consider Swift

1032
00:41:35,520 --> 00:41:37,440
for the Apple scripts in the python

1033
00:41:37,440 --> 00:41:39,839
parts so

1034
00:41:39,839 --> 00:41:41,640
uh

1035
00:41:41,640 --> 00:41:43,980
I could not compile Swift and then try

1036
00:41:43,980 --> 00:41:46,079
to load it because the dynamic or the

1037
00:41:46,079 --> 00:41:48,540
art engine time would not allow me to do

1038
00:41:48,540 --> 00:41:49,560
that

1039
00:41:49,560 --> 00:41:52,020
I think there's this Swift playgrounds

1040
00:41:52,020 --> 00:41:54,119
like stuff but I'm not really sure I

1041
00:41:54,119 --> 00:41:55,740
haven't looked into it if I would be

1042
00:41:55,740 --> 00:41:57,660
able to load that and execute Swift like

1043
00:41:57,660 --> 00:41:59,520
that I haven't looked

1044
00:41:59,520 --> 00:42:02,520
into that it might work

1045
00:42:02,520 --> 00:42:05,119
yep

1046
00:42:16,200 --> 00:42:18,839
have the same limitations

1047
00:42:18,839 --> 00:42:21,599
and instructors

1048
00:42:21,599 --> 00:42:25,260
but the basic code is

1049
00:42:25,260 --> 00:42:28,640
using the objectives

1050
00:42:35,220 --> 00:42:37,879
going over

1051
00:42:42,119 --> 00:42:45,000
so I think there's a couple of different

1052
00:42:45,000 --> 00:42:47,280
ways that you can execute Apple

1053
00:42:47,280 --> 00:42:50,880
JavaScript so there's these

1054
00:42:50,880 --> 00:42:53,520
direct methods and there's also this

1055
00:42:53,520 --> 00:42:55,440
JavaScript for automation I'm not

1056
00:42:55,440 --> 00:42:58,740
completely sure how to call that from

1057
00:42:58,740 --> 00:43:02,700
Objective C so it it may be that this

1058
00:43:02,700 --> 00:43:05,760
was not possible I I don't fully I'm not

1059
00:43:05,760 --> 00:43:07,260
completely sure

1060
00:43:07,260 --> 00:43:10,500
uh but I think I did try it and then if

1061
00:43:10,500 --> 00:43:12,960
I eventually just gave up because I

1062
00:43:12,960 --> 00:43:16,460
already had python working for this

1063
00:43:20,579 --> 00:43:23,400
yeah this affects all versions of Mac OS

1064
00:43:23,400 --> 00:43:25,200
right like it goes back

1065
00:43:25,200 --> 00:43:25,819
yeah

1066
00:43:25,819 --> 00:43:30,900
or at least uh yeah probably back to the

1067
00:43:30,900 --> 00:43:32,880
introduction of sip uh probably affect

1068
00:43:32,880 --> 00:43:34,560
all of those yes cool and apple

1069
00:43:34,560 --> 00:43:36,500
backboarded just a few versions you said

1070
00:43:36,500 --> 00:43:39,359
only to Catalina and Big Sur they said

1071
00:43:39,359 --> 00:43:41,220
although the release notes don't really

1072
00:43:41,220 --> 00:43:43,879
make that clear

1073
00:43:45,780 --> 00:43:47,530
okay thank you

1074
00:43:47,530 --> 00:43:55,159
[Applause]

