1
00:00:00,659 --> 00:00:03,559
bye

2
00:00:08,039 --> 00:00:10,620
package or the app bundles context and

3
00:00:10,620 --> 00:00:12,719
the reason that's significant is because

4
00:00:12,719 --> 00:00:14,639
again the the payload you're using for

5
00:00:14,639 --> 00:00:17,160
your reality Mount will not have any TCC

6
00:00:17,160 --> 00:00:19,680
accesses unless you have a bypass or an

7
00:00:19,680 --> 00:00:21,600
x-plate but there's a good chance

8
00:00:21,600 --> 00:00:24,060
terminal has been granted some level of

9
00:00:24,060 --> 00:00:26,160
access so then you're migrating your

10
00:00:26,160 --> 00:00:28,859
operating context from your payload over

11
00:00:28,859 --> 00:00:31,439
to terminal which is probably a good

12
00:00:31,439 --> 00:00:33,600
chance that you have access and then you

13
00:00:33,600 --> 00:00:34,920
can run the checks that I mentioned

14
00:00:34,920 --> 00:00:36,960
before to see what accesses you have and

15
00:00:36,960 --> 00:00:40,500
then access those directories safely

16
00:00:40,500 --> 00:00:42,300
um some other interesting aspects of

17
00:00:42,300 --> 00:00:44,579
indefine is you can search for like

18
00:00:44,579 --> 00:00:46,500
files with different keywords in it and

19
00:00:46,500 --> 00:00:48,239
what's kind of cool about that is you

20
00:00:48,239 --> 00:00:49,920
cannot not only search like the file

21
00:00:49,920 --> 00:00:51,480
name you can actually search the

22
00:00:51,480 --> 00:00:54,059
contents of the file the KMD item text

23
00:00:54,059 --> 00:00:56,219
content value which is their string

24
00:00:56,219 --> 00:00:58,800
content of the file so like you can use

25
00:00:58,800 --> 00:01:01,320
these types of searches to look for like

26
00:01:01,320 --> 00:01:03,480
files with passwords or tokens or Keys

27
00:01:03,480 --> 00:01:05,700
you can also look for recently created

28
00:01:05,700 --> 00:01:08,340
or modified files you can search for AWS

29
00:01:08,340 --> 00:01:11,540
keys by looking for that Akia identifier

30
00:01:11,540 --> 00:01:15,119
lots of different uses of mdfine and I

31
00:01:15,119 --> 00:01:17,299
also have versions on my Spotlight

32
00:01:17,299 --> 00:01:20,640
enumeration kit site API versions of

33
00:01:20,640 --> 00:01:22,140
these like if you don't want to run and

34
00:01:22,140 --> 00:01:24,479
Define command you can run the MD query

35
00:01:24,479 --> 00:01:28,340
version that's using API calls

36
00:01:28,979 --> 00:01:30,619
um so a few other interesting commands

37
00:01:30,619 --> 00:01:33,900
you can remove quarantine attributes of

38
00:01:33,900 --> 00:01:36,079
course you can do it with the X8 CTR

39
00:01:36,079 --> 00:01:38,520
binary but you can also do it with cat

40
00:01:38,520 --> 00:01:41,640
and curl like in each case you can you

41
00:01:41,640 --> 00:01:43,200
feed it the file that has the quarantine

42
00:01:43,200 --> 00:01:44,939
attributes and you write it out to a new

43
00:01:44,939 --> 00:01:47,640
file all the content is the same but the

44
00:01:47,640 --> 00:01:50,340
quarantine attribute stripped another

45
00:01:50,340 --> 00:01:52,079
thing that was kind of interesting like

46
00:01:52,079 --> 00:01:54,119
another way to display or get file

47
00:01:54,119 --> 00:01:56,880
contents is you can use MD import which

48
00:01:56,880 --> 00:01:58,860
is used to like import Spotlight plugins

49
00:01:58,860 --> 00:02:01,439
but if you feed it these parameters and

50
00:02:01,439 --> 00:02:03,060
a path to a file and you can see it

51
00:02:03,060 --> 00:02:05,219
pointing there to the KMD item text

52
00:02:05,219 --> 00:02:07,439
content which is the contents of the

53
00:02:07,439 --> 00:02:09,360
file so it's another way of like cutting

54
00:02:09,360 --> 00:02:12,239
out file contents you can also dump

55
00:02:12,239 --> 00:02:15,000
clipboard contents using PB copy or you

56
00:02:15,000 --> 00:02:17,220
can use Osa script

57
00:02:17,220 --> 00:02:19,500
um and essentially like you think about

58
00:02:19,500 --> 00:02:22,560
um a lot of users might use things like

59
00:02:22,560 --> 00:02:24,840
um keepass or like password managers

60
00:02:24,840 --> 00:02:26,700
where you're copying passwords and

61
00:02:26,700 --> 00:02:28,620
pasting it and so like you might be able

62
00:02:28,620 --> 00:02:30,660
to grab that content using PB copy or

63
00:02:30,660 --> 00:02:33,120
Osa script you can check if your host is

64
00:02:33,120 --> 00:02:36,360
in a VM using that CTL or you can even

65
00:02:36,360 --> 00:02:39,540
run the arch binary Arch who also give

66
00:02:39,540 --> 00:02:42,060
you the architecture and lastly you can

67
00:02:42,060 --> 00:02:43,920
check if your screen is locked using the

68
00:02:43,920 --> 00:02:46,379
irreg command there

69
00:02:46,379 --> 00:02:48,599
um and I've used this in the past before

70
00:02:48,599 --> 00:02:50,519
where if you're doing like I was doing

71
00:02:50,519 --> 00:02:52,200
something with chrome where windows were

72
00:02:52,200 --> 00:02:53,879
closing and opening and I didn't want

73
00:02:53,879 --> 00:02:55,920
the user to see it and so I just kind of

74
00:02:55,920 --> 00:02:58,319
ran this command periodically and the

75
00:02:58,319 --> 00:03:00,420
idle check command below as well and

76
00:03:00,420 --> 00:03:01,620
kind of waited for the screen to be

77
00:03:01,620 --> 00:03:03,660
locked and make sure the idle time was

78
00:03:03,660 --> 00:03:05,700
high meaning the user was away and then

79
00:03:05,700 --> 00:03:07,980
you can run like I'll run my technique

80
00:03:07,980 --> 00:03:09,660
which would open and close a few windows

81
00:03:09,660 --> 00:03:14,120
for a few seconds and then move on so

82
00:03:14,280 --> 00:03:16,980
a few other interesting data sources as

83
00:03:16,980 --> 00:03:19,620
well when it comes to text edit

84
00:03:19,620 --> 00:03:22,080
documents if you have like and I've done

85
00:03:22,080 --> 00:03:23,879
this before where I have like text edit

86
00:03:23,879 --> 00:03:25,560
open and I'm like typing in it and I

87
00:03:25,560 --> 00:03:27,120
might not save it and I'm just kind of

88
00:03:27,120 --> 00:03:29,099
keeping it as like a running list if

89
00:03:29,099 --> 00:03:30,780
you're doing that and you don't save it

90
00:03:30,780 --> 00:03:32,819
the contents of that text edit document

91
00:03:32,819 --> 00:03:34,560
can be grabbed because it's written

92
00:03:34,560 --> 00:03:37,500
temporarily to disk as a RTF it's not

93
00:03:37,500 --> 00:03:40,920
protected by TCC so you can just browse

94
00:03:40,920 --> 00:03:42,959
to that directory and dump it out and

95
00:03:42,959 --> 00:03:45,120
look at the contents of that same with

96
00:03:45,120 --> 00:03:47,159
sticky notes I've never really used

97
00:03:47,159 --> 00:03:48,840
sticky notes but I think it's kind of

98
00:03:48,840 --> 00:03:51,000
cool like you can just have a sticky

99
00:03:51,000 --> 00:03:52,260
notes on your computer where you have

100
00:03:52,260 --> 00:03:54,480
little notes like our virtual version of

101
00:03:54,480 --> 00:03:56,459
sticky notes same thing there if you

102
00:03:56,459 --> 00:03:58,140
have one open and you're you're typing

103
00:03:58,140 --> 00:03:59,700
in it you can just grab the contents of

104
00:03:59,700 --> 00:04:01,860
that because it's also an RTF file and

105
00:04:01,860 --> 00:04:05,040
it's not protected by TCC

106
00:04:05,040 --> 00:04:06,780
um another thing that's interesting is

107
00:04:06,780 --> 00:04:09,540
Firefox one thing we found in a pass

108
00:04:09,540 --> 00:04:11,519
operation was looking at how Firefox

109
00:04:11,519 --> 00:04:14,340
stored its cookies and unlike Chrome uh

110
00:04:14,340 --> 00:04:16,738
which which has encryption and safe

111
00:04:16,738 --> 00:04:18,779
storage key and stuff like Firefox just

112
00:04:18,779 --> 00:04:20,940
had the cookie in plain value and so

113
00:04:20,940 --> 00:04:22,380
like we were able to download the

114
00:04:22,380 --> 00:04:24,720
cookies.s sqlite file from like a Target

115
00:04:24,720 --> 00:04:26,940
machine Port it over to an attacker

116
00:04:26,940 --> 00:04:30,419
machine delete the sqlite tech wall file

117
00:04:30,419 --> 00:04:32,100
on our attacker machine closed and

118
00:04:32,100 --> 00:04:34,620
reopen Firefox and we were logged in as

119
00:04:34,620 --> 00:04:37,199
like that user into all the sites that

120
00:04:37,199 --> 00:04:40,080
that the cookies still work for so I

121
00:04:40,080 --> 00:04:42,240
thought that was pretty interesting and

122
00:04:42,240 --> 00:04:43,560
now Chris is going to come in and talk

123
00:04:43,560 --> 00:04:45,720
about some additional living off the

124
00:04:45,720 --> 00:04:49,040
land binaries that are of Interest

125
00:04:49,440 --> 00:04:51,960
so the first tool or law bin that I want

126
00:04:51,960 --> 00:04:55,800
to talk about is dnssd

127
00:04:55,800 --> 00:04:58,380
this is a tool used to test the

128
00:04:58,380 --> 00:05:01,320
multicast DNS Discovery protocol or

129
00:05:01,320 --> 00:05:04,199
otherwise known as bonjour this is a

130
00:05:04,199 --> 00:05:06,060
protocol that is used by a lot of

131
00:05:06,060 --> 00:05:09,180
multimedia and home devices to broadcast

132
00:05:09,180 --> 00:05:11,699
services that are available you'll see

133
00:05:11,699 --> 00:05:14,040
this whenever you want to stream a video

134
00:05:14,040 --> 00:05:16,139
from your mobile phone to like your TV

135
00:05:16,139 --> 00:05:19,440
your TV is using mdns to broadcast that

136
00:05:19,440 --> 00:05:22,500
service so that your phone can see it

137
00:05:22,500 --> 00:05:24,180
and so this is a really cool protocol

138
00:05:24,180 --> 00:05:26,940
because it's quite noisy a lot of

139
00:05:26,940 --> 00:05:29,880
devices use it on local local links and

140
00:05:29,880 --> 00:05:32,580
so you'll see it on the network and it's

141
00:05:32,580 --> 00:05:34,380
very easy to blend in if you want to

142
00:05:34,380 --> 00:05:36,960
broadcast a service it doesn't look

143
00:05:36,960 --> 00:05:39,900
abnormal particularly

144
00:05:39,900 --> 00:05:43,560
but also you're able to listen and kind

145
00:05:43,560 --> 00:05:45,900
of get information about what services

146
00:05:45,900 --> 00:05:48,720
are available and I.E what ports are

147
00:05:48,720 --> 00:05:49,560
available

148
00:05:49,560 --> 00:05:52,080
so you can do things like listen for SSH

149
00:05:52,080 --> 00:05:55,979
or listen for HTTP or web you can listen

150
00:05:55,979 --> 00:05:57,900
for remote screen sharing which will

151
00:05:57,900 --> 00:06:00,840
help you identify other Mac OS endpoints

152
00:06:00,840 --> 00:06:02,880
on the environment at least the ones

153
00:06:02,880 --> 00:06:04,680
that have remote screen sharing enabled

154
00:06:04,680 --> 00:06:07,259
you can also use airtunes which is kind

155
00:06:07,259 --> 00:06:09,240
of neat because you'll identify both Mac

156
00:06:09,240 --> 00:06:12,900
endpoints and iOS devices

157
00:06:12,900 --> 00:06:15,660
so there are a lot of different Services

158
00:06:15,660 --> 00:06:19,160
you can listen for and use to identify

159
00:06:19,160 --> 00:06:22,080
potential avenues for a lateral movement

160
00:06:22,080 --> 00:06:24,960
or further attacks in an environment if

161
00:06:24,960 --> 00:06:28,319
you want to find other bonjour or mdns

162
00:06:28,319 --> 00:06:30,539
strings you can look at the link at the

163
00:06:30,539 --> 00:06:32,039
bottom of the slide

164
00:06:32,039 --> 00:06:33,780
there's a long list of strings you can

165
00:06:33,780 --> 00:06:36,120
use to identify services that are

166
00:06:36,120 --> 00:06:38,639
available and maybe find out what kind

167
00:06:38,639 --> 00:06:41,660
of devices on the network

168
00:06:42,900 --> 00:06:44,759
so the next law bin I want to talk about

169
00:06:44,759 --> 00:06:48,479
is Osa compile I listed this under code

170
00:06:48,479 --> 00:06:51,720
execution but technically it's not but

171
00:06:51,720 --> 00:06:54,120
you can use it to build an app bundle or

172
00:06:54,120 --> 00:06:55,860
some resulting file to then later

173
00:06:55,860 --> 00:06:58,680
execute so let's say compile is used to

174
00:06:58,680 --> 00:07:02,100
compile applescript or jxa JavaScript

175
00:07:02,100 --> 00:07:03,660
for automation

176
00:07:03,660 --> 00:07:06,900
into what's known as a script or dot

177
00:07:06,900 --> 00:07:11,580
scpt or application bundle

178
00:07:11,580 --> 00:07:13,979
so really the the resulting application

179
00:07:13,979 --> 00:07:16,919
bundle looks pretty identical to other

180
00:07:16,919 --> 00:07:19,080
app bundles you've seen used

181
00:07:19,080 --> 00:07:22,020
legitimately or in the wild except for a

182
00:07:22,020 --> 00:07:24,419
few distant differences or one or two

183
00:07:24,419 --> 00:07:26,639
differences and that's in the directory

184
00:07:26,639 --> 00:07:28,860
structure so if you look in the Mac OS

185
00:07:28,860 --> 00:07:30,780
folder you'll see that there's a main

186
00:07:30,780 --> 00:07:33,240
applet binary this is the the binary

187
00:07:33,240 --> 00:07:35,819
that runs your jxa code and that's

188
00:07:35,819 --> 00:07:37,560
always going to be called applet for

189
00:07:37,560 --> 00:07:38,940
whatever reason

190
00:07:38,940 --> 00:07:41,520
there's also a resources and then

191
00:07:41,520 --> 00:07:44,099
Scripps subdirectory and within that

192
00:07:44,099 --> 00:07:47,280
scripts folder there is a main.scpt file

193
00:07:47,280 --> 00:07:49,500
this is a file that contains either the

194
00:07:49,500 --> 00:07:52,500
applescript or jxa plain Source it's not

195
00:07:52,500 --> 00:07:55,319
obfuscated or encrypted in any way so if

196
00:07:55,319 --> 00:07:59,819
you're a sock analyst or IR person this

197
00:07:59,819 --> 00:08:03,120
is you can recover a source for a

198
00:08:03,120 --> 00:08:05,940
payload like this in that file

199
00:08:05,940 --> 00:08:07,740
and attackers you probably want to

200
00:08:07,740 --> 00:08:11,099
obfuscate or encrypt your jx8 payload in

201
00:08:11,099 --> 00:08:11,940
some way

202
00:08:11,940 --> 00:08:15,120
ideally I would use this within a post

203
00:08:15,120 --> 00:08:17,580
or pre-install script I'd just have a

204
00:08:17,580 --> 00:08:19,979
the package installer install the jxa

205
00:08:19,979 --> 00:08:22,680
file on disk somewhere and then use Osa

206
00:08:22,680 --> 00:08:24,900
compile in the post install to compile

207
00:08:24,900 --> 00:08:25,680
it

208
00:08:25,680 --> 00:08:27,840
now optionally you can change the icon

209
00:08:27,840 --> 00:08:30,960
with the icns or you can add the lsui

210
00:08:30,960 --> 00:08:33,659
element key in the info p list to hide

211
00:08:33,659 --> 00:08:37,640
the application from the dock and the UI

212
00:08:38,760 --> 00:08:41,159
all right so the next login I want to

213
00:08:41,159 --> 00:08:45,000
talk about is lldb and specifically lldb

214
00:08:45,000 --> 00:08:47,880
plugins I'm sure most of you already are

215
00:08:47,880 --> 00:08:50,100
familiar with lodb it's the native

216
00:08:50,100 --> 00:08:52,880
debugging tool for Mac OS

217
00:08:52,880 --> 00:08:55,380
not the greatest thing in the world it's

218
00:08:55,380 --> 00:08:58,200
command line based doesn't have a nice

219
00:08:58,200 --> 00:09:01,860
UI like winbag but it does have

220
00:09:01,860 --> 00:09:05,100
plugins and so you can automate some of

221
00:09:05,100 --> 00:09:07,320
the functionality like attaching the

222
00:09:07,320 --> 00:09:09,839
processes inspecting variables

223
00:09:09,839 --> 00:09:13,019
inspecting areas of memory or registers

224
00:09:13,019 --> 00:09:15,660
you can automate some of that with lodb

225
00:09:15,660 --> 00:09:18,600
plugins so what's nice about LGB lodb

226
00:09:18,600 --> 00:09:21,660
plugins is they have a dedicated I guess

227
00:09:21,660 --> 00:09:23,940
python package for it so if you go to

228
00:09:23,940 --> 00:09:25,680
the website and download one of their

229
00:09:25,680 --> 00:09:27,839
templates you can see that they give you

230
00:09:27,839 --> 00:09:30,839
a skeleton plugin to work with but you

231
00:09:30,839 --> 00:09:32,940
can also just use a vanilla python file

232
00:09:32,940 --> 00:09:35,820
can be anything as long as it can run in

233
00:09:35,820 --> 00:09:38,700
Python 3 it should be fine but

234
00:09:38,700 --> 00:09:40,260
essentially you want to install a plugin

235
00:09:40,260 --> 00:09:43,620
by creating a DOT lldb init file in the

236
00:09:43,620 --> 00:09:46,080
user's home directory save your python

237
00:09:46,080 --> 00:09:48,480
file or python payload somewhere on disk

238
00:09:48,480 --> 00:09:51,120
or somewhere accessible and then in that

239
00:09:51,120 --> 00:09:53,519
lodb init file you'll want to write the

240
00:09:53,519 --> 00:09:56,459
command command script import and then

241
00:09:56,459 --> 00:10:00,120
the path to your python payload

242
00:10:00,120 --> 00:10:03,600
so now whenever the user opens up lodb

243
00:10:03,600 --> 00:10:05,640
it'll run it'll load and execute your

244
00:10:05,640 --> 00:10:08,399
python code now the caveat with this is

245
00:10:08,399 --> 00:10:10,500
that you probably want to have if you're

246
00:10:10,500 --> 00:10:12,260
using like a

247
00:10:12,260 --> 00:10:15,180
malware payload you'll probably want to

248
00:10:15,180 --> 00:10:17,100
have the malware launch or execute in a

249
00:10:17,100 --> 00:10:19,380
background thread because if there are

250
00:10:19,380 --> 00:10:21,180
blocking calls and you're python payload

251
00:10:21,180 --> 00:10:24,240
it will halt the lodb process and wait

252
00:10:24,240 --> 00:10:27,899
for your function to to finish and so if

253
00:10:27,899 --> 00:10:30,060
the user is using xcode and they hit

254
00:10:30,060 --> 00:10:32,940
that play button to debug their app the

255
00:10:32,940 --> 00:10:34,980
lodb debugger will eventually time out

256
00:10:34,980 --> 00:10:36,899
because it's not able to connect to the

257
00:10:36,899 --> 00:10:39,180
lodb server because of your your plugin

258
00:10:39,180 --> 00:10:41,279
and so to be a little bit more stealthy

259
00:10:41,279 --> 00:10:43,440
you want to run your python code in a

260
00:10:43,440 --> 00:10:46,100
background thread

261
00:10:47,279 --> 00:10:49,079
so the next law bin that I'm going to

262
00:10:49,079 --> 00:10:52,079
talk about is a you Val tool in audio

263
00:10:52,079 --> 00:10:53,399
unit plugins

264
00:10:53,399 --> 00:10:56,100
if you are into music production or

265
00:10:56,100 --> 00:10:58,200
you're a DJ you like to create music

266
00:10:58,200 --> 00:10:59,880
you're probably familiar with these

267
00:10:59,880 --> 00:11:01,500
they're used for a lot of different

268
00:11:01,500 --> 00:11:04,440
things in audio production you can add

269
00:11:04,440 --> 00:11:06,720
sound effects to instruments you can

270
00:11:06,720 --> 00:11:09,300
create synthesizers you can do a lot of

271
00:11:09,300 --> 00:11:11,160
interesting things with audio unit

272
00:11:11,160 --> 00:11:13,800
plugins and are typically used in

273
00:11:13,800 --> 00:11:16,440
software like GarageBand audacity or

274
00:11:16,440 --> 00:11:17,880
Logic Pro

275
00:11:17,880 --> 00:11:20,160
but at the core of it they are just

276
00:11:20,160 --> 00:11:23,040
bundle files and so if you go and xcode

277
00:11:23,040 --> 00:11:25,500
and create a new project you'll see in

278
00:11:25,500 --> 00:11:27,959
the list of templates that bundle is an

279
00:11:27,959 --> 00:11:30,180
option so if you create a bundle project

280
00:11:30,180 --> 00:11:32,220
you'll notice it's a pretty empty

281
00:11:32,220 --> 00:11:33,899
project you'll have like an infop list

282
00:11:33,899 --> 00:11:36,480
and that's kind of it you'll also want

283
00:11:36,480 --> 00:11:38,940
to create an objective-c source file a

284
00:11:38,940 --> 00:11:41,160
main dot m or something in there to host

285
00:11:41,160 --> 00:11:43,140
your malicious code

286
00:11:43,140 --> 00:11:45,060
in that source file you'll want to

287
00:11:45,060 --> 00:11:47,399
define a function called a module

288
00:11:47,399 --> 00:11:49,620
initializer and so this is just a

289
00:11:49,620 --> 00:11:51,899
function that is executed whenever the

290
00:11:51,899 --> 00:11:54,480
bundle is loaded into a Val tool so

291
00:11:54,480 --> 00:11:55,740
that's where you want to have your

292
00:11:55,740 --> 00:11:57,839
malicious logic

293
00:11:57,839 --> 00:12:00,240
also in the info p list you'll have to

294
00:12:00,240 --> 00:12:03,899
add a few special keys these key values

295
00:12:03,899 --> 00:12:05,820
are arbitrary they don't necessarily

296
00:12:05,820 --> 00:12:08,160
have to be something specific but you do

297
00:12:08,160 --> 00:12:10,140
need to have these Keys set in the info

298
00:12:10,140 --> 00:12:13,560
p list this is how Au Val essentially

299
00:12:13,560 --> 00:12:16,560
parses your your audio plugin

300
00:12:16,560 --> 00:12:18,480
so you'll set the manufacturer the name

301
00:12:18,480 --> 00:12:21,000
the subtype and the type

302
00:12:21,000 --> 00:12:22,980
once all that's done you can build your

303
00:12:22,980 --> 00:12:25,560
project and then save your plugin in

304
00:12:25,560 --> 00:12:28,079
library audio plugins and components

305
00:12:28,079 --> 00:12:30,420
you'll save it there and then to invoke

306
00:12:30,420 --> 00:12:33,120
it or execute your code you'll run Au

307
00:12:33,120 --> 00:12:35,399
Val tool with attack a flag this will

308
00:12:35,399 --> 00:12:37,620
iterate through all the native system

309
00:12:37,620 --> 00:12:39,779
plugins and then also the third party

310
00:12:39,779 --> 00:12:42,600
ones and test each of those then once it

311
00:12:42,600 --> 00:12:44,339
hits your plugin it'll execute your code

312
00:12:44,339 --> 00:12:46,740
you can also run it with the attack V

313
00:12:46,740 --> 00:12:49,019
flag and pass in the type subtype and

314
00:12:49,019 --> 00:12:51,779
manufacturer arguments to load just your

315
00:12:51,779 --> 00:12:54,000
plugin it's a really awesome tool

316
00:12:54,000 --> 00:12:55,980
definitely recommend playing around with

317
00:12:55,980 --> 00:12:58,160
it

318
00:12:58,740 --> 00:13:00,720
so the last login that I'll talk about

319
00:13:00,720 --> 00:13:04,139
is Safari driver this is a binary that

320
00:13:04,139 --> 00:13:06,779
is used on Mac OS to start the selenium

321
00:13:06,779 --> 00:13:09,420
Webdriver API over

322
00:13:09,420 --> 00:13:12,839
an HTTP web server so the first time you

323
00:13:12,839 --> 00:13:15,000
run the binary you actually need to have

324
00:13:15,000 --> 00:13:18,779
sudo or root privileges and then pass in

325
00:13:18,779 --> 00:13:20,880
the enable flag on the command line This

326
00:13:20,880 --> 00:13:23,639
Will configure it or configure Safari

327
00:13:23,639 --> 00:13:25,500
driver for other sessions and then

328
00:13:25,500 --> 00:13:26,940
disable the requirement for

329
00:13:26,940 --> 00:13:28,860
Authentication

330
00:13:28,860 --> 00:13:32,459
now once the selenium Webdriver API is

331
00:13:32,459 --> 00:13:34,740
available this is and essentially it's

332
00:13:34,740 --> 00:13:36,600
just a web server that is listening on

333
00:13:36,600 --> 00:13:39,660
Port 80. but once it's available you can

334
00:13:39,660 --> 00:13:42,660
use any number of languages that support

335
00:13:42,660 --> 00:13:46,019
selenium or have selenium packages to

336
00:13:46,019 --> 00:13:48,000
interact with that API my personal

337
00:13:48,000 --> 00:13:50,519
favorite is rest

338
00:13:50,519 --> 00:13:53,480
and then you can use those apis to

339
00:13:53,480 --> 00:13:57,060
facilitate your C2 traffic or your

340
00:13:57,060 --> 00:13:59,459
traffic to download second stage malware

341
00:13:59,459 --> 00:14:03,240
now the caveat with this is is that once

342
00:14:03,240 --> 00:14:05,339
you start interacting with selenium it

343
00:14:05,339 --> 00:14:07,079
doesn't actually hide the browser the

344
00:14:07,079 --> 00:14:08,700
browser window actually comes to the

345
00:14:08,700 --> 00:14:10,560
front of the desktop in front of all the

346
00:14:10,560 --> 00:14:12,779
applications and it's visible in the

347
00:14:12,779 --> 00:14:16,500
dock and so the the at minimum you can

348
00:14:16,500 --> 00:14:19,620
minimize the window through the selenium

349
00:14:19,620 --> 00:14:20,940
API

350
00:14:20,940 --> 00:14:23,339
doesn't hide it from the dock but at

351
00:14:23,339 --> 00:14:26,220
least it's not in the user's face

352
00:14:26,220 --> 00:14:27,120
um

353
00:14:27,120 --> 00:14:30,839
also it's probably better for short-term

354
00:14:30,839 --> 00:14:34,079
or second stage malware downloads rather

355
00:14:34,079 --> 00:14:36,720
than long-term C2 because the app is

356
00:14:36,720 --> 00:14:38,639
going to be up and running and open and

357
00:14:38,639 --> 00:14:40,980
so the user may see it and say hey I

358
00:14:40,980 --> 00:14:42,300
didn't actually open this application

359
00:14:42,300 --> 00:14:44,699
they'll close it and then they'll try

360
00:14:44,699 --> 00:14:46,560
they'll see a prompt that says hey do

361
00:14:46,560 --> 00:14:48,300
you want to end the session and that

362
00:14:48,300 --> 00:14:50,399
looks kind of suspicious if if they

363
00:14:50,399 --> 00:14:52,740
didn't start the driver session

364
00:14:52,740 --> 00:14:53,940
themselves

365
00:14:53,940 --> 00:14:55,740
and so that's just something to keep in

366
00:14:55,740 --> 00:14:58,740
mind uh when using it but it is pretty

367
00:14:58,740 --> 00:15:00,779
useful for making web requests through

368
00:15:00,779 --> 00:15:03,779
the browser and having your c2coms go

369
00:15:03,779 --> 00:15:05,339
through the browser which it looks more

370
00:15:05,339 --> 00:15:07,880
legitimate

371
00:15:09,779 --> 00:15:12,060
awesome and uh so here's some references

372
00:15:12,060 --> 00:15:15,000
for some of the um items we pulled just

373
00:15:15,000 --> 00:15:16,980
for additional information you can look

374
00:15:16,980 --> 00:15:19,380
there and thank you all for your time

375
00:15:19,380 --> 00:15:21,420
feel free to reach out if you have any

376
00:15:21,420 --> 00:15:23,350
questions I want to talk more

377
00:15:23,350 --> 00:15:34,549
[Applause]

