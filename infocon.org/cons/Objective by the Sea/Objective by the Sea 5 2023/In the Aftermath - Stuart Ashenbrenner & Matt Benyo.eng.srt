1
00:00:00,659 --> 00:00:03,559
bye

2
00:00:07,919 --> 00:00:12,200
so when you are uh

3
00:00:12,840 --> 00:00:15,900
tasked with doing defense and you have a

4
00:00:15,900 --> 00:00:16,980
security incident that you need to

5
00:00:16,980 --> 00:00:18,779
investigate your investigation is really

6
00:00:18,779 --> 00:00:22,380
only going to be as good as the recency

7
00:00:22,380 --> 00:00:25,140
relevance and Fidelity of the artifacts

8
00:00:25,140 --> 00:00:26,400
you're able to collect so when something

9
00:00:26,400 --> 00:00:29,099
happens you need to get information as

10
00:00:29,099 --> 00:00:30,420
soon as possible and you need to know

11
00:00:30,420 --> 00:00:31,500
where to look

12
00:00:31,500 --> 00:00:33,840
so my name is Matt benyo I work on the

13
00:00:33,840 --> 00:00:36,899
jamf threat Labs team with Jaren and Sal

14
00:00:36,899 --> 00:00:39,360
who spoke this morning and also I'm

15
00:00:39,360 --> 00:00:41,700
joined by Stuart Stewart had a

16
00:00:41,700 --> 00:00:43,320
last-minute emergency wasn't able to

17
00:00:43,320 --> 00:00:45,719
make it so we've captured his soul and

18
00:00:45,719 --> 00:00:48,059
embedded it within this keynote where he

19
00:00:48,059 --> 00:00:51,239
will exist for many many years

20
00:00:51,239 --> 00:00:53,520
thanks Matt in our work at jamf we

21
00:00:53,520 --> 00:00:55,260
specialize in writing detections for Mac

22
00:00:55,260 --> 00:00:57,620
OS

23
00:01:00,300 --> 00:01:03,300
so at jamf as a company we make other

24
00:01:03,300 --> 00:01:06,000
products obviously other than the jam

25
00:01:06,000 --> 00:01:08,159
protect Mac OS detections that we do and

26
00:01:08,159 --> 00:01:10,920
these products enable teams to remediate

27
00:01:10,920 --> 00:01:13,439
and respond to the detections that we

28
00:01:13,439 --> 00:01:15,180
actually deliver to them

29
00:01:15,180 --> 00:01:17,280
but really the response other than

30
00:01:17,280 --> 00:01:19,799
things that were immediately blocking is

31
00:01:19,799 --> 00:01:22,080
really up to the customers or whoever

32
00:01:22,080 --> 00:01:24,000
they've outsourced that responsibility

33
00:01:24,000 --> 00:01:26,640
to and in many organizations whoever is

34
00:01:26,640 --> 00:01:28,979
at the console that responsibility has

35
00:01:28,979 --> 00:01:32,040
been outsourced to them so as we know in

36
00:01:32,040 --> 00:01:33,780
many cases in organizations especially

37
00:01:33,780 --> 00:01:36,420
smaller organizations admins are tasked

38
00:01:36,420 --> 00:01:39,060
with security responsibilities and you

39
00:01:39,060 --> 00:01:40,259
know if you think of an organization

40
00:01:40,259 --> 00:01:42,960
like a school a lot of times admins

41
00:01:42,960 --> 00:01:44,520
aren't going to necessarily know how to

42
00:01:44,520 --> 00:01:46,740
interpret certain types of alerts so in

43
00:01:46,740 --> 00:01:48,299
our work while we're building detections

44
00:01:48,299 --> 00:01:50,820
occasionally we'll receive these types

45
00:01:50,820 --> 00:01:53,340
of alerts from our support staff and

46
00:01:53,340 --> 00:01:55,140
they've are talking to us on behalf of a

47
00:01:55,140 --> 00:01:58,320
customer who is had an alert and looking

48
00:01:58,320 --> 00:02:00,000
to know what to do about it and if the

49
00:02:00,000 --> 00:02:01,619
support person doesn't know how to

50
00:02:01,619 --> 00:02:03,180
interpret that they'll come to us and

51
00:02:03,180 --> 00:02:05,939
obviously you know we it's outside the

52
00:02:05,939 --> 00:02:07,619
scope of what we do but obviously we

53
00:02:07,619 --> 00:02:09,060
want to do what's best for our customers

54
00:02:09,060 --> 00:02:10,440
so

55
00:02:10,440 --> 00:02:12,840
we get into a conversation we give our

56
00:02:12,840 --> 00:02:14,459
best guests a support support takes it

57
00:02:14,459 --> 00:02:15,780
back to the customer the customer is

58
00:02:15,780 --> 00:02:18,060
taking that to an end user and back and

59
00:02:18,060 --> 00:02:20,099
forth and support staff is caught in the

60
00:02:20,099 --> 00:02:21,720
middle and really it's a terrible

61
00:02:21,720 --> 00:02:23,040
experience especially for the support

62
00:02:23,040 --> 00:02:26,640
person so uh to make matters worse you

63
00:02:26,640 --> 00:02:28,560
know in the times where we do really get

64
00:02:28,560 --> 00:02:31,560
involved honestly a lot of the times by

65
00:02:31,560 --> 00:02:33,239
the time we're helping the customer it's

66
00:02:33,239 --> 00:02:36,480
been days or maybe weeks until the event

67
00:02:36,480 --> 00:02:38,879
happened and so the quality of the data

68
00:02:38,879 --> 00:02:41,580
we're able to get back is very low and

69
00:02:41,580 --> 00:02:42,720
obviously the customer doesn't always

70
00:02:42,720 --> 00:02:44,459
understand how those limitations work

71
00:02:44,459 --> 00:02:46,080
either so we decided to take matters

72
00:02:46,080 --> 00:02:48,660
into our own hands and went looking for

73
00:02:48,660 --> 00:02:50,700
Solutions so one of the first things we

74
00:02:50,700 --> 00:02:53,640
found was a tool built by crowdstrike

75
00:02:53,640 --> 00:02:56,340
called automactic and these are some of

76
00:02:56,340 --> 00:02:57,900
the modules that they have we took a lot

77
00:02:57,900 --> 00:03:00,900
of inspiration from those modules but

78
00:03:00,900 --> 00:03:02,580
one of the drawbacks was it was built in

79
00:03:02,580 --> 00:03:04,500
Python and since python is no longer

80
00:03:04,500 --> 00:03:06,120
natively installed in systems we felt

81
00:03:06,120 --> 00:03:07,920
like we needed to iterate on what they

82
00:03:07,920 --> 00:03:10,080
had done we also found another tool

83
00:03:10,080 --> 00:03:12,300
called tour it's an open source Swift

84
00:03:12,300 --> 00:03:14,819
project from Richie Cyrus Richie was

85
00:03:14,819 --> 00:03:16,379
actually my inspiration for getting into

86
00:03:16,379 --> 00:03:18,420
blue teaming when I met him at the first

87
00:03:18,420 --> 00:03:20,580
objective by the sea when he initially

88
00:03:20,580 --> 00:03:22,440
made it he was at spectrops now at Apple

89
00:03:22,440 --> 00:03:24,360
and unfortunately it hadn't been updated

90
00:03:24,360 --> 00:03:26,340
in quite some time

91
00:03:26,340 --> 00:03:28,260
ideally what we were looking for was

92
00:03:28,260 --> 00:03:29,640
something lightweight that could be

93
00:03:29,640 --> 00:03:31,920
installed on endpoints and be on standby

94
00:03:31,920 --> 00:03:34,980
for an automatic on-demand execution and

95
00:03:34,980 --> 00:03:36,780
collection at the moment our detections

96
00:03:36,780 --> 00:03:38,459
were being fired

97
00:03:38,459 --> 00:03:40,500
this would minimize unnecessary

98
00:03:40,500 --> 00:03:42,900
collection and accumulation of data but

99
00:03:42,900 --> 00:03:44,700
would also ensure the freshest possible

100
00:03:44,700 --> 00:03:46,739
snapshot of the system for instant

101
00:03:46,739 --> 00:03:49,940
response and investigation

102
00:03:51,720 --> 00:03:53,760
we mentioned that we wanted something

103
00:03:53,760 --> 00:03:56,099
native and didn't involve installing

104
00:03:56,099 --> 00:03:58,920
something like python on every system we

105
00:03:58,920 --> 00:04:00,659
also want to make sure it was performant

106
00:04:00,659 --> 00:04:03,239
a because the faster it runs the fresher

107
00:04:03,239 --> 00:04:05,819
the data is and B it would be an added

108
00:04:05,819 --> 00:04:07,440
bonus to be able to run it in the

109
00:04:07,440 --> 00:04:09,480
background with no apparent system

110
00:04:09,480 --> 00:04:11,939
slowdown for the user

111
00:04:11,939 --> 00:04:14,939
so it's fast it's maintainable it's

112
00:04:14,939 --> 00:04:17,579
native and it gives us the most access

113
00:04:17,579 --> 00:04:20,040
to built-in apis that allow us to really

114
00:04:20,040 --> 00:04:22,440
customize exactly the data we wanted to

115
00:04:22,440 --> 00:04:25,080
collect and analyze and frankly we know

116
00:04:25,080 --> 00:04:27,240
it's a bit of a flex but we've staked

117
00:04:27,240 --> 00:04:28,500
our business model on our Apple

118
00:04:28,500 --> 00:04:30,180
expertise and what better way to

119
00:04:30,180 --> 00:04:31,500
demonstrate that we understand the

120
00:04:31,500 --> 00:04:33,419
platform inside note than building

121
00:04:33,419 --> 00:04:35,520
something dope with Swift

122
00:04:35,520 --> 00:04:38,400
so we created aftermath aftermath is a

123
00:04:38,400 --> 00:04:41,100
swift-based open source IR framework

124
00:04:41,100 --> 00:04:43,139
designed to capture all the artifacts

125
00:04:43,139 --> 00:04:44,460
that are necessary to a proper

126
00:04:44,460 --> 00:04:45,600
investigation

127
00:04:45,600 --> 00:04:47,820
then subsequently to analyze the

128
00:04:47,820 --> 00:04:49,620
relevant data to determine the Threat

129
00:04:49,620 --> 00:04:51,300
Vector used as well as how we can best

130
00:04:51,300 --> 00:04:54,320
remediate the threat

131
00:04:54,600 --> 00:04:57,300
so aftermath has two primary components

132
00:04:57,300 --> 00:04:59,460
the first is the collection side so

133
00:04:59,460 --> 00:05:02,580
after math runs on the endpoint and

134
00:05:02,580 --> 00:05:04,979
collects as many cool and useful things

135
00:05:04,979 --> 00:05:06,780
as we could think of

136
00:05:06,780 --> 00:05:10,380
and then second is the analysis so for

137
00:05:10,380 --> 00:05:12,180
the most part getting a bunch of data is

138
00:05:12,180 --> 00:05:14,759
the easy part and we wanted to make it

139
00:05:14,759 --> 00:05:16,380
easier especially For Less experienced

140
00:05:16,380 --> 00:05:19,199
teams to extract meaning from that data

141
00:05:19,199 --> 00:05:21,120
and we also know that even for teams

142
00:05:21,120 --> 00:05:22,560
that are more experienced it can be

143
00:05:22,560 --> 00:05:25,080
really time consuming to make sense of a

144
00:05:25,080 --> 00:05:27,000
bunch of data that you've collected so

145
00:05:27,000 --> 00:05:29,759
we have taken it a step further so for

146
00:05:29,759 --> 00:05:31,139
the collection piece we feel that our

147
00:05:31,139 --> 00:05:32,580
collection feature is really robust

148
00:05:32,580 --> 00:05:34,560
we've got about a dozen modules that are

149
00:05:34,560 --> 00:05:37,440
broken into their own classes so we have

150
00:05:37,440 --> 00:05:40,759
things like We Gather persistence

151
00:05:40,759 --> 00:05:44,820
we also look for process information of

152
00:05:44,820 --> 00:05:46,500
currently running processes we do a lot

153
00:05:46,500 --> 00:05:49,940
of unified log searching

154
00:05:50,100 --> 00:05:52,919
and we also collect browser data and

155
00:05:52,919 --> 00:05:55,800
then beyond that we also collect uh do a

156
00:05:55,800 --> 00:05:57,600
system Recon which we'll talk about in a

157
00:05:57,600 --> 00:05:59,220
moment and then we collect some more

158
00:05:59,220 --> 00:06:01,860
General artifacts on the system so one

159
00:06:01,860 --> 00:06:03,900
of those more General artifacts would be

160
00:06:03,900 --> 00:06:06,960
something like the TCC database we

161
00:06:06,960 --> 00:06:10,800
capture a copy of the TCC database and

162
00:06:10,800 --> 00:06:13,139
having that gives us the ability to

163
00:06:13,139 --> 00:06:15,000
check out all the apps and the services

164
00:06:15,000 --> 00:06:17,400
that have been requested and granted

165
00:06:17,400 --> 00:06:21,419
special permissions on the system

166
00:06:21,419 --> 00:06:23,280
we collect relevant browser information

167
00:06:23,280 --> 00:06:25,319
like history and downloads to be able to

168
00:06:25,319 --> 00:06:27,479
determine potentially where the threat

169
00:06:27,479 --> 00:06:29,699
originated this can help you discover

170
00:06:29,699 --> 00:06:31,380
how the threat landed on the host

171
00:06:31,380 --> 00:06:33,720
machine so say we have the user's

172
00:06:33,720 --> 00:06:35,160
browser history in this case from

173
00:06:35,160 --> 00:06:37,259
Firefox we can see the user went to

174
00:06:37,259 --> 00:06:40,319
ponzi.com downloads then had to Google

175
00:06:40,319 --> 00:06:43,319
help I'm infected ended up at objective

176
00:06:43,319 --> 00:06:46,259
C's website on the products page it must

177
00:06:46,259 --> 00:06:48,000
have worked because less than half an

178
00:06:48,000 --> 00:06:49,800
hour later they Googled how to thank

179
00:06:49,800 --> 00:06:53,160
Objective C and then looks like became a

180
00:06:53,160 --> 00:06:55,740
patreon subscriber so what we could do

181
00:06:55,740 --> 00:06:57,419
after we have this information is

182
00:06:57,419 --> 00:06:59,699
potentially visit this website we could

183
00:06:59,699 --> 00:07:02,340
simply just copy and paste it and put it

184
00:07:02,340 --> 00:07:04,919
into the browser and visit it to see

185
00:07:04,919 --> 00:07:07,400
what it is

186
00:07:08,039 --> 00:07:10,139
and in this case it's a potentially

187
00:07:10,139 --> 00:07:12,240
unwanted program called Ponzi

188
00:07:12,240 --> 00:07:15,060
so in my opinion one of the most useful

189
00:07:15,060 --> 00:07:18,060
pieces is the collection of methods that

190
00:07:18,060 --> 00:07:20,759
we've dubbed system Recon

191
00:07:20,759 --> 00:07:23,880
so system Recon is a feature that tells

192
00:07:23,880 --> 00:07:24,840
administrators and Security

193
00:07:24,840 --> 00:07:26,460
Professionals a lot of useful

194
00:07:26,460 --> 00:07:28,259
information like Expert Tech versions

195
00:07:28,259 --> 00:07:30,860
airdrop status firewall

196
00:07:30,860 --> 00:07:33,560
system Integrity protection

197
00:07:33,560 --> 00:07:37,020
as well as things like file Vault being

198
00:07:37,020 --> 00:07:38,460
enabled screen sharing a lot of those

199
00:07:38,460 --> 00:07:40,080
things that you would check We Gather

200
00:07:40,080 --> 00:07:41,940
that all in one place including things

201
00:07:41,940 --> 00:07:44,039
like environment variables

202
00:07:44,039 --> 00:07:46,259
so once we have all this data both in

203
00:07:46,259 --> 00:07:49,259
raw and lightly parsed form we pivot to

204
00:07:49,259 --> 00:07:51,479
analysis

205
00:07:51,479 --> 00:07:54,599
so analysis is typically performed on a

206
00:07:54,599 --> 00:07:57,000
different machine than the victims we

207
00:07:57,000 --> 00:07:59,460
will gather the relevant information we

208
00:07:59,460 --> 00:08:01,500
can put it through an MDM or simply

209
00:08:01,500 --> 00:08:02,759
extract it

210
00:08:02,759 --> 00:08:04,860
and then bring it to a host machine for

211
00:08:04,860 --> 00:08:07,520
analysis

212
00:08:09,900 --> 00:08:12,300
this brings us to what we get in the end

213
00:08:12,300 --> 00:08:14,759
which is a storyline that tells us the

214
00:08:14,759 --> 00:08:16,620
entire story of the malware

215
00:08:16,620 --> 00:08:20,280
so what is this story for uh a new piece

216
00:08:20,280 --> 00:08:22,319
of malware

217
00:08:22,319 --> 00:08:25,379
so say we were just a user and we wanted

218
00:08:25,379 --> 00:08:26,819
to download

219
00:08:26,819 --> 00:08:29,340
Final Cut Pro to make some overproduced

220
00:08:29,340 --> 00:08:31,259
Tick Tock video

221
00:08:31,259 --> 00:08:32,760
but at the same time we don't want to

222
00:08:32,760 --> 00:08:34,919
drop the 300 it costs to buy a license

223
00:08:34,919 --> 00:08:37,979
so instead we elect to pirated not an

224
00:08:37,979 --> 00:08:39,958
uncommon thing to do and also not

225
00:08:39,958 --> 00:08:41,760
uncommon to get a bad case of malware

226
00:08:41,760 --> 00:08:44,718
while you're at it

227
00:08:45,180 --> 00:08:47,459
so we navigate over to Pirate Bay like

228
00:08:47,459 --> 00:08:50,399
it's 2010 and find a slick cracked

229
00:08:50,399 --> 00:08:53,279
version of it uh we download this using

230
00:08:53,279 --> 00:08:55,080
something like transmission

231
00:08:55,080 --> 00:08:58,260
we Mount the disk image that it arrives

232
00:08:58,260 --> 00:09:01,860
on our disk with and then inside that is

233
00:09:01,860 --> 00:09:03,420
the application and we go ahead and

234
00:09:03,420 --> 00:09:04,560
install it

235
00:09:04,560 --> 00:09:08,899
little did we know we got owned

236
00:09:12,120 --> 00:09:14,220
so the other thing that we didn't know

237
00:09:14,220 --> 00:09:16,980
is that when we downloaded this uh Final

238
00:09:16,980 --> 00:09:18,899
Cut That was cracked and launched it we

239
00:09:18,899 --> 00:09:22,019
were also launching a Bitcoin miner

240
00:09:22,019 --> 00:09:24,060
and this is a very sneaky piece of

241
00:09:24,060 --> 00:09:25,980
malware that we encountered we found

242
00:09:25,980 --> 00:09:28,560
that this Bitcoin miner when your fans

243
00:09:28,560 --> 00:09:30,300
fired up if you went to the activity

244
00:09:30,300 --> 00:09:32,760
monitor to check what was going on it

245
00:09:32,760 --> 00:09:34,620
would actually kill the the miners so

246
00:09:34,620 --> 00:09:37,800
you wouldn't be able to find it uh so we

247
00:09:37,800 --> 00:09:39,779
eventually get suspicious or you know in

248
00:09:39,779 --> 00:09:41,640
our case we triggered a Yara detection

249
00:09:41,640 --> 00:09:44,220
and so it's time to use aftermath to get

250
00:09:44,220 --> 00:09:45,779
to the bottom of what's going on on the

251
00:09:45,779 --> 00:09:46,740
system

252
00:09:46,740 --> 00:09:48,779
so we can either do this straight from

253
00:09:48,779 --> 00:09:51,240
the terminal or we can actually use an

254
00:09:51,240 --> 00:09:54,180
MDM so to take a brief detour into MDM

255
00:09:54,180 --> 00:09:56,580
land there are actually some really cool

256
00:09:56,580 --> 00:09:59,220
advantages of using MDM for this

257
00:09:59,220 --> 00:10:01,380
obviously we can use this to scale it

258
00:10:01,380 --> 00:10:04,260
out so this doesn't have to be used with

259
00:10:04,260 --> 00:10:06,180
Jam products this is an open source tool

260
00:10:06,180 --> 00:10:08,220
so a lot of these pieces are available

261
00:10:08,220 --> 00:10:09,839
in different products as well but the

262
00:10:09,839 --> 00:10:11,820
idea is you would have this running on

263
00:10:11,820 --> 00:10:14,640
your different endpoints and you can

264
00:10:14,640 --> 00:10:16,200
essentially automate the triggering and

265
00:10:16,200 --> 00:10:17,880
collection of this thing so for example

266
00:10:17,880 --> 00:10:19,800
if you run it from terminal you're going

267
00:10:19,800 --> 00:10:21,720
to need full disk access but the cool

268
00:10:21,720 --> 00:10:23,640
thing is if you trigger this from an MDM

269
00:10:23,640 --> 00:10:25,380
you actually run with the privilege of

270
00:10:25,380 --> 00:10:27,240
the MDM and so none of that stuff is

271
00:10:27,240 --> 00:10:29,760
required so just to show a brief demo of

272
00:10:29,760 --> 00:10:31,920
how this can kind of fit together let's

273
00:10:31,920 --> 00:10:33,839
say you you know for example we're just

274
00:10:33,839 --> 00:10:36,000
running like a reverse shell on a victim

275
00:10:36,000 --> 00:10:38,580
machine so the reverse shell runs it's

276
00:10:38,580 --> 00:10:40,920
going to trigger a detection in Jam

277
00:10:40,920 --> 00:10:44,160
protect that detection then puts this

278
00:10:44,160 --> 00:10:46,320
computer within a remediation group

279
00:10:46,320 --> 00:10:48,720
within the MDM

280
00:10:48,720 --> 00:10:50,519
as you'll see here in a moment sorry

281
00:10:50,519 --> 00:10:52,380
switching to that tab so it's in this

282
00:10:52,380 --> 00:10:54,420
remediation Group which kicks off the

283
00:10:54,420 --> 00:10:57,000
running of aftermath immediately upon

284
00:10:57,000 --> 00:10:59,459
this detection and that collection

285
00:10:59,459 --> 00:11:03,779
happens and the data is then uploaded to

286
00:11:03,779 --> 00:11:06,120
jamf Pro so you can see you know we have

287
00:11:06,120 --> 00:11:08,519
even the details of aftermath running so

288
00:11:08,519 --> 00:11:09,899
maybe if there was something that didn't

289
00:11:09,899 --> 00:11:11,579
run properly we have all that output

290
00:11:11,579 --> 00:11:15,360
available to us from it or security and

291
00:11:15,360 --> 00:11:16,680
then if we go into the inventory record

292
00:11:16,680 --> 00:11:19,680
we actually have the output of that file

293
00:11:19,680 --> 00:11:21,540
uploaded to the cloud so we don't even

294
00:11:21,540 --> 00:11:23,160
necessarily have to talk to the user

295
00:11:23,160 --> 00:11:24,779
about it so we can do all of our

296
00:11:24,779 --> 00:11:27,000
analysis right then and there and that

297
00:11:27,000 --> 00:11:29,040
data is going to be as fresh as possible

298
00:11:29,040 --> 00:11:31,740
in our case we ran it from the command

299
00:11:31,740 --> 00:11:33,959
line you can see using that deep

300
00:11:33,959 --> 00:11:35,940
argument that we're actually scanning

301
00:11:35,940 --> 00:11:38,459
the entire user's home directory

302
00:11:38,459 --> 00:11:41,100
collecting the timestamp metadata on

303
00:11:41,100 --> 00:11:42,779
each file as opposed to just the default

304
00:11:42,779 --> 00:11:44,820
directories that are most commonly

305
00:11:44,820 --> 00:11:46,920
associated with malware

306
00:11:46,920 --> 00:11:48,899
fortunately I have it on good authority

307
00:11:48,899 --> 00:11:51,480
that this Miner actually does a lot of

308
00:11:51,480 --> 00:11:54,060
this nefariousness in the user's

309
00:11:54,060 --> 00:11:56,459
application support directory whose time

310
00:11:56,459 --> 00:11:59,220
stamps we actually collect by default so

311
00:11:59,220 --> 00:12:00,779
for the sake of this example we can

312
00:12:00,779 --> 00:12:04,100
ignore this deep argument

313
00:12:05,100 --> 00:12:07,680
you can also run the collect durers

314
00:12:07,680 --> 00:12:10,140
argument and actually dump the raw

315
00:12:10,140 --> 00:12:12,000
contents of whichever directories you

316
00:12:12,000 --> 00:12:14,399
pass it so if we want to actually grab

317
00:12:14,399 --> 00:12:16,620
all the files from Temp and downloads we

318
00:12:16,620 --> 00:12:17,399
could

319
00:12:17,399 --> 00:12:19,680
of course use this at your discretion

320
00:12:19,680 --> 00:12:21,360
because heaven forbid the user just

321
00:12:21,360 --> 00:12:23,820
download the latest xcode beta and has a

322
00:12:23,820 --> 00:12:26,339
nice eight gig file in there or maybe

323
00:12:26,339 --> 00:12:27,420
they just haven't cleaned up their

324
00:12:27,420 --> 00:12:30,779
downloads since 1970.

325
00:12:30,779 --> 00:12:32,399
in the case we run directly from

326
00:12:32,399 --> 00:12:34,260
terminal like this we get a nice output

327
00:12:34,260 --> 00:12:36,540
of what aftermath is doing

328
00:12:36,540 --> 00:12:38,519
we can fast forward through some of this

329
00:12:38,519 --> 00:12:40,200
so we can actually get to what I think

330
00:12:40,200 --> 00:12:42,360
is one of the coolest parts

331
00:12:42,360 --> 00:12:44,459
now once all the collection details are

332
00:12:44,459 --> 00:12:46,920
on disk let's take a look at what we've

333
00:12:46,920 --> 00:12:48,240
collected

334
00:12:48,240 --> 00:12:50,519
and pretty simply we can either do this

335
00:12:50,519 --> 00:12:52,079
from the command line or directly from

336
00:12:52,079 --> 00:12:55,139
finder if we pop open the folder in

337
00:12:55,139 --> 00:12:58,079
finder we can then unzip that archive

338
00:12:58,079 --> 00:13:01,740
and dive deeper into the data

339
00:13:01,740 --> 00:13:03,600
so these are the raw files but we can

340
00:13:03,600 --> 00:13:05,220
actually do a bit more with this with

341
00:13:05,220 --> 00:13:07,860
the analysis function of aftermath so if

342
00:13:07,860 --> 00:13:10,139
we take our zipped up contents and pass

343
00:13:10,139 --> 00:13:11,579
that as an argument to the program

344
00:13:11,579 --> 00:13:14,579
running sudo aftermath analyze we start

345
00:13:14,579 --> 00:13:18,120
to get this anal analysis happening so

346
00:13:18,120 --> 00:13:20,220
after math we'll start analyzing all the

347
00:13:20,220 --> 00:13:22,200
data that's collected and since we

348
00:13:22,200 --> 00:13:23,940
didn't specify an output location it's

349
00:13:23,940 --> 00:13:25,440
going to land here in the temp directory

350
00:13:25,440 --> 00:13:28,079
and we can see some of the different CSV

351
00:13:28,079 --> 00:13:29,760
files that are generated here and so

352
00:13:29,760 --> 00:13:31,440
we'll start with one of the two

353
00:13:31,440 --> 00:13:33,720
databases which is TCC so if we pop this

354
00:13:33,720 --> 00:13:36,000
open we can actually see the parts you

355
00:13:36,000 --> 00:13:37,440
can see that when we can parse the TCC

356
00:13:37,440 --> 00:13:39,839
information we get the most important

357
00:13:39,839 --> 00:13:43,079
information back we can see which client

358
00:13:43,079 --> 00:13:45,779
made the request based on their bundle

359
00:13:45,779 --> 00:13:46,680
ID

360
00:13:46,680 --> 00:13:48,600
we can also see what service they were

361
00:13:48,600 --> 00:13:50,100
requesting whether it was full disk

362
00:13:50,100 --> 00:13:52,320
access the address book or different

363
00:13:52,320 --> 00:13:54,480
folder accesses or even things like the

364
00:13:54,480 --> 00:13:55,980
camera and mic

365
00:13:55,980 --> 00:13:58,560
we can see what happened was it allowed

366
00:13:58,560 --> 00:14:01,260
or denied

367
00:14:01,260 --> 00:14:04,079
and of course we can see the reason so

368
00:14:04,079 --> 00:14:06,540
was this set by MDM was this user

369
00:14:06,540 --> 00:14:09,240
consent or system set

370
00:14:09,240 --> 00:14:12,420
this all maps over nicely to this set of

371
00:14:12,420 --> 00:14:14,459
enums here that we actually have in the

372
00:14:14,459 --> 00:14:16,200
database it's compiled from a different

373
00:14:16,200 --> 00:14:18,180
Source but if you scroll through these

374
00:14:18,180 --> 00:14:20,459
you can see it's quite robust in how we

375
00:14:20,459 --> 00:14:23,119
map these over

376
00:14:23,600 --> 00:14:26,399
of course lastly but not least we can

377
00:14:26,399 --> 00:14:28,019
see when this was last modified which is

378
00:14:28,019 --> 00:14:29,459
really important when we're parsing the

379
00:14:29,459 --> 00:14:31,699
output

380
00:14:32,220 --> 00:14:35,459
for example we can see that this app

381
00:14:35,459 --> 00:14:37,500
called qlab based on this bundle

382
00:14:37,500 --> 00:14:39,420
identifier which is used for making

383
00:14:39,420 --> 00:14:41,279
audio cues we can see that the camera

384
00:14:41,279 --> 00:14:44,399
and my requested access right around the

385
00:14:44,399 --> 00:14:47,820
same time and that the user me denied

386
00:14:47,820 --> 00:14:51,540
the former and allowed the latter

387
00:14:51,540 --> 00:14:54,000
so one of the unforeseen challenges of

388
00:14:54,000 --> 00:14:56,279
this product project was the scattered

389
00:14:56,279 --> 00:14:58,560
nature of the different time stamp

390
00:14:58,560 --> 00:15:00,899
formats in Mac OS so some of the

391
00:15:00,899 --> 00:15:03,600
databases and apps use Mac absolute time

392
00:15:03,600 --> 00:15:05,940
others use Epoch some use local time so

393
00:15:05,940 --> 00:15:08,459
in this process we standardize all these

394
00:15:08,459 --> 00:15:10,320
timestamps so that we can accurately

395
00:15:10,320 --> 00:15:12,240
organize everything into a chronological

396
00:15:12,240 --> 00:15:15,180
storyline for analysis so going back to

397
00:15:15,180 --> 00:15:17,100
our example of the final cut trojanice

398
00:15:17,100 --> 00:15:19,380
with a minor aftermath did its

399
00:15:19,380 --> 00:15:21,000
collection after the miner triggered one

400
00:15:21,000 --> 00:15:23,040
of our Yara rules and let's take a look

401
00:15:23,040 --> 00:15:25,019
at how aftermath is able to piece

402
00:15:25,019 --> 00:15:26,760
together this story co-editing these

403
00:15:26,760 --> 00:15:28,440
timestamps of these different artifact

404
00:15:28,440 --> 00:15:30,660
sources

405
00:15:30,660 --> 00:15:34,019
so once we're looking at this file uh in

406
00:15:34,019 --> 00:15:35,820
this timeline a few things start to jump

407
00:15:35,820 --> 00:15:38,399
out we can see we've got in the Safari

408
00:15:38,399 --> 00:15:40,260
history we see the visit to the Pirate

409
00:15:40,260 --> 00:15:43,680
Bay up a few lines we can see uh clearly

410
00:15:43,680 --> 00:15:46,019
the download of a torrent and then

411
00:15:46,019 --> 00:15:48,779
further up we can see evidence of the

412
00:15:48,779 --> 00:15:52,880
transfer taking place of that download

413
00:15:53,940 --> 00:15:55,680
and as we move further up it starts to

414
00:15:55,680 --> 00:15:57,060
get a little bit more interesting we

415
00:15:57,060 --> 00:16:01,139
start to see some unusual uh activity in

416
00:16:01,139 --> 00:16:02,880
the application support directory so

417
00:16:02,880 --> 00:16:07,079
this i2pd so when we've initially found

418
00:16:07,079 --> 00:16:08,579
this we didn't know what this was so we

419
00:16:08,579 --> 00:16:11,279
we looked into it and it turns out i2p

420
00:16:11,279 --> 00:16:15,019
is i2pd is the i2p

421
00:16:15,019 --> 00:16:19,440
Daemon so i2p is actually lesser known

422
00:16:19,440 --> 00:16:21,240
at least to us an anonymous Network

423
00:16:21,240 --> 00:16:23,279
layer that allows Anonymous end-to-end

424
00:16:23,279 --> 00:16:25,440
encrypted communication so this malware

425
00:16:25,440 --> 00:16:28,320
was doing all this crazy encrypted

426
00:16:28,320 --> 00:16:30,240
activity in the application support

427
00:16:30,240 --> 00:16:33,300
directory so even if the admin isn't

428
00:16:33,300 --> 00:16:35,519
necessarily able to make sense of this

429
00:16:35,519 --> 00:16:37,620
data when they get a hold of someone who

430
00:16:37,620 --> 00:16:39,839
can they're going to have valuable and

431
00:16:39,839 --> 00:16:42,839
relevant data to share that is Timely

432
00:16:42,839 --> 00:16:44,880
so looking forward what are some things

433
00:16:44,880 --> 00:16:46,680
we want to do with version two I think

434
00:16:46,680 --> 00:16:47,880
it's important to kind of have these

435
00:16:47,880 --> 00:16:51,120
mapped out so first up we want to allow

436
00:16:51,120 --> 00:16:53,040
and integrate uploading of the

437
00:16:53,040 --> 00:16:55,320
collection and analyst file analysis

438
00:16:55,320 --> 00:16:58,079
files to S3

439
00:16:58,079 --> 00:16:59,639
we want to collect the extended

440
00:16:59,639 --> 00:17:02,279
attributes of the of different files

441
00:17:02,279 --> 00:17:04,980
especially files we're collecting

442
00:17:04,980 --> 00:17:07,260
and also pivot off P lists so if we

443
00:17:07,260 --> 00:17:09,179
collect the P list say this one for

444
00:17:09,179 --> 00:17:11,459
block block from Objective C we want to

445
00:17:11,459 --> 00:17:13,260
be able to reach out to that exact

446
00:17:13,260 --> 00:17:15,000
location of the binary

447
00:17:15,000 --> 00:17:16,919
and be able to Pivot and grab that as

448
00:17:16,919 --> 00:17:17,579
well

449
00:17:17,579 --> 00:17:18,900
those are a few things we're looking

450
00:17:18,900 --> 00:17:21,679
forward to coming up

451
00:17:22,980 --> 00:17:25,140
so that's a little about how aftermath

452
00:17:25,140 --> 00:17:27,119
is going to change the IR gain for Max

453
00:17:27,119 --> 00:17:30,540
it's in Swift performant and helpful to

454
00:17:30,540 --> 00:17:33,120
anyone responding to a threat and is

455
00:17:33,120 --> 00:17:36,179
open sourced today so feel free to check

456
00:17:36,179 --> 00:17:40,320
out the aftermath project on GitHub and

457
00:17:40,320 --> 00:17:43,520
it is available now

458
00:17:45,539 --> 00:17:47,960
so uh sorry just a couple of

459
00:17:47,960 --> 00:17:51,360
acknowledgments uh so Stewart really

460
00:17:51,360 --> 00:17:52,919
took the lead on this he was definitely

461
00:17:52,919 --> 00:17:55,440
the lead developer our team definitely

462
00:17:55,440 --> 00:17:57,480
contributed Maggie who is also here was

463
00:17:57,480 --> 00:18:00,840
definitely a major source of help on

464
00:18:00,840 --> 00:18:03,480
some of the Swift stuff and also a shout

465
00:18:03,480 --> 00:18:06,000
out to our Sensei Jaren we took a lot of

466
00:18:06,000 --> 00:18:07,679
the ideas in his book OS and incident

467
00:18:07,679 --> 00:18:10,020
response and as I already spoiled the

468
00:18:10,020 --> 00:18:11,760
surprise on this one so again the link

469
00:18:11,760 --> 00:18:13,440
to the GitHub if you want to talk to

470
00:18:13,440 --> 00:18:15,600
Stuart about any of the coding stuff but

471
00:18:15,600 --> 00:18:17,160
when we started this it was really just

472
00:18:17,160 --> 00:18:19,500
kind of a ambiguous on-the-clock off the

473
00:18:19,500 --> 00:18:22,260
clock kind of passion project and in

474
00:18:22,260 --> 00:18:24,000
honor of the ASCII art that we are not

475
00:18:24,000 --> 00:18:25,440
allowed to show you I thought I would

476
00:18:25,440 --> 00:18:28,380
just provide the the notice there that

477
00:18:28,380 --> 00:18:31,080
was told to ask us to take that down so

478
00:18:31,080 --> 00:18:33,360
um please check out the GitHub we

479
00:18:33,360 --> 00:18:35,460
welcome your feedback in any

480
00:18:35,460 --> 00:18:37,140
contributions

481
00:18:37,140 --> 00:18:39,059
um to that with pull requests thank you

482
00:18:39,059 --> 00:18:41,360
so much

483
00:18:41,820 --> 00:18:44,820
foreign

