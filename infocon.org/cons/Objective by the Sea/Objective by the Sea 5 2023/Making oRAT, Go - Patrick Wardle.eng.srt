1
00:00:00,659 --> 00:00:03,559
bye

2
00:00:08,160 --> 00:00:11,160
all right welcome to my talk making a

3
00:00:11,160 --> 00:00:13,200
rat go

4
00:00:13,200 --> 00:00:15,199
today we're going to be looking at

5
00:00:15,199 --> 00:00:17,760
analyzing a very interesting piece of

6
00:00:17,760 --> 00:00:20,100
Mac malware but the way we're going to

7
00:00:20,100 --> 00:00:21,779
do this is slightly different

8
00:00:21,779 --> 00:00:24,119
essentially we're going to create a

9
00:00:24,119 --> 00:00:26,279
custom and command and control server

10
00:00:26,279 --> 00:00:29,580
and then basically ask the malware the

11
00:00:29,580 --> 00:00:31,800
right questions so that it reveals its

12
00:00:31,800 --> 00:00:33,540
capabilities to us

13
00:00:33,540 --> 00:00:34,500
so we're going to start with some

14
00:00:34,500 --> 00:00:36,239
background information we're going to

15
00:00:36,239 --> 00:00:37,680
talk about the configuration and the

16
00:00:37,680 --> 00:00:39,420
protocol of the malware as I mentioned

17
00:00:39,420 --> 00:00:40,559
then we're going to talk about how to

18
00:00:40,559 --> 00:00:41,820
create a custom command and control

19
00:00:41,820 --> 00:00:43,739
server and ultimately reveal the

20
00:00:43,739 --> 00:00:46,020
capabilities that way

21
00:00:46,020 --> 00:00:48,539
so first some background information on

22
00:00:48,539 --> 00:00:50,219
this threat

23
00:00:50,219 --> 00:00:52,739
earlier this year researchers at Trend

24
00:00:52,739 --> 00:00:56,820
Micro uncovered a new apt group and the

25
00:00:56,820 --> 00:00:58,920
interesting thing to me about this apt

26
00:00:58,920 --> 00:01:00,840
group was that they had Mac OS

27
00:01:00,840 --> 00:01:03,239
capabilities specifically a new Mac

28
00:01:03,239 --> 00:01:06,600
malware called o rat

29
00:01:06,600 --> 00:01:09,720
now Trend Micro and Sentinel one did

30
00:01:09,720 --> 00:01:13,560
some analysis of this malware sample but

31
00:01:13,560 --> 00:01:16,260
it was largely a triage so yes they

32
00:01:16,260 --> 00:01:18,540
identified the infection Vector they

33
00:01:18,540 --> 00:01:20,580
talked about the configuration

34
00:01:20,580 --> 00:01:22,920
information I did mention some likely

35
00:01:22,920 --> 00:01:25,619
capabilities as we can see by the quote

36
00:01:25,619 --> 00:01:27,060
on the slide they ran into some

37
00:01:27,060 --> 00:01:28,979
difficulties getting the malware running

38
00:01:28,979 --> 00:01:32,040
so a lot of their analysis was somewhat

39
00:01:32,040 --> 00:01:34,920
high level based on static analysis I

40
00:01:34,920 --> 00:01:36,119
prefer Dynamic analysis because

41
00:01:36,119 --> 00:01:38,100
ultimately you can confer the

42
00:01:38,100 --> 00:01:39,720
capabilities so what we're going to do

43
00:01:39,720 --> 00:01:41,280
is we're going to build upon their

44
00:01:41,280 --> 00:01:44,040
analysis to comprehensively confirm

45
00:01:44,040 --> 00:01:46,020
their findings and get to the bottom of

46
00:01:46,020 --> 00:01:46,860
this

47
00:01:46,860 --> 00:01:48,659
now as I mentioned in the introduction

48
00:01:48,659 --> 00:01:51,060
our approach is kind of different many

49
00:01:51,060 --> 00:01:52,140
of you have probably done malware

50
00:01:52,140 --> 00:01:54,360
analysis but not via this approach I

51
00:01:54,360 --> 00:01:55,500
like this approach it's a little more

52
00:01:55,500 --> 00:01:56,759
interesting and I believe it's

53
00:01:56,759 --> 00:01:59,460
ultimately more efficient

54
00:01:59,460 --> 00:02:01,380
so the general idea is as follows we're

55
00:02:01,380 --> 00:02:02,700
basically going to get the malware to

56
00:02:02,700 --> 00:02:03,899
connect out to a command and control

57
00:02:03,899 --> 00:02:06,659
server we control we're then going to

58
00:02:06,659 --> 00:02:09,479
task the malware give it commands to

59
00:02:09,479 --> 00:02:10,619
execute

60
00:02:10,619 --> 00:02:12,480
on the system where the malware is

61
00:02:12,480 --> 00:02:14,220
running the victim the infected host

62
00:02:14,220 --> 00:02:15,660
we're also going to run various

63
00:02:15,660 --> 00:02:18,060
monitoring tools process monitors file

64
00:02:18,060 --> 00:02:20,700
monitors Network monitors to observe how

65
00:02:20,700 --> 00:02:23,280
the malware responds to our tasking if

66
00:02:23,280 --> 00:02:24,900
we task it correctly we'll be able to

67
00:02:24,900 --> 00:02:27,420
see exactly what it does and also then

68
00:02:27,420 --> 00:02:29,220
it should respond to our custom command

69
00:02:29,220 --> 00:02:30,980
and control server with its results

70
00:02:30,980 --> 00:02:33,420
allowing us again to comprehensively

71
00:02:33,420 --> 00:02:35,160
understand the capabilities of the

72
00:02:35,160 --> 00:02:37,620
malware without actually having to do a

73
00:02:37,620 --> 00:02:39,959
ton of reverse engineering

74
00:02:39,959 --> 00:02:41,280
now obviously there are some

75
00:02:41,280 --> 00:02:43,019
prerequisites for these there's three

76
00:02:43,019 --> 00:02:45,239
specific ones first we have to figure

77
00:02:45,239 --> 00:02:48,420
out a way to reconfigure the malware or

78
00:02:48,420 --> 00:02:50,459
get it to talk to our Command and

79
00:02:50,459 --> 00:02:53,099
control server instead of obviously the

80
00:02:53,099 --> 00:02:54,660
attackers one

81
00:02:54,660 --> 00:02:56,580
second we have to at least understand

82
00:02:56,580 --> 00:02:59,220
the protocol of the malware so that when

83
00:02:59,220 --> 00:03:00,720
it does connect to our Command and

84
00:03:00,720 --> 00:03:03,180
control server we can ask it the right

85
00:03:03,180 --> 00:03:06,599
questions to coerce it to perform its

86
00:03:06,599 --> 00:03:08,459
actions on our behalf revealing its

87
00:03:08,459 --> 00:03:09,420
capabilities

88
00:03:09,420 --> 00:03:11,099
and third as I mentioned we are going to

89
00:03:11,099 --> 00:03:13,200
need modern monitoring tools so we can

90
00:03:13,200 --> 00:03:15,060
observe the malware in action but good

91
00:03:15,060 --> 00:03:17,280
news we can use objective C's command

92
00:03:17,280 --> 00:03:20,700
line utilities to perform this

93
00:03:20,700 --> 00:03:22,379
now anytime I get a new Mac malware

94
00:03:22,379 --> 00:03:24,000
sample I like to perform some basic

95
00:03:24,000 --> 00:03:25,560
triage this is going to be similar to

96
00:03:25,560 --> 00:03:27,659
what Kristen talked about so before we

97
00:03:27,659 --> 00:03:29,640
go into diving too deeply in the malware

98
00:03:29,640 --> 00:03:32,340
let's do some basic triage we want to

99
00:03:32,340 --> 00:03:34,260
figure out things like it's file type

100
00:03:34,260 --> 00:03:37,080
code signing information and also run

101
00:03:37,080 --> 00:03:39,540
the strings utility to see if anything

102
00:03:39,540 --> 00:03:42,180
interesting pops out

103
00:03:42,180 --> 00:03:43,980
running the file command we can see it's

104
00:03:43,980 --> 00:03:45,780
a mock o binary this is important to

105
00:03:45,780 --> 00:03:47,879
know because a lot of static and dynamic

106
00:03:47,879 --> 00:03:50,040
analysis tools are file type specific if

107
00:03:50,040 --> 00:03:52,019
this malware was a compiled python

108
00:03:52,019 --> 00:03:53,640
script we would end up using different

109
00:03:53,640 --> 00:03:55,319
analysis tools

110
00:03:55,319 --> 00:03:56,819
in terms of the strings there's really

111
00:03:56,819 --> 00:03:59,040
not too much except for the fact that

112
00:03:59,040 --> 00:04:00,780
the malware does appear to be packed by

113
00:04:00,780 --> 00:04:03,900
upx when an item is packed the upx

114
00:04:03,900 --> 00:04:06,720
strings are added into its strings

115
00:04:06,720 --> 00:04:08,640
and finally using what's your sign we

116
00:04:08,640 --> 00:04:10,620
can see that this item is unsigned so

117
00:04:10,620 --> 00:04:14,280
tldr we have a packed 64-bit mock o

118
00:04:14,280 --> 00:04:15,900
binary

119
00:04:15,900 --> 00:04:18,238
now anytime you have a malware sample

120
00:04:18,238 --> 00:04:19,918
that's packed you're going to want to

121
00:04:19,918 --> 00:04:22,079
unpack it first because what Packers are

122
00:04:22,079 --> 00:04:24,060
essentially obvious skaters or

123
00:04:24,060 --> 00:04:25,800
encrypters that take all the binary

124
00:04:25,800 --> 00:04:28,320
compress and encrypt it forwarding

125
00:04:28,320 --> 00:04:30,000
static and often Dynamic analysis so

126
00:04:30,000 --> 00:04:32,820
step one you want to unpack the sample

127
00:04:32,820 --> 00:04:35,220
luckily binaries that are packed with

128
00:04:35,220 --> 00:04:37,860
upx are trivial to unpack you just rerun

129
00:04:37,860 --> 00:04:40,740
the upx binary with the Dash D flag

130
00:04:40,740 --> 00:04:42,540
give it the path to the item you want to

131
00:04:42,540 --> 00:04:44,280
unpack and it will be unpacked

132
00:04:44,280 --> 00:04:46,560
interestingly we can see on the slide

133
00:04:46,560 --> 00:04:49,080
that the item unpacks to almost 10

134
00:04:49,080 --> 00:04:52,139
megabytes that's huge

135
00:04:52,139 --> 00:04:54,120
now that the item is packed we can do

136
00:04:54,120 --> 00:04:56,160
some more triage one of the things I

137
00:04:56,160 --> 00:04:58,320
like to do is look at dependencies this

138
00:04:58,320 --> 00:04:59,699
is something Kristin talked about as

139
00:04:59,699 --> 00:05:01,919
well this often can tell you what

140
00:05:01,919 --> 00:05:04,020
dynamic libraries the malware is going

141
00:05:04,020 --> 00:05:06,780
to leverage or utilize for example if

142
00:05:06,780 --> 00:05:08,400
it's linked against the AV Foundation

143
00:05:08,400 --> 00:05:11,520
framework it's likely going to abuse the

144
00:05:11,520 --> 00:05:14,040
the user's webcam or microphone

145
00:05:14,040 --> 00:05:16,680
well if we run dependencies extract the

146
00:05:16,680 --> 00:05:18,840
dependencies from orap we can see that

147
00:05:18,840 --> 00:05:20,820
it's really not that much that's pretty

148
00:05:20,820 --> 00:05:22,500
strange

149
00:05:22,500 --> 00:05:24,660
but if we run the strings command again

150
00:05:24,660 --> 00:05:26,580
now that it's unpacked we can see what

151
00:05:26,580 --> 00:05:29,940
appear to be a large number of static

152
00:05:29,940 --> 00:05:31,860
dependencies static dependencies are

153
00:05:31,860 --> 00:05:33,300
third-party libraries that have been

154
00:05:33,300 --> 00:05:36,000
statically compiled into the binary this

155
00:05:36,000 --> 00:05:37,440
is one of the reasons the binary is so

156
00:05:37,440 --> 00:05:39,780
large and based on those strings we can

157
00:05:39,780 --> 00:05:42,000
get some sense of what the malware might

158
00:05:42,000 --> 00:05:44,699
do for example we see dependencies

159
00:05:44,699 --> 00:05:47,280
related to networking demonization and

160
00:05:47,280 --> 00:05:50,340
cryptography also looking at the paths

161
00:05:50,340 --> 00:05:51,900
from the dependencies it looks like

162
00:05:51,900 --> 00:05:53,940
maybe some of these are written in the

163
00:05:53,940 --> 00:05:56,340
go programming language

164
00:05:56,340 --> 00:05:58,440
so now we're going to do a brief tangent

165
00:05:58,440 --> 00:05:59,940
we're going to talk about reverse

166
00:05:59,940 --> 00:06:02,759
engineering binaries that are written in

167
00:06:02,759 --> 00:06:05,580
go in Lexi and Lucha's presentation they

168
00:06:05,580 --> 00:06:07,020
mentioned some of wizard updates

169
00:06:07,020 --> 00:06:08,880
components were written and go as well

170
00:06:08,880 --> 00:06:10,560
so this is kind of a trend we're seeing

171
00:06:10,560 --> 00:06:12,479
and it's important to talk about this

172
00:06:12,479 --> 00:06:14,460
because there are some nuances or

173
00:06:14,460 --> 00:06:16,860
challenging challenges when reverse

174
00:06:16,860 --> 00:06:18,300
engineering binaries that were written

175
00:06:18,300 --> 00:06:19,680
in go

176
00:06:19,680 --> 00:06:21,180
good news is there's some great

177
00:06:21,180 --> 00:06:23,340
resources so if you're new to reverse

178
00:06:23,340 --> 00:06:26,100
engineering go which I was I found these

179
00:06:26,100 --> 00:06:28,319
very useful

180
00:06:28,319 --> 00:06:30,120
so first off might be wondering how do

181
00:06:30,120 --> 00:06:33,060
we know that a binary is compiled from

182
00:06:33,060 --> 00:06:34,860
go source code turns out it's pretty

183
00:06:34,860 --> 00:06:37,500
easy there's going to be a go build ID

184
00:06:37,500 --> 00:06:39,600
embedded in the binary so if you run the

185
00:06:39,600 --> 00:06:41,340
strings command once it's been unpacked

186
00:06:41,340 --> 00:06:44,460
you will see that also if you throw the

187
00:06:44,460 --> 00:06:46,860
binary in a disassembler or decompiler

188
00:06:46,860 --> 00:06:49,740
you will see that near its entry point

189
00:06:49,740 --> 00:06:52,020
it calls into various go runtime

190
00:06:52,020 --> 00:06:54,479
bootstrap functions

191
00:06:54,479 --> 00:06:55,919
now I mentioned there's some challenges

192
00:06:55,919 --> 00:06:57,780
some nuances that come about reverse

193
00:06:57,780 --> 00:06:59,220
engineering a binary that was written in

194
00:06:59,220 --> 00:07:02,220
go the first is really just the size go

195
00:07:02,220 --> 00:07:05,039
binaries are massive because a lot of

196
00:07:05,039 --> 00:07:07,139
the libraries are statically compiled in

197
00:07:07,139 --> 00:07:11,039
so the challenge we have therefore is to

198
00:07:11,039 --> 00:07:13,740
really ignore the statically compiled

199
00:07:13,740 --> 00:07:16,500
third-party libraries they're often open

200
00:07:16,500 --> 00:07:18,060
source and don't do anything malicious

201
00:07:18,060 --> 00:07:20,340
but instead find the malicious code that

202
00:07:20,340 --> 00:07:22,620
we want to focus in on and we can see

203
00:07:22,620 --> 00:07:25,139
this how the size is impacted by

204
00:07:25,139 --> 00:07:27,660
creating a simple hello world go binary

205
00:07:27,660 --> 00:07:29,639
and if we can compile that we can see

206
00:07:29,639 --> 00:07:32,400
that's over one Meg which is huge for a

207
00:07:32,400 --> 00:07:34,620
simple program that prints out one line

208
00:07:34,620 --> 00:07:36,360
of code but again this is because of all

209
00:07:36,360 --> 00:07:38,099
the static go libraries that get

210
00:07:38,099 --> 00:07:39,900
compiled in

211
00:07:39,900 --> 00:07:41,819
another challenge that comes about when

212
00:07:41,819 --> 00:07:43,740
reverse engineering binaries that are

213
00:07:43,740 --> 00:07:45,599
written in go is the fact that ghost

214
00:07:45,599 --> 00:07:48,060
rings are not null terminated and a lot

215
00:07:48,060 --> 00:07:49,919
of reverse engineering tools struggle

216
00:07:49,919 --> 00:07:51,960
with that so for example I use Hopper

217
00:07:51,960 --> 00:07:54,120
you can see if we load the hello world

218
00:07:54,120 --> 00:07:57,479
binary into Hopper that it struggles

219
00:07:57,479 --> 00:07:59,880
with the strings so we can see it's

220
00:07:59,880 --> 00:08:02,160
identified a printf function but it

221
00:08:02,160 --> 00:08:03,479
doesn't know what string is being

222
00:08:03,479 --> 00:08:05,759
printed out this is kind of problematic

223
00:08:05,759 --> 00:08:07,500
because it's really nice to see strings

224
00:08:07,500 --> 00:08:09,720
in line in the disassembly to figure out

225
00:08:09,720 --> 00:08:11,819
what a sample is doing now if we

226
00:08:11,819 --> 00:08:13,740
manually follow that cross-reference

227
00:08:13,740 --> 00:08:15,539
indeed we can see the string so again

228
00:08:15,539 --> 00:08:17,580
just something to be aware of

229
00:08:17,580 --> 00:08:20,099
now one other brief tangent and this is

230
00:08:20,099 --> 00:08:21,479
also similar to what Kristin talked

231
00:08:21,479 --> 00:08:23,460
about yesterday is I briefly want to

232
00:08:23,460 --> 00:08:25,680
mention how we virtualize an environment

233
00:08:25,680 --> 00:08:28,740
to do malware analysis on Mac OS

234
00:08:28,740 --> 00:08:30,479
as Kristen mentioned parallels is really

235
00:08:30,479 --> 00:08:32,640
the way to go I equally struggled with

236
00:08:32,640 --> 00:08:34,979
VMware so I do have struggles as well

237
00:08:34,979 --> 00:08:36,599
and I actually originally went out and

238
00:08:36,599 --> 00:08:38,700
bought a refurbished Mac M1 so I could

239
00:08:38,700 --> 00:08:39,958
do malware analysis because the

240
00:08:39,958 --> 00:08:42,539
virtualization software just sucked

241
00:08:42,539 --> 00:08:44,520
but then I said okay now parallels is

242
00:08:44,520 --> 00:08:46,740
great right you download it you install

243
00:08:46,740 --> 00:08:50,160
it there's a pre-built Mac OS M1 and the

244
00:08:50,160 --> 00:08:52,680
end result is you can now virtualize Mac

245
00:08:52,680 --> 00:08:56,640
OS arm on an M1 system this is great

246
00:08:56,640 --> 00:08:58,140
I did notice though that when I

247
00:08:58,140 --> 00:08:59,940
installed it that it popped up asking

248
00:08:59,940 --> 00:09:01,680
for permissions this is really

249
00:09:01,680 --> 00:09:03,959
unsurprising essentially every installer

250
00:09:03,959 --> 00:09:06,060
is going to ask for permissions so that

251
00:09:06,060 --> 00:09:08,279
it can perform certain privileged

252
00:09:08,279 --> 00:09:09,240
actions

253
00:09:09,240 --> 00:09:10,620
if you know me though I really like

254
00:09:10,620 --> 00:09:12,899
looking at installers because people

255
00:09:12,899 --> 00:09:14,940
often get it wrong so I decided to take

256
00:09:14,940 --> 00:09:17,220
a quick peek at what parallels was using

257
00:09:17,220 --> 00:09:19,560
and I noticed something interesting

258
00:09:19,560 --> 00:09:21,240
so behind the scenes when you double

259
00:09:21,240 --> 00:09:23,519
click on the installer application it

260
00:09:23,519 --> 00:09:25,860
downloads a second disk image from the

261
00:09:25,860 --> 00:09:27,420
internet which is the latest version of

262
00:09:27,420 --> 00:09:29,279
parallels and then this is what gets

263
00:09:29,279 --> 00:09:32,160
installed so if we run a process monitor

264
00:09:32,160 --> 00:09:33,959
we can see that once the user has

265
00:09:33,959 --> 00:09:36,540
authenticated various binaries are now

266
00:09:36,540 --> 00:09:38,700
executed with root privileges this makes

267
00:09:38,700 --> 00:09:40,140
sense the installer needs to have

268
00:09:40,140 --> 00:09:42,000
certain privileges to perform its

269
00:09:42,000 --> 00:09:43,140
actions

270
00:09:43,140 --> 00:09:45,240
unfortunately or interestingly these

271
00:09:45,240 --> 00:09:48,480
binaries are owned by the user which

272
00:09:48,480 --> 00:09:50,220
means we might be able to tamper with

273
00:09:50,220 --> 00:09:53,100
them but unfortunately it's written or

274
00:09:53,100 --> 00:09:56,279
executed from a read-only disk image so

275
00:09:56,279 --> 00:10:00,180
this appears safe right now not at all

276
00:10:00,180 --> 00:10:02,220
so here's a zero day that affects the

277
00:10:02,220 --> 00:10:03,600
latest version of parallel so if you're

278
00:10:03,600 --> 00:10:05,459
using parallels like myself be careful

279
00:10:05,459 --> 00:10:07,560
and basically we can exploit this

280
00:10:07,560 --> 00:10:10,260
vulnerability to elevate privileges in

281
00:10:10,260 --> 00:10:12,480
five simple steps and this could be

282
00:10:12,480 --> 00:10:14,820
abused by a local adversary that wants

283
00:10:14,820 --> 00:10:16,680
to elevate their privileges or by

284
00:10:16,680 --> 00:10:18,120
malware that's already on the system

285
00:10:18,120 --> 00:10:20,820
that equally wants to gain root

286
00:10:20,820 --> 00:10:22,440
so the first thing you need to do is it

287
00:10:22,440 --> 00:10:25,019
needs to detect the installer

288
00:10:25,019 --> 00:10:28,200
mounting that second disk image

289
00:10:28,200 --> 00:10:29,339
then what it's going to do it's going to

290
00:10:29,339 --> 00:10:31,500
send a Sig stop command to the installer

291
00:10:31,500 --> 00:10:33,839
to pause the installer say hey wait hold

292
00:10:33,839 --> 00:10:36,000
on don't do anything yet it then goes

293
00:10:36,000 --> 00:10:39,180
and remounts that disk image with read

294
00:10:39,180 --> 00:10:41,040
write permissions

295
00:10:41,040 --> 00:10:43,620
it then infects the binaries on that

296
00:10:43,620 --> 00:10:45,779
disk image and then tells the installer

297
00:10:45,779 --> 00:10:48,779
okay continue on end result you get a

298
00:10:48,779 --> 00:10:50,399
root shell

299
00:10:50,399 --> 00:10:52,500
so I wrote a proof of concept for this

300
00:10:52,500 --> 00:10:55,500
last night after the party

301
00:10:55,500 --> 00:10:59,279
it might not work but I did pray to the

302
00:10:59,279 --> 00:11:01,380
demo Gods so what we're going to do here

303
00:11:01,380 --> 00:11:03,060
is we're going to start the exploit and

304
00:11:03,060 --> 00:11:04,800
you can see it's waiting for the

305
00:11:04,800 --> 00:11:06,839
installer to be run

306
00:11:06,839 --> 00:11:08,279
we're then going to double click and run

307
00:11:08,279 --> 00:11:09,959
the installer

308
00:11:09,959 --> 00:11:11,100
we're going to make sure not to

309
00:11:11,100 --> 00:11:14,660
participate in the experience because

310
00:11:14,820 --> 00:11:16,800
and we'll see that it found the pit of

311
00:11:16,800 --> 00:11:19,800
the process installer and as the item

312
00:11:19,800 --> 00:11:21,839
downloads the disk image as soon as the

313
00:11:21,839 --> 00:11:24,899
installer image goes to mount that we

314
00:11:24,899 --> 00:11:27,480
are going to pause the installer quickly

315
00:11:27,480 --> 00:11:29,399
remount the disk image although we don't

316
00:11:29,399 --> 00:11:32,459
have to rush because in theory

317
00:11:32,459 --> 00:11:35,220
um you know we're off and running

318
00:11:35,220 --> 00:11:37,260
the installer then is just going to

319
00:11:37,260 --> 00:11:39,120
continue on using the disk image at this

320
00:11:39,120 --> 00:11:40,500
point we haven't tampered anything we've

321
00:11:40,500 --> 00:11:42,720
just remounted the disk images rewrite

322
00:11:42,720 --> 00:11:45,000
now there's a password prompt from the

323
00:11:45,000 --> 00:11:46,440
installer at this point behind the

324
00:11:46,440 --> 00:11:48,600
scenes we're going to infect the disk

325
00:11:48,600 --> 00:11:50,579
image and then when the user goes ahead

326
00:11:50,579 --> 00:11:53,160
and completes the install you see we get

327
00:11:53,160 --> 00:11:55,500
a root shell and actually we get another

328
00:11:55,500 --> 00:11:57,600
root shell hooray

329
00:11:57,600 --> 00:11:59,339
the installer is going to keep going and

330
00:11:59,339 --> 00:12:00,779
going to keep giving us lots and lots of

331
00:12:00,779 --> 00:12:02,519
root shells so we're just raining root

332
00:12:02,519 --> 00:12:04,320
shells

333
00:12:04,320 --> 00:12:05,940
the installer is going to complete it's

334
00:12:05,940 --> 00:12:09,800
going to launch the VM none the wiser

335
00:12:16,019 --> 00:12:18,360
wait for some animations

336
00:12:18,360 --> 00:12:19,500
next

337
00:12:19,500 --> 00:12:21,240
okay back to the malware because this is

338
00:12:21,240 --> 00:12:22,680
a talk about malware right it's not

339
00:12:22,680 --> 00:12:25,740
about zero days so recall that our goal

340
00:12:25,740 --> 00:12:28,079
is to coerce this malware to talk to a

341
00:12:28,079 --> 00:12:30,240
custom command and control server so

342
00:12:30,240 --> 00:12:33,000
that we can task it to uncover its

343
00:12:33,000 --> 00:12:34,860
capabilities First Step though as I

344
00:12:34,860 --> 00:12:36,420
mentioned we need to find a way to get

345
00:12:36,420 --> 00:12:38,459
the malware to connect out to us so

346
00:12:38,459 --> 00:12:40,320
let's talk about how to reconfigure the

347
00:12:40,320 --> 00:12:42,060
malware so it connects to our Command

348
00:12:42,060 --> 00:12:43,440
and control server

349
00:12:43,440 --> 00:12:46,019
Trend Micro touched on this and talked

350
00:12:46,019 --> 00:12:47,700
about the fact that embedded within the

351
00:12:47,700 --> 00:12:49,380
malware is encrypted configuration

352
00:12:49,380 --> 00:12:51,360
information that contains information

353
00:12:51,360 --> 00:12:53,100
for example about the commanding control

354
00:12:53,100 --> 00:12:55,620
server we can confirm this if we look at

355
00:12:55,620 --> 00:12:57,660
the end of the malware's binary we find

356
00:12:57,660 --> 00:12:59,820
an encrypted blob followed by an AES

357
00:12:59,820 --> 00:13:02,940
decryption key and a size

358
00:13:02,940 --> 00:13:04,980
one point to note when you unpack the

359
00:13:04,980 --> 00:13:07,560
binary even if you tell upx to respect

360
00:13:07,560 --> 00:13:09,600
the overlay the data at the end it does

361
00:13:09,600 --> 00:13:11,339
not this took me a while to figure out I

362
00:13:11,339 --> 00:13:12,959
unpacked the malware and the

363
00:13:12,959 --> 00:13:15,360
configuration information was did not

364
00:13:15,360 --> 00:13:18,300
exist in the unpacked sample

365
00:13:18,300 --> 00:13:21,660
so now we have the encrypted

366
00:13:21,660 --> 00:13:23,519
configuration blob we have an encryption

367
00:13:23,519 --> 00:13:25,260
key and a size so it's pretty easy for

368
00:13:25,260 --> 00:13:28,079
us to write a decrypter so be nice this

369
00:13:28,079 --> 00:13:30,120
is my first program I ever wrote written

370
00:13:30,120 --> 00:13:33,600
in go but it is a decrypter for the O

371
00:13:33,600 --> 00:13:35,579
rats configuration information super

372
00:13:35,579 --> 00:13:36,779
straightforward

373
00:13:36,779 --> 00:13:38,940
so it opens the malware grabs that

374
00:13:38,940 --> 00:13:41,880
encrypted configuration file and then

375
00:13:41,880 --> 00:13:46,740
decrypts it via AES in GCM mode

376
00:13:46,740 --> 00:13:48,600
very straightforward when we execute it

377
00:13:48,600 --> 00:13:50,399
we can see we have the decrypted config

378
00:13:50,399 --> 00:13:52,500
so let's look closer at that decrypted

379
00:13:52,500 --> 00:13:54,720
config at the top we can see there's

380
00:13:54,720 --> 00:13:57,420
some information to set up the malware

381
00:13:57,420 --> 00:13:58,980
to run in Gateway mode we don't really

382
00:13:58,980 --> 00:14:00,839
care about that but in the middle we can

383
00:14:00,839 --> 00:14:02,760
see yes indeed there is command and

384
00:14:02,760 --> 00:14:05,040
control information specifically the

385
00:14:05,040 --> 00:14:06,480
address and Port of where the malware

386
00:14:06,480 --> 00:14:08,880
will connect out to and then also the

387
00:14:08,880 --> 00:14:11,100
protocol Trend Micro documented this as

388
00:14:11,100 --> 00:14:12,839
well basically there's three different

389
00:14:12,839 --> 00:14:16,260
types TCP in plain text or encrypted and

390
00:14:16,260 --> 00:14:19,079
or encrypted UDP as well

391
00:14:19,079 --> 00:14:21,360
so now let's reconfigure the malware we

392
00:14:21,360 --> 00:14:23,399
can see we have a new config that

393
00:14:23,399 --> 00:14:25,500
contains now the address of my command

394
00:14:25,500 --> 00:14:26,940
and control server

395
00:14:26,940 --> 00:14:29,339
I then wrote a second program my second

396
00:14:29,339 --> 00:14:32,459
go program making great progress here to

397
00:14:32,459 --> 00:14:34,800
re-encrypt the configuration and put it

398
00:14:34,800 --> 00:14:36,660
in at the end of the malware as file

399
00:14:36,660 --> 00:14:38,579
this is basically the opposite because

400
00:14:38,579 --> 00:14:40,980
AES is symmetric so again pretty

401
00:14:40,980 --> 00:14:42,600
straightforward we're just encrypting

402
00:14:42,600 --> 00:14:45,120
that configuration we can confirm that

403
00:14:45,120 --> 00:14:47,820
that indeed works we do a hex dump of

404
00:14:47,820 --> 00:14:49,680
the malware and we can see that at the

405
00:14:49,680 --> 00:14:51,360
end there's our now encrypted

406
00:14:51,360 --> 00:14:53,519
configuration and more importantly if we

407
00:14:53,519 --> 00:14:55,920
set up a netcat listener on the address

408
00:14:55,920 --> 00:14:58,740
and Port we specified run the malware in

409
00:14:58,740 --> 00:15:01,560
parallels we get root yes but also then

410
00:15:01,560 --> 00:15:03,480
the malware will connect out to our

411
00:15:03,480 --> 00:15:05,820
Command and control server

412
00:15:05,820 --> 00:15:07,620
now I continue to do a little bit more

413
00:15:07,620 --> 00:15:09,660
triage looked at the disassembly of the

414
00:15:09,660 --> 00:15:11,899
malware and I found out that you could

415
00:15:11,899 --> 00:15:14,519
non-persistently configure it as well in

416
00:15:14,519 --> 00:15:16,260
another method so it turns out the

417
00:15:16,260 --> 00:15:18,779
malware looks for various RK underscore

418
00:15:18,779 --> 00:15:21,060
environment variables and if those are

419
00:15:21,060 --> 00:15:23,339
set it uses the values from that instead

420
00:15:23,339 --> 00:15:26,160
of it from its encrypted configuration

421
00:15:26,160 --> 00:15:27,839
so I've documented them on the slide you

422
00:15:27,839 --> 00:15:29,339
can see there's three separate ones

423
00:15:29,339 --> 00:15:31,320
there's rknet which allows you to

424
00:15:31,320 --> 00:15:32,880
specify the protocol

425
00:15:32,880 --> 00:15:35,459
RK Adder is the address of the command

426
00:15:35,459 --> 00:15:37,620
and control server and then arcade debug

427
00:15:37,620 --> 00:15:39,600
puts the malware in debug mode which

428
00:15:39,600 --> 00:15:41,519
means various debugging strings will be

429
00:15:41,519 --> 00:15:43,500
printed out and also that the malware

430
00:15:43,500 --> 00:15:45,839
will not demonize this is great it makes

431
00:15:45,839 --> 00:15:48,300
debugging the malware a lot easier

432
00:15:48,300 --> 00:15:50,639
so here's an example of that we set

433
00:15:50,639 --> 00:15:53,459
various uh these various environment

434
00:15:53,459 --> 00:15:55,980
variables in a terminal execute the

435
00:15:55,980 --> 00:15:58,320
malware in a debugger and we can see

436
00:15:58,320 --> 00:16:01,019
when it goes to execute some of its

437
00:16:01,019 --> 00:16:03,060
logic indeed it is reading the values

438
00:16:03,060 --> 00:16:05,100
from that so this is helpful this just

439
00:16:05,100 --> 00:16:07,079
allows us to reconfigure the malware on

440
00:16:07,079 --> 00:16:09,240
the fly from a command line but again we

441
00:16:09,240 --> 00:16:10,740
also can use the more persistence

442
00:16:10,740 --> 00:16:12,560
mechanism persistent mechanism

443
00:16:12,560 --> 00:16:14,399
reconfiguring and re-encrypting the

444
00:16:14,399 --> 00:16:15,660
config

445
00:16:15,660 --> 00:16:18,420
all right so step one check the malware

446
00:16:18,420 --> 00:16:20,220
is now talking to our custom command and

447
00:16:20,220 --> 00:16:22,440
control server now we want to talk back

448
00:16:22,440 --> 00:16:23,880
so we can

449
00:16:23,880 --> 00:16:25,740
coerce them hour to reveal its

450
00:16:25,740 --> 00:16:27,240
capabilities so we have to understand

451
00:16:27,240 --> 00:16:29,579
the protocol that the malware expects to

452
00:16:29,579 --> 00:16:30,959
speak

453
00:16:30,959 --> 00:16:33,060
so if you noticed a few slides back when

454
00:16:33,060 --> 00:16:34,560
the malware connected out the traffic

455
00:16:34,560 --> 00:16:37,440
did look like standard HTTP but at the

456
00:16:37,440 --> 00:16:39,180
beginning there was a question mark this

457
00:16:39,180 --> 00:16:41,040
is Nat cat saying hey I got some binary

458
00:16:41,040 --> 00:16:43,259
data it's not printable I don't know

459
00:16:43,259 --> 00:16:45,240
what it is so I'm just going to put a

460
00:16:45,240 --> 00:16:46,560
question mark so there's something

461
00:16:46,560 --> 00:16:49,740
slightly strange going on so I dug into

462
00:16:49,740 --> 00:16:51,959
the malware a little more and noticed it

463
00:16:51,959 --> 00:16:54,360
was statically linked against and

464
00:16:54,360 --> 00:16:57,480
utilized against this Library called s

465
00:16:57,480 --> 00:16:58,680
mux

466
00:16:58,680 --> 00:17:00,660
we have the path and it turns out it's

467
00:17:00,660 --> 00:17:02,339
open source project so we can go on

468
00:17:02,339 --> 00:17:04,980
GitHub and read the readme file and as

469
00:17:04,980 --> 00:17:07,020
we can see on the slide it is a

470
00:17:07,020 --> 00:17:09,359
multiplex multiplexing library for

471
00:17:09,359 --> 00:17:11,160
golang

472
00:17:11,160 --> 00:17:14,099
so what is multiplexing well the idea

473
00:17:14,099 --> 00:17:16,020
and this is actually pretty slick from

474
00:17:16,020 --> 00:17:18,000
the malware author's point of view is

475
00:17:18,000 --> 00:17:21,740
that multiple streams of data will be

476
00:17:21,740 --> 00:17:24,480
multiplexed over one connection for

477
00:17:24,480 --> 00:17:26,459
example to a command control server so

478
00:17:26,459 --> 00:17:27,720
in the middle of the slide we can see

479
00:17:27,720 --> 00:17:29,580
there is one connection from the

480
00:17:29,580 --> 00:17:31,740
infected system to our custom command

481
00:17:31,740 --> 00:17:33,299
and control server well see though

482
00:17:33,299 --> 00:17:36,240
there's multiple flows that are all

483
00:17:36,240 --> 00:17:38,580
multiplexed into that one connection so

484
00:17:38,580 --> 00:17:40,020
at the end of the day the malware is

485
00:17:40,020 --> 00:17:41,280
only ever just going to have one

486
00:17:41,280 --> 00:17:42,780
connection out to a command and control

487
00:17:42,780 --> 00:17:44,880
server but that one connection is going

488
00:17:44,880 --> 00:17:48,179
to contain various Multiplex streams for

489
00:17:48,179 --> 00:17:50,460
example Commando control tasking a

490
00:17:50,460 --> 00:17:52,559
heartbeat etc etc

491
00:17:52,559 --> 00:17:54,600
now this is great from the malware

492
00:17:54,600 --> 00:17:56,460
author's point of view it's a lot more

493
00:17:56,460 --> 00:17:57,900
efficient right you're not generating

494
00:17:57,900 --> 00:17:59,460
new connection each time you want to

495
00:17:59,460 --> 00:18:01,500
send some traffic you just utilize the

496
00:18:01,500 --> 00:18:03,419
one existing one and also it's somewhat

497
00:18:03,419 --> 00:18:04,620
stealthy

498
00:18:04,620 --> 00:18:06,780
however this means we are going to have

499
00:18:06,780 --> 00:18:08,460
to write a command and control server

500
00:18:08,460 --> 00:18:10,559
that is equally Multiplex because when

501
00:18:10,559 --> 00:18:12,840
we get data from the malware this is

502
00:18:12,840 --> 00:18:14,580
going to come in on a multiplex channel

503
00:18:14,580 --> 00:18:17,220
so we're going to have to demultiplex or

504
00:18:17,220 --> 00:18:19,919
demux it in order to extract each of the

505
00:18:19,919 --> 00:18:21,539
streams and the information that the

506
00:18:21,539 --> 00:18:24,059
malware is sending to us

507
00:18:24,059 --> 00:18:26,700
well we can also use that s mux package

508
00:18:26,700 --> 00:18:28,320
right it's designed for both clients and

509
00:18:28,320 --> 00:18:30,120
servers so what we're going to now do is

510
00:18:30,120 --> 00:18:32,220
write a command and control server that

511
00:18:32,220 --> 00:18:35,340
uses the S mux package so that it can

512
00:18:35,340 --> 00:18:37,679
talk to the malware uh because

513
00:18:37,679 --> 00:18:39,960
everything now will be multiplexed so

514
00:18:39,960 --> 00:18:41,760
again I know nothing about go I was like

515
00:18:41,760 --> 00:18:44,880
how do you even install a go package so

516
00:18:44,880 --> 00:18:47,220
you know go on Google turns out you type

517
00:18:47,220 --> 00:18:49,620
go install and this will then download

518
00:18:49,620 --> 00:18:51,600
and install the go package and then

519
00:18:51,600 --> 00:18:53,400
within your code you just specify an

520
00:18:53,400 --> 00:18:56,760
import and that library is ready to go

521
00:18:56,760 --> 00:18:59,220
so step two then we have to listen and

522
00:18:59,220 --> 00:19:01,440
accept for connections this this doesn't

523
00:19:01,440 --> 00:19:02,700
have anything yet to do with

524
00:19:02,700 --> 00:19:04,799
multiplexing this is just in go how you

525
00:19:04,799 --> 00:19:06,660
open a listening socket and accept

526
00:19:06,660 --> 00:19:09,059
connections when we compile and run this

527
00:19:09,059 --> 00:19:10,559
we can see that the malware indeed

528
00:19:10,559 --> 00:19:12,360
connects out we're already doing that

529
00:19:12,360 --> 00:19:15,720
via netcat so no real progress yet but

530
00:19:15,720 --> 00:19:17,880
now we get into the core of the command

531
00:19:17,880 --> 00:19:19,740
and control server where now we start

532
00:19:19,740 --> 00:19:22,559
utilizing some of the S mux libraries

533
00:19:22,559 --> 00:19:25,080
apis and functions so first thing we do

534
00:19:25,080 --> 00:19:28,500
is we initialize a mux server we then

535
00:19:28,500 --> 00:19:31,799
accept a muck stream and then we handle

536
00:19:31,799 --> 00:19:33,840
the stream and we can see now when we

537
00:19:33,840 --> 00:19:35,400
print it out we are starting to parse

538
00:19:35,400 --> 00:19:38,940
them hours responses fully

539
00:19:38,940 --> 00:19:41,640
so now the malware is talking to us we

540
00:19:41,640 --> 00:19:43,500
kind of understand the fact that we have

541
00:19:43,500 --> 00:19:46,860
to Multiplex and demultiplex uh traffic

542
00:19:46,860 --> 00:19:49,860
but how do we ask the malware to perform

543
00:19:49,860 --> 00:19:51,539
its actions right we need to figure out

544
00:19:51,539 --> 00:19:54,900
how to task that well Trend Micro also

545
00:19:54,900 --> 00:19:56,640
touched on this and they basically said

546
00:19:56,640 --> 00:19:59,220
that what happens is the malware starts

547
00:19:59,220 --> 00:20:01,380
a local server on the infected system

548
00:20:01,380 --> 00:20:04,380
that actually listens for URL requests

549
00:20:04,380 --> 00:20:06,900
from the server and then we'll act on

550
00:20:06,900 --> 00:20:10,020
those and the parlance in go terminology

551
00:20:10,020 --> 00:20:13,440
or I guess in web stack technology I

552
00:20:13,440 --> 00:20:15,539
don't understand any of that is this

553
00:20:15,539 --> 00:20:18,419
idea of routers and routers basically

554
00:20:18,419 --> 00:20:22,679
map requests to actions so a client can

555
00:20:22,679 --> 00:20:25,140
make like a get request to some API

556
00:20:25,140 --> 00:20:27,720
endpoint the router for that will then

557
00:20:27,720 --> 00:20:30,059
take that request extract the API

558
00:20:30,059 --> 00:20:31,559
endpoint and say okay you're you're

559
00:20:31,559 --> 00:20:34,200
requesting ABC I will execute now the

560
00:20:34,200 --> 00:20:37,200
method or the code for the API the ABC

561
00:20:37,200 --> 00:20:39,179
API endpoint

562
00:20:39,179 --> 00:20:41,280
so here's kind of an example over that a

563
00:20:41,280 --> 00:20:42,720
conceptual overview when the request

564
00:20:42,720 --> 00:20:44,340
comes from the server the command and

565
00:20:44,340 --> 00:20:46,500
control server the malware also has a

566
00:20:46,500 --> 00:20:48,179
local server listening for these

567
00:20:48,179 --> 00:20:50,820
requests it's going to look up the

568
00:20:50,820 --> 00:20:52,620
Handler for that request and execute

569
00:20:52,620 --> 00:20:54,299
that

570
00:20:54,299 --> 00:20:56,220
so we can look a little closer at this

571
00:20:56,220 --> 00:20:57,900
if we reverse engineer the malware

572
00:20:57,900 --> 00:21:00,299
specifically it's register route method

573
00:21:00,299 --> 00:21:02,100
and we can see that it does a few things

574
00:21:02,100 --> 00:21:05,400
it first specifies a route Handler this

575
00:21:05,400 --> 00:21:07,980
is the API endpoint the tasking request

576
00:21:07,980 --> 00:21:10,799
then specifies the route request verb

577
00:21:10,799 --> 00:21:13,980
this can be get or post it specifies the

578
00:21:13,980 --> 00:21:15,419
route request and then ultimately

579
00:21:15,419 --> 00:21:17,100
registers this

580
00:21:17,100 --> 00:21:19,200
in a debugger we can confirm this in

581
00:21:19,200 --> 00:21:20,400
action and the point of the slide is

582
00:21:20,400 --> 00:21:22,500
just to show that now from the combatic

583
00:21:22,500 --> 00:21:24,000
control server when we make the

584
00:21:24,000 --> 00:21:26,880
appropriate request the malware

585
00:21:26,880 --> 00:21:29,280
locally will

586
00:21:29,280 --> 00:21:31,860
access that request look up the correct

587
00:21:31,860 --> 00:21:33,840
Handler for that and invoke that so it's

588
00:21:33,840 --> 00:21:36,539
just kind of a slick way to do tasking

589
00:21:36,539 --> 00:21:38,159
processing

590
00:21:38,159 --> 00:21:40,020
we can continue to reverse that

591
00:21:40,020 --> 00:21:42,360
registered router function to extract

592
00:21:42,360 --> 00:21:45,000
all the commands the routes the requests

593
00:21:45,000 --> 00:21:48,299
we can make to the malware and we can

594
00:21:48,299 --> 00:21:50,100
see that they're all pretty verbose and

595
00:21:50,100 --> 00:21:52,260
fairly descriptive so here's a table in

596
00:21:52,260 --> 00:21:53,820
the verbs and we will see some of them

597
00:21:53,820 --> 00:21:55,440
in action

598
00:21:55,440 --> 00:21:57,000
some of these understandably take

599
00:21:57,000 --> 00:21:58,799
parameters so if we do a little bit more

600
00:21:58,799 --> 00:22:00,539
reverse engineering it's trivial to

601
00:22:00,539 --> 00:22:02,700
figure out so for example for the port

602
00:22:02,700 --> 00:22:05,039
scan command we can see that it takes a

603
00:22:05,039 --> 00:22:07,080
host and a port

604
00:22:07,080 --> 00:22:09,720
so now we have the ability to task the

605
00:22:09,720 --> 00:22:10,740
malware

606
00:22:10,740 --> 00:22:14,940
maybe or do we so we understand the

607
00:22:14,940 --> 00:22:18,059
protocol and all the components but it

608
00:22:18,059 --> 00:22:20,280
really took me a while to actually get

609
00:22:20,280 --> 00:22:22,140
the request to the malware and we'll see

610
00:22:22,140 --> 00:22:23,340
why in a minute

611
00:22:23,340 --> 00:22:25,559
so if we debug the malware we can see

612
00:22:25,559 --> 00:22:27,720
that it calls the start server method

613
00:22:27,720 --> 00:22:29,580
and this is the standard Echo server so

614
00:22:29,580 --> 00:22:31,620
I said okay well there probably should

615
00:22:31,620 --> 00:22:33,480
be a listening socket something that

616
00:22:33,480 --> 00:22:35,520
maybe I can connect to to send the

617
00:22:35,520 --> 00:22:36,659
tasking from the command and control

618
00:22:36,659 --> 00:22:39,120
server but there's no listening sockets

619
00:22:39,120 --> 00:22:41,880
so I was perplexed

620
00:22:41,880 --> 00:22:43,559
well the answer of course goes back to

621
00:22:43,559 --> 00:22:45,299
the fact that the malware multiplexes

622
00:22:45,299 --> 00:22:48,059
multiplexes everything so even though it

623
00:22:48,059 --> 00:22:50,580
starts up a local server to listen for

624
00:22:50,580 --> 00:22:52,620
tasking that's not going to generate a

625
00:22:52,620 --> 00:22:54,360
new listening socket or a new connection

626
00:22:54,360 --> 00:22:57,120
that instead is going to be tied to the

627
00:22:57,120 --> 00:23:00,179
existing multiplexed session or streams

628
00:23:00,179 --> 00:23:03,059
and then tasking has to come over that

629
00:23:03,059 --> 00:23:04,980
so this is how we can ultimately task

630
00:23:04,980 --> 00:23:07,260
the malware from a our Command control

631
00:23:07,260 --> 00:23:09,659
server in three easy steps

632
00:23:09,659 --> 00:23:13,320
so step one we open a new stream based

633
00:23:13,320 --> 00:23:15,720
on the existing Multiplex session so the

634
00:23:15,720 --> 00:23:17,520
session is the one connection we say hey

635
00:23:17,520 --> 00:23:19,260
we want a new stream because we're going

636
00:23:19,260 --> 00:23:21,960
to send some data over that so

637
00:23:21,960 --> 00:23:24,900
we then task the malware by writing our

638
00:23:24,900 --> 00:23:27,900
request to that new stream it'll get

639
00:23:27,900 --> 00:23:29,760
mult it'll get multiplexed and sent to

640
00:23:29,760 --> 00:23:31,140
the malware malware will then

641
00:23:31,140 --> 00:23:34,740
demultiplex that and handle it to pass

642
00:23:34,740 --> 00:23:36,900
it to the appropriate router and then

643
00:23:36,900 --> 00:23:39,299
finally we can also read from that

644
00:23:39,299 --> 00:23:42,000
stream to get any responses now this

645
00:23:42,000 --> 00:23:44,039
looks simple and it is took me like a

646
00:23:44,039 --> 00:23:45,960
week to figure out embarrassingly but

647
00:23:45,960 --> 00:23:48,720
end result we can now task the malware

648
00:23:48,720 --> 00:23:50,159
so we know the commands of malware

649
00:23:50,159 --> 00:23:52,740
expects we have the ability to task it

650
00:23:52,740 --> 00:23:55,919
the goal is now to task the malware to

651
00:23:55,919 --> 00:23:58,200
observe it in action to for example

652
00:23:58,200 --> 00:24:00,720
confirm its activities and its

653
00:24:00,720 --> 00:24:02,159
capabilities so start with some simple

654
00:24:02,159 --> 00:24:05,220
ones the first one we can execute is the

655
00:24:05,220 --> 00:24:07,740
info command we send a get request to

656
00:24:07,740 --> 00:24:11,100
slash agent slash info again the malware

657
00:24:11,100 --> 00:24:12,480
is going to check in we open a new

658
00:24:12,480 --> 00:24:14,400
stream we send this request over the mux

659
00:24:14,400 --> 00:24:16,620
connection and the malware will handle

660
00:24:16,620 --> 00:24:18,960
that as a response it sends us back a

661
00:24:18,960 --> 00:24:21,480
200 okay saying hey I got that that was

662
00:24:21,480 --> 00:24:23,880
a valid request I handled that and then

663
00:24:23,880 --> 00:24:26,400
its response as we can see is a complete

664
00:24:26,400 --> 00:24:28,440
survey of the infected system so again

665
00:24:28,440 --> 00:24:30,480
we didn't have to reverse engineer the

666
00:24:30,480 --> 00:24:32,820
info logic to see what type of survey it

667
00:24:32,820 --> 00:24:34,320
was or even the fact that it was a

668
00:24:34,320 --> 00:24:37,140
survey malware kindly showed us that by

669
00:24:37,140 --> 00:24:40,140
returning survey information

670
00:24:40,140 --> 00:24:42,720
we can also exfiltrate files via the

671
00:24:42,720 --> 00:24:44,700
download command again this the malware

672
00:24:44,700 --> 00:24:46,679
has kind of set up a local server so its

673
00:24:46,679 --> 00:24:48,659
idea of downloading it sending a file up

674
00:24:48,659 --> 00:24:51,720
to our server this takes two parameters

675
00:24:51,720 --> 00:24:54,900
a one parameter a file path and you can

676
00:24:54,900 --> 00:24:57,179
see when we execute this command if we

677
00:24:57,179 --> 00:24:59,640
have a file monitor running on the

678
00:24:59,640 --> 00:25:02,280
infected system that we can observe the

679
00:25:02,280 --> 00:25:04,620
malware as expected opening the file

680
00:25:04,620 --> 00:25:07,200
reading its Co reading its contents and

681
00:25:07,200 --> 00:25:09,780
then exfiltrating it back to our Command

682
00:25:09,780 --> 00:25:11,580
control server

683
00:25:11,580 --> 00:25:13,320
I was also interested in the fact that

684
00:25:13,320 --> 00:25:15,059
the malware appeared to support screen

685
00:25:15,059 --> 00:25:16,380
capture capabilities there's a variety

686
00:25:16,380 --> 00:25:18,059
of ways to do this on Mac OS so I was

687
00:25:18,059 --> 00:25:19,500
interested in how it implemented

688
00:25:19,500 --> 00:25:22,080
unfortunately when I cast it it said

689
00:25:22,080 --> 00:25:25,980
Sorry not available on Mac OS bummer

690
00:25:25,980 --> 00:25:28,559
other abilities though we can set up a

691
00:25:28,559 --> 00:25:30,240
interactive tunnel this is kind of a

692
00:25:30,240 --> 00:25:32,460
neat capability for the malware to have

693
00:25:32,460 --> 00:25:34,200
so what we can do is we can make the

694
00:25:34,200 --> 00:25:36,720
agent net request this takes various

695
00:25:36,720 --> 00:25:39,240
parameters like a host and a port of the

696
00:25:39,240 --> 00:25:41,520
endpoint of the tunnel once that's set

697
00:25:41,520 --> 00:25:43,380
up the malware comes back and says okay

698
00:25:43,380 --> 00:25:45,900
you are now connected now anything we

699
00:25:45,900 --> 00:25:47,700
send from the server will get

700
00:25:47,700 --> 00:25:49,799
multiplexed over to the malware the

701
00:25:49,799 --> 00:25:52,020
malware will demultiplex that and send

702
00:25:52,020 --> 00:25:54,600
it off to the tunnel the endpoint which

703
00:25:54,600 --> 00:25:56,100
we can see is just a simple netcat

704
00:25:56,100 --> 00:25:59,220
listener on this slide anything we type

705
00:25:59,220 --> 00:26:01,320
or add to that tunnel will be routed

706
00:26:01,320 --> 00:26:03,539
back to the server so in this case the

707
00:26:03,539 --> 00:26:05,340
malware has now basically become a

708
00:26:05,340 --> 00:26:08,400
tunnel or almost like a proxy server

709
00:26:08,400 --> 00:26:10,559
we can also do a port scan again I was

710
00:26:10,559 --> 00:26:12,240
interested in figuring out how this was

711
00:26:12,240 --> 00:26:14,820
implemented turns out pretty basic so we

712
00:26:14,820 --> 00:26:17,520
make the port scan request via a get

713
00:26:17,520 --> 00:26:19,380
request again to get mult that gets

714
00:26:19,380 --> 00:26:21,900
multiplexed over to the malware

715
00:26:21,900 --> 00:26:23,460
it does a port scan if we're running

716
00:26:23,460 --> 00:26:25,320
something like Wireshark we can see it

717
00:26:25,320 --> 00:26:26,940
just simply tries to connect to each of

718
00:26:26,940 --> 00:26:28,799
the ports and the range you specify on

719
00:26:28,799 --> 00:26:30,900
the specified host and any that are open

720
00:26:30,900 --> 00:26:32,820
the malware will observe that and then

721
00:26:32,820 --> 00:26:34,620
respond that back to our Command and

722
00:26:34,620 --> 00:26:35,940
control server

723
00:26:35,940 --> 00:26:37,799
and then finally the kill self

724
00:26:37,799 --> 00:26:39,840
unsurprisingly is how the malware can

725
00:26:39,840 --> 00:26:41,700
self-delete so this was the last command

726
00:26:41,700 --> 00:26:44,460
I ran and we can see that via a file and

727
00:26:44,460 --> 00:26:46,679
process monitor the the malware will

728
00:26:46,679 --> 00:26:49,140
fully self-delete in the file monitor we

729
00:26:49,140 --> 00:26:50,700
can see the malware once it receives

730
00:26:50,700 --> 00:26:52,919
this command will unlink or remove

731
00:26:52,919 --> 00:26:55,260
itself and then in the process monitor

732
00:26:55,260 --> 00:26:57,600
we can see that the malware's process

733
00:26:57,600 --> 00:26:59,940
will exit and of course on the server

734
00:26:59,940 --> 00:27:01,679
side on our Command and control control

735
00:27:01,679 --> 00:27:03,539
server the socket connection will be

736
00:27:03,539 --> 00:27:04,919
closed and we get an error message

737
00:27:04,919 --> 00:27:07,620
saying that the client has disconnected

738
00:27:07,620 --> 00:27:10,740
okay so let's wrap this all up three

739
00:27:10,740 --> 00:27:12,600
takeaways first I think it's really

740
00:27:12,600 --> 00:27:15,480
important to study apt groups malware

741
00:27:15,480 --> 00:27:17,340
because this gives us really good

742
00:27:17,340 --> 00:27:19,799
insight into the capabilities the

743
00:27:19,799 --> 00:27:22,020
approaches the sophistication or lack

744
00:27:22,020 --> 00:27:24,240
thereof of advanced or at least

745
00:27:24,240 --> 00:27:26,460
persistent adversaries

746
00:27:26,460 --> 00:27:28,980
also hopefully I've Illustrated the fact

747
00:27:28,980 --> 00:27:30,840
that analyzing malware via custom

748
00:27:30,840 --> 00:27:33,179
command and control server can be a

749
00:27:33,179 --> 00:27:35,880
pretty efficient approach that allows us

750
00:27:35,880 --> 00:27:38,460
to comprehensively analyze a malware

751
00:27:38,460 --> 00:27:40,200
sample right so we had to do some

752
00:27:40,200 --> 00:27:42,299
initial research on the configuration

753
00:27:42,299 --> 00:27:44,580
and the protocol and the tasking but

754
00:27:44,580 --> 00:27:46,799
once we had that we could simply ask the

755
00:27:46,799 --> 00:27:49,140
malware to perform actions and then via

756
00:27:49,140 --> 00:27:51,360
our file monitors process monitors and

757
00:27:51,360 --> 00:27:53,220
network monitors see exactly what it was

758
00:27:53,220 --> 00:27:55,200
doing also coupled with the fact that it

759
00:27:55,200 --> 00:27:56,820
kindly sent us back results to our

760
00:27:56,820 --> 00:27:59,159
Command and control server and thirdly I

761
00:27:59,159 --> 00:28:01,380
think this is pretty cool we now have a

762
00:28:01,380 --> 00:28:03,960
reconfigurable malware and a compatible

763
00:28:03,960 --> 00:28:06,000
command and control server so imagine

764
00:28:06,000 --> 00:28:07,919
this was written by the Russians the

765
00:28:07,919 --> 00:28:10,320
Chinese if I'm the Americans I'm taking

766
00:28:10,320 --> 00:28:12,539
this and deploying this on targets that

767
00:28:12,539 --> 00:28:15,059
might be compromised and then

768
00:28:15,059 --> 00:28:17,340
if that was ever to be found out I'm not

769
00:28:17,340 --> 00:28:19,200
going to get blamed the original malware

770
00:28:19,200 --> 00:28:21,299
authors will so using this capability

771
00:28:21,299 --> 00:28:24,740
also has offensive options I would say

772
00:28:24,740 --> 00:28:27,120
that really provide a high level of

773
00:28:27,120 --> 00:28:29,220
plausible deniability

774
00:28:29,220 --> 00:28:31,440
so that is a wrap I think we have a few

775
00:28:31,440 --> 00:28:33,600
minutes for questions uh again thank you

776
00:28:33,600 --> 00:28:35,580
so much for attending this talk uh

777
00:28:35,580 --> 00:28:36,890
sharball

778
00:28:36,890 --> 00:28:47,769
[Applause]

779
00:28:49,140 --> 00:28:51,740
yes

780
00:28:56,039 --> 00:28:58,559
sure sure so the question was the

781
00:28:58,559 --> 00:29:00,659
malware supports or looks for custom

782
00:29:00,659 --> 00:29:02,220
environment variables and one of those

783
00:29:02,220 --> 00:29:06,000
was RK under score debugged and if that

784
00:29:06,000 --> 00:29:07,860
was set two things happened right it

785
00:29:07,860 --> 00:29:09,480
printed out more debugging information

786
00:29:09,480 --> 00:29:11,340
and we got to that second and also it

787
00:29:11,340 --> 00:29:13,140
prevented the malware from demonizing

788
00:29:13,140 --> 00:29:15,059
itself what made it way easier to debug

789
00:29:15,059 --> 00:29:18,120
so the the bug strings weren't perf uh

790
00:29:18,120 --> 00:29:20,159
you know super helpful but it did print

791
00:29:20,159 --> 00:29:21,840
out some more error messages for example

792
00:29:21,840 --> 00:29:23,340
if it couldn't connect out to the

793
00:29:23,340 --> 00:29:24,720
command and control server it would

794
00:29:24,720 --> 00:29:26,640
print out that fact so it was definitely

795
00:29:26,640 --> 00:29:28,799
helpful and I think it's good anytime

796
00:29:28,799 --> 00:29:31,080
you are analyzing malware if it has

797
00:29:31,080 --> 00:29:33,480
debugging capabilities built in which a

798
00:29:33,480 --> 00:29:35,640
lot does malware I always say is simply

799
00:29:35,640 --> 00:29:37,980
software with malicious purposes uh and

800
00:29:37,980 --> 00:29:39,600
so malware authors are software

801
00:29:39,600 --> 00:29:40,679
developers so they're going to put in

802
00:29:40,679 --> 00:29:42,779
debug logic and debug code so if you

803
00:29:42,779 --> 00:29:44,460
find malware that has debugging logic

804
00:29:44,460 --> 00:29:46,260
compiled in if you can find a way to

805
00:29:46,260 --> 00:29:49,080
trigger that to be activated in this

806
00:29:49,080 --> 00:29:51,360
case it was pretty easy it does make

807
00:29:51,360 --> 00:29:53,220
your analysis a lot easier anytime it's

808
00:29:53,220 --> 00:29:54,960
spitting out into bug strings and so

809
00:29:54,960 --> 00:29:56,460
when I I did find that that did

810
00:29:56,460 --> 00:29:58,200
facilitate my initial triage and helped

811
00:29:58,200 --> 00:30:00,120
me kind of build a compatible command

812
00:30:00,120 --> 00:30:01,320
and control server that I could task

813
00:30:01,320 --> 00:30:03,059
great question

814
00:30:03,059 --> 00:30:05,840
any others

815
00:30:06,480 --> 00:30:08,960
yes

816
00:30:26,100 --> 00:30:27,899
yeah great question so the question was

817
00:30:27,899 --> 00:30:29,399
you know some of the multiplexing you

818
00:30:29,399 --> 00:30:32,399
know it's a decently complex feature or

819
00:30:32,399 --> 00:30:33,480
you know something that's decently

820
00:30:33,480 --> 00:30:35,159
sophisticated at least shows that it was

821
00:30:35,159 --> 00:30:37,200
written by a real software engineer like

822
00:30:37,200 --> 00:30:39,659
I would never write that right and so

823
00:30:39,659 --> 00:30:41,640
the question was do we do we expect more

824
00:30:41,640 --> 00:30:43,080
advancements because there's definitely

825
00:30:43,080 --> 00:30:45,600
next steps and I would say yes I mean

826
00:30:45,600 --> 00:30:47,640
I've spent a lot of time looking at Mac

827
00:30:47,640 --> 00:30:49,919
malware and five years ago it was mostly

828
00:30:49,919 --> 00:30:51,600
pretty boring stuff now we're seeing

829
00:30:51,600 --> 00:30:54,120
adversaries utilize zero day exploits

830
00:30:54,120 --> 00:30:55,740
the talk earlier from the Google

831
00:30:55,740 --> 00:30:57,480
researchers I mean that was pretty

832
00:30:57,480 --> 00:30:59,220
sophisticated sample well there's really

833
00:30:59,220 --> 00:31:00,960
a lot of tips that the malware authors

834
00:31:00,960 --> 00:31:03,120
are are leaning into so I would expect

835
00:31:03,120 --> 00:31:05,100
them to see that and the malware

836
00:31:05,100 --> 00:31:08,220
continued to evolve this is interesting

837
00:31:08,220 --> 00:31:10,740
because I think if a real software

838
00:31:10,740 --> 00:31:12,240
engineer would have looked at this very

839
00:31:12,240 --> 00:31:13,559
quickly they would be like yeah this is

840
00:31:13,559 --> 00:31:14,880
how you write a go program and of course

841
00:31:14,880 --> 00:31:16,980
you Multiplex connections and then very

842
00:31:16,980 --> 00:31:18,840
quickly would have been able to write a

843
00:31:18,840 --> 00:31:20,940
compatible command and control server

844
00:31:20,940 --> 00:31:23,760
versus you know me taking a week so

845
00:31:23,760 --> 00:31:24,960
again I think there's something to be

846
00:31:24,960 --> 00:31:27,779
said by understanding how software is

847
00:31:27,779 --> 00:31:29,399
written because when you are reverse

848
00:31:29,399 --> 00:31:30,779
engineering malware it's essentially

849
00:31:30,779 --> 00:31:33,840
doing the opposite of that

850
00:31:33,840 --> 00:31:36,379
yes

851
00:31:53,460 --> 00:31:55,440
yeah that's a great question so the

852
00:31:55,440 --> 00:31:57,779
question was you know Patrick why are

853
00:31:57,779 --> 00:31:59,640
you dropping zero days which is totally

854
00:31:59,640 --> 00:32:00,779
a valid question

855
00:32:00,779 --> 00:32:03,779
for me I start with you know is this

856
00:32:03,779 --> 00:32:05,760
going to impact everyday users across

857
00:32:05,760 --> 00:32:07,380
the board and so if it's a local

858
00:32:07,380 --> 00:32:09,960
vulnerability I'm essentially like no uh

859
00:32:09,960 --> 00:32:11,039
because

860
00:32:11,039 --> 00:32:14,640
for better or worse I always judge bugs

861
00:32:14,640 --> 00:32:17,940
based on the quality uh or based on the

862
00:32:17,940 --> 00:32:20,460
question would a three-way letter agency

863
00:32:20,460 --> 00:32:22,080
like the NSA where I used to work at

864
00:32:22,080 --> 00:32:23,279
would they use this bug would this bug

865
00:32:23,279 --> 00:32:24,779
be useful to them and if you answer that

866
00:32:24,779 --> 00:32:25,919
is yes it's like okay I'm gonna go to

867
00:32:25,919 --> 00:32:27,779
the vendor make sure it's fixed you know

868
00:32:27,779 --> 00:32:30,240
is the NSA going to use a bug to elevate

869
00:32:30,240 --> 00:32:32,760
Privileges and parallels like no also

870
00:32:32,760 --> 00:32:34,440
the number of users using parallels is

871
00:32:34,440 --> 00:32:36,539
very small and malware would already

872
00:32:36,539 --> 00:32:38,460
have to be on the system to elevate that

873
00:32:38,460 --> 00:32:41,159
it's way easier to use in my opinion a

874
00:32:41,159 --> 00:32:43,679
vulnerability that affects Mac OS core

875
00:32:43,679 --> 00:32:45,960
that would work on every system that we

876
00:32:45,960 --> 00:32:46,980
could that could be triggered

877
00:32:46,980 --> 00:32:48,960
immediately so to me a bug like this

878
00:32:48,960 --> 00:32:51,200
while illustrative I don't think it has

879
00:32:51,200 --> 00:32:53,460
widespread impact so I don't think it's

880
00:32:53,460 --> 00:32:55,200
going to be putting a lot of people at

881
00:32:55,200 --> 00:32:57,360
risk the Defcon Zoom bug a little

882
00:32:57,360 --> 00:32:59,399
different because that impacted a lot

883
00:32:59,399 --> 00:33:00,539
more users

884
00:33:00,539 --> 00:33:02,159
the main issue was that is I had

885
00:33:02,159 --> 00:33:04,200
reported bugs the zooms eight nine

886
00:33:04,200 --> 00:33:05,880
months ago and it literally took them

887
00:33:05,880 --> 00:33:08,399
three quarters of a year to fix those

888
00:33:08,399 --> 00:33:10,559
bugs were trivial to find and again

889
00:33:10,559 --> 00:33:13,200
given my background I always assumed

890
00:33:13,200 --> 00:33:16,380
that if I can find a bug other uh bugs

891
00:33:16,380 --> 00:33:18,960
uh that same bug could be found by other

892
00:33:18,960 --> 00:33:22,860
adversaries or attackers as well so you

893
00:33:22,860 --> 00:33:25,019
know it really comes down to each bug is

894
00:33:25,019 --> 00:33:27,659
different but I generally try to try to

895
00:33:27,659 --> 00:33:29,100
answer the question what is the impact

896
00:33:29,100 --> 00:33:31,740
and also you know how is the company

897
00:33:31,740 --> 00:33:34,620
responsive to that you know parallels

898
00:33:34,620 --> 00:33:36,000
doesn't have a bug Bounty program not

899
00:33:36,000 --> 00:33:37,440
that I'm looking for a payout but that

900
00:33:37,440 --> 00:33:40,320
to me is a sign of a mature security so

901
00:33:40,320 --> 00:33:41,700
you know hopefully they'll fix it soon

902
00:33:41,700 --> 00:33:44,519
but again that's a great question you

903
00:33:44,519 --> 00:33:46,320
know the fact that I'm not beholden to

904
00:33:46,320 --> 00:33:48,179
some large company means I can also get

905
00:33:48,179 --> 00:33:50,220
on stage and pull Shenanigans like this

906
00:33:50,220 --> 00:33:52,440
with not a lot of repercussions For

907
00:33:52,440 --> 00:33:55,080
Better or Worse here we are I mean I I

908
00:33:55,080 --> 00:33:56,340
just really wanted to spice up the

909
00:33:56,340 --> 00:33:57,600
malware talk I love talking about

910
00:33:57,600 --> 00:33:59,700
malware but I'm like uh you know I'm

911
00:33:59,700 --> 00:34:01,200
getting a little older I I got to keep

912
00:34:01,200 --> 00:34:02,460
finding zero days I don't want to lose

913
00:34:02,460 --> 00:34:05,399
my technical Acumen etc etc but totally

914
00:34:05,399 --> 00:34:07,980
totally valid question I appreciate that

915
00:34:07,980 --> 00:34:09,839
anymore

916
00:34:09,839 --> 00:34:12,739
yes in the back

917
00:34:21,899 --> 00:34:23,580
great question so the question was the

918
00:34:23,580 --> 00:34:24,899
size of the binary the fact that it was

919
00:34:24,899 --> 00:34:27,599
10 Megs uh what was the reason and I had

920
00:34:27,599 --> 00:34:29,760
a slide with a quote from Jags that

921
00:34:29,760 --> 00:34:31,619
basically said hey go binaries are

922
00:34:31,619 --> 00:34:34,619
massive because of the fact that all the

923
00:34:34,619 --> 00:34:36,359
libraries are statically compiled in and

924
00:34:36,359 --> 00:34:38,159
that was exactly the reason for this as

925
00:34:38,159 --> 00:34:40,619
well so the malicious logic itself

926
00:34:40,619 --> 00:34:42,199
wasn't incredibly

927
00:34:42,199 --> 00:34:45,839
you know large it was just a 64-bit

928
00:34:45,839 --> 00:34:47,639
Intel binary so it wasn't a fat or

929
00:34:47,639 --> 00:34:49,918
universal binary so in this scenario

930
00:34:49,918 --> 00:34:52,800
this is true with most go binaries the

931
00:34:52,800 --> 00:34:55,260
size is simply based on the fact that

932
00:34:55,260 --> 00:34:57,000
many of the go run time and other

933
00:34:57,000 --> 00:34:58,619
third-party libraries are statically

934
00:34:58,619 --> 00:35:00,180
compiled in so you're going to just have

935
00:35:00,180 --> 00:35:02,099
massive executables but again the good

936
00:35:02,099 --> 00:35:04,080
news is you can ignore the majority of

937
00:35:04,080 --> 00:35:05,880
that because it's like third-party

938
00:35:05,880 --> 00:35:07,920
libraries but there are some challenges

939
00:35:07,920 --> 00:35:09,720
to finding Hey where's the core

940
00:35:09,720 --> 00:35:11,579
malicious code and some of the resources

941
00:35:11,579 --> 00:35:13,560
I talked about on the slides dig into

942
00:35:13,560 --> 00:35:15,900
how to do that more great question

943
00:35:15,900 --> 00:35:18,740
any other questions

944
00:35:19,920 --> 00:35:21,599
awesome well again thank you so much for

945
00:35:21,599 --> 00:35:22,450
attending my talk

946
00:35:22,450 --> 00:35:29,899
[Applause]

