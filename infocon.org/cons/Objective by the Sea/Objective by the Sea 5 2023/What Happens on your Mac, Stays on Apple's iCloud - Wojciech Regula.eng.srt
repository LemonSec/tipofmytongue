1
00:00:00,659 --> 00:00:03,559
bye

2
00:00:08,400 --> 00:00:12,240
so hello obds last time when I attended

3
00:00:12,240 --> 00:00:15,420
obts it was like three years ago it was

4
00:00:15,420 --> 00:00:16,560
in Hawaii

5
00:00:16,560 --> 00:00:19,980
and then the covet started and I was

6
00:00:19,980 --> 00:00:23,039
stuck in Hawaii and um yeah Poland

7
00:00:23,039 --> 00:00:25,380
closed borders so I hope that will not

8
00:00:25,380 --> 00:00:28,460
be the case this time

9
00:00:28,460 --> 00:00:31,560
but yeah dude my today's talk is what

10
00:00:31,560 --> 00:00:34,020
happens in your mic stays on Apple's

11
00:00:34,020 --> 00:00:38,399
iCloud by passing Mac privacy mechanisms

12
00:00:38,399 --> 00:00:42,000
uh so my name is and I'm a head of

13
00:00:42,000 --> 00:00:45,059
mobile security at securing I'm mostly

14
00:00:45,059 --> 00:00:47,460
focused on iOS and Mac OS application

15
00:00:47,460 --> 00:00:49,079
security

16
00:00:49,079 --> 00:00:51,480
um in my free time I run a Blog of

17
00:00:51,480 --> 00:00:54,239
course about Apple security uh somebody

18
00:00:54,239 --> 00:00:56,820
of you may know me from IOS Security

19
00:00:56,820 --> 00:00:59,460
Suite that I am creator of that's a free

20
00:00:59,460 --> 00:01:02,579
open source library that helps

21
00:01:02,579 --> 00:01:04,500
developers making sure that their

22
00:01:04,500 --> 00:01:07,760
applications are run on secure iPhones

23
00:01:07,760 --> 00:01:09,860
and um

24
00:01:09,860 --> 00:01:12,420
recently we also started in securing a

25
00:01:12,420 --> 00:01:14,400
new service that is a Mac OS environment

26
00:01:14,400 --> 00:01:16,920
security testing

27
00:01:16,920 --> 00:01:20,460
but this talk is a kind of a research

28
00:01:20,460 --> 00:01:22,640
continuation of

29
00:01:22,640 --> 00:01:26,640
presentation that we made with Chaba

30
00:01:26,640 --> 00:01:28,979
which should be probably there here on

31
00:01:28,979 --> 00:01:29,960
the audience

32
00:01:29,960 --> 00:01:32,620
so we bypassed

33
00:01:32,620 --> 00:01:33,780
[Music]

34
00:01:33,780 --> 00:01:36,780
we found we fund over 20 ways to bypass

35
00:01:36,780 --> 00:01:40,680
TCC local privacy mechanisms by the way

36
00:01:40,680 --> 00:01:43,380
we're gonna have a next talk about next

37
00:01:43,380 --> 00:01:46,259
20 ways to bypass TCC this this year on

38
00:01:46,259 --> 00:01:49,920
blackhead in London but that's that's a

39
00:01:49,920 --> 00:01:52,860
kind of fork and this presentation yeah

40
00:01:52,860 --> 00:01:55,320
maybe let's start from from agenda so at

41
00:01:55,320 --> 00:01:57,780
first I will quickly introduce you to

42
00:01:57,780 --> 00:02:00,740
some of the Marcus privacy mechanisms

43
00:02:00,740 --> 00:02:04,020
I will show you how macros entitlement

44
00:02:04,020 --> 00:02:05,939
Works in general and how to attack them

45
00:02:05,939 --> 00:02:07,079
what's the problem with those

46
00:02:07,079 --> 00:02:10,560
entitlements and then using two really

47
00:02:10,560 --> 00:02:13,260
simple vulnerabilities I will show you

48
00:02:13,260 --> 00:02:16,739
that it was possible to attack Marcus

49
00:02:16,739 --> 00:02:19,440
privacy but not by bypassing local

50
00:02:19,440 --> 00:02:23,160
mechanisms but by taking those privacy

51
00:02:23,160 --> 00:02:25,260
sensitive resources directly from from

52
00:02:25,260 --> 00:02:28,080
iCloud yeah Deimos and further

53
00:02:28,080 --> 00:02:30,360
exploitation as that is the next point

54
00:02:30,360 --> 00:02:33,930
So This research is not finished

55
00:02:33,930 --> 00:02:35,280
[Music]

56
00:02:35,280 --> 00:02:38,220
as for now I was able to again and get

57
00:02:38,220 --> 00:02:40,440
an unauthorized access to the user's

58
00:02:40,440 --> 00:02:43,500
location uh contacts calendars and

59
00:02:43,500 --> 00:02:46,080
reminders but probably there will be

60
00:02:46,080 --> 00:02:48,980
more resources that can be

61
00:02:48,980 --> 00:02:52,080
gained with this technique

62
00:02:52,080 --> 00:02:55,920
but we'll you will see the the demos

63
00:02:55,920 --> 00:02:58,440
um so yeah let's uh let's start with the

64
00:02:58,440 --> 00:02:59,580
introduction to Market security

65
00:02:59,580 --> 00:03:02,519
mechanisms so I selected the system

66
00:03:02,519 --> 00:03:04,319
Integrity protection that's that's the

67
00:03:04,319 --> 00:03:05,700
most important thing from from this

68
00:03:05,700 --> 00:03:08,459
presentation perspective so it's based

69
00:03:08,459 --> 00:03:11,220
on Sandbox kernel extension and interest

70
00:03:11,220 --> 00:03:13,940
streaks access to many directories

71
00:03:13,940 --> 00:03:16,379
and as this a system Integrity

72
00:03:16,379 --> 00:03:19,080
protection it also will for example deny

73
00:03:19,080 --> 00:03:21,680
debugger attachments to process that are

74
00:03:21,680 --> 00:03:25,800
directly signed by Apple so summing it

75
00:03:25,800 --> 00:03:29,099
up on on Mac OS you are not a God if you

76
00:03:29,099 --> 00:03:31,980
have root even if you have root you

77
00:03:31,980 --> 00:03:34,200
still cannot do everything you want with

78
00:03:34,200 --> 00:03:37,319
with your operating system that's why we

79
00:03:37,319 --> 00:03:39,300
call also system integral protection as

80
00:03:39,300 --> 00:03:41,580
rootless

81
00:03:41,580 --> 00:03:43,980
and when the system Integrity protection

82
00:03:43,980 --> 00:03:45,959
is turned on and that's the default

83
00:03:45,959 --> 00:03:49,319
configuration of course and you as a

84
00:03:49,319 --> 00:03:52,440
application uh try to access some

85
00:03:52,440 --> 00:03:54,720
privacy sensitive resources like for

86
00:03:54,720 --> 00:03:57,480
example address book uh you will see a

87
00:03:57,480 --> 00:03:58,819
prompt

88
00:03:58,819 --> 00:04:02,099
and apple wanted to make sure that there

89
00:04:02,099 --> 00:04:04,799
is a clear user user intention that

90
00:04:04,799 --> 00:04:07,080
actual the physical user clicks on that

91
00:04:07,080 --> 00:04:09,780
prompt so for example if you have root

92
00:04:09,780 --> 00:04:13,200
access on on Mac machine and you would

93
00:04:13,200 --> 00:04:16,620
do this LS but with sudo the result

94
00:04:16,620 --> 00:04:19,019
would be exactly the same even if you

95
00:04:19,019 --> 00:04:20,760
have root but you don't have access to

96
00:04:20,760 --> 00:04:23,040
the TC protected resources

97
00:04:23,040 --> 00:04:25,080
you still there will be a problem that

98
00:04:25,080 --> 00:04:26,580
will be triggered by the operating

99
00:04:26,580 --> 00:04:29,040
system and from from the user's

100
00:04:29,040 --> 00:04:31,139
perspective you may know TCC from the

101
00:04:31,139 --> 00:04:33,919
security and privacy pane

102
00:04:33,919 --> 00:04:36,720
so as you can see for example in

103
00:04:36,720 --> 00:04:39,660
automation that ttcc is is really

104
00:04:39,660 --> 00:04:41,699
granular you can select which

105
00:04:41,699 --> 00:04:43,860
application could control what

106
00:04:43,860 --> 00:04:45,720
application

107
00:04:45,720 --> 00:04:49,620
but what are the Privacy sensitive

108
00:04:49,620 --> 00:04:53,220
resources according to Apple so if you

109
00:04:53,220 --> 00:04:55,380
visit the Apple security Bounty website

110
00:04:55,380 --> 00:04:57,780
and you go to the to the very bottom

111
00:04:57,780 --> 00:05:00,840
after two asterisks you will read that

112
00:05:00,840 --> 00:05:02,880
sensitive data includes contents of

113
00:05:02,880 --> 00:05:05,880
contacts mail messages notes photos or

114
00:05:05,880 --> 00:05:08,220
real time or historical precise location

115
00:05:08,220 --> 00:05:09,540
data

116
00:05:09,540 --> 00:05:10,979
however

117
00:05:10,979 --> 00:05:13,759
TCC itself protects

118
00:05:13,759 --> 00:05:16,800
more resources as you can see those

119
00:05:16,800 --> 00:05:19,740
icons are of course from taken from from

120
00:05:19,740 --> 00:05:23,039
the from Mac but as you can see like TC

121
00:05:23,039 --> 00:05:27,900
protects also camera automation uh

122
00:05:27,900 --> 00:05:33,240
motion photos music and other and other

123
00:05:33,240 --> 00:05:35,759
resources that are sensitive for for the

124
00:05:35,759 --> 00:05:39,060
user so that's TTC is now a really huge

125
00:05:39,060 --> 00:05:41,539
mechanism

126
00:05:42,000 --> 00:05:46,139
um and one one more thing about one

127
00:05:46,139 --> 00:05:47,039
um

128
00:05:47,039 --> 00:05:49,380
more private security mechanics on

129
00:05:49,380 --> 00:05:51,720
markers that are entitlements

130
00:05:51,720 --> 00:05:52,919
um so what you should know about

131
00:05:52,919 --> 00:05:56,160
entitlements that they are on XML based

132
00:05:56,160 --> 00:05:59,580
format and they are validated mostly by

133
00:05:59,580 --> 00:06:03,720
Apple mobile fire Integrity which is an

134
00:06:03,720 --> 00:06:05,460
um again a kernel extension that

135
00:06:05,460 --> 00:06:07,860
implements a mandatory Access Control

136
00:06:07,860 --> 00:06:11,759
framework policy and has a user space

137
00:06:11,759 --> 00:06:14,580
demon but let's take a look on it in

138
00:06:14,580 --> 00:06:15,539
practice

139
00:06:15,539 --> 00:06:19,199
so if you if we have a like simple hello

140
00:06:19,199 --> 00:06:20,940
world application

141
00:06:20,940 --> 00:06:24,139
and we take a simple entitlements file

142
00:06:24,139 --> 00:06:26,940
and as you can see this entitlement is

143
00:06:26,940 --> 00:06:29,039
private that's the that's an entitlement

144
00:06:29,039 --> 00:06:32,699
that allows taking over the whole TCC

145
00:06:32,699 --> 00:06:33,360
um

146
00:06:33,360 --> 00:06:36,479
and you can check with code sign a tool

147
00:06:36,479 --> 00:06:38,819
that the hello world application is not

148
00:06:38,819 --> 00:06:40,740
signed but then

149
00:06:40,740 --> 00:06:44,520
if you sign it with an empty profile and

150
00:06:44,520 --> 00:06:47,039
you try to open it this application will

151
00:06:47,039 --> 00:06:49,919
be will be instantly killed because we

152
00:06:49,919 --> 00:06:52,160
are not Apple we cannot sign

153
00:06:52,160 --> 00:06:55,620
executables with private entitlements

154
00:06:55,620 --> 00:06:57,740
right

155
00:06:57,840 --> 00:07:01,080
if you if you open log console you will

156
00:07:01,080 --> 00:07:04,919
see that actually M5 killed it so

157
00:07:04,919 --> 00:07:07,500
restricted entitlements not validated

158
00:07:07,500 --> 00:07:10,259
bailing up so that's why the process was

159
00:07:10,259 --> 00:07:11,639
killed

160
00:07:11,639 --> 00:07:13,860
okay so uh that was the quick

161
00:07:13,860 --> 00:07:16,800
introduction to uh to the basic security

162
00:07:16,800 --> 00:07:19,860
mechanisms on Mac now let's

163
00:07:19,860 --> 00:07:22,740
um let's focus on the exploitation

164
00:07:22,740 --> 00:07:25,080
there is a problem with with markers

165
00:07:25,080 --> 00:07:30,120
entitlements because mostly

166
00:07:30,120 --> 00:07:32,780
um Macos verifies

167
00:07:32,780 --> 00:07:35,280
entitlements on the of the running

168
00:07:35,280 --> 00:07:37,500
application of the running process

169
00:07:37,500 --> 00:07:40,139
and if you somehow make that process

170
00:07:40,139 --> 00:07:43,139
load your code and you will execute this

171
00:07:43,139 --> 00:07:46,259
this code in the context of the process

172
00:07:46,259 --> 00:07:48,599
markers will will be totally okay with

173
00:07:48,599 --> 00:07:49,860
that

174
00:07:49,860 --> 00:07:50,639
um

175
00:07:50,639 --> 00:07:53,039
so this is this is this this is really a

176
00:07:53,039 --> 00:07:54,780
problem and we found like many

177
00:07:54,780 --> 00:07:57,060
vulnerabilities

178
00:07:57,060 --> 00:08:00,360
um in the code injection types

179
00:08:00,360 --> 00:08:04,020
so for today's talk I I selected the

180
00:08:04,020 --> 00:08:06,510
iCloud caliper xpc

181
00:08:06,510 --> 00:08:07,740
[Music]

182
00:08:07,740 --> 00:08:11,699
helper that under the hood it uses an

183
00:08:11,699 --> 00:08:14,880
old C based xpc API for inter-process

184
00:08:14,880 --> 00:08:18,080
communication and it will provide us

185
00:08:18,080 --> 00:08:21,680
iCloud tokens when nicely asked

186
00:08:21,680 --> 00:08:25,259
by the way I made the whole series about

187
00:08:25,259 --> 00:08:28,319
exploiting xpc on on Marcus so if you

188
00:08:28,319 --> 00:08:31,020
are interested in it feel free to to

189
00:08:31,020 --> 00:08:33,240
visit my blog

190
00:08:33,240 --> 00:08:35,820
but how does it look like that the

191
00:08:35,820 --> 00:08:37,979
helper how does it look like from uh

192
00:08:37,979 --> 00:08:39,779
from our reversing engineering

193
00:08:39,779 --> 00:08:42,599
perspective so there is a method uh

194
00:08:42,599 --> 00:08:45,720
validate client with process identifier

195
00:08:45,720 --> 00:08:49,580
that in the end will create a sec code

196
00:08:49,580 --> 00:08:52,500
of the of the connecting process and

197
00:08:52,500 --> 00:08:55,080
this is Audi token so if you thought

198
00:08:55,080 --> 00:08:57,720
about attacking it via plus identifier

199
00:08:57,720 --> 00:09:00,660
it put into it won't work

200
00:09:00,660 --> 00:09:03,839
um but based on that Audi token this

201
00:09:03,839 --> 00:09:06,060
this helper will verify if the

202
00:09:06,060 --> 00:09:09,480
connecting client has a private iCloud

203
00:09:09,480 --> 00:09:12,180
entitlement

204
00:09:12,180 --> 00:09:15,540
if the client has the entitlement this

205
00:09:15,540 --> 00:09:18,420
this xpc connection will be successfully

206
00:09:18,420 --> 00:09:21,839
handled by the by the helper but the

207
00:09:21,839 --> 00:09:24,120
thing we have to still think about it is

208
00:09:24,120 --> 00:09:27,300
that uh the xpc communication has its

209
00:09:27,300 --> 00:09:30,180
own structure so we have to uh provide

210
00:09:30,180 --> 00:09:32,279
the struct that that expected structure

211
00:09:32,279 --> 00:09:34,080
to the helper in order to get those

212
00:09:34,080 --> 00:09:36,720
iCloud tokens

213
00:09:36,720 --> 00:09:40,320
so uh let's start with writing the code

214
00:09:40,320 --> 00:09:44,640
that we will be injecting somewhere

215
00:09:44,640 --> 00:09:47,240
um the first thing is that we have to

216
00:09:47,240 --> 00:09:50,160
establish the xpc connection

217
00:09:50,160 --> 00:09:53,820
uh provide the structure that the helper

218
00:09:53,820 --> 00:09:55,140
expects for

219
00:09:55,140 --> 00:09:59,160
and send it and receive the the response

220
00:09:59,160 --> 00:10:01,459
from it

221
00:10:01,500 --> 00:10:06,120
okay so now where we can inject this our

222
00:10:06,120 --> 00:10:07,440
malicious code

223
00:10:07,440 --> 00:10:11,100
so it turns out that GarageBand has a

224
00:10:11,100 --> 00:10:13,860
private iCloud entitlement and disables

225
00:10:13,860 --> 00:10:15,300
Library validation

226
00:10:15,300 --> 00:10:19,560
and modification one of those Dynamic

227
00:10:19,560 --> 00:10:22,160
libraries that garage GarageBand loads

228
00:10:22,160 --> 00:10:26,640
will give us the privileged context of

229
00:10:26,640 --> 00:10:28,620
the garage event with that private

230
00:10:28,620 --> 00:10:31,740
iCloud entitlement and with with that

231
00:10:31,740 --> 00:10:33,839
knowledge we will be able to use that

232
00:10:33,839 --> 00:10:36,660
code I showed you to successfully

233
00:10:36,660 --> 00:10:40,440
connect to the iCloud helper

234
00:10:40,440 --> 00:10:44,880
so let's confirm if if we can easily

235
00:10:44,880 --> 00:10:48,060
inject you to to the GarageBand it

236
00:10:48,060 --> 00:10:51,899
turned out that as you can see here on

237
00:10:51,899 --> 00:10:53,700
the slide there is hardened runtime

238
00:10:53,700 --> 00:10:56,399
there on when hardened runtime is turned

239
00:10:56,399 --> 00:10:59,000
on the the application

240
00:10:59,000 --> 00:11:02,160
will not allow you injecting your code

241
00:11:02,160 --> 00:11:05,459
unless it is signed with apple or the

242
00:11:05,459 --> 00:11:08,040
same developer certificate

243
00:11:08,040 --> 00:11:09,560
however

244
00:11:09,560 --> 00:11:13,079
developers on purpose can disable some

245
00:11:13,079 --> 00:11:15,420
of the hardened runtime features and

246
00:11:15,420 --> 00:11:18,540
that was the case in GarageBand so as

247
00:11:18,540 --> 00:11:20,220
you can see the private iCloud account

248
00:11:20,220 --> 00:11:22,079
access and in the same time design

249
00:11:22,079 --> 00:11:26,040
Library validation entitlement

250
00:11:26,040 --> 00:11:29,120
so yeah let's now find a Target

251
00:11:29,120 --> 00:11:32,519
framework which we can do a dial-up

252
00:11:32,519 --> 00:11:33,920
proxy attack

253
00:11:33,920 --> 00:11:36,959
so if you open GarageBand and you will

254
00:11:36,959 --> 00:11:39,480
take a look at the frame structure you

255
00:11:39,480 --> 00:11:41,820
will see a plenty of Frameworks so for

256
00:11:41,820 --> 00:11:44,279
for for the exploitation I took the

257
00:11:44,279 --> 00:11:47,700
oauth 2 client framework

258
00:11:47,700 --> 00:11:50,820
and because I'm a big fan of our

259
00:11:50,820 --> 00:11:53,220
automation of of the exploitation

260
00:11:53,220 --> 00:11:55,560
process and I really recommend you doing

261
00:11:55,560 --> 00:11:57,600
the same because when Apple reaches you

262
00:11:57,600 --> 00:12:01,200
out after some time and asks you oh has

263
00:12:01,200 --> 00:12:03,420
this been properly fixed you can just

264
00:12:03,420 --> 00:12:05,339
run the script and you will see if that

265
00:12:05,339 --> 00:12:07,019
was fixed or not right

266
00:12:07,019 --> 00:12:10,260
if the exploits still work uh but yeah

267
00:12:10,260 --> 00:12:12,959
that's that that's the shell script that

268
00:12:12,959 --> 00:12:14,820
was included in my in my proof of

269
00:12:14,820 --> 00:12:19,140
concept so let's take a look at it so at

270
00:12:19,140 --> 00:12:21,660
first I was coping the GarageBand to

271
00:12:21,660 --> 00:12:24,839
Temporary directory I was removing the

272
00:12:24,839 --> 00:12:28,200
the signature but only of the framework

273
00:12:28,200 --> 00:12:32,160
that we are going to uh to proxy

274
00:12:32,160 --> 00:12:35,040
um I moved the the exec the the the

275
00:12:35,040 --> 00:12:37,380
dial-up of that framework to to a new

276
00:12:37,380 --> 00:12:38,940
location just by

277
00:12:38,940 --> 00:12:42,300
appending it with one on at the end

278
00:12:42,300 --> 00:12:44,880
I copied

279
00:12:44,880 --> 00:12:46,019
um

280
00:12:46,019 --> 00:12:49,380
uh the proxy dialip that I compiled that

281
00:12:49,380 --> 00:12:52,860
one with the c code I showed you before

282
00:12:52,860 --> 00:12:56,279
I once again removed the signature again

283
00:12:56,279 --> 00:12:58,040
of the whole framework

284
00:12:58,040 --> 00:13:01,860
uh fix some air puff stuff

285
00:13:01,860 --> 00:13:05,760
then I copied the the vulnerable

286
00:13:05,760 --> 00:13:07,680
um it's not the herb actually the the

287
00:13:07,680 --> 00:13:09,600
iCloud helper that will provide us the

288
00:13:09,600 --> 00:13:12,660
iCloud tokens and in the end

289
00:13:12,660 --> 00:13:16,320
just I had to open GarageBand

290
00:13:16,320 --> 00:13:19,920
so now I will show you the the demo

291
00:13:19,920 --> 00:13:23,120
that's the xcode project

292
00:13:26,519 --> 00:13:28,380
well it's it's really simple it will and

293
00:13:28,380 --> 00:13:30,600
will take a while to to compile it and

294
00:13:30,600 --> 00:13:32,880
and copy the GarageBand to the proper

295
00:13:32,880 --> 00:13:36,240
location but as you can see that's the

296
00:13:36,240 --> 00:13:39,180
that's the bar script

297
00:13:39,180 --> 00:13:42,079
the same one

298
00:13:42,600 --> 00:13:45,660
I have to be patient for a while

299
00:13:45,660 --> 00:13:47,820
because the extra is required to copy

300
00:13:47,820 --> 00:13:49,940
the whole GarageBand to TMP

301
00:13:49,940 --> 00:13:53,760
and when I launch it the gatekeeper you

302
00:13:53,760 --> 00:13:57,800
know as you can see has to check it

303
00:13:58,500 --> 00:14:02,779
but once it's checked

304
00:14:04,860 --> 00:14:07,920
the exploit will NS log the the results

305
00:14:07,920 --> 00:14:11,719
and and the console

306
00:14:16,320 --> 00:14:18,720
yeah so we have all all of the the

307
00:14:18,720 --> 00:14:20,519
tokens

308
00:14:20,519 --> 00:14:24,720
um which were stored in in iCloud helper

309
00:14:24,720 --> 00:14:27,000
and as you can see there is a lot of

310
00:14:27,000 --> 00:14:29,339
different sometimes juicy information

311
00:14:29,339 --> 00:14:33,680
about your your Apple account

312
00:14:35,820 --> 00:14:40,139
and it was fixed already so that's good

313
00:14:40,139 --> 00:14:43,199
you are not vulnerable to it anymore

314
00:14:43,199 --> 00:14:45,800
and then the the the second

315
00:14:45,800 --> 00:14:48,959
application that was vulnerable to uh to

316
00:14:48,959 --> 00:14:51,899
this attack was iMovie and the thing

317
00:14:51,899 --> 00:14:55,699
with iMovie was even simpler

318
00:14:55,699 --> 00:14:59,940
because I movie had the same private and

319
00:14:59,940 --> 00:15:02,699
private iCloud entitlement but in the

320
00:15:02,699 --> 00:15:04,680
same time it didn't have the hardened

321
00:15:04,680 --> 00:15:08,040
runtime internal at all so

322
00:15:08,040 --> 00:15:12,120
you may ask okay but even if it does not

323
00:15:12,120 --> 00:15:14,760
have the hardened runtime turned on it's

324
00:15:14,760 --> 00:15:17,040
still an application signed by Apple

325
00:15:17,040 --> 00:15:19,139
right so the build insert libraries

326
00:15:19,139 --> 00:15:20,779
should not work

327
00:15:20,779 --> 00:15:24,720
but the thing is that if

328
00:15:24,720 --> 00:15:27,139
um Apple signed their applications with

329
00:15:27,139 --> 00:15:30,060
the App Store certificate it's a

330
00:15:30,060 --> 00:15:32,339
different certificate which will allow

331
00:15:32,339 --> 00:15:34,800
us to to inject code with build insert

332
00:15:34,800 --> 00:15:36,060
libraries

333
00:15:36,060 --> 00:15:39,440
so yeah the the same scenario we inject

334
00:15:39,440 --> 00:15:43,019
our compile dialip to to the to the

335
00:15:43,019 --> 00:15:46,740
iMovie and again we will be able to to

336
00:15:46,740 --> 00:15:49,380
do the same so just to prove it flux

337
00:15:49,380 --> 00:15:52,800
only kill flag is turned on in iMovie

338
00:15:52,800 --> 00:15:56,160
um as you can see this this certificate

339
00:15:56,160 --> 00:15:59,459
has team identifier so does it it means

340
00:15:59,459 --> 00:16:01,380
that that that's the

341
00:16:01,380 --> 00:16:03,959
um certificate that Apple uses for for

342
00:16:03,959 --> 00:16:07,440
deploying app stores applications

343
00:16:07,440 --> 00:16:09,240
and yeah

344
00:16:09,240 --> 00:16:12,180
the private iCloud accents uh

345
00:16:12,180 --> 00:16:14,279
entitlement

346
00:16:14,279 --> 00:16:17,459
the exploitation code is really simple

347
00:16:17,459 --> 00:16:20,339
just I was copying the iMovie to to

348
00:16:20,339 --> 00:16:22,980
temporal directory uh once again I

349
00:16:22,980 --> 00:16:26,519
copied the framework and

350
00:16:26,519 --> 00:16:28,680
and by adult insert libraries I was

351
00:16:28,680 --> 00:16:29,899
injecting there

352
00:16:29,899 --> 00:16:33,060
the malicious Dynamic library right to

353
00:16:33,060 --> 00:16:35,160
them today movie

354
00:16:35,160 --> 00:16:37,680
and just to just to prove it that the

355
00:16:37,680 --> 00:16:40,259
the exploitation succeeded uh you can

356
00:16:40,259 --> 00:16:43,079
see the same the same response with the

357
00:16:43,079 --> 00:16:45,120
with the iCloud tokens

358
00:16:45,120 --> 00:16:48,420
it was fixed so by the way congrats to

359
00:16:48,420 --> 00:16:50,720
all other researchers that found this

360
00:16:50,720 --> 00:16:53,639
vulnerability also

361
00:16:53,639 --> 00:16:58,440
um but then when there was an advisory

362
00:16:58,440 --> 00:17:00,839
that that Apple fixed that that

363
00:17:00,839 --> 00:17:03,300
application I was wondering how did they

364
00:17:03,300 --> 00:17:08,579
do it so I took a look at it once again

365
00:17:08,579 --> 00:17:11,939
and in turn on that the uh that the

366
00:17:11,939 --> 00:17:14,040
exploit was that the effects was not

367
00:17:14,040 --> 00:17:17,939
complete and as you can see an advisory

368
00:17:17,939 --> 00:17:20,040
take a look at this description the

369
00:17:20,040 --> 00:17:21,780
issue was others by enable card and

370
00:17:21,780 --> 00:17:23,160
runtime

371
00:17:23,160 --> 00:17:25,859
and this this description is the is the

372
00:17:25,859 --> 00:17:27,720
same so I was you know like a bit

373
00:17:27,720 --> 00:17:31,140
confused like so in the end what change

374
00:17:31,140 --> 00:17:34,140
right it turned out that

375
00:17:34,140 --> 00:17:35,960
um Apple have

376
00:17:35,960 --> 00:17:38,520
made a new way to fix downgrade

377
00:17:38,520 --> 00:17:40,980
vulnerabilities and that's a it's a good

378
00:17:40,980 --> 00:17:42,170
technique I have to say

379
00:17:42,170 --> 00:17:42,539
[Music]

380
00:17:42,539 --> 00:17:43,500
um

381
00:17:43,500 --> 00:17:48,059
so now Apple if if there will be a

382
00:17:48,059 --> 00:17:49,919
possibility for downgrade attack for one

383
00:17:49,919 --> 00:17:52,380
of your exploits they ban those

384
00:17:52,380 --> 00:17:56,940
applications directly in amphi so as you

385
00:17:56,940 --> 00:17:58,799
can see this is a screenshot directly

386
00:17:58,799 --> 00:18:01,880
from the amphi the compilation

387
00:18:01,880 --> 00:18:06,080
so they set a list of

388
00:18:06,080 --> 00:18:09,539
requirements for the apps and they set

389
00:18:09,539 --> 00:18:13,620
it by the the they determine which which

390
00:18:13,620 --> 00:18:16,020
Apple ID which I'm sorry bundle ID

391
00:18:16,020 --> 00:18:19,380
should obey those rules and if you for

392
00:18:19,380 --> 00:18:23,280
example take now an iMovie M5 will say

393
00:18:23,280 --> 00:18:25,919
oh this iMovie doesn't have the hardened

394
00:18:25,919 --> 00:18:29,400
runtime turn on so it is not um

395
00:18:29,400 --> 00:18:31,380
it's not ready to be launched right so

396
00:18:31,380 --> 00:18:33,059
this is now how those vulnerabilities

397
00:18:33,059 --> 00:18:35,940
are fixed but

398
00:18:35,940 --> 00:18:38,220
coming back to to the exploitation

399
00:18:38,220 --> 00:18:41,700
process I was wondering what are those

400
00:18:41,700 --> 00:18:45,299
iCloud tokens so those are stored in

401
00:18:45,299 --> 00:18:47,760
Macos keychain under the the following

402
00:18:47,760 --> 00:18:50,940
names so as you can see there is Juicy

403
00:18:50,940 --> 00:18:53,100
stuff like iCloud token find my friends

404
00:18:53,100 --> 00:18:55,980
app token key transparency token Maps

405
00:18:55,980 --> 00:18:59,280
token applicant token device locator

406
00:18:59,280 --> 00:19:04,140
token so a lot of Juicy tokens right the

407
00:19:04,140 --> 00:19:07,260
iCloud helper could give to you

408
00:19:07,260 --> 00:19:10,020
so now let's let's do something with

409
00:19:10,020 --> 00:19:11,360
those tokens

410
00:19:11,360 --> 00:19:15,419
so I made a new VM I disabled system

411
00:19:15,419 --> 00:19:18,780
Integrity production protection I opened

412
00:19:18,780 --> 00:19:21,600
an HTTP proxy and I was you know opening

413
00:19:21,600 --> 00:19:23,700
all the all the applications that

414
00:19:23,700 --> 00:19:25,740
synchronize somehow their data with

415
00:19:25,740 --> 00:19:26,700
iCloud

416
00:19:26,700 --> 00:19:30,840
and yeah for example uh how does the

417
00:19:30,840 --> 00:19:34,620
find my application on your Mac gets

418
00:19:34,620 --> 00:19:38,220
your location so it's really simple it's

419
00:19:38,220 --> 00:19:43,679
just send send an HTTP post request to

420
00:19:43,679 --> 00:19:46,080
the following URL

421
00:19:46,080 --> 00:19:48,299
it provides the token

422
00:19:48,299 --> 00:19:50,160
and that's it

423
00:19:50,160 --> 00:19:51,360
so

424
00:19:51,360 --> 00:19:54,360
especially for reporting purposes to

425
00:19:54,360 --> 00:19:59,360
Apple I prepared a quick demo

426
00:20:00,059 --> 00:20:04,620
so you open it provide the the the token

427
00:20:04,620 --> 00:20:06,720
under the hood it refreshes Define my

428
00:20:06,720 --> 00:20:09,480
session because it was required to do so

429
00:20:09,480 --> 00:20:11,340
and in the response

430
00:20:11,340 --> 00:20:15,660
again Json but if you grab for latitude

431
00:20:15,660 --> 00:20:18,299
or or long longitude

432
00:20:18,299 --> 00:20:19,140
um

433
00:20:19,140 --> 00:20:21,780
you get an unauthorized access to two

434
00:20:21,780 --> 00:20:23,700
location data right without raising any

435
00:20:23,700 --> 00:20:27,980
prompts and without root of course

436
00:20:28,280 --> 00:20:31,260
how it works with contacts

437
00:20:31,260 --> 00:20:36,000
almost the same HTTP request so but this

438
00:20:36,000 --> 00:20:38,940
is a two-step exploitation at first you

439
00:20:38,940 --> 00:20:42,780
have to ask about the VCF files and then

440
00:20:42,780 --> 00:20:44,760
when you grab the the name of the VCF

441
00:20:44,760 --> 00:20:46,039
file

442
00:20:46,039 --> 00:20:49,440
uh you in the second request you request

443
00:20:49,440 --> 00:20:53,400
for it and iCloud will happily return to

444
00:20:53,400 --> 00:20:56,880
you with your contacts data again

445
00:20:56,880 --> 00:21:00,120
without any additional TCC prompts as as

446
00:21:00,120 --> 00:21:01,919
I showed you at the beginning of this

447
00:21:01,919 --> 00:21:04,280
presentation when I was trying to access

448
00:21:04,280 --> 00:21:06,840
contacts from terminal there is a

449
00:21:06,840 --> 00:21:08,880
problem right this this time we have

450
00:21:08,880 --> 00:21:11,220
access to to the contacts without Rising

451
00:21:11,220 --> 00:21:12,900
any problem but not by bypassing local

452
00:21:12,900 --> 00:21:15,720
mechanisms but by directly asking for it

453
00:21:15,720 --> 00:21:17,880
the iCloud

454
00:21:17,880 --> 00:21:22,080
uh calendar very same technique again

455
00:21:22,080 --> 00:21:26,160
two steps so you firstly ask for for the

456
00:21:26,160 --> 00:21:29,580
ICS and then

457
00:21:29,580 --> 00:21:34,140
um you get the the events you have uh

458
00:21:34,140 --> 00:21:36,900
stored in your in your calendar you may

459
00:21:36,900 --> 00:21:41,100
also ask me what's that number that's

460
00:21:41,100 --> 00:21:44,299
your iCloud identifier

461
00:21:44,299 --> 00:21:48,720
but in the iCloud caliper xpc response

462
00:21:48,720 --> 00:21:50,580
it's included so you can just take it

463
00:21:50,580 --> 00:21:54,000
from it and and you have all URL set you

464
00:21:54,000 --> 00:21:57,240
have everything you need to exploit it

465
00:21:57,240 --> 00:21:59,640
um the same with reminders again an XP

466
00:21:59,640 --> 00:22:02,700
an HTTP request and that's it we have

467
00:22:02,700 --> 00:22:05,580
access to to the iCloud data

468
00:22:05,580 --> 00:22:08,760
but I said at the beginning that this

469
00:22:08,760 --> 00:22:11,640
research is not completed uh there is

470
00:22:11,640 --> 00:22:13,559
still something to do so if you'd like

471
00:22:13,559 --> 00:22:18,419
to poke with iCloud notes use it photos

472
00:22:18,419 --> 00:22:21,539
for example iMessages

473
00:22:21,539 --> 00:22:24,179
I when I was proxing those three

474
00:22:24,179 --> 00:22:27,000
applications under the hood I saw that

475
00:22:27,000 --> 00:22:30,240
they use protobuf so it's kind of harder

476
00:22:30,240 --> 00:22:32,460
to reverse but it's of course doable so

477
00:22:32,460 --> 00:22:34,460
if you'd like to

478
00:22:34,460 --> 00:22:37,740
do such research you feel free to do it

479
00:22:37,740 --> 00:22:39,120
it's still open

480
00:22:39,120 --> 00:22:42,960
uh yeah so uh regarding the conclusion

481
00:22:42,960 --> 00:22:44,640
so it at the beginning of this

482
00:22:44,640 --> 00:22:47,100
presentation I quickly introduced you to

483
00:22:47,100 --> 00:22:50,700
basic Mac OS security mechanisms uh then

484
00:22:50,700 --> 00:22:53,960
we attacked the TCC without actual

485
00:22:53,960 --> 00:22:57,059
thought touching TCC we took all those

486
00:22:57,059 --> 00:23:00,480
information directly from iCloud so now

487
00:23:00,480 --> 00:23:02,760
you may ask me okay vertex so how to

488
00:23:02,760 --> 00:23:05,460
protect of course at first update your

489
00:23:05,460 --> 00:23:06,539
Macs

490
00:23:06,539 --> 00:23:09,200
and check your iCloud settings

491
00:23:09,200 --> 00:23:12,059
by default you synchronize probably all

492
00:23:12,059 --> 00:23:13,440
of your

493
00:23:13,440 --> 00:23:16,559
um data that that should be synchronized

494
00:23:16,559 --> 00:23:18,360
with iCloud but maybe you're not happy

495
00:23:18,360 --> 00:23:21,179
with synchronizing all of your data from

496
00:23:21,179 --> 00:23:24,600
photos mail contacts Etc so just feel

497
00:23:24,600 --> 00:23:27,179
free to disable it if you if you would

498
00:23:27,179 --> 00:23:29,640
don't like to uh to share those data

499
00:23:29,640 --> 00:23:32,280
with with iCloud

500
00:23:32,280 --> 00:23:34,080
and that's it for today's presentation

501
00:23:34,080 --> 00:23:35,620
so thank you very much

502
00:23:35,620 --> 00:23:42,699
[Applause]

