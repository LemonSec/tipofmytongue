1
00:00:00,659 --> 00:00:03,559
bye

2
00:00:07,919 --> 00:00:10,500
yeah first talk I think that technically

3
00:00:10,500 --> 00:00:12,599
Patrick you said keynote this was the

4
00:00:12,599 --> 00:00:15,200
keynote yeah

5
00:00:15,780 --> 00:00:17,340
um so yeah we'll go ahead and get

6
00:00:17,340 --> 00:00:18,359
started here

7
00:00:18,359 --> 00:00:20,699
my name is Jaren uh presenting here with

8
00:00:20,699 --> 00:00:23,460
my co-worker and friend Fairdale saljuki

9
00:00:23,460 --> 00:00:26,699
also known as Sal uh we both work at

10
00:00:26,699 --> 00:00:28,699
jamf threat Labs

11
00:00:28,699 --> 00:00:31,140
where forage amp protect where we

12
00:00:31,140 --> 00:00:33,360
develop new detections uh to try and

13
00:00:33,360 --> 00:00:37,020
keep users safe on Mac OS

14
00:00:37,020 --> 00:00:38,340
foreign

15
00:00:38,340 --> 00:00:42,000
So today we're going to talk about quite

16
00:00:42,000 --> 00:00:43,020
a few things actually we're going to

17
00:00:43,020 --> 00:00:45,360
talk about gatekeeper in general uh both

18
00:00:45,360 --> 00:00:47,879
cves we'll be discussing today are

19
00:00:47,879 --> 00:00:50,160
gatekeeper bypasses

20
00:00:50,160 --> 00:00:51,360
um so we'll get into the vulnerability

21
00:00:51,360 --> 00:00:53,760
Discovery and kind of our process uh and

22
00:00:53,760 --> 00:00:55,500
then uh we'll we'll kind of wrap up with

23
00:00:55,500 --> 00:00:57,000
some of the detections and some some

24
00:00:57,000 --> 00:00:59,280
quick notes about detections and how we

25
00:00:59,280 --> 00:01:02,340
pick up on this type of stuff

26
00:01:02,340 --> 00:01:05,099
so first for everybody if you're not

27
00:01:05,099 --> 00:01:07,740
familiar with gatekeeper uh gatekeeper

28
00:01:07,740 --> 00:01:09,659
is just a security feature built into

29
00:01:09,659 --> 00:01:12,479
Mac OS that ensures only trusted

30
00:01:12,479 --> 00:01:15,479
software runs on the system by verifying

31
00:01:15,479 --> 00:01:17,700
notarization and code signing

32
00:01:17,700 --> 00:01:20,040
information so in order to run software

33
00:01:20,040 --> 00:01:22,799
without a hitch on Mac these days it has

34
00:01:22,799 --> 00:01:25,020
to be scanned and approved by Apple this

35
00:01:25,020 --> 00:01:27,479
is the notarization side of things it

36
00:01:27,479 --> 00:01:29,640
also has to be signed with a legitimate

37
00:01:29,640 --> 00:01:31,920
developer certificate which costs about

38
00:01:31,920 --> 00:01:34,140
a hundred dollars from Apple if Apple

39
00:01:34,140 --> 00:01:36,060
determines your developer certificate

40
00:01:36,060 --> 00:01:38,400
has been used to sign malware they can

41
00:01:38,400 --> 00:01:40,259
revoke your certificate effectively

42
00:01:40,259 --> 00:01:42,479
blocking anything you've written

43
00:01:42,479 --> 00:01:45,299
naturally attackers have found value in

44
00:01:45,299 --> 00:01:49,740
evading these types of Security checks

45
00:01:49,740 --> 00:01:52,740
so uh the first issue uh we'll cover

46
00:01:52,740 --> 00:01:55,560
today has affected multiple different

47
00:01:55,560 --> 00:01:58,619
archiving functionalities in Mac OS and

48
00:01:58,619 --> 00:02:01,860
uh it's at the uh it's it's an issue

49
00:02:01,860 --> 00:02:04,560
um uh deep within the system uh when it

50
00:02:04,560 --> 00:02:07,140
comes to parsing the bill of materials

51
00:02:07,140 --> 00:02:08,818
uh and today we're essentially going to

52
00:02:08,818 --> 00:02:11,400
show how this issue doesn't necessarily

53
00:02:11,400 --> 00:02:13,080
seem like it might be connected to

54
00:02:13,080 --> 00:02:15,720
gatekeeper But ultimately uh can be

55
00:02:15,720 --> 00:02:18,120
abused to allow applications to slip

56
00:02:18,120 --> 00:02:19,920
past it

57
00:02:19,920 --> 00:02:22,920
so the gatekeeper check depends on very

58
00:02:22,920 --> 00:02:25,980
a very specific file attribute existing

59
00:02:25,980 --> 00:02:28,620
on programs so when you download an app

60
00:02:28,620 --> 00:02:30,480
from the internet so long as you're

61
00:02:30,480 --> 00:02:33,900
using Apple apis to do so uh that file

62
00:02:33,900 --> 00:02:35,760
is tagged with an extended attribute

63
00:02:35,760 --> 00:02:37,640
called

64
00:02:37,640 --> 00:02:40,020
com.apple.quarantine so when the app is

65
00:02:40,020 --> 00:02:42,000
opened the operating system looks for

66
00:02:42,000 --> 00:02:45,120
that extended attribute if it exists on

67
00:02:45,120 --> 00:02:47,340
the application bundle then the

68
00:02:47,340 --> 00:02:49,200
application will be scanned by

69
00:02:49,200 --> 00:02:51,660
GateKeeper

70
00:02:51,660 --> 00:02:55,019
so this brings us to itch.io a website

71
00:02:55,019 --> 00:02:57,660
where Indie Games can be downloaded and

72
00:02:57,660 --> 00:03:01,379
managed by indie game developers

73
00:03:01,379 --> 00:03:03,239
we notice that when we downloaded some

74
00:03:03,239 --> 00:03:05,459
games from the website the application

75
00:03:05,459 --> 00:03:07,980
directory itself would not have the

76
00:03:07,980 --> 00:03:10,680
quarantine attribute on it so most times

77
00:03:10,680 --> 00:03:13,019
the other files in the app did so you

78
00:03:13,019 --> 00:03:14,940
can see everything recursively here does

79
00:03:14,940 --> 00:03:17,099
have the quarantine attributes but the

80
00:03:17,099 --> 00:03:20,159
app itself the app bundle itself the

81
00:03:20,159 --> 00:03:22,440
directory itself would not actually have

82
00:03:22,440 --> 00:03:25,739
it and as it turns out this is all

83
00:03:25,739 --> 00:03:27,540
gatekeeper actually cares about when

84
00:03:27,540 --> 00:03:30,799
when launching an application

85
00:03:31,140 --> 00:03:33,480
um so if we went into it when when we

86
00:03:33,480 --> 00:03:34,980
took these apps and we took a closer

87
00:03:34,980 --> 00:03:36,720
look some of them we noticed were

88
00:03:36,720 --> 00:03:38,280
completely unsigned

89
00:03:38,280 --> 00:03:40,680
um and completely unnotarized and again

90
00:03:40,680 --> 00:03:42,780
down at the bottom you can see the path

91
00:03:42,780 --> 00:03:44,819
to the binary does have the quarantine

92
00:03:44,819 --> 00:03:47,819
attribute uh but uh the the app bundle

93
00:03:47,819 --> 00:03:51,840
itself did not and completely unsigned

94
00:03:51,840 --> 00:03:54,239
so we didn't believe that these apps

95
00:03:54,239 --> 00:03:56,280
that we were downloading were were

96
00:03:56,280 --> 00:03:58,500
bypassing gatekeeper intentionally by

97
00:03:58,500 --> 00:04:01,560
any means we dug into it and as it turns

98
00:04:01,560 --> 00:04:04,920
out this website has its own open source

99
00:04:04,920 --> 00:04:07,799
tool called Butler that helps developers

100
00:04:07,799 --> 00:04:10,200
manage updates and get those updates out

101
00:04:10,200 --> 00:04:13,459
to users does this by taking games

102
00:04:13,459 --> 00:04:16,019
which were applications in the case of

103
00:04:16,019 --> 00:04:18,839
Mac OS and doing some manual creation of

104
00:04:18,839 --> 00:04:22,320
zip files with some go code where an

105
00:04:22,320 --> 00:04:26,280
archive file an archive file hosting the

106
00:04:26,280 --> 00:04:28,380
game ultimately makes its way to the

107
00:04:28,380 --> 00:04:30,419
website or to the client application

108
00:04:30,419 --> 00:04:34,500
that users can also use for the website

109
00:04:34,500 --> 00:04:36,720
so a funny thing we noticed is that if

110
00:04:36,720 --> 00:04:38,600
we downloaded these zipped applications

111
00:04:38,600 --> 00:04:41,639
using Chrome or Firefox there wouldn't

112
00:04:41,639 --> 00:04:43,560
be any issues the user would open the

113
00:04:43,560 --> 00:04:46,020
zip file which held the application and

114
00:04:46,020 --> 00:04:48,060
then the application would be blocked by

115
00:04:48,060 --> 00:04:50,160
gatekeeper due to its lack of signing so

116
00:04:50,160 --> 00:04:52,320
that told us that the issue had to be

117
00:04:52,320 --> 00:04:54,600
within Safari itself somewhere so we

118
00:04:54,600 --> 00:04:57,180
started trying to pinpoint uh where this

119
00:04:57,180 --> 00:05:00,720
bug existed in safari

120
00:05:00,720 --> 00:05:03,540
so uh one thing we did know is that when

121
00:05:03,540 --> 00:05:05,880
you use Safari to download a zip file

122
00:05:05,880 --> 00:05:08,699
that holds an application within it that

123
00:05:08,699 --> 00:05:11,040
zip file appears in your dock for a very

124
00:05:11,040 --> 00:05:13,139
brief moment and then almost immediately

125
00:05:13,139 --> 00:05:15,660
is unzipped for you

126
00:05:15,660 --> 00:05:18,600
by default Safari will open what it

127
00:05:18,600 --> 00:05:21,720
deems safe files after downloading since

128
00:05:21,720 --> 00:05:23,880
an app is just a directory you can

129
00:05:23,880 --> 00:05:26,639
really only download single files from

130
00:05:26,639 --> 00:05:28,320
the internet this feature somewhat

131
00:05:28,320 --> 00:05:30,600
simulates downloading an application by

132
00:05:30,600 --> 00:05:32,940
just kind of unzipping the archive for

133
00:05:32,940 --> 00:05:36,979
you as soon as you've downloaded it

134
00:05:37,259 --> 00:05:40,800
so if we quickly kind of rewinds and

135
00:05:40,800 --> 00:05:43,020
watch all of that in slow motion using

136
00:05:43,020 --> 00:05:45,300
endpoint security what we would actually

137
00:05:45,300 --> 00:05:48,600
see is that after the download occurs

138
00:05:48,600 --> 00:05:52,139
Through Safari the Safari sandbox is

139
00:05:52,139 --> 00:05:54,300
actually what's responsible for creating

140
00:05:54,300 --> 00:05:57,060
a temporary directory and then handling

141
00:05:57,060 --> 00:05:59,699
the unzipping of that archive into the

142
00:05:59,699 --> 00:06:02,580
temporary directory so the Safari

143
00:06:02,580 --> 00:06:04,259
sandbox then takes the quarantine

144
00:06:04,259 --> 00:06:06,720
extended attribute and applies it to the

145
00:06:06,720 --> 00:06:09,300
newly unzipped application so finally

146
00:06:09,300 --> 00:06:11,699
the application is then renamed from the

147
00:06:11,699 --> 00:06:14,160
temp directory to whatever downloads

148
00:06:14,160 --> 00:06:16,020
directory the user has in their

149
00:06:16,020 --> 00:06:17,520
preferences so that's everything that

150
00:06:17,520 --> 00:06:19,919
happened behind the scenes when you

151
00:06:19,919 --> 00:06:22,440
download a zip file and you have the

152
00:06:22,440 --> 00:06:25,680
unzip safe file features enabled

153
00:06:25,680 --> 00:06:28,259
now obviously that application of the

154
00:06:28,259 --> 00:06:29,880
quarantine attribute is a very important

155
00:06:29,880 --> 00:06:31,860
part of this process because if that

156
00:06:31,860 --> 00:06:33,780
doesn't happen then the gatekeeper check

157
00:06:33,780 --> 00:06:37,259
never actually occurs

158
00:06:37,259 --> 00:06:39,419
as you can see here this is the endpoint

159
00:06:39,419 --> 00:06:41,759
security rename event where the sandbox

160
00:06:41,759 --> 00:06:44,340
broker is moving the application from

161
00:06:44,340 --> 00:06:46,979
the temporary directory to the downloads

162
00:06:46,979 --> 00:06:49,400
directory

163
00:06:49,860 --> 00:06:52,800
so upon unarchiving the application from

164
00:06:52,800 --> 00:06:55,080
a normal zip file so let's say we're not

165
00:06:55,080 --> 00:06:56,880
using a zip file that's been you know

166
00:06:56,880 --> 00:07:00,479
set to bypass in any way you take the

167
00:07:00,479 --> 00:07:04,139
bill of materials a bill of materials is

168
00:07:04,139 --> 00:07:07,139
kind of a list of of software that

169
00:07:07,139 --> 00:07:09,000
should be installed generally you think

170
00:07:09,000 --> 00:07:11,460
of it associated with a PKG or something

171
00:07:11,460 --> 00:07:14,460
like that but the the operating system

172
00:07:14,460 --> 00:07:17,819
does keep track of bill of materials for

173
00:07:17,819 --> 00:07:20,639
zip files as well so

174
00:07:20,639 --> 00:07:22,979
um so the bomb seen on the right here

175
00:07:22,979 --> 00:07:25,620
will keep track of each file that gets

176
00:07:25,620 --> 00:07:28,380
unarchived from the zip the unarchiving

177
00:07:28,380 --> 00:07:31,380
logic then goes through each file and

178
00:07:31,380 --> 00:07:32,340
um

179
00:07:32,340 --> 00:07:34,080
it goes through each file in the bomb

180
00:07:34,080 --> 00:07:35,819
and applies the quarantine attribute

181
00:07:35,819 --> 00:07:38,400
fittingly using this copy quarantine

182
00:07:38,400 --> 00:07:41,280
function so everything in the bomb gets

183
00:07:41,280 --> 00:07:42,720
the copy quarantine function run

184
00:07:42,720 --> 00:07:45,360
accordingly

185
00:07:45,360 --> 00:07:47,220
but one big thing we noticed when

186
00:07:47,220 --> 00:07:50,280
analyzing a normal application in a hex

187
00:07:50,280 --> 00:07:52,940
editor is that the first zip file editor

188
00:07:52,940 --> 00:07:55,919
starts at the root application directory

189
00:07:55,919 --> 00:07:57,860
as you might expect

190
00:07:57,860 --> 00:08:00,479
test.app in this case so the quarantine

191
00:08:00,479 --> 00:08:02,759
attribute would always be applied as

192
00:08:02,759 --> 00:08:04,080
expected in this case in other words

193
00:08:04,080 --> 00:08:05,460
gatekeeper would always show up

194
00:08:05,460 --> 00:08:09,360
everything would work as it should

195
00:08:09,360 --> 00:08:11,099
um the zip files we are downloading from

196
00:08:11,099 --> 00:08:14,280
the internet from itch.io that were

197
00:08:14,280 --> 00:08:16,620
unknowingly bypassing gatekeeper were

198
00:08:16,620 --> 00:08:19,379
actually missing this root level header

199
00:08:19,379 --> 00:08:21,979
and instead started at the applications

200
00:08:21,979 --> 00:08:25,758
contents directory

201
00:08:26,819 --> 00:08:29,220
so if we take one of these uh if we take

202
00:08:29,220 --> 00:08:31,440
one of these normal zip files that you

203
00:08:31,440 --> 00:08:33,659
know we had created the standard way and

204
00:08:33,659 --> 00:08:36,120
we removed the top level header

205
00:08:36,120 --> 00:08:39,059
we see that when the bomb gets parsed

206
00:08:39,059 --> 00:08:41,580
once again on the right

207
00:08:41,580 --> 00:08:44,159
uh the application root directory would

208
00:08:44,159 --> 00:08:45,899
be missing from the bomb however the

209
00:08:45,899 --> 00:08:48,360
application would continue to unzip and

210
00:08:48,360 --> 00:08:50,940
operate normally

211
00:08:50,940 --> 00:08:53,279
so when the copy copy quarantine

212
00:08:53,279 --> 00:08:54,660
function references the bill of

213
00:08:54,660 --> 00:08:56,339
materials and applies the quarantine

214
00:08:56,339 --> 00:08:58,140
attribute it ends up missing the app

215
00:08:58,140 --> 00:09:00,660
directory itself since the bomb was in

216
00:09:00,660 --> 00:09:04,160
some manner out of sync

217
00:09:04,380 --> 00:09:06,959
so Sal and I started talking about how

218
00:09:06,959 --> 00:09:08,880
to take this vulnerability and weaponize

219
00:09:08,880 --> 00:09:09,839
it

220
00:09:09,839 --> 00:09:11,880
and I quickly built a working approach

221
00:09:11,880 --> 00:09:14,399
where we basically take any unsigned

222
00:09:14,399 --> 00:09:16,080
application and compress it into a zip

223
00:09:16,080 --> 00:09:19,080
file and next we would use Python and

224
00:09:19,080 --> 00:09:21,060
inspect the contents of that zip file

225
00:09:21,060 --> 00:09:23,580
and remove all the bytes inside the

226
00:09:23,580 --> 00:09:25,680
first zip file header thus making the

227
00:09:25,680 --> 00:09:29,339
second zip file header the new first one

228
00:09:29,339 --> 00:09:31,560
and Sal said that's a great idea or we

229
00:09:31,560 --> 00:09:34,440
could just run the zip command

230
00:09:34,440 --> 00:09:36,180
sure enough this this actually results

231
00:09:36,180 --> 00:09:39,480
in the exact same setup that we want

232
00:09:39,480 --> 00:09:42,420
where the whole app is still intact but

233
00:09:42,420 --> 00:09:44,459
the first zip file header starts at the

234
00:09:44,459 --> 00:09:46,440
contents directory so by building an

235
00:09:46,440 --> 00:09:48,360
application and running this single zip

236
00:09:48,360 --> 00:09:51,180
command we would bypass gatekeeper when

237
00:09:51,180 --> 00:09:53,580
downloading uh specifically via Safari

238
00:09:53,580 --> 00:09:55,680
in this case and again this is because

239
00:09:55,680 --> 00:09:58,019
the bill of materials would end up being

240
00:09:58,019 --> 00:09:59,940
out of sync with the actual contents

241
00:09:59,940 --> 00:10:01,980
inside the zip file and this would cause

242
00:10:01,980 --> 00:10:04,019
Safari to skip applying the quarantine

243
00:10:04,019 --> 00:10:06,120
attributes to the application bundle

244
00:10:06,120 --> 00:10:07,800
itself

245
00:10:07,800 --> 00:10:10,080
so I'll pass it off to Sal now who will

246
00:10:10,080 --> 00:10:12,300
talk about another vulnerability he

247
00:10:12,300 --> 00:10:15,300
discovered uh shortly after that looks

248
00:10:15,300 --> 00:10:17,160
very similar to this one but ends up

249
00:10:17,160 --> 00:10:20,839
existing for very different reasons

250
00:10:21,680 --> 00:10:24,600
awesome thank you Jaren I'm excited to

251
00:10:24,600 --> 00:10:26,700
share a new vulnerability that we

252
00:10:26,700 --> 00:10:28,860
discovered uh recently allowing us to

253
00:10:28,860 --> 00:10:30,480
bypass gatekeeper via the archive

254
00:10:30,480 --> 00:10:33,300
utility application on Mac OS we

255
00:10:33,300 --> 00:10:35,399
reported our findings to Apple and they

256
00:10:35,399 --> 00:10:37,860
credited us with this new cve when

257
00:10:37,860 --> 00:10:39,600
downloading a specially crafted archive

258
00:10:39,600 --> 00:10:41,519
and extracting it with archive utility

259
00:10:41,519 --> 00:10:43,620
we were able to bypass all of

260
00:10:43,620 --> 00:10:45,600
Gatekeepers checks and this resulted in

261
00:10:45,600 --> 00:10:47,940
an unnotarized and unsigned application

262
00:10:47,940 --> 00:10:50,040
being executed with no security prompts

263
00:10:50,040 --> 00:10:52,500
displayed to the user whatsoever so

264
00:10:52,500 --> 00:10:54,540
pretty interesting

265
00:10:54,540 --> 00:10:56,700
so let's compare the two CVS at a high

266
00:10:56,700 --> 00:10:58,800
level uh jiren explained how we can use

267
00:10:58,800 --> 00:11:00,480
the zip command to craft an archive that

268
00:11:00,480 --> 00:11:02,519
will allow us to bypass gatekeeper when

269
00:11:02,519 --> 00:11:04,560
downloaded via Safari with the auto and

270
00:11:04,560 --> 00:11:07,140
zip feature enabled using the AAA

271
00:11:07,140 --> 00:11:09,000
utility in a similar command syntax we

272
00:11:09,000 --> 00:11:11,160
can craft an apple archive that allow us

273
00:11:11,160 --> 00:11:12,779
to also bypass gatekeeper when

274
00:11:12,779 --> 00:11:14,160
downloaded from the internet and

275
00:11:14,160 --> 00:11:16,140
extracted with archive utility instead

276
00:11:16,140 --> 00:11:18,000
although these commands look somewhat

277
00:11:18,000 --> 00:11:19,680
similar the new vulnerability is

278
00:11:19,680 --> 00:11:21,899
completely unrelated to the safari one

279
00:11:21,899 --> 00:11:23,760
and the Safari vulnerability affected

280
00:11:23,760 --> 00:11:25,200
the bomb where crafted archive was

281
00:11:25,200 --> 00:11:27,360
downloaded and auto extracted with the

282
00:11:27,360 --> 00:11:31,019
open safe files feature enabled this new

283
00:11:31,019 --> 00:11:32,640
vulnerability affects archive utility

284
00:11:32,640 --> 00:11:34,560
with the way it applies the quarantine

285
00:11:34,560 --> 00:11:36,540
attribute so let's explore this new

286
00:11:36,540 --> 00:11:37,800
vulnerability and how it affects

287
00:11:37,800 --> 00:11:39,540
GateKeeper

288
00:11:39,540 --> 00:11:41,640
so archive utility as you already know

289
00:11:41,640 --> 00:11:43,500
this is an application built into Mac OS

290
00:11:43,500 --> 00:11:45,540
located under the system Library core

291
00:11:45,540 --> 00:11:47,640
Services applications folder it has a

292
00:11:47,640 --> 00:11:49,740
very minimal user interface and users

293
00:11:49,740 --> 00:11:51,420
can simply create archives as well as

294
00:11:51,420 --> 00:11:54,060
extract archives as needed

295
00:11:54,060 --> 00:11:55,740
archive utility supports the number of

296
00:11:55,740 --> 00:11:57,300
archive formats in our research and

297
00:11:57,300 --> 00:11:59,100
testing we've focused on the Apple

298
00:11:59,100 --> 00:12:01,200
archive denoted by the AAR file

299
00:12:01,200 --> 00:12:03,180
extension it's important to note the

300
00:12:03,180 --> 00:12:04,980
vulnerability is not specific to the

301
00:12:04,980 --> 00:12:07,560
Apple archive format and this X in the

302
00:12:07,560 --> 00:12:08,820
exploit section of our talk we'll

303
00:12:08,820 --> 00:12:10,260
actually explain how we can craft a zip

304
00:12:10,260 --> 00:12:12,839
archive to bypass gatekeeper checks as

305
00:12:12,839 --> 00:12:14,339
well but for now we'll focus on the

306
00:12:14,339 --> 00:12:16,140
Apple archive

307
00:12:16,140 --> 00:12:17,760
when downloading an apple archive from

308
00:12:17,760 --> 00:12:19,079
the internet users can simply double

309
00:12:19,079 --> 00:12:20,820
click on the archive to extract its

310
00:12:20,820 --> 00:12:22,620
contents as we see here the Apple

311
00:12:22,620 --> 00:12:24,540
archive is a recognized file and finder

312
00:12:24,540 --> 00:12:26,160
and the default application for handling

313
00:12:26,160 --> 00:12:28,860
Apple archives is archive utility

314
00:12:28,860 --> 00:12:30,120
taking a quick look at some of the

315
00:12:30,120 --> 00:12:32,040
default preferences in archive utility

316
00:12:32,040 --> 00:12:33,839
we see that by default archive utility

317
00:12:33,839 --> 00:12:36,300
will extract the archive into the same

318
00:12:36,300 --> 00:12:38,220
directory as the art will extract the

319
00:12:38,220 --> 00:12:40,079
archive into the same directory as the

320
00:12:40,079 --> 00:12:42,180
archive itself this is typically the

321
00:12:42,180 --> 00:12:45,380
user's downloads folder

322
00:12:45,540 --> 00:12:47,399
so apple has a proprietary archive

323
00:12:47,399 --> 00:12:49,320
format referred to as Apple archive it

324
00:12:49,320 --> 00:12:51,000
allows for multi-threaded losses

325
00:12:51,000 --> 00:12:52,740
compression of directories files and

326
00:12:52,740 --> 00:12:54,839
data including file attributes so using

327
00:12:54,839 --> 00:12:56,639
the AAA command line utility built into

328
00:12:56,639 --> 00:12:58,320
Mac OS we can create and extract

329
00:12:58,320 --> 00:13:00,360
archives as needed however for our

330
00:13:00,360 --> 00:13:01,980
purpose we will use the aatility to

331
00:13:01,980 --> 00:13:03,360
craft various archives and we'll explore

332
00:13:03,360 --> 00:13:05,220
how archive utility will handle on

333
00:13:05,220 --> 00:13:06,300
archiving

334
00:13:06,300 --> 00:13:08,399
as mentioned earlier the vulnerability

335
00:13:08,399 --> 00:13:10,740
is not specific to Apple archive and we

336
00:13:10,740 --> 00:13:12,360
just chose this archive format to ensure

337
00:13:12,360 --> 00:13:13,920
that archive utility will extract it

338
00:13:13,920 --> 00:13:18,540
instead of safari with open safe files

339
00:13:18,540 --> 00:13:20,040
taking a look at the following directory

340
00:13:20,040 --> 00:13:21,420
structure we have a folder named images

341
00:13:21,420 --> 00:13:23,639
which contains a folder named photos and

342
00:13:23,639 --> 00:13:25,740
within that we have three images so a

343
00:13:25,740 --> 00:13:28,079
pretty simple directory structure the

344
00:13:28,079 --> 00:13:29,399
vulnerability has nothing to do with

345
00:13:29,399 --> 00:13:31,139
these images or PNG files and we just

346
00:13:31,139 --> 00:13:32,579
chose this file type for consistency

347
00:13:32,579 --> 00:13:34,079
during our testing

348
00:13:34,079 --> 00:13:36,000
using the a utility you can craft an

349
00:13:36,000 --> 00:13:37,800
apple archive we specify the target

350
00:13:37,800 --> 00:13:39,600
directory to be the images folder and

351
00:13:39,600 --> 00:13:41,180
output and archive name

352
00:13:41,180 --> 00:13:43,740
mypictures.aar it's worth noting that a

353
00:13:43,740 --> 00:13:45,420
a utility intentionally archives

354
00:13:45,420 --> 00:13:47,279
everything under the specified directory

355
00:13:47,279 --> 00:13:50,459
so in in this case we specify the target

356
00:13:50,459 --> 00:13:52,620
directory to be the images folder and it

357
00:13:52,620 --> 00:13:54,180
will only archive the files and folders

358
00:13:54,180 --> 00:13:56,040
within that directory excluding the

359
00:13:56,040 --> 00:13:59,180
images folder itself

360
00:13:59,639 --> 00:14:01,980
so once we have our mypictures.ar file

361
00:14:01,980 --> 00:14:03,420
we can host it on the internet download

362
00:14:03,420 --> 00:14:05,279
it extract it with archive utility and

363
00:14:05,279 --> 00:14:06,480
we have the following directory

364
00:14:06,480 --> 00:14:08,579
structure so when an archive is

365
00:14:08,579 --> 00:14:10,440
downloaded from the internet as jiren

366
00:14:10,440 --> 00:14:11,459
mentioned it will hold the extended

367
00:14:11,459 --> 00:14:13,680
attribute and uh gatekeeper we will

368
00:14:13,680 --> 00:14:16,200
check for this attribute if to see if

369
00:14:16,200 --> 00:14:17,279
it's been downloaded from a remote

370
00:14:17,279 --> 00:14:20,519
Source uh and um or if it should be

371
00:14:20,519 --> 00:14:22,980
allowed to execute

372
00:14:22,980 --> 00:14:25,200
so as we see our Capital will apply the

373
00:14:25,200 --> 00:14:26,399
quarantine attribute to all of the

374
00:14:26,399 --> 00:14:29,220
extracted items as expected

375
00:14:29,220 --> 00:14:30,839
so now we can take this directory

376
00:14:30,839 --> 00:14:32,279
structure and using the same command we

377
00:14:32,279 --> 00:14:34,500
can craft an archive however this time

378
00:14:34,500 --> 00:14:36,240
we will add an additional photo named

379
00:14:36,240 --> 00:14:37,860
for that PNG to the root of the images

380
00:14:37,860 --> 00:14:40,860
directory again this will will output an

381
00:14:40,860 --> 00:14:43,980
archive named mypictures.aar

382
00:14:43,980 --> 00:14:45,959
let's see what happens when we download

383
00:14:45,959 --> 00:14:47,399
this

384
00:14:47,399 --> 00:14:49,019
so upon downloading extracting the

385
00:14:49,019 --> 00:14:51,240
archive with archive utility we have the

386
00:14:51,240 --> 00:14:53,160
following directory structure here we

387
00:14:53,160 --> 00:14:54,540
notice something very interesting with

388
00:14:54,540 --> 00:14:56,160
how the quarantine attribute gets

389
00:14:56,160 --> 00:14:58,440
applied there's two important things to

390
00:14:58,440 --> 00:15:01,199
note we first we see a new folder name

391
00:15:01,199 --> 00:15:04,500
called my pictures second this new newly

392
00:15:04,500 --> 00:15:06,060
created folder my pictures does not have

393
00:15:06,060 --> 00:15:08,699
a quarantine attribute applied to it so

394
00:15:08,699 --> 00:15:10,199
archive utility has created this my

395
00:15:10,199 --> 00:15:12,360
pictures folder we didn't originally put

396
00:15:12,360 --> 00:15:15,180
that in the archive so how exactly did

397
00:15:15,180 --> 00:15:16,980
this folder get created it's pretty

398
00:15:16,980 --> 00:15:18,779
interesting so we'll look into the

399
00:15:18,779 --> 00:15:20,279
discovery of how this non-quarantine

400
00:15:20,279 --> 00:15:22,860
folder got created

401
00:15:22,860 --> 00:15:24,959
so as we recall we only noticed this

402
00:15:24,959 --> 00:15:27,420
behavior when we added the 4.png photo

403
00:15:27,420 --> 00:15:29,699
it turns out when extracting an archive

404
00:15:29,699 --> 00:15:31,440
containing two or more files or folders

405
00:15:31,440 --> 00:15:33,540
in its root directory archive utility

406
00:15:33,540 --> 00:15:35,519
will create a new folder of space based

407
00:15:35,519 --> 00:15:37,740
on the specified archive name in our

408
00:15:37,740 --> 00:15:39,240
case the folder the root directory of

409
00:15:39,240 --> 00:15:40,740
our archive contained a folder named

410
00:15:40,740 --> 00:15:43,560
photos and a file or a file name for

411
00:15:43,560 --> 00:15:46,440
that PNG when are my pictures that AR

412
00:15:46,440 --> 00:15:48,360
file was unpacked archive utility

413
00:15:48,360 --> 00:15:50,399
created a new folder named my pictures

414
00:15:50,399 --> 00:15:53,040
containing our extracted files

415
00:15:53,040 --> 00:15:55,740
and presumably this feature exists to

416
00:15:55,740 --> 00:15:58,680
prevent many files being extracted to uh

417
00:15:58,680 --> 00:15:59,940
the current directory making it

418
00:15:59,940 --> 00:16:01,800
inconvenient to move or download or move

419
00:16:01,800 --> 00:16:04,079
or delete instead it places these files

420
00:16:04,079 --> 00:16:07,219
in a new folder

421
00:16:09,720 --> 00:16:11,279
so there are a number of processes that

422
00:16:11,279 --> 00:16:12,899
are involved when extracting an archive

423
00:16:12,899 --> 00:16:14,760
this includes archive utility archive

424
00:16:14,760 --> 00:16:16,620
service and Au helper service we'll

425
00:16:16,620 --> 00:16:18,120
start by looking at the archive service

426
00:16:18,120 --> 00:16:19,260
process

427
00:16:19,260 --> 00:16:21,000
archive service process rights to

428
00:16:21,000 --> 00:16:22,380
extracted contents to a temporary

429
00:16:22,380 --> 00:16:24,360
directory located at the path preprended

430
00:16:24,360 --> 00:16:28,220
with the name nsrd archive service

431
00:16:28,220 --> 00:16:30,240
within this temporary directory it will

432
00:16:30,240 --> 00:16:31,980
hold an extra it will hold our extracted

433
00:16:31,980 --> 00:16:34,139
archive files and folders here we can

434
00:16:34,139 --> 00:16:35,699
see our photos folder and our various

435
00:16:35,699 --> 00:16:38,759
images as expected archive service will

436
00:16:38,759 --> 00:16:39,959
also aim to apply the quarantine

437
00:16:39,959 --> 00:16:41,699
attribute to all the extracted items

438
00:16:41,699 --> 00:16:44,759
located within this temporary directory

439
00:16:44,759 --> 00:16:46,259
it does this by calling a function

440
00:16:46,259 --> 00:16:47,639
called propagate quarantine information

441
00:16:47,639 --> 00:16:49,800
as part of the body compressor class

442
00:16:49,800 --> 00:16:51,540
this function is responsible for

443
00:16:51,540 --> 00:16:53,160
propagating quarantine attributes to all

444
00:16:53,160 --> 00:16:55,980
the extracted contents of the archive it

445
00:16:55,980 --> 00:16:57,540
invokes a low-level function titled

446
00:16:57,540 --> 00:16:59,480
quarantine file applied to path and

447
00:16:59,480 --> 00:17:01,019
libquarantine.dilave which applies the

448
00:17:01,019 --> 00:17:03,120
quarantine attributes to the unarchived

449
00:17:03,120 --> 00:17:04,859
files located in temporary directory

450
00:17:04,859 --> 00:17:07,020
pre-pended with the name nsrid archive

451
00:17:07,020 --> 00:17:08,880
service and it will ensure that the

452
00:17:08,880 --> 00:17:10,619
quarantine attributes propagated to all

453
00:17:10,619 --> 00:17:13,559
of the extracted contents

454
00:17:13,559 --> 00:17:15,179
what we notice is that the quarantine

455
00:17:15,179 --> 00:17:16,740
attributes were indeed being applied to

456
00:17:16,740 --> 00:17:18,660
all the extracted items within our

457
00:17:18,660 --> 00:17:20,400
archive including the photos folder and

458
00:17:20,400 --> 00:17:22,859
our images however archive servers

459
00:17:22,859 --> 00:17:24,419
failed to apply the quarantine attribute

460
00:17:24,419 --> 00:17:26,520
to the nsrid archive Services folder

461
00:17:26,520 --> 00:17:28,559
itself we will look at why this is

462
00:17:28,559 --> 00:17:29,880
really important when the temporary

463
00:17:29,880 --> 00:17:32,900
folder is renamed

464
00:17:33,059 --> 00:17:35,100
the Au helper service process invokes a

465
00:17:35,100 --> 00:17:36,960
function titled decompress move copy

466
00:17:36,960 --> 00:17:39,179
results to move the extracted contents

467
00:17:39,179 --> 00:17:40,620
from the temporary directory to the

468
00:17:40,620 --> 00:17:43,620
Target destination there therefore the

469
00:17:43,620 --> 00:17:45,840
nsrid archive Services folder is renamed

470
00:17:45,840 --> 00:17:47,160
accordingly moving it to the Target

471
00:17:47,160 --> 00:17:49,080
destination and as mentioned that's

472
00:17:49,080 --> 00:17:51,660
typically the user's download solder

473
00:17:51,660 --> 00:17:53,580
let's take a closer look at look at some

474
00:17:53,580 --> 00:17:56,039
of the disassembly for this function to

475
00:17:56,039 --> 00:17:57,299
determine what's happening just before

476
00:17:57,299 --> 00:17:59,340
the extracted archive is moved to the

477
00:17:59,340 --> 00:18:01,260
Final Destination first the function

478
00:18:01,260 --> 00:18:02,580
retrieves the path to our extracted

479
00:18:02,580 --> 00:18:04,020
archive located in the temporary

480
00:18:04,020 --> 00:18:06,360
directory the function then retrieves

481
00:18:06,360 --> 00:18:08,460
the path to our downloaded archive the

482
00:18:08,460 --> 00:18:10,020
file name of our archive is extracted

483
00:18:10,020 --> 00:18:12,000
from the path the file extension of the

484
00:18:12,000 --> 00:18:13,860
archive is removed and the

485
00:18:13,860 --> 00:18:15,419
non-quarantine temporary folder holding

486
00:18:15,419 --> 00:18:17,880
on our archive files is renamed to its

487
00:18:17,880 --> 00:18:20,760
destination folder so as a result the my

488
00:18:20,760 --> 00:18:22,620
pictures folder does not have a

489
00:18:22,620 --> 00:18:25,919
quarantine attribute applied to it

490
00:18:25,919 --> 00:18:27,780
looking back at our directory structure

491
00:18:27,780 --> 00:18:29,220
for our archive when extracted with

492
00:18:29,220 --> 00:18:30,960
archive utility we see that everything

493
00:18:30,960 --> 00:18:32,820
below the rename directory my pictures

494
00:18:32,820 --> 00:18:34,980
received the quarantine attribute as

495
00:18:34,980 --> 00:18:36,179
expected

496
00:18:36,179 --> 00:18:37,919
simply placing an application within

497
00:18:37,919 --> 00:18:40,020
this folder will not result in any

498
00:18:40,020 --> 00:18:41,400
success as it will hold the quarantine

499
00:18:41,400 --> 00:18:44,100
attribute so however as we learned from

500
00:18:44,100 --> 00:18:46,620
the Safari gatekeeper bypass that jiren

501
00:18:46,620 --> 00:18:47,760
just covered when it comes to

502
00:18:47,760 --> 00:18:49,980
application bundles gatekeeper only

503
00:18:49,980 --> 00:18:51,900
cares if the app directory itself has a

504
00:18:51,900 --> 00:18:54,419
quarantine attribute and it disregards

505
00:18:54,419 --> 00:18:56,880
recursive files within the app directory

506
00:18:56,880 --> 00:18:59,100
therefore by ensuring our non-quarantine

507
00:18:59,100 --> 00:19:01,679
folder is an application we can craft an

508
00:19:01,679 --> 00:19:03,360
archive in a way allowing us to bypass

509
00:19:03,360 --> 00:19:05,580
gatekeeper checks

510
00:19:05,580 --> 00:19:07,200
let's take a closer look at some of the

511
00:19:07,200 --> 00:19:08,520
requirements for exploiting this to

512
00:19:08,520 --> 00:19:10,020
bypass GateKeeper

513
00:19:10,020 --> 00:19:11,940
as mentioned the folder name containing

514
00:19:11,940 --> 00:19:13,380
our unarchived files is controlled by

515
00:19:13,380 --> 00:19:15,179
the user because archive utility creates

516
00:19:15,179 --> 00:19:16,740
this folder based on the specified

517
00:19:16,740 --> 00:19:18,179
archive name

518
00:19:18,179 --> 00:19:20,220
therefore we can we can name our archive

519
00:19:20,220 --> 00:19:21,380
something like

520
00:19:21,380 --> 00:19:23,580
test.app.aar so that when it is

521
00:19:23,580 --> 00:19:25,500
unarchived it will have a folder named

522
00:19:25,500 --> 00:19:28,140
test.app within this app there'll be

523
00:19:28,140 --> 00:19:29,760
expected application bundle holding the

524
00:19:29,760 --> 00:19:31,919
executable and again there should be two

525
00:19:31,919 --> 00:19:33,360
or more files or folders in the root

526
00:19:33,360 --> 00:19:34,620
directory in the root of the target

527
00:19:34,620 --> 00:19:36,720
directory being archived in order to

528
00:19:36,720 --> 00:19:39,120
trigger the auto renaming

529
00:19:39,120 --> 00:19:41,280
and and remember we only need to Archive

530
00:19:41,280 --> 00:19:43,740
the files and folders within the app uh

531
00:19:43,740 --> 00:19:45,360
as this will hold the quarantine

532
00:19:45,360 --> 00:19:47,039
attribute although we need to ensure the

533
00:19:47,039 --> 00:19:49,140
root of our application is not contained

534
00:19:49,140 --> 00:19:50,700
within the archive so that the

535
00:19:50,700 --> 00:19:52,500
quarantine attribute is not applied to

536
00:19:52,500 --> 00:19:54,299
it

537
00:19:54,299 --> 00:19:56,039
so our exploit we have an application

538
00:19:56,039 --> 00:19:58,380
named toxic.app we need to ensure that

539
00:19:58,380 --> 00:19:59,940
all the conditions for exploitation are

540
00:19:59,940 --> 00:20:01,799
satisfied in order to bypass gatekeeper

541
00:20:01,799 --> 00:20:03,539
so again there should be two or more

542
00:20:03,539 --> 00:20:05,039
files or folders again we have the

543
00:20:05,039 --> 00:20:06,720
contents We'll add additional arbitrary

544
00:20:06,720 --> 00:20:09,539
file name folder two and uh next we want

545
00:20:09,539 --> 00:20:11,160
to Archive the contents within our

546
00:20:11,160 --> 00:20:13,799
application and

547
00:20:13,799 --> 00:20:15,000
uh

548
00:20:15,000 --> 00:20:17,039
we do not want the toxic that to have a

549
00:20:17,039 --> 00:20:19,140
quarantine attribute so using the AAA

550
00:20:19,140 --> 00:20:20,880
utility this is already accomplished for

551
00:20:20,880 --> 00:20:23,760
us and uh all that so it does not

552
00:20:23,760 --> 00:20:26,160
include the target folder in the archive

553
00:20:26,160 --> 00:20:28,500
and finally we can simply name our

554
00:20:28,500 --> 00:20:30,960
archive as toxic.app.air so that when

555
00:20:30,960 --> 00:20:33,480
extracted uh we have a non-quarantine

556
00:20:33,480 --> 00:20:37,160
folder named toxic.app

557
00:20:37,679 --> 00:20:39,360
so let's break this down what's going on

558
00:20:39,360 --> 00:20:40,440
in the background when the user

559
00:20:40,440 --> 00:20:42,480
downloads the weaponized archive first

560
00:20:42,480 --> 00:20:43,980
of course the archive is hosted and

561
00:20:43,980 --> 00:20:45,419
downloaded from the internet

562
00:20:45,419 --> 00:20:47,100
then the user clicks on the downloaded

563
00:20:47,100 --> 00:20:48,539
archive causing it to be opened by

564
00:20:48,539 --> 00:20:50,640
archive utility one of the reasons we

565
00:20:50,640 --> 00:20:52,440
actually used an AR file because if we

566
00:20:52,440 --> 00:20:54,059
use the zip Safari would likely try to

567
00:20:54,059 --> 00:20:56,280
Auto unzip it and we wanted to make sure

568
00:20:56,280 --> 00:20:58,500
that this can bypass any when downloaded

569
00:20:58,500 --> 00:21:01,500
from any browser so we use the Apple

570
00:21:01,500 --> 00:21:02,880
archive

571
00:21:02,880 --> 00:21:04,799
as mentioned before archive utility

572
00:21:04,799 --> 00:21:06,059
relies on two different service

573
00:21:06,059 --> 00:21:07,919
processes in order for it to perform its

574
00:21:07,919 --> 00:21:09,840
unarchiving these are archive service

575
00:21:09,840 --> 00:21:11,580
and Au helper service

576
00:21:11,580 --> 00:21:13,440
archive service is responsible for

577
00:21:13,440 --> 00:21:15,600
creating the temporary directory then he

578
00:21:15,600 --> 00:21:17,160
begins to unarchive everything into that

579
00:21:17,160 --> 00:21:19,260
temporary directory next archive service

580
00:21:19,260 --> 00:21:20,820
goes through the recursive contents of

581
00:21:20,820 --> 00:21:22,140
the directory and applies the quarantine

582
00:21:22,140 --> 00:21:24,360
attribute to each folder and executable

583
00:21:24,360 --> 00:21:26,280
under it and notice here it did not

584
00:21:26,280 --> 00:21:27,960
apply the quarantine attribute to the

585
00:21:27,960 --> 00:21:31,280
temporary directory itself

586
00:21:34,380 --> 00:21:36,120
a you hope our service then takes over

587
00:21:36,120 --> 00:21:38,039
responsibility of renaming the temporary

588
00:21:38,039 --> 00:21:40,320
directory remember it does this by

589
00:21:40,320 --> 00:21:41,400
looking at the original name of the

590
00:21:41,400 --> 00:21:43,380
archive that was open and then removes

591
00:21:43,380 --> 00:21:45,480
the file extension this is why we've

592
00:21:45,480 --> 00:21:47,400
chosen to put two file extensions on our

593
00:21:47,400 --> 00:21:49,260
on our archive

594
00:21:49,260 --> 00:21:51,240
and the name here will be that's going

595
00:21:51,240 --> 00:21:53,820
to be used for the renaming is toxic.app

596
00:21:53,820 --> 00:21:56,460
and finally it renames and we have our

597
00:21:56,460 --> 00:21:58,679
malicious application with no quarantine

598
00:21:58,679 --> 00:22:01,559
attribute attached to it

599
00:22:01,559 --> 00:22:03,240
and as we learned from the previous CV

600
00:22:03,240 --> 00:22:04,799
this is the only thing gatekeeper checks

601
00:22:04,799 --> 00:22:06,539
for

602
00:22:06,539 --> 00:22:08,100
and that is ultimately how our

603
00:22:08,100 --> 00:22:09,539
application goes about bypassing

604
00:22:09,539 --> 00:22:11,580
GateKeeper

605
00:22:11,580 --> 00:22:13,380
so as we mentioned before this is not

606
00:22:13,380 --> 00:22:15,659
specific to Apple archives using the

607
00:22:15,659 --> 00:22:17,580
same application structure for toxic.app

608
00:22:17,580 --> 00:22:19,260
let's craft a zip archive in a similar

609
00:22:19,260 --> 00:22:22,320
way to bypass gatekeeper checks so again

610
00:22:22,320 --> 00:22:24,000
we'll check to see there's two files or

611
00:22:24,000 --> 00:22:25,799
folders folders we'll archive everything

612
00:22:25,799 --> 00:22:27,659
within this directory and we'll do this

613
00:22:27,659 --> 00:22:29,460
by simply changing directories with to

614
00:22:29,460 --> 00:22:31,500
go within the app and then run the

615
00:22:31,500 --> 00:22:33,419
following zip command to archive all the

616
00:22:33,419 --> 00:22:34,860
contents within our current directory

617
00:22:34,860 --> 00:22:37,559
and again we'll name our application or

618
00:22:37,559 --> 00:22:40,380
our archive text.app.zip

619
00:22:40,380 --> 00:22:42,179
and this will allow us to bypass all of

620
00:22:42,179 --> 00:22:43,500
Gatekeepers checks when downloaded and

621
00:22:43,500 --> 00:22:46,679
extracted with archive utility

622
00:22:46,679 --> 00:22:48,360
so after reporting our findings to Apple

623
00:22:48,360 --> 00:22:49,799
they quickly patched the issue by

624
00:22:49,799 --> 00:22:51,120
updating the propagate quarantine

625
00:22:51,120 --> 00:22:53,400
information function and they added an

626
00:22:53,400 --> 00:22:54,659
additional call to quarantine file

627
00:22:54,659 --> 00:22:56,580
applied to path so that the temporary

628
00:22:56,580 --> 00:22:58,620
directory prepended with the name nsrd

629
00:22:58,620 --> 00:23:00,539
archive Services now contains a

630
00:23:00,539 --> 00:23:01,980
quarantine attribute before it is

631
00:23:01,980 --> 00:23:04,500
renamed

632
00:23:04,500 --> 00:23:05,760
let's explore how we can go about

633
00:23:05,760 --> 00:23:07,500
detecting this activity with using

634
00:23:07,500 --> 00:23:09,659
Apple's endpoint security we can monitor

635
00:23:09,659 --> 00:23:11,940
for ES rename events and then where the

636
00:23:11,940 --> 00:23:13,500
running processes Au helper service

637
00:23:13,500 --> 00:23:15,539
checking the original path has a last

638
00:23:15,539 --> 00:23:17,340
path component beginning with nsrid

639
00:23:17,340 --> 00:23:19,020
archive services that will be an

640
00:23:19,020 --> 00:23:20,580
indication that there's an auto renaming

641
00:23:20,580 --> 00:23:22,679
of the temporary directory next we can

642
00:23:22,679 --> 00:23:24,240
check that the destination path has a

643
00:23:24,240 --> 00:23:26,460
last path extension of an app indicating

644
00:23:26,460 --> 00:23:29,460
an application is being extracted we

645
00:23:29,460 --> 00:23:30,780
shouldn't ever really see an application

646
00:23:30,780 --> 00:23:32,580
being extracted where the original path

647
00:23:32,580 --> 00:23:34,380
has a last path component beginning with

648
00:23:34,380 --> 00:23:37,500
nsird archive services and as most

649
00:23:37,500 --> 00:23:39,120
developers would follow the correct and

650
00:23:39,120 --> 00:23:40,919
recommended directory structure where

651
00:23:40,919 --> 00:23:42,480
you have a structure like test.app

652
00:23:42,480 --> 00:23:44,880
contents Mac OS and then your binary

653
00:23:44,880 --> 00:23:46,020
itself

654
00:23:46,020 --> 00:23:47,940
as an optional check you can verify that

655
00:23:47,940 --> 00:23:49,860
the destination path is indeed an

656
00:23:49,860 --> 00:23:51,659
application that is unsigned or ad hoc

657
00:23:51,659 --> 00:23:54,140
signed

658
00:23:54,960 --> 00:23:56,940
looking at the raw es data for a rename

659
00:23:56,940 --> 00:23:58,799
event we see in our crafted exploit for

660
00:23:58,799 --> 00:24:00,900
the application name toxic.app the

661
00:24:00,900 --> 00:24:02,580
original path has a lastpath component

662
00:24:02,580 --> 00:24:04,559
beginning with nsrid archive services

663
00:24:04,559 --> 00:24:07,020
and our destination path has a last path

664
00:24:07,020 --> 00:24:08,460
extension of app indicating an

665
00:24:08,460 --> 00:24:12,000
application is being extracted

666
00:24:12,000 --> 00:24:13,620
When comparing this to a standard

667
00:24:13,620 --> 00:24:16,020
non-malicious application named safe.app

668
00:24:16,020 --> 00:24:17,640
we can clearly see that the original

669
00:24:17,640 --> 00:24:19,500
path for this event has a last path

670
00:24:19,500 --> 00:24:22,500
component beginning with safe.app and as

671
00:24:22,500 --> 00:24:24,539
it gets written to the destination it

672
00:24:24,539 --> 00:24:26,940
gets written as safe.app as well

673
00:24:26,940 --> 00:24:29,460
since the application is located within

674
00:24:29,460 --> 00:24:31,980
the nsrid archive Services folder it

675
00:24:31,980 --> 00:24:33,600
means it was contained within that

676
00:24:33,600 --> 00:24:35,220
extracted archive so it'll hold a

677
00:24:35,220 --> 00:24:36,960
quarantine attribute which will not

678
00:24:36,960 --> 00:24:40,640
allow it to bypass GateKeeper

679
00:24:40,799 --> 00:24:42,960
so today we covered kind of two

680
00:24:42,960 --> 00:24:45,360
different cves that are very similar in

681
00:24:45,360 --> 00:24:48,360
the way that the payload is created but

682
00:24:48,360 --> 00:24:50,039
actually very different in how they're

683
00:24:50,039 --> 00:24:53,880
behaving behind the scenes so 22616 was

684
00:24:53,880 --> 00:24:59,039
patched in 12.3 and 32910 was patched in

685
00:24:59,039 --> 00:25:02,340
Mac OS 12.5 when we find a new

686
00:25:02,340 --> 00:25:04,440
vulnerability we always monitor for

687
00:25:04,440 --> 00:25:06,600
malware that might be abusing it as far

688
00:25:06,600 --> 00:25:08,520
as we could see there is nothing abusing

689
00:25:08,520 --> 00:25:11,460
this one unlike the the talk last year

690
00:25:11,460 --> 00:25:13,200
we kind of had where we saw schlayer

691
00:25:13,200 --> 00:25:16,620
trying to bypass GateKeeper

692
00:25:16,620 --> 00:25:19,020
and uh if you want to slow either one of

693
00:25:19,020 --> 00:25:20,760
these down and kind of read them in blog

694
00:25:20,760 --> 00:25:22,559
form you can do that on our Jam threat

695
00:25:22,559 --> 00:25:25,020
Labs website uh where we've posted both

696
00:25:25,020 --> 00:25:27,240
and we'll we'll tweet those out later as

697
00:25:27,240 --> 00:25:28,620
well so

698
00:25:28,620 --> 00:25:30,000
um thank you so much for having us and

699
00:25:30,000 --> 00:25:32,030
looking forward to some more talks

700
00:25:32,030 --> 00:25:39,690
[Applause]

