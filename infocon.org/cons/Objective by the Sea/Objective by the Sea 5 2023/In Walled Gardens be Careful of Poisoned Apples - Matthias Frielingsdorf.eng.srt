1
00:00:00,659 --> 00:00:03,559
bye

2
00:00:07,919 --> 00:00:10,440
all right so we have one more talk

3
00:00:10,440 --> 00:00:14,040
before lunch uh Matthias is going to be

4
00:00:14,040 --> 00:00:16,980
talking about iOS malware very

5
00:00:16,980 --> 00:00:18,900
interesting topic this is also the first

6
00:00:18,900 --> 00:00:20,699
time that Matthias is speaking we love

7
00:00:20,699 --> 00:00:23,279
having new speakers so let's give him a

8
00:00:23,279 --> 00:00:25,200
obts round of applause

9
00:00:25,200 --> 00:00:34,260
[Applause]

10
00:00:34,260 --> 00:00:36,180
for having me it's a pleasure of course

11
00:00:36,180 --> 00:00:38,219
so let me shortly tell you something

12
00:00:38,219 --> 00:00:40,800
about who I am so my name is Matthias I

13
00:00:40,800 --> 00:00:43,320
am working at Deutsche Bahn at the the

14
00:00:43,320 --> 00:00:45,000
mobile security team so we're basically

15
00:00:45,000 --> 00:00:46,739
responsible for the security of every

16
00:00:46,739 --> 00:00:48,840
mobile device which is operated by

17
00:00:48,840 --> 00:00:51,660
Deutsche Bahn and shortly ago I wrote my

18
00:00:51,660 --> 00:00:54,180
Master's thesis about the detection of

19
00:00:54,180 --> 00:00:57,660
iOS malware so a lot of the things that

20
00:00:57,660 --> 00:00:59,219
I'm covering in this talk today are

21
00:00:59,219 --> 00:01:01,559
still valid even though that Caesar was

22
00:01:01,559 --> 00:01:03,780
handed in 2019

23
00:01:03,780 --> 00:01:05,519
um yeah and if you like to connect on

24
00:01:05,519 --> 00:01:08,340
Twitter my link is healthy driver

25
00:01:08,340 --> 00:01:11,880
without an a that's some kind of a

26
00:01:11,880 --> 00:01:13,799
so I don't mistake

27
00:01:13,799 --> 00:01:16,979
yeah what I'm going to talk about today

28
00:01:16,979 --> 00:01:19,380
is about recent examples of iOS malware

29
00:01:19,380 --> 00:01:21,900
so it's nothing new every one of these

30
00:01:21,900 --> 00:01:24,960
reports has already been done on a

31
00:01:24,960 --> 00:01:26,880
really light on a really good technical

32
00:01:26,880 --> 00:01:29,880
level but I'd like to connect the dots

33
00:01:29,880 --> 00:01:31,860
and to refer to some of these reports

34
00:01:31,860 --> 00:01:33,659
after that we're talking a little bit

35
00:01:33,659 --> 00:01:35,460
about the difference between jailbreaks

36
00:01:35,460 --> 00:01:38,040
and maver because at least for for some

37
00:01:38,040 --> 00:01:40,920
companies or some papers this might be a

38
00:01:40,920 --> 00:01:42,780
little bit confusing and I'd like to

39
00:01:42,780 --> 00:01:43,860
yeah

40
00:01:43,860 --> 00:01:46,200
um and shine a little bit of light on

41
00:01:46,200 --> 00:01:48,479
that one and then we will go to to

42
00:01:48,479 --> 00:01:50,280
detecting directs and never basically

43
00:01:50,280 --> 00:01:52,680
what can be done today and I will share

44
00:01:52,680 --> 00:01:55,259
some ideas of what can be done

45
00:01:55,259 --> 00:01:57,780
um to improve the detection further

46
00:01:57,780 --> 00:02:00,240
so let's start directly

47
00:02:00,240 --> 00:02:01,740
um and I was a little bit of surprised

48
00:02:01,740 --> 00:02:03,899
when I created that slide because I just

49
00:02:03,899 --> 00:02:07,259
wanted to to add all the cves that have

50
00:02:07,259 --> 00:02:09,300
been either found by Google in the in

51
00:02:09,300 --> 00:02:12,239
the wild series or even by Apple after

52
00:02:12,239 --> 00:02:15,480
2014 and I was surprised that they fit

53
00:02:15,480 --> 00:02:18,000
the slide quite a lot so it's actually

54
00:02:18,000 --> 00:02:21,360
40 cves that have been used for some in

55
00:02:21,360 --> 00:02:24,780
the wild exploitation of iOS or Mac OS

56
00:02:24,780 --> 00:02:27,480
devices but every time iOS has been

57
00:02:27,480 --> 00:02:29,879
impacted and we're starting with the

58
00:02:29,879 --> 00:02:31,980
first example of that one already which

59
00:02:31,980 --> 00:02:34,739
is of course Pegasus it was found in

60
00:02:34,739 --> 00:02:38,160
2016 at use three cves at the time for

61
00:02:38,160 --> 00:02:39,720
for exporting the device it has an

62
00:02:39,720 --> 00:02:41,780
infection Vector of webkit so basically

63
00:02:41,780 --> 00:02:44,459
someone sent you a malicious URL you

64
00:02:44,459 --> 00:02:46,280
click on that URL

65
00:02:46,280 --> 00:02:49,019
the browser got exploited the first

66
00:02:49,019 --> 00:02:50,340
stage is going to be downloaded

67
00:02:50,340 --> 00:02:52,680
afterwards it starts into exporting the

68
00:02:52,680 --> 00:02:54,900
kernel wire info league and a column

69
00:02:54,900 --> 00:02:56,819
memory corruption

70
00:02:56,819 --> 00:03:00,720
at the time this sample was detected

71
00:03:00,720 --> 00:03:05,580
because citizen lab got a hold of one

72
00:03:05,580 --> 00:03:08,700
sample of the infection URL they

73
00:03:08,700 --> 00:03:10,800
downloaded onto a device and they saw

74
00:03:10,800 --> 00:03:12,540
they saw that something malicious was

75
00:03:12,540 --> 00:03:15,420
going on there yeah and then they sent

76
00:03:15,420 --> 00:03:17,700
over that sample to look out to further

77
00:03:17,700 --> 00:03:19,980
investigate and that's actually a typo

78
00:03:19,980 --> 00:03:21,720
on the slide the detection technical

79
00:03:21,720 --> 00:03:23,519
analysis has been done by citizen lab

80
00:03:23,519 --> 00:03:25,019
and by Lookout

81
00:03:25,019 --> 00:03:28,080
at that time as was attributed to NSO

82
00:03:28,080 --> 00:03:29,819
and the targets where human rights

83
00:03:29,819 --> 00:03:31,500
activists or journalists

84
00:03:31,500 --> 00:03:34,260
um and to be fairly clear it's not NSO

85
00:03:34,260 --> 00:03:36,300
who is targeting that people but of

86
00:03:36,300 --> 00:03:39,000
course it's the customers of NSU who are

87
00:03:39,000 --> 00:03:41,519
basically targeting that one and NSO was

88
00:03:41,519 --> 00:03:43,620
just selling it it's had some kind of

89
00:03:43,620 --> 00:03:45,299
special features which were like

90
00:03:45,299 --> 00:03:48,060
persistency so um if you reboot the

91
00:03:48,060 --> 00:03:49,760
device as you remember was still there

92
00:03:49,760 --> 00:03:52,140
has implemented a framework for

93
00:03:52,140 --> 00:03:54,599
Messenger hooking and it used a lot of

94
00:03:54,599 --> 00:03:57,480
techniques that we found in jailbreaks

95
00:03:57,480 --> 00:04:00,060
at the time of the development it was

96
00:04:00,060 --> 00:04:02,159
only valid until iOS 9 until it was

97
00:04:02,159 --> 00:04:03,360
found

98
00:04:03,360 --> 00:04:05,879
yeah and that's basically one of the

99
00:04:05,879 --> 00:04:08,760
first examples of America that we have

100
00:04:08,760 --> 00:04:12,239
seen who is being deployed via one click

101
00:04:12,239 --> 00:04:14,640
and some of the of course most important

102
00:04:14,640 --> 00:04:16,620
part the standard capabilities was for

103
00:04:16,620 --> 00:04:18,238
example you can extract calendar

104
00:04:18,238 --> 00:04:20,339
information you can extract emails you

105
00:04:20,339 --> 00:04:22,979
can extract the whole keychain you have

106
00:04:22,979 --> 00:04:25,080
access to the whole file system you have

107
00:04:25,080 --> 00:04:26,699
access to the camera you have access to

108
00:04:26,699 --> 00:04:28,139
the network and you have of course

109
00:04:28,139 --> 00:04:30,660
access to the location on the device and

110
00:04:30,660 --> 00:04:32,699
basically you don't need to have every

111
00:04:32,699 --> 00:04:34,380
one of these single capabilities I think

112
00:04:34,380 --> 00:04:36,300
file system access is even enough on the

113
00:04:36,300 --> 00:04:39,000
device and yeah basically if you ever

114
00:04:39,000 --> 00:04:41,940
have been to a talk of of Sarah Edwards

115
00:04:41,940 --> 00:04:43,440
or one of her trainings you know what

116
00:04:43,440 --> 00:04:44,639
you can do if you have file system

117
00:04:44,639 --> 00:04:47,460
access on iOS device and what you know

118
00:04:47,460 --> 00:04:51,320
about that person's life after that time

119
00:04:51,720 --> 00:04:53,639
um the second example and it's quite

120
00:04:53,639 --> 00:04:55,560
funny because I was handing in my

121
00:04:55,560 --> 00:04:58,620
Master's thesis as 2000 in 2019 at the

122
00:04:58,620 --> 00:05:01,080
end of September and Google just

123
00:05:01,080 --> 00:05:04,259
published that report in August so I had

124
00:05:04,259 --> 00:05:06,060
basically everything on a practical side

125
00:05:06,060 --> 00:05:07,860
for my thesis already done

126
00:05:07,860 --> 00:05:09,780
and on a theoretical side and then they

127
00:05:09,780 --> 00:05:11,400
published that report and it's just

128
00:05:11,400 --> 00:05:14,639
matched perfectly to what I had done by

129
00:05:14,639 --> 00:05:17,820
myself so yeah on the one hand of course

130
00:05:17,820 --> 00:05:19,380
you have something which is an out there

131
00:05:19,380 --> 00:05:21,540
you cannot like shine light on something

132
00:05:21,540 --> 00:05:23,699
new but on the other hand you have a

133
00:05:23,699 --> 00:05:25,500
practical validation for something that

134
00:05:25,500 --> 00:05:27,300
you did in theory which was actually

135
00:05:27,300 --> 00:05:28,440
quite nice

136
00:05:28,440 --> 00:05:29,820
so

137
00:05:29,820 --> 00:05:33,180
um this member was a campaign against a

138
00:05:33,180 --> 00:05:35,520
group of people I think it's a group of

139
00:05:35,520 --> 00:05:37,880
Muslims in inside of Nepal

140
00:05:37,880 --> 00:05:40,320
and it had the basic standard

141
00:05:40,320 --> 00:05:42,300
capabilities as the Pegasus never had

142
00:05:42,300 --> 00:05:44,460
also except for monitoring the network

143
00:05:44,460 --> 00:05:47,400
traffic I think in total it were like 14

144
00:05:47,400 --> 00:05:50,220
cves which has been abused at that time

145
00:05:50,220 --> 00:05:53,759
on five different campaigns and it went

146
00:05:53,759 --> 00:05:57,960
from IOS 10 to iOS 12. the detection has

147
00:05:57,960 --> 00:06:00,000
been basically made because Google found

148
00:06:00,000 --> 00:06:02,400
or Google tag found the infrastructure

149
00:06:02,400 --> 00:06:04,020
which was used for deploying that

150
00:06:04,020 --> 00:06:05,160
malware

151
00:06:05,160 --> 00:06:07,860
and they were able to download the

152
00:06:07,860 --> 00:06:09,419
implants they were able to download

153
00:06:09,419 --> 00:06:12,000
different export chains yeah and the

154
00:06:12,000 --> 00:06:13,740
infection Vector at that time was the

155
00:06:13,740 --> 00:06:16,380
webkit so it was also a one-click

156
00:06:16,380 --> 00:06:17,880
vulnerability

157
00:06:17,880 --> 00:06:21,060
the attribution is kind of unknown at

158
00:06:21,060 --> 00:06:22,440
that time

159
00:06:22,440 --> 00:06:25,800
um due to the the target group it might

160
00:06:25,800 --> 00:06:27,780
be that it's related to China but I

161
00:06:27,780 --> 00:06:30,000
think no one can really tell

162
00:06:30,000 --> 00:06:32,100
um yeah and the the technical analysis

163
00:06:32,100 --> 00:06:34,620
and detection that's another table here

164
00:06:34,620 --> 00:06:36,840
is this is also of course which has been

165
00:06:36,840 --> 00:06:39,000
done by Google project zero and Google

166
00:06:39,000 --> 00:06:40,319
tag

167
00:06:40,319 --> 00:06:42,180
um yeah if you want to follow along

168
00:06:42,180 --> 00:06:44,220
um the the technical analysis you can

169
00:06:44,220 --> 00:06:47,520
just go to the the links on the slide I

170
00:06:47,520 --> 00:06:50,039
will share the slides later on

171
00:06:50,039 --> 00:06:53,220
yeah then the third example um it's the

172
00:06:53,220 --> 00:06:55,080
second version of Pegasus as I call it

173
00:06:55,080 --> 00:06:57,780
because it's not using a one-click

174
00:06:57,780 --> 00:06:59,699
export anymore it's using a zero click

175
00:06:59,699 --> 00:07:01,919
and it also doesn't use persistency

176
00:07:01,919 --> 00:07:03,139
anymore

177
00:07:03,139 --> 00:07:04,800
at least

178
00:07:04,800 --> 00:07:06,960
as long as we know it but honestly if

179
00:07:06,960 --> 00:07:08,460
you have the possibility of just

180
00:07:08,460 --> 00:07:10,800
reinfecting a phone over and over again

181
00:07:10,800 --> 00:07:12,780
without the user being able to defend

182
00:07:12,780 --> 00:07:14,340
against it because it's a zero click

183
00:07:14,340 --> 00:07:16,800
exploit you basically if the user is

184
00:07:16,800 --> 00:07:19,440
accessible you can just exploit him I

185
00:07:19,440 --> 00:07:21,240
don't think that persistency is really

186
00:07:21,240 --> 00:07:22,800
something that you want to go there as a

187
00:07:22,800 --> 00:07:25,440
developer of malware

188
00:07:25,440 --> 00:07:29,220
um we only know of one really cve which

189
00:07:29,220 --> 00:07:30,960
was related to that that's the force

190
00:07:30,960 --> 00:07:34,919
entry cve which was also analyzed um by

191
00:07:34,919 --> 00:07:37,680
in beer and Samuel gross at Google

192
00:07:37,680 --> 00:07:39,360
project zero

193
00:07:39,360 --> 00:07:41,520
um we cannot say at the moment what are

194
00:07:41,520 --> 00:07:44,400
the capabilities of that matter because

195
00:07:44,400 --> 00:07:46,139
um the implant that has been used they

196
00:07:46,139 --> 00:07:48,000
were never able to recover that implant

197
00:07:48,000 --> 00:07:50,699
but what I can fairly say is that it's

198
00:07:50,699 --> 00:07:53,039
at least possible that all the other

199
00:07:53,039 --> 00:07:55,560
things that have been done on the first

200
00:07:55,560 --> 00:07:59,639
sample in in 2019 which Google found can

201
00:07:59,639 --> 00:08:02,819
also be done by Pegasus so um it's not

202
00:08:02,819 --> 00:08:04,500
really sure maybe they did something

203
00:08:04,500 --> 00:08:06,000
more maybe they did something less

204
00:08:06,000 --> 00:08:07,860
without the implant we cannot really

205
00:08:07,860 --> 00:08:09,660
tear

206
00:08:09,660 --> 00:08:11,280
um yeah citizen lab and Amnesty

207
00:08:11,280 --> 00:08:12,660
International have found that one

208
00:08:12,660 --> 00:08:13,680
actually

209
00:08:13,680 --> 00:08:16,560
um by looking at iOS backups and

210
00:08:16,560 --> 00:08:18,539
forensic artifacts they found some

211
00:08:18,539 --> 00:08:21,960
discrepancy in different parts of

212
00:08:21,960 --> 00:08:24,360
databases they knew about the

213
00:08:24,360 --> 00:08:27,180
infrastructure that NSO was using so

214
00:08:27,180 --> 00:08:29,220
they also were possible to to detect

215
00:08:29,220 --> 00:08:32,159
some calls to some websites but this

216
00:08:32,159 --> 00:08:35,940
sample or this attack has also not being

217
00:08:35,940 --> 00:08:38,099
detected on the device Itself by some

218
00:08:38,099 --> 00:08:39,839
kind of software but it has been

219
00:08:39,839 --> 00:08:42,839
detected by forensic analysis later on

220
00:08:42,839 --> 00:08:45,899
yeah infection Vector was IMS for that

221
00:08:45,899 --> 00:08:48,060
part and at least a citizen lab in

222
00:08:48,060 --> 00:08:51,120
amnesty are telling us that this kind of

223
00:08:51,120 --> 00:08:53,339
version has also been coupled with

224
00:08:53,339 --> 00:08:54,959
different kind of vulnerabilities in

225
00:08:54,959 --> 00:08:57,540
iMessage voice over Wi-Fi iMessage Again

226
00:08:57,540 --> 00:09:00,120
full stream and the IM transcoder agent

227
00:09:00,120 --> 00:09:04,560
from IOS 10 to iOS 14.

228
00:09:04,560 --> 00:09:08,220
you know the last sample it's um it's a

229
00:09:08,220 --> 00:09:10,740
report which also came out I think a

230
00:09:10,740 --> 00:09:13,320
couple of months ago it's a easy hermit

231
00:09:13,320 --> 00:09:15,839
malware in comparison to the other

232
00:09:15,839 --> 00:09:19,100
sample this one is um

233
00:09:19,100 --> 00:09:21,720
it has an infection Vector of a site

234
00:09:21,720 --> 00:09:23,580
loaded application so that's something

235
00:09:23,580 --> 00:09:25,260
that you as a company at least can

236
00:09:25,260 --> 00:09:27,720
basically if you're using an MDM you can

237
00:09:27,720 --> 00:09:29,760
completely protect yourself against so

238
00:09:29,760 --> 00:09:33,360
it's kind of a rare sample but this

239
00:09:33,360 --> 00:09:36,480
malware used a couple of Open Source

240
00:09:36,480 --> 00:09:38,220
exploits which have been used for for

241
00:09:38,220 --> 00:09:40,339
jailbreaking like light speed support

242
00:09:40,339 --> 00:09:43,620
time waste and they also had two zero

243
00:09:43,620 --> 00:09:45,779
days and I think INB will talk tomorrow

244
00:09:45,779 --> 00:09:49,440
about one of these more so I I don't

245
00:09:49,440 --> 00:09:50,339
want to

246
00:09:50,339 --> 00:09:52,019
spoil your attack

247
00:09:52,019 --> 00:09:55,680
yeah but there's also a nice block entry

248
00:09:55,680 --> 00:09:57,899
on their website on how these exports

249
00:09:57,899 --> 00:10:00,860
work still we didn't recover any kind of

250
00:10:00,860 --> 00:10:03,120
mavier implants so we don't know what

251
00:10:03,120 --> 00:10:05,240
the capabilities of that map there are

252
00:10:05,240 --> 00:10:08,339
Lookout found a similar sample on

253
00:10:08,339 --> 00:10:11,820
Android so I also deducted that some of

254
00:10:11,820 --> 00:10:13,260
these capabilities might the same and

255
00:10:13,260 --> 00:10:15,180
I've added the same capabilities that I

256
00:10:15,180 --> 00:10:17,220
had for like the standard never example

257
00:10:17,220 --> 00:10:19,680
that we had in the past yeah the targets

258
00:10:19,680 --> 00:10:21,779
have been people in Kazakhstan and Italy

259
00:10:21,779 --> 00:10:25,320
and the attribution goes to RCS labs

260
00:10:25,320 --> 00:10:28,980
so if we compare now the first slide

261
00:10:28,980 --> 00:10:32,519
with all the cves now with the ones that

262
00:10:32,519 --> 00:10:33,959
we have found

263
00:10:33,959 --> 00:10:37,860
in that public examples of of malware

264
00:10:37,860 --> 00:10:39,839
that we know we can see that we are

265
00:10:39,839 --> 00:10:42,480
missing a lot of stuff so maybe

266
00:10:42,480 --> 00:10:45,060
there's more never out there maybe

267
00:10:45,060 --> 00:10:46,800
there's not maybe there's just other

268
00:10:46,800 --> 00:10:48,540
cves that have been used by the same

269
00:10:48,540 --> 00:10:50,700
kind of never but we do not really know

270
00:10:50,700 --> 00:10:52,560
at that moment so we also do not know

271
00:10:52,560 --> 00:10:55,140
how large that problem is of zero or one

272
00:10:55,140 --> 00:10:57,120
click member that can be running on iOS

273
00:10:57,120 --> 00:10:59,880
without further detection measures

274
00:10:59,880 --> 00:11:02,820
well before we go into that let's talk a

275
00:11:02,820 --> 00:11:05,519
little bit about maver and have first

276
00:11:05,519 --> 00:11:09,660
this recap of jbrex so as we've seen in

277
00:11:09,660 --> 00:11:12,600
the great talk of Linux Linus um the

278
00:11:12,600 --> 00:11:14,700
process of app jailbreaking is at least

279
00:11:14,700 --> 00:11:16,740
you start with an exploit of course you

280
00:11:16,740 --> 00:11:17,820
need to have some kind of Attraction

281
00:11:17,820 --> 00:11:20,459
Vector you then have typically a stage

282
00:11:20,459 --> 00:11:22,440
of elevation of privileges to make

283
00:11:22,440 --> 00:11:24,839
jailbreaking a lot easier for you so you

284
00:11:24,839 --> 00:11:26,880
try to get rid of the sandbox you try to

285
00:11:26,880 --> 00:11:29,519
get to be the root user if you need some

286
00:11:29,519 --> 00:11:31,920
some kind of entitlements or PPI bypass

287
00:11:31,920 --> 00:11:33,779
Etc then you're creating a shell

288
00:11:33,779 --> 00:11:35,459
environment and after that you're

289
00:11:35,459 --> 00:11:38,040
basically creating an app store and

290
00:11:38,040 --> 00:11:40,860
tweak sensoria so there are two

291
00:11:40,860 --> 00:11:43,320
types of J breaks the one is abjab

292
00:11:43,320 --> 00:11:45,420
breaks and this is also the one which

293
00:11:45,420 --> 00:11:47,160
relates more to never at least that's

294
00:11:47,160 --> 00:11:49,860
the current state which basically need

295
00:11:49,860 --> 00:11:51,480
an application to start the jailbreak

296
00:11:51,480 --> 00:11:54,959
it's a semi or a it's semi untailed or

297
00:11:54,959 --> 00:11:56,700
it's an untested one which basically

298
00:11:56,700 --> 00:11:59,279
means sometimes it can be reboot safe if

299
00:11:59,279 --> 00:12:01,380
you have an untether or you just need to

300
00:12:01,380 --> 00:12:03,540
restart the jailbreak after every reboot

301
00:12:03,540 --> 00:12:05,880
of the device some public examples are

302
00:12:05,880 --> 00:12:09,120
uncover Fugu 15 which hopefully will be

303
00:12:09,120 --> 00:12:11,519
released in a couple of days and a

304
00:12:11,519 --> 00:12:13,380
chayote which is at the current state

305
00:12:13,380 --> 00:12:15,300
not released then we have boot

306
00:12:15,300 --> 00:12:17,700
jailbreaks like check rain which are

307
00:12:17,700 --> 00:12:20,459
tethered and the jailbreak is happening

308
00:12:20,459 --> 00:12:22,160
during the boot process

309
00:12:22,160 --> 00:12:24,720
I make a distinction between both of

310
00:12:24,720 --> 00:12:27,660
them because the security mechanisms

311
00:12:27,660 --> 00:12:30,240
which are basically disabled are

312
00:12:30,240 --> 00:12:32,399
different if you have an app Jailbreak

313
00:12:32,399 --> 00:12:33,959
or if you have a bootier break because

314
00:12:33,959 --> 00:12:35,820
if you are able to set the boot

315
00:12:35,820 --> 00:12:38,700
arguments of iOS you can just disable a

316
00:12:38,700 --> 00:12:41,579
lot more security mechanisms than if you

317
00:12:41,579 --> 00:12:42,959
are just an application because you

318
00:12:42,959 --> 00:12:44,339
don't have the ability to basically

319
00:12:44,339 --> 00:12:47,880
patch the kernel binary thanks to ktrr

320
00:12:47,880 --> 00:12:50,519
so that means you cannot disable just

321
00:12:50,519 --> 00:12:52,980
mechanisms on the fly or which you can

322
00:12:52,980 --> 00:12:54,720
basically do if you're able to change

323
00:12:54,720 --> 00:12:56,700
the boot arcs

324
00:12:56,700 --> 00:12:59,399
then there's for me there are three

325
00:12:59,399 --> 00:13:01,860
different parts of jailbreaks there's a

326
00:13:01,860 --> 00:13:03,779
research Daybreak which will just

327
00:13:03,779 --> 00:13:06,000
provide you a basic shell environment

328
00:13:06,000 --> 00:13:09,360
for example Mark portal did I think in

329
00:13:09,360 --> 00:13:12,120
iOS 10 so from from in beer then you

330
00:13:12,120 --> 00:13:14,279
have a developer jailbreak which allows

331
00:13:14,279 --> 00:13:15,959
you to further develop the jailbreak

332
00:13:15,959 --> 00:13:18,360
maybe you can start developing on tweaks

333
00:13:18,360 --> 00:13:21,480
but this is still something which is a

334
00:13:21,480 --> 00:13:23,220
little bit risky so if you do not know

335
00:13:23,220 --> 00:13:24,420
what you're doing on the operating

336
00:13:24,420 --> 00:13:26,040
system you can still break your device

337
00:13:26,040 --> 00:13:28,200
you can still get into troubles

338
00:13:28,200 --> 00:13:30,600
and you have a user jailbreak and this

339
00:13:30,600 --> 00:13:32,579
is what the final examples of uncover

340
00:13:32,579 --> 00:13:34,860
jot and so are basically are so they

341
00:13:34,860 --> 00:13:37,079
have a nice GUI they are shiny they have

342
00:13:37,079 --> 00:13:38,760
tweak support they have comfort features

343
00:13:38,760 --> 00:13:41,100
they allow you to restore the device and

344
00:13:41,100 --> 00:13:42,779
these Drive racks are basically made for

345
00:13:42,779 --> 00:13:46,019
the end user but these are also the

346
00:13:46,019 --> 00:13:47,760
jailbreaks um that typical driver

347
00:13:47,760 --> 00:13:50,160
detection is looking at so it's not

348
00:13:50,160 --> 00:13:52,260
looking at the more like Advanced

349
00:13:52,260 --> 00:13:54,240
jailbreaks which may be more risky or

350
00:13:54,240 --> 00:13:55,980
maybe more similar to malware it's

351
00:13:55,980 --> 00:13:59,100
basically looking at user drags

352
00:13:59,100 --> 00:14:02,700
so if we compare that to mever on a

353
00:14:02,700 --> 00:14:05,220
technical level we have some kind of

354
00:14:05,220 --> 00:14:08,100
comparisons so never always has also

355
00:14:08,100 --> 00:14:09,720
that infection Vector it has some

356
00:14:09,720 --> 00:14:11,639
exploits which it may be using for the

357
00:14:11,639 --> 00:14:13,740
entire faction Vector it has also a kind

358
00:14:13,740 --> 00:14:16,260
of elevation of privilege stage or post

359
00:14:16,260 --> 00:14:18,240
exploitation depending on the need of

360
00:14:18,240 --> 00:14:19,920
the matter

361
00:14:19,920 --> 00:14:23,639
um and then it doesn't do or at least

362
00:14:23,639 --> 00:14:25,500
the most often didn't do a lot of device

363
00:14:25,500 --> 00:14:27,600
changes on the device and then it has

364
00:14:27,600 --> 00:14:30,120
some activity like a malicious app or

365
00:14:30,120 --> 00:14:32,639
implant or a command control server if

366
00:14:32,639 --> 00:14:34,200
you compare that to a jailbreaks the

367
00:14:34,200 --> 00:14:35,760
first three stages are basically the

368
00:14:35,760 --> 00:14:36,540
same

369
00:14:36,540 --> 00:14:39,360
but afterwards on the third stage the

370
00:14:39,360 --> 00:14:41,880
jailbreak will change a lot on the

371
00:14:41,880 --> 00:14:45,180
device to make the user being able to

372
00:14:45,180 --> 00:14:46,920
install other applications have a

373
00:14:46,920 --> 00:14:48,480
package manager and so on and so forth

374
00:14:48,480 --> 00:14:50,399
and that's basically where we have one

375
00:14:50,399 --> 00:14:52,440
of the differences and because the

376
00:14:52,440 --> 00:14:55,680
jailbreak is doing something which has a

377
00:14:55,680 --> 00:14:58,500
change which is divide wide seeable and

378
00:14:58,500 --> 00:15:00,240
the malware actually doesn't

379
00:15:00,240 --> 00:15:01,920
want to do that because the only

380
00:15:01,920 --> 00:15:04,380
interested of a malware is I want to be

381
00:15:04,380 --> 00:15:06,360
able to do a lot of nasty stuff on the

382
00:15:06,360 --> 00:15:08,100
device I do not want to enable everyone

383
00:15:08,100 --> 00:15:11,459
else to do that right so

384
00:15:11,459 --> 00:15:14,339
that's the main difference but if you're

385
00:15:14,339 --> 00:15:15,300
looking

386
00:15:15,300 --> 00:15:17,459
on a more organizational level there are

387
00:15:17,459 --> 00:15:19,440
a lot more differences so maver is

388
00:15:19,440 --> 00:15:21,899
typically attacker oriented

389
00:15:21,899 --> 00:15:24,240
by the jabrick of course is user

390
00:15:24,240 --> 00:15:26,699
oriented however uses zero days while in

391
00:15:26,699 --> 00:15:28,920
most cases our jailbreaks are using

392
00:15:28,920 --> 00:15:32,339
known exports which have already been of

393
00:15:32,339 --> 00:15:34,500
course been fixed whenever it tries to

394
00:15:34,500 --> 00:15:36,899
be stealth because I don't want to be

395
00:15:36,899 --> 00:15:38,639
detected on the device I still want to

396
00:15:38,639 --> 00:15:40,560
do my job right and the driver just

397
00:15:40,560 --> 00:15:42,540
wants to be open until never is focusing

398
00:15:42,540 --> 00:15:44,160
of course on extract data and control

399
00:15:44,160 --> 00:15:46,500
while the drawback wants to liberate the

400
00:15:46,500 --> 00:15:48,839
device and applications and that's why

401
00:15:48,839 --> 00:15:51,360
most never I would say is at the moment

402
00:15:51,360 --> 00:15:52,740
on the device undetectable and

403
00:15:52,740 --> 00:15:55,260
jailbreaks are detectable yeah and of

404
00:15:55,260 --> 00:15:57,360
course we only have a few known examples

405
00:15:57,360 --> 00:16:01,560
of um actually iOS member that we we can

406
00:16:01,560 --> 00:16:03,660
analyze and we have many known examples

407
00:16:03,660 --> 00:16:07,560
on on jailbreaks and of course never is

408
00:16:07,560 --> 00:16:10,019
targeted on single users or single user

409
00:16:10,019 --> 00:16:11,940
groups and jailbreaks are for the mass

410
00:16:11,940 --> 00:16:13,260
Market

411
00:16:13,260 --> 00:16:15,839
so how are we detecting drivers and

412
00:16:15,839 --> 00:16:19,920
never like today so typical detection

413
00:16:19,920 --> 00:16:22,920
mechanisms for dry brake is like you

414
00:16:22,920 --> 00:16:24,720
have files you have folders on disks

415
00:16:24,720 --> 00:16:26,519
that you know of for example like and

416
00:16:26,519 --> 00:16:28,920
slash JB or you know that their Studio

417
00:16:28,920 --> 00:16:30,959
application is somewhere installed at a

418
00:16:30,959 --> 00:16:33,240
certain at a certain file path you can

419
00:16:33,240 --> 00:16:35,760
detect that you can detect changes on

420
00:16:35,760 --> 00:16:37,620
the device for example

421
00:16:37,620 --> 00:16:40,740
before iOS 15 you could detect that you

422
00:16:40,740 --> 00:16:43,019
have a remounted root partition so the

423
00:16:43,019 --> 00:16:44,820
root partition of the device is normally

424
00:16:44,820 --> 00:16:47,639
just readable but it's not writable so

425
00:16:47,639 --> 00:16:49,019
if you remount it and you make it

426
00:16:49,019 --> 00:16:51,480
writable you can just write to slash

427
00:16:51,480 --> 00:16:54,000
something and you can also detect of

428
00:16:54,000 --> 00:16:55,500
course if you try to write to that

429
00:16:55,500 --> 00:16:58,560
folder as a as an application then you

430
00:16:58,560 --> 00:17:01,139
had a process or shared cash injections

431
00:17:01,139 --> 00:17:03,720
at some time you could also detect if

432
00:17:03,720 --> 00:17:06,179
something tries to just hook into some

433
00:17:06,179 --> 00:17:08,760
function and change something there of

434
00:17:08,760 --> 00:17:10,260
course you have some disabled security

435
00:17:10,260 --> 00:17:13,079
mechanisms on the boot jailbreaks if you

436
00:17:13,079 --> 00:17:15,240
see that maybe code signing is disabled

437
00:17:15,240 --> 00:17:16,919
or maybe if these sandboxes at all

438
00:17:16,919 --> 00:17:19,619
disabled you can detect such kind of

439
00:17:19,619 --> 00:17:21,359
behavior because you can just execute

440
00:17:21,359 --> 00:17:23,339
stuff as an application which you are

441
00:17:23,339 --> 00:17:25,559
not supposed to and which will

442
00:17:25,559 --> 00:17:27,660
um which you normally get just killed by

443
00:17:27,660 --> 00:17:29,760
and of course there are some protocol

444
00:17:29,760 --> 00:17:32,160
handlers like Cydia Doppler Point slash

445
00:17:32,160 --> 00:17:33,720
slash which you can detect but this is

446
00:17:33,720 --> 00:17:35,880
really just a user feature

447
00:17:35,880 --> 00:17:39,059
but detecting is one thing the reporting

448
00:17:39,059 --> 00:17:40,740
is a completely other thing and this is

449
00:17:40,740 --> 00:17:42,419
where I think we are lacking most of the

450
00:17:42,419 --> 00:17:45,059
problems right now because most Arabic

451
00:17:45,059 --> 00:17:46,980
detections are just they're detecting a

452
00:17:46,980 --> 00:17:48,600
single file on the file system and just

453
00:17:48,600 --> 00:17:51,360
saying oh I've got a jailbreak so if you

454
00:17:51,360 --> 00:17:52,980
reboot the device that file will still

455
00:17:52,980 --> 00:17:54,600
be there but the jailbreak will not be

456
00:17:54,600 --> 00:17:56,220
active anymore but your airbag detection

457
00:17:56,220 --> 00:17:58,260
still tells you hey I found the dry

458
00:17:58,260 --> 00:17:59,580
brakes there

459
00:17:59,580 --> 00:18:00,720
nice

460
00:18:00,720 --> 00:18:03,179
so also like one event will trigger the

461
00:18:03,179 --> 00:18:05,400
complete detection of the jailbreak but

462
00:18:05,400 --> 00:18:06,960
basically if you have an ongoing

463
00:18:06,960 --> 00:18:08,700
Jailbreak on that device you will have

464
00:18:08,700 --> 00:18:10,799
multiple events that can lead to that

465
00:18:10,799 --> 00:18:13,320
conclusion so maybe it's a good idea to

466
00:18:13,320 --> 00:18:15,179
just say if I detected one event that

467
00:18:15,179 --> 00:18:17,580
this might be some malicious behavior

468
00:18:17,580 --> 00:18:20,039
and a flag at malicious behavior but it

469
00:18:20,039 --> 00:18:21,299
shouldn't be like flag that's a dry

470
00:18:21,299 --> 00:18:23,460
wreck

471
00:18:23,460 --> 00:18:25,260
if you want to detect never on the

472
00:18:25,260 --> 00:18:26,000
device

473
00:18:26,000 --> 00:18:28,200
that's something that you at least

474
00:18:28,200 --> 00:18:30,179
cannot be doing today but what you can

475
00:18:30,179 --> 00:18:33,360
do is you can for example examine craft

476
00:18:33,360 --> 00:18:37,200
logs on the device so if you see that in

477
00:18:37,200 --> 00:18:39,299
an exploit is not like a hundred percent

478
00:18:39,299 --> 00:18:41,820
reliable so it might be sometimes

479
00:18:41,820 --> 00:18:44,160
panicking the kernel it might be

480
00:18:44,160 --> 00:18:46,020
sometimes relying that a process is

481
00:18:46,020 --> 00:18:48,179
crashed over and over and over again but

482
00:18:48,179 --> 00:18:50,220
as the process has restarted the exploit

483
00:18:50,220 --> 00:18:52,559
might be still successful but you will

484
00:18:52,559 --> 00:18:55,260
get some of the crash logs so if that

485
00:18:55,260 --> 00:18:58,080
never is not deleting the crash logs you

486
00:18:58,080 --> 00:19:01,260
might be find some hints on unsuccessful

487
00:19:01,260 --> 00:19:03,720
exploitation attempts if you are

488
00:19:03,720 --> 00:19:06,240
analyzing that crash logs but these

489
00:19:06,240 --> 00:19:08,100
craft logs are not accessible on the

490
00:19:08,100 --> 00:19:10,559
device you have to extract them via Mac

491
00:19:10,559 --> 00:19:13,200
OS or some other kind of Library another

492
00:19:13,200 --> 00:19:15,419
operating systems so you need to have

493
00:19:15,419 --> 00:19:17,580
some some kind of other device to be

494
00:19:17,580 --> 00:19:20,280
able to to work on that detection then

495
00:19:20,280 --> 00:19:21,660
of course you can do some network

496
00:19:21,660 --> 00:19:24,179
analysis you can use local the ends on

497
00:19:24,179 --> 00:19:26,280
the device maybe you'll see that there

498
00:19:26,280 --> 00:19:28,200
are some calls to some servers being

499
00:19:28,200 --> 00:19:31,380
made which are known for for malicious

500
00:19:31,380 --> 00:19:33,419
behavior maybe you see that there's a

501
00:19:33,419 --> 00:19:35,220
lot of data which is transported from

502
00:19:35,220 --> 00:19:37,140
the device to somewhere else and you can

503
00:19:37,140 --> 00:19:39,360
find some malicious patterns or some

504
00:19:39,360 --> 00:19:40,919
heuristics

505
00:19:40,919 --> 00:19:43,200
um yeah but honestly this is a lot of

506
00:19:43,200 --> 00:19:45,780
manual work and I don't think that is

507
00:19:45,780 --> 00:19:47,760
this is really um

508
00:19:47,760 --> 00:19:50,220
something which is successful at the

509
00:19:50,220 --> 00:19:51,720
moment then of course you can do

510
00:19:51,720 --> 00:19:54,059
forensic analysis if you are being able

511
00:19:54,059 --> 00:19:56,940
to drag back the device to get this file

512
00:19:56,940 --> 00:19:58,740
system down to the forensic analysis or

513
00:19:58,740 --> 00:20:02,220
you can work with an iTunes backup

514
00:20:02,220 --> 00:20:04,740
um and like I told you Picasso's the

515
00:20:04,740 --> 00:20:07,080
second version of that um and the mvt is

516
00:20:07,080 --> 00:20:09,539
that amnesty developed to find traces of

517
00:20:09,539 --> 00:20:12,780
Pegasus it works exactly that way but at

518
00:20:12,780 --> 00:20:14,280
most of the time this is like looking

519
00:20:14,280 --> 00:20:17,940
for for Neil and a haystack because

520
00:20:17,940 --> 00:20:19,860
um first you need to know that the

521
00:20:19,860 --> 00:20:21,539
device and the backup you're looking for

522
00:20:21,539 --> 00:20:24,000
has been really infected by a malicious

523
00:20:24,000 --> 00:20:25,260
software so you need to know if that

524
00:20:25,260 --> 00:20:28,380
needle exists or not so um that's the

525
00:20:28,380 --> 00:20:30,059
first plop and afterwards if you know

526
00:20:30,059 --> 00:20:31,919
that there might be a needle because it

527
00:20:31,919 --> 00:20:33,900
has been infected you still have to look

528
00:20:33,900 --> 00:20:36,000
at lots and lots and lots and lots of

529
00:20:36,000 --> 00:20:38,520
databases to maybe find some discrepancy

530
00:20:38,520 --> 00:20:41,220
or maybe some find some artifacts so

531
00:20:41,220 --> 00:20:43,860
that's a tedious task and I'm I'm really

532
00:20:43,860 --> 00:20:46,679
amazed of what amnesty and what citizen

533
00:20:46,679 --> 00:20:48,539
lab did at that time to really find that

534
00:20:48,539 --> 00:20:51,299
because I think that's a crazy crazy

535
00:20:51,299 --> 00:20:53,340
amount of work

536
00:20:53,340 --> 00:20:55,380
and then the last option that we have of

537
00:20:55,380 --> 00:20:58,140
course if you have access to your own

538
00:20:58,140 --> 00:21:01,320
zero day kernel exploit or your

539
00:21:01,320 --> 00:21:03,960
own exploits on an older version of iOS

540
00:21:03,960 --> 00:21:05,760
then of course you can use that export

541
00:21:05,760 --> 00:21:08,160
to elevate your own privileges have a

542
00:21:08,160 --> 00:21:10,980
higher um yeah just have higher rights

543
00:21:10,980 --> 00:21:12,720
on the device and you can look at more

544
00:21:12,720 --> 00:21:14,340
and different examples to maybe find

545
00:21:14,340 --> 00:21:16,679
this kind of malware and actually maybe

546
00:21:16,679 --> 00:21:18,600
it's a good idea if you're belonging to

547
00:21:18,600 --> 00:21:21,419
a group which might be targeted by on or

548
00:21:21,419 --> 00:21:23,400
like zero day Zero click matter maybe

549
00:21:23,400 --> 00:21:25,260
it's a good idea to stay on an iOS

550
00:21:25,260 --> 00:21:27,840
device which is vulnerable so you can

551
00:21:27,840 --> 00:21:30,600
try to detect it

552
00:21:30,600 --> 00:21:31,860
um because it doesn't make a real

553
00:21:31,860 --> 00:21:32,760
difference if you're on the latest

554
00:21:32,760 --> 00:21:34,380
version and you get hacked by the same

555
00:21:34,380 --> 00:21:36,659
zero day Zero click and the risk of

556
00:21:36,659 --> 00:21:39,179
being hacked by end day

557
00:21:39,179 --> 00:21:42,059
and click I think it's not that high at

558
00:21:42,059 --> 00:21:44,159
the moment because most iOS users are

559
00:21:44,159 --> 00:21:46,200
updating so the value of that kind of

560
00:21:46,200 --> 00:21:48,419
exploits and vulnerabilities is not that

561
00:21:48,419 --> 00:21:49,440
much

562
00:21:49,440 --> 00:21:51,780
no

563
00:21:51,780 --> 00:21:54,120
um so what does it basically means that

564
00:21:54,120 --> 00:21:57,600
means is that an attacker who has access

565
00:21:57,600 --> 00:22:01,020
to such kind of mirror is basically

566
00:22:01,020 --> 00:22:04,020
able to extract information from the

567
00:22:04,020 --> 00:22:05,179
file system

568
00:22:05,179 --> 00:22:08,159
is able to track the user is able to

569
00:22:08,159 --> 00:22:10,860
extract accounts passwords to get access

570
00:22:10,860 --> 00:22:13,799
to camera and microphone without any

571
00:22:13,799 --> 00:22:16,500
chance of detecting that on the device

572
00:22:16,500 --> 00:22:19,740
itself so no kind of mobile threat

573
00:22:19,740 --> 00:22:21,960
defense solution more kind of a emm

574
00:22:21,960 --> 00:22:23,520
solution will basically help you to

575
00:22:23,520 --> 00:22:26,100
detect such kind of map on the device at

576
00:22:26,100 --> 00:22:29,280
the current state if that never tries to

577
00:22:29,280 --> 00:22:32,159
do more manipulations on the device

578
00:22:32,159 --> 00:22:34,140
itself to maybe inject into other

579
00:22:34,140 --> 00:22:36,480
processes or doing some other kinds

580
00:22:36,480 --> 00:22:38,760
there tries to patch some apps or tries

581
00:22:38,760 --> 00:22:40,320
to establish maybe a persistence

582
00:22:40,320 --> 00:22:42,059
mechanism it might be possible to

583
00:22:42,059 --> 00:22:44,039
detecting it

584
00:22:44,039 --> 00:22:46,500
but it's um it's it's a cat and mouse

585
00:22:46,500 --> 00:22:49,700
game on that part

586
00:22:50,220 --> 00:22:52,919
so what can we do to improve the

587
00:22:52,919 --> 00:22:54,840
detection

588
00:22:54,840 --> 00:22:55,440
um

589
00:22:55,440 --> 00:22:57,840
for better detecting J breaks it's

590
00:22:57,840 --> 00:23:00,539
basically quite easy because

591
00:23:00,539 --> 00:23:02,460
you don't want to detect jailbreaks

592
00:23:02,460 --> 00:23:04,559
actually that's the thing that you're

593
00:23:04,559 --> 00:23:06,659
trying to detect is malicious behavior

594
00:23:06,659 --> 00:23:09,120
on a device so you shouldn't flag a

595
00:23:09,120 --> 00:23:10,919
jailbreak as a detection there you

596
00:23:10,919 --> 00:23:13,320
should try to flag every malicious

597
00:23:13,320 --> 00:23:15,179
behavior on the device and you call it

598
00:23:15,179 --> 00:23:17,700
first that you found some artifacts that

599
00:23:17,700 --> 00:23:19,500
you found maybe some instance of system

600
00:23:19,500 --> 00:23:22,860
tampering and then you can still try to

601
00:23:22,860 --> 00:23:25,080
find out if you found five or six or

602
00:23:25,080 --> 00:23:26,640
whatever different artifacts then you

603
00:23:26,640 --> 00:23:29,100
can map that to a jailbreak you can also

604
00:23:29,100 --> 00:23:31,380
try to map some of these artifacts that

605
00:23:31,380 --> 00:23:34,740
you found on the device to non-jabet

606
00:23:34,740 --> 00:23:36,780
samples which are on the market and then

607
00:23:36,780 --> 00:23:38,580
of course you have to think if the user

608
00:23:38,580 --> 00:23:40,559
install like for example uncover or

609
00:23:40,559 --> 00:23:42,780
check drain on the device this is most

610
00:23:42,780 --> 00:23:44,640
likely not something malicious going on

611
00:23:44,640 --> 00:23:47,280
there it's just a user which wants to do

612
00:23:47,280 --> 00:23:49,620
that so maybe it's a better idea to just

613
00:23:49,620 --> 00:23:52,200
ask the user if he wants to do it or not

614
00:23:52,200 --> 00:23:54,000
but I don't think that you will have

615
00:23:54,000 --> 00:23:55,919
some kind of malicious or malicious

616
00:23:55,919 --> 00:23:57,600
attacker ongoing if it's well a

617
00:23:57,600 --> 00:24:00,419
jailbreak which is detected

618
00:24:00,419 --> 00:24:03,720
so then you should differentiate between

619
00:24:03,720 --> 00:24:05,520
an active and an inactive jailbreak

620
00:24:05,520 --> 00:24:08,220
because just think about

621
00:24:08,220 --> 00:24:10,380
the user just restart the device that

622
00:24:10,380 --> 00:24:12,299
updates the device there might be some

623
00:24:12,299 --> 00:24:13,740
artifacts which are still on the

624
00:24:13,740 --> 00:24:16,080
operating system it's detected as that

625
00:24:16,080 --> 00:24:18,840
the user don't has the possibility to

626
00:24:18,840 --> 00:24:21,780
exploit its device anymore and it's just

627
00:24:21,780 --> 00:24:23,520
because the signal file has been there

628
00:24:23,520 --> 00:24:25,500
and it stays after an update of the

629
00:24:25,500 --> 00:24:27,360
operating system your device is still

630
00:24:27,360 --> 00:24:29,039
flagged as jailbroken so you can

631
00:24:29,039 --> 00:24:30,900
basically not use it anymore with such

632
00:24:30,900 --> 00:24:33,480
kind of behavior so this is just crappy

633
00:24:33,480 --> 00:24:35,880
detection and it's not really helpful at

634
00:24:35,880 --> 00:24:37,440
that time

635
00:24:37,440 --> 00:24:38,460
um then of course you should

636
00:24:38,460 --> 00:24:40,440
differentiate between app generics and

637
00:24:40,440 --> 00:24:41,760
boot job racks because they're just

638
00:24:41,760 --> 00:24:43,620
doing different things on the device and

639
00:24:43,620 --> 00:24:45,780
at least as someone on a company who

640
00:24:45,780 --> 00:24:48,539
tries to the like to defend devices you

641
00:24:48,539 --> 00:24:51,480
want to know does it was it a boot

642
00:24:51,480 --> 00:24:53,159
jailbreak or was it an app Jailbreak

643
00:24:53,159 --> 00:24:56,520
which um the detection came from

644
00:24:56,520 --> 00:24:58,559
yeah and of course you want to validate

645
00:24:58,559 --> 00:25:00,659
your findings on iOS versions device

646
00:25:00,659 --> 00:25:03,720
types and Etc so if you if you have a

647
00:25:03,720 --> 00:25:06,240
finding on the latest version of iOS

648
00:25:06,240 --> 00:25:08,880
and it's just a file I can tell you this

649
00:25:08,880 --> 00:25:11,100
has not been any kind of jailbreak which

650
00:25:11,100 --> 00:25:13,440
is your problem maybe it's just a single

651
00:25:13,440 --> 00:25:15,960
artifact but if you detect that there

652
00:25:15,960 --> 00:25:17,880
has been like a remount of the root

653
00:25:17,880 --> 00:25:19,620
partition on the latest version of iOS

654
00:25:19,620 --> 00:25:21,539
this is definitely something you want to

655
00:25:21,539 --> 00:25:23,400
look into it but if it just calls

656
00:25:23,400 --> 00:25:24,480
jailbreak

657
00:25:24,480 --> 00:25:26,880
you're starting at basically nowhere so

658
00:25:26,880 --> 00:25:29,159
you need to get more information at

659
00:25:29,159 --> 00:25:30,900
least from a company who's trying to

660
00:25:30,900 --> 00:25:33,179
defend its devices and as a user I would

661
00:25:33,179 --> 00:25:35,580
like to have the same information as

662
00:25:35,580 --> 00:25:37,320
well

663
00:25:37,320 --> 00:25:38,940
if you want to improve the mirror

664
00:25:38,940 --> 00:25:40,440
detection

665
00:25:40,440 --> 00:25:41,220
um

666
00:25:41,220 --> 00:25:44,279
I of course something which is always

667
00:25:44,279 --> 00:25:46,200
good if you want to improve staff you

668
00:25:46,200 --> 00:25:47,640
could always improve the code quality

669
00:25:47,640 --> 00:25:50,760
and add more exploit mitigations but

670
00:25:50,760 --> 00:25:52,080
it's basically doesn't have to do

671
00:25:52,080 --> 00:25:54,179
anything with mobile detection but if we

672
00:25:54,179 --> 00:25:56,159
I think what the one of the first and

673
00:25:56,159 --> 00:25:58,440
necessary things that Apple could be

674
00:25:58,440 --> 00:26:00,900
doing is giving us something like that

675
00:26:00,900 --> 00:26:02,940
endpoint security entitlement that we

676
00:26:02,940 --> 00:26:05,700
have on Mac OS also on iOS and giving us

677
00:26:05,700 --> 00:26:08,100
like forensic capabilities of maybe

678
00:26:08,100 --> 00:26:10,020
accessing the file system of maybe

679
00:26:10,020 --> 00:26:13,080
accessing um also the the ram of that

680
00:26:13,080 --> 00:26:15,900
device maybe giving us on the device

681
00:26:15,900 --> 00:26:18,360
itself additional capabilities like

682
00:26:18,360 --> 00:26:20,840
looking into a process table

683
00:26:20,840 --> 00:26:23,700
at at some parts of the device I think

684
00:26:23,700 --> 00:26:25,500
apple is really really great at

685
00:26:25,500 --> 00:26:28,740
preventing and preventing exploits at

686
00:26:28,740 --> 00:26:30,480
doing export mitigations and all that

687
00:26:30,480 --> 00:26:33,179
stuff but I think they are lacking at

688
00:26:33,179 --> 00:26:35,039
the detection side of such kind of

689
00:26:35,039 --> 00:26:37,980
mirrors on the device so far so

690
00:26:37,980 --> 00:26:40,740
if I had to wish for something I think

691
00:26:40,740 --> 00:26:42,480
at least to having access to the file

692
00:26:42,480 --> 00:26:44,940
system as a trusted application or

693
00:26:44,940 --> 00:26:47,159
having access to some kind of endpoint

694
00:26:47,159 --> 00:26:48,480
security entitlement for more

695
00:26:48,480 --> 00:26:50,279
information as just for a drastic

696
00:26:50,279 --> 00:26:51,720
application that would be really

697
00:26:51,720 --> 00:26:53,940
something that would be really great

698
00:26:53,940 --> 00:26:56,159
yeah what companies can of course do and

699
00:26:56,159 --> 00:26:58,260
they should do is monitoring the network

700
00:26:58,260 --> 00:27:00,960
traffic and they should if they want to

701
00:27:00,960 --> 00:27:02,580
implement some kind of jailbreak or

702
00:27:02,580 --> 00:27:04,080
malicious behavior detection they should

703
00:27:04,080 --> 00:27:07,260
do a Buy application because if you just

704
00:27:07,260 --> 00:27:09,059
have one application on the device which

705
00:27:09,059 --> 00:27:10,500
is responsible for your whole security

706
00:27:10,500 --> 00:27:12,779
and for the detection of everything as

707
00:27:12,779 --> 00:27:14,340
an attacker if you just know the five

708
00:27:14,340 --> 00:27:15,779
companies are doing endpoint protection

709
00:27:15,779 --> 00:27:17,760
yeah you can just basically shut down

710
00:27:17,760 --> 00:27:20,100
the processes you can and put them on

711
00:27:20,100 --> 00:27:21,779
hold you can just avoid these kind of

712
00:27:21,779 --> 00:27:23,279
applications and you can still doing

713
00:27:23,279 --> 00:27:25,260
your nasty stuff

714
00:27:25,260 --> 00:27:27,179
um so if you want to implement that that

715
00:27:27,179 --> 00:27:30,059
your process so you should take care of

716
00:27:30,059 --> 00:27:31,980
your own applications that your process

717
00:27:31,980 --> 00:27:34,140
is not going to be hijacked some of some

718
00:27:34,140 --> 00:27:37,200
kind of malicious application outside

719
00:27:37,200 --> 00:27:38,520
so

720
00:27:38,520 --> 00:27:40,740
um together for companies and for iOS

721
00:27:40,740 --> 00:27:42,720
experts and defensive companies you can

722
00:27:42,720 --> 00:27:44,340
do crash log and forensic analysis

723
00:27:44,340 --> 00:27:46,679
together because this is something which

724
00:27:46,679 --> 00:27:48,659
is quite expensive you need to have an

725
00:27:48,659 --> 00:27:50,340
intensive knowledge this is not

726
00:27:50,340 --> 00:27:52,380
something that your standard company can

727
00:27:52,380 --> 00:27:54,299
do alone but you can do it together with

728
00:27:54,299 --> 00:27:56,039
some kind of experts or defensive

729
00:27:56,039 --> 00:27:57,480
companies who have that knowledge

730
00:27:57,480 --> 00:27:58,520
available

731
00:27:58,520 --> 00:28:01,740
what I also would be love to see more is

732
00:28:01,740 --> 00:28:04,140
a training on on mobile detections by

733
00:28:04,140 --> 00:28:06,059
maybe amnesty citizen lab or Google

734
00:28:06,059 --> 00:28:09,299
project zero so the guys who were found

735
00:28:09,299 --> 00:28:11,460
that kind of malware and it would be

736
00:28:11,460 --> 00:28:13,440
really nice to have the the advantage of

737
00:28:13,440 --> 00:28:15,960
looking into how they did that to just

738
00:28:15,960 --> 00:28:17,580
train other people the more people who

739
00:28:17,580 --> 00:28:18,960
are looking at these kind of things and

740
00:28:18,960 --> 00:28:21,720
have that capabilities the better it is

741
00:28:21,720 --> 00:28:24,360
for us to to Really find also other

742
00:28:24,360 --> 00:28:27,240
players who might be still ongoing and

743
00:28:27,240 --> 00:28:29,279
we do not know about

744
00:28:29,279 --> 00:28:31,020
um the same applies for training on iOS

745
00:28:31,020 --> 00:28:32,640
exportation

746
00:28:32,640 --> 00:28:35,159
um on also on jpeg development if you

747
00:28:35,159 --> 00:28:36,480
look at the current state of that

748
00:28:36,480 --> 00:28:37,400
Community

749
00:28:37,400 --> 00:28:40,260
if you want to get into it you have to

750
00:28:40,260 --> 00:28:42,120
learn a lot a lot a lot a lot a lot of

751
00:28:42,120 --> 00:28:43,140
stuff

752
00:28:43,140 --> 00:28:45,659
and for new students it's just not

753
00:28:45,659 --> 00:28:47,159
possible to buy a five thousand dollar

754
00:28:47,159 --> 00:28:50,059
training for for iOS current exportation

755
00:28:50,059 --> 00:28:54,419
and also if you look at like training

756
00:28:54,419 --> 00:28:56,220
companies like zance for example they

757
00:28:56,220 --> 00:28:58,320
don't really have an advanced course on

758
00:28:58,320 --> 00:28:59,880
arm exportation or even on mobile

759
00:28:59,880 --> 00:29:03,240
exploitation so I think we have a lag

760
00:29:03,240 --> 00:29:06,419
there on training capabilities at these

761
00:29:06,419 --> 00:29:10,080
really really needed skills and more

762
00:29:10,080 --> 00:29:11,940
like on the advanced side and of course

763
00:29:11,940 --> 00:29:14,159
I would like also like forensic

764
00:29:14,159 --> 00:29:17,640
companies like celebrbrite magnet and

765
00:29:17,640 --> 00:29:18,960
and all the other one who are offering

766
00:29:18,960 --> 00:29:21,120
that kind of possibility it's quite nice

767
00:29:21,120 --> 00:29:24,000
but this is not tailored to do Melva

768
00:29:24,000 --> 00:29:26,399
detection it's more like to find out who

769
00:29:26,399 --> 00:29:29,700
did what at what time level but you can

770
00:29:29,700 --> 00:29:32,100
use a lot of data there to find out

771
00:29:32,100 --> 00:29:33,840
which process might have been doing

772
00:29:33,840 --> 00:29:35,760
something on the device which are

773
00:29:35,760 --> 00:29:37,980
typical processed on the device so if

774
00:29:37,980 --> 00:29:40,020
you have a lot of these backups from

775
00:29:40,020 --> 00:29:41,760
different devices from different iOS

776
00:29:41,760 --> 00:29:44,159
versions there might might be something

777
00:29:44,159 --> 00:29:47,460
in there which can make it easier to do

778
00:29:47,460 --> 00:29:49,260
the detection

779
00:29:49,260 --> 00:29:52,080
some more research ideas is um yeah

780
00:29:52,080 --> 00:29:55,320
combining some some emm or MTD with

781
00:29:55,320 --> 00:29:57,299
crash log on Forensic analysis you need

782
00:29:57,299 --> 00:29:58,860
to have of course two clients because

783
00:29:58,860 --> 00:30:01,559
you cannot do that on the device

784
00:30:01,559 --> 00:30:03,779
that's maybe another idea for Apple to

785
00:30:03,779 --> 00:30:06,419
give us access to crash logs

786
00:30:06,419 --> 00:30:10,679
at least within recent emm system but

787
00:30:10,679 --> 00:30:12,480
you can of course just have a Mac OS

788
00:30:12,480 --> 00:30:14,340
client or Windows or Linux clients

789
00:30:14,340 --> 00:30:16,260
extracting that data from that iOS

790
00:30:16,260 --> 00:30:18,419
device which is connected to it and even

791
00:30:18,419 --> 00:30:20,700
if it's just once a month and then use

792
00:30:20,700 --> 00:30:23,279
it for a combined analysis with your emn

793
00:30:23,279 --> 00:30:25,200
MTD system that you have on the other

794
00:30:25,200 --> 00:30:29,039
side yeah and of course I think in iOS

795
00:30:29,039 --> 00:30:31,980
backups and file systems there is lots

796
00:30:31,980 --> 00:30:34,260
of databases there's lots of data there

797
00:30:34,260 --> 00:30:37,200
and we just started to figure out what

798
00:30:37,200 --> 00:30:39,899
we can use outside of these databases to

799
00:30:39,899 --> 00:30:43,620
use for form Ever detection

800
00:30:43,620 --> 00:30:46,200
so to sum it up

801
00:30:46,200 --> 00:30:48,299
um I think Apple's Walt's Garden raises

802
00:30:48,299 --> 00:30:50,940
the bar for exportation every year and

803
00:30:50,940 --> 00:30:52,440
it really gets harder and harder and

804
00:30:52,440 --> 00:30:54,120
harder if we look at what liners had to

805
00:30:54,120 --> 00:30:56,480
do to pop the latest iOS version

806
00:30:56,480 --> 00:30:59,659
combining four or five vulnerabilities

807
00:30:59,659 --> 00:31:03,179
it's a lot of work which is good for the

808
00:31:03,179 --> 00:31:05,220
consumers it's bad if you want to

809
00:31:05,220 --> 00:31:06,919
analyze the system

810
00:31:06,919 --> 00:31:09,840
then we should take care of that we do

811
00:31:09,840 --> 00:31:12,179
not confuse mava with jailbreaks we want

812
00:31:12,179 --> 00:31:13,919
to look at malware we do not want to

813
00:31:13,919 --> 00:31:15,779
detect jailbreaks because jailbreaks are

814
00:31:15,779 --> 00:31:18,000
made for the user and never has made for

815
00:31:18,000 --> 00:31:19,620
the attacker

816
00:31:19,620 --> 00:31:21,779
um now the typical drag detection at the

817
00:31:21,779 --> 00:31:24,059
moment is aimed at user jailbreaks it's

818
00:31:24,059 --> 00:31:26,279
not possible to detect exploits and

819
00:31:26,279 --> 00:31:28,679
never with an app on the device

820
00:31:28,679 --> 00:31:31,020
we have to make improvements on several

821
00:31:31,020 --> 00:31:33,299
levels and no one can fight this problem

822
00:31:33,299 --> 00:31:35,220
alone so everyone solves this problem

823
00:31:35,220 --> 00:31:37,500
alone we have to work on that as a

824
00:31:37,500 --> 00:31:39,720
community together if we want to get a

825
00:31:39,720 --> 00:31:41,940
stronger foothold here

826
00:31:41,940 --> 00:31:44,580
so I like to finish with a side of iron

827
00:31:44,580 --> 00:31:47,360
B which he made when he was analyzing

828
00:31:47,360 --> 00:31:50,760
the members in 2019 and I think this

829
00:31:50,760 --> 00:31:53,760
sums up the current state of of iOS mava

830
00:31:53,760 --> 00:31:58,039
detection on the device quite nicely

831
00:31:58,200 --> 00:32:00,960
so thank you very much if you want to

832
00:32:00,960 --> 00:32:02,460
connect with me on Twitter or LinkedIn

833
00:32:02,460 --> 00:32:05,279
you can just scan the QR codes

834
00:32:05,279 --> 00:32:09,240
yeah I also added um a list of people on

835
00:32:09,240 --> 00:32:10,980
on Twitter which I think is the

836
00:32:10,980 --> 00:32:12,840
jailbreak community so it's my

837
00:32:12,840 --> 00:32:15,360
combination of people who are working on

838
00:32:15,360 --> 00:32:16,860
on iOS

839
00:32:16,860 --> 00:32:20,100
um research or on jailbreaks if you

840
00:32:20,100 --> 00:32:21,720
think you should be added to that group

841
00:32:21,720 --> 00:32:24,419
you can also just direct me on Twitter

842
00:32:24,419 --> 00:32:26,279
um yeah and I have a YouTube playlist of

843
00:32:26,279 --> 00:32:29,220
iOS talks that I I come up with

844
00:32:29,220 --> 00:32:31,080
um if you're interested in you can just

845
00:32:31,080 --> 00:32:32,340
use it

846
00:32:32,340 --> 00:32:34,799
yeah thank you very much

847
00:32:34,799 --> 00:32:36,600
I think I'm quite on time if you have

848
00:32:36,600 --> 00:32:38,959
some questions

849
00:32:44,820 --> 00:32:47,520
so you mentioned to be fairly simple for

850
00:32:47,520 --> 00:32:50,340
malware to

851
00:32:50,340 --> 00:32:52,799
detect if one of those security apps are

852
00:32:52,799 --> 00:32:55,080
running on the device the five companies

853
00:32:55,080 --> 00:32:56,940
you mentioned have you seen malware do

854
00:32:56,940 --> 00:32:58,679
that yet or is it because those apps are

855
00:32:58,679 --> 00:33:00,120
maybe not that widespread do you think

856
00:33:00,120 --> 00:33:01,260
that's something we'll see what are your

857
00:33:01,260 --> 00:33:02,760
thoughts on that

858
00:33:02,760 --> 00:33:06,000
um I did not see it but because I don't

859
00:33:06,000 --> 00:33:08,399
think that these applications are at the

860
00:33:08,399 --> 00:33:10,140
current moment able to detect this map

861
00:33:10,140 --> 00:33:12,659
where so you can just say stealthy in

862
00:33:12,659 --> 00:33:13,980
your way you can do whatever you like

863
00:33:13,980 --> 00:33:15,720
you do not have to even be stealthy on

864
00:33:15,720 --> 00:33:17,760
an export level you just have to be

865
00:33:17,760 --> 00:33:19,320
stealthy on the kind of malicious

866
00:33:19,320 --> 00:33:21,120
activity that you're on the device

867
00:33:21,120 --> 00:33:23,460
and I don't think that hooking into some

868
00:33:23,460 --> 00:33:26,279
kind of process is necessary anymore you

869
00:33:26,279 --> 00:33:29,220
can basically just extract all the files

870
00:33:29,220 --> 00:33:31,260
from any major Messenger application and

871
00:33:31,260 --> 00:33:33,179
you just get the raw data so the SMS

872
00:33:33,179 --> 00:33:34,980
database it's not encrypted you get all

873
00:33:34,980 --> 00:33:37,019
the iMessage traffic there same applies

874
00:33:37,019 --> 00:33:39,539
for emails WhatsApp telegram I think

875
00:33:39,539 --> 00:33:41,580
Google Mail as well so basically it's

876
00:33:41,580 --> 00:33:45,980
just it's just free meal

877
00:33:51,899 --> 00:33:54,739
so sorry

878
00:33:57,539 --> 00:33:59,039
um

879
00:33:59,039 --> 00:34:01,980
so um he asked if I reached out to Apple

880
00:34:01,980 --> 00:34:03,779
with regards to the endpoint security

881
00:34:03,779 --> 00:34:05,760
entitlement

882
00:34:05,760 --> 00:34:07,140
um

883
00:34:07,140 --> 00:34:09,659
yeah partly I have tried to communicate

884
00:34:09,659 --> 00:34:12,418
with apple a couple of times it was not

885
00:34:12,418 --> 00:34:14,280
that easy

886
00:34:14,280 --> 00:34:15,300
um

887
00:34:15,300 --> 00:34:17,639
I I try to use the context that I have

888
00:34:17,639 --> 00:34:19,679
at my company because we're working

889
00:34:19,679 --> 00:34:21,418
together I've sent them over my whole

890
00:34:21,418 --> 00:34:23,879
thesis I am still waiting for some kind

891
00:34:23,879 --> 00:34:26,099
of response

892
00:34:26,099 --> 00:34:30,500
um yeah so basically I

893
00:34:30,540 --> 00:34:33,060
yeah I just I'm just waiting for them to

894
00:34:33,060 --> 00:34:35,399
make contact to then of course come into

895
00:34:35,399 --> 00:34:38,899
some kind of discussions or talk

896
00:34:39,839 --> 00:34:42,259
sorry

897
00:34:43,440 --> 00:34:45,918
no no

898
00:34:54,839 --> 00:34:57,799
uh yes

899
00:34:58,440 --> 00:35:00,060
um I think the old version of Pegasus

900
00:35:00,060 --> 00:35:01,740
can be successfully detected because

901
00:35:01,740 --> 00:35:03,359
they're doing some stuff on the device

902
00:35:03,359 --> 00:35:05,400
like remounting they're using some

903
00:35:05,400 --> 00:35:07,859
Frameworks like substrate to inject into

904
00:35:07,859 --> 00:35:09,839
some kind of applications so that's all

905
00:35:09,839 --> 00:35:11,520
Behavior where you're not staying to

906
00:35:11,520 --> 00:35:12,720
yourself you're trying to change

907
00:35:12,720 --> 00:35:14,640
something on the device this can be

908
00:35:14,640 --> 00:35:15,800
detected

909
00:35:15,800 --> 00:35:18,180
I never tried all the old version of

910
00:35:18,180 --> 00:35:19,980
previous to actually see if that works

911
00:35:19,980 --> 00:35:22,920
or not works I've got into iOS

912
00:35:22,920 --> 00:35:25,859
um like research on iOS 11 so it was

913
00:35:25,859 --> 00:35:28,640
already two years old

914
00:35:29,880 --> 00:35:31,020
yeah

915
00:35:31,020 --> 00:35:33,420
no more questions

916
00:35:33,420 --> 00:35:35,820
uh briefly how do you think lockdown

917
00:35:35,820 --> 00:35:38,160
mode will impact either the attackers

918
00:35:38,160 --> 00:35:40,320
and or their their malware is it just

919
00:35:40,320 --> 00:35:43,800
more of a exploit mitigation or do you

920
00:35:43,800 --> 00:35:45,119
think even if they're successfully able

921
00:35:45,119 --> 00:35:46,980
to bypass it it'll somehow get in the

922
00:35:46,980 --> 00:35:49,560
way of some of the uh so as I mean

923
00:35:49,560 --> 00:35:51,780
lockdown mode is great for trying to

924
00:35:51,780 --> 00:35:54,180
defend against exports like on on

925
00:35:54,180 --> 00:35:57,660
iMessage but basically it's also

926
00:35:57,660 --> 00:35:59,160
something that iron said if you just

927
00:35:59,160 --> 00:36:00,540
need to find some other kind of

928
00:36:00,540 --> 00:36:01,980
vulnerability which might be more

929
00:36:01,980 --> 00:36:04,560
powerful to bypass it than expert

930
00:36:04,560 --> 00:36:06,900
mitigations might not do the trick so if

931
00:36:06,900 --> 00:36:09,480
I can start with like an exploit on

932
00:36:09,480 --> 00:36:12,180
WhatsApp which has been done by NSO then

933
00:36:12,180 --> 00:36:14,160
lockdown mode doesn't bring me anything

934
00:36:14,160 --> 00:36:17,480
Advantage at all

935
00:36:17,640 --> 00:36:19,819
foreign

936
00:36:20,599 --> 00:36:22,320
thank you very much

937
00:36:22,320 --> 00:36:33,149
[Applause]

