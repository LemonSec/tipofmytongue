1
00:00:00,659 --> 00:00:03,559
bye

2
00:00:08,099 --> 00:00:09,420
what about the endpoint security

3
00:00:09,420 --> 00:00:12,719
framework and have noticed that there

4
00:00:12,719 --> 00:00:14,940
are some nuances some struggles and so

5
00:00:14,940 --> 00:00:16,020
I'm excited for this talk because

6
00:00:16,020 --> 00:00:18,720
Charvel is going to talk about how

7
00:00:18,720 --> 00:00:20,100
basically you can play nice with the

8
00:00:20,100 --> 00:00:21,900
endpoint security framework so let's

9
00:00:21,900 --> 00:00:26,240
give a round of applause for sure bill

10
00:00:32,940 --> 00:00:35,820
morning all how's it going

11
00:00:35,820 --> 00:00:38,880
uh I'm gonna take a quick photo for

12
00:00:38,880 --> 00:00:41,180
Twitter

13
00:00:41,399 --> 00:00:43,500
because it's my first time presenting to

14
00:00:43,500 --> 00:00:44,760
a live audience

15
00:00:44,760 --> 00:00:46,800
say hello yeah

16
00:00:46,800 --> 00:00:51,680
[Applause]

17
00:00:51,680 --> 00:00:54,719
so yeah this is my talk on developing

18
00:00:54,719 --> 00:00:56,460
and deploying Apple's twinpoint

19
00:00:56,460 --> 00:00:58,620
Securities API

20
00:00:58,620 --> 00:01:00,719
um NOS query

21
00:01:00,719 --> 00:01:03,899
as a traditional this is my who am I

22
00:01:03,899 --> 00:01:06,360
slide I'm a software engineer I mostly

23
00:01:06,360 --> 00:01:08,280
do systems programming and work on

24
00:01:08,280 --> 00:01:10,500
endpoint agents

25
00:01:10,500 --> 00:01:11,040
um

26
00:01:11,040 --> 00:01:13,740
been a contributor and a committer to us

27
00:01:13,740 --> 00:01:16,200
query since 2015.

28
00:01:16,200 --> 00:01:17,880
mostly focused on

29
00:01:17,880 --> 00:01:19,979
Mac OS things

30
00:01:19,979 --> 00:01:22,259
I got elected to be an Oscar technical

31
00:01:22,259 --> 00:01:23,700
steering committee member this year

32
00:01:23,700 --> 00:01:25,500
which was super cool

33
00:01:25,500 --> 00:01:28,080
and most importantly that's my Twitter

34
00:01:28,080 --> 00:01:30,679
handle there

35
00:01:32,220 --> 00:01:34,740
um so some caveats about this talk I

36
00:01:34,740 --> 00:01:36,060
want to get

37
00:01:36,060 --> 00:01:38,880
talk about what this talk is not about

38
00:01:38,880 --> 00:01:39,720
um

39
00:01:39,720 --> 00:01:42,720
this is a developer point of view on

40
00:01:42,720 --> 00:01:44,520
what it takes to write

41
00:01:44,520 --> 00:01:48,119
code endpoint security apis and a widely

42
00:01:48,119 --> 00:01:50,600
used and distributed product

43
00:01:50,600 --> 00:01:52,920
surprisingly and counterintuitively

44
00:01:52,920 --> 00:01:55,320
perhaps writing the code was the less

45
00:01:55,320 --> 00:01:57,180
challenging part

46
00:01:57,180 --> 00:01:59,939
shipping it was a far more challenging

47
00:01:59,939 --> 00:02:03,000
task and I would also say perhaps the

48
00:02:03,000 --> 00:02:04,860
more interesting case as well

49
00:02:04,860 --> 00:02:07,259
because this ties in all of Apple's

50
00:02:07,259 --> 00:02:09,179
security mechanisms entitlements code

51
00:02:09,179 --> 00:02:11,640
signing authorization GateKeeper

52
00:02:11,640 --> 00:02:13,680
together

53
00:02:13,680 --> 00:02:16,860
and while the endpoint security API

54
00:02:16,860 --> 00:02:18,300
headers themselves are very well

55
00:02:18,300 --> 00:02:21,360
documented the whole process to tie this

56
00:02:21,360 --> 00:02:23,340
together at this time

57
00:02:23,340 --> 00:02:26,000
it was kind of opaque and unclear

58
00:02:26,000 --> 00:02:28,620
so I hope you all got some use out of

59
00:02:28,620 --> 00:02:30,300
this

60
00:02:30,300 --> 00:02:32,280
so for the sake of time I won't be

61
00:02:32,280 --> 00:02:34,620
covering about any of these uh but I'm

62
00:02:34,620 --> 00:02:36,780
always happy to chat about it in the

63
00:02:36,780 --> 00:02:37,800
hallway later

64
00:02:37,800 --> 00:02:39,660
so I'm not going to talk about ESF

65
00:02:39,660 --> 00:02:41,400
internals or how it compressed you open

66
00:02:41,400 --> 00:02:42,620
BSM

67
00:02:42,620 --> 00:02:46,080
or how to use the apis or how to deploy

68
00:02:46,080 --> 00:02:48,720
or query or how to use ESF for defense

69
00:02:48,720 --> 00:02:52,200
in depth or detections

70
00:02:52,200 --> 00:02:54,599
so this talk

71
00:02:54,599 --> 00:02:56,400
let's define some goals what are we

72
00:02:56,400 --> 00:02:58,379
going to talk about

73
00:02:58,379 --> 00:03:00,180
as I mentioned in the previous slide

74
00:03:00,180 --> 00:03:03,720
writing the code was the easier part

75
00:03:03,720 --> 00:03:06,780
now we need to tie everything together

76
00:03:06,780 --> 00:03:08,819
and I'm going to use OS query as the

77
00:03:08,819 --> 00:03:10,500
example on how to do it because well

78
00:03:10,500 --> 00:03:12,900
that's what I implemented things in

79
00:03:12,900 --> 00:03:13,620
um

80
00:03:13,620 --> 00:03:16,200
so we have two goals the first one is

81
00:03:16,200 --> 00:03:19,500
write code call the apis to report and

82
00:03:19,500 --> 00:03:22,560
notify on let's say process events

83
00:03:22,560 --> 00:03:24,720
and then make the code work

84
00:03:24,720 --> 00:03:27,300
not just on my computer but on anyone

85
00:03:27,300 --> 00:03:29,760
else's computer

86
00:03:29,760 --> 00:03:31,560
so let's Dive In

87
00:03:31,560 --> 00:03:34,739
oh and kind of lastly this is to also

88
00:03:34,739 --> 00:03:36,959
answer the web ETA question thankfully

89
00:03:36,959 --> 00:03:39,060
we don't get those questions

90
00:03:39,060 --> 00:03:41,580
but I want to point that out uh

91
00:03:41,580 --> 00:03:43,860
initially did a blueprint poc in like

92
00:03:43,860 --> 00:03:46,440
May 2020 load tested it first did a

93
00:03:46,440 --> 00:03:47,459
little bit

94
00:03:47,459 --> 00:03:51,120
compare to open BSM but the pr was

95
00:03:51,120 --> 00:03:53,940
merged in 2021 almost a year later

96
00:03:53,940 --> 00:03:57,900
and shipped in August of 2021 so what

97
00:03:57,900 --> 00:03:59,280
was the

98
00:03:59,280 --> 00:04:02,599
why did it take so long

99
00:04:03,360 --> 00:04:05,340
um before I answer that

100
00:04:05,340 --> 00:04:08,040
uh super quick introduction to us query

101
00:04:08,040 --> 00:04:11,519
uh Shaw fans anyone use a source query

102
00:04:11,519 --> 00:04:15,900
cool that's like 60 70 so happy to see

103
00:04:15,900 --> 00:04:17,639
for those who not in the know it's a

104
00:04:17,639 --> 00:04:19,978
cross-platform endpoint visibility agent

105
00:04:19,978 --> 00:04:21,839
command line tool

106
00:04:21,839 --> 00:04:23,639
it can be run interactively or as a

107
00:04:23,639 --> 00:04:27,720
Daemon it basically exposes OS as a SQL

108
00:04:27,720 --> 00:04:30,240
a powerful concept this is just the

109
00:04:30,240 --> 00:04:32,400
virtual table implementation so there

110
00:04:32,400 --> 00:04:34,620
isn't an actual database so when you

111
00:04:34,620 --> 00:04:37,440
query it it calls the underlying OS apis

112
00:04:37,440 --> 00:04:40,020
and then generates the data for you

113
00:04:40,020 --> 00:04:41,940
in this example we are using the launch

114
00:04:41,940 --> 00:04:43,500
D table

115
00:04:43,500 --> 00:04:45,360
uh we're acquiring the name and program

116
00:04:45,360 --> 00:04:47,759
along with its program arguments we're

117
00:04:47,759 --> 00:04:50,100
both run at load and keep alive keys are

118
00:04:50,100 --> 00:04:53,780
true and we get some results here

119
00:04:53,780 --> 00:04:56,400
there are a lot of interesting tables I

120
00:04:56,400 --> 00:04:58,320
think it's about 200 now these are like

121
00:04:58,320 --> 00:05:01,560
some of the kind of Usual Suspects this

122
00:05:01,560 --> 00:05:03,479
encryption disk events extended

123
00:05:03,479 --> 00:05:05,419
attributes app schemes Chrome extensions

124
00:05:05,419 --> 00:05:08,240
processes launch date

125
00:05:08,240 --> 00:05:11,639
sub-configura USB devices

126
00:05:11,639 --> 00:05:12,780
um

127
00:05:12,780 --> 00:05:15,660
but since oscore is SQL generates data

128
00:05:15,660 --> 00:05:18,360
on the Fly by calling OS apis at query

129
00:05:18,360 --> 00:05:21,060
time we are likely to miss things that

130
00:05:21,060 --> 00:05:23,520
happen in between the queries

131
00:05:23,520 --> 00:05:25,979
so OS query also has what we call a

132
00:05:25,979 --> 00:05:27,620
vented tables

133
00:05:27,620 --> 00:05:31,080
these have a callback from the OS apis

134
00:05:31,080 --> 00:05:33,539
or a run Loop and we can get the data

135
00:05:33,539 --> 00:05:36,060
stored locally in rocksdb even when we

136
00:05:36,060 --> 00:05:38,300
are not querying it at the same time

137
00:05:38,300 --> 00:05:41,039
so in this example I'm querying the

138
00:05:41,039 --> 00:05:43,919
hardware events table I removed and

139
00:05:43,919 --> 00:05:47,100
reinserted my ubikey and oscarry tells

140
00:05:47,100 --> 00:05:50,220
me that it shows me that the type is IO

141
00:05:50,220 --> 00:05:52,020
USB host device so we know it's an iot

142
00:05:52,020 --> 00:05:54,479
type class we know it's USB so we can

143
00:05:54,479 --> 00:05:55,800
further query

144
00:05:55,800 --> 00:05:58,380
the USB devices table

145
00:05:58,380 --> 00:06:00,960
and it tells us that the vendor is ubico

146
00:06:00,960 --> 00:06:03,300
that's the vendor ID the version that's

147
00:06:03,300 --> 00:06:07,020
what it is whether it's removable or not

148
00:06:07,020 --> 00:06:08,400
um

149
00:06:08,400 --> 00:06:11,699
so yeah and the vented tables are very

150
00:06:11,699 --> 00:06:14,039
powerful especially for things like

151
00:06:14,039 --> 00:06:17,220
process auditing and the like we learned

152
00:06:17,220 --> 00:06:19,680
the importance of process auditing and

153
00:06:19,680 --> 00:06:21,900
things in Patrick and jaron's classes

154
00:06:21,900 --> 00:06:23,639
and training so

155
00:06:23,639 --> 00:06:27,979
kind of another tool in the tool bag

156
00:06:29,460 --> 00:06:31,860
but how does Source query work what's

157
00:06:31,860 --> 00:06:33,240
the stack

158
00:06:33,240 --> 00:06:36,180
well large C plus plus code base written

159
00:06:36,180 --> 00:06:39,720
in 2014 by Facebook at the time

160
00:06:39,720 --> 00:06:40,380
um

161
00:06:40,380 --> 00:06:42,180
thankfully uses more than C plus plus 11

162
00:06:42,180 --> 00:06:45,600
and now C plus 14 so a little bit better

163
00:06:45,600 --> 00:06:49,020
than just plain old C plus plus

164
00:06:49,020 --> 00:06:51,539
sprinkled in with Objective C plus

165
00:06:51,539 --> 00:06:54,240
we use cmake as the build system we

166
00:06:54,240 --> 00:06:56,699
render in all the third party Library

167
00:06:56,699 --> 00:07:00,120
and we almost statically build it I say

168
00:07:00,120 --> 00:07:02,100
almost because it requires glip C on

169
00:07:02,100 --> 00:07:04,940
Linux and lib system and system

170
00:07:04,940 --> 00:07:08,460
Frameworks on Mac OS

171
00:07:08,460 --> 00:07:11,940
also as a core principle OS query does

172
00:07:11,940 --> 00:07:14,340
not shell out to get its data

173
00:07:14,340 --> 00:07:16,560
it also does not link against private

174
00:07:16,560 --> 00:07:17,819
Frameworks

175
00:07:17,819 --> 00:07:20,639
and does not use private apis that's one

176
00:07:20,639 --> 00:07:21,780
call

177
00:07:21,780 --> 00:07:24,240
where a private API use but apart from

178
00:07:24,240 --> 00:07:27,479
that no private apis

179
00:07:27,479 --> 00:07:29,340
so a large part of doing all this

180
00:07:29,340 --> 00:07:30,660
implementation has been kind of

181
00:07:30,660 --> 00:07:32,759
reversing Apple's tools figuring out how

182
00:07:32,759 --> 00:07:37,160
it works and kind of implementing it

183
00:07:37,440 --> 00:07:40,080
um so let's back uh get back to our goal

184
00:07:40,080 --> 00:07:43,020
uh let's write some code the code is

185
00:07:43,020 --> 00:07:45,360
kind of not super important

186
00:07:45,360 --> 00:07:48,360
but it is the first part to kind of get

187
00:07:48,360 --> 00:07:51,120
things in motion

188
00:07:51,120 --> 00:07:52,979
so here we have a subscriber and a

189
00:07:52,979 --> 00:07:55,319
publisher we call that subscribe to

190
00:07:55,319 --> 00:07:58,080
notify exact fork and exact events we

191
00:07:58,080 --> 00:07:59,759
get events back

192
00:07:59,759 --> 00:08:01,860
tested it flustered it a little bit load

193
00:08:01,860 --> 00:08:03,840
tested it compared it against open BSM

194
00:08:03,840 --> 00:08:06,840
looks great works great

195
00:08:06,840 --> 00:08:09,120
can we ship it

196
00:08:09,120 --> 00:08:12,000
well it works on my machine

197
00:08:12,000 --> 00:08:15,259
well not quite

198
00:08:16,500 --> 00:08:19,020
um there's a first problem here

199
00:08:19,020 --> 00:08:21,720
um backwards compatibility

200
00:08:21,720 --> 00:08:24,060
uh endpoint security got introduced in

201
00:08:24,060 --> 00:08:25,860
1015 Catalina

202
00:08:25,860 --> 00:08:28,639
and that each year Apple introduces new

203
00:08:28,639 --> 00:08:32,700
functionality to those apis new symbols

204
00:08:32,700 --> 00:08:33,360
um

205
00:08:33,360 --> 00:08:35,820
and up until a little bit ago oscore was

206
00:08:35,820 --> 00:08:39,719
compatible with 1012 High Sierra

207
00:08:39,719 --> 00:08:42,419
um but now we have moved it up to 10.14

208
00:08:42,419 --> 00:08:45,600
so we can see uh in the v tool there

209
00:08:45,600 --> 00:08:48,120
like the load command with that sets the

210
00:08:48,120 --> 00:08:52,019
minimum Mac OS as 10.12 and the SDK

211
00:08:52,019 --> 00:08:54,779
s1013 you can also like cross-check that

212
00:08:54,779 --> 00:08:57,660
from oscore itself

213
00:08:57,660 --> 00:09:00,360
and here's the O2 output

214
00:09:00,360 --> 00:09:03,120
uh we don't link against any private

215
00:09:03,120 --> 00:09:04,260
Frameworks

216
00:09:04,260 --> 00:09:06,300
I have highlighted the weak linking

217
00:09:06,300 --> 00:09:08,519
there for endpoint security

218
00:09:08,519 --> 00:09:10,680
come back to that that's required to

219
00:09:10,680 --> 00:09:13,200
kind of make it work

220
00:09:13,200 --> 00:09:14,820
the other thing is thankfully Apple

221
00:09:14,820 --> 00:09:17,580
provides these uh clang attributes

222
00:09:17,580 --> 00:09:19,680
built-in available attributes so we can

223
00:09:19,680 --> 00:09:22,380
like say is this available on 1015 and

224
00:09:22,380 --> 00:09:24,420
higher run this else

225
00:09:24,420 --> 00:09:27,560
just peace out

226
00:09:29,820 --> 00:09:32,399
so we solved backwards compatibility

227
00:09:32,399 --> 00:09:35,580
right works on older machines doesn't

228
00:09:35,580 --> 00:09:37,440
crash and by backwards compatibility I

229
00:09:37,440 --> 00:09:39,180
mean it won't generate data but it won't

230
00:09:39,180 --> 00:09:41,640
crash because symbols are missing

231
00:09:41,640 --> 00:09:43,940
can we ship it yet

232
00:09:43,940 --> 00:09:47,899
ah no not quite

233
00:09:48,180 --> 00:09:50,339
we tackled gold one we have written the

234
00:09:50,339 --> 00:09:51,600
code

235
00:09:51,600 --> 00:09:53,940
and that brings us to goal two making it

236
00:09:53,940 --> 00:09:57,480
work on other people's computers

237
00:09:57,480 --> 00:10:00,000
and that brings us to entitlements uh

238
00:10:00,000 --> 00:10:03,420
this is Apple's way of doing decorative

239
00:10:03,420 --> 00:10:06,420
capabilities which when granted allows

240
00:10:06,420 --> 00:10:08,760
us to use certain apis and functionality

241
00:10:08,760 --> 00:10:10,860
and if you're granted one apple has

242
00:10:10,860 --> 00:10:13,200
deemed you Worthy

243
00:10:13,200 --> 00:10:15,240
um for Apple folks now please cover your

244
00:10:15,240 --> 00:10:16,260
ears

245
00:10:16,260 --> 00:10:18,540
uh I've heard horror stories about this

246
00:10:18,540 --> 00:10:21,420
I've heard rumors that go to I don't

247
00:10:21,420 --> 00:10:23,459
know sacrifice your first born child or

248
00:10:23,459 --> 00:10:25,019
a pet

249
00:10:25,019 --> 00:10:27,240
thankfully those rumors are false

250
00:10:27,240 --> 00:10:30,240
but it is an opaque process I've been

251
00:10:30,240 --> 00:10:31,740
lucky enough to granted one on my

252
00:10:31,740 --> 00:10:34,500
personal developer ID on the your Square

253
00:10:34,500 --> 00:10:37,980
Foundation one on my work developer ID

254
00:10:37,980 --> 00:10:40,620
but if you need this please start early

255
00:10:40,620 --> 00:10:43,320
uh it took us like six months

256
00:10:43,320 --> 00:10:45,720
uh and on the form apple has a form like

257
00:10:45,720 --> 00:10:46,920
why do you need this what are you going

258
00:10:46,920 --> 00:10:49,200
to do with this I basically wrote an

259
00:10:49,200 --> 00:10:51,300
essay like hey here's the workout done

260
00:10:51,300 --> 00:10:52,920
here's my Twitter here's my GitHub

261
00:10:52,920 --> 00:10:54,420
here's the comments

262
00:10:54,420 --> 00:10:57,060
please give me one

263
00:10:57,060 --> 00:10:57,839
um

264
00:10:57,839 --> 00:11:02,240
so if you need it please start early

265
00:11:02,899 --> 00:11:04,800
entitlements are basically key value

266
00:11:04,800 --> 00:11:07,440
pairs that's basically a p list here we

267
00:11:07,440 --> 00:11:10,260
need the endpoint security client

268
00:11:10,260 --> 00:11:12,779
entitlement from Apple

269
00:11:12,779 --> 00:11:15,500
and set it to True here

270
00:11:15,500 --> 00:11:18,899
so when you pass this to code sign along

271
00:11:18,899 --> 00:11:20,940
with your developer identity this gets

272
00:11:20,940 --> 00:11:22,920
baked into the code signature of the

273
00:11:22,920 --> 00:11:24,000
executable

274
00:11:24,000 --> 00:11:26,399
and that allows Apple to kind of you

275
00:11:26,399 --> 00:11:28,440
know assess whether you're granted this

276
00:11:28,440 --> 00:11:30,779
functionality or not

277
00:11:30,779 --> 00:11:32,820
um if you're using xcode it's a lot

278
00:11:32,820 --> 00:11:34,980
easier but if you're already

279
00:11:34,980 --> 00:11:37,800
have a tool which is cross platform and

280
00:11:37,800 --> 00:11:40,079
you don't use xcode and you need to kind

281
00:11:40,079 --> 00:11:42,000
of bake this in

282
00:11:42,000 --> 00:11:44,480
yeah

283
00:11:44,700 --> 00:11:47,160
so we got entitlements

284
00:11:47,160 --> 00:11:51,240
right we can code sign with my identity

285
00:11:51,240 --> 00:11:54,899
force it pass in the entitlements

286
00:11:54,899 --> 00:11:57,120
and works on my machine right can we

287
00:11:57,120 --> 00:11:59,100
ship it

288
00:11:59,100 --> 00:12:01,560
well no it doesn't quite work work on

289
00:12:01,560 --> 00:12:04,819
other people's computers yet

290
00:12:05,820 --> 00:12:08,640
that brings us to provisioning profiles

291
00:12:08,640 --> 00:12:11,220
but let's narrow our goal a little bit

292
00:12:11,220 --> 00:12:13,079
instead of trying to figure this out for

293
00:12:13,079 --> 00:12:14,760
everyone's computer

294
00:12:14,760 --> 00:12:16,440
what would it take

295
00:12:16,440 --> 00:12:18,959
for me to run this entitled in code sign

296
00:12:18,959 --> 00:12:21,600
binary with endpoint Security on my

297
00:12:21,600 --> 00:12:23,279
machine and a handful of other machines

298
00:12:23,279 --> 00:12:24,779
that I control

299
00:12:24,779 --> 00:12:27,540
this brings us to provisioning profiles

300
00:12:27,540 --> 00:12:30,180
they're pretty common on iOS

301
00:12:30,180 --> 00:12:32,279
but I don't think they're widely used on

302
00:12:32,279 --> 00:12:34,920
Mac OS I may be wrong

303
00:12:34,920 --> 00:12:36,899
all the resources I could find online

304
00:12:36,899 --> 00:12:38,779
were for iOS

305
00:12:38,779 --> 00:12:42,740
but the concept is the same

306
00:12:42,740 --> 00:12:44,820
provisioning profile basically as the

307
00:12:44,820 --> 00:12:46,320
name suggests

308
00:12:46,320 --> 00:12:49,500
Provisions a device it allows a certain

309
00:12:49,500 --> 00:12:50,940
app or executable with certain

310
00:12:50,940 --> 00:12:53,160
privileges or capabilities the

311
00:12:53,160 --> 00:12:55,740
entitlement which is tied to a developer

312
00:12:55,740 --> 00:12:57,660
ID and

313
00:12:57,660 --> 00:13:01,260
basically it's an allowed list so in

314
00:13:01,260 --> 00:13:03,000
this example I've created a provisioning

315
00:13:03,000 --> 00:13:04,800
profile with my develop development

316
00:13:04,800 --> 00:13:08,100
developer certificate I've added a

317
00:13:08,100 --> 00:13:09,420
couple of devices so you have to go to

318
00:13:09,420 --> 00:13:11,639
the dashboard get your uu IDs of the Mac

319
00:13:11,639 --> 00:13:13,019
add them

320
00:13:13,019 --> 00:13:14,820
and then

321
00:13:14,820 --> 00:13:16,500
it'll generate a profile you can

322
00:13:16,500 --> 00:13:17,579
download it

323
00:13:17,579 --> 00:13:19,200
and then

324
00:13:19,200 --> 00:13:20,639
if you double click it you can find it

325
00:13:20,639 --> 00:13:22,440
in system preferences

326
00:13:22,440 --> 00:13:24,959
with this I can now run the entitled

327
00:13:24,959 --> 00:13:27,060
code sign binary and it works locally

328
00:13:27,060 --> 00:13:29,040
without VMS or without sip being

329
00:13:29,040 --> 00:13:30,420
disabled

330
00:13:30,420 --> 00:13:32,940
so that's great this is progress this

331
00:13:32,940 --> 00:13:35,040
works on all the computers where I've

332
00:13:35,040 --> 00:13:37,980
added the uuids off into this profile

333
00:13:37,980 --> 00:13:39,959
then that's great

334
00:13:39,959 --> 00:13:43,440
but I have grander ambitions I want to

335
00:13:43,440 --> 00:13:45,060
ship this to everyone

336
00:13:45,060 --> 00:13:46,800
but I can't potentially add every

337
00:13:46,800 --> 00:13:48,779
current and future uuids to my account

338
00:13:48,779 --> 00:13:50,940
right

339
00:13:50,940 --> 00:13:52,920
so that brings us to embedded

340
00:13:52,920 --> 00:13:55,920
provisioning profiles

341
00:13:55,920 --> 00:13:58,560
when we use the distribution certificate

342
00:13:58,560 --> 00:14:00,600
we generate an embedded provisioning

343
00:14:00,600 --> 00:14:03,300
profile and we can see that this sets

344
00:14:03,300 --> 00:14:05,880
the provision all devices

345
00:14:05,880 --> 00:14:08,399
to yes and this is what we'll use

346
00:14:08,399 --> 00:14:09,420
together

347
00:14:09,420 --> 00:14:11,579
chopped on

348
00:14:11,579 --> 00:14:13,139
so you're done

349
00:14:13,139 --> 00:14:15,899
right we just ship this embedded torsion

350
00:14:15,899 --> 00:14:18,300
profile along with the binary

351
00:14:18,300 --> 00:14:19,560
done

352
00:14:19,560 --> 00:14:21,839
well not so fast kinda you're getting

353
00:14:21,839 --> 00:14:24,620
there but not quite

354
00:14:24,839 --> 00:14:26,700
as the name suggests embedded

355
00:14:26,700 --> 00:14:28,740
provisioning profile we have to embed it

356
00:14:28,740 --> 00:14:30,720
into something

357
00:14:30,720 --> 00:14:35,540
uh that's something is the app bundle

358
00:14:35,700 --> 00:14:38,760
but or else query D is a command line

359
00:14:38,760 --> 00:14:43,519
tool has no UI has never shipped the UI

360
00:14:43,620 --> 00:14:45,839
what do we do uh well we have to create

361
00:14:45,839 --> 00:14:49,079
an app bundle we can't use xcode because

362
00:14:49,079 --> 00:14:51,660
well we have our fancy CMAC and all the

363
00:14:51,660 --> 00:14:53,160
scripts tied together we don't want to

364
00:14:53,160 --> 00:14:54,800
touch that

365
00:14:54,800 --> 00:14:57,480
and we use CPAC to create new packages

366
00:14:57,480 --> 00:15:00,779
whether they are PKG MSI Dev or PM or

367
00:15:00,779 --> 00:15:03,920
just tar GC

368
00:15:04,139 --> 00:15:04,680
um

369
00:15:04,680 --> 00:15:07,740
so what is an app bundle well as jiren

370
00:15:07,740 --> 00:15:11,160
and Sal discussed in your talk it's just

371
00:15:11,160 --> 00:15:13,440
a directory structure with info plist

372
00:15:13,440 --> 00:15:15,660
and this package info thing

373
00:15:15,660 --> 00:15:18,180
uh thankfully this package info is just

374
00:15:18,180 --> 00:15:20,760
apple and some bytes and

375
00:15:20,760 --> 00:15:23,760
I just grabbed it off xcode sample

376
00:15:23,760 --> 00:15:26,820
template and it works

377
00:15:26,820 --> 00:15:28,260
um

378
00:15:28,260 --> 00:15:30,360
so at this point I needed to do a quick

379
00:15:30,360 --> 00:15:32,940
proof of concept I can worry about how

380
00:15:32,940 --> 00:15:35,760
to do this on cmake and CPAC later but I

381
00:15:35,760 --> 00:15:37,620
wanted to make sure that this approach

382
00:15:37,620 --> 00:15:39,240
of tying all this together actually

383
00:15:39,240 --> 00:15:41,300
worked

384
00:15:41,300 --> 00:15:44,339
so I just followed what xcode does

385
00:15:44,339 --> 00:15:47,459
created a script by hand and handcrafted

386
00:15:47,459 --> 00:15:51,000
my package or app bundle with

387
00:15:51,000 --> 00:15:53,399
hard-coded in photo PLS and a package

388
00:15:53,399 --> 00:15:55,740
info and embedded provisioning profile

389
00:15:55,740 --> 00:15:58,019
and all the required bits code sign the

390
00:15:58,019 --> 00:16:00,660
binary code sign the application bundle

391
00:16:00,660 --> 00:16:04,019
and it worked I shipped it out to

392
00:16:04,019 --> 00:16:06,120
a couple of other machines where I

393
00:16:06,120 --> 00:16:09,560
didn't have the uid it worked

394
00:16:09,560 --> 00:16:11,639
so this was

395
00:16:11,639 --> 00:16:14,220
now time to port to cmake which is

396
00:16:14,220 --> 00:16:17,180
tedious but doable

397
00:16:17,180 --> 00:16:19,860
I won't bore you to that

398
00:16:19,860 --> 00:16:22,019
there is a or Square packaging people on

399
00:16:22,019 --> 00:16:23,579
GitHub if you're curious you can check

400
00:16:23,579 --> 00:16:25,440
that out

401
00:16:25,440 --> 00:16:27,480
but now we have made progress we can

402
00:16:27,480 --> 00:16:29,100
create an app bundle we can code sign it

403
00:16:29,100 --> 00:16:32,100
similarly to the binary

404
00:16:32,100 --> 00:16:34,800
uh so let's recap of what we have done

405
00:16:34,800 --> 00:16:36,779
and what we still need to do

406
00:16:36,779 --> 00:16:39,839
we have written the code that's great we

407
00:16:39,839 --> 00:16:42,259
fix the backwards compatibility linking

408
00:16:42,259 --> 00:16:44,699
issues that's great

409
00:16:44,699 --> 00:16:48,600
we got the entitlements from Apple yay

410
00:16:48,600 --> 00:16:50,459
we got our provision profiles in order

411
00:16:50,459 --> 00:16:52,680
we co-signed the binary we package to

412
00:16:52,680 --> 00:16:55,079
our Square ID as an app bundle we could

413
00:16:55,079 --> 00:16:57,600
sign the app bundle what's left

414
00:16:57,600 --> 00:17:00,600
notarization

415
00:17:00,720 --> 00:17:03,000
uh you all probably know more about

416
00:17:03,000 --> 00:17:04,980
notarization than I do so I'll be quick

417
00:17:04,980 --> 00:17:06,599
here but thankfully Apple's

418
00:17:06,599 --> 00:17:08,099
documentation about this is pretty

419
00:17:08,099 --> 00:17:10,319
decent so that was super helpful

420
00:17:10,319 --> 00:17:13,679
and we can automate most of this uh so

421
00:17:13,679 --> 00:17:15,540
we are using GitHub actions briefly we

422
00:17:15,540 --> 00:17:17,880
target release we build test verify or

423
00:17:17,880 --> 00:17:20,339
Square we download the artifacts

424
00:17:20,339 --> 00:17:22,859
we create a we launch a new Mac OS

425
00:17:22,859 --> 00:17:25,679
Runner create a temporary keychain

426
00:17:25,679 --> 00:17:27,959
import our secrets

427
00:17:27,959 --> 00:17:30,660
uh cosine the binary code sign the app

428
00:17:30,660 --> 00:17:32,940
bundle create a PKG

429
00:17:32,940 --> 00:17:35,160
product sign the PKG

430
00:17:35,160 --> 00:17:38,960
and then notarize the PKG

431
00:17:40,440 --> 00:17:42,360
so can we ship it now

432
00:17:42,360 --> 00:17:44,520
yeah we can

433
00:17:44,520 --> 00:17:48,539
we have a valid signed PKG installed uh

434
00:17:48,539 --> 00:17:51,360
here I'm using apparency we can see you

435
00:17:51,360 --> 00:17:54,419
know as a fat universal binary it's

436
00:17:54,419 --> 00:17:57,120
harder and it's not realized it has

437
00:17:57,120 --> 00:18:00,660
entitlements gatekeeper checks

438
00:18:00,660 --> 00:18:02,520
code signature checks and that's what

439
00:18:02,520 --> 00:18:05,160
the app bundle looks like after it's

440
00:18:05,160 --> 00:18:07,400
code signed

441
00:18:07,400 --> 00:18:09,840
so everything's good gatekeeper is happy

442
00:18:09,840 --> 00:18:10,980
we can use the endpoint security

443
00:18:10,980 --> 00:18:14,179
functionality which is all good

444
00:18:14,179 --> 00:18:19,260
and yeah you can ship it down that works

445
00:18:19,260 --> 00:18:21,480
so why did we do all this hard work

446
00:18:21,480 --> 00:18:24,539
right this was a long arduous process I

447
00:18:24,539 --> 00:18:26,039
want to write code I want to I don't

448
00:18:26,039 --> 00:18:27,660
want to fiddle with shipping and you

449
00:18:27,660 --> 00:18:31,799
know packaging up things and all that

450
00:18:31,799 --> 00:18:33,120
well

451
00:18:33,120 --> 00:18:35,340
our score already had process auditing

452
00:18:35,340 --> 00:18:37,500
my open BSM but open BSM has been

453
00:18:37,500 --> 00:18:40,500
neglected for decades now

454
00:18:40,500 --> 00:18:43,860
and endpoint security is kind of Awesome

455
00:18:43,860 --> 00:18:46,980
and every new Mac OS release has cool

456
00:18:46,980 --> 00:18:49,080
new event types so I think all this hard

457
00:18:49,080 --> 00:18:50,700
work kind of paid off

458
00:18:50,700 --> 00:18:53,820
and we'll kind of pave the future for

459
00:18:53,820 --> 00:18:57,600
newer kinds of detections in your data

460
00:18:57,600 --> 00:19:00,900
and that brings us to venturing into the

461
00:19:00,900 --> 00:19:02,820
future

462
00:19:02,820 --> 00:19:04,919
um these are the new event types that

463
00:19:04,919 --> 00:19:07,320
Ventura brings us

464
00:19:07,320 --> 00:19:11,400
this will be kind of cool to add in

465
00:19:11,400 --> 00:19:13,980
um yeah so

466
00:19:13,980 --> 00:19:16,440
to recap we wrote code we made it

467
00:19:16,440 --> 00:19:18,900
backwards compatible we got the entire

468
00:19:18,900 --> 00:19:21,120
elements we did the provisioning profile

469
00:19:21,120 --> 00:19:22,200
dance

470
00:19:22,200 --> 00:19:24,720
we created an App bundle for our CLI

471
00:19:24,720 --> 00:19:28,740
tool we created a package we co-signed

472
00:19:28,740 --> 00:19:29,580
everything

473
00:19:29,580 --> 00:19:33,000
notarize the package and it works

474
00:19:33,000 --> 00:19:33,960
um

475
00:19:33,960 --> 00:19:36,539
and I hope to add these in the future or

476
00:19:36,539 --> 00:19:38,160
if someone wants to take a crack it's

477
00:19:38,160 --> 00:19:40,620
all open source please do

478
00:19:40,620 --> 00:19:43,500
and that's my talk

479
00:19:43,500 --> 00:19:45,840
thank you all uh just want to give some

480
00:19:45,840 --> 00:19:48,660
acknowledgments it takes a village to

481
00:19:48,660 --> 00:19:51,059
kind of build a massive open source

482
00:19:51,059 --> 00:19:54,600
community so they're awesome uh travel

483
00:19:54,600 --> 00:19:56,880
bits where most of this work started is

484
00:19:56,880 --> 00:19:59,220
also pretty good and all for being such

485
00:19:59,220 --> 00:20:00,720
a supported crew

486
00:20:00,720 --> 00:20:02,880
some of the resources here if you want

487
00:20:02,880 --> 00:20:04,500
to check it out and I'll be around for

488
00:20:04,500 --> 00:20:06,740
questions

489
00:20:14,120 --> 00:20:17,039
that's a question question

490
00:20:17,039 --> 00:20:18,539
um so you mentioned Ventura's adding

491
00:20:18,539 --> 00:20:21,360
some of these new events that the

492
00:20:21,360 --> 00:20:23,220
endpoint security framework did you look

493
00:20:23,220 --> 00:20:25,860
more into the Expert Tech one for

494
00:20:25,860 --> 00:20:27,419
mediation I would just be interested in

495
00:20:27,419 --> 00:20:29,700
how do you like trigger that test that

496
00:20:29,700 --> 00:20:31,080
what information it gives you because

497
00:20:31,080 --> 00:20:31,980
that seems like that would be super

498
00:20:31,980 --> 00:20:35,400
useful I sadly haven't gotten Ventura

499
00:20:35,400 --> 00:20:37,980
running in a VM on an M1 so that's kind

500
00:20:37,980 --> 00:20:39,179
of my

501
00:20:39,179 --> 00:20:40,080
um

502
00:20:40,080 --> 00:20:41,880
I don't know I need to get unblocked on

503
00:20:41,880 --> 00:20:43,620
it but it'll be super cool to figure

504
00:20:43,620 --> 00:20:45,840
that out I really want to like play

505
00:20:45,840 --> 00:20:48,780
around with it so as soon as I get some

506
00:20:48,780 --> 00:20:51,360
days off that's my task yeah and

507
00:20:51,360 --> 00:20:53,640
follow-up to that do you think Apple's

508
00:20:53,640 --> 00:20:54,960
adding those

509
00:20:54,960 --> 00:20:57,299
like internally or people like yourself

510
00:20:57,299 --> 00:20:58,980
are asking hey it'd be great to add that

511
00:20:58,980 --> 00:21:00,539
what's kind of the whole process with

512
00:21:00,539 --> 00:21:01,860
that because it seems like it's moving

513
00:21:01,860 --> 00:21:03,720
in a good direction so how do we

514
00:21:03,720 --> 00:21:06,600
just continue that so I don't know like

515
00:21:06,600 --> 00:21:09,000
I've talked to Apple but I never got any

516
00:21:09,000 --> 00:21:11,280
responses back unless I'm presenting

517
00:21:11,280 --> 00:21:13,679
they're here at the conference so I got

518
00:21:13,679 --> 00:21:15,840
an email back hey please sure slides I'm

519
00:21:15,840 --> 00:21:18,480
like they always ask for that yeah

520
00:21:18,480 --> 00:21:19,100
um

521
00:21:19,100 --> 00:21:21,840
but I think I think apple is also going

522
00:21:21,840 --> 00:21:24,059
to use this internally or

523
00:21:24,059 --> 00:21:26,039
that that would be pretty good if they

524
00:21:26,039 --> 00:21:27,299
do and

525
00:21:27,299 --> 00:21:29,820
I think that kind of makes it even

526
00:21:29,820 --> 00:21:32,400
better and if they can detect it and you

527
00:21:32,400 --> 00:21:36,480
know we can detect so yeah exactly

528
00:21:36,480 --> 00:21:39,500
are there any other questions

529
00:21:39,780 --> 00:21:43,700
awesome thanks again great talk awesome

