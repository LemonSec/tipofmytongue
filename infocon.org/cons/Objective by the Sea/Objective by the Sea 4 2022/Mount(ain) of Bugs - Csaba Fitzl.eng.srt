1
00:00:04,080 --> 00:00:06,080
i'm now going to

2
00:00:06,080 --> 00:00:07,520
dial in

3
00:00:07,520 --> 00:00:09,760
chaba who is a

4
00:00:09,760 --> 00:00:12,400
former objective by the sea speaker

5
00:00:12,400 --> 00:00:15,360
we are super stoked to have him dialing

6
00:00:15,360 --> 00:00:18,160
in from europe to give what i think is

7
00:00:18,160 --> 00:00:20,560
going to be an incredible talk so

8
00:00:20,560 --> 00:00:22,960
welcome everyone i'm really sorry i

9
00:00:22,960 --> 00:00:26,560
couldn't make it to hawaii but

10
00:00:26,560 --> 00:00:29,599
please have fun on behalf of me and

11
00:00:29,599 --> 00:00:31,519
basically all the other european

12
00:00:31,519 --> 00:00:34,480
requests security people

13
00:00:34,480 --> 00:00:36,559
because i think none of us could

14
00:00:36,559 --> 00:00:38,879
uh make it um

15
00:00:38,879 --> 00:00:41,120
my name is chaboth for those who don't

16
00:00:41,120 --> 00:00:44,399
know me i go by the evil bit on twitter

17
00:00:44,399 --> 00:00:47,520
and i will talk about mountain of box

18
00:00:47,520 --> 00:00:48,879
today

19
00:00:48,879 --> 00:00:50,719
which is basically either

20
00:00:50,719 --> 00:00:53,920
vulnerabilities inside mount system

21
00:00:53,920 --> 00:00:55,280
operation

22
00:00:55,280 --> 00:00:56,559
or

23
00:00:56,559 --> 00:00:59,199
how we can use the mount operation as an

24
00:00:59,199 --> 00:01:02,719
exploitation technique here

25
00:01:03,600 --> 00:01:07,119
a few words about myself uh i'm working

26
00:01:07,119 --> 00:01:09,360
right now at the offensive security as a

27
00:01:09,360 --> 00:01:11,439
content developer and i'm the author of

28
00:01:11,439 --> 00:01:12,400
the new

29
00:01:12,400 --> 00:01:15,600
macos control bypasses uh training which

30
00:01:15,600 --> 00:01:18,159
is all about macos exfoliation pen

31
00:01:18,159 --> 00:01:19,360
testing

32
00:01:19,360 --> 00:01:21,759
i used to be a red and blue teamer

33
00:01:21,759 --> 00:01:24,560
before at large organization

34
00:01:24,560 --> 00:01:27,040
i do mac os back hunting

35
00:01:27,040 --> 00:01:28,240
as a hobby

36
00:01:28,240 --> 00:01:30,560
i'm married have two kids

37
00:01:30,560 --> 00:01:33,439
and i like hiking and

38
00:01:33,439 --> 00:01:35,040
trail running

39
00:01:35,040 --> 00:01:36,640
recently

40
00:01:36,640 --> 00:01:39,280
and before we jump into the talk i have

41
00:01:39,280 --> 00:01:42,560
another off-topic slide

42
00:01:42,560 --> 00:01:44,399
although i'm not in hawaii i'm also not

43
00:01:44,399 --> 00:01:46,320
at home it happened that

44
00:01:46,320 --> 00:01:48,960
port voychakra glock with another

45
00:01:48,960 --> 00:01:51,759
macos researcher from poland and we were

46
00:01:51,759 --> 00:01:54,079
invited to croatia to give our thought

47
00:01:54,079 --> 00:01:56,799
about dcc and actually

48
00:01:56,799 --> 00:01:59,920
this is the first time we met in person

49
00:01:59,920 --> 00:02:02,240
and although we already gave two dogs

50
00:02:02,240 --> 00:02:04,000
together before

51
00:02:04,000 --> 00:02:07,439
we never actually met in person

52
00:02:07,439 --> 00:02:09,598
so it's it was fun and we also met

53
00:02:09,598 --> 00:02:11,440
another uh

54
00:02:11,440 --> 00:02:13,840
aquarius researcher here in croatia and

55
00:02:13,840 --> 00:02:15,760
if we talk about mountains

56
00:02:15,760 --> 00:02:20,319
i took a really great uh trip today with

57
00:02:20,319 --> 00:02:21,520
52

58
00:02:21,520 --> 00:02:25,440
100 feet elevation uh so i'm a bit tired

59
00:02:25,440 --> 00:02:27,360
but it was fun

60
00:02:27,360 --> 00:02:29,840
uh so let's jump into the agenda uh

61
00:02:29,840 --> 00:02:31,920
first i will talk about the mandatory

62
00:02:31,920 --> 00:02:33,680
access control framework i think there

63
00:02:33,680 --> 00:02:36,560
is always a good cause to talk about

64
00:02:36,560 --> 00:02:38,640
this framework then i will talk about

65
00:02:38,640 --> 00:02:41,760
very briefly about the mount system call

66
00:02:41,760 --> 00:02:42,560
and

67
00:02:42,560 --> 00:02:44,400
how it ties

68
00:02:44,400 --> 00:02:46,560
how the mac framework is integrated into

69
00:02:46,560 --> 00:02:48,000
it then

70
00:02:48,000 --> 00:02:51,040
talk about the disk arbitration service

71
00:02:51,040 --> 00:02:53,760
and then i will jump into a lot of

72
00:02:53,760 --> 00:02:56,640
vulnerabilities uh first i will cover a

73
00:02:56,640 --> 00:02:59,599
little bit of history uh so first two

74
00:02:59,599 --> 00:03:02,480
cvs form

75
00:03:03,040 --> 00:03:06,640
17 2017 first was made by patrick puddle

76
00:03:06,640 --> 00:03:08,879
and the other was presented in

77
00:03:08,879 --> 00:03:12,000
pontoon or used in pontoon

78
00:03:12,000 --> 00:03:14,480
and then a few other vulnerabilities

79
00:03:14,480 --> 00:03:16,720
that i found

80
00:03:16,720 --> 00:03:19,680
these are related to tcc bypasses and

81
00:03:19,680 --> 00:03:21,760
also some privilege escalation on

82
00:03:21,760 --> 00:03:24,400
fortinet and finally some other tricks

83
00:03:24,400 --> 00:03:25,040
and

84
00:03:25,040 --> 00:03:27,760
a new box in the pipeline uh because

85
00:03:27,760 --> 00:03:29,440
this is not the

86
00:03:29,440 --> 00:03:31,599
the the whole list

87
00:03:31,599 --> 00:03:33,040
so the mandatory access control

88
00:03:33,040 --> 00:03:34,159
framework

89
00:03:34,159 --> 00:03:38,159
uh it has its origin in trusted bsd

90
00:03:38,159 --> 00:03:41,680
this is uh from where os 10

91
00:03:41,680 --> 00:03:43,120
took it

92
00:03:43,120 --> 00:03:45,360
uh it's basic it's a it's a framework

93
00:03:45,360 --> 00:03:47,760
implemented in the in the kernel and it

94
00:03:47,760 --> 00:03:50,080
extends the kernel with the so-called

95
00:03:50,080 --> 00:03:52,000
policy modules

96
00:03:52,000 --> 00:03:54,080
and so what happens

97
00:03:54,080 --> 00:03:55,040
uh

98
00:03:55,040 --> 00:03:56,400
the

99
00:03:56,400 --> 00:03:58,840
can has plenty of system coils and there

100
00:03:58,840 --> 00:04:01,680
are lots of lots of hooks in these

101
00:04:01,680 --> 00:04:03,760
system course which all call out to the

102
00:04:03,760 --> 00:04:05,360
mac framework

103
00:04:05,360 --> 00:04:08,239
and the mac framework uh will basically

104
00:04:08,239 --> 00:04:10,879
iterate over all of the policy modules

105
00:04:10,879 --> 00:04:14,959
so if those modules supports those hook

106
00:04:14,959 --> 00:04:17,040
that will be called and these policy

107
00:04:17,040 --> 00:04:19,600
modules

108
00:04:19,600 --> 00:04:21,840
can

109
00:04:22,320 --> 00:04:25,440
permit or reject a specific system core

110
00:04:25,440 --> 00:04:27,840
or a specific action

111
00:04:27,840 --> 00:04:30,960
this is really really powerful uh as of

112
00:04:30,960 --> 00:04:34,240
today there are over 200 hooks uh in the

113
00:04:34,240 --> 00:04:36,000
kernel

114
00:04:36,000 --> 00:04:39,199
and apple uses it extensively like all

115
00:04:39,199 --> 00:04:41,680
the sandbox apple mobile file integrity

116
00:04:41,680 --> 00:04:43,199
endpoint security

117
00:04:43,199 --> 00:04:44,560
is all

118
00:04:44,560 --> 00:04:47,440
really based on the mac framework

119
00:04:47,440 --> 00:04:49,919
and the mac frame the policy modules can

120
00:04:49,919 --> 00:04:52,800
also call out to user mode daemons if

121
00:04:52,800 --> 00:04:56,160
they want so like the mpd or the tccd

122
00:04:56,160 --> 00:04:58,240
process

123
00:04:58,240 --> 00:05:00,080
are typical user mode processes which

124
00:05:00,080 --> 00:05:02,880
are being used by these

125
00:05:02,880 --> 00:05:05,600
can avoid use

126
00:05:05,600 --> 00:05:07,600
so again it's really powerful and it was

127
00:05:07,600 --> 00:05:09,680
part of the kdk the kerner development

128
00:05:09,680 --> 00:05:13,440
kit deal os 10.12 but it was never

129
00:05:13,440 --> 00:05:15,759
officially supported by apple so they

130
00:05:15,759 --> 00:05:17,280
really didn't want

131
00:05:17,280 --> 00:05:20,240
people writing their own

132
00:05:20,240 --> 00:05:22,400
mac policy modules

133
00:05:22,400 --> 00:05:25,360
so they eventually remove the header um

134
00:05:25,360 --> 00:05:27,680
from the kdk we can still find the

135
00:05:27,680 --> 00:05:31,039
header in the xml sources

136
00:05:31,039 --> 00:05:33,680
so if we really want we can uh

137
00:05:33,680 --> 00:05:35,919
create our mac policy modules

138
00:05:35,919 --> 00:05:39,199
uh although i bet apple will not

139
00:05:39,199 --> 00:05:40,720
really like it

140
00:05:40,720 --> 00:05:42,880
although again they use it really

141
00:05:42,880 --> 00:05:45,680
extensively so again mv sandbox endpoint

142
00:05:45,680 --> 00:05:49,120
security gatekeeper is all or um

143
00:05:49,120 --> 00:05:50,960
based on this

144
00:05:50,960 --> 00:05:53,360
framework so how it happens uh inside

145
00:05:53,360 --> 00:05:55,600
the source code uh how this code would

146
00:05:55,600 --> 00:05:57,199
happen so

147
00:05:57,199 --> 00:05:59,600
i took this snapshot mount system core

148
00:05:59,600 --> 00:06:01,759
because we will talk about it later

149
00:06:01,759 --> 00:06:03,120
anyway

150
00:06:03,120 --> 00:06:06,639
uh so this is the system called stub

151
00:06:06,639 --> 00:06:08,960
and there is a function called mac mount

152
00:06:08,960 --> 00:06:10,880
check snapshot mount

153
00:06:10,880 --> 00:06:14,400
so usually all these mac

154
00:06:14,400 --> 00:06:17,280
functions starts with mech underline and

155
00:06:17,280 --> 00:06:20,400
then the name of the hook

156
00:06:20,400 --> 00:06:22,639
so if we go into this function the mac

157
00:06:22,639 --> 00:06:24,960
mount check snapshot mount

158
00:06:24,960 --> 00:06:26,639
there are a couple of checks and

159
00:06:26,639 --> 00:06:30,880
eventually it caused the mac check macro

160
00:06:30,880 --> 00:06:33,280
forwarding all the arguments

161
00:06:33,280 --> 00:06:35,360
along with the name of the hook

162
00:06:35,360 --> 00:06:37,199
it's interested in this case it's the

163
00:06:37,199 --> 00:06:40,479
mount check snapshot mount hook

164
00:06:40,479 --> 00:06:43,759
so as i said the mac check is a macro

165
00:06:43,759 --> 00:06:46,560
and what it does it will basically eat

166
00:06:46,560 --> 00:06:48,880
it over all of the policy modules check

167
00:06:48,880 --> 00:06:50,880
if the given policy module supports that

168
00:06:50,880 --> 00:06:52,240
given hook

169
00:06:52,240 --> 00:06:55,039
uh and if if yes uh the hook will be

170
00:06:55,039 --> 00:06:56,560
called

171
00:06:56,560 --> 00:06:59,039
uh it will call all of the hooks like

172
00:06:59,039 --> 00:07:02,400
all of the all of the policy modules and

173
00:07:02,400 --> 00:07:03,759
aggregate

174
00:07:03,759 --> 00:07:06,160
the results and the mac check is

175
00:07:06,160 --> 00:07:09,280
actually the way it works it will take

176
00:07:09,280 --> 00:07:10,400
the most

177
00:07:10,400 --> 00:07:12,800
restrictive deposition

178
00:07:12,800 --> 00:07:15,919
so if any of the policy modules denies

179
00:07:15,919 --> 00:07:18,560
the action the overall action will be

180
00:07:18,560 --> 00:07:19,919
rejected

181
00:07:19,919 --> 00:07:22,400
and the system code will fail

182
00:07:22,400 --> 00:07:24,960
basically

183
00:07:25,599 --> 00:07:26,880
so let's

184
00:07:26,880 --> 00:07:30,240
see how the mount system calls

185
00:07:30,240 --> 00:07:32,000
works

186
00:07:32,000 --> 00:07:36,160
mac os uses the vhfi system switch

187
00:07:36,160 --> 00:07:38,479
framework or system

188
00:07:38,479 --> 00:07:41,599
vfs has its origin from solaris and

189
00:07:41,599 --> 00:07:44,400
these days it's really used in

190
00:07:44,400 --> 00:07:45,759
most or

191
00:07:45,759 --> 00:07:48,000
possibly any mixed based system like

192
00:07:48,000 --> 00:07:50,319
linux freebsd unix

193
00:07:50,319 --> 00:07:51,919
whatever

194
00:07:51,919 --> 00:07:54,800
basically what vfs does it makes a file

195
00:07:54,800 --> 00:07:57,280
system abstraction

196
00:07:57,280 --> 00:07:59,919
so we can universally access

197
00:07:59,919 --> 00:08:02,160
any files order

198
00:08:02,160 --> 00:08:05,039
and use the file system and the vfs

199
00:08:05,039 --> 00:08:06,879
we use uh

200
00:08:06,879 --> 00:08:09,840
the actual driver responsible uh for the

201
00:08:09,840 --> 00:08:12,000
given file system so regardless if we

202
00:08:12,000 --> 00:08:17,599
use ap apfs hfs or whatever

203
00:08:18,160 --> 00:08:20,080
this is all transparent

204
00:08:20,080 --> 00:08:22,080
through the vfs

205
00:08:22,080 --> 00:08:24,160
and

206
00:08:24,160 --> 00:08:26,400
because uh

207
00:08:26,400 --> 00:08:28,400
the interaction with the vfs happens

208
00:08:28,400 --> 00:08:30,160
through system cause

209
00:08:30,160 --> 00:08:32,880
there are basically uh mac

210
00:08:32,880 --> 00:08:35,599
uh policy callouts at uh

211
00:08:35,599 --> 00:08:37,360
possibly all points

212
00:08:37,360 --> 00:08:39,519
so if we want to read the file there

213
00:08:39,519 --> 00:08:41,360
will be a

214
00:08:41,360 --> 00:08:42,320
hook

215
00:08:42,320 --> 00:08:43,760
a mac hook

216
00:08:43,760 --> 00:08:45,760
and

217
00:08:45,760 --> 00:08:50,399
it will be called the sandbox uh is the

218
00:08:50,399 --> 00:08:51,440
will

219
00:08:51,440 --> 00:08:55,440
who most of these system calls on vfs

220
00:08:55,440 --> 00:08:57,360
so if we look at the mount system call

221
00:08:57,360 --> 00:08:59,200
flow

222
00:08:59,200 --> 00:09:02,160
we actually have couple of options

223
00:09:02,160 --> 00:09:04,320
to do a mount

224
00:09:04,320 --> 00:09:06,160
there is a mac mount

225
00:09:06,160 --> 00:09:09,680
system called which eventually arrives

226
00:09:09,680 --> 00:09:12,000
to the mount common

227
00:09:12,000 --> 00:09:14,000
function internal function

228
00:09:14,000 --> 00:09:16,240
and the mount command

229
00:09:16,240 --> 00:09:17,760
function we call

230
00:09:17,760 --> 00:09:20,720
dmac mount check mount

231
00:09:20,720 --> 00:09:23,600
mac hook now if we call the mount the

232
00:09:23,600 --> 00:09:25,120
classic mount

233
00:09:25,120 --> 00:09:27,760
system call what it will do is call into

234
00:09:27,760 --> 00:09:29,440
mac mount right away

235
00:09:29,440 --> 00:09:31,839
and again it goes back to mount common

236
00:09:31,839 --> 00:09:33,680
mount common is the

237
00:09:33,680 --> 00:09:34,880
ultimate

238
00:09:34,880 --> 00:09:37,760
um endpoint for all of the mount calls

239
00:09:37,760 --> 00:09:39,920
so we called f mount

240
00:09:39,920 --> 00:09:42,399
that will go as well now there is the fs

241
00:09:42,399 --> 00:09:44,160
snapshot

242
00:09:44,160 --> 00:09:45,200
when we

243
00:09:45,200 --> 00:09:47,760
do operation with snapshots which is a

244
00:09:47,760 --> 00:09:48,839
apfs

245
00:09:48,839 --> 00:09:52,959
feature and if we want to mount

246
00:09:52,959 --> 00:09:55,120
a snapshot then there is a snapshot

247
00:09:55,120 --> 00:09:56,480
mount

248
00:09:56,480 --> 00:09:59,440
call and

249
00:10:00,240 --> 00:10:02,240
that call that

250
00:10:02,240 --> 00:10:04,079
function we are called the mac mount

251
00:10:04,079 --> 00:10:06,160
check snapshot mount

252
00:10:06,160 --> 00:10:08,880
mac hook which is specifically designed

253
00:10:08,880 --> 00:10:09,839
to check

254
00:10:09,839 --> 00:10:12,160
if the snapshot mounting is allowed or

255
00:10:12,160 --> 00:10:14,560
not and then eventually asked for the

256
00:10:14,560 --> 00:10:16,839
mount command

257
00:10:16,839 --> 00:10:18,640
function

258
00:10:18,640 --> 00:10:20,240
we also need to talk about the disk

259
00:10:20,240 --> 00:10:22,880
arbitration service

260
00:10:22,880 --> 00:10:24,640
so what is that it's a system-wide

261
00:10:24,640 --> 00:10:27,120
service defined in one of the system by

262
00:10:27,120 --> 00:10:28,800
launch demons

263
00:10:28,800 --> 00:10:32,160
and it has an xpc service the com apple

264
00:10:32,160 --> 00:10:35,200
discord which is on this conversation d

265
00:10:35,200 --> 00:10:37,120
we can reach it

266
00:10:37,120 --> 00:10:38,000
and

267
00:10:38,000 --> 00:10:39,839
what is used for it basically manages

268
00:10:39,839 --> 00:10:42,240
this mounting unmounting and a few other

269
00:10:42,240 --> 00:10:44,800
disk related

270
00:10:44,800 --> 00:10:46,720
items

271
00:10:46,720 --> 00:10:48,480
and under the hood

272
00:10:48,480 --> 00:10:50,480
uh it will actually call the mount and

273
00:10:50,480 --> 00:10:52,240
unmount system call

274
00:10:52,240 --> 00:10:55,279
but it abstracts it away so we can if we

275
00:10:55,279 --> 00:10:57,040
don't want to call the mount system call

276
00:10:57,040 --> 00:10:58,959
ourselves we can interact with the

277
00:10:58,959 --> 00:11:01,279
discard mutation service

278
00:11:01,279 --> 00:11:05,040
itself and it will do everything for us

279
00:11:05,040 --> 00:11:07,120
now why

280
00:11:07,120 --> 00:11:10,240
we like it why this

281
00:11:10,320 --> 00:11:13,200
service is interesting first it runs as

282
00:11:13,200 --> 00:11:17,440
root uh it also runs on sandbox

283
00:11:17,440 --> 00:11:20,240
uh the xpc services offers

284
00:11:20,240 --> 00:11:22,720
it's accessible from

285
00:11:22,720 --> 00:11:24,959
the application sandbox so

286
00:11:24,959 --> 00:11:26,800
we can see the application sandbox

287
00:11:26,800 --> 00:11:29,760
profile here and we can see that the uh

288
00:11:29,760 --> 00:11:31,920
this combination

289
00:11:31,920 --> 00:11:35,440
mac service or xpc service is reachable

290
00:11:35,440 --> 00:11:38,720
and actually it will be reachable from

291
00:11:38,720 --> 00:11:42,320
most of the sandbox um

292
00:11:42,320 --> 00:11:45,519
application like this system sandbox

293
00:11:45,519 --> 00:11:46,560
services

294
00:11:46,560 --> 00:11:50,320
and it's also open source so it's uh

295
00:11:50,320 --> 00:11:52,160
really easy to

296
00:11:52,160 --> 00:11:54,560
do code audit

297
00:11:54,560 --> 00:11:55,600
in it

298
00:11:55,600 --> 00:11:57,200
now

299
00:11:57,200 --> 00:11:59,519
why it's important that it runs as root

300
00:11:59,519 --> 00:12:00,959
and unsandbox

301
00:12:00,959 --> 00:12:04,079
so whenever it makes the mount system

302
00:12:04,079 --> 00:12:05,680
call

303
00:12:05,680 --> 00:12:08,560
uh the mount system core as

304
00:12:08,560 --> 00:12:10,880
we discussed do all these

305
00:12:10,880 --> 00:12:12,800
mac policy hooks

306
00:12:12,800 --> 00:12:15,360
and check if the action is permitted for

307
00:12:15,360 --> 00:12:18,399
the given uh application or not but what

308
00:12:18,399 --> 00:12:19,360
the

309
00:12:19,360 --> 00:12:22,079
uh the mount system called vsc is that

310
00:12:22,079 --> 00:12:24,639
it's being called from from an

311
00:12:24,639 --> 00:12:27,040
application running as root and an

312
00:12:27,040 --> 00:12:29,680
application is running as uh on sandbox

313
00:12:29,680 --> 00:12:32,160
so basically

314
00:12:32,160 --> 00:12:35,120
everything will be permitted unless uh

315
00:12:35,120 --> 00:12:36,959
we want to mount over some system

316
00:12:36,959 --> 00:12:38,880
integrity protection

317
00:12:38,880 --> 00:12:40,480
protected stuff

318
00:12:40,480 --> 00:12:42,880
otherwise everything will go

319
00:12:42,880 --> 00:12:44,720
through from the mount

320
00:12:44,720 --> 00:12:47,040
system core point of view

321
00:12:47,040 --> 00:12:48,560
now

322
00:12:48,560 --> 00:12:51,200
obviously this can be abused

323
00:12:51,200 --> 00:12:53,680
if we call this service as a sandbox

324
00:12:53,680 --> 00:12:55,920
service it low privilege

325
00:12:55,920 --> 00:12:58,639
user so the discard reservation service

326
00:12:58,639 --> 00:13:01,279
uh have to do some checks uh to prevent

327
00:13:01,279 --> 00:13:02,320
a views

328
00:13:02,320 --> 00:13:05,839
so it will do a sandbox check

329
00:13:05,839 --> 00:13:08,480
call and check with the sandbox

330
00:13:08,480 --> 00:13:10,480
if the amount of operation is permitted

331
00:13:10,480 --> 00:13:13,839
for that given application uh or not

332
00:13:13,839 --> 00:13:17,040
it will also check if the location where

333
00:13:17,040 --> 00:13:19,440
we want to amount

334
00:13:19,440 --> 00:13:22,240
is owned by the same user as the process

335
00:13:22,240 --> 00:13:25,680
calling the discord with html service

336
00:13:25,680 --> 00:13:28,240
and all of these checks happen the

337
00:13:28,240 --> 00:13:30,720
da server session queue request function

338
00:13:30,720 --> 00:13:33,839
inside the deserver c

339
00:13:33,839 --> 00:13:36,160
code

340
00:13:36,880 --> 00:13:38,160
now

341
00:13:38,160 --> 00:13:39,600
we will come back to this this

342
00:13:39,600 --> 00:13:42,959
orbitation service later so the first cv

343
00:13:42,959 --> 00:13:45,120
is from patrick

344
00:13:45,120 --> 00:13:46,720
it's the sniffing authorization

345
00:13:46,720 --> 00:13:48,720
references on mac os

346
00:13:48,720 --> 00:13:49,600
uh

347
00:13:49,600 --> 00:13:51,760
he wrote a really detailed and really

348
00:13:51,760 --> 00:13:54,079
great blog post uh about the

349
00:13:54,079 --> 00:13:57,279
oil discovery and exploitation so

350
00:13:57,279 --> 00:13:58,720
that could probably take a whole

351
00:13:58,720 --> 00:14:00,480
presentation just to go over that so i

352
00:14:00,480 --> 00:14:02,720
will just cover the basics

353
00:14:02,720 --> 00:14:04,560
uh here

354
00:14:04,560 --> 00:14:07,399
some background for this cve

355
00:14:07,399 --> 00:14:09,040
authorization

356
00:14:09,040 --> 00:14:10,720
as this can be passed between two

357
00:14:10,720 --> 00:14:12,720
processes on macos through the

358
00:14:12,720 --> 00:14:15,700
authorization external form

359
00:14:15,700 --> 00:14:17,279
[Music]

360
00:14:17,279 --> 00:14:19,839
the security old trampoline

361
00:14:19,839 --> 00:14:21,519
function it's an old

362
00:14:21,519 --> 00:14:24,560
function uh it can execute privileged

363
00:14:24,560 --> 00:14:25,760
action

364
00:14:25,760 --> 00:14:27,680
i believe this is also deprecated these

365
00:14:27,680 --> 00:14:28,880
days but

366
00:14:28,880 --> 00:14:30,560
maybe not not sure

367
00:14:30,560 --> 00:14:34,560
and basically this function is using the

368
00:14:34,560 --> 00:14:37,040
authorization external form

369
00:14:37,040 --> 00:14:39,040
uh to pass

370
00:14:39,040 --> 00:14:42,000
out the realization

371
00:14:42,320 --> 00:14:44,399
so what happens when we call the

372
00:14:44,399 --> 00:14:48,320
authorization executed privileges um

373
00:14:48,320 --> 00:14:51,680
function which will result uh on calling

374
00:14:51,680 --> 00:14:55,199
the security of trump or line function

375
00:14:55,199 --> 00:14:58,000
it will write out

376
00:14:58,000 --> 00:15:00,560
the external form

377
00:15:00,560 --> 00:15:02,959
to the temporary directory into a random

378
00:15:02,959 --> 00:15:03,839
file

379
00:15:03,839 --> 00:15:07,279
and it will also delete it

380
00:15:07,360 --> 00:15:11,279
now if we can somehow get hold of this

381
00:15:11,279 --> 00:15:14,160
authorization reference

382
00:15:14,160 --> 00:15:16,880
we can use it uh because it's global to

383
00:15:16,880 --> 00:15:19,600
the system and and it's actually just a

384
00:15:19,600 --> 00:15:20,959
random number

385
00:15:20,959 --> 00:15:23,270
so if another

386
00:15:23,270 --> 00:15:24,720
[Music]

387
00:15:24,720 --> 00:15:26,720
application like the security of trump

388
00:15:26,720 --> 00:15:28,079
line in this case

389
00:15:28,079 --> 00:15:29,040
uh

390
00:15:29,040 --> 00:15:32,480
performs the authorization on this form

391
00:15:32,480 --> 00:15:34,639
and if we can get hold of the form we

392
00:15:34,639 --> 00:15:36,480
can

393
00:15:36,480 --> 00:15:40,639
use it and escalate our privileges

394
00:15:40,639 --> 00:15:44,639
so what we can do is

395
00:15:45,199 --> 00:15:48,160
that time it was possible to

396
00:15:48,160 --> 00:15:50,560
remove the temporary directory

397
00:15:50,560 --> 00:15:53,040
and create a new

398
00:15:53,040 --> 00:15:55,120
directory or a mount point in that

399
00:15:55,120 --> 00:15:56,560
location

400
00:15:56,560 --> 00:15:59,839
and mount the ram disk

401
00:15:59,839 --> 00:16:02,160
in that location

402
00:16:02,160 --> 00:16:04,399
and basically whenever the authorization

403
00:16:04,399 --> 00:16:06,240
reference was written

404
00:16:06,240 --> 00:16:08,639
to the to our ram disk we could scan the

405
00:16:08,639 --> 00:16:12,560
row run disk uh for this uh reference

406
00:16:12,560 --> 00:16:15,759
and once it was authorized

407
00:16:15,759 --> 00:16:17,279
uh we could actually escalate our

408
00:16:17,279 --> 00:16:20,639
privileges uh to root so

409
00:16:20,639 --> 00:16:23,360
i think this was a really nice

410
00:16:23,360 --> 00:16:25,920
example how to use the mount operation

411
00:16:25,920 --> 00:16:28,079
as an exploitation technique

412
00:16:28,079 --> 00:16:30,079
um

413
00:16:30,079 --> 00:16:33,199
and and they actually inspired me

414
00:16:33,199 --> 00:16:35,279
to find other stuff

415
00:16:35,279 --> 00:16:38,399
the next bug uh is from pawn to own they

416
00:16:38,399 --> 00:16:40,240
called it the mount yourself a root

417
00:16:40,240 --> 00:16:41,759
shell

418
00:16:41,759 --> 00:16:44,800
it was found by the fin hex team by

419
00:16:44,800 --> 00:16:47,519
niklas baumstark and somewhere cross

420
00:16:47,519 --> 00:16:49,199
and it was part of the pawn to an

421
00:16:49,199 --> 00:16:52,399
exploit chain in 2017

422
00:16:52,399 --> 00:16:54,720
they also released a really good blog

423
00:16:54,720 --> 00:16:57,279
post uh about all the details so again i

424
00:16:57,279 --> 00:16:59,040
will just cover the

425
00:16:59,040 --> 00:17:01,120
basics here

426
00:17:01,120 --> 00:17:03,040
so as

427
00:17:03,040 --> 00:17:04,880
i mentioned before

428
00:17:04,880 --> 00:17:07,280
this conversation service has to ensure

429
00:17:07,280 --> 00:17:08,160
that

430
00:17:08,160 --> 00:17:11,039
uh everything is fine find uh in order

431
00:17:11,039 --> 00:17:13,280
to prevent abuse

432
00:17:13,280 --> 00:17:14,880
so what happened

433
00:17:14,880 --> 00:17:16,000
is

434
00:17:16,000 --> 00:17:19,679
that this service uh

435
00:17:19,679 --> 00:17:21,679
checked if the mount point

436
00:17:21,679 --> 00:17:23,839
where we wanted to mount

437
00:17:23,839 --> 00:17:26,000
our disk existed

438
00:17:26,000 --> 00:17:29,360
and then it resolved the paths

439
00:17:29,360 --> 00:17:30,880
of the

440
00:17:30,880 --> 00:17:34,799
mount point and check if the

441
00:17:34,799 --> 00:17:36,240
user

442
00:17:36,240 --> 00:17:38,880
is the same

443
00:17:39,360 --> 00:17:41,600
as the user of the

444
00:17:41,600 --> 00:17:44,160
of the actual calling process

445
00:17:44,160 --> 00:17:45,360
and

446
00:17:45,360 --> 00:17:49,520
later on therefore no any other checks

447
00:17:49,520 --> 00:17:52,640
so if this check was passed uh then

448
00:17:52,640 --> 00:17:55,120
everything is good now the problem was

449
00:17:55,120 --> 00:17:56,400
that they

450
00:17:56,400 --> 00:17:58,480
resolved the

451
00:17:58,480 --> 00:18:01,520
the mount point location files

452
00:18:01,520 --> 00:18:04,480
so they resolved it here first

453
00:18:04,480 --> 00:18:07,200
and then later on when the actual uh

454
00:18:07,200 --> 00:18:09,919
mount operation was uh performed so

455
00:18:09,919 --> 00:18:12,400
there is a time of check time of use

456
00:18:12,400 --> 00:18:14,720
issue here

457
00:18:14,720 --> 00:18:18,000
uh so it produced the race conditions so

458
00:18:18,000 --> 00:18:20,480
the way they exploited it or it can be

459
00:18:20,480 --> 00:18:22,080
accelerated uh

460
00:18:22,080 --> 00:18:24,880
we create a sim link pointing to a user

461
00:18:24,880 --> 00:18:26,320
owned directory

462
00:18:26,320 --> 00:18:29,520
record these arbitration service uh the

463
00:18:29,520 --> 00:18:31,520
check will be passed

464
00:18:31,520 --> 00:18:33,919
and then we re-point the sim link to a

465
00:18:33,919 --> 00:18:36,960
root on directory uh once those

466
00:18:36,960 --> 00:18:38,320
ownership check

467
00:18:38,320 --> 00:18:40,160
is passed

468
00:18:40,160 --> 00:18:44,240
and if the amount is successful we stop

469
00:18:45,600 --> 00:18:46,400
and

470
00:18:46,400 --> 00:18:48,799
then uh so the other

471
00:18:48,799 --> 00:18:52,000
issue was is okay we can mount over root

472
00:18:52,000 --> 00:18:54,640
on directory but we also need to mount a

473
00:18:54,640 --> 00:18:57,200
disk image that the

474
00:18:57,200 --> 00:19:00,480
user has write access on the image

475
00:19:00,480 --> 00:19:04,480
and for this the efi partition was

476
00:19:04,480 --> 00:19:07,120
perfect because the regular admin user

477
00:19:07,120 --> 00:19:09,600
has write access

478
00:19:09,600 --> 00:19:11,919
or write they have write access on this

479
00:19:11,919 --> 00:19:13,280
partition

480
00:19:13,280 --> 00:19:15,679
nowadays we cannot mount it uh through

481
00:19:15,679 --> 00:19:17,440
this computation because there is a

482
00:19:17,440 --> 00:19:19,120
specific check

483
00:19:19,120 --> 00:19:22,720
uh for the efi partition uuid and it

484
00:19:22,720 --> 00:19:24,480
will not pass

485
00:19:24,480 --> 00:19:27,200
but we can also use as other

486
00:19:27,200 --> 00:19:29,760
uh disk images

487
00:19:29,760 --> 00:19:31,919
and here is a short demo of their

488
00:19:31,919 --> 00:19:34,640
exploit and actually here i just

489
00:19:34,640 --> 00:19:37,679
uh use their original poc on

490
00:19:37,679 --> 00:19:40,880
i believe high sierra

491
00:19:40,880 --> 00:19:42,640
so we started the poc it's a race

492
00:19:42,640 --> 00:19:45,840
condition so it takes

493
00:19:45,840 --> 00:19:46,960
a while

494
00:19:46,960 --> 00:19:49,280
not not that long actually

495
00:19:49,280 --> 00:19:50,840
just a couple of

496
00:19:50,840 --> 00:19:54,559
seconds and

497
00:19:55,919 --> 00:19:58,640
the location where they

498
00:19:58,640 --> 00:20:00,960
mounted over the disk image it was the

499
00:20:00,960 --> 00:20:04,000
chrome tabs folder

500
00:20:04,320 --> 00:20:07,039
and they created a new cron job

501
00:20:07,039 --> 00:20:09,440
as root and

502
00:20:09,440 --> 00:20:11,039
that they could escalate their

503
00:20:11,039 --> 00:20:14,480
privileges to root

504
00:20:16,480 --> 00:20:20,720
next one is from 2020 and it's an ecc

505
00:20:20,720 --> 00:20:23,360
bypass involving snapshot mounting and

506
00:20:23,360 --> 00:20:26,480
this was found by myself

507
00:20:26,480 --> 00:20:29,200
apfs have a has a feature called

508
00:20:29,200 --> 00:20:33,120
snapshots and it basically

509
00:20:33,120 --> 00:20:34,880
it's what it's called

510
00:20:34,880 --> 00:20:36,480
we can make a snapshot of the file

511
00:20:36,480 --> 00:20:38,400
system and we can revert back to it

512
00:20:38,400 --> 00:20:40,799
later on uh and this is a read-only

513
00:20:40,799 --> 00:20:42,640
snapshot

514
00:20:42,640 --> 00:20:44,799
and what we could do

515
00:20:44,799 --> 00:20:47,840
uh so tcc the privacy frameworks

516
00:20:47,840 --> 00:20:49,919
protects sensitive locations like

517
00:20:49,919 --> 00:20:52,080
desktop documents

518
00:20:52,080 --> 00:20:54,480
address book and so on

519
00:20:54,480 --> 00:20:57,200
uh what we could do is we could create a

520
00:20:57,200 --> 00:20:59,440
snapshot with the tmutl

521
00:20:59,440 --> 00:21:02,240
utility that was allowed to do to be

522
00:21:02,240 --> 00:21:04,640
done by anyone even the guest

523
00:21:04,640 --> 00:21:06,320
user

524
00:21:06,320 --> 00:21:08,480
and we mounted the snapshot

525
00:21:08,480 --> 00:21:10,960
in a custom location so in the example

526
00:21:10,960 --> 00:21:13,280
on the slide it's the temp snap

527
00:21:13,280 --> 00:21:16,000
now the temp snap location as a mount

528
00:21:16,000 --> 00:21:17,679
point

529
00:21:17,679 --> 00:21:20,400
force outside of the scope of

530
00:21:20,400 --> 00:21:22,080
tcc

531
00:21:22,080 --> 00:21:24,400
so once he mounted the snapshot as

532
00:21:24,400 --> 00:21:27,120
read-only we could access

533
00:21:27,120 --> 00:21:30,240
the entire file system in read-only mode

534
00:21:30,240 --> 00:21:32,720
and we could access

535
00:21:32,720 --> 00:21:35,360
every file on the system now on top of

536
00:21:35,360 --> 00:21:36,159
that

537
00:21:36,159 --> 00:21:39,679
if we use the no owner's flag

538
00:21:39,679 --> 00:21:41,840
on the mount operation

539
00:21:41,840 --> 00:21:43,039
that meant

540
00:21:43,039 --> 00:21:45,600
that the

541
00:21:45,600 --> 00:21:47,679
uh the snapshot was mounted with the no

542
00:21:47,679 --> 00:21:49,679
owner's flag which meant that we could

543
00:21:49,679 --> 00:21:52,320
access every user's file

544
00:21:52,320 --> 00:21:55,200
on the system and every user's private

545
00:21:55,200 --> 00:21:58,080
file so in case like in maybe large

546
00:21:58,080 --> 00:21:59,679
enterprise this multiple people are

547
00:21:59,679 --> 00:22:00,640
using

548
00:22:00,640 --> 00:22:02,799
um

549
00:22:02,799 --> 00:22:04,240
a macbook or

550
00:22:04,240 --> 00:22:06,080
or some mac device

551
00:22:06,080 --> 00:22:09,840
and maybe even if ssh is enabled

552
00:22:09,840 --> 00:22:12,720
any user could access any other users

553
00:22:12,720 --> 00:22:14,320
file

554
00:22:14,320 --> 00:22:16,960
locally this was working even for the

555
00:22:16,960 --> 00:22:18,159
guest

556
00:22:18,159 --> 00:22:20,480
account

557
00:22:20,480 --> 00:22:21,679
now

558
00:22:21,679 --> 00:22:25,760
the way apple fixed this issue is first

559
00:22:25,760 --> 00:22:28,799
under the hood they introduced the

560
00:22:28,799 --> 00:22:30,480
mac call out

561
00:22:30,480 --> 00:22:33,120
uh on the snapshot operation so actually

562
00:22:33,120 --> 00:22:36,559
the mac uh hook was introduced because

563
00:22:36,559 --> 00:22:38,960
of this bug on the snapshot

564
00:22:38,960 --> 00:22:41,679
operation and

565
00:22:41,679 --> 00:22:43,120
they tied

566
00:22:43,120 --> 00:22:45,840
the snapshot mount operation to the full

567
00:22:45,840 --> 00:22:47,520
disk access

568
00:22:47,520 --> 00:22:49,520
right

569
00:22:49,520 --> 00:22:51,919
which is a problem because

570
00:22:51,919 --> 00:22:54,480
this stride is normally so

571
00:22:54,480 --> 00:22:56,960
privacy pcc rights are given to

572
00:22:56,960 --> 00:23:01,120
applications and not users so let's say

573
00:23:01,120 --> 00:23:03,520
one of the users

574
00:23:03,520 --> 00:23:04,880
use this

575
00:23:04,880 --> 00:23:07,039
terminal and give stamina full disk

576
00:23:07,039 --> 00:23:08,640
access

577
00:23:08,640 --> 00:23:11,760
and if the other user logs in

578
00:23:11,760 --> 00:23:14,640
now he can start terminal and

579
00:23:14,640 --> 00:23:16,159
he can mount

580
00:23:16,159 --> 00:23:17,919
the snapshot and

581
00:23:17,919 --> 00:23:20,960
access the other user's file

582
00:23:20,960 --> 00:23:23,360
on the system

583
00:23:23,360 --> 00:23:24,799
and

584
00:23:24,799 --> 00:23:28,480
this is still the case today

585
00:23:29,360 --> 00:23:30,080
and

586
00:23:30,080 --> 00:23:33,439
apple said it's fine

587
00:23:34,640 --> 00:23:38,400
the next one uh from this year it's the

588
00:23:38,400 --> 00:23:41,200
pcc bypass again uh

589
00:23:41,200 --> 00:23:44,720
with involving the the mount some

590
00:23:44,720 --> 00:23:46,159
tricks

591
00:23:46,159 --> 00:23:50,080
uh this dc uh the privacy framework

592
00:23:50,080 --> 00:23:52,880
all the access or most of the access

593
00:23:52,880 --> 00:23:54,799
is controlled

594
00:23:54,799 --> 00:23:58,320
through a database file the tcc database

595
00:23:58,320 --> 00:23:59,440
file

596
00:23:59,440 --> 00:24:02,480
is found

597
00:24:02,640 --> 00:24:04,640
under the library application support

598
00:24:04,640 --> 00:24:06,480
home apple this is the

599
00:24:06,480 --> 00:24:09,679
directory and there is a pcc.db

600
00:24:09,679 --> 00:24:12,320
file and there is also a system by

601
00:24:12,320 --> 00:24:16,640
uh tccdb file uh on the

602
00:24:16,640 --> 00:24:18,960
root library application support and and

603
00:24:18,960 --> 00:24:21,039
so on so it's the same location so one

604
00:24:21,039 --> 00:24:23,679
is in the user home folder and one is in

605
00:24:23,679 --> 00:24:26,240
the system by library

606
00:24:26,240 --> 00:24:28,880
and of course tcc protects this file so

607
00:24:28,880 --> 00:24:31,760
we cannot edit uh the database because

608
00:24:31,760 --> 00:24:34,080
that would mean we can add or remove

609
00:24:34,080 --> 00:24:35,039
writes

610
00:24:35,039 --> 00:24:37,679
and we could bypass the ecc

611
00:24:37,679 --> 00:24:38,559
but

612
00:24:38,559 --> 00:24:42,080
what we could do uh make a disk image

613
00:24:42,080 --> 00:24:42,880
uh

614
00:24:42,880 --> 00:24:46,559
create a new dcc database file

615
00:24:46,559 --> 00:24:48,960
put in whatever you want

616
00:24:48,960 --> 00:24:51,679
in the database file and take this disk

617
00:24:51,679 --> 00:24:54,720
image as mount over the com apple tv

618
00:24:54,720 --> 00:24:57,360
system directory

619
00:24:57,360 --> 00:24:59,600
and restart the tcc

620
00:24:59,600 --> 00:25:02,960
daemon and at that point dcc daemon

621
00:25:02,960 --> 00:25:06,400
parsed the new dc cd big file which we

622
00:25:06,400 --> 00:25:07,760
mounted

623
00:25:07,760 --> 00:25:11,200
because the original one is kinda hidden

624
00:25:11,200 --> 00:25:12,559
at that point

625
00:25:12,559 --> 00:25:14,960
and basic we could fully bypass the user

626
00:25:14,960 --> 00:25:17,279
mode pcc

627
00:25:17,279 --> 00:25:20,240
and it was really

628
00:25:20,240 --> 00:25:21,360
funny

629
00:25:21,360 --> 00:25:23,360
uh so again here is a

630
00:25:23,360 --> 00:25:26,159
quick demo uh of this so again we don't

631
00:25:26,159 --> 00:25:29,039
have access to the documents

632
00:25:29,039 --> 00:25:30,000
folder

633
00:25:30,000 --> 00:25:32,559
we run our

634
00:25:32,559 --> 00:25:35,440
exploit which creates a new database a

635
00:25:35,440 --> 00:25:38,159
new disk image performs the mounting

636
00:25:38,159 --> 00:25:41,679
restarts tcc and voila we can access the

637
00:25:41,679 --> 00:25:44,000
documents folders

638
00:25:44,000 --> 00:25:45,840
and basically anything else you want

639
00:25:45,840 --> 00:25:47,039
because

640
00:25:47,039 --> 00:25:49,679
we control the tcc database at that

641
00:25:49,679 --> 00:25:52,000
point

642
00:25:53,360 --> 00:25:54,720
the next one

643
00:25:54,720 --> 00:25:57,039
is again a dcc bypass

644
00:25:57,039 --> 00:25:58,400
through the app

645
00:25:58,400 --> 00:26:00,960
app translocation service and honestly

646
00:26:00,960 --> 00:26:04,159
this is probably one of my favorites

647
00:26:04,159 --> 00:26:08,000
so at the app translocation service

648
00:26:08,000 --> 00:26:08,960
um

649
00:26:08,960 --> 00:26:12,640
it was introduced as a security

650
00:26:12,640 --> 00:26:15,840
feature to address one of the

651
00:26:15,840 --> 00:26:19,440
vulnerabilities reported by patrick

652
00:26:19,440 --> 00:26:21,440
so you can blame him for this

653
00:26:21,440 --> 00:26:22,799
feature

654
00:26:22,799 --> 00:26:25,360
and what it does technically when we

655
00:26:25,360 --> 00:26:27,600
download an application and we don't

656
00:26:27,600 --> 00:26:28,910
move uh the

657
00:26:28,910 --> 00:26:30,240
[Music]

658
00:26:30,240 --> 00:26:32,960
application into the applications

659
00:26:32,960 --> 00:26:36,720
uh directory very normally would be

660
00:26:36,720 --> 00:26:38,880
but run it directly from the

661
00:26:38,880 --> 00:26:41,279
downloaded folder

662
00:26:41,279 --> 00:26:43,120
uh it will make

663
00:26:43,120 --> 00:26:45,440
a new lefs mount so it's

664
00:26:45,440 --> 00:26:47,520
it's not a copy but kind

665
00:26:47,520 --> 00:26:49,440
it looks like a copy but it's not it's

666
00:26:49,440 --> 00:26:53,520
it's like an identity mount so it maps

667
00:26:53,520 --> 00:26:56,159
the application into the temporary

668
00:26:56,159 --> 00:26:58,320
directory app translocation slash d

669
00:26:58,320 --> 00:26:59,360
slash d

670
00:26:59,360 --> 00:27:01,919
and then the application name and we run

671
00:27:01,919 --> 00:27:04,559
it from there

672
00:27:04,799 --> 00:27:06,960
the app translocation service is open

673
00:27:06,960 --> 00:27:09,600
source as part of the security

674
00:27:09,600 --> 00:27:11,440
framework and it's inside the leap

675
00:27:11,440 --> 00:27:13,919
security translocate library

676
00:27:13,919 --> 00:27:16,640
now the binary that is responsible for

677
00:27:16,640 --> 00:27:19,360
the translocation is the usr lib access

678
00:27:19,360 --> 00:27:21,440
lsd

679
00:27:21,440 --> 00:27:23,520
finally if we check the

680
00:27:23,520 --> 00:27:25,679
[Music]

681
00:27:25,679 --> 00:27:28,399
the entitlements of this binary we

682
00:27:28,399 --> 00:27:30,240
cannot use two things

683
00:27:30,240 --> 00:27:33,840
one is that it has the kt's dc service

684
00:27:33,840 --> 00:27:35,919
system policy or files

685
00:27:35,919 --> 00:27:39,120
uh cc entitlement which effectively

686
00:27:39,120 --> 00:27:41,360
means full disk access

687
00:27:41,360 --> 00:27:43,679
and it also has a new fs hello

688
00:27:43,679 --> 00:27:45,120
entitlement

689
00:27:45,120 --> 00:27:47,760
which allows it to perform an ulfs mount

690
00:27:47,760 --> 00:27:48,960
on mac os

691
00:27:48,960 --> 00:27:51,679
so the null fs mount on mac os is

692
00:27:51,679 --> 00:27:54,159
implement the feature is implemented

693
00:27:54,159 --> 00:27:56,399
but you cannot do that unless you have

694
00:27:56,399 --> 00:27:58,640
this entitlement and actually this is

695
00:27:58,640 --> 00:28:00,960
the only binary on the entire system

696
00:28:00,960 --> 00:28:03,760
that has this entitlement

697
00:28:03,760 --> 00:28:06,799
at least as of today

698
00:28:09,039 --> 00:28:10,240
okay so

699
00:28:10,240 --> 00:28:11,919
what it does it

700
00:28:11,919 --> 00:28:13,120
kind of

701
00:28:13,120 --> 00:28:17,039
copies or or maps fi to another location

702
00:28:17,039 --> 00:28:19,440
and we arrive to the same idea what we

703
00:28:19,440 --> 00:28:23,360
had in the snapshot mounting

704
00:28:23,520 --> 00:28:25,679
because we want to map

705
00:28:25,679 --> 00:28:28,640
these privacy sensitive

706
00:28:28,640 --> 00:28:31,200
directories to another location

707
00:28:31,200 --> 00:28:33,679
now the translocate service will only

708
00:28:33,679 --> 00:28:36,000
translocate something if the quarantine

709
00:28:36,000 --> 00:28:39,120
attribute is on the directory

710
00:28:39,120 --> 00:28:40,880
so what we do we put the current in

711
00:28:40,880 --> 00:28:42,640
attribute library

712
00:28:42,640 --> 00:28:45,360
because why not and then

713
00:28:45,360 --> 00:28:47,919
called the translocation xpc service and

714
00:28:47,919 --> 00:28:50,240
say that hey we want to translocate the

715
00:28:50,240 --> 00:28:53,440
library uh directory

716
00:28:53,440 --> 00:28:56,080
and it will map it to the

717
00:28:56,080 --> 00:28:59,520
mdf translocation dd library

718
00:28:59,520 --> 00:29:00,960
location

719
00:29:00,960 --> 00:29:03,520
as read only but that's fine and we can

720
00:29:03,520 --> 00:29:05,760
then access everything

721
00:29:05,760 --> 00:29:08,399
uh through the that pass

722
00:29:08,399 --> 00:29:09,360
and

723
00:29:09,360 --> 00:29:10,720
because the

724
00:29:10,720 --> 00:29:12,799
xpc client for the translocation

725
00:29:12,799 --> 00:29:15,440
services as open source it was super

726
00:29:15,440 --> 00:29:18,400
easy to create an exploit for this

727
00:29:18,400 --> 00:29:21,559
[Music]

728
00:29:22,799 --> 00:29:24,880
basically we set the pass and call the

729
00:29:24,880 --> 00:29:27,440
service so it's it was quite uh

730
00:29:27,440 --> 00:29:29,120
straightforward so here is the demo

731
00:29:29,120 --> 00:29:30,000
piece

732
00:29:30,000 --> 00:29:32,720
uh we try to access

733
00:29:32,720 --> 00:29:36,080
the messages directory which sorts our

734
00:29:36,080 --> 00:29:38,720
imessages of course it's not permitted

735
00:29:38,720 --> 00:29:41,919
because it's privacy protected

736
00:29:41,919 --> 00:29:43,919
because the translocate

737
00:29:43,919 --> 00:29:46,000
service on library we can see the new

738
00:29:46,000 --> 00:29:47,440
path

739
00:29:47,440 --> 00:29:49,039
on the screen

740
00:29:49,039 --> 00:29:53,279
and then if we use this new location

741
00:29:53,760 --> 00:29:57,039
we can access messages

742
00:29:58,320 --> 00:30:00,320
so this is another trick where we could

743
00:30:00,320 --> 00:30:02,000
use the

744
00:30:02,000 --> 00:30:03,679
mount operation although not

745
00:30:03,679 --> 00:30:04,960
traditionally

746
00:30:04,960 --> 00:30:06,159
for

747
00:30:06,159 --> 00:30:09,600
exploiting some service so i bet ever

748
00:30:09,600 --> 00:30:11,120
never thought about using a

749
00:30:11,120 --> 00:30:13,039
translocation for such

750
00:30:13,039 --> 00:30:14,559
uh items

751
00:30:14,559 --> 00:30:17,120
so how did apple fix uh this

752
00:30:17,120 --> 00:30:20,080
vulnerabilities so first

753
00:30:20,080 --> 00:30:21,520
in the past

754
00:30:21,520 --> 00:30:24,000
we had to pass

755
00:30:24,000 --> 00:30:26,799
a pass location

756
00:30:26,799 --> 00:30:28,880
what we want to actu

757
00:30:28,880 --> 00:30:30,320
translocate

758
00:30:30,320 --> 00:30:31,520
in the new

759
00:30:31,520 --> 00:30:33,520
translocation

760
00:30:33,520 --> 00:30:36,240
implementation they actually expect a

761
00:30:36,240 --> 00:30:37,840
file descriptor

762
00:30:37,840 --> 00:30:38,640
uh

763
00:30:38,640 --> 00:30:40,640
so we already need to have the ability

764
00:30:40,640 --> 00:30:42,000
to open that

765
00:30:42,000 --> 00:30:43,440
location

766
00:30:43,440 --> 00:30:45,360
and they also introduced a couple of

767
00:30:45,360 --> 00:30:47,679
sandbox checks uh before the

768
00:30:47,679 --> 00:30:49,760
translocation even happens so they will

769
00:30:49,760 --> 00:30:53,200
check the file read and the file mount

770
00:30:53,200 --> 00:30:54,480
check if it's

771
00:30:54,480 --> 00:30:56,399
allowed or not now

772
00:30:56,399 --> 00:30:58,720
this in itself doesn't

773
00:30:58,720 --> 00:31:01,440
change too much in terms

774
00:31:01,440 --> 00:31:03,039
of the library

775
00:31:03,039 --> 00:31:05,919
issues so we can still open the library

776
00:31:05,919 --> 00:31:07,440
we can still basic

777
00:31:07,440 --> 00:31:09,440
we can pass the file descriptor and so

778
00:31:09,440 --> 00:31:12,240
on so it would still work so we can

779
00:31:12,240 --> 00:31:14,559
still perform the

780
00:31:14,559 --> 00:31:18,000
um the translocation but they also added

781
00:31:18,000 --> 00:31:21,519
the sandbox check when we access

782
00:31:21,519 --> 00:31:22,559
uh

783
00:31:22,559 --> 00:31:25,679
the new location so basically

784
00:31:25,679 --> 00:31:28,559
now even if we translocate the library

785
00:31:28,559 --> 00:31:30,960
folder

786
00:31:30,960 --> 00:31:33,279
and now if we try to access files

787
00:31:33,279 --> 00:31:37,039
through that it will not be allowed

788
00:31:37,360 --> 00:31:38,320
and

789
00:31:38,320 --> 00:31:42,640
the last one is a privilege escalation

790
00:31:42,640 --> 00:31:44,480
where i could again use

791
00:31:44,480 --> 00:31:45,760
amount

792
00:31:45,760 --> 00:31:48,159
to to achieve

793
00:31:48,159 --> 00:31:51,519
this and i found this in the fortinet 40

794
00:31:51,519 --> 00:31:53,760
client installer

795
00:31:53,760 --> 00:31:55,519
uh so what happened

796
00:31:55,519 --> 00:31:56,720
when the

797
00:31:56,720 --> 00:31:58,840
fortinet 40 client was

798
00:31:58,840 --> 00:32:02,159
installed or during the installation it

799
00:32:02,159 --> 00:32:04,559
created several log files and put it

800
00:32:04,559 --> 00:32:06,240
inside the temp

801
00:32:06,240 --> 00:32:07,519
directory

802
00:32:07,519 --> 00:32:08,960
this is

803
00:32:08,960 --> 00:32:11,760
unfortunately pretty common

804
00:32:11,760 --> 00:32:13,600
and the problem is that this is a

805
00:32:13,600 --> 00:32:15,840
predictable location

806
00:32:15,840 --> 00:32:17,360
and

807
00:32:17,360 --> 00:32:18,399
uh

808
00:32:18,399 --> 00:32:20,320
because it's an installer it's type if

809
00:32:20,320 --> 00:32:23,279
you run as root so all these files are

810
00:32:23,279 --> 00:32:25,360
being written as root

811
00:32:25,360 --> 00:32:27,519
and because it's in a predictable

812
00:32:27,519 --> 00:32:31,519
location with a predictable file name

813
00:32:31,600 --> 00:32:34,080
if we use a sim link or a hard link we

814
00:32:34,080 --> 00:32:35,039
can

815
00:32:35,039 --> 00:32:39,200
at minimum perform an arbitrary override

816
00:32:39,200 --> 00:32:41,440
on the system which is a denial of

817
00:32:41,440 --> 00:32:43,120
service scenarios so it's not that

818
00:32:43,120 --> 00:32:44,559
interesting

819
00:32:44,559 --> 00:32:46,320
uh usually

820
00:32:46,320 --> 00:32:47,279
and

821
00:32:47,279 --> 00:32:49,679
the other issue with this log file is

822
00:32:49,679 --> 00:32:52,080
that it always had a fixed content so no

823
00:32:52,080 --> 00:32:52,960
matter

824
00:32:52,960 --> 00:32:57,039
what happened it was always the same

825
00:32:57,039 --> 00:33:00,640
and there was no way i could impact um

826
00:33:00,640 --> 00:33:02,480
what's being written

827
00:33:02,480 --> 00:33:05,120
so okay uh we can do an arbitrary

828
00:33:05,120 --> 00:33:08,000
override so i can overwrite a file on

829
00:33:08,000 --> 00:33:11,120
the system with this content

830
00:33:11,120 --> 00:33:13,519
and i was wondering okay how can i turn

831
00:33:13,519 --> 00:33:16,559
this into code execution

832
00:33:16,559 --> 00:33:17,760
and

833
00:33:17,760 --> 00:33:20,000
i overwrote one of the periodic scripts

834
00:33:20,000 --> 00:33:22,799
so if i overwrite a periodic script

835
00:33:22,799 --> 00:33:23,600
which

836
00:33:23,600 --> 00:33:26,000
are scheduled to run on either daily

837
00:33:26,000 --> 00:33:29,120
weekly or monthly basis

838
00:33:29,120 --> 00:33:31,519
uh it will be interpreted as a shell

839
00:33:31,519 --> 00:33:33,120
script

840
00:33:33,120 --> 00:33:35,760
if it's a shell strip basically

841
00:33:35,760 --> 00:33:38,880
it will try to each line as if it was

842
00:33:38,880 --> 00:33:40,799
some command

843
00:33:40,799 --> 00:33:43,360
now if we look through this uh

844
00:33:43,360 --> 00:33:44,720
list

845
00:33:44,720 --> 00:33:45,840
um

846
00:33:45,840 --> 00:33:48,240
we basically what we need we need a

847
00:33:48,240 --> 00:33:50,799
binary somewhere that will be executed

848
00:33:50,799 --> 00:33:52,799
for us

849
00:33:52,799 --> 00:33:55,519
and basically the second line and the

850
00:33:55,519 --> 00:33:57,519
third line

851
00:33:57,519 --> 00:34:00,799
can satisfy it for us

852
00:34:01,039 --> 00:34:02,320
but how

853
00:34:02,320 --> 00:34:03,919
so i picked the

854
00:34:03,919 --> 00:34:06,480
third line the volumes 40 client fct

855
00:34:06,480 --> 00:34:08,000
data conf

856
00:34:08,000 --> 00:34:10,239
and what we can do we can create a disk

857
00:34:10,239 --> 00:34:11,280
image

858
00:34:11,280 --> 00:34:13,839
uh call it 40 client

859
00:34:13,839 --> 00:34:15,599
if we mount it

860
00:34:15,599 --> 00:34:18,159
any low privilege user can do that so if

861
00:34:18,159 --> 00:34:20,800
you call open dmg

862
00:34:20,800 --> 00:34:23,599
it will be mounted over volumes and the

863
00:34:23,599 --> 00:34:25,280
name

864
00:34:25,280 --> 00:34:26,239
of the

865
00:34:26,239 --> 00:34:27,599
volume

866
00:34:27,599 --> 00:34:29,760
in this case for the client

867
00:34:29,760 --> 00:34:32,239
so i can create the volumes for the

868
00:34:32,239 --> 00:34:36,239
client path and if i add the fct data

869
00:34:36,239 --> 00:34:39,040
slash conf

870
00:34:39,119 --> 00:34:41,679
inside my disk image then

871
00:34:41,679 --> 00:34:43,520
i have a path that

872
00:34:43,520 --> 00:34:45,679
is satisfied

873
00:34:45,679 --> 00:34:49,240
in this log file

874
00:34:49,280 --> 00:34:52,800
and it will be run as root

875
00:34:54,399 --> 00:34:55,199
so

876
00:34:55,199 --> 00:34:59,118
here's a demo of what happens

877
00:34:59,280 --> 00:35:01,280
so we start with creating a symbolic

878
00:35:01,280 --> 00:35:02,640
link

879
00:35:02,640 --> 00:35:05,599
for this log file

880
00:35:05,599 --> 00:35:09,160
we run the installer

881
00:35:38,880 --> 00:35:40,880
it's done

882
00:35:40,880 --> 00:35:43,520
and at this point

883
00:35:43,520 --> 00:35:45,680
yeah we eject the the installer but we

884
00:35:45,680 --> 00:35:47,040
could we could also do it from the

885
00:35:47,040 --> 00:35:49,359
command line i just did it from the gui

886
00:35:49,359 --> 00:35:51,040
and if we check our periodic script we

887
00:35:51,040 --> 00:35:53,440
can see that it was over with them uh

888
00:35:53,440 --> 00:35:59,839
with the log we mount our own disk image

889
00:36:00,079 --> 00:36:01,599
we check if

890
00:36:01,599 --> 00:36:04,400
the file we wanted is there

891
00:36:04,400 --> 00:36:06,240
it is

892
00:36:06,240 --> 00:36:08,000
which is the same that

893
00:36:08,000 --> 00:36:09,599
is inside the

894
00:36:09,599 --> 00:36:11,040
log file

895
00:36:11,040 --> 00:36:14,640
and we can either wait 24 hours or

896
00:36:14,640 --> 00:36:15,760
call the

897
00:36:15,760 --> 00:36:17,760
pseudo-periodic daily

898
00:36:17,760 --> 00:36:19,280
to

899
00:36:19,280 --> 00:36:20,480
execute the

900
00:36:20,480 --> 00:36:22,240
the daily scripts

901
00:36:22,240 --> 00:36:25,040
and we have a pop-up test route

902
00:36:25,040 --> 00:36:27,520
uh because the binary actually launched

903
00:36:27,520 --> 00:36:29,680
terminal so that's uh

904
00:36:29,680 --> 00:36:32,240
what it did

905
00:36:34,800 --> 00:36:37,359
so for instance i know installer box are

906
00:36:37,359 --> 00:36:40,640
not always that cool um

907
00:36:40,640 --> 00:36:42,800
but i still

908
00:36:42,800 --> 00:36:46,160
see it sometimes as a nice

909
00:36:46,560 --> 00:36:49,599
exploration trick or method

910
00:36:49,599 --> 00:36:52,720
to abuse installers

911
00:36:52,720 --> 00:36:55,760
so how we can generically abuse

912
00:36:55,760 --> 00:36:56,640
these

913
00:36:56,640 --> 00:36:59,200
so in case they

914
00:36:59,200 --> 00:37:00,320
write

915
00:37:00,320 --> 00:37:02,560
to a location

916
00:37:02,560 --> 00:37:04,800
which has a predictable name like let's

917
00:37:04,800 --> 00:37:06,240
say temp

918
00:37:06,240 --> 00:37:08,720
some fixed name directory and

919
00:37:08,720 --> 00:37:10,720
maybe inside the directory they write

920
00:37:10,720 --> 00:37:13,599
out other files maybe please files

921
00:37:13,599 --> 00:37:15,680
scripts whatever

922
00:37:15,680 --> 00:37:16,560
but

923
00:37:16,560 --> 00:37:18,880
uh the point is that at the temp title

924
00:37:18,880 --> 00:37:21,119
under the temp directory they always use

925
00:37:21,119 --> 00:37:22,800
the same

926
00:37:22,800 --> 00:37:24,160
name

927
00:37:24,160 --> 00:37:26,160
so what we can do we create a mount

928
00:37:26,160 --> 00:37:29,119
point in the temp fixed name

929
00:37:29,119 --> 00:37:31,200
and mount over a disk image with the no

930
00:37:31,200 --> 00:37:32,640
owner's flag

931
00:37:32,640 --> 00:37:34,400
so at that point

932
00:37:34,400 --> 00:37:36,240
um

933
00:37:36,240 --> 00:37:38,720
during the installation

934
00:37:38,720 --> 00:37:40,800
we can modify any file

935
00:37:40,800 --> 00:37:43,760
the installer places

936
00:37:43,760 --> 00:37:45,839
in this location

937
00:37:45,839 --> 00:37:48,000
and even if the installer tries to

938
00:37:48,000 --> 00:37:49,040
delete

939
00:37:49,040 --> 00:37:51,040
the temp fix name

940
00:37:51,040 --> 00:37:54,400
directory it cannot do that

941
00:37:54,400 --> 00:37:57,119
if there is a disk mounted on the mount

942
00:37:57,119 --> 00:37:59,359
point so that operation will not be

943
00:37:59,359 --> 00:38:00,880
successful

944
00:38:00,880 --> 00:38:02,960
and thus we even

945
00:38:02,960 --> 00:38:05,839
can overcome race condition scenarios

946
00:38:05,839 --> 00:38:08,880
where we would need to recreate

947
00:38:08,880 --> 00:38:11,839
this directory

948
00:38:15,200 --> 00:38:16,240
and

949
00:38:16,240 --> 00:38:18,240
some new books that i cannot really

950
00:38:18,240 --> 00:38:20,240
cover because they are still under the

951
00:38:20,240 --> 00:38:22,720
fix but i found these

952
00:38:22,720 --> 00:38:25,200
uh by working on this

953
00:38:25,200 --> 00:38:26,880
presentation

954
00:38:26,880 --> 00:38:29,119
uh so it's always good to go back and

955
00:38:29,119 --> 00:38:31,040
check your work

956
00:38:31,040 --> 00:38:33,760
because i found another full dcc bypass

957
00:38:33,760 --> 00:38:36,000
i found the sandbox escape

958
00:38:36,000 --> 00:38:40,400
and another dcc bypass

959
00:38:40,640 --> 00:38:42,720
and i believe there is a fourth one now

960
00:38:42,720 --> 00:38:44,960
but i can't record

961
00:38:44,960 --> 00:38:47,839
exactly what

962
00:38:47,839 --> 00:38:48,880
so

963
00:38:48,880 --> 00:38:52,560
thank you that was more from me

964
00:38:52,560 --> 00:38:56,119
do you have any questions

965
00:39:04,000 --> 00:39:06,160
awesome that was amazing i have a few

966
00:39:06,160 --> 00:39:08,640
questions uh first were your demos all

967
00:39:08,640 --> 00:39:10,960
live

968
00:39:12,000 --> 00:39:14,960
uh sorry i couldn't hear it very well

969
00:39:14,960 --> 00:39:16,880
okay let's try this again were your

970
00:39:16,880 --> 00:39:20,240
demos live that you did

971
00:39:20,240 --> 00:39:23,280
no those were were or pre-recorded okay

972
00:39:23,280 --> 00:39:24,960
cause i was like that was i mean still

973
00:39:24,960 --> 00:39:27,760
very impressive but i always wonder um

974
00:39:27,760 --> 00:39:29,280
also

975
00:39:29,280 --> 00:39:31,440
could you uh briefly talk about your

976
00:39:31,440 --> 00:39:33,520
experiences with apple bug bounty

977
00:39:33,520 --> 00:39:35,440
program because i imagine you have

978
00:39:35,440 --> 00:39:37,280
submitted these to

979
00:39:37,280 --> 00:39:38,960
apple and i'll just be interested kind

980
00:39:38,960 --> 00:39:41,119
of on your take on your experience with

981
00:39:41,119 --> 00:39:43,599
that

982
00:39:43,599 --> 00:39:44,880
uh

983
00:39:44,880 --> 00:39:46,480
generally speaking

984
00:39:46,480 --> 00:39:49,520
uh not just these yes i submitted this

985
00:39:49,520 --> 00:39:52,400
uh it's it's bittersweet so

986
00:39:52,400 --> 00:39:55,280
one is they do pay

987
00:39:55,280 --> 00:39:58,160
was promised so that's fair

988
00:39:58,160 --> 00:39:59,280
but

989
00:39:59,280 --> 00:40:01,680
on the other side that can take really

990
00:40:01,680 --> 00:40:05,440
really long time so for example

991
00:40:05,440 --> 00:40:06,960
uh

992
00:40:06,960 --> 00:40:08,400
i still have

993
00:40:08,400 --> 00:40:10,720
vulnerabilities fixed with the initial

994
00:40:10,720 --> 00:40:12,880
release of bixer

995
00:40:12,880 --> 00:40:17,040
and i think not all of them was reviewed

996
00:40:17,040 --> 00:40:18,880
for a reward

997
00:40:18,880 --> 00:40:21,119
so that means i waited

998
00:40:21,119 --> 00:40:23,440
x months maybe over a year because that

999
00:40:23,440 --> 00:40:25,520
also happens that

1000
00:40:25,520 --> 00:40:27,680
there are bugs i reported in catalina

1001
00:40:27,680 --> 00:40:30,079
and they will be fixed in monterey

1002
00:40:30,079 --> 00:40:31,760
so you wait let's say

1003
00:40:31,760 --> 00:40:34,640
maybe a year or even

1004
00:40:34,640 --> 00:40:35,520
more

1005
00:40:35,520 --> 00:40:37,760
then the vulnerability is fixed and then

1006
00:40:37,760 --> 00:40:39,760
you wait another year

1007
00:40:39,760 --> 00:40:42,079
just

1008
00:40:42,880 --> 00:40:45,359
to be decided that

1009
00:40:45,359 --> 00:40:47,760
you get a reward or not

1010
00:40:47,760 --> 00:40:50,400
but eventually when they decide that hey

1011
00:40:50,400 --> 00:40:53,119
you do get a reward they pay out usually

1012
00:40:53,119 --> 00:40:56,800
in a month so that part is fast

1013
00:40:56,800 --> 00:40:59,040
so

1014
00:40:59,599 --> 00:41:03,920
yeah the other issue is

1015
00:41:04,079 --> 00:41:08,560
the lack of communication so it's um

1016
00:41:08,560 --> 00:41:10,720
sometimes you feel that you send your

1017
00:41:10,720 --> 00:41:12,480
emails or follow up

1018
00:41:12,480 --> 00:41:13,839
into

1019
00:41:13,839 --> 00:41:16,079
into a spam folder or a black or

1020
00:41:16,079 --> 00:41:17,200
something

1021
00:41:17,200 --> 00:41:21,119
um i'm pretty sure they read it uh

1022
00:41:21,119 --> 00:41:24,319
but often there is no response um

1023
00:41:24,319 --> 00:41:26,880
i also realized that there are only a

1024
00:41:26,880 --> 00:41:29,440
handful of people replying to

1025
00:41:29,440 --> 00:41:30,400
to

1026
00:41:30,400 --> 00:41:33,040
to open cases so i think there are like

1027
00:41:33,040 --> 00:41:34,560
five or six

1028
00:41:34,560 --> 00:41:36,319
people

1029
00:41:36,319 --> 00:41:39,280
responding so they might be overloaded

1030
00:41:39,280 --> 00:41:41,680
uh with all the bugs

1031
00:41:41,680 --> 00:41:45,440
or submissions so they maybe cannot just

1032
00:41:45,440 --> 00:41:47,680
reply so frequently

1033
00:41:47,680 --> 00:41:49,280
but

1034
00:41:49,280 --> 00:41:50,960
come on emperor has a ton of money they

1035
00:41:50,960 --> 00:41:52,880
should hire them more people to handle

1036
00:41:52,880 --> 00:41:54,160
the cases

1037
00:41:54,160 --> 00:41:57,040
and and actually communicate

1038
00:41:57,040 --> 00:42:00,160
better with the researchers so

1039
00:42:00,160 --> 00:42:01,119
but

1040
00:42:01,119 --> 00:42:03,040
but actually so the product security

1041
00:42:03,040 --> 00:42:04,319
theme

1042
00:42:04,319 --> 00:42:06,640
is still better than the other themes

1043
00:42:06,640 --> 00:42:09,520
that offer in terms of communication so

1044
00:42:09,520 --> 00:42:11,440
it's also not perfect but at least they

1045
00:42:11,440 --> 00:42:13,040
are better than like the developer

1046
00:42:13,040 --> 00:42:14,160
relations

1047
00:42:14,160 --> 00:42:17,280
uh so that that stuff that's something

1048
00:42:17,280 --> 00:42:18,720
uh at least

1049
00:42:18,720 --> 00:42:20,880
yeah no thanks for sharing your your

1050
00:42:20,880 --> 00:42:22,640
insights in that that's uh that's good i

1051
00:42:22,640 --> 00:42:24,079
know you had some experience sounds like

1052
00:42:24,079 --> 00:42:26,240
there's some some pros and cons but uh

1053
00:42:26,240 --> 00:42:28,720
seems like patience is the is the key

1054
00:42:28,720 --> 00:42:33,279
are there any other questions for chava

1055
00:42:34,560 --> 00:42:35,680
all right chabot hold on i'm going to

1056
00:42:35,680 --> 00:42:38,079
turn around the laptop so you can see

1057
00:42:38,079 --> 00:42:39,599
everyone let's give chop a round of

1058
00:42:39,599 --> 00:42:42,599
applause

1059
00:42:46,160 --> 00:42:48,240
you

