1
00:00:04,160 --> 00:00:06,399
chris is going to talk about installer

2
00:00:06,399 --> 00:00:09,120
plug-ins and how they can be potentially

3
00:00:09,120 --> 00:00:11,040
abused i'm also really interesting

4
00:00:11,040 --> 00:00:13,120
to see how uh in his talk he's going to

5
00:00:13,120 --> 00:00:14,639
describe how

6
00:00:14,639 --> 00:00:15,920
you can leverage for example the

7
00:00:15,920 --> 00:00:17,680
endpoint security framework to perhaps

8
00:00:17,680 --> 00:00:20,080
detect malicious activity so round of

9
00:00:20,080 --> 00:00:22,880
applause for chris

10
00:00:24,240 --> 00:00:26,560
thank you for coming to my talk uh plug

11
00:00:26,560 --> 00:00:27,760
and play

12
00:00:27,760 --> 00:00:31,039
using native code to get initial access

13
00:00:31,039 --> 00:00:32,960
with installer plugins

14
00:00:32,960 --> 00:00:35,280
what kind of motivated me to

15
00:00:35,280 --> 00:00:37,360
do this talk was a couple years ago

16
00:00:37,360 --> 00:00:39,920
patrick wordle tweeted out

17
00:00:39,920 --> 00:00:42,239
some odd behavior he saw with an

18
00:00:42,239 --> 00:00:44,559
unsigned bundle being loaded into the

19
00:00:44,559 --> 00:00:46,559
installer app and it turned out this was

20
00:00:46,559 --> 00:00:48,640
actually an installer plug-in and it's

21
00:00:48,640 --> 00:00:51,039
legitimate functionality in mac os for

22
00:00:51,039 --> 00:00:53,199
installers and so

23
00:00:53,199 --> 00:00:54,960
i looked into it and dubbed up a quick

24
00:00:54,960 --> 00:00:57,600
plc to load up a malicious installer

25
00:00:57,600 --> 00:00:59,359
plug-in in the installer app and i

26
00:00:59,359 --> 00:01:00,640
learned that

27
00:01:00,640 --> 00:01:02,399
it's possible to

28
00:01:02,399 --> 00:01:04,239
do what's known as swizzling to

29
00:01:04,239 --> 00:01:06,240
basically hide the installer once the

30
00:01:06,240 --> 00:01:08,560
user closes it and so you could have the

31
00:01:08,560 --> 00:01:10,960
installer app run your malicious code in

32
00:01:10,960 --> 00:01:13,200
the background and the user would have

33
00:01:13,200 --> 00:01:14,799
no idea that it's still running after

34
00:01:14,799 --> 00:01:16,400
they hit close

35
00:01:16,400 --> 00:01:18,880
and so sometime between then and now

36
00:01:18,880 --> 00:01:20,560
apple changed the behavior of the

37
00:01:20,560 --> 00:01:22,880
installer app and installer plugins such

38
00:01:22,880 --> 00:01:26,000
that it starts a xpc service for your

39
00:01:26,000 --> 00:01:27,040
plugin

40
00:01:27,040 --> 00:01:28,799
and so that created a bit of a dilemma

41
00:01:28,799 --> 00:01:29,840
for me

42
00:01:29,840 --> 00:01:31,920
because once the installer app was

43
00:01:31,920 --> 00:01:34,640
closed that xpc service would die

44
00:01:34,640 --> 00:01:36,799
so in this talk i'll talk about how we

45
00:01:36,799 --> 00:01:38,560
can overcome that challenge with two

46
00:01:38,560 --> 00:01:40,960
different techniques and how we can

47
00:01:40,960 --> 00:01:44,559
possibly detect this kind of behavior

48
00:01:45,280 --> 00:01:47,200
so who am i i'm a lead offensive

49
00:01:47,200 --> 00:01:49,200
security engineer for zoom

50
00:01:49,200 --> 00:01:51,520
i've been there for almost a year

51
00:01:51,520 --> 00:01:53,439
and when i started out my career i

52
00:01:53,439 --> 00:01:56,240
primarily focused on windows postx and

53
00:01:56,240 --> 00:01:58,640
tool development but all it took was one

54
00:01:58,640 --> 00:02:01,600
red team against some mac os endpoints

55
00:02:01,600 --> 00:02:02,960
and i pretty much fell in love at that

56
00:02:02,960 --> 00:02:04,159
point

57
00:02:04,159 --> 00:02:05,600
there wasn't a lot of research at the

58
00:02:05,600 --> 00:02:07,200
time and not a lot of offensive

59
00:02:07,200 --> 00:02:09,840
tradecraft that focus on mac os and so i

60
00:02:09,840 --> 00:02:12,080
decided to just jump on over and focus

61
00:02:12,080 --> 00:02:13,280
on that um

62
00:02:13,280 --> 00:02:14,400
and so that's kind of what i've been

63
00:02:14,400 --> 00:02:15,840
doing um

64
00:02:15,840 --> 00:02:16,959
since then

65
00:02:16,959 --> 00:02:19,280
so also i work on poseidon which is a

66
00:02:19,280 --> 00:02:22,480
mythic agent developed by cody thomas so

67
00:02:22,480 --> 00:02:24,239
i do that in my spare time but i also

68
00:02:24,239 --> 00:02:25,760
like to build offensive tools and

69
00:02:25,760 --> 00:02:27,200
objective c

70
00:02:27,200 --> 00:02:31,679
golang python rust you name it

71
00:02:32,319 --> 00:02:34,879
so today i'll talk about some well-known

72
00:02:34,879 --> 00:02:36,959
techniques that have already been talked

73
00:02:36,959 --> 00:02:39,440
about today with installer packages i

74
00:02:39,440 --> 00:02:40,720
love them because there's so many

75
00:02:40,720 --> 00:02:42,640
different places where you can execute

76
00:02:42,640 --> 00:02:43,680
code

77
00:02:43,680 --> 00:02:45,440
but this part i'll kind of skip over

78
00:02:45,440 --> 00:02:47,040
very quickly because it's already been

79
00:02:47,040 --> 00:02:48,800
reviewed

80
00:02:48,800 --> 00:02:50,640
so then i'll also jump into how

81
00:02:50,640 --> 00:02:52,400
installer plugins work and talk about

82
00:02:52,400 --> 00:02:53,840
the internals

83
00:02:53,840 --> 00:02:55,280
and then we'll talk about two different

84
00:02:55,280 --> 00:02:57,519
techniques we can use to basically get

85
00:02:57,519 --> 00:02:59,920
over that problem of the xvc service

86
00:02:59,920 --> 00:03:02,239
dying once the installer app closes and

87
00:03:02,239 --> 00:03:03,680
then we'll talk about some possible

88
00:03:03,680 --> 00:03:05,920
detections with the endpoint security

89
00:03:05,920 --> 00:03:08,399
framework

90
00:03:08,879 --> 00:03:12,000
so what are installing packages

91
00:03:12,000 --> 00:03:14,239
essentially they are bundle files that

92
00:03:14,239 --> 00:03:16,560
are in a czar archive format

93
00:03:16,560 --> 00:03:19,280
they can have any number of files that

94
00:03:19,280 --> 00:03:21,200
will be installed on the system

95
00:03:21,200 --> 00:03:23,680
that can contain installer scripts so

96
00:03:23,680 --> 00:03:25,519
like we said the pre-installed pulse

97
00:03:25,519 --> 00:03:28,000
install or preflight

98
00:03:28,000 --> 00:03:30,159
they can have those also can contain

99
00:03:30,159 --> 00:03:33,840
plugins which i'll talk about today

100
00:03:35,519 --> 00:03:36,959
so now we'll talk about some of the

101
00:03:36,959 --> 00:03:38,640
execution techniques that have been

102
00:03:38,640 --> 00:03:41,760
already been covered today

103
00:03:41,840 --> 00:03:43,840
so first our installer scripts and as i

104
00:03:43,840 --> 00:03:45,760
said there are many different places

105
00:03:45,760 --> 00:03:47,680
where you can execute code as an

106
00:03:47,680 --> 00:03:50,400
attacker during the install process

107
00:03:50,400 --> 00:03:52,879
and so you can use a installer script

108
00:03:52,879 --> 00:03:55,840
that uses any pre-installed

109
00:03:55,840 --> 00:03:57,519
scripting service on the system so it

110
00:03:57,519 --> 00:04:00,640
can be python perl php

111
00:04:00,640 --> 00:04:03,280
ruby bash anything

112
00:04:03,280 --> 00:04:04,959
and i also learned recently that you can

113
00:04:04,959 --> 00:04:07,280
actually use a macro binary in place of

114
00:04:07,280 --> 00:04:09,599
these instead and just have it kick off

115
00:04:09,599 --> 00:04:12,400
native code within that binary

116
00:04:12,400 --> 00:04:14,640
and also the package script service is

117
00:04:14,640 --> 00:04:17,199
actually responsible for kicking off any

118
00:04:17,199 --> 00:04:19,279
installer scripts that you include

119
00:04:19,279 --> 00:04:22,479
so that's just something to note

120
00:04:22,720 --> 00:04:24,560
so this is just an example post install

121
00:04:24,560 --> 00:04:25,520
script

122
00:04:25,520 --> 00:04:27,680
so you have the normal bashabang and

123
00:04:27,680 --> 00:04:29,759
this is a pretty common way for

124
00:04:29,759 --> 00:04:32,160
me to get initial access on ops is using

125
00:04:32,160 --> 00:04:34,479
osa script with a command line or one

126
00:04:34,479 --> 00:04:36,160
liner to go out and reach out and

127
00:04:36,160 --> 00:04:39,440
download some javascript

128
00:04:40,840 --> 00:04:43,120
payload also there's installer

129
00:04:43,120 --> 00:04:45,199
javascript this is

130
00:04:45,199 --> 00:04:46,800
essentially

131
00:04:46,800 --> 00:04:48,560
inline javascript that's in contained

132
00:04:48,560 --> 00:04:51,600
within a distribution xml file and so

133
00:04:51,600 --> 00:04:53,600
you have special product archive

134
00:04:53,600 --> 00:04:56,080
packages that have sometimes smaller

135
00:04:56,080 --> 00:04:58,320
packages contained within and with those

136
00:04:58,320 --> 00:05:00,639
you can edit the distribution xml and

137
00:05:00,639 --> 00:05:02,880
include some inline javascript

138
00:05:02,880 --> 00:05:04,400
as mentioned before you can use the

139
00:05:04,400 --> 00:05:07,520
system.run or system.onerunts

140
00:05:07,520 --> 00:05:09,919
methods to execute arbitrary commands on

141
00:05:09,919 --> 00:05:11,840
the system and so you can use that to

142
00:05:11,840 --> 00:05:14,799
get initial access

143
00:05:17,199 --> 00:05:19,199
so this is just an example distribution

144
00:05:19,199 --> 00:05:21,919
xml file and you'll see within that c

145
00:05:21,919 --> 00:05:23,840
data block that's just a simple

146
00:05:23,840 --> 00:05:25,840
installation check and that runs before

147
00:05:25,840 --> 00:05:26,720
all the

148
00:05:26,720 --> 00:05:29,280
files are copied to the system and so as

149
00:05:29,280 --> 00:05:30,800
an attacker we can do

150
00:05:30,800 --> 00:05:32,240
any kind of checks to check to make sure

151
00:05:32,240 --> 00:05:34,880
we're not running in a vm or get some

152
00:05:34,880 --> 00:05:37,199
system information and then run and kick

153
00:05:37,199 --> 00:05:39,840
off our payload

154
00:05:41,680 --> 00:05:43,280
all right so now i can dig into the

155
00:05:43,280 --> 00:05:45,039
installer plug-in internals

156
00:05:45,039 --> 00:05:46,800
now that we kind of covered the basics

157
00:05:46,800 --> 00:05:47,520
of

158
00:05:47,520 --> 00:05:48,960
installer packages and the different

159
00:05:48,960 --> 00:05:53,000
xcode execution techniques

160
00:05:54,400 --> 00:05:56,240
so installer plugins these are

161
00:05:56,240 --> 00:05:58,000
essentially also bundle files that are

162
00:05:58,000 --> 00:06:00,720
included with installer packages and you

163
00:06:00,720 --> 00:06:02,800
actually need to use a product archive

164
00:06:02,800 --> 00:06:04,880
to include these

165
00:06:04,880 --> 00:06:06,720
so you would have to build either like a

166
00:06:06,720 --> 00:06:08,560
simple flat package that doesn't have a

167
00:06:08,560 --> 00:06:11,120
script or a simple component package

168
00:06:11,120 --> 00:06:12,560
that installs

169
00:06:12,560 --> 00:06:14,000
some file on disk for you and then

170
00:06:14,000 --> 00:06:15,919
includes a post install or pre-install

171
00:06:15,919 --> 00:06:17,199
script

172
00:06:17,199 --> 00:06:18,960
and so you would take that and then

173
00:06:18,960 --> 00:06:20,479
package that up in what's known as a

174
00:06:20,479 --> 00:06:22,240
product archive and there are a bunch of

175
00:06:22,240 --> 00:06:23,680
command line tools that will do this for

176
00:06:23,680 --> 00:06:26,000
you or you can find um any third-party

177
00:06:26,000 --> 00:06:28,240
apps that will build these for you

178
00:06:28,240 --> 00:06:29,280
and so

179
00:06:29,280 --> 00:06:30,479
essentially the

180
00:06:30,479 --> 00:06:32,639
installer plugin has a plist file that

181
00:06:32,639 --> 00:06:34,479
defines when your installer plug-in is

182
00:06:34,479 --> 00:06:36,880
going to get loaded in the installer app

183
00:06:36,880 --> 00:06:38,960
so you can have it load at the beginning

184
00:06:38,960 --> 00:06:41,120
or at the end of the install process it

185
00:06:41,120 --> 00:06:42,880
doesn't really matter because that only

186
00:06:42,880 --> 00:06:44,960
deals with the ui the installer plugin

187
00:06:44,960 --> 00:06:46,720
is actually loaded once the installer

188
00:06:46,720 --> 00:06:48,240
app starts and it detects that you're

189
00:06:48,240 --> 00:06:50,560
using a custom plug-in

190
00:06:50,560 --> 00:06:52,319
so what's neat about this for attackers

191
00:06:52,319 --> 00:06:54,960
is that we have access to objective-c so

192
00:06:54,960 --> 00:06:56,800
we can call any of the native mac os

193
00:06:56,800 --> 00:07:00,880
apis we can start a new process we can

194
00:07:00,880 --> 00:07:02,560
make network connections using some of

195
00:07:02,560 --> 00:07:04,240
the networking libraries

196
00:07:04,240 --> 00:07:06,080
the options are kind of limitless but

197
00:07:06,080 --> 00:07:08,080
the one problem as i mentioned before is

198
00:07:08,080 --> 00:07:10,160
that once the installer app is closed by

199
00:07:10,160 --> 00:07:13,120
the user that xpc service is killed

200
00:07:13,120 --> 00:07:14,800
and that's because that service is

201
00:07:14,800 --> 00:07:16,479
packaged with the installer app and the

202
00:07:16,479 --> 00:07:18,319
installer app actually invokes that

203
00:07:18,319 --> 00:07:20,720
service

204
00:07:21,919 --> 00:07:24,560
so with installer plugins

205
00:07:24,560 --> 00:07:26,319
once the installer app starts up it

206
00:07:26,319 --> 00:07:28,639
actually loads a series of bundles and

207
00:07:28,639 --> 00:07:30,560
there's a bundle that corresponds for

208
00:07:30,560 --> 00:07:32,800
each installer pane so for the

209
00:07:32,800 --> 00:07:34,880
introduction the license

210
00:07:34,880 --> 00:07:36,639
the readme those are actually bundles

211
00:07:36,639 --> 00:07:38,479
that are contained within installer app

212
00:07:38,479 --> 00:07:40,319
and so it goes and loads each of these

213
00:07:40,319 --> 00:07:41,280
bundles

214
00:07:41,280 --> 00:07:42,880
there's one specific bundle that is

215
00:07:42,880 --> 00:07:44,960
interesting and that's involved with

216
00:07:44,960 --> 00:07:46,560
installer plugins and that is the remote

217
00:07:46,560 --> 00:07:48,400
plug-in bundle

218
00:07:48,400 --> 00:07:50,240
so once that bundle is loaded it

219
00:07:50,240 --> 00:07:53,280
actually uses the nsx pc connection api

220
00:07:53,280 --> 00:07:55,759
to make or reach out to

221
00:07:55,759 --> 00:07:58,000
the installer remote plugin service and

222
00:07:58,000 --> 00:07:59,759
start that service and once it makes

223
00:07:59,759 --> 00:08:01,680
that connection that plug-in service

224
00:08:01,680 --> 00:08:03,599
will load your attacker bundle from some

225
00:08:03,599 --> 00:08:05,919
random location on disk

226
00:08:05,919 --> 00:08:07,599
and what's kind of interesting is that

227
00:08:07,599 --> 00:08:09,680
it always is a randomized temporary

228
00:08:09,680 --> 00:08:11,680
location so it's kind of difficult to

229
00:08:11,680 --> 00:08:14,720
build detections based on just that path

230
00:08:14,720 --> 00:08:16,240
and i know that installer plugins are

231
00:08:16,240 --> 00:08:18,879
legitimately used sometimes so

232
00:08:18,879 --> 00:08:20,560
that may not be something you want to

233
00:08:20,560 --> 00:08:24,000
base your detection logic for

234
00:08:24,720 --> 00:08:26,800
so internally whenever that remote

235
00:08:26,800 --> 00:08:28,800
plug-in service is started there is a

236
00:08:28,800 --> 00:08:31,919
function within the installer section

237
00:08:31,919 --> 00:08:34,958
installer section remote plugin review

238
00:08:34,958 --> 00:08:36,719
controller class this class is

239
00:08:36,719 --> 00:08:39,039
responsible for basically navigating

240
00:08:39,039 --> 00:08:41,519
through each of the installer panes and

241
00:08:41,519 --> 00:08:43,519
each time it loads a bundle there are a

242
00:08:43,519 --> 00:08:45,120
bunch of different methods that it calls

243
00:08:45,120 --> 00:08:45,839
like

244
00:08:45,839 --> 00:08:48,240
will enter pane this is basically code

245
00:08:48,240 --> 00:08:50,640
that's executed before you click next or

246
00:08:50,640 --> 00:08:52,560
get into the next installer pane and

247
00:08:52,560 --> 00:08:54,080
then there's another method called did

248
00:08:54,080 --> 00:08:55,279
enter pain

249
00:08:55,279 --> 00:08:57,680
and that's code that's executed once you

250
00:08:57,680 --> 00:09:00,160
click on next and enter the actual pane

251
00:09:00,160 --> 00:09:02,480
and so within that that remote plug-in

252
00:09:02,480 --> 00:09:03,680
service

253
00:09:03,680 --> 00:09:06,240
that class method there's a path for

254
00:09:06,240 --> 00:09:07,600
your bundle that's passed into that

255
00:09:07,600 --> 00:09:09,680
method and it's used in what's called a

256
00:09:09,680 --> 00:09:11,680
ns block and so a block is just a

257
00:09:11,680 --> 00:09:13,680
function or a code that's executed in

258
00:09:13,680 --> 00:09:14,959
the background

259
00:09:14,959 --> 00:09:16,959
and you basically pass a function that

260
00:09:16,959 --> 00:09:18,800
is executed within that block

261
00:09:18,800 --> 00:09:20,399
and so that function gets passed the

262
00:09:20,399 --> 00:09:22,320
bundle path and instance of the

263
00:09:22,320 --> 00:09:24,080
installer remote plugin service view

264
00:09:24,080 --> 00:09:26,560
controller

265
00:09:27,279 --> 00:09:29,040
so what happens within that inside that

266
00:09:29,040 --> 00:09:32,160
function is it uses the ns bundle class

267
00:09:32,160 --> 00:09:34,560
to initialize an instance of that object

268
00:09:34,560 --> 00:09:36,800
with the path and so once you have an

269
00:09:36,800 --> 00:09:38,720
instance of an ns bundle it just calls

270
00:09:38,720 --> 00:09:40,560
load and so and if you're an attacker

271
00:09:40,560 --> 00:09:43,120
you use something or something known as

272
00:09:43,120 --> 00:09:45,519
a constructor to execute code within

273
00:09:45,519 --> 00:09:47,440
your bundle at that point and so it

274
00:09:47,440 --> 00:09:50,000
calls an ns bundle load and it loads

275
00:09:50,000 --> 00:09:51,600
your attacker bundle

276
00:09:51,600 --> 00:09:53,040
and then if you want to do something

277
00:09:53,040 --> 00:09:55,839
like spawn a new process or

278
00:09:55,839 --> 00:09:58,000
inject some code into another process

279
00:09:58,000 --> 00:09:59,200
you would do something like that in

280
00:09:59,200 --> 00:10:00,480
there

281
00:10:00,480 --> 00:10:02,480
in this case the installer plug-in is

282
00:10:02,480 --> 00:10:04,880
running in user context so you don't

283
00:10:04,880 --> 00:10:06,800
have access to things like getting a

284
00:10:06,800 --> 00:10:08,959
handle to another process

285
00:10:08,959 --> 00:10:10,560
or a task port

286
00:10:10,560 --> 00:10:12,000
but you can do some other interesting

287
00:10:12,000 --> 00:10:13,040
things

288
00:10:13,040 --> 00:10:15,680
and so also after it loads that bundle

289
00:10:15,680 --> 00:10:19,120
it will basically take the class methods

290
00:10:19,120 --> 00:10:21,440
and proxy those from the installer app

291
00:10:21,440 --> 00:10:24,640
to your bundle and so the did enter pane

292
00:10:24,640 --> 00:10:26,720
will enter pain those methods will be

293
00:10:26,720 --> 00:10:29,120
proxy to your custom bundle and execute

294
00:10:29,120 --> 00:10:33,560
code that you have within in there

295
00:10:34,480 --> 00:10:36,000
so now that i've talked about the

296
00:10:36,000 --> 00:10:37,839
installer plug-in internals i'll talk

297
00:10:37,839 --> 00:10:39,279
about two different techniques that you

298
00:10:39,279 --> 00:10:42,000
can use to execute code and kind of get

299
00:10:42,000 --> 00:10:43,040
out of that

300
00:10:43,040 --> 00:10:46,959
temporary xvc service

301
00:10:46,959 --> 00:10:49,680
so the first is using something called

302
00:10:49,680 --> 00:10:52,560
xvc and so xvc is essentially remote

303
00:10:52,560 --> 00:10:54,800
procedure calls on mac os

304
00:10:54,800 --> 00:10:56,000
and so

305
00:10:56,000 --> 00:10:57,680
in jonathan levin's course he talked

306
00:10:57,680 --> 00:11:00,079
about a lot of the services on mac os

307
00:11:00,079 --> 00:11:02,560
use xvc in the background and so one of

308
00:11:02,560 --> 00:11:04,880
the command line utilities launch codel

309
00:11:04,880 --> 00:11:06,959
actually uses xvc to talk to launch

310
00:11:06,959 --> 00:11:09,040
diamond or launch d

311
00:11:09,040 --> 00:11:11,279
and so as an attacker we can use the

312
00:11:11,279 --> 00:11:13,680
same functionality to

313
00:11:13,680 --> 00:11:16,640
send xbc messages to launch d and submit

314
00:11:16,640 --> 00:11:19,440
a job so a job is basically a temporary

315
00:11:19,440 --> 00:11:21,360
launch statement or launched agent on

316
00:11:21,360 --> 00:11:23,760
mac os and so we can use a special

317
00:11:23,760 --> 00:11:26,720
function called xpc pipe routine to send

318
00:11:26,720 --> 00:11:30,240
a message to launchd and start that job

319
00:11:30,240 --> 00:11:31,519
and what's really cool about this is

320
00:11:31,519 --> 00:11:33,680
that basically any process in new

321
00:11:33,680 --> 00:11:35,120
zealand can do this you don't have to be

322
00:11:35,120 --> 00:11:36,959
signed or entitled

323
00:11:36,959 --> 00:11:38,959
you can just send messages to launchd

324
00:11:38,959 --> 00:11:40,959
and start a new job

325
00:11:40,959 --> 00:11:42,560
so when you do that installer the

326
00:11:42,560 --> 00:11:44,480
installer plugin will send an xpc

327
00:11:44,480 --> 00:11:47,519
message to launch d and then xvc proxy

328
00:11:47,519 --> 00:11:49,920
will kick off your temporary service for

329
00:11:49,920 --> 00:11:52,079
you

330
00:11:52,480 --> 00:11:55,519
so this is what the xpc code looks like

331
00:11:55,519 --> 00:11:56,959
this is actually taken from jonathan

332
00:11:56,959 --> 00:12:00,560
levin's tool launch jtl this is a open

333
00:12:00,560 --> 00:12:02,399
source version of launch codel that he

334
00:12:02,399 --> 00:12:03,600
developed

335
00:12:03,600 --> 00:12:05,600
and so the source code all it does is

336
00:12:05,600 --> 00:12:08,000
create an xvc dictionary and fill it

337
00:12:08,000 --> 00:12:10,240
with the parameters you need to submit a

338
00:12:10,240 --> 00:12:12,880
job so you'll set keep alive to one

339
00:12:12,880 --> 00:12:13,839
because

340
00:12:13,839 --> 00:12:15,519
if something happens to our payload and

341
00:12:15,519 --> 00:12:17,519
it crashes we we would like launch to

342
00:12:17,519 --> 00:12:19,920
launch d to restart it also we submit

343
00:12:19,920 --> 00:12:21,440
the label this is just the name of the

344
00:12:21,440 --> 00:12:23,200
temporary service

345
00:12:23,200 --> 00:12:25,440
program arguments you can use or you can

346
00:12:25,440 --> 00:12:28,000
omit it doesn't matter but the program

347
00:12:28,000 --> 00:12:30,240
in this case i'm going to use to provide

348
00:12:30,240 --> 00:12:32,639
a path to my payload

349
00:12:32,639 --> 00:12:34,240
so then once we have all the parameters

350
00:12:34,240 --> 00:12:37,200
set we create that small xvc message and

351
00:12:37,200 --> 00:12:39,760
would use that xvc pipe routine method

352
00:12:39,760 --> 00:12:43,200
to send a message to launch d

353
00:12:44,800 --> 00:12:46,480
and so this is just what it looks like

354
00:12:46,480 --> 00:12:47,920
over the wire

355
00:12:47,920 --> 00:12:50,079
again jonathan levin has a neat little

356
00:12:50,079 --> 00:12:52,880
tool called xplce that you can use to

357
00:12:52,880 --> 00:12:55,920
inspect xvc messages in launchd

358
00:12:55,920 --> 00:12:57,839
so you'll basically use the tool and

359
00:12:57,839 --> 00:13:00,639
point it at launch d or pid1 and it'll

360
00:13:00,639 --> 00:13:02,880
inject the library to hook

361
00:13:02,880 --> 00:13:05,360
a special function to print out each xpc

362
00:13:05,360 --> 00:13:07,600
message that it receives as a string and

363
00:13:07,600 --> 00:13:09,920
so it's a neat way you can trace xc

364
00:13:09,920 --> 00:13:12,320
messages between processes

365
00:13:12,320 --> 00:13:13,680
and so this is just what it looks like

366
00:13:13,680 --> 00:13:16,239
over the wire

367
00:13:17,519 --> 00:13:20,399
so now for the second technique

368
00:13:20,399 --> 00:13:22,959
we are going to abuse electron apps

369
00:13:22,959 --> 00:13:24,560
and we've already kind of talked about

370
00:13:24,560 --> 00:13:26,079
the environment variables that you can

371
00:13:26,079 --> 00:13:28,800
use with electron apps to essentially

372
00:13:28,800 --> 00:13:32,160
run them as a normal nodejs application

373
00:13:32,160 --> 00:13:32,959
but

374
00:13:32,959 --> 00:13:35,200
for electron apps they need special

375
00:13:35,200 --> 00:13:37,040
entitlements with the hardened runtime

376
00:13:37,040 --> 00:13:39,199
so if a developer decides they want to

377
00:13:39,199 --> 00:13:40,959
ship their electron app to

378
00:13:40,959 --> 00:13:43,120
users over the internet

379
00:13:43,120 --> 00:13:44,959
they have to have it notarized and so

380
00:13:44,959 --> 00:13:48,079
for that they have to use the allow jet

381
00:13:48,079 --> 00:13:50,160
and the allow executable memory

382
00:13:50,160 --> 00:13:53,920
entitlements just for electron to work

383
00:13:53,920 --> 00:13:55,360
how it normally does

384
00:13:55,360 --> 00:13:57,279
so what's also cool is

385
00:13:57,279 --> 00:13:58,800
a lot of the electron apps for some

386
00:13:58,800 --> 00:14:00,399
reason use the disable library

387
00:14:00,399 --> 00:14:02,320
validation and allow build environment

388
00:14:02,320 --> 00:14:04,399
variables entitlements as well

389
00:14:04,399 --> 00:14:06,480
i found this to be quite common there's

390
00:14:06,480 --> 00:14:07,760
actually a site

391
00:14:07,760 --> 00:14:10,079
i think it's called electron.js i'll

392
00:14:10,079 --> 00:14:12,560
drop a link later in discord but there's

393
00:14:12,560 --> 00:14:15,440
a ton of just electron apps listed there

394
00:14:15,440 --> 00:14:17,519
and most of them have all four of these

395
00:14:17,519 --> 00:14:18,800
entitlements

396
00:14:18,800 --> 00:14:20,320
and so you can find a legitimately

397
00:14:20,320 --> 00:14:23,120
signed and notarized app that uses these

398
00:14:23,120 --> 00:14:25,440
entitlements and this is what we need as

399
00:14:25,440 --> 00:14:30,040
attackers to inject into the app

400
00:14:30,880 --> 00:14:32,160
so

401
00:14:32,160 --> 00:14:33,839
with those two environment variables

402
00:14:33,839 --> 00:14:35,440
that we need for injection

403
00:14:35,440 --> 00:14:38,079
one we have dild insert libraries so

404
00:14:38,079 --> 00:14:39,839
this is something we can use

405
00:14:39,839 --> 00:14:42,320
as a classic technique to inject a dilib

406
00:14:42,320 --> 00:14:44,160
and then we need the electron running as

407
00:14:44,160 --> 00:14:46,399
node environment variable

408
00:14:46,399 --> 00:14:48,959
and so with electron runners node um

409
00:14:48,959 --> 00:14:50,639
basically you want to tell the the app

410
00:14:50,639 --> 00:14:52,720
to hide itself or hide the window and

411
00:14:52,720 --> 00:14:55,199
the reason being is if the user sees

412
00:14:55,199 --> 00:14:57,440
after they run your installer package

413
00:14:57,440 --> 00:14:58,959
of some window just popping up on the

414
00:14:58,959 --> 00:15:00,880
desktop for an electron app that's very

415
00:15:00,880 --> 00:15:03,199
suspicious and so after they run the

416
00:15:03,199 --> 00:15:05,120
installer we want to hide that activity

417
00:15:05,120 --> 00:15:07,440
from the dock and from the ui

418
00:15:07,440 --> 00:15:09,199
so you can pass an argument that

419
00:15:09,199 --> 00:15:11,279
references the electron

420
00:15:11,279 --> 00:15:13,440
class or module and just tell it to hide

421
00:15:13,440 --> 00:15:14,480
from the dock

422
00:15:14,480 --> 00:15:16,320
also there is a special flag you can

423
00:15:16,320 --> 00:15:18,320
tell electron to basically break on the

424
00:15:18,320 --> 00:15:20,240
first line of javascript

425
00:15:20,240 --> 00:15:22,399
in any electron application

426
00:15:22,399 --> 00:15:23,839
and so i did that because i ran into

427
00:15:23,839 --> 00:15:25,279
some issues where

428
00:15:25,279 --> 00:15:26,800
once the app was running for whatever

429
00:15:26,800 --> 00:15:28,880
reason i couldn't get a reference to the

430
00:15:28,880 --> 00:15:30,560
electron module it just wouldn't be

431
00:15:30,560 --> 00:15:32,560
found but i found that if i stopped the

432
00:15:32,560 --> 00:15:34,480
application before it actually executed

433
00:15:34,480 --> 00:15:37,040
any java javascript for some reason it

434
00:15:37,040 --> 00:15:38,959
actually worked

435
00:15:38,959 --> 00:15:40,240
so that's the reason why i included that

436
00:15:40,240 --> 00:15:42,639
flag

437
00:15:43,360 --> 00:15:45,360
so here's what the code looks like

438
00:15:45,360 --> 00:15:47,920
so for this uh example i chose the

439
00:15:47,920 --> 00:15:50,000
twitch app um through my testing this

440
00:15:50,000 --> 00:15:52,000
was probably the most stable app i tried

441
00:15:52,000 --> 00:15:54,399
a bunch of other apps where once i tried

442
00:15:54,399 --> 00:15:56,000
to hide the window or eject the library

443
00:15:56,000 --> 00:15:57,440
for whatever reason the electron app

444
00:15:57,440 --> 00:15:58,720
would just crash

445
00:15:58,720 --> 00:16:00,720
so twitch was the most stable and so

446
00:16:00,720 --> 00:16:02,880
twitch is actually really really large

447
00:16:02,880 --> 00:16:05,120
it takes maybe three or four seconds to

448
00:16:05,120 --> 00:16:07,839
copy to disk through the install process

449
00:16:07,839 --> 00:16:09,839
and so i found out that if i tried to

450
00:16:09,839 --> 00:16:12,959
call a special function to launch

451
00:16:12,959 --> 00:16:14,800
the twitch app before it was copy to

452
00:16:14,800 --> 00:16:16,399
disk it would just fail because it

453
00:16:16,399 --> 00:16:18,320
actually wasn't installed at the time

454
00:16:18,320 --> 00:16:20,240
and so i used the dispatch async

455
00:16:20,240 --> 00:16:21,839
function to execute code in the

456
00:16:21,839 --> 00:16:24,000
background after sleeping for eight

457
00:16:24,000 --> 00:16:25,120
seconds

458
00:16:25,120 --> 00:16:26,639
just to make sure that the twitch app is

459
00:16:26,639 --> 00:16:28,399
copy to disk

460
00:16:28,399 --> 00:16:30,320
and then i would use a function

461
00:16:30,320 --> 00:16:32,480
discovered by reggie

462
00:16:32,480 --> 00:16:34,079
to basically launch

463
00:16:34,079 --> 00:16:36,480
my application using launch services and

464
00:16:36,480 --> 00:16:39,279
so i just added arguments for breaking

465
00:16:39,279 --> 00:16:40,880
the electron app

466
00:16:40,880 --> 00:16:43,040
or setting the or breaking and starting

467
00:16:43,040 --> 00:16:44,959
the debugger and then also passing in

468
00:16:44,959 --> 00:16:47,199
the electron code to hide the window

469
00:16:47,199 --> 00:16:49,199
so we also include the dild environment

470
00:16:49,199 --> 00:16:50,639
variables

471
00:16:50,639 --> 00:16:52,639
environment variable

472
00:16:52,639 --> 00:16:54,959
or i'm sorry the dild

473
00:16:54,959 --> 00:16:56,880
libraries environment variable and we

474
00:16:56,880 --> 00:16:58,800
also include the electron runners node

475
00:16:58,800 --> 00:17:01,199
environment variable so we pass those on

476
00:17:01,199 --> 00:17:03,920
to the ls open url with roles function

477
00:17:03,920 --> 00:17:07,438
and that executes our twitch app

478
00:17:08,480 --> 00:17:10,799
so i'll just run two quick demos showing

479
00:17:10,799 --> 00:17:14,119
both methods

480
00:17:29,919 --> 00:17:32,799
so the first one will be the one for

481
00:17:32,799 --> 00:17:34,080
submit job

482
00:17:34,080 --> 00:17:36,000
and basically i have a mythic server

483
00:17:36,000 --> 00:17:37,600
running in the background

484
00:17:37,600 --> 00:17:40,400
and i built payloads one poseidon and

485
00:17:40,400 --> 00:17:43,360
one for apfel to make a or establish a

486
00:17:43,360 --> 00:17:46,720
c2 connection when the payload executed

487
00:17:46,720 --> 00:17:48,160
so the first thing we'll do we'll open

488
00:17:48,160 --> 00:17:50,720
up the package in a suspicious package

489
00:17:50,720 --> 00:17:52,240
i'm sure most people are familiar with

490
00:17:52,240 --> 00:17:54,480
it but if not it's an awesome app to

491
00:17:54,480 --> 00:17:56,240
inspect the contents of package

492
00:17:56,240 --> 00:17:57,360
installers

493
00:17:57,360 --> 00:17:59,039
you can look at all the included files

494
00:17:59,039 --> 00:18:01,280
any scripts that are included as well

495
00:18:01,280 --> 00:18:03,919
so if we go to the all files tab

496
00:18:03,919 --> 00:18:05,200
we'll see that we're just copying a

497
00:18:05,200 --> 00:18:07,120
simple macro binary to the library

498
00:18:07,120 --> 00:18:08,720
folder and this binary is just a

499
00:18:08,720 --> 00:18:10,960
poseidon payload so once it's executed

500
00:18:10,960 --> 00:18:14,000
you'll see a new poseidon callback

501
00:18:14,000 --> 00:18:15,280
but yeah you can also look at the

502
00:18:15,280 --> 00:18:16,960
scripts tabs and see

503
00:18:16,960 --> 00:18:18,000
any scripts that are going to be

504
00:18:18,000 --> 00:18:20,799
executed as well

505
00:18:23,280 --> 00:18:26,240
so now we'll close the

506
00:18:26,240 --> 00:18:27,760
statistics package out and then we'll

507
00:18:27,760 --> 00:18:29,360
just double click on the submit job

508
00:18:29,360 --> 00:18:30,320
package

509
00:18:30,320 --> 00:18:32,320
so once you hit allow this is actually

510
00:18:32,320 --> 00:18:34,720
when your installer plug-in is loaded

511
00:18:34,720 --> 00:18:36,640
into that remote process

512
00:18:36,640 --> 00:18:39,600
so um just because you see that the

513
00:18:39,600 --> 00:18:42,240
second pane is for my custom plugin this

514
00:18:42,240 --> 00:18:44,799
is not when the code is executed so

515
00:18:44,799 --> 00:18:46,799
my code for submitting the job to launch

516
00:18:46,799 --> 00:18:49,600
d has already ran at this point

517
00:18:49,600 --> 00:18:52,080
so now once the payload is copied to

518
00:18:52,080 --> 00:18:54,840
disk you'll see it kicked off by launch

519
00:18:54,840 --> 00:18:57,840
d and give us a new callback

520
00:18:57,840 --> 00:18:58,960
so we're going to go ahead and type in

521
00:18:58,960 --> 00:19:00,480
our password

522
00:19:00,480 --> 00:19:02,320
once we hit enter it'll copy the payload

523
00:19:02,320 --> 00:19:04,240
file to that library folder and then

524
00:19:04,240 --> 00:19:07,919
we'll immediately get a new callback

525
00:19:08,960 --> 00:19:12,320
all right so let's submit job

526
00:19:12,799 --> 00:19:15,840
now we're going to do electron

527
00:19:15,840 --> 00:19:17,120
so pretty much the same thing with

528
00:19:17,120 --> 00:19:19,440
electron we can open it up in suspicious

529
00:19:19,440 --> 00:19:22,640
package and look at the contents

530
00:19:22,640 --> 00:19:24,400
you can see that it's going to copy the

531
00:19:24,400 --> 00:19:26,400
twitch app and you can note the size

532
00:19:26,400 --> 00:19:29,120
it's 387 meg so it's pretty large so

533
00:19:29,120 --> 00:19:30,960
that's why i have to work on the timing

534
00:19:30,960 --> 00:19:33,200
and executing the code in the background

535
00:19:33,200 --> 00:19:35,440
and sleeping and then it also copies a

536
00:19:35,440 --> 00:19:37,440
die lib to the library folder so you

537
00:19:37,440 --> 00:19:39,280
could include the dialog with your your

538
00:19:39,280 --> 00:19:41,120
app but in this case

539
00:19:41,120 --> 00:19:42,799
this is something that's already signed

540
00:19:42,799 --> 00:19:45,280
and notarized so we don't want to ruin

541
00:19:45,280 --> 00:19:48,000
that signature

542
00:19:49,760 --> 00:19:51,280
then we'll close that out then we'll

543
00:19:51,280 --> 00:19:54,320
double click on the electron or package

544
00:19:54,320 --> 00:19:55,760
and we're going to kind of speed through

545
00:19:55,760 --> 00:19:57,919
this because we want to make sure that

546
00:19:57,919 --> 00:20:00,720
our twitch application is copied to disk

547
00:20:00,720 --> 00:20:04,080
before my code executes

548
00:20:04,080 --> 00:20:06,400
so then once it copies the twitch app um

549
00:20:06,400 --> 00:20:07,919
it'll go ahead and call that launch

550
00:20:07,919 --> 00:20:10,320
services api and inject our library in

551
00:20:10,320 --> 00:20:11,919
there and uh run twitch in the

552
00:20:11,919 --> 00:20:12,960
background

553
00:20:12,960 --> 00:20:14,240
and so you can see at the bottom of the

554
00:20:14,240 --> 00:20:15,280
dock

555
00:20:15,280 --> 00:20:17,280
the twitch is actually not running so

556
00:20:17,280 --> 00:20:19,039
you don't see any windows pop up and

557
00:20:19,039 --> 00:20:21,440
there's no dock icon for twitch

558
00:20:21,440 --> 00:20:23,840
so we can open up task explorer and look

559
00:20:23,840 --> 00:20:25,120
at the twitch app

560
00:20:25,120 --> 00:20:27,280
and then search the dilips and see that

561
00:20:27,280 --> 00:20:29,360
our app fail payload is loaded into that

562
00:20:29,360 --> 00:20:32,360
process

563
00:20:34,040 --> 00:20:38,640
[Applause]

564
00:20:38,640 --> 00:20:40,640
all right

565
00:20:40,640 --> 00:20:42,400
so now we'll talk about

566
00:20:42,400 --> 00:20:46,159
esf and detection considerations

567
00:20:46,159 --> 00:20:47,760
so we all know endpoint the endpoint

568
00:20:47,760 --> 00:20:49,679
security framework allows vendors to tap

569
00:20:49,679 --> 00:20:52,799
into macros system events and subscribe

570
00:20:52,799 --> 00:20:55,280
to process events file i o

571
00:20:55,280 --> 00:20:57,600
module loads and library loads

572
00:20:57,600 --> 00:20:58,400
um

573
00:20:58,400 --> 00:21:00,240
and apple has effectively kicked all the

574
00:21:00,240 --> 00:21:02,640
vendors out of the kernel

575
00:21:02,640 --> 00:21:04,320
and so it kind of reduced some of the

576
00:21:04,320 --> 00:21:06,559
visibility but what's cool about it is

577
00:21:06,559 --> 00:21:08,880
is that developers can now get access to

578
00:21:08,880 --> 00:21:10,640
the same telemetry

579
00:21:10,640 --> 00:21:12,559
so that's why you saw a prevalence a

580
00:21:12,559 --> 00:21:14,159
bunch of tools patrick wordle came up

581
00:21:14,159 --> 00:21:16,320
with file monitor and process monitor

582
00:21:16,320 --> 00:21:17,600
super hacker steve came up with

583
00:21:17,600 --> 00:21:18,720
crescendo

584
00:21:18,720 --> 00:21:20,799
i worked on appmon which is

585
00:21:20,799 --> 00:21:23,200
based off of a lot of code in filemon

586
00:21:23,200 --> 00:21:25,760
and process monitor

587
00:21:25,760 --> 00:21:28,080
but yeah it was really neat so i do like

588
00:21:28,080 --> 00:21:29,679
the endpoint security framework there

589
00:21:29,679 --> 00:21:31,600
are some shortcomings but it's still a

590
00:21:31,600 --> 00:21:35,039
really useful framework for detection

591
00:21:35,039 --> 00:21:36,880
so first we'll talk about the submit job

592
00:21:36,880 --> 00:21:38,640
attack indicators

593
00:21:38,640 --> 00:21:40,640
this is an event that is common between

594
00:21:40,640 --> 00:21:42,480
both so i won't talk about it when it

595
00:21:42,480 --> 00:21:44,400
comes to electron but you're going to

596
00:21:44,400 --> 00:21:46,559
see an map event or a memory mapping

597
00:21:46,559 --> 00:21:49,200
event for our custom bundle inside of

598
00:21:49,200 --> 00:21:52,400
that installer remote plug-in service

599
00:21:52,400 --> 00:21:54,320
so that's just something to note

600
00:21:54,320 --> 00:21:55,840
it's probably going to be very difficult

601
00:21:55,840 --> 00:21:57,840
to build detection logic based on just

602
00:21:57,840 --> 00:21:59,600
this file path because it's always

603
00:21:59,600 --> 00:22:02,720
random so it'll never be the same

604
00:22:02,720 --> 00:22:05,120
so yeah

605
00:22:05,520 --> 00:22:07,840
and this is the basically process

606
00:22:07,840 --> 00:22:10,080
execution events from crescendo

607
00:22:10,080 --> 00:22:13,120
first we see that xpc proxy kicks off

608
00:22:13,120 --> 00:22:16,240
or calls my temporary service with the

609
00:22:16,240 --> 00:22:19,360
bundle id or label name for that service

610
00:22:19,360 --> 00:22:21,120
and then you see subsequently the

611
00:22:21,120 --> 00:22:22,240
payload gets

612
00:22:22,240 --> 00:22:23,280
kicked off

613
00:22:23,280 --> 00:22:25,840
one thing to note is that in esf

614
00:22:25,840 --> 00:22:27,440
it's kind of hard to tie in the true

615
00:22:27,440 --> 00:22:29,840
parent paid for processes i believe

616
00:22:29,840 --> 00:22:31,440
that's something that is coming down the

617
00:22:31,440 --> 00:22:32,799
line where you actually can pull the

618
00:22:32,799 --> 00:22:34,880
true parent but for right now it's still

619
00:22:34,880 --> 00:22:37,280
listed as pid 1 which is launch d so

620
00:22:37,280 --> 00:22:39,440
that makes it hard to really

621
00:22:39,440 --> 00:22:40,559
track down

622
00:22:40,559 --> 00:22:43,520
those relationships

623
00:22:44,799 --> 00:22:47,280
also you can use tools like launch koto

624
00:22:47,280 --> 00:22:49,360
to pull additional information about a

625
00:22:49,360 --> 00:22:51,039
process

626
00:22:51,039 --> 00:22:52,559
what kind of led me to there was looking

627
00:22:52,559 --> 00:22:55,760
at jaron bradley's research with trutree

628
00:22:55,760 --> 00:22:57,760
he did a lot of his research basically

629
00:22:57,760 --> 00:23:00,480
looking at the proc info command and all

630
00:23:00,480 --> 00:23:02,400
the information that it outputs

631
00:23:02,400 --> 00:23:04,480
one weird thing is that the responsible

632
00:23:04,480 --> 00:23:07,200
pid in this case was listed as the

633
00:23:07,200 --> 00:23:09,360
is itself so that kind of confused me

634
00:23:09,360 --> 00:23:10,640
and threw me for a loop i didn't

635
00:23:10,640 --> 00:23:13,120
understand why that was but luckily the

636
00:23:13,120 --> 00:23:14,880
path attribute pointed to the true

637
00:23:14,880 --> 00:23:16,799
parent which was the installer remote

638
00:23:16,799 --> 00:23:19,520
plug-in service and the proper pid

639
00:23:19,520 --> 00:23:21,200
but you know that makes it kind of

640
00:23:21,200 --> 00:23:23,200
difficult for analysts because this is

641
00:23:23,200 --> 00:23:24,880
not offered by the endpoint security

642
00:23:24,880 --> 00:23:26,640
framework you have to do some extra leg

643
00:23:26,640 --> 00:23:29,360
work to get this

644
00:23:30,799 --> 00:23:33,120
so this is the true tree output

645
00:23:33,120 --> 00:23:34,720
it's just showing that the true parent

646
00:23:34,720 --> 00:23:37,600
of our payload is the install remote

647
00:23:37,600 --> 00:23:40,399
plugin service

648
00:23:41,600 --> 00:23:43,520
now with the electron app kind of the

649
00:23:43,520 --> 00:23:46,000
same thing happens xvc proxy kicks off

650
00:23:46,000 --> 00:23:48,400
the twitch app with that special bundle

651
00:23:48,400 --> 00:23:49,600
id

652
00:23:49,600 --> 00:23:51,440
and then you see the process execution

653
00:23:51,440 --> 00:23:52,640
event

654
00:23:52,640 --> 00:23:54,320
now one thing i guess you can build

655
00:23:54,320 --> 00:23:56,240
detections for for this specific

656
00:23:56,240 --> 00:23:57,919
technique with electron apps is those

657
00:23:57,919 --> 00:24:00,960
command line arguments so seeing the

658
00:24:00,960 --> 00:24:03,360
the debugger flag or to the the flag to

659
00:24:03,360 --> 00:24:05,840
start the debugger and then also the

660
00:24:05,840 --> 00:24:08,080
arguments to hide the app

661
00:24:08,080 --> 00:24:10,159
electron apps are probably normally not

662
00:24:10,159 --> 00:24:12,000
started that way so that's definitely

663
00:24:12,000 --> 00:24:13,840
odd behavior and something you may be

664
00:24:13,840 --> 00:24:15,919
able to build detection logic for

665
00:24:15,919 --> 00:24:17,679
but i could easily use

666
00:24:17,679 --> 00:24:19,520
some other app that allows us to inject

667
00:24:19,520 --> 00:24:22,480
a library i know firefox is one

668
00:24:22,480 --> 00:24:24,720
reggie already talked about this but

669
00:24:24,720 --> 00:24:27,520
firefox actually uses the dild

670
00:24:27,520 --> 00:24:29,520
environment variable normally with that

671
00:24:29,520 --> 00:24:32,880
process to inject like a i guess like an

672
00:24:32,880 --> 00:24:34,960
interposed library with some plug-in

673
00:24:34,960 --> 00:24:36,559
host they have

674
00:24:36,559 --> 00:24:38,000
and so you might see some normal

675
00:24:38,000 --> 00:24:39,360
behavior with that but it's just

676
00:24:39,360 --> 00:24:43,039
something to know for detection logic

677
00:24:43,039 --> 00:24:45,360
and so this is the proc info information

678
00:24:45,360 --> 00:24:46,559
once again

679
00:24:46,559 --> 00:24:49,360
we see that this time the path actually

680
00:24:49,360 --> 00:24:51,360
points to running board d which is

681
00:24:51,360 --> 00:24:53,200
something kind of new to me

682
00:24:53,200 --> 00:24:54,720
i assumed that it was going to be launch

683
00:24:54,720 --> 00:24:57,600
d or s or the installer remote plugin

684
00:24:57,600 --> 00:25:00,000
service but i guess running board d also

685
00:25:00,000 --> 00:25:03,039
starts new applications as well

686
00:25:03,039 --> 00:25:04,320
also you can know in the environment

687
00:25:04,320 --> 00:25:06,640
variables that the dild insert libraries

688
00:25:06,640 --> 00:25:09,200
variable is there so it has a pretty

689
00:25:09,200 --> 00:25:12,559
neat way to pull out that information

690
00:25:12,559 --> 00:25:14,080
and maybe you can build some detection

691
00:25:14,080 --> 00:25:16,320
logic based on just that

692
00:25:16,320 --> 00:25:18,159
once again the responsible paid points

693
00:25:18,159 --> 00:25:20,720
itself so super confusing i don't know

694
00:25:20,720 --> 00:25:22,080
why that is and hopefully that's

695
00:25:22,080 --> 00:25:24,159
something that apple can rectify in the

696
00:25:24,159 --> 00:25:26,559
future

697
00:25:27,120 --> 00:25:29,679
and then once again the true tree output

698
00:25:29,679 --> 00:25:31,679
it points to running board d

699
00:25:31,679 --> 00:25:33,120
with the pid

700
00:25:33,120 --> 00:25:35,600
so that's the true parent of our twitch

701
00:25:35,600 --> 00:25:37,440
application which kind of makes sense

702
00:25:37,440 --> 00:25:38,960
since running board d

703
00:25:38,960 --> 00:25:40,880
normally starts applications when you

704
00:25:40,880 --> 00:25:43,760
double click on or use the open command

705
00:25:43,760 --> 00:25:46,400
of that nature

706
00:25:47,600 --> 00:25:49,200
all right that's pretty much it so thank

707
00:25:49,200 --> 00:25:51,039
you patrick for the process monitor and

708
00:25:51,039 --> 00:25:53,120
file monitor code jerome badly's

709
00:25:53,120 --> 00:25:56,000
research with trutree reggie with the

710
00:25:56,000 --> 00:25:57,440
api call

711
00:25:57,440 --> 00:25:59,120
jonathan levin for all his research and

712
00:25:59,120 --> 00:26:00,240
his training

713
00:26:00,240 --> 00:26:01,760
you can visit the github links for

714
00:26:01,760 --> 00:26:04,240
example code those are just two xcode

715
00:26:04,240 --> 00:26:05,279
projects

716
00:26:05,279 --> 00:26:07,480
as well but thank you

717
00:26:07,480 --> 00:26:16,709
[Applause]

718
00:26:18,000 --> 00:26:20,320
have you seen attackers abuse this these

719
00:26:20,320 --> 00:26:22,000
techniques or even

720
00:26:22,000 --> 00:26:23,200
show interest in that or you think

721
00:26:23,200 --> 00:26:24,000
that's something you'll see in your

722
00:26:24,000 --> 00:26:26,159
future or what are your thoughts on that

723
00:26:26,159 --> 00:26:27,520
we're actually talking about this at

724
00:26:27,520 --> 00:26:29,520
lunch um i don't think there's any

725
00:26:29,520 --> 00:26:31,840
attackers using installer plug-ins um at

726
00:26:31,840 --> 00:26:34,320
this time like i haven't seen anything

727
00:26:34,320 --> 00:26:36,240
mostly put because i guess the the old

728
00:26:36,240 --> 00:26:38,400
techniques still work so why why use new

729
00:26:38,400 --> 00:26:41,400
stuff

730
00:26:49,760 --> 00:26:52,879
why don't you have issues

731
00:26:59,039 --> 00:27:01,120
yeah so the two entitlements i talked

732
00:27:01,120 --> 00:27:03,760
about in that slide the

733
00:27:03,760 --> 00:27:07,039
allow dild or allow unsigned libraries i

734
00:27:07,039 --> 00:27:08,720
can't remember the exact name but that

735
00:27:08,720 --> 00:27:10,720
entitlement allows you to load unsigned

736
00:27:10,720 --> 00:27:13,840
libraries into that process and so that

737
00:27:13,840 --> 00:27:15,760
combined with the dilled

738
00:27:15,760 --> 00:27:17,840
entitlement allows me to inject unsigned

739
00:27:17,840 --> 00:27:21,840
libraries into that target target app

740
00:27:21,840 --> 00:27:24,399
yeah basically yeah and there's electron

741
00:27:24,399 --> 00:27:26,240
it's pretty common just because of the

742
00:27:26,240 --> 00:27:28,640
way the electron framework works you'll

743
00:27:28,640 --> 00:27:30,799
at least find

744
00:27:30,799 --> 00:27:33,600
the allow executable memory

745
00:27:33,600 --> 00:27:35,760
and the other entitlement but for most

746
00:27:35,760 --> 00:27:37,200
times you might find all four of those

747
00:27:37,200 --> 00:27:38,559
entitlements

748
00:27:38,559 --> 00:27:40,240
so yeah it's pretty common with electron

749
00:27:40,240 --> 00:27:42,559
apps

750
00:27:45,840 --> 00:27:47,600
all right thank you man we love electron

751
00:27:47,600 --> 00:27:50,450
apps huh

752
00:27:50,450 --> 00:27:55,630
[Applause]

