1
00:00:04,480 --> 00:00:07,359
all right so the last talk of today is

2
00:00:07,359 --> 00:00:10,400
going to be presented by andy grant of

3
00:00:10,400 --> 00:00:13,040
zoom he's going to be talking about tcc

4
00:00:13,040 --> 00:00:14,880
and some interesting vulnerabilities and

5
00:00:14,880 --> 00:00:16,720
bypasses in that all right yeah thank

6
00:00:16,720 --> 00:00:18,400
you

7
00:00:18,400 --> 00:00:20,720
so i'm going to talk about

8
00:00:20,720 --> 00:00:23,279
some tcc research that i did

9
00:00:23,279 --> 00:00:26,240
so back in 2019 i disclosed a series of

10
00:00:26,240 --> 00:00:28,800
security vulnerabilities within package

11
00:00:28,800 --> 00:00:30,720
installers to apple

12
00:00:30,720 --> 00:00:32,558
they allowed you to an unprivileged user

13
00:00:32,558 --> 00:00:34,800
to execute as root

14
00:00:34,800 --> 00:00:36,719
uh arbitrary code

15
00:00:36,719 --> 00:00:39,360
during the reporting with apple uh i

16
00:00:39,360 --> 00:00:41,200
explicitly stated that allowed you to

17
00:00:41,200 --> 00:00:44,160
execute as root and apple responded back

18
00:00:44,160 --> 00:00:47,360
with what's the impact yeah uh

19
00:00:47,360 --> 00:00:49,120
do i need to explain what root is to

20
00:00:49,120 --> 00:00:50,239
apple

21
00:00:50,239 --> 00:00:52,640
uh i quickly and hastily shot back a

22
00:00:52,640 --> 00:00:54,399
response of your route you can do

23
00:00:54,399 --> 00:00:56,160
anything you want including bypassing

24
00:00:56,160 --> 00:00:57,680
tcc

25
00:00:57,680 --> 00:01:01,039
then i kind of had that moment of maybe

26
00:01:01,039 --> 00:01:03,280
i spoke out of turn and i should

27
00:01:03,280 --> 00:01:05,760
probably make sure that's true and so i

28
00:01:05,760 --> 00:01:07,760
was eventually able to show apple that

29
00:01:07,760 --> 00:01:10,000
it was true that as root i could bypass

30
00:01:10,000 --> 00:01:14,000
tcc um back in early 2020 and now i get

31
00:01:14,000 --> 00:01:16,799
to share it all with you

32
00:01:16,799 --> 00:01:18,640
so i've been poking around computers and

33
00:01:18,640 --> 00:01:20,400
doing offensive things for over two

34
00:01:20,400 --> 00:01:23,119
decades i started out cheating

35
00:01:23,119 --> 00:01:25,520
at video games went and got a computer

36
00:01:25,520 --> 00:01:27,280
science degree at stanford university

37
00:01:27,280 --> 00:01:30,079
explicitly to become a better hacker i

38
00:01:30,079 --> 00:01:32,400
got to work side by side with some of

39
00:01:32,400 --> 00:01:34,880
the world's best in the industry at isec

40
00:01:34,880 --> 00:01:37,520
partners and ncc group and eventually

41
00:01:37,520 --> 00:01:39,680
now work at zoom where i'm building out

42
00:01:39,680 --> 00:01:43,119
the offensive security program

43
00:01:44,320 --> 00:01:47,040
along the way i managed to set american

44
00:01:47,040 --> 00:01:49,119
records and ended my swimming career

45
00:01:49,119 --> 00:01:52,000
ranked top 25 all-time for the u.s and

46
00:01:52,000 --> 00:01:54,320
according to playerwives.com

47
00:01:54,320 --> 00:01:55,840
you should all be very impressed with

48
00:01:55,840 --> 00:01:58,079
that except

49
00:01:58,079 --> 00:02:00,399
i married dana vollmer and proudly so i

50
00:02:00,399 --> 00:02:02,560
will be forever be known as the plus one

51
00:02:02,560 --> 00:02:05,800
to a five-time olympic gold medalist

52
00:02:05,800 --> 00:02:10,318
[Applause]

53
00:02:10,318 --> 00:02:12,239
so first i'm going to make sure we're

54
00:02:12,239 --> 00:02:13,680
all on the same page give a little

55
00:02:13,680 --> 00:02:16,879
background about mac os protection sip

56
00:02:16,879 --> 00:02:20,000
and tcc as the focus and then i'm going

57
00:02:20,000 --> 00:02:22,000
to walk through how i circumvented some

58
00:02:22,000 --> 00:02:24,560
of those restrictions and to wrap it all

59
00:02:24,560 --> 00:02:26,319
up i'll cover how

60
00:02:26,319 --> 00:02:28,319
you can use that same technique to get a

61
00:02:28,319 --> 00:02:32,480
free cloud hosted mac os vm

62
00:02:32,800 --> 00:02:34,720
so first the protections

63
00:02:34,720 --> 00:02:35,840
in unix

64
00:02:35,840 --> 00:02:37,920
operating systems security policies are

65
00:02:37,920 --> 00:02:39,440
enforced by discretionary access

66
00:02:39,440 --> 00:02:42,319
controls this allows users to override

67
00:02:42,319 --> 00:02:44,080
the security policies according to their

68
00:02:44,080 --> 00:02:46,720
preferences and as such root can do just

69
00:02:46,720 --> 00:02:48,720
about anything on the system

70
00:02:48,720 --> 00:02:50,400
apple has decided that this doesn't make

71
00:02:50,400 --> 00:02:52,879
for the best user experience and instead

72
00:02:52,879 --> 00:02:55,599
added mandatory access controls this

73
00:02:55,599 --> 00:02:58,080
allows for creating policies that cannot

74
00:02:58,080 --> 00:02:59,760
be overridden

75
00:02:59,760 --> 00:03:01,120
mandatory access controls aren't

76
00:03:01,120 --> 00:03:04,000
directly visible to the users but you

77
00:03:04,000 --> 00:03:05,519
have probably encountered them through

78
00:03:05,519 --> 00:03:06,800
many of their modern security

79
00:03:06,800 --> 00:03:08,800
protections via their sandboxing

80
00:03:08,800 --> 00:03:11,360
parental controls managed preferences

81
00:03:11,360 --> 00:03:14,400
and system integrity protection or sip

82
00:03:14,400 --> 00:03:16,560
since root on mac os is no longer root

83
00:03:16,560 --> 00:03:18,959
in the way we expect the term rootless

84
00:03:18,959 --> 00:03:20,800
has become

85
00:03:20,800 --> 00:03:23,840
used to describe modern mac os systems

86
00:03:23,840 --> 00:03:25,120
with the

87
00:03:25,120 --> 00:03:27,760
addition of the m1 chip apple has even

88
00:03:27,760 --> 00:03:29,440
brought over kernel integrity

89
00:03:29,440 --> 00:03:31,920
protections from the ios platform into

90
00:03:31,920 --> 00:03:34,879
mac os this provides hardware backed

91
00:03:34,879 --> 00:03:37,120
protections against modifying parts of

92
00:03:37,120 --> 00:03:40,799
the kernel during runtime

93
00:03:41,200 --> 00:03:44,319
in addition to a major focus on security

94
00:03:44,319 --> 00:03:47,519
apple has a lot of focus on privacy and

95
00:03:47,519 --> 00:03:50,080
a user's right to control their data

96
00:03:50,080 --> 00:03:52,000
this has led to the development of their

97
00:03:52,000 --> 00:03:53,840
trans uh transparency consent and

98
00:03:53,840 --> 00:03:56,640
control system or tcc

99
00:03:56,640 --> 00:03:58,640
this is the mac os version of windows

100
00:03:58,640 --> 00:04:01,200
uac or user account control and is

101
00:04:01,200 --> 00:04:04,239
responsible for the pop-ups and on

102
00:04:04,239 --> 00:04:06,319
behalf of apps and processes requesting

103
00:04:06,319 --> 00:04:08,080
permissions to your data and various

104
00:04:08,080 --> 00:04:10,000
resources

105
00:04:10,000 --> 00:04:12,239
it was first introduced in sierra and

106
00:04:12,239 --> 00:04:15,040
its scope was fairly limited and really

107
00:04:15,040 --> 00:04:17,839
focused in on system-wide access such as

108
00:04:17,839 --> 00:04:20,560
accessibility or full-disk access

109
00:04:20,560 --> 00:04:22,960
there was a fairly significant jump in

110
00:04:22,960 --> 00:04:24,639
tcc's coverage

111
00:04:24,639 --> 00:04:25,600
during

112
00:04:25,600 --> 00:04:27,680
around mojave where a user's personal

113
00:04:27,680 --> 00:04:28,639
data

114
00:04:28,639 --> 00:04:31,040
documents desktop calendar

115
00:04:31,040 --> 00:04:33,360
was added as well as access

116
00:04:33,360 --> 00:04:36,400
gating for camera and microphone

117
00:04:36,400 --> 00:04:39,199
one interesting tidbit i learned through

118
00:04:39,199 --> 00:04:41,600
this research is that a user's trash is

119
00:04:41,600 --> 00:04:44,560
even extra protected that even with sip

120
00:04:44,560 --> 00:04:46,400
disabled even with full disk access you

121
00:04:46,400 --> 00:04:48,720
cannot access content within a user's

122
00:04:48,720 --> 00:04:50,800
trash if you want to programmatically

123
00:04:50,800 --> 00:04:52,240
interact with that you have to remove it

124
00:04:52,240 --> 00:04:54,400
from the trash before interacting with

125
00:04:54,400 --> 00:04:55,600
it

126
00:04:55,600 --> 00:04:56,880
and the user doesn't even get a prompt

127
00:04:56,880 --> 00:05:00,639
there's no access you can grant

128
00:05:00,639 --> 00:05:02,479
as is often the case with apple's

129
00:05:02,479 --> 00:05:04,800
proprietary services there's not a lot

130
00:05:04,800 --> 00:05:07,600
of great documentation on it and there

131
00:05:07,600 --> 00:05:09,680
or any official tooling

132
00:05:09,680 --> 00:05:12,240
for example there's only one official

133
00:05:12,240 --> 00:05:15,840
command line tool for tcc tcc util and

134
00:05:15,840 --> 00:05:17,840
it only supports a single action that's

135
00:05:17,840 --> 00:05:20,800
to revoke or reset a permission granted

136
00:05:20,800 --> 00:05:23,680
in the tcc database

137
00:05:23,680 --> 00:05:27,600
tcc is is backed by sqlite databases

138
00:05:27,600 --> 00:05:29,120
one for the system

139
00:05:29,120 --> 00:05:31,360
protections such as full disk access

140
00:05:31,360 --> 00:05:33,600
accessibility and similar permissions

141
00:05:33,600 --> 00:05:36,639
and one per user for the user specific

142
00:05:36,639 --> 00:05:40,160
access such as documents and desktop

143
00:05:40,160 --> 00:05:41,840
being sqlite databases they were

144
00:05:41,840 --> 00:05:42,880
initially

145
00:05:42,880 --> 00:05:44,160
able to

146
00:05:44,160 --> 00:05:45,759
fairly easily programmatically interact

147
00:05:45,759 --> 00:05:48,160
with them just using sqlite

148
00:05:48,160 --> 00:05:49,919
and they had minimal

149
00:05:49,919 --> 00:05:52,880
permissions necessary to do that

150
00:05:52,880 --> 00:05:55,039
but this was infamously abused by

151
00:05:55,039 --> 00:05:57,360
dropbox and now access to the database

152
00:05:57,360 --> 00:05:59,440
requires full disk access permissions to

153
00:05:59,440 --> 00:06:00,639
begin with

154
00:06:00,639 --> 00:06:03,039
furthermore the system

155
00:06:03,039 --> 00:06:05,120
database is has the additional

156
00:06:05,120 --> 00:06:07,360
protections of being sip protected so

157
00:06:07,360 --> 00:06:09,199
even with full disk access you cannot

158
00:06:09,199 --> 00:06:13,440
write to it unless sip has been disabled

159
00:06:14,080 --> 00:06:16,240
for a while there was a commonly known

160
00:06:16,240 --> 00:06:19,440
way to circumvent tcc using ssh in order

161
00:06:19,440 --> 00:06:22,080
to facilitate remote login logically mac

162
00:06:22,080 --> 00:06:24,800
os automatically granted sshd or

163
00:06:24,800 --> 00:06:26,479
specifically

164
00:06:26,479 --> 00:06:29,440
ssh keywrapper full disk access when

165
00:06:29,440 --> 00:06:32,479
remote login was enabled via system

166
00:06:32,479 --> 00:06:34,479
preferences or the command line tool

167
00:06:34,479 --> 00:06:36,000
system setup

168
00:06:36,000 --> 00:06:37,840
if you're running as root or new an

169
00:06:37,840 --> 00:06:40,319
admins password you could enable remote

170
00:06:40,319 --> 00:06:41,840
management via

171
00:06:41,840 --> 00:06:44,639
this sshn to the local host and you

172
00:06:44,639 --> 00:06:47,600
instantly gained full disk access

173
00:06:47,600 --> 00:06:49,280
and this would allow you then to inject

174
00:06:49,280 --> 00:06:51,440
into the user-specific databases and

175
00:06:51,440 --> 00:06:54,479
gain more access or add access to other

176
00:06:54,479 --> 00:06:56,160
parts of the system

177
00:06:56,160 --> 00:06:57,120
however

178
00:06:57,120 --> 00:06:59,280
apple has grown wise to this and since

179
00:06:59,280 --> 00:07:01,919
catalina you have to have full disk

180
00:07:01,919 --> 00:07:04,240
permissions enable to call system setup

181
00:07:04,240 --> 00:07:06,720
to enable this ssh

182
00:07:06,720 --> 00:07:09,039
and so to gain your full disk access you

183
00:07:09,039 --> 00:07:10,400
have to already have had full disk

184
00:07:10,400 --> 00:07:12,639
access

185
00:07:12,639 --> 00:07:14,160
so let's talk about bypassing some of

186
00:07:14,160 --> 00:07:15,440
these

187
00:07:15,440 --> 00:07:17,120
before doing that let's see what it will

188
00:07:17,120 --> 00:07:19,680
actually look like when we achieve this

189
00:07:19,680 --> 00:07:21,840
so here we're running on big sur the

190
00:07:21,840 --> 00:07:23,360
latest version at the time and i'm going

191
00:07:23,360 --> 00:07:25,199
to demonstrate that terminal does not

192
00:07:25,199 --> 00:07:27,199
have access full disk access by trying

193
00:07:27,199 --> 00:07:29,360
to read from the system database

194
00:07:29,360 --> 00:07:31,759
i get denied i'll run through

195
00:07:31,759 --> 00:07:33,840
a simple package installer

196
00:07:33,840 --> 00:07:36,319
so it runs with root privileges because

197
00:07:36,319 --> 00:07:38,080
i typed in my admin

198
00:07:38,080 --> 00:07:40,960
when this installation completes

199
00:07:40,960 --> 00:07:42,720
we will then try that command again and

200
00:07:42,720 --> 00:07:44,639
we were able to read from the database

201
00:07:44,639 --> 00:07:46,960
so we now have terminal with full disk

202
00:07:46,960 --> 00:07:49,759
access with no user interaction besides

203
00:07:49,759 --> 00:07:52,240
running the installer

204
00:07:52,240 --> 00:07:54,080
so

205
00:07:54,080 --> 00:07:55,520
to set the scene

206
00:07:55,520 --> 00:07:57,199
even running as root you can't do

207
00:07:57,199 --> 00:07:59,120
everything you might want

208
00:07:59,120 --> 00:08:01,919
either because of sip or because of tcc

209
00:08:01,919 --> 00:08:03,680
you can't directly give yourself more

210
00:08:03,680 --> 00:08:05,840
permissions unless you already have

211
00:08:05,840 --> 00:08:07,680
fairly significant permissions like full

212
00:08:07,680 --> 00:08:09,199
disk access

213
00:08:09,199 --> 00:08:10,879
if you are lucky enough to find yourself

214
00:08:10,879 --> 00:08:12,800
on a mac with remote login already

215
00:08:12,800 --> 00:08:15,039
enabled and you know

216
00:08:15,039 --> 00:08:16,720
credentials to log in then you can use

217
00:08:16,720 --> 00:08:18,240
the ssh trick

218
00:08:18,240 --> 00:08:20,240
but otherwise we need a different way to

219
00:08:20,240 --> 00:08:22,560
get this tcc permission

220
00:08:22,560 --> 00:08:24,400
so this bypass begins with the

221
00:08:24,400 --> 00:08:26,160
assumption that you are running with

222
00:08:26,160 --> 00:08:28,160
root privileges such as

223
00:08:28,160 --> 00:08:30,400
installer but you otherwise

224
00:08:30,400 --> 00:08:32,880
don't know an admin credential or have a

225
00:08:32,880 --> 00:08:34,958
way to um to

226
00:08:34,958 --> 00:08:37,120
interact with full disk access so you're

227
00:08:37,120 --> 00:08:38,159
running his route but you don't have

228
00:08:38,159 --> 00:08:40,080
full device access or no credentials to

229
00:08:40,080 --> 00:08:42,240
the system

230
00:08:42,240 --> 00:08:44,240
management has shown me that okrs or

231
00:08:44,240 --> 00:08:46,480
objectives and key results drive success

232
00:08:46,480 --> 00:08:48,240
so we'll start out achieving this with

233
00:08:48,240 --> 00:08:50,959
an objective grant an application of our

234
00:08:50,959 --> 00:08:54,160
choosing tcc permission of our choosing

235
00:08:54,160 --> 00:08:56,480
what key results will help us get there

236
00:08:56,480 --> 00:08:58,640
well without a bug or exploitable

237
00:08:58,640 --> 00:09:00,160
vulnerability this is supposed to

238
00:09:00,160 --> 00:09:02,640
require an admin physically clicking

239
00:09:02,640 --> 00:09:05,279
buttons and thus we need to know an

240
00:09:05,279 --> 00:09:07,760
admins password and have access to the

241
00:09:07,760 --> 00:09:09,120
ui

242
00:09:09,120 --> 00:09:11,040
so that means remote management is

243
00:09:11,040 --> 00:09:14,000
enabled um because you know we want full

244
00:09:14,000 --> 00:09:16,399
disk access as our end goal here unless

245
00:09:16,399 --> 00:09:19,279
sip is disabled you know getting the ssh

246
00:09:19,279 --> 00:09:22,240
access um only gives us so much and we

247
00:09:22,240 --> 00:09:24,080
can't add other things to the full disk

248
00:09:24,080 --> 00:09:25,279
access

249
00:09:25,279 --> 00:09:26,560
obviously we're going to want to achieve

250
00:09:26,560 --> 00:09:28,720
this without any consent prompts or

251
00:09:28,720 --> 00:09:30,560
otherwise notifying the user of our

252
00:09:30,560 --> 00:09:33,120
activity and ideally our stretch goal

253
00:09:33,120 --> 00:09:36,000
here is to automate this whole thing

254
00:09:36,000 --> 00:09:38,480
since i'm a manager these days

255
00:09:38,480 --> 00:09:40,880
and no longer an actual hacker by trade

256
00:09:40,880 --> 00:09:43,120
i'll follow the rules and arguably

257
00:09:43,120 --> 00:09:45,120
achieve this via malicious compliance

258
00:09:45,120 --> 00:09:47,200
and maybe a potential oversight in the

259
00:09:47,200 --> 00:09:49,440
system but not exploiting any real

260
00:09:49,440 --> 00:09:51,839
vulnerabilities here

261
00:09:51,839 --> 00:09:54,640
so first we need an admin user well

262
00:09:54,640 --> 00:09:56,560
we're running as root so let's just

263
00:09:56,560 --> 00:09:59,040
create one the normal unix commands to

264
00:09:59,040 --> 00:10:02,079
do so aren't actually there on mac os

265
00:10:02,079 --> 00:10:04,480
you can try add user user add not

266
00:10:04,480 --> 00:10:07,680
present instead mac os has the system

267
00:10:07,680 --> 00:10:10,000
admin control command line tool which

268
00:10:10,000 --> 00:10:11,680
will successfully create us an admin

269
00:10:11,680 --> 00:10:14,480
user but it's kind of noisy it will it

270
00:10:14,480 --> 00:10:16,959
creates a user but it it fires up a

271
00:10:16,959 --> 00:10:19,200
consent prompt along the way asking for

272
00:10:19,200 --> 00:10:21,120
the user to grant control of the system

273
00:10:21,120 --> 00:10:22,720
to the process

274
00:10:22,720 --> 00:10:25,040
notably even if that permission is

275
00:10:25,040 --> 00:10:28,079
denied the admin user was still created

276
00:10:28,079 --> 00:10:30,000
but we alerted to the user and we're

277
00:10:30,000 --> 00:10:32,720
trying to avoid those consent prompts

278
00:10:32,720 --> 00:10:34,800
so instead we'll use the directory

279
00:10:34,800 --> 00:10:36,640
service command line tool

280
00:10:36,640 --> 00:10:38,720
so we'll create a user

281
00:10:38,720 --> 00:10:40,720
we'll give that user a password we'll

282
00:10:40,720 --> 00:10:42,640
accept the name for that user we'll

283
00:10:42,640 --> 00:10:44,160
create a home directory for the user

284
00:10:44,160 --> 00:10:46,399
we'll give them a shell we'll add the

285
00:10:46,399 --> 00:10:48,560
user id for them we'll give them a group

286
00:10:48,560 --> 00:10:51,200
id and choose the admin group id on mac

287
00:10:51,200 --> 00:10:53,600
os and then finally we'll add them

288
00:10:53,600 --> 00:10:56,240
formally to the admin group along the

289
00:10:56,240 --> 00:10:59,200
way there is no need for for full disk

290
00:10:59,200 --> 00:11:01,360
access while doing this and there was no

291
00:11:01,360 --> 00:11:03,040
consent prompts or anything that alerted

292
00:11:03,040 --> 00:11:05,360
the user to our activity

293
00:11:05,360 --> 00:11:07,200
now we started with the assumption that

294
00:11:07,200 --> 00:11:08,880
we're running as root and now we have an

295
00:11:08,880 --> 00:11:10,959
admin user so we didn't really gain a

296
00:11:10,959 --> 00:11:13,040
whole lot of privilege here unless we

297
00:11:13,040 --> 00:11:14,560
had a way to interact with the user

298
00:11:14,560 --> 00:11:16,399
interface now we have a password that we

299
00:11:16,399 --> 00:11:20,079
could type in for admin password prompts

300
00:11:20,079 --> 00:11:22,399
but we kind of just walked through that

301
00:11:22,399 --> 00:11:24,240
you have to have full disk access to be

302
00:11:24,240 --> 00:11:26,320
able to enable that at and so we're kind

303
00:11:26,320 --> 00:11:28,560
of in in this place of where do we go

304
00:11:28,560 --> 00:11:30,079
next

305
00:11:30,079 --> 00:11:32,160
well it actually turns out

306
00:11:32,160 --> 00:11:33,920
you need full disk access to enable

307
00:11:33,920 --> 00:11:36,240
remote login but you don't need full

308
00:11:36,240 --> 00:11:38,720
disk access to enable remote management

309
00:11:38,720 --> 00:11:40,800
or screen sharing

310
00:11:40,800 --> 00:11:42,399
you can do this via the kickstart

311
00:11:42,399 --> 00:11:44,800
command within the apple remote desktop

312
00:11:44,800 --> 00:11:46,880
ard agent

313
00:11:46,880 --> 00:11:49,600
and you can activate it for all

314
00:11:49,600 --> 00:11:51,680
enable screen sharing for all users on

315
00:11:51,680 --> 00:11:53,600
the system or if you wanted to be extra

316
00:11:53,600 --> 00:11:56,079
stealthy you could do it for just the

317
00:11:56,079 --> 00:11:58,079
newly created admin user

318
00:11:58,079 --> 00:12:00,880
again this had this did not require any

319
00:12:00,880 --> 00:12:03,279
full disk permissions and it did not

320
00:12:03,279 --> 00:12:07,120
require any consent prompts to the user

321
00:12:07,200 --> 00:12:08,079
well

322
00:12:08,079 --> 00:12:09,760
apparently apple doesn't think enabling

323
00:12:09,760 --> 00:12:12,240
remote access via the command line only

324
00:12:12,240 --> 00:12:14,560
is a great idea and it tells you this

325
00:12:14,560 --> 00:12:16,800
won't work you get this warning

326
00:12:16,800 --> 00:12:18,560
that it will it will only work if you

327
00:12:18,560 --> 00:12:21,040
enable it through system preferences

328
00:12:21,040 --> 00:12:23,440
fear not sometimes a warning is actually

329
00:12:23,440 --> 00:12:25,440
just a warning and

330
00:12:25,440 --> 00:12:27,120
and if you take one thing away from this

331
00:12:27,120 --> 00:12:29,120
is when you're hacking ignore the

332
00:12:29,120 --> 00:12:30,480
warnings

333
00:12:30,480 --> 00:12:32,480
hr disclaimer when you're managing don't

334
00:12:32,480 --> 00:12:35,440
ignore the warnings

335
00:12:36,560 --> 00:12:39,120
even with this warning being displayed

336
00:12:39,120 --> 00:12:42,160
running this command on mac os 1015

337
00:12:42,160 --> 00:12:44,639
catalina does in fact enable remote

338
00:12:44,639 --> 00:12:46,240
management with all the necessary

339
00:12:46,240 --> 00:12:48,720
permissions that you need to do the what

340
00:12:48,720 --> 00:12:51,040
we want connect remotely and and engage

341
00:12:51,040 --> 00:12:52,639
with the system

342
00:12:52,639 --> 00:12:55,920
however in mac os 11 or big sur this

343
00:12:55,920 --> 00:12:58,000
warning does mean something while

344
00:12:58,000 --> 00:13:00,959
running the command does uh um does

345
00:13:00,959 --> 00:13:02,480
start up the

346
00:13:02,480 --> 00:13:04,320
remote management services particularly

347
00:13:04,320 --> 00:13:06,720
the screen sharing agent it does open

348
00:13:06,720 --> 00:13:10,079
port 5900 and it is reflected within

349
00:13:10,079 --> 00:13:11,839
system preferences sharing you'll see

350
00:13:11,839 --> 00:13:14,079
the checkbox next to remote management

351
00:13:14,079 --> 00:13:16,639
however in big sur apple added just one

352
00:13:16,639 --> 00:13:18,880
more thing

353
00:13:18,880 --> 00:13:21,040
in big serve there are default deny

354
00:13:21,040 --> 00:13:23,200
entries within the system tcc database

355
00:13:23,200 --> 00:13:25,279
that deny the screen sharing agent the

356
00:13:25,279 --> 00:13:28,000
post event or accessibility equivalent

357
00:13:28,000 --> 00:13:30,320
and screen capture permissions

358
00:13:30,320 --> 00:13:32,320
when you enable remote management via

359
00:13:32,320 --> 00:13:35,440
system preferences tccd grants these

360
00:13:35,440 --> 00:13:37,680
permissions to the screen sharing agent

361
00:13:37,680 --> 00:13:39,360
but if you enable it through the command

362
00:13:39,360 --> 00:13:41,680
line no such activity happens and you

363
00:13:41,680 --> 00:13:44,079
have these deny entries

364
00:13:44,079 --> 00:13:46,240
without them your ports open the

365
00:13:46,240 --> 00:13:48,320
services are on you can still connect to

366
00:13:48,320 --> 00:13:50,320
the screen sharing screen sharing

367
00:13:50,320 --> 00:13:51,279
session

368
00:13:51,279 --> 00:13:52,800
but without the screen capture

369
00:13:52,800 --> 00:13:54,800
permission you get a black screen and

370
00:13:54,800 --> 00:13:56,959
without the post event permission your

371
00:13:56,959 --> 00:13:59,279
keyboard events are not affecting the

372
00:13:59,279 --> 00:14:02,720
remote system so at this point my tcc

373
00:14:02,720 --> 00:14:05,360
bypass works on catalina but not on big

374
00:14:05,360 --> 00:14:09,199
sur because of these deny entries

375
00:14:09,199 --> 00:14:10,639
well if these deny entries are getting

376
00:14:10,639 --> 00:14:13,279
in our way let's just get rid of them

377
00:14:13,279 --> 00:14:15,519
so we have this tcc util command we're

378
00:14:15,519 --> 00:14:17,279
running this route we can reset these

379
00:14:17,279 --> 00:14:19,279
permissions and remove the entries from

380
00:14:19,279 --> 00:14:21,600
the database so without these denies

381
00:14:21,600 --> 00:14:23,199
within the database

382
00:14:23,199 --> 00:14:25,760
our remote access is restored and we can

383
00:14:25,760 --> 00:14:27,360
proceed with connecting and granting our

384
00:14:27,360 --> 00:14:29,120
payload permissions through interacting

385
00:14:29,120 --> 00:14:30,560
with the ui

386
00:14:30,560 --> 00:14:32,480
so if there is a bug throughout this

387
00:14:32,480 --> 00:14:35,440
whole process it's probably this

388
00:14:35,440 --> 00:14:37,600
the screen sharing agent

389
00:14:37,600 --> 00:14:40,399
for a screen sharing agent tcc is acting

390
00:14:40,399 --> 00:14:42,720
as a deny list instead of an allow list

391
00:14:42,720 --> 00:14:44,480
like we come to expect it for everything

392
00:14:44,480 --> 00:14:45,839
else

393
00:14:45,839 --> 00:14:48,079
the screen sharing agent appears to have

394
00:14:48,079 --> 00:14:50,399
post event or and screen capture

395
00:14:50,399 --> 00:14:51,519
permissions

396
00:14:51,519 --> 00:14:54,639
unless it's explicitly denied

397
00:14:54,639 --> 00:14:56,079
in the end

398
00:14:56,079 --> 00:14:58,320
i actually only need post event uh

399
00:14:58,320 --> 00:15:00,000
permissions as i found a way to do this

400
00:15:00,000 --> 00:15:02,240
all blind without being able to see the

401
00:15:02,240 --> 00:15:03,440
the ui

402
00:15:03,440 --> 00:15:05,680
and so we can leave screen capture alone

403
00:15:05,680 --> 00:15:08,320
because the way in which tcc util works

404
00:15:08,320 --> 00:15:10,320
the bundle id for screen sharing agent

405
00:15:10,320 --> 00:15:12,079
isn't recognized by apple as a valid

406
00:15:12,079 --> 00:15:14,639
bundle id and so i can't reset just

407
00:15:14,639 --> 00:15:16,480
those permissions i would blow away all

408
00:15:16,480 --> 00:15:17,519
the screen

409
00:15:17,519 --> 00:15:19,040
capture permissions for any app

410
00:15:19,040 --> 00:15:21,120
installed which could be disruptive for

411
00:15:21,120 --> 00:15:23,120
if you have a zoom application installed

412
00:15:23,120 --> 00:15:24,560
and you try to do screen sharing through

413
00:15:24,560 --> 00:15:27,040
that

414
00:15:27,040 --> 00:15:27,760
so

415
00:15:27,760 --> 00:15:30,000
at this point we've satisfied all of our

416
00:15:30,000 --> 00:15:32,320
key result we use the directory service

417
00:15:32,320 --> 00:15:34,079
command line tool to create an admin

418
00:15:34,079 --> 00:15:35,920
user and we now know admin creds on the

419
00:15:35,920 --> 00:15:39,040
system we then use the remote desktop uh

420
00:15:39,040 --> 00:15:40,959
the remote apple remote desktop

421
00:15:40,959 --> 00:15:43,040
kickstart command to enable remote

422
00:15:43,040 --> 00:15:44,160
management

423
00:15:44,160 --> 00:15:46,240
and then we we also reset the

424
00:15:46,240 --> 00:15:47,519
permissions

425
00:15:47,519 --> 00:15:49,279
for the post event

426
00:15:49,279 --> 00:15:51,279
we did this all without any consent

427
00:15:51,279 --> 00:15:53,839
prompts to the user and without any

428
00:15:53,839 --> 00:15:55,920
additional permissions

429
00:15:55,920 --> 00:15:58,399
now to make this a proper bypass i want

430
00:15:58,399 --> 00:16:00,639
to i wanted to automate this as we saw

431
00:16:00,639 --> 00:16:01,920
within the demo

432
00:16:01,920 --> 00:16:04,399
the automation actually happens via

433
00:16:04,399 --> 00:16:06,399
script to send keyboard events over the

434
00:16:06,399 --> 00:16:09,199
avnc connection and the ability to

435
00:16:09,199 --> 00:16:11,680
navigate the the modals via keyboard so

436
00:16:11,680 --> 00:16:13,199
i don't even need to use the mouse or

437
00:16:13,199 --> 00:16:16,320
hat be able to see the ui in any way

438
00:16:16,320 --> 00:16:17,920
thanks to a suggestion of one of my team

439
00:16:17,920 --> 00:16:20,000
members we even do this without any

440
00:16:20,000 --> 00:16:22,480
network activity by using the loopback

441
00:16:22,480 --> 00:16:24,560
interface allowing this to fit neatly

442
00:16:24,560 --> 00:16:25,519
with

443
00:16:25,519 --> 00:16:29,839
inside of purely local install package

444
00:16:29,839 --> 00:16:32,240
since we created a new user

445
00:16:32,240 --> 00:16:34,240
to do this the automation of the remote

446
00:16:34,240 --> 00:16:36,399
access was initially a bit tricky

447
00:16:36,399 --> 00:16:38,639
as the user hadn't gone through the

448
00:16:38,639 --> 00:16:39,519
setup

449
00:16:39,519 --> 00:16:42,000
agent this is you know enabling

450
00:16:42,000 --> 00:16:44,639
analytics icloud do you want to enable

451
00:16:44,639 --> 00:16:47,759
siri do you want light or dark mode etc

452
00:16:47,759 --> 00:16:49,920
to help with this i added the ability to

453
00:16:49,920 --> 00:16:52,560
skip all of that setup flow

454
00:16:52,560 --> 00:16:54,399
so when you connect you automatically

455
00:16:54,399 --> 00:16:56,000
end up just right at the desktop and

456
00:16:56,000 --> 00:16:56,959
don't have to do any of that

457
00:16:56,959 --> 00:16:59,440
configuration there may be a cleaner way

458
00:16:59,440 --> 00:17:02,320
to do this but for now i do it by just

459
00:17:02,320 --> 00:17:04,559
creating the user's directories all the

460
00:17:04,559 --> 00:17:06,640
way through to preferences

461
00:17:06,640 --> 00:17:08,000
making sure the user owns those

462
00:17:08,000 --> 00:17:10,079
directories since i created them as root

463
00:17:10,079 --> 00:17:12,640
uh logging in through an interactive

464
00:17:12,640 --> 00:17:15,039
shell as that user let it run off in the

465
00:17:15,039 --> 00:17:17,199
background so i can keep going and then

466
00:17:17,199 --> 00:17:19,679
writing a few dozen entries into its

467
00:17:19,679 --> 00:17:22,880
defaults for the setup agent the setup

468
00:17:22,880 --> 00:17:25,520
assistant um this says like i've already

469
00:17:25,520 --> 00:17:27,280
selected whether i want siri to run i've

470
00:17:27,280 --> 00:17:30,400
already chosen um my my light dark mode

471
00:17:30,400 --> 00:17:33,120
and such

472
00:17:33,120 --> 00:17:35,280
so so now we've walked through that

473
00:17:35,280 --> 00:17:36,960
we're really just automating the ui so

474
00:17:36,960 --> 00:17:38,720
let's see what what that looks like here

475
00:17:38,720 --> 00:17:40,960
so on the right hand side we have the

476
00:17:40,960 --> 00:17:43,280
exploit and the demo we ran and on the

477
00:17:43,280 --> 00:17:45,360
left hand side i'm going to connect to

478
00:17:45,360 --> 00:17:47,679
that system and then hands-off keyboard

479
00:17:47,679 --> 00:17:49,440
watch what that automation script is

480
00:17:49,440 --> 00:17:51,360
doing in the background so we'll connect

481
00:17:51,360 --> 00:17:53,760
as the newly created user and then just

482
00:17:53,760 --> 00:17:56,000
watch what what's going on here

483
00:17:56,000 --> 00:17:58,080
we're first going to open up

484
00:17:58,080 --> 00:17:59,039
the

485
00:17:59,039 --> 00:18:00,880
finder to go into the terminal

486
00:18:00,880 --> 00:18:03,520
application load up terminal application

487
00:18:03,520 --> 00:18:05,120
and then launch

488
00:18:05,120 --> 00:18:07,760
a file i created to jump us directly to

489
00:18:07,760 --> 00:18:09,440
the privacy panel within system

490
00:18:09,440 --> 00:18:11,679
preferences easing the number of button

491
00:18:11,679 --> 00:18:13,520
clicks here we're going to tab around

492
00:18:13,520 --> 00:18:15,760
until we get to the lock icon type in

493
00:18:15,760 --> 00:18:18,320
our user pass our admin password here

494
00:18:18,320 --> 00:18:20,640
tab around until we get to the plus icon

495
00:18:20,640 --> 00:18:21,600
and then we're going to select the

496
00:18:21,600 --> 00:18:23,679
application we want terminal in this

497
00:18:23,679 --> 00:18:26,240
example so terminal was open so we asked

498
00:18:26,240 --> 00:18:27,440
if we wanted and there we have it

499
00:18:27,440 --> 00:18:29,919
terminal added to full disk permissions

500
00:18:29,919 --> 00:18:31,679
um and that's all running by this

501
00:18:31,679 --> 00:18:33,600
installer on the right-hand side the

502
00:18:33,600 --> 00:18:35,840
installer then goes through and logs us

503
00:18:35,840 --> 00:18:38,240
out kills that user and and resets the

504
00:18:38,240 --> 00:18:40,480
thing and we now have full disk access

505
00:18:40,480 --> 00:18:43,840
for that terminal application

506
00:18:45,320 --> 00:18:51,440
[Applause]

507
00:18:51,440 --> 00:18:52,960
so as

508
00:18:52,960 --> 00:18:54,720
all of you all here know by being at

509
00:18:54,720 --> 00:18:57,679
this conference mac os hacking is pretty

510
00:18:57,679 --> 00:18:59,840
awesome but only if you have a mac to

511
00:18:59,840 --> 00:19:01,360
hack on

512
00:19:01,360 --> 00:19:03,280
if you don't have one

513
00:19:03,280 --> 00:19:04,960
they're kind of expensive to obtain you

514
00:19:04,960 --> 00:19:06,960
can go buy hardware but apple's hardware

515
00:19:06,960 --> 00:19:09,760
is fairly expensive and the cloud-hosted

516
00:19:09,760 --> 00:19:12,400
offerings through aws or mac stadium or

517
00:19:12,400 --> 00:19:14,480
similar are pretty costly for just

518
00:19:14,480 --> 00:19:17,120
playing around with

519
00:19:17,120 --> 00:19:18,880
well we're in luck

520
00:19:18,880 --> 00:19:21,440
github actually provides free mac os and

521
00:19:21,440 --> 00:19:23,520
windows and ubuntu environments for

522
00:19:23,520 --> 00:19:26,160
running what are called github actions

523
00:19:26,160 --> 00:19:28,160
at the moment big sur has been moved

524
00:19:28,160 --> 00:19:30,160
into a private preview because the

525
00:19:30,160 --> 00:19:32,240
demand for it was fairly high but you

526
00:19:32,240 --> 00:19:34,640
can still get a catalina vm

527
00:19:34,640 --> 00:19:36,480
now the systems aren't the most powerful

528
00:19:36,480 --> 00:19:38,640
but they do have 64 gigabytes of ram

529
00:19:38,640 --> 00:19:40,559
which isn't too shabby and they come

530
00:19:40,559 --> 00:19:42,160
really loaded from a developer's

531
00:19:42,160 --> 00:19:44,720
perspective with the most common package

532
00:19:44,720 --> 00:19:46,960
managers like homebrew a plethora of

533
00:19:46,960 --> 00:19:49,039
programming languages pre-installed

534
00:19:49,039 --> 00:19:52,720
basically every xcode and sdk from the

535
00:19:52,720 --> 00:19:54,559
past couple years

536
00:19:54,559 --> 00:19:56,559
and it's completely free if your action

537
00:19:56,559 --> 00:19:59,360
is for a public repository and it's time

538
00:19:59,360 --> 00:20:01,760
limited if it's a private or enterprise

539
00:20:01,760 --> 00:20:04,320
repository

540
00:20:04,320 --> 00:20:07,440
so here's an example of um of a github

541
00:20:07,440 --> 00:20:09,760
action workflow it's a yaml file that

542
00:20:09,760 --> 00:20:12,080
defines the workflow name in this case

543
00:20:12,080 --> 00:20:13,760
mac vm for me

544
00:20:13,760 --> 00:20:14,480
it

545
00:20:14,480 --> 00:20:16,559
says that i'm going to use the bash

546
00:20:16,559 --> 00:20:19,280
shell to execute my action within and

547
00:20:19,280 --> 00:20:21,039
then i specify that i want the latest

548
00:20:21,039 --> 00:20:22,159
macos

549
00:20:22,159 --> 00:20:24,480
operating system to run on

550
00:20:24,480 --> 00:20:26,880
and then i say

551
00:20:26,880 --> 00:20:28,320
the command we're going to run is

552
00:20:28,320 --> 00:20:30,960
sourcing in a shell file and so that

553
00:20:30,960 --> 00:20:32,840
shell file will have the commands i want

554
00:20:32,840 --> 00:20:35,840
executed the caveat here though is

555
00:20:35,840 --> 00:20:37,919
this is a headless system it's not meant

556
00:20:37,919 --> 00:20:40,400
to be interactive it just executes the

557
00:20:40,400 --> 00:20:42,240
the defined action and then you can

558
00:20:42,240 --> 00:20:44,640
watch the console output for standard um

559
00:20:44,640 --> 00:20:47,120
standard and standard um out and error

560
00:20:47,120 --> 00:20:48,400
messages

561
00:20:48,400 --> 00:20:49,760
and so it's kind of like running a

562
00:20:49,760 --> 00:20:51,919
jenkins job or similar

563
00:20:51,919 --> 00:20:55,679
you're not getting that ui interaction

564
00:20:55,679 --> 00:20:57,840
so we'll just add that interaction we'll

565
00:20:57,840 --> 00:20:59,520
we'll create an interactive environment

566
00:20:59,520 --> 00:21:01,600
here so we create an action that

567
00:21:01,600 --> 00:21:03,120
leverages the steps that i walk through

568
00:21:03,120 --> 00:21:05,919
for the tcc bypass um

569
00:21:05,919 --> 00:21:08,320
but add in a reverse proxy we don't want

570
00:21:08,320 --> 00:21:10,320
to automate the interaction we want to

571
00:21:10,320 --> 00:21:12,159
we want to be able to connect to it so

572
00:21:12,159 --> 00:21:13,679
first we go through and create the admin

573
00:21:13,679 --> 00:21:15,280
user so we have credentials to the

574
00:21:15,280 --> 00:21:18,000
system we enable that remote management

575
00:21:18,000 --> 00:21:19,919
and set up a reverse tunnel so we can

576
00:21:19,919 --> 00:21:21,919
connect to it this will also serve as

577
00:21:21,919 --> 00:21:23,919
our blocking process within our workflow

578
00:21:23,919 --> 00:21:26,320
so the vm stays alive until that that

579
00:21:26,320 --> 00:21:28,320
reverse tunnel exits and the script is

580
00:21:28,320 --> 00:21:29,760
allowed to finish

581
00:21:29,760 --> 00:21:31,360
now you can now you can go and connect

582
00:21:31,360 --> 00:21:34,080
to your reverse tunnel using vnc and you

583
00:21:34,080 --> 00:21:36,960
have your very own mac os playground

584
00:21:36,960 --> 00:21:39,039
and this is what it'll look like so here

585
00:21:39,039 --> 00:21:41,120
we're at github we're in kick off our

586
00:21:41,120 --> 00:21:42,880
workflow

587
00:21:42,880 --> 00:21:44,720
and then once this workflow starts we'll

588
00:21:44,720 --> 00:21:46,880
click into it go to the console output

589
00:21:46,880 --> 00:21:49,280
so that githubs provides my script will

590
00:21:49,280 --> 00:21:50,240
ultimately

591
00:21:50,240 --> 00:21:52,000
print out the endpoint of that reverse

592
00:21:52,000 --> 00:21:54,960
tunnel i use ngrop to simplify my demo

593
00:21:54,960 --> 00:21:57,919
here copy and paste and point out switch

594
00:21:57,919 --> 00:22:00,320
to our vnc client

595
00:22:00,320 --> 00:22:03,520
log in as our newly created admin user

596
00:22:03,520 --> 00:22:05,760
and then we'll find ourselves within um

597
00:22:05,760 --> 00:22:07,840
a cloud hosted

598
00:22:07,840 --> 00:22:09,200
vm that

599
00:22:09,200 --> 00:22:11,760
i'm not paying for

600
00:22:11,760 --> 00:22:13,280
and so there's just evidence of all

601
00:22:13,280 --> 00:22:15,600
those uh xcode versions and everything

602
00:22:15,600 --> 00:22:17,919
on there and powershell and whatever

603
00:22:17,919 --> 00:22:20,640
else you may want

604
00:22:22,240 --> 00:22:22,960
so

605
00:22:22,960 --> 00:22:23,679
to

606
00:22:23,679 --> 00:22:25,760
recap here we started as root but we

607
00:22:25,760 --> 00:22:28,480
didn't have access to an admin user or

608
00:22:28,480 --> 00:22:31,360
the ui we created an admin user and used

609
00:22:31,360 --> 00:22:33,520
the cli to enable remote management

610
00:22:33,520 --> 00:22:35,919
while also resetting the tcc permissions

611
00:22:35,919 --> 00:22:37,679
that would deny the screen sharing agent

612
00:22:37,679 --> 00:22:40,240
the ability to control the system at

613
00:22:40,240 --> 00:22:42,240
this point you could open up a reverse

614
00:22:42,240 --> 00:22:43,840
shell and manually interact with the

615
00:22:43,840 --> 00:22:46,000
system including granting anything you

616
00:22:46,000 --> 00:22:48,080
want tcc permissions

617
00:22:48,080 --> 00:22:50,720
but to make this a full proper bypass we

618
00:22:50,720 --> 00:22:52,320
automated it

619
00:22:52,320 --> 00:22:55,200
using a vnc automation script we connect

620
00:22:55,200 --> 00:22:57,039
to the screen chair via the local host

621
00:22:57,039 --> 00:22:58,000
so we don't have to worry about their

622
00:22:58,000 --> 00:22:59,520
firewall we don't have to worry about

623
00:22:59,520 --> 00:23:01,919
network activity or monitoring and we

624
00:23:01,919 --> 00:23:04,240
log in as the new admin user

625
00:23:04,240 --> 00:23:06,159
the script mimics the keyboard events

626
00:23:06,159 --> 00:23:08,720
that you would use as a manual user to

627
00:23:08,720 --> 00:23:10,640
open up system preferences go to the

628
00:23:10,640 --> 00:23:13,919
privacy panel and unlock the the admin

629
00:23:13,919 --> 00:23:16,000
panel

630
00:23:16,000 --> 00:23:17,600
once you're there you can then select

631
00:23:17,600 --> 00:23:19,919
whatever payload you want for whatever

632
00:23:19,919 --> 00:23:22,720
permissions you want in our demo here we

633
00:23:22,720 --> 00:23:24,880
chose to give the terminal application

634
00:23:24,880 --> 00:23:27,840
full disk access

635
00:23:29,679 --> 00:23:30,880
and that

636
00:23:30,880 --> 00:23:32,880
is the walkthrough of

637
00:23:32,880 --> 00:23:36,240
why root even just once can bypass tcc

638
00:23:36,240 --> 00:23:39,520
permissions on a mac os

639
00:23:42,280 --> 00:23:48,840
[Applause]

640
00:23:48,840 --> 00:23:52,000
system you

