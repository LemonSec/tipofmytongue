1
00:00:04,560 --> 00:00:07,359
so now we have ron who's going to give a

2
00:00:07,359 --> 00:00:09,440
very interesting talk i'm very intrigued

3
00:00:09,440 --> 00:00:11,599
about this uh about a really neat bug in

4
00:00:11,599 --> 00:00:13,759
the launch services subsystem so let's

5
00:00:13,759 --> 00:00:16,540
give ron a round of applause

6
00:00:16,540 --> 00:00:18,320
[Applause]

7
00:00:18,320 --> 00:00:20,720
all right hey everyone thanks for coming

8
00:00:20,720 --> 00:00:22,080
i'm ron

9
00:00:22,080 --> 00:00:23,279
um

10
00:00:23,279 --> 00:00:27,279
i do product security at octa that's me

11
00:00:27,279 --> 00:00:29,039
and today we're going to be talking

12
00:00:29,039 --> 00:00:30,240
about a fun little bug in launch

13
00:00:30,240 --> 00:00:32,479
services that let an attacker escape

14
00:00:32,479 --> 00:00:34,880
this app sandbox in multiple different

15
00:00:34,880 --> 00:00:37,040
ways because we're talking about the app

16
00:00:37,040 --> 00:00:38,879
sandbox we are going to give you a bit

17
00:00:38,879 --> 00:00:40,719
of a refresher on its restrictions what

18
00:00:40,719 --> 00:00:42,559
it is how it works

19
00:00:42,559 --> 00:00:43,760
then we're also going to give you some

20
00:00:43,760 --> 00:00:45,360
context for the bug

21
00:00:45,360 --> 00:00:47,120
by way of reversing the relevant

22
00:00:47,120 --> 00:00:48,800
structures and flows and then we're

23
00:00:48,800 --> 00:00:49,920
going to get into the guts of the

24
00:00:49,920 --> 00:00:51,039
presentation where we're going to

25
00:00:51,039 --> 00:00:54,000
exploit this one issue in five different

26
00:00:54,000 --> 00:00:54,960
ways

27
00:00:54,960 --> 00:00:57,280
afterwards we're going to speak a little

28
00:00:57,280 --> 00:00:59,359
bit about how apple decided to patch

29
00:00:59,359 --> 00:01:01,440
this

30
00:01:01,440 --> 00:01:03,600
and also give you some idea about

31
00:01:03,600 --> 00:01:06,159
variants that will invariably crop up

32
00:01:06,159 --> 00:01:08,320
and then finally just to be responsible

33
00:01:08,320 --> 00:01:10,159
we're going to be oh man

34
00:01:10,159 --> 00:01:11,439
we're going to be talking about how you

35
00:01:11,439 --> 00:01:12,799
can defend yourself via tools and

36
00:01:12,799 --> 00:01:16,720
heuristics so let's get into it

37
00:01:16,720 --> 00:01:19,040
so the app sandbox the app sandbox is a

38
00:01:19,040 --> 00:01:20,560
security measure that's designed to

39
00:01:20,560 --> 00:01:23,280
mitigate damage in two main situations

40
00:01:23,280 --> 00:01:24,960
either of which have to do with the mac

41
00:01:24,960 --> 00:01:28,000
app store so the first of which is a

42
00:01:28,000 --> 00:01:30,400
user installing a malicious app from the

43
00:01:30,400 --> 00:01:32,799
mac app store and the second is an app

44
00:01:32,799 --> 00:01:35,600
becoming compromised after the fact so

45
00:01:35,600 --> 00:01:37,280
you can see there in the little graphic

46
00:01:37,280 --> 00:01:39,840
of apple's credit to them that without

47
00:01:39,840 --> 00:01:41,680
the sandbox an app otherwise has

48
00:01:41,680 --> 00:01:43,520
unfettered access to user data and

49
00:01:43,520 --> 00:01:46,000
system resources note of course with

50
00:01:46,000 --> 00:01:47,520
privacy protections there's a bit more

51
00:01:47,520 --> 00:01:50,000
nuance to that and with the app sandbox

52
00:01:50,000 --> 00:01:51,600
you're you're kind of confined to your

53
00:01:51,600 --> 00:01:53,520
little sand lot that's allocated for

54
00:01:53,520 --> 00:01:54,399
your app

55
00:01:54,399 --> 00:01:55,680
one other thing i want to mention and

56
00:01:55,680 --> 00:01:58,159
it'll come up later is office macros run

57
00:01:58,159 --> 00:02:00,560
in the app sandbox

58
00:02:00,560 --> 00:02:02,799
now let's get into it further so

59
00:02:02,799 --> 00:02:04,320
concretely you're allowed to access the

60
00:02:04,320 --> 00:02:06,079
file system in your container under

61
00:02:06,079 --> 00:02:08,000
tilde library containers followed by

62
00:02:08,000 --> 00:02:09,840
your bundle identifier

63
00:02:09,840 --> 00:02:11,280
you're allowed communication with a

64
00:02:11,280 --> 00:02:13,520
limited set of mock services

65
00:02:13,520 --> 00:02:15,200
you're allowed to start processes with a

66
00:02:15,200 --> 00:02:17,360
posix spawn fork exec and its task but

67
00:02:17,360 --> 00:02:19,200
the caveat here being that child

68
00:02:19,200 --> 00:02:21,360
processes will inherit the app sandbox

69
00:02:21,360 --> 00:02:22,959
and thus all of its restrictions so you

70
00:02:22,959 --> 00:02:24,640
can't just execute something and that's

71
00:02:24,640 --> 00:02:26,000
an escape

72
00:02:26,000 --> 00:02:27,840
now the one thing it's not so much a

73
00:02:27,840 --> 00:02:29,760
secret as it is not really talked about

74
00:02:29,760 --> 00:02:31,519
it's the ability to start processes

75
00:02:31,519 --> 00:02:32,879
through launch services which is what

76
00:02:32,879 --> 00:02:35,360
we're going to focus on today

77
00:02:35,360 --> 00:02:36,640
if you want to find a foolish list of

78
00:02:36,640 --> 00:02:37,920
exceptions on what you're allowed to do

79
00:02:37,920 --> 00:02:40,080
in the application sandbox there's the

80
00:02:40,080 --> 00:02:41,920
seatbelt profile it just defines

81
00:02:41,920 --> 00:02:43,760
restrictions

82
00:02:43,760 --> 00:02:46,400
okay so app sandbox and launch services

83
00:02:46,400 --> 00:02:48,560
ostensibly this capability is intended

84
00:02:48,560 --> 00:02:51,200
for launching helper apps which are just

85
00:02:51,200 --> 00:02:53,519
apps inside your app at least that's the

86
00:02:53,519 --> 00:02:55,680
only mention of it in the app sandbox

87
00:02:55,680 --> 00:02:58,000
guide and as you might intuit already

88
00:02:58,000 --> 00:03:00,480
launch services is responsible for

89
00:03:00,480 --> 00:03:02,959
launching applications opening files

90
00:03:02,959 --> 00:03:04,560
that's what it does

91
00:03:04,560 --> 00:03:06,720
it's explicitly allowed in the seatbelt

92
00:03:06,720 --> 00:03:09,040
profile via these two lines the first of

93
00:03:09,040 --> 00:03:10,959
which is a mock lookup on the quarantine

94
00:03:10,959 --> 00:03:13,760
resolver service and the second of which

95
00:03:13,760 --> 00:03:16,560
is ls open

96
00:03:16,560 --> 00:03:18,480
the xpc service is implemented in the

97
00:03:18,480 --> 00:03:20,720
core services ui agent which already had

98
00:03:20,720 --> 00:03:22,959
a feature in the last presentation

99
00:03:22,959 --> 00:03:25,200
so let's take a closer look at that

100
00:03:25,200 --> 00:03:27,440
um sidenote this agent does a lot of

101
00:03:27,440 --> 00:03:29,680
stuff the service is called quarantine

102
00:03:29,680 --> 00:03:31,440
resolver it does stuff related to that

103
00:03:31,440 --> 00:03:34,000
it shows prompts it's you know many

104
00:03:34,000 --> 00:03:35,920
tricks scott knight has a great post

105
00:03:35,920 --> 00:03:37,440
which i linked to he reverses all the

106
00:03:37,440 --> 00:03:39,040
various message handlers but the one

107
00:03:39,040 --> 00:03:40,640
we're going to talk about today is the

108
00:03:40,640 --> 00:03:43,040
csui ls open handler and this one

109
00:03:43,040 --> 00:03:44,799
essentially just acts as a launch d

110
00:03:44,799 --> 00:03:47,599
proxy so how it works when your sandbox

111
00:03:47,599 --> 00:03:50,720
app calls into an api like open url

112
00:03:50,720 --> 00:03:52,080
open url is going to call into launch

113
00:03:52,080 --> 00:03:53,599
services it's going to put together the

114
00:03:53,599 --> 00:03:55,040
required data and it's going to send it

115
00:03:55,040 --> 00:03:57,439
over to the core services ui agent then

116
00:03:57,439 --> 00:03:58,959
the core services ui agent is going to

117
00:03:58,959 --> 00:04:00,799
put together an rbs launch request and

118
00:04:00,799 --> 00:04:02,799
send that to running board d which is

119
00:04:02,799 --> 00:04:04,400
new in big sur before it would go

120
00:04:04,400 --> 00:04:06,400
directly to just launch d but now

121
00:04:06,400 --> 00:04:07,920
running board d is going to submit that

122
00:04:07,920 --> 00:04:09,599
launch d job

123
00:04:09,599 --> 00:04:11,200
and launch d will finally launch the

124
00:04:11,200 --> 00:04:13,439
specified application now two things i

125
00:04:13,439 --> 00:04:15,200
want to highlight here before we go

126
00:04:15,200 --> 00:04:17,680
forward the first is that you can launch

127
00:04:17,680 --> 00:04:20,000
another app from within the app sandbox

128
00:04:20,000 --> 00:04:21,839
but you can't provide it any arguments

129
00:04:21,839 --> 00:04:23,840
you can't pass any sort of input to it

130
00:04:23,840 --> 00:04:25,199
you can just launch it it'll just be

131
00:04:25,199 --> 00:04:27,600
there and the second of which unlike an

132
00:04:27,600 --> 00:04:29,919
api like posix spawn when you launch an

133
00:04:29,919 --> 00:04:31,919
app this way it's not going to inherit

134
00:04:31,919 --> 00:04:34,479
the app sandbox so that's a really

135
00:04:34,479 --> 00:04:36,080
interesting one to look at if our goal

136
00:04:36,080 --> 00:04:38,479
here is to escape

137
00:04:38,479 --> 00:04:39,919
okay so let's take a closer look at the

138
00:04:39,919 --> 00:04:41,440
input provided

139
00:04:41,440 --> 00:04:44,000
it's a serialized ls remote open open

140
00:04:44,000 --> 00:04:46,080
call structure i've picked apart the

141
00:04:46,080 --> 00:04:47,759
relevant bits here you can see it has an

142
00:04:47,759 --> 00:04:50,479
ivor called in inputs inputs looks like

143
00:04:50,479 --> 00:04:53,120
this it takes an ns array of in urls to

144
00:04:53,120 --> 00:04:55,120
open as well as in-app params in-app

145
00:04:55,120 --> 00:04:56,639
params has the following structure

146
00:04:56,639 --> 00:04:58,080
there's an ns dictionary called

147
00:04:58,080 --> 00:05:00,800
environment hint hint wink wink this is

148
00:05:00,800 --> 00:05:01,919
connected to the title of the

149
00:05:01,919 --> 00:05:04,000
presentation and an nsurl called

150
00:05:04,000 --> 00:05:06,160
application url

151
00:05:06,160 --> 00:05:08,560
a quick side note on sort of how i

152
00:05:08,560 --> 00:05:10,560
recover these structures if anybody's

153
00:05:10,560 --> 00:05:12,639
taking a look at the dyld shared cache

154
00:05:12,639 --> 00:05:15,360
in big sur you probably noticed a lot of

155
00:05:15,360 --> 00:05:17,199
authenticated pointers and unparsed

156
00:05:17,199 --> 00:05:19,520
addresses and class dump just you know

157
00:05:19,520 --> 00:05:21,600
crops its pants and

158
00:05:21,600 --> 00:05:23,759
the assembly all around just looks very

159
00:05:23,759 --> 00:05:25,759
ugly so i i wrote a little hopper

160
00:05:25,759 --> 00:05:27,520
plug-in that glues together class dump

161
00:05:27,520 --> 00:05:29,600
and some private apis and recovers

162
00:05:29,600 --> 00:05:31,759
something like a human-readable

163
00:05:31,759 --> 00:05:33,120
representation essentially you could

164
00:05:33,120 --> 00:05:34,479
start reading the code again so that's

165
00:05:34,479 --> 00:05:35,919
open source you could use it if you'd

166
00:05:35,919 --> 00:05:37,199
like

167
00:05:37,199 --> 00:05:38,720
all right now let's go back to that

168
00:05:38,720 --> 00:05:40,880
input this time it's gonna the relevant

169
00:05:40,880 --> 00:05:42,639
part is gonna be highlighted and let's

170
00:05:42,639 --> 00:05:44,880
take a step back so i mentioned that in

171
00:05:44,880 --> 00:05:46,800
the app sandbox you can launch another

172
00:05:46,800 --> 00:05:48,639
app but you can't pass any arguments to

173
00:05:48,639 --> 00:05:50,720
it there's no arguments ivar or anything

174
00:05:50,720 --> 00:05:52,880
like that so what is the environment

175
00:05:52,880 --> 00:05:55,120
ivar doing there i find that especially

176
00:05:55,120 --> 00:05:57,600
weird i don't know about you and

177
00:05:57,600 --> 00:05:59,199
i mean i assume that like okay maybe

178
00:05:59,199 --> 00:06:00,720
that would just be ignored later down

179
00:06:00,720 --> 00:06:02,160
the stack you know later on down the

180
00:06:02,160 --> 00:06:04,240
line but it isn't and that's the root

181
00:06:04,240 --> 00:06:05,199
cause of the bug we're going to be

182
00:06:05,199 --> 00:06:07,199
talking about today that a sandbox

183
00:06:07,199 --> 00:06:08,639
application can launch other

184
00:06:08,639 --> 00:06:10,800
applications outside of the sandbox and

185
00:06:10,800 --> 00:06:12,880
control their environment variables now

186
00:06:12,880 --> 00:06:14,560
this is a really interesting primitive

187
00:06:14,560 --> 00:06:15,440
and

188
00:06:15,440 --> 00:06:16,720
at first i wasn't sure if this was

189
00:06:16,720 --> 00:06:18,319
exploitable i assumed oh apple clearly

190
00:06:18,319 --> 00:06:20,160
had thought of this but i'll show you in

191
00:06:20,160 --> 00:06:21,360
just a sec

192
00:06:21,360 --> 00:06:23,680
so triggered this the hard way it's not

193
00:06:23,680 --> 00:06:25,759
really that hard but you'll see why i'm

194
00:06:25,759 --> 00:06:27,280
going this hard relative to the other

195
00:06:27,280 --> 00:06:28,880
stuff you extract the relevant

196
00:06:28,880 --> 00:06:31,199
structures say through class dump dsc

197
00:06:31,199 --> 00:06:33,360
tool whatever you will write your xpc

198
00:06:33,360 --> 00:06:35,600
client set that environment ivor to the

199
00:06:35,600 --> 00:06:37,199
environment variables of your choice so

200
00:06:37,199 --> 00:06:39,199
just an ns dictionary in this case we

201
00:06:39,199 --> 00:06:41,360
set food to bar and then go ahead send

202
00:06:41,360 --> 00:06:42,880
it to the quarantine resolver service

203
00:06:42,880 --> 00:06:44,880
the core services ui agent is going to

204
00:06:44,880 --> 00:06:46,479
launch the app outside of the sandbox

205
00:06:46,479 --> 00:06:47,919
and it's going to have a controlled

206
00:06:47,919 --> 00:06:49,039
environment

207
00:06:49,039 --> 00:06:50,960
but it gets even easier and you could

208
00:06:50,960 --> 00:06:53,520
just use the api in this case if we

209
00:06:53,520 --> 00:06:55,360
instantiate ns workspace open

210
00:06:55,360 --> 00:06:57,759
configuration we set the ns

211
00:06:57,759 --> 00:07:00,319
we set the proper environment property

212
00:07:00,319 --> 00:07:02,880
to that same ns dictionary food to bar

213
00:07:02,880 --> 00:07:04,720
we'll pass that to open url and it's

214
00:07:04,720 --> 00:07:06,800
going to launch safari with a controlled

215
00:07:06,800 --> 00:07:08,960
environment surely apple couldn't have

216
00:07:08,960 --> 00:07:10,960
overlooked that right and if you go take

217
00:07:10,960 --> 00:07:12,720
a look at the documentation you'll see

218
00:07:12,720 --> 00:07:15,120
this case is explicitly called out it

219
00:07:15,120 --> 00:07:17,520
says if the calling process is sandboxed

220
00:07:17,520 --> 00:07:19,360
the system ignores the value of this

221
00:07:19,360 --> 00:07:21,680
property now we're about 10 months since

222
00:07:21,680 --> 00:07:23,599
i first reported this issue and there's

223
00:07:23,599 --> 00:07:25,680
four subsequent reports i keep calling

224
00:07:25,680 --> 00:07:27,759
the documentation out as this is the

225
00:07:27,759 --> 00:07:29,919
expected behavior the observed behavior

226
00:07:29,919 --> 00:07:32,000
is that the system does not ignore the

227
00:07:32,000 --> 00:07:35,039
value of this property and it remains

228
00:07:35,039 --> 00:07:37,039
one potential explanation for why this

229
00:07:37,039 --> 00:07:38,720
is it's a new feature in big sur and

230
00:07:38,720 --> 00:07:40,319
that's the inheritance of environment

231
00:07:40,319 --> 00:07:42,479
variables through launch services so

232
00:07:42,479 --> 00:07:44,160
here i have a little snippet of pseudo

233
00:07:44,160 --> 00:07:46,800
code into how this is implemented

234
00:07:46,800 --> 00:07:48,560
essentially a launch services client

235
00:07:48,560 --> 00:07:50,639
that wants to launch another app it's

236
00:07:50,639 --> 00:07:52,400
going to collect the environment in the

237
00:07:52,400 --> 00:07:54,160
client and then try and set that in the

238
00:07:54,160 --> 00:07:55,680
launched application pretty

239
00:07:55,680 --> 00:07:57,199
straightforward to mimic you know

240
00:07:57,199 --> 00:07:59,680
ordinary process execution behavior but

241
00:07:59,680 --> 00:08:01,520
there's one thing here it also does some

242
00:08:01,520 --> 00:08:03,440
sandbox checking you can see it checks

243
00:08:03,440 --> 00:08:05,759
that if the client is sandboxed and it

244
00:08:05,759 --> 00:08:08,560
has the variables home tempd or cfx user

245
00:08:08,560 --> 00:08:10,479
home set it's going to continue it's

246
00:08:10,479 --> 00:08:12,160
going to ignore them but i've said the

247
00:08:12,160 --> 00:08:14,000
magic word already and that's precisely

248
00:08:14,000 --> 00:08:15,759
the problem with this and that this is

249
00:08:15,759 --> 00:08:17,840
client-side validation and we'll abuse

250
00:08:17,840 --> 00:08:19,840
this in just a moment

251
00:08:19,840 --> 00:08:21,599
okay now let's get into the actual fun

252
00:08:21,599 --> 00:08:23,840
stuff so initial report we can control

253
00:08:23,840 --> 00:08:25,680
environment variables my first thought

254
00:08:25,680 --> 00:08:28,319
was dyld insert libraries hell yeah

255
00:08:28,319 --> 00:08:30,240
let's point this to a dialep of our

256
00:08:30,240 --> 00:08:31,840
choice and then just load that outside

257
00:08:31,840 --> 00:08:33,760
the sandbox easy peasy for those that

258
00:08:33,760 --> 00:08:35,519
don't know this is similar to like ld

259
00:08:35,519 --> 00:08:38,000
preload you just point this to a path to

260
00:08:38,000 --> 00:08:39,599
a dye web and that should be loaded when

261
00:08:39,599 --> 00:08:41,039
dyld

262
00:08:41,039 --> 00:08:42,799
and the process start

263
00:08:42,799 --> 00:08:44,320
but we have one major restriction and

264
00:08:44,320 --> 00:08:46,320
that's in apple mobile file integrity

265
00:08:46,320 --> 00:08:49,600
there's a policy that makes dyld

266
00:08:49,600 --> 00:08:52,080
variables ignored on apple binaries so

267
00:08:52,080 --> 00:08:53,440
you can't just set this environment

268
00:08:53,440 --> 00:08:55,920
variable on something like photos and

269
00:08:55,920 --> 00:08:58,160
then launch it and then have a good fun

270
00:08:58,160 --> 00:09:00,160
time it's not going to work like that

271
00:09:00,160 --> 00:09:01,839
instead i found another target it's a

272
00:09:01,839 --> 00:09:03,600
script editor template called coco

273
00:09:03,600 --> 00:09:05,680
applet it's available on default

274
00:09:05,680 --> 00:09:07,519
installations of mac os so we don't have

275
00:09:07,519 --> 00:09:09,440
to deal with anything like a quarantine

276
00:09:09,440 --> 00:09:11,200
x attribute

277
00:09:11,200 --> 00:09:13,040
it's unsigned so it's not technically an

278
00:09:13,040 --> 00:09:15,680
apple binary but most importantly it's

279
00:09:15,680 --> 00:09:17,279
the perfect host app for the exploit

280
00:09:17,279 --> 00:09:19,519
because it runs outside the sandbox so

281
00:09:19,519 --> 00:09:21,279
this is relatively straightforward how

282
00:09:21,279 --> 00:09:22,320
it's going to look is something like

283
00:09:22,320 --> 00:09:25,360
this i hope the graphic is big enough

284
00:09:25,360 --> 00:09:27,040
we're just going to point dyld insert

285
00:09:27,040 --> 00:09:29,200
libraries to a bundle die lib inside of

286
00:09:29,200 --> 00:09:30,959
our application remember this is from

287
00:09:30,959 --> 00:09:32,880
the perspective at least in this case of

288
00:09:32,880 --> 00:09:34,880
like a malicious mac app store app we're

289
00:09:34,880 --> 00:09:36,080
going gonna put it under frameworks like

290
00:09:36,080 --> 00:09:38,320
many libraries are nothing too special

291
00:09:38,320 --> 00:09:39,839
there we're gonna launch cocoa applet

292
00:09:39,839 --> 00:09:41,360
through the front door through launch

293
00:09:41,360 --> 00:09:43,279
services once again nothing out of the

294
00:09:43,279 --> 00:09:45,360
ordinary and then coco applet is gonna

295
00:09:45,360 --> 00:09:47,600
load with our set environment variable

296
00:09:47,600 --> 00:09:49,760
and dyld is gonna load the die lib

297
00:09:49,760 --> 00:09:51,920
outside of the sandbox okay i was so

298
00:09:51,920 --> 00:09:53,360
proud of myself i thought this was

299
00:09:53,360 --> 00:09:55,360
amazing and then i went and i tried it

300
00:09:55,360 --> 00:09:57,839
on big sur and then big sur

301
00:09:57,839 --> 00:09:59,839
the first issue i ran into was new

302
00:09:59,839 --> 00:10:01,920
signing and notarization requirements on

303
00:10:01,920 --> 00:10:04,399
arm 64 binaries but that's easy enough

304
00:10:04,399 --> 00:10:05,839
to bypass you could just change the

305
00:10:05,839 --> 00:10:07,519
architecture and the launch request but

306
00:10:07,519 --> 00:10:09,360
then another thing i noticed was that

307
00:10:09,360 --> 00:10:11,760
coco applet popped the first launch

308
00:10:11,760 --> 00:10:13,279
prompt it said are you sure you want to

309
00:10:13,279 --> 00:10:15,279
open coco applet we didn't sign it and

310
00:10:15,279 --> 00:10:17,839
then i was like damn because what that

311
00:10:17,839 --> 00:10:20,320
made it was requiring in user

312
00:10:20,320 --> 00:10:22,720
interaction so now we know the user is

313
00:10:22,720 --> 00:10:24,000
going to click through the prompt anyway

314
00:10:24,000 --> 00:10:26,240
but ideally there's no prompt at all in

315
00:10:26,240 --> 00:10:27,760
the first place

316
00:10:27,760 --> 00:10:28,560
so

317
00:10:28,560 --> 00:10:30,560
kind of lousy but apple thought like

318
00:10:30,560 --> 00:10:32,399
fine we'll fix it it's weird behavior

319
00:10:32,399 --> 00:10:35,120
they patched it in 11.4 they now check

320
00:10:35,120 --> 00:10:37,279
if a variable you want to set has dyld

321
00:10:37,279 --> 00:10:40,000
prefix and if it does it's just ignored

322
00:10:40,000 --> 00:10:41,120
it's not sent along in the launch

323
00:10:41,120 --> 00:10:43,120
request and that's what the input looks

324
00:10:43,120 --> 00:10:46,079
like in the console

325
00:10:46,079 --> 00:10:48,319
break

326
00:10:49,440 --> 00:10:50,720
okay so

327
00:10:50,720 --> 00:10:52,880
let's go back to that requirement

328
00:10:52,880 --> 00:10:54,640
there's this interaction requirement i

329
00:10:54,640 --> 00:10:55,839
mean there's there's an interaction

330
00:10:55,839 --> 00:10:57,120
requirement here in this exploit and

331
00:10:57,120 --> 00:10:58,880
that makes it sort of lousy let's let's

332
00:10:58,880 --> 00:11:00,800
get rid of it properly

333
00:11:00,800 --> 00:11:02,000
and we're going to do that through this

334
00:11:02,000 --> 00:11:03,440
very funky environment variable and

335
00:11:03,440 --> 00:11:04,959
there are two parts here let's break it

336
00:11:04,959 --> 00:11:06,720
apart so the first part the double

337
00:11:06,720 --> 00:11:09,360
underscore xpc prefix if you set

338
00:11:09,360 --> 00:11:11,360
environment variable prefix with double

339
00:11:11,360 --> 00:11:14,079
underscore xpc on an app and that app

340
00:11:14,079 --> 00:11:17,200
launches an xpc service lib xpc is going

341
00:11:17,200 --> 00:11:19,279
to strip the prefix and set the rest of

342
00:11:19,279 --> 00:11:21,600
the variable on the started service so

343
00:11:21,600 --> 00:11:23,920
this is a way to start an arb

344
00:11:23,920 --> 00:11:26,480
set an arbitrary environment variable on

345
00:11:26,480 --> 00:11:29,040
the service of an app and now the second

346
00:11:29,040 --> 00:11:30,880
part our target for this one is going to

347
00:11:30,880 --> 00:11:33,120
be music.app which has a service called

348
00:11:33,120 --> 00:11:35,040
visualizer service and visualizer

349
00:11:35,040 --> 00:11:37,519
service loads plugins from tilde library

350
00:11:37,519 --> 00:11:40,320
itunes itunes plugins now how is this

351
00:11:40,320 --> 00:11:43,519
uri resolved it's built with ns search

352
00:11:43,519 --> 00:11:45,440
path from directories and domains the

353
00:11:45,440 --> 00:11:47,680
second argument is passed ns user domain

354
00:11:47,680 --> 00:11:49,600
mask and when that argument is passed

355
00:11:49,600 --> 00:11:51,040
it's going to call into ns home

356
00:11:51,040 --> 00:11:53,839
directory to expand the tilde

357
00:11:53,839 --> 00:11:56,000
an ns home directory has a fast path

358
00:11:56,000 --> 00:11:57,920
where it just reads the value of cfx

359
00:11:57,920 --> 00:11:59,600
user home now this might all start

360
00:11:59,600 --> 00:12:01,120
coming together

361
00:12:01,120 --> 00:12:03,200
here's the flow let's go over it and our

362
00:12:03,200 --> 00:12:05,680
goal here is to load a malicious plugin

363
00:12:05,680 --> 00:12:07,760
once again within our app here's how

364
00:12:07,760 --> 00:12:09,839
it's going to work so step number one

365
00:12:09,839 --> 00:12:12,720
we're going to set xpc cfx user home to

366
00:12:12,720 --> 00:12:14,639
our app sandbox container we have

367
00:12:14,639 --> 00:12:16,880
rewrite access within the container in

368
00:12:16,880 --> 00:12:18,800
that in that folder we can start to

369
00:12:18,800 --> 00:12:20,480
recreate the directory structure that

370
00:12:20,480 --> 00:12:22,959
the service expects and we'll do that

371
00:12:22,959 --> 00:12:25,120
but one last part in creating that

372
00:12:25,120 --> 00:12:26,639
directory structure we're going to sim

373
00:12:26,639 --> 00:12:29,200
link app resources to itunes plugins so

374
00:12:29,200 --> 00:12:31,279
that we don't have to copy the plugin

375
00:12:31,279 --> 00:12:33,440
from inside the app to the container

376
00:12:33,440 --> 00:12:34,399
because that's going to add the

377
00:12:34,399 --> 00:12:36,240
quarantine x attribute to it and it's

378
00:12:36,240 --> 00:12:37,920
going to not it's going to fail to load

379
00:12:37,920 --> 00:12:39,839
essentially so we do this symlink trick

380
00:12:39,839 --> 00:12:41,760
to build a directory structure have this

381
00:12:41,760 --> 00:12:43,440
plugin available

382
00:12:43,440 --> 00:12:44,880
and then we're just going to

383
00:12:44,880 --> 00:12:46,320
once again launch it through the front

384
00:12:46,320 --> 00:12:48,240
door we're going to launch music.app

385
00:12:48,240 --> 00:12:50,240
music.app is going to start its xpc

386
00:12:50,240 --> 00:12:52,560
service visualizer service through xpc

387
00:12:52,560 --> 00:12:55,040
connection create at which point libx pc

388
00:12:55,040 --> 00:12:57,279
is going to strip the prefix set cf

389
00:12:57,279 --> 00:12:58,720
fixed user home

390
00:12:58,720 --> 00:12:59,519
to

391
00:12:59,519 --> 00:13:01,839
on on that service and then

392
00:13:01,839 --> 00:13:04,320
and then when the service tries to

393
00:13:04,320 --> 00:13:06,160
resolve the uri it's going to point to

394
00:13:06,160 --> 00:13:08,160
inside the container at which point the

395
00:13:08,160 --> 00:13:09,600
sim link is going to be traversed and

396
00:13:09,600 --> 00:13:11,519
that's going to point to inside the app

397
00:13:11,519 --> 00:13:13,600
and then this time we probably have a no

398
00:13:13,600 --> 00:13:17,880
interaction sandbox escape

399
00:13:20,000 --> 00:13:22,320
okay but still something's nagging me

400
00:13:22,320 --> 00:13:23,760
and that's the requirement to bundle

401
00:13:23,760 --> 00:13:25,519
something with the app you know i figure

402
00:13:25,519 --> 00:13:27,680
like if i put something in my app and

403
00:13:27,680 --> 00:13:29,920
it's it's an itunes plugin i i would i

404
00:13:29,920 --> 00:13:31,440
would really hope that app store view

405
00:13:31,440 --> 00:13:32,639
would probably have some sort of

406
00:13:32,639 --> 00:13:34,880
heuristic and flag that or you know

407
00:13:34,880 --> 00:13:36,399
trigger manual review or something so

408
00:13:36,399 --> 00:13:38,639
can we remove that requirement the one

409
00:13:38,639 --> 00:13:40,240
where we have to bundle something inside

410
00:13:40,240 --> 00:13:41,120
it

411
00:13:41,120 --> 00:13:44,480
and we're going to do that through home

412
00:13:45,279 --> 00:13:47,040
so remember i mentioned that big sur

413
00:13:47,040 --> 00:13:48,800
feature there was some validation done

414
00:13:48,800 --> 00:13:50,959
of home temp dear cf fixed user home and

415
00:13:50,959 --> 00:13:53,120
i mentioned it was done client side it's

416
00:13:53,120 --> 00:13:54,800
time to bypass so we're just going to

417
00:13:54,800 --> 00:13:57,040
send the data directly to this to the

418
00:13:57,040 --> 00:13:58,240
service we're just going to go around

419
00:13:58,240 --> 00:13:59,760
launch services framework and send it

420
00:13:59,760 --> 00:14:01,600
directly to the endpoint and our target

421
00:14:01,600 --> 00:14:04,000
for this one is going to be terminal.app

422
00:14:04,000 --> 00:14:05,440
here's the flow let's step through it

423
00:14:05,440 --> 00:14:07,600
and understand how this works

424
00:14:07,600 --> 00:14:09,519
so step number one we're going to write

425
00:14:09,519 --> 00:14:11,360
out a malicious dot profile in our

426
00:14:11,360 --> 00:14:13,279
sandboxes container we can do this

427
00:14:13,279 --> 00:14:15,040
because we have read write access and in

428
00:14:15,040 --> 00:14:16,639
dot profile there's going to be

429
00:14:16,639 --> 00:14:18,079
arbitrary shell commands it's going to

430
00:14:18,079 --> 00:14:19,680
be the jump off point for our second

431
00:14:19,680 --> 00:14:22,480
stage or whatever we want

432
00:14:22,480 --> 00:14:24,480
then we're going to build the dictionary

433
00:14:24,480 --> 00:14:26,480
and then set it in the environment ivar

434
00:14:26,480 --> 00:14:27,760
we're going to point home to the

435
00:14:27,760 --> 00:14:29,920
sandboxes container and then we're going

436
00:14:29,920 --> 00:14:32,320
to send the xbc message directly to the

437
00:14:32,320 --> 00:14:34,079
service going to bypass that launch

438
00:14:34,079 --> 00:14:36,160
services client side validation home

439
00:14:36,160 --> 00:14:37,760
will not be ignored and then when

440
00:14:37,760 --> 00:14:39,920
launchd launches terminal.app outside of

441
00:14:39,920 --> 00:14:42,320
the sandbox terminal.app will in turn

442
00:14:42,320 --> 00:14:44,000
launch a login shell with that

443
00:14:44,000 --> 00:14:45,760
controlled value of home and the login

444
00:14:45,760 --> 00:14:48,079
shell is going to execute home forward

445
00:14:48,079 --> 00:14:50,639
slash dot profile i think a bit of an

446
00:14:50,639 --> 00:14:53,839
improvement over the last one

447
00:14:54,160 --> 00:14:57,120
so this was patched recently in 11.6 as

448
00:14:57,120 --> 00:15:00,320
a silent patch uh i i asked apple why i

449
00:15:00,320 --> 00:15:02,399
wasn't credited and then i'm sort of

450
00:15:02,399 --> 00:15:03,199
being

451
00:15:03,199 --> 00:15:04,720
gaslighted they're they're telling me it

452
00:15:04,720 --> 00:15:07,600
was fixed in 11.5 even though 11.5 was

453
00:15:07,600 --> 00:15:09,199
the tested vulnerable version in my

454
00:15:09,199 --> 00:15:13,600
initial report but anyways yeah

455
00:15:13,600 --> 00:15:17,360
so uh they check to see if the variable

456
00:15:17,360 --> 00:15:18,720
you want to set

457
00:15:18,720 --> 00:15:21,199
is home and if it is they overwrite that

458
00:15:21,199 --> 00:15:22,560
value with the value in the core

459
00:15:22,560 --> 00:15:24,560
services agent which cannot be tampered

460
00:15:24,560 --> 00:15:26,000
with at least from within the app

461
00:15:26,000 --> 00:15:27,920
sandbox and they also check if the

462
00:15:27,920 --> 00:15:29,680
variable you want to set has the xpc

463
00:15:29,680 --> 00:15:32,320
prefix or is equal to cfx user home and

464
00:15:32,320 --> 00:15:33,839
similar to the last patch they're going

465
00:15:33,839 --> 00:15:35,360
to ignore the variable and not send it

466
00:15:35,360 --> 00:15:37,519
along in the launch request okay now

467
00:15:37,519 --> 00:15:39,120
let's quickly sum up what we have so far

468
00:15:39,120 --> 00:15:41,839
we have an interaction required exploit

469
00:15:41,839 --> 00:15:43,839
we'll forget about that that sucks we

470
00:15:43,839 --> 00:15:45,199
have one where we have to bundle

471
00:15:45,199 --> 00:15:47,519
something inside the app not so good we

472
00:15:47,519 --> 00:15:48,959
have a better one which i just showed

473
00:15:48,959 --> 00:15:50,959
you how we can do it at runtime we can

474
00:15:50,959 --> 00:15:52,800
write out a file and then have that

475
00:15:52,800 --> 00:15:54,560
executed but can we remove that

476
00:15:54,560 --> 00:15:56,399
requirement can we avoid writing to disk

477
00:15:56,399 --> 00:15:59,040
and make this properly file list we can

478
00:15:59,040 --> 00:16:01,360
so let's take a look first at this api

479
00:16:01,360 --> 00:16:03,759
ns workspace open url pretty intuitive

480
00:16:03,759 --> 00:16:06,320
it just opens the url you pass to it

481
00:16:06,320 --> 00:16:07,519
what it does under the hood is it's

482
00:16:07,519 --> 00:16:09,440
going to take that argument and set in

483
00:16:09,440 --> 00:16:12,240
urls to that argument in the open call

484
00:16:12,240 --> 00:16:13,839
input structure i mentioned earlier it

485
00:16:13,839 --> 00:16:15,680
doesn't the structure itself doesn't

486
00:16:15,680 --> 00:16:18,079
matter now what if we passed not an app

487
00:16:18,079 --> 00:16:19,600
not a bundle

488
00:16:19,600 --> 00:16:21,600
but a unix executable what if we pass

489
00:16:21,600 --> 00:16:24,240
perl and you'd see a prompt like this if

490
00:16:24,240 --> 00:16:25,920
you tried to do that what would happen

491
00:16:25,920 --> 00:16:28,560
is the uti of perl would be evaluated to

492
00:16:28,560 --> 00:16:30,880
public.unix executable and then the

493
00:16:30,880 --> 00:16:33,120
binding for unix executable would be

494
00:16:33,120 --> 00:16:34,959
evaluated to see that terminal has

495
00:16:34,959 --> 00:16:36,800
registered to open it and then some

496
00:16:36,800 --> 00:16:37,920
checks that are going to prevent that

497
00:16:37,920 --> 00:16:39,360
from happening

498
00:16:39,360 --> 00:16:40,720
now what if we look at its ugly

499
00:16:40,720 --> 00:16:44,160
deprecated cousin launch application so

500
00:16:44,160 --> 00:16:46,399
what what happens here is it takes that

501
00:16:46,399 --> 00:16:48,000
that argument and it says application

502
00:16:48,000 --> 00:16:50,560
url in application parameter structure

503
00:16:50,560 --> 00:16:52,720
this time passing pearl is going to

504
00:16:52,720 --> 00:16:55,360
bypass that check and before i get into

505
00:16:55,360 --> 00:16:56,959
the exploit a lot of you already know

506
00:16:56,959 --> 00:16:59,120
that we've just tremendously expanded

507
00:16:59,120 --> 00:17:01,680
our attack surface

508
00:17:01,680 --> 00:17:03,920
a lot of unix executables i don't know

509
00:17:03,920 --> 00:17:05,760
people used to love feed shoving

510
00:17:05,760 --> 00:17:08,160
features into environment variables user

511
00:17:08,160 --> 00:17:10,559
bin pearl was chosen particularly for a

512
00:17:10,559 --> 00:17:12,480
very special one so

513
00:17:12,480 --> 00:17:14,559
i call this one mobe mother of all

514
00:17:14,559 --> 00:17:16,319
bypasses i'm not even going to show you

515
00:17:16,319 --> 00:17:18,240
a flow because it's so simple let's step

516
00:17:18,240 --> 00:17:20,559
through it so number one note that we're

517
00:17:20,559 --> 00:17:23,520
using set end we're using setent to

518
00:17:23,520 --> 00:17:25,679
abuse the big sur inheritance feature

519
00:17:25,679 --> 00:17:27,119
and here's what we're doing we're first

520
00:17:27,119 --> 00:17:29,679
going to set pearl5 up to d this is

521
00:17:29,679 --> 00:17:31,440
going to run pearl in debug mode and

522
00:17:31,440 --> 00:17:33,280
when pearl is running in debug mode it's

523
00:17:33,280 --> 00:17:35,679
going to take the value of pearl5db and

524
00:17:35,679 --> 00:17:37,200
it's going to prepend that to any code

525
00:17:37,200 --> 00:17:39,760
you want to execute so essentially it's

526
00:17:39,760 --> 00:17:41,840
it's perl code and environment variable

527
00:17:41,840 --> 00:17:44,080
this is perfect and then we'll bypass

528
00:17:44,080 --> 00:17:46,160
the core services restrictions for perl

529
00:17:46,160 --> 00:17:48,320
by calling into the deprecated api and

530
00:17:48,320 --> 00:17:50,880
this is properly fileless silent zero

531
00:17:50,880 --> 00:17:52,960
interaction and i think as a cherry on

532
00:17:52,960 --> 00:17:56,240
top is probably tweetable

533
00:17:56,240 --> 00:17:57,760
so in

534
00:17:57,760 --> 00:17:59,760
three lines there are three issues the

535
00:17:59,760 --> 00:18:01,440
first of which environment variable

536
00:18:01,440 --> 00:18:03,039
inheritance between sandbox and

537
00:18:03,039 --> 00:18:05,520
unsandbox context i think you know when

538
00:18:05,520 --> 00:18:07,520
we first started and we saw that ivar we

539
00:18:07,520 --> 00:18:08,799
were wondering what it was doing there

540
00:18:08,799 --> 00:18:10,400
but i think at this point we've properly

541
00:18:10,400 --> 00:18:12,080
demonstrated that this is crossing some

542
00:18:12,080 --> 00:18:14,320
sort of privilege boundary

543
00:18:14,320 --> 00:18:16,720
next we bypass restrictions for unix

544
00:18:16,720 --> 00:18:18,640
executable by calling into a deprecated

545
00:18:18,640 --> 00:18:20,960
api clearly it's a code path where it's

546
00:18:20,960 --> 00:18:23,840
missing the same checks as the supported

547
00:18:23,840 --> 00:18:25,760
one and then finally it's not so much an

548
00:18:25,760 --> 00:18:27,919
issue as it is pearl's command injection

549
00:18:27,919 --> 00:18:32,000
as a feature pro 5db it's awesome sweet

550
00:18:32,000 --> 00:18:33,840
so the third patch here it was issued in

551
00:18:33,840 --> 00:18:37,200
11.5 uh what it does is it checks the to

552
00:18:37,200 --> 00:18:39,200
see that argument you pass to the apis

553
00:18:39,200 --> 00:18:40,880
or the core services agent if it's a

554
00:18:40,880 --> 00:18:43,520
registered bundle okay cool but if it

555
00:18:43,520 --> 00:18:45,280
isn't and you're sandboxed then it

556
00:18:45,280 --> 00:18:48,320
throws a permission error

557
00:18:48,320 --> 00:18:50,559
last exploit for today has to do with

558
00:18:50,559 --> 00:18:53,840
electron and electron is

559
00:18:53,840 --> 00:18:55,840
the darling of mac os red teams i know

560
00:18:55,840 --> 00:18:57,840
the entire zoom red team is here so i

561
00:18:57,840 --> 00:19:00,240
think they'll like this one

562
00:19:00,240 --> 00:19:02,240
it's a known process injection vector

563
00:19:02,240 --> 00:19:04,480
when you just set electron run as node

564
00:19:04,480 --> 00:19:06,720
you can pass your arbitrary javascript

565
00:19:06,720 --> 00:19:09,200
through arc v through standard input and

566
00:19:09,200 --> 00:19:11,039
you can execute it in the context of the

567
00:19:11,039 --> 00:19:13,760
application doing so subverts the entire

568
00:19:13,760 --> 00:19:15,679
macos security model and you can abuse

569
00:19:15,679 --> 00:19:17,840
the tcc privileges and entitlements of

570
00:19:17,840 --> 00:19:20,640
the app but we can't just use it as is

571
00:19:20,640 --> 00:19:23,200
from the app sandbox because once again

572
00:19:23,200 --> 00:19:25,679
we can't specify the arguments to the

573
00:19:25,679 --> 00:19:26,960
app we launch

574
00:19:26,960 --> 00:19:28,880
however we do have a very strong

575
00:19:28,880 --> 00:19:30,480
primitive available to us and that's

576
00:19:30,480 --> 00:19:32,480
controlled environment

577
00:19:32,480 --> 00:19:33,520
and we can

578
00:19:33,520 --> 00:19:35,440
achieve process injection through node

579
00:19:35,440 --> 00:19:37,760
options where you can pass under you can

580
00:19:37,760 --> 00:19:39,679
pass command line flags to the

581
00:19:39,679 --> 00:19:42,000
underlying node process in an electron

582
00:19:42,000 --> 00:19:42,799
app

583
00:19:42,799 --> 00:19:44,320
and one we're interested in is the

584
00:19:44,320 --> 00:19:46,400
require flag where it takes the script

585
00:19:46,400 --> 00:19:49,280
provided and it just executes it that's

586
00:19:49,280 --> 00:19:50,400
it

587
00:19:50,400 --> 00:19:52,240
now there's a bit of nuance to this

588
00:19:52,240 --> 00:19:54,480
because officially according to um

589
00:19:54,480 --> 00:19:56,960
electron docs this is only for

590
00:19:56,960 --> 00:19:59,120
unpackaged apps for packaged apps it's

591
00:19:59,120 --> 00:20:01,360
filtered a packaged electron app has its

592
00:20:01,360 --> 00:20:04,000
main executable renamed from electron

593
00:20:04,000 --> 00:20:06,000
all right but there was some unicode

594
00:20:06,000 --> 00:20:07,679
parsing bug where it wasn't properly

595
00:20:07,679 --> 00:20:09,440
filtered um

596
00:20:09,440 --> 00:20:10,880
they sort of fixed it they were going to

597
00:20:10,880 --> 00:20:12,400
fix it only for windows i pointed out

598
00:20:12,400 --> 00:20:14,559
hey this affects all platforms then they

599
00:20:14,559 --> 00:20:16,559
properly kind of fixed it they didn't

600
00:20:16,559 --> 00:20:18,720
issue a security advisory while also

601
00:20:18,720 --> 00:20:20,159
acknowledging its security-related

602
00:20:20,159 --> 00:20:22,080
nature then i reported another patch

603
00:20:22,080 --> 00:20:23,840
bypass to them where you just pass

604
00:20:23,840 --> 00:20:25,679
electron runners node alongside node

605
00:20:25,679 --> 00:20:27,679
options and node options will not be

606
00:20:27,679 --> 00:20:29,919
filtered on packaged apps clearly in

607
00:20:29,919 --> 00:20:31,679
contradiction to their docs and then

608
00:20:31,679 --> 00:20:33,679
finally after months of ignoring me they

609
00:20:33,679 --> 00:20:34,480
say

610
00:20:34,480 --> 00:20:36,320
we do not consider physically local

611
00:20:36,320 --> 00:20:38,080
attacks in our threat model citing

612
00:20:38,080 --> 00:20:40,320
chromium or something while once again

613
00:20:40,320 --> 00:20:42,240
also elsewhere contradicting themselves

614
00:20:42,240 --> 00:20:44,000
saying require will remain filtered in

615
00:20:44,000 --> 00:20:46,159
upstream electron as a security measure

616
00:20:46,159 --> 00:20:48,400
so now we're in a sort of pickle because

617
00:20:48,400 --> 00:20:50,320
this is a third-party vector which means

618
00:20:50,320 --> 00:20:52,240
apple probably doesn't care about it and

619
00:20:52,240 --> 00:20:54,320
the third-party framework in this case

620
00:20:54,320 --> 00:20:56,480
also doesn't care about it so

621
00:20:56,480 --> 00:20:58,720
i think it's up to sort of the community

622
00:20:58,720 --> 00:21:01,120
the users to work around this themselves

623
00:21:01,120 --> 00:21:02,799
and understand

624
00:21:02,799 --> 00:21:04,720
how this can be exploited and this can

625
00:21:04,720 --> 00:21:07,440
be exploited even simpler than the other

626
00:21:07,440 --> 00:21:10,080
ones i believe so let me just go over

627
00:21:10,080 --> 00:21:12,320
the two lines that are occurring here

628
00:21:12,320 --> 00:21:13,760
first we cut a head document to

629
00:21:13,760 --> 00:21:16,320
payload.js this is going to be the code

630
00:21:16,320 --> 00:21:17,760
we execute

631
00:21:17,760 --> 00:21:19,679
outside of the sandbox in the context of

632
00:21:19,679 --> 00:21:21,120
the electron app we're just going to

633
00:21:21,120 --> 00:21:22,720
touch a file under applications which

634
00:21:22,720 --> 00:21:24,240
you normally can't do from within the

635
00:21:24,240 --> 00:21:25,919
sandbox and then we're going to trigger

636
00:21:25,919 --> 00:21:27,919
the issue we talked about today in the

637
00:21:27,919 --> 00:21:29,919
third way the easiest way yet and that's

638
00:21:29,919 --> 00:21:31,679
the opencli binary which is going to

639
00:21:31,679 --> 00:21:34,159
call into launch services even better we

640
00:21:34,159 --> 00:21:36,159
can populate that environment ivor

641
00:21:36,159 --> 00:21:38,720
through the n flag where we set electron

642
00:21:38,720 --> 00:21:40,799
runners node to one to bypass the node

643
00:21:40,799 --> 00:21:42,480
options filtering and then the node

644
00:21:42,480 --> 00:21:44,559
options will require the file we just

645
00:21:44,559 --> 00:21:47,280
wrote and that's it we have both a macro

646
00:21:47,280 --> 00:21:50,240
sandbox escape and process injection in

647
00:21:50,240 --> 00:21:52,240
two lines and nobody wants to fix this

648
00:21:52,240 --> 00:21:53,520
what the heck

649
00:21:53,520 --> 00:21:55,520
so work around here if you are

650
00:21:55,520 --> 00:21:57,760
responsible for an electron app package

651
00:21:57,760 --> 00:21:59,840
your app make sure it's not named

652
00:21:59,840 --> 00:22:03,039
electron like vs code and key base

653
00:22:03,039 --> 00:22:04,960
and also disable the run as node fuse

654
00:22:04,960 --> 00:22:06,720
this is a sort of experimental not

655
00:22:06,720 --> 00:22:08,640
really documented feature but it

656
00:22:08,640 --> 00:22:10,480
essentially makes your app ignore the

657
00:22:10,480 --> 00:22:12,640
value of electron and run as node this

658
00:22:12,640 --> 00:22:15,440
should never be enabled

659
00:22:15,440 --> 00:22:17,840
now what's left clearly apple has chosen

660
00:22:17,840 --> 00:22:19,760
a wacomo approach instead of addressing

661
00:22:19,760 --> 00:22:21,440
the root cause of the issue like their

662
00:22:21,440 --> 00:22:23,440
docs explicitly state they're patching

663
00:22:23,440 --> 00:22:26,000
things as i find new vectors as i report

664
00:22:26,000 --> 00:22:26,880
them

665
00:22:26,880 --> 00:22:28,000
what gives

666
00:22:28,000 --> 00:22:29,440
um

667
00:22:29,440 --> 00:22:31,280
the crux of the issue remains and that's

668
00:22:31,280 --> 00:22:32,080
that

669
00:22:32,080 --> 00:22:33,520
applications can still be launched

670
00:22:33,520 --> 00:22:35,200
outside of the absence outside of the

671
00:22:35,200 --> 00:22:36,880
sandbox and their environment variables

672
00:22:36,880 --> 00:22:38,799
can still be controlled i think a big

673
00:22:38,799 --> 00:22:40,720
thing we'll see here certainly see i

674
00:22:40,720 --> 00:22:42,480
have one thing in disclosure right now

675
00:22:42,480 --> 00:22:44,480
is application specific environment

676
00:22:44,480 --> 00:22:46,320
variables today's example was node

677
00:22:46,320 --> 00:22:49,360
options but there are more

678
00:22:49,360 --> 00:22:51,440
i've also shown you apis influenced by

679
00:22:51,440 --> 00:22:53,360
environment variables today's example is

680
00:22:53,360 --> 00:22:55,760
cfx user home and ns home directory and

681
00:22:55,760 --> 00:22:57,840
the many many many apis that expand

682
00:22:57,840 --> 00:23:01,520
tildes and paths through that api

683
00:23:01,520 --> 00:23:02,960
and also sandbox parameters are

684
00:23:02,960 --> 00:23:05,120
sometimes initialized by environment

685
00:23:05,120 --> 00:23:07,280
variables the example i have is the

686
00:23:07,280 --> 00:23:09,200
trusted peers helper service where the

687
00:23:09,200 --> 00:23:11,440
home sub path is initialized from the

688
00:23:11,440 --> 00:23:13,200
home environment variable as opposed to

689
00:23:13,200 --> 00:23:14,480
somewhere more secure like open

690
00:23:14,480 --> 00:23:16,000
directory d

691
00:23:16,000 --> 00:23:16,880
um

692
00:23:16,880 --> 00:23:19,200
yeah now if you want to defend yourself

693
00:23:19,200 --> 00:23:21,760
i've submitted a pr to the objective-c

694
00:23:21,760 --> 00:23:24,559
process monitor tool uh it's not merged

695
00:23:24,559 --> 00:23:27,600
yet but we'll get there right patrick

696
00:23:27,600 --> 00:23:29,039
and what you want to look for is

697
00:23:29,039 --> 00:23:30,240
essentially everything we talked about

698
00:23:30,240 --> 00:23:33,039
today if you see an unsandboxed app with

699
00:23:33,039 --> 00:23:35,919
its value of cf fixed user home

700
00:23:35,919 --> 00:23:38,000
containing containers in other words

701
00:23:38,000 --> 00:23:39,679
it's pointing to a sandbox container but

702
00:23:39,679 --> 00:23:42,799
it's not sandbox that's very suspicious

703
00:23:42,799 --> 00:23:45,200
uh chabothal's shield app also looks for

704
00:23:45,200 --> 00:23:47,520
electron runners node but not the second

705
00:23:47,520 --> 00:23:49,440
the latter node option so if it's an

706
00:23:49,440 --> 00:23:51,840
unpackaged app

707
00:23:51,840 --> 00:23:54,480
yeah you'll need something else for that

708
00:23:54,480 --> 00:23:56,880
and another heuristic one final one if

709
00:23:56,880 --> 00:23:59,120
you can determine that a process was

710
00:23:59,120 --> 00:24:00,720
launched through launch services and

711
00:24:00,720 --> 00:24:03,279
then you could also obtain the parent uh

712
00:24:03,279 --> 00:24:05,039
pid of that process the one who

713
00:24:05,039 --> 00:24:06,720
submitted it

714
00:24:06,720 --> 00:24:08,720
check jaren bradley's true tree project

715
00:24:08,720 --> 00:24:10,960
for that

716
00:24:10,960 --> 00:24:13,520
um if the parent is sandbox and the

717
00:24:13,520 --> 00:24:15,279
child process is unsandbox that should

718
00:24:15,279 --> 00:24:16,640
probably add some weight to your

719
00:24:16,640 --> 00:24:20,159
detection algorithm and

720
00:24:20,159 --> 00:24:22,159
i think i'm just about out of time so

721
00:24:22,159 --> 00:24:23,600
mahalo to

722
00:24:23,600 --> 00:24:25,360
andy and patrick and thank you to

723
00:24:25,360 --> 00:24:26,799
matthias and juan and octa for

724
00:24:26,799 --> 00:24:30,918
supporting me thank you everyone

725
00:24:32,400 --> 00:24:34,480
you

