1
00:00:04,480 --> 00:00:05,759
next up we have a really interesting

2
00:00:05,759 --> 00:00:07,680
talk about exploiting

3
00:00:07,680 --> 00:00:10,320
the kernel on apple's most recent

4
00:00:10,320 --> 00:00:12,880
systems m1 so let's give a round of

5
00:00:12,880 --> 00:00:14,960
applause really excited to hear some of

6
00:00:14,960 --> 00:00:17,279
the research kay has done and i think

7
00:00:17,279 --> 00:00:18,720
also

8
00:00:18,720 --> 00:00:21,199
you're probably our youngest speaker and

9
00:00:21,199 --> 00:00:23,279
furthest traveled so that equally

10
00:00:23,279 --> 00:00:26,750
deserves a round of applause as well

11
00:00:26,750 --> 00:00:31,760
[Applause]

12
00:00:31,760 --> 00:00:33,760
um thank you everyone for being here

13
00:00:33,760 --> 00:00:35,840
today and listening to my talk this is

14
00:00:35,840 --> 00:00:38,000
my first time doing it in person

15
00:00:38,000 --> 00:00:40,160
presentation i'm so nervous right now

16
00:00:40,160 --> 00:00:41,920
i'm probably gonna make mistake here and

17
00:00:41,920 --> 00:00:43,200
there

18
00:00:43,200 --> 00:00:46,399
but next time i'll do better

19
00:00:46,399 --> 00:00:48,480
all right i'm i'm honored to be here to

20
00:00:48,480 --> 00:00:50,399
give this talk and hopefully it's useful

21
00:00:50,399 --> 00:00:51,840
for some people

22
00:00:51,840 --> 00:00:53,840
today i'm going to talk about x-ray

23
00:00:53,840 --> 00:00:56,960
vulnerabilities in apple video encoder

24
00:00:56,960 --> 00:00:59,520
here's a brief information

25
00:00:59,520 --> 00:01:01,680
about this thing so this video encoder

26
00:01:01,680 --> 00:01:03,920
component runs as a kernel extension or

27
00:01:03,920 --> 00:01:05,920
you can call it driver it runs in the

28
00:01:05,920 --> 00:01:07,520
kernel space so it has the same

29
00:01:07,520 --> 00:01:09,520
privilege as the kernel it's a great

30
00:01:09,520 --> 00:01:11,119
target however

31
00:01:11,119 --> 00:01:12,720
owned devices based on the armed

32
00:01:12,720 --> 00:01:14,880
architecture without this driver

33
00:01:14,880 --> 00:01:15,920
and

34
00:01:15,920 --> 00:01:18,000
somebody said that the arm cpu is better

35
00:01:18,000 --> 00:01:20,159
for video editing than intel naturally

36
00:01:20,159 --> 00:01:22,400
i'm not sure if that's true or not but

37
00:01:22,400 --> 00:01:23,840
it might have something to do with that

38
00:01:23,840 --> 00:01:25,040
so they built a

39
00:01:25,040 --> 00:01:27,680
dedicated driver for video encoding on

40
00:01:27,680 --> 00:01:28,560
arm

41
00:01:28,560 --> 00:01:30,720
but anyway just knowing that this

42
00:01:30,720 --> 00:01:32,240
vulnerabilities in

43
00:01:32,240 --> 00:01:34,560
this driver won't affect intel max is

44
00:01:34,560 --> 00:01:36,000
good enough

45
00:01:36,000 --> 00:01:38,000
and now let's take a look at this from

46
00:01:38,000 --> 00:01:41,040
the security perspective

47
00:01:41,040 --> 00:01:43,520
before apple introduced the m1 chip this

48
00:01:43,520 --> 00:01:45,759
video encoder driver used to be only

49
00:01:45,759 --> 00:01:48,000
exist on ios most of this symbol got

50
00:01:48,000 --> 00:01:50,079
removed the entire driver got meshed

51
00:01:50,079 --> 00:01:52,720
together inside iris kernel cache so

52
00:01:52,720 --> 00:01:54,720
it's a lot of work to sort out internal

53
00:01:54,720 --> 00:01:57,040
functions and re-symbolizing the kernel

54
00:01:57,040 --> 00:01:58,000
cache

55
00:01:58,000 --> 00:02:00,240
and furthermore you need a sandbox game

56
00:02:00,240 --> 00:02:02,320
or jailbroken device just for debugging

57
00:02:02,320 --> 00:02:04,560
this driver that makes it much less

58
00:02:04,560 --> 00:02:07,520
attractive target

59
00:02:07,680 --> 00:02:09,520
but nevertheless

60
00:02:09,520 --> 00:02:11,360
this driver once had received a lot of

61
00:02:11,360 --> 00:02:14,319
attention back in 2017 a researcher

62
00:02:14,319 --> 00:02:16,080
named adam found a series of

63
00:02:16,080 --> 00:02:17,680
vulnerabilities

64
00:02:17,680 --> 00:02:19,680
in this driver and the simplicity of

65
00:02:19,680 --> 00:02:22,239
these vulnerabilities just absurd plus

66
00:02:22,239 --> 00:02:25,680
from his slide i believe back in 2017

67
00:02:25,680 --> 00:02:27,520
apple allowed direct access to this

68
00:02:27,520 --> 00:02:30,080
driver for inside a sandbox

69
00:02:30,080 --> 00:02:32,400
and as someone who i have taken a deep

70
00:02:32,400 --> 00:02:35,280
look into his work the moment i finally

71
00:02:35,280 --> 00:02:36,959
understood how these vulnerabilities

72
00:02:36,959 --> 00:02:38,239
works

73
00:02:38,239 --> 00:02:40,400
it was mind-blowing it's crazy how

74
00:02:40,400 --> 00:02:42,000
simple they are

75
00:02:42,000 --> 00:02:44,239
and now let me briefly expand them to

76
00:02:44,239 --> 00:02:46,400
you

77
00:02:46,560 --> 00:02:49,040
so these are not race conditions or

78
00:02:49,040 --> 00:02:51,440
overflow problems the cause of these

79
00:02:51,440 --> 00:02:53,440
vulnerabilities is there were no

80
00:02:53,440 --> 00:02:54,959
security measures

81
00:02:54,959 --> 00:02:56,959
it's a symbol that it's almost like the

82
00:02:56,959 --> 00:02:59,040
person who wrote the driver didn't think

83
00:02:59,040 --> 00:03:01,599
of the security aspect

84
00:03:01,599 --> 00:03:03,200
and these vulnerabilities are really

85
00:03:03,200 --> 00:03:05,200
straightforward trigger

86
00:03:05,200 --> 00:03:07,360
and probably for higher efficiency

87
00:03:07,360 --> 00:03:09,360
reason tons of interaction with this

88
00:03:09,360 --> 00:03:11,840
driver are done through memory mapping

89
00:03:11,840 --> 00:03:13,680
a piece of kernel memory used by the

90
00:03:13,680 --> 00:03:15,840
video encoder has been mapped into user

91
00:03:15,840 --> 00:03:18,879
space to our process we can read and

92
00:03:18,879 --> 00:03:20,800
write this memory whenever we want and

93
00:03:20,800 --> 00:03:22,959
the changes we make will be reflected in

94
00:03:22,959 --> 00:03:25,040
the kernel with a very little delay and

95
00:03:25,040 --> 00:03:26,799
so as the changes made by kernel will be

96
00:03:26,799 --> 00:03:30,400
reflected on our process memory

97
00:03:31,440 --> 00:03:33,920
and because of this risky nature when

98
00:03:33,920 --> 00:03:35,360
someone didn't take security into

99
00:03:35,360 --> 00:03:37,280
consideration it becomes the source of

100
00:03:37,280 --> 00:03:38,400
the problem

101
00:03:38,400 --> 00:03:41,440
apple video encoder is a typical example

102
00:03:41,440 --> 00:03:43,760
it writes kernel pointer directly

103
00:03:43,760 --> 00:03:45,440
into the memory shared with the user

104
00:03:45,440 --> 00:03:48,640
space which creates all kinds of issues

105
00:03:48,640 --> 00:03:50,560
this loan is enough to achieve code

106
00:03:50,560 --> 00:03:52,319
execution on devices that are not

107
00:03:52,319 --> 00:03:54,959
protected by the printer authentication

108
00:03:54,959 --> 00:03:56,720
however

109
00:03:56,720 --> 00:03:58,720
that's not a focus of today i want to

110
00:03:58,720 --> 00:04:00,560
emphasize something else that's way more

111
00:04:00,560 --> 00:04:02,640
interesting

112
00:04:02,640 --> 00:04:06,000
notice that the date here is 2017.

113
00:04:06,000 --> 00:04:08,879
in 2017 apple patched a bunch of bugs

114
00:04:08,879 --> 00:04:10,879
from this same driver you can see this

115
00:04:10,879 --> 00:04:12,840
screenshot got from apple security

116
00:04:12,840 --> 00:04:15,120
advisory it looks like a lot of work has

117
00:04:15,120 --> 00:04:17,279
been done right and

118
00:04:17,279 --> 00:04:19,120
adam the researcher who discovered these

119
00:04:19,120 --> 00:04:21,199
vulnerabilities even published a post

120
00:04:21,199 --> 00:04:23,280
and presented a black hat talking about

121
00:04:23,280 --> 00:04:23,919
it

122
00:04:23,919 --> 00:04:25,600
he did point out their weaknesses and

123
00:04:25,600 --> 00:04:28,320
how easy it is to export them and since

124
00:04:28,320 --> 00:04:30,160
then nobody ever mentioned this driver

125
00:04:30,160 --> 00:04:32,320
again

126
00:04:32,320 --> 00:04:34,320
you can see how adam described the code

127
00:04:34,320 --> 00:04:37,199
quality of this video driver

128
00:04:37,199 --> 00:04:39,440
he said that neglecting basic security

129
00:04:39,440 --> 00:04:41,360
fundamentals i guess many people

130
00:04:41,360 --> 00:04:43,280
probably had the same thought as me that

131
00:04:43,280 --> 00:04:45,120
this driver should be very secured after

132
00:04:45,120 --> 00:04:46,240
being through this kind of media

133
00:04:46,240 --> 00:04:48,320
exposure

134
00:04:48,320 --> 00:04:51,280
in 2019 i was searching for new kernel

135
00:04:51,280 --> 00:04:52,880
vulnerabilities and when i first

136
00:04:52,880 --> 00:04:54,639
stumbled across this driver

137
00:04:54,639 --> 00:04:56,479
i googled this name and i saw adam's

138
00:04:56,479 --> 00:04:58,639
discovery i decided to stop the further

139
00:04:58,639 --> 00:05:00,960
analysis of this driver because i i was

140
00:05:00,960 --> 00:05:02,880
thinking that apple must have reinforced

141
00:05:02,880 --> 00:05:05,199
this driver to a very secure level

142
00:05:05,199 --> 00:05:07,199
and even if there is something left

143
00:05:07,199 --> 00:05:09,840
someone else must have found it already

144
00:05:09,840 --> 00:05:11,840
adam's research article has made things

145
00:05:11,840 --> 00:05:13,280
much easier

146
00:05:13,280 --> 00:05:14,880
someone must have tried it i don't want

147
00:05:14,880 --> 00:05:17,600
to waste time on the same thing

148
00:05:17,600 --> 00:05:19,759
at the first glance this driver looks

149
00:05:19,759 --> 00:05:22,800
quite complicated to me i estimate that

150
00:05:22,800 --> 00:05:24,160
it would take a week of reverse

151
00:05:24,160 --> 00:05:26,080
engineering work just to learn internal

152
00:05:26,080 --> 00:05:28,240
and write code test it

153
00:05:28,240 --> 00:05:29,680
so yeah it's not worth just spending a

154
00:05:29,680 --> 00:05:32,000
week on this that's exactly what i was

155
00:05:32,000 --> 00:05:33,759
thinking

156
00:05:33,759 --> 00:05:36,240
but here's the thing apple is a company

157
00:05:36,240 --> 00:05:38,400
ran and operated by people which means

158
00:05:38,400 --> 00:05:40,560
it was a person inside apple who read a

159
00:05:40,560 --> 00:05:42,720
report and did the patching work and

160
00:05:42,720 --> 00:05:44,720
sometimes people are lazy we don't want

161
00:05:44,720 --> 00:05:46,800
to put effortless be unnecessary

162
00:05:46,800 --> 00:05:48,320
especially whenever it's not being

163
00:05:48,320 --> 00:05:50,080
appreciated

164
00:05:50,080 --> 00:05:51,840
adam has received a lot of credit for

165
00:05:51,840 --> 00:05:53,919
his work i mean he totally deserved it

166
00:05:53,919 --> 00:05:55,039
but

167
00:05:55,039 --> 00:05:57,199
he made he made the best effort to study

168
00:05:57,199 --> 00:05:59,360
this case to his full potential but what

169
00:05:59,360 --> 00:06:01,600
about the person who fixed the bug

170
00:06:01,600 --> 00:06:03,840
he didn't receive any credit it might be

171
00:06:03,840 --> 00:06:05,199
even a girl she didn't receive any

172
00:06:05,199 --> 00:06:07,520
credit for his work

173
00:06:07,520 --> 00:06:10,000
i mean yes it's her job responsibly to

174
00:06:10,000 --> 00:06:12,240
it's her job responsibility to fix the

175
00:06:12,240 --> 00:06:13,680
vulnerability but

176
00:06:13,680 --> 00:06:15,919
and she did get the job done however she

177
00:06:15,919 --> 00:06:17,600
wouldn't get any rewards regardless

178
00:06:17,600 --> 00:06:19,280
she'd done this work very well or is

179
00:06:19,280 --> 00:06:20,639
average

180
00:06:20,639 --> 00:06:23,039
both solution both solution lists here

181
00:06:23,039 --> 00:06:24,960
work at the time and it's easy to tell

182
00:06:24,960 --> 00:06:27,039
that the second solution is much more

183
00:06:27,039 --> 00:06:29,759
responsible and much more secure

184
00:06:29,759 --> 00:06:31,759
and in fact if apple did the second

185
00:06:31,759 --> 00:06:34,880
solution back in 2017 i will never have

186
00:06:34,880 --> 00:06:37,280
a chance to export this driver

187
00:06:37,280 --> 00:06:39,120
despite all that if you consider the

188
00:06:39,120 --> 00:06:40,880
human element you'll find out that

189
00:06:40,880 --> 00:06:42,880
probably not many people are willing to

190
00:06:42,880 --> 00:06:44,560
spend that extra effort to make things

191
00:06:44,560 --> 00:06:46,479
more secure because pretty much you can

192
00:06:46,479 --> 00:06:48,639
hardly find any incentive to do the

193
00:06:48,639 --> 00:06:50,400
second solution

194
00:06:50,400 --> 00:06:51,599
therefore

195
00:06:51,599 --> 00:06:53,599
not many people understand extra effort

196
00:06:53,599 --> 00:06:56,000
and even fewer people appreciate

197
00:06:56,000 --> 00:06:58,240
extra effort the attacker is one of the

198
00:06:58,240 --> 00:07:00,400
few people who truly understand

199
00:07:00,400 --> 00:07:02,319
her effort to patch this vulnerability

200
00:07:02,319 --> 00:07:04,080
but obviously the attacker would not

201
00:07:04,080 --> 00:07:05,039
pretty sure

202
00:07:05,039 --> 00:07:06,880
would not appreciate her because she she

203
00:07:06,880 --> 00:07:10,400
makes the tiger's job more difficult

204
00:07:10,400 --> 00:07:12,880
in real life it's not as easy as a sound

205
00:07:12,880 --> 00:07:14,960
to patch a vulnerability because it has

206
00:07:14,960 --> 00:07:16,479
to be practical

207
00:07:16,479 --> 00:07:18,000
it's best to make minimum changes to

208
00:07:18,000 --> 00:07:19,280
avoid interference with the

209
00:07:19,280 --> 00:07:20,639
functionality

210
00:07:20,639 --> 00:07:22,880
and as i mentioned earlier this video

211
00:07:22,880 --> 00:07:24,639
driver is quite complicated so if you

212
00:07:24,639 --> 00:07:26,400
make changes you probably

213
00:07:26,400 --> 00:07:28,240
have to test it and make more changes to

214
00:07:28,240 --> 00:07:30,560
make sure everything works okay so in

215
00:07:30,560 --> 00:07:32,560
terms of amount of work it could be a

216
00:07:32,560 --> 00:07:34,080
difference between two days and full

217
00:07:34,080 --> 00:07:35,039
month

218
00:07:35,039 --> 00:07:36,080
so

219
00:07:36,080 --> 00:07:37,840
probably the first solution is more

220
00:07:37,840 --> 00:07:40,000
common in real life

221
00:07:40,000 --> 00:07:42,639
that's just my

222
00:07:42,840 --> 00:07:46,160
opinion anyhow here is my advice for bug

223
00:07:46,160 --> 00:07:48,639
bounty always check how the box being

224
00:07:48,639 --> 00:07:50,479
fixed especially if you are the person

225
00:07:50,479 --> 00:07:52,080
who submitted report

226
00:07:52,080 --> 00:07:54,400
the patch may not as perfect as you

227
00:07:54,400 --> 00:07:55,199
think

228
00:07:55,199 --> 00:07:56,720
you can be rewarded for being a little

229
00:07:56,720 --> 00:08:00,319
bit more responsible

230
00:08:00,479 --> 00:08:03,120
now back to the video encoder driver

231
00:08:03,120 --> 00:08:05,360
in 2017 by the time i discovered this

232
00:08:05,360 --> 00:08:07,280
driver pretty much everything stayed

233
00:08:07,280 --> 00:08:09,919
stayed intact it's as powerful as it was

234
00:08:09,919 --> 00:08:11,759
in 2017

235
00:08:11,759 --> 00:08:13,759
this video driver is a it's like a

236
00:08:13,759 --> 00:08:16,000
hidden treasure waiting to be found

237
00:08:16,000 --> 00:08:17,599
and the sandbox

238
00:08:17,599 --> 00:08:20,800
and a sandbox escape is the key for it

239
00:08:20,800 --> 00:08:22,639
i end up reported to a third party

240
00:08:22,639 --> 00:08:24,840
company and they reported

241
00:08:24,840 --> 00:08:26,560
apple

242
00:08:26,560 --> 00:08:29,199
fast forward to 2020 apple fixed the

243
00:08:29,199 --> 00:08:30,960
part that i used to achieve clinical

244
00:08:30,960 --> 00:08:33,519
execution a few powerful primitives

245
00:08:33,519 --> 00:08:35,200
still there and the race condition is

246
00:08:35,200 --> 00:08:36,240
still there

247
00:08:36,240 --> 00:08:38,559
another sandbox escape is all it needs

248
00:08:38,559 --> 00:08:41,839
to jawbreak hour 13

249
00:08:41,839 --> 00:08:46,000
and keep going now it's i was 14 in 2021

250
00:08:46,000 --> 00:08:48,080
for the first time apple brought this

251
00:08:48,080 --> 00:08:51,200
video driver onto micros platform they

252
00:08:51,200 --> 00:08:53,200
have made some major changes but since

253
00:08:53,200 --> 00:08:56,080
it's mac os driver fully symbolized and

254
00:08:56,080 --> 00:08:58,560
the sandbox sandbox is not there by

255
00:08:58,560 --> 00:09:00,560
default it feels great to research on

256
00:09:00,560 --> 00:09:03,040
mac os it's much less hassle computer

257
00:09:03,040 --> 00:09:05,439
ios

258
00:09:05,519 --> 00:09:07,440
there is a lot of modifications happen

259
00:09:07,440 --> 00:09:09,360
to this driver but

260
00:09:09,360 --> 00:09:10,560
these are the

261
00:09:10,560 --> 00:09:12,880
two most significant ones i found

262
00:09:12,880 --> 00:09:14,959
the first thing i noticed that a big

263
00:09:14,959 --> 00:09:16,959
chunk of code has been moved from a

264
00:09:16,959 --> 00:09:18,959
function to another function

265
00:09:18,959 --> 00:09:20,720
i and with the apple rewrote autocode

266
00:09:20,720 --> 00:09:22,800
which i found that hard to believe

267
00:09:22,800 --> 00:09:24,880
but it turns out nope they just they

268
00:09:24,880 --> 00:09:27,120
just move the code and here comes the

269
00:09:27,120 --> 00:09:29,040
second change which does more than just

270
00:09:29,040 --> 00:09:32,640
moving code around i'll expand later

271
00:09:32,640 --> 00:09:35,360
this is what it looks like on ios 14 and

272
00:09:35,360 --> 00:09:37,040
the mac os bixer

273
00:09:37,040 --> 00:09:39,040
apple has broken out of primitives i had

274
00:09:39,040 --> 00:09:40,160
discovered

275
00:09:40,160 --> 00:09:42,399
in the last major version but they still

276
00:09:42,399 --> 00:09:44,800
didn't do anything about mapping

277
00:09:44,800 --> 00:09:46,880
so the potential possibility of race

278
00:09:46,880 --> 00:09:49,440
condition still exists

279
00:09:49,440 --> 00:09:51,600
my proof of concept expert demonstrate

280
00:09:51,600 --> 00:09:54,000
that those kernel user memory mapping

281
00:09:54,000 --> 00:09:55,680
scenarios are excellent targets for

282
00:09:55,680 --> 00:09:58,399
exploitation

283
00:09:58,880 --> 00:10:00,080
next i'm going to review the new

284
00:10:00,080 --> 00:10:01,760
vulnerabilities i found

285
00:10:01,760 --> 00:10:03,440
and how they can be turned into kernel

286
00:10:03,440 --> 00:10:05,360
read and write exploit

287
00:10:05,360 --> 00:10:07,279
i have wrote everything down so if

288
00:10:07,279 --> 00:10:08,880
you're really interested in the

289
00:10:08,880 --> 00:10:10,560
technical details you can download a

290
00:10:10,560 --> 00:10:13,839
slide to study afterwards

291
00:10:14,000 --> 00:10:17,040
okay so here is the first vulnerability

292
00:10:17,040 --> 00:10:20,319
this is a triggering path

293
00:10:24,160 --> 00:10:26,079
it's an overflow problem they need to

294
00:10:26,079 --> 00:10:29,800
add a boundary tracks

295
00:10:32,959 --> 00:10:34,959
and this is how to utilize it to recruit

296
00:10:34,959 --> 00:10:37,359
memory

297
00:10:41,120 --> 00:10:43,279
i will publish expert code later so it

298
00:10:43,279 --> 00:10:46,680
will help to understand

299
00:10:49,760 --> 00:10:51,200
all right and here's the second

300
00:10:51,200 --> 00:10:55,120
vulnerability the triggering path

301
00:10:57,680 --> 00:10:59,839
it's a race condition problem leverage

302
00:10:59,839 --> 00:11:02,959
the new data structure

303
00:11:05,760 --> 00:11:07,360
and this is the second part also the

304
00:11:07,360 --> 00:11:09,920
last part

305
00:11:12,480 --> 00:11:14,399
okay then we talk about how these bugs

306
00:11:14,399 --> 00:11:16,000
are being fixed

307
00:11:16,000 --> 00:11:18,079
technically they have not been fixed

308
00:11:18,079 --> 00:11:20,079
apple didn't take action on the overflow

309
00:11:20,079 --> 00:11:22,320
problem by that i mean they didn't add a

310
00:11:22,320 --> 00:11:24,399
size of boundary checks but something

311
00:11:24,399 --> 00:11:25,920
else they did this time effectively

312
00:11:25,920 --> 00:11:29,360
solved the risk condition problem

313
00:11:29,360 --> 00:11:31,680
here's the code comparison for patch so

314
00:11:31,680 --> 00:11:33,680
they add a buffer between the use of the

315
00:11:33,680 --> 00:11:35,200
mapped memory

316
00:11:35,200 --> 00:11:36,640
i don't know how this will affect the

317
00:11:36,640 --> 00:11:39,040
efficiency of the driver but apple only

318
00:11:39,040 --> 00:11:41,279
did this for a small part of the small

319
00:11:41,279 --> 00:11:44,480
part of the map memory which is smart

320
00:11:44,480 --> 00:11:46,079
they they should have done this three

321
00:11:46,079 --> 00:11:47,600
years ago

322
00:11:47,600 --> 00:11:49,600
and so far i did not discover a new

323
00:11:49,600 --> 00:11:52,959
approach to export this driver

324
00:11:54,320 --> 00:11:57,440
i'm regarding apple security bounty

325
00:11:57,440 --> 00:12:01,120
um i reported back in february 2021

326
00:12:01,120 --> 00:12:03,440
and they just went quiet there there

327
00:12:03,440 --> 00:12:05,040
were people complaining about apple

328
00:12:05,040 --> 00:12:07,600
security bounty lack of communication

329
00:12:07,600 --> 00:12:09,839
and loan delays are very true

330
00:12:09,839 --> 00:12:11,440
i send them a couple emails after the

331
00:12:11,440 --> 00:12:13,600
cve is out but they never responded

332
00:12:13,600 --> 00:12:15,760
until the end of august there was like

333
00:12:15,760 --> 00:12:17,839
three or four months with no news from

334
00:12:17,839 --> 00:12:18,959
them at all

335
00:12:18,959 --> 00:12:20,959
and that's normal you don't hear words

336
00:12:20,959 --> 00:12:22,480
from them doesn't mean your report has

337
00:12:22,480 --> 00:12:25,360
been ignored they're just being slow

338
00:12:25,360 --> 00:12:28,079
eventually they decided over me 52 grand

339
00:12:28,079 --> 00:12:30,160
for this report which is beyond my

340
00:12:30,160 --> 00:12:31,680
expectation

341
00:12:31,680 --> 00:12:34,800
i was quite generous in my opinion

342
00:12:34,800 --> 00:12:37,680
and overall i think apple security

343
00:12:37,680 --> 00:12:40,000
bounty program deserve a positive review

344
00:12:40,000 --> 00:12:42,320
it has pros and cons but you don't have

345
00:12:42,320 --> 00:12:44,320
to report apple after all

346
00:12:44,320 --> 00:12:46,800
there are other options like zdi zero

347
00:12:46,800 --> 00:12:48,000
day initiative

348
00:12:48,000 --> 00:12:50,320
they're like the car max in the bank

349
00:12:50,320 --> 00:12:52,880
back bounty

350
00:12:52,880 --> 00:12:53,760
world

351
00:12:53,760 --> 00:12:55,760
it's a personal choice to accept the

352
00:12:55,760 --> 00:12:57,519
offer from the zdi or going through

353
00:12:57,519 --> 00:13:00,000
apple security bounty which is slow but

354
00:13:00,000 --> 00:13:02,720
potentially much higher return

355
00:13:02,720 --> 00:13:05,279
but in my opinion apple pays the most

356
00:13:05,279 --> 00:13:07,680
and they let you publish details of the

357
00:13:07,680 --> 00:13:08,880
vulnerability

358
00:13:08,880 --> 00:13:10,320
wherever you want

359
00:13:10,320 --> 00:13:12,560
so if i discover new vulnerabilities in

360
00:13:12,560 --> 00:13:14,560
the future i would prefer to report them

361
00:13:14,560 --> 00:13:17,119
to apple

362
00:13:17,519 --> 00:13:19,200
and next we're going to talk about the

363
00:13:19,200 --> 00:13:20,399
sandbox

364
00:13:20,399 --> 00:13:22,480
sandbox is a security mechanism that has

365
00:13:22,480 --> 00:13:24,160
been there for a long time

366
00:13:24,160 --> 00:13:26,560
apple can decide we can access phone

367
00:13:26,560 --> 00:13:28,560
instead of sandbox and it gets more and

368
00:13:28,560 --> 00:13:30,560
more restricted over time

369
00:13:30,560 --> 00:13:32,560
it's almost like it's a simple simpler

370
00:13:32,560 --> 00:13:35,600
solution for passion and vulnerability

371
00:13:35,600 --> 00:13:36,800
if you're interested in learning more

372
00:13:36,800 --> 00:13:38,720
about sandbox you can watch my blackhead

373
00:13:38,720 --> 00:13:39,920
presentation

374
00:13:39,920 --> 00:13:40,880
at this

375
00:13:40,880 --> 00:13:43,760
statistical analysis of the

376
00:13:43,760 --> 00:13:45,600
evolution of the sandbox maybe you can

377
00:13:45,600 --> 00:13:49,079
check that out

378
00:13:49,360 --> 00:13:52,160
but anyway back then security outside of

379
00:13:52,160 --> 00:13:55,519
sandbox open opening got overlooked

380
00:13:55,519 --> 00:13:57,440
maybe it still is now but it's hard to

381
00:13:57,440 --> 00:13:59,680
tell

382
00:14:00,000 --> 00:14:01,839
here's another great example demonstrate

383
00:14:01,839 --> 00:14:03,680
stuff outside of sandbox are not so good

384
00:14:03,680 --> 00:14:04,959
in security

385
00:14:04,959 --> 00:14:07,120
this is in 2019 which is the time i

386
00:14:07,120 --> 00:14:09,120
started looking for vulnerabilities that

387
00:14:09,120 --> 00:14:12,079
cannot be reached for instead of sandbox

388
00:14:12,079 --> 00:14:14,000
this driver caught my attention because

389
00:14:14,000 --> 00:14:16,560
external messes are not that complicated

390
00:14:16,560 --> 00:14:18,880
one of them does memory copy and it's

391
00:14:18,880 --> 00:14:20,800
kind of easy to tell that it's missing

392
00:14:20,800 --> 00:14:22,240
size track here

393
00:14:22,240 --> 00:14:24,000
it's also very powerful you can achieve

394
00:14:24,000 --> 00:14:26,000
couldn't read and write with just only

395
00:14:26,000 --> 00:14:27,839
this vulnerability i don't need a

396
00:14:27,839 --> 00:14:30,399
standby escape to reach this driver

397
00:14:30,399 --> 00:14:32,800
and then

398
00:14:32,880 --> 00:14:35,040
this is my checklist for drivers that

399
00:14:35,040 --> 00:14:36,079
cannot be

400
00:14:36,079 --> 00:14:38,160
reached for instead of sandbox

401
00:14:38,160 --> 00:14:40,160
you can create this list by yourself

402
00:14:40,160 --> 00:14:42,639
pretty easy just download the firmware

403
00:14:42,639 --> 00:14:45,120
extract all the property files of the

404
00:14:45,120 --> 00:14:47,040
launch daemons and run an app try to

405
00:14:47,040 --> 00:14:49,120
connect every one of them meanwhile use

406
00:14:49,120 --> 00:14:50,800
the console application to monitor the

407
00:14:50,800 --> 00:14:52,399
logs and then you will see a list of

408
00:14:52,399 --> 00:14:54,160
denial access

409
00:14:54,160 --> 00:14:56,560
it was at the time of ios 12 i wrote a

410
00:14:56,560 --> 00:14:58,399
program and id scripts to help

411
00:14:58,399 --> 00:15:01,680
structurize iok classes then i manually

412
00:15:01,680 --> 00:15:04,160
manually added the code and those

413
00:15:04,160 --> 00:15:05,839
certainly rather drivers that i found

414
00:15:05,839 --> 00:15:07,519
have problems

415
00:15:07,519 --> 00:15:09,760
the details of the first three have been

416
00:15:09,760 --> 00:15:11,279
made public you can find them on the

417
00:15:11,279 --> 00:15:14,000
internet and then the last one it's an

418
00:15:14,000 --> 00:15:15,600
interesting one i have never reported to

419
00:15:15,600 --> 00:15:17,680
apple i was hoping i can make an x-ray

420
00:15:17,680 --> 00:15:19,920
out of it but i never succeeded

421
00:15:19,920 --> 00:15:23,040
i'm going to introduce them today

422
00:15:23,040 --> 00:15:24,959
the last version i checked is vulnerable

423
00:15:24,959 --> 00:15:28,320
was i was 4 14.0 maybe still zeroed in

424
00:15:28,320 --> 00:15:31,759
right now i'm not sure about that

425
00:15:31,759 --> 00:15:34,959
so it exists in driver whose name is key

426
00:15:34,959 --> 00:15:37,040
delivery mse

427
00:15:37,040 --> 00:15:38,480
and as the consequence of this

428
00:15:38,480 --> 00:15:40,399
vulnerability you get to override a

429
00:15:40,399 --> 00:15:42,800
physical memory page with a control data

430
00:15:42,800 --> 00:15:44,880
doesn't it sound amazing

431
00:15:44,880 --> 00:15:46,480
i would love to learn if anyone knows

432
00:15:46,480 --> 00:15:48,720
how to exploit this

433
00:15:48,720 --> 00:15:50,079
i'm going to go through this quick

434
00:15:50,079 --> 00:15:52,240
because it's not really something new

435
00:15:52,240 --> 00:15:53,920
in fact it was actually quite a common

436
00:15:53,920 --> 00:15:55,440
type of criminal vulnerability a few

437
00:15:55,440 --> 00:15:56,720
years back

438
00:15:56,720 --> 00:15:59,759
like back in yosemite era you set up two

439
00:15:59,759 --> 00:16:01,839
threads to run one is calling external

440
00:16:01,839 --> 00:16:03,839
method another one is closing the client

441
00:16:03,839 --> 00:16:05,759
connection just keep trying until

442
00:16:05,759 --> 00:16:08,240
something magical happens

443
00:16:08,240 --> 00:16:11,759
it's a race condition essentially

444
00:16:11,759 --> 00:16:13,440
and then here's the detail of this

445
00:16:13,440 --> 00:16:15,839
vulnerability basically when the user

446
00:16:15,839 --> 00:16:18,240
client closes it will clear the owner

447
00:16:18,240 --> 00:16:20,959
task variable and one of the external

448
00:16:20,959 --> 00:16:22,720
methods it uses the same variable to

449
00:16:22,720 --> 00:16:25,040
create a memory descriptor to write data

450
00:16:25,040 --> 00:16:27,600
into a specific task with race condition

451
00:16:27,600 --> 00:16:29,279
we can clear the owner task variable

452
00:16:29,279 --> 00:16:31,360
before it's used to create a memory

453
00:16:31,360 --> 00:16:33,360
descriptor in this way everything

454
00:16:33,360 --> 00:16:35,120
remains the same except for the memory

455
00:16:35,120 --> 00:16:37,519
descriptor that's supposed to point out

456
00:16:37,519 --> 00:16:38,959
it's supposed to point to the virtual

457
00:16:38,959 --> 00:16:40,639
memory of the task but now it's points

458
00:16:40,639 --> 00:16:42,800
to the physical memory

459
00:16:42,800 --> 00:16:44,240
and it's hard to exploit this because

460
00:16:44,240 --> 00:16:45,839
you can't control the address it rises

461
00:16:45,839 --> 00:16:48,320
into the physical memory and i don't

462
00:16:48,320 --> 00:16:49,920
really understand the format of the

463
00:16:49,920 --> 00:16:52,560
physical memory address but this is but

464
00:16:52,560 --> 00:16:55,040
this one is really cool though

465
00:16:55,040 --> 00:16:56,240
and then

466
00:16:56,240 --> 00:16:58,240
i wrote some highlights about the post

467
00:16:58,240 --> 00:16:59,600
exploitation

468
00:16:59,600 --> 00:17:01,839
overall the security on mac os has been

469
00:17:01,839 --> 00:17:04,880
boost a lot especially on kernel level

470
00:17:04,880 --> 00:17:07,359
after the m1 shipping m1 chip has been

471
00:17:07,359 --> 00:17:09,839
introduced and also we see more user

472
00:17:09,839 --> 00:17:11,839
space vulnerabilities get published in

473
00:17:11,839 --> 00:17:13,039
the community

474
00:17:13,039 --> 00:17:14,880
it gets so much more attention on

475
00:17:14,880 --> 00:17:16,959
computer in the past

476
00:17:16,959 --> 00:17:19,439
so i believe the security is improving

477
00:17:19,439 --> 00:17:21,679
year after year

478
00:17:21,679 --> 00:17:23,839
and

479
00:17:24,240 --> 00:17:26,079
and all right this is the end of my talk

480
00:17:26,079 --> 00:17:27,359
i really appreciate everyone here

481
00:17:27,359 --> 00:17:30,440
listening to my talk thank you so much

482
00:17:30,440 --> 00:17:39,600
[Applause]

483
00:17:39,600 --> 00:17:41,678
you

