1
00:00:04,480 --> 00:00:07,040
so next up we have an interesting talk

2
00:00:07,040 --> 00:00:09,599
from tony of red canary who's going to

3
00:00:09,599 --> 00:00:12,639
be talking about uh the wild world of

4
00:00:12,639 --> 00:00:14,160
installers and all the really

5
00:00:14,160 --> 00:00:15,519
interesting things that go on there so

6
00:00:15,519 --> 00:00:16,880
let's give

7
00:00:16,880 --> 00:00:20,080
tony a round of applause

8
00:00:20,720 --> 00:00:22,400
my name is tony lambert i'm from red

9
00:00:22,400 --> 00:00:24,480
canary we do a lot of endpoint security

10
00:00:24,480 --> 00:00:26,160
monitoring and we happen to monitor a

11
00:00:26,160 --> 00:00:29,199
lot of mac os systems so

12
00:00:29,199 --> 00:00:30,960
i wanted to kind of talk through

13
00:00:30,960 --> 00:00:33,120
something that

14
00:00:33,120 --> 00:00:34,719
i feel like has kind of assumed

15
00:00:34,719 --> 00:00:36,800
knowledge and make it explicit knowledge

16
00:00:36,800 --> 00:00:38,320
that's something i've kind of been you

17
00:00:38,320 --> 00:00:39,760
know trend i've been kind of doing a

18
00:00:39,760 --> 00:00:41,840
little bit of work nowadays where

19
00:00:41,840 --> 00:00:43,520
you know for every one or two of us that

20
00:00:43,520 --> 00:00:45,440
understands how installers work on mac

21
00:00:45,440 --> 00:00:46,239
os

22
00:00:46,239 --> 00:00:48,480
there are hundreds of blue team folks

23
00:00:48,480 --> 00:00:50,719
working in enterprises that have no idea

24
00:00:50,719 --> 00:00:53,600
how it works have no idea how the you

25
00:00:53,600 --> 00:00:55,039
know where you can stash code and

26
00:00:55,039 --> 00:00:56,960
everything so that's kind of where this

27
00:00:56,960 --> 00:00:59,359
talk got started

28
00:00:59,359 --> 00:01:00,800
a little bit about me

29
00:01:00,800 --> 00:01:03,039
i end up uh i'm a senior malware analyst

30
00:01:03,039 --> 00:01:05,680
of red canary i tear apart malware i do

31
00:01:05,680 --> 00:01:07,520
it on all platforms i happen to focus a

32
00:01:07,520 --> 00:01:08,960
little bit more on mac some days than

33
00:01:08,960 --> 00:01:11,200
others i always have to include

34
00:01:11,200 --> 00:01:12,960
something a little bit fun so my wife

35
00:01:12,960 --> 00:01:14,720
and i have an adopted

36
00:01:14,720 --> 00:01:17,040
greyhound at home a retired racer

37
00:01:17,040 --> 00:01:18,479
if you're ever looking you know this is

38
00:01:18,479 --> 00:01:21,040
the dog tax for the day so if you uh if

39
00:01:21,040 --> 00:01:22,560
you're ever looking for a good apartment

40
00:01:22,560 --> 00:01:23,759
pet you're ever looking to give an

41
00:01:23,759 --> 00:01:26,000
animal a good home absolutely go for

42
00:01:26,000 --> 00:01:27,600
some retired racers they're looking for

43
00:01:27,600 --> 00:01:30,158
good homes

44
00:01:30,560 --> 00:01:31,920
so today

45
00:01:31,920 --> 00:01:33,920
the big thing i wanted to talk through

46
00:01:33,920 --> 00:01:35,600
with installers is a few different

47
00:01:35,600 --> 00:01:37,680
categories i wanted to talk about

48
00:01:37,680 --> 00:01:40,640
package based installers pkgs

49
00:01:40,640 --> 00:01:43,439
um dmg based installers you know

50
00:01:43,439 --> 00:01:45,040
everybody just double click and drag

51
00:01:45,040 --> 00:01:46,320
over those

52
00:01:46,320 --> 00:01:49,119
and then developer libraries because

53
00:01:49,119 --> 00:01:50,560
we end up having a lot of folks that

54
00:01:50,560 --> 00:01:52,240
talk to us that are really interested in

55
00:01:52,240 --> 00:01:54,560
either supply chain compromise type

56
00:01:54,560 --> 00:01:55,520
stuff

57
00:01:55,520 --> 00:01:57,680
or you know we have a lot of customers a

58
00:01:57,680 --> 00:01:59,280
lot of folks in the community that talk

59
00:01:59,280 --> 00:02:01,680
to us who are development shops that run

60
00:02:01,680 --> 00:02:03,680
mac os so

61
00:02:03,680 --> 00:02:04,960
these development shops are going to

62
00:02:04,960 --> 00:02:06,640
have developer libraries they're going

63
00:02:06,640 --> 00:02:08,318
to have all sorts of third-party stuff

64
00:02:08,318 --> 00:02:09,598
and their projects that they need to

65
00:02:09,598 --> 00:02:12,238
keep track of

66
00:02:12,879 --> 00:02:15,360
so starting out i really wanted to do a

67
00:02:15,360 --> 00:02:17,360
little bit of deliberate

68
00:02:17,360 --> 00:02:19,120
talk about like what really is an

69
00:02:19,120 --> 00:02:21,280
installer

70
00:02:21,280 --> 00:02:23,120
if you're coming to this from a windows

71
00:02:23,120 --> 00:02:24,480
platform

72
00:02:24,480 --> 00:02:26,080
we're going to talk about like an

73
00:02:26,080 --> 00:02:27,440
installer is going to be anything that

74
00:02:27,440 --> 00:02:29,680
makes executable code you know written

75
00:02:29,680 --> 00:02:31,680
to disk you know there's no such thing

76
00:02:31,680 --> 00:02:34,319
as immaculate compilation code

77
00:02:34,319 --> 00:02:37,120
doesn't spring from nothing it just has

78
00:02:37,120 --> 00:02:40,000
to be put there somehow so an installer

79
00:02:40,000 --> 00:02:41,200
is going to be anything that writes

80
00:02:41,200 --> 00:02:43,040
executable code to disk it's going to

81
00:02:43,040 --> 00:02:45,040
lay down some sort of settings and it

82
00:02:45,040 --> 00:02:47,280
may do network connections to get more

83
00:02:47,280 --> 00:02:49,280
executable code

84
00:02:49,280 --> 00:02:51,040
if we're talking about this from windows

85
00:02:51,040 --> 00:02:52,239
platform

86
00:02:52,239 --> 00:02:54,080
this is going to be you know stuff that

87
00:02:54,080 --> 00:02:56,000
is installed to program files we're

88
00:02:56,000 --> 00:02:58,480
going to have registry settings

89
00:02:58,480 --> 00:03:00,800
network connections to go get more dlls

90
00:03:00,800 --> 00:03:02,640
things like that

91
00:03:02,640 --> 00:03:05,440
the same concepts apply to mac os but

92
00:03:05,440 --> 00:03:07,280
the artifacts are different

93
00:03:07,280 --> 00:03:08,879
so instead of you know the windows

94
00:03:08,879 --> 00:03:10,959
registry you've got p lists and config

95
00:03:10,959 --> 00:03:13,680
files uh instead of dlls you'll have die

96
00:03:13,680 --> 00:03:14,800
libs you'll still have your network

97
00:03:14,800 --> 00:03:16,800
connections to go get more stuff

98
00:03:16,800 --> 00:03:18,480
you know there's you know that little

99
00:03:18,480 --> 00:03:20,159
bit of just

100
00:03:20,159 --> 00:03:22,480
fine idiosyncrasy differences

101
00:03:22,480 --> 00:03:23,519
and

102
00:03:23,519 --> 00:03:24,640
when we start talking through this

103
00:03:24,640 --> 00:03:26,400
definition of

104
00:03:26,400 --> 00:03:28,480
you know anything that lays down more

105
00:03:28,480 --> 00:03:30,799
executable code and settings

106
00:03:30,799 --> 00:03:32,319
when we talk about that deliberately

107
00:03:32,319 --> 00:03:34,080
there's not a lot of difference between

108
00:03:34,080 --> 00:03:36,480
malware and installer the difference is

109
00:03:36,480 --> 00:03:39,360
like really you you trust an installer

110
00:03:39,360 --> 00:03:40,959
or you're led to believe that you should

111
00:03:40,959 --> 00:03:42,480
trust an installer

112
00:03:42,480 --> 00:03:43,599
and

113
00:03:43,599 --> 00:03:48,319
whereas malware you know who knows

114
00:03:49,120 --> 00:03:50,560
first big one to talk about would be

115
00:03:50,560 --> 00:03:52,400
packages

116
00:03:52,400 --> 00:03:53,840
um

117
00:03:53,840 --> 00:03:54,720
so

118
00:03:54,720 --> 00:03:56,319
if we're kind of talking through like

119
00:03:56,319 --> 00:03:58,720
analogs with windows other platforms so

120
00:03:58,720 --> 00:04:00,640
package installers are a little bit more

121
00:04:00,640 --> 00:04:01,680
like

122
00:04:01,680 --> 00:04:04,159
msi's a little bit more like rpm

123
00:04:04,159 --> 00:04:06,319
packages things like that that you might

124
00:04:06,319 --> 00:04:08,400
see on other platforms you know if

125
00:04:08,400 --> 00:04:09,920
you're used to like seeing on windows

126
00:04:09,920 --> 00:04:12,480
setup.exe or something like that it

127
00:04:12,480 --> 00:04:15,120
doesn't precisely work in the same way

128
00:04:15,120 --> 00:04:16,079
so

129
00:04:16,079 --> 00:04:18,000
uh in the case of package files these

130
00:04:18,000 --> 00:04:20,560
are xar compressed archives

131
00:04:20,560 --> 00:04:22,479
inside they have some gzip components

132
00:04:22,479 --> 00:04:23,520
that are compressed together they're

133
00:04:23,520 --> 00:04:25,199
really easy to break apart in linux a

134
00:04:25,199 --> 00:04:27,120
lot of times

135
00:04:27,120 --> 00:04:29,840
if you are lucky enough to have a mac vm

136
00:04:29,840 --> 00:04:31,680
something that's working well for you

137
00:04:31,680 --> 00:04:34,400
you can uh do a package util i believe

138
00:04:34,400 --> 00:04:36,800
and uh break those apart but hey if

139
00:04:36,800 --> 00:04:38,720
you're working from remnics or another

140
00:04:38,720 --> 00:04:40,960
malware analysis distro you can

141
00:04:40,960 --> 00:04:43,199
pretty easily use g unzip to to pull

142
00:04:43,199 --> 00:04:45,040
those apart

143
00:04:45,040 --> 00:04:47,360
and during the installation they support

144
00:04:47,360 --> 00:04:49,360
scripting there's a few different places

145
00:04:49,360 --> 00:04:52,160
that you can stash code

146
00:04:52,160 --> 00:04:54,080
and the processes that are involved like

147
00:04:54,080 --> 00:04:56,720
you know like we were talking about

148
00:04:56,720 --> 00:04:58,479
are a little bit different like on

149
00:04:58,479 --> 00:05:00,639
windows you might have like a setup.exe

150
00:05:00,639 --> 00:05:03,199
or an msi exec or something like that on

151
00:05:03,199 --> 00:05:05,440
linux it's going to be like python

152
00:05:05,440 --> 00:05:08,160
running yum running dnf or whatever else

153
00:05:08,160 --> 00:05:10,400
that's installing your package but on

154
00:05:10,400 --> 00:05:12,240
mac there's a few different processes

155
00:05:12,240 --> 00:05:13,840
specifically targeted towards

156
00:05:13,840 --> 00:05:15,120
installation

157
00:05:15,120 --> 00:05:15,919
so

158
00:05:15,919 --> 00:05:17,280
the first big one is going to be

159
00:05:17,280 --> 00:05:19,520
installer with a little i the lowercase

160
00:05:19,520 --> 00:05:20,320
i

161
00:05:20,320 --> 00:05:21,759
i have to say that because there's like

162
00:05:21,759 --> 00:05:24,000
two installers

163
00:05:24,000 --> 00:05:25,680
this is going to be something that you

164
00:05:25,680 --> 00:05:27,600
see more from the command line so if

165
00:05:27,600 --> 00:05:29,919
you're deploying packages via jamf or

166
00:05:29,919 --> 00:05:31,840
another client management tool you're

167
00:05:31,840 --> 00:05:33,280
probably going to see this a lot in your

168
00:05:33,280 --> 00:05:34,800
environment

169
00:05:34,800 --> 00:05:36,720
you're going to expect you know these

170
00:05:36,720 --> 00:05:39,360
are the these are the um files that are

171
00:05:39,360 --> 00:05:42,080
coming out of a package archive itself

172
00:05:42,080 --> 00:05:43,680
so you might see like the file

173
00:05:43,680 --> 00:05:46,160
modifications from installer include

174
00:05:46,160 --> 00:05:48,639
pre-installed post install scripts

175
00:05:48,639 --> 00:05:50,320
bill of materials things like that

176
00:05:50,320 --> 00:05:52,880
coming out

177
00:05:52,880 --> 00:05:56,319
so uppercase installer from install.app

178
00:05:56,319 --> 00:05:58,319
this is going to be more of the the gui

179
00:05:58,319 --> 00:06:00,880
version of this so you start when you

180
00:06:00,880 --> 00:06:02,160
start and you double click on the

181
00:06:02,160 --> 00:06:03,919
package and

182
00:06:03,919 --> 00:06:06,000
round about then the installer.app

183
00:06:06,000 --> 00:06:08,160
process is going to start popping up and

184
00:06:08,160 --> 00:06:10,720
it's going to spawn off of launch d

185
00:06:10,720 --> 00:06:12,800
so

186
00:06:12,800 --> 00:06:15,039
it's it's a little bit of a weird thing

187
00:06:15,039 --> 00:06:17,600
for windows people to experience so if

188
00:06:17,600 --> 00:06:19,280
we're going from this from like the

189
00:06:19,280 --> 00:06:20,880
windows side of life

190
00:06:20,880 --> 00:06:23,520
you might see setup.exe spawning off of

191
00:06:23,520 --> 00:06:26,080
windows explorer or something like that

192
00:06:26,080 --> 00:06:28,000
that is an entire world away from like

193
00:06:28,000 --> 00:06:30,000
your blue team going wait a minute

194
00:06:30,000 --> 00:06:31,919
installers spawn from launch d what is

195
00:06:31,919 --> 00:06:33,039
this mess

196
00:06:33,039 --> 00:06:35,520
and so they then have to track back and

197
00:06:35,520 --> 00:06:37,440
see you know what else happened along

198
00:06:37,440 --> 00:06:39,680
that timeline

199
00:06:39,680 --> 00:06:41,840
and the same as with lowercase i

200
00:06:41,840 --> 00:06:44,560
installer just unpacks everything and

201
00:06:44,560 --> 00:06:46,080
you know depending on the size of your

202
00:06:46,080 --> 00:06:47,840
package you may have loads of files you

203
00:06:47,840 --> 00:06:51,440
may have very little files

204
00:06:51,440 --> 00:06:53,360
and the final one that i wanted to talk

205
00:06:53,360 --> 00:06:55,759
about with the installation processes is

206
00:06:55,759 --> 00:06:57,039
install d

207
00:06:57,039 --> 00:06:58,000
um

208
00:06:58,000 --> 00:06:59,599
kind of you know

209
00:06:59,599 --> 00:07:03,360
with saba talking about um

210
00:07:03,360 --> 00:07:05,280
having like predetermined spaces

211
00:07:05,280 --> 00:07:06,639
predetermined folders in the

212
00:07:06,639 --> 00:07:08,479
installation being bad

213
00:07:08,479 --> 00:07:10,319
so install d is going to be this

214
00:07:10,319 --> 00:07:12,960
component that takes all of the content

215
00:07:12,960 --> 00:07:14,560
all of the payload content from a

216
00:07:14,560 --> 00:07:17,039
package and shove it into a sandbox

217
00:07:17,039 --> 00:07:19,080
folder sandbox folder is going to have a

218
00:07:19,080 --> 00:07:21,840
semi-randomized path it's going to be

219
00:07:21,840 --> 00:07:23,680
something that you know it's not a

220
00:07:23,680 --> 00:07:26,639
pre-deterministic folder path so you

221
00:07:26,639 --> 00:07:29,360
can't really shove as many like symbolic

222
00:07:29,360 --> 00:07:30,960
links something like that to mess with

223
00:07:30,960 --> 00:07:32,240
the installation

224
00:07:32,240 --> 00:07:33,759
there are typically thousands upon

225
00:07:33,759 --> 00:07:35,520
thousands of file modifications and then

226
00:07:35,520 --> 00:07:37,599
afterwards once everything is laid down

227
00:07:37,599 --> 00:07:38,639
to disk

228
00:07:38,639 --> 00:07:41,520
um install d then calls a shelf process

229
00:07:41,520 --> 00:07:43,280
to merge that installation with a file

230
00:07:43,280 --> 00:07:45,360
system so if you've ever used block

231
00:07:45,360 --> 00:07:48,080
block and you have noticed hey i get a

232
00:07:48,080 --> 00:07:49,680
lot of um

233
00:07:49,680 --> 00:07:51,759
i get a lot of notifications that shove

234
00:07:51,759 --> 00:07:54,720
is managing my launch agents this is why

235
00:07:54,720 --> 00:07:56,319
so this is actually the little the

236
00:07:56,319 --> 00:07:57,599
little bit of the process where that

237
00:07:57,599 --> 00:08:00,000
happens

238
00:08:00,319 --> 00:08:01,919
all right so the fun part where can we

239
00:08:01,919 --> 00:08:03,840
actually stash code

240
00:08:03,840 --> 00:08:05,919
so

241
00:08:05,919 --> 00:08:07,280
there's a few different places and the

242
00:08:07,280 --> 00:08:08,960
first one i wanted to cover are two

243
00:08:08,960 --> 00:08:10,240
different places first one i wanted to

244
00:08:10,240 --> 00:08:12,000
cover where the actual scripts inside

245
00:08:12,000 --> 00:08:13,599
package archives

246
00:08:13,599 --> 00:08:14,800
um

247
00:08:14,800 --> 00:08:16,639
and this is something that we absolutely

248
00:08:16,639 --> 00:08:18,479
see adversaries using

249
00:08:18,479 --> 00:08:21,199
on a weekly basis pretty much so first

250
00:08:21,199 --> 00:08:22,720
of all we have pre-install and post

251
00:08:22,720 --> 00:08:24,560
install scripts they're exactly what

252
00:08:24,560 --> 00:08:26,960
they sound like if you're launching a

253
00:08:26,960 --> 00:08:28,240
package file

254
00:08:28,240 --> 00:08:30,319
pre-install happens before post install

255
00:08:30,319 --> 00:08:32,479
happens after they both have to exit

256
00:08:32,479 --> 00:08:34,080
with a zero

257
00:08:34,080 --> 00:08:35,839
return code or else the installation

258
00:08:35,839 --> 00:08:38,240
fails

259
00:08:38,240 --> 00:08:39,839
and you know bad guys really get into

260
00:08:39,839 --> 00:08:42,000
this adversaries really figure out how

261
00:08:42,000 --> 00:08:43,760
to use this to their advantage

262
00:08:43,760 --> 00:08:46,240
most of the time with the process

263
00:08:46,240 --> 00:08:48,000
hierarchy we see it coming off of a

264
00:08:48,000 --> 00:08:49,839
package script service process or

265
00:08:49,839 --> 00:08:52,560
installer it depends like if you've

266
00:08:52,560 --> 00:08:54,320
double clicked on the package or if it's

267
00:08:54,320 --> 00:08:56,480
coming from jamf or something else where

268
00:08:56,480 --> 00:08:59,040
you're doing client management

269
00:08:59,040 --> 00:09:00,320
the scripts when you start looking

270
00:09:00,320 --> 00:09:01,760
through the documentation a lot of the

271
00:09:01,760 --> 00:09:03,600
documentation is written

272
00:09:03,600 --> 00:09:05,200
with the assumption that you're making

273
00:09:05,200 --> 00:09:08,480
these as shell scripts so let's say you

274
00:09:08,480 --> 00:09:11,120
know you've got a bunch of copy commands

275
00:09:11,120 --> 00:09:13,200
cp commands that you want to run you can

276
00:09:13,200 --> 00:09:14,640
absolutely do that with pre-install and

277
00:09:14,640 --> 00:09:16,800
post install but you can really use

278
00:09:16,800 --> 00:09:18,959
anything that has like a shebang in the

279
00:09:18,959 --> 00:09:21,120
script so if you want to use python you

280
00:09:21,120 --> 00:09:23,279
can use python if you want to use

281
00:09:23,279 --> 00:09:25,920
perl and you enjoy like compiled output

282
00:09:25,920 --> 00:09:28,640
from a 96k modem you can use perl

283
00:09:28,640 --> 00:09:30,640
and you know you can even use like

284
00:09:30,640 --> 00:09:34,319
binary executables if you want

285
00:09:34,880 --> 00:09:36,080
kind of including a couple of

286
00:09:36,080 --> 00:09:38,399
screenshots here so the one on top

287
00:09:38,399 --> 00:09:40,800
was an example of something that we see

288
00:09:40,800 --> 00:09:42,640
in the wild where if you use the

289
00:09:42,640 --> 00:09:45,920
specialized jamf installer packages for

290
00:09:45,920 --> 00:09:48,320
uh viscosity they actually have

291
00:09:48,320 --> 00:09:50,320
pre-install and post install binaries

292
00:09:50,320 --> 00:09:52,320
instead of scripts and they're in their

293
00:09:52,320 --> 00:09:53,519
packaging

294
00:09:53,519 --> 00:09:54,959
and then for another one towards the

295
00:09:54,959 --> 00:09:58,640
bottom you know we have shell scripts

296
00:09:59,680 --> 00:10:02,079
and then on top we have more python and

297
00:10:02,079 --> 00:10:02,880
then

298
00:10:02,880 --> 00:10:05,519
at the bottom imovie lets you use perl

299
00:10:05,519 --> 00:10:07,839
to do its uh its scripting abilities in

300
00:10:07,839 --> 00:10:10,000
there

301
00:10:12,079 --> 00:10:13,360
so then we have to kind of figure out

302
00:10:13,360 --> 00:10:16,000
like how does the package know

303
00:10:16,000 --> 00:10:17,680
to do the pre-installed post install

304
00:10:17,680 --> 00:10:18,880
thing

305
00:10:18,880 --> 00:10:20,560
does it automatically assume you know

306
00:10:20,560 --> 00:10:22,240
not all packages have a pre-installed

307
00:10:22,240 --> 00:10:24,240
post install all of that is governed by

308
00:10:24,240 --> 00:10:25,920
a package info file that's found within

309
00:10:25,920 --> 00:10:28,079
the package on the left hand side here

310
00:10:28,079 --> 00:10:30,839
i've got a kind of tree view of a

311
00:10:30,839 --> 00:10:33,120
package shout out to the zoom people

312
00:10:33,120 --> 00:10:34,880
thank you for let for not being mad at

313
00:10:34,880 --> 00:10:35,839
me like

314
00:10:35,839 --> 00:10:37,519
um including a tree view of your

315
00:10:37,519 --> 00:10:40,399
packages here um by the way these were

316
00:10:40,399 --> 00:10:42,640
absolutely not malicious good 100 good

317
00:10:42,640 --> 00:10:44,880
job guys and

318
00:10:44,880 --> 00:10:46,480
um

319
00:10:46,480 --> 00:10:47,680
yeah

320
00:10:47,680 --> 00:10:49,120
there we go

321
00:10:49,120 --> 00:10:51,040
doing your jobs yeah

322
00:10:51,040 --> 00:10:52,880
um so

323
00:10:52,880 --> 00:10:54,399
we have in our payloads here we have

324
00:10:54,399 --> 00:10:56,480
like the zoom us application bundle then

325
00:10:56,480 --> 00:10:57,839
we have pre-installed post install

326
00:10:57,839 --> 00:10:59,760
scripts and if we look into the package

327
00:10:59,760 --> 00:11:03,120
info file we have a pre-install on post

328
00:11:03,120 --> 00:11:05,760
install so the pre-install for zoom is

329
00:11:05,760 --> 00:11:07,440
going to say hey do we have any previous

330
00:11:07,440 --> 00:11:09,839
versions of zoom on this host if we do

331
00:11:09,839 --> 00:11:11,760
maybe we want to upgrade let's do some

332
00:11:11,760 --> 00:11:14,240
prep and then post install says hey you

333
00:11:14,240 --> 00:11:15,839
know let's clean up everything now that

334
00:11:15,839 --> 00:11:18,240
we're done

335
00:11:18,480 --> 00:11:20,160
at some point or another adversaries

336
00:11:20,160 --> 00:11:22,079
figured out that there was this neat

337
00:11:22,079 --> 00:11:23,680
little thing where you can make payload

338
00:11:23,680 --> 00:11:25,200
free packages

339
00:11:25,200 --> 00:11:27,279
sometimes you know

340
00:11:27,279 --> 00:11:28,720
they don't really need to include their

341
00:11:28,720 --> 00:11:30,720
malware inside a package what if they

342
00:11:30,720 --> 00:11:32,480
just want the scripts

343
00:11:32,480 --> 00:11:34,399
admins sometimes do this too this is a

344
00:11:34,399 --> 00:11:35,839
really simple way for you to use

345
00:11:35,839 --> 00:11:36,959
something like

346
00:11:36,959 --> 00:11:38,399
um

347
00:11:38,399 --> 00:11:40,240
like jams use something that lets you

348
00:11:40,240 --> 00:11:41,760
distribute packages

349
00:11:41,760 --> 00:11:43,920
and just do scripting content like you

350
00:11:43,920 --> 00:11:45,279
know

351
00:11:45,279 --> 00:11:46,240
um

352
00:11:46,240 --> 00:11:48,079
you know some somehow like you might

353
00:11:48,079 --> 00:11:50,240
send like bat scripts or powershell

354
00:11:50,240 --> 00:11:51,519
scripts on the windows side you know

355
00:11:51,519 --> 00:11:53,120
just send that over on

356
00:11:53,120 --> 00:11:55,600
uh mac os instead of enabling ssh and

357
00:11:55,600 --> 00:11:57,040
doing that way

358
00:11:57,040 --> 00:11:59,600
so in those cases all the work for an

359
00:11:59,600 --> 00:12:00,800
installation

360
00:12:00,800 --> 00:12:03,600
is offloaded entirely away from the

361
00:12:03,600 --> 00:12:05,200
actual install d

362
00:12:05,200 --> 00:12:07,760
all of that stuff and put over into you

363
00:12:07,760 --> 00:12:09,920
know the work coming off of the script

364
00:12:09,920 --> 00:12:11,360
so we're going to see a lot of curl

365
00:12:11,360 --> 00:12:13,440
commands copy commands

366
00:12:13,440 --> 00:12:15,760
zips dittos all sorts of things like

367
00:12:15,760 --> 00:12:18,480
that where it's on packaging things

368
00:12:18,480 --> 00:12:20,959
when you start looking into the package

369
00:12:20,959 --> 00:12:22,639
the package info file will literally

370
00:12:22,639 --> 00:12:25,440
show you zero bytes for a payload so you

371
00:12:25,440 --> 00:12:27,279
can actually have evidence there while

372
00:12:27,279 --> 00:12:28,880
you're doing analysis

373
00:12:28,880 --> 00:12:30,800
there is nothing in this package at all

374
00:12:30,800 --> 00:12:34,240
it's literally just scripts

375
00:12:34,560 --> 00:12:36,160
so it's all cool

376
00:12:36,160 --> 00:12:38,000
this isn't stunt hacking this is

377
00:12:38,000 --> 00:12:39,440
literally something that happens in the

378
00:12:39,440 --> 00:12:41,519
wild here so let's talk about how this

379
00:12:41,519 --> 00:12:44,560
actually happens so in first case with

380
00:12:44,560 --> 00:12:46,880
apple juice the

381
00:12:46,880 --> 00:12:48,639
alleged suspected

382
00:12:48,639 --> 00:12:50,720
north korean malware however we want to

383
00:12:50,720 --> 00:12:53,440
put it they used um

384
00:12:53,440 --> 00:12:54,880
uh they used pre-install and post

385
00:12:54,880 --> 00:12:56,000
install scripts during their

386
00:12:56,000 --> 00:12:58,000
installation of fake

387
00:12:58,000 --> 00:13:00,399
uh cryptocurrency malware or fake

388
00:13:00,399 --> 00:13:02,560
cryptocurrency tracking things

389
00:13:02,560 --> 00:13:04,720
so those absolutely laid down launch

390
00:13:04,720 --> 00:13:06,399
agents they lay down persistence for

391
00:13:06,399 --> 00:13:08,639
that malware to happen

392
00:13:08,639 --> 00:13:10,639
there's another

393
00:13:10,639 --> 00:13:11,920
yeah there we go

394
00:13:11,920 --> 00:13:14,160
there's another activity cluster that we

395
00:13:14,160 --> 00:13:17,360
track of red canary called silver toucan

396
00:13:17,360 --> 00:13:19,440
if you pay attention to confined to some

397
00:13:19,440 --> 00:13:20,720
of the others

398
00:13:20,720 --> 00:13:23,279
they'll track it also as a wizard update

399
00:13:23,279 --> 00:13:25,360
i believe

400
00:13:25,360 --> 00:13:27,279
this family will

401
00:13:27,279 --> 00:13:28,959
the malware that's in this activity

402
00:13:28,959 --> 00:13:31,360
cluster will start using pre-install and

403
00:13:31,360 --> 00:13:33,120
post install scripts instead of

404
00:13:33,120 --> 00:13:34,800
including content

405
00:13:34,800 --> 00:13:36,959
they'll just download everything

406
00:13:36,959 --> 00:13:39,040
their pre-install says hey

407
00:13:39,040 --> 00:13:40,959
what version am i what version do i need

408
00:13:40,959 --> 00:13:43,600
to uh do i need to download figures out

409
00:13:43,600 --> 00:13:45,600
even what country you're in and then the

410
00:13:45,600 --> 00:13:46,959
post install

411
00:13:46,959 --> 00:13:49,279
does all of the downloading all of the

412
00:13:49,279 --> 00:13:51,120
unzipping and unpackaging and

413
00:13:51,120 --> 00:13:52,639
persistence for you

414
00:13:52,639 --> 00:13:55,199
so in this case they don't even have to

415
00:13:55,199 --> 00:13:57,519
update a package with a new version they

416
00:13:57,519 --> 00:13:59,440
can literally just re redistribute the

417
00:13:59,440 --> 00:14:01,839
same package over and over and over and

418
00:14:01,839 --> 00:14:03,680
only update the stuff that's on their

419
00:14:03,680 --> 00:14:06,399
server sides

420
00:14:06,959 --> 00:14:10,160
by the way this is also in c2 frameworks

421
00:14:10,160 --> 00:14:11,279
so if you want to be a little bit

422
00:14:11,279 --> 00:14:12,880
dangerous when you get home

423
00:14:12,880 --> 00:14:14,639
you can go and take a look at empire and

424
00:14:14,639 --> 00:14:18,000
you can look at mystical so at the top

425
00:14:18,000 --> 00:14:20,639
and mystical is a project that lets you

426
00:14:20,639 --> 00:14:21,600
sort of

427
00:14:21,600 --> 00:14:24,639
wedge mythic and apfel agents into

428
00:14:24,639 --> 00:14:26,320
installers into a little bit more of a

429
00:14:26,320 --> 00:14:28,560
dangerous form that you can work with so

430
00:14:28,560 --> 00:14:30,720
at the top left is literally the

431
00:14:30,720 --> 00:14:33,920
template that empire uses

432
00:14:33,920 --> 00:14:35,519
top right is the

433
00:14:35,519 --> 00:14:37,519
the template that mystical uses for most

434
00:14:37,519 --> 00:14:39,279
of its pre-installed post install

435
00:14:39,279 --> 00:14:40,240
scripts

436
00:14:40,240 --> 00:14:42,000
and then if you really want to get fancy

437
00:14:42,000 --> 00:14:42,720
the

438
00:14:42,720 --> 00:14:45,360
simple installer like that actually lays

439
00:14:45,360 --> 00:14:47,360
down files and mystical is the one that

440
00:14:47,360 --> 00:14:50,320
gets used on bottom

441
00:14:51,519 --> 00:14:52,320
so

442
00:14:52,320 --> 00:14:54,160
finally the the last little bit of the

443
00:14:54,160 --> 00:14:55,600
package we want to talk about a

444
00:14:55,600 --> 00:14:56,959
distribution

445
00:14:56,959 --> 00:14:59,120
xml file

446
00:14:59,120 --> 00:15:00,800
so

447
00:15:00,800 --> 00:15:02,880
in this in distribution xml this is

448
00:15:02,880 --> 00:15:05,120
typically a file that apple said it

449
00:15:05,120 --> 00:15:07,040
defines the installation experience for

450
00:15:07,040 --> 00:15:08,639
an installer

451
00:15:08,639 --> 00:15:10,399
it's supposed to have things like

452
00:15:10,399 --> 00:15:12,560
installation checks versioning all this

453
00:15:12,560 --> 00:15:14,880
different stuff in it however somebody

454
00:15:14,880 --> 00:15:16,480
at some point said you know what let's

455
00:15:16,480 --> 00:15:18,800
wedge javascript in there

456
00:15:18,800 --> 00:15:22,160
don't really know why but hey it works

457
00:15:22,160 --> 00:15:24,079
usually it's for things like system

458
00:15:24,079 --> 00:15:26,079
checks figuring out you know is my

459
00:15:26,079 --> 00:15:28,560
version of max capable with this do i

460
00:15:28,560 --> 00:15:30,480
have like this space on the file system

461
00:15:30,480 --> 00:15:32,560
things like that however at some point

462
00:15:32,560 --> 00:15:34,800
somebody said let's let you run system

463
00:15:34,800 --> 00:15:36,800
commands

464
00:15:36,800 --> 00:15:37,759
um

465
00:15:37,759 --> 00:15:40,160
there's a system.run command from the

466
00:15:40,160 --> 00:15:41,759
javascript api

467
00:15:41,759 --> 00:15:43,199
and if you're going through and you're

468
00:15:43,199 --> 00:15:44,959
double clicking on a package and this

469
00:15:44,959 --> 00:15:47,600
distribution xml has a system.run

470
00:15:47,600 --> 00:15:49,839
command in it it will spawn off of

471
00:15:49,839 --> 00:15:53,360
installer with the uppercase i

472
00:15:53,360 --> 00:15:56,160
and in the documentation hopefully it's

473
00:15:56,160 --> 00:15:58,160
hopefully it's pretty visible

474
00:15:58,160 --> 00:16:00,639
but the documentation explicitly says

475
00:16:00,639 --> 00:16:02,880
launches a given process a program from

476
00:16:02,880 --> 00:16:05,040
a resources directory

477
00:16:05,040 --> 00:16:06,720
what they kind of omit is it doesn't

478
00:16:06,720 --> 00:16:08,959
have to be in the resources directory it

479
00:16:08,959 --> 00:16:10,399
can be in whatever directory you want it

480
00:16:10,399 --> 00:16:12,639
to be

481
00:16:13,279 --> 00:16:14,480
and the best part about it is it

482
00:16:14,480 --> 00:16:17,040
executes his root so

483
00:16:17,040 --> 00:16:18,959
get all that going so

484
00:16:18,959 --> 00:16:20,880
the activity cluster that we tracked is

485
00:16:20,880 --> 00:16:23,279
silver sparrow from earlier in the year

486
00:16:23,279 --> 00:16:25,040
the malware family and silver sparrow

487
00:16:25,040 --> 00:16:27,440
used that to effect to

488
00:16:27,440 --> 00:16:30,240
essentially run commands as root coming

489
00:16:30,240 --> 00:16:31,759
straight off of this installer there

490
00:16:31,759 --> 00:16:33,120
were no pre-installed post-install

491
00:16:33,120 --> 00:16:35,040
scripts in the malware it was all just

492
00:16:35,040 --> 00:16:38,480
wedged in the distribution file

493
00:16:40,000 --> 00:16:41,600
so a little bit of detection advice

494
00:16:41,600 --> 00:16:44,320
around this so you're definitely not

495
00:16:44,320 --> 00:16:45,839
going to hear me say like the five

496
00:16:45,839 --> 00:16:48,079
dollar security advice look for launch

497
00:16:48,079 --> 00:16:50,800
agents no all right this is going to be

498
00:16:50,800 --> 00:16:53,759
like the little weird thing where

499
00:16:53,759 --> 00:16:56,160
if you have a sock if you have

500
00:16:56,160 --> 00:16:57,440
monitoring it's going to be a little bit

501
00:16:57,440 --> 00:16:58,880
more difficult for you to dial in on

502
00:16:58,880 --> 00:17:00,079
some of this

503
00:17:00,079 --> 00:17:02,000
so if you're going to do threat hunts

504
00:17:02,000 --> 00:17:03,680
you might want to look for suspicious

505
00:17:03,680 --> 00:17:04,880
processes

506
00:17:04,880 --> 00:17:07,359
coming off of installer with capital i

507
00:17:07,359 --> 00:17:10,480
lowercase i or package script service if

508
00:17:10,480 --> 00:17:12,319
you're targeting specifically threat

509
00:17:12,319 --> 00:17:14,799
hunts for pre-installer post install

510
00:17:14,799 --> 00:17:16,160
look for those things in the command

511
00:17:16,160 --> 00:17:17,359
line

512
00:17:17,359 --> 00:17:18,640
look for those strings in the command

513
00:17:18,640 --> 00:17:20,640
line so they can be again any kinds of

514
00:17:20,640 --> 00:17:22,400
scripts so you can't assume that this is

515
00:17:22,400 --> 00:17:24,240
going to be a shell script there's a

516
00:17:24,240 --> 00:17:26,079
possibility you know maybe you're you're

517
00:17:26,079 --> 00:17:28,319
also looking for python or pearl or

518
00:17:28,319 --> 00:17:30,559
whatever else

519
00:17:30,559 --> 00:17:32,000
as for what to expect if you're doing

520
00:17:32,000 --> 00:17:33,679
this in like a continuous monitoring

521
00:17:33,679 --> 00:17:35,440
environment there's going to be a lot of

522
00:17:35,440 --> 00:17:37,440
weird noise and not a lot of really good

523
00:17:37,440 --> 00:17:38,720
signal because

524
00:17:38,720 --> 00:17:41,520
people make arbitrary very strange

525
00:17:41,520 --> 00:17:43,600
design decisions

526
00:17:43,600 --> 00:17:44,640
um

527
00:17:44,640 --> 00:17:47,679
there's not really one solid standard of

528
00:17:47,679 --> 00:17:49,440
here is how you should create a package

529
00:17:49,440 --> 00:17:50,400
file

530
00:17:50,400 --> 00:17:52,240
and as a result of that you know

531
00:17:52,240 --> 00:17:54,720
everybody kind of does this arbitrary

532
00:17:54,720 --> 00:17:56,400
sort of dance

533
00:17:56,400 --> 00:17:59,760
where they do it their own way and then

534
00:17:59,760 --> 00:18:01,600
because by virtue of

535
00:18:01,600 --> 00:18:03,679
scripting being involved as well as some

536
00:18:03,679 --> 00:18:05,440
of apple's built-in stuff

537
00:18:05,440 --> 00:18:07,440
you know who knows what the package is

538
00:18:07,440 --> 00:18:09,440
actually going to do or needs to do

539
00:18:09,440 --> 00:18:11,200
there's even a possibility like hey this

540
00:18:11,200 --> 00:18:13,280
may look evil as heck but at the end of

541
00:18:13,280 --> 00:18:16,720
the day it's really real

542
00:18:17,679 --> 00:18:20,480
all right so dmgs

543
00:18:20,480 --> 00:18:21,360
um

544
00:18:21,360 --> 00:18:22,480
if you're coming to this from the

545
00:18:22,480 --> 00:18:24,880
windows side of life think of dmgs as

546
00:18:24,880 --> 00:18:27,440
like vhd files these are

547
00:18:27,440 --> 00:18:30,240
essentially virtual removable disks

548
00:18:30,240 --> 00:18:32,480
they contain their own file systems and

549
00:18:32,480 --> 00:18:34,480
you know for better for worse they kind

550
00:18:34,480 --> 00:18:37,840
of get managed like removable media

551
00:18:37,840 --> 00:18:39,120
just think like

552
00:18:39,120 --> 00:18:41,679
virtually mounting an iso mounting a vhd

553
00:18:41,679 --> 00:18:44,000
something like that

554
00:18:44,000 --> 00:18:46,400
and you know kind of used to this sort

555
00:18:46,400 --> 00:18:48,240
of thing where you take one application

556
00:18:48,240 --> 00:18:49,919
bundle drag and drop over to

557
00:18:49,919 --> 00:18:52,640
applications and let it run

558
00:18:52,640 --> 00:18:54,640
so what does it look like on the inside

559
00:18:54,640 --> 00:18:56,240
on the inside when you start looking at

560
00:18:56,240 --> 00:18:57,120
these

561
00:18:57,120 --> 00:18:58,400
um

562
00:18:58,400 --> 00:19:00,320
there's usually like a fairly common

563
00:19:00,320 --> 00:19:02,240
structure there's usually an application

564
00:19:02,240 --> 00:19:04,720
bundle of some sort so if we're talking

565
00:19:04,720 --> 00:19:06,559
through like the um the gatekeeper

566
00:19:06,559 --> 00:19:08,160
bypass stuff like

567
00:19:08,160 --> 00:19:10,960
patrick cedric and jaren talked about

568
00:19:10,960 --> 00:19:12,559
that was an application bundle that had

569
00:19:12,559 --> 00:19:14,480
like a number in it something like that

570
00:19:14,480 --> 00:19:16,720
that was distributed via dmg

571
00:19:16,720 --> 00:19:17,679
and then

572
00:19:17,679 --> 00:19:19,440
also inside

573
00:19:19,440 --> 00:19:20,720
inside there usually there's an

574
00:19:20,720 --> 00:19:22,720
application symbolic link or something

575
00:19:22,720 --> 00:19:24,640
like that background image to make it

576
00:19:24,640 --> 00:19:27,600
look fancy so the symbolic links are

577
00:19:27,600 --> 00:19:29,200
what enables you to do that little drag

578
00:19:29,200 --> 00:19:32,400
and drop magic so when you have the the

579
00:19:32,400 --> 00:19:34,240
applications folder over on the right

580
00:19:34,240 --> 00:19:36,080
side drag and drop over

581
00:19:36,080 --> 00:19:38,799
boom appears in slash applications all

582
00:19:38,799 --> 00:19:42,240
of that is fairly common to see so

583
00:19:42,240 --> 00:19:44,400
what's a little bit more malicious is

584
00:19:44,400 --> 00:19:46,080
like at this point you have to really

585
00:19:46,080 --> 00:19:47,600
focus on what makes a malicious

586
00:19:47,600 --> 00:19:49,200
application bundle

587
00:19:49,200 --> 00:19:51,120
so if you're going after installations

588
00:19:51,120 --> 00:19:53,600
via dmgs

589
00:19:53,600 --> 00:19:55,840
if it runs on your hard drive if it runs

590
00:19:55,840 --> 00:19:58,160
in an app bundle it's probably going to

591
00:19:58,160 --> 00:20:00,559
also run from a dmg since it's just

592
00:20:00,559 --> 00:20:02,480
another disk

593
00:20:02,480 --> 00:20:04,159
most of the time if you're looking at

594
00:20:04,159 --> 00:20:06,400
manipulation of dmgs there's going to

595
00:20:06,400 --> 00:20:09,919
have to be an hdi util attach command

596
00:20:09,919 --> 00:20:11,840
so if you're starting to you know go

597
00:20:11,840 --> 00:20:14,000
after hunts specifically for dmg

598
00:20:14,000 --> 00:20:16,080
installers you know take a look at when

599
00:20:16,080 --> 00:20:18,559
hdi util commands start running around

600
00:20:18,559 --> 00:20:19,919
you'll be able to see when things are

601
00:20:19,919 --> 00:20:22,320
mounted

602
00:20:23,200 --> 00:20:24,960
again malware can include whatever they

603
00:20:24,960 --> 00:20:26,320
want as long as it works in an app

604
00:20:26,320 --> 00:20:29,840
bundle you can make it work on a dmg

605
00:20:29,840 --> 00:20:31,840
you can typically make the dmgs mount

606
00:20:31,840 --> 00:20:33,840
wherever you want them to however by

607
00:20:33,840 --> 00:20:35,840
default it seems like they they pretty

608
00:20:35,840 --> 00:20:38,960
much show up under root volumes

609
00:20:38,960 --> 00:20:42,320
so what we end up seeing a lot

610
00:20:42,480 --> 00:20:43,840
it's on a couple of slides for it but

611
00:20:43,840 --> 00:20:45,760
what we end up seeing a lot are things

612
00:20:45,760 --> 00:20:50,000
like slash volumes slash installer.app

613
00:20:50,000 --> 00:20:52,320
or slashplayer.app or something like

614
00:20:52,320 --> 00:20:54,159
that if somebody ever asks you to

615
00:20:54,159 --> 00:20:56,559
download player.app or player.dmg just

616
00:20:56,559 --> 00:20:59,600
run in the other direction

617
00:21:00,159 --> 00:21:02,559
as for adversary use we end up seeing

618
00:21:02,559 --> 00:21:03,840
this a lot

619
00:21:03,840 --> 00:21:05,679
most commonly most predominantly from

620
00:21:05,679 --> 00:21:08,720
schlayer and bundler and if you're if

621
00:21:08,720 --> 00:21:10,080
you're able to tell these malware

622
00:21:10,080 --> 00:21:11,520
families apart you probably have a

623
00:21:11,520 --> 00:21:13,600
pretty good grasp on this anyways

624
00:21:13,600 --> 00:21:15,760
and uh another good example would be the

625
00:21:15,760 --> 00:21:19,760
zuru family that was recently documented

626
00:21:20,080 --> 00:21:22,559
for detection what we end up focusing in

627
00:21:22,559 --> 00:21:25,120
on a lot of is looking for suspicious

628
00:21:25,120 --> 00:21:27,600
folders under volumes

629
00:21:27,600 --> 00:21:29,360
if you're going to be double clicking on

630
00:21:29,360 --> 00:21:31,679
a dmg making it run it's probably going

631
00:21:31,679 --> 00:21:34,080
to show up there so look for things

632
00:21:34,080 --> 00:21:36,320
that's labeled installer or player

633
00:21:36,320 --> 00:21:37,919
something that makes you think all right

634
00:21:37,919 --> 00:21:38,960
cool

635
00:21:38,960 --> 00:21:41,039
this maybe shouldn't be here

636
00:21:41,039 --> 00:21:44,720
you know flash players almost uh almost

637
00:21:44,720 --> 00:21:47,120
predominantly what we see is like an as

638
00:21:47,120 --> 00:21:48,559
you know kind of a

639
00:21:48,559 --> 00:21:51,200
masqueraded like premise for being there

640
00:21:51,200 --> 00:21:53,360
like download schlayer it's really flash

641
00:21:53,360 --> 00:21:55,918
player no

642
00:21:56,480 --> 00:21:59,120
and then finally i want to talk about

643
00:21:59,120 --> 00:22:02,320
third-party libraries

644
00:22:03,440 --> 00:22:04,559
so

645
00:22:04,559 --> 00:22:06,240
with developer libraries so this isn't

646
00:22:06,240 --> 00:22:08,400
as much as like

647
00:22:08,400 --> 00:22:10,720
there there's no bugs there's no cves in

648
00:22:10,720 --> 00:22:12,400
here this is all pretty much

649
00:22:12,400 --> 00:22:14,799
functionality as intended

650
00:22:14,799 --> 00:22:16,960
but i really wanted to cover it because

651
00:22:16,960 --> 00:22:18,559
there's a

652
00:22:18,559 --> 00:22:21,600
kind of an idea that you know

653
00:22:21,600 --> 00:22:23,360
people don't let people like curl to

654
00:22:23,360 --> 00:22:25,840
bash something like that but running pip

655
00:22:25,840 --> 00:22:27,520
install is okay

656
00:22:27,520 --> 00:22:29,600
so running you know bundle install is

657
00:22:29,600 --> 00:22:31,520
okay even though it pretty much does the

658
00:22:31,520 --> 00:22:32,640
same thing

659
00:22:32,640 --> 00:22:34,559
so with developer libraries these are

660
00:22:34,559 --> 00:22:35,840
going to be anything that's like

661
00:22:35,840 --> 00:22:38,159
pre-canned code to do things that you

662
00:22:38,159 --> 00:22:40,960
don't want to program yourself so if you

663
00:22:40,960 --> 00:22:43,120
want to make sure that if you want to do

664
00:22:43,120 --> 00:22:45,600
http requests in python don't have to

665
00:22:45,600 --> 00:22:46,960
figure out how to do it yourself just

666
00:22:46,960 --> 00:22:49,120
use the request library

667
00:22:49,120 --> 00:22:51,600
you can't really get away from them it's

668
00:22:51,600 --> 00:22:53,120
sort of like a

669
00:22:53,120 --> 00:22:55,760
it's pretty much a requirement nowadays

670
00:22:55,760 --> 00:22:57,600
and they're controlled by third parties

671
00:22:57,600 --> 00:22:59,360
so this is one of those things of like

672
00:22:59,360 --> 00:23:01,200
all right i have to use code that

673
00:23:01,200 --> 00:23:03,120
somebody else has developed i have to

674
00:23:03,120 --> 00:23:04,640
trust them

675
00:23:04,640 --> 00:23:06,159
the question is like

676
00:23:06,159 --> 00:23:08,000
when does that trust kind of come off

677
00:23:08,000 --> 00:23:09,520
the rails a little bit

678
00:23:09,520 --> 00:23:12,240
this is there have been instances where

679
00:23:12,240 --> 00:23:14,000
um

680
00:23:14,000 --> 00:23:14,799
where

681
00:23:14,799 --> 00:23:17,360
packages have been poisoned and put into

682
00:23:17,360 --> 00:23:19,919
like typo squatted uh

683
00:23:19,919 --> 00:23:21,600
typo squatted entries and a package

684
00:23:21,600 --> 00:23:24,880
registry or things like that

685
00:23:24,880 --> 00:23:28,480
so i want to include the meme of the day

686
00:23:28,480 --> 00:23:30,880
and uh when we start talking about some

687
00:23:30,880 --> 00:23:33,600
of this like it's really easy to kind of

688
00:23:33,600 --> 00:23:35,520
see all of the behavior

689
00:23:35,520 --> 00:23:37,679
from a package installation really blend

690
00:23:37,679 --> 00:23:39,360
in because every package is a little bit

691
00:23:39,360 --> 00:23:42,240
different every package you know

692
00:23:42,240 --> 00:23:45,120
if you're using a capa from fireeye for

693
00:23:45,120 --> 00:23:46,559
malware analysis

694
00:23:46,559 --> 00:23:48,880
it does a little bit of setup beforehand

695
00:23:48,880 --> 00:23:50,480
and then if you do requests or you do

696
00:23:50,480 --> 00:23:52,559
whatever else package everyone has its

697
00:23:52,559 --> 00:23:54,799
own kind of initialization sequence

698
00:23:54,799 --> 00:23:55,919
whatever

699
00:23:55,919 --> 00:23:57,600
so the things that we're going to really

700
00:23:57,600 --> 00:23:59,360
want to dial in on as being suspicious

701
00:23:59,360 --> 00:24:00,240
they're going to be anything with

702
00:24:00,240 --> 00:24:01,360
persistence

703
00:24:01,360 --> 00:24:03,600
anything that goes and grabs additional

704
00:24:03,600 --> 00:24:06,559
code like for example if you're you know

705
00:24:06,559 --> 00:24:08,400
if you're downloading something from the

706
00:24:08,400 --> 00:24:11,440
pip registry in um

707
00:24:11,440 --> 00:24:13,919
in python or from a gem registry you

708
00:24:13,919 --> 00:24:15,520
really don't want it doing additional

709
00:24:15,520 --> 00:24:17,360
curls outside of that registry because

710
00:24:17,360 --> 00:24:19,919
that's something that the uh the

711
00:24:19,919 --> 00:24:21,360
maintainers of the registry may not

712
00:24:21,360 --> 00:24:23,279
check may not know about

713
00:24:23,279 --> 00:24:25,840
and then executing additional scripts so

714
00:24:25,840 --> 00:24:27,600
most of the time the executing

715
00:24:27,600 --> 00:24:29,600
additional scripts part

716
00:24:29,600 --> 00:24:31,679
it can be legitimate but if you start

717
00:24:31,679 --> 00:24:33,200
combining that with persistence and

718
00:24:33,200 --> 00:24:35,760
downloads you can start including like a

719
00:24:35,760 --> 00:24:37,919
lot of code execution possibilities

720
00:24:37,919 --> 00:24:40,080
running as privileged users

721
00:24:40,080 --> 00:24:40,960
and

722
00:24:40,960 --> 00:24:43,200
kind of where i go with this looking at

723
00:24:43,200 --> 00:24:45,440
from the privileged user's perspective

724
00:24:45,440 --> 00:24:46,880
this is the sort of thing you might find

725
00:24:46,880 --> 00:24:49,039
running on a jenkins instance on

726
00:24:49,039 --> 00:24:50,880
continuous integration systems this

727
00:24:50,880 --> 00:24:53,200
isn't just you know just your developer

728
00:24:53,200 --> 00:24:56,960
this can also be server infrastructure

729
00:24:56,960 --> 00:24:58,320
for this i wanted to pick realistic

730
00:24:58,320 --> 00:24:59,760
examples

731
00:24:59,760 --> 00:25:02,159
for python packages ruby gems and npm

732
00:25:02,159 --> 00:25:04,559
packages all three of these families

733
00:25:04,559 --> 00:25:06,480
have had problems in the last two or

734
00:25:06,480 --> 00:25:08,240
three years

735
00:25:08,240 --> 00:25:10,000
not necessarily on mac os systems

736
00:25:10,000 --> 00:25:11,440
they've had problems on windows

737
00:25:11,440 --> 00:25:13,760
primarily but there is literally nothing

738
00:25:13,760 --> 00:25:15,600
preventing you from creating malicious

739
00:25:15,600 --> 00:25:17,840
packages for each of these on mac os

740
00:25:17,840 --> 00:25:18,799
um

741
00:25:18,799 --> 00:25:21,600
all of them thinking kind of you know

742
00:25:21,600 --> 00:25:23,520
shoving aside the stunt hacking type

743
00:25:23,520 --> 00:25:26,559
stuff this is literally something that

744
00:25:26,559 --> 00:25:30,480
that has been documented in the news

745
00:25:30,799 --> 00:25:33,840
the first one talking through python pip

746
00:25:33,840 --> 00:25:36,159
if you've ever used pip or pip3 commands

747
00:25:36,159 --> 00:25:38,240
to install something you know you've

748
00:25:38,240 --> 00:25:40,159
used this package registry

749
00:25:40,159 --> 00:25:42,960
all of them have a setup.pi file inside

750
00:25:42,960 --> 00:25:45,440
its package

751
00:25:45,440 --> 00:25:47,279
structure you usually look something

752
00:25:47,279 --> 00:25:49,760
like this uh over on the left-hand side

753
00:25:49,760 --> 00:25:51,360
setup.pi

754
00:25:51,360 --> 00:25:52,960
it's literally the only code that we

755
00:25:52,960 --> 00:25:55,679
need in there we don't have to have like

756
00:25:55,679 --> 00:25:57,600
an entire code library we don't have to

757
00:25:57,600 --> 00:25:59,039
have anything else

758
00:25:59,039 --> 00:26:00,720
all we really need is just this

759
00:26:00,720 --> 00:26:03,200
bare-bones structure and an os dot

760
00:26:03,200 --> 00:26:04,480
system command and we can get code

761
00:26:04,480 --> 00:26:05,919
execution

762
00:26:05,919 --> 00:26:08,159
and kind of know alright cool this is

763
00:26:08,159 --> 00:26:10,960
built into python yes it is

764
00:26:10,960 --> 00:26:12,559
where it becomes you know starts getting

765
00:26:12,559 --> 00:26:15,039
interesting is how do we apply this

766
00:26:15,039 --> 00:26:17,360
in practicality so this is going to be

767
00:26:17,360 --> 00:26:18,240
like

768
00:26:18,240 --> 00:26:20,080
let's say that your developers have

769
00:26:20,080 --> 00:26:22,640
started using private repositories

770
00:26:22,640 --> 00:26:24,320
they've started using private things

771
00:26:24,320 --> 00:26:26,799
from other people's github repositories

772
00:26:26,799 --> 00:26:28,799
you know code that your company doesn't

773
00:26:28,799 --> 00:26:31,039
control this sort of thing can easily

774
00:26:31,039 --> 00:26:33,440
jump in

775
00:26:34,159 --> 00:26:35,120
and kind of looking through the

776
00:26:35,120 --> 00:26:36,240
detection

777
00:26:36,240 --> 00:26:38,480
something that we've tried to try to

778
00:26:38,480 --> 00:26:39,840
implement try to look through looking

779
00:26:39,840 --> 00:26:41,679
for child processes coming off of this

780
00:26:41,679 --> 00:26:43,360
can get a little bit weird

781
00:26:43,360 --> 00:26:45,679
because you know it depends on the

782
00:26:45,679 --> 00:26:47,279
particular library there may be

783
00:26:47,279 --> 00:26:50,240
additional chmod uh processes coming off

784
00:26:50,240 --> 00:26:52,880
to allow execution of code

785
00:26:52,880 --> 00:26:54,799
things like that so what we've ended up

786
00:26:54,799 --> 00:26:56,559
doing is looking for

787
00:26:56,559 --> 00:26:58,480
things that have setup.pi and their

788
00:26:58,480 --> 00:27:00,080
python clis

789
00:27:00,080 --> 00:27:01,840
so whenever you do a pip install that's

790
00:27:01,840 --> 00:27:06,240
really a python pip install da da and

791
00:27:06,240 --> 00:27:08,400
has set up tools in the in the command

792
00:27:08,400 --> 00:27:10,720
line and we'll end up looking for things

793
00:27:10,720 --> 00:27:12,640
that write persistence mechanisms the

794
00:27:12,640 --> 00:27:13,440
most

795
00:27:13,440 --> 00:27:16,640
so typically with pip with other things

796
00:27:16,640 --> 00:27:18,080
they're not going to be writing these

797
00:27:18,080 --> 00:27:19,520
persistence mechanisms like launch

798
00:27:19,520 --> 00:27:22,480
agents launch demons or manipulating

799
00:27:22,480 --> 00:27:23,520
your shell

800
00:27:23,520 --> 00:27:25,440
shell profiles

801
00:27:25,440 --> 00:27:28,080
so there's there's really no need

802
00:27:28,080 --> 00:27:29,520
every time you build your app you're

803
00:27:29,520 --> 00:27:31,760
going to probably be doing a pip update

804
00:27:31,760 --> 00:27:33,039
something like that

805
00:27:33,039 --> 00:27:34,159
and

806
00:27:34,159 --> 00:27:35,840
that's really all it needs it doesn't

807
00:27:35,840 --> 00:27:39,120
have to talk to anything else

808
00:27:39,440 --> 00:27:41,039
the second one to kind of cover was

809
00:27:41,039 --> 00:27:42,960
rubygems

810
00:27:42,960 --> 00:27:44,880
a lot of people are fans of ruby on

811
00:27:44,880 --> 00:27:47,600
rails i know i know some folks in in my

812
00:27:47,600 --> 00:27:49,440
org that have ruby very close to their

813
00:27:49,440 --> 00:27:50,320
hearts

814
00:27:50,320 --> 00:27:51,279
so

815
00:27:51,279 --> 00:27:53,039
we end up using bundle installs

816
00:27:53,039 --> 00:27:55,120
sometimes to start looking through and

817
00:27:55,120 --> 00:27:56,640
downloading gems

818
00:27:56,640 --> 00:27:58,240
i know there are a couple of other ways

819
00:27:58,240 --> 00:27:59,120
to

820
00:27:59,120 --> 00:28:00,960
uh to work gems into the environment but

821
00:28:00,960 --> 00:28:02,399
the one we see the most is bundle

822
00:28:02,399 --> 00:28:03,600
install

823
00:28:03,600 --> 00:28:05,600
and whenever you start creating these

824
00:28:05,600 --> 00:28:08,159
bundles like they have or these gems

825
00:28:08,159 --> 00:28:09,679
they typically have a lot of files in

826
00:28:09,679 --> 00:28:11,279
their scaffold there's

827
00:28:11,279 --> 00:28:12,799
uh there's just a bunch of things that

828
00:28:12,799 --> 00:28:14,720
get generated right off but the one i

829
00:28:14,720 --> 00:28:16,320
want to focus in on is something called

830
00:28:16,320 --> 00:28:19,279
version.rb

831
00:28:19,919 --> 00:28:21,039
so

832
00:28:21,039 --> 00:28:22,559
there were there were too many files in

833
00:28:22,559 --> 00:28:24,399
the tree for me to actually demonstrate

834
00:28:24,399 --> 00:28:26,080
for me to actually show here without it

835
00:28:26,080 --> 00:28:27,120
getting like

836
00:28:27,120 --> 00:28:29,520
really really hairy so

837
00:28:29,520 --> 00:28:31,039
what i really want to focus in on was

838
00:28:31,039 --> 00:28:32,200
the

839
00:28:32,200 --> 00:28:34,799
gemloader.gemspec file so inside that

840
00:28:34,799 --> 00:28:37,120
file there's a lot of metadata saying

841
00:28:37,120 --> 00:28:37,919
hey

842
00:28:37,919 --> 00:28:39,760
my package is named this my version name

843
00:28:39,760 --> 00:28:40,799
is this

844
00:28:40,799 --> 00:28:42,640
all the different things like that so it

845
00:28:42,640 --> 00:28:45,279
turns out that inside that metadata when

846
00:28:45,279 --> 00:28:47,039
it goes to retrieve its version it

847
00:28:47,039 --> 00:28:49,039
executes whatever is in a version.rb

848
00:28:49,039 --> 00:28:50,080
file

849
00:28:50,080 --> 00:28:52,880
so we have seen this in the wild where

850
00:28:52,880 --> 00:28:54,320
you know some

851
00:28:54,320 --> 00:28:56,480
malicious folks over on the windows side

852
00:28:56,480 --> 00:28:59,679
included system commands inside a

853
00:28:59,679 --> 00:29:01,840
version.rb file so they could execute a

854
00:29:01,840 --> 00:29:04,159
rat whenever you downloaded a ruby

855
00:29:04,159 --> 00:29:06,720
ruby gem

856
00:29:07,279 --> 00:29:08,799
when we start taking

857
00:29:08,799 --> 00:29:10,559
uh taking a look at the detection side

858
00:29:10,559 --> 00:29:11,600
of it

859
00:29:11,600 --> 00:29:13,919
so you can do like a system command so

860
00:29:13,919 --> 00:29:15,360
this is going to be the equivalent of an

861
00:29:15,360 --> 00:29:17,120
sh-c

862
00:29:17,120 --> 00:29:18,880
so anything that you put into a shell

863
00:29:18,880 --> 00:29:21,120
command there a system command there

864
00:29:21,120 --> 00:29:22,720
will show up immediately as a child

865
00:29:22,720 --> 00:29:25,200
process

866
00:29:25,200 --> 00:29:26,720
for us

867
00:29:26,720 --> 00:29:28,399
we'll end up looking for some bundle

868
00:29:28,399 --> 00:29:31,279
installs again uh since

869
00:29:31,279 --> 00:29:33,039
it's all built into ruby this is going

870
00:29:33,039 --> 00:29:35,039
to be ruby with the process name bundle

871
00:29:35,039 --> 00:29:37,120
bundle install with command line and

872
00:29:37,120 --> 00:29:41,200
looking for more persistence mechanisms

873
00:29:41,200 --> 00:29:44,320
and the last one to cover is node.js

874
00:29:44,320 --> 00:29:45,679
this one was the one that scared me a

875
00:29:45,679 --> 00:29:47,279
little bit because it is by far the

876
00:29:47,279 --> 00:29:50,399
easiest one to poison

877
00:29:50,480 --> 00:29:52,640
inside node.js packages usually there's

878
00:29:52,640 --> 00:29:57,360
just a package.json file and that is

879
00:29:57,360 --> 00:29:59,440
mostly all you need

880
00:29:59,440 --> 00:30:00,799
there's usually a script section in

881
00:30:00,799 --> 00:30:02,000
there as well

882
00:30:02,000 --> 00:30:04,080
so this is the entire structure that you

883
00:30:04,080 --> 00:30:05,440
would need in a

884
00:30:05,440 --> 00:30:06,960
simple poisoned

885
00:30:06,960 --> 00:30:08,480
npm package file

886
00:30:08,480 --> 00:30:10,240
so if you want to get really fancy

887
00:30:10,240 --> 00:30:11,679
there's there's a

888
00:30:11,679 --> 00:30:14,000
script section about midway down that

889
00:30:14,000 --> 00:30:15,679
has a pre-install you can put a

890
00:30:15,679 --> 00:30:18,640
pre-installer post install command there

891
00:30:18,640 --> 00:30:20,240
and you can put whatever shell commands

892
00:30:20,240 --> 00:30:22,880
that you want so if it executes in bash

893
00:30:22,880 --> 00:30:25,520
you can put it in there

894
00:30:25,520 --> 00:30:27,440
so initially when i started testing i

895
00:30:27,440 --> 00:30:29,200
started using like touch commands so i

896
00:30:29,200 --> 00:30:30,640
could see that i could generate files

897
00:30:30,640 --> 00:30:31,679
right

898
00:30:31,679 --> 00:30:34,399
so you can do that some adversaries have

899
00:30:34,399 --> 00:30:35,919
done that but if you want to get a

900
00:30:35,919 --> 00:30:37,440
little bit more stealthy if you want to

901
00:30:37,440 --> 00:30:40,480
get a little bit more slick with this

902
00:30:40,480 --> 00:30:42,960
you can include an additional file like

903
00:30:42,960 --> 00:30:46,159
in in my case i included lib.js here

904
00:30:46,159 --> 00:30:49,039
and whatever you put in lib.js if you

905
00:30:49,039 --> 00:30:51,039
call node immediately during the

906
00:30:51,039 --> 00:30:53,120
pre-install it will execute anything

907
00:30:53,120 --> 00:30:55,039
that's in that lib.js

908
00:30:55,039 --> 00:30:57,360
doesn't have to be anything related to

909
00:30:57,360 --> 00:30:58,880
legitimate

910
00:30:58,880 --> 00:31:00,240
package things

911
00:31:00,240 --> 00:31:01,760
it's all you would have to do is

912
00:31:01,760 --> 00:31:03,600
literally npm install

913
00:31:03,600 --> 00:31:05,120
anything that is defined at that main

914
00:31:05,120 --> 00:31:07,279
gets run and then

915
00:31:07,279 --> 00:31:11,440
compromises you know go on from there

916
00:31:11,440 --> 00:31:13,200
again detection

917
00:31:13,200 --> 00:31:14,799
look for node

918
00:31:14,799 --> 00:31:16,480
node with npm installed on the command

919
00:31:16,480 --> 00:31:18,159
lines and we're going to be looking for

920
00:31:18,159 --> 00:31:19,679
persistence mechanisms coming off of

921
00:31:19,679 --> 00:31:22,399
them most often

922
00:31:22,399 --> 00:31:23,360
so

923
00:31:23,360 --> 00:31:24,799
it's pretty much what i've gotten want

924
00:31:24,799 --> 00:31:28,799
to open a q a if i've still got time

925
00:31:28,799 --> 00:31:31,200
sweet i've got time um

926
00:31:31,200 --> 00:31:32,559
so ran through it probably a little bit

927
00:31:32,559 --> 00:31:35,519
fast uh the last one last thing i wanted

928
00:31:35,519 --> 00:31:39,200
to thank was uh leo pitt doomfist so if

929
00:31:39,200 --> 00:31:40,480
talked about mystical a little bit

930
00:31:40,480 --> 00:31:42,080
earlier if you want to get a little bit

931
00:31:42,080 --> 00:31:43,760
dangerous in your own enviro in your own

932
00:31:43,760 --> 00:31:45,360
environment and you want to test some of

933
00:31:45,360 --> 00:31:46,880
these things with

934
00:31:46,880 --> 00:31:49,360
the developer library packages out

935
00:31:49,360 --> 00:31:51,279
if you want to do it like if you want to

936
00:31:51,279 --> 00:31:53,120
be slightly more dangerous than popping

937
00:31:53,120 --> 00:31:54,640
calc but less dangerous than getting

938
00:31:54,640 --> 00:31:56,880
malware you can go and take a look at

939
00:31:56,880 --> 00:31:58,480
mystical and

940
00:31:58,480 --> 00:32:00,640
do some apfel mythic detections on this

941
00:32:00,640 --> 00:32:03,279
in your own environment

942
00:32:03,279 --> 00:32:04,240
sweet

943
00:32:04,240 --> 00:32:06,559
what questions can i answer

944
00:32:06,559 --> 00:32:09,799
yes sir

945
00:32:26,159 --> 00:32:28,159
so all right so the question is if we

946
00:32:28,159 --> 00:32:29,600
know that installation has happened is

947
00:32:29,600 --> 00:32:30,880
there a way for us to track the files

948
00:32:30,880 --> 00:32:34,080
after the fact so i believe

949
00:32:34,080 --> 00:32:35,120
i believe that's supposed to be the

950
00:32:35,120 --> 00:32:36,960
purpose of a receipt for in the middle

951
00:32:36,960 --> 00:32:39,039
of the installation i'm not entirely

952
00:32:39,039 --> 00:32:41,679
sure like tracking down all of the files

953
00:32:41,679 --> 00:32:43,600
but it is possible to do installations

954
00:32:43,600 --> 00:32:45,039
in a way that don't leave a receipt

955
00:32:45,039 --> 00:32:46,240
either

956
00:32:46,240 --> 00:32:48,000
so there are there are ways that you

957
00:32:48,000 --> 00:32:50,080
could potentially do an installation for

958
00:32:50,080 --> 00:32:51,679
example with your pre-installed post

959
00:32:51,679 --> 00:32:53,760
install scripts there is nothing that

960
00:32:53,760 --> 00:32:55,279
says that pre-install script post

961
00:32:55,279 --> 00:32:57,840
install script has to document what it

962
00:32:57,840 --> 00:33:00,879
is what it is left

963
00:33:02,240 --> 00:33:04,480
essentially yeah it would be it would be

964
00:33:04,480 --> 00:33:06,080
downloading things arbitrarily and

965
00:33:06,080 --> 00:33:08,320
unzipping them so even if that package

966
00:33:08,320 --> 00:33:10,320
does leave a receipt leave like a

967
00:33:10,320 --> 00:33:12,240
catalog list of things that get dropped

968
00:33:12,240 --> 00:33:13,200
there's nothing that says the

969
00:33:13,200 --> 00:33:14,720
pre-install post install has to honor

970
00:33:14,720 --> 00:33:16,960
that

971
00:33:17,600 --> 00:33:18,399
so

972
00:33:18,399 --> 00:33:22,760
i saw your hand next patrick

973
00:33:24,080 --> 00:33:25,279
how

974
00:33:25,279 --> 00:33:28,240
apple is kind of addressing uh

975
00:33:28,240 --> 00:33:29,600
malicious installers right doing some

976
00:33:29,600 --> 00:33:31,600
modernization stuff and how if you see

977
00:33:31,600 --> 00:33:33,679
malware authors responding to that as

978
00:33:33,679 --> 00:33:36,880
well kind of like that evolution

979
00:33:36,880 --> 00:33:38,960
so the so the question is a little bit

980
00:33:38,960 --> 00:33:40,559
about um

981
00:33:40,559 --> 00:33:42,480
how we how we see apple kind of

982
00:33:42,480 --> 00:33:44,960
responding to the back and forth of of

983
00:33:44,960 --> 00:33:46,640
malware authors using some of this what

984
00:33:46,640 --> 00:33:49,120
we really see most often is

985
00:33:49,120 --> 00:33:52,000
the same sort of techniques popping up

986
00:33:52,000 --> 00:33:54,720
with new code signatures and then it

987
00:33:54,720 --> 00:33:57,120
kind of gets whack a mold with all right

988
00:33:57,120 --> 00:33:59,600
cool new thing that's notarized it pops

989
00:33:59,600 --> 00:34:00,799
up in the news

990
00:34:00,799 --> 00:34:02,799
by the way yesterday apple also revoked

991
00:34:02,799 --> 00:34:06,399
that search the certificate so um by the

992
00:34:06,399 --> 00:34:08,159
time it hits the news cycle it's already

993
00:34:08,159 --> 00:34:11,040
been 24 hours out of notice notarization

994
00:34:11,040 --> 00:34:12,960
uh something like that that's usually

995
00:34:12,960 --> 00:34:14,879
what we see the most the problematic

996
00:34:14,879 --> 00:34:17,839
part is that adversaries keep getting

997
00:34:17,839 --> 00:34:18,719
code

998
00:34:18,719 --> 00:34:20,800
code signing certificates not really

999
00:34:20,800 --> 00:34:23,359
sure how it happens like i've i've

1000
00:34:23,359 --> 00:34:25,440
seen heard some things about like you

1001
00:34:25,440 --> 00:34:27,280
know where they're

1002
00:34:27,280 --> 00:34:30,159
kind of marketed around in illicit ways

1003
00:34:30,159 --> 00:34:31,599
but

1004
00:34:31,599 --> 00:34:33,199
somehow they still get them and right

1005
00:34:33,199 --> 00:34:35,359
now it's kind of a whack-a-mole thing

1006
00:34:35,359 --> 00:34:38,159
and i'm kind of interested to see

1007
00:34:38,159 --> 00:34:40,320
if they can institute more controls

1008
00:34:40,320 --> 00:34:42,480
around it like i really don't know how

1009
00:34:42,480 --> 00:34:44,159
because it's one of these things where

1010
00:34:44,159 --> 00:34:46,079
if you're doing packages you have to

1011
00:34:46,079 --> 00:34:49,040
figure out a way to give people the

1012
00:34:49,040 --> 00:34:50,719
tools they need to do their work while

1013
00:34:50,719 --> 00:34:52,480
also getting out of the way and then

1014
00:34:52,480 --> 00:34:55,520
also prevent people like you know

1015
00:34:55,520 --> 00:34:57,839
hardware people from going and deciding

1016
00:34:57,839 --> 00:35:01,119
like hey let's just mess everything up

1017
00:35:01,119 --> 00:35:02,400
no problem

1018
00:35:02,400 --> 00:35:04,960
yes ma'am

1019
00:35:12,960 --> 00:35:15,040
i like this all right

1020
00:35:15,040 --> 00:35:16,880
the question was do we have any advice

1021
00:35:16,880 --> 00:35:18,640
on how to filter out adobe packages

1022
00:35:18,640 --> 00:35:20,079
because adobe packages will end up

1023
00:35:20,079 --> 00:35:21,520
looking a lot more like malware

1024
00:35:21,520 --> 00:35:23,280
sometimes all right so

1025
00:35:23,280 --> 00:35:26,079
if you're looking specifically like

1026
00:35:26,079 --> 00:35:28,160
for adobe things

1027
00:35:28,160 --> 00:35:29,839
i would just specifically say like all

1028
00:35:29,839 --> 00:35:31,280
right if you're looking specifically for

1029
00:35:31,280 --> 00:35:33,359
adobe things do not trust any packages

1030
00:35:33,359 --> 00:35:35,119
or dmgs that don't have signing from

1031
00:35:35,119 --> 00:35:38,560
adobe that is specifically it um if

1032
00:35:38,560 --> 00:35:40,640
we're started looking if we're going

1033
00:35:40,640 --> 00:35:42,880
after like branding logos some of these

1034
00:35:42,880 --> 00:35:45,599
adware folks will end up using the same

1035
00:35:45,599 --> 00:35:48,240
branding same logos or they'll use

1036
00:35:48,240 --> 00:35:50,320
things that look extremely like it but a

1037
00:35:50,320 --> 00:35:52,079
few pixels off

1038
00:35:52,079 --> 00:35:54,000
something like that to sort of say you

1039
00:35:54,000 --> 00:35:56,960
know we're technically legally protected

1040
00:35:56,960 --> 00:35:58,000
but

1041
00:35:58,000 --> 00:35:59,839
if you're just telling people only look

1042
00:35:59,839 --> 00:36:01,839
for a flash logo they're going to be

1043
00:36:01,839 --> 00:36:03,599
fooled by that every time so the big

1044
00:36:03,599 --> 00:36:05,680
thing is going to be just specifically

1045
00:36:05,680 --> 00:36:07,359
look for the code signing things for

1046
00:36:07,359 --> 00:36:11,799
adobe ink i think that's it

