1
00:00:04,880 --> 00:00:08,480
all right aloha to the last talk of the

2
00:00:08,480 --> 00:00:11,840
conference uh made in america well until

3
00:00:11,840 --> 00:00:14,559
obt5

4
00:00:15,519 --> 00:00:18,160
so in this talk runa and i are going to

5
00:00:18,160 --> 00:00:20,800
tell you about some intriguing mac

6
00:00:20,800 --> 00:00:23,680
malware designed by us government spy

7
00:00:23,680 --> 00:00:25,119
agencies

8
00:00:25,119 --> 00:00:26,560
in this talk though we're also going to

9
00:00:26,560 --> 00:00:29,439
explain our individual approaches

10
00:00:29,439 --> 00:00:31,920
towards analyzing mac malware so

11
00:00:31,920 --> 00:00:34,000
hopefully you can kind of get a sense of

12
00:00:34,000 --> 00:00:35,600
how we approach these problems and

13
00:00:35,600 --> 00:00:37,200
perhaps apply some of these same

14
00:00:37,200 --> 00:00:39,600
techniques and approaches to your mac

15
00:00:39,600 --> 00:00:42,160
malware analysis adventures

16
00:00:42,160 --> 00:00:43,680
as mentioned i'm stoked to be presenting

17
00:00:43,680 --> 00:00:46,160
today with runa runa works on digital

18
00:00:46,160 --> 00:00:47,920
security for journalists and other

19
00:00:47,920 --> 00:00:49,840
high-risk individuals

20
00:00:49,840 --> 00:00:51,920
her current work builds on some very

21
00:00:51,920 --> 00:00:54,640
expressive impressive experience at a

22
00:00:54,640 --> 00:00:56,800
time at the new york times freedom of

23
00:00:56,800 --> 00:00:58,640
press foundation and also

24
00:00:58,640 --> 00:00:59,840
a project you might have heard of the

25
00:00:59,840 --> 00:01:01,760
tour project so i'm gonna hand this over

26
00:01:01,760 --> 00:01:04,479
to roona to dive in

27
00:01:04,479 --> 00:01:07,840
actually one more slide sorry

28
00:01:07,840 --> 00:01:09,920
get a little ahead of myself so as noted

29
00:01:09,920 --> 00:01:12,320
we're going to be talking about mac

30
00:01:12,320 --> 00:01:14,720
malware that's designed by three-letter

31
00:01:14,720 --> 00:01:16,720
government agencies so to start with

32
00:01:16,720 --> 00:01:18,799
roone is going to be talking about an

33
00:01:18,799 --> 00:01:20,960
implant that has been attributed to the

34
00:01:20,960 --> 00:01:23,680
cia known as green lambert following

35
00:01:23,680 --> 00:01:25,759
this i'm going to dive into double

36
00:01:25,759 --> 00:01:29,119
fantasy which is nsa's first stage mac

37
00:01:29,119 --> 00:01:30,159
os

38
00:01:30,159 --> 00:01:31,200
implant

39
00:01:31,200 --> 00:01:33,360
these samples will be available on

40
00:01:33,360 --> 00:01:35,680
objective c's website shortly so if you

41
00:01:35,680 --> 00:01:37,360
want to download and play along you will

42
00:01:37,360 --> 00:01:38,960
be doing that

43
00:01:38,960 --> 00:01:41,920
as well one favor if you hear any

44
00:01:41,920 --> 00:01:45,280
helicopters or black suvs pulling up let

45
00:01:45,280 --> 00:01:47,600
us know rooney we can sneak out the back

46
00:01:47,600 --> 00:01:49,920
and get out of here all right so no

47
00:01:49,920 --> 00:01:51,119
further ado

48
00:01:51,119 --> 00:01:54,680
hand it off to you

49
00:01:57,200 --> 00:02:00,000
cool thank you um thanks everyone for

50
00:02:00,000 --> 00:02:02,320
being here thank you to people on the

51
00:02:02,320 --> 00:02:04,240
stream for showing up i know some of you

52
00:02:04,240 --> 00:02:06,079
are staying up late

53
00:02:06,079 --> 00:02:07,840
thank you to patrick and andy for

54
00:02:07,840 --> 00:02:09,520
organizing this amazing amazing

55
00:02:09,520 --> 00:02:10,720
conference

56
00:02:10,720 --> 00:02:13,599
and uh patrick i don't know how you do

57
00:02:13,599 --> 00:02:15,440
everything that you do but i am so

58
00:02:15,440 --> 00:02:17,360
grateful for all of your time and your

59
00:02:17,360 --> 00:02:19,360
support and your encouragement during

60
00:02:19,360 --> 00:02:20,560
this project

61
00:02:20,560 --> 00:02:22,480
so um

62
00:02:22,480 --> 00:02:25,120
jumping in with some

63
00:02:25,120 --> 00:02:28,160
history so

64
00:02:28,560 --> 00:02:30,640
back in march

65
00:02:30,640 --> 00:02:33,680
2017 uh wikileaks published this project

66
00:02:33,680 --> 00:02:37,040
that it named vault 7 a bunch of

67
00:02:37,040 --> 00:02:39,360
information that was stolen from

68
00:02:39,360 --> 00:02:42,080
the cia and then leaked to wikileaks and

69
00:02:42,080 --> 00:02:44,000
wikileaks then started publishing this i

70
00:02:44,000 --> 00:02:45,360
think from

71
00:02:45,360 --> 00:02:48,480
march 2017 until i think november

72
00:02:48,480 --> 00:02:52,000
of that year um a good portion of it was

73
00:02:52,000 --> 00:02:54,560
this like internal confluence

74
00:02:54,560 --> 00:02:56,680
um that then just has a lot of

75
00:02:56,680 --> 00:02:59,120
documentation about different tools that

76
00:02:59,120 --> 00:03:01,519
they had developed about

77
00:03:01,519 --> 00:03:02,720
their

78
00:03:02,720 --> 00:03:05,120
development tradecraft do's and don'ts

79
00:03:05,120 --> 00:03:07,200
and a lot of that type of stuff a lot of

80
00:03:07,200 --> 00:03:08,959
interesting stuff if you want to go dig

81
00:03:08,959 --> 00:03:09,920
in

82
00:03:09,920 --> 00:03:12,000
about a month later

83
00:03:12,000 --> 00:03:15,360
semantic came out and then said that a

84
00:03:15,360 --> 00:03:17,040
lot of the information or some of the

85
00:03:17,040 --> 00:03:19,840
info in the vault 7 leak that we've now

86
00:03:19,840 --> 00:03:22,159
looked at the the development

87
00:03:22,159 --> 00:03:25,040
documentation the timelines the dates it

88
00:03:25,040 --> 00:03:28,080
sort of lines up with an actor that

89
00:03:28,080 --> 00:03:30,319
they're tracking as longhorn

90
00:03:30,319 --> 00:03:32,239
and the post goes on to sort of detail

91
00:03:32,239 --> 00:03:33,680
what they've found there

92
00:03:33,680 --> 00:03:35,440
a day after

93
00:03:35,440 --> 00:03:37,840
symantec then kaspersky came out and

94
00:03:37,840 --> 00:03:38,959
said

95
00:03:38,959 --> 00:03:42,000
yesterday symantec published this stuff

96
00:03:42,000 --> 00:03:44,159
we are tracking the same actor as the

97
00:03:44,159 --> 00:03:46,480
lamberts and then went out to detail

98
00:03:46,480 --> 00:03:47,760
what they have found and what they've

99
00:03:47,760 --> 00:03:50,080
been tracking for some period of time

100
00:03:50,080 --> 00:03:52,159
and so

101
00:03:52,159 --> 00:03:54,400
specifically the sample diet i'm looking

102
00:03:54,400 --> 00:03:57,120
at here is the green lambert sample for

103
00:03:57,120 --> 00:03:59,840
osx which was then disclosed by

104
00:03:59,840 --> 00:04:02,879
kaspersky back in 2017. if you read that

105
00:04:02,879 --> 00:04:05,599
post it it sort of details a lot of the

106
00:04:05,599 --> 00:04:08,000
different

107
00:04:08,000 --> 00:04:11,760
implants in the lambert family and so

108
00:04:11,760 --> 00:04:14,080
like different colors green and black

109
00:04:14,080 --> 00:04:16,639
and i think there's white

110
00:04:16,639 --> 00:04:19,839
specifically though green is the osx

111
00:04:19,839 --> 00:04:22,079
sample or the one that exists on windows

112
00:04:22,079 --> 00:04:25,040
and osx

113
00:04:25,040 --> 00:04:27,280
so

114
00:04:27,520 --> 00:04:29,919
another thing that i did

115
00:04:29,919 --> 00:04:32,639
last year was that i dug into the

116
00:04:32,639 --> 00:04:34,639
development tradecraft

117
00:04:34,639 --> 00:04:37,680
do's and don'ts dock so this spreadsheet

118
00:04:37,680 --> 00:04:39,759
is public so if you want to see the

119
00:04:39,759 --> 00:04:40,639
different

120
00:04:40,639 --> 00:04:42,320
iterations between i think there's like

121
00:04:42,320 --> 00:04:44,320
52 different versions of the document

122
00:04:44,320 --> 00:04:45,759
that's now available

123
00:04:45,759 --> 00:04:48,000
where they're talking about how they do

124
00:04:48,000 --> 00:04:50,240
what they do what kind of guidelines

125
00:04:50,240 --> 00:04:51,600
they have for when they develop

126
00:04:51,600 --> 00:04:53,600
different cyber tools what they should

127
00:04:53,600 --> 00:04:55,520
and shouldn't do and i thought it was

128
00:04:55,520 --> 00:04:57,280
like pretty interesting to sort of look

129
00:04:57,280 --> 00:04:59,360
at what are the guidelines that a

130
00:04:59,360 --> 00:05:02,000
sophisticated actor would have for the

131
00:05:02,000 --> 00:05:03,199
tools that they

132
00:05:03,199 --> 00:05:04,560
develop

133
00:05:04,560 --> 00:05:06,000
and then also look at that in the

134
00:05:06,000 --> 00:05:08,639
context of the green lambert

135
00:05:08,639 --> 00:05:11,639
sample

136
00:05:11,680 --> 00:05:13,759
the reason i find this so interesting is

137
00:05:13,759 --> 00:05:16,560
that when you're looking at tracking

138
00:05:16,560 --> 00:05:18,880
sophisticated actors

139
00:05:18,880 --> 00:05:20,400
i think it's going to come down to more

140
00:05:20,400 --> 00:05:23,280
than just looking for an overlap in hash

141
00:05:23,280 --> 00:05:26,000
or domain or ip address if you look at

142
00:05:26,000 --> 00:05:27,280
the work that

143
00:05:27,280 --> 00:05:30,000
kaspersky did and i don't have a date

144
00:05:30,000 --> 00:05:32,080
and time for this post

145
00:05:32,080 --> 00:05:34,880
but finding an overlap between the

146
00:05:34,880 --> 00:05:38,000
sunburst backdoor and caswar it's going

147
00:05:38,000 --> 00:05:39,600
to come down to

148
00:05:39,600 --> 00:05:42,639
how the code is generating the victim

149
00:05:42,639 --> 00:05:45,919
uid or which algorithm they're using for

150
00:05:45,919 --> 00:05:48,479
some type of functionality or what kind

151
00:05:48,479 --> 00:05:50,560
of hash they're using to do a certain

152
00:05:50,560 --> 00:05:53,120
thing so the overlap is not going to be

153
00:05:53,120 --> 00:05:55,360
in in something like fairly easy like a

154
00:05:55,360 --> 00:05:57,280
hash or domain or ip it's going to be in

155
00:05:57,280 --> 00:06:00,880
something more complex

156
00:06:02,240 --> 00:06:04,240
so as i mentioned

157
00:06:04,240 --> 00:06:06,800
semantic had then said in their post

158
00:06:06,800 --> 00:06:09,759
that um the information in the vault 7

159
00:06:09,759 --> 00:06:10,560
link

160
00:06:10,560 --> 00:06:13,680
matches what they're seeing um for what

161
00:06:13,680 --> 00:06:16,000
they're tracking as the longhorn actor

162
00:06:16,000 --> 00:06:18,080
and i was then curious to see if like is

163
00:06:18,080 --> 00:06:19,600
this true for

164
00:06:19,600 --> 00:06:22,319
green lambert on osx as well can we dig

165
00:06:22,319 --> 00:06:24,400
into that specific sample

166
00:06:24,400 --> 00:06:25,759
and then look at the develop and

167
00:06:25,759 --> 00:06:28,240
tradecraft is there anything there that

168
00:06:28,240 --> 00:06:30,639
lines up can we can we see that yes they

169
00:06:30,639 --> 00:06:32,319
follow their own guidelines is there

170
00:06:32,319 --> 00:06:34,400
something that that stands out

171
00:06:34,400 --> 00:06:36,000
what else

172
00:06:36,000 --> 00:06:38,800
is there in here

173
00:06:40,400 --> 00:06:43,280
quick note about victimology for

174
00:06:43,280 --> 00:06:44,880
the lamberts

175
00:06:44,880 --> 00:06:46,639
or longhorn

176
00:06:46,639 --> 00:06:48,400
which i actually can't see my own slides

177
00:06:48,400 --> 00:06:51,039
so that's fine um

178
00:06:51,039 --> 00:06:52,560
there's nothing like super specific

179
00:06:52,560 --> 00:06:55,280
that's been mentioned about um exactly

180
00:06:55,280 --> 00:06:57,039
how

181
00:06:57,039 --> 00:06:58,479
in the context of the green lambert

182
00:06:58,479 --> 00:07:00,720
sample for osx there's nothing specific

183
00:07:00,720 --> 00:07:02,800
that's been mentioned about exactly how

184
00:07:02,800 --> 00:07:05,840
you get infected with that malware

185
00:07:05,840 --> 00:07:08,240
the target the type of target system

186
00:07:08,240 --> 00:07:09,840
where in the world that system would be

187
00:07:09,840 --> 00:07:11,840
located

188
00:07:11,840 --> 00:07:14,160
there's been talks across symantec

189
00:07:14,160 --> 00:07:17,120
kaspersky and researchers in china that

190
00:07:17,120 --> 00:07:19,360
the language has been known to target

191
00:07:19,360 --> 00:07:21,039
governments for example that sort of

192
00:07:21,039 --> 00:07:23,440
just gives you an idea about typical

193
00:07:23,440 --> 00:07:25,759
targets

194
00:07:25,759 --> 00:07:27,199
there is a

195
00:07:27,199 --> 00:07:29,520
teeny tiny portion of the semantic post

196
00:07:29,520 --> 00:07:32,800
just highlights that at some point in

197
00:07:32,800 --> 00:07:35,599
time an installer for one of the

198
00:07:35,599 --> 00:07:37,919
longhorn tools

199
00:07:37,919 --> 00:07:40,400
was dropped and run on a system in the

200
00:07:40,400 --> 00:07:42,960
united states and that sometime after i

201
00:07:42,960 --> 00:07:45,199
think it's a couple of hours after an

202
00:07:45,199 --> 00:07:47,280
uninstaller was then launched to remove

203
00:07:47,280 --> 00:07:49,280
it so that just goes to show that they

204
00:07:49,280 --> 00:07:50,879
are probably trying to make sure they do

205
00:07:50,879 --> 00:07:54,800
not infect systems in the united states

206
00:07:54,800 --> 00:07:57,440
this slide from kaspersky just sort of

207
00:07:57,440 --> 00:07:59,919
shows the lambert family malware as i

208
00:07:59,919 --> 00:08:01,199
mentioned there's like a bunch of

209
00:08:01,199 --> 00:08:04,080
different ones uh green according to

210
00:08:04,080 --> 00:08:07,039
kaspersky is the oldest and longest

211
00:08:07,039 --> 00:08:09,280
running and the only one

212
00:08:09,280 --> 00:08:12,240
where we've found both non-windows and

213
00:08:12,240 --> 00:08:15,039
windows versions

214
00:08:15,039 --> 00:08:18,400
so um the kaspersky's post on this topic

215
00:08:18,400 --> 00:08:20,800
is is great so if you want to see how

216
00:08:20,800 --> 00:08:22,319
these all

217
00:08:22,319 --> 00:08:24,319
tie together and sort of which ones

218
00:08:24,319 --> 00:08:25,599
might have like

219
00:08:25,599 --> 00:08:27,199
handed over to another one in the

220
00:08:27,199 --> 00:08:28,960
development timeline you should go check

221
00:08:28,960 --> 00:08:31,680
out that post

222
00:08:31,680 --> 00:08:33,679
okay so for

223
00:08:33,679 --> 00:08:36,479
in lambert for os x specifically

224
00:08:36,479 --> 00:08:38,080
um

225
00:08:38,080 --> 00:08:40,799
this is i have given a lot of talks over

226
00:08:40,799 --> 00:08:42,958
the years but this is actually the first

227
00:08:42,958 --> 00:08:45,519
malware analysis focus talk that i give

228
00:08:45,519 --> 00:08:47,040
um it was something that i always wanted

229
00:08:47,040 --> 00:08:49,519
to dig into and learn more about and

230
00:08:49,519 --> 00:08:51,680
given the pandemic over the past two

231
00:08:51,680 --> 00:08:54,160
years i actually had um had more free

232
00:08:54,160 --> 00:08:56,160
time so i figured i would i would take

233
00:08:56,160 --> 00:08:58,000
the sample and just figure out well what

234
00:08:58,000 --> 00:09:00,880
what can i learn what is what is there

235
00:09:00,880 --> 00:09:01,680
so

236
00:09:01,680 --> 00:09:03,839
starting with just looking at the sample

237
00:09:03,839 --> 00:09:06,640
on virustotal we can see that um it was

238
00:09:06,640 --> 00:09:09,120
first submitted to virustotal from

239
00:09:09,120 --> 00:09:13,600
russia in 2014 um under the name growl

240
00:09:13,600 --> 00:09:16,640
helper it was first detected in late

241
00:09:16,640 --> 00:09:18,160
2016

242
00:09:18,160 --> 00:09:20,399
by kaspersky and then about a month

243
00:09:20,399 --> 00:09:23,920
later by a security firm out of taiwan

244
00:09:23,920 --> 00:09:25,839
if i remember correctly

245
00:09:25,839 --> 00:09:27,200
um

246
00:09:27,200 --> 00:09:29,600
so if we if we download this file like

247
00:09:29,600 --> 00:09:32,160
what what do we get right

248
00:09:32,160 --> 00:09:34,959
we have the name growl helper um so we

249
00:09:34,959 --> 00:09:36,560
know that that is like the the name that

250
00:09:36,560 --> 00:09:39,040
the binary gives itself on the system

251
00:09:39,040 --> 00:09:42,560
now growl is a popular or rather was a

252
00:09:42,560 --> 00:09:46,000
popular notification system on os x and

253
00:09:46,000 --> 00:09:49,839
first released in 2004 retired in

254
00:09:49,839 --> 00:09:51,600
2020.

255
00:09:51,600 --> 00:09:53,839
if we look at the file info we can

256
00:09:53,839 --> 00:09:56,959
confirm that this is a 32-bit macro

257
00:09:56,959 --> 00:09:58,320
executable

258
00:09:58,320 --> 00:10:01,519
it's not signed and it's fairly small it

259
00:10:01,519 --> 00:10:03,760
doesn't have a whole lot of dependencies

260
00:10:03,760 --> 00:10:05,519
it's like at this point that that's sort

261
00:10:05,519 --> 00:10:09,680
of the info that i have and

262
00:10:09,760 --> 00:10:11,600
i then try to figure out well what else

263
00:10:11,600 --> 00:10:13,519
can i dig into

264
00:10:13,519 --> 00:10:16,079
um so we can look at strings

265
00:10:16,079 --> 00:10:17,519
there's some interesting clues there

266
00:10:17,519 --> 00:10:20,800
that pop out um the first three uh

267
00:10:20,800 --> 00:10:23,200
reference login item launch agent and

268
00:10:23,200 --> 00:10:25,360
launch daemon there's different options

269
00:10:25,360 --> 00:10:27,920
for gaining persistence on the system

270
00:10:27,920 --> 00:10:31,800
the next three google lib event and

271
00:10:31,800 --> 00:10:33,680
1.3.a

272
00:10:33,680 --> 00:10:35,440
i thought was really interesting because

273
00:10:35,440 --> 00:10:37,680
libivent is a

274
00:10:37,680 --> 00:10:40,000
event notification library that's also

275
00:10:40,000 --> 00:10:41,440
used in tor

276
00:10:41,440 --> 00:10:44,399
and version 13a was released in february

277
00:10:44,399 --> 00:10:46,160
of 2007.

278
00:10:46,160 --> 00:10:50,560
now tor was open sourced in 2002 and

279
00:10:50,560 --> 00:10:53,360
developed by the u.s naval research lab

280
00:10:53,360 --> 00:10:54,959
lib event was developed by some of the

281
00:10:54,959 --> 00:10:57,760
same people lib event today is really

282
00:10:57,760 --> 00:11:00,320
popular and used by like all sorts of

283
00:11:00,320 --> 00:11:02,560
folks including facebook

284
00:11:02,560 --> 00:11:05,040
but i was surprised to see it used

285
00:11:05,040 --> 00:11:08,320
back then um in in the sample

286
00:11:08,320 --> 00:11:09,600
then there are some strings for like

287
00:11:09,600 --> 00:11:13,200
audit determining proxy settings um

288
00:11:13,200 --> 00:11:14,480
that i thought was pretty interesting

289
00:11:14,480 --> 00:11:16,959
that i'll get back to later on and then

290
00:11:16,959 --> 00:11:18,560
the last two

291
00:11:18,560 --> 00:11:20,240
refer to

292
00:11:20,240 --> 00:11:22,560
um

293
00:11:22,640 --> 00:11:25,600
something that was added to xcode 2.2

294
00:11:25,600 --> 00:11:28,640
and released in november 2005.

295
00:11:28,640 --> 00:11:30,399
so

296
00:11:30,399 --> 00:11:32,399
and i'll get back to that um in a bit

297
00:11:32,399 --> 00:11:33,360
but

298
00:11:33,360 --> 00:11:35,279
this is what i just pulled out from just

299
00:11:35,279 --> 00:11:36,399
strings

300
00:11:36,399 --> 00:11:38,160
looking at what's there

301
00:11:38,160 --> 00:11:39,839
googling a bunch of stuff just to see

302
00:11:39,839 --> 00:11:43,839
like what what stands out

303
00:11:44,160 --> 00:11:46,000
i also knew that i wanted to be able to

304
00:11:46,000 --> 00:11:48,240
run this sample at some point so the

305
00:11:48,240 --> 00:11:50,079
question became like which version of

306
00:11:50,079 --> 00:11:51,760
osx would it need

307
00:11:51,760 --> 00:11:54,639
um so i used nm to dump all of the

308
00:11:54,639 --> 00:11:57,200
symbols i just plugged that then into a

309
00:11:57,200 --> 00:11:59,680
spreadsheet and i started just googling

310
00:11:59,680 --> 00:12:01,600
every single one of them just to figure

311
00:12:01,600 --> 00:12:03,120
out what they do

312
00:12:03,120 --> 00:12:05,040
map that into a spreadsheet and also

313
00:12:05,040 --> 00:12:08,000
stumbled upon then a few that were

314
00:12:08,000 --> 00:12:09,519
deprecated

315
00:12:09,519 --> 00:12:12,079
after a certain version of osx that's

316
00:12:12,079 --> 00:12:13,760
not to say that it wouldn't work after

317
00:12:13,760 --> 00:12:16,000
that version but it wouldn't be

318
00:12:16,000 --> 00:12:17,440
um it would be

319
00:12:17,440 --> 00:12:20,720
listed as a deprecated one

320
00:12:20,720 --> 00:12:23,760
and so mapping all of that out i found

321
00:12:23,760 --> 00:12:25,040
that

322
00:12:25,040 --> 00:12:27,519
this sample was likely then developed

323
00:12:27,519 --> 00:12:30,079
for or around

324
00:12:30,079 --> 00:12:32,240
osx 10.7

325
00:12:32,240 --> 00:12:34,000
and i've later confirmed that it will

326
00:12:34,000 --> 00:12:36,560
run on 10.8 pretty sure it will run on

327
00:12:36,560 --> 00:12:39,040
any 32-bit system as well but this is

328
00:12:39,040 --> 00:12:41,200
sort of how i then went about narrowing

329
00:12:41,200 --> 00:12:44,320
down which version of os x i should get

330
00:12:44,320 --> 00:12:46,959
for my vm

331
00:12:48,079 --> 00:12:49,600
so if we take all of these like dates

332
00:12:49,600 --> 00:12:51,200
and times

333
00:12:51,200 --> 00:12:54,320
and plug that into this timeline we have

334
00:12:54,320 --> 00:12:55,200
um

335
00:12:55,200 --> 00:12:58,959
2004 growl the notification library

336
00:12:58,959 --> 00:13:00,000
comes out

337
00:13:00,000 --> 00:13:02,959
we've got xcode 2.2 comes out we've got

338
00:13:02,959 --> 00:13:07,600
lib event 1.3.a comes out you have os x

339
00:13:07,600 --> 00:13:09,839
10 7 and 10 8

340
00:13:09,839 --> 00:13:11,519
and then you got

341
00:13:11,519 --> 00:13:14,320
towards 2014 2015

342
00:13:14,320 --> 00:13:18,480
2017 this sample ends up on virus total

343
00:13:18,480 --> 00:13:20,560
vault 7 is stolen

344
00:13:20,560 --> 00:13:23,760
wikileaks releases vault 7 a year after

345
00:13:23,760 --> 00:13:25,040
that

346
00:13:25,040 --> 00:13:26,800
and that's when

347
00:13:26,800 --> 00:13:29,279
symantec and kaspersky and those groups

348
00:13:29,279 --> 00:13:31,920
publish their research so if i had to

349
00:13:31,920 --> 00:13:34,079
say something about when this specific

350
00:13:34,079 --> 00:13:36,560
implant was likely developed and used

351
00:13:36,560 --> 00:13:38,000
based on the information that we have

352
00:13:38,000 --> 00:13:41,680
now i would say sometime between 2007

353
00:13:41,680 --> 00:13:45,199
and 2013. and we'll get back to that

354
00:13:45,199 --> 00:13:49,839
that in a couple later slides as well

355
00:13:50,320 --> 00:13:51,839
so the question was like well does it

356
00:13:51,839 --> 00:13:54,399
does it run right um so i had narrowed

357
00:13:54,399 --> 00:13:58,320
down that um it would likely run on 10.7

358
00:13:58,320 --> 00:14:01,760
and luckily as of june of this year osx

359
00:14:01,760 --> 00:14:05,120
lion is available for free from apple

360
00:14:05,120 --> 00:14:06,240
um

361
00:14:06,240 --> 00:14:08,240
i tried to get it in may when it was

362
00:14:08,240 --> 00:14:10,320
like 20 dollars apple will happily take

363
00:14:10,320 --> 00:14:12,320
your 20 but not actually you can give

364
00:14:12,320 --> 00:14:13,839
you the downloader

365
00:14:13,839 --> 00:14:15,279
so something that i also did was that i

366
00:14:15,279 --> 00:14:19,440
went on ebay and i spent 95 on a macbook

367
00:14:19,440 --> 00:14:20,800
that runs lion

368
00:14:20,800 --> 00:14:22,560
just so i could actually run it on bare

369
00:14:22,560 --> 00:14:25,279
metal as well

370
00:14:26,720 --> 00:14:29,040
okay so

371
00:14:29,040 --> 00:14:31,279
let's run it let's see what happens

372
00:14:31,279 --> 00:14:32,079
right

373
00:14:32,079 --> 00:14:35,199
um so you can see that it persists as a

374
00:14:35,199 --> 00:14:36,480
launch agent

375
00:14:36,480 --> 00:14:38,800
the implant also self deletes so having

376
00:14:38,800 --> 00:14:41,440
snapshots in your vm can be super super

377
00:14:41,440 --> 00:14:42,480
helpful

378
00:14:42,480 --> 00:14:46,240
um let's see do i have a yes i do um

379
00:14:46,240 --> 00:14:49,360
if we then look at the plist file that

380
00:14:49,360 --> 00:14:52,800
growl helper creates you can see that um

381
00:14:52,800 --> 00:14:55,680
like you can you can see where it

382
00:14:55,680 --> 00:14:57,760
stores the binary you can see that it

383
00:14:57,760 --> 00:14:59,440
takes a command line argument and then

384
00:14:59,440 --> 00:15:01,600
you can see that it also has the run at

385
00:15:01,600 --> 00:15:02,720
load key

386
00:15:02,720 --> 00:15:04,800
set to true which just means that every

387
00:15:04,800 --> 00:15:07,360
time this user logs in this one is going

388
00:15:07,360 --> 00:15:09,680
to run and that is how it persists

389
00:15:09,680 --> 00:15:12,800
on the system

390
00:15:12,800 --> 00:15:14,639
um looking at

391
00:15:14,639 --> 00:15:16,720
file system usage so

392
00:15:16,720 --> 00:15:18,160
another thing that i thought was was

393
00:15:18,160 --> 00:15:20,240
really fun for this project was

394
00:15:20,240 --> 00:15:22,639
sadly none of patrick's amazing tools

395
00:15:22,639 --> 00:15:25,440
run on 107

396
00:15:25,440 --> 00:15:27,760
maybe maybe something to fix patrick uh

397
00:15:27,760 --> 00:15:31,199
in your copious amount of free time um

398
00:15:31,199 --> 00:15:32,959
so i had to like figure out what kind of

399
00:15:32,959 --> 00:15:35,199
like native 10 7 tools

400
00:15:35,199 --> 00:15:36,880
will actually help me get this get this

401
00:15:36,880 --> 00:15:39,680
work done and so you can monitor file

402
00:15:39,680 --> 00:15:42,959
system usage with fs usage and then see

403
00:15:42,959 --> 00:15:46,560
that uh gravel helper will create

404
00:15:46,560 --> 00:15:48,480
a bunch of different files a bunch of

405
00:15:48,480 --> 00:15:49,759
different

406
00:15:49,759 --> 00:15:51,440
folders it will then do some like

407
00:15:51,440 --> 00:15:52,639
cleanup

408
00:15:52,639 --> 00:15:54,000
so you can get a pretty good feel for

409
00:15:54,000 --> 00:15:56,560
like what it is that it is doing on the

410
00:15:56,560 --> 00:15:58,959
system

411
00:15:58,959 --> 00:16:01,759
um and in that as you can see it has

412
00:16:01,759 --> 00:16:04,160
like a dot profile

413
00:16:04,160 --> 00:16:06,240
dot bash profile

414
00:16:06,240 --> 00:16:07,759
bash rc

415
00:16:07,759 --> 00:16:10,320
and some other files

416
00:16:10,320 --> 00:16:11,759
then in

417
00:16:11,759 --> 00:16:14,240
in one case i also found that it created

418
00:16:14,240 --> 00:16:15,120
a

419
00:16:15,120 --> 00:16:17,759
dot profile in the current user's home

420
00:16:17,759 --> 00:16:21,040
directory with a path to grou helper and

421
00:16:21,040 --> 00:16:23,600
the comment says automatic grow helper

422
00:16:23,600 --> 00:16:25,279
do not remove

423
00:16:25,279 --> 00:16:26,639
and that will

424
00:16:26,639 --> 00:16:28,880
then run if i remember correctly every

425
00:16:28,880 --> 00:16:31,279
time the user opens the terminal is that

426
00:16:31,279 --> 00:16:32,880
right yeah

427
00:16:32,880 --> 00:16:34,839
cool thank you

428
00:16:34,839 --> 00:16:38,399
um i also found that

429
00:16:38,399 --> 00:16:40,880
um there's a difference in how this one

430
00:16:40,880 --> 00:16:43,600
behaves on the system if you're online

431
00:16:43,600 --> 00:16:46,880
versus offline so in the

432
00:16:46,880 --> 00:16:50,000
top example that's when i'm online bare

433
00:16:50,000 --> 00:16:53,120
metal macbook like actual hardware and

434
00:16:53,120 --> 00:16:54,959
you'll see that the files create and

435
00:16:54,959 --> 00:16:57,440
include grout helper and then a second

436
00:16:57,440 --> 00:17:00,320
binary called software update check

437
00:17:00,320 --> 00:17:02,880
in the bottom example where i am offline

438
00:17:02,880 --> 00:17:04,640
and in this case when i mean offline i

439
00:17:04,640 --> 00:17:05,679
mean a

440
00:17:05,679 --> 00:17:08,000
vm that is isolated and does not even

441
00:17:08,000 --> 00:17:10,000
have a network card if it has a network

442
00:17:10,000 --> 00:17:12,480
hardware is offline i think you still

443
00:17:12,480 --> 00:17:14,640
get the software update check

444
00:17:14,640 --> 00:17:15,679
binary

445
00:17:15,679 --> 00:17:17,839
so that's just a difference in like what

446
00:17:17,839 --> 00:17:19,199
it does on the system when it doesn't

447
00:17:19,199 --> 00:17:21,520
have a network card

448
00:17:21,520 --> 00:17:22,880
um

449
00:17:22,880 --> 00:17:23,839
and

450
00:17:23,839 --> 00:17:25,119
i thought that was really cool i was

451
00:17:25,119 --> 00:17:26,720
like really really excited like holy

452
00:17:26,720 --> 00:17:28,559
 this thing drops another binary

453
00:17:28,559 --> 00:17:31,039
it's really cool i'm gonna dig in

454
00:17:31,039 --> 00:17:32,799
very quickly realized that it just drops

455
00:17:32,799 --> 00:17:36,160
a copy of itself with a different name

456
00:17:36,160 --> 00:17:37,039
so

457
00:17:37,039 --> 00:17:39,280
after talking to patrick

458
00:17:39,280 --> 00:17:42,080
theory is that it likely uses that then

459
00:17:42,080 --> 00:17:45,120
to check for updates for itself rather

460
00:17:45,120 --> 00:17:46,799
than try to do that within the grail

461
00:17:46,799 --> 00:17:48,400
helper

462
00:17:48,400 --> 00:17:50,640
way

463
00:17:52,160 --> 00:17:54,559
as we saw earlier in the plist file

464
00:17:54,559 --> 00:17:57,440
right it had the dash f command argument

465
00:17:57,440 --> 00:18:00,000
flag um

466
00:18:00,000 --> 00:18:01,039
there's a bunch of different ways you

467
00:18:01,039 --> 00:18:03,360
can go about finding a command line orgs

468
00:18:03,360 --> 00:18:06,160
uh my current my initial method was just

469
00:18:06,160 --> 00:18:08,799
like try and fail right i had a vm i had

470
00:18:08,799 --> 00:18:11,039
a snapshot it was easy to revert back

471
00:18:11,039 --> 00:18:12,480
whenever i needed to

472
00:18:12,480 --> 00:18:14,400
so let's just like launch this thing

473
00:18:14,400 --> 00:18:15,440
with

474
00:18:15,440 --> 00:18:17,280
run through the whole alphabet and just

475
00:18:17,280 --> 00:18:18,559
see what happens

476
00:18:18,559 --> 00:18:20,480
um so if you want some like interesting

477
00:18:20,480 --> 00:18:22,240
like bits and pieces if you run it with

478
00:18:22,240 --> 00:18:24,720
dash c it just sort of like prints uh

479
00:18:24,720 --> 00:18:27,200
commands will be processed immediately

480
00:18:27,200 --> 00:18:28,960
and then it just waits for additional

481
00:18:28,960 --> 00:18:32,000
inputs and if you run it with dash d

482
00:18:32,000 --> 00:18:34,240
that's when it if it's already installed

483
00:18:34,240 --> 00:18:36,320
will drop a copy of software update

484
00:18:36,320 --> 00:18:37,520
check

485
00:18:37,520 --> 00:18:41,120
later on i also found that it does run

486
00:18:41,120 --> 00:18:44,000
in in the p list it has dash f but then

487
00:18:44,000 --> 00:18:46,559
if you run that and then look for what

488
00:18:46,559 --> 00:18:48,240
else it does on the system it does also

489
00:18:48,240 --> 00:18:51,360
run itself with dash d um so it does try

490
00:18:51,360 --> 00:18:53,039
to drop that um

491
00:18:53,039 --> 00:18:55,440
that copy and then there's the dash f

492
00:18:55,440 --> 00:18:57,280
which is the default um and then there's

493
00:18:57,280 --> 00:18:59,919
some other like methods where it

494
00:18:59,919 --> 00:19:01,360
um

495
00:19:01,360 --> 00:19:05,520
at least in my very isolated offline vm

496
00:19:05,520 --> 00:19:07,760
will run without persisting and then it

497
00:19:07,760 --> 00:19:11,440
varies in like which files it creates

498
00:19:11,440 --> 00:19:12,880
um

499
00:19:12,880 --> 00:19:15,280
but um if i wanted to try and find the

500
00:19:15,280 --> 00:19:17,760
command line args in hopper

501
00:19:17,760 --> 00:19:20,799
um you can then just load up the binary

502
00:19:20,799 --> 00:19:23,280
in hopper which is a fantastic tool and

503
00:19:23,280 --> 00:19:25,360
i can't believe it's just 99

504
00:19:25,360 --> 00:19:28,559
and just look for org c or b

505
00:19:28,559 --> 00:19:30,000
get opt

506
00:19:30,000 --> 00:19:32,320
and then click on the pseudocode mode

507
00:19:32,320 --> 00:19:33,679
icon

508
00:19:33,679 --> 00:19:35,440
and it will then tell you right there

509
00:19:35,440 --> 00:19:39,360
that the supported args are c d e f

510
00:19:39,360 --> 00:19:41,280
l p

511
00:19:41,280 --> 00:19:43,840
r capital r yes i don't know if all of

512
00:19:43,840 --> 00:19:45,679
them are implemented or like if all of

513
00:19:45,679 --> 00:19:47,280
them will actually do something but

514
00:19:47,280 --> 00:19:48,880
those are the ones that are

515
00:19:48,880 --> 00:19:52,919
listed in the binary

516
00:19:53,600 --> 00:19:55,039
the

517
00:19:55,039 --> 00:19:58,799
chinese research team also looked at all

518
00:19:58,799 --> 00:20:02,400
of the entry points supported by

519
00:20:02,400 --> 00:20:04,880
green lambert for osx there is if i

520
00:20:04,880 --> 00:20:07,200
remember correctly now there's like 20

521
00:20:07,200 --> 00:20:08,720
that do like a bunch of different things

522
00:20:08,720 --> 00:20:10,640
for like how to persist

523
00:20:10,640 --> 00:20:13,120
um setting up different types of

524
00:20:13,120 --> 00:20:14,640
http

525
00:20:14,640 --> 00:20:16,960
proxy ssl

526
00:20:16,960 --> 00:20:18,159
um

527
00:20:18,159 --> 00:20:20,480
generating the uid on the system

528
00:20:20,480 --> 00:20:21,919
and and those types of things that are

529
00:20:21,919 --> 00:20:24,240
in there

530
00:20:24,640 --> 00:20:26,000
um

531
00:20:26,000 --> 00:20:28,720
file system usage so i mentioned that um

532
00:20:28,720 --> 00:20:30,640
it creates a bunch of like files and

533
00:20:30,640 --> 00:20:33,120
folders it also does appear to like

534
00:20:33,120 --> 00:20:34,559
clean up

535
00:20:34,559 --> 00:20:36,080
so one

536
00:20:36,080 --> 00:20:38,720
current theory of mine is

537
00:20:38,720 --> 00:20:39,600
since

538
00:20:39,600 --> 00:20:43,919
all of these run before the binary's

539
00:20:43,919 --> 00:20:46,080
main entry point

540
00:20:46,080 --> 00:20:47,200
that

541
00:20:47,200 --> 00:20:49,120
it really just sort of like first like

542
00:20:49,120 --> 00:20:52,480
once the uh malware hits the system it

543
00:20:52,480 --> 00:20:54,400
just sort of runs and sets up everything

544
00:20:54,400 --> 00:20:56,799
that it could possibly want and need and

545
00:20:56,799 --> 00:20:58,240
then takes the time to sort of figure

546
00:20:58,240 --> 00:20:59,840
out well what is it that i actually need

547
00:20:59,840 --> 00:21:01,200
for the system that i'm on and then it

548
00:21:01,200 --> 00:21:03,520
sort of cleans that up

549
00:21:03,520 --> 00:21:05,600
so you can see here that at one point it

550
00:21:05,600 --> 00:21:08,000
created directories for like

551
00:21:08,000 --> 00:21:11,400
um dsinfo and

552
00:21:11,400 --> 00:21:13,440
com.apple.advance but then later delete

553
00:21:13,440 --> 00:21:16,440
study

554
00:21:17,280 --> 00:21:19,840
decrypting uh strings is something that

555
00:21:19,840 --> 00:21:23,280
uh patrick was very very hopeful with uh

556
00:21:23,280 --> 00:21:24,960
hopper has sort of done some of the

557
00:21:24,960 --> 00:21:28,960
heavy lifting for us here so on the

558
00:21:28,960 --> 00:21:31,440
left hand side you can see that hopper

559
00:21:31,440 --> 00:21:35,200
has figured out what the values for ecx

560
00:21:35,200 --> 00:21:37,679
edx and eax

561
00:21:37,679 --> 00:21:39,760
should be and

562
00:21:39,760 --> 00:21:41,360
i know patrick will talk a bit about

563
00:21:41,360 --> 00:21:43,360
encrypting and decrypting strings later

564
00:21:43,360 --> 00:21:45,360
on so like let's just say that for now

565
00:21:45,360 --> 00:21:47,679
we know that the routine on the left

566
00:21:47,679 --> 00:21:51,200
there is a string decryption function we

567
00:21:51,200 --> 00:21:52,960
can then on the right

568
00:21:52,960 --> 00:21:54,880
use the lldb

569
00:21:54,880 --> 00:21:57,039
debugger to load the sample

570
00:21:57,039 --> 00:21:58,960
into lldb

571
00:21:58,960 --> 00:21:59,919
set

572
00:21:59,919 --> 00:22:00,799
the

573
00:22:00,799 --> 00:22:03,360
program counter to be

574
00:22:03,360 --> 00:22:04,960
the value that that we needed to be with

575
00:22:04,960 --> 00:22:07,440
the specific string we can then manually

576
00:22:07,440 --> 00:22:11,440
set the values for ecx edx

577
00:22:11,440 --> 00:22:13,120
eax

578
00:22:13,120 --> 00:22:16,400
and then have the uh allow the malware

579
00:22:16,400 --> 00:22:18,880
to like continue to execute up until our

580
00:22:18,880 --> 00:22:21,440
breakpoint which is right after where it

581
00:22:21,440 --> 00:22:23,760
decrypts the string and we can then just

582
00:22:23,760 --> 00:22:26,000
print out the now decrypted string from

583
00:22:26,000 --> 00:22:27,760
memory which in this case is age

584
00:22:27,760 --> 00:22:29,600
version.txt

585
00:22:29,600 --> 00:22:32,400
um there's also

586
00:22:32,400 --> 00:22:34,000
um there are

587
00:22:34,000 --> 00:22:36,720
places in um if you sort of load this

588
00:22:36,720 --> 00:22:38,320
into hopper and you scroll around you'll

589
00:22:38,320 --> 00:22:40,559
see there are a bunch of places where

590
00:22:40,559 --> 00:22:42,480
hopper has figured out all three values

591
00:22:42,480 --> 00:22:44,240
for you so you can just sort of plug

592
00:22:44,240 --> 00:22:46,960
that into lldb and that's pretty easy

593
00:22:46,960 --> 00:22:48,799
there are places where it will give you

594
00:22:48,799 --> 00:22:50,240
two out of three and you'll have to do

595
00:22:50,240 --> 00:22:52,640
some math to figure it out

596
00:22:52,640 --> 00:22:55,120
patrick in his training talked about uh

597
00:22:55,120 --> 00:22:57,440
writing hopper scripts to automate this

598
00:22:57,440 --> 00:23:00,640
uh maybe i will try and look at the next

599
00:23:00,640 --> 00:23:02,320
but um

600
00:23:02,320 --> 00:23:03,919
this is definitely where where i got

601
00:23:03,919 --> 00:23:06,880
pretty lost as in i learned to do

602
00:23:06,880 --> 00:23:08,880
something new and i got a new string and

603
00:23:08,880 --> 00:23:10,880
it was like opening a new little package

604
00:23:10,880 --> 00:23:12,559
and i had no idea what would be inside

605
00:23:12,559 --> 00:23:14,000
and i thought it was

606
00:23:14,000 --> 00:23:15,919
really really exciting and so i spent a

607
00:23:15,919 --> 00:23:17,520
lot of time in decrypting a lot of

608
00:23:17,520 --> 00:23:18,799
strengths

609
00:23:18,799 --> 00:23:21,360
these are some of them that i found

610
00:23:21,360 --> 00:23:24,039
where it sort of talks about

611
00:23:24,039 --> 00:23:28,000
login.php getcon show php

612
00:23:28,000 --> 00:23:31,280
uploaders key header um all sorts of

613
00:23:31,280 --> 00:23:34,000
like interesting strings but

614
00:23:34,000 --> 00:23:35,520
like i said because it like appears to

615
00:23:35,520 --> 00:23:37,039
handle encrypted strings in a bunch of

616
00:23:37,039 --> 00:23:38,159
different ways

617
00:23:38,159 --> 00:23:40,960
i um have not yet automated the

618
00:23:40,960 --> 00:23:43,679
decryption process so i know there is

619
00:23:43,679 --> 00:23:47,760
more in there to to dig into it

620
00:23:47,760 --> 00:23:49,600
um

621
00:23:49,600 --> 00:23:51,360
some of the interesting strings that

622
00:23:51,360 --> 00:23:55,279
really stood out is one is a no lp

623
00:23:55,279 --> 00:23:58,480
configured where lp in this case likely

624
00:23:58,480 --> 00:23:59,919
refers to

625
00:23:59,919 --> 00:24:01,440
listening post

626
00:24:01,440 --> 00:24:04,000
which is a military it's like an english

627
00:24:04,000 --> 00:24:06,480
military term for second or

628
00:24:06,480 --> 00:24:09,200
reconnaissance it's also used by the nsa

629
00:24:09,200 --> 00:24:11,279
in their implants

630
00:24:11,279 --> 00:24:13,600
there's a vault 7 document that

631
00:24:13,600 --> 00:24:15,760
specifically covers listening post

632
00:24:15,760 --> 00:24:17,880
creation so it talks about having

633
00:24:17,880 --> 00:24:19,679
[Music]

634
00:24:19,679 --> 00:24:21,840
base os images that are like auto

635
00:24:21,840 --> 00:24:24,400
configured to be listening posts which i

636
00:24:24,400 --> 00:24:27,520
thought was pretty interesting

637
00:24:28,320 --> 00:24:31,039
um as we saw there were some like html

638
00:24:31,039 --> 00:24:34,320
php text files

639
00:24:34,320 --> 00:24:36,640
i was not able to access those text

640
00:24:36,640 --> 00:24:40,080
files kaspersky had noted that green

641
00:24:40,080 --> 00:24:42,480
lamborgh samples have two

642
00:24:42,480 --> 00:24:45,039
cnc servers hard coded

643
00:24:45,039 --> 00:24:46,960
in their configuration block a host name

644
00:24:46,960 --> 00:24:50,080
and an ip address and i assume

645
00:24:50,080 --> 00:24:52,559
that that's going to be present in

646
00:24:52,559 --> 00:24:54,720
at least one of these files

647
00:24:54,720 --> 00:24:57,679
the researchers in

648
00:24:57,679 --> 00:25:00,640
china had noted that uh green lambert

649
00:25:00,640 --> 00:25:02,400
talks to the listening post through

650
00:25:02,400 --> 00:25:05,919
login dot php and getconf dot php and

651
00:25:05,919 --> 00:25:08,480
that it downloads follow-up code through

652
00:25:08,480 --> 00:25:10,480
getfile.php

653
00:25:10,480 --> 00:25:12,000
so there's like a lot more interesting

654
00:25:12,000 --> 00:25:13,360
stuff here that we just like don't have

655
00:25:13,360 --> 00:25:15,840
access to in part because this sample is

656
00:25:15,840 --> 00:25:18,480
is so old

657
00:25:19,520 --> 00:25:21,840
um

658
00:25:21,919 --> 00:25:23,760
another thing that i found digging

659
00:25:23,760 --> 00:25:26,240
around in hopper

660
00:25:26,240 --> 00:25:27,760
and i will try and speed up a bit so i

661
00:25:27,760 --> 00:25:31,440
don't run into patrick's talk um was

662
00:25:31,440 --> 00:25:33,039
i found this like version string where

663
00:25:33,039 --> 00:25:34,720
it just sort of says version equals

664
00:25:34,720 --> 00:25:36,480
1.2.0

665
00:25:36,480 --> 00:25:38,720
um and in hopper i saw that it like has

666
00:25:38,720 --> 00:25:40,400
this little light equal sign where i

667
00:25:40,400 --> 00:25:42,799
knew that the string above was version

668
00:25:42,799 --> 00:25:44,240
and then hopper had figured out that

669
00:25:44,240 --> 00:25:46,080
here's an equal sign so we have version

670
00:25:46,080 --> 00:25:47,279
equals

671
00:25:47,279 --> 00:25:50,559
something so then um i hit x to see the

672
00:25:50,559 --> 00:25:52,480
cross reference to see where else is

673
00:25:52,480 --> 00:25:54,480
this equal sign being used and then

674
00:25:54,480 --> 00:25:56,400
decrypted those strings

675
00:25:56,400 --> 00:25:59,039
to then build that what may or be may or

676
00:25:59,039 --> 00:26:01,120
may not be some sort of like config

677
00:26:01,120 --> 00:26:04,080
survey it runs you name on the system

678
00:26:04,080 --> 00:26:06,480
date and time uptime

679
00:26:06,480 --> 00:26:09,840
current version of i believe the implant

680
00:26:09,840 --> 00:26:11,200
and i think there's more there that i

681
00:26:11,200 --> 00:26:14,400
just haven't like built out

682
00:26:14,799 --> 00:26:15,840
um

683
00:26:15,840 --> 00:26:17,760
if you run the sample on

684
00:26:17,760 --> 00:26:19,600
bare metal and then capture the traffic

685
00:26:19,600 --> 00:26:21,440
with tcp dump

686
00:26:21,440 --> 00:26:24,159
and load it up in wireshark you get the

687
00:26:24,159 --> 00:26:26,400
host name and the ip address of the

688
00:26:26,400 --> 00:26:27,840
specific

689
00:26:27,840 --> 00:26:29,039
implant

690
00:26:29,039 --> 00:26:31,360
which is pretty cool

691
00:26:31,360 --> 00:26:34,159
um i i have some slides that dig into

692
00:26:34,159 --> 00:26:36,240
that as well

693
00:26:36,240 --> 00:26:37,440
so

694
00:26:37,440 --> 00:26:40,080
once like sure great like we have the

695
00:26:40,080 --> 00:26:43,120
notify dot what is the growl

696
00:26:43,120 --> 00:26:44,799
update dot com

697
00:26:44,799 --> 00:26:47,600
um host names like let's let's google it

698
00:26:47,600 --> 00:26:49,039
right let's see what we can can learn

699
00:26:49,039 --> 00:26:52,480
about it um turns out not a whole lot

700
00:26:52,480 --> 00:26:55,360
um google suggested um

701
00:26:55,360 --> 00:26:58,159
that i can search for how to bake a cake

702
00:26:58,159 --> 00:27:00,080
instead um i feel like i have done

703
00:27:00,080 --> 00:27:01,360
enough

704
00:27:01,360 --> 00:27:03,840
way back machine had nothing

705
00:27:03,840 --> 00:27:06,880
virus total said that this url was first

706
00:27:06,880 --> 00:27:08,960
submitted back in 2016 so that's

707
00:27:08,960 --> 00:27:12,000
probably kaspersky

708
00:27:12,320 --> 00:27:16,320
but if you look at crt.sh

709
00:27:16,320 --> 00:27:19,520
that website tracks ssl certificate

710
00:27:19,520 --> 00:27:22,320
issued for various domains if you plug

711
00:27:22,320 --> 00:27:23,279
in

712
00:27:23,279 --> 00:27:24,799
this um

713
00:27:24,799 --> 00:27:27,520
domain name into the site you find that

714
00:27:27,520 --> 00:27:31,000
an ssl cert was created in october of

715
00:27:31,000 --> 00:27:33,760
2013. that's not to say that the domain

716
00:27:33,760 --> 00:27:36,080
did not exist before then but at the

717
00:27:36,080 --> 00:27:38,159
very least we knew that it was

718
00:27:38,159 --> 00:27:40,559
active in october of 2013 because a

719
00:27:40,559 --> 00:27:42,960
certificate was created for it which i i

720
00:27:42,960 --> 00:27:44,159
think is pretty interesting and that

721
00:27:44,159 --> 00:27:46,240
does match what kaspersky had said

722
00:27:46,240 --> 00:27:48,799
around green lambert being active in

723
00:27:48,799 --> 00:27:50,159
2013

724
00:27:50,159 --> 00:27:51,520
and

725
00:27:51,520 --> 00:27:53,520
the timeline that we created early on

726
00:27:53,520 --> 00:27:55,600
with all those different dates and times

727
00:27:55,600 --> 00:27:57,600
that this was likely developed and used

728
00:27:57,600 --> 00:28:02,640
sometime between 2007 and 2013.

729
00:28:02,640 --> 00:28:04,480
um kaspersky sinkholed it so that's

730
00:28:04,480 --> 00:28:05,760
great

731
00:28:05,760 --> 00:28:07,919
um quickly looking at just the

732
00:28:07,919 --> 00:28:09,600
development tradecraft do's and don'ts

733
00:28:09,600 --> 00:28:10,720
just to sort of go back to that

734
00:28:10,720 --> 00:28:12,480
spreadsheet and see was there anything

735
00:28:12,480 --> 00:28:14,399
there that like stood out

736
00:28:14,399 --> 00:28:17,520
um as kosten at kaspersky pointed out on

737
00:28:17,520 --> 00:28:18,480
twitter

738
00:28:18,480 --> 00:28:21,039
any type of malware that like follows

739
00:28:21,039 --> 00:28:23,840
those guidelines and has like c2 jitter

740
00:28:23,840 --> 00:28:27,679
and secure arrays and uses ssl and um

741
00:28:27,679 --> 00:28:30,399
doesn't take up a whole lot of um

742
00:28:30,399 --> 00:28:32,559
space on disk and it's encrypting logs

743
00:28:32,559 --> 00:28:34,080
and encrypt strings

744
00:28:34,080 --> 00:28:36,480
only decrypts them what it needs to like

745
00:28:36,480 --> 00:28:37,760
at that point

746
00:28:37,760 --> 00:28:39,679
it's already more interesting like than

747
00:28:39,679 --> 00:28:43,039
most like run-of-the-mill type adware or

748
00:28:43,039 --> 00:28:45,120
malware in addition

749
00:28:45,120 --> 00:28:47,360
um in

750
00:28:47,360 --> 00:28:48,720
in

751
00:28:48,720 --> 00:28:51,919
this binary so for one the full size is

752
00:28:51,919 --> 00:28:53,440
a bit over what

753
00:28:53,440 --> 00:28:55,919
the cia would call an ideal binary file

754
00:28:55,919 --> 00:28:58,080
size not that i don't think that means a

755
00:28:58,080 --> 00:28:59,919
whole lot in this case

756
00:28:59,919 --> 00:29:02,640
the use of lp for listening post may be

757
00:29:02,640 --> 00:29:06,000
a caa or us government specific term

758
00:29:06,000 --> 00:29:09,520
it's at the very least an english term

759
00:29:09,520 --> 00:29:10,720
use

760
00:29:10,720 --> 00:29:12,720
what is an english abbreviation for the

761
00:29:12,720 --> 00:29:14,640
days of the week i'm not sure that

762
00:29:14,640 --> 00:29:16,480
malware authors in other countries would

763
00:29:16,480 --> 00:29:18,880
necessarily use that and then also use

764
00:29:18,880 --> 00:29:22,640
of the lib event back before it was cool

765
00:29:22,799 --> 00:29:25,360
and then

766
00:29:25,760 --> 00:29:28,640
i wrote a blog post that has all of

767
00:29:28,640 --> 00:29:29,760
these

768
00:29:29,760 --> 00:29:32,399
screenshots digs into exactly how i did

769
00:29:32,399 --> 00:29:35,120
what i did a bit more closely and

770
00:29:35,120 --> 00:29:40,120
patrick is hosting that so thank you

771
00:29:43,130 --> 00:29:50,080
[Applause]

772
00:29:50,080 --> 00:29:51,760
all right thanks runa super interesting

773
00:29:51,760 --> 00:29:54,399
stuff now i'm going to tell you about a

774
00:29:54,399 --> 00:29:57,360
first stage mac os implant from

775
00:29:57,360 --> 00:30:00,320
cia's sister and in my opinion far

776
00:30:00,320 --> 00:30:03,360
superior agency the nsa

777
00:30:03,360 --> 00:30:05,279
and like roon is part of the talk yes

778
00:30:05,279 --> 00:30:07,679
the focus will be on analyzing the

779
00:30:07,679 --> 00:30:10,080
implant but also i wanted to show you

780
00:30:10,080 --> 00:30:12,640
how i generally go about performing

781
00:30:12,640 --> 00:30:14,399
malware analysis i'm not saying this is

782
00:30:14,399 --> 00:30:16,640
the best way but this is my way so there

783
00:30:16,640 --> 00:30:19,200
might be some tips techniques that you

784
00:30:19,200 --> 00:30:23,120
can pick up along the way so the implant

785
00:30:23,120 --> 00:30:25,360
i'm going to tell you about is something

786
00:30:25,360 --> 00:30:27,679
called double fantasy

787
00:30:27,679 --> 00:30:29,919
cool name the windows version was

788
00:30:29,919 --> 00:30:32,480
originally disclosed disclosed to us by

789
00:30:32,480 --> 00:30:35,679
kaspersky in 2015. two important

790
00:30:35,679 --> 00:30:38,399
takeaways from their analysis

791
00:30:38,399 --> 00:30:41,360
first they articulated the fact that the

792
00:30:41,360 --> 00:30:44,159
apparent infection vector was the use of

793
00:30:44,159 --> 00:30:46,880
zero days and they also illustrated how

794
00:30:46,880 --> 00:30:50,399
this implant fit into a multi-stage

795
00:30:50,399 --> 00:30:53,360
cyber espionage operation specifically

796
00:30:53,360 --> 00:30:56,720
as a first stage implant whose goal was

797
00:30:56,720 --> 00:30:58,880
to confirm that the victim was of

798
00:30:58,880 --> 00:31:00,960
interest and if so install a more

799
00:31:00,960 --> 00:31:02,480
comprehensive

800
00:31:02,480 --> 00:31:03,679
persistent

801
00:31:03,679 --> 00:31:05,840
second stage implant

802
00:31:05,840 --> 00:31:07,519
i do also want to point out that their

803
00:31:07,519 --> 00:31:09,919
analysis focused on the mac sorry the

804
00:31:09,919 --> 00:31:12,080
windows specific variant at the time of

805
00:31:12,080 --> 00:31:14,480
the analysis kaspersky did not have

806
00:31:14,480 --> 00:31:18,000
access to a mac version of this implant

807
00:31:18,000 --> 00:31:20,480
however they were able to sinkhole

808
00:31:20,480 --> 00:31:22,960
various command and control servers that

809
00:31:22,960 --> 00:31:25,519
the malware was beaconing back to and

810
00:31:25,519 --> 00:31:29,360
they did see mac os user agent strings

811
00:31:29,360 --> 00:31:30,880
which led them to believe as they

812
00:31:30,880 --> 00:31:32,799
articulated in the research that we have

813
00:31:32,799 --> 00:31:35,360
on the slide that yes indeed a mac

814
00:31:35,360 --> 00:31:39,679
variant existed somewhere in china

815
00:31:39,679 --> 00:31:42,559
turns out a mac os version of double

816
00:31:42,559 --> 00:31:45,519
fantasy had been submitted to virustotal

817
00:31:45,519 --> 00:31:49,840
all the way back in 2014 yes from china

818
00:31:49,840 --> 00:31:53,039
but had remained undetected by any of

819
00:31:53,039 --> 00:31:56,000
the anti-virus engines on virus total

820
00:31:56,000 --> 00:31:59,679
until 2020. yikes

821
00:31:59,679 --> 00:32:02,480
so the submitted file was named md

822
00:32:02,480 --> 00:32:05,200
worker which mimics an apple binary that

823
00:32:05,200 --> 00:32:07,679
is often found running multiple times on

824
00:32:07,679 --> 00:32:10,159
a normal install of mac os so the idea

825
00:32:10,159 --> 00:32:12,720
is the attackers were likely hiding in

826
00:32:12,720 --> 00:32:15,760
plain sight if we triage the binary

827
00:32:15,760 --> 00:32:17,919
that's normally the first step i perform

828
00:32:17,919 --> 00:32:20,559
when analyzing a new piece of malware we

829
00:32:20,559 --> 00:32:23,200
can see that it's an unsigned 32-bit

830
00:32:23,200 --> 00:32:26,000
mock o binary which for binary circa

831
00:32:26,000 --> 00:32:29,200
2013 is the standard or the norm

832
00:32:29,200 --> 00:32:32,320
also if we use o tool to dump its its

833
00:32:32,320 --> 00:32:34,799
dependencies we can see that it's rather

834
00:32:34,799 --> 00:32:36,720
self-contained which is an interesting

835
00:32:36,720 --> 00:32:38,960
observation as well

836
00:32:38,960 --> 00:32:40,960
as rooney mentioned it's really good to

837
00:32:40,960 --> 00:32:42,720
run the strings command to see if

838
00:32:42,720 --> 00:32:45,120
there's any embedded or strings that we

839
00:32:45,120 --> 00:32:47,519
can pull out from the binary a lot of

840
00:32:47,519 --> 00:32:49,840
times this can reveal a lot of the

841
00:32:49,840 --> 00:32:52,799
capabilities of the malware or guide

842
00:32:52,799 --> 00:32:55,120
your continued analysis

843
00:32:55,120 --> 00:32:57,360
on mac os we can use the aptly named

844
00:32:57,360 --> 00:32:59,200
strings utility make sure you run it

845
00:32:59,200 --> 00:33:01,519
with the dash flag otherwise it only

846
00:33:01,519 --> 00:33:03,600
scans for strings in certain sections of

847
00:33:03,600 --> 00:33:05,279
the file

848
00:33:05,279 --> 00:33:07,120
as you can see though on the slide

849
00:33:07,120 --> 00:33:08,640
unfortunately the majority of the

850
00:33:08,640 --> 00:33:11,679
strings in the implant are encrypted

851
00:33:11,679 --> 00:33:15,039
this is not surprising the nsa is not

852
00:33:15,039 --> 00:33:16,960
stupid they realize that if and when

853
00:33:16,960 --> 00:33:18,720
their malware gets detected and

854
00:33:18,720 --> 00:33:20,159
discovered it's going to be

855
00:33:20,159 --> 00:33:22,799
comprehensively analyzed and so they're

856
00:33:22,799 --> 00:33:24,640
going to at least encrypt the strings to

857
00:33:24,640 --> 00:33:28,080
make this slightly more difficult

858
00:33:28,080 --> 00:33:30,559
now it's always good to try to uncover

859
00:33:30,559 --> 00:33:32,880
the plain text values of any encrypted

860
00:33:32,880 --> 00:33:35,279
strings before continuing on with your

861
00:33:35,279 --> 00:33:37,440
analysis you know such strings can

862
00:33:37,440 --> 00:33:40,159
really help guide and simplify your

863
00:33:40,159 --> 00:33:41,200
analysis

864
00:33:41,200 --> 00:33:43,679
so we're briefly going to go over one

865
00:33:43,679 --> 00:33:46,240
approach to how you can tackle the

866
00:33:46,240 --> 00:33:48,399
problem of encrypted strings via a

867
00:33:48,399 --> 00:33:51,200
disassembler script most disassemblers

868
00:33:51,200 --> 00:33:53,360
support the ability of scripts or

869
00:33:53,360 --> 00:33:56,480
plugins i use hopper it's a great mac os

870
00:33:56,480 --> 00:33:58,480
specific reverse engineering tool so

871
00:33:58,480 --> 00:34:00,080
we're going to focus on that but a lot

872
00:34:00,080 --> 00:34:02,080
of the concepts apply to other

873
00:34:02,080 --> 00:34:04,399
disassemblers as well

874
00:34:04,399 --> 00:34:06,480
so in four easy steps what we're going

875
00:34:06,480 --> 00:34:09,760
to do is we're first going to write a

876
00:34:09,760 --> 00:34:12,079
this assembler script that looks for the

877
00:34:12,079 --> 00:34:14,560
start and the end of the c

878
00:34:14,560 --> 00:34:17,280
c string segment this is where all the

879
00:34:17,280 --> 00:34:19,280
encrypted strings that are embedded in

880
00:34:19,280 --> 00:34:21,119
this binary lie

881
00:34:21,119 --> 00:34:22,480
we're then going to programmatically

882
00:34:22,480 --> 00:34:25,520
extract each of these encrypted strings

883
00:34:25,520 --> 00:34:27,199
we're then going to run these through

884
00:34:27,199 --> 00:34:29,199
the decryption algorithm which we first

885
00:34:29,199 --> 00:34:31,199
have to identify in the malware and then

886
00:34:31,199 --> 00:34:33,280
re-implement so we can decrypt each

887
00:34:33,280 --> 00:34:34,800
string and then finally we're going to

888
00:34:34,800 --> 00:34:37,918
annotate the disassembly with the now

889
00:34:37,918 --> 00:34:40,800
decrypted string so that our analysis

890
00:34:40,800 --> 00:34:44,000
can be simplified and continue onwards

891
00:34:44,000 --> 00:34:46,079
so let's go through each of these steps

892
00:34:46,079 --> 00:34:48,159
i hope this is illustrative of you know

893
00:34:48,159 --> 00:34:50,399
how to write a hopper script but also

894
00:34:50,399 --> 00:34:52,800
how we go about decrypting the strings

895
00:34:52,800 --> 00:34:53,760
in this

896
00:34:53,760 --> 00:34:55,359
interesting binary

897
00:34:55,359 --> 00:34:57,599
so first up we need to find the c string

898
00:34:57,599 --> 00:34:59,119
segment as i mentioned this is the

899
00:34:59,119 --> 00:35:01,359
segment in the maco executable in this

900
00:35:01,359 --> 00:35:03,839
specific binary that contains all of the

901
00:35:03,839 --> 00:35:05,520
encrypted strings

902
00:35:05,520 --> 00:35:08,480
so hopper provides a myriad of apis to

903
00:35:08,480 --> 00:35:10,720
interact with disassembly and parse

904
00:35:10,720 --> 00:35:12,640
through the maco header so this is

905
00:35:12,640 --> 00:35:14,880
pretty straightforward you can see on

906
00:35:14,880 --> 00:35:17,119
the slide we simply iterate through all

907
00:35:17,119 --> 00:35:19,280
the segments and their sections looking

908
00:35:19,280 --> 00:35:21,040
for one that matches undersoar

909
00:35:21,040 --> 00:35:23,359
underscore c string and then once we

910
00:35:23,359 --> 00:35:26,960
find a match hopper provides information

911
00:35:26,960 --> 00:35:29,359
about that section including the start

912
00:35:29,359 --> 00:35:31,359
and the end so now we have the beginning

913
00:35:31,359 --> 00:35:33,520
and end of that section which is where

914
00:35:33,520 --> 00:35:36,000
all the encrypted strings are

915
00:35:36,000 --> 00:35:36,960
now what we're going to do is we're

916
00:35:36,960 --> 00:35:39,119
going to iterate through that section

917
00:35:39,119 --> 00:35:41,760
byte by byte extracting anything that

918
00:35:41,760 --> 00:35:44,240
looks like an encrypted string lucky for

919
00:35:44,240 --> 00:35:46,560
us these are all null terminated so we

920
00:35:46,560 --> 00:35:48,720
can basically just read forward until we

921
00:35:48,720 --> 00:35:51,119
find zero and then assume essentially we

922
00:35:51,119 --> 00:35:53,440
have a null terminated string and then

923
00:35:53,440 --> 00:35:55,599
do that until we reach the end of the

924
00:35:55,599 --> 00:35:57,680
segment as i mentioned for each of those

925
00:35:57,680 --> 00:36:00,320
strings we're then going to invoke our

926
00:36:00,320 --> 00:36:02,720
custom decryption routine to decrypt the

927
00:36:02,720 --> 00:36:04,880
embedded string

928
00:36:04,880 --> 00:36:06,880
now of course in order to do that we

929
00:36:06,880 --> 00:36:09,359
have to understand how the malware has

930
00:36:09,359 --> 00:36:12,320
encrypted and how it decrypts the string

931
00:36:12,320 --> 00:36:13,839
for its use

932
00:36:13,839 --> 00:36:16,480
how do we find that well it turns out

933
00:36:16,480 --> 00:36:18,320
fairly easily and this is a generic

934
00:36:18,320 --> 00:36:20,160
approach for analyzing essentially any

935
00:36:20,160 --> 00:36:22,640
malware sample that utilizes encrypted

936
00:36:22,640 --> 00:36:24,400
strings if you're interested in

937
00:36:24,400 --> 00:36:26,640
recovering the decryption algorithm

938
00:36:26,640 --> 00:36:29,040
basically what you do is look for cross

939
00:36:29,040 --> 00:36:31,200
references where the encrypted strings

940
00:36:31,200 --> 00:36:33,599
are used obviously the malware has to

941
00:36:33,599 --> 00:36:35,920
decrypt the string before it's using it

942
00:36:35,920 --> 00:36:38,240
and normally the decryption function is

943
00:36:38,240 --> 00:36:40,320
implemented in a standalone or helper

944
00:36:40,320 --> 00:36:42,640
function so as we can see on the slide

945
00:36:42,640 --> 00:36:44,160
there's an encrypted string that's

946
00:36:44,160 --> 00:36:47,240
passed to a subroutine called sub

947
00:36:47,240 --> 00:36:49,680
d900 and if we look at the cross

948
00:36:49,680 --> 00:36:51,839
references for this subroutine we can

949
00:36:51,839 --> 00:36:54,320
see it's called every time an encrypted

950
00:36:54,320 --> 00:36:56,160
string needs to be decrypted so it's a

951
00:36:56,160 --> 00:36:58,160
likely candidate for the decryption

952
00:36:58,160 --> 00:37:00,640
string algorithm if we look at it at a

953
00:37:00,640 --> 00:37:02,480
disassemblers we can see on the slide it

954
00:37:02,480 --> 00:37:04,640
turns out yes indeed to be the malware's

955
00:37:04,640 --> 00:37:06,640
decryption algorithm we're not going to

956
00:37:06,640 --> 00:37:08,400
go through all the disassembly but in

957
00:37:08,400 --> 00:37:10,320
short it's a multi-key decryption

958
00:37:10,320 --> 00:37:12,640
algorithm that uses the xor encryption

959
00:37:12,640 --> 00:37:14,320
scheme

960
00:37:14,320 --> 00:37:16,320
so now we've uncovered this the

961
00:37:16,320 --> 00:37:18,240
malware's encryption and decryption

962
00:37:18,240 --> 00:37:20,160
algorithm what we can do is we can

963
00:37:20,160 --> 00:37:22,640
re-implement that in our disassembly

964
00:37:22,640 --> 00:37:24,720
script so that we can programmatically

965
00:37:24,720 --> 00:37:27,119
decrypt any encrypted strings pretty

966
00:37:27,119 --> 00:37:28,560
straightforward to do once we've

967
00:37:28,560 --> 00:37:30,720
understood the algorithm it's about 15

968
00:37:30,720 --> 00:37:32,240
lines of python

969
00:37:32,240 --> 00:37:35,200
we see we init the xor keys the first

970
00:37:35,200 --> 00:37:37,200
xor key comes from the encrypted string

971
00:37:37,200 --> 00:37:39,440
itself the second one is hard coded to

972
00:37:39,440 --> 00:37:41,680
47 and then what we do is we just

973
00:37:41,680 --> 00:37:43,920
iterate over each byte of the encrypted

974
00:37:43,920 --> 00:37:46,560
string applying the decryption xor keys

975
00:37:46,560 --> 00:37:48,800
and result is we will have the decrypted

976
00:37:48,800 --> 00:37:50,560
string

977
00:37:50,560 --> 00:37:52,320
now we have the decrypted string as i

978
00:37:52,320 --> 00:37:53,839
mentioned we want to annotate the

979
00:37:53,839 --> 00:37:56,240
disassembly so that our continued static

980
00:37:56,240 --> 00:37:59,680
analysis is made easier hopper provides

981
00:37:59,680 --> 00:38:02,720
apis to add inline comments for example

982
00:38:02,720 --> 00:38:04,800
where the encrypted string is so that's

983
00:38:04,800 --> 00:38:07,520
the first thing we do but we also want

984
00:38:07,520 --> 00:38:09,520
to add a comment containing the

985
00:38:09,520 --> 00:38:12,160
decrypted string at every location in

986
00:38:12,160 --> 00:38:14,240
the disassembly that has a cross

987
00:38:14,240 --> 00:38:16,079
reference to the encrypted string

988
00:38:16,079 --> 00:38:18,320
luckily hopper has an api that gives you

989
00:38:18,320 --> 00:38:20,960
all cross references for a given address

990
00:38:20,960 --> 00:38:23,680
so we can resolve those and just iterate

991
00:38:23,680 --> 00:38:26,079
over each of those adding the decrypted

992
00:38:26,079 --> 00:38:28,480
string as a comment now in that segment

993
00:38:28,480 --> 00:38:29,520
of code

994
00:38:29,520 --> 00:38:31,760
so as we can see on the slide the first

995
00:38:31,760 --> 00:38:34,400
encrypted string decrypts to slash temp

996
00:38:34,400 --> 00:38:36,320
we add that as a comment to the location

997
00:38:36,320 --> 00:38:37,920
of the encrypted string and anywhere

998
00:38:37,920 --> 00:38:39,920
else in the code that encrypted string

999
00:38:39,920 --> 00:38:42,160
is referenced

1000
00:38:42,160 --> 00:38:44,160
turns out the malware utilizes a second

1001
00:38:44,160 --> 00:38:46,640
decryption algorithm for other strings

1002
00:38:46,640 --> 00:38:48,560
we can follow the same approach look for

1003
00:38:48,560 --> 00:38:50,560
cross references turns out this

1004
00:38:50,560 --> 00:38:52,800
decryption algorithm is even even even

1005
00:38:52,800 --> 00:38:54,240
simpler it's based on some

1006
00:38:54,240 --> 00:38:56,400
multiplication so again we can

1007
00:38:56,400 --> 00:38:58,640
re-implement this in python in our

1008
00:38:58,640 --> 00:39:00,960
disassembly script and pass any

1009
00:39:00,960 --> 00:39:02,640
encrypted strings that are encrypted

1010
00:39:02,640 --> 00:39:04,800
with the second encryption algorithm to

1011
00:39:04,800 --> 00:39:08,000
retrieve the plain text values

1012
00:39:08,000 --> 00:39:09,599
so what do we have once we decrypt the

1013
00:39:09,599 --> 00:39:11,440
strings well some very interesting

1014
00:39:11,440 --> 00:39:13,599
things recalling again that generally

1015
00:39:13,599 --> 00:39:15,680
encrypted strings are the sensitive

1016
00:39:15,680 --> 00:39:17,839
strings that the malware authors want to

1017
00:39:17,839 --> 00:39:20,960
hide from analysts such as ourselves

1018
00:39:20,960 --> 00:39:22,480
first we have something that looks like

1019
00:39:22,480 --> 00:39:24,720
command line arguments passed to perhaps

1020
00:39:24,720 --> 00:39:27,599
get opt we then have some key value

1021
00:39:27,599 --> 00:39:30,160
pairs that might indicate the use of a

1022
00:39:30,160 --> 00:39:31,760
config file

1023
00:39:31,760 --> 00:39:34,800
we have a path to a cstore file which

1024
00:39:34,800 --> 00:39:36,560
we're not sure what that is

1025
00:39:36,560 --> 00:39:38,480
looks like we have something related to

1026
00:39:38,480 --> 00:39:40,960
command and control or lp columns and

1027
00:39:40,960 --> 00:39:42,800
then some strings that indicate the

1028
00:39:42,800 --> 00:39:46,560
malware might be proxy aware

1029
00:39:46,560 --> 00:39:49,200
also we have more encrypted strings

1030
00:39:49,200 --> 00:39:51,680
turns out there are a large number of

1031
00:39:51,680 --> 00:39:55,040
sequential strings that appear to be

1032
00:39:55,040 --> 00:39:57,760
related to a survey this is unsurprising

1033
00:39:57,760 --> 00:40:00,400
because recall that this implant appears

1034
00:40:00,400 --> 00:40:03,119
to be a first stage implant

1035
00:40:03,119 --> 00:40:05,920
as i mentioned whose main goal is to

1036
00:40:05,920 --> 00:40:08,800
kind of you know figure out if a system

1037
00:40:08,800 --> 00:40:12,000
is of interest to the agency and then we

1038
00:40:12,000 --> 00:40:14,000
also have this dyld insert library

1039
00:40:14,000 --> 00:40:16,160
string which you know we might be

1040
00:40:16,160 --> 00:40:18,160
familiar with it in dilip injection

1041
00:40:18,160 --> 00:40:21,040
attacks not sure why that's in but it

1042
00:40:21,040 --> 00:40:22,839
turns out to be rather

1043
00:40:22,839 --> 00:40:25,760
interesting now once i've decrypted the

1044
00:40:25,760 --> 00:40:28,960
strings i google them because it's often

1045
00:40:28,960 --> 00:40:31,040
a good time to figure out if other

1046
00:40:31,040 --> 00:40:33,920
people have already analyzed this sample

1047
00:40:33,920 --> 00:40:36,000
perhaps it's brand new

1048
00:40:36,000 --> 00:40:37,760
well one interesting match that actually

1049
00:40:37,760 --> 00:40:40,240
i found on my file system was that

1050
00:40:40,240 --> 00:40:42,640
apple's malware removal tool actually

1051
00:40:42,640 --> 00:40:45,839
has a signature for this binary apple is

1052
00:40:45,839 --> 00:40:48,240
very notorious for updating their

1053
00:40:48,240 --> 00:40:50,400
antivirus components of the operating

1054
00:40:50,400 --> 00:40:52,720
system without giving anybody any

1055
00:40:52,720 --> 00:40:55,040
indication that a they are doing it or b

1056
00:40:55,040 --> 00:40:56,560
what they are looking for

1057
00:40:56,560 --> 00:40:58,960
so if we reverse engineer this specific

1058
00:40:58,960 --> 00:41:01,839
component called mrt or the malware

1059
00:41:01,839 --> 00:41:05,040
removal tool we find that apple has a

1060
00:41:05,040 --> 00:41:07,680
signature that looks for that cs store

1061
00:41:07,680 --> 00:41:10,000
file interesting if you google this file

1062
00:41:10,000 --> 00:41:11,680
there are no other hits so no one's

1063
00:41:11,680 --> 00:41:13,440
talked about this mac os implant

1064
00:41:13,440 --> 00:41:15,359
publicly before

1065
00:41:15,359 --> 00:41:17,440
also though there are in that same

1066
00:41:17,440 --> 00:41:20,560
signature some paths to persistence

1067
00:41:20,560 --> 00:41:25,119
and also apple's name os x atg 11.a so

1068
00:41:25,119 --> 00:41:26,800
hey i guess now we know what that

1069
00:41:26,800 --> 00:41:29,200
internal signature name matches to

1070
00:41:29,200 --> 00:41:30,640
in terms of the persistence we didn't

1071
00:41:30,640 --> 00:41:32,319
actually see those strings in this

1072
00:41:32,319 --> 00:41:34,960
variant of the binary which likely means

1073
00:41:34,960 --> 00:41:37,760
that the nsa had or has multiple

1074
00:41:37,760 --> 00:41:39,680
versions of this binary some that

1075
00:41:39,680 --> 00:41:41,680
persist and some that don't the variant

1076
00:41:41,680 --> 00:41:43,200
we're talking about today does not

1077
00:41:43,200 --> 00:41:45,040
appear to support persistence

1078
00:41:45,040 --> 00:41:47,040
functionality which again kind of makes

1079
00:41:47,040 --> 00:41:49,040
sense a first stage implant especially

1080
00:41:49,040 --> 00:41:50,720
that's just designed to survey the

1081
00:41:50,720 --> 00:41:52,319
system doesn't really need to hang

1082
00:41:52,319 --> 00:41:55,280
around or persist

1083
00:41:55,280 --> 00:41:57,359
so now we want to find the malware's

1084
00:41:57,359 --> 00:41:59,520
entry point right we've done some static

1085
00:41:59,520 --> 00:42:00,960
analysis we've

1086
00:42:00,960 --> 00:42:03,359
decrypted the strings we've run otool

1087
00:42:03,359 --> 00:42:05,359
we've basically triaged a sample it's

1088
00:42:05,359 --> 00:42:08,400
now time to dig into the disassembly so

1089
00:42:08,400 --> 00:42:11,040
how do we find the main entry point well

1090
00:42:11,040 --> 00:42:13,599
if we use otool we can print out the

1091
00:42:13,599 --> 00:42:15,920
load command that specifies where the

1092
00:42:15,920 --> 00:42:17,359
operating system should kick off

1093
00:42:17,359 --> 00:42:20,079
execution within the binary we find an

1094
00:42:20,079 --> 00:42:21,680
address but if we go and disassemble

1095
00:42:21,680 --> 00:42:23,760
that address that just turns out to be c

1096
00:42:23,760 --> 00:42:26,160
runtime code not really the malware's

1097
00:42:26,160 --> 00:42:27,520
main function

1098
00:42:27,520 --> 00:42:29,680
however if we trace through this code

1099
00:42:29,680 --> 00:42:32,079
eventually we find what is the call to

1100
00:42:32,079 --> 00:42:34,319
main and we know it's main for several

1101
00:42:34,319 --> 00:42:36,160
reasons if we look at the arguments they

1102
00:42:36,160 --> 00:42:39,200
contain the standard argv rxc arguments

1103
00:42:39,200 --> 00:42:41,599
that are passed to the c

1104
00:42:41,599 --> 00:42:44,319
main function and also then is followed

1105
00:42:44,319 --> 00:42:46,400
by an exit this is kind of the standard

1106
00:42:46,400 --> 00:42:49,040
way that main is invoked

1107
00:42:49,040 --> 00:42:50,880
so now we have the main the malware's

1108
00:42:50,880 --> 00:42:54,000
main function this is where the malware

1109
00:42:54,000 --> 00:42:56,960
authors begin their logic first thing we

1110
00:42:56,960 --> 00:42:59,280
do is we can see they decrypt the string

1111
00:42:59,280 --> 00:43:01,680
slash temp thanks to our hopper

1112
00:43:01,680 --> 00:43:03,680
disassembler script we already know this

1113
00:43:03,680 --> 00:43:05,599
that that is what it's going to decrypt

1114
00:43:05,599 --> 00:43:06,319
to

1115
00:43:06,319 --> 00:43:08,640
it then changes the directory invokes a

1116
00:43:08,640 --> 00:43:10,880
subroutine to parse any arguments

1117
00:43:10,880 --> 00:43:13,599
install some signal handlers demonizes

1118
00:43:13,599 --> 00:43:16,079
itself twice and then invokes something

1119
00:43:16,079 --> 00:43:18,400
else so let's dig into each of these

1120
00:43:18,400 --> 00:43:19,839
subroutines

1121
00:43:19,839 --> 00:43:21,200
as i mentioned one of the first thing it

1122
00:43:21,200 --> 00:43:23,520
does is it parses any command line

1123
00:43:23,520 --> 00:43:25,440
arguments recalling that the command

1124
00:43:25,440 --> 00:43:28,319
line arguments were an encrypted string

1125
00:43:28,319 --> 00:43:30,079
when analyzing a malware sample it's

1126
00:43:30,079 --> 00:43:32,240
interesting to see what command line

1127
00:43:32,240 --> 00:43:34,319
arguments it supports because this can

1128
00:43:34,319 --> 00:43:36,240
show you some functionality or the

1129
00:43:36,240 --> 00:43:39,119
capabilities of the malware a lot of

1130
00:43:39,119 --> 00:43:41,200
times certain code blocks will only be

1131
00:43:41,200 --> 00:43:43,200
executed in the response to certain

1132
00:43:43,200 --> 00:43:44,880
command line arguments so you want to

1133
00:43:44,880 --> 00:43:46,560
figure out what those are so that then

1134
00:43:46,560 --> 00:43:48,480
you can dynamically instruct the malware

1135
00:43:48,480 --> 00:43:50,880
to go down those paths

1136
00:43:50,880 --> 00:43:52,480
so if we look at that we can see as i

1137
00:43:52,480 --> 00:43:54,880
mentioned it decrypts this the the

1138
00:43:54,880 --> 00:43:57,119
string of the supported command line

1139
00:43:57,119 --> 00:43:59,000
arguments

1140
00:43:59,000 --> 00:44:00,560
c-d-i-l-s-p

1141
00:44:00,560 --> 00:44:03,599
it then invokes get opt to parse these

1142
00:44:03,599 --> 00:44:04,960
any command line arguments that have

1143
00:44:04,960 --> 00:44:06,240
been passed in

1144
00:44:06,240 --> 00:44:08,400
but interestingly if we look at code

1145
00:44:08,400 --> 00:44:11,359
after the call to get opt it only has

1146
00:44:11,359 --> 00:44:14,800
logic for the c and d methods if we look

1147
00:44:14,800 --> 00:44:17,359
at what c does it decrypts the string

1148
00:44:17,359 --> 00:44:19,920
hello and prints that out and then

1149
00:44:19,920 --> 00:44:22,480
invokes a subroutine that decrypts the

1150
00:44:22,480 --> 00:44:25,280
path through that cs store file deletes

1151
00:44:25,280 --> 00:44:28,000
it and then calls exit

1152
00:44:28,000 --> 00:44:31,359
the case for d it simply exits

1153
00:44:31,359 --> 00:44:33,680
we can confirm that our static analysis

1154
00:44:33,680 --> 00:44:36,000
of the dash c command line argument is

1155
00:44:36,000 --> 00:44:40,160
correct by running it on an isolated vm

1156
00:44:40,160 --> 00:44:41,760
in uh

1157
00:44:41,760 --> 00:44:44,000
while monitoring it also with a file

1158
00:44:44,000 --> 00:44:46,560
monitor we can see that indeed it looks

1159
00:44:46,560 --> 00:44:49,359
to see if that cs store file exists and

1160
00:44:49,359 --> 00:44:51,839
if so it deletes it so again the c

1161
00:44:51,839 --> 00:44:54,079
command line argument seems to be a

1162
00:44:54,079 --> 00:44:56,240
cleanup so here's a table that

1163
00:44:56,240 --> 00:44:58,800
summarizes the command line arguments

1164
00:44:58,800 --> 00:45:02,560
c dash c is cleanup dash d is die or

1165
00:45:02,560 --> 00:45:03,599
delete

1166
00:45:03,599 --> 00:45:06,880
and then the dash i l s and p are not

1167
00:45:06,880 --> 00:45:09,280
implemented in this sample this is

1168
00:45:09,280 --> 00:45:11,200
interesting because it indicates again

1169
00:45:11,200 --> 00:45:12,880
that are that there are likely other

1170
00:45:12,880 --> 00:45:15,440
variants of this sample but the malware

1171
00:45:15,440 --> 00:45:17,760
authors were smart enough to compile

1172
00:45:17,760 --> 00:45:20,079
those out right they might have variant

1173
00:45:20,079 --> 00:45:22,720
a b c and d version a doesn't need to

1174
00:45:22,720 --> 00:45:24,880
persist so they decompile out the

1175
00:45:24,880 --> 00:45:27,040
persistent code that's actually a kind

1176
00:45:27,040 --> 00:45:28,880
of a hallmark of a sophisticated

1177
00:45:28,880 --> 00:45:31,119
adversary or a project that's well

1178
00:45:31,119 --> 00:45:32,640
engineered unfortunately though they

1179
00:45:32,640 --> 00:45:34,560
didn't change the string of the

1180
00:45:34,560 --> 00:45:36,240
supported command line arguments so we

1181
00:45:36,240 --> 00:45:37,359
can see

1182
00:45:37,359 --> 00:45:39,359
that they are interested

1183
00:45:39,359 --> 00:45:40,880
i've kind of guessed to what the names

1184
00:45:40,880 --> 00:45:43,200
are i might be interactive l might be

1185
00:45:43,200 --> 00:45:45,359
how you specify a listening post via the

1186
00:45:45,359 --> 00:45:48,079
command line p might be how you persist

1187
00:45:48,079 --> 00:45:50,480
et cetera et cetera

1188
00:45:50,480 --> 00:45:52,960
i mentioned this binary also demonizes

1189
00:45:52,960 --> 00:45:54,560
itself and it does this in an

1190
00:45:54,560 --> 00:45:56,640
interesting way specifically it calls

1191
00:45:56,640 --> 00:45:59,920
fork twice i had no idea why it did this

1192
00:45:59,920 --> 00:46:01,839
so i went on stack overflow and also

1193
00:46:01,839 --> 00:46:03,839
talked to jiren who's kind of the

1194
00:46:03,839 --> 00:46:06,480
process guru on linux and mac os and we

1195
00:46:06,480 --> 00:46:08,480
basically came to the conclusion is this

1196
00:46:08,480 --> 00:46:10,480
is actually the way to

1197
00:46:10,480 --> 00:46:12,480
legitimately demonize yourself so you're

1198
00:46:12,480 --> 00:46:15,680
not attached to a terminal or a tty so

1199
00:46:15,680 --> 00:46:17,119
you know again if you really want to be

1200
00:46:17,119 --> 00:46:18,560
kind of extra stealthy when you're

1201
00:46:18,560 --> 00:46:20,720
demonizing yourself this is the correct

1202
00:46:20,720 --> 00:46:22,800
way to do that so again these malware

1203
00:46:22,800 --> 00:46:26,079
authors really know what they're doing

1204
00:46:26,079 --> 00:46:28,000
now we've talked a little bit about that

1205
00:46:28,000 --> 00:46:30,319
cs store file so i was like okay we got

1206
00:46:30,319 --> 00:46:33,200
to figure out what that is so i look for

1207
00:46:33,200 --> 00:46:35,839
cross references to that and early on in

1208
00:46:35,839 --> 00:46:38,079
the initialization logic of the malware

1209
00:46:38,079 --> 00:46:40,880
it called a subroutine that decrypted

1210
00:46:40,880 --> 00:46:43,599
the path to this file then pass it to

1211
00:46:43,599 --> 00:46:46,800
another helper file which opened it read

1212
00:46:46,800 --> 00:46:48,720
it in and then decrypted its file

1213
00:46:48,720 --> 00:46:50,880
contents if we create that file on disk

1214
00:46:50,880 --> 00:46:53,040
for the malware and then execute it in a

1215
00:46:53,040 --> 00:46:55,440
file monitor we can see yes exactly it

1216
00:46:55,440 --> 00:46:59,200
is indeed opening and reading the data

1217
00:46:59,200 --> 00:47:00,960
if we look at what it does once it

1218
00:47:00,960 --> 00:47:03,040
decrypts the file it parses through

1219
00:47:03,040 --> 00:47:04,960
looking for all these key value pairs

1220
00:47:04,960 --> 00:47:06,880
that themselves were decrypted but since

1221
00:47:06,880 --> 00:47:08,720
we can decrypt the strings we can

1222
00:47:08,720 --> 00:47:11,119
recover what the key value pairs likely

1223
00:47:11,119 --> 00:47:13,200
are there's a large list i have no idea

1224
00:47:13,200 --> 00:47:15,119
what the majority of them are but we can

1225
00:47:15,119 --> 00:47:17,280
make educated guesses for some for

1226
00:47:17,280 --> 00:47:20,160
example lp is likely the listening post

1227
00:47:20,160 --> 00:47:22,319
which is how the us government generally

1228
00:47:22,319 --> 00:47:25,839
refers to a command and control server

1229
00:47:25,839 --> 00:47:28,240
if we look at kaspersky's documentation

1230
00:47:28,240 --> 00:47:30,400
for their analysis of the windows

1231
00:47:30,400 --> 00:47:32,559
variants they mentioned the fact that

1232
00:47:32,559 --> 00:47:35,119
this malware has command and control

1233
00:47:35,119 --> 00:47:37,839
servers or lp servers in a config file

1234
00:47:37,839 --> 00:47:39,599
so it makes sense that the mac os

1235
00:47:39,599 --> 00:47:42,160
version likely implements that as well

1236
00:47:42,160 --> 00:47:43,599
unfortunately though i did not have

1237
00:47:43,599 --> 00:47:45,760
access to a config file so i couldn't

1238
00:47:45,760 --> 00:47:48,880
dig too much deeper into that

1239
00:47:48,880 --> 00:47:50,480
speaking of command and control and

1240
00:47:50,480 --> 00:47:52,400
talking to an entry point it's always

1241
00:47:52,400 --> 00:47:54,559
kind of interesting to understand how a

1242
00:47:54,559 --> 00:47:57,839
malware communicates with that server if

1243
00:47:57,839 --> 00:48:00,000
we reverse engineer the malware continue

1244
00:48:00,000 --> 00:48:03,280
our analysis we find that it utilizes an

1245
00:48:03,280 --> 00:48:06,720
open source http and webdav library

1246
00:48:06,720 --> 00:48:09,280
called neon there's embedded strings and

1247
00:48:09,280 --> 00:48:11,599
code that match that project

1248
00:48:11,599 --> 00:48:14,640
interestingly enough that project is gpl

1249
00:48:14,640 --> 00:48:17,119
i'm not sure on the gpl rules but my

1250
00:48:17,119 --> 00:48:18,800
understanding is if you use a gpl

1251
00:48:18,800 --> 00:48:20,480
project you have to ship the source code

1252
00:48:20,480 --> 00:48:22,400
as well so maybe we can call our friends

1253
00:48:22,400 --> 00:48:24,240
up at the nsa and tell them hey you all

1254
00:48:24,240 --> 00:48:25,760
have to release the source code now

1255
00:48:25,760 --> 00:48:27,440
we'll see how that works

1256
00:48:27,440 --> 00:48:29,119
one interesting thing though is that

1257
00:48:29,119 --> 00:48:32,559
this library is a cross platform but b

1258
00:48:32,559 --> 00:48:35,200
also supports logic to handle

1259
00:48:35,200 --> 00:48:37,440
authenticating proxies

1260
00:48:37,440 --> 00:48:39,839
a lot of times intelligence agencies

1261
00:48:39,839 --> 00:48:41,760
targets are rather security conscious

1262
00:48:41,760 --> 00:48:43,520
and will be sitting behind

1263
00:48:43,520 --> 00:48:47,119
authenticating proxies this means if

1264
00:48:47,119 --> 00:48:49,200
these intelligence agencies get their

1265
00:48:49,200 --> 00:48:51,440
implant installed on one of these victim

1266
00:48:51,440 --> 00:48:54,240
systems perhaps with a zero day exploit

1267
00:48:54,240 --> 00:48:56,960
or some supply chain interdiction well

1268
00:48:56,960 --> 00:48:59,200
that malware better be able to talk

1269
00:48:59,200 --> 00:49:01,280
through an authenticating proxy or it's

1270
00:49:01,280 --> 00:49:02,800
not going to be able to beat it out to

1271
00:49:02,800 --> 00:49:04,240
the command and control server for

1272
00:49:04,240 --> 00:49:06,319
tasking so not something we see very

1273
00:49:06,319 --> 00:49:08,640
commonly especially in mac malware but

1274
00:49:08,640 --> 00:49:10,400
in both the sample i'm talking about and

1275
00:49:10,400 --> 00:49:12,640
the sample luna talked about the support

1276
00:49:12,640 --> 00:49:14,960
for authenticating proxies is quite in

1277
00:49:14,960 --> 00:49:17,839
my opinion notable

1278
00:49:17,839 --> 00:49:20,880
now as kaspersky mentioned the main goal

1279
00:49:20,880 --> 00:49:23,359
of double fantasy the windows version is

1280
00:49:23,359 --> 00:49:25,520
to validate victims and confirm that

1281
00:49:25,520 --> 00:49:27,920
they are interesting

1282
00:49:27,920 --> 00:49:29,359
looking at the decrypted strings we saw

1283
00:49:29,359 --> 00:49:31,599
a lot of strings that appear to be

1284
00:49:31,599 --> 00:49:34,319
related to survey logic as well we see

1285
00:49:34,319 --> 00:49:36,480
these sequential strings starting at 0 0

1286
00:49:36,480 --> 00:49:38,800
1 going up to 48 and some of them

1287
00:49:38,800 --> 00:49:41,359
decrypt two values that appear to

1288
00:49:41,359 --> 00:49:43,440
indicate a survey they're all contained

1289
00:49:43,440 --> 00:49:46,160
within one subroutine so i wondered

1290
00:49:46,160 --> 00:49:47,839
could i coerce the malware to

1291
00:49:47,839 --> 00:49:51,040
essentially perform a survey for me so a

1292
00:49:51,040 --> 00:49:52,640
i could see how it performed it

1293
00:49:52,640 --> 00:49:55,599
dynamically but b also see what the

1294
00:49:55,599 --> 00:49:57,280
survey contained

1295
00:49:57,280 --> 00:49:59,599
the answer is yes of course we basically

1296
00:49:59,599 --> 00:50:00,960
just load the

1297
00:50:00,960 --> 00:50:03,200
the malware in a debugger and then

1298
00:50:03,200 --> 00:50:05,040
manipulate the instruction pointer to

1299
00:50:05,040 --> 00:50:07,040
point to a function that call calls the

1300
00:50:07,040 --> 00:50:09,040
subroutine

1301
00:50:09,040 --> 00:50:11,200
if we then execute this subroutine it

1302
00:50:11,200 --> 00:50:13,200
turns out that once it's done surveying

1303
00:50:13,200 --> 00:50:16,240
it it returns the survey which if you

1304
00:50:16,240 --> 00:50:17,760
took the training or you're familiar

1305
00:50:17,760 --> 00:50:19,359
with malware analysis and reverse

1306
00:50:19,359 --> 00:50:21,520
engineering you know the return value of

1307
00:50:21,520 --> 00:50:23,760
a function can be found in the eax or

1308
00:50:23,760 --> 00:50:26,800
rax register so as we can see on the

1309
00:50:26,800 --> 00:50:29,200
slide in a debugger once that survey

1310
00:50:29,200 --> 00:50:31,359
function returned i could simply

1311
00:50:31,359 --> 00:50:33,280
instruct the debugger to print out the

1312
00:50:33,280 --> 00:50:35,119
value of the

1313
00:50:35,119 --> 00:50:38,720
rax register to see the survey of the

1314
00:50:38,720 --> 00:50:40,319
system and we can see it's a fairly

1315
00:50:40,319 --> 00:50:41,920
comprehensive survey right it's

1316
00:50:41,920 --> 00:50:43,680
gathering information about the system

1317
00:50:43,680 --> 00:50:46,720
the infected box network information

1318
00:50:46,720 --> 00:50:50,000
user information it has a timestamp of

1319
00:50:50,000 --> 00:50:51,839
when the survey was run which you can

1320
00:50:51,839 --> 00:50:53,599
see it was saturday night this is how i

1321
00:50:53,599 --> 00:50:55,599
spend my weekends reversing

1322
00:50:55,599 --> 00:50:58,720
malware but isn't that the dream

1323
00:50:58,720 --> 00:51:00,640
also we can see the name of the user and

1324
00:51:00,640 --> 00:51:02,559
the name that the malware finds itself

1325
00:51:02,559 --> 00:51:04,319
running and again this is then all sent

1326
00:51:04,319 --> 00:51:07,200
back to the listening post so readily

1327
00:51:07,200 --> 00:51:09,280
the listening posts or perhaps analysts

1328
00:51:09,280 --> 00:51:11,839
who are studying this malware can

1329
00:51:11,839 --> 00:51:14,640
quickly ascertain if this box is of

1330
00:51:14,640 --> 00:51:17,040
value and then as we mentioned likely

1331
00:51:17,040 --> 00:51:20,480
install a second stage implant

1332
00:51:20,480 --> 00:51:22,720
so back tracing from the survey logic i

1333
00:51:22,720 --> 00:51:24,079
wanted to figure out if this was

1334
00:51:24,079 --> 00:51:25,760
something that was tasks or if it was

1335
00:51:25,760 --> 00:51:28,079
something it would do automatically so

1336
00:51:28,079 --> 00:51:30,559
looking backwards in the disassembly i

1337
00:51:30,559 --> 00:51:33,599
found what i believe is the logic that

1338
00:51:33,599 --> 00:51:35,680
handles the commands from the listening

1339
00:51:35,680 --> 00:51:37,520
post the task

1340
00:51:37,520 --> 00:51:39,680
there's a lot going on on this slide but

1341
00:51:39,680 --> 00:51:42,240
the main takeaway is is that it gets a

1342
00:51:42,240 --> 00:51:44,720
value from the server the listening post

1343
00:51:44,720 --> 00:51:46,559
the command and control server and it

1344
00:51:46,559 --> 00:51:49,680
uses that to index into a jump table

1345
00:51:49,680 --> 00:51:52,559
that has offsets for all the code blocks

1346
00:51:52,559 --> 00:51:55,359
for each specific command and we can see

1347
00:51:55,359 --> 00:51:57,200
that there are

1348
00:51:57,200 --> 00:51:58,720
53

1349
00:51:58,720 --> 00:52:02,480
hex which is 83 decimal command options

1350
00:52:02,480 --> 00:52:04,240
that it supports a lot of them though

1351
00:52:04,240 --> 00:52:06,800
are not implemented if we look for

1352
00:52:06,800 --> 00:52:09,920
example at the offset for 2 1 f we can

1353
00:52:09,920 --> 00:52:11,760
see it simply returns

1354
00:52:11,760 --> 00:52:13,839
you know not implemented for the survey

1355
00:52:13,839 --> 00:52:16,240
one though we can see that what we do is

1356
00:52:16,240 --> 00:52:19,440
that turns out to be command ox1e if we

1357
00:52:19,440 --> 00:52:21,520
take that and grab the offset from the

1358
00:52:21,520 --> 00:52:23,839
jump table we then find the logic which

1359
00:52:23,839 --> 00:52:25,920
implements the survey which is the

1360
00:52:25,920 --> 00:52:28,240
subroutine that we just saw and again

1361
00:52:28,240 --> 00:52:30,240
this is how i uncovered this jump table

1362
00:52:30,240 --> 00:52:32,000
so this is nice now because now we find

1363
00:52:32,000 --> 00:52:33,920
the code blocks for all the commands

1364
00:52:33,920 --> 00:52:36,000
that are supported by the implant that

1365
00:52:36,000 --> 00:52:38,480
can be remotely tasked from the command

1366
00:52:38,480 --> 00:52:40,640
control server or from the listening

1367
00:52:40,640 --> 00:52:41,680
post

1368
00:52:41,680 --> 00:52:42,880
so we're not going to go through all

1369
00:52:42,880 --> 00:52:44,720
these commands but let's touch on a few

1370
00:52:44,720 --> 00:52:47,200
of them first up we have command

1371
00:52:47,200 --> 00:52:50,319
9 this apparently reads a file from the

1372
00:52:50,319 --> 00:52:52,559
file system and then sends it back to

1373
00:52:52,559 --> 00:52:54,800
the command control server basic filex

1374
00:52:54,800 --> 00:52:56,960
for exfiltration again this is something

1375
00:52:56,960 --> 00:52:58,640
you expect to find in a lightweight

1376
00:52:58,640 --> 00:53:00,720
first stage implant perhaps to collect

1377
00:53:00,720 --> 00:53:02,240
some files to help ascertain the

1378
00:53:02,240 --> 00:53:04,240
identity of the

1379
00:53:04,240 --> 00:53:05,760
of the system

1380
00:53:05,760 --> 00:53:07,760
also though if we look at the apis that

1381
00:53:07,760 --> 00:53:10,160
are used they're all very linuxy they're

1382
00:53:10,160 --> 00:53:12,400
not using the apple specific objective-c

1383
00:53:12,400 --> 00:53:14,880
runtime file i o methods

1384
00:53:14,880 --> 00:53:16,240
so again this kind of indicates that the

1385
00:53:16,240 --> 00:53:18,400
malware authors were more familiar with

1386
00:53:18,400 --> 00:53:20,480
linux and then maybe ported this over to

1387
00:53:20,480 --> 00:53:22,160
mac os and there's a lot of indicators

1388
00:53:22,160 --> 00:53:25,920
showing that yes this was the case

1389
00:53:25,920 --> 00:53:29,280
also then we have command ox 50 which is

1390
00:53:29,280 --> 00:53:31,200
rather interesting it's a download and

1391
00:53:31,200 --> 00:53:34,240
exec command this isn't that novel or

1392
00:53:34,240 --> 00:53:36,800
unusual but this a is something we

1393
00:53:36,800 --> 00:53:38,880
expected to see as we mentioned that

1394
00:53:38,880 --> 00:53:41,520
once this binary has ascertained that

1395
00:53:41,520 --> 00:53:44,319
this is a box of value that the

1396
00:53:44,319 --> 00:53:46,319
intelligence agency likely installs one

1397
00:53:46,319 --> 00:53:48,079
of their more comprehensive

1398
00:53:48,079 --> 00:53:50,559
sophisticated second stage implants so

1399
00:53:50,559 --> 00:53:52,720
obviously this first stage implant is

1400
00:53:52,720 --> 00:53:54,720
going to have to implement that download

1401
00:53:54,720 --> 00:53:56,559
and execute logic so we find that in

1402
00:53:56,559 --> 00:53:59,200
command 50. we can see they download a

1403
00:53:59,200 --> 00:54:01,280
file from the internet and then they

1404
00:54:01,280 --> 00:54:03,920
chmod to set it to be executable and

1405
00:54:03,920 --> 00:54:06,559
then they execute fork in order to

1406
00:54:06,559 --> 00:54:08,000
execute it

1407
00:54:08,000 --> 00:54:10,240
now one very interesting thing is that

1408
00:54:10,240 --> 00:54:13,680
before they call exec to exec this

1409
00:54:13,680 --> 00:54:16,880
second stage payload they actually unset

1410
00:54:16,880 --> 00:54:19,440
any dyld insert libraries and this is

1411
00:54:19,440 --> 00:54:21,520
because environment variables are passed

1412
00:54:21,520 --> 00:54:23,599
from the parent to the child and they

1413
00:54:23,599 --> 00:54:25,680
don't likely want to spawn this second

1414
00:54:25,680 --> 00:54:28,240
stage implant or second stage payload

1415
00:54:28,240 --> 00:54:30,240
with these dlyd

1416
00:54:30,240 --> 00:54:32,319
environment variables set

1417
00:54:32,319 --> 00:54:34,480
why this is interesting is this

1418
00:54:34,480 --> 00:54:37,359
indicates that there is some mechanism

1419
00:54:37,359 --> 00:54:39,599
where the parent process the implant

1420
00:54:39,599 --> 00:54:42,640
itself could be executed or persisted

1421
00:54:42,640 --> 00:54:44,799
using these environment variables which

1422
00:54:44,799 --> 00:54:47,119
is a very stealthy way indicating that

1423
00:54:47,119 --> 00:54:49,200
perhaps it was injected into another

1424
00:54:49,200 --> 00:54:51,760
process or persisted in a very stealthy

1425
00:54:51,760 --> 00:54:53,359
manner as far as i'm aware there's not

1426
00:54:53,359 --> 00:54:55,599
any other mac malware that

1427
00:54:55,599 --> 00:54:58,319
widely utilizes this approach if we go

1428
00:54:58,319 --> 00:55:00,559
back to kaspersky's report we can see

1429
00:55:00,559 --> 00:55:03,280
that they say that the double fantasy

1430
00:55:03,280 --> 00:55:05,920
malware on windows uses a technique

1431
00:55:05,920 --> 00:55:09,280
known as dll calm hijacking which is

1432
00:55:09,280 --> 00:55:11,359
conceptually similar to dye live

1433
00:55:11,359 --> 00:55:14,240
hijacking which you do via the dyld

1434
00:55:14,240 --> 00:55:16,160
insert library methods so we don't have

1435
00:55:16,160 --> 00:55:18,160
more information about this but this is

1436
00:55:18,160 --> 00:55:19,920
kind of a breadcrumb that shows that

1437
00:55:19,920 --> 00:55:22,480
they are using other sophisticated and

1438
00:55:22,480 --> 00:55:24,480
rather stealthy techniques to either

1439
00:55:24,480 --> 00:55:27,200
persist or inject the malware using

1440
00:55:27,200 --> 00:55:28,799
these environment variables

1441
00:55:28,799 --> 00:55:30,480
but again that's not implemented in this

1442
00:55:30,480 --> 00:55:32,319
version but they didn't compile out this

1443
00:55:32,319 --> 00:55:33,760
code so we can you know essentially

1444
00:55:33,760 --> 00:55:35,839
figure that out

1445
00:55:35,839 --> 00:55:37,839
all right so let's wrap up this talk

1446
00:55:37,839 --> 00:55:40,400
before the black helicopter show up uh

1447
00:55:40,400 --> 00:55:42,480
some conclusions

1448
00:55:42,480 --> 00:55:44,559
first really not surprising but your

1449
00:55:44,559 --> 00:55:47,119
favorite or not so favorite us

1450
00:55:47,119 --> 00:55:49,599
government intelligence agency has mac

1451
00:55:49,599 --> 00:55:52,640
capabilities even going back decades

1452
00:55:52,640 --> 00:55:54,640
this is really not surprising

1453
00:55:54,640 --> 00:55:56,960
second we've really saw that the mac

1454
00:55:56,960 --> 00:56:00,240
variants of this malware often mimic at

1455
00:56:00,240 --> 00:56:02,240
least in terms of functionality their

1456
00:56:02,240 --> 00:56:04,160
windows counterparts

1457
00:56:04,160 --> 00:56:06,319
windows linux et cetera et cetera this

1458
00:56:06,319 --> 00:56:08,400
is not surprising if you a if you're an

1459
00:56:08,400 --> 00:56:10,240
agency that's infecting a large number

1460
00:56:10,240 --> 00:56:11,839
of systems around the world in order to

1461
00:56:11,839 --> 00:56:14,240
scale and manage those you want all your

1462
00:56:14,240 --> 00:56:16,240
implants to have the same functionality

1463
00:56:16,240 --> 00:56:18,000
so you can deploy them to windows linux

1464
00:56:18,000 --> 00:56:19,920
and mac systems and then command and

1465
00:56:19,920 --> 00:56:23,680
control them all from one listening post

1466
00:56:23,680 --> 00:56:25,839
thirdly these tools are impressively

1467
00:56:25,839 --> 00:56:27,920
well engineered i always say malware is

1468
00:56:27,920 --> 00:56:30,480
simply software with malicious purposes

1469
00:56:30,480 --> 00:56:32,880
as thomas talked about earlier today a

1470
00:56:32,880 --> 00:56:35,680
lot of the mac malware's kind of crap or

1471
00:56:35,680 --> 00:56:38,640
 in my opinion if you look at this

1472
00:56:38,640 --> 00:56:41,760
malware it's not overly complex that is

1473
00:56:41,760 --> 00:56:43,839
by design it's a simple first stage

1474
00:56:43,839 --> 00:56:46,640
implant but it is engineered very well

1475
00:56:46,640 --> 00:56:48,480
the malware authors have a deep

1476
00:56:48,480 --> 00:56:50,079
understanding of operating system

1477
00:56:50,079 --> 00:56:52,720
internals they write excellent software

1478
00:56:52,720 --> 00:56:54,319
and this is you know something that's

1479
00:56:54,319 --> 00:56:56,079
rather unusual

1480
00:56:56,079 --> 00:56:58,000
also you know things like leveraging

1481
00:56:58,000 --> 00:57:00,000
environment variables taking into

1482
00:57:00,000 --> 00:57:02,640
account authenticating proxies they

1483
00:57:02,640 --> 00:57:04,720
really understand their targets

1484
00:57:04,720 --> 00:57:06,160
especially considering a lot of their

1485
00:57:06,160 --> 00:57:09,440
targets are security conscious

1486
00:57:09,440 --> 00:57:11,760
so hopefully this wetted your appetite

1487
00:57:11,760 --> 00:57:13,760
for analyzing mac malware especially

1488
00:57:13,760 --> 00:57:15,280
that written by

1489
00:57:15,280 --> 00:57:17,040
three-letter agencies

1490
00:57:17,040 --> 00:57:19,040
but also if you're like me you might be

1491
00:57:19,040 --> 00:57:21,280
wondering where is the newer stuff right

1492
00:57:21,280 --> 00:57:24,240
this is from like 2013 used maybe up to

1493
00:57:24,240 --> 00:57:27,760
2015. that's like five or six years ago

1494
00:57:27,760 --> 00:57:29,040
hopefully though the information we

1495
00:57:29,040 --> 00:57:31,119
provided today you know a lot of this

1496
00:57:31,119 --> 00:57:33,760
analysis is you know being discussed

1497
00:57:33,760 --> 00:57:35,680
first time publicly especially around

1498
00:57:35,680 --> 00:57:38,240
the mac os variants will maybe lead us

1499
00:57:38,240 --> 00:57:40,160
to these newer variants so stay tuned

1500
00:57:40,160 --> 00:57:42,559
maybe we'll have a talk about obts at

1501
00:57:42,559 --> 00:57:44,799
obts five about that

1502
00:57:44,799 --> 00:57:48,240
you know fingers crossed we will see

1503
00:57:48,240 --> 00:57:50,720
so that's a wrap just some resources on

1504
00:57:50,720 --> 00:57:51,520
that

1505
00:57:51,520 --> 00:57:53,119
there are some other great resources

1506
00:57:53,119 --> 00:57:54,960
especially that dig into the windows

1507
00:57:54,960 --> 00:57:57,200
counterparts so if you're interested in

1508
00:57:57,200 --> 00:57:58,559
digging more into the malware it was

1509
00:57:58,559 --> 00:58:00,559
important to include those as well

1510
00:58:00,559 --> 00:58:02,960
we have a few minutes for questions and

1511
00:58:02,960 --> 00:58:05,760
answers uh or questions and hopefully

1512
00:58:05,760 --> 00:58:08,160
answers

1513
00:58:20,319 --> 00:58:22,720
function

1514
00:58:29,359 --> 00:58:30,880
yeah and that's actually so the question

1515
00:58:30,880 --> 00:58:32,480
was you know could you use uh

1516
00:58:32,480 --> 00:58:34,319
instruction emulation to decrypt the

1517
00:58:34,319 --> 00:58:36,160
strings the answer to that is is yes

1518
00:58:36,160 --> 00:58:37,920
that would actually be a good approach

1519
00:58:37,920 --> 00:58:39,760
if the malware was leveraging perhaps a

1520
00:58:39,760 --> 00:58:42,400
more sophisticated decryption algorithm

1521
00:58:42,400 --> 00:58:44,640
this one worked really well because it

1522
00:58:44,640 --> 00:58:46,799
was a very simple xor multi-key so it

1523
00:58:46,799 --> 00:58:48,960
was trivial to implement in python they

1524
00:58:48,960 --> 00:58:50,960
were using some you know nsa custom

1525
00:58:50,960 --> 00:58:53,040
crypto exactly it would have been far

1526
00:58:53,040 --> 00:58:55,280
more efficient to essentially emulate

1527
00:58:55,280 --> 00:58:57,280
those instructions or take the approach

1528
00:58:57,280 --> 00:58:59,680
roona did which was to allow the malware

1529
00:58:59,680 --> 00:59:02,400
to essentially decrypt itself so yeah i

1530
00:59:02,400 --> 00:59:04,240
like that you brought that up because

1531
00:59:04,240 --> 00:59:06,559
you know there's always multiple ways to

1532
00:59:06,559 --> 00:59:09,280
analyze malware uh with pros and cons

1533
00:59:09,280 --> 00:59:11,760
sometimes depending on the complexity of

1534
00:59:11,760 --> 00:59:13,839
the malware

1535
00:59:13,839 --> 00:59:15,440
the realism was i was like i've never

1536
00:59:15,440 --> 00:59:16,960
written a hopper script before like this

1537
00:59:16,960 --> 00:59:18,400
is a perfect case study and i was like

1538
00:59:18,400 --> 00:59:20,000
this is fun

1539
00:59:20,000 --> 00:59:23,440
i have a weird idea of fun but yeah

1540
00:59:23,680 --> 00:59:26,799
all right any other questions

1541
00:59:27,359 --> 00:59:29,920
awesome if not we are going to now wrap

1542
00:59:29,920 --> 00:59:33,119
up the conference with some endnotes and

1543
00:59:33,119 --> 00:59:34,980
some prizes

1544
00:59:34,980 --> 00:59:39,809
[Applause]

