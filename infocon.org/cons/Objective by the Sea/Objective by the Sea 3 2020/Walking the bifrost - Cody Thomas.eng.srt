1
00:00:06,000 --> 00:00:07,919
all right welcome back to lunch uh we

2
00:00:07,919 --> 00:00:10,880
now have a talk from cody putting

3
00:00:10,880 --> 00:00:13,280
another former objective

4
00:00:13,280 --> 00:00:14,320
speaker

5
00:00:14,320 --> 00:00:17,840
so give buddy a round warm uh

6
00:00:17,840 --> 00:00:21,439
a warmer round of cloth

7
00:00:23,470 --> 00:00:26,540
[Applause]

8
00:00:27,599 --> 00:00:29,439
thank you all right so quick pull for

9
00:00:29,439 --> 00:00:30,400
for the room

10
00:00:30,400 --> 00:00:33,200
how many people have heard of purpose

11
00:00:33,200 --> 00:00:34,480
okay how many people would say you're

12
00:00:34,480 --> 00:00:36,719
familiar with kerberos

13
00:00:36,719 --> 00:00:38,960
okay nice all right how many people have

14
00:00:38,960 --> 00:00:40,399
their macs hooked up to some form of

15
00:00:40,399 --> 00:00:42,800
active directory environment

16
00:00:42,800 --> 00:00:45,280
nice okay well this will be maybe pretty

17
00:00:45,280 --> 00:00:46,960
informative maybe not uh this covers a

18
00:00:46,960 --> 00:00:48,640
lot of research i've been doing into

19
00:00:48,640 --> 00:00:49,920
kerberos

20
00:00:49,920 --> 00:00:52,480
as it is in mac os for active directory

21
00:00:52,480 --> 00:00:55,360
environments and for the local kdc so if

22
00:00:55,360 --> 00:00:56,399
you don't have an active directory

23
00:00:56,399 --> 00:00:57,680
environment how you're used to

24
00:00:57,680 --> 00:00:59,359
leveraging kerberos

25
00:00:59,359 --> 00:01:00,399
so

26
00:01:00,399 --> 00:01:02,640
i am cody thomas i am an operator an

27
00:01:02,640 --> 00:01:04,400
instructor at spectre ops so i do a lot

28
00:01:04,400 --> 00:01:06,240
of red teaming engagements i also help

29
00:01:06,240 --> 00:01:08,640
teach our red team operations course i'm

30
00:01:08,640 --> 00:01:11,040
also an open source developer i have a

31
00:01:11,040 --> 00:01:12,960
app fell out there which is a red team

32
00:01:12,960 --> 00:01:14,640
uh open source c2 framework that you can

33
00:01:14,640 --> 00:01:17,119
use um bifrost is a project that we'll

34
00:01:17,119 --> 00:01:20,000
be using uh in this talk today

35
00:01:20,000 --> 00:01:21,520
there's also orchard which is another

36
00:01:21,520 --> 00:01:23,280
project that goes through and leverages

37
00:01:23,280 --> 00:01:25,280
open directory to try and access some

38
00:01:25,280 --> 00:01:27,280
active directory attributes and then

39
00:01:27,280 --> 00:01:28,400
there's a link to my github for all

40
00:01:28,400 --> 00:01:29,360
these projects that are already out

41
00:01:29,360 --> 00:01:31,360
there now

42
00:01:31,360 --> 00:01:32,880
so a quick overview about what we're

43
00:01:32,880 --> 00:01:35,119
going to be covering so brief intro to

44
00:01:35,119 --> 00:01:37,200
kerberos all the different steps to it i

45
00:01:37,200 --> 00:01:38,799
do have a lot of material to cover so it

46
00:01:38,799 --> 00:01:40,720
will be going a little fast so

47
00:01:40,720 --> 00:01:42,159
i tried to color code things to make it

48
00:01:42,159 --> 00:01:43,680
a bit easier to follow as we go through

49
00:01:43,680 --> 00:01:45,439
each of these things uh then we'll go

50
00:01:45,439 --> 00:01:46,560
through a

51
00:01:46,560 --> 00:01:48,240
step-by-step walkthrough if you're doing

52
00:01:48,240 --> 00:01:50,720
active directory attacks from a mac os

53
00:01:50,720 --> 00:01:51,680
um

54
00:01:51,680 --> 00:01:53,200
for the second part and the last part

55
00:01:53,200 --> 00:01:55,759
will be the lkdc how you actually

56
00:01:55,759 --> 00:01:57,840
interface with kerberos on a mac that

57
00:01:57,840 --> 00:01:59,119
isn't connected to active directory at

58
00:01:59,119 --> 00:02:00,960
all

59
00:02:00,960 --> 00:02:03,280
so a quick progress introduction what is

60
00:02:03,280 --> 00:02:05,200
it so it's authentication mechanism

61
00:02:05,200 --> 00:02:07,759
invented by mit in the 1980s uh of

62
00:02:07,759 --> 00:02:10,000
course back then everything was use as

63
00:02:10,000 --> 00:02:11,920
few bytes as possible and use as much

64
00:02:11,920 --> 00:02:13,520
crypto as possible so it's super

65
00:02:13,520 --> 00:02:16,560
annoying super frustrating to delve into

66
00:02:16,560 --> 00:02:18,000
uh it's based on this client server

67
00:02:18,000 --> 00:02:20,480
model that's stateless so you the client

68
00:02:20,480 --> 00:02:21,680
are trying to do something with the

69
00:02:21,680 --> 00:02:23,840
server that kind of has this uh perfect

70
00:02:23,840 --> 00:02:25,440
knowledge of the world

71
00:02:25,440 --> 00:02:27,680
and everything in it is spoke to this

72
00:02:27,680 --> 00:02:29,840
realm so this will pop up a couple of

73
00:02:29,840 --> 00:02:31,599
times throughout the talk but a realm

74
00:02:31,599 --> 00:02:33,840
just kind of what the key distribution

75
00:02:33,840 --> 00:02:36,480
center what this kerberos instance uh is

76
00:02:36,480 --> 00:02:38,319
the authoritative server on

77
00:02:38,319 --> 00:02:39,680
uh there are many implementations of

78
00:02:39,680 --> 00:02:41,360
this of course the traditional most true

79
00:02:41,360 --> 00:02:43,360
to form one is mit's implementation

80
00:02:43,360 --> 00:02:45,120
they're the one who did create it

81
00:02:45,120 --> 00:02:46,560
but of course this can be augmented with

82
00:02:46,560 --> 00:02:47,840
a bunch of plugins that are out there

83
00:02:47,840 --> 00:02:49,519
now this is usually what you'll see if

84
00:02:49,519 --> 00:02:50,560
you're on some sort of linux

85
00:02:50,560 --> 00:02:52,160
distribution

86
00:02:52,160 --> 00:02:54,160
windows has its own modifications that

87
00:02:54,160 --> 00:02:56,319
they've added and of course mac os does

88
00:02:56,319 --> 00:02:57,599
whatever they want to and they do their

89
00:02:57,599 --> 00:02:59,280
own things as well

90
00:02:59,280 --> 00:03:00,640
so when we start talking about curves

91
00:03:00,640 --> 00:03:02,400
specifically all these different steps i

92
00:03:02,400 --> 00:03:03,680
try and break this down not get too

93
00:03:03,680 --> 00:03:04,720
specific

94
00:03:04,720 --> 00:03:05,440
so

95
00:03:05,440 --> 00:03:07,680
in the beginning uh the client in the

96
00:03:07,680 --> 00:03:09,120
key distribution center have some sort

97
00:03:09,120 --> 00:03:11,120
of shared secret this is how all this

98
00:03:11,120 --> 00:03:12,959
cryptography is going to be going on you

99
00:03:12,959 --> 00:03:14,319
have some shared secret that's already

100
00:03:14,319 --> 00:03:16,159
set up with the kdc

101
00:03:16,159 --> 00:03:16,959
okay

102
00:03:16,959 --> 00:03:18,640
then the client makes a request to the

103
00:03:18,640 --> 00:03:21,200
authentication server that has the kdc

104
00:03:21,200 --> 00:03:22,400
on it and you're doing this

105
00:03:22,400 --> 00:03:25,120
authentication server request uh to try

106
00:03:25,120 --> 00:03:27,440
and get some sort of ticket okay

107
00:03:27,440 --> 00:03:30,799
so you do that request you get back

108
00:03:30,799 --> 00:03:32,480
uh from your as request your

109
00:03:32,480 --> 00:03:34,319
authentication server request and

110
00:03:34,319 --> 00:03:36,239
authentication server reply right this

111
00:03:36,239 --> 00:03:37,599
request reply you'll see this back and

112
00:03:37,599 --> 00:03:39,760
forth a bunch so this reply comes back

113
00:03:39,760 --> 00:03:42,640
with a ticket to the krb tgt service

114
00:03:42,640 --> 00:03:44,239
principal name lots of letters lots of

115
00:03:44,239 --> 00:03:45,920
words i know trying to make these a

116
00:03:45,920 --> 00:03:48,080
little bit easier you can think of krb

117
00:03:48,080 --> 00:03:50,799
tgt i highlighted the ttt part so think

118
00:03:50,799 --> 00:03:51,920
if you see that you're going to be

119
00:03:51,920 --> 00:03:55,120
getting back atgt a tgt is a ticket

120
00:03:55,120 --> 00:03:56,720
granting ticket it's a ticket that

121
00:03:56,720 --> 00:03:59,519
allows you to get more tickets okay

122
00:03:59,519 --> 00:04:01,439
sounds pretty confusing but the words

123
00:04:01,439 --> 00:04:03,519
kind of describe what's happening here

124
00:04:03,519 --> 00:04:06,879
so this process is the asrep this tgt

125
00:04:06,879 --> 00:04:08,720
you can think of it as your own new

126
00:04:08,720 --> 00:04:10,959
identity before you're using usernames

127
00:04:10,959 --> 00:04:12,799
and passwords that's how you knew you

128
00:04:12,799 --> 00:04:15,360
were who you are in the kerberos realm

129
00:04:15,360 --> 00:04:17,358
this tgt is the thing that identifies

130
00:04:17,358 --> 00:04:18,959
you as who you are okay it's already

131
00:04:18,959 --> 00:04:20,478
been proven with this

132
00:04:20,478 --> 00:04:24,240
um part of this is this tgt is encrypted

133
00:04:24,240 --> 00:04:28,400
with the krb tgt's hash okay this is how

134
00:04:28,400 --> 00:04:29,600
through all the cryptography they're

135
00:04:29,600 --> 00:04:31,759
able to verify that this is who you say

136
00:04:31,759 --> 00:04:33,280
you are because i can prove where it

137
00:04:33,280 --> 00:04:36,320
came from based off of this hash

138
00:04:36,320 --> 00:04:38,479
okay now you have a tgt you have a new

139
00:04:38,479 --> 00:04:40,160
identity we can prove that you are who

140
00:04:40,160 --> 00:04:41,520
you say you are

141
00:04:41,520 --> 00:04:43,120
now you're still trying to do something

142
00:04:43,120 --> 00:04:44,400
in this environment

143
00:04:44,400 --> 00:04:46,000
so you go through and you present your

144
00:04:46,000 --> 00:04:49,919
tgt to the ticket granting service tgs

145
00:04:49,919 --> 00:04:52,400
and ask to speak to another service so

146
00:04:52,400 --> 00:04:54,240
this is going back to the authority uh

147
00:04:54,240 --> 00:04:56,080
the authentication server back to this

148
00:04:56,080 --> 00:04:58,080
area you're saying all right i am

149
00:04:58,080 --> 00:05:00,639
proving i am who i say i am and i want

150
00:05:00,639 --> 00:05:02,720
to i don't know mount this drive on this

151
00:05:02,720 --> 00:05:04,639
other computer so it's looking up that

152
00:05:04,639 --> 00:05:07,039
service you're requesting access to that

153
00:05:07,039 --> 00:05:08,479
service

154
00:05:08,479 --> 00:05:11,039
that is a tgs request

155
00:05:11,039 --> 00:05:13,120
from that you get a tgs reply you'll see

156
00:05:13,120 --> 00:05:15,199
this back and forth all again tgs

157
00:05:15,199 --> 00:05:17,759
request tgs reply you get back a service

158
00:05:17,759 --> 00:05:19,919
ticket to that service

159
00:05:19,919 --> 00:05:21,680
all right now you actually want to

160
00:05:21,680 --> 00:05:24,479
leverage that so you supply that ticket

161
00:05:24,479 --> 00:05:26,400
to that service and it seems it checks

162
00:05:26,400 --> 00:05:27,919
if you are uh if you have the right

163
00:05:27,919 --> 00:05:30,160
authorization to do that thing

164
00:05:30,160 --> 00:05:32,080
lots of things i know

165
00:05:32,080 --> 00:05:34,000
uh a lot of stuff going on we'll go

166
00:05:34,000 --> 00:05:35,280
through all this step by step this is

167
00:05:35,280 --> 00:05:37,680
just kind of the high level overview as

168
00:05:37,680 --> 00:05:39,680
things are happening over and over again

169
00:05:39,680 --> 00:05:42,080
so all the way up to the point where you

170
00:05:42,080 --> 00:05:43,919
are providing that ticket to the final

171
00:05:43,919 --> 00:05:46,639
service is doing an authentication check

172
00:05:46,639 --> 00:05:48,880
just are you who you say you are it's

173
00:05:48,880 --> 00:05:50,800
only at that very last step are you

174
00:05:50,800 --> 00:05:52,080
doing a check to see if you're actually

175
00:05:52,080 --> 00:05:54,240
authorized to do whatever it is so you

176
00:05:54,240 --> 00:05:57,039
can get tickets as any user to maybe

177
00:05:57,039 --> 00:06:00,319
mount the admin dollar share on the dc

178
00:06:00,319 --> 00:06:02,319
sure get it you can have the ticket but

179
00:06:02,319 --> 00:06:03,759
it's only whenever you actually try and

180
00:06:03,759 --> 00:06:05,199
use it that'll check oh you're not

181
00:06:05,199 --> 00:06:06,720
authorized to actually mount admin

182
00:06:06,720 --> 00:06:08,000
dollar right

183
00:06:08,000 --> 00:06:10,319
it's only at that very last step

184
00:06:10,319 --> 00:06:12,160
so a couple other little like kerberos

185
00:06:12,160 --> 00:06:14,319
101 extras that kind of fall into this

186
00:06:14,319 --> 00:06:16,720
so i mentioned this before the kdc is

187
00:06:16,720 --> 00:06:19,840
bound to a realm this is what the kdc

188
00:06:19,840 --> 00:06:21,840
knows about an active directory this is

189
00:06:21,840 --> 00:06:23,840
your fqdn your fully qualified domain

190
00:06:23,840 --> 00:06:26,000
name for your domain okay

191
00:06:26,000 --> 00:06:28,400
uh tickets have expiration times they

192
00:06:28,400 --> 00:06:30,000
can be renewed they can be revoked they

193
00:06:30,000 --> 00:06:31,120
can have all these different kinds of

194
00:06:31,120 --> 00:06:33,360
properties associated with them

195
00:06:33,360 --> 00:06:35,600
and all these services have a backing

196
00:06:35,600 --> 00:06:37,520
service principal name that's how we

197
00:06:37,520 --> 00:06:39,199
look up what we want to do so say you

198
00:06:39,199 --> 00:06:41,520
want to mount the admin dollar share of

199
00:06:41,520 --> 00:06:42,639
this dc

200
00:06:42,639 --> 00:06:44,639
well in kerberos you have to look up

201
00:06:44,639 --> 00:06:46,240
what that even means

202
00:06:46,240 --> 00:06:48,000
you're requesting access to a specific

203
00:06:48,000 --> 00:06:50,960
service on the dc namely to access its

204
00:06:50,960 --> 00:06:52,639
file share and so it has to be able to

205
00:06:52,639 --> 00:06:54,800
look up all that information it does all

206
00:06:54,800 --> 00:06:56,560
this with the fully qualified domain

207
00:06:56,560 --> 00:06:58,400
names of everything that's going on the

208
00:06:58,400 --> 00:06:59,680
reason it doesn't use something like an

209
00:06:59,680 --> 00:07:01,840
ip address to access that because your

210
00:07:01,840 --> 00:07:03,520
ip addresses can change

211
00:07:03,520 --> 00:07:05,120
theoretically your host name should stay

212
00:07:05,120 --> 00:07:06,479
the same as you go out and you do things

213
00:07:06,479 --> 00:07:07,680
in active directory so that's why it

214
00:07:07,680 --> 00:07:10,000
uses this to look it up so if you have

215
00:07:10,000 --> 00:07:11,680
maybe a domain controller in your

216
00:07:11,680 --> 00:07:13,360
environment that you're trying to access

217
00:07:13,360 --> 00:07:16,080
and you try and do this kerberos process

218
00:07:16,080 --> 00:07:17,840
with an ip address it won't work because

219
00:07:17,840 --> 00:07:19,199
the ip address isn't what's actually

220
00:07:19,199 --> 00:07:21,680
stored in kerberos

221
00:07:21,680 --> 00:07:22,720
okay

222
00:07:22,720 --> 00:07:24,240
lots of stuff we're going to be doing

223
00:07:24,240 --> 00:07:26,160
heavy kerberos stuff today so should

224
00:07:26,160 --> 00:07:28,560
cover why do you care why am i even

225
00:07:28,560 --> 00:07:29,759
talking about this

226
00:07:29,759 --> 00:07:32,000
so as a red teamer usernames and

227
00:07:32,000 --> 00:07:34,000
passwords can only get you so far and

228
00:07:34,000 --> 00:07:35,840
especially as we're talking about macos

229
00:07:35,840 --> 00:07:37,840
stuff sometimes that's kind of hard to

230
00:07:37,840 --> 00:07:39,360
get depending on how you get your

231
00:07:39,360 --> 00:07:41,440
initial access onto the computer you may

232
00:07:41,440 --> 00:07:43,039
or may not be able to get the user's

233
00:07:43,039 --> 00:07:44,160
password and there may be more

234
00:07:44,160 --> 00:07:45,680
protection stopping you from getting it

235
00:07:45,680 --> 00:07:48,160
so that might not even be an option

236
00:07:48,160 --> 00:07:50,479
kerberos tickets are just as valuable as

237
00:07:50,479 --> 00:07:52,319
a username and password remember your

238
00:07:52,319 --> 00:07:54,479
tgt is your new username and password so

239
00:07:54,479 --> 00:07:56,560
i can use that to be you just like i

240
00:07:56,560 --> 00:07:58,720
would your username and password

241
00:07:58,720 --> 00:08:00,720
oftentimes we see especially on mac os

242
00:08:00,720 --> 00:08:03,039
environments these tgts and kerberos

243
00:08:03,039 --> 00:08:04,720
properties are way less protected than

244
00:08:04,720 --> 00:08:06,560
your username and password think about

245
00:08:06,560 --> 00:08:08,720
how many times you hear about somebody's

246
00:08:08,720 --> 00:08:10,960
tgt or kerberos stuff on mac

247
00:08:10,960 --> 00:08:11,840
nobody's talking about that they're

248
00:08:11,840 --> 00:08:12,879
always talking about oh no your

249
00:08:12,879 --> 00:08:15,039
plaintext password that's the thing but

250
00:08:15,039 --> 00:08:17,280
these are just as valuable

251
00:08:17,280 --> 00:08:19,039
and because there are more moving pieces

252
00:08:19,039 --> 00:08:20,080
in this

253
00:08:20,080 --> 00:08:21,360
if you do have one of these pieces

254
00:08:21,360 --> 00:08:23,199
compromised it's harder to go through

255
00:08:23,199 --> 00:08:24,639
and make sure everything is set back to

256
00:08:24,639 --> 00:08:26,319
a secure state with a username and

257
00:08:26,319 --> 00:08:27,919
password you can just all right reset

258
00:08:27,919 --> 00:08:30,000
his password we're good to go right

259
00:08:30,000 --> 00:08:31,199
as a blue teamer there's more

260
00:08:31,199 --> 00:08:32,399
authentication logs that you need to

261
00:08:32,399 --> 00:08:34,000
look into there's more credential

262
00:08:34,000 --> 00:08:35,039
material that you need to track

263
00:08:35,039 --> 00:08:36,399
throughout the environment especially as

264
00:08:36,399 --> 00:08:38,320
you do maybe forensics or look to see

265
00:08:38,320 --> 00:08:40,479
some incident response on a box what is

266
00:08:40,479 --> 00:08:42,399
a potential what kinds of passwords and

267
00:08:42,399 --> 00:08:43,599
credential material could they have

268
00:08:43,599 --> 00:08:45,360
taken from here to move throughout the

269
00:08:45,360 --> 00:08:46,800
environment

270
00:08:46,800 --> 00:08:49,279
i did a poll last october just to see

271
00:08:49,279 --> 00:08:50,959
how many times people actually

272
00:08:50,959 --> 00:08:52,720
experiencing active directory and

273
00:08:52,720 --> 00:08:55,600
kerberos and mac os based red teams is

274
00:08:55,600 --> 00:08:57,200
about what i expected seventy percent of

275
00:08:57,200 --> 00:09:00,959
people uh see active directory bound max

276
00:09:00,959 --> 00:09:02,640
maybe zero to twenty five percent of the

277
00:09:02,640 --> 00:09:05,440
time so not not too much but there is a

278
00:09:05,440 --> 00:09:08,320
thirty percent um group that is seeing

279
00:09:08,320 --> 00:09:11,200
this at least 25 of the time so it's

280
00:09:11,200 --> 00:09:12,640
kind of worth digging into to see what

281
00:09:12,640 --> 00:09:15,120
all we can uncover from this

282
00:09:15,120 --> 00:09:16,880
so now we'll start doing a deep dive

283
00:09:16,880 --> 00:09:18,800
into how this

284
00:09:18,800 --> 00:09:21,600
uh process happens on a mac and how you

285
00:09:21,600 --> 00:09:23,200
can see some of these attacks kind of

286
00:09:23,200 --> 00:09:25,360
formulate throughout the process

287
00:09:25,360 --> 00:09:28,560
so i keep saying this word heimdall

288
00:09:28,560 --> 00:09:29,760
what is it

289
00:09:29,760 --> 00:09:32,080
uh so if you're familiar with mythology

290
00:09:32,080 --> 00:09:33,519
which i don't know why you would be but

291
00:09:33,519 --> 00:09:36,399
if you are heimdall is the the one who

292
00:09:36,399 --> 00:09:38,080
guards the bifrost

293
00:09:38,080 --> 00:09:40,800
which uh is the rainbow road

294
00:09:40,800 --> 00:09:43,360
in asgard this is where thor loki odin

295
00:09:43,360 --> 00:09:45,040
all those people live

296
00:09:45,040 --> 00:09:46,959
uh apple for some reason whenever they

297
00:09:46,959 --> 00:09:48,240
forked kerberos and made their own

298
00:09:48,240 --> 00:09:50,240
implementation they called it heimdall

299
00:09:50,240 --> 00:09:51,360
because

300
00:09:51,360 --> 00:09:54,000
apple so they also dropped one out

301
00:09:54,000 --> 00:09:54,959
because

302
00:09:54,959 --> 00:09:56,480
apple so

303
00:09:56,480 --> 00:09:57,839
that's what you'll see here we'll see

304
00:09:57,839 --> 00:10:00,240
heimdall over the place

305
00:10:00,240 --> 00:10:02,399
if you're curious this picture is from

306
00:10:02,399 --> 00:10:04,000
marvel this is their implementation

307
00:10:04,000 --> 00:10:06,560
their version of heimdall on the bifrost

308
00:10:06,560 --> 00:10:08,399
so this is why the tool i wrote to go do

309
00:10:08,399 --> 00:10:10,320
all this active directory manipulation

310
00:10:10,320 --> 00:10:12,640
bifrost because it's related to heimdall

311
00:10:12,640 --> 00:10:14,880
it's not completely random i promise

312
00:10:14,880 --> 00:10:15,760
so

313
00:10:15,760 --> 00:10:17,519
in mac west how do you start going about

314
00:10:17,519 --> 00:10:19,120
using all this sort of stuff so there's

315
00:10:19,120 --> 00:10:20,959
a handy curves framework that you can

316
00:10:20,959 --> 00:10:21,839
just

317
00:10:21,839 --> 00:10:23,360
link to your project and start accessing

318
00:10:23,360 --> 00:10:25,120
all these apis

319
00:10:25,120 --> 00:10:26,880
also throughout these slides i'm doing a

320
00:10:26,880 --> 00:10:28,560
whole bunch of api calls and doing stuff

321
00:10:28,560 --> 00:10:30,399
in objective-c for a very specific

322
00:10:30,399 --> 00:10:31,279
reason

323
00:10:31,279 --> 00:10:32,720
so especially from a red team

324
00:10:32,720 --> 00:10:34,720
perspective i like to have

325
00:10:34,720 --> 00:10:35,920
access to everything that's going on on

326
00:10:35,920 --> 00:10:37,440
the system and make sure that what i do

327
00:10:37,440 --> 00:10:39,519
now is kind of future resilience at

328
00:10:39,519 --> 00:10:41,360
least a little bit

329
00:10:41,360 --> 00:10:42,880
apple went through and made a post as

330
00:10:42,880 --> 00:10:45,519
there was talking about catalina that at

331
00:10:45,519 --> 00:10:47,279
some point going forward

332
00:10:47,279 --> 00:10:49,839
at some time tbd third-party scripting

333
00:10:49,839 --> 00:10:51,200
languages might be removed from your

334
00:10:51,200 --> 00:10:53,519
boxes by default so you might not have

335
00:10:53,519 --> 00:10:56,079
pearl python ruby all this sort of stuff

336
00:10:56,079 --> 00:10:57,839
so there are other implementations of

337
00:10:57,839 --> 00:10:59,519
this sort of work at least in the active

338
00:10:59,519 --> 00:11:02,160
directory realm in things like python

339
00:11:02,160 --> 00:11:03,680
but if that's going to be removed by

340
00:11:03,680 --> 00:11:05,360
default and i happen to be doing a red

341
00:11:05,360 --> 00:11:06,959
team engagement where i happen to land

342
00:11:06,959 --> 00:11:09,839
on i don't know an hr person's mac

343
00:11:09,839 --> 00:11:12,160
they're not going to install python with

344
00:11:12,160 --> 00:11:13,920
brew casper and that sort of stuff so

345
00:11:13,920 --> 00:11:15,040
i've delivered something that's actually

346
00:11:15,040 --> 00:11:16,160
going to be there so i'm going through

347
00:11:16,160 --> 00:11:17,200
and doing all this sort of stuff with

348
00:11:17,200 --> 00:11:19,279
api calls and as we go through and we

349
00:11:19,279 --> 00:11:20,720
start talking about all the different

350
00:11:20,720 --> 00:11:22,480
kerberos traffic i'm doing all this

351
00:11:22,480 --> 00:11:23,519
manually

352
00:11:23,519 --> 00:11:25,200
um this is very similar to a project

353
00:11:25,200 --> 00:11:26,079
that

354
00:11:26,079 --> 00:11:27,760
harm joy will schroeder did called

355
00:11:27,760 --> 00:11:29,360
rubius going through and directly

356
00:11:29,360 --> 00:11:31,600
connecting to kerberos on 488 and doing

357
00:11:31,600 --> 00:11:33,839
all this traffic manually

358
00:11:33,839 --> 00:11:35,760
throughout all these slides um the kind

359
00:11:35,760 --> 00:11:37,120
of user contacts and stuff we'll be

360
00:11:37,120 --> 00:11:39,600
dealing with there's a test domain with

361
00:11:39,600 --> 00:11:42,880
a test lab admin user and the computer

362
00:11:42,880 --> 00:11:44,079
that we'll be doing this from is the

363
00:11:44,079 --> 00:11:46,640
spooky.test.lab.localcomputer

364
00:11:46,640 --> 00:11:47,920
okay

365
00:11:47,920 --> 00:11:48,959
so if you're curious about how to do

366
00:11:48,959 --> 00:11:51,360
this in xcode it's pretty simple there's

367
00:11:51,360 --> 00:11:53,680
a build phase that you can go to

368
00:11:53,680 --> 00:11:55,600
where you can just link libraries and

369
00:11:55,600 --> 00:11:57,040
you can just link there's a kerberos dot

370
00:11:57,040 --> 00:11:58,880
framework pretty easy to get up and get

371
00:11:58,880 --> 00:12:00,560
started

372
00:12:00,560 --> 00:12:01,360
so

373
00:12:01,360 --> 00:12:03,519
that stage one i said in the beginning

374
00:12:03,519 --> 00:12:05,839
there was a shared secret uh what is

375
00:12:05,839 --> 00:12:07,920
that so in active directory and in

376
00:12:07,920 --> 00:12:09,360
windows you're not sending your clear

377
00:12:09,360 --> 00:12:10,639
text password around you're not even

378
00:12:10,639 --> 00:12:12,399
sending your in some cases you're not

379
00:12:12,399 --> 00:12:14,079
sending your your hash of your password

380
00:12:14,079 --> 00:12:15,680
around either

381
00:12:15,680 --> 00:12:17,600
active directory doesn't know your

382
00:12:17,600 --> 00:12:19,680
plaintext password knows hashes of your

383
00:12:19,680 --> 00:12:20,720
password

384
00:12:20,720 --> 00:12:22,720
so you have to go from plain text

385
00:12:22,720 --> 00:12:24,959
password to one of these hashes that's

386
00:12:24,959 --> 00:12:26,639
the shared secret that you can be using

387
00:12:26,639 --> 00:12:27,600
for this

388
00:12:27,600 --> 00:12:29,360
active directory knows many versions of

389
00:12:29,360 --> 00:12:33,200
this hash um such as rc4 aes 120 256

390
00:12:33,200 --> 00:12:35,040
does three all these different ones and

391
00:12:35,040 --> 00:12:36,560
it has these for backwards compatibility

392
00:12:36,560 --> 00:12:38,560
reasons based off of the os version that

393
00:12:38,560 --> 00:12:40,000
you're trying to talk to and what kind

394
00:12:40,000 --> 00:12:41,440
of domain you're in and all this sort of

395
00:12:41,440 --> 00:12:42,800
stuff

396
00:12:42,800 --> 00:12:44,480
so if we want to go through and take our

397
00:12:44,480 --> 00:12:47,120
plain text password and get this hash

398
00:12:47,120 --> 00:12:50,160
heimdall has us covered with this krb5

399
00:12:50,160 --> 00:12:52,480
c-string to key function that allows us

400
00:12:52,480 --> 00:12:54,560
to take a c string representation of our

401
00:12:54,560 --> 00:12:57,360
password and get back a key

402
00:12:57,360 --> 00:12:59,360
so the main ones we'll be

403
00:12:59,360 --> 00:13:02,639
concerned with here is rc4 which is an

404
00:13:02,639 --> 00:13:05,920
unsalted hash so in your normal windows

405
00:13:05,920 --> 00:13:07,040
environment you can think of this as

406
00:13:07,040 --> 00:13:10,160
your ntlm hash there's also the aes 128

407
00:13:10,160 --> 00:13:13,839
and 256 which are salted hashes so what

408
00:13:13,839 --> 00:13:15,040
is this salt

409
00:13:15,040 --> 00:13:16,800
luckily for us this salt is a known

410
00:13:16,800 --> 00:13:18,480
thing in these environments

411
00:13:18,480 --> 00:13:20,240
if you're talking about a normal user

412
00:13:20,240 --> 00:13:23,279
account the salt is the

413
00:13:23,279 --> 00:13:26,639
fully qualified domain name in caps

414
00:13:26,639 --> 00:13:28,959
with the username appended to it if

415
00:13:28,959 --> 00:13:30,560
you're talking about a computer account

416
00:13:30,560 --> 00:13:31,920
so this is like your computer dollar

417
00:13:31,920 --> 00:13:34,079
accounts the the assault is just a

418
00:13:34,079 --> 00:13:36,079
little bit different because

419
00:13:36,079 --> 00:13:39,040
reasons so um in that case it's the

420
00:13:39,040 --> 00:13:40,639
fully qualified domain name all

421
00:13:40,639 --> 00:13:41,920
uppercase

422
00:13:41,920 --> 00:13:43,839
host the computer name that you're

423
00:13:43,839 --> 00:13:45,920
trying to do and the fully qualified

424
00:13:45,920 --> 00:13:48,639
domain name again all lowercase

425
00:13:48,639 --> 00:13:51,279
because why not but at least it's known

426
00:13:51,279 --> 00:13:53,040
um as we go through and we do this from

427
00:13:53,040 --> 00:13:54,720
a red team perspective

428
00:13:54,720 --> 00:13:56,800
rc4 hashes are super nice because

429
00:13:56,800 --> 00:13:59,360
they're not unique across uh domains

430
00:13:59,360 --> 00:14:03,040
remember the rc4 here isn't unsalted so

431
00:14:03,040 --> 00:14:04,639
there's no domain specific material

432
00:14:04,639 --> 00:14:06,240
getting added into this hash that's

433
00:14:06,240 --> 00:14:09,040
super nice rc4 is also a bit easier to

434
00:14:09,040 --> 00:14:11,600
crack than as128 and 256.

435
00:14:11,600 --> 00:14:13,120
now i mentioned this computer account

436
00:14:13,120 --> 00:14:14,800
thing a couple of times if you're

437
00:14:14,800 --> 00:14:16,800
curious about that on your own mac you

438
00:14:16,800 --> 00:14:18,800
can view the plain text password of this

439
00:14:18,800 --> 00:14:20,160
account

440
00:14:20,160 --> 00:14:22,959
you just go to your system keychain

441
00:14:22,959 --> 00:14:24,880
there is an active directory slash and

442
00:14:24,880 --> 00:14:27,120
then the netbios name of your domain

443
00:14:27,120 --> 00:14:29,160
that you're connected to so in

444
00:14:29,160 --> 00:14:30,880
test.lab.local that's the fully

445
00:14:30,880 --> 00:14:33,120
qualified domain name the net bio short

446
00:14:33,120 --> 00:14:34,959
name for that is just test so you can

447
00:14:34,959 --> 00:14:36,639
see up here there's an application

448
00:14:36,639 --> 00:14:38,880
password in the keychain under active

449
00:14:38,880 --> 00:14:41,440
directory test where i can just see the

450
00:14:41,440 --> 00:14:43,199
plaintext password

451
00:14:43,199 --> 00:14:45,600
fantastic i like that you can also see

452
00:14:45,600 --> 00:14:47,440
this if you're using dscl on the command

453
00:14:47,440 --> 00:14:49,199
line

454
00:14:49,199 --> 00:14:50,320
so

455
00:14:50,320 --> 00:14:52,000
we need to go from

456
00:14:52,000 --> 00:14:54,240
plain text password to hash we can do

457
00:14:54,240 --> 00:14:55,920
this with bifrost where we can just ask

458
00:14:55,920 --> 00:14:57,920
hash provide the information that we

459
00:14:57,920 --> 00:14:59,760
need like the domain the username and

460
00:14:59,760 --> 00:15:02,160
the password and we can get our hashes

461
00:15:02,160 --> 00:15:04,000
here so you can see here is the example

462
00:15:04,000 --> 00:15:06,800
of the test lab admin user with the salt

463
00:15:06,800 --> 00:15:08,240
of just the domain and the username we

464
00:15:08,240 --> 00:15:10,079
get our hashes if you're talking about

465
00:15:10,079 --> 00:15:12,639
the computer account spooky dollar you

466
00:15:12,639 --> 00:15:14,399
can see here our salt is a bit different

467
00:15:14,399 --> 00:15:16,160
where it has that host in there and the

468
00:15:16,160 --> 00:15:19,600
fully qualified domain name again okay

469
00:15:19,600 --> 00:15:21,519
something to note here as well uh as

470
00:15:21,519 --> 00:15:24,079
you'll see this rc4 hash starts with

471
00:15:24,079 --> 00:15:26,079
three four one one you'll see where we

472
00:15:26,079 --> 00:15:28,480
can verify that we're correct here um

473
00:15:28,480 --> 00:15:30,720
in a couple slides

474
00:15:30,720 --> 00:15:31,759
so

475
00:15:31,759 --> 00:15:33,279
that's awesome lots of stuff that you

476
00:15:33,279 --> 00:15:35,199
can do but what if your users hate

477
00:15:35,199 --> 00:15:37,199
typing in their passwords because i know

478
00:15:37,199 --> 00:15:38,480
everybody loves typing in their

479
00:15:38,480 --> 00:15:40,320
passwords a million times a day right

480
00:15:40,320 --> 00:15:42,800
yes so if you don't like that

481
00:15:42,800 --> 00:15:44,079
then there's a thing that you can use

482
00:15:44,079 --> 00:15:46,240
called a key tab so

483
00:15:46,240 --> 00:15:47,440
i know you're super intuitive you

484
00:15:47,440 --> 00:15:49,360
guessed it the key tab is a table of

485
00:15:49,360 --> 00:15:50,880
keys

486
00:15:50,880 --> 00:15:53,440
pretty easy goes through by default all

487
00:15:53,440 --> 00:15:56,880
of you have one in etsy krb5.keytab

488
00:15:56,880 --> 00:15:59,600
uh it is locked down to root access only

489
00:15:59,600 --> 00:16:01,120
this has information about your computer

490
00:16:01,120 --> 00:16:02,480
dollar account

491
00:16:02,480 --> 00:16:04,399
so users can create their own note if

492
00:16:04,399 --> 00:16:05,279
they don't want to type in their

493
00:16:05,279 --> 00:16:06,480
password every time they're doing this

494
00:16:06,480 --> 00:16:08,880
to access kerberos-based resources they

495
00:16:08,880 --> 00:16:10,560
can create their own key tab which can

496
00:16:10,560 --> 00:16:13,279
potentially be less locked down

497
00:16:13,279 --> 00:16:14,959
than just their user so this is another

498
00:16:14,959 --> 00:16:16,880
thing that's nice to kind of search for

499
00:16:16,880 --> 00:16:18,320
on computers as we're doing red team

500
00:16:18,320 --> 00:16:20,839
engagements to find these saved

501
00:16:20,839 --> 00:16:23,920
credentials so you can use bifrost to go

502
00:16:23,920 --> 00:16:26,000
through and parse these key tab files

503
00:16:26,000 --> 00:16:28,240
they're pretty straightforward um

504
00:16:28,240 --> 00:16:29,920
and so you can see here that we're going

505
00:16:29,920 --> 00:16:30,720
through

506
00:16:30,720 --> 00:16:32,959
uh opening up the key tab we can see

507
00:16:32,959 --> 00:16:34,800
principles like this is trying to access

508
00:16:34,800 --> 00:16:37,279
the bnc uh this is the computer dollar

509
00:16:37,279 --> 00:16:39,040
account that i was mentioning before and

510
00:16:39,040 --> 00:16:41,040
here you can see that three four one

511
00:16:41,040 --> 00:16:43,680
so this is the rc4 hash of our computer

512
00:16:43,680 --> 00:16:45,360
dollar account that's already saved in

513
00:16:45,360 --> 00:16:46,560
the key tab so we don't have to go

514
00:16:46,560 --> 00:16:47,759
through the whole process of trying to

515
00:16:47,759 --> 00:16:49,600
generate that ourselves if we're already

516
00:16:49,600 --> 00:16:51,279
elevated on the box we can just pull

517
00:16:51,279 --> 00:16:52,959
this file and have all these hashes

518
00:16:52,959 --> 00:16:55,279
already

519
00:16:55,440 --> 00:16:57,279
so you can also see here

520
00:16:57,279 --> 00:16:58,399
i'll talk about this in a little bit

521
00:16:58,399 --> 00:17:00,720
later but if you notice

522
00:17:00,720 --> 00:17:03,360
this is the vmc service on this spooky

523
00:17:03,360 --> 00:17:05,599
computer and this is the spooky dollar

524
00:17:05,599 --> 00:17:08,240
account okay both of these have the

525
00:17:08,240 --> 00:17:10,240
exact same hash

526
00:17:10,240 --> 00:17:12,079
spooky and i'll talk about that in a

527
00:17:12,079 --> 00:17:14,000
little bit while that's the case

528
00:17:14,000 --> 00:17:16,000
so different attacks already at this

529
00:17:16,000 --> 00:17:17,760
point that can happen so if you can

530
00:17:17,760 --> 00:17:19,839
compromise the user's plaintext password

531
00:17:19,839 --> 00:17:21,199
then you can generate their shared

532
00:17:21,199 --> 00:17:22,559
secret we just went through the process

533
00:17:22,559 --> 00:17:24,240
of how you generate these and now you

534
00:17:24,240 --> 00:17:26,240
can do all this traffic yourself if you

535
00:17:26,240 --> 00:17:28,799
compromise the user's uh hash so the

536
00:17:28,799 --> 00:17:30,720
computer dollar or the user's hash that

537
00:17:30,720 --> 00:17:32,480
we're using in this environment then you

538
00:17:32,480 --> 00:17:34,240
can use that to do this traffic manually

539
00:17:34,240 --> 00:17:35,919
yourself because remember we're trying

540
00:17:35,919 --> 00:17:37,760
to take that plain text password and get

541
00:17:37,760 --> 00:17:39,600
these hashes anyway so if you just get

542
00:17:39,600 --> 00:17:41,039
these hashes you're already one step

543
00:17:41,039 --> 00:17:42,559
down the road

544
00:17:42,559 --> 00:17:44,559
in windows this is usually overpass the

545
00:17:44,559 --> 00:17:46,240
hash or past the hash depending on if

546
00:17:46,240 --> 00:17:48,000
you're trying to inject this material

547
00:17:48,000 --> 00:17:50,080
into ls or not for us though it doesn't

548
00:17:50,080 --> 00:17:51,440
really that matter that much because we

549
00:17:51,440 --> 00:17:54,000
can just do this manually on the wire

550
00:17:54,000 --> 00:17:56,160
if you're able to get the rc4 version of

551
00:17:56,160 --> 00:17:58,320
this hash instead of like the aes 128

552
00:17:58,320 --> 00:18:01,679
256 it's a bit easier to crack

553
00:18:01,679 --> 00:18:03,120
and this allows you to essentially be

554
00:18:03,120 --> 00:18:04,559
that user account once you have that

555
00:18:04,559 --> 00:18:07,360
hash you can do everything as that

556
00:18:07,360 --> 00:18:08,960
okay now we're actually going to start

557
00:18:08,960 --> 00:18:11,440
doing traffic on the wire for kerberos

558
00:18:11,440 --> 00:18:14,320
so this is stage two the authentication

559
00:18:14,320 --> 00:18:16,000
server request we're trying to get that

560
00:18:16,000 --> 00:18:17,600
tgt so we're trying to go through and

561
00:18:17,600 --> 00:18:19,840
prove that we are who we say we are so

562
00:18:19,840 --> 00:18:22,240
we get this new kerberos based id

563
00:18:22,240 --> 00:18:24,080
uh if you look here on the left

564
00:18:24,080 --> 00:18:26,320
uh kerberos traffic is in this weird asn

565
00:18:26,320 --> 00:18:29,039
1 dur encoding format which of course

566
00:18:29,039 --> 00:18:31,200
back then was super awesome because it

567
00:18:31,200 --> 00:18:32,400
limited the amount of bytes we had to

568
00:18:32,400 --> 00:18:34,480
send but it's super annoying to parse so

569
00:18:34,480 --> 00:18:36,240
this is just a kind of broken out

570
00:18:36,240 --> 00:18:39,360
representation of what that data is

571
00:18:39,360 --> 00:18:40,640
so we can go through and there's

572
00:18:40,640 --> 00:18:42,799
something to to note here

573
00:18:42,799 --> 00:18:44,240
as you're going through and you're doing

574
00:18:44,240 --> 00:18:46,960
these requests you say who you are

575
00:18:46,960 --> 00:18:49,360
you prove who you are and you say what

576
00:18:49,360 --> 00:18:52,320
you want okay so for this request we say

577
00:18:52,320 --> 00:18:53,520
who we are

578
00:18:53,520 --> 00:18:56,160
we say what we want so we want access we

579
00:18:56,160 --> 00:18:59,919
want that uh krb tgt we want a tgt

580
00:18:59,919 --> 00:19:01,360
but how are we going to prove that we

581
00:19:01,360 --> 00:19:02,960
are who we say we are we just have this

582
00:19:02,960 --> 00:19:04,160
hash

583
00:19:04,160 --> 00:19:05,280
well

584
00:19:05,280 --> 00:19:07,039
in windows active directory we have this

585
00:19:07,039 --> 00:19:09,840
thing called the pa data and time stamp

586
00:19:09,840 --> 00:19:12,080
which you guessed it means we will

587
00:19:12,080 --> 00:19:14,400
encrypt a timestamp awesome right so

588
00:19:14,400 --> 00:19:16,160
we'll use our hash to encrypt the

589
00:19:16,160 --> 00:19:17,760
timestamp to prove that we are who we

590
00:19:17,760 --> 00:19:19,120
say we are

591
00:19:19,120 --> 00:19:21,120
so that's what we start doing here

592
00:19:21,120 --> 00:19:22,160
remember

593
00:19:22,160 --> 00:19:24,080
say who we are prove that we are who we

594
00:19:24,080 --> 00:19:25,760
are say what service we want you'll see

595
00:19:25,760 --> 00:19:29,200
this process over and over again

596
00:19:29,200 --> 00:19:30,000
so

597
00:19:30,000 --> 00:19:32,160
that's why you'll see um for these tgt

598
00:19:32,160 --> 00:19:34,000
requests we're requesting specifically

599
00:19:34,000 --> 00:19:36,720
the kbtgt for this round

600
00:19:36,720 --> 00:19:38,160
if you look here remember the thing

601
00:19:38,160 --> 00:19:39,840
we're encrypting to prove that we are

602
00:19:39,840 --> 00:19:41,679
who we say we are it's just a time stamp

603
00:19:41,679 --> 00:19:43,840
it really is just the timestamp so we

604
00:19:43,840 --> 00:19:46,559
just get a time of now we add a couple

605
00:19:46,559 --> 00:19:48,640
of bytes in front of it for this asn 1

606
00:19:48,640 --> 00:19:51,840
encoding and we go through and heimdall

607
00:19:51,840 --> 00:19:55,120
has this kb5c encrypts length function

608
00:19:55,120 --> 00:19:56,880
that allows us to just take that data

609
00:19:56,880 --> 00:19:59,039
taken a key encrypt it

610
00:19:59,039 --> 00:20:00,400
pretty awesome pretty straightforward

611
00:20:00,400 --> 00:20:04,000
allows us to authenticate as ourselves

612
00:20:04,000 --> 00:20:04,880
so

613
00:20:04,880 --> 00:20:06,480
what kind of attacks gonna happen here

614
00:20:06,480 --> 00:20:08,159
in stage two

615
00:20:08,159 --> 00:20:09,840
so one thing to note is that this sort

616
00:20:09,840 --> 00:20:11,840
of stuff this encrypted timestamp is a

617
00:20:11,840 --> 00:20:13,120
windows thing

618
00:20:13,120 --> 00:20:15,919
in traditional mit kerberos it doesn't

619
00:20:15,919 --> 00:20:18,000
have this requirement the idea being

620
00:20:18,000 --> 00:20:19,919
that well if you request the tgt as that

621
00:20:19,919 --> 00:20:21,760
user it doesn't matter if you don't

622
00:20:21,760 --> 00:20:23,200
prove that you're that user because part

623
00:20:23,200 --> 00:20:24,559
of the data will be encrypted with that

624
00:20:24,559 --> 00:20:26,400
user's hash so if you don't have that

625
00:20:26,400 --> 00:20:28,320
hash if you're not that user you can't

626
00:20:28,320 --> 00:20:29,520
decrypt it

627
00:20:29,520 --> 00:20:32,159
all good go home boys 1980s we're good

628
00:20:32,159 --> 00:20:33,600
the problem with that though is now you

629
00:20:33,600 --> 00:20:36,240
have a hash of data you have encrypted

630
00:20:36,240 --> 00:20:38,880
data for that user that you can crack

631
00:20:38,880 --> 00:20:40,559
so that's why we go through and we do

632
00:20:40,559 --> 00:20:42,320
this pre-off request during that

633
00:20:42,320 --> 00:20:44,320
encrypted timestamp so you're not able

634
00:20:44,320 --> 00:20:46,720
to just get weak hashes for all the

635
00:20:46,720 --> 00:20:48,000
users in the domain and crack their

636
00:20:48,000 --> 00:20:49,360
passwords

637
00:20:49,360 --> 00:20:51,360
this is the general idea behind as

638
00:20:51,360 --> 00:20:52,559
roasting

639
00:20:52,559 --> 00:20:54,159
and it's called that because you're

640
00:20:54,159 --> 00:20:56,159
doing information based off of the as

641
00:20:56,159 --> 00:20:59,360
reply the one for the tgt

642
00:20:59,360 --> 00:21:00,559
so

643
00:21:00,559 --> 00:21:02,559
as we do this what is happening in stage

644
00:21:02,559 --> 00:21:05,120
three so the authentication server in

645
00:21:05,120 --> 00:21:07,280
the kdc want to validate what we sent

646
00:21:07,280 --> 00:21:10,159
them in our request for the tgt okay so

647
00:21:10,159 --> 00:21:12,080
doing a couple checks does this user

648
00:21:12,080 --> 00:21:15,440
exist is it an active account uh is this

649
00:21:15,440 --> 00:21:17,120
kdc that you're trying to talk to

650
00:21:17,120 --> 00:21:18,799
authoritative over the realm in which

651
00:21:18,799 --> 00:21:20,480
you're talking if it's not then you

652
00:21:20,480 --> 00:21:22,559
start doing these interim trusts and all

653
00:21:22,559 --> 00:21:23,440
this sort of stuff which i won't get

654
00:21:23,440 --> 00:21:24,400
into because i can see it more

655
00:21:24,400 --> 00:21:26,880
complicated but more stuff happens there

656
00:21:26,880 --> 00:21:29,200
we're checking to see if the user does

657
00:21:29,200 --> 00:21:31,840
exist and is active

658
00:21:31,840 --> 00:21:34,320
does the hash that the kdc have for that

659
00:21:34,320 --> 00:21:35,679
user match what it is you're trying to

660
00:21:35,679 --> 00:21:38,000
do and can it decrypt it

661
00:21:38,000 --> 00:21:39,360
all this also checking to make sure that

662
00:21:39,360 --> 00:21:41,039
this timestamp is in the past couple of

663
00:21:41,039 --> 00:21:42,640
minutes i'm trying to make sure that

664
00:21:42,640 --> 00:21:43,600
you're not going through and doing

665
00:21:43,600 --> 00:21:45,280
replay attacks for a capture traffic a

666
00:21:45,280 --> 00:21:48,400
long time ago to get another tgt okay if

667
00:21:48,400 --> 00:21:49,679
you answered yes to all of this you get

668
00:21:49,679 --> 00:21:51,840
a tgt you said no to any of it you get

669
00:21:51,840 --> 00:21:53,200
an error

670
00:21:53,200 --> 00:21:55,679
so say we go through we do that we get

671
00:21:55,679 --> 00:21:58,080
this reply this is the asrem this is the

672
00:21:58,080 --> 00:21:59,840
reply with rtgt

673
00:21:59,840 --> 00:22:02,640
because kerbos is a stateless protocol

674
00:22:02,640 --> 00:22:05,120
it sends back a lot of data every time

675
00:22:05,120 --> 00:22:06,400
because you're not able to track what's

676
00:22:06,400 --> 00:22:07,760
happening between each request that's

677
00:22:07,760 --> 00:22:10,240
why you see all here this is just a

678
00:22:10,240 --> 00:22:11,760
rehash of all the data we sent in our

679
00:22:11,760 --> 00:22:13,039
request

680
00:22:13,039 --> 00:22:15,919
this part here five is our actual tgt

681
00:22:15,919 --> 00:22:17,760
this is the part that we care about but

682
00:22:17,760 --> 00:22:19,840
this part down here at the bottom six is

683
00:22:19,840 --> 00:22:22,080
a part that's encrypted with our users

684
00:22:22,080 --> 00:22:24,000
hash this is a little bit of extra

685
00:22:24,000 --> 00:22:25,039
information

686
00:22:25,039 --> 00:22:28,400
so up here the tgt has most of it is

687
00:22:28,400 --> 00:22:31,039
encrypted with the kb tgt's hash so we

688
00:22:31,039 --> 00:22:32,640
can't look into it this is something

689
00:22:32,640 --> 00:22:34,080
that we will pass on with further

690
00:22:34,080 --> 00:22:36,480
requests that the kdc can decrypt and

691
00:22:36,480 --> 00:22:38,640
validate that it was the kdc that sent

692
00:22:38,640 --> 00:22:40,559
this initial initial tgt

693
00:22:40,559 --> 00:22:42,000
if we look into that encrypted part

694
00:22:42,000 --> 00:22:44,640
though that we can decrypt element six

695
00:22:44,640 --> 00:22:47,679
we see most importantly here is another

696
00:22:47,679 --> 00:22:49,760
key that we can use this is the session

697
00:22:49,760 --> 00:22:51,679
key that we'll be using for the next set

698
00:22:51,679 --> 00:22:53,280
of requests

699
00:22:53,280 --> 00:22:54,640
lots of different keys going around lots

700
00:22:54,640 --> 00:22:56,240
of different encryption stuff going on

701
00:22:56,240 --> 00:22:58,240
um but we have to keep track of this key

702
00:22:58,240 --> 00:22:59,840
as well for as we do

703
00:22:59,840 --> 00:23:02,720
further requests you can also see uh

704
00:23:02,720 --> 00:23:05,840
how long the ticket will last you can

705
00:23:05,840 --> 00:23:07,039
see the different flags that of

706
00:23:07,039 --> 00:23:09,440
satellite ticket so is it renewable is

707
00:23:09,440 --> 00:23:11,120
it affordable all this sort of stuff oh

708
00:23:11,120 --> 00:23:13,039
that's contained in there

709
00:23:13,039 --> 00:23:15,120
um so now that you have this tgt

710
00:23:15,120 --> 00:23:16,320
awesome

711
00:23:16,320 --> 00:23:18,880
what happens to it on a mac where does

712
00:23:18,880 --> 00:23:21,280
it go where is the save what's going on

713
00:23:21,280 --> 00:23:23,600
so on mac os these tickets are stored in

714
00:23:23,600 --> 00:23:25,760
a format called c cache their credential

715
00:23:25,760 --> 00:23:27,280
cache

716
00:23:27,280 --> 00:23:29,760
by default on your mac they're managed

717
00:23:29,760 --> 00:23:32,080
by a kcm so this is a process based

718
00:23:32,080 --> 00:23:33,919
daemon that's living on your computer

719
00:23:33,919 --> 00:23:35,679
that will handle all these requests

720
00:23:35,679 --> 00:23:37,120
transparently for you as you hit these

721
00:23:37,120 --> 00:23:39,760
apis to pull out this data

722
00:23:39,760 --> 00:23:40,640
so

723
00:23:40,640 --> 00:23:43,600
each cache is assigned a random uuid uh

724
00:23:43,600 --> 00:23:45,600
there's one principle per cache which is

725
00:23:45,600 --> 00:23:47,440
you and you have multiple tickets within

726
00:23:47,440 --> 00:23:49,440
it okay all those tickets should belong

727
00:23:49,440 --> 00:23:51,919
to that same one principle

728
00:23:51,919 --> 00:23:54,000
you can have multiple caches on a system

729
00:23:54,000 --> 00:23:55,360
one will be your default but you can

730
00:23:55,360 --> 00:23:57,279
specify any of them to use so you can

731
00:23:57,279 --> 00:23:59,600
have multiple different tgts that you

732
00:23:59,600 --> 00:24:01,039
then swap between as you go through and

733
00:24:01,039 --> 00:24:03,440
do additional requests

734
00:24:03,440 --> 00:24:05,200
additionally so that's kind of protected

735
00:24:05,200 --> 00:24:07,120
that's the default uh apple likes to do

736
00:24:07,120 --> 00:24:08,640
that sort of stuff protected by default

737
00:24:08,640 --> 00:24:10,400
saved in memory if you want to though

738
00:24:10,400 --> 00:24:11,840
you can specify to have this dropped to

739
00:24:11,840 --> 00:24:13,760
disk this is the default on a lot of

740
00:24:13,760 --> 00:24:16,159
linux boxes instead of saving an api in

741
00:24:16,159 --> 00:24:18,159
memory they save to disk and so by

742
00:24:18,159 --> 00:24:19,919
default that's in etsy it'll be like

743
00:24:19,919 --> 00:24:22,320
krb5 underscore and a uuid

744
00:24:22,320 --> 00:24:23,840
um so you can just cap those if you're

745
00:24:23,840 --> 00:24:25,120
elevated on the box and kind of get

746
00:24:25,120 --> 00:24:26,960
everybody's tgt which is pretty

747
00:24:26,960 --> 00:24:28,480
dangerous

748
00:24:28,480 --> 00:24:30,400
so if we start listing out these

749
00:24:30,400 --> 00:24:31,919
credential caches what does that even

750
00:24:31,919 --> 00:24:32,880
look like

751
00:24:32,880 --> 00:24:34,480
so here we're listing with bifrost and

752
00:24:34,480 --> 00:24:36,400
you can see a couple things put out here

753
00:24:36,400 --> 00:24:38,559
so we have this principle this is us

754
00:24:38,559 --> 00:24:39,760
test lab

755
00:24:39,760 --> 00:24:42,159
admin that's our principle and within it

756
00:24:42,159 --> 00:24:44,240
we have a bunch of tickets so each of

757
00:24:44,240 --> 00:24:47,039
these has an api and a uuid this is the

758
00:24:47,039 --> 00:24:49,440
name of the cache

759
00:24:49,440 --> 00:24:51,919
these are the principles for the service

760
00:24:51,919 --> 00:24:53,679
for the tickets that we've requested so

761
00:24:53,679 --> 00:24:56,799
if the service principle is krbtgt

762
00:24:56,799 --> 00:25:00,080
that's our tgt our saved tgt um and then

763
00:25:00,080 --> 00:25:01,600
other ones you'll see are for the

764
00:25:01,600 --> 00:25:03,279
service tickets that are stored in there

765
00:25:03,279 --> 00:25:04,400
and of course you can see the different

766
00:25:04,400 --> 00:25:05,919
flags that are associated with this as

767
00:25:05,919 --> 00:25:07,520
well

768
00:25:07,520 --> 00:25:08,720
so now what if we want to take the

769
00:25:08,720 --> 00:25:10,159
ticket from one computer and use it on

770
00:25:10,159 --> 00:25:11,600
another this is pretty common in red

771
00:25:11,600 --> 00:25:13,120
teaming you wanna you're on one box

772
00:25:13,120 --> 00:25:14,960
you're elevated you take those tickets

773
00:25:14,960 --> 00:25:17,679
maybe now another box is dual home has

774
00:25:17,679 --> 00:25:18,880
connections into other environments that

775
00:25:18,880 --> 00:25:20,000
you want to leverage you want to move it

776
00:25:20,000 --> 00:25:22,799
over there so don't worry kerberos does

777
00:25:22,799 --> 00:25:24,320
not know where it sent that ticket to

778
00:25:24,320 --> 00:25:26,640
and it doesn't track it it's stateless

779
00:25:26,640 --> 00:25:29,679
um so we can use this kirby format

780
00:25:29,679 --> 00:25:31,360
to go through and save all the data from

781
00:25:31,360 --> 00:25:33,600
that element five and six

782
00:25:33,600 --> 00:25:36,480
save it off and move it between boxes

783
00:25:36,480 --> 00:25:39,039
so we can go through here we dump the

784
00:25:39,039 --> 00:25:41,200
tickets that are in our credential cache

785
00:25:41,200 --> 00:25:43,279
you can see you know this is the client

786
00:25:43,279 --> 00:25:45,679
the test lab admin the principal this is

787
00:25:45,679 --> 00:25:48,640
his tgt because we have here the kbtgt

788
00:25:48,640 --> 00:25:50,320
you can see the encryption type the key

789
00:25:50,320 --> 00:25:51,919
all this sort of stuff down here this

790
00:25:51,919 --> 00:25:52,960
big blob

791
00:25:52,960 --> 00:25:55,039
is the actual ticket and

792
00:25:55,039 --> 00:25:56,320
encryption material that we'd need to

793
00:25:56,320 --> 00:25:59,120
move between boxes to be able to do that

794
00:25:59,120 --> 00:26:01,200
so we're going to be passing tickets how

795
00:26:01,200 --> 00:26:03,440
do you import them on the next box

796
00:26:03,440 --> 00:26:05,600
well you can inject tickets into any

797
00:26:05,600 --> 00:26:06,799
credential cache that you have whether

798
00:26:06,799 --> 00:26:09,440
it's in memory on file wherever um

799
00:26:09,440 --> 00:26:10,480
there's just a couple of things that

800
00:26:10,480 --> 00:26:12,240
have to happen you have to take that

801
00:26:12,240 --> 00:26:14,159
kirby format and convert it back into a

802
00:26:14,159 --> 00:26:15,840
credential cache format then you have to

803
00:26:15,840 --> 00:26:18,080
resolve the name and get the actual like

804
00:26:18,080 --> 00:26:19,760
address that you're trying to put this

805
00:26:19,760 --> 00:26:21,760
credential cache information into and

806
00:26:21,760 --> 00:26:23,279
you have to just append it to the list

807
00:26:23,279 --> 00:26:25,440
remember this is just a big dump of

808
00:26:25,440 --> 00:26:28,880
tickets within these credential caches

809
00:26:28,880 --> 00:26:30,240
so if we're going to start doing this we

810
00:26:30,240 --> 00:26:32,799
can do it in a couple steps here in

811
00:26:32,799 --> 00:26:34,880
bifrost we can list out the tickets that

812
00:26:34,880 --> 00:26:35,760
we have

813
00:26:35,760 --> 00:26:38,960
all we have is a tgt so but we want to

814
00:26:38,960 --> 00:26:40,880
inject a ticket into this credential

815
00:26:40,880 --> 00:26:43,520
cache so we look at the name here

816
00:26:43,520 --> 00:26:45,279
all right now we're going to

817
00:26:45,279 --> 00:26:48,080
inject so here's action ptt pass the

818
00:26:48,080 --> 00:26:50,000
ticket we're going to inject it into

819
00:26:50,000 --> 00:26:51,840
this api and all that basically for

820
00:26:51,840 --> 00:26:53,039
stuff above it is the ticket we're

821
00:26:53,039 --> 00:26:54,480
actually going to inject

822
00:26:54,480 --> 00:26:55,840
and so you can see down here we go

823
00:26:55,840 --> 00:26:57,600
through those couple of steps parse the

824
00:26:57,600 --> 00:27:00,000
kirby data create into a credential

825
00:27:00,000 --> 00:27:01,600
cache format

826
00:27:01,600 --> 00:27:03,520
resolve the name and you can see here

827
00:27:03,520 --> 00:27:05,440
this is the credential so this is this

828
00:27:05,440 --> 00:27:08,000
um cifs service for this domain

829
00:27:08,000 --> 00:27:10,559
controller and we'll inject that in so

830
00:27:10,559 --> 00:27:12,640
you can see down here now after we list

831
00:27:12,640 --> 00:27:14,080
it's already been injected so it's

832
00:27:14,080 --> 00:27:15,919
pretty simple to go through and pull out

833
00:27:15,919 --> 00:27:17,600
tickets and inject them back in there's

834
00:27:17,600 --> 00:27:19,039
no real protections going on between

835
00:27:19,039 --> 00:27:20,720
them nothing really stopping you from

836
00:27:20,720 --> 00:27:22,240
pulling them out manipulating them doing

837
00:27:22,240 --> 00:27:24,480
all this sort of stuff

838
00:27:24,480 --> 00:27:25,840
so what kind of attacks going to happen

839
00:27:25,840 --> 00:27:27,919
here as a kind of a big section with all

840
00:27:27,919 --> 00:27:28,799
that

841
00:27:28,799 --> 00:27:32,080
as rep so the idea here is if you can

842
00:27:32,080 --> 00:27:34,960
capture that krb krbtgt hash that is

843
00:27:34,960 --> 00:27:37,120
signing part of that data in element 5

844
00:27:37,120 --> 00:27:39,600
for your tgt if you can get that hash

845
00:27:39,600 --> 00:27:42,559
then you can forge your own tgts

846
00:27:42,559 --> 00:27:44,080
this is called a golden ticket attack

847
00:27:44,080 --> 00:27:45,360
because you can just mint your own

848
00:27:45,360 --> 00:27:47,200
golden tickets to be whoever you want in

849
00:27:47,200 --> 00:27:48,799
the environment

850
00:27:48,799 --> 00:27:50,240
if you can dump those tickets from the

851
00:27:50,240 --> 00:27:52,559
kcm then you can use them wherever and

852
00:27:52,559 --> 00:27:54,399
you can impersonate that user and act as

853
00:27:54,399 --> 00:27:56,640
that user in that environment

854
00:27:56,640 --> 00:27:58,000
and then of course if you're able to do

855
00:27:58,000 --> 00:28:00,000
the as rep roasting maybe on traditional

856
00:28:00,000 --> 00:28:02,000
at mit kerberos then you can go through

857
00:28:02,000 --> 00:28:03,440
and start cracking their passwords as

858
00:28:03,440 --> 00:28:04,799
well

859
00:28:04,799 --> 00:28:06,720
so now we go through stage four is we

860
00:28:06,720 --> 00:28:07,760
want to actually do something with that

861
00:28:07,760 --> 00:28:10,880
tgt so it's a very very similar process

862
00:28:10,880 --> 00:28:13,200
we want to talk to the tgs to get a

863
00:28:13,200 --> 00:28:15,919
service ticket to something so again who

864
00:28:15,919 --> 00:28:18,240
we are prove we are who we are and say

865
00:28:18,240 --> 00:28:20,320
what we want so in this case we are

866
00:28:20,320 --> 00:28:22,320
saying who we are our proof instead of

867
00:28:22,320 --> 00:28:24,480
encrypted timestamp is our tgt that

868
00:28:24,480 --> 00:28:26,399
proves that we are who we say we are and

869
00:28:26,399 --> 00:28:27,760
then we go through and we use that to

870
00:28:27,760 --> 00:28:29,279
request a service to get to the thing

871
00:28:29,279 --> 00:28:31,760
that we're trying to access

872
00:28:31,760 --> 00:28:32,880
so

873
00:28:32,880 --> 00:28:35,360
any user with a valid tgt can request a

874
00:28:35,360 --> 00:28:36,880
service ticket to any service in the

875
00:28:36,880 --> 00:28:38,799
environment there's no authorization

876
00:28:38,799 --> 00:28:40,080
checks happening right just

877
00:28:40,080 --> 00:28:41,679
authentication

878
00:28:41,679 --> 00:28:43,919
services must have the backing spns so

879
00:28:43,919 --> 00:28:45,760
the example here is we're looking up for

880
00:28:45,760 --> 00:28:48,799
the sifs uh spooky that test.lab.local

881
00:28:48,799 --> 00:28:51,120
is an spn that we can use

882
00:28:51,120 --> 00:28:53,360
and we can specify any encryption scheme

883
00:28:53,360 --> 00:28:57,360
that we want so we can say we have the

884
00:28:57,360 --> 00:29:00,000
aes 256 hash and that we want the ticket

885
00:29:00,000 --> 00:29:02,880
to come back in rc4 so we can do all

886
00:29:02,880 --> 00:29:04,640
these granular requests if we're doing

887
00:29:04,640 --> 00:29:07,760
this manually on the wire

888
00:29:07,760 --> 00:29:09,200
so

889
00:29:09,200 --> 00:29:11,360
the tps and the kdc will validate what

890
00:29:11,360 --> 00:29:14,000
we sent them in this request uh can the

891
00:29:14,000 --> 00:29:16,640
krb tgt hash decrypt the tgt that we

892
00:29:16,640 --> 00:29:19,039
sent with them did that kdc actually

893
00:29:19,039 --> 00:29:20,559
send that tgt right that's the first

894
00:29:20,559 --> 00:29:22,480
check that's going on was it done within

895
00:29:22,480 --> 00:29:24,799
the past 20 minutes if it's it's kind of

896
00:29:24,799 --> 00:29:27,200
like a performance boost check if it's

897
00:29:27,200 --> 00:29:28,799
already been granted within the past 20

898
00:29:28,799 --> 00:29:30,559
minutes it assumes that everything in

899
00:29:30,559 --> 00:29:32,559
there is still valid you have an updated

900
00:29:32,559 --> 00:29:34,240
active directory in any way so it just

901
00:29:34,240 --> 00:29:36,880
trusts everything that's in there

902
00:29:36,880 --> 00:29:38,320
does the spn that you're requesting

903
00:29:38,320 --> 00:29:40,000
actually exist can it find it does it

904
00:29:40,000 --> 00:29:41,520
have a shared secret all the sort of

905
00:29:41,520 --> 00:29:43,520
stuff checks that are happening if you

906
00:29:43,520 --> 00:29:44,799
have yes to all the above you get a

907
00:29:44,799 --> 00:29:47,200
service ticket congratulations

908
00:29:47,200 --> 00:29:49,200
when that comes back looks pretty much

909
00:29:49,200 --> 00:29:51,360
exactly like what we had when the tgt

910
00:29:51,360 --> 00:29:52,480
came back

911
00:29:52,480 --> 00:29:54,399
element five has our service ticket

912
00:29:54,399 --> 00:29:56,559
element six has information encrypted

913
00:29:56,559 --> 00:29:58,000
with the hash that we're that we're

914
00:29:58,000 --> 00:29:59,919
using so this is the service ticket this

915
00:29:59,919 --> 00:30:02,320
is information and again notice even if

916
00:30:02,320 --> 00:30:05,039
we use the aes 256 hash we can get the

917
00:30:05,039 --> 00:30:08,640
result back being rc4 okay

918
00:30:08,640 --> 00:30:10,960
so uh that second piece down there at

919
00:30:10,960 --> 00:30:14,399
the bottom element six again uh this one

920
00:30:14,399 --> 00:30:17,520
our hash the asq56 is what we'll use to

921
00:30:17,520 --> 00:30:19,600
decrypt it and see another session key

922
00:30:19,600 --> 00:30:22,559
that we can use for further requests

923
00:30:22,559 --> 00:30:24,480
so now that you have a service ticket

924
00:30:24,480 --> 00:30:25,919
where does that go does that have any

925
00:30:25,919 --> 00:30:27,520
sort of differences for our service

926
00:30:27,520 --> 00:30:29,520
ticket versus a ticket granting ticket

927
00:30:29,520 --> 00:30:31,360
uh the answer no so they both go into

928
00:30:31,360 --> 00:30:33,039
the same spot and you can dump them just

929
00:30:33,039 --> 00:30:35,120
the same so again here is dumping this

930
00:30:35,120 --> 00:30:37,440
service ticket again a kirby blob that

931
00:30:37,440 --> 00:30:40,799
you can take and inject anywhere else

932
00:30:40,799 --> 00:30:43,039
so what kind of attacks can happen here

933
00:30:43,039 --> 00:30:44,880
well if you know the shared secret of

934
00:30:44,880 --> 00:30:46,559
the service account

935
00:30:46,559 --> 00:30:49,039
then you can make service tickets to

936
00:30:49,039 --> 00:30:51,600
that service so you can be anybody but

937
00:30:51,600 --> 00:30:53,520
to that service this is a silver ticket

938
00:30:53,520 --> 00:30:54,640
attack

939
00:30:54,640 --> 00:30:56,720
and if you use a valid tgt you can

940
00:30:56,720 --> 00:30:59,600
request service tickets for any service

941
00:30:59,600 --> 00:31:01,360
at any encryption level so you can say

942
00:31:01,360 --> 00:31:02,880
hey i want a ticket to that service i

943
00:31:02,880 --> 00:31:05,600
want it to be rc4 so i can then crack it

944
00:31:05,600 --> 00:31:08,480
so that is the idea behind curb roasting

945
00:31:08,480 --> 00:31:09,919
um being able to request a lower

946
00:31:09,919 --> 00:31:11,519
encryption so this is an example of

947
00:31:11,519 --> 00:31:13,519
dumping that out into a hashtag format

948
00:31:13,519 --> 00:31:14,399
of an

949
00:31:14,399 --> 00:31:17,120
rc4 encrypted ticket

950
00:31:17,120 --> 00:31:19,039
okay that was all windows active

951
00:31:19,039 --> 00:31:21,360
directory lots of stuff going on i know

952
00:31:21,360 --> 00:31:22,880
but now what if you're not in windows

953
00:31:22,880 --> 00:31:24,320
active directory

954
00:31:24,320 --> 00:31:26,000
what happens do you care about any of

955
00:31:26,000 --> 00:31:27,519
this sort of stuff so far

956
00:31:27,519 --> 00:31:29,840
good news maybe is you do still care

957
00:31:29,840 --> 00:31:32,320
because you might still be using it so

958
00:31:32,320 --> 00:31:35,679
starting in os x 10.5 apple introduced

959
00:31:35,679 --> 00:31:37,679
back to my mac so they've since

960
00:31:37,679 --> 00:31:39,360
discontinued this but all the underlying

961
00:31:39,360 --> 00:31:40,720
technology and stuff is still here and

962
00:31:40,720 --> 00:31:41,919
still being used

963
00:31:41,919 --> 00:31:44,559
so the goal was to allow users without

964
00:31:44,559 --> 00:31:46,320
any centralized management just two

965
00:31:46,320 --> 00:31:48,399
people that happen to be near each other

966
00:31:48,399 --> 00:31:50,399
be able to access each other's resources

967
00:31:50,399 --> 00:31:52,000
so be able to mount their shares be able

968
00:31:52,000 --> 00:31:54,399
to vnc be able to do this sort of stuff

969
00:31:54,399 --> 00:31:55,919
without needing some sort of big

970
00:31:55,919 --> 00:31:58,000
centralized management server um in the

971
00:31:58,000 --> 00:31:59,039
middle

972
00:31:59,039 --> 00:32:00,559
so you can see this here if you look

973
00:32:00,559 --> 00:32:01,679
into your sharing settings there are

974
00:32:01,679 --> 00:32:02,960
only a couple of these that apply for

975
00:32:02,960 --> 00:32:05,840
this this is screen sharing file sharing

976
00:32:05,840 --> 00:32:07,840
and remote management those are three

977
00:32:07,840 --> 00:32:09,360
big ones

978
00:32:09,360 --> 00:32:10,480
okay

979
00:32:10,480 --> 00:32:13,120
starting in 10.14 mojave back to my mac

980
00:32:13,120 --> 00:32:14,960
is no longer included but like i said

981
00:32:14,960 --> 00:32:16,320
everything is still there under the hood

982
00:32:16,320 --> 00:32:17,679
still operating

983
00:32:17,679 --> 00:32:18,640
so

984
00:32:18,640 --> 00:32:19,919
when you want to connect remotely to a

985
00:32:19,919 --> 00:32:22,000
mac with a local account what's actually

986
00:32:22,000 --> 00:32:23,519
happening everything we've covered so

987
00:32:23,519 --> 00:32:25,039
far has been with windows active

988
00:32:25,039 --> 00:32:26,399
directory there's been a domain there's

989
00:32:26,399 --> 00:32:28,240
been all this centralized management

990
00:32:28,240 --> 00:32:29,440
well now you're sitting here with just

991
00:32:29,440 --> 00:32:30,720
two macs

992
00:32:30,720 --> 00:32:32,399
what is going on

993
00:32:32,399 --> 00:32:33,360
so you're still going to be using high

994
00:32:33,360 --> 00:32:34,799
builds authenticate to get tickets and

995
00:32:34,799 --> 00:32:36,799
access resources and it's still going to

996
00:32:36,799 --> 00:32:38,960
be happening on port 88 but there's no

997
00:32:38,960 --> 00:32:41,519
active directory no domain so

998
00:32:41,519 --> 00:32:43,600
what do you do

999
00:32:43,600 --> 00:32:45,360
well apple has you covered with this

1000
00:32:45,360 --> 00:32:48,000
local key distribution center so when

1001
00:32:48,000 --> 00:32:50,080
your computer first boots very first

1002
00:32:50,080 --> 00:32:52,159
time it creates a self-signed

1003
00:32:52,159 --> 00:32:53,600
certificate

1004
00:32:53,600 --> 00:32:56,960
com apple kerberos kdc okay

1005
00:32:56,960 --> 00:32:58,159
this certificate is stored in your

1006
00:32:58,159 --> 00:33:00,000
system keychain all of you can view this

1007
00:33:00,000 --> 00:33:01,440
now on your own computer and see the

1008
00:33:01,440 --> 00:33:02,559
certificate

1009
00:33:02,559 --> 00:33:04,640
the realm for your heimdall instance

1010
00:33:04,640 --> 00:33:06,000
that's happening on your specific

1011
00:33:06,000 --> 00:33:08,720
computer is based on the sha-1 hash of

1012
00:33:08,720 --> 00:33:11,600
this certificate so if your certificate

1013
00:33:11,600 --> 00:33:15,120
starts with uh b58c then the realm for

1014
00:33:15,120 --> 00:33:18,880
your computer will be lkdc sha1 dot and

1015
00:33:18,880 --> 00:33:21,120
then your hash okay everybody's will be

1016
00:33:21,120 --> 00:33:23,679
unique and different

1017
00:33:23,679 --> 00:33:25,360
uh you can also go through if you look

1018
00:33:25,360 --> 00:33:27,200
at your launch daemons system library

1019
00:33:27,200 --> 00:33:28,159
launch daemons there's a

1020
00:33:28,159 --> 00:33:31,159
com.apple.comros.kdc

1021
00:33:31,440 --> 00:33:32,559
that you can look at there's an

1022
00:33:32,559 --> 00:33:34,559
associated p list that'll show you the

1023
00:33:34,559 --> 00:33:36,640
different services that your computer is

1024
00:33:36,640 --> 00:33:38,320
sharing out whenever this sort of

1025
00:33:38,320 --> 00:33:40,000
kerberos traffic is

1026
00:33:40,000 --> 00:33:41,840
turned on for your computer so you can

1027
00:33:41,840 --> 00:33:43,600
see here there's the apple file server

1028
00:33:43,600 --> 00:33:46,960
there's smb there's screen sharing okay

1029
00:33:46,960 --> 00:33:48,399
if you're curious about this if this is

1030
00:33:48,399 --> 00:33:50,159
running on your box or not you can do

1031
00:33:50,159 --> 00:33:52,080
one of two things you can check and see

1032
00:33:52,080 --> 00:33:54,320
if you have port 88 on your computer

1033
00:33:54,320 --> 00:33:56,240
open and listening you can also check

1034
00:33:56,240 --> 00:33:58,559
launch ctl and see if this daemon is

1035
00:33:58,559 --> 00:34:00,240
running if it has associated paid with

1036
00:34:00,240 --> 00:34:02,240
it if it does then congratulations

1037
00:34:02,240 --> 00:34:03,519
you're using heimdall you're sharing the

1038
00:34:03,519 --> 00:34:06,559
service via tickets you're welcome

1039
00:34:06,559 --> 00:34:07,600
so

1040
00:34:07,600 --> 00:34:08,800
if you want to take a

1041
00:34:08,800 --> 00:34:10,079
further step into this i mentioned a

1042
00:34:10,079 --> 00:34:11,359
couple services that are there running

1043
00:34:11,359 --> 00:34:13,199
on a computer that leverage this

1044
00:34:13,199 --> 00:34:15,520
if you look in your etsy care v5 key tab

1045
00:34:15,520 --> 00:34:16,879
you all have this

1046
00:34:16,879 --> 00:34:18,159
you can see a bunch of different

1047
00:34:18,159 --> 00:34:20,079
services that are here these are the

1048
00:34:20,079 --> 00:34:21,679
services that your computer is sharing

1049
00:34:21,679 --> 00:34:24,719
out and the associated keys with them

1050
00:34:24,719 --> 00:34:27,918
so this is the backing key for example

1051
00:34:27,918 --> 00:34:30,879
the apfs server for your sifs for

1052
00:34:30,879 --> 00:34:32,480
mounting file shares

1053
00:34:32,480 --> 00:34:35,440
this is the shared secret that the

1054
00:34:35,440 --> 00:34:37,599
computer has with the key distribution

1055
00:34:37,599 --> 00:34:40,320
center so if you have these hashes then

1056
00:34:40,320 --> 00:34:42,480
you can then make your own silver

1057
00:34:42,480 --> 00:34:44,800
tickets to the computer so remember this

1058
00:34:44,800 --> 00:34:47,040
is um talking about before in active

1059
00:34:47,040 --> 00:34:49,359
directory you get the backing accounts

1060
00:34:49,359 --> 00:34:51,440
hash you can make your own silver ticket

1061
00:34:51,440 --> 00:34:53,679
be anybody to that service that's what's

1062
00:34:53,679 --> 00:34:54,960
happening here

1063
00:34:54,960 --> 00:34:56,879
if you take these hashes you can make

1064
00:34:56,879 --> 00:34:59,200
your own service tickets be anybody to

1065
00:34:59,200 --> 00:35:00,839
that specific service

1066
00:35:00,839 --> 00:35:02,560
okay

1067
00:35:02,560 --> 00:35:04,560
now you want to go one step further

1068
00:35:04,560 --> 00:35:06,079
because you have all this local on your

1069
00:35:06,079 --> 00:35:09,839
computer you also have your own kbt gtt

1070
00:35:09,839 --> 00:35:11,760
which you can look at

1071
00:35:11,760 --> 00:35:14,640
here with dsel where you can use orchard

1072
00:35:14,640 --> 00:35:16,800
to go through and pull this there is a

1073
00:35:16,800 --> 00:35:20,000
kerberos keys attribute that's there uh

1074
00:35:20,000 --> 00:35:21,760
on on this account

1075
00:35:21,760 --> 00:35:23,520
you can see it here based out pulled out

1076
00:35:23,520 --> 00:35:25,599
in base64

1077
00:35:25,599 --> 00:35:28,400
but if you run the user lib exec

1078
00:35:28,400 --> 00:35:31,040
configure local kdc this is idempotent

1079
00:35:31,040 --> 00:35:32,320
so you can run it as many times as you

1080
00:35:32,320 --> 00:35:34,960
want if the certificate exists nothing

1081
00:35:34,960 --> 00:35:36,000
will happen

1082
00:35:36,000 --> 00:35:37,440
if that certificate i was talking about

1083
00:35:37,440 --> 00:35:40,560
before doesn't exist the one with the

1084
00:35:40,560 --> 00:35:42,400
sha-1 hash that you're using based off

1085
00:35:42,400 --> 00:35:44,480
your realm that doesn't exist this

1086
00:35:44,480 --> 00:35:46,160
binary is the one that will create a new

1087
00:35:46,160 --> 00:35:48,480
one and update all your hashes

1088
00:35:48,480 --> 00:35:50,720
so you can go through see here

1089
00:35:50,720 --> 00:35:53,119
uh pull out this base64 and if you base

1090
00:35:53,119 --> 00:35:55,920
64 decode that you actually get more asn

1091
00:35:55,920 --> 00:35:57,680
1 encoding because

1092
00:35:57,680 --> 00:36:00,240
who doesn't love asn 1. it breaks out

1093
00:36:00,240 --> 00:36:01,680
into this and if you actually look at

1094
00:36:01,680 --> 00:36:04,160
the details that are here you can see

1095
00:36:04,160 --> 00:36:07,599
uh integer 18 means as256 salted hash

1096
00:36:07,599 --> 00:36:09,359
here's the hash you'd need here's one

1097
00:36:09,359 --> 00:36:12,800
for aes 128 and there's cbc shaw one

1098
00:36:12,800 --> 00:36:15,440
so these are the different hashes for

1099
00:36:15,440 --> 00:36:17,839
your krb tgt account

1100
00:36:17,839 --> 00:36:19,839
this allows you if you take these hashes

1101
00:36:19,839 --> 00:36:22,960
to mint your own tgts to your computer

1102
00:36:22,960 --> 00:36:24,960
so you can be anybody to any service on

1103
00:36:24,960 --> 00:36:27,839
your computer

1104
00:36:28,480 --> 00:36:31,119
so now let's say we want to actually

1105
00:36:31,119 --> 00:36:32,720
access your computer we want to do all

1106
00:36:32,720 --> 00:36:35,200
this kerberos traffic to your local kdc

1107
00:36:35,200 --> 00:36:37,520
how does that work because remember

1108
00:36:37,520 --> 00:36:39,440
all you know is your password

1109
00:36:39,440 --> 00:36:41,200
and that remote computer has some sort

1110
00:36:41,200 --> 00:36:43,359
of realm which is unique and a sha-1

1111
00:36:43,359 --> 00:36:44,640
thing you're not going to guess so how

1112
00:36:44,640 --> 00:36:46,800
do you figure all that stuff out

1113
00:36:46,800 --> 00:36:48,960
so you're going to make an asrec

1114
00:36:48,960 --> 00:36:50,720
remember the initial one we did was an

1115
00:36:50,720 --> 00:36:52,160
as request

1116
00:36:52,160 --> 00:36:53,680
this time though since you don't know

1117
00:36:53,680 --> 00:36:55,440
what realm you're going to make it to

1118
00:36:55,440 --> 00:36:58,960
this well-known com.apple.lkdc

1119
00:36:58,960 --> 00:37:01,040
realm this is a special thing that apple

1120
00:37:01,040 --> 00:37:03,200
has that allows you to say this is a

1121
00:37:03,200 --> 00:37:06,240
generic request give me information so

1122
00:37:06,240 --> 00:37:07,599
kerberos will respond with a generic

1123
00:37:07,599 --> 00:37:08,560
error

1124
00:37:08,560 --> 00:37:09,920
that's saying it's redirecting you to

1125
00:37:09,920 --> 00:37:12,800
the correct lkdc so you do this request

1126
00:37:12,800 --> 00:37:14,079
you get back a response to give you the

1127
00:37:14,079 --> 00:37:16,480
correct sha-1 and realm that you're

1128
00:37:16,480 --> 00:37:18,320
trying to talk to on the remote computer

1129
00:37:18,320 --> 00:37:20,160
anybody can access that if you notice we

1130
00:37:20,160 --> 00:37:22,000
did no authentication for this so you

1131
00:37:22,000 --> 00:37:23,520
can query this for any computer that's

1132
00:37:23,520 --> 00:37:25,520
out there in the environment

1133
00:37:25,520 --> 00:37:27,040
so as part of this

1134
00:37:27,040 --> 00:37:28,240
you still don't know the shared secret

1135
00:37:28,240 --> 00:37:29,440
that you're going to use where all you

1136
00:37:29,440 --> 00:37:31,440
have is a password

1137
00:37:31,440 --> 00:37:33,760
the lkdc uses this special

1138
00:37:33,760 --> 00:37:36,240
protocol the secure remote protocol that

1139
00:37:36,240 --> 00:37:37,520
allows you to go through and do this

1140
00:37:37,520 --> 00:37:38,960
kind of like a diffie-hellman key

1141
00:37:38,960 --> 00:37:41,200
exchange aspect to be able to get a new

1142
00:37:41,200 --> 00:37:42,480
shared secret and key that you're going

1143
00:37:42,480 --> 00:37:44,480
to use for the rest of the

1144
00:37:44,480 --> 00:37:46,160
rest of the protocol if you remember

1145
00:37:46,160 --> 00:37:48,480
though kerberos is stateless so it

1146
00:37:48,480 --> 00:37:50,320
doesn't actually know what state you're

1147
00:37:50,320 --> 00:37:51,440
in as you're trying to go through and do

1148
00:37:51,440 --> 00:37:52,720
this back and forth for this key

1149
00:37:52,720 --> 00:37:53,760
exchange

1150
00:37:53,760 --> 00:37:56,079
so of course they added in this pa fx

1151
00:37:56,079 --> 00:37:58,240
cookie thing that you now have to get in

1152
00:37:58,240 --> 00:38:00,079
your request and kind of

1153
00:38:00,079 --> 00:38:01,920
re relay back every time you do these

1154
00:38:01,920 --> 00:38:03,119
requests you'll get a new one each time

1155
00:38:03,119 --> 00:38:05,359
you do a request super annoying but this

1156
00:38:05,359 --> 00:38:07,280
is uh in the same area as we're doing

1157
00:38:07,280 --> 00:38:09,440
that in cryptic timestamp before

1158
00:38:09,440 --> 00:38:10,640
okay

1159
00:38:10,640 --> 00:38:11,359
so

1160
00:38:11,359 --> 00:38:13,040
now that you know the realm we still

1161
00:38:13,040 --> 00:38:14,480
need to know what shared secret we're

1162
00:38:14,480 --> 00:38:16,560
going to use in windows we're using just

1163
00:38:16,560 --> 00:38:19,760
the rc4 or as256 hash that's not the

1164
00:38:19,760 --> 00:38:21,280
case here if you've ever done anything

1165
00:38:21,280 --> 00:38:22,640
with mac you know that your passwords

1166
00:38:22,640 --> 00:38:24,240
aren't saved in plain text and they're

1167
00:38:24,240 --> 00:38:26,640
not saved in just a hash instead they're

1168
00:38:26,640 --> 00:38:29,440
saved through this pbk df2 function with

1169
00:38:29,440 --> 00:38:31,280
assault and like 80 000 rounds and all

1170
00:38:31,280 --> 00:38:32,880
that sort of stuff right so it's a bit

1171
00:38:32,880 --> 00:38:34,640
different than just doing normal hash of

1172
00:38:34,640 --> 00:38:36,079
your password

1173
00:38:36,079 --> 00:38:37,280
if you're ever curious and look at your

1174
00:38:37,280 --> 00:38:39,680
own shadow hash data you can do this

1175
00:38:39,680 --> 00:38:41,680
with dscl here or you can use orchard

1176
00:38:41,680 --> 00:38:43,359
and get a base64 version like i have

1177
00:38:43,359 --> 00:38:45,280
here you can see a couple of interesting

1178
00:38:45,280 --> 00:38:47,760
things so you can see up here your

1179
00:38:47,760 --> 00:38:50,640
salted sha 512 ppk df2 this is your

1180
00:38:50,640 --> 00:38:51,599
normal

1181
00:38:51,599 --> 00:38:54,079
uh apple password it's gone through like

1182
00:38:54,079 --> 00:38:56,480
80 000 rounds shot 512 all this sort of

1183
00:38:56,480 --> 00:38:57,680
stuff

1184
00:38:57,680 --> 00:38:59,040
but there's also this other thing down

1185
00:38:59,040 --> 00:39:04,240
here this srp rfc 5054 4096 shaw 512 pbk

1186
00:39:04,240 --> 00:39:05,920
df2

1187
00:39:05,920 --> 00:39:08,480
mouthful gross but it's the thing that

1188
00:39:08,480 --> 00:39:09,839
we're looking for as we start doing this

1189
00:39:09,839 --> 00:39:12,720
srp protocol to talk to the local

1190
00:39:12,720 --> 00:39:14,480
kdc on box

1191
00:39:14,480 --> 00:39:16,720
so this big blob down here is the

1192
00:39:16,720 --> 00:39:19,680
verifier this is the server side shared

1193
00:39:19,680 --> 00:39:22,240
secret in windows both sides had the

1194
00:39:22,240 --> 00:39:23,680
shared hash and that's how you did

1195
00:39:23,680 --> 00:39:24,480
things

1196
00:39:24,480 --> 00:39:26,079
in this case though they're a bit

1197
00:39:26,079 --> 00:39:28,079
different on either side so if you're

1198
00:39:28,079 --> 00:39:30,560
curious it's a bunch of math and hashes

1199
00:39:30,560 --> 00:39:31,599
and stuff that's going on to be able to

1200
00:39:31,599 --> 00:39:33,119
generate this thing

1201
00:39:33,119 --> 00:39:35,680
but we go through now we can now that we

1202
00:39:35,680 --> 00:39:37,520
know the remote realm

1203
00:39:37,520 --> 00:39:39,920
the lkdc sha-1 whatever shot of the

1204
00:39:39,920 --> 00:39:42,720
remote box we can do another request

1205
00:39:42,720 --> 00:39:44,640
but we still haven't proven that we are

1206
00:39:44,640 --> 00:39:46,560
who we say we are we've just started a

1207
00:39:46,560 --> 00:39:48,640
request to that problem

1208
00:39:48,640 --> 00:39:50,240
so what we get back though is some

1209
00:39:50,240 --> 00:39:52,720
information to start this srp process so

1210
00:39:52,720 --> 00:39:53,680
we get back the cookies that we're

1211
00:39:53,680 --> 00:39:55,520
talking about so we can keep state and

1212
00:39:55,520 --> 00:39:58,320
we get back this uh information about

1213
00:39:58,320 --> 00:39:59,920
uh the salt we're gonna be using how

1214
00:39:59,920 --> 00:40:01,680
many rounds of ppk df2 we're going to be

1215
00:40:01,680 --> 00:40:03,680
using all this sort of stuff so this

1216
00:40:03,680 --> 00:40:05,599
starts to get pretty complicated lots of

1217
00:40:05,599 --> 00:40:06,960
stuff going on lots of back and forth

1218
00:40:06,960 --> 00:40:08,960
messages i'm using

1219
00:40:08,960 --> 00:40:11,680
big hints big numbers to do like

1220
00:40:11,680 --> 00:40:13,359
uh diffie-hellman key exchange style i

1221
00:40:13,359 --> 00:40:15,119
won't go into all that

1222
00:40:15,119 --> 00:40:16,400
but you do a couple more requests and

1223
00:40:16,400 --> 00:40:18,160
you get a tgt okay

1224
00:40:18,160 --> 00:40:20,800
so that tgt you can treat just like any

1225
00:40:20,800 --> 00:40:23,040
other tgt that you have normally

1226
00:40:23,040 --> 00:40:25,119
so if we look at our credential cash

1227
00:40:25,119 --> 00:40:26,800
that we dump after doing this process to

1228
00:40:26,800 --> 00:40:29,440
talk to a local kdc

1229
00:40:29,440 --> 00:40:30,800
we get two things that we'd expect

1230
00:40:30,800 --> 00:40:32,880
normally so we get our tgt and our

1231
00:40:32,880 --> 00:40:35,920
service ticket awesome looks good so far

1232
00:40:35,920 --> 00:40:37,040
but

1233
00:40:37,040 --> 00:40:38,480
what are all these other random things

1234
00:40:38,480 --> 00:40:40,000
that just got added in here

1235
00:40:40,000 --> 00:40:42,720
we have these care b5 c cash comp data

1236
00:40:42,720 --> 00:40:44,880
random things at xcom

1237
00:40:44,880 --> 00:40:46,560
like what what is going on here what is

1238
00:40:46,560 --> 00:40:48,960
this stuff that wasn't in there before

1239
00:40:48,960 --> 00:40:50,640
so we look at it though and look at all

1240
00:40:50,640 --> 00:40:52,800
these individual pieces it kind of gets

1241
00:40:52,800 --> 00:40:54,400
a little scary

1242
00:40:54,400 --> 00:40:56,400
so we can see down here there's an lkdc

1243
00:40:56,400 --> 00:40:58,240
hostname which is the remote computer

1244
00:40:58,240 --> 00:41:00,319
name that we're talking to okay that's

1245
00:41:00,319 --> 00:41:02,800
fine we can see the associated friendly

1246
00:41:02,800 --> 00:41:04,160
name i.e the username that we

1247
00:41:04,160 --> 00:41:05,599
authenticated with

1248
00:41:05,599 --> 00:41:07,280
okay

1249
00:41:07,280 --> 00:41:09,119
there's a type password

1250
00:41:09,119 --> 00:41:10,960
this is the plain text password that we

1251
00:41:10,960 --> 00:41:12,560
just used to authenticate to the remote

1252
00:41:12,560 --> 00:41:14,560
box going through all that stuff to do

1253
00:41:14,560 --> 00:41:16,480
is secure more protocol doing hashing

1254
00:41:16,480 --> 00:41:18,480
key exchange pbk df2 all this sort of

1255
00:41:18,480 --> 00:41:19,440
stuff

1256
00:41:19,440 --> 00:41:20,960
whoops doesn't matter let's just store

1257
00:41:20,960 --> 00:41:22,640
the plain text password so that's there

1258
00:41:22,640 --> 00:41:24,079
if you want it

1259
00:41:24,079 --> 00:41:25,440
um so there are a couple different

1260
00:41:25,440 --> 00:41:26,480
attacks that you can go through with

1261
00:41:26,480 --> 00:41:28,400
this um if you know the user's password

1262
00:41:28,400 --> 00:41:30,319
then you go through all this process

1263
00:41:30,319 --> 00:41:32,160
yourself um just like we did normally

1264
00:41:32,160 --> 00:41:34,160
just like we kind of did with windows if

1265
00:41:34,160 --> 00:41:36,800
you get the krb tgt hash then you can

1266
00:41:36,800 --> 00:41:38,079
generate your own

1267
00:41:38,079 --> 00:41:40,880
tgts as any user to any service on this

1268
00:41:40,880 --> 00:41:41,839
box

1269
00:41:41,839 --> 00:41:43,520
and this is again the golden ticket to

1270
00:41:43,520 --> 00:41:44,880
that box

1271
00:41:44,880 --> 00:41:46,400
if you get any of the hashes from the

1272
00:41:46,400 --> 00:41:48,960
nck or b5 etsykb5.keytab file

1273
00:41:48,960 --> 00:41:50,480
those hashes are the ones for all the

1274
00:41:50,480 --> 00:41:52,560
services on that box so if you have

1275
00:41:52,560 --> 00:41:54,160
those you can mint your own service

1276
00:41:54,160 --> 00:41:56,720
tickets id silver tickets to any service

1277
00:41:56,720 --> 00:41:59,040
on that box so in this case golden

1278
00:41:59,040 --> 00:42:00,160
tickets and silver tickets are

1279
00:42:00,160 --> 00:42:02,079
essentially the same because everything

1280
00:42:02,079 --> 00:42:03,760
is all living and encapsulated on that

1281
00:42:03,760 --> 00:42:06,160
one box so again you can be anybody to

1282
00:42:06,160 --> 00:42:08,800
any service on that box

1283
00:42:08,800 --> 00:42:11,040
and if you're able to steal the user's

1284
00:42:11,040 --> 00:42:13,680
srp verifier that big blob i showed in

1285
00:42:13,680 --> 00:42:15,520
the shadow hash data you can also use

1286
00:42:15,520 --> 00:42:18,480
that to crack the user's password

1287
00:42:18,480 --> 00:42:20,319
additionally

1288
00:42:20,319 --> 00:42:22,400
if you go for the user and read their

1289
00:42:22,400 --> 00:42:24,079
kerberos keys

1290
00:42:24,079 --> 00:42:25,920
you can get this either

1291
00:42:25,920 --> 00:42:27,760
with dscl or orchard to pull out this

1292
00:42:27,760 --> 00:42:30,400
attribute you can see here there is also

1293
00:42:30,400 --> 00:42:32,319
the stored users hashes that we're

1294
00:42:32,319 --> 00:42:34,240
talking about from active directory so

1295
00:42:34,240 --> 00:42:37,359
again you have the user's aes 256 128

1296
00:42:37,359 --> 00:42:39,599
and in this case instead of an rc4

1297
00:42:39,599 --> 00:42:41,280
there's the des 3

1298
00:42:41,280 --> 00:42:43,839
cbc hash that's going on here and so all

1299
00:42:43,839 --> 00:42:45,760
this information again you can see the

1300
00:42:45,760 --> 00:42:47,839
salts are based specifically for this

1301
00:42:47,839 --> 00:42:49,839
lkdc it's not for any active directory

1302
00:42:49,839 --> 00:42:52,000
at all so again you can use all these to

1303
00:42:52,000 --> 00:42:55,040
try and uh crack their passwords as well

1304
00:42:55,040 --> 00:42:57,280
so it's a lot of stuff a summary for all

1305
00:42:57,280 --> 00:42:58,880
this uh

1306
00:42:58,880 --> 00:43:00,880
if you are on a mac you're using

1307
00:43:00,880 --> 00:43:02,880
heimdall sorry it's happening all this

1308
00:43:02,880 --> 00:43:05,040
sort of stuff comes into play um we have

1309
00:43:05,040 --> 00:43:06,560
to start considering how often do you

1310
00:43:06,560 --> 00:43:08,720
change your user account password

1311
00:43:08,720 --> 00:43:10,640
okay maybe if something happened maybe

1312
00:43:10,640 --> 00:43:12,560
you get paranoid you change it do you

1313
00:43:12,560 --> 00:43:14,319
ever look and change your care btt

1314
00:43:14,319 --> 00:43:15,839
password do you ever change your

1315
00:43:15,839 --> 00:43:17,359
computer's password

1316
00:43:17,359 --> 00:43:18,960
these things most people don't even know

1317
00:43:18,960 --> 00:43:21,200
exist so you may be compromised change

1318
00:43:21,200 --> 00:43:23,200
user account password think hallelujah

1319
00:43:23,200 --> 00:43:25,200
i'm safe but now i can just mince golden

1320
00:43:25,200 --> 00:43:26,560
tickets and server tickets back to your

1321
00:43:26,560 --> 00:43:29,200
box and access them that way

1322
00:43:29,200 --> 00:43:30,160
um

1323
00:43:30,160 --> 00:43:32,400
according to apple the lkdc should not

1324
00:43:32,400 --> 00:43:34,000
come into play if you are joined to

1325
00:43:34,000 --> 00:43:36,000
active directory that's true but only

1326
00:43:36,000 --> 00:43:37,680
for active directory accounts if you

1327
00:43:37,680 --> 00:43:39,440
start using the local account then the

1328
00:43:39,440 --> 00:43:41,280
lkdc does come back into play and all

1329
00:43:41,280 --> 00:43:43,520
this sort of stuff falls in

1330
00:43:43,520 --> 00:43:45,359
one good thing to note is that these

1331
00:43:45,359 --> 00:43:46,800
tickets in your credential cache are

1332
00:43:46,800 --> 00:43:48,880
flushed periodically if you're mounting

1333
00:43:48,880 --> 00:43:50,480
a drive with lkdc and all that sort of

1334
00:43:50,480 --> 00:43:52,319
stuff the moment that you disconnect

1335
00:43:52,319 --> 00:43:53,760
these tickets should be flushed

1336
00:43:53,760 --> 00:43:55,440
including the plaintext password so

1337
00:43:55,440 --> 00:43:56,880
you'd have to be able to dump this while

1338
00:43:56,880 --> 00:43:58,640
it's still being connected which if you

1339
00:43:58,640 --> 00:44:00,640
have long running connections you're

1340
00:44:00,640 --> 00:44:02,800
kind of out of luck but if it you happen

1341
00:44:02,800 --> 00:44:03,839
to connect and disconnect pretty

1342
00:44:03,839 --> 00:44:05,680
frequently then maybe the attacker

1343
00:44:05,680 --> 00:44:06,880
doesn't catch that plaintext password in

1344
00:44:06,880 --> 00:44:10,800
memory um so that was a lot i know um

1345
00:44:10,800 --> 00:44:11,760
there's

1346
00:44:11,760 --> 00:44:13,119
links up to buy frost that's up there i

1347
00:44:13,119 --> 00:44:14,960
will update the code today for all this

1348
00:44:14,960 --> 00:44:17,520
lkdc stuff um i still haven't added in

1349
00:44:17,520 --> 00:44:19,040
the things to generate the golden silver

1350
00:44:19,040 --> 00:44:21,200
tickets that's coming soon

1351
00:44:21,200 --> 00:44:23,040
and then i have a post up there along

1352
00:44:23,040 --> 00:44:25,359
the same lines that has uh demo videos

1353
00:44:25,359 --> 00:44:27,280
to go through taking a user's password

1354
00:44:27,280 --> 00:44:29,200
getting the hash injecting the memory

1355
00:44:29,200 --> 00:44:30,800
and mounting remote shares all that sort

1356
00:44:30,800 --> 00:44:32,319
of stuff doing this as well

1357
00:44:32,319 --> 00:44:36,759
so that's that's the end of my stuff

1358
00:44:43,599 --> 00:44:46,720
i know that was a lot i'm sorry

1359
00:44:47,359 --> 00:44:50,160
i have a question from uh someone online

1360
00:44:50,160 --> 00:44:51,040
okay

1361
00:44:51,040 --> 00:44:52,400
they said i just finished a game with a

1362
00:44:52,400 --> 00:44:54,400
bunch of macs joined active directory i

1363
00:44:54,400 --> 00:44:56,240
was able to capture hashes from them

1364
00:44:56,240 --> 00:44:58,160
using responder i wasn't able to get a

1365
00:44:58,160 --> 00:45:02,040
lot of detail from the customers

1366
00:45:08,560 --> 00:45:12,279
might not work

1367
00:45:29,250 --> 00:45:31,280
[Music]

1368
00:45:31,280 --> 00:45:33,200
ooh for a responder

1369
00:45:33,200 --> 00:45:34,480
that's tough because a lot of the stuff

1370
00:45:34,480 --> 00:45:36,079
that's going on is just replaying stuff

1371
00:45:36,079 --> 00:45:37,520
and broadcasting stuff that's happening

1372
00:45:37,520 --> 00:45:39,280
in the network um

1373
00:45:39,280 --> 00:45:40,880
depending on what's going on you can try

1374
00:45:40,880 --> 00:45:43,359
and turn off uh like bonjour and mdns

1375
00:45:43,359 --> 00:45:44,400
that's going through and broadcasting

1376
00:45:44,400 --> 00:45:45,680
all the stuff like advertising your

1377
00:45:45,680 --> 00:45:46,640
services

1378
00:45:46,640 --> 00:45:48,160
but

1379
00:45:48,160 --> 00:45:50,240
i'm not sure for like a

1380
00:45:50,240 --> 00:45:51,920
easy stop fix to stop that stuff from

1381
00:45:51,920 --> 00:45:52,880
happening

1382
00:45:52,880 --> 00:45:54,240
can you turn off those services that

1383
00:45:54,240 --> 00:45:56,000
have other impacts

1384
00:45:56,000 --> 00:45:57,839
uh yeah so like if you're trying to do

1385
00:45:57,839 --> 00:46:00,319
things where you uh especially for like

1386
00:46:00,319 --> 00:46:02,160
airdrop it's using that to then

1387
00:46:02,160 --> 00:46:03,599
broadcast these other computers and you

1388
00:46:03,599 --> 00:46:06,319
can even see um there's a binary that

1389
00:46:06,319 --> 00:46:07,920
you can run on there that'll list out

1390
00:46:07,920 --> 00:46:08,880
all the different services that your

1391
00:46:08,880 --> 00:46:10,720
computer is broadcasting so you can even

1392
00:46:10,720 --> 00:46:12,240
see other computers that are connected

1393
00:46:12,240 --> 00:46:13,119
to the same network that are

1394
00:46:13,119 --> 00:46:15,040
broadcasting like ssh and smb and all

1395
00:46:15,040 --> 00:46:16,480
that sort of stuff

1396
00:46:16,480 --> 00:46:18,560
so basically

1397
00:46:18,560 --> 00:46:21,560
yeah

1398
00:46:23,370 --> 00:46:26,460
[Applause]

1399
00:46:34,160 --> 00:46:36,240
you

