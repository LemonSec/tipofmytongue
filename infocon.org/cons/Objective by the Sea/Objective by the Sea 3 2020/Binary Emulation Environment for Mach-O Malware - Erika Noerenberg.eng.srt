1
00:00:06,399 --> 00:00:08,160
um so let's give a round of applause uh

2
00:00:08,160 --> 00:00:10,960
erica has spoken before and objectively

3
00:00:10,960 --> 00:00:13,200
so another

4
00:00:13,200 --> 00:00:16,239
obts oog

5
00:00:18,000 --> 00:00:19,119
again we're super stoked that we

6
00:00:19,119 --> 00:00:21,520
appreciate her flexibility giving us uh

7
00:00:21,520 --> 00:00:23,439
a talk so let's give erica a round of

8
00:00:23,439 --> 00:00:25,840
applause

9
00:00:27,439 --> 00:00:31,039
ah wow first try all right so um like

10
00:00:31,039 --> 00:00:32,880
patrick said obviously i'm not phil

11
00:00:32,880 --> 00:00:34,640
stokes um

12
00:00:34,640 --> 00:00:38,239
hi phil if you're watching from thailand

13
00:00:38,239 --> 00:00:39,520
uh

14
00:00:39,520 --> 00:00:41,440
i was uh

15
00:00:41,440 --> 00:00:44,719
last minute here at so hopefully we're

16
00:00:44,719 --> 00:00:46,079
running a little bit late so i'm not

17
00:00:46,079 --> 00:00:47,840
going to take up too much of your time

18
00:00:47,840 --> 00:00:49,280
hopefully go through this a little bit

19
00:00:49,280 --> 00:00:51,440
quickly a little bit lighter maybe than

20
00:00:51,440 --> 00:00:54,000
some of the talks that we've been seeing

21
00:00:54,000 --> 00:00:55,520
but basically i wanted to talk about

22
00:00:55,520 --> 00:00:58,640
binary emulation for threat analysis and

23
00:00:58,640 --> 00:01:00,480
hunting

24
00:01:00,480 --> 00:01:02,640
with a

25
00:01:02,640 --> 00:01:04,000
program that we've

26
00:01:04,000 --> 00:01:05,920
our company has

27
00:01:05,920 --> 00:01:08,880
created called bitty

28
00:01:08,880 --> 00:01:11,439
so first of all benny was written by my

29
00:01:11,439 --> 00:01:13,680
co-workers kyle and john who presented

30
00:01:13,680 --> 00:01:16,560
this back last year at defcon

31
00:01:16,560 --> 00:01:18,880
those the video and slides and

32
00:01:18,880 --> 00:01:20,479
everything

33
00:01:20,479 --> 00:01:22,720
are available online so you can see

34
00:01:22,720 --> 00:01:24,320
those if you want to watch the video

35
00:01:24,320 --> 00:01:25,920
this was the

36
00:01:25,920 --> 00:01:28,720
pe focus so windows pe focused

37
00:01:28,720 --> 00:01:30,400
emulation

38
00:01:30,400 --> 00:01:33,040
uh on our github page this is fully open

39
00:01:33,040 --> 00:01:35,600
source it is available

40
00:01:35,600 --> 00:01:37,920
and there are links to the abstract and

41
00:01:37,920 --> 00:01:39,439
the talk

42
00:01:39,439 --> 00:01:43,280
information on our github page

43
00:01:43,280 --> 00:01:44,960
so basically just short

44
00:01:44,960 --> 00:01:46,799
thing about me if you haven't met me

45
00:01:46,799 --> 00:01:48,560
i'm work with

46
00:01:48,560 --> 00:01:50,880
for vmware carbon black

47
00:01:50,880 --> 00:01:53,439
in our threat analysis unit

48
00:01:53,439 --> 00:01:55,280
with scott knight who presented

49
00:01:55,280 --> 00:01:56,479
yesterday

50
00:01:56,479 --> 00:01:57,920
doing malware analysis and reverse

51
00:01:57,920 --> 00:02:00,560
engineering mostly uh very recently

52
00:02:00,560 --> 00:02:02,719
focusing on more mac os endpoint

53
00:02:02,719 --> 00:02:06,000
security we're in the edr world so

54
00:02:06,000 --> 00:02:08,878
there's been more focus lately on trying

55
00:02:08,878 --> 00:02:09,758
to

56
00:02:09,758 --> 00:02:10,639
uh

57
00:02:10,639 --> 00:02:12,480
get better

58
00:02:12,480 --> 00:02:15,200
detection and prevention for mac systems

59
00:02:15,200 --> 00:02:16,239
because they

60
00:02:16,239 --> 00:02:18,400
historically if you're in that world

61
00:02:18,400 --> 00:02:20,400
have been kind of pushed aside because

62
00:02:20,400 --> 00:02:23,040
windows was a big focus but as thomas

63
00:02:23,040 --> 00:02:24,160
who um

64
00:02:24,160 --> 00:02:26,640
presented yesterday

65
00:02:26,640 --> 00:02:29,040
published um recently

66
00:02:29,040 --> 00:02:31,599
this was the first year or 2019 was

67
00:02:31,599 --> 00:02:33,120
actually the first year where mac

68
00:02:33,120 --> 00:02:35,920
threats actually surpassed windows so

69
00:02:35,920 --> 00:02:38,000
it's becoming a little bit more

70
00:02:38,000 --> 00:02:40,800
prioritized thankfully so people are

71
00:02:40,800 --> 00:02:43,280
more willing to put more effort into it

72
00:02:43,280 --> 00:02:44,640
i have a lot of years in the security

73
00:02:44,640 --> 00:02:46,560
industry i'm not going to

74
00:02:46,560 --> 00:02:48,000
go into that because i don't want to age

75
00:02:48,000 --> 00:02:49,200
myself

76
00:02:49,200 --> 00:02:50,400
but

77
00:02:50,400 --> 00:02:51,840
i was also pointed out that i didn't

78
00:02:51,840 --> 00:02:54,319
have any cat pictures so these are this

79
00:02:54,319 --> 00:02:57,040
is one of the few pictures where um

80
00:02:57,040 --> 00:02:58,080
hawkeye

81
00:02:58,080 --> 00:03:01,040
is not beating up ozzy they're actually

82
00:03:01,040 --> 00:03:02,879
looking like they like each other which

83
00:03:02,879 --> 00:03:05,200
is not true but

84
00:03:05,200 --> 00:03:07,040
we also have four chickens which are are

85
00:03:07,040 --> 00:03:08,879
not pictured but you can find me on

86
00:03:08,879 --> 00:03:09,760
twitter

87
00:03:09,760 --> 00:03:11,360
at gutter troll

88
00:03:11,360 --> 00:03:13,120
and if anybody actually knows the

89
00:03:13,120 --> 00:03:15,440
reference that that's from i'll be

90
00:03:15,440 --> 00:03:19,280
impressed and buy you a drink

91
00:03:19,280 --> 00:03:21,440
so why are we here um

92
00:03:21,440 --> 00:03:23,120
what is the point of all this why do we

93
00:03:23,120 --> 00:03:26,720
need binary emulation especially for mac

94
00:03:26,720 --> 00:03:30,000
so the problem is with static analysis

95
00:03:30,000 --> 00:03:31,360
you've got static analysis and you've

96
00:03:31,360 --> 00:03:33,599
got dynamic analysis right with static

97
00:03:33,599 --> 00:03:35,519
analysis it's very fast

98
00:03:35,519 --> 00:03:37,920
uh there's high coverage

99
00:03:37,920 --> 00:03:40,080
but if we've got any sort of

100
00:03:40,080 --> 00:03:42,080
obfuscation you know for like a regular

101
00:03:42,080 --> 00:03:43,920
program it's not such a big deal but

102
00:03:43,920 --> 00:03:47,760
when you are talking about oh my god

103
00:03:47,760 --> 00:03:50,159
taken away um

104
00:03:50,159 --> 00:03:52,319
if you're talking about malware you know

105
00:03:52,319 --> 00:03:55,760
malware is going to do what it can to

106
00:03:55,760 --> 00:03:58,080
do obfuscation anti-analysis any of

107
00:03:58,080 --> 00:03:59,760
these things so you're going to have

108
00:03:59,760 --> 00:04:01,120
probably

109
00:04:01,120 --> 00:04:02,159
any

110
00:04:02,159 --> 00:04:03,599
you know you're not going to be able to

111
00:04:03,599 --> 00:04:05,120
run strings or something like that

112
00:04:05,120 --> 00:04:06,560
you're not going to get any data out of

113
00:04:06,560 --> 00:04:08,720
it so we might be able to run static

114
00:04:08,720 --> 00:04:10,080
analysis

115
00:04:10,080 --> 00:04:12,159
tools but we may get nothing out of it

116
00:04:12,159 --> 00:04:14,239
from an ioc perspective on the other

117
00:04:14,239 --> 00:04:16,079
hand you've got dynamic analysis you can

118
00:04:16,079 --> 00:04:17,918
spin up a vm you can run the software

119
00:04:17,918 --> 00:04:19,680
you can get a lot of ifcs out of there

120
00:04:19,680 --> 00:04:20,478
you can

121
00:04:20,478 --> 00:04:22,720
you know have a pcap you can see what

122
00:04:22,720 --> 00:04:24,639
network you what it's doing on the

123
00:04:24,639 --> 00:04:26,160
network what it's downloading things

124
00:04:26,160 --> 00:04:27,120
like that

125
00:04:27,120 --> 00:04:29,440
but that's very costly time wise and

126
00:04:29,440 --> 00:04:31,199
resource wise because every time you

127
00:04:31,199 --> 00:04:32,720
have to spin up the vm or something like

128
00:04:32,720 --> 00:04:33,440
that

129
00:04:33,440 --> 00:04:34,560
it's going to take a lot of time and

130
00:04:34,560 --> 00:04:35,840
resources

131
00:04:35,840 --> 00:04:37,280
so

132
00:04:37,280 --> 00:04:39,040
how do we kind of

133
00:04:39,040 --> 00:04:40,639
marry these two together and get the

134
00:04:40,639 --> 00:04:42,880
best of both worlds obviously you're not

135
00:04:42,880 --> 00:04:45,199
going to have a 100

136
00:04:45,199 --> 00:04:46,960
perfect

137
00:04:46,960 --> 00:04:49,280
solution to this but if we can get a

138
00:04:49,280 --> 00:04:51,040
little bit of

139
00:04:51,040 --> 00:04:53,199
a little bit more out of the static side

140
00:04:53,199 --> 00:04:54,880
and a little bit more

141
00:04:54,880 --> 00:04:56,720
out of the dynamic side without having

142
00:04:56,720 --> 00:04:59,520
to use all the time resources

143
00:04:59,520 --> 00:05:01,440
we can at least if we can get a partial

144
00:05:01,440 --> 00:05:03,280
solution we can at least get maybe you

145
00:05:03,280 --> 00:05:05,039
know what urls is this thing reaching

146
00:05:05,039 --> 00:05:07,520
out to uh what files is the strapping

147
00:05:07,520 --> 00:05:10,320
can we get a copy of this file is there

148
00:05:10,320 --> 00:05:12,320
a set of strings that this is

149
00:05:12,320 --> 00:05:14,320
de-obfuscating can we get a list of

150
00:05:14,320 --> 00:05:16,800
those that maybe we can at least

151
00:05:16,800 --> 00:05:18,880
automate this

152
00:05:18,880 --> 00:05:21,919
push off these ioc and this this data so

153
00:05:21,919 --> 00:05:24,000
that we can have it in the future and

154
00:05:24,000 --> 00:05:25,919
hopefully ingest large numbers of these

155
00:05:25,919 --> 00:05:29,039
samples and be able to process this in

156
00:05:29,039 --> 00:05:31,120
an automated fashion without having to

157
00:05:31,120 --> 00:05:34,400
have so much manual

158
00:05:34,479 --> 00:05:36,160
so much manual work

159
00:05:36,160 --> 00:05:38,080
put on the analyst because we all have

160
00:05:38,080 --> 00:05:40,240
limited resources

161
00:05:40,240 --> 00:05:41,440
so we want to be able to do this at

162
00:05:41,440 --> 00:05:43,440
scale

163
00:05:43,440 --> 00:05:45,919
so how are we going to do this so uh

164
00:05:45,919 --> 00:05:47,520
kyle and john when they did this they

165
00:05:47,520 --> 00:05:49,280
decided they were going to use unicorn

166
00:05:49,280 --> 00:05:51,440
for emulation if you're familiar it's

167
00:05:51,440 --> 00:05:54,000
very popular emulation engine

168
00:05:54,000 --> 00:05:56,639
and also capstone which um

169
00:05:56,639 --> 00:05:58,720
we're actually not using anymore but

170
00:05:58,720 --> 00:06:01,919
ironically we the initial version of

171
00:06:01,919 --> 00:06:04,840
binny was using a fork of capstan called

172
00:06:04,840 --> 00:06:07,520
gapstone and we were actually using the

173
00:06:07,520 --> 00:06:09,520
fork that was

174
00:06:09,520 --> 00:06:12,000
developed by scott knight who spoke

175
00:06:12,000 --> 00:06:14,080
yesterday who was not even our employee

176
00:06:14,080 --> 00:06:16,080
at the time but we found this out later

177
00:06:16,080 --> 00:06:18,240
so it was kind of funny but we ended up

178
00:06:18,240 --> 00:06:20,080
going back to

179
00:06:20,080 --> 00:06:22,160
they reverted that and got rid of the

180
00:06:22,160 --> 00:06:24,400
dependency on capstone altogether

181
00:06:24,400 --> 00:06:26,319
with native go

182
00:06:26,319 --> 00:06:28,880
libraries

183
00:06:28,960 --> 00:06:30,319
so

184
00:06:30,319 --> 00:06:32,160
why did they even start this project in

185
00:06:32,160 --> 00:06:33,520
the first place because there's lots of

186
00:06:33,520 --> 00:06:36,400
existing pe emulators

187
00:06:36,400 --> 00:06:38,400
and here are just a few of them

188
00:06:38,400 --> 00:06:39,759
um

189
00:06:39,759 --> 00:06:42,160
well the problem is that

190
00:06:42,160 --> 00:06:45,600
there were things that from the pe side

191
00:06:45,600 --> 00:06:46,880
um

192
00:06:46,880 --> 00:06:48,160
there were things that were missing

193
00:06:48,160 --> 00:06:50,240
right so there was no

194
00:06:50,240 --> 00:06:52,560
uh none of these solutions provided an

195
00:06:52,560 --> 00:06:54,240
ability to configure

196
00:06:54,240 --> 00:06:57,280
system parameters like registry

197
00:06:57,280 --> 00:06:58,960
if the malware is looking for certain

198
00:06:58,960 --> 00:07:02,319
files on the system or registry um

199
00:07:02,319 --> 00:07:05,280
things to to be pre-existing

200
00:07:05,280 --> 00:07:07,599
none of these were were populated or

201
00:07:07,599 --> 00:07:11,360
none of these solutions provided that

202
00:07:11,360 --> 00:07:13,759
but that's from the pe side right so

203
00:07:13,759 --> 00:07:15,680
what functionality actually exists right

204
00:07:15,680 --> 00:07:18,479
now for mock-o well unicorn

205
00:07:18,479 --> 00:07:20,800
supports the architectures so it

206
00:07:20,800 --> 00:07:24,479
supports x86 and 64.

207
00:07:24,479 --> 00:07:26,800
and there is actually a couple of

208
00:07:26,800 --> 00:07:30,319
existing things for mockup files i don't

209
00:07:30,319 --> 00:07:31,759
i don't know how to pronounce this but

210
00:07:31,759 --> 00:07:32,479
the

211
00:07:32,479 --> 00:07:34,319
key lang or qiling

212
00:07:34,319 --> 00:07:36,400
project is implemented in python i

213
00:07:36,400 --> 00:07:38,319
believe it's actually written by

214
00:07:38,319 --> 00:07:41,280
the unicorn developers themselves

215
00:07:41,280 --> 00:07:43,599
but the the mako functionality even

216
00:07:43,599 --> 00:07:44,960
though it is there

217
00:07:44,960 --> 00:07:47,680
is pretty limited at this point

218
00:07:47,680 --> 00:07:49,759
but just recently probably a few months

219
00:07:49,759 --> 00:07:51,039
ago

220
00:07:51,039 --> 00:07:52,319
confined

221
00:07:52,319 --> 00:07:55,440
and the link will be here in the slides

222
00:07:55,440 --> 00:07:56,879
when they're released

223
00:07:56,879 --> 00:07:59,280
they demonstrated construction

224
00:07:59,280 --> 00:08:01,280
and dumping of stack strings so they had

225
00:08:01,280 --> 00:08:02,960
a sample of malware

226
00:08:02,960 --> 00:08:04,479
that was actually

227
00:08:04,479 --> 00:08:06,479
if you're familiar with stack strings

228
00:08:06,479 --> 00:08:08,639
basically instead of having a string

229
00:08:08,639 --> 00:08:11,120
that's just an ascii string in binary

230
00:08:11,120 --> 00:08:13,360
instead they push one

231
00:08:13,360 --> 00:08:16,160
character at a time onto the stack

232
00:08:16,160 --> 00:08:18,960
and construct them later in code so

233
00:08:18,960 --> 00:08:21,360
basically this malware was taking

234
00:08:21,360 --> 00:08:23,360
uh it had an

235
00:08:23,360 --> 00:08:26,319
embedded python script that would run

236
00:08:26,319 --> 00:08:28,720
but it was on this on the in the program

237
00:08:28,720 --> 00:08:30,639
as stat string so it was building it

238
00:08:30,639 --> 00:08:32,719
literally one character at a time so

239
00:08:32,719 --> 00:08:34,320
confined wrote this blog a very nice

240
00:08:34,320 --> 00:08:36,000
blog post up

241
00:08:36,000 --> 00:08:38,320
where they first went through with ldb

242
00:08:38,320 --> 00:08:41,039
and debugging to to pull out this

243
00:08:41,039 --> 00:08:42,958
functionality and dump out the the

244
00:08:42,958 --> 00:08:45,680
python script but then they also decided

245
00:08:45,680 --> 00:08:47,440
to take uniform and say well can we

246
00:08:47,440 --> 00:08:49,519
emulate this because

247
00:08:49,519 --> 00:08:50,959
when instead of

248
00:08:50,959 --> 00:08:53,440
on if you're going to use lldb you know

249
00:08:53,440 --> 00:08:56,000
you're on a mac system you're

250
00:08:56,000 --> 00:08:57,839
kind of constrained a little bit

251
00:08:57,839 --> 00:08:59,360
if you're using

252
00:08:59,360 --> 00:09:02,240
emulation you can actually do this from

253
00:09:02,240 --> 00:09:04,080
any system you know it's platform

254
00:09:04,080 --> 00:09:05,200
independent

255
00:09:05,200 --> 00:09:07,200
you can run it from a docker container

256
00:09:07,200 --> 00:09:09,360
that you can spin up so it gives you a

257
00:09:09,360 --> 00:09:12,880
lot more flexibility right

258
00:09:14,560 --> 00:09:17,040
and that uh the picture there is is from

259
00:09:17,040 --> 00:09:18,240
their blog

260
00:09:18,240 --> 00:09:20,640
one of the examples of their their dump

261
00:09:20,640 --> 00:09:21,680
their uh

262
00:09:21,680 --> 00:09:24,479
python script

263
00:09:24,640 --> 00:09:25,519
so

264
00:09:25,519 --> 00:09:27,839
what are we adding or extending from the

265
00:09:27,839 --> 00:09:30,399
work that already exists um the idea is

266
00:09:30,399 --> 00:09:33,040
that we wanted to be able to load up

267
00:09:33,040 --> 00:09:35,680
a mock-up file with its dependencies any

268
00:09:35,680 --> 00:09:38,720
sort of resources that are required

269
00:09:38,720 --> 00:09:39,760
and

270
00:09:39,760 --> 00:09:41,519
be able to emulate it

271
00:09:41,519 --> 00:09:44,800
in a platform independent way so if you

272
00:09:44,800 --> 00:09:46,959
are running malware

273
00:09:46,959 --> 00:09:49,120
you don't want to necessarily run

274
00:09:49,120 --> 00:09:50,720
run the risk if you've got maybe a

275
00:09:50,720 --> 00:09:52,399
junior analyst or something like that or

276
00:09:52,399 --> 00:09:53,920
an automated system

277
00:09:53,920 --> 00:09:55,360
you don't want to be running

278
00:09:55,360 --> 00:09:58,320
mac malware on a mac system necessarily

279
00:09:58,320 --> 00:10:01,839
and even with vm you know vm escapes are

280
00:10:01,839 --> 00:10:04,640
you know not really a thing anymore but

281
00:10:04,640 --> 00:10:05,920
you just don't want to take that risk

282
00:10:05,920 --> 00:10:07,680
necessarily and you want the flexibility

283
00:10:07,680 --> 00:10:09,519
of being able to emulate this from any

284
00:10:09,519 --> 00:10:10,560
system

285
00:10:10,560 --> 00:10:11,600
so

286
00:10:11,600 --> 00:10:13,600
we want to be able to load up

287
00:10:13,600 --> 00:10:16,399
this malware and actually

288
00:10:16,399 --> 00:10:17,360
run it

289
00:10:17,360 --> 00:10:20,160
without and mock the system that it's

290
00:10:20,160 --> 00:10:21,680
the environment that it's in that it

291
00:10:21,680 --> 00:10:23,680
expects

292
00:10:23,680 --> 00:10:26,079
without having to actually physically

293
00:10:26,079 --> 00:10:28,640
spin up the vm and and

294
00:10:28,640 --> 00:10:30,480
physically run through

295
00:10:30,480 --> 00:10:33,519
the loader for this right

296
00:10:33,519 --> 00:10:35,600
so we want a nice framework that will

297
00:10:35,600 --> 00:10:37,600
actually define the functions and api

298
00:10:37,600 --> 00:10:39,440
hooks that makes it easy enough that

299
00:10:39,440 --> 00:10:41,440
somebody can go in and say

300
00:10:41,440 --> 00:10:42,240
um

301
00:10:42,240 --> 00:10:43,680
you know maybe there's this custom

302
00:10:43,680 --> 00:10:46,640
function that this malware needs or is

303
00:10:46,640 --> 00:10:48,959
using

304
00:10:49,040 --> 00:10:50,560
we want to make it easy for the analyst

305
00:10:50,560 --> 00:10:52,480
to go into the code and say i need to

306
00:10:52,480 --> 00:10:55,120
add this extra api hook or

307
00:10:55,120 --> 00:10:58,160
i want to mock up this system because

308
00:10:58,160 --> 00:11:00,720
this system is actually needs a special

309
00:11:00,720 --> 00:11:03,200
configuration the environment for this

310
00:11:03,200 --> 00:11:06,240
malware it's expecting this um os

311
00:11:06,240 --> 00:11:07,360
version

312
00:11:07,360 --> 00:11:09,760
these files to be in place you know this

313
00:11:09,760 --> 00:11:11,760
configuration these resources to be

314
00:11:11,760 --> 00:11:13,360
available to it

315
00:11:13,360 --> 00:11:15,760
so we want an easy way to be able to

316
00:11:15,760 --> 00:11:18,079
instrument that

317
00:11:18,079 --> 00:11:18,880
and

318
00:11:18,880 --> 00:11:21,360
uh so the best way to do this that that

319
00:11:21,360 --> 00:11:23,200
we found was to make basically a

320
00:11:23,200 --> 00:11:24,959
configuration file where you can define

321
00:11:24,959 --> 00:11:27,360
pretty much anything that you want to

322
00:11:27,360 --> 00:11:28,480
and i'll show

323
00:11:28,480 --> 00:11:29,760
in

324
00:11:29,760 --> 00:11:33,200
a second kind of a deviation

325
00:11:33,200 --> 00:11:35,920
just to give you an example of this

326
00:11:35,920 --> 00:11:37,600
actually how we did it on the windows

327
00:11:37,600 --> 00:11:38,959
side

328
00:11:38,959 --> 00:11:41,279
so these configuration files

329
00:11:41,279 --> 00:11:42,800
basically give you the ability to make

330
00:11:42,800 --> 00:11:45,200
this mock environment

331
00:11:45,200 --> 00:11:46,880
very quickly on the fly so you can

332
00:11:46,880 --> 00:11:48,480
basically just put anything you want to

333
00:11:48,480 --> 00:11:50,320
in this configuration file

334
00:11:50,320 --> 00:11:51,600
and create

335
00:11:51,600 --> 00:11:54,000
a mock environment for this malware

336
00:11:54,000 --> 00:11:54,839
that

337
00:11:54,839 --> 00:11:58,480
um you can rapidly change

338
00:11:58,480 --> 00:12:00,320
and actually you could you could even

339
00:12:00,320 --> 00:12:01,920
script it to say

340
00:12:01,920 --> 00:12:03,519
this is you know this this file is

341
00:12:03,519 --> 00:12:05,680
looking for this i'm going to

342
00:12:05,680 --> 00:12:07,279
modify this configuration file and

343
00:12:07,279 --> 00:12:09,519
reload it and rerun this

344
00:12:09,519 --> 00:12:12,000
so here's an example this again this is

345
00:12:12,000 --> 00:12:13,839
an example from

346
00:12:13,839 --> 00:12:15,279
the windows side

347
00:12:15,279 --> 00:12:16,720
but

348
00:12:16,720 --> 00:12:18,959
you can tell it uh

349
00:12:18,959 --> 00:12:22,079
basically this os win1032 gives you the

350
00:12:22,079 --> 00:12:23,440
api set

351
00:12:23,440 --> 00:12:25,839
for all of the libraries that this

352
00:12:25,839 --> 00:12:29,519
the system or the malware is expecting

353
00:12:29,519 --> 00:12:32,000
codepage identifier you've got registry

354
00:12:32,000 --> 00:12:33,680
keys you can literally cut and paste

355
00:12:33,680 --> 00:12:35,519
these from the registry

356
00:12:35,519 --> 00:12:37,120
so this is on the windows side this is

357
00:12:37,120 --> 00:12:38,959
just an example of the the kind of

358
00:12:38,959 --> 00:12:42,160
environment that you can set up

359
00:12:43,760 --> 00:12:46,320
so why do we actually need this um i

360
00:12:46,320 --> 00:12:49,360
know from our we have a very robust

361
00:12:49,360 --> 00:12:52,160
a pretty robust uh automated system but

362
00:12:52,160 --> 00:12:53,839
we don't really have a lot of automated

363
00:12:53,839 --> 00:12:56,480
analysis and hunting capability on the

364
00:12:56,480 --> 00:12:58,320
mac side

365
00:12:58,320 --> 00:13:00,800
we have some automated detonation but

366
00:13:00,800 --> 00:13:01,680
you know

367
00:13:01,680 --> 00:13:03,200
if you've done any malware analysis on

368
00:13:03,200 --> 00:13:05,200
the mac side a lot of that is their

369
00:13:05,200 --> 00:13:07,680
packages their um

370
00:13:07,680 --> 00:13:09,760
dmgs that have to be mounted you have to

371
00:13:09,760 --> 00:13:11,279
run through an installer you might have

372
00:13:11,279 --> 00:13:12,720
to authenticate

373
00:13:12,720 --> 00:13:15,200
um it's a little bit more difficult than

374
00:13:15,200 --> 00:13:17,760
the windows side typically to automate

375
00:13:17,760 --> 00:13:19,680
this this kind of thing and it's very

376
00:13:19,680 --> 00:13:21,279
time intensive if you're spinning up a

377
00:13:21,279 --> 00:13:23,279
vm for every single sample

378
00:13:23,279 --> 00:13:24,959
you're not going to process you know

379
00:13:24,959 --> 00:13:28,079
millions of samples a day

380
00:13:28,240 --> 00:13:30,480
and so without that dynamic ability

381
00:13:30,480 --> 00:13:32,720
we're not we don't have a very good easy

382
00:13:32,720 --> 00:13:35,360
way of collecting actionable

383
00:13:35,360 --> 00:13:37,200
intelligence from these samples

384
00:13:37,200 --> 00:13:40,079
without having to having an analyst

385
00:13:40,079 --> 00:13:42,320
on the keyboard at the vm to actually

386
00:13:42,320 --> 00:13:43,839
physically do this

387
00:13:43,839 --> 00:13:46,320
and also because we can't process all of

388
00:13:46,320 --> 00:13:48,800
these samples constantly we have a heavy

389
00:13:48,800 --> 00:13:51,600
reliance on on external systems such as

390
00:13:51,600 --> 00:13:53,920
virus title for collection analysis

391
00:13:53,920 --> 00:13:55,760
hunting and things like that

392
00:13:55,760 --> 00:13:58,480
so if we have a big maco capability to

393
00:13:58,480 --> 00:14:00,639
be able to do this statically

394
00:14:00,639 --> 00:14:03,760
we can ingest a lot more samples gain at

395
00:14:03,760 --> 00:14:06,000
least partial dynamic iocs from these

396
00:14:06,000 --> 00:14:06,880
things

397
00:14:06,880 --> 00:14:09,600
from a very a much larger set

398
00:14:09,600 --> 00:14:13,360
of mac malware and that gives us um

399
00:14:13,360 --> 00:14:15,519
a database of things that you know we

400
00:14:15,519 --> 00:14:16,399
can

401
00:14:16,399 --> 00:14:18,480
come back to later and

402
00:14:18,480 --> 00:14:21,120
you know again it may not be 100

403
00:14:21,120 --> 00:14:22,079
coverage

404
00:14:22,079 --> 00:14:24,639
not every malware sample is going to run

405
00:14:24,639 --> 00:14:26,880
throughout emulation from start to

406
00:14:26,880 --> 00:14:27,839
finish

407
00:14:27,839 --> 00:14:30,560
but if you get it to run at least as far

408
00:14:30,560 --> 00:14:32,000
as

409
00:14:32,000 --> 00:14:33,920
let's say the first network call

410
00:14:33,920 --> 00:14:36,000
at least you've got you know what what

411
00:14:36,000 --> 00:14:38,720
did it load up um maybe it dropped some

412
00:14:38,720 --> 00:14:40,800
files maybe it reached out to the

413
00:14:40,800 --> 00:14:41,760
network

414
00:14:41,760 --> 00:14:43,600
you've got the url that it reached out

415
00:14:43,600 --> 00:14:46,880
to the name of the file

416
00:14:46,880 --> 00:14:48,399
you know you can still get a lot out of

417
00:14:48,399 --> 00:14:50,959
this again it's not a 100 solution but

418
00:14:50,959 --> 00:14:52,880
you're still getting actionable

419
00:14:52,880 --> 00:14:54,720
intelligence and building your own

420
00:14:54,720 --> 00:14:56,839
database for this

421
00:14:56,839 --> 00:15:00,240
stuff so what was the goal again

422
00:15:00,240 --> 00:15:02,079
all we wanted to do was

423
00:15:02,079 --> 00:15:05,120
parse load and emulate mocko just the

424
00:15:05,120 --> 00:15:07,760
minimum viable product here

425
00:15:07,760 --> 00:15:10,880
64-bit maco binary standard libraries

426
00:15:10,880 --> 00:15:13,040
let's just see if we can we can what we

427
00:15:13,040 --> 00:15:14,639
what can we get out of this with the

428
00:15:14,639 --> 00:15:16,240
minimal effort because

429
00:15:16,240 --> 00:15:19,680
we have very limited resources of course

430
00:15:19,680 --> 00:15:23,519
and so we've already had this robust

431
00:15:23,519 --> 00:15:25,199
release of

432
00:15:25,199 --> 00:15:26,639
bini for

433
00:15:26,639 --> 00:15:29,519
the pe side of things for windows

434
00:15:29,519 --> 00:15:30,639
so let's say

435
00:15:30,639 --> 00:15:32,880
we said you know let's develop the same

436
00:15:32,880 --> 00:15:35,040
architecture for mac

437
00:15:35,040 --> 00:15:37,360
a working skeleton framework that can be

438
00:15:37,360 --> 00:15:39,360
very easily extended

439
00:15:39,360 --> 00:15:42,000
and if an analyst wants to add some

440
00:15:42,000 --> 00:15:45,040
hooks in we have an easy framework there

441
00:15:45,040 --> 00:15:46,160
in place

442
00:15:46,160 --> 00:15:47,759
that anybody can go in they can pull

443
00:15:47,759 --> 00:15:48,880
this down

444
00:15:48,880 --> 00:15:49,759
and

445
00:15:49,759 --> 00:15:52,160
add what they needed to and be able to

446
00:15:52,160 --> 00:15:53,759
customize it very easily and the

447
00:15:53,759 --> 00:15:56,639
eventual goal was to release this

448
00:15:56,639 --> 00:15:58,959
vinnie

449
00:15:59,040 --> 00:16:01,680
for 64-bit maco initially

450
00:16:01,680 --> 00:16:04,240
and the public release on our github

451
00:16:04,240 --> 00:16:06,560
would be similar basic functionality as

452
00:16:06,560 --> 00:16:08,800
to what we have for the windows release

453
00:16:08,800 --> 00:16:11,360
that's out there already on our github

454
00:16:11,360 --> 00:16:13,680
page

455
00:16:14,560 --> 00:16:16,160
so

456
00:16:16,160 --> 00:16:17,360
the idea

457
00:16:17,360 --> 00:16:18,720
uh was

458
00:16:18,720 --> 00:16:20,320
we've got this existing framework right

459
00:16:20,320 --> 00:16:22,399
so this is there's always there are all

460
00:16:22,399 --> 00:16:24,320
these functions and helper functionality

461
00:16:24,320 --> 00:16:26,079
that's already built in there we'll just

462
00:16:26,079 --> 00:16:28,800
take this is written in go and there's

463
00:16:28,800 --> 00:16:30,720
this great debug

464
00:16:30,720 --> 00:16:33,600
library that has all of this built-in

465
00:16:33,600 --> 00:16:35,759
functionality for parsing mocco files

466
00:16:35,759 --> 00:16:37,040
this is great you know we get it for

467
00:16:37,040 --> 00:16:39,440
free right so it's gonna be super easy

468
00:16:39,440 --> 00:16:42,160
and just take the existing code that's

469
00:16:42,160 --> 00:16:44,240
for pe files we're gonna just basically

470
00:16:44,240 --> 00:16:45,600
match that

471
00:16:45,600 --> 00:16:48,399
do our unicorn emulation it's gonna be

472
00:16:48,399 --> 00:16:50,880
you know smooth sailing right

473
00:16:50,880 --> 00:16:52,639
just going to emulate the same thing we

474
00:16:52,639 --> 00:16:55,440
did with with benny for pe files

475
00:16:55,440 --> 00:16:58,000
and again this unicorn emulation has

476
00:16:58,000 --> 00:17:00,399
already proven like i said before we've

477
00:17:00,399 --> 00:17:03,199
got the the python implementation that's

478
00:17:03,199 --> 00:17:06,480
there and the confined blog that showed

479
00:17:06,480 --> 00:17:08,319
you know this is pretty straightforward

480
00:17:08,319 --> 00:17:09,679
right

481
00:17:09,679 --> 00:17:10,640
so

482
00:17:10,640 --> 00:17:13,199
yeah what are the results

483
00:17:13,199 --> 00:17:14,079
hey

484
00:17:14,079 --> 00:17:16,400
it builds right

485
00:17:16,400 --> 00:17:20,720
so it runs it builds we're good right

486
00:17:20,720 --> 00:17:22,079
yeah no

487
00:17:22,079 --> 00:17:22,880
so

488
00:17:22,880 --> 00:17:26,079
yeah so it turned out to not exactly be

489
00:17:26,079 --> 00:17:28,240
as easy and straightforward as i thought

490
00:17:28,240 --> 00:17:29,360
it was gonna be

491
00:17:29,360 --> 00:17:31,120
um

492
00:17:31,120 --> 00:17:32,640
yeah so

493
00:17:32,640 --> 00:17:33,919
basically

494
00:17:33,919 --> 00:17:36,000
backstep all right we need to start over

495
00:17:36,000 --> 00:17:38,160
here

496
00:17:38,160 --> 00:17:41,600
so basically um

497
00:17:41,679 --> 00:17:43,520
obviously you know there's no full-time

498
00:17:43,520 --> 00:17:44,840
resources

499
00:17:44,840 --> 00:17:48,080
um unfortunately we we had a dedicated

500
00:17:48,080 --> 00:17:49,360
thing and

501
00:17:49,360 --> 00:17:51,520
if anybody anybody lives in the malwa

502
00:17:51,520 --> 00:17:54,879
analysis and edr world

503
00:17:55,360 --> 00:17:56,320
you know

504
00:17:56,320 --> 00:17:58,400
emergencies happen right so things got

505
00:17:58,400 --> 00:18:01,440
pulled off so but um the biggest

506
00:18:01,440 --> 00:18:03,520
we do have functionality and the

507
00:18:03,520 --> 00:18:05,679
skeleton code is is partially functional

508
00:18:05,679 --> 00:18:08,480
it does run builds um but all the full

509
00:18:08,480 --> 00:18:10,799
emulation is not there yet but the

510
00:18:10,799 --> 00:18:13,200
biggest lesson for me was that um

511
00:18:13,200 --> 00:18:15,200
you know i write code i reverse code a

512
00:18:15,200 --> 00:18:16,080
lot

513
00:18:16,080 --> 00:18:18,000
writing an actual program fully

514
00:18:18,000 --> 00:18:18,960
functional

515
00:18:18,960 --> 00:18:21,039
program is very different and i haven't

516
00:18:21,039 --> 00:18:22,960
been a full-time developer

517
00:18:22,960 --> 00:18:24,320
i'm not going to give the years but

518
00:18:24,320 --> 00:18:25,840
let's just say it was

519
00:18:25,840 --> 00:18:28,720
back in ios 4

520
00:18:28,720 --> 00:18:31,280
so it's been a while

521
00:18:31,280 --> 00:18:32,160
so

522
00:18:32,160 --> 00:18:33,600
the fact that um

523
00:18:33,600 --> 00:18:34,480
some of the things that we were

524
00:18:34,480 --> 00:18:36,480
expecting to get for free from the

525
00:18:36,480 --> 00:18:38,480
intrinsic go libraries

526
00:18:38,480 --> 00:18:40,080
we did not have

527
00:18:40,080 --> 00:18:41,679
so

528
00:18:41,679 --> 00:18:44,160
made the development um incremental

529
00:18:44,160 --> 00:18:46,559
development a little bit difficult so

530
00:18:46,559 --> 00:18:49,200
basically the the status is we still

531
00:18:49,200 --> 00:18:51,200
have a lot of work to do but the

532
00:18:51,200 --> 00:18:53,679
skeleton functionality is there um

533
00:18:53,679 --> 00:18:55,840
definitely hoping to release this

534
00:18:55,840 --> 00:18:57,280
publicly soon

535
00:18:57,280 --> 00:18:58,080
and

536
00:18:58,080 --> 00:18:59,600
uh we'll definitely

537
00:18:59,600 --> 00:19:03,039
announce that when um when that happens

538
00:19:03,039 --> 00:19:05,360
but we do still have a lot of a lot of

539
00:19:05,360 --> 00:19:08,000
work to go

540
00:19:08,840 --> 00:19:12,240
um we're running on time here so

541
00:19:12,240 --> 00:19:14,160
basically i just want to say

542
00:19:14,160 --> 00:19:15,760
once you know from a threat hunting

543
00:19:15,760 --> 00:19:17,840
perspective once we have this kind of

544
00:19:17,840 --> 00:19:20,000
like partially dynamic data

545
00:19:20,000 --> 00:19:21,200
um

546
00:19:21,200 --> 00:19:23,280
there are a lot of uses for this right

547
00:19:23,280 --> 00:19:26,320
um again you're not it's not 100

548
00:19:26,320 --> 00:19:27,919
solution but

549
00:19:27,919 --> 00:19:29,840
you can

550
00:19:29,840 --> 00:19:31,679
you know if you've got packers or things

551
00:19:31,679 --> 00:19:33,039
like that you can actually if you can

552
00:19:33,039 --> 00:19:33,840
get

553
00:19:33,840 --> 00:19:36,000
at least a partial

554
00:19:36,000 --> 00:19:38,480
get the malware to partially run you can

555
00:19:38,480 --> 00:19:40,720
get a lot of um

556
00:19:40,720 --> 00:19:41,679
data

557
00:19:41,679 --> 00:19:44,240
dynamic data that you wouldn't have

558
00:19:44,240 --> 00:19:46,160
access to

559
00:19:46,160 --> 00:19:47,679
generally

560
00:19:47,679 --> 00:19:49,039
for

561
00:19:49,039 --> 00:19:51,520
a very a fraction of the cost of

562
00:19:51,520 --> 00:19:53,919
actually having to run these things

563
00:19:53,919 --> 00:19:54,799
fully

564
00:19:54,799 --> 00:19:56,880
um so you can use this for

565
00:19:56,880 --> 00:20:00,160
obviously hunting if you've got ics like

566
00:20:00,160 --> 00:20:04,720
urls or file names or things like that

567
00:20:04,840 --> 00:20:07,440
yara sample fingerprinting those kind of

568
00:20:07,440 --> 00:20:08,799
things so you can just you can imagine

569
00:20:08,799 --> 00:20:11,440
the possibilities

570
00:20:11,440 --> 00:20:13,440
uh so future you know obviously we want

571
00:20:13,440 --> 00:20:16,080
to complete the oops

572
00:20:16,080 --> 00:20:17,919
we want to complete the functionality um

573
00:20:17,919 --> 00:20:19,919
increase fidelity we're going to do the

574
00:20:19,919 --> 00:20:21,200
public release

575
00:20:21,200 --> 00:20:22,080
um

576
00:20:22,080 --> 00:20:24,000
my co-worker is actually currently

577
00:20:24,000 --> 00:20:26,720
working on a single step mode for the pe

578
00:20:26,720 --> 00:20:29,760
side that will obviously be ported

579
00:20:29,760 --> 00:20:31,440
we want to add elf

580
00:20:31,440 --> 00:20:32,960
file

581
00:20:32,960 --> 00:20:35,760
and extend mac os support and then add

582
00:20:35,760 --> 00:20:37,919
some more anti-emulation and

583
00:20:37,919 --> 00:20:40,240
anti-debugging and you know uh typical

584
00:20:40,240 --> 00:20:42,720
malware

585
00:20:42,960 --> 00:20:44,400
um

586
00:20:44,400 --> 00:20:46,640
mitigations

587
00:20:46,640 --> 00:20:48,960
but yeah i'll wrap that up because we're

588
00:20:48,960 --> 00:20:50,159
on time here

589
00:20:50,159 --> 00:20:52,960
and this is our github

590
00:20:52,960 --> 00:20:55,360
uh repository it's under carbon block

591
00:20:55,360 --> 00:20:57,919
vinnie we have a slack workspace

592
00:20:57,919 --> 00:21:00,480
and uh hit me up on twitter twitter

593
00:21:00,480 --> 00:21:02,799
if you have any questions

594
00:21:02,799 --> 00:21:04,000
and

595
00:21:04,000 --> 00:21:07,480
yeah thanks

596
00:21:16,480 --> 00:21:18,559
you

