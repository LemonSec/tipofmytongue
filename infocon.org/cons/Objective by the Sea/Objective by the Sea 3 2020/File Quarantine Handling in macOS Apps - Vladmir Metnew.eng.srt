1
00:00:06,319 --> 00:00:08,800
uh our next talk is by vladimir he's

2
00:00:08,800 --> 00:00:11,120
going to be talking about style

3
00:00:11,120 --> 00:00:13,920
team and very interesting bugs he has

4
00:00:13,920 --> 00:00:15,200
found that

5
00:00:15,200 --> 00:00:18,240
could be used to compromise

6
00:00:18,240 --> 00:00:22,159
so let's give a round of applause

7
00:00:24,240 --> 00:00:25,920
hi everyone

8
00:00:25,920 --> 00:00:28,240
today i'm going to talk about file

9
00:00:28,240 --> 00:00:30,960
currency in macos

10
00:00:30,960 --> 00:00:33,520
and this research is based

11
00:00:33,520 --> 00:00:35,200
this work is based on my research that

12
00:00:35,200 --> 00:00:38,719
was doing in early 2018.

13
00:00:38,719 --> 00:00:40,800
in details we are going to talk about

14
00:00:40,800 --> 00:00:43,760
macos file currency in general about all

15
00:00:43,760 --> 00:00:45,600
possible payloadable macros recognized

16
00:00:45,600 --> 00:00:47,920
files across handler files about

17
00:00:47,920 --> 00:00:50,239
currents and handling in macos apps

18
00:00:50,239 --> 00:00:52,079
especially in messengers

19
00:00:52,079 --> 00:00:55,920
and in cloud file solutions

20
00:00:56,079 --> 00:00:57,199
therma

21
00:00:57,199 --> 00:00:58,800
i work as a

22
00:00:58,800 --> 00:01:01,039
application security engineer programmer

23
00:01:01,039 --> 00:01:04,080
and i mostly focus on code analysis on

24
00:01:04,080 --> 00:01:08,479
mac os sometimes in browser environments

25
00:01:09,520 --> 00:01:11,600
so the first the first question is what

26
00:01:11,600 --> 00:01:13,520
is file currency why there is so much

27
00:01:13,520 --> 00:01:15,520
hype around gatekeeper

28
00:01:15,520 --> 00:01:18,560
uh i hope everyone

29
00:01:18,560 --> 00:01:20,080
see this

30
00:01:20,080 --> 00:01:23,040
i hope everyone see gatekeeper in action

31
00:01:23,040 --> 00:01:25,840
for example this dialogue is

32
00:01:25,840 --> 00:01:28,240
created by a gatekeeper mechanism by

33
00:01:28,240 --> 00:01:30,400
falco warranty mechanism would be better

34
00:01:30,400 --> 00:01:31,439
to say

35
00:01:31,439 --> 00:01:34,560
uh macos file quarantine its uh general

36
00:01:34,560 --> 00:01:36,479
file currency mechanism prevents the law

37
00:01:36,479 --> 00:01:38,640
of this content from be launched

38
00:01:38,640 --> 00:01:40,560
without the user's specific information

39
00:01:40,560 --> 00:01:42,560
like you need to click uh

40
00:01:42,560 --> 00:01:44,720
button to run the contents download it

41
00:01:44,720 --> 00:01:45,840
from the web

42
00:01:45,840 --> 00:01:48,720
uh gatekeeper mechanism and forces code

43
00:01:48,720 --> 00:01:50,880
signing requires downloaded applications

44
00:01:50,880 --> 00:01:53,360
before allowing them to run so

45
00:01:53,360 --> 00:01:54,320
uh

46
00:01:54,320 --> 00:01:56,560
actually gatekeeper mechanism relies on

47
00:01:56,560 --> 00:01:58,719
the commandable quarantine attribute

48
00:01:58,719 --> 00:02:00,799
it's extended file attribute

49
00:02:00,799 --> 00:02:03,520
that quarantine mechanism currently not

50
00:02:03,520 --> 00:02:05,759
git keeper assigns to the downloaded

51
00:02:05,759 --> 00:02:06,880
file

52
00:02:06,880 --> 00:02:08,639
there is a windows clone known as smart

53
00:02:08,639 --> 00:02:10,479
of the web and

54
00:02:10,479 --> 00:02:12,239
it's important to understand that this

55
00:02:12,239 --> 00:02:15,360
option is default for all apps and box

56
00:02:15,360 --> 00:02:17,280
applications

57
00:02:17,280 --> 00:02:19,520
so if you would like to discover more

58
00:02:19,520 --> 00:02:21,760
about file currency you can check uh

59
00:02:21,760 --> 00:02:24,000
john levi's work patrick wardle's

60
00:02:24,000 --> 00:02:27,040
research will be dc and so on

61
00:02:27,040 --> 00:02:28,720
it's also interesting thing that

62
00:02:28,720 --> 00:02:30,560
gatekeeper bypass is a neutral attack

63
00:02:30,560 --> 00:02:32,959
technique

64
00:02:32,959 --> 00:02:34,879
actually file quarantine

65
00:02:34,879 --> 00:02:38,319
can be split into two phases the stages

66
00:02:38,319 --> 00:02:40,400
the first stage is function loading and

67
00:02:40,400 --> 00:02:42,319
the second stage is actual file

68
00:02:42,319 --> 00:02:43,440
launching

69
00:02:43,440 --> 00:02:45,599
uh when the app downloads the file from

70
00:02:45,599 --> 00:02:48,080
a remote resource that can currently in

71
00:02:48,080 --> 00:02:51,840
the file directly by calling sator

72
00:02:51,840 --> 00:02:54,480
actually nobody uses this option

73
00:02:54,480 --> 00:02:56,239
there is

74
00:02:56,239 --> 00:02:59,760
an alternative you can um

75
00:02:59,760 --> 00:03:02,159
the app can just delegate the currency

76
00:03:02,159 --> 00:03:04,800
process to operating system it requires

77
00:03:04,800 --> 00:03:07,280
settings less file quarantine enabled

78
00:03:07,280 --> 00:03:09,120
property to false

79
00:03:09,120 --> 00:03:12,480
yes completely not obvious but it is

80
00:03:12,480 --> 00:03:15,519
okay the second stage is file launching

81
00:03:15,519 --> 00:03:17,920
uh when the user launches the file via

82
00:03:17,920 --> 00:03:20,959
launch services os checks command

83
00:03:20,959 --> 00:03:22,879
com apple currency in extended file

84
00:03:22,879 --> 00:03:24,640
attribute

85
00:03:24,640 --> 00:03:27,280
if enabled git keeper runs code sign in

86
00:03:27,280 --> 00:03:28,400
check

87
00:03:28,400 --> 00:03:31,200
authorization checks and small ways com

88
00:03:31,200 --> 00:03:32,959
depends on the user's gatekeeper

89
00:03:32,959 --> 00:03:34,879
settings macos might prevent the file

90
00:03:34,879 --> 00:03:36,879
from launching for example like

91
00:03:36,879 --> 00:03:39,280
in case of user only allows content from

92
00:03:39,280 --> 00:03:41,200
the app store

93
00:03:41,200 --> 00:03:44,080
and they are assigned by subparty

94
00:03:44,080 --> 00:03:47,840
developer the app won't be able to run

95
00:03:47,840 --> 00:03:50,080
um yeah

96
00:03:50,080 --> 00:03:52,080
so let's imagine for uh just for a

97
00:03:52,080 --> 00:03:54,879
minute there there was no guarantee

98
00:03:54,879 --> 00:03:56,080
um

99
00:03:56,080 --> 00:03:58,720
actually this this behavior results in

100
00:03:58,720 --> 00:04:00,080
anything downloaded file could be

101
00:04:00,080 --> 00:04:02,159
launched in a single open

102
00:04:02,159 --> 00:04:04,319
uh os wouldn't enforce codesign

103
00:04:04,319 --> 00:04:05,519
requirements

104
00:04:05,519 --> 00:04:08,000
for executables there would be no os

105
00:04:08,000 --> 00:04:10,080
protection against malware no checks for

106
00:04:10,080 --> 00:04:12,159
monitorization and the most interesting

107
00:04:12,159 --> 00:04:14,720
thing that in this case websites likely

108
00:04:14,720 --> 00:04:16,880
would be able to execute orbit records

109
00:04:16,880 --> 00:04:20,160
using the wingtail and shift uh update

110
00:04:20,160 --> 00:04:22,880
streak with every schemes in safari

111
00:04:22,880 --> 00:04:24,960
browser

112
00:04:24,960 --> 00:04:27,280
so since we're talking about file since

113
00:04:27,280 --> 00:04:29,759
important to understand to understand

114
00:04:29,759 --> 00:04:30,880
where

115
00:04:30,880 --> 00:04:33,040
which files we operate with which which

116
00:04:33,040 --> 00:04:35,520
files which options we have

117
00:04:35,520 --> 00:04:39,520
um we can split all files of possible

118
00:04:39,520 --> 00:04:41,520
macros files into categories the first

119
00:04:41,520 --> 00:04:45,199
category is files that can include

120
00:04:45,199 --> 00:04:48,320
other potentially humble harmful files

121
00:04:48,320 --> 00:04:50,880
those files are disk images file

122
00:04:50,880 --> 00:04:52,160
archives

123
00:04:52,160 --> 00:04:54,880
package installers

124
00:04:54,880 --> 00:04:57,520
you can um you can see a whole list of

125
00:04:57,520 --> 00:05:00,400
possible extensions in large services

126
00:05:00,400 --> 00:05:03,440
framework or in from a project anyway

127
00:05:03,440 --> 00:05:06,240
their their blacklist is good

128
00:05:06,240 --> 00:05:07,919
another um

129
00:05:07,919 --> 00:05:10,560
it's okay it was the first option uh

130
00:05:10,560 --> 00:05:12,720
another files

131
00:05:12,720 --> 00:05:15,600
um are directly harmful files and can

132
00:05:15,600 --> 00:05:17,360
cause some

133
00:05:17,360 --> 00:05:19,520
potential because some

134
00:05:19,520 --> 00:05:21,440
potential opening of these files can

135
00:05:21,440 --> 00:05:23,520
lead to some bad consequences uh the

136
00:05:23,520 --> 00:05:25,759
first file is that however there is a

137
00:05:25,759 --> 00:05:29,280
directory it's a bundle and to execute

138
00:05:29,280 --> 00:05:31,759
it needs plastics file permission on the

139
00:05:31,759 --> 00:05:34,479
main binary the bar hive is also an

140
00:05:34,479 --> 00:05:36,560
interesting thing uh

141
00:05:36,560 --> 00:05:38,560
it's still not patched uh and

142
00:05:38,560 --> 00:05:40,800
potentially a weber half file can cause

143
00:05:40,800 --> 00:05:43,360
your success and interior remote contact

144
00:05:43,360 --> 00:05:46,320
execution it's at least and it can be

145
00:05:46,320 --> 00:05:47,280
signed

146
00:05:47,280 --> 00:05:50,080
uh actions reaction workflow flow and so

147
00:05:50,080 --> 00:05:51,520
on

148
00:05:51,520 --> 00:05:54,320
those files are automatic reactions um

149
00:05:54,320 --> 00:05:56,880
and they needs plus they don't need

150
00:05:56,880 --> 00:05:58,639
plastics to launch however there is a

151
00:05:58,639 --> 00:06:01,199
problem when you open an optimizer file

152
00:06:01,199 --> 00:06:03,440
the automatic ui pop-up

153
00:06:03,440 --> 00:06:05,680
pops up and like

154
00:06:05,680 --> 00:06:07,600
it's not a silent process of code

155
00:06:07,600 --> 00:06:08,720
execution

156
00:06:08,720 --> 00:06:10,639
another option is tool command delete

157
00:06:10,639 --> 00:06:13,520
but all these files needs um

158
00:06:13,520 --> 00:06:16,240
also files needs plus x permission

159
00:06:16,240 --> 00:06:19,280
uh internet connect network connects

160
00:06:19,280 --> 00:06:21,919
config profile mobile config and so on

161
00:06:21,919 --> 00:06:23,919
all these files are configuration files

162
00:06:23,919 --> 00:06:26,880
that can be defined by settings

163
00:06:26,880 --> 00:06:28,479
however the user's information is

164
00:06:28,479 --> 00:06:29,520
required

165
00:06:29,520 --> 00:06:30,400
and

166
00:06:30,400 --> 00:06:33,120
the last file is terminal terminal

167
00:06:33,120 --> 00:06:35,120
file is actually a terminal app

168
00:06:35,120 --> 00:06:38,479
preferences file this file a allows run

169
00:06:38,479 --> 00:06:39,759
in codes

170
00:06:39,759 --> 00:06:42,319
uh it's actually an xml

171
00:06:42,319 --> 00:06:45,120
it's actually at least and this file can

172
00:06:45,120 --> 00:06:47,039
be signed

173
00:06:47,039 --> 00:06:49,280
it's the most interesting thing that

174
00:06:49,280 --> 00:06:51,039
yeah terminal can be signed but still

175
00:06:51,039 --> 00:06:53,440
terminal can execu where terminal you

176
00:06:53,440 --> 00:06:55,120
can execute some code

177
00:06:55,120 --> 00:06:58,479
uh basically most people store their uh

178
00:06:58,479 --> 00:07:00,000
terminal app

179
00:07:00,000 --> 00:07:02,800
configuration preferences like font size

180
00:07:02,800 --> 00:07:05,599
colors and so on internal files but you

181
00:07:05,599 --> 00:07:08,400
can set the command string option and

182
00:07:08,400 --> 00:07:11,759
add the startup code into a startup

183
00:07:11,759 --> 00:07:14,479
shellcode into this option

184
00:07:14,479 --> 00:07:16,639
but what's the most interesting is that

185
00:07:16,639 --> 00:07:18,880
um

186
00:07:19,039 --> 00:07:22,400
it's just an xml file that can in theory

187
00:07:22,400 --> 00:07:24,880
execute code this there's no standard

188
00:07:24,880 --> 00:07:27,599
because most people think that only apps

189
00:07:27,599 --> 00:07:29,759
or like binary

190
00:07:29,759 --> 00:07:32,479
executables can in theory execute codes

191
00:07:32,479 --> 00:07:34,240
on their machines that's not true

192
00:07:34,240 --> 00:07:38,080
uh terminals is an answer

193
00:07:38,080 --> 00:07:40,319
so let's start reviewing

194
00:07:40,319 --> 00:07:44,680
file currents and handling in messengers

195
00:07:45,280 --> 00:07:47,840
there are many problems with messengers

196
00:07:47,840 --> 00:07:50,639
the worst problem is that they have a

197
00:07:50,639 --> 00:07:53,199
very unsafe user experience

198
00:07:53,199 --> 00:07:55,039
many apps have an option open

199
00:07:55,039 --> 00:07:57,919
functionality that's implemented we in

200
00:07:57,919 --> 00:08:00,639
this workspace open and yeah it's real

201
00:08:00,639 --> 00:08:02,960
unsafe because it's directly allows the

202
00:08:02,960 --> 00:08:05,120
uh opens the file it doesn't allow the

203
00:08:05,120 --> 00:08:06,879
user to take a look at this file in

204
00:08:06,879 --> 00:08:08,319
finder and so on

205
00:08:08,319 --> 00:08:10,560
uh the second problem is that most apps

206
00:08:10,560 --> 00:08:12,080
don't have a

207
00:08:12,080 --> 00:08:13,280
file preview

208
00:08:13,280 --> 00:08:16,240
for non-image files in most cases

209
00:08:16,240 --> 00:08:18,639
internal can be a binary and by bus text

210
00:08:18,639 --> 00:08:20,000
previews

211
00:08:20,000 --> 00:08:21,440
unsafe

212
00:08:21,440 --> 00:08:22,879
again some

213
00:08:22,879 --> 00:08:25,120
applications some messengers opened and

214
00:08:25,120 --> 00:08:28,319
loaded files with uh download the file

215
00:08:28,319 --> 00:08:30,400
the download files without the use of

216
00:08:30,400 --> 00:08:33,120
consonants for example telegram and

217
00:08:33,120 --> 00:08:34,799
file name switching box here some

218
00:08:34,799 --> 00:08:37,839
messengers have files booking box

219
00:08:37,839 --> 00:08:42,080
the first victim of this problem is slug

220
00:08:42,080 --> 00:08:44,399
the problem is that we're just sending a

221
00:08:44,399 --> 00:08:46,000
terminal file to the victim we can

222
00:08:46,000 --> 00:08:48,480
potentially bypass the text preview via

223
00:08:48,480 --> 00:08:50,800
bin reversion of terminal

224
00:08:50,800 --> 00:08:52,880
once the victim opens it the malicious

225
00:08:52,880 --> 00:08:56,800
code executes on the machine

226
00:08:57,600 --> 00:09:00,800
here is the timeline the problem is that

227
00:09:00,800 --> 00:09:02,000
to fix

228
00:09:02,000 --> 00:09:04,000
this

229
00:09:04,000 --> 00:09:06,480
to fix this issue

230
00:09:06,480 --> 00:09:08,399
it took it looks like around

231
00:09:08,399 --> 00:09:09,839
like 20

232
00:09:09,839 --> 00:09:12,800
to more than 20 more than 10

233
00:09:12,800 --> 00:09:15,200
sorry more than 200 days to fix this

234
00:09:15,200 --> 00:09:18,399
issue and well it's it's abnormal

235
00:09:18,399 --> 00:09:19,760
uh the second

236
00:09:19,760 --> 00:09:22,560
victim of the stock is what's up however

237
00:09:22,560 --> 00:09:24,560
in case

238
00:09:24,560 --> 00:09:26,880
whatsapp have

239
00:09:26,880 --> 00:09:29,680
has a bit better ux

240
00:09:29,680 --> 00:09:31,600
so

241
00:09:31,600 --> 00:09:33,440
it's not it's not easy to trick the

242
00:09:33,440 --> 00:09:35,680
victim and open the file

243
00:09:35,680 --> 00:09:38,480
yeah here is the login

244
00:09:38,480 --> 00:09:40,800
open

245
00:09:41,120 --> 00:09:44,160
yeah called excuse me

246
00:09:44,399 --> 00:09:46,800
um this one that was reported to

247
00:09:46,800 --> 00:09:49,200
facebook team to what's up team uh but

248
00:09:49,200 --> 00:09:51,680
some team confirmed that

249
00:09:51,680 --> 00:09:53,680
they are going to fix this

250
00:09:53,680 --> 00:09:54,560
but

251
00:09:54,560 --> 00:09:56,399
they doesn't consider this issue to be a

252
00:09:56,399 --> 00:09:58,640
vulnerability just a platform specific

253
00:09:58,640 --> 00:10:01,040
behavior

254
00:10:01,120 --> 00:10:02,959
the most interesting thing is that the

255
00:10:02,959 --> 00:10:04,560
same version of whatsapp that was

256
00:10:04,560 --> 00:10:08,240
vulnerable to file warrants in issue

257
00:10:08,240 --> 00:10:10,240
was also vulnerable to

258
00:10:10,240 --> 00:10:12,240
filename spoofing issue

259
00:10:12,240 --> 00:10:14,399
so you can imagine the potential apart

260
00:10:14,399 --> 00:10:16,320
from sending

261
00:10:16,320 --> 00:10:18,800
from combining a file name spoofing bug

262
00:10:18,800 --> 00:10:22,160
with the lack of current time

263
00:10:22,240 --> 00:10:24,079
telegram

264
00:10:24,079 --> 00:10:26,720
okay so we are just sending terminal

265
00:10:26,720 --> 00:10:28,240
openings terminal

266
00:10:28,240 --> 00:10:30,480
heroes code execution

267
00:10:30,480 --> 00:10:31,440
um

268
00:10:31,440 --> 00:10:33,680
the issue was reported to telegram to

269
00:10:33,680 --> 00:10:36,560
the ground fix the issue by so on later

270
00:10:36,560 --> 00:10:38,480
i provided them with additional file

271
00:10:38,480 --> 00:10:39,600
extensions

272
00:10:39,600 --> 00:10:42,160
but sadly they enabled macos file

273
00:10:42,160 --> 00:10:43,360
current and

274
00:10:43,360 --> 00:10:46,480
after like three months or half a year

275
00:10:46,480 --> 00:10:48,399
since the original record

276
00:10:48,399 --> 00:10:50,079
the problem is that it's the same

277
00:10:50,079 --> 00:10:52,000
version on which i was testing the

278
00:10:52,000 --> 00:10:55,360
exploit um it also was uh it wasn't

279
00:10:55,360 --> 00:10:58,240
vulnerable but the better better version

280
00:10:58,240 --> 00:11:00,720
was vulnerable to

281
00:11:00,720 --> 00:11:02,880
it was downloading it was absolutely

282
00:11:02,880 --> 00:11:05,839
loaded and it has it had sorry it has an

283
00:11:05,839 --> 00:11:09,120
outside loaded feature and it results uh

284
00:11:09,120 --> 00:11:11,360
in uh zapped and loads files without the

285
00:11:11,360 --> 00:11:14,720
use an important thing is that the user

286
00:11:14,720 --> 00:11:18,320
when the user opens the file

287
00:11:18,800 --> 00:11:20,959
they they don't actually open the files

288
00:11:20,959 --> 00:11:22,800
they click on the icon

289
00:11:22,800 --> 00:11:24,480
it's important to understand it's

290
00:11:24,480 --> 00:11:27,839
important to understand this like

291
00:11:27,839 --> 00:11:29,920
click on the icon they don't open the

292
00:11:29,920 --> 00:11:31,360
file actually

293
00:11:31,360 --> 00:11:34,480
it's a different user experience

294
00:11:34,480 --> 00:11:36,000
skype

295
00:11:36,000 --> 00:11:38,640
again this problem was

296
00:11:38,640 --> 00:11:40,240
also in skype this issue was also

297
00:11:40,240 --> 00:11:41,200
inscribed

298
00:11:41,200 --> 00:11:42,560
download

299
00:11:42,560 --> 00:11:43,920
open

300
00:11:43,920 --> 00:11:46,399
terminal

301
00:11:46,399 --> 00:11:47,920
reported to skype

302
00:11:47,920 --> 00:11:48,720
but

303
00:11:48,720 --> 00:11:49,920
skype

304
00:11:49,920 --> 00:11:51,920
at that time microsoft didn't have a

305
00:11:51,920 --> 00:11:54,399
security mail so

306
00:11:54,399 --> 00:11:56,160
after one month i reported it to

307
00:11:56,160 --> 00:11:58,880
security mail to secure mail uh i must

308
00:11:58,880 --> 00:12:01,600
confirm the bug but since the bug was

309
00:12:01,600 --> 00:12:04,000
just silently fixed nowadays from

310
00:12:04,000 --> 00:12:06,800
ms no hall of fame

311
00:12:06,800 --> 00:12:09,519
i also reported this back to signal and

312
00:12:09,519 --> 00:12:12,720
uh after one month since uh i i have

313
00:12:12,720 --> 00:12:15,760
initially reported this issue signal uh

314
00:12:15,760 --> 00:12:18,560
one sigma developer said me like sorry

315
00:12:18,560 --> 00:12:20,560
not not quite sure i follow are you

316
00:12:20,560 --> 00:12:23,200
saying this this issue also applies to

317
00:12:23,200 --> 00:12:24,720
signal

318
00:12:24,720 --> 00:12:26,240
and

319
00:12:26,240 --> 00:12:28,240
it's scary that developers don't know

320
00:12:28,240 --> 00:12:30,959
that macos abouts different macos

321
00:12:30,959 --> 00:12:32,000
features

322
00:12:32,000 --> 00:12:33,040
like

323
00:12:33,040 --> 00:12:35,440
they can't imagine that the issue in

324
00:12:35,440 --> 00:12:38,320
skype or brave on slug can also affect

325
00:12:38,320 --> 00:12:40,720
their app

326
00:12:40,720 --> 00:12:42,639
also reported to survivor

327
00:12:42,639 --> 00:12:46,240
just for a joke and

328
00:12:46,480 --> 00:12:49,120
they said me that we can't we don't have

329
00:12:49,120 --> 00:12:53,200
a back boundary but we can

330
00:12:53,200 --> 00:12:54,639
we can

331
00:12:54,639 --> 00:12:56,399
add you twenty five dollars to your

332
00:12:56,399 --> 00:12:59,600
vibrate uh in response uh in twitter i

333
00:12:59,600 --> 00:13:01,839
said i posted a tweet that

334
00:13:01,839 --> 00:13:04,079
uh i would better chat with my friends

335
00:13:04,079 --> 00:13:08,320
over udp uh rather than viber and uh

336
00:13:08,320 --> 00:13:11,680
in a in a few days they reached to me

337
00:13:11,680 --> 00:13:14,399
but sadly their zero mail was marked as

338
00:13:14,399 --> 00:13:18,240
bomb in my uh in my gmail and after like

339
00:13:18,240 --> 00:13:20,160
a few days and it does that oh there is

340
00:13:20,160 --> 00:13:22,720
my spam folder and uh

341
00:13:22,720 --> 00:13:24,560
yeah they responded that sorry about

342
00:13:24,560 --> 00:13:26,240
this viper out such a good feature and

343
00:13:26,240 --> 00:13:27,839
so

344
00:13:27,839 --> 00:13:30,720
um actually i reported this back to

345
00:13:30,720 --> 00:13:32,480
many different apps to many different

346
00:13:32,480 --> 00:13:35,120
companies

347
00:13:35,120 --> 00:13:36,240
but

348
00:13:36,240 --> 00:13:40,240
in september 1819 i decided to disclose

349
00:13:40,240 --> 00:13:41,680
this technique

350
00:13:41,680 --> 00:13:42,480
and

351
00:13:42,480 --> 00:13:44,800
just after a few days and tests that

352
00:13:44,800 --> 00:13:46,880
many other countries decided to

353
00:13:46,880 --> 00:13:48,399
weaponize this technique

354
00:13:48,399 --> 00:13:50,800
technique and started reporting file

355
00:13:50,800 --> 00:13:52,560
currents in box to

356
00:13:52,560 --> 00:13:54,959
messengers to different apps to

357
00:13:54,959 --> 00:13:57,120
different file syncing apps and so on

358
00:13:57,120 --> 00:13:59,920
and it's really great

359
00:13:59,920 --> 00:14:01,360
summarizing

360
00:14:01,360 --> 00:14:03,760
this part of the talk

361
00:14:03,760 --> 00:14:06,079
um

362
00:14:06,240 --> 00:14:09,040
at least 15 different messengers were

363
00:14:09,040 --> 00:14:10,959
affected including such well-known

364
00:14:10,959 --> 00:14:13,519
messengers as telegram what's up slug

365
00:14:13,519 --> 00:14:16,720
skype signal wicker so on this bug

366
00:14:16,720 --> 00:14:18,880
actually is very uh is extremely

367
00:14:18,880 --> 00:14:21,600
powerful because you don't need

368
00:14:21,600 --> 00:14:23,680
you don't need any sophisticated tooling

369
00:14:23,680 --> 00:14:25,279
or like sophisticated exploit to

370
00:14:25,279 --> 00:14:26,880
compromise the victim you just need to

371
00:14:26,880 --> 00:14:30,639
send telegram a terminal file and hopes

372
00:14:30,639 --> 00:14:31,920
that the victim

373
00:14:31,920 --> 00:14:34,880
is going to open it

374
00:14:34,959 --> 00:14:36,959
most of the security teams treat secure

375
00:14:36,959 --> 00:14:38,320
file handling as the user's

376
00:14:38,320 --> 00:14:41,440
responsibility as it reads

377
00:14:41,440 --> 00:14:43,519
file currency as supply from specific

378
00:14:43,519 --> 00:14:44,560
behavior

379
00:14:44,560 --> 00:14:45,519
and

380
00:14:45,519 --> 00:14:47,920
it's up to you to answer this question

381
00:14:47,920 --> 00:14:50,160
this is the right approach

382
00:14:50,160 --> 00:14:53,120
most people are unaware of file

383
00:14:53,120 --> 00:14:55,760
quarantine completely

384
00:14:55,760 --> 00:14:57,600
apps especially messengers need to

385
00:14:57,600 --> 00:14:59,519
improve their use security because the

386
00:14:59,519 --> 00:15:02,160
fact that you open the file not by

387
00:15:02,160 --> 00:15:04,079
opening the file but by clicking the

388
00:15:04,079 --> 00:15:07,040
icon it's

389
00:15:07,040 --> 00:15:07,839
it's

390
00:15:07,839 --> 00:15:09,360
it's not obvious for example in a

391
00:15:09,360 --> 00:15:11,839
message when you open the file

392
00:15:11,839 --> 00:15:14,560
finder the finder popups not the file

393
00:15:14,560 --> 00:15:16,720
opens

394
00:15:16,720 --> 00:15:20,320
and yeah i haven't seen a single

395
00:15:20,320 --> 00:15:22,560
non-upstart app with enabled guarantee

396
00:15:22,560 --> 00:15:25,279
during this time of research

397
00:15:25,279 --> 00:15:27,440
so let's move to the file quarantine

398
00:15:27,440 --> 00:15:31,120
handling in cloud file storages

399
00:15:31,120 --> 00:15:34,560
uh affected cloud file storages um

400
00:15:34,560 --> 00:15:37,600
say still don't apply file quarantine

401
00:15:37,600 --> 00:15:39,839
except of key based dropbox google drive

402
00:15:39,839 --> 00:15:41,279
and drivers still don't apply for

403
00:15:41,279 --> 00:15:42,240
currency

404
00:15:42,240 --> 00:15:45,519
uh s of q4

405
00:15:45,519 --> 00:15:47,839
2018 on the web with current team

406
00:15:47,839 --> 00:15:49,199
enabled was

407
00:15:49,199 --> 00:15:51,040
yandex disk and it was completely not

408
00:15:51,040 --> 00:15:52,480
obvious for me

409
00:15:52,480 --> 00:15:55,120
on the key base fix the issue so far

410
00:15:55,120 --> 00:15:58,079
uh yes there is a way to exploit current

411
00:15:58,079 --> 00:16:00,320
teams there and there is a way for

412
00:16:00,320 --> 00:16:01,440
companies

413
00:16:01,440 --> 00:16:04,639
companies uh developers to fix this bug

414
00:16:04,639 --> 00:16:07,360
easily just by applying random currency

415
00:16:07,360 --> 00:16:12,399
attributes to most harmful known files

416
00:16:13,040 --> 00:16:14,560
so i decided to

417
00:16:14,560 --> 00:16:17,279
create a attack scenario generic attack

418
00:16:17,279 --> 00:16:18,560
scenario for

419
00:16:18,560 --> 00:16:23,040
most of cloud file storage apps and

420
00:16:23,040 --> 00:16:25,600
i decided to name it syncing large

421
00:16:25,600 --> 00:16:28,399
the idea is to is that to leverage file

422
00:16:28,399 --> 00:16:30,720
currency we need to deliver a file to

423
00:16:30,720 --> 00:16:32,160
the user's device

424
00:16:32,160 --> 00:16:34,560
uh later we can

425
00:16:34,560 --> 00:16:36,240
leverage the sync functionality of

426
00:16:36,240 --> 00:16:38,240
syncing apps and

427
00:16:38,240 --> 00:16:42,160
somehow launch delivered file

428
00:16:42,320 --> 00:16:44,399
uh the first interesting thing is that

429
00:16:44,399 --> 00:16:46,079
some apps

430
00:16:46,079 --> 00:16:48,000
allow you to sync

431
00:16:48,000 --> 00:16:49,040
a random

432
00:16:49,040 --> 00:16:52,000
arbitrary file with uh from your device

433
00:16:52,000 --> 00:16:55,839
to the victim's device without any

434
00:16:55,839 --> 00:16:57,360
any content

435
00:16:57,360 --> 00:16:59,279
for example it was a legitimate key

436
00:16:59,279 --> 00:17:00,639
based feature

437
00:17:00,639 --> 00:17:03,040
there is also an option to just

438
00:17:03,040 --> 00:17:06,160
do just directly share the file over

439
00:17:06,160 --> 00:17:07,439
google uh

440
00:17:07,439 --> 00:17:10,000
google drive for one drive with the with

441
00:17:10,000 --> 00:17:12,319
the user but yeah it requires too much

442
00:17:12,319 --> 00:17:13,359
um

443
00:17:13,359 --> 00:17:14,720
too much

444
00:17:14,720 --> 00:17:15,919
interaction

445
00:17:15,919 --> 00:17:18,480
um and i decided to come up with idea

446
00:17:18,480 --> 00:17:20,319
with uh

447
00:17:20,319 --> 00:17:22,720
of abusing

448
00:17:22,720 --> 00:17:25,520
web apps and allows uh

449
00:17:25,520 --> 00:17:28,640
permissions or access or for

450
00:17:28,640 --> 00:17:30,799
most cloud file storages cloud for

451
00:17:30,799 --> 00:17:34,400
storage apps uh the idea is that both

452
00:17:34,400 --> 00:17:37,039
dropbox and google drive have a folder

453
00:17:37,039 --> 00:17:39,840
integration onedrive has also a folder

454
00:17:39,840 --> 00:17:42,720
integration and many uh support apps

455
00:17:42,720 --> 00:17:45,039
requires permission uh cloud file

456
00:17:45,039 --> 00:17:47,919
converters file previewers graphic video

457
00:17:47,919 --> 00:17:49,919
addresses and so on

458
00:17:49,919 --> 00:17:51,919
actually attackers can trick the victim

459
00:17:51,919 --> 00:17:55,039
into authorizing a new involvement

460
00:17:55,039 --> 00:17:56,720
integration or leverage existing

461
00:17:56,720 --> 00:17:59,039
vulnerable integration to deliver a

462
00:17:59,039 --> 00:18:01,520
malicious payload to the user's device

463
00:18:01,520 --> 00:18:03,840
and in some sense it sounds ridiculous

464
00:18:03,840 --> 00:18:05,360
but when

465
00:18:05,360 --> 00:18:08,160
you just click an allow button and some

466
00:18:08,160 --> 00:18:09,600
random app

467
00:18:09,600 --> 00:18:10,880
can

468
00:18:10,880 --> 00:18:11,679
put

469
00:18:11,679 --> 00:18:14,400
arbitrary uncurrently files to your

470
00:18:14,400 --> 00:18:16,720
drive

471
00:18:16,799 --> 00:18:20,000
south it sounds completely not published

472
00:18:20,000 --> 00:18:23,039
uh launch stage

473
00:18:23,120 --> 00:18:25,360
if files have plus x permission after

474
00:18:25,360 --> 00:18:27,760
the sync you can potentially sink a

475
00:18:27,760 --> 00:18:29,280
bundle

476
00:18:29,280 --> 00:18:33,039
a folder and use windshield twig with

477
00:18:33,039 --> 00:18:36,720
wind till wind tail tree with abusing

478
00:18:36,720 --> 00:18:39,039
a protocol grease

479
00:18:39,039 --> 00:18:41,280
there is and also alternative way you

480
00:18:41,280 --> 00:18:42,960
can abuse

481
00:18:42,960 --> 00:18:46,960
url file that behaves similarly to open

482
00:18:46,960 --> 00:18:49,280
it's a shortcut file and

483
00:18:49,280 --> 00:18:53,440
it was recently fixed in macos catalina

484
00:18:53,520 --> 00:18:55,280
so let's write it

485
00:18:55,280 --> 00:18:58,640
we have a malicious terminal file

486
00:18:58,640 --> 00:19:00,960
we have as

487
00:19:00,960 --> 00:19:03,280
cloud file storage that doesn't

488
00:19:03,280 --> 00:19:05,760
see as it doesn't apply files in

489
00:19:05,760 --> 00:19:08,640
attributes uh we have a shortcut file

490
00:19:08,640 --> 00:19:11,840
that us to open any file on the device

491
00:19:11,840 --> 00:19:14,240
we are launch services happy

492
00:19:14,240 --> 00:19:16,080
and

493
00:19:16,080 --> 00:19:18,880
actually we can make a great like

494
00:19:18,880 --> 00:19:20,640
we can combine all this and it's great

495
00:19:20,640 --> 00:19:23,200
to make exploit for example in case of

496
00:19:23,200 --> 00:19:25,760
key base attackers can sync a terminal

497
00:19:25,760 --> 00:19:29,200
file with target user via kbf uh keypad

498
00:19:29,200 --> 00:19:31,919
key based file system without the user's

499
00:19:31,919 --> 00:19:35,039
content later um

500
00:19:35,039 --> 00:19:38,000
the attacker can send a malicious a url

501
00:19:38,000 --> 00:19:40,880
file to the victim or somehow open this

502
00:19:40,880 --> 00:19:42,880
url file onto the device via chrome

503
00:19:42,880 --> 00:19:46,320
extension or so and it would result in

504
00:19:46,320 --> 00:19:48,880
malicious code execution in coding in

505
00:19:48,880 --> 00:19:50,480
code execution

506
00:19:50,480 --> 00:19:52,640
i reposted this back to key base they

507
00:19:52,640 --> 00:19:55,679
fixed the first part of the bug in one

508
00:19:55,679 --> 00:19:58,000
day then they fixed the problem with

509
00:19:58,000 --> 00:20:01,600
kbfs in like two or three days

510
00:20:01,600 --> 00:20:03,520
um

511
00:20:03,520 --> 00:20:06,159
completely remediated the issue to base

512
00:20:06,159 --> 00:20:08,159
completely accommodated the issue in a

513
00:20:08,159 --> 00:20:10,720
few months and the most interesting

514
00:20:10,720 --> 00:20:12,720
thing is that i also reported this

515
00:20:12,720 --> 00:20:13,679
problem

516
00:20:13,679 --> 00:20:16,400
to other vendors i reported to onedrive

517
00:20:16,400 --> 00:20:18,880
and one drive responded that xanadu

518
00:20:18,880 --> 00:20:21,200
going to fix this issue because

519
00:20:21,200 --> 00:20:23,679
they received an exception from apple's

520
00:20:23,679 --> 00:20:25,679
head of macos security

521
00:20:25,679 --> 00:20:28,480
and it's an apple's position to not

522
00:20:28,480 --> 00:20:31,200
to not set file parenting attributes on

523
00:20:31,200 --> 00:20:33,600
sync files

524
00:20:33,600 --> 00:20:37,280
uh the most strange here is that uh

525
00:20:37,280 --> 00:20:39,840
it's their product and for some reason

526
00:20:39,840 --> 00:20:43,520
they asked apple macos uh head of macos

527
00:20:43,520 --> 00:20:46,880
security and received this exception

528
00:20:46,880 --> 00:20:48,400
um

529
00:20:48,400 --> 00:20:50,320
okay

530
00:20:50,320 --> 00:20:54,159
i reported also this problem to do books

531
00:20:54,159 --> 00:20:55,679
two books just said that they're not

532
00:20:55,679 --> 00:20:58,480
going to fix them this issue i reported

533
00:20:58,480 --> 00:21:00,720
it again they said that then

534
00:21:00,720 --> 00:21:02,799
then is going to fix this issue

535
00:21:02,799 --> 00:21:03,040
um

536
00:21:03,040 --> 00:21:04,320
[Music]

537
00:21:04,320 --> 00:21:06,080
i guess that

538
00:21:06,080 --> 00:21:08,000
i decided to disclose the record but

539
00:21:08,000 --> 00:21:11,039
robux didn't agree um

540
00:21:11,039 --> 00:21:13,360
this idea is that i guess it's only my

541
00:21:13,360 --> 00:21:14,159
guess

542
00:21:14,159 --> 00:21:16,559
that drewbox team is aware of this

543
00:21:16,559 --> 00:21:18,320
problem but they're not going to fix

544
00:21:18,320 --> 00:21:20,640
this because of possible ux issues for

545
00:21:20,640 --> 00:21:23,520
their users that's also responded

546
00:21:23,520 --> 00:21:24,880
when drive also said that then it's

547
00:21:24,880 --> 00:21:27,120
going to fix this because it's

548
00:21:27,120 --> 00:21:30,159
results in a budget in a bunch of ux

549
00:21:30,159 --> 00:21:32,240
issues

550
00:21:32,240 --> 00:21:34,960
however since the url was have been

551
00:21:34,960 --> 00:21:37,760
fixed has been fixed in magos catalina

552
00:21:37,760 --> 00:21:40,799
uh i've come up with a file file that's

553
00:21:40,799 --> 00:21:44,400
actually behave similar similarly to a

554
00:21:44,400 --> 00:21:45,919
url file

555
00:21:45,919 --> 00:21:49,039
and yeah it still allows to open local

556
00:21:49,039 --> 00:21:50,320
executables

557
00:21:50,320 --> 00:21:51,600
um

558
00:21:51,600 --> 00:21:53,919
however the idea is that

559
00:21:53,919 --> 00:21:55,200
yeah it's allowed to open local

560
00:21:55,200 --> 00:21:56,880
executables but

561
00:21:56,880 --> 00:22:00,080
uh if currency mechanism

562
00:22:00,080 --> 00:22:01,039
were

563
00:22:01,039 --> 00:22:03,039
if currency mechanism would work as

564
00:22:03,039 --> 00:22:04,400
expected

565
00:22:04,400 --> 00:22:07,600
while both url and file lock wouldn't

566
00:22:07,600 --> 00:22:09,520
have any

567
00:22:09,520 --> 00:22:13,520
like any value for attackers

568
00:22:13,520 --> 00:22:17,200
actually a file log file is a 10 years

569
00:22:17,200 --> 00:22:18,000
day

570
00:22:18,000 --> 00:22:21,600
from variability because it was found in

571
00:22:21,600 --> 00:22:24,600
2009

572
00:22:25,440 --> 00:22:27,760
and actually apple

573
00:22:27,760 --> 00:22:29,760
it was known that uh fire look is

574
00:22:29,760 --> 00:22:31,840
dangerous for macos devices

575
00:22:31,840 --> 00:22:34,159
without enables gatekeeper at that time

576
00:22:34,159 --> 00:22:36,400
the gatekeeper was still in development

577
00:22:36,400 --> 00:22:37,360
uh

578
00:22:37,360 --> 00:22:39,600
the question is

579
00:22:39,600 --> 00:22:41,280
at that uh

580
00:22:41,280 --> 00:22:45,600
at one point of the time so um there was

581
00:22:45,600 --> 00:22:46,400
a

582
00:22:46,400 --> 00:22:49,280
firework file working for the file and

583
00:22:49,280 --> 00:22:52,559
um from another site macos had a head of

584
00:22:52,559 --> 00:22:54,960
macos security in apple decided to give

585
00:22:54,960 --> 00:22:57,440
an exception to onedrive

586
00:22:57,440 --> 00:22:59,840
that raises the questions

587
00:22:59,840 --> 00:23:02,720
actually um

588
00:23:02,720 --> 00:23:05,919
file file uh file file log files are

589
00:23:05,919 --> 00:23:08,960
handy handy because

590
00:23:08,960 --> 00:23:11,679
they are not blacklisted and in some

591
00:23:11,679 --> 00:23:14,080
browsers it's possible to achieve code

592
00:23:14,080 --> 00:23:16,640
execution we are extensions yeah it's a

593
00:23:16,640 --> 00:23:18,559
low risk issue but

594
00:23:18,559 --> 00:23:20,960
i found this issue in firefox and chrome

595
00:23:20,960 --> 00:23:23,200
extensions are in

596
00:23:23,200 --> 00:23:24,880
chrome and so on

597
00:23:24,880 --> 00:23:26,320
um

598
00:23:26,320 --> 00:23:28,240
my personal opinion regarding this

599
00:23:28,240 --> 00:23:30,000
research

600
00:23:30,000 --> 00:23:32,480
mark of the web bypass on windows is

601
00:23:32,480 --> 00:23:34,960
always consumer it's considered severe

602
00:23:34,960 --> 00:23:39,039
severe bug uh even if windows have

603
00:23:39,039 --> 00:23:42,080
windows has around more than 100 or

604
00:23:42,080 --> 00:23:44,240
potentially harmful files

605
00:23:44,240 --> 00:23:45,919
um i

606
00:23:45,919 --> 00:23:47,840
i don't understand why it's the same bug

607
00:23:47,840 --> 00:23:50,640
on macos celebrates only as a violation

608
00:23:50,640 --> 00:23:52,960
of best practices and it's not just

609
00:23:52,960 --> 00:23:54,640
vulnerability

610
00:23:54,640 --> 00:23:57,440
it's actually absolutely why so many

611
00:23:57,440 --> 00:24:01,039
well-known apps like whatsapp

612
00:24:01,039 --> 00:24:03,840
telegram and so on they are affected by

613
00:24:03,840 --> 00:24:06,480
such a simple issue

614
00:24:06,480 --> 00:24:09,279
again i think that uh apple must educate

615
00:24:09,279 --> 00:24:11,200
developers on security fund have file

616
00:24:11,200 --> 00:24:15,360
handling and your security like uh apple

617
00:24:15,360 --> 00:24:19,039
imessage imessage doesn't open files it

618
00:24:19,039 --> 00:24:21,679
show examine finder and it's a good

619
00:24:21,679 --> 00:24:23,200
example of

620
00:24:23,200 --> 00:24:24,880
good use security

621
00:24:24,880 --> 00:24:25,679
um

622
00:24:25,679 --> 00:24:27,200
another thing is that developers

623
00:24:27,200 --> 00:24:28,400
probably

624
00:24:28,400 --> 00:24:30,320
must be responsible for secure file

625
00:24:30,320 --> 00:24:32,400
handling in their app and they need to

626
00:24:32,400 --> 00:24:34,880
know the

627
00:24:34,880 --> 00:24:36,960
details uh

628
00:24:36,960 --> 00:24:39,279
platform-specific behaviors of the

629
00:24:39,279 --> 00:24:41,679
operating system

630
00:24:41,679 --> 00:24:43,360
another thing is that

631
00:24:43,360 --> 00:24:46,559
nice ux yeah nice fix it's always always

632
00:24:46,559 --> 00:24:49,120
leads in always results in more users

633
00:24:49,120 --> 00:24:51,679
and more revenue but we need to keep in

634
00:24:51,679 --> 00:24:53,520
mind that security is more important

635
00:24:53,520 --> 00:24:55,760
than user experience

636
00:24:55,760 --> 00:24:58,400
um outcomes of this research popular

637
00:24:58,400 --> 00:25:00,960
macros apps now enforce file currency

638
00:25:00,960 --> 00:25:04,159
more than 15-20 years

639
00:25:04,159 --> 00:25:07,120
the technical has become

640
00:25:07,120 --> 00:25:09,520
has become popular among

641
00:25:09,520 --> 00:25:10,880
back hunters

642
00:25:10,880 --> 00:25:14,440
the research describes

643
00:25:14,480 --> 00:25:16,640
the research describes attack vectors

644
00:25:16,640 --> 00:25:17,600
that

645
00:25:17,600 --> 00:25:20,799
can be abused by very unsophisticated

646
00:25:20,799 --> 00:25:21,840
actors

647
00:25:21,840 --> 00:25:24,799
attackers and yes research you will do

648
00:25:24,799 --> 00:25:26,159
interesting

649
00:25:26,159 --> 00:25:28,080
two interesting macro features url and

650
00:25:28,080 --> 00:25:29,679
file files

651
00:25:29,679 --> 00:25:31,679
uh still there are some some open

652
00:25:31,679 --> 00:25:33,039
versions

653
00:25:33,039 --> 00:25:35,440
who should be responsible for skill file

654
00:25:35,440 --> 00:25:38,320
file handling apple or developers or

655
00:25:38,320 --> 00:25:39,919
users

656
00:25:39,919 --> 00:25:41,279
another question is there a way to

657
00:25:41,279 --> 00:25:44,400
completely fix all file uh file

658
00:25:44,400 --> 00:25:46,960
currency issues uh issues related to

659
00:25:46,960 --> 00:25:49,039
file quarantine um

660
00:25:49,039 --> 00:25:52,240
is it an unique case in apple ecosystem

661
00:25:52,240 --> 00:25:53,679
probably not

662
00:25:53,679 --> 00:25:56,559
there are similar cases um

663
00:25:56,559 --> 00:25:59,039
another thing that's really uh about

664
00:25:59,039 --> 00:26:01,120
which umbrella awards is is it normal to

665
00:26:01,120 --> 00:26:02,720
make exceptions

666
00:26:02,720 --> 00:26:05,039
for some components like microsoft

667
00:26:05,039 --> 00:26:07,919
related to entitlements and probably

668
00:26:07,919 --> 00:26:10,559
another thing that developers

669
00:26:10,559 --> 00:26:12,159
might forget is that

670
00:26:12,159 --> 00:26:14,080
they need to educate their users better

671
00:26:14,080 --> 00:26:15,760
on security

672
00:26:15,760 --> 00:26:17,120
uh

673
00:26:17,120 --> 00:26:19,919
some kind of postmodern uh postponing

674
00:26:19,919 --> 00:26:22,080
postponing the disclosure was a bad idea

675
00:26:22,080 --> 00:26:25,120
it would be better if i have released

676
00:26:25,120 --> 00:26:26,720
the slides earlier

677
00:26:26,720 --> 00:26:28,880
uh i'm glad to see that

678
00:26:28,880 --> 00:26:31,200
many back hunters decided to weaponize

679
00:26:31,200 --> 00:26:32,320
this technique

680
00:26:32,320 --> 00:26:35,679
and i wish and patched apps can somehow

681
00:26:35,679 --> 00:26:38,799
just remediate on issues

682
00:26:38,799 --> 00:26:41,200
and a general advice to all securities

683
00:26:41,200 --> 00:26:43,360
researchers is to

684
00:26:43,360 --> 00:26:45,919
search for misconfigurations for example

685
00:26:45,919 --> 00:26:48,159
essential glass is a good example

686
00:26:48,159 --> 00:26:48,960
where

687
00:26:48,960 --> 00:26:52,559
a very similar situation exists

688
00:26:52,559 --> 00:26:54,960
thank you

689
00:26:58,000 --> 00:27:00,480
any questions

690
00:27:00,480 --> 00:27:01,840
did any of the

691
00:27:01,840 --> 00:27:05,959
companies you reported the bugs

692
00:27:06,000 --> 00:27:08,000
most of companies have back boundary

693
00:27:08,000 --> 00:27:10,000
problems

694
00:27:10,000 --> 00:27:10,880
but

695
00:27:10,880 --> 00:27:13,520
for example a mess have has a bouncy

696
00:27:13,520 --> 00:27:15,919
program only for windows pro windows

697
00:27:15,919 --> 00:27:20,399
products and not for macos products so i

698
00:27:20,399 --> 00:27:21,919
don't think they

699
00:27:21,919 --> 00:27:23,600
really like

700
00:27:23,600 --> 00:27:26,320
i think they care about windows users

701
00:27:26,320 --> 00:27:29,520
most and only later about macos users uh

702
00:27:29,520 --> 00:27:31,679
most of uh companies have back

703
00:27:31,679 --> 00:27:34,720
boundaries and yeah

704
00:27:34,720 --> 00:27:36,559
it was a fun experience reporting box to

705
00:27:36,559 --> 00:27:38,799
them

706
00:27:42,720 --> 00:27:46,279
where's my 20.

707
00:27:48,399 --> 00:27:50,639
uh

708
00:27:50,880 --> 00:27:52,320
i

709
00:27:52,320 --> 00:27:54,080
i didn't get them but

710
00:27:54,080 --> 00:27:55,679
i expected

711
00:27:55,679 --> 00:27:57,520
i expected just to thank

712
00:27:57,520 --> 00:28:00,320
like i asked viper do you have any

713
00:28:00,320 --> 00:28:02,480
backbones or you can just add my name as

714
00:28:02,480 --> 00:28:05,279
whole fame and so on they responded with

715
00:28:05,279 --> 00:28:06,640
25

716
00:28:06,640 --> 00:28:08,640
to wipe her out credits and it was like

717
00:28:08,640 --> 00:28:11,679
it was very ridiculous

718
00:28:13,760 --> 00:28:15,679
yeah it seemed like you know you

719
00:28:15,679 --> 00:28:17,919
communicate with so many uh companies

720
00:28:17,919 --> 00:28:19,279
and it's almost like maybe they didn't

721
00:28:19,279 --> 00:28:20,159
know how to get your

722
00:28:20,159 --> 00:28:22,399
vulnerability but i see it as caught up

723
00:28:22,399 --> 00:28:24,640
i mean very generically

724
00:28:24,640 --> 00:28:26,720
validation but it's in the workflow

725
00:28:26,720 --> 00:28:29,720
anyways

726
00:28:31,590 --> 00:28:34,659
[Music]

727
00:28:40,240 --> 00:28:42,960
yeah

728
00:28:42,960 --> 00:28:46,159
um probably this issue should be fixed

729
00:28:46,159 --> 00:28:48,720
by apple must be fixed by apple but from

730
00:28:48,720 --> 00:28:50,559
another site apple

731
00:28:50,559 --> 00:28:53,760
um all apps and box applications apply

732
00:28:53,760 --> 00:28:56,240
file currency in attributes and

733
00:28:56,240 --> 00:28:58,240
it's actually very easy just by setting

734
00:28:58,240 --> 00:29:01,039
one value one property in info place to

735
00:29:01,039 --> 00:29:03,440
add while warranty into the app to

736
00:29:03,440 --> 00:29:06,320
develop that uh from another site it's

737
00:29:06,320 --> 00:29:08,000
uh

738
00:29:08,000 --> 00:29:10,080
to be hon to be honest i see all the

739
00:29:10,080 --> 00:29:11,679
situation as

740
00:29:11,679 --> 00:29:13,919
borrowing of

741
00:29:13,919 --> 00:29:16,080
as

742
00:29:16,080 --> 00:29:18,159
developers and companies need to educate

743
00:29:18,159 --> 00:29:22,559
their users and in this case we see that

744
00:29:22,640 --> 00:29:24,240
companies want

745
00:29:24,240 --> 00:29:27,520
a better ux uh developers wants to like

746
00:29:27,520 --> 00:29:30,240
to make to ship the product faster and

747
00:29:30,240 --> 00:29:33,520
it results in educational depth

748
00:29:33,520 --> 00:29:35,840
uh they don't educate their users on

749
00:29:35,840 --> 00:29:38,240
secure file handling and when

750
00:29:38,240 --> 00:29:40,399
a message is actually a is a great

751
00:29:40,399 --> 00:29:43,200
example because yeah they show the files

752
00:29:43,200 --> 00:29:45,360
they have

753
00:29:45,360 --> 00:29:48,080
a message shows a file and finder a

754
00:29:48,080 --> 00:29:52,320
message uh has a preview and for me it

755
00:29:52,320 --> 00:29:53,440
seems like

756
00:29:53,440 --> 00:29:55,440
apple can potentially

757
00:29:55,440 --> 00:29:57,760
make some guides or educate their

758
00:29:57,760 --> 00:29:59,679
developers better on this feature from

759
00:29:59,679 --> 00:30:01,600
another site uh

760
00:30:01,600 --> 00:30:04,399
apple introduced interesting

761
00:30:04,399 --> 00:30:05,279
and

762
00:30:05,279 --> 00:30:07,520
it seems like this issue will be

763
00:30:07,520 --> 00:30:09,840
remediated first but yeah it's generic

764
00:30:09,840 --> 00:30:12,159
problem and many people

765
00:30:12,159 --> 00:30:14,880
say that oh it seems it seems like an

766
00:30:14,880 --> 00:30:18,240
apple bug but no apple has

767
00:30:18,240 --> 00:30:19,760
already gave

768
00:30:19,760 --> 00:30:22,480
all required materials to developers and

769
00:30:22,480 --> 00:30:24,320
users

770
00:30:24,320 --> 00:30:25,760
so it's actually it's actually a very

771
00:30:25,760 --> 00:30:29,039
complex issue you need to understand who

772
00:30:29,039 --> 00:30:31,840
uh who actually need to act users

773
00:30:31,840 --> 00:30:34,480
developers companies and so on

774
00:30:34,480 --> 00:30:37,799
okay thanks

