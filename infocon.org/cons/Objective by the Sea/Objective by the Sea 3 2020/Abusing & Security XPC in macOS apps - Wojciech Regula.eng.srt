1
00:00:15,759 --> 00:00:18,000
all right

2
00:00:18,080 --> 00:00:20,160
so hello today i'm going to talk about

3
00:00:20,160 --> 00:00:23,359
abusing and securing xpc in mac os

4
00:00:23,359 --> 00:00:24,800
applications

5
00:00:24,800 --> 00:00:28,240
so my name is wojtek ragua

6
00:00:28,240 --> 00:00:30,880
and i'm a senior i.t security consultant

7
00:00:30,880 --> 00:00:34,000
uh employed at securing uh securing as

8
00:00:34,000 --> 00:00:36,800
an application security company

9
00:00:36,800 --> 00:00:39,920
so in my work i am mostly focused on the

10
00:00:39,920 --> 00:00:42,000
ios applications

11
00:00:42,000 --> 00:00:43,440
pen tests

12
00:00:43,440 --> 00:00:46,399
you may also know me from ios security

13
00:00:46,399 --> 00:00:47,360
suit

14
00:00:47,360 --> 00:00:51,039
an open source tool mentioned to

15
00:00:51,039 --> 00:00:53,920
improve your ios devices security

16
00:00:53,920 --> 00:00:56,640
and after my professional work i run a

17
00:00:56,640 --> 00:01:00,620
blog with my name that block

18
00:01:00,620 --> 00:01:02,079
[Music]

19
00:01:02,079 --> 00:01:03,600
so

20
00:01:03,600 --> 00:01:05,600
i made a research on

21
00:01:05,600 --> 00:01:08,960
xpc in macos applications and it turned

22
00:01:08,960 --> 00:01:10,560
out that

23
00:01:10,560 --> 00:01:14,159
the xpc related vulnerabilities are

24
00:01:14,159 --> 00:01:16,080
everywhere and as

25
00:01:16,080 --> 00:01:18,479
even as scott knight

26
00:01:18,479 --> 00:01:20,240
mentioned it was

27
00:01:20,240 --> 00:01:21,280
yeah

28
00:01:21,280 --> 00:01:23,360
it was even in the

29
00:01:23,360 --> 00:01:25,920
marcus catalina in beta in one of its

30
00:01:25,920 --> 00:01:29,200
services in security extension framework

31
00:01:29,200 --> 00:01:31,360
um

32
00:01:31,360 --> 00:01:33,360
security endpoint endpoint security

33
00:01:33,360 --> 00:01:36,079
frame right oh no not sure

34
00:01:36,079 --> 00:01:38,240
and so as you can see on the slide many

35
00:01:38,240 --> 00:01:41,200
our retrognites logos

36
00:01:41,200 --> 00:01:44,640
and the plan for today's presentation is

37
00:01:44,640 --> 00:01:46,960
at first i'm going to quickly introduce

38
00:01:46,960 --> 00:01:48,799
you to xbc

39
00:01:48,799 --> 00:01:51,360
uh then we are start we are going to

40
00:01:51,360 --> 00:01:54,560
start building a secure xpc helper

41
00:01:54,560 --> 00:01:56,719
then we'll try to exploit the previous

42
00:01:56,719 --> 00:02:00,799
step then we'll try to harden the

43
00:02:00,799 --> 00:02:03,520
that feature and if the bypass is still

44
00:02:03,520 --> 00:02:06,320
available we'll go back to the beginning

45
00:02:06,320 --> 00:02:07,200
and

46
00:02:07,200 --> 00:02:09,199
at the end if the

47
00:02:09,199 --> 00:02:13,360
loop is passed we'll go to the summary

48
00:02:13,360 --> 00:02:16,560
so the xpc as a fundamental

49
00:02:16,560 --> 00:02:18,560
inter-process mechanism

50
00:02:18,560 --> 00:02:20,480
in apple environments

51
00:02:20,480 --> 00:02:23,599
it is built on top of mac messages and

52
00:02:23,599 --> 00:02:26,800
mac messages can be compared to

53
00:02:26,800 --> 00:02:29,599
unique spice because you can have

54
00:02:29,599 --> 00:02:32,480
multiple senders and only one

55
00:02:32,480 --> 00:02:35,360
receiver it's also a dictionary based

56
00:02:35,360 --> 00:02:37,280
communication

57
00:02:37,280 --> 00:02:39,519
and

58
00:02:39,920 --> 00:02:42,720
it allows you to

59
00:02:42,959 --> 00:02:45,280
serialize the objective c and swift

60
00:02:45,280 --> 00:02:48,000
objects through the xpc

61
00:02:48,000 --> 00:02:48,879
but

62
00:02:48,879 --> 00:02:51,519
let's see at the code the code of the

63
00:02:51,519 --> 00:02:54,000
helper that we are going to build

64
00:02:54,000 --> 00:02:56,959
at first we are creating the nsxpc

65
00:02:56,959 --> 00:02:58,080
listener

66
00:02:58,080 --> 00:02:58,879
uh

67
00:02:58,879 --> 00:03:01,120
with the max service name that is a

68
00:03:01,120 --> 00:03:04,159
globally recognized name uh after

69
00:03:04,159 --> 00:03:05,840
creating it

70
00:03:05,840 --> 00:03:07,760
then we are going to

71
00:03:07,760 --> 00:03:10,640
create a delegate which is a piece of

72
00:03:10,640 --> 00:03:12,239
code that will be

73
00:03:12,239 --> 00:03:14,400
responsible for handling the incoming

74
00:03:14,400 --> 00:03:16,800
xpc connections

75
00:03:16,800 --> 00:03:18,800
then we of course resume the

76
00:03:18,800 --> 00:03:22,239
listener and start the main loop

77
00:03:22,239 --> 00:03:24,959
from the client perspective

78
00:03:24,959 --> 00:03:27,680
at first of course we need to create an

79
00:03:27,680 --> 00:03:31,599
nsxp xpc connection object and connect

80
00:03:31,599 --> 00:03:32,400
to the

81
00:03:32,400 --> 00:03:34,959
mac service name

82
00:03:34,959 --> 00:03:39,200
then we set the remote object interface

83
00:03:39,200 --> 00:03:40,959
which the object on the other side on

84
00:03:40,959 --> 00:03:45,040
the server side has to confirm to

85
00:03:45,040 --> 00:03:46,640
then of course resume again the

86
00:03:46,640 --> 00:03:49,519
connection set the remote object proxy

87
00:03:49,519 --> 00:03:51,200
with the error handler

88
00:03:51,200 --> 00:03:55,120
and we uh ask the xpc server to perform

89
00:03:55,120 --> 00:03:56,000
our

90
00:03:56,000 --> 00:03:58,000
privileged

91
00:03:58,000 --> 00:03:59,280
action

92
00:03:59,280 --> 00:04:02,159
but in this talk we're gonna focus on a

93
00:04:02,159 --> 00:04:04,720
specific architecture when unprivileged

94
00:04:04,720 --> 00:04:07,360
applications or typical application uh

95
00:04:07,360 --> 00:04:10,080
tries to connect uh to the privileged

96
00:04:10,080 --> 00:04:12,480
xbc server

97
00:04:12,480 --> 00:04:14,480
and by saying privileged and

98
00:04:14,480 --> 00:04:16,478
unprivileged i mean

99
00:04:16,478 --> 00:04:18,160
unprivileged is running with standard

100
00:04:18,160 --> 00:04:22,720
user permissions with uid equal to 501

101
00:04:22,720 --> 00:04:24,800
and of course the server runs with the

102
00:04:24,800 --> 00:04:26,560
root permissions

103
00:04:26,560 --> 00:04:29,280
by the way uh the windows below are from

104
00:04:29,280 --> 00:04:31,360
the privileged helper that we are gonna

105
00:04:31,360 --> 00:04:32,800
build

106
00:04:32,800 --> 00:04:33,759
um

107
00:04:33,759 --> 00:04:36,560
and the locations of the xbc servers um

108
00:04:36,560 --> 00:04:39,040
they are stored in the library in

109
00:04:39,040 --> 00:04:40,960
privileged helpers tools and launch

110
00:04:40,960 --> 00:04:43,120
demon subdirectories

111
00:04:43,120 --> 00:04:45,759
there will be mostly the privileged ones

112
00:04:45,759 --> 00:04:46,880
and

113
00:04:46,880 --> 00:04:49,040
the launch agents

114
00:04:49,040 --> 00:04:50,880
which will store the

115
00:04:50,880 --> 00:04:54,080
standard users xbc servers you can of

116
00:04:54,080 --> 00:04:56,800
course go to this directories listed or

117
00:04:56,800 --> 00:04:58,800
use knock knock to see

118
00:04:58,800 --> 00:05:00,080
that if

119
00:05:00,080 --> 00:05:02,000
any of this privileged servers are

120
00:05:02,000 --> 00:05:04,720
running on your macs

121
00:05:04,720 --> 00:05:07,840
but it's only a 25 minute talk so we are

122
00:05:07,840 --> 00:05:10,639
gonna focus on exploitation and the

123
00:05:10,639 --> 00:05:12,880
first category of bugs that i've

124
00:05:12,880 --> 00:05:16,000
preferred is no cloud client validation

125
00:05:16,000 --> 00:05:16,960
at all

126
00:05:16,960 --> 00:05:19,919
so our malicious application

127
00:05:19,919 --> 00:05:21,600
asks the server to perform the

128
00:05:21,600 --> 00:05:23,680
privileged action and the server says

129
00:05:23,680 --> 00:05:26,400
all right i will delete for you

130
00:05:26,400 --> 00:05:29,120
without any verification

131
00:05:29,120 --> 00:05:31,039
and that was the case

132
00:05:31,039 --> 00:05:33,680
in key base there was a lead bug found

133
00:05:33,680 --> 00:05:35,600
by adam chester

134
00:05:35,600 --> 00:05:39,039
and the key base is xpc server exposed

135
00:05:39,039 --> 00:05:40,720
following methods

136
00:05:40,720 --> 00:05:43,520
uh the most interesting one for me is

137
00:05:43,520 --> 00:05:44,400
here

138
00:05:44,400 --> 00:05:45,919
move and

139
00:05:45,919 --> 00:05:48,320
text install but let's focus and move

140
00:05:48,320 --> 00:05:50,880
and as you remember the server is

141
00:05:50,880 --> 00:05:53,440
running with root permissions so

142
00:05:53,440 --> 00:05:54,320
this

143
00:05:54,320 --> 00:05:56,319
exploitation of this bug

144
00:05:56,319 --> 00:05:58,479
led indirectly to local privilege

145
00:05:58,479 --> 00:06:01,919
escalation since any application could

146
00:06:01,919 --> 00:06:04,240
move any file to any root accessible

147
00:06:04,240 --> 00:06:06,240
directory so you could for example

148
00:06:06,240 --> 00:06:09,520
override the ssh keys or just place your

149
00:06:09,520 --> 00:06:10,319
own

150
00:06:10,319 --> 00:06:12,319
xpc

151
00:06:12,319 --> 00:06:14,560
server that will you know perform any

152
00:06:14,560 --> 00:06:18,000
action that you would send to it

153
00:06:18,319 --> 00:06:19,520
and the

154
00:06:19,520 --> 00:06:20,960
fix for that

155
00:06:20,960 --> 00:06:22,960
of course the server now checks for the

156
00:06:22,960 --> 00:06:24,800
code requirement

157
00:06:24,800 --> 00:06:28,639
in our privileged helper we are adding a

158
00:06:28,639 --> 00:06:29,440
new

159
00:06:29,440 --> 00:06:33,440
if with a validation logic so uh in the

160
00:06:33,440 --> 00:06:35,600
listener should accept new connection

161
00:06:35,600 --> 00:06:37,680
method uh we are performing the

162
00:06:37,680 --> 00:06:41,039
validation if the client is

163
00:06:41,039 --> 00:06:42,880
validatedly

164
00:06:42,880 --> 00:06:45,120
verified we return true

165
00:06:45,120 --> 00:06:47,120
in other case return false and

166
00:06:47,120 --> 00:06:49,599
invalidate the xpc

167
00:06:49,599 --> 00:06:51,360
connection

168
00:06:51,360 --> 00:06:53,280
but when we are talking about

169
00:06:53,280 --> 00:06:55,280
validation of the process

170
00:06:55,280 --> 00:06:57,520
we also in our industry think about

171
00:06:57,520 --> 00:07:00,639
cryptography and since it's cryptography

172
00:07:00,639 --> 00:07:03,599
a lot of bad things may happen here

173
00:07:03,599 --> 00:07:06,240
so the second category of bugs is poor

174
00:07:06,240 --> 00:07:08,319
signature check

175
00:07:08,319 --> 00:07:10,639
and the examples of that poor signature

176
00:07:10,639 --> 00:07:12,800
checks may be changing only bundle

177
00:07:12,800 --> 00:07:16,000
identifiers verifying only static code

178
00:07:16,000 --> 00:07:17,599
uh using this

179
00:07:17,599 --> 00:07:20,560
k6 cs basic validate only flag which

180
00:07:20,560 --> 00:07:22,880
will only make sure if the application

181
00:07:22,880 --> 00:07:25,039
uh has been signed with a certificate

182
00:07:25,039 --> 00:07:26,720
but not even if the certificate is

183
00:07:26,720 --> 00:07:29,520
trusted or it's not tools

184
00:07:29,520 --> 00:07:31,120
stack requirements string that i will

185
00:07:31,120 --> 00:07:32,800
show you on the next slide and many many

186
00:07:32,800 --> 00:07:34,090
more

187
00:07:34,090 --> 00:07:35,680
[Music]

188
00:07:35,680 --> 00:07:36,560
and

189
00:07:36,560 --> 00:07:38,560
here i wanted to mention that

190
00:07:38,560 --> 00:07:40,880
i of course reported all the findings

191
00:07:40,880 --> 00:07:42,479
that i will be showing you in the next

192
00:07:42,479 --> 00:07:45,120
slides and the vendors were informed and

193
00:07:45,120 --> 00:07:47,680
i asked if they are okay with uh

194
00:07:47,680 --> 00:07:49,759
disclosing it so it's a responsible

195
00:07:49,759 --> 00:07:51,520
disclosure

196
00:07:51,520 --> 00:07:55,840
but let's come back to the topic um in

197
00:07:55,840 --> 00:07:59,440
secure marketing max country there was

198
00:07:59,440 --> 00:08:01,919
also a problem with xpc

199
00:08:01,919 --> 00:08:04,160
as you can see the highlighted the sec

200
00:08:04,160 --> 00:08:06,080
requirement string

201
00:08:06,080 --> 00:08:08,720
it only checks if the

202
00:08:08,720 --> 00:08:11,360
bundle identifier is equal to com secure

203
00:08:11,360 --> 00:08:14,240
mark max country and in the

204
00:08:14,240 --> 00:08:16,319
signing certificate that was a field

205
00:08:16,319 --> 00:08:18,479
with the team id equal

206
00:08:18,479 --> 00:08:20,400
equal that is equal to

207
00:08:20,400 --> 00:08:22,560
that string but this is a question for

208
00:08:22,560 --> 00:08:23,440
you

209
00:08:23,440 --> 00:08:27,560
what was wrong with that string

210
00:08:31,970 --> 00:08:34,320
[Music]

211
00:08:34,320 --> 00:08:36,399
yes indeed it does not checking the

212
00:08:36,399 --> 00:08:39,839
whole chain so you can just use open ssl

213
00:08:39,839 --> 00:08:42,000
create such a certificate with the team

214
00:08:42,000 --> 00:08:44,880
id and you know sign with the bundle id

215
00:08:44,880 --> 00:08:47,440
and this requirement when will be passed

216
00:08:47,440 --> 00:08:50,399
in this case yeah you're right

217
00:08:50,399 --> 00:08:52,000
and then

218
00:08:52,000 --> 00:08:54,780
max country exposed following methods

219
00:08:54,780 --> 00:08:56,080
[Music]

220
00:08:56,080 --> 00:08:58,240
the interesting one is of course is for

221
00:08:58,240 --> 00:09:01,440
example the console scan so i wanted uh

222
00:09:01,440 --> 00:09:03,839
here to show you that exploiting the xbc

223
00:09:03,839 --> 00:09:06,160
servers doesn't always mean local

224
00:09:06,160 --> 00:09:09,120
privilege escalation it may also have a

225
00:09:09,120 --> 00:09:11,760
business impact on your applications so

226
00:09:11,760 --> 00:09:14,160
for example here of course

227
00:09:14,160 --> 00:09:15,519
it would

228
00:09:15,519 --> 00:09:17,760
break them extends free by canceling

229
00:09:17,760 --> 00:09:20,160
their scans

230
00:09:20,160 --> 00:09:23,440
so in our privileged helper we are now

231
00:09:23,440 --> 00:09:25,600
adding the prefix

232
00:09:25,600 --> 00:09:28,399
anchor apple generic uh which will make

233
00:09:28,399 --> 00:09:30,720
sure if the whole chain is trusted as

234
00:09:30,720 --> 00:09:32,480
you said

235
00:09:32,480 --> 00:09:34,399
all right

236
00:09:34,399 --> 00:09:37,600
the third category box is using process

237
00:09:37,600 --> 00:09:40,240
identifier to get the code objects

238
00:09:40,240 --> 00:09:42,560
and here i wanted to thank

239
00:09:42,560 --> 00:09:45,360
samuel gross which is not present as you

240
00:09:45,360 --> 00:09:46,560
can see now

241
00:09:46,560 --> 00:09:48,720
and i am beer

242
00:09:48,720 --> 00:09:52,000
for sharing their research on it

243
00:09:52,000 --> 00:09:54,080
and saying that showing that the process

244
00:09:54,080 --> 00:09:56,640
identifiers are not really reliable to

245
00:09:56,640 --> 00:09:58,560
create the code objects

246
00:09:58,560 --> 00:10:02,399
but to easily imagine that situation

247
00:10:02,399 --> 00:10:04,399
let's see on that example we have

248
00:10:04,399 --> 00:10:06,320
analysis application that asks the

249
00:10:06,320 --> 00:10:08,480
server though to perform the privileged

250
00:10:08,480 --> 00:10:09,839
action

251
00:10:09,839 --> 00:10:12,399
and now we know that we have to somehow

252
00:10:12,399 --> 00:10:13,920
validate the

253
00:10:13,920 --> 00:10:15,839
client

254
00:10:15,839 --> 00:10:16,640
so

255
00:10:16,640 --> 00:10:18,000
the connection of course will be

256
00:10:18,000 --> 00:10:20,320
invalidated because the signature

257
00:10:20,320 --> 00:10:21,519
doesn't match

258
00:10:21,519 --> 00:10:24,959
and let's look at the general validation

259
00:10:24,959 --> 00:10:27,279
algorithm so in the first point we are

260
00:10:27,279 --> 00:10:29,839
getting process identifier of the client

261
00:10:29,839 --> 00:10:30,560
and

262
00:10:30,560 --> 00:10:32,800
then we create the code object based on

263
00:10:32,800 --> 00:10:34,959
that process identifier we perform the

264
00:10:34,959 --> 00:10:36,560
signature check which will of course

265
00:10:36,560 --> 00:10:38,480
fail because the signature doesn't match

266
00:10:38,480 --> 00:10:39,760
for the

267
00:10:39,760 --> 00:10:41,760
malicious application and we're

268
00:10:41,760 --> 00:10:45,440
invalidating the xpc connection

269
00:10:45,440 --> 00:10:49,519
but what if the mars application uh

270
00:10:49,519 --> 00:10:52,000
forks a lot of time have a lot of had a

271
00:10:52,000 --> 00:10:54,959
lot children that have other process

272
00:10:54,959 --> 00:10:57,680
identifiers and in the same time all the

273
00:10:57,680 --> 00:10:59,600
children

274
00:10:59,600 --> 00:11:02,480
sends the privileged action uh request

275
00:11:02,480 --> 00:11:05,519
to the xbc server it be it won't be able

276
00:11:05,519 --> 00:11:07,680
to uh

277
00:11:07,680 --> 00:11:09,920
to process all the uh connecting

278
00:11:09,920 --> 00:11:11,440
messages in

279
00:11:11,440 --> 00:11:12,959
the same time so

280
00:11:12,959 --> 00:11:15,360
it will be placed into

281
00:11:15,360 --> 00:11:18,240
xbcq

282
00:11:18,480 --> 00:11:20,959
and algorithm now looks as follows the

283
00:11:20,959 --> 00:11:25,279
xbc server gets the popstar

284
00:11:25,360 --> 00:11:27,279
the connections from the queue with with

285
00:11:27,279 --> 00:11:30,160
the privileged action request and

286
00:11:30,160 --> 00:11:32,480
performs of course the general

287
00:11:32,480 --> 00:11:36,720
validation on it but in the same time

288
00:11:36,720 --> 00:11:39,680
the malicious application may do

289
00:11:39,680 --> 00:11:41,120
following trick

290
00:11:41,120 --> 00:11:43,600
it may change the process image to legit

291
00:11:43,600 --> 00:11:45,839
executable using that posix spawn

292
00:11:45,839 --> 00:11:47,760
function function so we are inside the

293
00:11:47,760 --> 00:11:49,279
same process

294
00:11:49,279 --> 00:11:53,760
the malicious application loads the uh

295
00:11:53,760 --> 00:11:55,920
the bytes from the executable that they

296
00:11:55,920 --> 00:11:57,600
stored on your device

297
00:11:57,600 --> 00:11:59,760
into into the process so we are in the

298
00:11:59,760 --> 00:12:01,839
same process identifier

299
00:12:01,839 --> 00:12:02,800
and

300
00:12:02,800 --> 00:12:03,519
the

301
00:12:03,519 --> 00:12:04,240
uh

302
00:12:04,240 --> 00:12:07,440
the action is popped from the queue it

303
00:12:07,440 --> 00:12:09,120
it now will be checked

304
00:12:09,120 --> 00:12:12,240
on the valid bits right so the

305
00:12:12,240 --> 00:12:14,240
validation will be here by pass because

306
00:12:14,240 --> 00:12:17,440
we were using the process identifier so

307
00:12:17,440 --> 00:12:19,519
it looks as follows

308
00:12:19,519 --> 00:12:20,320
we

309
00:12:20,320 --> 00:12:22,000
this is of course a race condition back

310
00:12:22,000 --> 00:12:23,120
because it

311
00:12:23,120 --> 00:12:24,480
this is a time window and the

312
00:12:24,480 --> 00:12:26,160
application when the mars application

313
00:12:26,160 --> 00:12:29,519
needs to swap its memory

314
00:12:29,519 --> 00:12:32,480
and it was a case in for example i was

315
00:12:32,480 --> 00:12:35,360
cleanup that was attached to the

316
00:12:35,360 --> 00:12:37,279
house antivirus

317
00:12:37,279 --> 00:12:38,800
and the cleanup

318
00:12:38,800 --> 00:12:41,279
was exposing following methods for

319
00:12:41,279 --> 00:12:44,079
example the copy with source

320
00:12:44,079 --> 00:12:47,200
which is the similar case as was in the

321
00:12:47,200 --> 00:12:49,040
key base right

322
00:12:49,040 --> 00:12:51,040
local privilege escalation because we

323
00:12:51,040 --> 00:12:52,720
were able to

324
00:12:52,720 --> 00:12:54,720
move any file to any root accessible

325
00:12:54,720 --> 00:12:56,000
directory

326
00:12:56,000 --> 00:12:57,360
and as you can see

327
00:12:57,360 --> 00:12:59,279
the process identifier

328
00:12:59,279 --> 00:13:01,279
was here

329
00:13:01,279 --> 00:13:03,839
another case in malwarebytes

330
00:13:03,839 --> 00:13:07,760
their server exposed a lot of methods

331
00:13:07,760 --> 00:13:10,560
and for example the uninstall product or

332
00:13:10,560 --> 00:13:12,399
stop the scan job were the most

333
00:13:12,399 --> 00:13:14,079
interesting ones here

334
00:13:14,079 --> 00:13:16,000
so any application installed on the

335
00:13:16,000 --> 00:13:18,639
device device could bypass the moderate

336
00:13:18,639 --> 00:13:21,360
bytes antivirus and stop the scan or

337
00:13:21,360 --> 00:13:25,279
even uninstall the whole antivirus right

338
00:13:25,279 --> 00:13:27,600
um and as you can see

339
00:13:27,600 --> 00:13:30,000
again the process identifier in the

340
00:13:30,000 --> 00:13:31,680
decompiled code

341
00:13:31,680 --> 00:13:33,760
but here's the question we need to

342
00:13:33,760 --> 00:13:36,880
create somehow the code objects but we

343
00:13:36,880 --> 00:13:39,199
cannot use process identifier

344
00:13:39,199 --> 00:13:41,600
and so somewhere gross and i am very

345
00:13:41,600 --> 00:13:44,079
figured out that we can use

346
00:13:44,079 --> 00:13:45,600
audi token

347
00:13:45,600 --> 00:13:47,440
for that purpose

348
00:13:47,440 --> 00:13:50,240
and the problem with aldi token is that

349
00:13:50,240 --> 00:13:52,320
the first problem it's a private

350
00:13:52,320 --> 00:13:55,199
property so we cannot access it and the

351
00:13:55,199 --> 00:13:57,120
second problem is that

352
00:13:57,120 --> 00:14:00,320
for the for implementing the helper we

353
00:14:00,320 --> 00:14:03,040
we've used swift and in swift accessing

354
00:14:03,040 --> 00:14:06,079
the private apis is not that easy like

355
00:14:06,079 --> 00:14:07,920
in objective c

356
00:14:07,920 --> 00:14:11,360
so in our privileged helper i decided

357
00:14:11,360 --> 00:14:14,320
and consulted with it with our

358
00:14:14,320 --> 00:14:16,160
speaker

359
00:14:16,160 --> 00:14:17,279
that

360
00:14:17,279 --> 00:14:19,440
it's fully legal to

361
00:14:19,440 --> 00:14:22,160
use a bridging header to objective-c

362
00:14:22,160 --> 00:14:24,000
and

363
00:14:24,000 --> 00:14:26,800
manually create the getter for the

364
00:14:26,800 --> 00:14:28,480
private property

365
00:14:28,480 --> 00:14:30,880
and then i created the audi token hack

366
00:14:30,880 --> 00:14:33,760
class with the get audit token data from

367
00:14:33,760 --> 00:14:36,880
nsx pc connection method to retrieve the

368
00:14:36,880 --> 00:14:39,680
audi token and call it in nsdata back to

369
00:14:39,680 --> 00:14:41,680
the switch

370
00:14:41,680 --> 00:14:42,720
all right

371
00:14:42,720 --> 00:14:44,639
and on the swift side

372
00:14:44,639 --> 00:14:45,760
uh it's

373
00:14:45,760 --> 00:14:47,600
pretty simple because you are getting

374
00:14:47,600 --> 00:14:50,160
the audi talking data and then creating

375
00:14:50,160 --> 00:14:53,439
the code objects

376
00:14:53,760 --> 00:14:56,480
so the fourth category of bugs that i've

377
00:14:56,480 --> 00:14:59,199
prepared for today the last one

378
00:14:59,199 --> 00:15:01,760
is no code injection prevention

379
00:15:01,760 --> 00:15:04,720
now our general general validation

380
00:15:04,720 --> 00:15:07,839
algorithm looks as follows we are now

381
00:15:07,839 --> 00:15:10,240
aware that we cannot use the process

382
00:15:10,240 --> 00:15:12,880
identifiers so we use the audi token of

383
00:15:12,880 --> 00:15:14,160
the client

384
00:15:14,160 --> 00:15:16,320
and we create a code object basically

385
00:15:16,320 --> 00:15:18,480
undead and then perform the signature

386
00:15:18,480 --> 00:15:19,279
check

387
00:15:19,279 --> 00:15:20,079
so

388
00:15:20,079 --> 00:15:23,040
unfortunately there is yet another

389
00:15:23,040 --> 00:15:24,959
thing that may happen

390
00:15:24,959 --> 00:15:26,480
wrongly in

391
00:15:26,480 --> 00:15:28,720
that point because

392
00:15:28,720 --> 00:15:30,800
as it turns out

393
00:15:30,800 --> 00:15:33,839
the apple signature checking api won't

394
00:15:33,839 --> 00:15:36,399
detect if any code has been injected

395
00:15:36,399 --> 00:15:39,360
with build insert libraries or the task

396
00:15:39,360 --> 00:15:42,480
for bit method either

397
00:15:42,480 --> 00:15:45,199
and that was a case for example

398
00:15:45,199 --> 00:15:48,639
in low our our firewall

399
00:15:48,639 --> 00:15:51,120
a little server exposed following

400
00:15:51,120 --> 00:15:53,600
methods like add rule or delete rule

401
00:15:53,600 --> 00:15:56,480
because it's of course spiral

402
00:15:56,480 --> 00:15:58,000
here is the fix

403
00:15:58,000 --> 00:15:59,519
i have to say that patrick was

404
00:15:59,519 --> 00:16:02,399
incredible because he fixed that in one

405
00:16:02,399 --> 00:16:03,920
day or something

406
00:16:03,920 --> 00:16:05,519
yeah

407
00:16:05,519 --> 00:16:06,399
so

408
00:16:06,399 --> 00:16:09,120
now in the sec requirement string now

409
00:16:09,120 --> 00:16:12,560
lulu checks if the bundle identifier

410
00:16:12,560 --> 00:16:15,279
is valid and if the minimum

411
00:16:15,279 --> 00:16:17,279
version string is

412
00:16:17,279 --> 00:16:19,639
equal to

413
00:16:19,639 --> 00:16:23,839
1.2.0 so why we are checking now the

414
00:16:23,839 --> 00:16:26,720
minimum version of the client

415
00:16:26,720 --> 00:16:28,800
because this is the medium version when

416
00:16:28,800 --> 00:16:32,880
the hardened runtime was turned on

417
00:16:34,399 --> 00:16:36,800
and in macos catalina

418
00:16:36,800 --> 00:16:38,240
there were

419
00:16:38,240 --> 00:16:40,480
some changes regarding the quarantined

420
00:16:40,480 --> 00:16:42,240
items uh

421
00:16:42,240 --> 00:16:44,639
vlad met you have uh has a talk today

422
00:16:44,639 --> 00:16:47,120
about the quarantine right so you will

423
00:16:47,120 --> 00:16:48,639
expand this topic

424
00:16:48,639 --> 00:16:51,519
but uh for now

425
00:16:51,519 --> 00:16:54,240
we need we need to know that all new

426
00:16:54,240 --> 00:16:56,160
applications that are downloaded from

427
00:16:56,160 --> 00:17:00,880
the internet uh require notarization

428
00:17:00,880 --> 00:17:03,279
and the notarization enforces the

429
00:17:03,279 --> 00:17:05,679
hardened runtime to be turned on

430
00:17:05,679 --> 00:17:06,880
and

431
00:17:06,880 --> 00:17:08,480
hardened runtime will

432
00:17:08,480 --> 00:17:10,880
protect you against the

433
00:17:10,880 --> 00:17:12,640
local privileged escalation born

434
00:17:12,640 --> 00:17:14,160
laboratories and somehow because for

435
00:17:14,160 --> 00:17:16,559
example it will

436
00:17:16,559 --> 00:17:19,679
not allow to load unsigned

437
00:17:19,679 --> 00:17:21,520
dialogues

438
00:17:21,520 --> 00:17:24,000
and in abstract i promised to share my

439
00:17:24,000 --> 00:17:25,919
trick regarding

440
00:17:25,919 --> 00:17:26,640
the

441
00:17:26,640 --> 00:17:28,960
injection of enzyme dieleps on macos

442
00:17:28,960 --> 00:17:31,520
catalina and the trick is really really

443
00:17:31,520 --> 00:17:33,039
obvious

444
00:17:33,039 --> 00:17:35,120
here is the whole magic

445
00:17:35,120 --> 00:17:37,520
so if we have the validation based on

446
00:17:37,520 --> 00:17:40,480
the sec requirements string

447
00:17:40,480 --> 00:17:43,760
uh and the second coin string is

448
00:17:43,760 --> 00:17:46,240
built on the team id of the certificate

449
00:17:46,240 --> 00:17:48,160
you can just inject to another app from

450
00:17:48,160 --> 00:17:49,679
the same company because it's still

451
00:17:49,679 --> 00:17:51,840
signed with the same certificate right

452
00:17:51,840 --> 00:17:54,400
so it's not a problem at all

453
00:17:54,400 --> 00:17:56,960
uh if the sec requirement string also

454
00:17:56,960 --> 00:17:59,840
checks for bundle identifier you can

455
00:17:59,840 --> 00:18:01,760
google for the application for the older

456
00:18:01,760 --> 00:18:04,000
version of the application that has now

457
00:18:04,000 --> 00:18:06,400
the hardened runtime capability turned

458
00:18:06,400 --> 00:18:10,720
on and simply again inject to it

459
00:18:10,880 --> 00:18:14,160
and also you uh

460
00:18:14,160 --> 00:18:16,240
can look for the following problematic

461
00:18:16,240 --> 00:18:18,240
entitlements for example the get task

462
00:18:18,240 --> 00:18:19,760
allo or

463
00:18:19,760 --> 00:18:22,240
disable library validation so even if

464
00:18:22,240 --> 00:18:26,400
you turn the hardened runtime on if the

465
00:18:26,400 --> 00:18:29,919
library validation is set to to true

466
00:18:29,919 --> 00:18:32,160
you will be still able to load an

467
00:18:32,160 --> 00:18:35,120
unsigned direct into the process

468
00:18:35,120 --> 00:18:37,600
and here is the proof of concept

469
00:18:37,600 --> 00:18:39,440
of exploitation lulu

470
00:18:39,440 --> 00:18:41,200
[Music]

471
00:18:41,200 --> 00:18:44,000
so we are

472
00:18:44,000 --> 00:18:45,520
as you can see

473
00:18:45,520 --> 00:18:49,360
the rule set is now empty

474
00:18:53,520 --> 00:18:55,520
we are opening the

475
00:18:55,520 --> 00:18:58,480
hdb process that will be connecting to

476
00:18:58,480 --> 00:19:00,559
my blog i block it

477
00:19:00,559 --> 00:19:03,039
here is the block

478
00:19:03,039 --> 00:19:05,440
message

479
00:19:05,440 --> 00:19:07,360
the result will be the connection has

480
00:19:07,360 --> 00:19:11,080
been blocked by lulu

481
00:19:15,840 --> 00:19:18,720
and then we are checking if the lulu has

482
00:19:18,720 --> 00:19:20,400
been signed with the hardened runtime

483
00:19:20,400 --> 00:19:22,880
capability

484
00:19:22,880 --> 00:19:26,880
it's now of course yes

485
00:19:27,840 --> 00:19:30,799
and when we try to insert the library

486
00:19:30,799 --> 00:19:33,280
into it

487
00:19:33,440 --> 00:19:35,600
our malicious library of course

488
00:19:35,600 --> 00:19:38,240
unsigned

489
00:19:38,240 --> 00:19:40,559
it will be blocked because

490
00:19:40,559 --> 00:19:42,480
as expected the hardened runtime is

491
00:19:42,480 --> 00:19:44,960
turned on

492
00:19:47,440 --> 00:19:50,160
so let's now check if the kext viewer

493
00:19:50,160 --> 00:19:53,919
was signed with the hardened runtime

494
00:19:53,919 --> 00:19:57,360
it was not the flux equal to zero but it

495
00:19:57,360 --> 00:20:00,080
is still signed with the

496
00:20:00,080 --> 00:20:02,960
objective c certificate

497
00:20:02,960 --> 00:20:07,640
so we now inject into it

498
00:20:16,240 --> 00:20:17,039
yeah

499
00:20:17,039 --> 00:20:19,120
it was successful

500
00:20:19,120 --> 00:20:22,159
and now again let's try hd process

501
00:20:22,159 --> 00:20:24,159
the little has been bypassed and we

502
00:20:24,159 --> 00:20:25,919
received the data

503
00:20:25,919 --> 00:20:28,880
let's now see how it looks in the user

504
00:20:28,880 --> 00:20:31,440
interface

505
00:20:32,320 --> 00:20:35,820
and as you can see now it's set to hello

506
00:20:35,820 --> 00:20:40,899
[Applause]

507
00:20:44,960 --> 00:20:45,919
all right

508
00:20:45,919 --> 00:20:49,760
so in our privileged helper the fix

509
00:20:49,760 --> 00:20:52,720
we have to check on the server side uh

510
00:20:52,720 --> 00:20:55,840
if the connecting process

511
00:20:55,840 --> 00:20:58,480
has the hardened runtime flag set

512
00:20:58,480 --> 00:20:59,679
and of course

513
00:20:59,679 --> 00:21:01,760
some problematic entitlements as i

514
00:21:01,760 --> 00:21:05,919
mentioned before also need to be checked

515
00:21:05,919 --> 00:21:07,760
all right

516
00:21:07,760 --> 00:21:10,000
so the summary as i wanted to show you

517
00:21:10,000 --> 00:21:12,159
during this presentation there is a lot

518
00:21:12,159 --> 00:21:14,720
of things that we have to remember about

519
00:21:14,720 --> 00:21:15,679
during

520
00:21:15,679 --> 00:21:16,960
creating the

521
00:21:16,960 --> 00:21:19,679
xbc server so it's really painful

522
00:21:19,679 --> 00:21:22,559
and complicated so especially for you

523
00:21:22,559 --> 00:21:25,440
i've prepared a guideline

524
00:21:25,440 --> 00:21:28,840
that will help you creating some

525
00:21:28,840 --> 00:21:31,760
services i will give you a few seconds

526
00:21:31,760 --> 00:21:33,520
to take a photo if anybody if you want

527
00:21:33,520 --> 00:21:36,080
to do it

528
00:21:37,440 --> 00:21:40,760
you have a question

529
00:21:45,679 --> 00:21:48,679
um

530
00:22:03,919 --> 00:22:05,360
i'm not sure if i understood you

531
00:22:05,360 --> 00:22:07,600
correctly but if you check for the

532
00:22:07,600 --> 00:22:10,159
bundle identifier even if the

533
00:22:10,159 --> 00:22:12,000
other applications were signed with the

534
00:22:12,000 --> 00:22:14,400
serum same certificate it will only

535
00:22:14,400 --> 00:22:16,559
restrict you know the the second kind to

536
00:22:16,559 --> 00:22:18,400
dead bundle identifier as patrick did

537
00:22:18,400 --> 00:22:21,919
for example the loo now checks for the e

538
00:22:21,919 --> 00:22:25,440
for if the connecting service is exactly

539
00:22:25,440 --> 00:22:27,440
lulu right

540
00:22:27,440 --> 00:22:29,600
did i answer the question

541
00:22:29,600 --> 00:22:31,120
okay

542
00:22:31,120 --> 00:22:35,280
and because we love open sourcing stuff

543
00:22:35,280 --> 00:22:37,200
i've also decided to

544
00:22:37,200 --> 00:22:38,720
open source the

545
00:22:38,720 --> 00:22:42,480
source code of the privileged helper so

546
00:22:42,480 --> 00:22:43,760
stay tuned and

547
00:22:43,760 --> 00:22:45,440
[Music]

548
00:22:45,440 --> 00:22:47,440
check our github because i will release

549
00:22:47,440 --> 00:22:49,919
it shortly

550
00:22:49,919 --> 00:22:50,720
and

551
00:22:50,720 --> 00:22:53,440
i also wanted to say that

552
00:22:53,440 --> 00:22:55,760
the validation in that helper is made

553
00:22:55,760 --> 00:22:57,840
modular so if you want to

554
00:22:57,840 --> 00:23:00,400
train yourself and learn to xpc

555
00:23:00,400 --> 00:23:03,280
exploitation you can just comment some

556
00:23:03,280 --> 00:23:05,919
if statements and it will be easy to

557
00:23:05,919 --> 00:23:08,919
learn

558
00:23:09,039 --> 00:23:12,559
here is the references

559
00:23:12,720 --> 00:23:14,159
and for

560
00:23:14,159 --> 00:23:16,400
that's all that i prepared for you today

561
00:23:16,400 --> 00:23:18,080
uh if anybody wants to have this

562
00:23:18,080 --> 00:23:20,400
presentation on an email i can send it

563
00:23:20,400 --> 00:23:22,080
to you just leave me your business cards

564
00:23:22,080 --> 00:23:24,480
and send me a message on twitter but for

565
00:23:24,480 --> 00:23:26,780
now thank you

566
00:23:26,780 --> 00:23:30,139
[Applause]

567
00:23:41,200 --> 00:23:43,279
you

