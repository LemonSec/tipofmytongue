1
00:00:07,279 --> 00:00:08,880
all right next time we have julia who's

2
00:00:08,880 --> 00:00:10,800
going to be talking about some

3
00:00:10,800 --> 00:00:12,080
interesting

4
00:00:12,080 --> 00:00:13,759
research

5
00:00:13,759 --> 00:00:15,910
julia's talking um

6
00:00:15,910 --> 00:00:19,050
[Music]

7
00:00:38,640 --> 00:00:41,440
feel free to take

8
00:00:42,840 --> 00:00:45,760
your well hello

9
00:00:45,760 --> 00:00:48,480
my name is julia washington i come from

10
00:00:48,480 --> 00:00:49,440
kiev

11
00:00:49,440 --> 00:00:50,640
ukraine

12
00:00:50,640 --> 00:00:52,320
first of all thank you for having me

13
00:00:52,320 --> 00:00:55,199
it's really an honor to speak at such a

14
00:00:55,199 --> 00:00:57,520
prominent conference

15
00:00:57,520 --> 00:01:00,160
i got for macpaw you might have heard of

16
00:01:00,160 --> 00:01:02,879
our products statistics say that every

17
00:01:02,879 --> 00:01:05,519
fifth mac on the planet has one of our

18
00:01:05,519 --> 00:01:07,920
products installed

19
00:01:07,920 --> 00:01:10,960
i work as a software engineer at

20
00:01:10,960 --> 00:01:14,240
cleanmymac on anti-malware functionality

21
00:01:14,240 --> 00:01:17,040
also also i'm a member of the triage

22
00:01:17,040 --> 00:01:18,320
team

23
00:01:18,320 --> 00:01:19,360
and

24
00:01:19,360 --> 00:01:21,600
okay so simply put i'm the person who

25
00:01:21,600 --> 00:01:24,880
writes the code for anti-malware

26
00:01:24,880 --> 00:01:27,280
also i deal with the bugs that are

27
00:01:27,280 --> 00:01:30,000
reported to us by a hacker one

28
00:01:30,000 --> 00:01:33,040
i work on technical decisions and often

29
00:01:33,040 --> 00:01:34,799
i'm the one who implement the technical

30
00:01:34,799 --> 00:01:36,479
decisions

31
00:01:36,479 --> 00:01:38,000
so

32
00:01:38,000 --> 00:01:39,759
i've been with the company for around a

33
00:01:39,759 --> 00:01:41,920
year but my story for today is a bit

34
00:01:41,920 --> 00:01:44,399
longer about one and a half one and a

35
00:01:44,399 --> 00:01:45,680
half year

36
00:01:45,680 --> 00:01:47,840
also i'm um

37
00:01:47,840 --> 00:01:50,880
oh wow what's going on

38
00:01:50,880 --> 00:01:54,720
what is going on

39
00:01:54,720 --> 00:01:57,119
okay

40
00:02:00,079 --> 00:02:05,040
okay also i'm a macos chapter lead of

41
00:02:05,040 --> 00:02:08,000
women who called cave

42
00:02:08,000 --> 00:02:09,360
yeah

43
00:02:09,360 --> 00:02:10,318
so

44
00:02:10,318 --> 00:02:11,520
uh

45
00:02:11,520 --> 00:02:12,800
side note

46
00:02:12,800 --> 00:02:14,879
uh i don't know but probably it is the

47
00:02:14,879 --> 00:02:17,520
first time on objective objective by dc

48
00:02:17,520 --> 00:02:20,000
conference that you're gonna have a talk

49
00:02:20,000 --> 00:02:21,200
on

50
00:02:21,200 --> 00:02:22,640
pretty

51
00:02:22,640 --> 00:02:24,560
same subject twice

52
00:02:24,560 --> 00:02:26,640
uh yesterday white such regular was

53
00:02:26,640 --> 00:02:29,599
talking about abusing and securing xpc

54
00:02:29,599 --> 00:02:32,160
on macos apps and i will elaborate on

55
00:02:32,160 --> 00:02:33,280
that topic

56
00:02:33,280 --> 00:02:35,840
so please bear with bear with me the

57
00:02:35,840 --> 00:02:38,000
next 25 minutes i'll try to bring

58
00:02:38,000 --> 00:02:41,040
another perspective on this

59
00:02:41,040 --> 00:02:42,800
i'm gonna talk about

60
00:02:42,800 --> 00:02:45,519
this and clean my man they are already

61
00:02:45,519 --> 00:02:46,480
fixed

62
00:02:46,480 --> 00:02:48,879
and deployed but i believe that the root

63
00:02:48,879 --> 00:02:51,360
cause is still there so we'll come to

64
00:02:51,360 --> 00:02:54,319
that at the end of the talk

65
00:02:54,319 --> 00:02:56,319
also i want to mention one thing that

66
00:02:56,319 --> 00:03:00,239
made this talk possible it is our

67
00:03:00,239 --> 00:03:03,360
take of security at the company we do

68
00:03:03,360 --> 00:03:07,120
really care about our users and

69
00:03:07,120 --> 00:03:09,040
this is actually

70
00:03:09,040 --> 00:03:11,360
what made this story and this talk

71
00:03:11,360 --> 00:03:13,440
possible

72
00:03:13,440 --> 00:03:15,680
so we're gonna start with a short intro

73
00:03:15,680 --> 00:03:17,840
to privileged operations on mac os just

74
00:03:17,840 --> 00:03:20,000
to make sure that we are on on the same

75
00:03:20,000 --> 00:03:22,640
page about this then i'm gonna talk

76
00:03:22,640 --> 00:03:24,720
about several issues that were reported

77
00:03:24,720 --> 00:03:27,680
to us by different researchers

78
00:03:27,680 --> 00:03:30,080
also we besides clean my mac we have

79
00:03:30,080 --> 00:03:31,440
another big product which is called

80
00:03:31,440 --> 00:03:33,280
setup and

81
00:03:33,280 --> 00:03:35,440
i have an unique opportunity to compare

82
00:03:35,440 --> 00:03:37,280
the implementation of privileged

83
00:03:37,280 --> 00:03:41,040
operations on cleanmymac and setapp and

84
00:03:41,040 --> 00:03:43,040
the amount of bugs that were reported to

85
00:03:43,040 --> 00:03:45,280
us

86
00:03:45,440 --> 00:03:46,879
there is one more thing that i want to

87
00:03:46,879 --> 00:03:48,799
mention i want to

88
00:03:48,799 --> 00:03:51,599
say that i

89
00:03:51,599 --> 00:03:54,000
appreciate the great

90
00:03:54,000 --> 00:03:56,319
tremendous work that apple engineers do

91
00:03:56,319 --> 00:03:59,120
providing us with great platforms that i

92
00:03:59,120 --> 00:04:03,280
personally love using and working at

93
00:04:03,280 --> 00:04:05,760
but sometimes it looks like tough love

94
00:04:05,760 --> 00:04:07,519
especially at the end of the talk you'll

95
00:04:07,519 --> 00:04:08,720
see

96
00:04:08,720 --> 00:04:12,000
i hope you you like

97
00:04:12,000 --> 00:04:12,799
so

98
00:04:12,799 --> 00:04:15,120
our short intro if you want to do some

99
00:04:15,120 --> 00:04:17,199
privileged operations on mac os you have

100
00:04:17,199 --> 00:04:19,600
basically two high-level apis to choose

101
00:04:19,600 --> 00:04:21,918
from assemblies and authorization

102
00:04:21,918 --> 00:04:24,720
execute with privileges sm stands for

103
00:04:24,720 --> 00:04:26,840
service management is the name of the

104
00:04:26,840 --> 00:04:29,520
framework it is actually a pretty easy

105
00:04:29,520 --> 00:04:31,440
choice because authorization executed

106
00:04:31,440 --> 00:04:33,360
with privileges has been deprecated

107
00:04:33,360 --> 00:04:36,000
since mac os lion

108
00:04:36,000 --> 00:04:39,120
and also the documentation tells us that

109
00:04:39,120 --> 00:04:41,520
it poses a security concern not

110
00:04:41,520 --> 00:04:43,360
something we want to do

111
00:04:43,360 --> 00:04:46,320
the problem is in the flow basically you

112
00:04:46,320 --> 00:04:49,120
can run anything using

113
00:04:49,120 --> 00:04:51,360
authorizations execute with privileges

114
00:04:51,360 --> 00:04:54,560
assign binary unsigned binary script it

115
00:04:54,560 --> 00:04:56,800
could be is easily tampered with and it

116
00:04:56,800 --> 00:04:58,400
could be easily replaced so you

117
00:04:58,400 --> 00:05:00,000
basically don't know what you're running

118
00:05:00,000 --> 00:05:02,240
when you're running it

119
00:05:02,240 --> 00:05:05,120
also the documentation tells us that we

120
00:05:05,120 --> 00:05:06,560
need to use the service management

121
00:05:06,560 --> 00:05:10,320
framework which is essential bless

122
00:05:10,320 --> 00:05:11,520
okay

123
00:05:11,520 --> 00:05:12,560
but

124
00:05:12,560 --> 00:05:14,479
even at the start

125
00:05:14,479 --> 00:05:17,680
a developer can see that something is

126
00:05:17,680 --> 00:05:18,479
not

127
00:05:18,479 --> 00:05:21,120
ideal for example there is no mirroring

128
00:05:21,120 --> 00:05:22,479
api

129
00:05:22,479 --> 00:05:25,440
there is nothing we can unbless after we

130
00:05:25,440 --> 00:05:28,240
blast it everything is deprecated

131
00:05:28,240 --> 00:05:31,120
uh also remember yesterday scott nice

132
00:05:31,120 --> 00:05:34,720
amazing talk on endpoint security

133
00:05:34,720 --> 00:05:37,680
uh he mentioned on one slide that the

134
00:05:37,680 --> 00:05:38,560
flow

135
00:05:38,560 --> 00:05:40,400
of making

136
00:05:40,400 --> 00:05:42,960
of registering a system extension

137
00:05:42,960 --> 00:05:44,080
involves

138
00:05:44,080 --> 00:05:47,120
some privileged operations and

139
00:05:47,120 --> 00:05:51,520
they are registered with some job submit

140
00:05:51,520 --> 00:05:55,600
which you can see is long deprecated so

141
00:05:55,600 --> 00:05:57,919
even apple engineers when writing a

142
00:05:57,919 --> 00:06:00,639
brand new shiny framework they have to

143
00:06:00,639 --> 00:06:03,280
use deprecated apis

144
00:06:03,280 --> 00:06:05,280
this is what happened what's happening

145
00:06:05,280 --> 00:06:07,039
right now

146
00:06:07,039 --> 00:06:09,280
the main difference between assange of

147
00:06:09,280 --> 00:06:11,199
less and authorization execute with

148
00:06:11,199 --> 00:06:12,960
privileges is

149
00:06:12,960 --> 00:06:15,120
requirements to sign in the client

150
00:06:15,120 --> 00:06:16,560
application has some signing

151
00:06:16,560 --> 00:06:19,199
requirements to the privileged helper

152
00:06:19,199 --> 00:06:21,199
and the privileged helper has sign-in

153
00:06:21,199 --> 00:06:23,840
requirements for the

154
00:06:23,840 --> 00:06:24,880
client

155
00:06:24,880 --> 00:06:26,080
but

156
00:06:26,080 --> 00:06:27,600
the operation

157
00:06:27,600 --> 00:06:30,639
validates these requirements only on

158
00:06:30,639 --> 00:06:34,400
installation and subsequent updates

159
00:06:34,400 --> 00:06:36,479
no validation is performed on

160
00:06:36,479 --> 00:06:39,039
establishing the connection to the pre

161
00:06:39,039 --> 00:06:42,318
to the privileged helper

162
00:06:43,199 --> 00:06:46,400
let's see how the flow goes

163
00:06:46,400 --> 00:06:48,720
some prerequisites the client

164
00:06:48,720 --> 00:06:51,360
is a bundle and it has to have the

165
00:06:51,360 --> 00:06:53,840
executable embedded

166
00:06:53,840 --> 00:06:56,479
the executable of the privileged helper

167
00:06:56,479 --> 00:06:58,080
all the sign-in requirements should be

168
00:06:58,080 --> 00:07:00,960
met both the client and the privileged

169
00:07:00,960 --> 00:07:03,919
helper has to have to be signed

170
00:07:03,919 --> 00:07:06,560
also the privileged helper

171
00:07:06,560 --> 00:07:10,720
has a p list and lgd files both embedded

172
00:07:10,720 --> 00:07:13,919
into the executable the p list contains

173
00:07:13,919 --> 00:07:15,759
those sign-in requirements

174
00:07:15,759 --> 00:07:18,880
and the client has deciding requirements

175
00:07:18,880 --> 00:07:22,080
in its p list so like they

176
00:07:22,080 --> 00:07:25,440
depend on each other in this matter

177
00:07:25,440 --> 00:07:27,039
in order to make this work we need to

178
00:07:27,039 --> 00:07:29,520
obtain an authorization object so we

179
00:07:29,520 --> 00:07:31,759
call authorization create at this point

180
00:07:31,759 --> 00:07:35,440
user sees the alert which prompts the

181
00:07:35,440 --> 00:07:37,680
administrative password

182
00:07:37,680 --> 00:07:40,080
if everything goes smoothly we obtain

183
00:07:40,080 --> 00:07:42,400
this authorization object and feed and

184
00:07:42,400 --> 00:07:46,479
we feed it to the sam jobless function

185
00:07:46,479 --> 00:07:48,879
then operating system validates those

186
00:07:48,879 --> 00:07:51,919
sign-in requirements and copies the

187
00:07:51,919 --> 00:07:55,039
executable from our bundle into slash

188
00:07:55,039 --> 00:07:58,879
library slash privilege output tools

189
00:07:58,879 --> 00:08:01,840
and it does one more thing it registers

190
00:08:01,840 --> 00:08:05,039
this privileged helper as an xbc service

191
00:08:05,039 --> 00:08:07,840
so anyone on the system can talk to it

192
00:08:07,840 --> 00:08:09,680
via xbc

193
00:08:09,680 --> 00:08:12,560
and when we try to talk to it a method

194
00:08:12,560 --> 00:08:14,479
listener should accept new connection is

195
00:08:14,479 --> 00:08:15,840
called on the

196
00:08:15,840 --> 00:08:17,680
privileged helper

197
00:08:17,680 --> 00:08:18,479
so

198
00:08:18,479 --> 00:08:20,400
so first we would okay we want to

199
00:08:20,400 --> 00:08:22,400
implement it what do we do

200
00:08:22,400 --> 00:08:24,960
we go to apple sample code and after

201
00:08:24,960 --> 00:08:27,039
some digging we will realize that there

202
00:08:27,039 --> 00:08:29,039
are two samples for that

203
00:08:29,039 --> 00:08:30,720
a better one

204
00:08:30,720 --> 00:08:33,679
and an even better one

205
00:08:33,679 --> 00:08:36,159
unfortunately there is no good one as

206
00:08:36,159 --> 00:08:38,559
you can see and i'm gonna show you this

207
00:08:38,559 --> 00:08:41,519
a little bit later let's see the even

208
00:08:41,519 --> 00:08:44,320
better one it must be like super best

209
00:08:44,320 --> 00:08:45,279
right

210
00:08:45,279 --> 00:08:47,360
okay this is the implementation that we

211
00:08:47,360 --> 00:08:49,600
are supposed to do

212
00:08:49,600 --> 00:08:52,399
basically it says like anyone wants to

213
00:08:52,399 --> 00:08:54,480
talk to you configure the connection and

214
00:08:54,480 --> 00:08:56,560
return yes

215
00:08:56,560 --> 00:08:59,519
don't care who wants to talk to us

216
00:08:59,519 --> 00:09:04,080
and this is what we did on cleanmymac

217
00:09:04,080 --> 00:09:07,680
and this is was our first issue

218
00:09:07,680 --> 00:09:10,240
it leads us to the point when we were

219
00:09:10,240 --> 00:09:13,200
reported this issue by cisco

220
00:09:13,200 --> 00:09:17,519
intel cisco telus intelligence group

221
00:09:17,600 --> 00:09:20,480
on november 2018 our

222
00:09:20,480 --> 00:09:24,080
security engineer who is actually there

223
00:09:24,080 --> 00:09:26,160
arthur thank you

224
00:09:26,160 --> 00:09:28,560
he just stumbled upon some zero day

225
00:09:28,560 --> 00:09:31,680
reports on queen by mac

226
00:09:31,680 --> 00:09:33,760
a bunch of them actually here you can

227
00:09:33,760 --> 00:09:35,600
see our whole interface of the

228
00:09:35,600 --> 00:09:38,240
privileged helper and a cde for each

229
00:09:38,240 --> 00:09:41,600
method that we provide

230
00:09:41,600 --> 00:09:43,279
um

231
00:09:43,279 --> 00:09:45,519
telus tried to contact us but the letter

232
00:09:45,519 --> 00:09:47,920
got lost so we didn't fit in the

233
00:09:47,920 --> 00:09:51,680
timeline and they published

234
00:09:51,680 --> 00:09:53,040
we released

235
00:09:53,040 --> 00:09:55,040
we contacted them they provided the

236
00:09:55,040 --> 00:09:57,920
details all we needed the same day

237
00:09:57,920 --> 00:09:59,920
then we released a batched update after

238
00:09:59,920 --> 00:10:02,000
sometimes they reported an insufficient

239
00:10:02,000 --> 00:10:03,680
fix the problem was in the update

240
00:10:03,680 --> 00:10:05,839
mechanism so everything was correct it

241
00:10:05,839 --> 00:10:07,839
wasn't just updating correctly on the

242
00:10:07,839 --> 00:10:09,519
end user machines

243
00:10:09,519 --> 00:10:10,959
and

244
00:10:10,959 --> 00:10:14,160
in 2000 at the beginning of 2019 tyler

245
00:10:14,160 --> 00:10:16,480
boran from chalice the guy who actually

246
00:10:16,480 --> 00:10:18,480
imported all those cves

247
00:10:18,480 --> 00:10:21,360
delivers a talk in berlin and offensive

248
00:10:21,360 --> 00:10:24,959
contin about this funny situation

249
00:10:24,959 --> 00:10:27,040
and after that we released the patch

250
00:10:27,040 --> 00:10:30,240
with the correct update

251
00:10:30,240 --> 00:10:31,839
timer was talking about a bunch of

252
00:10:31,839 --> 00:10:33,680
application again

253
00:10:33,680 --> 00:10:35,839
our interface

254
00:10:35,839 --> 00:10:39,440
um and we appeared to be in good company

255
00:10:39,440 --> 00:10:42,959
and say with microsoft pixar welcome

256
00:10:42,959 --> 00:10:45,360
sparklabs

257
00:10:45,360 --> 00:10:46,640
funny right

258
00:10:46,640 --> 00:10:50,160
like developers from microsoft do the

259
00:10:50,160 --> 00:10:52,160
same stupid mistake

260
00:10:52,160 --> 00:10:53,920
how does that happen

261
00:10:53,920 --> 00:10:57,279
okay and thomas tyler suggested during

262
00:10:57,279 --> 00:10:59,440
this talk tyler suggested effects that

263
00:10:59,440 --> 00:11:01,839
we have all we had already implemented

264
00:11:01,839 --> 00:11:03,040
by then

265
00:11:03,040 --> 00:11:06,160
the fix was in this function we

266
00:11:06,160 --> 00:11:08,399
in this method we are going to see this

267
00:11:08,399 --> 00:11:10,399
right several times

268
00:11:10,399 --> 00:11:13,360
we check that whoever wants to talk to

269
00:11:13,360 --> 00:11:15,760
us is signed by our company

270
00:11:15,760 --> 00:11:19,680
and its signature is intact

271
00:11:19,760 --> 00:11:21,360
okay

272
00:11:21,360 --> 00:11:23,839
looks good right do you remember uh

273
00:11:23,839 --> 00:11:26,079
tyler do you remember

274
00:11:26,079 --> 00:11:29,440
scott knights yesterday had a very

275
00:11:29,440 --> 00:11:32,079
similar uh code sample

276
00:11:32,079 --> 00:11:35,839
when he showed apple engineers fix on

277
00:11:35,839 --> 00:11:37,200
his report

278
00:11:37,200 --> 00:11:38,880
it looked pretty much the same they did

279
00:11:38,880 --> 00:11:41,040
the same mistake they they forgot to

280
00:11:41,040 --> 00:11:43,040
check from the entitlements

281
00:11:43,040 --> 00:11:46,640
and this this was our fix

282
00:11:46,640 --> 00:11:48,880
but it appeared to be

283
00:11:48,880 --> 00:11:51,279
just the first fix

284
00:11:51,279 --> 00:11:55,200
we decided that we do really need uh

285
00:11:55,200 --> 00:11:59,279
good engineer good engineers to look

286
00:11:59,279 --> 00:12:02,880
closer to what we do and is it secure

287
00:12:02,880 --> 00:12:05,040
and how things are going on so we

288
00:12:05,040 --> 00:12:08,560
decided to add clean my mac to hacker

289
00:12:08,560 --> 00:12:10,079
one

290
00:12:10,079 --> 00:12:13,519
we added it uh as to the scope

291
00:12:13,519 --> 00:12:16,480
on may 2019

292
00:12:16,480 --> 00:12:19,279
by the time we had already uh

293
00:12:19,279 --> 00:12:20,560
having a

294
00:12:20,560 --> 00:12:22,560
hacker one private program running for

295
00:12:22,560 --> 00:12:26,639
almost a year for setup

296
00:12:26,639 --> 00:12:28,480
at that time what do we have what did we

297
00:12:28,480 --> 00:12:29,680
have

298
00:12:29,680 --> 00:12:31,360
the client's requirement for the

299
00:12:31,360 --> 00:12:33,360
privileged helper was to check for the

300
00:12:33,360 --> 00:12:35,120
bundle identifier

301
00:12:35,120 --> 00:12:38,880
and the signing identity the team id

302
00:12:38,880 --> 00:12:40,480
for that

303
00:12:40,480 --> 00:12:43,360
we received the bug that actually the

304
00:12:43,360 --> 00:12:45,200
privileged helper executable can be

305
00:12:45,200 --> 00:12:47,440
replaced in our bundle with an older

306
00:12:47,440 --> 00:12:49,920
version you can see that it was reported

307
00:12:49,920 --> 00:12:53,279
to us by vladimir who actually

308
00:12:53,279 --> 00:12:54,959
delivered to talk yesterday on

309
00:12:54,959 --> 00:12:57,680
quarantine

310
00:12:57,839 --> 00:12:58,880
there is

311
00:12:58,880 --> 00:13:01,839
a funny thing because we went to

312
00:13:01,839 --> 00:13:05,040
um equivalent because we wanted

313
00:13:05,040 --> 00:13:08,160
that researchers from all over the world

314
00:13:08,160 --> 00:13:09,920
to report us bugs

315
00:13:09,920 --> 00:13:10,720
but

316
00:13:10,720 --> 00:13:13,279
on the box on privileged operations were

317
00:13:13,279 --> 00:13:15,279
reported by vladimir who actually works

318
00:13:15,279 --> 00:13:19,480
a few blocks away from us

319
00:13:21,360 --> 00:13:22,480
um

320
00:13:22,480 --> 00:13:24,000
what's the problem with the old versions

321
00:13:24,000 --> 00:13:25,839
okay it can be replaced with an old

322
00:13:25,839 --> 00:13:27,040
version

323
00:13:27,040 --> 00:13:28,560
there is a problem

324
00:13:28,560 --> 00:13:31,120
because heart and runtime was introduced

325
00:13:31,120 --> 00:13:33,760
only in mojave before that

326
00:13:33,760 --> 00:13:36,959
dynamic library injections were easy to

327
00:13:36,959 --> 00:13:39,680
make and hard to detect

328
00:13:39,680 --> 00:13:41,120
so

329
00:13:41,120 --> 00:13:44,240
um also xcode for some reason i don't

330
00:13:44,240 --> 00:13:44,959
know

331
00:13:44,959 --> 00:13:47,519
added the get task law entitlement into

332
00:13:47,519 --> 00:13:50,320
the release builds but by default

333
00:13:50,320 --> 00:13:52,720
i don't know why would they do that

334
00:13:52,720 --> 00:13:55,279
but they did so you can attach to the

335
00:13:55,279 --> 00:13:57,279
front to the process with a debugger

336
00:13:57,279 --> 00:13:59,279
right you need this in the release field

337
00:13:59,279 --> 00:14:00,880
right yeah

338
00:14:00,880 --> 00:14:04,320
so uh it is quite typical for a macos

339
00:14:04,320 --> 00:14:06,160
application to have a low deployment

340
00:14:06,160 --> 00:14:08,000
target we have

341
00:14:08,000 --> 00:14:10,320
we have deployment target of yosemite

342
00:14:10,320 --> 00:14:13,120
which didn't fit in this slide

343
00:14:13,120 --> 00:14:15,120
we support all these versions with one

344
00:14:15,120 --> 00:14:17,760
with with one binary and

345
00:14:17,760 --> 00:14:20,880
yes if you find an old version it is

346
00:14:20,880 --> 00:14:23,760
very very likely that the application

347
00:14:23,760 --> 00:14:26,480
that was written for sierra doesn't have

348
00:14:26,480 --> 00:14:29,120
any protection against dynamic vibro

349
00:14:29,120 --> 00:14:31,839
injection and you can use this part to

350
00:14:31,839 --> 00:14:34,880
replace and then make this injection and

351
00:14:34,880 --> 00:14:37,120
you're good

352
00:14:37,120 --> 00:14:39,360
so this steps

353
00:14:39,360 --> 00:14:41,600
two preconditions the privileged helper

354
00:14:41,600 --> 00:14:43,360
isn't authorized yet it leaves in the

355
00:14:43,360 --> 00:14:46,160
bundle and there is a malicious

356
00:14:46,160 --> 00:14:48,800
executable on the user's computer

357
00:14:48,800 --> 00:14:51,760
first the malicious executable downloads

358
00:14:51,760 --> 00:14:54,800
an older version that is vulnerable to

359
00:14:54,800 --> 00:14:57,040
dialup induction it replaces the

360
00:14:57,040 --> 00:14:59,040
privileged helper executable in the

361
00:14:59,040 --> 00:15:00,560
installed app

362
00:15:00,560 --> 00:15:03,760
with the vulnerable one users authorizes

363
00:15:03,760 --> 00:15:06,800
the helper so the system copies it to

364
00:15:06,800 --> 00:15:09,040
the slash library slash privilege called

365
00:15:09,040 --> 00:15:11,839
tools and you perform a dynamic vibrant

366
00:15:11,839 --> 00:15:15,199
injection into the helper

367
00:15:16,079 --> 00:15:17,120
so

368
00:15:17,120 --> 00:15:20,000
doesn't it break the code signature of

369
00:15:20,000 --> 00:15:22,079
the bundle

370
00:15:22,079 --> 00:15:23,839
no it doesn't

371
00:15:23,839 --> 00:15:26,000
so yes it does but it doesn't matter

372
00:15:26,000 --> 00:15:28,160
because operating system validates the

373
00:15:28,160 --> 00:15:30,399
signature only if the bundle is

374
00:15:30,399 --> 00:15:34,079
quarantined so after the first launch

375
00:15:34,079 --> 00:15:37,199
everything is great it is on mojave and

376
00:15:37,199 --> 00:15:40,480
earlier we are promised that time to

377
00:15:40,480 --> 00:15:43,040
time checks will be uh time to time

378
00:15:43,040 --> 00:15:45,279
signature checks will be performed by

379
00:15:45,279 --> 00:15:49,440
the operating systems on catalina but

380
00:15:49,440 --> 00:15:51,839
it is just the latest os and they say

381
00:15:51,839 --> 00:15:55,519
they do it like from time to time

382
00:15:55,519 --> 00:15:58,560
the fix was to add a version check

383
00:15:58,560 --> 00:16:00,560
basically it is something similar that

384
00:16:00,560 --> 00:16:03,360
you said was implemented in lulu

385
00:16:03,360 --> 00:16:05,920
yesterday

386
00:16:06,399 --> 00:16:07,600
next one

387
00:16:07,600 --> 00:16:10,160
in privileged health requirements we had

388
00:16:10,160 --> 00:16:12,000
only requirement for the signing

389
00:16:12,000 --> 00:16:15,279
identity so the client has to be signed

390
00:16:15,279 --> 00:16:16,240
by

391
00:16:16,240 --> 00:16:18,639
our company

392
00:16:18,639 --> 00:16:20,320
for that

393
00:16:20,320 --> 00:16:22,880
we received a bug that old monkey client

394
00:16:22,880 --> 00:16:25,519
versions can connect

395
00:16:25,519 --> 00:16:28,639
it is pretty much the same as

396
00:16:28,639 --> 00:16:31,120
with replacement the privileged helper

397
00:16:31,120 --> 00:16:34,079
here we replaced the client

398
00:16:34,079 --> 00:16:36,320
so the preconditions privileged helper

399
00:16:36,320 --> 00:16:38,720
is authorized and a malicious executable

400
00:16:38,720 --> 00:16:41,120
is present on the user's computer it

401
00:16:41,120 --> 00:16:42,959
downloads an older

402
00:16:42,959 --> 00:16:44,720
old app version

403
00:16:44,720 --> 00:16:47,680
in the first issue it replaced the

404
00:16:47,680 --> 00:16:50,480
privileged helper but now it just

405
00:16:50,480 --> 00:16:53,680
launches the old client makes a dilip

406
00:16:53,680 --> 00:16:57,360
injection and it calls the uh privileged

407
00:16:57,360 --> 00:16:59,360
helper and the code is

408
00:16:59,360 --> 00:17:00,480
executed

409
00:17:00,480 --> 00:17:03,120
is executed with root privileges in our

410
00:17:03,120 --> 00:17:06,240
case due to our interfaces it leads to

411
00:17:06,240 --> 00:17:09,120
lp internet

412
00:17:09,280 --> 00:17:10,559
so

413
00:17:10,559 --> 00:17:13,039
the fix was to check for the bundle

414
00:17:13,039 --> 00:17:16,640
identif the version of the client

415
00:17:16,640 --> 00:17:20,559
some old client can't connect to us

416
00:17:22,160 --> 00:17:24,559
and we received another bar for

417
00:17:24,559 --> 00:17:26,240
for the same stuff

418
00:17:26,240 --> 00:17:28,319
with these requirements

419
00:17:28,319 --> 00:17:30,160
other apps of the same vendor can

420
00:17:30,160 --> 00:17:31,360
connect

421
00:17:31,360 --> 00:17:34,080
and this can be a problem because

422
00:17:34,080 --> 00:17:36,320
not all the apps are maintained in the

423
00:17:36,320 --> 00:17:38,400
same way there are apps that are just on

424
00:17:38,400 --> 00:17:43,520
support and there is no time or

425
00:17:43,520 --> 00:17:46,320
to think about their security they are

426
00:17:46,320 --> 00:17:48,559
not the priority and that can be used

427
00:17:48,559 --> 00:17:50,240
against us

428
00:17:50,240 --> 00:17:52,240
so we added a check for a bundle

429
00:17:52,240 --> 00:17:54,960
identifier

430
00:17:54,960 --> 00:17:58,160
also in the privileged helpers code

431
00:17:58,160 --> 00:18:00,000
before performing all the checks we need

432
00:18:00,000 --> 00:18:02,640
to obtain the code object and we use the

433
00:18:02,640 --> 00:18:05,280
process identifier for that

434
00:18:05,280 --> 00:18:07,200
and actually

435
00:18:07,200 --> 00:18:09,440
anyone could impersonate the client due

436
00:18:09,440 --> 00:18:10,320
to

437
00:18:10,320 --> 00:18:13,039
racy nature of the process identifier

438
00:18:13,039 --> 00:18:15,360
checks that are performed by the

439
00:18:15,360 --> 00:18:18,320
operating system

440
00:18:20,960 --> 00:18:23,440
this is the

441
00:18:23,440 --> 00:18:24,640
exploit

442
00:18:24,640 --> 00:18:27,600
short version that we got

443
00:18:27,600 --> 00:18:30,080
we are gonna i think we have

444
00:18:30,080 --> 00:18:32,720
a little bit of time to go through

445
00:18:32,720 --> 00:18:35,120
uh it is uh

446
00:18:35,120 --> 00:18:37,360
we start with a serialized selector

447
00:18:37,360 --> 00:18:40,080
remove item with pass

448
00:18:40,080 --> 00:18:42,400
remove item at path it is a method from

449
00:18:42,400 --> 00:18:45,440
the interface of our privileged helper

450
00:18:45,440 --> 00:18:47,919
then we

451
00:18:47,919 --> 00:18:51,120
fork a process 100 processes here but

452
00:18:51,120 --> 00:18:54,880
actually like 10 is enough

453
00:18:54,880 --> 00:18:57,120
we establish a connection to their

454
00:18:57,120 --> 00:18:59,440
privileged helper

455
00:18:59,440 --> 00:19:03,520
send the message to remove some file

456
00:19:03,520 --> 00:19:06,240
and then we pause explore

457
00:19:06,240 --> 00:19:07,919
the same helper

458
00:19:07,919 --> 00:19:09,039
binary

459
00:19:09,039 --> 00:19:11,360
because it is signed correctly and it is

460
00:19:11,360 --> 00:19:12,559
small

461
00:19:12,559 --> 00:19:14,320
and by the time

462
00:19:14,320 --> 00:19:15,120
the

463
00:19:15,120 --> 00:19:17,840
check is performed by the

464
00:19:17,840 --> 00:19:19,520
helper

465
00:19:19,520 --> 00:19:22,160
the process has already spawned

466
00:19:22,160 --> 00:19:25,520
and all the entitlements are correct

467
00:19:25,520 --> 00:19:27,600
so it's like it takes

468
00:19:27,600 --> 00:19:30,320
approximately 10 times to

469
00:19:30,320 --> 00:19:32,080
to get through and to get this file

470
00:19:32,080 --> 00:19:33,600
removed

471
00:19:33,600 --> 00:19:36,399
pretty quickly

472
00:19:36,880 --> 00:19:39,840
so the fix was not to use the process

473
00:19:39,840 --> 00:19:43,120
identifier but to use the audit token

474
00:19:43,120 --> 00:19:45,039
there is a catch though it worked it

475
00:19:45,039 --> 00:19:49,120
works perfectly but there is a problem

476
00:19:49,120 --> 00:19:52,320
the audit token api is private

477
00:19:52,320 --> 00:19:53,440
and

478
00:19:53,440 --> 00:19:55,679
a good developer doesn't want to use

479
00:19:55,679 --> 00:19:58,400
private api because we want to have

480
00:19:58,400 --> 00:20:00,240
stable codebase

481
00:20:00,240 --> 00:20:03,360
we don't want any surprises and when we

482
00:20:03,360 --> 00:20:05,360
are working with private apis the

483
00:20:05,360 --> 00:20:08,720
behavior can change on page versions on

484
00:20:08,720 --> 00:20:11,200
on the macos and no one's gonna tell us

485
00:20:11,200 --> 00:20:12,960
about that if we're gonna and we're

486
00:20:12,960 --> 00:20:15,919
gonna have bugs so we use private apis

487
00:20:15,919 --> 00:20:19,600
only in in situations when we can't do

488
00:20:19,600 --> 00:20:21,120
without them

489
00:20:21,120 --> 00:20:23,600
but unfortunately this one looks like

490
00:20:23,600 --> 00:20:25,039
the case

491
00:20:25,039 --> 00:20:27,919
so we use it

492
00:20:27,919 --> 00:20:29,600
next one

493
00:20:29,600 --> 00:20:32,480
this is probably my favorite one

494
00:20:32,480 --> 00:20:34,400
comparing the privileged operations

495
00:20:34,400 --> 00:20:36,400
implementation when we got the box the

496
00:20:36,400 --> 00:20:38,640
first box i went to sit up and i told

497
00:20:38,640 --> 00:20:40,559
them hey guys

498
00:20:40,559 --> 00:20:42,400
do you want to look closer to your

499
00:20:42,400 --> 00:20:44,240
implementation of privileged operations

500
00:20:44,240 --> 00:20:45,360
because we are receiving some

501
00:20:45,360 --> 00:20:47,760
interesting bugs maybe

502
00:20:47,760 --> 00:20:50,320
we can like fix them

503
00:20:50,320 --> 00:20:52,480
include my mac and insert type if you

504
00:20:52,480 --> 00:20:53,760
have some

505
00:20:53,760 --> 00:20:55,919
and they figured that they actually use

506
00:20:55,919 --> 00:20:59,280
this dangerous deprecated api that i

507
00:20:59,280 --> 00:21:01,760
mentioned at the beginning which poses a

508
00:21:01,760 --> 00:21:04,960
security concern as by apple

509
00:21:04,960 --> 00:21:07,360
so the question is how many bugs they

510
00:21:07,360 --> 00:21:10,080
were reported

511
00:21:10,240 --> 00:21:12,320
this many bugs

512
00:21:12,320 --> 00:21:15,520
because they use this interface just to

513
00:21:15,520 --> 00:21:16,559
call the

514
00:21:16,559 --> 00:21:18,559
system binary ram

515
00:21:18,559 --> 00:21:21,280
and you cannot replace it or forge it

516
00:21:21,280 --> 00:21:23,760
without having root privileges

517
00:21:23,760 --> 00:21:26,400
so it doesn't make any sense when you

518
00:21:26,400 --> 00:21:29,520
use this api correctly it actually is

519
00:21:29,520 --> 00:21:30,640
secure

520
00:21:30,640 --> 00:21:32,799
and for now

521
00:21:32,799 --> 00:21:36,480
it is like this we have five major bugs

522
00:21:36,480 --> 00:21:39,039
and setup has none

523
00:21:39,039 --> 00:21:40,159
okay

524
00:21:40,159 --> 00:21:42,320
but clean my mac did the right thing we

525
00:21:42,320 --> 00:21:44,400
did what apple told us we didn't use

526
00:21:44,400 --> 00:21:46,720
deprecated apis we used the sample code

527
00:21:46,720 --> 00:21:48,080
they gave us

528
00:21:48,080 --> 00:21:52,000
okay this is how it worked for us

529
00:21:52,000 --> 00:21:54,640
some short takeaways first takeaways for

530
00:21:54,640 --> 00:21:56,320
developers

531
00:21:56,320 --> 00:21:58,640
think about security a little bit

532
00:21:58,640 --> 00:21:59,520
uh

533
00:21:59,520 --> 00:22:02,320
a good start is having a security handle

534
00:22:02,320 --> 00:22:04,720
email so if people find something they

535
00:22:04,720 --> 00:22:07,120
can actually contact you

536
00:22:07,120 --> 00:22:09,440
it's a good start

537
00:22:09,440 --> 00:22:12,400
and have one source of truth for client

538
00:22:12,400 --> 00:22:14,320
signing requirements and for the

539
00:22:14,320 --> 00:22:16,400
privileged helper sign-in requirements

540
00:22:16,400 --> 00:22:18,720
for example you could put them into the

541
00:22:18,720 --> 00:22:20,640
preprocessor macros i'm going to show

542
00:22:20,640 --> 00:22:21,919
you this

543
00:22:21,919 --> 00:22:24,480
the these requirements basically

544
00:22:24,480 --> 00:22:25,679
describe

545
00:22:25,679 --> 00:22:28,799
who you believe who you trust

546
00:22:28,799 --> 00:22:31,120
use them in the info list file they will

547
00:22:31,120 --> 00:22:33,679
be evaluated on the installation on and

548
00:22:33,679 --> 00:22:36,320
on the updates of your privileged helper

549
00:22:36,320 --> 00:22:38,240
and use the same requirements in the

550
00:22:38,240 --> 00:22:40,400
listener should accept new connection so

551
00:22:40,400 --> 00:22:43,200
you'll be sure that the client is which

552
00:22:43,200 --> 00:22:47,360
is connected to you is someone you trust

553
00:22:47,360 --> 00:22:49,520
check at least for signing identity

554
00:22:49,520 --> 00:22:52,400
bundle id and minimum version probably

555
00:22:52,400 --> 00:22:54,480
also check for the flags that were

556
00:22:54,480 --> 00:22:56,080
mentioned yesterday

557
00:22:56,080 --> 00:22:57,679
hardened run time

558
00:22:57,679 --> 00:22:59,919
all the stuff but if you have low

559
00:22:59,919 --> 00:23:02,880
deployment target probably there was no

560
00:23:02,880 --> 00:23:06,400
hardened run time on yosemite

561
00:23:06,400 --> 00:23:09,280
in when you copy the

562
00:23:09,280 --> 00:23:12,400
code object use audit token

563
00:23:12,400 --> 00:23:13,280
and

564
00:23:13,280 --> 00:23:15,600
uh do not use the process identifier

565
00:23:15,600 --> 00:23:18,400
because it breaks easily

566
00:23:18,400 --> 00:23:20,559
and in order to be a good citizen and

567
00:23:20,559 --> 00:23:23,039
register your privileged helper via

568
00:23:23,039 --> 00:23:26,480
launch control or some job remove api

569
00:23:26,480 --> 00:23:28,400
deprecated

570
00:23:28,400 --> 00:23:30,559
and remove the executable from slash

571
00:23:30,559 --> 00:23:32,720
library flash privileged helper tools

572
00:23:32,720 --> 00:23:34,480
also remember to remove the auto

573
00:23:34,480 --> 00:23:36,799
generated pleased from slash library

574
00:23:36,799 --> 00:23:39,360
slash launch demons

575
00:23:39,360 --> 00:23:42,000
uh about the macro definitions for

576
00:23:42,000 --> 00:23:43,760
example you can add them to your build

577
00:23:43,760 --> 00:23:46,000
settings the client identify a minimum

578
00:23:46,000 --> 00:23:49,039
version and sign an identity then create

579
00:23:49,039 --> 00:23:51,919
create the macro definition with them

580
00:23:51,919 --> 00:23:54,080
remember the escapes

581
00:23:54,080 --> 00:23:55,760
i made this

582
00:23:55,760 --> 00:23:57,600
screenshot on purpose because it took

583
00:23:57,600 --> 00:24:00,640
some time to figure out the escapes

584
00:24:00,640 --> 00:24:03,600
then use this macro definition both in

585
00:24:03,600 --> 00:24:04,480
your

586
00:24:04,480 --> 00:24:07,440
info list file and in your code

587
00:24:07,440 --> 00:24:09,919
that's it if you have an xc config file

588
00:24:09,919 --> 00:24:14,240
you'll probably want to put it there

589
00:24:15,039 --> 00:24:17,039
i wanted to prepare a summary but ended

590
00:24:17,039 --> 00:24:19,919
up with something like christmas wish

591
00:24:19,919 --> 00:24:21,440
list

592
00:24:21,440 --> 00:24:23,039
so

593
00:24:23,039 --> 00:24:25,919
we need the documentation there is

594
00:24:25,919 --> 00:24:28,960
nothing not a word from apple about

595
00:24:28,960 --> 00:24:31,440
validating the connections to the

596
00:24:31,440 --> 00:24:32,559
privileged

597
00:24:32,559 --> 00:24:34,240
processes

598
00:24:34,240 --> 00:24:36,799
we need code samples

599
00:24:36,799 --> 00:24:39,120
and not the ones that i showed you like

600
00:24:39,120 --> 00:24:41,200
the real cod samples that we can use

601
00:24:41,200 --> 00:24:43,840
that are secure just a little bit more

602
00:24:43,840 --> 00:24:46,799
secure than the ones that you saw

603
00:24:46,799 --> 00:24:49,360
we need some information about

604
00:24:49,360 --> 00:24:51,360
the danger of the process identifier

605
00:24:51,360 --> 00:24:53,840
honestly i didn't know all this don't

606
00:24:53,840 --> 00:24:55,679
trust the process identifier stuff

607
00:24:55,679 --> 00:24:58,159
before

608
00:24:58,320 --> 00:24:59,279
and

609
00:24:59,279 --> 00:25:02,559
other tokens that are used by

610
00:25:02,559 --> 00:25:06,000
apple internally should be pro should be

611
00:25:06,000 --> 00:25:07,919
public and available to third-party

612
00:25:07,919 --> 00:25:09,520
developers

613
00:25:09,520 --> 00:25:11,200
and there should be some kind of

614
00:25:11,200 --> 00:25:13,600
uninstallation api because all these we

615
00:25:13,600 --> 00:25:15,120
have no flow

616
00:25:15,120 --> 00:25:15,919
no

617
00:25:15,919 --> 00:25:19,279
official flaw to get rid of all these

618
00:25:19,279 --> 00:25:21,039
privileged helpers and they are just

619
00:25:21,039 --> 00:25:23,520
left behind

620
00:25:23,520 --> 00:25:25,120
if you are interested in the topic i

621
00:25:25,120 --> 00:25:26,000
found

622
00:25:26,000 --> 00:25:28,240
five most

623
00:25:28,240 --> 00:25:31,120
uh interesting articles on that i am

624
00:25:31,120 --> 00:25:33,840
beer had

625
00:25:33,840 --> 00:25:36,880
to prepare a great

626
00:25:36,880 --> 00:25:39,440
description of the issue

627
00:25:39,440 --> 00:25:42,559
of the problem with process identifiers

628
00:25:42,559 --> 00:25:45,279
also the talk of tile reborn is

629
00:25:45,279 --> 00:25:47,039
available on youtube

630
00:25:47,039 --> 00:25:49,840
also there is a very interesting

631
00:25:49,840 --> 00:25:52,240
thread on apple developers for

632
00:25:52,240 --> 00:25:54,559
when people start asking how the hell i

633
00:25:54,559 --> 00:25:58,720
do this and there is a story

634
00:25:58,720 --> 00:26:01,120
on objective development by christian

635
00:26:01,120 --> 00:26:03,120
from little snitch they had almost the

636
00:26:03,120 --> 00:26:05,520
same stuff that we did and many other

637
00:26:05,520 --> 00:26:07,200
companies

638
00:26:07,200 --> 00:26:10,400
and there is an article by eric berglund

639
00:26:10,400 --> 00:26:11,279
from

640
00:26:11,279 --> 00:26:14,720
i think 2016

641
00:26:14,720 --> 00:26:17,360
about the problem that

642
00:26:17,360 --> 00:26:19,200
the privileged helpers are just

643
00:26:19,200 --> 00:26:21,840
forgotten there and they rely on users

644
00:26:21,840 --> 00:26:25,840
machines and make them vulnerable

645
00:26:26,559 --> 00:26:28,720
and also i wanted

646
00:26:28,720 --> 00:26:31,200
to finish with some kind of call to

647
00:26:31,200 --> 00:26:32,960
action

648
00:26:32,960 --> 00:26:35,200
if i could ask you to do

649
00:26:35,200 --> 00:26:37,120
one thing

650
00:26:37,120 --> 00:26:39,440
it would be reporting to apple that

651
00:26:39,440 --> 00:26:41,440
audit tokens should be made available to

652
00:26:41,440 --> 00:26:43,279
third-party developers

653
00:26:43,279 --> 00:26:45,600
we all have this

654
00:26:45,600 --> 00:26:47,679
feedback assistant application on our

655
00:26:47,679 --> 00:26:48,559
macs

656
00:26:48,559 --> 00:26:52,240
so please help to raise the issue and to

657
00:26:52,240 --> 00:26:54,880
grab attention to the problem the more

658
00:26:54,880 --> 00:26:57,039
reports we make the more attention we

659
00:26:57,039 --> 00:26:58,480
get and

660
00:26:58,480 --> 00:26:59,760
the quicker

661
00:26:59,760 --> 00:27:02,000
it is fixed

662
00:27:02,000 --> 00:27:06,120
so thank you very much

663
00:27:16,080 --> 00:27:18,158
you

