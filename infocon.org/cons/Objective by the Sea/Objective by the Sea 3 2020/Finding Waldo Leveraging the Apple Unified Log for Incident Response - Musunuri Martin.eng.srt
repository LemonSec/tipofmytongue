1
00:00:06,240 --> 00:00:08,400
all right uh so i now want to introduce

2
00:00:08,400 --> 00:00:10,000
uh jaya and eric they're going to be

3
00:00:10,000 --> 00:00:13,519
giving a very interesting talk about

4
00:00:13,519 --> 00:00:16,239
using apple's new unified vlogging

5
00:00:16,239 --> 00:00:20,960
mechanism to find bad guys or backdrops

6
00:00:20,960 --> 00:00:23,600
uh so without any further ado let's give

7
00:00:23,600 --> 00:00:27,320
them a round of applause

8
00:00:27,540 --> 00:00:30,759
[Applause]

9
00:00:39,840 --> 00:00:41,520
all right thanks uh my perfect thanks

10
00:00:41,520 --> 00:00:43,440
jeffrey c and everyone guys is

11
00:00:43,440 --> 00:00:45,280
conference and guests here we're excited

12
00:00:45,280 --> 00:00:47,280
to share our research and uh being here

13
00:00:47,280 --> 00:00:49,280
with all of you um so we're talking

14
00:00:49,280 --> 00:00:51,199
about finding boldo in the application

15
00:00:51,199 --> 00:00:53,280
by blog um according to advanced there's

16
00:00:53,280 --> 00:00:55,120
no picture of one over there it's really

17
00:00:55,120 --> 00:00:58,640
tempting to batch sensor responding

18
00:01:11,680 --> 00:01:13,040
don't worry it's not existential

19
00:01:13,040 --> 00:01:14,560
discussion it's actually talking about

20
00:01:14,560 --> 00:01:16,159
forensics um

21
00:01:16,159 --> 00:01:18,080
then we're going to talk about uh firing

22
00:01:18,080 --> 00:01:19,920
the law first saying it and then filing

23
00:01:19,920 --> 00:01:22,799
fighting ball that we're finding evil uh

24
00:01:22,799 --> 00:01:25,200
after that

25
00:01:25,600 --> 00:01:26,799
a little bit about myself my name is

26
00:01:26,799 --> 00:01:28,320
james sturridge i'm principal consultant

27
00:01:28,320 --> 00:01:29,920
of the prospect's professional services

28
00:01:29,920 --> 00:01:32,479
team i lead our mac os forensics and

29
00:01:32,479 --> 00:01:33,920
response practice

30
00:01:33,920 --> 00:01:36,159
certified blacklight examiner

31
00:01:36,159 --> 00:01:39,119
and work on bottom active um i'm in our

32
00:01:39,119 --> 00:01:40,560
singapore office so if you see me

33
00:01:40,560 --> 00:01:42,079
yawning they're drinking a lot of coffee

34
00:01:42,079 --> 00:01:43,920
it's because it's pouring in right now

35
00:01:43,920 --> 00:01:46,479
so um but you know the

36
00:01:46,479 --> 00:01:48,560
presentation exactly so

37
00:01:48,560 --> 00:01:50,720
i'll try my best

38
00:01:50,720 --> 00:01:52,399
hey everybody i'm eric martin i'm

39
00:01:52,399 --> 00:01:54,000
associate consultant with crowdstrike

40
00:01:54,000 --> 00:01:56,000
services primarily i work on the instant

41
00:01:56,000 --> 00:01:57,680
response side but i also help assist

42
00:01:57,680 --> 00:02:00,079
tablecloth exercises

43
00:02:00,079 --> 00:02:01,520
as well

44
00:02:01,520 --> 00:02:04,000
i help develop the automatic

45
00:02:04,000 --> 00:02:08,119
tool that we use um

46
00:02:17,040 --> 00:02:18,000
all right

47
00:02:18,000 --> 00:02:20,160
uh so while we are here um once again

48
00:02:20,160 --> 00:02:21,920
you might have access to crisis you're

49
00:02:21,920 --> 00:02:24,000
free to but we're going to talk about uh

50
00:02:24,000 --> 00:02:25,599
instant response at marvel looking at

51
00:02:25,599 --> 00:02:27,040
unified blog and why this is so

52
00:02:27,040 --> 00:02:28,319
important to us

53
00:02:28,319 --> 00:02:30,400
um so now that i'd like to give is when

54
00:02:30,400 --> 00:02:32,480
we do incident response we're putting

55
00:02:32,480 --> 00:02:34,879
out buyers we're like fire providers and

56
00:02:34,879 --> 00:02:36,560
when we approach a situation where the

57
00:02:36,560 --> 00:02:38,959
so-called house is on fire what's their

58
00:02:38,959 --> 00:02:41,440
customers in uh networking computing

59
00:02:41,440 --> 00:02:43,680
environment uh what we're going in there

60
00:02:43,680 --> 00:02:44,959
is we're going there with the right

61
00:02:44,959 --> 00:02:46,000
tools we want to make sure we have the

62
00:02:46,000 --> 00:02:47,920
right tools the right knowledge and the

63
00:02:47,920 --> 00:02:49,840
right capabilities to understand what's

64
00:02:49,840 --> 00:02:52,800
going on and figure out and basically

65
00:02:52,800 --> 00:02:54,319
put out the spine if you're a

66
00:02:54,319 --> 00:02:56,080
firefighter you've got to have the fire

67
00:02:56,080 --> 00:02:58,400
truck you've got hoses protective gear

68
00:02:58,400 --> 00:02:59,760
and the knowledge about how to deal with

69
00:02:59,760 --> 00:03:02,000
it when it comes to incident response

70
00:03:02,000 --> 00:03:03,599
what we need is we have to know the

71
00:03:03,599 --> 00:03:04,959
right artifacts we need to know how to

72
00:03:04,959 --> 00:03:06,319
use them we don't have to know how to

73
00:03:06,319 --> 00:03:07,599
acquire them

74
00:03:07,599 --> 00:03:09,519
but we need to know what tools can help

75
00:03:09,519 --> 00:03:11,360
us get to that point

76
00:03:11,360 --> 00:03:12,800
so the reason this is relevant to this

77
00:03:12,800 --> 00:03:15,840
talk is um we may have necessarily going

78
00:03:15,840 --> 00:03:18,159
deepest part of the intervals

79
00:03:18,159 --> 00:03:19,280
what we really want to show this

80
00:03:19,280 --> 00:03:21,200
presentation is

81
00:03:21,200 --> 00:03:23,280
understanding what's the right data how

82
00:03:23,280 --> 00:03:24,640
many parts and how to be able to get

83
00:03:24,640 --> 00:03:26,400
good data and how we use that to really

84
00:03:26,400 --> 00:03:29,440
put out the supplier

85
00:03:31,519 --> 00:03:33,200
uh so really like i said what we're

86
00:03:33,200 --> 00:03:34,560
discussing is how can we leverage the

87
00:03:34,560 --> 00:03:36,159
apple unified log to improve our

88
00:03:36,159 --> 00:03:38,239
incident response efforts when we get

89
00:03:38,239 --> 00:03:40,319
into the response on mac os systems

90
00:03:40,319 --> 00:03:41,840
raising a variety of friends and partner

91
00:03:41,840 --> 00:03:44,239
backs and sources more than just a lot

92
00:03:44,239 --> 00:03:46,319
but those who have done it to respond on

93
00:03:46,319 --> 00:03:48,799
windows or linux or any other platform

94
00:03:48,799 --> 00:03:50,720
are probably well aware that logging is

95
00:03:50,720 --> 00:03:52,560
and blogs in general are a fantastic

96
00:03:52,560 --> 00:03:54,560
source of forensic information help

97
00:03:54,560 --> 00:03:56,879
reconstruct timelines and attacks uh

98
00:03:56,879 --> 00:03:58,640
understand intrusions and understand

99
00:03:58,640 --> 00:04:00,720
what bad guys get on the system so

100
00:04:00,720 --> 00:04:02,720
that's our primary focus here uh but to

101
00:04:02,720 --> 00:04:04,159
get to that point we also need to talk

102
00:04:04,159 --> 00:04:07,120
about um the internals of the log how to

103
00:04:07,120 --> 00:04:09,439
get it and then how to parse it and put

104
00:04:09,439 --> 00:04:11,280
it into a format that works to do

105
00:04:11,280 --> 00:04:13,040
analysis it works to get those answers

106
00:04:13,040 --> 00:04:14,560
to put out the fire

107
00:04:14,560 --> 00:04:16,238
um so to kick it off i'm going to give

108
00:04:16,238 --> 00:04:19,279
him this over to eric um

109
00:04:19,279 --> 00:04:20,000
well

110
00:04:20,000 --> 00:04:21,120
one more thing i don't know if you guys

111
00:04:21,120 --> 00:04:23,680
have seen this game before um but let's

112
00:04:23,680 --> 00:04:25,360
just breathe very quickly at this point

113
00:04:25,360 --> 00:04:27,280
when we get to it's response video the

114
00:04:27,280 --> 00:04:29,199
house is on fire

115
00:04:29,199 --> 00:04:30,720
the logs are really what save us we're

116
00:04:30,720 --> 00:04:32,160
trying to get forensic analysis it's

117
00:04:32,160 --> 00:04:33,360
great that you have these other tools

118
00:04:33,360 --> 00:04:35,759
you have disability or data as you go

119
00:04:35,759 --> 00:04:36,560
through

120
00:04:36,560 --> 00:04:39,040
um during an incident or incident but i

121
00:04:39,040 --> 00:04:40,479
think the house is going to violate the

122
00:04:40,479 --> 00:04:43,479
laws

123
00:04:52,560 --> 00:04:54,240
this is going to be a very high level

124
00:04:54,240 --> 00:04:56,240
overview of the unified law we're not

125
00:04:56,240 --> 00:04:58,240
going with that deep level that deep

126
00:04:58,240 --> 00:04:59,840
dive analysis of the unified log just

127
00:04:59,840 --> 00:05:02,720
what we as forensicators need to know

128
00:05:02,720 --> 00:05:05,199
in order to get what we want

129
00:05:05,199 --> 00:05:06,560
if you are looking for that deep dive

130
00:05:06,560 --> 00:05:07,759
analysis

131
00:05:07,759 --> 00:05:09,680
again eclectic light flow and howard

132
00:05:09,680 --> 00:05:11,759
oakley has a great blog

133
00:05:11,759 --> 00:05:14,800
so i recommend you go check that out

134
00:05:14,800 --> 00:05:16,639
so what is the purpose of the unified

135
00:05:16,639 --> 00:05:17,759
vlog

136
00:05:17,759 --> 00:05:19,759
by a brief show of hands who here has

137
00:05:19,759 --> 00:05:22,000
ever used the unified log for any any

138
00:05:22,000 --> 00:05:24,000
reason okay who here has no clue what it

139
00:05:24,000 --> 00:05:25,360
is

140
00:05:25,360 --> 00:05:28,960
okay cool so the unified log is apple's

141
00:05:28,960 --> 00:05:31,680
new logging format it was introduced at

142
00:05:31,680 --> 00:05:34,960
wwdc back in 2016.

143
00:05:34,960 --> 00:05:37,280
now after watching the actual reveal the

144
00:05:37,280 --> 00:05:39,280
primary objective of the unified log

145
00:05:39,280 --> 00:05:41,680
from apple's perspective was to give

146
00:05:41,680 --> 00:05:44,080
developers a much easier time going

147
00:05:44,080 --> 00:05:46,639
through their logs to find any bugs or

148
00:05:46,639 --> 00:05:49,280
issues with their code

149
00:05:49,280 --> 00:05:51,120
so that's great but from a security

150
00:05:51,120 --> 00:05:52,479
standpoint

151
00:05:52,479 --> 00:05:54,560
not exactly ideal however there are

152
00:05:54,560 --> 00:05:56,240
still security events that we can go and

153
00:05:56,240 --> 00:05:58,240
pull

154
00:05:58,240 --> 00:06:00,080
now with this one single logging

155
00:06:00,080 --> 00:06:02,160
mechanism

156
00:06:02,160 --> 00:06:05,039
that does provide a couple of benefits

157
00:06:05,039 --> 00:06:06,800
in terms of time

158
00:06:06,800 --> 00:06:08,160
at least for developers it can go

159
00:06:08,160 --> 00:06:09,120
through

160
00:06:09,120 --> 00:06:12,639
and find those errors very quickly

161
00:06:12,639 --> 00:06:15,440
it did replace a couple of old unix logs

162
00:06:15,440 --> 00:06:17,919
such as the syslog

163
00:06:17,919 --> 00:06:19,360
now this apple

164
00:06:19,360 --> 00:06:22,080
new edition of the unified blog

165
00:06:22,080 --> 00:06:24,880
it is standard across uh all apple

166
00:06:24,880 --> 00:06:26,720
devices which is nice so if you are

167
00:06:26,720 --> 00:06:28,240
trying to debug

168
00:06:28,240 --> 00:06:30,400
both mac and ios you can find all your

169
00:06:30,400 --> 00:06:32,160
errors in the same location in the same

170
00:06:32,160 --> 00:06:33,919
structure

171
00:06:33,919 --> 00:06:35,680
and that's of those devices that are

172
00:06:35,680 --> 00:06:41,120
included are mac os ios watchos and pbos

173
00:06:41,120 --> 00:06:43,600
so this new format that apple introduced

174
00:06:43,600 --> 00:06:45,759
it is no longer in plain text like some

175
00:06:45,759 --> 00:06:47,759
of the old previous logs were

176
00:06:47,759 --> 00:06:49,680
which is both a good thing and a bad

177
00:06:49,680 --> 00:06:50,479
thing

178
00:06:50,479 --> 00:06:52,400
on the goods the the positive side of

179
00:06:52,400 --> 00:06:54,560
the pros you get much more data because

180
00:06:54,560 --> 00:06:56,160
it is now in a compressed format and

181
00:06:56,160 --> 00:06:59,199
what apple calls its trace v3 file

182
00:06:59,199 --> 00:07:00,960
on the con side though is that you can

183
00:07:00,960 --> 00:07:02,800
no longer go in and just correct through

184
00:07:02,800 --> 00:07:05,039
all that data you have to now mold it

185
00:07:05,039 --> 00:07:06,639
and parse that data

186
00:07:06,639 --> 00:07:08,319
either through third parties which jay

187
00:07:08,319 --> 00:07:10,639
will discuss later or through apple's

188
00:07:10,639 --> 00:07:13,199
included log command

189
00:07:13,199 --> 00:07:15,199
so where is the unified log and what

190
00:07:15,199 --> 00:07:17,599
does unified log log

191
00:07:17,599 --> 00:07:19,680
so we'll start where it's located uh you

192
00:07:19,680 --> 00:07:21,759
can find it in the var db

193
00:07:21,759 --> 00:07:23,440
directory now there's two different

194
00:07:23,440 --> 00:07:25,759
locations for the unified log it's not

195
00:07:25,759 --> 00:07:28,639
in this one big gigantic file

196
00:07:28,639 --> 00:07:30,319
it's actually a subset of a bunch of

197
00:07:30,319 --> 00:07:31,520
different files

198
00:07:31,520 --> 00:07:33,120
um so in your diagnostics that's where

199
00:07:33,120 --> 00:07:34,960
you have your trace v3 files and then

200
00:07:34,960 --> 00:07:36,960
your uuid text directory you have a lot

201
00:07:36,960 --> 00:07:39,199
of your supporting files

202
00:07:39,199 --> 00:07:40,960
now when apple released the unified log

203
00:07:40,960 --> 00:07:42,240
again as i mentioned it was centered

204
00:07:42,240 --> 00:07:44,160
around developers and so what they

205
00:07:44,160 --> 00:07:45,280
implemented

206
00:07:45,280 --> 00:07:47,840
were these new categories the subsystem

207
00:07:47,840 --> 00:07:49,680
and the category as well so your

208
00:07:49,680 --> 00:07:51,520
subsystem an example of that might be

209
00:07:51,520 --> 00:07:54,160
com.apple thought objective by the c so

210
00:07:54,160 --> 00:07:55,280
you might have a bunch of processors

211
00:07:55,280 --> 00:07:56,879
running from there and you can go and

212
00:07:56,879 --> 00:07:58,319
differentiate different logs that

213
00:07:58,319 --> 00:08:00,639
originate via category so you can have a

214
00:08:00,639 --> 00:08:02,800
category such as conference underscore

215
00:08:02,800 --> 00:08:05,039
production or conference underscore test

216
00:08:05,039 --> 00:08:06,879
and different logs can be generated from

217
00:08:06,879 --> 00:08:08,560
those different categories which is

218
00:08:08,560 --> 00:08:10,560
great for the developer standpoint from

219
00:08:10,560 --> 00:08:13,199
the security standpoint we can use that

220
00:08:13,199 --> 00:08:14,639
it's not as beneficial as you would

221
00:08:14,639 --> 00:08:16,479
think though

222
00:08:16,479 --> 00:08:19,120
now each log is determined has a

223
00:08:19,120 --> 00:08:20,800
specific level that is determined by the

224
00:08:20,800 --> 00:08:22,479
api that is used

225
00:08:22,479 --> 00:08:24,319
so there are five basic logs we're going

226
00:08:24,319 --> 00:08:25,759
to discuss today there is a six that

227
00:08:25,759 --> 00:08:27,759
we've noticed and that's the activity

228
00:08:27,759 --> 00:08:29,280
but we're gonna we're not gonna focus on

229
00:08:29,280 --> 00:08:31,599
that for now so those three basic logs

230
00:08:31,599 --> 00:08:34,719
that you have are default info and debug

231
00:08:34,719 --> 00:08:36,479
and then you have your special levels

232
00:08:36,479 --> 00:08:40,159
which are your error and your fault logs

233
00:08:40,159 --> 00:08:41,599
now it's important to differentiate

234
00:08:41,599 --> 00:08:43,519
these because not all logs get logged

235
00:08:43,519 --> 00:08:46,080
the same way now you have your default

236
00:08:46,080 --> 00:08:48,080
your error and your fault logs that are

237
00:08:48,080 --> 00:08:50,640
always enabled by default

238
00:08:50,640 --> 00:08:53,120
and you have the destination as on disk

239
00:08:53,120 --> 00:08:55,200
now what that means is every time a log

240
00:08:55,200 --> 00:08:57,440
type of default error or fault

241
00:08:57,440 --> 00:08:59,680
is generated that's always going to be

242
00:08:59,680 --> 00:09:02,800
written to disk now in info if you look

243
00:09:02,800 --> 00:09:04,800
at the table that we have you'll see it

244
00:09:04,800 --> 00:09:06,480
is enabled by default but it's written

245
00:09:06,480 --> 00:09:09,440
to memory um i'll get what i mean by on

246
00:09:09,440 --> 00:09:10,800
the next slide

247
00:09:10,800 --> 00:09:12,640
but it's not always written to disk so

248
00:09:12,640 --> 00:09:13,760
you're not always going to find all of

249
00:09:13,760 --> 00:09:17,040
those info logs in the trace v3 files

250
00:09:17,040 --> 00:09:18,560
and then your debug logs those are

251
00:09:18,560 --> 00:09:20,640
disabled by default now you can go in

252
00:09:20,640 --> 00:09:22,320
and change some of these settings uh via

253
00:09:22,320 --> 00:09:26,240
different profiles um if you choose

254
00:09:26,240 --> 00:09:28,000
so how does the unified log work from

255
00:09:28,000 --> 00:09:30,160
more of an architectural standpoint so

256
00:09:30,160 --> 00:09:31,519
we're gonna start with process a now

257
00:09:31,519 --> 00:09:33,279
this could be any process it could be

258
00:09:33,279 --> 00:09:36,000
quicktime it could be ssh it doesn't

259
00:09:36,000 --> 00:09:37,440
matter but that process is going to

260
00:09:37,440 --> 00:09:39,440
generate locks

261
00:09:39,440 --> 00:09:40,880
now those logs are going to first go to

262
00:09:40,880 --> 00:09:42,080
the compressor

263
00:09:42,080 --> 00:09:42,959
and from there they're going to be

264
00:09:42,959 --> 00:09:44,880
compressed down into this buffer now the

265
00:09:44,880 --> 00:09:47,200
api is going to look through this

266
00:09:47,200 --> 00:09:49,519
list of logs and determine what level

267
00:09:49,519 --> 00:09:52,160
they are now if they're default uh or

268
00:09:52,160 --> 00:09:53,279
error or

269
00:09:53,279 --> 00:09:55,360
fault uh those ones that automatically

270
00:09:55,360 --> 00:09:57,040
are enabled and given to disk

271
00:09:57,040 --> 00:09:58,399
automatically going to go to that

272
00:09:58,399 --> 00:10:00,160
compressed log file

273
00:10:00,160 --> 00:10:02,000
now if it's that info like i mentioned

274
00:10:02,000 --> 00:10:04,079
that gets written to memory so that's

275
00:10:04,079 --> 00:10:05,839
going to go to the memory only buffer

276
00:10:05,839 --> 00:10:07,519
and now the way this works is all those

277
00:10:07,519 --> 00:10:09,200
info logs are going to be in memory

278
00:10:09,200 --> 00:10:11,600
until that last info log that comes

279
00:10:11,600 --> 00:10:13,920
through at that point that last info log

280
00:10:13,920 --> 00:10:15,360
then gets logged in with the rest of the

281
00:10:15,360 --> 00:10:17,200
compressed files and that helps reduce

282
00:10:17,200 --> 00:10:18,480
some of the clutter that you might see

283
00:10:18,480 --> 00:10:20,880
with a lot of these info blocks

284
00:10:20,880 --> 00:10:24,560
now you can also view these logs live

285
00:10:24,560 --> 00:10:26,240
with the blog

286
00:10:26,240 --> 00:10:27,680
stream command

287
00:10:27,680 --> 00:10:29,519
and that's you'll use the diagnostic d

288
00:10:29,519 --> 00:10:31,519
that's the separate format

289
00:10:31,519 --> 00:10:33,040
and just as an overall all this is done

290
00:10:33,040 --> 00:10:35,920
by the log d damon

291
00:10:35,920 --> 00:10:38,160
so how are the unified logs structured

292
00:10:38,160 --> 00:10:41,200
and then what do we as forensicators use

293
00:10:41,200 --> 00:10:43,440
in those logs that are helpful to us

294
00:10:43,440 --> 00:10:45,279
well the log's broken down into vlog

295
00:10:45,279 --> 00:10:47,920
fields uh starting in hiatus sierra when

296
00:10:47,920 --> 00:10:49,920
the unified log was first released there

297
00:10:49,920 --> 00:10:52,320
were only 16 log fields and that has

298
00:10:52,320 --> 00:10:55,519
grown to 27 now in catalina

299
00:10:55,519 --> 00:10:57,519
now these log fields are very useful to

300
00:10:57,519 --> 00:10:59,360
us this is how we parse the data and

301
00:10:59,360 --> 00:11:02,560
look for things of interest to us

302
00:11:02,560 --> 00:11:04,079
now there are three common fields that i

303
00:11:04,079 --> 00:11:06,000
want to touch on and that are that is

304
00:11:06,000 --> 00:11:08,480
the date and time the process and the

305
00:11:08,480 --> 00:11:09,839
message field

306
00:11:09,839 --> 00:11:10,959
and i'll have an example in the next

307
00:11:10,959 --> 00:11:13,200
slide of breaking those down but as

308
00:11:13,200 --> 00:11:14,800
forensicators what we like to do is get

309
00:11:14,800 --> 00:11:16,480
what's called quick wins

310
00:11:16,480 --> 00:11:18,720
and so we use those three fields to

311
00:11:18,720 --> 00:11:20,399
really get the most data without wasting

312
00:11:20,399 --> 00:11:22,000
too much time going through some of

313
00:11:22,000 --> 00:11:24,000
those additional fields

314
00:11:24,000 --> 00:11:25,760
additionally there are signposts that

315
00:11:25,760 --> 00:11:28,480
apple uh released in high sierra

316
00:11:28,480 --> 00:11:30,320
now those are primarily used for

317
00:11:30,320 --> 00:11:31,440
developers

318
00:11:31,440 --> 00:11:33,680
but they do help us from an instant

319
00:11:33,680 --> 00:11:35,600
standpoint and that we can see process

320
00:11:35,600 --> 00:11:37,760
execution and say oh this process or

321
00:11:37,760 --> 00:11:40,959
this application was run

322
00:11:41,040 --> 00:11:43,279
so this is an example of a unified log

323
00:11:43,279 --> 00:11:45,519
entry uh as you can see through the

324
00:11:45,519 --> 00:11:47,279
console application

325
00:11:47,279 --> 00:11:48,800
so right now i'm only showing those

326
00:11:48,800 --> 00:11:50,720
three log fields that are of interest to

327
00:11:50,720 --> 00:11:53,279
us so we'll start with the process um if

328
00:11:53,279 --> 00:11:55,600
you can see that one blue your process

329
00:11:55,600 --> 00:11:56,880
that we're seeing right now is the

330
00:11:56,880 --> 00:11:59,519
sharing d uh now this could be useful um

331
00:11:59,519 --> 00:12:01,120
that's the sharing these indicate or

332
00:12:01,120 --> 00:12:02,240
screen sharing b

333
00:12:02,240 --> 00:12:04,480
is an indicative of screen sharing on

334
00:12:04,480 --> 00:12:06,160
the system so if we were to see this in

335
00:12:06,160 --> 00:12:08,399
the wild we might ask the user hey do

336
00:12:08,399 --> 00:12:10,320
you use screen sharing if that's a no

337
00:12:10,320 --> 00:12:12,000
that's already a great indicator that

338
00:12:12,000 --> 00:12:13,600
something's malicious or something's not

339
00:12:13,600 --> 00:12:14,560
right

340
00:12:14,560 --> 00:12:16,160
and from there we'll transition to the

341
00:12:16,160 --> 00:12:19,040
time and date and we'll get that

342
00:12:19,040 --> 00:12:20,800
time frame of interest and we can expand

343
00:12:20,800 --> 00:12:23,120
and work our way from around there

344
00:12:23,120 --> 00:12:24,560
and lastly that message field that we

345
00:12:24,560 --> 00:12:26,560
have really gives us an insight into

346
00:12:26,560 --> 00:12:28,240
what occurred so to break it down a

347
00:12:28,240 --> 00:12:30,399
little further and we have a successful

348
00:12:30,399 --> 00:12:31,839
authentication

349
00:12:31,839 --> 00:12:33,200
there is a username field in that

350
00:12:33,200 --> 00:12:35,040
message type but there is nothing there

351
00:12:35,040 --> 00:12:37,440
unfortunately but we do have the ip

352
00:12:37,440 --> 00:12:38,880
address that that screen sharing came

353
00:12:38,880 --> 00:12:40,240
from which is extremely useful because

354
00:12:40,240 --> 00:12:42,639
then we can see that lateral movement

355
00:12:42,639 --> 00:12:44,880
and then last we have the type which is

356
00:12:44,880 --> 00:12:46,560
what exactly occurred

357
00:12:46,560 --> 00:12:50,000
and that is a guest request for control

358
00:12:50,000 --> 00:12:52,160
now this message is pretty much unique

359
00:12:52,160 --> 00:12:53,600
just to the screen sharing d there's

360
00:12:53,600 --> 00:12:55,519
going to be different data per each type

361
00:12:55,519 --> 00:12:57,600
of process message this is just use an

362
00:12:57,600 --> 00:13:00,079
example now again i mentioned there's 27

363
00:13:00,079 --> 00:13:02,320
other types of log fields not all log

364
00:13:02,320 --> 00:13:04,079
fields are going to have or be populated

365
00:13:04,079 --> 00:13:06,800
with data but in this case if you look

366
00:13:06,800 --> 00:13:09,680
down below the all messages time

367
00:13:09,680 --> 00:13:11,200
option you can see that there is

368
00:13:11,200 --> 00:13:13,360
subsystem and category which are blank

369
00:13:13,360 --> 00:13:15,279
uh your activity id is zero and your

370
00:13:15,279 --> 00:13:16,639
thread id

371
00:13:16,639 --> 00:13:18,880
and pid are also there so if we wanted

372
00:13:18,880 --> 00:13:20,639
to take a deeper dive we could use that

373
00:13:20,639 --> 00:13:22,079
and try and correlate some of those

374
00:13:22,079 --> 00:13:24,240
processes

375
00:13:24,240 --> 00:13:25,519
i'm going to hand it over to jay this is

376
00:13:25,519 --> 00:13:26,720
going to talk about the different types

377
00:13:26,720 --> 00:13:29,120
of logs yeah thanks so here previously

378
00:13:29,120 --> 00:13:31,040
mentioned

379
00:13:31,040 --> 00:13:32,399
mac was using a series of different

380
00:13:32,399 --> 00:13:34,399
blogs in the past and as we've gone

381
00:13:34,399 --> 00:13:35,920
through some response investigations

382
00:13:35,920 --> 00:13:38,639
over the year years we've noticed that

383
00:13:38,639 --> 00:13:40,959
the unified log has a lot more data for

384
00:13:40,959 --> 00:13:42,160
us to parse

385
00:13:42,160 --> 00:13:44,720
um so unified log generally looking at

386
00:13:44,720 --> 00:13:46,880
about 28 to 30 days of retention on a

387
00:13:46,880 --> 00:13:49,040
heavily used system on some less used

388
00:13:49,040 --> 00:13:51,839
systems between weeks and months um

389
00:13:51,839 --> 00:13:53,360
and what we're looking at from this

390
00:13:53,360 --> 00:13:55,279
heavily used is about 30 to 50 million

391
00:13:55,279 --> 00:13:58,079
records um comprising about 400 to 800

392
00:13:58,079 --> 00:14:00,160
megs of data on the log archive and

393
00:14:00,160 --> 00:14:01,440
eric's going to show you how to get the

394
00:14:01,440 --> 00:14:03,440
log archive i'm going to be output to

395
00:14:03,440 --> 00:14:05,040
play tax running anywhere from two to

396
00:14:05,040 --> 00:14:07,040
nine gigs i'd say nine gigabytes is on

397
00:14:07,040 --> 00:14:08,800
the high end for a heavily system like

398
00:14:08,800 --> 00:14:11,199
mine um for less these systems will be

399
00:14:11,199 --> 00:14:13,279
lower gigabyte level but definitely a

400
00:14:13,279 --> 00:14:14,800
lot of data to work through when we're

401
00:14:14,800 --> 00:14:16,959
doing forensics for comparison we were

402
00:14:16,959 --> 00:14:18,560
looking at apple system log before and

403
00:14:18,560 --> 00:14:21,760
just system.log normal system log um

404
00:14:21,760 --> 00:14:23,600
we're looking at somewhere in the 40 to

405
00:14:23,600 --> 00:14:25,839
60 megabyte range for both um somewhere

406
00:14:25,839 --> 00:14:28,720
between 200 to 500k records

407
00:14:28,720 --> 00:14:30,399
and then retention for apple system log

408
00:14:30,399 --> 00:14:31,839
we're saying the full data set for seven

409
00:14:31,839 --> 00:14:33,360
days you have some additional logging

410
00:14:33,360 --> 00:14:35,279
that goes back up to a year

411
00:14:35,279 --> 00:14:37,279
um then for system.log gets about seven

412
00:14:37,279 --> 00:14:38,639
to fourteen days depending on how you

413
00:14:38,639 --> 00:14:40,880
configure uh nc asl

414
00:14:40,880 --> 00:14:42,720
and then you're getting that 200 400k

415
00:14:42,720 --> 00:14:44,959
record level uh but the real i think key

416
00:14:44,959 --> 00:14:47,279
takeaway here is that previously if we

417
00:14:47,279 --> 00:14:48,959
had a lot of systems to get data for we

418
00:14:48,959 --> 00:14:50,320
could pull out let's say 100 apple

419
00:14:50,320 --> 00:14:52,240
system logs sure we would end up with

420
00:14:52,240 --> 00:14:54,000
four gigs of data and we can parse

421
00:14:54,000 --> 00:14:55,040
through that or work through that

422
00:14:55,040 --> 00:14:57,519
slightly painfully but still possible

423
00:14:57,519 --> 00:14:59,199
but about 100 systems to look at for

424
00:14:59,199 --> 00:15:00,880
instance response and there were nine

425
00:15:00,880 --> 00:15:03,120
gigs each for that for the unified log

426
00:15:03,120 --> 00:15:04,560
pressing through 900 gigs of data

427
00:15:04,560 --> 00:15:06,560
becomes substantially uh has there's

428
00:15:06,560 --> 00:15:08,480
especially more effort required we need

429
00:15:08,480 --> 00:15:10,000
to get into analysis platform get a

430
00:15:10,000 --> 00:15:12,399
beefier machine a different approach to

431
00:15:12,399 --> 00:15:14,320
go about this so this is kind of where

432
00:15:14,320 --> 00:15:15,600
this talk is going we're going to talk

433
00:15:15,600 --> 00:15:16,399
about

434
00:15:16,399 --> 00:15:18,160
how to cut this data down and effect the

435
00:15:18,160 --> 00:15:20,240
way we're scrolling through millions and

436
00:15:20,240 --> 00:15:22,000
millions of records um but we need to

437
00:15:22,000 --> 00:15:25,560
find answers quickly

438
00:15:27,839 --> 00:15:29,120
so we've talked a little bit about the

439
00:15:29,120 --> 00:15:31,360
unified log itself but how do you get

440
00:15:31,360 --> 00:15:33,440
the unified block

441
00:15:33,440 --> 00:15:34,800
so there's two ways that you can go

442
00:15:34,800 --> 00:15:36,560
about retrieving it from a forensic

443
00:15:36,560 --> 00:15:38,320
standpoint there's pretty much one main

444
00:15:38,320 --> 00:15:39,759
way that we go about that and that's

445
00:15:39,759 --> 00:15:41,839
from a dead disk so typically

446
00:15:41,839 --> 00:15:44,560
investigations will have an image

447
00:15:44,560 --> 00:15:46,320
that has been sent to us and we'll use a

448
00:15:46,320 --> 00:15:48,560
tool like blacklight to go through and

449
00:15:48,560 --> 00:15:49,519
pull

450
00:15:49,519 --> 00:15:51,440
in this case manually pull

451
00:15:51,440 --> 00:15:54,639
the uuid text as well as the diagnostics

452
00:15:54,639 --> 00:15:55,839
directories

453
00:15:55,839 --> 00:15:57,759
and then from there we can take both of

454
00:15:57,759 --> 00:15:59,040
those folders

455
00:15:59,040 --> 00:16:02,000
we'll put it on a desktop for example

456
00:16:02,000 --> 00:16:03,600
move both of those directories into

457
00:16:03,600 --> 00:16:05,199
additional folder

458
00:16:05,199 --> 00:16:07,279
and then from there we'll give it a log

459
00:16:07,279 --> 00:16:09,920
archive extension now what that does is

460
00:16:09,920 --> 00:16:12,160
it creates this log archive that is

461
00:16:12,160 --> 00:16:13,920
readable for apple

462
00:16:13,920 --> 00:16:16,000
so we once we have that dot log archive

463
00:16:16,000 --> 00:16:18,320
we can now use apple's tools to go

464
00:16:18,320 --> 00:16:21,440
through and parse the unified log

465
00:16:21,440 --> 00:16:22,720
now the other way you can go about

466
00:16:22,720 --> 00:16:24,079
getting a

467
00:16:24,079 --> 00:16:26,880
the actual log archive is do a live

468
00:16:26,880 --> 00:16:29,040
system and this is much easier

469
00:16:29,040 --> 00:16:31,680
it's pretty much one line it's sudo uh

470
00:16:31,680 --> 00:16:33,759
log collect and i'll give a little demo

471
00:16:33,759 --> 00:16:35,440
of how easy that can be

472
00:16:35,440 --> 00:16:37,519
now this log command that apple provides

473
00:16:37,519 --> 00:16:39,440
does have additional features

474
00:16:39,440 --> 00:16:41,120
in addition to collect you can also

475
00:16:41,120 --> 00:16:44,720
config erase show stream and stat

476
00:16:44,720 --> 00:16:46,480
the ones that are useful those commands

477
00:16:46,480 --> 00:16:48,720
that are really useful to us are the log

478
00:16:48,720 --> 00:16:50,399
collect and the logs show

479
00:16:50,399 --> 00:16:51,920
the log stream is going to give you a

480
00:16:51,920 --> 00:16:53,920
live view of all the logs that are being

481
00:16:53,920 --> 00:16:55,600
generated on the system

482
00:16:55,600 --> 00:16:57,440
at the current point in time there is

483
00:16:57,440 --> 00:16:59,040
the observer effect that comes with that

484
00:16:59,040 --> 00:17:01,439
tower

485
00:17:01,600 --> 00:17:03,839
so going back to the disk this is what

486
00:17:03,839 --> 00:17:06,079
the actual directories look like

487
00:17:06,079 --> 00:17:07,679
so on the left hand side you have your

488
00:17:07,679 --> 00:17:09,280
diagnostics directory now this is going

489
00:17:09,280 --> 00:17:11,359
to have information such as high volume

490
00:17:11,359 --> 00:17:14,720
persist sign post special time sync now

491
00:17:14,720 --> 00:17:16,959
these are where all your trace a3 files

492
00:17:16,959 --> 00:17:18,880
are going to be located

493
00:17:18,880 --> 00:17:20,640
one thing to note we have not observed

494
00:17:20,640 --> 00:17:23,439
any data in the high volume yet that's

495
00:17:23,439 --> 00:17:24,959
still been blank we're not quite sure

496
00:17:24,959 --> 00:17:26,880
what's going to go there

497
00:17:26,880 --> 00:17:28,559
on the right side you have your uuid

498
00:17:28,559 --> 00:17:30,000
text this is going to be where your

499
00:17:30,000 --> 00:17:31,840
supporting files are

500
00:17:31,840 --> 00:17:32,960
as you can see they're in a different

501
00:17:32,960 --> 00:17:34,640
format

502
00:17:34,640 --> 00:17:36,720
they're not a dot trace v3 they're in

503
00:17:36,720 --> 00:17:40,640
this strange randomized character string

504
00:17:40,720 --> 00:17:42,320
um so i'm going to skip through these

505
00:17:42,320 --> 00:17:44,080
these are just the help pages i'm going

506
00:17:44,080 --> 00:17:45,600
to go to a little demo of how to

507
00:17:45,600 --> 00:17:47,679
actually use the log command

508
00:17:47,679 --> 00:17:49,600
so this is a vm system that i have

509
00:17:49,600 --> 00:17:50,640
running

510
00:17:50,640 --> 00:17:51,600
and the command that you're going to

511
00:17:51,600 --> 00:17:54,320
want to run is sudo log collect now what

512
00:17:54,320 --> 00:17:56,160
this is going to do is generate that dot

513
00:17:56,160 --> 00:17:58,480
log archive that you can then use to

514
00:17:58,480 --> 00:18:01,840
parse through all the unified log data

515
00:18:01,840 --> 00:18:04,000
so you run this it's going to ask for

516
00:18:04,000 --> 00:18:05,520
password

517
00:18:05,520 --> 00:18:06,960
and in this case we're going to get an

518
00:18:06,960 --> 00:18:09,280
error because it is on a vm so but after

519
00:18:09,280 --> 00:18:11,200
that it will run and in the directory

520
00:18:11,200 --> 00:18:14,480
that you were in you'll see this new

521
00:18:14,480 --> 00:18:16,480
system log dot archive now this is the

522
00:18:16,480 --> 00:18:18,080
unified log this is the data that you

523
00:18:18,080 --> 00:18:20,000
want to use to be able to start parsing

524
00:18:20,000 --> 00:18:22,240
through

525
00:18:24,400 --> 00:18:27,360
so parsing unified log will hand it over

526
00:18:27,360 --> 00:18:27,760
all to

527
00:18:27,760 --> 00:18:29,919
thanks sir um so once we have that log

528
00:18:29,919 --> 00:18:32,960
archive um either these are collect we

529
00:18:32,960 --> 00:18:35,360
pull from the disk marines log show and

530
00:18:35,360 --> 00:18:38,320
gather plain text data our next step is

531
00:18:38,320 --> 00:18:40,400
to parse it and get it in a format that

532
00:18:40,400 --> 00:18:41,760
we can digest and then we can do

533
00:18:41,760 --> 00:18:44,080
analysis on um because enough.archive

534
00:18:44,080 --> 00:18:45,520
format is not really useful to us i

535
00:18:45,520 --> 00:18:46,799
can't just correct that and get an

536
00:18:46,799 --> 00:18:48,480
answer we have to transform it in

537
00:18:48,480 --> 00:18:51,200
another way to operationalize it and

538
00:18:51,200 --> 00:18:53,200
that guy

539
00:18:53,200 --> 00:18:54,080
so

540
00:18:54,080 --> 00:18:55,440
here are just a couple methods we've

541
00:18:55,440 --> 00:18:57,120
used to look through the unified blog

542
00:18:57,120 --> 00:18:58,240
there are more tools out there that you

543
00:18:58,240 --> 00:18:59,919
can use to parse it to cut the data in

544
00:18:59,919 --> 00:19:01,919
different ways or visualize it um this

545
00:19:01,919 --> 00:19:03,360
is just some of our experience and some

546
00:19:03,360 --> 00:19:04,799
of the knowledge we've gathered so we're

547
00:19:04,799 --> 00:19:06,720
sharing this with you today um so the

548
00:19:06,720 --> 00:19:08,000
first one is you get your kosher's

549
00:19:08,000 --> 00:19:10,400
unified blog reader he put this out i

550
00:19:10,400 --> 00:19:12,160
believe last year

551
00:19:12,160 --> 00:19:14,640
python based tool open source available

552
00:19:14,640 --> 00:19:16,400
on github pretty easily

553
00:19:16,400 --> 00:19:18,240
some filtering capabilities works on

554
00:19:18,240 --> 00:19:19,679
multiple platforms so it's a python

555
00:19:19,679 --> 00:19:21,440
based we've had a lot of success with it

556
00:19:21,440 --> 00:19:23,440
i think it runs pretty well this is very

557
00:19:23,440 --> 00:19:24,880
good when you have a unified log pulled

558
00:19:24,880 --> 00:19:27,120
off of systems so if you want to gather

559
00:19:27,120 --> 00:19:29,039
100 systems and do some quick analysis

560
00:19:29,039 --> 00:19:31,039
and cut the data really quickly um it'll

561
00:19:31,039 --> 00:19:32,960
interpret the log archive format and

562
00:19:32,960 --> 00:19:34,400
you'll get plain text results that you

563
00:19:34,400 --> 00:19:36,960
can use um before obviously they just

564
00:19:36,960 --> 00:19:38,799
generate gigs and gigs of data just like

565
00:19:38,799 --> 00:19:40,880
any other method so if you have a lot of

566
00:19:40,880 --> 00:19:43,120
systems to look at just be careful as

567
00:19:43,120 --> 00:19:44,559
you go about this

568
00:19:44,559 --> 00:19:46,480
the second tool we've used is uh black

569
00:19:46,480 --> 00:19:47,440
light

570
00:19:47,440 --> 00:19:49,679
from black black black bag so we're

571
00:19:49,679 --> 00:19:51,600
doing forensic disk analysis this

572
00:19:51,600 --> 00:19:52,720
integrates really well into the

573
00:19:52,720 --> 00:19:55,280
workflows because black bag blacklight

574
00:19:55,280 --> 00:19:57,360
has keyword searching capabilities it

575
00:19:57,360 --> 00:19:59,360
has filtering capabilities and we can

576
00:19:59,360 --> 00:20:00,880
just take a look at it directly after

577
00:20:00,880 --> 00:20:02,400
looking at a disk image there's no need

578
00:20:02,400 --> 00:20:04,880
for export from the disk image or from

579
00:20:04,880 --> 00:20:06,559
the ui to get the

580
00:20:06,559 --> 00:20:08,960
constituent private part db diagnostics

581
00:20:08,960 --> 00:20:11,120
and uuid text directories they can just

582
00:20:11,120 --> 00:20:14,080
view it in the system logs feature in

583
00:20:14,080 --> 00:20:15,679
blackway

584
00:20:15,679 --> 00:20:17,280
obviously this is a commercial ue based

585
00:20:17,280 --> 00:20:18,799
application so

586
00:20:18,799 --> 00:20:20,480
there's some licensing required

587
00:20:20,480 --> 00:20:22,400
um you need the hardware et cetera et

588
00:20:22,400 --> 00:20:24,000
cetera along with the disk image to take

589
00:20:24,000 --> 00:20:26,400
a look at it but it does provide some uh

590
00:20:26,400 --> 00:20:27,679
good features for us for doing

591
00:20:27,679 --> 00:20:30,240
conventional disk forensics uh last one

592
00:20:30,240 --> 00:20:32,960
here is the log and log show command

593
00:20:32,960 --> 00:20:34,640
which is native to pretty much every

594
00:20:34,640 --> 00:20:36,559
modern version of mac os

595
00:20:36,559 --> 00:20:37,919
um so it has a lot of filtering

596
00:20:37,919 --> 00:20:39,600
capabilities predicate filtering we're

597
00:20:39,600 --> 00:20:41,600
going to talk about this pretty soon um

598
00:20:41,600 --> 00:20:43,679
but this is uh

599
00:20:43,679 --> 00:20:45,120
i think you know everyone can leverage

600
00:20:45,120 --> 00:20:46,640
it that's already installed on their mac

601
00:20:46,640 --> 00:20:47,600
but there's some issues we're going to

602
00:20:47,600 --> 00:20:48,960
talk about that come up when you're

603
00:20:48,960 --> 00:20:51,520
using log and log show uh these are just

604
00:20:51,520 --> 00:20:53,039
our main three

605
00:20:53,039 --> 00:20:56,320
tactics for parsing the log

606
00:20:57,280 --> 00:20:59,120
so just comparing the parsing outputs we

607
00:20:59,120 --> 00:21:00,559
wanted to do some validation on some of

608
00:21:00,559 --> 00:21:02,799
our test data so we read a few cases

609
00:21:02,799 --> 00:21:03,600
um

610
00:21:03,600 --> 00:21:05,840
in our test vms environmental systems

611
00:21:05,840 --> 00:21:07,600
just to make sure that all our different

612
00:21:07,600 --> 00:21:09,760
methods were parsing the data correctly

613
00:21:09,760 --> 00:21:11,280
and generally we're looking at unified

614
00:21:11,280 --> 00:21:13,600
log reader and black light this is just

615
00:21:13,600 --> 00:21:17,440
a test 10 15. this is a 10 14 6 vm um

616
00:21:17,440 --> 00:21:19,360
that we tested on reconstructed log

617
00:21:19,360 --> 00:21:21,679
archive from the disk directories um and

618
00:21:21,679 --> 00:21:24,080
created.log archive file so we got the

619
00:21:24,080 --> 00:21:25,840
same results from unified log reader and

620
00:21:25,840 --> 00:21:27,600
blacklight the data we expected to be

621
00:21:27,600 --> 00:21:29,120
there was there

622
00:21:29,120 --> 00:21:31,120
and when we went to log show the closest

623
00:21:31,120 --> 00:21:32,960
recreation was to do the info and

624
00:21:32,960 --> 00:21:34,799
signpost commands

625
00:21:34,799 --> 00:21:36,320
in that case we only got six additional

626
00:21:36,320 --> 00:21:38,000
records which were just time sync

627
00:21:38,000 --> 00:21:40,480
entries um this was system boots

628
00:21:40,480 --> 00:21:43,120
some system clock adjustments um because

629
00:21:43,120 --> 00:21:44,960
we use the vms to suspend it and do all

630
00:21:44,960 --> 00:21:46,720
these strange things with it system

631
00:21:46,720 --> 00:21:48,320
clock adjustments are pretty frequent

632
00:21:48,320 --> 00:21:49,280
actually

633
00:21:49,280 --> 00:21:50,640
but generally we're seeing the same

634
00:21:50,640 --> 00:21:51,919
amount of data between these different

635
00:21:51,919 --> 00:21:53,840
methods um and really the critical data

636
00:21:53,840 --> 00:21:55,679
we need for instant response is all

637
00:21:55,679 --> 00:21:58,080
there

638
00:21:58,080 --> 00:21:59,760
so we did find this one issue and when

639
00:21:59,760 --> 00:22:01,280
we went out to make this presentation we

640
00:22:01,280 --> 00:22:02,799
weren't actually expecting to find this

641
00:22:02,799 --> 00:22:05,360
problem with the log command um but

642
00:22:05,360 --> 00:22:06,559
don't quickly run through what you're

643
00:22:06,559 --> 00:22:08,799
looking at on the screen so on this vm

644
00:22:08,799 --> 00:22:11,600
we were gathering the data from um we

645
00:22:11,600 --> 00:22:13,039
suspend it and resume it in this

646
00:22:13,039 --> 00:22:14,880
particular vm we last suspended it in

647
00:22:14,880 --> 00:22:18,000
november of 2019 and started it again on

648
00:22:18,000 --> 00:22:20,159
march 1st of this year just to grab some

649
00:22:20,159 --> 00:22:21,520
screenshots

650
00:22:21,520 --> 00:22:23,760
but if you look at the slides here these

651
00:22:23,760 --> 00:22:26,720
are the um this is the same log parts

652
00:22:26,720 --> 00:22:28,240
through three different tools the first

653
00:22:28,240 --> 00:22:30,400
one is log show and what you'll notice

654
00:22:30,400 --> 00:22:32,880
is that the message shows events being

655
00:22:32,880 --> 00:22:35,039
written out to a

656
00:22:35,039 --> 00:22:37,440
core analytics file uh but the card is

657
00:22:37,440 --> 00:22:40,480
filed dated from march 1st of 1535

658
00:22:40,480 --> 00:22:43,679
and 10 seconds pacific standard time

659
00:22:43,679 --> 00:22:44,960
um

660
00:22:44,960 --> 00:22:46,240
but

661
00:22:46,240 --> 00:22:47,760
the log showman is showing this as

662
00:22:47,760 --> 00:22:50,960
occurring on november 6 2019.

663
00:22:50,960 --> 00:22:52,880
when we push this through unified log

664
00:22:52,880 --> 00:22:54,640
reader we're getting the correct date

665
00:22:54,640 --> 00:22:59,200
march 1st 2020 at 23 35 10 utc

666
00:22:59,200 --> 00:23:01,120
um and we went through back to the data

667
00:23:01,120 --> 00:23:02,240
and this really initially came up

668
00:23:02,240 --> 00:23:03,280
because i was looking through the data

669
00:23:03,280 --> 00:23:04,799
and realized there were no march first

670
00:23:04,799 --> 00:23:07,760
events i know we had resumed the vlogs

671
00:23:07,760 --> 00:23:09,760
the system clock was adjusted i would

672
00:23:09,760 --> 00:23:11,360
fully expect events to be written for

673
00:23:11,360 --> 00:23:14,000
that time frame and the log show parsing

674
00:23:14,000 --> 00:23:16,159
showed no events from that date

675
00:23:16,159 --> 00:23:17,360
and this is only one example there are

676
00:23:17,360 --> 00:23:19,919
multiple events that have a message that

677
00:23:19,919 --> 00:23:22,240
contain the date of the event as well

678
00:23:22,240 --> 00:23:23,840
and there's a significant mismatch where

679
00:23:23,840 --> 00:23:26,640
we see march first in the message

680
00:23:26,640 --> 00:23:28,640
but the time stamp for vlog show shows

681
00:23:28,640 --> 00:23:31,520
us november 6 2019.

682
00:23:31,520 --> 00:23:32,880
um so we're still trying to characterize

683
00:23:32,880 --> 00:23:34,080
this this is a pretty

684
00:23:34,080 --> 00:23:35,840
relatively recent development for us as

685
00:23:35,840 --> 00:23:37,440
we've gone through this i think it's

686
00:23:37,440 --> 00:23:39,600
kind of maybe shaking some of our

687
00:23:39,600 --> 00:23:41,120
fundamental assumptions about apple's

688
00:23:41,120 --> 00:23:43,120
first party tools um so let's talk about

689
00:23:43,120 --> 00:23:45,600
understand this i think to the fullest

690
00:23:45,600 --> 00:23:47,440
and characterize the boundaries of this

691
00:23:47,440 --> 00:23:49,440
and and get a bug report out there so

692
00:23:49,440 --> 00:23:50,799
this can get fixed

693
00:23:50,799 --> 00:23:52,799
but i think this really goes to show you

694
00:23:52,799 --> 00:23:54,080
know one of the lessons from forensics

695
00:23:54,080 --> 00:23:56,720
and this response is use multiple tools

696
00:23:56,720 --> 00:23:58,240
uh when we start comparing our outputs

697
00:23:58,240 --> 00:23:59,600
against multiple tools this is what

698
00:23:59,600 --> 00:24:00,480
happened

699
00:24:00,480 --> 00:24:01,840
sometimes the tool you trusted and

700
00:24:01,840 --> 00:24:03,120
assumed worked

701
00:24:03,120 --> 00:24:04,559
in a new situation or new case just

702
00:24:04,559 --> 00:24:05,840
simply doesn't work the way you think it

703
00:24:05,840 --> 00:24:06,720
does

704
00:24:06,720 --> 00:24:07,600
so

705
00:24:07,600 --> 00:24:09,200
we're going to keep taking digging into

706
00:24:09,200 --> 00:24:10,960
this little issue here and see if we can

707
00:24:10,960 --> 00:24:13,919
fully characterize it

708
00:24:14,559 --> 00:24:16,240
all right so we've gone over the unified

709
00:24:16,240 --> 00:24:18,480
blog how to acquire it and the next step

710
00:24:18,480 --> 00:24:20,720
is actually going through and filtering

711
00:24:20,720 --> 00:24:23,840
down to the data that you're looking for

712
00:24:23,840 --> 00:24:26,000
so we have as forensicators an old

713
00:24:26,000 --> 00:24:27,679
faithful approach and that's constantly

714
00:24:27,679 --> 00:24:29,279
just grabbing through everything it's

715
00:24:29,279 --> 00:24:30,480
reliable

716
00:24:30,480 --> 00:24:32,559
it always works but it does have some

717
00:24:32,559 --> 00:24:33,840
drawbacks

718
00:24:33,840 --> 00:24:36,720
one it's slow uh now in the way we would

719
00:24:36,720 --> 00:24:38,480
be prepping the unified log we would

720
00:24:38,480 --> 00:24:40,640
output everything to its own text file

721
00:24:40,640 --> 00:24:42,320
and that text file

722
00:24:42,320 --> 00:24:44,080
can range from anywhere from one gig to

723
00:24:44,080 --> 00:24:46,240
nine gigs and that takes a while to both

724
00:24:46,240 --> 00:24:47,440
parse through

725
00:24:47,440 --> 00:24:49,200
as well as if you have system storage

726
00:24:49,200 --> 00:24:51,760
constraints that could be an issue there

727
00:24:51,760 --> 00:24:53,919
and then in terms of syntax when you're

728
00:24:53,919 --> 00:24:54,960
grepping

729
00:24:54,960 --> 00:24:56,240
you don't know if you're always using

730
00:24:56,240 --> 00:24:58,400
the correct syntax with predicates uh

731
00:24:58,400 --> 00:24:59,919
pretty good filtering that does help you

732
00:24:59,919 --> 00:25:02,480
out a little bit

733
00:25:02,480 --> 00:25:04,400
so in terms of narrowing down the

734
00:25:04,400 --> 00:25:06,240
information we're looking for there is

735
00:25:06,240 --> 00:25:07,679
filtering

736
00:25:07,679 --> 00:25:09,760
now there's two ways you can filter you

737
00:25:09,760 --> 00:25:11,600
can filter the log collect command which

738
00:25:11,600 --> 00:25:12,640
is the one i talked about and

739
00:25:12,640 --> 00:25:14,559
demonstrated earlier but you can also

740
00:25:14,559 --> 00:25:16,320
use the log show command now we

741
00:25:16,320 --> 00:25:18,400
recommend using the log show as log

742
00:25:18,400 --> 00:25:20,080
collect if you start filtering from when

743
00:25:20,080 --> 00:25:21,520
you're collecting that information

744
00:25:21,520 --> 00:25:23,120
you're not getting the full picture and

745
00:25:23,120 --> 00:25:24,799
everything from the log you're narrowing

746
00:25:24,799 --> 00:25:26,720
your scope and that could be detrimental

747
00:25:26,720 --> 00:25:28,320
if you have events that start ranging

748
00:25:28,320 --> 00:25:29,840
outside of that scope

749
00:25:29,840 --> 00:25:31,600
so the log show command

750
00:25:31,600 --> 00:25:33,679
is what we use to go and parse and

751
00:25:33,679 --> 00:25:35,919
really filter down that dot lock archive

752
00:25:35,919 --> 00:25:37,200
file

753
00:25:37,200 --> 00:25:38,960
now there's a bunch of different options

754
00:25:38,960 --> 00:25:40,480
that we could use

755
00:25:40,480 --> 00:25:42,480
so typically what i'll use is the dash

756
00:25:42,480 --> 00:25:44,799
dash back trace debug info law signpost

757
00:25:44,799 --> 00:25:46,960
that just includes all those logs to

758
00:25:46,960 --> 00:25:48,320
make sure we're getting as much

759
00:25:48,320 --> 00:25:50,240
information as possible

760
00:25:50,240 --> 00:25:52,080
and the the other two types of filtering

761
00:25:52,080 --> 00:25:54,799
are by size and by timeline now size

762
00:25:54,799 --> 00:25:56,960
isn't used too often uh usually only if

763
00:25:56,960 --> 00:25:58,720
you have a size constraint but the

764
00:25:58,720 --> 00:26:00,960
timeline is very effective especially if

765
00:26:00,960 --> 00:26:02,880
you've identified uh

766
00:26:02,880 --> 00:26:06,320
an incident or an event of interest and

767
00:26:06,320 --> 00:26:08,240
then you can pivot from that time frame

768
00:26:08,240 --> 00:26:10,080
and narrow down on events around that

769
00:26:10,080 --> 00:26:11,360
and rather than using the entire

770
00:26:11,360 --> 00:26:12,960
timeline that you'll have you'll just

771
00:26:12,960 --> 00:26:14,320
have a subset which makes it a lot

772
00:26:14,320 --> 00:26:17,279
easier to go through all that data

773
00:26:17,279 --> 00:26:18,480
and the other

774
00:26:18,480 --> 00:26:20,000
type of filtering that we use is

775
00:26:20,000 --> 00:26:21,600
predicate filtering now predicate

776
00:26:21,600 --> 00:26:23,440
filtering you can think of as keyword

777
00:26:23,440 --> 00:26:25,279
searching essentially

778
00:26:25,279 --> 00:26:26,880
and so i have an example to kind of

779
00:26:26,880 --> 00:26:28,400
demonstrate what this is

780
00:26:28,400 --> 00:26:29,440
so

781
00:26:29,440 --> 00:26:31,760
we have our user one unified log.log

782
00:26:31,760 --> 00:26:33,600
archive and again as a reminder that is

783
00:26:33,600 --> 00:26:35,200
our unified blog that has been

784
00:26:35,200 --> 00:26:37,440
compressed in a way that we can now view

785
00:26:37,440 --> 00:26:38,559
it

786
00:26:38,559 --> 00:26:40,320
so we use the log show command here in

787
00:26:40,320 --> 00:26:42,320
red to then parse through that log

788
00:26:42,320 --> 00:26:44,559
archive we include the dash dash info

789
00:26:44,559 --> 00:26:47,360
back trace debug etc to include all that

790
00:26:47,360 --> 00:26:48,799
data that we have

791
00:26:48,799 --> 00:26:50,720
and then we get to the blue here and so

792
00:26:50,720 --> 00:26:52,240
this is where we start our predicate

793
00:26:52,240 --> 00:26:54,559
filtering so in this particular instance

794
00:26:54,559 --> 00:26:56,880
we're using the predicate event message

795
00:26:56,880 --> 00:26:59,200
now to simplify things you can use or

796
00:26:59,200 --> 00:27:01,440
think about these predicates this event

797
00:27:01,440 --> 00:27:03,840
message as basically the log field now

798
00:27:03,840 --> 00:27:05,679
they're not exactly one to

799
00:27:05,679 --> 00:27:07,360
but that's the way we go about it so the

800
00:27:07,360 --> 00:27:09,279
event message correlates to the message

801
00:27:09,279 --> 00:27:10,640
field that i discussed earlier when i'm

802
00:27:10,640 --> 00:27:12,880
showing that console view

803
00:27:12,880 --> 00:27:14,559
and so in this case we're looking for

804
00:27:14,559 --> 00:27:18,640
any word remote in that event message

805
00:27:18,640 --> 00:27:20,480
and now once we get there we'll output

806
00:27:20,480 --> 00:27:22,159
this hold the standard out it to a text

807
00:27:22,159 --> 00:27:25,360
file called uh a well user one remote

808
00:27:25,360 --> 00:27:26,960
and now that new text file that we have

809
00:27:26,960 --> 00:27:28,960
rather than being nine gigs if it was

810
00:27:28,960 --> 00:27:31,440
the entire unified log we've now

811
00:27:31,440 --> 00:27:33,600
filtered down to just event.remote and

812
00:27:33,600 --> 00:27:34,880
it's something much more manageable you

813
00:27:34,880 --> 00:27:36,159
can now break through

814
00:27:36,159 --> 00:27:38,480
for maybe additional uh keywords of

815
00:27:38,480 --> 00:27:39,840
interest or just scroll up and down

816
00:27:39,840 --> 00:27:42,000
depending on the size

817
00:27:42,000 --> 00:27:44,240
so these predicate filtering uh is

818
00:27:44,240 --> 00:27:46,399
extremely powerful um and so here at

819
00:27:46,399 --> 00:27:47,919
crowdstrike we've built a couple of

820
00:27:47,919 --> 00:27:49,919
predicate filters that we use and are

821
00:27:49,919 --> 00:27:51,760
pretty much our go-to's now they don't

822
00:27:51,760 --> 00:27:54,159
always catch things but we usually start

823
00:27:54,159 --> 00:27:55,600
with there's eight of them that we have

824
00:27:55,600 --> 00:27:57,279
here we'll start with these eight and

825
00:27:57,279 --> 00:27:59,039
usually they will give us a little bit

826
00:27:59,039 --> 00:28:01,200
of information that we can then pivot on

827
00:28:01,200 --> 00:28:03,200
to look for additional

828
00:28:03,200 --> 00:28:05,039
evidence of an intrusion

829
00:28:05,039 --> 00:28:07,760
so these first few are pretty simple

830
00:28:07,760 --> 00:28:09,520
first top left is suit up this is going

831
00:28:09,520 --> 00:28:12,399
to be any elevated privilege command

832
00:28:12,399 --> 00:28:14,320
you have your login events

833
00:28:14,320 --> 00:28:16,720
tccd that's going to be when their

834
00:28:16,720 --> 00:28:18,720
permission or access violation issues

835
00:28:18,720 --> 00:28:20,880
now this could be useful if you have one

836
00:28:20,880 --> 00:28:22,559
application that's calling another

837
00:28:22,559 --> 00:28:24,080
application so for example if you had

838
00:28:24,080 --> 00:28:26,080
quicktime calling terminal that would be

839
00:28:26,080 --> 00:28:28,320
somewhat suspicious um so that's pretty

840
00:28:28,320 --> 00:28:30,640
useful to us and then we have our ssh

841
00:28:30,640 --> 00:28:32,720
ssh from max at least from our

842
00:28:32,720 --> 00:28:34,080
standpoint is one of the most used

843
00:28:34,080 --> 00:28:35,679
lateral movement techniques that we see

844
00:28:35,679 --> 00:28:37,039
out there

845
00:28:37,039 --> 00:28:38,320
so especially if we're wondering how

846
00:28:38,320 --> 00:28:40,640
someone got onto a box this is where we

847
00:28:40,640 --> 00:28:42,720
look at them

848
00:28:42,720 --> 00:28:44,320
now with predicate filtering you can get

849
00:28:44,320 --> 00:28:45,760
a little more advanced you can start

850
00:28:45,760 --> 00:28:47,840
including some logic in there um as you

851
00:28:47,840 --> 00:28:49,360
see you can have and and so we're

852
00:28:49,360 --> 00:28:51,840
looking for both the process equals text

853
00:28:51,840 --> 00:28:56,000
d and the sender equals io kit

854
00:28:56,399 --> 00:28:58,480
with this particular

855
00:28:58,480 --> 00:29:00,159
predicate we're looking for any

856
00:29:00,159 --> 00:29:02,000
successful kernel extensions that were

857
00:29:02,000 --> 00:29:03,760
added now this is not exactly useful

858
00:29:03,760 --> 00:29:04,640
anymore

859
00:29:04,640 --> 00:29:06,960
but it shows an example the other three

860
00:29:06,960 --> 00:29:08,799
are screen sharing

861
00:29:08,799 --> 00:29:10,320
looking for session creation destruction

862
00:29:10,320 --> 00:29:11,440
events that's what we're going to look

863
00:29:11,440 --> 00:29:12,880
for if you want to see what occurred and

864
00:29:12,880 --> 00:29:14,799
maybe the time frame of the session

865
00:29:14,799 --> 00:29:18,399
as well as the keychain db unlock

866
00:29:18,480 --> 00:29:21,200
so now we've gotten through both

867
00:29:21,200 --> 00:29:23,200
all the the what the unified log is how

868
00:29:23,200 --> 00:29:25,440
to acquire it and how to now filter down

869
00:29:25,440 --> 00:29:27,840
so we want to provide a mock scenario

870
00:29:27,840 --> 00:29:29,679
that we've created that's not it's based

871
00:29:29,679 --> 00:29:31,039
off of what we've seen in the real world

872
00:29:31,039 --> 00:29:33,520
this is not actually client data

873
00:29:33,520 --> 00:29:35,760
and we want to go through how we would

874
00:29:35,760 --> 00:29:38,159
solve this type of investigation

875
00:29:38,159 --> 00:29:39,840
so typically what we'll get is we'll get

876
00:29:39,840 --> 00:29:41,919
a call from a client and they will give

877
00:29:41,919 --> 00:29:43,679
us some background on what occurred

878
00:29:43,679 --> 00:29:46,080
usually it's very uh brief and it's not

879
00:29:46,080 --> 00:29:48,320
detailed at all so in this case the

880
00:29:48,320 --> 00:29:50,080
client has reached out and they've

881
00:29:50,080 --> 00:29:52,080
identified that the user has noticed

882
00:29:52,080 --> 00:29:54,399
that events uh the exchange events were

883
00:29:54,399 --> 00:29:57,440
occurring on november 4th 2019.

884
00:29:57,440 --> 00:29:59,039
views reported that their mac was

885
00:29:59,039 --> 00:30:01,520
running slow uh and that an unknown

886
00:30:01,520 --> 00:30:03,200
application had requested them to type

887
00:30:03,200 --> 00:30:05,600
their password in multiple times so we

888
00:30:05,600 --> 00:30:07,600
would get this type of information and

889
00:30:07,600 --> 00:30:09,520
then use and go to the unified blog to

890
00:30:09,520 --> 00:30:11,279
see if we can dig a little deeper and

891
00:30:11,279 --> 00:30:13,120
find out what actually occurred so i'm

892
00:30:13,120 --> 00:30:14,320
going to hand it over to jays he's going

893
00:30:14,320 --> 00:30:16,640
to conduct the investigation

894
00:30:16,640 --> 00:30:18,559
right thanks sarah as it's worth noting

895
00:30:18,559 --> 00:30:20,240
when we do any of these investigations

896
00:30:20,240 --> 00:30:22,320
as part of our job we would pull a full

897
00:30:22,320 --> 00:30:24,240
disk image and look at a number of

898
00:30:24,240 --> 00:30:26,080
artifacts uh but we're showing you here

899
00:30:26,080 --> 00:30:27,840
is really the power of the unifi log how

900
00:30:27,840 --> 00:30:29,039
we can uncover a lot of the

901
00:30:29,039 --> 00:30:31,039
investigation from one processing

902
00:30:31,039 --> 00:30:32,559
artifact source just by parsing one

903
00:30:32,559 --> 00:30:34,399
single log um we can get a lot of

904
00:30:34,399 --> 00:30:36,880
answers quickly uh for the customer

905
00:30:36,880 --> 00:30:38,720
so like eric said um the user reported

906
00:30:38,720 --> 00:30:40,320
the mac is running slow

907
00:30:40,320 --> 00:30:42,159
under an application from them enter

908
00:30:42,159 --> 00:30:43,919
their password and they entered it who

909
00:30:43,919 --> 00:30:46,240
knows why um so we're gonna take a look

910
00:30:46,240 --> 00:30:47,520
at the unified log and look at a couple

911
00:30:47,520 --> 00:30:49,679
screenshots um to see one has occurred

912
00:30:49,679 --> 00:30:51,679
here um and just to

913
00:30:51,679 --> 00:30:53,360
reiterate what he said for those of you

914
00:30:53,360 --> 00:30:54,960
maybe my customers this is not any of

915
00:30:54,960 --> 00:30:56,960
your data this is no customer data this

916
00:30:56,960 --> 00:30:58,640
is just simulated based off of what

917
00:30:58,640 --> 00:31:01,519
we've seen in the field

918
00:31:01,840 --> 00:31:04,000
um so i hope you guys can see this show

919
00:31:04,000 --> 00:31:06,640
well up here um so looking for the

920
00:31:06,640 --> 00:31:08,559
predicates that eric introduced in the

921
00:31:08,559 --> 00:31:10,559
previous slides um the first thing we're

922
00:31:10,559 --> 00:31:13,200
taking a look at is sshd um so we look

923
00:31:13,200 --> 00:31:15,600
at sshd we see some ssh connections we

924
00:31:15,600 --> 00:31:18,320
see these uh connection closed events um

925
00:31:18,320 --> 00:31:20,640
accepted interactive for a certain user

926
00:31:20,640 --> 00:31:23,360
from an ip address and report provided

927
00:31:23,360 --> 00:31:25,519
in this scenario we would talk to the

928
00:31:25,519 --> 00:31:28,159
user say do you expect ssh out are you

929
00:31:28,159 --> 00:31:29,679
expecting inbound ssh and they'll

930
00:31:29,679 --> 00:31:31,519
probably also consult with the itt team

931
00:31:31,519 --> 00:31:33,519
for the organization to understand is

932
00:31:33,519 --> 00:31:35,440
ssh part of the verbal workflow and if

933
00:31:35,440 --> 00:31:37,440
so what would be indicative of it what

934
00:31:37,440 --> 00:31:39,519
ip coming from which accounts would you

935
00:31:39,519 --> 00:31:40,880
be using

936
00:31:40,880 --> 00:31:43,120
in this case uh we'll say that the user

937
00:31:43,120 --> 00:31:45,679
and the itc confirmed ssh should not use

938
00:31:45,679 --> 00:31:47,760
the environment somehow they've left it

939
00:31:47,760 --> 00:31:50,159
on enabled on the system so we see this

940
00:31:50,159 --> 00:31:52,720
inbound connection we have now an atomic

941
00:31:52,720 --> 00:31:55,200
indicator um this ip address we know

942
00:31:55,200 --> 00:31:57,760
they've been using this account john

943
00:31:57,760 --> 00:31:58,799
and we know that there's disconnect

944
00:31:58,799 --> 00:32:00,799
events we have a general time frame now

945
00:32:00,799 --> 00:32:02,799
we know there's a station play we know

946
00:32:02,799 --> 00:32:04,480
they probably have user credentials for

947
00:32:04,480 --> 00:32:06,960
at least one account um just based off

948
00:32:06,960 --> 00:32:09,200
of this activity so from here we can do

949
00:32:09,200 --> 00:32:11,039
additional predicted filtering but we

950
00:32:11,039 --> 00:32:12,799
can do additional prohibiting to

951
00:32:12,799 --> 00:32:14,559
understand what else has occurred but we

952
00:32:14,559 --> 00:32:15,919
have some key time frames of interest

953
00:32:15,919 --> 00:32:18,320
which is now november 4th 2019

954
00:32:18,320 --> 00:32:20,799
about 2 200 hours and

955
00:32:20,799 --> 00:32:23,120
22.40 approximately

956
00:32:23,120 --> 00:32:24,480
and we can do some additional pivoting

957
00:32:24,480 --> 00:32:26,960
from here

958
00:32:27,200 --> 00:32:30,399
so another key thing we look at is sudo

959
00:32:30,399 --> 00:32:32,399
sudo with aceto command you can run

960
00:32:32,399 --> 00:32:34,159
things with elevator permission you can

961
00:32:34,159 --> 00:32:35,679
accomplish a lot more than the standard

962
00:32:35,679 --> 00:32:37,760
user permissions um so if we take a look

963
00:32:37,760 --> 00:32:41,039
here we see a user

964
00:32:41,039 --> 00:32:43,600
we're looking running who am i um

965
00:32:43,600 --> 00:32:45,120
phyllis you've done some response

966
00:32:45,120 --> 00:32:47,279
investigations or red teaming who am i

967
00:32:47,279 --> 00:32:48,720
is a very powerful tool to understand

968
00:32:48,720 --> 00:32:51,120
your user contacts understand you know

969
00:32:51,120 --> 00:32:52,480
what are you once you get into an

970
00:32:52,480 --> 00:32:54,399
environment um so we see that's a little

971
00:32:54,399 --> 00:32:56,080
suspicious that we see these get remote

972
00:32:56,080 --> 00:32:58,720
login events uh under system setup which

973
00:32:58,720 --> 00:33:00,640
probably is also not good for under

974
00:33:00,640 --> 00:33:02,880
pseudo um and then we finally see

975
00:33:02,880 --> 00:33:05,440
automatically run um to capture all the

976
00:33:05,440 --> 00:33:07,360
data from the system so this is the case

977
00:33:07,360 --> 00:33:09,440
where we see this actually frequently in

978
00:33:09,440 --> 00:33:11,600
the real world um where the user who's

979
00:33:11,600 --> 00:33:13,360
been compromised may also be used to

980
00:33:13,360 --> 00:33:15,440
perform incident response unbeknownst to

981
00:33:15,440 --> 00:33:17,200
the organization or the victim that they

982
00:33:17,200 --> 00:33:18,559
may be trampling some of the brunswick

983
00:33:18,559 --> 00:33:20,399
data by using the same account

984
00:33:20,399 --> 00:33:22,480
so from here we have to be very careful

985
00:33:22,480 --> 00:33:24,720
to discern you know what occurred

986
00:33:24,720 --> 00:33:26,640
via the threat actor and what occurred

987
00:33:26,640 --> 00:33:28,399
via the ig team

988
00:33:28,399 --> 00:33:29,760
so what can help us here is we see the

989
00:33:29,760 --> 00:33:32,240
automatic command being run

990
00:33:32,240 --> 00:33:34,159
almost a day later so maybe when the

991
00:33:34,159 --> 00:33:35,679
incident was detected

992
00:33:35,679 --> 00:33:37,440
so you can differentiate that from the

993
00:33:37,440 --> 00:33:39,519
attacker's actions also i've never seen

994
00:33:39,519 --> 00:33:41,120
an attacker without an active if they

995
00:33:41,120 --> 00:33:43,440
did that would be something special um

996
00:33:43,440 --> 00:33:46,240
if you guys ever see that let me know

997
00:33:46,240 --> 00:33:48,000
but from here we have some more leads we

998
00:33:48,000 --> 00:33:49,919
have more we're building up the time a

999
00:33:49,919 --> 00:33:52,480
little bit further so the 2200 hour time

1000
00:33:52,480 --> 00:33:54,880
frame we see these commands on november

1001
00:33:54,880 --> 00:33:56,480
4th so we know there's something going

1002
00:33:56,480 --> 00:33:58,320
on during this time frame and we need to

1003
00:33:58,320 --> 00:34:00,559
look a little bit deeper

1004
00:34:00,559 --> 00:34:03,440
into what's going on

1005
00:34:04,559 --> 00:34:05,679
so this one's probably the first one to

1006
00:34:05,679 --> 00:34:07,840
see but we have a as we look at screen

1007
00:34:07,840 --> 00:34:10,079
sharing um and surprisingly when we do

1008
00:34:10,079 --> 00:34:12,079
our insulin response investigations we

1009
00:34:12,079 --> 00:34:13,760
see three actors use screen sharing

1010
00:34:13,760 --> 00:34:15,839
sometimes even if they have a stage

1011
00:34:15,839 --> 00:34:17,359
capability even if they have a wrap

1012
00:34:17,359 --> 00:34:19,199
they're using sometimes they just look

1013
00:34:19,199 --> 00:34:21,119
like good old-fashioned screen sharing

1014
00:34:21,119 --> 00:34:22,960
i'm not really sure why um maybe they

1015
00:34:22,960 --> 00:34:24,399
like the gui maybe it makes them feel

1016
00:34:24,399 --> 00:34:25,918
comfortable you know it's their

1017
00:34:25,918 --> 00:34:27,199
prerogative we're the ones that get to

1018
00:34:27,199 --> 00:34:29,599
investigate it um so we actually have to

1019
00:34:29,599 --> 00:34:31,119
go through this analysis realistically a

1020
00:34:31,119 --> 00:34:34,000
lot to go for screen sharing events um

1021
00:34:34,000 --> 00:34:35,839
sometimes even persistent administration

1022
00:34:35,839 --> 00:34:38,000
using um things like teamviewer we've

1023
00:34:38,000 --> 00:34:39,359
seen organizations use native maps

1024
00:34:39,359 --> 00:34:42,079
screen sharing apple remote desktop etc

1025
00:34:42,079 --> 00:34:43,760
just to do administration

1026
00:34:43,760 --> 00:34:45,199
so sometimes we have to pick up these

1027
00:34:45,199 --> 00:34:46,719
screen sharing events we're seeing

1028
00:34:46,719 --> 00:34:48,560
legitimate activity so that's where we

1029
00:34:48,560 --> 00:34:50,480
have to rely on the organization or the

1030
00:34:50,480 --> 00:34:52,879
victim to provide us information on what

1031
00:34:52,879 --> 00:34:54,480
accounts of the legitimately using what

1032
00:34:54,480 --> 00:34:56,399
ips should it be coming from so that we

1033
00:34:56,399 --> 00:34:57,760
can narrow this down and understand

1034
00:34:57,760 --> 00:34:59,040
what's bad

1035
00:34:59,040 --> 00:35:01,599
we'll say for this scenario the i.t team

1036
00:35:01,599 --> 00:35:03,280
and the user did not confirm any

1037
00:35:03,280 --> 00:35:05,359
legitimate use of screen sharing so in

1038
00:35:05,359 --> 00:35:06,720
this case we can say everything by

1039
00:35:06,720 --> 00:35:08,400
screen sharing is bad

1040
00:35:08,400 --> 00:35:10,560
so we're able to get to the log um

1041
00:35:10,560 --> 00:35:12,640
initially here as music top is the

1042
00:35:12,640 --> 00:35:14,400
initial screen sharing event just before

1043
00:35:14,400 --> 00:35:16,640
2200 hours on the fourth

1044
00:35:16,640 --> 00:35:18,320
so we have um

1045
00:35:18,320 --> 00:35:20,560
we've essentially screen shared starting

1046
00:35:20,560 --> 00:35:22,079
up you have authentication succeeded

1047
00:35:22,079 --> 00:35:24,240
from a particular ip address with a

1048
00:35:24,240 --> 00:35:26,640
guest request for control um it looks

1049
00:35:26,640 --> 00:35:27,920
like in this case the user did provide

1050
00:35:27,920 --> 00:35:30,320
by control i'm not really sure why but

1051
00:35:30,320 --> 00:35:32,320
you know once again their prerogative um

1052
00:35:32,320 --> 00:35:34,079
and it runs for a while and you can see

1053
00:35:34,079 --> 00:35:36,320
if you look it runs for about 11 minutes

1054
00:35:36,320 --> 00:35:38,480
12 minutes uh we finally see the screen

1055
00:35:38,480 --> 00:35:39,839
sharing um

1056
00:35:39,839 --> 00:35:41,200
exit out you see it you see these

1057
00:35:41,200 --> 00:35:42,640
messages so this block of messages

1058
00:35:42,640 --> 00:35:44,400
you're going to see

1059
00:35:44,400 --> 00:35:46,720
here is pretty much standard from the

1060
00:35:46,720 --> 00:35:48,640
screen services session ends and you're

1061
00:35:48,640 --> 00:35:50,320
gonna get a message saying finally no

1062
00:35:50,320 --> 00:35:52,480
viewers no time to exit

1063
00:35:52,480 --> 00:35:54,079
um so we see this happen twice so we

1064
00:35:54,079 --> 00:35:56,480
know the screen sharing has occurred uh

1065
00:35:56,480 --> 00:35:59,280
screen sharing d on for two periods um

1066
00:35:59,280 --> 00:36:02,079
for the unified log um each comprised

1067
00:36:02,079 --> 00:36:03,040
for about

1068
00:36:03,040 --> 00:36:04,560
a few minutes each i think the first one

1069
00:36:04,560 --> 00:36:08,160
was about 11 minutes second one is

1070
00:36:08,160 --> 00:36:09,680
the second one is uh it's probably

1071
00:36:09,680 --> 00:36:11,119
another

1072
00:36:11,119 --> 00:36:14,000
30 or so minutes maybe a little bit less

1073
00:36:14,000 --> 00:36:15,920
so we now have an extended time frame we

1074
00:36:15,920 --> 00:36:17,440
know there's data earlier we know

1075
00:36:17,440 --> 00:36:19,839
there's data a little bit later um so we

1076
00:36:19,839 --> 00:36:21,520
know these are our bounds we know that

1077
00:36:21,520 --> 00:36:23,280
there's ssh we know there's screen

1078
00:36:23,280 --> 00:36:25,119
sharing we know there's pseudoactivity

1079
00:36:25,119 --> 00:36:28,720
so we don't need to keep digging further

1080
00:36:29,839 --> 00:36:31,440
so then probably our next step here is

1081
00:36:31,440 --> 00:36:33,040
using that screen sharing deformation

1082
00:36:33,040 --> 00:36:35,200
and our time frame we can start piecing

1083
00:36:35,200 --> 00:36:36,240
together

1084
00:36:36,240 --> 00:36:38,839
what has occurred on the system

1085
00:36:38,839 --> 00:36:41,280
um so we've zoomed in a little bit here

1086
00:36:41,280 --> 00:36:43,359
but essentially we've timelined it so

1087
00:36:43,359 --> 00:36:45,680
starting at the 22 per hour you see this

1088
00:36:45,680 --> 00:36:47,920
ssh connection closed and you see this

1089
00:36:47,920 --> 00:36:49,359
reconnect

1090
00:36:49,359 --> 00:36:51,359
disconnect again and some screen sharing

1091
00:36:51,359 --> 00:36:53,440
starting again for user john so we've

1092
00:36:53,440 --> 00:36:55,280
seen john being used for ssh we've seen

1093
00:36:55,280 --> 00:36:57,200
show being used for screen sharing so at

1094
00:36:57,200 --> 00:36:58,720
that point we can probably extensively

1095
00:36:58,720 --> 00:37:00,160
say that the threat actor has

1096
00:37:00,160 --> 00:37:01,839
credentials for the user if they're able

1097
00:37:01,839 --> 00:37:03,280
to use the account via two different

1098
00:37:03,280 --> 00:37:05,920
methods we have a general time frame

1099
00:37:05,920 --> 00:37:07,920
we know they ran who am i multiple times

1100
00:37:07,920 --> 00:37:09,200
for some reason

1101
00:37:09,200 --> 00:37:11,359
um and we can keep digging a little bit

1102
00:37:11,359 --> 00:37:13,040
further but we we can narrow down our

1103
00:37:13,040 --> 00:37:15,280
focus here and if we wanted to reacquire

1104
00:37:15,280 --> 00:37:16,880
data or look at other systems now we

1105
00:37:16,880 --> 00:37:18,720
have a time slice we use so we have

1106
00:37:18,720 --> 00:37:20,079
predicates that we can use we have time

1107
00:37:20,079 --> 00:37:24,160
size that we can use we can dig deeper

1108
00:37:24,640 --> 00:37:26,480
this one's also a little bit of a lot of

1109
00:37:26,480 --> 00:37:27,839
data so this is

1110
00:37:27,839 --> 00:37:29,119
what we said we need to buy log is a lot

1111
00:37:29,119 --> 00:37:30,400
of records we've got to parse it this is

1112
00:37:30,400 --> 00:37:32,400
why so you kind of narrowed it down here

1113
00:37:32,400 --> 00:37:34,720
a little bit but what you're seeing is

1114
00:37:34,720 --> 00:37:36,960
under the context of the borrowed user

1115
00:37:36,960 --> 00:37:39,680
you're seeing live configuring run

1116
00:37:39,680 --> 00:37:41,440
so that's interesting how is it being

1117
00:37:41,440 --> 00:37:43,839
used why is running knife config we saw

1118
00:37:43,839 --> 00:37:45,839
who am i being run before screenshot

1119
00:37:45,839 --> 00:37:48,160
sshd but we're still putting pieces

1120
00:37:48,160 --> 00:37:49,760
together this is still right at the same

1121
00:37:49,760 --> 00:37:53,119
time about 22.40 utc on that day

1122
00:37:53,119 --> 00:37:55,359
um and we can see that there is iphone

1123
00:37:55,359 --> 00:37:56,800
thing which is also something that

1124
00:37:56,800 --> 00:37:59,200
proctor uses frequently to understand

1125
00:37:59,200 --> 00:38:01,520
network settings iphone what part

1126
00:38:01,520 --> 00:38:05,400
they're in once they're in

1127
00:38:06,480 --> 00:38:08,079
so then we start pivoting from there we

1128
00:38:08,079 --> 00:38:09,839
have a time frame uh we have some

1129
00:38:09,839 --> 00:38:11,280
commands and we see this interesting

1130
00:38:11,280 --> 00:38:13,599
thing is uh esp

1131
00:38:13,599 --> 00:38:15,200
uh so we just see that i have config

1132
00:38:15,200 --> 00:38:17,359
task run we see these remote log get

1133
00:38:17,359 --> 00:38:19,760
more login events um thanks to the

1134
00:38:19,760 --> 00:38:22,000
record config in this case

1135
00:38:22,000 --> 00:38:23,760
um but essentially for those of you who

1136
00:38:23,760 --> 00:38:26,320
are not familiar with this this is um

1137
00:38:26,320 --> 00:38:28,640
eggshell host exploitation framework

1138
00:38:28,640 --> 00:38:30,320
that's available on github

1139
00:38:30,320 --> 00:38:32,800
for this new we use this um we didn't

1140
00:38:32,800 --> 00:38:34,240
really want to use the proactors custom

1141
00:38:34,240 --> 00:38:35,280
tools we can kind of turn our

1142
00:38:35,280 --> 00:38:37,119
investigations probably not the best

1143
00:38:37,119 --> 00:38:40,320
idea um but those who have used it um

1144
00:38:40,320 --> 00:38:43,119
writes out a bunch of data to be unified

1145
00:38:43,119 --> 00:38:44,400
so if you do an investigation that

1146
00:38:44,400 --> 00:38:45,520
involves it or you just want to play

1147
00:38:45,520 --> 00:38:46,960
around on your own

1148
00:38:46,960 --> 00:38:48,000
these are the kind of events you're

1149
00:38:48,000 --> 00:38:49,760
going to get so from here we have this

1150
00:38:49,760 --> 00:38:52,560
idea okay um at the top we have

1151
00:38:52,560 --> 00:38:54,320
i have confirmed running under the

1152
00:38:54,320 --> 00:38:57,119
context of the john user

1153
00:38:57,119 --> 00:38:58,960
but then as we go down we have things

1154
00:38:58,960 --> 00:39:01,119
running over the context of the far root

1155
00:39:01,119 --> 00:39:01,920
um

1156
00:39:01,920 --> 00:39:03,680
so what's happening behind the scenes is

1157
00:39:03,680 --> 00:39:06,079
that using extra we prompted the user

1158
00:39:06,079 --> 00:39:07,839
for their password they provided it and

1159
00:39:07,839 --> 00:39:09,839
we were able to escalate privileges uh

1160
00:39:09,839 --> 00:39:11,839
from the actual tool

1161
00:39:11,839 --> 00:39:12,880
so at that point we've elevated

1162
00:39:12,880 --> 00:39:14,960
privileges we can run we might have gone

1163
00:39:14,960 --> 00:39:18,079
config we can run all kinds of things um

1164
00:39:18,079 --> 00:39:18,960
and

1165
00:39:18,960 --> 00:39:20,800
continue exploitation

1166
00:39:20,800 --> 00:39:23,359
but from the ufo one we're able to see a

1167
00:39:23,359 --> 00:39:25,119
number of things that occur um no little

1168
00:39:25,119 --> 00:39:26,560
long source in the system has provided

1169
00:39:26,560 --> 00:39:28,560
this kind of us this kind of detail

1170
00:39:28,560 --> 00:39:30,560
so it's been really useful and we're

1171
00:39:30,560 --> 00:39:32,400
kind of able to understand what i've

1172
00:39:32,400 --> 00:39:34,640
heard here

1173
00:39:34,640 --> 00:39:37,119
so just to wrap things up no more q a

1174
00:39:37,119 --> 00:39:38,320
after this

1175
00:39:38,320 --> 00:39:39,920
um you know what we've gone through is

1176
00:39:39,920 --> 00:39:41,920
what the input log is how it can be

1177
00:39:41,920 --> 00:39:43,359
useful in an instant response

1178
00:39:43,359 --> 00:39:44,640
investigation

1179
00:39:44,640 --> 00:39:46,320
uh what its functions are

1180
00:39:46,320 --> 00:39:48,240
uh how to acquire it

1181
00:39:48,240 --> 00:39:50,160
uh how to parse it using various tools

1182
00:39:50,160 --> 00:39:51,680
including the native log show command

1183
00:39:51,680 --> 00:39:52,560
which

1184
00:39:52,560 --> 00:39:54,640
we find out may actually be flawed um

1185
00:39:54,640 --> 00:39:56,160
using third third-party tools which also

1186
00:39:56,160 --> 00:39:58,640
work quite well to get us the data

1187
00:39:58,640 --> 00:40:00,640
and really how to narrow it down and

1188
00:40:00,640 --> 00:40:02,320
narrow down your scope and find people

1189
00:40:02,320 --> 00:40:04,400
faster um this

1190
00:40:04,400 --> 00:40:06,480
talk is probably the culmination of

1191
00:40:06,480 --> 00:40:08,480
years of research on our sun

1192
00:40:08,480 --> 00:40:11,520
to understand how to use it because when

1193
00:40:11,520 --> 00:40:13,599
we first encountered i think um

1194
00:40:13,599 --> 00:40:15,520
three years ago or so it was kind of a

1195
00:40:15,520 --> 00:40:17,119
mystery to us right pivoting from apple

1196
00:40:17,119 --> 00:40:19,119
system login system

1197
00:40:19,119 --> 00:40:21,119
to this whole new log format how to make

1198
00:40:21,119 --> 00:40:23,680
sense of it and you know eventually we

1199
00:40:23,680 --> 00:40:24,720
just used our nights and weekends to

1200
00:40:24,720 --> 00:40:26,400
come up with this presentation

1201
00:40:26,400 --> 00:40:28,160
as you know it's a response run pretty

1202
00:40:28,160 --> 00:40:30,480
busy um so using our nice weekends to

1203
00:40:30,480 --> 00:40:31,920
get everything together and hopefully

1204
00:40:31,920 --> 00:40:33,359
provide you a

1205
00:40:33,359 --> 00:40:35,359
pretty useful view of what's out there

1206
00:40:35,359 --> 00:40:36,880
how to leverage it

1207
00:40:36,880 --> 00:40:39,119
one more thing we have so automatic we

1208
00:40:39,119 --> 00:40:40,240
are going to release this module for

1209
00:40:40,240 --> 00:40:43,119
this soon um the bug identified log show

1210
00:40:43,119 --> 00:40:45,440
has thrown a wrench in some more plants

1211
00:40:45,440 --> 00:40:46,880
so we'll still work out trying to

1212
00:40:46,880 --> 00:40:48,400
understand the extent of the bug and

1213
00:40:48,400 --> 00:40:50,160
characterize it to make sure that the

1214
00:40:50,160 --> 00:40:52,000
data automatically is not flawed in the

1215
00:40:52,000 --> 00:40:54,240
same way

1216
00:40:54,560 --> 00:40:56,960
so look out for this we're going to do

1217
00:40:56,960 --> 00:40:58,720
the aloha arm right later with the tool

1218
00:40:58,720 --> 00:41:00,720
but this module will come out later once

1219
00:41:00,720 --> 00:41:02,400
we make sure that there's no problems

1220
00:41:02,400 --> 00:41:04,400
with the dna quality

1221
00:41:04,400 --> 00:41:06,960
but that is it that's all we have on our

1222
00:41:06,960 --> 00:41:08,400
side um

1223
00:41:08,400 --> 00:41:09,839
i'll open up for any questions anyone

1224
00:41:09,839 --> 00:41:11,839
has that you know my blog parsing

1225
00:41:11,839 --> 00:41:14,319
meaning of life really take anything i

1226
00:41:14,319 --> 00:41:15,310
might not have an answer but

1227
00:41:15,310 --> 00:41:18,409
[Music]

1228
00:41:19,200 --> 00:41:21,040
the unified yeah has the

1229
00:41:21,040 --> 00:41:22,880
as a developer you can mark certain

1230
00:41:22,880 --> 00:41:27,040
parts of your login private or redacted

1231
00:41:27,040 --> 00:41:28,160
challenges where you're going to log

1232
00:41:28,160 --> 00:41:29,920
where you come across stuff like that

1233
00:41:29,920 --> 00:41:30,880
where

1234
00:41:30,880 --> 00:41:31,599
it

1235
00:41:31,599 --> 00:41:32,720
affects your ability to understand

1236
00:41:32,720 --> 00:41:35,040
what's going

1237
00:41:41,119 --> 00:41:43,119
um so i think we have enough data from

1238
00:41:43,119 --> 00:41:44,000
the

1239
00:41:44,000 --> 00:41:45,040
from at least

1240
00:41:45,040 --> 00:41:46,560
this perspective right so if an

1241
00:41:46,560 --> 00:41:47,839
application is running we're getting the

1242
00:41:47,839 --> 00:41:49,440
time since associated with it especially

1243
00:41:49,440 --> 00:41:52,240
if there's signposts um associated with

1244
00:41:52,240 --> 00:41:55,359
that program um generally i would say uh

1245
00:41:55,359 --> 00:41:56,720
we're looking for evidence of execution

1246
00:41:56,720 --> 00:41:58,800
so there's a particular piece of malware

1247
00:41:58,800 --> 00:42:01,200
third party applications running online

1248
00:42:01,200 --> 00:42:02,960
as long as we have evidence of execution

1249
00:42:02,960 --> 00:42:04,640
that helps us build the time frame and

1250
00:42:04,640 --> 00:42:05,920
then we also leverage a lot of the

1251
00:42:05,920 --> 00:42:08,160
native apple system utilities looking at

1252
00:42:08,160 --> 00:42:11,520
log and d or screen sharing d or um

1253
00:42:11,520 --> 00:42:13,359
looking at text those are all those

1254
00:42:13,359 --> 00:42:15,359
still provided with context from a

1255
00:42:15,359 --> 00:42:17,280
first-party utility perspective

1256
00:42:17,280 --> 00:42:18,800
um now if we everything that was

1257
00:42:18,800 --> 00:42:20,160
productive private's available to us

1258
00:42:20,160 --> 00:42:21,680
maybe we'd have more context and more

1259
00:42:21,680 --> 00:42:23,359
understanding but i think we generally

1260
00:42:23,359 --> 00:42:25,760
do get enough um the big problem is when

1261
00:42:25,760 --> 00:42:29,200
the actor run log erase dash all that is

1262
00:42:29,200 --> 00:42:30,720
what we have nothing left

1263
00:42:30,720 --> 00:42:33,119
um some thrackers in max based on y's

1264
00:42:33,119 --> 00:42:35,200
two and then on that and

1265
00:42:35,200 --> 00:42:36,640
we have no basis for a unified

1266
00:42:36,640 --> 00:42:38,000
investigation

1267
00:42:38,000 --> 00:42:40,560
just to further that answer uh with

1268
00:42:40,560 --> 00:42:42,160
those eight predicate filterings that we

1269
00:42:42,160 --> 00:42:44,720
have we rarely see private being thrown

1270
00:42:44,720 --> 00:42:46,560
in there and those are again the the

1271
00:42:46,560 --> 00:42:48,319
core eight that we use

1272
00:42:48,319 --> 00:42:52,119
so it doesn't affect us

1273
00:43:02,240 --> 00:43:03,440
so

1274
00:43:03,440 --> 00:43:05,760
we're trying to avoid doing that um

1275
00:43:05,760 --> 00:43:07,440
so we've got a persistent basis it's not

1276
00:43:07,440 --> 00:43:09,200
too bad we'd have to parse out the

1277
00:43:09,200 --> 00:43:12,879
unified log of that one rap but

1278
00:43:14,770 --> 00:43:17,909
[Music]

1279
00:43:18,319 --> 00:43:19,680
you know windowing that down into

1280
00:43:19,680 --> 00:43:20,960
something useful

1281
00:43:20,960 --> 00:43:22,800
um and the problem comes when we have an

1282
00:43:22,800 --> 00:43:24,400
incident i think we have one where we

1283
00:43:24,400 --> 00:43:27,040
have four thousand

1284
00:43:32,880 --> 00:43:34,400
it's not an effective solution so that's

1285
00:43:34,400 --> 00:43:35,599
where we have to get more creative and

1286
00:43:35,599 --> 00:43:37,440
come up with these filtering solutions

1287
00:43:37,440 --> 00:43:40,800
and other techniques to get to it

1288
00:44:06,000 --> 00:44:07,839
our customers don't have a lot of

1289
00:44:07,839 --> 00:44:10,160
schools about um we're pulling it from a

1290
00:44:10,160 --> 00:44:12,319
system basis which i think

1291
00:44:12,319 --> 00:44:13,680
kind of informed the basis of this talk

1292
00:44:13,680 --> 00:44:15,280
why would i have to grab each system and

1293
00:44:15,280 --> 00:44:17,359
do this processing um if everything was

1294
00:44:17,359 --> 00:44:19,599
ported to one place that'd be nice

1295
00:44:19,599 --> 00:44:23,040
but even then i think they look just

1296
00:44:24,000 --> 00:44:25,280
too much for some organizations to

1297
00:44:25,280 --> 00:44:27,200
handle so you know i think one of the

1298
00:44:27,200 --> 00:44:29,040
things we thought about recommendation

1299
00:44:29,040 --> 00:44:30,319
from recommendation perspective is

1300
00:44:30,319 --> 00:44:31,599
putting some predictive filter into

1301
00:44:31,599 --> 00:44:33,760
those key events um and forwarding that

1302
00:44:33,760 --> 00:44:36,079
off or saving that on a personal basis

1303
00:44:36,079 --> 00:44:38,160
there's a manageable set of data

1304
00:44:38,160 --> 00:44:39,520
that we can use later if there's an

1305
00:44:39,520 --> 00:44:44,440
investigation i mean ideally as foreign

1306
00:44:50,570 --> 00:44:53,649
[Music]

1307
00:44:59,760 --> 00:45:01,040
how much data would be streamed so the

1308
00:45:01,040 --> 00:45:02,400
question is how much data would we

1309
00:45:02,400 --> 00:45:04,960
collect if

1310
00:45:06,800 --> 00:45:08,160
i mean it depends on the activity on the

1311
00:45:08,160 --> 00:45:09,599
computer right

1312
00:45:09,599 --> 00:45:11,200
if you have a developer always using

1313
00:45:11,200 --> 00:45:12,560
sudo there'll be a lot of pseudo

1314
00:45:12,560 --> 00:45:14,319
commands because screen sharing is used

1315
00:45:14,319 --> 00:45:17,520
you know it depends on the activity

1316
00:45:17,520 --> 00:45:19,520
i think with our eight predicates we

1317
00:45:19,520 --> 00:45:20,960
identified and probably they're probably

1318
00:45:20,960 --> 00:45:22,240
a few additional ones we've had i think

1319
00:45:22,240 --> 00:45:24,480
it's probably ten bags yeah um that you

1320
00:45:24,480 --> 00:45:27,040
can cut the data down to

1321
00:45:27,040 --> 00:45:29,599
so something a little more manageable

1322
00:45:29,599 --> 00:45:31,280
and there's there's ways to filter so

1323
00:45:31,280 --> 00:45:33,359
i'm going to use pseudo as an example um

1324
00:45:33,359 --> 00:45:35,280
i don't know if i can go to it

1325
00:45:35,280 --> 00:45:36,560
uh

1326
00:45:36,560 --> 00:45:38,960
both sudo uh we cut out a lot of the

1327
00:45:38,960 --> 00:45:40,800
additional pseudo data all those dots

1328
00:45:40,800 --> 00:45:42,400
for additional data that came up from

1329
00:45:42,400 --> 00:45:43,920
that result that we just didn't find

1330
00:45:43,920 --> 00:45:45,760
relevant for this presentation

1331
00:45:45,760 --> 00:45:48,079
but if you see here there's a command

1332
00:45:48,079 --> 00:45:50,400
equals you could also use an additional

1333
00:45:50,400 --> 00:45:51,760
predicate filter to look for that

1334
00:45:51,760 --> 00:45:53,200
command and that would give you just

1335
00:45:53,200 --> 00:45:54,400
these

1336
00:45:54,400 --> 00:45:55,920
so again if you narrow down that

1337
00:45:55,920 --> 00:45:56,880
predicate

1338
00:45:56,880 --> 00:45:59,599
filtering you can get just real tight

1339
00:45:59,599 --> 00:46:01,200
and compact data of what you're looking

1340
00:46:01,200 --> 00:46:03,359
for

1341
00:46:13,040 --> 00:46:15,520
uh not typically usually we just want to

1342
00:46:15,520 --> 00:46:16,640
get that

1343
00:46:16,640 --> 00:46:18,960
initial data that those messages so for

1344
00:46:18,960 --> 00:46:20,079
screen sharing i want to see that

1345
00:46:20,079 --> 00:46:21,599
successful authentication in that time

1346
00:46:21,599 --> 00:46:25,040
frame um just to get that quick win now

1347
00:46:25,040 --> 00:46:26,560
if we wanted to dive deeper to see if

1348
00:46:26,560 --> 00:46:28,079
there were any other processes kicked

1349
00:46:28,079 --> 00:46:29,599
off or around that's when we would use

1350
00:46:29,599 --> 00:46:30,720
it

1351
00:46:30,720 --> 00:46:33,040
but again typically it's it's just oh

1352
00:46:33,040 --> 00:46:34,160
that's the event that's that

1353
00:46:34,160 --> 00:46:36,240
authentication that's the time frame and

1354
00:46:36,240 --> 00:46:37,520
we move on

1355
00:46:37,520 --> 00:46:39,839
and tackle eric said sometimes learning

1356
00:46:39,839 --> 00:46:41,520
instant response trying to move quickly

1357
00:46:41,520 --> 00:46:43,760
sometimes this is just a lead generating

1358
00:46:43,760 --> 00:46:45,359
activity for us so we can quickly go

1359
00:46:45,359 --> 00:46:47,280
through get some leads and then pivot

1360
00:46:47,280 --> 00:46:48,720
there and look at

1361
00:46:48,720 --> 00:46:50,319
process trees and look at what else is

1362
00:46:50,319 --> 00:46:51,920
coming from there that's what we can

1363
00:46:51,920 --> 00:46:54,319
also pursue um i think this example is

1364
00:46:54,319 --> 00:46:55,599
pretty simplistic and some of the text

1365
00:46:55,599 --> 00:46:57,119
easy to use so that's why we can figure

1366
00:46:57,119 --> 00:46:59,280
out why just from very simple

1367
00:46:59,280 --> 00:47:01,119
filtering but some of our thrackers are

1368
00:47:01,119 --> 00:47:02,560
pretty advanced and we need to do some

1369
00:47:02,560 --> 00:47:06,040
pretty deep analysis

1370
00:47:22,960 --> 00:47:24,720
that has been run uh it's pretty

1371
00:47:24,720 --> 00:47:26,480
effective i mean unless we get the data

1372
00:47:26,480 --> 00:47:28,800
from the apfs snapshot or some other

1373
00:47:28,800 --> 00:47:29,680
source

1374
00:47:29,680 --> 00:47:31,200
um we've gone to investigations where

1375
00:47:31,200 --> 00:47:32,480
it's just gone

1376
00:47:32,480 --> 00:47:35,440
and we have to use system.log asl

1377
00:47:35,440 --> 00:47:36,880
other artifacts

1378
00:47:36,880 --> 00:47:39,920
mrus yeah it's a research structure uh

1379
00:47:39,920 --> 00:47:41,520
whatever thing's in the blog

1380
00:47:41,520 --> 00:47:44,000
like logged along um and then you throw

1381
00:47:44,000 --> 00:47:45,920
it into wardrobe and it's all gone

1382
00:47:45,920 --> 00:47:47,040
what are you gonna do

1383
00:47:47,040 --> 00:47:50,240
in the cases where it's gone

1384
00:47:50,559 --> 00:47:51,359
yes

1385
00:47:51,359 --> 00:47:52,559
yeah we've had some attackers really

1386
00:47:52,559 --> 00:47:53,920
wise up to this technique and just

1387
00:47:53,920 --> 00:47:56,920
racism

1388
00:48:15,520 --> 00:48:17,119
okay so the question is

1389
00:48:17,119 --> 00:48:18,559
what percent of creditors are making

1390
00:48:18,559 --> 00:48:21,040
alarms

1391
00:48:32,240 --> 00:48:36,879
attackers up to typically logs on that

1392
00:48:47,440 --> 00:48:48,640
so the question is there anything more

1393
00:48:48,640 --> 00:48:50,000
elegant whether there's spending or

1394
00:48:50,000 --> 00:48:51,760
receiving processes

1395
00:48:51,760 --> 00:48:54,400
on operations

1396
00:48:55,359 --> 00:48:57,680
uh i haven't observed that correctly um

1397
00:48:57,680 --> 00:48:58,880
i don't think we've just even observed

1398
00:48:58,880 --> 00:49:00,640
it and we have a question that builds

1399
00:49:00,640 --> 00:49:02,960
upon

1400
00:49:09,350 --> 00:49:12,469
[Music]

1401
00:49:14,559 --> 00:49:17,119
uh

1402
00:49:17,119 --> 00:49:20,119
um

1403
00:49:35,440 --> 00:49:38,319
you know i don't think

1404
00:49:38,319 --> 00:49:39,920
i mean i think conceivably you could go

1405
00:49:39,920 --> 00:49:41,280
through the tracing three bottoms in

1406
00:49:41,280 --> 00:49:42,720
front of our stem so you can parse

1407
00:49:42,720 --> 00:49:45,520
individual through three trace v3 files

1408
00:49:45,520 --> 00:49:47,280
using the log show command

1409
00:49:47,280 --> 00:49:49,280
um you could conceivably pick out

1410
00:49:49,280 --> 00:49:52,079
individual files and have your commands

1411
00:49:52,079 --> 00:49:53,920
and evidence of your attack and try to

1412
00:49:53,920 --> 00:49:55,920
delete those individually

1413
00:49:55,920 --> 00:49:57,839
i haven't seen anyone do that usually

1414
00:49:57,839 --> 00:49:59,920
just build a logic approach and go for a

1415
00:49:59,920 --> 00:50:01,760
lot of resolve but i think it's an

1416
00:50:01,760 --> 00:50:03,359
interesting thing i probably researched

1417
00:50:03,359 --> 00:50:05,520
that

1418
00:50:10,839 --> 00:50:13,040
now the comment was why not just take

1419
00:50:13,040 --> 00:50:14,160
those commands we highlighted and

1420
00:50:14,160 --> 00:50:15,920
complete all the entries that's a good

1421
00:50:15,920 --> 00:50:17,599
idea something through the black hat

1422
00:50:17,599 --> 00:50:19,920
already

1423
00:50:20,319 --> 00:50:21,839
no that's i think it's fantastic they

1424
00:50:21,839 --> 00:50:23,040
actually probably do some additional

1425
00:50:23,040 --> 00:50:24,839
research to see how to cut out

1426
00:50:24,839 --> 00:50:27,680
events i think we've just been

1427
00:50:27,680 --> 00:50:29,839
stuck with a lot of results up to this

1428
00:50:29,839 --> 00:50:31,440
point but um

1429
00:50:31,440 --> 00:50:34,000
i think that's the day

1430
00:50:34,240 --> 00:50:35,680
again if that were to happen we would

1431
00:50:35,680 --> 00:50:37,839
look at additional artifacts uh save

1432
00:50:37,839 --> 00:50:39,280
state or terminal would probably still

1433
00:50:39,280 --> 00:50:40,880
have that data there

1434
00:50:40,880 --> 00:50:42,640
that we go through if you were using

1435
00:50:42,640 --> 00:50:45,118
command line

1436
00:50:49,359 --> 00:50:52,000
anything else

1437
00:50:52,720 --> 00:50:55,839
all right thanks for having us

