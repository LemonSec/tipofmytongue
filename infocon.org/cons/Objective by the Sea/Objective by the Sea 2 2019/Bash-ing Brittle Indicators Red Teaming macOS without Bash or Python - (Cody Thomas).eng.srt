1
00:00:03,770 --> 00:00:05,750
Michael today is bashing little

2
00:00:05,750 --> 00:00:07,700
indicators doing red teaming on Mac OS

3
00:00:07,700 --> 00:00:10,309
with out using that's a Python you see

4
00:00:10,309 --> 00:00:11,660
that over and over again people using

5
00:00:11,660 --> 00:00:13,519
that so finally to break the mold a

6
00:00:13,519 --> 00:00:16,580
little bit so kind of shut off Who am I

7
00:00:16,580 --> 00:00:19,099
so Cody Thomas I work at Specter up with

8
00:00:19,099 --> 00:00:20,689
Ritchie's I'm along the offensive side

9
00:00:20,689 --> 00:00:22,520
though so I've spent a lot of time doing

10
00:00:22,520 --> 00:00:24,200
red teaming doing cool development

11
00:00:24,200 --> 00:00:25,399
training that sort of stuff

12
00:00:25,399 --> 00:00:27,349
before coming to specter ops I was at

13
00:00:27,349 --> 00:00:29,090
mitre working on the mightier attack

14
00:00:29,090 --> 00:00:33,340
team many people know my director okay

15
00:00:33,340 --> 00:00:36,320
go there did big butch for Mac and Linux

16
00:00:36,320 --> 00:00:37,820
get into a clap working on a whole bunch

17
00:00:37,820 --> 00:00:39,949
of adversary inhalation plans during

18
00:00:39,949 --> 00:00:41,120
threat intelligence all that sort of

19
00:00:41,120 --> 00:00:42,980
stuff and I spend a lot of time now

20
00:00:42,980 --> 00:00:45,260
working on open source projects offers

21
00:00:45,260 --> 00:00:47,480
everything here kind of tied into and

22
00:00:47,480 --> 00:00:49,160
I'll give a brief overview of it but the

23
00:00:49,160 --> 00:00:50,839
goal here is locking agents that's in

24
00:00:50,839 --> 00:00:53,839
there so kind of overview what we'll

25
00:00:53,839 --> 00:00:55,909
talk about today induction to JavaScript

26
00:00:55,909 --> 00:00:57,440
or automation and the objective-c bridge

27
00:00:57,440 --> 00:00:58,699
while all that works and how you can I

28
00:00:58,699 --> 00:01:00,769
predict I'll give a quick highlight a

29
00:01:00,769 --> 00:01:02,719
review of what Apfel is and how it can

30
00:01:02,719 --> 00:01:05,630
be used and then we'll dig dig into that

31
00:01:05,630 --> 00:01:07,370
we able to use it to make a full agent

32
00:01:07,370 --> 00:01:09,560
encryption all that stuff and how you

33
00:01:09,560 --> 00:01:11,030
might actually use that name operation

34
00:01:11,030 --> 00:01:11,720
I'll go through a couple different

35
00:01:11,720 --> 00:01:13,790
tactics of execution discovery

36
00:01:13,790 --> 00:01:15,710
persistence credentials that sort of

37
00:01:15,710 --> 00:01:18,040
stuff and I'll also go over some

38
00:01:18,040 --> 00:01:20,000
defensive measures to apples trying to

39
00:01:20,000 --> 00:01:21,350
do to help prevent some of the sort of

40
00:01:21,350 --> 00:01:24,049
stuff so one thing to know as we go

41
00:01:24,049 --> 00:01:26,899
through in here on my slides are color

42
00:01:26,899 --> 00:01:28,490
coded I like to do especially with

43
00:01:28,490 --> 00:01:30,229
Specter ups we do a lot of offensive and

44
00:01:30,229 --> 00:01:32,149
defensive work and so throughout this

45
00:01:32,149 --> 00:01:34,070
presentation you'll see I try and color

46
00:01:34,070 --> 00:01:35,329
code this slide whether I'm talking

47
00:01:35,329 --> 00:01:36,530
about something on my offensive

48
00:01:36,530 --> 00:01:38,689
perspective some defensive aspects to it

49
00:01:38,689 --> 00:01:40,670
or even purple just kind of pops like

50
00:01:40,670 --> 00:01:43,009
awareness introducing topics that's what

51
00:01:43,009 --> 00:01:44,869
it says so keep in mind that that can't

52
00:01:44,869 --> 00:01:46,130
be good I can't guess the why I'm

53
00:01:46,130 --> 00:01:47,320
talking about certain things

54
00:01:47,320 --> 00:01:50,030
so initially scared off will talk about

55
00:01:50,030 --> 00:01:54,859
JavaScript automation so what is it most

56
00:01:54,859 --> 00:01:57,140
people know that corollary to this Apple

57
00:01:57,140 --> 00:01:59,030
script what JavaScript for automation

58
00:01:59,030 --> 00:02:01,070
actually started off in 10.10 in

59
00:02:01,070 --> 00:02:04,820
Yosemite and apple says it was a like

60
00:02:04,820 --> 00:02:06,950
like it Apple scripts to help support

61
00:02:06,950 --> 00:02:08,300
controlling other applications on the

62
00:02:08,300 --> 00:02:10,520
system so there's a whole bunch of

63
00:02:10,520 --> 00:02:11,720
different ways that you can do this

64
00:02:11,720 --> 00:02:14,000
already you can use Apple script perl

65
00:02:14,000 --> 00:02:15,230
python has

66
00:02:15,230 --> 00:02:16,970
volumes that you can use as well all

67
00:02:16,970 --> 00:02:18,950
objective-c functions and do this kind

68
00:02:18,950 --> 00:02:21,379
of automation already if people here are

69
00:02:21,379 --> 00:02:23,599
familiar with PowerShell I like to call

70
00:02:23,599 --> 00:02:25,489
JavaScript automation kind of PowerShell

71
00:02:25,489 --> 00:02:29,629
version one it's there there's a lot of

72
00:02:29,629 --> 00:02:30,980
stuff locking but it's still kind of

73
00:02:30,980 --> 00:02:33,560
powerful and so all the slips into the

74
00:02:33,560 --> 00:02:36,080
open script architecture line which just

75
00:02:36,080 --> 00:02:37,760
sent Appleton to do its correlation

76
00:02:37,760 --> 00:02:39,769
between different different processes

77
00:02:39,769 --> 00:02:42,140
that are running on system so how can

78
00:02:42,140 --> 00:02:43,730
you actually use it how does this sort

79
00:02:43,730 --> 00:02:46,129
of thing run so usually you'll see this

80
00:02:46,129 --> 00:02:48,769
run as OS a script and because of the

81
00:02:48,769 --> 00:02:50,540
default is Apple strictly to specify the

82
00:02:50,540 --> 00:02:52,880
language like JavaScript you can use

83
00:02:52,880 --> 00:02:54,349
interactively you can type things in

84
00:02:54,349 --> 00:02:55,579
through standard in all the sort of

85
00:02:55,579 --> 00:02:57,170
standard stuff works if you're doing

86
00:02:57,170 --> 00:02:58,790
this from an actual maybe montgo

87
00:02:58,790 --> 00:03:00,140
acquisition or something else on the

88
00:03:00,140 --> 00:03:01,670
system instead of doing it on the

89
00:03:01,670 --> 00:03:05,200
command line you can use OS 8 it um or

90
00:03:05,200 --> 00:03:07,250
JavaScript for automation and Apple

91
00:03:07,250 --> 00:03:08,840
script can actually quote unquote

92
00:03:08,840 --> 00:03:12,049
compile into script files and backs and

93
00:03:12,049 --> 00:03:14,090
so it'll take your JavaScript and create

94
00:03:14,090 --> 00:03:16,549
a whole dot structure it'll compile it

95
00:03:16,549 --> 00:03:18,680
give you key lists all sort of stuff

96
00:03:18,680 --> 00:03:21,489
which isn't necessarily there for you go

97
00:03:21,489 --> 00:03:24,049
execute JavaScript and this is an

98
00:03:24,049 --> 00:03:26,060
example area in the script editor just

99
00:03:26,060 --> 00:03:27,680
showing what gal expect automation even

100
00:03:27,680 --> 00:03:29,840
looks like and you'll see it looks a lot

101
00:03:29,840 --> 00:03:34,220
like JavaScript exploit so the nice

102
00:03:34,220 --> 00:03:36,380
thing about this though is that we

103
00:03:36,380 --> 00:03:38,840
JavaScript and Apple script there are

104
00:03:38,840 --> 00:03:41,600
these things on the system for scripting

105
00:03:41,600 --> 00:03:43,760
definitions and so if you open up your

106
00:03:43,760 --> 00:03:45,380
script editor you can do an opening

107
00:03:45,380 --> 00:03:47,780
dictionary and see all the different

108
00:03:47,780 --> 00:03:49,100
programs on your computer that have

109
00:03:49,100 --> 00:03:51,170
these scriptable definitions and all

110
00:03:51,170 --> 00:03:53,269
these mean is that some program decided

111
00:03:53,269 --> 00:03:55,310
hey I will allow people to send

112
00:03:55,310 --> 00:03:57,500
information to some API that I provide

113
00:03:57,500 --> 00:03:59,630
and send something back or do something

114
00:03:59,630 --> 00:04:01,670
on behalf of that request this sort of

115
00:04:01,670 --> 00:04:03,560
information happens through Apple event

116
00:04:03,560 --> 00:04:05,299
messages besides actually I'm

117
00:04:05,299 --> 00:04:07,579
communicating between processes so give

118
00:04:07,579 --> 00:04:09,200
an example here just showing which

119
00:04:09,200 --> 00:04:11,120
Safari you can see right in there you

120
00:04:11,120 --> 00:04:13,069
can access different mechanisms see what

121
00:04:13,069 --> 00:04:17,720
processes and methods properties all the

122
00:04:17,720 --> 00:04:20,298
sort of stuff that you can access so if

123
00:04:20,298 --> 00:04:21,168
you actually when you use this on the

124
00:04:21,168 --> 00:04:23,599
command line you start using it's a post

125
00:04:23,599 --> 00:04:24,590
eight scripts attack that old Java

126
00:04:24,590 --> 00:04:27,140
scripts like I do it interactive you can

127
00:04:27,140 --> 00:04:28,260
see right there

128
00:04:28,260 --> 00:04:30,840
top will do things like create an

129
00:04:30,840 --> 00:04:32,160
instance of the system events

130
00:04:32,160 --> 00:04:34,470
application so all it does is open up a

131
00:04:34,470 --> 00:04:36,660
handle to it then you start accessing

132
00:04:36,660 --> 00:04:38,700
the different functions and properties

133
00:04:38,700 --> 00:04:40,050
that are available to you so for example

134
00:04:40,050 --> 00:04:43,410
you can do dot current user and get the

135
00:04:43,410 --> 00:04:45,360
name so in this case code returns a name

136
00:04:45,360 --> 00:04:46,890
it sends an Apple event message to get

137
00:04:46,890 --> 00:04:49,380
that if you actually open up console you

138
00:04:49,380 --> 00:04:50,850
can see these messages going through

139
00:04:50,850 --> 00:04:53,310
where OS a script sent this Apple event

140
00:04:53,310 --> 00:04:55,530
send message system event receives it

141
00:04:55,530 --> 00:04:57,210
and an obviously a script gets it back

142
00:04:57,210 --> 00:04:58,470
so you can see the sort of stuff

143
00:04:58,470 --> 00:05:00,030
happening on the wire as these messages

144
00:05:00,030 --> 00:05:02,640
are getting sent around now if we

145
00:05:02,640 --> 00:05:04,290
actually want to use this in my case for

146
00:05:04,290 --> 00:05:06,300
offensive operations there's a couple

147
00:05:06,300 --> 00:05:07,740
things you kind of need to know about

148
00:05:07,740 --> 00:05:10,350
this so if you want to access the

149
00:05:10,350 --> 00:05:12,960
objective-c bridge a way to call

150
00:05:12,960 --> 00:05:15,150
Objective C API polls there are two

151
00:05:15,150 --> 00:05:18,150
special few words slash characters so

152
00:05:18,150 --> 00:05:20,790
there's the dollar sign and the obscene

153
00:05:20,790 --> 00:05:23,790
word these are mostly interchangeable so

154
00:05:23,790 --> 00:05:25,020
for example you can do

155
00:05:25,020 --> 00:05:27,630
Abdi duck import Foundation and get

156
00:05:27,630 --> 00:05:29,670
access to all the times eternity key is

157
00:05:29,670 --> 00:05:31,860
and Krugman in that class in that

158
00:05:31,860 --> 00:05:33,660
framework you can do sort of thing for

159
00:05:33,660 --> 00:05:36,180
security for octet or everything at

160
00:05:36,180 --> 00:05:38,070
something so now once you start doing

161
00:05:38,070 --> 00:05:40,860
this because it is doing this weird take

162
00:05:40,860 --> 00:05:42,930
casting between Objective C and

163
00:05:42,930 --> 00:05:45,420
JavaScript there are some weird isms so

164
00:05:45,420 --> 00:05:47,250
for example if you're used to JavaScript

165
00:05:47,250 --> 00:05:49,590
you can just do quotes make a string and

166
00:05:49,590 --> 00:05:53,070
that is up type string in Java C for

167
00:05:53,070 --> 00:05:55,080
automation though to access an

168
00:05:55,080 --> 00:05:57,300
objective-c version of string the NS

169
00:05:57,300 --> 00:06:00,120
string it your prize is the dollar not

170
00:06:00,120 --> 00:06:00,710
cooked

171
00:06:00,710 --> 00:06:03,570
javascript is confused by this don't

172
00:06:03,570 --> 00:06:05,130
know why and it calls it a function

173
00:06:05,130 --> 00:06:06,840
little things like this need to be cared

174
00:06:06,840 --> 00:06:10,020
but you can do the dot J S which tries

175
00:06:10,020 --> 00:06:12,360
to do this automatic passing between the

176
00:06:12,360 --> 00:06:14,250
objective-c underlying primitives and

177
00:06:14,250 --> 00:06:16,320
what JavaScript thinks they are so you

178
00:06:16,320 --> 00:06:18,300
can see here what JavaScript used to

179
00:06:18,300 --> 00:06:21,240
think was a function if we do J s now it

180
00:06:21,240 --> 00:06:22,680
said that it actually is the normal

181
00:06:22,680 --> 00:06:24,690
string - so all these sort of things

182
00:06:24,690 --> 00:06:26,490
kind of happen under the hood which can

183
00:06:26,490 --> 00:06:28,020
trip you up and they're not all

184
00:06:28,020 --> 00:06:30,960
necessarily intuitive for example for

185
00:06:30,960 --> 00:06:33,720
some unknown reason blinds are

186
00:06:33,720 --> 00:06:36,390
automatically cast into strings in Davos

187
00:06:36,390 --> 00:06:38,460
they're very frustrating if you can get

188
00:06:38,460 --> 00:06:41,100
the length of something Wow what you can

189
00:06:41,100 --> 00:06:42,090
just see there's a whole

190
00:06:42,090 --> 00:06:43,949
you can access and get back some values

191
00:06:43,949 --> 00:06:45,960
back inside doing comparisons so now you

192
00:06:45,960 --> 00:06:48,000
have some way of actually working with

193
00:06:48,000 --> 00:06:51,750
the jobs of automation accesses the next

194
00:06:51,750 --> 00:06:53,729
part though is once you want to call an

195
00:06:53,729 --> 00:06:54,440
objective-c

196
00:06:54,440 --> 00:06:57,300
function how do you do that that looks

197
00:06:57,300 --> 00:06:59,880
crazy different mean Objective C versus

198
00:06:59,880 --> 00:07:02,400
JavaScript so for example here's the

199
00:07:02,400 --> 00:07:05,490
Declaration on Apple's website to a

200
00:07:05,490 --> 00:07:06,840
launch app with bundle identifier

201
00:07:06,840 --> 00:07:09,120
function and so it has a whole bunch of

202
00:07:09,120 --> 00:07:10,380
different fields that you can add in

203
00:07:10,380 --> 00:07:12,810
like options event parameter district

204
00:07:12,810 --> 00:07:14,130
area launch identifiers all that sort of

205
00:07:14,130 --> 00:07:16,620
stuff if you want to actually call this

206
00:07:16,620 --> 00:07:18,990
in JavaScript though it gets really

207
00:07:18,990 --> 00:07:21,270
annoying because everything is case

208
00:07:21,270 --> 00:07:24,570
sensitive and all of the parameters get

209
00:07:24,570 --> 00:07:26,610
smooshed together into one long function

210
00:07:26,610 --> 00:07:28,380
so if you actually want to call this

211
00:07:28,380 --> 00:07:30,840
function in JavaScript you have to do

212
00:07:30,840 --> 00:07:33,570
the whole function name is launch app or

213
00:07:33,570 --> 00:07:35,160
bundle identifier options additional

214
00:07:35,160 --> 00:07:36,240
event parameter description must

215
00:07:36,240 --> 00:07:38,639
identifier so good to get all of that

216
00:07:38,639 --> 00:07:41,130
case sensitive each time you want to

217
00:07:41,130 --> 00:07:43,590
call it's really annoying really fast

218
00:07:43,590 --> 00:07:45,360
copy/paste is your granny's butt and you

219
00:07:45,360 --> 00:07:46,830
can access all of these calls under the

220
00:07:46,830 --> 00:07:50,100
hood which is really nice so that's kind

221
00:07:50,100 --> 00:07:52,620
of you know grassroots eg ducks in

222
00:07:52,620 --> 00:07:54,990
italics with automation I'm useful kind

223
00:07:54,990 --> 00:07:57,750
grips so I wanted to take all this and

224
00:07:57,750 --> 00:08:00,270
loop it up into this open source project

225
00:08:00,270 --> 00:08:03,840
that had Paul tackle so what is this so

226
00:08:03,840 --> 00:08:06,500
I wanted to do operations on Mac OS but

227
00:08:06,500 --> 00:08:09,090
what was out there originally involve

228
00:08:09,090 --> 00:08:10,889
like single terminal applications using

229
00:08:10,889 --> 00:08:13,440
Empire we're using evil OSX like all

230
00:08:13,440 --> 00:08:14,820
these sorts of stuff not really

231
00:08:14,820 --> 00:08:17,430
conducive to more traditional style

232
00:08:17,430 --> 00:08:19,680
victim operations multiple multiple

233
00:08:19,680 --> 00:08:21,330
people operating you want a nice

234
00:08:21,330 --> 00:08:22,440
interface when we be able to do

235
00:08:22,440 --> 00:08:24,720
processing on the leader you get back so

236
00:08:24,720 --> 00:08:27,690
I created echo which has a back-end that

237
00:08:27,690 --> 00:08:29,250
has a whole bunch of docker containers

238
00:08:29,250 --> 00:08:31,830
uses Python 3 to stand up a web server

239
00:08:31,830 --> 00:08:33,029
and allows you to access all of that

240
00:08:33,029 --> 00:08:34,679
sort of stuff there's a couple of agents

241
00:08:34,679 --> 00:08:36,120
in there now the Java Script automates

242
00:08:36,120 --> 00:08:38,130
in there's also title on one the other

243
00:08:38,130 --> 00:08:40,020
people on our team Chris Ross created a

244
00:08:40,020 --> 00:08:40,740
JavaScript

245
00:08:40,740 --> 00:08:42,839
Chrome extension agent that runs in the

246
00:08:42,839 --> 00:08:45,300
browser that's calls back to this the

247
00:08:45,300 --> 00:08:47,190
back end is all restful api and it does

248
00:08:47,190 --> 00:08:49,350
some nice things like tracking your

249
00:08:49,350 --> 00:08:50,590
hosting on that

250
00:08:50,590 --> 00:08:52,930
artifacts it not lawyer you may in fact

251
00:08:52,930 --> 00:08:55,810
to attack the grand attack when you get

252
00:08:55,810 --> 00:08:57,580
this nice correlation between what you

253
00:08:57,580 --> 00:08:59,020
actually cast in the data that comes

254
00:08:59,020 --> 00:09:01,600
back it's not just a dump of data back

255
00:09:01,600 --> 00:09:02,920
you can actually poorly all this

256
00:09:02,920 --> 00:09:05,650
information so in the back end it's

257
00:09:05,650 --> 00:09:07,570
actually happening if you have this kind

258
00:09:07,570 --> 00:09:09,580
of main Apfel server here this is the

259
00:09:09,580 --> 00:09:11,710
Python 3 server it communicates to a

260
00:09:11,710 --> 00:09:13,930
Postgres database and users rabbit and

261
00:09:13,930 --> 00:09:15,220
queue to talk to a whole bunch of other

262
00:09:15,220 --> 00:09:17,529
containers but all the docker containers

263
00:09:17,529 --> 00:09:19,390
to actually do the compilations for the

264
00:09:19,390 --> 00:09:21,220
different agents are you doing it has

265
00:09:21,220 --> 00:09:23,080
the architecture for the different you

266
00:09:23,080 --> 00:09:25,150
profile to be trying to talk to all that

267
00:09:25,150 --> 00:09:26,500
sort of stuff kind of doctor is out

268
00:09:26,500 --> 00:09:28,540
there and so you can see here loosely

269
00:09:28,540 --> 00:09:31,300
you use a browser connect into it super

270
00:09:31,300 --> 00:09:33,279
easy from the operator side connecting

271
00:09:33,279 --> 00:09:34,779
to the server and the agent callback

272
00:09:34,779 --> 00:09:36,910
communities sweet tube topper container

273
00:09:36,910 --> 00:09:39,520
which is the high level over here not

274
00:09:39,520 --> 00:09:40,650
really what this presentation is about

275
00:09:40,650 --> 00:09:44,050
well now I want to tweak all the kind of

276
00:09:44,050 --> 00:09:45,370
information that you know about base

277
00:09:45,370 --> 00:09:47,350
Java stick to automation and I want to

278
00:09:47,350 --> 00:09:49,120
turn that into an actual agent I can use

279
00:09:49,120 --> 00:09:52,240
in write some operations so the first

280
00:09:52,240 --> 00:09:54,520
time you need to command consult right

281
00:09:54,520 --> 00:09:57,790
standard C 2 or any agent that you want

282
00:09:57,790 --> 00:10:01,120
to use well as we go through design this

283
00:10:01,120 --> 00:10:02,560
for operations I found this to be

284
00:10:02,560 --> 00:10:04,270
resilient and able to use for a long

285
00:10:04,270 --> 00:10:07,900
time so I don't want to you know design

286
00:10:07,900 --> 00:10:09,460
consideration that I brought into this

287
00:10:09,460 --> 00:10:10,990
so the first one being for command

288
00:10:10,990 --> 00:10:13,270
control I don't want the agent to have

289
00:10:13,270 --> 00:10:15,250
to know about any of the implementations

290
00:10:15,250 --> 00:10:18,040
so whether you're using ASIC yes Twitter

291
00:10:18,040 --> 00:10:20,410
you doing stego and like some images you

292
00:10:20,410 --> 00:10:23,110
posting somewhere I don't care the agent

293
00:10:23,110 --> 00:10:24,790
shouldn't have to care so long as it

294
00:10:24,790 --> 00:10:27,370
just knows a certain few API calls that

295
00:10:27,370 --> 00:10:29,860
get casting post response that's what

296
00:10:29,860 --> 00:10:31,930
implementation of talk happens shouldn't

297
00:10:31,930 --> 00:10:34,860
matter to the base agent itself so that

298
00:10:34,860 --> 00:10:37,720
way you can kind of swap out your actual

299
00:10:37,720 --> 00:10:39,730
CG mechanisms on the fly because it

300
00:10:39,730 --> 00:10:41,380
doesn't matter if the API 2 is the same

301
00:10:41,380 --> 00:10:44,170
as you go through when you start doing

302
00:10:44,170 --> 00:10:46,690
this I initially did a TPS that was

303
00:10:46,690 --> 00:10:48,430
flying from Asia through contact but

304
00:10:48,430 --> 00:10:49,690
once you start going through using this

305
00:10:49,690 --> 00:10:51,700
in operations you need to kind of step

306
00:10:51,700 --> 00:10:52,750
up your game a little bit you need

307
00:10:52,750 --> 00:10:54,760
additional layers of encryption going

308
00:10:54,760 --> 00:10:57,910
inside of it so I started using Apple

309
00:10:57,910 --> 00:11:01,180
security framework to do it could be key

310
00:11:01,180 --> 00:11:04,030
exchange as part of the whole 20

311
00:11:04,030 --> 00:11:07,390
or call so in here you can do a little

312
00:11:07,390 --> 00:11:08,650
snippet there at the bottom to be very

313
00:11:08,650 --> 00:11:11,500
explicit and how you do the encrypted

314
00:11:11,500 --> 00:11:13,180
key exchange and anything security

315
00:11:13,180 --> 00:11:15,160
related within JavaScript automation

316
00:11:15,160 --> 00:11:16,840
because you have to do all these crazy

317
00:11:16,840 --> 00:11:19,240
long function calls and cranberries and

318
00:11:19,240 --> 00:11:21,490
all this sort of gross stuff learned a

319
00:11:21,490 --> 00:11:23,380
lot of lot of things along the way as

320
00:11:23,380 --> 00:11:24,880
well as something kind of interesting

321
00:11:24,880 --> 00:11:28,840
I told us a win but it's Apple so to get

322
00:11:28,840 --> 00:11:31,000
the rings off so as I was going through

323
00:11:31,000 --> 00:11:32,890
not doing it for the key exchange I'm

324
00:11:32,890 --> 00:11:34,180
doing a lot of stuff with AES encryption

325
00:11:34,180 --> 00:11:36,190
and so now if you don't know a lot about

326
00:11:36,190 --> 00:11:38,230
encryption a big thing that comes into

327
00:11:38,230 --> 00:11:41,080
this is your IV this is should be a

328
00:11:41,080 --> 00:11:44,410
random value okay so I went through I

329
00:11:44,410 --> 00:11:47,080
went to Apple documentation and as part

330
00:11:47,080 --> 00:11:50,740
of this there's a set IV q okay awesome

331
00:11:50,740 --> 00:11:53,200
I need this where description says if

332
00:11:53,200 --> 00:11:55,090
you don't supply a body an appropriate

333
00:11:55,090 --> 00:11:56,500
one will be supplied for you that's

334
00:11:56,500 --> 00:11:56,860
sweet

335
00:11:56,860 --> 00:11:58,570
I don't the generated random number I'm

336
00:11:58,570 --> 00:12:00,760
hoping to get for me started testing

337
00:12:00,760 --> 00:12:01,810
that so that this is weird

338
00:12:01,810 --> 00:12:04,870
it always seems to be zero so I go

339
00:12:04,870 --> 00:12:05,770
through I look at the open source

340
00:12:05,770 --> 00:12:08,500
documentation and sure enough it always

341
00:12:08,500 --> 00:12:10,890
falls through to a base case of zero

342
00:12:10,890 --> 00:12:14,890
that's not a appropriate value so I

343
00:12:14,890 --> 00:12:17,080
emailed this um you know that goal and

344
00:12:17,080 --> 00:12:19,480
said hey you know all the steps this is

345
00:12:19,480 --> 00:12:21,130
not right it's kind of breaks fall

346
00:12:21,130 --> 00:12:24,790
security and so their response we Haven

347
00:12:24,790 --> 00:12:28,660
had expected okay thanks all right we

348
00:12:28,660 --> 00:12:30,760
update the description and say you

349
00:12:30,760 --> 00:12:32,500
absolutely should be supplying your own

350
00:12:32,500 --> 00:12:34,060
brand of lights because the default

351
00:12:34,060 --> 00:12:36,280
thing that we do is two coordinates so

352
00:12:36,280 --> 00:12:39,010
kind of wing kind of not but the top is

353
00:12:39,010 --> 00:12:41,980
called okay so that's kind of getting

354
00:12:41,980 --> 00:12:44,680
your C tube set up so after that now you

355
00:12:44,680 --> 00:12:46,420
have to communicate in some like how are

356
00:12:46,420 --> 00:12:48,610
you sending messages so like I said I

357
00:12:48,610 --> 00:12:50,440
wanted this to be resilient as I move

358
00:12:50,440 --> 00:12:52,960
forward and so one of the things I did

359
00:12:52,960 --> 00:12:54,220
that most people do whenever they think

360
00:12:54,220 --> 00:12:57,160
about c2 is you can adjust whatever you

361
00:12:57,160 --> 00:12:59,140
are I um if you communicate over HTTP

362
00:12:59,140 --> 00:13:00,670
right you shouldn't be pulling back to

363
00:13:00,670 --> 00:13:04,090
post my response from command right this

364
00:13:04,090 --> 00:13:06,190
or deception be changeable I also wanted

365
00:13:06,190 --> 00:13:07,660
to add in this little extra feature

366
00:13:07,660 --> 00:13:10,150
these dynamic endpoints if you do an get

367
00:13:10,150 --> 00:13:11,230
testing request

368
00:13:11,230 --> 00:13:13,600
twice I don't want it to look this thing

369
00:13:13,600 --> 00:13:15,580
in both times so added in these little

370
00:13:15,580 --> 00:13:17,410
features where you can specify

371
00:13:17,410 --> 00:13:21,519
we're in the URI these ma and n5 kind of

372
00:13:21,519 --> 00:13:23,860
prefixes to say you know for example

373
00:13:23,860 --> 00:13:26,949
here n 15 every time you do this request

374
00:13:26,949 --> 00:13:29,889
put in 15 random numbers I don't care or

375
00:13:29,889 --> 00:13:32,589
15 random alphanumeric characters so you

376
00:13:32,589 --> 00:13:34,329
make sure that all of your requests look

377
00:13:34,329 --> 00:13:34,870
different

378
00:13:34,870 --> 00:13:36,490
whoops make you kind of blend into the

379
00:13:36,490 --> 00:13:38,560
noise a little better I have more than

380
00:13:38,560 --> 00:13:40,209
annoying things about this though it

381
00:13:40,209 --> 00:13:42,399
despite being JavaScript you don't have

382
00:13:42,399 --> 00:13:44,439
all of normal JavaScript capabilities

383
00:13:44,439 --> 00:13:46,209
but you might have if you're actually

384
00:13:46,209 --> 00:13:47,500
getting talks within the browser on

385
00:13:47,500 --> 00:13:50,379
node.js so you can't just do like xml

386
00:13:50,379 --> 00:13:52,449
httprequest will start sending out your

387
00:13:52,449 --> 00:13:54,699
information you have to cook the

388
00:13:54,699 --> 00:13:56,379
objective-c a cat falls under the hood

389
00:13:56,379 --> 00:13:58,120
that's what's happening down here at the

390
00:13:58,120 --> 00:13:59,620
bottom is you actually have to specify

391
00:13:59,620 --> 00:14:02,949
that mutable request put Indian coatings

392
00:14:02,949 --> 00:14:05,769
may get lost deconversion you I didn't

393
00:14:05,769 --> 00:14:08,259
the parameters one by one all that sort

394
00:14:08,259 --> 00:14:10,689
of stuff super gross but doable and just

395
00:14:10,689 --> 00:14:13,420
look lead yeah falls into the hood so

396
00:14:13,420 --> 00:14:14,889
now that we kind of have this command

397
00:14:14,889 --> 00:14:17,199
control structure set up now you to be

398
00:14:17,199 --> 00:14:19,779
able to do things right you need modules

399
00:14:19,779 --> 00:14:21,670
in here that you're gonna execute one of

400
00:14:21,670 --> 00:14:22,569
the nice things about this being

401
00:14:22,569 --> 00:14:24,699
JavaScript though is that it's not

402
00:14:24,699 --> 00:14:26,860
compliant it's interpreted so you can

403
00:14:26,860 --> 00:14:29,319
add in new functions as you go without a

404
00:14:29,319 --> 00:14:31,899
bunch of hey what you thought with this

405
00:14:31,899 --> 00:14:34,060
for doubts if I just use eval so you can

406
00:14:34,060 --> 00:14:36,160
go through and give it some string of

407
00:14:36,160 --> 00:14:38,920
code eval it get an actual function back

408
00:14:38,920 --> 00:14:40,689
and now you can use this mapping between

409
00:14:40,689 --> 00:14:42,579
function name and XOR function cloth

410
00:14:42,579 --> 00:14:45,459
without going to do anything crazy just

411
00:14:45,459 --> 00:14:46,810
kind of taking this the next step

412
00:14:46,810 --> 00:14:48,759
actually goes through and you start

413
00:14:48,759 --> 00:14:50,230
sitting around payload especially if you

414
00:14:50,230 --> 00:14:52,180
doing fishing you don't necessarily want

415
00:14:52,180 --> 00:14:53,740
to leak all of your ticket Ovie's at

416
00:14:53,740 --> 00:14:56,920
once but you send hey my initial paler

417
00:14:56,920 --> 00:14:59,259
six o'clock way maybe eight me saying I

418
00:14:59,259 --> 00:15:01,870
can do these 15,000 things we just burnt

419
00:15:01,870 --> 00:15:03,970
not only that campaign and that payload

420
00:15:03,970 --> 00:15:06,399
but all future wants potentially because

421
00:15:06,399 --> 00:15:08,470
now the consider each thing you can do

422
00:15:08,470 --> 00:15:11,050
so what if you just sent the bare

423
00:15:11,050 --> 00:15:13,899
minimum to your payload which your

424
00:15:13,899 --> 00:15:16,569
target or whatever essentially just exit

425
00:15:16,569 --> 00:15:19,480
and load right now if the defender

426
00:15:19,480 --> 00:15:21,579
catches a clear the base please see okay

427
00:15:21,579 --> 00:15:23,980
this can communicate over c2 and it can

428
00:15:23,980 --> 00:15:29,139
run things and edges but okay I don't

429
00:15:29,139 --> 00:15:31,140
necessarily know maybe where else move

430
00:15:31,140 --> 00:15:34,019
however a consult potential any other

431
00:15:34,019 --> 00:15:35,670
sort of stuff if you're looking that all

432
00:15:35,670 --> 00:15:38,850
into memory for agent now it's less than

433
00:15:38,850 --> 00:15:41,010
two C so I kind of go down that route

434
00:15:41,010 --> 00:15:43,050
whenever you build payloads and hat fell

435
00:15:43,050 --> 00:15:45,810
and use this display look specifically

436
00:15:45,810 --> 00:15:47,399
add a whole bunch of commands down there

437
00:15:47,399 --> 00:15:48,959
that you can load to do a whole bunch of

438
00:15:48,959 --> 00:15:50,700
crazy things on system all using

439
00:15:50,700 --> 00:15:52,589
javascript automation but ideally

440
00:15:52,589 --> 00:15:54,570
whenever I do this I just put in the

441
00:15:54,570 --> 00:15:58,019
payload negative M low so now that we

442
00:15:58,019 --> 00:16:00,180
kind of have the base of this agent

443
00:16:00,180 --> 00:16:02,490
we're going to use let's do something

444
00:16:02,490 --> 00:16:04,050
with it right we need to operate that's

445
00:16:04,050 --> 00:16:07,470
kind of the point so I noticed blue

446
00:16:07,470 --> 00:16:10,040
 defensive dependent assign

447
00:16:10,040 --> 00:16:12,300
typically whenever we look at execution

448
00:16:12,300 --> 00:16:13,890
on Mac OS and we saw this kind of a

449
00:16:13,890 --> 00:16:15,060
couple times already

450
00:16:15,060 --> 00:16:17,940
people will curl your elves and put them

451
00:16:17,940 --> 00:16:20,820
in the bash they'll echo base64 encoded

452
00:16:20,820 --> 00:16:22,769
strings then type them into Python gonna

453
00:16:22,769 --> 00:16:24,209
make scripts like all the sort of stuff

454
00:16:24,209 --> 00:16:26,490
is normal that you see now or do over

455
00:16:26,490 --> 00:16:28,860
and over and over again so it's on our

456
00:16:28,860 --> 00:16:29,430
side

457
00:16:29,430 --> 00:16:30,750
what Queenie that's a little bit

458
00:16:30,750 --> 00:16:32,640
different so one of the nice things

459
00:16:32,640 --> 00:16:36,089
about being able to use eval and API

460
00:16:36,089 --> 00:16:37,709
calls under the hood with jobs with the

461
00:16:37,709 --> 00:16:40,560
automation is I can do a one-liner that

462
00:16:40,560 --> 00:16:43,440
just uses Objective C API calls to pull

463
00:16:43,440 --> 00:16:44,850
down the code and execute it in memory

464
00:16:44,850 --> 00:16:47,370
the nice thing about this is I'm using

465
00:16:47,370 --> 00:16:50,250
OS a script so it's a native sign to

466
00:16:50,250 --> 00:16:52,260
Apple binary and I'm just pulling down

467
00:16:52,260 --> 00:16:53,699
code and growing it in memory

468
00:16:53,699 --> 00:16:55,380
there's no gatekeeper there's no sign

469
00:16:55,380 --> 00:16:56,399
name they've known about coming into

470
00:16:56,399 --> 00:16:58,320
black so it's nice that kind of bypass

471
00:16:58,320 --> 00:17:00,300
is all about you can reach out and pull

472
00:17:00,300 --> 00:17:02,670
down evil box home slash Google right

473
00:17:02,670 --> 00:17:04,260
into memory eval it and you're good to

474
00:17:04,260 --> 00:17:07,410
go if you want you can go through like I

475
00:17:07,410 --> 00:17:10,109
said JavaScript automation and APIs that

476
00:17:10,109 --> 00:17:14,069
can be compiled into the script file as

477
00:17:14,069 --> 00:17:16,650
well certain things that you need to do

478
00:17:16,650 --> 00:17:19,260
it will require these sorts of different

479
00:17:19,260 --> 00:17:20,369
compilations and I'll talk about these a

480
00:17:20,369 --> 00:17:22,439
little bit later that require it but if

481
00:17:22,439 --> 00:17:23,880
you need to you can easily compile

482
00:17:23,880 --> 00:17:26,250
either in memory or you can use OSE

483
00:17:26,250 --> 00:17:28,590
compile or you can use the script editor

484
00:17:28,590 --> 00:17:29,760
there's a whole bunch of ways you can

485
00:17:29,760 --> 00:17:32,370
get these additional um files out of it

486
00:17:32,370 --> 00:17:33,990
and of course you can just double click

487
00:17:33,990 --> 00:17:36,360
them and they run with pretty

488
00:17:36,360 --> 00:17:39,360
straightforward pretty nice but one of

489
00:17:39,360 --> 00:17:40,140
the things that you should know about

490
00:17:40,140 --> 00:17:42,900
this as you go through lots of malware

491
00:17:42,900 --> 00:17:43,410
authors

492
00:17:43,410 --> 00:17:45,330
through and use this new shell script

493
00:17:45,330 --> 00:17:47,790
functionality to do Apple script and s

494
00:17:47,790 --> 00:17:50,160
call whatever additional script or

495
00:17:50,160 --> 00:17:52,320
payload or not they want to do if you

496
00:17:52,320 --> 00:17:54,540
actually call this do shell script what

497
00:17:54,540 --> 00:17:56,460
happens under the hood is your spawning

498
00:17:56,460 --> 00:17:59,220
VIN SH taxi and then the command that

499
00:17:59,220 --> 00:18:01,530
you specified I don't know if you guys

500
00:18:01,530 --> 00:18:03,330
are familiar with the windows world but

501
00:18:03,330 --> 00:18:05,190
on Windows we sort of see this sort of

502
00:18:05,190 --> 00:18:06,210
stuff all the time with things like

503
00:18:06,210 --> 00:18:08,370
COBOL shirt where people will do shell

504
00:18:08,370 --> 00:18:10,440
on a command and they spawn cmd.exe

505
00:18:10,440 --> 00:18:12,990
whacks me in the command it has become

506
00:18:12,990 --> 00:18:15,240
widely known as a portable indicator

507
00:18:15,240 --> 00:18:16,650
people doing this sort of stuff all the

508
00:18:16,650 --> 00:18:16,950
time

509
00:18:16,950 --> 00:18:19,620
no normal person take down the command

510
00:18:19,620 --> 00:18:21,870
line so people do this all the time on

511
00:18:21,870 --> 00:18:23,790
Mac and it should be the same sort of

512
00:18:23,790 --> 00:18:26,310
thing if you see this Venus HDFC thing

513
00:18:26,310 --> 00:18:28,380
how often is a normal user sitting on

514
00:18:28,380 --> 00:18:29,940
the command line typing that right this

515
00:18:29,940 --> 00:18:31,230
is the sort of riddle indicators that

516
00:18:31,230 --> 00:18:32,880
I'll keep talking about you should be

517
00:18:32,880 --> 00:18:34,440
thinking more about what's actually

518
00:18:34,440 --> 00:18:36,890
happening what causes this sort of stuff

519
00:18:36,890 --> 00:18:38,880
initial thing to know about this as well

520
00:18:38,880 --> 00:18:41,970
is if you actually access bin SH on max

521
00:18:41,970 --> 00:18:45,930
it's not actually been SH because Apple

522
00:18:45,930 --> 00:18:48,990
so it's actually been crash any leading

523
00:18:48,990 --> 00:18:52,380
between SH so that comes into play for

524
00:18:52,380 --> 00:18:54,060
more things perfectly you're doing

525
00:18:54,060 --> 00:18:57,360
persistence but it causes some oddities

526
00:18:57,360 --> 00:18:59,600
like you can't just background a task so

527
00:18:59,600 --> 00:19:01,470
keep that in mind if you're going to go

528
00:19:01,470 --> 00:19:03,210
to doing this sort of stuff or if you

529
00:19:03,210 --> 00:19:05,040
start using been SH and other things

530
00:19:05,040 --> 00:19:08,580
operations so as you go through

531
00:19:08,580 --> 00:19:11,340
now maybe you're gonna spawn you shall

532
00:19:11,340 --> 00:19:13,860
do the benefits that see okay you're

533
00:19:13,860 --> 00:19:15,720
gonna start executing things one of the

534
00:19:15,720 --> 00:19:17,490
things people do all the time you need

535
00:19:17,490 --> 00:19:19,440
your Studios well if you're doing this

536
00:19:19,440 --> 00:19:21,540
kind of asynchronous callback and you're

537
00:19:21,540 --> 00:19:23,220
just pawning commands right

538
00:19:23,220 --> 00:19:25,170
during the do shell scripts you don't

539
00:19:25,170 --> 00:19:27,240
have the ability to you know like do

540
00:19:27,240 --> 00:19:28,680
file descriptors and be able to click

541
00:19:28,680 --> 00:19:30,690
things in the standard in so how are you

542
00:19:30,690 --> 00:19:32,310
accessing sudo how are you doing int

543
00:19:32,310 --> 00:19:32,930
elevated

544
00:19:32,930 --> 00:19:36,150
javascript has our back on this there's

545
00:19:36,150 --> 00:19:37,770
actually a piece in here that you can

546
00:19:37,770 --> 00:19:39,540
say for do shell script with

547
00:19:39,540 --> 00:19:41,210
administrator privileges

548
00:19:41,210 --> 00:19:45,180
awesome you can also specify what you

549
00:19:45,180 --> 00:19:46,680
call to the user when it when you do

550
00:19:46,680 --> 00:19:49,290
this you can say whatever you want you

551
00:19:49,290 --> 00:19:50,970
can also specify whatever icon you want

552
00:19:50,970 --> 00:19:53,220
to use and also assess or other sort of

553
00:19:53,220 --> 00:19:55,670
stuff so definitely doesn't have to

554
00:19:55,670 --> 00:19:57,860
legit make it look like you want that's

555
00:19:57,860 --> 00:19:59,750
prompting for cracks if you have the

556
00:19:59,750 --> 00:20:01,520
codes already you can use the same sort

557
00:20:01,520 --> 00:20:03,320
of thing and supply these two additional

558
00:20:03,320 --> 00:20:05,870
ones username and password pass them in

559
00:20:05,870 --> 00:20:07,990
and now you're essentially doing sudo a

560
00:20:07,990 --> 00:20:12,080
kind of third bonus thanks couple if

561
00:20:12,080 --> 00:20:14,240
there's this kind of in the

562
00:20:14,240 --> 00:20:16,970
collaboration framework if you do the

563
00:20:16,970 --> 00:20:19,340
identity with me there's an authenticate

564
00:20:19,340 --> 00:20:20,930
with password function that you can do

565
00:20:20,930 --> 00:20:24,050
that all its purpose is how you chew or

566
00:20:24,050 --> 00:20:26,440
false if this password is for this user

567
00:20:26,440 --> 00:20:29,480
doesn't wanna process doesn't seem to

568
00:20:29,480 --> 00:20:31,910
have a lockout capability so you can

569
00:20:31,910 --> 00:20:34,070
such a group force immediately AP is

570
00:20:34,070 --> 00:20:38,300
packaged thanks so I had to go through

571
00:20:38,300 --> 00:20:41,030
you do this though one thing you should

572
00:20:41,030 --> 00:20:42,370
know if you're doing this with

573
00:20:42,370 --> 00:20:44,720
administrative privileges you're not

574
00:20:44,720 --> 00:20:46,670
calling stood Oh what you're doing

575
00:20:46,670 --> 00:20:48,620
something else so this goes back to you

576
00:20:48,620 --> 00:20:50,300
know one kind of what tools happen under

577
00:20:50,300 --> 00:20:51,920
the hood and one of the things here that

578
00:20:51,920 --> 00:20:53,630
happens is you clone is security off

579
00:20:53,630 --> 00:20:57,440
trampling and so in the end instead of

580
00:20:57,440 --> 00:21:00,560
doing like Venus HDFC LS or whatever

581
00:21:00,560 --> 00:21:03,290
spawning black command when I say that's

582
00:21:03,290 --> 00:21:06,110
TLS and under command at last when you

583
00:21:06,110 --> 00:21:07,790
do it this way we're actually spawning

584
00:21:07,790 --> 00:21:10,370
five different processes in a row very

585
00:21:10,370 --> 00:21:12,110
quick succession to get this security

586
00:21:12,110 --> 00:21:13,970
off trampoline and everything set up to

587
00:21:13,970 --> 00:21:15,320
then just pull it out that every command

588
00:21:15,320 --> 00:21:17,270
recharge execute so here's an example of

589
00:21:17,270 --> 00:21:21,350
what it looks like this is using monitor

590
00:21:21,350 --> 00:21:24,410
from firearm and yet it goes through you

591
00:21:24,410 --> 00:21:27,080
can see here I was just doing Who am I

592
00:21:27,080 --> 00:21:29,210
and you can see there is the what you

593
00:21:29,210 --> 00:21:31,070
would expect the mismatch as I'm trying

594
00:21:31,070 --> 00:21:33,470
to do things as route and you can see

595
00:21:33,470 --> 00:21:36,020
down here at the bottom my user it's a

596
00:21:36,020 --> 00:21:38,540
feature I went through and you can see

597
00:21:38,540 --> 00:21:40,460
if those security off trampoline you can

598
00:21:40,460 --> 00:21:42,140
see squid musicians getting launched

599
00:21:42,140 --> 00:21:44,210
multiple times boiling down to the root

600
00:21:44,210 --> 00:21:46,910
which then just in essence comes down to

601
00:21:46,910 --> 00:21:49,940
again witness HSC Who am I and Johanna

602
00:21:49,940 --> 00:21:51,440
we kind of need to know of what's

603
00:21:51,440 --> 00:21:53,120
happening under the hood don't

604
00:21:53,120 --> 00:21:55,370
necessarily look for sudo happening in

605
00:21:55,370 --> 00:21:57,710
as an indication of some adversary using

606
00:21:57,710 --> 00:21:59,180
elevated permissions right there's a

607
00:21:59,180 --> 00:22:00,290
whole bunch of different ways that you

608
00:22:00,290 --> 00:22:03,170
can go about doing this so that's kind

609
00:22:03,170 --> 00:22:04,730
of execution how are you going to do

610
00:22:04,730 --> 00:22:07,100
things in this operation next part is

611
00:22:07,100 --> 00:22:08,630
looking at discovery

612
00:22:08,630 --> 00:22:10,940
figure out what's going on typically

613
00:22:10,940 --> 00:22:13,580
adversaries go through they do ID to a

614
00:22:13,580 --> 00:22:16,610
my ifconfig the SEL post name like all

615
00:22:16,610 --> 00:22:18,140
the sort of stuff they're running all of

616
00:22:18,140 --> 00:22:19,460
these commands in quick succession to

617
00:22:19,460 --> 00:22:21,140
try and figure out what's happening

618
00:22:21,140 --> 00:22:24,980
where am i what exists on this box and

619
00:22:24,980 --> 00:22:27,140
so in example this is coming from a

620
00:22:27,140 --> 00:22:28,850
carbon block report talking about a

621
00:22:28,850 --> 00:22:32,420
slayer variant we can see here they get

622
00:22:32,420 --> 00:22:33,860
a whole bunch of pearls in stuff flowing

623
00:22:33,860 --> 00:22:35,960
down a script then just goes clear and

624
00:22:35,960 --> 00:22:38,750
runs off whole bunch of commands so from

625
00:22:38,750 --> 00:22:40,850
a defensive perspective that looks kind

626
00:22:40,850 --> 00:22:42,290
of abnormal unless this is coming from

627
00:22:42,290 --> 00:22:44,960
know a push out from your MDM or whatnot

628
00:22:44,960 --> 00:22:48,680
just these wide range of discovery

629
00:22:48,680 --> 00:22:50,200
techniques happening in quick succession

630
00:22:50,200 --> 00:22:52,210
usually not a good thing

631
00:22:52,210 --> 00:22:55,880
what do we really need to spawn all the

632
00:22:55,880 --> 00:22:57,170
processes to get all the sort of

633
00:22:57,170 --> 00:22:59,720
information has an attacker not really

634
00:22:59,720 --> 00:23:01,490
this information most of this

635
00:23:01,490 --> 00:23:03,230
information is stored already on this

636
00:23:03,230 --> 00:23:05,330
and that's just what these binaries are

637
00:23:05,330 --> 00:23:07,520
pulling down for you so I went through

638
00:23:07,520 --> 00:23:08,690
and I worked two additional tools to

639
00:23:08,690 --> 00:23:11,090
help with this to get local information

640
00:23:11,090 --> 00:23:12,590
what's happening on the system I wrap up

641
00:23:12,590 --> 00:23:14,360
inspector and to get stuff from the

642
00:23:14,360 --> 00:23:16,160
domain if you have a domain joint system

643
00:23:16,160 --> 00:23:18,710
there's portrait there's a forest of

644
00:23:18,710 --> 00:23:22,340
apples is important yeah sorry so we're

645
00:23:22,340 --> 00:23:25,610
doing local discovery what I go through

646
00:23:25,610 --> 00:23:27,140
and do with both inspector

647
00:23:27,140 --> 00:23:29,510
they just read files where this is most

648
00:23:29,510 --> 00:23:31,430
innocuous thing most people don't look

649
00:23:31,430 --> 00:23:33,290
for this cuz it would overwhelming your

650
00:23:33,290 --> 00:23:35,870
sensors overwhelm your analysts of just

651
00:23:35,870 --> 00:23:38,180
looking at flower greens but there's a

652
00:23:38,180 --> 00:23:39,470
lot of interesting things that are kind

653
00:23:39,470 --> 00:23:41,660
of there on a system already stored in

654
00:23:41,660 --> 00:23:44,240
these different p lists specifically I

655
00:23:44,240 --> 00:23:46,160
go through and I look at your library

656
00:23:46,160 --> 00:23:47,840
preferences and of system preferences

657
00:23:47,840 --> 00:23:52,880
the kind of pull information so yeah on

658
00:23:52,880 --> 00:23:54,950
Windows you can actually help combat

659
00:23:54,950 --> 00:23:56,420
this a little bit because of the idea of

660
00:23:56,420 --> 00:23:58,130
tackles you can kind of get alerts on

661
00:23:58,130 --> 00:24:00,500
specific reads or actions on files on

662
00:24:00,500 --> 00:24:02,360
Mac OS is a bit harder you kind of have

663
00:24:02,360 --> 00:24:04,220
to go through do some sort of tweaking

664
00:24:04,220 --> 00:24:06,920
without addy it's kind of gross and

665
00:24:06,920 --> 00:24:07,880
you're still probably going to get

666
00:24:07,880 --> 00:24:09,200
inundated or slow down your center

667
00:24:09,200 --> 00:24:10,010
trying to parse through all this

668
00:24:10,010 --> 00:24:11,870
information what you can see down there

669
00:24:11,870 --> 00:24:12,560
at the bottom

670
00:24:12,560 --> 00:24:14,210
super easy from JavaScript for

671
00:24:14,210 --> 00:24:15,650
automation to go through and read these

672
00:24:15,650 --> 00:24:17,780
plist files essentially all you do is

673
00:24:17,780 --> 00:24:20,510
you call one function that says create a

674
00:24:20,510 --> 00:24:21,520
dictionary with

675
00:24:21,520 --> 00:24:23,740
as of this file Jesus files are already

676
00:24:23,740 --> 00:24:25,690
dictionary objects whether they're in

677
00:24:25,690 --> 00:24:28,420
XML or binary format so Objective C

678
00:24:28,420 --> 00:24:30,220
under the hood marches that for your

679
00:24:30,220 --> 00:24:33,700
rate which is awesome so this is the

680
00:24:33,700 --> 00:24:35,559
first iteration of health inspector this

681
00:24:35,559 --> 00:24:36,850
is all the stuff that goes through and

682
00:24:36,850 --> 00:24:38,590
pulls for you parses back and gives you

683
00:24:38,590 --> 00:24:40,809
the comp interesting information so you

684
00:24:40,809 --> 00:24:42,790
can see here a couple of interesting

685
00:24:42,790 --> 00:24:44,080
ones are going through to look at launch

686
00:24:44,080 --> 00:24:46,240
services so you can see which programs

687
00:24:46,240 --> 00:24:49,270
have URL schemes registered what file

688
00:24:49,270 --> 00:24:51,040
what programs are associated before file

689
00:24:51,040 --> 00:24:53,380
extensions you can see logon items you

690
00:24:53,380 --> 00:24:54,970
can see which programs are specifically

691
00:24:54,970 --> 00:24:57,850
allowed through the firewall you can see

692
00:24:57,850 --> 00:24:59,890
what kind of groups you're in you can

693
00:24:59,890 --> 00:25:04,090
see what company like virtual desktops a

694
00:25:04,090 --> 00:25:05,770
user has and which one they're currently

695
00:25:05,770 --> 00:25:07,630
using all the sort of crazy information

696
00:25:07,630 --> 00:25:09,760
just stored and P lists no me just want

697
00:25:09,760 --> 00:25:11,290
any of the processes and just reading

698
00:25:11,290 --> 00:25:14,980
files on this so you can see a couple of

699
00:25:14,980 --> 00:25:16,870
these you can also see all software

700
00:25:16,870 --> 00:25:18,190
that's installed on this the versions

701
00:25:18,190 --> 00:25:21,550
you can see SMB information what what

702
00:25:21,550 --> 00:25:23,710
programs are adopt on the side which

703
00:25:23,710 --> 00:25:25,450
ones are set to reopen which other

704
00:25:25,450 --> 00:25:26,650
things are they're all sort of crazy

705
00:25:26,650 --> 00:25:29,860
stuff just by default from a offensive

706
00:25:29,860 --> 00:25:32,400
perspective you can also see kind of

707
00:25:32,400 --> 00:25:35,440
extra consequences so for example you

708
00:25:35,440 --> 00:25:37,750
can tell from the finder preferences if

709
00:25:37,750 --> 00:25:39,550
people see the hidden extensions or the

710
00:25:39,550 --> 00:25:41,500
default extension profiles this gives

711
00:25:41,500 --> 00:25:42,760
you kind of clues of what you can and

712
00:25:42,760 --> 00:25:44,530
cannot do if you try and hide things if

713
00:25:44,530 --> 00:25:46,420
the user is just browsing on the system

714
00:25:46,420 --> 00:25:48,040
can see those locks so all the sort of

715
00:25:48,040 --> 00:25:50,230
stuff you kind of read into as the

716
00:25:50,230 --> 00:25:52,840
offensive side to give kind of better

717
00:25:52,840 --> 00:25:56,440
lay of the lamp what's going on so as we

718
00:25:56,440 --> 00:25:58,480
passed local information without looking

719
00:25:58,480 --> 00:26:00,820
at okay this computer in relation to

720
00:26:00,820 --> 00:26:04,179
everything most will go through and look

721
00:26:04,179 --> 00:26:06,250
at the FCL l-dub search yes caching so

722
00:26:06,250 --> 00:26:08,410
only sorts of things to kind of look at

723
00:26:08,410 --> 00:26:10,120
how the computer is going to hear in the

724
00:26:10,120 --> 00:26:13,390
environment that said lots of times

725
00:26:13,390 --> 00:26:15,520
people have nvm and so they'll just have

726
00:26:15,520 --> 00:26:17,590
like a jam configuration where it's not

727
00:26:17,590 --> 00:26:20,530
necessarily going to a domain but if it

728
00:26:20,530 --> 00:26:21,790
is joined to the domain which kind of

729
00:26:21,790 --> 00:26:23,620
happens more and more these days there's

730
00:26:23,620 --> 00:26:25,090
a lot of crazy stuff that you can see in

731
00:26:25,090 --> 00:26:28,360
there and so with orchard what it's

732
00:26:28,360 --> 00:26:30,850
doing is it music open directory which

733
00:26:30,850 --> 00:26:34,809
is apples roast version of a canary

734
00:26:34,809 --> 00:26:37,179
it goes through you can use it to query

735
00:26:37,179 --> 00:26:39,479
everything locally and remote the

736
00:26:39,479 --> 00:26:42,039
biggest limitation I've found so far is

737
00:26:42,039 --> 00:26:44,279
you can only query within your forest

738
00:26:44,279 --> 00:26:46,239
you haven't I haven't been able to

739
00:26:46,239 --> 00:26:47,470
figure out probably get it to query

740
00:26:47,470 --> 00:26:50,679
across a trusted fourth boundary that

741
00:26:50,679 --> 00:26:53,769
might just be a limitation between open

742
00:26:53,769 --> 00:26:55,450
directory and Microsoft's Active

743
00:26:55,450 --> 00:26:57,220
Directory to where the interactions

744
00:26:57,220 --> 00:26:59,619
together but if you're using DSD L from

745
00:26:59,619 --> 00:27:01,899
the command line essentially it's

746
00:27:01,899 --> 00:27:03,340
pulling the same sort of information you

747
00:27:03,340 --> 00:27:05,049
don't want me to spawn this yes they'll

748
00:27:05,049 --> 00:27:07,929
binary and so whenever I wrote this the

749
00:27:07,929 --> 00:27:10,479
kind of goal here is to have a map

750
00:27:10,479 --> 00:27:12,789
equivalent of parentage most people use

751
00:27:12,789 --> 00:27:14,440
this to go through and do a lot of their

752
00:27:14,440 --> 00:27:15,820
windows operations but we didn't really

753
00:27:15,820 --> 00:27:19,179
have anything on Mac for this so one

754
00:27:19,179 --> 00:27:20,229
through Saudi doing a whole bunch of

755
00:27:20,229 --> 00:27:22,149
different commands kind of mirroring

756
00:27:22,149 --> 00:27:24,580
acquired you style and you can specify

757
00:27:24,580 --> 00:27:27,220
whether you want to hit the objective

758
00:27:27,220 --> 00:27:29,830
the objective C API is under the hood or

759
00:27:29,830 --> 00:27:31,239
if you want to do the more traditional

760
00:27:31,239 --> 00:27:32,619
route that actually spawning yes yeah

761
00:27:32,619 --> 00:27:34,749
yes cache until all these sort of things

762
00:27:34,749 --> 00:27:37,299
just operate this kind of variation that

763
00:27:37,299 --> 00:27:40,330
allows you to test more the varying

764
00:27:40,330 --> 00:27:42,399
levels of defenders sometimes is going

765
00:27:42,399 --> 00:27:44,200
all-out super stealthy isn't the best

766
00:27:44,200 --> 00:27:45,549
option you kind of need to ramp things

767
00:27:45,549 --> 00:27:47,229
up a little bit in terms of noise level

768
00:27:47,229 --> 00:27:49,359
be able to find a threshold to actually

769
00:27:49,359 --> 00:27:51,340
get defenders on race to start pulling

770
00:27:51,340 --> 00:27:54,759
in an operation that is an example going

771
00:27:54,759 --> 00:27:56,830
through one of the annoying things about

772
00:27:56,830 --> 00:27:59,229
oakland directories for Apple is it has

773
00:27:59,229 --> 00:28:01,149
always kind of prefixes of whether

774
00:28:01,149 --> 00:28:02,830
something is a standard type or an e

775
00:28:02,830 --> 00:28:04,779
it's like and these also come into play

776
00:28:04,779 --> 00:28:06,970
or whether things are cast or not so you

777
00:28:06,970 --> 00:28:09,489
can see here just doing a quick query

778
00:28:09,489 --> 00:28:12,099
against a computer that's joined to the

779
00:28:12,099 --> 00:28:14,769
domain the domain fault test you can see

780
00:28:14,769 --> 00:28:16,359
that's it in the domain you can see what

781
00:28:16,359 --> 00:28:19,450
groups you remember of this thing down

782
00:28:19,450 --> 00:28:20,979
here at the bottom that Apple met a new

783
00:28:20,979 --> 00:28:23,489
Google piecing if you're using es DL

784
00:28:23,489 --> 00:28:25,840
you'll have to query things like Active

785
00:28:25,840 --> 00:28:28,359
Directory / the NetBIOS name of the

786
00:28:28,359 --> 00:28:29,919
domain slashed and then if you want to

787
00:28:29,919 --> 00:28:32,019
get more specific inside of your forest

788
00:28:32,019 --> 00:28:33,549
you can specify the fully qualified

789
00:28:33,549 --> 00:28:35,559
domain name of whatever subduing to try

790
00:28:35,559 --> 00:28:37,629
to access so this Apple meta node

791
00:28:37,629 --> 00:28:39,789
location is giving you that full path of

792
00:28:39,789 --> 00:28:42,249
words pulling this information back kind

793
00:28:42,249 --> 00:28:43,330
of handy if you're trying to mix the two

794
00:28:43,330 --> 00:28:46,929
or return to get extra information so

795
00:28:46,929 --> 00:28:47,650
that's

796
00:28:47,650 --> 00:28:49,810
kind of content overview lots of

797
00:28:49,810 --> 00:28:51,760
different queries that can get no need

798
00:28:51,760 --> 00:28:53,170
to actually spawn all those different

799
00:28:53,170 --> 00:28:54,250
binaries to get a lot of this

800
00:28:54,250 --> 00:28:56,770
information now let's look talking about

801
00:28:56,770 --> 00:29:00,100
persistence so typically whenever starts

802
00:29:00,100 --> 00:29:01,270
talking about persistence and we've seen

803
00:29:01,270 --> 00:29:02,760
this from a couple talks today

804
00:29:02,760 --> 00:29:04,390
advertised we'll go through and create

805
00:29:04,390 --> 00:29:05,710
long played games launch the immense

806
00:29:05,710 --> 00:29:07,360
brown dog blog and like all the sort of

807
00:29:07,360 --> 00:29:10,450
standard stuff but is that really

808
00:29:10,450 --> 00:29:12,040
necessary do you have to do that is

809
00:29:12,040 --> 00:29:14,340
there anything else you can do instead

810
00:29:14,340 --> 00:29:17,980
turned out lyrics so on Mac OS there's

811
00:29:17,980 --> 00:29:20,260
its feature called folder actions does

812
00:29:20,260 --> 00:29:22,990
anybody get familiar with these yeah

813
00:29:22,990 --> 00:29:23,740
nice

814
00:29:23,740 --> 00:29:27,250
so fuller actions essentially give you a

815
00:29:27,250 --> 00:29:29,680
way to automatically process and do

816
00:29:29,680 --> 00:29:30,340
something

817
00:29:30,340 --> 00:29:33,190
whenever a folder has an action happen

818
00:29:33,190 --> 00:29:35,020
to it this action could be the folder is

819
00:29:35,020 --> 00:29:37,540
open closed file at it follow removed

820
00:29:37,540 --> 00:29:39,580
all the sort of stuff in trigger the

821
00:29:39,580 --> 00:29:42,520
scripts to happen for us that's nice but

822
00:29:42,520 --> 00:29:45,640
it does require the scripts to be a dot

823
00:29:45,640 --> 00:29:47,680
scpt pop once we have compiled the

824
00:29:47,680 --> 00:29:49,990
script and I get quotes because if you

825
00:29:49,990 --> 00:29:52,660
compile like a Java Script or an Apple

826
00:29:52,660 --> 00:29:54,790
script like stay in your text file into

827
00:29:54,790 --> 00:29:57,310
this let executi you can't essentially

828
00:29:57,310 --> 00:30:00,310
just cut it and see 99% of it just plain

829
00:30:00,310 --> 00:30:03,340
text just AskMe but you can go through

830
00:30:03,340 --> 00:30:05,890
and have all this sort of stuff happen

831
00:30:05,890 --> 00:30:07,780
automatically these features of older

832
00:30:07,780 --> 00:30:10,420
acting this is a sub aspect for the

833
00:30:10,420 --> 00:30:13,300
system events process and so as you see

834
00:30:13,300 --> 00:30:14,530
we'll go through and have to interact

835
00:30:14,530 --> 00:30:15,370
with that well we do this

836
00:30:15,370 --> 00:30:18,550
programmatically additionally you can

837
00:30:18,550 --> 00:30:21,190
have multiple scripts for Kroger that

838
00:30:21,190 --> 00:30:24,340
take off and these scripts are not

839
00:30:24,340 --> 00:30:26,290
actually executed by you or route

840
00:30:26,290 --> 00:30:28,360
they're executed by this folder action

841
00:30:28,360 --> 00:30:31,060
dispatcher this is kind of nice but you

842
00:30:31,060 --> 00:30:32,470
can have this kicked off at a later time

843
00:30:32,470 --> 00:30:34,780
and like somebody's mentioning earlier

844
00:30:34,780 --> 00:30:37,000
it's not necessarily tied directly to

845
00:30:37,000 --> 00:30:39,070
your application for your process that

846
00:30:39,070 --> 00:30:40,780
set this up it's tied back to this

847
00:30:40,780 --> 00:30:42,820
folder actions dispatcher daemon they go

848
00:30:42,820 --> 00:30:44,470
to here and tries to pick it off so if

849
00:30:44,470 --> 00:30:46,390
you do want to pop ups for the Apple

850
00:30:46,390 --> 00:30:47,680
event messages between two different

851
00:30:47,680 --> 00:30:49,930
things is there's like terminal wants to

852
00:30:49,930 --> 00:30:51,550
control whatever it doesn't actually

853
00:30:51,550 --> 00:30:53,380
come up as your process that comes up as

854
00:30:53,380 --> 00:30:55,030
a spoiler action to this Patrick which

855
00:30:55,030 --> 00:30:58,240
is kind of now only sort of changes go

856
00:30:58,240 --> 00:31:00,160
through and they happen to this pawn by

857
00:31:00,160 --> 00:31:01,030
Apple that older

858
00:31:01,030 --> 00:31:03,580
accent dislike without peelers if you

859
00:31:03,580 --> 00:31:04,900
want to actually go through and pull us

860
00:31:04,900 --> 00:31:06,370
out and start messing with it

861
00:31:06,370 --> 00:31:09,520
it is really really gross because hackle

862
00:31:09,520 --> 00:31:13,180
and so it has a plist with two or three

863
00:31:13,180 --> 00:31:16,890
additional P lists inside of it that are

864
00:31:16,890 --> 00:31:19,660
encoded in basic before and then binary

865
00:31:19,660 --> 00:31:21,760
lists and more encoding inside of that

866
00:31:21,760 --> 00:31:23,760
niche it's super gross don't rely on it

867
00:31:23,760 --> 00:31:26,140
but by default full directions are

868
00:31:26,140 --> 00:31:30,430
disabled on Max's books if you actually

869
00:31:30,430 --> 00:31:31,420
wanna do this from the offensive

870
00:31:31,420 --> 00:31:33,370
perspective you have a couple things you

871
00:31:33,370 --> 00:31:34,540
have to do if it's leaked this

872
00:31:34,540 --> 00:31:36,100
JavaScript for automation

873
00:31:36,100 --> 00:31:38,590
you have to compile it so you can use

874
00:31:38,590 --> 00:31:40,060
osa compile or they're actually

875
00:31:40,060 --> 00:31:41,980
Objective C API calls that you can do

876
00:31:41,980 --> 00:31:44,370
that will compile this in memory for you

877
00:31:44,370 --> 00:31:46,540
and so that's what happening here down

878
00:31:46,540 --> 00:31:48,610
at the bottom is essentially you can

879
00:31:48,610 --> 00:31:50,860
just take the script here I have it up

880
00:31:50,860 --> 00:31:54,330
here and say that this is JavaScript do

881
00:31:54,330 --> 00:31:56,470
osa script will allow you to print

882
00:31:56,470 --> 00:31:58,720
create is in memory say compile it and

883
00:31:58,720 --> 00:32:00,340
return and then you can just write it

884
00:32:00,340 --> 00:32:03,100
out to this that's kind of nice I'm one

885
00:32:03,100 --> 00:32:04,270
thing to note here as I'm talking about

886
00:32:04,270 --> 00:32:07,090
where bin bash where bin SH is really

887
00:32:07,090 --> 00:32:09,640
been bashed emulating bin SH you can see

888
00:32:09,640 --> 00:32:12,370
here it's really gross this ampersand

889
00:32:12,370 --> 00:32:15,150
greater slash dev selectional ampersand

890
00:32:15,150 --> 00:32:18,820
is actually the proper way there's a

891
00:32:18,820 --> 00:32:21,100
weird emulation to background attack so

892
00:32:21,100 --> 00:32:22,480
if you just do an ampersand it won't

893
00:32:22,480 --> 00:32:24,280
work it will just be do a normal process

894
00:32:24,280 --> 00:32:26,320
let's do this weird direction stuff to

895
00:32:26,320 --> 00:32:29,350
get it to actually happen so if you do

896
00:32:29,350 --> 00:32:31,420
actually kick this off doing it whenever

897
00:32:31,420 --> 00:32:33,790
the process run to execute your script a

898
00:32:33,790 --> 00:32:35,680
couple things happen one that folder

899
00:32:35,680 --> 00:32:37,240
actions this sponsor daemon go through

900
00:32:37,240 --> 00:32:39,190
actually execute it for you but when

901
00:32:39,190 --> 00:32:41,560
it's running up a little top in the icon

902
00:32:41,560 --> 00:32:44,650
bar with this little cog that spins the

903
00:32:44,650 --> 00:32:47,620
shows that you have something run so if

904
00:32:47,620 --> 00:32:48,790
you're trying to use as an adversary

905
00:32:48,790 --> 00:32:50,650
it's kind of gross do you have that sort

906
00:32:50,650 --> 00:32:53,770
of thing spinning up there but it's only

907
00:32:53,770 --> 00:32:55,900
spinning while the initial process is

908
00:32:55,900 --> 00:32:58,270
running so if your whole thing is maybe

909
00:32:58,270 --> 00:33:00,340
a download cradle with an execute

910
00:33:00,340 --> 00:33:02,020
something else in the background we look

911
00:33:02,020 --> 00:33:03,790
called only spins for that half a second

912
00:33:03,790 --> 00:33:05,830
but the initial script executes do you

913
00:33:05,830 --> 00:33:07,240
kind of get around the whole point of it

914
00:33:07,240 --> 00:33:09,940
showing there's something driving and so

915
00:33:09,940 --> 00:33:11,980
like I said before all of this teacher

916
00:33:11,980 --> 00:33:14,929
comes from the system events application

917
00:33:14,929 --> 00:33:16,609
see down here at the bottom it's as

918
00:33:16,609 --> 00:33:17,929
simple as getting a handle the system

919
00:33:17,929 --> 00:33:21,019
events saying hey I have a new script it

920
00:33:21,019 --> 00:33:23,629
is located on the desktop I want to type

921
00:33:23,629 --> 00:33:25,369
it to a new folder give a pack to the

922
00:33:25,369 --> 00:33:27,799
folder then just push it to the list of

923
00:33:27,799 --> 00:33:30,619
Strix what a folder super easy and you

924
00:33:30,619 --> 00:33:32,989
can easily just set globally that folder

925
00:33:32,989 --> 00:33:35,269
actions are a thing by just doing that

926
00:33:35,269 --> 00:33:38,229
folder actions enable it equals true so

927
00:33:38,229 --> 00:33:40,219
pretty straightforward coming offensive

928
00:33:40,219 --> 00:33:42,049
perspective and gives you a nice level

929
00:33:42,049 --> 00:33:44,179
of persistence that's way different from

930
00:33:44,179 --> 00:33:45,830
what people normally checking for the

931
00:33:45,830 --> 00:33:48,440
next thing I'll talk about is doing an

932
00:33:48,440 --> 00:33:51,440
injection so typically whenever we think

933
00:33:51,440 --> 00:33:53,479
about injection we think in the windows

934
00:33:53,479 --> 00:33:55,519
world where you have two processes

935
00:33:55,519 --> 00:33:57,619
you're opening getting a handle to the

936
00:33:57,619 --> 00:33:59,710
next process allocating memory in it

937
00:33:59,710 --> 00:34:02,239
putting your code in there starting a

938
00:34:02,239 --> 00:34:03,559
thread all that sort of stuff right

939
00:34:03,559 --> 00:34:04,879
that's a normal process to go through

940
00:34:04,879 --> 00:34:07,309
and do this sort of injection what do

941
00:34:07,309 --> 00:34:09,079
you think about it the whole goal of

942
00:34:09,079 --> 00:34:11,960
injection is just get that other process

943
00:34:11,960 --> 00:34:14,000
to run pipeline it just so happens that

944
00:34:14,000 --> 00:34:16,129
on Windows easiest way is to go through

945
00:34:16,129 --> 00:34:18,589
and go through that laborious process of

946
00:34:18,589 --> 00:34:19,849
actually shoving your code in there and

947
00:34:19,849 --> 00:34:22,668
running we the planet for the next

948
00:34:22,668 --> 00:34:25,339
eruption so remember like I said before

949
00:34:25,339 --> 00:34:27,440
a lot of applications have these

950
00:34:27,440 --> 00:34:29,839
scripting definition files that stick

951
00:34:29,839 --> 00:34:31,839
slowly these API for you to do that

952
00:34:31,839 --> 00:34:34,489
the most common one that adversaries use

953
00:34:34,489 --> 00:34:37,099
is this new script in terminal that app

954
00:34:37,099 --> 00:34:40,010
which actually the script for you but

955
00:34:40,010 --> 00:34:41,690
there's a bunch of other things that go

956
00:34:41,690 --> 00:34:42,168
into that

957
00:34:42,168 --> 00:34:45,409
so you can see here not only can you say

958
00:34:45,409 --> 00:34:49,159
say do this script if terminal that app

959
00:34:49,159 --> 00:34:52,399
is open you can say hey in this terminal

960
00:34:52,399 --> 00:34:55,520
in this tab running my script you can

961
00:34:55,520 --> 00:34:58,160
also say hey in this terminal in this

962
00:34:58,160 --> 00:35:00,200
tab show me everything that the user

963
00:35:00,200 --> 00:35:03,349
sees and show me the whole history for

964
00:35:03,349 --> 00:35:05,089
that time so you kind of get all the

965
00:35:05,089 --> 00:35:07,010
sort of information programmatically but

966
00:35:07,010 --> 00:35:09,500
the goal here that you're able say this

967
00:35:09,500 --> 00:35:13,160
cloud run this specific thing point and

968
00:35:13,160 --> 00:35:15,140
that's as simple as saying getting a

969
00:35:15,140 --> 00:35:17,329
handle to the terminal and saying do

970
00:35:17,329 --> 00:35:20,720
script ID in this first window in this

971
00:35:20,720 --> 00:35:23,240
first act the downside here is that the

972
00:35:23,240 --> 00:35:24,710
user sees what you see because you're

973
00:35:24,710 --> 00:35:26,270
just sending these commands into that

974
00:35:26,270 --> 00:35:29,060
terminal so if you

975
00:35:29,060 --> 00:35:31,850
maybe send this plane in here in episode

976
00:35:31,850 --> 00:35:33,710
you don't the defender or the user to

977
00:35:33,710 --> 00:35:35,450
see it you can still then issue more

978
00:35:35,450 --> 00:35:40,070
commands like clear or exit or what yeah

979
00:35:40,070 --> 00:35:42,560
so the thing there that's also super

980
00:35:42,560 --> 00:35:45,110
nice is if somebody is in that terminal

981
00:35:45,110 --> 00:35:48,170
and maybe actually into another computer

982
00:35:48,170 --> 00:35:50,810
now you can put commands into that

983
00:35:50,810 --> 00:35:52,250
terminal I think it actually I'm sorry

984
00:35:52,250 --> 00:35:54,440
my computer you kind of able to enable

985
00:35:54,440 --> 00:35:57,020
injection and little movement just by

986
00:35:57,020 --> 00:35:59,300
putting this one of these codes in

987
00:35:59,300 --> 00:36:02,060
different places now this isn't just a

988
00:36:02,060 --> 00:36:05,330
terminal think like a couple people talk

989
00:36:05,330 --> 00:36:06,950
about this a little bit earlier where

990
00:36:06,950 --> 00:36:09,980
Safari and chrome data both also have

991
00:36:09,980 --> 00:36:12,170
this do JavaScript functionality where

992
00:36:12,170 --> 00:36:14,390
you can say hey this tab when

993
00:36:14,390 --> 00:36:15,970
established before me

994
00:36:15,970 --> 00:36:18,470
the interesting thing here though is

995
00:36:18,470 --> 00:36:22,910
that as a earlier this year like January

996
00:36:22,910 --> 00:36:25,370
February ish we were actual issues

997
00:36:25,370 --> 00:36:28,040
opened up in chrome but about this

998
00:36:28,040 --> 00:36:29,960
specific thing saying hey this is a bone

999
00:36:29,960 --> 00:36:31,760
of it this is a vulnerability people

1000
00:36:31,760 --> 00:36:34,040
people can just run arbitrary JavaScript

1001
00:36:34,040 --> 00:36:36,380
in any of the tabs and the resolution

1002
00:36:36,380 --> 00:36:39,860
was yeah but Safari allows it and that's

1003
00:36:39,860 --> 00:36:42,580
a feature so we can't not do it

1004
00:36:42,580 --> 00:36:45,110
so for whatever reason they allowed it

1005
00:36:45,110 --> 00:36:46,250
for a lot longer than they knew they

1006
00:36:46,250 --> 00:36:48,890
could have until finally supporting

1007
00:36:48,890 --> 00:36:50,150
through inhabiting that little feature

1008
00:36:50,150 --> 00:36:51,890
we have to check you know allow

1009
00:36:51,890 --> 00:36:54,560
JavaScript from Apple events and then

1010
00:36:54,560 --> 00:36:56,120
throw them and others followed suit say

1011
00:36:56,120 --> 00:36:58,820
ok it's not a feature anymore now I can

1012
00:36:58,820 --> 00:37:01,820
block it as well super stupid but wait

1013
00:37:01,820 --> 00:37:04,640
what you gonna do additionally like I

1014
00:37:04,640 --> 00:37:06,650
said this isn't just terminal that it's

1015
00:37:06,650 --> 00:37:08,570
not suggest one program or another there

1016
00:37:08,570 --> 00:37:09,410
are a whole bunch of things out there

1017
00:37:09,410 --> 00:37:11,540
like I turned to that a lot of people

1018
00:37:11,540 --> 00:37:13,520
using that terminal about app allows you

1019
00:37:13,520 --> 00:37:16,430
to do the same thing so I definitely

1020
00:37:16,430 --> 00:37:18,650
recommend it as you go through look at

1021
00:37:18,650 --> 00:37:20,210
what software you put my new system and

1022
00:37:20,210 --> 00:37:22,010
what scriptable interfaces are there

1023
00:37:22,010 --> 00:37:24,440
they chose way too many different

1024
00:37:24,440 --> 00:37:28,610
features than they share and so the

1025
00:37:28,610 --> 00:37:30,380
defensive thing about this is noting

1026
00:37:30,380 --> 00:37:32,330
that this allowed JavaScript from Apple

1027
00:37:32,330 --> 00:37:36,020
events is disabled by people but it just

1028
00:37:36,020 --> 00:37:38,150
it's a preference that a user sets

1029
00:37:38,150 --> 00:37:42,020
so if you go through for example on

1030
00:37:42,020 --> 00:37:42,810
Chrome

1031
00:37:42,810 --> 00:37:45,320
chrome is currently closed in

1032
00:37:45,320 --> 00:37:47,760
application support Google Chrome

1033
00:37:47,760 --> 00:37:50,310
default preferences you can write in

1034
00:37:50,310 --> 00:37:52,560
allow jealous JavaScript Apple events

1035
00:37:52,560 --> 00:37:55,370
drew when the next time chrome starts

1036
00:37:55,370 --> 00:37:58,110
muscling it's true now now you can do

1037
00:37:58,110 --> 00:38:02,160
your indexing so super easy by class but

1038
00:38:02,160 --> 00:38:03,960
it is stable by default that might be

1039
00:38:03,960 --> 00:38:05,960
something that you can check for the

1040
00:38:05,960 --> 00:38:08,370
next thing I talk about is getting

1041
00:38:08,370 --> 00:38:10,140
credential access now this is kind of a

1042
00:38:10,140 --> 00:38:11,400
big one out to go through make your

1043
00:38:11,400 --> 00:38:14,220
operations typically people go through

1044
00:38:14,220 --> 00:38:15,990
and use their security binary to try and

1045
00:38:15,990 --> 00:38:18,720
um keychain those use dfdl or defaults

1046
00:38:18,720 --> 00:38:20,610
read to try and read the shadow half via

1047
00:38:20,610 --> 00:38:23,130
if you guys aren't familiar with this on

1048
00:38:23,130 --> 00:38:25,500
mac OS instead of having like a good Sam

1049
00:38:25,500 --> 00:38:27,240
and squeegee files inside like they have

1050
00:38:27,240 --> 00:38:29,190
one windows we go through how to end

1051
00:38:29,190 --> 00:38:31,020
users P list file they'll have this

1052
00:38:31,020 --> 00:38:33,660
shadow action D s which is a couple

1053
00:38:33,660 --> 00:38:35,430
different versions of the users password

1054
00:38:35,430 --> 00:38:40,070
hash the most common one here is pbkdf2

1055
00:38:40,070 --> 00:38:44,400
with its AF 256 I'm going through all

1056
00:38:44,400 --> 00:38:46,830
these my hashes additionally people go

1057
00:38:46,830 --> 00:38:48,480
through and try an exponent key chain or

1058
00:38:48,480 --> 00:38:50,400
via SSH key all sort of stuff that

1059
00:38:50,400 --> 00:38:53,610
people see or whatever again one nice

1060
00:38:53,610 --> 00:38:56,730
things about portrait though the kind of

1061
00:38:56,730 --> 00:38:58,140
domain your clients in school that I

1062
00:38:58,140 --> 00:39:00,870
wrote is going through if you have a

1063
00:39:00,870 --> 00:39:03,420
domain user logged into your system or

1064
00:39:03,420 --> 00:39:06,330
you have a local user logged in if you

1065
00:39:06,330 --> 00:39:09,390
execute as root and do just a query of

1066
00:39:09,390 --> 00:39:11,790
read information about this user you can

1067
00:39:11,790 --> 00:39:13,950
get this shadow acts data which means if

1068
00:39:13,950 --> 00:39:15,450
the domain user is logged in now you

1069
00:39:15,450 --> 00:39:16,800
have that half of that domain users

1070
00:39:16,800 --> 00:39:18,930
password because that data is cached

1071
00:39:18,930 --> 00:39:20,850
locally that kind of makes sense of the

1072
00:39:20,850 --> 00:39:22,770
data is cached though because if the

1073
00:39:22,770 --> 00:39:24,630
user is domain joint and they close the

1074
00:39:24,630 --> 00:39:26,730
computer restart come back on it can't

1075
00:39:26,730 --> 00:39:27,600
connect to the domain

1076
00:39:27,600 --> 00:39:29,130
it's not time to give to authenticate

1077
00:39:29,130 --> 00:39:30,840
can someone write because the data has

1078
00:39:30,840 --> 00:39:33,240
to be cast someone what you can just

1079
00:39:33,240 --> 00:39:35,190
clear it and dump it right here and as

1080
00:39:35,190 --> 00:39:37,710
you can see yeah there's a sultan 512

1081
00:39:37,710 --> 00:39:40,680
pbkdf2 and there is essentially the hash

1082
00:39:40,680 --> 00:39:42,060
and it rates them to be able to just

1083
00:39:42,060 --> 00:39:45,030
plug it into John Ripper or Hofstadter

1084
00:39:45,030 --> 00:39:46,950
any quick your favorite and I'm fast I

1085
00:39:46,950 --> 00:39:49,470
can cool and go to even dump it I'm

1086
00:39:49,470 --> 00:39:51,540
pretty easy there and with using orchard

1087
00:39:51,540 --> 00:39:53,760
using open directory API you'll have to

1088
00:39:53,760 --> 00:39:57,589
spawn any processes the pool is

1089
00:39:57,589 --> 00:39:59,369
additionally like I was saying the

1090
00:39:59,369 --> 00:40:02,220
information for a cement user is packed

1091
00:40:02,220 --> 00:40:05,670
in local depots and you can see a whole

1092
00:40:05,670 --> 00:40:06,329
bunch of this different information

1093
00:40:06,329 --> 00:40:09,059
which actually catch some they're part

1094
00:40:09,059 --> 00:40:10,349
of that being in the shadow class data

1095
00:40:10,349 --> 00:40:12,119
part of it being you know what groups we

1096
00:40:12,119 --> 00:40:14,579
belong into how things are indicated

1097
00:40:14,579 --> 00:40:16,680
this up indicating Authority you can see

1098
00:40:16,680 --> 00:40:18,900
here first thing it does when it checks

1099
00:40:18,900 --> 00:40:21,390
is the local prosecutor that's there if

1100
00:40:21,390 --> 00:40:23,130
that's not able to be found or something

1101
00:40:23,130 --> 00:40:24,390
that's wrong with it it'll call back

1102
00:40:24,390 --> 00:40:26,130
into Kerberos and then fall back into it

1103
00:40:26,130 --> 00:40:28,339
just creating a shadow Patrick possible

1104
00:40:28,339 --> 00:40:30,230
so you can see there's different

1105
00:40:30,230 --> 00:40:32,039
authentication authorities of the

1106
00:40:32,039 --> 00:40:33,329
process that they go through to trying

1107
00:40:33,329 --> 00:40:35,940
to give yourself an occasion now one

1108
00:40:35,940 --> 00:40:37,049
thing I like to remind people though

1109
00:40:37,049 --> 00:40:38,700
it's it especially as you start doing

1110
00:40:38,700 --> 00:40:40,260
operations and they look at defensive

1111
00:40:40,260 --> 00:40:42,599
passwords are more than just patches

1112
00:40:42,599 --> 00:40:44,430
right people are authentic killing doing

1113
00:40:44,430 --> 00:40:46,559
around a network and doing your job with

1114
00:40:46,559 --> 00:40:48,710
more than just a password hash

1115
00:40:48,710 --> 00:40:50,280
especially as we go through makestar

1116
00:40:50,280 --> 00:40:52,410
talking about Kerberos Kerberos by

1117
00:40:52,410 --> 00:40:55,260
default is on Mac OS now granted it's

1118
00:40:55,260 --> 00:40:57,750
some weird kind all version of Kerberos

1119
00:40:57,750 --> 00:41:00,450
but it is still there and which orchard

1120
00:41:00,450 --> 00:41:02,730
for a local user you can pull off the

1121
00:41:02,730 --> 00:41:05,450
Kerberos key and like Heimdall srp key

1122
00:41:05,450 --> 00:41:10,500
and if you're looking at a computer

1123
00:41:10,500 --> 00:41:13,170
joined to a Windows domain as you start

1124
00:41:13,170 --> 00:41:14,910
doing Kerberos there's a whole bunch of

1125
00:41:14,910 --> 00:41:18,270
information stored in this Etsy pair v5

1126
00:41:18,270 --> 00:41:21,059
key tag cloud 35 is being Kerberos

1127
00:41:21,059 --> 00:41:24,240
version 5 by default this file only has

1128
00:41:24,240 --> 00:41:26,400
reading rights to root but if your

1129
00:41:26,400 --> 00:41:28,079
partner's paying these other groups you

1130
00:41:28,079 --> 00:41:28,859
can actually read it

1131
00:41:28,859 --> 00:41:31,109
so it requires calendar Java postfix

1132
00:41:31,109 --> 00:41:32,880
team server key tabs and like all the

1133
00:41:32,880 --> 00:41:33,960
sort of stuff going to read this file

1134
00:41:33,960 --> 00:41:36,000
all you need to do is read it because

1135
00:41:36,000 --> 00:41:37,529
then then you can get access to these

1136
00:41:37,529 --> 00:41:42,150
keys so if this is a you know binary

1137
00:41:42,150 --> 00:41:43,559
formatted thing so you need to write a

1138
00:41:43,559 --> 00:41:43,920
parser

1139
00:41:43,920 --> 00:41:45,900
I mean using this as well it's called

1140
00:41:45,900 --> 00:41:48,329
the key to a parser guru and you can

1141
00:41:48,329 --> 00:41:50,069
pull out all these different keys that

1142
00:41:50,069 --> 00:41:52,559
are there all of the conversions for one

1143
00:41:52,559 --> 00:41:53,430
of the things if people are familiar

1144
00:41:53,430 --> 00:41:54,839
with it that I like to compare this to

1145
00:41:54,839 --> 00:41:56,609
is especially since we're talking about

1146
00:41:56,609 --> 00:41:59,010
Kerberos these are the keys for the SPM

1147
00:41:59,010 --> 00:42:00,869
so the service principle names you can

1148
00:42:00,869 --> 00:42:03,000
think about this as the keys required to

1149
00:42:03,000 --> 00:42:05,520
do silver tickets so you can usually use

1150
00:42:05,520 --> 00:42:07,140
to be able to get access to the service

1151
00:42:07,140 --> 00:42:10,020
on this computer so for example

1152
00:42:10,020 --> 00:42:11,790
you have the host key you can going to

1153
00:42:11,790 --> 00:42:13,020
use that to get access to the file

1154
00:42:13,020 --> 00:42:14,550
system on that computer all right all

1155
00:42:14,550 --> 00:42:16,380
the sort of stuff comes into play but

1156
00:42:16,380 --> 00:42:18,119
it's more than just the usual password

1157
00:42:18,119 --> 00:42:19,310
that's right

1158
00:42:19,310 --> 00:42:22,110
additionally that's just that hash of

1159
00:42:22,110 --> 00:42:24,600
the password to get that in Silvertip

1160
00:42:24,600 --> 00:42:27,090
there's more information class that your

1161
00:42:27,090 --> 00:42:30,030
thing else are talking about TDG the

1162
00:42:30,030 --> 00:42:33,480
ticket granting it by default on linux

1163
00:42:33,480 --> 00:42:35,640
this information is stored in temporary

1164
00:42:35,640 --> 00:42:39,480
v CC files which you can just read on

1165
00:42:39,480 --> 00:42:41,550
mac though you can use the key lists

1166
00:42:41,550 --> 00:42:44,369
function finally it might be bought on

1167
00:42:44,369 --> 00:42:46,290
systems and you can see where these

1168
00:42:46,290 --> 00:42:48,330
credentials have sworn what we call the

1169
00:42:48,330 --> 00:42:50,700
mac these head little turn right here at

1170
00:42:50,700 --> 00:42:53,190
API instead of file until you have to do

1171
00:42:53,190 --> 00:42:54,900
API calls full of sort of information

1172
00:42:54,900 --> 00:42:57,570
back sounds hard but it's actually

1173
00:42:57,570 --> 00:43:00,150
doable now the annoying part for us

1174
00:43:00,150 --> 00:43:01,080
though if we're using javascript

1175
00:43:01,080 --> 00:43:03,510
automation is because javascript is this

1176
00:43:03,510 --> 00:43:04,190
weird

1177
00:43:04,190 --> 00:43:06,270
and what incidents are trying to figure

1178
00:43:06,270 --> 00:43:07,650
out whether it's scriptable if it's

1179
00:43:07,650 --> 00:43:09,570
objective-c there what not Huggies

1180
00:43:09,570 --> 00:43:11,400
closed trying to be it's really bad at

1181
00:43:11,400 --> 00:43:14,730
unpacking new structures and so you can

1182
00:43:14,730 --> 00:43:16,050
go through you can pull out this file

1183
00:43:16,050 --> 00:43:18,030
you can pull the data back but you can't

1184
00:43:18,030 --> 00:43:20,359
then Forks into it to pull up specific

1185
00:43:20,359 --> 00:43:24,420
like fields within starts but Heimdall

1186
00:43:24,420 --> 00:43:26,609
has a limit of API that you can use to

1187
00:43:26,609 --> 00:43:28,350
pull it out programmatically and so you

1188
00:43:28,350 --> 00:43:30,660
can just compile a C program that goes

1189
00:43:30,660 --> 00:43:32,880
through for each TBT that wants to come

1190
00:43:32,880 --> 00:43:35,570
and pull out to the actual P itself

1191
00:43:35,570 --> 00:43:39,180
pretty easy and useful so now the last

1192
00:43:39,180 --> 00:43:40,410
thing I'm talk about something and I'm

1193
00:43:40,410 --> 00:43:41,910
pretty cool sometime there's doing at

1194
00:43:41,910 --> 00:43:43,560
the defensive measures the Apple that I

1195
00:43:43,560 --> 00:43:45,210
put in the plate to Rebecca in this

1196
00:43:45,210 --> 00:43:46,859
this is already talked about a couple

1197
00:43:46,859 --> 00:43:50,430
times today with Mojave goes through for

1198
00:43:50,430 --> 00:43:52,440
every tuple that you're trying to access

1199
00:43:52,440 --> 00:43:54,900
so for every initiator and receiver

1200
00:43:54,900 --> 00:43:57,630
program there has to be a new prompt for

1201
00:43:57,630 --> 00:43:58,880
whether you can send it denies the

1202
00:43:58,880 --> 00:44:01,140
annoying thing here though is that

1203
00:44:01,140 --> 00:44:03,630
you'll only ever get the pump once so if

1204
00:44:03,630 --> 00:44:05,700
you go through and say terminal tries to

1205
00:44:05,700 --> 00:44:08,369
access system events and the first time

1206
00:44:08,369 --> 00:44:10,770
the user sees it they clicked deny every

1207
00:44:10,770 --> 00:44:12,270
other time after that that you try and

1208
00:44:12,270 --> 00:44:14,190
initiate that connection we will never

1209
00:44:14,190 --> 00:44:15,869
get a pop-up you'll get an automatic

1210
00:44:15,869 --> 00:44:17,480
denied the annoying thing about

1211
00:44:17,480 --> 00:44:19,560
javascript is that this in fact that is

1212
00:44:19,560 --> 00:44:21,840
ever Eric so you don't get a lot of

1213
00:44:21,840 --> 00:44:22,460
information

1214
00:44:22,460 --> 00:44:25,580
but if you want to reset that you can do

1215
00:44:25,580 --> 00:44:26,570
what they mentioned earlier going

1216
00:44:26,570 --> 00:44:29,599
clearly put TCC util and just reset but

1217
00:44:29,599 --> 00:44:31,460
you only ever get one pop-up for every

1218
00:44:31,460 --> 00:44:34,250
tuple that happens kind of annoying and

1219
00:44:34,250 --> 00:44:37,250
this is just an example below of what

1220
00:44:37,250 --> 00:44:38,330
shows up when you try and do that

1221
00:44:38,330 --> 00:44:39,820
request

1222
00:44:39,820 --> 00:44:42,890
additionally like I said here you can

1223
00:44:42,890 --> 00:44:45,050
use the TCC util to go through and reset

1224
00:44:45,050 --> 00:44:47,089
this additionally you can see here it's

1225
00:44:47,089 --> 00:44:48,950
for every specific tuple so if we try

1226
00:44:48,950 --> 00:44:50,599
and access system events and Chrome

1227
00:44:50,599 --> 00:44:52,790
separately we get a pop up for each one

1228
00:44:52,790 --> 00:44:54,619
and they can just be toggled of whether

1229
00:44:54,619 --> 00:44:57,550
or not you want to approve or deny that

1230
00:44:57,550 --> 00:44:59,839
whether you want to toggle them this is

1231
00:44:59,839 --> 00:45:02,480
kind of similar to the we have also

1232
00:45:02,480 --> 00:45:04,820
access learning peelers and this is

1233
00:45:04,820 --> 00:45:07,070
something that health inspector will go

1234
00:45:07,070 --> 00:45:08,390
through and parse for you as well

1235
00:45:08,390 --> 00:45:10,040
this one goes through and gives you an

1236
00:45:10,040 --> 00:45:11,660
idea of which programs have ever

1237
00:45:11,660 --> 00:45:14,089
prompted for access into the universal

1238
00:45:14,089 --> 00:45:15,650
access it doesn't tell you whether or

1239
00:45:15,650 --> 00:45:17,390
not they were approved or denied for

1240
00:45:17,390 --> 00:45:18,260
these things you're running list of

1241
00:45:18,260 --> 00:45:20,470
everything that ever prompted for access

1242
00:45:20,470 --> 00:45:22,820
and so one of the things I'll kind of

1243
00:45:22,820 --> 00:45:24,230
leave you guys with as you start talking

1244
00:45:24,230 --> 00:45:25,760
about defensive aspect some weirdo

1245
00:45:25,760 --> 00:45:27,500
indicators and what are all the

1246
00:45:27,500 --> 00:45:28,820
different ways that attitudes can do

1247
00:45:28,820 --> 00:45:30,859
things on a system we start looking at

1248
00:45:30,859 --> 00:45:32,599
the minimum viable access to achieve a

1249
00:45:32,599 --> 00:45:35,210
goal what's the the least amount of

1250
00:45:35,210 --> 00:45:36,680
information that adversary has to know

1251
00:45:36,680 --> 00:45:39,140
or the few fewest things an adversary

1252
00:45:39,140 --> 00:45:41,240
has to be able access to achieve some

1253
00:45:41,240 --> 00:45:42,260
packet or they're trying to get

1254
00:45:42,260 --> 00:45:43,940
credential so they're trying to get you

1255
00:45:43,940 --> 00:45:45,170
know domain information are they trying

1256
00:45:45,170 --> 00:45:46,550
a lot really knew about all the sort of

1257
00:45:46,550 --> 00:45:48,770
information that helps as you start

1258
00:45:48,770 --> 00:45:50,450
trying to crack these you know behavior

1259
00:45:50,450 --> 00:45:52,040
based analytics and get down to the root

1260
00:45:52,040 --> 00:45:54,050
cause of why adversaries and people are

1261
00:45:54,050 --> 00:45:56,270
able to do this you figure out what

1262
00:45:56,270 --> 00:45:58,490
minimum access needed you'll have a lot

1263
00:45:58,490 --> 00:46:00,560
better time of you know being able to

1264
00:46:00,560 --> 00:46:01,580
catch all these things you never thought

1265
00:46:01,580 --> 00:46:03,380
of before without having a very specific

1266
00:46:03,380 --> 00:46:05,589
protection for each one individually

1267
00:46:05,589 --> 00:46:07,849
again it comes down to also identifying

1268
00:46:07,849 --> 00:46:10,070
where you're that kind of crown jewels

1269
00:46:10,070 --> 00:46:11,690
or the things that you find have the

1270
00:46:11,690 --> 00:46:13,430
most sensitive information where that

1271
00:46:13,430 --> 00:46:15,050
actually lives or you just worry about

1272
00:46:15,050 --> 00:46:17,570
SSH keys plaintext passwords if you're

1273
00:46:17,570 --> 00:46:19,010
worried about all authentication make

1274
00:46:19,010 --> 00:46:20,510
sure you take into account all

1275
00:46:20,510 --> 00:46:21,440
authentication

1276
00:46:21,440 --> 00:46:23,810
Kerberos keys environment variables API

1277
00:46:23,810 --> 00:46:25,700
keys like all this sort of stuff that's

1278
00:46:25,700 --> 00:46:28,580
come into play and so as we go through

1279
00:46:28,580 --> 00:46:31,310
people tend to immediately jump towards

1280
00:46:31,310 --> 00:46:33,470
occupations like ah I'm a day around

1281
00:46:33,470 --> 00:46:35,850
this detection because occupation exists

1282
00:46:35,850 --> 00:46:37,980
I think that works in the defenders the

1283
00:46:37,980 --> 00:46:39,900
Vantage though because this sort of

1284
00:46:39,900 --> 00:46:42,270
sucks down here work at Etsy passwords

1285
00:46:42,270 --> 00:46:45,000
that should never ever fly past you as a

1286
00:46:45,000 --> 00:46:47,210
defender that looks super weird

1287
00:46:47,210 --> 00:46:49,830
occupation itself for opposition state

1288
00:46:49,830 --> 00:46:53,070
is enough itself like the flag it should

1289
00:46:53,070 --> 00:46:54,960
be an alert for you this sort of stuff a

1290
00:46:54,960 --> 00:46:57,690
user is never going to do your sis

1291
00:46:57,690 --> 00:46:59,430
admins are never going to do this we

1292
00:46:59,430 --> 00:47:00,690
start seeing all this sort of crazy

1293
00:47:00,690 --> 00:47:03,090
stuff it should be easy flat for you so

1294
00:47:03,090 --> 00:47:04,350
the fact that the fingers are able to

1295
00:47:04,350 --> 00:47:06,450
prepare that found all kinds of malware

1296
00:47:06,450 --> 00:47:08,070
author David will go through and do this

1297
00:47:08,070 --> 00:47:10,020
easy obvious weaken and get past these

1298
00:47:10,020 --> 00:47:13,020
griddled indicators Shane you should be

1299
00:47:13,020 --> 00:47:14,460
able to get constant you should be able

1300
00:47:14,460 --> 00:47:17,280
to block this a lot easier so just kinda

1301
00:47:17,280 --> 00:47:19,680
remember that as you go through well one

1302
00:47:19,680 --> 00:47:21,120
thing I do that's kind of up with this

1303
00:47:21,120 --> 00:47:22,830
I'm from both the offensive and

1304
00:47:22,830 --> 00:47:25,410
defensive side is in at all I think

1305
00:47:25,410 --> 00:47:27,120
assume you start trying to do my

1306
00:47:27,120 --> 00:47:29,160
operations and you execute commands I

1307
00:47:29,160 --> 00:47:32,040
track well before you even execute the

1308
00:47:32,040 --> 00:47:34,920
command what kind of effects you'll have

1309
00:47:34,920 --> 00:47:36,780
on the system so for example like I was

1310
00:47:36,780 --> 00:47:38,700
talking about before doing that elevated

1311
00:47:38,700 --> 00:47:40,260
Commission's about them to spawn pseudo

1312
00:47:40,260 --> 00:47:42,960
I tell you right up front here are the

1313
00:47:42,960 --> 00:47:44,370
five things that are going to be spawned

1314
00:47:44,370 --> 00:47:45,900
automatically whenever you execute this

1315
00:47:45,900 --> 00:47:47,880
command this helps you can the offensive

1316
00:47:47,880 --> 00:47:48,870
perspective knowing what's actually

1317
00:47:48,870 --> 00:47:50,400
going to happen what's helped you from a

1318
00:47:50,400 --> 00:47:52,110
defensive perspective as well there's

1319
00:47:52,110 --> 00:47:53,160
not a continue different kind of

1320
00:47:53,160 --> 00:47:55,500
variation can see ah these are the sorts

1321
00:47:55,500 --> 00:47:57,240
of things that might look weird let's

1322
00:47:57,240 --> 00:47:59,430
start digging into why and so you can

1323
00:47:59,430 --> 00:48:01,740
see here replaces the information that

1324
00:48:01,740 --> 00:48:04,470
you actually executing and so that's

1325
00:48:04,470 --> 00:48:06,630
kind of the last way my talk my

1326
00:48:06,630 --> 00:48:09,450
character and all the tools that I

1327
00:48:09,450 --> 00:48:10,680
mentioned I felt or through tough

1328
00:48:10,680 --> 00:48:12,180
inspector you get parts they're all the

1329
00:48:12,180 --> 00:48:13,860
sort of stuff it's already up on github

1330
00:48:13,860 --> 00:48:15,840
available or you guys can book that mess

1331
00:48:15,840 --> 00:48:18,960
with it I also have in there like how to

1332
00:48:18,960 --> 00:48:20,850
actually run it how you can execute it

1333
00:48:20,850 --> 00:48:22,710
with in-app bail making goes excavate

1334
00:48:22,710 --> 00:48:27,830
normally all outsource off thank you

