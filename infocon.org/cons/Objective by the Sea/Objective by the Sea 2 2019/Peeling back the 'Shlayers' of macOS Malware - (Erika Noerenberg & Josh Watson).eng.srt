1
00:00:03,649 --> 00:00:09,920
yeah so just jump into who we are since

2
00:00:09,920 --> 00:00:13,219
were little time so my name is Erica

3
00:00:13,219 --> 00:00:15,860
Lumbergh I'm a threat researcher carding

4
00:00:15,860 --> 00:00:19,400
back I mostly do malware analysis and

5
00:00:19,400 --> 00:00:22,460
reverse engineering and we could find it

6
00:00:22,460 --> 00:00:26,329
on Twitter Darrell yeah Josh I'm a

7
00:00:26,329 --> 00:00:28,970
senior student here at triplets and you

8
00:00:28,970 --> 00:00:32,780
can find me at Joshua's gore lawton yeah

9
00:00:32,780 --> 00:00:47,120
so we got so many talks yeah so just a

10
00:00:47,120 --> 00:00:49,550
quick we're going to talk about kind of

11
00:00:49,550 --> 00:00:52,490
the Schleyer soft something that was

12
00:00:52,490 --> 00:00:54,830
researching recently I'm gonna talk

13
00:00:54,830 --> 00:00:56,650
about how that started and what kind of

14
00:00:56,650 --> 00:00:58,870
started all of this whole thing and then

15
00:00:58,870 --> 00:01:01,010
just a really quick overview and

16
00:01:01,010 --> 00:01:04,040
technical analysis of Slayer just kind

17
00:01:04,040 --> 00:01:06,290
of highlighting the interesting bits I'm

18
00:01:06,290 --> 00:01:07,430
not going to go into a lot of depth

19
00:01:07,430 --> 00:01:08,990
because I want to make sure we have a

20
00:01:08,990 --> 00:01:11,509
lot of time for the demos the tools that

21
00:01:11,509 --> 00:01:14,060
Josh was really that did do talk on it a

22
00:01:14,060 --> 00:01:16,280
couple weeks ago at an old con that

23
00:01:16,280 --> 00:01:17,960
gives a little bit more depth then I put

24
00:01:17,960 --> 00:01:20,600
that on I just tweeted it so if anything

25
00:01:20,600 --> 00:01:22,819
actually wants if I get your a too fast

26
00:01:22,819 --> 00:01:25,369
again you can do that and then actually

27
00:01:25,369 --> 00:01:27,859
talk about some reversing objective-c in

28
00:01:27,859 --> 00:01:29,810
general and then the binary ninja and

29
00:01:29,810 --> 00:01:31,909
the tools and you some demos and then

30
00:01:31,909 --> 00:01:36,380
hopefully for question answer but

31
00:01:36,380 --> 00:01:39,380
anything how it all started so I was

32
00:01:39,380 --> 00:01:40,759
sitting on the couch back in November

33
00:01:40,759 --> 00:01:43,460
and I got a slack for my door Virginie

34
00:01:43,460 --> 00:01:46,009
and he's like hey I'm he's a homer he's

35
00:01:46,009 --> 00:01:48,020
like I was looking for this out recipe

36
00:01:48,020 --> 00:01:48,709
and

37
00:01:48,709 --> 00:01:50,479
this thing popped up and it's asking you

38
00:01:50,479 --> 00:01:52,459
to install flash so I thought that was

39
00:01:52,459 --> 00:01:54,409
probably kinda hot so I was like oh

40
00:01:54,409 --> 00:01:56,060
great yeah I'm gonna pull this down and

41
00:01:56,060 --> 00:01:57,649
see what's going on so of course it's

42
00:01:57,649 --> 00:01:59,659
malware and the whole site was

43
00:01:59,659 --> 00:02:01,009
completely popped

44
00:02:01,009 --> 00:02:02,899
not surprisingly and we looked into it

45
00:02:02,899 --> 00:02:05,149
it was hosted by GoDaddy we were trying

46
00:02:05,149 --> 00:02:07,579
to find you know who can read the report

47
00:02:07,579 --> 00:02:10,970
you small ball well let's name the

48
00:02:10,970 --> 00:02:12,230
domain is expired

49
00:02:12,230 --> 00:02:15,049
so there's really no way to get this

50
00:02:15,049 --> 00:02:17,180
thing and notify anybody so it's been

51
00:02:17,180 --> 00:02:17,630
sitting

52
00:02:17,630 --> 00:02:21,770
it's still still infected but things

53
00:02:21,770 --> 00:02:23,540
have changed a little bit but yeah so

54
00:02:23,540 --> 00:02:25,400
this with this fear form basically got

55
00:02:25,400 --> 00:02:27,190
[Music]

56
00:02:27,190 --> 00:02:30,700
it's been serving out in flash malware

57
00:02:30,700 --> 00:02:32,900
but this is what kind of started out

58
00:02:32,900 --> 00:02:35,270
giving down unions in univille getting a

59
00:02:35,270 --> 00:02:37,820
little deeper so Linda generated we

60
00:02:37,820 --> 00:02:39,080
didn't really have a lot of time I had a

61
00:02:39,080 --> 00:02:41,240
lot of we were small team seen that

62
00:02:41,240 --> 00:02:42,950
stuff coming at you all the time keeping

63
00:02:42,950 --> 00:02:44,690
a malware analysis you know or correct

64
00:02:44,690 --> 00:02:46,790
stuff so it kind of just stopped there

65
00:02:46,790 --> 00:02:48,650
for a while and then I was doing some

66
00:02:48,650 --> 00:02:52,820
work with retail back in December and I

67
00:02:52,820 --> 00:02:54,440
started looking at it again and I was

68
00:02:54,440 --> 00:02:56,660
like oh my god I found this this post

69
00:02:56,660 --> 00:03:00,590
from Phil Stokes and I was like huh it

70
00:03:00,590 --> 00:03:02,000
was slacking about this it keep her

71
00:03:02,000 --> 00:03:03,320
bypass and I thought it was interesting

72
00:03:03,320 --> 00:03:05,990
it just came up in my feed and I was

73
00:03:05,990 --> 00:03:09,170
like oh my god um this is my this is my

74
00:03:09,170 --> 00:03:11,540
script that I found back you know a

75
00:03:11,540 --> 00:03:14,620
month ago and that looks really familiar

76
00:03:14,620 --> 00:03:17,720
when it turns out so this was the script

77
00:03:17,720 --> 00:03:19,640
that was it was in the stuff that I

78
00:03:19,640 --> 00:03:23,540
pulled down and this was a clip from his

79
00:03:23,540 --> 00:03:26,180
website I was like that is almost the

80
00:03:26,180 --> 00:03:28,580
identical script and you can see like

81
00:03:28,580 --> 00:03:30,260
the other one was marsupial sucks if

82
00:03:30,260 --> 00:03:31,910
this one was kittens that's it there was

83
00:03:31,910 --> 00:03:35,180
a porcupine zip all of these things so

84
00:03:35,180 --> 00:03:37,010
this was one version of it that I found

85
00:03:37,010 --> 00:03:38,390
but I was like oh my god this is this

86
00:03:38,390 --> 00:03:39,950
article about wind tail that I've been

87
00:03:39,950 --> 00:03:41,290
kind of looking at for a couple months

88
00:03:41,290 --> 00:03:43,610
maybe this thing is bigger than just a

89
00:03:43,610 --> 00:03:45,230
dress when we first saw it it's like a

90
00:03:45,230 --> 00:03:47,630
flash the installing you know adware and

91
00:03:47,630 --> 00:03:49,640
blah blah maybe this is actually

92
00:03:49,640 --> 00:03:52,910
something bigger but showing John rabbit

93
00:03:52,910 --> 00:03:56,360
Holy One I'm like okay yeah maybe this

94
00:03:56,360 --> 00:03:57,800
is actually something exciting

95
00:03:57,800 --> 00:04:03,980
maybe but basically yeah so when I

96
00:04:03,980 --> 00:04:06,440
started digging into it then I actually

97
00:04:06,440 --> 00:04:10,220
found out and I'm sorry so basically at

98
00:04:10,220 --> 00:04:12,380
this point double docks with this new

99
00:04:12,380 --> 00:04:12,980
flight

100
00:04:12,980 --> 00:04:14,960
like let's just pull down all the things

101
00:04:14,960 --> 00:04:17,720
get everything we can and so Greg we're

102
00:04:17,720 --> 00:04:20,810
script using selenium to basically

103
00:04:20,810 --> 00:04:24,080
automatically load the site you know

104
00:04:24,080 --> 00:04:26,750
pull down the screenshots URL any

105
00:04:26,750 --> 00:04:30,169
payloads they're there and this worked

106
00:04:30,169 --> 00:04:31,150
for a while

107
00:04:31,150 --> 00:04:33,370
but then they started changing the site

108
00:04:33,370 --> 00:04:36,490
and so we cable to remove the download

109
00:04:36,490 --> 00:04:39,460
links around they would detect IP

110
00:04:39,460 --> 00:04:41,260
regions so we started having to use

111
00:04:41,260 --> 00:04:44,080
weekend hopping put any delays and all

112
00:04:44,080 --> 00:04:47,140
these things and so it started working

113
00:04:47,140 --> 00:04:49,060
less and less but at this point we had a

114
00:04:49,060 --> 00:04:50,380
little bit more information we had a

115
00:04:50,380 --> 00:04:54,580
bunch of samples and we actually got

116
00:04:54,580 --> 00:04:56,470
like about 15 I'll talk about a little

117
00:04:56,470 --> 00:04:58,420
bit later but just right off the bat I

118
00:04:58,420 --> 00:05:00,490
have like 15 samples to go off of in the

119
00:05:00,490 --> 00:05:02,470
first couple hours just writing a script

120
00:05:02,470 --> 00:05:04,270
so we're like great we found this

121
00:05:04,270 --> 00:05:06,250
awesome new thing we gotta give it a

122
00:05:06,250 --> 00:05:08,260
name right because it's never been seen

123
00:05:08,260 --> 00:05:12,130
before right so I was talking with my

124
00:05:12,130 --> 00:05:14,620
pure Brian and Baskin suddenly Potter

125
00:05:14,620 --> 00:05:16,720
follow him on Twitter but we're having

126
00:05:16,720 --> 00:05:18,490
this heated debate about IPAs because

127
00:05:18,490 --> 00:05:20,440
people you know you either hate them or

128
00:05:20,440 --> 00:05:21,760
you love people are very passionate

129
00:05:21,760 --> 00:05:24,190
about it and since the initial site is

130
00:05:24,190 --> 00:05:26,710
double Docs it was like well let's just

131
00:05:26,710 --> 00:05:28,620
message faster than call it double IPA

132
00:05:28,620 --> 00:05:31,960
so yeah that's why that's started but as

133
00:05:31,960 --> 00:05:33,550
I started looking into it more I was

134
00:05:33,550 --> 00:05:37,510
like actually you know I found this

135
00:05:37,510 --> 00:05:39,100
article and I think this thing's called

136
00:05:39,100 --> 00:05:40,420
Slayer I think it's actually doing

137
00:05:40,420 --> 00:05:42,220
around for a while so this is nothing

138
00:05:42,220 --> 00:05:42,550
new

139
00:05:42,550 --> 00:05:45,090
we didn't symbol exciting at all and

140
00:05:45,090 --> 00:05:47,680
yeah then I found the art it didn't take

141
00:05:47,680 --> 00:05:49,480
an article from the original researchers

142
00:05:49,480 --> 00:05:53,200
back in February of last year and it

143
00:05:53,200 --> 00:05:55,900
matched that I was like yeah we've got a

144
00:05:55,900 --> 00:05:57,640
bum that we can't use the sub y pa day

145
00:05:57,640 --> 00:05:59,880
because that was kind of fun but

146
00:05:59,880 --> 00:06:04,450
apparently Slayer so well so I'm going

147
00:06:04,450 --> 00:06:07,600
to quickly just go over the overview

148
00:06:07,600 --> 00:06:09,580
yeah we should make sure we got lots to

149
00:06:09,580 --> 00:06:12,220
look at Dennis just a quick overview the

150
00:06:12,220 --> 00:06:15,550
technical stuff about this smaller like

151
00:06:15,550 --> 00:06:17,860
I said before the intake o researchers

152
00:06:17,860 --> 00:06:20,890
back in January 2018 it found these

153
00:06:20,890 --> 00:06:23,860
things and research that we stumbled on

154
00:06:23,860 --> 00:06:26,170
some more and actually as I was writing

155
00:06:26,170 --> 00:06:28,500
this talk I was going through my my

156
00:06:28,500 --> 00:06:30,670
repository of Mac malware and I found

157
00:06:30,670 --> 00:06:34,870
this giant folder full of Mac adware

158
00:06:34,870 --> 00:06:37,000
that I hadn't dug into it all and I was

159
00:06:37,000 --> 00:06:38,320
like oh this is funny and I found this

160
00:06:38,320 --> 00:06:41,530
backing gene or something last year I

161
00:06:41,530 --> 00:06:43,460
didn't look at it at all I don't want to

162
00:06:43,460 --> 00:06:46,370
like this is Slayer I have been saying

163
00:06:46,370 --> 00:06:47,960
all this for like six wants to scream

164
00:06:47,960 --> 00:06:53,060
but yeah the life of malware anyway say

165
00:06:53,060 --> 00:06:54,620
but but in November is when we actually

166
00:06:54,620 --> 00:06:56,870
started kind of looking at it off and on

167
00:06:56,870 --> 00:06:59,569
and lettings we started seeing a bunch

168
00:06:59,569 --> 00:07:02,720
of infections in 20 nights in February

169
00:07:02,720 --> 00:07:04,520
well like we need to dig deeper into

170
00:07:04,520 --> 00:07:06,470
this and because there are a bunch of

171
00:07:06,470 --> 00:07:09,380
customers are infected and it was kind

172
00:07:09,380 --> 00:07:11,180
of we were really expecting that in the

173
00:07:11,180 --> 00:07:12,919
numbers that we saw so that's when we

174
00:07:12,919 --> 00:07:14,720
started when you really need to dig into

175
00:07:14,720 --> 00:07:17,840
this and look into it but wise we did we

176
00:07:17,840 --> 00:07:19,430
discovered this privilege escalation

177
00:07:19,430 --> 00:07:21,080
technique that Patrick and I actually

178
00:07:21,080 --> 00:07:23,960
talked about at DEFCON 25 and it's a

179
00:07:23,960 --> 00:07:29,000
really great video but my coworker Jimmy

180
00:07:29,000 --> 00:07:32,419
who had found the site initially was

181
00:07:32,419 --> 00:07:34,370
actually being a lot of work with my

182
00:07:34,370 --> 00:07:36,289
turn attack but my tear attack framework

183
00:07:36,289 --> 00:07:38,449
at the time and he was like you know I

184
00:07:38,449 --> 00:07:41,509
can't find an actual technique in the

185
00:07:41,509 --> 00:07:43,550
minor three work that that describes

186
00:07:43,550 --> 00:07:46,069
this accurately and so he contacted the

187
00:07:46,069 --> 00:07:48,380
guys at mitre and you grew it up a kind

188
00:07:48,380 --> 00:07:50,539
of a description page long description

189
00:07:50,539 --> 00:07:52,789
of what this technique is and you know

190
00:07:52,789 --> 00:07:54,440
how it works and things like that it

191
00:07:54,440 --> 00:07:55,940
said it actually accepted that into the

192
00:07:55,940 --> 00:07:58,520
framework so there'll be a new threat

193
00:07:58,520 --> 00:08:01,729
tiv for it it hasn't been released yet

194
00:08:01,729 --> 00:08:03,349
but they were waiting on some things

195
00:08:03,349 --> 00:08:05,210
from us it probably this month I'm

196
00:08:05,210 --> 00:08:08,599
guessing but there it'll be included in

197
00:08:08,599 --> 00:08:11,990
that framework so back to your sample

198
00:08:11,990 --> 00:08:14,449
collection like I said my character have

199
00:08:14,449 --> 00:08:16,639
done this script to automate the

200
00:08:16,639 --> 00:08:19,190
detection and download of these samples

201
00:08:19,190 --> 00:08:21,139
and you can see this is this is from his

202
00:08:21,139 --> 00:08:22,669
script here he basically you know

203
00:08:22,669 --> 00:08:25,400
detects the page and says yeah let's

204
00:08:25,400 --> 00:08:29,630
download all this stuff if if it feels

205
00:08:29,630 --> 00:08:31,310
if they detect basically what they

206
00:08:31,310 --> 00:08:33,740
started doing after a couple months

207
00:08:33,740 --> 00:08:37,250
they're saying it's murder is it if we

208
00:08:37,250 --> 00:08:38,809
detect that you we think that you're

209
00:08:38,809 --> 00:08:41,059
like you know doing alysus or something

210
00:08:41,059 --> 00:08:43,039
we're going to redirect you to this WWE

211
00:08:43,039 --> 00:08:45,620
9 dot double Doc's calm which is like

212
00:08:45,620 --> 00:08:48,200
when these dummy pages you probably seen

213
00:08:48,200 --> 00:08:49,790
before if you enter your search terms

214
00:08:49,790 --> 00:08:51,890
wrong or something it's like this math

215
00:08:51,890 --> 00:08:54,500
fake looking page that that seems to

216
00:08:54,500 --> 00:08:56,930
have your search terms but it's really

217
00:08:56,930 --> 00:09:01,399
not what we're looking for and so this

218
00:09:01,399 --> 00:09:03,259
is an initial part this is all the

219
00:09:03,259 --> 00:09:04,699
samples that we collected like just in

220
00:09:04,699 --> 00:09:06,860
the first one with this and so we had

221
00:09:06,860 --> 00:09:09,230
about 15 unique samples but as you can

222
00:09:09,230 --> 00:09:12,170
see this was there are three hashes it's

223
00:09:12,170 --> 00:09:14,329
not readable basically these if these

224
00:09:14,329 --> 00:09:17,509
three files have the exact same hash the

225
00:09:17,509 --> 00:09:18,860
different file names and different

226
00:09:18,860 --> 00:09:20,329
delivery methods so these are different

227
00:09:20,329 --> 00:09:21,860
pages that are serving out the same

228
00:09:21,860 --> 00:09:25,129
hashes see there were some repeats that

229
00:09:25,129 --> 00:09:26,660
they're changing the pages on each one

230
00:09:26,660 --> 00:09:30,879
so that it looks different and then this

231
00:09:30,879 --> 00:09:34,610
actually now that's a key work basically

232
00:09:34,610 --> 00:09:38,600
I just had a demo if they redirect from

233
00:09:38,600 --> 00:09:41,509
this site that said just empirically

234
00:09:41,509 --> 00:09:43,550
about the distribution like I said that

235
00:09:43,550 --> 00:09:47,240
we discovered on the homeward sight the

236
00:09:47,240 --> 00:09:49,970
whole operation basically there's two

237
00:09:49,970 --> 00:09:52,339
methods one of them was hijacking these

238
00:09:52,339 --> 00:09:54,290
expired domains which is the one that we

239
00:09:54,290 --> 00:09:57,499
found the other common one is but being

240
00:09:57,499 --> 00:09:59,540
bundled with torrent files so if

241
00:09:59,540 --> 00:10:00,860
somebody gets to don't download a

242
00:10:00,860 --> 00:10:03,410
cracked copy in Photoshop and they

243
00:10:03,410 --> 00:10:05,839
actually get you know Schleyer instead

244
00:10:05,839 --> 00:10:08,120
some of them will actually install the

245
00:10:08,120 --> 00:10:09,709
actual program the real burger and

246
00:10:09,709 --> 00:10:11,839
afterwards which I discovered was pretty

247
00:10:11,839 --> 00:10:14,029
funny with one of the flash updates you

248
00:10:14,029 --> 00:10:15,559
go through the fake flash update to

249
00:10:15,559 --> 00:10:17,480
install its player and it says install

250
00:10:17,480 --> 00:10:19,670
complete and then the flash up digger

251
00:10:19,670 --> 00:10:21,949
pops up it says install flash then you

252
00:10:21,949 --> 00:10:22,929
go back through it again

253
00:10:22,929 --> 00:10:26,410
okay so yeah but most of them again word

254
00:10:26,410 --> 00:10:31,069
DMVs pkg files Isis or zips and then

255
00:10:31,069 --> 00:10:34,209
again in the torrent the torrent files

256
00:10:34,209 --> 00:10:36,559
when I was looking into the domain I

257
00:10:36,559 --> 00:10:38,480
noticed that in the source there was a

258
00:10:38,480 --> 00:10:41,929
CSS from this working crew dotnet and I

259
00:10:41,929 --> 00:10:43,249
didn't know anything about these domain

260
00:10:43,249 --> 00:10:45,769
or sites but basically there are people

261
00:10:45,769 --> 00:10:49,069
that will you can pay them to park their

262
00:10:49,069 --> 00:10:51,470
meetings for the purposes of these kind

263
00:10:51,470 --> 00:10:53,029
of things so that you can put your ads

264
00:10:53,029 --> 00:10:54,889
on work it's it's nice knowing there's

265
00:10:54,889 --> 00:10:56,059
something after the first time I gave

266
00:10:56,059 --> 00:10:58,399
this talk he was from Verisign and they

267
00:10:58,399 --> 00:11:01,519
said yeah you know domains like or

268
00:11:01,519 --> 00:11:03,679
services like their daddy we give them

269
00:11:03,679 --> 00:11:07,339
in lists of these these part or expired

270
00:11:07,339 --> 00:11:09,559
their names that are being abused on a

271
00:11:09,559 --> 00:11:10,610
regular basis

272
00:11:10,610 --> 00:11:12,920
lists and lists and lists of them but

273
00:11:12,920 --> 00:11:14,360
it's up to them to actually do something

274
00:11:14,360 --> 00:11:14,809
about it

275
00:11:14,809 --> 00:11:16,939
so what incentive do they actually have

276
00:11:16,939 --> 00:11:18,519
to do anything about it

277
00:11:18,519 --> 00:11:22,639
not a lot so these things still you know

278
00:11:22,639 --> 00:11:26,569
processed basically I just want to get a

279
00:11:26,569 --> 00:11:29,089
couple quick examples of some of these

280
00:11:29,089 --> 00:11:31,220
sites this one I liked because it's a

281
00:11:31,220 --> 00:11:32,869
very good example of social engineering

282
00:11:32,869 --> 00:11:36,949
and we see that it's taken the it gives

283
00:11:36,949 --> 00:11:41,540
the user their actual version of Mac so

284
00:11:41,540 --> 00:11:43,100
it detected that my system was running

285
00:11:43,100 --> 00:11:45,290
into havoc and so it puts it up there

286
00:11:45,290 --> 00:11:48,049
this section right here is the only part

287
00:11:48,049 --> 00:11:49,660
of this page that is not legitimate

288
00:11:49,660 --> 00:11:51,949
everything else on this page is mirrored

289
00:11:51,949 --> 00:11:55,579
exactly from Apple so this by Apple care

290
00:11:55,579 --> 00:11:57,019
if you click buy now it's actually gonna

291
00:11:57,019 --> 00:11:58,790
take you to buy Apple care for real

292
00:11:58,790 --> 00:12:00,980
these up here it's gonna take you to you

293
00:12:00,980 --> 00:12:03,170
same thing to Apple site would so very

294
00:12:03,170 --> 00:12:06,199
good social engineering you know your

295
00:12:06,199 --> 00:12:07,879
typical user is probably not going to

296
00:12:07,879 --> 00:12:11,299
think too much of this digging that so

297
00:12:11,299 --> 00:12:13,459
many looks like here's just some

298
00:12:13,459 --> 00:12:16,970
examples of different versions of these

299
00:12:16,970 --> 00:12:20,809
things that are serving the south so

300
00:12:20,809 --> 00:12:23,209
that's just a few of them so basically

301
00:12:23,209 --> 00:12:24,499
these are you know it's the same

302
00:12:24,499 --> 00:12:25,850
packages that they're just kind of

303
00:12:25,850 --> 00:12:28,249
showing it in different ways so your

304
00:12:28,249 --> 00:12:29,929
users not going the same site and seeing

305
00:12:29,929 --> 00:12:31,759
the same thing again and it's

306
00:12:31,759 --> 00:12:33,589
redirecting to something different some

307
00:12:33,589 --> 00:12:35,509
of these are flash updates some of them

308
00:12:35,509 --> 00:12:39,589
are these these web extensions and you

309
00:12:39,589 --> 00:12:41,389
lose it this is actually the chrome

310
00:12:41,389 --> 00:12:43,279
store here this is actually turned back

311
00:12:43,279 --> 00:12:45,829
google.com and I thought was odd but I

312
00:12:45,829 --> 00:12:47,299
wasn't I didn't have time to look into

313
00:12:47,299 --> 00:12:48,559
the Chrome extensions I was still

314
00:12:48,559 --> 00:12:52,459
focusing on malware so I kind of skipped

315
00:12:52,459 --> 00:12:54,649
over that I thought well you know then

316
00:12:54,649 --> 00:12:55,999
one day I'm I'm doing some stuff in my

317
00:12:55,999 --> 00:13:00,790
DNA I gotta move this window I'm like oh

318
00:13:00,790 --> 00:13:03,919
that's just a little chrome window on

319
00:13:03,919 --> 00:13:05,929
top like double box.com

320
00:13:05,929 --> 00:13:07,879
it's just making it look like it and

321
00:13:07,879 --> 00:13:10,249
hoping area click on actually malicious

322
00:13:10,249 --> 00:13:12,769
link below instead of the actual we did

323
00:13:12,769 --> 00:13:14,660
in a extension up here I thought that

324
00:13:14,660 --> 00:13:17,720
was pretty funny some of them have

325
00:13:17,720 --> 00:13:19,789
bundled MIT components and this is just

326
00:13:19,789 --> 00:13:23,799
a quick you can see where

327
00:13:23,829 --> 00:13:28,279
what happened sometimes yeah you can see

328
00:13:28,279 --> 00:13:31,279
this the CPU spike here when not that

329
00:13:31,279 --> 00:13:34,000
pain is a little bit basically and

330
00:13:34,000 --> 00:13:37,490
another way that we saw it was they must

331
00:13:37,490 --> 00:13:38,660
be buying Adwords

332
00:13:38,660 --> 00:13:41,630
I guess because on some lates you know

333
00:13:41,630 --> 00:13:43,899
there was one my other co-workers

334
00:13:43,899 --> 00:13:46,670
casings say he said I'm searching for

335
00:13:46,670 --> 00:13:50,680
Python 7-zip extract and like the third

336
00:13:50,680 --> 00:13:55,519
result was a slayer one my other former

337
00:13:55,519 --> 00:13:57,529
coworker adam said he sent me this one

338
00:13:57,529 --> 00:13:59,180
day is like hey I was just gonna gave my

339
00:13:59,180 --> 00:14:02,779
name and look at this link down here and

340
00:14:02,779 --> 00:14:03,350
sure enough

341
00:14:03,350 --> 00:14:06,290
took me to a flash update server ash

342
00:14:06,290 --> 00:14:08,509
layer-- so a lot of different ways of

343
00:14:08,509 --> 00:14:10,639
distribution so it's clearly a very

344
00:14:10,639 --> 00:14:13,040
large operation in addition to that

345
00:14:13,040 --> 00:14:14,839
which I'll talk about a little bit the

346
00:14:14,839 --> 00:14:17,660
register legitimate Apple developer IDs

347
00:14:17,660 --> 00:14:20,660
and sign everything's legitimate certs

348
00:14:20,660 --> 00:14:26,509
so it gets passed it's just another

349
00:14:26,509 --> 00:14:29,720
level the social engineering anyway so I

350
00:14:29,720 --> 00:14:31,839
just want to run through one quick

351
00:14:31,839 --> 00:14:35,149
example of one of these since it's gonna

352
00:14:35,149 --> 00:14:38,089
make PNG file basically is a cascade of

353
00:14:38,089 --> 00:14:41,120
scripts that run one scripted heads or

354
00:14:41,120 --> 00:14:43,639
decrypt the next which decodes next

355
00:14:43,639 --> 00:14:45,230
which decays the next which finally

356
00:14:45,230 --> 00:14:47,360
don't downloads the payload and installs

357
00:14:47,360 --> 00:14:50,180
it and s it escalates privileges so it

358
00:14:50,180 --> 00:14:52,670
runs the pseudo games completely on your

359
00:14:52,670 --> 00:14:54,680
system and as I said before these are

360
00:14:54,680 --> 00:15:02,060
signed with valor developer IDs so

361
00:15:02,060 --> 00:15:04,040
here's an example of the first week edit

362
00:15:04,040 --> 00:15:07,480
script so basically got a giant thing of

363
00:15:07,480 --> 00:15:12,319
base64 encoded and SSL encrypted data

364
00:15:12,319 --> 00:15:16,060
which decodes into the the second script

365
00:15:16,060 --> 00:15:19,370
visitin you've got this open SSL encoded

366
00:15:19,370 --> 00:15:21,490
be 64

367
00:15:21,490 --> 00:15:25,310
AES 256 cbc and there's a password here

368
00:15:25,310 --> 00:15:26,630
which is also interesting this is

369
00:15:26,630 --> 00:15:29,149
hard-coded into each sample and berries

370
00:15:29,149 --> 00:15:33,439
with each sample another former friend

371
00:15:33,439 --> 00:15:34,760
one that they've been tracking this said

372
00:15:34,760 --> 00:15:36,590
he'd been looking at it and it's

373
00:15:36,590 --> 00:15:39,730
to be based on the time stamp time stamp

374
00:15:39,730 --> 00:15:42,680
which tracks with as I've been looking

375
00:15:42,680 --> 00:15:44,750
at it at last like four or five months

376
00:15:44,750 --> 00:15:46,970
but these things are you know increasing

377
00:15:46,970 --> 00:15:49,370
as you would have a time stamp kind of

378
00:15:49,370 --> 00:15:56,690
oh okay so the example of the second

379
00:15:56,690 --> 00:16:00,140
script it's decoded so this is more kind

380
00:16:00,140 --> 00:16:02,540
of a shell script here again you've got

381
00:16:02,540 --> 00:16:04,640
another chunk of basics before this one

382
00:16:04,640 --> 00:16:06,080
is not encrypted it's just basically

383
00:16:06,080 --> 00:16:08,990
four encoded and then they actually use

384
00:16:08,990 --> 00:16:11,480
X X beam which is enough layer of x XD

385
00:16:11,480 --> 00:16:17,390
it's a Linux or BSD based command line

386
00:16:17,390 --> 00:16:20,480
hex editing tool and so they're using

387
00:16:20,480 --> 00:16:23,630
that to format and print out the third

388
00:16:23,630 --> 00:16:26,420
script so here's an example of the third

389
00:16:26,420 --> 00:16:28,190
script which is just they slip a shirt

390
00:16:28,190 --> 00:16:31,100
shell script I've highlighted down here

391
00:16:31,100 --> 00:16:32,960
this is the curl command that they use

392
00:16:32,960 --> 00:16:35,480
to download the final payload basically

393
00:16:35,480 --> 00:16:37,880
they build this URL with some data from

394
00:16:37,880 --> 00:16:40,460
the SIS right and then do a curl with

395
00:16:40,460 --> 00:16:44,060
these kind of unusual command-line

396
00:16:44,060 --> 00:16:47,600
arguments of F 0 L I'm going to go into

397
00:16:47,600 --> 00:16:49,390
a lot of detail but basically it's

398
00:16:49,390 --> 00:16:54,290
forcing HTTP 1.1 which is kind of odd

399
00:16:54,290 --> 00:16:58,640
and LLL I think is followed reader or

400
00:16:58,640 --> 00:17:00,380
maybe yeah woman that's follow redirects

401
00:17:00,380 --> 00:17:04,310
and and use enforce HTTP 1.1 so that was

402
00:17:04,310 --> 00:17:06,079
actually one of our best behavioral

403
00:17:06,079 --> 00:17:07,670
indicators for finding this and

404
00:17:07,670 --> 00:17:10,550
environments using that alone just curl

405
00:17:10,550 --> 00:17:13,040
in general with those specific command

406
00:17:13,040 --> 00:17:14,720
line arguments was a very very high

407
00:17:14,720 --> 00:17:17,440
fidelity indicator she that pointed to

408
00:17:17,440 --> 00:17:22,520
almost entirely Schleyer and just a

409
00:17:22,520 --> 00:17:25,400
bigger look of this one of these sample

410
00:17:25,400 --> 00:17:29,060
URLs we've got a basically the C is

411
00:17:29,060 --> 00:17:31,340
we're calling a campaign identifier it's

412
00:17:31,340 --> 00:17:34,070
not unique they are clustered we started

413
00:17:34,070 --> 00:17:36,200
to run some analytics on is this like

414
00:17:36,200 --> 00:17:39,290
all targeting one customer or is there

415
00:17:39,290 --> 00:17:40,940
some sort of connection between is it

416
00:17:40,940 --> 00:17:43,250
doesn't seem to be I think it's just a

417
00:17:43,250 --> 00:17:46,040
bundle of one batch that's that's

418
00:17:46,040 --> 00:17:48,840
created by them and then the you

419
00:17:48,840 --> 00:17:51,059
unique ID for the system and this is

420
00:17:51,059 --> 00:17:54,840
they saw an eye on a platform UUID again

421
00:17:54,840 --> 00:17:57,059
the second one is another unique ID that

422
00:17:57,059 --> 00:17:59,539
that's based just on the command-line

423
00:17:59,539 --> 00:18:03,870
grd Gen tool and then the Mac OS version

424
00:18:03,870 --> 00:18:05,880
with patch level and then that

425
00:18:05,880 --> 00:18:07,860
encryption key which is hard-coded like

426
00:18:07,860 --> 00:18:10,169
I said before this is that same thing

427
00:18:10,169 --> 00:18:14,220
that's used in that first strip so again

428
00:18:14,220 --> 00:18:20,820
notice it an update all right well

429
00:18:20,820 --> 00:18:22,140
anyway I think this a little bit bigger

430
00:18:22,140 --> 00:18:26,309
than before right before this this is

431
00:18:26,309 --> 00:18:28,620
actually just a clip from a screenshot

432
00:18:28,620 --> 00:18:32,100
from art CV effects tool but I just

433
00:18:32,100 --> 00:18:33,299
wanted to use this because it actually

434
00:18:33,299 --> 00:18:36,090
shows you this file

435
00:18:36,090 --> 00:18:41,390
the app is signed by the wallah

436
00:18:41,390 --> 00:18:43,770
so yeah so this is one of the valid

437
00:18:43,770 --> 00:18:46,289
valid developer IDs so maybe this Wawa

438
00:18:46,289 --> 00:18:49,620
and then again down here when the curl

439
00:18:49,620 --> 00:18:52,049
command is executed you can see the that

440
00:18:52,049 --> 00:18:58,080
password is used for this installation

441
00:18:58,080 --> 00:19:00,720
basically it's running sido and it's

442
00:19:00,720 --> 00:19:03,059
linking security off trampoline using

443
00:19:03,059 --> 00:19:06,029
this escalation technique that I've

444
00:19:06,029 --> 00:19:07,279
talked about earlier

445
00:19:07,279 --> 00:19:10,440
it's authorization executed privileges

446
00:19:10,440 --> 00:19:13,640
so this is a screenshot from Patrick's

447
00:19:13,640 --> 00:19:17,940
talk at Def Con called death by a

448
00:19:17,940 --> 00:19:20,700
thousand installers and very very good

449
00:19:20,700 --> 00:19:22,380
talk I would definitely recommend it I'm

450
00:19:22,380 --> 00:19:23,760
not gonna go into detail on this because

451
00:19:23,760 --> 00:19:25,049
you doesn't really good job explaining

452
00:19:25,049 --> 00:19:27,240
it but I really liked this graphic

453
00:19:27,240 --> 00:19:29,190
because it really doesn't good job of

454
00:19:29,190 --> 00:19:30,809
kind of showing me what happened so

455
00:19:30,809 --> 00:19:32,490
there's only this API call which is

456
00:19:32,490 --> 00:19:35,190
deprecated now but so Apple me

457
00:19:35,190 --> 00:19:36,899
interpreted this and made a safer

458
00:19:36,899 --> 00:19:38,880
version of it but this it turns out that

459
00:19:38,880 --> 00:19:40,890
it's kind of hard to implement and so

460
00:19:40,890 --> 00:19:42,659
those developers are actually just still

461
00:19:42,659 --> 00:19:44,190
using the segregated API because it

462
00:19:44,190 --> 00:19:46,559
still works and so they can't really

463
00:19:46,559 --> 00:19:49,110
take it away because like a lot of

464
00:19:49,110 --> 00:19:54,120
things so but anyway this will still

465
00:19:54,120 --> 00:19:58,710
even though it is they can't get around

466
00:19:58,710 --> 00:20:00,809
some things with this API calling

467
00:20:00,809 --> 00:20:02,390
security ops rambling work

468
00:20:02,390 --> 00:20:04,790
isolate the user does still have to

469
00:20:04,790 --> 00:20:08,690
authenticate but like I said the this

470
00:20:08,690 --> 00:20:10,730
comes down to social engineering and the

471
00:20:10,730 --> 00:20:11,990
techniques are pretty good and a lot of

472
00:20:11,990 --> 00:20:13,220
these are still fall for it because

473
00:20:13,220 --> 00:20:14,750
they're installing something and when

474
00:20:14,750 --> 00:20:15,740
you're installing something you're

475
00:20:15,740 --> 00:20:17,480
expecting tackle authenticate list for

476
00:20:17,480 --> 00:20:23,360
this one so it looks so we pass this off

477
00:20:23,360 --> 00:20:25,820
to Josh talk about soon rejected see

478
00:20:25,820 --> 00:20:31,010
perversity so yeah we we started off

479
00:20:31,010 --> 00:20:32,800
talking about doing all of this for

480
00:20:32,800 --> 00:20:36,980
Slayer and I'm gonna just kind of go

481
00:20:36,980 --> 00:20:39,620
over real quick what abducted she looks

482
00:20:39,620 --> 00:20:41,420
like in case there's anybody in here

483
00:20:41,420 --> 00:20:43,640
that hasn't actually tried to write an

484
00:20:43,640 --> 00:20:45,260
objective-c before so it's a lot

485
00:20:45,260 --> 00:20:47,680
different looking than regular C

486
00:20:47,680 --> 00:20:50,110
athletes like interface and

487
00:20:50,110 --> 00:20:53,210
implementation details are wrapped in

488
00:20:53,210 --> 00:20:55,550
implementation things the functions

489
00:20:55,550 --> 00:20:58,490
start with like minuses for methods and

490
00:20:58,490 --> 00:21:00,140
stuff it's very interesting

491
00:21:00,140 --> 00:21:03,050
Wow and then this is what it looks like

492
00:21:03,050 --> 00:21:05,990
if you're actually writing some so it

493
00:21:05,990 --> 00:21:09,830
looks a lot different than your UFC and

494
00:21:09,830 --> 00:21:12,080
it doesn't really stop being different

495
00:21:12,080 --> 00:21:15,080
there because and when you get down to

496
00:21:15,080 --> 00:21:17,690
the assembly level on the left side kind

497
00:21:17,690 --> 00:21:19,850
of what C and C++ looks like when you're

498
00:21:19,850 --> 00:21:22,850
calling a method you pass in like say

499
00:21:22,850 --> 00:21:27,200
your class this pointer and RDI and then

500
00:21:27,200 --> 00:21:29,060
ESI is just might be some parameter but

501
00:21:29,060 --> 00:21:33,530
in Objective C you actually pass it and

502
00:21:33,530 --> 00:21:35,180
you still passing your objective object

503
00:21:35,180 --> 00:21:38,810
pointer but then RSI your second

504
00:21:38,810 --> 00:21:42,260
argument is actually the selector which

505
00:21:42,260 --> 00:21:45,140
is a string of the name of the method

506
00:21:45,140 --> 00:21:47,030
that you're going to call and then it

507
00:21:47,030 --> 00:21:50,570
passes in the parameters factor that so

508
00:21:50,570 --> 00:21:53,210
as you can imagine this looks kind of

509
00:21:53,210 --> 00:21:56,390
crappy in your typical disassemblers

510
00:21:56,390 --> 00:22:00,680
like aya you have all of your weird

511
00:22:00,680 --> 00:22:02,930
their parameters here then you've got

512
00:22:02,930 --> 00:22:05,930
your selectors up here and then it

513
00:22:05,930 --> 00:22:08,750
causes Objective C message send instead

514
00:22:08,750 --> 00:22:12,470
of the actual method and the problem

515
00:22:12,470 --> 00:22:15,010
with this is also in

516
00:22:15,010 --> 00:22:18,400
the compiled version you don't really

517
00:22:18,400 --> 00:22:23,080
get the McCall's like you would expect

518
00:22:23,080 --> 00:22:25,270
it kind of has like a ejected message

519
00:22:25,270 --> 00:22:29,080
sent for Alec and objective message

520
00:22:29,080 --> 00:22:30,730
saying strat which returns like

521
00:22:30,730 --> 00:22:33,910
restructuring things so it's a little

522
00:22:33,910 --> 00:22:35,350
hard to figure out like what's actually

523
00:22:35,350 --> 00:22:39,810
happening here particularly because

524
00:22:39,810 --> 00:22:42,250
since the methods themselves are called

525
00:22:42,250 --> 00:22:44,230
your standard disassemblers don't

526
00:22:44,230 --> 00:22:45,580
actually have any sort of cross

527
00:22:45,580 --> 00:22:47,950
references the best you get is they

528
00:22:47,950 --> 00:22:51,190
pointer to this method structure that

529
00:22:51,190 --> 00:22:53,410
actually holds information about the

530
00:22:53,410 --> 00:22:55,480
function at which point you then you can

531
00:22:55,480 --> 00:22:58,150
kind of like find the pointer to the

532
00:22:58,150 --> 00:23:00,730
function there and then get it which is

533
00:23:00,730 --> 00:23:02,230
just a hassle

534
00:23:02,230 --> 00:23:04,360
Hopper's a little bit better and there'd

535
00:23:04,360 --> 00:23:07,090
be compiled view you can see the the

536
00:23:07,090 --> 00:23:11,310
clause but you'll also notice that

537
00:23:11,310 --> 00:23:15,700
there's some where I get this this is an

538
00:23:15,700 --> 00:23:19,360
older version that I gave I don't have

539
00:23:19,360 --> 00:23:21,610
the objective-c message sent stret in

540
00:23:21,610 --> 00:23:23,770
this one so they don't handle the

541
00:23:23,770 --> 00:23:25,780
structural return ones that actually

542
00:23:25,780 --> 00:23:29,440
return passing a parameter that is the

543
00:23:29,440 --> 00:23:32,680
return value and additionally you still

544
00:23:32,680 --> 00:23:36,550
don't get your cross references in the

545
00:23:36,550 --> 00:23:39,970
thing so it's just kind of a hassle to

546
00:23:39,970 --> 00:23:42,160
try to figure out anything that's going

547
00:23:42,160 --> 00:23:44,740
on and programmatically do anything with

548
00:23:44,740 --> 00:23:49,870
these so in binary ninja it's not really

549
00:23:49,870 --> 00:23:53,200
much better you do at least get your

550
00:23:53,200 --> 00:23:56,440
like selectors over here annotated that

551
00:23:56,440 --> 00:23:59,110
you can see what's being called which is

552
00:23:59,110 --> 00:24:00,520
a little bit better than either because

553
00:24:00,520 --> 00:24:03,040
how to rename their parameters so you

554
00:24:03,040 --> 00:24:04,480
can't really see them but you see the

555
00:24:04,480 --> 00:24:06,190
name of them and all these colons get

556
00:24:06,190 --> 00:24:08,410
replacement underlines so you can't

557
00:24:08,410 --> 00:24:10,240
really like even really count them to

558
00:24:10,240 --> 00:24:12,580
see how many parameters the function is

559
00:24:12,580 --> 00:24:15,610
even gonna take if we look at the medium

560
00:24:15,610 --> 00:24:20,200
level I love you in my image it's a

561
00:24:20,200 --> 00:24:22,120
little bit better you can see they

562
00:24:22,120 --> 00:24:24,310
collect the parameters say you can see

563
00:24:24,310 --> 00:24:27,370
where the selectors passed in as well as

564
00:24:27,370 --> 00:24:28,510
the

565
00:24:28,510 --> 00:24:36,040
the object pointer um but it still

566
00:24:36,040 --> 00:24:38,080
doesn't know like what what tricks these

567
00:24:38,080 --> 00:24:39,700
objects are it has a propagated manage

568
00:24:39,700 --> 00:24:41,800
that stuff as well so you're still left

569
00:24:41,800 --> 00:24:43,570
kind of trying to figure out what's

570
00:24:43,570 --> 00:24:45,880
going on there and of course there are

571
00:24:45,880 --> 00:24:49,840
no cross references and so it'd be nice

572
00:24:49,840 --> 00:24:51,630
if we could actually have some sort of

573
00:24:51,630 --> 00:24:56,260
view of the bucket disassembly that

574
00:24:56,260 --> 00:24:58,780
actually looks more like objective-c so

575
00:24:58,780 --> 00:25:01,690
you can see what's happening and that's

576
00:25:01,690 --> 00:25:03,550
kind of what I've put together which I

577
00:25:03,550 --> 00:25:05,940
call the projective scene graph here so

578
00:25:05,940 --> 00:25:09,280
as a side-by-side this is on the left

579
00:25:09,280 --> 00:25:12,790
hand side is media model I out and the

580
00:25:12,790 --> 00:25:15,220
right-hand side is the Objective C graph

581
00:25:15,220 --> 00:25:18,570
view that is built on top of a meanwhile

582
00:25:18,570 --> 00:25:21,510
after collecting all of the information

583
00:25:21,510 --> 00:25:26,740
from the binary and as you can see we've

584
00:25:26,740 --> 00:25:29,800
got our actual structures propagated

585
00:25:29,800 --> 00:25:33,460
we've got functions that are called in

586
00:25:33,460 --> 00:25:36,420
the blue you can actually see those are

587
00:25:36,420 --> 00:25:38,860
the those are linked to the functions

588
00:25:38,860 --> 00:25:40,330
themselves so you can navigate through

589
00:25:40,330 --> 00:25:43,140
the binary as you would a normal binary

590
00:25:43,140 --> 00:25:49,650
that has just regular C functions and we

591
00:25:49,710 --> 00:25:52,450
we also see like the parameters are

592
00:25:52,450 --> 00:25:55,420
correctly fascinating as well and I

593
00:25:55,420 --> 00:25:59,110
believe what the structure one on this

594
00:25:59,110 --> 00:26:01,740
one as well but there is it handles

595
00:26:01,740 --> 00:26:05,110
Objective C message sense track which is

596
00:26:05,110 --> 00:26:07,720
the one that passes in a pointer for the

597
00:26:07,720 --> 00:26:13,060
return value and so there's also

598
00:26:13,060 --> 00:26:16,350
Objective C message sense super super to

599
00:26:16,350 --> 00:26:19,630
which it also will tell you that those

600
00:26:19,630 --> 00:26:23,650
are the super ones so how do you get

601
00:26:23,650 --> 00:26:24,810
this information

602
00:26:24,810 --> 00:26:30,190
the mock Oh binary actually helpfully

603
00:26:30,190 --> 00:26:32,440
provides us with a lot of objective-c

604
00:26:32,440 --> 00:26:36,190
sections and these contain all of the

605
00:26:36,190 --> 00:26:40,600
metadata in structures that give you

606
00:26:40,600 --> 00:26:41,800
what you

607
00:26:41,800 --> 00:26:47,140
to figure this all out so the first

608
00:26:47,140 --> 00:26:48,820
thing that we have to do with the class

609
00:26:48,820 --> 00:26:51,760
T in class RT those are the ones that

610
00:26:51,760 --> 00:26:55,440
behind the actual structures for the

611
00:26:55,440 --> 00:26:59,650
classes themselves and I what method to

612
00:26:59,650 --> 00:27:02,820
you metallicity here's well and then

613
00:27:02,820 --> 00:27:05,620
we'll we also get the the methods from

614
00:27:05,620 --> 00:27:10,270
method list i garlis is the survives a

615
00:27:10,270 --> 00:27:13,150
list of the offsets into the structure

616
00:27:13,150 --> 00:27:16,560
that are the different member fields

617
00:27:16,560 --> 00:27:20,050
because why not extract that layer for

618
00:27:20,050 --> 00:27:22,300
some reason and then property list is

619
00:27:22,300 --> 00:27:23,920
pretty much the same kind of thing it

620
00:27:23,920 --> 00:27:25,980
has information about the property

621
00:27:25,980 --> 00:27:27,970
different properties on the objective-c

622
00:27:27,970 --> 00:27:29,740
objects and their types and different

623
00:27:29,740 --> 00:27:33,160
things like that um so the class

624
00:27:33,160 --> 00:27:36,970
structure looks like this the first two

625
00:27:36,970 --> 00:27:40,690
pointers are related to the type itself

626
00:27:40,690 --> 00:27:43,510
so is ax is either going to be a pointer

627
00:27:43,510 --> 00:27:50,340
to a metaclass object which is the I

628
00:27:50,340 --> 00:27:53,830
guess you could call it the type or it's

629
00:27:53,830 --> 00:27:56,290
going to be mal I guess which is

630
00:27:56,290 --> 00:27:58,320
indicating that it is a meta class

631
00:27:58,320 --> 00:28:00,010
because metaclasses

632
00:28:00,010 --> 00:28:02,290
are classes that you can pass in to

633
00:28:02,290 --> 00:28:05,550
class methods it's very confusing um

634
00:28:05,550 --> 00:28:09,100
super classes of course like regular

635
00:28:09,100 --> 00:28:11,350
objective oriented programming where

636
00:28:11,350 --> 00:28:13,420
it's the class that you inherited from

637
00:28:13,420 --> 00:28:15,910
you can kind of step up through those

638
00:28:15,910 --> 00:28:18,400
two points at least box methods and

639
00:28:18,400 --> 00:28:20,320
things I'm not going to talk about its

640
00:28:20,320 --> 00:28:21,880
cash thing is that something at runtime

641
00:28:21,880 --> 00:28:24,570
but the important thing is it's we table

642
00:28:24,570 --> 00:28:29,100
pointer that points to the class our ot

643
00:28:29,100 --> 00:28:32,230
structured and that is the structure

644
00:28:32,230 --> 00:28:34,510
that has all the information about the

645
00:28:34,510 --> 00:28:38,560
class itself including the topic the

646
00:28:38,560 --> 00:28:43,120
classes and where it likes starch in the

647
00:28:43,120 --> 00:28:44,890
object so it's like the multiple

648
00:28:44,890 --> 00:28:47,830
inheritance I think that offset can

649
00:28:47,830 --> 00:28:50,320
change there's also the name of the

650
00:28:50,320 --> 00:28:52,300
object of their class which is very

651
00:28:52,300 --> 00:28:54,580
helpful for figuring out types up and

652
00:28:54,580 --> 00:28:55,510
then you both

653
00:28:55,510 --> 00:28:57,880
about these four structures that give

654
00:28:57,880 --> 00:28:59,800
you the methods the protocols which are

655
00:28:59,800 --> 00:29:03,400
like interfaces I guess and the eyeballs

656
00:29:03,400 --> 00:29:05,710
which are the offsets to the fields and

657
00:29:05,710 --> 00:29:07,570
things and then the base properties

658
00:29:07,570 --> 00:29:11,890
which are kind of like my bars I guess I

659
00:29:11,890 --> 00:29:13,120
didn't really understand what the

660
00:29:13,120 --> 00:29:14,830
difference between them is by doing this

661
00:29:14,830 --> 00:29:17,890
I but I found that when it calls

662
00:29:17,890 --> 00:29:22,420
properties in the disassembly it just

663
00:29:22,420 --> 00:29:24,460
calls a function that then sets the

664
00:29:24,460 --> 00:29:26,830
property with the offset so it's

665
00:29:26,830 --> 00:29:28,180
basically the same kind of thing isn't

666
00:29:28,180 --> 00:29:34,140
icon and then the method list which was

667
00:29:34,140 --> 00:29:37,870
this one down here to fix methods this

668
00:29:37,870 --> 00:29:39,670
is going to tell you the size of the

669
00:29:39,670 --> 00:29:45,330
method T object structure and then how

670
00:29:45,330 --> 00:29:47,980
how many there are for this particular

671
00:29:47,980 --> 00:29:49,090
thing and then there's just like an

672
00:29:49,090 --> 00:29:53,050
array of that size after the the

673
00:29:53,050 --> 00:29:54,040
metadata for it

674
00:29:54,040 --> 00:29:56,710
and in this you've got your name of the

675
00:29:56,710 --> 00:29:57,280
function

676
00:29:57,280 --> 00:29:59,670
you've got the types which is extreme

677
00:29:59,670 --> 00:30:03,400
I'll show that in a minute and then int

678
00:30:03,400 --> 00:30:05,230
is a pointer to the actual function

679
00:30:05,230 --> 00:30:09,490
itself and so you can see this there's a

680
00:30:09,490 --> 00:30:11,590
lot of levels that you kind of have to

681
00:30:11,590 --> 00:30:15,190
jump through here in order to figure out

682
00:30:15,190 --> 00:30:18,120
what method is actually being called by

683
00:30:18,120 --> 00:30:22,500
what things are like what types they are

684
00:30:23,010 --> 00:30:27,820
yeah so what's gonna go here so this is

685
00:30:27,820 --> 00:30:31,780
part of what these classes look like the

686
00:30:31,780 --> 00:30:35,020
plasti object and then you can see

687
00:30:35,020 --> 00:30:38,200
there's a class version as well as a

688
00:30:38,200 --> 00:30:42,550
regular class version and the three

689
00:30:42,550 --> 00:30:47,170
tables oh and yes you can also see is a

690
00:30:47,170 --> 00:30:50,050
here in the regular class points to

691
00:30:50,050 --> 00:30:52,930
lameta class object telling you that

692
00:30:52,930 --> 00:30:57,220
it's actually this kind of class so if

693
00:30:57,220 --> 00:31:01,780
we go into the we table when we get this

694
00:31:01,780 --> 00:31:04,030
class are of structure here which you

695
00:31:04,030 --> 00:31:06,490
can see is that the name here's the

696
00:31:06,490 --> 00:31:09,000
agreed one of the base methods with

697
00:31:09,000 --> 00:31:12,330
click on that and see that there's all

698
00:31:12,330 --> 00:31:13,710
the different things and this is what

699
00:31:13,710 --> 00:31:16,650
these tight strings look like so another

700
00:31:16,650 --> 00:31:18,120
thing that has to be done is actually

701
00:31:18,120 --> 00:31:21,930
parsing these tight strings and I don't

702
00:31:21,930 --> 00:31:23,970
think there's a really good one so you

703
00:31:23,970 --> 00:31:26,370
can yeah so these are actually sometimes

704
00:31:26,370 --> 00:31:30,810
have actual class types in them as well

705
00:31:30,810 --> 00:31:32,640
which is very handy for figuring out

706
00:31:32,640 --> 00:31:39,990
type propagation so then the other thing

707
00:31:39,990 --> 00:31:57,540
is these objective-c message balls okay

708
00:31:57,540 --> 00:32:00,750
so anyway so you can see like this is

709
00:32:00,750 --> 00:32:04,650
what they look like in this view but if

710
00:32:04,650 --> 00:32:09,000
we go back to the disassembly graph as

711
00:32:09,000 --> 00:32:13,800
well so you get these objectives message

712
00:32:13,800 --> 00:32:17,400
sense and the first thing that you have

713
00:32:17,400 --> 00:32:19,200
to do is then figure out what this type

714
00:32:19,200 --> 00:32:23,850
is so to going through to develop this I

715
00:32:23,850 --> 00:32:26,160
collected these objective-c

716
00:32:26,160 --> 00:32:31,320
message or class block laws the symbols

717
00:32:31,320 --> 00:32:32,790
for these we figured out that these are

718
00:32:32,790 --> 00:32:36,200
where it's passing in this class T type

719
00:32:36,200 --> 00:32:38,310
so then that kind of tells you that it's

720
00:32:38,310 --> 00:32:41,120
a class method that's being passed in

721
00:32:41,120 --> 00:32:46,080
done instead for other ones once you

722
00:32:46,080 --> 00:32:48,180
figure out where the Alex and the units

723
00:32:48,180 --> 00:32:51,360
are for various classes you can then

724
00:32:51,360 --> 00:32:53,700
propagate those types backwards as well

725
00:32:53,700 --> 00:32:56,310
which then starts allowing you to figure

726
00:32:56,310 --> 00:32:59,100
out the what selectors know with which

727
00:32:59,100 --> 00:33:03,120
objects and it then allows you to figure

728
00:33:03,120 --> 00:33:06,890
out how to represent these objective-c

729
00:33:06,890 --> 00:33:09,920
message then calls as the correct

730
00:33:09,920 --> 00:33:17,870
methods you see if this one's got any no

731
00:33:20,190 --> 00:33:24,580
so so we'll do it a little bit more

732
00:33:24,580 --> 00:33:38,710
later as well what okay so this is what

733
00:33:38,710 --> 00:33:41,769
it looks like when the I bar start

734
00:33:41,769 --> 00:33:45,700
directly figured out because it creates

735
00:33:45,700 --> 00:33:51,359
you can use the the eye bars themselves

736
00:33:51,359 --> 00:33:58,779
- yeah so in the disassembly it's

737
00:33:58,779 --> 00:34:02,019
reading these five are offsets from this

738
00:34:02,019 --> 00:34:07,749
table and then it adds those to whatever

739
00:34:07,749 --> 00:34:11,770
the class object is so normally this

740
00:34:11,770 --> 00:34:16,239
would be just a cardiac lasari X but

741
00:34:16,239 --> 00:34:18,790
once you identify that these are eye

742
00:34:18,790 --> 00:34:22,059
bars set them to constants the data flow

743
00:34:22,059 --> 00:34:25,389
propagation will actually propagate that

744
00:34:25,389 --> 00:34:27,339
through the disassembly and you can see

745
00:34:27,339 --> 00:34:31,480
this map delegate object which we

746
00:34:31,480 --> 00:34:35,230
created from the add large it can tell

747
00:34:35,230 --> 00:34:37,480
which parameters actually being passed

748
00:34:37,480 --> 00:34:43,989
and it then also propagates the the

749
00:34:43,989 --> 00:34:46,418
class from that as well so that you can

750
00:34:46,418 --> 00:34:48,099
see that this sorry X is actually a

751
00:34:48,099 --> 00:34:52,359
pianist window um I didn't go farther on

752
00:34:52,359 --> 00:34:57,220
the return values to then propagate

753
00:34:57,220 --> 00:35:00,130
those out but that is possibly a future

754
00:35:00,130 --> 00:35:02,980
thing we're figuring out the return the

755
00:35:02,980 --> 00:35:05,170
types the return values and then setting

756
00:35:05,170 --> 00:35:09,400
the function types of those as well so

757
00:35:09,400 --> 00:35:11,680
then adding extra reps they I actually

758
00:35:11,680 --> 00:35:14,410
had to get them to add a new API to

759
00:35:14,410 --> 00:35:15,910
pioneering inja in order to do this

760
00:35:15,910 --> 00:35:19,150
because cry previously there was no big

761
00:35:19,150 --> 00:35:22,869
a for a user adding their own custom

762
00:35:22,869 --> 00:35:29,559
cross references for things but now when

763
00:35:29,559 --> 00:35:31,900
you have a particular

764
00:35:31,900 --> 00:35:36,760
thing we like this function here instead

765
00:35:36,760 --> 00:35:38,410
of just normally getting across records

766
00:35:38,410 --> 00:35:41,160
to the data section with the method T

767
00:35:41,160 --> 00:35:44,920
you can see we now have the call

768
00:35:44,920 --> 00:35:48,900
instruction which if we are actually in

769
00:35:48,900 --> 00:35:57,220
what we're actually graph you look at

770
00:35:57,220 --> 00:36:01,090
that X if we click on these you can see

771
00:36:01,090 --> 00:36:04,390
it actually goes to the call itself and

772
00:36:04,390 --> 00:36:09,690
you can see where is calling anything so

773
00:36:09,690 --> 00:36:13,869
and that's the new graph here so so

774
00:36:13,869 --> 00:36:17,200
that's kind of what we were what we came

775
00:36:17,200 --> 00:36:20,700
up with for that in the future I want to

776
00:36:20,700 --> 00:36:24,520
add data renderers which are classes

777
00:36:24,520 --> 00:36:28,300
that will allow you to update the linear

778
00:36:28,300 --> 00:36:31,050
view to show a custom information

779
00:36:31,050 --> 00:36:35,550
actually I forgot to mention that sorry

780
00:36:35,550 --> 00:36:39,670
if we go to the I added the potato

781
00:36:39,670 --> 00:36:43,060
renderer to see x-rays so the CF strings

782
00:36:43,060 --> 00:36:45,690
now show up like this instead of as

783
00:36:45,690 --> 00:36:48,580
structure so that you can see what the

784
00:36:48,580 --> 00:36:52,960
string is and then it parses the the

785
00:36:52,960 --> 00:36:55,839
different parameters are the little

786
00:36:55,839 --> 00:36:58,420
flags that are in the info field of the

787
00:36:58,420 --> 00:37:03,490
CF string and then it also has the X

788
00:37:03,490 --> 00:37:12,339
reps for your strings so there's one

789
00:37:12,339 --> 00:37:13,869
thing I'm so I'm on with that channel

790
00:37:13,869 --> 00:37:15,240
right now they don't have the

791
00:37:15,240 --> 00:37:18,040
unification with the navigation yeah so

792
00:37:18,040 --> 00:37:19,510
when you double-click in one year it

793
00:37:19,510 --> 00:37:21,640
goes the disassembly instead of graph

794
00:37:21,640 --> 00:37:27,160
you back again but you'll notice like

795
00:37:27,160 --> 00:37:31,300
this parameter here for you shows this

796
00:37:31,300 --> 00:37:34,420
string this is actually the CF string

797
00:37:34,420 --> 00:37:37,720
and we changed it so that it instead of

798
00:37:37,720 --> 00:37:41,710
showing a pointer to see X drink it just

799
00:37:41,710 --> 00:37:43,630
goes ahead and renders what the CF

800
00:37:43,630 --> 00:37:44,640
string is actually

801
00:37:44,640 --> 00:37:51,510
is in this year so I want what I want to

802
00:37:51,510 --> 00:37:53,160
do is add some more data rhetoric sure

803
00:37:53,160 --> 00:37:55,710
the classes properties to show the

804
00:37:55,710 --> 00:37:57,450
different attributes on a property as

805
00:37:57,450 --> 00:37:59,579
well whether they're greed only or

806
00:37:59,579 --> 00:38:02,819
things like that and there's still a few

807
00:38:02,819 --> 00:38:05,730
objective-c methods that I go handle I

808
00:38:05,730 --> 00:38:07,859
add event things like release and

809
00:38:07,859 --> 00:38:11,640
retaining and then Objective C message

810
00:38:11,640 --> 00:38:15,180
send message then super and the to the

811
00:38:15,180 --> 00:38:17,549
super strap and the regular strap but

812
00:38:17,549 --> 00:38:20,010
there's still a couple other ones I

813
00:38:20,010 --> 00:38:21,660
think something to do with floats and

814
00:38:21,660 --> 00:38:24,950
stuff like that that are handled

815
00:38:24,950 --> 00:38:27,390
eventually I want to integrate it into a

816
00:38:27,390 --> 00:38:29,700
decompiler that I've been writing on my

817
00:38:29,700 --> 00:38:36,299
twitch stream that does a linear you

818
00:38:36,299 --> 00:38:38,460
decompile me with the medium level I out

819
00:38:38,460 --> 00:38:41,309
and I'd like to then take the

820
00:38:41,309 --> 00:38:44,490
information in the objective-c graphic

821
00:38:44,490 --> 00:38:46,470
view and pass that into the B compiler

822
00:38:46,470 --> 00:38:48,269
instead so that you get to be compiled

823
00:38:48,269 --> 00:38:51,420
Objective C you which would I think

824
00:38:51,420 --> 00:38:54,690
rival popper or actually be a little bit

825
00:38:54,690 --> 00:38:56,039
better because there are some things

826
00:38:56,039 --> 00:38:59,069
that I can do but they keep not and then

827
00:38:59,069 --> 00:39:02,039
additionally whatever for requests I

828
00:39:02,039 --> 00:39:05,160
receive so I've actually posted on the

829
00:39:05,160 --> 00:39:08,309
trail bits github it's so private I'm

830
00:39:08,309 --> 00:39:10,259
gonna make it public right up at the

831
00:39:10,259 --> 00:39:12,059
stock but that's where you'll be able to

832
00:39:12,059 --> 00:39:15,089
find it and download it and hopefully

833
00:39:15,089 --> 00:39:19,440
it's useful for people and then we're

834
00:39:19,440 --> 00:39:22,410
gonna do some demos you wants to stick

835
00:39:22,410 --> 00:39:24,150
with so much alright this one was just

836
00:39:24,150 --> 00:39:27,180
showing like how many functions it finds

837
00:39:27,180 --> 00:39:28,769
and everything that's really cool but

838
00:39:28,769 --> 00:39:30,480
we'll go ahead and talk about these

839
00:39:30,480 --> 00:39:34,500
demos yeah so we've kind of mentioned

840
00:39:34,500 --> 00:39:36,869
that you know anybody that's been

841
00:39:36,869 --> 00:39:39,660
security and malware is right and stuff

842
00:39:39,660 --> 00:39:41,220
new you have a great idea and some

843
00:39:41,220 --> 00:39:42,809
communities getting older else

844
00:39:42,809 --> 00:39:44,789
so we have this great idea for this talk

845
00:39:44,789 --> 00:39:48,059
back whenever the city was all in here

846
00:39:48,059 --> 00:39:50,640
and I've been looking at flare I just

847
00:39:50,640 --> 00:39:52,680
started kind of really digging reversing

848
00:39:52,680 --> 00:39:55,440
the Mach o of the final pay word that

849
00:39:55,440 --> 00:39:57,210
does all the optimization stuff and the

850
00:39:57,210 --> 00:39:57,930
cool stuff

851
00:39:57,930 --> 00:40:00,130
and then we started you know if you

852
00:40:00,130 --> 00:40:02,200
started building the tool and realized

853
00:40:02,200 --> 00:40:03,430
that the code wasn't really very

854
00:40:03,430 --> 00:40:06,490
interesting all the interesting stuff

855
00:40:06,490 --> 00:40:09,190
pretty much happens in the skirts before

856
00:40:09,190 --> 00:40:11,770
so like okay so there's some

857
00:40:11,770 --> 00:40:17,590
indentations and some stuff but it

858
00:40:17,590 --> 00:40:19,330
didn't it wasn't really very interesting

859
00:40:19,330 --> 00:40:20,980
so yeah okay I need to come up with

860
00:40:20,980 --> 00:40:22,990
another sample that illustrates

861
00:40:22,990 --> 00:40:25,990
something more interesting and so we

862
00:40:25,990 --> 00:40:27,640
went with wind tail I've been looking at

863
00:40:27,640 --> 00:40:28,810
I was like I got to come up with

864
00:40:28,810 --> 00:40:30,490
something I can't think of like what's

865
00:40:30,490 --> 00:40:32,110
something that has maybe like a simple

866
00:40:32,110 --> 00:40:34,900
decryption or something or other you

867
00:40:34,900 --> 00:40:37,930
know most of the Mac Nellore it's it's a

868
00:40:37,930 --> 00:40:39,400
lot of shell scripts and stuff like

869
00:40:39,400 --> 00:40:41,140
actual mako's a lot of times aren't

870
00:40:41,140 --> 00:40:44,380
really doing a whole lot that's super

871
00:40:44,380 --> 00:40:46,480
interesting so if you're not the literal

872
00:40:46,480 --> 00:40:48,460
in detail some of you that are might

873
00:40:48,460 --> 00:40:50,950
admit us that this the things I mean

874
00:40:50,950 --> 00:40:53,620
earlier with the function that was

875
00:40:53,620 --> 00:40:58,140
actually the wind chill sample but

876
00:40:58,140 --> 00:41:02,080
basically atomic read from Dark Matter

877
00:41:02,080 --> 00:41:04,900
did a presentation on this back in last

878
00:41:04,900 --> 00:41:08,680
year packing the box Singapore did that

879
00:41:08,680 --> 00:41:10,570
was also on YouTube you can search for

880
00:41:10,570 --> 00:41:11,890
if you're more interested in this he

881
00:41:11,890 --> 00:41:13,840
goes into more detail about whole app on

882
00:41:13,840 --> 00:41:17,320
the apt campaign that was targeting

883
00:41:17,320 --> 00:41:18,910
released when things like that so if

884
00:41:18,910 --> 00:41:20,320
you're interested in that aspect of it

885
00:41:20,320 --> 00:41:22,140
but he goes into a lot of detail on

886
00:41:22,140 --> 00:41:25,060
these basically unique exploitation

887
00:41:25,060 --> 00:41:27,670
technique but leverage custom URL

888
00:41:27,670 --> 00:41:29,290
schemes which

889
00:41:29,290 --> 00:41:31,330
watcher actually burned out in his log

890
00:41:31,330 --> 00:41:34,260
that gets into a little bit more detail

891
00:41:34,260 --> 00:41:36,520
and I think I posted the link for that

892
00:41:36,520 --> 00:41:38,460
as well it creates a log in item

893
00:41:38,460 --> 00:41:40,720
typically for persistence there's a

894
00:41:40,720 --> 00:41:44,020
hard-coded a IES key so basically the

895
00:41:44,020 --> 00:41:46,090
strings are basically forward and headed

896
00:41:46,090 --> 00:41:48,790
and then ETS encrypted so we wanted to

897
00:41:48,790 --> 00:41:50,440
kind of to show that and then I just

898
00:41:50,440 --> 00:41:51,670
want to mention really quickly because

899
00:41:51,670 --> 00:41:53,110
this is part of rabbit hole that I went

900
00:41:53,110 --> 00:41:56,470
down with flair and wind tail and when I

901
00:41:56,470 --> 00:42:00,040
was looking to win tail I noticed that

902
00:42:00,040 --> 00:42:01,960
this bundle identifier which consumed

903
00:42:01,960 --> 00:42:04,060
all of these suspended identifier is the

904
00:42:04,060 --> 00:42:07,180
same as I dug up some some samples from

905
00:42:07,180 --> 00:42:10,150
back in 2014 that seem to be attributed

906
00:42:10,150 --> 00:42:11,920
to allow shoot malware

907
00:42:11,920 --> 00:42:13,510
and it's the same bundle identifier

908
00:42:13,510 --> 00:42:15,220
which I thought was interesting I still

909
00:42:15,220 --> 00:42:16,660
haven't had a chance to actually dig

910
00:42:16,660 --> 00:42:20,890
into that but then this open URL swing

911
00:42:20,890 --> 00:42:22,269
down here is actually part of that

912
00:42:22,269 --> 00:42:25,569
custom URL strip of custom URL scheme

913
00:42:25,569 --> 00:42:28,240
and it's actually shared with all of the

914
00:42:28,240 --> 00:42:30,760
samples that I've seen that are

915
00:42:30,760 --> 00:42:32,500
attributed to win tail so that's just

916
00:42:32,500 --> 00:42:36,220
quick intro to entail in general and the

917
00:42:36,220 --> 00:42:38,230
Josh didn't share something that's key

918
00:42:38,230 --> 00:42:40,720
sorry that's the blog but if you if you

919
00:42:40,720 --> 00:42:44,140
just google objective-c wind tail I

920
00:42:44,140 --> 00:42:46,180
think he's wrong it's the first she's

921
00:42:46,180 --> 00:42:48,309
all becomes awesome yeah and you can

922
00:42:48,309 --> 00:42:50,559
actually yeah you can get the sample

923
00:42:50,559 --> 00:42:52,450
from there so if you want to play around

924
00:42:52,450 --> 00:42:57,480
with this environment you totally can so

925
00:42:57,480 --> 00:42:59,829
I'm go ahead and close this little start

926
00:42:59,829 --> 00:43:06,220
brush can't do my brightness up okay

927
00:43:06,220 --> 00:43:10,089
well it's slightly dark but all right so

928
00:43:10,089 --> 00:43:23,529
braid up initially and so you'll see

929
00:43:23,529 --> 00:43:25,599
like there's just a bunch of functions

930
00:43:25,599 --> 00:43:30,099
nothing really makes any sense I mean we

931
00:43:30,099 --> 00:43:31,869
think kind of click on these and you'll

932
00:43:31,869 --> 00:43:34,440
see some subjective see my such things

933
00:43:34,440 --> 00:43:38,049
as well and there's like our you see

934
00:43:38,049 --> 00:43:41,289
things like that but if we go ahead and

935
00:43:41,289 --> 00:43:45,309
run the script you can see it just sent

936
00:43:45,309 --> 00:43:51,450
populating everything and then we can

937
00:43:51,450 --> 00:43:55,720
switch to the direct view and this you

938
00:43:55,720 --> 00:43:57,309
function is the interesting one because

939
00:43:57,309 --> 00:43:59,289
it has our ad esta Crips

940
00:43:59,289 --> 00:44:01,329
with pass race you'll notice those

941
00:44:01,329 --> 00:44:03,490
orange because they couldn't tell what

942
00:44:03,490 --> 00:44:07,900
the the type of party is but it's coming

943
00:44:07,900 --> 00:44:09,569
in here

944
00:44:09,569 --> 00:44:13,720
the another function I think that I

945
00:44:13,720 --> 00:44:16,809
figured out that this is actually a NS

946
00:44:16,809 --> 00:44:21,579
data pointer as soon as it knows the

947
00:44:21,579 --> 00:44:24,460
type they knows what the function is and

948
00:44:24,460 --> 00:44:25,890
you'll notice that there's

949
00:44:25,890 --> 00:44:28,990
excerpts here now that would not have

950
00:44:28,990 --> 00:44:30,610
been there previously and we're going to

951
00:44:30,610 --> 00:44:39,070
use those to actually we're going to use

952
00:44:39,070 --> 00:44:41,410
that to actually automate decrypting the

953
00:44:41,410 --> 00:44:46,090
AES strings by finding them so we're

954
00:44:46,090 --> 00:44:48,220
gonna go ahead and just kind of run it

955
00:44:48,220 --> 00:44:55,930
some that stuff it's gonna yeah so I'm

956
00:44:55,930 --> 00:44:58,240
gonna go ahead and open the file from

957
00:44:58,240 --> 00:45:01,780
the headless mode with binary ninja

958
00:45:01,780 --> 00:45:05,440
that's what the binary type is here me

959
00:45:05,440 --> 00:45:08,800
and I'm going to run the plug-in from

960
00:45:08,800 --> 00:45:11,770
the command line here and wait for that

961
00:45:11,770 --> 00:45:14,340
to finish just takes a couple seconds

962
00:45:14,340 --> 00:45:19,930
I'm sure they're okay and then a couple

963
00:45:19,930 --> 00:45:21,940
other things just to set up I'm gonna go

964
00:45:21,940 --> 00:45:23,860
ahead and get the type of the CF string

965
00:45:23,860 --> 00:45:25,240
and figure out where the offsets are for

966
00:45:25,240 --> 00:45:27,910
those and then set up a binary reader

967
00:45:27,910 --> 00:45:30,250
for that and then the buffer function is

968
00:45:30,250 --> 00:45:33,250
just a helper function that lets me read

969
00:45:33,250 --> 00:45:35,710
out the values that I need in order to

970
00:45:35,710 --> 00:45:38,260
figure out the whether or not it's

971
00:45:38,260 --> 00:45:40,150
Unicode whether or not it's where the

972
00:45:40,150 --> 00:45:41,740
buffer is what the link is and then

973
00:45:41,740 --> 00:45:44,290
actually read out the the buffer itself

974
00:45:44,290 --> 00:45:49,690
and return that so at that and then next

975
00:45:49,690 --> 00:45:52,330
up is a function that just decrypt the

976
00:45:52,330 --> 00:45:57,220
AES strings so I was having an issue and

977
00:45:57,220 --> 00:45:58,240
I think I could have done this with a

978
00:45:58,240 --> 00:46:01,300
transform in binary ninja but I was

979
00:46:01,300 --> 00:46:04,510
having issues with the the key not

980
00:46:04,510 --> 00:46:08,470
working and so I tried using my crypto

981
00:46:08,470 --> 00:46:10,210
instead and it was also having the same

982
00:46:10,210 --> 00:46:12,850
issue so it was not by hearing it but I

983
00:46:12,850 --> 00:46:14,100
just didn't have time to switch it back

984
00:46:14,100 --> 00:46:17,740
so we're going to say this function here

985
00:46:17,740 --> 00:46:21,540
is going to take the code wraps of the

986
00:46:21,540 --> 00:46:24,010
function that's actually calling the AES

987
00:46:24,010 --> 00:46:31,360
decrypt function and then figure out

988
00:46:31,360 --> 00:46:35,890
what the the key is I know I already

989
00:46:35,890 --> 00:46:39,140
tested a few this is going to take the

990
00:46:39,140 --> 00:46:43,759
the parameter that has the encrypted

991
00:46:43,759 --> 00:46:46,700
string and pulled that out of the

992
00:46:46,700 --> 00:46:49,279
function that's calling the function

993
00:46:49,279 --> 00:46:53,239
that calls ATS because it passes in it

994
00:46:53,239 --> 00:46:58,190
comes through you here is the one that

995
00:46:58,190 --> 00:47:00,470
calls the ATS decrypt string but then

996
00:47:00,470 --> 00:47:04,119
the function that calls you the yamen is

997
00:47:04,119 --> 00:47:06,730
the one that actually passes in these

998
00:47:06,730 --> 00:47:11,509
basics before encoded experience so

999
00:47:11,509 --> 00:47:13,640
that's what we're getting in decrypting

1000
00:47:13,640 --> 00:47:15,499
F students we're pulling the actual

1001
00:47:15,499 --> 00:47:18,380
encrypted string going ahead and taking

1002
00:47:18,380 --> 00:47:20,809
the key that we passed in base64

1003
00:47:20,809 --> 00:47:22,940
decoding it and then keep tricking it as

1004
00:47:22,940 --> 00:47:28,549
well and then finally we're taking

1005
00:47:28,549 --> 00:47:31,640
advantage of the plug-in here by using

1006
00:47:31,640 --> 00:47:36,619
get code reps to get the the cross

1007
00:47:36,619 --> 00:47:39,980
references for the function by passing

1008
00:47:39,980 --> 00:47:41,660
in its address rather than having to

1009
00:47:41,660 --> 00:47:43,640
like parse the structures and figure out

1010
00:47:43,640 --> 00:47:46,099
where it's selector is and which one it

1011
00:47:46,099 --> 00:47:49,039
is and then getting the programs for

1012
00:47:49,039 --> 00:47:51,200
that so this makes it a little bit

1013
00:47:51,200 --> 00:47:53,180
easier for you to figure out like what's

1014
00:47:53,180 --> 00:47:55,430
actually going on with this code and

1015
00:47:55,430 --> 00:47:57,230
from there we're just getting a medium

1016
00:47:57,230 --> 00:48:00,619
level il we're then going to figure out

1017
00:48:00,619 --> 00:48:05,559
what the caller is by getting the second

1018
00:48:05,559 --> 00:48:11,319
or the third parameter for the key and

1019
00:48:11,319 --> 00:48:16,759
then we take that we pass it into the

1020
00:48:16,759 --> 00:48:18,499
pointer for that tend to get buffer

1021
00:48:18,499 --> 00:48:20,509
which then does one of that stuff

1022
00:48:20,509 --> 00:48:22,930
earlier reading the CF string and

1023
00:48:22,930 --> 00:48:27,170
parsing that out and then I commented

1024
00:48:27,170 --> 00:48:28,930
here because I want to be transparent

1025
00:48:28,930 --> 00:48:37,180
they any ABS side decrypt the passphrase

1026
00:48:42,700 --> 00:48:47,090
um in ASD could pass race they actually

1027
00:48:47,090 --> 00:48:52,190
take the utf-16 string and pass it to

1028
00:48:52,190 --> 00:48:55,130
utf-8 string which then encodes it in

1029
00:48:55,130 --> 00:49:00,110
utf-8 Wow for some reason Python will

1030
00:49:00,110 --> 00:49:04,970
not encode the utf-16 string in utf-8

1031
00:49:04,970 --> 00:49:07,160
the same way that's the Objective C

1032
00:49:07,160 --> 00:49:09,200
apparently encoder which is really

1033
00:49:09,200 --> 00:49:10,730
strange and I could not figure out what

1034
00:49:10,730 --> 00:49:13,070
was happening and so I ended up just

1035
00:49:13,070 --> 00:49:17,990
taking it from a debug version of the

1036
00:49:17,990 --> 00:49:20,450
binary after accidentally infecting

1037
00:49:20,450 --> 00:49:25,130
myself like six times and planning out

1038
00:49:25,130 --> 00:49:27,080
at span just went ahead and put it here

1039
00:49:27,080 --> 00:49:30,890
because the code the key is hard-coded

1040
00:49:30,890 --> 00:49:33,650
this is why he didn't a malware endless

1041
00:49:33,650 --> 00:49:35,510
to say yes this is where the login item

1042
00:49:35,510 --> 00:49:38,390
is and yeah yeah she she knew where to

1043
00:49:38,390 --> 00:49:40,190
actually remove it so I was able to like

1044
00:49:40,190 --> 00:49:42,200
remove it every single time but yeah

1045
00:49:42,200 --> 00:49:44,210
fortunately it wasn't too too

1046
00:49:44,210 --> 00:49:47,060
complicated and then we go ahead and

1047
00:49:47,060 --> 00:49:48,500
take that they're cheeky passes in to

1048
00:49:48,500 --> 00:49:53,960
decrypt AF strings and you can see we

1049
00:49:53,960 --> 00:50:00,050
now have a bunch of decrypted URLs and

1050
00:50:00,050 --> 00:50:04,090
other things that they use in the

1051
00:50:04,090 --> 00:50:07,090
environment

1052
00:50:12,310 --> 00:50:14,560
[Music]

1053
00:50:14,560 --> 00:50:23,050
I know yeah awesome talk I'm like Hawaii

1054
00:50:23,050 --> 00:50:26,310
I wish I had this going is doing some

1055
00:50:26,310 --> 00:50:28,870
really awesome so we have time for two

1056
00:50:28,870 --> 00:50:30,700
questions and then some final

1057
00:50:30,700 --> 00:50:32,470
announcements and then we will be done

1058
00:50:32,470 --> 00:50:32,860
for today

1059
00:50:32,860 --> 00:50:37,990
stop any questions for Erica or Josh I'm

1060
00:50:37,990 --> 00:50:42,400
sure they'll also be a party see ya and

1061
00:50:42,400 --> 00:50:46,150
last pitch is that I stream on Tuesdays

1062
00:50:46,150 --> 00:50:49,480
and Thursdays playing it's a show called

1063
00:50:49,480 --> 00:50:51,910
pecking around with my hairy ninja and I

1064
00:50:51,910 --> 00:50:53,320
literally just occur around the fire

1065
00:50:53,320 --> 00:50:55,330
ninja and right tools I'm currently

1066
00:50:55,330 --> 00:50:57,630
writing my decompiler so if you're ever

1067
00:50:57,630 --> 00:50:59,860
bored and want something to watch on

1068
00:50:59,860 --> 00:51:02,260
Tuesdays and Thursdays 3:00 p.m. Pacific

1069
00:51:02,260 --> 00:51:04,630
time also I meant to put up your your

1070
00:51:04,630 --> 00:51:06,640
github but it's that it codes up on

1071
00:51:06,640 --> 00:51:08,410
getting up a trail but skip nothing oh

1072
00:51:08,410 --> 00:51:09,340
yeah I like it

1073
00:51:09,340 --> 00:51:12,820
earlier oh right yeah oh yeah it's a

1074
00:51:12,820 --> 00:51:15,130
decade see graph you on those

1075
00:51:15,130 --> 00:51:16,900
tourniquets yet and I'll make that

1076
00:51:16,900 --> 00:51:20,070
public in just a couple minutes

