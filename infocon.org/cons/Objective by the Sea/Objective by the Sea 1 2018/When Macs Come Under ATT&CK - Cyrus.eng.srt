1
00:00:00,070 --> 00:00:02,330
[Music]

2
00:00:02,330 --> 00:00:06,060
Aloha I hope you all enjoyed lunch we're

3
00:00:06,060 --> 00:00:09,300
going to get started right now our next

4
00:00:09,300 --> 00:00:12,780
speaker Richie I'm gonna bring him up

5
00:00:12,780 --> 00:00:16,680
front Richie is a senior threat hunter

6
00:00:16,680 --> 00:00:19,949
at Specter ops and before that he worked

7
00:00:19,949 --> 00:00:22,050
at Apple so he actually really knows

8
00:00:22,050 --> 00:00:24,180
what he's talking about so we're super

9
00:00:24,180 --> 00:00:26,220
super stoked to have him talking so

10
00:00:26,220 --> 00:00:27,630
let's give a round of applause for

11
00:00:27,630 --> 00:00:43,770
Richie all right thanks for coming out

12
00:00:43,770 --> 00:00:45,899
welcome to my talk when max come under

13
00:00:45,899 --> 00:00:49,230
attack Mahalo to Patrick and Andy for

14
00:00:49,230 --> 00:00:51,270
throwing this event this is awesome I'm

15
00:00:51,270 --> 00:00:53,180
happy to be a part of it

16
00:00:53,180 --> 00:00:55,199
like Patrick said my name is Richie

17
00:00:55,199 --> 00:00:57,329
Cyrus I work for Spectre ops on the

18
00:00:57,329 --> 00:01:00,059
adversary detection team and so I'm a

19
00:01:00,059 --> 00:01:01,920
fan of most things network security

20
00:01:01,920 --> 00:01:04,170
monitoring also Incident Response and

21
00:01:04,170 --> 00:01:06,450
anything related to Apple besides doing

22
00:01:06,450 --> 00:01:08,670
Apple instant response and forensics

23
00:01:08,670 --> 00:01:10,680
like I'm a big like an Apple fanboy so

24
00:01:10,680 --> 00:01:12,540
anytime the products come out go iPad

25
00:01:12,540 --> 00:01:16,290
pro and new MacBook Air I'm like all in

26
00:01:16,290 --> 00:01:18,840
on those also our blog security never

27
00:01:18,840 --> 00:01:22,650
sleeps net and so I got I cut a lot of

28
00:01:22,650 --> 00:01:24,570
my teeth doing the Apple instant

29
00:01:24,570 --> 00:01:26,280
response and detection while I was at

30
00:01:26,280 --> 00:01:28,770
Apple and so while I was at Apple I got

31
00:01:28,770 --> 00:01:30,420
introduced to a lot of problem sets

32
00:01:30,420 --> 00:01:33,689
around insulin response and detection as

33
00:01:33,689 --> 00:01:36,869
far as Mac's go especially at scale and

34
00:01:36,869 --> 00:01:40,170
so a lot of this talk will be about how

35
00:01:40,170 --> 00:01:42,000
to do those things at scale and then

36
00:01:42,000 --> 00:01:44,159
also from other hunting's perspective

37
00:01:44,159 --> 00:01:46,979
and so this is a little bit about the

38
00:01:46,979 --> 00:01:49,049
outline of the talk so I'll go into the

39
00:01:49,049 --> 00:01:51,960
need for Mac OS tear hunting also what

40
00:01:51,960 --> 00:01:54,149
the Mac OS threat landscape attack

41
00:01:54,149 --> 00:01:56,640
landscape looks like today also the hunt

42
00:01:56,640 --> 00:01:59,310
methodology about how how how to go

43
00:01:59,310 --> 00:02:01,259
about hunting for malicious things on

44
00:02:01,259 --> 00:02:03,299
Mac OS systems and then some of the

45
00:02:03,299 --> 00:02:05,909
adversary techniques and detections that

46
00:02:05,909 --> 00:02:07,469
you could build around those techniques

47
00:02:07,469 --> 00:02:10,258
and tactics and then also threat hunting

48
00:02:10,258 --> 00:02:12,569
demo so there'll be an attack

49
00:02:12,569 --> 00:02:14,819
going on and then as threat hunters

50
00:02:14,819 --> 00:02:17,099
we'll see how to go about and collect

51
00:02:17,099 --> 00:02:19,049
some of the data and then also analyze

52
00:02:19,049 --> 00:02:21,989
that data to proactively find some some

53
00:02:21,989 --> 00:02:27,290
threats that occurred alright so back in

54
00:02:27,290 --> 00:02:30,150
2007 Apple ran a series of commercials

55
00:02:30,150 --> 00:02:33,420
the PC versus the Mac and so the PC guy

56
00:02:33,420 --> 00:02:35,639
is the guy in the suit of the Mac guy

57
00:02:35,639 --> 00:02:38,519
with the cool hoodie on and right now

58
00:02:38,519 --> 00:02:40,349
he's taking care of the the PC guys

59
00:02:40,349 --> 00:02:43,230
because well PCs have over a hundred

60
00:02:43,230 --> 00:02:45,060
thousand viruses and max don't get

61
00:02:45,060 --> 00:02:48,090
viruses and we all know today that this

62
00:02:48,090 --> 00:02:51,840
is not the case but although the Mac

63
00:02:51,840 --> 00:02:53,989
viruses back then weren't as prevalent

64
00:02:53,989 --> 00:02:57,449
back in 2006 you had things such as the

65
00:02:57,449 --> 00:02:59,699
leap worm where there was evidence that

66
00:02:59,699 --> 00:03:01,919
hey like Mac's weren't you know fully

67
00:03:01,919 --> 00:03:04,620
immune to malicious software or malware

68
00:03:04,620 --> 00:03:08,250
as we call it today and so this takes us

69
00:03:08,250 --> 00:03:11,010
to modern day where the amount of Mac's

70
00:03:11,010 --> 00:03:13,650
that we see in the enterprise space at

71
00:03:13,650 --> 00:03:16,139
home with a lot of users are continuing

72
00:03:16,139 --> 00:03:19,500
to grow so as the market share for Mac's

73
00:03:19,500 --> 00:03:21,599
continue to increase then attackers

74
00:03:21,599 --> 00:03:24,049
become more interested in the mac OS

75
00:03:24,049 --> 00:03:27,299
platform right and so by virtue of that

76
00:03:27,299 --> 00:03:29,459
you'll start to see more attacks so now

77
00:03:29,459 --> 00:03:31,829
malware authors are more interesting and

78
00:03:31,829 --> 00:03:33,509
targeting the user base uses people who

79
00:03:33,509 --> 00:03:36,750
are using Mac OS systems and so you have

80
00:03:36,750 --> 00:03:39,449
folks like nation-states apt groups that

81
00:03:39,449 --> 00:03:41,040
are now are interested so you have

82
00:03:41,040 --> 00:03:43,919
malware X agent that was used by a PT 28

83
00:03:43,919 --> 00:03:46,139
and then also ocean Lotus that was used

84
00:03:46,139 --> 00:03:49,229
by a PT 32 and so that's the sign of the

85
00:03:49,229 --> 00:03:50,970
times to come we're used to just have

86
00:03:50,970 --> 00:03:52,650
like a lot of crime rare and adware

87
00:03:52,650 --> 00:03:54,419
stuff going on at Mac's but now you

88
00:03:54,419 --> 00:03:56,549
start to see nation-states actually be

89
00:03:56,549 --> 00:03:58,349
interested and create some some malware

90
00:03:58,349 --> 00:04:01,169
custom malware to attack some of the

91
00:04:01,169 --> 00:04:04,099
groups that they are interested in it

92
00:04:04,099 --> 00:04:07,530
all right so what's the landscape for

93
00:04:07,530 --> 00:04:11,459
today as far as Mac OS attacks so before

94
00:04:11,459 --> 00:04:13,259
we go into threat hunting and how to do

95
00:04:13,259 --> 00:04:14,699
that we have to understand the attack

96
00:04:14,699 --> 00:04:16,589
landscape of today so how are Mac's

97
00:04:16,589 --> 00:04:18,930
getting compromised well there's a few

98
00:04:18,930 --> 00:04:21,690
ways and this is kind of unique to mac

99
00:04:21,690 --> 00:04:23,639
OS it doesn't really happen too much in

100
00:04:23,639 --> 00:04:25,020
the windows world but supply-chain

101
00:04:25,020 --> 00:04:26,170
compromises

102
00:04:26,170 --> 00:04:28,060
has been pretty prevalent over the last

103
00:04:28,060 --> 00:04:30,760
couple years in this instance here I

104
00:04:30,760 --> 00:04:34,390
show handbrake so the handbrake tool the

105
00:04:34,390 --> 00:04:35,830
download mirror for that tool was

106
00:04:35,830 --> 00:04:38,200
actually compromised and so when folks

107
00:04:38,200 --> 00:04:40,330
would go to download what they thought

108
00:04:40,330 --> 00:04:42,040
was the original handbrake the safe

109
00:04:42,040 --> 00:04:44,800
handbrake they would install a malicious

110
00:04:44,800 --> 00:04:47,670
version that contained a variant of the

111
00:04:47,670 --> 00:04:51,700
proton malware for OSX and so I also

112
00:04:51,700 --> 00:04:54,910
have here listed Mac OS macros for a

113
00:04:54,910 --> 00:04:58,330
word so you know this PDFs is Word

114
00:04:58,330 --> 00:05:01,510
documents Excel spreadsheets with macros

115
00:05:01,510 --> 00:05:03,520
enables PDF for like JavaScript which is

116
00:05:03,520 --> 00:05:05,920
allowed to execute to run so a lot of

117
00:05:05,920 --> 00:05:08,910
attackers are still using documents to

118
00:05:08,910 --> 00:05:11,440
transport their malicious code onto

119
00:05:11,440 --> 00:05:14,500
systems and then of course I mean all of

120
00:05:14,500 --> 00:05:16,390
us in the room at least has one family

121
00:05:16,390 --> 00:05:19,630
member who was surf the net using a Mac

122
00:05:19,630 --> 00:05:22,350
and they come across Adobe Flash and

123
00:05:22,350 --> 00:05:25,330
installer for Adobe Flash it's a hundred

124
00:05:25,330 --> 00:05:27,340
percent most of the time never Adobe

125
00:05:27,340 --> 00:05:29,260
Flash so that's still one of the things

126
00:05:29,260 --> 00:05:31,420
one of the ways that attackers are able

127
00:05:31,420 --> 00:05:32,830
to get onto systems and that's more of

128
00:05:32,830 --> 00:05:34,990
the adware kind of crime wear side of

129
00:05:34,990 --> 00:05:37,500
the house and so now we'll get into

130
00:05:37,500 --> 00:05:41,740
defining threat hunting and so just the

131
00:05:41,740 --> 00:05:44,230
level said about what we mean when we

132
00:05:44,230 --> 00:05:46,180
say threat hunting because if depending

133
00:05:46,180 --> 00:05:47,980
on what vertical you're in some of the

134
00:05:47,980 --> 00:05:50,740
folks who do instant response consulting

135
00:05:50,740 --> 00:05:52,690
they're paired so some folks who are in

136
00:05:52,690 --> 00:05:54,520
an enterprise environment hunting might

137
00:05:54,520 --> 00:05:57,070
mean two different things so in the

138
00:05:57,070 --> 00:05:58,390
concept that I'm talking about threat

139
00:05:58,390 --> 00:05:59,950
hunting in this fashion for this

140
00:05:59,950 --> 00:06:02,050
presentation it's actively searching for

141
00:06:02,050 --> 00:06:05,100
malicious activity that has evaded

142
00:06:05,100 --> 00:06:08,440
defenses in place and so you have your

143
00:06:08,440 --> 00:06:11,080
IDs sitting on your network you have the

144
00:06:11,080 --> 00:06:14,740
firewall in a place you have a V in you

145
00:06:14,740 --> 00:06:16,990
know today's day and world and time and

146
00:06:16,990 --> 00:06:19,660
age those things you need those things

147
00:06:19,660 --> 00:06:21,010
you especially in a corporate

148
00:06:21,010 --> 00:06:22,810
environment but you have to now know

149
00:06:22,810 --> 00:06:24,430
that attackers are aware that those

150
00:06:24,430 --> 00:06:27,370
things exist and then also ways to

151
00:06:27,370 --> 00:06:29,620
bypass those things to carry out the

152
00:06:29,620 --> 00:06:32,140
rest of their operations and so

153
00:06:32,140 --> 00:06:34,090
attackers know what's there especially

154
00:06:34,090 --> 00:06:35,950
on your network and they will actively

155
00:06:35,950 --> 00:06:38,470
attempt to evade those controls so this

156
00:06:38,470 --> 00:06:39,249
is more

157
00:06:39,249 --> 00:06:40,989
purity guard actually walking around the

158
00:06:40,989 --> 00:06:42,459
building and monitoring for certain

159
00:06:42,459 --> 00:06:43,929
things as opposed to like sitting back

160
00:06:43,929 --> 00:06:46,839
at the desk and watching like CC TV and

161
00:06:46,839 --> 00:06:48,969
trying to find out what what things are

162
00:06:48,969 --> 00:06:51,669
going on around premises and so we'll go

163
00:06:51,669 --> 00:06:55,749
into why do we hunt and so we hunt

164
00:06:55,749 --> 00:06:57,459
because with enough time enough

165
00:06:57,459 --> 00:06:59,709
resources and effort attackers will get

166
00:06:59,709 --> 00:07:02,439
in there time is unlimited right and

167
00:07:02,439 --> 00:07:04,389
sometimes their resources are unlimited

168
00:07:04,389 --> 00:07:06,189
as well so you have to assume breach

169
00:07:06,189 --> 00:07:08,439
right and so the masu does soon breach

170
00:07:08,439 --> 00:07:09,789
mentality is something that has been

171
00:07:09,789 --> 00:07:12,069
used for quite some time now especially

172
00:07:12,069 --> 00:07:14,110
in the last four to five years where you

173
00:07:14,110 --> 00:07:16,659
can no longer rely on just the defenses

174
00:07:16,659 --> 00:07:18,459
you have in place to hold you up and

175
00:07:18,459 --> 00:07:20,709
keep you away from all attacks right and

176
00:07:20,709 --> 00:07:24,279
so the mindset used to be you know once

177
00:07:24,279 --> 00:07:27,069
attackers get in once it's game over for

178
00:07:27,069 --> 00:07:29,439
the defender and so my colleague Matt

179
00:07:29,439 --> 00:07:32,199
graver aspect the ROPS introduced a

180
00:07:32,199 --> 00:07:34,439
mindset where if you start to embrace

181
00:07:34,439 --> 00:07:37,329
assume breach then you introduced

182
00:07:37,329 --> 00:07:39,249
attackers dilemma into the equation

183
00:07:39,249 --> 00:07:41,649
right and so the attackers dilemma being

184
00:07:41,649 --> 00:07:44,069
just switching that around an attacker

185
00:07:44,069 --> 00:07:46,779
has to just trip one of the detection x'

186
00:07:46,779 --> 00:07:49,449
that you built as an analyst in order to

187
00:07:49,449 --> 00:07:51,759
kick off the ir process and then now

188
00:07:51,759 --> 00:07:54,549
you're you're you know you're well in

189
00:07:54,549 --> 00:07:56,079
the fight to actually get them off the

190
00:07:56,079 --> 00:07:59,139
network and so also Michael Hayden from

191
00:07:59,139 --> 00:08:02,169
the NSA and CIA former he said

192
00:08:02,169 --> 00:08:03,669
fundamentally if someone wants to get in

193
00:08:03,669 --> 00:08:05,289
there getting in you have to accept that

194
00:08:05,289 --> 00:08:07,389
you're in the fight whether you thought

195
00:08:07,389 --> 00:08:09,369
you weren't or not and then you're most

196
00:08:09,369 --> 00:08:11,110
certainly penetrated right and so this

197
00:08:11,110 --> 00:08:12,789
is a good premise of like why we

198
00:08:12,789 --> 00:08:14,769
actually have to do threat hunting and

199
00:08:14,769 --> 00:08:17,589
so with that it was like okay well

200
00:08:17,589 --> 00:08:20,699
threat hunting primarily focuses on

201
00:08:20,699 --> 00:08:23,409
detecting activity after an attack

202
00:08:23,409 --> 00:08:25,299
happened because you're assuming that a

203
00:08:25,299 --> 00:08:27,099
breach has already occurred right and so

204
00:08:27,099 --> 00:08:29,379
how can we go about detecting attack

205
00:08:29,379 --> 00:08:31,929
there's activities and behaviors post

206
00:08:31,929 --> 00:08:33,909
compromised right so it would be great

207
00:08:33,909 --> 00:08:36,789
if we had a repository of all tactics

208
00:08:36,789 --> 00:08:38,620
and techniques that attackers could use

209
00:08:38,620 --> 00:08:40,719
post compromised and start to build some

210
00:08:40,719 --> 00:08:42,698
of our detects turns around that well

211
00:08:42,698 --> 00:08:44,559
lucky for us that's where my tower

212
00:08:44,559 --> 00:08:47,439
attack comes into play so minor attack

213
00:08:47,439 --> 00:08:49,149
is a framework for describing the

214
00:08:49,149 --> 00:08:51,429
behavior of cyber adversaries across the

215
00:08:51,429 --> 00:08:52,990
intrusion lifecycle

216
00:08:52,990 --> 00:08:55,390
the majority of the framework is based

217
00:08:55,390 --> 00:08:57,430
around post compromised tactics and

218
00:08:57,430 --> 00:08:59,680
techniques and so it's pretty convenient

219
00:08:59,680 --> 00:09:01,149
to answer some of the questions and

220
00:09:01,149 --> 00:09:04,120
build out detection z' for you know your

221
00:09:04,120 --> 00:09:07,120
ir team and so documented in the

222
00:09:07,120 --> 00:09:09,310
framework our tactics used by attackers

223
00:09:09,310 --> 00:09:11,529
to carry out operations so that's some

224
00:09:11,529 --> 00:09:13,990
of the things like exfiltration that's

225
00:09:13,990 --> 00:09:15,310
some of the things like persistence

226
00:09:15,310 --> 00:09:17,290
privilege escalation and we'll get into

227
00:09:17,290 --> 00:09:19,630
some of those and then it also includes

228
00:09:19,630 --> 00:09:23,020
not only for Mac OS but also Windows and

229
00:09:23,020 --> 00:09:25,390
for Linux so you could use this across

230
00:09:25,390 --> 00:09:29,290
all of your OS platforms and so how can

231
00:09:29,290 --> 00:09:31,959
we utilize this framework to start to do

232
00:09:31,959 --> 00:09:36,670
drafting well the methodology that we

233
00:09:36,670 --> 00:09:39,279
subscribe to at the specter ops is to

234
00:09:39,279 --> 00:09:41,560
first identify the tactic and technique

235
00:09:41,560 --> 00:09:43,450
that you want to use so going back to

236
00:09:43,450 --> 00:09:45,040
miter attack actually pulling something

237
00:09:45,040 --> 00:09:47,470
out maybe using persistence and then

238
00:09:47,470 --> 00:09:50,200
going in and maybe looking at bash

239
00:09:50,200 --> 00:09:53,170
profile and bash RC and understanding

240
00:09:53,170 --> 00:09:55,870
that technique so going in and say okay

241
00:09:55,870 --> 00:09:57,400
we want persistence as a tactic and

242
00:09:57,400 --> 00:10:00,060
technique we want bash RC or bash for

243
00:10:00,060 --> 00:10:01,810
persistence and then actually

244
00:10:01,810 --> 00:10:03,490
identifying the procedures that were

245
00:10:03,490 --> 00:10:05,650
used so these are the steps that were

246
00:10:05,650 --> 00:10:07,930
taking to actually produce that output

247
00:10:07,930 --> 00:10:09,520
so that could be done a number of

248
00:10:09,520 --> 00:10:11,680
different ways on the windows side you

249
00:10:11,680 --> 00:10:12,910
could do it to you know maybe like

250
00:10:12,910 --> 00:10:15,310
command line from cmd.exe

251
00:10:15,310 --> 00:10:16,570
or you could do it through PowerShell

252
00:10:16,570 --> 00:10:18,279
right for Mac OS you could do something

253
00:10:18,279 --> 00:10:20,440
custom built in a Mac go binary or you

254
00:10:20,440 --> 00:10:22,660
could do it via terminal and the

255
00:10:22,660 --> 00:10:25,150
terminal prompt right and so the next

256
00:10:25,150 --> 00:10:27,339
thing after we identify the tactic and

257
00:10:27,339 --> 00:10:29,140
technique and then the procedures we

258
00:10:29,140 --> 00:10:31,300
would go into identifying the collection

259
00:10:31,300 --> 00:10:33,010
requirements around that tactic and

260
00:10:33,010 --> 00:10:35,560
technique and then next identifying the

261
00:10:35,560 --> 00:10:38,410
scope so the scope being how long we

262
00:10:38,410 --> 00:10:40,959
want to actually look for this activity

263
00:10:40,959 --> 00:10:43,060
on the network and then also like what

264
00:10:43,060 --> 00:10:45,610
groups of computers do we want to start

265
00:10:45,610 --> 00:10:47,589
to hunt against right so it's just all

266
00:10:47,589 --> 00:10:49,270
of your enterprise is this only your

267
00:10:49,270 --> 00:10:51,430
executives is only your security team

268
00:10:51,430 --> 00:10:52,350
that has Macs

269
00:10:52,350 --> 00:10:54,220
these are some of the things that you

270
00:10:54,220 --> 00:10:56,140
lay out in this in the scope and then

271
00:10:56,140 --> 00:10:58,360
from there you document your excluded

272
00:10:58,360 --> 00:11:01,570
factors and so Palantir has also named

273
00:11:01,570 --> 00:11:03,670
work as the alerting and detection and

274
00:11:03,670 --> 00:11:06,310
strategy framework and so with that you

275
00:11:06,310 --> 00:11:06,610
can

276
00:11:06,610 --> 00:11:08,709
so document some of those excluded

277
00:11:08,709 --> 00:11:11,019
factors some of the blind spots from the

278
00:11:11,019 --> 00:11:12,970
detection that you have based on either

279
00:11:12,970 --> 00:11:16,750
a lack of analysts like skillset whether

280
00:11:16,750 --> 00:11:19,570
it be a lack of like some gaps in your

281
00:11:19,570 --> 00:11:21,070
data maybe you're not able to collect

282
00:11:21,070 --> 00:11:23,170
certain data needed to actually build

283
00:11:23,170 --> 00:11:25,060
out a detection and so those sort of

284
00:11:25,060 --> 00:11:26,829
things will go into the excluded factors

285
00:11:26,829 --> 00:11:28,750
and some some of those gaps will lead

286
00:11:28,750 --> 00:11:31,750
into the next hunt that you perform and

287
00:11:31,750 --> 00:11:34,450
so when you start to do this hunt

288
00:11:34,450 --> 00:11:36,550
methodology over time you start to

289
00:11:36,550 --> 00:11:39,370
create a minefield for attackers and so

290
00:11:39,370 --> 00:11:43,029
now an attacker has to be careful not to

291
00:11:43,029 --> 00:11:46,480
trip one of these techniques and if they

292
00:11:46,480 --> 00:11:48,730
do then the I our process kicks off

293
00:11:48,730 --> 00:11:51,850
right and so this is different than if

294
00:11:51,850 --> 00:11:53,860
you were to just build a wall for just

295
00:11:53,860 --> 00:11:56,620
one tactic so if you just did execution

296
00:11:56,620 --> 00:11:58,600
and you build that whole wall out well

297
00:11:58,600 --> 00:12:00,430
then you're operating under assumption

298
00:12:00,430 --> 00:12:02,170
that an attacker can't come up with a

299
00:12:02,170 --> 00:12:05,230
new execution technique and so you would

300
00:12:05,230 --> 00:12:06,700
be completely blind to whatever they do

301
00:12:06,700 --> 00:12:08,709
after that right and so it was good to

302
00:12:08,709 --> 00:12:10,720
build out your detection across numerous

303
00:12:10,720 --> 00:12:14,589
tactics and so in order to start to

304
00:12:14,589 --> 00:12:16,390
create this minefield you out you have

305
00:12:16,390 --> 00:12:18,760
to look into the data right what data

306
00:12:18,760 --> 00:12:20,560
gives you the best opportunity to create

307
00:12:20,560 --> 00:12:22,660
this minefield and so with that might

308
00:12:22,660 --> 00:12:24,220
attack has a section which a lot of

309
00:12:24,220 --> 00:12:26,350
people don't really focus on but it is

310
00:12:26,350 --> 00:12:28,779
the data sources section and so with

311
00:12:28,779 --> 00:12:32,230
bash profile and bash rc2 may maintain

312
00:12:32,230 --> 00:12:34,570
persistence on a system you can see here

313
00:12:34,570 --> 00:12:36,670
that there's a data sources section and

314
00:12:36,670 --> 00:12:38,680
within that data sources section you see

315
00:12:38,680 --> 00:12:40,750
file monitoring process monitoring

316
00:12:40,750 --> 00:12:43,089
process command line parameters and

317
00:12:43,089 --> 00:12:45,490
process use of network so see some these

318
00:12:45,490 --> 00:12:46,870
are some of the data sources you would

319
00:12:46,870 --> 00:12:49,930
need in order to build that detection to

320
00:12:49,930 --> 00:12:53,730
detect bash RC or - who's being used to

321
00:12:53,730 --> 00:12:57,370
maintain persistence right and so one of

322
00:12:57,370 --> 00:12:58,810
the things that I did using the mitre

323
00:12:58,810 --> 00:13:00,760
attack framework was actually to collect

324
00:13:00,760 --> 00:13:03,640
some of the top mac OS data sources that

325
00:13:03,640 --> 00:13:05,860
will give you the best chance to cover

326
00:13:05,860 --> 00:13:09,100
as many techniques as far as that that

327
00:13:09,100 --> 00:13:11,170
matrix goes that we saw earlier right so

328
00:13:11,170 --> 00:13:13,899
put in as many bombs as possible so the

329
00:13:13,899 --> 00:13:15,819
attackers will trip over at least one of

330
00:13:15,819 --> 00:13:17,089
those right

331
00:13:17,089 --> 00:13:19,519
so the top four were process monitoring

332
00:13:19,519 --> 00:13:22,039
file monitoring process command line and

333
00:13:22,039 --> 00:13:25,699
process use of network and so I'll go

334
00:13:25,699 --> 00:13:28,039
into some of the tools now open source

335
00:13:28,039 --> 00:13:29,479
tools that can be used to actually

336
00:13:29,479 --> 00:13:32,239
collect some of this data that you could

337
00:13:32,239 --> 00:13:34,969
use for detection and so one tool is

338
00:13:34,969 --> 00:13:37,339
Google Santa and so Google Santa was

339
00:13:37,339 --> 00:13:40,399
developed by the operations team on

340
00:13:40,399 --> 00:13:43,549
Google side and so it's for the purpose

341
00:13:43,549 --> 00:13:45,619
of binary whitelisting or blacklisting

342
00:13:45,619 --> 00:13:47,779
but on top of that it also has a binary

343
00:13:47,779 --> 00:13:50,269
whitelist vitamin on top of that it also

344
00:13:50,269 --> 00:13:53,149
has a like process execution process

345
00:13:53,149 --> 00:13:54,859
monitoring it does application

346
00:13:54,859 --> 00:13:57,079
whitelisting blacklisting and you can

347
00:13:57,079 --> 00:13:59,419
install it as our kernel extension so

348
00:13:59,419 --> 00:14:01,579
that covers the data set of process

349
00:14:01,579 --> 00:14:05,239
monitoring also there's x newman that

350
00:14:05,239 --> 00:14:07,339
was created by daniel Roethlisberger and

351
00:14:07,339 --> 00:14:09,739
is supposed to mimic sis Mon for Windows

352
00:14:09,739 --> 00:14:12,679
but only for the Mac OS side so that

353
00:14:12,679 --> 00:14:14,269
provides us with process monitoring

354
00:14:14,269 --> 00:14:16,339
what's cool about this is that it gives

355
00:14:16,339 --> 00:14:20,389
you child and parent relationships and

356
00:14:20,389 --> 00:14:22,249
as far as that goes and then also it

357
00:14:22,249 --> 00:14:24,169
takes it a step further where you can

358
00:14:24,169 --> 00:14:27,889
actually trace the child the parent from

359
00:14:27,889 --> 00:14:30,499
a child all the way back down to launch

360
00:14:30,499 --> 00:14:33,469
D which is the initial binary to execute

361
00:14:33,469 --> 00:14:34,909
the initial process that executes on a

362
00:14:34,909 --> 00:14:37,879
system and user land right and so that's

363
00:14:37,879 --> 00:14:39,729
pretty cool to see and then also

364
00:14:39,729 --> 00:14:43,309
command-line parameters and so this also

365
00:14:43,309 --> 00:14:45,019
tracks the use of processes

366
00:14:45,019 --> 00:14:48,109
accessing other processes use using sis

367
00:14:48,109 --> 00:14:50,089
called little sis calls like tasks or

368
00:14:50,089 --> 00:14:52,129
hid or which is important and then also

369
00:14:52,129 --> 00:14:54,619
tracks when a process actually adds or

370
00:14:54,619 --> 00:14:57,019
modifies a launch daemon or launch agent

371
00:14:57,019 --> 00:15:00,349
so that's beneficial to us too so in the

372
00:15:00,349 --> 00:15:02,479
future that tool will have full support

373
00:15:02,479 --> 00:15:05,119
for network connections as well and then

374
00:15:05,119 --> 00:15:06,949
also many in the folks in the room are

375
00:15:06,949 --> 00:15:08,209
probably familiar with OS query

376
00:15:08,209 --> 00:15:10,579
especially on the Mac side and that's

377
00:15:10,579 --> 00:15:12,739
been created by the team at Facebook and

378
00:15:12,739 --> 00:15:15,739
so it could be used for file integrity

379
00:15:15,739 --> 00:15:18,229
monitoring schedule queries especially

380
00:15:18,229 --> 00:15:20,989
enterprise sweeps so it's good for point

381
00:15:20,989 --> 00:15:23,479
in time so you want to build a query

382
00:15:23,479 --> 00:15:25,970
based on the tables that it provides and

383
00:15:25,970 --> 00:15:28,069
kind of like a SQL format and so you

384
00:15:28,069 --> 00:15:29,569
would create your query and then you

385
00:15:29,569 --> 00:15:29,980
were

386
00:15:29,980 --> 00:15:32,800
that query at a set interval over you

387
00:15:32,800 --> 00:15:34,900
know maybe like every eight hours every

388
00:15:34,900 --> 00:15:38,560
day every week right and so built-in

389
00:15:38,560 --> 00:15:40,720
within that too you can also scan for do

390
00:15:40,720 --> 00:15:42,550
some yard scanning and then it also has

391
00:15:42,550 --> 00:15:44,890
the ability to do process monitoring

392
00:15:44,890 --> 00:15:47,170
it's not the best way to do process

393
00:15:47,170 --> 00:15:49,000
monitoring especially because of the

394
00:15:49,000 --> 00:15:51,520
piggy backs off of Auto D for Mac and

395
00:15:51,520 --> 00:15:53,680
that's a little clunky to work with but

396
00:15:53,680 --> 00:15:56,860
honorable mention here is actually supr

397
00:15:56,860 --> 00:15:59,650
audit that is created by Jonathan Levin

398
00:15:59,650 --> 00:16:04,090
which is far superior than the audit

399
00:16:04,090 --> 00:16:06,100
well P our audit that you have on Mac OS

400
00:16:06,100 --> 00:16:09,190
systems and a piggyback self of audit D

401
00:16:09,190 --> 00:16:10,870
because you know we all know that using

402
00:16:10,870 --> 00:16:12,910
P our audit in an enterprise environment

403
00:16:12,910 --> 00:16:14,980
you just can't work with those logs

404
00:16:14,980 --> 00:16:17,800
their pain to deal with so using his

405
00:16:17,800 --> 00:16:19,600
tool you could at least start to make

406
00:16:19,600 --> 00:16:21,430
some better use of out of the data that

407
00:16:21,430 --> 00:16:24,010
that gives you so now we'll get into

408
00:16:24,010 --> 00:16:26,110
some of the techniques and tactics that

409
00:16:26,110 --> 00:16:29,320
are used by adversaries today so the

410
00:16:29,320 --> 00:16:31,870
first being persistence right and so

411
00:16:31,870 --> 00:16:33,970
once an attacker gets onto a system they

412
00:16:33,970 --> 00:16:35,860
don't want to lose that access they have

413
00:16:35,860 --> 00:16:37,660
to find a way to survive no matter what

414
00:16:37,660 --> 00:16:40,330
the user might do they want whether the

415
00:16:40,330 --> 00:16:42,310
user reboots or does something crazy to

416
00:16:42,310 --> 00:16:43,510
their system they want to be able to

417
00:16:43,510 --> 00:16:45,130
live on that system for an extended

418
00:16:45,130 --> 00:16:46,780
period of time to carry out their

419
00:16:46,780 --> 00:16:49,570
operations and so believe me like

420
00:16:49,570 --> 00:16:51,190
working with a lot of red teamers that

421
00:16:51,190 --> 00:16:53,980
Specter ops they absolutely hate fishing

422
00:16:53,980 --> 00:16:56,050
so persistence is key especially on Mac

423
00:16:56,050 --> 00:16:59,380
OS and so one way attackers commonly

424
00:16:59,380 --> 00:17:01,360
persist on Mac OS is launch agents and

425
00:17:01,360 --> 00:17:03,760
launch demons and so this is a kind of

426
00:17:03,760 --> 00:17:05,980
diagram flow of like how launch ages and

427
00:17:05,980 --> 00:17:07,720
launch demons work and so you have

428
00:17:07,720 --> 00:17:09,670
launch D that kicks off and that loads

429
00:17:09,670 --> 00:17:11,290
the launch demons from the system

430
00:17:11,290 --> 00:17:13,690
library and then launch statements from

431
00:17:13,690 --> 00:17:15,670
the library user library and then also

432
00:17:15,670 --> 00:17:18,069
the launch agents are loaded from system

433
00:17:18,069 --> 00:17:20,050
library and then users individual

434
00:17:20,050 --> 00:17:22,599
library and launch agents so that's a

435
00:17:22,599 --> 00:17:25,300
quick synopsis on launch ages and

436
00:17:25,300 --> 00:17:27,849
launched demons and so this is what a

437
00:17:27,849 --> 00:17:29,650
launch agent looks like so if you use

438
00:17:29,650 --> 00:17:33,550
the PL util tool - P to print this is

439
00:17:33,550 --> 00:17:36,190
actually the output from the Little

440
00:17:36,190 --> 00:17:40,240
Snitch P list that exists on my system

441
00:17:40,240 --> 00:17:42,190
right now and so the important thing to

442
00:17:42,190 --> 00:17:43,600
note is run at low

443
00:17:43,600 --> 00:17:45,519
right because if that's set to zero then

444
00:17:45,519 --> 00:17:47,799
the binary associated with that launch

445
00:17:47,799 --> 00:17:49,809
agent won't run at load right it won't

446
00:17:49,809 --> 00:17:52,630
start up so once that is set to one then

447
00:17:52,630 --> 00:17:54,940
for certain that's going to exist and

448
00:17:54,940 --> 00:17:57,009
the binary associated with that pig list

449
00:17:57,009 --> 00:18:00,659
is going to kick off and so some of the

450
00:18:00,659 --> 00:18:03,519
P lists some of the actually launch ages

451
00:18:03,519 --> 00:18:04,659
and launch statements that are used by

452
00:18:04,659 --> 00:18:07,600
attackers in the wild the first image we

453
00:18:07,600 --> 00:18:09,940
have here is the co root rat and that's

454
00:18:09,940 --> 00:18:12,610
persistent via launch daemon and then we

455
00:18:12,610 --> 00:18:15,220
also have another rat that was another

456
00:18:15,220 --> 00:18:18,159
launch agent that was used in the Mac

457
00:18:18,159 --> 00:18:20,350
update web site and so they piggybacked

458
00:18:20,350 --> 00:18:22,509
off of Firefox and created like

459
00:18:22,509 --> 00:18:26,409
malicious Firefox download right and so

460
00:18:26,409 --> 00:18:28,240
you were able to download Firefox with

461
00:18:28,240 --> 00:18:30,100
some malicious stuff entered into it and

462
00:18:30,100 --> 00:18:31,629
it will actually persist us at launch

463
00:18:31,629 --> 00:18:35,230
agent so down here you see that a lot

464
00:18:35,230 --> 00:18:38,110
Mac OS update P list was actually loaded

465
00:18:38,110 --> 00:18:40,419
using launch control and it installed

466
00:18:40,419 --> 00:18:42,490
that P list to the system and a launch

467
00:18:42,490 --> 00:18:44,559
agents directory so that binary

468
00:18:44,559 --> 00:18:47,049
associated with that P list is now going

469
00:18:47,049 --> 00:18:51,190
to kick off at runtime and so one of the

470
00:18:51,190 --> 00:18:52,720
weird things that you can do using

471
00:18:52,720 --> 00:18:55,690
Patrick's tool is actually take a deeper

472
00:18:55,690 --> 00:18:58,389
dive into the launch ages and launch

473
00:18:58,389 --> 00:19:01,509
statements on your system so once one

474
00:19:01,509 --> 00:19:03,309
tries to install using this tool maybe

475
00:19:03,309 --> 00:19:05,350
you can take a look and see that the

476
00:19:05,350 --> 00:19:07,750
launch agent or launch daemon is

477
00:19:07,750 --> 00:19:10,659
actually unsigned right and then on top

478
00:19:10,659 --> 00:19:11,980
of that another thing that might stick

479
00:19:11,980 --> 00:19:14,740
out is that the startup binary exist in

480
00:19:14,740 --> 00:19:16,960
temp right and so the fact that it is

481
00:19:16,960 --> 00:19:19,330
exist in temp and the fact that it's

482
00:19:19,330 --> 00:19:21,639
unsigned and it starts with calmed Apple

483
00:19:21,639 --> 00:19:24,370
is probably an indicator as Darren

484
00:19:24,370 --> 00:19:26,169
mentioned earlier that hey like things

485
00:19:26,169 --> 00:19:28,090
are awry like that's usually associated

486
00:19:28,090 --> 00:19:30,549
with launch agents or launch Damons or

487
00:19:30,549 --> 00:19:34,210
things that are signed by Apple and so

488
00:19:34,210 --> 00:19:36,399
with that we could create our hypothesis

489
00:19:36,399 --> 00:19:38,409
that says an attacker has compromised at

490
00:19:38,409 --> 00:19:40,450
least one system in our environment and

491
00:19:40,450 --> 00:19:42,759
it's persisting via a launch agent or a

492
00:19:42,759 --> 00:19:45,340
launch daemon and so with that I

493
00:19:45,340 --> 00:19:47,950
mentioned before that oh s query is one

494
00:19:47,950 --> 00:19:50,139
of the best tools for using at point in

495
00:19:50,139 --> 00:19:52,750
time so at this point in time you

496
00:19:52,750 --> 00:19:54,190
collect all the launch agents or you

497
00:19:54,190 --> 00:19:56,470
want a specific query that is designated

498
00:19:56,470 --> 00:19:57,280
to launch a

499
00:19:57,280 --> 00:19:58,480
just launched Damon's and then at

500
00:19:58,480 --> 00:20:00,220
another interval you would run that scan

501
00:20:00,220 --> 00:20:01,570
again right just to make sure that

502
00:20:01,570 --> 00:20:04,180
everything is in line so this is one

503
00:20:04,180 --> 00:20:06,490
query that you can actually run for os

504
00:20:06,490 --> 00:20:08,860
query that will get you pretty pretty

505
00:20:08,860 --> 00:20:10,720
close to where you want to be so this is

506
00:20:10,720 --> 00:20:12,400
actually doing a join on the signature

507
00:20:12,400 --> 00:20:15,040
table and also the launch D table right

508
00:20:15,040 --> 00:20:16,750
and then is actually selecting all of

509
00:20:16,750 --> 00:20:19,480
those that the name is like com dad

510
00:20:19,480 --> 00:20:22,480
Apple and that it's not signed so sign

511
00:20:22,480 --> 00:20:24,670
equals zero right and then also run at

512
00:20:24,670 --> 00:20:27,220
load is equal to one this will be

513
00:20:27,220 --> 00:20:29,170
basically every launch agent on your

514
00:20:29,170 --> 00:20:32,080
system that is unsigned starts where com

515
00:20:32,080 --> 00:20:34,720
that Apple and is designed to run at

516
00:20:34,720 --> 00:20:37,990
load right and so that's pretty good but

517
00:20:37,990 --> 00:20:39,730
it's not good enough we have to go

518
00:20:39,730 --> 00:20:42,640
deeper and so another hypothesis that we

519
00:20:42,640 --> 00:20:44,410
could come up with is like an attacker

520
00:20:44,410 --> 00:20:46,420
has compromised at least one system and

521
00:20:46,420 --> 00:20:48,850
is persisting via assigned at launch

522
00:20:48,850 --> 00:20:50,800
agent or launch daemon and which

523
00:20:50,800 --> 00:20:53,410
associated binary is not signed by Apple

524
00:20:53,410 --> 00:20:55,390
and so in a lot of malware today you're

525
00:20:55,390 --> 00:20:57,610
we're actually seeing that the malware

526
00:20:57,610 --> 00:21:00,040
that is being used by attackers is

527
00:21:00,040 --> 00:21:01,690
actually signed as some sort of way

528
00:21:01,690 --> 00:21:04,390
using a valid Apple Developer

529
00:21:04,390 --> 00:21:07,510
certificate right and so one way that we

530
00:21:07,510 --> 00:21:08,800
can actually build on our existing

531
00:21:08,800 --> 00:21:11,470
detection is say that we have a name

532
00:21:11,470 --> 00:21:13,750
like comrade apple and it is signed

533
00:21:13,750 --> 00:21:16,030
right but the authority the signing

534
00:21:16,030 --> 00:21:18,130
authority is not software signing so

535
00:21:18,130 --> 00:21:20,440
software signing in my testing is

536
00:21:20,440 --> 00:21:22,600
associated with Apple signed binaries

537
00:21:22,600 --> 00:21:24,910
and so this is saying that if it's not

538
00:21:24,910 --> 00:21:26,830
an apple sign Barratt binary but it's

539
00:21:26,830 --> 00:21:28,660
signed and it starts with com that Apple

540
00:21:28,660 --> 00:21:30,400
and it's designed to run that load well

541
00:21:30,400 --> 00:21:31,780
then that's something that we might be

542
00:21:31,780 --> 00:21:34,510
interested in right well I mean that's

543
00:21:34,510 --> 00:21:36,940
good but it's it's not quite good enough

544
00:21:36,940 --> 00:21:40,030
so let's go a little bit deeper and so

545
00:21:40,030 --> 00:21:42,880
Josh Pitts actually introduced a blog

546
00:21:42,880 --> 00:21:45,520
post back in June or July where he

547
00:21:45,520 --> 00:21:47,560
stated that uh you know he could be

548
00:21:47,560 --> 00:21:49,840
Apple and so can anybody else right it

549
00:21:49,840 --> 00:21:53,050
was a he created a way to actually trick

550
00:21:53,050 --> 00:21:55,270
the tools that existed out there on the

551
00:21:55,270 --> 00:21:58,690
internet open source and also enterprise

552
00:21:58,690 --> 00:22:01,330
level tools that unsigned code was

553
00:22:01,330 --> 00:22:03,610
actually signed by Apple so it appeared

554
00:22:03,610 --> 00:22:05,080
to be signed by Apple when it wasn't

555
00:22:05,080 --> 00:22:06,540
because it was through a

556
00:22:06,540 --> 00:22:08,860
misinterpretation of some specific code

557
00:22:08,860 --> 00:22:10,850
signing api's right and

558
00:22:10,850 --> 00:22:13,650
one of the requirements for this type of

559
00:22:13,650 --> 00:22:15,420
attack is that the unsigned code had to

560
00:22:15,420 --> 00:22:18,630
be an architecture of i386 and so we

561
00:22:18,630 --> 00:22:20,309
could use that to build on top of our

562
00:22:20,309 --> 00:22:22,830
initial detection that says it's calmed

563
00:22:22,830 --> 00:22:26,280
at Apple it's signed the authority is

564
00:22:26,280 --> 00:22:28,710
not Apple right and then it's designed

565
00:22:28,710 --> 00:22:30,360
to run at load but then now architecture

566
00:22:30,360 --> 00:22:33,600
is i386 so that will get us a state

567
00:22:33,600 --> 00:22:36,480
where pretty much it'll cover a lot of

568
00:22:36,480 --> 00:22:37,740
the launch agents and launch name is

569
00:22:37,740 --> 00:22:39,090
that we're worried about that starts

570
00:22:39,090 --> 00:22:40,650
work on that Apple another thing that

571
00:22:40,650 --> 00:22:42,630
you could do is also look for launch

572
00:22:42,630 --> 00:22:44,700
agents and launch demons in general and

573
00:22:44,700 --> 00:22:46,290
use the technique called stacking where

574
00:22:46,290 --> 00:22:47,460
you just collect all of the launch

575
00:22:47,460 --> 00:22:49,679
agents or launch agents and Damons on a

576
00:22:49,679 --> 00:22:52,040
system and it actually compare to see

577
00:22:52,040 --> 00:22:55,170
how many of those exist on the entire

578
00:22:55,170 --> 00:22:57,480
exists in their entire fleet right so if

579
00:22:57,480 --> 00:22:59,460
there's some of the common ones that are

580
00:22:59,460 --> 00:23:01,860
related to maybe like Spotify or Dropbox

581
00:23:01,860 --> 00:23:04,830
right those have a highest spread across

582
00:23:04,830 --> 00:23:06,690
all the users in their environment so in

583
00:23:06,690 --> 00:23:08,940
an enterprise of like 500 you might see

584
00:23:08,940 --> 00:23:11,370
that maybe like 30 or 40 times right but

585
00:23:11,370 --> 00:23:13,380
launch agents that are like one-off so

586
00:23:13,380 --> 00:23:15,840
maybe only one of those exists in the

587
00:23:15,840 --> 00:23:17,670
environment that makes it unique then

588
00:23:17,670 --> 00:23:18,780
that's something you might want to key

589
00:23:18,780 --> 00:23:21,990
off of so the next tactic that I'll go

590
00:23:21,990 --> 00:23:24,270
into is actually privilege escalation

591
00:23:24,270 --> 00:23:27,179
and so once an attacker gains access to

592
00:23:27,179 --> 00:23:29,370
a system more times than not they have

593
00:23:29,370 --> 00:23:31,559
low-level privileges and but in order to

594
00:23:31,559 --> 00:23:33,210
carry out their objective they'll

595
00:23:33,210 --> 00:23:34,830
actually need a higher level of

596
00:23:34,830 --> 00:23:36,690
privilege on the system especially on

597
00:23:36,690 --> 00:23:39,870
Mac so they'll need to modify some

598
00:23:39,870 --> 00:23:41,400
advanced settings and in order to do

599
00:23:41,400 --> 00:23:42,750
that it requires elevated privileges

600
00:23:42,750 --> 00:23:47,220
right so the the bad thing about this is

601
00:23:47,220 --> 00:23:49,230
that most users on their Mac are

602
00:23:49,230 --> 00:23:52,170
typically admin or running as admin

603
00:23:52,170 --> 00:23:54,510
right so if you actually compromised the

604
00:23:54,510 --> 00:23:57,510
user in some way or gain access to their

605
00:23:57,510 --> 00:23:59,730
password well then essentially you can

606
00:23:59,730 --> 00:24:03,510
just become an admin right and so one

607
00:24:03,510 --> 00:24:05,160
thing that doesn't help this is like

608
00:24:05,160 --> 00:24:07,320
vulnerabilities that exists that

609
00:24:07,320 --> 00:24:10,410
probably shouldn't exist because of just

610
00:24:10,410 --> 00:24:13,380
quality control issues but I am route

611
00:24:13,380 --> 00:24:15,540
comes to mind and that happened in 2007

612
00:24:15,540 --> 00:24:17,670
where you were able to just enter route

613
00:24:17,670 --> 00:24:19,770
as the username and and press ENTER a

614
00:24:19,770 --> 00:24:22,140
couple times and now you become a admin

615
00:24:22,140 --> 00:24:23,640
so things like that definitely doesn't

616
00:24:23,640 --> 00:24:24,330
help the

617
00:24:24,330 --> 00:24:27,660
of privilege escalation and so when

618
00:24:27,660 --> 00:24:30,510
we're on Mac OS systems most of the time

619
00:24:30,510 --> 00:24:32,340
use experiences too you'll get a pop-up

620
00:24:32,340 --> 00:24:35,730
and that pop-up will say something right

621
00:24:35,730 --> 00:24:37,170
and we'll get a bunch of these pop-ups

622
00:24:37,170 --> 00:24:38,670
throughout the day and most of us either

623
00:24:38,670 --> 00:24:40,620
like canceled or we're entering

624
00:24:40,620 --> 00:24:43,100
something trusting that whatever

625
00:24:43,100 --> 00:24:45,810
privilege we just gave that application

626
00:24:45,810 --> 00:24:47,490
won't do some harm to our system right

627
00:24:47,490 --> 00:24:50,790
and so this is something to be aware of

628
00:24:50,790 --> 00:24:52,350
because attackers are actually doing the

629
00:24:52,350 --> 00:24:54,090
same thing where they will provide a

630
00:24:54,090 --> 00:24:55,860
prompt to the user and maybe sometimes

631
00:24:55,860 --> 00:24:57,330
that'll be in a loop until the user

632
00:24:57,330 --> 00:24:59,900
enters in some information right either

633
00:24:59,900 --> 00:25:03,210
credentials or something that will help

634
00:25:03,210 --> 00:25:06,570
them to get escalated right and so this

635
00:25:06,570 --> 00:25:09,300
is just one way that you can do that so

636
00:25:09,300 --> 00:25:11,130
it's very trivial to create like an

637
00:25:11,130 --> 00:25:12,720
Apple script that will create a prompt

638
00:25:12,720 --> 00:25:14,850
and it will collect the details once you

639
00:25:14,850 --> 00:25:17,640
press ok and store that somewhere right

640
00:25:17,640 --> 00:25:19,050
and we'll see that in a demo a little

641
00:25:19,050 --> 00:25:21,450
bit later so with that now we can create

642
00:25:21,450 --> 00:25:23,850
a hypothesis of the following an

643
00:25:23,850 --> 00:25:25,650
attacker has compromised at least one

644
00:25:25,650 --> 00:25:27,180
system and has escalated privileges

645
00:25:27,180 --> 00:25:30,330
through the use of sea-doo right and so

646
00:25:30,330 --> 00:25:31,590
what can we do from a detection

647
00:25:31,590 --> 00:25:33,540
standpoint is actually baseline the use

648
00:25:33,540 --> 00:25:35,550
of sea-doo in our environment right so

649
00:25:35,550 --> 00:25:37,500
like Tehran mentioned earlier this

650
00:25:37,500 --> 00:25:40,320
morning I was like yeah sudo exists your

651
00:25:40,320 --> 00:25:42,240
end-users probably shouldn't be using

652
00:25:42,240 --> 00:25:45,000
sudo too often maybe your sister admins

653
00:25:45,000 --> 00:25:46,860
or folks you know that are actually

654
00:25:46,860 --> 00:25:48,630
doing a lot of that admin work on on

655
00:25:48,630 --> 00:25:51,060
your Macs in your fleet but you can't

656
00:25:51,060 --> 00:25:52,920
expect the average person in your

657
00:25:52,920 --> 00:25:54,930
company to actually be using CT too

658
00:25:54,930 --> 00:25:57,210
often right and then also monitoring for

659
00:25:57,210 --> 00:25:59,490
the use of security all trampoline right

660
00:25:59,490 --> 00:26:01,950
and so security of trampoline actually

661
00:26:01,950 --> 00:26:04,280
is related to the API call of

662
00:26:04,280 --> 00:26:06,360
authorization execute with privileges

663
00:26:06,360 --> 00:26:08,190
from the security praying framework and

664
00:26:08,190 --> 00:26:10,530
so it'll prompt for elevated creds and

665
00:26:10,530 --> 00:26:12,480
then execute the code as a privileged

666
00:26:12,480 --> 00:26:15,240
user and so process monitoring is

667
00:26:15,240 --> 00:26:16,920
actually a good source data source to

668
00:26:16,920 --> 00:26:19,590
use for this sort of thing so I'll go

669
00:26:19,590 --> 00:26:22,260
into the next tactic of defense evasion

670
00:26:22,260 --> 00:26:25,560
and so in order to discuss hunting for

671
00:26:25,560 --> 00:26:27,180
defense evasion in your environment we

672
00:26:27,180 --> 00:26:28,860
also have to discuss what defensive

673
00:26:28,860 --> 00:26:30,930
mechanisms mechanisms are in place on

674
00:26:30,930 --> 00:26:33,630
Mac OS systems currently and so the

675
00:26:33,630 --> 00:26:36,270
first is file quarantine so file

676
00:26:36,270 --> 00:26:37,570
quarantine is

677
00:26:37,570 --> 00:26:39,160
security feature built into Mac OS

678
00:26:39,160 --> 00:26:41,800
designed to prevent infections and so

679
00:26:41,800 --> 00:26:43,810
it'll prompt you to ensure that you

680
00:26:43,810 --> 00:26:45,340
really want to open a file that was

681
00:26:45,340 --> 00:26:47,500
downloaded from the web is meant to slow

682
00:26:47,500 --> 00:26:49,120
the user down but it doesn't really

683
00:26:49,120 --> 00:26:51,070
prevent that an hour or that code from

684
00:26:51,070 --> 00:26:52,420
running it's just telling you use it

685
00:26:52,420 --> 00:26:54,430
like hey you're potentially about to do

686
00:26:54,430 --> 00:26:56,200
something really stupid here's the

687
00:26:56,200 --> 00:26:57,550
second chance to kind of rectify that

688
00:26:57,550 --> 00:26:59,860
before we move further right and so how

689
00:26:59,860 --> 00:27:01,840
does file quarantine know that you know

690
00:27:01,840 --> 00:27:03,880
the like a specific file originated from

691
00:27:03,880 --> 00:27:06,250
the Internet well then once that file is

692
00:27:06,250 --> 00:27:07,990
downloaded it has the extended attribute

693
00:27:07,990 --> 00:27:10,000
added and similar similar to the mark of

694
00:27:10,000 --> 00:27:13,150
the web on Windows and so complementary

695
00:27:13,150 --> 00:27:16,420
to file quarantine is gatekeeper so

696
00:27:16,420 --> 00:27:18,040
gatekeeper was actually introduced in

697
00:27:18,040 --> 00:27:20,410
ten seven to actually prevent untrusted

698
00:27:20,410 --> 00:27:22,180
code from running right so similar it's

699
00:27:22,180 --> 00:27:23,440
a file quarantine but it will check to

700
00:27:23,440 --> 00:27:25,480
see if the code is actually signed and

701
00:27:25,480 --> 00:27:28,120
if not then it'll prompt the user so if

702
00:27:28,120 --> 00:27:29,770
signed it'll also check to see if the

703
00:27:29,770 --> 00:27:31,630
code is signed by a trusted developer

704
00:27:31,630 --> 00:27:34,870
and if not it'll prompt the user and it

705
00:27:34,870 --> 00:27:36,370
still leaves it up to the user to decide

706
00:27:36,370 --> 00:27:38,530
whether or not they want to actually run

707
00:27:38,530 --> 00:27:40,240
that code or not it doesn't actually

708
00:27:40,240 --> 00:27:42,160
prevent anything from happening is just

709
00:27:42,160 --> 00:27:44,470
another mechanism to kind of slow things

710
00:27:44,470 --> 00:27:47,500
down right and so next we have expert

711
00:27:47,500 --> 00:27:50,200
xox protect is basically like the AV

712
00:27:50,200 --> 00:27:53,890
subsystem for Mac OS and so it's updated

713
00:27:53,890 --> 00:27:55,750
from the from time to time although like

714
00:27:55,750 --> 00:27:57,580
as of recently it hasn't been touched as

715
00:27:57,580 --> 00:28:00,850
much but it's like located in system

716
00:28:00,850 --> 00:28:03,580
library core services X protect bundle

717
00:28:03,580 --> 00:28:06,070
contents and resources so if you

718
00:28:06,070 --> 00:28:08,200
actually do a strings on that or if you

719
00:28:08,200 --> 00:28:09,820
dump that out you can actually see some

720
00:28:09,820 --> 00:28:12,670
of the yarra rules that are used to

721
00:28:12,670 --> 00:28:14,410
detect malicious things on Mac OS

722
00:28:14,410 --> 00:28:16,540
systems and we'll get into why that's

723
00:28:16,540 --> 00:28:18,520
not such a great thing but there's also

724
00:28:18,520 --> 00:28:21,100
the MRT which kind of also the malar

725
00:28:21,100 --> 00:28:23,320
removal tool that actually like abstract

726
00:28:23,320 --> 00:28:24,850
some of those things away and you can't

727
00:28:24,850 --> 00:28:26,440
really see the contents of what Apple is

728
00:28:26,440 --> 00:28:28,480
trying to detect but as far as X patek

729
00:28:28,480 --> 00:28:29,980
goes we'll see that this can be easily

730
00:28:29,980 --> 00:28:32,590
evaded and so the next thing we have is

731
00:28:32,590 --> 00:28:35,770
system integrity once Mara gets onto the

732
00:28:35,770 --> 00:28:38,920
system well Apple doesn't want things to

733
00:28:38,920 --> 00:28:42,010
be awry or go awry so it's kind of like

734
00:28:42,010 --> 00:28:43,960
the rootless mindset so even though

735
00:28:43,960 --> 00:28:45,880
someone has God level access to your

736
00:28:45,880 --> 00:28:47,530
system there's only so much they can do

737
00:28:47,530 --> 00:28:49,900
due to entitlements give it to files and

738
00:28:49,900 --> 00:28:50,570
directories

739
00:28:50,570 --> 00:28:52,880
so although this is a good thing for

740
00:28:52,880 --> 00:28:54,530
users and it protects a lot of things

741
00:28:54,530 --> 00:28:56,480
especially from the system perspective

742
00:28:56,480 --> 00:28:59,390
this is made it a pain in the like rear

743
00:28:59,390 --> 00:29:01,070
end for a lot of the researchers out

744
00:29:01,070 --> 00:29:02,420
there I mean raise your hand if you have

745
00:29:02,420 --> 00:29:06,500
a VM that has sip like disabled my point

746
00:29:06,500 --> 00:29:06,920
exactly

747
00:29:06,920 --> 00:29:10,730
and so we have a the gatekeeper bypass

748
00:29:10,730 --> 00:29:14,030
so gatekeeper has been bypassed a lot

749
00:29:14,030 --> 00:29:15,970
especially in modern day malware where

750
00:29:15,970 --> 00:29:18,800
the binary that's used the malicious

751
00:29:18,800 --> 00:29:20,960
binaries actually like sign using some

752
00:29:20,960 --> 00:29:23,030
developer ID as I mentioned before but

753
00:29:23,030 --> 00:29:25,880
then also curl and WGA or python are

754
00:29:25,880 --> 00:29:28,280
used to download files within an

755
00:29:28,280 --> 00:29:29,870
application or just download files on

756
00:29:29,870 --> 00:29:32,210
general that once that's downloaded

757
00:29:32,210 --> 00:29:36,110
because terminal or the shell is not

758
00:29:36,110 --> 00:29:38,270
quarantine aware it doesn't get hit with

759
00:29:38,270 --> 00:29:41,000
that quarantine extended attribute and

760
00:29:41,000 --> 00:29:44,030
so gate keeper or file quarantine

761
00:29:44,030 --> 00:29:45,470
doesn't know to wake up the system to

762
00:29:45,470 --> 00:29:47,090
say okay like something bad might be

763
00:29:47,090 --> 00:29:49,850
happening right and so the most recent

764
00:29:49,850 --> 00:29:51,650
example of this at the top is ask ask

765
00:29:51,650 --> 00:29:54,650
elite actually some malware masquerading

766
00:29:54,650 --> 00:29:57,110
as a crypto currency ticker and so that

767
00:29:57,110 --> 00:29:59,120
was something reported by Thomas Reid

768
00:29:59,120 --> 00:30:01,730
and malware bytes guys and so thanks for

769
00:30:01,730 --> 00:30:03,770
that and in this case they actually use

770
00:30:03,770 --> 00:30:05,660
curl to download a file and then they

771
00:30:05,660 --> 00:30:08,900
use Python to execute that and so that's

772
00:30:08,900 --> 00:30:11,240
one way to bypass gatekeeper another way

773
00:30:11,240 --> 00:30:14,060
is actually to basically remove the

774
00:30:14,060 --> 00:30:16,160
extended attribute associated with a

775
00:30:16,160 --> 00:30:17,600
file that was downloaded from the

776
00:30:17,600 --> 00:30:19,280
internet and so that's another way that

777
00:30:19,280 --> 00:30:22,190
you know malware is attempting to bypass

778
00:30:22,190 --> 00:30:24,950
gatekeeper one thing that I did mention

779
00:30:24,950 --> 00:30:27,350
is to that X protect can also be evaded

780
00:30:27,350 --> 00:30:30,350
so because us as users can see the yarra

781
00:30:30,350 --> 00:30:34,010
cigs 4x protect well I mean attackers

782
00:30:34,010 --> 00:30:35,510
can seem as well and so some

783
00:30:35,510 --> 00:30:37,010
modifications to their code could be

784
00:30:37,010 --> 00:30:38,960
made such that it evades those yaro

785
00:30:38,960 --> 00:30:42,170
signatures right and so one hypothesis

786
00:30:42,170 --> 00:30:43,580
that we could come up with is an

787
00:30:43,580 --> 00:30:45,230
attacker has compromised at least one

788
00:30:45,230 --> 00:30:47,270
system is and is attempting to evade

789
00:30:47,270 --> 00:30:49,610
defenses especially sip and/or

790
00:30:49,610 --> 00:30:52,760
gatekeeper so with that we can go to our

791
00:30:52,760 --> 00:30:55,370
trusty friend os query again and come up

792
00:30:55,370 --> 00:30:57,620
with some new query so we could select

793
00:30:57,620 --> 00:31:01,160
from the sip config table right and then

794
00:31:01,160 --> 00:31:04,550
also give it the config flag of sip and

795
00:31:04,550 --> 00:31:06,470
able to equals zero so that mean that

796
00:31:06,470 --> 00:31:09,350
sip is actually disabled on system so in

797
00:31:09,350 --> 00:31:10,910
a corporate environment there shouldn't

798
00:31:10,910 --> 00:31:13,280
be many systems with SIP disabled right

799
00:31:13,280 --> 00:31:15,530
because that requires you to actually go

800
00:31:15,530 --> 00:31:17,990
on to the Box physically actually boot

801
00:31:17,990 --> 00:31:20,890
using command R and then actually using

802
00:31:20,890 --> 00:31:25,340
things like CSR util disabled and so

803
00:31:25,340 --> 00:31:27,650
that's very unlikely for our users that

804
00:31:27,650 --> 00:31:29,720
actually know or actually do right and

805
00:31:29,720 --> 00:31:32,000
then also you have gatekeeper where

806
00:31:32,000 --> 00:31:34,910
assessments enabled is equal to zero so

807
00:31:34,910 --> 00:31:37,400
that means gatekeeper is not enabled on

808
00:31:37,400 --> 00:31:38,960
the system right and so that could be

809
00:31:38,960 --> 00:31:42,710
used using the SP CTL command where you

810
00:31:42,710 --> 00:31:45,650
do - - master disabled and users

811
00:31:45,650 --> 00:31:46,910
probably shouldn't be doing that either

812
00:31:46,910 --> 00:31:49,250
you need some escalated privileges to do

813
00:31:49,250 --> 00:31:51,350
that sort of thing so these two things

814
00:31:51,350 --> 00:31:52,600
if they exist on a corporate network

815
00:31:52,600 --> 00:31:55,160
probably a sign that something has gone

816
00:31:55,160 --> 00:31:57,290
awry or at least a chance to take a

817
00:31:57,290 --> 00:32:00,740
second look and so the real-time piece

818
00:32:00,740 --> 00:32:02,450
you can actually baseline the use of

819
00:32:02,450 --> 00:32:04,040
curl in your environment right so if you

820
00:32:04,040 --> 00:32:05,390
baseline the use of curling your

821
00:32:05,390 --> 00:32:07,190
environment you'll see that maybe folks

822
00:32:07,190 --> 00:32:09,020
are curling to pull down things related

823
00:32:09,020 --> 00:32:11,600
to maybe development maybe things

824
00:32:11,600 --> 00:32:13,900
related to doing system administration

825
00:32:13,900 --> 00:32:16,190
definitely not things that are drawn

826
00:32:16,190 --> 00:32:17,600
mentioned earlier where you're pulling

827
00:32:17,600 --> 00:32:19,700
down stuff from IP addresses and not

828
00:32:19,700 --> 00:32:21,800
actual like domain names right so that

829
00:32:21,800 --> 00:32:23,060
might be suspicious and then also

830
00:32:23,060 --> 00:32:25,880
monitoring for the use of SP CTL to

831
00:32:25,880 --> 00:32:28,130
actually disable gatekeeper and then the

832
00:32:28,130 --> 00:32:29,750
use of X adder right because most

833
00:32:29,750 --> 00:32:31,460
end-users probably doesn't don't know

834
00:32:31,460 --> 00:32:32,900
what that is probably never open

835
00:32:32,900 --> 00:32:35,690
terminal in their life and if you see a

836
00:32:35,690 --> 00:32:37,370
lot of execution of that especially on

837
00:32:37,370 --> 00:32:39,140
one specific system that's a heads up

838
00:32:39,140 --> 00:32:42,020
right to kick off the IR process and so

839
00:32:42,020 --> 00:32:43,400
we'll get it to the fun part of the

840
00:32:43,400 --> 00:32:45,950
presentation where here's the email here

841
00:32:45,950 --> 00:32:48,410
that some folks you know it's very

842
00:32:48,410 --> 00:32:51,170
possible that can happen where the email

843
00:32:51,170 --> 00:32:52,970
is sent to all of your end users imagine

844
00:32:52,970 --> 00:32:54,470
that this has happened since all of your

845
00:32:54,470 --> 00:32:56,510
end users saying hey tomorrow all Mac OS

846
00:32:56,510 --> 00:32:58,610
systems will be updated to Mojave you

847
00:32:58,610 --> 00:33:00,440
need to download this Apple script and

848
00:33:00,440 --> 00:33:02,890
actually run this command in order for

849
00:33:02,890 --> 00:33:06,320
your system to be fully able to continue

850
00:33:06,320 --> 00:33:07,640
running on the corporate network right

851
00:33:07,640 --> 00:33:09,500
so failure to do so might affect your

852
00:33:09,500 --> 00:33:11,120
ability to connect to the corporate

853
00:33:11,120 --> 00:33:13,070
network so your end users get this they

854
00:33:13,070 --> 00:33:14,810
start freaking out they see things in

855
00:33:14,810 --> 00:33:16,559
red they see a script and like hey

856
00:33:16,559 --> 00:33:18,059
I need to do this right and the

857
00:33:18,059 --> 00:33:19,950
instructions here are very specific to

858
00:33:19,950 --> 00:33:22,080
say hey open up the terminal app and

859
00:33:22,080 --> 00:33:23,789
actually enter in this command so users

860
00:33:23,789 --> 00:33:26,309
could do that and so I'll go into the

861
00:33:26,309 --> 00:33:28,350
monitor the monitoring an example of

862
00:33:28,350 --> 00:33:29,759
some monitoring that you can do to

863
00:33:29,759 --> 00:33:32,580
actually set up in your own environment

864
00:33:32,580 --> 00:33:35,159
so we have OS query on a box we also

865
00:33:35,159 --> 00:33:38,580
have X naman on a system and then that

866
00:33:38,580 --> 00:33:41,009
data is being collected and it's

867
00:33:41,009 --> 00:33:43,919
outputted via JSON and so from that you

868
00:33:43,919 --> 00:33:46,080
can use file B to actually send that to

869
00:33:46,080 --> 00:33:48,539
elq instance so in this particular

870
00:33:48,539 --> 00:33:51,240
instance I use help which is a tool that

871
00:33:51,240 --> 00:33:53,460
is created by my colleague inspect the

872
00:33:53,460 --> 00:33:55,619
ROPS Roberto Rodriguez which is

873
00:33:55,619 --> 00:33:59,129
basically a hunting elastic stack right

874
00:33:59,129 --> 00:34:01,549
and so from the attackers perspective

875
00:34:01,549 --> 00:34:05,220
they actually use Empire which is a tool

876
00:34:05,220 --> 00:34:07,230
also created from the guys expect their

877
00:34:07,230 --> 00:34:10,980
ops that does Windows and Mac kind of

878
00:34:10,980 --> 00:34:13,530
remote access type things right so this

879
00:34:13,530 --> 00:34:15,359
is a demo that's kind of coming up here

880
00:34:15,359 --> 00:34:18,149
shortly so as a threat hunter we could

881
00:34:18,149 --> 00:34:20,310
say okay an attacker has compromised at

882
00:34:20,310 --> 00:34:22,079
least one system in an environment and

883
00:34:22,079 --> 00:34:24,270
is executing malicious code via Apple

884
00:34:24,270 --> 00:34:27,199
script right so this is the tactic of

885
00:34:27,199 --> 00:34:29,520
execution and then the technique of

886
00:34:29,520 --> 00:34:31,679
Apple script and so I'll get into the

887
00:34:31,679 --> 00:34:33,829
demo

888
00:34:46,280 --> 00:34:48,899
all right we see that the user executed

889
00:34:48,899 --> 00:34:52,679
that command and now we'll see the agent

890
00:34:52,679 --> 00:34:54,899
actually on the Empire side get kicked

891
00:34:54,899 --> 00:34:58,620
off right and so now with that agent

892
00:34:58,620 --> 00:35:00,390
they have full access to the to the

893
00:35:00,390 --> 00:35:01,800
system and they're actually going to

894
00:35:01,800 --> 00:35:04,580
execute a monitor a module that will

895
00:35:04,580 --> 00:35:07,770
open an application and provide a prompt

896
00:35:07,770 --> 00:35:09,840
to the user right and so in this case

897
00:35:09,840 --> 00:35:12,570
we're going to use the app store because

898
00:35:12,570 --> 00:35:14,670
most folks you know well when it comes

899
00:35:14,670 --> 00:35:15,870
to the app store like yeah I need to

900
00:35:15,870 --> 00:35:17,550
download this app or make a change to

901
00:35:17,550 --> 00:35:19,710
some of that that the apps that I have

902
00:35:19,710 --> 00:35:21,960
on my system right so once this happens

903
00:35:21,960 --> 00:35:24,300
we'll see that uh this is a totally

904
00:35:24,300 --> 00:35:26,640
realistic scenario that that can exist

905
00:35:26,640 --> 00:35:29,460
and so we see the agent here we set it

906
00:35:29,460 --> 00:35:31,560
up pointing to the app store and it's

907
00:35:31,560 --> 00:35:33,150
going to execute so now we'll flip back

908
00:35:33,150 --> 00:35:36,630
to the user side and see exactly what

909
00:35:36,630 --> 00:35:42,390
happens so once this kicked off requires

910
00:35:42,390 --> 00:35:44,160
a password to continue that looks pretty

911
00:35:44,160 --> 00:35:46,170
legitimate it's using an actual app

912
00:35:46,170 --> 00:35:48,720
store icon and so they enter in their

913
00:35:48,720 --> 00:35:51,330
credentials and then they press ok it's

914
00:35:51,330 --> 00:35:53,610
like ok well that's that's bad but they

915
00:35:53,610 --> 00:35:55,740
don't know what's bad and so we can see

916
00:35:55,740 --> 00:35:57,930
that it returns some results so on the

917
00:35:57,930 --> 00:36:00,720
Empire side we could go in and we could

918
00:36:00,720 --> 00:36:02,850
go to the directory that facilities

919
00:36:02,850 --> 00:36:04,860
associated with the agent that we just

920
00:36:04,860 --> 00:36:07,530
used to execute that command and so

921
00:36:07,530 --> 00:36:09,470
we'll see here pretty shortly that uh

922
00:36:09,470 --> 00:36:12,720
that password was used and it's not a

923
00:36:12,720 --> 00:36:15,870
really good one so now we're just

924
00:36:15,870 --> 00:36:18,570
cutting out that agent log and we see

925
00:36:18,570 --> 00:36:20,100
that the text Edward was returned as

926
00:36:20,100 --> 00:36:23,400
Apple one two three all right ok cool so

927
00:36:23,400 --> 00:36:25,290
what can we use what can we use this for

928
00:36:25,290 --> 00:36:27,420
well now we can use an existing module

929
00:36:27,420 --> 00:36:29,550
that acts for elevated privileges

930
00:36:29,550 --> 00:36:32,310
assuming that the user is running as an

931
00:36:32,310 --> 00:36:34,260
administrator on their system and so

932
00:36:34,260 --> 00:36:35,760
with the credentials we could put those

933
00:36:35,760 --> 00:36:38,070
in and actually run another module that

934
00:36:38,070 --> 00:36:40,860
will spawn sudo and then actually kick

935
00:36:40,860 --> 00:36:43,110
back another agent to be used right and

936
00:36:43,110 --> 00:36:45,450
so this agent will run in elevated

937
00:36:45,450 --> 00:36:48,240
contacts and so that's executed because

938
00:36:48,240 --> 00:36:51,120
now they had the password and so we can

939
00:36:51,120 --> 00:36:54,240
see that that agent came back and now

940
00:36:54,240 --> 00:36:56,060
we're good to go so now we're a

941
00:36:56,060 --> 00:36:58,980
privileged user on this system and now

942
00:36:58,980 --> 00:36:59,900
that we are privileged

943
00:36:59,900 --> 00:37:02,029
user we could go ahead and do things

944
00:37:02,029 --> 00:37:04,069
like install launched Damon's instead of

945
00:37:04,069 --> 00:37:06,890
launch agents right and so the way we'll

946
00:37:06,890 --> 00:37:09,230
do that will try to blend in uses some

947
00:37:09,230 --> 00:37:11,119
of the same techniques that Jaron talked

948
00:37:11,119 --> 00:37:13,190
about earlier this morning there's like

949
00:37:13,190 --> 00:37:15,049
thrown in some comm that Apple in there

950
00:37:15,049 --> 00:37:17,960
putting it in a hidden directory and

951
00:37:17,960 --> 00:37:19,880
then calling it comm that Apple that

952
00:37:19,880 --> 00:37:22,700
Network update so yeah I mean most users

953
00:37:22,700 --> 00:37:24,680
won't be familiar with that they don't

954
00:37:24,680 --> 00:37:25,819
they won't even know that it's happening

955
00:37:25,819 --> 00:37:27,710
in the background right so on the user

956
00:37:27,710 --> 00:37:32,029
side is completely quiet and so we'll

957
00:37:32,029 --> 00:37:33,140
see that they'll get kicked off here

958
00:37:33,140 --> 00:37:38,180
pretty shortly you see the dot in front

959
00:37:38,180 --> 00:37:39,799
of the network update that's the

960
00:37:39,799 --> 00:37:41,270
location that it's going to be so it's

961
00:37:41,270 --> 00:37:44,420
going to be set into the users context

962
00:37:44,420 --> 00:37:46,190
and it's going to be a hidden file so

963
00:37:46,190 --> 00:37:48,559
good luck to the IR team that has to go

964
00:37:48,559 --> 00:37:50,720
ahead and find that so now we're kicking

965
00:37:50,720 --> 00:37:53,720
over to the hunt side and so we're in

966
00:37:53,720 --> 00:37:56,480
cabana here and all the data that we've

967
00:37:56,480 --> 00:37:58,520
been collecting is being sent off so

968
00:37:58,520 --> 00:37:59,690
we're looking for

969
00:37:59,690 --> 00:38:02,270
ohso script associated with apple script

970
00:38:02,270 --> 00:38:04,849
executions and so we see that it's 62

971
00:38:04,849 --> 00:38:08,720
instances exist and so with that we want

972
00:38:08,720 --> 00:38:11,930
to dive a little bit deeper right so we

973
00:38:11,930 --> 00:38:14,599
want to see any time that the binary Oso

974
00:38:14,599 --> 00:38:16,760
script has actually been executed on the

975
00:38:16,760 --> 00:38:18,980
system not just like oh so script right

976
00:38:18,980 --> 00:38:20,569
because there's some command-line

977
00:38:20,569 --> 00:38:21,799
parameters I could have that in there so

978
00:38:21,799 --> 00:38:23,930
we see four instances which is pretty

979
00:38:23,930 --> 00:38:27,170
rare we started out with 29,000 events

980
00:38:27,170 --> 00:38:29,180
that came in and so we see Network

981
00:38:29,180 --> 00:38:30,740
update the Apple script that was

982
00:38:30,740 --> 00:38:32,480
actually executed to kick off the

983
00:38:32,480 --> 00:38:35,599
initial agent and so from that we can

984
00:38:35,599 --> 00:38:37,490
see that okay like there was another

985
00:38:37,490 --> 00:38:41,000
Apple script that told App Store to open

986
00:38:41,000 --> 00:38:42,589
up and actually to enter in a password

987
00:38:42,589 --> 00:38:45,740
to continue so now as a responder as a

988
00:38:45,740 --> 00:38:48,500
threat hunter because your hypothesis

989
00:38:48,500 --> 00:38:50,150
came true well you're a little

990
00:38:50,150 --> 00:38:52,609
suspicious you go into the ancestors

991
00:38:52,609 --> 00:38:53,990
which are the parents and you see that

992
00:38:53,990 --> 00:38:56,930
Python exists and that's usually a bad

993
00:38:56,930 --> 00:38:59,539
sign so Oso script you can off Python

994
00:38:59,539 --> 00:39:03,020
that's not normal in an environment so

995
00:39:03,020 --> 00:39:05,720
now we want to look at any time we see a

996
00:39:05,720 --> 00:39:09,589
Python being used right and so we have

997
00:39:09,589 --> 00:39:11,420
all the executions of Python and then we

998
00:39:11,420 --> 00:39:13,640
see in the arguments feel we

999
00:39:13,640 --> 00:39:16,900
see some basics before encoding right so

1000
00:39:16,900 --> 00:39:19,400
with that we can actually decode that

1001
00:39:19,400 --> 00:39:22,250
similar to PowerShell and encoded

1002
00:39:22,250 --> 00:39:24,559
commands so it's pretty easy to do that

1003
00:39:24,559 --> 00:39:26,269
open it up

1004
00:39:26,269 --> 00:39:27,829
cyber chef right here which is a great

1005
00:39:27,829 --> 00:39:30,500
resource to use and so with that thrown

1006
00:39:30,500 --> 00:39:33,799
into base64 and we get some data back so

1007
00:39:33,799 --> 00:39:35,630
this looks like a request going out to

1008
00:39:35,630 --> 00:39:38,630
an IP address and so that doesn't look

1009
00:39:38,630 --> 00:39:41,599
too promising so now as a threat hunter

1010
00:39:41,599 --> 00:39:43,160
as an instant responder things are

1011
00:39:43,160 --> 00:39:45,349
definitely like the light bulbs are

1012
00:39:45,349 --> 00:39:47,539
going off like red alarm Red Alert

1013
00:39:47,539 --> 00:39:49,490
like let's get the system off the

1014
00:39:49,490 --> 00:39:51,829
network right but now that we have this

1015
00:39:51,829 --> 00:39:53,720
data source we actually want to pivot

1016
00:39:53,720 --> 00:39:56,809
off of that but initially we caught it

1017
00:39:56,809 --> 00:39:58,309
we could have caught this detection as

1018
00:39:58,309 --> 00:40:00,019
well using some of the queries that I

1019
00:40:00,019 --> 00:40:01,460
introduced where we're looking for

1020
00:40:01,460 --> 00:40:03,769
comrade Apple you installed as a launch

1021
00:40:03,769 --> 00:40:06,289
daemon that is unsigned right and so

1022
00:40:06,289 --> 00:40:08,569
here because we already had that set up

1023
00:40:08,569 --> 00:40:10,760
we can see that the launch came in when

1024
00:40:10,760 --> 00:40:11,359
it was created

1025
00:40:11,359 --> 00:40:14,059
got logged so that's another way to from

1026
00:40:14,059 --> 00:40:16,039
our perspective even though you had

1027
00:40:16,039 --> 00:40:18,170
hunts that you're currently on your

1028
00:40:18,170 --> 00:40:19,549
previous hunts sure that turned into

1029
00:40:19,549 --> 00:40:21,680
detections for you to actually build

1030
00:40:21,680 --> 00:40:26,329
upon so we see that that uh that query

1031
00:40:26,329 --> 00:40:28,430
that we ran in LS query running at an

1032
00:40:28,430 --> 00:40:30,470
interval came to fruition and it gave us

1033
00:40:30,470 --> 00:40:34,190
some fruitful results and so now we'll

1034
00:40:34,190 --> 00:40:39,019
go into doing a visualizing some of the

1035
00:40:39,019 --> 00:40:40,970
things that are going on as far as

1036
00:40:40,970 --> 00:40:42,890
command-line arguments and pseudo

1037
00:40:42,890 --> 00:40:44,569
because we see that they were able to

1038
00:40:44,569 --> 00:40:46,099
install the launch daemon but we don't

1039
00:40:46,099 --> 00:40:47,720
know exactly how they were able to do

1040
00:40:47,720 --> 00:40:50,150
that because that involves elevated

1041
00:40:50,150 --> 00:40:52,009
privileges right so we know from the

1042
00:40:52,009 --> 00:40:53,779
attackers protect perspective how they

1043
00:40:53,779 --> 00:40:55,130
went about doing that but we don't know

1044
00:40:55,130 --> 00:40:57,319
that from instant response perspective

1045
00:40:57,319 --> 00:40:59,690
so this is after the fact now the hunt

1046
00:40:59,690 --> 00:41:01,160
is over we're actually performing in

1047
00:41:01,160 --> 00:41:03,950
some response so now we're looking for

1048
00:41:03,950 --> 00:41:07,250
all arguments that were used in the log

1049
00:41:07,250 --> 00:41:09,529
in the logs that we have so far and so

1050
00:41:09,529 --> 00:41:12,140
we see that sudu was used ok well that's

1051
00:41:12,140 --> 00:41:14,210
interesting to us right so let's just

1052
00:41:14,210 --> 00:41:16,009
glued that out and then also we want to

1053
00:41:16,009 --> 00:41:18,500
see some of the command line parameters

1054
00:41:18,500 --> 00:41:21,190
that were is used when sudou was called

1055
00:41:21,190 --> 00:41:24,279
so we'll get to that here pretty shortly

1056
00:41:24,279 --> 00:41:26,480
so this is a great example of like how

1057
00:41:26,480 --> 00:41:27,390
you can

1058
00:41:27,390 --> 00:41:29,490
detection x' and also continue to hunt

1059
00:41:29,490 --> 00:41:31,589
building on existing techniques and

1060
00:41:31,589 --> 00:41:33,690
tactics out there using the minor attack

1061
00:41:33,690 --> 00:41:36,480
framework so we see that we have been SH

1062
00:41:36,480 --> 00:41:38,880
that was used along with pseudo right

1063
00:41:38,880 --> 00:41:40,829
they actually call to us that's a little

1064
00:41:40,829 --> 00:41:42,240
weird because most of the time it comes

1065
00:41:42,240 --> 00:41:45,990
from been bash and so we see that Python

1066
00:41:45,990 --> 00:41:49,170
and pseudo were used twice in the same

1067
00:41:49,170 --> 00:41:51,180
command-line argument and so that only

1068
00:41:51,180 --> 00:41:52,859
happened twice out of the twenty nine

1069
00:41:52,859 --> 00:41:54,029
thousand events that we have started

1070
00:41:54,029 --> 00:41:57,690
with so that's of interest to us and so

1071
00:41:57,690 --> 00:41:59,609
if we enter that in to Cabana and do a

1072
00:41:59,609 --> 00:42:02,180
search for it we'll see that hey like

1073
00:42:02,180 --> 00:42:06,809
this echo Apple one two three that looks

1074
00:42:06,809 --> 00:42:08,369
like a password that I use the currents

1075
00:42:08,369 --> 00:42:10,559
are in okay now we know on this system

1076
00:42:10,559 --> 00:42:13,230
that hey like things are awry they at

1077
00:42:13,230 --> 00:42:15,900
least got elevated provisions privileges

1078
00:42:15,900 --> 00:42:18,119
on the system and we want to do some

1079
00:42:18,119 --> 00:42:19,890
extensive analysis to see all the things

1080
00:42:19,890 --> 00:42:21,900
that could have happened so that's the

1081
00:42:21,900 --> 00:42:27,000
end of the demo all right let me switch

1082
00:42:27,000 --> 00:42:30,260
back to the presentation yeah

1083
00:42:38,319 --> 00:42:42,209
Oh give me a second here

1084
00:42:47,820 --> 00:42:58,480
alright alright so that's the end of my

1085
00:42:58,480 --> 00:43:00,400
presentation I also want to give some

1086
00:43:00,400 --> 00:43:03,760
credits to definitely Jonathan Levin for

1087
00:43:03,760 --> 00:43:06,280
his book that he created so volume 3 was

1088
00:43:06,280 --> 00:43:07,990
very useful as far as IR and detection

1089
00:43:07,990 --> 00:43:11,050
if you're a detection insulin response

1090
00:43:11,050 --> 00:43:13,180
threat hunter on the Mac OS side I

1091
00:43:13,180 --> 00:43:16,120
highly recommend that book also the

1092
00:43:16,120 --> 00:43:18,760
stuff out there by Objective C anytime

1093
00:43:18,760 --> 00:43:20,680
that there's some malware that's been

1094
00:43:20,680 --> 00:43:22,900
put out there or a user has come across

1095
00:43:22,900 --> 00:43:25,060
that's my go-to resource to actually

1096
00:43:25,060 --> 00:43:26,710
pull apart some of the indicators from

1097
00:43:26,710 --> 00:43:29,140
that and also better than that the

1098
00:43:29,140 --> 00:43:30,970
tactic and the techniques that were used

1099
00:43:30,970 --> 00:43:33,700
to actually build some really robust

1100
00:43:33,700 --> 00:43:37,180
detections off of and also some of the

1101
00:43:37,180 --> 00:43:38,140
stuff that's put out there by

1102
00:43:38,140 --> 00:43:39,790
malwarebytes especially the new

1103
00:43:39,790 --> 00:43:42,580
cryptocurrency ticker that was that was

1104
00:43:42,580 --> 00:43:45,130
put out there in the wild so those are

1105
00:43:45,130 --> 00:43:46,330
some of the resources that you can use

1106
00:43:46,330 --> 00:43:49,480
especially for IR and instant eye R and

1107
00:43:49,480 --> 00:43:52,540
throw hunting on Mac OS this time I'll

1108
00:43:52,540 --> 00:43:54,520
take any questions you can find me at

1109
00:43:54,520 --> 00:43:59,220
twitter on at our cyrus thank you

1110
00:43:59,220 --> 00:44:08,890
[Applause]

1111
00:44:08,960 --> 00:44:20,730
no questions yeah

1112
00:44:20,730 --> 00:44:22,980
so the command-line arguments that data

1113
00:44:22,980 --> 00:44:25,620
source actually came from ex Newman so

1114
00:44:25,620 --> 00:44:27,570
ex Newman was running on the system and

1115
00:44:27,570 --> 00:44:29,880
ex Newman gives you the process

1116
00:44:29,880 --> 00:44:31,830
command-line arguments the process

1117
00:44:31,830 --> 00:44:34,710
itself and then also the ancestry back

1118
00:44:34,710 --> 00:44:38,040
all the way down to the launch D so the

1119
00:44:38,040 --> 00:44:39,840
question was what was the the file

1120
00:44:39,840 --> 00:44:43,680
source that was used or shown and the

1121
00:44:43,680 --> 00:44:48,380
demo any more questions

1122
00:44:48,380 --> 00:45:04,680
Patrick yeah so I haven't seen it

1123
00:45:04,680 --> 00:45:06,480
specifically for ex Newman but there's

1124
00:45:06,480 --> 00:45:08,100
some tools out there they're tests like

1125
00:45:08,100 --> 00:45:12,210
actually show signs of trying to detect

1126
00:45:12,210 --> 00:45:13,830
things like Little Snitch being on a

1127
00:45:13,830 --> 00:45:16,200
system existing on already and so if it

1128
00:45:16,200 --> 00:45:18,960
sees that then the malware might execute

1129
00:45:18,960 --> 00:45:21,410
a different way but in his check for

1130
00:45:21,410 --> 00:45:23,910
trying to determine whether Little

1131
00:45:23,910 --> 00:45:26,010
Snitch exists on the system that's also

1132
00:45:26,010 --> 00:45:28,890
opportunity as a defender to log that

1133
00:45:28,890 --> 00:45:31,650
and look for that technique being used

1134
00:45:31,650 --> 00:45:33,750
so checking for existing tools on the

1135
00:45:33,750 --> 00:45:41,160
system yeah so that's another thing that

1136
00:45:41,160 --> 00:45:42,090
you could key off of that you could

1137
00:45:42,090 --> 00:45:43,710
probably do a detection for is that

1138
00:45:43,710 --> 00:45:45,930
enumeration of a system so the fact that

1139
00:45:45,930 --> 00:45:48,300
someone used like something like PS or

1140
00:45:48,300 --> 00:45:50,580
like top or something like that if if

1141
00:45:50,580 --> 00:45:52,470
you have contacts around the host that

1142
00:45:52,470 --> 00:45:53,850
that came from if that's someone in

1143
00:45:53,850 --> 00:45:57,420
finance or someone that's in a sector

1144
00:45:57,420 --> 00:45:58,860
that you wouldn't expect them to use

1145
00:45:58,860 --> 00:46:00,900
that command you just alter it start to

1146
00:46:00,900 --> 00:46:05,430
build detections off of that as well any

1147
00:46:05,430 --> 00:46:07,940
additional questions

1148
00:46:18,270 --> 00:46:21,670
so the question was is it hard to kind

1149
00:46:21,670 --> 00:46:24,520
of delineate or work with MDM products

1150
00:46:24,520 --> 00:46:26,680
that exist on Mac OS systems while

1151
00:46:26,680 --> 00:46:28,150
running some of the monitoring tools

1152
00:46:28,150 --> 00:46:31,750
I'll discussed it's not hard so as a

1153
00:46:31,750 --> 00:46:34,480
defender or a threat hunter the first

1154
00:46:34,480 --> 00:46:35,800
thing well the main thing that you want

1155
00:46:35,800 --> 00:46:38,080
to do before you actually start to hunt

1156
00:46:38,080 --> 00:46:40,420
right or build the hunt team is actually

1157
00:46:40,420 --> 00:46:42,790
start to baseline some of the activity

1158
00:46:42,790 --> 00:46:44,770
or some of the tools or resources that

1159
00:46:44,770 --> 00:46:46,870
are used on yours on your system so you

1160
00:46:46,870 --> 00:46:48,610
would actually take like a gold image or

1161
00:46:48,610 --> 00:46:51,850
baseline image and then understand what

1162
00:46:51,850 --> 00:46:53,830
that activity looks like right and then

1163
00:46:53,830 --> 00:46:56,080
now you can exclude that activity from

1164
00:46:56,080 --> 00:46:58,450
whatever exists out there on user system

1165
00:46:58,450 --> 00:47:00,310
so you would know that you would have an

1166
00:47:00,310 --> 00:47:02,650
MDM in place and what that MDM does from

1167
00:47:02,650 --> 00:47:04,570
a system perspective and then you would

1168
00:47:04,570 --> 00:47:07,000
exclude that out so that's one of the

1169
00:47:07,000 --> 00:47:09,040
blind spots to unfortunately is that an

1170
00:47:09,040 --> 00:47:11,320
attacker maybe they get access to the

1171
00:47:11,320 --> 00:47:12,400
MDM client

1172
00:47:12,400 --> 00:47:14,260
somewhere on the on a you know

1173
00:47:14,260 --> 00:47:16,330
environment and now they're executing

1174
00:47:16,330 --> 00:47:18,430
things on behalf of the MDM client where

1175
00:47:18,430 --> 00:47:19,930
you just excluded that but you would

1176
00:47:19,930 --> 00:47:22,630
state that blind spot and you know and

1177
00:47:22,630 --> 00:47:30,900
documentation any more questions Mahalo

1178
00:47:31,040 --> 00:47:39,130
[Applause]

1179
00:47:45,330 --> 00:47:47,500
awesome Richie that was an incredible

1180
00:47:47,500 --> 00:47:49,740
talk

