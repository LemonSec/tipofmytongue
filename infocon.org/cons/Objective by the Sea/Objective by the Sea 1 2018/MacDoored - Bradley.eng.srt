1
00:00:00,030 --> 00:00:02,220
so now without further ado I'm going to

2
00:00:02,220 --> 00:00:05,160
introduce our first speaker mr. Gerron

3
00:00:05,160 --> 00:00:07,440
Bradley I think I was supposed to have

4
00:00:07,440 --> 00:00:10,019
something prepared to talk about Jaron

5
00:00:10,019 --> 00:00:11,700
but I'm just gonna kind of wing this

6
00:00:11,700 --> 00:00:13,620
Jaron it's a really good friend of mine

7
00:00:13,620 --> 00:00:15,360
he works at CrowdStrike

8
00:00:15,360 --> 00:00:18,270
used to work live on the Big Island so I

9
00:00:18,270 --> 00:00:20,220
thought it was only fitting that we kick

10
00:00:20,220 --> 00:00:27,210
off the conference with a talk speaker

11
00:00:27,210 --> 00:00:28,949
he's gonna be talking about some really

12
00:00:28,949 --> 00:00:31,920
cool stuff he does at CrowdStrike and so

13
00:00:31,920 --> 00:00:34,320
without further ado let's give a round

14
00:00:34,320 --> 00:00:45,930
of applause for mr. Gerron Bradley thank

15
00:00:45,930 --> 00:01:02,309
you for that alright hello everybody and

16
00:01:02,309 --> 00:01:04,290
thanks so much for having me here at

17
00:01:04,290 --> 00:01:07,140
objective by the sea I I get to put on

18
00:01:07,140 --> 00:01:08,580
my resume now that I am the first

19
00:01:08,580 --> 00:01:10,619
speaker at the first ever objective by

20
00:01:10,619 --> 00:01:12,180
the sea and I think that's gonna be

21
00:01:12,180 --> 00:01:15,210
worth something someday so really stoked

22
00:01:15,210 --> 00:01:17,430
to be here like Patrick said I live for

23
00:01:17,430 --> 00:01:18,600
some time on the Big Island and

24
00:01:18,600 --> 00:01:20,850
absolutely loved it so this is a great

25
00:01:20,850 --> 00:01:23,340
way for me to come back and use it as an

26
00:01:23,340 --> 00:01:24,930
excuse to go visit some friends over in

27
00:01:24,930 --> 00:01:26,610
Hilo and it's just been it's been an

28
00:01:26,610 --> 00:01:29,460
awesome week and yeah super stoked to be

29
00:01:29,460 --> 00:01:30,630
here and see some of the talks that are

30
00:01:30,630 --> 00:01:33,600
coming up so what I want to talk to you

31
00:01:33,600 --> 00:01:35,759
today I bring you a presentation called

32
00:01:35,759 --> 00:01:38,520
Mac doored so this is actually just a

33
00:01:38,520 --> 00:01:39,960
look into some of the analysis we've

34
00:01:39,960 --> 00:01:43,320
been doing on different attacker post

35
00:01:43,320 --> 00:01:47,040
exploitation so in in recent years you

36
00:01:47,040 --> 00:01:48,479
know we've seen a whole lot of posts on

37
00:01:48,479 --> 00:01:51,750
windows and on on attackers moving

38
00:01:51,750 --> 00:01:53,250
around and networks and what commands

39
00:01:53,250 --> 00:01:54,990
are using and different exploits and all

40
00:01:54,990 --> 00:01:57,090
this stuff but that's kind of remained a

41
00:01:57,090 --> 00:02:01,200
bit of a mystery on Mac and in the past

42
00:02:01,200 --> 00:02:02,250
few years you know we've seen a lot of

43
00:02:02,250 --> 00:02:03,869
backdoors come to light we've seen a lot

44
00:02:03,869 --> 00:02:05,430
of vulnerabilities come to light on Mac

45
00:02:05,430 --> 00:02:09,030
OS but the what the attackers are doing

46
00:02:09,030 --> 00:02:10,560
after they use those back doors and get

47
00:02:10,560 --> 00:02:11,810
into the system

48
00:02:11,810 --> 00:02:13,520
has still remained a bit of a mystery so

49
00:02:13,520 --> 00:02:15,650
hopefully I can shed some light on that

50
00:02:15,650 --> 00:02:16,790
for you today if you're not familiar

51
00:02:16,790 --> 00:02:21,680
with it just a little bit about me like

52
00:02:21,680 --> 00:02:24,349
I said my name is Gerren I started as an

53
00:02:24,349 --> 00:02:26,840
incident responder and just absolutely

54
00:02:26,840 --> 00:02:29,900
loved it really got into it when I saw

55
00:02:29,900 --> 00:02:31,220
this whole endpoint thing coming to

56
00:02:31,220 --> 00:02:32,540
light I wanted to get involved with that

57
00:02:32,540 --> 00:02:34,819
so I moved to CrowdStrike where I've

58
00:02:34,819 --> 00:02:38,239
been now about about five years just

59
00:02:38,239 --> 00:02:42,980
over that and it's been great so I'd

60
00:02:42,980 --> 00:02:44,239
initially come over after CrowdStrike

61
00:02:44,239 --> 00:02:45,950
had set up this infrastructure where we

62
00:02:45,950 --> 00:02:48,410
were collecting collecting data from

63
00:02:48,410 --> 00:02:50,660
endpoints and they needed analysts to go

64
00:02:50,660 --> 00:02:52,970
through the data and write detection z'

65
00:02:52,970 --> 00:02:56,810
with it and do the analysis on it and i

66
00:02:56,810 --> 00:02:59,030
focused a lot on mac OS because i felt

67
00:02:59,030 --> 00:03:00,440
like it was a platform that just wasn't

68
00:03:00,440 --> 00:03:02,630
getting enough attention so I focused on

69
00:03:02,630 --> 00:03:04,250
it so much that I eventually got asked

70
00:03:04,250 --> 00:03:06,290
to move the engineering team where I put

71
00:03:06,290 --> 00:03:07,640
some of these sensor detection z' in

72
00:03:07,640 --> 00:03:11,569
place at the at the sensor level which

73
00:03:11,569 --> 00:03:13,280
was which was a whole lot of fun and

74
00:03:13,280 --> 00:03:16,190
then finally i i've moved to a research

75
00:03:16,190 --> 00:03:18,320
team called strategic counter

76
00:03:18,320 --> 00:03:21,410
adversarial research or scar if you will

77
00:03:21,410 --> 00:03:25,190
and on that team it's just a small team

78
00:03:25,190 --> 00:03:26,989
of us who have been at the company for a

79
00:03:26,989 --> 00:03:30,019
while where we're able to focus on still

80
00:03:30,019 --> 00:03:31,609
writing detections and still doing that

81
00:03:31,609 --> 00:03:33,260
mac OS research that i've been doing but

82
00:03:33,260 --> 00:03:36,560
enabling new systems for analysts who to

83
00:03:36,560 --> 00:03:39,109
write detection z' themselves so it's

84
00:03:39,109 --> 00:03:42,019
been a whole lot of fun I am also an

85
00:03:42,019 --> 00:03:44,690
author of OS X incident response

86
00:03:44,690 --> 00:03:47,420
scripting an analysis yes OSX is in the

87
00:03:47,420 --> 00:03:50,000
title instead of Mac OS I released this

88
00:03:50,000 --> 00:03:52,459
book after about a year of working on it

89
00:03:52,459 --> 00:03:54,200
and then I think it was like two weeks

90
00:03:54,200 --> 00:03:56,540
later Apple changed the name of the

91
00:03:56,540 --> 00:04:00,319
operating system so like two weeks and

92
00:04:00,319 --> 00:04:02,810
my book title was already outdated but a

93
00:04:02,810 --> 00:04:04,040
lot of the content and it's still

94
00:04:04,040 --> 00:04:05,180
relevant so if you like what you see

95
00:04:05,180 --> 00:04:07,459
today feel free to check that out on

96
00:04:07,459 --> 00:04:10,730
Amazon this is back when Patrick was

97
00:04:10,730 --> 00:04:12,049
doing a whole bunch of blog post it's

98
00:04:12,049 --> 00:04:13,370
all pretty much just a copy and paste

99
00:04:13,370 --> 00:04:16,030
job anyway so

100
00:04:17,890 --> 00:04:22,280
no questions so just a bit of what we're

101
00:04:22,280 --> 00:04:23,480
gonna cover today mainly we're gonna

102
00:04:23,480 --> 00:04:26,540
we're gonna walk through just an

103
00:04:26,540 --> 00:04:30,560
attacker session where they had come in

104
00:04:30,560 --> 00:04:33,890
to come into a network and moved around

105
00:04:33,890 --> 00:04:35,270
and done a whole bunch of stuff so we'll

106
00:04:35,270 --> 00:04:38,450
focus mainly on one one scenario in one

107
00:04:38,450 --> 00:04:39,950
use case but I'll have a couple

108
00:04:39,950 --> 00:04:41,930
different things in here so that's

109
00:04:41,930 --> 00:04:43,070
that's primarily what we're gonna focus

110
00:04:43,070 --> 00:04:46,520
on here just before we get into it the

111
00:04:46,520 --> 00:04:48,680
importance of the process tree so with

112
00:04:48,680 --> 00:04:52,220
the endpoint we we put a lot of we put a

113
00:04:52,220 --> 00:04:54,320
lot of focus in our hunting on on

114
00:04:54,320 --> 00:04:56,270
processed tree behavior in general so in

115
00:04:56,270 --> 00:04:58,940
my screenshots you see you'll see a

116
00:04:58,940 --> 00:05:00,920
whole lot of process trees because

117
00:05:00,920 --> 00:05:02,870
that's that's how we do our hunting for

118
00:05:02,870 --> 00:05:05,120
the most part but basically we do this

119
00:05:05,120 --> 00:05:06,730
because the process tree gives you

120
00:05:06,730 --> 00:05:09,590
context into a detection or event that

121
00:05:09,590 --> 00:05:12,860
occurred so in this case the suitors

122
00:05:12,860 --> 00:05:14,810
file being modified it's just a silly

123
00:05:14,810 --> 00:05:17,150
little example but you know if you have

124
00:05:17,150 --> 00:05:18,440
a user on the system you want to give

125
00:05:18,440 --> 00:05:19,820
them pseudo permissions you can go to

126
00:05:19,820 --> 00:05:22,820
the Etsy sudoers file and you can you

127
00:05:22,820 --> 00:05:25,010
can add them to that and now you have

128
00:05:25,010 --> 00:05:27,380
you have the capability to use to go so

129
00:05:27,380 --> 00:05:28,820
let's say if we cared about that

130
00:05:28,820 --> 00:05:30,290
happening we might write a little event

131
00:05:30,290 --> 00:05:32,960
for that and and in this case the

132
00:05:32,960 --> 00:05:35,270
context is we see the parent of that or

133
00:05:35,270 --> 00:05:36,950
we see that the reason that file was

134
00:05:36,950 --> 00:05:39,530
modified was due to vim which is

135
00:05:39,530 --> 00:05:41,480
manually you know nobody really uses

136
00:05:41,480 --> 00:05:44,060
them to automate stuff maybe we do I

137
00:05:44,060 --> 00:05:46,520
don't but the parent of that is bash

138
00:05:46,520 --> 00:05:48,020
which is pretty typical and then in this

139
00:05:48,020 --> 00:05:50,060
case the parent is jamp or a third party

140
00:05:50,060 --> 00:05:52,190
administrative software so based on this

141
00:05:52,190 --> 00:05:53,600
process tree we can kind of make the

142
00:05:53,600 --> 00:05:57,020
assumption that that this was probably

143
00:05:57,020 --> 00:05:58,850
an administrator coming in and adding

144
00:05:58,850 --> 00:06:01,130
the user to the suger's file as we're in

145
00:06:01,130 --> 00:06:03,020
the second process tree you followed up

146
00:06:03,020 --> 00:06:04,250
the chain you see vim was still

147
00:06:04,250 --> 00:06:06,350
responsible but up the chain we see that

148
00:06:06,350 --> 00:06:09,140
a file called a running out of the temp

149
00:06:09,140 --> 00:06:12,470
directory was actually responsible and

150
00:06:12,470 --> 00:06:14,360
if you've done any Incident Response

151
00:06:14,360 --> 00:06:16,190
you'll know that single letter

152
00:06:16,190 --> 00:06:17,840
executables doing suspicious things

153
00:06:17,840 --> 00:06:20,570
they're never usually a good sign so

154
00:06:20,570 --> 00:06:23,360
this is this is just an example of how

155
00:06:23,360 --> 00:06:24,440
how we use

156
00:06:24,440 --> 00:06:27,740
this tree hunting here's another use

157
00:06:27,740 --> 00:06:29,630
case this is actually a real-world use

158
00:06:29,630 --> 00:06:33,650
case here at the bottom of the screen at

159
00:06:33,650 --> 00:06:35,090
the bottom of the process tree you see

160
00:06:35,090 --> 00:06:38,840
the commands DSC LPL util defaults and

161
00:06:38,840 --> 00:06:41,030
TR now these process trees are usually

162
00:06:41,030 --> 00:06:42,560
interactive for us so we can click on

163
00:06:42,560 --> 00:06:45,020
them see the command lines see the file

164
00:06:45,020 --> 00:06:47,060
paths of where they ran and all that but

165
00:06:47,060 --> 00:06:48,710
all I have is a screen shot to work with

166
00:06:48,710 --> 00:06:50,330
here so bear with me

167
00:06:50,330 --> 00:06:52,700
so these commands getting executed are

168
00:06:52,700 --> 00:06:54,200
generally a sign that passwords were

169
00:06:54,200 --> 00:06:56,300
dumped from the from the DS local nodes

170
00:06:56,300 --> 00:06:59,450
file so what this is doing the the

171
00:06:59,450 --> 00:07:01,130
attacker actually setup something to go

172
00:07:01,130 --> 00:07:04,790
and dump dump the hashes for every

173
00:07:04,790 --> 00:07:07,040
single user so using these commands you

174
00:07:07,040 --> 00:07:08,390
can kind of reconstruct a hash and then

175
00:07:08,390 --> 00:07:11,480
crack it offline wherever you want so

176
00:07:11,480 --> 00:07:13,400
that's kind of a yellow flag number one

177
00:07:13,400 --> 00:07:15,710
down at the bottom there passwords being

178
00:07:15,710 --> 00:07:19,120
dumped some software puppet for example

179
00:07:19,120 --> 00:07:22,100
will we'll go through and actually try

180
00:07:22,100 --> 00:07:23,240
and help manage some password

181
00:07:23,240 --> 00:07:25,010
information and therefore it will access

182
00:07:25,010 --> 00:07:28,160
the shadow hash data so you can't just

183
00:07:28,160 --> 00:07:29,810
assume because the shadow hash data was

184
00:07:29,810 --> 00:07:32,300
accessed that that's something malicious

185
00:07:32,300 --> 00:07:34,220
was done there's a lot of analysis that

186
00:07:34,220 --> 00:07:36,590
goes into it but in this case if you

187
00:07:36,590 --> 00:07:40,280
take the parent of the password dumping

188
00:07:40,280 --> 00:07:42,070
commands you'll see that it's a randomly

189
00:07:42,070 --> 00:07:44,950
randomly named eight letter process and

190
00:07:44,950 --> 00:07:46,970
if I could click on that you would see

191
00:07:46,970 --> 00:07:48,020
that it's running out of the temp

192
00:07:48,020 --> 00:07:49,820
directory so once again pretty

193
00:07:49,820 --> 00:07:52,040
suspicious the parent of that is a four

194
00:07:52,040 --> 00:07:54,950
letter process running once again out of

195
00:07:54,950 --> 00:07:58,010
the temp directory so that's that's

196
00:07:58,010 --> 00:08:00,610
another yellow flag is temp directory

197
00:08:00,610 --> 00:08:03,050
temp directory processes dumping the

198
00:08:03,050 --> 00:08:04,940
passwords just a little bit shady there

199
00:08:04,940 --> 00:08:07,100
and then finally to top it all off if

200
00:08:07,100 --> 00:08:09,500
you take this a step higher we see that

201
00:08:09,500 --> 00:08:12,080
the ultimately responsible for this is

202
00:08:12,080 --> 00:08:15,320
the Google Chrome helper process that is

203
00:08:15,320 --> 00:08:17,810
the browser renderer and not Google

204
00:08:17,810 --> 00:08:19,880
Chrome itself so really the browser

205
00:08:19,880 --> 00:08:23,150
render definitely has no reason to to be

206
00:08:23,150 --> 00:08:24,590
dumping passwords or running anything

207
00:08:24,590 --> 00:08:26,630
out of the temp directory it's uh it's

208
00:08:26,630 --> 00:08:28,700
behavior should be very limited in terms

209
00:08:28,700 --> 00:08:31,160
of in terms of you know any type of

210
00:08:31,160 --> 00:08:33,380
execs so this was something we found in

211
00:08:33,380 --> 00:08:35,809
the wild an actor using to to exploit

212
00:08:35,809 --> 00:08:37,190
Google Chrome and

213
00:08:37,190 --> 00:08:38,870
this is a while back at this point but

214
00:08:38,870 --> 00:08:41,390
it's still my kind of proof of concept

215
00:08:41,390 --> 00:08:44,210
for hey like bad stuff gets developed

216
00:08:44,210 --> 00:08:46,640
for Mac too you know this was definitely

217
00:08:46,640 --> 00:08:48,890
this was definitely target at Mac users

218
00:08:48,890 --> 00:08:50,420
and not something that you know we saw

219
00:08:50,420 --> 00:08:53,089
happening on Windows anywhere so pretty

220
00:08:53,089 --> 00:08:58,130
cool all right so before I get into the

221
00:08:58,130 --> 00:09:00,110
the intrusion just some detection

222
00:09:00,110 --> 00:09:01,760
analysis difficulties if you've been

223
00:09:01,760 --> 00:09:03,740
working on Mac to do security you're

224
00:09:03,740 --> 00:09:05,150
probably aware that there are you know

225
00:09:05,150 --> 00:09:07,070
some hiccups like some stuff is very

226
00:09:07,070 --> 00:09:08,450
difficult these are just some of the

227
00:09:08,450 --> 00:09:11,960
major things that I note and one of

228
00:09:11,960 --> 00:09:14,029
those big things is all the attack all

229
00:09:14,029 --> 00:09:15,860
the commands an attacker could ever need

230
00:09:15,860 --> 00:09:18,250
are already on the operating system so

231
00:09:18,250 --> 00:09:22,070
this idea of this idea of living off the

232
00:09:22,070 --> 00:09:25,820
land that is now windows is kind of a

233
00:09:25,820 --> 00:09:28,490
it's not a new concept but it's we see

234
00:09:28,490 --> 00:09:30,050
more actors trying to enforce that

235
00:09:30,050 --> 00:09:31,640
living off the land idea with PowerShell

236
00:09:31,640 --> 00:09:34,430
and with more script based backdoors and

237
00:09:34,430 --> 00:09:35,630
that type of thing

238
00:09:35,630 --> 00:09:38,750
as where on UNIX you know Linux Mac like

239
00:09:38,750 --> 00:09:40,580
that that concept has been around

240
00:09:40,580 --> 00:09:43,400
forever so attackers getting on UNIX

241
00:09:43,400 --> 00:09:46,010
systems are already pretty familiar with

242
00:09:46,010 --> 00:09:47,900
the ways they can go about attacking it

243
00:09:47,900 --> 00:09:49,700
without having to download a whole bunch

244
00:09:49,700 --> 00:09:52,910
of extra tools now some actors still

245
00:09:52,910 --> 00:09:55,220
choose to which is interesting to me I

246
00:09:55,220 --> 00:09:56,540
think living off the land is much more

247
00:09:56,540 --> 00:10:00,230
stealthy but I'll get into that a little

248
00:10:00,230 --> 00:10:03,020
bit later so because because these

249
00:10:03,020 --> 00:10:04,400
commands have been around forever and

250
00:10:04,400 --> 00:10:06,170
and living off the land isn't a new

251
00:10:06,170 --> 00:10:08,570
concept on UNIX admin and attacker

252
00:10:08,570 --> 00:10:10,640
activity can all can frequently look

253
00:10:10,640 --> 00:10:14,570
like the same thing so these these tools

254
00:10:14,570 --> 00:10:16,459
that attackers are using admins are also

255
00:10:16,459 --> 00:10:21,350
using and and so are developers so I'll

256
00:10:21,350 --> 00:10:22,790
get into some of those examples in a

257
00:10:22,790 --> 00:10:25,459
little bit but that's that's one of the

258
00:10:25,459 --> 00:10:26,870
that's one of the most difficult parts

259
00:10:26,870 --> 00:10:28,940
in analysis is knowing a false-positive

260
00:10:28,940 --> 00:10:32,180
from a developer or from an admin versus

261
00:10:32,180 --> 00:10:34,600
what's what's actually attacker activity

262
00:10:34,600 --> 00:10:36,290
backdoor is being written in many

263
00:10:36,290 --> 00:10:38,089
different languages so it's not just you

264
00:10:38,089 --> 00:10:40,339
know it's not just ma Co executables you

265
00:10:40,339 --> 00:10:41,390
got to worry about you got to worry

266
00:10:41,390 --> 00:10:42,589
about a lot of different scripting

267
00:10:42,589 --> 00:10:43,730
languages and a lot of different

268
00:10:43,730 --> 00:10:45,350
backdoors written in those languages I

269
00:10:45,350 --> 00:10:47,420
mean those hashes can change on the fly

270
00:10:47,420 --> 00:10:49,400
by just adding a space you know

271
00:10:49,400 --> 00:10:53,630
your to your script so that that can

272
00:10:53,630 --> 00:10:56,480
sometimes make things more difficult and

273
00:10:56,480 --> 00:10:58,160
then finally the malware sample size

274
00:10:58,160 --> 00:11:00,110
being a lot smaller now like I said this

275
00:11:00,110 --> 00:11:01,280
is beginning to change and we're seeing

276
00:11:01,280 --> 00:11:03,710
more Mac malware but compared to Windows

277
00:11:03,710 --> 00:11:05,690
right it's it's a very small sample set

278
00:11:05,690 --> 00:11:09,020
so taking what we can from those malware

279
00:11:09,020 --> 00:11:10,640
samples that do exist and being able to

280
00:11:10,640 --> 00:11:12,920
write detections from them is it's very

281
00:11:12,920 --> 00:11:14,420
important at this at this state

282
00:11:14,420 --> 00:11:19,760
especially okay so the intrusion that

283
00:11:19,760 --> 00:11:21,500
I'll actually be walking through this is

284
00:11:21,500 --> 00:11:22,700
just kind of an example of a process

285
00:11:22,700 --> 00:11:24,860
tree a standard process see the tree

286
00:11:24,860 --> 00:11:26,300
that would be created by the attacker

287
00:11:26,300 --> 00:11:28,910
not almost every system he made it on to

288
00:11:28,910 --> 00:11:31,010
so the attacker would come in through

289
00:11:31,010 --> 00:11:33,830
SSH on most systems they got to the

290
00:11:33,830 --> 00:11:37,780
network we highly suspect a Spearfish

291
00:11:37,780 --> 00:11:41,300
that that occurred and then with that

292
00:11:41,300 --> 00:11:44,390
spear fish they had credentials ready to

293
00:11:44,390 --> 00:11:46,340
move about around the network and I'll

294
00:11:46,340 --> 00:11:48,560
get into that in - once I get to the

295
00:11:48,560 --> 00:11:50,930
lateral movement section but when you

296
00:11:50,930 --> 00:11:53,480
login with SSH a new sshd instance is

297
00:11:53,480 --> 00:11:55,190
created and naturally you get a new

298
00:11:55,190 --> 00:11:57,080
shell and then everything spawning from

299
00:11:57,080 --> 00:11:58,610
that shell would then be attacker

300
00:11:58,610 --> 00:12:04,100
activity so recon not super interesting

301
00:12:04,100 --> 00:12:05,900
you know it's recon but there's some

302
00:12:05,900 --> 00:12:07,430
important notes to take away from it so

303
00:12:07,430 --> 00:12:09,770
coming in through SSH recon always came

304
00:12:09,770 --> 00:12:13,970
first the I thought it was interesting

305
00:12:13,970 --> 00:12:17,120
to note that the attacker would run some

306
00:12:17,120 --> 00:12:19,820
of the Mac unique commands for recon and

307
00:12:19,820 --> 00:12:22,400
this this actually tells us that he knew

308
00:12:22,400 --> 00:12:24,170
he was targeting a Mac you know we see a

309
00:12:24,170 --> 00:12:26,690
lot of attackers like just running SSH

310
00:12:26,690 --> 00:12:28,430
brute force errs and they they end up

311
00:12:28,430 --> 00:12:29,900
getting into a system and then they run

312
00:12:29,900 --> 00:12:32,450
some Linux commands even though they

313
00:12:32,450 --> 00:12:34,340
don't realize they're on a Mac system so

314
00:12:34,340 --> 00:12:35,270
the attacker knew what they were

315
00:12:35,270 --> 00:12:37,250
targeting in this case because they jump

316
00:12:37,250 --> 00:12:38,810
into running the Mac specific commands

317
00:12:38,810 --> 00:12:42,770
right away and SW versus just kind of

318
00:12:42,770 --> 00:12:44,540
spits back some some basic information

319
00:12:44,540 --> 00:12:47,060
about the version of OS X your on system

320
00:12:47,060 --> 00:12:49,100
profiler you use the right arguments and

321
00:12:49,100 --> 00:12:51,920
you get just a huge dump of hardware

322
00:12:51,920 --> 00:12:54,440
information and all this basically it's

323
00:12:54,440 --> 00:12:56,630
the extremely long version of esto

324
00:12:56,630 --> 00:12:59,990
Huber's de sel list users again Mac

325
00:12:59,990 --> 00:13:01,360
specific or

326
00:13:01,360 --> 00:13:04,240
or Mac specific just a way to kind of

327
00:13:04,240 --> 00:13:06,760
cat the Etsy password file but say show

328
00:13:06,760 --> 00:13:08,490
me the users and the service users

329
00:13:08,490 --> 00:13:10,649
without having to see the extra noise

330
00:13:10,649 --> 00:13:15,970
and then ping obviously not Mac specific

331
00:13:15,970 --> 00:13:19,019
but I note this because of how

332
00:13:19,019 --> 00:13:21,459
frequently it was used instead of

333
00:13:21,459 --> 00:13:24,700
bringing a scanner of some type you know

334
00:13:24,700 --> 00:13:26,230
an nmap scanner a port scanner or

335
00:13:26,230 --> 00:13:27,899
whatever they would actually just ping

336
00:13:27,899 --> 00:13:30,490
every system they could and they do it

337
00:13:30,490 --> 00:13:32,200
all manually that wasn't scripted out so

338
00:13:32,200 --> 00:13:34,660
just and this in this log of commands we

339
00:13:34,660 --> 00:13:36,370
have it's just a massive amount of ping

340
00:13:36,370 --> 00:13:38,769
command some - c1 saying you know just

341
00:13:38,769 --> 00:13:41,560
ping once and and then stop

342
00:13:41,560 --> 00:13:43,870
dig dig was also used a lot to

343
00:13:43,870 --> 00:13:46,000
investigate different systems and then

344
00:13:46,000 --> 00:13:47,589
another interesting one I thought was

345
00:13:47,589 --> 00:13:50,620
the DNS - SD command if you don't know

346
00:13:50,620 --> 00:13:52,450
this one check out the man page it's

347
00:13:52,450 --> 00:13:54,310
it's actually pretty interesting and it

348
00:13:54,310 --> 00:13:59,230
replaces the old mdns command and it

349
00:13:59,230 --> 00:14:01,420
basically allows you to do a kind of

350
00:14:01,420 --> 00:14:04,570
like a scan for the Bonjour enabled

351
00:14:04,570 --> 00:14:08,130
systems that are broadcasting some

352
00:14:08,130 --> 00:14:10,449
services so in this case the attacker

353
00:14:10,449 --> 00:14:12,790
would scan for other systems that were

354
00:14:12,790 --> 00:14:16,209
broadcasting SSH and that's all that's

355
00:14:16,209 --> 00:14:17,589
all in the man page and it's a pretty

356
00:14:17,589 --> 00:14:19,870
cool command but kind of built in really

357
00:14:19,870 --> 00:14:21,760
good recon for for an attacker to have

358
00:14:21,760 --> 00:14:28,240
access to okay so the backdoor so the

359
00:14:28,240 --> 00:14:30,130
attacker coming in over SSH would not be

360
00:14:30,130 --> 00:14:32,050
his main way to you know maintain

361
00:14:32,050 --> 00:14:34,449
persistence and and login and all that

362
00:14:34,449 --> 00:14:36,010
after he came in through SSH he would

363
00:14:36,010 --> 00:14:38,680
set up a backdoor all done manually

364
00:14:38,680 --> 00:14:40,420
through manual commands he didn't script

365
00:14:40,420 --> 00:14:42,040
it out or anything and this was multiple

366
00:14:42,040 --> 00:14:43,839
systems that he was moving laterally

367
00:14:43,839 --> 00:14:46,930
about so coming in through SSH the first

368
00:14:46,930 --> 00:14:50,110
command you see there at the top is what

369
00:14:50,110 --> 00:14:52,180
would be executed first after all the

370
00:14:52,180 --> 00:14:55,269
recon so this IP address hosted a number

371
00:14:55,269 --> 00:14:57,820
of different tools and in this case the

372
00:14:57,820 --> 00:14:59,920
attacker is downloading a binary called

373
00:14:59,920 --> 00:15:03,790
TSS D this is a mock Oh executable and

374
00:15:03,790 --> 00:15:06,279
so he'd pull that down give it give it

375
00:15:06,279 --> 00:15:08,589
executable permissions and then rename

376
00:15:08,589 --> 00:15:10,240
it to something a little little

377
00:15:10,240 --> 00:15:11,560
something that blends in a little better

378
00:15:11,560 --> 00:15:14,259
in this case our util so

379
00:15:14,259 --> 00:15:16,569
Mac OS includes a binary on it already

380
00:15:16,569 --> 00:15:20,679
called r2 util so this just this just I

381
00:15:20,679 --> 00:15:23,079
don't know looks like r1 utility or

382
00:15:23,079 --> 00:15:24,729
something he thinks I don't know he

383
00:15:24,729 --> 00:15:27,100
renames it and he's working out of the

384
00:15:27,100 --> 00:15:29,739
user local bin directory in this case so

385
00:15:29,739 --> 00:15:31,629
we now have an executable called user

386
00:15:31,629 --> 00:15:34,839
local bin are you till the touch command

387
00:15:34,839 --> 00:15:36,879
I'll get into that in the cleanup

388
00:15:36,879 --> 00:15:39,789
section looks at it with LS and then

389
00:15:39,789 --> 00:15:43,209
VIMS a file at C cash hidden file in the

390
00:15:43,209 --> 00:15:45,100
SC folder and this actually just

391
00:15:45,100 --> 00:15:50,879
contains a masked c2 and the port number

392
00:15:50,879 --> 00:15:53,799
inside of it masked by some xor key

393
00:15:53,799 --> 00:15:56,379
I believe finally he changes the

394
00:15:56,379 --> 00:15:58,059
permissions on it so somebody's less

395
00:15:58,059 --> 00:16:01,289
likely to stumble into it

396
00:16:02,399 --> 00:16:05,229
so that was not the only backdoor we saw

397
00:16:05,229 --> 00:16:09,069
in this single intrusion in fact there

398
00:16:09,069 --> 00:16:12,069
was a lot more but there were three in

399
00:16:12,069 --> 00:16:14,769
this intrusion that the attacker would

400
00:16:14,769 --> 00:16:16,149
actually pulled down and it seemed like

401
00:16:16,149 --> 00:16:18,249
he'd pulled him down based on the

402
00:16:18,249 --> 00:16:22,629
version based on the version of OS X he

403
00:16:22,629 --> 00:16:24,009
was on now we only got one of these

404
00:16:24,009 --> 00:16:26,499
binaries actually back to play with so

405
00:16:26,499 --> 00:16:28,119
that might not be accurate he could also

406
00:16:28,119 --> 00:16:30,429
just be pulling down different versions

407
00:16:30,429 --> 00:16:32,829
of the back doors so that static

408
00:16:32,829 --> 00:16:35,489
analysis is less likely to uncover him

409
00:16:35,489 --> 00:16:38,199
or so that you know the same hash

410
00:16:38,199 --> 00:16:40,089
doesn't exist on three different systems

411
00:16:40,089 --> 00:16:42,759
or whatever but we saw three different

412
00:16:42,759 --> 00:16:45,609
three different hashes at play here all

413
00:16:45,609 --> 00:16:49,449
all behaving like the same backdoor but

414
00:16:49,449 --> 00:16:53,949
with different hashes the IP address is

415
00:16:53,949 --> 00:16:55,899
actually if you go back quite a few

416
00:16:55,899 --> 00:16:58,179
years to a Bluecoat report I'd almost I

417
00:16:58,179 --> 00:16:59,999
want to say 2011 or something like that

418
00:16:59,999 --> 00:17:03,339
the the IP address is actually a soda

419
00:17:03,339 --> 00:17:05,859
associated with Wynn nti group or who we

420
00:17:05,859 --> 00:17:09,159
call wicked panda it is interesting that

421
00:17:09,159 --> 00:17:11,949
this IP has was was reported and has

422
00:17:11,949 --> 00:17:15,970
still stuck around in their arsenal for

423
00:17:15,970 --> 00:17:18,878
so long there was also a protect y's

424
00:17:18,878 --> 00:17:22,449
blog post that came out that came out I

425
00:17:22,449 --> 00:17:24,128
think it was last year that spoke to a

426
00:17:24,128 --> 00:17:25,809
lot of the same details seeing the same

427
00:17:25,809 --> 00:17:27,430
IP address used and

428
00:17:27,430 --> 00:17:29,950
spearfishing campaigns against Mac OS

429
00:17:29,950 --> 00:17:34,150
systems so so the the attribution comes

430
00:17:34,150 --> 00:17:37,390
from knowing just the history of this IP

431
00:17:37,390 --> 00:17:40,770
address and that has been used before

432
00:17:40,920 --> 00:17:46,110
the back door itself virustotal actually

433
00:17:46,110 --> 00:17:47,950
when we were originally doing the

434
00:17:47,950 --> 00:17:49,540
analysis on this virustotal didn't have

435
00:17:49,540 --> 00:17:51,640
anything and I think only had maybe even

436
00:17:51,640 --> 00:17:53,770
just one of the hashes we were actually

437
00:17:53,770 --> 00:17:55,510
trying to investigate but even that hash

438
00:17:55,510 --> 00:17:58,660
had zero hits in it from from scanners

439
00:17:58,660 --> 00:18:00,820
now if you check it out

440
00:18:00,820 --> 00:18:03,070
you'll see most of it actually rings up

441
00:18:03,070 --> 00:18:05,260
as kidnapped from a lot of vendors I

442
00:18:05,260 --> 00:18:07,030
don't see any signs of it being

443
00:18:07,030 --> 00:18:09,100
kidnapped I haven't done the reversing

444
00:18:09,100 --> 00:18:12,490
myself but what what are Bursar's

445
00:18:12,490 --> 00:18:17,220
noticed is that this does appear to be a

446
00:18:17,220 --> 00:18:22,000
variant of tiny show which is on pretty

447
00:18:22,000 --> 00:18:24,040
popular on UNIX it's just a it's just a

448
00:18:24,040 --> 00:18:26,800
really small remote shell wrapper kind

449
00:18:26,800 --> 00:18:30,430
of and it works really well for

450
00:18:30,430 --> 00:18:33,100
attackers to use and that's that's what

451
00:18:33,100 --> 00:18:35,050
we noticed it was it also has a config

452
00:18:35,050 --> 00:18:37,390
file which I don't think kidnapp had any

453
00:18:37,390 --> 00:18:40,030
type of config file associated with it

454
00:18:40,030 --> 00:18:41,470
kidnap also did a really popular

455
00:18:41,470 --> 00:18:44,680
technique to dump passwords from

456
00:18:44,680 --> 00:18:47,920
security D when it could get plaintext

457
00:18:47,920 --> 00:18:49,600
passwords from that and even on the

458
00:18:49,600 --> 00:18:50,860
outdated systems that we saw the

459
00:18:50,860 --> 00:18:52,450
attacker land on we didn't we didn't see

460
00:18:52,450 --> 00:18:55,960
that technique used so it could be a

461
00:18:55,960 --> 00:18:58,210
variant I'm not sure like I said and do

462
00:18:58,210 --> 00:19:01,240
the reversing myself but we saw we saw a

463
00:19:01,240 --> 00:19:04,390
notable relationship to like a ported

464
00:19:04,390 --> 00:19:06,100
version of tiny shell as far as we could

465
00:19:06,100 --> 00:19:11,850
tell this is just a screenshot showing

466
00:19:11,850 --> 00:19:14,530
on one system the attacker had named the

467
00:19:14,530 --> 00:19:16,810
backdoor to PR L monitor instead of our

468
00:19:16,810 --> 00:19:20,020
util and here it's communicating with

469
00:19:20,020 --> 00:19:22,690
the IP address the same IP address mind

470
00:19:22,690 --> 00:19:24,910
you that is hosting the tools so the

471
00:19:24,910 --> 00:19:26,440
attacker is pulling down tools from the

472
00:19:26,440 --> 00:19:28,480
same ip address as he's connecting his

473
00:19:28,480 --> 00:19:32,170
backdoor to on port 53 maybe to try and

474
00:19:32,170 --> 00:19:34,450
blend in with DNS or something I don't

475
00:19:34,450 --> 00:19:36,620
know but

476
00:19:36,620 --> 00:19:39,450
yeah a lot of times we'll see the actors

477
00:19:39,450 --> 00:19:42,030
obviously host a tool server one place

478
00:19:42,030 --> 00:19:43,919
and the C to connecting elsewhere so

479
00:19:43,919 --> 00:19:45,450
that you know if one IP address gets

480
00:19:45,450 --> 00:19:46,890
blown at least the other one doesn't but

481
00:19:46,890 --> 00:19:52,080
that wasn't the case here curl all the

482
00:19:52,080 --> 00:19:54,750
things so curl is just widely used in

483
00:19:54,750 --> 00:19:57,390
intrusions in general we see a lot of

484
00:19:57,390 --> 00:19:59,400
curl activity once an attacker makes it

485
00:19:59,400 --> 00:20:02,340
into the network like I said living off

486
00:20:02,340 --> 00:20:03,809
the land should be something a little

487
00:20:03,809 --> 00:20:05,429
more popular but we could panda in this

488
00:20:05,429 --> 00:20:08,340
case is just running a lot of curl

489
00:20:08,340 --> 00:20:10,740
commands I posted these here because I

490
00:20:10,740 --> 00:20:12,540
think they're kind of funny it shows the

491
00:20:12,540 --> 00:20:14,490
attacker screwing up quite frequently it

492
00:20:14,490 --> 00:20:15,900
seems like through the backdoor that

493
00:20:15,900 --> 00:20:17,850
they come in they have some type of

494
00:20:17,850 --> 00:20:19,590
encoding issue because you can see them

495
00:20:19,590 --> 00:20:21,990
trying to curl down v dot txt which is

496
00:20:21,990 --> 00:20:24,450
clearly a bash script and and then

497
00:20:24,450 --> 00:20:27,330
piping it to bash but after that you see

498
00:20:27,330 --> 00:20:29,940
just this series of crazy you know

499
00:20:29,940 --> 00:20:32,610
percent twenty PI percent twenty like

500
00:20:32,610 --> 00:20:33,990
there even needs to be a space between

501
00:20:33,990 --> 00:20:37,950
those so it's just you can nearly see

502
00:20:37,950 --> 00:20:39,090
the guy smashing his head on the

503
00:20:39,090 --> 00:20:43,110
keyboard by the end and ultimately gives

504
00:20:43,110 --> 00:20:46,669
up and we never saw that v dot text run

505
00:20:46,669 --> 00:20:50,400
so so yeah a lot of curl activity we

506
00:20:50,400 --> 00:20:52,230
also see a lot of curl activity in the

507
00:20:52,230 --> 00:20:54,000
sense and this is this is on Linux where

508
00:20:54,000 --> 00:20:56,250
we see this where we've seen this more I

509
00:20:56,250 --> 00:20:58,710
don't think I've seen it on Mac yet but

510
00:20:58,710 --> 00:21:00,270
it would it would work just the same as

511
00:21:00,270 --> 00:21:04,740
we see PNG files being hosted on popular

512
00:21:04,740 --> 00:21:07,049
you know photo sharing sites and in that

513
00:21:07,049 --> 00:21:09,210
PNG file will be bash script or Python

514
00:21:09,210 --> 00:21:10,620
script of some type or some type of

515
00:21:10,620 --> 00:21:14,460
scripting language and the attacker will

516
00:21:14,460 --> 00:21:16,830
pull that PNG file down with curl pipe

517
00:21:16,830 --> 00:21:20,070
it to DD and then go to the offset where

518
00:21:20,070 --> 00:21:21,750
that script is held and then pipe that

519
00:21:21,750 --> 00:21:24,030
to the interpreter language so it's kind

520
00:21:24,030 --> 00:21:26,940
of this nice way to make traffic look a

521
00:21:26,940 --> 00:21:28,230
little less suspicious and that you're

522
00:21:28,230 --> 00:21:30,419
going to a popular web host or picture

523
00:21:30,419 --> 00:21:33,720
hosting site and then the the PNG file

524
00:21:33,720 --> 00:21:36,030
and the malicious code never hits the

525
00:21:36,030 --> 00:21:37,770
hard drive instead it just goes straight

526
00:21:37,770 --> 00:21:39,750
to the bash interpreter or Python

527
00:21:39,750 --> 00:21:42,230
interpreter or anything like that

528
00:21:42,230 --> 00:21:45,480
a quick hunting note using that as a use

529
00:21:45,480 --> 00:21:48,540
case so like I said curl is used in a

530
00:21:48,540 --> 00:21:50,250
lot of intrusions that we see so

531
00:21:50,250 --> 00:21:52,050
keep an eye on suspicious curl commands

532
00:21:52,050 --> 00:21:54,090
in your environment is pretty important

533
00:21:54,090 --> 00:21:55,770
if you're if you're tracking

534
00:21:55,770 --> 00:21:57,930
process-based activity there's a couple

535
00:21:57,930 --> 00:22:00,150
different ways to do that the first is

536
00:22:00,150 --> 00:22:02,460
kind of the easy catch way where if you

537
00:22:02,460 --> 00:22:04,650
can do searches of command line activity

538
00:22:04,650 --> 00:22:06,690
you can do a search for you know any

539
00:22:06,690 --> 00:22:08,400
shell type command where curl comes

540
00:22:08,400 --> 00:22:11,430
first and then and then you know like a

541
00:22:11,430 --> 00:22:16,020
star and then DD or or a curl star and

542
00:22:16,020 --> 00:22:17,880
then a pipe this is a lot easier if

543
00:22:17,880 --> 00:22:19,170
you're at a small company where you're

544
00:22:19,170 --> 00:22:20,910
able to actually really know what's

545
00:22:20,910 --> 00:22:23,460
going on and with curl and whether

546
00:22:23,460 --> 00:22:27,150
developers are using it or or or admins

547
00:22:27,150 --> 00:22:29,580
or attackers but this is that's one way

548
00:22:29,580 --> 00:22:31,710
to go about it the other that I find a

549
00:22:31,710 --> 00:22:33,420
little more thorough is if you have the

550
00:22:33,420 --> 00:22:35,670
capability would be to find the times

551
00:22:35,670 --> 00:22:37,920
where curl runs where it is the process

552
00:22:37,920 --> 00:22:39,930
group ID leader right so when you run

553
00:22:39,930 --> 00:22:41,460
the string of commands and pipes like

554
00:22:41,460 --> 00:22:44,100
this you'll see that curl actually

555
00:22:44,100 --> 00:22:45,660
becomes a process group ID leader

556
00:22:45,660 --> 00:22:48,180
because it's executed first so if you

557
00:22:48,180 --> 00:22:50,130
can find times where curl ran where the

558
00:22:50,130 --> 00:22:53,040
process ID matches the process group ID

559
00:22:53,040 --> 00:22:55,500
that tells you that curl was the process

560
00:22:55,500 --> 00:22:57,060
group ID leader and then you can do some

561
00:22:57,060 --> 00:22:59,130
unique searches for show me times where

562
00:22:59,130 --> 00:23:01,200
curl was the process group ID leader and

563
00:23:01,200 --> 00:23:03,720
ran with DD or and ran with bash or

564
00:23:03,720 --> 00:23:07,890
Python so on so forth so but I just

565
00:23:07,890 --> 00:23:10,320
bring that up because yeah I can't

566
00:23:10,320 --> 00:23:11,970
emphasize this enough scene curl and

567
00:23:11,970 --> 00:23:13,950
like every intrusion that that we've

568
00:23:13,950 --> 00:23:18,960
handled them some more whoops from the

569
00:23:18,960 --> 00:23:21,540
attacker if you're familiar with you

570
00:23:21,540 --> 00:23:23,040
know pen testing on Mac or anything like

571
00:23:23,040 --> 00:23:24,390
that you've probably tried to use net

572
00:23:24,390 --> 00:23:26,130
cat and if you tried to use the dash II

573
00:23:26,130 --> 00:23:28,530
to use a shell over net cat you know

574
00:23:28,530 --> 00:23:31,650
that the bsd net cat does not have does

575
00:23:31,650 --> 00:23:33,510
not have that - he switched actually let

576
00:23:33,510 --> 00:23:35,190
you use that shell back and forth the

577
00:23:35,190 --> 00:23:37,410
actor tried this numerous times which

578
00:23:37,410 --> 00:23:39,210
was surprising because he did seem to be

579
00:23:39,210 --> 00:23:40,470
pretty knowledgeable of the operating

580
00:23:40,470 --> 00:23:42,390
system and this seems like such a basic

581
00:23:42,390 --> 00:23:44,910
thing to not know but then he tries some

582
00:23:44,910 --> 00:23:46,680
syntax that i'm almost positive wouldn't

583
00:23:46,680 --> 00:23:51,690
even work on linux but finally the last

584
00:23:51,690 --> 00:23:54,300
command he runs he tries something

585
00:23:54,300 --> 00:23:56,130
different he gives up on net cat and he

586
00:23:56,130 --> 00:23:58,590
tries to make apt why type node with the

587
00:23:58,590 --> 00:24:00,450
make node command and then he tries to

588
00:24:00,450 --> 00:24:02,210
use that with telnet too

589
00:24:02,210 --> 00:24:06,830
connect back to the c2 and the the make

590
00:24:06,830 --> 00:24:09,500
note command on Mac OS does not have the

591
00:24:09,500 --> 00:24:11,930
PT Y type so once again this command

592
00:24:11,930 --> 00:24:17,750
fails resistance mm all right so

593
00:24:17,750 --> 00:24:19,820
persistence the actor shows actually he

594
00:24:19,820 --> 00:24:21,500
shows a little bit more that he's

595
00:24:21,500 --> 00:24:23,060
knowledgeable of the operating system I

596
00:24:23,060 --> 00:24:24,710
probably don't need to cover these in

597
00:24:24,710 --> 00:24:26,840
like raw detail because most of us here

598
00:24:26,840 --> 00:24:29,120
already covered persistence on Mac and

599
00:24:29,120 --> 00:24:30,560
how launched Damons work and how launch

600
00:24:30,560 --> 00:24:33,230
agents work high-level summary we got

601
00:24:33,230 --> 00:24:34,370
three different points we have the

602
00:24:34,370 --> 00:24:35,900
system integrity protected level that

603
00:24:35,900 --> 00:24:38,300
only Apple can write to write and that

604
00:24:38,300 --> 00:24:40,820
system library launched daemons and then

605
00:24:40,820 --> 00:24:42,350
the root level just library launch

606
00:24:42,350 --> 00:24:43,520
damon's this is where we see the

607
00:24:43,520 --> 00:24:46,430
majority of actors and malware writing -

608
00:24:46,430 --> 00:24:49,940
I'd say and then finally the user level

609
00:24:49,940 --> 00:24:53,180
for if the attacker can't gain root

610
00:24:53,180 --> 00:24:56,330
permissions for some reason so again the

611
00:24:56,330 --> 00:24:57,620
root level is where we see the majority

612
00:24:57,620 --> 00:25:00,470
of malware being written - and the

613
00:25:00,470 --> 00:25:03,380
system level can no longer unless you

614
00:25:03,380 --> 00:25:06,320
have a sip bypass of some type you can

615
00:25:06,320 --> 00:25:08,330
no longer write to that location and

616
00:25:08,330 --> 00:25:11,390
that reason well one of the reasons is

617
00:25:11,390 --> 00:25:14,210
because malware can easily blend in if

618
00:25:14,210 --> 00:25:16,340
it just calls itself calm down something

619
00:25:16,340 --> 00:25:17,930
and it's sitting inside the system

620
00:25:17,930 --> 00:25:19,400
library launch Damien's directory it's

621
00:25:19,400 --> 00:25:21,290
gonna blend in with about a hundred

622
00:25:21,290 --> 00:25:23,990
other launch demons and nobody's ever

623
00:25:23,990 --> 00:25:26,030
gonna think nonetheless that's a good

624
00:25:26,030 --> 00:25:29,540
move on apple's part it's it's just as

625
00:25:29,540 --> 00:25:31,490
simple and from what we've seen pretty

626
00:25:31,490 --> 00:25:32,960
effective because it's been forcing

627
00:25:32,960 --> 00:25:34,940
actors to write to the library launch

628
00:25:34,940 --> 00:25:39,470
Damon's directory instead so what the

629
00:25:39,470 --> 00:25:42,320
actor does like I said pretty standard

630
00:25:42,320 --> 00:25:44,300
practice they they manually create that

631
00:25:44,300 --> 00:25:47,300
launch daemon they call it kappa lacks s

632
00:25:47,300 --> 00:25:49,640
printer dot p list and they place it

633
00:25:49,640 --> 00:25:51,050
inside the library launch Damon's

634
00:25:51,050 --> 00:25:53,030
directory and then they go ahead and

635
00:25:53,030 --> 00:25:55,100
load it so there is a yellow flag here

636
00:25:55,100 --> 00:25:56,480
once again and that's the fact that we

637
00:25:56,480 --> 00:25:58,760
see a comma litem inside the library

638
00:25:58,760 --> 00:26:00,350
launch Damon's directory should be in

639
00:26:00,350 --> 00:26:03,050
the system directory now that that's not

640
00:26:03,050 --> 00:26:05,300
true to every single piece of Apple

641
00:26:05,300 --> 00:26:07,670
software I I've seen some still end up

642
00:26:07,670 --> 00:26:08,509
in there

643
00:26:08,509 --> 00:26:12,649
but really if you see a comma litem in

644
00:26:12,649 --> 00:26:14,149
the library launch Damon's directory

645
00:26:14,149 --> 00:26:15,379
it's worth looking into and at least

646
00:26:15,379 --> 00:26:16,609
making sure it points at something

647
00:26:16,609 --> 00:26:19,279
legitimate and that's that's a pretty

648
00:26:19,279 --> 00:26:21,739
easy win right there and then they go

649
00:26:21,739 --> 00:26:27,289
ahead and load it with a lot control so

650
00:26:27,289 --> 00:26:30,109
more than just a system check on some

651
00:26:30,109 --> 00:26:32,599
systems the actor ended up on they would

652
00:26:32,599 --> 00:26:35,779
come in through SSH and they'd start

653
00:26:35,779 --> 00:26:38,059
instead of doing some part of their

654
00:26:38,059 --> 00:26:40,129
recon process would be to touch a file

655
00:26:40,129 --> 00:26:42,079
to user bin and they just call it

656
00:26:42,079 --> 00:26:45,440
something simple like X so user bin is

657
00:26:45,440 --> 00:26:47,029
another location that is protected by

658
00:26:47,029 --> 00:26:51,229
system integrity protection so you could

659
00:26:51,229 --> 00:26:52,879
call this just a permissions check but I

660
00:26:52,879 --> 00:26:56,509
think it's more of a sip check what you

661
00:26:56,509 --> 00:26:58,399
see is that he removes the file after

662
00:26:58,399 --> 00:27:00,440
telling us that he successfully wrote it

663
00:27:00,440 --> 00:27:02,869
and when I saw this I thought okay maybe

664
00:27:02,869 --> 00:27:04,069
we got a system integrity protection

665
00:27:04,069 --> 00:27:06,799
exploit sweet this will be awesome but

666
00:27:06,799 --> 00:27:08,299
you can see the actor looks surprised

667
00:27:08,299 --> 00:27:09,889
that he can do that as well because now

668
00:27:09,889 --> 00:27:11,719
he's running all these recon commands to

669
00:27:11,719 --> 00:27:13,039
see what version of the operating system

670
00:27:13,039 --> 00:27:17,359
he's running on so turns out yeah this

671
00:27:17,359 --> 00:27:20,449
was a Yosemite system which is the I

672
00:27:20,449 --> 00:27:23,359
believe the last flavor to not allow you

673
00:27:23,359 --> 00:27:26,269
that did not enable sip so no bypass

674
00:27:26,269 --> 00:27:28,369
here just a outdated system a little

675
00:27:28,369 --> 00:27:30,908
less interesting

676
00:27:33,679 --> 00:27:35,389
Yosemite persistence so once he would

677
00:27:35,389 --> 00:27:37,699
realize that sure enough we would see

678
00:27:37,699 --> 00:27:39,289
him target the system library launch

679
00:27:39,289 --> 00:27:41,029
Damons directory so once he confirmed

680
00:27:41,029 --> 00:27:42,409
that he could blend in better with the

681
00:27:42,409 --> 00:27:44,089
operating system he went ahead and did

682
00:27:44,089 --> 00:27:46,729
that so good practice on his part in

683
00:27:46,729 --> 00:27:48,559
making that happen

684
00:27:48,559 --> 00:27:50,359
and this like I said this is exactly why

685
00:27:50,359 --> 00:27:52,129
Apple actually you know has enabled

686
00:27:52,129 --> 00:27:54,019
things like sip and not allowing you to

687
00:27:54,019 --> 00:27:55,639
write to the system Highbury directory

688
00:27:55,639 --> 00:27:57,709
because attackers are doing it blending

689
00:27:57,709 --> 00:27:58,969
in with the operating system and you'll

690
00:27:58,969 --> 00:28:02,059
you'll never be any of the wiser so so

691
00:28:02,059 --> 00:28:03,529
he goes ahead and writes that there and

692
00:28:03,529 --> 00:28:04,969
unloads it just like you would have

693
00:28:04,969 --> 00:28:07,099
still using the touch command I promise

694
00:28:07,099 --> 00:28:13,020
I'll get to that in a bit yeah

695
00:28:13,020 --> 00:28:15,370
persistence piggybacking this is a term

696
00:28:15,370 --> 00:28:17,350
I made up not really sure it's a thing

697
00:28:17,350 --> 00:28:20,880
but it's what we saw so in this case the

698
00:28:20,880 --> 00:28:24,820
we saw the attacker read read the login

699
00:28:24,820 --> 00:28:26,230
hooks that were available and at the

700
00:28:26,230 --> 00:28:30,430
time login hooks were deprecated but

701
00:28:30,430 --> 00:28:32,890
still working which might even be true

702
00:28:32,890 --> 00:28:36,400
to now can't remember exactly but at

703
00:28:36,400 --> 00:28:38,230
this time at least login hooks were

704
00:28:38,230 --> 00:28:40,480
still working and they were they were

705
00:28:40,480 --> 00:28:42,820
known as deprecated so in this he looks

706
00:28:42,820 --> 00:28:45,610
to see what login hooks are enabled and

707
00:28:45,610 --> 00:28:48,160
he sees that jamp is actually running

708
00:28:48,160 --> 00:28:53,110
login hooks and sure enough the next

709
00:28:53,110 --> 00:28:55,750
command we see is is a vim of the of the

710
00:28:55,750 --> 00:28:57,910
jammed login hook this is this is

711
00:28:57,910 --> 00:28:59,410
another reason login hooks were actually

712
00:28:59,410 --> 00:29:00,580
deprecated because they were known to

713
00:29:00,580 --> 00:29:04,990
have security issues but this is a this

714
00:29:04,990 --> 00:29:08,020
is a view of the jammed login hook

715
00:29:08,020 --> 00:29:09,730
before any editing is done I don't have

716
00:29:09,730 --> 00:29:11,410
a copy of what the attacker actually did

717
00:29:11,410 --> 00:29:13,230
but presumably he puts his backdoor

718
00:29:13,230 --> 00:29:15,880
inside that inside that login hook

719
00:29:15,880 --> 00:29:17,980
somewhere so now when Jam kicks off so

720
00:29:17,980 --> 00:29:20,920
does the attacker backdoor service and

721
00:29:20,920 --> 00:29:22,750
it's just a way to stay completely out

722
00:29:22,750 --> 00:29:24,460
of the library launch Damons directory

723
00:29:24,460 --> 00:29:25,960
and not really have to create his own

724
00:29:25,960 --> 00:29:28,120
persistence living off the land and

725
00:29:28,120 --> 00:29:37,110
being wiser in that sense so clean up

726
00:29:37,200 --> 00:29:39,700
when the attacker would come in as you

727
00:29:39,700 --> 00:29:40,870
seen like through some of the netcat

728
00:29:40,870 --> 00:29:42,190
commands and through some of just the

729
00:29:42,190 --> 00:29:43,930
really noisy commands that the attacker

730
00:29:43,930 --> 00:29:46,960
was not the stealthiest he what it

731
00:29:46,960 --> 00:29:49,090
wasn't bad per se and most people aren't

732
00:29:49,090 --> 00:29:50,470
really worried about being caught on Mac

733
00:29:50,470 --> 00:29:52,390
OS systems so they don't think there's

734
00:29:52,390 --> 00:29:55,390
much need for stealth but but yeah

735
00:29:55,390 --> 00:29:56,950
there's a lot of commands executed in

736
00:29:56,950 --> 00:30:00,340
this time window so there were some

737
00:30:00,340 --> 00:30:02,110
minor stealth practices like they were

738
00:30:02,110 --> 00:30:03,940
really good about cleaning up files they

739
00:30:03,940 --> 00:30:05,350
were done with you know different

740
00:30:05,350 --> 00:30:07,270
scripts that they had written they made

741
00:30:07,270 --> 00:30:08,980
sure to delete so nobody could take from

742
00:30:08,980 --> 00:30:10,750
the from the hard drive or anything

743
00:30:10,750 --> 00:30:13,060
they're pretty good about that the touch

744
00:30:13,060 --> 00:30:15,220
command that you've been seeing shot

745
00:30:15,220 --> 00:30:20,560
after shot here is is another there's

746
00:30:20,560 --> 00:30:22,660
another command that they ran very

747
00:30:22,660 --> 00:30:25,030
frequently and if you're if you've done

748
00:30:25,030 --> 00:30:26,029
pen testing once it

749
00:30:26,029 --> 00:30:28,519
you're probably familiar with this the

750
00:30:28,519 --> 00:30:29,840
touch command actually takes the

751
00:30:29,840 --> 00:30:31,879
timestamps from one file and applies

752
00:30:31,879 --> 00:30:34,609
those to another file the touch - our

753
00:30:34,609 --> 00:30:37,399
command sorry so in this case he takes

754
00:30:37,399 --> 00:30:40,159
the legitimate r2 util binary he takes

755
00:30:40,159 --> 00:30:41,869
the timestamps from that and he applies

756
00:30:41,869 --> 00:30:45,830
it to his back door ru till it does the

757
00:30:45,830 --> 00:30:49,219
same with the Etsy profile file he takes

758
00:30:49,219 --> 00:30:50,989
those timestamps and applies it to his

759
00:30:50,989 --> 00:30:53,299
his back door configuration file and

760
00:30:53,299 --> 00:30:58,669
then finally the touch - our command on

761
00:30:58,669 --> 00:31:01,489
the cisco anyconnect basically he looks

762
00:31:01,489 --> 00:31:02,960
in the he looks in the launch Damon's

763
00:31:02,960 --> 00:31:06,019
directory to find a random launch daemon

764
00:31:06,019 --> 00:31:08,570
and he takes the Cisco one and takes the

765
00:31:08,570 --> 00:31:10,009
time stamps from that and applies it to

766
00:31:10,009 --> 00:31:12,649
his launch daemon so I'm just making

767
00:31:12,649 --> 00:31:14,019
sure this is going to throw off your

768
00:31:14,019 --> 00:31:16,669
like your standard like timeline

769
00:31:16,669 --> 00:31:19,219
analysis so if you're doing if you're

770
00:31:19,219 --> 00:31:20,749
doing like incident response in that

771
00:31:20,749 --> 00:31:22,039
sense where you're collecting you know

772
00:31:22,039 --> 00:31:26,179
all the information from the files and

773
00:31:26,179 --> 00:31:27,619
you're getting a list of the different

774
00:31:27,619 --> 00:31:29,570
time stamps this will throw you off this

775
00:31:29,570 --> 00:31:31,369
can throw you for a curveball and make

776
00:31:31,369 --> 00:31:34,219
some of your analysis more difficult so

777
00:31:34,219 --> 00:31:36,769
it's it's good practice on him to go out

778
00:31:36,769 --> 00:31:38,479
of the way to do that a lot of you know

779
00:31:38,479 --> 00:31:40,129
a lot of technologies this isn't this

780
00:31:40,129 --> 00:31:41,779
isn't going to affect this isn't gonna

781
00:31:41,779 --> 00:31:43,519
change the game a whole lot but it might

782
00:31:43,519 --> 00:31:46,129
it might slow down it might slow down

783
00:31:46,129 --> 00:31:49,909
some forensics lastly when he was aged

784
00:31:49,909 --> 00:31:52,940
into systems he would he would use the

785
00:31:52,940 --> 00:31:54,830
user known host file and redirect it to

786
00:31:54,830 --> 00:31:57,320
Devin all this is just the you know the

787
00:31:57,320 --> 00:31:59,059
file that in SSH

788
00:31:59,059 --> 00:32:00,979
the little pop-up that comes up and says

789
00:32:00,979 --> 00:32:02,089
this is the first time you're logging

790
00:32:02,089 --> 00:32:03,799
into this box do you want to log it to

791
00:32:03,799 --> 00:32:06,019
known hosts or whatever and you put yes

792
00:32:06,019 --> 00:32:08,690
and this is just making sure that that

793
00:32:08,690 --> 00:32:10,729
doesn't get logged anywhere even if you

794
00:32:10,729 --> 00:32:14,299
do type yes so good practice there too

795
00:32:14,299 --> 00:32:17,419
but overall like really noisy activity

796
00:32:17,419 --> 00:32:19,129
on the command line and some minor

797
00:32:19,129 --> 00:32:21,469
stealth when it came to just making sure

798
00:32:21,469 --> 00:32:26,989
they cleaned up the basic stuff lateral

799
00:32:26,989 --> 00:32:29,599
movement so no surprise here that SSH

800
00:32:29,599 --> 00:32:32,089
was pretty much at play the whole time

801
00:32:32,089 --> 00:32:34,099
the actor had actually managed to gain

802
00:32:34,099 --> 00:32:36,289
credentials to an admin user that

803
00:32:36,289 --> 00:32:38,930
existed on a lot of different boxes

804
00:32:38,930 --> 00:32:40,640
throughout like build environments and

805
00:32:40,640 --> 00:32:43,580
on some different I think some different

806
00:32:43,580 --> 00:32:44,690
user systems

807
00:32:44,690 --> 00:32:48,200
so with that admin username and password

808
00:32:48,200 --> 00:32:49,970
they were even able to move around

809
00:32:49,970 --> 00:32:54,050
really easily and some of the typical

810
00:32:54,050 --> 00:32:56,240
commands you see for lateral movement on

811
00:32:56,240 --> 00:32:58,520
Mac match pretty identical to the ones

812
00:32:58,520 --> 00:33:00,220
you would expect to see on Linux as well

813
00:33:00,220 --> 00:33:03,650
so that's like grepping for ssh usage

814
00:33:03,650 --> 00:33:06,800
inside the bash history if you land on a

815
00:33:06,800 --> 00:33:08,780
standard user system you could come up

816
00:33:08,780 --> 00:33:11,150
totally empty here but since they had

817
00:33:11,150 --> 00:33:14,809
this admin admin creds really there was

818
00:33:14,809 --> 00:33:19,040
quite a quite a bit of SSH commands for

819
00:33:19,040 --> 00:33:22,280
them to dig through it seemed so just

820
00:33:22,280 --> 00:33:23,390
going through the bash history and

821
00:33:23,390 --> 00:33:24,770
looking for SSH is really popular

822
00:33:24,770 --> 00:33:27,140
looking at the known host file this will

823
00:33:27,140 --> 00:33:29,480
outlast the bash history probably so

824
00:33:29,480 --> 00:33:31,760
it's also a really easy place to look

825
00:33:31,760 --> 00:33:34,220
for just recent IP addresses that have

826
00:33:34,220 --> 00:33:37,220
been SS aged into and then not entirely

827
00:33:37,220 --> 00:33:38,929
related to lateral movement but related

828
00:33:38,929 --> 00:33:42,530
to SSH they would pull down a file

829
00:33:42,530 --> 00:33:45,050
called RS that was hosted once again on

830
00:33:45,050 --> 00:33:49,220
their on their server and then using the

831
00:33:49,220 --> 00:33:51,050
dash F switch for SSH

832
00:33:51,050 --> 00:33:54,410
they would load that RS config file in

833
00:33:54,410 --> 00:33:56,809
so it ended up being a config file for

834
00:33:56,809 --> 00:33:59,030
SSH which you can manually load your own

835
00:33:59,030 --> 00:34:00,679
config when you run SSH

836
00:34:00,679 --> 00:34:04,400
with the dash F switch there so once

837
00:34:04,400 --> 00:34:05,990
again using the user known host file

838
00:34:05,990 --> 00:34:08,300
redirecting to Devin all and so when you

839
00:34:08,300 --> 00:34:11,418
kick that off when you kick that off you

840
00:34:11,418 --> 00:34:13,550
end up on another system a new instance

841
00:34:13,550 --> 00:34:15,649
of sshd and bash is created and you

842
00:34:15,649 --> 00:34:18,290
start all over at recon so that's that's

843
00:34:18,290 --> 00:34:20,540
the typical behavior we saw for lateral

844
00:34:20,540 --> 00:34:23,659
movement really you know one set of bad

845
00:34:23,659 --> 00:34:27,020
stolen credentials just turns into a

846
00:34:27,020 --> 00:34:32,870
turns into a big show this is a just a

847
00:34:32,870 --> 00:34:34,639
screenshot of another quick hunting tip

848
00:34:34,639 --> 00:34:36,889
if you don't have like a massive amount

849
00:34:36,889 --> 00:34:38,510
of logs to go through but you do have

850
00:34:38,510 --> 00:34:40,489
process tree information and process

851
00:34:40,489 --> 00:34:44,270
timestamp information you can on a lot

852
00:34:44,270 --> 00:34:46,250
of systems like SSH will be set up to

853
00:34:46,250 --> 00:34:48,949
for some users if they are an admin user

854
00:34:48,949 --> 00:34:50,060
they don't have to enter their password

855
00:34:50,060 --> 00:34:51,540
they just are greeted

856
00:34:51,540 --> 00:34:54,210
Rochelle right this is a way to tell

857
00:34:54,210 --> 00:34:56,310
that the actor or a way to assume that

858
00:34:56,310 --> 00:34:57,900
the actor actually had the username and

859
00:34:57,900 --> 00:35:00,690
password because but the time between

860
00:35:00,690 --> 00:35:02,490
pseudo running and a shell spawning

861
00:35:02,490 --> 00:35:04,890
after that was anywhere from three to

862
00:35:04,890 --> 00:35:06,630
seven seconds so sometimes it'd be three

863
00:35:06,630 --> 00:35:08,070
seconds sometimes four sometimes five

864
00:35:08,070 --> 00:35:10,800
six seven which is right about the

865
00:35:10,800 --> 00:35:12,210
amount of time it takes it you know type

866
00:35:12,210 --> 00:35:14,880
in a type in and password so that's an

867
00:35:14,880 --> 00:35:16,890
assumption but if you don't have logs to

868
00:35:16,890 --> 00:35:18,840
go off of based on those process

869
00:35:18,840 --> 00:35:20,220
timestamps you can you can make a pretty

870
00:35:20,220 --> 00:35:27,350
safe assumption for that PTY and tty so

871
00:35:27,350 --> 00:35:30,720
I I include this because I think it it

872
00:35:30,720 --> 00:35:32,250
translates nicely to all the stuff we

873
00:35:32,250 --> 00:35:35,100
see on Windows with PowerShell encoded

874
00:35:35,100 --> 00:35:37,470
commands this is kind of the equivalent

875
00:35:37,470 --> 00:35:39,780
at least done in Python you can do it in

876
00:35:39,780 --> 00:35:41,580
any language obviously that includes a

877
00:35:41,580 --> 00:35:47,280
base64 you know decoding library but

878
00:35:47,280 --> 00:35:49,290
essentially we have times where the

879
00:35:49,290 --> 00:35:51,540
attacker would have a connection from

880
00:35:51,540 --> 00:35:53,160
one system to another but he wouldn't

881
00:35:53,160 --> 00:35:55,530
have that TTY where he could type in

882
00:35:55,530 --> 00:35:56,970
sudo and then had prompt him for a

883
00:35:56,970 --> 00:35:59,550
password and he could type it in when he

884
00:35:59,550 --> 00:36:01,950
didn't have that tty he would run this

885
00:36:01,950 --> 00:36:04,680
really popular command so I've decoded

886
00:36:04,680 --> 00:36:05,280
it there

887
00:36:05,280 --> 00:36:08,130
easy peasy it's just the import PTY PTY

888
00:36:08,130 --> 00:36:10,740
spawn bin bash and this actually just

889
00:36:10,740 --> 00:36:13,170
creates a TTY where there isn't one and

890
00:36:13,170 --> 00:36:15,030
he's now able to interact with sudo and

891
00:36:15,030 --> 00:36:18,180
punch in his punch in the credentials

892
00:36:18,180 --> 00:36:21,150
that he's aware of so why he chooses to

893
00:36:21,150 --> 00:36:24,180
encode this in base64 I don't I'm not

894
00:36:24,180 --> 00:36:27,690
really sure in fact it's just longer in

895
00:36:27,690 --> 00:36:29,490
base64 I guess he just thought it was a

896
00:36:29,490 --> 00:36:32,700
more stealthy generally though if you

897
00:36:32,700 --> 00:36:35,490
see something shady happening and then

898
00:36:35,490 --> 00:36:37,800
you see it was all done in base64 you

899
00:36:37,800 --> 00:36:39,780
can make a pretty safe assumption that

900
00:36:39,780 --> 00:36:41,430
you know it's something Shady and not an

901
00:36:41,430 --> 00:36:44,910
admin so so yeah just some base64

902
00:36:44,910 --> 00:36:47,310
practice there and we're seeing that a

903
00:36:47,310 --> 00:36:48,990
little bit more and more on both on both

904
00:36:48,990 --> 00:36:57,420
Linux and Mac so for this attack for

905
00:36:57,420 --> 00:36:59,490
this attack those are the static

906
00:36:59,490 --> 00:37:01,110
indicators you're welcome to go grab

907
00:37:01,110 --> 00:37:02,430
those I gave

908
00:37:02,430 --> 00:37:05,730
very similar talk at Chaka Khan this

909
00:37:05,730 --> 00:37:07,740
year so those those are being hosted on

910
00:37:07,740 --> 00:37:09,420
my github if you want just a yard rule

911
00:37:09,420 --> 00:37:11,820
full of these indicators and that just

912
00:37:11,820 --> 00:37:13,619
includes the hashes for the three

913
00:37:13,619 --> 00:37:16,140
different backdoors we saw VIP the file

914
00:37:16,140 --> 00:37:21,210
names so that is a single attack in this

915
00:37:21,210 --> 00:37:22,650
case that was all part of one attack I'm

916
00:37:22,650 --> 00:37:25,260
gonna cover just a brief separate attack

917
00:37:25,260 --> 00:37:26,760
so this is not the same thing

918
00:37:26,760 --> 00:37:29,460
I put wicked pandas here in question

919
00:37:29,460 --> 00:37:32,369
mark because I have no proof that this

920
00:37:32,369 --> 00:37:33,570
is what could panda there's definitely

921
00:37:33,570 --> 00:37:35,820
no set attribution to this what you can

922
00:37:35,820 --> 00:37:37,880
recognize is a lot of the command syntax

923
00:37:37,880 --> 00:37:40,230
does look pretty familiar but that

924
00:37:40,230 --> 00:37:41,820
doesn't tell us anything guaranteed in

925
00:37:41,820 --> 00:37:43,800
terms of attribution but I do think it's

926
00:37:43,800 --> 00:37:45,210
interesting that there are a lot of

927
00:37:45,210 --> 00:37:47,940
commonalities so for those that you for

928
00:37:47,940 --> 00:37:49,200
those of you that follow my Twitter or

929
00:37:49,200 --> 00:37:51,119
follow a crowd strike you'll see we

930
00:37:51,119 --> 00:37:52,859
actually tweeted a lot of this out

931
00:37:52,859 --> 00:37:57,720
yesterday where an attacker was once

932
00:37:57,720 --> 00:38:00,000
again using curl to pull down a backdoor

933
00:38:00,000 --> 00:38:02,599
in this case called software update D

934
00:38:02,599 --> 00:38:04,830
that's to blend in with the operating

935
00:38:04,830 --> 00:38:07,290
system processes because there already

936
00:38:07,290 --> 00:38:09,119
is a software update D it runs out a

937
00:38:09,119 --> 00:38:11,310
system directory but the attacker in

938
00:38:11,310 --> 00:38:13,170
this case has once again put it in user

939
00:38:13,170 --> 00:38:16,080
local bin and they pull it down once

940
00:38:16,080 --> 00:38:17,910
again from a straight IP address no

941
00:38:17,910 --> 00:38:20,160
domain involved hosted on a privileged

942
00:38:20,160 --> 00:38:24,839
port 11 and then it's just labeled a SD

943
00:38:24,839 --> 00:38:27,660
on their Tools server so give executable

944
00:38:27,660 --> 00:38:29,460
permissions to that run it and now they

945
00:38:29,460 --> 00:38:30,990
have the backdoor once again running on

946
00:38:30,990 --> 00:38:32,400
the system they actually ran this a

947
00:38:32,400 --> 00:38:35,250
couple times they would run the backdoor

948
00:38:35,250 --> 00:38:37,710
forget to escalate to sudo so rerun the

949
00:38:37,710 --> 00:38:39,990
backdoor as pseudo well logged into the

950
00:38:39,990 --> 00:38:42,119
backdoor and i just created this massive

951
00:38:42,119 --> 00:38:46,859
like hilarious process tree but after

952
00:38:46,859 --> 00:38:48,930
the back doors installed persistence was

953
00:38:48,930 --> 00:38:51,390
actually set up so for some reason on

954
00:38:51,390 --> 00:38:53,250
the tool side on their server they would

955
00:38:53,250 --> 00:38:56,490
just rename the launched daemon or they

956
00:38:56,490 --> 00:38:58,080
would just take the launched daemon and

957
00:38:58,080 --> 00:39:00,690
rename it to a SD so they could then run

958
00:39:00,690 --> 00:39:02,720
the same curl command and get a new file

959
00:39:02,720 --> 00:39:06,210
and you can see that because the next

960
00:39:06,210 --> 00:39:08,369
command that gets run takes that a SD

961
00:39:08,369 --> 00:39:10,950
file that they downloaded and moves it

962
00:39:10,950 --> 00:39:13,109
to the library launch Damons directory

963
00:39:13,109 --> 00:39:14,490
and this time it's called

964
00:39:14,490 --> 00:39:18,560
not localhost dot startup dot P list and

965
00:39:18,560 --> 00:39:21,450
you know shout out to Objective C at

966
00:39:21,450 --> 00:39:22,560
this point because if you're running

967
00:39:22,560 --> 00:39:24,630
block block or something like that this

968
00:39:24,630 --> 00:39:26,220
should be a pretty read pretty big red

969
00:39:26,220 --> 00:39:28,680
flag like local dot local host startup

970
00:39:28,680 --> 00:39:30,300
that P list that's gonna be something

971
00:39:30,300 --> 00:39:32,940
either someone just googled and doesn't

972
00:39:32,940 --> 00:39:34,560
know what name to create a launch daemon

973
00:39:34,560 --> 00:39:37,140
with or it's going to be yes some new

974
00:39:37,140 --> 00:39:39,030
developer who is also trying to learn so

975
00:39:39,030 --> 00:39:41,130
if this gets created on your system

976
00:39:41,130 --> 00:39:46,080
check it out look into it and you

977
00:39:46,080 --> 00:39:47,609
probably see it points to something

978
00:39:47,609 --> 00:39:49,609
interesting if you don't know what it is

979
00:39:49,609 --> 00:39:52,470
and obviously a power user a power user

980
00:39:52,470 --> 00:39:54,780
might know that but a standard like a

981
00:39:54,780 --> 00:39:56,339
standard user even if they're running

982
00:39:56,339 --> 00:39:58,230
black block you know might might just

983
00:39:58,230 --> 00:39:59,520
allow it or not know what they're

984
00:39:59,520 --> 00:40:00,270
looking at

985
00:40:00,270 --> 00:40:03,390
so still being able to go in and look at

986
00:40:03,390 --> 00:40:06,060
suspicious launch Damons like in some

987
00:40:06,060 --> 00:40:07,800
remote fashion is still really important

988
00:40:07,800 --> 00:40:09,420
just monitoring your launch Damons and

989
00:40:09,420 --> 00:40:12,000
knowing what's running on the system and

990
00:40:12,000 --> 00:40:14,790
then I also include in this shot just

991
00:40:14,790 --> 00:40:18,240
the SSH command once again user known

992
00:40:18,240 --> 00:40:20,720
host file being redirected Devon all

993
00:40:20,720 --> 00:40:23,640
from whoever this actor happens to be as

994
00:40:23,640 --> 00:40:26,540
well and then strict host key checking

995
00:40:26,540 --> 00:40:29,910
set to know which we saw every time SSH

996
00:40:29,910 --> 00:40:33,529
was executed in this environment

997
00:40:34,580 --> 00:40:36,990
pastebin so like you see with Windows

998
00:40:36,990 --> 00:40:39,330
and a lot of intrusions we saw curls up

999
00:40:39,330 --> 00:40:42,540
out to pastebin after the actor would

1000
00:40:42,540 --> 00:40:44,730
get the code they wanted off paceman

1001
00:40:44,730 --> 00:40:47,390
they would delete it pretty quickly

1002
00:40:47,390 --> 00:40:50,010
because we were on their toes pretty

1003
00:40:50,010 --> 00:40:52,080
quick for a lot of this and it came down

1004
00:40:52,080 --> 00:40:55,560
very quick so I'm pastebin they were

1005
00:40:55,560 --> 00:40:57,750
actually hosting Perl code feel like

1006
00:40:57,750 --> 00:41:00,089
it's malicious shenanigans is the only

1007
00:41:00,089 --> 00:41:02,810
thing Perl gets used for these days but

1008
00:41:02,810 --> 00:41:05,400
sure enough the attacker goes to

1009
00:41:05,400 --> 00:41:06,630
pastebin to pull that down and then

1010
00:41:06,630 --> 00:41:11,150
executes Perl by itself presumably like

1011
00:41:11,150 --> 00:41:14,730
pasting that entire script into into the

1012
00:41:14,730 --> 00:41:17,150
pearl shell

1013
00:41:17,760 --> 00:41:19,680
all right and then finally exfil and I

1014
00:41:19,680 --> 00:41:21,450
bring this up because I think a lot of

1015
00:41:21,450 --> 00:41:22,980
times with our detection z' and our

1016
00:41:22,980 --> 00:41:25,020
focus we look to a lot of points in the

1017
00:41:25,020 --> 00:41:27,750
in the kill chain like before exfil

1018
00:41:27,750 --> 00:41:29,010
obviously we want to catch everything

1019
00:41:29,010 --> 00:41:30,930
before exfil but there are ways we can

1020
00:41:30,930 --> 00:41:32,790
detect on exfil

1021
00:41:32,790 --> 00:41:34,980
and I think we often overlook that

1022
00:41:34,980 --> 00:41:36,990
sometimes and and even though it's the

1023
00:41:36,990 --> 00:41:38,970
last stage that you pray to God the

1024
00:41:38,970 --> 00:41:40,590
attacker doesn't get to it's still

1025
00:41:40,590 --> 00:41:42,180
important to have detection setup for so

1026
00:41:42,180 --> 00:41:43,440
I just want to shed a little light on

1027
00:41:43,440 --> 00:41:45,540
what the attacker did in this case for

1028
00:41:45,540 --> 00:41:49,080
his exfil and that was he would once

1029
00:41:49,080 --> 00:41:51,060
again run the curl command he would pull

1030
00:41:51,060 --> 00:41:53,940
down a binary he called update from the

1031
00:41:53,940 --> 00:41:56,430
same ip address he'd give it executable

1032
00:41:56,430 --> 00:41:57,720
permissions and I need to use a number

1033
00:41:57,720 --> 00:42:00,150
of staging commands that that should be

1034
00:42:00,150 --> 00:42:01,800
no surprise here you know find commands

1035
00:42:01,800 --> 00:42:04,970
LS commands he was are syncing data down

1036
00:42:04,970 --> 00:42:08,490
from from remote servers just so he'd

1037
00:42:08,490 --> 00:42:10,980
have fully updated versions before he

1038
00:42:10,980 --> 00:42:14,070
actually did the exfil so and then

1039
00:42:14,070 --> 00:42:15,870
finally like every time we saw this

1040
00:42:15,870 --> 00:42:18,540
staging done and these commands run we

1041
00:42:18,540 --> 00:42:23,010
would see the no hub the no hub binary

1042
00:42:23,010 --> 00:42:26,220
run in front of this new update tool

1043
00:42:26,220 --> 00:42:27,870
whatever it was

1044
00:42:27,870 --> 00:42:31,950
so no hub just allows for basically says

1045
00:42:31,950 --> 00:42:34,590
ignore hang-ups or make make this thing

1046
00:42:34,590 --> 00:42:36,780
I'm about to specify hang up immune we

1047
00:42:36,780 --> 00:42:38,280
actually see it run with a lot of

1048
00:42:38,280 --> 00:42:41,400
attacker backdoors so again if you're in

1049
00:42:41,400 --> 00:42:43,170
a small environment it might be an easy

1050
00:42:43,170 --> 00:42:46,080
thing to keep an eye on no hub and and

1051
00:42:46,080 --> 00:42:49,410
what's running what's running behind

1052
00:42:49,410 --> 00:42:51,840
that but if you're in a big environment

1053
00:42:51,840 --> 00:42:53,580
it might be a little bit harder so

1054
00:42:53,580 --> 00:42:56,250
anyway the attacker runs this through

1055
00:42:56,250 --> 00:42:58,800
some unique googling of the command-line

1056
00:42:58,800 --> 00:43:01,860
arguments I was actually able to be

1057
00:43:01,860 --> 00:43:03,960
brought back to the tool itself that

1058
00:43:03,960 --> 00:43:06,120
this update binary was I assumed it was

1059
00:43:06,120 --> 00:43:09,300
homegrown but sure enough it's actually

1060
00:43:09,300 --> 00:43:10,940
an admin tool purely administrative

1061
00:43:10,940 --> 00:43:16,890
hosted on rootkit err calm which yeah

1062
00:43:16,890 --> 00:43:19,590
yeah so there's there's an updated

1063
00:43:19,590 --> 00:43:22,350
version of this called termite but the

1064
00:43:22,350 --> 00:43:24,240
attacker is using the the old version

1065
00:43:24,240 --> 00:43:26,670
that you're actually seeing here at the

1066
00:43:26,670 --> 00:43:28,410
bottom right there you'll see a syntax

1067
00:43:28,410 --> 00:43:30,869
that actually should

1068
00:43:30,869 --> 00:43:33,630
quite familiar and that's that's the

1069
00:43:33,630 --> 00:43:35,790
syntax that the attacker was running and

1070
00:43:35,790 --> 00:43:38,880
if you use Google Chrome or whatever to

1071
00:43:38,880 --> 00:43:40,920
translate this from Chinese you get

1072
00:43:40,920 --> 00:43:43,470
start sack v5 server on host B which

1073
00:43:43,470 --> 00:43:45,180
will transfer the data to port you know

1074
00:43:45,180 --> 00:43:48,390
whatever of host a so the attacker was

1075
00:43:48,390 --> 00:43:50,069
using this third-party tool to do X

1076
00:43:50,069 --> 00:43:50,609
Ville

1077
00:43:50,609 --> 00:43:52,349
I still think Excel can be done pretty

1078
00:43:52,349 --> 00:43:54,030
easily with about a million commands

1079
00:43:54,030 --> 00:43:57,119
that already exist on Mac zipping files

1080
00:43:57,119 --> 00:43:58,650
and stuff like that was not really a

1081
00:43:58,650 --> 00:44:00,270
much concern he was just taking the raw

1082
00:44:00,270 --> 00:44:04,680
files and and shipping them off so in

1083
00:44:04,680 --> 00:44:07,230
this case the tool the syntax that they

1084
00:44:07,230 --> 00:44:09,750
use just lets you do this like it

1085
00:44:09,750 --> 00:44:11,099
appears they just let you do this big

1086
00:44:11,099 --> 00:44:13,140
transfer I haven't used the tool myself

1087
00:44:13,140 --> 00:44:16,829
but it just takes a data from the host

1088
00:44:16,829 --> 00:44:20,099
and sends it straight to the c2 it looks

1089
00:44:20,099 --> 00:44:21,839
like it has options if you read through

1090
00:44:21,839 --> 00:44:23,220
some of the different parts of the tool

1091
00:44:23,220 --> 00:44:25,349
it looks like it actually has options to

1092
00:44:25,349 --> 00:44:27,240
kind of tunnel through the network a bit

1093
00:44:27,240 --> 00:44:28,530
more than that and if you can't get your

1094
00:44:28,530 --> 00:44:30,660
data from the current box you're on to

1095
00:44:30,660 --> 00:44:32,700
your c2 it seems like it has some

1096
00:44:32,700 --> 00:44:34,650
built-in features may be to allow

1097
00:44:34,650 --> 00:44:36,839
propagating back through the network and

1098
00:44:36,839 --> 00:44:39,180
then back to the c2 assuming you've

1099
00:44:39,180 --> 00:44:41,040
infected a couple different nodes on the

1100
00:44:41,040 --> 00:44:44,160
system so seeing this used on Mac OS for

1101
00:44:44,160 --> 00:44:48,300
exfil purposes is is it's a good

1102
00:44:48,300 --> 00:44:50,040
indicator of at least what what one

1103
00:44:50,040 --> 00:44:53,490
adversary is using to exfilled data the

1104
00:44:53,490 --> 00:44:55,440
hash wasn't modified in any way it was

1105
00:44:55,440 --> 00:44:57,780
just straight downloaded from the site

1106
00:44:57,780 --> 00:45:00,210
and I think I believe there's also a

1107
00:45:00,210 --> 00:45:03,599
github for this tool and it was open

1108
00:45:03,599 --> 00:45:07,710
source if I'm not mistaken so available

1109
00:45:07,710 --> 00:45:10,160
for modifications but that being said

1110
00:45:10,160 --> 00:45:12,480
yeah XML I think it is an important

1111
00:45:12,480 --> 00:45:15,569
stage to actually monitor and something

1112
00:45:15,569 --> 00:45:17,190
we should still be worrying about even

1113
00:45:17,190 --> 00:45:18,750
though it's all the way at the end of

1114
00:45:18,750 --> 00:45:24,030
the kill chain so with that that is my

1115
00:45:24,030 --> 00:45:27,270
presentation that's all I have for you

1116
00:45:27,270 --> 00:45:30,420
guys I think we got we had time for time

1117
00:45:30,420 --> 00:45:33,599
for maybe a couple questions if anybody

1118
00:45:33,599 --> 00:45:41,030
if anybody has anything yeah

1119
00:45:42,720 --> 00:45:57,820
how does it affect that should be yeah

1120
00:45:57,820 --> 00:45:59,829
can your that the question is how does

1121
00:45:59,829 --> 00:46:03,670
how does touch - our effect FS events

1122
00:46:03,670 --> 00:46:06,520
and I've never actually played with that

1123
00:46:06,520 --> 00:46:07,990
if I'm being honest isn't anybody

1124
00:46:07,990 --> 00:46:16,420
anybody new yeah I would I would think

1125
00:46:16,420 --> 00:46:18,190
as well if you're if you're streaming FS

1126
00:46:18,190 --> 00:46:19,960
events live then you should you should

1127
00:46:19,960 --> 00:46:22,270
probably see that happen I don't think I

1128
00:46:22,270 --> 00:46:23,320
don't think you'd be affected in the

1129
00:46:23,320 --> 00:46:35,530
same manner yeah yeah wicked wicked

1130
00:46:35,530 --> 00:46:41,050
panda in general at least on Mac yes so

1131
00:46:41,050 --> 00:46:43,630
who do we see who do we see wicked panda

1132
00:46:43,630 --> 00:46:49,000
targeting I can say at least on on Mac

1133
00:46:49,000 --> 00:46:51,730
we've seen them target the a lot of

1134
00:46:51,730 --> 00:46:54,250
different technology companies and I

1135
00:46:54,250 --> 00:46:57,069
know that's vague but it has to be but

1136
00:46:57,069 --> 00:47:01,420
so so mainly like mainly technology

1137
00:47:01,420 --> 00:47:03,310
companies and like actual companies and

1138
00:47:03,310 --> 00:47:08,319
not just you know yeah sorry I should be

1139
00:47:08,319 --> 00:47:09,400
able to get into that more but

1140
00:47:09,400 --> 00:47:10,810
technology companies I'm gonna leave it

1141
00:47:10,810 --> 00:47:18,029
at that yeah places with computers

1142
00:47:18,780 --> 00:47:22,740
all right cool you got this

1143
00:47:27,930 --> 00:47:30,520
awesome so round of applause again for

1144
00:47:30,520 --> 00:47:33,150
Jaron

1145
00:47:37,490 --> 00:47:42,320
thanks Jaron especially be talking at

1146
00:47:42,320 --> 00:47:44,000
objective by the sea version 2.0 as well

1147
00:47:44,000 --> 00:47:45,650
it's always great to hear a talk where

1148
00:47:45,650 --> 00:47:48,440
we actually see real live data from

1149
00:47:48,440 --> 00:47:53,590
actual adversaries so that's pretty cool

