1
00:00:00,030 --> 00:00:03,330
next up we have the Thomas read when I

2
00:00:03,330 --> 00:00:06,180
started doing Mac malware analysis

3
00:00:06,180 --> 00:00:08,340
reverse engineering his name kept

4
00:00:08,340 --> 00:00:12,240
popping up you know he ran a website

5
00:00:12,240 --> 00:00:15,480
designed I believe adware medic which

6
00:00:15,480 --> 00:00:18,900
was an incredible utility to help detect

7
00:00:18,900 --> 00:00:21,930
and prevent adware on Mac OS which is

8
00:00:21,930 --> 00:00:22,920
actually one of the biggest threats

9
00:00:22,920 --> 00:00:25,289
facing Mac's today I was so successful

10
00:00:25,289 --> 00:00:27,779
that malware bite acquired his company

11
00:00:27,779 --> 00:00:29,789
so Thomas is kind of living the dream

12
00:00:29,789 --> 00:00:32,640
we're super stoked to have him give a

13
00:00:32,640 --> 00:00:35,160
presentation today so without further

14
00:00:35,160 --> 00:00:38,120
ado let's give a round of applause for

15
00:00:38,120 --> 00:00:49,200
Thomas Reid okay Thomas also put the

16
00:00:49,200 --> 00:00:52,020
objective by the C sticker on his laptop

17
00:00:52,020 --> 00:00:53,760
which means he will definitely be

18
00:00:53,760 --> 00:00:55,170
fighting back at the speaker for the

19
00:00:55,170 --> 00:01:00,480
next one so take note yeah that was the

20
00:01:00,480 --> 00:01:05,119
first sticker that was worthy

21
00:01:13,500 --> 00:01:15,590
[Music]

22
00:01:15,590 --> 00:01:19,610
all right let's see

23
00:01:31,510 --> 00:01:35,790
I mean switched the display

24
00:01:51,799 --> 00:01:55,100
there we go

25
00:01:58,140 --> 00:02:03,579
all right so today we're gonna talk

26
00:02:03,579 --> 00:02:08,169
about a code signing flaw in mac OS this

27
00:02:08,169 --> 00:02:10,269
isn't really something that's brand new

28
00:02:10,269 --> 00:02:13,599
breaking news but it's been around since

29
00:02:13,599 --> 00:02:17,200
the the you know very start of code

30
00:02:17,200 --> 00:02:19,540
signing on Mac OS but it's something

31
00:02:19,540 --> 00:02:21,190
that I've found over the last few years

32
00:02:21,190 --> 00:02:23,709
a lot of people are completely unaware

33
00:02:23,709 --> 00:02:27,069
of so some of you guys might already be

34
00:02:27,069 --> 00:02:30,040
aware I suspect that some people in the

35
00:02:30,040 --> 00:02:31,450
room probably are

36
00:02:31,450 --> 00:02:34,769
I suspect others are probably not so

37
00:02:34,769 --> 00:02:38,440
just to start patrick already introduced

38
00:02:38,440 --> 00:02:42,370
me but i am director of mac and mobile

39
00:02:42,370 --> 00:02:43,750
at malwarebytes and i do a lot of the

40
00:02:43,750 --> 00:02:47,709
mac threat research there so that's who

41
00:02:47,709 --> 00:02:49,390
i am you can follow me on twitter there

42
00:02:49,390 --> 00:02:55,030
if you're interested so to start out me

43
00:02:55,030 --> 00:02:58,150
you know there's there's a lot about you

44
00:02:58,150 --> 00:03:00,459
know there not being any viruses on the

45
00:03:00,459 --> 00:03:04,569
mac and in a certain sense that's kind

46
00:03:04,569 --> 00:03:07,030
of true right now you know by the

47
00:03:07,030 --> 00:03:10,660
strictest definition of the word a virus

48
00:03:10,660 --> 00:03:13,209
is something that has to inject itself

49
00:03:13,209 --> 00:03:16,690
into another application of the program

50
00:03:16,690 --> 00:03:20,139
in order to spread itself and there's

51
00:03:20,139 --> 00:03:21,880
really nothing like that on the mac

52
00:03:21,880 --> 00:03:24,940
right now there has been in the past

53
00:03:24,940 --> 00:03:29,440
but not really right now there have been

54
00:03:29,440 --> 00:03:33,299
cases where malware has been added to an

55
00:03:33,299 --> 00:03:35,620
application so a lot of you guys have

56
00:03:35,620 --> 00:03:37,470
probably heard of things like the

57
00:03:37,470 --> 00:03:42,370
transmission hacks where a key ranger

58
00:03:42,370 --> 00:03:44,170
was distributed through a hack copy of

59
00:03:44,170 --> 00:03:47,139
transmission then later kidnap was

60
00:03:47,139 --> 00:03:50,769
distributed the same way proton hacked

61
00:03:50,769 --> 00:03:54,970
things like handbrake and you know a

62
00:03:54,970 --> 00:03:57,370
number of other apps but these are not

63
00:03:57,370 --> 00:03:59,380
being done on in any kind of an

64
00:03:59,380 --> 00:04:01,690
automated fashion by the malware this is

65
00:04:01,690 --> 00:04:03,519
something where the hacker gains access

66
00:04:03,519 --> 00:04:07,269
to a system gets hold of some way that

67
00:04:07,269 --> 00:04:08,680
they can change

68
00:04:08,680 --> 00:04:11,260
the app manually and then upload it so

69
00:04:11,260 --> 00:04:13,810
this isn't a virus this is just somebody

70
00:04:13,810 --> 00:04:19,750
modifying the app so the question is are

71
00:04:19,750 --> 00:04:21,608
is this kind of behavior actually

72
00:04:21,608 --> 00:04:25,240
impossible on Mac OS and of course you

73
00:04:25,240 --> 00:04:26,830
know I suspect all of you guys already

74
00:04:26,830 --> 00:04:29,400
know the answer this is absolutely not

75
00:04:29,400 --> 00:04:34,150
impossible and a big part of why this is

76
00:04:34,150 --> 00:04:37,870
not not impossible is code signing and

77
00:04:37,870 --> 00:04:39,820
the way that code signing works on Mac

78
00:04:39,820 --> 00:04:42,970
OS so let's take a look at how it works

79
00:04:42,970 --> 00:04:45,070
just a sort of high-level overview which

80
00:04:45,070 --> 00:04:47,260
is probably something you guys are all

81
00:04:47,260 --> 00:04:50,229
aware of but so most apps and this

82
00:04:50,229 --> 00:04:53,949
includes malware and it includes adware

83
00:04:53,949 --> 00:04:56,740
all this bad stuff most of it's signed

84
00:04:56,740 --> 00:04:59,110
today because if it's not signed it's

85
00:04:59,110 --> 00:05:01,419
kind of a non-starter you know on recent

86
00:05:01,419 --> 00:05:03,370
versions of Mac OS you can't even tell

87
00:05:03,370 --> 00:05:06,400
it to allow unsigned apps you have to

88
00:05:06,400 --> 00:05:09,490
kind of do a you know one-time exception

89
00:05:09,490 --> 00:05:11,169
that the average user doesn't know how

90
00:05:11,169 --> 00:05:13,389
to do so you have if you're distributing

91
00:05:13,389 --> 00:05:15,760
malware you either have to have some

92
00:05:15,760 --> 00:05:17,800
kind of a gatekeeper bypass or you have

93
00:05:17,800 --> 00:05:23,260
to have it signed and one part of the

94
00:05:23,260 --> 00:05:26,919
whole process when you open an app is

95
00:05:26,919 --> 00:05:31,240
that gatekeeper will do a number of

96
00:05:31,240 --> 00:05:33,699
things and one of those is it checks the

97
00:05:33,699 --> 00:05:35,860
signature on the app make sure that it's

98
00:05:35,860 --> 00:05:39,669
valid that hasn't been revoked that the

99
00:05:39,669 --> 00:05:41,470
app hasn't been modified breaking the

100
00:05:41,470 --> 00:05:44,229
signature so you can be pretty sure when

101
00:05:44,229 --> 00:05:46,270
you first open an application that has

102
00:05:46,270 --> 00:05:49,599
been quarantined if Mac OS doesn't

103
00:05:49,599 --> 00:05:52,840
object it is validly signed by some

104
00:05:52,840 --> 00:05:54,669
certificate you don't necessarily know

105
00:05:54,669 --> 00:05:56,169
what you know if it's a valid

106
00:05:56,169 --> 00:05:57,729
certificate like a legitimate

107
00:05:57,729 --> 00:06:03,610
certificate or not so any kind of any

108
00:06:03,610 --> 00:06:05,830
apps that are code signs should be safe

109
00:06:05,830 --> 00:06:07,270
right I mean that's the whole idea

110
00:06:07,270 --> 00:06:10,930
behind code signatures unfortunately

111
00:06:10,930 --> 00:06:15,159
that is absolutely wrong they are safe

112
00:06:15,159 --> 00:06:19,120
at a certain point and only if the

113
00:06:19,120 --> 00:06:21,009
certificate is

114
00:06:21,009 --> 00:06:22,659
legitimate certificate and they haven't

115
00:06:22,659 --> 00:06:28,539
been resigned so basically you know an

116
00:06:28,539 --> 00:06:30,039
app gets quarantined when it's

117
00:06:30,039 --> 00:06:33,749
downloaded gets some metadata added that

118
00:06:33,749 --> 00:06:37,749
metadata tells mac OS when the user

119
00:06:37,749 --> 00:06:40,330
opens this you know kick in gatekeeper

120
00:06:40,330 --> 00:06:41,889
and do all of these checks look at it

121
00:06:41,889 --> 00:06:43,569
for malware look at its code signature

122
00:06:43,569 --> 00:06:50,050
etc after the finder after the the Mac

123
00:06:50,050 --> 00:06:53,620
OS allows the user to open the app you

124
00:06:53,620 --> 00:06:56,819
know following that you know user

125
00:06:56,819 --> 00:06:59,110
approval dialog you know this is an

126
00:06:59,110 --> 00:07:00,759
application downloaded from the internet

127
00:07:00,759 --> 00:07:04,629
that quarantine flag gets removed so

128
00:07:04,629 --> 00:07:06,189
then you can open that app again without

129
00:07:06,189 --> 00:07:09,159
ever seeing that dialog unfortunately

130
00:07:09,159 --> 00:07:10,629
that also means that you can open that

131
00:07:10,629 --> 00:07:14,229
app again in for as long as it's on your

132
00:07:14,229 --> 00:07:16,479
machine and it will never have its code

133
00:07:16,479 --> 00:07:20,169
signature checked again ever and that's

134
00:07:20,169 --> 00:07:21,849
the thing that a lot of people don't

135
00:07:21,849 --> 00:07:23,559
understand a lot of people make the

136
00:07:23,559 --> 00:07:26,050
assumption if an app is code signed

137
00:07:26,050 --> 00:07:27,789
doesn't that mean that that code

138
00:07:27,789 --> 00:07:29,709
signature gets checked all the time and

139
00:07:29,709 --> 00:07:34,319
it it absolutely does not unfortunately

140
00:07:34,800 --> 00:07:40,469
so how can we misuse this well malware

141
00:07:40,469 --> 00:07:44,139
generally wants a couple of things first

142
00:07:44,139 --> 00:07:46,689
of all it usually wants persistence on

143
00:07:46,689 --> 00:07:49,389
the system not always but most of the

144
00:07:49,389 --> 00:07:51,899
time so for example with key ranger

145
00:07:51,899 --> 00:07:55,839
first ransomware it wasn't persistent on

146
00:07:55,839 --> 00:07:58,209
the system when you launched the hacked

147
00:07:58,209 --> 00:08:00,189
transmission app it would just load an

148
00:08:00,189 --> 00:08:04,180
executable and it wasn't that executable

149
00:08:04,180 --> 00:08:07,449
wasn't made persistent so that's think

150
00:08:07,449 --> 00:08:09,009
that kind of thing is an exception to

151
00:08:09,009 --> 00:08:09,610
the rule

152
00:08:09,610 --> 00:08:11,019
ransomware doesn't care if it's

153
00:08:11,019 --> 00:08:12,729
persistent it just wants to get in there

154
00:08:12,729 --> 00:08:15,849
do its damage and then it's done but

155
00:08:15,849 --> 00:08:18,849
most other malware wants persistence the

156
00:08:18,849 --> 00:08:20,469
other thing that it wants is it wants to

157
00:08:20,469 --> 00:08:23,680
be hidden so malware will try to be

158
00:08:23,680 --> 00:08:26,199
stealthy a lot of times on Mac OS it

159
00:08:26,199 --> 00:08:29,590
sucks at doing that

160
00:08:29,590 --> 00:08:32,229
you know if you see things like calm

161
00:08:32,229 --> 00:08:34,120
down Apple in your launch agents your

162
00:08:34,120 --> 00:08:36,719
user launch agents you're like no that's

163
00:08:36,719 --> 00:08:39,490
that's not right

164
00:08:39,490 --> 00:08:41,950
so you know you see a lot of that with

165
00:08:41,950 --> 00:08:44,800
malware and you just wonder why aren't

166
00:08:44,800 --> 00:08:46,540
they trying to find a sneakier way of

167
00:08:46,540 --> 00:08:49,600
staying persistent you know I mean if I

168
00:08:49,600 --> 00:08:51,610
were writing malware I could do a lot

169
00:08:51,610 --> 00:08:53,770
better than that

170
00:08:53,770 --> 00:08:56,320
so you can actually achieve both of

171
00:08:56,320 --> 00:08:59,710
these goals by infecting apps that are

172
00:08:59,710 --> 00:09:01,660
no longer quarantined that are already

173
00:09:01,660 --> 00:09:06,850
on the system and the important thing to

174
00:09:06,850 --> 00:09:09,160
understand here is you infect an app

175
00:09:09,160 --> 00:09:10,650
that's already on the system

176
00:09:10,650 --> 00:09:13,089
you're invalidating the code signature

177
00:09:13,089 --> 00:09:14,589
but that doesn't matter because it's not

178
00:09:14,589 --> 00:09:16,870
getting checked anymore

179
00:09:16,870 --> 00:09:18,700
and then every time you open that app

180
00:09:18,700 --> 00:09:22,050
the malicious code gets executed so

181
00:09:22,050 --> 00:09:24,490
you've got your persistence there you

182
00:09:24,490 --> 00:09:26,080
don't need a launch agent or launch

183
00:09:26,080 --> 00:09:28,839
daemon because they're you know like

184
00:09:28,839 --> 00:09:30,640
with transmission every time you open

185
00:09:30,640 --> 00:09:33,130
the app you're out you know launching

186
00:09:33,130 --> 00:09:34,630
that executable of that malicious

187
00:09:34,630 --> 00:09:40,360
executable code so the way that I did

188
00:09:40,360 --> 00:09:43,029
this for my proof of concept I kind of

189
00:09:43,029 --> 00:09:45,940
and I'll say right up front I sort of

190
00:09:45,940 --> 00:09:48,700
script kitty this because I wanted to

191
00:09:48,700 --> 00:09:51,630
make the point that this is not hard

192
00:09:51,630 --> 00:09:55,570
okay so the way that I did it is I took

193
00:09:55,570 --> 00:09:59,200
a very simple little app that I made

194
00:09:59,200 --> 00:10:03,100
call it that I called good you know it's

195
00:10:03,100 --> 00:10:04,959
very innocent little app there's nothing

196
00:10:04,959 --> 00:10:06,339
wrong with it

197
00:10:06,339 --> 00:10:11,650
so what I did there we go

198
00:10:11,650 --> 00:10:15,130
what I did was I took the win inside the

199
00:10:15,130 --> 00:10:17,560
app bundle and I took the executable and

200
00:10:17,560 --> 00:10:20,500
I renamed it I gave it a name zero for

201
00:10:20,500 --> 00:10:22,600
no particular reason it's just you know

202
00:10:22,600 --> 00:10:24,940
some malware has used that name in the

203
00:10:24,940 --> 00:10:27,670
past when doing the same thing manually

204
00:10:27,670 --> 00:10:29,770
so I figured what the heck I'll follow

205
00:10:29,770 --> 00:10:33,070
that that pattern so renamed at zero and

206
00:10:33,070 --> 00:10:35,740
then I put in a malicious executable and

207
00:10:35,740 --> 00:10:39,370
named it good so at that point you

208
00:10:39,370 --> 00:10:40,830
launch the app at launch

209
00:10:40,830 --> 00:10:44,850
the malicious executable and then that

210
00:10:44,850 --> 00:10:47,280
opens the original which has been

211
00:10:47,280 --> 00:10:52,080
renamed zero so user double clicks the

212
00:10:52,080 --> 00:10:58,740
malicious code runs and then that kicks

213
00:10:58,740 --> 00:11:02,880
off the actual legitimate code so the

214
00:11:02,880 --> 00:11:05,100
user thinks that the application has

215
00:11:05,100 --> 00:11:08,850
opened everything looks normal but in

216
00:11:08,850 --> 00:11:12,030
actuality malicious code is running on

217
00:11:12,030 --> 00:11:17,400
your system and you don't know unless of

218
00:11:17,400 --> 00:11:18,780
course you look at Activity Monitor

219
00:11:18,780 --> 00:11:21,150
that's one you know you might see hey

220
00:11:21,150 --> 00:11:23,700
look there are two copies of this good

221
00:11:23,700 --> 00:11:27,060
app running but the average user doesn't

222
00:11:27,060 --> 00:11:29,190
really look at Activity Monitor all that

223
00:11:29,190 --> 00:11:32,430
much so you're likely not to ever see

224
00:11:32,430 --> 00:11:42,120
this and they're infected so so how hard

225
00:11:42,120 --> 00:11:46,140
is this and like I said I script kitty

226
00:11:46,140 --> 00:11:48,870
this now there are a lot of really cool

227
00:11:48,870 --> 00:11:52,230
sophisticated ways to infect an app by

228
00:11:52,230 --> 00:11:55,140
modifying the binary and all this kind

229
00:11:55,140 --> 00:11:58,560
of stuff that's too hard we don't want

230
00:11:58,560 --> 00:12:00,060
to make this so hard I mean a script

231
00:12:00,060 --> 00:12:01,770
kiddie ought to be able to do this right

232
00:12:01,770 --> 00:12:06,000
so I intentionally tried to copy and

233
00:12:06,000 --> 00:12:07,980
paste as much as I could from Google

234
00:12:07,980 --> 00:12:12,000
searches and I ended up with 22 lines of

235
00:12:12,000 --> 00:12:15,210
Swift code for the malicious executable

236
00:12:15,210 --> 00:12:16,830
now of course that's without any real

237
00:12:16,830 --> 00:12:21,090
malicious code in it but but still and

238
00:12:21,090 --> 00:12:23,970
then 18 lines of Apple script and 16

239
00:12:23,970 --> 00:12:25,890
lines of shell script for a very very

240
00:12:25,890 --> 00:12:30,570
script Kitty installer and that was it

241
00:12:30,570 --> 00:12:32,850
so a little bit of google searching a

242
00:12:32,850 --> 00:12:35,670
little bit i tried as much as I could to

243
00:12:35,670 --> 00:12:39,090
rely on Google searches so required very

244
00:12:39,090 --> 00:12:44,540
little actual knowledge and it was done

245
00:12:44,540 --> 00:12:48,750
there are some exceptions here so I

246
00:12:48,750 --> 00:12:51,480
found out with my proof-of-concept that

247
00:12:51,480 --> 00:12:52,920
if I try to modify

248
00:12:52,920 --> 00:12:56,130
Apple's apps they seem to have some kind

249
00:12:56,130 --> 00:12:59,190
of internal code signature detection

250
00:12:59,190 --> 00:13:02,250
some sort of self-protection and so any

251
00:13:02,250 --> 00:13:04,950
app of apples that I modified it like

252
00:13:04,950 --> 00:13:08,430
this it would fail it would crash when

253
00:13:08,430 --> 00:13:12,510
you launch it now it's not as you can

254
00:13:12,510 --> 00:13:14,699
see from this error message it's not a

255
00:13:14,699 --> 00:13:19,139
particularly useful way of crashing of

256
00:13:19,139 --> 00:13:21,600
alerting the user the user just says oh

257
00:13:21,600 --> 00:13:24,389
well this app crashed I guess maybe I'll

258
00:13:24,389 --> 00:13:26,750
go to the App Store there the Genius Bar

259
00:13:26,750 --> 00:13:31,199
next week and see if you know if Apple

260
00:13:31,199 --> 00:13:33,750
can fix this for me or maybe I'll just

261
00:13:33,750 --> 00:13:35,579
reinstall the app of course the

262
00:13:35,579 --> 00:13:37,139
malicious code is already run and who

263
00:13:37,139 --> 00:13:38,670
knows what else is done to your system

264
00:13:38,670 --> 00:13:41,279
so the user has no idea that they might

265
00:13:41,279 --> 00:13:44,880
be compromised and the important part

266
00:13:44,880 --> 00:13:47,820
here is even though the app crashed

267
00:13:47,820 --> 00:13:51,060
that's the legitimate code that crashed

268
00:13:51,060 --> 00:13:54,930
the malicious code still ran first and

269
00:13:54,930 --> 00:13:57,660
then it executed the legitimate code so

270
00:13:57,660 --> 00:13:58,920
it doesn't matter that the app crashed

271
00:13:58,920 --> 00:14:03,839
the malicious parts still ran also some

272
00:14:03,839 --> 00:14:06,360
third-party apps have their own self

273
00:14:06,360 --> 00:14:08,010
protection they do their own internal

274
00:14:08,010 --> 00:14:11,519
code signature checks pacifist is one

275
00:14:11,519 --> 00:14:14,310
example of this pacifist if you're not

276
00:14:14,310 --> 00:14:16,709
familiar with it it's a really nice

277
00:14:16,709 --> 00:14:21,230
program for cracking open PKG installers

278
00:14:21,230 --> 00:14:24,390
you can look inside of them and it does

279
00:14:24,390 --> 00:14:27,240
its own self protection self checking so

280
00:14:27,240 --> 00:14:31,050
if i modified that i found that it would

281
00:14:31,050 --> 00:14:32,730
actually tell you that the @ of the

282
00:14:32,730 --> 00:14:35,370
application was damaged or might be

283
00:14:35,370 --> 00:14:37,860
infected with a virus so that's a much

284
00:14:37,860 --> 00:14:40,290
more specific better message to give to

285
00:14:40,290 --> 00:14:43,640
the user they understand what's going on

286
00:14:43,640 --> 00:14:46,199
most likely it would just be that the

287
00:14:46,199 --> 00:14:48,600
app is damaged but you still don't want

288
00:14:48,600 --> 00:14:50,790
them to just you know not have the

289
00:14:50,790 --> 00:14:51,959
thought in their head that there might

290
00:14:51,959 --> 00:14:55,010
be an infection there

291
00:14:55,890 --> 00:14:59,420
and there are some potential giveaways

292
00:14:59,420 --> 00:15:03,450
one of those is that in my first

293
00:15:03,450 --> 00:15:05,700
proof-of-concept I ended up with doubled

294
00:15:05,700 --> 00:15:08,670
dock icons so what would happen is the

295
00:15:08,670 --> 00:15:10,589
malicious executable runs and you see

296
00:15:10,589 --> 00:15:12,870
the first icon pop up and start bouncing

297
00:15:12,870 --> 00:15:16,560
on the dock and then the malicious code

298
00:15:16,560 --> 00:15:19,260
does whatever it does in this case pops

299
00:15:19,260 --> 00:15:21,149
open the calculator so you can see the

300
00:15:21,149 --> 00:15:23,730
calculator icon came up next and then

301
00:15:23,730 --> 00:15:26,130
finally the legitimate code ran and that

302
00:15:26,130 --> 00:15:28,560
application icon popped up a second time

303
00:15:28,560 --> 00:15:31,260
and then the whole time the apps open

304
00:15:31,260 --> 00:15:33,240
you got this other little icon just

305
00:15:33,240 --> 00:15:35,959
bouncing away like the kid on sugar and

306
00:15:35,959 --> 00:15:38,610
you're like why is it doing that there's

307
00:15:38,610 --> 00:15:40,709
something wrong here so that's that's a

308
00:15:40,709 --> 00:15:42,360
no-no you if you're malware you don't

309
00:15:42,360 --> 00:15:45,329
want that that's a giveaway there was

310
00:15:45,329 --> 00:15:48,200
actually a really easy fix for that so I

311
00:15:48,200 --> 00:15:51,480
ended up in my revising my

312
00:15:51,480 --> 00:15:52,529
proof-of-concept

313
00:15:52,529 --> 00:15:56,940
to fix that you'd also of course see two

314
00:15:56,940 --> 00:15:59,040
processes an Activity Monitor or two

315
00:15:59,040 --> 00:16:03,360
processes in PS output in a terminal and

316
00:16:03,360 --> 00:16:06,570
that's kind of suspicious but at the

317
00:16:06,570 --> 00:16:08,399
same time you could make it a lot less

318
00:16:08,399 --> 00:16:11,339
suspicious so here you see you see a

319
00:16:11,339 --> 00:16:13,980
good process and then this zero process

320
00:16:13,980 --> 00:16:16,350
I mean we we've as has been talked about

321
00:16:16,350 --> 00:16:19,519
here too in pre you know like yesterday

322
00:16:19,519 --> 00:16:23,190
in previous talks that's suspicious you

323
00:16:23,190 --> 00:16:25,350
know you see some single letter process

324
00:16:25,350 --> 00:16:27,060
you don't want to see that that's not

325
00:16:27,060 --> 00:16:29,820
normal but what if I rename that to good

326
00:16:29,820 --> 00:16:33,990
helper we've all seen these helper

327
00:16:33,990 --> 00:16:35,579
processes that are part of Apps

328
00:16:35,579 --> 00:16:38,399
everybody knows about them if I named it

329
00:16:38,399 --> 00:16:40,709
that you just think oh yeah okay so that

330
00:16:40,709 --> 00:16:43,019
app needs a helper process and you

331
00:16:43,019 --> 00:16:47,760
wouldn't think anymore of it so all

332
00:16:47,760 --> 00:16:53,180
right so demo time let me exit this I

333
00:16:53,180 --> 00:16:57,990
have a VM here with Mojave because I

334
00:16:57,990 --> 00:16:59,160
wanted to point out that this does work

335
00:16:59,160 --> 00:17:03,449
in the latest system and I've got this

336
00:17:03,449 --> 00:17:06,780
infector on my desktop simple little

337
00:17:06,780 --> 00:17:08,349
apple script

338
00:17:08,349 --> 00:17:14,959
let's see why is the mouse not oh there

339
00:17:14,959 --> 00:17:17,569
we go all right so I'll just run that

340
00:17:17,569 --> 00:17:20,089
infector one interesting thing here in

341
00:17:20,089 --> 00:17:22,130
Mojave with this proof of concept

342
00:17:22,130 --> 00:17:25,189
is that it it requires permission for

343
00:17:25,189 --> 00:17:27,980
Apple script this script to actually do

344
00:17:27,980 --> 00:17:30,559
what it needs to do so if I were to do

345
00:17:30,559 --> 00:17:33,679
this again at this point I wouldn't use

346
00:17:33,679 --> 00:17:35,030
the Apple script at all I'd stick to

347
00:17:35,030 --> 00:17:38,330
shell script or maybe create a swift app

348
00:17:38,330 --> 00:17:40,870
that would do the infection process

349
00:17:40,870 --> 00:17:42,890
something something like that that

350
00:17:42,890 --> 00:17:47,260
wouldn't require this permission and

351
00:17:47,260 --> 00:17:51,520
that's it now in reality if this were

352
00:17:51,520 --> 00:17:55,370
some kind of a malware infected make it

353
00:17:55,370 --> 00:17:57,650
look like a document maybe pop open a

354
00:17:57,650 --> 00:18:00,159
decoy document after it was done

355
00:18:00,159 --> 00:18:02,809
something like that something the lesson

356
00:18:02,809 --> 00:18:06,679
the user suspicions but you know you

357
00:18:06,679 --> 00:18:08,299
can't tell that anything happened so

358
00:18:08,299 --> 00:18:11,090
here I've got my good app already in the

359
00:18:11,090 --> 00:18:17,030
Applications folder and boom pops open

360
00:18:17,030 --> 00:18:19,730
the calculator and no double doc icons

361
00:18:19,730 --> 00:18:22,280
or anything like that if they didn't pop

362
00:18:22,280 --> 00:18:24,110
the calculator open you wouldn't know

363
00:18:24,110 --> 00:18:27,470
anything bad happened and this actually

364
00:18:27,470 --> 00:18:30,950
infected everything that's non Apple in

365
00:18:30,950 --> 00:18:33,230
the Applications folder so if I open

366
00:18:33,230 --> 00:18:36,500
Google Chrome boom there's the

367
00:18:36,500 --> 00:18:42,830
calculator if I open Firefox boom

368
00:18:42,830 --> 00:18:46,640
there's the calculator so a very simple

369
00:18:46,640 --> 00:18:50,720
script and a very simple binary

370
00:18:50,720 --> 00:18:53,929
malicious binary and I've infected every

371
00:18:53,929 --> 00:18:56,929
program every non apple program on the

372
00:18:56,929 --> 00:19:00,039
computer alright so back to the slides

373
00:19:00,039 --> 00:19:02,809
so let's talk about how you can detect

374
00:19:02,809 --> 00:19:06,770
something like this so first of all I

375
00:19:06,770 --> 00:19:08,539
mean you can always use the command line

376
00:19:08,539 --> 00:19:13,039
you can use either SP CTL to assess the

377
00:19:13,039 --> 00:19:16,280
signature losing this assess flag you

378
00:19:16,280 --> 00:19:18,240
can also use code sign

379
00:19:18,240 --> 00:19:21,780
with the verify flag either one of those

380
00:19:21,780 --> 00:19:23,250
they do the same thing and they actually

381
00:19:23,250 --> 00:19:24,480
give you the same output

382
00:19:24,480 --> 00:19:28,170
so you can see here there's a legitimate

383
00:19:28,170 --> 00:19:30,870
copy of that good app on the top and you

384
00:19:30,870 --> 00:19:35,700
can see that it verifies and then on the

385
00:19:35,700 --> 00:19:38,430
bottom there's the modified version of

386
00:19:38,430 --> 00:19:41,610
that app and you can see that the code

387
00:19:41,610 --> 00:19:43,650
has no resources but signature indicates

388
00:19:43,650 --> 00:19:45,840
they must be present so there's

389
00:19:45,840 --> 00:19:47,550
something wrong with the signature there

390
00:19:47,550 --> 00:19:49,350
and it doesn't verify so that's

391
00:19:49,350 --> 00:19:53,460
something you could check you can also

392
00:19:53,460 --> 00:19:57,390
use os query to do this so you can use

393
00:19:57,390 --> 00:20:02,130
this particular this particular select

394
00:20:02,130 --> 00:20:05,820
statement and that will tell you whether

395
00:20:05,820 --> 00:20:08,190
or not an app is legitimately signed or

396
00:20:08,190 --> 00:20:09,960
not so I gave it a path to the good

397
00:20:09,960 --> 00:20:12,210
unmodified good app you can see there's

398
00:20:12,210 --> 00:20:16,950
my legitimate apple developer ID

399
00:20:16,950 --> 00:20:20,990
information this is my personal one

400
00:20:20,990 --> 00:20:25,680
so it's legitimately signed right now

401
00:20:25,680 --> 00:20:28,640
after modification this is what you see

402
00:20:28,640 --> 00:20:31,740
so it's no longer validly signed it does

403
00:20:31,740 --> 00:20:33,540
not check out anymore and you won't see

404
00:20:33,540 --> 00:20:37,310
my developer information anymore

405
00:20:37,430 --> 00:20:41,610
now it's possible it this is probably a

406
00:20:41,610 --> 00:20:43,350
little far-fetched but it is possible

407
00:20:43,350 --> 00:20:46,620
that the hacker could on the fly

408
00:20:46,620 --> 00:20:48,960
re sign this with a certificate that's

409
00:20:48,960 --> 00:20:52,230
distributed in within their app that

410
00:20:52,230 --> 00:20:54,720
seems less likely to me because they'd

411
00:20:54,720 --> 00:20:57,240
have to expose their certificate to the

412
00:20:57,240 --> 00:21:00,150
outside world but it's it's a malware

413
00:21:00,150 --> 00:21:02,100
certificate so maybe they're okay with

414
00:21:02,100 --> 00:21:03,450
that they know it's going to get revoked

415
00:21:03,450 --> 00:21:09,060
soon anyway so if you if if malware did

416
00:21:09,060 --> 00:21:13,250
do that you would see different team ID

417
00:21:13,250 --> 00:21:17,550
different identifiers so there you'd

418
00:21:17,550 --> 00:21:19,140
have to know what to what you were

419
00:21:19,140 --> 00:21:22,170
expecting to see there so if you had an

420
00:21:22,170 --> 00:21:24,690
app from me and you looked at the

421
00:21:24,690 --> 00:21:26,040
signing information and it said

422
00:21:26,040 --> 00:21:27,450
something like this you'd know

423
00:21:27,450 --> 00:21:28,860
immediately no that's

424
00:21:28,860 --> 00:21:31,740
not correct that's that something's

425
00:21:31,740 --> 00:21:37,620
fishy there I also another solution and

426
00:21:37,620 --> 00:21:40,470
it was mentioned yesterday is Google

427
00:21:40,470 --> 00:21:45,320
Santa which is it's really cool it does

428
00:21:45,320 --> 00:21:48,540
binary whitelisting and blacklisting you

429
00:21:48,540 --> 00:21:50,790
can run it in lockdown mode where the

430
00:21:50,790 --> 00:21:52,980
only processes that are allowed to run

431
00:21:52,980 --> 00:21:54,870
are the ones that you've white listed

432
00:21:54,870 --> 00:21:57,540
and if it's not on the whitelist it

433
00:21:57,540 --> 00:22:00,299
doesn't get to run at all and the nice

434
00:22:00,299 --> 00:22:02,490
thing about this is that Santa actually

435
00:22:02,490 --> 00:22:05,340
takes two code signature into account so

436
00:22:05,340 --> 00:22:08,610
if you modify the app signature even if

437
00:22:08,610 --> 00:22:09,690
it's on the whitelist

438
00:22:09,690 --> 00:22:15,150
it still doesn't get to run so in this

439
00:22:15,150 --> 00:22:18,590
example I modified that good app and

440
00:22:18,590 --> 00:22:20,910
Santa blocked it even though it was on

441
00:22:20,910 --> 00:22:23,640
the whitelist and you can see there that

442
00:22:23,640 --> 00:22:28,980
the it says publisher not code signed so

443
00:22:28,980 --> 00:22:31,679
that that works pretty well that's a

444
00:22:31,679 --> 00:22:34,400
really nice system for blocking stuff

445
00:22:34,400 --> 00:22:38,910
there are some some pros and cons here

446
00:22:38,910 --> 00:22:41,850
so the big Pro is that this is difficult

447
00:22:41,850 --> 00:22:43,320
to bypass I'm not gonna say it's

448
00:22:43,320 --> 00:22:45,600
impossible I don't know of any bypasses

449
00:22:45,600 --> 00:22:48,570
but I never say never when it comes to

450
00:22:48,570 --> 00:22:50,549
computers there's always a vulnerability

451
00:22:50,549 --> 00:22:54,390
and everything so but it is difficult to

452
00:22:54,390 --> 00:22:57,240
bypass if you can't run the malicious

453
00:22:57,240 --> 00:22:59,880
code on the system at all it's really

454
00:22:59,880 --> 00:23:01,260
hard to infect the system in the first

455
00:23:01,260 --> 00:23:03,840
place you can't run this malicious

456
00:23:03,840 --> 00:23:08,280
infector if you can't run it now on the

457
00:23:08,280 --> 00:23:10,460
other hand there are some cons as well

458
00:23:10,460 --> 00:23:13,440
if you're running this in some

459
00:23:13,440 --> 00:23:16,290
enterprise environment you're gonna end

460
00:23:16,290 --> 00:23:18,419
up getting a lot of people asking you

461
00:23:18,419 --> 00:23:20,549
hey can you whitelist this you know

462
00:23:20,549 --> 00:23:22,530
sales is gonna say hey we just got this

463
00:23:22,530 --> 00:23:24,270
new app that we're demoing can we

464
00:23:24,270 --> 00:23:25,950
whitelist this and then you know your

465
00:23:25,950 --> 00:23:27,750
developers are going to say hey why is

466
00:23:27,750 --> 00:23:29,820
this blocking all of my dev tools that I

467
00:23:29,820 --> 00:23:35,490
want to run so it's it will cause a lot

468
00:23:35,490 --> 00:23:37,559
of overhead with people wanting you to

469
00:23:37,559 --> 00:23:39,419
put things on the whitelist

470
00:23:39,419 --> 00:23:42,570
having legitimate things

471
00:23:42,570 --> 00:23:45,000
and it's really unrealistic for certain

472
00:23:45,000 --> 00:23:47,580
kinds of users particularly developers

473
00:23:47,580 --> 00:23:49,260
because they're always running all kinds

474
00:23:49,260 --> 00:23:52,740
of weird stuff a lot of its self built

475
00:23:52,740 --> 00:23:56,190
so it's it's something that it may work

476
00:23:56,190 --> 00:23:58,350
for some of your users but it probably

477
00:23:58,350 --> 00:24:00,030
won't work very well for all of your

478
00:24:00,030 --> 00:24:07,440
users so but with with that we're all

479
00:24:07,440 --> 00:24:10,020
set right I mean we can use Santa or

480
00:24:10,020 --> 00:24:11,490
something like that and we can detect

481
00:24:11,490 --> 00:24:14,610
that an application has been modified

482
00:24:14,610 --> 00:24:17,790
and we can just block it right just

483
00:24:17,790 --> 00:24:19,680
block any app that's been modified where

484
00:24:19,680 --> 00:24:23,030
the signature is invalid right

485
00:24:23,240 --> 00:24:27,590
unfortunately it's not quite that simple

486
00:24:27,590 --> 00:24:30,390
there are a lot of things of course that

487
00:24:30,390 --> 00:24:31,440
you guys all know there are a lot of

488
00:24:31,440 --> 00:24:33,180
things out there that have no signature

489
00:24:33,180 --> 00:24:35,130
at all you know things like a lot of

490
00:24:35,130 --> 00:24:38,820
open source projects open VPN for

491
00:24:38,820 --> 00:24:41,190
example there's it's just not signed at

492
00:24:41,190 --> 00:24:44,460
all and it's legitimate so you know

493
00:24:44,460 --> 00:24:47,820
you've got that but then worse you've

494
00:24:47,820 --> 00:24:49,860
got applications that are installed with

495
00:24:49,860 --> 00:24:52,860
obsolete or broken signatures or even

496
00:24:52,860 --> 00:24:55,470
apps that break their own signatures by

497
00:24:55,470 --> 00:24:59,300
modifying themselves at runtime so

498
00:24:59,300 --> 00:25:02,130
that's a problem if you're relying on

499
00:25:02,130 --> 00:25:03,750
code signatures to make sure all your

500
00:25:03,750 --> 00:25:06,240
apps are safe and apps are actually not

501
00:25:06,240 --> 00:25:07,530
signed or are breaking their own

502
00:25:07,530 --> 00:25:11,820
signatures I mean what do you do so for

503
00:25:11,820 --> 00:25:14,880
example Open VPN this is a very popular

504
00:25:14,880 --> 00:25:19,290
VPN I actually have this on my computer

505
00:25:19,290 --> 00:25:22,350
right now it's the one that we use on

506
00:25:22,350 --> 00:25:27,030
our bytes and if you try and look at the

507
00:25:27,030 --> 00:25:28,500
code signature you know it comes back

508
00:25:28,500 --> 00:25:30,690
it's not signed so the problem with that

509
00:25:30,690 --> 00:25:34,590
is if I were to get access to a system

510
00:25:34,590 --> 00:25:37,710
with Open VPN on it I could modify open

511
00:25:37,710 --> 00:25:40,050
VPN and you would never know because

512
00:25:40,050 --> 00:25:42,210
there's no code signature you couldn't

513
00:25:42,210 --> 00:25:44,400
tell that it had been modified unless

514
00:25:44,400 --> 00:25:47,310
you went and downloaded open VPN on

515
00:25:47,310 --> 00:25:51,150
another system installed it and then

516
00:25:51,150 --> 00:25:52,920
grabbed all the parts from here and

517
00:25:52,920 --> 00:25:53,450
grabbed all the

518
00:25:53,450 --> 00:25:55,279
arts from there and then compared them

519
00:25:55,279 --> 00:25:58,510
and nobody's gonna actually do that so

520
00:25:58,510 --> 00:26:02,240
so this is this is a problem you know

521
00:26:02,240 --> 00:26:07,010
you can't verify that application other

522
00:26:07,010 --> 00:26:09,580
applications have obsolete signatures

523
00:26:09,580 --> 00:26:12,700
and so I'm gonna pick on a big one there

524
00:26:12,700 --> 00:26:14,929
from a company that likes to pick on

525
00:26:14,929 --> 00:26:16,309
other people about their own

526
00:26:16,309 --> 00:26:20,419
vulnerabilities so Google Chrome for

527
00:26:20,419 --> 00:26:21,860
whatever reason this is the latest

528
00:26:21,860 --> 00:26:24,049
version of Google Chrome has an obsolete

529
00:26:24,049 --> 00:26:27,289
signature so it was built using older

530
00:26:27,289 --> 00:26:32,380
tools it's not up to code so to speak so

531
00:26:32,380 --> 00:26:35,000
that's a problem you know if you and

532
00:26:35,000 --> 00:26:37,970
I've actually seen malware seen it's

533
00:26:37,970 --> 00:26:40,279
it's more adware that will get inside

534
00:26:40,279 --> 00:26:42,700
and make changes inside the chrome app

535
00:26:42,700 --> 00:26:46,720
so this is actually happening to Chrome

536
00:26:46,720 --> 00:26:52,149
not commonly but it it does happen

537
00:26:52,659 --> 00:26:57,649
others are broken in other ways so for

538
00:26:57,649 --> 00:27:02,240
example I really like yubico I like the

539
00:27:02,240 --> 00:27:08,269
yuba keys but there you baqi PIV manager

540
00:27:08,269 --> 00:27:13,399
app is not quite and right so if you

541
00:27:13,399 --> 00:27:15,799
look you can see it's validly signed

542
00:27:15,799 --> 00:27:18,200
well it is signed you can see the team

543
00:27:18,200 --> 00:27:19,789
identifier you can see all that

544
00:27:19,789 --> 00:27:23,149
information but if you try to verify

545
00:27:23,149 --> 00:27:25,309
that signature you see that there is

546
00:27:25,309 --> 00:27:30,769
this PIV man package file inside of it

547
00:27:30,769 --> 00:27:34,669
that is not signed so that's a problem

548
00:27:34,669 --> 00:27:36,529
that means that you could replace that

549
00:27:36,529 --> 00:27:40,730
file with something malicious and you

550
00:27:40,730 --> 00:27:42,440
would never be able to tell because

551
00:27:42,440 --> 00:27:48,320
that's not signed and probably the worst

552
00:27:48,320 --> 00:27:53,590
that I saw was the zoom app

553
00:27:54,469 --> 00:27:57,379
this this one's bad if you've ever

554
00:27:57,379 --> 00:28:01,339
looked at the zoom installer it is

555
00:28:01,339 --> 00:28:05,190
absolutely ridiculous there's actually

556
00:28:05,190 --> 00:28:08,009
uh I should have put the link to it here

557
00:28:08,009 --> 00:28:10,440
but there's actually a blog post out

558
00:28:10,440 --> 00:28:16,909
there that calls this as bad as malware

559
00:28:16,909 --> 00:28:19,349
because it really is the way the

560
00:28:19,349 --> 00:28:20,940
Installer works like some of the stuff's

561
00:28:20,940 --> 00:28:22,709
getting installed by the pre install

562
00:28:22,709 --> 00:28:25,619
script the the payload is practically

563
00:28:25,619 --> 00:28:28,519
non-existent it kind of builds the app

564
00:28:28,519 --> 00:28:31,829
it doesn't actually have the app in the

565
00:28:31,829 --> 00:28:34,259
payload and just install it it actually

566
00:28:34,259 --> 00:28:36,809
builds the app through the scripts so

567
00:28:36,809 --> 00:28:39,929
it's it's ridiculous and if you try to

568
00:28:39,929 --> 00:28:41,909
validate the code signature on the zoom

569
00:28:41,909 --> 00:28:47,070
app you get all these errors so that's

570
00:28:47,070 --> 00:28:50,070
bad now this I actually I reported this

571
00:28:50,070 --> 00:28:53,879
to the zoom team and to their credit

572
00:28:53,879 --> 00:28:56,909
they responded very quickly and said

573
00:28:56,909 --> 00:28:58,799
they've identified the problem and are

574
00:28:58,799 --> 00:29:03,209
working on fixing it so we'll see

575
00:29:03,209 --> 00:29:07,919
hopefully it'll be fixed because I use

576
00:29:07,919 --> 00:29:10,679
this app every day and I hate the fact

577
00:29:10,679 --> 00:29:13,529
that it's this janky it's you know it's

578
00:29:13,529 --> 00:29:20,489
bad so but you know that just raises the

579
00:29:20,489 --> 00:29:22,070
question you've got all these broken

580
00:29:22,070 --> 00:29:23,849
signatures out there all these

581
00:29:23,849 --> 00:29:26,519
non-existent signatures what do we do

582
00:29:26,519 --> 00:29:27,779
about this

583
00:29:27,779 --> 00:29:32,239
so there's not a good solution right now

584
00:29:32,239 --> 00:29:34,919
you know it's it's just not a not a good

585
00:29:34,919 --> 00:29:36,389
situation right now

586
00:29:36,389 --> 00:29:41,099
so what you really should do is every

587
00:29:41,099 --> 00:29:42,869
app that you use you should always pay

588
00:29:42,869 --> 00:29:44,549
close attention to the signature now I

589
00:29:44,549 --> 00:29:46,289
know I'm not everybody is gonna go and

590
00:29:46,289 --> 00:29:48,119
check code signature on every app every

591
00:29:48,119 --> 00:29:49,709
time they run it that's kind of silly

592
00:29:49,709 --> 00:29:51,629
but yeah just check it every now and

593
00:29:51,629 --> 00:29:54,839
then and see and of course pay pay close

594
00:29:54,839 --> 00:29:57,409
attention to the apps that are messed up

595
00:29:57,409 --> 00:30:00,419
you know it's it's it's gonna be hard to

596
00:30:00,419 --> 00:30:01,679
impossible to tell if they've been

597
00:30:01,679 --> 00:30:02,340
modified

598
00:30:02,340 --> 00:30:06,420
though if you find an app that has a

599
00:30:06,420 --> 00:30:10,050
broken or missing code signature report

600
00:30:10,050 --> 00:30:12,440
it to the vendor like I did with zoom

601
00:30:12,440 --> 00:30:14,580
you know you may get a very positive

602
00:30:14,580 --> 00:30:15,510
result

603
00:30:15,510 --> 00:30:19,290
hopefully you may not in some cases like

604
00:30:19,290 --> 00:30:21,240
with open source projects their issues

605
00:30:21,240 --> 00:30:23,580
with code signing so you may not be able

606
00:30:23,580 --> 00:30:26,190
to get an open source app code signed

607
00:30:26,190 --> 00:30:29,880
but maybe you can maybe you can find a

608
00:30:29,880 --> 00:30:31,560
way to help them figure out how to do

609
00:30:31,560 --> 00:30:35,730
that if any of you guys are developing

610
00:30:35,730 --> 00:30:39,390
apps make sure you get the code signing

611
00:30:39,390 --> 00:30:41,340
right don't do any of these weird things

612
00:30:41,340 --> 00:30:43,920
like some of these folks have have done

613
00:30:43,920 --> 00:30:47,130
and I'm not really a other than the zoom

614
00:30:47,130 --> 00:30:49,830
app which was just that was bad I'm not

615
00:30:49,830 --> 00:30:52,350
I'm not necessarily trying to cut down

616
00:30:52,350 --> 00:30:54,960
any of these companies anybody everybody

617
00:30:54,960 --> 00:30:56,180
makes mistakes

618
00:30:56,180 --> 00:30:58,530
we actually shipped a version of

619
00:30:58,530 --> 00:31:00,720
malwarebytes at one point that had a

620
00:31:00,720 --> 00:31:02,970
minor code signing issue and one of the

621
00:31:02,970 --> 00:31:05,580
components so everybody makes the

622
00:31:05,580 --> 00:31:06,930
mistake

623
00:31:06,930 --> 00:31:08,940
the important thing is that you make

624
00:31:08,940 --> 00:31:10,910
people aware of it so they can fix it

625
00:31:10,910 --> 00:31:15,540
and then obviously we've got to spread

626
00:31:15,540 --> 00:31:17,340
the word on this and that's what this is

627
00:31:17,340 --> 00:31:19,620
all about this is not about me to you

628
00:31:19,620 --> 00:31:21,390
know saying oh look at this new

629
00:31:21,390 --> 00:31:23,520
vulnerability that I found this is all

630
00:31:23,520 --> 00:31:26,340
my my work you know what this is nothing

631
00:31:26,340 --> 00:31:29,850
new this is not my discovery all I did

632
00:31:29,850 --> 00:31:32,580
was play around with it to try to raise

633
00:31:32,580 --> 00:31:36,080
awareness of this problem so please

634
00:31:36,080 --> 00:31:38,730
spread the word if you know a developer

635
00:31:38,730 --> 00:31:42,450
tell them about this also we should

636
00:31:42,450 --> 00:31:44,760
encourage all developers in my opinion

637
00:31:44,760 --> 00:31:48,000
to implement their own code signing

638
00:31:48,000 --> 00:31:52,350
checks in their apps it's not perfect

639
00:31:52,350 --> 00:31:55,320
obviously if I'm targeting a particular

640
00:31:55,320 --> 00:31:57,450
app it doesn't matter if it has code

641
00:31:57,450 --> 00:31:58,860
signing checks I can just go in there

642
00:31:58,860 --> 00:32:00,900
and change the binary and and get rid of

643
00:32:00,900 --> 00:32:04,680
that check right but the kind of skitty

644
00:32:04,680 --> 00:32:06,840
thing like I did here would absolutely

645
00:32:06,840 --> 00:32:12,240
not not work undetected so that's doing

646
00:32:12,240 --> 00:32:13,620
your own code signing checks is

647
00:32:13,620 --> 00:32:14,440
important

648
00:32:14,440 --> 00:32:17,650
I kind of doubt that apples ever going

649
00:32:17,650 --> 00:32:19,960
to implement a code-signing check every

650
00:32:19,960 --> 00:32:22,570
single time an app runs because I've

651
00:32:22,570 --> 00:32:24,610
been playing with this a lot lately and

652
00:32:24,610 --> 00:32:28,530
it can be very time consuming I actually

653
00:32:28,530 --> 00:32:32,020
tried to execute an OS query script on

654
00:32:32,020 --> 00:32:36,400
my machine I did a select that looked at

655
00:32:36,400 --> 00:32:38,410
the code signing of all everything in

656
00:32:38,410 --> 00:32:41,230
the Applications folder and then I just

657
00:32:41,230 --> 00:32:45,220
sort of sat back and waited waited and

658
00:32:45,220 --> 00:32:47,680
the fans started spinning and we're

659
00:32:47,680 --> 00:32:49,420
getting louder and louder like an

660
00:32:49,420 --> 00:32:51,190
airplane taking off the machine got

661
00:32:51,190 --> 00:32:54,100
really hot and half an hour later I was

662
00:32:54,100 --> 00:32:55,690
starting to get a little bit worried

663
00:32:55,690 --> 00:32:59,050
that it was going to melt so I at that

664
00:32:59,050 --> 00:33:02,080
point I terminated it so that makes you

665
00:33:02,080 --> 00:33:04,330
know that it's it is a problem you know

666
00:33:04,330 --> 00:33:06,040
it takes a little bit of time to check

667
00:33:06,040 --> 00:33:08,200
these code signatures so it's I doubt

668
00:33:08,200 --> 00:33:11,110
it's something that Apple will or can do

669
00:33:11,110 --> 00:33:13,540
for every single process on the whole

670
00:33:13,540 --> 00:33:16,270
machine but still if you're if you're an

671
00:33:16,270 --> 00:33:17,740
app developer check your own code

672
00:33:17,740 --> 00:33:23,140
signature and that is it if you want to

673
00:33:23,140 --> 00:33:27,010
copy the slides is right there I am I am

674
00:33:27,010 --> 00:33:30,850
not trying to trick any of you guys with

675
00:33:30,850 --> 00:33:32,890
this like some people have done in the

676
00:33:32,890 --> 00:33:37,660
past so I I the last time I gave this

677
00:33:37,660 --> 00:33:40,720
gave a talk with you know something like

678
00:33:40,720 --> 00:33:42,760
this the person that spoke right before

679
00:33:42,760 --> 00:33:49,050
me had a QR code just like this and

680
00:33:49,050 --> 00:33:53,290
rickrolled everybody in the room so this

681
00:33:53,290 --> 00:33:55,240
is legit this is I'm not Rick rollin you

682
00:33:55,240 --> 00:34:00,180
know so and that's it any questions

683
00:34:00,790 --> 00:34:09,359
[Applause]

684
00:34:14,020 --> 00:34:16,540
the question was does notarization in

685
00:34:16,540 --> 00:34:20,590
Mojave have any impact and I have done a

686
00:34:20,590 --> 00:34:22,540
little bit of testing I downloaded a

687
00:34:22,540 --> 00:34:25,179
couple of apps that are notarized and I

688
00:34:25,179 --> 00:34:27,879
used my script on them and it still

689
00:34:27,879 --> 00:34:31,719
worked so notarization doesn't actually

690
00:34:31,719 --> 00:34:34,350
fix it

691
00:34:59,660 --> 00:35:03,319
yeah absolutely you know I mentioned

692
00:35:03,319 --> 00:35:05,630
that I had seen adware that was changing

693
00:35:05,630 --> 00:35:08,000
Chrome it was actually changing some

694
00:35:08,000 --> 00:35:11,420
data files that had some JavaScript in

695
00:35:11,420 --> 00:35:15,980
them so those actually were not because

696
00:35:15,980 --> 00:35:20,150
it was not actually code as as you could

697
00:35:20,150 --> 00:35:23,329
see as the system could see it that

698
00:35:23,329 --> 00:35:24,890
wasn't part of the code signature so it

699
00:35:24,890 --> 00:35:26,630
actually didn't invalidate the code

700
00:35:26,630 --> 00:35:41,809
signature yeah absolutely yeah

701
00:35:41,809 --> 00:35:44,890
yep you could check now I don't know

702
00:35:44,890 --> 00:35:47,509
there there might be some problems with

703
00:35:47,509 --> 00:35:49,609
that I don't know cuz it would be

704
00:35:49,609 --> 00:35:54,619
possible for malware to like take note

705
00:35:54,619 --> 00:35:57,470
of the creation and modification dates

706
00:35:57,470 --> 00:36:00,099
and then reset them after it modified

707
00:36:00,099 --> 00:36:02,059
but there might be some way that

708
00:36:02,059 --> 00:36:04,250
somebody smarter than me could figure

709
00:36:04,250 --> 00:36:08,200
out to get the actual modification date

710
00:36:08,200 --> 00:36:14,410
so yeah

711
00:36:20,240 --> 00:36:23,250
that's a good question so the the

712
00:36:23,250 --> 00:36:25,170
question was the infect her is already

713
00:36:25,170 --> 00:36:27,150
there so why would now or want to do

714
00:36:27,150 --> 00:36:32,280
this and the main reason is that there's

715
00:36:32,280 --> 00:36:35,060
almost always a second stage to any

716
00:36:35,060 --> 00:36:38,520
dropper so you run whatever this dropper

717
00:36:38,520 --> 00:36:42,300
is on your system it almost always will

718
00:36:42,300 --> 00:36:44,520
drop the actual malicious payload

719
00:36:44,520 --> 00:36:46,500
somewhere on the system and give it

720
00:36:46,500 --> 00:36:50,550
persistence so that maybe through launch

721
00:36:50,550 --> 00:36:53,640
D it may be through cron it may be as a

722
00:36:53,640 --> 00:36:56,460
login item there are a lot of different

723
00:36:56,460 --> 00:37:00,630
ways that it's done but just having the

724
00:37:00,630 --> 00:37:04,470
dropper or the infector there doesn't

725
00:37:04,470 --> 00:37:07,770
actually give you persistence now if

726
00:37:07,770 --> 00:37:09,720
it's ransomware that's all you need you

727
00:37:09,720 --> 00:37:11,720
just need it to run once and that's it

728
00:37:11,720 --> 00:37:14,400
but any other kind of malware that wants

729
00:37:14,400 --> 00:37:16,800
persistence is gonna need something it's

730
00:37:16,800 --> 00:37:18,240
gonna need to deploy something though

731
00:37:18,240 --> 00:37:29,190
the system yeah I actually have not seen

732
00:37:29,190 --> 00:37:33,750
this in the wild yet which is good but

733
00:37:33,750 --> 00:37:36,420
the it makes me nervous because this is

734
00:37:36,420 --> 00:37:40,560
really easily possible so I am really

735
00:37:40,560 --> 00:37:44,070
curious why we haven't seen it yet but a

736
00:37:44,070 --> 00:37:46,619
lot of the common infection vectors

737
00:37:46,619 --> 00:37:50,490
these days for adware and stuff like

738
00:37:50,490 --> 00:37:52,950
that it's it's always a fake Adobe Flash

739
00:37:52,950 --> 00:37:58,140
Player installer well when it's not it's

740
00:37:58,140 --> 00:38:01,280
things like you know crappy video

741
00:38:01,280 --> 00:38:05,369
plugins or video players or you know

742
00:38:05,369 --> 00:38:09,000
pirated stuff you know all kinds of

743
00:38:09,000 --> 00:38:10,380
stuff like that and then of course with

744
00:38:10,380 --> 00:38:12,600
actual malware it can be things like

745
00:38:12,600 --> 00:38:15,000
fake documents you know so like an app

746
00:38:15,000 --> 00:38:17,820
that looks like a Word document or it

747
00:38:17,820 --> 00:38:19,440
could actually be a Word document

748
00:38:19,440 --> 00:38:23,609
with macros in it although that's a

749
00:38:23,609 --> 00:38:26,460
little easier because Microsoft has got

750
00:38:26,460 --> 00:38:29,390
recent versions of office sandboxed

751
00:38:29,390 --> 00:38:31,550
there are some ways to escape from the

752
00:38:31,550 --> 00:38:33,680
sandbox so it's not a guarantee but I've

753
00:38:33,680 --> 00:38:36,440
run some malware that had Mac specific

754
00:38:36,440 --> 00:38:40,250
code in the the VB scripts and it didn't

755
00:38:40,250 --> 00:38:41,720
drop it what it was supposed to on the

756
00:38:41,720 --> 00:38:46,029
system so yeah

757
00:38:53,190 --> 00:38:56,559
yes that's exactly it so he asked if I

758
00:38:56,559 --> 00:39:00,550
used LS UI element in the the P list in

759
00:39:00,550 --> 00:39:02,650
the info.plist file in the application

760
00:39:02,650 --> 00:39:05,319
bundle that's exactly how I made how I

761
00:39:05,319 --> 00:39:10,829
hid that bouncing icon so basically the

762
00:39:10,829 --> 00:39:14,349
you set LS UI element in the info.plist

763
00:39:14,349 --> 00:39:17,290
and it says that that application is a

764
00:39:17,290 --> 00:39:21,040
background task basically so it doesn't

765
00:39:21,040 --> 00:39:23,410
show up in the dock and then as soon as

766
00:39:23,410 --> 00:39:25,900
it launches it removes that from its own

767
00:39:25,900 --> 00:39:28,329
P list so that when it launches the

768
00:39:28,329 --> 00:39:30,819
legitimate code that one appears in the

769
00:39:30,819 --> 00:39:35,440
dock and then when it quits it resets it

770
00:39:35,440 --> 00:39:38,530
so every time it's you know it's able to

771
00:39:38,530 --> 00:39:43,170
hide the malicious process from the dock

772
00:39:43,200 --> 00:39:48,520
yeah I did not because I don't know how

773
00:39:48,520 --> 00:39:52,960
exactly but if anybody has any contacts

774
00:39:52,960 --> 00:39:57,640
on the chrome team that I could I say if

775
00:39:57,640 --> 00:40:00,280
you know anybody let me know because I

776
00:40:00,280 --> 00:40:04,119
would love to be able to notify them you

777
00:40:04,119 --> 00:40:13,020
what cool anybody oh yeah

778
00:40:16,440 --> 00:40:20,710
it probably would but it depends depends

779
00:40:20,710 --> 00:40:22,180
on how they're doing it if it's if

780
00:40:22,180 --> 00:40:24,369
you're dropping a payload that they're

781
00:40:24,369 --> 00:40:26,290
already familiar with then they ought to

782
00:40:26,290 --> 00:40:29,530
be able to detect it if they're I kind

783
00:40:29,530 --> 00:40:32,170
of don't think that a lot of them would

784
00:40:32,170 --> 00:40:33,430
be looking for this kind of behavior

785
00:40:33,430 --> 00:40:37,119
with behavioral detection but if they

786
00:40:37,119 --> 00:40:46,200
did they could catch it so anybody else

787
00:40:46,200 --> 00:40:49,490
all right thank you

788
00:40:49,490 --> 00:40:59,439
[Applause]

789
00:41:11,770 --> 00:41:13,880
thanks again Thomas I don't know about

790
00:41:13,880 --> 00:41:16,070
all of you but I'm super stoked he's one

791
00:41:16,070 --> 00:41:18,370
of the good guys

