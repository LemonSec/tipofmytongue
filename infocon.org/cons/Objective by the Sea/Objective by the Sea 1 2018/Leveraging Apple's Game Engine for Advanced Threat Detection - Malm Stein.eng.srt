1
00:00:00,000 --> 00:00:02,190
[Music]

2
00:00:02,629 --> 00:00:07,048
all right we are going to begin the last

3
00:00:07,049 --> 00:00:09,650
talk of the day I will briefly introduce

4
00:00:09,650 --> 00:00:13,170
Josh and John they're actually my

5
00:00:13,170 --> 00:00:16,260
co-workers at digital security we go way

6
00:00:16,260 --> 00:00:18,900
back all sorts of shenanigans but now

7
00:00:18,900 --> 00:00:20,810
we're fighting the good fight to protect

8
00:00:20,810 --> 00:00:23,400
Mac computers from all sorts of evil

9
00:00:23,400 --> 00:00:24,930
things so I'm really exciting about

10
00:00:24,930 --> 00:00:27,570
their talk try to save you know really

11
00:00:27,570 --> 00:00:29,340
interesting talk for the last one of the

12
00:00:29,340 --> 00:00:30,960
day so everyone's still sticking around

13
00:00:30,960 --> 00:00:33,750
so with no further ado here is Josh and

14
00:00:33,750 --> 00:00:36,110
John let's give them a round of applause

15
00:00:36,110 --> 00:00:42,110
[Applause]

16
00:00:42,110 --> 00:00:46,739
Thank You Patrick everybody last talk of

17
00:00:46,739 --> 00:00:48,930
the day here only thing between us and

18
00:00:48,930 --> 00:00:50,610
happy hour in Maui

19
00:00:50,610 --> 00:00:55,860
so we'll get going here all right so

20
00:00:55,860 --> 00:00:58,430
today we're gonna talk about our

21
00:00:58,430 --> 00:01:01,260
leveraging apples game engine to detect

22
00:01:01,260 --> 00:01:03,930
Mac OS threats like Patrick said I'm

23
00:01:03,930 --> 00:01:07,170
John my coworker Josh is gonna be also

24
00:01:07,170 --> 00:01:09,450
presenting with me today and along with

25
00:01:09,450 --> 00:01:11,490
Patrick we are the co-founders of

26
00:01:11,490 --> 00:01:17,070
digital security all right so today

27
00:01:17,070 --> 00:01:18,720
we're going to talk about what do we do

28
00:01:18,720 --> 00:01:20,820
here at digital security so we want to

29
00:01:20,820 --> 00:01:22,140
talk about some of the tools that we've

30
00:01:22,140 --> 00:01:24,090
been developing over the past few months

31
00:01:24,090 --> 00:01:26,729
and just want to share with you today to

32
00:01:26,729 --> 00:01:29,000
get it out there so when we got together

33
00:01:29,000 --> 00:01:32,009
the main idea behind it Judah is we

34
00:01:32,009 --> 00:01:34,020
wanted to take all of these great

35
00:01:34,020 --> 00:01:36,119
objective-c tools that Patrick's been

36
00:01:36,119 --> 00:01:38,400
working on over the past few years and

37
00:01:38,400 --> 00:01:41,340
see how we could get them more into the

38
00:01:41,340 --> 00:01:43,470
enterprise they provide great kind of

39
00:01:43,470 --> 00:01:44,909
personal protection and they're great

40
00:01:44,909 --> 00:01:47,340
for cybersecurity researchers all those

41
00:01:47,340 --> 00:01:48,810
sorts of things so we want to look at it

42
00:01:48,810 --> 00:01:51,540
and say ok how can we take it and get it

43
00:01:51,540 --> 00:01:55,920
over there and so we looked at and we

44
00:01:55,920 --> 00:01:58,469
all of the tools and you know we thought

45
00:01:58,469 --> 00:02:01,619
how can we approve upon this design we

46
00:02:01,619 --> 00:02:03,240
don't just want to take each individual

47
00:02:03,240 --> 00:02:05,850
tool kind of bundle it up duck take duct

48
00:02:05,850 --> 00:02:08,399
tape it all together but we really

49
00:02:08,399 --> 00:02:10,008
wanted to reimagine what we

50
00:02:10,008 --> 00:02:12,129
do with all of these great tools

51
00:02:12,129 --> 00:02:14,480
particularly we want to make it so that

52
00:02:14,480 --> 00:02:17,120
we could take you know a new idea or

53
00:02:17,120 --> 00:02:18,980
when a new threat comes out that sort of

54
00:02:18,980 --> 00:02:21,470
thing that we're able to quickly react

55
00:02:21,470 --> 00:02:24,829
to it and deploy detections for that

56
00:02:24,829 --> 00:02:27,769
without having to create a new tool test

57
00:02:27,769 --> 00:02:30,110
it out deploy it and all of those sorts

58
00:02:30,110 --> 00:02:30,560
of things

59
00:02:30,560 --> 00:02:32,569
so we want to be a very quick and

60
00:02:32,569 --> 00:02:35,450
versatile detecting detection engine

61
00:02:35,450 --> 00:02:39,049
that we could easily extend so we

62
00:02:39,049 --> 00:02:41,030
decided to kind of have a look at it and

63
00:02:41,030 --> 00:02:42,920
today we're gonna talk about that

64
00:02:42,920 --> 00:02:46,400
overall redesign and and what we did so

65
00:02:46,400 --> 00:02:47,930
first off we're gonna start off by

66
00:02:47,930 --> 00:02:50,180
introducing what we're calling monitor

67
00:02:50,180 --> 00:02:52,909
kit so kind of a it's our open source

68
00:02:52,909 --> 00:02:55,310
framework that we use is the basis for

69
00:02:55,310 --> 00:02:58,670
our tool then get into doing some game

70
00:02:58,670 --> 00:03:01,159
engine based analysis and then followed

71
00:03:01,159 --> 00:03:02,930
by how do we use these things in

72
00:03:02,930 --> 00:03:04,819
conjunction to look at some real-world

73
00:03:04,819 --> 00:03:08,840
kind of recent Mac OS threats all right

74
00:03:08,840 --> 00:03:11,060
so first off going to talk about monitor

75
00:03:11,060 --> 00:03:14,180
kit our goal with Monarch it was to

76
00:03:14,180 --> 00:03:16,669
create an easy to use framework that

77
00:03:16,669 --> 00:03:19,160
provides basically a lot or all of the

78
00:03:19,160 --> 00:03:21,199
monitoring capabilities that Mac OS has

79
00:03:21,199 --> 00:03:24,199
built in so you know we kind of looked

80
00:03:24,199 --> 00:03:26,510
at it and we said hey we need to develop

81
00:03:26,510 --> 00:03:28,010
this for a lot of the tools we're

82
00:03:28,010 --> 00:03:29,660
building Patrick's built a lot of this

83
00:03:29,660 --> 00:03:30,199
as well

84
00:03:30,199 --> 00:03:32,660
so hey why not open source it and get it

85
00:03:32,660 --> 00:03:35,900
out there so you know we kind of put all

86
00:03:35,900 --> 00:03:38,299
this together into an easy-to-use

87
00:03:38,299 --> 00:03:40,730
framework and then along the way we also

88
00:03:40,730 --> 00:03:43,040
took a lot of steps to optimize the

89
00:03:43,040 --> 00:03:44,930
different monitors look for different

90
00:03:44,930 --> 00:03:47,180
ways to kind of you know clean that up

91
00:03:47,180 --> 00:03:49,519
and make it really easy to get access to

92
00:03:49,519 --> 00:03:52,549
this information so I will say there are

93
00:03:52,549 --> 00:03:54,980
lots of great code samples out there for

94
00:03:54,980 --> 00:03:57,560
accessing audit DB SMM records and all

95
00:03:57,560 --> 00:03:58,720
of those sorts of things

96
00:03:58,720 --> 00:04:01,730
Jonathan Levin has awesome tools and a

97
00:04:01,730 --> 00:04:04,430
lot of a lot of things like that patrick

98
00:04:04,430 --> 00:04:07,280
has his tools as well as things like X

99
00:04:07,280 --> 00:04:09,229
near on but we wanted to kind of bring

100
00:04:09,229 --> 00:04:11,629
all that together into an easily

101
00:04:11,629 --> 00:04:15,620
extendable framework so kind of as we go

102
00:04:15,620 --> 00:04:17,599
through this not going to go into too

103
00:04:17,599 --> 00:04:20,519
much of the details of you know how at

104
00:04:20,519 --> 00:04:23,069
cévennes work and that sort of thing you

105
00:04:23,069 --> 00:04:24,690
know plus the code will be open-source

106
00:04:24,690 --> 00:04:26,310
here in the in the coming week so you'll

107
00:04:26,310 --> 00:04:30,810
be able to look at it all so first off

108
00:04:30,810 --> 00:04:33,270
start off talk about the framework we

109
00:04:33,270 --> 00:04:35,970
wrote it all in Swift and so it's an

110
00:04:35,970 --> 00:04:39,210
easily usable and extendable framework

111
00:04:39,210 --> 00:04:41,039
as we're going along for all of you

112
00:04:41,039 --> 00:04:45,659
objective-c with a c fan you know we

113
00:04:45,659 --> 00:04:46,979
also made it fully objective-c

114
00:04:46,979 --> 00:04:49,979
compatible so in the first release we're

115
00:04:49,979 --> 00:04:52,440
gonna have interfaces for the monitoring

116
00:04:52,440 --> 00:04:55,470
of process authorization file downloads

117
00:04:55,470 --> 00:04:58,199
screenshots USB devices and synthetic

118
00:04:58,199 --> 00:05:01,650
click system level events so we're

119
00:05:01,650 --> 00:05:03,090
utilizing many different types of

120
00:05:03,090 --> 00:05:04,319
monitors which will kind of go through

121
00:05:04,319 --> 00:05:07,800
here for each one but in general the

122
00:05:07,800 --> 00:05:10,080
standard usage for all of these monitors

123
00:05:10,080 --> 00:05:11,819
we tried to make it really simple and

124
00:05:11,819 --> 00:05:14,099
it's basically you instantiate an object

125
00:05:14,099 --> 00:05:17,490
in Swift you call start and then you get

126
00:05:17,490 --> 00:05:19,440
a callback with that event already

127
00:05:19,440 --> 00:05:21,509
filled in so behind the scenes it's

128
00:05:21,509 --> 00:05:25,199
doing all the parsing it's doing all the

129
00:05:25,199 --> 00:05:28,199
linking of different data altogether so

130
00:05:28,199 --> 00:05:30,630
it's really simple to use those events

131
00:05:30,630 --> 00:05:32,849
should get back and then they are fully

132
00:05:32,849 --> 00:05:35,639
codable within Swift so that's easy you

133
00:05:35,639 --> 00:05:38,639
can output to JSON if you're crazy and

134
00:05:38,639 --> 00:05:40,889
you want to output to plist also you can

135
00:05:40,889 --> 00:05:44,159
do that pretty easily but should be

136
00:05:44,159 --> 00:05:45,930
pretty simple if you just wanted to

137
00:05:45,930 --> 00:05:49,919
write a a monitor of all new processes

138
00:05:49,919 --> 00:05:52,650
or all new authorization events you

139
00:05:52,650 --> 00:05:53,969
could probably write that in just a few

140
00:05:53,969 --> 00:05:58,169
lines of a swift code alright so talk a

141
00:05:58,169 --> 00:06:01,409
little bit about the open be open B SM

142
00:06:01,409 --> 00:06:04,080
just because there's a lot there there's

143
00:06:04,080 --> 00:06:05,759
so much to it and there's just a wealth

144
00:06:05,759 --> 00:06:07,529
of information that we can get access to

145
00:06:07,529 --> 00:06:12,029
so BSM is Suns basic security module and

146
00:06:12,029 --> 00:06:14,099
Mac Mac OS has implemented that and

147
00:06:14,099 --> 00:06:16,590
actually has really good support for it

148
00:06:16,590 --> 00:06:22,080
within the system so kind of as you know

149
00:06:22,080 --> 00:06:24,449
Ritchie kind of mentioned earlier yes M

150
00:06:24,449 --> 00:06:26,250
an oddity and all that kind of stuff is

151
00:06:26,250 --> 00:06:29,880
is very you know verbose very kind of

152
00:06:29,880 --> 00:06:31,860
difficult to use because it's a ton of

153
00:06:31,860 --> 00:06:34,210
information it's not necessarily well

154
00:06:34,210 --> 00:06:36,160
linked in order to use it you know you

155
00:06:36,160 --> 00:06:38,229
kind of have to pour through logs and

156
00:06:38,229 --> 00:06:40,509
and look at a lot of stuff so we thought

157
00:06:40,509 --> 00:06:45,160
we can simplify all of this not going to

158
00:06:45,160 --> 00:06:47,800
go too much into the details of these

159
00:06:47,800 --> 00:06:51,160
audit records just because partly

160
00:06:51,160 --> 00:06:52,900
because you know within monitor kit

161
00:06:52,900 --> 00:06:54,580
that's all extracted away from you it's

162
00:06:54,580 --> 00:06:56,830
an easy to use interface but I will say

163
00:06:56,830 --> 00:06:59,680
there's some really good resources out

164
00:06:59,680 --> 00:07:01,630
there Jonathan Levin has a great chapter

165
00:07:01,630 --> 00:07:04,289
on the on the nitty-gritty of all this

166
00:07:04,289 --> 00:07:07,680
patrick recently did a mooc on talk on

167
00:07:07,680 --> 00:07:10,240
BSM and using it so all great resources

168
00:07:10,240 --> 00:07:12,759
that they go into details so i'm not

169
00:07:12,759 --> 00:07:14,500
going to go into too much just just to

170
00:07:14,500 --> 00:07:16,630
say that at the high level you're

171
00:07:16,630 --> 00:07:18,960
reading off the the dev audit pipe there

172
00:07:18,960 --> 00:07:21,970
you're you it's a streaming binary

173
00:07:21,970 --> 00:07:24,910
protocol you get those you call a you

174
00:07:24,910 --> 00:07:27,639
read record to get the record within

175
00:07:27,639 --> 00:07:29,830
that record you have a set of tokens and

176
00:07:29,830 --> 00:07:31,360
then within that set of tokens you get

177
00:07:31,360 --> 00:07:32,979
to the real meat of it and all of the

178
00:07:32,979 --> 00:07:34,960
data that you're interested in so things

179
00:07:34,960 --> 00:07:37,389
like the arguments that were passed into

180
00:07:37,389 --> 00:07:42,669
a program those sorts of things so what

181
00:07:42,669 --> 00:07:46,060
can we use BSP m4 and how does monitor

182
00:07:46,060 --> 00:07:48,099
kit take advantage of that so within

183
00:07:48,099 --> 00:07:49,780
monitor kit we have a couple ways to do

184
00:07:49,780 --> 00:07:52,949
that first off we created an interface

185
00:07:52,949 --> 00:07:57,070
BSM monitor a simple to use class that

186
00:07:57,070 --> 00:07:58,780
you can just instantiate and start

187
00:07:58,780 --> 00:08:01,240
capturing all of this all of these

188
00:08:01,240 --> 00:08:04,150
system level events so within that class

189
00:08:04,150 --> 00:08:07,509
you can pass in the audit mask which we

190
00:08:07,509 --> 00:08:09,070
where you can set the audit the class

191
00:08:09,070 --> 00:08:11,500
the type of events that you want to look

192
00:08:11,500 --> 00:08:13,810
at this is actually part of the the VSM

193
00:08:13,810 --> 00:08:15,520
api that you can send and then we'll

194
00:08:15,520 --> 00:08:17,560
start capturing those sorts of things so

195
00:08:17,560 --> 00:08:20,110
we found that even that wasn't kind of

196
00:08:20,110 --> 00:08:22,180
enough to filter down the data we were

197
00:08:22,180 --> 00:08:23,800
still getting tons of data that we

198
00:08:23,800 --> 00:08:25,120
didn't necessarily want so we've

199
00:08:25,120 --> 00:08:27,490
extended that so you can also pass in a

200
00:08:27,490 --> 00:08:30,370
set of specific record types that you

201
00:08:30,370 --> 00:08:32,740
are interested in and it will return

202
00:08:32,740 --> 00:08:33,450
that

203
00:08:33,450 --> 00:08:38,169
so we kind of have that raw BSM class

204
00:08:38,169 --> 00:08:40,450
that you can utilize and then on top of

205
00:08:40,450 --> 00:08:42,990
that we have some pre-configured filters

206
00:08:42,990 --> 00:08:47,079
that we've implemented for auth and

207
00:08:47,079 --> 00:08:48,110
process

208
00:08:48,110 --> 00:08:50,570
events so that you can easily get a get

209
00:08:50,570 --> 00:08:51,740
to those and don't have to worry about

210
00:08:51,740 --> 00:08:53,209
what filters to set and that sort of

211
00:08:53,209 --> 00:08:55,910
thing and so can definitely going to

212
00:08:55,910 --> 00:08:58,070
continue to add to those preset filters

213
00:08:58,070 --> 00:09:01,570
as we continue to build out monarch it

214
00:09:01,570 --> 00:09:06,410
okay so as part of that as well as we

215
00:09:06,410 --> 00:09:08,149
were going through exploring all of

216
00:09:08,149 --> 00:09:11,000
these different events we looked at it

217
00:09:11,000 --> 00:09:12,440
and said okay this is kind of tough to

218
00:09:12,440 --> 00:09:14,540
kind of go through PR audit logs look at

219
00:09:14,540 --> 00:09:15,230
all this stuff

220
00:09:15,230 --> 00:09:17,930
so we wanted to build a UI so we can

221
00:09:17,930 --> 00:09:19,430
explore these events and have a look at

222
00:09:19,430 --> 00:09:21,079
them so we built something we call BSM

223
00:09:21,079 --> 00:09:23,870
explorer that looks at the raw uses the

224
00:09:23,870 --> 00:09:25,700
raw interface that's in monarch it and

225
00:09:25,700 --> 00:09:27,529
then in the application you can set the

226
00:09:27,529 --> 00:09:29,420
audit class filter that you want as well

227
00:09:29,420 --> 00:09:31,760
as the record types that you want and so

228
00:09:31,760 --> 00:09:33,589
you can fire this up quickly on a

229
00:09:33,589 --> 00:09:35,540
machine start capturing all this stuff

230
00:09:35,540 --> 00:09:38,420
and up top you get the the record and

231
00:09:38,420 --> 00:09:40,519
down below you get out all of the parsed

232
00:09:40,519 --> 00:09:44,540
out tokens so nothing you know crazy but

233
00:09:44,540 --> 00:09:46,730
we found it definitely very useful for

234
00:09:46,730 --> 00:09:49,130
diving into okay if we set this audit

235
00:09:49,130 --> 00:09:51,019
class filter what are all the events

236
00:09:51,019 --> 00:09:52,730
we're gonna get and how can we have a

237
00:09:52,730 --> 00:09:54,199
look at those quickly to see what they

238
00:09:54,199 --> 00:09:57,740
are so this will be a free utility that

239
00:09:57,740 --> 00:09:58,699
we'll be releasing

240
00:09:58,699 --> 00:10:02,269
alongside monitor kit as we as we get

241
00:10:02,269 --> 00:10:06,760
that out there alright so another

242
00:10:06,760 --> 00:10:09,740
monitor that we definitely needed was

243
00:10:09,740 --> 00:10:13,640
file i/o so we decided to go with the

244
00:10:13,640 --> 00:10:17,269
the FS events to get access to all the

245
00:10:17,269 --> 00:10:19,640
different file system activities such as

246
00:10:19,640 --> 00:10:22,190
create file create directory all those

247
00:10:22,190 --> 00:10:24,140
sorts of things lots of different ways

248
00:10:24,140 --> 00:10:27,490
to get act to get at this file system

249
00:10:27,490 --> 00:10:31,160
information things like FS usage is one

250
00:10:31,160 --> 00:10:33,019
option that doesn't

251
00:10:33,019 --> 00:10:34,959
unfortunately allow for multiple

252
00:10:34,959 --> 00:10:38,269
subscribers to get access to that we can

253
00:10:38,269 --> 00:10:41,029
also utilize BSM to get access to all of

254
00:10:41,029 --> 00:10:43,190
the file system activity but that also

255
00:10:43,190 --> 00:10:47,870
can be extremely chatty and so we decide

256
00:10:47,870 --> 00:10:51,470
to go with the the FS events so apple

257
00:10:51,470 --> 00:10:55,070
actually provides a nice API for

258
00:10:55,070 --> 00:10:58,120
accessing these FS event but

259
00:10:58,120 --> 00:11:01,020
unfortunately when you do that you don't

260
00:11:01,020 --> 00:11:03,180
get access to the process pid' that was

261
00:11:03,180 --> 00:11:06,570
doing the activity and so you know for

262
00:11:06,570 --> 00:11:08,940
us security folks it's pretty much

263
00:11:08,940 --> 00:11:11,190
useless like we can't use that at all

264
00:11:11,190 --> 00:11:12,840
because we need to know who's doing it

265
00:11:12,840 --> 00:11:16,170
and that sort of thing so that would be

266
00:11:16,170 --> 00:11:16,530
great

267
00:11:16,530 --> 00:11:18,480
Apple if we just had in the pit that's

268
00:11:18,480 --> 00:11:20,460
all we need in there and make it this

269
00:11:20,460 --> 00:11:25,140
much easier but so we're left with

270
00:11:25,140 --> 00:11:27,000
parsing out the raw events on there

271
00:11:27,000 --> 00:11:29,550
which isn't too too crazy again

272
00:11:29,550 --> 00:11:30,960
fortunately there's great tools out

273
00:11:30,960 --> 00:11:34,380
there file Mon you know Jonathan xi

274
00:11:34,380 --> 00:11:36,810
wrote it's all it works really well so

275
00:11:36,810 --> 00:11:39,200
we're able to take that model our

276
00:11:39,200 --> 00:11:42,630
monitor based on that and in that we get

277
00:11:42,630 --> 00:11:46,050
access to to the pit so it's over all

278
00:11:46,050 --> 00:11:47,840
the FS events really good interface

279
00:11:47,840 --> 00:11:51,570
provides good access to all that system

280
00:11:51,570 --> 00:11:53,820
level information parsing that binding

281
00:11:53,820 --> 00:11:55,710
your protocol can be a little bit tricky

282
00:11:55,710 --> 00:11:58,230
but you know it's it's all extracted

283
00:11:58,230 --> 00:12:02,910
away ok another monitor

284
00:12:02,910 --> 00:12:05,670
we built into monarch it was using

285
00:12:05,670 --> 00:12:08,310
apples spotlight notifications so this

286
00:12:08,310 --> 00:12:10,560
is great for watching the extended

287
00:12:10,560 --> 00:12:12,930
attributes on all of the files that get

288
00:12:12,930 --> 00:12:16,710
written out to disk so you can observe a

289
00:12:16,710 --> 00:12:18,840
lot of stuff by doing that the extent of

290
00:12:18,840 --> 00:12:20,910
file attributes are great they're

291
00:12:20,910 --> 00:12:22,740
definitely a lot of uses you can get out

292
00:12:22,740 --> 00:12:25,980
of that so with in monarch it we built a

293
00:12:25,980 --> 00:12:28,890
nice class you can use you can pass in

294
00:12:28,890 --> 00:12:32,010
an NS predicate to say hey when this

295
00:12:32,010 --> 00:12:33,930
attribute is in there and it has this

296
00:12:33,930 --> 00:12:35,970
value we want to get a notification on

297
00:12:35,970 --> 00:12:39,630
that so really really you know really

298
00:12:39,630 --> 00:12:42,840
not too bad to use we built on top of

299
00:12:42,840 --> 00:12:44,490
that interface we built specific

300
00:12:44,490 --> 00:12:47,430
monitors to look for downloaded files as

301
00:12:47,430 --> 00:12:49,950
well as screenshots to make it super

302
00:12:49,950 --> 00:12:52,140
simple you know you can just download

303
00:12:52,140 --> 00:12:54,870
monitor monitor dot start and now you're

304
00:12:54,870 --> 00:12:56,760
getting all the screenshots I'm so

305
00:12:56,760 --> 00:13:00,150
really easy one thing one kind of one

306
00:13:00,150 --> 00:13:01,350
thing to keep in mind with this

307
00:13:01,350 --> 00:13:03,060
particular monitor is that you're left

308
00:13:03,060 --> 00:13:05,190
with only looking at the files and

309
00:13:05,190 --> 00:13:06,840
directories that spotlight actually

310
00:13:06,840 --> 00:13:09,360
indexes to and and looks at so you don't

311
00:13:09,360 --> 00:13:12,240
get everything on the disk only what is

312
00:13:12,240 --> 00:13:15,800
configured for spotlight

313
00:13:16,490 --> 00:13:19,710
all right another monitor we have on

314
00:13:19,710 --> 00:13:22,380
there is from the using the core

315
00:13:22,380 --> 00:13:25,860
graphics event taps and so Patrick Yin

316
00:13:25,860 --> 00:13:28,440
did a great talk at the latest Def Con

317
00:13:28,440 --> 00:13:31,170
and blackhat called the mouse is

318
00:13:31,170 --> 00:13:33,930
mightier than the sword so in this talk

319
00:13:33,930 --> 00:13:35,640
he talks about how malware can use

320
00:13:35,640 --> 00:13:38,580
synthetic clicks to bypass different

321
00:13:38,580 --> 00:13:42,180
security prompts that are presented to a

322
00:13:42,180 --> 00:13:44,339
user and so you know it clicks okay

323
00:13:44,339 --> 00:13:46,800
installs the malware or adware and

324
00:13:46,800 --> 00:13:49,050
they're off so Patrick did a really good

325
00:13:49,050 --> 00:13:50,910
job breaking down this technique so of

326
00:13:50,910 --> 00:13:52,680
course we got to integrate it into into

327
00:13:52,680 --> 00:13:56,100
monarch it again not diving going to

328
00:13:56,100 --> 00:13:58,470
technical with all this today the code

329
00:13:58,470 --> 00:14:00,150
code will be out there soon

330
00:14:00,150 --> 00:14:02,670
this is usually utilizing the CG event

331
00:14:02,670 --> 00:14:06,510
tap create API to get access to click

332
00:14:06,510 --> 00:14:08,190
events and keyboard events and then we

333
00:14:08,190 --> 00:14:09,839
can look at that those events and say

334
00:14:09,839 --> 00:14:12,540
hey this was not a user that clicked

335
00:14:12,540 --> 00:14:15,660
this or it was a programmatic click that

336
00:14:15,660 --> 00:14:17,250
was on there and so we're able to detect

337
00:14:17,250 --> 00:14:19,670
those synthetic clicks pretty easily I

338
00:14:19,670 --> 00:14:22,400
know they're know for this particular

339
00:14:22,400 --> 00:14:27,120
monitor Apple actually did fix the bug

340
00:14:27,120 --> 00:14:29,190
that was in there that allowed these

341
00:14:29,190 --> 00:14:31,620
synthetic clicks so Mojave is actually

342
00:14:31,620 --> 00:14:33,930
immune to these but we figured we want

343
00:14:33,930 --> 00:14:36,480
to get this in here the monitoring

344
00:14:36,480 --> 00:14:38,880
anyways for those that that have an

345
00:14:38,880 --> 00:14:43,290
upgraded yep alright so and then the

346
00:14:43,290 --> 00:14:46,680
final monitor I'm going to talk about is

347
00:14:46,680 --> 00:14:49,370
we're looking at hardware and device

348
00:14:49,370 --> 00:14:51,990
notifications so for this we're using

349
00:14:51,990 --> 00:14:55,620
the standard i/o kit Apple api's which

350
00:14:55,620 --> 00:14:57,810
is the usual Ian framework to access

351
00:14:57,810 --> 00:14:59,910
devices and drivers and things like that

352
00:14:59,910 --> 00:15:03,480
so using this we can get easy access to

353
00:15:03,480 --> 00:15:05,490
different devices that are plugged into

354
00:15:05,490 --> 00:15:07,920
the system so for example someone plugs

355
00:15:07,920 --> 00:15:11,160
in a USB Drive we can then get that nice

356
00:15:11,160 --> 00:15:13,320
callback say hey there's a brand-new USB

357
00:15:13,320 --> 00:15:15,390
Drive that was plugged in here we dig

358
00:15:15,390 --> 00:15:17,220
into it pull out all the information

359
00:15:17,220 --> 00:15:19,140
such as you know the device ID the

360
00:15:19,140 --> 00:15:21,029
vendor ID all of those sorts of things

361
00:15:21,029 --> 00:15:24,480
and you get that nice event object back

362
00:15:24,480 --> 00:15:28,970
and yeah simple as that

363
00:15:28,970 --> 00:15:32,310
alright so another tool that we want to

364
00:15:32,310 --> 00:15:35,430
talk about today it kind of brings all

365
00:15:35,430 --> 00:15:37,440
of monitor kit together so we kind of

366
00:15:37,440 --> 00:15:41,310
looked and saw is that playing I'm going

367
00:15:41,310 --> 00:15:45,510
to click that so this to a particular

368
00:15:45,510 --> 00:15:48,329
tool largely inspired by the Windows

369
00:15:48,329 --> 00:15:50,459
system to this internal system on tool

370
00:15:50,459 --> 00:15:54,000
has a great GUI that you can use for you

371
00:15:54,000 --> 00:15:55,800
know having a look at the system dynamic

372
00:15:55,800 --> 00:15:57,510
malware analysis all of that sort of

373
00:15:57,510 --> 00:15:57,750
thing

374
00:15:57,750 --> 00:15:59,940
so we want to in that sense we wanted to

375
00:15:59,940 --> 00:16:02,339
kind of bring it all together into a

376
00:16:02,339 --> 00:16:05,940
singular UI tool that you can use for

377
00:16:05,940 --> 00:16:08,610
for doing your analysis to see like when

378
00:16:08,610 --> 00:16:10,320
you introduce new malware and that sort

379
00:16:10,320 --> 00:16:12,630
of thing what system level events are

380
00:16:12,630 --> 00:16:15,360
triggered and and all of the information

381
00:16:15,360 --> 00:16:17,360
that and that kind of surrounds that so

382
00:16:17,360 --> 00:16:20,010
you know just like PSM Explorer

383
00:16:20,010 --> 00:16:22,890
gonna be releasing this open source

384
00:16:22,890 --> 00:16:27,839
alongside with with monarch it alright

385
00:16:27,839 --> 00:16:32,370
so that is monarch it we're looking to

386
00:16:32,370 --> 00:16:34,260
get that out here in the coming weeks

387
00:16:34,260 --> 00:16:38,400
can I get that into our github account

388
00:16:38,400 --> 00:16:41,820
very very soon and you know excited to

389
00:16:41,820 --> 00:16:44,459
see what you what you know what you all

390
00:16:44,459 --> 00:16:47,000
can build with something like this

391
00:16:47,000 --> 00:16:50,070
definitely lots of possibilities for

392
00:16:50,070 --> 00:16:52,470
building upon this and want to want to

393
00:16:52,470 --> 00:16:54,360
continue to add to this as well so we

394
00:16:54,360 --> 00:16:57,510
have tons of ideas for new monitors that

395
00:16:57,510 --> 00:17:00,150
we're gonna add to the to it as we keep

396
00:17:00,150 --> 00:17:03,329
going along so we plan to add in our

397
00:17:03,329 --> 00:17:06,329
do-not-disturb laptop open events for

398
00:17:06,329 --> 00:17:09,750
example want to integrate the oversight

399
00:17:09,750 --> 00:17:12,540
microphone and video camera access

400
00:17:12,540 --> 00:17:16,079
events as well as got some ideas flowing

401
00:17:16,079 --> 00:17:17,970
some ideas on how we can do different

402
00:17:17,970 --> 00:17:20,550
detections for different monitoring for

403
00:17:20,550 --> 00:17:22,980
key loggers and that sort of thing

404
00:17:22,980 --> 00:17:26,309
so look for that to be able to be out

405
00:17:26,309 --> 00:17:30,030
there very very soon alright so with

406
00:17:30,030 --> 00:17:32,580
that I will pass it off to Josh to talk

407
00:17:32,580 --> 00:17:34,699
about

408
00:17:36,350 --> 00:17:39,299
thank you John all right so John

409
00:17:39,299 --> 00:17:43,169
provided a summarize how we extracted

410
00:17:43,169 --> 00:17:45,990
many of the objective-c tool and

411
00:17:45,990 --> 00:17:48,059
monitoring capabilities including you

412
00:17:48,059 --> 00:17:49,590
know process monitoring file monitoring

413
00:17:49,590 --> 00:17:52,289
device inserts etc but now it's time to

414
00:17:52,289 --> 00:17:54,299
turn our attention to analysis right so

415
00:17:54,299 --> 00:17:57,000
what do we do with all this data so to

416
00:17:57,000 --> 00:18:00,059
reiterate one of our major goals in this

417
00:18:00,059 --> 00:18:02,610
redesign was to make it simple to add

418
00:18:02,610 --> 00:18:05,340
new detections right bonus points if we

419
00:18:05,340 --> 00:18:07,860
could abstract the detection logic from

420
00:18:07,860 --> 00:18:11,580
the detection execution right so for

421
00:18:11,580 --> 00:18:13,470
those of you they're familiar think

422
00:18:13,470 --> 00:18:16,580
yarra rules verse the yarra engine right

423
00:18:16,580 --> 00:18:19,529
but aimed at behavioral indicators that

424
00:18:19,529 --> 00:18:22,529
are fed to us by monitor kit rather than

425
00:18:22,529 --> 00:18:26,309
binary pattern matching so additionally

426
00:18:26,309 --> 00:18:28,590
we thought the analysis should be

427
00:18:28,590 --> 00:18:30,330
streaming at its core so we wanted to

428
00:18:30,330 --> 00:18:32,970
keep the analysis on the endpoint it

429
00:18:32,970 --> 00:18:34,649
should be flexible enough to use some

430
00:18:34,649 --> 00:18:38,519
historical data but that we didn't

431
00:18:38,519 --> 00:18:40,799
necessarily want to have to require that

432
00:18:40,799 --> 00:18:42,269
you collect all the data on the backend

433
00:18:42,269 --> 00:18:44,190
to then do the analysis we wanted to

434
00:18:44,190 --> 00:18:45,809
facilitate some of these hunt workflows

435
00:18:45,809 --> 00:18:47,639
that that Ritchie presented earlier

436
00:18:47,639 --> 00:18:49,139
where he does some of the analysis on

437
00:18:49,139 --> 00:18:50,730
the back end but then can push that

438
00:18:50,730 --> 00:18:52,620
detection back down on to the endpoint

439
00:18:52,620 --> 00:18:55,529
maybe reduce his volume of collection as

440
00:18:55,529 --> 00:18:57,389
he moves forward or just get real-time

441
00:18:57,389 --> 00:19:00,240
streaming alerts and logs of the things

442
00:19:00,240 --> 00:19:01,860
that he's actually interested in looking

443
00:19:01,860 --> 00:19:06,629
for so we we've noticed that detection

444
00:19:06,629 --> 00:19:08,820
actually had been trending away from the

445
00:19:08,820 --> 00:19:10,200
endpoint a little bit right and we want

446
00:19:10,200 --> 00:19:11,879
to just give the users the ability to

447
00:19:11,879 --> 00:19:15,600
move back right so some additional goals

448
00:19:15,600 --> 00:19:17,909
and lessons learned from Patrick and

449
00:19:17,909 --> 00:19:20,820
some other vendors these are some older

450
00:19:20,820 --> 00:19:23,490
and recent tweets we really want to make

451
00:19:23,490 --> 00:19:26,309
it easier for for analysts and admins

452
00:19:26,309 --> 00:19:29,669
and in subsequent programmatic logic

453
00:19:29,669 --> 00:19:32,250
right to make decisions on an object so

454
00:19:32,250 --> 00:19:35,549
in in the one tweet right you see block

455
00:19:35,549 --> 00:19:37,320
block caching something but a user is

456
00:19:37,320 --> 00:19:38,580
pretty much asking like what do I do

457
00:19:38,580 --> 00:19:40,379
with this right okay great you gave me a

458
00:19:40,379 --> 00:19:42,330
process tree gave me this but I as a

459
00:19:42,330 --> 00:19:44,580
user don't really know right so how do

460
00:19:44,580 --> 00:19:46,890
we add programmatic logic on top of that

461
00:19:46,890 --> 00:19:48,870
and how do we present that data and

462
00:19:48,870 --> 00:19:51,420
maybe a more possible like not

463
00:19:51,420 --> 00:19:54,360
user-friendly but more possible way for

464
00:19:54,360 --> 00:19:56,850
other analysis tools or users to use

465
00:19:56,850 --> 00:19:58,880
into Lake Cabana that's options

466
00:19:58,880 --> 00:20:00,540
additionally we set out to design a

467
00:20:00,540 --> 00:20:03,750
system in which users can add new

468
00:20:03,750 --> 00:20:05,730
behavioral detections or adjust the

469
00:20:05,730 --> 00:20:13,020
existing ones to meet their unique to

470
00:20:13,020 --> 00:20:14,700
meet to meet their unique network needs

471
00:20:14,700 --> 00:20:19,799
right so including segmenting your user

472
00:20:19,799 --> 00:20:22,049
population you could load a certain set

473
00:20:22,049 --> 00:20:24,270
of logic and detection for one set of

474
00:20:24,270 --> 00:20:26,160
users say they're in you know a

475
00:20:26,160 --> 00:20:28,020
different set of logic or users for IT

476
00:20:28,020 --> 00:20:30,900
then verse your finance or etc right so

477
00:20:30,900 --> 00:20:32,309
how do you build up these detections in

478
00:20:32,309 --> 00:20:34,530
a way that allows you to segment it in

479
00:20:34,530 --> 00:20:37,049
that way and then adjust right if you if

480
00:20:37,049 --> 00:20:38,610
a detection that we think should never

481
00:20:38,610 --> 00:20:39,390
happen in the world

482
00:20:39,390 --> 00:20:41,220
X plus y is always bad and in your

483
00:20:41,220 --> 00:20:42,570
network it's not bad right

484
00:20:42,570 --> 00:20:43,950
you should have some recourse there

485
00:20:43,950 --> 00:20:46,370
besides just application whitelisting

486
00:20:46,370 --> 00:20:50,010
so after a little bit of research John

487
00:20:50,010 --> 00:20:52,140
had this what I consider now a brilliant

488
00:20:52,140 --> 00:20:55,020
idea what if we use a game engine as our

489
00:20:55,020 --> 00:20:57,299
detection engine right so after all game

490
00:20:57,299 --> 00:20:59,970
engines are constantly being fed events

491
00:20:59,970 --> 00:21:02,520
from sensors modeling them updating

492
00:21:02,520 --> 00:21:05,160
state evaluating that game logic against

493
00:21:05,160 --> 00:21:07,020
the input and the state and taking

494
00:21:07,020 --> 00:21:09,000
appropriate action such as triggering

495
00:21:09,000 --> 00:21:11,190
movements updating scenes changing UI

496
00:21:11,190 --> 00:21:15,179
are changing AI behaviors etc right so

497
00:21:15,179 --> 00:21:17,640
take for instance a classic game of

498
00:21:17,640 --> 00:21:20,370
pac-man right user provides input to the

499
00:21:20,370 --> 00:21:23,130
system through a controller that data is

500
00:21:23,130 --> 00:21:24,600
modeled the game state is altered

501
00:21:24,600 --> 00:21:27,150
directly and/or by a logic controller

502
00:21:27,150 --> 00:21:28,890
which is made up of these logic blocks

503
00:21:28,890 --> 00:21:31,770
right these little bits of game logic

504
00:21:31,770 --> 00:21:34,020
that in total make up the laws of the

505
00:21:34,020 --> 00:21:36,840
game right the rules of the game so for

506
00:21:36,840 --> 00:21:39,000
instance changing a ghost behavior for

507
00:21:39,000 --> 00:21:41,340
pursue to flee right when pac-man is one

508
00:21:41,340 --> 00:21:44,070
of those power pellets right so it's

509
00:21:44,070 --> 00:21:45,690
worth noting that by a game engine in

510
00:21:45,690 --> 00:21:47,940
this context we're talking about a logic

511
00:21:47,940 --> 00:21:50,250
engine components that like to find the

512
00:21:50,250 --> 00:21:52,830
laws and behaviors like I said we're not

513
00:21:52,830 --> 00:21:54,540
talking about graphics or cool

514
00:21:54,540 --> 00:21:56,640
visualizations or physics engine or

515
00:21:56,640 --> 00:21:58,320
other things that you may associate with

516
00:21:58,320 --> 00:22:00,060
a gaming engine this is the X

517
00:22:00,060 --> 00:22:01,830
fusion of the rules of the game and the

518
00:22:01,830 --> 00:22:04,410
logic so many of you may already see

519
00:22:04,410 --> 00:22:06,300
where this is going right so we plug in

520
00:22:06,300 --> 00:22:10,410
monitor kit as our sensor those they

521
00:22:10,410 --> 00:22:12,570
become the source of our modeled events

522
00:22:12,570 --> 00:22:14,520
based on system changes for which we're

523
00:22:14,520 --> 00:22:16,800
monitoring and we keep track of that

524
00:22:16,800 --> 00:22:19,290
state through the use of a little kind

525
00:22:19,290 --> 00:22:21,090
of look aside cache or historical cache

526
00:22:21,090 --> 00:22:23,430
that allows us to take previous

527
00:22:23,430 --> 00:22:25,530
determinations into account when we're

528
00:22:25,530 --> 00:22:28,320
looking at the streaming events the

529
00:22:28,320 --> 00:22:30,180
logic controller itself is actually

530
00:22:30,180 --> 00:22:33,120
where we will dig in for most of the

531
00:22:33,120 --> 00:22:35,280
remainder of this presentation it

532
00:22:35,280 --> 00:22:36,930
interfaces obviously with the incoming

533
00:22:36,930 --> 00:22:39,450
events the cache and our actions to

534
00:22:39,450 --> 00:22:41,460
detect and respond you know according to

535
00:22:41,460 --> 00:22:45,690
its defined logic so apple kindly

536
00:22:45,690 --> 00:22:47,550
provides a development framework for a

537
00:22:47,550 --> 00:22:49,050
gaming engine that they call gameplay

538
00:22:49,050 --> 00:22:50,940
kit right this development framework and

539
00:22:50,940 --> 00:22:52,650
we imagine that the engineers at Apple

540
00:22:52,650 --> 00:22:54,390
went to great lengths to make this

541
00:22:54,390 --> 00:22:58,020
gaming engine efficient reliable easy to

542
00:22:58,020 --> 00:23:00,810
use extendable so why should we reinvent

543
00:23:00,810 --> 00:23:02,310
that wheel right these are all the

544
00:23:02,310 --> 00:23:04,950
things that we wanted the framework

545
00:23:04,950 --> 00:23:06,750
provides support for a few different

546
00:23:06,750 --> 00:23:08,730
types of logic engines they support

547
00:23:08,730 --> 00:23:10,170
things like dishes and trees and

548
00:23:10,170 --> 00:23:12,180
pathfinding and some things that are

549
00:23:12,180 --> 00:23:15,330
very ripe for inclusion as we extend the

550
00:23:15,330 --> 00:23:18,180
the game system as we move forward but

551
00:23:18,180 --> 00:23:20,580
for this first iteration we focused

552
00:23:20,580 --> 00:23:23,490
primarily on rural systems in this rural

553
00:23:23,490 --> 00:23:25,560
system class that they provide we

554
00:23:25,560 --> 00:23:28,230
focused primarily on it because it by

555
00:23:28,230 --> 00:23:30,390
design separates game design from

556
00:23:30,390 --> 00:23:32,970
executable code so you can load in your

557
00:23:32,970 --> 00:23:36,140
game design execute your game design

558
00:23:36,140 --> 00:23:39,750
execute the the logic controller if you

559
00:23:39,750 --> 00:23:41,760
will and then take action based on that

560
00:23:41,760 --> 00:23:43,380
execution at a later time so it really

561
00:23:43,380 --> 00:23:49,170
separates out those those two steps so

562
00:23:49,170 --> 00:23:51,660
because gk rule system does allow for

563
00:23:51,660 --> 00:23:54,150
fuzzy logic chaining mathematical

564
00:23:54,150 --> 00:23:55,650
constructs just about any type of

565
00:23:55,650 --> 00:23:57,240
extension that you want to do in code

566
00:23:57,240 --> 00:23:59,700
I've gone ahead and fixed their naming

567
00:23:59,700 --> 00:24:02,630
here and called it a GK logic system I

568
00:24:02,630 --> 00:24:05,520
also feel that that's more appropriate

569
00:24:05,520 --> 00:24:07,350
and and Maps better to what we've been

570
00:24:07,350 --> 00:24:10,129
talking about today

571
00:24:10,810 --> 00:24:14,470
so at its core yeah I put together this

572
00:24:14,470 --> 00:24:16,540
little coat sample here you can maybe

573
00:24:16,540 --> 00:24:18,280
dig into it a little bit later it's a

574
00:24:18,280 --> 00:24:20,740
very very simple game but at its core as

575
00:24:20,740 --> 00:24:24,330
we've said you instantiate a game engine

576
00:24:24,330 --> 00:24:27,190
you load the logic into the system so

577
00:24:27,190 --> 00:24:29,230
you just find your logic as a series of

578
00:24:29,230 --> 00:24:32,440
NS predicate and outputs based on those

579
00:24:32,440 --> 00:24:35,680
NS predicate sif they ring true so in

580
00:24:35,680 --> 00:24:38,110
our case we initiate and load all of our

581
00:24:38,110 --> 00:24:40,240
configured detection logic at startup

582
00:24:40,240 --> 00:24:42,040
and then we updated it whenever a

583
00:24:42,040 --> 00:24:43,690
configuration change is made by an

584
00:24:43,690 --> 00:24:45,970
Advent or someone who is administering

585
00:24:45,970 --> 00:24:47,920
the the logic right a new detection

586
00:24:47,920 --> 00:24:49,030
comes out you push it down to the

587
00:24:49,030 --> 00:24:50,950
endpoint it gets added to what is called

588
00:24:50,950 --> 00:24:52,600
the agenda and that the next time that

589
00:24:52,600 --> 00:24:54,280
agenda gets executed your detection is

590
00:24:54,280 --> 00:24:57,760
updated at a later time right the game

591
00:24:57,760 --> 00:24:59,800
engine state is altered and our case via

592
00:24:59,800 --> 00:25:02,320
events from monitor kit and the game

593
00:25:02,320 --> 00:25:04,300
engine is executed to evaluate the new

594
00:25:04,300 --> 00:25:06,040
state of the system given that input and

595
00:25:06,040 --> 00:25:08,770
the output from the engine execution is

596
00:25:08,770 --> 00:25:10,750
then inspected and used to drive next

597
00:25:10,750 --> 00:25:12,760
steps right in our case we allow an

598
00:25:12,760 --> 00:25:15,700
administrator to put right into the

599
00:25:15,700 --> 00:25:18,790
detection engine if this detection block

600
00:25:18,790 --> 00:25:20,980
should hit what should the action be

601
00:25:20,980 --> 00:25:23,170
right that may be simply caching it for

602
00:25:23,170 --> 00:25:25,030
historical purposes it may be alerting

603
00:25:25,030 --> 00:25:27,400
it may be logging and maybe just let it

604
00:25:27,400 --> 00:25:28,840
flow through the rest of the system but

605
00:25:28,840 --> 00:25:31,030
label it in a certain way that further

606
00:25:31,030 --> 00:25:32,740
people know that you made some kind of

607
00:25:32,740 --> 00:25:35,170
determination further detection blocks

608
00:25:35,170 --> 00:25:36,460
know that you made some sort of

609
00:25:36,460 --> 00:25:41,020
determination on that data already for

610
00:25:41,020 --> 00:25:42,580
instance in this simple game right you

611
00:25:42,580 --> 00:25:44,170
can you can make determinations like

612
00:25:44,170 --> 00:25:45,910
flee or hunt as we talked about before

613
00:25:45,910 --> 00:25:49,390
but like I said in our in our case were

614
00:25:49,390 --> 00:25:51,340
afforded the opportunity to alert log

615
00:25:51,340 --> 00:25:54,850
otherwise respond exit all right so how

616
00:25:54,850 --> 00:25:56,650
do we organize some of this detection

617
00:25:56,650 --> 00:25:59,560
logic we do it in what we internally

618
00:25:59,560 --> 00:26:02,650
called game plans mapped to the mitre

619
00:26:02,650 --> 00:26:04,510
attack framework that Richard presented

620
00:26:04,510 --> 00:26:07,150
earlier home very very good interplay

621
00:26:07,150 --> 00:26:10,000
there between these talks he's already

622
00:26:10,000 --> 00:26:11,680
gone in good depth on some of these

623
00:26:11,680 --> 00:26:13,510
threats we had a feeling he would so we

624
00:26:13,510 --> 00:26:16,210
won't we won't rehash much of that but

625
00:26:16,210 --> 00:26:18,490
we do intend to look across the entirety

626
00:26:18,490 --> 00:26:21,190
of the attack matrix and begin looking

627
00:26:21,190 --> 00:26:23,230
into those techniques or we Bank began

628
00:26:23,230 --> 00:26:23,980
looking in

629
00:26:23,980 --> 00:26:25,210
those techniques that are covered by

630
00:26:25,210 --> 00:26:27,460
objective-c tools already extracting

631
00:26:27,460 --> 00:26:29,169
some of that detection logic as we said

632
00:26:29,169 --> 00:26:31,600
before reimagining those tools bringing

633
00:26:31,600 --> 00:26:34,540
some of that detection logic over into

634
00:26:34,540 --> 00:26:37,600
into the system because it's been you

635
00:26:37,600 --> 00:26:38,830
know proven and readily available

636
00:26:38,830 --> 00:26:41,590
detection logic right and we'll start by

637
00:26:41,590 --> 00:26:45,370
looking at some persistence so as many

638
00:26:45,370 --> 00:26:47,770
of you know block block alerts users any

639
00:26:47,770 --> 00:26:49,240
time a process attempts to persist

640
00:26:49,240 --> 00:26:50,830
something we've already covered that a

641
00:26:50,830 --> 00:26:54,130
little bit and monitor kit so by persist

642
00:26:54,130 --> 00:26:55,780
we mean you know registering a process

643
00:26:55,780 --> 00:26:57,970
or a command to launch in response to an

644
00:26:57,970 --> 00:26:59,679
event whether that's at some time in the

645
00:26:59,679 --> 00:27:02,140
future trigger trigger launch or restart

646
00:27:02,140 --> 00:27:05,500
etc so let's look at how we can

647
00:27:05,500 --> 00:27:07,960
deconstruct that logic into its required

648
00:27:07,960 --> 00:27:10,240
predicates right the beauty here is in

649
00:27:10,240 --> 00:27:13,059
the simplicity the detection logic for

650
00:27:13,059 --> 00:27:15,160
block block simply becomes a series of

651
00:27:15,160 --> 00:27:17,650
twelve of these logic blocks one of

652
00:27:17,650 --> 00:27:19,210
which we have detailed up here at the

653
00:27:19,210 --> 00:27:22,330
top and so for example that kernel

654
00:27:22,330 --> 00:27:24,190
extension detection you know we simply

655
00:27:24,190 --> 00:27:26,080
inspect the file i/o event that's given

656
00:27:26,080 --> 00:27:28,750
to us by monitor kit and we determine if

657
00:27:28,750 --> 00:27:31,240
it's a new directory is being created in

658
00:27:31,240 --> 00:27:32,890
the directory that's required for a new

659
00:27:32,890 --> 00:27:35,710
kernel extension and if so then we tag

660
00:27:35,710 --> 00:27:38,169
the data as attempting to persist

661
00:27:38,169 --> 00:27:40,750
something and specifically that it is

662
00:27:40,750 --> 00:27:44,530
also a text the logic blocks as I said

663
00:27:44,530 --> 00:27:46,270
earlier do nothing more than label the

664
00:27:46,270 --> 00:27:48,400
data right as it traverses this whole

665
00:27:48,400 --> 00:27:51,370
system and aren't in our example at the

666
00:27:51,370 --> 00:27:53,169
top right if the predicate evaluates to

667
00:27:53,169 --> 00:27:54,970
true we label it as I said of a

668
00:27:54,970 --> 00:27:55,809
persistent

669
00:27:55,809 --> 00:27:58,120
text right so this labeling then

670
00:27:58,120 --> 00:28:00,910
facilitates chaining and logic block

671
00:28:00,910 --> 00:28:03,490
reuse all right so tying this to our

672
00:28:03,490 --> 00:28:04,929
previous example let's say vanilla

673
00:28:04,929 --> 00:28:06,970
persistence isn't actionable in your

674
00:28:06,970 --> 00:28:08,919
environment right lots of things to ask

675
00:28:08,919 --> 00:28:11,530
you to persist so it may not be

676
00:28:11,530 --> 00:28:13,870
actionable all right we chained this to

677
00:28:13,870 --> 00:28:15,970
what I'm calling a what's your sign

678
00:28:15,970 --> 00:28:18,309
inspired logic block that extracts and

679
00:28:18,309 --> 00:28:19,750
labels an event with code signing

680
00:28:19,750 --> 00:28:22,720
information for a static binary or a

681
00:28:22,720 --> 00:28:24,520
running process right is it Apple signed

682
00:28:24,520 --> 00:28:27,490
app store sign dev sign etc right and

683
00:28:27,490 --> 00:28:29,500
what exactly who signed it you can also

684
00:28:29,500 --> 00:28:32,230
get at that too so this is a pretty

685
00:28:32,230 --> 00:28:34,929
trivial example by design but to show

686
00:28:34,929 --> 00:28:37,330
how simply we can define block block and

687
00:28:37,330 --> 00:28:37,720
allow

688
00:28:37,720 --> 00:28:40,240
to even further refined in the context

689
00:28:40,240 --> 00:28:42,670
of the system right Wow this isn't

690
00:28:42,670 --> 00:28:44,350
hard-coded anywhere these can be added

691
00:28:44,350 --> 00:28:46,150
if this isn't deep enough for someone

692
00:28:46,150 --> 00:28:47,950
like Richie we can go deeper all right

693
00:28:47,950 --> 00:28:50,080
you just write a new logic block and you

694
00:28:50,080 --> 00:28:52,390
go and you add it in here to go one step

695
00:28:52,390 --> 00:28:54,790
further right you can inspect then the

696
00:28:54,790 --> 00:28:57,130
architecture of the package or etc that

697
00:28:57,130 --> 00:29:01,660
he got into earlier right so looking at

698
00:29:01,660 --> 00:29:03,280
maybe a little bit more of an advanced

699
00:29:03,280 --> 00:29:05,400
example here we'll look at

700
00:29:05,400 --> 00:29:08,170
deconstructing ransomware

701
00:29:08,170 --> 00:29:09,730
all right the ransomware detector

702
00:29:09,730 --> 00:29:11,860
algorithm that Patrick put out there on

703
00:29:11,860 --> 00:29:15,520
his on Objective C if you want to read

704
00:29:15,520 --> 00:29:17,440
more about that analysis and that

705
00:29:17,440 --> 00:29:19,570
detection capability you can do so at

706
00:29:19,570 --> 00:29:21,970
his blog linked here at the bottom but

707
00:29:21,970 --> 00:29:23,830
it pretty much boils down to a file my

708
00:29:23,830 --> 00:29:26,470
file IO modification of a file in the

709
00:29:26,470 --> 00:29:28,900
users directory that the process of

710
00:29:28,900 --> 00:29:30,670
process for the responsible for the file

711
00:29:30,670 --> 00:29:33,550
modification is not Apple signed or from

712
00:29:33,550 --> 00:29:34,330
the App Store

713
00:29:34,330 --> 00:29:36,820
the file contents are now encrypted and

714
00:29:36,820 --> 00:29:38,650
he does some mathematical stuff to

715
00:29:38,650 --> 00:29:40,900
determine that that the process

716
00:29:40,900 --> 00:29:42,640
responsible for that file modification

717
00:29:42,640 --> 00:29:44,320
has quickly encrypted several other

718
00:29:44,320 --> 00:29:46,420
files so this is where this example gets

719
00:29:46,420 --> 00:29:48,280
a little trickier because you have to

720
00:29:48,280 --> 00:29:50,080
look aside at the cache and you have to

721
00:29:50,080 --> 00:29:52,210
determine that this same process has

722
00:29:52,210 --> 00:29:54,040
done this multiple times right otherwise

723
00:29:54,040 --> 00:29:55,690
it's just a single process encrypting a

724
00:29:55,690 --> 00:29:59,500
single file that may not be as big of a

725
00:29:59,500 --> 00:30:01,690
flag as a process encrypting multiple

726
00:30:01,690 --> 00:30:05,530
files rapidly and all and all of that

727
00:30:05,530 --> 00:30:07,390
then would equate to potential rounds

728
00:30:07,390 --> 00:30:09,100
over and you can see the predicates then

729
00:30:09,100 --> 00:30:11,410
that are linked together there so we can

730
00:30:11,410 --> 00:30:14,710
tag or label this the first or any first

731
00:30:14,710 --> 00:30:17,290
iteration of a prot and unsigned process

732
00:30:17,290 --> 00:30:19,210
encrypting a file in the users directory

733
00:30:19,210 --> 00:30:22,540
as an untrusted encrypt just label and

734
00:30:22,540 --> 00:30:24,340
then we can look for those happening

735
00:30:24,340 --> 00:30:26,590
quickly in the system as it passes

736
00:30:26,590 --> 00:30:28,919
through

737
00:30:29,310 --> 00:30:32,590
okay so we've not talked about you know

738
00:30:32,590 --> 00:30:33,910
both monitor kit and the real-time

739
00:30:33,910 --> 00:30:36,370
analysis engine that leverages gameplay

740
00:30:36,370 --> 00:30:38,140
kit but what does this all look like

741
00:30:38,140 --> 00:30:40,090
again against threats right and we've

742
00:30:40,090 --> 00:30:42,250
decomposed the objective-c tools and

743
00:30:42,250 --> 00:30:43,810
sort of rebuilt them in the context of

744
00:30:43,810 --> 00:30:46,930
the system so we'll start with another

745
00:30:46,930 --> 00:30:49,250
example and this is the same

746
00:30:49,250 --> 00:30:52,820
full of malware discovered in 2017

747
00:30:52,820 --> 00:30:56,450
detailed by Thomas Reid and then you

748
00:30:56,450 --> 00:30:58,299
know analyzed further by Patrick here

749
00:30:58,299 --> 00:31:02,179
did some deep dynamic analysis of the

750
00:31:02,179 --> 00:31:03,860
tool where I including creating like a

751
00:31:03,860 --> 00:31:05,960
custom see to being able to task it so

752
00:31:05,960 --> 00:31:07,250
it's really cool we got a good good

753
00:31:07,250 --> 00:31:10,490
flavor of the capabilities of this

754
00:31:10,490 --> 00:31:12,730
sample and how it goes about doing that

755
00:31:12,730 --> 00:31:15,590
this that analysis matches closely with

756
00:31:15,590 --> 00:31:17,570
our you know our ability to generically

757
00:31:17,570 --> 00:31:19,940
detect several indicators right so in

758
00:31:19,940 --> 00:31:21,740
the first place right again you can

759
00:31:21,740 --> 00:31:23,150
generically detect the launch agent

760
00:31:23,150 --> 00:31:25,850
being registered right again that might

761
00:31:25,850 --> 00:31:27,440
not be enough so you just label it and

762
00:31:27,440 --> 00:31:29,179
then you move on well that particular

763
00:31:29,179 --> 00:31:34,100
launch agent was attempting to launch a

764
00:31:34,100 --> 00:31:37,130
hidden file right called dot client so

765
00:31:37,130 --> 00:31:39,230
it was attempting to launch a hidden

766
00:31:39,230 --> 00:31:40,700
file so that's a little bit more

767
00:31:40,700 --> 00:31:42,740
suspicious right why do I do that right

768
00:31:42,740 --> 00:31:45,230
so you you tag it with that too and

769
00:31:45,230 --> 00:31:46,490
perhaps that's enough for you but

770
00:31:46,490 --> 00:31:48,620
perhaps it's not all right and if it's

771
00:31:48,620 --> 00:31:50,059
not and you have to go deeper you have

772
00:31:50,059 --> 00:31:51,590
another chance when that file finally

773
00:31:51,590 --> 00:31:52,970
launches is going to be launched with

774
00:31:52,970 --> 00:31:56,360
process arguments that include where or

775
00:31:56,360 --> 00:31:59,840
that that include a hidden file right

776
00:31:59,840 --> 00:32:01,880
and then it also extracts and execute

777
00:32:01,880 --> 00:32:03,470
the file out of temp so again some of

778
00:32:03,470 --> 00:32:08,289
these analysis points and hunt and hunt

779
00:32:08,289 --> 00:32:11,539
Hut inspired detection you can now just

780
00:32:11,539 --> 00:32:13,400
load back into the system as we see some

781
00:32:13,400 --> 00:32:15,289
of these come and you can experiment in

782
00:32:15,289 --> 00:32:17,000
your own enterprise about what is normal

783
00:32:17,000 --> 00:32:18,320
and what isn't right you can turn on

784
00:32:18,320 --> 00:32:19,700
logging for a little while you can

785
00:32:19,700 --> 00:32:21,289
update it to alerting you can do what

786
00:32:21,289 --> 00:32:24,650
you want to do some other detection that

787
00:32:24,650 --> 00:32:27,409
are capable or that that you know we

788
00:32:27,409 --> 00:32:29,419
want to add are things like you know

789
00:32:29,419 --> 00:32:31,039
this particular sample data issue these

790
00:32:31,039 --> 00:32:33,500
synthetic clicks to interact and and to

791
00:32:33,500 --> 00:32:35,929
interact with the user system to allow

792
00:32:35,929 --> 00:32:38,240
certain prompts or get access to certain

793
00:32:38,240 --> 00:32:40,520
data they shouldn't have access to they

794
00:32:40,520 --> 00:32:42,520
also did synthetic Ybor events to issue

795
00:32:42,520 --> 00:32:46,400
commands and and control the camera turn

796
00:32:46,400 --> 00:32:48,320
the camera onto unsuspecting users all

797
00:32:48,320 --> 00:32:51,320
again behavioral indicators that we can

798
00:32:51,320 --> 00:32:53,720
look for using monitor kit and writing

799
00:32:53,720 --> 00:32:59,240
these NS predicate rules so another one

800
00:32:59,240 --> 00:33:00,500
that we kind of take a look at and

801
00:33:00,500 --> 00:33:02,169
thought was interesting was this

802
00:33:02,169 --> 00:33:04,989
wind shift execution vector right and

803
00:33:04,989 --> 00:33:06,850
this was detailed by the dark matter

804
00:33:06,850 --> 00:33:09,249
guys at hacked in the Box Singapore I

805
00:33:09,249 --> 00:33:12,220
believe this year and in this particular

806
00:33:12,220 --> 00:33:15,820
case right they were fishing users they

807
00:33:15,820 --> 00:33:17,889
were leveraging this safe open

808
00:33:17,889 --> 00:33:21,759
I guess capability of Safari that I'm

809
00:33:21,759 --> 00:33:23,919
not quite sure exactly why it exists it

810
00:33:23,919 --> 00:33:26,590
considers PDF safe alright so it says

811
00:33:26,590 --> 00:33:29,019
what you want me to auto open PDFs and

812
00:33:29,019 --> 00:33:31,809
and not and very surprisingly auto

813
00:33:31,809 --> 00:33:34,359
extract archives right so this auto

814
00:33:34,359 --> 00:33:37,899
archive extracting was pretty is is

815
00:33:37,899 --> 00:33:40,779
pretty a little weird to me right so but

816
00:33:40,779 --> 00:33:42,940
combine that now with the fact that this

817
00:33:42,940 --> 00:33:45,489
auto archiving it is auto archive

818
00:33:45,489 --> 00:33:48,039
extracting with another Mac OS feature

819
00:33:48,039 --> 00:33:50,169
that if you drop an app bundle on the

820
00:33:50,169 --> 00:33:53,080
file system and that app bundle read

821
00:33:53,080 --> 00:33:55,809
tries to register for register as a

822
00:33:55,809 --> 00:33:58,269
custom URL handler via just an entry in

823
00:33:58,269 --> 00:34:00,249
its P list the system will go ahead and

824
00:34:00,249 --> 00:34:03,190
say okay and register you to be launched

825
00:34:03,190 --> 00:34:05,139
whenever someone visits that URL scheme

826
00:34:05,139 --> 00:34:06,820
alright so you can see where this is

827
00:34:06,820 --> 00:34:07,389
going

828
00:34:07,389 --> 00:34:11,230
you get fished you you know you download

829
00:34:11,230 --> 00:34:12,849
you get fished you download the zip the

830
00:34:12,849 --> 00:34:15,629
Zippo on archives the system Auto

831
00:34:15,629 --> 00:34:19,299
registers that as the as the custom URL

832
00:34:19,299 --> 00:34:20,679
handle there and then they redirect you

833
00:34:20,679 --> 00:34:22,569
to something that uses that URL scheme

834
00:34:22,569 --> 00:34:25,210
and the app launches alright it does

835
00:34:25,210 --> 00:34:26,619
require a little bit of user interaction

836
00:34:26,619 --> 00:34:28,719
but a lot of users will just click OK

837
00:34:28,719 --> 00:34:31,510
right so how do we go ahead and detect

838
00:34:31,510 --> 00:34:36,010
this so again looking at just the first

839
00:34:36,010 --> 00:34:37,989
level right let's just look for anything

840
00:34:37,989 --> 00:34:39,790
that hits the file system that is trying

841
00:34:39,790 --> 00:34:41,619
to register as a custom URL handler we

842
00:34:41,619 --> 00:34:44,139
can do this simply by using the the

843
00:34:44,139 --> 00:34:45,760
modeled and parsed data coming out of

844
00:34:45,760 --> 00:34:48,159
monitor kit and writing this predicate

845
00:34:48,159 --> 00:34:50,889
to look at the bundle info dictionary

846
00:34:50,889 --> 00:34:52,929
which is the P list and then looking at

847
00:34:52,929 --> 00:34:55,179
its entry for CF bundle URL types

848
00:34:55,179 --> 00:34:57,450
it's interesting to note here that as

849
00:34:57,450 --> 00:35:00,369
since all of this are objective-c types

850
00:35:00,369 --> 00:35:02,950
including a dictionary we didn't write

851
00:35:02,950 --> 00:35:05,049
any custom parsing code for this this is

852
00:35:05,049 --> 00:35:08,890
all NS predicate based ability and

853
00:35:08,890 --> 00:35:10,270
Objective C you just keep using

854
00:35:10,270 --> 00:35:12,190
Objective C selectors and digging in

855
00:35:12,190 --> 00:35:14,280
right this includes straight

856
00:35:14,280 --> 00:35:16,260
string functions that you can use at

857
00:35:16,260 --> 00:35:18,840
will in the NS predicate logic and some

858
00:35:18,840 --> 00:35:22,560
of the parsing things so the you know we

859
00:35:22,560 --> 00:35:25,380
by modeling the data and allowing you to

860
00:35:25,380 --> 00:35:27,750
to drill into file bundle info

861
00:35:27,750 --> 00:35:29,190
dictionary from there it's just a

862
00:35:29,190 --> 00:35:30,720
peelers dictionary you can use built-in

863
00:35:30,720 --> 00:35:33,330
types to then parse that I'm so looking

864
00:35:33,330 --> 00:35:34,950
here then we're looking is there a CF

865
00:35:34,950 --> 00:35:37,530
bundle URL type that isn't nil right so

866
00:35:37,530 --> 00:35:39,660
is something trying to register as a

867
00:35:39,660 --> 00:35:42,060
customer or hunter and if that's not

868
00:35:42,060 --> 00:35:43,920
enough we can go deeper right

869
00:35:43,920 --> 00:35:46,890
so was that file written by Safari that

870
00:35:46,890 --> 00:35:48,990
is probably odd right there probably

871
00:35:48,990 --> 00:35:50,640
shouldn't be writing files directly from

872
00:35:50,640 --> 00:35:52,260
Safari that are apps you should be

873
00:35:52,260 --> 00:35:54,330
getting those from the app store or they

874
00:35:54,330 --> 00:35:55,890
should be coming down as zips and you

875
00:35:55,890 --> 00:35:57,570
should be on archiving them yourself

876
00:35:57,570 --> 00:35:59,400
they shouldn't be Safari shouldn't be

877
00:35:59,400 --> 00:36:01,200
doing it for you or if you want to go

878
00:36:01,200 --> 00:36:03,180
more generic maybe you want to say look

879
00:36:03,180 --> 00:36:05,280
I really only want custom URL handlers

880
00:36:05,280 --> 00:36:08,790
that are you know Apple Apple developed

881
00:36:08,790 --> 00:36:11,730
or coming from the App Store not signed

882
00:36:11,730 --> 00:36:14,820
by some random development ID because

883
00:36:14,820 --> 00:36:16,800
there are some legitimate apps like

884
00:36:16,800 --> 00:36:19,560
Shazam or I believe zoom that do use

885
00:36:19,560 --> 00:36:22,230
this technique to you know launch their

886
00:36:22,230 --> 00:36:24,570
app on your desktop when you visit a

887
00:36:24,570 --> 00:36:26,340
certain URL in your calendar for

888
00:36:26,340 --> 00:36:31,560
instance right so here's my favorite ad

889
00:36:31,560 --> 00:36:35,190
word detector I will admit that I have

890
00:36:35,190 --> 00:36:36,540
not had the opportunity to run this at

891
00:36:36,540 --> 00:36:39,840
scale yet so anyone who has but pretty

892
00:36:39,840 --> 00:36:42,450
much if the process so if the process

893
00:36:42,450 --> 00:36:44,850
claims to be Adobe or flash and isn't

894
00:36:44,850 --> 00:36:47,010
signed by Adobe Systems like you know

895
00:36:47,010 --> 00:36:53,640
maybe we should note that so based on

896
00:36:53,640 --> 00:36:55,410
the tools techniques and you know the

897
00:36:55,410 --> 00:36:57,330
technology that we've presented here

898
00:36:57,330 --> 00:36:59,550
today Digitas built you know our

899
00:36:59,550 --> 00:37:01,410
flagship product and we've aptly named a

900
00:37:01,410 --> 00:37:03,300
game plan a little play off game play

901
00:37:03,300 --> 00:37:06,900
kit and we're excited to announce that

902
00:37:06,900 --> 00:37:07,650
early next year

903
00:37:07,650 --> 00:37:11,430
we'll be releasing this technology in a

904
00:37:11,430 --> 00:37:13,530
single you know enterprise solution that

905
00:37:13,530 --> 00:37:16,020
allows for a flexible configuration of

906
00:37:16,020 --> 00:37:19,110
these detection logic separation of

907
00:37:19,110 --> 00:37:21,870
profiles to different users to

908
00:37:21,870 --> 00:37:23,760
facilitate you know endpoint alerting

909
00:37:23,760 --> 00:37:26,370
auditing threat hunting you control how

910
00:37:26,370 --> 00:37:27,330
verbose

911
00:37:27,330 --> 00:37:29,370
this product is based on your

912
00:37:29,370 --> 00:37:33,840
configuration so please contact us to

913
00:37:33,840 --> 00:37:35,640
learn more about gameplan arrange a demo

914
00:37:35,640 --> 00:37:37,680
or just discuss Mac security in general

915
00:37:37,680 --> 00:37:40,350
we love to talk about this stuff look

916
00:37:40,350 --> 00:37:42,000
for an announcement as John said earlier

917
00:37:42,000 --> 00:37:44,550
about our release of monitor kit to our

918
00:37:44,550 --> 00:37:47,190
github account in the coming weeks and

919
00:37:47,190 --> 00:37:48,330
we'll be around for the rest of the

920
00:37:48,330 --> 00:37:50,430
conference for those of you who are also

921
00:37:50,430 --> 00:37:53,550
attending Mac tech con in LA we'll be

922
00:37:53,550 --> 00:37:56,550
there as well and so malo for taking the

923
00:37:56,550 --> 00:37:58,500
time to attend our talk today and we

924
00:37:58,500 --> 00:38:00,270
look forward to hanging with you and

925
00:38:00,270 --> 00:38:02,750
beautiful Maui

926
00:38:12,500 --> 00:38:19,010
have your questions how'd we do on time

927
00:38:35,600 --> 00:38:37,710
so not as built right now I don't

928
00:38:37,710 --> 00:38:53,190
believe so the question was can you dump

929
00:38:53,190 --> 00:38:55,980
the raw data out of the monitor kqi and

930
00:38:55,980 --> 00:38:59,420
John answered not as built right now but

931
00:38:59,420 --> 00:39:01,650
you know the the way that monitor kid is

932
00:39:01,650 --> 00:39:03,540
built it would be trivial pretty much to

933
00:39:03,540 --> 00:39:05,870
build that

934
00:39:15,079 --> 00:39:17,630
I think John's gonna have to come up

935
00:39:17,630 --> 00:39:21,009
here and answer questions swim in Mike

936
00:39:21,279 --> 00:39:28,670
that is that is live only yeah yes the

937
00:39:28,670 --> 00:39:32,289
question was can you do can you read the

938
00:39:32,289 --> 00:39:35,809
boys at the sorry yeah can you do can

939
00:39:35,809 --> 00:39:38,450
you do the detection post-mortem on the

940
00:39:38,450 --> 00:39:40,869
VSM yeah it'd be it would be interesting

941
00:39:40,869 --> 00:39:44,690
to look at if same how much replies just

942
00:39:44,690 --> 00:39:46,339
looking at some of the the PR auto log

943
00:39:46,339 --> 00:39:53,619
files and things like that yes sir

944
00:40:00,969 --> 00:40:03,529
yes so I actually realized that as John

945
00:40:03,529 --> 00:40:05,479
was going through all the monitors I did

946
00:40:05,479 --> 00:40:07,309
a poor job in the predicate section of

947
00:40:07,309 --> 00:40:08,509
outlining how to use all of those

948
00:40:08,509 --> 00:40:10,880
monitors you certainly could write the

949
00:40:10,880 --> 00:40:13,160
all of it is built exactly the same way

950
00:40:13,160 --> 00:40:15,499
and extensible on some of those the

951
00:40:15,499 --> 00:40:16,759
monitor kit detections are built

952
00:40:16,759 --> 00:40:18,380
specifically for insider threat in mind

953
00:40:18,380 --> 00:40:20,329
the download monitor the screenshot

954
00:40:20,329 --> 00:40:22,130
monitor actually more user behavior

955
00:40:22,130 --> 00:40:24,199
monitors not not ad where malware

956
00:40:24,199 --> 00:40:26,930
monitors USB insertion you can combine

957
00:40:26,930 --> 00:40:29,209
those things and yes certainly

958
00:40:29,209 --> 00:40:30,829
I didn't supply any of those examples

959
00:40:30,829 --> 00:40:34,249
today but it goes exactly hand-in-hand

960
00:40:34,249 --> 00:40:36,529
right you define what is odd in your

961
00:40:36,529 --> 00:40:37,849
environment we just didn't get to put

962
00:40:37,849 --> 00:40:40,209
those in here

963
00:40:50,020 --> 00:40:52,850
so the question was can you run that as

964
00:40:52,850 --> 00:40:54,170
a service in the cloud the game plans

965
00:40:54,170 --> 00:40:58,100
stuff we the rules are applied on the

966
00:40:58,100 --> 00:41:00,110
endpoint right yeah they're all applied

967
00:41:00,110 --> 00:41:02,450
on the endpoint I mean it's the backend

968
00:41:02,450 --> 00:41:04,220
and the configuration is all you know

969
00:41:04,220 --> 00:41:07,820
cloud based so you define the logic in

970
00:41:07,820 --> 00:41:09,740
the cloud you know through a UI and the

971
00:41:09,740 --> 00:41:10,820
cloud and gets pushed down it's

972
00:41:10,820 --> 00:41:13,580
configurations to the endpoint but all

973
00:41:13,580 --> 00:41:15,110
of the logic you know that's sort of the

974
00:41:15,110 --> 00:41:17,180
design of the system was to push that

975
00:41:17,180 --> 00:41:18,740
logic back down to the emblem because we

976
00:41:18,740 --> 00:41:20,180
believe there's you know other tools out

977
00:41:20,180 --> 00:41:22,850
there that do that analysis or allow you

978
00:41:22,850 --> 00:41:24,500
to do some of that analysis you know

979
00:41:24,500 --> 00:41:26,810
your typical sins etc already in the

980
00:41:26,810 --> 00:41:43,070
cloud absolutely yeah that's a that's a

981
00:41:43,070 --> 00:41:44,210
very good question so the question was

982
00:41:44,210 --> 00:41:46,100
what's the performance impact and so far

983
00:41:46,100 --> 00:41:49,460
we've seen very minimal based on the

984
00:41:49,460 --> 00:41:51,080
fact and I think part of that to be

985
00:41:51,080 --> 00:41:53,480
quite frank might be cheating right some

986
00:41:53,480 --> 00:41:55,130
of that is being pushed down on to

987
00:41:55,130 --> 00:41:57,770
system level but we've typically seen no

988
00:41:57,770 --> 00:42:00,110
more than you know 5% depending on what

989
00:42:00,110 --> 00:42:00,910
we're doing

990
00:42:00,910 --> 00:42:05,270
but we so far we are typically focused

991
00:42:05,270 --> 00:42:07,190
on you know process and file monitoring

992
00:42:07,190 --> 00:42:10,700
so I believe as you add more into the

993
00:42:10,700 --> 00:42:12,800
mix it may you know take up a little bit

994
00:42:12,800 --> 00:42:14,300
but we're trying to cap it at five you

995
00:42:14,300 --> 00:42:18,250
know right around under 5% would be our

996
00:42:19,750 --> 00:42:23,210
you can configure that logic to do a lot

997
00:42:23,210 --> 00:42:25,130
of stuff and you could open the

998
00:42:25,130 --> 00:42:27,170
floodgates to be SM and you're going to

999
00:42:27,170 --> 00:42:29,900
you know raise your your resource usage

1000
00:42:29,900 --> 00:42:32,210
tremendously there so it's a give and

1001
00:42:32,210 --> 00:42:34,220
take on that and we treat try to hit

1002
00:42:34,220 --> 00:42:36,080
that balance of getting the right

1003
00:42:36,080 --> 00:42:38,030
information enough to write these

1004
00:42:38,030 --> 00:42:43,150
predicates to not you know resources

1005
00:43:00,200 --> 00:43:03,000
yes absolutely so the question yeah the

1006
00:43:03,000 --> 00:43:04,950
question was have you built in the

1007
00:43:04,950 --> 00:43:06,780
ability to get some of that label data

1008
00:43:06,780 --> 00:43:11,220
off the system and yes we currently

1009
00:43:11,220 --> 00:43:14,160
again configure ibly you determine

1010
00:43:14,160 --> 00:43:15,870
whether you cache it or log it and you

1011
00:43:15,870 --> 00:43:17,460
can do both so you could cache and log

1012
00:43:17,460 --> 00:43:20,310
it which or you know remote log so you

1013
00:43:20,310 --> 00:43:21,750
can remote log it off the system will

1014
00:43:21,750 --> 00:43:24,270
post the data to an end point or you can

1015
00:43:24,270 --> 00:43:25,800
just write it locally and we have

1016
00:43:25,800 --> 00:43:26,880
another tool that we didn't really talk

1017
00:43:26,880 --> 00:43:28,890
about called our cache Explorer that

1018
00:43:28,890 --> 00:43:31,470
then you can go in and look into the the

1019
00:43:31,470 --> 00:43:33,840
saved cache data which is just giant

1020
00:43:33,840 --> 00:43:54,990
object store sure so how is this

1021
00:43:54,990 --> 00:43:57,030
different from OS query Patrick always

1022
00:43:57,030 --> 00:43:59,270
ask the hard questions um

1023
00:43:59,270 --> 00:44:02,670
no so so fundamentally of we looked at

1024
00:44:02,670 --> 00:44:04,170
it as like streaming versus polling

1025
00:44:04,170 --> 00:44:05,160
right

1026
00:44:05,160 --> 00:44:08,460
and so OS query has some capabilities to

1027
00:44:08,460 --> 00:44:11,850
do some event kind of dipping over time

1028
00:44:11,850 --> 00:44:13,680
but not fundamentally built for that

1029
00:44:13,680 --> 00:44:15,360
right more fun only a built for building

1030
00:44:15,360 --> 00:44:17,340
these tables that you can query to get

1031
00:44:17,340 --> 00:44:20,160
the rich I call them the point in time

1032
00:44:20,160 --> 00:44:22,920
answers that you're looking for so that

1033
00:44:22,920 --> 00:44:25,830
that is one of the one of the things

1034
00:44:25,830 --> 00:44:28,770
that we think is a you know different

1035
00:44:28,770 --> 00:44:30,810
about the approach right and really just

1036
00:44:30,810 --> 00:44:32,670
looking at doing that streaming analysis

1037
00:44:32,670 --> 00:44:34,230
and pushing the some of that those

1038
00:44:34,230 --> 00:44:36,750
analytics down and allow it so you want

1039
00:44:36,750 --> 00:44:38,820
to build a new you know a new table for

1040
00:44:38,820 --> 00:44:40,260
new detection there's another big one

1041
00:44:40,260 --> 00:44:42,150
that people often ask right you don't

1042
00:44:42,150 --> 00:44:43,980
have to do you know to go through kind

1043
00:44:43,980 --> 00:44:46,560
of the structured OS query way to get

1044
00:44:46,560 --> 00:44:49,610
these new detections

1045
00:44:52,760 --> 00:44:56,070
all right thank you very much

1046
00:44:56,070 --> 00:45:06,249
[Applause]

1047
00:45:32,150 --> 00:45:34,530
all right let's give one more hand of

1048
00:45:34,530 --> 00:45:41,190
applause for Josh and John all right so

1049
00:45:41,190 --> 00:45:44,910
that wraps up day one of the first

1050
00:45:44,910 --> 00:45:47,310
annual objective by the sea conference I

1051
00:45:47,310 --> 00:45:50,870
briefly want to just reiterate that at

1052
00:45:50,870 --> 00:45:53,610
5:30 tonight we are going to be having

1053
00:45:53,610 --> 00:45:55,920
the conference party it's going to be a

1054
00:45:55,920 --> 00:45:58,770
few rooms down so basically on this same

1055
00:45:58,770 --> 00:46:00,240
level just go out the store and make a

1056
00:46:00,240 --> 00:46:03,270
right we have a local Maui company

1057
00:46:03,270 --> 00:46:05,790
that's helping design the party and do

1058
00:46:05,790 --> 00:46:07,290
some cool events so we'll have some VR

1059
00:46:07,290 --> 00:46:09,540
experiences some light shows all sorts

1060
00:46:09,540 --> 00:46:10,380
of really cool stuff

1061
00:46:10,380 --> 00:46:12,330
also remember to bring your drink

1062
00:46:12,330 --> 00:46:14,550
tickets that you got at reception so

1063
00:46:14,550 --> 00:46:16,290
that you can get some free drinks

1064
00:46:16,290 --> 00:46:18,390
they'll also be some poo-poos some

1065
00:46:18,390 --> 00:46:21,050
appetizers and of course the ability to

1066
00:46:21,050 --> 00:46:25,200
buy more drinks so again just round

1067
00:46:25,200 --> 00:46:27,240
applause for all of you attendees for

1068
00:46:27,240 --> 00:46:29,250
the great speakers wrapping up day

1069
00:46:29,250 --> 00:46:35,220
number one and we will see you at the

1070
00:46:35,220 --> 00:46:37,399
party

