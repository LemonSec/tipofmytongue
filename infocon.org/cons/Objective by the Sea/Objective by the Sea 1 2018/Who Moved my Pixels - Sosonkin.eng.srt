1
00:00:07,580 --> 00:00:12,000
all right Aloha and welcome to day

2
00:00:12,000 --> 00:00:14,490
number two of objective by the sea it

3
00:00:14,490 --> 00:00:16,800
was awesome to see pretty much everyone

4
00:00:16,800 --> 00:00:18,270
at the party last night yesterday was a

5
00:00:18,270 --> 00:00:21,660
great day we have still a credible

6
00:00:21,660 --> 00:00:23,100
lineup of speakers

7
00:00:23,100 --> 00:00:26,970
kicking it off is Mike s I've worked

8
00:00:26,970 --> 00:00:28,680
with Mike for a while

9
00:00:28,680 --> 00:00:30,800
it's syn/ack we've gone on some epic

10
00:00:30,800 --> 00:00:32,969
expeditions you might have seen us on

11
00:00:32,969 --> 00:00:36,480
Vice news in Russia hacking so you can

12
00:00:36,480 --> 00:00:38,579
ask Mike all about that because we tried

13
00:00:38,579 --> 00:00:42,000
not to get arrested so with no further

14
00:00:42,000 --> 00:00:44,040
ado here's Mike he's gonna be talking

15
00:00:44,040 --> 00:00:46,260
about some really interesting pixel

16
00:00:46,260 --> 00:00:48,120
related screen capture Mac

17
00:00:48,120 --> 00:00:49,050
reverse-engineering

18
00:00:49,050 --> 00:00:51,899
goodness so give a hand round of

19
00:00:51,899 --> 00:00:53,120
applause for Mike

20
00:00:53,120 --> 00:01:01,670
[Applause]

21
00:01:10,550 --> 00:01:13,610
[Music]

22
00:01:32,689 --> 00:01:34,770
okay well Mike's getting this set up

23
00:01:34,770 --> 00:01:37,439
just also want to mention that we are

24
00:01:37,439 --> 00:01:39,390
going to be having the raffle at the end

25
00:01:39,390 --> 00:01:42,000
of the talks today at around 4 p.m. so

26
00:01:42,000 --> 00:01:44,460
definitely stay for that again we're

27
00:01:44,460 --> 00:01:47,280
giving away a Nintendo switch Apple

28
00:01:47,280 --> 00:01:50,850
watch fourth-generation and some Apple

29
00:01:50,850 --> 00:01:52,710
earpods as well as some books from

30
00:01:52,710 --> 00:01:55,140
Jonathan Leben so it's really cool gifts

31
00:01:55,140 --> 00:01:57,869
so make sure to stick around for that

32
00:01:57,869 --> 00:01:59,369
and if you're leaving give me your

33
00:01:59,369 --> 00:02:03,659
raffle tickets oh well thank you for

34
00:02:03,659 --> 00:02:06,420
that introduction Patrick I also want to

35
00:02:06,420 --> 00:02:12,299
thank everyone for coming this is good

36
00:02:12,299 --> 00:02:14,489
all right Thank You objective-c

37
00:02:14,489 --> 00:02:17,580
thanks Patrick for setting this up and

38
00:02:17,580 --> 00:02:19,140
getting everyone tomorrow especially me

39
00:02:19,140 --> 00:02:20,489
because I've never been here before but

40
00:02:20,489 --> 00:02:22,769
I have to say there's a huge missed

41
00:02:22,769 --> 00:02:24,510
opportunity instead of having water on

42
00:02:24,510 --> 00:02:26,790
the tables you should have had some

43
00:02:26,790 --> 00:02:34,110
apple juice next year anyway so thank

44
00:02:34,110 --> 00:02:37,170
you for coming for my talk I'll I want

45
00:02:37,170 --> 00:02:39,000
to go through a very serious issue today

46
00:02:39,000 --> 00:02:42,420
it's called theft of pixels and there's

47
00:02:42,420 --> 00:02:44,910
a lot of in the various actors out there

48
00:02:44,910 --> 00:02:46,769
that are doing it and I hope that

49
00:02:46,769 --> 00:02:48,690
towards the end we can kind of find a

50
00:02:48,690 --> 00:02:51,510
way that we can propose a joint proposal

51
00:02:51,510 --> 00:02:55,680
to Apple to get that stuff fixed anyway

52
00:02:55,680 --> 00:02:59,010
my name is Michael sunken I've kind of

53
00:02:59,010 --> 00:03:00,810
worked in a number of places even had

54
00:03:00,810 --> 00:03:05,040
some time on HBO vice my 15 minutes fame

55
00:03:05,040 --> 00:03:07,200
with Patrick so that was a really cool

56
00:03:07,200 --> 00:03:11,250
stuff today I am here on behalf of cynic

57
00:03:11,250 --> 00:03:14,400
we do crowdsource vulnerability

58
00:03:14,400 --> 00:03:15,959
discovery so if you're into that sort of

59
00:03:15,959 --> 00:03:18,359
stuff you should check them out and get

60
00:03:18,359 --> 00:03:20,519
paid for hacking some interesting

61
00:03:20,519 --> 00:03:26,609
customers so kind of motivation for why

62
00:03:26,609 --> 00:03:29,430
I started doing this research

63
00:03:29,430 --> 00:03:31,349
I've been looking at malware for quite a

64
00:03:31,349 --> 00:03:34,560
while and I was always interested in you

65
00:03:34,560 --> 00:03:36,209
know the functionality that it does and

66
00:03:36,209 --> 00:03:38,219
why why sort of people are doing doing

67
00:03:38,219 --> 00:03:41,129
this stuff and so several things that

68
00:03:41,129 --> 00:03:42,840
kind of come to mind is for example like

69
00:03:42,840 --> 00:03:45,329
pranking that's been around in the

70
00:03:45,329 --> 00:03:46,950
beginning when malware wasn't a big

71
00:03:46,950 --> 00:03:48,480
thing and people were just sending

72
00:03:48,480 --> 00:03:50,819
viruses to each other although these

73
00:03:50,819 --> 00:03:53,219
days it's a little bit more let's say

74
00:03:53,219 --> 00:03:56,099
actionable and dangerous you know things

75
00:03:56,099 --> 00:03:59,819
to do hacktivism ransomware compute

76
00:03:59,819 --> 00:04:01,829
theft is kind of a new phenomenon you

77
00:04:01,829 --> 00:04:03,750
know with all the Bitcoin mining and

78
00:04:03,750 --> 00:04:05,370
Manero Cohen mining you see a lot of

79
00:04:05,370 --> 00:04:08,099
malware having to do with that and of

80
00:04:08,099 --> 00:04:10,590
course espionage financial thefts I mean

81
00:04:10,590 --> 00:04:12,510
people want information people want

82
00:04:12,510 --> 00:04:12,840
money

83
00:04:12,840 --> 00:04:16,079
so there's actors that go after people

84
00:04:16,079 --> 00:04:18,810
that have that stuff what we'll be

85
00:04:18,810 --> 00:04:21,180
talking about here is a category for

86
00:04:21,180 --> 00:04:23,190
educational purposes which means that

87
00:04:23,190 --> 00:04:25,110
we'll find out better ways to build

88
00:04:25,110 --> 00:04:27,539
malware but keep it only to yourself for

89
00:04:27,539 --> 00:04:33,060
educational purposes the outline I'll

90
00:04:33,060 --> 00:04:35,250
talk about how I get inspired to do this

91
00:04:35,250 --> 00:04:38,789
specific thing for screen shot pixel

92
00:04:38,789 --> 00:04:41,849
capturing and I'll go through some of

93
00:04:41,849 --> 00:04:43,380
the examination and the lower level

94
00:04:43,380 --> 00:04:47,490
details of how the mechanisms work how

95
00:04:47,490 --> 00:04:49,680
we can actually abuse it and the

96
00:04:49,680 --> 00:04:51,240
implications around that then though

97
00:04:51,240 --> 00:04:53,460
sort of bring it all together make some

98
00:04:53,460 --> 00:04:55,409
look at some malware look at some

99
00:04:55,409 --> 00:04:57,690
detection methods and generally just

100
00:04:57,690 --> 00:05:01,159
celebrate because we're in Maui

101
00:05:02,030 --> 00:05:05,130
so the way it sort of started as I was

102
00:05:05,130 --> 00:05:06,900
randomly looking at a report from

103
00:05:06,900 --> 00:05:10,199
Kaspersky that was published in May 2018

104
00:05:10,199 --> 00:05:12,509
and this report looked at a Android

105
00:05:12,509 --> 00:05:16,770
based malware to say that here but

106
00:05:16,770 --> 00:05:18,300
they're with me for a second this

107
00:05:18,300 --> 00:05:20,659
definitely will go into Mac pretty soon

108
00:05:20,659 --> 00:05:23,729
it's it's a malware that targeted middle

109
00:05:23,729 --> 00:05:26,220
eastern phones particularly for stealing

110
00:05:26,220 --> 00:05:30,120
information it's focused on particular

111
00:05:30,120 --> 00:05:31,949
types of information like contact lists

112
00:05:31,949 --> 00:05:33,919
and it would exfiltrate that through

113
00:05:33,919 --> 00:05:37,800
HTTP get requests from the phone into

114
00:05:37,800 --> 00:05:39,639
command control so room

115
00:05:39,639 --> 00:05:42,249
it was distributed through a very kind

116
00:05:42,249 --> 00:05:44,050
of low-tech methods by social

117
00:05:44,050 --> 00:05:46,150
engineering through a watering hole

118
00:05:46,150 --> 00:05:48,699
technique where it was essentially force

119
00:05:48,699 --> 00:05:51,909
the apk to be downloaded by by this

120
00:05:51,909 --> 00:05:54,249
website that people go to all the time

121
00:05:54,249 --> 00:05:57,069
and someone is sort of let's say not

122
00:05:57,069 --> 00:05:59,080
tech savvy enough they'll click on that

123
00:05:59,080 --> 00:06:00,400
and install it because they feel like

124
00:06:00,400 --> 00:06:04,509
they have to now if you actually look at

125
00:06:04,509 --> 00:06:06,400
the progression of this Android malware

126
00:06:06,400 --> 00:06:08,650
and I posted up a hash of it in case

127
00:06:08,650 --> 00:06:10,629
you're interested you can look at

128
00:06:10,629 --> 00:06:14,020
yourself as well this malware have had a

129
00:06:14,020 --> 00:06:15,789
progression over them over several years

130
00:06:15,789 --> 00:06:18,460
and first version was very basic first

131
00:06:18,460 --> 00:06:21,719
it would just look after accounts and

132
00:06:21,719 --> 00:06:25,360
steal sort of contacts from the phone

133
00:06:25,360 --> 00:06:27,550
then it progressed further until

134
00:06:27,550 --> 00:06:30,819
eventually it grew into this version for

135
00:06:30,819 --> 00:06:33,009
very advanced malware that steals all

136
00:06:33,009 --> 00:06:36,219
kinds of things like key logs clipping

137
00:06:36,219 --> 00:06:38,979
data arbitrary files and of course you

138
00:06:38,979 --> 00:06:41,050
also do screenshots now something that

139
00:06:41,050 --> 00:06:43,360
Kaspersky said is that they suspect that

140
00:06:43,360 --> 00:06:45,400
this is where the malware became

141
00:06:45,400 --> 00:06:47,319
professional it was actually outsourced

142
00:06:47,319 --> 00:06:49,599
to another company compared to the other

143
00:06:49,599 --> 00:06:51,069
malware that was out there of the same

144
00:06:51,069 --> 00:06:54,279
family now I got particularly interested

145
00:06:54,279 --> 00:06:56,620
in a screenshot part because I feel like

146
00:06:56,620 --> 00:06:59,259
a lot of people look at different types

147
00:06:59,259 --> 00:07:00,729
of malware and mention different things

148
00:07:00,729 --> 00:07:02,860
about contact lists and what-have-you

149
00:07:02,860 --> 00:07:04,240
but nobody really talks about

150
00:07:04,240 --> 00:07:06,099
screenshots and I feel like that's a

151
00:07:06,099 --> 00:07:09,759
very important part of where a lot of

152
00:07:09,759 --> 00:07:11,469
your private information is sort of

153
00:07:11,469 --> 00:07:13,060
displayed I mean if you're looking at a

154
00:07:13,060 --> 00:07:15,330
banking statement if you're looking at

155
00:07:15,330 --> 00:07:19,569
some design documents etc you want to

156
00:07:19,569 --> 00:07:20,949
see it on your screen and that's kind of

157
00:07:20,949 --> 00:07:22,889
you know the end or like the last step

158
00:07:22,889 --> 00:07:27,699
and can be stolen from there so that's

159
00:07:27,699 --> 00:07:29,349
one sort of motivation I had the other

160
00:07:29,349 --> 00:07:31,479
motivation I had is that essentially I

161
00:07:31,479 --> 00:07:34,599
was using a MacBook Pro that was

162
00:07:34,599 --> 00:07:36,939
provided to me by my boss and I was

163
00:07:36,939 --> 00:07:38,259
wondering if he was taking screenshots

164
00:07:38,259 --> 00:07:40,629
of what I was doing I wasn't really

165
00:07:40,629 --> 00:07:42,189
doing anything bad on it I was just kind

166
00:07:42,189 --> 00:07:44,129
of curious if he was keeping tabs on

167
00:07:44,129 --> 00:07:48,550
that said I went down this research line

168
00:07:48,550 --> 00:07:50,680
on OS X because frankly that's what I

169
00:07:50,680 --> 00:07:51,100
had

170
00:07:51,100 --> 00:07:54,790
available in front of me and I'm not I

171
00:07:54,790 --> 00:07:57,490
don't really consider myself and like an

172
00:07:57,490 --> 00:08:00,760
OSX or a Mac experts so I feel a little

173
00:08:00,760 --> 00:08:03,460
bit out of place but I hope that this is

174
00:08:03,460 --> 00:08:05,680
something that still is interesting and

175
00:08:05,680 --> 00:08:07,180
you know I definitely have had a lot of

176
00:08:07,180 --> 00:08:09,250
sort of joy going through this process

177
00:08:09,250 --> 00:08:12,990
and definitely learned a lot about OSX

178
00:08:12,990 --> 00:08:16,870
so when I started looking at this screen

179
00:08:16,870 --> 00:08:19,480
capture is the thing that kind of you

180
00:08:19,480 --> 00:08:21,160
know is the most obvious starting point

181
00:08:21,160 --> 00:08:22,960
that's the thing that does screen

182
00:08:22,960 --> 00:08:27,250
capturing on OS X and it's a utility

183
00:08:27,250 --> 00:08:30,460
that is sort of in this has been

184
00:08:30,460 --> 00:08:32,169
directory so clearly somebody saw that

185
00:08:32,169 --> 00:08:34,000
it's it's kind of administrative purpose

186
00:08:34,000 --> 00:08:35,710
utility and that's the utility that gets

187
00:08:35,710 --> 00:08:39,789
executed by you know the UI when you

188
00:08:39,789 --> 00:08:41,500
press the special key combination take a

189
00:08:41,500 --> 00:08:44,200
screenshot so for example if I if I talk

190
00:08:44,200 --> 00:08:45,960
to someone's like I often just say

191
00:08:45,960 --> 00:08:48,310
command shift for to select the thing

192
00:08:48,310 --> 00:08:50,080
that I want I'm talking about inside of

193
00:08:50,080 --> 00:08:52,180
them and and behind the scenes the

194
00:08:52,180 --> 00:08:53,650
screen capture it cos it gets called so

195
00:08:53,650 --> 00:08:55,480
I wanted to look closer into what's

196
00:08:55,480 --> 00:08:57,340
going on behind the scenes so I started

197
00:08:57,340 --> 00:08:59,290
reverse-engineering it I saw that it

198
00:08:59,290 --> 00:09:00,940
doesn't have any special permissions

199
00:09:00,940 --> 00:09:03,820
even though someone thought it was for

200
00:09:03,820 --> 00:09:05,200
administrative purposes there is no

201
00:09:05,200 --> 00:09:08,020
entitlements to speak of it's just it

202
00:09:08,020 --> 00:09:11,380
just functions it just does its thing if

203
00:09:11,380 --> 00:09:13,060
you do some reverse engineering on it

204
00:09:13,060 --> 00:09:15,190
you can see that it actually shares a

205
00:09:15,190 --> 00:09:17,800
library with the Windows Server and most

206
00:09:17,800 --> 00:09:19,480
of the functionality happens within that

207
00:09:19,480 --> 00:09:20,920
library and so the screen capture

208
00:09:20,920 --> 00:09:22,960
utility is actually just you can say

209
00:09:22,960 --> 00:09:26,550
like a client or shell for that library

210
00:09:26,550 --> 00:09:29,200
kind of jumping a little bit ahead you

211
00:09:29,200 --> 00:09:31,270
have this mechanism of the client and

212
00:09:31,270 --> 00:09:32,830
server interaction with the Windows

213
00:09:32,830 --> 00:09:36,460
Server and to capture the actual pixels

214
00:09:36,460 --> 00:09:38,770
from the screen the utility calls a

215
00:09:38,770 --> 00:09:41,550
function called capture desktop which is

216
00:09:41,550 --> 00:09:43,900
implemented by the skylight library and

217
00:09:43,900 --> 00:09:45,310
then there is a corresponding

218
00:09:45,310 --> 00:09:47,680
server-side function called capture

219
00:09:47,680 --> 00:09:50,950
desktop with some different prefixes to

220
00:09:50,950 --> 00:09:55,270
actually execute that functionality so

221
00:09:55,270 --> 00:09:56,380
if you kind of look at a little bit

222
00:09:56,380 --> 00:10:00,220
deeper we know that our sex is kind of

223
00:10:00,220 --> 00:10:01,750
like this two-phase kernel so

224
00:10:01,750 --> 00:10:03,189
the POSIX interface and it's got the

225
00:10:03,189 --> 00:10:06,069
mock interface not a lot of people will

226
00:10:06,069 --> 00:10:08,589
use mock interface in sort of the raw

227
00:10:08,589 --> 00:10:11,470
state you know it's usually used as part

228
00:10:11,470 --> 00:10:13,870
of an part of like you know like a mega

229
00:10:13,870 --> 00:10:15,910
interface for example it's generated by

230
00:10:15,910 --> 00:10:19,149
a compiler and so there's a lot of

231
00:10:19,149 --> 00:10:21,519
interesting stuff going on there and and

232
00:10:21,519 --> 00:10:23,560
here we can see that the skylight

233
00:10:23,560 --> 00:10:26,199
library actually uses the mock interface

234
00:10:26,199 --> 00:10:29,230
to communicate to itself through this

235
00:10:29,230 --> 00:10:31,449
client-server interaction so the

236
00:10:31,449 --> 00:10:34,000
skylight library runs within the Windows

237
00:10:34,000 --> 00:10:35,829
Server and within the screen capture

238
00:10:35,829 --> 00:10:37,629
utility and then it makes a connection

239
00:10:37,629 --> 00:10:39,670
and then kind of the code runs within

240
00:10:39,670 --> 00:10:43,660
the same codebase and we can see that

241
00:10:43,660 --> 00:10:45,939
there are three different subsystems and

242
00:10:45,939 --> 00:10:48,399
they all kind of interact with the

243
00:10:48,399 --> 00:10:51,310
client to perform the functionality and

244
00:10:51,310 --> 00:10:54,910
there's this capture desktop is one of

245
00:10:54,910 --> 00:10:56,819
the handlers for a message within this

246
00:10:56,819 --> 00:11:00,370
interface and there is a you know for

247
00:11:00,370 --> 00:11:01,209
those that haven't done this before

248
00:11:01,209 --> 00:11:04,329
there's a cool sort of writers guide

249
00:11:04,329 --> 00:11:06,550
that can help to implement the stuff on

250
00:11:06,550 --> 00:11:12,100
your own so on the high level this is

251
00:11:12,100 --> 00:11:16,629
kind of what the sequence of events this

252
00:11:16,629 --> 00:11:18,100
is what the sequence of events looks

253
00:11:18,100 --> 00:11:21,220
like first it does a little bootstrap

254
00:11:21,220 --> 00:11:23,800
bootstrap lookup for the Windows server

255
00:11:23,800 --> 00:11:26,470
so it looks specifically for a port that

256
00:11:26,470 --> 00:11:29,259
corresponds to name comm that Apple that

257
00:11:29,259 --> 00:11:31,329
windows server that active and that's

258
00:11:31,329 --> 00:11:32,920
what allows it to communicate to the

259
00:11:32,920 --> 00:11:37,540
service itself and basically at that

260
00:11:37,540 --> 00:11:40,449
point it's it has the connection it does

261
00:11:40,449 --> 00:11:42,730
this shutter sound so initially I

262
00:11:42,730 --> 00:11:44,589
thought this was a security feature it's

263
00:11:44,589 --> 00:11:48,430
not obviously not but it's it's sort of

264
00:11:48,430 --> 00:11:50,410
a way to indicate that hey a screen

265
00:11:50,410 --> 00:11:51,819
shots been taken you should be aware of

266
00:11:51,819 --> 00:11:55,209
that and then it just kind of ignores it

267
00:11:55,209 --> 00:11:57,819
it has no significance whatsoever the

268
00:11:57,819 --> 00:11:59,350
next thing that the screen capture does

269
00:11:59,350 --> 00:12:02,290
is it will look up it will contact on

270
00:12:02,290 --> 00:12:03,699
that port there it looked up through a

271
00:12:03,699 --> 00:12:06,129
bootstrap and it will request to

272
00:12:06,129 --> 00:12:07,720
communicate to the server so create a

273
00:12:07,720 --> 00:12:10,360
session I'll say hey Windows Server can

274
00:12:10,360 --> 00:12:12,160
I please talk to you and request some

275
00:12:12,160 --> 00:12:14,410
pixels now say sure talk to me on port

276
00:12:14,410 --> 00:12:16,600
number six and then a contact sport

277
00:12:16,600 --> 00:12:18,100
number six and says please give me all

278
00:12:18,100 --> 00:12:20,019
the pixels yeah no problem you will find

279
00:12:20,019 --> 00:12:21,670
those pixels in this shared object

280
00:12:21,670 --> 00:12:26,050
within my memory location and the screen

281
00:12:26,050 --> 00:12:28,269
capture you'll see it goes and calls a

282
00:12:28,269 --> 00:12:31,300
function called Mac VM map which will

283
00:12:31,300 --> 00:12:34,240
map a shared object from this Windows

284
00:12:34,240 --> 00:12:36,100
server into the screen capture utility

285
00:12:36,100 --> 00:12:37,569
download the pixels

286
00:12:37,569 --> 00:12:39,310
well quote-unquote download little will

287
00:12:39,310 --> 00:12:41,980
just read the pixels and code them into

288
00:12:41,980 --> 00:12:44,980
a PNG or other file type and then write

289
00:12:44,980 --> 00:12:48,430
them to disk or or clipboard so I did at

290
00:12:48,430 --> 00:12:49,810
this point like there's no actual

291
00:12:49,810 --> 00:12:51,970
security mechanism in place pretty much

292
00:12:51,970 --> 00:12:53,800
anything can do this as long as they

293
00:12:53,800 --> 00:12:57,610
know this API so delving a little bit

294
00:12:57,610 --> 00:13:00,100
deeper into the assembly of what's

295
00:13:00,100 --> 00:13:02,920
happening there I wanted to know how

296
00:13:02,920 --> 00:13:06,459
this MOC sort of mega interface is

297
00:13:06,459 --> 00:13:09,220
working and how how these steps

298
00:13:09,220 --> 00:13:11,019
translate into the low-level code and

299
00:13:11,019 --> 00:13:14,470
what I found is that there's a bunch of

300
00:13:14,470 --> 00:13:16,240
functions that call so here we can see

301
00:13:16,240 --> 00:13:18,610
it's looking it up using bootstrap so

302
00:13:18,610 --> 00:13:19,930
you can think of it as kind of like the

303
00:13:19,930 --> 00:13:23,079
DNS of mark interfaces I like to use

304
00:13:23,079 --> 00:13:26,589
things that I understand and so it looks

305
00:13:26,589 --> 00:13:28,750
at the port and then it creates a

306
00:13:28,750 --> 00:13:31,389
session to that port and so here we can

307
00:13:31,389 --> 00:13:34,269
see that is using a message seven four

308
00:13:34,269 --> 00:13:38,649
six eight to generate the request to

309
00:13:38,649 --> 00:13:41,560
connect to the server itself and then

310
00:13:41,560 --> 00:13:43,630
when it connects the server responds

311
00:13:43,630 --> 00:13:45,490
back with another such important says

312
00:13:45,490 --> 00:13:47,410
okay well the you've connected now you

313
00:13:47,410 --> 00:13:48,759
can use this other port to actually

314
00:13:48,759 --> 00:13:53,589
communicate to me once it made that

315
00:13:53,589 --> 00:13:57,370
connection it will make the actual pixel

316
00:13:57,370 --> 00:13:59,350
requests and here we can see that it

317
00:13:59,350 --> 00:14:02,410
creates a message called message number

318
00:14:02,410 --> 00:14:05,290
seven three two a which will actually

319
00:14:05,290 --> 00:14:07,779
make that request for give me the

320
00:14:07,779 --> 00:14:10,750
contents of the screen but it sends

321
00:14:10,750 --> 00:14:12,339
certain parameters so it sends the

322
00:14:12,339 --> 00:14:13,930
rectangle of where you want to capture

323
00:14:13,930 --> 00:14:16,269
the pixel so you can see it starts at

324
00:14:16,269 --> 00:14:18,519
zero zero and goes thousand twenty four

325
00:14:18,519 --> 00:14:19,310
to 760

326
00:14:19,310 --> 00:14:22,700
it's kind of like grabs that small small

327
00:14:22,700 --> 00:14:24,770
rectangle of pixels and you also have to

328
00:14:24,770 --> 00:14:27,200
supply the display ID so that's that's

329
00:14:27,200 --> 00:14:29,330
an internal number that frankly I've

330
00:14:29,330 --> 00:14:32,870
never seen change in my my testing and

331
00:14:32,870 --> 00:14:34,490
I've plugged in different displays I've

332
00:14:34,490 --> 00:14:38,029
used VMware so you can kind of use it as

333
00:14:38,029 --> 00:14:41,870
a way to identify same machines if you

334
00:14:41,870 --> 00:14:43,570
let's say if you're a malicious actor

335
00:14:43,570 --> 00:14:47,270
hopping around and you have to pass in

336
00:14:47,270 --> 00:14:48,830
this parameter which I haven't figured

337
00:14:48,830 --> 00:14:51,200
out where was just you can I have to put

338
00:14:51,200 --> 00:14:52,880
that number in there and and now it

339
00:14:52,880 --> 00:14:55,640
works and so once that request is

340
00:14:55,640 --> 00:14:57,560
fulfilled it comes back with information

341
00:14:57,560 --> 00:15:00,380
about what is the actual object number

342
00:15:00,380 --> 00:15:03,050
for a shared object between these two

343
00:15:03,050 --> 00:15:06,230
processes and then it uses the VM map to

344
00:15:06,230 --> 00:15:09,020
actually share the map that object onto

345
00:15:09,020 --> 00:15:14,420
the local process so cool so going

346
00:15:14,420 --> 00:15:16,029
through this reverse engineering process

347
00:15:16,029 --> 00:15:18,380
I've kind of reconstructed the most

348
00:15:18,380 --> 00:15:21,140
minimal form using API to do screen

349
00:15:21,140 --> 00:15:23,089
capture screen capturing for all the

350
00:15:23,089 --> 00:15:26,360
screens on the display or connected to

351
00:15:26,360 --> 00:15:28,700
the system and basically what you do is

352
00:15:28,700 --> 00:15:31,880
you say CG get active display list

353
00:15:31,880 --> 00:15:33,620
it gives you all the IDS that you

354
00:15:33,620 --> 00:15:37,790
required to to make requests to and this

355
00:15:37,790 --> 00:15:40,130
will include pretty much every display

356
00:15:40,130 --> 00:15:41,960
that's connected so if I have one that's

357
00:15:41,960 --> 00:15:43,790
on a laptop an external display it'll

358
00:15:43,790 --> 00:15:47,420
kind of list them all in there next you

359
00:15:47,420 --> 00:15:49,370
just iterate and you say I want the

360
00:15:49,370 --> 00:15:51,080
image for every one of those displays

361
00:15:51,080 --> 00:15:53,570
you call the function CG display create

362
00:15:53,570 --> 00:15:55,910
image and then it will send that it will

363
00:15:55,910 --> 00:15:57,260
send those pixels back to you you can

364
00:15:57,260 --> 00:15:59,300
encode them and either upload them

365
00:15:59,300 --> 00:16:01,390
somewhere or store it on the file system

366
00:16:01,390 --> 00:16:03,860
so that's kind of you know if I was

367
00:16:03,860 --> 00:16:06,530
building malware this is kind of the

368
00:16:06,530 --> 00:16:07,880
function I would use to do that because

369
00:16:07,880 --> 00:16:10,640
obviously I can control the api's and I

370
00:16:10,640 --> 00:16:13,640
don't have to rely on Apple not to force

371
00:16:13,640 --> 00:16:15,800
things like shutter sound or any other

372
00:16:15,800 --> 00:16:16,940
properties that might come with the

373
00:16:16,940 --> 00:16:22,279
capture utility as I was doing this work

374
00:16:22,279 --> 00:16:25,520
I wanted to kind of understand better

375
00:16:25,520 --> 00:16:27,800
how this interaction goes between the

376
00:16:27,800 --> 00:16:28,700
client and the server

377
00:16:28,700 --> 00:16:31,680
and if you've ever tried to kind of

378
00:16:31,680 --> 00:16:33,870
sniff mock messages you know it can be a

379
00:16:33,870 --> 00:16:35,430
laborious task because there's so many

380
00:16:35,430 --> 00:16:36,779
different messages going through for all

381
00:16:36,779 --> 00:16:39,420
kinds of different purposes and so I

382
00:16:39,420 --> 00:16:42,750
kind of co-opted a utility written by

383
00:16:42,750 --> 00:16:48,230
Jonathan 11 to capture those particular

384
00:16:48,230 --> 00:16:50,520
messages right so you can see here I

385
00:16:50,520 --> 00:16:53,160
used function interposition which

386
00:16:53,160 --> 00:16:56,399
essentially means that I I can inject a

387
00:16:56,399 --> 00:16:58,830
dialogue into the process and then the

388
00:16:58,830 --> 00:17:01,320
linker will actually force my functions

389
00:17:01,320 --> 00:17:03,600
to be proxies for those real functions

390
00:17:03,600 --> 00:17:06,809
so I proxied bootstrap lookup mock

391
00:17:06,809 --> 00:17:08,459
message and mock message overrides in

392
00:17:08,459 --> 00:17:10,770
order to see what the messages are

393
00:17:10,770 --> 00:17:12,869
between the client and the server and so

394
00:17:12,869 --> 00:17:16,650
having this smaller version of the

395
00:17:16,650 --> 00:17:19,319
capture utility it was a lot easier to

396
00:17:19,319 --> 00:17:20,640
hone down on the particular messages

397
00:17:20,640 --> 00:17:22,829
associate with this functionality they

398
00:17:22,829 --> 00:17:23,970
were still like thousands of messages

399
00:17:23,970 --> 00:17:25,679
going back and forth but it was easier

400
00:17:25,679 --> 00:17:31,320
to look at this alright so kind of

401
00:17:31,320 --> 00:17:34,230
wrapping it all up the way it's worked

402
00:17:34,230 --> 00:17:35,790
out is that the sequence of events is

403
00:17:35,790 --> 00:17:38,400
something like this you have message

404
00:17:38,400 --> 00:17:40,740
seven one five two which starts the

405
00:17:40,740 --> 00:17:43,230
session then you have seven one four

406
00:17:43,230 --> 00:17:45,720
eight which tests the connection so as I

407
00:17:45,720 --> 00:17:47,820
mentioned a lot of these big interfaces

408
00:17:47,820 --> 00:17:51,140
are actually compiler generated and so

409
00:17:51,140 --> 00:17:53,850
they have to be completely aligned with

410
00:17:53,850 --> 00:17:55,530
their versioning otherwise there could

411
00:17:55,530 --> 00:17:57,450
be a lot of problems because you have

412
00:17:57,450 --> 00:18:00,179
structures flying back and forth and so

413
00:18:00,179 --> 00:18:02,010
in this case it just says okay is this

414
00:18:02,010 --> 00:18:02,850
version correct

415
00:18:02,850 --> 00:18:06,630
if so then let's move on the next one is

416
00:18:06,630 --> 00:18:09,929
seven four five seven four seven five

417
00:18:09,929 --> 00:18:11,760
which gets the display state and that's

418
00:18:11,760 --> 00:18:13,320
that that's the message that actually

419
00:18:13,320 --> 00:18:17,059
lists all the IDs associated with the

420
00:18:17,059 --> 00:18:20,370
displays connected to the system then

421
00:18:20,370 --> 00:18:22,110
you have seven four six eight which does

422
00:18:22,110 --> 00:18:24,270
the secondary session which not entirely

423
00:18:24,270 --> 00:18:25,800
sure why you have the two sessions but

424
00:18:25,800 --> 00:18:27,990
it's in there and then you have seven

425
00:18:27,990 --> 00:18:29,490
three two a which is the actual request

426
00:18:29,490 --> 00:18:32,940
for those pixels in the end once the

427
00:18:32,940 --> 00:18:34,620
messages go through it does the mapping

428
00:18:34,620 --> 00:18:38,460
and encodes the pixels and those were

429
00:18:38,460 --> 00:18:39,780
having the various things it wants to do

430
00:18:39,780 --> 00:18:43,770
with it as I was doing this research I

431
00:18:43,770 --> 00:18:44,950
found that this

432
00:18:44,950 --> 00:18:47,170
something that other people have looked

433
00:18:47,170 --> 00:18:50,290
at as well there was a blog post that

434
00:18:50,290 --> 00:18:53,110
talked about CG window lists create

435
00:18:53,110 --> 00:18:55,030
image that does essentially the same

436
00:18:55,030 --> 00:18:58,150
thing and they've actually reported this

437
00:18:58,150 --> 00:18:59,770
to Apple so you can see there is a issue

438
00:18:59,770 --> 00:19:02,680
ID in place and I'm hoping that Apple

439
00:19:02,680 --> 00:19:04,570
will eventually fix those stuff because

440
00:19:04,570 --> 00:19:07,660
it seems like it's important all right

441
00:19:07,660 --> 00:19:10,390
so we kind of seen some of the low-level

442
00:19:10,390 --> 00:19:12,280
interfaces how to make this a little bit

443
00:19:12,280 --> 00:19:16,210
better and what is the actual impact of

444
00:19:16,210 --> 00:19:18,100
this right so I was wondering what

445
00:19:18,100 --> 00:19:20,470
happens with the different send boxes

446
00:19:20,470 --> 00:19:22,270
because clearly they're there to men to

447
00:19:22,270 --> 00:19:24,370
protect us and I always think of a

448
00:19:24,370 --> 00:19:28,120
sandbox as you know the execution is

449
00:19:28,120 --> 00:19:29,950
limited to that particular window which

450
00:19:29,950 --> 00:19:31,780
is not entirely correct thinking but

451
00:19:31,780 --> 00:19:33,040
that's kind of how you want to think

452
00:19:33,040 --> 00:19:35,440
about this in this case that's not how

453
00:19:35,440 --> 00:19:38,440
it works so I built a little demo where

454
00:19:38,440 --> 00:19:42,490
we can see if you build a utility using

455
00:19:42,490 --> 00:19:44,950
the cocoa framework and take some

456
00:19:44,950 --> 00:19:47,860
screenshots it will take the pixels of

457
00:19:47,860 --> 00:19:49,720
the entire screen and not even complain

458
00:19:49,720 --> 00:19:54,700
about it so here we go we can see it

459
00:19:54,700 --> 00:20:00,460
took all of the pixels on the screen if

460
00:20:00,460 --> 00:20:02,890
you can see on on this side this is

461
00:20:02,890 --> 00:20:06,760
where the app sandbox definition is is

462
00:20:06,760 --> 00:20:09,280
happening the only thing I changed is

463
00:20:09,280 --> 00:20:11,530
this download folder permission where I

464
00:20:11,530 --> 00:20:13,060
allowed it to write to the download

465
00:20:13,060 --> 00:20:14,470
folder so that I can essentially do the

466
00:20:14,470 --> 00:20:16,750
demo all the other permissions are

467
00:20:16,750 --> 00:20:18,640
completely turned off and so essentially

468
00:20:18,640 --> 00:20:20,230
what this means is that if you download

469
00:20:20,230 --> 00:20:23,290
an app from the app store it's gonna

470
00:20:23,290 --> 00:20:24,910
have access to your entire screen and

471
00:20:24,910 --> 00:20:28,720
there's nothing you can do about it so I

472
00:20:28,720 --> 00:20:30,700
was wondering what are the actual other

473
00:20:30,700 --> 00:20:32,170
sandbox is out there I mean they all

474
00:20:32,170 --> 00:20:35,110
rely on the same you know Mac OS sandbox

475
00:20:35,110 --> 00:20:36,490
for the process but they have different

476
00:20:36,490 --> 00:20:39,430
definitions for what they do and in the

477
00:20:39,430 --> 00:20:42,400
end what happens is that the sandbox has

478
00:20:42,400 --> 00:20:44,760
to allow you to contact a Windows server

479
00:20:44,760 --> 00:20:46,809
in order in order to

480
00:20:46,809 --> 00:20:48,100
provide the fact this functionality to

481
00:20:48,100 --> 00:20:49,840
you now the reason for that is because

482
00:20:49,840 --> 00:20:51,820
you want to be able to actually create

483
00:20:51,820 --> 00:20:53,710
you know windows draw things on the

484
00:20:53,710 --> 00:20:55,419
screen and for that you need access to

485
00:20:55,419 --> 00:20:56,669
the Windows server

486
00:20:56,669 --> 00:20:58,509
unfortunately what also means that you

487
00:20:58,509 --> 00:21:00,249
get access to the entire Windows server

488
00:21:00,249 --> 00:21:03,129
and not just a subset of it and in this

489
00:21:03,129 --> 00:21:07,259
case what happens is that even though

490
00:21:07,259 --> 00:21:09,879
the port numbers could be slightly

491
00:21:09,879 --> 00:21:11,649
predictable you know they're within like

492
00:21:11,649 --> 00:21:14,200
low ranges of the numbers you can't

493
00:21:14,200 --> 00:21:15,519
actually brute force for it and this is

494
00:21:15,519 --> 00:21:17,320
one thing I found that's very cool about

495
00:21:17,320 --> 00:21:19,269
the sandbox itself is that unless you

496
00:21:19,269 --> 00:21:21,399
explicitly allow for a particular string

497
00:21:21,399 --> 00:21:24,340
to be looked up by by the bootstrap

498
00:21:24,340 --> 00:21:26,769
process you can't actually find that

499
00:21:26,769 --> 00:21:28,899
port by brute forcing for that number so

500
00:21:28,899 --> 00:21:31,659
it'll block those things altogether and

501
00:21:31,659 --> 00:21:33,970
I found that in chrome you have three

502
00:21:33,970 --> 00:21:37,749
processes that have access to this this

503
00:21:37,749 --> 00:21:39,279
Windows server you know you have this

504
00:21:39,279 --> 00:21:41,019
EDM process which does all the content

505
00:21:41,019 --> 00:21:44,200
decryption or decoding rendering which

506
00:21:44,200 --> 00:21:46,720
is very known for all kinds of buffer

507
00:21:46,720 --> 00:21:49,840
overflows and problems with decoding

508
00:21:49,840 --> 00:21:53,860
content from untrusted sources so if you

509
00:21:53,860 --> 00:21:55,509
can get shellcode to execute in one of

510
00:21:55,509 --> 00:21:57,669
those process then you're kind of in

511
00:21:57,669 --> 00:21:59,169
that awkward position because now you

512
00:21:59,169 --> 00:22:01,119
can have short code executing and

513
00:22:01,119 --> 00:22:04,330
looking for screen pixels from those

514
00:22:04,330 --> 00:22:08,440
processes the other ones were GPU to UI

515
00:22:08,440 --> 00:22:10,389
server interactions which you know you

516
00:22:10,389 --> 00:22:12,940
do need that kind of permission and you

517
00:22:12,940 --> 00:22:15,460
have the plugins which are actually also

518
00:22:15,460 --> 00:22:18,039
used by opera and develop browsers as

519
00:22:18,039 --> 00:22:21,369
well to sort of get that connection to

520
00:22:21,369 --> 00:22:24,730
the windows server cool so the other

521
00:22:24,730 --> 00:22:27,039
sandboxes I've looked at is a soft

522
00:22:27,039 --> 00:22:27,700
Firefox

523
00:22:27,700 --> 00:22:31,659
it has white wine plug-in sandbox I

524
00:22:31,659 --> 00:22:33,159
don't know what it is but it's some sort

525
00:22:33,159 --> 00:22:35,499
of a DRM mechanisms that's used by

526
00:22:35,499 --> 00:22:38,649
chromium and Android as well you have

527
00:22:38,649 --> 00:22:41,409
the Flash plugin which is obviously the

528
00:22:41,409 --> 00:22:43,090
safe mode where you want it to have

529
00:22:43,090 --> 00:22:45,249
access to the entire Windows server and

530
00:22:45,249 --> 00:22:47,740
flash has never had any sort of problems

531
00:22:47,740 --> 00:22:51,460
before in the past totally trusted the

532
00:22:51,460 --> 00:22:53,860
content sandbox so any any sort of

533
00:22:53,860 --> 00:22:55,269
content rendering happens in this

534
00:22:55,269 --> 00:22:56,870
process and this is where

535
00:22:56,870 --> 00:22:58,490
it has access to the Windows server so

536
00:22:58,490 --> 00:23:01,730
it's not necessarily like a bad thing I

537
00:23:01,730 --> 00:23:03,350
mean who knows what kind of stuff you

538
00:23:03,350 --> 00:23:05,870
can do in there but it's not necessarily

539
00:23:05,870 --> 00:23:08,750
comfortable for these sort of processes

540
00:23:08,750 --> 00:23:12,290
to be you know essentially in a position

541
00:23:12,290 --> 00:23:14,000
where they can read more screen than

542
00:23:14,000 --> 00:23:18,140
you'd like it to be able to and of

543
00:23:18,140 --> 00:23:20,030
course none of this requires a new 0

544
00:23:20,030 --> 00:23:21,800
days like you just have access to the

545
00:23:21,800 --> 00:23:24,290
Windows server and you just request the

546
00:23:24,290 --> 00:23:27,980
pixels from that point I've by looking

547
00:23:27,980 --> 00:23:29,990
at various on boxes I saw that

548
00:23:29,990 --> 00:23:32,679
gecko has this this positron

549
00:23:32,679 --> 00:23:35,080
experimental browser as well so it has

550
00:23:35,080 --> 00:23:38,300
certain things accessing the sandbox as

551
00:23:38,300 --> 00:23:42,650
well so the content process for example

552
00:23:42,650 --> 00:23:46,160
or the plug-in process as well so it's

553
00:23:46,160 --> 00:23:48,470
the stuff is out there of course WebKit

554
00:23:48,470 --> 00:23:50,480
it's got two processes that are allowed

555
00:23:50,480 --> 00:23:52,340
to access the Windows server it's the

556
00:23:52,340 --> 00:23:54,530
web process and the the plugin process

557
00:23:54,530 --> 00:23:57,130
clearly the two things that do the most

558
00:23:57,130 --> 00:24:00,740
benign benign type of type of processing

559
00:24:00,740 --> 00:24:04,850
parsing out there so it's kind of a kind

560
00:24:04,850 --> 00:24:07,040
of an issue that all these things have

561
00:24:07,040 --> 00:24:09,620
access to so much of the attack surface

562
00:24:09,620 --> 00:24:12,760
of the Windows server because clearly

563
00:24:12,760 --> 00:24:14,990
it's not necessarily something you'd

564
00:24:14,990 --> 00:24:17,780
want it to do for example I was able to

565
00:24:17,780 --> 00:24:20,890
use the utility I built a while back to

566
00:24:20,890 --> 00:24:23,660
build shell code to generate shell code

567
00:24:23,660 --> 00:24:26,840
to do this screen capture in about 9000

568
00:24:26,840 --> 00:24:29,450
bytes right I mean that's that's pretty

569
00:24:29,450 --> 00:24:30,620
large for shell code but you can

570
00:24:30,620 --> 00:24:34,280
probably make it smaller the only issue

571
00:24:34,280 --> 00:24:36,650
is that if you actually do this exploit

572
00:24:36,650 --> 00:24:39,800
can you get it to export those pixels

573
00:24:39,800 --> 00:24:41,450
somewhere else and and that's kind of an

574
00:24:41,450 --> 00:24:47,059
open question for me right now if you

575
00:24:47,059 --> 00:24:48,800
are building some industrial-grade

576
00:24:48,800 --> 00:24:51,620
malware or educational grade malware

577
00:24:51,620 --> 00:24:54,399
let's say

578
00:24:54,420 --> 00:24:57,390
you you may want to hone it in a little

579
00:24:57,390 --> 00:24:59,040
bit so one thing I discovered is that

580
00:24:59,040 --> 00:25:01,530
you can actually take screenshots of the

581
00:25:01,530 --> 00:25:03,990
touch bar and a new max I'm not entirely

582
00:25:03,990 --> 00:25:06,150
sure why you'd want to do that but the

583
00:25:06,150 --> 00:25:08,910
capability is there if you take the

584
00:25:08,910 --> 00:25:10,890
screenshot of the entire screen like for

585
00:25:10,890 --> 00:25:13,380
example the Mac Pro I have here that's

586
00:25:13,380 --> 00:25:15,750
about 1.4 megabytes of compressed data

587
00:25:15,750 --> 00:25:17,220
like you're not going to be compressing

588
00:25:17,220 --> 00:25:19,410
stuff in your short code maybe on the

589
00:25:19,410 --> 00:25:22,170
other hand you can figure out what the

590
00:25:22,170 --> 00:25:23,700
user is doing and can I have this

591
00:25:23,700 --> 00:25:26,220
targeted screen shot in capability in

592
00:25:26,220 --> 00:25:28,350
place so for example you can see when

593
00:25:28,350 --> 00:25:30,480
they're in chrome you know it tells you

594
00:25:30,480 --> 00:25:32,790
it's got a nice little logo or you can

595
00:25:32,790 --> 00:25:34,680
see when they're using sublime and

596
00:25:34,680 --> 00:25:36,090
they've got some secret documents open

597
00:25:36,090 --> 00:25:37,800
maybe that's something to pay attention

598
00:25:37,800 --> 00:25:40,710
to or if you have a system administrator

599
00:25:40,710 --> 00:25:42,630
and they're configuring the network you

600
00:25:42,630 --> 00:25:44,370
can see when the terminal is open so

601
00:25:44,370 --> 00:25:46,950
it's it's it's a way for you to be able

602
00:25:46,950 --> 00:25:48,930
to kind of more efficiently find time

603
00:25:48,930 --> 00:25:53,190
when to take the screenshots all right

604
00:25:53,190 --> 00:25:55,200
so that's cool so I mean we kind of had

605
00:25:55,200 --> 00:25:57,300
this exercise where we talked to I

606
00:25:57,300 --> 00:25:59,250
talked a lot about how to build better

607
00:25:59,250 --> 00:26:01,740
malware but what now where is out there

608
00:26:01,740 --> 00:26:03,290
that actually does the screen capturing

609
00:26:03,290 --> 00:26:06,600
and I didn't have access to virustotal

610
00:26:06,600 --> 00:26:10,350
and I won't say who was able to run

611
00:26:10,350 --> 00:26:16,350
things for me essentially I wanted to

612
00:26:16,350 --> 00:26:18,660
build a rule that would find as much

613
00:26:18,660 --> 00:26:20,280
malware as possible that could

614
00:26:20,280 --> 00:26:22,110
potentially have any of this capability

615
00:26:22,110 --> 00:26:23,730
out there so I looked for screen capture

616
00:26:23,730 --> 00:26:26,760
I looked for CG create image and I

617
00:26:26,760 --> 00:26:30,240
looked for the mock message message

618
00:26:30,240 --> 00:26:31,860
that's being sent to create this request

619
00:26:31,860 --> 00:26:33,510
I was really really hoping I would find

620
00:26:33,510 --> 00:26:35,790
some malware that was used in mock

621
00:26:35,790 --> 00:26:39,000
message directly but I didn't on the

622
00:26:39,000 --> 00:26:40,440
other hand I found plenty of the other

623
00:26:40,440 --> 00:26:43,950
ones and I found plenty of false alarms

624
00:26:43,950 --> 00:26:45,990
false positives as well I mean this was

625
00:26:45,990 --> 00:26:48,450
a pretty broad signature like I said I

626
00:26:48,450 --> 00:26:50,070
didn't have access so I only have one

627
00:26:50,070 --> 00:26:54,030
shot to do this I found that there were

628
00:26:54,030 --> 00:26:58,110
about 1100 samples matched most of those

629
00:26:58,110 --> 00:27:00,870
were people uploading the skylight

630
00:27:00,870 --> 00:27:04,360
library I don't know why they do

631
00:27:04,360 --> 00:27:07,630
a lot of those the ones that got flagged

632
00:27:07,630 --> 00:27:10,419
at least one AV flagged them there were

633
00:27:10,419 --> 00:27:12,190
about 15 samples and six of them were

634
00:27:12,190 --> 00:27:15,580
flagged by more than 180 so you know if

635
00:27:15,580 --> 00:27:16,720
you were if you're doing something a

636
00:27:16,720 --> 00:27:17,919
little bit more production you might

637
00:27:17,919 --> 00:27:21,100
want to hone in your gyro signatures but

638
00:27:21,100 --> 00:27:23,610
this was pretty good for this research

639
00:27:23,610 --> 00:27:25,809
kind of diverting a little bit this is

640
00:27:25,809 --> 00:27:28,480
again because I didn't have access to

641
00:27:28,480 --> 00:27:31,299
virustotal I wrote a script that

642
00:27:31,299 --> 00:27:34,000
essentially would download as many

643
00:27:34,000 --> 00:27:36,700
hashes as possible and give me reports

644
00:27:36,700 --> 00:27:38,559
on them now unfortunately if you don't

645
00:27:38,559 --> 00:27:40,809
have an account they will throttle you

646
00:27:40,809 --> 00:27:42,250
but the way they throttle use they will

647
00:27:42,250 --> 00:27:44,919
send you a zero content so instead of

648
00:27:44,919 --> 00:27:47,790
being slow they force you to be clever

649
00:27:47,790 --> 00:27:50,740
so if you I just posted it up there in

650
00:27:50,740 --> 00:27:52,179
case you want to reproduce any of this

651
00:27:52,179 --> 00:27:54,640
research and here's the script available

652
00:27:54,640 --> 00:27:59,950
for you so the first malware that III

653
00:27:59,950 --> 00:28:01,840
want to mention it's called mugs it's

654
00:28:01,840 --> 00:28:04,470
very popular here's here's a hash for it

655
00:28:04,470 --> 00:28:08,169
it uses the core graphics library which

656
00:28:08,169 --> 00:28:10,780
maps to the skylight library and it uses

657
00:28:10,780 --> 00:28:13,500
the Qt library to access that

658
00:28:13,500 --> 00:28:15,700
specifically it calls the function

659
00:28:15,700 --> 00:28:18,790
called grab window which essentially

660
00:28:18,790 --> 00:28:22,000
does abuse the same API well it uses the

661
00:28:22,000 --> 00:28:24,030
same API that I've mentioned before and

662
00:28:24,030 --> 00:28:26,530
it just scans through all the monitors

663
00:28:26,530 --> 00:28:28,929
and grab those pixels sends them back to

664
00:28:28,929 --> 00:28:31,960
the user in this case this malware the

665
00:28:31,960 --> 00:28:33,429
mocks malware will actually do that

666
00:28:33,429 --> 00:28:36,280
every 30 seconds presumably looking for

667
00:28:36,280 --> 00:28:38,740
something interesting I don't know what

668
00:28:38,740 --> 00:28:42,610
they did with that the other malware is

669
00:28:42,610 --> 00:28:45,400
called Mac's it uses a screen capture

670
00:28:45,400 --> 00:28:49,090
library or sorry utility it disables the

671
00:28:49,090 --> 00:28:50,950
shutter sound so makes it extra stealthy

672
00:28:50,950 --> 00:28:54,340
and it does this delay of 20 seconds

673
00:28:54,340 --> 00:28:56,350
which I found interesting I guess if you

674
00:28:56,350 --> 00:28:58,360
do discover that there is a screen

675
00:28:58,360 --> 00:29:00,130
capture that's been taken and there's a

676
00:29:00,130 --> 00:29:01,750
20 second delay maybe you could

677
00:29:01,750 --> 00:29:03,130
potentially blame it on something else

678
00:29:03,130 --> 00:29:05,190
because the correlation will be broken

679
00:29:05,190 --> 00:29:07,630
on the other hand it does take a lot of

680
00:29:07,630 --> 00:29:10,330
screenshots and dumps it into a Mac

681
00:29:10,330 --> 00:29:14,410
Mac Mac app folder which I assume looks

682
00:29:14,410 --> 00:29:19,179
kind of innocuous I mean if if a non

683
00:29:19,179 --> 00:29:20,950
text have a person looks that they

684
00:29:20,950 --> 00:29:23,290
wouldn't think twice about it I guess on

685
00:29:23,290 --> 00:29:24,340
the other hand they could be stealing

686
00:29:24,340 --> 00:29:26,800
some secret documents for like f-35

687
00:29:26,800 --> 00:29:30,730
design or something I don't know the

688
00:29:30,730 --> 00:29:33,850
third one is a black hole that one had a

689
00:29:33,850 --> 00:29:37,300
PPC version anyone have a Mac with

690
00:29:37,300 --> 00:29:40,450
PowerPC I I don't I don't know if anyone

691
00:29:40,450 --> 00:29:43,300
actually uses those anymore but kind of

692
00:29:43,300 --> 00:29:46,600
cool why not it it stores its screen

693
00:29:46,600 --> 00:29:50,740
captures in a hidden directory which is

694
00:29:50,740 --> 00:29:53,770
interesting because if you use the dot

695
00:29:53,770 --> 00:29:58,270
hidden directory the the finder what's

696
00:29:58,270 --> 00:29:59,980
called a file database it doesn't

697
00:29:59,980 --> 00:30:01,570
actually look in there so technically

698
00:30:01,570 --> 00:30:03,900
speaking it's more or less hidden

699
00:30:03,900 --> 00:30:06,730
however no one actually if you look at

700
00:30:06,730 --> 00:30:08,170
the reports out there on this malware no

701
00:30:08,170 --> 00:30:11,590
one actually does any work of analyzing

702
00:30:11,590 --> 00:30:13,450
or reinforcing to say that this has a

703
00:30:13,450 --> 00:30:16,630
screen capture capability it's probably

704
00:30:16,630 --> 00:30:18,130
not so significant that people want to

705
00:30:18,130 --> 00:30:19,929
report the net I don't know I feel like

706
00:30:19,929 --> 00:30:23,620
it's significant and finally there was

707
00:30:23,620 --> 00:30:27,190
this interesting malware not quite

708
00:30:27,190 --> 00:30:29,530
malware someone uploaded a virtual image

709
00:30:29,530 --> 00:30:32,740
I don't know why it I didn't find any

710
00:30:32,740 --> 00:30:34,630
like specific portions of the malware

711
00:30:34,630 --> 00:30:37,630
inside of it I think there might have

712
00:30:37,630 --> 00:30:39,250
been something like that but this is why

713
00:30:39,250 --> 00:30:43,000
it matched so it was just interesting

714
00:30:43,000 --> 00:30:45,880
that somebody would upload that more

715
00:30:45,880 --> 00:30:48,160
recently there was a report by Dark

716
00:30:48,160 --> 00:30:50,470
Matter at hack in a box that talked

717
00:30:50,470 --> 00:30:53,490
about there's this really advanced apt

718
00:30:53,490 --> 00:30:56,559
that had was attributed to certain

719
00:30:56,559 --> 00:31:00,520
actors and it had what's called a wind

720
00:31:00,520 --> 00:31:03,100
tape component to it which actually does

721
00:31:03,100 --> 00:31:06,910
backdoor screenshot taking if anybody

722
00:31:06,910 --> 00:31:08,710
has a sample of this I would like a copy

723
00:31:08,710 --> 00:31:13,670
place if not that's okay

724
00:31:13,670 --> 00:31:15,410
okay so there's some malware there's

725
00:31:15,410 --> 00:31:17,180
some mechanisms that we can use how do

726
00:31:17,180 --> 00:31:19,190
we actually find that this behavior

727
00:31:19,190 --> 00:31:22,220
exists on on your machine right this is

728
00:31:22,220 --> 00:31:24,020
kind of like the important part of well

729
00:31:24,020 --> 00:31:26,090
now we want to detect someone trying to

730
00:31:26,090 --> 00:31:29,210
steal pixels on your box so I thought

731
00:31:29,210 --> 00:31:30,680
okay there's some rudimentary ways you

732
00:31:30,680 --> 00:31:32,900
can do this like you can use MD find to

733
00:31:32,900 --> 00:31:34,760
find screenshots because if you use the

734
00:31:34,760 --> 00:31:37,040
screen capture utility as we saw many

735
00:31:37,040 --> 00:31:41,660
Mac while we're doing that utility we'll

736
00:31:41,660 --> 00:31:43,820
put on an attribute inside of the file

737
00:31:43,820 --> 00:31:47,660
saying that hey this is a screenshot now

738
00:31:47,660 --> 00:31:49,190
one of the problems with that is of

739
00:31:49,190 --> 00:31:51,740
course the files in a hidden directory

740
00:31:51,740 --> 00:31:54,860
well hidden will not be discovered by

741
00:31:54,860 --> 00:31:57,770
this on the other hand some malware it

742
00:31:57,770 --> 00:32:00,680
doesn't actually hide their files for

743
00:32:00,680 --> 00:32:02,810
some reason so I'm still not sure why

744
00:32:02,810 --> 00:32:04,670
any advanced malware would actually

745
00:32:04,670 --> 00:32:08,120
create files and have this sort of trail

746
00:32:08,120 --> 00:32:11,450
in place and have so much noise in the

747
00:32:11,450 --> 00:32:13,550
system but you know it's a way to kind

748
00:32:13,550 --> 00:32:18,130
of get like the bar raised a little bit

749
00:32:18,130 --> 00:32:21,370
some of the other ways you can do this

750
00:32:21,370 --> 00:32:25,340
you can try attaching like Frieda or

751
00:32:25,340 --> 00:32:27,050
DTrace to actually do some lightweight

752
00:32:27,050 --> 00:32:30,110
racing of the function execution so if

753
00:32:30,110 --> 00:32:33,590
someone does call the function capture

754
00:32:33,590 --> 00:32:35,870
desktop you know it will notify you it's

755
00:32:35,870 --> 00:32:37,970
not really a production great type of

756
00:32:37,970 --> 00:32:39,320
thing but you might be able to do it in

757
00:32:39,320 --> 00:32:41,210
your box unfortunately you do have to

758
00:32:41,210 --> 00:32:45,770
turn off sip for it because sip doesn't

759
00:32:45,770 --> 00:32:48,350
allow you to trace window server which

760
00:32:48,350 --> 00:32:50,180
is which is cool it's a little blunt but

761
00:32:50,180 --> 00:32:52,220
I mean that's a good capability to have

762
00:32:52,220 --> 00:32:56,150
if you if you do do this you can

763
00:32:56,150 --> 00:32:58,370
actually when you breakpoint on the

764
00:32:58,370 --> 00:33:01,730
caption display capture desktop function

765
00:33:01,730 --> 00:33:04,070
you can trace back to who actually made

766
00:33:04,070 --> 00:33:06,800
that request so one of the things sent

767
00:33:06,800 --> 00:33:09,230
to this function is a for a source port

768
00:33:09,230 --> 00:33:11,570
number and so using this source port

769
00:33:11,570 --> 00:33:14,840
number you can use utility like LS MP to

770
00:33:14,840 --> 00:33:20,020
lookup which which process actually

771
00:33:20,020 --> 00:33:23,180
requested this request into pixels and

772
00:33:23,180 --> 00:33:25,150
from there you potentially could

773
00:33:25,150 --> 00:33:27,040
well should this process actually be

774
00:33:27,040 --> 00:33:32,980
allowed to request screen captures cool

775
00:33:32,980 --> 00:33:35,710
so anything about defenses I mean this

776
00:33:35,710 --> 00:33:38,230
is kind of where it would be nice if

777
00:33:38,230 --> 00:33:40,510
Apple and introduced more features so

778
00:33:40,510 --> 00:33:43,420
this is kind of how I'd like to you know

779
00:33:43,420 --> 00:33:45,160
propose some functionality that will be

780
00:33:45,160 --> 00:33:48,190
nice to have so for example logging

781
00:33:48,190 --> 00:33:51,460
right we kind of mentioned some ways to

782
00:33:51,460 --> 00:33:53,500
trace the functionality of the things

783
00:33:53,500 --> 00:33:54,880
that get executed on the Windows Server

784
00:33:54,880 --> 00:33:57,130
it would be nice to have some limited

785
00:33:57,130 --> 00:33:59,410
way of logging the functions that get

786
00:33:59,410 --> 00:34:01,330
executed especially like key functions

787
00:34:01,330 --> 00:34:04,090
like screen capture in sip enabled

788
00:34:04,090 --> 00:34:06,610
processes so be nice to have like a

789
00:34:06,610 --> 00:34:08,469
pop-up that says hey by the way someone

790
00:34:08,469 --> 00:34:10,090
just requested a screen capture you know

791
00:34:10,090 --> 00:34:14,110
you should be notified of that another

792
00:34:14,110 --> 00:34:17,830
one kind of like a filter a firewall per

793
00:34:17,830 --> 00:34:22,149
se of types you know I might be able to

794
00:34:22,149 --> 00:34:27,550
say okay my media decoding process may

795
00:34:27,550 --> 00:34:30,129
have access to the windows server but

796
00:34:30,129 --> 00:34:31,929
maybe it shouldn't have access to this

797
00:34:31,929 --> 00:34:33,399
particular functionality of Windows

798
00:34:33,399 --> 00:34:35,139
Server you know maybe look for a

799
00:34:35,139 --> 00:34:39,040
particular type of message ID in the Mac

800
00:34:39,040 --> 00:34:41,168
interface and say deny that specific

801
00:34:41,168 --> 00:34:43,330
message ID I mean there is a lot of

802
00:34:43,330 --> 00:34:46,480
performance implications there but I

803
00:34:46,480 --> 00:34:49,300
feel like there is a way to find there's

804
00:34:49,300 --> 00:34:51,969
a way to find sort of a good balance

805
00:34:51,969 --> 00:34:53,889
where you can still filter things out

806
00:34:53,889 --> 00:34:55,540
and at the same time have these

807
00:34:55,540 --> 00:34:59,700
protections or have that performance

808
00:34:59,700 --> 00:35:02,980
finally it'd be nice if you can capture

809
00:35:02,980 --> 00:35:06,070
utilities required entitlements that's

810
00:35:06,070 --> 00:35:07,540
probably the more obvious way of doing

811
00:35:07,540 --> 00:35:09,790
this thing because none tellement allow

812
00:35:09,790 --> 00:35:12,010
you to have sign processes and enforce

813
00:35:12,010 --> 00:35:15,030
that's that unsigned processes do not

814
00:35:15,030 --> 00:35:19,000
request this functionality and in Mohave

815
00:35:19,000 --> 00:35:20,770
there's already a sort of a start on

816
00:35:20,770 --> 00:35:23,530
this like if if a processor requests

817
00:35:23,530 --> 00:35:25,480
access to the camera or the microphone

818
00:35:25,480 --> 00:35:27,100
like it'll alert you on that like it's

819
00:35:27,100 --> 00:35:29,410
pretty useful so why not include it

820
00:35:29,410 --> 00:35:30,970
screen capture into that same sort of

821
00:35:30,970 --> 00:35:33,210
category of features to alert users on

822
00:35:33,210 --> 00:35:36,500
so if there's anyone from Apple

823
00:35:36,500 --> 00:35:39,319
please take notes alright so in closing

824
00:35:39,319 --> 00:35:42,050
I hope you enjoy this I just want to

825
00:35:42,050 --> 00:35:43,670
mention some more about malware like the

826
00:35:43,670 --> 00:35:46,130
what I found interesting is that there's

827
00:35:46,130 --> 00:35:49,130
a lot of malware looking malware so they

828
00:35:49,130 --> 00:35:52,339
have debugging features they have lots

829
00:35:52,339 --> 00:35:56,300
of anti analysis features however the

830
00:35:56,300 --> 00:35:58,609
most sort of nefarious stuff the ones

831
00:35:58,609 --> 00:36:00,410
that are targeted to specific

832
00:36:00,410 --> 00:36:02,810
organization or a user etc they actually

833
00:36:02,810 --> 00:36:04,550
don't employ a lot of those techniques

834
00:36:04,550 --> 00:36:07,430
and so you kind of have to start looking

835
00:36:07,430 --> 00:36:10,010
at functionality as a whole as a way to

836
00:36:10,010 --> 00:36:13,819
say do I want this program or do I want

837
00:36:13,819 --> 00:36:15,290
these features to be available in the

838
00:36:15,290 --> 00:36:18,079
box and do I find that risky you know we

839
00:36:18,079 --> 00:36:20,089
had guys from digital yesterday talking

840
00:36:20,089 --> 00:36:22,490
about how you can build this game engine

841
00:36:22,490 --> 00:36:24,260
and say okay these are the rules for my

842
00:36:24,260 --> 00:36:27,170
machine if anything of those of those

843
00:36:27,170 --> 00:36:28,849
rules happens I want to be notified of

844
00:36:28,849 --> 00:36:33,470
that alright so in conclusion talked

845
00:36:33,470 --> 00:36:36,130
about pixel stealing hope you enjoy that

846
00:36:36,130 --> 00:36:38,990
and some some mark interfaces I find

847
00:36:38,990 --> 00:36:40,550
those things pretty fascinating because

848
00:36:40,550 --> 00:36:42,710
everyone kind of focuses on on POSIX

849
00:36:42,710 --> 00:36:44,119
interface when they're doing development

850
00:36:44,119 --> 00:36:47,319
but Markus is a huge target and some

851
00:36:47,319 --> 00:36:50,060
proposed mitigation so you know maybe

852
00:36:50,060 --> 00:36:51,800
afterwards we can chat about and you can

853
00:36:51,800 --> 00:36:53,839
tell me if I'm being crazy or these are

854
00:36:53,839 --> 00:36:57,079
actually viable options to protect with

855
00:36:57,079 --> 00:36:59,750
that thanks again and if you have any

856
00:36:59,750 --> 00:37:02,109
questions

857
00:37:04,940 --> 00:37:09,960
[Applause]

858
00:37:09,960 --> 00:37:14,020
of the mechanisms you propose which

859
00:37:14,020 --> 00:37:16,089
would be your preference

860
00:37:16,089 --> 00:37:21,099
someone who might write a tool to I I

861
00:37:21,099 --> 00:37:24,839
would say that this mechanism which oh

862
00:37:24,839 --> 00:37:28,420
sorry of the proposals that I made for

863
00:37:28,420 --> 00:37:31,060
the mitigations which ones are my

864
00:37:31,060 --> 00:37:33,190
favorite or preferred options for

865
00:37:33,190 --> 00:37:35,829
implementation by let's say a Mac

866
00:37:35,829 --> 00:37:39,700
security professional well you can't see

867
00:37:39,700 --> 00:37:42,849
it now but I think the the sandbox

868
00:37:42,849 --> 00:37:44,619
mechanism with entitlements is the most

869
00:37:44,619 --> 00:37:46,690
likely one to get implemented but I

870
00:37:46,690 --> 00:37:49,390
really like the option of the firewall

871
00:37:49,390 --> 00:37:51,280
because that's the one that has the most

872
00:37:51,280 --> 00:37:53,380
granular and controllable way of

873
00:37:53,380 --> 00:38:02,560
defining your protection I think it

874
00:38:02,560 --> 00:38:04,329
would have to be because otherwise how

875
00:38:04,329 --> 00:38:06,640
would you enforce that sorry the

876
00:38:06,640 --> 00:38:08,800
question is do you have to do this in

877
00:38:08,800 --> 00:38:10,450
the kernel or do you have to do this in

878
00:38:10,450 --> 00:38:12,040
the user space and I think that you have

879
00:38:12,040 --> 00:38:13,869
to do that in the kernel in order to

880
00:38:13,869 --> 00:38:16,150
enforce it and prevent malware from

881
00:38:16,150 --> 00:38:19,020
getting around it

882
00:39:00,160 --> 00:39:02,840
this is very cool I will not repeat that

883
00:39:02,840 --> 00:39:04,550
question you guys go and ask him but

884
00:39:04,550 --> 00:39:06,200
well there's a lot of interesting

885
00:39:06,200 --> 00:39:29,140
information can I get a copy of it sweet

886
00:39:29,140 --> 00:39:34,839
thank you yeah send it to me by email

887
00:39:35,080 --> 00:39:37,630
even better

888
00:39:37,630 --> 00:39:40,920
well thanks oh thanks for your attention

889
00:39:40,920 --> 00:39:48,479
[Applause]

