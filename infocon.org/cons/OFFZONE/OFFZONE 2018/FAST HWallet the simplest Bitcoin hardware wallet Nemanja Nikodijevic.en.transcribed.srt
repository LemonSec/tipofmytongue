1
00:00:05,050 --> 00:00:48,559
okay bitcoins about these new emerging

2
00:00:45,769 --> 00:00:50,030
disrupting technology but and everyone

3
00:00:48,559 --> 00:00:52,608
is suggesting that it's gonna cure

4
00:00:50,030 --> 00:00:56,749
cancer it can cure it's going to be the

5
00:00:52,609 --> 00:00:58,870
cure for every our problem but well yeah

6
00:00:56,749 --> 00:01:03,710
all the same people don't believe that

7
00:00:58,870 --> 00:01:08,360
and those who who were early adopters of

8
00:01:03,710 --> 00:01:10,340
this technology were of course initially

9
00:01:08,360 --> 00:01:14,060
using different software wallets to

10
00:01:10,340 --> 00:01:16,130
store their cryptocurrencies but as this

11
00:01:14,060 --> 00:01:21,230
this means of storing cryptocurrencies

12
00:01:16,130 --> 00:01:22,789
were not safe many of them went to to

13
00:01:21,230 --> 00:01:24,050
buy some of these Hardware wallets

14
00:01:22,790 --> 00:01:26,450
that were more secure for storing

15
00:01:24,050 --> 00:01:28,590
cryptocurrencies and let's see how these

16
00:01:26,450 --> 00:01:31,749
devices are built

17
00:01:28,590 --> 00:01:31,749
[Music]

18
00:01:35,030 --> 00:01:43,940
let's see so you all know probably about

19
00:01:39,500 --> 00:01:43,940
treasure and ledger two biggest ones

20
00:01:44,360 --> 00:01:50,370
okay now I'm gonna I guess yeah I didn't

21
00:01:48,030 --> 00:01:54,900
set it to mirror so I'm gonna have to

22
00:01:50,370 --> 00:01:56,910
look at this screen anyway let's see how

23
00:01:54,900 --> 00:02:00,600
these current Hardware wallets are built

24
00:01:56,910 --> 00:02:02,729
so treasure and its ripoff keep key use

25
00:02:00,600 --> 00:02:05,970
just one simple solution with one

26
00:02:02,730 --> 00:02:08,670
microcontroller that talks to to all

27
00:02:05,970 --> 00:02:10,590
that and that talks by a USB to to the

28
00:02:08,669 --> 00:02:12,019
computer and this microcontroller is

29
00:02:10,590 --> 00:02:14,370
just a normal off-the-shelf

30
00:02:12,020 --> 00:02:16,680
microcontroller that doesn't have any

31
00:02:14,370 --> 00:02:18,180
hardware acceleration for it doesn't

32
00:02:16,680 --> 00:02:19,950
have any true random number generator

33
00:02:18,180 --> 00:02:22,020
any hardware acceleration for the

34
00:02:19,950 --> 00:02:25,560
elliptic curve one would need for

35
00:02:22,020 --> 00:02:28,440
bitcoins or for for sha-256

36
00:02:25,560 --> 00:02:30,180
but since it's really simple it's it can

37
00:02:28,440 --> 00:02:33,600
be completely and it is completely open

38
00:02:30,180 --> 00:02:36,840
source and that makes it really cool for

39
00:02:33,600 --> 00:02:38,850
for people who are afraid that someone's

40
00:02:36,840 --> 00:02:40,860
gonna hide something in closed source

41
00:02:38,850 --> 00:02:43,410
code or that everything should be people

42
00:02:40,860 --> 00:02:44,940
who believe in open source people from

43
00:02:43,410 --> 00:02:47,970
the open source community whereas later

44
00:02:44,940 --> 00:02:52,620
for example it's built around the the

45
00:02:47,970 --> 00:02:57,510
secure also non secure MCU if the talks

46
00:02:52,620 --> 00:03:01,410
by USB to also and also to do it but it

47
00:02:57,510 --> 00:03:05,790
has also secured processor that is used

48
00:03:01,410 --> 00:03:09,359
for storing private keys and it is it is

49
00:03:05,790 --> 00:03:10,769
meant to be as a more secure option for

50
00:03:09,360 --> 00:03:14,430
hardware but just because he on the next

51
00:03:10,770 --> 00:03:16,520
slide why it wasn't but it has hardware

52
00:03:14,430 --> 00:03:20,700
acceleration for that microcontroller is

53
00:03:16,520 --> 00:03:22,950
unfortunately under an NDA so we cannot

54
00:03:20,700 --> 00:03:26,670
see the whole source code for for writer

55
00:03:22,950 --> 00:03:28,980
unfortunately but at least we can see

56
00:03:26,670 --> 00:03:29,619
everything related to the communication

57
00:03:28,980 --> 00:03:32,048
to the

58
00:03:29,620 --> 00:03:35,049
PC and to the communication to the Ola

59
00:03:32,049 --> 00:03:36,790
and communication to this other secure

60
00:03:35,049 --> 00:03:39,159
my control how the signing is done we

61
00:03:36,790 --> 00:03:41,260
cannot see that code unfortunately and

62
00:03:39,159 --> 00:03:42,370
there is a third solution that is out

63
00:03:41,260 --> 00:03:44,018
there it is really interesting

64
00:03:42,370 --> 00:03:47,260
instead of using secure mark controller

65
00:03:44,019 --> 00:03:50,530
using secure element so last time I

66
00:03:47,260 --> 00:03:52,510
checked this was in fact it was NDA was

67
00:03:50,530 --> 00:03:54,700
not required anymore for this secure

68
00:03:52,510 --> 00:03:56,828
element but a couple of months ago when

69
00:03:54,700 --> 00:04:00,159
I was started thinking about about this

70
00:03:56,829 --> 00:04:02,260
topic it was unfortunately still under

71
00:04:00,159 --> 00:04:03,160
NDA so I left it like this because when

72
00:04:02,260 --> 00:04:04,599
it was released

73
00:04:03,160 --> 00:04:07,299
you couldn't find all the documentation

74
00:04:04,599 --> 00:04:09,310
for this secure element but this secure

75
00:04:07,299 --> 00:04:11,709
element from all the things that one

76
00:04:09,310 --> 00:04:14,920
would need for for a secured Hardware

77
00:04:11,709 --> 00:04:16,209
wallet it doesn't have acceleration for

78
00:04:14,920 --> 00:04:16,779
it doesn't have to random number

79
00:04:16,209 --> 00:04:19,899
generator

80
00:04:16,779 --> 00:04:22,599
it only has acceleration for sha-256

81
00:04:19,899 --> 00:04:25,960
operation it has maybe the name might

82
00:04:22,600 --> 00:04:28,360
might fool you ECC but it has electic it

83
00:04:25,960 --> 00:04:31,690
supports elliptic curve operations in

84
00:04:28,360 --> 00:04:34,060
hardware but only for P 256 elliptic

85
00:04:31,690 --> 00:04:36,340
curve so we can forget about using it

86
00:04:34,060 --> 00:04:39,610
for the Bitcoin curve the couple

87
00:04:36,340 --> 00:04:42,130
intersect P 256 K 1 so but it can be

88
00:04:39,610 --> 00:04:44,530
completely open source on the other hand

89
00:04:42,130 --> 00:04:47,380
the solution that the time built this

90
00:04:44,530 --> 00:04:51,190
summer like for three months for as a

91
00:04:47,380 --> 00:04:53,349
sample project proof of concept I I

92
00:04:51,190 --> 00:04:55,690
wanted to see is it the only way to

93
00:04:53,349 --> 00:04:58,270
solve this problem so I thought having

94
00:04:55,690 --> 00:04:59,889
the story having a USB running on the

95
00:04:58,270 --> 00:05:02,260
microcontroller where one would store

96
00:04:59,889 --> 00:05:04,270
USB stack running on my control where

97
00:05:02,260 --> 00:05:06,400
one would store their cryptocurrencies

98
00:05:04,270 --> 00:05:09,969
and sign their cryptocurrencies like if

99
00:05:06,400 --> 00:05:11,770
you find a bug in the in the firmware

100
00:05:09,970 --> 00:05:16,449
which which is like huge

101
00:05:11,770 --> 00:05:18,389
usually drivers for for USB device then

102
00:05:16,449 --> 00:05:22,889
the complete security would be

103
00:05:18,389 --> 00:05:25,630
completely the whole security the ideas

104
00:05:22,889 --> 00:05:26,770
would fall apart so I found an

105
00:05:25,630 --> 00:05:30,610
interesting microcontroller which is

106
00:05:26,770 --> 00:05:33,010
when when I looked into microporous the

107
00:05:30,610 --> 00:05:34,389
only one for which I didn't leave an NDA

108
00:05:33,010 --> 00:05:36,940
and that had

109
00:05:34,389 --> 00:05:37,240
hardware acceleration for all the the

110
00:05:36,940 --> 00:05:40,690
three

111
00:05:37,240 --> 00:05:43,750
basic ingredients for signing for

112
00:05:40,690 --> 00:05:46,090
hardware signing Bitcoin transactions

113
00:05:43,750 --> 00:05:49,900
and thus it can be a fully open source

114
00:05:46,090 --> 00:05:52,960
and on the board I have talked by a

115
00:05:49,900 --> 00:05:54,400
serial value art to another

116
00:05:52,960 --> 00:05:55,448
microcontroller that is used for also

117
00:05:54,400 --> 00:05:57,460
programming it so I'm using just

118
00:05:55,449 --> 00:06:01,150
off-the-shelf port for this

119
00:05:57,460 --> 00:06:03,159
microcontroller and the communication my

120
00:06:01,150 --> 00:06:06,818
controller which is with the concept

121
00:06:03,160 --> 00:06:09,190
like this let's see how it measures it

122
00:06:06,819 --> 00:06:10,930
compares regarding the threat model to

123
00:06:09,190 --> 00:06:14,860
to other solutions that are already in

124
00:06:10,930 --> 00:06:16,449
the market so it not in the normal

125
00:06:14,860 --> 00:06:18,909
scenario people use Hardware wallets

126
00:06:16,449 --> 00:06:21,520
because they don't process software and

127
00:06:18,909 --> 00:06:25,630
your computer your computer can be

128
00:06:21,520 --> 00:06:27,130
hacked your we assume from the third

129
00:06:25,630 --> 00:06:28,630
people from the point of view that your

130
00:06:27,130 --> 00:06:31,150
computer is already is already hacked

131
00:06:28,630 --> 00:06:36,969
that's why people are migrating to these

132
00:06:31,150 --> 00:06:39,190
these solutions and as you can see if if

133
00:06:36,970 --> 00:06:42,340
there if there is a bug in your USB

134
00:06:39,190 --> 00:06:44,380
stack then one might be able to access

135
00:06:42,340 --> 00:06:46,060
and control the other microcontroller

136
00:06:44,380 --> 00:06:49,090
that is also controlling your all at and

137
00:06:46,060 --> 00:06:50,560
it can show you that you're signing this

138
00:06:49,090 --> 00:06:53,080
transaction whereas it would actually

139
00:06:50,560 --> 00:06:56,500
sound sign some other transaction and in

140
00:06:53,080 --> 00:06:59,620
fact there were some some buffer

141
00:06:56,500 --> 00:07:02,590
overflows and that were that were inside

142
00:06:59,620 --> 00:07:04,659
inside the USB stack for the for the

143
00:07:02,590 --> 00:07:06,729
treasure code that were patched and they

144
00:07:04,659 --> 00:07:09,870
have really nice blog where they talk

145
00:07:06,729 --> 00:07:13,030
about all of their vulnerabilities and

146
00:07:09,870 --> 00:07:16,060
how they fix them well if we have a

147
00:07:13,030 --> 00:07:19,179
secure MCU in the setup like later well

148
00:07:16,060 --> 00:07:21,430
I think this guy who broke their

149
00:07:19,180 --> 00:07:23,080
security model was just like 16 years

150
00:07:21,430 --> 00:07:26,229
old the guy from the UK which is a

151
00:07:23,080 --> 00:07:28,030
really really amazing job so in fact

152
00:07:26,229 --> 00:07:31,330
what they do they have the setup like

153
00:07:28,030 --> 00:07:35,250
this and the secure MCU is not just

154
00:07:31,330 --> 00:07:37,448
signing transactions but it's also

155
00:07:35,250 --> 00:07:37,770
verifying the firmware running on the

156
00:07:37,449 --> 00:07:41,550
main

157
00:07:37,770 --> 00:07:44,068
you so I guess you what you gonna think

158
00:07:41,550 --> 00:07:47,460
like what can probably go wrong well if

159
00:07:44,069 --> 00:07:49,319
you put some some wrong code on that

160
00:07:47,460 --> 00:07:52,020
microcontroller if you have you probably

161
00:07:49,319 --> 00:07:54,539
have some redundant code for for USB

162
00:07:52,020 --> 00:07:56,609
communication the bootloader and also in

163
00:07:54,539 --> 00:07:58,500
the in the firmware then what if you

164
00:07:56,610 --> 00:08:01,020
just if you have to when you have to

165
00:07:58,500 --> 00:08:02,400
send that that code for verification to

166
00:08:01,020 --> 00:08:03,840
the secure microcontroller you just

167
00:08:02,400 --> 00:08:05,429
resend something that is already there

168
00:08:03,840 --> 00:08:08,068
in the memory and then you can put

169
00:08:05,430 --> 00:08:10,319
whatever code you want in this reading

170
00:08:08,069 --> 00:08:12,479
the other redundant region so that that

171
00:08:10,319 --> 00:08:14,669
their security model is like if I would

172
00:08:12,479 --> 00:08:16,318
say that I have a twin brother that is

173
00:08:14,669 --> 00:08:19,169
gonna continue this presentation and if

174
00:08:16,319 --> 00:08:20,789
I just disappear and appear and say okay

175
00:08:19,169 --> 00:08:22,469
I'm his twin brother and you were

176
00:08:20,789 --> 00:08:23,969
supposed to believe me so that that is

177
00:08:22,470 --> 00:08:27,270
basically how their security model works

178
00:08:23,970 --> 00:08:29,819
but apparently they fix that I didn't

179
00:08:27,270 --> 00:08:33,750
check the details but it was already it

180
00:08:29,819 --> 00:08:35,370
totally looked bad enough for me there

181
00:08:33,750 --> 00:08:38,070
must have been some some simpler

182
00:08:35,370 --> 00:08:40,049
solution so if someone gains control of

183
00:08:38,070 --> 00:08:41,579
the all that then we see this is what

184
00:08:40,049 --> 00:08:44,069
this is the screen from from transfer

185
00:08:41,578 --> 00:08:47,339
from one of the one of the blog posts

186
00:08:44,070 --> 00:08:49,230
about their security and this is if we

187
00:08:47,339 --> 00:08:50,579
have a threat model like this where we

188
00:08:49,230 --> 00:08:53,190
have a communication microcontroller

189
00:08:50,579 --> 00:08:56,699
that can be even if you get if if that

190
00:08:53,190 --> 00:09:00,779
gets hacked we completely shut down that

191
00:08:56,700 --> 00:09:02,880
any possibility we shrink the door to

192
00:09:00,779 --> 00:09:04,649
for possible vulnerabilities on the

193
00:09:02,880 --> 00:09:06,000
other microcontroller and what is really

194
00:09:04,649 --> 00:09:10,500
cool is that this communication my

195
00:09:06,000 --> 00:09:12,390
controller can also use all other can be

196
00:09:10,500 --> 00:09:14,279
also used for example for Bluetooth or

197
00:09:12,390 --> 00:09:16,589
Wi-Fi for whatever and usually these

198
00:09:14,279 --> 00:09:19,920
tags are closed source so you don't have

199
00:09:16,589 --> 00:09:21,720
many open softwares that you usually

200
00:09:19,920 --> 00:09:23,430
have a library that does something like

201
00:09:21,720 --> 00:09:25,440
software device or something for

202
00:09:23,430 --> 00:09:27,329
Bluetooth low-energy and if you don't

203
00:09:25,440 --> 00:09:30,180
have control over that would you really

204
00:09:27,329 --> 00:09:32,640
trust a microcontroller that might refer

205
00:09:30,180 --> 00:09:34,599
to also do it also sign your transaction

206
00:09:32,640 --> 00:09:37,870
and store your keys well not really

207
00:09:34,600 --> 00:09:39,519
I wouldn't at least so that's why this

208
00:09:37,870 --> 00:09:41,290
is the solution even on even under these

209
00:09:39,519 --> 00:09:43,959
conditions even the under the assumption

210
00:09:41,290 --> 00:09:46,480
that whatever USB stack is running on it

211
00:09:43,959 --> 00:09:50,920
and if this my control gets exposed this

212
00:09:46,480 --> 00:09:52,209
will maintain its security so let's look

213
00:09:50,920 --> 00:09:55,360
at library dependencies of these

214
00:09:52,209 --> 00:09:56,800
projects so transfer and writer don't

215
00:09:55,360 --> 00:09:58,600
share and even though they share the

216
00:09:56,800 --> 00:10:01,420
same but the same horror platform they

217
00:09:58,600 --> 00:10:04,750
don't share any any of the libraries and

218
00:10:01,420 --> 00:10:07,229
this is just what these boxes means so

219
00:10:04,750 --> 00:10:10,300
the color coded white boxes are

220
00:10:07,230 --> 00:10:13,990
open-source parts of code and the orange

221
00:10:10,300 --> 00:10:15,910
boxes are third-party libraries so these

222
00:10:13,990 --> 00:10:17,769
are this is the code that was taken from

223
00:10:15,910 --> 00:10:20,620
from some other open source projects and

224
00:10:17,769 --> 00:10:22,540
just bundled with the rest of the source

225
00:10:20,620 --> 00:10:23,110
code and you can see these dark boxes

226
00:10:22,540 --> 00:10:26,290
there

227
00:10:23,110 --> 00:10:28,209
these are hidden parts of larger code

228
00:10:26,290 --> 00:10:30,459
that we are unfortunately unable to to

229
00:10:28,209 --> 00:10:32,979
to to completely see because the NDA for

230
00:10:30,459 --> 00:10:36,550
the secure microcontroller and there

231
00:10:32,980 --> 00:10:39,370
comes the the sidecar of tracer keep ki

232
00:10:36,550 --> 00:10:40,630
which basically reused all the basic

233
00:10:39,370 --> 00:10:43,689
VIPRE isn't they just wrote their own

234
00:10:40,630 --> 00:10:46,839
further and good folder part and code

235
00:10:43,689 --> 00:10:53,079
card that uses code from from all of

236
00:10:46,839 --> 00:10:56,920
them just just it combines all the the

237
00:10:53,079 --> 00:11:00,300
all the software stacks so let's see how

238
00:10:56,920 --> 00:11:03,160
they cover compare in the code size so I

239
00:11:00,300 --> 00:11:06,040
cloned all of their open source projects

240
00:11:03,160 --> 00:11:09,040
in in a directory and then looked for

241
00:11:06,040 --> 00:11:13,420
for the length of all the C and H files

242
00:11:09,040 --> 00:11:17,319
in their repositories in the former like

243
00:11:13,420 --> 00:11:19,599
former and libraries so-called card has

244
00:11:17,319 --> 00:11:22,389
2.5 million which is like just not

245
00:11:19,600 --> 00:11:25,180
everything is used but since they if you

246
00:11:22,389 --> 00:11:28,420
look in the previous slide they use

247
00:11:25,180 --> 00:11:31,390
micro Python that

248
00:11:28,420 --> 00:11:33,880
yeah because of that it's just code size

249
00:11:31,390 --> 00:11:35,740
roll because they did there is support

250
00:11:33,880 --> 00:11:38,710
for micro piping tool support for all

251
00:11:35,740 --> 00:11:40,330
the different microcontrollers but then

252
00:11:38,710 --> 00:11:42,820
comes the ledger so only the open source

253
00:11:40,330 --> 00:11:45,040
part is like around three hundred forty

254
00:11:42,820 --> 00:11:46,930
thousand lines of code and treasure and

255
00:11:45,040 --> 00:11:49,300
keep key they have as expected like

256
00:11:46,930 --> 00:11:53,229
around the same number of lines of code

257
00:11:49,300 --> 00:11:56,380
and the solution that I came up with

258
00:11:53,230 --> 00:11:57,520
this summer because I definitely apart

259
00:11:56,380 --> 00:11:59,260
from my work I didn't have enough time

260
00:11:57,520 --> 00:12:02,199
to write hundred twenty two lines of

261
00:11:59,260 --> 00:12:03,490
code so it only I only squeezed it into

262
00:12:02,200 --> 00:12:05,530
I could only squeeze it into four

263
00:12:03,490 --> 00:12:08,050
thousand lines of code and that is big I

264
00:12:05,530 --> 00:12:09,520
was using basically hardware

265
00:12:08,050 --> 00:12:12,699
acceleration for everything so I didn't

266
00:12:09,520 --> 00:12:14,530
have to to use like bunch of libraries

267
00:12:12,700 --> 00:12:17,290
that that other people wrote for many

268
00:12:14,530 --> 00:12:18,790
things and out of the four thousand

269
00:12:17,290 --> 00:12:24,099
lines of code only around two thousand

270
00:12:18,790 --> 00:12:27,250
is the actual meet the rest is just font

271
00:12:24,100 --> 00:12:28,870
for the old for display and licensed

272
00:12:27,250 --> 00:12:32,140
gathers of course majority because I had

273
00:12:28,870 --> 00:12:34,750
to put them in every file so you can

274
00:12:32,140 --> 00:12:37,420
find that on long get clap under this

275
00:12:34,750 --> 00:12:40,690
link and let's see how it's how this

276
00:12:37,420 --> 00:12:42,250
code is layered so of course the basic

277
00:12:40,690 --> 00:12:44,290
player all the core drivers I try to

278
00:12:42,250 --> 00:12:48,160
keep them as simple as possible so I

279
00:12:44,290 --> 00:12:50,110
didn't take any of the of the libraries

280
00:12:48,160 --> 00:12:52,150
that were that were already there for my

281
00:12:50,110 --> 00:12:54,880
controller but I had a look in that into

282
00:12:52,150 --> 00:12:58,270
them and I just simplified I used fix

283
00:12:54,880 --> 00:13:01,630
fixed numbers so I I couldn't choose a

284
00:12:58,270 --> 00:13:04,030
lot a lot like different speeds I didn't

285
00:13:01,630 --> 00:13:06,550
leave that into into the code because

286
00:13:04,030 --> 00:13:09,040
this is this way it's the code can be

287
00:13:06,550 --> 00:13:10,890
much much easier to audit and doesn't it

288
00:13:09,040 --> 00:13:14,829
doesn't depend on many other libraries

289
00:13:10,890 --> 00:13:16,510
and on the other hand I even don't use

290
00:13:14,830 --> 00:13:18,370
the standard library but I compile it

291
00:13:16,510 --> 00:13:23,920
with without even in the standard

292
00:13:18,370 --> 00:13:26,950
library so let's see the how this maps

293
00:13:23,920 --> 00:13:30,849
to the hardware so there is this you are

294
00:13:26,950 --> 00:13:33,130
side which which talks counter 50 kilo

295
00:13:30,850 --> 00:13:33,670
both linked to to the communications you

296
00:13:33,130 --> 00:13:37,420
whatever

297
00:13:33,670 --> 00:13:39,640
this and then there's the other SPI bus

298
00:13:37,420 --> 00:13:42,670
that controls the OLED which is fixed to

299
00:13:39,640 --> 00:13:45,430
one megahertz and for that I needed the

300
00:13:42,670 --> 00:13:47,170
SPI and GPIO models modules and on the

301
00:13:45,430 --> 00:13:50,050
other hand these are the three modules

302
00:13:47,170 --> 00:13:52,569
that are used for hardware acceleration

303
00:13:50,050 --> 00:13:54,339
for for signing Bitcoin transactions and

304
00:13:52,570 --> 00:13:56,560
here is it's color coded I don't know if

305
00:13:54,340 --> 00:13:59,470
you can easily see that this MMC IU is

306
00:13:56,560 --> 00:14:02,260
used for four sha-256 acceleration this

307
00:13:59,470 --> 00:14:05,410
LTC is used for actually performing

308
00:14:02,260 --> 00:14:09,670
ECDSA and I use two random number

309
00:14:05,410 --> 00:14:13,870
generator to generate a nonce that easy

310
00:14:09,670 --> 00:14:16,780
this is how it builds up so I basically

311
00:14:13,870 --> 00:14:18,850
wrapped it around certain layers so that

312
00:14:16,780 --> 00:14:21,010
packets and I could receive so that this

313
00:14:18,850 --> 00:14:23,890
in case I want to port it at some time

314
00:14:21,010 --> 00:14:26,410
to another platform I can just reuse

315
00:14:23,890 --> 00:14:30,580
this layer and just rewrite the whole

316
00:14:26,410 --> 00:14:32,860
bottom layer so for sending and sending

317
00:14:30,580 --> 00:14:35,080
these packets to my UART

318
00:14:32,860 --> 00:14:37,120
I have this simple structure type length

319
00:14:35,080 --> 00:14:40,030
value and of course CRC and there is

320
00:14:37,120 --> 00:14:41,940
also a CRC hardware acceleration for his

321
00:14:40,030 --> 00:14:44,530
microcontroller which is really cool

322
00:14:41,940 --> 00:14:46,090
then for the orbit I have just simple

323
00:14:44,530 --> 00:14:49,750
commands for like clearing the old and

324
00:14:46,090 --> 00:14:52,660
writing one one row of what month string

325
00:14:49,750 --> 00:14:55,480
in one row and for crypto it's a bit

326
00:14:52,660 --> 00:14:57,400
complex so I have to add lots of these

327
00:14:55,480 --> 00:15:02,380
functionalities because there is also

328
00:14:57,400 --> 00:15:05,439
when when you have when you do crypto

329
00:15:02,380 --> 00:15:07,600
operations on 256 bit numbers then you

330
00:15:05,440 --> 00:15:09,640
also need that the big name library

331
00:15:07,600 --> 00:15:12,040
these projects also used some big name

332
00:15:09,640 --> 00:15:15,580
libraries but I tried to use it in

333
00:15:12,040 --> 00:15:19,240
inherit write bignum library myself that

334
00:15:15,580 --> 00:15:22,420
uses hardware to accelerate these

335
00:15:19,240 --> 00:15:24,430
operations so I ended up with these

336
00:15:22,420 --> 00:15:26,800
functions and I had the problem because

337
00:15:24,430 --> 00:15:29,650
I needed for base 58 for Bitcoin

338
00:15:26,800 --> 00:15:32,469
addresses I for in order to have that

339
00:15:29,650 --> 00:15:35,890
conversion I needed to divide 256 bit

340
00:15:32,470 --> 00:15:38,740
number by 58 and that's that was that

341
00:15:35,890 --> 00:15:40,780
was the tricky part but what I came up

342
00:15:38,740 --> 00:15:43,030
with was that

343
00:15:40,780 --> 00:15:46,000
I could there is a hardware acceleration

344
00:15:43,030 --> 00:15:48,730
for calculating multiplicative model

345
00:15:46,000 --> 00:15:50,620
universe so I basically calculated the

346
00:15:48,730 --> 00:15:53,020
market multiplicative model inverse of

347
00:15:50,620 --> 00:15:56,440
the the number that I used for for

348
00:15:53,020 --> 00:16:00,069
dividing and then I just deducted the

349
00:15:56,440 --> 00:16:02,860
the remainder from from from the first

350
00:16:00,070 --> 00:16:05,440
number and then I just multiply these

351
00:16:02,860 --> 00:16:07,720
two numbers but in this set up and has

352
00:16:05,440 --> 00:16:10,210
to be a real in this word and has to be

353
00:16:07,720 --> 00:16:12,760
a huge prime number so because otherwise

354
00:16:10,210 --> 00:16:15,940
there it is not guaranteed that P is

355
00:16:12,760 --> 00:16:19,840
gonna have multiplicative inverse modulo

356
00:16:15,940 --> 00:16:23,440
so what I did I already had a huge large

357
00:16:19,840 --> 00:16:26,110
huge prime number in used for SEC P 256

358
00:16:23,440 --> 00:16:28,330
K one curve and I just reused that

359
00:16:26,110 --> 00:16:31,780
number for for this calculation and it

360
00:16:28,330 --> 00:16:35,740
worked in the main loop I basically just

361
00:16:31,780 --> 00:16:38,920
receive packets via UART and send them

362
00:16:35,740 --> 00:16:41,350
over to the last layer so if it's a

363
00:16:38,920 --> 00:16:43,750
packet for Bitcoin I just for the module

364
00:16:41,350 --> 00:16:46,360
for Bitcoin I just pass the whole the

365
00:16:43,750 --> 00:16:49,510
whole message into into that part of

366
00:16:46,360 --> 00:16:53,380
code as you can see here at the moment

367
00:16:49,510 --> 00:16:55,300
only Bitcoin is implemented but yeah

368
00:16:53,380 --> 00:16:57,250
then on this layer I part the other part

369
00:16:55,300 --> 00:16:59,290
with the function and then I get

370
00:16:57,250 --> 00:17:00,370
something like this on the screen would

371
00:16:59,290 --> 00:17:03,610
you like to sign it like would you like

372
00:17:00,370 --> 00:17:07,839
to send this amount of bitcoins to to

373
00:17:03,610 --> 00:17:12,240
some number to some address yeah

374
00:17:07,839 --> 00:17:12,240
demo time I can just get some water

375
00:17:44,870 --> 00:17:51,870
so can you speak in microphone noise yes

376
00:17:49,400 --> 00:17:53,610
it's a bit hard because I also have to

377
00:17:51,870 --> 00:17:56,729
control this never mind

378
00:17:53,610 --> 00:18:03,209
I'll try so I have to copy the address

379
00:17:56,730 --> 00:18:05,640
first so let's make a demo transaction

380
00:18:03,210 --> 00:18:08,220
I'm gonna just send from this account to

381
00:18:05,640 --> 00:18:10,790
that account the just some random

382
00:18:08,220 --> 00:18:14,490
bitcoins to prove that this works so

383
00:18:10,790 --> 00:18:15,780
let's scroll down let's create a new

384
00:18:14,490 --> 00:18:27,150
transaction

385
00:18:15,780 --> 00:18:29,220
let's send Satoshi to that address so

386
00:18:27,150 --> 00:18:31,800
now it's sending inputs and outputs to

387
00:18:29,220 --> 00:18:33,810
the screen and now I mean you cannot see

388
00:18:31,800 --> 00:18:39,899
the screen but they are here I have to

389
00:18:33,810 --> 00:18:42,480
confirm the transaction and now it

390
00:18:39,900 --> 00:18:44,910
should show me if I ask me if I want to

391
00:18:42,480 --> 00:18:50,480
submit the transaction and let's do that

392
00:18:44,910 --> 00:18:56,940
let's say yes so it's actually submitted

393
00:18:50,480 --> 00:19:03,270
you go to this link now let's see if

394
00:18:56,940 --> 00:19:06,540
it's already visible yeah unconfirmed

395
00:19:03,270 --> 00:19:11,870
transaction so it's I managed to sign a

396
00:19:06,540 --> 00:19:11,870
transaction on this harbor and it's a

397
00:19:16,910 --> 00:19:20,390
simple way for this

398
00:19:25,260 --> 00:19:30,149
bla bla bla bla bla bla bla bla

399
00:19:35,320 --> 00:19:41,740
okay can it be even simpler yes doing

400
00:19:39,940 --> 00:19:43,540
preparation for this presentation I

401
00:19:41,740 --> 00:19:44,710
found out that there is even another

402
00:19:43,540 --> 00:19:46,810
version simpler version of this

403
00:19:44,710 --> 00:19:49,060
microcontroller that uses that has

404
00:19:46,810 --> 00:19:54,190
cortex m0 and almost the same

405
00:19:49,060 --> 00:19:57,490
peripherals so but one one one module

406
00:19:54,190 --> 00:19:59,200
that is used for for ECDSA can also do

407
00:19:57,490 --> 00:20:01,300
shaft 256 so there is there is one

408
00:19:59,200 --> 00:20:04,450
module less there is less code also for

409
00:20:01,300 --> 00:20:06,960
that so then it looks the codes codes

410
00:20:04,450 --> 00:20:12,240
layers called stack would look like this

411
00:20:06,960 --> 00:20:15,180
and can it also be more secure yeah but

412
00:20:12,240 --> 00:20:16,900
so there is there are different

413
00:20:15,180 --> 00:20:20,500
microcontrollers in within the same

414
00:20:16,900 --> 00:20:23,260
family that support that our tempers

415
00:20:20,500 --> 00:20:24,790
support some functions to make it

416
00:20:23,260 --> 00:20:26,980
functionality to make it tamper

417
00:20:24,790 --> 00:20:30,370
resistant but unfortunately they come

418
00:20:26,980 --> 00:20:32,140
when an NDA so not cool so I didn't use

419
00:20:30,370 --> 00:20:33,939
that because I really want this to be to

420
00:20:32,140 --> 00:20:36,910
be completely completely completely open

421
00:20:33,940 --> 00:20:39,940
so that everyone can build this this

422
00:20:36,910 --> 00:20:44,560
himself like I don't I don't plan to to

423
00:20:39,940 --> 00:20:46,260
commercialize this and I just wanted to

424
00:20:44,560 --> 00:20:49,750
prove that there is a way to make

425
00:20:46,260 --> 00:20:51,160
simpler and safer quality in theory and

426
00:20:49,750 --> 00:20:53,560
then the ones that are already out there

427
00:20:51,160 --> 00:20:57,100
so it's expanding functionality I plan

428
00:20:53,560 --> 00:21:00,550
to add recovery seed so just to be a bit

429
00:20:57,100 --> 00:21:02,320
faster there is this child key

430
00:21:00,550 --> 00:21:04,330
derivation function that is defined

431
00:21:02,320 --> 00:21:06,610
within one of these Bitcoin

432
00:21:04,330 --> 00:21:09,610
implementation proposals so what I need

433
00:21:06,610 --> 00:21:13,360
to add for this is sha-512 unfortunately

434
00:21:09,610 --> 00:21:15,939
I have tried it in software so then I

435
00:21:13,360 --> 00:21:17,439
will I will probably just rely on some

436
00:21:15,940 --> 00:21:19,120
of these libraries that are already out

437
00:21:17,440 --> 00:21:24,030
there but then still the code base will

438
00:21:19,120 --> 00:21:26,229
not grow that much and still

439
00:21:24,030 --> 00:21:28,870
discoverable it will be probably the

440
00:21:26,230 --> 00:21:30,760
only open source of all that is that is

441
00:21:28,870 --> 00:21:32,709
really harder wallet so because other

442
00:21:30,760 --> 00:21:35,560
ones that are open-source seem to be

443
00:21:32,710 --> 00:21:37,660
like just embedded software wallets

444
00:21:35,560 --> 00:21:38,830
rather than being completely completely

445
00:21:37,660 --> 00:21:41,930
hard our wall is so implementing these

446
00:21:38,830 --> 00:21:44,899
operations in in hardware and

447
00:21:41,930 --> 00:21:47,360
yeah this is the howdy derive if you

448
00:21:44,900 --> 00:21:50,390
haven't seen this process already how

449
00:21:47,360 --> 00:21:53,060
your current Bitcoin wallets a

450
00:21:50,390 --> 00:21:54,590
cryptocurrency wallets derive addresses

451
00:21:53,060 --> 00:21:56,870
from from from one seed you already

452
00:21:54,590 --> 00:21:59,659
probably know this phrase that someone

453
00:21:56,870 --> 00:22:01,399
has to write down and write it in the

454
00:21:59,660 --> 00:22:03,560
metal and hide it in the in the boxes

455
00:22:01,400 --> 00:22:06,860
with very high they're there their socks

456
00:22:03,560 --> 00:22:08,800
or to hide it somewhere where burglar we

457
00:22:06,860 --> 00:22:12,409
will not be able to find it

458
00:22:08,800 --> 00:22:15,919
so another function I did they plan to

459
00:22:12,410 --> 00:22:18,110
add is you to have so I believe that in

460
00:22:15,920 --> 00:22:19,850
the building like five to ten years

461
00:22:18,110 --> 00:22:21,260
everyone is gonna not nobody's gonna use

462
00:22:19,850 --> 00:22:24,260
passwords anymore like where people are

463
00:22:21,260 --> 00:22:27,530
just gonna use some of these two factor

464
00:22:24,260 --> 00:22:29,480
authentication dongles to just register

465
00:22:27,530 --> 00:22:31,220
themselves too many of these services so

466
00:22:29,480 --> 00:22:36,470
the way it works it's it's a protein

467
00:22:31,220 --> 00:22:39,110
it's kind of standard protocol standard

468
00:22:36,470 --> 00:22:41,510
that depends on two protocols so client

469
00:22:39,110 --> 00:22:45,800
Authenticator protocol and web Boston

470
00:22:41,510 --> 00:22:50,000
protocols web often is for communication

471
00:22:45,800 --> 00:22:51,470
between your main computer and whatever

472
00:22:50,000 --> 00:22:54,380
the service you want to connect to and

473
00:22:51,470 --> 00:22:57,050
the client Authenticator protocol is

474
00:22:54,380 --> 00:22:59,930
just defined protocol by USB or

475
00:22:57,050 --> 00:23:02,210
Bluetooth or NFC to the community in

476
00:22:59,930 --> 00:23:05,180
this case communication microcontroller

477
00:23:02,210 --> 00:23:06,980
which can be any of these and then you

478
00:23:05,180 --> 00:23:08,540
can have you can choose your flavor for

479
00:23:06,980 --> 00:23:12,670
the photo for the main microcontroller

480
00:23:08,540 --> 00:23:12,670
ideally any questions

481
00:23:13,530 --> 00:23:21,930
[Applause]

482
00:23:23,250 --> 00:23:30,820
how do you store the keys in your wallet

483
00:23:27,010 --> 00:23:33,220
they're just stored in flash so you can

484
00:23:30,820 --> 00:23:35,379
there there is a way to protect the

485
00:23:33,220 --> 00:23:37,000
flash but this was just a

486
00:23:35,380 --> 00:23:39,669
proof-of-concept so I really didn't have

487
00:23:37,000 --> 00:23:40,480
time to bother to make them completely

488
00:23:39,669 --> 00:23:43,240
safe

489
00:23:40,480 --> 00:23:44,710
in fact there is like there is still

490
00:23:43,240 --> 00:23:47,530
functionality in the code that I can

491
00:23:44,710 --> 00:23:50,919
read out that the private key using this

492
00:23:47,530 --> 00:23:53,879
this app okay so I didn't think all that

493
00:23:50,919 --> 00:23:53,880
deep - to protect that

494
00:23:58,990 --> 00:24:07,450
a consumers the school career life

495
00:24:01,250 --> 00:24:09,820
suitors to kazutaka smartcard oh sorry

496
00:24:07,450 --> 00:24:12,769
this will discuss of Panama's peruse key

497
00:24:09,820 --> 00:24:16,939
ya know what's money in the more

498
00:24:12,769 --> 00:24:20,000
stunning suit most optimal grooms most

499
00:24:16,940 --> 00:24:23,450
Alex you ate foods analyzed by misty

500
00:24:20,000 --> 00:24:26,539
neutered smart cart was new to display

501
00:24:23,450 --> 00:24:39,409
on a smart card we his mark artists

502
00:24:26,539 --> 00:24:41,179
display open source smart card so it's

503
00:24:39,409 --> 00:24:43,490
really hard to toward it that code

504
00:24:41,179 --> 00:24:45,710
because and in fact there are off there

505
00:24:43,490 --> 00:24:47,929
are also some projects that that are

506
00:24:45,710 --> 00:24:51,139
building for example for this vital you

507
00:24:47,929 --> 00:24:54,980
to have that were really successful on

508
00:24:51,139 --> 00:24:57,379
on Kickstarter and they claim that they

509
00:24:54,980 --> 00:24:59,809
they are doing their design to be

510
00:24:57,379 --> 00:25:03,110
portable so that they can port that to

511
00:24:59,809 --> 00:25:05,450
different microcontroller platforms but

512
00:25:03,110 --> 00:25:06,860
I think it shouldn't be your priority

513
00:25:05,450 --> 00:25:10,039
because like if you have if your

514
00:25:06,860 --> 00:25:11,449
priority is your priority when you build

515
00:25:10,039 --> 00:25:14,809
devices like this should be security

516
00:25:11,450 --> 00:25:17,330
because so that's why I prioritize my

517
00:25:14,809 --> 00:25:19,009
design on security and the second

518
00:25:17,330 --> 00:25:21,799
priority was to make it portable to

519
00:25:19,009 --> 00:25:24,049
other platforms so because yeah if you

520
00:25:21,799 --> 00:25:32,230
if you don't prioritize security you you

521
00:25:24,049 --> 00:25:32,230
end up with okay thank you much

522
00:25:40,690 --> 00:25:42,750
you

