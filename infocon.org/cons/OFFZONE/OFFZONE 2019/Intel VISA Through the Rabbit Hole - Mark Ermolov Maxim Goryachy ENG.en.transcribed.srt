1
00:00:05,420 --> 00:00:12,870
Regina hi everyone good afternoon my

2
00:00:09,870 --> 00:00:17,100
name is Maxime coriaci my name is Marc

3
00:00:12,870 --> 00:00:21,119
yermolov and today we want to share with

4
00:00:17,100 --> 00:00:23,540
you it's been hard to say what we are

5
00:00:21,119 --> 00:00:24,859
going to share about more likely it's

6
00:00:23,540 --> 00:00:27,000
[Music]

7
00:00:24,859 --> 00:00:29,010
first of all be interesting to those

8
00:00:27,000 --> 00:00:32,700
people who would like to know how it all

9
00:00:29,010 --> 00:00:34,170
works in our case it's a processor in

10
00:00:32,700 --> 00:00:37,730
not only processor but also there's

11
00:00:34,170 --> 00:00:39,960
Southbridge but the point is that

12
00:00:37,730 --> 00:00:45,209
generally speaking when you are looking

13
00:00:39,960 --> 00:00:47,460
at a chip you can you can see it is a

14
00:00:45,210 --> 00:00:49,980
black box in a way because it has some

15
00:00:47,460 --> 00:00:52,500
inputs and outputs and it's quite

16
00:00:49,980 --> 00:00:55,529
difficult sometimes to understand what

17
00:00:52,500 --> 00:00:57,300
this chip is capable of and this whole

18
00:00:55,530 --> 00:01:00,300
assignment could be very very difficult

19
00:00:57,300 --> 00:01:03,180
to be able to reconstruct the internal

20
00:01:00,300 --> 00:01:05,069
functionality of this microchip by

21
00:01:03,180 --> 00:01:06,990
analyzing inputs and output signals

22
00:01:05,069 --> 00:01:09,929
sometimes it's very difficult but today

23
00:01:06,990 --> 00:01:13,919
we want to show you how in a very

24
00:01:09,930 --> 00:01:15,780
interesting way you can look inside chip

25
00:01:13,920 --> 00:01:18,119
without any very expensive equipment

26
00:01:15,780 --> 00:01:21,450
like microscopes and analyzers and

27
00:01:18,119 --> 00:01:26,570
things like that and just to give you a

28
00:01:21,450 --> 00:01:26,570
different perspective and try to think

29
00:01:28,159 --> 00:01:34,680
it can be implemented on one hand and

30
00:01:31,020 --> 00:01:37,500
secondly how can you collect information

31
00:01:34,680 --> 00:01:41,909
not only directly from your observation

32
00:01:37,500 --> 00:01:44,759
but also from all available sources and

33
00:01:41,909 --> 00:01:49,829
I would like to give a disclaimer all we

34
00:01:44,759 --> 00:01:51,720
want to share about may may really kill

35
00:01:49,829 --> 00:01:55,079
your equipment if you'll try to repeat

36
00:01:51,720 --> 00:01:56,759
it it's at your own the warning is you

37
00:01:55,079 --> 00:01:58,979
can do it at your own risk we'll give

38
00:01:56,759 --> 00:02:02,040
you all the links at the end of our

39
00:01:58,979 --> 00:02:08,389
presentation can come in you can ask any

40
00:02:02,040 --> 00:02:11,600
questions we'll be welcomed and another

41
00:02:08,389 --> 00:02:14,480
wafer disclaimer this information

42
00:02:11,600 --> 00:02:17,000
has been obtained not from some kind of

43
00:02:14,480 --> 00:02:21,200
secret knowledge depository it's all

44
00:02:17,000 --> 00:02:24,080
open sources and we in no way guarantee

45
00:02:21,200 --> 00:02:26,769
that our research is an ultimate truth

46
00:02:24,080 --> 00:02:29,960
it's simply a perspective on a problem

47
00:02:26,770 --> 00:02:34,550
it's our own understanding of how it's

48
00:02:29,960 --> 00:02:36,800
supposed to be working and everything we

49
00:02:34,550 --> 00:02:39,080
will be describing in all the demos you

50
00:02:36,800 --> 00:02:44,630
are going to see and they are based on a

51
00:02:39,080 --> 00:02:48,650
vulnerability we have found until s a30

52
00:02:44,630 --> 00:02:50,690
86 and if you will see any mistakes any

53
00:02:48,650 --> 00:02:52,580
errors please do not shy away from

54
00:02:50,690 --> 00:02:56,300
writing to us it will be interesting to

55
00:02:52,580 --> 00:02:59,450
discuss it now what a modern

56
00:02:56,300 --> 00:03:01,490
architecture into architecture in

57
00:02:59,450 --> 00:03:03,980
particular looks like in our perspective

58
00:03:01,490 --> 00:03:06,620
this is the way it may be looking at the

59
00:03:03,980 --> 00:03:09,100
upper part of the tip of the iceberg we

60
00:03:06,620 --> 00:03:11,150
have public technologies and what

61
00:03:09,100 --> 00:03:16,549
students study in universities

62
00:03:11,150 --> 00:03:19,550
commanding system patient segments all

63
00:03:16,550 --> 00:03:24,080
these extensions AVX

64
00:03:19,550 --> 00:03:27,530
AAS instruction which enable you to to

65
00:03:24,080 --> 00:03:30,770
do calculations faster to be more energy

66
00:03:27,530 --> 00:03:34,180
efficient in all your process and any

67
00:03:30,770 --> 00:03:36,650
calculations and also there are certain

68
00:03:34,180 --> 00:03:38,090
defensive protection technologies which

69
00:03:36,650 --> 00:03:42,590
are described well in terms of their

70
00:03:38,090 --> 00:03:44,990
programming model and sometimes you can

71
00:03:42,590 --> 00:03:46,850
only guess how it is implemented on in

72
00:03:44,990 --> 00:03:49,430
lower levels on the level of microchips

73
00:03:46,850 --> 00:03:54,410
but at least the software model is there

74
00:03:49,430 --> 00:03:57,800
virtualization P cheeks and after that

75
00:03:54,410 --> 00:04:00,350
we have the zone of the documentation

76
00:03:57,800 --> 00:04:03,200
although in parts on the trace hub which

77
00:04:00,350 --> 00:04:07,010
will give you some details about and ACH

78
00:04:03,200 --> 00:04:09,709
boot card and and then going down at the

79
00:04:07,010 --> 00:04:12,799
depth of several meters you can see MBA

80
00:04:09,710 --> 00:04:15,920
and EB and pro at this you can find some

81
00:04:12,800 --> 00:04:19,370
information in open public sources in

82
00:04:15,920 --> 00:04:23,690
patents and in book which is written

83
00:04:19,370 --> 00:04:24,050
about an e about Emma SARS reboot you

84
00:04:23,690 --> 00:04:26,690
can

85
00:04:24,050 --> 00:04:30,770
you can look in some other sources it's

86
00:04:26,690 --> 00:04:34,180
like a semi-transparent water where it

87
00:04:30,770 --> 00:04:38,419
thinks make sense but not completely and

88
00:04:34,180 --> 00:04:42,080
dive in deeper in deeper what things

89
00:04:38,419 --> 00:04:44,448
become darker and blacker highlighted in

90
00:04:42,080 --> 00:04:46,340
italics in bold are the things we will

91
00:04:44,449 --> 00:04:48,530
be covering today in our presentation

92
00:04:46,340 --> 00:04:50,810
and we believe that at the very depth

93
00:04:48,530 --> 00:04:52,729
there is a micro code if you understand

94
00:04:50,810 --> 00:04:54,650
how it works and how the forming of a

95
00:04:52,729 --> 00:05:00,289
micro code you can change it you can

96
00:04:54,650 --> 00:05:03,020
patch it on this level you'll be able to

97
00:05:00,289 --> 00:05:04,430
study internal processors internal

98
00:05:03,020 --> 00:05:06,500
architecture very well what's what's

99
00:05:04,430 --> 00:05:09,979
happening inside of it and things like

100
00:05:06,500 --> 00:05:11,690
that and today we are going to speak

101
00:05:09,979 --> 00:05:14,330
about race hub about the internal buses

102
00:05:11,690 --> 00:05:16,610
about the fixing and what into these

103
00:05:14,330 --> 00:05:18,740
it's not really into visa is not about

104
00:05:16,610 --> 00:05:20,539
the payment system and people who have

105
00:05:18,740 --> 00:05:22,550
come here and the thing that I'm going

106
00:05:20,539 --> 00:05:25,550
to share something about finances I am

107
00:05:22,550 --> 00:05:30,020
sorry it's not going to be about

108
00:05:25,550 --> 00:05:36,080
finances at all now what visa enables

109
00:05:30,020 --> 00:05:40,150
you to do it's a low level low level

110
00:05:36,080 --> 00:05:45,109
logical analyzer which intel needs to

111
00:05:40,150 --> 00:05:49,549
verify as we believe to verify things to

112
00:05:45,110 --> 00:05:53,360
make sure that those chips which are

113
00:05:49,550 --> 00:05:55,159
being produced they comply with specs

114
00:05:53,360 --> 00:05:57,469
specification so you can catch all the

115
00:05:55,159 --> 00:05:59,990
box at the stage of many factoring for

116
00:05:57,469 --> 00:06:01,759
example here is a new test chip and the

117
00:05:59,990 --> 00:06:05,750
engineering sample it does not work and

118
00:06:01,759 --> 00:06:08,569
you can understand why what are the

119
00:06:05,750 --> 00:06:11,060
other capabilities you can try to

120
00:06:08,569 --> 00:06:13,069
restore internal architecture of a

121
00:06:11,060 --> 00:06:15,830
bridge of a processor with this

122
00:06:13,069 --> 00:06:18,560
technology you can also try to attempt

123
00:06:15,830 --> 00:06:21,859
of how to work with the humility of

124
00:06:18,560 --> 00:06:23,180
things because this demo we are just

125
00:06:21,860 --> 00:06:26,960
about to show you we can tell you that

126
00:06:23,180 --> 00:06:28,669
we can we can roll the access to the

127
00:06:26,960 --> 00:06:32,388
memory all those addresses which are

128
00:06:28,669 --> 00:06:35,659
physically been put on the addresses bus

129
00:06:32,389 --> 00:06:37,460
if you want to see their spectral for

130
00:06:35,659 --> 00:06:41,030
instance you simply have to catch it

131
00:06:37,460 --> 00:06:42,830
certain entrance for the or cold for

132
00:06:41,030 --> 00:06:44,900
those addresses which nobody should come

133
00:06:42,830 --> 00:06:49,430
to you you are writing your own proof of

134
00:06:44,900 --> 00:06:51,409
concept and almost in an automatic mode

135
00:06:49,430 --> 00:06:54,860
you can try to connect your feedback

136
00:06:51,410 --> 00:06:57,110
line very fine conditions until you can

137
00:06:54,860 --> 00:06:59,539
see in the Machine the data you are

138
00:06:57,110 --> 00:07:03,199
expecting a bit it means that the data

139
00:06:59,539 --> 00:07:06,159
has been read but they should not have

140
00:07:03,199 --> 00:07:06,160
been do that at all

141
00:07:06,350 --> 00:07:10,720
[Music]

142
00:07:07,660 --> 00:07:16,610
technology all I know is quite complex

143
00:07:10,720 --> 00:07:19,699
thing and in the right bottom corner it

144
00:07:16,610 --> 00:07:23,210
will be a road map our our plan for

145
00:07:19,699 --> 00:07:25,220
presentation you will see that at the H

146
00:07:23,210 --> 00:07:27,710
stage throughout our presentation will

147
00:07:25,220 --> 00:07:32,000
be showing about each piece is about the

148
00:07:27,710 --> 00:07:34,190
DCI trace happen visa DCI and we will

149
00:07:32,000 --> 00:07:36,979
also cover the host inside what you have

150
00:07:34,190 --> 00:07:39,699
to install on your machine for it to be

151
00:07:36,979 --> 00:07:39,699
working properly

152
00:07:40,000 --> 00:07:49,220
now let's basically dive into this what

153
00:07:46,699 --> 00:07:58,610
DCI is all about please lift up your

154
00:07:49,220 --> 00:08:03,800
hand if you do not know what DCI is I'm

155
00:07:58,610 --> 00:08:07,789
going to share briefly until 2015 to be

156
00:08:03,800 --> 00:08:09,620
able to debug your internal related

157
00:08:07,789 --> 00:08:13,070
processes you have to have a special

158
00:08:09,620 --> 00:08:14,539
motherboard you had to have a certain

159
00:08:13,070 --> 00:08:17,330
adapter basically there was a whole

160
00:08:14,539 --> 00:08:20,630
evolution of these debugging tools you

161
00:08:17,330 --> 00:08:22,758
can see them on the picture and this

162
00:08:20,630 --> 00:08:25,099
resulted in a situation that those

163
00:08:22,759 --> 00:08:27,259
platforms which had been consumer

164
00:08:25,099 --> 00:08:29,240
platform you could buy them let's say in

165
00:08:27,259 --> 00:08:31,370
a retail outlet with a high degree of

166
00:08:29,240 --> 00:08:33,049
probabilities they required some

167
00:08:31,370 --> 00:08:35,719
modifications sometimes they were not

168
00:08:33,049 --> 00:08:38,328
even suited to connect connect a

169
00:08:35,719 --> 00:08:44,000
debugger to them and you as a result you

170
00:08:38,328 --> 00:08:47,870
couldn't I don't know to fix fix your

171
00:08:44,000 --> 00:08:50,480
system but in 2015

172
00:08:47,870 --> 00:08:50,960
everything has changed DCI came around

173
00:08:50,480 --> 00:08:55,460
and

174
00:08:50,960 --> 00:08:57,500
basically it's a way to to speaking

175
00:08:55,460 --> 00:09:02,120
about the low-level debugging to do it

176
00:08:57,500 --> 00:09:03,740
via USB we have already shared about

177
00:09:02,120 --> 00:09:06,620
that the idea is that you need either

178
00:09:03,740 --> 00:09:11,900
the disconnection fixing cable or a

179
00:09:06,620 --> 00:09:18,260
special box some Intel adapter through

180
00:09:11,900 --> 00:09:21,949
which you can get a JTAG so on a regular

181
00:09:18,260 --> 00:09:28,090
platforms which basically are available

182
00:09:21,950 --> 00:09:31,430
in in regular retail DCI enables you to

183
00:09:28,090 --> 00:09:34,070
double check almost on the full scope of

184
00:09:31,430 --> 00:09:36,709
your internal devices it can check

185
00:09:34,070 --> 00:09:39,860
against your USB device you can see how

186
00:09:36,710 --> 00:09:41,540
it is functioning having access to the

187
00:09:39,860 --> 00:09:44,360
ethics and basically it's the main

188
00:09:41,540 --> 00:09:50,120
technology using which you can debug you

189
00:09:44,360 --> 00:09:58,790
can fix crystals themselves couple words

190
00:09:50,120 --> 00:10:02,000
about trace hub it's when you need let's

191
00:09:58,790 --> 00:10:06,250
say let's say a device which somehow

192
00:10:02,000 --> 00:10:09,020
would be process and not only DCI

193
00:10:06,250 --> 00:10:13,700
because at some point this becomes this

194
00:10:09,020 --> 00:10:18,470
is not enough you need a good a good

195
00:10:13,700 --> 00:10:20,480
buffer which is stacking your events or

196
00:10:18,470 --> 00:10:24,340
logs you're developing something and you

197
00:10:20,480 --> 00:10:28,040
would like to log something in an Intel

198
00:10:24,340 --> 00:10:29,660
since the same 2015 if my memory serves

199
00:10:28,040 --> 00:10:32,209
me right from Scylla like they've

200
00:10:29,660 --> 00:10:35,719
installed a separate device it's an

201
00:10:32,210 --> 00:10:38,840
internal device into PC age enabling to

202
00:10:35,720 --> 00:10:43,070
want to trace events from bias from

203
00:10:38,840 --> 00:10:45,260
India from as far as I remember also

204
00:10:43,070 --> 00:10:47,780
from the port management control and I

205
00:10:45,260 --> 00:10:51,310
would like to give the mic to mark and

206
00:10:47,780 --> 00:10:51,310
he will give us more details about that

207
00:10:53,620 --> 00:10:58,460
to begin with I would like to say that

208
00:10:56,450 --> 00:11:01,780
today we aren't speaking about the

209
00:10:58,460 --> 00:11:03,380
hardware connecting of the modern

210
00:11:01,780 --> 00:11:06,350
chipsets

211
00:11:03,380 --> 00:11:12,860
and their sock chip systems from the

212
00:11:06,350 --> 00:11:15,110
Intel company speaking about the

213
00:11:12,860 --> 00:11:19,810
processor and processors as such as an

214
00:11:15,110 --> 00:11:24,410
integral chip they also have a certain

215
00:11:19,810 --> 00:11:26,839
hardware na means to get the values of

216
00:11:24,410 --> 00:11:30,980
internal signals however they are a

217
00:11:26,840 --> 00:11:32,900
little bit different and they could be

218
00:11:30,980 --> 00:11:35,330
considered to be a little obsolete

219
00:11:32,900 --> 00:11:37,819
because the newer process processors on

220
00:11:35,330 --> 00:11:41,000
the cannonade architecture ice lake

221
00:11:37,820 --> 00:11:45,620
architecture they are also inheriting

222
00:11:41,000 --> 00:11:52,490
these hardware hardware tracking means

223
00:11:45,620 --> 00:11:55,730
which came from the system logic and

224
00:11:52,490 --> 00:12:00,530
this Hardware routing means are now

225
00:11:55,730 --> 00:12:02,330
built into trace Intel trace hub and

226
00:12:00,530 --> 00:12:08,270
they consist of the three main

227
00:12:02,330 --> 00:12:11,590
components visa it's awful and today

228
00:12:08,270 --> 00:12:18,829
we're speaking about visa they also

229
00:12:11,590 --> 00:12:21,500
include illogical analyzer and a logic

230
00:12:18,830 --> 00:12:25,300
analyzer in another component system on

231
00:12:21,500 --> 00:12:25,300
cheap hardware architecture performance

232
00:12:25,420 --> 00:12:31,760
all these components which can be

233
00:12:28,490 --> 00:12:33,980
attributed to the hardware a routing

234
00:12:31,760 --> 00:12:35,450
with a lock Maxim said the trace hub is

235
00:12:33,980 --> 00:12:37,790
called to solve a problem of

236
00:12:35,450 --> 00:12:39,710
accumulating all the diagnostic routine

237
00:12:37,790 --> 00:12:42,410
information in the platform in one

238
00:12:39,710 --> 00:12:45,950
location in Hardware routing when you

239
00:12:42,410 --> 00:12:49,010
get the values and dynamic of hardware

240
00:12:45,950 --> 00:12:53,150
signals is a part of the trace hopper

241
00:12:49,010 --> 00:12:57,200
and all these three components are fully

242
00:12:53,150 --> 00:12:59,540
managed from there from the menu of

243
00:12:57,200 --> 00:13:06,620
managing registers in the trace was in

244
00:12:59,540 --> 00:13:09,829
the trace hub trace hub enables one to

245
00:13:06,620 --> 00:13:13,550
get this routing data to accumulate this

246
00:13:09,830 --> 00:13:15,860
data in certain locations and mota

247
00:13:13,550 --> 00:13:16,620
we can store it into the memory or send

248
00:13:15,860 --> 00:13:19,860
them

249
00:13:16,620 --> 00:13:22,340
the DCI and it also has the dedicated

250
00:13:19,860 --> 00:13:28,500
interfaces for example such as a PTI

251
00:13:22,340 --> 00:13:31,050
parallel transport or any GPIO pins can

252
00:13:28,500 --> 00:13:33,330
can work in this routing data or

253
00:13:31,050 --> 00:13:39,719
tracking data can also be obtained from

254
00:13:33,330 --> 00:13:43,230
trace hub a little bit more about trace

255
00:13:39,720 --> 00:13:47,580
hub Intel implemented some open standard

256
00:13:43,230 --> 00:13:50,760
including on a highest level of the

257
00:13:47,580 --> 00:13:55,250
stack this trace and data are coded in

258
00:13:50,760 --> 00:13:55,250
the software operates protocol format

259
00:13:55,880 --> 00:14:02,550
which is a dedicated trace lab device

260
00:13:59,520 --> 00:14:06,569
you can get an access to that by

261
00:14:02,550 --> 00:14:11,520
different buses or via PCI bus or H

262
00:14:06,570 --> 00:14:13,530
attack or also siphon interface ourself

263
00:14:11,520 --> 00:14:18,780
we are going to touch on that a little

264
00:14:13,530 --> 00:14:22,589
bit later here we're from circuit we've

265
00:14:18,780 --> 00:14:25,890
taken it from a menu on trace up you can

266
00:14:22,590 --> 00:14:27,480
find it in public access let's put it

267
00:14:25,890 --> 00:14:31,020
this way the reversed version of this

268
00:14:27,480 --> 00:14:33,660
manual because there are references from

269
00:14:31,020 --> 00:14:35,730
the Linux kernel from the source code to

270
00:14:33,660 --> 00:14:39,300
this one so you can find it in public

271
00:14:35,730 --> 00:14:41,820
access and this chart describes the

272
00:14:39,300 --> 00:14:45,930
components which are part of the

273
00:14:41,820 --> 00:14:50,840
hardware tracing this controller and

274
00:14:45,930 --> 00:14:55,890
dialogic are and here in some documents

275
00:14:50,840 --> 00:14:59,460
visa is pointed as at this V is in some

276
00:14:55,890 --> 00:15:03,120
as VI si and the Intel company has

277
00:14:59,460 --> 00:15:07,230
developed a quite powerful program

278
00:15:03,120 --> 00:15:10,050
instead to support tracer which includes

279
00:15:07,230 --> 00:15:13,080
a two big libraries create a trace of a

280
00:15:10,050 --> 00:15:16,199
PN trace decode engine each of these

281
00:15:13,080 --> 00:15:18,590
libraries is supplied with a special

282
00:15:16,200 --> 00:15:22,200
utility configuration utility an

283
00:15:18,590 --> 00:15:24,450
executable file with which using the

284
00:15:22,200 --> 00:15:26,640
libraries functionality you can do

285
00:15:24,450 --> 00:15:27,590
certain actions for which they are

286
00:15:26,640 --> 00:15:30,660
designed

287
00:15:27,590 --> 00:15:35,070
unfortunately these libraries are

288
00:15:30,660 --> 00:15:37,650
basically undocumented although we are

289
00:15:35,070 --> 00:15:42,270
part of the package Intel system trace

290
00:15:37,650 --> 00:15:45,959
tool it's a utility quite convenient has

291
00:15:42,270 --> 00:15:49,079
a QE interface read no Java enabling

292
00:15:45,960 --> 00:15:52,140
want to get tracing messages from the

293
00:15:49,080 --> 00:15:55,560
buyers files and for m-e you can also

294
00:15:52,140 --> 00:15:58,770
get messaging but this utility is based

295
00:15:55,560 --> 00:16:01,739
on the trace hub API on the trace decode

296
00:15:58,770 --> 00:16:05,750
engine they are the foundation of all

297
00:16:01,740 --> 00:16:05,750
the trains and on the internal platform

298
00:16:06,170 --> 00:16:12,689
like I said unfortunately we cannot find

299
00:16:11,190 --> 00:16:15,600
an open documentation for these

300
00:16:12,690 --> 00:16:17,850
libraries but we were really helped by

301
00:16:15,600 --> 00:16:20,010
the fact that for certain versions of

302
00:16:17,850 --> 00:16:24,110
these libraries for the Linux platform

303
00:16:20,010 --> 00:16:26,460
they're far binaries and there and

304
00:16:24,110 --> 00:16:27,720
fixing information you can get all the

305
00:16:26,460 --> 00:16:30,450
names of the functions from these

306
00:16:27,720 --> 00:16:35,970
libraries and to understand how the

307
00:16:30,450 --> 00:16:38,760
things are working the the destination

308
00:16:35,970 --> 00:16:42,480
or goal of a trace of API is to

309
00:16:38,760 --> 00:16:45,810
configure based on demand on the users

310
00:16:42,480 --> 00:16:47,580
demand a hardware resources of the trace

311
00:16:45,810 --> 00:16:50,130
hub which may be needed for a certain

312
00:16:47,580 --> 00:16:52,470
tracing and trace the code engine is

313
00:16:50,130 --> 00:16:54,420
basically a factor of decoders of

314
00:16:52,470 --> 00:16:57,000
different the tracing information

315
00:16:54,420 --> 00:17:01,189
collected from different sources now we

316
00:16:57,000 --> 00:17:04,170
want to demonstrate you a video of

317
00:17:01,190 --> 00:17:07,439
tracing of a mask of a message from a

318
00:17:04,170 --> 00:17:12,569
management engine it will be done on the

319
00:17:07,439 --> 00:17:15,050
example of the choice and utility by by

320
00:17:12,569 --> 00:17:15,050
visa

321
00:17:16,910 --> 00:17:25,620
well basically now we are inserting this

322
00:17:21,949 --> 00:17:27,660
debugging our is a tool which enables

323
00:17:25,619 --> 00:17:32,489
you to stop the loading of a platform

324
00:17:27,660 --> 00:17:35,970
not even the CPU but but the platform we

325
00:17:32,490 --> 00:17:40,410
stole it we in then install the visas

326
00:17:35,970 --> 00:17:43,830
settings restore after that the visa is

327
00:17:40,410 --> 00:17:50,130
configured and we are letting the kernel

328
00:17:43,830 --> 00:17:52,169
go and say as you can see the command

329
00:17:50,130 --> 00:17:54,660
interface of the utility this is what it

330
00:17:52,170 --> 00:18:00,740
looks like for the tracing purposes and

331
00:17:54,660 --> 00:18:03,990
you can see that the CM as a protocol

332
00:18:00,740 --> 00:18:07,170
obtain for master is 16 by this channel

333
00:18:03,990 --> 00:18:13,170
how many how many packets and from who I

334
00:18:07,170 --> 00:18:15,150
think 336 this undefined what was it but

335
00:18:13,170 --> 00:18:17,490
possibly this message is simply were not

336
00:18:15,150 --> 00:18:19,590
listed in the registry and as you can

337
00:18:17,490 --> 00:18:21,750
see right now these are real messages

338
00:18:19,590 --> 00:18:24,030
from a me some of them some of these

339
00:18:21,750 --> 00:18:25,920
messages are our select debug and

340
00:18:24,030 --> 00:18:26,580
they're like text messages from within

341
00:18:25,920 --> 00:18:29,760
the kernel

342
00:18:26,580 --> 00:18:32,370
while others have this certain rendering

343
00:18:29,760 --> 00:18:35,400
okay you have certain ID and in

344
00:18:32,370 --> 00:18:38,280
configuration for this ID you have the

345
00:18:35,400 --> 00:18:40,130
line with parameters of what it means

346
00:18:38,280 --> 00:18:42,899
sometimes you can have it both ways

347
00:18:40,130 --> 00:18:45,480
we've shown you this video simply as the

348
00:18:42,900 --> 00:18:47,520
demo of the trace hub operations and has

349
00:18:45,480 --> 00:18:50,820
nothing to do with the hardware signal

350
00:18:47,520 --> 00:19:00,050
tracing can we get our presentation back

351
00:18:50,820 --> 00:19:02,520
please and now briefly about visa itself

352
00:19:00,050 --> 00:19:04,260
visa is an abbreviation stands for

353
00:19:02,520 --> 00:19:08,429
visualization of internal signals

354
00:19:04,260 --> 00:19:12,450
architecture in fact it's simply a

355
00:19:08,429 --> 00:19:16,860
network of the multiplexers which are

356
00:19:12,450 --> 00:19:19,770
called for connecting output signals

357
00:19:16,860 --> 00:19:23,129
from the IP units logical blocks to the

358
00:19:19,770 --> 00:19:26,070
central multiplexer and then either to

359
00:19:23,130 --> 00:19:28,290
the built in logical analyzer on a

360
00:19:26,070 --> 00:19:29,639
crystal or it to an external one you can

361
00:19:28,290 --> 00:19:32,700
actually connect and the external

362
00:19:29,640 --> 00:19:34,230
analyzers with a visa and you do

363
00:19:32,700 --> 00:19:36,360
configuration and you get the same

364
00:19:34,230 --> 00:19:38,100
signal from the internal IP blocks if

365
00:19:36,360 --> 00:19:41,040
you have the high higher precision

366
00:19:38,100 --> 00:19:43,020
higher frequency and so forth within the

367
00:19:41,040 --> 00:19:45,420
visa there is a certain sub device

368
00:19:43,020 --> 00:19:49,950
enabling to manage all of this network

369
00:19:45,420 --> 00:19:52,920
and each multiplexer in visa can be one

370
00:19:49,950 --> 00:19:55,380
of three types cerium central level

371
00:19:52,920 --> 00:19:58,310
multiplexer which is the highest level

372
00:19:55,380 --> 00:19:58,310
multiplexer

373
00:19:58,400 --> 00:20:04,250
which basically connects with a logical

374
00:20:00,799 --> 00:20:06,590
analyzer and also a lot of interim PLM

375
00:20:04,250 --> 00:20:08,240
or multiplexers and for each IP unit

376
00:20:06,590 --> 00:20:13,158
there is also a set of unilevel

377
00:20:08,240 --> 00:20:18,950
multiplexers which get hardware signals

378
00:20:13,159 --> 00:20:22,700
from these units we believe that one big

379
00:20:18,950 --> 00:20:24,620
advantage of visa is that an engineer

380
00:20:22,700 --> 00:20:27,080
working with it they do not have to know

381
00:20:24,620 --> 00:20:29,840
the particulars Raquin C of the signals

382
00:20:27,080 --> 00:20:32,149
they would like to obtain obtain the

383
00:20:29,840 --> 00:20:35,600
values of these signals because the visa

384
00:20:32,150 --> 00:20:37,820
operates with a native signals within a

385
00:20:35,600 --> 00:20:41,840
change you simply have to know the

386
00:20:37,820 --> 00:20:43,668
frequency identifier and all the

387
00:20:41,840 --> 00:20:46,399
frequencies and multiplexers are

388
00:20:43,669 --> 00:20:48,710
numbered and knowing your identifier

389
00:20:46,400 --> 00:20:50,690
within our group of output signal

390
00:20:48,710 --> 00:20:53,419
separates and you can basically get

391
00:20:50,690 --> 00:20:58,909
values of any signals and to digitize

392
00:20:53,419 --> 00:21:01,250
them and also from within visa we know

393
00:20:58,909 --> 00:21:03,320
that there's a templates generators

394
00:21:01,250 --> 00:21:06,950
built-in is simply to understand whether

395
00:21:03,320 --> 00:21:10,610
the network is functioning well it's not

396
00:21:06,950 --> 00:21:14,600
about biological blocks and here at this

397
00:21:10,610 --> 00:21:17,570
slide we are shown it graphically or we

398
00:21:14,600 --> 00:21:23,889
can see IP units and different sorts of

399
00:21:17,570 --> 00:21:27,740
multiplexers the register controller

400
00:21:23,890 --> 00:21:32,830
visa registers controller is the heart

401
00:21:27,740 --> 00:21:38,900
of all the visa management it identifies

402
00:21:32,830 --> 00:21:44,990
such ranges it identifies the address

403
00:21:38,900 --> 00:21:47,150
space for each multiplexer within mmm I

404
00:21:44,990 --> 00:21:49,039
own Rangers which has attributes the

405
00:21:47,150 --> 00:21:52,010
register controller and like I said for

406
00:21:49,039 --> 00:21:54,879
each frequency you set a certain

407
00:21:52,010 --> 00:22:00,200
identifier but also for each groups of

408
00:21:54,880 --> 00:22:04,669
output signals from IP units each you LM

409
00:22:00,200 --> 00:22:07,789
or Union level multiplexer also sense

410
00:22:04,669 --> 00:22:08,760
the identifier in these signals at the

411
00:22:07,789 --> 00:22:11,010
our cluster

412
00:22:08,760 --> 00:22:12,960
to operate more convenient moving

413
00:22:11,010 --> 00:22:14,850
because there are hundreds of thousands

414
00:22:12,960 --> 00:22:16,590
and to make it more convenient for to

415
00:22:14,850 --> 00:22:19,168
operate them they are being clustered in

416
00:22:16,590 --> 00:22:21,090
groups and lands in lanes about eight

417
00:22:19,169 --> 00:22:24,870
signals in each in each group is

418
00:22:21,090 --> 00:22:27,178
assigned with its own identifier also

419
00:22:24,870 --> 00:22:29,570
within the versions you can find very

420
00:22:27,179 --> 00:22:32,130
convenient mechanisms it's a replay ram

421
00:22:29,570 --> 00:22:36,360
that is you can take your whole

422
00:22:32,130 --> 00:22:41,070
configuration for a specific hardware

423
00:22:36,360 --> 00:22:42,330
trace and you can record multiplication

424
00:22:41,070 --> 00:22:44,000
and then with certain inquiry

425
00:22:42,330 --> 00:22:47,030
immediately restore this configuration

426
00:22:44,000 --> 00:22:50,250
by demand so you can switch between

427
00:22:47,030 --> 00:22:53,610
tracing of different sets of signals

428
00:22:50,250 --> 00:22:57,650
from different devices you know about

429
00:22:53,610 --> 00:23:00,030
the file itself our whole research

430
00:22:57,650 --> 00:23:02,280
started from the point when we can we

431
00:23:00,030 --> 00:23:04,230
could see there this an XML file

432
00:23:02,280 --> 00:23:07,168
we really got intrigued by there by its

433
00:23:04,230 --> 00:23:09,390
name by its abbreviation which is very

434
00:23:07,169 --> 00:23:12,090
well known abbreviation and by its size

435
00:23:09,390 --> 00:23:16,260
it was in tens of megabytes of their

436
00:23:12,090 --> 00:23:18,840
text XML information and when we first

437
00:23:16,260 --> 00:23:21,929
opened up this file frankly we were

438
00:23:18,840 --> 00:23:23,280
simply confused by the volume of

439
00:23:21,929 --> 00:23:25,530
information we simply could not

440
00:23:23,280 --> 00:23:27,330
understand what is the purpose of all

441
00:23:25,530 --> 00:23:29,970
this information although we've had

442
00:23:27,330 --> 00:23:31,770
quite a big experience a prior

443
00:23:29,970 --> 00:23:34,950
experience of the reverse engineer we

444
00:23:31,770 --> 00:23:36,629
knew how this piece age is built but

445
00:23:34,950 --> 00:23:39,450
seen all this information from the VESA

446
00:23:36,630 --> 00:23:41,580
xml we could not make out a thing but

447
00:23:39,450 --> 00:23:43,830
time went by will begin to structure

448
00:23:41,580 --> 00:23:45,899
this file and we realized that it

449
00:23:43,830 --> 00:23:48,629
consists of the three back big parts

450
00:23:45,900 --> 00:23:51,780
first is basically a multiplexer in

451
00:23:48,630 --> 00:23:56,460
description the next one would be the

452
00:23:51,780 --> 00:24:03,030
hardware signals descriptor and next

453
00:23:56,460 --> 00:24:05,460
register descriptor here in this light

454
00:24:03,030 --> 00:24:09,500
you can see the three sets which are

455
00:24:05,460 --> 00:24:12,480
needed to do the hardware tracing of

456
00:24:09,500 --> 00:24:16,610
certain signals from the fuse control

457
00:24:12,480 --> 00:24:16,610
controllers of an internal device

458
00:24:17,010 --> 00:24:21,940
and studying these file from XML we

459
00:24:20,049 --> 00:24:23,500
begin to understand that some

460
00:24:21,940 --> 00:24:26,080
information was missing some information

461
00:24:23,500 --> 00:24:28,690
we do see yet another segment of

462
00:24:26,080 --> 00:24:30,549
information is simply not there we begin

463
00:24:28,690 --> 00:24:32,320
to think maybe it's a concise version

464
00:24:30,549 --> 00:24:35,350
and some of the part of information

465
00:24:32,320 --> 00:24:39,789
simply been cut out avail it's not for

466
00:24:35,350 --> 00:24:42,879
just regular users and we were lucky

467
00:24:39,789 --> 00:24:46,120
enough to find in different versions of

468
00:24:42,880 --> 00:24:49,000
their system studio we found two files

469
00:24:46,120 --> 00:24:52,090
visa excel for the same platform for the

470
00:24:49,000 --> 00:24:54,640
same stamping but they were different in

471
00:24:52,090 --> 00:24:59,139
size one of the files were several times

472
00:24:54,640 --> 00:25:01,480
bigger than the other knowing that

473
00:24:59,140 --> 00:25:03,909
knowing that in some versions of the

474
00:25:01,480 --> 00:25:08,289
system studio with the big visa XML

475
00:25:03,909 --> 00:25:10,210
files we've gone through all the Intel

476
00:25:08,289 --> 00:25:12,820
system studio packets beginning with the

477
00:25:10,210 --> 00:25:15,460
version 13 which we could find it in a

478
00:25:12,820 --> 00:25:17,168
public domain and we are confident now

479
00:25:15,460 --> 00:25:19,600
we have all the versions of the system

480
00:25:17,169 --> 00:25:22,299
students ever being published by Intel

481
00:25:19,600 --> 00:25:24,459
and we have gone through all the XML

482
00:25:22,299 --> 00:25:27,460
files from within the studio and here on

483
00:25:24,460 --> 00:25:30,520
the screen you can see the results of

484
00:25:27,460 --> 00:25:35,740
our work it's a set of all the these XML

485
00:25:30,520 --> 00:25:38,200
files we have its size for what platform

486
00:25:35,740 --> 00:25:42,100
for what stepping and if you look into

487
00:25:38,200 --> 00:25:44,169
that it looks like the collection had

488
00:25:42,100 --> 00:25:46,360
been assembled in the following way

489
00:25:44,169 --> 00:25:46,779
we've noticed it's a quite a phantom

490
00:25:46,360 --> 00:25:48,879
file

491
00:25:46,779 --> 00:25:51,130
I mean visa XML sometimes it would show

492
00:25:48,880 --> 00:25:53,380
up or disappear at different builds of

493
00:25:51,130 --> 00:25:57,460
the system studio yet in some versions

494
00:25:53,380 --> 00:25:59,440
it like Mark said it was less in yet in

495
00:25:57,460 --> 00:26:03,309
other versions it was bigger we begin to

496
00:25:59,440 --> 00:26:06,309
you build this collection and as you

497
00:26:03,309 --> 00:26:10,840
could see some of the files they have

498
00:26:06,309 --> 00:26:15,610
the same identical size but as a matter

499
00:26:10,840 --> 00:26:19,539
of fact it's the same file almost the

500
00:26:15,610 --> 00:26:22,479
same file and since there is a different

501
00:26:19,539 --> 00:26:25,379
stepping you can see changes in some

502
00:26:22,480 --> 00:26:28,990
signals yet the new chip provision

503
00:26:25,380 --> 00:26:30,460
inside is different and these changes

504
00:26:28,990 --> 00:26:33,610
are not that many

505
00:26:30,460 --> 00:26:35,169
you can look them up we compared two

506
00:26:33,610 --> 00:26:36,789
panels from the same platform but of

507
00:26:35,169 --> 00:26:42,090
different sizes and we could see that in

508
00:26:36,789 --> 00:26:44,340
a smaller file there is a lack of

509
00:26:42,090 --> 00:26:46,809
description of many circles they are

510
00:26:44,340 --> 00:26:50,199
identical might be described in

511
00:26:46,809 --> 00:26:53,470
multiplexer in register but the number

512
00:26:50,200 --> 00:26:55,330
of the crude Pink's of output signals in

513
00:26:53,470 --> 00:26:57,129
internal devices were really different

514
00:26:55,330 --> 00:26:59,949
and this was the main difference we've

515
00:26:57,129 --> 00:27:02,350
shown you this in two files

516
00:26:59,950 --> 00:27:06,299
highlighted in green what you're seeing

517
00:27:02,350 --> 00:27:06,299
is what was like an in a smaller file

518
00:27:08,039 --> 00:27:13,720
within the XML visa file when when

519
00:27:11,110 --> 00:27:16,779
described in their registration which

520
00:27:13,720 --> 00:27:19,360
are managing visa register controller we

521
00:27:16,779 --> 00:27:23,259
really looked into such an attribute as

522
00:27:19,360 --> 00:27:25,959
standard the standard for some registers

523
00:27:23,259 --> 00:27:29,980
was like a visa control yet for others

524
00:27:25,960 --> 00:27:33,309
like a visa Lane and we immediately

525
00:27:29,980 --> 00:27:35,559
realized that it's a standard defining

526
00:27:33,309 --> 00:27:38,049
layout of registry and its purpose why

527
00:27:35,559 --> 00:27:41,559
this register does exist although there

528
00:27:38,049 --> 00:27:44,408
was no other public documentation but by

529
00:27:41,559 --> 00:27:46,960
reverse engineering out with a trace a

530
00:27:44,409 --> 00:27:48,490
hub API library we were able to

531
00:27:46,960 --> 00:27:51,369
understand this layout and the fields

532
00:27:48,490 --> 00:27:55,149
was in each of the types of the registry

533
00:27:51,369 --> 00:27:58,418
standards and we came to a realization

534
00:27:55,149 --> 00:28:05,008
of how to program the trains hubs

535
00:27:58,419 --> 00:28:05,009
equipment to build certain visa network

536
00:28:07,860 --> 00:28:14,439
multiplexer what it looks like from the

537
00:28:10,600 --> 00:28:18,100
inside basically it's a mechanism are

538
00:28:14,440 --> 00:28:22,139
used in which you can for each outgoing

539
00:28:18,100 --> 00:28:25,149
lane to assign one of the incoming lines

540
00:28:22,139 --> 00:28:30,748
and to set a frequency where these

541
00:28:25,149 --> 00:28:34,149
signals will be digitized a biological

542
00:28:30,749 --> 00:28:39,210
analyzer for several lanes you can set

543
00:28:34,149 --> 00:28:39,209
this same entrance or incoming group

544
00:28:40,900 --> 00:28:47,230
I would like to add from my part the

545
00:28:44,980 --> 00:28:51,880
question is back and why do we need all

546
00:28:47,230 --> 00:28:55,330
of that because okay I want to trace our

547
00:28:51,880 --> 00:28:58,620
signals why do we need to build like

548
00:28:55,330 --> 00:29:01,928
this your instruction JTAG extension to

549
00:28:58,620 --> 00:29:04,330
terrain vendor well let's take the line

550
00:29:01,929 --> 00:29:06,690
out of each signal and somehow we'll be

551
00:29:04,330 --> 00:29:10,029
reading that through some kind of a JTAG

552
00:29:06,690 --> 00:29:17,169
registered but the point is what we've

553
00:29:10,029 --> 00:29:19,870
seen is this very very often the

554
00:29:17,169 --> 00:29:23,320
Alliance have been cut off even to be

555
00:29:19,870 --> 00:29:27,279
able to read the memory you need to use

556
00:29:23,320 --> 00:29:29,020
all different hacks to read all the the

557
00:29:27,279 --> 00:29:30,610
whole line of an address you have to use

558
00:29:29,020 --> 00:29:32,860
different acts because they go through

559
00:29:30,610 --> 00:29:37,779
one multiplexers and multiplexers have

560
00:29:32,860 --> 00:29:39,908
been invented to to make the the the

561
00:29:37,779 --> 00:29:41,860
scheme was envisage easier because you

562
00:29:39,909 --> 00:29:44,320
cannot take out all the lines there are

563
00:29:41,860 --> 00:29:48,309
107 thousands maybe even millions of

564
00:29:44,320 --> 00:29:51,549
lines and to simplify it as a matter of

565
00:29:48,309 --> 00:29:53,889
fact visa probably do not know how to

566
00:29:51,549 --> 00:29:58,320
trace just any signal I mean just any

567
00:29:53,890 --> 00:30:00,490
there are many more signals but visa

568
00:29:58,320 --> 00:30:04,090
shows you the most important signals

569
00:30:00,490 --> 00:30:06,640
they are taken in turn into the

570
00:30:04,090 --> 00:30:08,918
multiplex to cut costs to decrease

571
00:30:06,640 --> 00:30:12,730
number of lines to decrease complexity

572
00:30:08,919 --> 00:30:17,409
of the device and now very briefly about

573
00:30:12,730 --> 00:30:24,450
the logical analyzer itself it only has

574
00:30:17,409 --> 00:30:29,970
16 lanes each actually it can digitize

575
00:30:24,450 --> 00:30:34,360
100 to 80 28 signals at the same time

576
00:30:29,970 --> 00:30:39,580
this is exactly to select only 128 out

577
00:30:34,360 --> 00:30:45,850
of hundreds of so that's max signals

578
00:30:39,580 --> 00:30:50,049
will be digitized to get their values at

579
00:30:45,850 --> 00:30:53,929
any moment in time for PCH the logical

580
00:30:50,049 --> 00:30:57,200
analyzer operates at about 400 men

581
00:30:53,930 --> 00:31:01,100
we haven't yet played with the logical

582
00:30:57,200 --> 00:31:03,500
analyzer built into model CPUs adversely

583
00:31:01,100 --> 00:31:06,889
Kanna like I think they will operate at

584
00:31:03,500 --> 00:31:10,970
higher rates but for PCH it's quite

585
00:31:06,890 --> 00:31:14,960
enough at the same time it can cover up

586
00:31:10,970 --> 00:31:23,960
to 128 signals at this frequency for

587
00:31:14,960 --> 00:31:28,460
each lane arbitration unit that can set

588
00:31:23,960 --> 00:31:30,890
the weight for each lane basically it's

589
00:31:28,460 --> 00:31:34,040
about the frequency of polling so some

590
00:31:30,890 --> 00:31:36,290
lanes can be higher priority some lanes

591
00:31:34,040 --> 00:31:39,879
can be lower priority and so at the end

592
00:31:36,290 --> 00:31:43,760
of the day the logical analyzer will

593
00:31:39,880 --> 00:31:47,510
code those data is private format it's

594
00:31:43,760 --> 00:31:49,520
wrapped its into the open software trace

595
00:31:47,510 --> 00:31:57,470
a protocol standard and sent to the

596
00:31:49,520 --> 00:32:01,250
trace hub this one shows you the output

597
00:31:57,470 --> 00:32:03,230
of the decoder the trace information of

598
00:32:01,250 --> 00:32:06,470
logical analyzer using trail decode

599
00:32:03,230 --> 00:32:08,930
engine we connected it built a network

600
00:32:06,470 --> 00:32:11,510
and then we'll display or display all

601
00:32:08,930 --> 00:32:14,300
the steps Oh show all the steps in a

602
00:32:11,510 --> 00:32:17,810
separate slide that you need to take to

603
00:32:14,300 --> 00:32:19,520
trace hardware signals it's not an easy

604
00:32:17,810 --> 00:32:22,490
thing to do by the way and this slide is

605
00:32:19,520 --> 00:32:25,190
to show an example of an inbuilt

606
00:32:22,490 --> 00:32:28,370
decoder for logical analyzer in

607
00:32:25,190 --> 00:32:32,990
operation what you can see here I'm not

608
00:32:28,370 --> 00:32:36,379
sure what they see - not every moment

609
00:32:32,990 --> 00:32:39,140
where input lanes are being pulled are

610
00:32:36,380 --> 00:32:42,710
marked with a timestamp up to five

611
00:32:39,140 --> 00:32:46,190
picoseconds and each layer 8-bit that's

612
00:32:42,710 --> 00:32:48,500
one bytes for each lane and you can see

613
00:32:46,190 --> 00:32:51,640
state at the moment of polling anyway

614
00:32:48,500 --> 00:32:56,960
you have a high level signal you have

615
00:32:51,640 --> 00:33:01,760
one it's a zero but we found that this

616
00:32:56,960 --> 00:33:03,950
format is very unwieldy for real life

617
00:33:01,760 --> 00:33:05,480
field investigations so we had to write

618
00:33:03,950 --> 00:33:07,669
our own converters

619
00:33:05,480 --> 00:33:14,090
to convert these outputs into

620
00:33:07,669 --> 00:33:16,250
hexadecimal also you can see moments

621
00:33:14,090 --> 00:33:19,129
where frequency disappears in certain

622
00:33:16,250 --> 00:33:22,850
lanes for instance in PCH part of the

623
00:33:19,130 --> 00:33:25,850
blocks start getting disabled because of

624
00:33:22,850 --> 00:33:30,678
the energy saving feature and these

625
00:33:25,850 --> 00:33:37,580
moments are also marked here but as we

626
00:33:30,679 --> 00:33:41,510
said the logical analyzer converts them

627
00:33:37,580 --> 00:33:46,790
in this data in to its own private

628
00:33:41,510 --> 00:33:50,059
format and send it to get trace but it

629
00:33:46,790 --> 00:33:54,500
turns out that trace engine has a

630
00:33:50,059 --> 00:33:57,559
special mode of operation so that's a

631
00:33:54,500 --> 00:34:01,160
very detailed log of this trace data can

632
00:33:57,559 --> 00:34:03,290
be built based on what you get from the

633
00:34:01,160 --> 00:34:06,380
logic analyzer for instance if you are

634
00:34:03,290 --> 00:34:10,520
not happy with the text formats you can

635
00:34:06,380 --> 00:34:13,510
take a look this debug mode outputs in

636
00:34:10,520 --> 00:34:16,399
order to get more details about it

637
00:34:13,510 --> 00:34:18,800
sophisticated cases so this light is a

638
00:34:16,399 --> 00:34:23,029
step by step instruction of what you

639
00:34:18,800 --> 00:34:25,600
need to do to run Hardware tracing its

640
00:34:23,030 --> 00:34:31,159
modern Intel systems the important

641
00:34:25,600 --> 00:34:36,080
moment here is in that apart from these

642
00:34:31,159 --> 00:34:38,659
two files and piqué xml and visa dot xml

643
00:34:36,080 --> 00:34:41,600
that visa supplies in the system studio

644
00:34:38,659 --> 00:34:44,109
it was supposed that they should exist

645
00:34:41,600 --> 00:34:47,179
for every platform well actually they

646
00:34:44,109 --> 00:34:50,060
appear and disappear in different studio

647
00:34:47,179 --> 00:34:53,210
versions but they are supposed to exist

648
00:34:50,060 --> 00:34:55,609
for each platform but enough enough

649
00:34:53,210 --> 00:34:59,869
apart from them you need to have another

650
00:34:55,609 --> 00:35:02,210
file which is interview dot xml in

651
00:34:59,869 --> 00:35:04,520
certain versions of system studio we

652
00:35:02,210 --> 00:35:06,560
found examples of such files and

653
00:35:04,520 --> 00:35:11,100
actually the purpose of this interview

654
00:35:06,560 --> 00:35:14,890
dot XML file is just to connect

655
00:35:11,100 --> 00:35:19,299
the signals coming from logical units

656
00:35:14,890 --> 00:35:22,450
into Hardware events using some logical

657
00:35:19,300 --> 00:35:26,680
operations and signal values and then

658
00:35:22,450 --> 00:35:29,589
these libraries trace hub API they will

659
00:35:26,680 --> 00:35:32,950
operate with a hardware events that they

660
00:35:29,590 --> 00:35:34,390
got from the interview XML file but you

661
00:35:32,950 --> 00:35:36,490
have to write this file yourself

662
00:35:34,390 --> 00:35:39,430
we shall we've shown this it's format

663
00:35:36,490 --> 00:35:43,000
it's very simple you take the complete

664
00:35:39,430 --> 00:35:45,520
path of the signal and its value is

665
00:35:43,000 --> 00:35:49,480
merged with values of other signals and

666
00:35:45,520 --> 00:35:52,300
now about a so chap as I said this

667
00:35:49,480 --> 00:35:55,630
system on chip hardware architecture

668
00:35:52,300 --> 00:35:59,230
performance in actual fact it's quite a

669
00:35:55,630 --> 00:36:02,140
useful component just like the logical

670
00:35:59,230 --> 00:36:08,380
analyzer it's embedded it's connected to

671
00:36:02,140 --> 00:36:13,150
the visa network of digitizing signals

672
00:36:08,380 --> 00:36:15,340
it just takes and based on the current

673
00:36:13,150 --> 00:36:23,050
values of the signals apply certain

674
00:36:15,340 --> 00:36:26,860
rules to enhance make lower the value

675
00:36:23,050 --> 00:36:30,040
and so it just since the counter values

676
00:36:26,860 --> 00:36:33,280
to trace hub it can also measure the

677
00:36:30,040 --> 00:36:36,880
duration of hardware events with a very

678
00:36:33,280 --> 00:36:39,780
hard you know high level of accuracy to

679
00:36:36,880 --> 00:36:42,100
hundreds of events and so instead of

680
00:36:39,780 --> 00:36:44,560
analyzing in the file how long the

681
00:36:42,100 --> 00:36:48,069
signal was up for instance in the right

682
00:36:44,560 --> 00:36:50,470
enable you can just use a search app for

683
00:36:48,070 --> 00:36:53,860
to count to these events let me add

684
00:36:50,470 --> 00:37:00,700
basically what we have is a classic

685
00:36:53,860 --> 00:37:03,670
thing that exists in all Silla scopes

686
00:37:00,700 --> 00:37:06,160
you can work by some trigger and if I

687
00:37:03,670 --> 00:37:08,320
remember you can set this trigger so

688
00:37:06,160 --> 00:37:11,549
additionally as Mark said we have

689
00:37:08,320 --> 00:37:15,910
counters so as a result Intel engineers

690
00:37:11,550 --> 00:37:20,700
have gone and implemented you know real

691
00:37:15,910 --> 00:37:23,890
high speeds logical analyzer on the chip

692
00:37:20,700 --> 00:37:24,080
in order to simplify the debugging on

693
00:37:23,890 --> 00:37:26,779
the

694
00:37:24,080 --> 00:37:31,640
but on the other hand you know people

695
00:37:26,780 --> 00:37:33,740
developing hardware and it may be about

696
00:37:31,640 --> 00:37:34,940
small companies or large companies but

697
00:37:33,740 --> 00:37:40,129
not always

698
00:37:34,940 --> 00:37:42,290
people have equipment good enough well

699
00:37:40,130 --> 00:37:46,630
let's say gigahertz class or so

700
00:37:42,290 --> 00:37:51,380
oscilloscopes to understand okay we've

701
00:37:46,630 --> 00:37:53,420
taken the board's laid out the boards

702
00:37:51,380 --> 00:37:54,940
and if the chip is good but if you've

703
00:37:53,420 --> 00:37:56,840
done it yourselves

704
00:37:54,940 --> 00:37:58,220
there'll be a lot of errors there

705
00:37:56,840 --> 00:37:59,660
because you don't have an experience so

706
00:37:58,220 --> 00:38:04,129
using this technology you can at least

707
00:37:59,660 --> 00:38:06,710
see where the error is some signal is

708
00:38:04,130 --> 00:38:09,470
not arriving or you're sending some

709
00:38:06,710 --> 00:38:13,040
signal at the wrong time or if you want

710
00:38:09,470 --> 00:38:15,589
to dip it with external signals for

711
00:38:13,040 --> 00:38:19,460
instance now when you're laying out some

712
00:38:15,590 --> 00:38:22,130
memory such as DDR it's actually quite

713
00:38:19,460 --> 00:38:24,560
difficult you need to do the memory

714
00:38:22,130 --> 00:38:27,170
training and it's a difficult operation

715
00:38:24,560 --> 00:38:30,290
and you need to somehow debug it and

716
00:38:27,170 --> 00:38:33,800
find errors so just to make this thing

717
00:38:30,290 --> 00:38:37,970
cheaper Intel engineers decided to

718
00:38:33,800 --> 00:38:41,270
implement this kind of assessment as a

719
00:38:37,970 --> 00:38:43,870
logical analyzer on the chip actually

720
00:38:41,270 --> 00:38:47,420
it's quite an exciting idea I think and

721
00:38:43,870 --> 00:38:50,089
we immediately get a question if this

722
00:38:47,420 --> 00:38:55,850
visa technology has practical volume for

723
00:38:50,090 --> 00:38:59,450
researchers IT security hardware for

724
00:38:55,850 --> 00:39:01,880
where management engine whether it has

725
00:38:59,450 --> 00:39:06,470
practical applicability or maybe its

726
00:39:01,880 --> 00:39:09,020
value is limited by the area that it

727
00:39:06,470 --> 00:39:16,220
wasn't in the first place so that's the

728
00:39:09,020 --> 00:39:19,790
validation of chip debugging well it has

729
00:39:16,220 --> 00:39:23,839
a great value for researchers who wants

730
00:39:19,790 --> 00:39:29,870
to understand the internals of an Intel

731
00:39:23,840 --> 00:39:33,410
chip using this technology we managed if

732
00:39:29,870 --> 00:39:35,710
not completely but at least to a

733
00:39:33,410 --> 00:39:37,890
considerable degree to understand how

734
00:39:35,710 --> 00:39:41,340
internal ownership system fab

735
00:39:37,890 --> 00:39:43,970
works a ways it it's so important to

736
00:39:41,340 --> 00:39:49,020
understand its purpose

737
00:39:43,970 --> 00:39:53,850
iOS f this thing brings together all

738
00:39:49,020 --> 00:39:58,290
hardware devices all hardwood components

739
00:39:53,850 --> 00:40:01,560
they're connected among themselves using

740
00:39:58,290 --> 00:40:03,960
this iOS F technology in the past the

741
00:40:01,560 --> 00:40:04,529
PCI Express the bus was used for this

742
00:40:03,960 --> 00:40:09,930
purpose

743
00:40:04,530 --> 00:40:12,660
some other proprietary mechanisms that

744
00:40:09,930 --> 00:40:16,080
were developed or there were applied to

745
00:40:12,660 --> 00:40:19,049
specific chips but then intro decided

746
00:40:16,080 --> 00:40:22,319
that a certain standard needs to be

747
00:40:19,050 --> 00:40:26,610
developed to get these parts

748
00:40:22,320 --> 00:40:29,400
interconnected firstly so that it would

749
00:40:26,610 --> 00:40:31,200
be easier to integrate internal Hardware

750
00:40:29,400 --> 00:40:38,280
logic between different versions and

751
00:40:31,200 --> 00:40:43,160
also to be able to use and integrate

752
00:40:38,280 --> 00:40:48,540
third-party developments into the same

753
00:40:43,160 --> 00:40:51,720
chip and they're using this standard OCS

754
00:40:48,540 --> 00:40:55,340
F for that this specification actually

755
00:40:51,720 --> 00:40:58,410
has arrived from system and ships

756
00:40:55,340 --> 00:41:02,790
systems and chip or mobile platforms

757
00:40:58,410 --> 00:41:06,960
then it migrated through PCH and in the

758
00:41:02,790 --> 00:41:10,410
newest CPUs we have examples of CPUs

759
00:41:06,960 --> 00:41:14,940
based on it as I've already said in

760
00:41:10,410 --> 00:41:20,790
order to integrate third-party IP units

761
00:41:14,940 --> 00:41:23,970
and also to be able to support different

762
00:41:20,790 --> 00:41:26,640
versions of the day so this is the

763
00:41:23,970 --> 00:41:29,490
mission of ourselves why you need to

764
00:41:26,640 --> 00:41:30,930
understand its internal operations I

765
00:41:29,490 --> 00:41:33,390
think it's a key not only to the

766
00:41:30,930 --> 00:41:36,240
understanding but also to a security

767
00:41:33,390 --> 00:41:38,460
audit of the entire platform it's like a

768
00:41:36,240 --> 00:41:41,339
master key to all those like Alexander

769
00:41:38,460 --> 00:41:43,860
tell us yesterday that vendors made

770
00:41:41,340 --> 00:41:46,550
mistakes configuring spi controllers

771
00:41:43,860 --> 00:41:47,760
don't provide access to spi regions

772
00:41:46,550 --> 00:41:50,680
entailing

773
00:41:47,760 --> 00:41:55,569
bad results but if all the regions have

774
00:41:50,680 --> 00:41:57,969
being set correctly the device and the

775
00:41:55,569 --> 00:42:00,308
controller Oh wouldn't it be correct to

776
00:41:57,969 --> 00:42:05,019
suppose that they should understand who

777
00:42:00,309 --> 00:42:08,729
is going to read it so this way to

778
00:42:05,019 --> 00:42:11,379
provide the for the integration of

779
00:42:08,729 --> 00:42:12,609
devices is very important if you

780
00:42:11,380 --> 00:42:14,799
understand it

781
00:42:12,609 --> 00:42:17,529
you're in a good position to offer some

782
00:42:14,799 --> 00:42:18,940
hypotheses to the bar for bugs in

783
00:42:17,529 --> 00:42:24,039
certain places you understand how it

784
00:42:18,940 --> 00:42:27,460
works so using a visa we sorted it out

785
00:42:24,039 --> 00:42:30,369
with this bus and when I stood the phone

786
00:42:27,460 --> 00:42:33,549
thing each device within PCH where it's

787
00:42:30,369 --> 00:42:35,769
an SPI controller or a USB controller or

788
00:42:33,549 --> 00:42:37,269
some other multiple devices that are

789
00:42:35,769 --> 00:42:40,749
integrated there there are dozens of

790
00:42:37,269 --> 00:42:42,549
those so each of these devices has

791
00:42:40,749 --> 00:42:46,180
unique attribute called security

792
00:42:42,549 --> 00:42:49,690
attribute of initiator or s AI so each

793
00:42:46,180 --> 00:42:52,690
transaction of each device is assigned

794
00:42:49,690 --> 00:42:55,769
with this attribute and the other device

795
00:42:52,690 --> 00:42:58,979
that is a receiver for this transaction

796
00:42:55,769 --> 00:43:01,779
transaction it immediately identifies

797
00:42:58,979 --> 00:43:04,629
the one calling it so basically it's

798
00:43:01,779 --> 00:43:09,960
just a number there's no encryption

799
00:43:04,630 --> 00:43:13,089
there it's just a regular bus with

800
00:43:09,960 --> 00:43:17,259
address bus and data bus and it has

801
00:43:13,089 --> 00:43:20,529
special signals that described si I in

802
00:43:17,259 --> 00:43:24,069
order that information flows be

803
00:43:20,529 --> 00:43:27,130
separated as we believe yes and the

804
00:43:24,069 --> 00:43:29,788
specification itself into system of the

805
00:43:27,130 --> 00:43:33,119
chip fabric consists of three buses

806
00:43:29,789 --> 00:43:37,539
iossef primary sidebands and debugging

807
00:43:33,119 --> 00:43:42,339
bus for FX or JTAG when i'm going to

808
00:43:37,539 --> 00:43:45,849
talk about effects today is just JTAG

809
00:43:42,339 --> 00:43:49,140
specification adapted for a hierarchy of

810
00:43:45,849 --> 00:43:52,089
devices whereas for I say primary

811
00:43:49,140 --> 00:43:56,078
sidebands I'm going to talk right now

812
00:43:52,089 --> 00:43:59,380
so the iossef primary bus is intended

813
00:43:56,079 --> 00:44:01,180
and by the way we've got a part of this

814
00:43:59,380 --> 00:44:03,800
information room it's all patterns but

815
00:44:01,180 --> 00:44:07,460
to take a look at it live I can

816
00:44:03,800 --> 00:44:09,650
works in runtime has only become

817
00:44:07,460 --> 00:44:13,369
possible using visa so I can say that

818
00:44:09,650 --> 00:44:15,619
has been designed to control all the

819
00:44:13,369 --> 00:44:17,990
main data flows within the chip within

820
00:44:15,619 --> 00:44:23,210
IPC age with another system on the chip

821
00:44:17,990 --> 00:44:29,560
and modern CPUs actually it's a

822
00:44:23,210 --> 00:44:34,430
broadened PCI Express specification but

823
00:44:29,560 --> 00:44:41,509
it's very much adapted for energy

824
00:44:34,430 --> 00:44:44,240
efficiency and it's based on a special

825
00:44:41,510 --> 00:44:47,750
device special IP unit that's called a

826
00:44:44,240 --> 00:44:52,430
primary scalable fabric it's like a

827
00:44:47,750 --> 00:44:57,580
foundation or the backbone of this bus

828
00:44:52,430 --> 00:44:59,960
actually it's actually a Rooter

829
00:44:57,580 --> 00:45:01,400
where different to which different

830
00:44:59,960 --> 00:45:05,450
devices are connected through different

831
00:45:01,400 --> 00:45:08,990
ports but the most interesting thing is

832
00:45:05,450 --> 00:45:12,279
that the transaction in terms of the PCI

833
00:45:08,990 --> 00:45:15,649
Express standard the transaction is

834
00:45:12,280 --> 00:45:23,690
being routed either based on the address

835
00:45:15,650 --> 00:45:27,140
or BDF so within iossef primary the

836
00:45:23,690 --> 00:45:31,790
routing is done absolutely differently

837
00:45:27,140 --> 00:45:37,069
for each transaction it's methods of

838
00:45:31,790 --> 00:45:40,970
routing is set the so-called destination

839
00:45:37,070 --> 00:45:46,940
idea or dist ID as it's called in some

840
00:45:40,970 --> 00:45:49,779
data sheets or patterns and it's also

841
00:45:46,940 --> 00:45:53,600
important that this destination ID

842
00:45:49,780 --> 00:45:57,350
determines a specific PSF where this

843
00:45:53,600 --> 00:46:00,290
transaction has to arrive at it's much

844
00:45:57,350 --> 00:46:03,380
more flexible way than either address

845
00:46:00,290 --> 00:46:05,480
other than just address based routing I

846
00:46:03,380 --> 00:46:07,460
want to read this address and I don't

847
00:46:05,480 --> 00:46:09,950
know which device it belongs to whereas

848
00:46:07,460 --> 00:46:12,560
here it is clearly indicated which

849
00:46:09,950 --> 00:46:14,540
device and which port this transaction

850
00:46:12,560 --> 00:46:17,569
should belong to and also this routing

851
00:46:14,540 --> 00:46:22,640
modes can be used to

852
00:46:17,569 --> 00:46:24,890
instruct the fabric to define the device

853
00:46:22,640 --> 00:46:29,140
itself also what we found quite curious

854
00:46:24,890 --> 00:46:35,808
was that within PSF there are settings

855
00:46:29,140 --> 00:46:41,890
MTD for each of the route spaces a root

856
00:46:35,809 --> 00:46:48,170
space is basically some abstraction that

857
00:46:41,890 --> 00:46:55,390
when the device has such operates so the

858
00:46:48,170 --> 00:47:00,260
device so this is done so that the

859
00:46:55,390 --> 00:47:01,848
management engine could so the same

860
00:47:00,260 --> 00:47:04,130
device could present different

861
00:47:01,849 --> 00:47:06,859
interfaces to the management to face and

862
00:47:04,130 --> 00:47:09,589
to the CPU so within issues faced in

863
00:47:06,859 --> 00:47:12,250
this piece of unit allows enabling or

864
00:47:09,589 --> 00:47:15,680
disabling vtd I think it's quite

865
00:47:12,250 --> 00:47:18,589
exciting yes let me just add I think a

866
00:47:15,680 --> 00:47:20,808
good example of how it works runs like

867
00:47:18,589 --> 00:47:23,720
this so you have an SPI controller you

868
00:47:20,809 --> 00:47:27,619
have your bias running and the point is

869
00:47:23,720 --> 00:47:30,169
that when a CPU terms of this SPI

870
00:47:27,619 --> 00:47:34,790
control them somewhat with a spec until

871
00:47:30,170 --> 00:47:37,520
it says ok good so I got the CPU coming

872
00:47:34,790 --> 00:47:40,040
to me so I need to take the piece a

873
00:47:37,520 --> 00:47:41,690
controller and collect some data from

874
00:47:40,040 --> 00:47:47,390
the flash drive ok good

875
00:47:41,690 --> 00:47:49,849
but if AC SME Iran's one of the most

876
00:47:47,390 --> 00:47:51,500
curious things there is that modules

877
00:47:49,849 --> 00:47:55,270
them are compressed will have the

878
00:47:51,500 --> 00:48:01,940
Huffman algorithm it looks to be good

879
00:47:55,270 --> 00:48:06,740
but Halfmann tables Hardware implemented

880
00:48:01,940 --> 00:48:11,270
you can't get them so when an object

881
00:48:06,740 --> 00:48:17,240
comes up and says Amica press the

882
00:48:11,270 --> 00:48:21,980
control it says ok your Emmy you can go

883
00:48:17,240 --> 00:48:26,540
use those Oh access those registers of

884
00:48:21,980 --> 00:48:28,860
mine that can support Huffman

885
00:48:26,540 --> 00:48:33,770
algorithm so there's a good example of

886
00:48:28,860 --> 00:48:37,460
how root spaces allow separating the

887
00:48:33,770 --> 00:48:40,650
privileges so who can access what

888
00:48:37,460 --> 00:48:43,170
depending on the functionality so

889
00:48:40,650 --> 00:48:47,880
whether it's a CPU or PC age or

890
00:48:43,170 --> 00:48:53,310
something else maybe PMC controller or

891
00:48:47,880 --> 00:48:55,260
CH so this is another way to distribute

892
00:48:53,310 --> 00:48:59,160
information flow so that you for

893
00:48:55,260 --> 00:49:04,290
instance wouldn't be able to a me code

894
00:48:59,160 --> 00:49:08,240
from the host without going to so okay

895
00:49:04,290 --> 00:49:11,480
if this certain mechanism that allows

896
00:49:08,240 --> 00:49:17,879
initiating these internal transaction

897
00:49:11,480 --> 00:49:21,650
these internal si transaction for the

898
00:49:17,880 --> 00:49:28,520
PCI bus you have an adapter a bridge

899
00:49:21,650 --> 00:49:28,520
so I set primary so if there's a way to

900
00:49:28,640 --> 00:49:38,279
work with these transactions or even

901
00:49:32,460 --> 00:49:41,760
better to fake psychic so I think this

902
00:49:38,280 --> 00:49:43,860
whole idea doesn't make sense so our key

903
00:49:41,760 --> 00:49:46,290
idea is that if you find a device for

904
00:49:43,860 --> 00:49:49,050
which you can set the sae that's it

905
00:49:46,290 --> 00:49:52,920
you're going to get access to such

906
00:49:49,050 --> 00:49:55,440
secrets that no G tag will give you but

907
00:49:52,920 --> 00:49:57,630
you need to know where to put stakes on

908
00:49:55,440 --> 00:50:01,940
but it's not such a big problem because

909
00:49:57,630 --> 00:50:05,190
sae repeating myself is just a number so

910
00:50:01,940 --> 00:50:09,990
running heads I'd like to mention that

911
00:50:05,190 --> 00:50:11,580
we've already found a way to when I say

912
00:50:09,990 --> 00:50:13,529
Eve without going to a specific device

913
00:50:11,580 --> 00:50:17,370
but we're not going to disclose it right

914
00:50:13,530 --> 00:50:22,050
now it's it's a matter for our next

915
00:50:17,370 --> 00:50:25,020
research and the second bus that in

916
00:50:22,050 --> 00:50:28,470
terms of iOS F specification exists is

917
00:50:25,020 --> 00:50:31,230
the sideband bus it's not really needed

918
00:50:28,470 --> 00:50:34,109
for the main stream data or

919
00:50:31,230 --> 00:50:36,280
communications it's a service bus that

920
00:50:34,110 --> 00:50:39,820
allows

921
00:50:36,280 --> 00:50:42,130
setting up some clothes configuration or

922
00:50:39,820 --> 00:50:44,920
get some clothes information about the

923
00:50:42,130 --> 00:50:48,280
device that it protects or maybe some

924
00:50:44,920 --> 00:50:50,470
error messages that are not supposed to

925
00:50:48,280 --> 00:50:53,550
come up very often so it's a low speed

926
00:50:50,470 --> 00:50:56,799
bus but the most exciting information

927
00:50:53,550 --> 00:51:00,160
goes are through this a bus iossef

928
00:50:56,800 --> 00:51:04,480
sideband for instance gateway or

929
00:51:00,160 --> 00:51:07,210
platform gateway information we've found

930
00:51:04,480 --> 00:51:10,780
out that there's a certain set of data

931
00:51:07,210 --> 00:51:16,180
called security fuses which is key to

932
00:51:10,780 --> 00:51:18,400
the entire security system it's like a

933
00:51:16,180 --> 00:51:19,930
root key for the entire cryptography of

934
00:51:18,400 --> 00:51:22,510
the management engine if you get this

935
00:51:19,930 --> 00:51:24,848
key then all technologies or security

936
00:51:22,510 --> 00:51:27,400
technologies that are based on the

937
00:51:24,849 --> 00:51:34,599
management engine such as boot guard or

938
00:51:27,400 --> 00:51:36,960
for instance identity protection TPM or

939
00:51:34,599 --> 00:51:40,660
software based

940
00:51:36,960 --> 00:51:44,500
DRM all these technologies will

941
00:51:40,660 --> 00:51:48,759
certainly go down if you get this root

942
00:51:44,500 --> 00:51:51,220
key and this key is being sent between

943
00:51:48,760 --> 00:51:54,730
the fuse controller and a special device

944
00:51:51,220 --> 00:51:58,509
that management engine is interacting

945
00:51:54,730 --> 00:52:01,140
with over this aside band bus will show

946
00:51:58,510 --> 00:52:06,160
your demo video that'll show how we can

947
00:52:01,140 --> 00:52:13,118
trace the side band bus to get part of

948
00:52:06,160 --> 00:52:16,420
these keys I mean root keys that the

949
00:52:13,119 --> 00:52:17,619
management engine deals with also I'd

950
00:52:16,420 --> 00:52:20,800
like to note that there's a special

951
00:52:17,619 --> 00:52:24,790
appreciation device that's called the

952
00:52:20,800 --> 00:52:26,890
effects the effects aggregator it's a

953
00:52:24,790 --> 00:52:30,130
special device that manages all platform

954
00:52:26,890 --> 00:52:32,129
security basically it controls what JTAG

955
00:52:30,130 --> 00:52:38,740
can do on this platform or what it can't

956
00:52:32,130 --> 00:52:42,400
so perhaps so whether you can debug the

957
00:52:38,740 --> 00:52:45,160
engine or you can you want to get access

958
00:52:42,400 --> 00:52:47,970
to a certain device it's so defined by

959
00:52:45,160 --> 00:52:50,129
the effects aggregator

960
00:52:47,970 --> 00:52:53,490
it's also does it management using this

961
00:52:50,130 --> 00:52:55,590
sideband bus I am sorry

962
00:52:53,490 --> 00:52:59,520
we don't have a lot of time left in the

963
00:52:55,590 --> 00:53:04,170
next presentation so that's basically

964
00:52:59,520 --> 00:53:06,630
how I accept internals look what

965
00:53:04,170 --> 00:53:09,330
interview SF internals look like and if

966
00:53:06,630 --> 00:53:13,830
we can start the video so it's about a

967
00:53:09,330 --> 00:53:16,890
security fuse tracing what we're doing

968
00:53:13,830 --> 00:53:19,920
here is we're setting up the signals

969
00:53:16,890 --> 00:53:23,670
that we want to take a look at we're

970
00:53:19,920 --> 00:53:25,860
setting up in the beginning well there

971
00:53:23,670 --> 00:53:29,130
are there are going to be two a ways to

972
00:53:25,860 --> 00:53:31,320
read fuses through em II and not

973
00:53:29,130 --> 00:53:34,530
intel-based but then the base so core as

974
00:53:31,320 --> 00:53:36,570
they're called we've basically reported

975
00:53:34,530 --> 00:53:39,930
about this at confidence or with our

976
00:53:36,570 --> 00:53:42,240
colleague Demetrius Clara so there are

977
00:53:39,930 --> 00:53:48,870
two ways that we use to count the fuses

978
00:53:42,240 --> 00:53:52,290
firstly we do it via visa and then we'll

979
00:53:48,870 --> 00:53:52,890
show you that they've coincided that

980
00:53:52,290 --> 00:53:58,350
they're match

981
00:53:52,890 --> 00:54:02,250
so these the fuses that we read here em

982
00:53:58,350 --> 00:54:05,190
E as you can see this is a coincidence

983
00:54:02,250 --> 00:54:09,270
they match can we switch to the

984
00:54:05,190 --> 00:54:12,270
presentation back please a couple of

985
00:54:09,270 --> 00:54:15,630
words about a host so don't have the

986
00:54:12,270 --> 00:54:17,790
time for more so we took a look at the

987
00:54:15,630 --> 00:54:20,700
intro system studio that's basically a

988
00:54:17,790 --> 00:54:25,220
platform that's responsible for it all

989
00:54:20,700 --> 00:54:30,200
so we saw some binary files we've

990
00:54:25,220 --> 00:54:35,669
understood that they're encrypted and

991
00:54:30,200 --> 00:54:38,339
within the binaries that sit there to

992
00:54:35,670 --> 00:54:41,040
work with them leave we found the

993
00:54:38,340 --> 00:54:44,340
decryption key we decrypted all our

994
00:54:41,040 --> 00:54:48,180
files in the same way we started to look

995
00:54:44,340 --> 00:54:51,770
around as the asserting to understand if

996
00:54:48,180 --> 00:54:55,620
we have anything valuable in XML and

997
00:54:51,770 --> 00:54:59,130
certain files where there are quite a

998
00:54:55,620 --> 00:55:01,500
lot of data for e for some period of

999
00:54:59,130 --> 00:55:03,180
time and before it and after

1000
00:55:01,500 --> 00:55:04,470
there's not a lot of data so you take a

1001
00:55:03,180 --> 00:55:06,330
closer look where you can find some

1002
00:55:04,470 --> 00:55:09,779
interesting food for instance we found

1003
00:55:06,330 --> 00:55:19,920
our secret sauce it's a description of

1004
00:55:09,780 --> 00:55:21,750
fuses for the SOC so this by the way is

1005
00:55:19,920 --> 00:55:23,910
about quantum quantum it's one of the

1006
00:55:21,750 --> 00:55:25,770
obsolete systems also we found the

1007
00:55:23,910 --> 00:55:29,460
debugging mode that includes

1008
00:55:25,770 --> 00:55:33,930
deterministic modes for the random

1009
00:55:29,460 --> 00:55:40,080
number generation a couple of words

1010
00:55:33,930 --> 00:55:44,819
about security there are three maybe

1011
00:55:40,080 --> 00:55:47,730
four ways of deblocking so read lock for

1012
00:55:44,820 --> 00:55:54,330
infill engineers orange for engineers

1013
00:55:47,730 --> 00:55:55,950
and providers Green applies to platforms

1014
00:55:54,330 --> 00:56:00,930
that you buy in stores they're locked in

1015
00:55:55,950 --> 00:56:03,270
some way and also there's white access

1016
00:56:00,930 --> 00:56:06,779
level that perhaps only these are needs

1017
00:56:03,270 --> 00:56:09,599
we've also discovered that it looks like

1018
00:56:06,780 --> 00:56:12,359
there's a fuse that allows disabling

1019
00:56:09,599 --> 00:56:16,230
visa on production systems but as you

1020
00:56:12,359 --> 00:56:18,690
can will see in the future or have seen

1021
00:56:16,230 --> 00:56:21,589
in demos these are not the platforms

1022
00:56:18,690 --> 00:56:26,000
where it works so how it can all be

1023
00:56:21,589 --> 00:56:30,200
enabled two ways firstly via the

1024
00:56:26,000 --> 00:56:34,980
vulnerable you can get our github down

1025
00:56:30,200 --> 00:56:37,950
load the upgraded software that we

1026
00:56:34,980 --> 00:56:42,599
posted quite recently write it down on

1027
00:56:37,950 --> 00:56:47,430
your platform and from then on you can

1028
00:56:42,599 --> 00:56:51,330
experiment read the logs observe things

1029
00:56:47,430 --> 00:56:55,609
you have full access to visa and a

1030
00:56:51,330 --> 00:56:58,529
running platform so bring itself up for

1031
00:56:55,609 --> 00:57:03,710
operating systems will be lost you can

1032
00:56:58,530 --> 00:57:03,710
trace can I have a mail a a demo please

1033
00:57:04,220 --> 00:57:12,470
so what we're going to do here so we're

1034
00:57:08,220 --> 00:57:16,319
going to trace addresses

1035
00:57:12,470 --> 00:57:21,149
physical memory so on the right we have

1036
00:57:16,320 --> 00:57:25,380
read write everything that reads values

1037
00:57:21,150 --> 00:57:28,140
based by address we stop Java or we

1038
00:57:25,380 --> 00:57:31,860
enable visa after that we download the

1039
00:57:28,140 --> 00:57:34,859
data to the computer so this has

1040
00:57:31,860 --> 00:57:37,440
happened base gigabytes have flown over

1041
00:57:34,860 --> 00:57:40,650
than several seconds between it's just

1042
00:57:37,440 --> 00:57:44,690
about the physical address a tracing so

1043
00:57:40,650 --> 00:57:49,160
what we see from physical addresses is

1044
00:57:44,690 --> 00:57:54,330
what goes so within these two seconds

1045
00:57:49,160 --> 00:57:58,980
after we run it we see that we stopped

1046
00:57:54,330 --> 00:58:00,630
and uploaded visa so we loaded here and

1047
00:57:58,980 --> 00:58:04,440
we're looking for the address we're

1048
00:58:00,630 --> 00:58:09,090
seeking so that's basically it 77 see

1049
00:58:04,440 --> 00:58:11,430
586 exactly the same address that we

1050
00:58:09,090 --> 00:58:16,010
tried everything reads can I switch back

1051
00:58:11,430 --> 00:58:19,430
to the presentation so we believe that

1052
00:58:16,010 --> 00:58:22,950
it can be enabled through other

1053
00:58:19,430 --> 00:58:23,580
vulnerabilities and we're a couple of

1054
00:58:22,950 --> 00:58:26,370
times a year

1055
00:58:23,580 --> 00:58:29,370
we're getting more and more of them you

1056
00:58:26,370 --> 00:58:31,470
can write an exploit that activates at

1057
00:58:29,370 --> 00:58:35,490
all we've also found out there's quite a

1058
00:58:31,470 --> 00:58:43,169
curious thing if you have fuses that

1059
00:58:35,490 --> 00:58:46,709
have that I haven't been programmed so

1060
00:58:43,170 --> 00:58:48,420
programmed fuses is bad especially for

1061
00:58:46,710 --> 00:58:50,550
mobile platforms because this is where

1062
00:58:48,420 --> 00:58:54,600
you can do it you can sign your unlock

1063
00:58:50,550 --> 00:58:57,270
token and you can activate orange unlock

1064
00:58:54,600 --> 00:59:00,990
and then for some reason orange and lock

1065
00:58:57,270 --> 00:59:02,700
will throw JTAG am here at the mobile

1066
00:59:00,990 --> 00:59:04,470
platform so nothing like there and

1067
00:59:02,700 --> 00:59:06,870
desktops or servers and Bert on mobile

1068
00:59:04,470 --> 00:59:08,700
platforms this is the way it works we've

1069
00:59:06,870 --> 00:59:10,850
talked with Intel about this but

1070
00:59:08,700 --> 00:59:14,160
inter-cell it's a design feature and

1071
00:59:10,850 --> 00:59:20,250
we've also found in curious peculiarity

1072
00:59:14,160 --> 00:59:23,759
that a special password is embedded in

1073
00:59:20,250 --> 00:59:27,690
the bridges that loves you

1074
00:59:23,760 --> 00:59:30,180
to do hardware base and look to connect

1075
00:59:27,690 --> 00:59:33,990
the adapter so it looks you can see it

1076
00:59:30,180 --> 00:59:36,660
from the XML file so does it look so you

1077
00:59:33,990 --> 00:59:39,720
have some few stations in a production

1078
00:59:36,660 --> 00:59:43,890
that's called for unique ID unique

1079
00:59:39,720 --> 00:59:49,200
password from the Intel server then it

1080
00:59:43,890 --> 00:59:51,540
birth this value into a chip and as soon

1081
00:59:49,200 --> 00:59:53,819
as you need to debug something on the

1082
00:59:51,540 --> 00:59:57,480
production platform and I emphasize

1083
00:59:53,820 --> 01:00:00,090
production so a special trace person

1084
00:59:57,480 --> 01:00:05,910
will connect an adapter to it or just a

1085
01:00:00,090 --> 01:00:09,870
USB cable will ask for some special

1086
01:00:05,910 --> 01:00:14,129
clothes Intel server and this server

1087
01:00:09,870 --> 01:00:16,109
will send it authenticated and send them

1088
01:00:14,130 --> 01:00:17,940
the password after that the parcel was

1089
01:00:16,110 --> 01:00:19,980
sent to the chip and you have read

1090
01:00:17,940 --> 01:00:23,190
unlock you'll be able to trace signals

1091
01:00:19,980 --> 01:00:26,370
you'll be able to gain access to

1092
01:00:23,190 --> 01:00:27,480
internal CPU States bridge states

1093
01:00:26,370 --> 01:00:30,660
whatever you want

1094
01:00:27,480 --> 01:00:34,200
we found a presentation well the former

1095
01:00:30,660 --> 01:00:40,759
Intel engineer is writing exactly how

1096
01:00:34,200 --> 01:00:40,759
about how he uses this thing he analyzed

1097
01:00:40,970 --> 01:00:48,750
power consumption the CPU the

1098
01:00:45,150 --> 01:00:50,790
presentation has been taken from github

1099
01:00:48,750 --> 01:00:52,860
after we publish it there remove the

1100
01:00:50,790 --> 01:00:55,410
site and everything has also been

1101
01:00:52,860 --> 01:00:58,440
removed from the web archive so once

1102
01:00:55,410 --> 01:01:01,460
again I'd like to say we didn't get this

1103
01:00:58,440 --> 01:01:05,520
pass without it's hashed its hashes

1104
01:01:01,460 --> 01:01:08,040
containing the fuses and it's unique but

1105
01:01:05,520 --> 01:01:10,620
we are basically confident and it does a

1106
01:01:08,040 --> 01:01:12,300
run like that on the production platform

1107
01:01:10,620 --> 01:01:14,940
and basically you can try it with

1108
01:01:12,300 --> 01:01:17,340
hardware there's just one command that

1109
01:01:14,940 --> 01:01:19,740
needs to be instructions if you skip

1110
01:01:17,340 --> 01:01:21,780
this transition you'll also have a real

1111
01:01:19,740 --> 01:01:22,850
block on the bridge and that's basically

1112
01:01:21,780 --> 01:01:27,120
it

1113
01:01:22,850 --> 01:01:30,890
so the main thing briefly the main idea

1114
01:01:27,120 --> 01:01:32,940
is that visa is not really about

1115
01:01:30,890 --> 01:01:35,040
vulnerability this is more about

1116
01:01:32,940 --> 01:01:36,170
research you want to take a look at how

1117
01:01:35,040 --> 01:01:41,270
it works

1118
01:01:36,170 --> 01:01:45,140
the hood so you do it and you just need

1119
01:01:41,270 --> 01:01:47,630
to take you go and take a look and you

1120
01:01:45,140 --> 01:01:50,660
can do it on production platforms yes

1121
01:01:47,630 --> 01:01:54,470
indeed there's a certain password visa

1122
01:01:50,660 --> 01:01:56,720
allows you capturing them at a high

1123
01:01:54,470 --> 01:01:58,700
clock frequency he don't need taking

1124
01:01:56,720 --> 01:02:00,319
samples so you don't need to have very

1125
01:01:58,700 --> 01:02:02,750
expensive equipment

1126
01:02:00,319 --> 01:02:05,270
so it looks like there must be a bit in

1127
01:02:02,750 --> 01:02:07,430
the fuses that disables that on

1128
01:02:05,270 --> 01:02:08,839
production platforms but for an

1129
01:02:07,430 --> 01:02:11,750
acceptable reason they don't never

1130
01:02:08,839 --> 01:02:13,460
install it because just in case

1131
01:02:11,750 --> 01:02:16,970
so unfortunately we've run out of time

1132
01:02:13,460 --> 01:02:20,260
so if you have any questions I think we

1133
01:02:16,970 --> 01:02:20,259
can take them offline

