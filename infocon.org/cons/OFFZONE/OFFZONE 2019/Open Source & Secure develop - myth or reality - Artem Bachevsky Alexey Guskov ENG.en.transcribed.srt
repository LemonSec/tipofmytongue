1
00:00:05,370 --> 00:00:13,259
khadijah same preview hi everyone my

2
00:00:09,269 --> 00:00:17,660
name is Alexey and my Krieger term we

3
00:00:13,259 --> 00:00:19,500
would like to tell you how we analyze

4
00:00:17,660 --> 00:00:22,740
dependencies in our development

5
00:00:19,500 --> 00:00:28,099
lifecycle which challenges we faced

6
00:00:22,740 --> 00:00:36,450
share our experience and explain how we

7
00:00:28,099 --> 00:00:38,430
conquered a couple of words we website

8
00:00:36,450 --> 00:00:41,280
practitioner's for quite a while this is

9
00:00:38,430 --> 00:00:44,820
our second of zone presentation I see

10
00:00:41,280 --> 00:00:49,379
familiar faces people who saw our first

11
00:00:44,820 --> 00:00:52,739
presentation it's great that app sack is

12
00:00:49,379 --> 00:00:56,099
a popular topic that is interesting to

13
00:00:52,739 --> 00:01:01,890
many not only to us we've been doing a

14
00:00:56,100 --> 00:01:04,979
number of researchers in a knapsack and

15
00:01:01,890 --> 00:01:09,930
were integrating some security practices

16
00:01:04,979 --> 00:01:12,360
into our development processes we'll

17
00:01:09,930 --> 00:01:15,750
talk about open source and open sourced

18
00:01:12,360 --> 00:01:20,369
event dependence is it's everywhere now

19
00:01:15,750 --> 00:01:27,360
it's used in many languages and many

20
00:01:20,369 --> 00:01:30,030
platforms there's many packet managers

21
00:01:27,360 --> 00:01:34,799
for open source java you probably cannot

22
00:01:30,030 --> 00:01:39,180
even count of javascript different

23
00:01:34,799 --> 00:01:44,939
managers and big Symbian yum and others

24
00:01:39,180 --> 00:01:50,310
and python and go it's easier the number

25
00:01:44,939 --> 00:01:55,740
of those facts is growing and in 2018

26
00:01:50,310 --> 00:01:59,670
Marvin Center has grown his doubled in

27
00:01:55,740 --> 00:02:02,869
size which is significant it's very

28
00:01:59,670 --> 00:02:06,240
popular in development and the reason is

29
00:02:02,869 --> 00:02:08,580
simple open source allows to

30
00:02:06,240 --> 00:02:10,098
significantly reduce the time for

31
00:02:08,580 --> 00:02:14,389
development

32
00:02:10,098 --> 00:02:18,048
and everyone benefits from with its come

33
00:02:14,389 --> 00:02:22,549
it's convenient everyone is happy but

34
00:02:18,049 --> 00:02:27,859
you need not forget about security Hamas

35
00:02:22,549 --> 00:02:30,170
has a nine point eight nine of using

36
00:02:27,859 --> 00:02:36,769
components with known vulnerabilities

37
00:02:30,170 --> 00:02:40,099
and it's appeared separately in 2013 and

38
00:02:36,769 --> 00:02:47,030
even though it is one of the last it's

39
00:02:40,099 --> 00:02:51,918
number nine it is still quite important

40
00:02:47,030 --> 00:02:56,629
and should not be ignored as often even

41
00:02:51,919 --> 00:03:00,109
in small projects you can come across a

42
00:02:56,629 --> 00:03:04,849
lot of open-source libraries some which

43
00:03:00,109 --> 00:03:10,430
will be deprecated and old and contain

44
00:03:04,849 --> 00:03:13,819
some cbhe that weighs statistical even a

45
00:03:10,430 --> 00:03:21,220
small application can contain up to 60%

46
00:03:13,819 --> 00:03:25,790
of open source so this is a widespread

47
00:03:21,220 --> 00:03:26,449
occurrence and there was pain ix happens

48
00:03:25,790 --> 00:03:29,418
quite often

49
00:03:26,449 --> 00:03:32,209
besides the dependence is that the

50
00:03:29,419 --> 00:03:41,139
developers use there is a lot of

51
00:03:32,209 --> 00:03:41,139
indirect dependences that trigger direct

52
00:03:43,299 --> 00:03:51,189
vulnerabilities from others like have a

53
00:03:47,870 --> 00:03:53,870
look at this calculator app it has

54
00:03:51,189 --> 00:04:00,650
dependencies with notifications and data

55
00:03:53,870 --> 00:04:05,590
processing that will also include three

56
00:04:00,650 --> 00:04:09,189
jars and which one of them will be MySQL

57
00:04:05,590 --> 00:04:12,349
library and that now analyzer uses and

58
00:04:09,189 --> 00:04:17,199
application will be vulnerable even

59
00:04:12,349 --> 00:04:20,789
though we use two vulnerabilities the

60
00:04:17,199 --> 00:04:28,060
dependencies that are not vulnerable

61
00:04:20,789 --> 00:04:33,180
so this is non-secure statistically 78%

62
00:04:28,060 --> 00:04:37,840
of cwe are in indirect dependence yes

63
00:04:33,180 --> 00:04:42,630
this is why it's so important to use

64
00:04:37,840 --> 00:04:47,318
specific tools designed for this and not

65
00:04:42,630 --> 00:04:50,770
rely on your competence and the

66
00:04:47,319 --> 00:04:52,990
libraries you've authored be able to

67
00:04:50,770 --> 00:04:56,530
monitor those indirect dependencies that

68
00:04:52,990 --> 00:04:59,159
are not vivid and obvious from the

69
00:04:56,530 --> 00:05:03,609
beginning so you use those business

70
00:04:59,159 --> 00:05:08,610
special tools that create those lists

71
00:05:03,610 --> 00:05:08,610
and compare them to public utilities

72
00:05:08,970 --> 00:05:20,409
open source security practice is the

73
00:05:16,330 --> 00:05:22,870
practice aimed at securing the open

74
00:05:20,409 --> 00:05:28,000
source dependencies this library has two

75
00:05:22,870 --> 00:05:32,409
approaches first it's just updating all

76
00:05:28,000 --> 00:05:35,500
the dependencies you have to latest

77
00:05:32,409 --> 00:05:43,780
version and we spend a lot of resources

78
00:05:35,500 --> 00:05:49,419
here to optimize the code to have some

79
00:05:43,780 --> 00:05:56,159
functionality or optimize for for it but

80
00:05:49,419 --> 00:06:00,460
we also get secured product because

81
00:05:56,159 --> 00:06:05,110
developers will add some fixes that

82
00:06:00,460 --> 00:06:08,500
don't have any public series and they

83
00:06:05,110 --> 00:06:12,250
will be closed in in the update so we

84
00:06:08,500 --> 00:06:15,370
close this risk and second option is

85
00:06:12,250 --> 00:06:19,000
when we only update the libraries that

86
00:06:15,370 --> 00:06:23,400
have vulnerabilities the first we spent

87
00:06:19,000 --> 00:06:23,400
less effort and time of developers

88
00:06:24,939 --> 00:06:31,370
but we still have the risk of having bad

89
00:06:27,889 --> 00:06:39,650
bugs that are not closed that are not

90
00:06:31,370 --> 00:06:42,560
public and we have to cover this this

91
00:06:39,650 --> 00:06:52,370
slide has our own main SDLC practices

92
00:06:42,560 --> 00:06:55,099
used last November we were talking how

93
00:06:52,370 --> 00:06:58,999
we've implemented just statistical

94
00:06:55,099 --> 00:07:08,628
analysis now the colleagues are scaling

95
00:06:58,999 --> 00:07:14,810
and piloting tests DST solutions and now

96
00:07:08,629 --> 00:07:17,029
we are interested in the horses it's

97
00:07:14,810 --> 00:07:19,189
situated in the beginning of our

98
00:07:17,029 --> 00:07:26,210
practices as the resource requirements

99
00:07:19,189 --> 00:07:28,610
are for implementation are no more than

100
00:07:26,210 --> 00:07:35,388
force a stand it's a baseline that does

101
00:07:28,610 --> 00:07:42,159
not replace SSD and have quite low false

102
00:07:35,389 --> 00:07:51,020
positive rate same as with SAS we use

103
00:07:42,159 --> 00:07:53,860
quality gates and same for us they the

104
00:07:51,020 --> 00:07:57,349
flexible quality gates are important a

105
00:07:53,860 --> 00:08:02,539
small comparison of practices between

106
00:07:57,349 --> 00:08:06,909
OSS and sassed first of all with OSS we

107
00:08:02,539 --> 00:08:10,878
don't need to scan the whole source code

108
00:08:06,909 --> 00:08:14,330
most of the time it's enough to scan the

109
00:08:10,879 --> 00:08:19,999
configuration for us to understand which

110
00:08:14,330 --> 00:08:23,210
libraries we use sure there we are

111
00:08:19,999 --> 00:08:28,249
yeah files so we don't analyze the whole

112
00:08:23,210 --> 00:08:30,589
code and these instruments would use

113
00:08:28,249 --> 00:08:32,800
less time for analysis and less

114
00:08:30,589 --> 00:08:32,799
resources

115
00:08:33,948 --> 00:08:43,899
here comes the second point more simple

116
00:08:41,539 --> 00:08:47,889
integration and deployment and support

117
00:08:43,899 --> 00:08:50,899
as they don't scan the source code and

118
00:08:47,889 --> 00:08:53,689
only use the information about the

119
00:08:50,899 --> 00:08:56,930
libraries used they work faster and

120
00:08:53,689 --> 00:09:03,498
require less resources so we don't need

121
00:08:56,930 --> 00:09:06,769
to deploy some big setups or significant

122
00:09:03,499 --> 00:09:16,790
server load in some cases we can even

123
00:09:06,769 --> 00:09:19,430
use cloud solutions and not support our

124
00:09:16,790 --> 00:09:26,719
own infrastructure and it's easier to

125
00:09:19,430 --> 00:09:30,709
fix bugs statistically 97% sigue is half

126
00:09:26,720 --> 00:09:36,139
of their fixes and all patches and the

127
00:09:30,709 --> 00:09:40,369
developers can just update the library

128
00:09:36,139 --> 00:09:43,939
version and everything will be fine or a

129
00:09:40,370 --> 00:09:48,499
more complex situation just apply so

130
00:09:43,939 --> 00:09:52,339
much in a couple of cases you would need

131
00:09:48,499 --> 00:09:56,600
to fix it by yourself or place the

132
00:09:52,339 --> 00:10:02,959
library or refrain from using it but

133
00:09:56,600 --> 00:10:06,370
with sussed we have a need to understand

134
00:10:02,959 --> 00:10:10,589
each and every baggage never defecate to

135
00:10:06,370 --> 00:10:15,390
understand how we can fix many of them

136
00:10:10,590 --> 00:10:18,640
and the resource requirements are higher

137
00:10:15,390 --> 00:10:28,110
with OSS the false positive rate is

138
00:10:18,640 --> 00:10:30,670
lower because we is for CW's we use

139
00:10:28,110 --> 00:10:35,260
specific libraries that we take from

140
00:10:30,670 --> 00:10:38,740
configs and the Seavey's are mapped to

141
00:10:35,260 --> 00:10:42,670
specific library versions so compared

142
00:10:38,740 --> 00:10:45,010
with sussed it's simpler there's some

143
00:10:42,670 --> 00:10:48,250
approaches if we consolidate the results

144
00:10:45,010 --> 00:10:52,780
using the tools to merge them triage

145
00:10:48,250 --> 00:10:56,470
them we use custom false-positive rules

146
00:10:52,780 --> 00:11:02,860
then we can attain this zero false

147
00:10:56,470 --> 00:11:06,820
positive rate also as we is this

148
00:11:02,860 --> 00:11:10,120
scanning is done Foster doesn't scan the

149
00:11:06,820 --> 00:11:14,980
whole code we can implement it as part

150
00:11:10,120 --> 00:11:19,780
of the build and without affecting the

151
00:11:14,980 --> 00:11:23,830
time to market without affecting the

152
00:11:19,780 --> 00:11:26,760
team and everyone would benefit from it

153
00:11:23,830 --> 00:11:29,500
[Music]

154
00:11:26,760 --> 00:11:32,650
also to analyze the results we don't

155
00:11:29,500 --> 00:11:37,120
need the team of experts it's enough to

156
00:11:32,650 --> 00:11:42,030
have a qualified developer first assess

157
00:11:37,120 --> 00:11:51,130
where you of needed a lot of time to

158
00:11:42,030 --> 00:11:55,630
make decision about some bug it spend a

159
00:11:51,130 --> 00:11:58,450
lot of time and resources for this so

160
00:11:55,630 --> 00:12:01,290
you need technical expertise - for this

161
00:11:58,450 --> 00:12:07,060
so we've analysed the experience of many

162
00:12:01,290 --> 00:12:09,689
companies cleans and - the integration

163
00:12:07,060 --> 00:12:13,270
experience for different tools and

164
00:12:09,690 --> 00:12:14,890
identified three maturity levels for our

165
00:12:13,270 --> 00:12:18,010
search integration into development

166
00:12:14,890 --> 00:12:21,860
process first would be the simplest one

167
00:12:18,010 --> 00:12:27,740
I call it LSS classic

168
00:12:21,860 --> 00:12:31,710
in essence it implies having a separate

169
00:12:27,740 --> 00:12:36,770
Jenkins build that is triggered during

170
00:12:31,710 --> 00:12:45,270
the main build it checkouts the code and

171
00:12:36,770 --> 00:12:49,319
runs the analysis we get the results the

172
00:12:45,270 --> 00:12:54,930
main deployment builds the code triggers

173
00:12:49,320 --> 00:13:01,110
our built our that runs the OSS and then

174
00:12:54,930 --> 00:13:04,349
it reruns the build so we don't need

175
00:13:01,110 --> 00:13:08,880
extra resources to support Jenkins to

176
00:13:04,350 --> 00:13:14,130
support our separate checkout etc and we

177
00:13:08,880 --> 00:13:17,850
get those results separately from the

178
00:13:14,130 --> 00:13:21,300
main build so we cannot affect it we

179
00:13:17,850 --> 00:13:24,080
cannot use quality gates is the simplest

180
00:13:21,300 --> 00:13:28,709
way but not the most convenient one

181
00:13:24,080 --> 00:13:34,620
second option would be to integrate it

182
00:13:28,710 --> 00:13:39,150
into the pipe and as our - usually works

183
00:13:34,620 --> 00:13:41,490
quite fast we can build the SAS analysis

184
00:13:39,150 --> 00:13:45,689
into the pipe our dependence analysis

185
00:13:41,490 --> 00:13:47,550
and assassin to the pipe avoid deploying

186
00:13:45,690 --> 00:13:49,880
some specific infrastructure and

187
00:13:47,550 --> 00:13:52,530
spending resources on that with just

188
00:13:49,880 --> 00:13:57,600
during the main check Houghton build

189
00:13:52,530 --> 00:14:02,819
stage we run our scan and get the

190
00:13:57,600 --> 00:14:05,640
results having the chance to check the

191
00:14:02,820 --> 00:14:09,840
state of the pipeline change it use

192
00:14:05,640 --> 00:14:14,880
quality gates avoid spending extra

193
00:14:09,840 --> 00:14:22,830
resources it's a better option and the

194
00:14:14,880 --> 00:14:26,980
third way which we call proactive OSS in

195
00:14:22,830 --> 00:14:32,830
essence if you have information about

196
00:14:26,980 --> 00:14:34,780
the commands and libraries and years for

197
00:14:32,830 --> 00:14:40,120
which projects we can proactively

198
00:14:34,780 --> 00:14:45,610
monitor heading some cities to the prom

199
00:14:40,120 --> 00:14:48,970
and had our own rules analyzed library

200
00:14:45,610 --> 00:14:54,580
information triage them and find some

201
00:14:48,970 --> 00:15:01,140
massive is the spur actively helping the

202
00:14:54,580 --> 00:15:01,140
teams to fix the bugs on their side

203
00:15:02,580 --> 00:15:08,230
looks quite simple there is a project

204
00:15:06,190 --> 00:15:15,240
called dependable

205
00:15:08,230 --> 00:15:21,250
maybe's knows it it's part of github now

206
00:15:15,240 --> 00:15:28,500
it's a proactive what test analyzes the

207
00:15:21,250 --> 00:15:32,020
commits and the code in the stands the

208
00:15:28,500 --> 00:15:34,030
updated flavors and if it finds them it

209
00:15:32,020 --> 00:15:39,510
sends you a pull request for this

210
00:15:34,030 --> 00:15:43,240
repository with a fix so if your project

211
00:15:39,510 --> 00:15:45,490
is not a special test project with all

212
00:15:43,240 --> 00:15:49,120
libraries if you really want everything

213
00:15:45,490 --> 00:15:53,440
to be secure then you can poke it and

214
00:15:49,120 --> 00:15:59,890
merge this pull with get back and get

215
00:15:53,440 --> 00:16:04,360
the fix with a secure beta libraries so

216
00:15:59,890 --> 00:16:08,500
we hope that we will be able to create

217
00:16:04,360 --> 00:16:14,440
something like this for ourselves it's a

218
00:16:08,500 --> 00:16:17,470
cool stuff and during the implementation

219
00:16:14,440 --> 00:16:21,160
of this practice for a car company we

220
00:16:17,470 --> 00:16:24,780
faced a lot of challenges we we have a

221
00:16:21,160 --> 00:16:27,939
lot of teams developers a lot of

222
00:16:24,780 --> 00:16:30,390
programming languages environments

223
00:16:27,940 --> 00:16:30,390
stacks

224
00:16:30,630 --> 00:16:40,420
and on the first stage we had a classic

225
00:16:38,200 --> 00:16:44,380
approach and with this approach our

226
00:16:40,420 --> 00:16:47,500
builds were outdated very fast and the

227
00:16:44,380 --> 00:16:50,589
scanning was set up in a way that the

228
00:16:47,500 --> 00:16:55,720
teams would have new positive branches

229
00:16:50,589 --> 00:16:59,740
and make a make a suit waste our

230
00:16:55,720 --> 00:17:01,870
resources on wrong results so we decided

231
00:16:59,740 --> 00:17:13,449
we need to move to a pipeline approach

232
00:17:01,870 --> 00:17:16,240
and DevOps and us as there were only two

233
00:17:13,449 --> 00:17:20,679
people are terming myself doing all that

234
00:17:16,240 --> 00:17:23,949
integration we needed flexible and

235
00:17:20,679 --> 00:17:26,829
scalable solution that we would be able

236
00:17:23,949 --> 00:17:31,120
to apply to a lot of developers and

237
00:17:26,829 --> 00:17:33,639
bills we faced challenges same

238
00:17:31,120 --> 00:17:39,149
challenges when we were integrating SSD

239
00:17:33,640 --> 00:17:41,860
and here we actually went the same way

240
00:17:39,150 --> 00:17:45,240
quite formulating the main requirements

241
00:17:41,860 --> 00:17:52,030
same as with SAS when you have a service

242
00:17:45,240 --> 00:17:56,860
that the team will be able to attach for

243
00:17:52,030 --> 00:18:00,690
their build themselves without any comes

244
00:17:56,860 --> 00:18:03,939
from outside so we need to have

245
00:18:00,690 --> 00:18:07,000
experience portal description that the

246
00:18:03,940 --> 00:18:12,160
team will be able to run in themselves

247
00:18:07,000 --> 00:18:16,270
if they wish to be more secure and also

248
00:18:12,160 --> 00:18:20,260
in our case we have a cross segment so

249
00:18:16,270 --> 00:18:26,820
we cannot use any external internet

250
00:18:20,260 --> 00:18:33,660
resources can't use a lot of quality

251
00:18:26,820 --> 00:18:33,659
solutions library hashes stuff like that

252
00:18:35,379 --> 00:18:40,519
our social needs to be flexible and

253
00:18:38,779 --> 00:18:44,450
agile unscalable

254
00:18:40,519 --> 00:18:50,179
and sport for litigates to work inside

255
00:18:44,450 --> 00:18:55,309
the internal segment we've analyzed a

256
00:18:50,179 --> 00:19:04,639
lot of tools tested the home of

257
00:18:55,309 --> 00:19:07,999
commercial and free real pro for all

258
00:19:04,639 --> 00:19:11,590
most supportive based on abilities many

259
00:19:07,999 --> 00:19:19,999
companies would have their own teams

260
00:19:11,590 --> 00:19:24,039
doing research those teams checking

261
00:19:19,999 --> 00:19:29,169
public repositories of open source for

262
00:19:24,039 --> 00:19:37,309
having new defects don't have cwe

263
00:19:29,169 --> 00:19:40,759
actualize the base just cool so many of

264
00:19:37,309 --> 00:19:44,690
those tools commercial tools have a

265
00:19:40,759 --> 00:20:00,559
licensing checks integrated which is

266
00:19:44,690 --> 00:20:03,470
also very useful so needed with OWS P

267
00:20:00,559 --> 00:20:11,149
dependency checker if you haven't seen

268
00:20:03,470 --> 00:20:15,470
it have a look Mangan see checker had a

269
00:20:11,149 --> 00:20:22,668
lot of benefits it's it's open-source it

270
00:20:15,470 --> 00:20:28,549
has you can look at the cold commercial

271
00:20:22,669 --> 00:20:30,259
tools would of difficulties we cannot

272
00:20:28,549 --> 00:20:32,210
solve them without the working with the

273
00:20:30,259 --> 00:20:36,600
vendor you need to work together with

274
00:20:32,210 --> 00:20:37,780
them and with OBC

275
00:20:36,600 --> 00:20:46,219
[Music]

276
00:20:37,780 --> 00:20:48,649
you see cool you can run some fix on

277
00:20:46,220 --> 00:20:51,190
your side if it's useful for everyone

278
00:20:48,650 --> 00:20:58,280
then you can commit it to the community

279
00:20:51,190 --> 00:21:07,120
I use the custom wagon version only for

280
00:20:58,280 --> 00:21:15,710
yourself which is also fine as to our

281
00:21:07,120 --> 00:21:18,530
cases updated it is not published and we

282
00:21:15,710 --> 00:21:23,470
can use the community help and without

283
00:21:18,530 --> 00:21:23,470
the C it can work offline

284
00:21:23,650 --> 00:21:32,800
it can download a fine database we

285
00:21:28,100 --> 00:21:35,649
should use this we just update it once

286
00:21:32,800 --> 00:21:39,860
every 24 hours

287
00:21:35,650 --> 00:21:42,350
and we are fine with this we already see

288
00:21:39,860 --> 00:21:48,909
it has a lot of integration with

289
00:21:42,350 --> 00:21:53,780
different tools and platforms and also

290
00:21:48,910 --> 00:21:59,360
it's big plus is cool integration with

291
00:21:53,780 --> 00:22:06,290
Jenkins Jenkins plugin that has a DC

292
00:21:59,360 --> 00:22:09,350
core so we don't need with Jenkins to

293
00:22:06,290 --> 00:22:12,950
deploy our separate server support it

294
00:22:09,350 --> 00:22:18,439
monitor its availability the whole

295
00:22:12,950 --> 00:22:22,910
analysis is done on the team side using

296
00:22:18,440 --> 00:22:28,730
Jenkins agent and we save our resources

297
00:22:22,910 --> 00:22:35,870
or save our time and this tool works

298
00:22:28,730 --> 00:22:38,860
very fast so we like it we're really

299
00:22:35,870 --> 00:22:43,129
happy with using it

300
00:22:38,860 --> 00:22:48,649
also after comparing the results of

301
00:22:43,130 --> 00:22:51,710
those we were satisfied with all the see

302
00:22:48,650 --> 00:22:59,720
results and decided to use it we're

303
00:22:51,710 --> 00:23:02,930
happy with it in essence by choosing OTC

304
00:22:59,720 --> 00:23:06,200
we started thinking how we can integrate

305
00:23:02,930 --> 00:23:12,410
it into existing infrastructure now in

306
00:23:06,200 --> 00:23:15,800
the solutions 18 forces probably thing

307
00:23:12,410 --> 00:23:17,900
to be working flawlessly how we can

308
00:23:15,800 --> 00:23:19,960
integrate it with the security

309
00:23:17,900 --> 00:23:24,500
application lifecycle management

310
00:23:19,960 --> 00:23:29,600
every company the security manager so we

311
00:23:24,500 --> 00:23:33,700
also have it and we went the last way

312
00:23:29,600 --> 00:23:38,810
using the shared library and groove and

313
00:23:33,700 --> 00:23:42,040
integrating it HM we'll talk a bit about

314
00:23:38,810 --> 00:23:48,530
the challenges we faced in integration

315
00:23:42,040 --> 00:23:53,210
hi everyone I see known faces in the

316
00:23:48,530 --> 00:23:56,420
home with some of people would know how

317
00:23:53,210 --> 00:23:59,180
the process works in our dev cycles and

318
00:23:56,420 --> 00:24:01,610
for those who don't I will briefly tell

319
00:23:59,180 --> 00:24:04,460
the story all the members of our

320
00:24:01,610 --> 00:24:10,250
infrastructure represented here of CI

321
00:24:04,460 --> 00:24:16,130
manager Jenkins CVS version control from

322
00:24:10,250 --> 00:24:20,480
which the the current pipeline dakotas

323
00:24:16,130 --> 00:24:25,610
checked out then the importer groove

324
00:24:20,480 --> 00:24:29,950
library that calls our security

325
00:24:25,610 --> 00:24:29,949
application lifecycle manager where

326
00:24:30,670 --> 00:24:36,080
different meta information is sent part

327
00:24:33,650 --> 00:24:38,720
of it is taken from our Jenkins

328
00:24:36,080 --> 00:24:42,110
workspace it's hash of the current code

329
00:24:38,720 --> 00:24:45,860
it's a branch and repository and some of

330
00:24:42,110 --> 00:24:51,168
the metadata is read from the repository

331
00:24:45,860 --> 00:24:54,899
through Yama file that the teams place

332
00:24:51,169 --> 00:24:58,789
into their code to be integrated in

333
00:24:54,899 --> 00:25:03,809
their circles using this information

334
00:24:58,789 --> 00:25:06,450
some would decide whether we need to

335
00:25:03,809 --> 00:25:08,428
scan this code if we scanned it

336
00:25:06,450 --> 00:25:13,679
previously then we don't need to rescan

337
00:25:08,429 --> 00:25:17,700
it if we need the scanning it sends back

338
00:25:13,679 --> 00:25:22,019
a green light they okay the code goes

339
00:25:17,700 --> 00:25:24,090
for to some of the checkmarks manager

340
00:25:22,019 --> 00:25:28,200
and information what which checkmarks

341
00:25:24,090 --> 00:25:32,610
manager should be used as sin by sin and

342
00:25:28,200 --> 00:25:37,019
we use number of them to understand the

343
00:25:32,610 --> 00:25:40,678
Lord and as checkmarks has limitation on

344
00:25:37,019 --> 00:25:49,379
the number of threads and can scan the

345
00:25:40,679 --> 00:25:54,659
end by using the integrated two for

346
00:25:49,379 --> 00:25:59,070
checkmarks some curves the objective

347
00:25:54,659 --> 00:26:00,929
curves the sound and checks and source

348
00:25:59,070 --> 00:26:03,299
information of different sources

349
00:26:00,929 --> 00:26:07,289
services like quality gates and analytic

350
00:26:03,299 --> 00:26:11,179
systems by doing this we've got 90

351
00:26:07,289 --> 00:26:14,730
percent of the teams in our company

352
00:26:11,179 --> 00:26:17,279
ninety percent of pipes are integrated

353
00:26:14,730 --> 00:26:25,830
have our library integrated I in their

354
00:26:17,279 --> 00:26:27,990
pipe we had to use it definitely as it's

355
00:26:25,830 --> 00:26:30,658
a huge baseline to begin with and we add

356
00:26:27,990 --> 00:26:35,840
another function into a library that

357
00:26:30,659 --> 00:26:35,840
besides using sussed was also using OSS

358
00:26:36,289 --> 00:26:46,379
so we have a plugin for dependency

359
00:26:41,070 --> 00:26:49,408
checker for dependence checker as fast

360
00:26:46,379 --> 00:26:53,740
as a prerequisite if you are connected

361
00:26:49,409 --> 00:26:58,149
to sassed you can add OSS

362
00:26:53,740 --> 00:27:04,049
the plugin takes the source code from

363
00:26:58,149 --> 00:27:07,389
the workspace builds the dependencies

364
00:27:04,049 --> 00:27:10,210
and gathers the dependencies that are

365
00:27:07,390 --> 00:27:13,539
used in the source code goes to an

366
00:27:10,210 --> 00:27:15,899
offline database we have two databases

367
00:27:13,539 --> 00:27:19,270
and they are flying first time with

368
00:27:15,899 --> 00:27:28,178
Ministry of Interior and second is a

369
00:27:19,270 --> 00:27:33,549
JSON 4GS that is their database we just

370
00:27:28,179 --> 00:27:37,929
sent it over web the plug-in itself maps

371
00:27:33,549 --> 00:27:40,629
the dependencies to the vulnerabilities

372
00:27:37,929 --> 00:27:46,419
generates the report that we read and

373
00:27:40,630 --> 00:27:49,840
sent to sell now cell can also reply to

374
00:27:46,419 --> 00:27:52,870
requests from quality gates provide

375
00:27:49,840 --> 00:28:00,639
analytics and be an interface for triage

376
00:27:52,870 --> 00:28:05,469
for the teams which user stories the

377
00:28:00,640 --> 00:28:11,320
team and us as objective have what does

378
00:28:05,470 --> 00:28:13,779
the team need to adapt second they just

379
00:28:11,320 --> 00:28:16,539
need to add one string they need to want

380
00:28:13,779 --> 00:28:21,789
it of course they've had one string to

381
00:28:16,539 --> 00:28:27,158
their config saying run at 6 then says

382
00:28:21,789 --> 00:28:31,240
the configure run fast fix and the repos

383
00:28:27,159 --> 00:28:36,100
3 or the branch or the commit now you

384
00:28:31,240 --> 00:28:40,120
just need to copy this line change the

385
00:28:36,100 --> 00:28:46,719
function name now they are integrated

386
00:28:40,120 --> 00:28:48,399
with OSS practice then after the

387
00:28:46,720 --> 00:28:53,169
scanning is complete they will get a

388
00:28:48,399 --> 00:28:57,789
letter with a link to ourselves they

389
00:28:53,169 --> 00:29:01,120
will go to an interface for defect

390
00:28:57,789 --> 00:29:03,240
analysis mark the false positives false

391
00:29:01,120 --> 00:29:03,239
negatives

392
00:29:03,440 --> 00:29:07,820
[Music]

393
00:29:05,180 --> 00:29:11,000
they have results they know whether they

394
00:29:07,820 --> 00:29:19,040
are protected for us as a knapsack team

395
00:29:11,000 --> 00:29:22,610
we need to keep improving and raising

396
00:29:19,040 --> 00:29:25,420
the true positive rate and sure that we

397
00:29:22,610 --> 00:29:29,600
have less forces and update the

398
00:29:25,420 --> 00:29:33,250
databases we do is reference once and

399
00:29:29,600 --> 00:29:40,570
copy this to our internal segment and

400
00:29:33,250 --> 00:29:45,020
use this file there are negatives here

401
00:29:40,570 --> 00:29:49,520
in this solution almost dependency

402
00:29:45,020 --> 00:29:53,120
checker does not have any UI to sort

403
00:29:49,520 --> 00:29:56,180
through the defects despite like the

404
00:29:53,120 --> 00:29:59,149
commercial products that have such an

405
00:29:56,180 --> 00:30:05,000
interface where you can read through a

406
00:29:59,150 --> 00:30:06,650
lot of the defects and almost defendants

407
00:30:05,000 --> 00:30:10,820
checker doesn't provide anything like

408
00:30:06,650 --> 00:30:15,560
this we had a solution starting from vs

409
00:30:10,820 --> 00:30:20,510
classic we had such web interface where

410
00:30:15,560 --> 00:30:22,879
you could sort through the defects some

411
00:30:20,510 --> 00:30:26,450
was not only the deficit cops

412
00:30:22,880 --> 00:30:28,450
orchestrated it also has a web interface

413
00:30:26,450 --> 00:30:32,210
where you can manage the different

414
00:30:28,450 --> 00:30:36,470
practices and organize analytics and

415
00:30:32,210 --> 00:30:41,390
configure stuff and we've changed this

416
00:30:36,470 --> 00:30:48,140
interface we've added the function of 18

417
00:30:41,390 --> 00:30:49,970
new users we map them for their projects

418
00:30:48,140 --> 00:30:51,590
automatically to get access to this

419
00:30:49,970 --> 00:30:55,840
project they simply go to follow the

420
00:30:51,590 --> 00:31:02,179
link from email login according to their

421
00:30:55,840 --> 00:31:04,280
data and they get the possibility of to

422
00:31:02,180 --> 00:31:05,660
triage their own defects they choose the

423
00:31:04,280 --> 00:31:07,610
false positive defect do we need

424
00:31:05,660 --> 00:31:10,040
dividend to fix it or not they can

425
00:31:07,610 --> 00:31:12,290
export their results interior and a

426
00:31:10,040 --> 00:31:15,049
tracker to filter it somehow and by

427
00:31:12,290 --> 00:31:19,629
doing this we have solve

428
00:31:15,049 --> 00:31:24,470
problem with UI we as a company are

429
00:31:19,629 --> 00:31:26,779
using the quality gate in practice and

430
00:31:24,470 --> 00:31:29,600
we decided to build them exactly in a

431
00:31:26,779 --> 00:31:31,549
way as we have done it for sassed

432
00:31:29,600 --> 00:31:34,428
basically these are kind of threshold

433
00:31:31,549 --> 00:31:37,039
norms based on the number of defects of

434
00:31:34,429 --> 00:31:39,950
the high defects and the mid level and

435
00:31:37,039 --> 00:31:45,080
the low level defects and here we have a

436
00:31:39,950 --> 00:31:48,769
question how do we map defects from MPD

437
00:31:45,080 --> 00:31:54,519
for like their criticality there is a

438
00:31:48,769 --> 00:31:58,059
CBS s rating tool we've used the CBS s

439
00:31:54,519 --> 00:32:00,379
2.0 which enables to to map are the

440
00:31:58,059 --> 00:32:02,480
three critical levels low medium and

441
00:32:00,379 --> 00:32:05,019
high level works very simply we're

442
00:32:02,480 --> 00:32:07,970
looking at what the range of heart score

443
00:32:05,019 --> 00:32:10,539
basic Orange and get the criticality

444
00:32:07,970 --> 00:32:13,789
level there is the same now rating in

445
00:32:10,539 --> 00:32:15,769
3.0 version it has four levels there's

446
00:32:13,789 --> 00:32:18,830
also a critical level from nine to ten

447
00:32:15,769 --> 00:32:21,619
and for our purposes I would say that

448
00:32:18,830 --> 00:32:23,779
these three low medium and high levels

449
00:32:21,619 --> 00:32:26,749
are quite enough we also have a problem

450
00:32:23,779 --> 00:32:29,269
we have some defects which does not do

451
00:32:26,749 --> 00:32:36,019
not have any cbss course not retard GS

452
00:32:29,269 --> 00:32:37,669
or open SSL analyzer which is available

453
00:32:36,019 --> 00:32:39,460
in dependency checker when simply

454
00:32:37,669 --> 00:32:42,259
consider these to be their very high

455
00:32:39,460 --> 00:32:44,960
severity the percentage is not very high

456
00:32:42,259 --> 00:32:47,629
in the total number of defects so it is

457
00:32:44,960 --> 00:32:49,700
not it's not a big problem for teams to

458
00:32:47,629 --> 00:32:55,879
sort out these defects we believe it's

459
00:32:49,700 --> 00:32:58,850
quite admissible practice now as for

460
00:32:55,879 --> 00:33:02,379
using quality gates in the OSS practices

461
00:32:58,850 --> 00:33:05,869
in general we believe it's quite okay

462
00:33:02,379 --> 00:33:10,129
because always has has the low false

463
00:33:05,869 --> 00:33:14,449
positive rate so this should find

464
00:33:10,129 --> 00:33:17,509
understanding with developers quality

465
00:33:14,450 --> 00:33:22,539
case for team for teams look like to

466
00:33:17,509 --> 00:33:25,549
rest API one of them is the status one

467
00:33:22,539 --> 00:33:28,879
for a particular build assembly and the

468
00:33:25,549 --> 00:33:33,770
second one will give us the

469
00:33:28,880 --> 00:33:38,030
the develops weather we've gone through

470
00:33:33,770 --> 00:33:40,670
certain stage is our assembly bests in

471
00:33:38,030 --> 00:33:42,710
our own criteria in norms and does it

472
00:33:40,670 --> 00:33:47,000
pass through a high criteria and meet

473
00:33:42,710 --> 00:33:50,920
criteria level and the team is person

474
00:33:47,000 --> 00:33:53,570
commit hash and gets one of these

475
00:33:50,920 --> 00:33:56,330
results and then the teams may use these

476
00:33:53,570 --> 00:33:58,700
values for laying on the flats Nexus or

477
00:33:56,330 --> 00:34:01,120
in somewhere else maybe into other

478
00:33:58,700 --> 00:34:05,270
accounting system reporting system and

479
00:34:01,120 --> 00:34:07,879
when implementing our approach we face

480
00:34:05,270 --> 00:34:11,239
the number of challenges which were able

481
00:34:07,880 --> 00:34:13,310
to solve in to a certain extent and I

482
00:34:11,239 --> 00:34:18,560
guess the number one we had to deal with

483
00:34:13,310 --> 00:34:20,529
is the Jenkins Jenkins planning for OTC

484
00:34:18,560 --> 00:34:22,610
by default

485
00:34:20,530 --> 00:34:27,620
basically all important things are being

486
00:34:22,610 --> 00:34:30,920
configured in it like in a global

487
00:34:27,620 --> 00:34:33,589
checking settings in situation when I

488
00:34:30,920 --> 00:34:37,639
have a lot of champions with the whole

489
00:34:33,590 --> 00:34:39,410
bunch and agents which are on different

490
00:34:37,639 --> 00:34:42,830
operational systems and part of them can

491
00:34:39,409 --> 00:34:45,379
belong to teams and who knows what who

492
00:34:42,830 --> 00:34:47,650
is administrating these agents and/or

493
00:34:45,380 --> 00:34:50,110
Jenkins it's all becoming quite complex

494
00:34:47,650 --> 00:34:53,990
because you have to communicate somehow

495
00:34:50,110 --> 00:34:56,660
with one update in let's say URL or

496
00:34:53,989 --> 00:35:00,140
connection strain to offline database

497
00:34:56,659 --> 00:35:03,319
you have to ask everyone can I write it

498
00:35:00,140 --> 00:35:03,859
here updated here this process is not

499
00:35:03,320 --> 00:35:07,670
easy

500
00:35:03,860 --> 00:35:09,170
it cannot be supported so we decided to

501
00:35:07,670 --> 00:35:13,190
add such an option to be able to

502
00:35:09,170 --> 00:35:19,340
configure the settings namely connecting

503
00:35:13,190 --> 00:35:22,670
database be it a local retirees file in

504
00:35:19,340 --> 00:35:26,810
a local network in some settings for

505
00:35:22,670 --> 00:35:31,370
example the path to to a database driver

506
00:35:26,810 --> 00:35:34,160
to connect to an offline database we've

507
00:35:31,370 --> 00:35:36,950
also added them as options to call

508
00:35:34,160 --> 00:35:40,759
chencang plugin and now we can configure

509
00:35:36,950 --> 00:35:41,839
all these things out of the pipeline we

510
00:35:40,760 --> 00:35:44,390
pulled this OPR

511
00:35:41,840 --> 00:35:47,630
into the plugin but the main contributor

512
00:35:44,390 --> 00:35:49,879
did not accept it thinking this is will

513
00:35:47,630 --> 00:35:53,710
not be very secure to give away

514
00:35:49,880 --> 00:35:57,890
configuration all the way to BD or

515
00:35:53,710 --> 00:36:01,820
database by the initiator I would agree

516
00:35:57,890 --> 00:36:03,950
with that but in our case since our this

517
00:36:01,820 --> 00:36:07,850
Coliseum encapsulated in our own library

518
00:36:03,950 --> 00:36:10,040
it does not carry any risk or with it

519
00:36:07,850 --> 00:36:12,290
and therefore we are using our own

520
00:36:10,040 --> 00:36:15,770
customized version where we reckon or

521
00:36:12,290 --> 00:36:19,720
configuring it in such a way the second

522
00:36:15,770 --> 00:36:24,140
challenge we had to deal with is that

523
00:36:19,720 --> 00:36:28,669
ODC sometimes the kernel can actually

524
00:36:24,140 --> 00:36:33,589
drop and it effects pipeline command

525
00:36:28,670 --> 00:36:35,360
which is unthinkable which is not

526
00:36:33,590 --> 00:36:38,000
allowable baby because we as a service

527
00:36:35,360 --> 00:36:40,910
have to be very reliable you have to be

528
00:36:38,000 --> 00:36:43,820
very friendly for that matter and in

529
00:36:40,910 --> 00:36:48,319
Jenkins if you drop your own pipeline

530
00:36:43,820 --> 00:36:50,690
you cannot make it green again this is

531
00:36:48,320 --> 00:36:53,360
like one of the specs of the Jenkins you

532
00:36:50,690 --> 00:36:55,910
can always make it just worse so we

533
00:36:53,360 --> 00:36:59,660
added one more flag enabling us to

534
00:36:55,910 --> 00:37:02,480
launch analyzers in such a way that by

535
00:36:59,660 --> 00:37:05,899
no means it will drop the pipeline and

536
00:37:02,480 --> 00:37:08,410
this PR was accepted I think it has been

537
00:37:05,900 --> 00:37:12,890
issued in a new version of the plug-in

538
00:37:08,410 --> 00:37:14,810
the third thing it was not all that

539
00:37:12,890 --> 00:37:17,330
great with an offline support and for

540
00:37:14,810 --> 00:37:22,240
example TPM analyzer it does not work in

541
00:37:17,330 --> 00:37:22,240
the closed network segments the point is

542
00:37:22,840 --> 00:37:28,670
the the the channel logic of the

543
00:37:26,240 --> 00:37:31,310
analyzer in ODC RPM underlined so it

544
00:37:28,670 --> 00:37:33,410
does the same thing as the npm mounted

545
00:37:31,310 --> 00:37:38,000
call it's making it takes your in JSON

546
00:37:33,410 --> 00:37:41,509
package and sends it to a server of an

547
00:37:38,000 --> 00:37:45,740
IBM we are its mapping your dependencies

548
00:37:41,510 --> 00:37:49,150
and returning you a report so there's no

549
00:37:45,740 --> 00:37:52,970
real support here and we weren't able to

550
00:37:49,150 --> 00:37:54,860
find this NPM database or with some

551
00:37:52,970 --> 00:37:57,200
vulnerabilities anywhere

552
00:37:54,860 --> 00:38:02,150
and here we do not know how to solve

553
00:37:57,200 --> 00:38:04,609
this problem yet as with Nexus in the

554
00:38:02,150 --> 00:38:06,430
public record the reason requests for

555
00:38:04,610 --> 00:38:10,760
them to be able to somehow to proxy

556
00:38:06,430 --> 00:38:12,919
these calls this command but so far it

557
00:38:10,760 --> 00:38:14,480
has not been resolved and we will be

558
00:38:12,920 --> 00:38:20,510
able to resolve this problem even before

559
00:38:14,480 --> 00:38:22,670
we do also Jenkins plunking for all DC

560
00:38:20,510 --> 00:38:25,750
does not have a support of them any

561
00:38:22,670 --> 00:38:28,700
support of excludes therefore we had to

562
00:38:25,750 --> 00:38:32,210
add this custom function to be able to

563
00:38:28,700 --> 00:38:35,779
exclude files and what was the origin of

564
00:38:32,210 --> 00:38:38,300
this problem a number of team in the

565
00:38:35,780 --> 00:38:40,040
workspace they had a huge files with

566
00:38:38,300 --> 00:38:41,290
some kind of binaries and I don't know

567
00:38:40,040 --> 00:38:44,300
logs

568
00:38:41,290 --> 00:38:47,029
well actually speaking about archives

569
00:38:44,300 --> 00:38:51,650
and the logic of the ODC is such that it

570
00:38:47,030 --> 00:38:55,790
takes any archives and begins to extract

571
00:38:51,650 --> 00:38:59,540
them for example the team had a very low

572
00:38:55,790 --> 00:39:02,480
tempo or dam and this process was

573
00:38:59,540 --> 00:39:04,400
basically freezing a lot so the skin and

574
00:39:02,480 --> 00:39:06,800
which should be taken 30 seconds would

575
00:39:04,400 --> 00:39:08,300
take 5 minutes and then it's a matter of

576
00:39:06,800 --> 00:39:10,640
fact to thinks the system of trees

577
00:39:08,300 --> 00:39:14,420
because there was no there's no space in

578
00:39:10,640 --> 00:39:16,549
this segment and you could do nothing

579
00:39:14,420 --> 00:39:19,750
with it so we added the excluding

580
00:39:16,550 --> 00:39:22,310
mechanism it supports and style

581
00:39:19,750 --> 00:39:25,720
patterns you can exclude some particular

582
00:39:22,310 --> 00:39:30,549
extensions or you can exclude

583
00:39:25,720 --> 00:39:33,470
directories with again pool this PR and

584
00:39:30,550 --> 00:39:35,660
waiting for this to be merged on the

585
00:39:33,470 --> 00:39:38,180
bottom you can see the link to a plugin

586
00:39:35,660 --> 00:39:41,770
you can check out this PR means if

587
00:39:38,180 --> 00:39:44,210
you'll need to use this functionality

588
00:39:41,770 --> 00:39:45,890
which didn't make it up to the main

589
00:39:44,210 --> 00:39:49,660
threat you can actually submerge it

590
00:39:45,890 --> 00:39:53,368
after yourself and to use it

591
00:39:49,660 --> 00:40:00,210
throughout implementing this approach we

592
00:39:53,369 --> 00:40:03,250
had a number of intentions a number of

593
00:40:00,210 --> 00:40:04,480
goals intentions or wishes so I would

594
00:40:03,250 --> 00:40:06,819
like to share about them and probably

595
00:40:04,480 --> 00:40:09,670
the commercial ventures or continued

596
00:40:06,819 --> 00:40:12,849
contributors will implement it in as an

597
00:40:09,670 --> 00:40:16,240
open source in whatever format number

598
00:40:12,849 --> 00:40:21,579
one is the full support alpha of closed

599
00:40:16,240 --> 00:40:24,549
network segments so that companies would

600
00:40:21,579 --> 00:40:27,819
be able to use analyzers that are either

601
00:40:24,549 --> 00:40:29,490
in their own close networks with or in

602
00:40:27,819 --> 00:40:32,500
the networks without internet access

603
00:40:29,490 --> 00:40:35,470
number of companies simply do not want

604
00:40:32,500 --> 00:40:37,299
in any way shape or form to to

605
00:40:35,470 --> 00:40:40,689
communicate what components they use

606
00:40:37,299 --> 00:40:43,809
neither in titles of libraries nor in

607
00:40:40,690 --> 00:40:47,529
hash forms so the cloud solutions here

608
00:40:43,809 --> 00:40:49,750
simply do not work and the second desire

609
00:40:47,529 --> 00:40:53,349
of ours is simply to provide a support

610
00:40:49,750 --> 00:40:56,640
of very rare technologies such as open

611
00:40:53,349 --> 00:41:01,180
source analyzer for Delphine or girl and

612
00:40:56,640 --> 00:41:07,029
that's that's a little whim of ours and

613
00:41:01,180 --> 00:41:09,450
to sum it up all that I've been speaking

614
00:41:07,029 --> 00:41:13,740
about some pros and cons of this

615
00:41:09,450 --> 00:41:13,740
approach out of prawns it's free

616
00:41:14,009 --> 00:41:21,150
second thing being that this is

617
00:41:17,109 --> 00:41:27,549
incredible flexibility we can use any of

618
00:41:21,150 --> 00:41:32,440
the available you know ways of

619
00:41:27,549 --> 00:41:36,880
integration B Jenkins on CLI or other

620
00:41:32,440 --> 00:41:41,980
analyzer we can change the product just

621
00:41:36,880 --> 00:41:44,980
how we want it like we've seen it we can

622
00:41:41,980 --> 00:41:46,779
implement different features which are

623
00:41:44,980 --> 00:41:49,240
not there in the main version and to use

624
00:41:46,779 --> 00:41:51,549
them and there would not be the case

625
00:41:49,240 --> 00:41:53,769
with a vendor issue product or or even

626
00:41:51,549 --> 00:41:57,250
if we did or would get this

627
00:41:53,769 --> 00:42:01,439
functionality in the months in OTC

628
00:41:57,250 --> 00:42:03,750
there's a good number of analyzers

629
00:42:01,440 --> 00:42:07,320
a physical were fine with it with a

630
00:42:03,750 --> 00:42:09,600
number and with a volume of you've been

631
00:42:07,320 --> 00:42:14,040
supported and since the main language of

632
00:42:09,600 --> 00:42:18,540
development is Java it still covers very

633
00:42:14,040 --> 00:42:23,850
well our functionality it works quite

634
00:42:18,540 --> 00:42:28,470
well and close network segments it can

635
00:42:23,850 --> 00:42:31,910
find in direct dependencies which is

636
00:42:28,470 --> 00:42:36,779
very important is alexei demonstrated

637
00:42:31,910 --> 00:42:40,350
was it 78 in 78% of cases it launches in

638
00:42:36,780 --> 00:42:43,280
our CI manager in Jenkins against it's

639
00:42:40,350 --> 00:42:46,100
another advantage and has incredible

640
00:42:43,280 --> 00:42:48,720
speed of operation in 30 seconds since

641
00:42:46,100 --> 00:42:50,339
it's working through plowing through 2

642
00:42:48,720 --> 00:42:51,899
million lines of codes it doesn't matter

643
00:42:50,340 --> 00:42:54,780
how many lines it's just worked in 30

644
00:42:51,900 --> 00:42:57,480
seconds it seems with any segment now

645
00:42:54,780 --> 00:43:00,960
the cons it's quite difficult to

646
00:42:57,480 --> 00:43:02,700
configure it on large infrastructure we

647
00:43:00,960 --> 00:43:04,230
have a lot of Jenkins when they have a

648
00:43:02,700 --> 00:43:08,100
lot of agents so with their different

649
00:43:04,230 --> 00:43:10,260
operational systems in like in any open

650
00:43:08,100 --> 00:43:11,610
source it has some bugs in it but they

651
00:43:10,260 --> 00:43:16,620
have to deal with it because it's free

652
00:43:11,610 --> 00:43:20,070
and we are fixing these bugs and this

653
00:43:16,620 --> 00:43:21,810
way contribute to the open source again

654
00:43:20,070 --> 00:43:23,640
there is no vendor support sometimes you

655
00:43:21,810 --> 00:43:26,220
really want to feel like guys could

656
00:43:23,640 --> 00:43:30,330
please fix this and love to do it

657
00:43:26,220 --> 00:43:32,970
yourselves but it's you know it's it's a

658
00:43:30,330 --> 00:43:36,270
give-and-take and there is no support or

659
00:43:32,970 --> 00:43:39,689
fault lines and checks we do not need it

660
00:43:36,270 --> 00:43:43,800
it's work of a certain compliance

661
00:43:39,690 --> 00:43:46,110
function but some people individuals

662
00:43:43,800 --> 00:43:47,430
organizations may find it interesting

663
00:43:46,110 --> 00:43:48,900
there is no UI but I've already

664
00:43:47,430 --> 00:43:51,779
mentioned how we were able to bypass

665
00:43:48,900 --> 00:43:53,760
this problem now how do you want to

666
00:43:51,780 --> 00:43:59,730
develop our approach in the future what

667
00:43:53,760 --> 00:44:01,560
you'll want to do next to to make sure

668
00:43:59,730 --> 00:44:02,760
that our solution becomes better and

669
00:44:01,560 --> 00:44:06,650
better first of all I would like to

670
00:44:02,760 --> 00:44:10,140
solve the problem with an NPM analyzer

671
00:44:06,650 --> 00:44:12,060
we do not know yet how to even get

672
00:44:10,140 --> 00:44:13,859
around this problem but we are thinking

673
00:44:12,060 --> 00:44:14,950
that we'll be able to solve this problem

674
00:44:13,860 --> 00:44:17,799
and will be

675
00:44:14,950 --> 00:44:22,859
to analyzing PR packages in the close

676
00:44:17,799 --> 00:44:25,359
seconds we want to improve our triage

677
00:44:22,859 --> 00:44:28,540
process to make it better to make

678
00:44:25,359 --> 00:44:29,890
interface better maybe to add some

679
00:44:28,540 --> 00:44:35,500
confidence level machine learning

680
00:44:29,890 --> 00:44:38,618
possibly and and help teams what could

681
00:44:35,500 --> 00:44:42,160
be the false positive and what is not we

682
00:44:38,619 --> 00:44:48,520
also could add some custom analytics and

683
00:44:42,160 --> 00:44:51,009
possibilities for us to be able to to

684
00:44:48,520 --> 00:44:52,900
set certain a vulnerability as a true

685
00:44:51,010 --> 00:44:56,760
positive in case if we understand that

686
00:44:52,900 --> 00:44:56,760
this is going to work with everyone else

687
00:44:57,089 --> 00:45:02,920
also what we need is some custom a false

688
00:45:01,299 --> 00:45:05,259
positive or true about the different

689
00:45:02,920 --> 00:45:09,040
rules this could be very good when a

690
00:45:05,260 --> 00:45:11,049
team understands that this library never

691
00:45:09,040 --> 00:45:13,390
has anything off because they use it

692
00:45:11,049 --> 00:45:15,569
only in the test environment or in

693
00:45:13,390 --> 00:45:18,460
reality it does not exist this would be

694
00:45:15,569 --> 00:45:21,520
this would be like in a very good fact

695
00:45:18,460 --> 00:45:24,460
and also we want to develop our

696
00:45:21,520 --> 00:45:27,309
proactive approach we've accumulated

697
00:45:24,460 --> 00:45:30,760
quite a good database already where we

698
00:45:27,309 --> 00:45:35,170
can map different apps for particular

699
00:45:30,760 --> 00:45:39,309
components and so we on very early stage

700
00:45:35,170 --> 00:45:42,299
can alarm James that any certain

701
00:45:39,309 --> 00:45:44,740
assembly were built there is a new

702
00:45:42,299 --> 00:45:46,359
vulnerability popped up a certain

703
00:45:44,740 --> 00:45:47,709
component are you using this component

704
00:45:46,359 --> 00:45:50,980
if yes guys do something without

705
00:45:47,710 --> 00:45:54,089
launching your pipeline and also we'd

706
00:45:50,980 --> 00:45:55,809
like to add support of some custom

707
00:45:54,089 --> 00:45:58,058
vulnerabilities this could be again very

708
00:45:55,809 --> 00:45:59,500
cute in this kind of practice based

709
00:45:58,059 --> 00:46:02,700
approach what I know that certain

710
00:45:59,500 --> 00:46:07,119
components have zero or one day

711
00:46:02,700 --> 00:46:10,089
vulnerabilities which is not yet made

712
00:46:07,119 --> 00:46:12,280
its way in some public databases but the

713
00:46:10,089 --> 00:46:14,920
general public does not know it yet we

714
00:46:12,280 --> 00:46:16,930
can edit in a customized way and again

715
00:46:14,920 --> 00:46:19,390
the teams will learn about that before

716
00:46:16,930 --> 00:46:21,098
the launcher of the pipeline and this

717
00:46:19,390 --> 00:46:23,618
could also be very cute in terms so we

718
00:46:21,099 --> 00:46:26,980
have some internal components if well

719
00:46:23,619 --> 00:46:28,630
now somehow if you learn somehow from

720
00:46:26,980 --> 00:46:29,800
the practice that our internal come

721
00:46:28,630 --> 00:46:32,080
opponent which has been developed

722
00:46:29,800 --> 00:46:34,480
somewhere in the company there is a bunk

723
00:46:32,080 --> 00:46:36,580
there is a mistake we would like to

724
00:46:34,480 --> 00:46:39,580
notify all the teams I use in this

725
00:46:36,580 --> 00:46:42,759
component to make sure don't do it

726
00:46:39,580 --> 00:46:46,990
patch it up use the newer updated

727
00:46:42,760 --> 00:46:49,200
version and no I always want to share

728
00:46:46,990 --> 00:46:52,120
and promise that we will share our

729
00:46:49,200 --> 00:46:55,149
library make it public and now it's a

730
00:46:52,120 --> 00:46:57,790
custom type of library that we cannot

731
00:46:55,150 --> 00:47:01,510
show the it there's a token being stored

732
00:46:57,790 --> 00:47:03,850
also in all the things you have this

733
00:47:01,510 --> 00:47:05,980
kind of password patron will make it

734
00:47:03,850 --> 00:47:11,490
more like generalized I think some will

735
00:47:05,980 --> 00:47:11,490
find it very useful thank you for coming

