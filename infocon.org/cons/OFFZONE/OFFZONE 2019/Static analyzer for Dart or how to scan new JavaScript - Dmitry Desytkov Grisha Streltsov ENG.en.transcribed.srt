1
00:00:05,150 --> 00:00:10,380
good morning everyone once again now

2
00:00:08,670 --> 00:00:11,849
thanks for coming that early to listen

3
00:00:10,380 --> 00:00:15,360
to us and today would like to speak

4
00:00:11,849 --> 00:00:19,170
about scanning static scanning of the

5
00:00:15,360 --> 00:00:23,250
JavaScript and in particular in the dart

6
00:00:19,170 --> 00:00:24,779
language and dark development we are

7
00:00:23,250 --> 00:00:27,810
planning to share with you today the

8
00:00:24,779 --> 00:00:32,519
following things what our application is

9
00:00:27,810 --> 00:00:34,500
all about and how do we apply aesthetic

10
00:00:32,520 --> 00:00:36,480
scanning approach for the source code

11
00:00:34,500 --> 00:00:38,519
and how do we do it on the front end on

12
00:00:36,480 --> 00:00:40,828
the back end we will discuss the main

13
00:00:38,520 --> 00:00:43,770
problems which may exist on the front

14
00:00:40,829 --> 00:00:46,739
end we will give you details of our

15
00:00:43,770 --> 00:00:49,379
statistics code analyzer and we'll look

16
00:00:46,739 --> 00:00:53,788
at the results of this work my name is

17
00:00:49,379 --> 00:00:55,468
Dmitry and now I'm director for

18
00:00:53,789 --> 00:00:58,829
information security for the right

19
00:00:55,469 --> 00:01:01,140
company I've been in information

20
00:00:58,829 --> 00:01:03,480
security for 10 years begin my career in

21
00:01:01,140 --> 00:01:05,519
developing you I was developing

22
00:01:03,480 --> 00:01:11,369
different applications on Java web

23
00:01:05,519 --> 00:01:14,580
applications hi my name is Grigori I

24
00:01:11,369 --> 00:01:16,350
have the simple history - Dimitri I am

25
00:01:14,580 --> 00:01:19,798
involved in security and currently

26
00:01:16,350 --> 00:01:23,070
employed in employed Reich and I enjoy

27
00:01:19,799 --> 00:01:26,100
well let's go let's see who we are and

28
00:01:23,070 --> 00:01:28,639
what we're doing Mike is basically the

29
00:01:26,100 --> 00:01:31,408
classic three-tier application which is

30
00:01:28,640 --> 00:01:34,140
created from which consists from the

31
00:01:31,409 --> 00:01:38,009
Protein back-end and database web

32
00:01:34,140 --> 00:01:40,619
application where you can find a lot of

33
00:01:38,009 --> 00:01:43,680
different inquiries from the front and a

34
00:01:40,619 --> 00:01:46,320
lot of trial web sockets and many many

35
00:01:43,680 --> 00:01:49,170
other things as well moreover our

36
00:01:46,320 --> 00:01:53,220
application and namely the front-end

37
00:01:49,170 --> 00:01:56,670
part of it consists of Java scripts in

38
00:01:53,220 --> 00:01:57,090
all of its variations classic Java

39
00:01:56,670 --> 00:02:00,360
Script

40
00:01:57,090 --> 00:02:04,350
EGF and type gif and angular dart and

41
00:02:00,360 --> 00:02:06,299
many others we know that with the

42
00:02:04,350 --> 00:02:08,429
appearance of the new framework Java

43
00:02:06,299 --> 00:02:10,110
Script area the old one basically

44
00:02:08,429 --> 00:02:13,230
becomes obsolete in the matter of one

45
00:02:10,110 --> 00:02:13,740
month so this approach is applicable

46
00:02:13,230 --> 00:02:16,769
just

47
00:02:13,740 --> 00:02:19,040
we always want to be at the front at the

48
00:02:16,770 --> 00:02:24,510
front line let's consider what are the

49
00:02:19,040 --> 00:02:26,820
approaches to analyze source code at the

50
00:02:24,510 --> 00:02:28,890
front end and at the back end as well

51
00:02:26,820 --> 00:02:34,350
first of all this would be the menial

52
00:02:28,890 --> 00:02:36,809
review the manual review where you grab

53
00:02:34,350 --> 00:02:38,609
a lot where you are looking

54
00:02:36,810 --> 00:02:42,090
you're using your hands second approach

55
00:02:38,610 --> 00:02:44,190
should be da s T dynamic approach a lot

56
00:02:42,090 --> 00:02:47,280
of scanners which enable you in a

57
00:02:44,190 --> 00:02:49,710
dynamic mode to analyze web applications

58
00:02:47,280 --> 00:02:52,950
and next would be there sa steel static

59
00:02:49,710 --> 00:02:56,250
approach both commercial solutions and

60
00:02:52,950 --> 00:02:58,410
the free source code analyzers and the

61
00:02:56,250 --> 00:03:00,060
last will be interactive which is the

62
00:02:58,410 --> 00:03:03,510
composition of dynamic and Static

63
00:03:00,060 --> 00:03:07,890
approaches a foreign analyzing like I

64
00:03:03,510 --> 00:03:09,630
said before the manual review especially

65
00:03:07,890 --> 00:03:13,230
at the front end is a pain

66
00:03:09,630 --> 00:03:15,960
it's incredible pain because you have a

67
00:03:13,230 --> 00:03:18,690
lot of front end different combinations

68
00:03:15,960 --> 00:03:22,560
of fun and JavaScript is quite a unique

69
00:03:18,690 --> 00:03:24,660
language and it's difficult to

70
00:03:22,560 --> 00:03:27,150
understand what is written there are a

71
00:03:24,660 --> 00:03:29,579
lot of different even even if the comic

72
00:03:27,150 --> 00:03:32,550
books on this topic like I you know can

73
00:03:29,580 --> 00:03:36,390
understand JavaScript and this approach

74
00:03:32,550 --> 00:03:38,940
is hard to achieve her to implement as

75
00:03:36,390 --> 00:03:41,369
for the dynamical approach basically it

76
00:03:38,940 --> 00:03:45,960
works moreover it works in our case we

77
00:03:41,370 --> 00:03:50,160
have quite quite a solid approach to

78
00:03:45,960 --> 00:03:55,910
analyzing and reviewing front-end part

79
00:03:50,160 --> 00:03:58,230
of the JavaScript and our automation

80
00:03:55,910 --> 00:04:00,030
professionals they're writing quite a

81
00:03:58,230 --> 00:04:05,250
lot of tests of which are covering our

82
00:04:00,030 --> 00:04:07,680
application and we reusing them for tea

83
00:04:05,250 --> 00:04:11,070
safety reasons is so integrating in the

84
00:04:07,680 --> 00:04:15,690
testing environment we also use it in

85
00:04:11,070 --> 00:04:18,890
such scanners as burp disk animal

86
00:04:15,690 --> 00:04:21,540
different other testing so we have to

87
00:04:18,890 --> 00:04:23,460
self writing tests and we're also

88
00:04:21,540 --> 00:04:26,660
looking at the first and all of this is

89
00:04:23,460 --> 00:04:28,760
integrated and we get

90
00:04:26,660 --> 00:04:31,250
momentos feedback about the Amazon of

91
00:04:28,760 --> 00:04:32,810
owner abilities we say the tasks and

92
00:04:31,250 --> 00:04:34,040
developers are working on these tasks

93
00:04:32,810 --> 00:04:36,680
and so on and on it goes

94
00:04:34,040 --> 00:04:39,110
but unfortunately it is not all that

95
00:04:36,680 --> 00:04:40,850
bright and shiny as I said yes it's

96
00:04:39,110 --> 00:04:43,520
working but it's not working

97
00:04:40,850 --> 00:04:45,470
always in a percent of cases due to the

98
00:04:43,520 --> 00:04:47,960
nature of our application really do not

99
00:04:45,470 --> 00:04:51,590
have a classical inquiries like I said a

100
00:04:47,960 --> 00:04:55,549
lot of sockets web sockets which do not

101
00:04:51,590 --> 00:04:56,960
enable one to analyze application in a

102
00:04:55,550 --> 00:05:00,350
dynamic mode and do it with quality

103
00:04:56,960 --> 00:05:02,570
often times emulate browser which calls

104
00:05:00,350 --> 00:05:07,850
for additional complexities and of

105
00:05:02,570 --> 00:05:09,290
course they are not unlimited extensible

106
00:05:07,850 --> 00:05:13,040
they cannot cover the full functionality

107
00:05:09,290 --> 00:05:16,070
of our app why don't we consider an SI

108
00:05:13,040 --> 00:05:18,110
st approach you can do dynamical one is

109
00:05:16,070 --> 00:05:20,930
not quite effective let's see how the

110
00:05:18,110 --> 00:05:26,030
aesthetics will show itself

111
00:05:20,930 --> 00:05:33,500
why have we decided to look for many

112
00:05:26,030 --> 00:05:36,260
reasons the main being arti for quiet

113
00:05:33,500 --> 00:05:39,170
time has been working with a static and

114
00:05:36,260 --> 00:05:40,760
source code analyzer oh by for the

115
00:05:39,170 --> 00:05:44,260
backend we have some experience in this

116
00:05:40,760 --> 00:05:49,250
field we have been developing that for

117
00:05:44,260 --> 00:05:53,210
for our back-end part and moreover all

118
00:05:49,250 --> 00:05:56,330
the statical analysis is based on custom

119
00:05:53,210 --> 00:05:59,780
rules that is learn always writing

120
00:05:56,330 --> 00:06:01,840
custom rules for our analyzer were

121
00:05:59,780 --> 00:06:05,059
improving them on this basic rules are

122
00:06:01,840 --> 00:06:07,039
in our basic logics of our application

123
00:06:05,060 --> 00:06:10,490
that specific structure of our

124
00:06:07,040 --> 00:06:13,370
application and it works and moreover we

125
00:06:10,490 --> 00:06:14,590
have quite an interesting approach there

126
00:06:13,370 --> 00:06:19,550
is we mark

127
00:06:14,590 --> 00:06:24,020
modal's at the back hand side we do you

128
00:06:19,550 --> 00:06:25,820
classify data there are fields of course

129
00:06:24,020 --> 00:06:29,299
in the hallway we have certain

130
00:06:25,820 --> 00:06:32,780
annotations which are basically the data

131
00:06:29,300 --> 00:06:34,850
classification and wave some fields

132
00:06:32,780 --> 00:06:36,280
which are marked as sensitive sensitive

133
00:06:34,850 --> 00:06:38,139
data things

134
00:06:36,280 --> 00:06:42,630
like a certification data medical

135
00:06:38,139 --> 00:06:45,400
finance personal data it makes sense

136
00:06:42,630 --> 00:06:47,860
customers data in some of our internal

137
00:06:45,400 --> 00:06:51,030
in-house data so we look at the began

138
00:06:47,860 --> 00:06:56,230
for this data to stay not to be locked

139
00:06:51,030 --> 00:06:58,059
unnecessary and looking at the location

140
00:06:56,230 --> 00:07:03,370
of the data this is what it looks like

141
00:06:58,060 --> 00:07:07,060
in the code we have a class we class you

142
00:07:03,370 --> 00:07:08,470
have certain annotations but since we

143
00:07:07,060 --> 00:07:10,540
have such a big experience might don't

144
00:07:08,470 --> 00:07:13,150
we use any things approach also from the

145
00:07:10,540 --> 00:07:17,350
front for the front end even though it's

146
00:07:13,150 --> 00:07:19,570
a JavaScript now we also have commercial

147
00:07:17,350 --> 00:07:23,530
tools and open source tools to analyze

148
00:07:19,570 --> 00:07:26,469
JavaScript and annual basis different

149
00:07:23,530 --> 00:07:27,880
companies are holding various research

150
00:07:26,470 --> 00:07:30,010
in this field

151
00:07:27,880 --> 00:07:32,290
they are trying to you know bright

152
00:07:30,010 --> 00:07:34,120
aesthetics analyzing which would work

153
00:07:32,290 --> 00:07:37,840
for the whole JavaScript in its entirety

154
00:07:34,120 --> 00:07:42,970
or for some segments of it in in our

155
00:07:37,840 --> 00:07:45,150
front end we we've had enough with

156
00:07:42,970 --> 00:07:49,000
different reps and just a common reviews

157
00:07:45,150 --> 00:07:52,390
we are seeing how the code is just

158
00:07:49,000 --> 00:07:54,539
basically increasing I look in the team

159
00:07:52,390 --> 00:07:56,680
who is working with the JavaScript

160
00:07:54,539 --> 00:08:01,419
taking into consideration that there's

161
00:07:56,680 --> 00:08:04,690
basically no instrument to analyze we've

162
00:08:01,419 --> 00:08:07,390
decided to write our own but before

163
00:08:04,690 --> 00:08:09,310
sitting down and start writing it we've

164
00:08:07,390 --> 00:08:12,460
realized all the possible problems and

165
00:08:09,310 --> 00:08:14,830
risks will not be able to mitigate but

166
00:08:12,460 --> 00:08:16,930
basically so many problems at the

167
00:08:14,830 --> 00:08:19,960
front-end basically they're only to

168
00:08:16,930 --> 00:08:22,630
achieve issues which we are concerned

169
00:08:19,960 --> 00:08:25,570
about first of all is a potential leak

170
00:08:22,630 --> 00:08:28,659
of data both our customers data and

171
00:08:25,570 --> 00:08:31,060
personal data what would be the possible

172
00:08:28,660 --> 00:08:35,890
link scenarios in different Tracking's

173
00:08:31,060 --> 00:08:37,559
which are present HTML pages web pages

174
00:08:35,890 --> 00:08:40,390
and

175
00:08:37,559 --> 00:08:42,459
and recently the European GDP are is

176
00:08:40,390 --> 00:08:44,199
also say stand you know working with a

177
00:08:42,460 --> 00:08:46,060
personal data you have to understand how

178
00:08:44,200 --> 00:08:48,940
and where these data will be used

179
00:08:46,060 --> 00:08:51,459
the second issue with the front end is a

180
00:08:48,940 --> 00:08:53,860
cross-site scripting cross-site

181
00:08:51,460 --> 00:08:56,290
scripting everybody knows about what the

182
00:08:53,860 --> 00:08:58,120
problem is a lot about personal data

183
00:08:56,290 --> 00:09:00,959
disclosure or different data disclosure

184
00:08:58,120 --> 00:09:05,050
a different insight that is you have

185
00:09:00,960 --> 00:09:07,800
tracking analytics maybe both internal

186
00:09:05,050 --> 00:09:10,240
for your for your team and also external

187
00:09:07,800 --> 00:09:12,969
Yandex metal Google Analytics and

188
00:09:10,240 --> 00:09:16,600
Facebook and Twitter are all included

189
00:09:12,970 --> 00:09:19,420
and the problem is analysts have access

190
00:09:16,600 --> 00:09:23,530
to the annals of the Google Analytics

191
00:09:19,420 --> 00:09:25,780
and they may change it in such a way

192
00:09:23,530 --> 00:09:28,569
that it may result in which is close and

193
00:09:25,780 --> 00:09:30,670
personal data or internal data in your

194
00:09:28,570 --> 00:09:32,950
app and we would like to avoid that as

195
00:09:30,670 --> 00:09:34,510
much as possible it would also have any

196
00:09:32,950 --> 00:09:37,360
problem with the regression testing is

197
00:09:34,510 --> 00:09:38,890
very difficult to cover all these

198
00:09:37,360 --> 00:09:41,380
declarations and the tracking science

199
00:09:38,890 --> 00:09:43,600
they do they disappear they reappear

200
00:09:41,380 --> 00:09:46,380
again and it looks somewhat like that we

201
00:09:43,600 --> 00:09:52,650
have three let's say the password

202
00:09:46,380 --> 00:09:52,650
rebuilding page the client comes and

203
00:09:53,400 --> 00:09:58,990
talking to you to look to a different

204
00:09:56,200 --> 00:10:00,670
site and to be locked in even for

205
00:09:58,990 --> 00:10:03,070
internal I know

206
00:10:00,670 --> 00:10:05,260
as for the cross-site scripting problems

207
00:10:03,070 --> 00:10:07,720
are some of the sames everybody knows

208
00:10:05,260 --> 00:10:11,530
its problem very well when on the side

209
00:10:07,720 --> 00:10:13,420
of the javascript there is an execution

210
00:10:11,530 --> 00:10:15,640
of the javascript in the browser of the

211
00:10:13,420 --> 00:10:20,560
victim and the problem is the same we

212
00:10:15,640 --> 00:10:22,600
can not cover your regression if you're

213
00:10:20,560 --> 00:10:24,430
in the manual regime it's very difficult

214
00:10:22,600 --> 00:10:26,830
and also different components like we

215
00:10:24,430 --> 00:10:28,810
said the frameworks once and others

216
00:10:26,830 --> 00:10:30,730
these JavaScript and virtual script is a

217
00:10:28,810 --> 00:10:34,949
classical thing but somebody is

218
00:10:30,730 --> 00:10:34,950
including something

219
00:10:35,610 --> 00:10:40,090
this has been worked out in the victim's

220
00:10:38,470 --> 00:10:42,250
browser have you thought about these

221
00:10:40,090 --> 00:10:45,010
problems we decided to write our own

222
00:10:42,250 --> 00:10:46,600
code analyzer ago to help us to deal

223
00:10:45,010 --> 00:10:48,770
with these two reasons for these two

224
00:10:46,600 --> 00:10:52,670
problems

225
00:10:48,770 --> 00:10:54,410
hi everyone they came in today we would

226
00:10:52,670 --> 00:10:56,899
like to speak about a theory a little

227
00:10:54,410 --> 00:11:00,079
bit of how all this is working in

228
00:10:56,899 --> 00:11:02,120
appearance TEDx analyzer and you have to

229
00:11:00,080 --> 00:11:05,690
have certain internal renting for it to

230
00:11:02,120 --> 00:11:08,060
analyze what is it and what the analyzer

231
00:11:05,690 --> 00:11:10,100
is working with and having built or

232
00:11:08,060 --> 00:11:14,660
building this internal model is built on

233
00:11:10,100 --> 00:11:18,020
a certain components the first the data

234
00:11:14,660 --> 00:11:20,180
model itself this will be the second a

235
00:11:18,020 --> 00:11:22,520
repository again the researching classes

236
00:11:20,180 --> 00:11:24,800
there are certain fields and we will be

237
00:11:22,520 --> 00:11:29,600
speaking about that the second thing is

238
00:11:24,800 --> 00:11:32,050
the ASD tree this tree where the

239
00:11:29,600 --> 00:11:34,880
internal Peaks are corresponding to

240
00:11:32,050 --> 00:11:37,279
operators and their leaves to operands

241
00:11:34,880 --> 00:11:38,660
it enables you to understand what kind

242
00:11:37,279 --> 00:11:41,029
of like Sims you have in this language

243
00:11:38,660 --> 00:11:43,250
in this language what it all looks like

244
00:11:41,029 --> 00:11:46,550
and have a general idea about your code

245
00:11:43,250 --> 00:11:49,100
and next you have to build the graph

246
00:11:46,550 --> 00:11:52,969
control the execution so that you could

247
00:11:49,100 --> 00:11:55,130
track and trace all the links how your a

248
00:11:52,970 --> 00:11:58,399
program can go and also the the

249
00:11:55,130 --> 00:12:01,130
challenges game which enables YouTube to

250
00:11:58,399 --> 00:12:02,990
your calling game to go from one call to

251
00:12:01,130 --> 00:12:05,089
the different call in to analyze let's

252
00:12:02,990 --> 00:12:07,130
go into detail about AST and to speak

253
00:12:05,089 --> 00:12:09,970
about it this is the very simple example

254
00:12:07,130 --> 00:12:13,520
you have simple if and you have certain

255
00:12:09,970 --> 00:12:15,440
if-else and you have to offer your ast

256
00:12:13,520 --> 00:12:17,420
tree will be looking in the following

257
00:12:15,440 --> 00:12:19,820
way here we have certain condition

258
00:12:17,420 --> 00:12:23,180
preconditions and what do we do if it's

259
00:12:19,820 --> 00:12:30,560
a true and then we have the call from

260
00:12:23,180 --> 00:12:32,689
the method the whole JavaScript there's

261
00:12:30,560 --> 00:12:37,069
been different parsers for the time

262
00:12:32,690 --> 00:12:39,230
script you know for the angular there is

263
00:12:37,070 --> 00:12:41,570
also a AST parser and probably you want

264
00:12:39,230 --> 00:12:45,160
to have to do it yourself it's all been

265
00:12:41,570 --> 00:12:47,209
already written for you also another

266
00:12:45,160 --> 00:12:49,670
good thing is what the dependencies

267
00:12:47,209 --> 00:12:53,180
because as you know in the Python in

268
00:12:49,670 --> 00:12:55,729
node you have different managers that

269
00:12:53,180 --> 00:12:57,680
just like a VIP and NPM in the node and

270
00:12:55,730 --> 00:12:58,540
it will always be able to pull a lot of

271
00:12:57,680 --> 00:13:00,670
different dependencies

272
00:12:58,540 --> 00:13:02,260
as Dimitri has been speaking before in

273
00:13:00,670 --> 00:13:05,110
components there will be many problems

274
00:13:02,260 --> 00:13:07,470
and we also have to be able to trace

275
00:13:05,110 --> 00:13:10,000
them because again especially for dark

276
00:13:07,470 --> 00:13:13,510
there are no like special researchers

277
00:13:10,000 --> 00:13:15,940
looking for vulnerabilities are using

278
00:13:13,510 --> 00:13:21,250
checker those problems so want to do it

279
00:13:15,940 --> 00:13:22,780
on our own and to this end we have you

280
00:13:21,250 --> 00:13:25,540
show what kind of dependencies can it

281
00:13:22,780 --> 00:13:27,520
you call for this pump comes up and then

282
00:13:25,540 --> 00:13:30,520
it shows you where all these packages

283
00:13:27,520 --> 00:13:32,439
will be stored it's all stored in the

284
00:13:30,520 --> 00:13:34,120
open source and working in the same way

285
00:13:32,440 --> 00:13:36,340
not only just can are killed but also

286
00:13:34,120 --> 00:13:42,100
all the components which are being

287
00:13:36,340 --> 00:13:43,390
called and used in in there the ast tree

288
00:13:42,100 --> 00:13:45,460
will be looking in the following way

289
00:13:43,390 --> 00:13:47,530
let's focus on the things which are very

290
00:13:45,460 --> 00:13:49,810
important when you do this number one I

291
00:13:47,530 --> 00:13:54,600
do not forget about imports because this

292
00:13:49,810 --> 00:13:54,599
could be the imports of your insta que

293
00:13:55,260 --> 00:14:01,150
might go in there calling some

294
00:13:58,480 --> 00:14:05,770
customized course both your libraries

295
00:14:01,150 --> 00:14:07,860
and different components it's important

296
00:14:05,770 --> 00:14:11,890
not to forget about the different fancy

297
00:14:07,860 --> 00:14:14,290
inputs if you have a library which caps

298
00:14:11,890 --> 00:14:16,150
weights different clients and you are

299
00:14:14,290 --> 00:14:18,189
connecting and connecting and connecting

300
00:14:16,150 --> 00:14:21,250
again and this is also very important to

301
00:14:18,190 --> 00:14:23,590
do it on the dart ast parson so that you

302
00:14:21,250 --> 00:14:25,660
would know where to look further and

303
00:14:23,590 --> 00:14:31,260
then the very simple structure this

304
00:14:25,660 --> 00:14:31,260
would be the beginning of the scanner

305
00:14:31,350 --> 00:14:38,320
you use per visitor to be able to get in

306
00:14:34,480 --> 00:14:40,960
there in to see each know from your

307
00:14:38,320 --> 00:14:43,120
entity tree to make a decision what to

308
00:14:40,960 --> 00:14:45,780
do with it to do so you need to do

309
00:14:43,120 --> 00:14:45,780
something else

310
00:14:46,110 --> 00:14:52,150
it's important to understand that for

311
00:14:48,550 --> 00:14:53,380
your if you'll be doing something your

312
00:14:52,150 --> 00:14:55,720
so you have to have a real good

313
00:14:53,380 --> 00:14:57,970
understanding how your code is

314
00:14:55,720 --> 00:14:59,800
functioning like how things are

315
00:14:57,970 --> 00:15:04,210
happening in the code since we have the

316
00:14:59,800 --> 00:15:06,339
dart app working with angular to take

317
00:15:04,210 --> 00:15:07,430
into the dart code we need to know what

318
00:15:06,340 --> 00:15:09,770
is going on

319
00:15:07,430 --> 00:15:11,870
we can do they because some are done is

320
00:15:09,770 --> 00:15:14,180
based on component as a energy component

321
00:15:11,870 --> 00:15:16,370
has a certain angular template an inch

322
00:15:14,180 --> 00:15:20,410
component is a direct a link to this

323
00:15:16,370 --> 00:15:24,440
very template anyway just use this link

324
00:15:20,410 --> 00:15:27,110
some taken HTML of this template also

325
00:15:24,440 --> 00:15:30,770
deposited by the angular parser and the

326
00:15:27,110 --> 00:15:33,050
parser sees the input of a certain

327
00:15:30,770 --> 00:15:36,439
component it will go to the right HTML

328
00:15:33,050 --> 00:15:38,479
will do the parsing angular you will be

329
00:15:36,440 --> 00:15:40,070
using exactly the same approach with

330
00:15:38,480 --> 00:15:41,510
visitors you'll be going through each

331
00:15:40,070 --> 00:15:45,290
note and make a decision what to do with

332
00:15:41,510 --> 00:15:50,870
it let's keep talking about the

333
00:15:45,290 --> 00:15:54,260
implementation of scan it's based on the

334
00:15:50,870 --> 00:15:58,610
rendering of internal model it's an

335
00:15:54,260 --> 00:16:02,080
execution graph and the call graph we

336
00:15:58,610 --> 00:16:04,190
are always looking at the context

337
00:16:02,080 --> 00:16:06,230
information for your class meta

338
00:16:04,190 --> 00:16:08,060
information and many things in our case

339
00:16:06,230 --> 00:16:12,230
were using two of them number one would

340
00:16:08,060 --> 00:16:14,390
be a global context markings we put in

341
00:16:12,230 --> 00:16:19,280
some information and the local context

342
00:16:14,390 --> 00:16:21,770
this will be certain method of yours the

343
00:16:19,280 --> 00:16:23,480
local variable and you should be

344
00:16:21,770 --> 00:16:26,720
something to it and this local context

345
00:16:23,480 --> 00:16:28,660
would be existing within your method to

346
00:16:26,720 --> 00:16:31,900
give an example this is what the

347
00:16:28,660 --> 00:16:35,180
flowchart of this code would look like

348
00:16:31,900 --> 00:16:38,510
it's a graph it's a work flow graph and

349
00:16:35,180 --> 00:16:44,780
this is looks your if in one case it is

350
00:16:38,510 --> 00:16:46,670
in other case you do something else is

351
00:16:44,780 --> 00:16:49,610
split into two different chains and

352
00:16:46,670 --> 00:16:55,910
already changed and for us to be able to

353
00:16:49,610 --> 00:17:00,890
track it whenever we see we have to do

354
00:16:55,910 --> 00:17:03,819
there we have to get two visitors from

355
00:17:00,890 --> 00:17:07,129
their previous implementations and after

356
00:17:03,820 --> 00:17:09,290
working out with this visitor into which

357
00:17:07,130 --> 00:17:12,110
we place the local context based on

358
00:17:09,290 --> 00:17:15,649
these results we update our context

359
00:17:12,109 --> 00:17:17,419
which had been caught before and in the

360
00:17:15,650 --> 00:17:18,980
code it will be looking somewhat like

361
00:17:17,420 --> 00:17:24,110
that but we can see that

362
00:17:18,980 --> 00:17:28,940
note with if Brancheau implemented in

363
00:17:24,109 --> 00:17:30,850
the code with different visitors also

364
00:17:28,940 --> 00:17:34,070
the cold crab

365
00:17:30,850 --> 00:17:40,219
basically the Kolcraft will be just an

366
00:17:34,070 --> 00:17:42,620
old empty context because information

367
00:17:40,220 --> 00:17:45,350
parameters which we handed over as well

368
00:17:42,620 --> 00:17:46,820
as the global context it works it works

369
00:17:45,350 --> 00:17:49,428
and then you keep working with the local

370
00:17:46,820 --> 00:17:51,918
context where you have a call and in the

371
00:17:49,429 --> 00:17:53,780
code it's looking somewhat like the most

372
00:17:51,919 --> 00:17:57,290
important thing is if you're seeing

373
00:17:53,780 --> 00:17:59,780
their method our call is built right in

374
00:17:57,290 --> 00:18:01,790
the mapping so that you'll be able to

375
00:17:59,780 --> 00:18:06,830
see its body and to go through it if

376
00:18:01,790 --> 00:18:10,580
there are a different heritage you have

377
00:18:06,830 --> 00:18:12,409
to you have to take it into account in

378
00:18:10,580 --> 00:18:14,030
addition to the obvious suppose there is

379
00:18:12,410 --> 00:18:15,799
some calls which are not very obvious

380
00:18:14,030 --> 00:18:17,389
please don't forget about them in

381
00:18:15,799 --> 00:18:20,150
connection with angular in your angular

382
00:18:17,390 --> 00:18:21,710
code you can also have a call for a

383
00:18:20,150 --> 00:18:26,150
certain methods for example this is an

384
00:18:21,710 --> 00:18:27,710
example of a component get user names by

385
00:18:26,150 --> 00:18:29,630
all these and you have to build a

386
00:18:27,710 --> 00:18:32,299
mapping between your angular in your

387
00:18:29,630 --> 00:18:34,910
dart code and understand what is even in

388
00:18:32,299 --> 00:18:38,418
this angular structure in addition to

389
00:18:34,910 --> 00:18:44,990
their let's let's yeah I want to go back

390
00:18:38,419 --> 00:18:48,290
to this one it's you have an over to

391
00:18:44,990 --> 00:18:49,970
string method call on this but when you

392
00:18:48,290 --> 00:18:52,790
do the plus and you do this kind of

393
00:18:49,970 --> 00:18:54,919
string you can see the obvious code you

394
00:18:52,790 --> 00:18:56,928
have to remember about that also in

395
00:18:54,919 --> 00:19:00,080
addition to the code from the angular

396
00:18:56,929 --> 00:19:02,240
cone your component is including one

397
00:19:00,080 --> 00:19:04,820
component into another it is happening

398
00:19:02,240 --> 00:19:07,400
oftentimes when you include some other

399
00:19:04,820 --> 00:19:09,980
components in your angular code you you

400
00:19:07,400 --> 00:19:13,280
tag the name of a component and then

401
00:19:09,980 --> 00:19:15,290
your angular is looking for what kind of

402
00:19:13,280 --> 00:19:17,809
components are available find it alright

403
00:19:15,290 --> 00:19:19,490
selector and basically switching on or

404
00:19:17,809 --> 00:19:21,799
or including one component into the

405
00:19:19,490 --> 00:19:24,230
other it's like a method call because

406
00:19:21,799 --> 00:19:27,470
each component has its own life cycle in

407
00:19:24,230 --> 00:19:30,500
like any call method you also have a

408
00:19:27,470 --> 00:19:31,890
parameters which very obviously in an

409
00:19:30,500 --> 00:19:36,810
overt way use

410
00:19:31,890 --> 00:19:40,170
annotations you can you can also not

411
00:19:36,810 --> 00:19:42,030
very obvious way it's a pipe

412
00:19:40,170 --> 00:19:44,310
you'll have your angular code you'll

413
00:19:42,030 --> 00:19:46,590
have the symbol of a pipe and is some

414
00:19:44,310 --> 00:19:48,300
name interpretation will go I will look

415
00:19:46,590 --> 00:19:51,120
for a Bible with this name and we'll

416
00:19:48,300 --> 00:19:54,240
call transform methods we've taken some

417
00:19:51,120 --> 00:19:55,889
value applied pipe and we get not just

418
00:19:54,240 --> 00:19:57,300
some value but some value test as you

419
00:19:55,890 --> 00:20:00,600
can see in the right bottom screen and

420
00:19:57,300 --> 00:20:03,090
this is also something to remember about

421
00:20:00,600 --> 00:20:05,189
the case it's very specific to angular

422
00:20:03,090 --> 00:20:07,379
basically in all angular implementations

423
00:20:05,190 --> 00:20:09,150
you can see this and we come to

424
00:20:07,380 --> 00:20:10,470
conclusion that all that we've been

425
00:20:09,150 --> 00:20:15,330
speaking about it's important to

426
00:20:10,470 --> 00:20:17,310
implement in it's very simple in terms

427
00:20:15,330 --> 00:20:20,040
of connection with the ast tree you

428
00:20:17,310 --> 00:20:23,280
simply have to go deep along the ast

429
00:20:20,040 --> 00:20:24,960
tree implementing those preconditions

430
00:20:23,280 --> 00:20:26,639
about the context and visitors which we

431
00:20:24,960 --> 00:20:28,290
have been speaking about would like to

432
00:20:26,640 --> 00:20:32,640
give you some example again this is the

433
00:20:28,290 --> 00:20:35,370
code and what you are going on your SD

434
00:20:32,640 --> 00:20:38,100
tree go deep to the left branch of the

435
00:20:35,370 --> 00:20:40,909
train and this is what it's going to be

436
00:20:38,100 --> 00:20:43,530
looking like if you compare it with what

437
00:20:40,910 --> 00:20:45,930
we've been saying about it this is the

438
00:20:43,530 --> 00:20:48,300
rendering you will see exactly the same

439
00:20:45,930 --> 00:20:51,450
thing let's go to the right branch now

440
00:20:48,300 --> 00:20:55,530
and we are getting the same thing our

441
00:20:51,450 --> 00:20:57,930
solution has made its way to the left to

442
00:20:55,530 --> 00:20:59,760
the right and there we got our expected

443
00:20:57,930 --> 00:21:02,180
result and the third time when it's

444
00:20:59,760 --> 00:21:04,710
going through these two branches we go

445
00:21:02,180 --> 00:21:08,280
we pass the information that we have the

446
00:21:04,710 --> 00:21:10,500
if and else so we have to do two times

447
00:21:08,280 --> 00:21:13,020
with previous resources different local

448
00:21:10,500 --> 00:21:15,600
contexts and this will be looking in one

449
00:21:13,020 --> 00:21:17,310
case like that in the other case it will

450
00:21:15,600 --> 00:21:19,919
be simply a calling for a different

451
00:21:17,310 --> 00:21:21,810
methods but in whatever case we are

452
00:21:19,920 --> 00:21:23,100
going to continue method for one branch

453
00:21:21,810 --> 00:21:26,159
and to continue method for the other

454
00:21:23,100 --> 00:21:28,110
branch now we've been speaking about the

455
00:21:26,160 --> 00:21:31,100
internal render unless I speak about

456
00:21:28,110 --> 00:21:34,050
analysis of how it's all gonna look like

457
00:21:31,100 --> 00:21:36,780
and you analyze it's like a tainted

458
00:21:34,050 --> 00:21:39,240
tainted flag some input which you do not

459
00:21:36,780 --> 00:21:40,770
fully trust or certain metrics that you

460
00:21:39,240 --> 00:21:43,120
have a certain type of data and this

461
00:21:40,770 --> 00:21:45,910
data according to the flow is flow

462
00:21:43,120 --> 00:21:46,629
from one day to the other variables to

463
00:21:45,910 --> 00:21:49,330
the methods

464
00:21:46,630 --> 00:21:51,400
it's like spreading all over and by

465
00:21:49,330 --> 00:21:53,949
doing this marking other variables and

466
00:21:51,400 --> 00:21:55,870
other things and also a marking with

467
00:21:53,950 --> 00:22:00,970
these painted flags and then this data

468
00:21:55,870 --> 00:22:02,860
ends up in our case we we can mark them

469
00:22:00,970 --> 00:22:05,170
with annotations we have a class user

470
00:22:02,860 --> 00:22:09,370
and we say that it's name is a personal

471
00:22:05,170 --> 00:22:11,320
data except for the code because the

472
00:22:09,370 --> 00:22:12,879
code is done by the developers we cannot

473
00:22:11,320 --> 00:22:14,260
guarantee that they will be always

474
00:22:12,880 --> 00:22:16,540
between the markets they will never

475
00:22:14,260 --> 00:22:21,309
forget it we'll also have to control it

476
00:22:16,540 --> 00:22:23,139
ourselves for this we also help with the

477
00:22:21,309 --> 00:22:26,710
configuration of our scanner we can say

478
00:22:23,140 --> 00:22:30,850
ok this is the data which will be in the

479
00:22:26,710 --> 00:22:32,830
class I wish some user in some fields

480
00:22:30,850 --> 00:22:35,169
are about the personal data some users

481
00:22:32,830 --> 00:22:37,000
personal data and after we've gone we've

482
00:22:35,170 --> 00:22:39,700
done all the marking all the flow in all

483
00:22:37,000 --> 00:22:42,250
the variables we need to make sure to

484
00:22:39,700 --> 00:22:44,830
get a sink sink is basically the place

485
00:22:42,250 --> 00:22:47,740
when certain data ends up in the sink

486
00:22:44,830 --> 00:22:50,110
Dobie don't be a flag that ok it's a

487
00:22:47,740 --> 00:22:52,570
vulnerability also with annotations we

488
00:22:50,110 --> 00:22:55,649
can mark these things ok this method is

489
00:22:52,570 --> 00:22:58,659
actually a sink not only in the code

490
00:22:55,650 --> 00:23:00,309
like we are shown right now but also in

491
00:22:58,660 --> 00:23:03,550
config we're showing it what kind of

492
00:23:00,309 --> 00:23:06,190
flex which would be not permissible for

493
00:23:03,550 --> 00:23:10,270
this method and and in this way we do

494
00:23:06,190 --> 00:23:12,850
our description and now let's go to some

495
00:23:10,270 --> 00:23:14,620
examples that will show you how it looks

496
00:23:12,850 --> 00:23:17,320
in the real life what kind of change

497
00:23:14,620 --> 00:23:19,570
what kind of sequences we can see and

498
00:23:17,320 --> 00:23:23,740
let's begin with the tracking ok here we

499
00:23:19,570 --> 00:23:30,010
have certain a method app we have the

500
00:23:23,740 --> 00:23:33,220
local local available we put the full

501
00:23:30,010 --> 00:23:36,129
user name and then what the scanner is

502
00:23:33,220 --> 00:23:38,110
doing it sees this field and looking at

503
00:23:36,130 --> 00:23:40,630
the global context and then finding that

504
00:23:38,110 --> 00:23:42,939
this data is marked by the tainted flag

505
00:23:40,630 --> 00:23:46,240
it's a personal data ok we remember that

506
00:23:42,940 --> 00:23:49,660
and then it keeps going along the flow

507
00:23:46,240 --> 00:23:52,179
and sees that we have the the variable

508
00:23:49,660 --> 00:23:55,030
and in the local context in marks that

509
00:23:52,179 --> 00:23:56,620
ok with this tainted flag this variable

510
00:23:55,030 --> 00:23:58,440
is also contains

511
00:23:56,620 --> 00:24:00,969
the standard flood okay we'll keep going

512
00:23:58,440 --> 00:24:02,470
then there is a call for certain methods

513
00:24:00,970 --> 00:24:05,740
and we remember that in our local

514
00:24:02,470 --> 00:24:08,170
context two times we've noted out this

515
00:24:05,740 --> 00:24:10,990
personal data is with a tainted flag and

516
00:24:08,170 --> 00:24:13,240
then we call for M method and from a

517
00:24:10,990 --> 00:24:18,020
global context again it remembers okay

518
00:24:13,240 --> 00:24:19,410
it's a sink so we get a problem because

519
00:24:18,020 --> 00:24:21,700
[Music]

520
00:24:19,410 --> 00:24:23,740
detail with a tainted flag ended up in

521
00:24:21,700 --> 00:24:26,020
sink which is bad and after that we get

522
00:24:23,740 --> 00:24:28,120
certain result okay guys you have to

523
00:24:26,020 --> 00:24:30,280
look into this location in a code in

524
00:24:28,120 --> 00:24:33,340
this code segment most likely if there

525
00:24:30,280 --> 00:24:35,200
is a problem in this code now x SS many

526
00:24:33,340 --> 00:24:37,360
people have been speaking and will be

527
00:24:35,200 --> 00:24:38,650
speaking about the excesses for the

528
00:24:37,360 --> 00:24:40,780
angular they're quite specifically

529
00:24:38,650 --> 00:24:44,020
because by default usually there is a

530
00:24:40,780 --> 00:24:46,090
script but you can always shoot yourself

531
00:24:44,020 --> 00:24:48,910
in the food so to speak article this

532
00:24:46,090 --> 00:24:50,439
method sent there it will be alleviated

533
00:24:48,910 --> 00:24:55,200
these are all the methods of how you can

534
00:24:50,440 --> 00:24:57,970
do this which in the terminology of the

535
00:24:55,200 --> 00:24:59,500
sink intuitive like what exercise will

536
00:24:57,970 --> 00:25:01,690
be looking like we have a certain users

537
00:24:59,500 --> 00:25:04,630
code how can we use it with our

538
00:25:01,690 --> 00:25:06,340
annotation we simply combine multiples

539
00:25:04,630 --> 00:25:09,550
of all this sensitive data because

540
00:25:06,340 --> 00:25:11,290
either way we are getting them this data

541
00:25:09,550 --> 00:25:14,020
from the user and the second condition

542
00:25:11,290 --> 00:25:18,190
the second flag will be : of this

543
00:25:14,020 --> 00:25:19,600
so-called unescape what will be the sink

544
00:25:18,190 --> 00:25:22,150
in this scenario we have two types of

545
00:25:19,600 --> 00:25:24,219
things one would be angular and these

546
00:25:22,150 --> 00:25:28,090
are all possible locations where this

547
00:25:24,220 --> 00:25:30,300
data may may fall into your XSS and also

548
00:25:28,090 --> 00:25:33,550
in the dark code we also have different

549
00:25:30,300 --> 00:25:35,320
locations how the scanner will be

550
00:25:33,550 --> 00:25:38,080
working when it will be checking all of

551
00:25:35,320 --> 00:25:40,178
this in our angular page the scanner

552
00:25:38,080 --> 00:25:41,800
will see a certain item and first it

553
00:25:40,179 --> 00:25:43,270
will not understand what this item is

554
00:25:41,800 --> 00:25:45,070
about is we have to look up in the

555
00:25:43,270 --> 00:25:48,610
angular what item is okay so we have a

556
00:25:45,070 --> 00:25:51,250
cycle this is the cycle and it either is

557
00:25:48,610 --> 00:25:54,189
certain objects of items let's see then

558
00:25:51,250 --> 00:25:57,370
what items is okay items are here in the

559
00:25:54,190 --> 00:26:01,300
dart code and the system will say okay

560
00:25:57,370 --> 00:26:03,850
it's a certain list list with a user

561
00:26:01,300 --> 00:26:06,159
class so when in this location were

562
00:26:03,850 --> 00:26:08,320
calling item for name full name we take

563
00:26:06,160 --> 00:26:09,570
in certain user and calling a full name

564
00:26:08,320 --> 00:26:11,730
of the user

565
00:26:09,570 --> 00:26:14,070
in our terminology the plank it means

566
00:26:11,730 --> 00:26:16,140
that it remembers configured file or we

567
00:26:14,070 --> 00:26:17,820
say that the data which lies in this

568
00:26:16,140 --> 00:26:19,920
class in this kind of classes with these

569
00:26:17,820 --> 00:26:22,260
kind of names will be actually a

570
00:26:19,920 --> 00:26:26,070
personal data hence we have the very

571
00:26:22,260 --> 00:26:29,250
first our flag let's get going it is

572
00:26:26,070 --> 00:26:30,990
okay we we have a certain pipe what kind

573
00:26:29,250 --> 00:26:32,850
of pipe oh this is the pipe in the code

574
00:26:30,990 --> 00:26:34,740
and then immediately looking at the

575
00:26:32,850 --> 00:26:36,600
transform method because it can see how

576
00:26:34,740 --> 00:26:40,680
the flow of both pipes will be looking

577
00:26:36,600 --> 00:26:42,810
like and this is this it got a bypass

578
00:26:40,680 --> 00:26:45,300
security HTML and we get the second flag

579
00:26:42,810 --> 00:26:47,700
so we have already two flags assembled

580
00:26:45,300 --> 00:26:51,720
now we have to look into this very sink

581
00:26:47,700 --> 00:26:53,880
but our sinks I've been described we've

582
00:26:51,720 --> 00:26:56,700
listed all of them we have all the means

583
00:26:53,880 --> 00:26:59,400
of where you can do that and so we have

584
00:26:56,700 --> 00:27:02,220
built into our analyzer understand what

585
00:26:59,400 --> 00:27:04,440
kind of things in exercise and here we

586
00:27:02,220 --> 00:27:06,120
have an issue and after that after

587
00:27:04,440 --> 00:27:08,160
finding a problem would get a certain

588
00:27:06,120 --> 00:27:10,050
alerting okay guys we have to look into

589
00:27:08,160 --> 00:27:13,500
that probably there's an issue with your

590
00:27:10,050 --> 00:27:16,139
ex I says let's make a summary what do

591
00:27:13,500 --> 00:27:18,630
we have what is our result we've learned

592
00:27:16,140 --> 00:27:21,450
how to find certain vulnerabilities

593
00:27:18,630 --> 00:27:23,010
which we fail to identify before because

594
00:27:21,450 --> 00:27:25,560
they had been too many we didn't have

595
00:27:23,010 --> 00:27:27,900
time to or chance to find them and with

596
00:27:25,560 --> 00:27:30,629
with testing will sit in covered all the

597
00:27:27,900 --> 00:27:33,060
old in all the cases of static sounders

598
00:27:30,630 --> 00:27:35,760
in regression it's also become because

599
00:27:33,060 --> 00:27:37,860
we have a certain set of old box with a

600
00:27:35,760 --> 00:27:40,080
certain probability may reappear in the

601
00:27:37,860 --> 00:27:42,389
system in the code and so heaven Lord

602
00:27:40,080 --> 00:27:44,399
our scanner to find all the ultra

603
00:27:42,390 --> 00:27:47,820
vulnerabilities we guarantee that in

604
00:27:44,400 --> 00:27:49,560
case guys will return this bug we will

605
00:27:47,820 --> 00:27:51,899
find this bug will track it in the

606
00:27:49,560 --> 00:27:54,389
system also we have several ways of how

607
00:27:51,900 --> 00:27:58,380
to control these very trusted inputs

608
00:27:54,390 --> 00:28:01,410
number one would be marking that and we

609
00:27:58,380 --> 00:28:04,190
can help them config analyser which is

610
00:28:01,410 --> 00:28:06,660
also only working on my de Graaff but

611
00:28:04,190 --> 00:28:08,640
it's gonna make it an aesthetic machine

612
00:28:06,660 --> 00:28:11,360
and also we have the additional

613
00:28:08,640 --> 00:28:14,010
utilities which are based on the HT tree

614
00:28:11,360 --> 00:28:15,780
enabling us first of all to understand

615
00:28:14,010 --> 00:28:18,870
what data are being stored in a

616
00:28:15,780 --> 00:28:20,399
particular front and amp and also to

617
00:28:18,870 --> 00:28:22,860
controls and make sure that developers

618
00:28:20,400 --> 00:28:26,039
will not forget to market certain things

619
00:28:22,860 --> 00:28:29,428
another benefit is customization unlike

620
00:28:26,039 --> 00:28:31,019
many many things you buy me the products

621
00:28:29,429 --> 00:28:32,940
you buy if for whatever reason you

622
00:28:31,019 --> 00:28:34,830
cannot make a certain rule it's

623
00:28:32,940 --> 00:28:36,600
impossible to make this rule then you

624
00:28:34,830 --> 00:28:38,309
will have to go into scanner you have to

625
00:28:36,600 --> 00:28:39,928
say guys you have to finish up the

626
00:28:38,309 --> 00:28:41,820
functionality it's not a fact that

627
00:28:39,929 --> 00:28:44,880
they'll be doing it in our case we

628
00:28:41,820 --> 00:28:47,580
always stick we see the problem and we

629
00:28:44,880 --> 00:28:50,340
go and fix this problem it's very

630
00:28:47,580 --> 00:28:52,260
convenient we do not have very very

631
00:28:50,340 --> 00:28:54,840
false positive very high false positive

632
00:28:52,260 --> 00:28:57,149
rate about 10% for tracking which is

633
00:28:54,840 --> 00:29:01,590
basically ok with false positives in

634
00:28:57,149 --> 00:29:04,590
about 40% with XSS it looks like 40% is

635
00:29:01,590 --> 00:29:06,539
a lot but it's not actually a lot it is

636
00:29:04,590 --> 00:29:08,730
not like a gigantic number like hundreds

637
00:29:06,539 --> 00:29:12,750
or thousands I was speaking about

638
00:29:08,730 --> 00:29:14,370
deserts and to you know to to work with

639
00:29:12,750 --> 00:29:16,710
this kind of quantity is not a big

640
00:29:14,370 --> 00:29:19,799
problem speaking about the advantages a

641
00:29:16,710 --> 00:29:22,559
low-cost we've used a little literally

642
00:29:19,799 --> 00:29:24,090
couple months for the development and

643
00:29:22,559 --> 00:29:26,370
this is very good because we have spent

644
00:29:24,090 --> 00:29:28,289
less time for development even if I

645
00:29:26,370 --> 00:29:30,840
would spend on a manual reviews of the

646
00:29:28,289 --> 00:29:33,090
code and never-ending running back in

647
00:29:30,840 --> 00:29:35,279
front of this cold with this with these

648
00:29:33,090 --> 00:29:37,918
tasks and also the support does not take

649
00:29:35,279 --> 00:29:39,450
much resources many resources because

650
00:29:37,919 --> 00:29:41,909
we'll find some things false negatives

651
00:29:39,450 --> 00:29:43,970
and we simply have a specific case we

652
00:29:41,909 --> 00:29:46,649
need just to adjust that case-by-case

653
00:29:43,970 --> 00:29:49,169
these are the very good links for you to

654
00:29:46,649 --> 00:29:52,408
study it's an ad parser for IAS

655
00:29:49,169 --> 00:29:54,120
departure for angular ast parser for

656
00:29:52,409 --> 00:29:56,279
Dart in a little bit of theory for

657
00:29:54,120 --> 00:29:59,000
aesthetical analysis and I think we are

658
00:29:56,279 --> 00:29:59,000
done with this end

659
00:29:59,920 --> 00:30:01,980
you

