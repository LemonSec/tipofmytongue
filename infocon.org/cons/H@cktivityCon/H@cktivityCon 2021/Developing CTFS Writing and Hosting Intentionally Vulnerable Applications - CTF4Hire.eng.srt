1
00:00:06,160 --> 00:00:09,309
[Music]

2
00:00:11,280 --> 00:00:13,759
hello everyone my name is matt ernst

3
00:00:13,759 --> 00:00:16,000
wonder and i will be giving a talk on

4
00:00:16,000 --> 00:00:18,240
developing ctfs writing and hosting

5
00:00:18,240 --> 00:00:20,640
intentionally insecure software this

6
00:00:20,640 --> 00:00:22,160
talk is going to peel back the curtain a

7
00:00:22,160 --> 00:00:24,480
little bit on what it takes to actually

8
00:00:24,480 --> 00:00:28,480
host a capture the fly competition

9
00:00:28,480 --> 00:00:31,279
a little bit about me i do a lot of ctfs

10
00:00:31,279 --> 00:00:34,480
i find them very fun and exciting

11
00:00:34,480 --> 00:00:36,399
most recently i competed in red team

12
00:00:36,399 --> 00:00:38,960
village ctf and we placed top 15 which

13
00:00:38,960 --> 00:00:40,559
was a lot of fun

14
00:00:40,559 --> 00:00:43,200
i also do some ctf challenge development

15
00:00:43,200 --> 00:00:46,079
and ccf hosting i work with the ctf for

16
00:00:46,079 --> 00:00:48,559
hire team developing challenges and

17
00:00:48,559 --> 00:00:50,640
we've hosted many different ctfs we

18
00:00:50,640 --> 00:00:52,640
hosted activitycon last year we're

19
00:00:52,640 --> 00:00:55,120
hosting activitycon this year

20
00:00:55,120 --> 00:00:57,360
and i've developed many challenges for

21
00:00:57,360 --> 00:01:00,640
them and i've also hosted ccfs on my own

22
00:01:00,640 --> 00:01:03,280
for the student organization i am the

23
00:01:03,280 --> 00:01:05,199
president of at clemson

24
00:01:05,199 --> 00:01:07,360
i am a third year computer engineering

25
00:01:07,360 --> 00:01:08,640
student over there

26
00:01:08,640 --> 00:01:12,159
and cu cyber does a lot of cyber

27
00:01:12,159 --> 00:01:14,080
security related stuff not just for

28
00:01:14,080 --> 00:01:17,119
competitions but it's a club based in

29
00:01:17,119 --> 00:01:19,280
clemson who for people who are very

30
00:01:19,280 --> 00:01:22,880
interested in cyber security

31
00:01:23,280 --> 00:01:24,880
here's a little overview on what this

32
00:01:24,880 --> 00:01:26,720
talk's going to be about first we're

33
00:01:26,720 --> 00:01:28,799
going to talk about what are ctfs the

34
00:01:28,799 --> 00:01:31,439
different kinds of ctfs because

35
00:01:31,439 --> 00:01:34,079
the different kind of ctf can vary

36
00:01:34,079 --> 00:01:36,159
on what the infrastructure looks like

37
00:01:36,159 --> 00:01:37,280
i'm going to talk a little bit about

38
00:01:37,280 --> 00:01:39,439
what ctf infrastructure generally looks

39
00:01:39,439 --> 00:01:40,479
like

40
00:01:40,479 --> 00:01:42,159
then we're going to transition over to

41
00:01:42,159 --> 00:01:44,320
writing ctf challenges

42
00:01:44,320 --> 00:01:46,479
it's mainly going to focus on taking

43
00:01:46,479 --> 00:01:51,360
your challenge idea such as an sqli or

44
00:01:51,360 --> 00:01:53,680
local file inclusion and actually being

45
00:01:53,680 --> 00:01:57,280
able to host it and run it on a server

46
00:01:57,280 --> 00:01:58,320
then we're going to talk a little bit

47
00:01:58,320 --> 00:02:00,240
about the challenge and infrastructure

48
00:02:00,240 --> 00:02:02,880
security this is a hacking competition

49
00:02:02,880 --> 00:02:05,280
so there is a lot of security involved

50
00:02:05,280 --> 00:02:07,680
with running these things

51
00:02:07,680 --> 00:02:09,360
after that we'll transition to common

52
00:02:09,360 --> 00:02:11,840
pitfalls and good practices these common

53
00:02:11,840 --> 00:02:14,400
pitfalls are a lot of

54
00:02:14,400 --> 00:02:16,400
people approaching me asking questions

55
00:02:16,400 --> 00:02:18,800
about hosting ctfs and their

56
00:02:18,800 --> 00:02:20,959
misconceptions they have when it comes

57
00:02:20,959 --> 00:02:23,200
to developing challenges

58
00:02:23,200 --> 00:02:25,360
provisioning infrastructure

59
00:02:25,360 --> 00:02:26,800
and the good practices are good

60
00:02:26,800 --> 00:02:29,280
practices not best practices because

61
00:02:29,280 --> 00:02:31,680
every time i rate challenges or i host a

62
00:02:31,680 --> 00:02:33,920
ctf i'm constantly learning something

63
00:02:33,920 --> 00:02:34,959
new

64
00:02:34,959 --> 00:02:37,440
so my good practices are always changing

65
00:02:37,440 --> 00:02:40,800
and i can't really say they're the best

66
00:02:40,800 --> 00:02:42,959
after that we'll go one step further and

67
00:02:42,959 --> 00:02:45,599
talk about ways you can improve on these

68
00:02:45,599 --> 00:02:46,800
ideas

69
00:02:46,800 --> 00:02:51,519
and make the ccf hosting more fun

70
00:02:51,519 --> 00:02:53,920
so firstly what is a capture of the flag

71
00:02:53,920 --> 00:02:55,280
competition

72
00:02:55,280 --> 00:02:56,720
the whole capture the flag idea

73
00:02:56,720 --> 00:02:58,480
originates from the traditional game

74
00:02:58,480 --> 00:03:00,640
where you have two different teams or

75
00:03:00,640 --> 00:03:01,519
more

76
00:03:01,519 --> 00:03:04,480
compete trying to steal a flag from each

77
00:03:04,480 --> 00:03:06,239
other's territory and delivering it to

78
00:03:06,239 --> 00:03:08,319
some central location or to their

79
00:03:08,319 --> 00:03:10,958
territory

80
00:03:11,120 --> 00:03:14,000
the people over at def con decided to

81
00:03:14,000 --> 00:03:16,400
adapt this for computers

82
00:03:16,400 --> 00:03:18,720
so instead of people in some physical

83
00:03:18,720 --> 00:03:21,040
location trying to capture a flag from

84
00:03:21,040 --> 00:03:23,120
somebody else's territory

85
00:03:23,120 --> 00:03:25,519
it's people on computers trying to hack

86
00:03:25,519 --> 00:03:27,440
into other people's computers trying to

87
00:03:27,440 --> 00:03:30,400
steal some sort of flag or a file and

88
00:03:30,400 --> 00:03:33,120
then delivering it to the flag

89
00:03:33,120 --> 00:03:36,319
verification server

90
00:03:37,840 --> 00:03:41,200
there's also other ctfs so another idea

91
00:03:41,200 --> 00:03:44,159
that came about is let's mix jeopardy in

92
00:03:44,159 --> 00:03:46,560
this whole uh capture the flag

93
00:03:46,560 --> 00:03:48,159
competition idea

94
00:03:48,159 --> 00:03:50,159
so with the jeopardy ctf which is the

95
00:03:50,159 --> 00:03:53,519
one that activity con is it all of the

96
00:03:53,519 --> 00:03:56,080
challenges or vulnerable services you

97
00:03:56,080 --> 00:03:58,319
have to hack are laid out in a jeopardy

98
00:03:58,319 --> 00:03:59,439
board

99
00:03:59,439 --> 00:04:02,159
separated by a challenge category and

100
00:04:02,159 --> 00:04:04,959
also the number of points

101
00:04:04,959 --> 00:04:06,959
that you will get for solving each

102
00:04:06,959 --> 00:04:09,360
challenge

103
00:04:12,080 --> 00:04:15,280
another common type of uh ctf is boots

104
00:04:15,280 --> 00:04:16,238
root

105
00:04:16,238 --> 00:04:19,279
boots root is the ctf you'll see on the

106
00:04:19,279 --> 00:04:21,358
try hack me platform or hack the box

107
00:04:21,358 --> 00:04:22,720
platform

108
00:04:22,720 --> 00:04:24,639
this is slightly different than your

109
00:04:24,639 --> 00:04:26,400
jeopardy style where instead of

110
00:04:26,400 --> 00:04:29,360
attacking some individual service you're

111
00:04:29,360 --> 00:04:31,919
attacking a full machine

112
00:04:31,919 --> 00:04:35,440
so this involves a lot of enumeration

113
00:04:35,440 --> 00:04:37,520
privilege escalation whereas with the

114
00:04:37,520 --> 00:04:40,000
jeopardy ctf you won't really see a lot

115
00:04:40,000 --> 00:04:41,919
of that enumeration and privilege

116
00:04:41,919 --> 00:04:43,120
escalation

117
00:04:43,120 --> 00:04:47,199
it's mainly whatever challenge you see

118
00:04:53,600 --> 00:04:56,400
ctfs have evolved a lot over the years

119
00:04:56,400 --> 00:04:58,400
um

120
00:04:58,400 --> 00:05:00,880
many different spin-offs to ctfs have

121
00:05:00,880 --> 00:05:03,840
come about one is called the splunk boss

122
00:05:03,840 --> 00:05:06,000
of the security operations center

123
00:05:06,000 --> 00:05:08,080
where with this one instead of actually

124
00:05:08,080 --> 00:05:10,320
hacking into different services you're

125
00:05:10,320 --> 00:05:12,639
given some sort of splunk logs or access

126
00:05:12,639 --> 00:05:14,160
to a splunk instance and you have to go

127
00:05:14,160 --> 00:05:15,280
and find

128
00:05:15,280 --> 00:05:17,600
flags or other things in the splunk

129
00:05:17,600 --> 00:05:19,759
instance there's also king of the hill

130
00:05:19,759 --> 00:05:21,360
where instead of people attacking each

131
00:05:21,360 --> 00:05:23,280
other they're attacking one central

132
00:05:23,280 --> 00:05:25,199
machine

133
00:05:25,199 --> 00:05:28,320
hack quest and many others

134
00:05:28,320 --> 00:05:29,840
the one thing that they all share in

135
00:05:29,840 --> 00:05:31,520
common is

136
00:05:31,520 --> 00:05:34,000
you're solving some sort of task and

137
00:05:34,000 --> 00:05:36,160
receiving a reward for it which is the

138
00:05:36,160 --> 00:05:39,160
points

139
00:05:39,360 --> 00:05:42,560
based on the number of points you get

140
00:05:42,560 --> 00:05:44,400
determined on what position on the

141
00:05:44,400 --> 00:05:47,520
scoreboard you'll become

142
00:05:48,000 --> 00:05:50,320
okay so why isn't knowing all of the

143
00:05:50,320 --> 00:05:52,160
terminology and different types of ctf

144
00:05:52,160 --> 00:05:53,600
is important

145
00:05:53,600 --> 00:05:56,000
well the type of hosting and the

146
00:05:56,000 --> 00:05:58,240
security considerations really change

147
00:05:58,240 --> 00:05:59,440
depending on

148
00:05:59,440 --> 00:06:02,560
the type of ccf you want to do

149
00:06:02,560 --> 00:06:04,880
for the boot to root you really have to

150
00:06:04,880 --> 00:06:06,479
keep in mind hey

151
00:06:06,479 --> 00:06:08,400
we're attacking you know full-on

152
00:06:08,400 --> 00:06:09,840
machines

153
00:06:09,840 --> 00:06:11,199
however we need to make sure the whole

154
00:06:11,199 --> 00:06:13,520
network those machines on is secure

155
00:06:13,520 --> 00:06:15,680
whereas with jeopardy jeopardy style

156
00:06:15,680 --> 00:06:17,600
ctfs you're only caring about the one

157
00:06:17,600 --> 00:06:19,199
little service or the one little

158
00:06:19,199 --> 00:06:20,960
challenge

159
00:06:20,960 --> 00:06:23,680
since activitycon is a jeopardy style

160
00:06:23,680 --> 00:06:26,319
this presentation will focus on that

161
00:06:26,319 --> 00:06:28,400
if you're interested in the more boots

162
00:06:28,400 --> 00:06:30,720
root style or the attack defense style

163
00:06:30,720 --> 00:06:34,840
there are many resources online

164
00:06:35,600 --> 00:06:36,639
okay so that's a little bit of

165
00:06:36,639 --> 00:06:38,560
background on what ctfs are what the

166
00:06:38,560 --> 00:06:40,880
different types of ctfs are just to gain

167
00:06:40,880 --> 00:06:43,440
some common knowledge let's start going

168
00:06:43,440 --> 00:06:46,800
into the actual infrastructure

169
00:06:46,880 --> 00:06:49,440
so the ctf infrastructure mainly has two

170
00:06:49,440 --> 00:06:51,919
sides you have the scoreboard side and

171
00:06:51,919 --> 00:06:53,759
the actual challenge side

172
00:06:53,759 --> 00:06:56,319
so the scoreboard is what is used to

173
00:06:56,319 --> 00:06:58,800
keep track of the users

174
00:06:58,800 --> 00:07:01,680
it also presents the challenges to the

175
00:07:01,680 --> 00:07:03,039
players

176
00:07:03,039 --> 00:07:05,680
and it also keeps track of login

177
00:07:05,680 --> 00:07:08,560
information and other

178
00:07:08,560 --> 00:07:11,120
scoring

179
00:07:14,240 --> 00:07:17,039
luckily for people who want to host etfs

180
00:07:17,039 --> 00:07:20,720
a lot of the scoreboard frameworks exist

181
00:07:20,720 --> 00:07:23,759
nowadays so there's no need to go and

182
00:07:23,759 --> 00:07:26,000
develop your own website

183
00:07:26,000 --> 00:07:28,080
to actually

184
00:07:28,080 --> 00:07:29,680
host a ctf

185
00:07:29,680 --> 00:07:31,680
the common frameworks that exist are

186
00:07:31,680 --> 00:07:35,759
ctfd rctf and ccfx they're all free and

187
00:07:35,759 --> 00:07:39,280
open source over on github

188
00:07:40,240 --> 00:07:43,280
at activitycon we use ccfd a very

189
00:07:43,280 --> 00:07:46,080
heavily modified version of ctdfd for

190
00:07:46,080 --> 00:07:47,599
people who are just starting out with

191
00:07:47,599 --> 00:07:50,639
ctf development i highly recommend ccfd

192
00:07:50,639 --> 00:07:52,080
it's very easy

193
00:07:52,080 --> 00:07:53,280
to

194
00:07:53,280 --> 00:07:57,719
learn and very easy to get started with

195
00:07:59,360 --> 00:08:01,039
so here's a little bit about what the

196
00:08:01,039 --> 00:08:02,319
actual

197
00:08:02,319 --> 00:08:04,319
scoreboard looks like you'll typically

198
00:08:04,319 --> 00:08:08,080
have some sort of web front end so

199
00:08:08,080 --> 00:08:10,080
this web front end will be in charge of

200
00:08:10,080 --> 00:08:11,599
actually displaying the information to

201
00:08:11,599 --> 00:08:12,479
the user

202
00:08:12,479 --> 00:08:14,560
and it will communicate with the backend

203
00:08:14,560 --> 00:08:15,680
which will then communicate with the

204
00:08:15,680 --> 00:08:17,360
database and the database will contain

205
00:08:17,360 --> 00:08:19,840
things such as the user information team

206
00:08:19,840 --> 00:08:21,039
information

207
00:08:21,039 --> 00:08:23,680
if a team submits a flag the backend

208
00:08:23,680 --> 00:08:25,120
will be in charge of querying the

209
00:08:25,120 --> 00:08:27,120
database to make sure is the flag

210
00:08:27,120 --> 00:08:28,720
submitted actually line up with the

211
00:08:28,720 --> 00:08:31,919
challenge they're submitting it for

212
00:08:32,559 --> 00:08:34,958
this is why a lot of cts will use

213
00:08:34,958 --> 00:08:37,279
pre-existing frameworks because a lot

214
00:08:37,279 --> 00:08:38,640
can go on

215
00:08:38,640 --> 00:08:42,958
just based on the store the scoreboard

216
00:08:43,440 --> 00:08:46,320
for activitycon ctf we use ctfd as i

217
00:08:46,320 --> 00:08:48,480
mentioned it's a heavily modified

218
00:08:48,480 --> 00:08:50,880
version of ccfd that we have integrated

219
00:08:50,880 --> 00:08:52,560
with kubernetes and we'll talk a little

220
00:08:52,560 --> 00:08:54,080
bit about that later on in the

221
00:08:54,080 --> 00:08:55,920
presentation

222
00:08:55,920 --> 00:08:58,320
but ccfd is a fantastic framework very

223
00:08:58,320 --> 00:09:01,360
easy to get started with

224
00:09:02,480 --> 00:09:03,680
on the opposite side of the

225
00:09:03,680 --> 00:09:05,839
infrastructure is the back end so the

226
00:09:05,839 --> 00:09:07,839
back end is what is in charge of

227
00:09:07,839 --> 00:09:10,640
actually hosting the challenges

228
00:09:10,640 --> 00:09:12,800
a lot of challenges require some sort of

229
00:09:12,800 --> 00:09:15,600
website to connect to or some sort of

230
00:09:15,600 --> 00:09:18,959
netcat host and port to connect to

231
00:09:18,959 --> 00:09:21,519
the challenge the backend infrastructure

232
00:09:21,519 --> 00:09:23,519
really needs to provide a

233
00:09:23,519 --> 00:09:25,839
good isolation between challenges

234
00:09:25,839 --> 00:09:29,360
you don't want a rce and some web app to

235
00:09:29,360 --> 00:09:31,839
allow somebody to leak a flag another

236
00:09:31,839 --> 00:09:33,519
app because then that would defeat the

237
00:09:33,519 --> 00:09:34,720
purpose of having two different

238
00:09:34,720 --> 00:09:36,560
challenges

239
00:09:36,560 --> 00:09:38,640
another good thing to have for a back

240
00:09:38,640 --> 00:09:40,800
end is an easy interface for managing

241
00:09:40,800 --> 00:09:42,240
these challenges

242
00:09:42,240 --> 00:09:44,720
if you're writing a ctf which has

243
00:09:44,720 --> 00:09:47,839
20 to 50 challenges that's a lot of

244
00:09:47,839 --> 00:09:49,519
challenges to manage

245
00:09:49,519 --> 00:09:51,360
and a lot of things going on behind the

246
00:09:51,360 --> 00:09:53,839
scenes so just having that good easy

247
00:09:53,839 --> 00:09:55,920
interface to start challenges start

248
00:09:55,920 --> 00:09:57,440
challenge stop challenges and make

249
00:09:57,440 --> 00:10:00,000
changes is very helpful

250
00:10:00,000 --> 00:10:02,240
the main thing about hosting these

251
00:10:02,240 --> 00:10:04,880
challenges is they they do have some

252
00:10:04,880 --> 00:10:07,040
sort of vulnerability in them but you

253
00:10:07,040 --> 00:10:09,600
need to make sure there's no unintended

254
00:10:09,600 --> 00:10:11,519
vulnerability you need to make sure that

255
00:10:11,519 --> 00:10:16,800
security is definitely the top priority

256
00:10:16,959 --> 00:10:18,720
this is a little overview on what the

257
00:10:18,720 --> 00:10:21,600
actual infrastructure is let's start

258
00:10:21,600 --> 00:10:23,600
getting into

259
00:10:23,600 --> 00:10:26,640
writing these challenges

260
00:10:26,640 --> 00:10:29,440
there are two major types of challenges

261
00:10:29,440 --> 00:10:30,560
in

262
00:10:30,560 --> 00:10:32,640
jeopardy ctfs there's a network and a

263
00:10:32,640 --> 00:10:34,000
static type

264
00:10:34,000 --> 00:10:37,040
so the static types are your very basic

265
00:10:37,040 --> 00:10:39,519
challenges where you have to do

266
00:10:39,519 --> 00:10:41,680
pretty much nothing on the back end

267
00:10:41,680 --> 00:10:43,760
there's only a file that you have to

268
00:10:43,760 --> 00:10:45,839
download if that

269
00:10:45,839 --> 00:10:47,920
if you look at the os challenges that we

270
00:10:47,920 --> 00:10:50,079
have in activity con there isn't even a

271
00:10:50,079 --> 00:10:51,519
file to download it's just some

272
00:10:51,519 --> 00:10:53,519
description this is what you would label

273
00:10:53,519 --> 00:10:56,079
as a static challenge there's no

274
00:10:56,079 --> 00:10:57,920
software needed to actually run some

275
00:10:57,920 --> 00:10:58,839
sort of

276
00:10:58,839 --> 00:11:01,519
service on the contrary to that there

277
00:11:01,519 --> 00:11:03,360
are network challenges

278
00:11:03,360 --> 00:11:06,240
so these network challenges have some

279
00:11:06,240 --> 00:11:08,160
form of service running on the backend

280
00:11:08,160 --> 00:11:09,519
infrastructure

281
00:11:09,519 --> 00:11:11,600
these generally are web challenges and

282
00:11:11,600 --> 00:11:13,920
binary exploitation challenges however

283
00:11:13,920 --> 00:11:14,720
you're

284
00:11:14,720 --> 00:11:17,440
free to open

285
00:11:17,839 --> 00:11:20,240
free to free to be creative on this and

286
00:11:20,240 --> 00:11:22,320
it can be any challenge you want that

287
00:11:22,320 --> 00:11:23,760
needs a

288
00:11:23,760 --> 00:11:26,720
networked component

289
00:11:26,880 --> 00:11:28,720
a lot of the times with networks

290
00:11:28,720 --> 00:11:30,160
challenges there's more developments

291
00:11:30,160 --> 00:11:31,279
involved

292
00:11:31,279 --> 00:11:33,519
just based on writing the actual what i

293
00:11:33,519 --> 00:11:35,760
call infrastructure code which is the

294
00:11:35,760 --> 00:11:37,760
code needed to run the chat run the

295
00:11:37,760 --> 00:11:40,760
challenge

296
00:11:42,880 --> 00:11:44,640
so static challenges are very easy to

297
00:11:44,640 --> 00:11:47,279
develop they can be something as basic

298
00:11:47,279 --> 00:11:48,600
as a

299
00:11:48,600 --> 00:11:51,120
helloworld.txt file so just a plain text

300
00:11:51,120 --> 00:11:52,800
file to something as complicated as a

301
00:11:52,800 --> 00:11:56,639
full hard drive partition

302
00:11:56,639 --> 00:11:58,720
you're really not limited in what type

303
00:11:58,720 --> 00:12:01,440
of static challenge you can create

304
00:12:01,440 --> 00:12:03,839
the only limitation really would be

305
00:12:03,839 --> 00:12:05,279
where you're deciding to host these

306
00:12:05,279 --> 00:12:06,639
files

307
00:12:06,639 --> 00:12:08,959
it could be some sort of amazon s3

308
00:12:08,959 --> 00:12:11,600
bucket it could be some sort of google

309
00:12:11,600 --> 00:12:14,320
drive instance

310
00:12:14,320 --> 00:12:15,920
but along with that with static

311
00:12:15,920 --> 00:12:17,600
challenge there's really no security

312
00:12:17,600 --> 00:12:19,519
concerns that you have to keep in mind

313
00:12:19,519 --> 00:12:20,880
which is really

314
00:12:20,880 --> 00:12:24,279
a great advantage

315
00:12:24,320 --> 00:12:26,079
so with network challenges network

316
00:12:26,079 --> 00:12:28,399
challenges are the challenges which you

317
00:12:28,399 --> 00:12:30,480
as the player would connect to so these

318
00:12:30,480 --> 00:12:32,800
can be websites these can be

319
00:12:32,800 --> 00:12:35,279
tcp servers pretty much anything which

320
00:12:35,279 --> 00:12:38,639
requires some sort of network component

321
00:12:38,639 --> 00:12:40,800
the most common ways of hosting these

322
00:12:40,800 --> 00:12:42,160
network challenges are through

323
00:12:42,160 --> 00:12:45,519
containers or virtual machines

324
00:12:45,519 --> 00:12:47,920
for activity con we use containers

325
00:12:47,920 --> 00:12:49,440
virtual machines are also another good

326
00:12:49,440 --> 00:12:51,440
option however we just prefer containers

327
00:12:51,440 --> 00:12:54,720
because it makes our life easier

328
00:12:55,600 --> 00:12:57,839
the way we utilize these containers is

329
00:12:57,839 --> 00:12:59,360
through docker

330
00:12:59,360 --> 00:13:02,320
so docker is a very intuitive and easy

331
00:13:02,320 --> 00:13:03,920
platform to learn

332
00:13:03,920 --> 00:13:05,360
for developing

333
00:13:05,360 --> 00:13:07,519
containerized applications

334
00:13:07,519 --> 00:13:09,120
docker is also great because it helps

335
00:13:09,120 --> 00:13:09,839
leave

336
00:13:09,839 --> 00:13:12,560
the it works my machine where software

337
00:13:12,560 --> 00:13:14,800
on my machine works perfectly fine

338
00:13:14,800 --> 00:13:16,399
however i push it to the server and

339
00:13:16,399 --> 00:13:18,880
something doesn't work

340
00:13:18,880 --> 00:13:20,720
another great tool with docker is docker

341
00:13:20,720 --> 00:13:21,839
compose

342
00:13:21,839 --> 00:13:25,279
which provides a very intuitive way of

343
00:13:25,279 --> 00:13:27,279
container orchestration or managing all

344
00:13:27,279 --> 00:13:29,360
of these different challenges

345
00:13:29,360 --> 00:13:31,279
another great advantage of containers is

346
00:13:31,279 --> 00:13:32,399
that they're lighter weight than full

347
00:13:32,399 --> 00:13:33,839
virtual machines they don't have to

348
00:13:33,839 --> 00:13:35,839
actually virtualize a full kernel or

349
00:13:35,839 --> 00:13:39,040
operating system they utilize the kernel

350
00:13:39,040 --> 00:13:41,440
of the system which is very very

351
00:13:41,440 --> 00:13:43,440
convenient because it means you don't

352
00:13:43,440 --> 00:13:46,160
require as many servers

353
00:13:46,160 --> 00:13:48,320
another awesome thing about docker is it

354
00:13:48,320 --> 00:13:50,560
provides easy transport of challenges

355
00:13:50,560 --> 00:13:52,160
when i what i mean about transporter

356
00:13:52,160 --> 00:13:53,760
challenges is

357
00:13:53,760 --> 00:13:56,399
let's say i write some form of challenge

358
00:13:56,399 --> 00:13:58,480
for a ccf for my friend

359
00:13:58,480 --> 00:14:01,440
well i send them the code and say hey it

360
00:14:01,440 --> 00:14:03,199
runs with docker and if they know how to

361
00:14:03,199 --> 00:14:06,000
use docker they can easily run it

362
00:14:06,000 --> 00:14:08,000
however if i were to send it to someone

363
00:14:08,000 --> 00:14:10,000
but not put it in a

364
00:14:10,000 --> 00:14:12,160
not included docker file i would have to

365
00:14:12,160 --> 00:14:14,240
explain to them hey you have to install

366
00:14:14,240 --> 00:14:16,079
these dependencies you have to run it

367
00:14:16,079 --> 00:14:17,839
like this you have to make sure these

368
00:14:17,839 --> 00:14:19,519
ports are open

369
00:14:19,519 --> 00:14:21,440
docker just makes life a lot easier

370
00:14:21,440 --> 00:14:23,040
whenever you're trying to transport

371
00:14:23,040 --> 00:14:25,519
software

372
00:14:25,920 --> 00:14:28,240
this is the basic layout of what a web

373
00:14:28,240 --> 00:14:29,600
challenge would look like in a docker

374
00:14:29,600 --> 00:14:30,959
container

375
00:14:30,959 --> 00:14:32,480
a lot of the

376
00:14:32,480 --> 00:14:34,720
web challenges are just are written in

377
00:14:34,720 --> 00:14:36,800
whatever web language you choose for me

378
00:14:36,800 --> 00:14:38,720
i'm familiar with flask so here's a

379
00:14:38,720 --> 00:14:40,320
flask example

380
00:14:40,320 --> 00:14:42,639
on the right picture you'll see a basic

381
00:14:42,639 --> 00:14:44,720
directory structure you have an app

382
00:14:44,720 --> 00:14:46,880
directory and then the docker file on

383
00:14:46,880 --> 00:14:48,480
the left you'll see what's inside the

384
00:14:48,480 --> 00:14:51,199
actual docker file so we'll use the

385
00:14:51,199 --> 00:14:54,079
alpine image install python

386
00:14:54,079 --> 00:14:56,079
then install the

387
00:14:56,079 --> 00:14:58,959
requirements for the actual flask

388
00:14:58,959 --> 00:15:00,160
application

389
00:15:00,160 --> 00:15:03,680
and i will run it with unicorn

390
00:15:03,839 --> 00:15:05,440
here's what a binary exploitation

391
00:15:05,440 --> 00:15:06,959
challenge would look like

392
00:15:06,959 --> 00:15:09,519
so it's very similar just installs all

393
00:15:09,519 --> 00:15:11,600
of the necessary files

394
00:15:11,600 --> 00:15:14,160
it will use the ubuntu

395
00:15:14,160 --> 00:15:16,800
base image then it will copy in the

396
00:15:16,800 --> 00:15:17,920
binary

397
00:15:17,920 --> 00:15:20,639
file or application copy in the flag

398
00:15:20,639 --> 00:15:22,320
set some permissions to make sure people

399
00:15:22,320 --> 00:15:24,560
can't delete the flag or delete the file

400
00:15:24,560 --> 00:15:26,399
and then run the challenge with socat so

401
00:15:26,399 --> 00:15:29,760
that people can connect to it

402
00:15:30,000 --> 00:15:31,680
a great thing about docker as i

403
00:15:31,680 --> 00:15:33,040
mentioned before that comes with docker

404
00:15:33,040 --> 00:15:35,600
compose to docker compose is just one

405
00:15:35,600 --> 00:15:38,800
command which allows for easy

406
00:15:38,800 --> 00:15:40,880
managing of all of these challenges

407
00:15:40,880 --> 00:15:42,800
as i said if you have 20 to 50

408
00:15:42,800 --> 00:15:44,720
challenges you're going to want to find

409
00:15:44,720 --> 00:15:46,160
some way of

410
00:15:46,160 --> 00:15:48,079
doing patches

411
00:15:48,079 --> 00:15:49,519
running health checks making sure

412
00:15:49,519 --> 00:15:51,120
everything is running if you need to

413
00:15:51,120 --> 00:15:52,480
take a challenge down you want to make

414
00:15:52,480 --> 00:15:53,839
sure you take down the challenge you

415
00:15:53,839 --> 00:15:55,279
need to take down and not some other

416
00:15:55,279 --> 00:15:57,600
challenge

417
00:15:59,440 --> 00:16:01,680
so here's what a basic docker compose

418
00:16:01,680 --> 00:16:03,759
file would look like on the left you see

419
00:16:03,759 --> 00:16:06,560
we have two services we have our web one

420
00:16:06,560 --> 00:16:08,320
and our bin x1

421
00:16:08,320 --> 00:16:10,800
then we have a container name which we

422
00:16:10,800 --> 00:16:13,279
supplied and then the build is a path to

423
00:16:13,279 --> 00:16:14,800
a docker file

424
00:16:14,800 --> 00:16:18,160
so in the web slash web 1 we have a

425
00:16:18,160 --> 00:16:20,639
docker file in there

426
00:16:20,639 --> 00:16:22,800
along with that you specify ports you

427
00:16:22,800 --> 00:16:24,160
need to expose

428
00:16:24,160 --> 00:16:26,480
so for the services in web one what we

429
00:16:26,480 --> 00:16:28,480
are doing is we're saying hey

430
00:16:28,480 --> 00:16:31,360
port 8080 inside of the docker inside of

431
00:16:31,360 --> 00:16:32,639
the container

432
00:16:32,639 --> 00:16:34,880
is going to be mapped to port 50 000 on

433
00:16:34,880 --> 00:16:36,959
the machine and for the binary

434
00:16:36,959 --> 00:16:38,399
exploitation one

435
00:16:38,399 --> 00:16:40,959
port 9999 is going to be mapped to port

436
00:16:40,959 --> 00:16:44,240
50 100 on the machine

437
00:16:44,240 --> 00:16:46,160
also for the binary exploitation

438
00:16:46,160 --> 00:16:48,880
challenge i have added the read only is

439
00:16:48,880 --> 00:16:50,480
true flag

440
00:16:50,480 --> 00:16:52,320
this means that whenever the container

441
00:16:52,320 --> 00:16:54,800
runs the file system will be read only

442
00:16:54,800 --> 00:16:57,360
so people can't add files or delete

443
00:16:57,360 --> 00:16:59,120
files

444
00:16:59,120 --> 00:17:01,920
for the web application unfortunately

445
00:17:01,920 --> 00:17:04,400
with unicorn and flask it requires

446
00:17:04,400 --> 00:17:07,199
the temp directory to be writable so you

447
00:17:07,199 --> 00:17:09,199
can't really do that however for me

448
00:17:09,199 --> 00:17:10,959
personally whenever i am hosting

449
00:17:10,959 --> 00:17:12,480
challenges

450
00:17:12,480 --> 00:17:14,640
i highly recommend making the file

451
00:17:14,640 --> 00:17:17,280
system read only whenever you can just

452
00:17:17,280 --> 00:17:19,839
to limit the chances of people removing

453
00:17:19,839 --> 00:17:21,119
the flag

454
00:17:21,119 --> 00:17:24,160
or also you don't want people to

455
00:17:24,160 --> 00:17:26,880
spam a bunch of reverse shells on your

456
00:17:26,880 --> 00:17:28,240
container

457
00:17:28,240 --> 00:17:29,840
and you also don't want people to fill

458
00:17:29,840 --> 00:17:32,320
up the hard drive space of your machines

459
00:17:32,320 --> 00:17:34,080
that's why i always prefer to add the

460
00:17:34,080 --> 00:17:36,879
read-only flag

461
00:17:37,919 --> 00:17:39,840
so with these challenges

462
00:17:39,840 --> 00:17:42,160
you're very you're not limited by any

463
00:17:42,160 --> 00:17:43,760
means necessary

464
00:17:43,760 --> 00:17:47,200
the only limitation really would be

465
00:17:47,200 --> 00:17:49,200
if you wanted to run an actual you know

466
00:17:49,200 --> 00:17:50,880
virtual machine

467
00:17:50,880 --> 00:17:52,559
but challenges can be written in any

468
00:17:52,559 --> 00:17:54,400
programming language

469
00:17:54,400 --> 00:17:55,919
it doesn't have to be just one

470
00:17:55,919 --> 00:17:58,880
programming language it can be multiple

471
00:17:58,880 --> 00:18:00,799
but really as long as you can run your

472
00:18:00,799 --> 00:18:02,799
application in a docker container you

473
00:18:02,799 --> 00:18:05,039
should be able to run it

474
00:18:05,039 --> 00:18:06,720
one thing to keep in mind when creating

475
00:18:06,720 --> 00:18:08,640
these docker files is prioritize

476
00:18:08,640 --> 00:18:10,640
security so if you noticed in the

477
00:18:10,640 --> 00:18:12,799
challenges the challenge examples i

478
00:18:12,799 --> 00:18:13,679
showed

479
00:18:13,679 --> 00:18:15,360
they were running the applications as an

480
00:18:15,360 --> 00:18:18,480
underprivileged user

481
00:18:18,480 --> 00:18:21,520
also keep optim optimization in mind if

482
00:18:21,520 --> 00:18:23,120
you have some challenge which is

483
00:18:23,120 --> 00:18:24,960
designed to be

484
00:18:24,960 --> 00:18:26,880
designed to be hammered by a lot of

485
00:18:26,880 --> 00:18:28,480
network traffic

486
00:18:28,480 --> 00:18:30,799
instead of writing it in python which is

487
00:18:30,799 --> 00:18:33,120
a language which is known for being

488
00:18:33,120 --> 00:18:34,720
relatively slow and using a lot of

489
00:18:34,720 --> 00:18:36,960
resources you might want to transition

490
00:18:36,960 --> 00:18:38,080
to go

491
00:18:38,080 --> 00:18:40,240
this might seem as like a small little

492
00:18:40,240 --> 00:18:42,400
optimization however if you're running

493
00:18:42,400 --> 00:18:44,160
multiple copies of this challenge on a

494
00:18:44,160 --> 00:18:46,480
server or if you have

495
00:18:46,480 --> 00:18:48,559
a thousand people running their scripts

496
00:18:48,559 --> 00:18:49,919
at the same time

497
00:18:49,919 --> 00:18:52,160
all of the short little optimizations

498
00:18:52,160 --> 00:18:53,919
will really add up

499
00:18:53,919 --> 00:18:57,440
another thing is testing make sure that

500
00:18:57,440 --> 00:19:00,080
if people try to abuse the challenge in

501
00:19:00,080 --> 00:19:02,320
any way that you can stop them and

502
00:19:02,320 --> 00:19:04,000
prevent them

503
00:19:04,000 --> 00:19:07,280
i know it's very common for people to

504
00:19:07,280 --> 00:19:10,080
take a challenge they get code execution

505
00:19:10,080 --> 00:19:12,400
and then find some way to pivot you want

506
00:19:12,400 --> 00:19:16,080
to try to make sure they can't do that

507
00:19:19,120 --> 00:19:21,280
some general challenge development notes

508
00:19:21,280 --> 00:19:23,039
this applies to both the networked and

509
00:19:23,039 --> 00:19:24,880
the static challenges

510
00:19:24,880 --> 00:19:26,160
the most important thing is make sure

511
00:19:26,160 --> 00:19:27,840
they're actually solvable there have

512
00:19:27,840 --> 00:19:29,840
been times where people will release

513
00:19:29,840 --> 00:19:32,400
challenges which aren't solvable

514
00:19:32,400 --> 00:19:34,640
another thing is test very thoroughly

515
00:19:34,640 --> 00:19:35,440
you

516
00:19:35,440 --> 00:19:37,520
unintended aren't really that good as a

517
00:19:37,520 --> 00:19:38,960
challenge developer

518
00:19:38,960 --> 00:19:40,480
they make it look like you really didn't

519
00:19:40,480 --> 00:19:41,840
spend a lot of time working on the

520
00:19:41,840 --> 00:19:43,120
challenge

521
00:19:43,120 --> 00:19:44,960
so just make sure you test

522
00:19:44,960 --> 00:19:46,720
thoroughly and watch out for unintended

523
00:19:46,720 --> 00:19:48,080
solutions

524
00:19:48,080 --> 00:19:49,919
another thing to generally avoid is

525
00:19:49,919 --> 00:19:51,679
guessing challenges

526
00:19:51,679 --> 00:19:53,039
so if you have some sort of web

527
00:19:53,039 --> 00:19:55,919
challenge which has some obscure

528
00:19:55,919 --> 00:19:58,160
routes you want to make sure that route

529
00:19:58,160 --> 00:20:00,000
is either linked somewhere on the main

530
00:20:00,000 --> 00:20:02,640
page or people can easily find that

531
00:20:02,640 --> 00:20:04,720
because if people have to start guessing

532
00:20:04,720 --> 00:20:06,240
website routes they'll start running

533
00:20:06,240 --> 00:20:08,480
tools like nicto or gobuster which adds

534
00:20:08,480 --> 00:20:10,720
a bunch of unnecessary string on your

535
00:20:10,720 --> 00:20:12,960
servers you can often times bring them

536
00:20:12,960 --> 00:20:14,400
down

537
00:20:14,400 --> 00:20:15,919
another good thing is get creative with

538
00:20:15,919 --> 00:20:16,559
it

539
00:20:16,559 --> 00:20:19,120
you really shouldn't be limited by

540
00:20:19,120 --> 00:20:21,440
what a lot of people see in ccf such as

541
00:20:21,440 --> 00:20:23,120
web challenges binary exploitation

542
00:20:23,120 --> 00:20:25,360
challenges maybe you want to write some

543
00:20:25,360 --> 00:20:27,760
malware reverse engineering challenges

544
00:20:27,760 --> 00:20:29,440
so just keep that in mind whenever

545
00:20:29,440 --> 00:20:30,559
you're writing challenges it's good to

546
00:20:30,559 --> 00:20:35,080
get creative with it keep it fresh

547
00:20:35,679 --> 00:20:37,280
all right so that's a little bit about

548
00:20:37,280 --> 00:20:39,600
writing the ctf challenges let's talk a

549
00:20:39,600 --> 00:20:43,520
little bit more on the security side

550
00:20:43,520 --> 00:20:45,760
the one thing that i will constantly

551
00:20:45,760 --> 00:20:47,360
repeat throughout the rest of this

552
00:20:47,360 --> 00:20:50,320
presentation is never trust the player

553
00:20:50,320 --> 00:20:53,440
these are words of advice for anybody

554
00:20:53,440 --> 00:20:55,840
developing a ctf

555
00:20:55,840 --> 00:20:58,559
the main reason is you have no idea who

556
00:20:58,559 --> 00:21:01,440
that player is that player can be some

557
00:21:01,440 --> 00:21:03,600
middle schooler who just learned linux

558
00:21:03,600 --> 00:21:06,320
or it could be some professional

559
00:21:06,320 --> 00:21:08,320
nation state hacker who's who works for

560
00:21:08,320 --> 00:21:09,760
their government doing offensive

561
00:21:09,760 --> 00:21:13,360
security you just don't know

562
00:21:13,440 --> 00:21:15,280
another thing is

563
00:21:15,280 --> 00:21:17,120
you have to keep in mind of different

564
00:21:17,120 --> 00:21:19,440
types of denial of service tax

565
00:21:19,440 --> 00:21:22,480
you might think that uh the typical

566
00:21:22,480 --> 00:21:24,240
distributed denial of service attack

567
00:21:24,240 --> 00:21:26,000
where people flood your servers with

568
00:21:26,000 --> 00:21:27,360
internet traffic is the only table

569
00:21:27,360 --> 00:21:30,400
denial denial of service attack but it's

570
00:21:30,400 --> 00:21:33,840
not denial of service attacks can also

571
00:21:33,840 --> 00:21:35,919
be people running fork bombs in your

572
00:21:35,919 --> 00:21:37,679
challenges so you want to make sure that

573
00:21:37,679 --> 00:21:39,679
you can stop them from doing that it

574
00:21:39,679 --> 00:21:41,760
could be people uh

575
00:21:41,760 --> 00:21:43,600
unzipping zip bombs on your challenges

576
00:21:43,600 --> 00:21:45,760
and taking up all your hard drive space

577
00:21:45,760 --> 00:21:47,360
so just to keep in mind that these

578
00:21:47,360 --> 00:21:49,280
different types of denial of service

579
00:21:49,280 --> 00:21:51,840
attacks exist and just trying to find a

580
00:21:51,840 --> 00:21:54,159
way to mitigate them and

581
00:21:54,159 --> 00:21:56,159
make sure people don't do any nefarious

582
00:21:56,159 --> 00:21:58,400
things

583
00:21:58,400 --> 00:22:00,400
also keep in mind

584
00:22:00,400 --> 00:22:02,480
people will try to

585
00:22:02,480 --> 00:22:04,960
pen test your infrastructure even if you

586
00:22:04,960 --> 00:22:06,960
say don't do it they'll do it

587
00:22:06,960 --> 00:22:08,880
so just make sure that the challenges

588
00:22:08,880 --> 00:22:12,080
have some way of restricting access to

589
00:22:12,080 --> 00:22:12,880
the

590
00:22:12,880 --> 00:22:14,960
infrastructure you don't want somebody

591
00:22:14,960 --> 00:22:16,799
who has remote code execution on a web

592
00:22:16,799 --> 00:22:20,720
app to be able to query the aws metadata

593
00:22:20,720 --> 00:22:22,720
and get your secret key

594
00:22:22,720 --> 00:22:24,400
not good

595
00:22:24,400 --> 00:22:28,480
bottom line is never trust the player

596
00:22:29,440 --> 00:22:31,679
with the actual infrastructure security

597
00:22:31,679 --> 00:22:33,760
have firewall rules in place

598
00:22:33,760 --> 00:22:35,600
you don't want people to be able to

599
00:22:35,600 --> 00:22:38,159
access ssh at all

600
00:22:38,159 --> 00:22:40,400
oftentimes you just want ssh to be the

601
00:22:40,400 --> 00:22:42,720
only type of access to these servers so

602
00:22:42,720 --> 00:22:45,919
that you have that security

603
00:22:45,919 --> 00:22:48,240
another thing is network restrictions as

604
00:22:48,240 --> 00:22:50,640
i mentioned before you don't want

605
00:22:50,640 --> 00:22:53,120
your challenge server to reach your

606
00:22:53,120 --> 00:22:54,799
scoreboard server you don't want your

607
00:22:54,799 --> 00:22:56,720
challenge server to reach some sensitive

608
00:22:56,720 --> 00:22:58,000
information

609
00:22:58,000 --> 00:22:59,679
another good thing is to configure c

610
00:22:59,679 --> 00:23:03,039
groups so c groups are linux kernel

611
00:23:03,039 --> 00:23:05,919
mitigations that prevent stuff like

612
00:23:05,919 --> 00:23:08,159
fork bombing prevent zip bombs and

613
00:23:08,159 --> 00:23:10,320
prevent all of these other

614
00:23:10,320 --> 00:23:11,440
bad things that can happen to your

615
00:23:11,440 --> 00:23:12,880
server

616
00:23:12,880 --> 00:23:14,480
always separate the score from the

617
00:23:14,480 --> 00:23:15,600
challenges

618
00:23:15,600 --> 00:23:18,480
no matter what ctf sizes it is it could

619
00:23:18,480 --> 00:23:20,240
be 50 people it could be a thousand

620
00:23:20,240 --> 00:23:21,280
people

621
00:23:21,280 --> 00:23:22,880
just separate the score from the

622
00:23:22,880 --> 00:23:25,120
challenges so people can't break out of

623
00:23:25,120 --> 00:23:26,640
one of these challenges and gain access

624
00:23:26,640 --> 00:23:28,720
to the scoreboard and make themselves

625
00:23:28,720 --> 00:23:31,600
admit that would be very bad

626
00:23:31,600 --> 00:23:33,760
another important thing is be up to date

627
00:23:33,760 --> 00:23:35,679
on the latest cves

628
00:23:35,679 --> 00:23:39,039
so the following cvs i listed are recent

629
00:23:39,039 --> 00:23:41,120
kernel exploitation privilege escalation

630
00:23:41,120 --> 00:23:42,960
vulnerabilities

631
00:23:42,960 --> 00:23:45,679
people who have if people have the

632
00:23:45,679 --> 00:23:49,279
capabilities in these containers to

633
00:23:49,279 --> 00:23:52,240
exploit one of these kernel exploitation

634
00:23:52,240 --> 00:23:53,919
vulnerabilities they'll be able to

635
00:23:53,919 --> 00:23:55,600
become root and they will have root

636
00:23:55,600 --> 00:23:58,240
access to your infrastructure which is

637
00:23:58,240 --> 00:24:00,720
not a good thing at all

638
00:24:00,720 --> 00:24:02,640
another thing is prioritize security

639
00:24:02,640 --> 00:24:05,360
over downtime if you find a challenge

640
00:24:05,360 --> 00:24:07,600
has some glaring vulnerability or some

641
00:24:07,600 --> 00:24:09,039
way you're hosting the

642
00:24:09,039 --> 00:24:11,120
challenge can affect other challenges

643
00:24:11,120 --> 00:24:13,440
just take the challenge down

644
00:24:13,440 --> 00:24:15,120
figure out a patch and then bring it

645
00:24:15,120 --> 00:24:16,159
back up

646
00:24:16,159 --> 00:24:17,200
if you can't

647
00:24:17,200 --> 00:24:18,480
figure out a patch then just take it

648
00:24:18,480 --> 00:24:20,320
down and say sorry we have to take it

649
00:24:20,320 --> 00:24:22,559
out of the competition

650
00:24:22,559 --> 00:24:24,159
just to make sure that there's no

651
00:24:24,159 --> 00:24:27,039
security issues

652
00:24:27,520 --> 00:24:29,600
this is more for uh challenge security

653
00:24:29,600 --> 00:24:32,799
test for abuse if people try to

654
00:24:32,799 --> 00:24:35,520
run fork bombs make sure they can't

655
00:24:35,520 --> 00:24:37,279
never give the player root if the player

656
00:24:37,279 --> 00:24:39,120
is root they can delete the flag and

657
00:24:39,120 --> 00:24:41,600
that would be pretty terrible

658
00:24:41,600 --> 00:24:43,120
if the challenge

659
00:24:43,120 --> 00:24:45,919
grants an unintended rce you want to

660
00:24:45,919 --> 00:24:47,120
make sure they're an underprivileged

661
00:24:47,120 --> 00:24:49,520
user so if you have some basic challenge

662
00:24:49,520 --> 00:24:51,760
that's local and file inclusion

663
00:24:51,760 --> 00:24:53,600
however they could turn that into log

664
00:24:53,600 --> 00:24:55,760
poisoning and get code execution are

665
00:24:55,760 --> 00:24:57,200
there going to be root on the container

666
00:24:57,200 --> 00:24:59,840
are there going to be www data can they

667
00:24:59,840 --> 00:25:02,080
further privilege escalate to root

668
00:25:02,080 --> 00:25:04,640
just make sure you have those unintended

669
00:25:04,640 --> 00:25:08,159
vulnerabilities sorted out

670
00:25:08,159 --> 00:25:10,480
also as i mentioned before is run the

671
00:25:10,480 --> 00:25:12,000
challenge with the read-only file system

672
00:25:12,000 --> 00:25:15,320
whenever possible

673
00:25:17,600 --> 00:25:19,120
so that was a little bit about the

674
00:25:19,120 --> 00:25:21,520
challenge and infrastructure security

675
00:25:21,520 --> 00:25:22,799
we're going to get into the common

676
00:25:22,799 --> 00:25:25,120
pitfalls i see whenever people approach

677
00:25:25,120 --> 00:25:26,880
me asking about

678
00:25:26,880 --> 00:25:31,440
hosting ctfs and also good practices

679
00:25:31,760 --> 00:25:33,600
the one thing i see which is the most

680
00:25:33,600 --> 00:25:35,919
common is there's not a lot of effort

681
00:25:35,919 --> 00:25:38,559
spent on planning ctfs the first thing i

682
00:25:38,559 --> 00:25:40,480
always ask people when they say hey i

683
00:25:40,480 --> 00:25:43,200
want to host a ctf is okay what type of

684
00:25:43,200 --> 00:25:45,039
ctf do you want to host

685
00:25:45,039 --> 00:25:47,120
and a lot of times look at me oh i want

686
00:25:47,120 --> 00:25:49,919
a mix of boots root in jeopardy

687
00:25:49,919 --> 00:25:51,760
and they're not really too sure about

688
00:25:51,760 --> 00:25:52,880
what the whole

689
00:25:52,880 --> 00:25:55,760
goal is when they say ctf so just taking

690
00:25:55,760 --> 00:25:58,240
that time to really clearly outline

691
00:25:58,240 --> 00:26:00,320
we want this to have a ctf we need this

692
00:26:00,320 --> 00:26:02,240
many challenges

693
00:26:02,240 --> 00:26:03,760
we need we're expecting this many

694
00:26:03,760 --> 00:26:05,679
players really helps whenever you go

695
00:26:05,679 --> 00:26:08,480
into the actual development stage

696
00:26:08,480 --> 00:26:10,640
another common pitfall i see is people

697
00:26:10,640 --> 00:26:12,480
starting off too large

698
00:26:12,480 --> 00:26:14,720
so a lot of people will

699
00:26:14,720 --> 00:26:17,039
say all right i'm going to host a ctf

700
00:26:17,039 --> 00:26:19,600
this is my first ever ctf they'll post

701
00:26:19,600 --> 00:26:21,520
it out publicly on ctf time get

702
00:26:21,520 --> 00:26:23,360
advertising

703
00:26:23,360 --> 00:26:26,320
and a thousand people show up

704
00:26:26,320 --> 00:26:27,600
and they're not

705
00:26:27,600 --> 00:26:29,279
prepared for a thousand people to show

706
00:26:29,279 --> 00:26:31,279
up so they have the small little aws

707
00:26:31,279 --> 00:26:32,880
micro instance

708
00:26:32,880 --> 00:26:35,039
and it just doesn't work out

709
00:26:35,039 --> 00:26:37,039
don't be afraid if you're a new ctf

710
00:26:37,039 --> 00:26:40,000
developer to start start small i

711
00:26:40,000 --> 00:26:41,760
personally started with about a 20

712
00:26:41,760 --> 00:26:45,279
person ctf for my for cu cyber my

713
00:26:45,279 --> 00:26:46,960
club at clemson

714
00:26:46,960 --> 00:26:48,880
and after that i gradually went up to

715
00:26:48,880 --> 00:26:50,240
100 people

716
00:26:50,240 --> 00:26:51,760
a thousand people

717
00:26:51,760 --> 00:26:54,320
and slowly just built up to these

718
00:26:54,320 --> 00:26:56,720
large-scale ctfs

719
00:26:56,720 --> 00:26:59,120
another thing i see is inexperience

720
00:26:59,120 --> 00:27:01,360
you want to be very confident in your

721
00:27:01,360 --> 00:27:03,360
system administration experience very

722
00:27:03,360 --> 00:27:05,440
confident in your programming experience

723
00:27:05,440 --> 00:27:06,960
because a lot of that experience will

724
00:27:06,960 --> 00:27:09,520
really pay off when it comes to the

725
00:27:09,520 --> 00:27:12,559
actual competition day

726
00:27:12,880 --> 00:27:15,760
i'll also see challenges

727
00:27:15,760 --> 00:27:17,679
go through no testing

728
00:27:17,679 --> 00:27:19,120
which is kind of

729
00:27:19,120 --> 00:27:21,679
strange to me because you really should

730
00:27:21,679 --> 00:27:23,520
test these challenges

731
00:27:23,520 --> 00:27:26,080
but they will

732
00:27:26,320 --> 00:27:28,159
they'll test the challenges a little bit

733
00:27:28,159 --> 00:27:30,240
but they won't realize that

734
00:27:30,240 --> 00:27:31,360
their

735
00:27:31,360 --> 00:27:32,840
challenge has an unintended

736
00:27:32,840 --> 00:27:35,440
vulnerability and if the challenge has

737
00:27:35,440 --> 00:27:36,880
an unintended vulnerability you don't

738
00:27:36,880 --> 00:27:38,799
know how many players know about that

739
00:27:38,799 --> 00:27:40,080
vulnerability you don't know if people

740
00:27:40,080 --> 00:27:41,520
are going to report it

741
00:27:41,520 --> 00:27:45,120
so it's just make sure you test enough

742
00:27:45,120 --> 00:27:46,240
another thing is infrastructure

743
00:27:46,240 --> 00:27:48,240
accommodation

744
00:27:48,240 --> 00:27:50,240
a lot of people don't really

745
00:27:50,240 --> 00:27:52,720
know the actual scale of what their ctf

746
00:27:52,720 --> 00:27:54,880
will be and how the infrastructure will

747
00:27:54,880 --> 00:27:56,559
behave

748
00:27:56,559 --> 00:27:59,760
you might think your basic

749
00:27:59,760 --> 00:28:01,520
flask application which uses a little

750
00:28:01,520 --> 00:28:04,159
bit of ram isn't that big of a deal

751
00:28:04,159 --> 00:28:05,919
however when you put it on a server

752
00:28:05,919 --> 00:28:08,880
that's being hammered by 500 people

753
00:28:08,880 --> 00:28:10,720
okay how much memory does that actually

754
00:28:10,720 --> 00:28:12,559
take how much memory does my server

755
00:28:12,559 --> 00:28:14,000
actually need

756
00:28:14,000 --> 00:28:15,120
the same thing goes with other

757
00:28:15,120 --> 00:28:17,039
challenges if i run these two challenges

758
00:28:17,039 --> 00:28:20,000
together well they're also going to be

759
00:28:20,000 --> 00:28:22,000
used by multiple people

760
00:28:22,000 --> 00:28:23,600
just making sure you can accommodate for

761
00:28:23,600 --> 00:28:24,799
that

762
00:28:24,799 --> 00:28:26,480
another thing goes along with testing

763
00:28:26,480 --> 00:28:28,080
unsolvable challenges there have been

764
00:28:28,080 --> 00:28:29,679
many times where people release

765
00:28:29,679 --> 00:28:32,559
challenges that are not solvable

766
00:28:32,559 --> 00:28:34,960
lastly challenge support having some way

767
00:28:34,960 --> 00:28:38,240
of reaching the organizers is a as

768
00:28:38,240 --> 00:28:40,880
needed for a ctf if challenges go down

769
00:28:40,880 --> 00:28:43,440
or if flies get deleted having someone

770
00:28:43,440 --> 00:28:45,600
to contact that can

771
00:28:45,600 --> 00:28:49,199
fix that it would is really great

772
00:28:49,520 --> 00:28:52,080
good practices devote a good amount of

773
00:28:52,080 --> 00:28:54,320
time to preparation and testing

774
00:28:54,320 --> 00:28:56,320
it's one of those things that

775
00:28:56,320 --> 00:28:58,000
the more you test or the more you

776
00:28:58,000 --> 00:28:59,919
prepare in the beginning

777
00:28:59,919 --> 00:29:01,520
really the less work and less worried

778
00:29:01,520 --> 00:29:02,960
you have to be whenever you're hosting

779
00:29:02,960 --> 00:29:04,240
the ctf

780
00:29:04,240 --> 00:29:06,320
get infrastructure up ahead of time if

781
00:29:06,320 --> 00:29:09,200
you're running into any issues trying to

782
00:29:09,200 --> 00:29:12,640
get ssl certificates or making sure that

783
00:29:12,640 --> 00:29:15,760
all the challenges are able to run

784
00:29:15,760 --> 00:29:17,120
getting the infrastructure up ahead of

785
00:29:17,120 --> 00:29:20,159
time will really alleviate that

786
00:29:20,159 --> 00:29:21,760
another thing is test the challenges and

787
00:29:21,760 --> 00:29:23,440
make sure the flags are correct there

788
00:29:23,440 --> 00:29:26,399
have been times where in our ctfs uh

789
00:29:26,399 --> 00:29:27,840
challenges don't really match up

790
00:29:27,840 --> 00:29:29,840
correctly so we have to go and change

791
00:29:29,840 --> 00:29:31,200
that manually

792
00:29:31,200 --> 00:29:32,720
but you don't want people who are

793
00:29:32,720 --> 00:29:35,679
actually solving the ctf to see a flag

794
00:29:35,679 --> 00:29:39,399
but it's the wrong flag

795
00:29:41,760 --> 00:29:43,360
all right so see these are some basic

796
00:29:43,360 --> 00:29:47,279
concepts about hosting very basic ctfs

797
00:29:47,279 --> 00:29:49,760
however you can really take this a step

798
00:29:49,760 --> 00:29:50,880
further

799
00:29:50,880 --> 00:29:52,880
so one of the main ways of taking this a

800
00:29:52,880 --> 00:29:55,440
step further is automation

801
00:29:55,440 --> 00:29:58,320
automate automate automate

802
00:29:58,320 --> 00:30:00,080
your infrastructure deployment can be

803
00:30:00,080 --> 00:30:01,760
automated using something like terraform

804
00:30:01,760 --> 00:30:04,640
or ansible use terraform to provision

805
00:30:04,640 --> 00:30:06,480
the virtual machines and then use

806
00:30:06,480 --> 00:30:08,159
ansible to actually install any of the

807
00:30:08,159 --> 00:30:10,640
software you need also use ansible to

808
00:30:10,640 --> 00:30:13,039
set up firewall rules and uh make sure

809
00:30:13,039 --> 00:30:15,760
that everything is secure

810
00:30:15,760 --> 00:30:17,760
another thing is health checks

811
00:30:17,760 --> 00:30:20,559
so for ctf challenge challenges will

812
00:30:20,559 --> 00:30:24,559
just go down flags will go missing

813
00:30:24,559 --> 00:30:26,240
things will just happen while people are

814
00:30:26,240 --> 00:30:27,919
solving these challenges

815
00:30:27,919 --> 00:30:30,640
one great advantage i personally see is

816
00:30:30,640 --> 00:30:33,360
having a very intuitive solve script

817
00:30:33,360 --> 00:30:35,919
so you have a solution script which all

818
00:30:35,919 --> 00:30:37,919
it does is just print out the flag if

819
00:30:37,919 --> 00:30:39,919
it's there or doesn't print out the flag

820
00:30:39,919 --> 00:30:41,360
if it's not

821
00:30:41,360 --> 00:30:43,840
the reason i am very

822
00:30:43,840 --> 00:30:45,840
i encourage these intuitive soul scripts

823
00:30:45,840 --> 00:30:48,720
is if somebody else is testing my

824
00:30:48,720 --> 00:30:50,559
challenge i don't have to tell them hey

825
00:30:50,559 --> 00:30:52,080
here's how the script works here's what

826
00:30:52,080 --> 00:30:53,200
you have to do

827
00:30:53,200 --> 00:30:55,520
they can just run it and if it prints

828
00:30:55,520 --> 00:30:57,360
out the flag they know that my challenge

829
00:30:57,360 --> 00:30:59,120
is working

830
00:30:59,120 --> 00:31:01,120
another thing you can do and build off

831
00:31:01,120 --> 00:31:02,880
of this intuitive solid script is build

832
00:31:02,880 --> 00:31:04,640
a sort of heartbeat solves script

833
00:31:04,640 --> 00:31:05,679
checking

834
00:31:05,679 --> 00:31:07,600
so you build some sort of system which

835
00:31:07,600 --> 00:31:10,000
every minute will go over the challenges

836
00:31:10,000 --> 00:31:12,080
and check to see if they can connect and

837
00:31:12,080 --> 00:31:13,760
if they can get the flag

838
00:31:13,760 --> 00:31:15,440
and if they don't get the fly or can't

839
00:31:15,440 --> 00:31:17,679
connect maybe have it automatically

840
00:31:17,679 --> 00:31:20,240
redeploy the challenge

841
00:31:20,240 --> 00:31:22,000
another great automation

842
00:31:22,000 --> 00:31:25,039
tip is for challenge updates and patches

843
00:31:25,039 --> 00:31:27,760
i've seen ctfs which have gone

844
00:31:27,760 --> 00:31:29,360
taking this straight out of the water

845
00:31:29,360 --> 00:31:31,200
where they will integrate

846
00:31:31,200 --> 00:31:33,679
git lab github ci

847
00:31:33,679 --> 00:31:36,080
into challenge updates where all they do

848
00:31:36,080 --> 00:31:37,039
is they make the change to their

849
00:31:37,039 --> 00:31:39,200
challenge push it to the repo

850
00:31:39,200 --> 00:31:41,679
and the github ci will automatically

851
00:31:41,679 --> 00:31:46,679
deploy those changes which is super cool

852
00:31:46,720 --> 00:31:49,360
here's a couple of resources on ways you

853
00:31:49,360 --> 00:31:51,120
can do more automation

854
00:31:51,120 --> 00:31:53,840
another great important note is

855
00:31:53,840 --> 00:31:56,960
challenge automation so for actually

856
00:31:56,960 --> 00:31:59,760
building these challenges

857
00:31:59,760 --> 00:32:01,200
you want to make sure that you can

858
00:32:01,200 --> 00:32:03,360
easily just run some sort of script and

859
00:32:03,360 --> 00:32:05,679
it builds everything this comes very

860
00:32:05,679 --> 00:32:07,440
handy during the ctf when you need to

861
00:32:07,440 --> 00:32:10,000
push updates or make changes you can

862
00:32:10,000 --> 00:32:11,919
write all the code run one command and

863
00:32:11,919 --> 00:32:15,559
everything you just built

864
00:32:17,360 --> 00:32:19,200
so as i've i've been talking a lot about

865
00:32:19,200 --> 00:32:21,279
docker and how these challenges run in

866
00:32:21,279 --> 00:32:24,240
docker images and docker containers some

867
00:32:24,240 --> 00:32:26,000
of you might be thinking oh well

868
00:32:26,000 --> 00:32:28,640
kubernetes does large-scale

869
00:32:28,640 --> 00:32:31,679
container organization yes it does

870
00:32:31,679 --> 00:32:33,840
kubernetes is great and it's very good

871
00:32:33,840 --> 00:32:35,360
at what it does

872
00:32:35,360 --> 00:32:38,080
however with kubernetes comes the

873
00:32:38,080 --> 00:32:39,600
complexities

874
00:32:39,600 --> 00:32:42,320
kubernetes as a system is very complex

875
00:32:42,320 --> 00:32:44,559
with a lot of moving parts

876
00:32:44,559 --> 00:32:47,200
and one of the things which

877
00:32:47,200 --> 00:32:48,240
i

878
00:32:48,240 --> 00:32:50,320
sort of live by is the more complex the

879
00:32:50,320 --> 00:32:52,159
system is the more chances it has of

880
00:32:52,159 --> 00:32:54,640
breaking or containing vulnerabilities

881
00:32:54,640 --> 00:32:56,480
so you just want to keep that in mind if

882
00:32:56,480 --> 00:32:58,240
you decide to go the kubernetes route

883
00:32:58,240 --> 00:32:59,840
there's nothing wrong with it the

884
00:32:59,840 --> 00:33:02,720
activity con ctf this year is run

885
00:33:02,720 --> 00:33:04,960
through kubernetes you just got to be

886
00:33:04,960 --> 00:33:05,919
very

887
00:33:05,919 --> 00:33:10,159
very cautious and know what you're doing

888
00:33:10,159 --> 00:33:12,159
if you decide to follow this kubernetes

889
00:33:12,159 --> 00:33:13,120
route

890
00:33:13,120 --> 00:33:15,360
rcds which is redpone's challenge

891
00:33:15,360 --> 00:33:17,600
deployment framework is available on

892
00:33:17,600 --> 00:33:20,720
github along with google's kctf which is

893
00:33:20,720 --> 00:33:24,640
kubernetes ccf framework

894
00:33:24,640 --> 00:33:26,080
another way you can take this a step

895
00:33:26,080 --> 00:33:28,240
further is if you're one of those people

896
00:33:28,240 --> 00:33:31,279
who are very wary of docker container

897
00:33:31,279 --> 00:33:33,840
escapes and you don't really trust

898
00:33:33,840 --> 00:33:35,360
running these challenges dockers

899
00:33:35,360 --> 00:33:36,559
containers

900
00:33:36,559 --> 00:33:38,159
but you also don't want to use vms

901
00:33:38,159 --> 00:33:40,320
because vms take a lot of resources

902
00:33:40,320 --> 00:33:43,360
google has developed this nsgl container

903
00:33:43,360 --> 00:33:45,760
and nsgl container is really special

904
00:33:45,760 --> 00:33:47,600
where it allows a lot of custom

905
00:33:47,600 --> 00:33:49,919
customization on

906
00:33:49,919 --> 00:33:52,480
these containers based on

907
00:33:52,480 --> 00:33:54,559
using a lot of linux kernel features

908
00:33:54,559 --> 00:33:56,080
that restrict

909
00:33:56,080 --> 00:33:58,960
a lot of software

910
00:34:00,320 --> 00:34:02,159
all right gonna wrap up this a little

911
00:34:02,159 --> 00:34:03,840
bit as you can see

912
00:34:03,840 --> 00:34:06,080
ccf hosting is a lot different than ctf

913
00:34:06,080 --> 00:34:09,119
competing ccf hosting is very

914
00:34:09,119 --> 00:34:11,599
geared toward system administration and

915
00:34:11,599 --> 00:34:14,239
more devops side of things

916
00:34:14,239 --> 00:34:16,480
the main thing with hosting ctfs is

917
00:34:16,480 --> 00:34:18,239
never trust the player

918
00:34:18,239 --> 00:34:20,879
you just you just can't

919
00:34:20,879 --> 00:34:22,719
another good thing is preparation

920
00:34:22,719 --> 00:34:25,760
preparation is key and security security

921
00:34:25,760 --> 00:34:28,079
should always be at the top of your mind

922
00:34:28,079 --> 00:34:31,520
whenever you're hosting these things

923
00:34:33,679 --> 00:34:36,399
all right lastly uh ccf for hire team is

924
00:34:36,399 --> 00:34:39,119
awesome i would list everyone however i

925
00:34:39,119 --> 00:34:41,599
am scared i will miss somebody but

926
00:34:41,599 --> 00:34:42,480
go

927
00:34:42,480 --> 00:34:44,719
give them a shout out in the discord

928
00:34:44,719 --> 00:34:46,079
a lot of great people to work with i

929
00:34:46,079 --> 00:34:47,679
have a lot of fun with them if you have

930
00:34:47,679 --> 00:34:50,480
any questions about just ctfs or hosting

931
00:34:50,480 --> 00:34:51,839
them

932
00:34:51,839 --> 00:34:53,280
best places to reach out to me are on

933
00:34:53,280 --> 00:34:55,119
discord and twitter i'm mainly pretty

934
00:34:55,119 --> 00:34:58,159
active on discord

935
00:35:01,359 --> 00:35:04,160
anyway that's uh it for the presentation

936
00:35:04,160 --> 00:35:07,440
i hope you enjoyed it

