1
00:00:06,160 --> 00:00:09,309
[Music]

2
00:00:11,759 --> 00:00:16,360
oh my god is that a real key

3
00:00:19,199 --> 00:00:20,960
oh it is

4
00:00:20,960 --> 00:00:24,510
how to submit a bug bounty

5
00:00:24,510 --> 00:00:35,219
[Music]

6
00:00:37,600 --> 00:00:41,879
how to submit a bug bounty

7
00:00:42,740 --> 00:00:50,399
[Music]

8
00:00:50,399 --> 00:00:54,680
how to submit a bug bounty

9
00:00:59,620 --> 00:01:03,390
[Music]

10
00:01:04,159 --> 00:01:08,360
how to submit a bug bounty

11
00:01:13,910 --> 00:01:16,959
[Music]

12
00:01:23,600 --> 00:01:27,798
how to submit a bug bounty

13
00:01:30,310 --> 00:01:34,079
[Music]

14
00:01:34,079 --> 00:01:37,600
how to submit it hello activity con

15
00:01:37,600 --> 00:01:38,479
hat

16
00:01:38,479 --> 00:01:42,000
hat creativity con activity con four

17
00:01:42,000 --> 00:01:43,759
years ago i open source truffle hog a

18
00:01:43,759 --> 00:01:45,520
tool that finds secrets in source code

19
00:01:45,520 --> 00:01:47,680
today i'm happy to open source another

20
00:01:47,680 --> 00:01:49,520
tool that finds secrets in a different

21
00:01:49,520 --> 00:01:51,200
type of source code trufflehog the

22
00:01:51,200 --> 00:01:53,119
chrome extension is a tool that finds

23
00:01:53,119 --> 00:01:55,520
secrets in html and javascript in the

24
00:01:55,520 --> 00:01:57,280
websites you browse here's a few

25
00:01:57,280 --> 00:02:01,880
examples of keys leaking out this way

26
00:02:01,940 --> 00:02:08,850
[Music]

27
00:02:12,480 --> 00:02:15,480
me

28
00:02:24,160 --> 00:02:25,440
you want to start by introducing

29
00:02:25,440 --> 00:02:27,599
yourself yes i can how

30
00:02:27,599 --> 00:02:28,959
how do you want me to go do you want to

31
00:02:28,959 --> 00:02:30,720
be like hey i'm a friend of dylan's or

32
00:02:30,720 --> 00:02:33,280
hi i'm a security engineer

33
00:02:33,280 --> 00:02:35,519
scary stuff in the world the more you

34
00:02:35,519 --> 00:02:37,760
fumble i'm just i'll include those

35
00:02:37,760 --> 00:02:39,920
fumbly bits okay all right this will

36
00:02:39,920 --> 00:02:41,200
just be me because i'd like to be

37
00:02:41,200 --> 00:02:42,800
presented

38
00:02:42,800 --> 00:02:46,239
uh all right hello uh my name is mike um

39
00:02:46,239 --> 00:02:47,519
i am

40
00:02:47,519 --> 00:02:49,680
a security engineer currently at brex on

41
00:02:49,680 --> 00:02:50,879
the infrastructure security side of

42
00:02:50,879 --> 00:02:54,080
things before that i was

43
00:02:54,080 --> 00:02:56,160
in sort of a product security space at

44
00:02:56,160 --> 00:02:59,280
vmware so you know nothing about this

45
00:02:59,280 --> 00:03:00,080
talk

46
00:03:00,080 --> 00:03:00,800
right

47
00:03:00,800 --> 00:03:02,560
whether you're asking if i know what the

48
00:03:02,560 --> 00:03:05,040
topic is or if i am a subject matter

49
00:03:05,040 --> 00:03:06,800
expert of the topic the answer is

50
00:03:06,800 --> 00:03:08,720
probably no to both probably one of my

51
00:03:08,720 --> 00:03:10,400
favorite examples of keys that i found

52
00:03:10,400 --> 00:03:12,239
using this chrome extension was a key

53
00:03:12,239 --> 00:03:13,599
that i found on the front page of

54
00:03:13,599 --> 00:03:16,000
weather.com which we can actually still

55
00:03:16,000 --> 00:03:19,480
view on archive.org

56
00:03:19,840 --> 00:03:22,319
if we view source there it is

57
00:03:22,319 --> 00:03:24,239
surrounded by some other keys sitting

58
00:03:24,239 --> 00:03:25,920
right on the front page of a website

59
00:03:25,920 --> 00:03:27,440
that's viewed by millions of people

60
00:03:27,440 --> 00:03:29,440
every day so i'm gonna screen share

61
00:03:29,440 --> 00:03:30,799
something with you

62
00:03:30,799 --> 00:03:34,959
um that's a key that of theirs uh not

63
00:03:34,959 --> 00:03:37,040
belonging to me as like sort of a client

64
00:03:37,040 --> 00:03:38,720
or browser of the site but you know

65
00:03:38,720 --> 00:03:39,920
something they accidentally kind of

66
00:03:39,920 --> 00:03:43,280
slipped in there that could probably uh

67
00:03:43,280 --> 00:03:45,200
be used for for accessing something that

68
00:03:45,200 --> 00:03:47,120
we shouldn't here's another example of a

69
00:03:47,120 --> 00:03:48,959
slack key that i found in the front-end

70
00:03:48,959 --> 00:03:51,120
javascript of a single-page application

71
00:03:51,120 --> 00:03:53,280
so why is this so common why are keys

72
00:03:53,280 --> 00:03:55,040
making their way into the front ends of

73
00:03:55,040 --> 00:03:57,280
popular applications the answer might

74
00:03:57,280 --> 00:03:59,680
surprise you many sas applications are

75
00:03:59,680 --> 00:04:01,519
actually built in a way that encourages

76
00:04:01,519 --> 00:04:03,439
front-end applications to contain keys

77
00:04:03,439 --> 00:04:05,280
in their javascript most of these keys

78
00:04:05,280 --> 00:04:07,040
aren't accidents and aren't in

79
00:04:07,040 --> 00:04:08,799
observable text blocks that are meant to

80
00:04:08,799 --> 00:04:10,640
be shared they're actually being used by

81
00:04:10,640 --> 00:04:12,400
the javascript on the page that's

82
00:04:12,400 --> 00:04:15,200
because apis like aws and slack have

83
00:04:15,200 --> 00:04:17,199
architected themselves to be open to

84
00:04:17,199 --> 00:04:19,680
cross-origin resource sharing inviting

85
00:04:19,680 --> 00:04:21,839
websites like weather.com to integrate

86
00:04:21,839 --> 00:04:24,180
with them client-side

87
00:04:24,180 --> 00:04:27,280
[Music]

88
00:04:27,280 --> 00:04:29,280
browser protections to go from one

89
00:04:29,280 --> 00:04:30,800
website to another well there's you know

90
00:04:30,800 --> 00:04:32,800
the um there's like a

91
00:04:32,800 --> 00:04:34,720
cross-origin resource policy and stuff

92
00:04:34,720 --> 00:04:36,320
like that right which kind of prevents

93
00:04:36,320 --> 00:04:38,400
you from being able to grab things from

94
00:04:38,400 --> 00:04:40,560
from one domain and use it in another

95
00:04:40,560 --> 00:04:42,639
just a recap on cross-origin resource

96
00:04:42,639 --> 00:04:44,240
sharing one of the most fundamental

97
00:04:44,240 --> 00:04:46,639
browser security policies is the same

98
00:04:46,639 --> 00:04:48,880
origin policy basically if you're on one

99
00:04:48,880 --> 00:04:50,720
website and that website serves you

100
00:04:50,720 --> 00:04:53,120
javascript the javascript on that page

101
00:04:53,120 --> 00:04:55,280
allows the browser to make requests and

102
00:04:55,280 --> 00:04:58,240
view responses to and from that website

103
00:04:58,240 --> 00:05:00,560
but by default it can't make requests

104
00:05:00,560 --> 00:05:02,880
and view responses to any other website

105
00:05:02,880 --> 00:05:04,800
without explicit permission from those

106
00:05:04,800 --> 00:05:06,720
other websites this is what allows you

107
00:05:06,720 --> 00:05:08,720
to browse google.com without having to

108
00:05:08,720 --> 00:05:10,639
worry about google forcing you to send

109
00:05:10,639 --> 00:05:12,400
requests to facebook and stealing all

110
00:05:12,400 --> 00:05:14,400
your facebook data behind the scenes

111
00:05:14,400 --> 00:05:16,960
these origin sandboxes help protect you

112
00:05:16,960 --> 00:05:19,039
but what happens when one website wants

113
00:05:19,039 --> 00:05:20,800
you to be able to make requests to other

114
00:05:20,800 --> 00:05:22,880
websites this is where cross-origin

115
00:05:22,880 --> 00:05:25,520
resource sharing comes in or cores for

116
00:05:25,520 --> 00:05:27,759
short if a website includes an access

117
00:05:27,759 --> 00:05:29,759
control allow origin header it can

118
00:05:29,759 --> 00:05:32,080
specify another origin that's allowed to

119
00:05:32,080 --> 00:05:33,680
make requests to it and view the

120
00:05:33,680 --> 00:05:36,080
responses so if you visit one website

121
00:05:36,080 --> 00:05:37,440
and you make a request to another

122
00:05:37,440 --> 00:05:39,840
website if that other website responds

123
00:05:39,840 --> 00:05:41,919
with an access control allow origin

124
00:05:41,919 --> 00:05:44,000
header with the website in question that

125
00:05:44,000 --> 00:05:45,759
you started on then the job script on

126
00:05:45,759 --> 00:05:47,840
the page can make requests and view the

127
00:05:47,840 --> 00:05:49,840
responses from that other website while

128
00:05:49,840 --> 00:05:51,440
you're browsing the first website you

129
00:05:51,440 --> 00:05:52,800
might have noticed how i said the header

130
00:05:52,800 --> 00:05:55,280
can allow you to specify one origin

131
00:05:55,280 --> 00:05:56,639
that's kind of true but there are

132
00:05:56,639 --> 00:05:58,319
actually two ways that you can run

133
00:05:58,319 --> 00:06:00,160
cross-origin resource sharing in an

134
00:06:00,160 --> 00:06:02,560
extremely permissive way that allow any

135
00:06:02,560 --> 00:06:04,319
websites to make requests and view

136
00:06:04,319 --> 00:06:06,240
responses instead of just a single

137
00:06:06,240 --> 00:06:08,560
origin the first way is with a wild card

138
00:06:08,560 --> 00:06:10,720
when we set our cores to wildcard we

139
00:06:10,720 --> 00:06:12,639
allow any website to be able to make

140
00:06:12,639 --> 00:06:15,280
requests and view responses but we still

141
00:06:15,280 --> 00:06:17,759
get some built-in browser protections

142
00:06:17,759 --> 00:06:20,080
notably these cross-origin requests do

143
00:06:20,080 --> 00:06:22,000
not include cookies regardless of the

144
00:06:22,000 --> 00:06:24,080
cross-origin resource sharing policy for

145
00:06:24,080 --> 00:06:26,000
cookie sharing the second more dangerous

146
00:06:26,000 --> 00:06:27,840
way is not actually a way built into the

147
00:06:27,840 --> 00:06:30,000
browser spec it's kind of a hack that a

148
00:06:30,000 --> 00:06:32,160
lot of libraries have adopted basically

149
00:06:32,160 --> 00:06:34,080
when one website makes a request to

150
00:06:34,080 --> 00:06:35,919
another website if it pays attention to

151
00:06:35,919 --> 00:06:38,160
where the request came from and mirrors

152
00:06:38,160 --> 00:06:40,400
it back into the access control origin

153
00:06:40,400 --> 00:06:42,319
header this allows for open course

154
00:06:42,319 --> 00:06:44,639
sharing from any website this is a much

155
00:06:44,639 --> 00:06:46,319
more dangerous method because it

156
00:06:46,319 --> 00:06:47,840
basically gives up all of the

157
00:06:47,840 --> 00:06:49,759
protections that the same origin policy

158
00:06:49,759 --> 00:06:51,440
affords you both of these course

159
00:06:51,440 --> 00:06:54,319
settings are extremely common in apis

160
00:06:54,319 --> 00:06:56,479
you might be able to figure out why apis

161
00:06:56,479 --> 00:06:58,319
are designed for other services to

162
00:06:58,319 --> 00:07:00,479
consume them as a fun aside it's

163
00:07:00,479 --> 00:07:02,960
actually really common for internal apps

164
00:07:02,960 --> 00:07:04,800
to be built with access control allow

165
00:07:04,800 --> 00:07:06,720
origin headers this is because these

166
00:07:06,720 --> 00:07:08,800
days applications are typically built to

167
00:07:08,800 --> 00:07:11,280
be api first and because of that that

168
00:07:11,280 --> 00:07:13,520
naturally led to multiple services

169
00:07:13,520 --> 00:07:16,080
wanting to consume the same api the lazy

170
00:07:16,080 --> 00:07:18,080
way to set this up is to just simply

171
00:07:18,080 --> 00:07:19,919
allow any service to be able to consume

172
00:07:19,919 --> 00:07:22,080
this api there are also some interesting

173
00:07:22,080 --> 00:07:23,840
politics at play when you work for a

174
00:07:23,840 --> 00:07:25,520
large company often the way the

175
00:07:25,520 --> 00:07:27,440
incentive structures are set up you want

176
00:07:27,440 --> 00:07:29,199
your service to be consumed by as many

177
00:07:29,199 --> 00:07:30,960
teams as possible this is so that when

178
00:07:30,960 --> 00:07:32,720
your performance review comes around you

179
00:07:32,720 --> 00:07:34,720
can boast about how your service has all

180
00:07:34,720 --> 00:07:38,520
this adoption and usage

181
00:07:52,319 --> 00:07:54,319
we we just want to get as much adoption

182
00:07:54,319 --> 00:07:57,199
as possible because that looks good um

183
00:07:57,199 --> 00:07:58,960
but but you know alternatively maybe

184
00:07:58,960 --> 00:08:00,720
it's uh we want to get as much adoption

185
00:08:00,720 --> 00:08:02,080
as possible because this is an important

186
00:08:02,080 --> 00:08:03,599
service and then we'll go back in and

187
00:08:03,599 --> 00:08:05,199
tweak it and maybe it never happens and

188
00:08:05,199 --> 00:08:06,400
that's kind of where some of the problem

189
00:08:06,400 --> 00:08:08,479
comes if you put individual origin

190
00:08:08,479 --> 00:08:10,240
restrictions into your service this

191
00:08:10,240 --> 00:08:12,080
slows down the adoption of your internal

192
00:08:12,080 --> 00:08:14,319
service so we find it common that

193
00:08:14,319 --> 00:08:16,639
internal services often access control

194
00:08:16,639 --> 00:08:18,960
our origin wildcard or access control

195
00:08:18,960 --> 00:08:20,960
allow origin reflect back the origin

196
00:08:20,960 --> 00:08:22,560
header you might think that that's not a

197
00:08:22,560 --> 00:08:24,479
big deal if the service is internal but

198
00:08:24,479 --> 00:08:26,000
actually that makes it a lot more

199
00:08:26,000 --> 00:08:27,440
dangerous than if the service were on

200
00:08:27,440 --> 00:08:29,360
the internet this is because in addition

201
00:08:29,360 --> 00:08:31,680
to allowing internal services to be able

202
00:08:31,680 --> 00:08:34,080
to access these resources across origin

203
00:08:34,080 --> 00:08:36,559
external services can also access these

204
00:08:36,559 --> 00:08:39,120
services across origin that means if you

205
00:08:39,120 --> 00:08:41,200
browse to an evil website and the evil

206
00:08:41,200 --> 00:08:43,440
website has javascript on the page

207
00:08:43,440 --> 00:08:45,440
coercing you to send a request to an

208
00:08:45,440 --> 00:08:47,440
internal website as long as you're

209
00:08:47,440 --> 00:08:49,040
sitting on the internal network the

210
00:08:49,040 --> 00:08:50,240
browser doesn't really know the

211
00:08:50,240 --> 00:08:51,600
difference between the networks that

212
00:08:51,600 --> 00:08:53,600
you're straddling and that eva website

213
00:08:53,600 --> 00:08:55,920
can force you to make requests and steal

214
00:08:55,920 --> 00:08:57,920
the data that's served by the internal

215
00:08:57,920 --> 00:09:01,040
website i'd say i would say 99 of people

216
00:09:01,040 --> 00:09:02,800
aren't even thinking that that's a

217
00:09:02,800 --> 00:09:04,560
that's a use case that they need to

218
00:09:04,560 --> 00:09:06,800
consider what this means is if you're

219
00:09:06,800 --> 00:09:08,480
doing a lot of reconnaissance for a

220
00:09:08,480 --> 00:09:10,240
given company and you find yourself

221
00:09:10,240 --> 00:09:11,839
running into a bunch of domain names

222
00:09:11,839 --> 00:09:14,080
that you suspect are internal domains

223
00:09:14,080 --> 00:09:15,920
because you can't access them and maybe

224
00:09:15,920 --> 00:09:17,920
they have a 10 dot ip address if you

225
00:09:17,920 --> 00:09:19,680
have a pretty good relationship with the

226
00:09:19,680 --> 00:09:21,760
program you might be able to construct

227
00:09:21,760 --> 00:09:24,640
an evil html file that makes requests to

228
00:09:24,640 --> 00:09:26,720
all of these internal services then you

229
00:09:26,720 --> 00:09:28,080
could try poking the bug banning

230
00:09:28,080 --> 00:09:30,480
managers of the program and ask them to

231
00:09:30,480 --> 00:09:32,800
run your html page if you're lucky

232
00:09:32,800 --> 00:09:34,560
they'll say yes and if you're extra

233
00:09:34,560 --> 00:09:36,959
lucky the html on that page will be able

234
00:09:36,959 --> 00:09:39,279
to make requests and view responses from

235
00:09:39,279 --> 00:09:40,880
at least one of the services that you

236
00:09:40,880 --> 00:09:42,800
found during recon this enables your

237
00:09:42,800 --> 00:09:45,040
evil html to be able to steal data from

238
00:09:45,040 --> 00:09:46,480
an internal app that it shouldn't be

239
00:09:46,480 --> 00:09:48,640
able to more often than not at least one

240
00:09:48,640 --> 00:09:50,240
of those internal services will be

241
00:09:50,240 --> 00:09:51,920
configured this way and you might be

242
00:09:51,920 --> 00:09:53,519
able to make some bug bounty money by

243
00:09:53,519 --> 00:09:55,200
exfiltrating internal data that you're

244
00:09:55,200 --> 00:09:58,560
not supposed to be able to access

245
00:10:01,279 --> 00:10:03,200
okay popping stack way back to the

246
00:10:03,200 --> 00:10:05,279
chrome extension the reason these api

247
00:10:05,279 --> 00:10:07,040
keys are leaking out is because these

248
00:10:07,040 --> 00:10:09,440
apis are often constructed in a way that

249
00:10:09,440 --> 00:10:11,440
encourages foreign origins to be able to

250
00:10:11,440 --> 00:10:13,920
make requests to them this leads to api

251
00:10:13,920 --> 00:10:16,240
keys being included in static resources

252
00:10:16,240 --> 00:10:18,720
such as html and javascript let's take a

253
00:10:18,720 --> 00:10:21,200
look at amazon's api to see how they did

254
00:10:21,200 --> 00:10:23,040
this we can see when we include an

255
00:10:23,040 --> 00:10:25,600
origin header amazon's api responds with

256
00:10:25,600 --> 00:10:27,839
an access control allow origin wildcard

257
00:10:27,839 --> 00:10:30,320
this more or less invites websites to

258
00:10:30,320 --> 00:10:32,640
include amazon keys in their static

259
00:10:32,640 --> 00:10:34,800
resources so they can make requests and

260
00:10:34,800 --> 00:10:37,040
view responses to amazon oftentimes

261
00:10:37,040 --> 00:10:39,120
these keys are compiled directly into

262
00:10:39,120 --> 00:10:41,040
javascript the reason being you can

263
00:10:41,040 --> 00:10:43,200
build an entire application stateless

264
00:10:43,200 --> 00:10:44,800
without a back-end server if you're

265
00:10:44,800 --> 00:10:47,200
interacting with amazon apis and those

266
00:10:47,200 --> 00:10:49,200
amazon apis are functioning as your

267
00:10:49,200 --> 00:10:51,839
state like saving data in s3 for example

268
00:10:51,839 --> 00:10:53,920
it's a lot less overhead but obviously

269
00:10:53,920 --> 00:10:55,920
comes with some security concerns amazon

270
00:10:55,920 --> 00:10:57,279
is essentially encouraging front end

271
00:10:57,279 --> 00:10:59,760
javascript to make requests to this api

272
00:10:59,760 --> 00:11:01,120
and because their api requires

273
00:11:01,120 --> 00:11:02,880
authentication we end up with some

274
00:11:02,880 --> 00:11:05,600
amazon keys in some weird places well so

275
00:11:05,600 --> 00:11:08,079
like i'm trying to think like do we

276
00:11:08,079 --> 00:11:10,079
are we interested in trying to disparage

277
00:11:10,079 --> 00:11:13,120
this pattern i mean i think they

278
00:11:13,120 --> 00:11:14,240
they must have known what they were

279
00:11:14,240 --> 00:11:17,200
doing right maybe not so much looking at

280
00:11:17,200 --> 00:11:20,079
these security use cases or implications

281
00:11:20,079 --> 00:11:23,040
of one or two sort of steps downstream

282
00:11:23,040 --> 00:11:24,720
in addition to amazon and slack we found

283
00:11:24,720 --> 00:11:26,320
a number of other apis that are also

284
00:11:26,320 --> 00:11:27,839
configured with permissive course

285
00:11:27,839 --> 00:11:29,279
settings encouraging front-end

286
00:11:29,279 --> 00:11:30,880
javascript to be able to interact with

287
00:11:30,880 --> 00:11:33,279
them this includes mail gun ipstack and

288
00:11:33,279 --> 00:11:35,440
a bunch of other services so now that

289
00:11:35,440 --> 00:11:37,360
we've established why these keys are

290
00:11:37,360 --> 00:11:39,680
there is it a bad thing does it matter

291
00:11:39,680 --> 00:11:41,360
if these keys are leaking out are they

292
00:11:41,360 --> 00:11:44,320
meant to leak out

293
00:11:46,640 --> 00:11:48,880
well i think the short answer is yes it

294
00:11:48,880 --> 00:11:50,960
does matter

295
00:11:50,960 --> 00:11:54,809
[Music]

296
00:11:54,880 --> 00:11:57,519
if these apis are constructed to require

297
00:11:57,519 --> 00:11:59,680
api credentials and these credentials

298
00:11:59,680 --> 00:12:01,279
don't have any authentication on them

299
00:12:01,279 --> 00:12:03,440
we've lost something what that something

300
00:12:03,440 --> 00:12:05,920
is can often vary dramatically it might

301
00:12:05,920 --> 00:12:08,160
be as simple as rate limiting if the api

302
00:12:08,160 --> 00:12:10,160
key is meant to restrict how many times

303
00:12:10,160 --> 00:12:12,079
an individual user can make a request to

304
00:12:12,079 --> 00:12:13,760
a given api there's the denial of

305
00:12:13,760 --> 00:12:15,600
service opportunity for an attacker to

306
00:12:15,600 --> 00:12:17,920
take this api key and hammer the api

307
00:12:17,920 --> 00:12:19,360
with way more requests than you're

308
00:12:19,360 --> 00:12:21,279
expecting another simple use case could

309
00:12:21,279 --> 00:12:23,680
just be a money attack these apis are

310
00:12:23,680 --> 00:12:25,680
often set up in such a way that every

311
00:12:25,680 --> 00:12:27,600
time you make a request to them it bills

312
00:12:27,600 --> 00:12:29,120
you a little bit and while you might be

313
00:12:29,120 --> 00:12:31,279
expecting a low volume if your keys are

314
00:12:31,279 --> 00:12:32,720
just sitting around in your javascript

315
00:12:32,720 --> 00:12:35,120
files you can't really prevent someone

316
00:12:35,120 --> 00:12:36,959
from taking these keys and hammering the

317
00:12:36,959 --> 00:12:39,200
apis with way higher qps than what

318
00:12:39,200 --> 00:12:41,920
you're expecting well first thing is um

319
00:12:41,920 --> 00:12:44,399
a right is gonna cost them something

320
00:12:44,399 --> 00:12:46,000
right so you just keep writing and

321
00:12:46,000 --> 00:12:48,560
writing and that bill is gonna go up uh

322
00:12:48,560 --> 00:12:50,320
pretty pretty steadily depending on how

323
00:12:50,320 --> 00:12:51,680
how much you're writing so that would be

324
00:12:51,680 --> 00:12:53,839
my first thought maybe you're preparing

325
00:12:53,839 --> 00:12:55,920
for one or two qps per second an

326
00:12:55,920 --> 00:12:57,600
attacker could take that and jack it up

327
00:12:57,600 --> 00:13:00,000
to a million qps in a given second and

328
00:13:00,000 --> 00:13:02,079
you could end up with a ginormous amazon

329
00:13:02,079 --> 00:13:03,680
bill that you're not expecting these are

330
00:13:03,680 --> 00:13:05,600
some of the light use cases for what you

331
00:13:05,600 --> 00:13:07,440
can do with these keys let's take a look

332
00:13:07,440 --> 00:13:09,279
at some examples that are more serious

333
00:13:09,279 --> 00:13:11,600
it's very easy to over permission an

334
00:13:11,600 --> 00:13:13,920
amazon api key well i'd say a third use

335
00:13:13,920 --> 00:13:15,760
case that i'd add on there is someone

336
00:13:15,760 --> 00:13:17,519
just sort of following directions right

337
00:13:17,519 --> 00:13:19,760
where they looked up a stack overflow or

338
00:13:19,760 --> 00:13:20,880
something along those lines and they

339
00:13:20,880 --> 00:13:23,440
just copy pasted a set of permissions

340
00:13:23,440 --> 00:13:25,200
into the policy because they rented

341
00:13:25,200 --> 00:13:27,200
somewhere and that's you know it wasn't

342
00:13:27,200 --> 00:13:28,639
uniquely tailored to whatever it was

343
00:13:28,639 --> 00:13:30,160
that they were trying to do it's also

344
00:13:30,160 --> 00:13:32,320
extremely common for a developer to do

345
00:13:32,320 --> 00:13:33,839
development with a key that has a

346
00:13:33,839 --> 00:13:35,279
certain set of permissions with the

347
00:13:35,279 --> 00:13:37,519
intent of scoping that key down after

348
00:13:37,519 --> 00:13:39,120
they roll it out in production the

349
00:13:39,120 --> 00:13:41,040
problem becomes when the d-scoping never

350
00:13:41,040 --> 00:13:42,959
happens for one reason or another that

351
00:13:42,959 --> 00:13:44,720
reason could be that the developer rolls

352
00:13:44,720 --> 00:13:46,320
off the project and someone else takes

353
00:13:46,320 --> 00:13:48,160
over without all the context or it could

354
00:13:48,160 --> 00:13:50,320
be the developer just forgets or gets

355
00:13:50,320 --> 00:13:52,079
too busy and becomes distracted with

356
00:13:52,079 --> 00:13:54,320
another project one specific example

357
00:13:54,320 --> 00:13:56,079
could be that you build a front end

358
00:13:56,079 --> 00:13:57,839
that's meant to interact with an sqs

359
00:13:57,839 --> 00:13:59,680
queue and maybe you only want it to

360
00:13:59,680 --> 00:14:02,240
publish to a certain sqs queue and do

361
00:14:02,240 --> 00:14:04,720
nothing else you could imagine problems

362
00:14:04,720 --> 00:14:06,399
with someone taking that key and

363
00:14:06,399 --> 00:14:08,480
publishing large volumes of data that

364
00:14:08,480 --> 00:14:10,480
you're not expecting onto that queue but

365
00:14:10,480 --> 00:14:12,399
what if the key was accidentally scoped

366
00:14:12,399 --> 00:14:15,279
to also be able to read from sqsqs or

367
00:14:15,279 --> 00:14:17,360
what if the key was accidentally scoped

368
00:14:17,360 --> 00:14:20,240
to all sqsqs and it allowed the attacker

369
00:14:20,240 --> 00:14:22,560
to publish two different cues we've seen

370
00:14:22,560 --> 00:14:24,720
both of these use cases pop up and you

371
00:14:24,720 --> 00:14:26,560
can see from looking at the policy file

372
00:14:26,560 --> 00:14:28,800
why a developer might be tempted to

373
00:14:28,800 --> 00:14:30,639
overscope the key at least while they're

374
00:14:30,639 --> 00:14:32,480
doing their initial development another

375
00:14:32,480 --> 00:14:34,000
really common use case that we've

376
00:14:34,000 --> 00:14:36,160
observed is a developer might end up

377
00:14:36,160 --> 00:14:38,399
using their own administrative key for

378
00:14:38,399 --> 00:14:39,680
their initial testing and the

379
00:14:39,680 --> 00:14:41,440
administrative key might be able to do

380
00:14:41,440 --> 00:14:43,279
literally everything in the amazon

381
00:14:43,279 --> 00:14:44,880
account this is certainly the easiest

382
00:14:44,880 --> 00:14:46,639
way to develop the application you don't

383
00:14:46,639 --> 00:14:48,160
have to worry about the permissions at

384
00:14:48,160 --> 00:14:50,079
all and the developer just expects that

385
00:14:50,079 --> 00:14:51,440
at some point in the future they'll just

386
00:14:51,440 --> 00:14:53,199
figure out what the specific permissions

387
00:14:53,199 --> 00:14:54,720
are that they need and they'll describe

388
00:14:54,720 --> 00:14:56,079
the key but they don't want to be slowed

389
00:14:56,079 --> 00:14:57,440
down in the meantime while they work on

390
00:14:57,440 --> 00:14:59,279
the application then that developer

391
00:14:59,279 --> 00:15:00,639
might leave the company they might leave

392
00:15:00,639 --> 00:15:02,480
the team they might end up just going on

393
00:15:02,480 --> 00:15:04,720
sabbatical another developer comes along

394
00:15:04,720 --> 00:15:06,480
and they don't have the context that the

395
00:15:06,480 --> 00:15:08,560
original key is fully administrative and

396
00:15:08,560 --> 00:15:10,480
needs to be de-scoped so you end up with

397
00:15:10,480 --> 00:15:12,959
a fully administrative api key sitting

398
00:15:12,959 --> 00:15:14,639
in a javascript file that gets served

399
00:15:14,639 --> 00:15:16,399
without authentication to the public

400
00:15:16,399 --> 00:15:18,639
internet also think back to the earlier

401
00:15:18,639 --> 00:15:20,399
example when i mentioned that there are

402
00:15:20,399 --> 00:15:22,800
internal applications that you can make

403
00:15:22,800 --> 00:15:24,959
requests and view the responses to many

404
00:15:24,959 --> 00:15:27,279
of those internal applications have more

405
00:15:27,279 --> 00:15:29,839
aws keys than the external applications

406
00:15:29,839 --> 00:15:31,519
this is because people assume the apps

407
00:15:31,519 --> 00:15:33,120
are internal and won't be able to be

408
00:15:33,120 --> 00:15:35,040
accessed but if they're set up with

409
00:15:35,040 --> 00:15:37,519
permissive course an attacker can make a

410
00:15:37,519 --> 00:15:39,360
request and view the response to the

411
00:15:39,360 --> 00:15:41,519
javascript of the internal application

412
00:15:41,519 --> 00:15:43,680
and steal the amazon key that's supposed

413
00:15:43,680 --> 00:15:45,360
to be able to make requests send your

414
00:15:45,360 --> 00:15:48,000
responses to amazon and just like that

415
00:15:48,000 --> 00:15:49,920
you can chain multiple course problems

416
00:15:49,920 --> 00:15:51,600
together and get access to keys you're

417
00:15:51,600 --> 00:15:53,360
not supposed to be able to get access to

418
00:15:53,360 --> 00:15:55,279
let's look at the slack example in this

419
00:15:55,279 --> 00:15:57,360
example the developer built the contact

420
00:15:57,360 --> 00:15:59,600
us page to be completely stateless the

421
00:15:59,600 --> 00:16:01,600
way they did that is if you visited the

422
00:16:01,600 --> 00:16:03,680
contact page and you filled it out all

423
00:16:03,680 --> 00:16:05,519
of your information would just be sent

424
00:16:05,519 --> 00:16:07,759
directly to a slack channel via slack

425
00:16:07,759 --> 00:16:10,000
api token this way the application

426
00:16:10,000 --> 00:16:11,600
doesn't actually need a back end to

427
00:16:11,600 --> 00:16:13,600
process the result from the contact us

428
00:16:13,600 --> 00:16:15,600
page it's a clever way of architecting

429
00:16:15,600 --> 00:16:17,519
the app unfortunately it comes with some

430
00:16:17,519 --> 00:16:20,240
security issues notably these tokens

431
00:16:20,240 --> 00:16:22,320
that are advertised from slack as being

432
00:16:22,320 --> 00:16:24,160
able to post to individual single

433
00:16:24,160 --> 00:16:27,120
channels can actually be abused to post

434
00:16:27,120 --> 00:16:29,120
to other channels here's a blog post

435
00:16:29,120 --> 00:16:31,120
detailing how that's possible but a long

436
00:16:31,120 --> 00:16:33,279
story short is this credential will be

437
00:16:33,279 --> 00:16:36,000
created under sort of a false pretext

438
00:16:36,000 --> 00:16:38,160
that it'll only be used to post to a

439
00:16:38,160 --> 00:16:40,399
single channel when in reality you can

440
00:16:40,399 --> 00:16:42,240
post to almost any channel you want with

441
00:16:42,240 --> 00:16:44,000
it in addition to that you can imagine

442
00:16:44,000 --> 00:16:45,839
that there's some post-processing

443
00:16:45,839 --> 00:16:47,680
happening in the javascript to structure

444
00:16:47,680 --> 00:16:49,360
the message a little bit well obviously

445
00:16:49,360 --> 00:16:51,360
if you extract the key out you can

446
00:16:51,360 --> 00:16:53,360
override that post-processing and

447
00:16:53,360 --> 00:16:54,959
structure the message however you want

448
00:16:54,959 --> 00:16:56,800
which could enable you to upload

449
00:16:56,800 --> 00:16:59,199
malicious attachments or do other

450
00:16:59,199 --> 00:17:01,440
nefarious things that the recipients of

451
00:17:01,440 --> 00:17:03,120
the slack message aren't expecting as

452
00:17:03,120 --> 00:17:04,799
single page apps become more and more

453
00:17:04,799 --> 00:17:07,359
common and as sas integrations to these

454
00:17:07,359 --> 00:17:09,039
single page apps become more and more

455
00:17:09,039 --> 00:17:11,119
common i think we can expect this trend

456
00:17:11,119 --> 00:17:13,839
to grow over time that keys leak out in

457
00:17:13,839 --> 00:17:15,679
client-side applications and i think

458
00:17:15,679 --> 00:17:18,240
this trend is unlikely to reverse we can

459
00:17:18,240 --> 00:17:20,240
probably expect more and more single

460
00:17:20,240 --> 00:17:22,799
page applications to leak out keys and

461
00:17:22,799 --> 00:17:24,880
credentials that traditionally we would

462
00:17:24,880 --> 00:17:26,959
expect to see in back-end application

463
00:17:26,959 --> 00:17:28,559
code that's why the chrome extension

464
00:17:28,559 --> 00:17:30,400
helps you identify these keys so you can

465
00:17:30,400 --> 00:17:32,480
test out these use cases and figure out

466
00:17:32,480 --> 00:17:35,760
if there's security issues

467
00:17:40,240 --> 00:17:42,240
i want to talk about one other type of

468
00:17:42,240 --> 00:17:44,320
api key that's really common to leak out

469
00:17:44,320 --> 00:17:45,760
and that's actually keys that are

470
00:17:45,760 --> 00:17:47,360
intentionally leaked out these are the

471
00:17:47,360 --> 00:17:49,679
kinds you expect with analytic scripts

472
00:17:49,679 --> 00:17:51,520
scripts that are designed to be able to

473
00:17:51,520 --> 00:17:53,360
give simple metrics about who's viewing

474
00:17:53,360 --> 00:17:55,039
the website and how many people are

475
00:17:55,039 --> 00:17:56,720
viewing a website these analytics

476
00:17:56,720 --> 00:17:59,120
scripts are often built by sas providers

477
00:17:59,120 --> 00:18:01,200
that definitely intend for these keys to

478
00:18:01,200 --> 00:18:03,280
go into client-side application code and

479
00:18:03,280 --> 00:18:05,039
usually it's not a big deal but it's

480
00:18:05,039 --> 00:18:07,520
worth noting that these apis often have

481
00:18:07,520 --> 00:18:09,280
a different set of endpoints for

482
00:18:09,280 --> 00:18:11,280
administrative keys in other words keys

483
00:18:11,280 --> 00:18:13,520
to these websites are divided into two

484
00:18:13,520 --> 00:18:15,200
camps keys that are meant to collect

485
00:18:15,200 --> 00:18:16,880
metrics and are meant to be sent

486
00:18:16,880 --> 00:18:18,640
client-side and keys that are

487
00:18:18,640 --> 00:18:20,720
administrative and are meant to edit

488
00:18:20,720 --> 00:18:22,960
analytics collection and do other things

489
00:18:22,960 --> 00:18:24,480
that you wouldn't want client-side

490
00:18:24,480 --> 00:18:26,480
however because the api endpoints often

491
00:18:26,480 --> 00:18:28,640
use the same origin as the public api

492
00:18:28,640 --> 00:18:30,640
endpoints sometimes you end up with

493
00:18:30,640 --> 00:18:32,720
access control allow origin headers on

494
00:18:32,720 --> 00:18:34,720
both the administrative endpoints and on

495
00:18:34,720 --> 00:18:36,720
the public endpoints and that in many

496
00:18:36,720 --> 00:18:38,720
ways encourages these administrative

497
00:18:38,720 --> 00:18:41,360
tokens to also be sent client-side so in

498
00:18:41,360 --> 00:18:43,600
the readme i've posted several examples

499
00:18:43,600 --> 00:18:46,240
of analytics apis where you can take an

500
00:18:46,240 --> 00:18:48,320
analytics token and very quickly test to

501
00:18:48,320 --> 00:18:49,360
see whether or not it's an

502
00:18:49,360 --> 00:18:51,039
administrative token or a token that's

503
00:18:51,039 --> 00:18:52,559
meant to be public another super

504
00:18:52,559 --> 00:18:54,160
interesting use case that comes up a lot

505
00:18:54,160 --> 00:18:56,799
are google api keys these keys are used

506
00:18:56,799 --> 00:18:58,799
for interacting with google drive google

507
00:18:58,799 --> 00:19:01,600
calendar google maps youtube and more

508
00:19:01,600 --> 00:19:03,440
there's plenty of legitimate use cases

509
00:19:03,440 --> 00:19:05,360
for these keys like including google

510
00:19:05,360 --> 00:19:07,280
maps on your website but they're very

511
00:19:07,280 --> 00:19:09,600
easy to over scope and include extra

512
00:19:09,600 --> 00:19:11,280
permissions that you don't want for

513
00:19:11,280 --> 00:19:13,679
example just within google maps here's a

514
00:19:13,679 --> 00:19:15,600
link to a resource that allows you to

515
00:19:15,600 --> 00:19:18,080
take a google maps api key and see what

516
00:19:18,080 --> 00:19:20,000
it has permissions to and you'll see

517
00:19:20,000 --> 00:19:22,000
that even within just google maps you

518
00:19:22,000 --> 00:19:24,000
can over permission these keys if

519
00:19:24,000 --> 00:19:26,000
credentials are undeniably going to be

520
00:19:26,000 --> 00:19:27,760
ending up in front ends

521
00:19:27,760 --> 00:19:29,520
can we scope that down to be very

522
00:19:29,520 --> 00:19:31,679
specific on what it is that that needs

523
00:19:31,679 --> 00:19:32,720
to be done

524
00:19:32,720 --> 00:19:34,480
it would be nice if we actually had a

525
00:19:34,480 --> 00:19:36,160
tool that could take one of these keys

526
00:19:36,160 --> 00:19:38,240
and test it against all of google's api

527
00:19:38,240 --> 00:19:40,080
so you could quickly take a google api

528
00:19:40,080 --> 00:19:41,840
key and see what it has access to i

529
00:19:41,840 --> 00:19:43,360
couldn't find a tool like that but maybe

530
00:19:43,360 --> 00:19:44,960
if somebody's interested in either

531
00:19:44,960 --> 00:19:46,559
extending the google maps tool or

532
00:19:46,559 --> 00:19:48,080
creating another tool that'd be pretty

533
00:19:48,080 --> 00:19:50,080
cool and it would be much easier to sort

534
00:19:50,080 --> 00:19:51,919
out whether or not these google api keys

535
00:19:51,919 --> 00:19:53,760
that are all over the place are issues

536
00:19:53,760 --> 00:19:56,080
or not

537
00:19:56,080 --> 00:20:00,559
[Music]

538
00:20:00,559 --> 00:20:02,320
i also included a few more features that

539
00:20:02,320 --> 00:20:04,320
could help you find leaky keys the first

540
00:20:04,320 --> 00:20:06,720
is an optional check for git directories

541
00:20:06,720 --> 00:20:08,559
it's really common for developers to

542
00:20:08,559 --> 00:20:10,880
accidentally expose their git directory

543
00:20:10,880 --> 00:20:12,720
when they host a website this is because

544
00:20:12,720 --> 00:20:14,159
the directory where they do their

545
00:20:14,159 --> 00:20:16,400
development out of often contains a git

546
00:20:16,400 --> 00:20:18,640
directory and often they'll just copy

547
00:20:18,640 --> 00:20:19,679
everything in the current working

548
00:20:19,679 --> 00:20:21,760
directory over to a web server which of

549
00:20:21,760 --> 00:20:23,679
course includes the git directory

550
00:20:23,679 --> 00:20:25,520
there's a ton of blog posts explaining

551
00:20:25,520 --> 00:20:27,280
why this is so common and what the

552
00:20:27,280 --> 00:20:29,280
ramifications of accidentally leaking

553
00:20:29,280 --> 00:20:30,960
your git directory are but at a high

554
00:20:30,960 --> 00:20:32,640
level it basically leaks all of your

555
00:20:32,640 --> 00:20:34,640
revision history for your project you

556
00:20:34,640 --> 00:20:36,559
can find instructions on many of those

557
00:20:36,559 --> 00:20:38,400
blog posts for how to download all the

558
00:20:38,400 --> 00:20:40,320
contents of the dot git directory and

559
00:20:40,320 --> 00:20:41,919
then once you've downloaded it you can

560
00:20:41,919 --> 00:20:44,080
actually run truffle hog on that dot git

561
00:20:44,080 --> 00:20:46,000
directory and search the application's

562
00:20:46,000 --> 00:20:47,600
back-end code for secrets and

563
00:20:47,600 --> 00:20:50,240
credentials every single time i've

564
00:20:50,240 --> 00:20:52,000
looked through the alexa 1 million for

565
00:20:52,000 --> 00:20:53,919
leaky.git directories i've found

566
00:20:53,919 --> 00:20:55,840
hundreds of examples of websites that

567
00:20:55,840 --> 00:20:57,760
have their git directories exposed

568
00:20:57,760 --> 00:20:59,440
here's an old defcon talk from a couple

569
00:20:59,440 --> 00:21:01,360
years ago about it it's nothing new but

570
00:21:01,360 --> 00:21:02,720
it seems like this problem isn't going

571
00:21:02,720 --> 00:21:05,120
away anytime soon similarly i added a

572
00:21:05,120 --> 00:21:07,200
check for environment variable scripts

573
00:21:07,200 --> 00:21:08,960
just like git directory sometimes

574
00:21:08,960 --> 00:21:10,159
developers will have environment

575
00:21:10,159 --> 00:21:11,520
variable scripts in their working

576
00:21:11,520 --> 00:21:13,440
directory when they copy all their files

577
00:21:13,440 --> 00:21:15,039
over to their web server and of course

578
00:21:15,039 --> 00:21:16,320
environment variable scripts are going

579
00:21:16,320 --> 00:21:17,600
to have lots of secrets in them the

580
00:21:17,600 --> 00:21:19,120
downside to these checks is when you

581
00:21:19,120 --> 00:21:20,480
check for git directories and

582
00:21:20,480 --> 00:21:22,320
environment variable scripts firewalls

583
00:21:22,320 --> 00:21:24,320
often detect this activity and block you

584
00:21:24,320 --> 00:21:25,760
so you may want to be careful about how

585
00:21:25,760 --> 00:21:27,440
you use them and if you see a bunch of

586
00:21:27,440 --> 00:21:29,280
400 errors then you probably have to

587
00:21:29,280 --> 00:21:30,640
turn off the dot git directory and

588
00:21:30,640 --> 00:21:32,080
environment variable checks so that you

589
00:21:32,080 --> 00:21:33,760
can continue to test another interesting

590
00:21:33,760 --> 00:21:35,679
thing here is that since the advent of

591
00:21:35,679 --> 00:21:37,760
micro services it's actually not

592
00:21:37,760 --> 00:21:40,320
uncommon to have git directories several

593
00:21:40,320 --> 00:21:42,559
paths deep on a given website and tools

594
00:21:42,559 --> 00:21:44,640
like dursearch will often only search

595
00:21:44,640 --> 00:21:46,880
the root directory for git and

596
00:21:46,880 --> 00:21:48,480
environment variable scripts and this

597
00:21:48,480 --> 00:21:50,440
misses a lot of opportunities for

598
00:21:50,440 --> 00:21:51,919
leaky.getdirectories and environment

599
00:21:51,919 --> 00:21:53,760
variable scripts so the chrome extension

600
00:21:53,760 --> 00:21:55,440
will actually search the path of

601
00:21:55,440 --> 00:21:56,880
whatever you're currently browsing that

602
00:21:56,880 --> 00:21:58,640
way if a microservice is hosted on a

603
00:21:58,640 --> 00:22:00,320
path of a website that you're browsing

604
00:22:00,320 --> 00:22:02,080
you'll be able to check that path as

605
00:22:02,080 --> 00:22:04,480
well for git directories and environment

606
00:22:04,480 --> 00:22:07,280
variable scripts

607
00:22:07,810 --> 00:22:11,060
[Music]

608
00:22:11,120 --> 00:22:13,440
okay finally there's a few limitations

609
00:22:13,440 --> 00:22:15,039
of this chrome extension that i want to

610
00:22:15,039 --> 00:22:17,200
walk through notably i couldn't actually

611
00:22:17,200 --> 00:22:19,440
find a native api to be able to

612
00:22:19,440 --> 00:22:21,440
introspect every single request and

613
00:22:21,440 --> 00:22:23,360
response to and from a front end and a

614
00:22:23,360 --> 00:22:25,600
back end this means right now the chrome

615
00:22:25,600 --> 00:22:27,600
extension actually reads out the current

616
00:22:27,600 --> 00:22:29,520
document tree parses all of the

617
00:22:29,520 --> 00:22:31,760
javascript links and then refetches all

618
00:22:31,760 --> 00:22:33,760
of those static assets for scanning this

619
00:22:33,760 --> 00:22:35,360
isn't great for performance because it

620
00:22:35,360 --> 00:22:37,520
means static assets are basically loaded

621
00:22:37,520 --> 00:22:39,919
twice and it also misses a lot of keys

622
00:22:39,919 --> 00:22:42,320
that are transmitted over json apis i

623
00:22:42,320 --> 00:22:44,320
believe it's actually possible to do

624
00:22:44,320 --> 00:22:45,919
this kind of scanning with a service

625
00:22:45,919 --> 00:22:48,240
worker since service workers are able to

626
00:22:48,240 --> 00:22:50,640
introspect requests and responses to and

627
00:22:50,640 --> 00:22:51,919
from a server but i haven't really

628
00:22:51,919 --> 00:22:53,760
looked into injecting a service worker

629
00:22:53,760 --> 00:22:55,360
with a chrome extension i think it's

630
00:22:55,360 --> 00:22:57,120
possible though another limitation is

631
00:22:57,120 --> 00:22:59,200
there's currently no caching if you go

632
00:22:59,200 --> 00:23:01,360
to a website it will scan the jquery on

633
00:23:01,360 --> 00:23:03,039
that website and then if you view

634
00:23:03,039 --> 00:23:04,960
another website or the same website

635
00:23:04,960 --> 00:23:07,600
again it'll refetch the same jquery and

636
00:23:07,600 --> 00:23:09,120
scan it again it would be a nice

637
00:23:09,120 --> 00:23:11,280
performance boost if it had some memory

638
00:23:11,280 --> 00:23:12,480
of things that it's already scanned

639
00:23:12,480 --> 00:23:14,080
before if anyone would like to

640
00:23:14,080 --> 00:23:16,400
contribute or improve these limitations

641
00:23:16,400 --> 00:23:18,159
here's a link to the repository for the

642
00:23:18,159 --> 00:23:20,000
code lastly if you use this chrome

643
00:23:20,000 --> 00:23:21,679
extension to find keys that you submit

644
00:23:21,679 --> 00:23:23,200
to a bug bounty and you want to do a

645
00:23:23,200 --> 00:23:25,440
huge favor give a shout out to the tool

646
00:23:25,440 --> 00:23:27,039
this helps other people learn about it

647
00:23:27,039 --> 00:23:28,640
thanks so much and happy hacking

648
00:23:28,640 --> 00:23:30,240
hopefully this helps some people find

649
00:23:30,240 --> 00:23:34,050
some keys in some pretty gnarly places

650
00:23:34,050 --> 00:23:35,440
[Music]

651
00:23:35,440 --> 00:23:38,000
okay quick uh epilogue here i shot this

652
00:23:38,000 --> 00:23:39,120
footage

653
00:23:39,120 --> 00:23:40,960
later remember earlier in the video when

654
00:23:40,960 --> 00:23:43,039
i mentioned that you can still view the

655
00:23:43,039 --> 00:23:45,760
keys on weather.com that were remediated

656
00:23:45,760 --> 00:23:47,919
through archive.org well it just dawned

657
00:23:47,919 --> 00:23:50,000
on me that you might be able to scan all

658
00:23:50,000 --> 00:23:52,720
of archive.org for all kinds of keys

659
00:23:52,720 --> 00:23:54,640
that were historically just leaked out

660
00:23:54,640 --> 00:23:56,159
in front ends and then committed over

661
00:23:56,159 --> 00:23:57,520
the top of this is actually one of the

662
00:23:57,520 --> 00:23:59,360
main reasons i open source the original

663
00:23:59,360 --> 00:24:01,200
truffle hog was to go through and scan

664
00:24:01,200 --> 00:24:03,520
all of the old code in the repository

665
00:24:03,520 --> 00:24:05,039
that wasn't currently being checked for

666
00:24:05,039 --> 00:24:07,200
keys so if you're testing a website it

667
00:24:07,200 --> 00:24:08,960
might be interesting actually if you

668
00:24:08,960 --> 00:24:11,279
went through all the old versions of

669
00:24:11,279 --> 00:24:13,200
that website on archive.org with the

670
00:24:13,200 --> 00:24:15,200
chrome extension you can probably find

671
00:24:15,200 --> 00:24:17,039
some keys that are buried back there and

672
00:24:17,039 --> 00:24:18,799
if you work at archive.org or know

673
00:24:18,799 --> 00:24:21,279
someone that works at archive.org

674
00:24:21,279 --> 00:24:22,990
let's get in touch

675
00:24:22,990 --> 00:24:35,240
[Music]

