1
00:00:06,160 --> 00:00:09,309
[Music]

2
00:00:10,559 --> 00:00:12,480
hi my name is evan custodio and this is

3
00:00:12,480 --> 00:00:14,160
haptic a library for building micro

4
00:00:14,160 --> 00:00:16,400
fuzzers and turbo intruder or a fuzzing

5
00:00:16,400 --> 00:00:19,039
framework for turbo intruder

6
00:00:19,039 --> 00:00:20,000
so

7
00:00:20,000 --> 00:00:22,400
back in march i saw a tweet from naffy

8
00:00:22,400 --> 00:00:23,760
that looked like this

9
00:00:23,760 --> 00:00:27,039
it just showed a an image of normal

10
00:00:27,039 --> 00:00:29,760
intruder with a cluster bomb style of

11
00:00:29,760 --> 00:00:30,720
attack

12
00:00:30,720 --> 00:00:32,000
with uh

13
00:00:32,000 --> 00:00:34,079
position payloads on both the method and

14
00:00:34,079 --> 00:00:36,480
the path and this is typical if you want

15
00:00:36,480 --> 00:00:37,200
to

16
00:00:37,200 --> 00:00:40,079
brute force admin panel endpoints

17
00:00:40,079 --> 00:00:42,800
mutating it in different ways

18
00:00:42,800 --> 00:00:45,200
while also for each mutation testing a

19
00:00:45,200 --> 00:00:47,520
different http method type

20
00:00:47,520 --> 00:00:48,879
and i thought well i don't really use

21
00:00:48,879 --> 00:00:50,480
intruder anymore i kind of moved my

22
00:00:50,480 --> 00:00:52,719
workloads all the way to turbo intruder

23
00:00:52,719 --> 00:00:54,160
what would this look like in turbo

24
00:00:54,160 --> 00:00:55,440
intruder so

25
00:00:55,440 --> 00:00:59,920
the day a day later i wrote up about 100

26
00:00:59,920 --> 00:01:00,719
line

27
00:01:00,719 --> 00:01:03,120
python gist that did the exact same

28
00:01:03,120 --> 00:01:04,000
thing

29
00:01:04,000 --> 00:01:06,960
um and accomplished the exact same goal

30
00:01:06,960 --> 00:01:08,400
the but there was a couple problems with

31
00:01:08,400 --> 00:01:11,040
this implementation one

32
00:01:11,040 --> 00:01:13,119
the entire http request is sort of

33
00:01:13,119 --> 00:01:16,479
hard-coded into the python because

34
00:01:16,479 --> 00:01:20,880
there isn't really a way to um

35
00:01:20,880 --> 00:01:22,720
to use the

36
00:01:22,720 --> 00:01:24,159
original

37
00:01:24,159 --> 00:01:26,400
uh http payload that's given into turbo

38
00:01:26,400 --> 00:01:28,560
intruder well and still keeping

39
00:01:28,560 --> 00:01:30,240
insertion tags

40
00:01:30,240 --> 00:01:33,840
um or payload payload uh insertion tags

41
00:01:33,840 --> 00:01:34,880
and so

42
00:01:34,880 --> 00:01:36,159
that got me

43
00:01:36,159 --> 00:01:38,880
sort of um you know feeling unsatisfied

44
00:01:38,880 --> 00:01:40,400
and wanted to figure out well how do i

45
00:01:40,400 --> 00:01:42,399
add that type of functionality into

46
00:01:42,399 --> 00:01:45,520
turbo intruder how do we add

47
00:01:45,520 --> 00:01:47,920
multiple insertion payload insertion

48
00:01:47,920 --> 00:01:49,600
points but also

49
00:01:49,600 --> 00:01:51,840
be able to specify attacks not just

50
00:01:51,840 --> 00:01:53,520
sniper attacks but also

51
00:01:53,520 --> 00:01:55,280
cluster bomb style

52
00:01:55,280 --> 00:01:56,159
and

53
00:01:56,159 --> 00:01:58,079
battering ram style attacks into turbo

54
00:01:58,079 --> 00:02:01,280
intruder and so i went on the path to

55
00:02:01,280 --> 00:02:02,079
um

56
00:02:02,079 --> 00:02:04,320
to building a library for

57
00:02:04,320 --> 00:02:06,560
for turbo intruder called haptic

58
00:02:06,560 --> 00:02:09,520
and so haptic is a python library

59
00:02:09,520 --> 00:02:10,399
um

60
00:02:10,399 --> 00:02:12,400
which gets embedded right into turbo

61
00:02:12,400 --> 00:02:15,680
intruder jar file it's not it's not a

62
00:02:15,680 --> 00:02:17,440
burp plug-in at all

63
00:02:17,440 --> 00:02:19,760
and really the only the way you enable

64
00:02:19,760 --> 00:02:22,319
it in your turbo intruder

65
00:02:22,319 --> 00:02:24,800
python is basically to

66
00:02:24,800 --> 00:02:26,720
first line and port it just like this

67
00:02:26,720 --> 00:02:29,440
from haptic import you know star

68
00:02:29,440 --> 00:02:30,720
and so

69
00:02:30,720 --> 00:02:33,280
it's it's easy as that to enable it and

70
00:02:33,280 --> 00:02:35,680
the goals for this library

71
00:02:35,680 --> 00:02:37,840
one are to get the same exact support of

72
00:02:37,840 --> 00:02:39,680
payload markers that we have in in

73
00:02:39,680 --> 00:02:41,599
traditional intruder

74
00:02:41,599 --> 00:02:43,280
but also to

75
00:02:43,280 --> 00:02:45,599
enable uh turbulent trader to have the

76
00:02:45,599 --> 00:02:47,760
same type of attack types that are in

77
00:02:47,760 --> 00:02:49,440
traditional intruder like sniper cluster

78
00:02:49,440 --> 00:02:52,640
bomb battering ram

79
00:02:52,640 --> 00:02:53,680
and so

80
00:02:53,680 --> 00:02:55,440
i i went off and i

81
00:02:55,440 --> 00:02:57,200
built this library and as i was testing

82
00:02:57,200 --> 00:02:58,480
it

83
00:02:58,480 --> 00:03:01,280
to completion i noticed some positive

84
00:03:01,280 --> 00:03:03,680
side effects from the library first

85
00:03:03,680 --> 00:03:04,400
being

86
00:03:04,400 --> 00:03:06,800
it significantly reduced the python code

87
00:03:06,800 --> 00:03:08,560
size and trade for actual readable

88
00:03:08,560 --> 00:03:10,400
python

89
00:03:10,400 --> 00:03:12,800
it also created these portable fuzzers

90
00:03:12,800 --> 00:03:15,200
and testers the the python that you'd

91
00:03:15,200 --> 00:03:16,000
write

92
00:03:16,000 --> 00:03:18,159
is actually can actually be reused

93
00:03:18,159 --> 00:03:19,280
across

94
00:03:19,280 --> 00:03:20,080
um

95
00:03:20,080 --> 00:03:22,480
http types from the repeater so you

96
00:03:22,480 --> 00:03:23,440
could send

97
00:03:23,440 --> 00:03:25,920
anything from the repeater and reuse

98
00:03:25,920 --> 00:03:27,840
sort of the same types of fuzzers that

99
00:03:27,840 --> 00:03:30,480
you've built and also enabled

100
00:03:30,480 --> 00:03:32,000
easy structure aware fuzzing and i'll

101
00:03:32,000 --> 00:03:33,360
explain what that is later in the

102
00:03:33,360 --> 00:03:36,000
presentation

103
00:03:36,080 --> 00:03:38,720
so here's a basic example um this is

104
00:03:38,720 --> 00:03:40,400
a full example

105
00:03:40,400 --> 00:03:44,159
uh about 20 20 lines of code

106
00:03:44,159 --> 00:03:45,920
there's nothing more to it than really

107
00:03:45,920 --> 00:03:47,360
just this

108
00:03:47,360 --> 00:03:48,239
um

109
00:03:48,239 --> 00:03:52,159
first we enable the library by

110
00:03:52,159 --> 00:03:54,159
importing haptic by doing from haptic

111
00:03:54,159 --> 00:03:55,360
import star

112
00:03:55,360 --> 00:03:56,720
and this will import all the different

113
00:03:56,720 --> 00:03:58,959
or all the different haptic related

114
00:03:58,959 --> 00:04:01,840
classes decorators class decorators and

115
00:04:01,840 --> 00:04:03,760
helper functions

116
00:04:03,760 --> 00:04:06,239
the first thing you need to do is create

117
00:04:06,239 --> 00:04:07,760
a class you can call it whatever you

118
00:04:07,760 --> 00:04:09,760
want in this case i call it test logic

119
00:04:09,760 --> 00:04:11,840
but it must extend

120
00:04:11,840 --> 00:04:14,640
the transform class from haptic the

121
00:04:14,640 --> 00:04:16,639
transform class is what adds the nuts

122
00:04:16,639 --> 00:04:19,120
and bolts into

123
00:04:19,120 --> 00:04:21,759
your your haptic class

124
00:04:21,759 --> 00:04:25,120
and inside your haptic class

125
00:04:25,280 --> 00:04:26,639
you specify

126
00:04:26,639 --> 00:04:28,560
sort of test names

127
00:04:28,560 --> 00:04:30,080
and they all must start with test

128
00:04:30,080 --> 00:04:31,600
underscore

129
00:04:31,600 --> 00:04:33,520
whatever the name you want after the

130
00:04:33,520 --> 00:04:35,199
underscore

131
00:04:35,199 --> 00:04:37,759
is is up to you and whatever you do name

132
00:04:37,759 --> 00:04:40,160
it it will translate into

133
00:04:40,160 --> 00:04:41,520
these

134
00:04:41,520 --> 00:04:44,800
these tags right here and so

135
00:04:44,800 --> 00:04:47,280
in this case i have test underscore h1

136
00:04:47,280 --> 00:04:49,440
and if you notice in front of the method

137
00:04:49,440 --> 00:04:50,880
i have um

138
00:04:50,880 --> 00:04:54,400
what i call a logic decorator and it

139
00:04:54,400 --> 00:04:57,360
places logic state logic into the test

140
00:04:57,360 --> 00:04:58,960
and this specific one this is probably

141
00:04:58,960 --> 00:05:01,680
the most popular one that i use

142
00:05:01,680 --> 00:05:03,840
um it's apply iteration five and what

143
00:05:03,840 --> 00:05:06,000
this tells the method is that

144
00:05:06,000 --> 00:05:09,120
if you find the h1 tag in the http

145
00:05:09,120 --> 00:05:10,880
request

146
00:05:10,880 --> 00:05:12,000
create

147
00:05:12,000 --> 00:05:14,240
five test cases

148
00:05:14,240 --> 00:05:16,800
returning moose in its place

149
00:05:16,800 --> 00:05:18,240
right so

150
00:05:18,240 --> 00:05:20,479
so that's basically what that says so if

151
00:05:20,479 --> 00:05:22,720
we look at the rest of the python

152
00:05:22,720 --> 00:05:24,960
it's normal turbo intruder boilerplate

153
00:05:24,960 --> 00:05:28,080
python we have the cue requests um

154
00:05:28,080 --> 00:05:29,759
function and we have the handle response

155
00:05:29,759 --> 00:05:32,000
function and so when you first click

156
00:05:32,000 --> 00:05:34,240
attack the queue request function is

157
00:05:34,240 --> 00:05:37,039
executed it builds a request engine

158
00:05:37,039 --> 00:05:38,479
and then with that request engine you

159
00:05:38,479 --> 00:05:40,880
need to issue out the tests so

160
00:05:40,880 --> 00:05:43,440
to do that with haptic

161
00:05:43,440 --> 00:05:45,440
you basically take the class that you

162
00:05:45,440 --> 00:05:46,800
created with haptic in this case it's

163
00:05:46,800 --> 00:05:49,520
test logic and you instantiate an object

164
00:05:49,520 --> 00:05:50,639
the

165
00:05:50,639 --> 00:05:53,520
the during instantiation um in the

166
00:05:53,520 --> 00:05:55,919
constructor the constructor receives the

167
00:05:55,919 --> 00:05:59,520
um the actual http payload string with

168
00:05:59,520 --> 00:06:02,160
all the haptic annotations

169
00:06:02,160 --> 00:06:03,600
um

170
00:06:03,600 --> 00:06:06,319
and so with that it creates an object in

171
00:06:06,319 --> 00:06:08,000
this case we call it test factory

172
00:06:08,000 --> 00:06:09,360
because it acts sort of like a test

173
00:06:09,360 --> 00:06:10,800
factory

174
00:06:10,800 --> 00:06:11,840
and

175
00:06:11,840 --> 00:06:12,720
um

176
00:06:12,720 --> 00:06:14,080
on the next

177
00:06:14,080 --> 00:06:16,560
in the next step there's a loop here

178
00:06:16,560 --> 00:06:18,960
that sort of asks the question of

179
00:06:18,960 --> 00:06:22,240
hey for or or starts the the question of

180
00:06:22,240 --> 00:06:24,720
hey for every test in test factory uh

181
00:06:24,720 --> 00:06:26,800
could you please create a test for me

182
00:06:26,800 --> 00:06:28,800
figure out all the tests please and and

183
00:06:28,800 --> 00:06:31,120
let's go ahead and enqueue them into the

184
00:06:31,120 --> 00:06:32,240
engine

185
00:06:32,240 --> 00:06:33,759
and so

186
00:06:33,759 --> 00:06:36,720
what happens here specifically with

187
00:06:36,720 --> 00:06:40,000
with um this test called h1

188
00:06:40,000 --> 00:06:40,880
if you

189
00:06:40,880 --> 00:06:43,039
if you look at

190
00:06:43,039 --> 00:06:45,120
if you look at the get being

191
00:06:45,120 --> 00:06:46,800
so this uh get request sort of being

192
00:06:46,800 --> 00:06:48,639
your your initial http payload you're

193
00:06:48,639 --> 00:06:51,039
going to be annotating it with this with

194
00:06:51,039 --> 00:06:53,599
this h1 tag around your payload of

195
00:06:53,599 --> 00:06:56,560
interest and so what this sort of

196
00:06:56,560 --> 00:06:57,840
um

197
00:06:57,840 --> 00:06:59,759
um haptic

198
00:06:59,759 --> 00:07:01,199
transform does

199
00:07:01,199 --> 00:07:03,759
is it replaces that entire tag plus

200
00:07:03,759 --> 00:07:06,080
what's inside the inner part of that tag

201
00:07:06,080 --> 00:07:08,319
with the literal mousse it's shown there

202
00:07:08,319 --> 00:07:10,720
and it does it for five tests and that's

203
00:07:10,720 --> 00:07:14,240
exactly sort of what this what this um

204
00:07:14,240 --> 00:07:17,520
this snippet does and

205
00:07:17,520 --> 00:07:20,319
this type of um test as simple as it

206
00:07:20,319 --> 00:07:21,919
looks right now this type of framework

207
00:07:21,919 --> 00:07:22,880
is

208
00:07:22,880 --> 00:07:24,560
is extremely powerful

209
00:07:24,560 --> 00:07:26,479
for uh fuzzing different types of

210
00:07:26,479 --> 00:07:28,960
payloads into different areas

211
00:07:28,960 --> 00:07:31,680
of your http requests and in sort of the

212
00:07:31,680 --> 00:07:34,560
next next few moments i'll go through uh

213
00:07:34,560 --> 00:07:35,840
different demos

214
00:07:35,840 --> 00:07:38,000
of how we do that

215
00:07:38,000 --> 00:07:40,080
so here we have turbo intruder open with

216
00:07:40,080 --> 00:07:43,280
the python shown from the previous slide

217
00:07:43,280 --> 00:07:45,759
and in this python we have our testlogic

218
00:07:45,759 --> 00:07:48,000
class with our test

219
00:07:48,000 --> 00:07:51,120
h1 tag and so the way we apply this tag

220
00:07:51,120 --> 00:07:52,479
is we simply

221
00:07:52,479 --> 00:07:54,720
just go ahead and do

222
00:07:54,720 --> 00:07:57,360
plus h1

223
00:07:57,360 --> 00:08:00,319
plus end and then we can surround

224
00:08:00,319 --> 00:08:02,400
these tags anywhere in the payload so

225
00:08:02,400 --> 00:08:04,479
for instance i'm going to be targeting

226
00:08:04,479 --> 00:08:06,800
this car payload

227
00:08:06,800 --> 00:08:08,720
right here

228
00:08:08,720 --> 00:08:10,400
and what this should do when we click

229
00:08:10,400 --> 00:08:11,280
attack

230
00:08:11,280 --> 00:08:14,560
is this will evaluate this test

231
00:08:14,560 --> 00:08:16,400
for five times as shown in apply

232
00:08:16,400 --> 00:08:18,960
iteration state logic and it should

233
00:08:18,960 --> 00:08:21,199
return moose in place of car so if we do

234
00:08:21,199 --> 00:08:22,639
that

235
00:08:22,639 --> 00:08:24,560
then we see

236
00:08:24,560 --> 00:08:27,039
that indeed type equals moose

237
00:08:27,039 --> 00:08:28,960
now if we go ahead and we just

238
00:08:28,960 --> 00:08:30,720
return

239
00:08:30,720 --> 00:08:31,840
data

240
00:08:31,840 --> 00:08:34,719
data is given to h1

241
00:08:34,719 --> 00:08:36,159
through the tag so anything that's

242
00:08:36,159 --> 00:08:38,399
inside the tag will be returned will be

243
00:08:38,399 --> 00:08:41,200
placed into the h1 routine as data so we

244
00:08:41,200 --> 00:08:43,039
can just return data back if we do if we

245
00:08:43,039 --> 00:08:44,240
do that

246
00:08:44,240 --> 00:08:46,800
it shows that we now have car and

247
00:08:46,800 --> 00:08:50,160
replace the whole transform with car

248
00:08:50,160 --> 00:08:51,360
we can go ahead and we can make this

249
00:08:51,360 --> 00:08:53,360
iteration number count any anything we

250
00:08:53,360 --> 00:08:55,040
want we can make it five we can make it

251
00:08:55,040 --> 00:08:56,240
10

252
00:08:56,240 --> 00:08:59,040
and it will go ahead and scale with that

253
00:08:59,040 --> 00:08:59,920
number

254
00:08:59,920 --> 00:09:02,000
so now next what we're going to do is

255
00:09:02,000 --> 00:09:04,240
we're going to show how we can

256
00:09:04,240 --> 00:09:05,839
sort of surround the data with different

257
00:09:05,839 --> 00:09:09,760
things so for instance um because

258
00:09:09,760 --> 00:09:13,040
uh this is a an iterative transform

259
00:09:13,040 --> 00:09:15,120
the state variable keeps track of which

260
00:09:15,120 --> 00:09:16,880
of the iteration count that this

261
00:09:16,880 --> 00:09:19,040
transform has so

262
00:09:19,040 --> 00:09:23,760
we if we do say string state dot

263
00:09:23,760 --> 00:09:26,160
enter

264
00:09:26,320 --> 00:09:28,800
and we append it to the data

265
00:09:28,800 --> 00:09:30,080
and attack

266
00:09:30,080 --> 00:09:33,360
we'll see that we get car 0 car 1

267
00:09:33,360 --> 00:09:37,839
4 5 6 7 8 9. so this is being able to

268
00:09:37,839 --> 00:09:39,519
take the data in

269
00:09:39,519 --> 00:09:41,040
uh through the tag and be able to

270
00:09:41,040 --> 00:09:44,399
manipulate it and return it back is

271
00:09:44,399 --> 00:09:46,320
a strong property of

272
00:09:46,320 --> 00:09:51,279
of haptic what what makes it so powerful

273
00:09:51,279 --> 00:09:53,120
so so next one of the things we can do

274
00:09:53,120 --> 00:09:55,120
is you can you can pretty much add

275
00:09:55,120 --> 00:09:56,880
whatever amount you want for this

276
00:09:56,880 --> 00:10:00,080
iteration so let's say we're asking for

277
00:10:00,080 --> 00:10:01,360
a million

278
00:10:01,360 --> 00:10:03,600
requests but let's say we don't want to

279
00:10:03,600 --> 00:10:06,240
do a million requests we want to stop at

280
00:10:06,240 --> 00:10:07,839
some number so

281
00:10:07,839 --> 00:10:09,200
we can do something like this where we

282
00:10:09,200 --> 00:10:11,680
do where we go if state dot

283
00:10:11,680 --> 00:10:13,279
iter

284
00:10:13,279 --> 00:10:16,240
is greater than equal to say

285
00:10:16,240 --> 00:10:18,160
15

286
00:10:18,160 --> 00:10:19,680
we can

287
00:10:19,680 --> 00:10:22,720
we can tell it to just stop right here

288
00:10:22,720 --> 00:10:25,200
and it won't go to a million requests

289
00:10:25,200 --> 00:10:27,120
instead we'll stop right at the 15th

290
00:10:27,120 --> 00:10:29,600
request

291
00:10:29,600 --> 00:10:31,680
so using

292
00:10:31,680 --> 00:10:33,200
using the stop

293
00:10:33,200 --> 00:10:34,240
function

294
00:10:34,240 --> 00:10:37,040
is a good way to

295
00:10:37,040 --> 00:10:40,160
to basically bail out of a a

296
00:10:40,160 --> 00:10:42,720
a test series when some condition has

297
00:10:42,720 --> 00:10:44,000
been met

298
00:10:44,000 --> 00:10:44,800
so

299
00:10:44,800 --> 00:10:47,680
next we'll take a look at

300
00:10:47,680 --> 00:10:50,320
some helper functions that we can use to

301
00:10:50,320 --> 00:10:52,640
mutate the data so

302
00:10:52,640 --> 00:10:56,079
one of the helper functions that we have

303
00:10:56,079 --> 00:10:57,120
is

304
00:10:57,120 --> 00:10:58,560
radomza

305
00:10:58,560 --> 00:11:00,640
so

306
00:11:00,640 --> 00:11:03,200
as long as you've installed radamza

307
00:11:03,200 --> 00:11:06,000
um if you're running burp and linux

308
00:11:06,000 --> 00:11:08,320
and radoms is installed in your path

309
00:11:08,320 --> 00:11:10,240
or if you're running burp in windows and

310
00:11:10,240 --> 00:11:14,640
radamza is install installed in your wsl

311
00:11:14,640 --> 00:11:16,320
it should work either way i have not

312
00:11:16,320 --> 00:11:17,519
tested this on

313
00:11:17,519 --> 00:11:20,800
os x i'm not a big os x fan but it

314
00:11:20,800 --> 00:11:23,200
should work in os x2 if not

315
00:11:23,200 --> 00:11:24,959
um let me know

316
00:11:24,959 --> 00:11:27,519
so you can apply radamsa and it will

317
00:11:27,519 --> 00:11:29,519
mutate this in fact let's just

318
00:11:29,519 --> 00:11:31,200
go ahead and

319
00:11:31,200 --> 00:11:33,200
show how we can just move the tag around

320
00:11:33,200 --> 00:11:34,800
and to mutate something else so we'll

321
00:11:34,800 --> 00:11:37,040
leave car alone we'll go to the user

322
00:11:37,040 --> 00:11:39,920
agent and we'll try to mutate that for

323
00:11:39,920 --> 00:11:42,880
10 tests

324
00:11:42,880 --> 00:11:44,000
and we see

325
00:11:44,000 --> 00:11:45,279
here

326
00:11:45,279 --> 00:11:48,560
as we move forward radoms is mutating

327
00:11:48,560 --> 00:11:51,518
the user agent

328
00:11:53,279 --> 00:11:55,519
another thing we can do another helper

329
00:11:55,519 --> 00:11:57,760
function that we have is

330
00:11:57,760 --> 00:11:59,200
the helper function is called random

331
00:11:59,200 --> 00:12:01,440
insert and index insert so we'll show

332
00:12:01,440 --> 00:12:04,399
random insert first

333
00:12:05,680 --> 00:12:08,079
random insert

334
00:12:08,079 --> 00:12:10,880
takes the data as the first argument

335
00:12:10,880 --> 00:12:13,120
the next argument it takes a list

336
00:12:13,120 --> 00:12:15,519
of different insert strings so right now

337
00:12:15,519 --> 00:12:17,040
i'll just show one so let's say we want

338
00:12:17,040 --> 00:12:17,680
to

339
00:12:17,680 --> 00:12:20,320
insert ticks randomly

340
00:12:20,320 --> 00:12:23,120
inside of data

341
00:12:23,360 --> 00:12:25,200
so what this will do is

342
00:12:25,200 --> 00:12:28,240
wherever we place this tag

343
00:12:28,240 --> 00:12:31,600
let's place it at the host surround the

344
00:12:31,600 --> 00:12:34,079
host now

345
00:12:34,079 --> 00:12:35,200
it will

346
00:12:35,200 --> 00:12:38,320
randomly find a spot

347
00:12:38,320 --> 00:12:40,480
in this data tag and it will insert a

348
00:12:40,480 --> 00:12:41,839
random

349
00:12:41,839 --> 00:12:43,920
um character that's in this list right

350
00:12:43,920 --> 00:12:46,160
now there's only one character so

351
00:12:46,160 --> 00:12:48,079
it'll just put ticks in so let's take a

352
00:12:48,079 --> 00:12:50,560
look at that

353
00:12:50,800 --> 00:12:52,399
and then you see as i go down a list of

354
00:12:52,399 --> 00:12:55,040
it randomly

355
00:12:55,600 --> 00:12:58,399
places sticks

356
00:12:58,880 --> 00:13:02,320
we can also do a index insert which

357
00:13:02,320 --> 00:13:04,399
allows you to control the index

358
00:13:04,399 --> 00:13:06,639
so let's say we don't want to randomly

359
00:13:06,639 --> 00:13:08,399
play sticks everywhere instead we want

360
00:13:08,399 --> 00:13:10,160
to

361
00:13:10,160 --> 00:13:11,600
actually

362
00:13:11,600 --> 00:13:13,279
walk the tick from the beginning to the

363
00:13:13,279 --> 00:13:15,839
end of the data string so what we can do

364
00:13:15,839 --> 00:13:16,720
is

365
00:13:16,720 --> 00:13:18,880
we can use actually state dot

366
00:13:18,880 --> 00:13:20,880
hitter to get the iteration count

367
00:13:20,880 --> 00:13:22,639
because that should go from zero

368
00:13:22,639 --> 00:13:24,959
to your iteration max

369
00:13:24,959 --> 00:13:27,279
and we can put a high iteration max of

370
00:13:27,279 --> 00:13:28,800
say a thousand

371
00:13:28,800 --> 00:13:30,720
what index insert will do is if your

372
00:13:30,720 --> 00:13:32,639
iteration count goes past the length of

373
00:13:32,639 --> 00:13:34,880
data that's inside of the tag it will

374
00:13:34,880 --> 00:13:37,120
automatically bail out of the tag so

375
00:13:37,120 --> 00:13:39,120
this won't go to a thousand so let's

376
00:13:39,120 --> 00:13:40,320
take a look at that

377
00:13:40,320 --> 00:13:42,560
say it stops right at the 18th

378
00:13:42,560 --> 00:13:44,320
and if we take a look at that we see

379
00:13:44,320 --> 00:13:46,160
that the tick is walking

380
00:13:46,160 --> 00:13:47,279
across

381
00:13:47,279 --> 00:13:50,000
the host name just like that

382
00:13:50,000 --> 00:13:51,279
um

383
00:13:51,279 --> 00:13:55,120
another property of this is not just um

384
00:13:55,120 --> 00:13:57,120
you know you could use multiple

385
00:13:57,120 --> 00:13:59,360
types of

386
00:13:59,360 --> 00:14:01,199
characters to insert or strings to

387
00:14:01,199 --> 00:14:05,359
insert so let's say we want to insert

388
00:14:05,519 --> 00:14:07,519
zero a percent

389
00:14:07,519 --> 00:14:10,079
and maybe

390
00:14:10,399 --> 00:14:11,760
zero d

391
00:14:11,760 --> 00:14:14,160
and what will happen is

392
00:14:14,160 --> 00:14:17,440
as it walks across the entire

393
00:14:17,440 --> 00:14:18,560
string

394
00:14:18,560 --> 00:14:20,320
it will randomly choose which one which

395
00:14:20,320 --> 00:14:22,480
one of these three to insert so

396
00:14:22,480 --> 00:14:25,040
we see that again

397
00:14:25,040 --> 00:14:27,680
we see that it's randomly choosing tick

398
00:14:27,680 --> 00:14:31,239
0d and 0a

399
00:14:32,959 --> 00:14:35,360
so far we've only shown you the apply

400
00:14:35,360 --> 00:14:37,680
iteration logic decorator for our

401
00:14:37,680 --> 00:14:41,360
transforms there are four other

402
00:14:41,360 --> 00:14:43,199
decorator types that can be used with

403
00:14:43,199 --> 00:14:45,519
haptic that may be useful

404
00:14:45,519 --> 00:14:47,839
the first one shown here is called apply

405
00:14:47,839 --> 00:14:49,839
range and this works just like the

406
00:14:49,839 --> 00:14:52,480
python range function where you give a

407
00:14:52,480 --> 00:14:54,880
starting value your your end value and

408
00:14:54,880 --> 00:14:57,839
your step and your step can also be

409
00:14:57,839 --> 00:14:59,920
fractional so you can go up in in steps

410
00:14:59,920 --> 00:15:00,880
of say

411
00:15:00,880 --> 00:15:04,560
0.1 and what happens is for every

412
00:15:04,560 --> 00:15:07,360
for every value that's produced it will

413
00:15:07,360 --> 00:15:09,760
invoke a test with that value placed

414
00:15:09,760 --> 00:15:12,399
inside for for data if you want the

415
00:15:12,399 --> 00:15:14,560
original data that's that your that's

416
00:15:14,560 --> 00:15:17,199
inside of the tag for this specific test

417
00:15:17,199 --> 00:15:19,680
you can use self dot inner at any time

418
00:15:19,680 --> 00:15:21,680
to get the original inner data and

419
00:15:21,680 --> 00:15:24,160
mutate it along with the the range

420
00:15:24,160 --> 00:15:27,600
values that you're getting apply list

421
00:15:27,600 --> 00:15:29,839
works the same way except for numbers

422
00:15:29,839 --> 00:15:31,040
you get

423
00:15:31,040 --> 00:15:33,440
you you supply a python list just like

424
00:15:33,440 --> 00:15:36,320
this and each element of that list

425
00:15:36,320 --> 00:15:39,199
creates a test and is placed into data

426
00:15:39,199 --> 00:15:40,720
same with file list except with file

427
00:15:40,720 --> 00:15:42,959
list it opens up a file

428
00:15:42,959 --> 00:15:45,040
splits each line into an element and

429
00:15:45,040 --> 00:15:47,680
then each element is placed into the

430
00:15:47,680 --> 00:15:51,279
transform as a data value

431
00:15:51,279 --> 00:15:52,959
apply payloads

432
00:15:52,959 --> 00:15:54,720
is a uh

433
00:15:54,720 --> 00:15:56,320
is a

434
00:15:56,320 --> 00:15:58,079
a decorator that

435
00:15:58,079 --> 00:16:01,519
basically grabs a a pre-packaged payload

436
00:16:01,519 --> 00:16:04,160
file that's packaged with haptic in this

437
00:16:04,160 --> 00:16:06,800
case we have a whole bunch of payload

438
00:16:06,800 --> 00:16:07,920
files that

439
00:16:07,920 --> 00:16:09,839
that were gathered from burp

440
00:16:09,839 --> 00:16:12,880
specifically here we grab a payload file

441
00:16:12,880 --> 00:16:14,639
i put here that's the

442
00:16:14,639 --> 00:16:16,880
word list from dur search

443
00:16:16,880 --> 00:16:19,839
and for every word inside of the

444
00:16:19,839 --> 00:16:22,000
dura search word list gets supplied into

445
00:16:22,000 --> 00:16:25,040
h5 as data and then we can replace the

446
00:16:25,040 --> 00:16:26,240
extension identifier with whatever

447
00:16:26,240 --> 00:16:27,839
extension you want and that gets placed

448
00:16:27,839 --> 00:16:30,079
into h5

449
00:16:30,079 --> 00:16:31,839
and so

450
00:16:31,839 --> 00:16:34,639
previously we've shown the plus sign

451
00:16:34,639 --> 00:16:37,279
style attack so with the plus sign style

452
00:16:37,279 --> 00:16:39,040
attack that's that's a sniper attack and

453
00:16:39,040 --> 00:16:41,759
so with sniper it'll just it just goes

454
00:16:41,759 --> 00:16:43,600
through the payload lists one at a time

455
00:16:43,600 --> 00:16:45,360
so in this case we have two

456
00:16:45,360 --> 00:16:48,079
um h2 tags here which is fine for the

457
00:16:48,079 --> 00:16:50,160
for the plus sign style attack this you

458
00:16:50,160 --> 00:16:52,399
can have multi multiple of these h2s

459
00:16:52,399 --> 00:16:54,079
called called out

460
00:16:54,079 --> 00:16:55,920
and what will happen is

461
00:16:55,920 --> 00:16:57,680
um the id

462
00:16:57,680 --> 00:16:59,519
h the h2 tag at the id will get

463
00:16:59,519 --> 00:17:02,480
evaluated first with any placed um has

464
00:17:02,480 --> 00:17:04,880
the the value inside of type and then

465
00:17:04,880 --> 00:17:07,119
null gets placed inside of id

466
00:17:07,119 --> 00:17:09,280
and then this h2 tag gets evaluated and

467
00:17:09,280 --> 00:17:10,000
so

468
00:17:10,000 --> 00:17:12,160
since h2 is five

469
00:17:12,160 --> 00:17:14,240
tests we should have a total of ten

470
00:17:14,240 --> 00:17:15,520
tests here

471
00:17:15,520 --> 00:17:17,520
which we do and we see this goes from 0

472
00:17:17,520 --> 00:17:19,119
to 4

473
00:17:19,119 --> 00:17:21,839
and this goes from 0 to 4 on the other

474
00:17:21,839 --> 00:17:24,399
parameter

475
00:17:26,559 --> 00:17:28,240
if we wanted if we wanted to do a

476
00:17:28,240 --> 00:17:29,679
cluster bomb

477
00:17:29,679 --> 00:17:30,640
style

478
00:17:30,640 --> 00:17:32,880
of attack instead of the plus sign we

479
00:17:32,880 --> 00:17:34,480
use a percent sign

480
00:17:34,480 --> 00:17:37,120
and so put a percent sign here

481
00:17:37,120 --> 00:17:39,360
put a percent sign here and you cannot

482
00:17:39,360 --> 00:17:40,720
use the same

483
00:17:40,720 --> 00:17:42,000
um

484
00:17:42,000 --> 00:17:42,720
uh

485
00:17:42,720 --> 00:17:44,080
haptic transform you have to use a

486
00:17:44,080 --> 00:17:45,520
different one because each transform

487
00:17:45,520 --> 00:17:46,799
keeps its own state and they're both

488
00:17:46,799 --> 00:17:48,559
being used at the same time so in this

489
00:17:48,559 --> 00:17:51,120
case we're going to use h2 and h3 and so

490
00:17:51,120 --> 00:17:53,280
for every value for every test value in

491
00:17:53,280 --> 00:17:56,799
h2 it will go through every value of h3

492
00:17:56,799 --> 00:17:59,280
and so that would be

493
00:17:59,280 --> 00:18:00,960
five tests multiplied by five tests so

494
00:18:00,960 --> 00:18:03,679
it should be 25 tests in total

495
00:18:03,679 --> 00:18:06,320
and there are and you see as we go up

496
00:18:06,320 --> 00:18:09,039
from zero to five zero to four

497
00:18:09,039 --> 00:18:11,840
it goes through each

498
00:18:11,840 --> 00:18:15,840
value inside of the h3 tag

499
00:18:16,880 --> 00:18:19,280
and then the last attack type is the

500
00:18:19,280 --> 00:18:21,440
battering ram

501
00:18:21,440 --> 00:18:22,720
pitchfork

502
00:18:22,720 --> 00:18:25,840
style which is the number sign

503
00:18:25,840 --> 00:18:28,480
noted by the number sign here and so

504
00:18:28,480 --> 00:18:30,240
what this does is

505
00:18:30,240 --> 00:18:32,880
it pro it evaluates each of the tag each

506
00:18:32,880 --> 00:18:34,960
of the tags and places their value in

507
00:18:34,960 --> 00:18:37,120
parallel so in this case this is more

508
00:18:37,120 --> 00:18:38,960
pitch fork style because there are

509
00:18:38,960 --> 00:18:39,760
different

510
00:18:39,760 --> 00:18:41,520
payload sets being placed into their

511
00:18:41,520 --> 00:18:42,720
positions

512
00:18:42,720 --> 00:18:45,120
so go ahead should be only five

513
00:18:45,120 --> 00:18:47,120
tests but you see

514
00:18:47,120 --> 00:18:48,960
they have their individual

515
00:18:48,960 --> 00:18:50,559
tags evaluated and placed into the

516
00:18:50,559 --> 00:18:53,039
position

517
00:18:54,160 --> 00:18:55,679
one of the things you might notice is

518
00:18:55,679 --> 00:18:58,320
that as i was testing that this

519
00:18:58,320 --> 00:19:00,320
user agent is being mutated that is

520
00:19:00,320 --> 00:19:02,640
another style of tag called

521
00:19:02,640 --> 00:19:05,200
a persistent transform with persistent

522
00:19:05,200 --> 00:19:07,600
transforms they're denoted by per

523
00:19:07,600 --> 00:19:10,000
underscore to start the to start the

524
00:19:10,000 --> 00:19:11,039
method

525
00:19:11,039 --> 00:19:13,919
and you can place them anywhere they

526
00:19:13,919 --> 00:19:16,160
contain no state and they prescribe no

527
00:19:16,160 --> 00:19:18,400
tests so they only get evaluated with

528
00:19:18,400 --> 00:19:20,240
other tests and they always get

529
00:19:20,240 --> 00:19:22,480
evaluated independent of those tests so

530
00:19:22,480 --> 00:19:24,720
this is a good way to sort of just if

531
00:19:24,720 --> 00:19:26,480
you need to compute a hash

532
00:19:26,480 --> 00:19:31,039
or just perform just naive manipulation

533
00:19:31,039 --> 00:19:33,520
you can sort of add these persistent

534
00:19:33,520 --> 00:19:35,919
uh transforms and they don't they don't

535
00:19:35,919 --> 00:19:36,799
affect

536
00:19:36,799 --> 00:19:39,280
the state at all of the iterative

537
00:19:39,280 --> 00:19:41,120
iterative transforms

538
00:19:41,120 --> 00:19:44,480
lastly this clone transform is used for

539
00:19:44,480 --> 00:19:46,880
creating battering ram style attacks so

540
00:19:46,880 --> 00:19:48,480
this attack right here is a pitchfork

541
00:19:48,480 --> 00:19:49,919
style because it's using two different

542
00:19:49,919 --> 00:19:52,160
payload sets but how do we use the same

543
00:19:52,160 --> 00:19:54,559
payload set when you can't use the same

544
00:19:54,559 --> 00:19:56,160
tag twice

545
00:19:56,160 --> 00:19:57,919
so what we do here is we use clone

546
00:19:57,919 --> 00:19:59,600
transform to

547
00:19:59,600 --> 00:20:02,080
copy or just

548
00:20:02,080 --> 00:20:03,600
basically clone

549
00:20:03,600 --> 00:20:05,760
h3 into h3c

550
00:20:05,760 --> 00:20:08,400
and now it'll use the same exact payload

551
00:20:08,400 --> 00:20:10,880
set so we can go ahead and change this

552
00:20:10,880 --> 00:20:12,799
to

553
00:20:12,799 --> 00:20:15,799
h3c

554
00:20:16,080 --> 00:20:18,559
and we have five tests but we can see

555
00:20:18,559 --> 00:20:20,880
they're using a battering ram style

556
00:20:20,880 --> 00:20:22,320
attack to use

557
00:20:22,320 --> 00:20:24,080
with the same exact payload for each

558
00:20:24,080 --> 00:20:25,679
position

559
00:20:25,679 --> 00:20:27,520
so let's now go into a couple of

560
00:20:27,520 --> 00:20:29,919
advanced use cases for fuzzing with

561
00:20:29,919 --> 00:20:31,520
haptic

562
00:20:31,520 --> 00:20:32,640
in this case

563
00:20:32,640 --> 00:20:34,960
we we see two fields one is a cookie

564
00:20:34,960 --> 00:20:38,159
message field that looks base 64 encoded

565
00:20:38,159 --> 00:20:39,679
and we have a

566
00:20:39,679 --> 00:20:42,960
json structure with uh four keys which

567
00:20:42,960 --> 00:20:46,720
is payloads also look base64 encoded now

568
00:20:46,720 --> 00:20:48,960
if you were to just place radomsa or

569
00:20:48,960 --> 00:20:51,679
random insert at these values at this

570
00:20:51,679 --> 00:20:52,799
level

571
00:20:52,799 --> 00:20:54,559
chances are you'd either be getting

572
00:20:54,559 --> 00:20:57,600
errors back from the base64 decoder or

573
00:20:57,600 --> 00:21:00,000
the json deserializer at the application

574
00:21:00,000 --> 00:21:02,159
and you wouldn't get very far in the

575
00:21:02,159 --> 00:21:03,520
logic path

576
00:21:03,520 --> 00:21:05,039
what we can do with haptic is we can

577
00:21:05,039 --> 00:21:08,240
create transforms that

578
00:21:08,240 --> 00:21:10,559
understand the structure of the message

579
00:21:10,559 --> 00:21:11,840
we are fuzzing

580
00:21:11,840 --> 00:21:14,320
and try to get a layer deeper so in the

581
00:21:14,320 --> 00:21:16,400
case of this cookie we see that it's a

582
00:21:16,400 --> 00:21:18,880
base64 encoded so

583
00:21:18,880 --> 00:21:21,919
we'll we'll instead decode it fuzz at

584
00:21:21,919 --> 00:21:24,159
that level and then re-encode it and in

585
00:21:24,159 --> 00:21:26,400
the case of this json structure

586
00:21:26,400 --> 00:21:27,919
we see that

587
00:21:27,919 --> 00:21:29,840
we want to we probably want to fuzz the

588
00:21:29,840 --> 00:21:32,320
values that are inside of these base64

589
00:21:32,320 --> 00:21:33,360
encoded

590
00:21:33,360 --> 00:21:35,840
um keys so first we have to deserialize

591
00:21:35,840 --> 00:21:39,280
the json structure access all the keys

592
00:21:39,280 --> 00:21:42,720
and decode the base64 fuzz at that level

593
00:21:42,720 --> 00:21:45,400
re-encode the base64 and

594
00:21:45,400 --> 00:21:48,720
re-serialize the json structure and so

595
00:21:48,720 --> 00:21:50,720
we can do that in pretty pretty small

596
00:21:50,720 --> 00:21:53,200
amounts of code here with two tags the

597
00:21:53,200 --> 00:21:56,240
h1 tag takes the data decodes it

598
00:21:56,240 --> 00:21:58,240
performs a random insert and then

599
00:21:58,240 --> 00:22:00,320
re-encodes it and sends it into the

600
00:22:00,320 --> 00:22:02,400
application and in the case with json

601
00:22:02,400 --> 00:22:03,520
fuzz

602
00:22:03,520 --> 00:22:06,000
it loads the data into a json

603
00:22:06,000 --> 00:22:09,200
deserializer for every key

604
00:22:09,200 --> 00:22:11,600
found in that json structure

605
00:22:11,600 --> 00:22:12,640
it will

606
00:22:12,640 --> 00:22:16,000
decode the the value in that key

607
00:22:16,000 --> 00:22:18,640
randomly insert a character from this

608
00:22:18,640 --> 00:22:19,760
list

609
00:22:19,760 --> 00:22:21,919
and then re-encode it back into that key

610
00:22:21,919 --> 00:22:23,039
location

611
00:22:23,039 --> 00:22:25,280
and then re-encode the entire

612
00:22:25,280 --> 00:22:27,679
json structure and send it back in so

613
00:22:27,679 --> 00:22:30,000
let's and both tags are now placed in

614
00:22:30,000 --> 00:22:31,600
the payload as

615
00:22:31,600 --> 00:22:33,200
a pitchfork style so they book they'll

616
00:22:33,200 --> 00:22:35,360
both execute in parallel so let's see

617
00:22:35,360 --> 00:22:37,280
what we get

618
00:22:37,280 --> 00:22:38,840
so we get

619
00:22:38,840 --> 00:22:43,039
50 50 different um tests we see they're

620
00:22:43,039 --> 00:22:45,039
mostly 51 words except there's a couple

621
00:22:45,039 --> 00:22:47,919
that's 56 so

622
00:22:47,919 --> 00:22:49,280
if we take a look

623
00:22:49,280 --> 00:22:51,280
we see indeed that all the base 64

624
00:22:51,280 --> 00:22:54,799
values are getting manipulated

625
00:22:54,799 --> 00:22:56,880
and we also see that the message is

626
00:22:56,880 --> 00:22:58,640
getting that insertion from the from the

627
00:22:58,640 --> 00:23:02,320
h1 tag a random insert of a tick

628
00:23:02,320 --> 00:23:03,840
when we see when we go down to that

629
00:23:03,840 --> 00:23:06,960
message that's 56 bytes

630
00:23:06,960 --> 00:23:08,880
there's 56 words

631
00:23:08,880 --> 00:23:11,520
we see that we triggered an error at the

632
00:23:11,520 --> 00:23:12,720
key

633
00:23:12,720 --> 00:23:15,360
in the json structure labeled d

634
00:23:15,360 --> 00:23:17,120
that carets aren't allowed in the d

635
00:23:17,120 --> 00:23:20,799
parameter and so this is a good way to

636
00:23:20,799 --> 00:23:23,200
what's called structure to wear fuzzing

637
00:23:23,200 --> 00:23:25,440
where we understand the structure at one

638
00:23:25,440 --> 00:23:27,440
level deep or two level deep

639
00:23:27,440 --> 00:23:28,559
and

640
00:23:28,559 --> 00:23:31,600
uh create a transform to fuzz at those

641
00:23:31,600 --> 00:23:33,360
deep levels

642
00:23:33,360 --> 00:23:34,559
so now that you know a little bit about

643
00:23:34,559 --> 00:23:37,039
haptic let's go back to naffy's original

644
00:23:37,039 --> 00:23:39,039
example and my response to it so the

645
00:23:39,039 --> 00:23:41,520
response to it was about 100 lines of uh

646
00:23:41,520 --> 00:23:43,840
python code written for turbo intruder

647
00:23:43,840 --> 00:23:46,640
that was pretty much unreadable

648
00:23:46,640 --> 00:23:47,360
or

649
00:23:47,360 --> 00:23:49,200
at least very difficult to

650
00:23:49,200 --> 00:23:50,880
to handle

651
00:23:50,880 --> 00:23:53,919
here we've reduced it the same exact uh

652
00:23:53,919 --> 00:23:56,159
type of function down to 20 lines of

653
00:23:56,159 --> 00:23:58,880
python code using haptic

654
00:23:58,880 --> 00:24:00,880
we have basically

655
00:24:00,880 --> 00:24:03,279
created position tags

656
00:24:03,279 --> 00:24:06,480
um called method and path that that uh

657
00:24:06,480 --> 00:24:08,720
associate to these two transform

658
00:24:08,720 --> 00:24:11,440
functions in this first transform

659
00:24:11,440 --> 00:24:13,200
transform function we

660
00:24:13,200 --> 00:24:14,960
um iterate through

661
00:24:14,960 --> 00:24:16,799
get post put in patch

662
00:24:16,799 --> 00:24:19,360
for every payload that's found in the

663
00:24:19,360 --> 00:24:22,960
admins pre-packaged uh word list

664
00:24:22,960 --> 00:24:25,039
so this would be number of tests will be

665
00:24:25,039 --> 00:24:27,279
four times the number of uh entries in

666
00:24:27,279 --> 00:24:29,200
this in this word list so we put the

667
00:24:29,200 --> 00:24:31,760
method here and put the path there

668
00:24:31,760 --> 00:24:33,360
so if we go ahead and

669
00:24:33,360 --> 00:24:34,880
issue out the attack

670
00:24:34,880 --> 00:24:37,520
we see that some of the stuff is hitting

671
00:24:37,520 --> 00:24:39,120
let's now use a

672
00:24:39,120 --> 00:24:40,640
what's called a response decorator

673
00:24:40,640 --> 00:24:42,320
that's been added to turbo intruder to

674
00:24:42,320 --> 00:24:44,640
dedupe some of the responses so go ahead

675
00:24:44,640 --> 00:24:45,760
and add

676
00:24:45,760 --> 00:24:48,480
unique size

677
00:24:48,480 --> 00:24:50,799
one and this should dedupe all common

678
00:24:50,799 --> 00:24:53,120
responses and and leave only ones that

679
00:24:53,120 --> 00:24:54,880
appear different

680
00:24:54,880 --> 00:24:57,039
so here we go we have

681
00:24:57,039 --> 00:24:59,919
uh 404 not found

682
00:24:59,919 --> 00:25:02,960
we have a 405 method not allowed

683
00:25:02,960 --> 00:25:04,400
showing that there are some allowed

684
00:25:04,400 --> 00:25:06,559
methods of options input

685
00:25:06,559 --> 00:25:07,840
and then

686
00:25:07,840 --> 00:25:09,600
we show we have

687
00:25:09,600 --> 00:25:10,960
it shows here that we found the admin

688
00:25:10,960 --> 00:25:13,679
panel using the the put method at slash

689
00:25:13,679 --> 00:25:15,840
admin

690
00:25:15,840 --> 00:25:18,320
so that's it thank you for watching this

691
00:25:18,320 --> 00:25:20,240
presentation on haptic

692
00:25:20,240 --> 00:25:22,240
thank you to all my friends at

693
00:25:22,240 --> 00:25:24,320
activitycon for inviting me here to give

694
00:25:24,320 --> 00:25:26,159
this talk

695
00:25:26,159 --> 00:25:29,039
everyone can now go ahead and clone

696
00:25:29,039 --> 00:25:32,080
haptic it's here on github on this link

697
00:25:32,080 --> 00:25:34,080
shown here

698
00:25:34,080 --> 00:25:35,760
feel free to look through the examples

699
00:25:35,760 --> 00:25:37,600
folder i know a lot of the concepts i

700
00:25:37,600 --> 00:25:39,679
showed here today are pretty pretty

701
00:25:39,679 --> 00:25:40,960
advanced but

702
00:25:40,960 --> 00:25:42,880
i feel like if if you check out the

703
00:25:42,880 --> 00:25:44,960
examples and try to run through them

704
00:25:44,960 --> 00:25:47,520
you'll intuitively get sort of the the

705
00:25:47,520 --> 00:25:49,600
look and feel of of how to use the

706
00:25:49,600 --> 00:25:50,640
library

707
00:25:50,640 --> 00:25:52,720
um if you haven't already follow me on

708
00:25:52,720 --> 00:25:54,240
twitter at deaf parent

709
00:25:54,240 --> 00:25:57,840
and that's it thank you everyone

