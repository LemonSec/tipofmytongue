1
00:00:01,150 --> 00:00:05,840
[Music]

2
00:00:06,240 --> 00:00:06,720
hello

3
00:00:06,720 --> 00:00:09,120
and welcome my name is william bolding

4
00:00:09,120 --> 00:00:10,639
also known as vaxx

5
00:00:10,639 --> 00:00:12,639
and in this lighting talk i'll be

6
00:00:12,639 --> 00:00:14,000
walking through my process

7
00:00:14,000 --> 00:00:16,400
for how i discovered an arbitrary file

8
00:00:16,400 --> 00:00:18,000
read in gitlab

9
00:00:18,000 --> 00:00:20,240
and how it's possible to turn that bug

10
00:00:20,240 --> 00:00:23,439
into remote code execution

11
00:00:23,439 --> 00:00:25,920
so a little bit about me i've been

12
00:00:25,920 --> 00:00:26,960
working as a

13
00:00:26,960 --> 00:00:29,119
software developer for about 10 years

14
00:00:29,119 --> 00:00:31,279
now i'm currently working

15
00:00:31,279 --> 00:00:33,760
for a startup called bidable out of

16
00:00:33,760 --> 00:00:35,440
tasmania australia

17
00:00:35,440 --> 00:00:38,000
the majority of the stuff i do at work

18
00:00:38,000 --> 00:00:40,399
revolves around a rails back end with a

19
00:00:40,399 --> 00:00:43,440
typescript and amber front end

20
00:00:43,440 --> 00:00:45,760
i've always been really interested in

21
00:00:45,760 --> 00:00:46,879
computer security

22
00:00:46,879 --> 00:00:49,920
and in my free time i love participating

23
00:00:49,920 --> 00:00:53,360
in ctfs with my team open tool

24
00:00:53,360 --> 00:00:56,079
and more recently over the last year

25
00:00:56,079 --> 00:00:57,120
i've started doing

26
00:00:57,120 --> 00:01:00,640
quite a few bug bounties as well

27
00:01:02,559 --> 00:01:04,479
i guess my bug bounty journey really

28
00:01:04,479 --> 00:01:07,439
began about june last year when i read

29
00:01:07,439 --> 00:01:10,240
excellent report on hakawan about

30
00:01:10,240 --> 00:01:11,280
overwriting

31
00:01:11,280 --> 00:01:14,400
files in gitlab by injecting

32
00:01:14,400 --> 00:01:17,920
git command line options i found it

33
00:01:17,920 --> 00:01:20,080
really fascinating it's sort of a whole

34
00:01:20,080 --> 00:01:20,960
glass of

35
00:01:20,960 --> 00:01:22,640
vulnerabilities that i'd never really

36
00:01:22,640 --> 00:01:24,799
thought of before

37
00:01:24,799 --> 00:01:27,119
so even if you sanitize all the input

38
00:01:27,119 --> 00:01:29,119
correctly and use the correct methods

39
00:01:29,119 --> 00:01:29,439
for

40
00:01:29,439 --> 00:01:32,479
running a command um it's still possible

41
00:01:32,479 --> 00:01:34,320
if the argument starts with a dash

42
00:01:34,320 --> 00:01:36,799
it could be interpreted as an option to

43
00:01:36,799 --> 00:01:37,360
the command

44
00:01:37,360 --> 00:01:39,759
instead of as you know a path or a file

45
00:01:39,759 --> 00:01:41,840
name

46
00:01:42,000 --> 00:01:44,000
so after reading the report i started

47
00:01:44,000 --> 00:01:45,600
looking into gitlab

48
00:01:45,600 --> 00:01:48,000
to uh see if there were any more places

49
00:01:48,000 --> 00:01:48,640
where

50
00:01:48,640 --> 00:01:51,680
um similar technique could be used

51
00:01:51,680 --> 00:01:54,479
and after a bit of testing i discovered

52
00:01:54,479 --> 00:01:55,360
that um

53
00:01:55,360 --> 00:01:57,280
there were quite a few similar issues

54
00:01:57,280 --> 00:01:59,280
throughout italy which is the

55
00:01:59,280 --> 00:02:01,759
service that gitlab used to wrap all

56
00:02:01,759 --> 00:02:04,159
their calls to get

57
00:02:04,159 --> 00:02:07,439
and quite a few of these could be abused

58
00:02:07,439 --> 00:02:10,199
the worst one was allowing

59
00:02:10,199 --> 00:02:12,400
semi-controlled content to be written

60
00:02:12,400 --> 00:02:16,239
to an arbitrary location

61
00:02:16,239 --> 00:02:18,319
and you could use the same technique as

62
00:02:18,319 --> 00:02:20,640
the original report to overwrite the

63
00:02:20,640 --> 00:02:22,239
authorized keys and

64
00:02:22,239 --> 00:02:25,920
gain remote code execution gitlab's a

65
00:02:25,920 --> 00:02:27,920
very open company and they have a pretty

66
00:02:27,920 --> 00:02:30,239
good track record with security

67
00:02:30,239 --> 00:02:33,040
so i thought if they had some issues

68
00:02:33,040 --> 00:02:33,599
like this

69
00:02:33,599 --> 00:02:36,800
then quite probably other services

70
00:02:36,800 --> 00:02:39,200
i might have similar types of issue

71
00:02:39,200 --> 00:02:39,920
which

72
00:02:39,920 --> 00:02:43,360
did turn out to be the case i managed to

73
00:02:43,360 --> 00:02:44,800
find a similar issue

74
00:02:44,800 --> 00:02:47,440
in github which allowed files to be

75
00:02:47,440 --> 00:02:50,800
truncated or blank files created

76
00:02:50,800 --> 00:02:54,480
and there was a far right to rc bug in

77
00:02:54,480 --> 00:02:56,879
bitbucket and uh both of these were

78
00:02:56,879 --> 00:02:58,000
abusing the same

79
00:02:58,000 --> 00:03:01,040
git argument injection technique

80
00:03:01,040 --> 00:03:03,280
after finding reporting these issues i

81
00:03:03,280 --> 00:03:05,120
was having quite a lot of fun with bug

82
00:03:05,120 --> 00:03:06,159
bounties and i

83
00:03:06,159 --> 00:03:07,599
knew it was something that i wanted to

84
00:03:07,599 --> 00:03:11,119
continue with and to learn more

85
00:03:12,640 --> 00:03:14,959
fast forward to march this year and i

86
00:03:14,959 --> 00:03:16,720
was reading through the patch notes

87
00:03:16,720 --> 00:03:19,440
of the latest gitlab security release

88
00:03:19,440 --> 00:03:20,000
and the

89
00:03:20,000 --> 00:03:23,200
first issue there was titled directory

90
00:03:23,200 --> 00:03:24,319
traversal to

91
00:03:24,319 --> 00:03:27,519
arbitrary filedread which sounded like a

92
00:03:27,519 --> 00:03:29,519
pretty big deal

93
00:03:29,519 --> 00:03:32,560
gitlab normally discloses the original

94
00:03:32,560 --> 00:03:33,599
ticket

95
00:03:33,599 --> 00:03:36,000
about 30 days after the fix has been

96
00:03:36,000 --> 00:03:37,440
released

97
00:03:37,440 --> 00:03:39,120
but because it's open source it's

98
00:03:39,120 --> 00:03:41,680
normally pretty easy to find

99
00:03:41,680 --> 00:03:44,840
the commit by comparing the previous

100
00:03:44,840 --> 00:03:46,000
release

101
00:03:46,000 --> 00:03:47,760
and from there you can work out what the

102
00:03:47,760 --> 00:03:49,040
issue was

103
00:03:49,040 --> 00:03:52,640
um so looking at the commit the patch to

104
00:03:52,640 --> 00:03:53,040
fix

105
00:03:53,040 --> 00:03:55,360
this issue was pretty small it just

106
00:03:55,360 --> 00:03:56,560
added some

107
00:03:56,560 --> 00:03:59,840
validation to a secret field on a file

108
00:03:59,840 --> 00:04:01,040
upload

109
00:04:01,040 --> 00:04:03,920
um also with the patch there was some

110
00:04:03,920 --> 00:04:05,360
pretty good test cases

111
00:04:05,360 --> 00:04:08,400
that were added and a few fixed which

112
00:04:08,400 --> 00:04:10,319
gave a pretty good outline of how the

113
00:04:10,319 --> 00:04:14,720
issue could be reproduced

114
00:04:14,720 --> 00:04:17,279
after the patch the route and secret

115
00:04:17,279 --> 00:04:19,358
parts of the file uploader class looked

116
00:04:19,358 --> 00:04:20,959
a bit like this

117
00:04:20,959 --> 00:04:23,600
previously there was no restriction on

118
00:04:23,600 --> 00:04:25,440
what the secret could be

119
00:04:25,440 --> 00:04:28,080
and the secrets used in the dynamic

120
00:04:28,080 --> 00:04:28,720
segment

121
00:04:28,720 --> 00:04:31,120
which is used um to determine the

122
00:04:31,120 --> 00:04:32,800
location of the file

123
00:04:32,800 --> 00:04:35,680
um so if instead of the secret uh path

124
00:04:35,680 --> 00:04:37,680
traversal was supplied

125
00:04:37,680 --> 00:04:40,000
um it could have allowed for an

126
00:04:40,000 --> 00:04:41,919
arbitrary file to be read instead of the

127
00:04:41,919 --> 00:04:44,479
intended one

128
00:04:44,479 --> 00:04:46,560
this was a much more standard type of

129
00:04:46,560 --> 00:04:48,400
bug but it got me thinking again and i

130
00:04:48,400 --> 00:04:49,199
wanted to dig

131
00:04:49,199 --> 00:04:51,360
a little bit deeper and see if there was

132
00:04:51,360 --> 00:04:56,479
any similar issues that could be found

133
00:04:56,479 --> 00:04:58,320
i'm pretty familiar with rails and

134
00:04:58,320 --> 00:05:01,360
normally use ruby mine as my ide for it

135
00:05:01,360 --> 00:05:04,000
as it makes it quite easy to trace core

136
00:05:04,000 --> 00:05:05,039
hierarchies and

137
00:05:05,039 --> 00:05:07,199
find out where and how different things

138
00:05:07,199 --> 00:05:08,479
are used

139
00:05:08,479 --> 00:05:10,880
um also when you're running gitlab

140
00:05:10,880 --> 00:05:11,840
locally

141
00:05:11,840 --> 00:05:13,840
you have access to the rails console

142
00:05:13,840 --> 00:05:15,680
which allows you to

143
00:05:15,680 --> 00:05:18,160
interact directly with any of the models

144
00:05:18,160 --> 00:05:18,720
and

145
00:05:18,720 --> 00:05:20,639
quickly test and discover different

146
00:05:20,639 --> 00:05:21,919
things

147
00:05:21,919 --> 00:05:25,039
gitlab uses a gem called carry wave to

148
00:05:25,039 --> 00:05:25,680
handle

149
00:05:25,680 --> 00:05:27,759
a lot of that heavy lifting for file

150
00:05:27,759 --> 00:05:28,880
uploads

151
00:05:28,880 --> 00:05:31,120
so i started looking into that and just

152
00:05:31,120 --> 00:05:31,919
reading up on

153
00:05:31,919 --> 00:05:34,000
how it works and how it was used by

154
00:05:34,000 --> 00:05:36,160
gitlab

155
00:05:36,160 --> 00:05:38,320
i started looking at the note model

156
00:05:38,320 --> 00:05:39,280
which is the

157
00:05:39,280 --> 00:05:41,759
base for things like issues and snippets

158
00:05:41,759 --> 00:05:42,479
in

159
00:05:42,479 --> 00:05:45,680
github and it can have attachments added

160
00:05:45,680 --> 00:05:46,720
to it

161
00:05:46,720 --> 00:05:49,199
and while drawing a few things out in

162
00:05:49,199 --> 00:05:51,919
the browse console i've noticed a method

163
00:05:51,919 --> 00:05:53,039
called

164
00:05:53,039 --> 00:05:56,240
remote attachment url and didn't seem to

165
00:05:56,240 --> 00:05:56,560
be

166
00:05:56,560 --> 00:05:59,759
defined anywhere in gitlab

167
00:05:59,759 --> 00:06:02,400
it turns out that when you use the carry

168
00:06:02,400 --> 00:06:03,199
wave method

169
00:06:03,199 --> 00:06:05,759
mount uploader it creates a bunch of

170
00:06:05,759 --> 00:06:06,240
other

171
00:06:06,240 --> 00:06:09,199
helper methods as well this one allowed

172
00:06:09,199 --> 00:06:09,520
a

173
00:06:09,520 --> 00:06:12,560
url to be given and it would go

174
00:06:12,560 --> 00:06:14,880
download the url and attach it to the

175
00:06:14,880 --> 00:06:16,560
model as a file

176
00:06:16,560 --> 00:06:18,880
this wouldn't normally be an issue but

177
00:06:18,880 --> 00:06:19,759
due to how

178
00:06:19,759 --> 00:06:22,080
gitlab project imports work it's

179
00:06:22,080 --> 00:06:23,520
actually possible to

180
00:06:23,520 --> 00:06:26,560
modify that json of an export

181
00:06:26,560 --> 00:06:29,280
to get this property to be set which

182
00:06:29,280 --> 00:06:30,720
downloads the url and

183
00:06:30,720 --> 00:06:34,000
adds it to the note as an attachment

184
00:06:34,000 --> 00:06:36,400
since this fetch was done in the carrier

185
00:06:36,400 --> 00:06:37,199
wave gem

186
00:06:37,199 --> 00:06:39,440
it bypassed all of the server side

187
00:06:39,440 --> 00:06:41,440
request forgery protection that

188
00:06:41,440 --> 00:06:44,080
gitlab have in place and allowed

189
00:06:44,080 --> 00:06:45,680
internal services

190
00:06:45,680 --> 00:06:48,000
to be queried and have the output

191
00:06:48,000 --> 00:06:50,800
attached to the note

192
00:06:50,800 --> 00:06:52,639
i then came across a class called

193
00:06:52,639 --> 00:06:53,919
uploads rewriter

194
00:06:53,919 --> 00:06:56,720
which had a pretty handy comment at the

195
00:06:56,720 --> 00:06:57,440
top

196
00:06:57,440 --> 00:06:59,440
explaining that it was used to copy

197
00:06:59,440 --> 00:07:01,120
files to a new project

198
00:07:01,120 --> 00:07:03,919
and then rewrite all of the links to the

199
00:07:03,919 --> 00:07:05,360
new file

200
00:07:05,360 --> 00:07:07,360
and so this would be used when you move

201
00:07:07,360 --> 00:07:10,000
an issue from one project to another

202
00:07:10,000 --> 00:07:12,400
to also copy the files with that issue

203
00:07:12,400 --> 00:07:14,400
and change any of the links to point to

204
00:07:14,400 --> 00:07:16,639
the new location i started

205
00:07:16,639 --> 00:07:19,520
tracing through the class and first of

206
00:07:19,520 --> 00:07:21,360
all it checks whether anything actually

207
00:07:21,360 --> 00:07:25,199
needs to be rewritten does this by

208
00:07:25,199 --> 00:07:28,240
scanning through the issue text

209
00:07:28,240 --> 00:07:31,840
for the specific markdown pattern

210
00:07:31,840 --> 00:07:35,759
and if one's found it calls find file

211
00:07:35,759 --> 00:07:38,240
adds it to a list which is then filtered

212
00:07:38,240 --> 00:07:38,880
to remove

213
00:07:38,880 --> 00:07:42,080
any files that don't exist

214
00:07:42,080 --> 00:07:45,680
the find file method takes a project

215
00:07:45,680 --> 00:07:48,639
uh secret and a file name and uses them

216
00:07:48,639 --> 00:07:49,840
to create a new

217
00:07:49,840 --> 00:07:53,199
file uploader and then calls retrieve

218
00:07:53,199 --> 00:07:54,479
from store method

219
00:07:54,479 --> 00:07:56,479
to fetch the file and populate the

220
00:07:56,479 --> 00:07:58,000
uploader

221
00:07:58,000 --> 00:08:00,319
which allows for other operations like

222
00:08:00,319 --> 00:08:02,639
read and copy and move to be performed

223
00:08:02,639 --> 00:08:04,160
on it

224
00:08:04,160 --> 00:08:05,840
so if there are any files that need to

225
00:08:05,840 --> 00:08:08,240
be written it does a similar thing but

226
00:08:08,240 --> 00:08:09,199
using

227
00:08:09,199 --> 00:08:12,879
g sub this time to match and replace the

228
00:08:12,879 --> 00:08:15,360
markdown pattern

229
00:08:15,360 --> 00:08:18,879
the find file and exist checks are done

230
00:08:18,879 --> 00:08:21,919
again and if this passes the

231
00:08:21,919 --> 00:08:24,960
files copied to the new parent and it

232
00:08:24,960 --> 00:08:26,240
replaces the link

233
00:08:26,240 --> 00:08:29,280
with the new one

234
00:08:29,680 --> 00:08:31,759
showing the steps of the find file

235
00:08:31,759 --> 00:08:34,159
method in the rails console

236
00:08:34,159 --> 00:08:36,240
and found out that if the retrieve from

237
00:08:36,240 --> 00:08:38,080
store method is passed a

238
00:08:38,080 --> 00:08:40,640
path with a directory traversal in it

239
00:08:40,640 --> 00:08:42,000
and it still resolves and

240
00:08:42,000 --> 00:08:45,120
attaches the arbitrary file

241
00:08:45,120 --> 00:08:46,959
going back and looking at the markdown

242
00:08:46,959 --> 00:08:48,640
pattern you can see that

243
00:08:48,640 --> 00:08:50,959
secret has to be valid but there's no

244
00:08:50,959 --> 00:08:52,640
restriction on what the

245
00:08:52,640 --> 00:08:55,200
file name can be it'll just be whatever

246
00:08:55,200 --> 00:08:58,880
is left over before the final bracket

247
00:08:58,880 --> 00:09:00,720
this led to the following markdown

248
00:09:00,720 --> 00:09:02,959
snippet if you create an issue with this

249
00:09:02,959 --> 00:09:04,000
markdown link

250
00:09:04,000 --> 00:09:06,399
then move the issue to another project

251
00:09:06,399 --> 00:09:07,120
it would go

252
00:09:07,120 --> 00:09:10,080
and copy pdc password and attach it to

253
00:09:10,080 --> 00:09:12,000
the new project

254
00:09:12,000 --> 00:09:14,560
this was already a pretty critical issue

255
00:09:14,560 --> 00:09:15,440
i

256
00:09:15,440 --> 00:09:17,080
first confirmed that it affected

257
00:09:17,080 --> 00:09:21,040
gitlab.com and then quickly reported it

258
00:09:21,040 --> 00:09:22,800
after that i started looking to see if

259
00:09:22,800 --> 00:09:24,160
it was possible to

260
00:09:24,160 --> 00:09:27,839
leverage this arbitrary read any further

261
00:09:27,839 --> 00:09:29,839
i'd previously run brakeman over the

262
00:09:29,839 --> 00:09:31,279
codebase which is a

263
00:09:31,279 --> 00:09:34,080
static security scanner and one of the

264
00:09:34,080 --> 00:09:36,000
things it reported was that gitlab

265
00:09:36,000 --> 00:09:40,080
were using the hybrid cookie strategy

266
00:09:40,080 --> 00:09:41,920
and mentioned that that could lead to

267
00:09:41,920 --> 00:09:44,720
remote code execution

268
00:09:44,720 --> 00:09:46,800
the rails used to use marshall to

269
00:09:46,800 --> 00:09:49,040
serialize ruby objects

270
00:09:49,040 --> 00:09:52,240
or signed and encrypted cookies but

271
00:09:52,240 --> 00:09:53,040
since

272
00:09:53,040 --> 00:09:56,080
has moved to adjacent strategy instead

273
00:09:56,080 --> 00:09:58,959
the hybrid strategy was added as a sort

274
00:09:58,959 --> 00:10:00,959
of migration path so that it would take

275
00:10:00,959 --> 00:10:01,440
the

276
00:10:01,440 --> 00:10:04,480
old marshalled cookies um read them and

277
00:10:04,480 --> 00:10:07,600
then convert them to jason

278
00:10:07,600 --> 00:10:09,839
quick search found that gitlab were

279
00:10:09,839 --> 00:10:11,120
using a

280
00:10:11,120 --> 00:10:13,279
signed cookie to store the

281
00:10:13,279 --> 00:10:14,399
experimentation

282
00:10:14,399 --> 00:10:17,440
id of a user it was checked on most

283
00:10:17,440 --> 00:10:19,440
endpoints

284
00:10:19,440 --> 00:10:21,760
deserialization of untrusted data into

285
00:10:21,760 --> 00:10:22,880
ruby objects is

286
00:10:22,880 --> 00:10:24,800
pretty dangerous especially with a large

287
00:10:24,800 --> 00:10:26,560
code base like rails where there's lots

288
00:10:26,560 --> 00:10:28,320
of gadgets available

289
00:10:28,320 --> 00:10:30,000
and there's quite a few guides on how to

290
00:10:30,000 --> 00:10:31,440
achieve code execution

291
00:10:31,440 --> 00:10:34,880
using something like this to prevent

292
00:10:34,880 --> 00:10:37,760
untrusted data rails signs the cookies

293
00:10:37,760 --> 00:10:39,760
with a value from

294
00:10:39,760 --> 00:10:42,399
a secret key base so that way i can tell

295
00:10:42,399 --> 00:10:44,160
if the data has been tampered with and

296
00:10:44,160 --> 00:10:47,440
throw it away if it has so combining all

297
00:10:47,440 --> 00:10:48,079
of this

298
00:10:48,079 --> 00:10:50,399
we can use the arbitrary file read to

299
00:10:50,399 --> 00:10:53,040
leak the secret key base

300
00:10:53,040 --> 00:10:54,720
and we can then use it to sign a

301
00:10:54,720 --> 00:10:56,560
malicious ruby object

302
00:10:56,560 --> 00:10:58,640
and then send it to rails via the

303
00:10:58,640 --> 00:11:01,600
experimentation subject id cookie

304
00:11:01,600 --> 00:11:04,000
which will then be deserialized by

305
00:11:04,000 --> 00:11:05,680
marshall due to the hybrid

306
00:11:05,680 --> 00:11:08,560
cookie strategy causing our payload to

307
00:11:08,560 --> 00:11:11,120
be executed

308
00:11:11,120 --> 00:11:13,360
so that's been my bug bounty journey and

309
00:11:13,360 --> 00:11:15,440
a bit of a look at what my process is

310
00:11:15,440 --> 00:11:16,320
like

311
00:11:16,320 --> 00:11:18,240
i'll just leave you with a few things

312
00:11:18,240 --> 00:11:20,959
that have really helped me along the way

313
00:11:20,959 --> 00:11:23,360
and try to read as many disclosure

314
00:11:23,360 --> 00:11:24,160
reports and

315
00:11:24,160 --> 00:11:26,480
write ups as you can even if it's

316
00:11:26,480 --> 00:11:28,720
something that you know already or

317
00:11:28,720 --> 00:11:30,480
pretty familiar with there's often like

318
00:11:30,480 --> 00:11:32,640
a small little technique or trick that

319
00:11:32,640 --> 00:11:35,279
could be helpful in the future

320
00:11:35,279 --> 00:11:37,200
if you work on a program that has patch

321
00:11:37,200 --> 00:11:39,600
notes make sure to go through them

322
00:11:39,600 --> 00:11:41,279
and see what the most recent issues have

323
00:11:41,279 --> 00:11:42,800
been

324
00:11:42,800 --> 00:11:44,560
you can look at the commit logs if they

325
00:11:44,560 --> 00:11:46,800
have them or do some patch analysis

326
00:11:46,800 --> 00:11:50,320
to discover what the original issue was

327
00:11:50,320 --> 00:11:52,480
and finally i think it's pretty hard to

328
00:11:52,480 --> 00:11:55,200
fix an entire class of vulnerabilities

329
00:11:55,200 --> 00:11:56,880
with a single patch

330
00:11:56,880 --> 00:11:58,639
so if there's a particular type of bug

331
00:11:58,639 --> 00:12:00,880
that was fixed it's quite possibly

332
00:12:00,880 --> 00:12:11,839
that there are a few more hiding away

333
00:12:14,320 --> 00:12:16,399
you

