1
00:00:01,150 --> 00:00:05,839
[Music]

2
00:00:05,839 --> 00:00:07,680
hello everybody and welcome to my talk

3
00:00:07,680 --> 00:00:09,280
on tv 2020

4
00:00:09,280 --> 00:00:11,920
leaked nine uh just to give you a little

5
00:00:11,920 --> 00:00:13,440
bit of a road map of where we're going

6
00:00:13,440 --> 00:00:14,480
with this talk

7
00:00:14,480 --> 00:00:16,079
we've got at first a short introduction

8
00:00:16,079 --> 00:00:19,279
to who i am uh and what the cd is about

9
00:00:19,279 --> 00:00:21,279
the discovery exploitation and then bug

10
00:00:21,279 --> 00:00:23,039
bounty interactions uh regarding this

11
00:00:23,039 --> 00:00:24,640
specific vulnerability

12
00:00:24,640 --> 00:00:27,519
so let's get started my name is justin

13
00:00:27,519 --> 00:00:28,000
gardner

14
00:00:28,000 --> 00:00:29,840
also known as rhino raider i'm a

15
00:00:29,840 --> 00:00:31,840
full-time bug bounty hunter on

16
00:00:31,840 --> 00:00:34,399
hacker one in bub crowd mostly i was

17
00:00:34,399 --> 00:00:35,120
previously

18
00:00:35,120 --> 00:00:37,440
a penetration tester for cinecom and my

19
00:00:37,440 --> 00:00:39,280
focus within security is on

20
00:00:39,280 --> 00:00:41,680
web apps automated recon and zero day

21
00:00:41,680 --> 00:00:42,800
hunting

22
00:00:42,800 --> 00:00:45,520
i'm currently living in yokohama japan

23
00:00:45,520 --> 00:00:47,360
with my wife mariah

24
00:00:47,360 --> 00:00:50,719
um about the vulner cv 2020 elite 9 as i

25
00:00:50,719 --> 00:00:52,000
like to call it

26
00:00:52,000 --> 00:00:55,440
this is a fully unauthored grafana

27
00:00:55,440 --> 00:00:58,320
full read ssrf um affecting grafana

28
00:00:58,320 --> 00:01:00,160
versions 3.0.1

29
00:01:00,160 --> 00:01:04,319
to 7 and it occurred because of

30
00:01:04,319 --> 00:01:06,960
some url parameter smuggling and an open

31
00:01:06,960 --> 00:01:09,040
redirect chain

32
00:01:09,040 --> 00:01:11,280
so let's let's get started into the

33
00:01:11,280 --> 00:01:13,360
discovery

34
00:01:13,360 --> 00:01:15,439
um so before we go deep into the

35
00:01:15,439 --> 00:01:16,880
discovery i wanted to talk a little bit

36
00:01:16,880 --> 00:01:18,240
about my methodology

37
00:01:18,240 --> 00:01:21,119
approaching open source uh source code

38
00:01:21,119 --> 00:01:21,920
analysis

39
00:01:21,920 --> 00:01:24,400
this is not like a super well fleshed

40
00:01:24,400 --> 00:01:24,960
out

41
00:01:24,960 --> 00:01:27,200
methodology it's more like a base for

42
00:01:27,200 --> 00:01:28,560
anyone who wants to get

43
00:01:28,560 --> 00:01:30,799
started to base off of or maybe

44
00:01:30,799 --> 00:01:32,479
something for more seasoned

45
00:01:32,479 --> 00:01:34,960
uh source code analysis people to

46
00:01:34,960 --> 00:01:37,680
integrate into their own methodology

47
00:01:37,680 --> 00:01:39,439
so the first thing i like to do when i'm

48
00:01:39,439 --> 00:01:41,119
approaching a code base is define

49
00:01:41,119 --> 00:01:42,560
whether i'm looking for

50
00:01:42,560 --> 00:01:44,960
unoff vulnerability specifically or both

51
00:01:44,960 --> 00:01:46,560
in the scope of bug bounty

52
00:01:46,560 --> 00:01:47,840
a lot of times you're looking for

53
00:01:47,840 --> 00:01:49,280
unauthored vulnerabilities because

54
00:01:49,280 --> 00:01:49,920
that's going to

55
00:01:49,920 --> 00:01:53,040
increase the impact the most

56
00:01:53,040 --> 00:01:56,159
and so uh i like to get that in my head

57
00:01:56,159 --> 00:01:58,320
and from there i like to enumerate the

58
00:01:58,320 --> 00:02:00,719
attack surface with specific

59
00:02:00,719 --> 00:02:04,000
pertaining to on off vulnerabilities so

60
00:02:04,000 --> 00:02:06,479
uh i start with open ports that this

61
00:02:06,479 --> 00:02:08,878
specific application would expose

62
00:02:08,878 --> 00:02:10,720
i break it down into the app segment so

63
00:02:10,720 --> 00:02:11,920
looking at like

64
00:02:11,920 --> 00:02:14,080
where the reverse proxies are happening

65
00:02:14,080 --> 00:02:15,599
and where those reverse proxies are

66
00:02:15,599 --> 00:02:17,200
pointing back to internal

67
00:02:17,200 --> 00:02:20,239
apis figuring out what kind

68
00:02:20,239 --> 00:02:22,640
where the source code is for that api

69
00:02:22,640 --> 00:02:24,720
and uh just kind of getting a good

70
00:02:24,720 --> 00:02:26,400
a good bearing on where we're at and

71
00:02:26,400 --> 00:02:28,959
then diving down further into the routes

72
00:02:28,959 --> 00:02:30,640
uh specifically focusing on the

73
00:02:30,640 --> 00:02:32,640
unauthenticated routes now

74
00:02:32,640 --> 00:02:33,760
if you hit a dead end on the

75
00:02:33,760 --> 00:02:35,360
unauthenticated routes can't find

76
00:02:35,360 --> 00:02:36,160
anything

77
00:02:36,160 --> 00:02:37,680
that's when i would move towards the

78
00:02:37,680 --> 00:02:39,280
authenticated routes and see if i can

79
00:02:39,280 --> 00:02:40,080
make anything

80
00:02:40,080 --> 00:02:43,200
authenticated unauthenticated but first

81
00:02:43,200 --> 00:02:46,400
i like to focus on on auth routes

82
00:02:46,400 --> 00:02:48,080
so at that point then you're just mostly

83
00:02:48,080 --> 00:02:50,000
looking at the code tracing user

84
00:02:50,000 --> 00:02:51,519
input where it goes throughout the

85
00:02:51,519 --> 00:02:53,519
application and then doing what i like

86
00:02:53,519 --> 00:02:55,040
to call sniffing for blood

87
00:02:55,040 --> 00:02:57,200
which is looking for areas in the

88
00:02:57,200 --> 00:02:58,800
application that look particularly

89
00:02:58,800 --> 00:03:00,159
sketchy

90
00:03:00,159 --> 00:03:01,840
for example on the right hand side here

91
00:03:01,840 --> 00:03:04,239
we see the first two

92
00:03:04,239 --> 00:03:07,040
juicy looking albeit uh routes in

93
00:03:07,040 --> 00:03:07,680
grafana

94
00:03:07,680 --> 00:03:10,400
source code both require sign in and

95
00:03:10,400 --> 00:03:11,920
then the avatar service which is what

96
00:03:11,920 --> 00:03:13,280
we'll be exploring later

97
00:03:13,280 --> 00:03:15,920
does not require sign in later in that

98
00:03:15,920 --> 00:03:16,720
code base

99
00:03:16,720 --> 00:03:19,920
you'll see some some code that

100
00:03:19,920 --> 00:03:22,800
should give you a little bit of a sniff

101
00:03:22,800 --> 00:03:23,760
of

102
00:03:23,760 --> 00:03:26,000
of blood there so but we'll we'll jump

103
00:03:26,000 --> 00:03:28,319
into that in just a second

104
00:03:28,319 --> 00:03:30,480
um so before we dive into like the deep

105
00:03:30,480 --> 00:03:32,640
details of the bug uh we've got

106
00:03:32,640 --> 00:03:34,239
i set up these docker commands really

107
00:03:34,239 --> 00:03:36,080
easy for you to spin up your own

108
00:03:36,080 --> 00:03:38,400
instance of grafana on your own machine

109
00:03:38,400 --> 00:03:41,680
um this will allow you to uh

110
00:03:41,680 --> 00:03:43,280
get a vulnerable version and kind of

111
00:03:43,280 --> 00:03:47,040
follow along as we're exploiting

112
00:03:47,040 --> 00:03:48,640
so yeah put that paste bin underneath

113
00:03:48,640 --> 00:03:50,720
there in your in your browser and you'll

114
00:03:50,720 --> 00:03:51,920
have the commands underneath there

115
00:03:51,920 --> 00:03:53,360
that's uh

116
00:03:53,360 --> 00:03:56,640
capital b capital c m c e

117
00:03:56,640 --> 00:04:00,239
18 j all right hopefully you're quick

118
00:04:00,239 --> 00:04:01,519
typers

119
00:04:01,519 --> 00:04:04,959
let's get started so uh identifying the

120
00:04:04,959 --> 00:04:05,439
volume

121
00:04:05,439 --> 00:04:07,840
so obviously i'm looking at the grafana

122
00:04:07,840 --> 00:04:08,879
source code here

123
00:04:08,879 --> 00:04:11,920
um this is easily available on github

124
00:04:11,920 --> 00:04:13,360
it looks like my camera sort of cut it

125
00:04:13,360 --> 00:04:14,799
off a little bit there but it's going to

126
00:04:14,799 --> 00:04:17,839
be github.com

127
00:04:17,839 --> 00:04:19,839
and in the p spin i also put a link to a

128
00:04:19,839 --> 00:04:21,279
specific commit hash well i

129
00:04:21,279 --> 00:04:22,320
which will allow you to look at the

130
00:04:22,320 --> 00:04:24,639
unpatched code since this has since been

131
00:04:24,639 --> 00:04:26,840
patched on more recent versions of

132
00:04:26,840 --> 00:04:28,479
grafana so

133
00:04:28,479 --> 00:04:30,560
looking at the api we were going i was

134
00:04:30,560 --> 00:04:31,919
going through all of these different

135
00:04:31,919 --> 00:04:33,120
individual routes

136
00:04:33,120 --> 00:04:34,639
and one of the things that caught my eye

137
00:04:34,639 --> 00:04:37,360
is slash avatar

138
00:04:37,360 --> 00:04:38,880
this caught my eye specifically because

139
00:04:38,880 --> 00:04:40,639
it has cache server in it and there's a

140
00:04:40,639 --> 00:04:42,000
lot of funky stuff that happens with

141
00:04:42,000 --> 00:04:42,800
caching

142
00:04:42,800 --> 00:04:44,639
so i figured i'd take a look at this so

143
00:04:44,639 --> 00:04:46,240
i started looking for where

144
00:04:46,240 --> 00:04:49,919
avatar cache server dot handler

145
00:04:49,919 --> 00:04:52,880
was in the code so we're sniffing around

146
00:04:52,880 --> 00:04:53,840
trying to find anything that looks

147
00:04:53,840 --> 00:04:56,320
sketchy looking at the handler

148
00:04:56,320 --> 00:04:58,400
function we can see that it takes the

149
00:04:58,400 --> 00:04:59,840
hash from the user path

150
00:04:59,840 --> 00:05:02,240
so it takes that extracts that out of

151
00:05:02,240 --> 00:05:03,039
the path

152
00:05:03,039 --> 00:05:05,360
checks to see if that is in the hash or

153
00:05:05,360 --> 00:05:08,080
in the cache on line 81

154
00:05:08,080 --> 00:05:10,320
and then if it isn't in the cache it go

155
00:05:10,320 --> 00:05:12,160
ahead and fetches it on

156
00:05:12,160 --> 00:05:15,160
excuse me online 90 with the

157
00:05:15,160 --> 00:05:17,039
avatar.update function

158
00:05:17,039 --> 00:05:19,039
so let's go look at the avatar.update

159
00:05:19,039 --> 00:05:21,680
function avatar to update then

160
00:05:21,680 --> 00:05:24,000
takes that hash that we passed in via

161
00:05:24,000 --> 00:05:25,199
the url

162
00:05:25,199 --> 00:05:27,360
concatenates it with a constant gravatar

163
00:05:27,360 --> 00:05:29,440
source which is secure.gravatar.com

164
00:05:29,440 --> 00:05:32,400
avatar and then passes it to a function

165
00:05:32,400 --> 00:05:33,600
called go fetch

166
00:05:33,600 --> 00:05:36,720
so now your hacker bells should be

167
00:05:36,720 --> 00:05:39,520
going off in your head saying

168
00:05:39,520 --> 00:05:41,600
unauthenticated taking user input

169
00:05:41,600 --> 00:05:43,759
concatenating it with a server-side http

170
00:05:43,759 --> 00:05:44,400
request

171
00:05:44,400 --> 00:05:47,840
this has got everything uh we would need

172
00:05:47,840 --> 00:05:49,360
for a really awesome unauthenticated

173
00:05:49,360 --> 00:05:50,639
ssrf

174
00:05:50,639 --> 00:05:52,800
so at this point i'm pretty excited i'm

175
00:05:52,800 --> 00:05:54,479
buckling my seatbelt i'm getting ready

176
00:05:54,479 --> 00:05:55,600
to do some deep

177
00:05:55,600 --> 00:05:58,160
uh some deep deep diving into this into

178
00:05:58,160 --> 00:05:59,759
this code

179
00:05:59,759 --> 00:06:02,240
so just the the fetch function gofetch

180
00:06:02,240 --> 00:06:04,000
ends calling fetch and then here's where

181
00:06:04,000 --> 00:06:05,680
it ends up where it uses

182
00:06:05,680 --> 00:06:09,280
goes http library to make a request to

183
00:06:09,280 --> 00:06:12,800
the gravatar source great

184
00:06:12,800 --> 00:06:15,759
so uh let's break down exactly how we

185
00:06:15,759 --> 00:06:17,280
ended up exploiting this

186
00:06:17,280 --> 00:06:20,160
so for so for this full diagram i i've

187
00:06:20,160 --> 00:06:21,600
created a little bit of a step-by-step

188
00:06:21,600 --> 00:06:22,880
diagram so we're going to go through

189
00:06:22,880 --> 00:06:24,400
this here

190
00:06:24,400 --> 00:06:25,600
so the attacker sends the

191
00:06:25,600 --> 00:06:27,360
unauthenticated request to gravatar for

192
00:06:27,360 --> 00:06:28,639
slash avatar

193
00:06:28,639 --> 00:06:31,520
test on the back end it takes extracts

194
00:06:31,520 --> 00:06:32,560
the hash in this

195
00:06:32,560 --> 00:06:35,919
scenario test it assumes that the hash

196
00:06:35,919 --> 00:06:37,039
is the last

197
00:06:37,039 --> 00:06:40,160
line on the on the path and sends that

198
00:06:40,160 --> 00:06:41,840
to secure.gravatar

199
00:06:41,840 --> 00:06:45,520
under slash avatar test right here

200
00:06:45,520 --> 00:06:48,880
um so and then since test does not exist

201
00:06:48,880 --> 00:06:50,560
as a hashing gravatar it returns back a

202
00:06:50,560 --> 00:06:51,599
generic image

203
00:06:51,599 --> 00:06:54,240
and the generic image goes back to us

204
00:06:54,240 --> 00:06:56,000
not as interesting as it could be

205
00:06:56,000 --> 00:06:58,800
so um but you know it's it's a good

206
00:06:58,800 --> 00:06:59,280
start

207
00:06:59,280 --> 00:07:01,280
so you know what we're seeing is we're

208
00:07:01,280 --> 00:07:02,560
seeing user input being taken and

209
00:07:02,560 --> 00:07:04,560
concatenated with an http request on the

210
00:07:04,560 --> 00:07:05,840
server side

211
00:07:05,840 --> 00:07:08,160
awesome so first things that should go

212
00:07:08,160 --> 00:07:09,919
off in your head as an attacker is

213
00:07:09,919 --> 00:07:12,960
patch reversal and then um you know

214
00:07:12,960 --> 00:07:14,240
being able to traverse back

215
00:07:14,240 --> 00:07:16,400
up above avatar and be able to access

216
00:07:16,400 --> 00:07:18,560
something beyond that

217
00:07:18,560 --> 00:07:22,800
and then also url uh parameter injection

218
00:07:22,800 --> 00:07:25,120
um and i'll show you which one of those

219
00:07:25,120 --> 00:07:27,360
i use in just a second

220
00:07:27,360 --> 00:07:30,240
so uh going back so and then you know

221
00:07:30,240 --> 00:07:31,599
the whole point of this also would be

222
00:07:31,599 --> 00:07:32,560
just to be clear

223
00:07:32,560 --> 00:07:34,319
is to find an open redirect somewhere in

224
00:07:34,319 --> 00:07:35,680
here that allows us to

225
00:07:35,680 --> 00:07:38,400
point this server-side http request

226
00:07:38,400 --> 00:07:40,000
wherever we want

227
00:07:40,000 --> 00:07:43,360
and that will result in a a blind ssrf

228
00:07:43,360 --> 00:07:44,160
at least

229
00:07:44,160 --> 00:07:48,800
uh depending on the code a uh a full ssr

230
00:07:50,160 --> 00:07:52,560
excuse me so let's uh let's see what

231
00:07:52,560 --> 00:07:53,199
happens here

232
00:07:53,199 --> 00:07:54,879
so going back to the code this is the

233
00:07:54,879 --> 00:07:56,080
vulnerable piece right here where it

234
00:07:56,080 --> 00:07:57,199
takes the hash

235
00:07:57,199 --> 00:07:59,360
and so using this i start looking around

236
00:07:59,360 --> 00:08:01,680
for uh open redirects

237
00:08:01,680 --> 00:08:04,639
well so i throw secure.gravatory.com

238
00:08:04,639 --> 00:08:05,440
into gao

239
00:08:05,440 --> 00:08:08,960
an awesome tool by uh by corbin and

240
00:08:08,960 --> 00:08:10,800
i start seeing this d perimeter all over

241
00:08:10,800 --> 00:08:13,120
the place which a lot of you

242
00:08:13,120 --> 00:08:14,879
got to when trying to reverse it so good

243
00:08:14,879 --> 00:08:17,039
job

244
00:08:17,039 --> 00:08:18,720
so what is that so we look at the

245
00:08:18,720 --> 00:08:20,560
gravatar

246
00:08:20,560 --> 00:08:22,240
the gravatar documentation and we can

247
00:08:22,240 --> 00:08:23,759
see that d stands for the default

248
00:08:23,759 --> 00:08:25,280
parameter

249
00:08:25,280 --> 00:08:27,520
and that allows you to supply a default

250
00:08:27,520 --> 00:08:28,400
image

251
00:08:28,400 --> 00:08:30,560
that should be should be displayed in

252
00:08:30,560 --> 00:08:31,599
the case that

253
00:08:31,599 --> 00:08:34,159
uh the hash that's provided to gravatar

254
00:08:34,159 --> 00:08:34,958
is invalid

255
00:08:34,958 --> 00:08:38,559
so that's cool so uh let's see if we can

256
00:08:38,559 --> 00:08:40,159
try to smuggle in the d parameter to

257
00:08:40,159 --> 00:08:40,958
this request

258
00:08:40,958 --> 00:08:43,120
oh and then you know before i did that i

259
00:08:43,120 --> 00:08:44,080
was poking around

260
00:08:44,080 --> 00:08:45,000
and you can see right here

261
00:08:45,000 --> 00:08:47,120
secure.gravitar.com avatar

262
00:08:47,120 --> 00:08:49,519
bad so that's an invalid hash slash d

263
00:08:49,519 --> 00:08:51,680
anything here

264
00:08:51,680 --> 00:08:55,279
redirects to i0

265
00:08:55,279 --> 00:08:56,800
anything here so we just widened our

266
00:08:56,800 --> 00:08:58,480
attack surface there now we are looking

267
00:08:58,480 --> 00:08:58,959
at

268
00:08:58,959 --> 00:09:00,720
more attack surface than we were before

269
00:09:00,720 --> 00:09:04,080
which is awesome that should excite you

270
00:09:04,080 --> 00:09:06,959
so looking at this uh we've got let me

271
00:09:06,959 --> 00:09:07,440
just

272
00:09:07,440 --> 00:09:10,640
get my my timer here working um we've

273
00:09:10,640 --> 00:09:11,279
got

274
00:09:11,279 --> 00:09:14,240
the full the full flow here uh so we are

275
00:09:14,240 --> 00:09:15,920
able to smuggle in these parameters

276
00:09:15,920 --> 00:09:17,760
right here you can see the percent 3f

277
00:09:17,760 --> 00:09:19,360
and then the percent 3d

278
00:09:19,360 --> 00:09:21,519
those uh decode to a question mark and

279
00:09:21,519 --> 00:09:23,440
an equal sign respectively

280
00:09:23,440 --> 00:09:25,120
that is able to be successfully smuggled

281
00:09:25,120 --> 00:09:26,640
into the backend request which then

282
00:09:26,640 --> 00:09:27,600
redirects

283
00:09:27,600 --> 00:09:31,440
to um wp.com test

284
00:09:31,440 --> 00:09:32,959
so you can see the back end request over

285
00:09:32,959 --> 00:09:35,040
here in this little area um

286
00:09:35,040 --> 00:09:36,800
so great so we are we're expanding our

287
00:09:36,800 --> 00:09:37,839
attack surface we're getting a little

288
00:09:37,839 --> 00:09:40,080
further here

289
00:09:40,080 --> 00:09:42,480
um so here's the here's the image with

290
00:09:42,480 --> 00:09:44,240
going to wp.com

291
00:09:44,240 --> 00:09:46,000
returning a bad request and then we get

292
00:09:46,000 --> 00:09:48,959
the response back as the attacker

293
00:09:48,959 --> 00:09:52,320
so what do we do we run gow again on

294
00:09:52,320 --> 00:09:55,680
on this izer.wp.com

295
00:09:55,680 --> 00:09:57,680
and while we're kind of messing around

296
00:09:57,680 --> 00:09:59,200
with the results of that we come across

297
00:09:59,200 --> 00:10:00,040
this

298
00:10:00,040 --> 00:10:03,360
bezos.jp jpg file

299
00:10:03,360 --> 00:10:07,839
and this file is located under

300
00:10:08,040 --> 00:10:10,160
wordpress.com1.bp.blogspot.com

301
00:10:10,160 --> 00:10:12,160
and this does something a little funky

302
00:10:12,160 --> 00:10:14,000
it seems like wordpress wanted to

303
00:10:14,000 --> 00:10:14,800
offload

304
00:10:14,800 --> 00:10:18,560
the load of any images coming from block

305
00:10:18,560 --> 00:10:19,279
spot to

306
00:10:19,279 --> 00:10:21,120
block spot itself so what it does is

307
00:10:21,120 --> 00:10:23,279
just issues a redirect to block spot

308
00:10:23,279 --> 00:10:24,800
under that specific

309
00:10:24,800 --> 00:10:27,519
uh path and uh we get this lovely

310
00:10:27,519 --> 00:10:29,360
picture of a laughing bezos but

311
00:10:29,360 --> 00:10:32,000
we get a extended attack surface so i

312
00:10:32,000 --> 00:10:32,399
didn't

313
00:10:32,399 --> 00:10:33,839
pull i don't think i put it in a slide

314
00:10:33,839 --> 00:10:35,839
anywhere but um you can delete anything

315
00:10:35,839 --> 00:10:38,640
after dot com and it will still redirect

316
00:10:38,640 --> 00:10:39,519
to one of up

317
00:10:39,519 --> 00:10:41,040
lockspot.com so now we've expanded our

318
00:10:41,040 --> 00:10:44,399
attack surface to one.bp.blogspot.com

319
00:10:44,399 --> 00:10:46,560
so what do we do then well we go and

320
00:10:46,560 --> 00:10:48,200
look for an open redirect on

321
00:10:48,200 --> 00:10:49,360
onewp.blogspot.com

322
00:10:49,360 --> 00:10:52,800
but we don't find anything um

323
00:10:52,800 --> 00:10:55,920
so uh that that kind of sucks

324
00:10:55,920 --> 00:10:58,240
uh so i'm kind of sitting back i'm

325
00:10:58,240 --> 00:10:59,360
thinking you know what

326
00:10:59,360 --> 00:11:02,000
what am i what should i do right now um

327
00:11:02,000 --> 00:11:04,240
i can only get to bp.lifestyle.com and

328
00:11:04,240 --> 00:11:06,720
that doesn't really help us a lot

329
00:11:06,720 --> 00:11:09,519
so then i go back and i start looking at

330
00:11:09,519 --> 00:11:10,000
the

331
00:11:10,000 --> 00:11:14,079
uh the i dot zero.wp.com

332
00:11:14,079 --> 00:11:16,920
again and looking at this this

333
00:11:16,920 --> 00:11:18,720
1.bp.blogspot.com and this is the part

334
00:11:18,720 --> 00:11:20,560
that tricked up a lot of you guys

335
00:11:20,560 --> 00:11:23,920
um so get ready for it it's coming and

336
00:11:23,920 --> 00:11:25,600
you know trying to fiddle around with it

337
00:11:25,600 --> 00:11:27,040
a little bit the

338
00:11:27,040 --> 00:11:28,680
we can do any subdomain under

339
00:11:28,680 --> 00:11:30,640
bp.blogspot.com so i was playing around

340
00:11:30,640 --> 00:11:31,839
with that a little bit

341
00:11:31,839 --> 00:11:34,399
and then what what happened was i ended

342
00:11:34,399 --> 00:11:35,519
up issuing

343
00:11:35,519 --> 00:11:38,399
a request with a url encoded special

344
00:11:38,399 --> 00:11:39,360
character

345
00:11:39,360 --> 00:11:41,440
in their request a question mark which

346
00:11:41,440 --> 00:11:42,640
broke the red jacks

347
00:11:42,640 --> 00:11:45,600
and allowed us to get to any host that

348
00:11:45,600 --> 00:11:46,240
we

349
00:11:46,240 --> 00:11:47,760
that we needed to supply that was the

350
00:11:47,760 --> 00:11:49,680
open redirect that we needed so then i

351
00:11:49,680 --> 00:11:51,760
started

352
00:11:51,760 --> 00:11:54,639
dancing like oscar and i ran downstairs

353
00:11:54,639 --> 00:11:56,320
and fell down the stairs and told mariah

354
00:11:56,320 --> 00:11:57,600
about it and i was looking like this guy

355
00:11:57,600 --> 00:11:58,560
right here

356
00:11:58,560 --> 00:12:01,600
and uh i was i was super excited

357
00:12:01,600 --> 00:12:04,880
so after the uh after the excitement i

358
00:12:04,880 --> 00:12:05,360
can i

359
00:12:05,360 --> 00:12:07,519
still got it in my chest after the

360
00:12:07,519 --> 00:12:09,920
excitement of that wore off i was able

361
00:12:09,920 --> 00:12:11,440
to

362
00:12:11,440 --> 00:12:15,360
um go back and look at the

363
00:12:15,360 --> 00:12:17,839
original full chain um and put

364
00:12:17,839 --> 00:12:18,959
everything together

365
00:12:18,959 --> 00:12:21,760
to craft the full response srf which was

366
00:12:21,760 --> 00:12:23,360
lit

367
00:12:23,360 --> 00:12:27,360
um so uh here's the final the final full

368
00:12:27,360 --> 00:12:28,959
flow the attacker sends the request to

369
00:12:28,959 --> 00:12:30,240
grifana with the

370
00:12:30,240 --> 00:12:33,279
uh url encoded parameters that results

371
00:12:33,279 --> 00:12:34,959
in the vulnerafana instance

372
00:12:34,959 --> 00:12:37,920
issuing the following uh backend request

373
00:12:37,920 --> 00:12:40,360
which will redirect to

374
00:12:40,360 --> 00:12:42,160
redirect.rhinoradio.com we've got some

375
00:12:42,160 --> 00:12:44,320
fancy url encoded special characters in

376
00:12:44,320 --> 00:12:44,880
there

377
00:12:44,880 --> 00:12:47,920
our special string 1.bp.blogspot.com

378
00:12:47,920 --> 00:12:50,079
and then our super nice juicy target of

379
00:12:50,079 --> 00:12:51,600
169

380
00:12:51,600 --> 00:12:55,120
169 254 uh that gets redirected from

381
00:12:55,120 --> 00:12:56,079
gravatar

382
00:12:56,079 --> 00:12:59,200
to wordpress to my attacker controlled

383
00:12:59,200 --> 00:13:01,200
server redirect.renerator.com

384
00:13:01,200 --> 00:13:02,639
where i've hosted a little bit of an

385
00:13:02,639 --> 00:13:04,000
exploit kit for this which we'll talk

386
00:13:04,000 --> 00:13:04,839
about

387
00:13:04,839 --> 00:13:08,399
later um and then finally redirects over

388
00:13:08,399 --> 00:13:10,639
to

389
00:13:10,920 --> 00:13:12,399
169.254.169.254

390
00:13:12,399 --> 00:13:15,680
grabs the juicy aws metadata that we all

391
00:13:15,680 --> 00:13:16,639
love to see

392
00:13:16,639 --> 00:13:18,800
and drops that back in the 200 uh

393
00:13:18,800 --> 00:13:20,480
response code

394
00:13:20,480 --> 00:13:24,160
so final exploit buckle your seat belts

395
00:13:24,160 --> 00:13:26,000
get ready to go

396
00:13:26,000 --> 00:13:29,279
boom there it is um we've got a lot of

397
00:13:29,279 --> 00:13:31,440
url encoded junk in there we got triple

398
00:13:31,440 --> 00:13:34,880
url encoding we got wrl encoding we got

399
00:13:34,880 --> 00:13:38,639
normal url encoding um

400
00:13:38,639 --> 00:13:40,880
but yeah get your screenshots ready guys

401
00:13:40,880 --> 00:13:41,760
because that's the

402
00:13:41,760 --> 00:13:44,639
that's the final final payload take it

403
00:13:44,639 --> 00:13:45,920
spray it across every

404
00:13:45,920 --> 00:13:47,519
every program let me know if you find

405
00:13:47,519 --> 00:13:49,360
anything because i thought we cleaned it

406
00:13:49,360 --> 00:13:50,639
up pretty good but

407
00:13:50,639 --> 00:13:53,760
i i could be wrong about that

408
00:13:53,760 --> 00:13:57,519
um all right so uh oh yes

409
00:13:57,519 --> 00:13:59,680
so i by the time this video airs there

410
00:13:59,680 --> 00:14:01,279
will be a blog post up

411
00:14:01,279 --> 00:14:05,680
on my blog rhinoradio.github.io

412
00:14:05,680 --> 00:14:08,160
um if it is not up right now which it

413
00:14:08,160 --> 00:14:08,800
should be

414
00:14:08,800 --> 00:14:11,680
if my cron tabs work properly then it

415
00:14:11,680 --> 00:14:12,959
will be up tomorrow

416
00:14:12,959 --> 00:14:14,480
this is likely airing in the middle of

417
00:14:14,480 --> 00:14:16,480
the night for me in japan

418
00:14:16,480 --> 00:14:18,880
so if i wake up and the blog post isn't

419
00:14:18,880 --> 00:14:20,639
there then i will

420
00:14:20,639 --> 00:14:23,760
release it as soon as i wake up

421
00:14:23,760 --> 00:14:27,920
um so yeah definitely check that out

422
00:14:27,920 --> 00:14:29,440
in that same blog post i will be

423
00:14:29,440 --> 00:14:31,600
releasing a uh

424
00:14:31,600 --> 00:14:33,519
a exploit kit for this specific

425
00:14:33,519 --> 00:14:35,519
vulnerability in some versions of

426
00:14:35,519 --> 00:14:38,320
grafana it seems

427
00:14:38,320 --> 00:14:39,600
there are some bad characters that

428
00:14:39,600 --> 00:14:41,680
you've got to deal with so i just

429
00:14:41,680 --> 00:14:43,680
coded up some little php code that

430
00:14:43,680 --> 00:14:46,000
allows us to

431
00:14:46,000 --> 00:14:49,600
exploit this properly and excuse me i'm

432
00:14:49,600 --> 00:14:50,880
trying to drink some water and it's

433
00:14:50,880 --> 00:14:52,880
making me burp um

434
00:14:52,880 --> 00:14:54,880
you'll see that we can actually let me

435
00:14:54,880 --> 00:14:55,839
go back really quick and look at this

436
00:14:55,839 --> 00:14:57,440
final exploit so

437
00:14:57,440 --> 00:15:00,000
uh right here the percent encoded slash

438
00:15:00,000 --> 00:15:01,120
2

439
00:15:01,120 --> 00:15:03,680
25 2f that that's where we put the

440
00:15:03,680 --> 00:15:05,199
target afterwards and this is because

441
00:15:05,199 --> 00:15:06,920
i've got some specific code on

442
00:15:06,920 --> 00:15:08,240
redirect.iran.com

443
00:15:08,240 --> 00:15:10,399
that is redirecting directly to anything

444
00:15:10,399 --> 00:15:11,279
that follows

445
00:15:11,279 --> 00:15:13,760
the bp.blogspot.com so that will allow

446
00:15:13,760 --> 00:15:15,360
you to just specify the path that you

447
00:15:15,360 --> 00:15:15,839
want

448
00:15:15,839 --> 00:15:17,839
in the actual exploit and you don't have

449
00:15:17,839 --> 00:15:19,839
to go modify anything on the server side

450
00:15:19,839 --> 00:15:22,160
each time you try to exploit it

451
00:15:22,160 --> 00:15:24,360
so if you don't want to use my lovely

452
00:15:24,360 --> 00:15:25,760
redirect.rinderwriter.com which i

453
00:15:25,760 --> 00:15:27,920
totally understand

454
00:15:27,920 --> 00:15:30,000
you can you can host your own version of

455
00:15:30,000 --> 00:15:32,550
it and pop some ssr apps with that

456
00:15:32,550 --> 00:15:34,079
[Music]

457
00:15:34,079 --> 00:15:35,519
all right wow we're doing good on time

458
00:15:35,519 --> 00:15:38,079
so that's i can slow down a little bit

459
00:15:38,079 --> 00:15:40,480
the next section that we're going to go

460
00:15:40,480 --> 00:15:41,360
into

461
00:15:41,360 --> 00:15:43,759
is uh just straight up exploitation of

462
00:15:43,759 --> 00:15:44,959
this vulnerability so we're going to

463
00:15:44,959 --> 00:15:45,839
talk about

464
00:15:45,839 --> 00:15:48,160
how i exploited this on the external

465
00:15:48,160 --> 00:15:49,040
network

466
00:15:49,040 --> 00:15:52,079
and how i exploited this on or how it

467
00:15:52,079 --> 00:15:53,360
may be exploited

468
00:15:53,360 --> 00:15:55,360
on an internal network as a member of a

469
00:15:55,360 --> 00:15:57,040
bug chain which i think

470
00:15:57,040 --> 00:15:59,120
is really really exciting so yeah i

471
00:15:59,120 --> 00:16:00,000
think you guys are going to like that

472
00:16:00,000 --> 00:16:01,519
piece

473
00:16:01,519 --> 00:16:04,720
so let's uh let's jump into this uh

474
00:16:04,720 --> 00:16:07,440
so yeah so in the external exploitation

475
00:16:07,440 --> 00:16:08,240
slide

476
00:16:08,240 --> 00:16:10,079
we're going to or set of slides we're

477
00:16:10,079 --> 00:16:11,440
going to discuss how we exploited this

478
00:16:11,440 --> 00:16:13,360
on the external network or the dmz

479
00:16:13,360 --> 00:16:14,720
we're going to give you three internal

480
00:16:14,720 --> 00:16:16,079
pivots that you can do which will

481
00:16:16,079 --> 00:16:16,560
increase

482
00:16:16,560 --> 00:16:18,959
impact and then we're also going to give

483
00:16:18,959 --> 00:16:20,880
you some additional software affected by

484
00:16:20,880 --> 00:16:22,240
this so that you can add those to your

485
00:16:22,240 --> 00:16:23,199
routes as well

486
00:16:23,199 --> 00:16:25,600
when you're mass scanning for this or

487
00:16:25,600 --> 00:16:27,850
looking to exploit this on a target

488
00:16:27,850 --> 00:16:29,199
[Music]

489
00:16:29,199 --> 00:16:32,000
um so here's the first pivot the good

490
00:16:32,000 --> 00:16:32,399
old

491
00:16:32,399 --> 00:16:34,959
aws cloud metadata that we all love we

492
00:16:34,959 --> 00:16:36,160
all know and love

493
00:16:36,160 --> 00:16:38,560
um just my heart gets beaten just seeing

494
00:16:38,560 --> 00:16:40,399
those numbers on the screen

495
00:16:40,399 --> 00:16:42,800
um just to give a nice concise little

496
00:16:42,800 --> 00:16:43,920
summary of this

497
00:16:43,920 --> 00:16:48,000
we've got one 169.254 slash metadata

498
00:16:48,000 --> 00:16:50,079
and then we go on to hit the security

499
00:16:50,079 --> 00:16:51,600
credentials with the role name

500
00:16:51,600 --> 00:16:53,120
so that's the standard one that's the

501
00:16:53,120 --> 00:16:54,639
one that a lot of people use

502
00:16:54,639 --> 00:16:57,519
in order for this to be in aws metadata

503
00:16:57,519 --> 00:16:57,920
uh

504
00:16:57,920 --> 00:17:00,079
the instance had to be launched with im

505
00:17:00,079 --> 00:17:01,279
creds

506
00:17:01,279 --> 00:17:03,199
it's not always there it's there like

507
00:17:03,199 --> 00:17:05,039
ninety percent of the time at least

508
00:17:05,039 --> 00:17:07,039
um so definitely always hit that one

509
00:17:07,039 --> 00:17:09,039
also though don't just go straight for

510
00:17:09,039 --> 00:17:10,160
the security grads

511
00:17:10,160 --> 00:17:12,880
also hit slash latest slash user data um

512
00:17:12,880 --> 00:17:14,400
that will contain a lot of like startup

513
00:17:14,400 --> 00:17:15,919
scripts and data that

514
00:17:15,919 --> 00:17:17,919
is relevant to that machine so a lot of

515
00:17:17,919 --> 00:17:19,039
times you'll find like

516
00:17:19,039 --> 00:17:21,439
cube auth stuff in there you'll find

517
00:17:21,439 --> 00:17:23,359
secret keys sometimes you'll even find

518
00:17:23,359 --> 00:17:26,000
even more impactful uh i am credentials

519
00:17:26,000 --> 00:17:27,039
than what is in

520
00:17:27,039 --> 00:17:29,760
the this i am credentials uh security

521
00:17:29,760 --> 00:17:30,320
credent

522
00:17:30,320 --> 00:17:33,039
im slash security credential slash role

523
00:17:33,039 --> 00:17:33,440
um

524
00:17:33,440 --> 00:17:35,679
and then a lot of you guys have probably

525
00:17:35,679 --> 00:17:37,360
seen this metadata

526
00:17:37,360 --> 00:17:40,559
um entity or i'm not entity identity

527
00:17:40,559 --> 00:17:41,760
credentials

528
00:17:41,760 --> 00:17:46,400
um portion of the of the aws metadata

529
00:17:46,400 --> 00:17:48,000
and not really known what it does there

530
00:17:48,000 --> 00:17:49,760
are funky set of credentials

531
00:17:49,760 --> 00:17:51,840
um because i had so many of these ssrs

532
00:17:51,840 --> 00:17:53,120
and i was really trying to find good

533
00:17:53,120 --> 00:17:54,720
impact i spent a decent amount of time

534
00:17:54,720 --> 00:17:56,240
researching into that

535
00:17:56,240 --> 00:17:58,880
so um there will actually be a blog post

536
00:17:58,880 --> 00:18:00,640
up on my blog

537
00:18:00,640 --> 00:18:02,720
about the aws metadata identity

538
00:18:02,720 --> 00:18:04,960
credentials

539
00:18:04,960 --> 00:18:07,120
you can't do a ton with them but you can

540
00:18:07,120 --> 00:18:08,880
do some things with them depending on

541
00:18:08,880 --> 00:18:09,840
how

542
00:18:09,840 --> 00:18:12,640
the client has configured their

543
00:18:12,640 --> 00:18:13,679
environment

544
00:18:13,679 --> 00:18:15,440
i can give a little bit of an intro into

545
00:18:15,440 --> 00:18:17,440
that now since we are actually

546
00:18:17,440 --> 00:18:18,960
doing pretty good on time but

547
00:18:18,960 --> 00:18:21,280
essentially these uh

548
00:18:21,280 --> 00:18:25,679
these credentials are used by the ec2

549
00:18:25,679 --> 00:18:27,679
connect service that allows you to ssh

550
00:18:27,679 --> 00:18:29,120
into your machines

551
00:18:29,120 --> 00:18:31,760
uh from the aws like panel in the

552
00:18:31,760 --> 00:18:33,360
browser

553
00:18:33,360 --> 00:18:36,000
and it has some specific credentials or

554
00:18:36,000 --> 00:18:36,799
some

555
00:18:36,799 --> 00:18:39,280
specific functions that are used in that

556
00:18:39,280 --> 00:18:40,640
sort of interaction

557
00:18:40,640 --> 00:18:42,720
so you can get access to those functions

558
00:18:42,720 --> 00:18:45,360
which can be useful for mostly providing

559
00:18:45,360 --> 00:18:48,799
a way to deny access to the box for um

560
00:18:48,799 --> 00:18:51,840
for the the other side the the good guys

561
00:18:51,840 --> 00:18:56,559
and uh and it can also from what i can

562
00:18:56,559 --> 00:18:57,520
see

563
00:18:57,520 --> 00:19:00,640
have access to any permission that is

564
00:19:00,640 --> 00:19:01,679
globally

565
00:19:01,679 --> 00:19:04,400
given to any users in the aws

566
00:19:04,400 --> 00:19:06,880
sub-organization organization

567
00:19:06,880 --> 00:19:10,320
um and so that can sometimes the ones

568
00:19:10,320 --> 00:19:10,960
i've seen

569
00:19:10,960 --> 00:19:12,960
have been able to leak password policy

570
00:19:12,960 --> 00:19:14,720
information and even sometimes

571
00:19:14,720 --> 00:19:17,360
if a thing is really weirdly configured

572
00:19:17,360 --> 00:19:18,960
you can get access to user data

573
00:19:18,960 --> 00:19:21,360
um so that's that's definitely something

574
00:19:21,360 --> 00:19:23,200
to keep in mind especially if you're

575
00:19:23,200 --> 00:19:24,480
there's nothing in the user data there's

576
00:19:24,480 --> 00:19:26,240
nothing in the security credentials you

577
00:19:26,240 --> 00:19:28,000
may have sort of a fallback

578
00:19:28,000 --> 00:19:31,760
in the um identity credentials

579
00:19:32,080 --> 00:19:35,199
i'm gonna grab some water

580
00:19:35,600 --> 00:19:38,400
all right um oh yeah and then here's a

581
00:19:38,400 --> 00:19:40,160
little screenshot beneath it as well

582
00:19:40,160 --> 00:19:42,080
that just kind of shows you how to use

583
00:19:42,080 --> 00:19:43,760
um the keys that you pull from this

584
00:19:43,760 --> 00:19:44,720
because i've i've

585
00:19:44,720 --> 00:19:45,919
heard that some people don't know how to

586
00:19:45,919 --> 00:19:48,000
do this so you take the access key that

587
00:19:48,000 --> 00:19:48,799
you

588
00:19:48,799 --> 00:19:51,360
um you generated from or you got from

589
00:19:51,360 --> 00:19:53,760
the ssrf you take the secret key

590
00:19:53,760 --> 00:19:55,280
and the session token that all got

591
00:19:55,280 --> 00:19:57,039
returned from the response to slash

592
00:19:57,039 --> 00:20:00,799
security credentials or to uh ec2

593
00:20:00,799 --> 00:20:02,720
instance security credentials and you

594
00:20:02,720 --> 00:20:04,240
plug those into the aws

595
00:20:04,240 --> 00:20:07,760
command line tool via environmental

596
00:20:07,760 --> 00:20:09,600
variables

597
00:20:09,600 --> 00:20:12,080
and then you call the aws sts get caller

598
00:20:12,080 --> 00:20:12,960
identity

599
00:20:12,960 --> 00:20:14,240
function to confirm that you've been

600
00:20:14,240 --> 00:20:15,840
able to successfully log in with those

601
00:20:15,840 --> 00:20:17,200
credentials

602
00:20:17,200 --> 00:20:18,480
so that just kind of gets you started

603
00:20:18,480 --> 00:20:19,679
and then from there you can use the

604
00:20:19,679 --> 00:20:22,159
various aws command line functions

605
00:20:22,159 --> 00:20:25,520
to enumerate your s3 buckets your ec2

606
00:20:25,520 --> 00:20:26,240
instances

607
00:20:26,240 --> 00:20:28,240
anything else that could be of interest

608
00:20:28,240 --> 00:20:30,480
to you

609
00:20:30,480 --> 00:20:32,799
so let's go ahead and move on to the

610
00:20:32,799 --> 00:20:33,520
next side

611
00:20:33,520 --> 00:20:35,360
so the next one is actually pretty cool

612
00:20:35,360 --> 00:20:37,200
um this in a lot of

613
00:20:37,200 --> 00:20:39,200
grafana instances there's an internal

614
00:20:39,200 --> 00:20:41,760
image renderer running on the internal

615
00:20:41,760 --> 00:20:44,720
um host so what you can do on the

616
00:20:44,720 --> 00:20:47,840
internal nick i guess i should say

617
00:20:47,840 --> 00:20:49,520
is what you can do is actually hit that

618
00:20:49,520 --> 00:20:52,720
internal service and you can pass it a

619
00:20:52,720 --> 00:20:55,120
url to your own domain and it will open

620
00:20:55,120 --> 00:20:55,840
that url

621
00:20:55,840 --> 00:20:58,559
up in a headless browser on that on in

622
00:20:58,559 --> 00:21:00,000
the network and if you all should know

623
00:21:00,000 --> 00:21:00,640
that that is

624
00:21:00,640 --> 00:21:05,280
really bad from naham sex talk on pdf

625
00:21:05,280 --> 00:21:07,280
rendering injection goodness so

626
00:21:07,280 --> 00:21:08,799
definitely go check out that talk if you

627
00:21:08,799 --> 00:21:10,559
haven't haven't seen it already maybe

628
00:21:10,559 --> 00:21:11,840
some of you guys can throw it down in

629
00:21:11,840 --> 00:21:12,400
the

630
00:21:12,400 --> 00:21:15,840
comments as this video is airing

631
00:21:15,840 --> 00:21:17,360
but yeah so there's a lot of stuff you

632
00:21:17,360 --> 00:21:19,360
can do with this specifically because

633
00:21:19,360 --> 00:21:23,200
um this uh request actually i don't have

634
00:21:23,200 --> 00:21:24,559
it in here but it also allows you to

635
00:21:24,559 --> 00:21:26,320
specify a timeout parameter

636
00:21:26,320 --> 00:21:28,480
so you can essentially just spawn like a

637
00:21:28,480 --> 00:21:29,760
js shell

638
00:21:29,760 --> 00:21:31,840
inside of that headless chrome instance

639
00:21:31,840 --> 00:21:33,280
and then send a bunch of

640
00:21:33,280 --> 00:21:35,120
requests out which would be super useful

641
00:21:35,120 --> 00:21:37,200
for spring the internal network for one

642
00:21:37,200 --> 00:21:39,280
shot rc's

643
00:21:39,280 --> 00:21:40,960
so definitely keep this in mind when

644
00:21:40,960 --> 00:21:42,640
you're pivoting

645
00:21:42,640 --> 00:21:44,720
you know hit i think it's normally on

646
00:21:44,720 --> 00:21:46,640
port 3001 but it can be on

647
00:21:46,640 --> 00:21:48,400
all sorts of different points uh ports

648
00:21:48,400 --> 00:21:50,159
so do your port scans

649
00:21:50,159 --> 00:21:52,159
if you run into this awesome hit slash

650
00:21:52,159 --> 00:21:54,320
render pass it in some good stuff

651
00:21:54,320 --> 00:21:56,400
i do have a little um demo really

652
00:21:56,400 --> 00:21:59,120
quickly i can do for you here

653
00:21:59,120 --> 00:22:01,840
so here we are essentially what i'm

654
00:22:01,840 --> 00:22:03,120
doing here is i'm just cutting the

655
00:22:03,120 --> 00:22:04,799
function to show you what page i'm

656
00:22:04,799 --> 00:22:07,919
passing into the renderer for you to see

657
00:22:07,919 --> 00:22:09,840
it's going to issue a post request i'm

658
00:22:09,840 --> 00:22:10,960
starting up the

659
00:22:10,960 --> 00:22:13,600
grafana image render in a docker

660
00:22:13,600 --> 00:22:14,559
container

661
00:22:14,559 --> 00:22:15,679
and then i'm going to start my netcat

662
00:22:15,679 --> 00:22:18,400
listener and i'll go ahead and pass

663
00:22:18,400 --> 00:22:21,440
this html file to the the render on the

664
00:22:21,440 --> 00:22:23,360
on the localhost and you'll see that

665
00:22:23,360 --> 00:22:25,679
i'll get a post request here

666
00:22:25,679 --> 00:22:28,720
in the in the response which uh which

667
00:22:28,720 --> 00:22:30,880
contains you know a json body you can

668
00:22:30,880 --> 00:22:32,559
set arbitrary headers you can use any

669
00:22:32,559 --> 00:22:34,080
http verb if you use

670
00:22:34,080 --> 00:22:36,960
uh fetch no cores and stuff like that

671
00:22:36,960 --> 00:22:38,240
it'll all be blind

672
00:22:38,240 --> 00:22:39,760
but it'll be like i said it's really

673
00:22:39,760 --> 00:22:41,919
useful for spraying a bunch of like

674
00:22:41,919 --> 00:22:44,720
stuff into the internal network

675
00:22:44,720 --> 00:22:47,919
um so that's a cool that's a cool one

676
00:22:47,919 --> 00:22:49,280
let me go ahead and get back to my

677
00:22:49,280 --> 00:22:51,280
present

678
00:22:51,280 --> 00:22:53,120
definitely be on the lookout for that

679
00:22:53,120 --> 00:22:54,960
and before we go into the third pivot

680
00:22:54,960 --> 00:22:56,480
we've got to talk a little bit about

681
00:22:56,480 --> 00:22:59,120
other software affected so i'm just

682
00:22:59,120 --> 00:23:00,640
going to give a shout out right now to

683
00:23:00,640 --> 00:23:01,280
naffy

684
00:23:01,280 --> 00:23:05,039
and to rohan for contributing these

685
00:23:05,039 --> 00:23:08,559
apparently git lab runs grafana uh

686
00:23:08,559 --> 00:23:11,760
by default under grafana

687
00:23:11,760 --> 00:23:15,120
um so all git labs prior to

688
00:23:15,120 --> 00:23:17,600
x version are also vulnerable to this

689
00:23:17,600 --> 00:23:18,880
vulnerability so

690
00:23:18,880 --> 00:23:22,000
add that path to your spray list

691
00:23:22,000 --> 00:23:24,400
and uh there's some really interesting

692
00:23:24,400 --> 00:23:25,760
stuff we can do with the pivots on

693
00:23:25,760 --> 00:23:27,360
gitlab so we'll talk about that in just

694
00:23:27,360 --> 00:23:28,000
a second

695
00:23:28,000 --> 00:23:29,679
and then also source graph does the same

696
00:23:29,679 --> 00:23:31,919
thing unfortunately

697
00:23:31,919 --> 00:23:34,799
source graph has it authenticated unlike

698
00:23:34,799 --> 00:23:35,760
git

699
00:23:35,760 --> 00:23:37,760
um so if you ever find yourself inside

700
00:23:37,760 --> 00:23:39,360
of an organization's

701
00:23:39,360 --> 00:23:42,880
source graph then you you've got an ssrf

702
00:23:42,880 --> 00:23:44,159
but if you find yourself inside of an

703
00:23:44,159 --> 00:23:45,840
organization's source graph

704
00:23:45,840 --> 00:23:48,240
they might be in trouble anyway yeah and

705
00:23:48,240 --> 00:23:49,679
if you guys know of any other software

706
00:23:49,679 --> 00:23:50,799
that we can use

707
00:23:50,799 --> 00:23:52,480
great like i would love to add those to

708
00:23:52,480 --> 00:23:54,320
the blog post

709
00:23:54,320 --> 00:23:56,240
all right so speeding up a little bit

710
00:23:56,240 --> 00:23:58,000
again here uh the next pivot is the

711
00:23:58,000 --> 00:23:59,679
gitlab prometheus uh

712
00:23:59,679 --> 00:24:02,240
redis exporter a lot of times in gitlab

713
00:24:02,240 --> 00:24:02,799
uh

714
00:24:02,799 --> 00:24:04,240
you know for monitoring purposes they'll

715
00:24:04,240 --> 00:24:05,840
have these sort of exporters

716
00:24:05,840 --> 00:24:08,960
where you can see uh like

717
00:24:08,960 --> 00:24:10,159
the contents of various different

718
00:24:10,159 --> 00:24:11,840
services so there's like a postgres one

719
00:24:11,840 --> 00:24:13,120
there's a redis one there's a bunch of

720
00:24:13,120 --> 00:24:14,159
other different ones

721
00:24:14,159 --> 00:24:15,679
so i was playing around with this with

722
00:24:15,679 --> 00:24:17,200
corbinic and techno geek

723
00:24:17,200 --> 00:24:19,440
and we found that if you hit uh normally

724
00:24:19,440 --> 00:24:21,600
runs on 91 21

725
00:24:21,600 --> 00:24:24,480
scrape and you pass in a target you can

726
00:24:24,480 --> 00:24:27,039
actually specify a redis instance

727
00:24:27,039 --> 00:24:28,559
and what will happen if you put check

728
00:24:28,559 --> 00:24:30,159
keys equals to star

729
00:24:30,159 --> 00:24:31,919
is uh it'll go out to that redis

730
00:24:31,919 --> 00:24:33,919
instance dump all of the keys and then

731
00:24:33,919 --> 00:24:36,400
return that to an http response

732
00:24:36,400 --> 00:24:37,840
so you can do some really cool stuff

733
00:24:37,840 --> 00:24:39,279
with this if you know some internal

734
00:24:39,279 --> 00:24:41,039
radisses in their network

735
00:24:41,039 --> 00:24:43,279
or um even if gitlab is running like

736
00:24:43,279 --> 00:24:44,640
redis that has something

737
00:24:44,640 --> 00:24:46,880
sensitive in it you can you can hit that

738
00:24:46,880 --> 00:24:47,840
as well

739
00:24:47,840 --> 00:24:49,360
i'd imagine this would work for a lot of

740
00:24:49,360 --> 00:24:51,039
the other exporters too like i mentioned

741
00:24:51,039 --> 00:24:52,000
there's like a

742
00:24:52,000 --> 00:24:53,520
postgres one and some other ones so

743
00:24:53,520 --> 00:24:55,200
definitely check those out if you're

744
00:24:55,200 --> 00:24:57,840
ever in this situation

745
00:24:57,840 --> 00:25:00,960
all right so now internal exploitation

746
00:25:00,960 --> 00:25:02,640
this is going to be awesome so you can

747
00:25:02,640 --> 00:25:05,440
use a cve 2020 elite 9

748
00:25:05,440 --> 00:25:08,000
to x uh escalate your other

749
00:25:08,000 --> 00:25:09,120
vulnerabilities so

750
00:25:09,120 --> 00:25:11,360
one of the most common types oh wait let

751
00:25:11,360 --> 00:25:13,360
me i'll go through this first so

752
00:25:13,360 --> 00:25:16,240
this this ssrf has a unique feature and

753
00:25:16,240 --> 00:25:18,080
that's its content type so if we go back

754
00:25:18,080 --> 00:25:18,799
to the code

755
00:25:18,799 --> 00:25:20,640
we can see that after the avatar update

756
00:25:20,640 --> 00:25:22,480
call it does this really weird thing on

757
00:25:22,480 --> 00:25:23,919
line 104

758
00:25:23,919 --> 00:25:26,880
it sets the content type of the response

759
00:25:26,880 --> 00:25:28,559
to image jpeg

760
00:25:28,559 --> 00:25:30,080
so what you're actually doing here is

761
00:25:30,080 --> 00:25:31,600
you're getting

762
00:25:31,600 --> 00:25:35,679
real ssrf response back in the content

763
00:25:35,679 --> 00:25:38,400
of content type of image jpeg which is

764
00:25:38,400 --> 00:25:39,679
great because one of the most common

765
00:25:39,679 --> 00:25:40,960
types of blind

766
00:25:40,960 --> 00:25:43,520
ssrfs out there is just an image only

767
00:25:43,520 --> 00:25:44,480
ssrf

768
00:25:44,480 --> 00:25:46,480
so if you've got an external image only

769
00:25:46,480 --> 00:25:48,559
ssrf you can take that

770
00:25:48,559 --> 00:25:50,159
point it at the target's internal

771
00:25:50,159 --> 00:25:52,080
grafana instance exploit this

772
00:25:52,080 --> 00:25:53,919
vulnerability have the internal grafana

773
00:25:53,919 --> 00:25:54,880
instance

774
00:25:54,880 --> 00:25:57,279
hit your other internal uh target that

775
00:25:57,279 --> 00:25:57,919
you want

776
00:25:57,919 --> 00:25:59,760
return the content type or return the

777
00:25:59,760 --> 00:26:01,679
content from that ssrf

778
00:26:01,679 --> 00:26:03,919
in the image jpeg type and then have

779
00:26:03,919 --> 00:26:05,919
that returned back to your external

780
00:26:05,919 --> 00:26:07,840
image only attacher app and boom you've

781
00:26:07,840 --> 00:26:10,400
got a full read internal ssrf that's a

782
00:26:10,400 --> 00:26:12,240
huge escalation

783
00:26:12,240 --> 00:26:13,440
so definitely be on the lookout for

784
00:26:13,440 --> 00:26:15,520
grafana instances in your target's

785
00:26:15,520 --> 00:26:18,320
internal network and if you can hit one

786
00:26:18,320 --> 00:26:20,240
you might be getting your escalation to

787
00:26:20,240 --> 00:26:22,000
uh of the blindness draft to a full

788
00:26:22,000 --> 00:26:24,240
redux draft

789
00:26:24,240 --> 00:26:26,480
all right doing good on time we're in

790
00:26:26,480 --> 00:26:28,400
the we're in the bug bounty section now

791
00:26:28,400 --> 00:26:29,440
we're going to talk about some mass

792
00:26:29,440 --> 00:26:30,799
exploitation what it looked like to

793
00:26:30,799 --> 00:26:32,159
exploit this vulnerability

794
00:26:32,159 --> 00:26:35,120
and some collaboration

795
00:26:37,200 --> 00:26:39,440
all right boom so there are the reports

796
00:26:39,440 --> 00:26:41,279
there were 25 plus crits

797
00:26:41,279 --> 00:26:43,760
15 plus highs a lot of them resolved as

798
00:26:43,760 --> 00:26:45,120
you can see here

799
00:26:45,120 --> 00:26:49,039
um mass mass exploitation i show you

800
00:26:49,039 --> 00:26:50,960
this for the purpose of

801
00:26:50,960 --> 00:26:52,480
several things collaborate with your

802
00:26:52,480 --> 00:26:54,159
friends and

803
00:26:54,159 --> 00:26:56,559
have mass exploitation software that you

804
00:26:56,559 --> 00:26:58,640
can use to spray your zero days because

805
00:26:58,640 --> 00:27:02,480
it's awesome um i'm not going to give

806
00:27:02,480 --> 00:27:04,000
actual numbers out for how much i made

807
00:27:04,000 --> 00:27:05,279
off this vulnerability but i'll give

808
00:27:05,279 --> 00:27:07,520
some relative numbers to encourage

809
00:27:07,520 --> 00:27:10,480
you to hunt for zero days um the first

810
00:27:10,480 --> 00:27:12,559
one was that uh 67

811
00:27:12,559 --> 00:27:15,279
or 68 i'm sorry percent of my 2019

812
00:27:15,279 --> 00:27:16,400
earnings

813
00:27:16,400 --> 00:27:17,760
that's equivalent to the earnings that i

814
00:27:17,760 --> 00:27:19,520
made from cv 2020

815
00:27:19,520 --> 00:27:23,039
elite nine uh and 78 of this year's

816
00:27:23,039 --> 00:27:24,799
uh earnings year to date i was started

817
00:27:24,799 --> 00:27:25,919
going full time this year so it's a

818
00:27:25,919 --> 00:27:27,440
little bit more than last year

819
00:27:27,440 --> 00:27:31,120
we're from the cbe uh bounties

820
00:27:31,120 --> 00:27:33,039
and then lastly all of my bounties in

821
00:27:33,039 --> 00:27:35,600
total as a top 100 hacker on hacker one

822
00:27:35,600 --> 00:27:39,120
23 came from this bug so if you hunt for

823
00:27:39,120 --> 00:27:41,039
for zero days you can really make some

824
00:27:41,039 --> 00:27:42,399
some good cash off this so i would

825
00:27:42,399 --> 00:27:43,200
really recommend

826
00:27:43,200 --> 00:27:46,880
looking into it um yeah

827
00:27:46,880 --> 00:27:48,880
takeaways uh zero day hunting can be

828
00:27:48,880 --> 00:27:50,320
quite lucrative do it there's a little

829
00:27:50,320 --> 00:27:51,919
bit of attention in the community some

830
00:27:51,919 --> 00:27:53,200
of you might seen

831
00:27:53,200 --> 00:27:56,320
uh about hunting for zero days um there

832
00:27:56,320 --> 00:27:57,679
are some programs who won't pay for it

833
00:27:57,679 --> 00:27:59,120
and that's fair that's their

834
00:27:59,120 --> 00:28:03,200
their their stance that's okay

835
00:28:03,200 --> 00:28:05,760
but if you if you know that the target

836
00:28:05,760 --> 00:28:07,600
accepts them which a lot of them will

837
00:28:07,600 --> 00:28:09,279
because they want to tighten up their

838
00:28:09,279 --> 00:28:10,880
their perimeter um

839
00:28:10,880 --> 00:28:12,880
you can make a lot of cash off of them

840
00:28:12,880 --> 00:28:14,559
um and so

841
00:28:14,559 --> 00:28:15,760
the other takeaway would be to have a

842
00:28:15,760 --> 00:28:17,279
reconnaissance system to help mass

843
00:28:17,279 --> 00:28:18,000
exploit

844
00:28:18,000 --> 00:28:19,200
and then once you're done with your own

845
00:28:19,200 --> 00:28:21,520
exploitation hand it off to a friend who

846
00:28:21,520 --> 00:28:23,279
will split bounties with you i recommend

847
00:28:23,279 --> 00:28:26,240
today's new and and ben both of them

848
00:28:26,240 --> 00:28:28,240
very fair bounty splits

849
00:28:28,240 --> 00:28:30,799
very kind very trustworthy and

850
00:28:30,799 --> 00:28:32,799
particularly today's new has access to

851
00:28:32,799 --> 00:28:33,360
just

852
00:28:33,360 --> 00:28:35,760
an insane amount of programs so def

853
00:28:35,760 --> 00:28:36,960
check that out

854
00:28:36,960 --> 00:28:39,039
um have a report templating system to

855
00:28:39,039 --> 00:28:40,080
help you save time

856
00:28:40,080 --> 00:28:42,279
writing reports i've released one at

857
00:28:42,279 --> 00:28:44,240
github.com reports

858
00:28:44,240 --> 00:28:46,240
um and then also have a canned response

859
00:28:46,240 --> 00:28:48,000
for your twitter dms because if you have

860
00:28:48,000 --> 00:28:49,120
your dms open because you're going to

861
00:28:49,120 --> 00:28:49,520
get

862
00:28:49,520 --> 00:28:52,320
an inflex for sure um here's my

863
00:28:52,320 --> 00:28:54,320
collaboration slide shout out to eric

864
00:28:54,320 --> 00:28:54,640
ben

865
00:28:54,640 --> 00:28:56,480
nathy and streak for all the wonderful

866
00:28:56,480 --> 00:28:58,399
collaboration that we've had

867
00:28:58,399 --> 00:29:00,480
shout out to the cve reversers good old

868
00:29:00,480 --> 00:29:02,559
corbin uh it was number one

869
00:29:02,559 --> 00:29:04,159
uh who kept their mouth shut about the

870
00:29:04,159 --> 00:29:05,760
body until this uh

871
00:29:05,760 --> 00:29:08,320
this video dropped and also shout out to

872
00:29:08,320 --> 00:29:09,840
ricardo for donating some of the

873
00:29:09,840 --> 00:29:11,440
bounties he got from the cv

874
00:29:11,440 --> 00:29:15,120
to some children in need in brazil

875
00:29:15,120 --> 00:29:17,440
um and that's the end of my presentation

876
00:29:17,440 --> 00:29:19,360
so i thank you all so much for watching

877
00:29:19,360 --> 00:29:20,799
if you have any questions you can reach

878
00:29:20,799 --> 00:29:22,480
out to me at uh on twitter

879
00:29:22,480 --> 00:29:24,320
under rynerator or you can shoot me an

880
00:29:24,320 --> 00:29:25,520
email which i've left in this final

881
00:29:25,520 --> 00:29:27,840
slide

882
00:29:32,600 --> 00:29:35,600
thanks

