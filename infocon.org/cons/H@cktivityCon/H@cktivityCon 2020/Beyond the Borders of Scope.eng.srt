1
00:00:01,150 --> 00:00:05,759
[Music]

2
00:00:05,759 --> 00:00:06,720
hello everybody

3
00:00:06,720 --> 00:00:08,240
and welcome to my talk beyond the

4
00:00:08,240 --> 00:00:10,559
borders of scope finding bugs in scope

5
00:00:10,559 --> 00:00:11,519
applications

6
00:00:11,519 --> 00:00:13,759
using other scope targets first off i'd

7
00:00:13,759 --> 00:00:15,280
like i'd like to thank hacker1 and ben

8
00:00:15,280 --> 00:00:16,400
for hosting this awesome commercial

9
00:00:16,400 --> 00:00:18,800
conference and thank you for having me

10
00:00:18,800 --> 00:00:21,760
so who am i hi my name is jasmine landry

11
00:00:21,760 --> 00:00:23,439
yes i know it sounds like a girl's name

12
00:00:23,439 --> 00:00:24,960
but i'm french canadian and we pronounce

13
00:00:24,960 --> 00:00:25,760
it as

14
00:00:25,760 --> 00:00:27,920
jasmine which is completely normal and

15
00:00:27,920 --> 00:00:29,119
not weird

16
00:00:29,119 --> 00:00:31,039
i'm also known as j-rock 17 in the

17
00:00:31,039 --> 00:00:32,558
bhagbanti community

18
00:00:32,558 --> 00:00:34,640
i'm sort of a sort of a full-time black

19
00:00:34,640 --> 00:00:36,399
bounty hunter since i officially work a

20
00:00:36,399 --> 00:00:37,760
few days per month only

21
00:00:37,760 --> 00:00:39,040
meaning i spend more time doing bug

22
00:00:39,040 --> 00:00:40,879
monthly than actual work

23
00:00:40,879 --> 00:00:44,160
and yeah as most canadians i love hockey

24
00:00:44,160 --> 00:00:45,920
to start this off i'm going to talk

25
00:00:45,920 --> 00:00:47,520
about how i approach an application when

26
00:00:47,520 --> 00:00:48,719
i start hacking

27
00:00:48,719 --> 00:00:50,640
how using autoscope assets can result in

28
00:00:50,640 --> 00:00:52,559
impactful bugs in the program's core

29
00:00:52,559 --> 00:00:53,280
assets

30
00:00:53,280 --> 00:00:55,199
and lastly i'll show a few examples of

31
00:00:55,199 --> 00:00:56,480
bugs i found

32
00:00:56,480 --> 00:00:58,239
unfortunately i must redact most of the

33
00:00:58,239 --> 00:00:59,680
details however i can still show you

34
00:00:59,680 --> 00:01:02,879
guys the techniques i've used

35
00:01:04,000 --> 00:01:05,840
quick disclaimer this talk is not about

36
00:01:05,840 --> 00:01:07,280
hacking autoscope targets

37
00:01:07,280 --> 00:01:08,960
it's simply about gathering information

38
00:01:08,960 --> 00:01:10,400
from other scope targets in order to

39
00:01:10,400 --> 00:01:11,360
help you find bugs

40
00:01:11,360 --> 00:01:13,600
in scope applications don't do actual

41
00:01:13,600 --> 00:01:15,360
hacking on alloscope applications if you

42
00:01:15,360 --> 00:01:15,840
do

43
00:01:15,840 --> 00:01:18,080
i'm not responsible for your actions so

44
00:01:18,080 --> 00:01:19,680
how do i approach a new target

45
00:01:19,680 --> 00:01:21,119
i try to figure out what's the app's

46
00:01:21,119 --> 00:01:22,560
purpose and what kind of bug would be

47
00:01:22,560 --> 00:01:24,960
the most impactful for their business

48
00:01:24,960 --> 00:01:26,960
does the program have a focus area or do

49
00:01:26,960 --> 00:01:28,960
they offer bonuses on specific assets or

50
00:01:28,960 --> 00:01:30,000
bug types

51
00:01:30,000 --> 00:01:31,680
if they do then they must care about it

52
00:01:31,680 --> 00:01:33,600
so i would focus on those

53
00:01:33,600 --> 00:01:35,200
from here i'm approaching it as if it

54
00:01:35,200 --> 00:01:37,360
were ctf ironically

55
00:01:37,360 --> 00:01:39,040
i don't even like ctfs and i suck at

56
00:01:39,040 --> 00:01:40,560
them but anyways

57
00:01:40,560 --> 00:01:42,640
so i create myself a fake flag based off

58
00:01:42,640 --> 00:01:44,159
of the application's purpose and our

59
00:01:44,159 --> 00:01:45,759
focus area and bonuses

60
00:01:45,759 --> 00:01:47,119
if the program's focus area is

61
00:01:47,119 --> 00:01:49,119
authentication and the reward bonuses

62
00:01:49,119 --> 00:01:50,479
for auth related bugs

63
00:01:50,479 --> 00:01:51,920
then the flag i'm creating myself is

64
00:01:51,920 --> 00:01:53,520
finding an account takeover

65
00:01:53,520 --> 00:01:54,960
i'll do what it takes to get it

66
00:01:54,960 --> 00:01:56,960
sometimes it works sometimes it doesn't

67
00:01:56,960 --> 00:01:59,040
or if the app is built on php then it's

68
00:01:59,040 --> 00:02:00,640
rc or nothing

69
00:02:00,640 --> 00:02:02,479
after giving myself a goal i try to

70
00:02:02,479 --> 00:02:03,840
think of what other hackers might have

71
00:02:03,840 --> 00:02:04,479
missed

72
00:02:04,479 --> 00:02:06,000
on this application and what they didn't

73
00:02:06,000 --> 00:02:07,680
think of trying

74
00:02:07,680 --> 00:02:08,639
that's where browsing around the

75
00:02:08,639 --> 00:02:10,399
application as a regular user would

76
00:02:10,399 --> 00:02:11,280
comes in handy

77
00:02:11,280 --> 00:02:12,720
you get to understand the application's

78
00:02:12,720 --> 00:02:14,319
logic and also you get to see what

79
00:02:14,319 --> 00:02:16,400
technologies are used how pieces are put

80
00:02:16,400 --> 00:02:18,160
together so on and so forth

81
00:02:18,160 --> 00:02:19,760
from here on it's practically just

82
00:02:19,760 --> 00:02:21,120
trying to find bugs and get some

83
00:02:21,120 --> 00:02:22,160
bounties

84
00:02:22,160 --> 00:02:24,160
again follow the program's rules and

85
00:02:24,160 --> 00:02:25,520
don't hack on other scope targets

86
00:02:25,520 --> 00:02:26,879
without permission

87
00:02:26,879 --> 00:02:28,720
but that doesn't mean we can't do

88
00:02:28,720 --> 00:02:30,400
passive recon on those targets

89
00:02:30,400 --> 00:02:32,000
it might not even be targets less than

90
00:02:32,000 --> 00:02:33,360
the in the yellow scope section of the

91
00:02:33,360 --> 00:02:34,080
program

92
00:02:34,080 --> 00:02:35,840
it could actually be assets that you see

93
00:02:35,840 --> 00:02:37,200
interacting with the application you're

94
00:02:37,200 --> 00:02:38,160
trying to hack

95
00:02:38,160 --> 00:02:40,000
for example the means that are listed in

96
00:02:40,000 --> 00:02:41,440
a content security policy

97
00:02:41,440 --> 00:02:42,879
why are they there and what's the

98
00:02:42,879 --> 00:02:44,560
relation between them and target

99
00:02:44,560 --> 00:02:46,720
who built the site was it built in house

100
00:02:46,720 --> 00:02:48,000
or was it built from a third-party

101
00:02:48,000 --> 00:02:48,720
vendor

102
00:02:48,720 --> 00:02:50,800
i've seen in the past sites that are

103
00:02:50,800 --> 00:02:52,239
built by third-party vendors

104
00:02:52,239 --> 00:02:53,599
but then maintained by the target

105
00:02:53,599 --> 00:02:55,760
company itself sometimes during recon on

106
00:02:55,760 --> 00:02:57,040
those three-party vendors can be

107
00:02:57,040 --> 00:02:57,920
fruitful

108
00:02:57,920 --> 00:02:59,680
of course we can always look at github

109
00:02:59,680 --> 00:03:01,040
stack overflow and other websites which

110
00:03:01,040 --> 00:03:01,920
could contain

111
00:03:01,920 --> 00:03:03,280
information that could help in finding

112
00:03:03,280 --> 00:03:05,040
bugs in scope targets

113
00:03:05,040 --> 00:03:06,720
one more thing to look at is see if the

114
00:03:06,720 --> 00:03:08,400
app integrates with other apps

115
00:03:08,400 --> 00:03:11,040
like slack github jira microsoft teams

116
00:03:11,040 --> 00:03:12,319
and so on and so forth

117
00:03:12,319 --> 00:03:14,000
sometimes applications trust data coming

118
00:03:14,000 --> 00:03:15,599
in from those integrations so it can

119
00:03:15,599 --> 00:03:16,239
result in

120
00:03:16,239 --> 00:03:18,159
interesting bugs the first book i'm

121
00:03:18,159 --> 00:03:19,920
going to talk about is an rc which i got

122
00:03:19,920 --> 00:03:22,480
from doing recon on a third-party vendor

123
00:03:22,480 --> 00:03:24,799
the second bug is about using

124
00:03:24,799 --> 00:03:26,640
third-party applications like slack and

125
00:03:26,640 --> 00:03:27,360
teams

126
00:03:27,360 --> 00:03:28,879
which have resulted in private

127
00:03:28,879 --> 00:03:31,440
escalations and information disclosures

128
00:03:31,440 --> 00:03:33,120
the third bug is about an exercise i got

129
00:03:33,120 --> 00:03:34,560
by chaining a few vulnerabilities

130
00:03:34,560 --> 00:03:35,440
together

131
00:03:35,440 --> 00:03:37,040
at one point i was stuck and i couldn't

132
00:03:37,040 --> 00:03:38,879
exploit it as i needed a reflected xss

133
00:03:38,879 --> 00:03:40,560
on any sub-domain of the target i was

134
00:03:40,560 --> 00:03:42,640
hacking since not all domains were in

135
00:03:42,640 --> 00:03:43,440
scope

136
00:03:43,440 --> 00:03:44,959
i got in touch with the program in order

137
00:03:44,959 --> 00:03:46,640
to ask them if they'd be okay for me to

138
00:03:46,640 --> 00:03:48,400
look for next success on autoscope

139
00:03:48,400 --> 00:03:49,040
assets

140
00:03:49,040 --> 00:03:51,280
in order to complete my chain since the

141
00:03:51,280 --> 00:03:52,159
end result was

142
00:03:52,159 --> 00:03:53,599
it was a high impact bug on their main

143
00:03:53,599 --> 00:03:55,760
application they gladly accepted it so

144
00:03:55,760 --> 00:03:57,519
that i went on and looked for an access

145
00:03:57,519 --> 00:03:59,519
nexus which i actually got to finally

146
00:03:59,519 --> 00:04:01,760
complete my chain of bugs

147
00:04:01,760 --> 00:04:03,360
the last couple of bugs is about how i

148
00:04:03,360 --> 00:04:04,959
was able to get an eidor

149
00:04:04,959 --> 00:04:07,360
a privesque and an rc by posting links

150
00:04:07,360 --> 00:04:08,720
in an application

151
00:04:08,720 --> 00:04:10,560
i get access to insert the data through

152
00:04:10,560 --> 00:04:11,920
the referee editor

153
00:04:11,920 --> 00:04:14,560
or have an admin exploit something for

154
00:04:14,560 --> 00:04:15,280
me

155
00:04:15,280 --> 00:04:17,839
we'll see later what i mean by this i

156
00:04:17,839 --> 00:04:19,279
don't consider social engineering or

157
00:04:19,279 --> 00:04:19,839
phishing

158
00:04:19,839 --> 00:04:21,600
which is out of scope as i'm not

159
00:04:21,600 --> 00:04:22,960
actually sending anyone a malicious

160
00:04:22,960 --> 00:04:24,240
email or anything

161
00:04:24,240 --> 00:04:26,240
i'm using the application as it's

162
00:04:26,240 --> 00:04:28,320
intended i'm simply posting a link and

163
00:04:28,320 --> 00:04:29,840
if i usually write me clicks on it

164
00:04:29,840 --> 00:04:32,000
well good for me it's a bit similar to

165
00:04:32,000 --> 00:04:33,759
how a blend access would work

166
00:04:33,759 --> 00:04:35,280
you can't really trigger it yourself you

167
00:04:35,280 --> 00:04:36,960
need to wait for some user some sort of

168
00:04:36,960 --> 00:04:37,919
user interaction

169
00:04:37,919 --> 00:04:40,000
while browsing around the application i

170
00:04:40,000 --> 00:04:41,600
notice another domain in the content

171
00:04:41,600 --> 00:04:42,960
security policy

172
00:04:42,960 --> 00:04:44,560
this domain then belonged to the target

173
00:04:44,560 --> 00:04:46,960
company i did some recon try to find out

174
00:04:46,960 --> 00:04:48,720
why it's in the csp and how they were

175
00:04:48,720 --> 00:04:50,080
related to each other

176
00:04:50,080 --> 00:04:51,440
it turned out that this company was a

177
00:04:51,440 --> 00:04:53,120
vendor that built applications for the

178
00:04:53,120 --> 00:04:55,280
for the company i was hiking on i

179
00:04:55,280 --> 00:04:56,720
continued doing recon and ended up

180
00:04:56,720 --> 00:04:58,400
finding an interesting pdf file

181
00:04:58,400 --> 00:05:00,720
by simply doing a google door the file

182
00:05:00,720 --> 00:05:02,080
contained instructions on how to install

183
00:05:02,080 --> 00:05:03,840
and configure wordpress and of course it

184
00:05:03,840 --> 00:05:05,520
had credentials in it

185
00:05:05,520 --> 00:05:07,039
but the app i was looking at was

186
00:05:07,039 --> 00:05:08,800
actually built on aem

187
00:05:08,800 --> 00:05:10,880
by default aem accepts basic

188
00:05:10,880 --> 00:05:12,880
authentication on some endpoints

189
00:05:12,880 --> 00:05:14,400
i figured what are the odds that they

190
00:05:14,400 --> 00:05:15,919
use the same credits for

191
00:05:15,919 --> 00:05:17,280
the site that they built on wordpress

192
00:05:17,280 --> 00:05:19,199
and on adobe experience manager

193
00:05:19,199 --> 00:05:20,479
and the and that those quests were

194
00:05:20,479 --> 00:05:22,479
actually still valid well of course you

195
00:05:22,479 --> 00:05:24,000
guessed it

196
00:05:24,000 --> 00:05:27,039
it worked and they also had admin rights

197
00:05:27,039 --> 00:05:29,440
in aem once you have admin rights it's

198
00:05:29,440 --> 00:05:31,039
really easy to get a narcissi

199
00:05:31,039 --> 00:05:32,639
you can you simply need to upload a

200
00:05:32,639 --> 00:05:35,120
bundle i think luck was a huge part of

201
00:05:35,120 --> 00:05:36,080
this bug

202
00:05:36,080 --> 00:05:37,840
but it does show that sometimes looking

203
00:05:37,840 --> 00:05:40,320
elsewhere can result in impactful bugs

204
00:05:40,320 --> 00:05:43,280
and also shout out to a mikael aka zero

205
00:05:43,280 --> 00:05:44,080
angel

206
00:05:44,080 --> 00:05:47,360
for that malicious bundle with this

207
00:05:47,360 --> 00:05:48,080
second bug

208
00:05:48,080 --> 00:05:50,320
as i mentioned earlier i try to approach

209
00:05:50,320 --> 00:05:52,080
web applications in a way that no other

210
00:05:52,080 --> 00:05:53,280
hackers have

211
00:05:53,280 --> 00:05:54,720
what i've been doing recently is using

212
00:05:54,720 --> 00:05:56,560
products like slack and teams

213
00:05:56,560 --> 00:05:58,160
these products have apps that allow you

214
00:05:58,160 --> 00:05:59,520
to interact directly with target

215
00:05:59,520 --> 00:06:00,560
applications

216
00:06:00,560 --> 00:06:02,240
and many of those apps actually have

217
00:06:02,240 --> 00:06:04,000
blockbuster programs as we can see in

218
00:06:04,000 --> 00:06:05,280
the screenshot

219
00:06:05,280 --> 00:06:07,120
i won't expand too much on these bugs as

220
00:06:07,120 --> 00:06:08,720
each slack or teams app

221
00:06:08,720 --> 00:06:10,160
is different and they all have a

222
00:06:10,160 --> 00:06:12,400
different purpose for example

223
00:06:12,400 --> 00:06:14,319
some are only used to read data or for

224
00:06:14,319 --> 00:06:16,240
web hooks while others you can create

225
00:06:16,240 --> 00:06:17,600
and update data on the target

226
00:06:17,600 --> 00:06:18,639
application

227
00:06:18,639 --> 00:06:20,080
you practically only have to use the

228
00:06:20,080 --> 00:06:22,160
targets app on slack or teams

229
00:06:22,160 --> 00:06:24,479
and try to find bugs that way as an

230
00:06:24,479 --> 00:06:25,680
example with slack

231
00:06:25,680 --> 00:06:27,520
i focused on apps that had the option to

232
00:06:27,520 --> 00:06:29,440
create data through commands

233
00:06:29,440 --> 00:06:31,440
by running these commands i was able to

234
00:06:31,440 --> 00:06:33,759
do stuff that normally i wasn't able to

235
00:06:33,759 --> 00:06:35,840
directly on the web app i've never

236
00:06:35,840 --> 00:06:37,759
really built i've never actually built a

237
00:06:37,759 --> 00:06:38,639
slack app

238
00:06:38,639 --> 00:06:40,319
so i'm not really exactly sure what the

239
00:06:40,319 --> 00:06:42,080
root cause would be i'm guessing it

240
00:06:42,080 --> 00:06:44,080
maybe uses different apis

241
00:06:44,080 --> 00:06:45,280
which probably don't have the same

242
00:06:45,280 --> 00:06:47,360
productions in place as their normal

243
00:06:47,360 --> 00:06:50,479
or the from the api or the web app

244
00:06:50,479 --> 00:06:53,039
if anyone of you listening knows why um

245
00:06:53,039 --> 00:06:54,560
please yummy i'm definitely curious

246
00:06:54,560 --> 00:06:55,840
about it

247
00:06:55,840 --> 00:06:58,720
so with my third bug only the main

248
00:06:58,720 --> 00:07:00,560
application was in scope

249
00:07:00,560 --> 00:07:02,720
i had a cookie-based xss which of course

250
00:07:02,720 --> 00:07:04,240
is a suffix success

251
00:07:04,240 --> 00:07:06,319
i also noticed that all api calls were

252
00:07:06,319 --> 00:07:08,000
done on a separate subdomain

253
00:07:08,000 --> 00:07:10,000
but chords was configured to allow also

254
00:07:10,000 --> 00:07:12,560
the means to interact with it

255
00:07:12,560 --> 00:07:13,840
which meant that if i could make the

256
00:07:13,840 --> 00:07:16,240
sub-success be a valid xss

257
00:07:16,240 --> 00:07:18,560
i'd be able to leak data from the api

258
00:07:18,560 --> 00:07:20,479
however i didn't find a way to do so

259
00:07:20,479 --> 00:07:22,400
i couldn't find any xss on the n-scope

260
00:07:22,400 --> 00:07:23,520
application at all

261
00:07:23,520 --> 00:07:25,280
i knew that if i could find xss on a

262
00:07:25,280 --> 00:07:26,639
separate subdomain

263
00:07:26,639 --> 00:07:28,000
that my chain would work as it would

264
00:07:28,000 --> 00:07:29,840
fill in all my requirements

265
00:07:29,840 --> 00:07:31,280
at this point i simply add the program

266
00:07:31,280 --> 00:07:33,360
if i could look at look for a nexus ss

267
00:07:33,360 --> 00:07:36,240
on a separate subdomain luckily for me

268
00:07:36,240 --> 00:07:38,400
they accepted

269
00:07:38,400 --> 00:07:40,479
and a few hours later i finally found an

270
00:07:40,479 --> 00:07:42,240
xss and was able to complete my chain

271
00:07:42,240 --> 00:07:43,120
and leak

272
00:07:43,120 --> 00:07:46,160
data from the api

273
00:07:46,160 --> 00:07:48,240
so here's the attack with the reflected

274
00:07:48,240 --> 00:07:50,080
xss on the nanoscope domain

275
00:07:50,080 --> 00:07:51,840
i redirected the user to the vulnerable

276
00:07:51,840 --> 00:07:53,440
endpoint where the cookie based access

277
00:07:53,440 --> 00:07:54,639
was located

278
00:07:54,639 --> 00:07:56,319
i used cookie stuffing so my malicious

279
00:07:56,319 --> 00:07:58,000
cookie containing my access payload to

280
00:07:58,000 --> 00:08:00,560
exploit the core's misconfig

281
00:08:00,560 --> 00:08:03,199
as per the http state management

282
00:08:03,199 --> 00:08:03,840
mechanism

283
00:08:03,840 --> 00:08:06,720
rfc the cookies with the longer path are

284
00:08:06,720 --> 00:08:08,400
listed before the ones with the shorter

285
00:08:08,400 --> 00:08:09,120
path

286
00:08:09,120 --> 00:08:10,800
luckily for me the cookie set by the

287
00:08:10,800 --> 00:08:12,400
server didn't actually have a path

288
00:08:12,400 --> 00:08:15,039
so i could simply set anything as a path

289
00:08:15,039 --> 00:08:16,720
my cookie would be the one reflected on

290
00:08:16,720 --> 00:08:17,199
the

291
00:08:17,199 --> 00:08:18,800
on the web page instead of the one set

292
00:08:18,800 --> 00:08:20,400
by the server

293
00:08:20,400 --> 00:08:22,160
and for this i shout out to file the

294
00:08:22,160 --> 00:08:23,520
scriptor for this trick

295
00:08:23,520 --> 00:08:27,039
i learned that from him at h1514

296
00:08:27,039 --> 00:08:29,759
two years ago so now with my cookie

297
00:08:29,759 --> 00:08:30,800
basics it says

298
00:08:30,800 --> 00:08:33,519
i was able to make an xml http request

299
00:08:33,519 --> 00:08:36,559
to the api host and the api pii data

300
00:08:36,559 --> 00:08:38,240
i was able to complete this chain all

301
00:08:38,240 --> 00:08:39,919
because the program allowed me to look

302
00:08:39,919 --> 00:08:40,320
for

303
00:08:40,320 --> 00:08:42,799
reflected xss on nanoscope assets so

304
00:08:42,799 --> 00:08:44,159
lesson to learn here is

305
00:08:44,159 --> 00:08:45,760
if you need a bug on analysis asset to

306
00:08:45,760 --> 00:08:47,360
complete your chain always ask

307
00:08:47,360 --> 00:08:49,760
permission first

308
00:08:49,760 --> 00:08:51,279
so we're now down to the last round of

309
00:08:51,279 --> 00:08:53,839
bugs in the first example i was looking

310
00:08:53,839 --> 00:08:55,279
at an application that was kind of like

311
00:08:55,279 --> 00:08:56,080
a forum

312
00:08:56,080 --> 00:08:58,160
uh users could post content and others

313
00:08:58,160 --> 00:08:59,760
uh would be able to view it and reply

314
00:08:59,760 --> 00:09:03,440
reply to it uuid version four was used

315
00:09:03,440 --> 00:09:05,360
pretty much everywhere so one post ids

316
00:09:05,360 --> 00:09:06,640
user ids

317
00:09:06,640 --> 00:09:09,600
uh reply ids pretty much everywhere i

318
00:09:09,600 --> 00:09:11,279
had a uuid

319
00:09:11,279 --> 00:09:13,760
while testing with my own two accounts i

320
00:09:13,760 --> 00:09:15,120
was able to confirm that multiple

321
00:09:15,120 --> 00:09:16,959
endpoints were vulnerable to idor

322
00:09:16,959 --> 00:09:19,600
and one in particular had pai so

323
00:09:19,600 --> 00:09:21,519
obviously i was very interested in this

324
00:09:21,519 --> 00:09:22,720
one

325
00:09:22,720 --> 00:09:24,959
however as we know we can't just boot

326
00:09:24,959 --> 00:09:27,360
force or guest uids

327
00:09:27,360 --> 00:09:28,959
so it wasn't really exploitable at this

328
00:09:28,959 --> 00:09:30,399
point

329
00:09:30,399 --> 00:09:31,760
and also i didn't find a way to link

330
00:09:31,760 --> 00:09:33,680
them anywhere on the site

331
00:09:33,680 --> 00:09:35,839
when viewing our own profile we could

332
00:09:35,839 --> 00:09:37,279
see post that we had

333
00:09:37,279 --> 00:09:39,440
posted on the on the forum and all

334
00:09:39,440 --> 00:09:40,480
updates that

335
00:09:40,480 --> 00:09:43,600
users had put in it as well and in our

336
00:09:43,600 --> 00:09:44,480
profile when

337
00:09:44,480 --> 00:09:48,080
the url actually contained our own uid

338
00:09:48,080 --> 00:09:50,000
so what i did was reply on someone

339
00:09:50,000 --> 00:09:51,120
else's post

340
00:09:51,120 --> 00:09:53,760
with a link to my site and then when

341
00:09:53,760 --> 00:09:54,480
users

342
00:09:54,480 --> 00:09:57,680
were on their profile um and saw my post

343
00:09:57,680 --> 00:10:00,000
and clicked on my link their uid would

344
00:10:00,000 --> 00:10:02,079
click would leak in the referee header

345
00:10:02,079 --> 00:10:03,600
so i could simply look at my logs and

346
00:10:03,600 --> 00:10:05,839
grab their uid

347
00:10:05,839 --> 00:10:07,519
from here i was able i was easily able

348
00:10:07,519 --> 00:10:09,920
to confirm the idor and submit a report

349
00:10:09,920 --> 00:10:12,560
um however the program at first didn't

350
00:10:12,560 --> 00:10:14,480
accept it as i only got one user's click

351
00:10:14,480 --> 00:10:15,440
on my site

352
00:10:15,440 --> 00:10:18,560
however an hour later i was able to get

353
00:10:18,560 --> 00:10:20,399
five more uids which was enough for the

354
00:10:20,399 --> 00:10:22,480
program to accept my report and reward

355
00:10:22,480 --> 00:10:26,399
accordingly another example bug which

356
00:10:26,399 --> 00:10:28,000
had information linking in the referee

357
00:10:28,000 --> 00:10:28,800
header

358
00:10:28,800 --> 00:10:30,399
was a privileged escalation which got me

359
00:10:30,399 --> 00:10:32,240
into an admin panel

360
00:10:32,240 --> 00:10:34,160
the app didn't have proper authorization

361
00:10:34,160 --> 00:10:35,440
text in place

362
00:10:35,440 --> 00:10:36,959
read-only users were able to escalate

363
00:10:36,959 --> 00:10:39,839
privileges and write content to the site

364
00:10:39,839 --> 00:10:42,399
so this made me wonder whether the admin

365
00:10:42,399 --> 00:10:44,720
panel was configured in the same way

366
00:10:44,720 --> 00:10:46,959
but the thing is um we didn't know the

367
00:10:46,959 --> 00:10:48,880
path to the admin panel

368
00:10:48,880 --> 00:10:50,800
uh tried directly brute forcing to find

369
00:10:50,800 --> 00:10:54,160
it i put a few blindness payloads in

370
00:10:54,160 --> 00:10:56,800
strategic places like the contact us

371
00:10:56,800 --> 00:10:58,839
form and stuff like that but none of it

372
00:10:58,839 --> 00:11:00,240
worked

373
00:11:00,240 --> 00:11:02,160
so then i thought what if i just send a

374
00:11:02,160 --> 00:11:04,399
link in the contact us form

375
00:11:04,399 --> 00:11:07,279
and yeah as you'd imagine and then men

376
00:11:07,279 --> 00:11:07,920
saw it

377
00:11:07,920 --> 00:11:10,640
clicked on my link and the admin

378
00:11:10,640 --> 00:11:11,680
endpoint

379
00:11:11,680 --> 00:11:14,399
path was leaked in the refer header and

380
00:11:14,399 --> 00:11:15,839
indeed

381
00:11:15,839 --> 00:11:17,519
this gave me access to the main panel

382
00:11:17,519 --> 00:11:20,399
directly the path was quite random

383
00:11:20,399 --> 00:11:22,399
uh it would have probably taken me quite

384
00:11:22,399 --> 00:11:24,720
a f a long time let's say

385
00:11:24,720 --> 00:11:28,079
to guess or brute force in this last

386
00:11:28,079 --> 00:11:28,880
example bug

387
00:11:28,880 --> 00:11:31,680
where i posted a link somewhere um this

388
00:11:31,680 --> 00:11:33,360
one isn't about a referrer leak like the

389
00:11:33,360 --> 00:11:34,480
previous two

390
00:11:34,480 --> 00:11:36,399
uh something a bit different i've been

391
00:11:36,399 --> 00:11:37,600
doing uh this

392
00:11:37,600 --> 00:11:40,399
for for a while now and i had some

393
00:11:40,399 --> 00:11:41,680
success with it so i figured i could

394
00:11:41,680 --> 00:11:42,959
share it

395
00:11:42,959 --> 00:11:44,560
uh to me it's like the advanced version

396
00:11:44,560 --> 00:11:46,240
of blind xss

397
00:11:46,240 --> 00:11:47,680
instead of popping a buying success in

398
00:11:47,680 --> 00:11:49,760
event panel uh why not have

399
00:11:49,760 --> 00:11:52,320
uh an admin or an employee pop a shell

400
00:11:52,320 --> 00:11:53,440
for you

401
00:11:53,440 --> 00:11:55,680
so here's how i got an rc on an internal

402
00:11:55,680 --> 00:11:56,720
asset

403
00:11:56,720 --> 00:11:59,040
so this web application had quite a few

404
00:11:59,040 --> 00:12:01,680
features that required admin approval

405
00:12:01,680 --> 00:12:04,720
with the admins being actual employees

406
00:12:04,720 --> 00:12:06,720
while doing recon on github i found that

407
00:12:06,720 --> 00:12:08,480
intel jenkins a domain

408
00:12:08,480 --> 00:12:12,079
like jenkins.internal so i was curious

409
00:12:12,079 --> 00:12:13,519
to see if this

410
00:12:13,519 --> 00:12:16,480
server was vulnerable to the rcs that

411
00:12:16,480 --> 00:12:17,920
orange found

412
00:12:17,920 --> 00:12:21,279
i think it was last year from my own

413
00:12:21,279 --> 00:12:24,160
personal experience companies don't

414
00:12:24,160 --> 00:12:26,000
always pass their internal

415
00:12:26,000 --> 00:12:27,680
assets since they believe that they're

416
00:12:27,680 --> 00:12:30,560
secure since it's internal

417
00:12:30,560 --> 00:12:34,959
but of course this as we know isn't true

418
00:12:34,959 --> 00:12:36,720
unfortunately though i didn't find any

419
00:12:36,720 --> 00:12:39,120
way to get access to it i didn't find

420
00:12:39,120 --> 00:12:39,440
any

421
00:12:39,440 --> 00:12:42,399
ssrf or anything so i was able to

422
00:12:42,399 --> 00:12:43,120
validate

423
00:12:43,120 --> 00:12:46,399
um my curiosity

424
00:12:46,399 --> 00:12:48,720
then i thought what if the admins do

425
00:12:48,720 --> 00:12:50,240
have access to it like if they are on

426
00:12:50,240 --> 00:12:51,200
vpn

427
00:12:51,200 --> 00:12:53,360
or just like in the office maybe they

428
00:12:53,360 --> 00:12:55,920
have access to jenkins

429
00:12:55,920 --> 00:12:58,399
but how would i confirm this so what i

430
00:12:58,399 --> 00:12:59,519
did is sent an

431
00:12:59,519 --> 00:13:01,680
um an access request which of course

432
00:13:01,680 --> 00:13:03,279
required i'm in approval

433
00:13:03,279 --> 00:13:05,839
in the request i put a link to my site

434
00:13:05,839 --> 00:13:06,880
now the link that i put

435
00:13:06,880 --> 00:13:10,000
and the access requests it wasn't the

436
00:13:10,000 --> 00:13:11,200
actual jenkins

437
00:13:11,200 --> 00:13:13,600
url i figured that if the admin saw that

438
00:13:13,600 --> 00:13:14,800
he would have been like

439
00:13:14,800 --> 00:13:16,560
um how does this guy know we have

440
00:13:16,560 --> 00:13:18,000
jenskins um

441
00:13:18,000 --> 00:13:19,600
i'm not i'm not gonna click on it this

442
00:13:19,600 --> 00:13:21,040
is weird it's fishy

443
00:13:21,040 --> 00:13:23,200
i'll just ignore it so what i did is put

444
00:13:23,200 --> 00:13:24,320
a link to my site

445
00:13:24,320 --> 00:13:26,880
uh which actually redirected them to the

446
00:13:26,880 --> 00:13:27,839
uh jenkins

447
00:13:27,839 --> 00:13:31,760
rc uh url that i put

448
00:13:32,160 --> 00:13:33,519
and since i was able to view the

449
00:13:33,519 --> 00:13:36,000
response obviously uh the rc payload

450
00:13:36,000 --> 00:13:37,680
that i put was a reverse cell

451
00:13:37,680 --> 00:13:39,040
that would kind of back connect back to

452
00:13:39,040 --> 00:13:40,880
my server and

453
00:13:40,880 --> 00:13:43,120
a few hours after i send the request i

454
00:13:43,120 --> 00:13:45,279
got a hit on my server with the endpoint

455
00:13:45,279 --> 00:13:45,920
that i put

456
00:13:45,920 --> 00:13:49,680
for that specific plc

457
00:13:49,680 --> 00:13:51,360
and then right away i got a connection

458
00:13:51,360 --> 00:13:53,519
back from the jenkins server

459
00:13:53,519 --> 00:13:55,680
confirming that it was indeed vulnerable

460
00:13:55,680 --> 00:13:56,959
um so this is something i've been doing

461
00:13:56,959 --> 00:13:58,160
for the past year or so

462
00:13:58,160 --> 00:14:00,399
it takes a lot of recon on some domains

463
00:14:00,399 --> 00:14:01,680
uh some some domains

464
00:14:01,680 --> 00:14:04,000
don't resolve publicly doesn't mean that

465
00:14:04,000 --> 00:14:05,600
it doesn't resolve internally and also

466
00:14:05,600 --> 00:14:06,959
it doesn't mean that

467
00:14:06,959 --> 00:14:09,440
it doesn't exist so with this little

468
00:14:09,440 --> 00:14:10,000
trick

469
00:14:10,000 --> 00:14:11,680
as i've shown it's possible to exploit

470
00:14:11,680 --> 00:14:13,680
bugs on internal assets

471
00:14:13,680 --> 00:14:16,560
um so using this technique i've got i

472
00:14:16,560 --> 00:14:19,839
got a few rcu's and some reflected xss

473
00:14:19,839 --> 00:14:23,440
um since it's completely blind um

474
00:14:23,440 --> 00:14:24,639
since you're not actually the one

475
00:14:24,639 --> 00:14:26,959
attacking the site you cannot have you

476
00:14:26,959 --> 00:14:27,760
kind of need

477
00:14:27,760 --> 00:14:31,440
to have a way of communicating back to

478
00:14:31,440 --> 00:14:31,839
your

479
00:14:31,839 --> 00:14:35,279
to yourself uh out of band um

480
00:14:35,279 --> 00:14:38,000
so with rcs and xss of course it's

481
00:14:38,000 --> 00:14:38,959
possible

482
00:14:38,959 --> 00:14:40,720
um there might be some more bugs that

483
00:14:40,720 --> 00:14:42,320
i'm not thinking thinking of maybe like

484
00:14:42,320 --> 00:14:43,040
xsc

485
00:14:43,040 --> 00:14:45,920
xxe but yeah it's something i will

486
00:14:45,920 --> 00:14:47,839
probably have to research more on

487
00:14:47,839 --> 00:14:51,120
um so yeah i hope

488
00:14:51,120 --> 00:14:53,199
you like my talk uh thanks thank you a

489
00:14:53,199 --> 00:14:54,399
lot for listening

490
00:14:54,399 --> 00:14:56,320
if you have any questions or comments my

491
00:14:56,320 --> 00:14:58,399
dm's are open on twitter so i don't

492
00:14:58,399 --> 00:14:59,680
hesitate to reach out

493
00:14:59,680 --> 00:15:13,839
reply as soon as possible thanks again

494
00:15:44,079 --> 00:15:46,160
you

