1
00:00:01,150 --> 00:00:05,840
[Music]

2
00:00:06,000 --> 00:00:06,879
hello guys

3
00:00:06,879 --> 00:00:10,559
i'm boyk today i'm gonna talk about how

4
00:00:10,559 --> 00:00:12,240
you can utilize code ul

5
00:00:12,240 --> 00:00:14,719
to discover vulnerabilities and do

6
00:00:14,719 --> 00:00:17,919
variance analysis

7
00:00:18,560 --> 00:00:21,680
so hi again i'm boeing from taiwan i'm

8
00:00:21,680 --> 00:00:23,600
currently the security researcher

9
00:00:23,600 --> 00:00:26,560
at scicraft a member of change roots a

10
00:00:26,560 --> 00:00:28,240
private security research group in

11
00:00:28,240 --> 00:00:29,199
taiwan

12
00:00:29,199 --> 00:00:32,800
and a programming lover

13
00:00:34,160 --> 00:00:36,800
so here is the agenda for today's talk

14
00:00:36,800 --> 00:00:38,719
at first i will briefly introduce the

15
00:00:38,719 --> 00:00:40,640
background knowledge and the terminology

16
00:00:40,640 --> 00:00:42,000
of code ql

17
00:00:42,000 --> 00:00:43,760
including some best features and

18
00:00:43,760 --> 00:00:45,600
examples

19
00:00:45,600 --> 00:00:47,920
next i will demonstrate how you can use

20
00:00:47,920 --> 00:00:50,800
code ql to discover vulnerabilities

21
00:00:50,800 --> 00:00:52,800
to find things you are interested in and

22
00:00:52,800 --> 00:00:56,718
to be helpful in sdlc

23
00:00:56,960 --> 00:00:59,680
and lastly there will be a conclusion to

24
00:00:59,680 --> 00:01:02,879
sum up to this talk

25
00:01:04,080 --> 00:01:07,199
so let's get started

26
00:01:07,360 --> 00:01:10,640
so what is code ql

27
00:01:10,640 --> 00:01:12,880
i believe that many of you have heard of

28
00:01:12,880 --> 00:01:14,479
this tool before

29
00:01:14,479 --> 00:01:17,360
since it's widely used by many security

30
00:01:17,360 --> 00:01:18,320
researchers

31
00:01:18,320 --> 00:01:21,360
and big brands like github mozilla

32
00:01:21,360 --> 00:01:24,159
and intel

33
00:01:24,400 --> 00:01:27,439
this is a brief overview of how code qr

34
00:01:27,439 --> 00:01:30,320
handles both suggestions and evaluation

35
00:01:30,320 --> 00:01:31,439
as you can see

36
00:01:31,439 --> 00:01:35,200
the codebase is extracted by proprietary

37
00:01:35,200 --> 00:01:36,159
extractors

38
00:01:36,159 --> 00:01:39,360
and stored as a snapshot database

39
00:01:39,360 --> 00:01:42,799
and each database contains queriable

40
00:01:42,799 --> 00:01:43,680
data

41
00:01:43,680 --> 00:01:45,920
variable data extracted from the

42
00:01:45,920 --> 00:01:47,119
codebase

43
00:01:47,119 --> 00:01:50,159
for a single language at a particular

44
00:01:50,159 --> 00:01:53,200
point in time which means that if a

45
00:01:53,200 --> 00:01:54,000
project use

46
00:01:54,000 --> 00:01:56,479
multiple languages you can have a

47
00:01:56,479 --> 00:01:59,439
database for each language

48
00:01:59,439 --> 00:02:02,399
and a copy of the code to display your

49
00:02:02,399 --> 00:02:05,520
query results on

50
00:02:05,520 --> 00:02:08,000
once we get the database we can then use

51
00:02:08,000 --> 00:02:10,239
cochlear query to get data

52
00:02:10,239 --> 00:02:13,840
that we want in many ways

53
00:02:15,599 --> 00:02:18,959
so coql has provided extensive libraries

54
00:02:18,959 --> 00:02:21,280
to value to variance analysis

55
00:02:21,280 --> 00:02:23,840
including static analysis data flow

56
00:02:23,840 --> 00:02:24,560
analysis

57
00:02:24,560 --> 00:02:28,160
test analysis and the cfg analysis

58
00:02:28,160 --> 00:02:30,160
you don't have to worry about supporting

59
00:02:30,160 --> 00:02:31,360
languages

60
00:02:31,360 --> 00:02:34,400
codeql provides many common languages at

61
00:02:34,400 --> 00:02:35,840
a time

62
00:02:35,840 --> 00:02:39,360
additionally codeql is not a kind of

63
00:02:39,360 --> 00:02:41,120
tool that will automatically find

64
00:02:41,120 --> 00:02:44,160
vulnerabilities for you it is a tool

65
00:02:44,160 --> 00:02:47,519
that simplifies the process for you

66
00:02:47,519 --> 00:02:48,959
you don't need to prepare the

67
00:02:48,959 --> 00:02:51,200
environment and the tools to do

68
00:02:51,200 --> 00:02:55,680
this analysis which is really exhausted

69
00:02:55,680 --> 00:02:58,879
codeql benefits you by providing where

70
00:02:58,879 --> 00:03:01,040
organized extensive libraries

71
00:03:01,040 --> 00:03:02,840
so that you guide your rules

72
00:03:02,840 --> 00:03:05,840
semantically

73
00:03:07,920 --> 00:03:10,159
static analysis is the most

74
00:03:10,159 --> 00:03:13,200
straightforward analysis you would use

75
00:03:13,200 --> 00:03:16,480
in the first step of the analysis

76
00:03:16,480 --> 00:03:19,599
it can fade any static data fast

77
00:03:19,599 --> 00:03:22,640
and accurately

78
00:03:22,640 --> 00:03:25,040
it is common that researchers use

79
00:03:25,040 --> 00:03:26,480
standard analysis

80
00:03:26,480 --> 00:03:29,840
to search for hard-coded things like

81
00:03:29,840 --> 00:03:30,959
password

82
00:03:30,959 --> 00:03:35,120
api key or the misuse of a dangerous

83
00:03:35,120 --> 00:03:37,519
function

84
00:03:39,040 --> 00:03:42,879
check out the check out examples here

85
00:03:42,879 --> 00:03:46,159
on the left we write a simple query to

86
00:03:46,159 --> 00:03:49,120
find all the occurrence of the function

87
00:03:49,120 --> 00:03:52,480
execute while on the right

88
00:03:52,480 --> 00:03:55,360
we write another simple query to search

89
00:03:55,360 --> 00:03:58,239
for hardcoded password

90
00:03:58,239 --> 00:04:01,280
these queries are simple but helpful

91
00:04:01,280 --> 00:04:03,760
if you are searching low hanging fruits

92
00:04:03,760 --> 00:04:08,079
and it did return some results back

93
00:04:08,799 --> 00:04:12,239
this one is more complicated we extend a

94
00:04:12,239 --> 00:04:13,599
class from info

95
00:04:13,599 --> 00:04:17,600
expression a predefined class in codeql

96
00:04:17,600 --> 00:04:21,199
to find all objects that are invokable

97
00:04:21,199 --> 00:04:24,880
for example functions or constructors

98
00:04:24,880 --> 00:04:27,440
the systemic class will try to find all

99
00:04:27,440 --> 00:04:28,240
occurrence of

100
00:04:28,240 --> 00:04:33,120
regular expressions the content dot star

101
00:04:33,120 --> 00:04:36,320
why do we do this it is because that

102
00:04:36,320 --> 00:04:38,240
sound developers will write down this

103
00:04:38,240 --> 00:04:39,680
regular expression

104
00:04:39,680 --> 00:04:43,360
but want to match the real dots actually

105
00:04:43,360 --> 00:04:46,000
this is a common pitfall for especially

106
00:04:46,000 --> 00:04:48,080
junior developers

107
00:04:48,080 --> 00:04:49,919
though seniors might make the same

108
00:04:49,919 --> 00:04:52,799
mistake too

109
00:04:54,240 --> 00:04:57,759
data flow analysis is used to compute

110
00:04:57,759 --> 00:05:00,320
the possible values that a variable can

111
00:05:00,320 --> 00:05:00,880
hold

112
00:05:00,880 --> 00:05:04,080
at various points in a program

113
00:05:04,080 --> 00:05:06,720
determine how those values propagate

114
00:05:06,720 --> 00:05:08,080
through the program

115
00:05:08,080 --> 00:05:11,919
and where they are used therefore

116
00:05:11,919 --> 00:05:14,639
use this feature well will help us

117
00:05:14,639 --> 00:05:16,800
evaluate in different points

118
00:05:16,800 --> 00:05:19,840
the fate of some malign or insecure

119
00:05:19,840 --> 00:05:23,680
data if data is used in a dangerous way

120
00:05:23,680 --> 00:05:26,880
which will reveal some possible links or

121
00:05:26,880 --> 00:05:30,560
even impactful flaws

122
00:05:30,560 --> 00:05:33,919
besides it can also let us understand

123
00:05:33,919 --> 00:05:35,280
other aspects

124
00:05:35,280 --> 00:05:38,800
of how a program behaves and leads us

125
00:05:38,800 --> 00:05:43,199
to other intriguing paths maybe

126
00:05:44,720 --> 00:05:47,759
this query is a lot complicated than the

127
00:05:47,759 --> 00:05:50,560
queries i present in the previous slide

128
00:05:50,560 --> 00:05:53,360
and it is to find interesting functions

129
00:05:53,360 --> 00:05:54,560
arguments

130
00:05:54,560 --> 00:05:58,080
they are controllable by users

131
00:05:58,080 --> 00:06:01,120
with this query i'm able to see how a

132
00:06:01,120 --> 00:06:02,639
program will behave

133
00:06:02,639 --> 00:06:07,840
after receiving my inputs

134
00:06:08,400 --> 00:06:11,120
10 tracking differs from backstage data

135
00:06:11,120 --> 00:06:12,000
flow

136
00:06:12,000 --> 00:06:14,960
that considers non-value preserving

137
00:06:14,960 --> 00:06:15,680
steps

138
00:06:15,680 --> 00:06:19,360
in addition to normal data flow stops

139
00:06:19,360 --> 00:06:22,560
for example in the assignment

140
00:06:22,560 --> 00:06:25,759
y equals 10 plus comma

141
00:06:25,759 --> 00:06:29,600
plus 10 if x extended

142
00:06:29,600 --> 00:06:33,199
then y is also tempted even though there

143
00:06:33,199 --> 00:06:35,680
is no data flow from 10 to 10

144
00:06:35,680 --> 00:06:39,360
plus comma plus 10.

145
00:06:40,479 --> 00:06:43,199
the 10 tracking library is in the 10

146
00:06:43,199 --> 00:06:44,960
tracking module

147
00:06:44,960 --> 00:06:48,000
any 10 tracking or data flow analysis

148
00:06:48,000 --> 00:06:52,479
query has three implicit com components

149
00:06:52,479 --> 00:06:56,000
one of which is optional and an implicit

150
00:06:56,000 --> 00:06:57,759
component

151
00:06:57,759 --> 00:07:01,120
the implicit components are

152
00:07:01,120 --> 00:07:03,759
one or more sources of potentially

153
00:07:03,759 --> 00:07:04,479
insecure

154
00:07:04,479 --> 00:07:07,840
or unsafe data represented by the 10

155
00:07:07,840 --> 00:07:08,880
tracking source

156
00:07:08,880 --> 00:07:12,240
class one or more

157
00:07:12,240 --> 00:07:15,440
things to where the data or tents may

158
00:07:15,440 --> 00:07:16,639
flow

159
00:07:16,639 --> 00:07:19,120
represented by the 10 tracking sync

160
00:07:19,120 --> 00:07:21,440
class

161
00:07:21,440 --> 00:07:25,440
0 or more sanitizers represented by

162
00:07:25,440 --> 00:07:28,800
the sanitizer class

163
00:07:29,479 --> 00:07:32,800
18 tracking or data flow query

164
00:07:32,800 --> 00:07:35,759
gives results when there is a flow of

165
00:07:35,759 --> 00:07:37,520
data from the source to

166
00:07:37,520 --> 00:07:42,479
a sync which is not blocked by a

167
00:07:42,840 --> 00:07:45,199
sanitizer

168
00:07:45,199 --> 00:07:49,280
the last one is cfg analysis

169
00:07:49,280 --> 00:07:52,639
but honestly i don't see much about the

170
00:07:52,639 --> 00:07:54,240
use case

171
00:07:54,240 --> 00:07:57,199
so if you are interested you can get

172
00:07:57,199 --> 00:07:58,160
more information

173
00:07:58,160 --> 00:08:01,680
from codeql's page but i will just skip

174
00:08:01,680 --> 00:08:04,240
this one

175
00:08:06,800 --> 00:08:09,440
now i will talk about the practical

176
00:08:09,440 --> 00:08:12,800
usages of code ql there are literally

177
00:08:12,800 --> 00:08:13,680
things that i do

178
00:08:13,680 --> 00:08:17,599
every day to help with my research

179
00:08:20,080 --> 00:08:23,759
so the first one replicates cves to find

180
00:08:23,759 --> 00:08:27,360
you cpus it means that we model

181
00:08:27,360 --> 00:08:29,440
all the vulnerabilities to find them

182
00:08:29,440 --> 00:08:31,840
somewhere in the same code base

183
00:08:31,840 --> 00:08:36,159
or other code bases firstly

184
00:08:36,159 --> 00:08:38,640
you will learn the vulnerabilities more

185
00:08:38,640 --> 00:08:40,320
in details

186
00:08:40,320 --> 00:08:43,679
while writing quote ql query

187
00:08:43,679 --> 00:08:46,640
and after the writing you will be able

188
00:08:46,640 --> 00:08:48,640
to query other projects to find

189
00:08:48,640 --> 00:08:50,399
treasures

190
00:08:50,399 --> 00:08:53,920
of course it is important to write query

191
00:08:53,920 --> 00:08:56,399
in a general concept

192
00:08:56,399 --> 00:08:58,399
meaning that you should understand the

193
00:08:58,399 --> 00:09:02,800
flaw and know the concepts of it

194
00:09:04,080 --> 00:09:06,839
this one is actually a real report from

195
00:09:06,839 --> 00:09:08,399
everyone

196
00:09:08,399 --> 00:09:10,800
look at these two regular expressions

197
00:09:10,800 --> 00:09:14,800
could you identify the vulnerability

198
00:09:18,959 --> 00:09:22,320
so the issues stands from the fact that

199
00:09:22,320 --> 00:09:23,279
they use

200
00:09:23,279 --> 00:09:26,800
dots instead of real dots

201
00:09:26,800 --> 00:09:30,000
in these two regular expressions

202
00:09:30,000 --> 00:09:32,080
which will make the regular expression

203
00:09:32,080 --> 00:09:33,920
fail to match the real dots

204
00:09:33,920 --> 00:09:37,200
in url it matches anything

205
00:09:37,200 --> 00:09:39,760
instead

206
00:09:41,680 --> 00:09:45,120
it means that once a hacker has owned a

207
00:09:45,120 --> 00:09:46,480
domain like

208
00:09:46,480 --> 00:09:49,040
totally not twitter.com just like the

209
00:09:49,040 --> 00:09:50,000
page i show you

210
00:09:50,000 --> 00:09:53,279
here in this case it can trigger the

211
00:09:53,279 --> 00:09:54,959
extension to pop out

212
00:09:54,959 --> 00:09:59,599
to pop out under the wrong contacts

213
00:10:01,360 --> 00:10:04,000
we have said that this is a typically

214
00:10:04,000 --> 00:10:06,720
suitable case for the static analysis

215
00:10:06,720 --> 00:10:08,720
because we want to hunt for static

216
00:10:08,720 --> 00:10:10,079
things

217
00:10:10,079 --> 00:10:12,560
just reuse the code snippets i wrote

218
00:10:12,560 --> 00:10:13,519
before

219
00:10:13,519 --> 00:10:16,240
and applied all the code bases to see

220
00:10:16,240 --> 00:10:19,839
what results we get

221
00:10:21,200 --> 00:10:23,839
after applying to electron with

222
00:10:23,839 --> 00:10:26,640
javascript language snapshot database

223
00:10:26,640 --> 00:10:29,040
we quickly identified that there is a

224
00:10:29,040 --> 00:10:31,600
send vulnerabilities in electron code

225
00:10:31,600 --> 00:10:33,920
gas

226
00:10:34,880 --> 00:10:37,839
some of you might haven't heard of it

227
00:10:37,839 --> 00:10:39,120
before

228
00:10:39,120 --> 00:10:42,640
so electron is a framework field on top

229
00:10:42,640 --> 00:10:45,360
of node.js and chromium to let

230
00:10:45,360 --> 00:10:46,160
developers

231
00:10:46,160 --> 00:10:48,000
write cross-platform desktop

232
00:10:48,000 --> 00:10:49,279
applications

233
00:10:49,279 --> 00:10:52,320
using javascript html and

234
00:10:52,320 --> 00:10:55,760
css technology

235
00:10:55,760 --> 00:10:58,320
the vulnerability here affects the same

236
00:10:58,320 --> 00:11:00,880
functionality provided by chromium

237
00:11:00,880 --> 00:11:03,360
so that developers no extensions in

238
00:11:03,360 --> 00:11:06,000
electron

239
00:11:10,079 --> 00:11:13,120
and the patch is really simple

240
00:11:13,120 --> 00:11:15,360
just make sure that all special

241
00:11:15,360 --> 00:11:16,560
characters

242
00:11:16,560 --> 00:11:20,640
get escaped correctly

243
00:11:22,800 --> 00:11:25,279
here is another case that i found

244
00:11:25,279 --> 00:11:28,480
recently in this year due to a

245
00:11:28,480 --> 00:11:30,720
penetration testing case

246
00:11:30,720 --> 00:11:33,600
i stumbled upon this framework for the

247
00:11:33,600 --> 00:11:36,160
first time

248
00:11:36,720 --> 00:11:39,279
besides i noticed that they use an

249
00:11:39,279 --> 00:11:41,760
endpoint to serve different types of

250
00:11:41,760 --> 00:11:44,720
static files

251
00:11:44,880 --> 00:11:48,640
not a common scenario

252
00:11:51,760 --> 00:11:55,600
and it works like this you just provide

253
00:11:55,600 --> 00:11:59,519
a base64 encoded string to the parameter

254
00:11:59,519 --> 00:12:03,839
and it will return its contents

255
00:12:04,399 --> 00:12:07,760
it will first delete base64 decoder

256
00:12:07,760 --> 00:12:08,720
string

257
00:12:08,720 --> 00:12:11,920
to get the real path and then read the

258
00:12:11,920 --> 00:12:12,639
content

259
00:12:12,639 --> 00:12:15,519
from the file

260
00:12:18,079 --> 00:12:20,720
after checking old vulnerabilities it

261
00:12:20,720 --> 00:12:22,240
had before

262
00:12:22,240 --> 00:12:24,560
it seems that this library is prone to

263
00:12:24,560 --> 00:12:25,279
local file

264
00:12:25,279 --> 00:12:28,399
inclusion issue for several times

265
00:12:28,399 --> 00:12:30,880
a good target for various analysis

266
00:12:30,880 --> 00:12:33,440
definitely

267
00:12:33,440 --> 00:12:35,680
in addition to client dependency in this

268
00:12:35,680 --> 00:12:37,040
library

269
00:12:37,040 --> 00:12:39,519
the unbroken forms seem to be a good

270
00:12:39,519 --> 00:12:42,160
target as well

271
00:12:42,160 --> 00:12:44,800
maybe we try to do various analysis

272
00:12:44,800 --> 00:12:46,240
toward it

273
00:12:46,240 --> 00:12:48,240
but we will just focus on client

274
00:12:48,240 --> 00:12:53,839
dependency this time

275
00:12:54,320 --> 00:12:57,279
this is how a local file inclusion

276
00:12:57,279 --> 00:12:58,079
happened to

277
00:12:58,079 --> 00:13:01,519
the client dependency library it is

278
00:13:01,519 --> 00:13:06,399
really straightforward right

279
00:13:06,399 --> 00:13:09,519
so after sending the payload

280
00:13:09,519 --> 00:13:12,959
we will be uh we will get

281
00:13:12,959 --> 00:13:21,839
the real content of the file web.config

282
00:13:22,480 --> 00:13:26,000
okay so uh let's model this flow

283
00:13:26,000 --> 00:13:28,320
and because it will take up too much of

284
00:13:28,320 --> 00:13:29,440
my time to

285
00:13:29,440 --> 00:13:32,320
cover all steps about how i trust the

286
00:13:32,320 --> 00:13:33,120
code

287
00:13:33,120 --> 00:13:35,000
to find the root cause of these two

288
00:13:35,000 --> 00:13:36,959
vulnerabilities

289
00:13:36,959 --> 00:13:40,320
i will skip them then

290
00:13:40,320 --> 00:13:45,279
however it probably goes like this

291
00:13:45,440 --> 00:13:48,560
there is a user controllable input

292
00:13:48,560 --> 00:13:51,760
which will be intercepted by the classes

293
00:13:51,760 --> 00:13:55,839
implementing ihttp handler interface

294
00:13:55,839 --> 00:13:59,760
we call them source

295
00:14:00,079 --> 00:14:03,120
there is a weak point that

296
00:14:03,120 --> 00:14:06,000
will read content files and send back us

297
00:14:06,000 --> 00:14:06,639
this

298
00:14:06,639 --> 00:14:10,560
response body after reviewing the code

299
00:14:10,560 --> 00:14:13,839
the source code we know that this weak

300
00:14:13,839 --> 00:14:16,079
point is from the function

301
00:14:16,079 --> 00:14:19,920
write file to string so we called it

302
00:14:19,920 --> 00:14:22,319
sync

303
00:14:26,880 --> 00:14:29,760
so in this case tens analysis is

304
00:14:29,760 --> 00:14:30,800
definitely

305
00:14:30,800 --> 00:14:34,000
is definitely the go-to

306
00:14:34,000 --> 00:14:36,720
after modeling with code ql to find

307
00:14:36,720 --> 00:14:37,440
those two

308
00:14:37,440 --> 00:14:41,199
old flaws i can successfully discover a

309
00:14:41,199 --> 00:14:41,920
new one

310
00:14:41,920 --> 00:14:45,120
with the same code ul query with a

311
00:14:45,120 --> 00:14:45,680
slight

312
00:14:45,680 --> 00:14:49,440
modification and the modification

313
00:14:49,440 --> 00:14:51,600
literally leads me to another

314
00:14:51,600 --> 00:14:56,000
possible bypass of this patch

315
00:14:56,000 --> 00:14:59,839
to those two vulnerabilities

316
00:15:02,560 --> 00:15:06,480
the last one is to find all methods

317
00:15:06,480 --> 00:15:08,800
that have the qualifying name starting

318
00:15:08,800 --> 00:15:10,600
with

319
00:15:10,600 --> 00:15:12,720
system.web.i http

320
00:15:12,720 --> 00:15:16,800
handler then on the right hand side

321
00:15:16,800 --> 00:15:21,839
source nodes are set as their parameters

322
00:15:24,160 --> 00:15:27,279
on your left things are set as the

323
00:15:27,279 --> 00:15:28,639
function we mentioned

324
00:15:28,639 --> 00:15:32,000
before a copyright of the previous two

325
00:15:32,000 --> 00:15:33,759
flaws

326
00:15:33,759 --> 00:15:35,839
the right hand side is our extra

327
00:15:35,839 --> 00:15:38,480
additional tainted steps

328
00:15:38,480 --> 00:15:42,959
it looks very complicated right it is

329
00:15:42,959 --> 00:15:46,720
it is hard to explain all these steps

330
00:15:46,720 --> 00:15:49,600
but this requires a lot of efforts to

331
00:15:49,600 --> 00:15:51,040
read the source code

332
00:15:51,040 --> 00:15:53,680
and figure out only one situation should

333
00:15:53,680 --> 00:15:57,040
the notes be tempted

334
00:15:57,199 --> 00:16:00,639
i want to state it one more time

335
00:16:00,639 --> 00:16:03,360
don't consider that code ql is a tool

336
00:16:03,360 --> 00:16:05,360
that will automatically find bugs for

337
00:16:05,360 --> 00:16:06,000
you

338
00:16:06,000 --> 00:16:08,560
it needs to be chained and operated by

339
00:16:08,560 --> 00:16:10,720
professionals by nature

340
00:16:10,720 --> 00:16:15,360
in order to find valid box

341
00:16:17,279 --> 00:16:19,759
apart from finding bugs we can also

342
00:16:19,759 --> 00:16:21,279
utilize codeql

343
00:16:21,279 --> 00:16:24,560
as a pattern finder

344
00:16:26,800 --> 00:16:29,759
and because coql set it as a semantic

345
00:16:29,759 --> 00:16:30,959
code analysis

346
00:16:30,959 --> 00:16:33,519
engine it is naturally that you can use

347
00:16:33,519 --> 00:16:35,279
it to find something that you are

348
00:16:35,279 --> 00:16:37,839
targeting

349
00:16:38,079 --> 00:16:40,079
at least some common methodologies that

350
00:16:40,079 --> 00:16:42,000
we use in our daily lives

351
00:16:42,000 --> 00:16:45,600
let's check them out one by one

352
00:16:46,480 --> 00:16:50,000
we are all very familiar with this right

353
00:16:50,000 --> 00:16:53,600
grab to find something statically

354
00:16:53,600 --> 00:16:55,360
and regular expressions to find

355
00:16:55,360 --> 00:16:58,320
something with patterns

356
00:16:58,320 --> 00:17:01,360
although they are easy to use they are

357
00:17:01,360 --> 00:17:02,240
pretty much

358
00:17:02,240 --> 00:17:05,359
vulnerable to false alert

359
00:17:05,359 --> 00:17:07,199
it is because that this kind of

360
00:17:07,199 --> 00:17:09,679
searching methodologies

361
00:17:09,679 --> 00:17:13,039
isn't context aware

362
00:17:15,599 --> 00:17:19,760
and second one uml class diagram

363
00:17:19,760 --> 00:17:22,559
is a graphical notation used to use to

364
00:17:22,559 --> 00:17:23,439
construct and

365
00:17:23,439 --> 00:17:26,880
visualize object-oriented systems

366
00:17:26,880 --> 00:17:29,679
a class diagram in the unified modeling

367
00:17:29,679 --> 00:17:30,480
language

368
00:17:30,480 --> 00:17:33,520
is a type of standard structure diagram

369
00:17:33,520 --> 00:17:36,400
that describes the structure of a system

370
00:17:36,400 --> 00:17:39,039
by showing the systems classes

371
00:17:39,039 --> 00:17:42,080
attributes operations

372
00:17:42,080 --> 00:17:47,440
and relationships among objects

373
00:17:47,440 --> 00:17:51,760
here are some class diagrams in uml

374
00:17:54,640 --> 00:17:58,960
and the typical case that i come up with

375
00:17:58,960 --> 00:18:03,679
is the cve 2018

376
00:18:04,760 --> 00:18:06,880
100861

377
00:18:06,880 --> 00:18:09,559
a jenkins remote code execution

378
00:18:09,559 --> 00:18:12,320
vulnerability

379
00:18:12,320 --> 00:18:14,960
the rationale of this issue is the deuce

380
00:18:14,960 --> 00:18:16,080
constraint

381
00:18:16,080 --> 00:18:19,120
set while doing routing matching and

382
00:18:19,120 --> 00:18:21,840
dispatching

383
00:18:21,840 --> 00:18:25,360
you can see it on the slide the stapler

384
00:18:25,360 --> 00:18:26,799
web framework

385
00:18:26,799 --> 00:18:31,520
staplers most object to urls

386
00:18:31,840 --> 00:18:34,799
therefore all we need to do is to find

387
00:18:34,799 --> 00:18:36,080
good gadgets

388
00:18:36,080 --> 00:18:39,039
to chat all together in order to achieve

389
00:18:39,039 --> 00:18:43,840
remote code execution

390
00:18:45,360 --> 00:18:48,480
so yeah in this case

391
00:18:48,480 --> 00:18:51,919
using uml seems to be a very suitable

392
00:18:51,919 --> 00:18:54,240
case

393
00:18:54,240 --> 00:18:57,679
we can leverage the uml to get our head

394
00:18:57,679 --> 00:19:00,720
around this challenge you can clearly

395
00:19:00,720 --> 00:19:02,960
see how it could be so useful

396
00:19:02,960 --> 00:19:05,280
here

397
00:19:08,559 --> 00:19:10,559
i've said that this gives you extensive

398
00:19:10,559 --> 00:19:12,000
libraries to you so

399
00:19:12,000 --> 00:19:15,760
coql could be easily used for things

400
00:19:15,760 --> 00:19:18,000
besides this gave you results based on

401
00:19:18,000 --> 00:19:18,880
context

402
00:19:18,880 --> 00:19:21,200
and therefore these results are accurate

403
00:19:21,200 --> 00:19:25,840
and meaningful to you

404
00:19:26,400 --> 00:19:28,720
so let me take the umbrella case as an

405
00:19:28,720 --> 00:19:30,960
example one more time

406
00:19:30,960 --> 00:19:33,120
i said that i found a local file

407
00:19:33,120 --> 00:19:35,120
inclusion issue that affects client

408
00:19:35,120 --> 00:19:36,240
dependency

409
00:19:36,240 --> 00:19:38,640
from version one point eight point two

410
00:19:38,640 --> 00:19:39,520
point one

411
00:19:39,520 --> 00:19:42,640
to one point nine point eight

412
00:19:42,640 --> 00:19:44,960
nevertheless in order to achieve remote

413
00:19:44,960 --> 00:19:46,400
code execution

414
00:19:46,400 --> 00:19:49,039
we need to find an entry point that

415
00:19:49,039 --> 00:19:53,840
doesn't require this to be authenticated

416
00:19:57,200 --> 00:20:00,160
so uh how about using codekill out to

417
00:20:00,160 --> 00:20:00,960
find those

418
00:20:00,960 --> 00:20:04,000
pages we can

419
00:20:04,000 --> 00:20:06,240
not only find on authenticated

420
00:20:06,240 --> 00:20:07,200
accessible

421
00:20:07,200 --> 00:20:10,000
pages but have a human readable query to

422
00:20:10,000 --> 00:20:10,400
share

423
00:20:10,400 --> 00:20:14,559
to the community or we can also keep it

424
00:20:14,559 --> 00:20:21,280
somewhere for reference in the future

425
00:20:21,280 --> 00:20:24,640
so once we get a list of pages that we

426
00:20:24,640 --> 00:20:25,679
can directly

427
00:20:25,679 --> 00:20:28,720
access all i need to do is to pick up a

428
00:20:28,720 --> 00:20:29,840
common page

429
00:20:29,840 --> 00:20:32,840
that every copy of umbraco cms would

430
00:20:32,840 --> 00:20:34,320
have so

431
00:20:34,320 --> 00:20:37,520
slash on broncoslashpin.sps seems to be

432
00:20:37,520 --> 00:20:39,440
a good target for me

433
00:20:39,440 --> 00:20:42,640
let's try to explode it

434
00:20:44,240 --> 00:20:48,240
so here is our exploitation

435
00:20:48,240 --> 00:20:50,799
very first step is to use the local file

436
00:20:50,799 --> 00:20:52,880
inclusion vulnerability

437
00:20:52,880 --> 00:20:55,640
to read the content of the file

438
00:20:55,640 --> 00:20:57,760
web.config

439
00:20:57,760 --> 00:21:00,159
so after getting the contents of the

440
00:21:00,159 --> 00:21:01,840
web.config

441
00:21:01,840 --> 00:21:04,559
we can get the machine key to trigger

442
00:21:04,559 --> 00:21:04,960
the

443
00:21:04,960 --> 00:21:09,679
desired deserialization vulnerability

444
00:21:09,840 --> 00:21:13,760
so we use why so serial.net

445
00:21:13,760 --> 00:21:17,120
to construct the malicious object

446
00:21:17,120 --> 00:21:21,080
and our target is slash on broadcast

447
00:21:21,080 --> 00:21:24,480
ping.spx and

448
00:21:24,480 --> 00:21:28,159
our command which will be executed

449
00:21:28,159 --> 00:21:32,320
is who am i all right so everything is

450
00:21:32,320 --> 00:21:33,280
set up

451
00:21:33,280 --> 00:21:37,039
we execute the payload

452
00:21:37,120 --> 00:21:40,320
so after executing the payload we can

453
00:21:40,320 --> 00:21:40,960
get

454
00:21:40,960 --> 00:21:44,000
the output of the command

455
00:21:44,000 --> 00:21:48,400
so our exploitation is successful

456
00:21:51,200 --> 00:21:56,400
okay so regression test our last one

457
00:21:56,400 --> 00:21:59,960
so in this section i want to talk about

458
00:21:59,960 --> 00:22:03,600
ssdlc and how you can apply codeql to

459
00:22:03,600 --> 00:22:05,039
sdlc

460
00:22:05,039 --> 00:22:08,240
namely software development lifecycle

461
00:22:08,240 --> 00:22:13,520
to make it more secure ssdoc

462
00:22:13,520 --> 00:22:16,640
aka sdoc

463
00:22:16,640 --> 00:22:19,280
is the initial design of secure software

464
00:22:19,280 --> 00:22:21,760
development lifecycle

465
00:22:21,760 --> 00:22:24,960
simply put add security activities to

466
00:22:24,960 --> 00:22:27,200
the system development development

467
00:22:27,200 --> 00:22:28,640
lifecycle

468
00:22:28,640 --> 00:22:32,400
preferably in every phase of the sdlc

469
00:22:32,400 --> 00:22:35,840
and formalized if you have heard of

470
00:22:35,840 --> 00:22:37,200
devsecops

471
00:22:37,200 --> 00:22:41,600
it is actually part of it

472
00:22:41,600 --> 00:22:44,880
so how could developers apply codeql to

473
00:22:44,880 --> 00:22:48,400
ssdoc first we could

474
00:22:48,400 --> 00:22:51,360
try to write simple queries to find

475
00:22:51,360 --> 00:22:52,880
hard-coded strings

476
00:22:52,880 --> 00:22:57,280
sensitive data and secure configuration

477
00:22:57,280 --> 00:23:00,400
at the center then we can gradually

478
00:23:00,400 --> 00:23:03,120
rewrite our existing unit test

479
00:23:03,120 --> 00:23:06,799
with code qr if possible or

480
00:23:06,799 --> 00:23:10,400
we could also just import a gtm set of

481
00:23:10,400 --> 00:23:11,120
rules

482
00:23:11,120 --> 00:23:15,280
especially the security one additionally

483
00:23:15,280 --> 00:23:17,840
since copyro is a community driven

484
00:23:17,840 --> 00:23:18,720
project

485
00:23:18,720 --> 00:23:21,280
it is also possible to find others well

486
00:23:21,280 --> 00:23:22,400
written queries

487
00:23:22,400 --> 00:23:26,720
from public research or gist

488
00:23:26,960 --> 00:23:29,280
the following are some rules that are

489
00:23:29,280 --> 00:23:31,039
grabbed from the

490
00:23:31,039 --> 00:23:36,480
gtm's official report

491
00:23:36,480 --> 00:23:39,360
so this one is to check if there exists

492
00:23:39,360 --> 00:23:39,919
any

493
00:23:39,919 --> 00:23:42,559
client-side url redirects in the code

494
00:23:42,559 --> 00:23:43,760
base

495
00:23:43,760 --> 00:23:46,799
the lgtm team has used the tens analysis

496
00:23:46,799 --> 00:23:47,840
to check

497
00:23:47,840 --> 00:23:50,480
if a user-controllable input is possible

498
00:23:50,480 --> 00:23:52,559
to control to reach the website will

499
00:23:52,559 --> 00:23:54,080
redirect

500
00:23:54,080 --> 00:23:56,679
this this is called open redirect

501
00:23:56,679 --> 00:23:59,679
vulnerability

502
00:24:00,960 --> 00:24:04,480
and this one is to check if there exists

503
00:24:04,480 --> 00:24:07,440
any user controllable inputs that will

504
00:24:07,440 --> 00:24:08,400
be read and

505
00:24:08,400 --> 00:24:12,960
parsed securely by the xml resolver

506
00:24:12,960 --> 00:24:17,039
this often results in sse injection

507
00:24:17,039 --> 00:24:21,520
xml internal entities injection

508
00:24:24,400 --> 00:24:27,279
and this query is the outcome of a

509
00:24:27,279 --> 00:24:29,840
public research from pontester

510
00:24:29,840 --> 00:24:32,679
doing a variance analysis against cv

511
00:24:32,679 --> 00:24:33,840
2018

512
00:24:33,840 --> 00:24:36,960
160 16621

513
00:24:36,960 --> 00:24:40,159
this issue description said that a java

514
00:24:40,159 --> 00:24:41,919
expression language injection

515
00:24:41,919 --> 00:24:43,120
vulnerability

516
00:24:43,120 --> 00:24:45,520
has been discovered in nasa's repository

517
00:24:45,520 --> 00:24:47,919
manager 3.

518
00:24:47,919 --> 00:24:50,480
he thought that it is a good target for

519
00:24:50,480 --> 00:24:52,480
doing various analysis

520
00:24:52,480 --> 00:24:55,360
to find other variants about er

521
00:24:55,360 --> 00:24:56,480
injections

522
00:24:56,480 --> 00:24:58,880
and he did find the different kinds of

523
00:24:58,880 --> 00:24:59,520
variants

524
00:24:59,520 --> 00:25:02,158
at the end

525
00:25:02,559 --> 00:25:05,279
the journey is fun and you can learn

526
00:25:05,279 --> 00:25:07,520
from him by utilizing the cultural

527
00:25:07,520 --> 00:25:08,960
powerful libraries

528
00:25:08,960 --> 00:25:12,840
to circumvent very variety of

529
00:25:12,840 --> 00:25:15,840
limitations

530
00:25:16,240 --> 00:25:18,559
now we are moving to our last brilliant

531
00:25:18,559 --> 00:25:19,360
point

532
00:25:19,360 --> 00:25:22,080
conclusion

533
00:25:24,000 --> 00:25:26,080
i know your mind must have been

534
00:25:26,080 --> 00:25:28,400
overwhelmed with confusion

535
00:25:28,400 --> 00:25:30,480
if you do not have experience using

536
00:25:30,480 --> 00:25:33,120
codeql before

537
00:25:33,120 --> 00:25:37,120
however i hope you will start using it

538
00:25:37,120 --> 00:25:39,360
or even share your queries with the

539
00:25:39,360 --> 00:25:42,880
community from now on

540
00:25:42,880 --> 00:25:45,679
in the future while codeql starts

541
00:25:45,679 --> 00:25:47,919
supporting more languages

542
00:25:47,919 --> 00:25:50,559
it can cover a wider range of fibers and

543
00:25:50,559 --> 00:25:52,080
code bases

544
00:25:52,080 --> 00:25:54,080
which means that we are able to do

545
00:25:54,080 --> 00:25:56,080
variant analysis on more

546
00:25:56,080 --> 00:26:00,799
targets and secure more projects

547
00:26:00,799 --> 00:26:04,240
besides think of it cv list

548
00:26:04,240 --> 00:26:06,320
is just advantage of the descriptions

549
00:26:06,320 --> 00:26:08,880
with no real things to replicate

550
00:26:08,880 --> 00:26:11,440
or prevention suggestions to follow in

551
00:26:11,440 --> 00:26:13,520
most casts

552
00:26:13,520 --> 00:26:16,720
with call ql however we are able to

553
00:26:16,720 --> 00:26:17,200
model

554
00:26:17,200 --> 00:26:20,000
each vulnerability and make each of them

555
00:26:20,000 --> 00:26:20,720
generally

556
00:26:20,720 --> 00:26:23,520
generalized by the efforts of the whole

557
00:26:23,520 --> 00:26:24,720
community

558
00:26:24,720 --> 00:26:27,600
which is neat

559
00:26:28,159 --> 00:26:31,440
to sum up coql is a nice tool for

560
00:26:31,440 --> 00:26:32,640
finding semantics

561
00:26:32,640 --> 00:26:38,960
things and i am still learning as well

562
00:26:38,960 --> 00:26:41,679
alright so that's all my talk thank you

563
00:26:41,679 --> 00:26:42,880
all for listening

564
00:26:42,880 --> 00:26:44,720
i hope that you will learn something

565
00:26:44,720 --> 00:26:46,000
from my talk

566
00:26:46,000 --> 00:26:48,480
besides if you have any questions please

567
00:26:48,480 --> 00:26:50,799
leave your questions on discord channel

568
00:26:50,799 --> 00:26:53,840
thank you

