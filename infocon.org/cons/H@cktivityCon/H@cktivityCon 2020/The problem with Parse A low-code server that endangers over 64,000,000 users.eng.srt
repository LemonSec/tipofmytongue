1
00:00:01,150 --> 00:00:05,840
[Music]

2
00:00:06,960 --> 00:00:08,000
hello

3
00:00:08,000 --> 00:00:09,920
my name is ben heald today i'll be

4
00:00:09,920 --> 00:00:11,840
speaking about security issues inherent

5
00:00:11,840 --> 00:00:13,440
in the popular backend server

6
00:00:13,440 --> 00:00:15,759
parse that endanger over 60 million

7
00:00:15,759 --> 00:00:17,840
users

8
00:00:17,840 --> 00:00:19,279
a little bit of background information

9
00:00:19,279 --> 00:00:21,359
about myself i am current computer

10
00:00:21,359 --> 00:00:23,439
science graduate student at rit

11
00:00:23,439 --> 00:00:24,960
and i have been involved in bug bounty

12
00:00:24,960 --> 00:00:26,560
and security research for over three

13
00:00:26,560 --> 00:00:27,680
years

14
00:00:27,680 --> 00:00:29,519
i was also a member of the rit's

15
00:00:29,519 --> 00:00:30,800
national cptc

16
00:00:30,800 --> 00:00:33,440
team in 2019 where we placed second in

17
00:00:33,440 --> 00:00:35,200
the competition

18
00:00:35,200 --> 00:00:37,920
and just a fun fact about myself in 2012

19
00:00:37,920 --> 00:00:39,680
i wrote my first python script on a

20
00:00:39,680 --> 00:00:40,480
raspberry pi

21
00:00:40,480 --> 00:00:44,079
to give away dogecoin i first discovered

22
00:00:44,079 --> 00:00:45,920
parse while reporting a bug bounty to a

23
00:00:45,920 --> 00:00:48,960
fortune 500 company on hacker one

24
00:00:48,960 --> 00:00:50,480
i learned that the security issues on

25
00:00:50,480 --> 00:00:52,320
the platform were inherent to parse

26
00:00:52,320 --> 00:00:53,120
itself

27
00:00:53,120 --> 00:00:56,000
and have been researching it ever since

28
00:00:56,000 --> 00:00:57,039
a few months ago

29
00:00:57,039 --> 00:00:58,879
i published my research into parse on my

30
00:00:58,879 --> 00:01:00,719
blog and i'm really excited to be able

31
00:01:00,719 --> 00:01:02,640
to share those results with the industry

32
00:01:02,640 --> 00:01:03,039
here

33
00:01:03,039 --> 00:01:05,920
at activitycom

34
00:01:06,479 --> 00:01:08,560
parse is an open source application that

35
00:01:08,560 --> 00:01:09,520
provides a simple

36
00:01:09,520 --> 00:01:12,080
class-oriented api to mobile application

37
00:01:12,080 --> 00:01:13,760
developers

38
00:01:13,760 --> 00:01:15,280
parse originally existed as a

39
00:01:15,280 --> 00:01:17,360
subscription-based commercial service

40
00:01:17,360 --> 00:01:18,960
where developers would pay to have their

41
00:01:18,960 --> 00:01:20,720
back-end services hosted

42
00:01:20,720 --> 00:01:24,400
by parseapp.com at its peak

43
00:01:24,400 --> 00:01:26,240
it is estimated that over half a million

44
00:01:26,240 --> 00:01:28,080
mobile applications are being powered by

45
00:01:28,080 --> 00:01:29,759
parse

46
00:01:29,759 --> 00:01:31,840
purchased by facebook in 2013 the

47
00:01:31,840 --> 00:01:34,240
commercial branch shut down in 2017

48
00:01:34,240 --> 00:01:36,079
leaving behind a wealth of open source

49
00:01:36,079 --> 00:01:37,439
code

50
00:01:37,439 --> 00:01:39,200
it is unknown exactly why facebook

51
00:01:39,200 --> 00:01:40,640
decided to shut parts down

52
00:01:40,640 --> 00:01:42,240
but is likely due to the rise in

53
00:01:42,240 --> 00:01:44,079
popularity of rival platforms

54
00:01:44,079 --> 00:01:45,840
and the difficulty in maintaining such a

55
00:01:45,840 --> 00:01:47,920
large hosting platform

56
00:01:47,920 --> 00:01:50,159
whatever the reason facebook kindly open

57
00:01:50,159 --> 00:01:51,759
source the code base of parse

58
00:01:51,759 --> 00:01:55,280
enabling its continued use because it's

59
00:01:55,280 --> 00:01:57,200
of its ease of use par survived the

60
00:01:57,200 --> 00:01:59,520
shutdown and mainly survives now

61
00:01:59,520 --> 00:02:02,399
as a self-hosted service parce is

62
00:02:02,399 --> 00:02:04,000
integrated with mongodb

63
00:02:04,000 --> 00:02:06,640
and can be deployed on aws and heroku

64
00:02:06,640 --> 00:02:08,560
with a single click

65
00:02:08,560 --> 00:02:10,318
these integrations make it incredibly

66
00:02:10,318 --> 00:02:12,319
easy for users to create and deploy

67
00:02:12,319 --> 00:02:15,280
production parsings when the majority of

68
00:02:15,280 --> 00:02:16,800
parse instances today

69
00:02:16,800 --> 00:02:19,319
are self-hosted a few companies such as

70
00:02:19,319 --> 00:02:20,560
backfourapp.com

71
00:02:20,560 --> 00:02:23,599
continue offer commercial parts hosting

72
00:02:23,599 --> 00:02:25,040
back for app claims that they host

73
00:02:25,040 --> 00:02:26,319
hundreds of applications on their

74
00:02:26,319 --> 00:02:27,680
service

75
00:02:27,680 --> 00:02:29,520
in addition to back for app several

76
00:02:29,520 --> 00:02:31,200
smaller companies also provide

77
00:02:31,200 --> 00:02:34,480
commercial parse hosting

78
00:02:35,040 --> 00:02:36,879
parse is not the only popular mobile

79
00:02:36,879 --> 00:02:38,480
back-end framework

80
00:02:38,480 --> 00:02:40,160
a more well-known piece of software is

81
00:02:40,160 --> 00:02:43,200
firebase which is maintained by google

82
00:02:43,200 --> 00:02:45,120
firebase has long been the most popular

83
00:02:45,120 --> 00:02:47,840
mobile backend service available

84
00:02:47,840 --> 00:02:50,080
as a security industry knows firebase

85
00:02:50,080 --> 00:02:51,519
instances have been plagued over the

86
00:02:51,519 --> 00:02:52,879
years with data breaches

87
00:02:52,879 --> 00:02:54,879
due to their use of insecure default

88
00:02:54,879 --> 00:02:56,400
settings

89
00:02:56,400 --> 00:02:58,159
the use of default settings that create

90
00:02:58,159 --> 00:03:00,159
an easier environment for developers

91
00:03:00,159 --> 00:03:02,000
is the root cause of the security issues

92
00:03:02,000 --> 00:03:03,200
with both firebase

93
00:03:03,200 --> 00:03:05,839
and parse

94
00:03:07,040 --> 00:03:08,959
mobile application back-end frameworks

95
00:03:08,959 --> 00:03:10,800
like parse and firebase

96
00:03:10,800 --> 00:03:12,400
fill real need in the application

97
00:03:12,400 --> 00:03:14,159
development market

98
00:03:14,159 --> 00:03:16,000
for front-end developers creating a

99
00:03:16,000 --> 00:03:18,000
scalable and easy to use api

100
00:03:18,000 --> 00:03:20,959
can seem a daunting task by developing

101
00:03:20,959 --> 00:03:23,360
with a framework like parse or firebase

102
00:03:23,360 --> 00:03:25,200
mobile application developers can focus

103
00:03:25,200 --> 00:03:26,879
on the user experience that they excel

104
00:03:26,879 --> 00:03:28,080
at

105
00:03:28,080 --> 00:03:30,000
unfortunately the ease of use of these

106
00:03:30,000 --> 00:03:32,720
platforms creates its own problems

107
00:03:32,720 --> 00:03:34,239
since the platforms make back-end

108
00:03:34,239 --> 00:03:36,000
development relatively simple

109
00:03:36,000 --> 00:03:37,519
the developers end up not truly

110
00:03:37,519 --> 00:03:39,360
understanding concepts such as api

111
00:03:39,360 --> 00:03:40,879
security

112
00:03:40,879 --> 00:03:42,879
this idea will be further explored later

113
00:03:42,879 --> 00:03:45,359
in this talk

114
00:03:45,440 --> 00:03:47,680
a developer who wants to use parts needs

115
00:03:47,680 --> 00:03:50,080
to simply use the many sdks available

116
00:03:50,080 --> 00:03:52,799
for a variety of development platforms

117
00:03:52,799 --> 00:03:57,200
these include android ios and javascript

118
00:03:57,200 --> 00:03:59,120
the parse maintainers have striven to

119
00:03:59,120 --> 00:04:00,239
create an sdk

120
00:04:00,239 --> 00:04:02,080
for almost every programming image and

121
00:04:02,080 --> 00:04:04,640
development platform

122
00:04:04,640 --> 00:04:06,560
the core of parse functionality lies in

123
00:04:06,560 --> 00:04:09,439
the simple to understand class system

124
00:04:09,439 --> 00:04:11,200
all data within parse is stored as

125
00:04:11,200 --> 00:04:13,040
instances of classes

126
00:04:13,040 --> 00:04:14,480
in order to create and store a new

127
00:04:14,480 --> 00:04:16,399
instance of a class the developer needs

128
00:04:16,399 --> 00:04:17,918
to only send a post request

129
00:04:17,918 --> 00:04:20,399
to their parse api containing the fields

130
00:04:20,399 --> 00:04:23,040
of the class object they wish to create

131
00:04:23,040 --> 00:04:25,040
once inserted into the parse database

132
00:04:25,040 --> 00:04:29,120
the api will turn the object's id

133
00:04:29,120 --> 00:04:30,880
this id can then be stored by the

134
00:04:30,880 --> 00:04:32,880
developer to reference later by using

135
00:04:32,880 --> 00:04:34,000
get requests

136
00:04:34,000 --> 00:04:35,759
in the following requests the id in

137
00:04:35,759 --> 00:04:37,520
court is incorporated into the url

138
00:04:37,520 --> 00:04:41,759
and the data is retrieved the parse api

139
00:04:41,759 --> 00:04:43,520
has many built-in features that allow

140
00:04:43,520 --> 00:04:45,120
third-party login integration

141
00:04:45,120 --> 00:04:48,240
with facebook apple and google

142
00:04:48,240 --> 00:04:50,560
password reset searching objects through

143
00:04:50,560 --> 00:04:51,759
regex commands

144
00:04:51,759 --> 00:04:54,400
and file upload these features are

145
00:04:54,400 --> 00:04:56,320
widely used by developers and therefore

146
00:04:56,320 --> 00:04:58,080
represent a key entry point for security

147
00:04:58,080 --> 00:05:00,479
misfigurations as we will examine later

148
00:05:00,479 --> 00:05:02,639
on

149
00:05:03,440 --> 00:05:05,120
all the functionality of parse can be

150
00:05:05,120 --> 00:05:07,039
utilized through a gui application

151
00:05:07,039 --> 00:05:10,160
called the parse dashboard this gui

152
00:05:10,160 --> 00:05:11,840
makes it easy for developers to manage

153
00:05:11,840 --> 00:05:13,360
their parse instances

154
00:05:13,360 --> 00:05:15,120
entirely through the application with no

155
00:05:15,120 --> 00:05:17,600
arduous programming required

156
00:05:17,600 --> 00:05:19,520
this allows front-end mobile application

157
00:05:19,520 --> 00:05:21,280
developers to maintain their database of

158
00:05:21,280 --> 00:05:22,000
user data

159
00:05:22,000 --> 00:05:25,120
quickly and easily unfortunately this

160
00:05:25,120 --> 00:05:27,039
gui does not attempt to educate the user

161
00:05:27,039 --> 00:05:28,720
on the many important design principles

162
00:05:28,720 --> 00:05:31,600
of api security

163
00:05:31,600 --> 00:05:33,520
the problem with parse is that while it

164
00:05:33,520 --> 00:05:35,600
offers developers an incredibly easy way

165
00:05:35,600 --> 00:05:35,840
to

166
00:05:35,840 --> 00:05:37,840
create a mobile black end server no

167
00:05:37,840 --> 00:05:39,759
security controls are in place by

168
00:05:39,759 --> 00:05:41,039
default

169
00:05:41,039 --> 00:05:43,600
in a new installation of par server any

170
00:05:43,600 --> 00:05:45,600
anonymous user can perform extremely

171
00:05:45,600 --> 00:05:47,280
sensitive actions

172
00:05:47,280 --> 00:05:49,360
these include reading all data in every

173
00:05:49,360 --> 00:05:51,440
class creating new instances

174
00:05:51,440 --> 00:05:54,560
and modifying the data of any class this

175
00:05:54,560 --> 00:05:56,160
is true of all classes in the parse

176
00:05:56,160 --> 00:05:56,960
database

177
00:05:56,960 --> 00:05:59,039
even clearly sensitive tables such as

178
00:05:59,039 --> 00:06:00,639
the default users class

179
00:06:00,639 --> 00:06:02,639
that is often used to store data such as

180
00:06:02,639 --> 00:06:03,759
phone names

181
00:06:03,759 --> 00:06:06,960
email addresses and phone numbers

182
00:06:06,960 --> 00:06:08,720
ease in which these can be this can be

183
00:06:08,720 --> 00:06:10,479
exploited is examined by the following

184
00:06:10,479 --> 00:06:12,319
request

185
00:06:12,319 --> 00:06:14,160
a simple get request is all that is

186
00:06:14,160 --> 00:06:15,840
needed to retrieve all data from any

187
00:06:15,840 --> 00:06:17,840
given parse class

188
00:06:17,840 --> 00:06:19,759
in order to authenticate to most parsed

189
00:06:19,759 --> 00:06:21,759
instances all an attacker needs is a

190
00:06:21,759 --> 00:06:23,840
parse application id

191
00:06:23,840 --> 00:06:25,919
this is a public id that can be found by

192
00:06:25,919 --> 00:06:27,280
examining the code of whatever

193
00:06:27,280 --> 00:06:28,560
application you're testing

194
00:06:28,560 --> 00:06:32,880
such as android apk or javascript file

195
00:06:32,880 --> 00:06:34,720
in response to this get request the

196
00:06:34,720 --> 00:06:36,000
parse server will return

197
00:06:36,000 --> 00:06:38,720
all data within the class to any user a

198
00:06:38,720 --> 00:06:40,960
common mitigation some applications use

199
00:06:40,960 --> 00:06:42,639
is to require users to have valid

200
00:06:42,639 --> 00:06:44,560
authentication headers in order to read

201
00:06:44,560 --> 00:06:46,880
the data in any given class

202
00:06:46,880 --> 00:06:48,560
unfortunately these can easily be

203
00:06:48,560 --> 00:06:50,000
obtained by running the application

204
00:06:50,000 --> 00:06:51,120
through burp suite

205
00:06:51,120 --> 00:06:53,039
logging in and retrieving authentication

206
00:06:53,039 --> 00:06:56,080
headers from your account

207
00:06:56,240 --> 00:06:58,000
another key feature of parse that

208
00:06:58,000 --> 00:06:59,840
attacker can use is the ability to

209
00:06:59,840 --> 00:07:02,080
search by rejects pattern

210
00:07:02,080 --> 00:07:03,759
using the following post request

211
00:07:03,759 --> 00:07:05,520
individual entries of the database can

212
00:07:05,520 --> 00:07:06,960
be retrieved

213
00:07:06,960 --> 00:07:08,960
this could be used by an attacker to

214
00:07:08,960 --> 00:07:10,639
retrieve the data of individuals

215
00:07:10,639 --> 00:07:13,440
with high accuracy the following request

216
00:07:13,440 --> 00:07:15,039
will retrieve all email addresses from

217
00:07:15,039 --> 00:07:16,000
the users class

218
00:07:16,000 --> 00:07:19,360
the end with a dot gov this example also

219
00:07:19,360 --> 00:07:20,880
represents the kind of sensitive

220
00:07:20,880 --> 00:07:21,520
information

221
00:07:21,520 --> 00:07:23,759
and impact an attacker could have if the

222
00:07:23,759 --> 00:07:27,759
system using parse is breached

223
00:07:27,919 --> 00:07:30,000
while parse does have several utilities

224
00:07:30,000 --> 00:07:31,759
to limit who can access the data in each

225
00:07:31,759 --> 00:07:32,479
class

226
00:07:32,479 --> 00:07:34,080
the fact that these are turned off by

227
00:07:34,080 --> 00:07:36,319
default means that countless par servers

228
00:07:36,319 --> 00:07:38,880
expose their data for all to see

229
00:07:38,880 --> 00:07:40,479
this problem is exacerbated by the

230
00:07:40,479 --> 00:07:42,240
developers of parse who acknowledge the

231
00:07:42,240 --> 00:07:43,599
risk this approach brings to server

232
00:07:43,599 --> 00:07:44,319
security

233
00:07:44,319 --> 00:07:45,680
but do nothing to properly warn

234
00:07:45,680 --> 00:07:47,440
developers

235
00:07:47,440 --> 00:07:49,360
the document seen here explains what

236
00:07:49,360 --> 00:07:51,120
permissions are allowed by default

237
00:07:51,120 --> 00:07:53,039
but it's almost but it is almost hidden

238
00:07:53,039 --> 00:07:54,639
on a small sub page in the parse

239
00:07:54,639 --> 00:07:56,639
documentation

240
00:07:56,639 --> 00:07:58,560
the wording and security section also

241
00:07:58,560 --> 00:08:00,080
does not properly portray to the

242
00:08:00,080 --> 00:08:02,080
developers the risks involved in these

243
00:08:02,080 --> 00:08:03,840
settings

244
00:08:03,840 --> 00:08:05,599
in their desire to produce a developer

245
00:08:05,599 --> 00:08:07,440
friendly environment the maintainers of

246
00:08:07,440 --> 00:08:09,199
parts neglect the fact that data

247
00:08:09,199 --> 00:08:11,360
security is a cornerstone piece of any

248
00:08:11,360 --> 00:08:14,160
software development

249
00:08:14,960 --> 00:08:16,960
in addition to allowing anonymous users

250
00:08:16,960 --> 00:08:18,960
to read all data in every class

251
00:08:18,960 --> 00:08:21,039
the default configuration of parse also

252
00:08:21,039 --> 00:08:24,400
allows unrestricted file upload

253
00:08:24,400 --> 00:08:26,160
this can be used by attackers to serve

254
00:08:26,160 --> 00:08:28,479
malicious files from the victim's domain

255
00:08:28,479 --> 00:08:30,639
create advanced phishing attacks or

256
00:08:30,639 --> 00:08:32,479
count takeover if the files are served

257
00:08:32,479 --> 00:08:34,640
from the central domain

258
00:08:34,640 --> 00:08:36,399
once the file is uploaded on the parse

259
00:08:36,399 --> 00:08:38,399
server anyone on the internet can access

260
00:08:38,399 --> 00:08:38,799
it

261
00:08:38,799 --> 00:08:40,399
meaning that there is no access controls

262
00:08:40,399 --> 00:08:43,279
set up by default

263
00:08:43,519 --> 00:08:45,120
the following is a simple proof of

264
00:08:45,120 --> 00:08:47,200
concept post request that will upload an

265
00:08:47,200 --> 00:08:48,720
html file named test

266
00:08:48,720 --> 00:08:51,839
to a default parse instance an anonymous

267
00:08:51,839 --> 00:08:53,440
user can send this request and be able

268
00:08:53,440 --> 00:08:55,519
to serve arbitrary files on the parse

269
00:08:55,519 --> 00:08:59,440
server domain the problem with parse

270
00:08:59,440 --> 00:09:00,880
file upload is yet again

271
00:09:00,880 --> 00:09:04,240
exacerbated by developers of parse

272
00:09:04,240 --> 00:09:06,320
concerns about unrestricted file upload

273
00:09:06,320 --> 00:09:08,399
have been raised several times on github

274
00:09:08,399 --> 00:09:09,839
but time and time again they've been

275
00:09:09,839 --> 00:09:11,839
dismissed as historical behavior

276
00:09:11,839 --> 00:09:15,120
and good enough for now

277
00:09:15,760 --> 00:09:17,839
the question remains therefore what part

278
00:09:17,839 --> 00:09:18,800
what can parse do

279
00:09:18,800 --> 00:09:20,839
to help their community produce secure

280
00:09:20,839 --> 00:09:22,080
instances

281
00:09:22,080 --> 00:09:24,640
first implementing a by default secure

282
00:09:24,640 --> 00:09:27,120
access control policy for parse classes

283
00:09:27,120 --> 00:09:28,800
would help developers to protect user

284
00:09:28,800 --> 00:09:31,120
data this is reflective of the data

285
00:09:31,120 --> 00:09:35,040
security principle of least access

286
00:09:35,120 --> 00:09:37,040
the class access controls are set to

287
00:09:37,040 --> 00:09:38,959
allow global read the parse framework

288
00:09:38,959 --> 00:09:40,320
should warn developers

289
00:09:40,320 --> 00:09:41,920
both over the command line and through

290
00:09:41,920 --> 00:09:44,399
the parse dashboard gui

291
00:09:44,399 --> 00:09:46,880
finally enabling file upload controls in

292
00:09:46,880 --> 00:09:48,080
the parse dashboard

293
00:09:48,080 --> 00:09:49,839
would help novice developers to easily

294
00:09:49,839 --> 00:09:51,360
limit the types of files that can be

295
00:09:51,360 --> 00:09:53,760
uploaded

296
00:09:54,640 --> 00:09:56,720
in order to find if a given application

297
00:09:56,720 --> 00:09:58,240
is employing a vulnerable instance of

298
00:09:58,240 --> 00:09:58,880
parse

299
00:09:58,880 --> 00:10:02,000
only a few tools are needed in the case

300
00:10:02,000 --> 00:10:03,440
of an android application

301
00:10:03,440 --> 00:10:05,440
security researchers can use an apk

302
00:10:05,440 --> 00:10:08,000
decompiler such as jadx

303
00:10:08,000 --> 00:10:10,079
to examine and determine if parse is

304
00:10:10,079 --> 00:10:11,760
being used

305
00:10:11,760 --> 00:10:14,320
once the parse url and application id

306
00:10:14,320 --> 00:10:15,200
are retrieved

307
00:10:15,200 --> 00:10:17,200
a simple get request such as the one

308
00:10:17,200 --> 00:10:19,279
shown earlier can be sent to determine

309
00:10:19,279 --> 00:10:21,839
if the application is vulnerable

310
00:10:21,839 --> 00:10:23,760
i have created a simple python utility

311
00:10:23,760 --> 00:10:25,839
on my github that scans a provided parse

312
00:10:25,839 --> 00:10:26,480
instance

313
00:10:26,480 --> 00:10:27,839
to determine whether or not it is

314
00:10:27,839 --> 00:10:30,399
vulnerable feel free to check it out by

315
00:10:30,399 --> 00:10:32,160
scanning your own instances of parse

316
00:10:32,160 --> 00:10:34,079
server to verify whether or not your

317
00:10:34,079 --> 00:10:36,880
company is vulnerable

318
00:10:36,880 --> 00:10:38,399
you may be asking yourself how

319
00:10:38,399 --> 00:10:40,480
widespread is the use of parse

320
00:10:40,480 --> 00:10:42,640
by scanning the top 1000 android

321
00:10:42,640 --> 00:10:44,480
applications i was able to discover

322
00:10:44,480 --> 00:10:46,720
dozens of vulnerable servers

323
00:10:46,720 --> 00:10:48,720
after contacting these organizations

324
00:10:48,720 --> 00:10:50,160
only two of them had reached out and

325
00:10:50,160 --> 00:10:53,040
begun fixing their security issues

326
00:10:53,040 --> 00:10:55,120
as you can see in only a day of scanning

327
00:10:55,120 --> 00:10:56,959
i was able to discover par servers that

328
00:10:56,959 --> 00:11:00,560
expose the data of over 60 million users

329
00:11:00,560 --> 00:11:02,560
this user estimation is based only on

330
00:11:02,560 --> 00:11:04,320
android application downloads

331
00:11:04,320 --> 00:11:05,760
and the real number of users data

332
00:11:05,760 --> 00:11:07,440
exposed could be much higher

333
00:11:07,440 --> 00:11:09,600
to the same application also existing on

334
00:11:09,600 --> 00:11:12,800
the ios app store

335
00:11:12,800 --> 00:11:14,720
these vulnerable applications exposed a

336
00:11:14,720 --> 00:11:16,399
wealth of personally identifiable

337
00:11:16,399 --> 00:11:17,760
information

338
00:11:17,760 --> 00:11:19,600
this included information such as email

339
00:11:19,600 --> 00:11:21,920
addresses phone numbers

340
00:11:21,920 --> 00:11:24,800
full names social media tokens and home

341
00:11:24,800 --> 00:11:26,560
addresses

342
00:11:26,560 --> 00:11:28,399
using this data a malicious attacker

343
00:11:28,399 --> 00:11:29,920
could severely impact the lives of the

344
00:11:29,920 --> 00:11:31,519
consumers

345
00:11:31,519 --> 00:11:33,519
these data types underline the severity

346
00:11:33,519 --> 00:11:34,720
of these liabilities

347
00:11:34,720 --> 00:11:36,800
as corporations could easily be held

348
00:11:36,800 --> 00:11:38,640
liable under privacy laws

349
00:11:38,640 --> 00:11:42,000
like gdpr for exposing user data

350
00:11:42,000 --> 00:11:44,320
violations of gdpr are quite serious and

351
00:11:44,320 --> 00:11:45,760
could cost companies thousands of

352
00:11:45,760 --> 00:11:49,360
dollars in fines for each incident

353
00:11:49,680 --> 00:11:51,600
using the tools showdown we can see that

354
00:11:51,600 --> 00:11:53,600
parsed is used in at least 800 servers

355
00:11:53,600 --> 00:11:55,440
hosted around the world

356
00:11:55,440 --> 00:11:57,120
while not all of these are vulnerable it

357
00:11:57,120 --> 00:11:59,440
is likely that many of them are

358
00:11:59,440 --> 00:12:01,120
other showdown queries could be used to

359
00:12:01,120 --> 00:12:02,720
discover more par servers

360
00:12:02,720 --> 00:12:04,880
in this example likely only represents a

361
00:12:04,880 --> 00:12:06,480
subset

362
00:12:06,480 --> 00:12:08,480
in order to detect if these servers were

363
00:12:08,480 --> 00:12:10,480
vulnerable dns queries would need to be

364
00:12:10,480 --> 00:12:10,800
done

365
00:12:10,800 --> 00:12:12,480
to detect the true domain of the ip

366
00:12:12,480 --> 00:12:13,839
address

367
00:12:13,839 --> 00:12:15,519
from these the mobile application it

368
00:12:15,519 --> 00:12:18,000
connects to could then be discovered

369
00:12:18,000 --> 00:12:19,760
the application would then be tested as

370
00:12:19,760 --> 00:12:22,639
described earlier

371
00:12:23,440 --> 00:12:25,279
in conclusion the default security

372
00:12:25,279 --> 00:12:26,880
settings of parse server endanger the

373
00:12:26,880 --> 00:12:28,480
data of millions

374
00:12:28,480 --> 00:12:30,399
in order to protect consumer data

375
00:12:30,399 --> 00:12:32,240
developers using parse server need to

376
00:12:32,240 --> 00:12:33,839
immediately ensure that they have proper

377
00:12:33,839 --> 00:12:36,320
access control policies in place

378
00:12:36,320 --> 00:12:38,320
in the long term parse platform needs to

379
00:12:38,320 --> 00:12:40,399
adopt a new stance of security

380
00:12:40,399 --> 00:12:42,320
for their platform or security issues

381
00:12:42,320 --> 00:12:45,279
will continue to plague them

382
00:12:45,279 --> 00:12:46,800
if you have any questions or comments on

383
00:12:46,800 --> 00:12:48,320
this talk please let me know on my

384
00:12:48,320 --> 00:12:49,760
website or on twitter

385
00:12:49,760 --> 00:12:51,440
i will also be in the activitycon

386
00:12:51,440 --> 00:12:53,279
discord after this talk to answer any

387
00:12:53,279 --> 00:12:54,240
questions as well

388
00:12:54,240 --> 00:13:01,920
thanks for listening

