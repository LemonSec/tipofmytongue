1
00:00:01,150 --> 00:00:05,840
[Music]

2
00:00:07,359 --> 00:00:09,280
hi everyone

3
00:00:09,280 --> 00:00:11,759
we are here to present cash and confused

4
00:00:11,759 --> 00:00:17,920
webcache deception in the wild

5
00:00:24,560 --> 00:00:27,920
also known as jj and happy to

6
00:00:27,920 --> 00:00:31,279
present our recent research and webcast

7
00:00:31,279 --> 00:00:35,040
section today in this research we are

8
00:00:35,040 --> 00:00:36,399
going actually to share

9
00:00:36,399 --> 00:00:39,280
a little bit background about the caches

10
00:00:39,280 --> 00:00:40,879
and url structures

11
00:00:40,879 --> 00:00:43,520
he also wants to talk about the path

12
00:00:43,520 --> 00:00:44,160
confusion

13
00:00:44,160 --> 00:00:46,559
as a root cause of the webcast deception

14
00:00:46,559 --> 00:00:47,920
attack

15
00:00:47,920 --> 00:00:49,840
explain the cache deceptions introduced

16
00:00:49,840 --> 00:00:52,320
in 2019 by omar g

17
00:00:52,320 --> 00:00:54,559
and we are going to share some new and

18
00:00:54,559 --> 00:00:56,480
advanced exploitation techniques which

19
00:00:56,480 --> 00:00:58,000
is very effective

20
00:00:58,000 --> 00:00:59,120
and increase the chance of the

21
00:00:59,120 --> 00:01:02,559
exploitability by about 45 percent

22
00:01:02,559 --> 00:01:05,199
and share our notable observation beside

23
00:01:05,199 --> 00:01:06,720
the exploitations

24
00:01:06,720 --> 00:01:10,840
with park hunter and audience to can

25
00:01:10,840 --> 00:01:12,080
invest

26
00:01:12,080 --> 00:01:14,159
more times to find more vulnerability

27
00:01:14,159 --> 00:01:17,439
based on this observation

28
00:01:18,720 --> 00:01:21,360
basically the caches have become an

29
00:01:21,360 --> 00:01:23,200
essential component of the internet

30
00:01:23,200 --> 00:01:24,240
infrastructure

31
00:01:24,240 --> 00:01:27,680
with lots of use cases such as reducing

32
00:01:27,680 --> 00:01:29,439
bandwidth

33
00:01:29,439 --> 00:01:33,840
the study shows that about 74 percent of

34
00:01:33,840 --> 00:01:37,200
the alexa top thousand currently

35
00:01:37,200 --> 00:01:41,600
using the cdns and use the cdn providers

36
00:01:41,600 --> 00:01:45,840
and web caches most probably others also

37
00:01:45,840 --> 00:01:47,680
might use a different

38
00:01:47,680 --> 00:01:50,000
cache component and the sheet management

39
00:01:50,000 --> 00:01:51,040
proxy

40
00:01:51,040 --> 00:01:53,759
to accelerate accessing to the site the

41
00:01:53,759 --> 00:01:54,640
most common

42
00:01:54,640 --> 00:01:58,560
targets of caching are static

43
00:01:58,560 --> 00:02:02,240
but frequently accessed resources

44
00:02:02,240 --> 00:02:05,840
these include static html files scripts

45
00:02:05,840 --> 00:02:08,878
and style sheets images and other media

46
00:02:08,878 --> 00:02:10,160
files or even

47
00:02:10,160 --> 00:02:14,319
large document and software downloads

48
00:02:16,080 --> 00:02:19,840
so since the cache and web caching is an

49
00:02:19,840 --> 00:02:21,760
integral part of the

50
00:02:21,760 --> 00:02:24,959
nowadays web the web community come up

51
00:02:24,959 --> 00:02:27,360
with some standards and protocols

52
00:02:27,360 --> 00:02:29,680
for the different components such as the

53
00:02:29,680 --> 00:02:32,480
cdn proxy and the servers

54
00:02:32,480 --> 00:02:34,959
communicate the caching policies one of

55
00:02:34,959 --> 00:02:37,360
the

56
00:02:37,360 --> 00:02:40,000
main one is cache control response

57
00:02:40,000 --> 00:02:41,200
headers

58
00:02:41,200 --> 00:02:43,599
by which the web server can tell other

59
00:02:43,599 --> 00:02:44,720
components

60
00:02:44,720 --> 00:02:47,840
in the web

61
00:02:47,840 --> 00:02:51,120
how how to behave with the response of

62
00:02:51,120 --> 00:02:52,959
that resource

63
00:02:52,959 --> 00:02:56,319
for example the cache control no store

64
00:02:56,319 --> 00:02:58,159
tells the response should not be

65
00:02:58,159 --> 00:03:00,720
restored however

66
00:03:00,720 --> 00:03:03,680
the web caching and the web caching

67
00:03:03,680 --> 00:03:05,680
components in the internet

68
00:03:05,680 --> 00:03:08,959
can ignore these headers and instead

69
00:03:08,959 --> 00:03:12,800
use other rules based on the resource

70
00:03:12,800 --> 00:03:13,360
paths

71
00:03:13,360 --> 00:03:16,840
and the file extensions to cache the

72
00:03:16,840 --> 00:03:19,840
resources

73
00:03:21,040 --> 00:03:24,400
so since a url is being used

74
00:03:24,400 --> 00:03:27,040
as the main way that the different

75
00:03:27,040 --> 00:03:27,760
components

76
00:03:27,760 --> 00:03:29,920
communicate to each other we're going to

77
00:03:29,920 --> 00:03:32,640
go quickly over the different components

78
00:03:32,640 --> 00:03:36,000
in the url so basically the url has a

79
00:03:36,000 --> 00:03:37,680
couple of different components

80
00:03:37,680 --> 00:03:40,239
but the ones that that we are focusing

81
00:03:40,239 --> 00:03:41,200
on

82
00:03:41,200 --> 00:03:44,560
are the path the query and the fragment

83
00:03:44,560 --> 00:03:47,360
so basically the path is filed like a

84
00:03:47,360 --> 00:03:48,159
structure

85
00:03:48,159 --> 00:03:52,480
and separated by a couple of slashes

86
00:03:52,480 --> 00:03:55,840
uh the query is a list of key values

87
00:03:55,840 --> 00:03:57,680
separated by ampersand

88
00:03:57,680 --> 00:04:00,560
and the fragment can be an arbitrary

89
00:04:00,560 --> 00:04:02,159
string

90
00:04:02,159 --> 00:04:06,798
that used at the end of the url

91
00:04:09,280 --> 00:04:13,439
traditionally url

92
00:04:13,439 --> 00:04:16,959
reference web resources by directly

93
00:04:16,959 --> 00:04:20,000
mapping them to web servers file

94
00:04:20,000 --> 00:04:22,160
system structures as you can see for

95
00:04:22,160 --> 00:04:24,400
example example.com

96
00:04:24,400 --> 00:04:28,000
accounts index.php exactly

97
00:04:28,000 --> 00:04:30,479
represent the same web server file

98
00:04:30,479 --> 00:04:33,360
system structure account as a directory

99
00:04:33,360 --> 00:04:36,880
and index that php has a file but also

100
00:04:36,880 --> 00:04:40,400
beside the traditional url web servers

101
00:04:40,400 --> 00:04:43,759
introduce url rewriting mechanism

102
00:04:43,759 --> 00:04:47,040
abstraction mechanism to implement

103
00:04:47,040 --> 00:04:49,600
advanced application routing structures

104
00:04:49,600 --> 00:04:52,000
there are tons of benefits like as

105
00:04:52,000 --> 00:04:56,479
search engines optimizations and others

106
00:04:56,479 --> 00:05:00,400
this abstraction in other words

107
00:05:00,400 --> 00:05:04,080
web server pulse process and interpret

108
00:05:04,080 --> 00:05:07,600
url the second url

109
00:05:07,600 --> 00:05:10,960
in ways that are not clearly reflect

110
00:05:10,960 --> 00:05:14,639
in externally visible of your string

111
00:05:14,639 --> 00:05:17,440
in a clean url syntax in abstraction

112
00:05:17,440 --> 00:05:19,240
syntax

113
00:05:19,240 --> 00:05:23,440
example.com account slash v1

114
00:05:23,440 --> 00:05:26,080
it seems v1 is a file and account is a

115
00:05:26,080 --> 00:05:28,560
directory and path

116
00:05:28,560 --> 00:05:32,720
but in a reality index.php is a file and

117
00:05:32,720 --> 00:05:34,240
v1 represent

118
00:05:34,240 --> 00:05:40,080
as a value of the parameter one

119
00:05:42,240 --> 00:05:46,080
so as ali said uh when the web server

120
00:05:46,080 --> 00:05:46,800
using the

121
00:05:46,800 --> 00:05:50,960
clean url it's completely

122
00:05:50,960 --> 00:05:54,000
unknown to the other components in the

123
00:05:54,000 --> 00:05:55,520
internet such as the

124
00:05:55,520 --> 00:05:58,880
obsidians and the browsers

125
00:05:58,880 --> 00:06:01,600
for example as you can see in the

126
00:06:01,600 --> 00:06:04,240
account the slash id

127
00:06:04,240 --> 00:06:07,440
the browser cdns and proxy think account

128
00:06:07,440 --> 00:06:08,639
is a directory

129
00:06:08,639 --> 00:06:11,120
an id is a file on the server's file

130
00:06:11,120 --> 00:06:12,160
system

131
00:06:12,160 --> 00:06:15,440
however the server knows that the slash

132
00:06:15,440 --> 00:06:16,639
account

133
00:06:16,639 --> 00:06:20,240
actually referencing index.php

134
00:06:20,240 --> 00:06:23,280
file in the account directory an

135
00:06:23,280 --> 00:06:27,759
id is a parameter to index.php something

136
00:06:27,759 --> 00:06:31,520
we call the path confusion

137
00:06:31,520 --> 00:06:34,319
so formally the path confusion is a

138
00:06:34,319 --> 00:06:35,759
semantic

139
00:06:35,759 --> 00:06:39,120
disconnect among different

140
00:06:39,120 --> 00:06:42,240
framework independent web technologies

141
00:06:42,240 --> 00:06:43,600
such as browser

142
00:06:43,600 --> 00:06:47,039
cdn proxy server

143
00:06:47,039 --> 00:06:49,199
which technically results in different

144
00:06:49,199 --> 00:06:50,240
url path

145
00:06:50,240 --> 00:06:53,440
interpretation in other words web

146
00:06:53,440 --> 00:06:54,479
servers

147
00:06:54,479 --> 00:06:57,520
parse process and interpret urls

148
00:06:57,520 --> 00:07:01,120
in a way that are not clearly reflected

149
00:07:01,120 --> 00:07:03,840
in the externally visible of the url

150
00:07:03,840 --> 00:07:04,960
string

151
00:07:04,960 --> 00:07:08,400
which could be confusing to others

152
00:07:08,400 --> 00:07:13,280
such as the cdn and the browser and the

153
00:07:14,840 --> 00:07:16,639
proxy

154
00:07:16,639 --> 00:07:20,479
so the basic path confusion based on

155
00:07:20,479 --> 00:07:23,840
which the initial web caching web cache

156
00:07:23,840 --> 00:07:25,840
deception was introduced

157
00:07:25,840 --> 00:07:29,360
was actually using the path parameter

158
00:07:29,360 --> 00:07:32,800
for example if we have the example.com

159
00:07:32,800 --> 00:07:36,800
slash account.php the attacker can

160
00:07:36,800 --> 00:07:40,639
append slash non-existent.jpg

161
00:07:40,639 --> 00:07:43,759
to this url and request this url so what

162
00:07:43,759 --> 00:07:45,599
happens here is that

163
00:07:45,599 --> 00:07:48,479
to the eyes of the web server this is a

164
00:07:48,479 --> 00:07:50,400
valid url

165
00:07:50,400 --> 00:07:54,000
and the nonexistent.ph.jpg

166
00:07:54,000 --> 00:07:57,199
will be passed to the icon.php

167
00:07:57,199 --> 00:08:00,319
as a parameter however the middle

168
00:08:00,319 --> 00:08:03,840
components the cdns and the proxy

169
00:08:03,840 --> 00:08:05,840
think that the icon the php is a

170
00:08:05,840 --> 00:08:08,720
directory and the non-existent the jpg

171
00:08:08,720 --> 00:08:11,919
is a file and since the jpg is one of

172
00:08:11,919 --> 00:08:13,199
those

173
00:08:13,199 --> 00:08:16,319
static content uh that

174
00:08:16,319 --> 00:08:19,120
is usually used by different websites

175
00:08:19,120 --> 00:08:19,680
they're gonna

176
00:08:19,680 --> 00:08:22,639
cache their response to that content

177
00:08:22,639 --> 00:08:23,599
which technically

178
00:08:23,599 --> 00:08:27,280
results in the content of the

179
00:08:27,280 --> 00:08:30,560
account the php response being

180
00:08:30,560 --> 00:08:33,679
cash on the survey which could contain

181
00:08:33,679 --> 00:08:36,880
some private information

182
00:08:36,880 --> 00:08:40,080
yeah i said that explain pad believe pad

183
00:08:40,080 --> 00:08:42,159
confusion is a root cause of webcast

184
00:08:42,159 --> 00:08:44,519
deception attack introduced by omar jill

185
00:08:44,519 --> 00:08:45,680
2017

186
00:08:45,680 --> 00:08:49,120
and as sajud said

187
00:08:49,120 --> 00:08:51,440
in a step one if you look at the

188
00:08:51,440 --> 00:08:52,880
pictures

189
00:08:52,880 --> 00:08:54,880
the attacker tweaks the victim into

190
00:08:54,880 --> 00:08:58,399
visiting a url that requests a call.php

191
00:08:58,399 --> 00:09:02,160
non-existing jpg the first glance this

192
00:09:02,160 --> 00:09:06,000
appears to reference an image file

193
00:09:06,000 --> 00:09:08,800
but in fact does not point a valid

194
00:09:08,800 --> 00:09:11,120
resource on the server

195
00:09:11,120 --> 00:09:15,120
in step two the web server

196
00:09:15,120 --> 00:09:19,440
sorry the request reaches the web server

197
00:09:19,440 --> 00:09:22,560
uh and is processed the server

198
00:09:22,560 --> 00:09:25,839
in this example applies

199
00:09:25,839 --> 00:09:29,279
rewrite rules abstraction rules

200
00:09:29,279 --> 00:09:31,519
to discard the non-existent part or

201
00:09:31,519 --> 00:09:33,279
taught that the non-existent part

202
00:09:33,279 --> 00:09:37,519
is a parameter of the request object

203
00:09:37,519 --> 00:09:40,640
as a result the server sends back

204
00:09:40,640 --> 00:09:43,519
a success response but actually includes

205
00:09:43,519 --> 00:09:46,240
the content of account.php

206
00:09:46,240 --> 00:09:48,160
which contains private information

207
00:09:48,160 --> 00:09:51,040
sensitive informations about the victims

208
00:09:51,040 --> 00:09:51,920
account

209
00:09:51,920 --> 00:09:54,560
an affair of the url mapping that happen

210
00:09:54,560 --> 00:09:56,880
at the server side

211
00:09:56,880 --> 00:10:00,399
the web cache store

212
00:10:00,399 --> 00:10:03,279
stores the response as static email

213
00:10:03,279 --> 00:10:04,079
files

214
00:10:04,079 --> 00:10:06,399
because the caches based on the caching

215
00:10:06,399 --> 00:10:07,440
role

216
00:10:07,440 --> 00:10:09,519
cache the content based on the extension

217
00:10:09,519 --> 00:10:11,839
which is jpg obviously

218
00:10:11,839 --> 00:10:14,640
and finally in the final step the

219
00:10:14,640 --> 00:10:15,680
attacker

220
00:10:15,680 --> 00:10:18,480
visit the same url which result in a

221
00:10:18,480 --> 00:10:20,160
cache hit and granting

222
00:10:20,160 --> 00:10:23,279
unauthorized access to the victims cache

223
00:10:23,279 --> 00:10:24,880
content information most probably

224
00:10:24,880 --> 00:10:26,880
included private information or

225
00:10:26,880 --> 00:10:32,560
or account information

226
00:10:32,560 --> 00:10:36,079
in this presentation

227
00:10:36,079 --> 00:10:40,079
as we explain the cache technologies

228
00:10:40,079 --> 00:10:42,480
may be configured to make their caching

229
00:10:42,480 --> 00:10:43,279
decision

230
00:10:43,279 --> 00:10:46,240
based on complex roles such as pattern

231
00:10:46,240 --> 00:10:47,279
matches of

232
00:10:47,279 --> 00:10:50,880
file names extension paths and

233
00:10:50,880 --> 00:10:53,839
header content launching a successful

234
00:10:53,839 --> 00:10:55,920
webcache deception attack

235
00:10:55,920 --> 00:10:58,160
requires an attacker to craft a

236
00:10:58,160 --> 00:10:59,680
malicious url

237
00:10:59,680 --> 00:11:02,480
that triggering the caching rules but

238
00:11:02,480 --> 00:11:03,519
also

239
00:11:03,519 --> 00:11:06,720
on that it's interpreted as a legitimate

240
00:11:06,720 --> 00:11:07,680
request

241
00:11:07,680 --> 00:11:10,399
by the web server and generate the 200

242
00:11:10,399 --> 00:11:11,839
okay or something like as this and

243
00:11:11,839 --> 00:11:12,800
return a

244
00:11:12,800 --> 00:11:16,079
successful response caching rules

245
00:11:16,079 --> 00:11:19,600
often cannot be reliably predicted

246
00:11:19,600 --> 00:11:23,279
from an attacker external perspective

247
00:11:23,279 --> 00:11:25,279
rendering the process of crafting an

248
00:11:25,279 --> 00:11:26,640
attack you are an

249
00:11:26,640 --> 00:11:29,680
educated guesswork but attacker always

250
00:11:29,680 --> 00:11:30,800
has an upper hand

251
00:11:30,800 --> 00:11:34,000
to predict this caching rule and create

252
00:11:34,000 --> 00:11:37,279
a effective and novel attacks and not

253
00:11:37,279 --> 00:11:40,560
the hypothesis that exploring variation

254
00:11:40,560 --> 00:11:42,000
on the path confusion

255
00:11:42,000 --> 00:11:45,680
techniques may increase the likelihood

256
00:11:45,680 --> 00:11:48,959
of triggering caching rules

257
00:11:48,959 --> 00:11:52,000
and a valid web server response and make

258
00:11:52,000 --> 00:11:53,120
it possible

259
00:11:53,120 --> 00:11:56,079
to exploit additional web cache their

260
00:11:56,079 --> 00:11:57,920
cache deception vulnerabilities

261
00:11:57,920 --> 00:12:01,519
on sites that are not impacted by

262
00:12:01,519 --> 00:12:03,279
original and traditional

263
00:12:03,279 --> 00:12:06,480
proposed attack techniques to test our

264
00:12:06,480 --> 00:12:07,920
hypotheses

265
00:12:07,920 --> 00:12:10,480
we perform a scale analysis and

266
00:12:10,480 --> 00:12:12,000
measurements

267
00:12:12,000 --> 00:12:14,399
on different websites and apply these

268
00:12:14,399 --> 00:12:16,240
pad confusion

269
00:12:16,240 --> 00:12:19,040
techniques we are going actually to to

270
00:12:19,040 --> 00:12:20,560
share about this fat confusion

271
00:12:20,560 --> 00:12:22,399
techniques the effect distance of this

272
00:12:22,399 --> 00:12:24,079
and at the end we are going actually to

273
00:12:24,079 --> 00:12:26,079
share over observations during the

274
00:12:26,079 --> 00:12:28,079
exploitation of the webcast reception

275
00:12:28,079 --> 00:12:30,800
in the wild

276
00:12:32,800 --> 00:12:36,800
so basically encoding is at the core of

277
00:12:36,800 --> 00:12:40,240
our advanced exploitation techniques

278
00:12:40,240 --> 00:12:42,320
so before we get to the actual

279
00:12:42,320 --> 00:12:44,560
techniques the details of them

280
00:12:44,560 --> 00:12:46,880
i'm gonna go quickly over the url

281
00:12:46,880 --> 00:12:49,360
encoding so basically the url encoding

282
00:12:49,360 --> 00:12:52,639
is a technique to embed spatial or

283
00:12:52,639 --> 00:12:56,720
non-ascii characters in the url

284
00:12:56,720 --> 00:13:00,079
there are a couple of special characters

285
00:13:00,079 --> 00:13:02,000
such as

286
00:13:02,000 --> 00:13:05,440
semicolon question mark that

287
00:13:05,440 --> 00:13:07,920
have a special meaning in the url and in

288
00:13:07,920 --> 00:13:08,800
order to

289
00:13:08,800 --> 00:13:12,079
put them into the url as a data you need

290
00:13:12,079 --> 00:13:12,560
to

291
00:13:12,560 --> 00:13:15,279
encode them and usually the encoding

292
00:13:15,279 --> 00:13:16,000
happens

293
00:13:16,000 --> 00:13:19,200
using a percentage

294
00:13:19,200 --> 00:13:21,600
followed by the hexadecimal

295
00:13:21,600 --> 00:13:23,279
representation of

296
00:13:23,279 --> 00:13:27,279
the ascii code of that character

297
00:13:27,519 --> 00:13:31,839
so however this encoding

298
00:13:31,839 --> 00:13:34,639
can bring more confusion between

299
00:13:34,639 --> 00:13:36,560
different components

300
00:13:36,560 --> 00:13:40,720
of the internet such as the browsers and

301
00:13:40,720 --> 00:13:42,880
cdns and the servers

302
00:13:42,880 --> 00:13:46,240
if we apply custom encoding

303
00:13:46,240 --> 00:13:48,720
and that's something we're gonna explore

304
00:13:48,720 --> 00:13:49,760
through

305
00:13:49,760 --> 00:13:53,279
uh the future slides to tell you

306
00:13:53,279 --> 00:13:56,560
how different encoding can

307
00:13:56,560 --> 00:13:58,959
make the different components to have

308
00:13:58,959 --> 00:13:59,600
different

309
00:13:59,600 --> 00:14:03,120
interpretation of those encodings

310
00:14:03,120 --> 00:14:04,880
one of the effective techniques that

311
00:14:04,880 --> 00:14:07,839
wants to introduce in this presentation

312
00:14:07,839 --> 00:14:11,760
is using person 3f or encoded question

313
00:14:11,760 --> 00:14:13,040
mark these techniques

314
00:14:13,040 --> 00:14:16,480
target proxies load balancer

315
00:14:16,480 --> 00:14:19,600
any man in the middle http component

316
00:14:19,600 --> 00:14:21,760
with caching roles that are not

317
00:14:21,760 --> 00:14:23,839
configured to decode

318
00:14:23,839 --> 00:14:28,320
and ignore a standard url query string

319
00:14:28,320 --> 00:14:31,360
that being that begin with a question

320
00:14:31,360 --> 00:14:33,040
mark

321
00:14:33,040 --> 00:14:36,880
uh as as jj said the traditional

322
00:14:36,880 --> 00:14:38,639
exploitations only add one

323
00:14:38,639 --> 00:14:41,120
slash at the end of the files and makes

324
00:14:41,120 --> 00:14:43,440
a confusion for the caching proxy

325
00:14:43,440 --> 00:14:45,199
but this might target actually a

326
00:14:45,199 --> 00:14:47,120
different caching proxies that are not

327
00:14:47,120 --> 00:14:48,800
configured to decode the

328
00:14:48,800 --> 00:14:51,519
the url string and we'll accept that

329
00:14:51,519 --> 00:14:53,120
person 3f

330
00:14:53,120 --> 00:14:55,839
as part of the files and most probably

331
00:14:55,839 --> 00:14:57,199
in case of the

332
00:14:57,199 --> 00:15:00,920
caching proxies or cdn now the file is

333
00:15:00,920 --> 00:15:03,120
account.php person 3f

334
00:15:03,120 --> 00:15:06,639
whole of the string but in reality

335
00:15:06,639 --> 00:15:08,480
because path confusion happened i

336
00:15:08,480 --> 00:15:10,720
can't.php only consider as

337
00:15:10,720 --> 00:15:14,560
a file inside of the web server

338
00:15:14,560 --> 00:15:17,600
and the pad is a slash

339
00:15:17,600 --> 00:15:20,880
this confusion might actually cause

340
00:15:20,880 --> 00:15:24,560
storing the trigging the cache rules

341
00:15:24,560 --> 00:15:28,040
by saving the the response of the

342
00:15:28,040 --> 00:15:29,839
account.php

343
00:15:29,839 --> 00:15:33,839
based on the extension which is css

344
00:15:35,440 --> 00:15:37,920
same technique actually as a second

345
00:15:37,920 --> 00:15:40,000
technique of the confusion that we can

346
00:15:40,000 --> 00:15:42,480
we want to introduce here is a person 0

347
00:15:42,480 --> 00:15:43,440
a

348
00:15:43,440 --> 00:15:48,000
web servers proxies often but not always

349
00:15:48,000 --> 00:15:52,000
stop parsing urls at a new line

350
00:15:52,000 --> 00:15:52,959
characters

351
00:15:52,959 --> 00:15:57,199
discard the rest of the url

352
00:15:58,000 --> 00:16:00,800
as a result a request for this url would

353
00:16:00,800 --> 00:16:02,880
result in a successful response because

354
00:16:02,880 --> 00:16:03,440
the

355
00:16:03,440 --> 00:16:06,480
web server thought that it's account.php

356
00:16:06,480 --> 00:16:09,040
based on the rewrite rule and the cache

357
00:16:09,040 --> 00:16:10,959
would store the content

358
00:16:10,959 --> 00:16:13,920
believing that this is a static content

359
00:16:13,920 --> 00:16:16,480
based on the non-existent file extension

360
00:16:16,480 --> 00:16:22,480
same as the previous confusion technique

361
00:16:22,480 --> 00:16:25,440
so basically there are some application

362
00:16:25,440 --> 00:16:26,560
servers

363
00:16:26,560 --> 00:16:29,600
that accept lists of parameters in the

364
00:16:29,600 --> 00:16:30,240
url

365
00:16:30,240 --> 00:16:34,160
separated by semicolon instead of using

366
00:16:34,160 --> 00:16:35,440
the query

367
00:16:35,440 --> 00:16:39,759
strings and interestingly

368
00:16:39,759 --> 00:16:44,399
when we encode those semicolons

369
00:16:45,040 --> 00:16:48,880
the middle proxy and the obsidians

370
00:16:48,880 --> 00:16:51,920
they don't necessarily uh decode

371
00:16:51,920 --> 00:16:53,839
the url and they and they don't

372
00:16:53,839 --> 00:16:56,560
understand that this is the semicolon

373
00:16:56,560 --> 00:17:00,639
as a result you can see if we append

374
00:17:00,639 --> 00:17:04,000
a non-existent.css at the end of

375
00:17:04,000 --> 00:17:07,119
the url and encode the semicolon

376
00:17:07,119 --> 00:17:10,640
to the eyes of the web server

377
00:17:10,640 --> 00:17:13,679
uh this this is not more than something

378
00:17:13,679 --> 00:17:15,679
a parameter but to the eyes of the

379
00:17:15,679 --> 00:17:18,880
middle proxies and the cds

380
00:17:18,880 --> 00:17:22,799
is be identified as a css file

381
00:17:22,799 --> 00:17:26,799
and it's a good candidate for caching

382
00:17:26,799 --> 00:17:29,760
which results in the content of the

383
00:17:29,760 --> 00:17:31,360
response which contains private

384
00:17:31,360 --> 00:17:32,000
information

385
00:17:32,000 --> 00:17:34,880
to be cached here

386
00:17:36,240 --> 00:17:39,280
and last but not least is the fragment

387
00:17:39,280 --> 00:17:41,280
so basically the web servers

388
00:17:41,280 --> 00:17:44,240
often process the pound character as an

389
00:17:44,240 --> 00:17:46,799
html fragment identifier

390
00:17:46,799 --> 00:17:50,160
and they stop parsing the url when they

391
00:17:50,160 --> 00:17:54,320
reach this character but the proxies

392
00:17:54,320 --> 00:17:56,720
and the caching servers don't

393
00:17:56,720 --> 00:17:58,799
necessarily decode the url

394
00:17:58,799 --> 00:18:00,640
they don't understand that this is the

395
00:18:00,640 --> 00:18:01,840
pound

396
00:18:01,840 --> 00:18:05,919
and they continue parsing the url as a

397
00:18:05,919 --> 00:18:07,120
result

398
00:18:07,120 --> 00:18:10,559
when we add a non-existent.css at the

399
00:18:10,559 --> 00:18:12,720
end of the icon.php

400
00:18:12,720 --> 00:18:15,039
and separate them by the encoded version

401
00:18:15,039 --> 00:18:16,400
of the pound

402
00:18:16,400 --> 00:18:19,200
the cdn thinks this is a css file and

403
00:18:19,200 --> 00:18:20,880
they want to cache it

404
00:18:20,880 --> 00:18:23,120
even though the brow even though the web

405
00:18:23,120 --> 00:18:24,160
server

406
00:18:24,160 --> 00:18:26,880
understand this is a fragment it's going

407
00:18:26,880 --> 00:18:28,080
to throw it away

408
00:18:28,080 --> 00:18:31,840
and return a valid result

409
00:18:32,160 --> 00:18:34,320
okay let's talk about the effectiveness

410
00:18:34,320 --> 00:18:35,679
of presented

411
00:18:35,679 --> 00:18:38,720
confusion techniques and encoding we did

412
00:18:38,720 --> 00:18:40,160
a scale analysis

413
00:18:40,160 --> 00:18:43,280
analyze lots of domains and sites

414
00:18:43,280 --> 00:18:46,480
and we found 37

415
00:18:46,480 --> 00:18:48,559
vulnerable sites with webcache

416
00:18:48,559 --> 00:18:50,480
deceptions

417
00:18:50,480 --> 00:18:53,360
25 were exploited by basic and

418
00:18:53,360 --> 00:18:55,039
traditional their cache deception

419
00:18:55,039 --> 00:18:56,880
technique exploitation

420
00:18:56,880 --> 00:18:59,200
exploitation techniques but

421
00:18:59,200 --> 00:19:00,480
interestingly

422
00:19:00,480 --> 00:19:04,000
we discovered 11 side they're exploited

423
00:19:04,000 --> 00:19:07,760
only by advance and confusion techniques

424
00:19:07,760 --> 00:19:12,000
leading up cash deception it means

425
00:19:12,000 --> 00:19:14,960
we discovered an increased number of

426
00:19:14,960 --> 00:19:16,240
vulnerable sites by

427
00:19:16,240 --> 00:19:18,880
45 percent by applying these four

428
00:19:18,880 --> 00:19:20,880
encoding techniques

429
00:19:20,880 --> 00:19:25,360
more interestingly discovered some sites

430
00:19:25,360 --> 00:19:27,679
and couple of domains that only

431
00:19:27,679 --> 00:19:29,039
exploited with

432
00:19:29,039 --> 00:19:34,480
one of the techniques it means

433
00:19:35,520 --> 00:19:38,240
url encoding is quite effective to

434
00:19:38,240 --> 00:19:39,120
confuse

435
00:19:39,120 --> 00:19:42,640
different cdns and cache proxies

436
00:19:42,640 --> 00:19:46,000
and attackers should design the attack

437
00:19:46,000 --> 00:19:47,440
scenario

438
00:19:47,440 --> 00:19:49,600
based on each target an attacker always

439
00:19:49,600 --> 00:19:50,880
has the upper hand

440
00:19:50,880 --> 00:19:53,039
to find the effective path confusion

441
00:19:53,039 --> 00:19:55,200
techniques i want to emphasize on this

442
00:19:55,200 --> 00:19:55,919
point that

443
00:19:55,919 --> 00:19:57,840
path confusion is not limited to

444
00:19:57,840 --> 00:20:00,000
actually these four techniques

445
00:20:00,000 --> 00:20:01,919
attackers park hunters and even

446
00:20:01,919 --> 00:20:05,280
different administrators might be more

447
00:20:05,280 --> 00:20:07,760
creative to use different techniques

448
00:20:07,760 --> 00:20:09,120
different encoding techniques

449
00:20:09,120 --> 00:20:11,360
even double encodings or other

450
00:20:11,360 --> 00:20:12,400
characters

451
00:20:12,400 --> 00:20:14,960
to target the attacks and find the

452
00:20:14,960 --> 00:20:17,200
vulnerabilities

453
00:20:17,200 --> 00:20:20,799
all in all the results we presented in

454
00:20:20,799 --> 00:20:21,120
this

455
00:20:21,120 --> 00:20:23,840
slide confirm our hypothesis that

456
00:20:23,840 --> 00:20:24,640
launching

457
00:20:24,640 --> 00:20:27,840
webcash deception attack be variation on

458
00:20:27,840 --> 00:20:29,360
path confusion

459
00:20:29,360 --> 00:20:32,080
as opposed to only using the originally

460
00:20:32,080 --> 00:20:35,039
proposed pad parameter techniques

461
00:20:35,039 --> 00:20:38,240
result in increased possibility of

462
00:20:38,240 --> 00:20:40,880
successful exploitation significantly

463
00:20:40,880 --> 00:20:44,559
moreover two of the explored variation

464
00:20:44,559 --> 00:20:46,400
elicits significantly

465
00:20:46,400 --> 00:20:49,520
more 200 okay server response in the

466
00:20:49,520 --> 00:20:51,440
process

467
00:20:51,440 --> 00:20:54,400
increasing the likelihood of web server

468
00:20:54,400 --> 00:20:55,200
returning

469
00:20:55,200 --> 00:20:58,720
valid and private information it means

470
00:20:58,720 --> 00:21:02,799
pad confusion increase the chance of

471
00:21:02,799 --> 00:21:04,960
obtaining more sensitive information

472
00:21:04,960 --> 00:21:06,799
because force the web servers

473
00:21:06,799 --> 00:21:09,840
to return 200 more 200 okay

474
00:21:09,840 --> 00:21:16,480
compared to the traditional techniques

475
00:21:16,480 --> 00:21:19,919
beside the scale analysis we

476
00:21:19,919 --> 00:21:23,039
we discovered lots of different enabling

477
00:21:23,039 --> 00:21:23,840
factors

478
00:21:23,840 --> 00:21:26,799
beside the webcast deception

479
00:21:26,799 --> 00:21:27,919
exploitations

480
00:21:27,919 --> 00:21:30,000
and in this part of the presentation we

481
00:21:30,000 --> 00:21:32,080
are going to share about the

482
00:21:32,080 --> 00:21:34,720
notable observation we had during the

483
00:21:34,720 --> 00:21:36,320
scale analysis of the

484
00:21:36,320 --> 00:21:38,320
webcast deception beside the

485
00:21:38,320 --> 00:21:39,760
effectiveness of the

486
00:21:39,760 --> 00:21:42,799
path confusion

487
00:21:43,520 --> 00:21:46,240
we noticed that webcash deception are

488
00:21:46,240 --> 00:21:47,520
mostly known as

489
00:21:47,520 --> 00:21:50,000
that is mostly known as a techniques

490
00:21:50,000 --> 00:21:51,440
that can disclose

491
00:21:51,440 --> 00:21:54,559
sensitive information and pii

492
00:21:54,559 --> 00:21:56,400
but that cache deception can be even

493
00:21:56,400 --> 00:21:57,679
more

494
00:21:57,679 --> 00:22:00,240
severe vulnerability and more critical

495
00:22:00,240 --> 00:22:01,360
vulnerability

496
00:22:01,360 --> 00:22:03,840
because besides that finding a leakage

497
00:22:03,840 --> 00:22:04,799
of different

498
00:22:04,799 --> 00:22:08,480
piis user username email phone and etc

499
00:22:08,480 --> 00:22:11,520
we discovered in the cache pages in for

500
00:22:11,520 --> 00:22:12,240
example

501
00:22:12,240 --> 00:22:15,200
some domains we discover csrf token

502
00:22:15,200 --> 00:22:15,760
leaked

503
00:22:15,760 --> 00:22:18,559
in a webcast deception response attack

504
00:22:18,559 --> 00:22:19,520
consequently

505
00:22:19,520 --> 00:22:22,000
we were able on the times to bypass the

506
00:22:22,000 --> 00:22:24,240
csrf protection which is only based on

507
00:22:24,240 --> 00:22:26,320
the csrf token without presence of for

508
00:22:26,320 --> 00:22:27,039
example

509
00:22:27,039 --> 00:22:30,640
same side cookie or reef rare check also

510
00:22:30,640 --> 00:22:34,480
we discovered some uh other

511
00:22:34,480 --> 00:22:37,200
use of the csrf token as a state

512
00:22:37,200 --> 00:22:38,159
parameter in an

513
00:22:38,159 --> 00:22:41,280
oauth protocol which gave us this

514
00:22:41,280 --> 00:22:43,280
capability to us to run a or three

515
00:22:43,280 --> 00:22:43,840
direction

516
00:22:43,840 --> 00:22:46,240
you are a csrf consequently link an

517
00:22:46,240 --> 00:22:47,679
attacker's account

518
00:22:47,679 --> 00:22:50,960
to the to the victims or also we

519
00:22:50,960 --> 00:22:53,360
discover session identifier

520
00:22:53,360 --> 00:22:56,559
or spur token or api token means session

521
00:22:56,559 --> 00:22:57,840
hijacking

522
00:22:57,840 --> 00:23:01,039
is still an effective attack scenario

523
00:23:01,039 --> 00:23:02,559
with combination of the webcache

524
00:23:02,559 --> 00:23:05,280
deception then the cache deception also

525
00:23:05,280 --> 00:23:08,000
might be used even to disclose some some

526
00:23:08,000 --> 00:23:10,159
private file names like as dynamic

527
00:23:10,159 --> 00:23:12,400
javascript file names open a doors for

528
00:23:12,400 --> 00:23:13,039
cross-site

529
00:23:13,039 --> 00:23:16,080
scripting inclusion

530
00:23:18,960 --> 00:23:22,480
so basically the victims

531
00:23:22,480 --> 00:23:25,200
have to be authenticated to the website

532
00:23:25,200 --> 00:23:27,520
in order for the website to generate

533
00:23:27,520 --> 00:23:31,200
responses with private information

534
00:23:31,200 --> 00:23:33,919
however we wanted to see how the

535
00:23:33,919 --> 00:23:35,919
situation should be for the attacker

536
00:23:35,919 --> 00:23:38,000
whether it should be authenticated or

537
00:23:38,000 --> 00:23:40,960
unauthenticated interestingly we figured

538
00:23:40,960 --> 00:23:41,840
out

539
00:23:41,840 --> 00:23:44,320
the attackers do not need to be

540
00:23:44,320 --> 00:23:45,279
authenticated

541
00:23:45,279 --> 00:23:48,480
in order to launch the webcast deception

542
00:23:48,480 --> 00:23:50,240
which increase the likelihood of

543
00:23:50,240 --> 00:23:53,520
likelihood of the wcd attacks

544
00:23:53,520 --> 00:23:56,640
and even the website with no public

545
00:23:56,640 --> 00:23:58,960
registration can be targeted by the

546
00:23:58,960 --> 00:24:01,679
attackers

547
00:24:01,840 --> 00:24:04,720
so one more thing we wanted to uh look

548
00:24:04,720 --> 00:24:05,279
into

549
00:24:05,279 --> 00:24:08,159
was the locality of the webcache

550
00:24:08,159 --> 00:24:11,120
deception so basically we wanted to see

551
00:24:11,120 --> 00:24:13,679
how much the attacker how close the

552
00:24:13,679 --> 00:24:15,520
attacker should be

553
00:24:15,520 --> 00:24:18,559
to the uh victim in order to webcast

554
00:24:18,559 --> 00:24:19,440
decision

555
00:24:19,440 --> 00:24:22,640
to be possible as you know the caching

556
00:24:22,640 --> 00:24:24,960
the the basic concept of the caching is

557
00:24:24,960 --> 00:24:26,720
to bring the content

558
00:24:26,720 --> 00:24:30,480
closer to the user as a result

559
00:24:30,480 --> 00:24:34,240
we we connected we we connected

560
00:24:34,240 --> 00:24:38,240
uh to a web cache uh server

561
00:24:38,240 --> 00:24:41,279
which is close to a user from boston

562
00:24:41,279 --> 00:24:41,840
united

563
00:24:41,840 --> 00:24:45,039
states and as a attacker we try to load

564
00:24:45,039 --> 00:24:46,559
that content

565
00:24:46,559 --> 00:24:49,840
in italy the city of trento

566
00:24:49,840 --> 00:24:52,799
and interestingly we saw that there were

567
00:24:52,799 --> 00:24:54,320
six websites

568
00:24:54,320 --> 00:24:57,919
that we were able to get the content of

569
00:24:57,919 --> 00:24:59,039
the cached

570
00:24:59,039 --> 00:25:03,200
resource that was written by the victim

571
00:25:03,200 --> 00:25:05,679
which which shows that the attack can be

572
00:25:05,679 --> 00:25:09,600
possible even across continent

573
00:25:13,600 --> 00:25:17,600
okay another notable observation that we

574
00:25:17,600 --> 00:25:19,360
had is that

575
00:25:19,360 --> 00:25:22,000
the caches typically store objects for a

576
00:25:22,000 --> 00:25:23,200
short amount of time

577
00:25:23,200 --> 00:25:25,919
it means attackers have a limited window

578
00:25:25,919 --> 00:25:27,919
of opportunity to launch a successful

579
00:25:27,919 --> 00:25:30,240
webcash deception attack

580
00:25:30,240 --> 00:25:32,480
when we launched our attack during the

581
00:25:32,480 --> 00:25:34,880
vulnerable target we noticed that

582
00:25:34,880 --> 00:25:37,360
repeated the attack with one hour six

583
00:25:37,360 --> 00:25:38,080
hours and

584
00:25:38,080 --> 00:25:41,200
one day delay

585
00:25:41,200 --> 00:25:44,799
for 19 websites that we started

586
00:25:44,799 --> 00:25:48,640
only 16 10 and 9 were

587
00:25:48,640 --> 00:25:51,520
exploitable in each case respectively it

588
00:25:51,520 --> 00:25:52,960
clearly means

589
00:25:52,960 --> 00:25:54,880
even we notice that some websites is

590
00:25:54,880 --> 00:25:56,240
exploitable only for

591
00:25:56,240 --> 00:25:59,120
a couple of minutes a few minutes then

592
00:25:59,120 --> 00:26:01,678
during the

593
00:26:01,840 --> 00:26:03,600
webcast deception vulnerability

594
00:26:03,600 --> 00:26:04,960
assessment

595
00:26:04,960 --> 00:26:07,279
uh the security expert and buck hunter

596
00:26:07,279 --> 00:26:08,799
should make sure that they have a

597
00:26:08,799 --> 00:26:10,640
limited window of the times highly

598
00:26:10,640 --> 00:26:12,559
depend on the configuration of the

599
00:26:12,559 --> 00:26:15,279
cache server or cdn but it's a very

600
00:26:15,279 --> 00:26:16,159
important

601
00:26:16,159 --> 00:26:19,440
topic that the the

602
00:26:19,440 --> 00:26:24,400
attackers have a limited in of time

603
00:26:24,400 --> 00:26:28,240
we also tested top vendors that provide

604
00:26:28,240 --> 00:26:31,600
cdns and wanted to see how their

605
00:26:31,600 --> 00:26:35,440
default configuration is we've seen that

606
00:26:35,440 --> 00:26:38,720
by default some major cdn vendors do not

607
00:26:38,720 --> 00:26:42,640
make rfc compliant caching decisions for

608
00:26:42,640 --> 00:26:43,200
example

609
00:26:43,200 --> 00:26:46,799
in akamai you basically can ignore

610
00:26:46,799 --> 00:26:49,679
all the headers and write down some

611
00:26:49,679 --> 00:26:51,520
specific rules

612
00:26:51,520 --> 00:26:55,200
based on the the file extensions

613
00:26:55,200 --> 00:26:58,960
to cache your results

614
00:26:58,960 --> 00:27:01,600
which shows that it could be very very

615
00:27:01,600 --> 00:27:03,679
complicated the way

616
00:27:03,679 --> 00:27:06,159
different caching servers or different

617
00:27:06,159 --> 00:27:06,880
cdns

618
00:27:06,880 --> 00:27:09,760
are handling the responses regarding the

619
00:27:09,760 --> 00:27:12,640
caching decisions

620
00:27:12,640 --> 00:27:16,640
yeah as jj say some major cdn vendor do

621
00:27:16,640 --> 00:27:16,960
not

622
00:27:16,960 --> 00:27:20,399
make rfc compliant caching decisions

623
00:27:20,399 --> 00:27:23,600
or even they if they are rfc compliant

624
00:27:23,600 --> 00:27:25,200
they give this capability to

625
00:27:25,200 --> 00:27:26,799
administrator to

626
00:27:26,799 --> 00:27:30,559
ignore an override caching header which

627
00:27:30,559 --> 00:27:33,120
makes webcache deception live and still

628
00:27:33,120 --> 00:27:33,760
an

629
00:27:33,760 --> 00:27:37,919
important attack scenario in the web

630
00:27:40,640 --> 00:27:42,159
one of the important things that i want

631
00:27:42,159 --> 00:27:44,159
to conclude here the lesson and learned

632
00:27:44,159 --> 00:27:44,720
of the

633
00:27:44,720 --> 00:27:47,760
to conclude the presentation is that

634
00:27:47,760 --> 00:27:49,919
configuring the caches as jj say

635
00:27:49,919 --> 00:27:51,679
currently is not a trivial task it's

636
00:27:51,679 --> 00:27:53,120
pretty complicated

637
00:27:53,120 --> 00:27:55,360
and cdn are not designed to be a

638
00:27:55,360 --> 00:27:57,919
plug-and-play solutions

639
00:27:57,919 --> 00:28:01,279
there is no widespread lack of user

640
00:28:01,279 --> 00:28:03,520
awareness about the webcast deception as

641
00:28:03,520 --> 00:28:04,720
you can see

642
00:28:04,720 --> 00:28:08,159
three years after publishing these

643
00:28:08,159 --> 00:28:08,799
attacks

644
00:28:08,799 --> 00:28:11,840
there are lots of vulnerable websites in

645
00:28:11,840 --> 00:28:15,039
the wilds high profile websites

646
00:28:15,039 --> 00:28:17,360
that even in our study we detected them

647
00:28:17,360 --> 00:28:18,720
as a vulnerable and

648
00:28:18,720 --> 00:28:22,080
we we report to them this vulnerability

649
00:28:22,080 --> 00:28:25,360
but still we believe

650
00:28:25,360 --> 00:28:27,760
that cash deception is a system safety

651
00:28:27,760 --> 00:28:28,480
problems

652
00:28:28,480 --> 00:28:30,880
in in an environment with cache

653
00:28:30,880 --> 00:28:32,799
deception vulnerabilities there are no

654
00:28:32,799 --> 00:28:35,039
isolated faulty components

655
00:28:35,039 --> 00:28:38,480
to be honest web server load balancer

656
00:28:38,480 --> 00:28:41,600
proxies and caches all

657
00:28:41,600 --> 00:28:44,159
individually perform the functionality

658
00:28:44,159 --> 00:28:44,880
they are

659
00:28:44,880 --> 00:28:48,320
designed for caching based on extension

660
00:28:48,320 --> 00:28:52,000
overriding the cache headers or even

661
00:28:52,000 --> 00:28:55,200
for example send

662
00:28:55,200 --> 00:28:58,320
applying the abstraction layer of the

663
00:28:58,320 --> 00:29:02,000
url representation as a clean card

664
00:29:02,000 --> 00:29:04,720
but security researchers should adopt a

665
00:29:04,720 --> 00:29:07,039
security analysis

666
00:29:07,039 --> 00:29:10,240
examine not only in the visual system

667
00:29:10,240 --> 00:29:11,200
component

668
00:29:11,200 --> 00:29:14,159
but also their interactions as a whole

669
00:29:14,159 --> 00:29:16,480
system

670
00:29:16,480 --> 00:29:17,679
most important things in this

671
00:29:17,679 --> 00:29:19,679
presentation variation and path

672
00:29:19,679 --> 00:29:21,600
confusion techniques

673
00:29:21,600 --> 00:29:24,720
make it possible to exploit sites

674
00:29:24,720 --> 00:29:27,279
that are otherwise not impacted by

675
00:29:27,279 --> 00:29:29,600
original attack

676
00:29:29,600 --> 00:29:32,000
some sites were only exploitable with

677
00:29:32,000 --> 00:29:34,640
one specific encoding techniques

678
00:29:34,640 --> 00:29:36,960
and encoding techniques can be designed

679
00:29:36,960 --> 00:29:40,720
specifically to hit one or two targets

680
00:29:40,720 --> 00:29:43,120
and at the end pat confusion can be used

681
00:29:43,120 --> 00:29:44,320
in other attack

682
00:29:44,320 --> 00:29:48,880
vectors in 2018 we showed that

683
00:29:48,880 --> 00:29:52,720
a relative pad override rpo can

684
00:29:52,720 --> 00:29:56,000
can also pad confusion can applied in

685
00:29:56,000 --> 00:29:57,919
these attack techniques and increase the

686
00:29:57,919 --> 00:29:59,840
chance of the exploitability pad

687
00:29:59,840 --> 00:30:02,000
confusion can apply to caching

688
00:30:02,000 --> 00:30:04,799
to cache poisoning or cpd os and other

689
00:30:04,799 --> 00:30:07,200
attacks

690
00:30:07,440 --> 00:30:09,919
special thanks for joining us in these

691
00:30:09,919 --> 00:30:11,120
presentations

692
00:30:11,120 --> 00:30:12,799
and we will be happy to answer your

693
00:30:12,799 --> 00:30:14,559
question

694
00:30:14,559 --> 00:30:17,760
thank you for attending our talk uh

695
00:30:17,760 --> 00:30:22,559
i hope it was interesting and happy to

696
00:30:22,559 --> 00:30:31,360
answer your questions

