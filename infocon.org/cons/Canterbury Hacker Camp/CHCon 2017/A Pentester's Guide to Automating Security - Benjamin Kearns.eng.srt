1
00:00:03,350 --> 00:00:06,660
hi so yeah for those of you who don't

2
00:00:06,660 --> 00:00:08,910
know I'm Ben I am one of the tech leads

3
00:00:08,910 --> 00:00:12,599
at lateral security we do the full range

4
00:00:12,599 --> 00:00:14,190
of technical testing and advisory

5
00:00:14,190 --> 00:00:20,210
services so I have a problem I

6
00:00:20,210 --> 00:00:22,680
over-engineer absolutely everything I

7
00:00:22,680 --> 00:00:25,650
built this of course includes my overly

8
00:00:25,650 --> 00:00:29,490
complex home network I also worked in

9
00:00:29,490 --> 00:00:31,019
InfoSec which means that it would be

10
00:00:31,019 --> 00:00:34,950
very embarrassing if it got popped I

11
00:00:34,950 --> 00:00:36,600
don't have a lot of my own time to

12
00:00:36,600 --> 00:00:39,930
maintain it and not so much a problem

13
00:00:39,930 --> 00:00:42,329
but I'm also quite cheap so I don't like

14
00:00:42,329 --> 00:00:43,789
to spend a lot of money on expensive

15
00:00:43,789 --> 00:00:46,980
software I make an exception that nice

16
00:00:46,980 --> 00:00:53,460
shiny hardware so the goal is to be able

17
00:00:53,460 --> 00:00:55,260
to provide a high level of baseline

18
00:00:55,260 --> 00:00:57,420
security for my home network with less

19
00:00:57,420 --> 00:01:00,000
than two hours a week and by that I mean

20
00:01:00,000 --> 00:01:02,539
I want it to be able to with stone

21
00:01:02,539 --> 00:01:07,170
sustain a an attack from colleagues and

22
00:01:07,170 --> 00:01:10,950
friends who you know are decks and want

23
00:01:10,950 --> 00:01:14,000
to try and pop it and a lot of them

24
00:01:14,000 --> 00:01:19,200
moderate to high skill level so first of

25
00:01:19,200 --> 00:01:21,720
all a bit of a disclaimer these are just

26
00:01:21,720 --> 00:01:24,180
the toys that I play with not

27
00:01:24,180 --> 00:01:26,610
necessarily endorsing them depending on

28
00:01:26,610 --> 00:01:28,560
your technology or stack you might be

29
00:01:28,560 --> 00:01:30,900
able to find bit of tools that are more

30
00:01:30,900 --> 00:01:32,759
suited to your environment but basically

31
00:01:32,759 --> 00:01:34,380
the idea is that because my home network

32
00:01:34,380 --> 00:01:37,829
is probably more similar to a small to

33
00:01:37,829 --> 00:01:42,000
mid-sized office environment you know I

34
00:01:42,000 --> 00:01:43,740
thought I'd discuss some ideas and

35
00:01:43,740 --> 00:01:45,149
techniques around how you might be able

36
00:01:45,149 --> 00:01:46,530
to go about automating some of the

37
00:01:46,530 --> 00:01:49,009
baseline security stuff

38
00:01:49,009 --> 00:01:52,799
if you're using Windows I'm so sorry

39
00:01:52,799 --> 00:01:55,470
I'm mostly running Linux but there'll be

40
00:01:55,470 --> 00:01:58,049
equivalent tools and those lots of

41
00:01:58,049 --> 00:02:01,770
environments so how do we do this so

42
00:02:01,770 --> 00:02:03,719
like any complex problem in computer

43
00:02:03,719 --> 00:02:05,640
science we divide and conquer so we

44
00:02:05,640 --> 00:02:07,979
split it up based on the suppose overall

45
00:02:07,979 --> 00:02:10,169
types of or classes of vulnerabilities

46
00:02:10,169 --> 00:02:13,170
that we've got so architecture and

47
00:02:13,170 --> 00:02:13,830
design

48
00:02:13,830 --> 00:02:16,920
take a look at the infrastructure how to

49
00:02:16,920 --> 00:02:19,530
automate parts of web or finding web

50
00:02:19,530 --> 00:02:21,990
vulnerabilities and overall controls

51
00:02:21,990 --> 00:02:23,960
that we can apply across the environment

52
00:02:23,960 --> 00:02:26,280
and where possible we align these two

53
00:02:26,280 --> 00:02:30,180
specific standards so first of all what

54
00:02:30,180 --> 00:02:33,290
are we protecting and against who so

55
00:02:33,290 --> 00:02:35,760
what do we have in terms of physical kit

56
00:02:35,760 --> 00:02:39,870
I've got a BIM server ubiquity Wi-Fi and

57
00:02:39,870 --> 00:02:43,230
a micro tech router again probably not

58
00:02:43,230 --> 00:02:44,790
just similar to what you'd see in many

59
00:02:44,790 --> 00:02:50,040
small office environments terms of

60
00:02:50,040 --> 00:02:52,020
applications I'm running a whole bunch

61
00:02:52,020 --> 00:02:53,280
of stuff on that VM server

62
00:02:53,280 --> 00:02:55,700
I've got custom budgeting apps

63
00:02:55,700 --> 00:02:58,340
development infrastructure cuz I like to

64
00:02:58,340 --> 00:03:01,800
hack on Epson must be at home game

65
00:03:01,800 --> 00:03:03,330
server that I'm hosting for friends and

66
00:03:03,330 --> 00:03:07,560
family password manager similar to

67
00:03:07,560 --> 00:03:09,720
LastPass and of course the lovely

68
00:03:09,720 --> 00:03:16,080
Internet of Things devices so in terms

69
00:03:16,080 --> 00:03:18,570
of who we're protecting against

70
00:03:18,570 --> 00:03:19,709
traditionally you've got the traditional

71
00:03:19,709 --> 00:03:22,590
well you've got the traditional four so

72
00:03:22,590 --> 00:03:26,130
that's criminals organized crime that

73
00:03:26,130 --> 00:03:27,870
typically after money but fairly high

74
00:03:27,870 --> 00:03:30,320
skill willing to play the long game

75
00:03:30,320 --> 00:03:34,400
Hector bursts who during skill level

76
00:03:34,400 --> 00:03:36,690
sometimes are after political gains

77
00:03:36,690 --> 00:03:37,920
sometimes they just want to call it your

78
00:03:37,920 --> 00:03:40,400
reputation all damaged that's kind of

79
00:03:40,400 --> 00:03:43,230
you know at least trying to model it my

80
00:03:43,230 --> 00:03:45,750
threat model or my primary threat

81
00:03:45,750 --> 00:03:47,700
insider threats tend to be staff members

82
00:03:47,700 --> 00:03:50,160
who either are disgruntled or are trying

83
00:03:50,160 --> 00:03:53,880
to be helpful and inadvertently living

84
00:03:53,880 --> 00:03:57,500
people through and state-sponsored who

85
00:03:57,500 --> 00:03:59,760
you know tend to have high budget are

86
00:03:59,760 --> 00:04:03,090
after political or economic or military

87
00:04:03,090 --> 00:04:08,400
gain but as they say if more SEDs after

88
00:04:08,400 --> 00:04:11,610
you you're probably going to die but

89
00:04:11,610 --> 00:04:13,440
even even with that in mind some of

90
00:04:13,440 --> 00:04:14,640
these techniques would at least make it

91
00:04:14,640 --> 00:04:17,089
harder for a state-sponsored actor to

92
00:04:17,089 --> 00:04:19,470
get in you know if you have an OD on

93
00:04:19,470 --> 00:04:21,988
your perimeter and then a flat network

94
00:04:21,988 --> 00:04:24,840
behind that that's one guy for you know

95
00:04:24,840 --> 00:04:27,190
a couple of hours that's tied up

96
00:04:27,190 --> 00:04:29,140
if they need to do physical entry that's

97
00:04:29,140 --> 00:04:32,580
you know tying up 20 people for multiple

98
00:04:32,580 --> 00:04:35,920
days weeks whatever and that's a lot

99
00:04:35,920 --> 00:04:37,180
bigger there's a lot more paperwork

100
00:04:37,180 --> 00:04:40,660
involved in that cool so initially I

101
00:04:40,660 --> 00:04:42,490
started to segregate the architecture

102
00:04:42,490 --> 00:04:44,920
based on the applications that I was

103
00:04:44,920 --> 00:04:48,280
running and the almost data realms so I

104
00:04:48,280 --> 00:04:51,340
had say for example the wireless

105
00:04:51,340 --> 00:04:54,160
infrastructure an e-commerce site I was

106
00:04:54,160 --> 00:04:55,990
running for a friend build

107
00:04:55,990 --> 00:04:58,870
infrastructure all on their own separate

108
00:04:58,870 --> 00:05:00,870
VLANs with the router / firewall

109
00:05:00,870 --> 00:05:03,120
mediating all the traffic in between

110
00:05:03,120 --> 00:05:08,500
that's a little bit messy so I ended up

111
00:05:08,500 --> 00:05:10,090
reading the Google Cloud Security guide

112
00:05:10,090 --> 00:05:15,190
and that has a great concept of every

113
00:05:15,190 --> 00:05:16,350
server should be able to withstand

114
00:05:16,350 --> 00:05:18,730
attacks even if every other server and

115
00:05:18,730 --> 00:05:21,550
the environment is compromised so that

116
00:05:21,550 --> 00:05:25,200
led me to an architecture as follows

117
00:05:25,200 --> 00:05:28,930
first of all I've got the IOT VLAN a man

118
00:05:28,930 --> 00:05:30,730
in the middle my light bulbs they were

119
00:05:30,730 --> 00:05:32,590
very chatty with China they're not

120
00:05:32,590 --> 00:05:34,330
getting anywhere near anything else and

121
00:05:34,330 --> 00:05:39,370
especially the internet I have the gist

122
00:05:39,370 --> 00:05:42,220
slash wireless VLAN that's effectively

123
00:05:42,220 --> 00:05:46,620
as untrusted as the Internet and in fact

124
00:05:46,620 --> 00:05:49,300
whether ipv6 I've got just direct

125
00:05:49,300 --> 00:05:52,960
connectivity yet no firewall I have the

126
00:05:52,960 --> 00:05:57,250
server VLAN again each server should be

127
00:05:57,250 --> 00:06:00,760
up stand by itself and finally I have an

128
00:06:00,760 --> 00:06:04,150
admin VLAN which is mostly used for IP

129
00:06:04,150 --> 00:06:07,330
whitelist in just four so only admin

130
00:06:07,330 --> 00:06:10,780
traffic can come from there so that's

131
00:06:10,780 --> 00:06:12,070
kind of the overall architecture and

132
00:06:12,070 --> 00:06:15,100
design of the network now on to the

133
00:06:15,100 --> 00:06:17,920
infrastructure so because each servers

134
00:06:17,920 --> 00:06:19,510
standing for itself hardening is

135
00:06:19,510 --> 00:06:24,010
absolutely key and by hardening I mean

136
00:06:24,010 --> 00:06:25,810
removing unnecessary services from the

137
00:06:25,810 --> 00:06:28,750
hosts removing unnecessary features and

138
00:06:28,750 --> 00:06:30,100
for some strong authentication and

139
00:06:30,100 --> 00:06:32,530
encryption and applying defense-in-depth

140
00:06:32,530 --> 00:06:37,630
those mid-level controls and the reason

141
00:06:37,630 --> 00:06:39,970
for this is that if the servers are

142
00:06:39,970 --> 00:06:40,900
running

143
00:06:40,900 --> 00:06:45,220
you know old software that or and things

144
00:06:45,220 --> 00:06:46,510
that aren't necessary then your increase

145
00:06:46,510 --> 00:06:48,040
your tech service so people can

146
00:06:48,040 --> 00:06:50,680
potentially compromise the server from

147
00:06:50,680 --> 00:06:53,890
their means and things like unnecessary

148
00:06:53,890 --> 00:06:57,190
features so for example um if the

149
00:06:57,190 --> 00:06:58,990
dub-dub-dub data account were

150
00:06:58,990 --> 00:07:01,690
compromised on a web server and somebody

151
00:07:01,690 --> 00:07:05,830
were to have low-level user access on

152
00:07:05,830 --> 00:07:09,280
their box then if for example you've got

153
00:07:09,280 --> 00:07:11,410
a file system driver that's really

154
00:07:11,410 --> 00:07:13,300
obscure and unused but has a kernel

155
00:07:13,300 --> 00:07:15,580
previous unit then people can

156
00:07:15,580 --> 00:07:17,710
potentially get full root access on the

157
00:07:17,710 --> 00:07:19,630
box so removing unnecessary features

158
00:07:19,630 --> 00:07:23,140
kind of can help harden the system once

159
00:07:23,140 --> 00:07:25,170
an attacker has a foothold on the system

160
00:07:25,170 --> 00:07:27,490
so thankfully we have great server

161
00:07:27,490 --> 00:07:30,150
automation tools oops

162
00:07:30,150 --> 00:07:32,800
chef Puffin danceable I mean with

163
00:07:32,800 --> 00:07:36,190
ansible for hardening you know I'm sure

164
00:07:36,190 --> 00:07:38,940
other people are using other things

165
00:07:38,940 --> 00:07:41,020
there's also this great project called

166
00:07:41,020 --> 00:07:43,450
Divi i/o which basically is just

167
00:07:43,450 --> 00:07:45,690
pre-built scripts for all of those above

168
00:07:45,690 --> 00:07:49,000
server automation tools that will harden

169
00:07:49,000 --> 00:07:50,950
the application level as well as the OS

170
00:07:50,950 --> 00:07:54,940
level so that actually makes it really

171
00:07:54,940 --> 00:07:55,270
easy

172
00:07:55,270 --> 00:07:59,380
so with ansible prerequisites for each

173
00:07:59,380 --> 00:08:02,200
server Python 2 and either you say this

174
00:08:02,200 --> 00:08:03,820
is H keys or the same password across

175
00:08:03,820 --> 00:08:07,870
everything and then on the controller to

176
00:08:07,870 --> 00:08:10,440
install the dev tools is just ansible

177
00:08:10,440 --> 00:08:14,220
gateway installed if sick OS hardening

178
00:08:14,220 --> 00:08:16,900
whatever applications you wanted to

179
00:08:16,900 --> 00:08:22,660
harden instable has three key issue

180
00:08:22,660 --> 00:08:25,270
concepts tasks are effectively commands

181
00:08:25,270 --> 00:08:27,100
and so you had so much ones that could

182
00:08:27,100 --> 00:08:31,390
run on the command line roles are as

183
00:08:31,390 --> 00:08:33,429
oppose roles that you're assigned to

184
00:08:33,429 --> 00:08:35,380
servers so for example a server might be

185
00:08:35,380 --> 00:08:37,840
like an a bunch a server it might be a

186
00:08:37,840 --> 00:08:40,240
web server once over can have multiple

187
00:08:40,240 --> 00:08:43,390
roles and the inventory is the file that

188
00:08:43,390 --> 00:08:46,870
you use to define all of these so say

189
00:08:46,870 --> 00:08:48,880
for example you might say that all the

190
00:08:48,880 --> 00:08:53,560
web servers and web server role will

191
00:08:53,560 --> 00:08:54,430
have

192
00:08:54,430 --> 00:08:58,630
a task that will I be whitelist 443 to

193
00:08:58,630 --> 00:09:00,250
the reverse proxy or something like that

194
00:09:00,250 --> 00:09:02,110
I need to find it all in the EMA which

195
00:09:02,110 --> 00:09:04,570
is quite nice so that's an example of a

196
00:09:04,570 --> 00:09:07,750
task there some IP tables chain and put

197
00:09:07,750 --> 00:09:09,670
protocol TCP quite similar to what you

198
00:09:09,670 --> 00:09:13,240
type on the command line on Linux um so

199
00:09:13,240 --> 00:09:16,000
to harden all of our systems and using

200
00:09:16,000 --> 00:09:18,100
deff cio the in we create an inventory

201
00:09:18,100 --> 00:09:20,200
file that looks like your bleep servers

202
00:09:20,200 --> 00:09:23,380
Hal 9000 budget our internal budgeting

203
00:09:23,380 --> 00:09:25,720
up in my home automation app I have a

204
00:09:25,720 --> 00:09:30,310
problem as I mentioned and then in a

205
00:09:30,310 --> 00:09:32,350
cites d'amour file we just say harden

206
00:09:32,350 --> 00:09:35,980
all hosts see their hosts all and then

207
00:09:35,980 --> 00:09:37,839
we assign them the roles of OS hardening

208
00:09:37,839 --> 00:09:40,209
an SSH hardening run the command at the

209
00:09:40,209 --> 00:09:42,640
bottom and yeah those servers are all

210
00:09:42,640 --> 00:09:46,120
hardened based on that your based on the

211
00:09:46,120 --> 00:09:49,540
dip cio stuff so that will do the

212
00:09:49,540 --> 00:09:52,589
majority of the baseline oh is happening

213
00:09:52,589 --> 00:09:54,820
obviously this won't harden applications

214
00:09:54,820 --> 00:09:56,620
it has no knowledge of so if you're

215
00:09:56,620 --> 00:10:00,010
running anything that's not standard

216
00:10:00,010 --> 00:10:02,880
then you need to be aware of that and

217
00:10:02,880 --> 00:10:05,830
you'll need to apply basically vendor

218
00:10:05,830 --> 00:10:11,620
hardening guidelines and in some cases

219
00:10:11,620 --> 00:10:13,120
it might harden it to a greater standard

220
00:10:13,120 --> 00:10:14,950
than what you need in terms of the

221
00:10:14,950 --> 00:10:17,140
functionality you require and in some

222
00:10:17,140 --> 00:10:18,790
cases it might not go far enough but

223
00:10:18,790 --> 00:10:20,580
it's a you know nice-ish

224
00:10:20,580 --> 00:10:24,570
one-size-fits-all hardened in solution

225
00:10:24,750 --> 00:10:27,940
so now to do the base why are they kind

226
00:10:27,940 --> 00:10:31,990
of more intermediate types dips in each

227
00:10:31,990 --> 00:10:34,589
host is kind of spinning for itself so

228
00:10:34,589 --> 00:10:38,110
host-based firewall is pretty key so

229
00:10:38,110 --> 00:10:42,130
using using ansible again we install

230
00:10:42,130 --> 00:10:44,170
system type view tables rules which is

231
00:10:44,170 --> 00:10:48,400
just in a boon to package we establish

232
00:10:48,400 --> 00:10:51,100
the basic firewall rules as you would

233
00:10:51,100 --> 00:10:55,510
with configuring IP tables on a regular

234
00:10:55,510 --> 00:10:58,750
Linux box so allow established

235
00:10:58,750 --> 00:11:00,790
connections without SSH from the

236
00:11:00,790 --> 00:11:03,070
management network drop everything else

237
00:11:03,070 --> 00:11:06,130
and then save the rules and again reduce

238
00:11:06,130 --> 00:11:07,720
it so same to mine we applied earlier

239
00:11:07,720 --> 00:11:08,259
and

240
00:11:08,259 --> 00:11:09,999
we've just applied a host-based firewall

241
00:11:09,999 --> 00:11:12,129
across all of our servers so that's

242
00:11:12,129 --> 00:11:14,319
quite simple in terms have been able to

243
00:11:14,319 --> 00:11:16,569
just whenever you add a server you just

244
00:11:16,569 --> 00:11:18,970
pop it into your inventory file rerun

245
00:11:18,970 --> 00:11:21,579
that come on I showed you earlier and

246
00:11:21,579 --> 00:11:23,859
that's baseline Hardin and done across

247
00:11:23,859 --> 00:11:27,009
your infrastructure and you can create

248
00:11:27,009 --> 00:11:29,619
extra roles it'll allow us a yeah we're

249
00:11:29,619 --> 00:11:31,509
prep it to the web servers and that sort

250
00:11:31,509 --> 00:11:34,149
of stuff so that's kind of the baseline

251
00:11:34,149 --> 00:11:36,279
server hardening done

252
00:11:36,279 --> 00:11:38,619
I haven't yet done heads or at

253
00:11:38,619 --> 00:11:40,359
whitelisting heads

254
00:11:40,359 --> 00:11:41,829
sorry host-based intrusion detection

255
00:11:41,829 --> 00:11:43,779
wouldn't be terribly difficult with the

256
00:11:43,779 --> 00:11:46,299
aid package application whitelisting is

257
00:11:46,299 --> 00:11:50,979
a bit painful so now let's talk about

258
00:11:50,979 --> 00:11:55,389
the web stuff so how many developers do

259
00:11:55,389 --> 00:12:01,379
we have in the audience quite a few so

260
00:12:01,379 --> 00:12:03,489
obviously you know when you're

261
00:12:03,489 --> 00:12:05,589
developing things and as I do I'm

262
00:12:05,589 --> 00:12:07,089
writing custom apps that I deploy

263
00:12:07,089 --> 00:12:09,429
internally things are constantly

264
00:12:09,429 --> 00:12:10,660
changing so we need to be able to

265
00:12:10,660 --> 00:12:13,899
prevent these from attacks as well to do

266
00:12:13,899 --> 00:12:16,059
this kind of got three-pronged approach

267
00:12:16,059 --> 00:12:19,199
to it first is just being aware of

268
00:12:19,199 --> 00:12:21,100
security vulnerabilities when writing

269
00:12:21,100 --> 00:12:23,769
code and creating security tests second

270
00:12:23,769 --> 00:12:26,289
is don't static analysis as part of the

271
00:12:26,289 --> 00:12:29,109
build process and third is automated

272
00:12:29,109 --> 00:12:32,709
intestine so the first thing is probably

273
00:12:32,709 --> 00:12:35,649
just choosing a stable knowing you know

274
00:12:35,649 --> 00:12:37,179
good framework that has built-in

275
00:12:37,179 --> 00:12:39,489
security controls that have you know

276
00:12:39,489 --> 00:12:42,489
that armature and then also knowing what

277
00:12:42,489 --> 00:12:44,079
sort of security patterns to apply in

278
00:12:44,079 --> 00:12:47,309
your code when you're developing that

279
00:12:47,669 --> 00:12:51,339
second obviously the OWASP top 10 as a

280
00:12:51,339 --> 00:12:55,049
pen tester I'd kind of hope I know that

281
00:12:55,139 --> 00:12:58,119
yeah and I also come from a Rails

282
00:12:58,119 --> 00:12:59,889
background so the code examples I'll be

283
00:12:59,889 --> 00:13:02,999
giving iron rails but you know you'll

284
00:13:02,999 --> 00:13:05,439
there'll be um somewhat code that you

285
00:13:05,439 --> 00:13:07,329
can apply in whatever frameworks using

286
00:13:07,329 --> 00:13:08,979
so the first thing is to test the

287
00:13:08,979 --> 00:13:10,539
security controls as part of just

288
00:13:10,539 --> 00:13:13,659
standard integration unit tests so you

289
00:13:13,659 --> 00:13:16,539
can see here one of my tests say is for

290
00:13:16,539 --> 00:13:19,119
showing the user profile for an internal

291
00:13:19,119 --> 00:13:22,290
app if you logged in as a single user it

292
00:13:22,290 --> 00:13:25,440
chicks that you know you you're returned

293
00:13:25,440 --> 00:13:27,449
your own user profile that tries to

294
00:13:27,449 --> 00:13:30,449
login as a organization user from a

295
00:13:30,449 --> 00:13:32,370
different organization asserts that

296
00:13:32,370 --> 00:13:33,990
you'll return to your dashboard rather

297
00:13:33,990 --> 00:13:36,259
than we and shown the user profile and

298
00:13:36,259 --> 00:13:39,300
then you'd log in as an admin try to get

299
00:13:39,300 --> 00:13:41,399
that same user account and again verify

300
00:13:41,399 --> 00:13:42,870
that the admins can see everybody's user

301
00:13:42,870 --> 00:13:47,040
profiles so you know as I'm developing

302
00:13:47,040 --> 00:13:49,490
functionality I make sure that I am

303
00:13:49,490 --> 00:13:51,810
writing these sorts of unit tests in

304
00:13:51,810 --> 00:13:54,870
quit or integration tests and making

305
00:13:54,870 --> 00:13:57,149
sure I'm quite aware of what sort of

306
00:13:57,149 --> 00:13:58,920
security controls I'm intending to apply

307
00:13:58,920 --> 00:14:02,100
and making sure I test those

308
00:14:02,100 --> 00:14:05,610
similarly I've written an internal bug

309
00:14:05,610 --> 00:14:08,790
tracker I have a problem so this is

310
00:14:08,790 --> 00:14:11,959
testing if other users can delete

311
00:14:11,959 --> 00:14:14,880
feature requests versus admins and again

312
00:14:14,880 --> 00:14:16,920
just asserting that a regular user can't

313
00:14:16,920 --> 00:14:20,779
delete feature requests but an admin can

314
00:14:20,779 --> 00:14:23,519
so that's that kind of covered off and

315
00:14:23,519 --> 00:14:25,230
that's your obviously quite a lot of

316
00:14:25,230 --> 00:14:27,600
effort ongoing but it's you know part of

317
00:14:27,600 --> 00:14:30,269
the development process next up static

318
00:14:30,269 --> 00:14:34,019
analysis so it's quite real specific but

319
00:14:34,019 --> 00:14:36,079
there's a great tool called brakeman

320
00:14:36,079 --> 00:14:38,519
basically just run it in your code base

321
00:14:38,519 --> 00:14:41,760
and it will spit out any potential

322
00:14:41,760 --> 00:14:43,620
security vulnerabilities it finds it's

323
00:14:43,620 --> 00:14:44,930
very easy

324
00:14:44,930 --> 00:14:50,760
it basically returns either 1 or 0 as

325
00:14:50,760 --> 00:14:52,560
its return code so you can integrate it

326
00:14:52,560 --> 00:14:54,120
nicely with continuous integration

327
00:14:54,120 --> 00:14:56,639
continuous integration for anyone who

328
00:14:56,639 --> 00:14:59,370
doesn't know it is basically whenever

329
00:14:59,370 --> 00:15:02,040
you push code you've got infrastructure

330
00:15:02,040 --> 00:15:04,139
that will run specific commands on that

331
00:15:04,139 --> 00:15:06,449
which might deploy it it'll run your

332
00:15:06,449 --> 00:15:08,639
tests email developers of here anything

333
00:15:08,639 --> 00:15:11,339
goes wrong and so I'm personally using

334
00:15:11,339 --> 00:15:15,300
github CI and in the rails world to

335
00:15:15,300 --> 00:15:19,740
integrate brakeman with that in the gem

336
00:15:19,740 --> 00:15:22,439
file I just say Jim brakeman and that

337
00:15:22,439 --> 00:15:24,449
will that's basically the rails

338
00:15:24,449 --> 00:15:27,750
dependencies file and so that'll

339
00:15:27,750 --> 00:15:29,370
basically bring it on as a dependency

340
00:15:29,370 --> 00:15:30,300
whenever it's trying to build the

341
00:15:30,300 --> 00:15:33,540
project and then within the lab CIO

342
00:15:33,540 --> 00:15:35,160
which is basically just the what do I

343
00:15:35,160 --> 00:15:36,120
run on each time

344
00:15:36,120 --> 00:15:40,040
I push code to the repository it will

345
00:15:40,040 --> 00:15:42,630
execute those two bottom lines the first

346
00:15:42,630 --> 00:15:44,670
one is running the integration tests

347
00:15:44,670 --> 00:15:46,170
which will do the one the custom code

348
00:15:46,170 --> 00:15:49,380
that I've written for testing security

349
00:15:49,380 --> 00:15:51,630
controls and the second one runs

350
00:15:51,630 --> 00:15:55,310
brakeman and then if I accidentally

351
00:15:55,310 --> 00:15:58,080
create a security vulnerability the

352
00:15:58,080 --> 00:16:01,950
build will fail and I'll get details

353
00:16:01,950 --> 00:16:04,620
logs on why and what went wrong and

354
00:16:04,620 --> 00:16:07,200
exactly where I can go to fix it so that

355
00:16:07,200 --> 00:16:10,380
static analysis basically with one line

356
00:16:10,380 --> 00:16:14,100
of code config change in my CI file so

357
00:16:14,100 --> 00:16:18,000
that's really handy automated ping

358
00:16:18,000 --> 00:16:20,970
testing so for that I'm using Z detect

359
00:16:20,970 --> 00:16:26,360
prop C so I take my lab CI from the

360
00:16:26,360 --> 00:16:29,010
basic one that I had earlier I put

361
00:16:29,010 --> 00:16:33,720
multiple stages on the build I deploy it

362
00:16:33,720 --> 00:16:37,830
to a staging server using Capistrano

363
00:16:37,830 --> 00:16:39,720
which is a Ruby on Rails tool for

364
00:16:39,720 --> 00:16:43,980
deploying builds then basically a wasp's

365
00:16:43,980 --> 00:16:47,010
apply a zip to docker docker image so I

366
00:16:47,010 --> 00:16:50,160
load that with the image syntax and get

367
00:16:50,160 --> 00:16:52,680
lab and then I literally just run a

368
00:16:52,680 --> 00:16:55,350
single command in there passing it the

369
00:16:55,350 --> 00:16:57,330
URL of the staging environment that I've

370
00:16:57,330 --> 00:16:59,550
just deployed to and that'll run our

371
00:16:59,550 --> 00:17:02,820
whole battery of relatively basic tests

372
00:17:02,820 --> 00:17:04,740
against the site very it'll basically

373
00:17:04,740 --> 00:17:08,369
spider it and passively scan it so it

374
00:17:08,369 --> 00:17:10,920
won't try to actively exploit it but

375
00:17:10,920 --> 00:17:13,439
it'll again fail the build and you can

376
00:17:13,439 --> 00:17:16,199
see it's doing the stage multiple stages

377
00:17:16,199 --> 00:17:19,709
there so if there are security issues

378
00:17:19,709 --> 00:17:22,099
again it'll fail the build so that's

379
00:17:22,099 --> 00:17:25,709
actually pretty simple to integrate that

380
00:17:25,709 --> 00:17:31,620
with with basic build process in this

381
00:17:31,620 --> 00:17:34,710
case it's failed it because I had an

382
00:17:34,710 --> 00:17:37,230
error disclosure and the password reset

383
00:17:37,230 --> 00:17:39,570
functionality and I didn't have some

384
00:17:39,570 --> 00:17:42,720
security hit asset so relatively minor

385
00:17:42,720 --> 00:17:50,160
stuff but you know useful to know yeah

386
00:17:50,160 --> 00:17:52,800
so now obviously that's not going to do

387
00:17:52,800 --> 00:17:56,100
the kind of more aggressive stuff you

388
00:17:56,100 --> 00:17:58,020
probably wouldn't want it to without

389
00:17:58,020 --> 00:17:59,400
some thought at least because you don't

390
00:17:59,400 --> 00:18:01,590
want that to just start pushing stuff

391
00:18:01,590 --> 00:18:03,720
randomly into your staging environment

392
00:18:03,720 --> 00:18:05,520
and for you to know you know know what

393
00:18:05,520 --> 00:18:07,920
it's actually going to do if it's going

394
00:18:07,920 --> 00:18:11,430
to delete data and things so zet has an

395
00:18:11,430 --> 00:18:18,270
API which again is just in that zaptor

396
00:18:18,270 --> 00:18:22,910
docker docker image and in this case I'm

397
00:18:22,910 --> 00:18:25,590
more step-by-step driving it exactly

398
00:18:25,590 --> 00:18:27,740
what to do so I'm saying open this URL

399
00:18:27,740 --> 00:18:30,330
spider the site active scan it and tell

400
00:18:30,330 --> 00:18:33,570
me the alerts and so again you can see

401
00:18:33,570 --> 00:18:35,490
that that's actually doing significantly

402
00:18:35,490 --> 00:18:37,830
more stuff here so it's doing cross-site

403
00:18:37,830 --> 00:18:39,750
scripting checks it's doing escrow

404
00:18:39,750 --> 00:18:42,450
injection that sort of stuff and this is

405
00:18:42,450 --> 00:18:44,010
very very configurable you can tell it

406
00:18:44,010 --> 00:18:47,070
to have session States you can tell it

407
00:18:47,070 --> 00:18:49,350
how to authenticate to the app you can

408
00:18:49,350 --> 00:18:50,820
go into a lot of detail in terms of what

409
00:18:50,820 --> 00:18:54,870
you want it to do again still load not

410
00:18:54,870 --> 00:18:56,400
not that difficult on the scale of

411
00:18:56,400 --> 00:18:58,850
things to have that all just push down

412
00:18:58,850 --> 00:19:01,770
through your continuous integration to

413
00:19:01,770 --> 00:19:04,040
have at least some automated pin testing

414
00:19:04,040 --> 00:19:06,360
as part of the build process that'll

415
00:19:06,360 --> 00:19:08,190
hopefully at least catch the low-hanging

416
00:19:08,190 --> 00:19:12,240
fruit so yeah that's that's kind of the

417
00:19:12,240 --> 00:19:14,160
web stuff done you can kind of sit back

418
00:19:14,160 --> 00:19:16,710
and admire what you've achieved or maybe

419
00:19:16,710 --> 00:19:18,300
he's just trying to scratch his head

420
00:19:18,300 --> 00:19:20,250
figuring out why that CSS isn't working

421
00:19:20,250 --> 00:19:23,300
in one particular browser in particular

422
00:19:23,300 --> 00:19:25,860
so overall controls that we can apply to

423
00:19:25,860 --> 00:19:30,480
the environment so first up monitoring

424
00:19:30,480 --> 00:19:36,180
and logging absolutely key number of

425
00:19:36,180 --> 00:19:38,520
clients that we work with even mid to

426
00:19:38,520 --> 00:19:40,380
large-sized ones that just don't have

427
00:19:40,380 --> 00:19:42,140
centralized logging and monitoring is

428
00:19:42,140 --> 00:19:45,600
quite crazy and you know if you don't

429
00:19:45,600 --> 00:19:46,980
have that visibility across your

430
00:19:46,980 --> 00:19:48,210
infrastructure then how do you know

431
00:19:48,210 --> 00:19:50,190
what's even going on

432
00:19:50,190 --> 00:19:53,310
so I've stood up the elastic stack you

433
00:19:53,310 --> 00:19:56,250
could use the tools discussed earlier to

434
00:19:56,250 --> 00:19:58,500
stand it all up I put it all on my home

435
00:19:58,500 --> 00:20:03,270
box or sorry on a beam myself I lovingly

436
00:20:03,270 --> 00:20:04,350
call it excuse

437
00:20:04,350 --> 00:20:07,830
of obvious reasons and basically this

438
00:20:07,830 --> 00:20:10,440
works by having elasticsearch which is a

439
00:20:10,440 --> 00:20:14,160
database server it has logs - out front

440
00:20:14,160 --> 00:20:17,580
which basically understands a whole

441
00:20:17,580 --> 00:20:22,440
bunch of login formats so syslog it can

442
00:20:22,440 --> 00:20:25,080
pull data from Twitter and all sorts of

443
00:20:25,080 --> 00:20:28,650
stuff the native format is what are

444
00:20:28,650 --> 00:20:31,410
known as beats so you can have file

445
00:20:31,410 --> 00:20:33,210
beats which will pulled out her and from

446
00:20:33,210 --> 00:20:37,130
files on the file system you can have

447
00:20:37,130 --> 00:20:40,140
when event log beats which will pull

448
00:20:40,140 --> 00:20:41,549
data from Windows Event log so you can

449
00:20:41,549 --> 00:20:43,590
have packet beats which will parse out

450
00:20:43,590 --> 00:20:45,450
packages it's very packet sister

451
00:20:45,450 --> 00:20:47,730
traverse the network whole bunch stuff

452
00:20:47,730 --> 00:20:50,240
both for security monitoring and

453
00:20:50,240 --> 00:20:55,799
performance so on the Linux Windows

454
00:20:55,799 --> 00:20:57,450
servers we have those on the

455
00:20:57,450 --> 00:20:59,580
infrastructure side at understand syslog

456
00:20:59,580 --> 00:21:01,799
natively so push all the infrastructure

457
00:21:01,799 --> 00:21:04,980
events to syslog over syslog and then we

458
00:21:04,980 --> 00:21:05,580
have Cabana

459
00:21:05,580 --> 00:21:12,330
which was demoed earlier dashboards so

460
00:21:12,330 --> 00:21:15,780
to push this out to all of our servers

461
00:21:15,780 --> 00:21:19,080
across the infrastructure again using

462
00:21:19,080 --> 00:21:22,890
interval we simply basically install the

463
00:21:22,890 --> 00:21:26,880
elasticsearch repository then we install

464
00:21:26,880 --> 00:21:29,640
file beach which is the native logon

465
00:21:29,640 --> 00:21:34,710
format for the files and then we

466
00:21:34,710 --> 00:21:36,299
configure it basically by copying a

467
00:21:36,299 --> 00:21:39,990
certificate to the system so that says

468
00:21:39,990 --> 00:21:41,370
that we've got pull authentication so

469
00:21:41,370 --> 00:21:43,500
that it knows that it's actually talking

470
00:21:43,500 --> 00:21:45,480
to the real logging server we copy the

471
00:21:45,480 --> 00:21:46,860
conflict file across and restart the

472
00:21:46,860 --> 00:21:48,870
service and the config file looks like

473
00:21:48,870 --> 00:21:52,710
that we're basically telling it to that

474
00:21:52,710 --> 00:21:55,230
we're taking long says input in this

475
00:21:55,230 --> 00:21:58,230
case we're just taking the ortholog and

476
00:21:58,230 --> 00:22:01,049
syslog there's other code here that'll

477
00:22:01,049 --> 00:22:02,549
basically determine if it's a web server

478
00:22:02,549 --> 00:22:04,830
it will pull an engineer's if it's rails

479
00:22:04,830 --> 00:22:07,350
it'll pull on the rails specific log

480
00:22:07,350 --> 00:22:10,080
files if it's running my skeletal

481
00:22:10,080 --> 00:22:12,000
pulling the MySQL log files those sorts

482
00:22:12,000 --> 00:22:13,590
of things and then we're telling it just

483
00:22:13,590 --> 00:22:16,820
to send it straight to xkeyscore

484
00:22:16,820 --> 00:22:19,850
with that particular certificate and

485
00:22:19,850 --> 00:22:22,750
then again we just rerun the ansible

486
00:22:22,750 --> 00:22:25,130
it's a deployment and that all push

487
00:22:25,130 --> 00:22:26,990
logging and monitoring across to all of

488
00:22:26,990 --> 00:22:28,330
the servers throughout the environment

489
00:22:28,330 --> 00:22:31,040
and then we can basically start to drill

490
00:22:31,040 --> 00:22:34,400
down into the data it cabaña gives us

491
00:22:34,400 --> 00:22:36,970
really nice dashboards and searching

492
00:22:36,970 --> 00:22:42,380
ability um in this case you know this

493
00:22:42,380 --> 00:22:44,630
for example might be a indicator of a

494
00:22:44,630 --> 00:22:45,980
compromise or somebody's trying to

495
00:22:45,980 --> 00:22:47,210
attack the server because we've had a

496
00:22:47,210 --> 00:22:48,770
huge spike in traffic at that particular

497
00:22:48,770 --> 00:22:50,930
point and so you know it would be

498
00:22:50,930 --> 00:22:53,510
something to kind of look into and there

499
00:22:53,510 --> 00:22:55,640
the figure out you can also see that

500
00:22:55,640 --> 00:22:57,050
here we've got the duration of the

501
00:22:57,050 --> 00:22:58,670
request so not only am i using the

502
00:22:58,670 --> 00:23:01,300
security monitoring but also performance

503
00:23:01,300 --> 00:23:04,250
monitoring as well and so that's really

504
00:23:04,250 --> 00:23:06,560
useful and it's also got your rails

505
00:23:06,560 --> 00:23:09,920
smarts and then so yeah we can also do

506
00:23:09,920 --> 00:23:13,060
the call battle maps so these are the

507
00:23:13,060 --> 00:23:15,140
packets that the firewalls been dropping

508
00:23:15,140 --> 00:23:17,330
I'm not saying that it's China or Russia

509
00:23:17,330 --> 00:23:20,240
but it's mostly them a little bit of

510
00:23:20,240 --> 00:23:20,990
Germany

511
00:23:20,990 --> 00:23:26,180
oddly enough yeah so really nice really

512
00:23:26,180 --> 00:23:27,590
fun to play with you get a lot of data

513
00:23:27,590 --> 00:23:32,630
throughout your environment and yeah so

514
00:23:32,630 --> 00:23:38,590
next up after that is the alerting so

515
00:23:38,590 --> 00:23:41,870
I'm using the West alert which is also

516
00:23:41,870 --> 00:23:44,360
similar to well your plugs into the

517
00:23:44,360 --> 00:23:48,500
elasticsearch environment so in this

518
00:23:48,500 --> 00:23:50,570
case again the file formats very similar

519
00:23:50,570 --> 00:23:54,380
we tell it to use a specific search

520
00:23:54,380 --> 00:23:56,870
index if there's more than in this case

521
00:23:56,870 --> 00:23:59,300
three login events SSH login events

522
00:23:59,300 --> 00:24:01,040
across the entire environment in less

523
00:24:01,040 --> 00:24:03,860
than 10 minutes then it's going to send

524
00:24:03,860 --> 00:24:06,560
me an email and we just do that with

525
00:24:06,560 --> 00:24:09,910
that query string saying if it's SSH and

526
00:24:09,910 --> 00:24:12,590
starting a session then send me an email

527
00:24:12,590 --> 00:24:16,430
and in this particular case yes I do get

528
00:24:16,430 --> 00:24:18,980
emails if I'm kind of maintaining the

529
00:24:18,980 --> 00:24:21,680
systems but as I said I don't have a lot

530
00:24:21,680 --> 00:24:23,150
of time I'm not doing this every day so

531
00:24:23,150 --> 00:24:25,400
it's quite manageable and for the sake

532
00:24:25,400 --> 00:24:26,870
of getting an email if somebody else

533
00:24:26,870 --> 00:24:29,830
does it I'm quite okay to have that

534
00:24:29,830 --> 00:24:33,909
convenience things that you might want

535
00:24:33,909 --> 00:24:35,710
to consider if you are sitting this sort

536
00:24:35,710 --> 00:24:37,090
of thing up yourself would be alerts on

537
00:24:37,090 --> 00:24:39,460
a spike in web traffic which would

538
00:24:39,460 --> 00:24:40,809
indicate that somebody's trying to

539
00:24:40,809 --> 00:24:44,739
spider or fuzzy systems increase in

540
00:24:44,739 --> 00:24:48,970
error rates both from a user experience

541
00:24:48,970 --> 00:24:50,350
point of view you probably want to know

542
00:24:50,350 --> 00:24:52,480
if your user rates of our sorry there

543
00:24:52,480 --> 00:24:54,129
are rates have spiked right up but also

544
00:24:54,129 --> 00:24:55,539
it can be a sign that somebody's

545
00:24:55,539 --> 00:24:56,860
attempted to compromise you and thus

546
00:24:56,860 --> 00:24:59,919
triggering errors as they're running

547
00:24:59,919 --> 00:25:04,749
exploits or doesn't so yeah that'll just

548
00:25:04,749 --> 00:25:06,669
send an email that basically say is X

549
00:25:06,669 --> 00:25:09,989
number of events occurred at this time

550
00:25:09,989 --> 00:25:14,139
yeah that's that's pretty cool updates

551
00:25:14,139 --> 00:25:16,269
so one of the key things that we

552
00:25:16,269 --> 00:25:20,590
frequently see is people getting

553
00:25:20,590 --> 00:25:22,509
compromised because they haven't got

554
00:25:22,509 --> 00:25:25,590
updating right across an environment

555
00:25:25,590 --> 00:25:27,940
yeah number of people who haven't

556
00:25:27,940 --> 00:25:29,889
patched eternal blue across their

557
00:25:29,889 --> 00:25:32,379
environment and we're getting domain

558
00:25:32,379 --> 00:25:38,649
admin is quite shocking so in a Linux

559
00:25:38,649 --> 00:25:41,649
environment this is what I've done so

560
00:25:41,649 --> 00:25:45,070
again using interval just installing the

561
00:25:45,070 --> 00:25:48,909
unattended upgrades package checking for

562
00:25:48,909 --> 00:25:51,669
updates daily from these repositories

563
00:25:51,669 --> 00:25:54,190
and automatically reading rebooting the

564
00:25:54,190 --> 00:25:56,320
box at 2:00 a.m. if it needs it so if

565
00:25:56,320 --> 00:25:58,989
there's a kernel operate or something if

566
00:25:58,989 --> 00:26:00,690
you're anything more than a small

567
00:26:00,690 --> 00:26:02,679
business you probably want to look at

568
00:26:02,679 --> 00:26:08,379
something a little bit more robust to

569
00:26:08,379 --> 00:26:09,909
manage your updates and make sure that

570
00:26:09,909 --> 00:26:11,350
you're getting them across every single

571
00:26:11,350 --> 00:26:14,919
system that you own also because this is

572
00:26:14,919 --> 00:26:16,330
rebooting boxes and just finally

573
00:26:16,330 --> 00:26:18,519
applying upgrades it will break stuff so

574
00:26:18,519 --> 00:26:19,989
you probably want something that can

575
00:26:19,989 --> 00:26:21,909
help manage that if you're doing

576
00:26:21,909 --> 00:26:25,749
anything other than just plain but it

577
00:26:25,749 --> 00:26:28,029
will stop you from at least having

578
00:26:28,029 --> 00:26:31,149
vulnerable boxes so that's automatic

579
00:26:31,149 --> 00:26:34,149
updates next up to a factor

580
00:26:34,149 --> 00:26:36,850
authentication I'm a really big fan of

581
00:26:36,850 --> 00:26:38,619
the ubii keys they're just super simple

582
00:26:38,619 --> 00:26:40,749
just plug them in whenever you're

583
00:26:40,749 --> 00:26:44,250
prompted push the button and that's it

584
00:26:44,250 --> 00:26:47,080
so for some of the internal applications

585
00:26:47,080 --> 00:26:49,660
like my password manager internal jet

586
00:26:49,660 --> 00:26:51,370
lab is just a checkbox in the admin

587
00:26:51,370 --> 00:26:54,820
panel turn that on and it basically

588
00:26:54,820 --> 00:26:56,799
enforces UV key for two-factor

589
00:26:56,799 --> 00:26:57,520
authentication

590
00:26:57,520 --> 00:27:01,210
you can put SSH keys on them and enforce

591
00:27:01,210 --> 00:27:05,020
that probably more through policy than

592
00:27:05,020 --> 00:27:07,720
anything else I don't know if there's

593
00:27:07,720 --> 00:27:09,010
any way I have technically verifying

594
00:27:09,010 --> 00:27:11,920
that people are using them and for

595
00:27:11,920 --> 00:27:13,750
external services which I rely on such

596
00:27:13,750 --> 00:27:15,370
as email github etcetera

597
00:27:15,370 --> 00:27:18,940
again it's just a checkbox so yeah

598
00:27:18,940 --> 00:27:22,990
basically super simple to if a if you

599
00:27:22,990 --> 00:27:27,460
can switch it on do so so yeah those are

600
00:27:27,460 --> 00:27:30,460
the basic controls it all again give you

601
00:27:30,460 --> 00:27:35,820
mice hardening it's not too much of it

602
00:27:36,750 --> 00:27:38,950
yeah these are obviously not all of the

603
00:27:38,950 --> 00:27:40,179
controls that we could be applying

604
00:27:40,179 --> 00:27:41,710
across an environment but they're quick

605
00:27:41,710 --> 00:27:46,240
ones for the sort of scale and we're

606
00:27:46,240 --> 00:27:49,179
done or not quite we've got to try and

607
00:27:49,179 --> 00:27:50,950
double-check if we're keeping the

608
00:27:50,950 --> 00:27:54,309
baddies out so I'm always wary of doing

609
00:27:54,309 --> 00:27:58,030
my own pen testing but I did it anyway

610
00:27:58,030 --> 00:27:59,470
as well as got some friends and

611
00:27:59,470 --> 00:28:02,559
colleagues to have a have a go and see

612
00:28:02,559 --> 00:28:06,280
what they could find main phone so there

613
00:28:06,280 --> 00:28:07,870
are two main things that came out of

614
00:28:07,870 --> 00:28:11,320
that one was the core router was

615
00:28:11,320 --> 00:28:13,590
misconfigured and doing some silly stuff

616
00:28:13,590 --> 00:28:16,270
not necessarily a major security impact

617
00:28:16,270 --> 00:28:18,850
but was yeah misconfigured nonetheless

618
00:28:18,850 --> 00:28:22,380
and causing some weird behaviors

619
00:28:22,380 --> 00:28:25,720
secondly though the there were some

620
00:28:25,720 --> 00:28:27,880
access control issues on one of the web

621
00:28:27,880 --> 00:28:30,100
apps that I'd written that those

622
00:28:30,100 --> 00:28:32,710
automated tests weren't picking up and

623
00:28:32,710 --> 00:28:33,760
it turned out it was a really bizarre

624
00:28:33,760 --> 00:28:36,400
Rails behavior where it was

625
00:28:36,400 --> 00:28:40,840
automatically generating basically a

626
00:28:40,840 --> 00:28:44,530
method to populate a form that wasn't

627
00:28:44,530 --> 00:28:49,720
actually there yeah it was crazy but

628
00:28:49,720 --> 00:28:50,710
yeah I wouldn't have picked that up

629
00:28:50,710 --> 00:28:52,179
through these automated techniques it

630
00:28:52,179 --> 00:28:54,570
was only because I had somebody that was

631
00:28:54,570 --> 00:28:56,860
actively testing it

632
00:28:56,860 --> 00:29:01,870
and kind of laughter so yeah future

633
00:29:01,870 --> 00:29:04,330
plans in this particular environment

634
00:29:04,330 --> 00:29:06,520
host-based intrusion detection system

635
00:29:06,520 --> 00:29:08,980
which can not be terribly challenging to

636
00:29:08,980 --> 00:29:10,750
implement so using something like aid

637
00:29:10,750 --> 00:29:12,460
again I can just use ansible to push it

638
00:29:12,460 --> 00:29:16,420
out to all of the systems tell it you

639
00:29:16,420 --> 00:29:18,670
know hey watch for all these files if

640
00:29:18,670 --> 00:29:20,470
there are any changes to critical system

641
00:29:20,470 --> 00:29:23,860
convict then send me an email or yeah

642
00:29:23,860 --> 00:29:25,720
basically tell push it through to the

643
00:29:25,720 --> 00:29:27,910
centralized monitoring and put alerts on

644
00:29:27,910 --> 00:29:30,340
that that way if an attacker does get on

645
00:29:30,340 --> 00:29:32,620
to one of the systems then and changes

646
00:29:32,620 --> 00:29:35,700
key conflict files all know about

647
00:29:35,700 --> 00:29:37,210
application whitelisting

648
00:29:37,210 --> 00:29:38,500
I suspect this is a little can be a

649
00:29:38,500 --> 00:29:39,640
little bit challenging in the linux

650
00:29:39,640 --> 00:29:41,410
environment but it would be something

651
00:29:41,410 --> 00:29:47,020
nice to look into so the admin laptop is

652
00:29:47,020 --> 00:29:51,220
probably my key threat from here so this

653
00:29:51,220 --> 00:29:54,429
would basically probably you know I use

654
00:29:54,429 --> 00:29:55,929
it for my day-to-day web browsing as

655
00:29:55,929 --> 00:29:58,929
well as admitting the networked if I

656
00:29:58,929 --> 00:30:00,190
wanted to take this further I'd probably

657
00:30:00,190 --> 00:30:02,710
set up a dedicated laptop something just

658
00:30:02,710 --> 00:30:05,410
minimal with SSH ideally with verified

659
00:30:05,410 --> 00:30:06,669
boot but there might be getting a little

660
00:30:06,669 --> 00:30:11,130
bit paranoid for a whole new work and

661
00:30:11,130 --> 00:30:13,540
physical access to the kit so making

662
00:30:13,540 --> 00:30:17,020
sure that probably putting cameras on

663
00:30:17,020 --> 00:30:19,750
the kit again probably a little bit

664
00:30:19,750 --> 00:30:22,230
paranoid for

665
00:30:22,830 --> 00:30:25,710
won't what this won't do ongoing

666
00:30:25,710 --> 00:30:28,019
monitoring maintenance tweaks for your

667
00:30:28,019 --> 00:30:29,159
environment so you're probably still

668
00:30:29,159 --> 00:30:30,779
going to want to make sure that your

669
00:30:30,779 --> 00:30:33,090
alerts are appropriate make sure you're

670
00:30:33,090 --> 00:30:35,519
keeping an eye on those logs sitting

671
00:30:35,519 --> 00:30:37,320
aside a an hour a week for that sort of

672
00:30:37,320 --> 00:30:38,609
activity just to make sure that you're

673
00:30:38,609 --> 00:30:42,029
doing it right some of those hardening

674
00:30:42,029 --> 00:30:46,349
scripts may be a little bit too strict

675
00:30:46,349 --> 00:30:47,580
or they might not be strict enough for

676
00:30:47,580 --> 00:30:51,210
your own environment so you need to

677
00:30:51,210 --> 00:30:53,009
tweak those and make sure that it's not

678
00:30:53,009 --> 00:30:56,369
breaking functionality etc and regular

679
00:30:56,369 --> 00:30:58,289
maintenance that it's actually working

680
00:30:58,289 --> 00:31:01,979
so as I mentioned by having colleagues

681
00:31:01,979 --> 00:31:07,049
have a have a look at it you know I did

682
00:31:07,049 --> 00:31:08,609
find a couple of things as well as done

683
00:31:08,609 --> 00:31:12,690
my own internal testing but yeah I tend

684
00:31:12,690 --> 00:31:13,769
to find if I'm doing my own internal

685
00:31:13,769 --> 00:31:17,219
testing the 19 to think about what set

686
00:31:17,219 --> 00:31:18,599
of controls might mitigate rather than

687
00:31:18,599 --> 00:31:21,929
just testing things which is not a good

688
00:31:21,929 --> 00:31:23,309
place to be to actually get good

689
00:31:23,309 --> 00:31:24,629
coverage across everything and make sure

690
00:31:24,629 --> 00:31:28,379
it's properly secure so yeah that's kind

691
00:31:28,379 --> 00:31:33,269
of it we're hiring so if anyone's

692
00:31:33,269 --> 00:31:34,950
interested and trying to break stuff

693
00:31:34,950 --> 00:31:37,580
then come check with me or anyone else

694
00:31:37,580 --> 00:31:44,299
and well under time

695
00:32:06,269 --> 00:32:08,299
I

696
00:32:27,870 --> 00:32:37,309
a lot of software users with there's a

697
00:32:37,820 --> 00:32:40,399
yep and so the patient was glad trust

698
00:32:40,399 --> 00:32:43,009
the loopback interface on my rules

699
00:32:43,009 --> 00:32:47,059
no I did call I don't and in some cases

700
00:32:47,059 --> 00:32:48,950
it does break functionality especially

701
00:32:48,950 --> 00:32:50,619
within this lifetime

702
00:32:50,619 --> 00:33:19,299
anything that users so I'm not but I

703
00:33:19,299 --> 00:33:22,669
believe the way it works is somewhere to

704
00:33:22,669 --> 00:33:24,919
open PGP only unique II where yeah the

705
00:33:24,919 --> 00:33:27,710
private keys on there and I believe it

706
00:33:27,710 --> 00:33:31,419
does some operations on there to verify

707
00:33:43,450 --> 00:33:44,749
yeah

708
00:33:44,749 --> 00:33:47,539
so you mentioned you're using zap and

709
00:33:47,539 --> 00:33:50,299
break fan to do a lot of automated

710
00:33:50,299 --> 00:33:52,309
testing on your code how are you

711
00:33:52,309 --> 00:33:54,259
handling false positives so if it breaks

712
00:33:54,259 --> 00:33:56,029
the bill because it's detected something

713
00:33:56,029 --> 00:33:57,409
that's actually a false positive how do

714
00:33:57,409 --> 00:34:00,320
you explicitly say actually this is okay

715
00:34:00,320 --> 00:34:02,330
but keep detecting other problems you

716
00:34:02,330 --> 00:34:08,239
find positives and I'm so grateful and

717
00:34:08,239 --> 00:34:11,149
hasn't it's was it ignore ha where you

718
00:34:11,149 --> 00:34:13,040
basically generate a hash for each

719
00:34:13,040 --> 00:34:14,839
finding and you can call it just in all

720
00:34:14,839 --> 00:34:18,260
these ones if I haven't run into that

721
00:34:18,260 --> 00:34:21,619
yet so I have its world that I would

722
00:34:21,619 --> 00:34:24,940
imagine it will have something so on

723
00:34:33,670 --> 00:34:39,389
[Applause]

