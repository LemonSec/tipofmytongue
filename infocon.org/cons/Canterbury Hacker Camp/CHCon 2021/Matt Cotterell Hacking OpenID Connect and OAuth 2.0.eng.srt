1
00:00:05,680 --> 00:00:07,680
oh what a talk to follow up on well

2
00:00:07,680 --> 00:00:10,639
here's how not to be charismatic um

3
00:00:10,639 --> 00:00:12,320
but what i can bring to you today is a

4
00:00:12,320 --> 00:00:14,320
lot of enthusiasm for this particular

5
00:00:14,320 --> 00:00:15,920
topic i've been really really interested

6
00:00:15,920 --> 00:00:17,039
in um

7
00:00:17,039 --> 00:00:19,439
authorization and authentication um

8
00:00:19,439 --> 00:00:20,800
topics for many years now i've been

9
00:00:20,800 --> 00:00:23,119
digging quite deep into uh

10
00:00:23,119 --> 00:00:25,680
uh how openid connect and oauth2 works

11
00:00:25,680 --> 00:00:28,080
and learned a hell of a lot of things um

12
00:00:28,080 --> 00:00:29,439
previously did a little bit of a talk on

13
00:00:29,439 --> 00:00:31,199
how it all works but today i'm going to

14
00:00:31,199 --> 00:00:33,600
teach you how to hack it um it's a bit

15
00:00:33,600 --> 00:00:35,680
of a smorgasbord of just various things

16
00:00:35,680 --> 00:00:38,480
i've i used when as a pen tester at zx

17
00:00:38,480 --> 00:00:41,040
security i've

18
00:00:41,040 --> 00:00:42,719
brought to the table whenever i've

19
00:00:42,719 --> 00:00:44,399
encountered open id connect and i'm

20
00:00:44,399 --> 00:00:45,760
hoping i might be able to share a few of

21
00:00:45,760 --> 00:00:47,200
those experiences with you and maybe it

22
00:00:47,200 --> 00:00:49,440
might give you some ideas as pen testers

23
00:00:49,440 --> 00:00:50,960
also as defenders as well because i

24
00:00:50,960 --> 00:00:52,640
imagine not everybody here is a pen test

25
00:00:52,640 --> 00:00:53,680
and you're probably wanting to stop

26
00:00:53,680 --> 00:00:56,239
people like me so

27
00:00:56,239 --> 00:00:58,399
yes i said before i'm matt i'm from zx

28
00:00:58,399 --> 00:01:00,399
security i'm a security consultant i do

29
00:01:00,399 --> 00:01:01,600
a lot of ping testing things but i've

30
00:01:01,600 --> 00:01:03,280
come from the blue team um back in the

31
00:01:03,280 --> 00:01:06,000
day i was embedded into the security

32
00:01:06,000 --> 00:01:08,240
team for a few different companies

33
00:01:08,240 --> 00:01:10,960
and um yeah

34
00:01:10,960 --> 00:01:13,280
uh as you might also be able to see here

35
00:01:13,280 --> 00:01:15,119
i have an absolute love of uh cheesy

36
00:01:15,119 --> 00:01:17,040
hacker stock photos so it's gonna trust

37
00:01:17,040 --> 00:01:18,720
me the slide's gonna be full of them so

38
00:01:18,720 --> 00:01:20,720
um hopefully they're gonna be enjoyable

39
00:01:20,720 --> 00:01:24,479
for you as well and if not i apologize

40
00:01:25,759 --> 00:01:27,520
so to keep this talk nice and short

41
00:01:27,520 --> 00:01:28,799
rather than taking out the rest of your

42
00:01:28,799 --> 00:01:30,400
day because trust me this is a huge

43
00:01:30,400 --> 00:01:32,720
topic um getting it into half an hour is

44
00:01:32,720 --> 00:01:34,799
quite quite a lot of fun um we're going

45
00:01:34,799 --> 00:01:36,000
to look into just four different sort of

46
00:01:36,000 --> 00:01:37,520
scenarios the pinterest might find

47
00:01:37,520 --> 00:01:38,880
themselves

48
00:01:38,880 --> 00:01:40,799
in when they're encountering open id

49
00:01:40,799 --> 00:01:42,960
connect and all with two so we're

50
00:01:42,960 --> 00:01:44,960
looking at things when we're exploiting

51
00:01:44,960 --> 00:01:46,880
say a website without any prior

52
00:01:46,880 --> 00:01:49,920
credentials uh looking at exploitation

53
00:01:49,920 --> 00:01:52,079
using an attacker's own account so if

54
00:01:52,079 --> 00:01:54,159
you are able to register on your own

55
00:01:54,159 --> 00:01:56,000
account but maybe not attack somebody

56
00:01:56,000 --> 00:01:58,320
else's we'll look into scenarios where

57
00:01:58,320 --> 00:02:00,240
we managed to steal somebody else's

58
00:02:00,240 --> 00:02:01,920
account and what we can do with open icd

59
00:02:01,920 --> 00:02:04,399
connect in those circumstances and then

60
00:02:04,399 --> 00:02:06,320
lastly what we can do if we manage to

61
00:02:06,320 --> 00:02:08,239
steal some service credentials such as a

62
00:02:08,239 --> 00:02:11,200
client id and secret um what we might be

63
00:02:11,200 --> 00:02:12,879
able to do to go and further attack or

64
00:02:12,879 --> 00:02:14,720
pivot into other into other systems by

65
00:02:14,720 --> 00:02:16,239
exploiting open id connect uh

66
00:02:16,239 --> 00:02:18,480
implementation flaws

67
00:02:18,480 --> 00:02:19,360
so

68
00:02:19,360 --> 00:02:20,959
quick background on openid connect and

69
00:02:20,959 --> 00:02:24,000
oauth 2 because it is a huge sort of um

70
00:02:24,000 --> 00:02:25,520
thing but you've probably encountered it

71
00:02:25,520 --> 00:02:28,160
in the past old 2 was sort of came about

72
00:02:28,160 --> 00:02:29,200
as a

73
00:02:29,200 --> 00:02:31,840
modern authorization framework it was

74
00:02:31,840 --> 00:02:33,040
largely there just to sort of

75
00:02:33,040 --> 00:02:36,000
standardize third-party access to apis

76
00:02:36,000 --> 00:02:37,120
really

77
00:02:37,120 --> 00:02:38,800
wasn't really supposed to be used as a

78
00:02:38,800 --> 00:02:40,160
login system but people kind of

79
00:02:40,160 --> 00:02:41,920
butchered it in order to go and do that

80
00:02:41,920 --> 00:02:42,879
and

81
00:02:42,879 --> 00:02:44,080
it wasn't really what the protocol was

82
00:02:44,080 --> 00:02:47,040
designed for so what happened was openid

83
00:02:47,040 --> 00:02:50,319
connect came about and added basically

84
00:02:50,319 --> 00:02:53,120
became a superset of uh open of oauth2

85
00:02:53,120 --> 00:02:54,640
so it's all two plus some extra stuff

86
00:02:54,640 --> 00:02:55,800
and that brings to the table the

87
00:02:55,800 --> 00:02:58,159
authentication aspect of it so who you

88
00:02:58,159 --> 00:02:59,599
are what sort of

89
00:02:59,599 --> 00:03:02,560
attributes you have as a member of this

90
00:03:02,560 --> 00:03:05,280
particular identity provider

91
00:03:05,280 --> 00:03:06,959
um there's also a bunch of concepts here

92
00:03:06,959 --> 00:03:09,280
we'll quickly go through um if you

93
00:03:09,280 --> 00:03:11,440
uh think of it as you know we've got to

94
00:03:11,440 --> 00:03:14,560
hit here a resource owner or a user

95
00:03:14,560 --> 00:03:15,920
what they typically will want to

96
00:03:15,920 --> 00:03:18,239
interact with is confusingly called a

97
00:03:18,239 --> 00:03:19,519
client

98
00:03:19,519 --> 00:03:21,040
think of it actually as the server this

99
00:03:21,040 --> 00:03:22,159
is the thing that we're trying to

100
00:03:22,159 --> 00:03:24,080
actually log in as such as this

101
00:03:24,080 --> 00:03:25,920
fictitious photo viewer plus dot cod on

102
00:03:25,920 --> 00:03:28,959
nz which brings google photos into it

103
00:03:28,959 --> 00:03:30,879
and helps display them to you and you

104
00:03:30,879 --> 00:03:32,400
can manipulate them or something all of

105
00:03:32,400 --> 00:03:34,080
those along those lines

106
00:03:34,080 --> 00:03:35,760
so the resources that they're bringing

107
00:03:35,760 --> 00:03:37,280
across here

108
00:03:37,280 --> 00:03:40,080
as these photos so the resource owner

109
00:03:40,080 --> 00:03:41,840
owns resources

110
00:03:41,840 --> 00:03:43,920
um and these are usually stored on the

111
00:03:43,920 --> 00:03:46,400
resource server so with me here so far

112
00:03:46,400 --> 00:03:48,080
it's sort of making sense

113
00:03:48,080 --> 00:03:50,000
um and this is typically some sort of

114
00:03:50,000 --> 00:03:51,959
like api so we can imagine um

115
00:03:51,959 --> 00:03:53,760
api.google.com is where you go and get

116
00:03:53,760 --> 00:03:55,519
your photos from something along those

117
00:03:55,519 --> 00:03:57,920
lines and to tie it all up we've now got

118
00:03:57,920 --> 00:04:01,200
our identity server as well which is

119
00:04:01,200 --> 00:04:03,920
say google logins so instead of it being

120
00:04:03,920 --> 00:04:07,280
that sort of browser server sort of um

121
00:04:07,280 --> 00:04:10,239
sort of aspect here we've now got um

122
00:04:10,239 --> 00:04:12,000
three different servers and there's

123
00:04:12,000 --> 00:04:13,760
quite a bit complex dance in order to go

124
00:04:13,760 --> 00:04:16,560
and do a thing where we can get log into

125
00:04:16,560 --> 00:04:19,199
the the client without giving the client

126
00:04:19,199 --> 00:04:21,279
our google password and also giving it

127
00:04:21,279 --> 00:04:24,080
access to our photos

128
00:04:24,080 --> 00:04:25,280
i'm just going to move that all the way

129
00:04:25,280 --> 00:04:26,479
on the side there

130
00:04:26,479 --> 00:04:27,840
um so yeah so how does this sort of

131
00:04:27,840 --> 00:04:29,360
untrusted third party gets access to

132
00:04:29,360 --> 00:04:31,040
this in the first place well first the

133
00:04:31,040 --> 00:04:32,720
client will go to

134
00:04:32,720 --> 00:04:33,759
um

135
00:04:33,759 --> 00:04:34,880
so the resource owner will go to the

136
00:04:34,880 --> 00:04:37,280
client they will see a page like this

137
00:04:37,280 --> 00:04:39,280
which has a sign in with google button

138
00:04:39,280 --> 00:04:40,800
they click the button and what happens

139
00:04:40,800 --> 00:04:43,240
is it actually ends up going off to

140
00:04:43,240 --> 00:04:45,199
account.google.com or something along

141
00:04:45,199 --> 00:04:46,639
those lines

142
00:04:46,639 --> 00:04:47,600
um

143
00:04:47,600 --> 00:04:49,919
google in this case will show a login

144
00:04:49,919 --> 00:04:52,000
page they log in

145
00:04:52,000 --> 00:04:54,000
with their

146
00:04:54,000 --> 00:04:55,280
password

147
00:04:55,280 --> 00:04:58,000
and what we get back the the the login

148
00:04:58,000 --> 00:04:59,919
server will redirect us back with what's

149
00:04:59,919 --> 00:05:02,720
called an authorization code

150
00:05:02,720 --> 00:05:04,400
this authorization code token is a

151
00:05:04,400 --> 00:05:06,320
one-time use token that you know the

152
00:05:06,320 --> 00:05:07,919
user the resource owner can't use but

153
00:05:07,919 --> 00:05:10,160
the client can what happens is they get

154
00:05:10,160 --> 00:05:12,639
redirected back to the client

155
00:05:12,639 --> 00:05:14,880
the client then with its client id and

156
00:05:14,880 --> 00:05:18,080
secret through a back channel will then

157
00:05:18,080 --> 00:05:19,840
use exchange that with the identity

158
00:05:19,840 --> 00:05:22,639
server to get an access token and this

159
00:05:22,639 --> 00:05:25,199
access token is

160
00:05:25,199 --> 00:05:26,960
what we can use to say who this

161
00:05:26,960 --> 00:05:28,720
particular person is we trust this

162
00:05:28,720 --> 00:05:32,639
because it came from um google servers

163
00:05:32,639 --> 00:05:34,960
so the user now sees a page that says

164
00:05:34,960 --> 00:05:36,320
hey call please wait we're just

165
00:05:36,320 --> 00:05:38,560
retrieving your photos from from google

166
00:05:38,560 --> 00:05:40,240
what will happen from there is that

167
00:05:40,240 --> 00:05:43,360
token can also be used to go and

168
00:05:43,360 --> 00:05:44,800
access

169
00:05:44,800 --> 00:05:45,840
the

170
00:05:45,840 --> 00:05:47,199
resource server

171
00:05:47,199 --> 00:05:48,960
using specific permissions that the user

172
00:05:48,960 --> 00:05:50,639
that the user

173
00:05:50,639 --> 00:05:52,720
consented to while logging in

174
00:05:52,720 --> 00:05:55,360
and the photos are then transferred over

175
00:05:55,360 --> 00:05:57,280
to the client so that they can be

176
00:05:57,280 --> 00:05:59,280
displayed i'm cutting through a few

177
00:05:59,280 --> 00:06:00,720
details here but this is just to get you

178
00:06:00,720 --> 00:06:02,479
all up to speed

179
00:06:02,479 --> 00:06:04,319
um there's actually a couple of flows as

180
00:06:04,319 --> 00:06:05,520
well the one that i just demonstrated

181
00:06:05,520 --> 00:06:07,120
here is called the authorization code

182
00:06:07,120 --> 00:06:08,960
flow named after that particular token

183
00:06:08,960 --> 00:06:10,160
there's a couple of others as well we've

184
00:06:10,160 --> 00:06:12,240
got uh device code flow which is what

185
00:06:12,240 --> 00:06:13,520
you use when you're logging into things

186
00:06:13,520 --> 00:06:15,360
like your tvs or your photo

187
00:06:15,360 --> 00:06:16,720
frames or whatever where you don't

188
00:06:16,720 --> 00:06:18,160
necessarily have a browser that you can

189
00:06:18,160 --> 00:06:19,520
actually use to do the login you have to

190
00:06:19,520 --> 00:06:22,000
use some other device so

191
00:06:22,000 --> 00:06:24,000
and the last one as well as client is

192
00:06:24,000 --> 00:06:25,440
the client credentials flow this is when

193
00:06:25,440 --> 00:06:27,440
you don't have any resource on it

194
00:06:27,440 --> 00:06:29,440
whatsoever it's usually just server to

195
00:06:29,440 --> 00:06:30,800
server stuff like the photo viewer plus

196
00:06:30,800 --> 00:06:32,639
doc currently wanting to get its billing

197
00:06:32,639 --> 00:06:34,479
information from google you know it's

198
00:06:34,479 --> 00:06:35,919
just when it's logging in as photo

199
00:06:35,919 --> 00:06:37,520
viewer plus

200
00:06:37,520 --> 00:06:39,919
cool all up speed hopefully

201
00:06:39,919 --> 00:06:41,680
that's the whole protocol in five

202
00:06:41,680 --> 00:06:43,199
minutes um

203
00:06:43,199 --> 00:06:44,880
which definitely has glossed over a lot

204
00:06:44,880 --> 00:06:46,160
of details we'll go into that a little

205
00:06:46,160 --> 00:06:48,400
bit more as we get through this but um

206
00:06:48,400 --> 00:06:50,400
our first uh particular scenario we're

207
00:06:50,400 --> 00:06:52,000
going through here is the exploitation

208
00:06:52,000 --> 00:06:53,680
without credentials so imagine you've

209
00:06:53,680 --> 00:06:56,639
got a website here and you have

210
00:06:56,639 --> 00:06:58,720
no way of logging into it you can see

211
00:06:58,720 --> 00:07:00,240
the front page you can see a login

212
00:07:00,240 --> 00:07:02,080
screen but you know it's open id connect

213
00:07:02,080 --> 00:07:03,120
but you don't actually know how to get

214
00:07:03,120 --> 00:07:05,280
anywhere further

215
00:07:05,280 --> 00:07:07,280
what we can do as an attacker as a pen

216
00:07:07,280 --> 00:07:09,520
tester is we start with a little bit of

217
00:07:09,520 --> 00:07:11,440
reconnaissance there's some really handy

218
00:07:11,440 --> 00:07:14,000
little um features over open id connect

219
00:07:14,000 --> 00:07:16,639
in oauth2 such as the openid connect

220
00:07:16,639 --> 00:07:18,319
metadata url

221
00:07:18,319 --> 00:07:20,080
this is usually found at this particular

222
00:07:20,080 --> 00:07:21,759
location here there'll be a url which

223
00:07:21,759 --> 00:07:23,759
ends with this usually it's just at the

224
00:07:23,759 --> 00:07:25,919
root of your identity server

225
00:07:25,919 --> 00:07:28,639
and if you go to it you'll get a bunch

226
00:07:28,639 --> 00:07:30,319
of json it's just a whole bunch of

227
00:07:30,319 --> 00:07:31,759
information about how this whole thing

228
00:07:31,759 --> 00:07:33,039
set up but there's usually some really

229
00:07:33,039 --> 00:07:34,479
interesting information you can get out

230
00:07:34,479 --> 00:07:36,479
of this such as

231
00:07:36,479 --> 00:07:37,440
the

232
00:07:37,440 --> 00:07:38,400
keys

233
00:07:38,400 --> 00:07:39,840
the public keys that are used to go and

234
00:07:39,840 --> 00:07:42,000
sign things what kinds of keys are being

235
00:07:42,000 --> 00:07:44,720
used so that hs256 there

236
00:07:44,720 --> 00:07:46,080
there's an admin

237
00:07:46,080 --> 00:07:47,680
claim here i wonder what that does that

238
00:07:47,680 --> 00:07:49,120
sounds powerful and then you've got this

239
00:07:49,120 --> 00:07:50,560
refresh token thing down the corner here

240
00:07:50,560 --> 00:07:52,000
as well which we can potentially use to

241
00:07:52,000 --> 00:07:53,759
gain persistence we'll go into that a

242
00:07:53,759 --> 00:07:55,039
little bit later but it's a really good

243
00:07:55,039 --> 00:07:56,800
place to start just gets you a good feel

244
00:07:56,800 --> 00:07:57,520
for

245
00:07:57,520 --> 00:07:59,120
how it's all working

246
00:07:59,120 --> 00:08:01,199
i mentioned that webkey's placed before

247
00:08:01,199 --> 00:08:02,879
it's a really awesome one to look into

248
00:08:02,879 --> 00:08:04,479
as well usually that's a follow-up url

249
00:08:04,479 --> 00:08:06,319
that has a list on a very specific

250
00:08:06,319 --> 00:08:08,879
format of what the public keys look like

251
00:08:08,879 --> 00:08:10,479
i've found in the past that sometimes

252
00:08:10,479 --> 00:08:13,039
people are using 512 but rsa keys to go

253
00:08:13,039 --> 00:08:14,000
and sign

254
00:08:14,000 --> 00:08:15,919
access tokens and all sorts of things

255
00:08:15,919 --> 00:08:17,280
for some of the folks here probably know

256
00:08:17,280 --> 00:08:19,360
that's wee bit too weak these days it's

257
00:08:19,360 --> 00:08:21,199
probably quite crackable so yeah make

258
00:08:21,199 --> 00:08:22,400
sure that those keys are nice good

259
00:08:22,400 --> 00:08:25,120
length and they're generated properly

260
00:08:25,120 --> 00:08:28,639
or as an attacker hopefully they're not

261
00:08:28,720 --> 00:08:30,080
um second thing is have a look at the

262
00:08:30,080 --> 00:08:32,559
login page url parameters we can click

263
00:08:32,559 --> 00:08:34,880
on the sign in with google or whatever

264
00:08:34,880 --> 00:08:36,719
button we can't log in but we might be

265
00:08:36,719 --> 00:08:39,039
able to have a look at see what those uh

266
00:08:39,039 --> 00:08:40,240
what the parameters on that it looks

267
00:08:40,240 --> 00:08:41,839
like so when you click on it you go

268
00:08:41,839 --> 00:08:43,120
directly to a page that looks like this

269
00:08:43,120 --> 00:08:44,480
and this looks like basically a bunch of

270
00:08:44,480 --> 00:08:45,680
gibberish right off the bat but if we

271
00:08:45,680 --> 00:08:47,680
ever look a little bit closer we can see

272
00:08:47,680 --> 00:08:49,839
some interesting stuff like this client

273
00:08:49,839 --> 00:08:51,360
id looks like it's an incrementing

274
00:08:51,360 --> 00:08:52,959
number i wonder what happens if we start

275
00:08:52,959 --> 00:08:54,640
incrementing that further can we iterate

276
00:08:54,640 --> 00:08:56,240
through all of the current um uh the

277
00:08:56,240 --> 00:08:57,519
clients that are supported by this

278
00:08:57,519 --> 00:08:59,360
identity provider

279
00:08:59,360 --> 00:09:01,519
uh these scopes again there's that admin

280
00:09:01,519 --> 00:09:02,959
one what does that do that sounds kind

281
00:09:02,959 --> 00:09:04,560
of powerful before you request it does

282
00:09:04,560 --> 00:09:05,920
something happen

283
00:09:05,920 --> 00:09:08,640
there's the redirect uri here usually

284
00:09:08,640 --> 00:09:11,120
this is an allow list of specific urls

285
00:09:11,120 --> 00:09:13,360
that you're um allowed to redirect the

286
00:09:13,360 --> 00:09:14,560
user back to

287
00:09:14,560 --> 00:09:16,240
what happens if we change this does it

288
00:09:16,240 --> 00:09:17,920
suddenly error out like

289
00:09:17,920 --> 00:09:19,600
does it appear that there is a safe list

290
00:09:19,600 --> 00:09:21,680
or are they just allowing anything

291
00:09:21,680 --> 00:09:23,040
and then the lastly we've got the state

292
00:09:23,040 --> 00:09:24,320
parameter we're going to go through this

293
00:09:24,320 --> 00:09:26,240
a little a few times but

294
00:09:26,240 --> 00:09:27,360
essentially

295
00:09:27,360 --> 00:09:29,279
when the client sends somebody off to

296
00:09:29,279 --> 00:09:31,440
the identity provider that needs to come

297
00:09:31,440 --> 00:09:34,320
back with the exact same value now the

298
00:09:34,320 --> 00:09:35,519
client can set whatever the heck they

299
00:09:35,519 --> 00:09:36,959
want with that they need to match it

300
00:09:36,959 --> 00:09:38,959
with the user that um that they were

301
00:09:38,959 --> 00:09:40,640
specifically sent away with but

302
00:09:40,640 --> 00:09:42,560
sometimes they they the clients stick

303
00:09:42,560 --> 00:09:43,760
all sorts of weird and interesting

304
00:09:43,760 --> 00:09:45,839
information in there such as the origin

305
00:09:45,839 --> 00:09:47,680
server here well why is that there but

306
00:09:47,680 --> 00:09:49,680
maybe we can use it to get past waff or

307
00:09:49,680 --> 00:09:52,480
this auto promoter's staff equals false

308
00:09:52,480 --> 00:09:54,000
turn that on to true see what happens

309
00:09:54,000 --> 00:09:56,080
there

310
00:09:56,080 --> 00:09:58,399
and then lastly just do your usual basic

311
00:09:58,399 --> 00:10:00,160
pen testing fluff you know like can we

312
00:10:00,160 --> 00:10:01,680
just use basic gold can we skip all of

313
00:10:01,680 --> 00:10:03,600
the soul wolf crap um can we are there

314
00:10:03,600 --> 00:10:04,880
any leaked credentials in the source

315
00:10:04,880 --> 00:10:08,240
code et cetera et cetera et cetera

316
00:10:08,959 --> 00:10:10,240
so

317
00:10:10,240 --> 00:10:11,760
as somebody who isn't a pen test you're

318
00:10:11,760 --> 00:10:13,120
probably quite interested in going okay

319
00:10:13,120 --> 00:10:14,399
right there's a few things there i need

320
00:10:14,399 --> 00:10:16,399
to worry about uh what do i do to go and

321
00:10:16,399 --> 00:10:18,800
defend against this sort of stuff so

322
00:10:18,800 --> 00:10:21,360
um for these ones here

323
00:10:21,360 --> 00:10:22,399
really good idea is just to go and

324
00:10:22,399 --> 00:10:24,480
disable any unnecessary features

325
00:10:24,480 --> 00:10:26,240
if you've got any sort of sensitive or

326
00:10:26,240 --> 00:10:27,680
dangerous scopes that generally aren't

327
00:10:27,680 --> 00:10:29,040
going to be accessible to the public and

328
00:10:29,040 --> 00:10:30,480
maybe they're only used internally just

329
00:10:30,480 --> 00:10:32,160
hide them don't really you don't need to

330
00:10:32,160 --> 00:10:35,040
advertise them in that metadata uri if

331
00:10:35,040 --> 00:10:37,279
it's not necessary try and do it anyway

332
00:10:37,279 --> 00:10:38,560
see hopefully it shouldn't break

333
00:10:38,560 --> 00:10:40,399
anything um

334
00:10:40,399 --> 00:10:42,800
uh disable any under keys you notice

335
00:10:42,800 --> 00:10:45,120
that we had two like there was hs256 and

336
00:10:45,120 --> 00:10:47,760
rs256 and that and that big as um json

337
00:10:47,760 --> 00:10:50,160
thing those are two quite different ways

338
00:10:50,160 --> 00:10:51,839
of doing encryption one symmetric one's

339
00:10:51,839 --> 00:10:54,079
asymmetric do you need them both can you

340
00:10:54,079 --> 00:10:55,600
just disable one of them that'll reduce

341
00:10:55,600 --> 00:10:57,760
your attack surface

342
00:10:57,760 --> 00:10:59,279
check your defaults as well like i

343
00:10:59,279 --> 00:11:01,440
mentioned before there was an identity

344
00:11:01,440 --> 00:11:03,519
provider i saw that was using 512 but

345
00:11:03,519 --> 00:11:06,079
rsa keys by default check those defaults

346
00:11:06,079 --> 00:11:08,560
make sure they're set to strong

347
00:11:08,560 --> 00:11:10,320
strong proper values

348
00:11:10,320 --> 00:11:12,079
and again look at those leaky parameters

349
00:11:12,079 --> 00:11:14,240
as well sometimes that state header can

350
00:11:14,240 --> 00:11:16,000
leak some really weird and interesting

351
00:11:16,000 --> 00:11:17,519
stuff

352
00:11:17,519 --> 00:11:19,839
uh lastly as well review your trust

353
00:11:19,839 --> 00:11:22,480
boundaries so that's where your da which

354
00:11:22,480 --> 00:11:23,920
data is being sent and received by

355
00:11:23,920 --> 00:11:25,440
specific components

356
00:11:25,440 --> 00:11:26,959
throw it into something like burp just

357
00:11:26,959 --> 00:11:28,480
have a look at the data that's actually

358
00:11:28,480 --> 00:11:29,760
whizzing around when you're doing a

359
00:11:29,760 --> 00:11:32,320
login process at the like you know http

360
00:11:32,320 --> 00:11:34,079
layer you might find that there's some

361
00:11:34,079 --> 00:11:35,519
stuff here that you didn't particularly

362
00:11:35,519 --> 00:11:37,120
want revealed

363
00:11:37,120 --> 00:11:38,320
can some of those parameters be

364
00:11:38,320 --> 00:11:40,000
encrypted and signed you can usually do

365
00:11:40,000 --> 00:11:43,360
that with the state parameter um lastly

366
00:11:43,360 --> 00:11:44,959
apply your stride threat modeling as

367
00:11:44,959 --> 00:11:48,640
well map out your um uh your solution

368
00:11:48,640 --> 00:11:50,480
draw up your trust uh your trust

369
00:11:50,480 --> 00:11:52,079
boundaries and see when data crosses

370
00:11:52,079 --> 00:11:54,000
over those when you do that apply stride

371
00:11:54,000 --> 00:11:56,480
and see where see whether you can um

372
00:11:56,480 --> 00:11:58,079
do your um

373
00:11:58,079 --> 00:11:59,519
see if there's anything anything you do

374
00:11:59,519 --> 00:12:01,440
to help uh protect that a little bit

375
00:12:01,440 --> 00:12:03,040
further

376
00:12:03,040 --> 00:12:04,639
cool so for our second scenario we've

377
00:12:04,639 --> 00:12:06,880
got exploitation with our own our

378
00:12:06,880 --> 00:12:08,560
attackers account now of course this is

379
00:12:08,560 --> 00:12:10,399
not somebody else we've just signed up

380
00:12:10,399 --> 00:12:12,320
an account now as a result we can get a

381
00:12:12,320 --> 00:12:14,240
little bit further into things maybe we

382
00:12:14,240 --> 00:12:16,160
don't have privileged access but we

383
00:12:16,160 --> 00:12:17,839
still do differ we will still be able to

384
00:12:17,839 --> 00:12:19,360
access most of the site and we can see

385
00:12:19,360 --> 00:12:20,880
how some of that look but more of that

386
00:12:20,880 --> 00:12:23,360
login interaction working

387
00:12:23,360 --> 00:12:25,600
so as an attacker

388
00:12:25,600 --> 00:12:26,720
like i mentioned before there's that

389
00:12:26,720 --> 00:12:28,800
state parameter it's a really important

390
00:12:28,800 --> 00:12:29,920
thing when you're doing especially with

391
00:12:29,920 --> 00:12:31,760
that log that that authorization code

392
00:12:31,760 --> 00:12:33,760
flow that you get that particular one

393
00:12:33,760 --> 00:12:34,560
right

394
00:12:34,560 --> 00:12:35,440
um

395
00:12:35,440 --> 00:12:37,519
uh or as a pen tester it's really great

396
00:12:37,519 --> 00:12:39,519
if we're not getting it right um so

397
00:12:39,519 --> 00:12:41,279
again it's usually sent when it go off

398
00:12:41,279 --> 00:12:43,279
from uh from the client off to the rdp

399
00:12:43,279 --> 00:12:44,800
and then it should come back exactly the

400
00:12:44,800 --> 00:12:46,880
same state but if they're not doing that

401
00:12:46,880 --> 00:12:48,880
properly and it's not being matched to a

402
00:12:48,880 --> 00:12:50,720
specific user we end up with things like

403
00:12:50,720 --> 00:12:52,480
session fixation attacks

404
00:12:52,480 --> 00:12:54,079
how that ends up looking is if you

405
00:12:54,079 --> 00:12:55,519
remember this particular slide where we

406
00:12:55,519 --> 00:12:58,079
sent off our google uh

407
00:12:58,079 --> 00:13:00,240
google password and it came back with an

408
00:13:00,240 --> 00:13:02,480
authorization code for us to use

409
00:13:02,480 --> 00:13:04,560
if we weren't doing the state parameter

410
00:13:04,560 --> 00:13:06,000
thing properly what we could do is we

411
00:13:06,000 --> 00:13:07,360
could just make our own account as an

412
00:13:07,360 --> 00:13:10,480
attacker and make it look exactly like

413
00:13:10,480 --> 00:13:12,800
the victim's account we send our

414
00:13:12,800 --> 00:13:14,240
password off

415
00:13:14,240 --> 00:13:16,160
we get that authorization code back but

416
00:13:16,160 --> 00:13:18,320
we don't send it to the client instead

417
00:13:18,320 --> 00:13:20,000
what we do is we craft ourselves up a

418
00:13:20,000 --> 00:13:21,600
really awesome uh like an instant

419
00:13:21,600 --> 00:13:23,680
messenger or a email or something say

420
00:13:23,680 --> 00:13:25,360
hey bro check out this cool layers link

421
00:13:25,360 --> 00:13:26,959
it's that photo viewer plus store code

422
00:13:26,959 --> 00:13:29,200
or nz that you love and you know they've

423
00:13:29,200 --> 00:13:30,639
done this cyber security training they

424
00:13:30,639 --> 00:13:32,160
know that not to go and click on random

425
00:13:32,160 --> 00:13:33,440
links that they receive in emails but

426
00:13:33,440 --> 00:13:35,120
this is a friend right they look in the

427
00:13:35,120 --> 00:13:36,880
look of the link and it's like oh yeah

428
00:13:36,880 --> 00:13:38,399
definitely photo viewer plus dot com

429
00:13:38,399 --> 00:13:39,920
there there's that http

430
00:13:39,920 --> 00:13:42,000
https thing in the background there i

431
00:13:42,000 --> 00:13:43,120
mean there's all that other there

432
00:13:43,120 --> 00:13:44,880
but it's just computer stuff right i'll

433
00:13:44,880 --> 00:13:46,560
just click on the link should be right

434
00:13:46,560 --> 00:13:48,480
and what happens is instead they end up

435
00:13:48,480 --> 00:13:50,000
getting logged in they finish the login

436
00:13:50,000 --> 00:13:53,040
for us and now they're logged in as our

437
00:13:53,040 --> 00:13:55,360
attacker account which looks like their

438
00:13:55,360 --> 00:13:57,440
account but it was crafted so it's

439
00:13:57,440 --> 00:13:58,959
actually but it's actually our one as

440
00:13:58,959 --> 00:14:01,199
you can see logged in as hacked you at

441
00:14:01,199 --> 00:14:03,920
pond.lol

442
00:14:03,920 --> 00:14:05,040
they might not know that they're

443
00:14:05,040 --> 00:14:06,320
actually sitting on our account and then

444
00:14:06,320 --> 00:14:08,720
they start uploading sensitive photos or

445
00:14:08,720 --> 00:14:10,480
doing things in a way that you know now

446
00:14:10,480 --> 00:14:12,079
we've got access to their account we we

447
00:14:12,079 --> 00:14:13,920
now have access to that particular data

448
00:14:13,920 --> 00:14:15,279
this is just one example there's a whole

449
00:14:15,279 --> 00:14:16,880
bunch of different ways you can

450
00:14:16,880 --> 00:14:18,720
abuse session fixation but this is the

451
00:14:18,720 --> 00:14:19,839
sort of thing that is designed to

452
00:14:19,839 --> 00:14:21,920
prevent

453
00:14:21,920 --> 00:14:23,600
another area to investigate is what we

454
00:14:23,600 --> 00:14:25,920
call uh what's uh what we're referring

455
00:14:25,920 --> 00:14:28,560
to is open uh client registration so

456
00:14:28,560 --> 00:14:30,800
sometimes you've got big login servers

457
00:14:30,800 --> 00:14:32,639
like google's one where they want third

458
00:14:32,639 --> 00:14:34,399
parties to go and use their awesome

459
00:14:34,399 --> 00:14:35,600
login button and do a little bit of

460
00:14:35,600 --> 00:14:37,040
advertising on every single site by

461
00:14:37,040 --> 00:14:39,120
having that button there um

462
00:14:39,120 --> 00:14:40,079
so

463
00:14:40,079 --> 00:14:41,600
what we could do is we could make our

464
00:14:41,600 --> 00:14:42,959
own client that kind of looks like a

465
00:14:42,959 --> 00:14:44,560
legit thing of something else and then

466
00:14:44,560 --> 00:14:46,639
we can go fishing

467
00:14:46,639 --> 00:14:48,000
so if you've ever logged in with say

468
00:14:48,000 --> 00:14:49,680
azure id you might be kind of familiar

469
00:14:49,680 --> 00:14:50,720
with the screen like this i've cut out

470
00:14:50,720 --> 00:14:52,000
some information so it's a bit easier to

471
00:14:52,000 --> 00:14:54,079
see but long story short there's a

472
00:14:54,079 --> 00:14:56,240
really cool um app that microsoft made

473
00:14:56,240 --> 00:14:57,519
called graph explorer it's really good

474
00:14:57,519 --> 00:14:59,839
as a developer for um

475
00:14:59,839 --> 00:15:01,920
testing out various apis and things and

476
00:15:01,920 --> 00:15:04,000
so the microsoft really know that so

477
00:15:04,000 --> 00:15:05,360
you're absolutely sure that you're

478
00:15:05,360 --> 00:15:06,560
dealing with a microsoft thing because

479
00:15:06,560 --> 00:15:08,320
you're granting it read write directory

480
00:15:08,320 --> 00:15:10,079
data um permissions here it's kind of

481
00:15:10,079 --> 00:15:10,959
scary

482
00:15:10,959 --> 00:15:12,320
they've put a big plus thing on the side

483
00:15:12,320 --> 00:15:13,279
of it there so you definitely know

484
00:15:13,279 --> 00:15:15,199
you're talking with microsoft so they've

485
00:15:15,199 --> 00:15:16,800
done it well but if you can imagine

486
00:15:16,800 --> 00:15:17,839
somebody who doesn't have that

487
00:15:17,839 --> 00:15:20,000
particular feature we create ourselves

488
00:15:20,000 --> 00:15:21,920
an organization called

489
00:15:21,920 --> 00:15:25,120
microsoft with ones and zeros and then

490
00:15:25,120 --> 00:15:26,800
we just make a client that looks exactly

491
00:15:26,800 --> 00:15:28,880
the same same icon same sort of thing

492
00:15:28,880 --> 00:15:30,959
and request the same sort of permissions

493
00:15:30,959 --> 00:15:32,880
if you give somebody that link and say

494
00:15:32,880 --> 00:15:34,959
hey can you log into this call tool

495
00:15:34,959 --> 00:15:37,040
they might redirect off to you with a

496
00:15:37,040 --> 00:15:38,639
valid credential that has read write

497
00:15:38,639 --> 00:15:40,480
access data and they don't realize that

498
00:15:40,480 --> 00:15:41,600
they're not actually interacting with

499
00:15:41,600 --> 00:15:42,959
real microsoft they're interacting with

500
00:15:42,959 --> 00:15:45,279
something that's fake

501
00:15:45,279 --> 00:15:46,720
and again they're just going to click on

502
00:15:46,720 --> 00:15:48,079
that link they've done their cyber

503
00:15:48,079 --> 00:15:49,360
training right they've they see the

504
00:15:49,360 --> 00:15:51,079
https and they see that it's

505
00:15:51,079 --> 00:15:52,800
login.microsoft.com they know that they

506
00:15:52,800 --> 00:15:55,839
can trust that link

507
00:15:55,920 --> 00:15:58,399
um and lastly we've got jot attacks as

508
00:15:58,399 --> 00:16:00,720
well now jots aren't exclusive sorry

509
00:16:00,720 --> 00:16:02,160
jots

510
00:16:02,160 --> 00:16:04,079
aren't exclusive to openid connect but

511
00:16:04,079 --> 00:16:05,680
they they're used quite heavily in it

512
00:16:05,680 --> 00:16:07,120
and you'll see it quite commonly through

513
00:16:07,120 --> 00:16:08,880
there and just there's a lot of

514
00:16:08,880 --> 00:16:11,199
implementation issues you get with a lot

515
00:16:11,199 --> 00:16:12,240
of those things

516
00:16:12,240 --> 00:16:13,839
i'm not going to go into too much detail

517
00:16:13,839 --> 00:16:15,199
about these ones because these are a lot

518
00:16:15,199 --> 00:16:17,120
of these a lot of these

519
00:16:17,120 --> 00:16:18,560
discussions have been done to death but

520
00:16:18,560 --> 00:16:20,639
really really quickly algnun is one

521
00:16:20,639 --> 00:16:22,480
particular attack you can do with jots

522
00:16:22,480 --> 00:16:24,800
this is what a access token might look

523
00:16:24,800 --> 00:16:26,079
like um

524
00:16:26,079 --> 00:16:27,680
where you have a thing which is signed

525
00:16:27,680 --> 00:16:30,720
by a hmac key um totally legitimate

526
00:16:30,720 --> 00:16:32,480
looking thing what we can do is we can

527
00:16:32,480 --> 00:16:34,240
just go into the header and say oh yeah

528
00:16:34,240 --> 00:16:36,320
this jot isn't signed at all there's no

529
00:16:36,320 --> 00:16:37,920
signature here you don't need to just

530
00:16:37,920 --> 00:16:40,399
anything's in there whatever you want um

531
00:16:40,399 --> 00:16:41,759
and just because we've just put none

532
00:16:41,759 --> 00:16:45,199
there and the spec allows this it see it

533
00:16:45,199 --> 00:16:46,800
goes oh yeah this is a valid job because

534
00:16:46,800 --> 00:16:48,160
the spec says you can just put none

535
00:16:48,160 --> 00:16:49,440
there and then don't sign it and that's

536
00:16:49,440 --> 00:16:50,800
a velodrop

537
00:16:50,800 --> 00:16:53,120
which is really stupid most people

538
00:16:53,120 --> 00:16:54,560
ignore that particular part of the spec

539
00:16:54,560 --> 00:16:56,480
and say yeah okay no it has to be signed

540
00:16:56,480 --> 00:16:58,000
but some people don't and this has

541
00:16:58,000 --> 00:17:00,240
definitely caught some folks out

542
00:17:00,240 --> 00:17:02,000
the other popular attack you will see is

543
00:17:02,000 --> 00:17:03,519
key confusion attacks now there's quite

544
00:17:03,519 --> 00:17:04,959
a different a few different varieties of

545
00:17:04,959 --> 00:17:06,640
this as well but one particular way you

546
00:17:06,640 --> 00:17:08,480
do this is say you've got this

547
00:17:08,480 --> 00:17:10,720
particular jot here it's signed using an

548
00:17:10,720 --> 00:17:13,520
rsa key this is this specific kind of

549
00:17:13,520 --> 00:17:15,280
key here which you'll be able to look up

550
00:17:15,280 --> 00:17:17,520
using that openid connect metadata thing

551
00:17:17,520 --> 00:17:19,199
so i'm using that key

552
00:17:19,199 --> 00:17:21,679
what would happen if we were to say

553
00:17:21,679 --> 00:17:24,640
actually this is an hmac key

554
00:17:24,640 --> 00:17:26,640
but use that rsa key that you can look

555
00:17:26,640 --> 00:17:28,240
up on the thing so what it does is it

556
00:17:28,240 --> 00:17:30,960
goes over and looks up there the rsa key

557
00:17:30,960 --> 00:17:32,240
there but it goes and grabs the public

558
00:17:32,240 --> 00:17:34,400
key of course and since it's a symmetric

559
00:17:34,400 --> 00:17:36,640
cipher it uses the public key that we

560
00:17:36,640 --> 00:17:39,120
have access to to sign the jot which of

561
00:17:39,120 --> 00:17:40,240
course

562
00:17:40,240 --> 00:17:41,600
the public key is then also used to

563
00:17:41,600 --> 00:17:43,120
verify the jot

564
00:17:43,120 --> 00:17:45,520
now we can just go and make our own keys

565
00:17:45,520 --> 00:17:46,799
there's loads of information about how

566
00:17:46,799 --> 00:17:47,919
to go and do this particular attack i'm

567
00:17:47,919 --> 00:17:49,200
not going to go too much into detail

568
00:17:49,200 --> 00:17:50,720
about that one but definitely look it up

569
00:17:50,720 --> 00:17:52,720
it's really interesting so many clients

570
00:17:52,720 --> 00:17:54,000
where out there were vulnerable to that

571
00:17:54,000 --> 00:17:55,600
particular problem

572
00:17:55,600 --> 00:17:56,960
but there's a third kind of attack i do

573
00:17:56,960 --> 00:17:58,080
want to actually go into a little bit

574
00:17:58,080 --> 00:18:00,240
which is what i call a forged issue or

575
00:18:00,240 --> 00:18:03,039
attack and this is something i've

576
00:18:03,039 --> 00:18:05,919
nearly encountered let's just say um

577
00:18:05,919 --> 00:18:09,120
in the past where i had a i was

578
00:18:09,120 --> 00:18:12,840
saw a particular app which used the

579
00:18:12,840 --> 00:18:15,280
issuer um uh

580
00:18:15,280 --> 00:18:16,640
the issuer

581
00:18:16,640 --> 00:18:18,880
claim here to say where

582
00:18:18,880 --> 00:18:19,600
the

583
00:18:19,600 --> 00:18:22,080
jot token was coming from and he used

584
00:18:22,080 --> 00:18:23,440
that particular thing i looked that up

585
00:18:23,440 --> 00:18:25,520
first to say okay cool i'll go and grab

586
00:18:25,520 --> 00:18:27,280
the public keys and so i can make sure

587
00:18:27,280 --> 00:18:29,200
that i can verify this thing you might

588
00:18:29,200 --> 00:18:30,559
be able to see the problem here is i

589
00:18:30,559 --> 00:18:33,120
could just then change this

590
00:18:33,120 --> 00:18:33,840
to

591
00:18:33,840 --> 00:18:35,840
point to where my key is and then sign a

592
00:18:35,840 --> 00:18:37,679
jot that the server now trusts because

593
00:18:37,679 --> 00:18:39,360
it's like oh yeah go over this place and

594
00:18:39,360 --> 00:18:41,200
we'll grab the public key from there the

595
00:18:41,200 --> 00:18:43,840
job's now signed using the attackers key

596
00:18:43,840 --> 00:18:45,760
and then we can log into things this is

597
00:18:45,760 --> 00:18:47,120
because they're not

598
00:18:47,120 --> 00:18:49,440
limiting what issuers are trusted they

599
00:18:49,440 --> 00:18:51,200
just kind of allow it to just be

600
00:18:51,200 --> 00:18:53,039
anything really and it's also a bit of a

601
00:18:53,039 --> 00:18:54,320
problem because what you're supposed to

602
00:18:54,320 --> 00:18:55,600
really be doing is checking the

603
00:18:55,600 --> 00:18:57,440
signature first before you read anything

604
00:18:57,440 --> 00:19:00,000
else um well you check the body then the

605
00:19:00,000 --> 00:19:03,760
signature here it gets complicated

606
00:19:06,480 --> 00:19:09,039
so as a defender validate those state

607
00:19:09,039 --> 00:19:11,760
parameters check when you when the user

608
00:19:11,760 --> 00:19:13,360
comes back with that authorization code

609
00:19:13,360 --> 00:19:16,400
make sure it is a long legit value it

610
00:19:16,400 --> 00:19:18,480
isn't something that

611
00:19:18,480 --> 00:19:20,640
isn't expected um it's not something

612
00:19:20,640 --> 00:19:21,760
that has been tampered with or

613
00:19:21,760 --> 00:19:23,120
manipulated

614
00:19:23,120 --> 00:19:25,679
also make sure that the the the state

615
00:19:25,679 --> 00:19:27,840
parameter matches the local browsing

616
00:19:27,840 --> 00:19:30,160
session you shouldn't have sent somebody

617
00:19:30,160 --> 00:19:31,919
off and then a different person came

618
00:19:31,919 --> 00:19:33,679
back with the authorization code which

619
00:19:33,679 --> 00:19:35,280
matches that that particular state as

620
00:19:35,280 --> 00:19:36,799
well you want to make sure it's the same

621
00:19:36,799 --> 00:19:38,960
person so match up with a cookie or

622
00:19:38,960 --> 00:19:40,720
match it with an ip address

623
00:19:40,720 --> 00:19:41,919
match it with a cookie it's probably the

624
00:19:41,919 --> 00:19:43,679
best way to go and do that

625
00:19:43,679 --> 00:19:46,320
um and then when you do that as well

626
00:19:46,320 --> 00:19:48,160
if you get an authorization code but

627
00:19:48,160 --> 00:19:49,840
somebody's already logged in just prompt

628
00:19:49,840 --> 00:19:51,280
the user and say hey you're currently

629
00:19:51,280 --> 00:19:52,720
logged in as this but did you actually

630
00:19:52,720 --> 00:19:54,080
want to log in as this person because

631
00:19:54,080 --> 00:19:55,039
it's a different one to that

632
00:19:55,039 --> 00:19:56,880
authorization code we got

633
00:19:56,880 --> 00:19:58,320
and then that way you might be able to

634
00:19:58,320 --> 00:19:59,760
help stop some of those session fixation

635
00:19:59,760 --> 00:20:01,039
attacks

636
00:20:01,039 --> 00:20:02,640
open client registration if you're

637
00:20:02,640 --> 00:20:03,840
allowing third parties to go and

638
00:20:03,840 --> 00:20:05,760
register with your identity provider

639
00:20:05,760 --> 00:20:07,039
consider disabling that client

640
00:20:07,039 --> 00:20:08,559
registration to the public if you don't

641
00:20:08,559 --> 00:20:10,159
need it seriously it shouldn't be on

642
00:20:10,159 --> 00:20:11,679
it's kind of a little bit uh it

643
00:20:11,679 --> 00:20:13,520
shouldn't be on if you aren't explicitly

644
00:20:13,520 --> 00:20:15,600
needing it it's kind of got a lot of a

645
00:20:15,600 --> 00:20:17,120
lot of attack surface and i'm just

646
00:20:17,120 --> 00:20:18,880
barely skimming the surface of that one

647
00:20:18,880 --> 00:20:21,520
but if you do need to do that manually

648
00:20:21,520 --> 00:20:23,120
vet clients before they can ask for

649
00:20:23,120 --> 00:20:25,440
dangerous scopes we saw that read write

650
00:20:25,440 --> 00:20:27,280
directory permissions

651
00:20:27,280 --> 00:20:28,880
scope that was being done there and we

652
00:20:28,880 --> 00:20:31,200
saw that consent screen for it

653
00:20:31,200 --> 00:20:33,360
make sure that only clients that you

654
00:20:33,360 --> 00:20:35,520
have manually vetted are able to even

655
00:20:35,520 --> 00:20:38,240
request scopes like that

656
00:20:38,240 --> 00:20:40,000
mark some scopes as well as orga is

657
00:20:40,000 --> 00:20:41,840
requiring organization and organization

658
00:20:41,840 --> 00:20:43,280
admin to approve there shouldn't be

659
00:20:43,280 --> 00:20:45,120
really any reason that most people in

660
00:20:45,120 --> 00:20:47,520
the in an organization to request that

661
00:20:47,520 --> 00:20:49,200
scope they're probably not going to need

662
00:20:49,200 --> 00:20:51,200
read write access to the entire order to

663
00:20:51,200 --> 00:20:53,679
the entire like active directory thing

664
00:20:53,679 --> 00:20:55,840
um but maybe some more organization

665
00:20:55,840 --> 00:20:57,840
admins can so see if you can get them

666
00:20:57,840 --> 00:20:59,679
like somebody who is more knowledgeable

667
00:20:59,679 --> 00:21:01,520
with it to approve those uh those those

668
00:21:01,520 --> 00:21:04,080
notifications so that those um scopes

669
00:21:04,080 --> 00:21:05,200
before

670
00:21:05,200 --> 00:21:07,200
uh they get asked for

671
00:21:07,200 --> 00:21:09,120
and then of course your jot attacks make

672
00:21:09,120 --> 00:21:10,480
sure you just keep your libraries up to

673
00:21:10,480 --> 00:21:11,679
date trying to defend against these

674
00:21:11,679 --> 00:21:13,200
sorts of things it's cryptography it's

675
00:21:13,200 --> 00:21:14,720
really hard it's crazy maths i have no

676
00:21:14,720 --> 00:21:16,640
idea i don't understand it so keep your

677
00:21:16,640 --> 00:21:19,039
libraries up to date they made like

678
00:21:19,039 --> 00:21:21,200
official very official looking libraries

679
00:21:21,200 --> 00:21:22,559
fell victim to some of these things but

680
00:21:22,559 --> 00:21:24,159
once you're updated it was it was

681
00:21:24,159 --> 00:21:25,440
resolved

682
00:21:25,440 --> 00:21:26,880
secondly and i'm going to say that

683
00:21:26,880 --> 00:21:28,880
secondly thirdly and fourthly don't

684
00:21:28,880 --> 00:21:30,480
write your own job parser please don't

685
00:21:30,480 --> 00:21:32,159
write your own job pass it

686
00:21:32,159 --> 00:21:34,640
please don't write your own job parser

687
00:21:34,640 --> 00:21:36,640
the thing with jots is they are

688
00:21:36,640 --> 00:21:38,799
deceptively simple looking and anybody

689
00:21:38,799 --> 00:21:40,400
looks like they can go in and they can

690
00:21:40,400 --> 00:21:42,720
go and write these things but they have

691
00:21:42,720 --> 00:21:44,400
many sharp edges that are really quite

692
00:21:44,400 --> 00:21:46,000
invisible it's really hard to go and

693
00:21:46,000 --> 00:21:47,440
know that you're doing this wrong so

694
00:21:47,440 --> 00:21:50,080
don't do it yourself

695
00:21:50,080 --> 00:21:52,640
okay third scenario we've got here is

696
00:21:52,640 --> 00:21:54,720
exploitation with a stolen user account

697
00:21:54,720 --> 00:21:56,640
so let's just say we've managed to break

698
00:21:56,640 --> 00:21:58,480
into somebody's uh

699
00:21:58,480 --> 00:22:00,240
somebody's account maybe they have more

700
00:22:00,240 --> 00:22:02,880
privileged access to uh to things than

701
00:22:02,880 --> 00:22:04,559
than others normally would

702
00:22:04,559 --> 00:22:06,960
um and you know we got this we got

703
00:22:06,960 --> 00:22:08,000
through this through hey they've got a

704
00:22:08,000 --> 00:22:09,760
weak password they don't use mfa you

705
00:22:09,760 --> 00:22:11,039
know all the usual sort of fluff with

706
00:22:11,039 --> 00:22:13,280
that as well maybe it was a little bit

707
00:22:13,280 --> 00:22:15,760
noisy though and we don't really want

708
00:22:15,760 --> 00:22:18,080
them to kick us back out again maybe

709
00:22:18,080 --> 00:22:20,400
they got a notification with their

710
00:22:20,400 --> 00:22:22,480
mfa login but we're using our awesome

711
00:22:22,480 --> 00:22:25,200
oday like icloud imessage oh day to go

712
00:22:25,200 --> 00:22:27,280
on like you know uh when i went against

713
00:22:27,280 --> 00:22:29,280
a pentest um

714
00:22:29,280 --> 00:22:30,880
and um

715
00:22:30,880 --> 00:22:32,240
we want to persist within this

716
00:22:32,240 --> 00:22:34,640
particular login even if the attack is

717
00:22:34,640 --> 00:22:36,559
kind of aware that something's not quite

718
00:22:36,559 --> 00:22:37,520
right

719
00:22:37,520 --> 00:22:38,799
there's a few things we can do here to

720
00:22:38,799 --> 00:22:41,039
go and establish more uh established

721
00:22:41,039 --> 00:22:42,799
persistence with this one of them is to

722
00:22:42,799 --> 00:22:45,280
do is to use refresh tokens again we can

723
00:22:45,280 --> 00:22:46,720
go and um

724
00:22:46,720 --> 00:22:48,799
uh

725
00:22:48,799 --> 00:22:50,400
if we create you know if we've got our

726
00:22:50,400 --> 00:22:52,640
particular login here you remember the

727
00:22:52,640 --> 00:22:54,960
slide where we the user

728
00:22:54,960 --> 00:22:57,919
bastard the client claimed their

729
00:22:57,919 --> 00:23:00,159
authorization code um and they used it

730
00:23:00,159 --> 00:23:02,159
to go and get a jot what they can do at

731
00:23:02,159 --> 00:23:04,480
the same time is when and assuming the

732
00:23:04,480 --> 00:23:05,360
user

733
00:23:05,360 --> 00:23:08,000
allows this they can also request a

734
00:23:08,000 --> 00:23:10,080
refresh token at the same time now this

735
00:23:10,080 --> 00:23:12,240
one is not usually a jot it's usually

736
00:23:12,240 --> 00:23:14,799
some sort of like just a random

737
00:23:14,799 --> 00:23:16,080
value that's just looked up in a

738
00:23:16,080 --> 00:23:17,600
database so that way it can be a lot

739
00:23:17,600 --> 00:23:19,840
more easily revoked but what we can do

740
00:23:19,840 --> 00:23:22,559
with this refresh token is whenever the

741
00:23:22,559 --> 00:23:24,799
jot token expires should only last about

742
00:23:24,799 --> 00:23:26,799
an hour or so

743
00:23:26,799 --> 00:23:29,120
the client offline and a back channel

744
00:23:29,120 --> 00:23:31,520
can just use that refresh token to get a

745
00:23:31,520 --> 00:23:34,799
fresh new jot

746
00:23:35,440 --> 00:23:37,120
and what that ends up looking like is

747
00:23:37,120 --> 00:23:38,799
kind of i mean to the user is something

748
00:23:38,799 --> 00:23:40,960
like this if you some

749
00:23:40,960 --> 00:23:42,080
a lot of applications will have this

750
00:23:42,080 --> 00:23:43,279
sort of like connected apps kind of

751
00:23:43,279 --> 00:23:44,480
thing

752
00:23:44,480 --> 00:23:46,400
this usually maps quite well to what

753
00:23:46,400 --> 00:23:47,840
sort of refresh tokens have actually

754
00:23:47,840 --> 00:23:50,240
been issued and it provides an area

755
00:23:50,240 --> 00:23:51,760
where you can go and revoke those access

756
00:23:51,760 --> 00:23:54,799
token those refresh tokens so that

757
00:23:54,799 --> 00:23:56,720
when the job expires obviously there's

758
00:23:56,720 --> 00:23:58,159
no more dots now because the refresh

759
00:23:58,159 --> 00:24:00,880
token doesn't work

760
00:24:01,360 --> 00:24:03,279
so as an attacker you can hide out in

761
00:24:03,279 --> 00:24:05,360
that sort of place by issuing a refresh

762
00:24:05,360 --> 00:24:06,880
token under a client that maybe looks

763
00:24:06,880 --> 00:24:09,200
legitimate when the user

764
00:24:09,200 --> 00:24:10,720
resets their password they might not

765
00:24:10,720 --> 00:24:13,279
know or may not even know what the heck

766
00:24:13,279 --> 00:24:15,279
the whole connected apps thing is about

767
00:24:15,279 --> 00:24:16,799
and even though the refresh there

768
00:24:16,799 --> 00:24:18,640
they've changed the password now you're

769
00:24:18,640 --> 00:24:20,240
now you're still persisting within a

770
00:24:20,240 --> 00:24:21,520
refresh token that just sits in those

771
00:24:21,520 --> 00:24:23,600
connected apps lists

772
00:24:23,600 --> 00:24:24,880
the second one of course is just

773
00:24:24,880 --> 00:24:26,400
excessive token lifetime like i

774
00:24:26,400 --> 00:24:28,720
mentioned before jots should only last

775
00:24:28,720 --> 00:24:29,520
for

776
00:24:29,520 --> 00:24:32,559
up to an hour at most um but sometimes

777
00:24:32,559 --> 00:24:34,720
you'll see um sometimes we've seen

778
00:24:34,720 --> 00:24:36,480
engagements where people have a shooter

779
00:24:36,480 --> 00:24:38,080
jot and they've lasted way more than an

780
00:24:38,080 --> 00:24:40,480
hour they've lasted like 30 days or in

781
00:24:40,480 --> 00:24:42,400
this case basically till the end of

782
00:24:42,400 --> 00:24:45,200
epoch time

783
00:24:45,600 --> 00:24:46,480
um

784
00:24:46,480 --> 00:24:48,480
and we can just business with this it's

785
00:24:48,480 --> 00:24:50,240
really hard to revoke a jot just due to

786
00:24:50,240 --> 00:24:51,919
the way that it works

787
00:24:51,919 --> 00:24:53,679
the whole idea of a jot is that you can

788
00:24:53,679 --> 00:24:56,400
just look at it as its own thing and

789
00:24:56,400 --> 00:24:57,200
then

790
00:24:57,200 --> 00:24:59,440
without your um yeah you can look at it

791
00:24:59,440 --> 00:25:00,559
as its own thing you don't have to go

792
00:25:00,559 --> 00:25:01,760
into a database and say is this

793
00:25:01,760 --> 00:25:03,440
legitimate you just go oh i've got this

794
00:25:03,440 --> 00:25:05,279
public key does this does the drop

795
00:25:05,279 --> 00:25:07,200
validate call i trust the job i'm just

796
00:25:07,200 --> 00:25:08,880
going to act on that that makes it

797
00:25:08,880 --> 00:25:10,320
really hard to revoke if you suddenly

798
00:25:10,320 --> 00:25:11,919
issue it and go oh actually maybe i

799
00:25:11,919 --> 00:25:13,600
shouldn't have it's kind of hard to do

800
00:25:13,600 --> 00:25:15,039
that without just entirely rolling your

801
00:25:15,039 --> 00:25:17,360
keys

802
00:25:17,840 --> 00:25:19,679
um the second thing i'll talk about here

803
00:25:19,679 --> 00:25:22,880
is dangerous scopes so a lot of the time

804
00:25:22,880 --> 00:25:24,559
if you break into those attackers

805
00:25:24,559 --> 00:25:26,000
accounts you might actually start seeing

806
00:25:26,000 --> 00:25:27,679
some interesting different scopes that

807
00:25:27,679 --> 00:25:29,520
are being requested as a part of that as

808
00:25:29,520 --> 00:25:31,039
part of their normal sort of login cycle

809
00:25:31,039 --> 00:25:32,799
or as a part of functionality that's

810
00:25:32,799 --> 00:25:34,960
hidden away in admin panels and we can

811
00:25:34,960 --> 00:25:36,240
start looking into those dangerous

812
00:25:36,240 --> 00:25:38,080
scopes and seeing if we can go and get

813
00:25:38,080 --> 00:25:39,279
ourselves further or even get their

814
00:25:39,279 --> 00:25:40,840
access to that using just a regular

815
00:25:40,840 --> 00:25:42,799
account so

816
00:25:42,799 --> 00:25:44,400
scopes are

817
00:25:44,400 --> 00:25:46,880
a feature of

818
00:25:46,880 --> 00:25:49,679
oauth2 but they are commonly abused to

819
00:25:49,679 --> 00:25:51,440
grant permissions to things they

820
00:25:51,440 --> 00:25:52,960
shouldn't be the case when you see that

821
00:25:52,960 --> 00:25:55,120
consent screen after you log in it says

822
00:25:55,120 --> 00:25:56,400
hey do you want to actually give this

823
00:25:56,400 --> 00:25:58,159
thing access to your email address and

824
00:25:58,159 --> 00:26:00,720
maybe read your emails as well

825
00:26:00,720 --> 00:26:02,480
this isn't a permissions granting thing

826
00:26:02,480 --> 00:26:04,640
it's a permissions boundary what i mean

827
00:26:04,640 --> 00:26:06,000
by that is if you have a little think

828
00:26:06,000 --> 00:26:08,080
about a fictitious

829
00:26:08,080 --> 00:26:10,799
photo website where we've got a regular

830
00:26:10,799 --> 00:26:12,559
user just a normal user who hasn't got a

831
00:26:12,559 --> 00:26:14,320
premium account or anything like that

832
00:26:14,320 --> 00:26:16,720
and they have photo right and photo read

833
00:26:16,720 --> 00:26:18,159
permissions right

834
00:26:18,159 --> 00:26:20,480
but they modify the login session so

835
00:26:20,480 --> 00:26:22,880
that they also request the premium

836
00:26:22,880 --> 00:26:24,799
promote photo

837
00:26:24,799 --> 00:26:25,760
scope

838
00:26:25,760 --> 00:26:26,720
so

839
00:26:26,720 --> 00:26:28,480
the access token that gets issued to

840
00:26:28,480 --> 00:26:30,880
something says this this access token is

841
00:26:30,880 --> 00:26:33,840
allowed to read photos and also promote

842
00:26:33,840 --> 00:26:36,159
photos as part of a premium feature but

843
00:26:36,159 --> 00:26:37,279
the user

844
00:26:37,279 --> 00:26:39,120
that asked for it

845
00:26:39,120 --> 00:26:40,320
doesn't actually have the premium

846
00:26:40,320 --> 00:26:42,640
feature enabled what this access token

847
00:26:42,640 --> 00:26:45,039
should be able to do in this case is the

848
00:26:45,039 --> 00:26:47,840
intersection here not the whole access

849
00:26:47,840 --> 00:26:49,120
token part

850
00:26:49,120 --> 00:26:50,320
what we'll see about quite a lot of the

851
00:26:50,320 --> 00:26:53,120
time is sometimes these scopes if you

852
00:26:53,120 --> 00:26:54,960
request it the identity server doesn't

853
00:26:54,960 --> 00:26:56,960
really know this the subtle interactions

854
00:26:56,960 --> 00:26:58,799
of how permissions and access control

855
00:26:58,799 --> 00:27:01,440
works on random resource servers so it

856
00:27:01,440 --> 00:27:03,760
just says okay this client is allowed to

857
00:27:03,760 --> 00:27:05,919
request this therefore here you go and

858
00:27:05,919 --> 00:27:07,600
now you've got access to premium

859
00:27:07,600 --> 00:27:10,799
features it should be a boundary not

860
00:27:10,799 --> 00:27:13,279
granting

861
00:27:14,080 --> 00:27:15,919
right so as a defender

862
00:27:15,919 --> 00:27:18,240
um going back to that initial

863
00:27:18,240 --> 00:27:21,919
part about uh the the the um persistence

864
00:27:21,919 --> 00:27:23,520
thing

865
00:27:23,520 --> 00:27:25,279
inform the user about various connected

866
00:27:25,279 --> 00:27:26,799
apps if the user receives their password

867
00:27:26,799 --> 00:27:27,840
because they're like oh shoot there's a

868
00:27:27,840 --> 00:27:29,120
hacker rumbling around there i've got

869
00:27:29,120 --> 00:27:31,919
weird tweets promoting um i don't know

870
00:27:31,919 --> 00:27:35,360
random scam stuff um uh

871
00:27:35,360 --> 00:27:36,880
maybe you'll go and change my password

872
00:27:36,880 --> 00:27:38,480
after they change the password tell them

873
00:27:38,480 --> 00:27:41,120
to review the connected apps that way

874
00:27:41,120 --> 00:27:42,720
they might go oh hang on i didn't really

875
00:27:42,720 --> 00:27:44,799
remember granting access to hacker

876
00:27:44,799 --> 00:27:46,320
scammer

877
00:27:46,320 --> 00:27:48,799
i'll just revoke that token

878
00:27:48,799 --> 00:27:50,559
also that which clients can actually ask

879
00:27:50,559 --> 00:27:52,880
for offline access depending on your uh

880
00:27:52,880 --> 00:27:55,919
depending on your um uh

881
00:27:55,919 --> 00:27:58,399
you know your your application logic it

882
00:27:58,399 --> 00:27:59,840
might not be a thing that everybody

883
00:27:59,840 --> 00:28:01,120
requires maybe you might be able to

884
00:28:01,120 --> 00:28:02,480
limit that down to something where have

885
00:28:02,480 --> 00:28:04,880
people have to be manually vetted

886
00:28:04,880 --> 00:28:06,720
uh limit the drop lifetime as well like

887
00:28:06,720 --> 00:28:08,640
i said shouldn't last for any more than

888
00:28:08,640 --> 00:28:11,360
an hour if you need more access

889
00:28:11,360 --> 00:28:13,520
either refresh the token using

890
00:28:13,520 --> 00:28:15,600
either using a legitimately issued

891
00:28:15,600 --> 00:28:18,480
refresh token get a fresh new job or you

892
00:28:18,480 --> 00:28:20,240
can transparently send the user back to

893
00:28:20,240 --> 00:28:22,399
the idp and come back again with a jot

894
00:28:22,399 --> 00:28:24,399
using the cookie that's stored with the

895
00:28:24,399 --> 00:28:27,039
identity provider

896
00:28:27,039 --> 00:28:29,360
um yeah use refresh tokens offline

897
00:28:29,360 --> 00:28:30,960
access network i have got those and run

898
00:28:30,960 --> 00:28:33,279
the remote

899
00:28:33,279 --> 00:28:35,600
ensure scopes limit access and not

900
00:28:35,600 --> 00:28:38,159
granted like i said before

901
00:28:38,159 --> 00:28:40,240
it should be that intersection not the

902
00:28:40,240 --> 00:28:42,720
entire list

903
00:28:42,720 --> 00:28:44,559
a drop with an admin scope doesn't just

904
00:28:44,559 --> 00:28:46,240
make them an admin it's got to be

905
00:28:46,240 --> 00:28:47,840
they've actually got to be an admin user

906
00:28:47,840 --> 00:28:50,159
as well so check that the user's id

907
00:28:50,159 --> 00:28:52,240
against the app's own access control or

908
00:28:52,240 --> 00:28:54,480
check their roles to make sure that they

909
00:28:54,480 --> 00:28:56,559
are actually an admin

910
00:28:56,559 --> 00:28:58,480
so that they can use that that job with

911
00:28:58,480 --> 00:29:00,320
it

912
00:29:00,320 --> 00:29:01,840
and our last one here we've got

913
00:29:01,840 --> 00:29:03,840
exploitation with a stolen surface

914
00:29:03,840 --> 00:29:06,000
account so this is usually where you can

915
00:29:06,000 --> 00:29:09,360
jump into a um

916
00:29:10,240 --> 00:29:11,840
usually a lot of iot devices will have

917
00:29:11,840 --> 00:29:14,240
the client id and secret embedded in it

918
00:29:14,240 --> 00:29:15,919
mobile apps often do this as well just

919
00:29:15,919 --> 00:29:16,880
due to the way that some of their

920
00:29:16,880 --> 00:29:18,880
authentication dances work sometimes

921
00:29:18,880 --> 00:29:20,320
you'll even find it just embedded into

922
00:29:20,320 --> 00:29:21,279
the source code and some web

923
00:29:21,279 --> 00:29:23,440
applications like spas and all that sort

924
00:29:23,440 --> 00:29:25,360
of jazz as well but usually the really

925
00:29:25,360 --> 00:29:26,720
interesting ones where you steal it from

926
00:29:26,720 --> 00:29:28,640
a web server as well

927
00:29:28,640 --> 00:29:30,720
um but as an attacker you can actually

928
00:29:30,720 --> 00:29:32,559
use some of these things to do more

929
00:29:32,559 --> 00:29:34,399
phishing kinds of kinds of stuff one of

930
00:29:34,399 --> 00:29:35,919
my favorite ones that i'm really

931
00:29:35,919 --> 00:29:37,600
interested in digging into a little bit

932
00:29:37,600 --> 00:29:39,520
is device code phishing

933
00:29:39,520 --> 00:29:41,440
so i mentioned that device code sort of

934
00:29:41,440 --> 00:29:44,399
that device code flow earlier very close

935
00:29:44,399 --> 00:29:46,320
to finishing don't worry

936
00:29:46,320 --> 00:29:48,399
um device code flow is what you'll

937
00:29:48,399 --> 00:29:49,760
normally see if you're like say logging

938
00:29:49,760 --> 00:29:52,640
into youtube with your um

939
00:29:52,640 --> 00:29:54,799
like a youtube app on your tv um you'll

940
00:29:54,799 --> 00:29:56,720
see like a qr code please scan this or

941
00:29:56,720 --> 00:29:59,120
go to this url and type in this code and

942
00:29:59,120 --> 00:30:01,279
what ends up happening here is

943
00:30:01,279 --> 00:30:03,840
we can um yeah

944
00:30:03,840 --> 00:30:05,679
we can abuse this for phishing

945
00:30:05,679 --> 00:30:06,559
um

946
00:30:06,559 --> 00:30:08,480
you'll what we could do in this case is

947
00:30:08,480 --> 00:30:10,640
abuse this particular login to steal it

948
00:30:10,640 --> 00:30:13,279
out of say an email client um so we've

949
00:30:13,279 --> 00:30:14,720
got a desktop email client it's got a

950
00:30:14,720 --> 00:30:16,240
client id and secret under it we can

951
00:30:16,240 --> 00:30:18,159
decompile it maybe we can use it to

952
00:30:18,159 --> 00:30:19,840
impersonate that particular client so we

953
00:30:19,840 --> 00:30:21,919
use that client id in secret and using

954
00:30:21,919 --> 00:30:24,480
the device code flow we say hey can you

955
00:30:24,480 --> 00:30:26,399
get me a link so i can log this person

956
00:30:26,399 --> 00:30:29,360
in using their phone not their desktop

957
00:30:29,360 --> 00:30:31,200
and it goes yeah sure no worries here's

958
00:30:31,200 --> 00:30:32,159
a link

959
00:30:32,159 --> 00:30:33,600
we then go and bundle that up into an

960
00:30:33,600 --> 00:30:34,559
email

961
00:30:34,559 --> 00:30:36,320
we say hey here's this important email

962
00:30:36,320 --> 00:30:38,159
url safe see they've done this cyber

963
00:30:38,159 --> 00:30:39,240
training they know that the

964
00:30:39,240 --> 00:30:41,279
login.microsoft.com url is safe they can

965
00:30:41,279 --> 00:30:42,960
click it

966
00:30:42,960 --> 00:30:44,960
and what happens is they will see a

967
00:30:44,960 --> 00:30:47,120
screen that looks like this hey email

968
00:30:47,120 --> 00:30:48,880
client for windows from legitimate

969
00:30:48,880 --> 00:30:50,720
software company would like to read your

970
00:30:50,720 --> 00:30:52,480
email they got it in an email saying

971
00:30:52,480 --> 00:30:53,760
well of course my email applies through

972
00:30:53,760 --> 00:30:55,840
my email i'm looking at email so you hit

973
00:30:55,840 --> 00:30:57,039
the accept button

974
00:30:57,039 --> 00:30:58,559
but what happened now they've done this

975
00:30:58,559 --> 00:31:00,720
over training they can see the phone all

976
00:31:00,720 --> 00:31:02,240
that sort of jazz and it's from

977
00:31:02,240 --> 00:31:03,679
legitimate software company a company

978
00:31:03,679 --> 00:31:04,880
that they trust

979
00:31:04,880 --> 00:31:06,640
now what happens in the background where

980
00:31:06,640 --> 00:31:08,159
the way that the client uh the the

981
00:31:08,159 --> 00:31:10,240
device code flow stuff works is it'll

982
00:31:10,240 --> 00:31:11,360
just constantly pull on background

983
00:31:11,360 --> 00:31:12,559
saying hey is that linked done yet is it

984
00:31:12,559 --> 00:31:14,000
done yet is it done yet as soon as

985
00:31:14,000 --> 00:31:15,279
they've logged in

986
00:31:15,279 --> 00:31:16,799
their phone just goes yep cool just turn

987
00:31:16,799 --> 00:31:19,600
off close the tab and we get a refresh

988
00:31:19,600 --> 00:31:21,360
token that we can now use to go and read

989
00:31:21,360 --> 00:31:23,279
their emails

990
00:31:23,279 --> 00:31:24,880
last things i'll very quickly go through

991
00:31:24,880 --> 00:31:26,640
this predictable client ids and secrets

992
00:31:26,640 --> 00:31:27,840
have a look at those client ids and

993
00:31:27,840 --> 00:31:29,679
secrets that you've stolen maybe they're

994
00:31:29,679 --> 00:31:30,960
incrementable because they're not some

995
00:31:30,960 --> 00:31:32,480
sort of like randomly generated thing

996
00:31:32,480 --> 00:31:33,679
you might be able to just iterate

997
00:31:33,679 --> 00:31:35,679
through them all and also does the

998
00:31:35,679 --> 00:31:37,600
client secret look kind of human made

999
00:31:37,600 --> 00:31:39,840
the idea is that developers shouldn't be

1000
00:31:39,840 --> 00:31:41,279
able to choose their own client id and

1001
00:31:41,279 --> 00:31:42,320
secret values because they're just

1002
00:31:42,320 --> 00:31:43,600
things that computers are using to talk

1003
00:31:43,600 --> 00:31:45,279
to each other but if they're allowed to

1004
00:31:45,279 --> 00:31:46,799
choose a password maybe we can use our

1005
00:31:46,799 --> 00:31:48,480
usual pen testing fluff to go and like

1006
00:31:48,480 --> 00:31:50,159
see if they're reusing the passwords or

1007
00:31:50,159 --> 00:31:52,240
they've chosen weak values

1008
00:31:52,240 --> 00:31:53,919
and lastly we've got lateral movement as

1009
00:31:53,919 --> 00:31:55,919
well i will skip very briefly over this

1010
00:31:55,919 --> 00:31:57,200
because i'm running a little bit over

1011
00:31:57,200 --> 00:31:59,519
time but long story short if we manage

1012
00:31:59,519 --> 00:32:01,519
to add access to a resource server but

1013
00:32:01,519 --> 00:32:03,200
multiple resource servers are trusted

1014
00:32:03,200 --> 00:32:04,799
with a specific jot

1015
00:32:04,799 --> 00:32:06,159
we can

1016
00:32:06,159 --> 00:32:08,640
say hack this particular server watch

1017
00:32:08,640 --> 00:32:10,000
different jots whizzing around but

1018
00:32:10,000 --> 00:32:12,480
they're the same value the jots accepted

1019
00:32:12,480 --> 00:32:13,760
in all of these various different

1020
00:32:13,760 --> 00:32:14,799
servers

1021
00:32:14,799 --> 00:32:16,240
what we could do is we could steal one

1022
00:32:16,240 --> 00:32:18,000
of those jots and then we can get access

1023
00:32:18,000 --> 00:32:20,480
to a different server by just replaying

1024
00:32:20,480 --> 00:32:22,480
it to a different server the idea is

1025
00:32:22,480 --> 00:32:24,080
that you should be

1026
00:32:24,080 --> 00:32:26,640
limiting the number of

1027
00:32:26,640 --> 00:32:28,960
urls inside that audience

1028
00:32:28,960 --> 00:32:32,640
client there sorry um the audience

1029
00:32:32,640 --> 00:32:35,360
claim there um it also can also uh can

1030
00:32:35,360 --> 00:32:37,360
leak some of those internal ones too

1031
00:32:37,360 --> 00:32:39,760
as a defender again phishing disabling

1032
00:32:39,760 --> 00:32:42,080
those unnecessary code flows highlight

1033
00:32:42,080 --> 00:32:43,600
dangerous scopes on the screen this

1034
00:32:43,600 --> 00:32:45,360
thing's trying to read all of your email

1035
00:32:45,360 --> 00:32:47,679
do you really want to be allowing that

1036
00:32:47,679 --> 00:32:49,600
predictable client ideas and secrets

1037
00:32:49,600 --> 00:32:51,760
force a non-predictable our client id

1038
00:32:51,760 --> 00:32:53,600
when developers sign up for a new client

1039
00:32:53,600 --> 00:32:55,679
a third-party client registration such

1040
00:32:55,679 --> 00:32:58,000
as good and also force a long randomly

1041
00:32:58,000 --> 00:32:59,760
generated client secret

1042
00:32:59,760 --> 00:33:00,799
there shouldn't be something that's like

1043
00:33:00,799 --> 00:33:02,640
a password don't let developers choose

1044
00:33:02,640 --> 00:33:04,399
the values lateral movement as well

1045
00:33:04,399 --> 00:33:06,080
limit the audience of each jot

1046
00:33:06,080 --> 00:33:08,880
especially powerful ones don't let them

1047
00:33:08,880 --> 00:33:11,519
exceed a specific uh

1048
00:33:11,519 --> 00:33:13,279
don't don't list them all in there all

1049
00:33:13,279 --> 00:33:14,880
at once if they've got powerful uh

1050
00:33:14,880 --> 00:33:15,919
permissions

1051
00:33:15,919 --> 00:33:18,240
have one jot per

1052
00:33:18,240 --> 00:33:20,159
server cool okay we went through it a

1053
00:33:20,159 --> 00:33:22,640
little bit over time i apologize

1054
00:33:22,640 --> 00:33:24,159
i usually do this i'm going to get way

1055
00:33:24,159 --> 00:33:25,200
too excited about things and go on

1056
00:33:25,200 --> 00:33:27,120
little tangents um but if anybody's got

1057
00:33:27,120 --> 00:33:29,519
any questions at all um please do let me

1058
00:33:29,519 --> 00:33:30,799
know i'm quite happy to sit on the

1059
00:33:30,799 --> 00:33:33,200
discord and um and run through anything

1060
00:33:33,200 --> 00:33:35,679
and lastly as well if doing this kind of

1061
00:33:35,679 --> 00:33:37,279
work sounds like your jam security

1062
00:33:37,279 --> 00:33:38,799
security's hiring at the moment we're on

1063
00:33:38,799 --> 00:33:40,399
the lookout for junior consultants

1064
00:33:40,399 --> 00:33:42,720
across pen testing cloud and cyber

1065
00:33:42,720 --> 00:33:44,399
security and risk as well reach out to

1066
00:33:44,399 --> 00:33:46,640
anybody in zx team and we can have a

1067
00:33:46,640 --> 00:33:48,450
chat cheers

1068
00:33:48,450 --> 00:34:06,130
[Music]

1069
00:34:09,020 --> 00:34:33,290
[Music]

1070
00:34:43,780 --> 00:34:50,429
[Music]

1071
00:34:53,699 --> 00:35:10,119
[Music]

1072
00:35:14,800 --> 00:35:26,119
[Music]

1073
00:35:29,260 --> 00:35:34,480
[Music]

1074
00:35:34,480 --> 00:35:37,480
so

1075
00:35:39,580 --> 00:35:49,879
[Music]

1076
00:35:50,160 --> 00:35:52,240
you

