1
00:00:05,200 --> 00:00:07,520
all right let's get started

2
00:00:07,520 --> 00:00:10,000
so my name is ben uh you can find me on

3
00:00:10,000 --> 00:00:12,400
twitter at raptor75 or

4
00:00:12,400 --> 00:00:14,799
ntest.ben gmail.com if email is your

5
00:00:14,799 --> 00:00:16,560
thing i don't promise i'll respond to

6
00:00:16,560 --> 00:00:18,080
you by email

7
00:00:18,080 --> 00:00:21,279
um this is raising the fruit

8
00:00:21,279 --> 00:00:22,720
so you've heard the phrase nothing is

9
00:00:22,720 --> 00:00:25,279
100 secure so instead of wasting time

10
00:00:25,279 --> 00:00:27,039
trying to make our systems unhackable we

11
00:00:27,039 --> 00:00:29,199
need to focus on defense and depth

12
00:00:29,199 --> 00:00:30,720
layering our defenses to frustrate

13
00:00:30,720 --> 00:00:33,280
attackers hackers are opportunists and

14
00:00:33,280 --> 00:00:35,120
the vast majority of cyber attacks are

15
00:00:35,120 --> 00:00:37,040
done by automated scripts and bots that

16
00:00:37,040 --> 00:00:39,040
don't even require human effort

17
00:00:39,040 --> 00:00:40,640
so your first line of defense says a lot

18
00:00:40,640 --> 00:00:42,160
about the security posture of your

19
00:00:42,160 --> 00:00:43,680
systems as a whole

20
00:00:43,680 --> 00:00:45,440
if an opportunistic attacker sees an

21
00:00:45,440 --> 00:00:47,039
obvious weakness in your perimeter even

22
00:00:47,039 --> 00:00:48,960
if it's minor you've just gotten their

23
00:00:48,960 --> 00:00:50,879
attention

24
00:00:50,879 --> 00:00:52,879
as a web app pen tester i do adversary

25
00:00:52,879 --> 00:00:54,640
simulation against client websites and

26
00:00:54,640 --> 00:00:56,960
applications so i'm paid to attack a

27
00:00:56,960 --> 00:00:58,879
client's perimeter using the same tools

28
00:00:58,879 --> 00:01:00,719
techniques and mindsets that malicious

29
00:01:00,719 --> 00:01:02,399
hackers use

30
00:01:02,399 --> 00:01:04,400
i start my web app penetration test with

31
00:01:04,400 --> 00:01:07,040
recon as i get familiar with the target

32
00:01:07,040 --> 00:01:08,960
if during that initial phase i end up

33
00:01:08,960 --> 00:01:10,720
identifying a bunch of vulnerabilities

34
00:01:10,720 --> 00:01:12,960
before i start even properly looking for

35
00:01:12,960 --> 00:01:14,880
them i'm going to start getting excited

36
00:01:14,880 --> 00:01:16,960
and i'll be a lot more motivated to dig

37
00:01:16,960 --> 00:01:19,600
deep looking for interesting findings

38
00:01:19,600 --> 00:01:21,360
but if i'm poking around for a bit and

39
00:01:21,360 --> 00:01:23,040
it's apparent that the development team

40
00:01:23,040 --> 00:01:25,200
has things buttoned up really well and i

41
00:01:25,200 --> 00:01:26,560
can already tell

42
00:01:26,560 --> 00:01:28,080
that i'm not going to find any one thing

43
00:01:28,080 --> 00:01:30,479
here it's just i'm in for a real boring

44
00:01:30,479 --> 00:01:31,920
week of testing

45
00:01:31,920 --> 00:01:33,600
um and by the way some colleagues of

46
00:01:33,600 --> 00:01:35,040
mine did a really good talk about this

47
00:01:35,040 --> 00:01:36,880
phenomenon at derby con a few years ago

48
00:01:36,880 --> 00:01:39,439
the qr code down below there will take

49
00:01:39,439 --> 00:01:41,520
you to their talk

50
00:01:41,520 --> 00:01:43,280
just a couple of seconds in case anyone

51
00:01:43,280 --> 00:01:44,799
wants to take a picture

52
00:01:44,799 --> 00:01:46,640
and moving on so these slides will be

53
00:01:46,640 --> 00:01:48,399
available also so don't worry if i go a

54
00:01:48,399 --> 00:01:50,079
little too fast we'll get there in a

55
00:01:50,079 --> 00:01:51,040
second

56
00:01:51,040 --> 00:01:53,200
so the findings i noticed during recon i

57
00:01:53,200 --> 00:01:54,960
call it low hanging fruit i think most

58
00:01:54,960 --> 00:01:56,320
people call them low hanging fruit

59
00:01:56,320 --> 00:01:57,920
they're easily detected findings that

60
00:01:57,920 --> 00:02:00,560
are very easy to fix when i see them i

61
00:02:00,560 --> 00:02:02,719
can almost like start cold reading this

62
00:02:02,719 --> 00:02:04,640
application like okay the devs they

63
00:02:04,640 --> 00:02:06,000
don't know how to write secure code the

64
00:02:06,000 --> 00:02:08,318
app hasn't had a pen test before i'm

65
00:02:08,318 --> 00:02:09,758
going to find a lot of interesting stuff

66
00:02:09,758 --> 00:02:11,840
by the time i'm finished

67
00:02:11,840 --> 00:02:12,959
so

68
00:02:12,959 --> 00:02:15,840
i'm getting curious how broken is this

69
00:02:15,840 --> 00:02:17,520
app really

70
00:02:17,520 --> 00:02:18,400
so

71
00:02:18,400 --> 00:02:20,560
this can be too much of a good thing

72
00:02:20,560 --> 00:02:22,400
when i've had a dozen low-risk findings

73
00:02:22,400 --> 00:02:23,920
that i need to put into a report after

74
00:02:23,920 --> 00:02:25,680
i'm done testing i start to get grumpy

75
00:02:25,680 --> 00:02:28,400
and not just because of my rsi

76
00:02:28,400 --> 00:02:30,160
then i gotta do a readout call and take

77
00:02:30,160 --> 00:02:32,000
45 minutes explaining to the dev team

78
00:02:32,000 --> 00:02:33,760
why they need to fix a bunch of issues

79
00:02:33,760 --> 00:02:36,160
that can't probably even be exploited to

80
00:02:36,160 --> 00:02:38,239
cause real harm to their customers but

81
00:02:38,239 --> 00:02:39,920
still nobody likes to get a report

82
00:02:39,920 --> 00:02:41,519
filled with things they need to address

83
00:02:41,519 --> 00:02:43,599
especially if there's a go live deadline

84
00:02:43,599 --> 00:02:45,280
coming up

85
00:02:45,280 --> 00:02:46,560
so

86
00:02:46,560 --> 00:02:48,720
this report has 20 findings this is a

87
00:02:48,720 --> 00:02:50,400
real report i did years ago

88
00:02:50,400 --> 00:02:51,680
there's a critical there's a high

89
00:02:51,680 --> 00:02:53,280
there's three mediums there's 11 lows

90
00:02:53,280 --> 00:02:55,360
there's four infos look how many of

91
00:02:55,360 --> 00:02:57,200
these low hanging fruit findings can be

92
00:02:57,200 --> 00:02:59,519
easily detected with free tools and

93
00:02:59,519 --> 00:03:01,599
minimal hacking experience and gotten

94
00:03:01,599 --> 00:03:04,720
rid of before we even start the pen test

95
00:03:04,720 --> 00:03:07,599
so we both want the same thing help me

96
00:03:07,599 --> 00:03:10,159
help you uh let's work together to get

97
00:03:10,159 --> 00:03:13,120
rid of that low hanging fruit and

98
00:03:13,120 --> 00:03:15,280
make everyone's day and weak

99
00:03:15,280 --> 00:03:19,040
and after the week a lot easier

100
00:03:19,040 --> 00:03:20,560
so i'll be spending a lot less time

101
00:03:20,560 --> 00:03:22,000
writing reports and a lot more time

102
00:03:22,000 --> 00:03:24,319
hacking you'll get a cleaner report and

103
00:03:24,319 --> 00:03:26,080
you'll spend less time fixing issues and

104
00:03:26,080 --> 00:03:27,440
you won't have to worry about randos

105
00:03:27,440 --> 00:03:28,959
calling you out on the bird site saying

106
00:03:28,959 --> 00:03:30,720
your website poses a grave existential

107
00:03:30,720 --> 00:03:32,080
risk to its users because you're missing

108
00:03:32,080 --> 00:03:34,720
hsts and csp response headers

109
00:03:34,720 --> 00:03:36,799
to that end i've created a big ass

110
00:03:36,799 --> 00:03:38,879
checklist everything you need all in one

111
00:03:38,879 --> 00:03:40,480
place

112
00:03:40,480 --> 00:03:41,360
so

113
00:03:41,360 --> 00:03:43,440
use that qr code to get a copy of this

114
00:03:43,440 --> 00:03:45,760
checklist as a google sheets file

115
00:03:45,760 --> 00:03:47,360
that code also takes you to copy this

116
00:03:47,360 --> 00:03:49,680
very slide deck i will leave this on the

117
00:03:49,680 --> 00:03:52,239
screen for approximately 10 seconds

118
00:03:52,239 --> 00:03:54,640
and then we'll move on

119
00:03:54,640 --> 00:03:56,239
and i'm gonna i don't actually have any

120
00:03:56,239 --> 00:03:57,599
more to say here

121
00:03:57,599 --> 00:03:59,519
so i'm going to sit in awkward silence

122
00:03:59,519 --> 00:04:02,400
for five seconds

123
00:04:03,840 --> 00:04:05,439
all right moving on

124
00:04:05,439 --> 00:04:07,360
so what is it going to take to make this

125
00:04:07,360 --> 00:04:09,920
happen honestly just a handful of free

126
00:04:09,920 --> 00:04:11,040
tools

127
00:04:11,040 --> 00:04:12,720
so before i go any further i do want to

128
00:04:12,720 --> 00:04:14,239
address the fact there's a lot of tools

129
00:04:14,239 --> 00:04:15,680
out there that can do the same things

130
00:04:15,680 --> 00:04:17,600
that these tools do if you want to use

131
00:04:17,600 --> 00:04:19,358
those instead be my guest these are just

132
00:04:19,358 --> 00:04:22,079
the ones that work the best for me

133
00:04:22,079 --> 00:04:24,080
burp suite community edition is going to

134
00:04:24,080 --> 00:04:26,880
be the first and most relied on tool

135
00:04:26,880 --> 00:04:29,520
here it is a swiss army chainsaw at its

136
00:04:29,520 --> 00:04:31,199
heart it's an intercepting proxy but it

137
00:04:31,199 --> 00:04:32,960
can do a ton more

138
00:04:32,960 --> 00:04:34,960
we'll use the free community edition but

139
00:04:34,960 --> 00:04:36,560
if you want to go for the paid version

140
00:04:36,560 --> 00:04:39,199
it's even more overpowered the qr code

141
00:04:39,199 --> 00:04:40,479
right there takes you to their getting

142
00:04:40,479 --> 00:04:43,360
started guide which is super helpful

143
00:04:43,360 --> 00:04:45,360
uh what is an intercepting proxy think

144
00:04:45,360 --> 00:04:47,360
of it like a mail inspector who can open

145
00:04:47,360 --> 00:04:48,880
up any message and read it before

146
00:04:48,880 --> 00:04:50,720
sending it on to the recipient but this

147
00:04:50,720 --> 00:04:52,560
mail inspector can also secretly change

148
00:04:52,560 --> 00:04:55,759
any part of those messages too

149
00:04:55,759 --> 00:04:57,919
kali linux is a free linux distro

150
00:04:57,919 --> 00:04:59,919
specifically made for pen testers now

151
00:04:59,919 --> 00:05:01,360
you can download and run it in a virtual

152
00:05:01,360 --> 00:05:02,960
machine you can install in the windows

153
00:05:02,960 --> 00:05:04,560
subsystem for linux and i think there's

154
00:05:04,560 --> 00:05:06,240
like five other ways to install it as

155
00:05:06,240 --> 00:05:09,840
well qr code takes you to get kali

156
00:05:09,840 --> 00:05:11,520
it's important to note that no scanner

157
00:05:11,520 --> 00:05:13,840
is 100 accurate getting a bunch of false

158
00:05:13,840 --> 00:05:15,440
positives and your scanner output is

159
00:05:15,440 --> 00:05:17,039
expected it's part of the game so it's

160
00:05:17,039 --> 00:05:18,479
up to you to make sure the stuff the

161
00:05:18,479 --> 00:05:20,560
scanner finds actually exists in your

162
00:05:20,560 --> 00:05:23,600
web app google is your friend and also

163
00:05:23,600 --> 00:05:25,840
stack overflow

164
00:05:25,840 --> 00:05:27,120
so

165
00:05:27,120 --> 00:05:29,280
we have 47 items in this checklist and

166
00:05:29,280 --> 00:05:30,960
we have 25 minutes to get through them

167
00:05:30,960 --> 00:05:32,240
all so we're going to do this like we're

168
00:05:32,240 --> 00:05:34,160
on the gong show i'm going to blast

169
00:05:34,160 --> 00:05:35,520
through these vulnerabilities until i

170
00:05:35,520 --> 00:05:37,360
run out of time and they cut my feed

171
00:05:37,360 --> 00:05:39,120
once again you can use that qr code to

172
00:05:39,120 --> 00:05:40,320
get a copy of both the defender

173
00:05:40,320 --> 00:05:42,080
checklist you saw and the slide deck and

174
00:05:42,080 --> 00:05:43,199
i'll be hanging out in the discord

175
00:05:43,199 --> 00:05:44,720
server for the rest of the con you can

176
00:05:44,720 --> 00:05:47,360
always just ping me on twitter

177
00:05:47,360 --> 00:05:48,160
so

178
00:05:48,160 --> 00:05:49,840
first off we're going to use nmap's

179
00:05:49,840 --> 00:05:52,000
simplest mode where you point out a host

180
00:05:52,000 --> 00:05:53,919
and it detects all open ports this is

181
00:05:53,919 --> 00:05:55,759
useful for discovering services that are

182
00:05:55,759 --> 00:05:57,360
exposed to the internet that very much

183
00:05:57,360 --> 00:05:59,520
should not be exposed to the internet

184
00:05:59,520 --> 00:06:01,039
for example you do not want to see

185
00:06:01,039 --> 00:06:02,479
remote desktop

186
00:06:02,479 --> 00:06:04,880
exposed to the internet ever

187
00:06:04,880 --> 00:06:07,120
one cool thing about nmap is scripting

188
00:06:07,120 --> 00:06:09,120
engine which turns port scanning tool

189
00:06:09,120 --> 00:06:11,199
into an everything scanning tool and in

190
00:06:11,199 --> 00:06:12,800
this case we're going to use the ssl and

191
00:06:12,800 --> 00:06:14,800
m cipher script to check on the tls

192
00:06:14,800 --> 00:06:16,880
protocols and ciphers of the target

193
00:06:16,880 --> 00:06:18,880
we only want to see modern tls versions

194
00:06:18,880 --> 00:06:21,360
in use and strong encryption ciphers

195
00:06:21,360 --> 00:06:22,880
outdated or weak

196
00:06:22,880 --> 00:06:25,919
ssl or tls protocols and weak ciphers

197
00:06:25,919 --> 00:06:27,440
generally going to be all low risk

198
00:06:27,440 --> 00:06:29,199
unless you find things like null ciphers

199
00:06:29,199 --> 00:06:31,919
or real low

200
00:06:32,240 --> 00:06:36,319
low bit keys so on the left we see tls

201
00:06:36,319 --> 00:06:39,520
1.2 in use with strong ciphers good on

202
00:06:39,520 --> 00:06:40,479
the right

203
00:06:40,479 --> 00:06:44,000
ssl v3 and tls v1 outdated not good weak

204
00:06:44,000 --> 00:06:45,840
dust ciphers not good that's only a

205
00:06:45,840 --> 00:06:47,680
couple of lows but they're not hard to

206
00:06:47,680 --> 00:06:49,919
fix and that'll get you rid of like one

207
00:06:49,919 --> 00:06:51,599
or two or maybe even three depending on

208
00:06:51,599 --> 00:06:52,639
how the

209
00:06:52,639 --> 00:06:55,440
tester is feeling that day findings

210
00:06:55,440 --> 00:06:57,039
nicto is another free open source

211
00:06:57,039 --> 00:06:59,520
automated tool it is specifically a web

212
00:06:59,520 --> 00:07:00,960
app scanner it's very good at finding

213
00:07:00,960 --> 00:07:02,800
basic vulnerabilities and interesting

214
00:07:02,800 --> 00:07:03,840
content

215
00:07:03,840 --> 00:07:05,120
it's very good at calling out missing

216
00:07:05,120 --> 00:07:06,960
security headers exposed admin

217
00:07:06,960 --> 00:07:09,280
interfaces hidden content directory

218
00:07:09,280 --> 00:07:11,520
listings outdated software just make

219
00:07:11,520 --> 00:07:12,960
sure you verify that each finding

220
00:07:12,960 --> 00:07:14,800
actually exists um there are false

221
00:07:14,800 --> 00:07:16,800
positives

222
00:07:16,800 --> 00:07:18,319
cmc or

223
00:07:18,319 --> 00:07:20,960
cms seek it's a free open source scanner

224
00:07:20,960 --> 00:07:22,479
focus on cms frameworks it'll

225
00:07:22,479 --> 00:07:24,560
fingerprint a cms in use

226
00:07:24,560 --> 00:07:26,240
also what plugins are installed it'll

227
00:07:26,240 --> 00:07:27,840
retrieve versions of everything it finds

228
00:07:27,840 --> 00:07:29,840
it'll look for public vulnerabilities

229
00:07:29,840 --> 00:07:31,599
they'll even try to harvest usernames

230
00:07:31,599 --> 00:07:33,840
for you once again make sure to verify

231
00:07:33,840 --> 00:07:35,280
any vulnerabilities that it claims it

232
00:07:35,280 --> 00:07:36,880
finds

233
00:07:36,880 --> 00:07:39,039
finally like i said verb suites free

234
00:07:39,039 --> 00:07:40,160
community edition is going to be the

235
00:07:40,160 --> 00:07:41,759
thing we use the most

236
00:07:41,759 --> 00:07:44,400
we'll use to crawl through our web app

237
00:07:44,400 --> 00:07:46,080
so when you click a link in your browser

238
00:07:46,080 --> 00:07:47,599
the browser is going to send a request

239
00:07:47,599 --> 00:07:49,599
to burp instead of the web server burp

240
00:07:49,599 --> 00:07:51,360
will record that and then it's going to

241
00:07:51,360 --> 00:07:53,360
send it on same with when it comes back

242
00:07:53,360 --> 00:07:55,199
the request hits burp suite or if we'll

243
00:07:55,199 --> 00:07:56,960
record it send it on to you so you

244
00:07:56,960 --> 00:07:59,120
actually generate this proxy history so

245
00:07:59,120 --> 00:08:00,400
you can always go back through

246
00:08:00,400 --> 00:08:02,080
everything you did and look back and see

247
00:08:02,080 --> 00:08:03,759
what the request and the response were

248
00:08:03,759 --> 00:08:05,919
and it's super helpful

249
00:08:05,919 --> 00:08:07,599
now the best thing burp can do though is

250
00:08:07,599 --> 00:08:09,440
intercept that request and let you

251
00:08:09,440 --> 00:08:11,360
modify it before it sends it onto the

252
00:08:11,360 --> 00:08:13,120
server which lets you bypass all sorts

253
00:08:13,120 --> 00:08:15,680
of client-side controls from form length

254
00:08:15,680 --> 00:08:17,759
and type limitations to javascript input

255
00:08:17,759 --> 00:08:19,440
sanitization and more

256
00:08:19,440 --> 00:08:21,520
it also nowadays includes a chromium

257
00:08:21,520 --> 00:08:23,520
browser with it just bundle along with

258
00:08:23,520 --> 00:08:24,639
it

259
00:08:24,639 --> 00:08:26,800
you don't need to mess with

260
00:08:26,800 --> 00:08:27,919
uh

261
00:08:27,919 --> 00:08:29,599
proxies and proxy chains and anything

262
00:08:29,599 --> 00:08:31,599
like that in the english language cannot

263
00:08:31,599 --> 00:08:33,919
doesn't contain words they can describe

264
00:08:33,919 --> 00:08:35,519
just how helpful this is to a pentester

265
00:08:35,519 --> 00:08:37,760
to have a built-in chromium browser so

266
00:08:37,760 --> 00:08:39,279
you launch your browser navigate through

267
00:08:39,279 --> 00:08:41,360
your app sign in click the links add

268
00:08:41,360 --> 00:08:43,760
content change content log out log in go

269
00:08:43,760 --> 00:08:45,200
through the whole light day in the life

270
00:08:45,200 --> 00:08:47,360
of a typical user so everything gets

271
00:08:47,360 --> 00:08:48,800
recorded for you and that's gonna be our

272
00:08:48,800 --> 00:08:51,040
main tool for the rest of the talk

273
00:08:51,040 --> 00:08:52,640
so right off the bat just gonna put this

274
00:08:52,640 --> 00:08:54,560
out there in the year of our lord 2021

275
00:08:54,560 --> 00:08:56,320
there is absolutely no excuse for a live

276
00:08:56,320 --> 00:08:57,760
application on the internet not to use

277
00:08:57,760 --> 00:09:00,560
https and tls to encrypt network traffic

278
00:09:00,560 --> 00:09:02,240
back in 98 you can complain that it

279
00:09:02,240 --> 00:09:04,000
slows down your site but these days we

280
00:09:04,000 --> 00:09:06,000
don't use 56k modems to surf the

281
00:09:06,000 --> 00:09:08,240
information superhighway anymore even if

282
00:09:08,240 --> 00:09:09,519
you're not submitting sensitive

283
00:09:09,519 --> 00:09:11,760
information enable tls anyway there's

284
00:09:11,760 --> 00:09:13,200
plenty of free options out there pick

285
00:09:13,200 --> 00:09:14,800
one and go with it if i see a website

286
00:09:14,800 --> 00:09:16,240
without https that's going to be a

287
00:09:16,240 --> 00:09:17,519
medium risk or even a high risk

288
00:09:17,519 --> 00:09:20,240
depending on what i find in it

289
00:09:20,240 --> 00:09:22,480
hsts is a server response header sent to

290
00:09:22,480 --> 00:09:23,839
your browser when you first access the

291
00:09:23,839 --> 00:09:25,760
site it tells a browser that it should

292
00:09:25,760 --> 00:09:26,959
remember the site should only be

293
00:09:26,959 --> 00:09:28,880
accessed using https which makes it

294
00:09:28,880 --> 00:09:30,560
harder to get tricked into accessing the

295
00:09:30,560 --> 00:09:31,920
unencrypted version

296
00:09:31,920 --> 00:09:33,760
so if you're using https like you're

297
00:09:33,760 --> 00:09:34,880
supposed to

298
00:09:34,880 --> 00:09:36,800
it's a good idea to put hsts header in

299
00:09:36,800 --> 00:09:38,800
there as well

300
00:09:38,800 --> 00:09:40,800
by default many frameworks web servers

301
00:09:40,800 --> 00:09:42,560
are configured to disclose their backend

302
00:09:42,560 --> 00:09:44,080
and server types and versions in the

303
00:09:44,080 --> 00:09:45,519
response headers that's not a

304
00:09:45,519 --> 00:09:46,959
vulnerability on its own but it tells an

305
00:09:46,959 --> 00:09:49,120
attacker more than they need to know

306
00:09:49,120 --> 00:09:50,959
if you're running out of date software a

307
00:09:50,959 --> 00:09:52,720
you shouldn't be and b you don't want to

308
00:09:52,720 --> 00:09:54,080
tell everyone who visits your site that

309
00:09:54,080 --> 00:09:55,680
you're running out of dates out of date

310
00:09:55,680 --> 00:09:57,600
software just get rid of the headers or

311
00:09:57,600 --> 00:09:58,800
change them to something cheeky if

312
00:09:58,800 --> 00:10:00,800
that's your thing

313
00:10:00,800 --> 00:10:03,120
autocomplete not a big deal these days

314
00:10:03,120 --> 00:10:05,120
um the problem is that a browser could

315
00:10:05,120 --> 00:10:06,959
store your credentials unencrypted if

316
00:10:06,959 --> 00:10:08,880
you didn't explicitly set autocomplete

317
00:10:08,880 --> 00:10:10,959
equals off in the html element of your

318
00:10:10,959 --> 00:10:13,120
login form or your password field which

319
00:10:13,120 --> 00:10:14,640
if someone gets a hold of your computer

320
00:10:14,640 --> 00:10:16,800
then they can export those passwords but

321
00:10:16,800 --> 00:10:18,399
nowadays that's kind of normal

322
00:10:18,399 --> 00:10:20,320
functionality because all the browsers

323
00:10:20,320 --> 00:10:22,560
have

324
00:10:22,800 --> 00:10:25,279
password managers anyway so

325
00:10:25,279 --> 00:10:26,640
this when you see it in your report it's

326
00:10:26,640 --> 00:10:27,839
because someone wanted to pad their

327
00:10:27,839 --> 00:10:29,839
report with additional findings if you

328
00:10:29,839 --> 00:10:31,440
just set autocomplete equals off they

329
00:10:31,440 --> 00:10:33,760
won't be able to do that to you

330
00:10:33,760 --> 00:10:35,360
when an application returns different

331
00:10:35,360 --> 00:10:37,279
messages to a user who tries to log in

332
00:10:37,279 --> 00:10:39,279
with an existing and a non-existent

333
00:10:39,279 --> 00:10:40,320
username

334
00:10:40,320 --> 00:10:41,920
they can brute force the login page to

335
00:10:41,920 --> 00:10:43,920
harvest valid usernames just by saying

336
00:10:43,920 --> 00:10:46,480
okay i sent bobbitbob.com that gave me

337
00:10:46,480 --> 00:10:49,920
an invalid okay um i sent you know

338
00:10:49,920 --> 00:10:52,000
ben whatever that that one says that one

339
00:10:52,000 --> 00:10:53,600
did let me in whereas it says the user

340
00:10:53,600 --> 00:10:55,440
didn't exist for the previous one okay

341
00:10:55,440 --> 00:10:57,360
we're just gonna start building a table

342
00:10:57,360 --> 00:10:58,800
so the easiest way to fix this is just

343
00:10:58,800 --> 00:11:01,279
use a generic

344
00:11:01,279 --> 00:11:03,440
generic error message sorry username and

345
00:11:03,440 --> 00:11:05,760
password you entered isn't correct users

346
00:11:05,760 --> 00:11:08,160
hate that but hackers hate it more

347
00:11:08,160 --> 00:11:09,519
occasionally you'll find a web app that

348
00:11:09,519 --> 00:11:11,440
does weird transforms on user passwords

349
00:11:11,440 --> 00:11:12,800
before they're compared to credentials

350
00:11:12,800 --> 00:11:15,360
on file this can create a case where you

351
00:11:15,360 --> 00:11:16,720
can log in with both an uppercase and

352
00:11:16,720 --> 00:11:18,320
lowercase version of your password even

353
00:11:18,320 --> 00:11:20,399
if or even if you have some characters

354
00:11:20,399 --> 00:11:21,600
missing at the end of your password it

355
00:11:21,600 --> 00:11:23,279
might still let you in

356
00:11:23,279 --> 00:11:24,399
these are the things that make pen

357
00:11:24,399 --> 00:11:26,160
testers start wondering what other weird

358
00:11:26,160 --> 00:11:27,600
password things are happening behind the

359
00:11:27,600 --> 00:11:28,399
scenes

360
00:11:28,399 --> 00:11:29,839
are you guys actually storing passwords

361
00:11:29,839 --> 00:11:31,440
instead of just the hashes are the

362
00:11:31,440 --> 00:11:33,120
passwords being stored truncated like

363
00:11:33,120 --> 00:11:34,000
what's

364
00:11:34,000 --> 00:11:36,800
this i need to dig further

365
00:11:36,800 --> 00:11:37,839
this

366
00:11:37,839 --> 00:11:41,279
this should never ever happen

367
00:11:41,279 --> 00:11:43,760
um this finding here is my magic pie

368
00:11:43,760 --> 00:11:45,600
bush one of my first pen tests i ever

369
00:11:45,600 --> 00:11:47,279
did is for a u.s federal government

370
00:11:47,279 --> 00:11:49,200
ecommerce web app i was able to log in

371
00:11:49,200 --> 00:11:51,200
with uh any existing username as long as

372
00:11:51,200 --> 00:11:53,519
i put it asterisk in the password field

373
00:11:53,519 --> 00:11:55,519
i've never seen this issue again but i

374
00:11:55,519 --> 00:11:57,440
will closely inspect every application i

375
00:11:57,440 --> 00:11:58,720
see in here

376
00:11:58,720 --> 00:12:01,120
until the end of time

377
00:12:01,120 --> 00:12:02,800
logging with wildcard characters instead

378
00:12:02,800 --> 00:12:04,000
of a password is an indication that

379
00:12:04,000 --> 00:12:05,760
something's horribly wrong with the

380
00:12:05,760 --> 00:12:08,240
authentication mechanism so

381
00:12:08,240 --> 00:12:09,360
if you're going to be trying any of

382
00:12:09,360 --> 00:12:11,279
these password shenanigans just remember

383
00:12:11,279 --> 00:12:13,200
to uh

384
00:12:13,200 --> 00:12:14,720
get you know

385
00:12:14,720 --> 00:12:16,959
get it invalid login okay once twice

386
00:12:16,959 --> 00:12:18,800
maybe and then log in with your correct

387
00:12:18,800 --> 00:12:20,560
password so you don't lock yourself out

388
00:12:20,560 --> 00:12:21,680
and have to get a hold of the client

389
00:12:21,680 --> 00:12:24,320
have them unlock you

390
00:12:24,320 --> 00:12:26,560
if you see an http 200 response to a

391
00:12:26,560 --> 00:12:28,480
successful login the browser might

392
00:12:28,480 --> 00:12:29,920
actually be caching that request in your

393
00:12:29,920 --> 00:12:31,519
credentials along with it those are

394
00:12:31,519 --> 00:12:33,200
getting stored in plain text someone who

395
00:12:33,200 --> 00:12:35,279
has access to that server can harvest

396
00:12:35,279 --> 00:12:37,519
those credentials return a 302 and

397
00:12:37,519 --> 00:12:39,200
redirect the user to their correct page

398
00:12:39,200 --> 00:12:41,519
and you won't have that issue

399
00:12:41,519 --> 00:12:43,279
when a user logs in with http get

400
00:12:43,279 --> 00:12:45,120
instead of post those creds are passed

401
00:12:45,120 --> 00:12:47,120
the url query string instead of the post

402
00:12:47,120 --> 00:12:48,959
body where they're supposed to go so if

403
00:12:48,959 --> 00:12:51,279
you have https enabled those query

404
00:12:51,279 --> 00:12:53,440
string parameters are encrypted if not

405
00:12:53,440 --> 00:12:54,880
that's going to raise the risk of this

406
00:12:54,880 --> 00:12:56,880
finding but the usual danger here is

407
00:12:56,880 --> 00:12:58,240
that the receiving server might be

408
00:12:58,240 --> 00:13:01,200
storing plain text urls in a log file so

409
00:13:01,200 --> 00:13:02,880
those credentials can be recovered or if

410
00:13:02,880 --> 00:13:04,240
there's like a year behind a corporate

411
00:13:04,240 --> 00:13:06,480
https proxy the proxy might also be

412
00:13:06,480 --> 00:13:10,079
storing that stuff on encrypted as well

413
00:13:11,279 --> 00:13:12,560
so it's not the end of the world

414
00:13:12,560 --> 00:13:14,079
applications transmitting credentials

415
00:13:14,079 --> 00:13:16,079
that were basic off if it's also using

416
00:13:16,079 --> 00:13:18,079
https are you seeing a pattern here

417
00:13:18,079 --> 00:13:19,760
there's also like even if it is though

418
00:13:19,760 --> 00:13:20,880
there's still a number of reasons why

419
00:13:20,880 --> 00:13:22,240
basic author is less secure and

420
00:13:22,240 --> 00:13:23,760
therefore will get called out if you're

421
00:13:23,760 --> 00:13:26,079
using that instead of forms based uh for

422
00:13:26,079 --> 00:13:28,240
one the credentials are base64 encoded

423
00:13:28,240 --> 00:13:29,920
which is not human readable but it's

424
00:13:29,920 --> 00:13:32,399
trivial to convert it to plain text

425
00:13:32,399 --> 00:13:33,920
uh the password is sent repeatedly for

426
00:13:33,920 --> 00:13:35,839
each request which makes a larger attack

427
00:13:35,839 --> 00:13:36,720
window

428
00:13:36,720 --> 00:13:38,079
the password is cached or stored

429
00:13:38,079 --> 00:13:40,800
permanently by the browser um there's no

430
00:13:40,800 --> 00:13:42,560
way to really log out of the application

431
00:13:42,560 --> 00:13:45,040
or to lock a user out there are ways but

432
00:13:45,040 --> 00:13:46,399
there's no easy way to do it like there

433
00:13:46,399 --> 00:13:48,800
is with forms based and once again if

434
00:13:48,800 --> 00:13:50,320
you're behind a corporate proxy it might

435
00:13:50,320 --> 00:13:52,800
store your credentials

436
00:13:52,800 --> 00:13:55,120
uh cookie options the secure cookie flag

437
00:13:55,120 --> 00:13:56,560
tells the browser not to send cookies

438
00:13:56,560 --> 00:13:59,279
over an insecure non-https connection

439
00:13:59,279 --> 00:14:00,880
like if you remember back in 2010

440
00:14:00,880 --> 00:14:02,639
facebook required users to log in over

441
00:14:02,639 --> 00:14:05,199
https but it allowed cookies to be sent

442
00:14:05,199 --> 00:14:07,839
unencrypted so if you use the firesheep

443
00:14:07,839 --> 00:14:09,920
browser plugin while on shared wi-fi in

444
00:14:09,920 --> 00:14:11,360
a coffee shop or cafe you could just

445
00:14:11,360 --> 00:14:12,880
hijack someone's facebook session just

446
00:14:12,880 --> 00:14:15,120
by sniffing the unencrypted cookies

447
00:14:15,120 --> 00:14:16,880
setting secure on a cookie will avoid

448
00:14:16,880 --> 00:14:17,680
that

449
00:14:17,680 --> 00:14:19,680
http only cookie tells your browser not

450
00:14:19,680 --> 00:14:21,360
to send cookies over any protocol other

451
00:14:21,360 --> 00:14:22,720
than http

452
00:14:22,720 --> 00:14:24,000
so if you

453
00:14:24,000 --> 00:14:26,160
um you're you're you have a user who

454
00:14:26,160 --> 00:14:27,680
falls victim to a cross-site scripting

455
00:14:27,680 --> 00:14:29,760
attack on your web page

456
00:14:29,760 --> 00:14:32,240
the attacker might be able to pull their

457
00:14:32,240 --> 00:14:34,480
session id using javascript if you have

458
00:14:34,480 --> 00:14:36,959
http only set that prevents that so it's

459
00:14:36,959 --> 00:14:38,800
kind of defense in depth against h

460
00:14:38,800 --> 00:14:40,240
alright against

461
00:14:40,240 --> 00:14:42,160
cross-site scripting

462
00:14:42,160 --> 00:14:43,920
but regardless of cookie flags you don't

463
00:14:43,920 --> 00:14:45,440
ever want to see sensitive data on

464
00:14:45,440 --> 00:14:47,120
cookies don't don't ever put sensitive

465
00:14:47,120 --> 00:14:49,839
data in cookies just don't

466
00:14:49,839 --> 00:14:52,079
um session trapping and session fixation

467
00:14:52,079 --> 00:14:54,720
are really easy to mix up um and i've

468
00:14:54,720 --> 00:14:55,839
worked at places that use them

469
00:14:55,839 --> 00:14:57,279
interchangeably but here's how i

470
00:14:57,279 --> 00:14:58,880
understand them

471
00:14:58,880 --> 00:15:00,240
with session trapping when you first

472
00:15:00,240 --> 00:15:02,720
browse to a login page sometimes you'll

473
00:15:02,720 --> 00:15:04,560
get a session id placed in your browser

474
00:15:04,560 --> 00:15:06,800
before you're authenticated when you log

475
00:15:06,800 --> 00:15:09,440
in that i that session id is supposed to

476
00:15:09,440 --> 00:15:10,639
change so you're not using the same

477
00:15:10,639 --> 00:15:12,160
cookie value you had when you were

478
00:15:12,160 --> 00:15:14,399
unauthenticated if it doesn't change

479
00:15:14,399 --> 00:15:16,560
there's a danger an attacker doing like

480
00:15:16,560 --> 00:15:18,880
a kiosk attack or something where

481
00:15:18,880 --> 00:15:20,639
they can go to a public machine browse

482
00:15:20,639 --> 00:15:22,160
to your site and then leave and just

483
00:15:22,160 --> 00:15:22,959
wait

484
00:15:22,959 --> 00:15:24,560
after they made a note of the cookie

485
00:15:24,560 --> 00:15:27,040
they got then someone walks in

486
00:15:27,040 --> 00:15:29,199
walks up to the kiosk they'll log in to

487
00:15:29,199 --> 00:15:31,040
the site

488
00:15:31,040 --> 00:15:32,720
that password sorry that cookie value

489
00:15:32,720 --> 00:15:34,160
doesn't get changed and you know what it

490
00:15:34,160 --> 00:15:35,920
is so you can go ahead and hijack their

491
00:15:35,920 --> 00:15:36,959
session

492
00:15:36,959 --> 00:15:38,800
session fixation allows you to actively

493
00:15:38,800 --> 00:15:41,360
change the session id to an arbitrary

494
00:15:41,360 --> 00:15:42,959
value which isn't a huge problem by

495
00:15:42,959 --> 00:15:44,959
itself but if you have both session

496
00:15:44,959 --> 00:15:48,160
fixation and session trapping on your um

497
00:15:48,160 --> 00:15:50,079
your web page then you've got a real fun

498
00:15:50,079 --> 00:15:51,360
phishing attack

499
00:15:51,360 --> 00:15:52,480
so like let's say you want to take

500
00:15:52,480 --> 00:15:53,920
advantage of that combo on a home

501
00:15:53,920 --> 00:15:56,000
banking site you visit the site get your

502
00:15:56,000 --> 00:15:57,279
session id assigned to your browser

503
00:15:57,279 --> 00:15:58,800
before you're logged in make a note of

504
00:15:58,800 --> 00:16:01,120
that id and then send an email to a

505
00:16:01,120 --> 00:16:02,800
customer saying like sign up for our

506
00:16:02,800 --> 00:16:04,720
bank's iphone giveaway and send them a

507
00:16:04,720 --> 00:16:06,800
link saying you know a question mark

508
00:16:06,800 --> 00:16:09,279
session id equals whatever the id is

509
00:16:09,279 --> 00:16:11,360
um because it's vulnerable to both those

510
00:16:11,360 --> 00:16:13,199
things it's going to assign the victim

511
00:16:13,199 --> 00:16:16,240
the session id you specified and now you

512
00:16:16,240 --> 00:16:18,079
know the session id you're they're using

513
00:16:18,079 --> 00:16:20,480
because you gave it to them

514
00:16:20,480 --> 00:16:22,320
logging a user out of a web app is a

515
00:16:22,320 --> 00:16:24,480
two-step process step one invalidate the

516
00:16:24,480 --> 00:16:26,480
session id on the user's browser usually

517
00:16:26,480 --> 00:16:28,639
by deleting the cookie or by setting a

518
00:16:28,639 --> 00:16:30,639
new session cookie in their browser step

519
00:16:30,639 --> 00:16:32,639
two is to get rid of it on the server as

520
00:16:32,639 --> 00:16:34,240
well a surprising number of websites

521
00:16:34,240 --> 00:16:36,000
forget that second part the server still

522
00:16:36,000 --> 00:16:37,600
considers the old session to be active

523
00:16:37,600 --> 00:16:39,519
even after a log out which is great for

524
00:16:39,519 --> 00:16:41,440
me if i'm an attacker who hijacks

525
00:16:41,440 --> 00:16:43,199
someone's session because i'm still

526
00:16:43,199 --> 00:16:46,160
logged in even after they log out

527
00:16:46,160 --> 00:16:48,320
so story time here i once worked at a

528
00:16:48,320 --> 00:16:50,480
place where i tested a very large bank's

529
00:16:50,480 --> 00:16:51,920
home banking website as part of my

530
00:16:51,920 --> 00:16:53,360
testing i made sure that when i clicked

531
00:16:53,360 --> 00:16:55,600
log out i couldn't reuse my old session

532
00:16:55,600 --> 00:16:58,160
cookies they did indeed nuke the value

533
00:16:58,160 --> 00:17:00,800
on server n2 about 10 months later some

534
00:17:00,800 --> 00:17:02,560
independent security researcher posted a

535
00:17:02,560 --> 00:17:04,240
youtube video claiming here's how you

536
00:17:04,240 --> 00:17:05,439
can log into your own banking account

537
00:17:05,439 --> 00:17:07,439
without your password what he did is he

538
00:17:07,439 --> 00:17:09,119
saved a session cookie and logged out

539
00:17:09,119 --> 00:17:10,559
then he put that session cookie back in

540
00:17:10,559 --> 00:17:12,559
his browser later and now you can log in

541
00:17:12,559 --> 00:17:14,799
without your password so the bank got

542
00:17:14,799 --> 00:17:16,720
real mad about this and demanded us know

543
00:17:16,720 --> 00:17:18,160
how we missed it in our testing so i

544
00:17:18,160 --> 00:17:20,319
ended up having to show my supervisor

545
00:17:20,319 --> 00:17:22,640
and his supervisor my burp suite proxy

546
00:17:22,640 --> 00:17:24,959
logs that i saved uh remember when i

547
00:17:24,959 --> 00:17:26,319
said burp saves all the requests and

548
00:17:26,319 --> 00:17:28,079
responses that turns out it's a

549
00:17:28,079 --> 00:17:30,080
lifesaver because i could prove that it

550
00:17:30,080 --> 00:17:32,240
did indeed not have that problem when i

551
00:17:32,240 --> 00:17:34,000
tested it because it turns out a few

552
00:17:34,000 --> 00:17:36,080
months after i tested it they pushed an

553
00:17:36,080 --> 00:17:38,080
update that broke the log out so

554
00:17:38,080 --> 00:17:39,120
it shows you a few things when

555
00:17:39,120 --> 00:17:40,880
researchers exaggerate security risk it

556
00:17:40,880 --> 00:17:42,720
makes everyone's jobs harder

557
00:17:42,720 --> 00:17:44,640
two even low risk vulnerabilities can

558
00:17:44,640 --> 00:17:46,640
have a pretty big impact and three

559
00:17:46,640 --> 00:17:48,320
always save your burp suite logs as long

560
00:17:48,320 --> 00:17:50,320
as you can

561
00:17:50,320 --> 00:17:51,919
ah click jacking it's a nasty little

562
00:17:51,919 --> 00:17:54,320
vulnerability so let's say here's a good

563
00:17:54,320 --> 00:17:56,320
scenario for you you visit an evil

564
00:17:56,320 --> 00:17:57,840
webpage that tells you you want a new

565
00:17:57,840 --> 00:17:59,360
iphone but you need to click a link to

566
00:17:59,360 --> 00:18:01,440
accept it but unknown to you the web

567
00:18:01,440 --> 00:18:03,440
page used invisible iframe to load up

568
00:18:03,440 --> 00:18:04,640
twitter.com over the page you're

569
00:18:04,640 --> 00:18:06,160
actually seeing and because you're

570
00:18:06,160 --> 00:18:08,080
logged into twitter another tab you're

571
00:18:08,080 --> 00:18:10,240
logged into twitter so the evil site is

572
00:18:10,240 --> 00:18:11,679
going to align that twitter iframe in

573
00:18:11,679 --> 00:18:13,360
such a way that when you go to click get

574
00:18:13,360 --> 00:18:15,039
my iphone you're actually clicking

575
00:18:15,039 --> 00:18:16,559
invisible retweet button on something

576
00:18:16,559 --> 00:18:18,799
you don't want to be retweeting but this

577
00:18:18,799 --> 00:18:20,400
is easy to detect

578
00:18:20,400 --> 00:18:22,160
if the site isn't setting content

579
00:18:22,160 --> 00:18:24,240
security policy or an x frame options

580
00:18:24,240 --> 00:18:26,360
header in the responses use

581
00:18:26,360 --> 00:18:28,240
clickjacker.io linked there to see if

582
00:18:28,240 --> 00:18:30,400
it's vulnerable

583
00:18:30,400 --> 00:18:31,760
concurrent user sessions is an

584
00:18:31,760 --> 00:18:33,360
informational finding that's only good

585
00:18:33,360 --> 00:18:35,600
for padding empty pen test reports

586
00:18:35,600 --> 00:18:37,440
there i said it

587
00:18:37,440 --> 00:18:39,520
most web apps allow concurrent sessions

588
00:18:39,520 --> 00:18:41,600
by design and getting rid of that will

589
00:18:41,600 --> 00:18:43,760
just annoy most users except in very

590
00:18:43,760 --> 00:18:46,080
very specific scenarios this is just a

591
00:18:46,080 --> 00:18:47,840
non-issue

592
00:18:47,840 --> 00:18:49,039
remember we talked about session

593
00:18:49,039 --> 00:18:51,360
hijacking like four times timeouts are

594
00:18:51,360 --> 00:18:52,799
another defensive depth measure that

595
00:18:52,799 --> 00:18:54,080
should always be implemented because

596
00:18:54,080 --> 00:18:55,840
they help narrow an attacker's window of

597
00:18:55,840 --> 00:18:57,840
opportunity so it's a bit of a judgment

598
00:18:57,840 --> 00:18:59,919
call on the tester's part to determine

599
00:18:59,919 --> 00:19:02,080
what excessive session timeout is i

600
00:19:02,080 --> 00:19:04,000
usually go with 20 minutes if i can sign

601
00:19:04,000 --> 00:19:06,480
in and walk away for 21 minutes i want

602
00:19:06,480 --> 00:19:08,000
to see my sessions been terminated

603
00:19:08,000 --> 00:19:10,559
automatically by the time i get back

604
00:19:10,559 --> 00:19:12,240
uh if you have a password change option

605
00:19:12,240 --> 00:19:14,000
for logged in users

606
00:19:14,000 --> 00:19:15,200
you should check several things because

607
00:19:15,200 --> 00:19:16,640
there's a few ways to screw that up the

608
00:19:16,640 --> 00:19:18,320
first is if you're expected to log in

609
00:19:18,320 --> 00:19:19,760
with the password you absolutely need a

610
00:19:19,760 --> 00:19:21,600
way to change that password later

611
00:19:21,600 --> 00:19:23,840
second if a user changes their password

612
00:19:23,840 --> 00:19:25,520
they absolutely need to supply their

613
00:19:25,520 --> 00:19:27,280
current password to do it this keeps

614
00:19:27,280 --> 00:19:29,440
session hijacking and csrf attacks from

615
00:19:29,440 --> 00:19:31,679
doing a complete counter count takeovers

616
00:19:31,679 --> 00:19:32,880
the easy way

617
00:19:32,880 --> 00:19:34,240
you should never ever be able to change

618
00:19:34,240 --> 00:19:36,320
someone else's password that seems like

619
00:19:36,320 --> 00:19:37,520
a silly thing to say but i've seen

620
00:19:37,520 --> 00:19:38,720
applications that let you do that

621
00:19:38,720 --> 00:19:40,320
password change form sends the

622
00:19:40,320 --> 00:19:42,240
requesting user's username and new

623
00:19:42,240 --> 00:19:44,080
password to the server so when you see

624
00:19:44,080 --> 00:19:46,160
those passwords in burp suite you can't

625
00:19:46,160 --> 00:19:47,919
not screw with it what happens if i just

626
00:19:47,919 --> 00:19:50,240
replace my username with someone else's

627
00:19:50,240 --> 00:19:52,559
the answer may surprise you

628
00:19:52,559 --> 00:19:53,760
when checking the strength in app's

629
00:19:53,760 --> 00:19:55,120
password policy i always start with the

630
00:19:55,120 --> 00:19:57,280
easiest password the lowercase letter a

631
00:19:57,280 --> 00:19:58,880
if they let me do that okay that's an

632
00:19:58,880 --> 00:20:00,720
automatic high i'm done trying to time

633
00:20:00,720 --> 00:20:02,159
to find the next finding

634
00:20:02,159 --> 00:20:03,760
otherwise i'll increase the complexity

635
00:20:03,760 --> 00:20:05,280
see what the app lets me get away with

636
00:20:05,280 --> 00:20:07,360
how about the word password how about my

637
00:20:07,360 --> 00:20:10,080
username or like eight letter lowercase

638
00:20:10,080 --> 00:20:11,840
a characters in a row

639
00:20:11,840 --> 00:20:13,520
obviously you go through these checks at

640
00:20:13,520 --> 00:20:14,880
account creation time if you can

641
00:20:14,880 --> 00:20:16,320
provision your own account but then

642
00:20:16,320 --> 00:20:18,080
check them again after you log in and

643
00:20:18,080 --> 00:20:19,919
attempt to change your password there's

644
00:20:19,919 --> 00:20:21,280
when there's multiple areas where you

645
00:20:21,280 --> 00:20:23,200
can change your password sometimes one

646
00:20:23,200 --> 00:20:24,640
one of them will let you bypass the

647
00:20:24,640 --> 00:20:26,240
password complexity rules that the other

648
00:20:26,240 --> 00:20:28,480
ones will enforce

649
00:20:28,480 --> 00:20:30,000
according to nist

650
00:20:30,000 --> 00:20:31,760
all security questions and password

651
00:20:31,760 --> 00:20:32,799
hints that are available to

652
00:20:32,799 --> 00:20:34,480
unauthenticated users are considered

653
00:20:34,480 --> 00:20:36,480
weak but if you absolutely have to use

654
00:20:36,480 --> 00:20:37,679
them for the love of god do not use

655
00:20:37,679 --> 00:20:38,960
things like what is your favorite color

656
00:20:38,960 --> 00:20:40,480
or what high school did you attend or

657
00:20:40,480 --> 00:20:42,240
anything easily guessable brute

658
00:20:42,240 --> 00:20:43,520
forceable are discovered within

659
00:20:43,520 --> 00:20:45,280
literally 90 seconds of googling

660
00:20:45,280 --> 00:20:47,360
somebody

661
00:20:47,360 --> 00:20:48,640
when you visit a page that contains

662
00:20:48,640 --> 00:20:50,159
sensitive information check the server

663
00:20:50,159 --> 00:20:51,840
response headers you're going to want to

664
00:20:51,840 --> 00:20:53,600
see the cache control the pragma and

665
00:20:53,600 --> 00:20:55,679
expires all set in order to get as much

666
00:20:55,679 --> 00:20:57,360
coverage across as many browsers as

667
00:20:57,360 --> 00:20:59,360
possible some browsers don't respect

668
00:20:59,360 --> 00:21:01,520
some of those some browsers will if you

669
00:21:01,520 --> 00:21:03,120
sell all three you should be covering

670
00:21:03,120 --> 00:21:05,600
all your bases

671
00:21:05,600 --> 00:21:07,280
now if you're testing iis app there's a

672
00:21:07,280 --> 00:21:09,200
bunch of ways that someone might be

673
00:21:09,200 --> 00:21:11,039
doing a view state wrong first and

674
00:21:11,039 --> 00:21:13,120
foremost always make sure it's encrypted

675
00:21:13,120 --> 00:21:15,039
burp suite will decode if you state into

676
00:21:15,039 --> 00:21:16,799
a human readable form but it won't if

677
00:21:16,799 --> 00:21:18,720
it's encrypted so that's an easy way to

678
00:21:18,720 --> 00:21:19,760
find out

679
00:21:19,760 --> 00:21:20,640
um

680
00:21:20,640 --> 00:21:22,799
if the view states unencrypted and has

681
00:21:22,799 --> 00:21:24,720
sensitive information or the mac is not

682
00:21:24,720 --> 00:21:27,840
enabled that finding risk goes up

683
00:21:27,840 --> 00:21:29,360
you'll need two users for vertical

684
00:21:29,360 --> 00:21:30,960
privilege escalation a high privileged

685
00:21:30,960 --> 00:21:32,960
admin a low privileged regular user

686
00:21:32,960 --> 00:21:34,960
something like that where you have one

687
00:21:34,960 --> 00:21:36,799
with more privileges than the other log

688
00:21:36,799 --> 00:21:38,159
in with the high privileged user and go

689
00:21:38,159 --> 00:21:40,559
to a page that only they are allowed to

690
00:21:40,559 --> 00:21:43,760
visit or interact with like maybe

691
00:21:43,760 --> 00:21:46,320
administer users page or something note

692
00:21:46,320 --> 00:21:48,080
the url or the requests used to make it

693
00:21:48,080 --> 00:21:50,000
and log out now try to get back to that

694
00:21:50,000 --> 00:21:51,520
page with the low privilege user and see

695
00:21:51,520 --> 00:21:53,679
if it'll let you

696
00:21:53,679 --> 00:21:55,679
horizontal privilege escalation you also

697
00:21:55,679 --> 00:21:57,440
need two users but you need two users of

698
00:21:57,440 --> 00:21:59,120
the same permission levels

699
00:21:59,120 --> 00:22:00,880
login as user number one go to a page

700
00:22:00,880 --> 00:22:02,559
that contains information only they can

701
00:22:02,559 --> 00:22:04,720
see like a user settings or user profile

702
00:22:04,720 --> 00:22:07,120
that contains sensitive information

703
00:22:07,120 --> 00:22:08,880
then note the requests used to reach the

704
00:22:08,880 --> 00:22:10,240
page and log out and try it again with

705
00:22:10,240 --> 00:22:11,760
user number two and see if they can see

706
00:22:11,760 --> 00:22:14,159
that stuff too

707
00:22:14,159 --> 00:22:16,000
csrf stands for client side request

708
00:22:16,000 --> 00:22:17,440
forgery and it's the little complex to

709
00:22:17,440 --> 00:22:18,960
describe so we'll go over the simplest

710
00:22:18,960 --> 00:22:20,000
form

711
00:22:20,000 --> 00:22:21,679
an attacker sends a victim a link that

712
00:22:21,679 --> 00:22:23,280
contains actions for the victim to take

713
00:22:23,280 --> 00:22:25,440
in the url query string if a victim is

714
00:22:25,440 --> 00:22:26,960
logged into a targeted web app and

715
00:22:26,960 --> 00:22:28,720
clicks the link the browser will send

716
00:22:28,720 --> 00:22:30,559
those url parameters to the web server

717
00:22:30,559 --> 00:22:31,919
and the server will happily execute

718
00:22:31,919 --> 00:22:33,440
those actions on behalf of the logged in

719
00:22:33,440 --> 00:22:34,320
victim

720
00:22:34,320 --> 00:22:35,360
so

721
00:22:35,360 --> 00:22:37,840
the way to fix this is send a secret

722
00:22:37,840 --> 00:22:39,280
string with any request that changes

723
00:22:39,280 --> 00:22:41,120
data on the server that's called a csrf

724
00:22:41,120 --> 00:22:43,600
token or a nonce that strings compare to

725
00:22:43,600 --> 00:22:45,360
an expected value on server if they

726
00:22:45,360 --> 00:22:47,200
match then we can safely assume the

727
00:22:47,200 --> 00:22:50,000
request is genuine otherwise

728
00:22:50,000 --> 00:22:51,840
or sorry usually that token will be

729
00:22:51,840 --> 00:22:53,760
helpfully labeled so you can see it

730
00:22:53,760 --> 00:22:55,919
pretty easily in burp's proxy history as

731
00:22:55,919 --> 00:22:58,240
such

732
00:23:01,840 --> 00:23:03,360
excuse me

733
00:23:03,360 --> 00:23:05,760
if you don't see that token being sent

734
00:23:05,760 --> 00:23:07,039
that's the finding

735
00:23:07,039 --> 00:23:09,120
if you can remove that token and still

736
00:23:09,120 --> 00:23:10,640
make the request and it works that's a

737
00:23:10,640 --> 00:23:12,960
worse finding

738
00:23:12,960 --> 00:23:13,840
so

739
00:23:13,840 --> 00:23:15,440
one more story break for you here i got

740
00:23:15,440 --> 00:23:16,880
about

741
00:23:16,880 --> 00:23:18,400
seven minutes

742
00:23:18,400 --> 00:23:20,640
so the website pop versus soda.com is a

743
00:23:20,640 --> 00:23:21,919
crowdsourced map that shows the

744
00:23:21,919 --> 00:23:24,000
distribution of people across the u.s we

745
00:23:24,000 --> 00:23:25,360
use different words when referring to

746
00:23:25,360 --> 00:23:27,280
carbonated soft drinks

747
00:23:27,280 --> 00:23:29,760
in general midwesterners say pop people

748
00:23:29,760 --> 00:23:32,000
on the coasts and i guess missouri say

749
00:23:32,000 --> 00:23:33,760
soda and the southerners think it's

750
00:23:33,760 --> 00:23:35,520
acceptable to say coke regardless of the

751
00:23:35,520 --> 00:23:37,280
brand of soft drink they're drinking

752
00:23:37,280 --> 00:23:38,480
if you call it something else where you

753
00:23:38,480 --> 00:23:40,159
live the site asks you to specify the

754
00:23:40,159 --> 00:23:41,679
word you use along with your location

755
00:23:41,679 --> 00:23:42,960
and it'll add that to its map and

756
00:23:42,960 --> 00:23:45,039
statistics

757
00:23:45,039 --> 00:23:46,880
so take a look at how my response is

758
00:23:46,880 --> 00:23:48,880
sent to the server the app puts each

759
00:23:48,880 --> 00:23:51,279
answer i give in to url query strings

760
00:23:51,279 --> 00:23:53,520
separated by colon character

761
00:23:53,520 --> 00:23:57,279
so you can easily see how my answers are

762
00:23:57,279 --> 00:23:59,279
transmitted in the url query string up

763
00:23:59,279 --> 00:24:00,080
there

764
00:24:00,080 --> 00:24:02,080
and what you're not seeing here is an

765
00:24:02,080 --> 00:24:04,400
anti-csrf token parameter meaning this

766
00:24:04,400 --> 00:24:06,159
is vulnerable to the world's most

767
00:24:06,159 --> 00:24:08,159
useless sea surf attack

768
00:24:08,159 --> 00:24:09,600
so back when i worked at spider lives

769
00:24:09,600 --> 00:24:11,120
one of my co-workers

770
00:24:11,120 --> 00:24:12,640
he sent this link to the team chat

771
00:24:12,640 --> 00:24:13,760
telling her colleagues to look at this

772
00:24:13,760 --> 00:24:15,760
fun map he found when people clicked the

773
00:24:15,760 --> 00:24:16,559
link

774
00:24:16,559 --> 00:24:18,159
they unwittingly sent those parameters

775
00:24:18,159 --> 00:24:20,080
to the server resulting in the database

776
00:24:20,080 --> 00:24:22,240
suddenly recording 13 people from grand

777
00:24:22,240 --> 00:24:25,919
rapids michigan who say sodi pap

778
00:24:26,000 --> 00:24:27,440
so

779
00:24:27,440 --> 00:24:29,039
this is kind of related to what we saw

780
00:24:29,039 --> 00:24:30,400
in the previous chapter where we want to

781
00:24:30,400 --> 00:24:32,320
see a 302 response to a login request

782
00:24:32,320 --> 00:24:34,480
instead of 200. we also want to see that

783
00:24:34,480 --> 00:24:36,799
with all sensitive information like

784
00:24:36,799 --> 00:24:38,880
credit card transactions or something

785
00:24:38,880 --> 00:24:40,400
with your social security number or

786
00:24:40,400 --> 00:24:44,080
anything that's uh that's sensitive

787
00:24:44,080 --> 00:24:46,400
and similar to logging in chapter where

788
00:24:46,400 --> 00:24:47,919
we look for username enumeration on the

789
00:24:47,919 --> 00:24:50,240
login page check the forgot password

790
00:24:50,240 --> 00:24:51,600
feature and see if you can enumerate

791
00:24:51,600 --> 00:24:53,600
users that way too because maybe they'll

792
00:24:53,600 --> 00:24:56,400
fix one and not the other

793
00:24:56,400 --> 00:24:59,200
the password reset dos is fun so if you

794
00:24:59,200 --> 00:25:01,200
can force an immediate password reset by

795
00:25:01,200 --> 00:25:03,360
giving the application a username or an

796
00:25:03,360 --> 00:25:05,520
email address you can basically just

797
00:25:05,520 --> 00:25:07,520
lock someone out of the web app by just

798
00:25:07,520 --> 00:25:09,840
constantly making those requests

799
00:25:09,840 --> 00:25:11,760
either rate limit stuff or use a cap

800
00:25:11,760 --> 00:25:14,000
show or better yet send a password a

801
00:25:14,000 --> 00:25:15,600
reset password link to the user and let

802
00:25:15,600 --> 00:25:17,840
the user themselves do the reset instead

803
00:25:17,840 --> 00:25:20,240
of you know someone just making the

804
00:25:20,240 --> 00:25:22,799
reset from the web page

805
00:25:22,799 --> 00:25:25,039
the bypass this one's rare but really

806
00:25:25,039 --> 00:25:26,559
fun when you find it especially

807
00:25:26,559 --> 00:25:29,039
multi-step password reset schemes

808
00:25:29,039 --> 00:25:30,320
because it's hard to keep track of the

809
00:25:30,320 --> 00:25:32,880
reset state uh once i saw a co-worker

810
00:25:32,880 --> 00:25:34,320
come off the way to change any user's

811
00:25:34,320 --> 00:25:35,840
password to something of his choosing by

812
00:25:35,840 --> 00:25:37,520
exploiting a three-step forgot password

813
00:25:37,520 --> 00:25:40,000
process step one asked for your email

814
00:25:40,000 --> 00:25:41,919
address then took you to step two or ask

815
00:25:41,919 --> 00:25:43,919
your security questions you get those

816
00:25:43,919 --> 00:25:45,279
right you go to step three where you can

817
00:25:45,279 --> 00:25:46,960
submit your new password

818
00:25:46,960 --> 00:25:49,039
so he completed step one by entering

819
00:25:49,039 --> 00:25:50,480
another user's email address but then he

820
00:25:50,480 --> 00:25:51,760
got stuck on step two because he didn't

821
00:25:51,760 --> 00:25:53,840
know the security questions so he looked

822
00:25:53,840 --> 00:25:55,840
up at the url and saw it ended in

823
00:25:55,840 --> 00:25:57,520
step 2.jsp

824
00:25:57,520 --> 00:25:59,679
so we changed it to step 3.jsp and the

825
00:25:59,679 --> 00:26:01,039
application took him to the page that

826
00:26:01,039 --> 00:26:02,960
let him put in a new password it already

827
00:26:02,960 --> 00:26:04,799
saved the email address from step one he

828
00:26:04,799 --> 00:26:06,159
could change anybody's password with

829
00:26:06,159 --> 00:26:07,919
that

830
00:26:07,919 --> 00:26:09,919
um web apps should never store passwords

831
00:26:09,919 --> 00:26:12,480
in the database even encrypted passwords

832
00:26:12,480 --> 00:26:13,919
only the hashes of password should be

833
00:26:13,919 --> 00:26:16,159
stored and compared to hashed user input

834
00:26:16,159 --> 00:26:18,080
that is hash the password the user sends

835
00:26:18,080 --> 00:26:19,919
you at login see if it matches a hash in

836
00:26:19,919 --> 00:26:22,320
a file if a web app sends you your

837
00:26:22,320 --> 00:26:24,400
current password that means it's storing

838
00:26:24,400 --> 00:26:26,080
your actual password in the database and

839
00:26:26,080 --> 00:26:29,279
not just a hash and that's very very bad

840
00:26:29,279 --> 00:26:30,559
um

841
00:26:30,559 --> 00:26:32,720
after a successful password reset users

842
00:26:32,720 --> 00:26:34,400
should not get a new password sent to

843
00:26:34,400 --> 00:26:36,480
them because commonly used channels for

844
00:26:36,480 --> 00:26:37,919
that like sms or email they're not

845
00:26:37,919 --> 00:26:40,080
encrypted and passwords aren't things

846
00:26:40,080 --> 00:26:41,600
you want to see transmitted in plain

847
00:26:41,600 --> 00:26:43,520
text and worse the user probably won't

848
00:26:43,520 --> 00:26:44,880
delete the message that contains that

849
00:26:44,880 --> 00:26:46,720
new password so anyone with access to

850
00:26:46,720 --> 00:26:49,120
the device or account can retrieve them

851
00:26:49,120 --> 00:26:51,360
now that's bad enough but it's even

852
00:26:51,360 --> 00:26:52,960
worse if that password isn't actually

853
00:26:52,960 --> 00:26:55,440
temporary if you get a new password sent

854
00:26:55,440 --> 00:26:57,360
to you and the app doesn't force you to

855
00:26:57,360 --> 00:26:59,520
change it after you log in

856
00:26:59,520 --> 00:27:01,760
that's even worse

857
00:27:01,760 --> 00:27:02,720
so

858
00:27:02,720 --> 00:27:04,799
as i mentioned earlier cmc can nickto

859
00:27:04,799 --> 00:27:06,320
they're good at discovering these

860
00:27:06,320 --> 00:27:08,240
publicly exposed admin interfaces but

861
00:27:08,240 --> 00:27:09,919
you can also do it manually like if you

862
00:27:09,919 --> 00:27:11,640
uh just append slash

863
00:27:11,640 --> 00:27:14,400
sitemap.xml to the the website's domain

864
00:27:14,400 --> 00:27:15,679
like you know

865
00:27:15,679 --> 00:27:17,159
starbucks.com

866
00:27:17,159 --> 00:27:20,080
sitemap.xml you can look for any admin

867
00:27:20,080 --> 00:27:22,000
panels that way or

868
00:27:22,000 --> 00:27:23,360
even just going through the ui you might

869
00:27:23,360 --> 00:27:25,600
see a link that says admin just click it

870
00:27:25,600 --> 00:27:28,000
see if you can see it um these

871
00:27:28,000 --> 00:27:29,200
like

872
00:27:29,200 --> 00:27:31,120
in the uh the ideal world they should be

873
00:27:31,120 --> 00:27:33,120
like allow listed so only

874
00:27:33,120 --> 00:27:35,120
legitimate admins can even see the link

875
00:27:35,120 --> 00:27:37,039
and not all users

876
00:27:37,039 --> 00:27:38,960
if you do see an admin login page make

877
00:27:38,960 --> 00:27:40,480
sure to check all the usual login and

878
00:27:40,480 --> 00:27:42,080
forgot password stuff against them too

879
00:27:42,080 --> 00:27:44,480
because sometimes if they lock down the

880
00:27:44,480 --> 00:27:46,880
the regular login page the admin login

881
00:27:46,880 --> 00:27:49,120
page won't have those protections either

882
00:27:49,120 --> 00:27:51,039
so maybe you'll get some findings there

883
00:27:51,039 --> 00:27:53,039
too

884
00:27:53,039 --> 00:27:54,880
uh going live with default credentials

885
00:27:54,880 --> 00:27:56,399
still active is one of the silliest ways

886
00:27:56,399 --> 00:27:58,559
to get your web app wrecked by attackers

887
00:27:58,559 --> 00:28:00,000
so from a pen tester's point of view

888
00:28:00,000 --> 00:28:02,000
default creds are the best way to get a

889
00:28:02,000 --> 00:28:03,279
critical risk finding while doing the

890
00:28:03,279 --> 00:28:04,960
least amount of work possible so it's

891
00:28:04,960 --> 00:28:06,159
always worth it to try to log in with

892
00:28:06,159 --> 00:28:07,919
default creds

893
00:28:07,919 --> 00:28:09,600
with captchas it's hard to write your

894
00:28:09,600 --> 00:28:10,880
own

895
00:28:10,880 --> 00:28:12,480
there's free captchas out there they're

896
00:28:12,480 --> 00:28:14,080
very effective that doesn't stop people

897
00:28:14,080 --> 00:28:16,399
from trying i've seen homebrew captions

898
00:28:16,399 --> 00:28:17,760
that include the correct answer and

899
00:28:17,760 --> 00:28:19,679
server response which completely misses

900
00:28:19,679 --> 00:28:20,799
the point

901
00:28:20,799 --> 00:28:23,200
if you're testing a homebrew captcha

902
00:28:23,200 --> 00:28:24,720
check the server response to see if you

903
00:28:24,720 --> 00:28:26,720
see interesting stuff or use inspect

904
00:28:26,720 --> 00:28:28,320
element or look at the html source to

905
00:28:28,320 --> 00:28:30,320
see if the solution's there or depending

906
00:28:30,320 --> 00:28:31,760
on how broken the implementation is you

907
00:28:31,760 --> 00:28:33,520
might even be able to

908
00:28:33,520 --> 00:28:34,880
get the thing to serve you a challenge

909
00:28:34,880 --> 00:28:37,919
you already know the answer to

910
00:28:39,200 --> 00:28:41,760
so the ecard test file is a 68 byte

911
00:28:41,760 --> 00:28:43,200
string of characters that's designed to

912
00:28:43,200 --> 00:28:45,440
test av products virtually all antivirus

913
00:28:45,440 --> 00:28:47,200
will treat this as a real virus and

914
00:28:47,200 --> 00:28:48,880
remove or quarantine any document starts

915
00:28:48,880 --> 00:28:50,240
with this string and is not larger than

916
00:28:50,240 --> 00:28:52,000
128 bytes

917
00:28:52,000 --> 00:28:53,679
so you can easily test a file upload

918
00:28:53,679 --> 00:28:56,159
does virus scanning by saving the string

919
00:28:56,159 --> 00:28:58,000
to a text file and uploading it if you

920
00:28:58,000 --> 00:28:59,840
can re-download it later you get a nice

921
00:28:59,840 --> 00:29:01,600
screenshot of your avs malware alert

922
00:29:01,600 --> 00:29:03,600
pop-up to go with your finding

923
00:29:03,600 --> 00:29:05,760
if other users can download the infected

924
00:29:05,760 --> 00:29:06,720
file

925
00:29:06,720 --> 00:29:10,240
then you can upgrade the the risk

926
00:29:10,240 --> 00:29:11,279
when looking through your burp sleep

927
00:29:11,279 --> 00:29:12,480
proxy history

928
00:29:12,480 --> 00:29:14,320
uh keep an eye out for requests

929
00:29:14,320 --> 00:29:15,919
transmitting get or post parameters that

930
00:29:15,919 --> 00:29:19,360
reference a number or an id

931
00:29:19,440 --> 00:29:21,039
if you can resend those requests but

932
00:29:21,039 --> 00:29:23,279
with the that number incremented up or

933
00:29:23,279 --> 00:29:24,240
down

934
00:29:24,240 --> 00:29:26,320
you might be able to be you that might

935
00:29:26,320 --> 00:29:27,840
get you serve things you're not supposed

936
00:29:27,840 --> 00:29:29,919
to have access to

937
00:29:29,919 --> 00:29:32,000
verbose errors are not usually a finding

938
00:29:32,000 --> 00:29:33,600
on their own or a vulnerability on their

939
00:29:33,600 --> 00:29:35,600
own rather but they can give attackers

940
00:29:35,600 --> 00:29:37,520
information that they can use to refine

941
00:29:37,520 --> 00:29:39,679
their other attacks against a website so

942
00:29:39,679 --> 00:29:42,640
always use vague generic information

943
00:29:42,640 --> 00:29:44,159
error messages that don't give away too

944
00:29:44,159 --> 00:29:45,440
much information

945
00:29:45,440 --> 00:29:46,880
there's no reason to display a stack

946
00:29:46,880 --> 00:29:48,480
trace to a user in an error message just

947
00:29:48,480 --> 00:29:50,320
a simple sorry an error occurred try

948
00:29:50,320 --> 00:29:53,760
again or contact support is all you need

949
00:29:53,760 --> 00:29:55,520
once we're done with our testing we're

950
00:29:55,520 --> 00:29:56,720
going to test out the application's

951
00:29:56,720 --> 00:29:59,200
lockout policy and unless you can easily

952
00:29:59,200 --> 00:30:01,200
unlock your own user save this step for

953
00:30:01,200 --> 00:30:02,080
last

954
00:30:02,080 --> 00:30:04,240
uh try to log in 10 times with incorrect

955
00:30:04,240 --> 00:30:06,240
password and then try to log in at the

956
00:30:06,240 --> 00:30:07,840
right password the 11th time if you're

957
00:30:07,840 --> 00:30:11,360
logged in that's a finding

958
00:30:11,440 --> 00:30:13,600
and we made it through under 30 minutes

959
00:30:13,600 --> 00:30:17,440
so uh i guess to recap here this is a

960
00:30:17,440 --> 00:30:20,000
a way for defenders to go through and

961
00:30:20,000 --> 00:30:22,880
basically play pen tester and get rid of

962
00:30:22,880 --> 00:30:24,240
a lot of these little findings before

963
00:30:24,240 --> 00:30:26,159
the actual pen testers do and start

964
00:30:26,159 --> 00:30:29,520
generating those large reports

965
00:30:30,480 --> 00:30:34,399
and actually i'm going to scroll back up

966
00:30:35,600 --> 00:30:38,719
to that qr code

967
00:30:39,039 --> 00:30:41,200
there's so many

968
00:30:41,200 --> 00:30:42,640
so many slides in this presentation you

969
00:30:42,640 --> 00:30:45,640
guys

970
00:30:51,120 --> 00:30:54,439
there it is

