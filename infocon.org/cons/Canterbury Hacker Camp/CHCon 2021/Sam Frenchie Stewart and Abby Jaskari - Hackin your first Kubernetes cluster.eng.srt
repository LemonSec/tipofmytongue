1
00:00:04,940 --> 00:00:10,429
[Applause]

2
00:00:11,759 --> 00:00:14,400
um awesome last slot of the con

3
00:00:14,400 --> 00:00:16,480
wonderful um thank you all for hanging

4
00:00:16,480 --> 00:00:18,080
around for the very last end uh for

5
00:00:18,080 --> 00:00:19,680
those of you who haven't presented at

6
00:00:19,680 --> 00:00:21,279
conferences basically the way it works

7
00:00:21,279 --> 00:00:23,680
is you submit cfp you do nothing for a

8
00:00:23,680 --> 00:00:25,359
period of months until about two days

9
00:00:25,359 --> 00:00:27,119
before the con you freak the out

10
00:00:27,119 --> 00:00:28,080
you're like

11
00:00:28,080 --> 00:00:30,320
put the slides together freak out until

12
00:00:30,320 --> 00:00:32,320
your talk and then once your talk is

13
00:00:32,320 --> 00:00:33,200
done

14
00:00:33,200 --> 00:00:34,399
then you just chill out you have fun

15
00:00:34,399 --> 00:00:36,160
with your friends so being in the last

16
00:00:36,160 --> 00:00:38,559
slot of the con i'm not exactly sure

17
00:00:38,559 --> 00:00:40,800
what i did or did not do that i should

18
00:00:40,800 --> 00:00:42,239
or should not have done but i'm very

19
00:00:42,239 --> 00:00:43,440
sorry to whoever put the schedule

20
00:00:43,440 --> 00:00:45,039
together i'm sorry i orderly offended

21
00:00:45,039 --> 00:00:46,640
you i promise i will or we'll never do

22
00:00:46,640 --> 00:00:48,480
that again um

23
00:00:48,480 --> 00:00:50,399
but no honestly really glad to be here

24
00:00:50,399 --> 00:00:52,000
um uh thank you all for hanging around

25
00:00:52,000 --> 00:00:53,280
and now we're pretty excited to present

26
00:00:53,280 --> 00:00:55,840
to you um let's quickly hit next and

27
00:00:55,840 --> 00:00:58,640
make sure that hmm we might have a minor

28
00:00:58,640 --> 00:01:01,680
technical issue that the slide notes are

29
00:01:01,680 --> 00:01:03,359
not up but we can pull them up in a

30
00:01:03,359 --> 00:01:04,799
little bit if we need

31
00:01:04,799 --> 00:01:06,640
yeah all right we might take a couple

32
00:01:06,640 --> 00:01:08,720
minutes now just to

33
00:01:08,720 --> 00:01:12,080
get that running and then

34
00:01:12,080 --> 00:01:13,040
that

35
00:01:13,040 --> 00:01:15,360
uh customize prisma display and then

36
00:01:15,360 --> 00:01:18,799
require that we have presenter notes

37
00:01:18,799 --> 00:01:21,280
and then we can get back to it

38
00:01:21,280 --> 00:01:24,000
sweet cool all right so let's jump into

39
00:01:24,000 --> 00:01:25,280
it uh so today we will be talking to you

40
00:01:25,280 --> 00:01:27,600
about kubernetes um uh so we'll give you

41
00:01:27,600 --> 00:01:29,520
a bit of a brief introduction uh we'll

42
00:01:29,520 --> 00:01:31,759
give you an overview of 101 a bit of

43
00:01:31,759 --> 00:01:33,680
background um talk about ourselves of

44
00:01:33,680 --> 00:01:35,520
course uh and then we'll go into uh some

45
00:01:35,520 --> 00:01:37,600
of the approaches i take when i've

46
00:01:37,600 --> 00:01:38,799
been on some of my assessments of

47
00:01:38,799 --> 00:01:40,479
attacking kubernetes itself

48
00:01:40,479 --> 00:01:41,920
and then we will get the hell out of the

49
00:01:41,920 --> 00:01:43,439
way oh we'll discuss some fixes of

50
00:01:43,439 --> 00:01:44,880
course of how we can remediate some of

51
00:01:44,880 --> 00:01:46,640
these things

52
00:01:46,640 --> 00:01:48,560
um but before we jump into that of

53
00:01:48,560 --> 00:01:51,040
course uh live audience participation

54
00:01:51,040 --> 00:01:54,720
round i love this bit uh so who here uh

55
00:01:54,720 --> 00:01:56,079
and of course kubernetes for those

56
00:01:56,079 --> 00:01:58,240
unfamiliar means helmsman in greek and

57
00:01:58,240 --> 00:02:01,040
being attackers we're attacking the ship

58
00:02:01,040 --> 00:02:04,000
uh so a big party yar for participation

59
00:02:04,000 --> 00:02:06,399
here please uh so who here has never

60
00:02:06,399 --> 00:02:08,560
heard the word kubernetes before maybe

61
00:02:08,560 --> 00:02:10,479
has like heard it once uh yeah but

62
00:02:10,479 --> 00:02:11,599
really doesn't know anything about it

63
00:02:11,599 --> 00:02:14,080
give me a big yard

64
00:02:14,080 --> 00:02:15,920
a couple of people okay not a whole lot

65
00:02:15,920 --> 00:02:18,239
um who here has maybe used it once or

66
00:02:18,239 --> 00:02:20,400
twice is aware of it but is broadly

67
00:02:20,400 --> 00:02:23,920
unfamiliar with kubernetes give me a yar

68
00:02:23,920 --> 00:02:26,400
okay a bit more of the audience um uh

69
00:02:26,400 --> 00:02:28,239
those playing along at home please just

70
00:02:28,239 --> 00:02:29,920
yar and discord chat i want the whole

71
00:02:29,920 --> 00:02:31,840
wall just to be like twitch screen style

72
00:02:31,840 --> 00:02:34,160
of yours that'd be great um

73
00:02:34,160 --> 00:02:36,400
who here uh has has used kubernetes a

74
00:02:36,400 --> 00:02:38,400
whole lot uh maybe administered it or

75
00:02:38,400 --> 00:02:39,760
has attacked some clusters before give

76
00:02:39,760 --> 00:02:41,040
me a year

77
00:02:41,040 --> 00:02:42,800
a couple of people awesome cool uh and

78
00:02:42,800 --> 00:02:46,239
who here is just here to troll us

79
00:02:46,239 --> 00:02:48,080
most of the audience wonderful of course

80
00:02:48,080 --> 00:02:49,840
at the hackathon uh we know where our

81
00:02:49,840 --> 00:02:51,920
audience is uh that's uh it's great to

82
00:02:51,920 --> 00:02:54,160
have you here um secondly as well uh

83
00:02:54,160 --> 00:02:57,200
we've been informed uh that no fun is

84
00:02:57,200 --> 00:02:58,800
allowed i'm not like if you're here for

85
00:02:58,800 --> 00:03:00,800
the opening ceremony today they ban me

86
00:03:00,800 --> 00:03:02,480
from telling dad jokes which instantly

87
00:03:02,480 --> 00:03:05,599
is about 70 of my material just gone so

88
00:03:05,599 --> 00:03:08,959
we'll improvise um but uh no jokes aside

89
00:03:08,959 --> 00:03:10,959
um uh this is actually abby's first time

90
00:03:10,959 --> 00:03:12,959
presenting on stage uh so if you do want

91
00:03:12,959 --> 00:03:14,959
to heckle uh feel free to heckle me uh

92
00:03:14,959 --> 00:03:16,959
be nice to abby give happy big round of

93
00:03:16,959 --> 00:03:20,159
first time we get to the green again

94
00:03:20,239 --> 00:03:22,000
um

95
00:03:22,000 --> 00:03:23,760
cool uh this is also a bit of like a

96
00:03:23,760 --> 00:03:25,440
poor one out for the the homies as well

97
00:03:25,440 --> 00:03:27,040
that couldn't make it here um uh there

98
00:03:27,040 --> 00:03:28,879
are a couple empty seats here um for

99
00:03:28,879 --> 00:03:30,319
those online and

100
00:03:30,319 --> 00:03:31,680
uh that would have loved to have been

101
00:03:31,680 --> 00:03:32,879
here we would love to have out here as

102
00:03:32,879 --> 00:03:34,720
well um so

103
00:03:34,720 --> 00:03:36,959
let's jump in um who are these fine

104
00:03:36,959 --> 00:03:38,400
people and and why are they standing in

105
00:03:38,400 --> 00:03:41,280
between you and and the beer um so who

106
00:03:41,280 --> 00:03:43,599
are we um hey i'm frenchie um i've been

107
00:03:43,599 --> 00:03:46,159
in security for just shy of 10 years now

108
00:03:46,159 --> 00:03:48,080
um uh i'm the infrastructure security

109
00:03:48,080 --> 00:03:50,319
fan uh lead over at uh brexit is a

110
00:03:50,319 --> 00:03:52,239
company over in san francisco i normally

111
00:03:52,239 --> 00:03:54,319
live and work in san francisco uh but

112
00:03:54,319 --> 00:03:55,519
i'm pretty glad to be in new zealand

113
00:03:55,519 --> 00:03:57,760
right now to be honest um i've been in

114
00:03:57,760 --> 00:03:59,360
pentester i've been a dev security

115
00:03:59,360 --> 00:04:00,879
engineer a bunch of things

116
00:04:00,879 --> 00:04:03,280
abby hello i'm abby

117
00:04:03,280 --> 00:04:05,680
i'm brand new to security i just

118
00:04:05,680 --> 00:04:07,920
finished my degree program earlier this

119
00:04:07,920 --> 00:04:09,599
year

120
00:04:09,599 --> 00:04:12,400
from the states i actually got my first

121
00:04:12,400 --> 00:04:15,280
degree in psychology with a focus on a

122
00:04:15,280 --> 00:04:17,759
positive or preventative psychology a

123
00:04:17,759 --> 00:04:20,000
little bit of a non-traditional route to

124
00:04:20,000 --> 00:04:21,199
security

125
00:04:21,199 --> 00:04:23,600
ended up working as an emt for quite

126
00:04:23,600 --> 00:04:26,240
some time until i realized that wasn't

127
00:04:26,240 --> 00:04:28,800
really quite for me anymore

128
00:04:28,800 --> 00:04:32,320
fell back on some skydiving skills as

129
00:04:32,320 --> 00:04:33,759
one does

130
00:04:33,759 --> 00:04:35,840
until i found what i was really wanting

131
00:04:35,840 --> 00:04:37,440
to do and what i was really passionate

132
00:04:37,440 --> 00:04:38,720
about

133
00:04:38,720 --> 00:04:40,960
which brings me to why i'm standing in

134
00:04:40,960 --> 00:04:43,600
front of you now because i found it yeah

135
00:04:43,600 --> 00:04:45,199
awesome uh you might also be wondering

136
00:04:45,199 --> 00:04:46,880
why we're wearing these weird uh

137
00:04:46,880 --> 00:04:48,400
motorcycle helmets and looking like that

138
00:04:48,400 --> 00:04:50,479
we're having an aneurysm uh actually

139
00:04:50,479 --> 00:04:52,639
this photo's meant to be upside down

140
00:04:52,639 --> 00:04:54,880
uh and looking like this

141
00:04:54,880 --> 00:04:56,240
because this is actually how abby and i

142
00:04:56,240 --> 00:04:58,639
met um abby is as a i fly a tunnel

143
00:04:58,639 --> 00:05:00,960
instructor so an indoor skydiving spot

144
00:05:00,960 --> 00:05:03,199
um that's how we met um we knew each

145
00:05:03,199 --> 00:05:04,240
other for a couple of months before she

146
00:05:04,240 --> 00:05:05,360
meant just like yeah i just finished my

147
00:05:05,360 --> 00:05:06,639
degree in cyber security i'm looking for

148
00:05:06,639 --> 00:05:09,039
a job like ah which kind of is awesome

149
00:05:09,039 --> 00:05:10,479
just goes to show that hackers kind of

150
00:05:10,479 --> 00:05:13,440
come from all walks of life

151
00:05:13,440 --> 00:05:14,400
so

152
00:05:14,400 --> 00:05:19,039
kubernetes kubernetes kubernetes k-k-a-s

153
00:05:19,039 --> 00:05:21,759
kates yeah

154
00:05:22,400 --> 00:05:23,759
um first we're going to talk about what

155
00:05:23,759 --> 00:05:25,039
it is we'll touch on the official

156
00:05:25,039 --> 00:05:27,360
definition we'll talk about why are we

157
00:05:27,360 --> 00:05:29,360
here not the existential why we're here

158
00:05:29,360 --> 00:05:32,479
we all know that's 42. more or less

159
00:05:32,479 --> 00:05:34,479
why is it relevant what problems did it

160
00:05:34,479 --> 00:05:36,720
solve we'll touch on architecture and

161
00:05:36,720 --> 00:05:38,479
then we will talk about the building

162
00:05:38,479 --> 00:05:40,479
blocks

163
00:05:40,479 --> 00:05:42,400
official definition

164
00:05:42,400 --> 00:05:44,160
an open source system for automating

165
00:05:44,160 --> 00:05:46,320
deployment scaling and management of

166
00:05:46,320 --> 00:05:48,800
containerized applications

167
00:05:48,800 --> 00:05:50,560
basically a long-winded way of saying it

168
00:05:50,560 --> 00:05:52,080
takes a heck of a lot of the time and

169
00:05:52,080 --> 00:05:53,600
energy out of administering your

170
00:05:53,600 --> 00:05:56,400
container containerized applications at

171
00:05:56,400 --> 00:05:58,000
scale

172
00:05:58,000 --> 00:06:00,880
it started at google it was called borg

173
00:06:00,880 --> 00:06:02,800
which is just really fun to say shout

174
00:06:02,800 --> 00:06:05,280
out to any trekkies in the audience

175
00:06:05,280 --> 00:06:06,800
it was originally developed to meet

176
00:06:06,800 --> 00:06:08,400
google scale

177
00:06:08,400 --> 00:06:10,479
it was donated to the cloud

178
00:06:10,479 --> 00:06:12,639
cloud native computing foundation in

179
00:06:12,639 --> 00:06:15,680
2015 and released as open source

180
00:06:15,680 --> 00:06:17,600
it since then has beat out its

181
00:06:17,600 --> 00:06:20,160
competitors in these container wars to

182
00:06:20,160 --> 00:06:22,639
basically become the de facto standard

183
00:06:22,639 --> 00:06:24,240
for containerized

184
00:06:24,240 --> 00:06:27,680
for container orchestration

185
00:06:27,680 --> 00:06:29,840
it's worth investing your time in

186
00:06:29,840 --> 00:06:32,160
i learned all about kubernetes to give

187
00:06:32,160 --> 00:06:33,440
this talk

188
00:06:33,440 --> 00:06:36,000
and i found it incredibly interesting so

189
00:06:36,000 --> 00:06:37,360
if you're looking for something to learn

190
00:06:37,360 --> 00:06:39,199
i highly recommend

191
00:06:39,199 --> 00:06:40,800
but before moving on to kubernetes

192
00:06:40,800 --> 00:06:42,400
itself i want to take a step back and

193
00:06:42,400 --> 00:06:44,080
look at a

194
00:06:44,080 --> 00:06:46,400
couple of technologies that got us to

195
00:06:46,400 --> 00:06:48,240
where we are now one little click uh one

196
00:06:48,240 --> 00:06:49,919
little quick note on that um yeah being

197
00:06:49,919 --> 00:06:51,199
in silicon valley literally every

198
00:06:51,199 --> 00:06:52,560
startup and their dog really uses

199
00:06:52,560 --> 00:06:54,080
kubernetes nowadays it takes a while for

200
00:06:54,080 --> 00:06:56,479
the internet to get to new zealand um so

201
00:06:56,479 --> 00:06:57,360
yeah

202
00:06:57,360 --> 00:06:59,199
uh as i've said it you know it's

203
00:06:59,199 --> 00:07:00,800
certainly worthwhile learning uh because

204
00:07:00,800 --> 00:07:02,240
you know there'll be a lot of attack

205
00:07:02,240 --> 00:07:04,080
surface in future um and part of as a

206
00:07:04,080 --> 00:07:05,599
meta point this talk was really abby

207
00:07:05,599 --> 00:07:06,880
went and learned how kubernetes worked

208
00:07:06,880 --> 00:07:08,639
and the 101 side of stuff which is what

209
00:07:08,639 --> 00:07:10,479
she'll introduce

210
00:07:10,479 --> 00:07:11,919
so hopefully it should be accessible to

211
00:07:11,919 --> 00:07:14,479
an unfamiliar audience

212
00:07:14,479 --> 00:07:16,400
so microservices

213
00:07:16,400 --> 00:07:18,560
in the traditional monolith application

214
00:07:18,560 --> 00:07:21,520
the entire application is run as a

215
00:07:21,520 --> 00:07:23,080
single process

216
00:07:23,080 --> 00:07:25,680
microservices are an application that

217
00:07:25,680 --> 00:07:27,520
have been separated into smaller

218
00:07:27,520 --> 00:07:30,240
independent domains that each perform a

219
00:07:30,240 --> 00:07:32,479
specific function

220
00:07:32,479 --> 00:07:34,960
with the application being modular each

221
00:07:34,960 --> 00:07:36,880
microservice can actually be scaled

222
00:07:36,880 --> 00:07:39,039
individually which saves on resources

223
00:07:39,039 --> 00:07:41,280
and reduces any chance of a single point

224
00:07:41,280 --> 00:07:42,960
of failure

225
00:07:42,960 --> 00:07:44,960
unlike those traditional monolithic

226
00:07:44,960 --> 00:07:47,199
applications that have to recompile

227
00:07:47,199 --> 00:07:49,840
rebuild and restart with every upgrade

228
00:07:49,840 --> 00:07:51,680
microservices can be patched without

229
00:07:51,680 --> 00:07:54,160
service interruption by rolling out one

230
00:07:54,160 --> 00:07:57,199
service at a time

231
00:07:57,199 --> 00:07:59,360
a little bit of container history back

232
00:07:59,360 --> 00:08:01,280
in the day we used to run applications

233
00:08:01,280 --> 00:08:03,520
on bare metal but there were some

234
00:08:03,520 --> 00:08:04,720
downsides

235
00:08:04,720 --> 00:08:06,800
bouncing back from faults and failures

236
00:08:06,800 --> 00:08:08,800
were slow and tightly coupled

237
00:08:08,800 --> 00:08:12,400
deployments were unnecessarily bulky we

238
00:08:12,400 --> 00:08:14,720
moved to a virtualized environment and

239
00:08:14,720 --> 00:08:16,479
this solved the problem of tightly

240
00:08:16,479 --> 00:08:18,479
coupled deployments

241
00:08:18,479 --> 00:08:20,080
and helped somewhat with failure

242
00:08:20,080 --> 00:08:22,639
recovery the downside that persisted

243
00:08:22,639 --> 00:08:24,720
with virtual machines was the fact that

244
00:08:24,720 --> 00:08:26,639
bulky operating systems had to be

245
00:08:26,639 --> 00:08:29,759
launched with every new instance

246
00:08:29,759 --> 00:08:31,840
since containers don't have to run their

247
00:08:31,840 --> 00:08:34,640
own operating system each system each

248
00:08:34,640 --> 00:08:36,320
instance requires a fraction of the

249
00:08:36,320 --> 00:08:37,679
resources

250
00:08:37,679 --> 00:08:39,679
in comparison with virtual machines and

251
00:08:39,679 --> 00:08:42,000
when scaled this efficiency can create

252
00:08:42,000 --> 00:08:44,399
some pretty dramatic savings

253
00:08:44,399 --> 00:08:46,160
not to mention the fact that

254
00:08:46,160 --> 00:08:48,240
containers also provide a consistent

255
00:08:48,240 --> 00:08:50,800
software environment for developers and

256
00:08:50,800 --> 00:08:53,800
testers

257
00:08:54,800 --> 00:08:56,959
containers are built with the same three

258
00:08:56,959 --> 00:08:58,959
basic ingredients despite whatever

259
00:08:58,959 --> 00:09:02,080
specific technology that created them

260
00:09:02,080 --> 00:09:03,760
the first being the manifest there's a

261
00:09:03,760 --> 00:09:06,000
little bit of a sample

262
00:09:06,000 --> 00:09:08,880
manifest here written in yaml

263
00:09:08,880 --> 00:09:10,720
next is the image you can see the image

264
00:09:10,720 --> 00:09:13,279
here uh that

265
00:09:13,279 --> 00:09:16,080
nginx would be the image and the context

266
00:09:16,080 --> 00:09:17,680
which you can see down at the bottom as

267
00:09:17,680 --> 00:09:19,120
the container port

268
00:09:19,120 --> 00:09:22,000
so the manifest yaml here along with the

269
00:09:22,000 --> 00:09:24,640
image all together with the context is

270
00:09:24,640 --> 00:09:28,160
what gives us the container itself

271
00:09:28,160 --> 00:09:29,040
so

272
00:09:29,040 --> 00:09:31,600
why why is it relevant why do we use it

273
00:09:31,600 --> 00:09:35,600
what problems did this solve

274
00:09:35,600 --> 00:09:37,360
managing an application at scale that's

275
00:09:37,360 --> 00:09:39,120
made up of tens

276
00:09:39,120 --> 00:09:40,880
hundreds or maybe even thousands of

277
00:09:40,880 --> 00:09:43,120
containers can really be complex and

278
00:09:43,120 --> 00:09:45,120
intensely time consuming if you're using

279
00:09:45,120 --> 00:09:47,680
your own scripts or homemade tools

280
00:09:47,680 --> 00:09:50,320
kubernetes offers major benefits that

281
00:09:50,320 --> 00:09:52,320
center around high availability

282
00:09:52,320 --> 00:09:55,839
scalability and disaster recovery

283
00:09:55,839 --> 00:09:57,600
like i mentioned with microservices and

284
00:09:57,600 --> 00:09:59,279
containerization it does save on

285
00:09:59,279 --> 00:10:02,839
resources but kubernetes itself offers

286
00:10:02,839 --> 00:10:04,959
additional resource efficiency in the

287
00:10:04,959 --> 00:10:07,360
form of bin packing

288
00:10:07,360 --> 00:10:09,440
fault tolerance this is kubernetes

289
00:10:09,440 --> 00:10:11,200
self-healing property

290
00:10:11,200 --> 00:10:12,800
if a pod fails on one of your worker

291
00:10:12,800 --> 00:10:13,680
nodes

292
00:10:13,680 --> 00:10:16,160
control loops will automatically replace

293
00:10:16,160 --> 00:10:17,839
it

294
00:10:17,839 --> 00:10:19,600
scaling

295
00:10:19,600 --> 00:10:22,160
you can either manually or automatically

296
00:10:22,160 --> 00:10:24,800
scale your application based on cpu

297
00:10:24,800 --> 00:10:27,600
utilization or some custom metrics

298
00:10:27,600 --> 00:10:30,000
and also mentioned updates and rollbacks

299
00:10:30,000 --> 00:10:32,240
can be seamlessly deployed to prevent

300
00:10:32,240 --> 00:10:33,839
service interruption

301
00:10:33,839 --> 00:10:36,720
and service discovery

302
00:10:36,720 --> 00:10:38,959
kubernetes automatically allows services

303
00:10:38,959 --> 00:10:42,000
to find and communicate with each other

304
00:10:42,000 --> 00:10:47,279
via an internal ip and dns name

305
00:10:47,279 --> 00:10:49,519
a little bit about the architecture

306
00:10:49,519 --> 00:10:51,120
first we'll talk about the control plane

307
00:10:51,120 --> 00:10:53,040
then we'll talk about the node plane and

308
00:10:53,040 --> 00:10:55,440
we'll wrap up the 101 portion of this

309
00:10:55,440 --> 00:11:00,399
talk with some kubernetes objects

310
00:11:00,399 --> 00:11:02,880
at a very high level kubernetes is made

311
00:11:02,880 --> 00:11:05,279
up of one or more control plane nodes

312
00:11:05,279 --> 00:11:07,680
and one or more worker nodes

313
00:11:07,680 --> 00:11:09,200
the worker node is where the

314
00:11:09,200 --> 00:11:11,279
containerized application app actually

315
00:11:11,279 --> 00:11:12,240
runs

316
00:11:12,240 --> 00:11:15,600
and the control node is where the

317
00:11:15,600 --> 00:11:18,160
administration administrative processes

318
00:11:18,160 --> 00:11:21,920
run that manage the cluster

319
00:11:22,399 --> 00:11:24,560
some components on the control plane

320
00:11:24,560 --> 00:11:27,200
the most important one is

321
00:11:27,200 --> 00:11:29,200
this api server

322
00:11:29,200 --> 00:11:30,560
here

323
00:11:30,560 --> 00:11:32,560
it coordinates all of the administrative

324
00:11:32,560 --> 00:11:35,120
tasks and acts as the entry point to the

325
00:11:35,120 --> 00:11:36,160
cluster

326
00:11:36,160 --> 00:11:38,320
it acts as the middle interface for any

327
00:11:38,320 --> 00:11:39,680
other component that requires

328
00:11:39,680 --> 00:11:42,079
information about the cluster's state

329
00:11:42,079 --> 00:11:44,480
and takes calls from users operators and

330
00:11:44,480 --> 00:11:46,079
external agents

331
00:11:46,079 --> 00:11:49,040
it's the only component that should

332
00:11:49,040 --> 00:11:50,560
should be able to

333
00:11:50,560 --> 00:11:53,279
read or write to the at cd

334
00:11:53,279 --> 00:11:55,519
speaking of fcd brings us to our next

335
00:11:55,519 --> 00:11:57,200
component here

336
00:11:57,200 --> 00:11:58,560
this is where the cluster state is

337
00:11:58,560 --> 00:12:01,600
stored it's stay stored in key value

338
00:12:01,600 --> 00:12:02,720
pairs

339
00:12:02,720 --> 00:12:04,399
there's one or two one of two

340
00:12:04,399 --> 00:12:06,399
typographies that you can choose from

341
00:12:06,399 --> 00:12:08,959
the first one being a stack topography

342
00:12:08,959 --> 00:12:12,240
where the fcd is provisioned on the same

343
00:12:12,240 --> 00:12:14,079
host as the control plane

344
00:12:14,079 --> 00:12:17,839
or a external topography where the cd is

345
00:12:17,839 --> 00:12:20,560
provisioned on a dedicated separate host

346
00:12:20,560 --> 00:12:22,399
with the best practice being the

347
00:12:22,399 --> 00:12:24,240
external topography for security and

348
00:12:24,240 --> 00:12:26,720
fault tolerance

349
00:12:26,720 --> 00:12:29,120
the node plane the worker nodes

350
00:12:29,120 --> 00:12:31,200
there's a few components here

351
00:12:31,200 --> 00:12:34,000
the first component being the cubelet

352
00:12:34,000 --> 00:12:36,320
the cubelet runs on each worker node and

353
00:12:36,320 --> 00:12:38,480
is used to communicate with the control

354
00:12:38,480 --> 00:12:40,639
plane it pulls back and waits for any

355
00:12:40,639 --> 00:12:42,560
new instructions

356
00:12:42,560 --> 00:12:45,200
then we have the cube proxy

357
00:12:45,200 --> 00:12:47,040
this is the kubernetes network proxy

358
00:12:47,040 --> 00:12:48,880
that runs on each node that handles

359
00:12:48,880 --> 00:12:50,880
networking and dns within the cluster

360
00:12:50,880 --> 00:12:53,279
and just basically writes a whole heap

361
00:12:53,279 --> 00:12:56,639
of iptables rules on each node

362
00:12:56,639 --> 00:12:58,880
and finally we have the container

363
00:12:58,880 --> 00:12:59,920
runtime

364
00:12:59,920 --> 00:13:02,000
since kubernetes doesn't actually run

365
00:13:02,000 --> 00:13:03,760
containers itself it requires a

366
00:13:03,760 --> 00:13:05,680
container runtime on the worker nodes to

367
00:13:05,680 --> 00:13:07,279
do so

368
00:13:07,279 --> 00:13:10,240
popular examples being cryo rocket and

369
00:13:10,240 --> 00:13:12,720
the most commonly used container d used

370
00:13:12,720 --> 00:13:15,519
by docker

371
00:13:15,680 --> 00:13:17,440
and then finally

372
00:13:17,440 --> 00:13:20,720
some kubernetes objects

373
00:13:20,720 --> 00:13:23,120
first we have these pods here they are

374
00:13:23,120 --> 00:13:25,120
the smallest of the kubernetes objects

375
00:13:25,120 --> 00:13:28,079
and is a logical collection of one or

376
00:13:28,079 --> 00:13:29,760
more containers

377
00:13:29,760 --> 00:13:32,880
kubernetes pods are non-permanent

378
00:13:32,880 --> 00:13:35,200
objects they are ephemeral or very

379
00:13:35,200 --> 00:13:36,880
short-lasting

380
00:13:36,880 --> 00:13:39,040
they are created or destroyed

381
00:13:39,040 --> 00:13:41,040
to keep the current state matching that

382
00:13:41,040 --> 00:13:43,519
desired state which isn't super ideal

383
00:13:43,519 --> 00:13:44,959
when you're trying to

384
00:13:44,959 --> 00:13:46,880
communicate with any of these pods for

385
00:13:46,880 --> 00:13:48,560
your application

386
00:13:48,560 --> 00:13:51,199
to solve that problem kubernetes created

387
00:13:51,199 --> 00:13:52,800
a higher level abstraction for

388
00:13:52,800 --> 00:13:55,920
communication which they call a service

389
00:13:55,920 --> 00:13:58,240
which is our next one

390
00:13:58,240 --> 00:14:00,320
a service logically groups pods through

391
00:14:00,320 --> 00:14:03,120
the use of labels and selectors and

392
00:14:03,120 --> 00:14:05,440
gives the group a dns name and a service

393
00:14:05,440 --> 00:14:06,399
ip

394
00:14:06,399 --> 00:14:08,399
this also provides some load balancing

395
00:14:08,399 --> 00:14:10,000
for the pods

396
00:14:10,000 --> 00:14:13,040
and allows an

397
00:14:13,040 --> 00:14:14,480
sorry

398
00:14:14,480 --> 00:14:18,480
consistent external ip

399
00:14:20,959 --> 00:14:22,480
these services need to authenticate to

400
00:14:22,480 --> 00:14:24,399
each other within the cluster and the

401
00:14:24,399 --> 00:14:26,959
way that they are provided an identity

402
00:14:26,959 --> 00:14:29,120
is through something called a

403
00:14:29,120 --> 00:14:31,839
service account

404
00:14:32,880 --> 00:14:34,720
perfect good thing you're tall

405
00:14:34,720 --> 00:14:36,560
a service account provides an identity

406
00:14:36,560 --> 00:14:40,959
for processes that run within a pod

407
00:14:40,959 --> 00:14:43,519
and then finally secrets

408
00:14:43,519 --> 00:14:46,000
the identity for a service account is a

409
00:14:46,000 --> 00:14:47,199
token

410
00:14:47,199 --> 00:14:49,440
a token that is mounted within

411
00:14:49,440 --> 00:14:52,480
a pod whoever has that token

412
00:14:52,480 --> 00:14:54,240
can authenticate to

413
00:14:54,240 --> 00:14:56,800
um as that service account that token is

414
00:14:56,800 --> 00:14:59,199
stored in kubernetes secrets

415
00:14:59,199 --> 00:15:01,440
and is typically mounted at

416
00:15:01,440 --> 00:15:04,480
var run secrets kubernetes dot io

417
00:15:04,480 --> 00:15:05,680
service account

418
00:15:05,680 --> 00:15:08,079
token

419
00:15:08,079 --> 00:15:10,239
so

420
00:15:10,880 --> 00:15:13,920
that is a whole heap of information in a

421
00:15:13,920 --> 00:15:15,199
very

422
00:15:15,199 --> 00:15:17,440
short amount of time and then that is

423
00:15:17,440 --> 00:15:19,040
just the tip of the iceberg this is a

424
00:15:19,040 --> 00:15:20,880
pretty complex beast

425
00:15:20,880 --> 00:15:22,880
um

426
00:15:22,880 --> 00:15:24,560
so if you're confused don't don't feel

427
00:15:24,560 --> 00:15:28,160
bad um i was too for quite some time

428
00:15:28,160 --> 00:15:31,040
but that's confused right i know same

429
00:15:31,040 --> 00:15:33,199
so that this complexity is the very

430
00:15:33,199 --> 00:15:35,839
reason why it can create such a big

431
00:15:35,839 --> 00:15:38,480
attack surface for these clusters um

432
00:15:38,480 --> 00:15:41,040
which bring us to the next part of our

433
00:15:41,040 --> 00:15:44,000
presentation absolutely awesome um cool

434
00:15:44,000 --> 00:15:47,279
so next slide over um so uh if you

435
00:15:47,279 --> 00:15:49,839
haven't figured out by now uh k8s is is

436
00:15:49,839 --> 00:15:51,040
the uh

437
00:15:51,040 --> 00:15:53,920
a new nymph today i learned um of uh of

438
00:15:53,920 --> 00:15:56,399
uh of kubernetes um so if uh if you're

439
00:15:56,399 --> 00:15:58,959
wondering at all um uh francesco had a

440
00:15:58,959 --> 00:16:01,040
great talk on how much he loves acronyms

441
00:16:01,040 --> 00:16:02,959
um uh so please go up and just have a

442
00:16:02,959 --> 00:16:04,320
chat with francesco obviously that's uh

443
00:16:04,320 --> 00:16:05,920
that's his talk there which is of course

444
00:16:05,920 --> 00:16:07,600
continuous assurance automating cloud

445
00:16:07,600 --> 00:16:10,079
configuration and security um rolls off

446
00:16:10,079 --> 00:16:12,720
the tongue um so uh yeah go have a chat

447
00:16:12,720 --> 00:16:14,399
with francesco if uh if you wanted to

448
00:16:14,399 --> 00:16:16,399
learn more about um numero nymph he

449
00:16:16,399 --> 00:16:21,040
loves acronyms um cool so uh next up uh

450
00:16:21,040 --> 00:16:22,240
so we're gonna delve into attacking

451
00:16:22,240 --> 00:16:24,079
kubernetes a little bit um and uh and

452
00:16:24,079 --> 00:16:25,519
hopefully have a little bit of fun uh

453
00:16:25,519 --> 00:16:27,440
we'll talk about the overall methodology

454
00:16:27,440 --> 00:16:29,680
um so broadly it you know this is the uh

455
00:16:29,680 --> 00:16:32,320
the threat cyber viking attack chain um

456
00:16:32,320 --> 00:16:35,120
so uh uh yeah threat but rest in peace

457
00:16:35,120 --> 00:16:37,360
um uh we'll go through a few different

458
00:16:37,360 --> 00:16:39,600
stages here so initially enumeration

459
00:16:39,600 --> 00:16:40,959
figuring out about your cluster itself

460
00:16:40,959 --> 00:16:42,800
doing external reconnaissance your

461
00:16:42,800 --> 00:16:44,399
initial foothold really you start with a

462
00:16:44,399 --> 00:16:46,560
deployment here

463
00:16:46,560 --> 00:16:48,079
privilege escalation what access do you

464
00:16:48,079 --> 00:16:49,600
have what do you want to get towards

465
00:16:49,600 --> 00:16:51,680
then finally persistence um once you

466
00:16:51,680 --> 00:16:53,199
have that cluster administrator access

467
00:16:53,199 --> 00:16:55,199
what can you do what fun can you have uh

468
00:16:55,199 --> 00:16:56,560
how can you crush your enemies and see

469
00:16:56,560 --> 00:16:57,920
them driven before you

470
00:16:57,920 --> 00:17:00,639
um cool so initially enumeration plenty

471
00:17:00,639 --> 00:17:02,320
of tools to help you here really uh so

472
00:17:02,320 --> 00:17:04,079
coupe audit coupe striker coupe bench

473
00:17:04,079 --> 00:17:06,160
coupe hunter pretty much any coup plus

474
00:17:06,160 --> 00:17:07,760
word google it you'll find some sort of

475
00:17:07,760 --> 00:17:10,160
tool um uh really you need the address

476
00:17:10,160 --> 00:17:12,720
of the api server itself um uh these can

477
00:17:12,720 --> 00:17:16,160
be found in cube config files um uh

478
00:17:16,160 --> 00:17:17,359
also credentials are a great place to

479
00:17:17,359 --> 00:17:18,640
pilfer from there if you end up on a

480
00:17:18,640 --> 00:17:20,319
machine

481
00:17:20,319 --> 00:17:22,480
but one thing of note here is really

482
00:17:22,480 --> 00:17:24,799
this super short upgrade life cycle of

483
00:17:24,799 --> 00:17:27,520
clusters for example 1.18 was released a

484
00:17:27,520 --> 00:17:29,840
year and seven months ago it was end of

485
00:17:29,840 --> 00:17:32,559
life four months ago so that was a year

486
00:17:32,559 --> 00:17:34,000
and three months from hey we've launched

487
00:17:34,000 --> 00:17:35,840
this we're not supporting it anymore uh

488
00:17:35,840 --> 00:17:37,360
there are no real long-term

489
00:17:37,360 --> 00:17:40,000
lts versions at the moment um so yeah

490
00:17:40,000 --> 00:17:41,280
most people don't keep up to date with

491
00:17:41,280 --> 00:17:42,799
patching so when you look at external

492
00:17:42,799 --> 00:17:44,880
recon look for versions and yeah more

493
00:17:44,880 --> 00:17:46,480
often than not they're out of date

494
00:17:46,480 --> 00:17:48,960
uh next up uh we've got uh the initial

495
00:17:48,960 --> 00:17:50,799
foothold here uh so if you find yourself

496
00:17:50,799 --> 00:17:52,080
with shell in an application there's a

497
00:17:52,080 --> 00:17:53,840
great tool am i contained by jessica

498
00:17:53,840 --> 00:17:55,520
frazelle uh which tells you not only

499
00:17:55,520 --> 00:17:58,160
which container runtime is

500
00:17:58,160 --> 00:17:59,919
is operating there but also what are

501
00:17:59,919 --> 00:18:01,039
some of the system syscalls and

502
00:18:01,039 --> 00:18:02,320
capabilities and some of the goodies

503
00:18:02,320 --> 00:18:04,720
that you have uh the ability to do um

504
00:18:04,720 --> 00:18:06,080
but yeah broadly there there's your

505
00:18:06,080 --> 00:18:07,520
standard you know rce and application

506
00:18:07,520 --> 00:18:08,559
right we're talking about attacking

507
00:18:08,559 --> 00:18:09,840
kubernetes so we're talking about

508
00:18:09,840 --> 00:18:11,760
attacking the infrastructure itself

509
00:18:11,760 --> 00:18:14,080
post-exploitation of an application um

510
00:18:14,080 --> 00:18:15,280
other ways that you can get there

511
00:18:15,280 --> 00:18:17,760
deployment via developers and ci via the

512
00:18:17,760 --> 00:18:20,000
normal flow convincing a dev to you know

513
00:18:20,000 --> 00:18:22,559
sneak in some malicious code um or

514
00:18:22,559 --> 00:18:24,320
external packages as well right back

515
00:18:24,320 --> 00:18:27,039
door images dependencies um yeah the old

516
00:18:27,039 --> 00:18:28,320
left pad issue that everyone's still

517
00:18:28,320 --> 00:18:30,960
very familiar with um uh we'll discuss

518
00:18:30,960 --> 00:18:32,240
uh some interesting stuff around supply

519
00:18:32,240 --> 00:18:34,240
chain at the end as well uh and then

520
00:18:34,240 --> 00:18:35,760
stolen credentials of course so stealing

521
00:18:35,760 --> 00:18:38,160
credentials for uh users as i mentioned

522
00:18:38,160 --> 00:18:40,240
stealing from the config file

523
00:18:40,240 --> 00:18:41,919
or services uh the service account

524
00:18:41,919 --> 00:18:43,919
tokens we'll we'll have a bit of a demo

525
00:18:43,919 --> 00:18:46,400
about that um ssh access into nodes and

526
00:18:46,400 --> 00:18:48,960
so on um but if you end up on a machine

527
00:18:48,960 --> 00:18:51,440
with uh uh access that has a developer's

528
00:18:51,440 --> 00:18:53,520
machine um if you want to get into a pod

529
00:18:53,520 --> 00:18:55,520
it's kube control exact or coupe cuddle

530
00:18:55,520 --> 00:18:57,520
uh is uh is uh another way it's

531
00:18:57,520 --> 00:18:59,039
pronounced um but you can just exact

532
00:18:59,039 --> 00:19:00,400
straight into pods if you have the the

533
00:19:00,400 --> 00:19:01,840
permissions to do so

534
00:19:01,840 --> 00:19:03,760
um so from that point you've got a shell

535
00:19:03,760 --> 00:19:05,840
on a pod what do you do next um you want

536
00:19:05,840 --> 00:19:07,440
these container breakouts um which

537
00:19:07,440 --> 00:19:09,200
sounds a lot more fancy than they really

538
00:19:09,200 --> 00:19:11,039
are they're just misconfigurations of

539
00:19:11,039 --> 00:19:12,799
the ways that uh you know containers can

540
00:19:12,799 --> 00:19:14,640
work in terms of mounts and networking

541
00:19:14,640 --> 00:19:16,559
and so on uh there's this tool here

542
00:19:16,559 --> 00:19:18,960
called uh pi righties parrots i think

543
00:19:18,960 --> 00:19:20,960
it's the greek word for pirate um by the

544
00:19:20,960 --> 00:19:22,400
inguardians team it's a pretty

545
00:19:22,400 --> 00:19:25,120
interesting tool um uh it does a lot of

546
00:19:25,120 --> 00:19:26,240
the enumeration for you of what's

547
00:19:26,240 --> 00:19:28,720
possible um from within a container um

548
00:19:28,720 --> 00:19:30,640
but broadly the way that will always

549
00:19:30,640 --> 00:19:32,880
work for you uh within uh most

550
00:19:32,880 --> 00:19:34,880
kubernetes accounts is really service

551
00:19:34,880 --> 00:19:37,039
account um uh dancing so you steal the

552
00:19:37,039 --> 00:19:38,880
secrets from uh you know the still steal

553
00:19:38,880 --> 00:19:41,520
the slogan uh the token from secrets i

554
00:19:41,520 --> 00:19:44,720
need less caffeine um

555
00:19:44,720 --> 00:19:46,400
you still from that path there uh which

556
00:19:46,400 --> 00:19:48,480
is where it's mounted on desk uh yeah uh

557
00:19:48,480 --> 00:19:50,240
via run secrets kubernetes io service

558
00:19:50,240 --> 00:19:51,440
account token

559
00:19:51,440 --> 00:19:53,280
and then this wonderful wonderful helper

560
00:19:53,280 --> 00:19:56,080
function uh up until a little while ago

561
00:19:56,080 --> 00:19:57,440
actually it's been there for a little uh

562
00:19:57,440 --> 00:20:00,640
for a few versions now but um prior to

563
00:20:00,640 --> 00:20:02,799
kubecontrol auth can i list you had to

564
00:20:02,799 --> 00:20:04,480
go through and enumerate what of each of

565
00:20:04,480 --> 00:20:05,760
the different permissions so you get a

566
00:20:05,760 --> 00:20:07,520
service account token what can i do with

567
00:20:07,520 --> 00:20:09,360
this you got to go and try and fail and

568
00:20:09,360 --> 00:20:10,960
then the developers

569
00:20:10,960 --> 00:20:13,280
bless them when and put in this helper

570
00:20:13,280 --> 00:20:14,640
that gives you a matrix of everything

571
00:20:14,640 --> 00:20:15,919
these are the things you can do you're

572
00:20:15,919 --> 00:20:18,080
allowed to access these uh these verbs

573
00:20:18,080 --> 00:20:19,840
in these name spaces against these

574
00:20:19,840 --> 00:20:22,240
objects so handy really handy for an

575
00:20:22,240 --> 00:20:24,640
attacker's perspective

576
00:20:24,640 --> 00:20:26,000
then there's also the ability to

577
00:20:26,000 --> 00:20:27,600
impersonate as service accounts as well

578
00:20:27,600 --> 00:20:29,360
so the dash dash as

579
00:20:29,360 --> 00:20:31,919
service account or dash as user allows

580
00:20:31,919 --> 00:20:35,039
you to authors the initial user you you

581
00:20:35,039 --> 00:20:36,480
are but then if you have the ability to

582
00:20:36,480 --> 00:20:38,320
impersonate other users you can then

583
00:20:38,320 --> 00:20:40,559
behave as them um so that's a good way

584
00:20:40,559 --> 00:20:42,159
obviously for privilege escalation from

585
00:20:42,159 --> 00:20:42,960
there

586
00:20:42,960 --> 00:20:45,520
if you have the capabilities to do so

587
00:20:45,520 --> 00:20:47,600
and then the final bit uh some of the

588
00:20:47,600 --> 00:20:49,280
fun things that you can do once uh once

589
00:20:49,280 --> 00:20:51,520
you have clustered oh uh i forgot about

590
00:20:51,520 --> 00:20:53,679
this one as well so this is a a tweet

591
00:20:53,679 --> 00:20:56,559
goal from uh from duffy cooley maui lion

592
00:20:56,559 --> 00:20:58,000
great guy to follow on twitter when it

593
00:20:58,000 --> 00:20:59,280
comes to

594
00:20:59,280 --> 00:21:00,880
general kubernetes security he used to

595
00:21:00,880 --> 00:21:03,360
run a podcast called tgik

596
00:21:03,360 --> 00:21:04,880
which has a lot of really interesting

597
00:21:04,880 --> 00:21:06,799
material on there but this is a

598
00:21:06,799 --> 00:21:08,559
one-liner technically

599
00:21:08,559 --> 00:21:10,640
that if you have the ability to

600
00:21:10,640 --> 00:21:11,440
run

601
00:21:11,440 --> 00:21:13,360
workloads on a cluster say pretty

602
00:21:13,360 --> 00:21:15,120
standard developer account

603
00:21:15,120 --> 00:21:17,200
and they're not necessarily checking the

604
00:21:17,200 --> 00:21:19,120
security configuration of it

605
00:21:19,120 --> 00:21:21,280
this will give you shell in a pod that

606
00:21:21,280 --> 00:21:23,120
has uh within the root name space on a

607
00:21:23,120 --> 00:21:25,520
node um so root access to a node if you

608
00:21:25,520 --> 00:21:27,520
can trigger deployments i've recently

609
00:21:27,520 --> 00:21:29,520
retweeted that so follow me at any

610
00:21:29,520 --> 00:21:32,240
frenchie or follow my line it is from a

611
00:21:32,240 --> 00:21:34,640
while ago 2019 um so yeah it's it's

612
00:21:34,640 --> 00:21:36,799
probably easy to find via my account um

613
00:21:36,799 --> 00:21:38,320
but yeah that's one handy way that you

614
00:21:38,320 --> 00:21:40,080
can probably escalate to

615
00:21:40,080 --> 00:21:42,000
having root on the node

616
00:21:42,000 --> 00:21:44,159
and then persistence so say you get to a

617
00:21:44,159 --> 00:21:45,520
point where you have cluster admin

618
00:21:45,520 --> 00:21:48,240
access right start or star um you can

619
00:21:48,240 --> 00:21:50,000
have a lot of fun there there's some

620
00:21:50,000 --> 00:21:51,760
real like like

621
00:21:51,760 --> 00:21:53,120
amazing creative stuff that you can do

622
00:21:53,120 --> 00:21:55,120
within the complexity of kubernetes so

623
00:21:55,120 --> 00:21:56,880
malicious daemon sets daemon sets are

624
00:21:56,880 --> 00:21:59,120
effectively uh

625
00:21:59,120 --> 00:22:00,799
yeah daemons are processors that run on

626
00:22:00,799 --> 00:22:02,320
each of the nodes whenever a new node is

627
00:22:02,320 --> 00:22:04,240
created it'll automatically create the

628
00:22:04,240 --> 00:22:06,320
same daemon set on there so if you want

629
00:22:06,320 --> 00:22:07,520
to have all of the new nodes in a

630
00:22:07,520 --> 00:22:08,960
cluster connect back to your c2

631
00:22:08,960 --> 00:22:11,679
infrastructure great you can do that

632
00:22:11,679 --> 00:22:13,520
malicious crds this is a blog post that

633
00:22:13,520 --> 00:22:15,440
came out a couple of days ago uh turns

634
00:22:15,440 --> 00:22:17,200
out it's probably not as impactful as um

635
00:22:17,200 --> 00:22:19,760
as we as we thought but crds are custom

636
00:22:19,760 --> 00:22:21,360
resource definitions so we've talked

637
00:22:21,360 --> 00:22:23,200
about services and pods they're

638
00:22:23,200 --> 00:22:25,440
resources that exist when versions are

639
00:22:25,440 --> 00:22:27,039
in beta or you want to extend your own

640
00:22:27,039 --> 00:22:29,120
cluster you can write a custom resource

641
00:22:29,120 --> 00:22:30,559
definition

642
00:22:30,559 --> 00:22:32,640
and kubernetes also uses these crds for

643
00:22:32,640 --> 00:22:34,000
their own internals

644
00:22:34,000 --> 00:22:35,760
and you can stomp on those internals so

645
00:22:35,760 --> 00:22:39,200
you can overwrite the api servers crd

646
00:22:39,200 --> 00:22:40,880
turns out it doesn't actually overwrite

647
00:22:40,880 --> 00:22:42,799
the api server but it still causes some

648
00:22:42,799 --> 00:22:44,640
funky with behavior with how could uh

649
00:22:44,640 --> 00:22:47,760
control clients handle this stuff um so

650
00:22:47,760 --> 00:22:49,280
smell test is kind of there if you want

651
00:22:49,280 --> 00:22:50,320
to play around and look at some stuff

652
00:22:50,320 --> 00:22:51,919
this could be really interesting

653
00:22:51,919 --> 00:22:53,840
malicious admission control um if you've

654
00:22:53,840 --> 00:22:54,960
seen me present before you might have

655
00:22:54,960 --> 00:22:56,240
heard me waffle on about a thing called

656
00:22:56,240 --> 00:22:58,559
k-rail um k-rail is an admission control

657
00:22:58,559 --> 00:23:02,159
tool for good that we wrote at cruz um

658
00:23:02,159 --> 00:23:03,760
and in that case it's like hey you know

659
00:23:03,760 --> 00:23:05,520
before you're allowed in the api server

660
00:23:05,520 --> 00:23:07,039
sends it off to admission control and

661
00:23:07,039 --> 00:23:08,960
says hey is this good or bad do we want

662
00:23:08,960 --> 00:23:10,559
to you know mutate this change it a

663
00:23:10,559 --> 00:23:12,080
little bit here's a list of security

664
00:23:12,080 --> 00:23:13,520
policies thumbs up thumbs down we're

665
00:23:13,520 --> 00:23:15,600
letting you into our cluster well turns

666
00:23:15,600 --> 00:23:16,960
out you can have malicious admission

667
00:23:16,960 --> 00:23:18,880
control which is hey you're submitting a

668
00:23:18,880 --> 00:23:20,559
workload with secrets we will let you

669
00:23:20,559 --> 00:23:22,400
write in but not before we send a copy

670
00:23:22,400 --> 00:23:24,720
of those secrets off to frenchie

671
00:23:24,720 --> 00:23:27,039
kind of handy as well um that idea and

672
00:23:27,039 --> 00:23:28,480
c2 bernetti's which we'll talk at the

673
00:23:28,480 --> 00:23:30,640
end there is uh belongs to ian coldwater

674
00:23:30,640 --> 00:23:33,440
and brad geesman 2019 black hat talk i

675
00:23:33,440 --> 00:23:36,799
believe um pretty awesome talk there uh

676
00:23:36,799 --> 00:23:38,000
then the last little section we'll talk

677
00:23:38,000 --> 00:23:40,080
about um some schniki modes so say you

678
00:23:40,080 --> 00:23:42,559
you like you want to uh evade from an

679
00:23:42,559 --> 00:23:44,960
administrator uh so in this case all of

680
00:23:44,960 --> 00:23:46,320
the things we've talked about like damon

681
00:23:46,320 --> 00:23:48,880
said crds if i as an administrator go

682
00:23:48,880 --> 00:23:50,080
hey something funky is happening on my

683
00:23:50,080 --> 00:23:52,240
cluster go on query the api server hey

684
00:23:52,240 --> 00:23:54,400
what's going on cube control get

685
00:23:54,400 --> 00:23:56,559
crds i'm going to see that funky stuff

686
00:23:56,559 --> 00:23:58,240
has happened say you want to fly under

687
00:23:58,240 --> 00:23:59,679
that radar

688
00:23:59,679 --> 00:24:01,039
statically defined pods are a pretty

689
00:24:01,039 --> 00:24:02,400
great way to do this so statically

690
00:24:02,400 --> 00:24:04,159
defined pods if you have a file system

691
00:24:04,159 --> 00:24:05,440
mount on the host and you can drop a

692
00:24:05,440 --> 00:24:08,400
yaml file into that directory there

693
00:24:08,400 --> 00:24:10,880
scdc kubelet d

694
00:24:10,880 --> 00:24:13,039
that pod

695
00:24:13,039 --> 00:24:15,600
will be created not talking to the api

696
00:24:15,600 --> 00:24:17,360
server at all it'll the kubelet will

697
00:24:17,360 --> 00:24:19,120
look in that directory and go oh cool i

698
00:24:19,120 --> 00:24:20,480
meant to create this pod i will go and

699
00:24:20,480 --> 00:24:21,919
create this pod

700
00:24:21,919 --> 00:24:24,080
uh it bypasses the api server so it

701
00:24:24,080 --> 00:24:26,480
bypasses admission control um if you're

702
00:24:26,480 --> 00:24:28,240
in a namespace that exists it'll

703
00:24:28,240 --> 00:24:30,159
register with the api server and say hey

704
00:24:30,159 --> 00:24:32,000
by the way you're here but if you create

705
00:24:32,000 --> 00:24:33,760
a statically defined pod in a namespace

706
00:24:33,760 --> 00:24:36,320
that doesn't exist the api server never

707
00:24:36,320 --> 00:24:37,760
finds out about it and you have a pod

708
00:24:37,760 --> 00:24:39,120
that's running that's completely

709
00:24:39,120 --> 00:24:40,720
stealthy

710
00:24:40,720 --> 00:24:42,320
if you can overwrite the kubernetes

711
00:24:42,320 --> 00:24:44,159
manifest cube api server that's the

712
00:24:44,159 --> 00:24:46,080
actual manifest we're talking about crds

713
00:24:46,080 --> 00:24:48,080
stomping on the api server that's the

714
00:24:48,080 --> 00:24:49,760
real one if you can edit that you can

715
00:24:49,760 --> 00:24:51,679
change the api server uh and then

716
00:24:51,679 --> 00:24:53,520
finally my favorite one which again uh

717
00:24:53,520 --> 00:24:55,760
ian coldwater and brad giessmann great

718
00:24:55,760 --> 00:24:57,279
seekhonk

719
00:24:57,279 --> 00:24:59,840
c-tubenettis is probably the the coolest

720
00:24:59,840 --> 00:25:02,240
way of abusing kubernetes i've heard of

721
00:25:02,240 --> 00:25:04,720
in uh the last few years basically once

722
00:25:04,720 --> 00:25:06,159
you have rude access to a node and you

723
00:25:06,159 --> 00:25:07,840
have the ability to install stuff you

724
00:25:07,840 --> 00:25:10,159
install your own kubernetes agent any

725
00:25:10,159 --> 00:25:11,200
administrator is going to look at it and

726
00:25:11,200 --> 00:25:12,159
be like there's a kubelet there's a

727
00:25:12,159 --> 00:25:14,159
keyboard process two are running not too

728
00:25:14,159 --> 00:25:15,600
much of a big deal

729
00:25:15,600 --> 00:25:18,320
but you then enroll yours out to your

730
00:25:18,320 --> 00:25:20,720
own api server somewhere else not within

731
00:25:20,720 --> 00:25:22,559
the cluster it goes and talks somewhere

732
00:25:22,559 --> 00:25:23,919
else they're probably not going to look

733
00:25:23,919 --> 00:25:26,559
at 443 and go hmm that's suspicious it's

734
00:25:26,559 --> 00:25:28,000
fine it's there it's you know it's meant

735
00:25:28,000 --> 00:25:29,600
to happen especially if you target it

736
00:25:29,600 --> 00:25:31,279
and say oh it's an api server running in

737
00:25:31,279 --> 00:25:34,159
aws for kubernetes oh it's another api

738
00:25:34,159 --> 00:25:35,840
server running in aws for company yeah

739
00:25:35,840 --> 00:25:37,360
it's probably legit

740
00:25:37,360 --> 00:25:39,039
but you then have full control of all

741
00:25:39,039 --> 00:25:40,640
the nodes you can have full visibility

742
00:25:40,640 --> 00:25:42,559
onto all workloads all the secrets full

743
00:25:42,559 --> 00:25:44,320
cluster compromise and it's pretty

744
00:25:44,320 --> 00:25:47,279
invisible um so c2 beneti is pretty

745
00:25:47,279 --> 00:25:49,120
pretty sweet um

746
00:25:49,120 --> 00:25:50,880
cool uh if you want to have a go at

747
00:25:50,880 --> 00:25:53,120
practicing some of your pew pew um uh

748
00:25:53,120 --> 00:25:57,120
honk ci uh honk ctl is uh by a couple of

749
00:25:57,120 --> 00:25:58,400
people out of the states um it was a

750
00:25:58,400 --> 00:26:00,320
really fun ctf which is just purely

751
00:26:00,320 --> 00:26:03,840
within um kubernetes um not too much of

752
00:26:03,840 --> 00:26:05,279
a spoiler alert with some of the stuff

753
00:26:05,279 --> 00:26:07,039
that we'll be talking about but yeah if

754
00:26:07,039 --> 00:26:08,320
you want to give it a go maybe put

755
00:26:08,320 --> 00:26:10,320
fingers in your ears

756
00:26:10,320 --> 00:26:11,760
kubernetes go as well as another

757
00:26:11,760 --> 00:26:13,120
intentionally vulnerable kubernetes

758
00:26:13,120 --> 00:26:16,080
cluster um and with that i'll jump over

759
00:26:16,080 --> 00:26:18,640
to a quick time check and

760
00:26:18,640 --> 00:26:21,039
switch over to the demo bit

761
00:26:21,039 --> 00:26:22,400
uh so

762
00:26:22,400 --> 00:26:25,840
can you all see that is that big enough

763
00:26:26,559 --> 00:26:29,039
is the audience dead

764
00:26:29,039 --> 00:26:30,640
yes good

765
00:26:30,640 --> 00:26:32,320
land of living dead wonderful all right

766
00:26:32,320 --> 00:26:34,400
so

767
00:26:34,400 --> 00:26:36,640
cool so we can see here um this little

768
00:26:36,640 --> 00:26:38,080
who in my thing is not actually as part

769
00:26:38,080 --> 00:26:39,760
of the kube control client it's a helper

770
00:26:39,760 --> 00:26:41,360
that i've got but we start off with this

771
00:26:41,360 --> 00:26:44,480
no fun allowed user uh because remember

772
00:26:44,480 --> 00:26:48,080
no fun allowed in this talk uh so then

773
00:26:48,080 --> 00:26:50,400
uh we can see what we do uh with this we

774
00:26:50,400 --> 00:26:53,840
try and access some secrets

775
00:26:54,400 --> 00:26:56,159
error message not allowed to have it

776
00:26:56,159 --> 00:26:57,520
okay so

777
00:26:57,520 --> 00:26:59,600
then we use this wonderful helper court

778
00:26:59,600 --> 00:27:02,960
ana can i i can't spell oh man that

779
00:27:02,960 --> 00:27:04,720
presentation is terrible basically it

780
00:27:04,720 --> 00:27:06,880
spits out this matrix which we had not

781
00:27:06,880 --> 00:27:08,400
tested on the big screen obviously

782
00:27:08,400 --> 00:27:10,400
enough but what it does tell us which

783
00:27:10,400 --> 00:27:12,240
you can kind of make sense of service

784
00:27:12,240 --> 00:27:14,640
accounts read only user impersonate so

785
00:27:14,640 --> 00:27:16,559
we have the ability even though this no

786
00:27:16,559 --> 00:27:18,640
fun allowed user is there it does have

787
00:27:18,640 --> 00:27:19,840
the ability to impersonate this

788
00:27:19,840 --> 00:27:21,520
read-only user which is a pretty common

789
00:27:21,520 --> 00:27:22,880
use case there's sometimes there might

790
00:27:22,880 --> 00:27:25,200
be a super lockdown uh service account

791
00:27:25,200 --> 00:27:26,799
and then the devs are just like well

792
00:27:26,799 --> 00:27:29,279
we've got to read you know access we

793
00:27:29,279 --> 00:27:30,880
need these images so yeah give us access

794
00:27:30,880 --> 00:27:32,880
to read only yep totally fair we'll do

795
00:27:32,880 --> 00:27:34,880
it seems like about the same risk won't

796
00:27:34,880 --> 00:27:36,880
be too different um

797
00:27:36,880 --> 00:27:37,760
so

798
00:27:37,760 --> 00:27:39,360
all right well then let's do that but

799
00:27:39,360 --> 00:27:41,919
we'll auth list as

800
00:27:41,919 --> 00:27:44,320
that specific user

801
00:27:44,320 --> 00:27:47,360
see what that gives us

802
00:27:47,760 --> 00:27:49,279
it gives us

803
00:27:49,279 --> 00:27:50,640
a frozen

804
00:27:50,640 --> 00:27:52,240
prompt there we are i thought i was

805
00:27:52,240 --> 00:27:54,240
gonna have to sacrifice myself yeah no

806
00:27:54,240 --> 00:27:56,000
we're joking abby was like between the

807
00:27:56,000 --> 00:27:57,279
two of us one of us was going to

808
00:27:57,279 --> 00:27:59,440
sacrifice ourselves to the demo gods um

809
00:27:59,440 --> 00:28:01,520
but so far so good all right so yeah

810
00:28:01,520 --> 00:28:02,720
here

811
00:28:02,720 --> 00:28:04,880
what can i do as that read only so again

812
00:28:04,880 --> 00:28:06,240
formatting is terrible but basically

813
00:28:06,240 --> 00:28:07,600
what this tells us is like cool yep

814
00:28:07,600 --> 00:28:08,799
you've got read-only access you don't

815
00:28:08,799 --> 00:28:10,240
have the ability to execute anything but

816
00:28:10,240 --> 00:28:12,480
it does have read-only access to secrets

817
00:28:12,480 --> 00:28:14,559
cool we know what's in secrets service

818
00:28:14,559 --> 00:28:16,080
account tokens let's go have a look at

819
00:28:16,080 --> 00:28:18,240
secrets now see what we can get

820
00:28:18,240 --> 00:28:21,440
so we're we'll do the same

821
00:28:22,080 --> 00:28:24,640
chaos can i yeah instead of can i i want

822
00:28:24,640 --> 00:28:27,600
to start looking at some secrets

823
00:28:27,600 --> 00:28:29,760
cool get secrets

824
00:28:29,760 --> 00:28:31,120
oh this spits out a bunch of interesting

825
00:28:31,120 --> 00:28:32,480
stuff which again formatting is pretty

826
00:28:32,480 --> 00:28:34,799
shocking uh but you can see admin token

827
00:28:34,799 --> 00:28:35,919
all right that sounds like a party we've

828
00:28:35,919 --> 00:28:37,440
got read only user already have access

829
00:28:37,440 --> 00:28:39,440
to that no fun allowed default token

830
00:28:39,440 --> 00:28:41,600
sure and then admin token all right

831
00:28:41,600 --> 00:28:43,600
let's see if we can read what's in that

832
00:28:43,600 --> 00:28:46,240
might be some juicy stuff in there

833
00:28:46,240 --> 00:28:48,480
cool k gets secrets as this service

834
00:28:48,480 --> 00:28:50,399
account instead of getting secrets we're

835
00:28:50,399 --> 00:28:52,880
going to describe specifically

836
00:28:52,880 --> 00:28:54,640
that admin

837
00:28:54,640 --> 00:28:55,840
one

838
00:28:55,840 --> 00:28:58,240
admin token blah bam spits out a token

839
00:28:58,240 --> 00:28:59,919
for us this is that service account

840
00:28:59,919 --> 00:29:02,320
token that we can then pilfer and if we

841
00:29:02,320 --> 00:29:04,240
put into our config we're now the we can

842
00:29:04,240 --> 00:29:06,720
pretend to be this this user um so let's

843
00:29:06,720 --> 00:29:09,279
do just that

844
00:29:09,679 --> 00:29:11,840
so we'll create this little server

845
00:29:11,840 --> 00:29:14,000
config thing where we're telling it we

846
00:29:14,000 --> 00:29:15,919
want to speak to this specific um

847
00:29:15,919 --> 00:29:18,320
cluster the the kind clusters

848
00:29:18,320 --> 00:29:22,159
want to spun up locally as admin

849
00:29:22,159 --> 00:29:25,360
user admin and then we'll also

850
00:29:25,360 --> 00:29:28,000
create this new user here config set

851
00:29:28,000 --> 00:29:29,520
credential

852
00:29:29,520 --> 00:29:31,279
that we just pilfered

853
00:29:31,279 --> 00:29:32,880
this token

854
00:29:32,880 --> 00:29:34,240
bam

855
00:29:34,240 --> 00:29:38,679
then we'll switch it as that user

856
00:29:40,159 --> 00:29:42,480
admin yep and then let's have a look at

857
00:29:42,480 --> 00:29:45,039
what we can do uh

858
00:29:45,039 --> 00:29:47,120
apart from the fact that i can't type it

859
00:29:47,120 --> 00:29:49,679
should show us that we are user admin

860
00:29:49,679 --> 00:29:51,039
and then also

861
00:29:51,039 --> 00:29:52,960
can off can i

862
00:29:52,960 --> 00:29:54,960
another terribly formatted matrix which

863
00:29:54,960 --> 00:29:56,559
basically has startup star at the top so

864
00:29:56,559 --> 00:29:58,720
we've gone from like a user that has

865
00:29:58,720 --> 00:30:01,440
absolutely no access whatsoever uh up to

866
00:30:01,440 --> 00:30:02,880
read-only user which has the ability to

867
00:30:02,880 --> 00:30:04,799
peel for secrets from that we steal the

868
00:30:04,799 --> 00:30:07,440
token privilege escalate up to admin

869
00:30:07,440 --> 00:30:08,960
hopefully that makes sense

870
00:30:08,960 --> 00:30:09,919
um

871
00:30:09,919 --> 00:30:11,039
cool

872
00:30:11,039 --> 00:30:15,039
so we'll switch back to our slides

873
00:30:15,360 --> 00:30:18,320
uh cool um so

874
00:30:18,320 --> 00:30:19,600
how can you fix some of these issues so

875
00:30:19,600 --> 00:30:20,880
that was one specific example we're

876
00:30:20,880 --> 00:30:22,320
talking around privilege escalation from

877
00:30:22,320 --> 00:30:25,360
stealing service accounts um uh not all

878
00:30:25,360 --> 00:30:26,799
of these are fixed in fact only number

879
00:30:26,799 --> 00:30:28,399
four is really the only relevant one to

880
00:30:28,399 --> 00:30:30,080
that uh broadly though you absolutely

881
00:30:30,080 --> 00:30:32,159
should be patching um your clusters the

882
00:30:32,159 --> 00:30:34,559
short life cycle makes it hard make it a

883
00:30:34,559 --> 00:30:36,399
cloud provider's problem use amazon use

884
00:30:36,399 --> 00:30:38,720
google use azure um they've got

885
00:30:38,720 --> 00:30:40,720
kubernetes products for each of those um

886
00:30:40,720 --> 00:30:42,480
the more you can offload to them uh and

887
00:30:42,480 --> 00:30:43,919
the less you have to administer with the

888
00:30:43,919 --> 00:30:46,399
clusters itself the better um k rail as

889
00:30:46,399 --> 00:30:47,840
we mentioned as a tool um admission

890
00:30:47,840 --> 00:30:49,919
control broadly opa gatekeeper is kind

891
00:30:49,919 --> 00:30:52,399
of the most popular one at the moment um

892
00:30:52,399 --> 00:30:54,080
but check your workloads before you

893
00:30:54,080 --> 00:30:56,960
allow on the cluster um

894
00:30:56,960 --> 00:30:59,519
for general security configurations um

895
00:30:59,519 --> 00:31:01,519
one kind of cool thing is previously pod

896
00:31:01,519 --> 00:31:04,000
security policies uh were the preferred

897
00:31:04,000 --> 00:31:05,519
way that people would want to reason

898
00:31:05,519 --> 00:31:07,440
about attributes uh when it comes to

899
00:31:07,440 --> 00:31:08,960
security and pods they've been

900
00:31:08,960 --> 00:31:11,519
deprecated in version 1.21

901
00:31:11,519 --> 00:31:12,799
they're now moving towards admission

902
00:31:12,799 --> 00:31:14,720
control so it feels kind of nice that

903
00:31:14,720 --> 00:31:16,399
you know we wrote a tool called k-rail

904
00:31:16,399 --> 00:31:17,840
and now that feature has been kind of

905
00:31:17,840 --> 00:31:19,840
mainstreamed up into kubernetes as the

906
00:31:19,840 --> 00:31:22,559
preferred way of of managing uh security

907
00:31:22,559 --> 00:31:24,240
it's not just because like there's a lot

908
00:31:24,240 --> 00:31:25,600
of people that push it in the direction

909
00:31:25,600 --> 00:31:28,080
but it's cool to see that um third one

910
00:31:28,080 --> 00:31:30,320
there salsa and s bomb

911
00:31:30,320 --> 00:31:31,919
salsa i always have to look at the

912
00:31:31,919 --> 00:31:33,039
slides for this because i have not

913
00:31:33,039 --> 00:31:34,960
remembered the acronym but supply chain

914
00:31:34,960 --> 00:31:37,840
level for software artifacts um and s1

915
00:31:37,840 --> 00:31:39,519
which is software builder materials we

916
00:31:39,519 --> 00:31:41,440
mentioned supply chain security uh when

917
00:31:41,440 --> 00:31:44,240
it comes to uh looking at uh images um

918
00:31:44,240 --> 00:31:45,440
most people when they're deploying stuff

919
00:31:45,440 --> 00:31:46,960
don't know what's actually in in their

920
00:31:46,960 --> 00:31:49,120
uh containers are all their applications

921
00:31:49,120 --> 00:31:50,960
um uh there's a whole long list whereas

922
00:31:50,960 --> 00:31:52,720
a car right like you know recently there

923
00:31:52,720 --> 00:31:55,519
was a recall of batteries in um

924
00:31:55,519 --> 00:31:56,399
uh

925
00:31:56,399 --> 00:31:57,120
in

926
00:31:57,120 --> 00:31:59,760
gm cars uh because lg put out a bad

927
00:31:59,760 --> 00:32:01,279
battery right that comes from a software

928
00:32:01,279 --> 00:32:02,880
builder a bill of materials in the car

929
00:32:02,880 --> 00:32:04,640
they know exactly what's in it right we

930
00:32:04,640 --> 00:32:06,640
don't do that for software s bomb is an

931
00:32:06,640 --> 00:32:08,559
attempt to do that um salsa is a

932
00:32:08,559 --> 00:32:10,399
framework that gives you the ability to

933
00:32:10,399 --> 00:32:14,159
know what's uh in your uh

934
00:32:14,159 --> 00:32:15,440
what's what you're running in your

935
00:32:15,440 --> 00:32:17,200
environments with levels of maturity so

936
00:32:17,200 --> 00:32:18,559
you start level zero you don't really

937
00:32:18,559 --> 00:32:20,720
know as you're progressing mature you're

938
00:32:20,720 --> 00:32:22,799
not only you know you've got itemization

939
00:32:22,799 --> 00:32:24,159
of what's actually being being run in

940
00:32:24,159 --> 00:32:25,600
terms of all your dependencies but

941
00:32:25,600 --> 00:32:27,200
you're also doing signing around assets

942
00:32:27,200 --> 00:32:28,240
and making sure that things are getting

943
00:32:28,240 --> 00:32:29,600
pulled in so you've got

944
00:32:29,600 --> 00:32:32,000
cryptographic verification then finally

945
00:32:32,000 --> 00:32:33,440
the one that will actually prevent that

946
00:32:33,440 --> 00:32:35,440
demo that i talked about ordered to rbac

947
00:32:35,440 --> 00:32:37,120
so order to rbac is a tool which you can

948
00:32:37,120 --> 00:32:39,039
run which talks to the api server and

949
00:32:39,039 --> 00:32:40,720
says hey for this specific user what

950
00:32:40,720 --> 00:32:42,080
have they actually done what do they

951
00:32:42,080 --> 00:32:43,440
really need to do you can then order it

952
00:32:43,440 --> 00:32:46,240
and say this access is expected you know

953
00:32:46,240 --> 00:32:48,159
no fund allowed should be accessing read

954
00:32:48,159 --> 00:32:49,919
only that makes sense no fun allowed

955
00:32:49,919 --> 00:32:51,519
should not be accessing secrets what the

956
00:32:51,519 --> 00:32:53,679
hell that's kind of weird

957
00:32:53,679 --> 00:32:55,919
and then from there you can more finely

958
00:32:55,919 --> 00:32:56,960
grain

959
00:32:56,960 --> 00:33:00,640
scope your roll-based access control or

960
00:33:00,640 --> 00:33:02,799
abac as well um but yeah there's a

961
00:33:02,799 --> 00:33:03,840
couple of fixes that you want to think

962
00:33:03,840 --> 00:33:06,799
about um and with that um i hand over to

963
00:33:06,799 --> 00:33:08,640
abby for the recap

964
00:33:08,640 --> 00:33:10,320
yeah so we've talked about the

965
00:33:10,320 --> 00:33:12,240
introduction um i went over all of the

966
00:33:12,240 --> 00:33:14,559
basics we went over the kube

967
00:33:14,559 --> 00:33:16,880
101. um

968
00:33:16,880 --> 00:33:18,640
french has talked about some attack

969
00:33:18,640 --> 00:33:21,440
methodology and the fixes yep

970
00:33:21,440 --> 00:33:23,760
cool and with that we're done we'll get

971
00:33:23,760 --> 00:33:27,640
out of here for beer thanks so much

972
00:33:27,640 --> 00:33:34,950
[Applause]

