1
00:01:52,899 --> 00:01:57,219
in the boon to it's a community standard
its cross-platform

2
00:01:57,219 --> 00:02:00,949
it each other languages like you can
load PHP and 2.9

3
00:02:00,950 --> 00:02:04,619
you can cross commented on n and
basically

4
00:02:04,619 --> 00:02:07,920
it's starting to consume more and more
languages as time goes on and someday

5
00:02:07,920 --> 00:02:08,729
hopefully all

6
00:02:08,729 --> 00:02:13,129
in offers future compatibility so
whatever platform today is that you're

7
00:02:13,129 --> 00:02:13,810
targeting

8
00:02:13,810 --> 00:02:17,670
you can develop and deploy today and
hopefully your source code might run on

9
00:02:17,670 --> 00:02:19,510
tomorrow's architecture platforms

10
00:02:19,510 --> 00:02:23,780
a 128 bit processors and is
platform-independent

11
00:02:23,780 --> 00:02:27,620
which also offers us the ability to
right now where cracks that

12
00:02:27,620 --> 00:02:33,230
as we've got men are cross-platform so
this talk is focused to hackers in

13
00:02:33,230 --> 00:02:33,940
attackers

14
00:02:33,940 --> 00:02:37,099
whether you're here to learn and enjoy a
in

15
00:02:37,099 --> 00:02:40,700
just mailed other programs are you want
to attack in do vicious things to other

16
00:02:40,700 --> 00:02:41,369
programs

17
00:02:41,370 --> 00:02:44,980
that's what this is about whether you
want a cause damage to someone else you

18
00:02:44,980 --> 00:02:46,578
defend yourself against them

19
00:02:46,579 --> 00:02:50,360
you wanna bend applications for the
system as a whole you need a system to

20
00:02:50,360 --> 00:02:51,660
been to accommodate you

21
00:02:51,660 --> 00:02:55,790
for you happen to be death in you need
slight modifications like this guy your

22
00:02:55,790 --> 00:02:57,940
French in you need just a different way
and

23
00:02:57,940 --> 00:03:01,690
interacting with your programs and then
one said tiny changes made its

24
00:03:01,690 --> 00:03:05,389
entirely good or maybe just need a
one-off solution

25
00:03:05,389 --> 00:03:09,760
and that's what we as technologies can
do weekend and other applications to be

26
00:03:09,760 --> 00:03:11,078
different than they were meant to be

27
00:03:11,079 --> 00:03:14,200
so what's a nap it has our intellectual
property

28
00:03:14,200 --> 00:03:17,920
it has the objects and data that we
consider to be source code

29
00:03:17,920 --> 00:03:21,040
it has a lot since I divers inside a vid

30
00:03:21,040 --> 00:03:25,530
and inherent power that application
controls and that's what we're attacking

31
00:03:25,530 --> 00:03:30,370
we're going after the application itself
where able to infiltrate bended

32
00:03:30,370 --> 00:03:35,000
to whatever means we happen to be one to
accomplish so this isn't

33
00:03:35,000 --> 00:03:38,739
assembly level specifically not IDA Pro
kinda thing

34
00:03:38,739 --> 00:03:43,000
because when you're going to add and all
that ligation thats

35
00:03:43,000 --> 00:03:46,590
assembly code it gives you the power to

36
00:03:46,590 --> 00:03:50,340
drive that application it gives you the
power to been an application we all know

37
00:03:50,340 --> 00:03:54,060
I to pro this is a classic approach and
it was very solid for back in the day

38
00:03:54,060 --> 00:03:57,769
and hide it pro facilitated us doing
what we needed it

39
00:03:57,769 --> 00:04:00,880
gave us the ability to edit modify small
applications

40
00:04:00,880 --> 00:04:05,100
and they look like this literally there
object structure their source code was

41
00:04:05,100 --> 00:04:06,040
quite manageable

42
00:04:06,040 --> 00:04:10,179
you can keep it in your head at one
moment I'm and back then fighting an

43
00:04:10,180 --> 00:04:11,239
application

44
00:04:11,239 --> 00:04:15,299
or attacking it you needed tools that
were comparable to that application

45
00:04:15,299 --> 00:04:18,470
but now today this is more what an
application looks like

46
00:04:18,470 --> 00:04:21,949
its hundreds of objects in memory for
one small frame

47
00:04:21,949 --> 00:04:27,220
and its gigabytes of RAM and thats the
paradigm shift when you're talking about

48
00:04:27,220 --> 00:04:30,590
300 objects are three thousand objects
in 40 threads that

49
00:04:30,590 --> 00:04:33,900
IDA Pro attack and paradigms kinda falls
apart

50
00:04:33,900 --> 00:04:37,500
and that's where this all comes in using
dotnet

51
00:04:37,500 --> 00:04:40,580
and I'll framework which is pretty much
assembly code

52
00:04:40,580 --> 00:04:44,300
up a interpreted level this is I LD

53
00:04:44,300 --> 00:04:47,370
intermediate language a dotnet this is
what Don it truly is

54
00:04:47,370 --> 00:04:51,449
and this is where we attack this is
where we get that same

55
00:04:51,449 --> 00:04:55,919
ability to bend and control applications
that we had an idea pro

56
00:04:55,919 --> 00:05:00,590
and we just uses same power that we've
always had two attacker applications in

57
00:05:00,590 --> 00:05:01,710
the same fundamental did

58
00:05:01,710 --> 00:05:06,120
undeniable way let me walk you quickly
through

59
00:05:06,120 --> 00:05:10,680
quick example be compiling 13 lines a
seizure could

60
00:05:10,680 --> 00:05:14,840
when you compile these 13 lines a
seizure code in Indy compile them

61
00:05:14,840 --> 00:05:19,119
they turned into 15 lines a teacher
could 34 lines if I L

62
00:05:19,120 --> 00:05:23,180
and seventy-seven lines assembly code
and that

63
00:05:23,180 --> 00:05:27,020
is a factor out how much time you're
gonna need to spend to read

64
00:05:27,020 --> 00:05:30,849
so when I say 15 lines as he shared it
comes out barely readable

65
00:05:30,850 --> 00:05:34,840
you can quickly peruse it see what it
did figure out if its malicious

66
00:05:34,840 --> 00:05:40,060
vulnerable the thirty four lines and I L
a little more to read you have to know I

67
00:05:40,060 --> 00:05:40,669
L

68
00:05:40,669 --> 00:05:45,090
and it gets a little more ambiguous and
then once you get to assembly code

69
00:05:45,090 --> 00:05:49,388
even if you know simply coat well it
just gets blown in now you have to

70
00:05:49,389 --> 00:05:54,750
spend a lotta time processing what it
does and does not do any given mom

71
00:05:54,750 --> 00:05:58,610
and so that's why I D Pro just isn't the
tool for this because you don't want to

72
00:05:58,610 --> 00:05:59,009
be

73
00:05:59,009 --> 00:06:04,340
doing seventy seven lines processing for
13 lines have input because if you do

74
00:06:04,340 --> 00:06:09,409
your project will just lead you nowhere
and I'll just be painful

75
00:06:09,409 --> 00:06:13,110
and so that's where I come in attacking
on a marine on disk that's my thing

76
00:06:13,110 --> 00:06:16,460
we're gonna attack an application on dis

77
00:06:16,460 --> 00:06:19,930
when we attacked this application gonna
be using

78
00:06:19,930 --> 00:06:23,979
tool that I wrote called great wealth it
allows us to ended an application and

79
00:06:23,979 --> 00:06:26,758
give it fundamentally different behavior

80
00:06:26,759 --> 00:06:31,509
so let's look at acting on this this is
the old paradigm attacking

81
00:06:31,509 --> 00:06:35,050
and now we're shifting to a more
visceral strong approach

82
00:06:35,050 --> 00:06:40,759
that's what I'm hoping so let's look at
attacking Microsoft Media Center

83
00:06:40,759 --> 00:06:44,139
what does it take what is a bill to and

84
00:06:44,139 --> 00:06:48,060
yep so let me walk you through that damn

85
00:06:48,060 --> 00:06:51,469
no

86
00:06:51,469 --> 00:06:57,439
okay so here's media center

87
00:06:57,439 --> 00:07:02,939
the core fundamental ability 0 reaching
into another application and Mon mining

88
00:07:02,939 --> 00:07:06,400
is that it works again ubiquitous
targets regardless

89
00:07:06,400 --> 00:07:10,279
who made them or what security they were
made

90
00:07:10,279 --> 00:07:17,219
send here

91
00:07:17,220 --> 00:07:23,710
paper

92
00:07:23,710 --> 00:07:28,000
so this is great dragon injects into our
target and

93
00:07:28,000 --> 00:07:32,320
I dragon target or executable it finds
it to 64-bit target

94
00:07:32,320 --> 00:07:36,699
every drop a load in and then it runs in
execute well inside her target

95
00:07:36,699 --> 00:07:40,250
at this point we're able to execute
source code

96
00:07:40,250 --> 00:07:43,250
inside a barred target as if we wear

97
00:07:43,250 --> 00:07:46,360
party we can drag in an arbitrary
payload

98
00:07:46,360 --> 00:07:49,500
and loaded inside and so now

99
00:07:49,500 --> 00:07:53,160
i'd introduced an arbitrary execute will
that she and another one

100
00:07:53,160 --> 00:07:57,509
and we have a couple buttons over here
in Media Center

101
00:07:57,509 --> 00:08:00,970
this payload attacks password sequence

102
00:08:00,970 --> 00:08:05,550
so we can type in any password we want
and

103
00:08:05,550 --> 00:08:10,930
it doesn't let us in I am actually real
quick when I rewired

104
00:08:10,930 --> 00:08:13,930
so there was media center I'm to rewire
drew quick

105
00:08:13,930 --> 00:08:20,930
just so you can see okay

106
00:08:23,400 --> 00:08:28,938
okay so am I figured out we wired so you
can see the passwords and I'm typing in

107
00:08:28,939 --> 00:08:33,409
and that spread with this brings us we
can edit arbitrary things inside her

108
00:08:33,409 --> 00:08:34,260
program is

109
00:08:34,260 --> 00:08:37,819
if they were our own so I can type in
the password and

110
00:08:37,820 --> 00:08:40,849
the password is 111 the password is in

111
00:08:40,849 --> 00:08:44,760
000 right that's where injecting an
attacking comes in

112
00:08:44,760 --> 00:08:47,890
am we inject in

113
00:08:47,890 --> 00:08:51,160
same thing I showed you a second ago
tavern agency the password

114
00:08:51,160 --> 00:08:54,990
drop in our payload inside loaded up

115
00:08:54,990 --> 00:09:00,200
and so now we can come in here and say
let's edit 2000 and

116
00:09:00,200 --> 00:09:03,440
also we can grab the Indy 500 cash in
return but will change

117
00:09:03,440 --> 00:09:07,370
and now the password is your 000 and

118
00:09:07,370 --> 00:09:10,700
that's what it takes you can introduce
new functionality into your target

119
00:09:10,700 --> 00:09:14,680
and just call core functionality and be
like I want years to be 444

120
00:09:14,680 --> 00:09:17,699
and so when you think about attacking
this

121
00:09:17,700 --> 00:09:22,089
what does it take to get into an
application quickly bended

122
00:09:22,089 --> 00:09:26,680
in this model I'm injecting in a paleo
that I wrote in 15 minutes day

123
00:09:26,680 --> 00:09:31,349
overrides a key security feature and
this isn't dead

124
00:09:31,350 --> 00:09:35,350
media centers specifically week which it
is specifically week but

125
00:09:35,350 --> 00:09:39,199
you can go against her targets and I
handle all other

126
00:09:39,199 --> 00:09:43,209
318 so like when this window closes all
the payload center inside any clothes

127
00:09:43,209 --> 00:09:45,939
and take care of all that high level
stuff to make it nice n Easy

128
00:09:45,940 --> 00:09:49,839
you can dish out in any arbitrary void
main you want with these tools

129
00:09:49,839 --> 00:09:53,130
so it doesn't it's not like Metasploit
you have to come up to speed and write

130
00:09:53,130 --> 00:09:54,410
some hardcore think it's just

131
00:09:54,410 --> 00:09:58,680
you packin whatever void main you 1 and
that's attacking media center

132
00:09:58,680 --> 00:10:03,479
I am looking agreeable just did take a
quick aside:

133
00:10:03,480 --> 00:10:07,850
you can take these payloads am writing
drag and drop them over here

134
00:10:07,850 --> 00:10:11,399
and this Israel the Decompiler you can
open it up

135
00:10:11,399 --> 00:10:15,130
and tunnel down into the namespaces so

136
00:10:15,130 --> 00:10:18,380
here's a payload we dropped in weekend
open up

137
00:10:18,380 --> 00:10:21,410
go to Change Password button

138
00:10:21,410 --> 00:10:25,219
and you can book my source code so we
can handle in there

139
00:10:25,220 --> 00:10:28,959
and this is the source code for that

140
00:10:28,959 --> 00:10:32,250
and that's kinda thing

141
00:10:32,250 --> 00:10:36,899
they we're a level higher so getting
source code is slightly easier but

142
00:10:36,899 --> 00:10:40,440
it's pretty much the same thing that we
did was off-base back in the day just

143
00:10:40,440 --> 00:10:41,959
coming back ground in dotnet

144
00:10:41,959 --> 00:10:46,339
and like I said when you're talking
about what does it take to read through

145
00:10:46,339 --> 00:10:46,870
this

146
00:10:46,870 --> 00:10:51,120
here's the IL for this and then here's a
source code is definitely a factor each

147
00:10:51,120 --> 00:10:51,410
year

148
00:10:51,410 --> 00:10:55,329
and same thing when you going at it with
assembly code understand what this

149
00:10:55,329 --> 00:10:56,199
function does

150
00:10:56,199 --> 00:11:01,520
is dramatically easier this way and you
can bet my name

151
00:11:01,520 --> 00:11:05,649
program in C if I put a back door in
which is kinda nice you can trust but

152
00:11:05,649 --> 00:11:06,140
verify

153
00:11:06,140 --> 00:11:09,360
and start reading everything is open
source and verifiable

154
00:11:09,360 --> 00:11:13,390
so to break it down

155
00:11:13,390 --> 00:11:16,560
if you decompile media center and you
start looking in

156
00:11:16,560 --> 00:11:19,939
you find it's checked in it literally
it's a function called checked and it

157
00:11:19,940 --> 00:11:21,019
takes a string in

158
00:11:21,019 --> 00:11:24,850
it looking at the flow you can say okay

159
00:11:24,850 --> 00:11:28,579
comes down here pulls out the currently
existing pin a check to see if it's

160
00:11:28,579 --> 00:11:32,500
equal to no it checks to see if the link
is greater than 0

161
00:11:32,500 --> 00:11:35,630
and then it has a peculiar branch that
if the

162
00:11:35,630 --> 00:11:39,040
0 character in is a call and then it has
an arbitrarily

163
00:11:39,040 --> 00:11:43,089
different sequence for login kinda
interesting when you're brute forcing

164
00:11:43,089 --> 00:11:44,260
you might not notice that

165
00:11:44,260 --> 00:11:47,550
and then it does the

166
00:11:47,550 --> 00:11:50,910
return validation or it does alternative
logic

167
00:11:50,910 --> 00:11:54,740
validation again something slightly
different so there's actually two login

168
00:11:54,740 --> 00:11:55,449
modules

169
00:11:55,449 --> 00:11:59,729
inside this one program and that's
partly what this brings us when you're

170
00:11:59,730 --> 00:12:02,040
doing black box testing its kinda hard
to get that

171
00:12:02,040 --> 00:12:05,360
but everything's white box when you will
indeed

172
00:12:05,360 --> 00:12:09,250
go an important source code and the
course I just go in and put a return

173
00:12:09,250 --> 00:12:11,060
true and I want to get past the password

174
00:12:11,060 --> 00:12:16,160
and so as I showed you the password I
could just as easily put a return trip

175
00:12:16,160 --> 00:12:19,449
and drop it in them so

176
00:12:19,449 --> 00:12:24,420
let's look at it from the other side
instead of attacking applications that

177
00:12:24,420 --> 00:12:28,140
are hardened against us and all that
let's turn it around into

178
00:12:28,140 --> 00:12:33,329
there's entire is not yet seen you gotta
pop up in it said you have an antivirus

179
00:12:33,329 --> 00:12:37,339
are you have a virus so download this
will take your you can drag drop it over

180
00:12:37,339 --> 00:12:37,810
here

181
00:12:37,810 --> 00:12:41,279
and let's do a quick walkthrough you can
go to

182
00:12:41,279 --> 00:12:46,189
find me and then you can find your main
and see where it starts executing

183
00:12:46,189 --> 00:12:49,480
and this is probably now where but

184
00:12:49,480 --> 00:12:53,529
we have no way of proving this you look
through you see

185
00:12:53,529 --> 00:12:57,529
obfuscation and this is the same thing
that anyone defending their program

186
00:12:57,529 --> 00:12:58,750
against you will do

187
00:12:58,750 --> 00:13:03,670
to try and make their program quite
unreadable so that's where

188
00:13:03,670 --> 00:13:10,670
great we'll start to step it up a notch
you can come in here and do an important

189
00:13:12,850 --> 00:13:16,600
bring the same and tires in run it
through at the office Gator

190
00:13:16,600 --> 00:13:20,229
an hour void main has better naming

191
00:13:20,229 --> 00:13:24,449
and now we are starting kid real names
back and what was

192
00:13:24,449 --> 00:13:28,579
arbitrarily hard to read before is now
starting to get significantly easier

193
00:13:28,579 --> 00:13:32,089
and so when you thinking about malware
and they're starting to do office

194
00:13:32,089 --> 00:13:33,449
cations Packers

195
00:13:33,449 --> 00:13:37,719
are sacred go before pulls it out at
memory in the deep accident executed

196
00:13:37,720 --> 00:13:41,389
this on does that anything this done

197
00:13:41,389 --> 00:13:45,279
in a programmatic way can be
programmatically undone and

198
00:13:45,279 --> 00:13:48,759
so both sides of the coin whether you're
defending applications are attacking

199
00:13:48,759 --> 00:13:49,669
applications

200
00:13:49,669 --> 00:13:54,419
this is just one more tool for your
talkback so

201
00:13:54,419 --> 00:13:58,739
let's say you dig into their source code
right and you find something like

202
00:13:58,739 --> 00:14:01,789
but see and I'm okay sure

203
00:14:01,789 --> 00:14:05,199
but say you find maybe a string

204
00:14:05,199 --> 00:14:08,839
and it's like well if the string was
different I might be able to send them

205
00:14:08,839 --> 00:14:09,919
back bad data

206
00:14:09,919 --> 00:14:13,100
forget them to do something arbitrarily

207
00:14:13,100 --> 00:14:16,709
malicious to them very so over here

208
00:14:16,709 --> 00:14:20,949
is a string in IL and here's a string in
code

209
00:14:20,949 --> 00:14:24,089
you can come in here and just delay

210
00:14:24,089 --> 00:14:27,509
I wanted to drop

211
00:14:27,509 --> 00:14:31,829
you can just do whatever you are but
really want to their program and that's

212
00:14:31,829 --> 00:14:32,279
where

213
00:14:32,279 --> 00:14:35,949
I'm going for modified I'm not decompile

214
00:14:35,949 --> 00:14:39,189
and party but in not decompile impaired
I'm

215
00:14:39,189 --> 00:14:43,339
is you can take this back to source code
but you can also just making arbitrary

216
00:14:43,339 --> 00:14:44,339
change

217
00:14:44,339 --> 00:14:48,819
it's a and then save an executable right
out and then fired up

218
00:14:48,819 --> 00:14:52,509
or push it at them or maybe instead of
doing that

219
00:14:52,509 --> 00:14:56,109
we want to do something like I am at a
call

220
00:14:56,109 --> 00:14:59,319
and protocol in there

221
00:14:59,319 --> 00:15:03,248
and then make a call out to some other
functions somewhere else

222
00:15:03,249 --> 00:15:06,689
and so that allows us the ability to

223
00:15:06,689 --> 00:15:11,419
at City find this and so we can put
arbitrary calls in there

224
00:15:11,419 --> 00:15:15,829
we can put in other payloads weekend add
other libraries we can just modify it

225
00:15:15,829 --> 00:15:17,049
like it was pure source code

226
00:15:17,049 --> 00:15:20,989
and this is an executable already lol
thats just deployed on the Internet

227
00:15:20,989 --> 00:15:24,319
and we can start taking that full
control that

228
00:15:24,319 --> 00:15:27,559
like back in the day we all know that
like there is hardcore simply

229
00:15:27,559 --> 00:15:30,019
programmers 2nd just modifying executed
alright

230
00:15:30,019 --> 00:15:33,439
and we lost and no we didn't lose it we
just

231
00:15:33,439 --> 00:15:36,629
forgot about it a little weak and put it
to the side or simply code it's real

232
00:15:36,629 --> 00:15:37,089
hard

233
00:15:37,089 --> 00:15:42,239
and this is assembly code for dotnet in
Java and all the rest in

234
00:15:42,239 --> 00:15:46,379
sup thats on the other side of the fence
when you're going up against malware

235
00:15:46,379 --> 00:15:50,119
the ability to just ripped through an
application quickly modify it

236
00:15:50,119 --> 00:15:54,419
and fired back or pushing back up would
come in handy depending on

237
00:15:54,419 --> 00:15:58,889
what you're doing some

238
00:15:58,889 --> 00:16:03,779
let's look at specifically injection for
just a little bit and applications

239
00:16:03,779 --> 00:16:04,689
running in memory

240
00:16:04,689 --> 00:16:08,289
you coming you deliver your payload
inside a bit and

241
00:16:08,289 --> 00:16:11,350
that your dad women

242
00:16:11,350 --> 00:16:16,309
execute will spend a it fires dll's it
uses also is a verification

243
00:16:16,309 --> 00:16:20,358
this all goes through their ubiquitous
Windows dotnet security systems

244
00:16:20,359 --> 00:16:24,259
and it becomes a process whatever
scanning whitelisting happened to take

245
00:16:24,259 --> 00:16:24,739
place

246
00:16:24,739 --> 00:16:28,049
and then after all that's gone we can
drop in turbulence

247
00:16:28,049 --> 00:16:31,259
and this is the upside I'm injecting and
got net

248
00:16:31,259 --> 00:16:34,419
you can come in at the last moment in a
high-level language either through

249
00:16:34,419 --> 00:16:35,220
Metasploit

250
00:16:35,220 --> 00:16:38,789
or having access to core system you can
come in do that attack

251
00:16:38,789 --> 00:16:44,470
and so let's see what we can do it at
less inject one payload into one

252
00:16:44,470 --> 00:16:45,819
application

253
00:16:45,819 --> 00:16:49,219
let's inject that exact same payload
into another application

254
00:16:49,220 --> 00:16:52,509
and so on and so forth and these are
applications that are

255
00:16:52,509 --> 00:16:56,169
different architecture which one is 32
bit when a 64-bit

256
00:16:56,169 --> 00:17:00,029
this could just as easily be one only
needs one on Windows one on your x-box

257
00:17:00,029 --> 00:17:03,529
you can take the same payload and push
against multiple targets

258
00:17:03,529 --> 00:17:07,240
so here's a

259
00:17:07,240 --> 00:17:11,500
protected and Packer a requires a
password

260
00:17:11,500 --> 00:17:15,289
and once we get the password it unlocks
its features

261
00:17:15,289 --> 00:17:21,359
let's inject in there so this one
payload is attacking

262
00:17:21,359 --> 00:17:25,719
a 64-bit application right so it uses a
64-bit bootstrap

263
00:17:25,720 --> 00:17:31,940
and now we ever 64-bit bootstrap this
bootstrap is compiled into MSIL

264
00:17:31,940 --> 00:17:35,490
which is neither 64-bit or 32-bit that's
why I can work anywhere

265
00:17:35,490 --> 00:17:40,080
we can load in hack dropping in here

266
00:17:40,080 --> 00:17:44,500
and now we're able to add functionality
to their application

267
00:17:44,500 --> 00:17:48,409
where we can in to rate all streams and
just change it or we can change the

268
00:17:48,409 --> 00:17:49,960
locations in values and

269
00:17:49,960 --> 00:17:53,720
any object in memory and so like this
but mimicking click down here

270
00:17:53,720 --> 00:17:57,510
agnosio yeah he can't I can just edit
arbitrarily

271
00:17:57,510 --> 00:18:01,139
any value in memory any object in memory
I can just walk in there and body

272
00:18:01,139 --> 00:18:02,449
snatchers replace it with the

273
00:18:02,450 --> 00:18:06,039
man in the middle object in go to town
pretty much anything you can think of is

274
00:18:06,039 --> 00:18:06,779
a developer

275
00:18:06,779 --> 00:18:10,440
you can now do their arbitrary
applications on the fly

276
00:18:10,440 --> 00:18:14,950
okay so this Taylor that we're gonna
injected right

277
00:18:14,950 --> 00:18:18,369
we can load in as many at these payloads
as we want

278
00:18:18,369 --> 00:18:21,720
and I manage all this reading all that
girly stuff all that

279
00:18:21,720 --> 00:18:26,340
it's managed appear so this payload
looks through the application

280
00:18:26,340 --> 00:18:29,549
and it finds the hash that is validating
against

281
00:18:29,549 --> 00:18:33,970
and then Iran's and reports crack and so

282
00:18:33,970 --> 00:18:38,299
it's like okay here I just brute force
did I used it's arbitrary code for

283
00:18:38,299 --> 00:18:41,668
and checking the hash I got a validation
and that's it

284
00:18:41,669 --> 00:18:45,129
and then I'll type it into the text box
because as a feature

285
00:18:45,129 --> 00:18:48,158
okay so there it is mister

286
00:18:48,159 --> 00:18:51,429
let's kick it up a little bit and again
something that'll take a little bit I'm

287
00:18:51,429 --> 00:18:53,220
to process

288
00:18:53,220 --> 00:18:56,600
so again like I said drag this target in
here

289
00:18:56,600 --> 00:19:00,299
it says okay I see it 64-bit years as
process ID

290
00:19:00,299 --> 00:19:03,460
inject in there drop that

291
00:19:03,460 --> 00:19:07,389
in one more time

292
00:19:07,389 --> 00:19:10,799
and it pulls out a different cash
because this one has a

293
00:19:10,799 --> 00:19:15,440
longer password we start cracking it
again and it uses the functionality

294
00:19:15,440 --> 00:19:20,820
up its target to process the checks so
you're not trying to re code in

295
00:19:20,820 --> 00:19:24,809
emulated your actually using its own
functions in its own hash good values

296
00:19:24,809 --> 00:19:27,990
to check against so this is why one

297
00:19:27,990 --> 00:19:31,309
single payload work against multiple
targets because you identify what you

298
00:19:31,309 --> 00:19:32,990
wanna lock onto

299
00:19:32,990 --> 00:19:37,269
it will just processing brute force
ubiquitously Intel it finds in

300
00:19:37,269 --> 00:19:42,799
and then that's it and that's a 64-bit
application right

301
00:19:42,799 --> 00:19:46,549
so like I said we're gonna go up against
a 32-bit application again

302
00:19:46,549 --> 00:19:51,389
a different application inject into it
with exactly the same tailored

303
00:19:51,389 --> 00:19:55,289
so it's a 32-bit application something
entirely different made by someone

304
00:19:55,289 --> 00:19:57,990
that's completely separate from the
other one right

305
00:19:57,990 --> 00:20:03,200
will inject in and this time

306
00:20:03,200 --> 00:20:07,809
let's drop in one extra pit so like
here's a Kodak says payload

307
00:20:07,809 --> 00:20:11,769
is gonna white through the entire memory
space and then pull out the source code

308
00:20:11,769 --> 00:20:13,019
and number

309
00:20:13,019 --> 00:20:17,460
so as I was doing it on this before this
walks through enriched to remember

310
00:20:17,460 --> 00:20:20,510
anything that you can do is a programmer
you can do here you can

311
00:20:20,510 --> 00:20:26,600
added you can pull out a member you can
push okay so back to the table in

312
00:20:26,600 --> 00:20:31,580
drag and drop the same exact payload and
right in case we have a Palin

313
00:20:31,580 --> 00:20:36,250
we had the hash and we have a brute
force

314
00:20:36,250 --> 00:20:39,859
this is a completely different hashing
see as the previous one was a simple

315
00:20:39,859 --> 00:20:41,260
indy five hash

316
00:20:41,260 --> 00:20:44,419
this is a shot 256 been indy five

317
00:20:44,419 --> 00:20:47,679
and then a proprietary and so it's a
changing

318
00:20:47,679 --> 00:20:51,440
and so as before it was processing tens
of thousands a second

319
00:20:51,440 --> 00:20:54,669
this one's processing tens second

320
00:20:54,669 --> 00:20:58,629
and again we're using the functionality
inherent in them we're not bringing the

321
00:20:58,629 --> 00:21:00,269
functionality with us

322
00:21:00,269 --> 00:21:03,730
so we wait to lock onto a target and
then at that point

323
00:21:03,730 --> 00:21:06,859
choose what functionality we want to
pull out news

324
00:21:06,859 --> 00:21:10,970
where we want to pull the hash value our
and that's why the big winners

325
00:21:10,970 --> 00:21:11,960
proportion

326
00:21:11,960 --> 00:21:15,629
again it finds a password hated into the
box

327
00:21:15,629 --> 00:21:21,158
and then validates and so now instead a
ride in a brute force her to a target

328
00:21:21,159 --> 00:21:24,399
or and brute forcing a single technology

329
00:21:24,399 --> 00:21:28,799
you can read an adaptable fortune that
will work on literally any program that

330
00:21:28,799 --> 00:21:30,559
you can identify here's a hash

331
00:21:30,559 --> 00:21:34,639
here some are sacred do here's may be a
function called keep checking

332
00:21:34,639 --> 00:21:41,639
and why don't you log onto a min
disproportionately in return major

333
00:21:42,690 --> 00:21:46,220
and so let's look at something a little
more real in the real world we wanna go

334
00:21:46,220 --> 00:21:47,020
up against

335
00:21:47,020 --> 00:21:50,889
passwords we wanted pull out free
software you want to

336
00:21:50,890 --> 00:21:54,760
really destroy applications right we
want to critically wound some business

337
00:21:54,760 --> 00:21:58,840
and so we can deploy password before
church we can

338
00:21:58,840 --> 00:22:03,080
am injector own sequences have
communication straight into their stream

339
00:22:03,080 --> 00:22:06,560
we can send things that should never be
sent grain

340
00:22:06,560 --> 00:22:10,350
at this point we can say okay you had a
sequel object that you single clean but

341
00:22:10,350 --> 00:22:12,310
we have the sequel objects weakness
buyer

342
00:22:12,310 --> 00:22:16,389
anything we want edging and now you have
to consider that a high schooler can now

343
00:22:16,390 --> 00:22:19,160
get into your single object and just
start simple injecting you

344
00:22:19,160 --> 00:22:22,710
in a matter of seconds well that's a bad
idea

345
00:22:22,710 --> 00:22:25,730
course we don't do that we wouldn't do
that because

346
00:22:25,730 --> 00:22:30,790
that's not legal and but we have to
consider this is the same tool this is

347
00:22:30,790 --> 00:22:33,090
the same stuff that everyone else has
access to

348
00:22:33,090 --> 00:22:37,639
and so keep that in mind

349
00:22:37,640 --> 00:22:41,840
like this isn't benign threat but also
like I said this isn't new

350
00:22:41,840 --> 00:22:46,209
so we should have been taking care this
twenty years ago every single program

351
00:22:46,210 --> 00:22:48,980
that's on the desktop should be immune
to see more injections

352
00:22:48,980 --> 00:22:53,690
but how many developers for the desktop
you think do sequel cleaning much less

353
00:22:53,690 --> 00:22:56,690
any defensive mechanisms close to

354
00:22:56,690 --> 00:23:00,490
one person so was eating

355
00:23:00,490 --> 00:23:03,800
you connect your target you do cindy
compiling you getting you find out what

356
00:23:03,800 --> 00:23:06,500
technology to have you in fact that you
change the target

357
00:23:06,500 --> 00:23:10,400
you exploit its core vulnerabilities and
take advantage of him

358
00:23:10,400 --> 00:23:14,340
and you re morning and a when

359
00:23:14,340 --> 00:23:18,370
here's their response said I think herb
honorable to go after

360
00:23:18,370 --> 00:23:21,750
can have a top-five so flipping the
check in an application

361
00:23:21,750 --> 00:23:25,940
said in a single value true cutting the
logic returning true in accessing about

362
00:23:25,940 --> 00:23:31,130
you this is because you can come in and
say registered Eagles false

363
00:23:31,130 --> 00:23:35,550
now becomes registry was true or
bullying check for does eight will be

364
00:23:35,550 --> 00:23:37,169
like a password validation

365
00:23:37,170 --> 00:23:41,980
you can simply say 1890 will be and with
a simple change only invalid password

366
00:23:41,980 --> 00:23:42,640
will pass

367
00:23:42,640 --> 00:23:46,230
is registered true

368
00:23:46,230 --> 00:23:50,040
you can just throw it at the top sequel
cleaning

369
00:23:50,040 --> 00:23:54,030
throw it at the top yeah I was simple
clean and now you've negated

370
00:23:54,030 --> 00:23:59,590
all that defensive mechanism with one
single command

371
00:23:59,590 --> 00:24:02,919
so let's look at that let's look at
attacking the login see 17 real

372
00:24:02,920 --> 00:24:05,640
application

373
00:24:05,640 --> 00:24:10,940
same world on this

374
00:24:10,940 --> 00:24:14,340
coming to Settings General security

375
00:24:14,340 --> 00:24:19,240
and put in a password okay so

376
00:24:19,240 --> 00:24:23,880
now we have a secured application anyone
tries to come in they'll be presented

377
00:24:23,880 --> 00:24:25,000
with password challenge

378
00:24:25,000 --> 00:24:28,040
and if they don't know if they can't get
in the application

379
00:24:28,040 --> 00:24:31,820
like I showed you before we could do
brute forcing

380
00:24:31,820 --> 00:24:34,860
or whatever else simply in grey wool

381
00:24:34,860 --> 00:24:39,290
drag and drop in open it up and

382
00:24:39,290 --> 00:24:43,830
at this point we can come down to

383
00:24:43,830 --> 00:24:47,340
in

384
00:24:47,340 --> 00:24:49,270
p.m.

385
00:24:49,270 --> 00:24:50,450
you

386
00:24:50,450 --> 00:24:53,850
so this is the password validation

387
00:24:53,850 --> 00:24:57,290
the password validation is simply taker

388
00:24:57,290 --> 00:25:00,990
in point and compare in plain text

389
00:25:00,990 --> 00:25:04,040
no crypto around it just simply to a
street compares

390
00:25:04,040 --> 00:25:07,379
so at this point we have the plain text
to the password

391
00:25:07,380 --> 00:25:11,680
and the plaintext the stored password
and that's our comparison check for this

392
00:25:11,680 --> 00:25:13,990
program so let's attack that

393
00:25:13,990 --> 00:25:19,600
this is I'll

394
00:25:19,600 --> 00:25:24,299
K so here we get our password will start
adding some new eye on your

395
00:25:24,299 --> 00:25:27,480
okay so this is our guest password

396
00:25:27,480 --> 00:25:31,660
in this is are our people's so kinda
like when we had to learn assembly code

397
00:25:31,660 --> 00:25:35,580
at this point you still can have to know
I'll hopefully I can get past a

398
00:25:35,580 --> 00:25:40,049
but here's the opcode this allows us to
put in

399
00:25:40,049 --> 00:25:45,059
a new instructions here well call it do
and I'm trying to make this easy so down

400
00:25:45,059 --> 00:25:46,820
here tells you the definition

401
00:25:46,820 --> 00:25:50,139
do so it duplicates object on top of the
stack

402
00:25:50,140 --> 00:25:55,850
so now we have are currently stored
password and now we have to understand

403
00:25:55,850 --> 00:25:59,510
open another line to a call put a call
out

404
00:25:59,510 --> 00:26:03,289
put it out to system.windows.forms
library

405
00:26:03,289 --> 00:26:09,340
tunnel down and we put it to show

406
00:26:09,340 --> 00:26:13,100
and so now we have heard password on the
top of the stack showing out

407
00:26:13,100 --> 00:26:16,870
this function returns something a
dialogue result

408
00:26:16,870 --> 00:26:21,699
will put a pop his ass on the cover
stack and now this is what we had

409
00:26:21,700 --> 00:26:25,179
we have get your password

410
00:26:25,179 --> 00:26:29,650
show it and compare that's pretty good
we come down here

411
00:26:29,650 --> 00:26:33,240
and we have this our peoples so

412
00:26:33,240 --> 00:26:36,880
let's pop this of the stack so whatever
our people

413
00:26:36,880 --> 00:26:41,390
up people's did will just destroy and
then we'll put in

414
00:26:41,390 --> 00:26:45,270
LDC I for 1

415
00:26:45,270 --> 00:26:48,530
and so like I said

416
00:26:48,530 --> 00:26:51,770
here's our comparison we do our
comparison and then we

417
00:26:51,770 --> 00:26:55,158
if true and so now this is our
validation sequence

418
00:26:55,159 --> 00:26:59,280
click Save save it up

419
00:26:59,280 --> 00:27:06,280
so now let's go in and try and login
again

420
00:27:09,270 --> 00:27:14,350
gay so put in a password here's our
password netted

421
00:27:14,350 --> 00:27:18,780
those couple instructions have
completely not only negated but given up

422
00:27:18,780 --> 00:27:19,980
the store password

423
00:27:19,980 --> 00:27:23,220
and that's going from a hard application

424
00:27:23,220 --> 00:27:26,360
in this kind of R&D attack is easily
doable

425
00:27:26,360 --> 00:27:29,649
under two hours you can go from scratch
downloading

426
00:27:29,650 --> 00:27:33,980
to a fully deployable attacked in under
two hours if you're still pretty

427
00:27:33,980 --> 00:27:34,600
reliably

428
00:27:34,600 --> 00:27:37,678
if you're unskilled maybe eight hours by

429
00:27:37,679 --> 00:27:41,290
it if you are general programming
knowledge certainly within one day you

430
00:27:41,290 --> 00:27:41,918
should be

431
00:27:41,919 --> 00:27:48,150
able to affect some program in a
fundamental way so let's look at this

432
00:27:48,150 --> 00:27:51,809
we have on the settings in your

433
00:27:51,809 --> 00:27:55,230
and government license

434
00:27:55,230 --> 00:27:58,280
paper in where one

435
00:27:58,280 --> 00:28:02,320
teams 12 and unlock the program

436
00:28:02,320 --> 00:28:05,960
because as a registration key site no as
a registration key

437
00:28:05,960 --> 00:28:09,090
while air one 2012 be a registration key
right

438
00:28:09,090 --> 00:28:14,439
well let's go and fix n

439
00:28:14,440 --> 00:28:17,460
come down here into so

440
00:28:17,460 --> 00:28:21,440
this isn't obfuscated program right we
they went through and they put in bad

441
00:28:21,440 --> 00:28:21,870
names

442
00:28:21,870 --> 00:28:25,030
coming in here core

443
00:28:25,030 --> 00:28:30,840
the static constructor this is where the
initial values at a programmer said

444
00:28:30,840 --> 00:28:37,840
and here's our target variable this
target variable controls

445
00:28:38,390 --> 00:28:41,700
when it's cute against so we come in
here

446
00:28:41,700 --> 00:28:46,280
but this in your change this variable as
I showed you before you can change in

447
00:28:46,280 --> 00:28:47,139
arbitrary string

448
00:28:47,140 --> 00:28:51,450
a change the arbitrary string and now
that arbitrary string

449
00:28:51,450 --> 00:28:56,440
is gonna work both save it out again

450
00:28:56,440 --> 00:29:00,370
and so now we have a second version

451
00:29:00,370 --> 00:29:04,459
we have the original cracked that we
deployed where

452
00:29:04,460 --> 00:29:08,340
it gives us access pass the password
divulges

453
00:29:08,340 --> 00:29:11,409
gets us in

454
00:29:11,410 --> 00:29:14,990
come in setting license

455
00:29:14,990 --> 00:29:18,299
up player one

456
00:29:18,299 --> 00:29:24,940
doesn't welcome

457
00:29:24,940 --> 00:29:27,750
ok dats

458
00:29:27,750 --> 00:29:30,460
home its

459
00:29:30,460 --> 00:29:37,410
open maybe it's absecon USA 2011

460
00:29:37,410 --> 00:29:40,909
okay a closer

461
00:29:40,909 --> 00:29:44,679
I am and that's what it takes to reach
an application seeking consider this to

462
00:29:44,679 --> 00:29:47,049
be like to sign in sequence have an
application

463
00:29:47,049 --> 00:29:50,830
or anything else you when it downloads
updates after the server like this stuff

464
00:29:50,830 --> 00:29:52,960
is completely benign like you can go up
her

465
00:29:52,960 --> 00:29:57,190
thousands of people with this by this is
the benign version of what you can

466
00:29:57,190 --> 00:30:01,029
really do against a protected
application

467
00:30:01,029 --> 00:30:04,990
and so those couple a little changes are
considered hardcore cracks today

468
00:30:04,990 --> 00:30:09,309
like okay give me pass along in sequence
and crack the application

469
00:30:09,309 --> 00:30:13,149
and you can do it in about 20 plates
Lake

470
00:30:13,149 --> 00:30:17,209
that's it it's just a couple lines a
buyer and so

471
00:30:17,210 --> 00:30:20,210
it's dropping at bar what we consider
thread

472
00:30:20,210 --> 00:30:25,570
to be someone that has in nineteen
skills assembly and they had fun team to

473
00:30:25,570 --> 00:30:29,289
some kid in Bangladesh with an extra two
hours between classes

474
00:30:29,289 --> 00:30:34,980
and this is a new threat model so let's
look at your public and private he

475
00:30:34,980 --> 00:30:36,659
signed you simply change the key

476
00:30:36,659 --> 00:30:40,480
and now you can just push out and on the
application

477
00:30:40,480 --> 00:30:44,090
and I Commons validation sequence for

478
00:30:44,090 --> 00:30:47,770
I am she's is you have a unknown value

479
00:30:47,770 --> 00:30:51,960
you put in your name an idea of the
machine and then you happen to know that

480
00:30:51,960 --> 00:30:56,419
known value what is lash be and that's
it and you're able to crack that seems

481
00:30:56,419 --> 00:30:59,559
call the server just tactic all pointed
your own server

482
00:30:59,559 --> 00:31:03,770
ordinary gave that server call whatever
you want you to be phoning home critical

483
00:31:03,770 --> 00:31:06,260
information and say your programs
validated

484
00:31:06,260 --> 00:31:10,270
you can do anything at that point demo
it was true you can send it to anything

485
00:31:10,270 --> 00:31:10,908
you want

486
00:31:10,909 --> 00:31:14,779
and water programs will have this in the
first recalls

487
00:31:14,779 --> 00:31:18,610
have the application right under Boyd
mean is set whether it's

488
00:31:18,610 --> 00:31:23,479
true or false and this is a common
programming standard which is fine

489
00:31:23,480 --> 00:31:26,510
and then there's complex math to try and
defend the application

490
00:31:26,510 --> 00:31:30,100
which is nice and fun because it takes
complex mad

491
00:31:30,100 --> 00:31:33,129
and thinking to unwind its like a
Rubik's Cube that no one won in

492
00:31:33,130 --> 00:31:34,940
jerusalem

493
00:31:34,940 --> 00:31:38,390
and way more than one person at a time
they'll ship you the key generation

494
00:31:38,390 --> 00:31:41,370
sequence inside their program right next
to the

495
00:31:41,370 --> 00:31:45,360
key verification is a key generation
sequence because

496
00:31:45,360 --> 00:31:49,330
they bought an off-the-shelf product
included the DL and shipped in

497
00:31:49,330 --> 00:31:54,570
and that's just part of the market its
trust but verify but on the desktop sign

498
00:31:54,570 --> 00:31:57,460
how many people have really done a
security review their desktop

499
00:31:57,460 --> 00:32:00,030
application like you can testers right

500
00:32:00,030 --> 00:32:03,830
how many you have ever heard a desktop
application

501
00:32:03,830 --> 00:32:07,750
hurting anyone ever had a client say we
have a desktop application were using on

502
00:32:07,750 --> 00:32:09,000
tens of thousands of

503
00:32:09,000 --> 00:32:13,000
terminals and we wanted to be secure and
it can't attack this year

504
00:32:13,000 --> 00:32:17,929
it's just not in the threat matrix so
that's why I'm here

505
00:32:17,929 --> 00:32:21,760
and showing you that if you have a key
sequence instead of trying to be D

506
00:32:21,760 --> 00:32:25,760
you can simply change in when you have a
server call

507
00:32:25,760 --> 00:32:30,340
you can have a point to any server you
on you can send back any information you

508
00:32:30,340 --> 00:32:30,809
want

509
00:32:30,809 --> 00:32:34,830
and then you can complete the sequence
and this is

510
00:32:34,830 --> 00:32:38,699
a fairly ubiquitous tank and we can do
replay attacks

511
00:32:38,700 --> 00:32:43,570
so like here's a sequence you pass in
your name it turns into a

512
00:32:43,570 --> 00:32:47,280
random code string and then we check to
see if the registration code

513
00:32:47,280 --> 00:32:51,090
people's that's nice and then we can
just replay the

514
00:32:51,090 --> 00:32:54,199
same sequence and we can use this
against tens and thousands have

515
00:32:54,200 --> 00:32:55,950
applications in a matter of minutes

516
00:32:55,950 --> 00:33:00,770
and this is just low-hanging fruit
because for the longest time this is a

517
00:33:00,770 --> 00:33:01,289
completely

518
00:33:01,289 --> 00:33:04,710
undefended front and

519
00:33:04,710 --> 00:33:09,440
complex math you simply chop it up you
attacked the weak spot you put in brute

520
00:33:09,440 --> 00:33:10,230
force years

521
00:33:10,230 --> 00:33:13,750
and then you spend the night undoing it
and by the end you've cracked their

522
00:33:13,750 --> 00:33:16,600
complex mad

523
00:33:16,600 --> 00:33:19,780
so and this

524
00:33:19,780 --> 00:33:23,750
program just to talk about it a little
bit like what you see inside an

525
00:33:23,750 --> 00:33:24,740
application

526
00:33:24,740 --> 00:33:29,350
so this application encrypt your data it
stores it

527
00:33:29,350 --> 00:33:33,059
in a static key it uses zero vector
initialization

528
00:33:33,059 --> 00:33:36,720
it stores your text password in the
clear so

529
00:33:36,720 --> 00:33:40,529
if you do in a security review and this
is a product there you they're bringing

530
00:33:40,529 --> 00:33:42,230
in-house or they're producing

531
00:33:42,230 --> 00:33:45,179
you cancer coming back with these
definable things you need to fix this

532
00:33:45,179 --> 00:33:46,179
this and this

533
00:33:46,179 --> 00:33:49,669
and re mediated and then

534
00:33:49,669 --> 00:33:55,210
build that into recycling build a hardon
cycle development so what stops all this

535
00:33:55,210 --> 00:33:56,270
time showing the rain

536
00:33:56,270 --> 00:34:00,370
so what's the security that we have to
go up against white will companies do

537
00:34:00,370 --> 00:34:03,600
to try and stop this they'll try and
protect this with

538
00:34:03,600 --> 00:34:08,580
obfuscation just like that antivirus
program that I showed you where you just

539
00:34:08,580 --> 00:34:10,790
pull off the office cation

540
00:34:10,790 --> 00:34:14,529
they'll do code of Education logic
obfuscation they'll make unmanaged calls

541
00:34:14,530 --> 00:34:16,359
out other languages

542
00:34:16,359 --> 00:34:20,279
bill make shells Packers crypto the same
exact techniques that

543
00:34:20,280 --> 00:34:24,349
your aunt a now where people are coming
up against that if you're trying to

544
00:34:24,349 --> 00:34:27,179
protect your malware from being
reverse-engineered that's the same thing

545
00:34:27,179 --> 00:34:28,879
you're doing when you're trying to stop
here

546
00:34:28,879 --> 00:34:32,889
enterprise application for being
reverse-engineered

547
00:34:32,889 --> 00:34:36,230
and this transition down D compilation

548
00:34:36,230 --> 00:34:39,530
because when you have your secure you
call out to a dongle

549
00:34:39,530 --> 00:34:43,290
you may be phone home in do Twitter in
database calls

550
00:34:43,290 --> 00:34:47,779
you fire off some crypto and these are
the ubiquitous weak points

551
00:34:47,780 --> 00:34:51,270
because each of these points is a single
function part between one library in

552
00:34:51,270 --> 00:34:51,960
another

553
00:34:51,960 --> 00:34:54,990
the search 0.6 can quickly get to in
just intercepted

554
00:34:54,989 --> 00:34:59,330
and say your USB dongle is there I'm in
a fire of those server calls

555
00:34:59,330 --> 00:35:02,660
and think about this if you have an
application that has the right to tunnel

556
00:35:02,660 --> 00:35:04,040
through your firewall

557
00:35:04,040 --> 00:35:10,270
and fire out to the Internet and send
any arbitrary data at once

558
00:35:10,270 --> 00:35:14,420
doesn't that seem like a threat Lake if
you have an application inside your

559
00:35:14,420 --> 00:35:16,819
heart network like a friend 6 PC
software

560
00:35:16,819 --> 00:35:21,230
and you have to open a tunnel to allow
it to get to the key check server

561
00:35:21,230 --> 00:35:24,490
and this is OK why

562
00:35:24,490 --> 00:35:28,118
because we trust that PC software
because there's no way that software

563
00:35:28,119 --> 00:35:29,780
gonna be compromised

564
00:35:29,780 --> 00:35:33,010
and this is just a secure security
vulnerability that we can leverage

565
00:35:33,010 --> 00:35:35,550
because people trust their applications

566
00:35:35,550 --> 00:35:38,940
they trust the guards to protect their
data bases date

567
00:35:38,940 --> 00:35:42,380
trust their programs to protect their
data bases

568
00:35:42,380 --> 00:35:46,040
and we know we should trust but verify
because when you have this model that

569
00:35:46,040 --> 00:35:47,380
it's just secured

570
00:35:47,380 --> 00:35:50,680
and as a beginning in a bit you only
have to worry about the outside

571
00:35:50,680 --> 00:35:54,640
that's just not the model anymore let's
look at it

572
00:35:54,640 --> 00:35:58,970
here's great wealth use this program
that we took out earlier

573
00:35:58,970 --> 00:36:03,640
we drag and drop in its like I don't
know it has no clue about it

574
00:36:03,640 --> 00:36:07,348
and that's because is protected with and
not of the show

575
00:36:07,349 --> 00:36:12,250
packer I love that and like I showed you
before we can

576
00:36:12,250 --> 00:36:15,520
inject into it and do all the same stuff

577
00:36:15,520 --> 00:36:19,670
all their protection falls away we have

578
00:36:19,670 --> 00:36:24,170
like I showed you before we can inject
into it and pop all the code out a bit

579
00:36:24,170 --> 00:36:27,490
and look at its code base and so it's
protected

580
00:36:27,490 --> 00:36:30,890
in memory against

581
00:36:30,890 --> 00:36:34,868
its office created in memory its
unpacked it's coming from multiple

582
00:36:34,869 --> 00:36:35,670
languages

583
00:36:35,670 --> 00:36:39,800
and we can injected and take all that
away weekend injected

584
00:36:39,800 --> 00:36:44,530
and do other things so here's another
Taylor

585
00:36:44,530 --> 00:36:48,130
we can add these buns in there right I'm

586
00:36:48,130 --> 00:36:51,300
take another application way

587
00:36:51,300 --> 00:36:55,280
say the group for sure injected in there

588
00:36:55,280 --> 00:37:00,210
and we can take X number of applications
and just keep injecting all day long in

589
00:37:00,210 --> 00:37:04,780
just keep going right and what is this
all the where does the ability to inject

590
00:37:04,780 --> 00:37:08,670
30 applications together go well this is
where it goes

591
00:37:08,670 --> 00:37:12,800
so like I said I can manipulate objects
in image right these applications this

592
00:37:12,800 --> 00:37:13,450
one

593
00:37:13,450 --> 00:37:17,720
this brew Porcher and this program that
it attacks

594
00:37:17,720 --> 00:37:22,000
at this moment are in the same memory
space and essentially one application

595
00:37:22,000 --> 00:37:25,950
so I can take something like this crack
button remove it off it here

596
00:37:25,950 --> 00:37:30,509
and I can push it over here I can take
the cancel button

597
00:37:30,510 --> 00:37:35,300
what everyone I mean these are
fundamental changes that allow us to

598
00:37:35,300 --> 00:37:38,460
do what everyone to our targets

599
00:37:38,460 --> 00:37:41,930
am actually artist

600
00:37:41,930 --> 00:37:47,379
click that button real quick to show you
up

601
00:37:47,380 --> 00:37:51,109
way okay

602
00:37:51,109 --> 00:37:54,470
home

603
00:37:54,470 --> 00:37:55,910
I'm a little chip

604
00:37:55,910 --> 00:37:58,480
said

605
00:37:58,480 --> 00:38:01,950
I am okay

606
00:38:01,950 --> 00:38:06,770
com okay so that's a sequence you drag
and drop drag-and-drop drag-and-drop

607
00:38:06,770 --> 00:38:10,320
you inject into your target you click
this

608
00:38:10,320 --> 00:38:13,740
iterates all windows and as these
buttons to in

609
00:38:13,740 --> 00:38:17,270
and these buttons do the same thing to
its target local values

610
00:38:17,270 --> 00:38:21,880
which can come in handy such as well as
is pregnant due

611
00:38:21,880 --> 00:38:26,060
right this means you can right click on
this crack but now

612
00:38:26,060 --> 00:38:30,970
and it'll divulge what that crack button
fires and so you can just say hey give

613
00:38:30,970 --> 00:38:32,560
me the code that's right there

614
00:38:32,560 --> 00:38:36,509
right under your fingertips here it is
and you can jump straight to their code

615
00:38:36,510 --> 00:38:40,500
and here it is the pass cracker its
object its function

616
00:38:40,500 --> 00:38:45,560
and you can pull that right now they're
doing like I said

617
00:38:45,560 --> 00:38:49,990
you can pop it off if one application
and pop it on the other

618
00:38:49,990 --> 00:38:53,279
and then fired and it still functions

619
00:38:53,280 --> 00:38:58,380
these this is safe I'm handling the
treading on handling the objects

620
00:38:58,380 --> 00:39:01,890
and it's pretty easy these payloads are
between 25

621
00:39:01,890 --> 00:39:06,140
and fifty lines ago they're written in a
couple hours max

622
00:39:06,140 --> 00:39:10,080
and you can just churning out all day
long and so you can make fairly fun

623
00:39:10,080 --> 00:39:12,400
practice like you can just make
everything run away

624
00:39:12,400 --> 00:39:16,710
you can say okay I want everything to
dodge this and it's like there you go

625
00:39:16,710 --> 00:39:20,050
into lines echo you can just say okay
well you can never click on anything

626
00:39:20,050 --> 00:39:22,640
again

627
00:39:22,640 --> 00:39:26,180
and think about it like what does this
mean like if you come in here

628
00:39:26,180 --> 00:39:30,560
and I can had a right click to this I
can come in and say okay

629
00:39:30,560 --> 00:39:33,660
well this is a 7.84 well

630
00:39:33,660 --> 00:39:36,720
I have a blind individual in this needs
to be a 48 on right

631
00:39:36,720 --> 00:39:39,959
how long will that take

632
00:39:39,960 --> 00:39:43,400
if I said this needs to be ADA compliant
this means to be a

633
00:39:43,400 --> 00:39:48,849
48 fond I what your def time and if I
can say oh it's two lines echoed

634
00:39:48,849 --> 00:39:53,570
and you can do this to in a ubiquitous
program it opens up the doors like I

635
00:39:53,570 --> 00:39:56,839
said if you want to do a one-off
solution for someone you wanna say okay

636
00:39:56,839 --> 00:40:01,070
it's in French will now it's an Italian
internet Allen will now it's in Farsi

637
00:40:01,070 --> 00:40:04,690
you can just go all day long and make
ubiquitous converters

638
00:40:04,690 --> 00:40:08,420
ubiquitous brute force yours with a few
lines ago and that's what my tools are

639
00:40:08,420 --> 00:40:08,980
bringing you

640
00:40:08,980 --> 00:40:12,690
it's not that this is new it's just 83

641
00:40:12,690 --> 00:40:18,770
and targeted at the new platforms and
when I say new platforms

642
00:40:18,770 --> 00:40:23,180
whatever exactly mean right so I keep
saying oh

643
00:40:23,180 --> 00:40:27,109
I'm going up against these programs
there not necessarily below normal in

644
00:40:27,109 --> 00:40:28,160
some fundamental way

645
00:40:28,160 --> 00:40:31,560
but what does make

646
00:40:31,560 --> 00:40:34,790
dotnet slightly different it is a
runtime language

647
00:40:34,790 --> 00:40:38,230
so we have things like reflection we
have there

648
00:40:38,230 --> 00:40:41,800
we have reflection we had

649
00:40:41,800 --> 00:40:45,700
object-oriented all that and this

650
00:40:45,700 --> 00:40:49,299
where one so here's Java dotnet

651
00:40:49,300 --> 00:40:52,300
I KBM I KVM

652
00:40:52,300 --> 00:40:55,550
is a general conversion from Java 2.9

653
00:40:55,550 --> 00:40:59,040
it's open and it's free will come in
here

654
00:40:59,040 --> 00:41:02,339
take this to the main line because have
been

655
00:41:02,339 --> 00:41:05,660
got around to making a nice interface
but is written by a

656
00:41:05,660 --> 00:41:10,009
people guy that has fitzco so that's I
KBM

657
00:41:10,010 --> 00:41:13,490
so KK the

658
00:41:13,490 --> 00:41:17,180
MC for compile so I K bien can run

659
00:41:17,180 --> 00:41:21,379
at runtime working run at compile well
targeted

660
00:41:21,380 --> 00:41:26,730
armitage jar and it'll go through and
produce

661
00:41:26,730 --> 00:41:30,750
armitage dokie exceed best canonize rain

662
00:41:30,750 --> 00:41:36,109
like here's armitage da txt I don't have
the Java Runtime installed on this

663
00:41:36,109 --> 00:41:36,680
machine

664
00:41:36,680 --> 00:41:40,680
will boot it up this is booting the JVM
on topic dotnet

665
00:41:40,680 --> 00:41:44,118
it's basically handling Java on top a
dotnet

666
00:41:44,119 --> 00:41:47,950
and then armitage on top of that and so
this is armitage

667
00:41:47,950 --> 00:41:54,200
converted in a couple seconds over 2.9
right a check this out this is our

668
00:41:54,200 --> 00:41:57,520
injector that works against anything
right and now we can target armitage

669
00:41:57,520 --> 00:42:00,920
we can say okay inject and a

670
00:42:00,920 --> 00:42:04,750
ubiquitous brew forsure now happens to
work and all over pay work

671
00:42:04,750 --> 00:42:07,780
payloads that we're looking at happened
at work so on and so forth

672
00:42:07,780 --> 00:42:11,839
and so we can take something like yeah

673
00:42:11,839 --> 00:42:15,460
make this button thing drop it on their
loaded up

674
00:42:15,460 --> 00:42:18,750
and now we can add buttons weekend edit

675
00:42:18,750 --> 00:42:23,310
and manipulate that Java application as
though it were done an application

676
00:42:23,310 --> 00:42:28,400
which is something new win I'm same okay
if it's in PHP Python

677
00:42:28,400 --> 00:42:33,580
jobber whatever you can bring it over
did on it interface with it roll it into

678
00:42:33,580 --> 00:42:34,630
one application

679
00:42:34,630 --> 00:42:38,810
and deployed on the dotnet framework on
roughly any platform that you want

680
00:42:38,810 --> 00:42:40,240
that's kinda what mr.

681
00:42:40,240 --> 00:42:44,169
so when I say

682
00:42:44,170 --> 00:42:48,220
this is a dotnet executing you can drag
and drop it over here

683
00:42:48,220 --> 00:42:51,240
into grateful and open it up

684
00:42:51,240 --> 00:42:55,368
as though it work and it is so here we
can opener

685
00:42:55,369 --> 00:42:58,810
armitage armitage main and come to the
main on

686
00:42:58,810 --> 00:43:02,029
armitage and so here it is here's the
main

687
00:43:02,030 --> 00:43:06,609
here's the gummi and this is armitage

688
00:43:06,609 --> 00:43:11,130
and so to go from in arbitrary job
application to adopt an application

689
00:43:11,130 --> 00:43:15,460
and then be able to have that same
editing capability in 12 months n

690
00:43:15,460 --> 00:43:19,160
that's kinda nice it opens a few doors

691
00:43:19,160 --> 00:43:23,089
and so when you take something like this
we can start injecting other payloads we

692
00:43:23,089 --> 00:43:23,589
can start

693
00:43:23,589 --> 00:43:28,000
editing in combining it and you can now
use Armitage's though it was just a

694
00:43:28,000 --> 00:43:28,700
bootstrap

695
00:43:28,700 --> 00:43:32,629
but you can write a pale around whatever
you want

696
00:43:32,630 --> 00:43:36,730
and so thats armitage in dotnet

697
00:43:36,730 --> 00:43:40,589
so back to the office cation it really
doesn't make a difference

698
00:43:40,589 --> 00:43:46,029
you can pull it off you can read it
anyways it just hides the code

699
00:43:46,030 --> 00:43:49,450
so obfuscation am

700
00:43:49,450 --> 00:43:52,710
I just wanna talk about it for real
quick second it's not a terribly

701
00:43:52,710 --> 00:43:54,080
important topic

702
00:43:54,080 --> 00:43:58,060
but the downside 7 is it only works
against

703
00:43:58,060 --> 00:44:01,570
your privates so if you have public's

704
00:44:01,570 --> 00:44:05,450
it still allows it through we can import
a puppet of but

705
00:44:05,450 --> 00:44:08,470
that's okay I am

706
00:44:08,470 --> 00:44:12,259
I really don't care obfuscation paid

707
00:44:12,260 --> 00:44:18,850
and okay so this is a slide from a
company that protect your applications

708
00:44:18,850 --> 00:44:22,180
this provides you a platform for

709
00:44:22,180 --> 00:44:26,129
intrusion detection tampered still and
isn't your application

710
00:44:26,130 --> 00:44:29,260
and so when we're talking about going up
against now where this is also what

711
00:44:29,260 --> 00:44:31,600
they're going to be using

712
00:44:31,600 --> 00:44:34,859
and these tools allow us to a edit them

713
00:44:34,859 --> 00:44:38,980
and compromise those core protection
mechanisms

714
00:44:38,980 --> 00:44:42,460
and accomplish the same undeniable
attack that we're going for

715
00:44:42,460 --> 00:44:45,790
and I hope that's where you're getting
from this I hope that these tools looked

716
00:44:45,790 --> 00:44:49,180
fairly easy that you can go to a hardon
programmer fairly

717
00:44:49,180 --> 00:44:56,180
protected program or an easy programming
get that ubiquitous control

718
00:44:56,869 --> 00:44:59,990
and that's look at that for a second
like

719
00:44:59,990 --> 00:45:03,118
what is it what is it that I'm really
looking at

720
00:45:03,119 --> 00:45:08,140
so take web inspector a it's a fairly
large in hard program

721
00:45:08,140 --> 00:45:12,170
what do you think it's protected with
office cation

722
00:45:12,170 --> 00:45:15,210
all sorts a key validation calling home
to the server

723
00:45:15,210 --> 00:45:19,650
we can drag and drop in find a we can
now know anything about our target that

724
00:45:19,650 --> 00:45:20,460
we want

725
00:45:20,460 --> 00:45:23,830
we can just are looking through and say
okay how did they protect themselves

726
00:45:23,830 --> 00:45:25,750
what standards that they adhere to

727
00:45:25,750 --> 00:45:29,300
and all that you can do something like

728
00:45:29,300 --> 00:45:32,420
here's their package scanner

729
00:45:32,420 --> 00:45:35,700
you can come into their Pakistan Air and
look for

730
00:45:35,700 --> 00:45:38,710
what technology they use

731
00:45:38,710 --> 00:45:43,010
white standards that they adhere to and
all that what code the Daily News

732
00:45:43,010 --> 00:45:49,349
here's our package scanner

733
00:45:49,349 --> 00:45:53,370
it okay

734
00:45:53,370 --> 00:45:57,339
I run a whole bunch a different versions
I have to get up in a different version

735
00:45:57,340 --> 00:46:02,320
so am the package gainers a pretty large
payload

736
00:46:02,320 --> 00:46:05,970
8.28 megabytes

737
00:46:05,970 --> 00:46:10,410
source coding resources so

738
00:46:10,410 --> 00:46:13,569
we can come in here and we can go

739
00:46:13,570 --> 00:46:18,420
think it's from and their package
scanner

740
00:46:18,420 --> 00:46:21,910
and do a quick search it

741
00:46:21,910 --> 00:46:26,299
reaches through the entire program
looking for frowns on this program

742
00:46:26,300 --> 00:46:33,000
and a return to some and so at this
point

743
00:46:33,000 --> 00:46:37,020
you reach into their program

744
00:46:37,020 --> 00:46:42,349
Titanic but search its

745
00:46:42,349 --> 00:46:44,840
yeah

746
00:46:44,840 --> 00:46:48,359
so

747
00:46:48,359 --> 00:46:52,670
your so we have a database session we
have a creek wearing

748
00:46:52,670 --> 00:46:57,150
we have a from call and we have some
parameters feeding into it

749
00:46:57,150 --> 00:47:01,170
and so you can now jump straight to

750
00:47:01,170 --> 00:47:05,589
in a couple of clicks having deep
knowledge of the application

751
00:47:05,589 --> 00:47:10,538
and then doing whatever you think you
can do from there and

752
00:47:10,539 --> 00:47:13,519
think about this this is a database
session we can grab a hole that they

753
00:47:13,519 --> 00:47:14,598
have a session in fire

754
00:47:14,599 --> 00:47:18,700
anything we want we could leverage at on
other machines and fired

755
00:47:18,700 --> 00:47:21,720
whatever we want to push in there we
could

756
00:47:21,720 --> 00:47:25,779
put something out there to cause data to
flow up to this

757
00:47:25,779 --> 00:47:29,440
so on and so forth and it takes a couple
seconds to dig through an application

758
00:47:29,440 --> 00:47:31,249
that should be incredibly hard

759
00:47:31,249 --> 00:47:38,249
that's a feature so what do you think

760
00:47:38,440 --> 00:47:41,739
do you think you could go but against a
hard application with the stuff doesn't

761
00:47:41,739 --> 00:47:42,470
look pretty easy

762
00:47:42,470 --> 00:47:45,799
I mean that's what I'm going for like
even if you're not a hardware developer

763
00:47:45,799 --> 00:47:46,730
it's like an OK

764
00:47:46,730 --> 00:47:50,170
I think I can go in and i cant do
something and

765
00:47:50,170 --> 00:47:54,480
so let's look at that what can you do so

766
00:47:54,480 --> 00:47:59,390
this attack that I did against their
program where we got through the air

767
00:47:59,390 --> 00:48:02,868
it was P and then you

768
00:48:02,869 --> 00:48:06,430
was the password validation its okay
here's that

769
00:48:06,430 --> 00:48:09,999
double people's okay here's the first

770
00:48:09,999 --> 00:48:13,439
branch branch on false kick that down

771
00:48:13,440 --> 00:48:17,759
branch on true and there you go you
thrown outside before

772
00:48:17,759 --> 00:48:22,829
and so this is what I'm going for

773
00:48:22,829 --> 00:48:27,039
Lake it's not assembly code it's not a
advanced persistent threat it some high

774
00:48:27,039 --> 00:48:28,890
schooler with a half hour an hour

775
00:48:28,890 --> 00:48:32,900
time and he can this report your program
surefire ensure that your server

776
00:48:32,900 --> 00:48:36,999
and

777
00:48:36,999 --> 00:48:40,788
a course we all know the best defense is
good sniper and

778
00:48:40,789 --> 00:48:44,700
it's an offense and defense in game are
you going up against

779
00:48:44,700 --> 00:48:48,419
web inspecting you're trying to attack
in China men are you going up against

780
00:48:48,420 --> 00:48:49,799
malware pretending to be a

781
00:48:49,799 --> 00:48:52,849
me and it's trying to defend against you
and

782
00:48:52,849 --> 00:48:57,279
whatever side you're on great will tips
the scales towards the attacker

783
00:48:57,279 --> 00:49:00,970
and then the defense's can build up

784
00:49:00,970 --> 00:49:04,419
and just like we saw a skater the entire
point in this

785
00:49:04,420 --> 00:49:07,609
is we can't wait twenty five years and
then say oh we should have been

786
00:49:07,609 --> 00:49:10,009
defending our applications for last 25
years

787
00:49:10,009 --> 00:49:13,619
we can start saying okay you have
protecting your web front

788
00:49:13,619 --> 00:49:16,950
now let's protect your software
development from the talks in the same

789
00:49:16,950 --> 00:49:17,859
exact servers

790
00:49:17,859 --> 00:49:22,970
from the inside from your terms and

791
00:49:22,970 --> 00:49:28,328
you can use Packers in crypto but in the
end

792
00:49:28,329 --> 00:49:32,769
it comes down to architecture so what's
a security we can just bashing a crossed

793
00:49:32,769 --> 00:49:35,868
we can just reverberate through most
security features

794
00:49:35,869 --> 00:49:39,420
but if you bake in security that's
better because eventually they're going

795
00:49:39,420 --> 00:49:42,480
to be able to take out your client
they're gonna be able to compromise

796
00:49:42,480 --> 00:49:45,890
every single one of your security
mechanisms but

797
00:49:45,890 --> 00:49:49,140
if you've built a secure architecture
you should be able to handle this

798
00:49:49,140 --> 00:49:52,839
you should be able to have someone
malicious on the inside attacking

799
00:49:52,839 --> 00:49:57,249
and you should be able to withstand
let's talk about that

800
00:49:57,249 --> 00:50:00,749
like what we call inside and outside
right so

801
00:50:00,749 --> 00:50:07,049
Tom

802
00:50:07,050 --> 00:50:10,670
we talked about inside and outside
threats by

803
00:50:10,670 --> 00:50:15,350
its we all know that we can pivot across
different points

804
00:50:15,350 --> 00:50:18,480
we can get inside the internal workings
have the

805
00:50:18,480 --> 00:50:22,180
enterprise and then we can take
advantage of it from the inside out so

806
00:50:22,180 --> 00:50:24,700
it stayed

807
00:50:24,700 --> 00:50:28,470
here's what are the demos that

808
00:50:28,470 --> 00:50:31,980
I like to push just because I like to
encourage security through fear

809
00:50:31,980 --> 00:50:35,470
so

810
00:50:35,470 --> 00:50:38,609
say you decompile my application and I
don't want you to

811
00:50:38,610 --> 00:50:42,020
here it is here some ubiquitous
application

812
00:50:42,020 --> 00:50:45,770
it doesn't do much but I want to protect
this application

813
00:50:45,770 --> 00:50:49,970
you come in here this is

814
00:50:49,970 --> 00:50:53,080
reflect or there's I'll spire there's

815
00:50:53,080 --> 00:50:57,840
like 5d compilers they're pretty solid
for dotnet at this moment you come in

816
00:50:57,840 --> 00:50:59,580
here you export it to do this

817
00:50:59,580 --> 00:51:03,870
will save it out and so now we have its
eighteen out to this

818
00:51:03,870 --> 00:51:07,500
we've accomplished the

819
00:51:07,500 --> 00:51:13,350
round trip in we got your source code
haha right come in here

820
00:51:13,350 --> 00:51:17,640
go to where it came out to booted up

821
00:51:17,640 --> 00:51:22,230
Visual Studios

822
00:51:22,230 --> 00:51:25,070
are needed

823
00:51:25,070 --> 00:51:28,200
beaded and

824
00:51:28,200 --> 00:51:32,029
this is a up into payloads I wanted it

825
00:51:32,030 --> 00:51:35,599
okay its interactive a a sandbox 00 get
my system

826
00:51:35,599 --> 00:51:40,140
okay so we booted up come in here

827
00:51:40,140 --> 00:51:44,660
looking to form the form doesn't render
because the objects

828
00:51:44,660 --> 00:51:49,009
in memory having been built to render
them we go through quick build cycle

829
00:51:49,010 --> 00:51:53,030
and now you can open up this logo and
it's just some

830
00:51:53,030 --> 00:51:56,760
image you can come in and you can look
at their program source code

831
00:51:56,760 --> 00:51:59,930
however when you come in look at this
about books

832
00:51:59,930 --> 00:52:03,259
and

833
00:52:03,260 --> 00:52:08,080
it renders we get arbitrary code
execution because this

834
00:52:08,080 --> 00:52:11,650
is arbitrarily running source code on
our system

835
00:52:11,650 --> 00:52:14,849
this arbitrary code execution

836
00:52:14,849 --> 00:52:17,990
fires from within Visual Studios as
Visual Studio

837
00:52:17,990 --> 00:52:21,598
from its memory space on its own threads
in a red

838
00:52:21,599 --> 00:52:24,910
normal standard firing mechanism like
this isn't reaching out

839
00:52:24,910 --> 00:52:28,049
running some assembly code or doing
something complex it could repay be

840
00:52:28,050 --> 00:52:28,859
doing books

841
00:52:28,859 --> 00:52:32,029
it's just read running source code into
it

842
00:52:32,030 --> 00:52:35,050
we have arbitrary source code and we
have

843
00:52:35,050 --> 00:52:38,830
a small malicious payload running
there's a course runs in the background

844
00:52:38,830 --> 00:52:39,790
silently

845
00:52:39,790 --> 00:52:43,990
either taking developer keys whatever
you want right we install this

846
00:52:43,990 --> 00:52:47,700
come in here and this reach my parachute

847
00:52:47,700 --> 00:52:52,379
and here's really much harsher

848
00:52:52,380 --> 00:52:55,420
because power shells and Annette

849
00:52:55,420 --> 00:52:59,670
and we can just simply really thin easy
aftershock Taylor and it still works

850
00:52:59,670 --> 00:53:04,660
wages simply reading the front in and so
that her show

851
00:53:04,660 --> 00:53:08,868
is now infected if you have a keylogger
and it's an application-level

852
00:53:08,869 --> 00:53:13,210
keylogger it's not a system-level
keylogger so blows great hasher AB

853
00:53:13,210 --> 00:53:16,530
and maybe it's an application that has
legitimate rights to the internet so we

854
00:53:16,530 --> 00:53:18,849
can to start firing off to the Internet
legitimate

855
00:53:18,849 --> 00:53:22,089
and we can hopefully

856
00:53:22,089 --> 00:53:25,970
defend against this but when you're not
acker this is a fairly normal attack

857
00:53:25,970 --> 00:53:26,520
vector

858
00:53:26,520 --> 00:53:31,380
and Visual Studios has this in their

859
00:53:31,380 --> 00:53:35,420
how do I do it right so let's look at
here's the code:

860
00:53:35,420 --> 00:53:39,430
this is the code that fires this is the
logo button

861
00:53:39,430 --> 00:53:43,089
and when this logo button is rendered
its constructors fired when the

862
00:53:43,089 --> 00:53:44,270
constructors fired

863
00:53:44,270 --> 00:53:47,630
we see are you in the process that is
this application

864
00:53:47,630 --> 00:53:51,230
no okay then attacked the shit outta and

865
00:53:51,230 --> 00:53:55,780
that's it that's that's the code put a
thread in their checked to see who you

866
00:53:55,780 --> 00:53:57,070
are and then go malicious

867
00:53:57,070 --> 00:54:01,119
and it simply here we add this on the
about box

868
00:54:01,119 --> 00:54:04,820
and there it is and now anyone looking
at this form gets attacked

869
00:54:04,820 --> 00:54:07,910
and Microsoft is not going to fix it

870
00:54:07,910 --> 00:54:11,500
this is a feature is is unknown features
since 2004

871
00:54:11,500 --> 00:54:15,369
and so I can push a good project up
there you look at my source code and now

872
00:54:15,369 --> 00:54:16,230
you're infected

873
00:54:16,230 --> 00:54:20,210
you compile wanna my applications and
now you're infected and so this is why

874
00:54:20,210 --> 00:54:21,280
talk about the

875
00:54:21,280 --> 00:54:25,740
going for in 10-20 years with dotnet
weekends are defending against these

876
00:54:25,740 --> 00:54:28,520
things one at a time and start bringing
up vulnerabilities

877
00:54:28,520 --> 00:54:32,080
and Medicaid because if Microsoft can

878
00:54:32,080 --> 00:54:35,750
run Visual Studios in a secure manner
Lake they should have their shit

879
00:54:35,750 --> 00:54:38,599
together right like they put all these
documents okay if your gonna run

880
00:54:38,599 --> 00:54:39,470
arbitrary code

881
00:54:39,470 --> 00:54:43,180
be do it inside a better protected
thread with minimal rights and all this

882
00:54:43,180 --> 00:54:44,000
other stuff

883
00:54:44,000 --> 00:54:47,950
when it comes to actually doing it no
one checks there is no trust but verify

884
00:54:47,950 --> 00:54:50,790
when you come to desktop application to
simply trusted

885
00:54:50,790 --> 00:54:57,790
you trusted not to divulge your password
and so

886
00:55:02,660 --> 00:55:05,109
and its see what else

887
00:55:05,110 --> 00:55:08,550
I'm about one more just for

888
00:55:08,550 --> 00:55:11,660
heading out to do this very many times
and

889
00:55:11,660 --> 00:55:14,850
I think it's kind have had a lot of
questions about how are you

890
00:55:14,850 --> 00:55:18,370
like bake in your own attacks inside a
few targets

891
00:55:18,370 --> 00:55:21,480
so will take this windows 7 USB

892
00:55:21,480 --> 00:55:25,530
DVD creation tool it creates USB sticks
for Windows

893
00:55:25,530 --> 00:55:29,640
to install we can then come down

894
00:55:29,640 --> 00:55:32,940
go to our fine name and here's our main

895
00:55:32,940 --> 00:55:35,940
and so at this point we have

896
00:55:35,940 --> 00:55:39,380
are application started

897
00:55:39,380 --> 00:55:43,630
and these coupled lines are important
just because a set some other context

898
00:55:43,630 --> 00:55:47,520
but after these lines are pretty much
good to go for adding your own payloads

899
00:55:47,520 --> 00:55:50,580
but scroll down to these lines in

900
00:55:50,580 --> 00:55:55,110
I am which years said compatibility text
rendering

901
00:55:55,110 --> 00:55:58,450
and so here we are this returns avoid
onto the stack

902
00:55:58,450 --> 00:56:02,240
so at this point we can put in our own
code in the stack is pretty much clean

903
00:56:02,240 --> 00:56:09,240
at this point it put in a call

904
00:56:11,540 --> 00:56:16,160
and so I'm trying to make this easy
here's where we choose who won a call to

905
00:56:16,160 --> 00:56:19,379
you take your shown that we've been
using to inject

906
00:56:19,380 --> 00:56:23,500
you drag and drop it and there it is and
so now we're linking to an external

907
00:56:23,500 --> 00:56:24,200
library

908
00:56:24,200 --> 00:56:29,149
this could easily be a packet access
inside her target we open it up

909
00:56:29,150 --> 00:56:32,710
retail King fire off point me at said

910
00:56:32,710 --> 00:56:36,359
and now we have avoid mean firing in
someone else

911
00:56:36,359 --> 00:56:39,420
inside or a target in a couple clicks
and that's how you develop your own

912
00:56:39,420 --> 00:56:40,220
payloads

913
00:56:40,220 --> 00:56:47,220
injected into a home and then save it
outright but say that I am

914
00:56:49,040 --> 00:56:54,069
yeah run as admin Jer Andrea because we
trust that store

915
00:56:54,069 --> 00:56:57,450
we downloaded off the internet its gonna
do what we want we're gonna

916
00:56:57,450 --> 00:57:00,549
needed okay after why when I trust you

917
00:57:00,550 --> 00:57:03,599
and so

918
00:57:03,599 --> 00:57:07,160
we close this window the trend continues
because this blocks that read

919
00:57:07,160 --> 00:57:10,930
its thing but so here we go we have this

920
00:57:10,930 --> 00:57:14,660
ubiquitous payload that we've been
running all day long hidden inside

921
00:57:14,660 --> 00:57:15,299
appear

922
00:57:15,300 --> 00:57:18,589
some and other stuff just to

923
00:57:18,589 --> 00:57:21,740
kinda do some tool dropping knowledge

924
00:57:21,740 --> 00:57:28,259
no it

925
00:57:28,260 --> 00:57:29,670
here this is

926
00:57:29,670 --> 00:57:35,109
a course all up on my website for free
am I put in an aim pipe communication

927
00:57:35,109 --> 00:57:36,850
module between all the payloads

928
00:57:36,850 --> 00:57:41,480
so we can come back to you this act
buttons

929
00:57:41,480 --> 00:57:45,000
deployer you can say but see

930
00:57:45,000 --> 00:57:51,300
run anything send the command to run it
and now we can reopen

931
00:57:51,300 --> 00:57:54,680
this inside ever target and so you can
do

932
00:57:54,680 --> 00:57:58,210
a sustained communication with it and

933
00:57:58,210 --> 00:58:02,240
it stays live inside the process it
opens up communication portals

934
00:58:02,240 --> 00:58:06,060
on my website I rolled it into a mess
way payload as well

935
00:58:06,060 --> 00:58:09,930
you can then proxy that do communication
over named pipes over Metasploit what

936
00:58:09,930 --> 00:58:10,480
everyone

937
00:58:10,480 --> 00:58:14,630
pretty much anything you want let's look

938
00:58:14,630 --> 00:58:19,130
and drag and drop in some source code in
here a source code viewing in here

939
00:58:19,130 --> 00:58:23,080
and now we can say okay show me love
your source code or change your core

940
00:58:23,080 --> 00:58:24,450
variables or whatever you want

941
00:58:24,450 --> 00:58:28,750
and this is all from that initial 34
clicks to put that

942
00:58:28,750 --> 00:58:32,240
one Collins had ever target and

943
00:58:32,240 --> 00:58:38,029
you can just are going to like it was
your own application

944
00:58:38,030 --> 00:58:40,080
something else to throw out there dead

945
00:58:40,080 --> 00:58:43,450
is nice but this is say find

946
00:58:43,450 --> 00:58:46,549
I am you want to come to this class

947
00:58:46,550 --> 00:58:50,110
message dialogue and

948
00:58:50,110 --> 00:58:54,110
you see all these private private
private you can come in here

949
00:58:54,110 --> 00:58:58,180
go to access this is just makes
everything public

950
00:58:58,180 --> 00:59:03,680
you come back to this class and its
public public public

951
00:59:03,680 --> 00:59:07,460
and so when you trying to interface with
someone else's API you can just take

952
00:59:07,460 --> 00:59:08,760
control of their API

953
00:59:08,760 --> 00:59:12,470
you can just take control their program
and drive it looked like it was an API

954
00:59:12,470 --> 00:59:16,109
and when you look up to someone else's
program just take control

955
00:59:16,110 --> 00:59:20,940
and you can do this to an entire
application DLL click Save now it's all

956
00:59:20,940 --> 00:59:21,470
public

957
00:59:21,470 --> 00:59:24,580
you can reference it like it's an
internal DLL and just

958
00:59:24,580 --> 00:59:30,190
drive it like it's a rental and that's a
danger

959
00:59:30,190 --> 00:59:33,310
like when we talk about Microsoft
protecting us they're not protecting

960
00:59:33,310 --> 00:59:34,210
themselves

961
00:59:34,210 --> 00:59:38,490
they're not carrying that win they take
over RSP ends from

962
00:59:38,490 --> 00:59:41,629
a single line of source code that that's
a danger

963
00:59:41,630 --> 00:59:45,820
that you can then in there pin it to the
rest in the enterprise through the SPN

964
00:59:45,820 --> 00:59:49,050
you can get developer keys you can get
database keys you can

965
00:59:49,050 --> 00:59:53,960
including bacon malware and this isn't
known for it since 2004

966
00:59:53,960 --> 00:59:58,060
and they have no plans on fixing it
going forwards why not because they're

967
00:59:58,060 --> 00:59:58,730
is no

968
00:59:58,730 --> 01:00:02,270
verification from the community there is
no push from the community hey I'm

969
01:00:02,270 --> 01:00:04,560
getting routed from this all the time
can you please fix it

970
01:00:04,560 --> 01:00:11,070
so that's partly why I'm here so when
you look inside the cert seen what you

971
01:00:11,070 --> 01:00:11,810
shouldn't see

972
01:00:11,810 --> 01:00:16,420
you start seeing the truth and what's
behind their and that's what I'm

973
01:00:16,420 --> 01:00:17,010
bringing you

974
01:00:17,010 --> 01:00:21,300
day ease and knowledge what you really
running deep in your system

975
01:00:21,300 --> 01:00:24,970
you can find out what kinda login check
sir

976
01:00:24,970 --> 01:00:28,430
actually doing what kind of storage
mechanisms are actually using

977
01:00:28,430 --> 01:00:31,520
when they say they're phipps compliant
are they just saying that

978
01:00:31,520 --> 01:00:36,200
Lake are they phipps compliant in like
the past one single test from someone

979
01:00:36,200 --> 01:00:37,000
that they paid off

980
01:00:37,000 --> 01:00:42,000
or are they doing good standards all the
way around you can find out

981
01:00:42,000 --> 01:00:45,290
what kinda crypto they're using whether
it's home big or whether it's of the

982
01:00:45,290 --> 01:00:45,700
show

983
01:00:45,700 --> 01:00:52,049
for proprietary in hardened verified you
can start evaluating what candidate

984
01:00:52,050 --> 01:00:53,000
you're listening

985
01:00:53,000 --> 01:00:56,410
make we just have applications firing
home data all the time

986
01:00:56,410 --> 01:01:00,190
what are they actually sending home
about you do you not want your programs

987
01:01:00,190 --> 01:01:00,730
the fire

988
01:01:00,730 --> 01:01:05,090
information about you back to the server
sure turning off go in there and put a

989
01:01:05,090 --> 01:01:08,780
return sure the top of all the phone
home mechanisms and now you just taking

990
01:01:08,780 --> 01:01:09,790
out the phone home

991
01:01:09,790 --> 01:01:13,590
which is a boner ability to you because
if I'm that server why should I know

992
01:01:13,590 --> 01:01:14,900
where your friends ex lattice

993
01:01:14,900 --> 01:01:19,690
why should I know where you are anytime
you want to use a program it's a boner

994
01:01:19,690 --> 01:01:20,160
billing

995
01:01:20,160 --> 01:01:25,629
someone could use that against you I
could use it against you you can look at

996
01:01:25,630 --> 01:01:29,240
the crypto keys what are they actually
what kinda vector initialization what

997
01:01:29,240 --> 01:01:32,790
kinda randomization what kinda standards
are they actually using deep inside the

998
01:01:32,790 --> 01:01:33,340
program

999
01:01:33,340 --> 01:01:38,090
and now you can not only verify your
programs other people's programs you can

1000
01:01:38,090 --> 01:01:42,360
go to a client's a program a secure
program be isn't secure because a

1001
01:01:42,360 --> 01:01:46,880
this technology standard and we can
actually start making informed decisions

1002
01:01:46,880 --> 01:01:47,900
about our

1003
01:01:47,900 --> 01:01:52,770
software that we choose to trust does
anyone have the time and the Restless

1004
01:01:52,770 --> 01:01:58,980
Tom Co

1005
01:01:58,980 --> 01:02:03,210
I am look at the crypto I am see if its
Big Ten

1006
01:02:03,210 --> 01:02:07,470
easy and if there's any questions are
more than happy to answer min

1007
01:02:07,470 --> 01:02:14,470
I hope you guys enjoy this talk in the
tools that are free its

1008
01:02:14,710 --> 01:02:18,880
way

1009
01:02:18,880 --> 01:02:22,610
well I'm burning questions or comments
on the course happy to take more after

1010
01:02:22,610 --> 01:02:24,260
but I

1011
01:02:24,260 --> 01:02:27,130
and before questions and comments like
how many have you do you think you would

1012
01:02:27,130 --> 01:02:30,520
want to like uses when you get home

1013
01:02:30,520 --> 01:02:34,310
nights okay I good news and bad news
game

1014
01:02:34,310 --> 01:02:38,890
I'm good news my tools are free bad news
is I slow down what's on the Internet by

1015
01:02:38,890 --> 01:02:39,970
at least six months

1016
01:02:39,970 --> 01:02:43,549
so everything that you saw from office
cation

1017
01:02:43,550 --> 01:02:50,520
to Searcy know that is trickling out
slowly and then

1018
01:02:50,520 --> 01:02:54,230
good news is I brought a pack and DVD's
with some other newest

1019
01:02:54,230 --> 01:02:59,110
agree with on it and a collection of
applications videos demos trainings

1020
01:02:59,110 --> 01:03:00,640
everything you need to get off the
ground

1021
01:03:00,640 --> 01:03:03,799
and so you can pop this and go straight
to tap

1022
01:03:03,800 --> 01:03:07,850
and the course prix I am

1023
01:03:07,850 --> 01:03:11,100
when I say attack applications Lake

1024
01:03:11,100 --> 01:03:14,520
how many have you want to defend an
application with this tech

1025
01:03:14,520 --> 01:03:17,520
I me and you would want to

1026
01:03:17,520 --> 01:03:21,380
verifier tak an application with this
decade

1027
01:03:21,380 --> 01:03:24,820
I mean when you think about your
competition have your intellectual

1028
01:03:24,820 --> 01:03:26,440
property with this kinda stuff

1029
01:03:26,440 --> 01:03:29,720
bike isn't that a corner on their
billing

1030
01:03:29,720 --> 01:03:32,740
I mean when you come to your clients
like yours all your intellectual

1031
01:03:32,740 --> 01:03:34,700
property here's an attack against you

1032
01:03:34,700 --> 01:03:40,060
and it's all in 15 minutes questions
comments let's start

1033
01:03:40,060 --> 01:03:45,200
yes um

1034
01:03:45,200 --> 01:03:51,750
use of my program open the source code
here

1035
01:03:51,750 --> 01:03:57,450
if u'd compile my program I will sue you
him

1036
01:03:57,450 --> 01:04:01,169
I i mean my program by de facto makes
everything dotnet

1037
01:04:01,170 --> 01:04:04,830
open source so if you can figure out the
source cohesion using

1038
01:04:04,830 --> 01:04:09,279
my programs are non-commercial they're
not for sale

1039
01:04:09,280 --> 01:04:12,770
and you can't buy them and you can't use
in commercial environments

1040
01:04:12,770 --> 01:04:15,800
'em

1041
01:04:15,800 --> 01:04:19,000
so that being said I am

1042
01:04:19,000 --> 01:04:22,820
does anyone want to use in a commercial
environment I mean just to get a feel

1043
01:04:22,820 --> 01:04:26,550
now good Singh I did a good thing I stop
people who would want to you from doing

1044
01:04:26,550 --> 01:04:29,590
it now with your course wouldn't want
you

1045
01:04:29,590 --> 01:04:32,900
I am and so how about

1046
01:04:32,900 --> 01:04:36,740
anyone they would actually use it like
why would you use it you have any ideas

1047
01:04:36,740 --> 01:04:42,240
yeah ok

1048
01:04:42,240 --> 01:04:46,109
your I am burn

1049
01:04:46,110 --> 01:04:53,110
sure

1050
01:05:04,760 --> 01:05:08,550
yeah

1051
01:05:08,550 --> 01:05:12,930
and I mean and so is basically like when
you get to check a desktop applications

1052
01:05:12,930 --> 01:05:15,500
to find out if it actually needs a
password to progress

1053
01:05:15,500 --> 01:05:19,030
and they're certain standards like when
you talk about backup software

1054
01:05:19,030 --> 01:05:22,580
you do not need a password to see what
is in the backup software

1055
01:05:22,580 --> 01:05:26,660
you do need a password to uninfected
where you can go through all the backup

1056
01:05:26,660 --> 01:05:30,069
singers pull out all the files are
stored in there and what information was

1057
01:05:30,070 --> 01:05:30,869
backed up

1058
01:05:30,869 --> 01:05:34,200
what dates what size is all that and so

1059
01:05:34,200 --> 01:05:38,689
you can look at community standards and
I'm

1060
01:05:38,690 --> 01:05:42,359
okay let me put it this way if anyone
has any really good questions they

1061
01:05:42,359 --> 01:05:45,529
definitely get one of these DVD's which
is in a limited supply

1062
01:05:45,530 --> 01:05:52,530
so any questions ok

1063
01:05:55,350 --> 01:05:56,200
me

1064
01:05:56,200 --> 01:05:58,339
no

1065
01:05:58,340 --> 01:06:03,040
not not in any way this specifically in
only attacks gotten it at this moment

1066
01:06:03,040 --> 01:06:06,080
and I don't really have any plans on
expanding it out from there

1067
01:06:06,080 --> 01:06:10,310
it's a dotnet specific on

1068
01:06:10,310 --> 01:06:13,509
turn some data way

1069
01:06:13,510 --> 01:06:17,810
idea ads

1070
01:06:17,810 --> 01:06:21,980
354 compatible some other payloads are
42 incompatible

1071
01:06:21,980 --> 01:06:25,940
and you have to recompile your payload
to the target I'm

1072
01:06:25,940 --> 01:06:32,070
it

1073
01:06:32,070 --> 01:06:35,540
no I don't them

1074
01:06:35,540 --> 01:06:40,609
yep

1075
01:06:40,609 --> 01:06:45,049
oh yeah

1076
01:06:45,050 --> 01:06:48,630
and when you talk about like good and
bad coding practices like

1077
01:06:48,630 --> 01:06:52,550
the kind the destruction that you can
read give just one airs made

1078
01:06:52,550 --> 01:06:59,550
them

1079
01:07:01,819 --> 01:07:03,620
0

1080
01:07:03,620 --> 01:07:04,400
yet

1081
01:07:04,400 --> 01:07:08,700
and and it's a really so he likes the
line by line inspections which

1082
01:07:08,700 --> 01:07:11,680
when you go to a client engagement you
don't have to say hey why don't you

1083
01:07:11,680 --> 01:07:15,020
semi-retired environment trust me with
the Kings to your kingdom

1084
01:07:15,020 --> 01:07:18,210
you can say okay I'm gonna go to your
website downloader trial in just get all

1085
01:07:18,210 --> 01:07:18,980
your source code

1086
01:07:18,980 --> 01:07:22,140
and your truck clients don't have to
trust you more than anyone else

1087
01:07:22,140 --> 01:07:26,359
they're just giving have their source
code everyone and because that's when

1088
01:07:26,360 --> 01:07:33,360
the first thing to get to tell 'em

1089
01:07:34,000 --> 01:07:36,210
yep I'll I am

1090
01:07:36,210 --> 01:07:39,270
what I'm trying not to attack mono so no

1091
01:07:39,270 --> 01:07:44,710
but I mean I'm trying to slow down the
dissemination in this so

1092
01:07:44,710 --> 01:07:47,450
like I said ten twenty years will look
back and say oh yeah I don't know it's

1093
01:07:47,450 --> 01:07:48,960
much more secure than it would have been

1094
01:07:48,960 --> 01:07:52,950
but yet you can it's pretty easy like
it's two clades

1095
01:07:52,950 --> 01:07:59,950
had home

1096
01:08:00,990 --> 01:08:06,328
I am so when you talk about
irregularities between job in dotnet

1097
01:08:06,329 --> 01:08:07,290
conversions

1098
01:08:07,290 --> 01:08:11,099
it's the idea that one thing doesn't map
to the other right

1099
01:08:11,099 --> 01:08:14,220
and dotnet is a super said

1100
01:08:14,220 --> 01:08:20,370
a opcodes compared to Java and Microsoft
Intel version 1.4 develop the Java

1101
01:08:20,370 --> 01:08:21,059
Runtime

1102
01:08:21,060 --> 01:08:24,520
and then from there there's a little bit
of a split Microsoft went off and it's

1103
01:08:24,520 --> 01:08:25,210
something

1104
01:08:25,210 --> 01:08:30,779
and where some other also the public
developers have gotten it and gotten it

1105
01:08:30,779 --> 01:08:32,640
has fifty more opcodes in job

1106
01:08:32,640 --> 01:08:37,060
so you can basically implement anything
in Java straight and done it without

1107
01:08:37,060 --> 01:08:38,799
conversion to go from Java to

1108
01:08:38,799 --> 01:08:43,189
air from dotnet to Java you have to do a
little shaking but no

1109
01:08:43,189 --> 01:08:47,599
dates down I had converted massive
amounts

1110
01:08:47,600 --> 01:08:51,199
Java and like that a que bien project

1111
01:08:51,198 --> 01:08:54,620
I had to you convert one-line where

1112
01:08:54,620 --> 01:08:58,660
it set the growing and I had to take
that out so it didn't use

1113
01:08:58,660 --> 01:09:01,698
a unique gooey skin

1114
01:09:01,698 --> 01:09:08,698
and its ago

1115
01:09:11,719 --> 01:09:16,140
I'm yeah I attack objects are sometimes
when I'm attacking job I have to report

1116
01:09:16,140 --> 01:09:17,549
to a different type of object

1117
01:09:17,549 --> 01:09:21,410
but nights it's pretty good like you can

1118
01:09:21,410 --> 01:09:25,339
and then you can roll it in and use it
like it's a core library and so

1119
01:09:25,339 --> 01:09:28,589
when we find a job for libraries in
Psych home and if this was in dotnet to

1120
01:09:28,589 --> 01:09:29,439
be so nice

1121
01:09:29,439 --> 01:09:33,849
me as I know it is it is flip it over
it's a DLL and you included

1122
01:09:33,850 --> 01:09:36,989
and it looks like dattt runs like dot
net and

1123
01:09:36,988 --> 01:09:41,318
you don't have to have the JVM in your
deployment cycle in a lot of companies

1124
01:09:41,319 --> 01:09:42,199
are starting today

1125
01:09:42,198 --> 01:09:46,059
uses when they developed in years a bit
job application they certainly want to

1126
01:09:46,060 --> 01:09:47,350
go desktop in dotnet

1127
01:09:47,350 --> 01:09:54,350
psycho k drag-and-drop yet

1128
01:09:58,010 --> 01:10:01,860
I'm trying to encourage my purse of 212
sandbox the vulnerability

1129
01:10:01,860 --> 01:10:06,179
in and I am just going to keep putting
it out there

1130
01:10:06,180 --> 01:10:09,760
like if someone went up to code like to
put in the you know I'm a singer I p.m.

1131
01:10:09,760 --> 01:10:10,630
hash back

1132
01:10:10,630 --> 01:10:13,630
to Twitter when you downloading look at
the source code

1133
01:10:13,630 --> 01:10:17,040
Microsoft might start taking answers and
into other

1134
01:10:17,040 --> 01:10:23,500
is a security reason there's no
financial reason for them to fix it and

1135
01:10:23,500 --> 01:10:26,530
best just unfortunately the paradigm we
live in but no I'm

1136
01:10:26,530 --> 01:10:29,570
I'm trying to create social pressure and

1137
01:10:29,570 --> 01:10:36,160
market economic probability

1138
01:10:36,160 --> 01:10:39,269
other questions go

1139
01:10:39,270 --> 01:10:42,540
well I hope you enjoy this talk and on

1140
01:10:42,540 --> 01:10:45,970
enjoy the tools and thanks

1141
01:10:45,970 --> 01:10:52,970
well

1142
01:10:53,150 --> 01:11:00,150
up are

1143
01:11:05,060 --> 01:11:11,920
hit you up

1144
01:11:11,920 --> 01:11:12,240
okay

