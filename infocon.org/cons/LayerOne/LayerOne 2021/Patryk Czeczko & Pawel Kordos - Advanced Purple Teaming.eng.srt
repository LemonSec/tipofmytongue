1
00:00:01,120 --> 00:00:03,520
hello guys welcome to our today

2
00:00:03,520 --> 00:00:05,680
uh talk we will try to introduce you

3
00:00:05,680 --> 00:00:06,560
into a world of

4
00:00:06,560 --> 00:00:08,720
purple teaming which we find very

5
00:00:08,720 --> 00:00:09,920
interesting and

6
00:00:09,920 --> 00:00:13,040
a future of uh computer security

7
00:00:13,040 --> 00:00:15,200
and the company's security my name is

8
00:00:15,200 --> 00:00:16,079
pablo cordos

9
00:00:16,079 --> 00:00:19,199
and today with my friend patrick hello

10
00:00:19,199 --> 00:00:21,840
we will try to show you some some basics

11
00:00:21,840 --> 00:00:23,760
about purple teaming then we will go

12
00:00:23,760 --> 00:00:25,840
through a simple purple exercise

13
00:00:25,840 --> 00:00:28,800
so you can understand uh how it works on

14
00:00:28,800 --> 00:00:30,080
both sides and

15
00:00:30,080 --> 00:00:32,640
in the end we'll have some probably have

16
00:00:32,640 --> 00:00:34,160
some conclusions together

17
00:00:34,160 --> 00:00:37,360
all right so uh let's start and the

18
00:00:37,360 --> 00:00:38,160
first let's

19
00:00:38,160 --> 00:00:40,719
let's define actually what is a purple

20
00:00:40,719 --> 00:00:42,640
thing but before doing that

21
00:00:42,640 --> 00:00:45,520
uh we first need to know and probably

22
00:00:45,520 --> 00:00:46,399
you already know

23
00:00:46,399 --> 00:00:49,280
the two teams the red team and the ball

24
00:00:49,280 --> 00:00:51,199
team let's start from the offensive one

25
00:00:51,199 --> 00:00:52,239
the red one

26
00:00:52,239 --> 00:00:55,280
and what actually redeeming gives you is

27
00:00:55,280 --> 00:00:59,039
to your company what does it really give

28
00:00:59,440 --> 00:01:02,239
a report all right yeah so usually your

29
00:01:02,239 --> 00:01:02,719
team

30
00:01:02,719 --> 00:01:05,119
gives you a report but actually it's

31
00:01:05,119 --> 00:01:07,119
typed more into the technical part

32
00:01:07,119 --> 00:01:10,080
so as a result of uh panting this is not

33
00:01:10,080 --> 00:01:12,479
a penetration test

34
00:01:12,479 --> 00:01:15,360
red teaming is a process when you try to

35
00:01:15,360 --> 00:01:16,880
simulate

36
00:01:16,880 --> 00:01:20,080
bad guys scenarios how they work follow

37
00:01:20,080 --> 00:01:20,880
the techniques

38
00:01:20,880 --> 00:01:23,280
and try to identify the weakest spots in

39
00:01:23,280 --> 00:01:24,640
your organization

40
00:01:24,640 --> 00:01:27,920
but actually during this exercise

41
00:01:27,920 --> 00:01:31,280
you will not have a comprehensive

42
00:01:31,280 --> 00:01:33,600
view about your current company's

43
00:01:33,600 --> 00:01:34,400
situation

44
00:01:34,400 --> 00:01:37,759
you will not have a complex list of

45
00:01:37,759 --> 00:01:40,240
weaknesses and all the vulnerabilities

46
00:01:40,240 --> 00:01:42,240
as a result usually

47
00:01:42,240 --> 00:01:44,560
you will have some kind of a path how

48
00:01:44,560 --> 00:01:45,439
the attacker

49
00:01:45,439 --> 00:01:48,320
can get into your network how they can

50
00:01:48,320 --> 00:01:49,840
perform natural movement

51
00:01:49,840 --> 00:01:52,479
what data can actually access and so on

52
00:01:52,479 --> 00:01:53,520
and so on

53
00:01:53,520 --> 00:01:55,920
and as a result you have this fancy

54
00:01:55,920 --> 00:01:57,200
report which we

55
00:01:57,200 --> 00:02:00,000
have been talking about a few minutes

56
00:02:00,000 --> 00:02:00,960
before that

57
00:02:00,960 --> 00:02:04,320
but this report actually is only a

58
00:02:04,320 --> 00:02:07,439
path which was used by an attacker or at

59
00:02:07,439 --> 00:02:08,080
least

60
00:02:08,080 --> 00:02:10,318
by a testers but actually may not give

61
00:02:10,318 --> 00:02:12,000
you may not give you a full

62
00:02:12,000 --> 00:02:14,400
scope about the security of your

63
00:02:14,400 --> 00:02:15,760
organization

64
00:02:15,760 --> 00:02:18,959
uh another story someone who probably

65
00:02:18,959 --> 00:02:20,319
should protect your company

66
00:02:20,319 --> 00:02:22,160
those are the bluetooth guys bluetooth

67
00:02:22,160 --> 00:02:25,120
guys mostly association associate clear

68
00:02:25,120 --> 00:02:27,840
guys which are just clicking on alerts

69
00:02:27,840 --> 00:02:28,239
but

70
00:02:28,239 --> 00:02:31,760
they do more than that first

71
00:02:31,760 --> 00:02:34,879
they try to observe the current

72
00:02:34,879 --> 00:02:36,959
company situation they look for the logs

73
00:02:36,959 --> 00:02:38,480
and they should probably

74
00:02:38,480 --> 00:02:42,400
have a wide scope they should follow uh

75
00:02:42,400 --> 00:02:45,519
their uh the data sources they should uh

76
00:02:45,519 --> 00:02:47,040
track malicious activities

77
00:02:47,040 --> 00:02:50,400
but this is not an easy task first of

78
00:02:50,400 --> 00:02:51,200
all

79
00:02:51,200 --> 00:02:54,080
doing blue team is complicated because

80
00:02:54,080 --> 00:02:54,800
you got

81
00:02:54,800 --> 00:02:57,440
a lot of alerts and for those of you who

82
00:02:57,440 --> 00:02:58,000
have seen

83
00:02:58,000 --> 00:03:01,680
an alert from any monitoring tool

84
00:03:01,680 --> 00:03:04,159
like a casual sentinel or tibana you

85
00:03:04,159 --> 00:03:05,519
probably know that

86
00:03:05,519 --> 00:03:08,080
you count them within millions yeah

87
00:03:08,080 --> 00:03:09,519
millions or at least hundreds of

88
00:03:09,519 --> 00:03:10,959
thousands records

89
00:03:10,959 --> 00:03:13,519
some of the tool they actually gives you

90
00:03:13,519 --> 00:03:14,720
some kind of a hint

91
00:03:14,720 --> 00:03:18,480
uh what's really suspicious and what's

92
00:03:18,480 --> 00:03:21,040
what's not so serious but sometimes

93
00:03:21,040 --> 00:03:23,200
those suggestions they are not perfect

94
00:03:23,200 --> 00:03:26,640
like like we like here we go remote code

95
00:03:26,640 --> 00:03:27,840
execution attempt

96
00:03:27,840 --> 00:03:30,319
i would probably consider it at least

97
00:03:30,319 --> 00:03:31,680
high maybe

98
00:03:31,680 --> 00:03:33,760
maybe this is one particular example not

99
00:03:33,760 --> 00:03:35,840
so uh so malicious but

100
00:03:35,840 --> 00:03:37,519
those kind of issues they probably

101
00:03:37,519 --> 00:03:39,120
should be treated with the highest

102
00:03:39,120 --> 00:03:40,239
priority

103
00:03:40,239 --> 00:03:42,480
and without proper understanding of

104
00:03:42,480 --> 00:03:43,599
those uh

105
00:03:43,599 --> 00:03:46,720
issues you probably will be very

106
00:03:46,720 --> 00:03:50,319
keen to just ignore them or just

107
00:03:50,319 --> 00:03:52,959
click on them all right approved go on

108
00:03:52,959 --> 00:03:54,080
go on and

109
00:03:54,080 --> 00:03:57,120
go on so this is the the first issue

110
00:03:57,120 --> 00:04:00,000
so maybe you should jump into a

111
00:04:00,000 --> 00:04:02,080
documentation of the software maybe you

112
00:04:02,080 --> 00:04:04,159
can look for additional information here

113
00:04:04,159 --> 00:04:06,720
but hey look this is an official

114
00:04:06,720 --> 00:04:08,159
microsoft documentation

115
00:04:08,159 --> 00:04:10,959
which about the past the hash attack and

116
00:04:10,959 --> 00:04:13,200
past the hashtag it's a 3d series one

117
00:04:13,200 --> 00:04:16,238
but let's look button there

118
00:04:16,238 --> 00:04:18,399
we got official information if the hash

119
00:04:18,399 --> 00:04:20,639
was used from computers used regularly

120
00:04:20,639 --> 00:04:21,440
close the

121
00:04:21,440 --> 00:04:24,639
alert as false positive well i agree

122
00:04:24,639 --> 00:04:26,080
that this probably

123
00:04:26,080 --> 00:04:27,919
doesn't mean that this particular

124
00:04:27,919 --> 00:04:29,600
workstation has been hacked

125
00:04:29,600 --> 00:04:32,240
but i wouldn't consider that as that

126
00:04:32,240 --> 00:04:33,520
easy to

127
00:04:33,520 --> 00:04:35,600
trigger to mark as false positive

128
00:04:35,600 --> 00:04:37,759
probably you should investigate more and

129
00:04:37,759 --> 00:04:41,040
look more into details so

130
00:04:41,040 --> 00:04:44,880
you can be sure that there are no uh

131
00:04:44,880 --> 00:04:48,400
guests within your network and

132
00:04:48,400 --> 00:04:50,880
we got those two teams first we got the

133
00:04:50,880 --> 00:04:52,880
red team then we got a blue team

134
00:04:52,880 --> 00:04:55,520
and they have different success measures

135
00:04:55,520 --> 00:04:57,199
like the red team success

136
00:04:57,199 --> 00:05:00,400
is to find the path to probably

137
00:05:00,400 --> 00:05:01,600
compromise your domain

138
00:05:01,600 --> 00:05:03,600
to exploit the data maybe steal some

139
00:05:03,600 --> 00:05:04,960
cash and so on

140
00:05:04,960 --> 00:05:07,680
and when they actually have a success

141
00:05:07,680 --> 00:05:09,039
well that's great

142
00:05:09,039 --> 00:05:11,120
blue team what's the success for

143
00:05:11,120 --> 00:05:12,160
building well

144
00:05:12,160 --> 00:05:13,840
they see everything they see pretty much

145
00:05:13,840 --> 00:05:15,919
everything they probably got some alerts

146
00:05:15,919 --> 00:05:17,199
which is great

147
00:05:17,199 --> 00:05:20,080
they may find something which is more or

148
00:05:20,080 --> 00:05:20,479
less

149
00:05:20,479 --> 00:05:22,960
severe and this is still a success but

150
00:05:22,960 --> 00:05:24,080
none of this

151
00:05:24,080 --> 00:05:25,759
is actually your company's success

152
00:05:25,759 --> 00:05:28,080
because when a blue team

153
00:05:28,080 --> 00:05:31,360
has got a successful project well that's

154
00:05:31,360 --> 00:05:33,759
probably sad because there is a path

155
00:05:33,759 --> 00:05:36,000
which attacker can follow

156
00:05:36,000 --> 00:05:40,080
if a blue team has uh has a success

157
00:05:40,080 --> 00:05:40,800
that's great

158
00:05:40,800 --> 00:05:43,440
but it may not give you a proper level

159
00:05:43,440 --> 00:05:44,560
of actually

160
00:05:44,560 --> 00:05:48,080
uh of a secure so is there anything we

161
00:05:48,080 --> 00:05:49,759
could do about it

162
00:05:49,759 --> 00:05:52,400
to make sure that our company is really

163
00:05:52,400 --> 00:05:52,880
safe

164
00:05:52,880 --> 00:05:55,520
and that those two teams can utilize

165
00:05:55,520 --> 00:05:56,720
their knowledge

166
00:05:56,720 --> 00:05:59,600
their tools just to make sure that you

167
00:05:59,600 --> 00:06:01,280
are actually improving your level of

168
00:06:01,280 --> 00:06:02,400
security

169
00:06:02,400 --> 00:06:05,440
well in fact there is at least an idea

170
00:06:05,440 --> 00:06:08,319
it's called a purple theme so purple

171
00:06:08,319 --> 00:06:08,960
dimming

172
00:06:08,960 --> 00:06:12,319
is a hybrid solution between red team

173
00:06:12,319 --> 00:06:15,039
and the blue team they are working

174
00:06:15,039 --> 00:06:15,759
together

175
00:06:15,759 --> 00:06:18,240
they can those two teams can be separate

176
00:06:18,240 --> 00:06:19,759
they can be separate like

177
00:06:19,759 --> 00:06:22,560
physical separate teams or they can be

178
00:06:22,560 --> 00:06:22,960
like

179
00:06:22,960 --> 00:06:26,160
uh working together uh for a short

180
00:06:26,160 --> 00:06:26,960
period of time

181
00:06:26,960 --> 00:06:28,720
you can also have a dedicated purple

182
00:06:28,720 --> 00:06:30,080
team it doesn't really matter

183
00:06:30,080 --> 00:06:33,039
it's all about the words came out not

184
00:06:33,039 --> 00:06:34,319
actual actual

185
00:06:34,319 --> 00:06:38,319
human organization and because of that

186
00:06:38,319 --> 00:06:40,240
because of knowledge over teaming how to

187
00:06:40,240 --> 00:06:41,039
actually

188
00:06:41,039 --> 00:06:43,120
attack the company and the knowledge of

189
00:06:43,120 --> 00:06:45,280
the blue teaming how you can actually

190
00:06:45,280 --> 00:06:46,639
see something malicious within your

191
00:06:46,639 --> 00:06:48,560
company you can combine those two

192
00:06:48,560 --> 00:06:51,360
knowledges and as a result maybe really

193
00:06:51,360 --> 00:06:53,199
improve your level of security

194
00:06:53,199 --> 00:06:56,000
and you can actually address the real

195
00:06:56,000 --> 00:06:57,039
issues and the real

196
00:06:57,039 --> 00:07:00,160
uh paths that attackers follow and you

197
00:07:00,160 --> 00:07:00,960
can be sure

198
00:07:00,960 --> 00:07:04,639
that on on one side red team

199
00:07:04,639 --> 00:07:07,840
can or cannot launch some kind of uh

200
00:07:07,840 --> 00:07:10,000
tool or perform some kind of attack and

201
00:07:10,000 --> 00:07:11,599
from the other perspective we can

202
00:07:11,599 --> 00:07:13,919
see whether the blue team actually sees

203
00:07:13,919 --> 00:07:14,720
that

204
00:07:14,720 --> 00:07:17,199
if not maybe they can use their fancy

205
00:07:17,199 --> 00:07:18,560
tools to

206
00:07:18,560 --> 00:07:22,240
go through logs they can tune them and

207
00:07:22,240 --> 00:07:25,199
check what they can do to actually see

208
00:07:25,199 --> 00:07:25,440
an

209
00:07:25,440 --> 00:07:28,080
attacker all right this this is

210
00:07:28,080 --> 00:07:29,199
relatively

211
00:07:29,199 --> 00:07:32,960
easy to tell in fact we can

212
00:07:32,960 --> 00:07:34,960
now go to something practical we will

213
00:07:34,960 --> 00:07:37,199
show you how it can be really performed

214
00:07:37,199 --> 00:07:39,520
and this will be led by by patrick

215
00:07:39,520 --> 00:07:42,800
patrick over here thanks so to

216
00:07:42,800 --> 00:07:46,479
wrap up what pablo said red teaming is

217
00:07:46,479 --> 00:07:48,639
not quite a pen test however it may look

218
00:07:48,639 --> 00:07:51,039
like this but this is a

219
00:07:51,039 --> 00:07:53,680
scenario based goal-oriented exercise

220
00:07:53,680 --> 00:07:55,120
targeted at

221
00:07:55,120 --> 00:07:56,879
some crown jewels of the organization

222
00:07:56,879 --> 00:07:58,319
and the red team has tried to

223
00:07:58,319 --> 00:08:01,599
show the shortest or easiest or

224
00:08:01,599 --> 00:08:03,840
most visible attack path to compromise

225
00:08:03,840 --> 00:08:04,960
the company

226
00:08:04,960 --> 00:08:07,919
while blue team existed long before red

227
00:08:07,919 --> 00:08:08,720
teams and

228
00:08:08,720 --> 00:08:11,360
they were weren't called by colors i

229
00:08:11,360 --> 00:08:13,120
think the

230
00:08:13,120 --> 00:08:17,520
blue is some addition to the

231
00:08:17,520 --> 00:08:19,840
offensive guys being red teams the

232
00:08:19,840 --> 00:08:21,680
combination is called purple team or

233
00:08:21,680 --> 00:08:23,440
purple teaming

234
00:08:23,440 --> 00:08:26,960
and during this this top we would

235
00:08:26,960 --> 00:08:29,440
want to go to a practical exercise of

236
00:08:29,440 --> 00:08:30,639
purple theming to

237
00:08:30,639 --> 00:08:33,360
show you what's that really about so

238
00:08:33,360 --> 00:08:34,880
we'll start with

239
00:08:34,880 --> 00:08:38,559
uh analyzing a malicious document

240
00:08:38,559 --> 00:08:41,440
malicious word document with a macro to

241
00:08:41,440 --> 00:08:43,519
see

242
00:08:43,519 --> 00:08:48,320
an example attack path to map

243
00:08:48,320 --> 00:08:50,800
actual ttps leveraged by this process

244
00:08:50,800 --> 00:08:51,680
document

245
00:08:51,680 --> 00:08:54,480
and to to map them to my true attack

246
00:08:54,480 --> 00:08:55,680
framework

247
00:08:55,680 --> 00:08:57,760
then based on the ctps we will plan a

248
00:08:57,760 --> 00:08:59,279
simulation scenario

249
00:08:59,279 --> 00:09:02,080
develop simulations for for those

250
00:09:02,080 --> 00:09:03,360
specific edps

251
00:09:03,360 --> 00:09:05,839
and then execute them in a controlled

252
00:09:05,839 --> 00:09:06,480
environment

253
00:09:06,480 --> 00:09:09,680
and finally we'll try to to detect the

254
00:09:09,680 --> 00:09:11,760
malicious activity using

255
00:09:11,760 --> 00:09:13,920
elastic stack let me interrupt you for a

256
00:09:13,920 --> 00:09:15,040
second but

257
00:09:15,040 --> 00:09:18,399
is this this macro issue can be some

258
00:09:18,399 --> 00:09:19,360
kind of

259
00:09:19,360 --> 00:09:22,480
atp group apt group attack scenario is

260
00:09:22,480 --> 00:09:24,560
it a real award one or rather the lab

261
00:09:24,560 --> 00:09:25,360
one

262
00:09:25,360 --> 00:09:27,440
i think it's a loved one because we

263
00:09:27,440 --> 00:09:28,399
don't have time to

264
00:09:28,399 --> 00:09:31,279
dissect a serious seriously appreciated

265
00:09:31,279 --> 00:09:33,200
stuff so we've prepared some

266
00:09:33,200 --> 00:09:36,320
some rather simple document just to to

267
00:09:36,320 --> 00:09:37,040
show

268
00:09:37,040 --> 00:09:39,680
some malicious techniques used in that

269
00:09:39,680 --> 00:09:40,080
and

270
00:09:40,080 --> 00:09:43,120
uh this would be easy to

271
00:09:43,120 --> 00:09:47,279
to detect in in few minutes to actually

272
00:09:47,279 --> 00:09:50,560
extract those relevant ttps from this

273
00:09:50,560 --> 00:09:54,800
piece of code all right let's go

274
00:09:54,880 --> 00:09:58,560
okay so we have a some kind of malicious

275
00:09:58,560 --> 00:10:00,080
macro

276
00:10:00,080 --> 00:10:04,000
let's see how it does exactly here

277
00:10:04,000 --> 00:10:07,360
let me do the mean a little bit so first

278
00:10:07,360 --> 00:10:08,959
we have some variables

279
00:10:08,959 --> 00:10:12,320
then some some hex data as you can see

280
00:10:12,320 --> 00:10:15,360
and then this is uh decoded with xor

281
00:10:15,360 --> 00:10:16,000
encoding

282
00:10:16,000 --> 00:10:19,440
and and relaxed

283
00:10:19,440 --> 00:10:22,800
encoding and the password is seen here

284
00:10:22,800 --> 00:10:25,279
clearly so the let's say this document

285
00:10:25,279 --> 00:10:27,279
is a little bit de-obfuscated by us

286
00:10:27,279 --> 00:10:30,000
initially so it's easier to read and

287
00:10:30,000 --> 00:10:30,720
let's see

288
00:10:30,720 --> 00:10:32,640
what it does here so first we have some

289
00:10:32,640 --> 00:10:33,839
url

290
00:10:33,839 --> 00:10:37,600
then xml http object is created

291
00:10:37,600 --> 00:10:41,360
to issue an http request

292
00:10:41,360 --> 00:10:44,399
probably to download some stuff and then

293
00:10:44,399 --> 00:10:48,399
this stuff is safe to a disk

294
00:10:48,399 --> 00:10:52,560
so maybe let's let's the decrypt those

295
00:10:52,560 --> 00:10:56,640
suspicious strings

296
00:10:58,560 --> 00:11:02,079
so the first one is a url to

297
00:11:02,079 --> 00:11:05,600
invoke kerberos tool so this

298
00:11:05,600 --> 00:11:08,640
tool is downloaded and then

299
00:11:08,640 --> 00:11:11,200
saved using the the second variable

300
00:11:11,200 --> 00:11:12,000
which is a

301
00:11:12,000 --> 00:11:15,200
path to disk and this file is is then

302
00:11:15,200 --> 00:11:17,839
safe on disk

303
00:11:17,839 --> 00:11:19,920
so that's the first part of this macro

304
00:11:19,920 --> 00:11:21,120
so we

305
00:11:21,120 --> 00:11:24,880
can here identify some ttp so first is

306
00:11:24,880 --> 00:11:28,959
data obfuscation second one is

307
00:11:28,959 --> 00:11:31,760
data download malicious tools

308
00:11:31,760 --> 00:11:33,279
downloading

309
00:11:33,279 --> 00:11:36,399
and this third one is dropping a file to

310
00:11:36,399 --> 00:11:37,200
disk

311
00:11:37,200 --> 00:11:41,519
and then see what's going on uh next

312
00:11:41,519 --> 00:11:43,519
before we go before we go further maybe

313
00:11:43,519 --> 00:11:45,519
patrick you can uh just uh briefly

314
00:11:45,519 --> 00:11:47,440
describe why it is important

315
00:11:47,440 --> 00:11:50,880
to just maybe uh divide that code

316
00:11:50,880 --> 00:11:53,200
into a smaller pieces those ttps why it

317
00:11:53,200 --> 00:11:54,000
is important

318
00:11:54,000 --> 00:11:56,560
what it gives us not ability yeah sure

319
00:11:56,560 --> 00:11:57,839
we will go to that but

320
00:11:57,839 --> 00:12:01,120
uh it's just about

321
00:12:01,120 --> 00:12:04,720
splitting the malicious

322
00:12:04,720 --> 00:12:07,760
actions into atomic so

323
00:12:07,760 --> 00:12:11,200
an individual actions to to simulate

324
00:12:11,200 --> 00:12:11,839
each one

325
00:12:11,839 --> 00:12:15,440
and to train the prevention detections

326
00:12:15,440 --> 00:12:19,120
uh on for for those specific techniques

327
00:12:19,120 --> 00:12:19,680
so

328
00:12:19,680 --> 00:12:23,440
we can split this uh macro which is a

329
00:12:23,440 --> 00:12:24,880
set of ttps into

330
00:12:24,880 --> 00:12:26,639
some basic ttps which is for example

331
00:12:26,639 --> 00:12:28,000
file download

332
00:12:28,000 --> 00:12:29,680
some some malicious encoding some

333
00:12:29,680 --> 00:12:31,120
process creation etc

334
00:12:31,120 --> 00:12:34,399
and then test each one of them to see

335
00:12:34,399 --> 00:12:36,880
if we can detect this malicious activity

336
00:12:36,880 --> 00:12:38,160
and later for example if we

337
00:12:38,160 --> 00:12:41,920
can correlate some some actions

338
00:12:41,920 --> 00:12:44,880
to to find the actual attack but now we

339
00:12:44,880 --> 00:12:45,839
are focusing on

340
00:12:45,839 --> 00:12:49,120
on very atomic stuff here

341
00:12:49,120 --> 00:12:51,360
it also gives us a great ability to tune

342
00:12:51,360 --> 00:12:53,200
our detection

343
00:12:53,200 --> 00:12:56,000
resources because if we will treat uh

344
00:12:56,000 --> 00:12:56,399
this

345
00:12:56,399 --> 00:12:58,160
let's say macro so one signal big

346
00:12:58,160 --> 00:13:00,240
objects we probably won't be able to

347
00:13:00,240 --> 00:13:01,040
catch everything

348
00:13:01,040 --> 00:13:04,399
but if we take a look it as a series of

349
00:13:04,399 --> 00:13:06,160
actions like a small directions first

350
00:13:06,160 --> 00:13:06,720
let's

351
00:13:06,720 --> 00:13:09,279
maybe download the macro second drop the

352
00:13:09,279 --> 00:13:10,240
file on disk

353
00:13:10,240 --> 00:13:12,560
then run something then run something

354
00:13:12,560 --> 00:13:14,399
again then write something different

355
00:13:14,399 --> 00:13:17,279
then maybe launch some program within a

356
00:13:17,279 --> 00:13:19,279
specific

357
00:13:19,279 --> 00:13:21,360
apparent process we'll go about a little

358
00:13:21,360 --> 00:13:22,639
later it

359
00:13:22,639 --> 00:13:25,040
it gives us a great ability to triple

360
00:13:25,040 --> 00:13:26,000
the tune our the

361
00:13:26,000 --> 00:13:29,040
our protection tools uh you will see

362
00:13:29,040 --> 00:13:31,680
about it later today yeah that's right

363
00:13:31,680 --> 00:13:33,519
so going further with the macro

364
00:13:33,519 --> 00:13:36,880
here we have some actually com

365
00:13:36,880 --> 00:13:39,120
object instantiation and it's called by

366
00:13:39,120 --> 00:13:41,199
by its cls id

367
00:13:41,199 --> 00:13:43,199
and this is called sharp browser window

368
00:13:43,199 --> 00:13:45,199
here and this object

369
00:13:45,199 --> 00:13:49,199
allows us to execute some shell commands

370
00:13:49,199 --> 00:13:51,279
so

371
00:13:51,279 --> 00:13:53,920
the thing with com objects is that they

372
00:13:53,920 --> 00:13:55,760
can have some

373
00:13:55,760 --> 00:13:59,040
specific methods shared or

374
00:13:59,040 --> 00:14:02,880
specific parts let's say

375
00:14:02,880 --> 00:14:04,880
fields of those objects can can have

376
00:14:04,880 --> 00:14:06,160
other fields and

377
00:14:06,160 --> 00:14:08,560
they can have specific methods so with

378
00:14:08,560 --> 00:14:09,920
this show browser window

379
00:14:09,920 --> 00:14:13,920
we have a sub object called document

380
00:14:13,920 --> 00:14:16,800
then another object nested called

381
00:14:16,800 --> 00:14:18,560
application and then this application

382
00:14:18,560 --> 00:14:19,199
object

383
00:14:19,199 --> 00:14:22,720
have a shell execute method which

384
00:14:22,720 --> 00:14:25,839
requires some parameters here is

385
00:14:25,839 --> 00:14:29,600
a process name here are parameters and

386
00:14:29,600 --> 00:14:33,040
we can see some base64 encoded stuff

387
00:14:33,040 --> 00:14:37,040
going to be executed by powershell and

388
00:14:37,040 --> 00:14:40,000
working directory and information to to

389
00:14:40,000 --> 00:14:41,600
hide the window or not so it's not

390
00:14:41,600 --> 00:14:42,240
hidden

391
00:14:42,240 --> 00:14:44,959
here but another car would obviously

392
00:14:44,959 --> 00:14:46,399
hide this this window so

393
00:14:46,399 --> 00:14:48,560
it won't be visible powershell and call

394
00:14:48,560 --> 00:14:50,560
it command probably looks suspicious for

395
00:14:50,560 --> 00:14:51,040
us

396
00:14:51,040 --> 00:14:53,760
we can make a note on that and go go

397
00:14:53,760 --> 00:14:55,440
back to this a little later

398
00:14:55,440 --> 00:14:58,320
yeah sure so actually we can try to to

399
00:14:58,320 --> 00:15:00,880
see what what's in this command here

400
00:15:00,880 --> 00:15:03,920
leveraging cyber shaft again so after uh

401
00:15:03,920 --> 00:15:07,519
decoding this and coming with with

402
00:15:07,519 --> 00:15:09,040
specific encoding for windows which is

403
00:15:09,040 --> 00:15:10,000
cpr16

404
00:15:10,000 --> 00:15:12,240
we can see some some powershell script

405
00:15:12,240 --> 00:15:14,000
here so what it does

406
00:15:14,000 --> 00:15:17,120
is to bypass anti-malware scripting

407
00:15:17,120 --> 00:15:17,920
interface

408
00:15:17,920 --> 00:15:20,480
with some some clever method which is

409
00:15:20,480 --> 00:15:21,519
called the

410
00:15:21,519 --> 00:15:24,560
mce and it failed and then it

411
00:15:24,560 --> 00:15:27,440
executes our script which was downloaded

412
00:15:27,440 --> 00:15:27,920
to

413
00:15:27,920 --> 00:15:32,160
to disk and then it invokes this

414
00:15:32,160 --> 00:15:34,720
kerberos function why you just want to

415
00:15:34,720 --> 00:15:38,079
use a one liner for that

416
00:15:38,079 --> 00:15:41,680
well this would be blocked by mc itself

417
00:15:41,680 --> 00:15:42,079
so

418
00:15:42,079 --> 00:15:45,600
uh this mca by bypass

419
00:15:45,600 --> 00:15:47,519
that that's that's the antivirus version

420
00:15:47,519 --> 00:15:49,040
pro tip if you want to make you know

421
00:15:49,040 --> 00:15:51,759
you can just make a note uh right now

422
00:15:51,759 --> 00:15:52,480
yes

423
00:15:52,480 --> 00:15:54,240
so so that's that's uh some clever

424
00:15:54,240 --> 00:15:55,680
technique and it's also prescribed

425
00:15:55,680 --> 00:15:57,600
because if we try to

426
00:15:57,600 --> 00:16:00,720
use this msi bypass in one line

427
00:16:00,720 --> 00:16:03,759
it's it gets blocked by by the m side so

428
00:16:03,759 --> 00:16:06,320
we would need to split those in in a few

429
00:16:06,320 --> 00:16:07,360
lines so

430
00:16:07,360 --> 00:16:09,519
each line would be executed after

431
00:16:09,519 --> 00:16:11,519
another and then this

432
00:16:11,519 --> 00:16:14,240
won't be blocked by the anti-malware

433
00:16:14,240 --> 00:16:15,360
scripting interface

434
00:16:15,360 --> 00:16:18,320
so then we could easily in execute the

435
00:16:18,320 --> 00:16:20,240
invoke kerberos script because without

436
00:16:20,240 --> 00:16:21,360
this

437
00:16:21,360 --> 00:16:25,920
and say bypass this would be blocked so

438
00:16:25,920 --> 00:16:28,160
that's some simple yet clever technique

439
00:16:28,160 --> 00:16:29,600
to bypass

440
00:16:29,600 --> 00:16:33,199
msi here and execute the cabros attack

441
00:16:33,199 --> 00:16:36,399
everybody loves bursting sure so

442
00:16:36,399 --> 00:16:39,600
uh this is it for the macro these are

443
00:16:39,600 --> 00:16:42,800
helper functions for zoro encryption

444
00:16:42,800 --> 00:16:43,839
decryption and

445
00:16:43,839 --> 00:16:47,199
and hex decoding which were used here

446
00:16:47,199 --> 00:16:50,320
so to to wrap up the macro downloads

447
00:16:50,320 --> 00:16:53,440
some file saves save this to disk and

448
00:16:53,440 --> 00:16:56,720
execute the the powershell command while

449
00:16:56,720 --> 00:16:59,040
bypassing antimatter scripting interface

450
00:16:59,040 --> 00:16:59,920
and of course

451
00:16:59,920 --> 00:17:03,360
the data is is decoded here so it's not

452
00:17:03,360 --> 00:17:05,199
visible at the first site well what's

453
00:17:05,199 --> 00:17:07,520
exactly going on here

454
00:17:07,520 --> 00:17:09,599
so so for those of you who understand

455
00:17:09,599 --> 00:17:11,359
this piece of code you can actually

456
00:17:11,359 --> 00:17:13,199
make a little challenge for yourself you

457
00:17:13,199 --> 00:17:15,039
can try to count how many

458
00:17:15,039 --> 00:17:17,599
particular ttps we will be able to

459
00:17:17,599 --> 00:17:19,199
actually simulate in a

460
00:17:19,199 --> 00:17:21,599
uh in a few seconds so a few a few

461
00:17:21,599 --> 00:17:23,039
seconds for you to come

462
00:17:23,039 --> 00:17:26,240
to count them and we will go

463
00:17:26,240 --> 00:17:29,440
with this in a second

464
00:17:29,440 --> 00:17:31,760
all right and we are back uh the little

465
00:17:31,760 --> 00:17:32,559
challenge is over

466
00:17:32,559 --> 00:17:34,720
and those are the ttps which you

467
00:17:34,720 --> 00:17:35,600
probably

468
00:17:35,600 --> 00:17:38,320
have been able to identify or if not yet

469
00:17:38,320 --> 00:17:40,240
you will do in a few seconds

470
00:17:40,240 --> 00:17:43,760
uh so uh patrick maybe yeah so to

471
00:17:43,760 --> 00:17:46,240
wrap up what we have identified while

472
00:17:46,240 --> 00:17:47,360
analyzing this

473
00:17:47,360 --> 00:17:52,559
malicious document first of all

474
00:17:52,559 --> 00:17:54,640
some assumption here that this was

475
00:17:54,640 --> 00:17:55,919
delivered

476
00:17:55,919 --> 00:17:59,120
by phishing so it could

477
00:17:59,120 --> 00:18:01,600
have been delivered as a phishing

478
00:18:01,600 --> 00:18:03,600
attachment to a user

479
00:18:03,600 --> 00:18:05,760
no one thought about that right because

480
00:18:05,760 --> 00:18:06,720
it somehow

481
00:18:06,720 --> 00:18:09,600
somehow it should need to be delivered

482
00:18:09,600 --> 00:18:10,400
right so

483
00:18:10,400 --> 00:18:13,039
this macro has to somehow land on the

484
00:18:13,039 --> 00:18:15,120
employees or user workstation so this is

485
00:18:15,120 --> 00:18:15,840
the actually

486
00:18:15,840 --> 00:18:18,240
the first ttp which we can see there

487
00:18:18,240 --> 00:18:20,080
yeah so the second one would be

488
00:18:20,080 --> 00:18:23,520
actual execution of the file by a user

489
00:18:23,520 --> 00:18:25,120
for example tricked by

490
00:18:25,120 --> 00:18:29,280
some fancy messaging in the email

491
00:18:29,280 --> 00:18:32,400
anyway user executed the the file and

492
00:18:32,400 --> 00:18:35,440
we als would try to simulate

493
00:18:35,440 --> 00:18:38,400
this part and going to some more

494
00:18:38,400 --> 00:18:39,600
specific etps

495
00:18:39,600 --> 00:18:42,000
first of all we noticed partial

496
00:18:42,000 --> 00:18:43,600
execution

497
00:18:43,600 --> 00:18:45,919
visual basic of course the vba marker

498
00:18:45,919 --> 00:18:47,520
itself

499
00:18:47,520 --> 00:18:49,840
another thing is obfuscated information

500
00:18:49,840 --> 00:18:50,960
in the files so

501
00:18:50,960 --> 00:18:53,360
those base64 strings and hex encoded

502
00:18:53,360 --> 00:18:54,960
data

503
00:18:54,960 --> 00:18:57,200
uh inter-process communication and this

504
00:18:57,200 --> 00:18:58,400
is about the

505
00:18:58,400 --> 00:19:01,679
usage of com objects impairing

506
00:19:01,679 --> 00:19:02,720
differences

507
00:19:02,720 --> 00:19:05,919
so this msi bypass we've seen this

508
00:19:05,919 --> 00:19:07,039
tricky one

509
00:19:07,039 --> 00:19:10,640
and the last one is actually what

510
00:19:10,640 --> 00:19:13,360
the the powershell script does so this

511
00:19:13,360 --> 00:19:14,000
is a

512
00:19:14,000 --> 00:19:16,080
kerberostic attack so this falls into a

513
00:19:16,080 --> 00:19:17,840
category of

514
00:19:17,840 --> 00:19:20,160
steering conforging curves tickets what

515
00:19:20,160 --> 00:19:20,960
are those t

516
00:19:20,960 --> 00:19:23,360
numbers on the left side because we use

517
00:19:23,360 --> 00:19:25,000
those t

518
00:19:25,000 --> 00:19:27,520
1566 what are these yeah so

519
00:19:27,520 --> 00:19:29,679
that this is just a mapping to the

520
00:19:29,679 --> 00:19:30,799
mitral attack

521
00:19:30,799 --> 00:19:33,280
matrix which is a common let's say

522
00:19:33,280 --> 00:19:34,640
common language for

523
00:19:34,640 --> 00:19:38,000
for what we do for purple teams but also

524
00:19:38,000 --> 00:19:40,160
red teams and blue team so this is a

525
00:19:40,160 --> 00:19:43,120
some category categorization of

526
00:19:43,120 --> 00:19:45,760
typical uh attacker adversary of

527
00:19:45,760 --> 00:19:47,200
techniques and tactics

528
00:19:47,200 --> 00:19:50,559
yeah this my this matrix just divides

529
00:19:50,559 --> 00:19:53,520
all of the different layers of attack

530
00:19:53,520 --> 00:19:55,520
into a smaller pieces so if you

531
00:19:55,520 --> 00:19:58,240
previously didn't have a chance to go

532
00:19:58,240 --> 00:19:58,799
through that

533
00:19:58,799 --> 00:20:00,799
we highly recommend that because it's

534
00:20:00,799 --> 00:20:02,720
it's some kind of industry standard for

535
00:20:02,720 --> 00:20:03,280
that

536
00:20:03,280 --> 00:20:05,600
all right so we got this tdps let's

537
00:20:05,600 --> 00:20:06,720
maybe do something a little more

538
00:20:06,720 --> 00:20:08,240
technical now

539
00:20:08,240 --> 00:20:10,640
and try to plan our simulation which

540
00:20:10,640 --> 00:20:13,120
we'll do in a few seconds

541
00:20:13,120 --> 00:20:16,159
yes sure so going through all those

542
00:20:16,159 --> 00:20:17,520
identified ttps

543
00:20:17,520 --> 00:20:20,960
let's talk about how we could actually

544
00:20:20,960 --> 00:20:24,000
simulate them to to see if

545
00:20:24,000 --> 00:20:27,120
our environment could be protected from

546
00:20:27,120 --> 00:20:28,800
from those specific

547
00:20:28,800 --> 00:20:30,480
[Music]

548
00:20:30,480 --> 00:20:33,520
atomic attacks or if we can

549
00:20:33,520 --> 00:20:36,400
detect them so the first thing is the

550
00:20:36,400 --> 00:20:38,320
dimensions per fishing attachment

551
00:20:38,320 --> 00:20:42,159
so we could uh simulate this for example

552
00:20:42,159 --> 00:20:44,320
by bombing a mile gateway with some

553
00:20:44,320 --> 00:20:45,520
motions documents

554
00:20:45,520 --> 00:20:49,200
generated by a tool

555
00:20:49,200 --> 00:20:51,360
and there are a lot of open source tools

556
00:20:51,360 --> 00:20:53,360
for for that available on github so for

557
00:20:53,360 --> 00:20:54,159
example every

558
00:20:54,159 --> 00:20:57,200
clippy macro shop lucky strike and tons

559
00:20:57,200 --> 00:20:59,280
of others

560
00:20:59,280 --> 00:21:03,200
second gtp was actual

561
00:21:03,200 --> 00:21:06,000
multi-file execution by the user so

562
00:21:06,000 --> 00:21:08,240
let's simulate this by just

563
00:21:08,240 --> 00:21:09,840
dropping the malicious document on the

564
00:21:09,840 --> 00:21:12,158
disk

565
00:21:13,360 --> 00:21:16,640
third one is powershell so we have we

566
00:21:16,640 --> 00:21:18,400
have actual two simulations here

567
00:21:18,400 --> 00:21:20,880
first is powershell with it called coded

568
00:21:20,880 --> 00:21:21,919
commands which is

569
00:21:21,919 --> 00:21:24,480
very typical for for adversaries for

570
00:21:24,480 --> 00:21:27,280
some malicious actions

571
00:21:27,280 --> 00:21:30,480
originating from macro or

572
00:21:30,480 --> 00:21:33,919
other scripts and another thing is

573
00:21:33,919 --> 00:21:35,600
powershell downloading a file from the

574
00:21:35,600 --> 00:21:37,360
web so we will simulate

575
00:21:37,360 --> 00:21:40,880
here how is it does it look like

576
00:21:40,880 --> 00:21:42,880
if powershell is downloading some data

577
00:21:42,880 --> 00:21:44,640
from the internet and how can we

578
00:21:44,640 --> 00:21:48,240
detect this for visual basic

579
00:21:48,240 --> 00:21:51,120
we'll try to simulate a world

580
00:21:51,120 --> 00:21:52,960
application spawning powershell process

581
00:21:52,960 --> 00:21:54,640
because

582
00:21:54,640 --> 00:21:58,720
that's how some macros work and

583
00:21:58,720 --> 00:22:02,000
that's some cool indicator when the

584
00:22:02,000 --> 00:22:03,600
powershell processor cmd process is

585
00:22:03,600 --> 00:22:04,400
created by

586
00:22:04,400 --> 00:22:07,280
word or excel that's not very typical so

587
00:22:07,280 --> 00:22:08,799
so probably associated with some kind of

588
00:22:08,799 --> 00:22:09,440
attack

589
00:22:09,440 --> 00:22:13,840
so let's see if we can detect this

590
00:22:14,000 --> 00:22:17,200
obfuscated data this would be simulated

591
00:22:17,200 --> 00:22:17,600
by

592
00:22:17,600 --> 00:22:19,600
by this powershell encoded command so

593
00:22:19,600 --> 00:22:20,799
this will cover

594
00:22:20,799 --> 00:22:25,039
the obfuscation com objects

595
00:22:25,039 --> 00:22:28,480
we'll simulate creating an instance of

596
00:22:28,480 --> 00:22:28,799
com

597
00:22:28,799 --> 00:22:31,360
object and using this to execute some

598
00:22:31,360 --> 00:22:33,520
commands in powershell

599
00:22:33,520 --> 00:22:36,880
impairing defenses so we'll simulate

600
00:22:36,880 --> 00:22:40,000
the msi bypass just as it was done

601
00:22:40,000 --> 00:22:43,280
in in this malicious macro and then a

602
00:22:43,280 --> 00:22:46,720
kerberos thing so instead of using the

603
00:22:46,720 --> 00:22:48,400
invoke kerberos script

604
00:22:48,400 --> 00:22:51,200
we could dive a little deeper and see

605
00:22:51,200 --> 00:22:52,880
how how this works so

606
00:22:52,880 --> 00:22:55,440
actually her roasting attack is just

607
00:22:55,440 --> 00:22:56,400
requesting

608
00:22:56,400 --> 00:23:00,080
tgs tickets and we can use the

609
00:23:00,080 --> 00:23:03,280
net class called kerberos requester

610
00:23:03,280 --> 00:23:04,720
security token for that and

611
00:23:04,720 --> 00:23:07,760
it's this is just how exactly the invoke

612
00:23:07,760 --> 00:23:09,440
kerberos tool works

613
00:23:09,440 --> 00:23:11,600
so just a little remark from uh from me

614
00:23:11,600 --> 00:23:14,000
today we will focus only on the

615
00:23:14,000 --> 00:23:17,440
uh on the seven seven techniques

616
00:23:17,440 --> 00:23:19,919
we will not cover today the fishing one

617
00:23:19,919 --> 00:23:22,240
uh because we would like

618
00:23:22,240 --> 00:23:23,919
only show you that at the most more

619
00:23:23,919 --> 00:23:25,280
technical uh the

620
00:23:25,280 --> 00:23:27,600
part but actually don't forget about the

621
00:23:27,600 --> 00:23:29,280
the the this fishing and this

622
00:23:29,280 --> 00:23:31,600
like gateway monitoring or any other

623
00:23:31,600 --> 00:23:33,120
internet activity monitoring this is

624
00:23:33,120 --> 00:23:34,000
also useful

625
00:23:34,000 --> 00:23:36,720
uh we will not do this uh today and

626
00:23:36,720 --> 00:23:37,919
today we will also

627
00:23:37,919 --> 00:23:41,200
uh want to cover uh the

628
00:23:41,200 --> 00:23:42,880
powershell downloading the file from the

629
00:23:42,880 --> 00:23:44,400
web because it could be

630
00:23:44,400 --> 00:23:47,039
the done within a different layers which

631
00:23:47,039 --> 00:23:47,679
we will

632
00:23:47,679 --> 00:23:51,039
describe uh uh in a few minutes but

633
00:23:51,039 --> 00:23:54,240
uh this is also uh those

634
00:23:54,240 --> 00:23:57,279
network sources there like a gateway and

635
00:23:57,279 --> 00:24:00,480
uh and a mail system

636
00:24:00,480 --> 00:24:03,679
they can also be a source form for your

637
00:24:03,679 --> 00:24:04,080
uh

638
00:24:04,080 --> 00:24:07,120
blue team and for your detection tools

639
00:24:07,120 --> 00:24:10,080
so don't forget about about that all

640
00:24:10,080 --> 00:24:10,799
right so

641
00:24:10,799 --> 00:24:14,080
we got a plan let's now uh develop it

642
00:24:14,080 --> 00:24:18,159
and use our tools to do that

643
00:24:18,159 --> 00:24:20,640
sure so this is my favorite part of the

644
00:24:20,640 --> 00:24:21,200
whole

645
00:24:21,200 --> 00:24:25,039
book material concept so and and

646
00:24:25,039 --> 00:24:28,320
the most interesting one i think so

647
00:24:28,320 --> 00:24:31,760
for for those simulations uh

648
00:24:31,760 --> 00:24:34,159
for dropping the emotions document on

649
00:24:34,159 --> 00:24:35,919
the disk we can just simulate this by

650
00:24:35,919 --> 00:24:37,360
dropping some some motions file into

651
00:24:37,360 --> 00:24:38,480
this and see if it

652
00:24:38,480 --> 00:24:40,320
gets locked and how can we do with that

653
00:24:40,320 --> 00:24:41,520
later

654
00:24:41,520 --> 00:24:45,840
encoded commands it's simple also so

655
00:24:45,840 --> 00:24:47,760
just one powershell create partial

656
00:24:47,760 --> 00:24:49,520
process with parameters of

657
00:24:49,520 --> 00:24:52,880
basics different called command

658
00:24:52,880 --> 00:24:56,400
and simulating a web activity

659
00:24:56,400 --> 00:24:59,919
we can leverage invoke web request

660
00:24:59,919 --> 00:25:02,720
command left for that

661
00:25:02,720 --> 00:25:06,000
for uh testing uh simulating

662
00:25:06,000 --> 00:25:08,159
word application spawning powershell we

663
00:25:08,159 --> 00:25:09,279
can use

664
00:25:09,279 --> 00:25:13,600
some some simple vba code

665
00:25:13,600 --> 00:25:17,120
it just executes powershell

666
00:25:17,120 --> 00:25:18,880
for com objects we can create an

667
00:25:18,880 --> 00:25:20,400
instance of

668
00:25:20,400 --> 00:25:22,080
the same object that was used in this

669
00:25:22,080 --> 00:25:24,080
malicious macro from powershell

670
00:25:24,080 --> 00:25:26,720
and then use this to execute some some

671
00:25:26,720 --> 00:25:27,600
process

672
00:25:27,600 --> 00:25:31,279
see how it looks like in logs and

673
00:25:31,279 --> 00:25:34,559
msi bypass is just the same

674
00:25:34,559 --> 00:25:37,279
one liner but actually in one line which

675
00:25:37,279 --> 00:25:38,080
was used in

676
00:25:38,080 --> 00:25:41,200
in demolition document so we will use

677
00:25:41,200 --> 00:25:42,799
this for simulation

678
00:25:42,799 --> 00:25:46,159
and for kerberos think we will uh

679
00:25:46,159 --> 00:25:50,159
issue a single tgs request to

680
00:25:50,159 --> 00:25:54,000
the domain controller to to see how

681
00:25:54,000 --> 00:25:56,400
this is logged so please keep in mind

682
00:25:56,400 --> 00:25:57,760
that those speed

683
00:25:57,760 --> 00:26:00,000
those code pieces they come directly

684
00:26:00,000 --> 00:26:02,080
from the macro which we've shown you

685
00:26:02,080 --> 00:26:04,240
uh before and they have been uh

686
00:26:04,240 --> 00:26:05,279
separated so

687
00:26:05,279 --> 00:26:07,840
we can observe the each level we will

688
00:26:07,840 --> 00:26:08,559
not just

689
00:26:08,559 --> 00:26:11,360
run macro and see does it work do we see

690
00:26:11,360 --> 00:26:12,080
anything

691
00:26:12,080 --> 00:26:14,480
we just uh splitted that within a

692
00:26:14,480 --> 00:26:15,360
smaller pieces

693
00:26:15,360 --> 00:26:18,400
so we can uh step by step see each step

694
00:26:18,400 --> 00:26:18,960
each

695
00:26:18,960 --> 00:26:21,919
each step of execution like uh first

696
00:26:21,919 --> 00:26:24,080
dropping file then running

697
00:26:24,080 --> 00:26:27,919
then object utilization

698
00:26:27,919 --> 00:26:30,400
and then some script launching so we

699
00:26:30,400 --> 00:26:31,360
each of these

700
00:26:31,360 --> 00:26:33,600
particular steps can be observed or

701
00:26:33,600 --> 00:26:34,880
maybe cannot

702
00:26:34,880 --> 00:26:38,000
we will see that but probably can can

703
00:26:38,000 --> 00:26:41,760
be observed and uh that so

704
00:26:41,760 --> 00:26:44,559
that because because we divide it into

705
00:26:44,559 --> 00:26:45,840
the smaller pieces

706
00:26:45,840 --> 00:26:48,880
we can see actually more than

707
00:26:48,880 --> 00:26:52,080
uh just run this macro and see oh

708
00:26:52,080 --> 00:26:53,919
do you have any connection or run it in

709
00:26:53,919 --> 00:26:56,159
the sandbox and oh i don't have any ap

710
00:26:56,159 --> 00:26:59,520
then the file is secured so uh

711
00:26:59,520 --> 00:27:03,039
we got these uh code pieces directly

712
00:27:03,039 --> 00:27:06,240
from the previously shown macro and now

713
00:27:06,240 --> 00:27:08,960
the laptime the favorite one sure so

714
00:27:08,960 --> 00:27:10,559
actually not not everything is

715
00:27:10,559 --> 00:27:12,159
just copied and pasted from from the

716
00:27:12,159 --> 00:27:14,320
macro some are are different but

717
00:27:14,320 --> 00:27:17,440
try to simulate similar behavior and one

718
00:27:17,440 --> 00:27:19,520
particular example with simulation four

719
00:27:19,520 --> 00:27:23,200
actually when we used this com object to

720
00:27:23,200 --> 00:27:25,919
spawn powershot process the parent would

721
00:27:25,919 --> 00:27:26,320
be

722
00:27:26,320 --> 00:27:30,880
explorer not doing work but using this

723
00:27:30,880 --> 00:27:34,320
basic shell command of vba to spawn

724
00:27:34,320 --> 00:27:36,960
another process the parent for for

725
00:27:36,960 --> 00:27:37,840
powershell

726
00:27:37,840 --> 00:27:40,559
respond to via the method in simulation

727
00:27:40,559 --> 00:27:41,039
4

728
00:27:41,039 --> 00:27:46,840
would be winward.exe it was a spoiler

729
00:27:46,840 --> 00:27:49,039
alert

730
00:27:49,039 --> 00:27:52,080
all right let's go to the lab and

731
00:27:52,080 --> 00:27:52,799
welcome back

732
00:27:52,799 --> 00:27:55,919
to our very simple uh purple teaming

733
00:27:55,919 --> 00:27:59,039
virtual lab today we will use

734
00:27:59,039 --> 00:28:02,720
uh kibana which will support us

735
00:28:02,720 --> 00:28:06,240
uh within a a lock investigation

736
00:28:06,240 --> 00:28:08,960
and this very very simple app consists

737
00:28:08,960 --> 00:28:10,480
of one

738
00:28:10,480 --> 00:28:12,559
workstation which is actually a dummy

739
00:28:12,559 --> 00:28:14,159
controller but doesn't really matter

740
00:28:14,159 --> 00:28:16,159
we are interesting about the results not

741
00:28:16,159 --> 00:28:17,279
the particular

742
00:28:17,279 --> 00:28:19,919
uh particular machines so uh as you

743
00:28:19,919 --> 00:28:20,399
remember

744
00:28:20,399 --> 00:28:23,360
we identified 70 tps and the first one

745
00:28:23,360 --> 00:28:26,480
is actually dropping a file on a disk

746
00:28:26,480 --> 00:28:29,679
and we will do that

747
00:28:29,840 --> 00:28:31,520
dropping this file isn't the job for

748
00:28:31,520 --> 00:28:34,000
antivirus well that's why we actually

749
00:28:34,000 --> 00:28:35,679
are interested

750
00:28:35,679 --> 00:28:38,480
in logging that yeah sure so let's

751
00:28:38,480 --> 00:28:39,520
imagine

752
00:28:39,520 --> 00:28:42,480
some malicious document is dropped on on

753
00:28:42,480 --> 00:28:43,360
a disk so

754
00:28:43,360 --> 00:28:46,240
this is as pavel mentioned the job for

755
00:28:46,240 --> 00:28:47,200
antivirus

756
00:28:47,200 --> 00:28:50,080
or something dr so this would be

757
00:28:50,080 --> 00:28:51,279
immediately blocked

758
00:28:51,279 --> 00:28:54,559
if not properly obfuscated to the bypass

759
00:28:54,559 --> 00:28:55,600
antiviruses

760
00:28:55,600 --> 00:28:58,960
but and also

761
00:28:58,960 --> 00:29:02,159
we cannot create an alerts

762
00:29:02,159 --> 00:29:04,480
based on file creation i think because

763
00:29:04,480 --> 00:29:05,440
there are

764
00:29:05,440 --> 00:29:08,880
lots of events like that but anyway

765
00:29:08,880 --> 00:29:12,480
if possible we could lock those

766
00:29:12,480 --> 00:29:15,520
file creations for for later

767
00:29:15,520 --> 00:29:18,320
uh reference for example while

768
00:29:18,320 --> 00:29:19,679
investigating some

769
00:29:19,679 --> 00:29:22,480
some incident during incident response

770
00:29:22,480 --> 00:29:24,000
process we could

771
00:29:24,000 --> 00:29:26,720
go back to this data and then see that

772
00:29:26,720 --> 00:29:27,039
at

773
00:29:27,039 --> 00:29:29,679
specific time a file was dropped in

774
00:29:29,679 --> 00:29:30,320
let's say

775
00:29:30,320 --> 00:29:32,480
downloads folder and then few minutes

776
00:29:32,480 --> 00:29:34,880
later it was executed and then one

777
00:29:34,880 --> 00:29:36,720
minute later this

778
00:29:36,720 --> 00:29:39,120
word process created powershell process

779
00:29:39,120 --> 00:29:40,960
and then this was followed by some

780
00:29:40,960 --> 00:29:42,640
motion activities so this

781
00:29:42,640 --> 00:29:47,039
event of file creation of this could

782
00:29:47,039 --> 00:29:50,000
may be helpful for such an investigation

783
00:29:50,000 --> 00:29:50,799
for us

784
00:29:50,799 --> 00:29:53,360
so actually the more you log the better

785
00:29:53,360 --> 00:29:54,640
it doesn't really matter

786
00:29:54,640 --> 00:29:56,480
doesn't really mean that the more you

787
00:29:56,480 --> 00:29:58,320
have in your tool the better

788
00:29:58,320 --> 00:30:01,120
uh it's all about properly tuning this

789
00:30:01,120 --> 00:30:02,960
tool to exfiltrate

790
00:30:02,960 --> 00:30:05,360
what actually is important for you from

791
00:30:05,360 --> 00:30:06,399
the other

792
00:30:06,399 --> 00:30:08,640
uh let's say background noise but

793
00:30:08,640 --> 00:30:10,399
logging that as patrick said

794
00:30:10,399 --> 00:30:12,320
could be uh useful for any kind of

795
00:30:12,320 --> 00:30:14,640
forensics to actually see what happened

796
00:30:14,640 --> 00:30:17,919
uh because we can uh go back

797
00:30:17,919 --> 00:30:20,640
and follow follow the the attacker's

798
00:30:20,640 --> 00:30:21,440
stuff

799
00:30:21,440 --> 00:30:25,520
and as simple as that we are able to

800
00:30:25,520 --> 00:30:28,799
use our event id parameter in inside of

801
00:30:28,799 --> 00:30:29,520
our

802
00:30:29,520 --> 00:30:32,720
of kibana tool and just using event id

803
00:30:32,720 --> 00:30:34,720
11 we got eight hits within last

804
00:30:34,720 --> 00:30:36,559
actually 10 minutes because this is a

805
00:30:36,559 --> 00:30:39,919
this is the time the lab is working and

806
00:30:39,919 --> 00:30:43,039
let's have a look uh inside one of

807
00:30:43,039 --> 00:30:46,640
these these logs and as we see this file

808
00:30:46,640 --> 00:30:47,600
sample

809
00:30:47,600 --> 00:30:51,200
doc file was just dumped

810
00:30:51,200 --> 00:30:53,840
in a secret location on my desktop but

811
00:30:53,840 --> 00:30:54,399
anyway

812
00:30:54,399 --> 00:30:56,960
it gives us ability to follow the

813
00:30:56,960 --> 00:30:58,559
execution path and maybe

814
00:30:58,559 --> 00:31:00,960
support our forza forensic activity it

815
00:31:00,960 --> 00:31:01,600
does it's

816
00:31:01,600 --> 00:31:04,880
this is not connected with scanning it

817
00:31:04,880 --> 00:31:06,480
inside of antivirus solutions because

818
00:31:06,480 --> 00:31:08,080
this is a different story

819
00:31:08,080 --> 00:31:11,200
but for analyzing

820
00:31:11,200 --> 00:31:14,240
this is also a great

821
00:31:14,240 --> 00:31:17,120
knowledge source and also worth noting

822
00:31:17,120 --> 00:31:18,640
that this is system

823
00:31:18,640 --> 00:31:21,279
event id 11 which is a file creation

824
00:31:21,279 --> 00:31:21,840
here

825
00:31:21,840 --> 00:31:23,840
yeah all right you can also you can also

826
00:31:23,840 --> 00:31:25,039
tune uh

827
00:31:25,039 --> 00:31:28,399
kibana to have alerted that but probably

828
00:31:28,399 --> 00:31:31,440
having alert on each particular file

829
00:31:31,440 --> 00:31:34,399
could be could be a tremendous uh to to

830
00:31:34,399 --> 00:31:35,200
go through

831
00:31:35,200 --> 00:31:37,919
but uh even without alerting we are able

832
00:31:37,919 --> 00:31:38,399
to

833
00:31:38,399 --> 00:31:41,840
uh to go back and see what happened

834
00:31:41,840 --> 00:31:45,279
inside of our machine all right so

835
00:31:45,279 --> 00:31:47,279
let's go to the second ttp which we

836
00:31:47,279 --> 00:31:48,480
previously identified

837
00:31:48,480 --> 00:31:51,440
and this second tp will be powershell

838
00:31:51,440 --> 00:31:52,559
with encoded

839
00:31:52,559 --> 00:31:55,760
command so we're gonna launch that

840
00:31:55,760 --> 00:31:58,480
on our machine and this is very basic

841
00:31:58,480 --> 00:31:59,600
who am i

842
00:31:59,600 --> 00:32:02,640
command or as you probably see

843
00:32:02,640 --> 00:32:05,919
and if we will now go to our

844
00:32:05,919 --> 00:32:08,640
kibana tool we can filter those kind of

845
00:32:08,640 --> 00:32:11,200
under those kind of requests

846
00:32:11,200 --> 00:32:14,320
for this we used first event id which is

847
00:32:14,320 --> 00:32:15,519
process creation

848
00:32:15,519 --> 00:32:18,320
and then we looked for the process name

849
00:32:18,320 --> 00:32:20,640
which was as remember powershell

850
00:32:20,640 --> 00:32:23,679
and we got a couple of hits and this one

851
00:32:23,679 --> 00:32:27,279
is pretty much pretty much it

852
00:32:27,279 --> 00:32:29,279
very catchy eye will probably notice

853
00:32:29,279 --> 00:32:31,679
that kibana has already have this rule

854
00:32:31,679 --> 00:32:32,159
name

855
00:32:32,159 --> 00:32:34,159
this is not something which kibana gives

856
00:32:34,159 --> 00:32:36,559
you by default it actually comes from a

857
00:32:36,559 --> 00:32:38,880
sysmon from a package called sysmon

858
00:32:38,880 --> 00:32:40,799
modular and you can actually manipulate

859
00:32:40,799 --> 00:32:41,440
that

860
00:32:41,440 --> 00:32:44,159
this those are some uh predefined uh

861
00:32:44,159 --> 00:32:45,120
rule techniques

862
00:32:45,120 --> 00:32:48,159
so don't stick on that yet but actually

863
00:32:48,159 --> 00:32:51,679
kinda match our uh our

864
00:32:51,679 --> 00:32:54,720
situation now but if we will

865
00:32:54,720 --> 00:32:59,039
uh browse to the bottom

866
00:32:59,440 --> 00:33:01,440
there is something which we will be

867
00:33:01,440 --> 00:33:03,039
probably interested in

868
00:33:03,039 --> 00:33:04,880
and first we see that there is this

869
00:33:04,880 --> 00:33:07,279
process powershell

870
00:33:07,279 --> 00:33:10,320
powershell and above you see that this

871
00:33:10,320 --> 00:33:11,679
powershell has been launched with

872
00:33:11,679 --> 00:33:13,360
encoded command parameter

873
00:33:13,360 --> 00:33:16,080
and if for example you would like to uh

874
00:33:16,080 --> 00:33:17,600
tune your kibana tool

875
00:33:17,600 --> 00:33:20,159
to capture those kind of uh those kind

876
00:33:20,159 --> 00:33:21,200
of entps

877
00:33:21,200 --> 00:33:22,720
you probably may want to have it a

878
00:33:22,720 --> 00:33:24,320
little more detailed so in this

879
00:33:24,320 --> 00:33:26,399
particular case you can also

880
00:33:26,399 --> 00:33:28,559
add some regular expression to this

881
00:33:28,559 --> 00:33:30,480
parameter process command line

882
00:33:30,480 --> 00:33:34,640
just to cut to capture only

883
00:33:34,640 --> 00:33:39,919
those encoder command executions

884
00:33:39,919 --> 00:33:43,279
all right uh simple uh simple as this

885
00:33:43,279 --> 00:33:45,919
uh then the third one which is actually

886
00:33:45,919 --> 00:33:47,679
a powershell downloading a file from a

887
00:33:47,679 --> 00:33:48,240
web

888
00:33:48,240 --> 00:33:52,000
but just like we we said before

889
00:33:52,000 --> 00:33:54,080
we will not focus today on the

890
00:33:54,080 --> 00:33:56,240
networking part uh this of course could

891
00:33:56,240 --> 00:33:57,360
be also

892
00:33:57,360 --> 00:34:00,399
launched and could be visible from uh

893
00:34:00,399 --> 00:34:02,559
it's a google it's a google uh it could

894
00:34:02,559 --> 00:34:03,679
be visible uh

895
00:34:03,679 --> 00:34:06,320
as a network activity depending on which

896
00:34:06,320 --> 00:34:08,399
technique you actually use or maybe

897
00:34:08,399 --> 00:34:11,199
not you that the attacker will use there

898
00:34:11,199 --> 00:34:11,679
can be

899
00:34:11,679 --> 00:34:14,639
like a different uh artifacts for that

900
00:34:14,639 --> 00:34:16,480
but just like we said we won't

901
00:34:16,480 --> 00:34:20,000
focus on the networking uh

902
00:34:20,000 --> 00:34:23,918
the whole part right now

903
00:34:24,480 --> 00:34:27,119
all right and ttp number four uh we will

904
00:34:27,119 --> 00:34:27,839
uh spawn

905
00:34:27,839 --> 00:34:30,800
powershell uh from uh windward and this

906
00:34:30,800 --> 00:34:31,359
could be

907
00:34:31,359 --> 00:34:33,520
uh done of course from uh malicious

908
00:34:33,520 --> 00:34:35,040
macro this particular

909
00:34:35,040 --> 00:34:38,239
line yeah so to simulate the cdp we

910
00:34:38,239 --> 00:34:40,719
could just simply create a word document

911
00:34:40,719 --> 00:34:41,918
and

912
00:34:41,918 --> 00:34:44,719
put this one line in macro so when

913
00:34:44,719 --> 00:34:46,480
executed the word would spawn a

914
00:34:46,480 --> 00:34:48,159
powershot process

915
00:34:48,159 --> 00:34:51,599
and if launched we can

916
00:34:51,599 --> 00:34:53,918
see if we if you if we are able to

917
00:34:53,918 --> 00:34:54,879
capture that

918
00:34:54,879 --> 00:34:59,200
and to do that we can uh look for a

919
00:34:59,200 --> 00:35:02,320
parent process name which in our case if

920
00:35:02,320 --> 00:35:04,800
we will just scroll to the to the bottom

921
00:35:04,800 --> 00:35:09,920
uh we can spot g's

922
00:35:10,560 --> 00:35:12,720
lab is not always the dynamic as it

923
00:35:12,720 --> 00:35:14,000
looks all right

924
00:35:14,000 --> 00:35:15,760
so in this case we got this parent

925
00:35:15,760 --> 00:35:17,760
protest name which is word and

926
00:35:17,760 --> 00:35:20,480
if we look just above we see that the

927
00:35:20,480 --> 00:35:21,520
process actually

928
00:35:21,520 --> 00:35:24,240
is powershell so means that uh world is

929
00:35:24,240 --> 00:35:25,040
actually

930
00:35:25,040 --> 00:35:26,800
spawning a powershell which is

931
00:35:26,800 --> 00:35:28,560
definitely not the

932
00:35:28,560 --> 00:35:31,280
behavior you would expect in a regular

933
00:35:31,280 --> 00:35:32,880
working environment right

934
00:35:32,880 --> 00:35:36,560
no that's not like some office

935
00:35:36,560 --> 00:35:39,680
office work even even if you use macro

936
00:35:39,680 --> 00:35:40,240
you pro

937
00:35:40,240 --> 00:35:42,000
you probably won't be launching

938
00:35:42,000 --> 00:35:43,520
powershell from macro so this is a

939
00:35:43,520 --> 00:35:44,800
pretty good indicator that some

940
00:35:44,800 --> 00:35:46,560
malicious macro has been

941
00:35:46,560 --> 00:35:48,560
has been launched and you can correlate

942
00:35:48,560 --> 00:35:50,560
those two kind of activities and have

943
00:35:50,560 --> 00:35:54,240
alert and see those kind of

944
00:35:54,240 --> 00:35:57,599
those kind of things all right the

945
00:35:57,599 --> 00:36:00,800
simulation number five the com object

946
00:36:00,800 --> 00:36:03,680
okay so this is actually what was done

947
00:36:03,680 --> 00:36:04,880
in in the macro and

948
00:36:04,880 --> 00:36:08,160
as i mentioned uh spawning a

949
00:36:08,160 --> 00:36:10,880
process using this com object initial

950
00:36:10,880 --> 00:36:12,240
execute function

951
00:36:12,240 --> 00:36:16,960
it would give a parent of explorer.exe

952
00:36:16,960 --> 00:36:21,520
so the parent of the cmd would be

953
00:36:21,520 --> 00:36:23,680
explorer and parent for node that would

954
00:36:23,680 --> 00:36:24,880
be cmd hero

955
00:36:24,880 --> 00:36:26,560
and we see that the empty notebook has

956
00:36:26,560 --> 00:36:29,280
been launched let's look into our

957
00:36:29,280 --> 00:36:33,839
kibana if we are able to see that

958
00:36:35,599 --> 00:36:37,200
by the way if you want to have like a

959
00:36:37,200 --> 00:36:38,800
very quick

960
00:36:38,800 --> 00:36:41,920
query to just verify for the uh for the

961
00:36:41,920 --> 00:36:42,800
particular ttp

962
00:36:42,800 --> 00:36:44,079
it's always great to have those set

963
00:36:44,079 --> 00:36:46,720
queries for the future if you have

964
00:36:46,720 --> 00:36:48,800
uh some parameters which you'd like to

965
00:36:48,800 --> 00:36:50,800
filter it's very useful like i use in

966
00:36:50,800 --> 00:36:51,920
the moment we have a couple of

967
00:36:51,920 --> 00:36:53,119
pre-defined queries

968
00:36:53,119 --> 00:36:56,320
which really improves improves our

969
00:36:56,320 --> 00:36:59,680
our work and

970
00:36:59,680 --> 00:37:03,520
in this case we will will observe

971
00:37:03,520 --> 00:37:06,960
first first the event id and

972
00:37:06,960 --> 00:37:09,920
let's go to the bottom we see that we

973
00:37:09,920 --> 00:37:11,599
are actually able to

974
00:37:11,599 --> 00:37:16,240
uh to spot our uh our

975
00:37:16,240 --> 00:37:19,680
part of macro sure so it's it's easy to

976
00:37:19,680 --> 00:37:20,560
spot here because

977
00:37:20,560 --> 00:37:22,720
it was executed in a single line and we

978
00:37:22,720 --> 00:37:24,400
can in in this

979
00:37:24,400 --> 00:37:26,320
single event we can see everything that

980
00:37:26,320 --> 00:37:28,079
was executed but

981
00:37:28,079 --> 00:37:31,200
i don't think it's it's that easy to to

982
00:37:31,200 --> 00:37:34,720
spot a com object creation so for

983
00:37:34,720 --> 00:37:37,359
for this we would need to dive deep into

984
00:37:37,359 --> 00:37:38,800
locks for example for

985
00:37:38,800 --> 00:37:40,800
powershell locks here because i don't

986
00:37:40,800 --> 00:37:43,920
think that come object instantiation is

987
00:37:43,920 --> 00:37:47,440
locked just like that

988
00:37:47,680 --> 00:37:50,960
all right and your pro tip for our

989
00:37:50,960 --> 00:37:52,720
viewers how to disable

990
00:37:52,720 --> 00:37:57,200
uh ansai and let's try to disable that

991
00:37:57,200 --> 00:37:59,760
i just hope the defender is already off

992
00:37:59,760 --> 00:38:01,040
yeah it's off

993
00:38:01,040 --> 00:38:04,960
and as you can see it worked

994
00:38:04,960 --> 00:38:08,160
let's check whether we are

995
00:38:08,160 --> 00:38:11,440
able to see that in our kibana so one

996
00:38:11,440 --> 00:38:12,240
thing about

997
00:38:12,240 --> 00:38:15,280
a enabling call or disabling antivirus

998
00:38:15,280 --> 00:38:17,760
so here we disable defender to just

999
00:38:17,760 --> 00:38:19,599
purely focus on detections but

1000
00:38:19,599 --> 00:38:23,359
while assessing the environment

1001
00:38:23,839 --> 00:38:27,280
specifically preventions we would leave

1002
00:38:27,280 --> 00:38:30,400
any such solutions on

1003
00:38:30,400 --> 00:38:34,320
so for example we would see that this

1004
00:38:34,320 --> 00:38:36,079
particular technique was blocked by

1005
00:38:36,079 --> 00:38:38,720
defender by the msi itself

1006
00:38:38,720 --> 00:38:42,160
but now we are focusing purely on

1007
00:38:42,160 --> 00:38:43,200
detection so

1008
00:38:43,200 --> 00:38:46,640
we just

1009
00:38:46,640 --> 00:38:48,480
removed the the defender from the

1010
00:38:48,480 --> 00:38:50,240
equation and we can

1011
00:38:50,240 --> 00:38:54,240
focus uh on on what's being locked here

1012
00:38:54,240 --> 00:38:57,839
yeah and we see we got a hit we have our

1013
00:38:57,839 --> 00:39:00,880
uh our function right there and this is

1014
00:39:00,880 --> 00:39:04,000
a great example why why just like you

1015
00:39:04,000 --> 00:39:05,040
shown before

1016
00:39:05,040 --> 00:39:07,280
if we will you will split that command

1017
00:39:07,280 --> 00:39:08,560
within multiple lines

1018
00:39:08,560 --> 00:39:12,160
if for example some blue team will have

1019
00:39:12,160 --> 00:39:14,480
a regular expression for the particular

1020
00:39:14,480 --> 00:39:16,480
query if you will just uh

1021
00:39:16,480 --> 00:39:18,640
make a few lines and not not with one

1022
00:39:18,640 --> 00:39:20,640
liner regular expression will probably

1023
00:39:20,640 --> 00:39:21,760
not catch that

1024
00:39:21,760 --> 00:39:23,920
that is it so this is this is this is

1025
00:39:23,920 --> 00:39:25,200
actually the pretty pretty

1026
00:39:25,200 --> 00:39:28,480
uh tricky part but as you can see you're

1027
00:39:28,480 --> 00:39:30,000
able to do that

1028
00:39:30,000 --> 00:39:32,160
this is also a great example why you

1029
00:39:32,160 --> 00:39:34,320
actually perform at looting because

1030
00:39:34,320 --> 00:39:36,480
in most cases you probably will just

1031
00:39:36,480 --> 00:39:38,320
launch that

1032
00:39:38,320 --> 00:39:40,960
on that and check whether do you see

1033
00:39:40,960 --> 00:39:41,680
that

1034
00:39:41,680 --> 00:39:45,119
is it so often that you uh see what you

1035
00:39:45,119 --> 00:39:45,920
expect to see

1036
00:39:45,920 --> 00:39:48,400
in your monitoring tool patrick do you

1037
00:39:48,400 --> 00:39:49,599
think

1038
00:39:49,599 --> 00:39:52,160
probably not probably not so it's always

1039
00:39:52,160 --> 00:39:52,800
great to

1040
00:39:52,800 --> 00:39:54,800
uh to launch that see whether our

1041
00:39:54,800 --> 00:39:56,079
detection capabilities

1042
00:39:56,079 --> 00:39:59,200
are good enough to see everything if not

1043
00:39:59,200 --> 00:40:02,400
make some tuning redo the test make some

1044
00:40:02,400 --> 00:40:03,040
tuning

1045
00:40:03,040 --> 00:40:05,680
you do the test and so on and so on once

1046
00:40:05,680 --> 00:40:07,520
you are satisfied with the results so

1047
00:40:07,520 --> 00:40:08,720
you have a

1048
00:40:08,720 --> 00:40:10,480
very good example of this is a very good

1049
00:40:10,480 --> 00:40:11,920
example for uh

1050
00:40:11,920 --> 00:40:14,480
this this particular like the essence of

1051
00:40:14,480 --> 00:40:16,160
the purple team

1052
00:40:16,160 --> 00:40:18,560
all right and the last one the kerberos

1053
00:40:18,560 --> 00:40:19,760
thing

1054
00:40:19,760 --> 00:40:21,680
so as we mentioned before we could

1055
00:40:21,680 --> 00:40:24,400
simulate the kerberos think attack with

1056
00:40:24,400 --> 00:40:28,319
this invoke kerberos tool or script but

1057
00:40:28,319 --> 00:40:31,119
what we can also do is dive deeper into

1058
00:40:31,119 --> 00:40:33,280
the script itself and see that

1059
00:40:33,280 --> 00:40:38,000
it issues just a raw djs request using

1060
00:40:38,000 --> 00:40:39,920
this kerberos requester security token

1061
00:40:39,920 --> 00:40:42,000
class of dotnet and

1062
00:40:42,000 --> 00:40:44,480
use this to to simulate the activity and

1063
00:40:44,480 --> 00:40:46,000
that's uh

1064
00:40:46,000 --> 00:40:48,160
that's also the this essence of purple

1065
00:40:48,160 --> 00:40:49,119
teaming pavel

1066
00:40:49,119 --> 00:40:52,880
mentioned just a second ago we can start

1067
00:40:52,880 --> 00:40:55,680
our attack simulations from from the

1068
00:40:55,680 --> 00:40:56,319
simplest

1069
00:40:56,319 --> 00:40:58,640
most obvious techniques and for example

1070
00:40:58,640 --> 00:41:00,160
the invoke kerberos tool could be

1071
00:41:00,160 --> 00:41:00,880
detected

1072
00:41:00,880 --> 00:41:04,640
just by monitoring executed commands

1073
00:41:04,640 --> 00:41:08,400
but a more clever attacker would

1074
00:41:08,400 --> 00:41:11,440
perform kerberos in using this tool but

1075
00:41:11,440 --> 00:41:14,880
maybe renamed so it won't be just called

1076
00:41:14,880 --> 00:41:15,920
invoke kerberos

1077
00:41:15,920 --> 00:41:18,319
but some say invokes something

1078
00:41:18,319 --> 00:41:19,440
non-malicious

1079
00:41:19,440 --> 00:41:22,079
so the the simplest detections would

1080
00:41:22,079 --> 00:41:22,880
fail

1081
00:41:22,880 --> 00:41:25,440
and going further advancing our

1082
00:41:25,440 --> 00:41:27,280
offensive and also defensive

1083
00:41:27,280 --> 00:41:30,880
capabilities further we could

1084
00:41:30,880 --> 00:41:33,920
simulate the kerberos thing

1085
00:41:33,920 --> 00:41:36,800
by executing tgs requests in a longer

1086
00:41:36,800 --> 00:41:37,200
time

1087
00:41:37,200 --> 00:41:39,680
time periods because the invoke kerberos

1088
00:41:39,680 --> 00:41:42,319
still just

1089
00:41:42,480 --> 00:41:44,480
issues those requests one after another

1090
00:41:44,480 --> 00:41:46,079
and the

1091
00:41:46,079 --> 00:41:48,319
monitoring could cut this easily because

1092
00:41:48,319 --> 00:41:49,520
there would be like

1093
00:41:49,520 --> 00:41:52,560
10 or 20 or more requests

1094
00:41:52,560 --> 00:41:55,119
for tgs tickets in in short time period

1095
00:41:55,119 --> 00:41:55,760
so

1096
00:41:55,760 --> 00:41:58,960
this could be definitely

1097
00:41:58,960 --> 00:42:01,599
some alert for that but a clever

1098
00:42:01,599 --> 00:42:03,839
attacker would

1099
00:42:03,839 --> 00:42:06,960
simulate or execute kerberos think in in

1100
00:42:06,960 --> 00:42:09,200
longer time time periods for example

1101
00:42:09,200 --> 00:42:11,839
wanted us request then to wait a few

1102
00:42:11,839 --> 00:42:14,400
minutes and another request and

1103
00:42:14,400 --> 00:42:18,640
so on so this simple correlation

1104
00:42:18,640 --> 00:42:20,960
would would not see the the kerberos

1105
00:42:20,960 --> 00:42:21,839
attack performed

1106
00:42:21,839 --> 00:42:25,200
in this longer time frame so

1107
00:42:25,200 --> 00:42:27,680
advancing the offensive capability we

1108
00:42:27,680 --> 00:42:30,400
would need to advance our detections to

1109
00:42:30,400 --> 00:42:31,760
to actually

1110
00:42:31,760 --> 00:42:34,480
catch the catch this attack so in our

1111
00:42:34,480 --> 00:42:37,200
case we just used a very simple event id

1112
00:42:37,200 --> 00:42:38,800
filter we just

1113
00:42:38,800 --> 00:42:40,800
filtered the particular event id and for

1114
00:42:40,800 --> 00:42:42,319
those of you who are familiar with the

1115
00:42:42,319 --> 00:42:44,640
kerberos thing there are some kind of

1116
00:42:44,640 --> 00:42:45,920
specific things when it comes to

1117
00:42:45,920 --> 00:42:47,760
kerberos think you can actually spot on

1118
00:42:47,760 --> 00:42:49,359
and one of which is that ticket

1119
00:42:49,359 --> 00:42:51,119
encryption which kind of differs when

1120
00:42:51,119 --> 00:42:52,400
you perform a cranberry roasting from

1121
00:42:52,400 --> 00:42:52,880
the

1122
00:42:52,880 --> 00:42:55,359
regular ticket request and you can also

1123
00:42:55,359 --> 00:42:56,319
use that knowledge

1124
00:42:56,319 --> 00:42:59,200
just to uh to spot that within your

1125
00:42:59,200 --> 00:43:01,200
blocks

1126
00:43:01,200 --> 00:43:03,040
but also there's some tricky part with

1127
00:43:03,040 --> 00:43:04,800
this encryption type and

1128
00:43:04,800 --> 00:43:08,319
actually will schreder uh hanzo

1129
00:43:08,319 --> 00:43:11,280
did a great article on that on his blog

1130
00:43:11,280 --> 00:43:12,400
and he

1131
00:43:12,400 --> 00:43:15,200
just delve deep into how how kerbero

1132
00:43:15,200 --> 00:43:18,399
kerberos works and

1133
00:43:18,880 --> 00:43:21,440
the bottom line is it's not that easy to

1134
00:43:21,440 --> 00:43:22,240
to disable

1135
00:43:22,240 --> 00:43:25,520
the default encryption of

1136
00:43:25,520 --> 00:43:27,540
rc4 and

1137
00:43:27,540 --> 00:43:28,800
[Music]

1138
00:43:28,800 --> 00:43:31,359
some some let's say legitimate tgs

1139
00:43:31,359 --> 00:43:32,160
requests

1140
00:43:32,160 --> 00:43:34,240
could also use this type of encryption

1141
00:43:34,240 --> 00:43:36,160
but uh for kerberos think

1142
00:43:36,160 --> 00:43:39,760
specifically we would need to use

1143
00:43:39,760 --> 00:43:42,560
rc4 encryption to crack those tickets

1144
00:43:42,560 --> 00:43:44,880
faster

1145
00:43:45,839 --> 00:43:48,079
all right and we are back to the

1146
00:43:48,079 --> 00:43:49,920
powerpoint and

1147
00:43:49,920 --> 00:43:52,079
we finished our lap we've performed a

1148
00:43:52,079 --> 00:43:53,520
couple of great activities

1149
00:43:53,520 --> 00:43:56,480
and as you've seen we will we're able to

1150
00:43:56,480 --> 00:43:56,960
find

1151
00:43:56,960 --> 00:43:59,119
pretty much everything uh we of course

1152
00:43:59,119 --> 00:44:01,040
this is a very simplified scenario

1153
00:44:01,040 --> 00:44:04,319
because uh within uh our lab environment

1154
00:44:04,319 --> 00:44:05,839
you probably won't have this background

1155
00:44:05,839 --> 00:44:06,480
noise

1156
00:44:06,480 --> 00:44:09,200
which will which will be a a big uh

1157
00:44:09,200 --> 00:44:10,000
headwind for

1158
00:44:10,000 --> 00:44:13,200
all of this uh purple teamers and blue

1159
00:44:13,200 --> 00:44:15,359
teamers just to exclude the proper

1160
00:44:15,359 --> 00:44:18,000
uh proper things out from the vlogs so

1161
00:44:18,000 --> 00:44:19,680
maybe patrick you can have wrap up what

1162
00:44:19,680 --> 00:44:21,040
we actually did to the tactile

1163
00:44:21,040 --> 00:44:24,000
sure so so let's go through all of the

1164
00:44:24,000 --> 00:44:25,119
scenarios

1165
00:44:25,119 --> 00:44:27,920
and first is dropping the most document

1166
00:44:27,920 --> 00:44:30,319
on the disk so as we mentioned

1167
00:44:30,319 --> 00:44:32,880
just a good antivirus could could catch

1168
00:44:32,880 --> 00:44:33,359
this

1169
00:44:33,359 --> 00:44:36,480
but if the file is let's say properly

1170
00:44:36,480 --> 00:44:39,040
obfuscated this won't be enough so

1171
00:44:39,040 --> 00:44:41,040
blue team would need some some file

1172
00:44:41,040 --> 00:44:42,800
creation events

1173
00:44:42,800 --> 00:44:45,920
for incident response or thread hunting

1174
00:44:45,920 --> 00:44:47,280
purposes

1175
00:44:47,280 --> 00:44:50,319
the second one was with with encoded

1176
00:44:50,319 --> 00:44:51,520
command

1177
00:44:51,520 --> 00:44:55,040
so here we could leverage some

1178
00:44:55,040 --> 00:44:58,000
tricky regular expression to catch such

1179
00:44:58,000 --> 00:44:59,839
invocations of powershell

1180
00:44:59,839 --> 00:45:01,839
and one thing to note here it's enough

1181
00:45:01,839 --> 00:45:03,040
actually to

1182
00:45:03,040 --> 00:45:05,440
put the minus e parameter without the

1183
00:45:05,440 --> 00:45:07,280
whole encoder command part

1184
00:45:07,280 --> 00:45:10,400
and then there's a base64 encoded stuff

1185
00:45:10,400 --> 00:45:13,200
because that's how powershell works so

1186
00:45:13,200 --> 00:45:14,880
it could be either

1187
00:45:14,880 --> 00:45:18,720
minus e or minus any encoded or whatever

1188
00:45:18,720 --> 00:45:21,119
and the third thing is network

1189
00:45:21,119 --> 00:45:23,040
connectivity so this could be locked by

1190
00:45:23,040 --> 00:45:24,560
some

1191
00:45:24,560 --> 00:45:27,760
firewall ids ips inside your network or

1192
00:45:27,760 --> 00:45:30,000
also by spacesman which loves network

1193
00:45:30,000 --> 00:45:31,359
connections and also

1194
00:45:31,359 --> 00:45:34,400
the process from which the connection

1195
00:45:34,400 --> 00:45:35,040
originates

1196
00:45:35,040 --> 00:45:38,160
that that can be also useful uh fourth

1197
00:45:38,160 --> 00:45:39,359
scenario is

1198
00:45:39,359 --> 00:45:42,800
executing spouting powershell process

1199
00:45:42,800 --> 00:45:43,920
from from

1200
00:45:43,920 --> 00:45:47,119
word or xl or similar application so for

1201
00:45:47,119 --> 00:45:48,319
that

1202
00:45:48,319 --> 00:45:52,079
we would check the sysmon event one

1203
00:45:52,079 --> 00:45:55,920
or windows event number 4688 and the

1204
00:45:55,920 --> 00:45:56,640
thing with

1205
00:45:56,640 --> 00:45:59,920
windows event is that i think from

1206
00:45:59,920 --> 00:46:01,200
windows 10

1207
00:46:01,200 --> 00:46:03,839
the actual parent process name is logged

1208
00:46:03,839 --> 00:46:04,720
but before

1209
00:46:04,720 --> 00:46:07,839
the on only the process id was locked so

1210
00:46:07,839 --> 00:46:11,680
the id is is not

1211
00:46:11,680 --> 00:46:13,200
very useful for the analysis we would

1212
00:46:13,200 --> 00:46:16,319
need the whole parent process name to

1213
00:46:16,319 --> 00:46:19,280
see this see what was going on actually

1214
00:46:19,280 --> 00:46:20,079
actually

1215
00:46:20,079 --> 00:46:23,440
uh fifth thing it was the com object

1216
00:46:23,440 --> 00:46:24,800
instantiation so

1217
00:46:24,800 --> 00:46:28,160
here we if this was done by powershell

1218
00:46:28,160 --> 00:46:30,160
we could leverage the powershell

1219
00:46:30,160 --> 00:46:32,400
script block logging and for example

1220
00:46:32,400 --> 00:46:35,119
grab for the specific

1221
00:46:35,119 --> 00:46:38,200
cls id associated with the shell

1222
00:46:38,200 --> 00:46:40,839
browserwindow.com object

1223
00:46:40,839 --> 00:46:44,720
and i'm say bypass

1224
00:46:44,720 --> 00:46:48,160
this is tricky one when executed by

1225
00:46:48,160 --> 00:46:50,480
this one liner firstly it would be

1226
00:46:50,480 --> 00:46:52,319
blocked by the amps itself

1227
00:46:52,319 --> 00:46:56,640
but when it comes to detections we could

1228
00:46:56,640 --> 00:46:57,119
also

1229
00:46:57,119 --> 00:47:02,079
block for we could also filter logs for

1230
00:47:02,079 --> 00:47:06,000
msi or uh mci init failed or something

1231
00:47:06,000 --> 00:47:06,640
like that

1232
00:47:06,640 --> 00:47:09,839
to maybe catch such such events

1233
00:47:09,839 --> 00:47:12,880
such commands executed and the last

1234
00:47:12,880 --> 00:47:16,640
thing is is carbon rusting so the

1235
00:47:16,800 --> 00:47:19,520
most relevant event id for kerberos

1236
00:47:19,520 --> 00:47:20,160
think is

1237
00:47:20,160 --> 00:47:24,240
is those associated with with the

1238
00:47:24,240 --> 00:47:27,359
ticket creation ticket requests

1239
00:47:27,359 --> 00:47:29,119
all right and that was pretty much

1240
00:47:29,119 --> 00:47:30,559
everything we have prepared

1241
00:47:30,559 --> 00:47:33,520
uh for you today one last word from us

1242
00:47:33,520 --> 00:47:33,920
uh

1243
00:47:33,920 --> 00:47:35,200
if you are seeking for additional

1244
00:47:35,200 --> 00:47:36,640
knowledge there are a couple of really

1245
00:47:36,640 --> 00:47:38,079
great frameworks to follow

1246
00:47:38,079 --> 00:47:40,079
when it comes to purple teaming one of

1247
00:47:40,079 --> 00:47:41,200
which the

1248
00:47:41,200 --> 00:47:44,800
uh most know i guess is the atomic

1249
00:47:44,800 --> 00:47:47,119
framework right uh it gives a great

1250
00:47:47,119 --> 00:47:49,119
ability to perform such a

1251
00:47:49,119 --> 00:47:51,520
actions inside of your environment

1252
00:47:51,520 --> 00:47:53,280
actually building your own

1253
00:47:53,280 --> 00:47:56,559
uh purple lab is not that tough it's

1254
00:47:56,559 --> 00:48:00,319
just a very very simple uh

1255
00:48:00,319 --> 00:48:03,440
kibana to install one log machine one

1256
00:48:03,440 --> 00:48:04,640
domain controller maybe

1257
00:48:04,640 --> 00:48:06,319
some kind of router in the network and

1258
00:48:06,319 --> 00:48:07,680
that's it so

1259
00:48:07,680 --> 00:48:09,599
uh what we encourage you to do is

1260
00:48:09,599 --> 00:48:12,160
actually to

1261
00:48:12,160 --> 00:48:14,480
try to apply it in your inside your

1262
00:48:14,480 --> 00:48:15,280
organization

1263
00:48:15,280 --> 00:48:16,800
see what actually do you see if you

1264
00:48:16,800 --> 00:48:19,280
don't see some anything tune your tools

1265
00:48:19,280 --> 00:48:21,040
uh and we do the test and through the

1266
00:48:21,040 --> 00:48:24,880
test one final word from you patrick

1267
00:48:24,880 --> 00:48:26,480
thanks for watching thank you for

1268
00:48:26,480 --> 00:48:28,559
watching and stay health of course

1269
00:48:28,559 --> 00:48:35,680
hope you enjoy our presentation goodbye

