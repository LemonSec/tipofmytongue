1
00:00:01,520 --> 00:00:03,840
hey this is hacking a treat tossing dog

2
00:00:03,840 --> 00:00:06,799
camera with somerset recon

3
00:00:06,799 --> 00:00:09,519
a little bit about us we're somerset

4
00:00:09,519 --> 00:00:10,080
recon

5
00:00:10,080 --> 00:00:13,120
we do security analysis and research

6
00:00:13,120 --> 00:00:15,360
so on the analysis side that looks like

7
00:00:15,360 --> 00:00:16,239
information

8
00:00:16,239 --> 00:00:18,800
security assessments and penetration

9
00:00:18,800 --> 00:00:20,080
testing

10
00:00:20,080 --> 00:00:21,840
we cover everything from advanced

11
00:00:21,840 --> 00:00:23,840
hardware exploitation

12
00:00:23,840 --> 00:00:26,000
all the way to modern web applications

13
00:00:26,000 --> 00:00:27,279
and everything in between

14
00:00:27,279 --> 00:00:30,960
so you can imagine the full iot stack

15
00:00:30,960 --> 00:00:32,719
from hardware and software reverse

16
00:00:32,719 --> 00:00:34,160
engineering

17
00:00:34,160 --> 00:00:36,000
to networking cloud communication and

18
00:00:36,000 --> 00:00:37,440
infrastructure

19
00:00:37,440 --> 00:00:41,200
to mobile and web applications

20
00:00:41,200 --> 00:00:43,920
we have a small tight-knit team that

21
00:00:43,920 --> 00:00:45,440
have specialties in all of

22
00:00:45,440 --> 00:00:48,719
those areas and we

23
00:00:48,719 --> 00:00:51,039
work really well together on assessment

24
00:00:51,039 --> 00:00:53,680
the other part of our time

25
00:00:53,680 --> 00:00:56,960
consists of research so when there's a

26
00:00:56,960 --> 00:00:59,039
new device or technology that comes out

27
00:00:59,039 --> 00:01:00,559
that's of interest to us

28
00:01:00,559 --> 00:01:03,039
we put some time on the calendar and we

29
00:01:03,039 --> 00:01:04,159
research the device

30
00:01:04,159 --> 00:01:06,880
so whatever extent that looks like and

31
00:01:06,880 --> 00:01:07,760
it could also be

32
00:01:07,760 --> 00:01:08,960
a service it can be a cloud

33
00:01:08,960 --> 00:01:11,439
infrastructure software or whatever

34
00:01:11,439 --> 00:01:13,920
if it's some new flashy thing we always

35
00:01:13,920 --> 00:01:16,880
love looking at the security

36
00:01:16,880 --> 00:01:19,680
also we offer trainings too in various

37
00:01:19,680 --> 00:01:20,159
areas

38
00:01:20,159 --> 00:01:22,880
such as rfid software-defined radio or

39
00:01:22,880 --> 00:01:26,159
lock picking

40
00:01:26,159 --> 00:01:28,560
a little bit about me my name is kenneth

41
00:01:28,560 --> 00:01:29,439
nirenhausen

42
00:01:29,439 --> 00:01:30,799
i've been working at somerset for a

43
00:01:30,799 --> 00:01:32,960
while now been doing security research

44
00:01:32,960 --> 00:01:34,479
and analysis

45
00:01:34,479 --> 00:01:37,439
um i do full stack iot uh security

46
00:01:37,439 --> 00:01:38,079
research

47
00:01:38,079 --> 00:01:41,200
and exploitation so

48
00:01:41,200 --> 00:01:43,040
everything from the hardware up to the

49
00:01:43,040 --> 00:01:45,119
browser mobile applications

50
00:01:45,119 --> 00:01:46,960
communication network infrastructure all

51
00:01:46,960 --> 00:01:48,399
of it

52
00:01:48,399 --> 00:01:50,560
but my main focus is hardware security

53
00:01:50,560 --> 00:01:52,399
and reverse engineering so i focus a lot

54
00:01:52,399 --> 00:01:55,680
on the low level aspects

55
00:01:55,680 --> 00:01:58,479
as well as reversing firmware and those

56
00:01:58,479 --> 00:01:59,680
kind of things

57
00:01:59,680 --> 00:02:02,240
my side time the copious amounts of it

58
00:02:02,240 --> 00:02:02,880
are

59
00:02:02,880 --> 00:02:04,399
filled with side channel analysis

60
00:02:04,399 --> 00:02:08,080
research so if that looks like um power

61
00:02:08,080 --> 00:02:09,919
analysis or glitching or things of that

62
00:02:09,919 --> 00:02:11,599
aspect we have we have a lot of fun as

63
00:02:11,599 --> 00:02:13,040
well

64
00:02:13,040 --> 00:02:15,120
but we are a team and this was a team

65
00:02:15,120 --> 00:02:16,560
effort

66
00:02:16,560 --> 00:02:18,480
for this research project so i

67
00:02:18,480 --> 00:02:20,000
absolutely want to mention jared french

68
00:02:20,000 --> 00:02:22,400
he took point on this one

69
00:02:22,400 --> 00:02:25,520
the tree tossing dog camera was

70
00:02:25,520 --> 00:02:28,640
his baby he is a expert network

71
00:02:28,640 --> 00:02:30,000
exploitation

72
00:02:30,000 --> 00:02:32,720
security analyst and researcher and he's

73
00:02:32,720 --> 00:02:33,519
super

74
00:02:33,519 --> 00:02:35,680
awesome at arm exploitation and he did a

75
00:02:35,680 --> 00:02:36,720
ton for this so it was

76
00:02:36,720 --> 00:02:38,480
it was really a pleasure to work with

77
00:02:38,480 --> 00:02:40,560
him also nori marcus

78
00:02:40,560 --> 00:02:42,879
morgan and danny thank you very much for

79
00:02:42,879 --> 00:02:44,000
all the pieces and parts that you

80
00:02:44,000 --> 00:02:44,959
contributed

81
00:02:44,959 --> 00:02:47,040
whether it was review or just positive

82
00:02:47,040 --> 00:02:48,319
words it was really nice to work with

83
00:02:48,319 --> 00:02:49,440
everyone on this

84
00:02:49,440 --> 00:02:52,080
so credit where credit is due for sure

85
00:02:52,080 --> 00:02:53,680
the device we looked at for this talk

86
00:02:53,680 --> 00:02:54,560
was

87
00:02:54,560 --> 00:02:57,920
the furbo or i should say is the furbo

88
00:02:57,920 --> 00:03:00,560
is the tree tossing dog camera

89
00:03:00,560 --> 00:03:02,000
this is an image from their website you

90
00:03:02,000 --> 00:03:04,159
can see from their promotional material

91
00:03:04,159 --> 00:03:07,360
that it has a mic and speaker a 160

92
00:03:07,360 --> 00:03:08,480
degree hd

93
00:03:08,480 --> 00:03:11,680
camera with night vision a parking

94
00:03:11,680 --> 00:03:13,840
sensor it has a treat tosser and also a

95
00:03:13,840 --> 00:03:15,040
status led

96
00:03:15,040 --> 00:03:17,360
so this device is intended to sit in

97
00:03:17,360 --> 00:03:18,400
your house

98
00:03:18,400 --> 00:03:22,959
monitor your pet and allows you to

99
00:03:22,959 --> 00:03:25,280
toss treats to your dog or your cat i

100
00:03:25,280 --> 00:03:26,319
suppose

101
00:03:26,319 --> 00:03:30,840
if they're being particularly good i

102
00:03:30,840 --> 00:03:33,840
suppose

103
00:03:33,840 --> 00:03:38,080
they got popular in indiegogo in 2016.

104
00:03:38,080 --> 00:03:40,080
they went public and then they soon

105
00:03:40,080 --> 00:03:42,159
became an amazon number one bestseller

106
00:03:42,159 --> 00:03:45,360
so they are doing quite well the parent

107
00:03:45,360 --> 00:03:47,680
company is called tomo fun

108
00:03:47,680 --> 00:03:49,040
and we'll talk a little bit about them

109
00:03:49,040 --> 00:03:51,519
later when we get to disclosure

110
00:03:51,519 --> 00:03:53,599
so some of the features as i mentioned

111
00:03:53,599 --> 00:03:55,040
the furbo device it does video

112
00:03:55,040 --> 00:03:56,480
monitoring so it'll

113
00:03:56,480 --> 00:03:58,720
monitor your dog when you're away or

114
00:03:58,720 --> 00:04:00,799
your animal when you're away

115
00:04:00,799 --> 00:04:02,560
you can toss them treats by tapping on

116
00:04:02,560 --> 00:04:04,080
the mobile device and you can shoot off

117
00:04:04,080 --> 00:04:05,439
treats

118
00:04:05,439 --> 00:04:06,799
and then there are various alerts that

119
00:04:06,799 --> 00:04:08,799
come with the furbo as well so

120
00:04:08,799 --> 00:04:11,280
it will process the video stream and it

121
00:04:11,280 --> 00:04:15,439
will look for um dogs or it'll it'll

122
00:04:15,439 --> 00:04:18,000
alert you if there are dogs barking

123
00:04:18,000 --> 00:04:21,040
or if there is a fire alarm detected so

124
00:04:21,040 --> 00:04:22,560
that's really cool

125
00:04:22,560 --> 00:04:23,919
there's also a subscription you can

126
00:04:23,919 --> 00:04:25,600
purchase with the furbo

127
00:04:25,600 --> 00:04:28,880
that will um

128
00:04:28,880 --> 00:04:31,120
provide additional alerts for your dog

129
00:04:31,120 --> 00:04:33,040
that includes seizures and

130
00:04:33,040 --> 00:04:34,720
if there's home intruders i think are on

131
00:04:34,720 --> 00:04:36,240
there as well and they're working on one

132
00:04:36,240 --> 00:04:36,800
for

133
00:04:36,800 --> 00:04:38,320
detecting if the dog throws up things

134
00:04:38,320 --> 00:04:41,280
like that so it's pretty cool

135
00:04:41,280 --> 00:04:45,120
the architecture

136
00:04:45,120 --> 00:04:47,360
of the furbo and associated devices aka

137
00:04:47,360 --> 00:04:48,560
the mobile app

138
00:04:48,560 --> 00:04:51,919
are an amazon iot device so

139
00:04:51,919 --> 00:04:54,800
amazon aws has a service called amazon

140
00:04:54,800 --> 00:04:56,720
aws iot

141
00:04:56,720 --> 00:04:58,160
and what it provides is essentially

142
00:04:58,160 --> 00:05:00,800
infrastructure that you can put in place

143
00:05:00,800 --> 00:05:05,199
on a application as a user

144
00:05:05,199 --> 00:05:07,840
on backend server hosting and then on

145
00:05:07,840 --> 00:05:08,240
the

146
00:05:08,240 --> 00:05:11,680
iot device itself so what this provides

147
00:05:11,680 --> 00:05:13,280
is essentially a template that you can

148
00:05:13,280 --> 00:05:15,199
put together to really easily

149
00:05:15,199 --> 00:05:18,080
create iot devices as well as the web or

150
00:05:18,080 --> 00:05:19,600
mobile application that the user is

151
00:05:19,600 --> 00:05:23,440
going to connect the iot device with

152
00:05:23,600 --> 00:05:27,039
so in terms of the furbo how this works

153
00:05:27,039 --> 00:05:30,080
is the user is a smartphone

154
00:05:30,080 --> 00:05:33,600
so when you first get your furbo device

155
00:05:33,600 --> 00:05:35,120
it'll prompt you to download the furbo

156
00:05:35,120 --> 00:05:35,440
app

157
00:05:35,440 --> 00:05:38,320
so you'll do that you'll create an

158
00:05:38,320 --> 00:05:40,240
account with furbo and what that does is

159
00:05:40,240 --> 00:05:42,479
it'll register

160
00:05:42,479 --> 00:05:44,960
your account with the aws backend so the

161
00:05:44,960 --> 00:05:46,400
aws iot

162
00:05:46,400 --> 00:05:50,240
device will then communicate in

163
00:05:50,240 --> 00:05:53,199
to you to your mobile client your mobile

164
00:05:53,199 --> 00:05:55,120
phone will then reach out locally

165
00:05:55,120 --> 00:05:56,960
to the furbo once it's powered up via

166
00:05:56,960 --> 00:05:58,479
bluetooth low energy

167
00:05:58,479 --> 00:06:01,039
so that connection exists locally so

168
00:06:01,039 --> 00:06:03,759
that your mobile phone can pass off

169
00:06:03,759 --> 00:06:07,280
um wi-fi credentials to the furbo device

170
00:06:07,280 --> 00:06:08,880
so now the furbo has your wi-fi

171
00:06:08,880 --> 00:06:09,919
credentials

172
00:06:09,919 --> 00:06:12,400
so then it can connect to the internet

173
00:06:12,400 --> 00:06:13,520
and perform its

174
00:06:13,520 --> 00:06:15,840
aws registration which goes to the back

175
00:06:15,840 --> 00:06:17,039
end

176
00:06:17,039 --> 00:06:20,319
so that your device now gets registered

177
00:06:20,319 --> 00:06:21,199
with your

178
00:06:21,199 --> 00:06:24,400
ferbo account so once this process is

179
00:06:24,400 --> 00:06:25,680
complete

180
00:06:25,680 --> 00:06:28,720
it allows communication between the

181
00:06:28,720 --> 00:06:30,319
ferbo device and the mobile device

182
00:06:30,319 --> 00:06:33,120
directly through the aws back end

183
00:06:33,120 --> 00:06:34,800
so that's kind of the data flow of the

184
00:06:34,800 --> 00:06:36,720
furbo when you're first setting it up

185
00:06:36,720 --> 00:06:38,720
um so now your fruit was connected to

186
00:06:38,720 --> 00:06:40,080
the internet right

187
00:06:40,080 --> 00:06:42,560
we wanted to see what was going on there

188
00:06:42,560 --> 00:06:44,479
kind of look for some vulnerabilities or

189
00:06:44,479 --> 00:06:46,960
see if there was anything funky

190
00:06:46,960 --> 00:06:50,000
so we did a simple nmap scan

191
00:06:50,000 --> 00:06:54,720
and we noticed that port 554 was open

192
00:06:54,720 --> 00:06:58,639
port 554 is typically used for rtsp

193
00:06:58,639 --> 00:07:01,440
traffic rtsp is real-time streaming

194
00:07:01,440 --> 00:07:02,240
protocol

195
00:07:02,240 --> 00:07:03,759
uh which is just a protocol that's

196
00:07:03,759 --> 00:07:05,520
utilized in a lot of video and audio

197
00:07:05,520 --> 00:07:07,039
streaming

198
00:07:07,039 --> 00:07:09,680
so as you can see from the map scan

199
00:07:09,680 --> 00:07:11,759
there wasn't really anything else open

200
00:07:11,759 --> 00:07:14,400
so we looked at the rtsp server to uh or

201
00:07:14,400 --> 00:07:16,479
service to see what was going on

202
00:07:16,479 --> 00:07:20,240
uh right away um we knew we got a crash

203
00:07:20,240 --> 00:07:22,080
so we were pretty happy we were like oh

204
00:07:22,080 --> 00:07:23,360
yeah we got we

205
00:07:23,360 --> 00:07:24,800
this is going to be fun this is we're on

206
00:07:24,800 --> 00:07:27,360
to something um

207
00:07:27,360 --> 00:07:29,120
what we found was when we connect

208
00:07:29,120 --> 00:07:31,120
directly to the rtsp service

209
00:07:31,120 --> 00:07:35,280
via vlc we get prompted with

210
00:07:35,280 --> 00:07:37,440
digest authentication so what that means

211
00:07:37,440 --> 00:07:39,039
is we'll be asked for a username or

212
00:07:39,039 --> 00:07:40,160
password

213
00:07:40,160 --> 00:07:43,199
sorry username and password we're

214
00:07:43,199 --> 00:07:44,639
prompted for that we have to enter those

215
00:07:44,639 --> 00:07:45,440
credentials

216
00:07:45,440 --> 00:07:47,120
and then they get sent back to the

217
00:07:47,120 --> 00:07:49,199
server we'll verify if you

218
00:07:49,199 --> 00:07:51,120
allowed to access that stream good for

219
00:07:51,120 --> 00:07:53,599
furbo they set that up

220
00:07:53,599 --> 00:07:56,960
however in the rtsp authentication

221
00:07:56,960 --> 00:07:58,800
header they introduced a parsing

222
00:07:58,800 --> 00:08:03,759
issue that crashes the service so

223
00:08:03,759 --> 00:08:05,840
how did we crash a service well we

224
00:08:05,840 --> 00:08:06,879
manually fuzzed

225
00:08:06,879 --> 00:08:08,319
and the first thing we wanted to test

226
00:08:08,319 --> 00:08:09,440
right away was i don't know maybe

227
00:08:09,440 --> 00:08:11,599
there's a simple buffer overflow

228
00:08:11,599 --> 00:08:14,319
so we set the username to be 500as as we

229
00:08:14,319 --> 00:08:15,360
can see

230
00:08:15,360 --> 00:08:19,039
from this chunk right here um so the

231
00:08:19,039 --> 00:08:21,840
username we set to 500as sent it off and

232
00:08:21,840 --> 00:08:22,960
we got a crash

233
00:08:22,960 --> 00:08:24,560
that caught our attention we were like

234
00:08:24,560 --> 00:08:26,000
oh yeah okay

235
00:08:26,000 --> 00:08:27,840
like we got we got an actual crash here

236
00:08:27,840 --> 00:08:29,680
this is this is good we're

237
00:08:29,680 --> 00:08:32,880
buffer overflowing something um but we

238
00:08:32,880 --> 00:08:34,080
need to prove it we need to figure out

239
00:08:34,080 --> 00:08:35,360
what was going on

240
00:08:35,360 --> 00:08:39,440
so it was time to get shell access um

241
00:08:39,440 --> 00:08:41,919
to get shell access we had to start the

242
00:08:41,919 --> 00:08:44,080
process of hardware reversing

243
00:08:44,080 --> 00:08:46,080
um doing the tear down analysis of the

244
00:08:46,080 --> 00:08:48,800
furbo device to figure out how we could

245
00:08:48,800 --> 00:08:51,519
get any sort of shell on this device

246
00:08:51,519 --> 00:08:53,200
physically

247
00:08:53,200 --> 00:08:54,240
since there were no other network

248
00:08:54,240 --> 00:08:56,240
services running it was our it was our

249
00:08:56,240 --> 00:08:57,839
next option

250
00:08:57,839 --> 00:09:00,160
the hardware consists of three major

251
00:09:00,160 --> 00:09:01,600
pcbs

252
00:09:01,600 --> 00:09:03,839
there's also a minor led pcb which we

253
00:09:03,839 --> 00:09:05,279
don't need to go into it just has the

254
00:09:05,279 --> 00:09:07,200
leds on it

255
00:09:07,200 --> 00:09:10,959
but this is the back pcb aptly named

256
00:09:10,959 --> 00:09:13,760
um it handles the power so it just has a

257
00:09:13,760 --> 00:09:14,240
usb

258
00:09:14,240 --> 00:09:17,680
connector uh micro connector

259
00:09:17,680 --> 00:09:19,200
it has a reset switch which can be

260
00:09:19,200 --> 00:09:20,880
utilized to reset the furbo or factory

261
00:09:20,880 --> 00:09:22,480
reset it if held down

262
00:09:22,480 --> 00:09:24,080
and then you can see that cable on the

263
00:09:24,080 --> 00:09:27,360
left hand side that connects the other

264
00:09:27,360 --> 00:09:30,080
pcb components and then bonus there's a

265
00:09:30,080 --> 00:09:31,839
couple non-pops on here there's another

266
00:09:31,839 --> 00:09:33,360
reset button which is

267
00:09:33,360 --> 00:09:36,320
tied to the exact same thing as well as

268
00:09:36,320 --> 00:09:36,800
the

269
00:09:36,800 --> 00:09:38,480
usb connector on the right hand side

270
00:09:38,480 --> 00:09:41,279
that has the d plus and d minus usb pins

271
00:09:41,279 --> 00:09:43,839
broken out

272
00:09:43,839 --> 00:09:46,240
i assume that these non-pop boards are

273
00:09:46,240 --> 00:09:46,959
used for

274
00:09:46,959 --> 00:09:48,560
communication of the furbo device with

275
00:09:48,560 --> 00:09:50,240
pogo pins in the factory

276
00:09:50,240 --> 00:09:52,080
but that being said they weren't super

277
00:09:52,080 --> 00:09:53,600
interesting

278
00:09:53,600 --> 00:09:56,480
we didn't need to explore further there

279
00:09:56,480 --> 00:09:57,680
so the power on this guy

280
00:09:57,680 --> 00:10:00,880
runs to the central pcb which we have

281
00:10:00,880 --> 00:10:01,440
coined

282
00:10:01,440 --> 00:10:03,680
the muscle so this is the chip that kind

283
00:10:03,680 --> 00:10:05,360
of does all the heavy lifting in terms

284
00:10:05,360 --> 00:10:05,920
of

285
00:10:05,920 --> 00:10:10,240
actual lifting the physical components

286
00:10:12,079 --> 00:10:13,680
it controls things like the treat

287
00:10:13,680 --> 00:10:16,079
tossing motor

288
00:10:16,079 --> 00:10:18,320
the actuator that measures if there's a

289
00:10:18,320 --> 00:10:19,120
treat there

290
00:10:19,120 --> 00:10:21,440
it has the led controller it also does

291
00:10:21,440 --> 00:10:23,360
voltage regulation

292
00:10:23,360 --> 00:10:25,640
uh and it handles all this utilizing the

293
00:10:25,640 --> 00:10:26,880
pic16f57

294
00:10:26,880 --> 00:10:28,480
so we can see right in the middle

295
00:10:28,480 --> 00:10:31,040
central area here this is the pick chip

296
00:10:31,040 --> 00:10:32,640
there's a non-pop header that you can

297
00:10:32,640 --> 00:10:34,320
communicate with the pic chip there's a

298
00:10:34,320 --> 00:10:36,480
couple other non-pop

299
00:10:36,480 --> 00:10:38,320
elements and test points that have data

300
00:10:38,320 --> 00:10:40,079
flowing through them but

301
00:10:40,079 --> 00:10:43,040
it's all kind of standard communication

302
00:10:43,040 --> 00:10:43,680
i2c

303
00:10:43,680 --> 00:10:46,640
spi stuff like that nothing particularly

304
00:10:46,640 --> 00:10:48,320
interesting in terms of getting root

305
00:10:48,320 --> 00:10:50,640
access on the device

306
00:10:50,640 --> 00:10:54,320
so then we found this device

307
00:10:54,320 --> 00:10:56,800
this pcb which is directly behind the

308
00:10:56,800 --> 00:10:57,519
camera

309
00:10:57,519 --> 00:11:00,480
so actually the back side of this board

310
00:11:00,480 --> 00:11:03,760
right behind this is the camera

311
00:11:03,760 --> 00:11:06,800
but this board when we when we pulled it

312
00:11:06,800 --> 00:11:08,320
off we found that it has this

313
00:11:08,320 --> 00:11:12,320
amborella chip on it amborella

314
00:11:12,320 --> 00:11:14,160
created the system on chip it's called

315
00:11:14,160 --> 00:11:15,360
the s2lm

316
00:11:15,360 --> 00:11:18,880
it's an arm cortex a9 so it's a full

317
00:11:18,880 --> 00:11:20,880
system-on-chip it's not just an mcu like

318
00:11:20,880 --> 00:11:22,560
the pick on the other board

319
00:11:22,560 --> 00:11:24,079
we also have the flash sitting right

320
00:11:24,079 --> 00:11:25,680
next to it

321
00:11:25,680 --> 00:11:27,360
there's a bunch of test points broken

322
00:11:27,360 --> 00:11:28,880
out and you can see

323
00:11:28,880 --> 00:11:30,320
underneath this heavy shielding there's

324
00:11:30,320 --> 00:11:33,440
some wi-fi and bluetooth components

325
00:11:33,440 --> 00:11:34,800
there are some other connectors that

326
00:11:34,800 --> 00:11:36,880
went to ir sensors and the barking

327
00:11:36,880 --> 00:11:37,519
sensor

328
00:11:37,519 --> 00:11:39,920
and things like that so we knew right

329
00:11:39,920 --> 00:11:42,480
away when we saw this guy that

330
00:11:42,480 --> 00:11:45,040
it was like okay yeah this is the brains

331
00:11:45,040 --> 00:11:45,600
um

332
00:11:45,600 --> 00:11:46,959
this is going to have some good stuff

333
00:11:46,959 --> 00:11:47,920
we're going to take some time to

334
00:11:47,920 --> 00:11:50,959
actively reverse this and find out what

335
00:11:50,959 --> 00:11:54,079
what's on it and after

336
00:11:54,079 --> 00:11:56,959
copious amounts of probing this board

337
00:11:56,959 --> 00:11:57,279
and

338
00:11:57,279 --> 00:12:00,639
many broken probes we found

339
00:12:00,639 --> 00:12:03,519
that there's a serial up port on these

340
00:12:03,519 --> 00:12:05,760
two pins right here

341
00:12:05,760 --> 00:12:07,839
so there's our tx and rx connection to

342
00:12:07,839 --> 00:12:10,320
the amborella system on chip so

343
00:12:10,320 --> 00:12:13,040
we hooked it up

344
00:12:13,600 --> 00:12:15,279
we soldered some wires directly to those

345
00:12:15,279 --> 00:12:16,720
points and

346
00:12:16,720 --> 00:12:19,839
we hooked it up to an ftdi

347
00:12:19,839 --> 00:12:23,200
which just transmits serial

348
00:12:23,200 --> 00:12:27,440
uart to usb which allows our machines to

349
00:12:27,440 --> 00:12:29,120
be able to view what's on the serial

350
00:12:29,120 --> 00:12:30,000
uart lines

351
00:12:30,000 --> 00:12:33,920
now in the ambaria case

352
00:12:33,920 --> 00:12:35,760
that's going to be their whole boot log

353
00:12:35,760 --> 00:12:37,279
sequence

354
00:12:37,279 --> 00:12:39,839
so we get to the login prompt but we

355
00:12:39,839 --> 00:12:42,000
don't have a password

356
00:12:42,000 --> 00:12:44,720
so one thing that we did was we just

357
00:12:44,720 --> 00:12:45,360
cleaned it all

358
00:12:45,360 --> 00:12:47,279
up because we knew that this was going

359
00:12:47,279 --> 00:12:48,480
to be a major part

360
00:12:48,480 --> 00:12:49,920
this is going to be like a big component

361
00:12:49,920 --> 00:12:51,839
of what we wanted to do

362
00:12:51,839 --> 00:12:55,920
was accessing the amborella boot logs

363
00:12:55,920 --> 00:13:00,240
via the ftdi and then

364
00:13:01,200 --> 00:13:02,240
seeing what was going on under the

365
00:13:02,240 --> 00:13:05,440
covers so we made a compressed version

366
00:13:05,440 --> 00:13:06,639
this is the compressed version of the

367
00:13:06,639 --> 00:13:11,200
furbo you can see it has the major

368
00:13:11,279 --> 00:13:14,160
components on it the mains board it has

369
00:13:14,160 --> 00:13:15,360
the back pcb

370
00:13:15,360 --> 00:13:17,279
the other components are underneath

371
00:13:17,279 --> 00:13:21,839
here's the led pcb as mentioned

372
00:13:23,200 --> 00:13:24,399
and then as you can see we have

373
00:13:24,399 --> 00:13:26,320
connected an ftdi here

374
00:13:26,320 --> 00:13:29,680
it's a simple 3.3 volt ftdi with tx and

375
00:13:29,680 --> 00:13:32,079
rx and ground hooked up

376
00:13:32,079 --> 00:13:33,680
and then we have our connector here

377
00:13:33,680 --> 00:13:35,360
which goes off to our laptop

378
00:13:35,360 --> 00:13:38,959
and from there we can see

379
00:13:38,959 --> 00:13:41,920
our boot logs so here's the furbo boot

380
00:13:41,920 --> 00:13:42,560
logs

381
00:13:42,560 --> 00:13:45,680
we have some hardware initialization

382
00:13:45,680 --> 00:13:48,320
bootloader starts running and you can

383
00:13:48,320 --> 00:13:50,079
see it jumps to the linux kernel and

384
00:13:50,079 --> 00:13:52,399
system d

385
00:13:52,399 --> 00:13:54,720
um typical system d output you can see

386
00:13:54,720 --> 00:13:56,240
it's setting up some of the file system

387
00:13:56,240 --> 00:13:58,320
components it's looking at the flash

388
00:13:58,320 --> 00:13:59,839
it's partitioning

389
00:13:59,839 --> 00:14:01,279
and then we get hit with the amarillo

390
00:14:01,279 --> 00:14:03,839
login prompt

391
00:14:06,480 --> 00:14:09,120
so the amarillo login prompt how do we

392
00:14:09,120 --> 00:14:10,000
get by it

393
00:14:10,000 --> 00:14:11,440
well we saw in the boot logs that there

394
00:14:11,440 --> 00:14:14,240
was bootloader um

395
00:14:14,240 --> 00:14:17,600
it's amboot it turns out amboot is

396
00:14:17,600 --> 00:14:19,199
amberella's bootloader

397
00:14:19,199 --> 00:14:21,839
it's very similar to ubu if you guys are

398
00:14:21,839 --> 00:14:22,959
familiar with that

399
00:14:22,959 --> 00:14:25,519
u-boot is one of the most common boot

400
00:14:25,519 --> 00:14:27,120
loaders used in embedded devices and

401
00:14:27,120 --> 00:14:27,680
honestly

402
00:14:27,680 --> 00:14:31,360
just devices in general it loads

403
00:14:31,360 --> 00:14:33,199
the kernel it loads the file system it

404
00:14:33,199 --> 00:14:34,399
loads any other partitions that are

405
00:14:34,399 --> 00:14:36,240
saved in the nand

406
00:14:36,240 --> 00:14:38,959
amboot does the same so it has typical

407
00:14:38,959 --> 00:14:40,480
commands and environment variables that

408
00:14:40,480 --> 00:14:43,040
you can set

409
00:14:43,040 --> 00:14:45,199
once you're in the ambarilla bootloader

410
00:14:45,199 --> 00:14:46,880
prompt as we can see here

411
00:14:46,880 --> 00:14:50,160
so how do you access the prompt um it's

412
00:14:50,160 --> 00:14:52,160
in you there's various ways you can hit

413
00:14:52,160 --> 00:14:55,199
escape sometimes control c control enter

414
00:14:55,199 --> 00:14:58,320
but in the furbo's case it was just

415
00:14:58,320 --> 00:14:58,720
holding

416
00:14:58,720 --> 00:15:02,160
enter while the furbo is boot up

417
00:15:02,160 --> 00:15:05,360
um so now that we're in the bootloader

418
00:15:05,360 --> 00:15:07,839
how do we get root access right like we

419
00:15:07,839 --> 00:15:09,839
are in the am boot boot loader

420
00:15:09,839 --> 00:15:13,199
there's got to be a way that we can

421
00:15:13,199 --> 00:15:15,760
get a root shell on this device and

422
00:15:15,760 --> 00:15:18,320
modify

423
00:15:18,320 --> 00:15:20,560
access whether that's enabling ssh or

424
00:15:20,560 --> 00:15:21,360
that's

425
00:15:21,360 --> 00:15:23,199
adding a user there's got to be a way to

426
00:15:23,199 --> 00:15:24,480
do this

427
00:15:24,480 --> 00:15:27,600
so there is we noticed in the uh

428
00:15:27,600 --> 00:15:31,279
um boot our in the boot logs initially

429
00:15:31,279 --> 00:15:33,360
that uh the kernel command line

430
00:15:33,360 --> 00:15:34,800
arguments get strong by

431
00:15:34,800 --> 00:15:37,920
um and so we copied those

432
00:15:37,920 --> 00:15:39,600
we looked at them and we noticed that it

433
00:15:39,600 --> 00:15:42,800
had the traditional init equals linux rc

434
00:15:42,800 --> 00:15:45,360
which is how most devices will when they

435
00:15:45,360 --> 00:15:46,240
first run

436
00:15:46,240 --> 00:15:47,519
um that's the first thing that kernel

437
00:15:47,519 --> 00:15:49,519
will do so it'll run that

438
00:15:49,519 --> 00:15:52,720
so what we did which is really simple

439
00:15:52,720 --> 00:15:54,720
was modify the init parameter to point

440
00:15:54,720 --> 00:15:57,040
to bin.sh

441
00:15:57,040 --> 00:15:58,560
so what this does in the amborella

442
00:15:58,560 --> 00:16:00,399
bootloader is

443
00:16:00,399 --> 00:16:02,240
when the kernel command line arguments

444
00:16:02,240 --> 00:16:04,160
get passed to

445
00:16:04,160 --> 00:16:07,360
the boot parameter or sorry the boot

446
00:16:07,360 --> 00:16:08,079
command

447
00:16:08,079 --> 00:16:11,680
in um am boot it'll run

448
00:16:11,680 --> 00:16:14,079
bin.sh as soon as the kernel starts as

449
00:16:14,079 --> 00:16:15,680
soon as we're like ready to go

450
00:16:15,680 --> 00:16:19,040
so what that looks like is

451
00:16:19,040 --> 00:16:22,480
here um so we're holding enter we

452
00:16:22,480 --> 00:16:26,399
run the furbo um

453
00:16:26,399 --> 00:16:29,759
we get put into the amboot prompt we put

454
00:16:29,759 --> 00:16:30,399
in our

455
00:16:30,399 --> 00:16:33,199
init equals been sh and boom it drops

456
00:16:33,199 --> 00:16:34,639
into an init ram

457
00:16:34,639 --> 00:16:37,360
fs root shell you can see our id there

458
00:16:37,360 --> 00:16:38,560
is zero

459
00:16:38,560 --> 00:16:40,639
uh so we did it we got root shell on the

460
00:16:40,639 --> 00:16:42,720
furbo well you're super stoked it was a

461
00:16:42,720 --> 00:16:45,040
great moment

462
00:16:45,040 --> 00:16:48,560
and it meant now it was time to tie

463
00:16:48,560 --> 00:16:50,560
back the original crash that we had seen

464
00:16:50,560 --> 00:16:52,560
in the rtsp service

465
00:16:52,560 --> 00:16:54,560
with this new root access that we have

466
00:16:54,560 --> 00:16:56,079
on the furbo device

467
00:16:56,079 --> 00:16:58,560
so we can answer the question why does

468
00:16:58,560 --> 00:17:00,240
the rtsp service crash

469
00:17:00,240 --> 00:17:03,360
what exactly is going on there

470
00:17:03,360 --> 00:17:05,520
we were perplexed as you can see our

471
00:17:05,520 --> 00:17:07,520
seventh member at somerset

472
00:17:07,520 --> 00:17:11,039
uh was clearly as complex as we are

473
00:17:11,039 --> 00:17:14,559
um so we started looking into it

474
00:17:14,559 --> 00:17:16,400
we well now that we had root access on

475
00:17:16,400 --> 00:17:18,640
the firmware device we reversed a little

476
00:17:18,640 --> 00:17:19,919
bit of the software to figure out

477
00:17:19,919 --> 00:17:21,520
exactly what was going on

478
00:17:21,520 --> 00:17:24,000
turns out there's this service run by

479
00:17:24,000 --> 00:17:26,480
systemd called apps launcher

480
00:17:26,480 --> 00:17:28,079
apps launcher is in charge of launching

481
00:17:28,079 --> 00:17:29,600
all the services that run on the furbo

482
00:17:29,600 --> 00:17:31,200
device

483
00:17:31,200 --> 00:17:32,559
there's there's several as you can

484
00:17:32,559 --> 00:17:34,720
imagine that are there for monitoring

485
00:17:34,720 --> 00:17:35,679
the sensors or

486
00:17:35,679 --> 00:17:37,440
displaying the video or you know

487
00:17:37,440 --> 00:17:40,080
handling the treats and things like that

488
00:17:40,080 --> 00:17:42,880
um but the one of the ones that we were

489
00:17:42,880 --> 00:17:43,919
most interested in

490
00:17:43,919 --> 00:17:47,600
is the rtsp underscore svc

491
00:17:47,600 --> 00:17:51,120
so that file at executable

492
00:17:51,120 --> 00:17:53,840
is the rtsp server that's running on the

493
00:17:53,840 --> 00:17:55,280
ferbo device so that's the thing that

494
00:17:55,280 --> 00:17:58,160
we're seeing crash

495
00:17:59,120 --> 00:18:03,760
so what we see when we run our exploit

496
00:18:03,760 --> 00:18:06,240
we manually ran apps launcher on the on

497
00:18:06,240 --> 00:18:07,679
the command line so we could see

498
00:18:07,679 --> 00:18:11,280
the log output what we see here

499
00:18:11,280 --> 00:18:14,000
is when we run our exploit against the

500
00:18:14,000 --> 00:18:14,960
rtsp

501
00:18:14,960 --> 00:18:18,960
underscore svc executable

502
00:18:19,200 --> 00:18:22,160
we get two seg faults before the before

503
00:18:22,160 --> 00:18:23,679
the device resets

504
00:18:23,679 --> 00:18:26,559
so we have two seg faults happening and

505
00:18:26,559 --> 00:18:28,080
the really exciting part

506
00:18:28,080 --> 00:18:30,000
is if you remember we filled the

507
00:18:30,000 --> 00:18:31,679
original request with

508
00:18:31,679 --> 00:18:34,640
uh 500 a's is we see the address in the

509
00:18:34,640 --> 00:18:37,039
segfault is set to 41414140

510
00:18:37,039 --> 00:18:39,679
which we're just like okay yeah we're

511
00:18:39,679 --> 00:18:41,280
getting a buffer overflow this is going

512
00:18:41,280 --> 00:18:42,880
to be really fun

513
00:18:42,880 --> 00:18:45,280
so then we started the process of

514
00:18:45,280 --> 00:18:45,919
tooling

515
00:18:45,919 --> 00:18:48,240
how can we start taking control what can

516
00:18:48,240 --> 00:18:51,440
we do with this buffer overflow

517
00:18:51,440 --> 00:18:54,880
really fun oh i love this stuff

518
00:18:55,200 --> 00:18:58,640
so we put gdb server on the furbo device

519
00:18:58,640 --> 00:18:59,919
um so that we could do some dynamic

520
00:18:59,919 --> 00:19:01,440
testing and see exactly what was in

521
00:19:01,440 --> 00:19:03,760
memory when things were crashing

522
00:19:03,760 --> 00:19:05,520
um so we put on a static compiled

523
00:19:05,520 --> 00:19:07,200
version of it

524
00:19:07,200 --> 00:19:09,280
and then on our local host side we set

525
00:19:09,280 --> 00:19:10,559
up gdb multi-arch

526
00:19:10,559 --> 00:19:12,480
and the jeff plugin which nicely

527
00:19:12,480 --> 00:19:14,080
presents the gdb output

528
00:19:14,080 --> 00:19:15,039
and just a little bit more

529
00:19:15,039 --> 00:19:17,520
understandable

530
00:19:17,520 --> 00:19:20,240
of a format so here we can see some of

531
00:19:20,240 --> 00:19:22,799
the jeff output

532
00:19:22,799 --> 00:19:24,000
you'll notice the registers are

533
00:19:24,000 --> 00:19:26,480
completely blown away by a's

534
00:19:26,480 --> 00:19:27,760
as well as the stack pointer in the

535
00:19:27,760 --> 00:19:30,080
program counter a bunch of other memory

536
00:19:30,080 --> 00:19:31,760
has also been filled with a's

537
00:19:31,760 --> 00:19:34,160
so we're getting these two seg faults

538
00:19:34,160 --> 00:19:36,960
memory is totally filled with a's

539
00:19:36,960 --> 00:19:39,919
but why what's going on um what's

540
00:19:39,919 --> 00:19:40,640
causing

541
00:19:40,640 --> 00:19:43,280
what what what part is causing this well

542
00:19:43,280 --> 00:19:44,799
gdp has this really awesome little

543
00:19:44,799 --> 00:19:47,360
feature if you can see in gray

544
00:19:47,360 --> 00:19:49,600
this pointer right here figures out the

545
00:19:49,600 --> 00:19:50,960
function that it's pointed to

546
00:19:50,960 --> 00:19:52,799
and it's called parse authentication

547
00:19:52,799 --> 00:19:55,280
header so we know that the function

548
00:19:55,280 --> 00:19:56,559
that's failing that's

549
00:19:56,559 --> 00:19:58,240
causing the seg fault is called parse

550
00:19:58,240 --> 00:19:59,919
authentication header

551
00:19:59,919 --> 00:20:02,080
so we did some string and reversing to

552
00:20:02,080 --> 00:20:03,039
figure out

553
00:20:03,039 --> 00:20:05,360
where this guy was and it turns out it

554
00:20:05,360 --> 00:20:06,720
lives in a file called

555
00:20:06,720 --> 00:20:11,600
lib amp protocol rtsp.so.1

556
00:20:11,600 --> 00:20:14,799
so we popped that file into guidra we

557
00:20:14,799 --> 00:20:16,559
started reversing to see what exactly

558
00:20:16,559 --> 00:20:17,280
was happening

559
00:20:17,280 --> 00:20:18,640
under the cover so we could figure out

560
00:20:18,640 --> 00:20:21,840
how we could exploit this thing

561
00:20:22,240 --> 00:20:24,960
so this is the giger output um it didn't

562
00:20:24,960 --> 00:20:26,799
quite nail it

563
00:20:26,799 --> 00:20:29,600
you tried ghidra it's funny ida actually

564
00:20:29,600 --> 00:20:32,880
failed it parsing this properly too

565
00:20:32,880 --> 00:20:34,159
but you'll notice it's missing a

566
00:20:34,159 --> 00:20:36,720
parameter after the parameter

567
00:20:36,720 --> 00:20:38,320
there should be value which also gets

568
00:20:38,320 --> 00:20:40,080
passed to s scan f but

569
00:20:40,080 --> 00:20:42,720
minus that nuance the important piece is

570
00:20:42,720 --> 00:20:43,760
that hey

571
00:20:43,760 --> 00:20:46,240
lipman protocol rtsp is calling parts

572
00:20:46,240 --> 00:20:48,400
authentication header which calls scan

573
00:20:48,400 --> 00:20:51,679
f scanf is

574
00:20:51,679 --> 00:20:54,240
taking user input parameter and copying

575
00:20:54,240 --> 00:20:56,080
it into requester and not checking

576
00:20:56,080 --> 00:20:56,799
lengths

577
00:20:56,799 --> 00:20:59,039
which is a no no so this is our buffer

578
00:20:59,039 --> 00:21:01,679
overflow that we're seeing

579
00:21:01,679 --> 00:21:04,159
so we were stoked so it was like oh okay

580
00:21:04,159 --> 00:21:06,240
we have an scanf over overflow it's like

581
00:21:06,240 --> 00:21:08,720
time to start crafting an exploit

582
00:21:08,720 --> 00:21:11,919
um so that was our next step

583
00:21:11,919 --> 00:21:13,360
so what do we need to do to craft the

584
00:21:13,360 --> 00:21:15,280
exploit like when you find a buffer

585
00:21:15,280 --> 00:21:16,559
overflow in the wild like

586
00:21:16,559 --> 00:21:18,080
you need to figure out a few things

587
00:21:18,080 --> 00:21:19,760
right so

588
00:21:19,760 --> 00:21:20,960
the things that we need to figure out

589
00:21:20,960 --> 00:21:22,640
was what was going on internally on the

590
00:21:22,640 --> 00:21:24,080
furbo in terms of memory

591
00:21:24,080 --> 00:21:27,600
so there were a couple limitations

592
00:21:28,080 --> 00:21:30,000
um aslr is running on the fervo device

593
00:21:30,000 --> 00:21:31,600
by default

594
00:21:31,600 --> 00:21:34,960
so when the um furbo starts up and when

595
00:21:34,960 --> 00:21:37,039
processes start the address space is

596
00:21:37,039 --> 00:21:38,799
randomized so you're never going to know

597
00:21:38,799 --> 00:21:40,000
exactly where

598
00:21:40,000 --> 00:21:43,520
for instance lib c lives um

599
00:21:43,520 --> 00:21:45,520
that's that's going to vary every time

600
00:21:45,520 --> 00:21:47,760
processes up and start

601
00:21:47,760 --> 00:21:51,600
um the rtsp service itself we looked at

602
00:21:51,600 --> 00:21:54,960
and we found that it had in exit enabled

603
00:21:54,960 --> 00:21:56,640
so that means we weren't going to be

604
00:21:56,640 --> 00:21:58,559
able to execute in the stack space so

605
00:21:58,559 --> 00:22:00,880
nx stops you from being able to execute

606
00:22:00,880 --> 00:22:02,000
in stack space

607
00:22:02,000 --> 00:22:03,200
so we weren't going to be throwing byte

608
00:22:03,200 --> 00:22:05,200
code in and just executing there that

609
00:22:05,200 --> 00:22:06,640
wasn't going to be a possible path for

610
00:22:06,640 --> 00:22:09,280
this exploit

611
00:22:09,440 --> 00:22:12,720
but what was really cool was rtsp

612
00:22:12,720 --> 00:22:15,360
was not compiled with pie so that means

613
00:22:15,360 --> 00:22:17,200
we could theoretically wrap

614
00:22:17,200 --> 00:22:20,240
in the rtsb text section

615
00:22:20,240 --> 00:22:21,679
and we were like oh yeah this is going

616
00:22:21,679 --> 00:22:24,080
to be the path forward until we look at

617
00:22:24,080 --> 00:22:24,640
the proc

618
00:22:24,640 --> 00:22:28,159
maps and saw that the rtsp svc

619
00:22:28,159 --> 00:22:30,159
actually starts with null bytes so

620
00:22:30,159 --> 00:22:31,679
you'll notice the address location

621
00:22:31,679 --> 00:22:32,799
starts with null bytes

622
00:22:32,799 --> 00:22:34,720
now normally this wouldn't be an issue

623
00:22:34,720 --> 00:22:36,240
you can get around this in different

624
00:22:36,240 --> 00:22:37,679
ways

625
00:22:37,679 --> 00:22:40,320
but in our case because our crash is in

626
00:22:40,320 --> 00:22:40,880
scan

627
00:22:40,880 --> 00:22:43,919
f scanf is going to stop processing the

628
00:22:43,919 --> 00:22:44,799
second it sees

629
00:22:44,799 --> 00:22:46,080
no bytes it's going to be like oh okay

630
00:22:46,080 --> 00:22:48,000
your string's over we're done

631
00:22:48,000 --> 00:22:51,200
so we provided a exploit payload that

632
00:22:51,200 --> 00:22:53,120
contained null bytes

633
00:22:53,120 --> 00:22:56,400
to rob internally on the rtsp

634
00:22:56,400 --> 00:23:00,400
svc it would it wouldn't have worked so

635
00:23:00,400 --> 00:23:02,559
that means we had to look elsewhere um

636
00:23:02,559 --> 00:23:04,400
so that's just another limitation

637
00:23:04,400 --> 00:23:05,360
that we're not going to be able to

638
00:23:05,360 --> 00:23:07,600
directly drop in the rtsp

639
00:23:07,600 --> 00:23:13,280
rtsp service pie because vie

640
00:23:13,600 --> 00:23:15,039
sorry that was totally backwards we're

641
00:23:15,039 --> 00:23:17,840
not going to be able to wrap in the rtsp

642
00:23:17,840 --> 00:23:20,400
service file because of the null bytes

643
00:23:20,400 --> 00:23:22,960
even though pi is enabled

644
00:23:22,960 --> 00:23:24,799
um but it's not all bad we do have a

645
00:23:24,799 --> 00:23:26,720
couple benefits so like what's working

646
00:23:26,720 --> 00:23:28,240
for us when we talk about crafting this

647
00:23:28,240 --> 00:23:29,600
exploit

648
00:23:29,600 --> 00:23:33,280
uh we do have the watchdog script that's

649
00:23:33,280 --> 00:23:34,559
running on the rtsb

650
00:23:34,559 --> 00:23:37,919
service so when we crash it'll crash

651
00:23:37,919 --> 00:23:40,080
it'll it'll seg fault twice and then

652
00:23:40,080 --> 00:23:41,120
crash

653
00:23:41,120 --> 00:23:43,360
and then the watchdog will reset so it

654
00:23:43,360 --> 00:23:44,559
set faults twice

655
00:23:44,559 --> 00:23:48,480
resets seg faults twice resets

656
00:23:48,480 --> 00:23:50,320
which is super cool because that means

657
00:23:50,320 --> 00:23:51,919
we have a lot of tribes

658
00:23:51,919 --> 00:23:54,400
we can shoot out to the furbo and see if

659
00:23:54,400 --> 00:23:55,600
things are working

660
00:23:55,600 --> 00:23:59,200
uh while we're triaging the

661
00:23:59,200 --> 00:24:01,520
uh other big really cool thing is that

662
00:24:01,520 --> 00:24:03,440
it crashes twice like or i shouldn't say

663
00:24:03,440 --> 00:24:03,840
crowd

664
00:24:03,840 --> 00:24:06,480
it's segfaults twice um so there are two

665
00:24:06,480 --> 00:24:07,919
seg faults

666
00:24:07,919 --> 00:24:10,000
so that gives us two opportunities to

667
00:24:10,000 --> 00:24:12,080
potentially introduce these payloads

668
00:24:12,080 --> 00:24:13,919
um when we talk about robbing in this

669
00:24:13,919 --> 00:24:16,320
section so those are kind of the pros

670
00:24:16,320 --> 00:24:18,559
and cons that we have going for us so we

671
00:24:18,559 --> 00:24:20,000
have this extra ability

672
00:24:20,000 --> 00:24:21,679
but we also have some limitations when

673
00:24:21,679 --> 00:24:23,120
it comes to memory

674
00:24:23,120 --> 00:24:24,640
um so it's time to dive a little bit

675
00:24:24,640 --> 00:24:26,159
deeper

676
00:24:26,159 --> 00:24:28,240
the next thing we looked at was instead

677
00:24:28,240 --> 00:24:30,000
of just providing 500 a's

678
00:24:30,000 --> 00:24:32,720
in the username we provided a cyclic

679
00:24:32,720 --> 00:24:34,799
pattern

680
00:24:34,799 --> 00:24:37,600
um so what the cyclic pattern does is it

681
00:24:37,600 --> 00:24:38,720
allows you to start looking at the

682
00:24:38,720 --> 00:24:40,400
offsets

683
00:24:40,400 --> 00:24:42,480
of where you're going to be inserting

684
00:24:42,480 --> 00:24:44,000
values into your payload that you're

685
00:24:44,000 --> 00:24:46,080
sending into your buffer overflow

686
00:24:46,080 --> 00:24:48,640
so these cyclic patterns what they tell

687
00:24:48,640 --> 00:24:51,200
us as you can see from more jeff output

688
00:24:51,200 --> 00:24:54,720
from 80 from gdb is we can see that we

689
00:24:54,720 --> 00:24:55,840
have control

690
00:24:55,840 --> 00:24:58,559
of these registers and now we know the

691
00:24:58,559 --> 00:25:00,080
offsets at which these registers are

692
00:25:00,080 --> 00:25:01,440
going to be located

693
00:25:01,440 --> 00:25:04,799
so instead of sending ae4a if we want to

694
00:25:04,799 --> 00:25:06,640
populate register 4 we'll send it with

695
00:25:06,640 --> 00:25:08,480
whatever value or address we want

696
00:25:08,480 --> 00:25:11,600
register for to point to

697
00:25:11,600 --> 00:25:14,240
really important to note too that is

698
00:25:14,240 --> 00:25:15,919
with the jeff output we saw that the

699
00:25:15,919 --> 00:25:17,440
stack pointer gets blown away

700
00:25:17,440 --> 00:25:19,679
at offset 168 as well as the program

701
00:25:19,679 --> 00:25:22,320
counter at offset 164.

702
00:25:22,320 --> 00:25:26,080
so we have full control of stack pointer

703
00:25:26,400 --> 00:25:28,320
program counter and uh all those

704
00:25:28,320 --> 00:25:29,760
registers

705
00:25:29,760 --> 00:25:31,360
um and if you ever need to generate

706
00:25:31,360 --> 00:25:33,760
these cyclic strings uh just as a note

707
00:25:33,760 --> 00:25:35,440
there's a lot of tools on github you can

708
00:25:35,440 --> 00:25:35,919
find

709
00:25:35,919 --> 00:25:37,840
and then also metasploit has it built in

710
00:25:37,840 --> 00:25:39,279
and then jeff has

711
00:25:39,279 --> 00:25:41,120
gdb jeff has the ability to generate

712
00:25:41,120 --> 00:25:43,120
these as well

713
00:25:43,120 --> 00:25:45,600
um so now it comes to crafting the

714
00:25:45,600 --> 00:25:46,240
exploit

715
00:25:46,240 --> 00:25:48,320
we think about the memory limitations

716
00:25:48,320 --> 00:25:49,440
that we have

717
00:25:49,440 --> 00:25:52,960
uh we cannot um

718
00:25:52,960 --> 00:25:56,240
we cannot rob internally on rtsp svc

719
00:25:56,240 --> 00:25:59,440
but we can rop on lib c or something

720
00:25:59,440 --> 00:26:00,240
like that

721
00:26:00,240 --> 00:26:02,640
now aslr was enabled so that means

722
00:26:02,640 --> 00:26:04,080
accessing libc isn't really

723
00:26:04,080 --> 00:26:05,200
straightforward

724
00:26:05,200 --> 00:26:08,320
so for our first poc we just wanted to

725
00:26:08,320 --> 00:26:09,919
prove that we could get rce on this

726
00:26:09,919 --> 00:26:10,480
device

727
00:26:10,480 --> 00:26:12,640
so we disabled aslr so we went onto the

728
00:26:12,640 --> 00:26:14,720
furbo device and disabled aslr

729
00:26:14,720 --> 00:26:17,120
to make our lives a little bit easier

730
00:26:17,120 --> 00:26:20,959
for for finding our drop gadgets

731
00:26:22,400 --> 00:26:25,600
so now that we had aslr disabled

732
00:26:25,600 --> 00:26:28,000
and we knew the base address of lib c

733
00:26:28,000 --> 00:26:31,679
which turned out to be 76 d5 2000

734
00:26:31,679 --> 00:26:33,360
um we started looking for some gadgets

735
00:26:33,360 --> 00:26:34,640
to be able to place things in the

736
00:26:34,640 --> 00:26:36,559
registers we controlled

737
00:26:36,559 --> 00:26:39,440
um so that we could get execution now

738
00:26:39,440 --> 00:26:40,720
our path

739
00:26:40,720 --> 00:26:44,000
on this we used two gadgets

740
00:26:44,000 --> 00:26:46,000
with a goal of essentially executing

741
00:26:46,000 --> 00:26:48,480
system located in lip c

742
00:26:48,480 --> 00:26:52,159
so system requires your r0 parameter

743
00:26:52,159 --> 00:26:56,000
to contain the execution payload

744
00:26:56,000 --> 00:26:57,919
so system will call whatever's in your

745
00:26:57,919 --> 00:26:59,039
r0

746
00:26:59,039 --> 00:27:03,039
so you can see from our two gadgets here

747
00:27:03,279 --> 00:27:04,880
that well so the first thing i should

748
00:27:04,880 --> 00:27:07,279
mention we do is we load the address of

749
00:27:07,279 --> 00:27:08,799
system into r8

750
00:27:08,799 --> 00:27:11,600
so in our payload we put system address

751
00:27:11,600 --> 00:27:12,720
into r8

752
00:27:12,720 --> 00:27:14,400
and then our first gadget what it's

753
00:27:14,400 --> 00:27:16,400
going to do is it's going to load r8

754
00:27:16,400 --> 00:27:18,320
into r3 and then it's going to

755
00:27:18,320 --> 00:27:22,000
blx or branch load execute into

756
00:27:22,000 --> 00:27:25,360
r4 so you can see we put

757
00:27:25,360 --> 00:27:28,559
that drop gadget at pc so

758
00:27:28,559 --> 00:27:31,440
pc is going to load r8 into r3 and then

759
00:27:31,440 --> 00:27:33,200
jump to r4

760
00:27:33,200 --> 00:27:36,559
um not jump branch

761
00:27:36,559 --> 00:27:39,200
and then we put our payload to execute

762
00:27:39,200 --> 00:27:40,880
at the stack pointer and we found

763
00:27:40,880 --> 00:27:42,240
another gadget

764
00:27:42,240 --> 00:27:44,960
that moves the stack pointer to r0 and

765
00:27:44,960 --> 00:27:45,600
then branch

766
00:27:45,600 --> 00:27:49,120
load executes to r3

767
00:27:49,120 --> 00:27:50,480
so what that looks like when we talk

768
00:27:50,480 --> 00:27:52,159
about the flow of this

769
00:27:52,159 --> 00:27:56,320
x of this exploit is system gets loaded

770
00:27:56,320 --> 00:27:59,919
pc points to system and then

771
00:27:59,919 --> 00:28:03,760
executes r4 r4 will load our payload

772
00:28:03,760 --> 00:28:04,880
into r0

773
00:28:04,880 --> 00:28:07,440
so now what we have after this exploit

774
00:28:07,440 --> 00:28:08,559
has ran

775
00:28:08,559 --> 00:28:11,600
in this overflow is we have system ready

776
00:28:11,600 --> 00:28:12,159
to be

777
00:28:12,159 --> 00:28:13,840
being pointed by the pro the program

778
00:28:13,840 --> 00:28:16,000
counter and then we have r0

779
00:28:16,000 --> 00:28:19,440
filled with our payload

780
00:28:19,440 --> 00:28:21,200
so we wanted to prove it we wanted to

781
00:28:21,200 --> 00:28:23,120
show that it worked so we wrote a quick

782
00:28:23,120 --> 00:28:24,960
python poc

783
00:28:24,960 --> 00:28:28,240
we can see the gen payload function here

784
00:28:28,240 --> 00:28:31,919
so we load our uh various addresses

785
00:28:31,919 --> 00:28:34,399
um for the rob gadgets and then we load

786
00:28:34,399 --> 00:28:34,960
our

787
00:28:34,960 --> 00:28:37,200
payload here you can see it's user bin

788
00:28:37,200 --> 00:28:38,880
curl shell.sh

789
00:28:38,880 --> 00:28:41,520
and then it executes bin it executes

790
00:28:41,520 --> 00:28:44,159
shell.hth directly with ben bash

791
00:28:44,159 --> 00:28:48,080
so the design of our server our psc

792
00:28:48,080 --> 00:28:50,960
starts a local python server so it

793
00:28:50,960 --> 00:28:54,320
creates this local python server

794
00:28:54,399 --> 00:28:58,000
the exploit itself will then execute on

795
00:28:58,000 --> 00:28:58,799
the furbo

796
00:28:58,799 --> 00:29:02,159
the furbo will pull shell.sh

797
00:29:02,159 --> 00:29:04,240
from this server and then it will

798
00:29:04,240 --> 00:29:06,159
execute shell.sh

799
00:29:06,159 --> 00:29:09,200
so shell.sh what it does is pretty

800
00:29:09,200 --> 00:29:09,760
simple

801
00:29:09,760 --> 00:29:12,080
is it just w gets another file on this

802
00:29:12,080 --> 00:29:13,720
server called

803
00:29:13,720 --> 00:29:16,799
shell.service and shell.service gets

804
00:29:16,799 --> 00:29:17,600
pulled over to

805
00:29:17,600 --> 00:29:20,840
turbo and then we utilize in the

806
00:29:20,840 --> 00:29:22,399
shell.service.sh file

807
00:29:22,399 --> 00:29:25,279
we utilize systemd to enable that

808
00:29:25,279 --> 00:29:26,000
service file

809
00:29:26,000 --> 00:29:28,600
and start running it and what that

810
00:29:28,600 --> 00:29:31,039
shell.service file does

811
00:29:31,039 --> 00:29:35,440
um is start a netcap bind shell

812
00:29:35,440 --> 00:29:38,720
so the reason we did all this is because

813
00:29:38,720 --> 00:29:41,760
when you execute this poc when it wants

814
00:29:41,760 --> 00:29:43,600
the first time you get a persistent

815
00:29:43,600 --> 00:29:44,960
shell

816
00:29:44,960 --> 00:29:46,559
which is really really rad it's always

817
00:29:46,559 --> 00:29:48,159
nice to have that

818
00:29:48,159 --> 00:29:50,720
so here's a here's an example of it

819
00:29:50,720 --> 00:29:52,960
running this is just a quick

820
00:29:52,960 --> 00:29:55,039
rundown so we can see we run our python

821
00:29:55,039 --> 00:29:56,640
exploit up here

822
00:29:56,640 --> 00:29:59,679
um we can see it sets the shell.sh and

823
00:29:59,679 --> 00:30:01,440
cell service file with some parameters

824
00:30:01,440 --> 00:30:03,440
that we want to set

825
00:30:03,440 --> 00:30:06,480
it then starts the python server it

826
00:30:06,480 --> 00:30:08,320
starts attacking the furbo

827
00:30:08,320 --> 00:30:10,799
it checks for an open port it notes the

828
00:30:10,799 --> 00:30:13,120
rtsp services running

829
00:30:13,120 --> 00:30:15,600
and then because aslr is stabled we're

830
00:30:15,600 --> 00:30:16,399
going to try

831
00:30:16,399 --> 00:30:20,640
at this address which we know is lib c

832
00:30:20,640 --> 00:30:23,520
once we once it executes uh we're gonna

833
00:30:23,520 --> 00:30:25,679
check again to see if our netcap bind

834
00:30:25,679 --> 00:30:26,559
shell is open

835
00:30:26,559 --> 00:30:29,440
and sure enough it is uh we have our id

836
00:30:29,440 --> 00:30:30,000
here

837
00:30:30,000 --> 00:30:32,640
of zero and this is thanks by the way to

838
00:30:32,640 --> 00:30:36,799
uh pwntools interactive shell on python

839
00:30:36,799 --> 00:30:38,559
that it starts running right away into

840
00:30:38,559 --> 00:30:40,159
our shell and furbo i highly recommend

841
00:30:40,159 --> 00:30:41,919
using phone tools

842
00:30:41,919 --> 00:30:43,039
interactive shell it's really really

843
00:30:43,039 --> 00:30:45,279
cool

844
00:30:45,440 --> 00:30:48,399
so um that's really rad we got a shell

845
00:30:48,399 --> 00:30:51,039
we got a rc on the furbo

846
00:30:51,039 --> 00:30:54,000
um awesome right we're done no we're not

847
00:30:54,000 --> 00:30:54,480
done

848
00:30:54,480 --> 00:30:57,519
uh we disabled aslr so like what does

849
00:30:57,519 --> 00:30:59,039
that mean right realistically

850
00:30:59,039 --> 00:31:01,279
it's like if we stopped here it means

851
00:31:01,279 --> 00:31:02,960
you would have to go to a furbo crack it

852
00:31:02,960 --> 00:31:04,960
apart um

853
00:31:04,960 --> 00:31:07,200
find the serial lines tap them get root

854
00:31:07,200 --> 00:31:09,120
access add your username

855
00:31:09,120 --> 00:31:12,159
you know like like run your exploit and

856
00:31:12,159 --> 00:31:12,799
then

857
00:31:12,799 --> 00:31:13,919
it looks like we don't want to do that

858
00:31:13,919 --> 00:31:15,519
it's not realistic we want to be able to

859
00:31:15,519 --> 00:31:17,279
enable aslr so we can

860
00:31:17,279 --> 00:31:19,279
attack the furbo directly you can just

861
00:31:19,279 --> 00:31:21,679
join the network that the furbo is on

862
00:31:21,679 --> 00:31:24,799
adjacent network access and you can hit

863
00:31:24,799 --> 00:31:26,960
hit the furbo and and own it that's what

864
00:31:26,960 --> 00:31:29,039
we want to do so how do we bypass

865
00:31:29,039 --> 00:31:32,080
aslr how do we get around this as we

866
00:31:32,080 --> 00:31:33,600
mentioned earlier because

867
00:31:33,600 --> 00:31:36,080
pie is enabled but the null bytes issue

868
00:31:36,080 --> 00:31:37,120
prevents us from

869
00:31:37,120 --> 00:31:40,399
robbing internally it means we can't

870
00:31:40,399 --> 00:31:44,480
drop in our tsp svc and it's a bummer

871
00:31:44,480 --> 00:31:46,559
because if we could it means we could

872
00:31:46,559 --> 00:31:49,519
bypass asr really simply but we can't

873
00:31:49,519 --> 00:31:52,240
um we also as a note we looked for

874
00:31:52,240 --> 00:31:53,760
additional leaks to try and find if we

875
00:31:53,760 --> 00:31:54,320
could

876
00:31:54,320 --> 00:31:56,640
figure out where the libc address was so

877
00:31:56,640 --> 00:31:58,799
that we could really easily do this

878
00:31:58,799 --> 00:32:00,720
and bypass aslr but there weren't leaks

879
00:32:00,720 --> 00:32:02,559
available we reversed a few

880
00:32:02,559 --> 00:32:05,120
other binaries to see if it was possible

881
00:32:05,120 --> 00:32:06,640
they were pretty solid

882
00:32:06,640 --> 00:32:08,320
not saying it's impossible but we didn't

883
00:32:08,320 --> 00:32:09,679
do it um

884
00:32:09,679 --> 00:32:11,840
so how did we get around this our

885
00:32:11,840 --> 00:32:12,720
technique was

886
00:32:12,720 --> 00:32:16,159
called we coined brute forcing aslr

887
00:32:16,159 --> 00:32:18,640
so what brute forcing aslr looks like to

888
00:32:18,640 --> 00:32:20,000
us

889
00:32:20,000 --> 00:32:23,600
is retrying

890
00:32:23,600 --> 00:32:25,440
the same address over and over and over

891
00:32:25,440 --> 00:32:28,399
again when rtsp service restarts

892
00:32:28,399 --> 00:32:32,000
because what that means is when the

893
00:32:32,000 --> 00:32:33,840
service restarts the libc address is

894
00:32:33,840 --> 00:32:36,158
going to be

895
00:32:36,240 --> 00:32:39,039
that'll give the option to try and run

896
00:32:39,039 --> 00:32:40,880
our exploit successfully

897
00:32:40,880 --> 00:32:44,159
so we know the chunk of memory where the

898
00:32:44,159 --> 00:32:46,000
libsy address is going to exist

899
00:32:46,000 --> 00:32:48,399
only has 12 bits changing which means

900
00:32:48,399 --> 00:32:50,640
there's a one in 4096 chance that we're

901
00:32:50,640 --> 00:32:52,320
going to actually

902
00:32:52,320 --> 00:32:55,919
like hit the correct lib c address

903
00:32:55,919 --> 00:32:59,360
so we hard coded our poc with two libsy

904
00:32:59,360 --> 00:33:01,120
addresses

905
00:33:01,120 --> 00:33:04,399
to be able to see if we could hit

906
00:33:05,279 --> 00:33:08,080
hit that just guess the libsy address

907
00:33:08,080 --> 00:33:10,640
when the rtsp service restarts

908
00:33:10,640 --> 00:33:13,679
so how do we choose those addresses um

909
00:33:13,679 --> 00:33:15,840
we took a pretty large sample set of

910
00:33:15,840 --> 00:33:17,200
libsy on

911
00:33:17,200 --> 00:33:18,960
the ferbo device after restarting it

912
00:33:18,960 --> 00:33:22,799
many times and we looked at

913
00:33:22,880 --> 00:33:24,720
what what that space looked like so you

914
00:33:24,720 --> 00:33:26,399
can see here we start at 76c

915
00:33:26,399 --> 00:33:28,640
we end at 76d and you can see it's

916
00:33:28,640 --> 00:33:30,880
pretty evenly distributed

917
00:33:30,880 --> 00:33:33,519
um so we just chose two addresses within

918
00:33:33,519 --> 00:33:34,960
that range

919
00:33:34,960 --> 00:33:38,159
uh and we have our exploit

920
00:33:38,159 --> 00:33:42,159
able to run now so let's take a look

921
00:33:42,159 --> 00:33:44,159
here's the running exploit with aslr

922
00:33:44,159 --> 00:33:46,159
enabled so you can see

923
00:33:46,159 --> 00:33:48,799
it's trying to connect it tries

924
00:33:48,799 --> 00:33:51,679
different base addresses

925
00:33:51,679 --> 00:33:53,200
over and over and over again because

926
00:33:53,200 --> 00:33:54,960
it's just restarting the rtsp service

927
00:33:54,960 --> 00:33:56,960
and on this particular occasion

928
00:33:56,960 --> 00:34:00,480
we hit lib c properly and our id

929
00:34:00,480 --> 00:34:03,679
is zero we're root uh look

930
00:34:03,679 --> 00:34:08,559
else we have access super cool so

931
00:34:15,119 --> 00:34:18,879
sorry testing uh we have fully

932
00:34:18,879 --> 00:34:20,079
functioning

933
00:34:20,079 --> 00:34:23,440
uh our rc poc with aslr enabled on the

934
00:34:23,440 --> 00:34:25,119
furbo device

935
00:34:25,119 --> 00:34:26,879
it was rad we're done we were finished

936
00:34:26,879 --> 00:34:28,239
we were stoked it was over

937
00:34:28,239 --> 00:34:32,159
it was complete it was a journey um

938
00:34:32,159 --> 00:34:35,280
which is really fun but we had tested

939
00:34:35,280 --> 00:34:36,560
over and over again to see how this

940
00:34:36,560 --> 00:34:39,119
thing was running um

941
00:34:39,119 --> 00:34:42,159
kind of see what type of timing we got

942
00:34:42,159 --> 00:34:44,000
on our aslr

943
00:34:44,000 --> 00:34:46,159
bypass and it varied pretty greatly

944
00:34:46,159 --> 00:34:47,918
anywhere from four minutes to four plus

945
00:34:47,918 --> 00:34:50,560
hours and in the worst case the rtsp

946
00:34:50,560 --> 00:34:52,000
service would hang

947
00:34:52,000 --> 00:34:53,918
and if the rtsp service would hang which

948
00:34:53,918 --> 00:34:56,079
you wouldn't notice right away

949
00:34:56,079 --> 00:34:58,000
that would require a hard reset of the

950
00:34:58,000 --> 00:34:59,520
furbo so those are some of the

951
00:34:59,520 --> 00:35:01,760
limitations

952
00:35:01,760 --> 00:35:04,560
of this poc but it still allows you to

953
00:35:04,560 --> 00:35:06,560
rce on adjacent network which is super

954
00:35:06,560 --> 00:35:07,920
super cool

955
00:35:07,920 --> 00:35:11,280
um so we're we're stoked

956
00:35:11,280 --> 00:35:12,720
so we wanted to look at the internals of

957
00:35:12,720 --> 00:35:14,240
the furbo to see what we could do now

958
00:35:14,240 --> 00:35:16,400
that we have rce on it

959
00:35:16,400 --> 00:35:20,000
um these are some of the local furbo

960
00:35:20,000 --> 00:35:23,040
scripts uh that the furbo that the tonal

961
00:35:23,040 --> 00:35:24,000
fun team wrote so

962
00:35:24,000 --> 00:35:27,200
fb is furbo um and then here's a few of

963
00:35:27,200 --> 00:35:28,160
the things that they wrote so you can

964
00:35:28,160 --> 00:35:29,599
see they wrote fba play

965
00:35:29,599 --> 00:35:31,359
if you're familiar with a play it just

966
00:35:31,359 --> 00:35:32,960
plays audio

967
00:35:32,960 --> 00:35:34,800
so they wrote a wrapper they also have a

968
00:35:34,800 --> 00:35:37,680
record which will record audio

969
00:35:37,680 --> 00:35:39,839
they have a knight which will toggle

970
00:35:39,839 --> 00:35:42,800
night vision on the furbo device

971
00:35:42,800 --> 00:35:44,800
there's also snap which will take a

972
00:35:44,800 --> 00:35:46,320
picture and

973
00:35:46,320 --> 00:35:49,119
then there is burning which does a bunch

974
00:35:49,119 --> 00:35:51,359
of burn-in tests that include

975
00:35:51,359 --> 00:35:54,880
um uh changing the led colors

976
00:35:54,880 --> 00:35:56,800
and testing that the treat shooter is

977
00:35:56,800 --> 00:35:59,839
working properly

978
00:36:01,040 --> 00:36:02,560
another directory found really

979
00:36:02,560 --> 00:36:04,240
interesting uh was

980
00:36:04,240 --> 00:36:06,880
dev adc so you'll notice some of the

981
00:36:06,880 --> 00:36:08,960
file names in wvdc are like

982
00:36:08,960 --> 00:36:12,400
adc are pretty juicy um

983
00:36:12,400 --> 00:36:16,400
things like furbo underscore ap dot info

984
00:36:16,400 --> 00:36:19,440
or furbo 2

985
00:36:19,440 --> 00:36:22,720
underscore rtsp.password so those sound

986
00:36:22,720 --> 00:36:24,839
really good those would be nice to know

987
00:36:24,839 --> 00:36:26,160
right

988
00:36:26,160 --> 00:36:27,760
so we took a look at those files and

989
00:36:27,760 --> 00:36:29,080
sure enough the ap

990
00:36:29,080 --> 00:36:30,240
[Music]

991
00:36:30,240 --> 00:36:32,720
file has your wi-fi credentials and if

992
00:36:32,720 --> 00:36:34,400
you change your wi-fi

993
00:36:34,400 --> 00:36:35,839
credentials the backup will actually

994
00:36:35,839 --> 00:36:37,359
have your old credentials so it'll have

995
00:36:37,359 --> 00:36:38,320
two

996
00:36:38,320 --> 00:36:41,359
two network credentials on there um and

997
00:36:41,359 --> 00:36:43,359
then the rtsp password contains the

998
00:36:43,359 --> 00:36:46,000
password for the rtfp stream

999
00:36:46,000 --> 00:36:49,280
so if you wanted to view the video um

1000
00:36:49,280 --> 00:36:51,440
on rtsp it is protected by username and

1001
00:36:51,440 --> 00:36:52,800
password but

1002
00:36:52,800 --> 00:36:57,119
if you use the buffer overflow rce

1003
00:36:57,119 --> 00:36:59,119
and then go into this directory and look

1004
00:36:59,119 --> 00:37:02,079
at the password it will allow you to

1005
00:37:02,079 --> 00:37:05,200
view the rtsp stream so here we just

1006
00:37:05,200 --> 00:37:07,440
have a picture of opening vlc

1007
00:37:07,440 --> 00:37:10,240
and providing the password found in dev

1008
00:37:10,240 --> 00:37:11,040
adc

1009
00:37:11,040 --> 00:37:14,160
furbo rtsp.password

1010
00:37:14,160 --> 00:37:15,839
and you can see again our seventh member

1011
00:37:15,839 --> 00:37:17,359
is very upset

1012
00:37:17,359 --> 00:37:20,480
looking outside

1013
00:37:20,839 --> 00:37:24,320
hacked um so we have a demo video

1014
00:37:24,320 --> 00:37:27,119
um of the device running here um of our

1015
00:37:27,119 --> 00:37:29,200
script running fully completely with

1016
00:37:29,200 --> 00:37:32,400
um all the bells and whistles the only

1017
00:37:32,400 --> 00:37:35,040
thing we did do was disable aslr

1018
00:37:35,040 --> 00:37:37,839
so here we go

1019
00:37:42,240 --> 00:37:44,479
um

1020
00:37:46,880 --> 00:37:49,280
furbo is pound led turns red shoots

1021
00:37:49,280 --> 00:37:50,400
treats

1022
00:37:50,400 --> 00:37:53,200
so we got we loaded our script to do all

1023
00:37:53,200 --> 00:37:55,439
that

1024
00:37:57,599 --> 00:37:59,200
and then it pops you into a root shell

1025
00:37:59,200 --> 00:38:00,880
once it's done so that's just what we

1026
00:38:00,880 --> 00:38:01,760
wanted to do

1027
00:38:01,760 --> 00:38:04,160
so now we have root access this is just

1028
00:38:04,160 --> 00:38:05,839
for demonstration but you can see we can

1029
00:38:05,839 --> 00:38:06,800
turn the leds

1030
00:38:06,800 --> 00:38:10,240
blue you can manually call those

1031
00:38:10,240 --> 00:38:15,439
furbo functions okay

1032
00:38:16,400 --> 00:38:19,839
to toss the treat

1033
00:38:22,400 --> 00:38:25,040
um you can also change the led again so

1034
00:38:25,040 --> 00:38:26,800
we change it to yellow or you can change

1035
00:38:26,800 --> 00:38:29,040
it to purple

1036
00:38:29,040 --> 00:38:30,960
there's other colors as well such as

1037
00:38:30,960 --> 00:38:32,160
green

1038
00:38:32,160 --> 00:38:34,480
i think white's on there too but you

1039
00:38:34,480 --> 00:38:36,000
have a root shell

1040
00:38:36,000 --> 00:38:39,760
super rad stoked that we got it

1041
00:38:41,280 --> 00:38:43,440
so now we talk about disclosure we had

1042
00:38:43,440 --> 00:38:44,640
all this what are we going to do about

1043
00:38:44,640 --> 00:38:45,119
it

1044
00:38:45,119 --> 00:38:47,920
so we actually originally found this poc

1045
00:38:47,920 --> 00:38:49,680
just over a year ago

1046
00:38:49,680 --> 00:38:51,200
or this vulnerability i should say and

1047
00:38:51,200 --> 00:38:53,200
we developed the poc in august of last

1048
00:38:53,200 --> 00:38:53,839
year

1049
00:38:53,839 --> 00:38:55,760
so we had our first working version of

1050
00:38:55,760 --> 00:38:58,640
this poc in august

1051
00:38:58,640 --> 00:39:00,160
that's when we started the disclosure

1052
00:39:00,160 --> 00:39:02,720
process with tomofun

1053
00:39:02,720 --> 00:39:04,320
um and the furbo security team so we

1054
00:39:04,320 --> 00:39:06,160
talked with them through

1055
00:39:06,160 --> 00:39:09,440
uh mid-august uh time frame

1056
00:39:09,440 --> 00:39:10,960
and they elevated this issue to

1057
00:39:10,960 --> 00:39:13,839
ambarella who they worked with

1058
00:39:13,839 --> 00:39:17,280
through that time frame that's when we

1059
00:39:17,280 --> 00:39:19,520
applied for our cve

1060
00:39:19,520 --> 00:39:21,119
we reached out again to furbo to let

1061
00:39:21,119 --> 00:39:22,560
them know that the cve was going to be

1062
00:39:22,560 --> 00:39:23,920
going public

1063
00:39:23,920 --> 00:39:25,599
we reached out a few more times in

1064
00:39:25,599 --> 00:39:28,320
september and october to let them know

1065
00:39:28,320 --> 00:39:29,760
we let some time pass mostly we got

1066
00:39:29,760 --> 00:39:31,520
really busy with work but then we got

1067
00:39:31,520 --> 00:39:32,000
back

1068
00:39:32,000 --> 00:39:34,880
to verifying that our poc was still

1069
00:39:34,880 --> 00:39:37,520
working or not maybe they patched it

1070
00:39:37,520 --> 00:39:39,119
we hadn't heard back from them so we

1071
00:39:39,119 --> 00:39:40,560
bought another furbo

1072
00:39:40,560 --> 00:39:43,440
and when we bought that furbo it turns

1073
00:39:43,440 --> 00:39:44,720
out it was a new model

1074
00:39:44,720 --> 00:39:47,359
so the old model as you can see on the

1075
00:39:47,359 --> 00:39:49,200
left picture here is the furbo 2 and the

1076
00:39:49,200 --> 00:39:50,640
new model is the furbo

1077
00:39:50,640 --> 00:39:55,200
2.5 t it's like the new terminator

1078
00:39:55,200 --> 00:39:57,760
so just when we thought we were done and

1079
00:39:57,760 --> 00:39:58,960
it was finished and we were like rad

1080
00:39:58,960 --> 00:40:00,560
let's go do a talk on this we're like oh

1081
00:40:00,560 --> 00:40:01,040
okay

1082
00:40:01,040 --> 00:40:03,920
we got to do some new testing um so we

1083
00:40:03,920 --> 00:40:05,599
purchased a new furbo

1084
00:40:05,599 --> 00:40:09,119
uh saw the new revision we

1085
00:40:09,119 --> 00:40:10,880
noticed a bunch of hardware changes

1086
00:40:10,880 --> 00:40:12,720
right off the bat so

1087
00:40:12,720 --> 00:40:15,040
that was that was concerning that our

1088
00:40:15,040 --> 00:40:16,640
poc might not work

1089
00:40:16,640 --> 00:40:19,599
um and then we saw when we um accessed

1090
00:40:19,599 --> 00:40:20,640
the thing that the software was

1091
00:40:20,640 --> 00:40:21,599
different as well it was running

1092
00:40:21,599 --> 00:40:23,280
different firmware

1093
00:40:23,280 --> 00:40:26,000
um so then we ran our plc we were hoping

1094
00:40:26,000 --> 00:40:27,280
we're like okay let's do this

1095
00:40:27,280 --> 00:40:30,720
ran the poc uh it crashed

1096
00:40:30,720 --> 00:40:34,400
like normal but it didn't restart

1097
00:40:34,400 --> 00:40:37,280
so it turns out on the frobo 2.5 t they

1098
00:40:37,280 --> 00:40:38,079
mitigated the

1099
00:40:38,079 --> 00:40:41,440
issue of the buffer overflow and the

1100
00:40:41,440 --> 00:40:42,800
rtsp service

1101
00:40:42,800 --> 00:40:45,520
by disabling the watchdog so no longer

1102
00:40:45,520 --> 00:40:47,839
will the rtsp service crash

1103
00:40:47,839 --> 00:40:51,359
and restart it will just crash

1104
00:40:51,359 --> 00:40:52,720
and you'll have to physically reboot the

1105
00:40:52,720 --> 00:40:56,079
furbo to to use this exploit

1106
00:40:56,079 --> 00:40:59,040
successfully patched

1107
00:40:59,839 --> 00:41:01,359
so we took a closer look at what else we

1108
00:41:01,359 --> 00:41:02,800
could do on this device because we had

1109
00:41:02,800 --> 00:41:03,119
it

1110
00:41:03,119 --> 00:41:06,160
and we noticed telnet and hdp were open

1111
00:41:06,160 --> 00:41:08,400
on our initial and map scan so the rtsp

1112
00:41:08,400 --> 00:41:10,160
service was there but so were telnet

1113
00:41:10,160 --> 00:41:13,599
and a server on 80 and 443.

1114
00:41:13,599 --> 00:41:15,280
so we were really curious was like okay

1115
00:41:15,280 --> 00:41:18,079
that's going to be fun to investigate

1116
00:41:18,079 --> 00:41:19,839
the telnet stuff not so much because it

1117
00:41:19,839 --> 00:41:22,240
uses the password for the furbo itself

1118
00:41:22,240 --> 00:41:24,640
um that's calculated and we weren't

1119
00:41:24,640 --> 00:41:26,000
quite interested in uh

1120
00:41:26,000 --> 00:41:29,599
in looking at that but the http server

1121
00:41:29,599 --> 00:41:30,880
that we looked at used digest

1122
00:41:30,880 --> 00:41:32,240
authentication

1123
00:41:32,240 --> 00:41:34,079
um so we were curious we're like okay

1124
00:41:34,079 --> 00:41:35,440
what's going on with this

1125
00:41:35,440 --> 00:41:38,480
back to the new art show um

1126
00:41:38,480 --> 00:41:40,319
so once we got access to the uart shell

1127
00:41:40,319 --> 00:41:42,079
on the furbo 2.5 t

1128
00:41:42,079 --> 00:41:43,520
we poked around a little bit looking at

1129
00:41:43,520 --> 00:41:45,599
what this server was doing

1130
00:41:45,599 --> 00:41:48,880
and it turns out it's a light tpd server

1131
00:41:48,880 --> 00:41:51,920
very frequently called lighty um

1132
00:41:51,920 --> 00:41:54,560
it's an embedded uh http server that's

1133
00:41:54,560 --> 00:41:55,760
using a lot of

1134
00:41:55,760 --> 00:41:58,880
iot devices that are passed around

1135
00:41:58,880 --> 00:42:02,079
it's it's it's pretty solid but in this

1136
00:42:02,079 --> 00:42:03,359
case

1137
00:42:03,359 --> 00:42:06,640
it was using digest authentication um

1138
00:42:06,640 --> 00:42:08,560
so we looked for the digest file and we

1139
00:42:08,560 --> 00:42:10,400
found in

1140
00:42:10,400 --> 00:42:14,319
etsy etc

1141
00:42:14,319 --> 00:42:17,920
light tpd forward slash webpass.txt

1142
00:42:17,920 --> 00:42:18,800
contains

1143
00:42:18,800 --> 00:42:20,720
the digest which had the username

1144
00:42:20,720 --> 00:42:23,119
password as well as the hash

1145
00:42:23,119 --> 00:42:26,000
um so we cracked the hash got the

1146
00:42:26,000 --> 00:42:27,680
username and password

1147
00:42:27,680 --> 00:42:31,520
and then um also notice that the realms

1148
00:42:31,520 --> 00:42:34,000
were different so in that same directory

1149
00:42:34,000 --> 00:42:37,839
in the etsy lite tpd directory

1150
00:42:37,839 --> 00:42:41,839
etc lite p3d directory

1151
00:42:42,440 --> 00:42:45,040
litetpd.conf contained the realm

1152
00:42:45,040 --> 00:42:47,280
information so when we initially

1153
00:42:47,280 --> 00:42:49,440
submitted this request

1154
00:42:49,440 --> 00:42:51,200
it failed so we cracked it we knew what

1155
00:42:51,200 --> 00:42:52,960
the username and password was but it was

1156
00:42:52,960 --> 00:42:53,440
failing

1157
00:42:53,440 --> 00:42:55,440
so we were like what's going on so it

1158
00:42:55,440 --> 00:42:58,319
turned out it was a real mismatch

1159
00:42:58,319 --> 00:43:00,400
in this authentication if you don't have

1160
00:43:00,400 --> 00:43:01,839
the proper realm it doesn't matter if

1161
00:43:01,839 --> 00:43:03,040
you have the username and password

1162
00:43:03,040 --> 00:43:03,599
correct

1163
00:43:03,599 --> 00:43:05,760
you have to have the realm correct so

1164
00:43:05,760 --> 00:43:06,880
how do we

1165
00:43:06,880 --> 00:43:09,040
how do we change the realm well it turns

1166
00:43:09,040 --> 00:43:10,960
out you can modify the realm

1167
00:43:10,960 --> 00:43:14,160
on the response from the http

1168
00:43:14,160 --> 00:43:17,040
from that server so this is a little bit

1169
00:43:17,040 --> 00:43:18,720
wonky but essentially what happens is

1170
00:43:18,720 --> 00:43:20,560
you send a username password you get

1171
00:43:20,560 --> 00:43:23,200
a response back that has a realm it has

1172
00:43:23,200 --> 00:43:24,800
a nonce it has a couple other bits of

1173
00:43:24,800 --> 00:43:26,079
info that are utilized

1174
00:43:26,079 --> 00:43:29,119
to calculate the digest authentication

1175
00:43:29,119 --> 00:43:32,240
um so if you modify that on the response

1176
00:43:32,240 --> 00:43:33,680
coming back to you

1177
00:43:33,680 --> 00:43:36,640
and you get the realm correct then

1178
00:43:36,640 --> 00:43:38,640
you'll be able to successfully log in so

1179
00:43:38,640 --> 00:43:41,280
we spoof the realm we calculated the

1180
00:43:41,280 --> 00:43:42,880
digest authentication header

1181
00:43:42,880 --> 00:43:44,880
and the server accepted it so as you can

1182
00:43:44,880 --> 00:43:48,160
see in the bottom right picture

1183
00:43:48,240 --> 00:43:51,599
we have our login successfully to the

1184
00:43:51,599 --> 00:43:53,680
ambryla smart ldt

1185
00:43:53,680 --> 00:43:56,560
which has some lens calculation it's

1186
00:43:56,560 --> 00:43:58,079
it's part of amborella's getup

1187
00:43:58,079 --> 00:43:59,520
but essentially we have access to the

1188
00:43:59,520 --> 00:44:01,200
ambarilla server now

1189
00:44:01,200 --> 00:44:04,560
um so what is this ambrilla smart ldc

1190
00:44:04,560 --> 00:44:06,800
we wanted to answer the question of what

1191
00:44:06,800 --> 00:44:08,319
is it who cares

1192
00:44:08,319 --> 00:44:11,440
so we started reversing the

1193
00:44:11,440 --> 00:44:14,720
smart ldc executable to see what was

1194
00:44:14,720 --> 00:44:17,040
going on

1195
00:44:17,040 --> 00:44:20,359
it calls ldc.cgi so

1196
00:44:20,359 --> 00:44:23,359
ldc.cgi was our main

1197
00:44:23,359 --> 00:44:26,078
point of interest

1198
00:44:26,400 --> 00:44:29,599
so we popped lsdc cgi into geidra and

1199
00:44:29,599 --> 00:44:32,160
started reversing

1200
00:44:32,160 --> 00:44:35,280
right away we found an s in printf okay

1201
00:44:35,280 --> 00:44:37,280
you know the n we're doing all right

1202
00:44:37,280 --> 00:44:38,800
however they are taking a bunch of

1203
00:44:38,800 --> 00:44:40,720
parameter values

1204
00:44:40,720 --> 00:44:42,880
right okay we're taking a bunch of

1205
00:44:42,880 --> 00:44:44,400
parameter values and they're popping it

1206
00:44:44,400 --> 00:44:45,760
into command

1207
00:44:45,760 --> 00:44:47,680
and then you can see in command they're

1208
00:44:47,680 --> 00:44:49,440
just calling system on command a little

1209
00:44:49,440 --> 00:44:50,240
bit lower

1210
00:44:50,240 --> 00:44:52,319
so that is a prime candidate for command

1211
00:44:52,319 --> 00:44:54,720
injection which is what we did

1212
00:44:54,720 --> 00:44:57,599
so we wrote a quick script the same day

1213
00:44:57,599 --> 00:44:59,920
to do some command injection

1214
00:44:59,920 --> 00:45:02,000
on that server once we had the

1215
00:45:02,000 --> 00:45:03,520
authentication calculations correct and

1216
00:45:03,520 --> 00:45:04,560
the realm proper

1217
00:45:04,560 --> 00:45:06,319
and you'll notice boom we get popped

1218
00:45:06,319 --> 00:45:07,599
into a shell so

1219
00:45:07,599 --> 00:45:09,839
hey they made a data one and opened

1220
00:45:09,839 --> 00:45:10,720
another

1221
00:45:10,720 --> 00:45:14,079
um so we got shell reran id

1222
00:45:14,079 --> 00:45:15,760
you'll notice the id is zero so they're

1223
00:45:15,760 --> 00:45:17,200
actually running their server as root

1224
00:45:17,200 --> 00:45:18,400
which is

1225
00:45:18,400 --> 00:45:20,960
always a nice to find so now we have

1226
00:45:20,960 --> 00:45:21,839
root access

1227
00:45:21,839 --> 00:45:24,880
by simply executing this command

1228
00:45:24,880 --> 00:45:26,319
injection

1229
00:45:26,319 --> 00:45:27,920
so disclosure we actually just found

1230
00:45:27,920 --> 00:45:30,880
this more recently

1231
00:45:31,040 --> 00:45:32,720
when we were retesting our buffer

1232
00:45:32,720 --> 00:45:34,480
overflow rce

1233
00:45:34,480 --> 00:45:37,599
um so we discovered it in march uh we

1234
00:45:37,599 --> 00:45:39,680
uh we created the poc the same day like

1235
00:45:39,680 --> 00:45:41,280
we mentioned we reached out already to

1236
00:45:41,280 --> 00:45:42,319
amarilla

1237
00:45:42,319 --> 00:45:44,640
directly through linkedin we found some

1238
00:45:44,640 --> 00:45:46,319
emails online of some prominent people

1239
00:45:46,319 --> 00:45:47,440
that

1240
00:45:47,440 --> 00:45:52,800
too and then we also

1241
00:45:53,119 --> 00:45:54,800
tried to use their web form it turned

1242
00:45:54,800 --> 00:45:56,480
out to be broken at the time but just

1243
00:45:56,480 --> 00:45:57,520
more recently

1244
00:45:57,520 --> 00:46:00,160
last month it was fixed we submitted

1245
00:46:00,160 --> 00:46:01,359
more

1246
00:46:01,359 --> 00:46:03,200
information there to them we also

1247
00:46:03,200 --> 00:46:04,960
reached out to tomo fund

1248
00:46:04,960 --> 00:46:06,560
uh and then we applied for a cve and

1249
00:46:06,560 --> 00:46:08,240
that's in the works right now

1250
00:46:08,240 --> 00:46:10,319
and then we're giving a talk on it which

1251
00:46:10,319 --> 00:46:11,440
is today

1252
00:46:11,440 --> 00:46:14,800
and i should have filled that in um

1253
00:46:14,800 --> 00:46:16,400
all that being said we're still looking

1254
00:46:16,400 --> 00:46:18,000
to get in contact with people at amril

1255
00:46:18,000 --> 00:46:19,680
or tomofun if there's humans you know

1256
00:46:19,680 --> 00:46:20,640
that work there

1257
00:46:20,640 --> 00:46:22,640
we'd love to work with them to patch up

1258
00:46:22,640 --> 00:46:24,480
these vulnerabilities

1259
00:46:24,480 --> 00:46:26,319
so feel free to pass any information our

1260
00:46:26,319 --> 00:46:29,440
way if you guys have that contact

1261
00:46:29,440 --> 00:46:30,720
so why does it matter what does it all

1262
00:46:30,720 --> 00:46:34,480
mean what have we done here

1263
00:46:34,480 --> 00:46:37,110
um essentially we have two

1264
00:46:37,110 --> 00:46:39,200
[Music]

1265
00:46:39,200 --> 00:46:41,200
exploits here one buffer overflow rce

1266
00:46:41,200 --> 00:46:42,880
and one command injection

1267
00:46:42,880 --> 00:46:44,800
that allows us to gain access to the

1268
00:46:44,800 --> 00:46:46,560
furbo devices when you're on an adjacent

1269
00:46:46,560 --> 00:46:47,280
network

1270
00:46:47,280 --> 00:46:49,520
so what does that let you do it lets you

1271
00:46:49,520 --> 00:46:52,560
remotely watch video

1272
00:46:53,280 --> 00:46:55,920
so you can pop open that rtsp password

1273
00:46:55,920 --> 00:46:56,400
file

1274
00:46:56,400 --> 00:46:59,920
and view the video stream

1275
00:46:59,920 --> 00:47:02,160
providing the username and password you

1276
00:47:02,160 --> 00:47:03,359
can listen to the microphone

1277
00:47:03,359 --> 00:47:06,480
so this is in someone's place you can

1278
00:47:06,480 --> 00:47:07,920
start listening to what's going on

1279
00:47:07,920 --> 00:47:09,680
whether that's the dog or conversations

1280
00:47:09,680 --> 00:47:10,000
that people

1281
00:47:10,000 --> 00:47:12,560
are having you can play custom audio or

1282
00:47:12,560 --> 00:47:13,200
sounds

1283
00:47:13,200 --> 00:47:15,359
so you can either entertain their dog or

1284
00:47:15,359 --> 00:47:16,960
freak out the human

1285
00:47:16,960 --> 00:47:19,359
you can also shoot all the treats that's

1286
00:47:19,359 --> 00:47:20,240
always really fun

1287
00:47:20,240 --> 00:47:23,599
if you just run the treat toss

1288
00:47:23,599 --> 00:47:26,480
shell script and pass it you know 500

1289
00:47:26,480 --> 00:47:28,800
it'll just shoot treats forever

1290
00:47:28,800 --> 00:47:30,640
um one important thing a little less

1291
00:47:30,640 --> 00:47:32,319
silly is you can steal the wi-fi

1292
00:47:32,319 --> 00:47:33,839
credentials both of the current network

1293
00:47:33,839 --> 00:47:35,280
and the pass network

1294
00:47:35,280 --> 00:47:38,240
um that's a big deal you know you can

1295
00:47:38,240 --> 00:47:38,720
connect

1296
00:47:38,720 --> 00:47:40,400
you can own the furbo and you can access

1297
00:47:40,400 --> 00:47:41,839
the network via the furbo

1298
00:47:41,839 --> 00:47:43,920
but it also has those creds so then you

1299
00:47:43,920 --> 00:47:46,079
can directly access that network

1300
00:47:46,079 --> 00:47:49,200
uh if you're if you're in that area um

1301
00:47:49,200 --> 00:47:50,400
and that's no fun because that can

1302
00:47:50,400 --> 00:47:52,240
establish a foothold that can be the

1303
00:47:52,240 --> 00:47:53,520
beginning of a lot of attacks

1304
00:47:53,520 --> 00:47:55,920
so kind of the weakest leak argument

1305
00:47:55,920 --> 00:47:57,119
right

1306
00:47:57,119 --> 00:47:58,880
um the last thing you can do with the

1307
00:47:58,880 --> 00:48:00,720
furbo is bricket the device cost

1308
00:48:00,720 --> 00:48:03,520
100 to 200 so it would be kind of an

1309
00:48:03,520 --> 00:48:04,880
inconvenience if you did break the

1310
00:48:04,880 --> 00:48:06,079
device

1311
00:48:06,079 --> 00:48:08,880
uh you know rmrf start whatever no big

1312
00:48:08,880 --> 00:48:11,040
deal

1313
00:48:11,040 --> 00:48:14,240
so the poc is available for the buffer

1314
00:48:14,240 --> 00:48:15,680
overflow on our github

1315
00:48:15,680 --> 00:48:17,680
that's github.com forward somerset dash

1316
00:48:17,680 --> 00:48:20,000
recon forward slash furbo dash

1317
00:48:20,000 --> 00:48:23,599
research if you want to access it

1318
00:48:23,920 --> 00:48:25,520
you can execute that and you can do the

1319
00:48:25,520 --> 00:48:27,040
things that we listed

1320
00:48:27,040 --> 00:48:28,720
if you want to reach out feel free to

1321
00:48:28,720 --> 00:48:30,720
hit contact at summersetrecon.com

1322
00:48:30,720 --> 00:48:32,160
we'd love to talk whatever you're

1323
00:48:32,160 --> 00:48:34,480
interested in you can also check out our

1324
00:48:34,480 --> 00:48:35,599
website

1325
00:48:35,599 --> 00:48:37,040
we have our blog post there and we have

1326
00:48:37,040 --> 00:48:38,480
contact information a little bit more

1327
00:48:38,480 --> 00:48:40,240
about what we do

1328
00:48:40,240 --> 00:48:42,960
and thank you very much that's all i got

1329
00:48:42,960 --> 00:48:44,480
i will pass on

1330
00:48:44,480 --> 00:48:47,599
questions to my future self now

1331
00:48:47,599 --> 00:48:53,760
thank you future self wherever you are

