1
00:00:04,720 --> 00:00:06,720
hello and welcome to

2
00:00:06,720 --> 00:00:09,280
wmi stole your cat this is a practical

3
00:00:09,280 --> 00:00:11,040
look at wmi defense

4
00:00:11,040 --> 00:00:14,480
and analysis the goal of this talk is to

5
00:00:14,480 --> 00:00:16,000
bridge the gap of defenders to

6
00:00:16,000 --> 00:00:18,480
understand better how wmi is used and

7
00:00:18,480 --> 00:00:19,279
misused

8
00:00:19,279 --> 00:00:21,039
and hopefully provide new avenues for

9
00:00:21,039 --> 00:00:23,199
defenders to better understand

10
00:00:23,199 --> 00:00:24,800
what is going on with their environment

11
00:00:24,800 --> 00:00:26,880
with tools that are already existing

12
00:00:26,880 --> 00:00:30,160
aka wmi there's a lot of acronyms that

13
00:00:30,160 --> 00:00:33,440
in this talk so i'm sorry in advance but

14
00:00:33,440 --> 00:00:35,920
hopefully all of them will get explained

15
00:00:35,920 --> 00:00:37,840
and the first one's probably what is wmi

16
00:00:37,840 --> 00:00:40,640
but we're not quite there yet

17
00:00:40,640 --> 00:00:42,879
so there are also a lot of cats in this

18
00:00:42,879 --> 00:00:44,559
video no cats were harmed in the making

19
00:00:44,559 --> 00:00:45,920
of this video but

20
00:00:45,920 --> 00:00:48,399
it should be a fun video i would say

21
00:00:48,399 --> 00:00:50,000
talk and i probably will say talk

22
00:00:50,000 --> 00:00:51,840
because normally this is an in-person

23
00:00:51,840 --> 00:00:52,719
event

24
00:00:52,719 --> 00:00:56,000
but as far as that goes we're not there

25
00:00:56,000 --> 00:00:56,559
right now

26
00:00:56,559 --> 00:00:59,840
this is all virtual and we're going to

27
00:00:59,840 --> 00:01:00,160
be

28
00:01:00,160 --> 00:01:03,680
just video recording

29
00:01:03,680 --> 00:01:07,600
so who am i i am sometimes spicy

30
00:01:07,600 --> 00:01:09,680
but by day an instant response

31
00:01:09,680 --> 00:01:11,360
consultant

32
00:01:11,360 --> 00:01:14,720
and this allows me perspective into some

33
00:01:14,720 --> 00:01:15,840
of the very interesting

34
00:01:15,840 --> 00:01:18,720
challenges that wmi poses for defenders

35
00:01:18,720 --> 00:01:19,920
and defenders have

36
00:01:19,920 --> 00:01:22,000
this particular challenge of identifying

37
00:01:22,000 --> 00:01:23,759
and reducing risk

38
00:01:23,759 --> 00:01:27,759
when the system itself just has this

39
00:01:27,759 --> 00:01:29,520
wmi just sitting there it's it's a

40
00:01:29,520 --> 00:01:31,119
capability it's a feature built into

41
00:01:31,119 --> 00:01:32,320
windows

42
00:01:32,320 --> 00:01:35,439
much like ssh on linux but

43
00:01:35,439 --> 00:01:37,759
all you need is valid credentials in

44
00:01:37,759 --> 00:01:39,520
windows to use it and it's it's not

45
00:01:39,520 --> 00:01:41,200
really known you if you're running an

46
00:01:41,200 --> 00:01:43,920
ssh server you usually know it's there

47
00:01:43,920 --> 00:01:47,280
not so much with wmi um i am also a

48
00:01:47,280 --> 00:01:48,799
perpetual tinkerer

49
00:01:48,799 --> 00:01:50,960
i work with all sorts of things you may

50
00:01:50,960 --> 00:01:52,960
have seen my talks on voting machines

51
00:01:52,960 --> 00:01:56,320
and atms those are just two things that

52
00:01:56,320 --> 00:01:58,000
i most recently tinkered with but if it

53
00:01:58,000 --> 00:02:00,240
runs an embedded os or system

54
00:02:00,240 --> 00:02:02,719
i'm there i'm working on it i'm also a

55
00:02:02,719 --> 00:02:04,320
perpetual volunteer i work

56
00:02:04,320 --> 00:02:05,680
with the collegiate pen testing

57
00:02:05,680 --> 00:02:07,520
competition and the collegiate cyber

58
00:02:07,520 --> 00:02:09,440
defense competition

59
00:02:09,440 --> 00:02:12,160
uh both of those are very fun attack and

60
00:02:12,160 --> 00:02:14,239
defense and allow me to see

61
00:02:14,239 --> 00:02:17,280
a very different world than day job

62
00:02:17,280 --> 00:02:20,400
you know a day job allows me to see

63
00:02:20,400 --> 00:02:22,959
so the agenda today is we're going to be

64
00:02:22,959 --> 00:02:25,440
going through the background of wmi

65
00:02:25,440 --> 00:02:27,680
or mi so that's windows management

66
00:02:27,680 --> 00:02:28,879
instrumentation

67
00:02:28,879 --> 00:02:31,680
and management instrumentation and how

68
00:02:31,680 --> 00:02:33,680
it basically functions it

69
00:02:33,680 --> 00:02:36,800
understanding the defensive measures

70
00:02:36,800 --> 00:02:38,319
that we can put into place

71
00:02:38,319 --> 00:02:41,120
as well as understanding how to use

72
00:02:41,120 --> 00:02:43,120
windows management instrumentation as

73
00:02:43,120 --> 00:02:46,000
a defensive tool as a forensics

74
00:02:46,000 --> 00:02:47,840
collection tool

75
00:02:47,840 --> 00:02:50,319
and finally we'll be exploring how the

76
00:02:50,319 --> 00:02:51,519
offensive tools

77
00:02:51,519 --> 00:02:54,160
and techniques look and work one of the

78
00:02:54,160 --> 00:02:55,840
most interesting things about this is

79
00:02:55,840 --> 00:02:56,560
that

80
00:02:56,560 --> 00:02:59,040
wmi in the examples we're going to be

81
00:02:59,040 --> 00:02:59,840
giving

82
00:02:59,840 --> 00:03:02,480
may look very offensive it may look like

83
00:03:02,480 --> 00:03:04,400
something malicious but in reality

84
00:03:04,400 --> 00:03:06,080
we are actually going to be working with

85
00:03:06,080 --> 00:03:07,680
it in a way that can be

86
00:03:07,680 --> 00:03:10,800
both malicious and good so this should

87
00:03:10,800 --> 00:03:13,920
be a lot of fun

88
00:03:14,400 --> 00:03:17,040
and it goes without saying there is a

89
00:03:17,040 --> 00:03:17,599
lot of

90
00:03:17,599 --> 00:03:21,840
previous work on this back in 2015

91
00:03:21,840 --> 00:03:23,840
fireeye came through and just dropped a

92
00:03:23,840 --> 00:03:26,239
ton of data on wmi previously had been

93
00:03:26,239 --> 00:03:28,080
kind of obscure unless you were a

94
00:03:28,080 --> 00:03:31,280
really good system admin but

95
00:03:31,280 --> 00:03:33,920
i was just presented at black and said

96
00:03:33,920 --> 00:03:35,040
here is this problem

97
00:03:35,040 --> 00:03:37,200
and i i really have to give credit to

98
00:03:37,200 --> 00:03:38,080
them because

99
00:03:38,080 --> 00:03:40,159
the work they've done and continue to do

100
00:03:40,159 --> 00:03:42,159
they dropped one more recently

101
00:03:42,159 --> 00:03:43,760
um literally it's called they came to

102
00:03:43,760 --> 00:03:45,680
drop f f

103
00:03:45,680 --> 00:03:49,519
but um they've done a lot of work and so

104
00:03:49,519 --> 00:03:51,280
if you haven't seen that go check it out

105
00:03:51,280 --> 00:03:53,680
it's some very good research and it's

106
00:03:53,680 --> 00:03:56,080
you know something good to build upon

107
00:03:56,080 --> 00:03:57,599
and it's been about five years so

108
00:03:57,599 --> 00:04:00,239
it's time for another talk this is wmi

109
00:04:00,239 --> 00:04:00,799
and

110
00:04:00,799 --> 00:04:02,239
this is going to be going over some of

111
00:04:02,239 --> 00:04:03,760
the common problems we're seeing today

112
00:04:03,760 --> 00:04:07,359
not five years ago but right now

113
00:04:08,640 --> 00:04:12,799
now you may be wondering what is wmi

114
00:04:12,799 --> 00:04:15,519
ah that's a good question uh well it's a

115
00:04:15,519 --> 00:04:17,440
modern component built into windows that

116
00:04:17,440 --> 00:04:17,839
much

117
00:04:17,839 --> 00:04:21,358
is probably clear it uses a pseudo sql

118
00:04:21,358 --> 00:04:22,000
statement

119
00:04:22,000 --> 00:04:25,520
in much microsoft and windows fashion it

120
00:04:25,520 --> 00:04:28,720
it's like sql but not quite you have a

121
00:04:28,720 --> 00:04:30,320
where statement and you have

122
00:04:30,320 --> 00:04:33,520
like and you have comparison operators

123
00:04:33,520 --> 00:04:34,160
but

124
00:04:34,160 --> 00:04:36,320
they just take it and changed it just

125
00:04:36,320 --> 00:04:39,600
enough to make things annoying

126
00:04:39,600 --> 00:04:41,360
it's divided into namespaces and

127
00:04:41,360 --> 00:04:43,040
namespaces are essentially

128
00:04:43,040 --> 00:04:45,280
objects and you can have sub-objects

129
00:04:45,280 --> 00:04:47,600
within objects

130
00:04:47,600 --> 00:04:50,960
the namespaces provide a

131
00:04:50,960 --> 00:04:54,479
way to access information centrally from

132
00:04:54,479 --> 00:04:57,120
monitoring management configuration but

133
00:04:57,120 --> 00:04:58,160
each of those can be

134
00:04:58,160 --> 00:05:00,320
have sub-objects which can have similar

135
00:05:00,320 --> 00:05:01,759
capabilities

136
00:05:01,759 --> 00:05:04,800
the this allows people to add components

137
00:05:04,800 --> 00:05:05,759
later

138
00:05:05,759 --> 00:05:07,680
as well as very structured and rigid

139
00:05:07,680 --> 00:05:09,520
formatting you can be looking at

140
00:05:09,520 --> 00:05:11,440
some specific areas and not have to

141
00:05:11,440 --> 00:05:12,960
worry about duplicates or

142
00:05:12,960 --> 00:05:16,400
the wrong information getting set so wmi

143
00:05:16,400 --> 00:05:17,759
is very powerful

144
00:05:17,759 --> 00:05:22,240
some few examples are process

145
00:05:22,240 --> 00:05:25,039
monitoring scheduled tasks services cpu

146
00:05:25,039 --> 00:05:26,000
memory

147
00:05:26,000 --> 00:05:29,440
antivirus info battery info ups

148
00:05:29,440 --> 00:05:32,800
info configuration settings

149
00:05:32,800 --> 00:05:36,400
installed programs and this is all based

150
00:05:36,400 --> 00:05:37,120
off of the

151
00:05:37,120 --> 00:05:40,000
in the sim model or the common inter

152
00:05:40,000 --> 00:05:41,919
information model i may say interface

153
00:05:41,919 --> 00:05:43,680
during this just because

154
00:05:43,680 --> 00:05:46,639
everything else is is just confusing

155
00:05:46,639 --> 00:05:47,919
with acronyms but

156
00:05:47,919 --> 00:05:50,000
this is the basis of an open standard

157
00:05:50,000 --> 00:05:51,680
microsoft is pushing towards

158
00:05:51,680 --> 00:05:55,199
sim versus wmi so

159
00:05:55,199 --> 00:05:56,479
a lot of the tools are similar but

160
00:05:56,479 --> 00:05:58,000
they're just different enough that it

161
00:05:58,000 --> 00:05:59,840
causes a problem

162
00:05:59,840 --> 00:06:01,520
and you may be wondering well when did

163
00:06:01,520 --> 00:06:03,600
wmi exist i'm sure i haven't seen it

164
00:06:03,600 --> 00:06:05,199
before windows 7.

165
00:06:05,199 --> 00:06:07,520
well the answer is that it's been in

166
00:06:07,520 --> 00:06:09,919
existence since about windows 2000

167
00:06:09,919 --> 00:06:12,479
it was available as part of nt4 as an

168
00:06:12,479 --> 00:06:14,000
optional component but

169
00:06:14,000 --> 00:06:15,280
it was optional so we're not really

170
00:06:15,280 --> 00:06:18,000
counting that and about at the same time

171
00:06:18,000 --> 00:06:19,680
when microsoft said hey

172
00:06:19,680 --> 00:06:21,680
powershell is going to be the future i

173
00:06:21,680 --> 00:06:23,759
believe that was around 2006 2007.

174
00:06:23,759 --> 00:06:25,600
shortly after that they said hey we're

175
00:06:25,600 --> 00:06:27,440
going to integrate it and

176
00:06:27,440 --> 00:06:30,479
they made wmi a very tight-knit

177
00:06:30,479 --> 00:06:32,319
component in powershell it

178
00:06:32,319 --> 00:06:33,600
the basis of a lot of powershell

179
00:06:33,600 --> 00:06:36,240
commands are wmi queries

180
00:06:36,240 --> 00:06:38,800
and similarly powershell has direct

181
00:06:38,800 --> 00:06:39,360
access

182
00:06:39,360 --> 00:06:41,759
into wmi there's a lot of capability to

183
00:06:41,759 --> 00:06:43,520
query register set

184
00:06:43,520 --> 00:06:46,840
more so than the old command which is

185
00:06:46,840 --> 00:06:48,080
wmic

186
00:06:48,080 --> 00:06:51,120
so as a more modern versions of windows

187
00:06:51,120 --> 00:06:51,599
the

188
00:06:51,599 --> 00:06:55,120
2015 era of of windows

189
00:06:55,120 --> 00:06:57,039
or newer there's just under 15 name

190
00:06:57,039 --> 00:06:59,039
spaces that are built in

191
00:06:59,039 --> 00:07:00,639
and in reality there's probably many

192
00:07:00,639 --> 00:07:02,960
many more than that because it is nested

193
00:07:02,960 --> 00:07:06,479
it it depends on where things are at

194
00:07:06,479 --> 00:07:09,039
now the the i put theoretical but the

195
00:07:09,039 --> 00:07:11,039
first practical exploit of this that

196
00:07:11,039 --> 00:07:12,960
really gained a lot of notoriety is

197
00:07:12,960 --> 00:07:15,599
stuxnet i'm sure there's others

198
00:07:15,599 --> 00:07:18,479
more modern variant of that is wanna

199
00:07:18,479 --> 00:07:18,960
minor

200
00:07:18,960 --> 00:07:20,800
which has some very creative ways of

201
00:07:20,800 --> 00:07:22,560
doing persistence it's not just

202
00:07:22,560 --> 00:07:24,319
the standard persistence that you see

203
00:07:24,319 --> 00:07:26,319
it's a lot bigger and

204
00:07:26,319 --> 00:07:29,199
more annoying um but i'm sure you don't

205
00:07:29,199 --> 00:07:30,800
want to just have a history lesson here

206
00:07:30,800 --> 00:07:32,319
it gets kind of boring

207
00:07:32,319 --> 00:07:34,000
so what we're going to be doing is

208
00:07:34,000 --> 00:07:35,840
getting started with actually working

209
00:07:35,840 --> 00:07:37,520
with wmi

210
00:07:37,520 --> 00:07:40,560
so wmi essentially

211
00:07:40,560 --> 00:07:44,000
has two components in it

212
00:07:44,000 --> 00:07:47,599
the first one is

213
00:07:48,160 --> 00:07:51,199
internally when you when you're using

214
00:07:51,199 --> 00:07:53,520
windows components like task list or so

215
00:07:53,520 --> 00:07:54,800
you know get processed and things like

216
00:07:54,800 --> 00:07:56,800
that underlying component is actually

217
00:07:56,800 --> 00:07:59,520
coring wmi to get that result back

218
00:07:59,520 --> 00:08:01,680
and then you have the legacy components

219
00:08:01,680 --> 00:08:03,440
which is wmic

220
00:08:03,440 --> 00:08:08,479
um and wmak actually is using

221
00:08:08,479 --> 00:08:11,759
is is a very powerful tool it has in my

222
00:08:11,759 --> 00:08:13,199
opinion a very

223
00:08:13,199 --> 00:08:15,520
easy to use and look at interface for

224
00:08:15,520 --> 00:08:16,240
coring

225
00:08:16,240 --> 00:08:18,160
getting information and help but you can

226
00:08:18,160 --> 00:08:19,599
compare on the left and right

227
00:08:19,599 --> 00:08:22,720
task list is on the right and w

228
00:08:22,720 --> 00:08:24,639
listing processes on the left and you

229
00:08:24,639 --> 00:08:26,000
can see that a lot of the same

230
00:08:26,000 --> 00:08:29,680
information is pulled out of that and

231
00:08:29,680 --> 00:08:31,440
from that information it gets prettified

232
00:08:31,440 --> 00:08:33,360
in in task list but it's essentially the

233
00:08:33,360 --> 00:08:34,399
same information

234
00:08:34,399 --> 00:08:36,880
and if you br if you turn off wmi you

235
00:08:36,880 --> 00:08:38,799
break test list

236
00:08:38,799 --> 00:08:41,279
the other legacy component is vbscript

237
00:08:41,279 --> 00:08:41,919
and

238
00:08:41,919 --> 00:08:45,680
it's still technically supported but the

239
00:08:45,680 --> 00:08:47,920
way it they're pushing towards more

240
00:08:47,920 --> 00:08:48,880
powershell based

241
00:08:48,880 --> 00:08:50,399
you know capabilities configuring and

242
00:08:50,399 --> 00:08:52,160
running stuff

243
00:08:52,160 --> 00:08:55,040
so that's get wmi and get sim that

244
00:08:55,040 --> 00:08:56,480
common model again

245
00:08:56,480 --> 00:08:58,480
and then finally there's the wmi

246
00:08:58,480 --> 00:08:59,519
explorer tool

247
00:08:59,519 --> 00:09:02,800
which is a third party tool but it is

248
00:09:02,800 --> 00:09:06,560
very very nice to use from this tool

249
00:09:06,560 --> 00:09:08,640
you can see the namespaces sub-name

250
00:09:08,640 --> 00:09:10,000
spaces and queries that

251
00:09:10,000 --> 00:09:13,519
allow a operator to

252
00:09:13,519 --> 00:09:15,200
see a lot of the information that's

253
00:09:15,200 --> 00:09:16,880
there and

254
00:09:16,880 --> 00:09:18,800
from this you can see the actual nesting

255
00:09:18,800 --> 00:09:20,320
that's taking place

256
00:09:20,320 --> 00:09:23,760
and you can see the path and all the

257
00:09:23,760 --> 00:09:25,200
descriptions and all this information

258
00:09:25,200 --> 00:09:27,040
that's built into wmi

259
00:09:27,040 --> 00:09:29,040
that allows you to do it and just from

260
00:09:29,040 --> 00:09:30,640
this interface you can see there's like

261
00:09:30,640 --> 00:09:31,120
the

262
00:09:31,120 --> 00:09:34,720
the common model like common sim log

263
00:09:34,720 --> 00:09:38,240
the privileged namespace groups

264
00:09:38,240 --> 00:09:39,839
and then below it you have actual

265
00:09:39,839 --> 00:09:42,080
security logs you have

266
00:09:42,080 --> 00:09:45,279
the sensors and it just keeps going on

267
00:09:45,279 --> 00:09:47,600
the default one is the root sim v2

268
00:09:47,600 --> 00:09:49,680
that's where the basis of a lot of

269
00:09:49,680 --> 00:09:52,000
the information is and below that is

270
00:09:52,000 --> 00:09:53,200
where you can

271
00:09:53,200 --> 00:09:54,720
actually query a lot of the actual

272
00:09:54,720 --> 00:09:58,640
additional capabilities that wmi has

273
00:09:58,640 --> 00:10:01,279
but you may be wondering how why is all

274
00:10:01,279 --> 00:10:02,240
this seam just so

275
00:10:02,240 --> 00:10:04,000
open like anyone can query these things

276
00:10:04,000 --> 00:10:06,320
you can just ask what processor list

277
00:10:06,320 --> 00:10:08,880
well the answer is yes and microsoft was

278
00:10:08,880 --> 00:10:10,480
like here you go

279
00:10:10,480 --> 00:10:12,240
a lot of the capabilities here and a lot

280
00:10:12,240 --> 00:10:13,760
of the precision mechanisms

281
00:10:13,760 --> 00:10:16,079
have been actually if you take a look at

282
00:10:16,079 --> 00:10:17,680
how they're built

283
00:10:17,680 --> 00:10:20,560
they're kind of bottled up a the

284
00:10:20,560 --> 00:10:21,440
malicious

285
00:10:21,440 --> 00:10:24,320
wmi is used very similarly to the way

286
00:10:24,320 --> 00:10:26,880
the official documentation uses it

287
00:10:26,880 --> 00:10:29,040
so if you take a look there's two area

288
00:10:29,040 --> 00:10:30,320
main areas that

289
00:10:30,320 --> 00:10:34,000
get misused talks about wmi get lifted

290
00:10:34,000 --> 00:10:37,279
and used as malicious and then the

291
00:10:37,279 --> 00:10:39,040
actual wmi documentation you're like

292
00:10:39,040 --> 00:10:40,560
sure documentation is going to get

293
00:10:40,560 --> 00:10:41,360
misused

294
00:10:41,360 --> 00:10:43,519
but literally microsoft provides the

295
00:10:43,519 --> 00:10:45,920
guidance directly on how to create a

296
00:10:45,920 --> 00:10:46,399
person's

297
00:10:46,399 --> 00:10:48,959
module and here's that screenshot this

298
00:10:48,959 --> 00:10:50,560
is from the microsoft website and it

299
00:10:50,560 --> 00:10:52,160
gives you a pretty good idea of what's

300
00:10:52,160 --> 00:10:53,519
going on

301
00:10:53,519 --> 00:10:56,640
now the the three main components for

302
00:10:56,640 --> 00:10:57,839
persistence that we're going to be

303
00:10:57,839 --> 00:10:59,680
seeing time and time again

304
00:10:59,680 --> 00:11:03,680
are the filter consumer bind

305
00:11:03,680 --> 00:11:06,640
and binding and each of these are

306
00:11:06,640 --> 00:11:07,920
different components to

307
00:11:07,920 --> 00:11:11,040
look up do a trigger and then

308
00:11:11,040 --> 00:11:14,480
put them together and it

309
00:11:14,480 --> 00:11:16,640
this is how essentially most person's

310
00:11:16,640 --> 00:11:18,959
done auto runs does have the ability to

311
00:11:18,959 --> 00:11:20,000
see these

312
00:11:20,000 --> 00:11:22,640
but as we keep saying wmi is nested so

313
00:11:22,640 --> 00:11:24,240
it you may not necessarily see

314
00:11:24,240 --> 00:11:26,800
all of these just because it's in this

315
00:11:26,800 --> 00:11:28,160
it doesn't have to necessarily be

316
00:11:28,160 --> 00:11:29,680
in the same subscription area that you

317
00:11:29,680 --> 00:11:32,399
would expect

318
00:11:32,399 --> 00:11:35,920
so why is wmi so powerful

319
00:11:35,920 --> 00:11:37,279
well as i was saying before it's

320
00:11:37,279 --> 00:11:40,079
essentially a

321
00:11:40,079 --> 00:11:43,519
the equivalent of ssh or proc depending

322
00:11:43,519 --> 00:11:44,959
on where you're looking at but

323
00:11:44,959 --> 00:11:48,640
proc isn't network exposed

324
00:11:48,640 --> 00:11:52,880
it by default the wmi is connected via

325
00:11:52,880 --> 00:11:54,000
the dcom

326
00:11:54,000 --> 00:11:56,079
ports which is three five and then

327
00:11:56,079 --> 00:11:58,000
you'll get a higher level port 1024

328
00:11:58,000 --> 00:11:59,279
through 65535

329
00:11:59,279 --> 00:12:01,519
depending on the version of windows the

330
00:12:01,519 --> 00:12:02,880
only limit on

331
00:12:02,880 --> 00:12:05,920
who can access this is if you have valid

332
00:12:05,920 --> 00:12:07,360
authentication

333
00:12:07,360 --> 00:12:09,040
if you don't have valid authentication

334
00:12:09,040 --> 00:12:10,959
you're out of luck but if you do

335
00:12:10,959 --> 00:12:13,519
and that can be anything from a network

336
00:12:13,519 --> 00:12:14,639
account to

337
00:12:14,639 --> 00:12:17,839
really anything you can get in

338
00:12:17,839 --> 00:12:20,320
dcom is basis of a lot of other

339
00:12:20,320 --> 00:12:22,079
capabilities if you're seeing 135 you're

340
00:12:22,079 --> 00:12:23,519
like ah that seems familiar

341
00:12:23,519 --> 00:12:24,880
yeah it's it's used for a lot of

342
00:12:24,880 --> 00:12:26,480
different things and just like those

343
00:12:26,480 --> 00:12:28,480
other capabilities

344
00:12:28,480 --> 00:12:32,000
dcom configuration dcom cnfg

345
00:12:32,000 --> 00:12:34,240
allows you to add or remove capabilities

346
00:12:34,240 --> 00:12:35,360
for uh

347
00:12:35,360 --> 00:12:37,519
wmi where you're setting it to listen on

348
00:12:37,519 --> 00:12:38,639
a specific report

349
00:12:38,639 --> 00:12:40,320
or port which it does have the

350
00:12:40,320 --> 00:12:42,800
capability two four one five eight

351
00:12:42,800 --> 00:12:46,240
but otherwise you're very limited on

352
00:12:46,240 --> 00:12:47,040
what

353
00:12:47,040 --> 00:12:50,160
and how to block wmi

354
00:12:50,160 --> 00:12:53,760
wmi and this is the dcom configuration

355
00:12:53,760 --> 00:12:55,440
where you can see you can add and remove

356
00:12:55,440 --> 00:12:56,800
permissions security

357
00:12:56,800 --> 00:12:58,160
groups and things like that on who can

358
00:12:58,160 --> 00:13:00,800
do what what it normally runs at

359
00:13:00,800 --> 00:13:04,000
and uh the default authentication level

360
00:13:04,000 --> 00:13:04,720
of who can

361
00:13:04,720 --> 00:13:08,160
do what with wmi

362
00:13:08,160 --> 00:13:11,839
we'll get back to that in a second but

363
00:13:11,839 --> 00:13:13,519
back to the communication of course

364
00:13:13,519 --> 00:13:14,959
microsoft was not done with the

365
00:13:14,959 --> 00:13:16,959
different acronyms you got wmi dcom

366
00:13:16,959 --> 00:13:19,920
sim well there's more there's the wbem

367
00:13:19,920 --> 00:13:21,839
the web-based management

368
00:13:21,839 --> 00:13:25,360
enterprise management which is how it's

369
00:13:25,360 --> 00:13:27,120
got to give microsoft actual credit to

370
00:13:27,120 --> 00:13:29,760
this one this is an actual open standard

371
00:13:29,760 --> 00:13:30,560
that's

372
00:13:30,560 --> 00:13:32,720
used across enterprise environments a

373
00:13:32,720 --> 00:13:34,399
home computer is not really going to use

374
00:13:34,399 --> 00:13:35,519
this too much but

375
00:13:35,519 --> 00:13:37,200
if you're in the enterprise and you have

376
00:13:37,200 --> 00:13:39,040
enterprise appliances and tools

377
00:13:39,040 --> 00:13:41,279
you probably will be seeing this and you

378
00:13:41,279 --> 00:13:43,279
probably actually use it

379
00:13:43,279 --> 00:13:45,680
the protocol is fully documented but

380
00:13:45,680 --> 00:13:46,480
good luck

381
00:13:46,480 --> 00:13:49,199
actually fully understanding it it's

382
00:13:49,199 --> 00:13:50,480
very confusing

383
00:13:50,480 --> 00:13:53,760
and it's just going to make you angry

384
00:13:53,760 --> 00:13:56,720
so the one big challenge for this is

385
00:13:56,720 --> 00:13:58,720
that

386
00:13:58,720 --> 00:14:00,560
wmi while it's a windows based tool and

387
00:14:00,560 --> 00:14:02,399
you can see the example of gitwmi object

388
00:14:02,399 --> 00:14:03,680
where you could just call computer name

389
00:14:03,680 --> 00:14:04,399
and you're

390
00:14:04,399 --> 00:14:08,480
there the actual challenge is that the

391
00:14:08,480 --> 00:14:10,399
tools can also run on linux so a

392
00:14:10,399 --> 00:14:11,680
attacker

393
00:14:11,680 --> 00:14:13,199
doesn't even need to actually run

394
00:14:13,199 --> 00:14:16,160
anything on the system or on a windows

395
00:14:16,160 --> 00:14:19,600
system to be able to exploit

396
00:14:19,600 --> 00:14:21,600
so you may be thinking well there has to

397
00:14:21,600 --> 00:14:22,959
be a better way and of course microsoft

398
00:14:22,959 --> 00:14:24,160
has thought of that

399
00:14:24,160 --> 00:14:27,199
they have a more modern version of of wi

400
00:14:27,199 --> 00:14:28,160
interfacing

401
00:14:28,160 --> 00:14:30,480
the legacy approach which is legacy is

402
00:14:30,480 --> 00:14:32,160
the decom-based approach

403
00:14:32,160 --> 00:14:34,240
the more modern one is based off of ws

404
00:14:34,240 --> 00:14:35,760
man unfortunately i don't know the

405
00:14:35,760 --> 00:14:36,880
acronym for that

406
00:14:36,880 --> 00:14:38,959
but the other part of it is powershell

407
00:14:38,959 --> 00:14:40,000
remoting

408
00:14:40,000 --> 00:14:44,639
you can enable the wmi to run through

409
00:14:44,639 --> 00:14:46,280
ws man

410
00:14:46,280 --> 00:14:47,920
[Music]

411
00:14:47,920 --> 00:14:49,760
or you can enable ps promoting or you

412
00:14:49,760 --> 00:14:51,519
can enable both it's that um

413
00:14:51,519 --> 00:14:54,399
it's very flexible however you cannot so

414
00:14:54,399 --> 00:14:56,000
easily disable dcom

415
00:14:56,000 --> 00:14:58,160
and just disable the communication over

416
00:14:58,160 --> 00:14:59,600
dcom

417
00:14:59,600 --> 00:15:01,600
and there's one other caveat for doing

418
00:15:01,600 --> 00:15:03,839
this with the enhanced protocol that

419
00:15:03,839 --> 00:15:07,279
it's more secure but w

420
00:15:07,279 --> 00:15:10,399
man does not support the classic wmi

421
00:15:10,399 --> 00:15:12,240
queries such as what

422
00:15:12,240 --> 00:15:15,839
wmic does so while you do have all the

423
00:15:15,839 --> 00:15:17,040
sim interfaces

424
00:15:17,040 --> 00:15:18,639
some of the legacy ones aren't available

425
00:15:18,639 --> 00:15:20,720
and while they're mostly there

426
00:15:20,720 --> 00:15:24,320
again sim can only not can only but it's

427
00:15:24,320 --> 00:15:26,160
more used for querying than

428
00:15:26,160 --> 00:15:28,399
writing so you have some challenges when

429
00:15:28,399 --> 00:15:31,839
you're moving to more modern stuff

430
00:15:31,839 --> 00:15:35,279
and then you may be wondering well can't

431
00:15:35,279 --> 00:15:39,120
i just switch to

432
00:15:39,120 --> 00:15:41,600
you know just switch off wmi well the

433
00:15:41,600 --> 00:15:42,480
answer is

434
00:15:42,480 --> 00:15:45,360
maybe maybe if you're brave enough the

435
00:15:45,360 --> 00:15:47,040
the problem is you will break a lot of

436
00:15:47,040 --> 00:15:48,880
small things where you least expect

437
00:15:48,880 --> 00:15:51,839
remember task list uses wmi so does the

438
00:15:51,839 --> 00:15:53,440
service panel service

439
00:15:53,440 --> 00:15:57,120
management uses wmi

440
00:15:57,120 --> 00:16:00,560
other components such as antivirus

441
00:16:00,560 --> 00:16:02,880
use it internally for coring different

442
00:16:02,880 --> 00:16:04,320
installed programs and other things like

443
00:16:04,320 --> 00:16:04,800
that

444
00:16:04,800 --> 00:16:07,759
that will also break or tools that are

445
00:16:07,759 --> 00:16:08,000
just

446
00:16:08,000 --> 00:16:10,160
running in general to try to get system

447
00:16:10,160 --> 00:16:12,959
information may also break

448
00:16:12,959 --> 00:16:16,320
so this poses a genuine challenge to

449
00:16:16,320 --> 00:16:19,120
operating with wmi because if you

450
00:16:19,120 --> 00:16:20,000
disable it

451
00:16:20,000 --> 00:16:21,680
those things will be gone and you may

452
00:16:21,680 --> 00:16:23,120
not

453
00:16:23,120 --> 00:16:25,040
have it run as expected this is more

454
00:16:25,040 --> 00:16:27,600
common challenge with vendor tools

455
00:16:27,600 --> 00:16:30,000
enterprise tools often use wmi just

456
00:16:30,000 --> 00:16:31,920
under the hood because they can query it

457
00:16:31,920 --> 00:16:33,199
so you have to make sure you're careful

458
00:16:33,199 --> 00:16:35,279
with what you're doing because if you

459
00:16:35,279 --> 00:16:35,759
don't

460
00:16:35,759 --> 00:16:38,720
you may end up having this all disabled

461
00:16:38,720 --> 00:16:39,279
and then

462
00:16:39,279 --> 00:16:41,519
your tools will also break so there's

463
00:16:41,519 --> 00:16:43,040
other ways to deal with it

464
00:16:43,040 --> 00:16:46,320
and that's what we'll be getting into

465
00:16:46,320 --> 00:16:48,800
but you're probably here to tinker so

466
00:16:48,800 --> 00:16:50,000
we're going to be going over

467
00:16:50,000 --> 00:16:54,000
the different components of wmi and

468
00:16:54,000 --> 00:16:55,920
some of this may be very list and

469
00:16:55,920 --> 00:16:58,000
encyclopedia-like but

470
00:16:58,000 --> 00:16:59,839
don't worry this is more of a reference

471
00:16:59,839 --> 00:17:01,440
so you can come back here and take a

472
00:17:01,440 --> 00:17:03,279
look at it again and

473
00:17:03,279 --> 00:17:05,599
not to fear well you know it's all

474
00:17:05,599 --> 00:17:07,119
documented described

475
00:17:07,119 --> 00:17:09,280
and this is again on actual the

476
00:17:09,280 --> 00:17:10,880
microsoft website where you can take a

477
00:17:10,880 --> 00:17:12,400
look and see all the information that

478
00:17:12,400 --> 00:17:13,039
you need to

479
00:17:13,039 --> 00:17:16,240
to implement your own but

480
00:17:16,240 --> 00:17:17,359
we're going to be starting with

481
00:17:17,359 --> 00:17:19,839
consumers the again these are the three

482
00:17:19,839 --> 00:17:21,280
components to making

483
00:17:21,280 --> 00:17:24,400
standard persistence a consumer is a

484
00:17:24,400 --> 00:17:25,119
trig

485
00:17:25,119 --> 00:17:28,799
is a triggered event um they take in the

486
00:17:28,799 --> 00:17:29,440
event and

487
00:17:29,440 --> 00:17:31,919
it's microsoft i'm sure had very good

488
00:17:31,919 --> 00:17:32,799
naming

489
00:17:32,799 --> 00:17:34,960
ideas behind this but it gets confusing

490
00:17:34,960 --> 00:17:36,240
very quickly

491
00:17:36,240 --> 00:17:37,840
the fact of the matter is the first two

492
00:17:37,840 --> 00:17:39,919
on this list are the primary ones that

493
00:17:39,919 --> 00:17:43,919
attackers use malicious uses at least

494
00:17:43,919 --> 00:17:46,160
activescript uses like vbscript to

495
00:17:46,160 --> 00:17:47,280
trigger an event

496
00:17:47,280 --> 00:17:49,280
command line event consumer triggers an

497
00:17:49,280 --> 00:17:51,120
actual command line event

498
00:17:51,120 --> 00:17:52,960
so this can trigger powershell it can

499
00:17:52,960 --> 00:17:54,960
trigger like command prompt or anything

500
00:17:54,960 --> 00:17:57,120
else that you want it to

501
00:17:57,120 --> 00:17:58,640
and then you have your other ones that

502
00:17:58,640 --> 00:18:00,400
are less used but more of a system admin

503
00:18:00,400 --> 00:18:01,280
perspective

504
00:18:01,280 --> 00:18:04,400
those are the log event consumer the nt

505
00:18:04,400 --> 00:18:05,919
event log where it can actually write to

506
00:18:05,919 --> 00:18:06,240
the

507
00:18:06,240 --> 00:18:08,240
windows event log and then the smtp

508
00:18:08,240 --> 00:18:09,440
event consumer where you can actually

509
00:18:09,440 --> 00:18:10,320
send mail

510
00:18:10,320 --> 00:18:12,320
this one in in theory can actually be

511
00:18:12,320 --> 00:18:14,640
more of like a canary where if someone

512
00:18:14,640 --> 00:18:15,440
removes

513
00:18:15,440 --> 00:18:17,520
your consumer that's detecting malicious

514
00:18:17,520 --> 00:18:21,280
consumers you can trigger that event

515
00:18:21,280 --> 00:18:22,960
and then you now see that someone did

516
00:18:22,960 --> 00:18:24,400
something though that could get pretty

517
00:18:24,400 --> 00:18:25,440
spammy because again

518
00:18:25,440 --> 00:18:27,440
a lot of enterprise tools do all sorts

519
00:18:27,440 --> 00:18:29,200
of modification with wmi

520
00:18:29,200 --> 00:18:32,640
because wmi is extendable it's

521
00:18:32,640 --> 00:18:35,280
very likely that a enterprise tool is

522
00:18:35,280 --> 00:18:36,240
adding to this

523
00:18:36,240 --> 00:18:38,880
also drivers a lot of things like intel

524
00:18:38,880 --> 00:18:39,840
actually

525
00:18:39,840 --> 00:18:42,880
for example the intel nuk adds its own

526
00:18:42,880 --> 00:18:46,400
wmi anyway

527
00:18:46,400 --> 00:18:49,280
you then go on to your events the events

528
00:18:49,280 --> 00:18:50,240
are

529
00:18:50,240 --> 00:18:52,080
there's two types there's intrinsic and

530
00:18:52,080 --> 00:18:54,400
extrinsic

531
00:18:54,400 --> 00:18:57,360
this gets confusing because intrinsic

532
00:18:57,360 --> 00:18:58,720
for example

533
00:18:58,720 --> 00:19:01,360
has a lot of different components where

534
00:19:01,360 --> 00:19:02,880
they um

535
00:19:02,880 --> 00:19:06,400
they um respond more to structure

536
00:19:06,400 --> 00:19:10,000
um the these are more like the

537
00:19:10,000 --> 00:19:13,440
dub like net interface trace and things

538
00:19:13,440 --> 00:19:14,160
like that where

539
00:19:14,160 --> 00:19:15,919
you're responding to the actual change

540
00:19:15,919 --> 00:19:18,799
of the structure within wmi the objects

541
00:19:18,799 --> 00:19:23,120
uh they're short-lived and they happen

542
00:19:23,120 --> 00:19:25,840
within the purview of wmi so if you're

543
00:19:25,840 --> 00:19:26,720
interacting up

544
00:19:26,720 --> 00:19:28,960
with them they only have like a very

545
00:19:28,960 --> 00:19:30,000
short polling

546
00:19:30,000 --> 00:19:32,320
period so you may miss an event for

547
00:19:32,320 --> 00:19:33,679
example why you see

548
00:19:33,679 --> 00:19:36,720
on some of the persistence like is the

549
00:19:36,720 --> 00:19:38,400
time between you know three five you

550
00:19:38,400 --> 00:19:39,280
know

551
00:19:39,280 --> 00:19:40,799
very short period of time because they

552
00:19:40,799 --> 00:19:43,039
don't stay long and they roll over

553
00:19:43,039 --> 00:19:45,280
i mean you have to pull them extrinsic

554
00:19:45,280 --> 00:19:46,559
are os level

555
00:19:46,559 --> 00:19:48,480
host changes this is like disc changes

556
00:19:48,480 --> 00:19:49,919
registry changes

557
00:19:49,919 --> 00:19:53,039
um and other events where

558
00:19:53,039 --> 00:19:56,000
something has changed to say a trigger

559
00:19:56,000 --> 00:19:57,280
um

560
00:19:57,280 --> 00:19:59,360
and so these are a little more

561
00:19:59,360 --> 00:20:00,799
challenging to

562
00:20:00,799 --> 00:20:04,559
look at but they also are very powerful

563
00:20:04,559 --> 00:20:07,280
and you can you know take a look at them

564
00:20:07,280 --> 00:20:09,520
um

565
00:20:11,520 --> 00:20:15,679
so getting started with wmi

566
00:20:15,679 --> 00:20:18,640
we want to probably start querying right

567
00:20:18,640 --> 00:20:19,600
so

568
00:20:19,600 --> 00:20:22,960
with wmi what we want to do is

569
00:20:22,960 --> 00:20:25,440
actually i skipped it but here are the

570
00:20:25,440 --> 00:20:27,120
um

571
00:20:27,120 --> 00:20:30,640
actual events for wmi this is directly

572
00:20:30,640 --> 00:20:32,559
from microsoft

573
00:20:32,559 --> 00:20:34,559
describing the different intrinsic and

574
00:20:34,559 --> 00:20:36,400
extrinsic events

575
00:20:36,400 --> 00:20:39,840
so these events are are described here

576
00:20:39,840 --> 00:20:41,679
but you can actually go to microsoft's

577
00:20:41,679 --> 00:20:45,200
documentation to take a look and it gets

578
00:20:45,200 --> 00:20:46,080
confusing

579
00:20:46,080 --> 00:20:48,880
you can mix and match but again because

580
00:20:48,880 --> 00:20:49,280
my

581
00:20:49,280 --> 00:20:54,320
wmi is so flexible it's it's kind of um

582
00:20:54,720 --> 00:20:57,840
you can see some of them in both

583
00:20:57,840 --> 00:21:01,039
but when we're starting out in wmi

584
00:21:01,039 --> 00:21:02,640
the key thing we want to do is take a

585
00:21:02,640 --> 00:21:05,760
look so if you start with wmic

586
00:21:05,760 --> 00:21:07,280
for the most part of this talk we're

587
00:21:07,280 --> 00:21:09,840
going to be looking at wmic because it's

588
00:21:09,840 --> 00:21:12,320
just very easy to interact with

589
00:21:12,320 --> 00:21:14,720
it takes all that documentation that wmi

590
00:21:14,720 --> 00:21:16,960
explorer has and

591
00:21:16,960 --> 00:21:20,000
puts it into a very pretty list

592
00:21:20,000 --> 00:21:22,320
and makes it easy to use so from this

593
00:21:22,320 --> 00:21:24,559
example i did a query

594
00:21:24,559 --> 00:21:28,240
you know a question mark on wmic

595
00:21:28,240 --> 00:21:31,120
and you can see from this there's things

596
00:21:31,120 --> 00:21:31,840
like

597
00:21:31,840 --> 00:21:35,440
network interface the os the page file

598
00:21:35,440 --> 00:21:38,320
uh things like the accounts temperatures

599
00:21:38,320 --> 00:21:39,280
time zones

600
00:21:39,280 --> 00:21:40,640
some of these are editable some of them

601
00:21:40,640 --> 00:21:42,960
are view only

602
00:21:42,960 --> 00:21:45,600
and so you can take these and then do

603
00:21:45,600 --> 00:21:46,880
sub queries on these

604
00:21:46,880 --> 00:21:48,640
to actually find out more information

605
00:21:48,640 --> 00:21:52,159
most of these are in the default route

606
00:21:52,159 --> 00:21:53,760
others are in other locations for

607
00:21:53,760 --> 00:21:56,320
example av is located in its own area

608
00:21:56,320 --> 00:21:58,799
especially defender but those are also

609
00:21:58,799 --> 00:22:00,080
accessible

610
00:22:00,080 --> 00:22:03,919
so you can see that the capabilities

611
00:22:03,919 --> 00:22:04,720
here

612
00:22:04,720 --> 00:22:07,440
can be expanded upon if you imagine for

613
00:22:07,440 --> 00:22:08,000
a second

614
00:22:08,000 --> 00:22:11,360
using things like powershell or the sim

615
00:22:11,360 --> 00:22:12,640
interfaces

616
00:22:12,640 --> 00:22:14,720
these can expand on what you have and

617
00:22:14,720 --> 00:22:16,640
you can format and look through them

618
00:22:16,640 --> 00:22:20,880
but from raw wmi perspective wmak is the

619
00:22:20,880 --> 00:22:23,440
the true and proven standard there is

620
00:22:23,440 --> 00:22:25,039
additional interfaces that

621
00:22:25,039 --> 00:22:27,200
aren't as easy to use with wmic such as

622
00:22:27,200 --> 00:22:28,799
the standard registry provider

623
00:22:28,799 --> 00:22:30,720
which allows you to do registry

624
00:22:30,720 --> 00:22:32,080
modifications remotely

625
00:22:32,080 --> 00:22:33,760
for example if someone turned off remote

626
00:22:33,760 --> 00:22:35,840
registry but you had wmi access you

627
00:22:35,840 --> 00:22:36,640
could

628
00:22:36,640 --> 00:22:38,400
insert registry keys or change them or

629
00:22:38,400 --> 00:22:40,480
update them to a form that allows you to

630
00:22:40,480 --> 00:22:43,520
do what you wanted to do

631
00:22:43,520 --> 00:22:46,799
so the interesting thing here is

632
00:22:46,799 --> 00:22:49,679
the parity so for example i'm shortening

633
00:22:49,679 --> 00:22:51,360
get wmi

634
00:22:51,360 --> 00:22:54,720
to gwmi because it doesn't fit fully you

635
00:22:54,720 --> 00:22:56,799
can see how it wraps around

636
00:22:56,799 --> 00:23:00,240
get sim there's no g sim so

637
00:23:00,240 --> 00:23:03,120
i had to put it in full but essentially

638
00:23:03,120 --> 00:23:03,440
the

639
00:23:03,440 --> 00:23:05,440
goal of this was to demonstrate the

640
00:23:05,440 --> 00:23:07,600
parity that the

641
00:23:07,600 --> 00:23:10,400
namespace 132 process is queryable from

642
00:23:10,400 --> 00:23:11,520
sim instances

643
00:23:11,520 --> 00:23:14,880
or wmi instances and you can format it

644
00:23:14,880 --> 00:23:16,960
in powershell just as normal

645
00:23:16,960 --> 00:23:20,799
and the parity command in wmi

646
00:23:20,799 --> 00:23:23,280
so get process and then you can see 132

647
00:23:23,280 --> 00:23:24,000
get processed

648
00:23:24,000 --> 00:23:25,600
they're doing the same thing the same

649
00:23:25,600 --> 00:23:27,280
query it's just a different command to

650
00:23:27,280 --> 00:23:29,919
look at the different information

651
00:23:29,919 --> 00:23:31,440
you can query services network

652
00:23:31,440 --> 00:23:32,960
interfaces you can actually set network

653
00:23:32,960 --> 00:23:35,200
interfaces from wmi such as setting dns

654
00:23:35,200 --> 00:23:36,000
setting routes

655
00:23:36,000 --> 00:23:38,400
and adding and removing and all sorts of

656
00:23:38,400 --> 00:23:39,200
things like that

657
00:23:39,200 --> 00:23:42,159
you can also adjust the startup this is

658
00:23:42,159 --> 00:23:44,320
only one area of reg

659
00:23:44,320 --> 00:23:47,360
where it stores it but

660
00:23:47,360 --> 00:23:49,440
you can add and remove things there and

661
00:23:49,440 --> 00:23:50,799
do a rough

662
00:23:50,799 --> 00:23:53,279
approximation of what's there and

663
00:23:53,279 --> 00:23:54,880
similarly there's another gotcha with

664
00:23:54,880 --> 00:23:56,640
get scheduled jobs

665
00:23:56,640 --> 00:23:59,840
it is not what you think it is it's not

666
00:23:59,840 --> 00:24:01,120
scheduled tasks

667
00:24:01,120 --> 00:24:02,480
and when people are starting out with

668
00:24:02,480 --> 00:24:04,720
this they think okay i can get all the

669
00:24:04,720 --> 00:24:05,440
scheduled tasks

670
00:24:05,440 --> 00:24:07,600
i can insert into schedule tasks no

671
00:24:07,600 --> 00:24:09,360
that's a totally different interface

672
00:24:09,360 --> 00:24:11,279
and so what in reality we're looking at

673
00:24:11,279 --> 00:24:13,200
is at commands the add command in

674
00:24:13,200 --> 00:24:14,000
windows

675
00:24:14,000 --> 00:24:16,880
is the 132 scheduled jobs these will run

676
00:24:16,880 --> 00:24:18,320
at some point in the future

677
00:24:18,320 --> 00:24:20,320
possibly reoccurring it doesn't mean

678
00:24:20,320 --> 00:24:21,600
that it's a scheduled task

679
00:24:21,600 --> 00:24:23,520
in the same structure so there's a very

680
00:24:23,520 --> 00:24:25,520
big difference

681
00:24:25,520 --> 00:24:27,840
and so you may not see a lot in here but

682
00:24:27,840 --> 00:24:29,600
you can use it just the same way as a

683
00:24:29,600 --> 00:24:33,840
scheduled task

684
00:24:33,840 --> 00:24:35,919
so we want to get some more practical

685
00:24:35,919 --> 00:24:36,960
examples

686
00:24:36,960 --> 00:24:39,200
and i i've done a lot of horrible

687
00:24:39,200 --> 00:24:40,080
photoshopping with

688
00:24:40,080 --> 00:24:43,678
cats so i'm sorry in advance

689
00:24:44,240 --> 00:24:47,440
but okay so the

690
00:24:47,440 --> 00:24:50,720
the big thing here is process i'm going

691
00:24:50,720 --> 00:24:52,240
through a couple of different things

692
00:24:52,240 --> 00:24:55,120
but in this example here we can take a

693
00:24:55,120 --> 00:24:56,159
look at the processes

694
00:24:56,159 --> 00:25:00,159
using wmic process if we go back

695
00:25:00,159 --> 00:25:02,320
to the previous slides for a second

696
00:25:02,320 --> 00:25:03,440
where you could see

697
00:25:03,440 --> 00:25:06,960
the helpful hints um

698
00:25:06,960 --> 00:25:09,840
hold on oh okay it's just going to go

699
00:25:09,840 --> 00:25:12,559
all the way back

700
00:25:13,600 --> 00:25:16,640
maybe stay here okay stay here

701
00:25:16,640 --> 00:25:19,360
um you can see the startup commands

702
00:25:19,360 --> 00:25:20,240
again

703
00:25:20,240 --> 00:25:21,760
but you can see process process

704
00:25:21,760 --> 00:25:23,760
management product management

705
00:25:23,760 --> 00:25:27,679
the the queries here are shortcuts

706
00:25:27,679 --> 00:25:28,960
they're what's known in

707
00:25:28,960 --> 00:25:32,080
in wmic as aliases because

708
00:25:32,080 --> 00:25:35,919
nobody wants to type 132 process or 132

709
00:25:35,919 --> 00:25:38,400
service you know schedule tap they they

710
00:25:38,400 --> 00:25:39,600
want it simple

711
00:25:39,600 --> 00:25:41,600
and so wyc makes all these aliases

712
00:25:41,600 --> 00:25:43,679
available so when we're doing them

713
00:25:43,679 --> 00:25:45,039
that's what we're seeing here

714
00:25:45,039 --> 00:25:49,039
and we're also seeing at this point here

715
00:25:49,039 --> 00:25:50,480
and i'm not going to jump around the

716
00:25:50,480 --> 00:25:51,679
slides anymore because that was a

717
00:25:51,679 --> 00:25:54,000
horrible idea but

718
00:25:54,000 --> 00:25:57,039
you can see we can do queries

719
00:25:57,039 --> 00:25:59,760
for example with this one we can see we

720
00:25:59,760 --> 00:26:00,559
killed

721
00:26:00,559 --> 00:26:02,960
notepad they weren't good notepads but

722
00:26:02,960 --> 00:26:04,320
they were notepads

723
00:26:04,320 --> 00:26:06,320
and you can see process termination

724
00:26:06,320 --> 00:26:08,000
successful it returns what almost looks

725
00:26:08,000 --> 00:26:10,000
like a json object but it isn't

726
00:26:10,000 --> 00:26:11,520
and you can call terminate or you can

727
00:26:11,520 --> 00:26:14,080
call open or you can call

728
00:26:14,080 --> 00:26:16,720
stop or pause depending on the different

729
00:26:16,720 --> 00:26:19,440
endpoint that you're interacting with

730
00:26:19,440 --> 00:26:22,320
so the other side is similar here's an

731
00:26:22,320 --> 00:26:23,520
example of the delete

732
00:26:23,520 --> 00:26:27,279
task or action and this is a

733
00:26:27,279 --> 00:26:30,400
service that was created and i've done

734
00:26:30,400 --> 00:26:32,480
this remotely to from another system you

735
00:26:32,480 --> 00:26:34,159
can see the username and password are

736
00:26:34,159 --> 00:26:37,039
all that's specified here and then the

737
00:26:37,039 --> 00:26:38,320
service is deleted

738
00:26:38,320 --> 00:26:40,159
no interaction or visibility was really

739
00:26:40,159 --> 00:26:41,840
seen on the system

740
00:26:41,840 --> 00:26:44,000
that the actions were happening so this

741
00:26:44,000 --> 00:26:46,000
is where it's a very powerful tool

742
00:26:46,000 --> 00:26:47,760
for an administrator but it's also

743
00:26:47,760 --> 00:26:49,679
equally powerful as an attacker because

744
00:26:49,679 --> 00:26:49,919
it

745
00:26:49,919 --> 00:26:51,440
doesn't have that documentation there

746
00:26:51,440 --> 00:26:53,840
that you need

747
00:26:54,000 --> 00:26:56,400
so one of the really cool capabilities

748
00:26:56,400 --> 00:26:57,440
of wmi

749
00:26:57,440 --> 00:26:59,919
is it has the ability to query what's

750
00:26:59,919 --> 00:27:01,440
called the security center

751
00:27:01,440 --> 00:27:03,200
this is not the security center in like

752
00:27:03,200 --> 00:27:05,440
windows xp or 7.

753
00:27:05,440 --> 00:27:07,679
instead this is the security center

754
00:27:07,679 --> 00:27:08,480
endpoint

755
00:27:08,480 --> 00:27:10,000
which allows you to query a lot of

756
00:27:10,000 --> 00:27:11,279
different capabilities built into

757
00:27:11,279 --> 00:27:11,840
windows

758
00:27:11,840 --> 00:27:15,200
or externally that are securing windows

759
00:27:15,200 --> 00:27:17,520
itself

760
00:27:17,679 --> 00:27:19,679
when you query this it will return for

761
00:27:19,679 --> 00:27:21,360
example the antivirus product

762
00:27:21,360 --> 00:27:23,760
and we can see if someone's what

763
00:27:23,760 --> 00:27:25,200
antivirus someone's using

764
00:27:25,200 --> 00:27:27,919
if any in many cases most people will

765
00:27:27,919 --> 00:27:29,600
leave defender running so you'll see

766
00:27:29,600 --> 00:27:32,559
two anti-virus programs on here but

767
00:27:32,559 --> 00:27:33,200
really

768
00:27:33,200 --> 00:27:36,080
it'll query what's here and the the

769
00:27:36,080 --> 00:27:37,760
challenge to this though however

770
00:27:37,760 --> 00:27:41,039
is that this is only available on on end

771
00:27:41,039 --> 00:27:43,440
consumers so windows 7 windows 8 windows

772
00:27:43,440 --> 00:27:44,960
vista if you're still using that for

773
00:27:44,960 --> 00:27:46,000
some odd reason

774
00:27:46,000 --> 00:27:49,039
or windows 10. servers don't really have

775
00:27:49,039 --> 00:27:49,440
this

776
00:27:49,440 --> 00:27:51,679
capability it's not clear why microsoft

777
00:27:51,679 --> 00:27:53,279
didn't include it

778
00:27:53,279 --> 00:27:55,600
because defender defenders need to know

779
00:27:55,600 --> 00:27:57,440
what's running on

780
00:27:57,440 --> 00:27:59,039
you know servers as well but they didn't

781
00:27:59,039 --> 00:28:00,960
provide it

782
00:28:00,960 --> 00:28:02,799
but because we now know that the system

783
00:28:02,799 --> 00:28:04,240
is running defender

784
00:28:04,240 --> 00:28:07,679
we can start tinkering so for example

785
00:28:07,679 --> 00:28:08,480
here

786
00:28:08,480 --> 00:28:11,520
we can trigger an exclusion add

787
00:28:11,520 --> 00:28:14,640
for example for all of c

788
00:28:14,640 --> 00:28:17,520
and in defender any path is it is

789
00:28:17,520 --> 00:28:19,840
recursive so if we do all of c

790
00:28:19,840 --> 00:28:21,760
we've now white listed all of c and now

791
00:28:21,760 --> 00:28:23,279
you don't need to worry about any

792
00:28:23,279 --> 00:28:25,520
malicious detection or we can exclude

793
00:28:25,520 --> 00:28:27,520
all exe files

794
00:28:27,520 --> 00:28:30,320
the add versus set end point on here in

795
00:28:30,320 --> 00:28:30,640
in

796
00:28:30,640 --> 00:28:33,679
defender because of their add-on

797
00:28:33,679 --> 00:28:37,919
um what are called object files moths

798
00:28:37,919 --> 00:28:41,360
um because they're defined

799
00:28:41,360 --> 00:28:44,559
what these capabilities do the the the

800
00:28:44,559 --> 00:28:47,679
calls add in here append

801
00:28:47,679 --> 00:28:49,440
set overwrites and you have to have it

802
00:28:49,440 --> 00:28:50,720
in a specific structure

803
00:28:50,720 --> 00:28:53,039
so it's not really feasible if you want

804
00:28:53,039 --> 00:28:55,520
to do something where you're appending

805
00:28:55,520 --> 00:28:57,440
or resetting i should say in its

806
00:28:57,440 --> 00:28:59,200
entirety it's easier to delete and

807
00:28:59,200 --> 00:29:00,960
return the data

808
00:29:00,960 --> 00:29:04,960
by capturing it just an interesting note

809
00:29:04,960 --> 00:29:08,880
there but it may be helpful for someone

810
00:29:09,120 --> 00:29:11,919
this is another fun one you can see we

811
00:29:11,919 --> 00:29:14,480
are disabling script scanning

812
00:29:14,480 --> 00:29:15,410
and

813
00:29:15,410 --> 00:29:18,080
[Music]

814
00:29:18,080 --> 00:29:19,600
i think i used the wrong screenshot on

815
00:29:19,600 --> 00:29:20,720
this unfortunately because it was

816
00:29:20,720 --> 00:29:21,840
disabled

817
00:29:21,840 --> 00:29:25,120
but that's no big deal you turn this in

818
00:29:25,120 --> 00:29:27,120
you can disable real-time monitoring and

819
00:29:27,120 --> 00:29:28,559
script scanning

820
00:29:28,559 --> 00:29:30,159
and what this allows you to do is

821
00:29:30,159 --> 00:29:31,919
actually turn off the antivirus you're

822
00:29:31,919 --> 00:29:36,000
turning off defender which then causes

823
00:29:36,000 --> 00:29:38,640
no announcement or no notification it's

824
00:29:38,640 --> 00:29:40,480
just off

825
00:29:40,480 --> 00:29:42,480
i'm sure it'll come up later but because

826
00:29:42,480 --> 00:29:44,000
you're disabling real-time monitoring

827
00:29:44,000 --> 00:29:45,679
you also disable ransomware protection

828
00:29:45,679 --> 00:29:47,279
and a bunch of other different tools

829
00:29:47,279 --> 00:29:49,360
in windows that will just automatically

830
00:29:49,360 --> 00:29:50,480
get disabled

831
00:29:50,480 --> 00:29:54,399
because it's off

832
00:29:54,399 --> 00:29:58,959
and i'm trying to move to the next slide

833
00:30:04,720 --> 00:30:07,840
okay there we go that was weird so with

834
00:30:07,840 --> 00:30:08,399
this

835
00:30:08,399 --> 00:30:10,399
you can see the antivirus enabled is

836
00:30:10,399 --> 00:30:12,960
true we can set that to false

837
00:30:12,960 --> 00:30:14,799
and we can just turn off antivirus in

838
00:30:14,799 --> 00:30:17,200
its entirety

839
00:30:17,200 --> 00:30:20,240
that's kind of obvious though because

840
00:30:20,240 --> 00:30:22,960
you then get the alert that says it's

841
00:30:22,960 --> 00:30:24,000
it's completely off

842
00:30:24,000 --> 00:30:27,279
but um some of these are not settable

843
00:30:27,279 --> 00:30:29,679
because you can see this is as well this

844
00:30:29,679 --> 00:30:31,039
is the msft

845
00:30:31,039 --> 00:30:33,840
computer mp computer status not

846
00:30:33,840 --> 00:30:34,640
preferences

847
00:30:34,640 --> 00:30:36,080
so this is where things get very

848
00:30:36,080 --> 00:30:38,080
confusing and very

849
00:30:38,080 --> 00:30:40,399
challenging quickly because you may see

850
00:30:40,399 --> 00:30:41,279
things that

851
00:30:41,279 --> 00:30:44,720
you want to set but you can't um but

852
00:30:44,720 --> 00:30:47,440
um you can try and do sort of things i

853
00:30:47,440 --> 00:30:49,679
believe this one did have a set endpoint

854
00:30:49,679 --> 00:30:50,960
um

855
00:30:50,960 --> 00:30:53,279
but if nothing else you can go back and

856
00:30:53,279 --> 00:30:54,399
just turn off the

857
00:30:54,399 --> 00:30:56,159
script scanning which and disable

858
00:30:56,159 --> 00:30:57,279
real-time monitoring which definitely

859
00:30:57,279 --> 00:30:58,880
does work

860
00:30:58,880 --> 00:31:02,559
um enumeration in powershell this is

861
00:31:02,559 --> 00:31:04,080
very easy

862
00:31:04,080 --> 00:31:08,080
but in the case of

863
00:31:08,080 --> 00:31:12,720
of wmic the way to do this

864
00:31:12,720 --> 00:31:15,840
or well this is is you take

865
00:31:15,840 --> 00:31:19,440
the tokens and you

866
00:31:19,440 --> 00:31:21,039
write them to a file then you take the

867
00:31:21,039 --> 00:31:23,279
file and transfer to another file

868
00:31:23,279 --> 00:31:25,360
because of the formatting challenges

869
00:31:25,360 --> 00:31:26,480
with windows

870
00:31:26,480 --> 00:31:28,880
what can happen is the name spaces will

871
00:31:28,880 --> 00:31:29,840
have it'll have a

872
00:31:29,840 --> 00:31:32,399
the wrong line encoding which then

873
00:31:32,399 --> 00:31:33,360
causes

874
00:31:33,360 --> 00:31:36,399
the batch for loop not to run

875
00:31:36,399 --> 00:31:37,600
this is just a problem because we're

876
00:31:37,600 --> 00:31:39,760
running it in batch

877
00:31:39,760 --> 00:31:41,919
but if you want to run it also it ain't

878
00:31:41,919 --> 00:31:42,880
my quotes

879
00:31:42,880 --> 00:31:45,360
i think but anyway if you want to run it

880
00:31:45,360 --> 00:31:47,360
in in batch and you want to use wmic

881
00:31:47,360 --> 00:31:48,720
this is one way to do it

882
00:31:48,720 --> 00:31:50,320
and this is where you could pipe in and

883
00:31:50,320 --> 00:31:52,799
read in the data output from one and use

884
00:31:52,799 --> 00:31:53,600
it for another

885
00:31:53,600 --> 00:31:55,679
command of course it's a little easier

886
00:31:55,679 --> 00:31:56,720
with um

887
00:31:56,720 --> 00:31:58,559
powershell you just have loops and you

888
00:31:58,559 --> 00:32:00,720
have actual code that

889
00:32:00,720 --> 00:32:02,960
well you have stuff that looks like code

890
00:32:02,960 --> 00:32:04,399
that makes it a lot easier to use

891
00:32:04,399 --> 00:32:06,000
for example this recursive function that

892
00:32:06,000 --> 00:32:07,600
was on powershell.com

893
00:32:07,600 --> 00:32:09,279
i use this all the time it allows you to

894
00:32:09,279 --> 00:32:12,880
get an the entirety of a namespace

895
00:32:12,880 --> 00:32:18,000
and it's recursive very very helpful

896
00:32:18,559 --> 00:32:20,640
there is another one um that was on

897
00:32:20,640 --> 00:32:21,840
reddit uh

898
00:32:21,840 --> 00:32:23,840
i will post it on twitter because it

899
00:32:23,840 --> 00:32:25,919
seems to have gotten very obscure but

900
00:32:25,919 --> 00:32:27,600
the one that was on twitter

901
00:32:27,600 --> 00:32:31,200
basically lists the entire tree of wmi

902
00:32:31,200 --> 00:32:34,559
and that's extremely powerful so let's

903
00:32:34,559 --> 00:32:35,279
take a look at

904
00:32:35,279 --> 00:32:37,039
another thing that we can do i don't

905
00:32:37,039 --> 00:32:38,880
know why you would want to do this but

906
00:32:38,880 --> 00:32:41,440
if you ever wanted to you could disable

907
00:32:41,440 --> 00:32:44,240
all the services on a system

908
00:32:44,240 --> 00:32:48,159
this would take for example uh wmic

909
00:32:48,159 --> 00:32:51,120
service where and then you take in the

910
00:32:51,120 --> 00:32:52,559
the key

911
00:32:52,559 --> 00:32:54,159
in my case i was looking for start mode

912
00:32:54,159 --> 00:32:56,000
where it's set to an auto

913
00:32:56,000 --> 00:32:57,919
and i immediately stop the service and

914
00:32:57,919 --> 00:32:59,760
set the start mode to disabled

915
00:32:59,760 --> 00:33:01,279
what this can do is then turn off the

916
00:33:01,279 --> 00:33:03,200
service and prevent it from running

917
00:33:03,200 --> 00:33:04,000
again

918
00:33:04,000 --> 00:33:05,679
you can do this similarly with the

919
00:33:05,679 --> 00:33:07,360
service qc

920
00:33:07,360 --> 00:33:09,519
command and in some cases that's more

921
00:33:09,519 --> 00:33:11,679
sticky because wmi

922
00:33:11,679 --> 00:33:13,360
and all these things are bolted together

923
00:33:13,360 --> 00:33:15,279
in such a way

924
00:33:15,279 --> 00:33:17,919
doing certain things from wmi doesn't

925
00:33:17,919 --> 00:33:20,080
actually trigger the expected result

926
00:33:20,080 --> 00:33:22,640
for example wmi has the capability of

927
00:33:22,640 --> 00:33:24,000
creating shares

928
00:33:24,000 --> 00:33:26,720
but that capability was removed at some

929
00:33:26,720 --> 00:33:27,519
point before

930
00:33:27,519 --> 00:33:30,399
windows 10. it's still there it still

931
00:33:30,399 --> 00:33:31,919
looks like it's running it returns a

932
00:33:31,919 --> 00:33:32,640
value

933
00:33:32,640 --> 00:33:36,159
but your share doesn't get created so

934
00:33:36,159 --> 00:33:37,919
i'm not sure if microsoft is trying to

935
00:33:37,919 --> 00:33:40,720
limit the capabilities that wmi can do

936
00:33:40,720 --> 00:33:44,240
but it is getting limited

937
00:33:44,240 --> 00:33:47,600
um here another couple of dumb ones but

938
00:33:47,600 --> 00:33:48,880
cool ones

939
00:33:48,880 --> 00:33:52,320
you can trigger os reboot or change the

940
00:33:52,320 --> 00:33:54,080
date and time on the system

941
00:33:54,080 --> 00:33:57,519
from wmi and these

942
00:33:57,519 --> 00:33:59,760
actually do work they're not broken you

943
00:33:59,760 --> 00:34:00,880
can see how

944
00:34:00,880 --> 00:34:03,600
the actual object file is transcribed in

945
00:34:03,600 --> 00:34:05,760
wmic you can see that it has the int

946
00:34:05,760 --> 00:34:08,399
and all that stuff setting it into the

947
00:34:08,399 --> 00:34:09,440
correct format

948
00:34:09,440 --> 00:34:11,679
will allow you to set those values

949
00:34:11,679 --> 00:34:12,639
trigger them

950
00:34:12,639 --> 00:34:14,000
for example if you want to do this you

951
00:34:14,000 --> 00:34:15,679
would do call reboot or

952
00:34:15,679 --> 00:34:18,320
call 132 shutdown and those it would

953
00:34:18,320 --> 00:34:19,918
call that actual function which triggers

954
00:34:19,918 --> 00:34:22,000
the internal capability

955
00:34:22,000 --> 00:34:24,480
to reboot or shut down powershell it's

956
00:34:24,480 --> 00:34:26,079
similar computer name and things like

957
00:34:26,079 --> 00:34:27,359
that are also similarly

958
00:34:27,359 --> 00:34:30,879
set versus powershell and and

959
00:34:30,879 --> 00:34:33,679
uh wmic but you know that's that's where

960
00:34:33,679 --> 00:34:34,239
it's at

961
00:34:34,239 --> 00:34:36,320
um with those areas is within the os

962
00:34:36,320 --> 00:34:37,520
here um

963
00:34:37,520 --> 00:34:41,440
namespace um similarly user account

964
00:34:41,440 --> 00:34:43,760
doesn't allow you to set accounts but it

965
00:34:43,760 --> 00:34:45,599
does allow you to rename accounts

966
00:34:45,599 --> 00:34:48,639
so in this case i didn't specify any

967
00:34:48,639 --> 00:34:50,480
queries so what it did was just changed

968
00:34:50,480 --> 00:34:53,760
all the full names to lol

969
00:34:53,760 --> 00:34:55,040
i don't know why any would want to be

970
00:34:55,040 --> 00:34:57,119
that noisy but you can

971
00:34:57,119 --> 00:35:00,240
in this example see the full path of the

972
00:35:00,240 --> 00:35:01,680
query which would be

973
00:35:01,680 --> 00:35:04,000
the computer name the root simv2 132

974
00:35:04,000 --> 00:35:04,880
user account

975
00:35:04,880 --> 00:35:07,599
domain equals name equals and so that

976
00:35:07,599 --> 00:35:09,280
property has gotten updated

977
00:35:09,280 --> 00:35:11,119
you can't rename the account name and

978
00:35:11,119 --> 00:35:12,720
you can't add accounts

979
00:35:12,720 --> 00:35:15,440
but properties underneath the account

980
00:35:15,440 --> 00:35:18,160
are settable

981
00:35:19,280 --> 00:35:22,320
so you've heard me mention moffs

982
00:35:22,320 --> 00:35:24,880
moths are managed object files or

983
00:35:24,880 --> 00:35:26,079
sources

984
00:35:26,079 --> 00:35:30,720
they are it's basically a header file

985
00:35:30,720 --> 00:35:33,440
like a c header file that gets compiled

986
00:35:33,440 --> 00:35:33,920
into

987
00:35:33,920 --> 00:35:37,040
a bmf file which

988
00:35:37,040 --> 00:35:39,599
is then the compiled version both can be

989
00:35:39,599 --> 00:35:42,320
imported by the windows tool moff comp

990
00:35:42,320 --> 00:35:44,640
moffcomp can be used over smb or

991
00:35:44,640 --> 00:35:45,920
physically on disk

992
00:35:45,920 --> 00:35:47,280
and then those get loaded into object

993
00:35:47,280 --> 00:35:49,599
store

994
00:35:49,760 --> 00:35:52,960
previous versions of windows before

995
00:35:52,960 --> 00:35:55,920
um like xp or so or round xp or so and

996
00:35:55,920 --> 00:35:56,720
before

997
00:35:56,720 --> 00:35:59,599
i should say um automatically compiled

998
00:35:59,599 --> 00:36:01,520
the mof file

999
00:36:01,520 --> 00:36:03,280
if it was placed in a certain directory

1000
00:36:03,280 --> 00:36:04,800
and then triggered so that was a really

1001
00:36:04,800 --> 00:36:06,640
easy way of persistence that's um

1002
00:36:06,640 --> 00:36:10,079
roughly how stuxnet did what it did

1003
00:36:10,079 --> 00:36:13,119
um but via different means um

1004
00:36:13,119 --> 00:36:15,520
so consumers they're things called

1005
00:36:15,520 --> 00:36:16,720
temporary consumers

1006
00:36:16,720 --> 00:36:19,040
and then there's permanent consumers a

1007
00:36:19,040 --> 00:36:20,720
permanent consumer is basically a

1008
00:36:20,720 --> 00:36:22,000
temporary consumer

1009
00:36:22,000 --> 00:36:24,000
but in addition to receiving the trigger

1010
00:36:24,000 --> 00:36:25,280
and event

1011
00:36:25,280 --> 00:36:27,920
it's triggered for all events and stored

1012
00:36:27,920 --> 00:36:28,560
in the

1013
00:36:28,560 --> 00:36:31,040
core object file which is literally

1014
00:36:31,040 --> 00:36:32,400
called object.

1015
00:36:32,400 --> 00:36:34,880
and here's an example of a temporary and

1016
00:36:34,880 --> 00:36:36,160
i say that with quotes of course you

1017
00:36:36,160 --> 00:36:38,079
can't see that probably but

1018
00:36:38,079 --> 00:36:41,520
this will trigger when there is a sorry

1019
00:36:41,520 --> 00:36:43,520
a log event which is any event log

1020
00:36:43,520 --> 00:36:45,680
trigger and then it'll write new event

1021
00:36:45,680 --> 00:36:47,520
log has been written

1022
00:36:47,520 --> 00:36:50,079
very cool but that's where our

1023
00:36:50,079 --> 00:36:51,440
capability comes and so

1024
00:36:51,440 --> 00:36:52,880
we're not writing this anywhere it's not

1025
00:36:52,880 --> 00:36:54,480
storing in the object file to trigger on

1026
00:36:54,480 --> 00:36:55,440
its own

1027
00:36:55,440 --> 00:36:57,359
because the event once it's disconnected

1028
00:36:57,359 --> 00:36:58,720
from powershell isn't going to be able

1029
00:36:58,720 --> 00:36:59,839
to go anywhere

1030
00:36:59,839 --> 00:37:01,839
you can also just ask microsoft because

1031
00:37:01,839 --> 00:37:03,200
they literally have

1032
00:37:03,200 --> 00:37:04,800
all that documentation online you know

1033
00:37:04,800 --> 00:37:06,240
it that's where

1034
00:37:06,240 --> 00:37:08,640
you go here's an example of a moth

1035
00:37:08,640 --> 00:37:09,280
though

1036
00:37:09,280 --> 00:37:12,400
and we're writing to a name

1037
00:37:12,400 --> 00:37:14,720
an event filter called bad that with a

1038
00:37:14,720 --> 00:37:15,920
consumer called bad

1039
00:37:15,920 --> 00:37:18,720
and the filter that combines the two is

1040
00:37:18,720 --> 00:37:19,119
just

1041
00:37:19,119 --> 00:37:21,359
going to reference both bads so we can

1042
00:37:21,359 --> 00:37:23,599
query on bad in this example and it

1043
00:37:23,599 --> 00:37:26,000
will show the bad stuff that's very

1044
00:37:26,000 --> 00:37:26,720
repetitive

1045
00:37:26,720 --> 00:37:28,720
and also the file name that it's writing

1046
00:37:28,720 --> 00:37:30,480
is not good but the contents

1047
00:37:30,480 --> 00:37:34,000
contain bad and from this example though

1048
00:37:34,000 --> 00:37:35,119
you can see

1049
00:37:35,119 --> 00:37:37,440
how everything filters in filters and

1050
00:37:37,440 --> 00:37:39,200
subscriptions builds together

1051
00:37:39,200 --> 00:37:41,040
and these three components that we saw

1052
00:37:41,040 --> 00:37:42,560
way back when

1053
00:37:42,560 --> 00:37:45,440
allow you to actually have all the um

1054
00:37:45,440 --> 00:37:46,640
those things triggered

1055
00:37:46,640 --> 00:37:48,480
you can specify the different query and

1056
00:37:48,480 --> 00:37:50,000
then when and what

1057
00:37:50,000 --> 00:37:52,000
happens you have to specify the spaces

1058
00:37:52,000 --> 00:37:53,280
and things otherwise it doesn't trigger

1059
00:37:53,280 --> 00:37:54,320
correctly

1060
00:37:54,320 --> 00:37:57,359
but it's that easy and helpfully one of

1061
00:37:57,359 --> 00:37:57,680
the

1062
00:37:57,680 --> 00:38:00,160
interesting things that microsoft did

1063
00:38:00,160 --> 00:38:01,920
was when you try to compile them off

1064
00:38:01,920 --> 00:38:02,480
without

1065
00:38:02,480 --> 00:38:04,720
a auto recover it gives you a warning

1066
00:38:04,720 --> 00:38:06,800
and what the auto recover does

1067
00:38:06,800 --> 00:38:09,760
is specifies that it will be

1068
00:38:09,760 --> 00:38:11,200
automatically restored if you're

1069
00:38:11,200 --> 00:38:12,320
corrupted

1070
00:38:12,320 --> 00:38:14,320
and why this is helpful is because one

1071
00:38:14,320 --> 00:38:16,160
of the ways to remove persistence is

1072
00:38:16,160 --> 00:38:18,400
doing a recover so

1073
00:38:18,400 --> 00:38:20,320
hopefully microsoft told us how to

1074
00:38:20,320 --> 00:38:23,920
persist even more so than before

1075
00:38:23,920 --> 00:38:26,960
now the final thing on the the

1076
00:38:26,960 --> 00:38:29,440
moffs is how to detect them now from

1077
00:38:29,440 --> 00:38:30,800
here you can see we're querying a

1078
00:38:30,800 --> 00:38:32,960
specific name space with wmic and the

1079
00:38:32,960 --> 00:38:34,079
event filter

1080
00:38:34,079 --> 00:38:36,640
by default there is the sem event log

1081
00:38:36,640 --> 00:38:37,920
sem event log 8

1082
00:38:37,920 --> 00:38:41,440
10 12 4. those are all malicious um

1083
00:38:41,440 --> 00:38:44,839
if that's like a water minor variant

1084
00:38:44,839 --> 00:38:48,000
but for our particular cases then the

1085
00:38:48,000 --> 00:38:49,839
bad one you can see the sid that created

1086
00:38:49,839 --> 00:38:51,599
that's the user account that i logged in

1087
00:38:51,599 --> 00:38:52,000
as

1088
00:38:52,000 --> 00:38:53,680
i tried not to log in as administrator

1089
00:38:53,680 --> 00:38:55,520
to make it more annoying

1090
00:38:55,520 --> 00:38:58,839
um and you can see it's there

1091
00:38:58,839 --> 00:39:01,119
and more visible so at least you can see

1092
00:39:01,119 --> 00:39:03,040
what user did create something

1093
00:39:03,040 --> 00:39:04,560
you don't know how or where they did it

1094
00:39:04,560 --> 00:39:06,160
from but you know who did it which

1095
00:39:06,160 --> 00:39:09,119
might be helpful and then you can see

1096
00:39:09,119 --> 00:39:10,960
that there's the actual typo i took the

1097
00:39:10,960 --> 00:39:12,640
screenshot before i corrected it but

1098
00:39:12,640 --> 00:39:14,400
you can see the five where there's

1099
00:39:14,400 --> 00:39:15,760
supposed to be a space there

1100
00:39:15,760 --> 00:39:18,400
and this event will never trigger

1101
00:39:18,400 --> 00:39:19,359
because of that

1102
00:39:19,359 --> 00:39:22,800
typo but it is created successfully and

1103
00:39:22,800 --> 00:39:25,280
this goes to show you that there is no c

1104
00:39:25,280 --> 00:39:26,800
protections in wmi

1105
00:39:26,800 --> 00:39:28,960
you can do some very bad stuff and wmi

1106
00:39:28,960 --> 00:39:31,280
will not stop you

1107
00:39:31,280 --> 00:39:32,800
for our filters because we're only

1108
00:39:32,800 --> 00:39:36,160
looking at the joint points between the

1109
00:39:36,160 --> 00:39:40,400
consumer and the filter the the event

1110
00:39:40,400 --> 00:39:43,920
um consumer um

1111
00:39:43,920 --> 00:39:47,280
you can see that the joint point um

1112
00:39:47,280 --> 00:39:50,320
and that's how where you can actually

1113
00:39:50,320 --> 00:39:51,839
identify stuff is if you

1114
00:39:51,839 --> 00:39:53,599
query on those and you can look where

1115
00:39:53,599 --> 00:39:55,520
they end up you can see the built-in

1116
00:39:55,520 --> 00:39:56,640
ones don't

1117
00:39:56,640 --> 00:39:58,560
go out of root subscription either

1118
00:39:58,560 --> 00:40:00,079
removing them is very easy

1119
00:40:00,079 --> 00:40:02,640
for this one because it was just bad we

1120
00:40:02,640 --> 00:40:03,359
do a

1121
00:40:03,359 --> 00:40:06,000
sql like query where we say anything

1122
00:40:06,000 --> 00:40:07,680
that contains bad delete

1123
00:40:07,680 --> 00:40:10,720
and you can see it successfully removes

1124
00:40:10,720 --> 00:40:14,960
those events so the object store

1125
00:40:14,960 --> 00:40:16,960
is the most interesting part of wmi and

1126
00:40:16,960 --> 00:40:18,319
as a defender this is where your bad

1127
00:40:18,319 --> 00:40:20,400
stuff is going to be stored

1128
00:40:20,400 --> 00:40:22,960
this contains all custom mofs as well as

1129
00:40:22,960 --> 00:40:24,079
all the persistence and

1130
00:40:24,079 --> 00:40:26,480
some command activity that uh w my

1131
00:40:26,480 --> 00:40:28,079
persistence may execute

1132
00:40:28,079 --> 00:40:31,440
for example um in the

1133
00:40:31,440 --> 00:40:33,359
picture below i look for 132 and you can

1134
00:40:33,359 --> 00:40:34,640
see all the different components that

1135
00:40:34,640 --> 00:40:35,280
are triggering

1136
00:40:35,280 --> 00:40:38,400
and their paths there are tools

1137
00:40:38,400 --> 00:40:41,520
um to parse it um it doubled up

1138
00:40:41,520 --> 00:40:44,880
and overwrote the wrong one but um

1139
00:40:44,880 --> 00:40:47,040
i will also post this at the end of this

1140
00:40:47,040 --> 00:40:48,640
on the actual live portion the two

1141
00:40:48,640 --> 00:40:50,079
different tools

1142
00:40:50,079 --> 00:40:52,800
um the wmi format and six python tool is

1143
00:40:52,800 --> 00:40:53,760
very good

1144
00:40:53,760 --> 00:40:56,800
there is an additional tool that can

1145
00:40:56,800 --> 00:41:00,240
parse this um from uh

1146
00:41:00,240 --> 00:41:02,560
the fireeye team that was is a little

1147
00:41:02,560 --> 00:41:03,280
older

1148
00:41:03,280 --> 00:41:04,400
i believe they're actually made by the

1149
00:41:04,400 --> 00:41:06,800
same like group but

1150
00:41:06,800 --> 00:41:08,560
those two tools allow you to read the

1151
00:41:08,560 --> 00:41:10,400
object file for

1152
00:41:10,400 --> 00:41:12,319
content if you do just pure strings on

1153
00:41:12,319 --> 00:41:13,760
it like we're doing you usually find

1154
00:41:13,760 --> 00:41:14,720
something interesting

1155
00:41:14,720 --> 00:41:16,880
but it's a little hard to go through so

1156
00:41:16,880 --> 00:41:18,480
you usually need to use a hex editor to

1157
00:41:18,480 --> 00:41:20,240
be able to identify it but if you're

1158
00:41:20,240 --> 00:41:21,760
thinking that something was compromised

1159
00:41:21,760 --> 00:41:24,079
you can just do find

1160
00:41:24,079 --> 00:41:26,160
i bet everyone here is now feeling a

1161
00:41:26,160 --> 00:41:28,160
little bit underwater with how much

1162
00:41:28,160 --> 00:41:29,760
information

1163
00:41:29,760 --> 00:41:31,040
and you're like well i wish i could just

1164
00:41:31,040 --> 00:41:32,800
log all this well the

1165
00:41:32,800 --> 00:41:35,599
good news is you can um here are the

1166
00:41:35,599 --> 00:41:37,839
events that log

1167
00:41:37,839 --> 00:41:41,880
by default event

1168
00:41:41,880 --> 00:41:44,560
5857 is the demo activity it's very

1169
00:41:44,560 --> 00:41:45,680
vague i'll show you a

1170
00:41:45,680 --> 00:41:48,720
screenshot in a second you can

1171
00:41:48,720 --> 00:41:51,920
enable tracing tracing is very helpful

1172
00:41:51,920 --> 00:41:55,599
the problem with tracing is that it

1173
00:41:55,599 --> 00:41:58,160
doesn't provide a lot of

1174
00:41:58,160 --> 00:42:01,040
narrow information on what was happening

1175
00:42:01,040 --> 00:42:02,640
that's where sysmon bridges that gap

1176
00:42:02,640 --> 00:42:05,040
it'll show you that wmi happened

1177
00:42:05,040 --> 00:42:07,119
sysmon shows you when the consumers and

1178
00:42:07,119 --> 00:42:10,160
filters are created

1179
00:42:10,400 --> 00:42:12,520
and so here's an example of the event

1180
00:42:12,520 --> 00:42:14,000
5857

1181
00:42:14,000 --> 00:42:17,200
and it literally just says

1182
00:42:17,200 --> 00:42:20,240
a dll was loaded wmi was triggered that

1183
00:42:20,240 --> 00:42:21,839
doesn't help you as a defender that

1184
00:42:21,839 --> 00:42:23,839
that really doesn't tell you anything

1185
00:42:23,839 --> 00:42:25,040
that could have happened or

1186
00:42:25,040 --> 00:42:26,880
if it was a computer or a user or

1187
00:42:26,880 --> 00:42:28,560
anything

1188
00:42:28,560 --> 00:42:31,119
so the challenge is well it doesn't

1189
00:42:31,119 --> 00:42:32,720
track remote activity

1190
00:42:32,720 --> 00:42:34,160
the trace activity is helpful but it

1191
00:42:34,160 --> 00:42:35,599
wraps around very quickly unless you set

1192
00:42:35,599 --> 00:42:36,720
it larger and then that becomes

1193
00:42:36,720 --> 00:42:37,680
unwieldly

1194
00:42:37,680 --> 00:42:39,800
if you find a back door such as

1195
00:42:39,800 --> 00:42:41,200
createbackdoor.exe

1196
00:42:41,200 --> 00:42:42,800
you may see that it triggered and you

1197
00:42:42,800 --> 00:42:44,079
may see the use of that happens but it

1198
00:42:44,079 --> 00:42:44,800
doesn't tell you

1199
00:42:44,800 --> 00:42:46,560
where it came from if the user was on

1200
00:42:46,560 --> 00:42:49,280
the system other forensic artifacts may

1201
00:42:49,280 --> 00:42:51,280
but if it's a fully remote attack you

1202
00:42:51,280 --> 00:42:53,920
have some more work to do

1203
00:42:53,920 --> 00:42:55,599
and so that's where you can come in to

1204
00:42:55,599 --> 00:42:57,839
help limit your attack vector

1205
00:42:57,839 --> 00:42:59,920
some of the best defense is turning off

1206
00:42:59,920 --> 00:43:02,160
things you don't use do you need wscript

1207
00:43:02,160 --> 00:43:04,800
do you need powershell do you need wmi

1208
00:43:04,800 --> 00:43:06,000
remotely connected

1209
00:43:06,000 --> 00:43:08,240
if the answer is no on any of these turn

1210
00:43:08,240 --> 00:43:09,839
them off

1211
00:43:09,839 --> 00:43:12,480
some many av tools also allow this in a

1212
00:43:12,480 --> 00:43:13,040
much

1213
00:43:13,040 --> 00:43:15,119
easier fashion than manually doing

1214
00:43:15,119 --> 00:43:16,640
registry modifications but

1215
00:43:16,640 --> 00:43:18,960
we're not all that lucky and then

1216
00:43:18,960 --> 00:43:19,680
finally

1217
00:43:19,680 --> 00:43:21,599
you can set up app locker to restrict

1218
00:43:21,599 --> 00:43:24,640
what can run on the system

1219
00:43:24,640 --> 00:43:27,040
and then here's the screenshot of wmi

1220
00:43:27,040 --> 00:43:28,400
again where we can see the

1221
00:43:28,400 --> 00:43:29,920
the permissions that you can actually

1222
00:43:29,920 --> 00:43:32,560
set that's where this ties in together

1223
00:43:32,560 --> 00:43:36,160
but that's it wmi in in a nutshell is a

1224
00:43:36,160 --> 00:43:37,520
very powerful tool

1225
00:43:37,520 --> 00:43:40,000
that allows you to do a lot of querying

1226
00:43:40,000 --> 00:43:41,040
but

1227
00:43:41,040 --> 00:43:42,800
you have to be very careful because the

1228
00:43:42,800 --> 00:43:44,800
same tools that as administered you can

1229
00:43:44,800 --> 00:43:46,560
use to get a lot of information and set

1230
00:43:46,560 --> 00:43:47,040
things

1231
00:43:47,040 --> 00:43:49,599
can also be used by attackers to do all

1232
00:43:49,599 --> 00:43:51,119
sorts of interesting things that you

1233
00:43:51,119 --> 00:43:52,960
don't want them to do

1234
00:43:52,960 --> 00:43:55,440
so if you have any questions please stay

1235
00:43:55,440 --> 00:43:56,960
around for the interactive portion

1236
00:43:56,960 --> 00:43:58,800
that's hopefully happening at the end of

1237
00:43:58,800 --> 00:43:59,920
this

1238
00:43:59,920 --> 00:44:03,440
and if not um follow me on twitter and

1239
00:44:03,440 --> 00:44:05,280
we can have a chat if you want anyway

1240
00:44:05,280 --> 00:44:06,880
thank you for coming to

1241
00:44:06,880 --> 00:44:09,440
wm i saw your cat the cat's been found

1242
00:44:09,440 --> 00:44:13,280
they're just gone evil

