1
00:00:49,239 --> 00:00:55,218
<font color="#CCCCCC">alright hi my name is dawn ankney I work</font>

2
00:00:53,719 --> 00:00:56,690
<font color="#E5E5E5">for Microsoft of online services</font>

3
00:00:55,219 --> 00:00:58,820
security compliance and I spend my<font color="#CCCCCC"> days</font>

4
00:00:56,690 --> 00:01:00,680
<font color="#E5E5E5">talking to developers mostly about how</font>

5
00:00:58,820 --> 00:01:03,500
not to do dumb things like a la

6
00:01:00,680 --> 00:01:05,269
cross-site scripting I'm bringing<font color="#CCCCCC"> up</font>

7
00:01:03,500 --> 00:01:07,040
what's pretty much<font color="#CCCCCC"> an old topics people</font>

8
00:01:05,269 --> 00:01:10,190
been talking about this since the<font color="#E5E5E5"> late</font>

9
00:01:07,040 --> 00:01:12,140
90s or so one<font color="#E5E5E5"> because it's getting worse</font>

10
00:01:10,190 --> 00:01:13,670
too because it's<font color="#E5E5E5"> becoming more</font>

11
00:01:12,140 --> 00:01:15,740
sophisticated and<font color="#CCCCCC"> three and most</font>

12
00:01:13,670 --> 00:01:17,570
importantly as I hear a lot<font color="#CCCCCC"> of really</font>

13
00:01:15,740 --> 00:01:20,149
bad advice being given about how to stop

14
00:01:17,570 --> 00:01:21,440
cross-site scripting so please if you

15
00:01:20,149 --> 00:01:22,820
think I'm one of those people giving bad

16
00:01:21,440 --> 00:01:26,270
advice let me know i'd love to<font color="#E5E5E5"> hear</font>

17
00:01:22,820 --> 00:01:28,038
better ideas in the<font color="#E5E5E5"> meantime here here's</font>

18
00:01:26,270 --> 00:01:30,500
why I've been<font color="#E5E5E5"> doing lately in this realm</font>

19
00:01:28,039 --> 00:01:32,090
first<font color="#E5E5E5"> of all this is my work this is not</font>

20
00:01:30,500 --> 00:01:35,140
part<font color="#E5E5E5"> of my day job so don't play</font>

21
00:01:32,090 --> 00:01:37,190
Microsoft if I make an ass of myself

22
00:01:35,140 --> 00:01:39,229
alright so today I want to talk about

23
00:01:37,190 --> 00:01:41,509
cross-site scripting first as a generic

24
00:01:39,229 --> 00:01:44,030
injection attack it really is the same

25
00:01:41,509 --> 00:01:45,460
class<font color="#E5E5E5"> attack as ldap injection or sequel</font>

26
00:01:44,030 --> 00:01:47,659
injection we can address it<font color="#E5E5E5"> in that way</font>

27
00:01:45,460 --> 00:01:49,839
talk a little bit about what<font color="#E5E5E5"> makes it</font>

28
00:01:47,659 --> 00:01:51,770
unique how to defend in general and

29
00:01:49,840 --> 00:01:53,090
because you'll see that's the most

30
00:01:51,770 --> 00:01:54,770
weight<font color="#CCCCCC"> I'm talking to developers</font><font color="#E5E5E5"> I'm</font>

31
00:01:53,090 --> 00:01:57,500
going to focus on web application

32
00:01:54,770 --> 00:01:59,660
development as the primary defense talk

33
00:01:57,500 --> 00:02:01,489
about<font color="#CCCCCC"> an architectural problem do show a</font>

34
00:01:59,660 --> 00:02:03,440
little proof of concept tool that I've

35
00:02:01,489 --> 00:02:05,750
started that<font color="#E5E5E5"> I'm going to</font><font color="#CCCCCC"> turn into an</font>

36
00:02:03,440 --> 00:02:08,478
actual you<font color="#CCCCCC"> know project manager skill</font>

37
00:02:05,750 --> 00:02:11,030
set runnable tool eventually and where

38
00:02:08,479 --> 00:02:13,790
we can<font color="#E5E5E5"> go from here so to define the</font>

39
00:02:11,030 --> 00:02:15,500
problem<font color="#E5E5E5"> injection flaws are very common</font>

40
00:02:13,790 --> 00:02:17,209
they aren't just sequel objection as you

41
00:02:15,500 --> 00:02:19,760
most likely know<font color="#CCCCCC"> a for cross-site</font>

42
00:02:17,209 --> 00:02:22,340
scripting you can inject ldap<font color="#E5E5E5"> XML Python</font>

43
00:02:19,760 --> 00:02:24,910
Ruby you see lots of PHP injection

44
00:02:22,340 --> 00:02:28,099
attacks in the early 2000s late 90s and

45
00:02:24,910 --> 00:02:29,959
javascript is simply<font color="#CCCCCC"> cross scripting is</font>

46
00:02:28,099 --> 00:02:31,910
basically<font color="#E5E5E5"> JavaScript injection just like</font>

47
00:02:29,959 --> 00:02:33,980
any of<font color="#CCCCCC"> these and we can address it in</font>

48
00:02:31,910 --> 00:02:35,480
that way<font color="#E5E5E5"> but those of you who are</font>

49
00:02:33,980 --> 00:02:37,549
developers no sequel injection we have a

50
00:02:35,480 --> 00:02:41,209
better tool there but like<font color="#E5E5E5"> we dress all</font>

51
00:02:37,550 --> 00:02:43,220
the other ones so<font color="#CCCCCC"> to prevent it a single</font>

52
00:02:41,209 --> 00:02:44,810
objection attack of any sort always keep

53
00:02:43,220 --> 00:02:46,760
track of your trust boundaries know what

54
00:02:44,810 --> 00:02:48,440
is your application what is not your

55
00:02:46,760 --> 00:02:50,659
application and don't trust anything

56
00:02:48,440 --> 00:02:52,489
that isn't your application validate or

57
00:02:50,659 --> 00:02:53,780
sanitize your inputs there are two

58
00:02:52,489 --> 00:02:55,700
different<font color="#CCCCCC"> things a lot of people</font><font color="#E5E5E5"> don't</font>

59
00:02:53,780 --> 00:02:57,560
<font color="#E5E5E5">make the distinction validating your</font>

60
00:02:55,700 --> 00:02:58,790
<font color="#E5E5E5">inputs says true or</font><font color="#CCCCCC"> false this think</font>

61
00:02:57,560 --> 00:03:01,340
that meets my expectation

62
00:02:58,790 --> 00:03:03,858
and sanitizing says take this input and

63
00:03:01,340 --> 00:03:06,109
make it meet my expectations the former

64
00:03:03,859 --> 00:03:07,519
is going to be more conservative from a

65
00:03:06,109 --> 00:03:09,590
security perspective the second is to be

66
00:03:07,519 --> 00:03:11,900
more liberal but their business cases

67
00:03:09,590 --> 00:03:13,310
are both properly encode<font color="#CCCCCC"> your outputs</font>

68
00:03:11,900 --> 00:03:14,959
that<font color="#E5E5E5"> means first knowing what your</font>

69
00:03:13,310 --> 00:03:17,000
outputs are commonly that's gonna be

70
00:03:14,959 --> 00:03:19,280
<font color="#CCCCCC">HTML which may be putting things into an</font>

71
00:03:17,000 --> 00:03:21,079
<font color="#E5E5E5">XML feed maybe putting them into a JSON</font>

72
00:03:19,280 --> 00:03:23,239
object<font color="#E5E5E5"> whatever so you want to encode</font>

73
00:03:21,079 --> 00:03:25,730
properly for whatever your output

74
00:03:23,239 --> 00:03:27,980
<font color="#CCCCCC">purpose is you want to use whitelists</font>

75
00:03:25,730 --> 00:03:30,700
not<font color="#CCCCCC"> blacklists if blacklists work we</font>

76
00:03:27,980 --> 00:03:32,780
would<font color="#E5E5E5"> have solved spam by now so a</font>

77
00:03:30,700 --> 00:03:34,280
whitelist for those you don't<font color="#E5E5E5"> know is</font>

78
00:03:32,780 --> 00:03:35,989
saying here is what<font color="#E5E5E5"> I expect anything</font>

79
00:03:34,280 --> 00:03:38,389
that matches is good everything else we

80
00:03:35,989 --> 00:03:40,849
exclude a<font color="#E5E5E5"> blacklist would be saying here</font>

81
00:03:38,389 --> 00:03:42,109
are simply known bats and there are more

82
00:03:40,849 --> 00:03:44,358
bad guys<font color="#CCCCCC"> and there are people working on</font>

83
00:03:42,109 --> 00:03:46,189
the white hat side so whitelist again

84
00:03:44,359 --> 00:03:47,810
are always the best<font color="#CCCCCC"> way exercise the</font>

85
00:03:46,189 --> 00:03:49,970
principle<font color="#E5E5E5"> of least privilege that means</font>

86
00:03:47,810 --> 00:03:52,069
everything chef only enough permission

87
00:03:49,970 --> 00:03:54,109
to do exactly<font color="#E5E5E5"> what it needs and nothing</font>

88
00:03:52,069 --> 00:03:56,238
else that<font color="#CCCCCC"> doesn't just apply to user</font>

89
00:03:54,109 --> 00:03:58,579
permissions that also applies to<font color="#E5E5E5"> your</font>

90
00:03:56,239 --> 00:04:01,040
whitelists make them only<font color="#E5E5E5"> is permissive</font>

91
00:03:58,579 --> 00:04:03,079
as they need<font color="#E5E5E5"> to be and no more</font>

92
00:04:01,040 --> 00:04:04,638
permissive and just general web

93
00:04:03,079 --> 00:04:06,470
application is validate your assumptions

94
00:04:04,639 --> 00:04:07,699
a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> people where I'm seeing</font>

95
00:04:06,470 --> 00:04:09,650
cross-site scripting errors people are

96
00:04:07,699 --> 00:04:11,659
assuming they're outputting to HTML

97
00:04:09,650 --> 00:04:13,459
relying<font color="#CCCCCC"> easy on HTML coding entire</font>

98
00:04:11,659 --> 00:04:15,349
leaves their defense and then the

99
00:04:13,459 --> 00:04:19,548
application changes with a ipod<font color="#CCCCCC"> XML</font><font color="#E5E5E5"> and</font>

100
00:04:15,349 --> 00:04:20,899
then their host so trust boundaries just

101
00:04:19,548 --> 00:04:22,729
a quick diagram to show what I'm talking

102
00:04:20,899 --> 00:04:24,948
about<font color="#CCCCCC"> is your application is the</font>

103
00:04:22,729 --> 00:04:26,690
triangle and everything outside is a

104
00:04:24,949 --> 00:04:28,699
trust boundary every time<font color="#E5E5E5"> you cross</font>

105
00:04:26,690 --> 00:04:30,919
cross<font color="#E5E5E5"> at us by dre going in or going out</font>

106
00:04:28,699 --> 00:04:33,440
you need<font color="#E5E5E5"> to do something to make the</font>

107
00:04:30,919 --> 00:04:35,510
inputs be valid a sanitized<font color="#E5E5E5"> n encode and</font>

108
00:04:33,440 --> 00:04:37,340
keep in mind that it's not just web

109
00:04:35,510 --> 00:04:40,250
<font color="#CCCCCC">request coming from the</font><font color="#E5E5E5"> users forms</font>

110
00:04:37,340 --> 00:04:41,750
headers cookies<font color="#E5E5E5"> Ajax files anything</font><font color="#CCCCCC"> that</font>

111
00:04:40,250 --> 00:04:44,030
comes across your database isn't

112
00:04:41,750 --> 00:04:47,030
necessarily sequel there's ldap their

113
00:04:44,030 --> 00:04:48,289
web data stores you know<font color="#E5E5E5"> fancy sort of</font>

114
00:04:47,030 --> 00:04:50,359
SkyDrive things like we haven't

115
00:04:48,289 --> 00:04:52,340
<font color="#CCCCCC">Microsoft and your system doesn't just</font>

116
00:04:50,360 --> 00:04:53,870
isn't just files think about things

117
00:04:52,340 --> 00:04:56,210
going from other processes if you're in

118
00:04:53,870 --> 00:04:59,060
a<font color="#E5E5E5"> complex environment as</font><font color="#CCCCCC"> well as any</font>

119
00:04:56,210 --> 00:05:00,109
services so cross-site scripting is a

120
00:04:59,060 --> 00:05:02,389
little different than most of these

121
00:05:00,110 --> 00:05:03,680
because<font color="#E5E5E5"> most objection flaws if you're</font>

122
00:05:02,389 --> 00:05:06,050
thinking sequel injection or attacks

123
00:05:03,680 --> 00:05:07,430
against your server they're changing the

124
00:05:06,050 --> 00:05:08,690
state of<font color="#CCCCCC"> your server they're getting</font>

125
00:05:07,430 --> 00:05:10,520
data from your server they're injecting

126
00:05:08,690 --> 00:05:12,280
down into your server and cross-site

127
00:05:10,520 --> 00:05:15,370
scripting directly injects<font color="#E5E5E5"> into your</font>

128
00:05:12,280 --> 00:05:17,049
client that means your end user is the

129
00:05:15,370 --> 00:05:18,639
bearing the brunt of this attack and it

130
00:05:17,050 --> 00:05:20,680
runs arbitrary code in their browser and

131
00:05:18,639 --> 00:05:22,060
if you're<font color="#E5E5E5"> involved in a business</font>

132
00:05:20,680 --> 00:05:24,280
environment to keep in mind<font color="#CCCCCC"> that that</font>

133
00:05:22,060 --> 00:05:26,139
browser is behind your firewall and an

134
00:05:24,280 --> 00:05:28,419
attacker is running arbitrary code on it

135
00:05:26,139 --> 00:05:29,800
so they can do anything<font color="#CCCCCC"> that your user</font>

136
00:05:28,419 --> 00:05:31,690
can do they're acting in that user

137
00:05:29,800 --> 00:05:34,120
security context so this is really the

138
00:05:31,690 --> 00:05:35,730
<font color="#E5E5E5">input or the impact if you're working in</font>

139
00:05:34,120 --> 00:05:37,840
<font color="#E5E5E5">a corporate or business environment</font>

140
00:05:35,730 --> 00:05:39,160
they're nasty things you can do<font color="#CCCCCC"> and this</font>

141
00:05:37,840 --> 00:05:41,380
<font color="#E5E5E5">is</font><font color="#CCCCCC"> just a stock slide I'm sure everybody</font>

142
00:05:39,160 --> 00:05:44,440
<font color="#CCCCCC">seen before control it appears on screen</font>

143
00:05:41,380 --> 00:05:46,570
for<font color="#CCCCCC"> Chanel</font><font color="#E5E5E5"> indication interface you have</font>

144
00:05:44,440 --> 00:05:48,219
access to the history<font color="#CCCCCC"> so if you're going</font>

145
00:05:46,570 --> 00:05:49,690
to<font color="#CCCCCC"> a site the stores it's a session</font>

146
00:05:48,220 --> 00:05:51,040
<font color="#CCCCCC">token' in your get statement it's in</font>

147
00:05:49,690 --> 00:05:53,140
your history they now have your session

148
00:05:51,040 --> 00:05:55,060
and can act as you on that application I

149
00:05:53,140 --> 00:05:57,159
can intercept your cookies of people

150
00:05:55,060 --> 00:05:58,450
have designed the application poorly and

151
00:05:57,160 --> 00:06:00,280
it can enumerate your network you<font color="#E5E5E5"> can</font>

152
00:05:58,450 --> 00:06:01,930
simply<font color="#E5E5E5"> say what else is on this network</font>

153
00:06:00,280 --> 00:06:04,390
that I can reach from<font color="#E5E5E5"> the client browser</font>

154
00:06:01,930 --> 00:06:06,669
and any server that your user can reach

155
00:06:04,390 --> 00:06:08,950
the<font color="#E5E5E5"> tiger can</font><font color="#CCCCCC"> now reach</font><font color="#E5E5E5"> the JavaScript</font>

156
00:06:06,669 --> 00:06:11,530
so a quick<font color="#E5E5E5"> overview of what cross-site</font>

157
00:06:08,950 --> 00:06:13,300
scripting is the first type is reflected

158
00:06:11,530 --> 00:06:16,690
cross-site scripting so an attacker

159
00:06:13,300 --> 00:06:18,370
sends an attack string URL commonly in a

160
00:06:16,690 --> 00:06:20,770
phishing attack to a user who clicks on

161
00:06:18,370 --> 00:06:22,419
it it goes to what sends the attack to

162
00:06:20,770 --> 00:06:24,549
the web application and the victim

163
00:06:22,419 --> 00:06:26,490
browser will render whatever the<font color="#E5E5E5"> attack</font>

164
00:06:24,550 --> 00:06:28,780
string is and commonly this will be to

165
00:06:26,490 --> 00:06:33,180
execute<font color="#E5E5E5"> JavaScript from a third party</font>

166
00:06:28,780 --> 00:06:35,830
site say evil<font color="#E5E5E5"> com this is a</font>

167
00:06:33,180 --> 00:06:37,450
non-persistent attack so it doesn't

168
00:06:35,830 --> 00:06:39,010
persist across users only the user who

169
00:06:37,450 --> 00:06:40,390
clicks on the link or<font color="#E5E5E5"> the link is loaded</font>

170
00:06:39,010 --> 00:06:42,430
for them think in the context of an

171
00:06:40,390 --> 00:06:43,930
image loading is a victim to it<font color="#E5E5E5"> only</font>

172
00:06:42,430 --> 00:06:46,180
works in<font color="#E5E5E5"> the context of a single session</font>

173
00:06:43,930 --> 00:06:47,919
it doesn't persist across them and it

174
00:06:46,180 --> 00:06:50,979
<font color="#E5E5E5">only works on a single page so it's only</font>

175
00:06:47,919 --> 00:06:52,990
the page to which the person clicked it

176
00:06:50,979 --> 00:06:55,030
only affects the user who submits the

177
00:06:52,990 --> 00:06:57,070
malicious URL it's not something they

178
00:06:55,030 --> 00:06:59,530
can cross user contexts and this is

179
00:06:57,070 --> 00:07:01,900
really relatively easy to detect<font color="#CCCCCC"> we</font><font color="#E5E5E5"> I</font>

180
00:06:59,530 --> 00:07:03,460
scatter or a buzzer most of your

181
00:07:01,900 --> 00:07:06,130
cross-site scripting things are going to

182
00:07:03,460 --> 00:07:07,719
see<font color="#E5E5E5"> that are doing web application</font>

183
00:07:06,130 --> 00:07:08,950
vulnerability scanning our scanning only

184
00:07:07,720 --> 00:07:11,440
for<font color="#E5E5E5"> this type of cross-site scripting</font>

185
00:07:08,950 --> 00:07:13,000
because it's a single I send you a piece

186
00:07:11,440 --> 00:07:14,740
<font color="#CCCCCC">of data I get something</font><font color="#E5E5E5"> back and</font><font color="#CCCCCC"> it's</font>

187
00:07:13,000 --> 00:07:18,070
very easy to evaluate whether or not

188
00:07:14,740 --> 00:07:19,349
there was vulnerability there the second

189
00:07:18,070 --> 00:07:21,490
type is persistent cross-site scripting

190
00:07:19,349 --> 00:07:23,800
where an attacker will send an attack

191
00:07:21,490 --> 00:07:24,969
string to a web<font color="#CCCCCC"> page not to a user with</font>

192
00:07:23,800 --> 00:07:26,499
to a web<font color="#CCCCCC"> page where it gets</font>

193
00:07:24,969 --> 00:07:28,360
towards somehow usually in the database

194
00:07:26,499 --> 00:07:30,459
and<font color="#CCCCCC"> then any victim who looks at the</font>

195
00:07:28,360 --> 00:07:32,199
vulnerable page will see this attack

196
00:07:30,459 --> 00:07:35,349
stream have whatever that javascript is

197
00:07:32,199 --> 00:07:36,909
executed in the browser so here<font color="#E5E5E5"> we have</font>

198
00:07:35,349 --> 00:07:38,829
something that<font color="#CCCCCC"> can persist across to all</font>

199
00:07:36,909 --> 00:07:42,099
three of those those variables users and

200
00:07:38,829 --> 00:07:43,449
sessions and the<font color="#E5E5E5"> pages it can depend I</font>

201
00:07:42,099 --> 00:07:45,759
mean those aren't all hundred percent

202
00:07:43,449 --> 00:07:47,199
real on the context in application but

203
00:07:45,759 --> 00:07:49,779
this<font color="#E5E5E5"> is the most dangerous in the sense</font>

204
00:07:47,199 --> 00:07:51,459
that if I find one vulnerability every

205
00:07:49,779 --> 00:07:53,558
user he goes to<font color="#E5E5E5"> that page is affected so</font>

206
00:07:51,459 --> 00:07:55,209
this much more widespread<font color="#E5E5E5"> and it's very</font>

207
00:07:53,559 --> 00:07:57,339
difficult to attacked via scanning it

208
00:07:55,209 --> 00:07:59,319
and buzzing because it's usually<font color="#CCCCCC"> not the</font>

209
00:07:57,339 --> 00:08:01,089
page where you submit to<font color="#E5E5E5"> but another</font>

210
00:07:59,319 --> 00:08:03,069
page that can be can be the victim page

211
00:08:01,089 --> 00:08:04,360
from this so there<font color="#E5E5E5"> are a lot of paths</font>

212
00:08:03,069 --> 00:08:06,339
<font color="#E5E5E5">through an</font><font color="#CCCCCC"> application or data can go</font>

213
00:08:04,360 --> 00:08:08,319
and scanning would create a lot of<font color="#CCCCCC"> noise</font>

214
00:08:06,339 --> 00:08:10,209
because you have<font color="#CCCCCC"> to inject to every page</font>

215
00:08:08,319 --> 00:08:12,219
in a system and the scanned every page

216
00:08:10,209 --> 00:08:13,929
of the system<font color="#E5E5E5"> and you'll see what that's</font>

217
00:08:12,219 --> 00:08:15,159
part of what the little tool I put

218
00:08:13,929 --> 00:08:16,869
<font color="#CCCCCC">together the proof of</font><font color="#E5E5E5"> concept does and</font>

219
00:08:15,159 --> 00:08:18,479
you'll see the logs how it just flies

220
00:08:16,869 --> 00:08:21,159
three or even of small number of pages

221
00:08:18,479 --> 00:08:24,489
and generally we this is best identified

222
00:08:21,159 --> 00:08:26,558
by code analysis there's now a sort of a

223
00:08:24,489 --> 00:08:29,498
third group<font color="#E5E5E5"> of cross-site scripting that</font>

224
00:08:26,559 --> 00:08:31,479
I'm seeing in the wild now which is<font color="#CCCCCC"> a</font>

225
00:08:29,499 --> 00:08:33,339
sort<font color="#E5E5E5"> of hybrid between the two and so</font>

226
00:08:31,479 --> 00:08:34,598
<font color="#E5E5E5">that it is a form of persistent</font>

227
00:08:33,339 --> 00:08:36,459
cross-site scripting but it's not stored

228
00:08:34,599 --> 00:08:39,459
<font color="#E5E5E5">in a database is stored in something</font>

229
00:08:36,458 --> 00:08:41,318
that's tied to this session so it's

230
00:08:39,458 --> 00:08:44,559
really good for a single session on

231
00:08:41,318 --> 00:08:45,699
attack your sense of attack URL likely

232
00:08:44,559 --> 00:08:47,529
would for a reflected cross-site

233
00:08:45,699 --> 00:08:49,540
scripting to it gets clicked it gets

234
00:08:47,529 --> 00:08:51,250
loaded whatever it goes to a<font color="#E5E5E5"> web page</font>

235
00:08:49,540 --> 00:08:52,629
stores in the session data on the<font color="#CCCCCC"> sebi</font>

236
00:08:51,250 --> 00:08:54,100
session data<font color="#CCCCCC"> it's persistent</font><font color="#E5E5E5"> and RAM on</font>

237
00:08:52,629 --> 00:08:55,750
the server might be written to a

238
00:08:54,100 --> 00:08:58,750
temporary file<font color="#E5E5E5"> I be stored to the user</font>

239
00:08:55,750 --> 00:09:00,250
cookie but it's<font color="#E5E5E5"> not in the database so</font>

240
00:08:58,750 --> 00:09:01,480
it's only persistent for<font color="#CCCCCC"> the</font><font color="#E5E5E5"> session and</font>

241
00:09:00,250 --> 00:09:03,689
then when they<font color="#E5E5E5"> either go back to the</font>

242
00:09:01,480 --> 00:09:06,220
same<font color="#CCCCCC"> web page or to another web page</font>

243
00:09:03,689 --> 00:09:07,719
then their<font color="#CCCCCC"> victims</font><font color="#E5E5E5"> this attack and this</font>

244
00:09:06,220 --> 00:09:09,850
is really insidious in that in many

245
00:09:07,720 --> 00:09:11,649
<font color="#CCCCCC">cases the order in which you go through</font>

246
00:09:09,850 --> 00:09:13,240
an application will depend on whether<font color="#E5E5E5"> or</font>

247
00:09:11,649 --> 00:09:15,160
<font color="#E5E5E5">not you're vulnerable to this this</font>

248
00:09:13,240 --> 00:09:16,660
attack it because very difficult to

249
00:09:15,160 --> 00:09:19,269
detect these from the outside because

250
00:09:16,660 --> 00:09:20,500
you have to then enumerate a web

251
00:09:19,269 --> 00:09:22,449
application through every possible

252
00:09:20,500 --> 00:09:24,610
sequence of pages with every possible

253
00:09:22,449 --> 00:09:26,290
input<font color="#CCCCCC"> I if you just think about the math</font>

254
00:09:24,610 --> 00:09:27,610
of that of your 10 pages get something

255
00:09:26,290 --> 00:09:30,309
like 10 billion possible combinations

256
00:09:27,610 --> 00:09:32,230
there over a TCP connection<font color="#CCCCCC"> even on a</font>

257
00:09:30,309 --> 00:09:34,209
virtual machine that takes a lot of<font color="#CCCCCC"> time</font>

258
00:09:32,230 --> 00:09:35,350
is incredibly noisy so this would not be

259
00:09:34,210 --> 00:09:38,200
something<font color="#E5E5E5"> you could do in a production</font>

260
00:09:35,350 --> 00:09:39,700
environment second as<font color="#CCCCCC"> I mentioned these</font>

261
00:09:38,200 --> 00:09:42,400
do not persist across sessions they do

262
00:09:39,700 --> 00:09:44,530
persist across pages they may persist

263
00:09:42,400 --> 00:09:46,360
across use sometimes such information is

264
00:09:44,530 --> 00:09:48,670
tied to the who's currently online

265
00:09:46,360 --> 00:09:50,890
functionality so if in that case<font color="#CCCCCC"> the</font>

266
00:09:48,670 --> 00:09:52,599
<font color="#CCCCCC">username were allowed to be vulnerable</font>

267
00:09:50,890 --> 00:09:54,640
to cross-site scripting other people

268
00:09:52,600 --> 00:09:56,650
could be impacted<font color="#CCCCCC"> by</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> the hybrid XSS</font>

269
00:09:54,640 --> 00:09:58,390
attack and for reasons I've just talked

270
00:09:56,650 --> 00:10:01,449
about<font color="#E5E5E5"> this is extremely extremely</font>

271
00:09:58,390 --> 00:10:03,520
difficult to detect remotely detecting

272
00:10:01,450 --> 00:10:05,740
injection<font color="#E5E5E5"> flaws remotely have a couple</font>

273
00:10:03,520 --> 00:10:07,510
of ways of doing it pretty much scanning

274
00:10:05,740 --> 00:10:09,070
I think<font color="#CCCCCC"> I've pretty much already talked</font>

275
00:10:07,510 --> 00:10:10,750
about<font color="#E5E5E5"> you have a simple visor which</font>

276
00:10:09,070 --> 00:10:13,750
sends an attack screen and checks for

277
00:10:10,750 --> 00:10:15,190
prop'ly encoded returns the most

278
00:10:13,750 --> 00:10:16,840
difficult<font color="#CCCCCC"> part here is maintaining a</font>

279
00:10:15,190 --> 00:10:19,090
list of current<font color="#E5E5E5"> attack strings there are</font>

280
00:10:16,840 --> 00:10:21,040
lots of them out there my<font color="#E5E5E5"> favorite</font>

281
00:10:19,090 --> 00:10:22,720
happens to be the the olas project the

282
00:10:21,040 --> 00:10:25,030
<font color="#CCCCCC">Cal 9000 which allows you to build</font>

283
00:10:22,720 --> 00:10:26,350
attack screams<font color="#E5E5E5"> customized and even try</font>

284
00:10:25,030 --> 00:10:28,420
<font color="#E5E5E5">and create your</font><font color="#CCCCCC"> own but there's a</font><font color="#E5E5E5"> fairly</font>

285
00:10:26,350 --> 00:10:29,680
comprehensive current generation of

286
00:10:28,420 --> 00:10:32,140
attacks that's available through that

287
00:10:29,680 --> 00:10:34,180
and it's basically<font color="#E5E5E5"> checking when i send</font>

288
00:10:32,140 --> 00:10:36,270
an attack string does it<font color="#E5E5E5"> come back in a</font>

289
00:10:34,180 --> 00:10:38,770
way that will be executable by a browser

290
00:10:36,270 --> 00:10:40,420
<font color="#E5E5E5">it's scanning for persistent</font>

291
00:10:38,770 --> 00:10:42,390
vulnerabilities is really really

292
00:10:40,420 --> 00:10:44,229
immature at this point simply<font color="#E5E5E5"> because</font>

293
00:10:42,390 --> 00:10:46,240
when you're scanning for the outside<font color="#E5E5E5"> you</font>

294
00:10:44,230 --> 00:10:47,980
can simply<font color="#E5E5E5"> look at cause and effect you</font>

295
00:10:46,240 --> 00:10:49,600
have no internal representation of the

296
00:10:47,980 --> 00:10:51,550
data you don't know what's currently in

297
00:10:49,600 --> 00:10:53,760
the database you don't know where the

298
00:10:51,550 --> 00:10:55,930
<font color="#CCCCCC">fly is you</font><font color="#E5E5E5"> don't know if this is in not</font>

299
00:10:53,760 --> 00:10:57,100
when you're doing is sanitizing or if

300
00:10:55,930 --> 00:10:59,680
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> when</font><font color="#E5E5E5"> you're doing your coding</font>

301
00:10:57,100 --> 00:11:02,920
that's causing the flaws the causing the

302
00:10:59,680 --> 00:11:05,290
flaw and also again it's extremely

303
00:11:02,920 --> 00:11:07,000
<font color="#CCCCCC">not've extremely extremely noisy so it's</font>

304
00:11:05,290 --> 00:11:08,530
either going to hose the site through a

305
00:11:07,000 --> 00:11:10,420
denial of service it's going to make

306
00:11:08,530 --> 00:11:12,280
very clear the site's been attacked by

307
00:11:10,420 --> 00:11:13,780
having strings scattering all the way

308
00:11:12,280 --> 00:11:15,100
throughout the application what's going

309
00:11:13,780 --> 00:11:16,449
to<font color="#E5E5E5"> trigger something in a log hopefully</font>

310
00:11:15,100 --> 00:11:17,800
that the system administrator is

311
00:11:16,450 --> 00:11:20,920
watching for lots of attacks strings

312
00:11:17,800 --> 00:11:23,949
coming through in their logs detecting

313
00:11:20,920 --> 00:11:25,420
injection flaws locally is a much more

314
00:11:23,950 --> 00:11:27,580
<font color="#E5E5E5">interesting here because it works across</font>

315
00:11:25,420 --> 00:11:29,589
techniques you have static and dynamic

316
00:11:27,580 --> 00:11:31,690
cone of code analysis static code

317
00:11:29,590 --> 00:11:33,160
analysis looks at the source<font color="#CCCCCC"> code is</font>

318
00:11:31,690 --> 00:11:36,010
there something that's known<font color="#CCCCCC"> to be wrong</font>

319
00:11:33,160 --> 00:11:38,439
in the source<font color="#E5E5E5"> code and I</font><font color="#CCCCCC"> namak analysis</font>

320
00:11:36,010 --> 00:11:40,569
is<font color="#CCCCCC"> about the application</font><font color="#E5E5E5"> state what is</font>

321
00:11:38,440 --> 00:11:42,280
the current internal<font color="#E5E5E5"> representation of</font>

322
00:11:40,570 --> 00:11:45,670
the inputs the outputs in the

323
00:11:42,280 --> 00:11:48,069
application static code analysis must

324
00:11:45,670 --> 00:11:49,510
basic technique is manual code review

325
00:11:48,070 --> 00:11:51,340
right you're going to go line by line

326
00:11:49,510 --> 00:11:52,840
through the code and try to<font color="#E5E5E5"> find places</font>

327
00:11:51,340 --> 00:11:54,820
where something doesn't look right

328
00:11:52,840 --> 00:11:56,350
you'll see<font color="#E5E5E5"> an example of some code</font><font color="#CCCCCC"> that</font>

329
00:11:54,820 --> 00:11:58,810
simply doesn't look like even though I

330
00:11:56,350 --> 00:12:01,330
use<font color="#CCCCCC"> one of these tools</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> find it I'm</font>

331
00:11:58,810 --> 00:12:04,479
the<font color="#CCCCCC"> f static code analyzers</font><font color="#E5E5E5"> pixi works</font>

332
00:12:01,330 --> 00:12:07,480
on PHP for compatible cat does Microsoft

333
00:12:04,480 --> 00:12:08,980
tool that<font color="#E5E5E5"> works on asp.net and</font><font color="#CCCCCC"> then the</font>

334
00:12:07,480 --> 00:12:10,540
code secure is another commercial tool

335
00:12:08,980 --> 00:12:13,300
that works<font color="#E5E5E5"> across several language so</font>

336
00:12:10,540 --> 00:12:15,219
there are many many many of these if<font color="#E5E5E5"> you</font>

337
00:12:13,300 --> 00:12:16,449
have multiple developers you actually

338
00:12:15,220 --> 00:12:18,310
<font color="#E5E5E5">have development culture which you're at</font>

339
00:12:16,450 --> 00:12:19,630
your company<font color="#E5E5E5"> or in your environment find</font>

340
00:12:18,310 --> 00:12:23,079
a tool<font color="#CCCCCC"> that works and make it part of</font>

341
00:12:19,630 --> 00:12:24,790
your testing process static analysis

342
00:12:23,080 --> 00:12:27,790
looks with several things first we're

343
00:12:24,790 --> 00:12:30,160
looking at input sanitization you can't

344
00:12:27,790 --> 00:12:31,920
really<font color="#E5E5E5"> decide if it's good or bad input</font>

345
00:12:30,160 --> 00:12:34,990
sanitization with<font color="#CCCCCC"> a static code analyzer</font>

346
00:12:31,920 --> 00:12:38,530
you could tell simply is it there or is

347
00:12:34,990 --> 00:12:40,120
it<font color="#CCCCCC"> not there when it comes down to the</font>

348
00:12:38,530 --> 00:12:42,310
limits of computability as to whether

349
00:12:40,120 --> 00:12:45,010
you<font color="#E5E5E5"> can't really know what the code does</font>

350
00:12:42,310 --> 00:12:46,300
without executing the code yep you can

351
00:12:45,010 --> 00:12:48,130
check for output encoding and making

352
00:12:46,300 --> 00:12:50,560
sure<font color="#CCCCCC"> that both the application you know</font>

353
00:12:48,130 --> 00:12:52,689
this is HTML or outputting full HTML

354
00:12:50,560 --> 00:12:54,699
encoding and the character encoding so

355
00:12:52,690 --> 00:12:57,630
are we rendering this<font color="#E5E5E5"> is utf-8 is this</font>

356
00:12:54,700 --> 00:12:59,620
going to be a multibyte encoded

357
00:12:57,630 --> 00:13:01,689
applicant and we could<font color="#E5E5E5"> look at the data</font>

358
00:12:59,620 --> 00:13:03,970
flow is there anything that<font color="#CCCCCC"> comes in</font>

359
00:13:01,690 --> 00:13:06,040
<font color="#E5E5E5">from a user stored anywhere processed</font>

360
00:13:03,970 --> 00:13:08,080
anywhere there goes back to the<font color="#CCCCCC"> same</font>

361
00:13:06,040 --> 00:13:09,520
user or another user without crossing

362
00:13:08,080 --> 00:13:12,190
both of our bits of code for

363
00:13:09,520 --> 00:13:13,600
sanitization and output encoding if it

364
00:13:12,190 --> 00:13:15,820
does<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you have a vulnerability path</font>

365
00:13:13,600 --> 00:13:17,380
it's not necessarily vulnerability but

366
00:13:15,820 --> 00:13:19,150
it's worth looking<font color="#E5E5E5"> at through a manual</font>

367
00:13:17,380 --> 00:13:21,730
process to look at the code as<font color="#E5E5E5"> it goes</font>

368
00:13:19,150 --> 00:13:22,810
through<font color="#E5E5E5"> their dynamic code analysis is</font>

369
00:13:21,730 --> 00:13:26,830
really the<font color="#CCCCCC"> only way to</font><font color="#E5E5E5"> consider</font>

370
00:13:22,810 --> 00:13:28,060
application state which impact means

371
00:13:26,830 --> 00:13:29,860
it's also<font color="#E5E5E5"> the only way to really look at</font>

372
00:13:28,060 --> 00:13:31,660
<font color="#E5E5E5">persistent and hybrid cross site</font>

373
00:13:29,860 --> 00:13:32,920
scripting you can find some of it in

374
00:13:31,660 --> 00:13:34,270
<font color="#CCCCCC">your code analysis</font><font color="#E5E5E5"> through static code</font>

375
00:13:32,920 --> 00:13:36,099
analysis but if you<font color="#E5E5E5"> really want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> see</font>

376
00:13:34,270 --> 00:13:38,680
what's happening application you have<font color="#E5E5E5"> to</font>

377
00:13:36,100 --> 00:13:40,690
go dynamic<font color="#E5E5E5"> I remember that</font><font color="#CCCCCC"> the internal</font>

378
00:13:38,680 --> 00:13:42,880
representation of the data is the most

379
00:13:40,690 --> 00:13:45,550
dangerous<font color="#CCCCCC"> point because whether the</font>

380
00:13:42,880 --> 00:13:46,990
cause and the<font color="#CCCCCC"> effect are the results but</font>

381
00:13:45,550 --> 00:13:50,849
if<font color="#E5E5E5"> you're developing an application from</font>

382
00:13:46,990 --> 00:13:53,740
scratch how that<font color="#E5E5E5"> application is how the</font>

383
00:13:50,850 --> 00:13:55,330
user input up it is represented internal

384
00:13:53,740 --> 00:13:57,400
to the application is really<font color="#E5E5E5"> what</font>

385
00:13:55,330 --> 00:13:58,960
generates the<font color="#E5E5E5"> risk if you're storing it</font>

386
00:13:57,400 --> 00:13:59,340
in a nerd state which absolutely<font color="#E5E5E5"> cannot</font>

387
00:13:58,960 --> 00:14:02,010
be

388
00:13:59,340 --> 00:14:03,270
cute no matter what then you have to do

389
00:14:02,010 --> 00:14:06,990
something to make it<font color="#E5E5E5"> executable on the</font>

390
00:14:03,270 --> 00:14:08,790
browser so<font color="#CCCCCC"> it makes it a much much safer</font>

391
00:14:06,990 --> 00:14:12,030
way to do things there aren't a lot of

392
00:14:08,790 --> 00:14:13,530
existing tools there are Muslim that are

393
00:14:12,030 --> 00:14:17,160
our intuition prevention system style

394
00:14:13,530 --> 00:14:18,360
things you could think<font color="#E5E5E5"> about I've can't</font>

395
00:14:17,160 --> 00:14:20,310
believe there's a product I'm blanking

396
00:14:18,360 --> 00:14:22,920
out the subnets base that runs between I

397
00:14:20,310 --> 00:14:24,479
is and net they won't<font color="#CCCCCC"> allow you to</font>

398
00:14:22,920 --> 00:14:27,030
<font color="#E5E5E5">execute any code that's vulnerable</font>

399
00:14:24,480 --> 00:14:29,250
through signature-based things there are

400
00:14:27,030 --> 00:14:30,329
there are web application gateways that

401
00:14:29,250 --> 00:14:32,250
can be either at the incoming or

402
00:14:30,330 --> 00:14:33,690
outgoing perimeter but basically look at

403
00:14:32,250 --> 00:14:35,460
state there there are lots of ways to do

404
00:14:33,690 --> 00:14:37,290
it that our intrusion protection but

405
00:14:35,460 --> 00:14:38,820
very few that<font color="#E5E5E5"> will help you develop</font>

406
00:14:37,290 --> 00:14:41,670
<font color="#E5E5E5">better code in terms of dynamic code</font>

407
00:14:38,820 --> 00:14:43,920
analysis at this point defending it

408
00:14:41,670 --> 00:14:46,319
across site scripting and this is this

409
00:14:43,920 --> 00:14:47,610
is really<font color="#E5E5E5"> I hope to be the meat of the</font>

410
00:14:46,320 --> 00:14:49,070
talk here is that there are three

411
00:14:47,610 --> 00:14:52,170
control points for cross-site scripting

412
00:14:49,070 --> 00:14:54,240
you have the browser browsers don't

413
00:14:52,170 --> 00:14:56,130
necessarily render things the same and

414
00:14:54,240 --> 00:14:57,660
browser manufacturers frankly need to do

415
00:14:56,130 --> 00:14:59,939
a better job that they are about writing

416
00:14:57,660 --> 00:15:02,150
browsers you have the web application

417
00:14:59,940 --> 00:15:04,800
itself this is where the developer of

418
00:15:02,150 --> 00:15:06,900
your developers or you have a bit of

419
00:15:04,800 --> 00:15:09,089
control<font color="#E5E5E5"> of over things so</font><font color="#CCCCCC"> you can't you</font>

420
00:15:06,900 --> 00:15:11,130
tell all the browser to companies what

421
00:15:09,090 --> 00:15:13,050
to do and the third is the IT

422
00:15:11,130 --> 00:15:14,910
infrastructure<font color="#E5E5E5"> are you can put up an</font>

423
00:15:13,050 --> 00:15:17,280
application gateway are going to look at

424
00:15:14,910 --> 00:15:18,630
triggering things in your logs are you

425
00:15:17,280 --> 00:15:20,130
going to put defense-in-depth techniques

426
00:15:18,630 --> 00:15:21,870
in place they can stop things that you

427
00:15:20,130 --> 00:15:23,610
know about<font color="#E5E5E5"> and you can mitigate</font>

428
00:15:21,870 --> 00:15:25,530
cross-site scripting at all three<font color="#E5E5E5"> points</font>

429
00:15:23,610 --> 00:15:28,470
so there is<font color="#CCCCCC"> a call to action for anybody</font>

430
00:15:25,530 --> 00:15:31,620
who's involved<font color="#E5E5E5"> in an IT enterprise the</font>

431
00:15:28,470 --> 00:15:33,780
browser they all execute different code

432
00:15:31,620 --> 00:15:35,910
snippets differently or do<font color="#E5E5E5"> not execute</font>

433
00:15:33,780 --> 00:15:37,829
certain code snippets the first one here

434
00:15:35,910 --> 00:15:39,719
the body bakground one that's really

435
00:15:37,830 --> 00:15:45,360
<font color="#E5E5E5">pretty clear what it's doing will</font>

436
00:15:39,720 --> 00:15:47,430
execute in I ie6 not 87 or newer opera

437
00:15:45,360 --> 00:15:50,130
nine but not in<font color="#E5E5E5"> Firefox the second one</font>

438
00:15:47,430 --> 00:15:52,829
will execute in Firefox too but<font color="#E5E5E5"> not</font>

439
00:15:50,130 --> 00:15:54,600
three opera nine but not<font color="#E5E5E5"> any of the IE</font>

440
00:15:52,830 --> 00:15:58,320
versions and that<font color="#E5E5E5"> that's a base64</font>

441
00:15:54,600 --> 00:15:59,550
encoding attack so when<font color="#E5E5E5"> I said the most</font>

442
00:15:58,320 --> 00:16:01,470
difficult part<font color="#CCCCCC"> of scanning is keeping</font>

443
00:15:59,550 --> 00:16:02,310
track of<font color="#CCCCCC"> attacks screen strings this is</font>

444
00:16:01,470 --> 00:16:04,110
what I'm talking<font color="#CCCCCC"> about there are</font>

445
00:16:02,310 --> 00:16:06,260
thousands of variations on these<font color="#CCCCCC"> fill</font>

446
00:16:04,110 --> 00:16:09,900
execute<font color="#E5E5E5"> in some browsers and not others</font>

447
00:16:06,260 --> 00:16:10,890
and the current browsers to be fair are

448
00:16:09,900 --> 00:16:12,560
much better<font color="#E5E5E5"> than the previous</font>

449
00:16:10,890 --> 00:16:16,910
generations both firefox 3

450
00:16:12,560 --> 00:16:20,810
nie<font color="#CCCCCC"> 8 do a much better job of not</font>

451
00:16:16,910 --> 00:16:21,800
executing militias<font color="#E5E5E5"> JavaScript an IT</font>

452
00:16:20,810 --> 00:16:24,380
infrastructure I think I've already

453
00:16:21,800 --> 00:16:26,359
mentioned if web application firewalls

454
00:16:24,380 --> 00:16:30,950
things that's it either at the<font color="#CCCCCC"> perimeter</font>

455
00:16:26,360 --> 00:16:32,029
of your of<font color="#E5E5E5"> your users network space so</font>

456
00:16:30,950 --> 00:16:33,910
every<font color="#E5E5E5"> time they get a little upside if</font>

457
00:16:32,029 --> 00:16:35,870
it comes back and it matches a signature

458
00:16:33,910 --> 00:16:37,699
they won't let<font color="#E5E5E5"> them execute the</font>

459
00:16:35,870 --> 00:16:39,260
JavaScript little block it there are two

460
00:16:37,700 --> 00:16:40,760
trees<font color="#CCCCCC"> and protection systems snort</font><font color="#E5E5E5"> will</font>

461
00:16:39,260 --> 00:16:41,870
do a bit of this they will do the<font color="#CCCCCC"> same</font>

462
00:16:40,760 --> 00:16:45,230
thing if<font color="#E5E5E5"> you have all</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> your rod and</font>

463
00:16:41,870 --> 00:16:46,670
going through snort it'll stop bad or

464
00:16:45,230 --> 00:16:47,990
malicious code from reaching the browser

465
00:16:46,670 --> 00:16:50,120
to be<font color="#E5E5E5"> rendered and you have the web</font>

466
00:16:47,990 --> 00:16:52,040
application sandboxes Google's got a

467
00:16:50,120 --> 00:16:53,690
couple that there they have Microsoft

468
00:16:52,040 --> 00:16:55,939
has a<font color="#E5E5E5"> couple that are being floated</font>

469
00:16:53,690 --> 00:16:57,260
right now in research and there's a

470
00:16:55,940 --> 00:16:58,850
<font color="#CCCCCC">little one in commercial one whose name</font>

471
00:16:57,260 --> 00:17:00,110
I can't believe is escaping me but

472
00:16:58,850 --> 00:17:01,880
<font color="#E5E5E5">remember that all of these are</font>

473
00:17:00,110 --> 00:17:03,890
signature-based defenses that<font color="#E5E5E5"> means</font>

474
00:17:01,880 --> 00:17:05,869
they're about as effective as your anti

475
00:17:03,890 --> 00:17:07,939
viruses let's just<font color="#CCCCCC"> say they will catch</font>

476
00:17:05,869 --> 00:17:10,069
at best eighty to eighty-five percent of

477
00:17:07,939 --> 00:17:12,740
attacks and only known attacks anything

478
00:17:10,069 --> 00:17:14,420
that's new or novel will skate will

479
00:17:12,740 --> 00:17:15,709
skate past these this<font color="#CCCCCC"> is why i would</font>

480
00:17:14,420 --> 00:17:19,699
like to consider IT infrastructures

481
00:17:15,709 --> 00:17:21,620
things as defense and depth mitigations

482
00:17:19,699 --> 00:17:24,350
against cross-site scripting none<font color="#E5E5E5"> of</font>

483
00:17:21,619 --> 00:17:26,750
these<font color="#E5E5E5"> technologies can solve it web</font>

484
00:17:24,349 --> 00:17:29,030
application defense is all about process

485
00:17:26,750 --> 00:17:30,800
and this is a design pattern that<font color="#CCCCCC"> i like</font>

486
00:17:29,030 --> 00:17:32,030
and<font color="#CCCCCC"> when i try and teach people like try</font>

487
00:17:30,800 --> 00:17:34,879
and do a lot<font color="#E5E5E5"> of outreach especially to</font>

488
00:17:32,030 --> 00:17:37,220
the PHP communities this is what i

489
00:17:34,880 --> 00:17:41,750
suggest to<font color="#E5E5E5"> them that they do is they</font>

490
00:17:37,220 --> 00:17:43,700
first write new code any bad code it's

491
00:17:41,750 --> 00:17:45,410
better to start over<font color="#CCCCCC"> i think if you</font><font color="#E5E5E5"> have</font>

492
00:17:43,700 --> 00:17:47,270
systemic problems and design from

493
00:17:45,410 --> 00:17:51,500
scratch keep the same features keep the

494
00:17:47,270 --> 00:17:52,940
same specs but it's<font color="#E5E5E5"> very difficult to to</font>

495
00:17:51,500 --> 00:17:54,860
clean up old goat it's much easier to

496
00:17:52,940 --> 00:17:57,440
write new code so you get a<font color="#E5E5E5"> request the</font>

497
00:17:54,860 --> 00:17:59,209
first thing you do is you decode it then

498
00:17:57,440 --> 00:18:01,220
you apply your security checks your

499
00:17:59,210 --> 00:18:03,320
business logic do it of epic a shin does

500
00:18:01,220 --> 00:18:05,000
encode it and return it and<font color="#E5E5E5"> i'll step</font>

501
00:18:03,320 --> 00:18:08,389
through it in a<font color="#CCCCCC"> moment but i will</font><font color="#E5E5E5"> say</font>

502
00:18:05,000 --> 00:18:10,940
that<font color="#E5E5E5"> if</font><font color="#CCCCCC"> you are using classic</font><font color="#E5E5E5"> asp JSP</font>

503
00:18:08,390 --> 00:18:12,860
PHP three and four things where all of

504
00:18:10,940 --> 00:18:15,110
your processing is happening<font color="#E5E5E5"> right on</font>

505
00:18:12,860 --> 00:18:18,110
the presentation<font color="#CCCCCC"> layer you take an input</font>

506
00:18:15,110 --> 00:18:20,209
from<font color="#CCCCCC"> lay from from a user and you</font>

507
00:18:18,110 --> 00:18:22,100
<font color="#E5E5E5">process it on the same page of code and</font>

508
00:18:20,210 --> 00:18:25,510
what you return it this sort of thing is

509
00:18:22,100 --> 00:18:26,980
very<font color="#E5E5E5"> difficult to do MDC</font><font color="#CCCCCC"> co.design</font>

510
00:18:25,510 --> 00:18:29,379
even object-oriented code design if you

511
00:18:26,980 --> 00:18:32,800
want to do to do it that way we'll work

512
00:18:29,380 --> 00:18:35,590
with this process<font color="#E5E5E5"> but the old pearl</font><font color="#CCCCCC"> CGI</font>

513
00:18:32,800 --> 00:18:37,659
stuff from the 90s da style of coding is

514
00:18:35,590 --> 00:18:39,760
very difficult<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be systemic are</font>

515
00:18:37,660 --> 00:18:42,550
systematically about about following an

516
00:18:39,760 --> 00:18:45,010
architecture like this so first<font color="#CCCCCC"> you have</font>

517
00:18:42,550 --> 00:18:47,530
to decode your input in<font color="#E5E5E5"> headers you're</font>

518
00:18:45,010 --> 00:18:48,820
going to find that the browser the

519
00:18:47,530 --> 00:18:51,129
submitting the request is going to tell

520
00:18:48,820 --> 00:18:53,020
you what they'll take back and<font color="#E5E5E5"> in</font>

521
00:18:51,130 --> 00:18:54,550
general you probably want to<font color="#E5E5E5"> encode to</font>

522
00:18:53,020 --> 00:18:57,940
that browser at the end so keep track of

523
00:18:54,550 --> 00:18:59,680
that and it's also probably going to be

524
00:18:57,940 --> 00:19:00,910
<font color="#E5E5E5">the including they're using to send the</font>

525
00:18:59,680 --> 00:19:02,350
request it's an assumption that I'm

526
00:19:00,910 --> 00:19:04,060
making but it's probably<font color="#E5E5E5"> a pretty good</font>

527
00:19:02,350 --> 00:19:05,830
<font color="#E5E5E5">one and really in this pattern it only</font>

528
00:19:04,060 --> 00:19:07,200
matters reusability sake that you'd be

529
00:19:05,830 --> 00:19:12,610
the try and match that<font color="#CCCCCC"> they're encoding</font>

530
00:19:07,200 --> 00:19:14,530
the default<font color="#E5E5E5"> is iso 8859-1 you probably</font>

531
00:19:12,610 --> 00:19:16,060
are using UT if I tend<font color="#CCCCCC"> to</font><font color="#E5E5E5"> use utf-8 what</font>

532
00:19:14,530 --> 00:19:17,860
I'm coding is my internal<font color="#E5E5E5"> representation</font>

533
00:19:16,060 --> 00:19:19,030
so the first<font color="#CCCCCC"> thing to do is if</font><font color="#E5E5E5"> there's</font>

534
00:19:17,860 --> 00:19:21,699
any decoding for what they're telling

535
00:19:19,030 --> 00:19:23,950
you they have to<font color="#CCCCCC"> what you do internally</font>

536
00:19:21,700 --> 00:19:26,350
is you change it so that<font color="#CCCCCC"> the input is</font>

537
00:19:23,950 --> 00:19:28,930
considered to be rendered<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the in your</font>

538
00:19:26,350 --> 00:19:31,750
internal representation the second is

539
00:19:28,930 --> 00:19:33,550
your security checks so you have this a

540
00:19:31,750 --> 00:19:35,350
bit of you have this request<font color="#E5E5E5"> that's now</font>

541
00:19:33,550 --> 00:19:36,790
represented the same way that you do all

542
00:19:35,350 --> 00:19:38,949
your data tracking and processing

543
00:19:36,790 --> 00:19:42,399
internally and you apply your<font color="#CCCCCC"> white</font>

544
00:19:38,950 --> 00:19:45,730
<font color="#CCCCCC">lists which is to say you say here is my</font>

545
00:19:42,400 --> 00:19:47,230
HTML that<font color="#CCCCCC"> I want to</font><font color="#E5E5E5"> allow very safely</font>

546
00:19:45,730 --> 00:19:49,000
most people want to allow people<font color="#CCCCCC"> to</font>

547
00:19:47,230 --> 00:19:51,700
close to a<font color="#E5E5E5"> message board for example</font>

548
00:19:49,000 --> 00:19:52,720
using basic bold italic these sorts of

549
00:19:51,700 --> 00:19:54,760
things<font color="#E5E5E5"> and</font><font color="#CCCCCC"> there's really not a lot you</font>

550
00:19:52,720 --> 00:19:56,440
can do with them so those are on the

551
00:19:54,760 --> 00:19:58,420
white lists and you can<font color="#E5E5E5"> imagine the</font>

552
00:19:56,440 --> 00:20:00,940
riskiest sir bits of HTML are things

553
00:19:58,420 --> 00:20:04,000
that are<font color="#CCCCCC"> tags like script obviously Oh</font>

554
00:20:00,940 --> 00:20:05,500
or something like image or anything<font color="#CCCCCC"> that</font>

555
00:20:04,000 --> 00:20:09,040
will load something<font color="#E5E5E5"> from an external</font>

556
00:20:05,500 --> 00:20:10,600
resource being<font color="#E5E5E5"> at the riskiest so your</font>

557
00:20:09,040 --> 00:20:12,610
white lists are about your<font color="#E5E5E5"> business need</font>

558
00:20:10,600 --> 00:20:14,740
make them absolutely as strict as you

559
00:20:12,610 --> 00:20:16,449
can and if<font color="#E5E5E5"> you actually have to accept</font>

560
00:20:14,740 --> 00:20:17,770
things off site i would consider even

561
00:20:16,450 --> 00:20:19,480
white listing which domains if you want

562
00:20:17,770 --> 00:20:21,730
to low embedded pictures great you know

563
00:20:19,480 --> 00:20:23,800
<font color="#E5E5E5">allah smugmug allow flickr choose a</font>

564
00:20:21,730 --> 00:20:25,270
couple force your users to use them if

565
00:20:23,800 --> 00:20:28,330
you can<font color="#CCCCCC"> get that by the usability people</font>

566
00:20:25,270 --> 00:20:29,920
you know allow<font color="#E5E5E5"> youtube and vimeo maybe</font>

567
00:20:28,330 --> 00:20:31,720
google video whatever you want to do for

568
00:20:29,920 --> 00:20:33,340
<font color="#E5E5E5">your video but don't allow things to be</font>

569
00:20:31,720 --> 00:20:34,780
embedded from you know something dot are

570
00:20:33,340 --> 00:20:36,909
you

571
00:20:34,780 --> 00:20:41,170
what whitelist where you're going to fix

572
00:20:36,910 --> 00:20:42,730
up things from as<font color="#E5E5E5"> well and sanitizing</font>

573
00:20:41,170 --> 00:20:45,010
your HTML which is what I'm sort of

574
00:20:42,730 --> 00:20:48,670
alluding to here is saying here's the

575
00:20:45,010 --> 00:20:50,920
request the message that I'm being<font color="#E5E5E5"> sent</font>

576
00:20:48,670 --> 00:20:52,750
includes HTML tags on there are

577
00:20:50,920 --> 00:20:55,840
libraries that will do sanitization for

578
00:20:52,750 --> 00:20:58,600
you net<font color="#CCCCCC"> Microsoft anti XSS of the OS</font>

579
00:20:55,840 --> 00:21:02,139
anti Sammy curly and nut Java and Python

580
00:20:58,600 --> 00:21:03,939
there's a speck out for PHP there's no

581
00:21:02,140 --> 00:21:05,260
is there's nothing even in beta yet and

582
00:21:03,940 --> 00:21:07,390
the Python is only invaded here right

583
00:21:05,260 --> 00:21:10,780
now and then in PHP there's the HTML

584
00:21:07,390 --> 00:21:13,720
purifier this is a bit of coding the

585
00:21:10,780 --> 00:21:15,790
like cryptography is very very<font color="#E5E5E5"> very</font>

586
00:21:13,720 --> 00:21:19,090
difficult<font color="#E5E5E5"> to do exactly right but very</font>

587
00:21:15,790 --> 00:21:20,800
easy to do almost right so if you can

588
00:21:19,090 --> 00:21:23,110
have something that's maintained for you

589
00:21:20,800 --> 00:21:24,460
<font color="#E5E5E5">I would use a</font><font color="#CCCCCC"> third-party library it'll</font>

590
00:21:23,110 --> 00:21:27,490
save<font color="#CCCCCC"> you nightmares and maintaining your</font>

591
00:21:24,460 --> 00:21:28,680
own code later if you<font color="#CCCCCC"> do have to write</font>

592
00:21:27,490 --> 00:21:31,690
your<font color="#E5E5E5"> own as</font><font color="#CCCCCC"> I've</font><font color="#E5E5E5"> mentioned</font><font color="#CCCCCC"> before</font>

593
00:21:28,680 --> 00:21:33,340
whitelist HTML tags because restrictive

594
00:21:31,690 --> 00:21:35,350
as possible and if you can get away

595
00:21:33,340 --> 00:21:38,199
without high risk such as you know the

596
00:21:35,350 --> 00:21:40,240
anchor or image you please do away with

597
00:21:38,200 --> 00:21:43,000
them then once you've got that<font color="#E5E5E5"> though</font>

598
00:21:40,240 --> 00:21:44,800
and here's here's the fun part is don't

599
00:21:43,000 --> 00:21:47,470
store them that way replace every single

600
00:21:44,800 --> 00:21:49,210
whitelist able and tagged with<font color="#CCCCCC"> a symbol</font>

601
00:21:47,470 --> 00:21:51,370
of some sort<font color="#E5E5E5"> something that won't be</font>

602
00:21:49,210 --> 00:21:52,750
changed by HTML<font color="#E5E5E5"> encoding so you're</font>

603
00:21:51,370 --> 00:21:55,360
storing them internally in a completely

604
00:21:52,750 --> 00:21:58,540
inert fashion if you want an anchor tag

605
00:21:55,360 --> 00:22:00,129
you can simply put put a little put some

606
00:21:58,540 --> 00:22:02,110
nonsense garbage that won't be regretted

607
00:22:00,130 --> 00:22:04,660
any sort of usability sense followed by

608
00:22:02,110 --> 00:22:07,030
the word anchor followed by an end tag

609
00:22:04,660 --> 00:22:08,680
there and all you also will probably

610
00:22:07,030 --> 00:22:11,530
want<font color="#E5E5E5"> to take the input so an anchor tags</font>

611
00:22:08,680 --> 00:22:14,110
and go to a URL of don't store it

612
00:22:11,530 --> 00:22:15,760
internally don't take the<font color="#CCCCCC"> HTTPS actually</font>

613
00:22:14,110 --> 00:22:18,189
parse that look here's the domain here's

614
00:22:15,760 --> 00:22:20,050
the path and<font color="#CCCCCC"> so those separately</font><font color="#E5E5E5"> saw the</font>

615
00:22:18,190 --> 00:22:21,940
goal being that eventually you're not

616
00:22:20,050 --> 00:22:23,590
actually going to reflect any user input

617
00:22:21,940 --> 00:22:25,420
at the end when you return the request

618
00:22:23,590 --> 00:22:26,889
but you're going to have things that are

619
00:22:25,420 --> 00:22:29,680
constructed programmatically by you

620
00:22:26,890 --> 00:22:31,330
because you trust your own code more

621
00:22:29,680 --> 00:22:33,730
than<font color="#E5E5E5"> you trust the user's input so</font>

622
00:22:31,330 --> 00:22:35,110
anyway we're going to get rid<font color="#CCCCCC"> of</font>

623
00:22:33,730 --> 00:22:37,240
high-risk tags anything we have to

624
00:22:35,110 --> 00:22:40,419
accept we restore our symbols then we're

625
00:22:37,240 --> 00:22:43,000
going to encode the output at the end of

626
00:22:40,420 --> 00:22:46,270
these security checks by taking these

627
00:22:43,000 --> 00:22:48,440
first bite the first thing we do is HTML

628
00:22:46,270 --> 00:22:50,090
encode everything that is

629
00:22:48,440 --> 00:22:52,190
not trusted which is<font color="#E5E5E5"> anything that has</font>

630
00:22:50,090 --> 00:22:54,770
not been<font color="#CCCCCC"> white listed is not trusted so</font>

631
00:22:52,190 --> 00:22:56,510
if<font color="#E5E5E5"> I have a tag that we didn't consider</font>

632
00:22:54,770 --> 00:22:58,040
you<font color="#CCCCCC"> know there's not part of a whitelist</font>

633
00:22:56,510 --> 00:23:00,350
it's still there we didn't erase it but

634
00:22:58,040 --> 00:23:02,570
it's<font color="#E5E5E5"> going to be htl encoded in the East</font>

635
00:23:00,350 --> 00:23:04,070
milk in the web context and<font color="#E5E5E5"> returned</font>

636
00:23:02,570 --> 00:23:05,870
<font color="#E5E5E5">just as just a bit of text on the screen</font>

637
00:23:04,070 --> 00:23:07,909
<font color="#E5E5E5">that they'll read that will not be acted</font>

638
00:23:05,870 --> 00:23:09,409
on by the browser after we do that we

639
00:23:07,910 --> 00:23:12,380
can take<font color="#E5E5E5"> these symbols and replace them</font>

640
00:23:09,410 --> 00:23:14,450
with the tags<font color="#E5E5E5"> that we're writing</font><font color="#CCCCCC"> the</font>

641
00:23:12,380 --> 00:23:16,880
<font color="#CCCCCC">aren't user inputs we're not just doing</font>

642
00:23:14,450 --> 00:23:19,190
reg ex<font color="#CCCCCC"> defined reg ex to replace we're</font>

643
00:23:16,880 --> 00:23:22,100
<font color="#E5E5E5">actually constructing our own URLs our</font>

644
00:23:19,190 --> 00:23:24,980
own tags and put those into the into the

645
00:23:22,100 --> 00:23:26,959
request so anything the user sent has an

646
00:23:24,980 --> 00:23:28,940
HTML encoded anything that we want the

647
00:23:26,960 --> 00:23:30,230
browser to take action on we know<font color="#E5E5E5"> that</font>

648
00:23:28,940 --> 00:23:32,240
the user wants<font color="#E5E5E5"> us to take action on and</font>

649
00:23:30,230 --> 00:23:34,580
<font color="#CCCCCC">then we construct it from within our</font>

650
00:23:32,240 --> 00:23:36,740
<font color="#E5E5E5">code the we control we trust and then we</font>

651
00:23:34,580 --> 00:23:40,639
add<font color="#CCCCCC"> it back into</font><font color="#E5E5E5"> the stream so that</font>

652
00:23:36,740 --> 00:23:43,280
<font color="#E5E5E5">anything we miss anything that was</font><font color="#CCCCCC"> not</font>

653
00:23:40,640 --> 00:23:45,170
whitelisted is is going to be HTML

654
00:23:43,280 --> 00:23:47,210
encoded and inert anything that is

655
00:23:45,170 --> 00:23:49,190
rendered by<font color="#CCCCCC"> the browser is going to be</font>

656
00:23:47,210 --> 00:23:51,620
something<font color="#E5E5E5"> that we wrote that isn't user</font>

657
00:23:49,190 --> 00:23:53,750
input it's<font color="#E5E5E5"> simply we've taken decisions</font>

658
00:23:51,620 --> 00:23:56,209
in constructing this based on the user's

659
00:23:53,750 --> 00:23:58,580
input<font color="#CCCCCC"> i thing</font><font color="#E5E5E5"> you need</font><font color="#CCCCCC"> to explicitly</font>

660
00:23:56,210 --> 00:23:59,930
declare your character set a lot of

661
00:23:58,580 --> 00:24:02,000
people<font color="#CCCCCC"> assume</font><font color="#E5E5E5"> that their way about their</font>

662
00:23:59,930 --> 00:24:05,240
web server is configured to do<font color="#E5E5E5"> this for</font>

663
00:24:02,000 --> 00:24:07,190
them a lot<font color="#E5E5E5"> of times it's not in in UNIX</font>

664
00:24:05,240 --> 00:24:09,410
you can usually do<font color="#CCCCCC"> this from within</font><font color="#E5E5E5"> your</font>

665
00:24:07,190 --> 00:24:12,290
user context even and shared hosting in

666
00:24:09,410 --> 00:24:14,450
your<font color="#CCCCCC"> HT</font><font color="#E5E5E5"> access you I have the code right</font>

667
00:24:12,290 --> 00:24:16,070
there<font color="#E5E5E5"> and if doubt every single language</font>

668
00:24:14,450 --> 00:24:18,890
can override the web server so<font color="#E5E5E5"> you can</font>

669
00:24:16,070 --> 00:24:20,720
explicitly do this within your<font color="#E5E5E5"> within</font>

670
00:24:18,890 --> 00:24:22,430
your web application and this is this<font color="#E5E5E5"> is</font>

671
00:24:20,720 --> 00:24:24,260
enormously important especially if

672
00:24:22,430 --> 00:24:25,910
you're serving communities that use

673
00:24:24,260 --> 00:24:27,370
non-latin character sets if you're going

674
00:24:25,910 --> 00:24:30,350
to be deploying your application to

675
00:24:27,370 --> 00:24:32,629
<font color="#CCCCCC">Asian countries or to Russia where they</font>

676
00:24:30,350 --> 00:24:33,560
have multi<font color="#CCCCCC"> biting</font><font color="#E5E5E5"> coatings we really</font>

677
00:24:32,630 --> 00:24:35,050
want<font color="#CCCCCC"> to make</font><font color="#E5E5E5"> sure you do this because</font>

678
00:24:33,560 --> 00:24:37,040
this<font color="#E5E5E5"> is the number one cause of</font>

679
00:24:35,050 --> 00:24:40,070
cross-site scripting that I'm seeing is

680
00:24:37,040 --> 00:24:41,930
the errors in not explicitly clearing

681
00:24:40,070 --> 00:24:43,520
the character set and things are encoded

682
00:24:41,930 --> 00:24:44,780
in a character set the developer doesn't

683
00:24:43,520 --> 00:24:47,510
read natively they're going to miss

684
00:24:44,780 --> 00:24:49,010
things so please explicitly decay it's

685
00:24:47,510 --> 00:24:51,320
an extra line of code just make sure you

686
00:24:49,010 --> 00:24:53,390
<font color="#E5E5E5">do it and the most important thing I</font>

687
00:24:51,320 --> 00:24:55,100
think is to check your security checks

688
00:24:53,390 --> 00:24:57,560
actually work this is a bit of code I

689
00:24:55,100 --> 00:24:59,060
found in a popular CMS that I think this

690
00:24:57,560 --> 00:25:00,740
fork has actually been abandoned because

691
00:24:59,060 --> 00:25:01,720
I haven't been<font color="#E5E5E5"> a big gallatin anybody to</font>

692
00:25:00,740 --> 00:25:02,830
respond to the

693
00:25:01,720 --> 00:25:05,800
that I pointed<font color="#E5E5E5"> out that this doesn't</font>

694
00:25:02,830 --> 00:25:08,110
work and this has a<font color="#E5E5E5"> number of things</font>

695
00:25:05,800 --> 00:25:10,090
wrong with<font color="#E5E5E5"> it are there any encoders</font>

696
00:25:08,110 --> 00:25:15,790
here can tell<font color="#CCCCCC"> us what's really really</font>

697
00:25:10,090 --> 00:25:17,500
really wrong with<font color="#CCCCCC"> this the PHP which</font>

698
00:25:15,790 --> 00:25:20,280
means is you have<font color="#E5E5E5"> to roll</font><font color="#CCCCCC"> it yourself</font>

699
00:25:17,500 --> 00:25:23,680
you can't use a<font color="#E5E5E5"> managed library yeah</font>

700
00:25:20,280 --> 00:25:26,020
this is like 130 or something and their

701
00:25:23,680 --> 00:25:29,520
index dot PHP<font color="#E5E5E5"> well so this like the</font>

702
00:25:26,020 --> 00:25:29,520
first thing they do after<font color="#E5E5E5"> their comments</font>

703
00:25:29,700 --> 00:25:35,230
it's a blacklist<font color="#E5E5E5"> it's blacklisting</font>

704
00:25:32,830 --> 00:25:38,199
script audited iframe applet meta style

705
00:25:35,230 --> 00:25:41,590
form and then<font color="#CCCCCC"> I can think a lot of ways</font>

706
00:25:38,200 --> 00:25:42,790
<font color="#CCCCCC">to do nasty things without those tags do</font>

707
00:25:41,590 --> 00:25:46,510
you notice<font color="#CCCCCC"> that getting posed to have</font>

708
00:25:42,790 --> 00:25:49,000
different black lists so that they care

709
00:25:46,510 --> 00:25:51,670
more about<font color="#E5E5E5"> gets lady about poster posts</font>

710
00:25:49,000 --> 00:25:53,590
are only a couple looks they only care

711
00:25:51,670 --> 00:25:56,950
about script and are some reason style

712
00:25:53,590 --> 00:25:58,959
tags<font color="#E5E5E5"> for four posts gets they care about</font>

713
00:25:56,950 --> 00:26:00,910
a<font color="#CCCCCC"> lot</font><font color="#E5E5E5"> more how about there's no</font>

714
00:25:58,960 --> 00:26:02,050
character encoding so followed up by me

715
00:26:00,910 --> 00:26:03,790
if I even want to<font color="#E5E5E5"> use script i'll have</font>

716
00:26:02,050 --> 00:26:05,440
to do is encode it in a way they're not

717
00:26:03,790 --> 00:26:10,000
expecting is to come through<font color="#CCCCCC"> the browser</font>

718
00:26:05,440 --> 00:26:12,610
is going to render it yeah this is this

719
00:26:10,000 --> 00:26:15,490
is this is<font color="#E5E5E5"> pretty bad and this is their</font>

720
00:26:12,610 --> 00:26:18,610
complete cross-site scripting so input

721
00:26:15,490 --> 00:26:20,950
sanitization right here so make sure

722
00:26:18,610 --> 00:26:23,409
your security check to do what you think

723
00:26:20,950 --> 00:26:26,320
they do fuzz them test them run them by

724
00:26:23,410 --> 00:26:28,090
<font color="#E5E5E5">your peers or better yet use one of</font>

725
00:26:26,320 --> 00:26:31,960
those managed code libraries<font color="#CCCCCC"> because</font>

726
00:26:28,090 --> 00:26:34,959
<font color="#CCCCCC">even PHP has the sanitization libraries</font>

727
00:26:31,960 --> 00:26:35,980
that are available<font color="#E5E5E5"> to you and in testing</font>

728
00:26:34,960 --> 00:26:38,380
the architectural pattern i just

729
00:26:35,980 --> 00:26:39,610
mentioned like just brought a proof of

730
00:26:38,380 --> 00:26:41,380
concept thing<font color="#CCCCCC"> likes what i'm going to</font>

731
00:26:39,610 --> 00:26:43,810
show you<font color="#E5E5E5"> now is its PHP code so there's</font>

732
00:26:41,380 --> 00:26:45,400
really no user interface to it and as if

733
00:26:43,810 --> 00:26:46,690
it becomes more sophisticated<font color="#CCCCCC"> I'm going</font>

734
00:26:45,400 --> 00:26:48,580
to put them to c-sharp give it a

735
00:26:46,690 --> 00:26:50,380
point-and-click interface make it usable

736
00:26:48,580 --> 00:26:52,360
to people who don't write code but

737
00:26:50,380 --> 00:26:54,730
<font color="#E5E5E5">basically I want to take a put an</font>

738
00:26:52,360 --> 00:26:56,080
application since i'm a developer i have

739
00:26:54,730 --> 00:26:59,050
my source code i'll put it in a virtual

740
00:26:56,080 --> 00:27:00,250
machine<font color="#CCCCCC"> and i want to fuzz it and in a</font>

741
00:26:59,050 --> 00:27:01,360
sense this<font color="#CCCCCC"> is also</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> dynamic code</font>

742
00:27:00,250 --> 00:27:03,220
analysis tool because we're going<font color="#E5E5E5"> to</font>

743
00:27:01,360 --> 00:27:05,530
track until our representation by

744
00:27:03,220 --> 00:27:09,250
looking at their database we're going<font color="#E5E5E5"> to</font>

745
00:27:05,530 --> 00:27:11,560
<font color="#E5E5E5">take a attack strings we're going to</font>

746
00:27:09,250 --> 00:27:13,000
send<font color="#E5E5E5"> them to a target application which</font>

747
00:27:11,560 --> 00:27:14,590
will then store them in the database and

748
00:27:13,000 --> 00:27:15,250
then<font color="#CCCCCC"> we're going to</font><font color="#E5E5E5"> look in the database</font>

749
00:27:14,590 --> 00:27:17,020
and

750
00:27:15,250 --> 00:27:18,880
<font color="#CCCCCC">the worthies</font><font color="#E5E5E5"> actually change do they</font>

751
00:27:17,020 --> 00:27:20,879
make it past the sanitization check so

752
00:27:18,880 --> 00:27:23,200
they store it in early in the database

753
00:27:20,880 --> 00:27:24,850
at the same<font color="#CCCCCC"> time we're also going to be</font>

754
00:27:23,200 --> 00:27:26,590
able<font color="#E5E5E5"> to find since we're crawling are</font>

755
00:27:24,850 --> 00:27:27,939
there any reflected vulnerabilities<font color="#E5E5E5"> are</font>

756
00:27:26,590 --> 00:27:29,050
there any<font color="#E5E5E5"> persistent</font><font color="#CCCCCC"> bowler abilities</font>

757
00:27:27,940 --> 00:27:30,520
because i'm actually going to crawl this

758
00:27:29,050 --> 00:27:33,610
<font color="#CCCCCC">own place we pretty much get those for</font>

759
00:27:30,520 --> 00:27:35,110
<font color="#E5E5E5">free by this approach</font><font color="#CCCCCC"> I'm not</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font>

760
00:27:33,610 --> 00:27:36,459
do the reverse all right take the attack

761
00:27:35,110 --> 00:27:37,959
<font color="#E5E5E5">string so i'm going to insert them into</font>

762
00:27:36,460 --> 00:27:39,550
the database and<font color="#E5E5E5"> it's keri completely</font>

763
00:27:37,960 --> 00:27:41,740
fubar the application for usability

764
00:27:39,550 --> 00:27:43,930
because you can<font color="#CCCCCC"> think</font><font color="#E5E5E5"> of cases where you</font>

765
00:27:41,740 --> 00:27:46,270
<font color="#E5E5E5">know things are joined on keywords that</font>

766
00:27:43,930 --> 00:27:49,120
are now attack strings but we are going

767
00:27:46,270 --> 00:27:50,800
to see if anything gets reflected out to

768
00:27:49,120 --> 00:27:56,469
the user by then crawling the web site

769
00:27:50,800 --> 00:28:04,540
again within the virtual machine it's

770
00:27:56,470 --> 00:28:05,680
not<font color="#E5E5E5"> much to look at and the actually</font>

771
00:28:04,540 --> 00:28:18,000
<font color="#E5E5E5">like pull the tail up so you can see</font>

772
00:28:05,680 --> 00:28:18,000
what's<font color="#CCCCCC"> happening on the there we go</font>

773
00:28:20,650 --> 00:28:24,630
well I just a sec need to log back in

774
00:28:36,580 --> 00:28:43,000
and of course it worked this morning but

775
00:28:40,610 --> 00:28:43,000
it's a

776
00:29:30,259 --> 00:29:35,330
<font color="#CCCCCC">marîd apparently just was</font><font color="#E5E5E5"> having</font>

777
00:29:32,279 --> 00:29:35,330
trouble coming out<font color="#CCCCCC"> of sleep there</font>

778
00:29:44,360 --> 00:29:48,169
and I<font color="#CCCCCC"> just have a</font><font color="#E5E5E5"> couple of attacks</font>

779
00:29:46,490 --> 00:29:49,580
<font color="#CCCCCC">drinks</font><font color="#E5E5E5"> there are three things here two</font>

780
00:29:48,170 --> 00:29:51,049
of which are real tax screams the third

781
00:29:49,580 --> 00:29:52,760
one is just<font color="#E5E5E5"> a plain text string to make</font>

782
00:29:51,049 --> 00:29:55,190
sure we can track and<font color="#CCCCCC"> you look at those</font>

783
00:29:52,760 --> 00:29:56,660
requests<font color="#E5E5E5"> fly by on the log as word this</font>

784
00:29:55,190 --> 00:29:58,640
is default WordPress one point x 0

785
00:29:56,660 --> 00:30:01,010
installation<font color="#E5E5E5"> they're like four pages on</font>

786
00:29:58,640 --> 00:30:04,299
it and we have a lot<font color="#CCCCCC"> of requests flying</font>

787
00:30:01,010 --> 00:30:08,299
by and you can see that<font color="#E5E5E5"> it's found the</font>

788
00:30:04,299 --> 00:30:10,309
the you can<font color="#CCCCCC"> see the words here bake</font>

789
00:30:08,299 --> 00:30:12,320
attack string well that's my fake attack

790
00:30:10,309 --> 00:30:14,690
string because I didn't want<font color="#E5E5E5"> to make you</font>

791
00:30:12,320 --> 00:30:16,010
watch the thousands and ten thousand

792
00:30:14,690 --> 00:30:18,530
thousands requests for to go through a

793
00:30:16,010 --> 00:30:19,549
real database of vulnerabilities and in

794
00:30:18,530 --> 00:30:22,010
fact this does have a couple<font color="#E5E5E5"> of known</font>

795
00:30:19,549 --> 00:30:23,389
vulnerabilities but they're the admin

796
00:30:22,010 --> 00:30:25,549
interface which we're not fuzzing at

797
00:30:23,390 --> 00:30:27,110
this point so we're<font color="#E5E5E5"> not going to show</font>

798
00:30:25,549 --> 00:30:30,410
you any real vulnerabilities in version

799
00:30:27,110 --> 00:30:32,510
1.5 and then I primarily<font color="#E5E5E5"> chose 1.5</font>

800
00:30:30,410 --> 00:30:34,100
because<font color="#CCCCCC"> well</font><font color="#E5E5E5"> WordPress is cross-site</font>

801
00:30:32,510 --> 00:30:36,169
scripting central usually but the

802
00:30:34,100 --> 00:30:37,909
<font color="#E5E5E5">current version uses mostly Ajax to send</font>

803
00:30:36,169 --> 00:30:39,470
things back and forth and Ajax is one of

804
00:30:37,910 --> 00:30:41,390
limitations of this<font color="#E5E5E5"> code at this point I</font>

805
00:30:39,470 --> 00:30:42,860
need<font color="#E5E5E5"> to expand so we wouldn't have</font>

806
00:30:41,390 --> 00:30:45,460
<font color="#CCCCCC">gotten</font><font color="#E5E5E5"> a lot of value at looking at the</font>

807
00:30:42,860 --> 00:30:45,459
current versions

808
00:30:56,960 --> 00:31:03,180
so the default installation should have

809
00:30:59,370 --> 00:31:04,560
one comment there are<font color="#E5E5E5"> currently 13 you</font>

810
00:31:03,180 --> 00:31:05,610
can see we're certainly fuzzing and why

811
00:31:04,560 --> 00:31:06,780
you would want to do persistent

812
00:31:05,610 --> 00:31:08,490
cross-site scripting in a production

813
00:31:06,780 --> 00:31:10,920
environment because like<font color="#E5E5E5"> I said this is</font>

814
00:31:08,490 --> 00:31:13,140
<font color="#E5E5E5">three attack strings and it found</font>

815
00:31:10,920 --> 00:31:14,640
persistent reflected on the fake one

816
00:31:13,140 --> 00:31:17,910
none of these actually work within

817
00:31:14,640 --> 00:31:20,670
<font color="#CCCCCC">wordpress to do the inverse now if</font><font color="#E5E5E5"> I</font>

818
00:31:17,910 --> 00:31:24,840
want<font color="#CCCCCC"> to do look at the database first I</font>

819
00:31:20,670 --> 00:31:26,130
have to restore to clean clean virtual

820
00:31:24,840 --> 00:31:27,540
machine and this is it would work

821
00:31:26,130 --> 00:31:28,800
without the virtual machine but<font color="#E5E5E5"> we get</font>

822
00:31:27,540 --> 00:31:32,629
false positives on everything we've

823
00:31:28,800 --> 00:31:32,629
already injected into the database

824
00:31:42,850 --> 00:31:44,909
you

825
00:32:05,820 --> 00:32:19,800
I<font color="#CCCCCC"> helped straw the right plow oh did</font>

826
00:32:17,580 --> 00:32:22,679
<font color="#E5E5E5">actually well this one might be failing</font>

827
00:32:19,800 --> 00:32:28,620
of course in demo let's check to<font color="#E5E5E5"> see</font>

828
00:32:22,680 --> 00:32:30,870
what the website says well no it looks

829
00:32:28,620 --> 00:32:32,510
like it worked I just my verbosity must

830
00:32:30,870 --> 00:32:34,830
have failed for some reason there it's

831
00:32:32,510 --> 00:32:36,600
putting things that I shouldn't and

832
00:32:34,830 --> 00:32:39,899
these are things that are<font color="#E5E5E5"> in the in the</font>

833
00:32:36,600 --> 00:32:42,240
database but basically what we found is

834
00:32:39,900 --> 00:32:43,890
that a version of this<font color="#E5E5E5"> version of</font>

835
00:32:42,240 --> 00:32:45,270
<font color="#E5E5E5">WordPress doesn't do any input</font>

836
00:32:43,890 --> 00:32:48,120
sanitization everything will<font color="#E5E5E5"> make it to</font>

837
00:32:45,270 --> 00:32:50,340
<font color="#CCCCCC">the database cleanly and be stored in I</font>

838
00:32:48,120 --> 00:32:52,949
interactive sense not an end in an inert

839
00:32:50,340 --> 00:32:54,240
state so that they were lying entirely

840
00:32:52,950 --> 00:32:57,150
and doing their<font color="#E5E5E5"> white listing and their</font>

841
00:32:54,240 --> 00:32:59,280
encoding both on output which Rio

842
00:32:57,150 --> 00:33:01,920
actually works in<font color="#E5E5E5"> this case for the most</font>

843
00:32:59,280 --> 00:33:03,990
part with their own vulnerabilities

844
00:33:01,920 --> 00:33:05,130
except for<font color="#CCCCCC"> the fact that if this were</font>

845
00:33:03,990 --> 00:33:06,450
ever extended by another set of

846
00:33:05,130 --> 00:33:08,760
developers they're dealing with<font color="#E5E5E5"> data</font>

847
00:33:06,450 --> 00:33:11,220
that's unsafe there are a number of

848
00:33:08,760 --> 00:33:12,629
inward presses cases plugins that<font color="#E5E5E5"> will</font>

849
00:33:11,220 --> 00:33:15,270
access the database and<font color="#E5E5E5"> pull things out</font>

850
00:33:12,630 --> 00:33:20,520
so an example of why you<font color="#E5E5E5"> would want to</font>

851
00:33:15,270 --> 00:33:22,889
<font color="#E5E5E5">waste or things yes this is 1.5 yeah to</font>

852
00:33:20,520 --> 00:33:24,330
the<font color="#CCCCCC"> to branch went to mostly</font><font color="#E5E5E5"> Ajax inputs</font>

853
00:33:22,890 --> 00:33:30,720
win which case this tool is completely

854
00:33:24,330 --> 00:33:33,060
useless so yeah I do have<font color="#CCCCCC"> funds to build</font>

855
00:33:30,720 --> 00:33:35,070
up<font color="#E5E5E5"> for Ajax and I have plans to add some</font>

856
00:33:33,060 --> 00:33:37,860
awesome authentication actually that's

857
00:33:35,070 --> 00:33:39,810
probably the next slide well<font color="#E5E5E5"> I'll skip</font>

858
00:33:37,860 --> 00:33:41,219
to my tool<font color="#E5E5E5"> plans again give it</font><font color="#CCCCCC"> an</font>

859
00:33:39,810 --> 00:33:43,169
interface put it in c-sharp I want to be

860
00:33:41,220 --> 00:33:45,240
able to multiple authentication forms

861
00:33:43,170 --> 00:33:47,010
add some open ID support so we can do

862
00:33:45,240 --> 00:33:49,620
things have via token as well as

863
00:33:47,010 --> 00:33:52,050
employed forms and<font color="#CCCCCC"> it's expended for</font>

864
00:33:49,620 --> 00:33:55,159
both Ajax and also to be<font color="#CCCCCC"> able to fuzz</font>

865
00:33:52,050 --> 00:33:55,159
headers yeah

866
00:34:00,910 --> 00:34:07,820
dotnet is your friend net via the the

867
00:34:06,140 --> 00:34:10,250
dogmatic framework has some pretty good

868
00:34:07,820 --> 00:34:20,899
Ajax classes to it so it takes the

869
00:34:10,250 --> 00:34:22,280
difficulty out of building it yeah vs of

870
00:34:20,899 --> 00:34:23,810
cryptid yeah<font color="#CCCCCC"> if</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> accession</font>

871
00:34:22,280 --> 00:34:25,790
authentication is an encrypted URL it's

872
00:34:23,810 --> 00:34:28,820
available via the refers string if the

873
00:34:25,790 --> 00:34:30,800
tokens in<font color="#CCCCCC"> the URL so that if</font><font color="#E5E5E5"> I go from</font>

874
00:34:28,820 --> 00:34:31,970
your site to evil<font color="#E5E5E5"> com I can see what</font>

875
00:34:30,800 --> 00:34:35,300
your token is and then act with that

876
00:34:31,969 --> 00:34:36,618
<font color="#E5E5E5">with that took and that wouldn't be true</font>

877
00:34:35,300 --> 00:34:38,149
of headers for example saw true of

878
00:34:36,619 --> 00:34:40,760
cookies<font color="#E5E5E5"> and if you're doing things via</font>

879
00:34:38,149 --> 00:34:42,199
post with<font color="#CCCCCC"> a hidden</font><font color="#E5E5E5"> form that's with a</font>

880
00:34:40,760 --> 00:34:44,360
hidden values another way to store a

881
00:34:42,199 --> 00:34:52,549
session<font color="#E5E5E5"> token without putting it into</font>

882
00:34:44,360 --> 00:34:53,750
the header yeah Oh SSL won't mitigate

883
00:34:52,550 --> 00:34:56,149
cross-site scripting because you're

884
00:34:53,750 --> 00:34:57,740
<font color="#E5E5E5">going in through the front door right</font>

885
00:34:56,149 --> 00:34:59,000
but you can have an encrypted request

886
00:34:57,740 --> 00:35:01,868
but it's still when it gets to the

887
00:34:59,000 --> 00:35:04,430
server<font color="#E5E5E5"> it's still the same</font><font color="#CCCCCC"> attack string</font>

888
00:35:01,869 --> 00:35:06,740
yeah patrols you won't solve anything

889
00:35:04,430 --> 00:35:08,990
they're almost all<font color="#E5E5E5"> these applications</font>

890
00:35:06,740 --> 00:35:11,240
have side jacking things that are broken

891
00:35:08,990 --> 00:35:12,770
as well and that's where encryption

892
00:35:11,240 --> 00:35:14,569
becomes a big deal in terms<font color="#E5E5E5"> of security</font>

893
00:35:12,770 --> 00:35:16,220
design otherwise this most important

894
00:35:14,570 --> 00:35:19,040
feature is keeping your data secure from

895
00:35:16,220 --> 00:35:21,020
<font color="#E5E5E5">information disclosure so now I guess I</font>

896
00:35:19,040 --> 00:35:22,310
take that back if you could<font color="#E5E5E5"> build a web</font>

897
00:35:21,020 --> 00:35:24,890
this way and talk your business<font color="#E5E5E5"> into</font>

898
00:35:22,310 --> 00:35:26,600
doing it use X 05 x.509 certificates

899
00:35:24,890 --> 00:35:27,920
into authentication vs SL<font color="#E5E5E5"> and your</font>

900
00:35:26,600 --> 00:35:32,420
beautiful condition about authentication

901
00:35:27,920 --> 00:35:33,200
and so on but I have had no<font color="#CCCCCC"> luck I don't</font>

902
00:35:32,420 --> 00:35:34,730
know if anybody<font color="#CCCCCC"> else has had luck</font>

903
00:35:33,200 --> 00:35:38,980
talking businesses into completely

904
00:35:34,730 --> 00:35:38,980
certificate securing all their web space

905
00:35:39,280 --> 00:35:44,780
so go back up<font color="#CCCCCC"> i think i covered the the</font>

906
00:35:42,800 --> 00:35:46,609
benefits mostly<font color="#E5E5E5"> there are fundamental</font>

907
00:35:44,780 --> 00:35:48,680
problems in software design that defines

908
00:35:46,609 --> 00:35:50,720
by examining state we can look at is all

909
00:35:48,680 --> 00:35:52,790
the attack data being stored in early in

910
00:35:50,720 --> 00:35:54,410
the database we don't<font color="#E5E5E5"> have to care</font><font color="#CCCCCC"> about</font>

911
00:35:52,790 --> 00:35:56,330
noise or just<font color="#E5E5E5"> doing a diversion machine</font>

912
00:35:54,410 --> 00:35:57,890
in a test environment and if we have the

913
00:35:56,330 --> 00:35:59,660
code or even if we're working on an<font color="#CCCCCC"> open</font>

914
00:35:57,890 --> 00:36:02,000
source project we can implement this

915
00:35:59,660 --> 00:36:03,799
pretty quickly and we actually detect

916
00:36:02,000 --> 00:36:06,490
persistent cross-site scripting fairly

917
00:36:03,800 --> 00:36:11,300
quickly<font color="#E5E5E5"> via this via this approach</font>

918
00:36:06,490 --> 00:36:13,149
limitations again forms<font color="#E5E5E5"> ajax the cookies</font>

919
00:36:11,300 --> 00:36:14,829
can be photos headers can be caused

920
00:36:13,150 --> 00:36:16,329
there are<font color="#E5E5E5"> lots of ways data gets in</font>

921
00:36:14,829 --> 00:36:17,740
there the thing I haven't<font color="#E5E5E5"> figured</font><font color="#CCCCCC"> out</font>

922
00:36:16,329 --> 00:36:20,619
how I want<font color="#CCCCCC"> to do is looking at things</font>

923
00:36:17,740 --> 00:36:22,089
that use JSON I've<font color="#E5E5E5"> quite figured out how</font>

924
00:36:20,619 --> 00:36:23,890
to build an effective fuzzer there so

925
00:36:22,089 --> 00:36:29,440
everybody has any ideas I'd love to hear

926
00:36:23,890 --> 00:36:32,859
<font color="#CCCCCC">that and so this is clearly solvable I</font>

927
00:36:29,440 --> 00:36:35,170
mean this web application a pattern is

928
00:36:32,859 --> 00:36:37,869
pretty quick<font color="#E5E5E5"> and easy anything as far as</font>

929
00:36:35,170 --> 00:36:40,180
I can in my analysis it'll solve pretty

930
00:36:37,869 --> 00:36:41,619
much one hundred percent cross-site

931
00:36:40,180 --> 00:36:45,160
scripting if you implement it with

932
00:36:41,619 --> 00:36:46,329
dedication I can see applications like I

933
00:36:45,160 --> 00:36:48,460
mentioned before don't lend themselves

934
00:36:46,329 --> 00:36:50,890
to this pattern if you're writing you

935
00:36:48,460 --> 00:36:52,869
know embedded PHP and HTML and the PHP

936
00:36:50,890 --> 00:36:55,569
three early PHP four styles or if you're

937
00:36:52,869 --> 00:36:58,029
writing classic<font color="#E5E5E5"> ASP or to some extent</font>

938
00:36:55,569 --> 00:37:01,140
you know pearl CGI then the 90s style

939
00:36:58,029 --> 00:37:03,880
your host you can't really<font color="#E5E5E5"> do this</font>

940
00:37:01,140 --> 00:37:05,230
browser behavior can be a problem is

941
00:37:03,880 --> 00:37:06,430
solving it today doesn't mean that the

942
00:37:05,230 --> 00:37:08,230
next generation<font color="#E5E5E5"> the browser's won't</font>

943
00:37:06,430 --> 00:37:11,230
screw<font color="#E5E5E5"> something else up current</font>

944
00:37:08,230 --> 00:37:12,940
generation is pretty good but I found

945
00:37:11,230 --> 00:37:14,740
<font color="#E5E5E5">that their updated in as soon as a</font>

946
00:37:12,940 --> 00:37:16,569
cross-site scripting vulnerability is

947
00:37:14,740 --> 00:37:19,740
found in both firefox internet explorer

948
00:37:16,569 --> 00:37:22,509
that their past pretty quickly for it

949
00:37:19,740 --> 00:37:24,038
application complexity makes it very

950
00:37:22,510 --> 00:37:27,010
difficult to predict state like a client

951
00:37:24,039 --> 00:37:28,809
<font color="#CCCCCC">application I mentioned</font><font color="#E5E5E5"> before the idea</font>

952
00:37:27,010 --> 00:37:30,549
of going through and trying to<font color="#CCCCCC"> find the</font>

953
00:37:28,809 --> 00:37:32,020
hybrid cross site scripting attacks that

954
00:37:30,549 --> 00:37:35,710
you very pretty much have to numerate

955
00:37:32,020 --> 00:37:37,569
every single possible route through an

956
00:37:35,710 --> 00:37:40,359
application<font color="#CCCCCC"> and as applications get</font>

957
00:37:37,569 --> 00:37:43,000
thousands<font color="#E5E5E5"> of pages and then Doug I just</font>

958
00:37:40,359 --> 00:37:44,470
grows exponentially and complexity also

959
00:37:43,000 --> 00:37:46,150
involves developers is the more

960
00:37:44,470 --> 00:37:47,529
developers on a project to the easier it

961
00:37:46,150 --> 00:37:49,450
is to be<font color="#E5E5E5"> locks about following an</font>

962
00:37:47,529 --> 00:37:51,760
architectural problem so there are<font color="#E5E5E5"> a lot</font>

963
00:37:49,450 --> 00:37:53,230
of culture of<font color="#E5E5E5"> quality engineering work</font>

964
00:37:51,760 --> 00:37:54,190
that needs to be done to<font color="#CCCCCC"> make sure the</font>

965
00:37:53,230 --> 00:37:57,220
<font color="#E5E5E5">everybody is doing the work</font><font color="#CCCCCC"> they know to</font>

966
00:37:54,190 --> 00:37:58,990
do and the application applications

967
00:37:57,220 --> 00:38:01,779
changes the developers change over time

968
00:37:58,990 --> 00:38:03,640
<font color="#E5E5E5">I've mentioned briefly the WordPress</font>

969
00:38:01,779 --> 00:38:05,950
plugins are big vulnerability because

970
00:38:03,640 --> 00:38:07,089
they tap into the database and do

971
00:38:05,950 --> 00:38:08,439
whatever the heck they walked on the way

972
00:38:07,089 --> 00:38:10,720
out without necessarily going through

973
00:38:08,440 --> 00:38:14,440
wordpress is quality control points and

974
00:38:10,720 --> 00:38:16,118
simply because the current developers no

975
00:38:14,440 --> 00:38:18,339
one policy pattern doesn't mean the<font color="#E5E5E5"> next</font>

976
00:38:16,119 --> 00:38:19,539
higher is going to or even<font color="#E5E5E5"> that you're</font>

977
00:38:18,339 --> 00:38:23,140
going<font color="#E5E5E5"> to own this code for its entire</font>

978
00:38:19,539 --> 00:38:26,470
life cycle so called action write better

979
00:38:23,140 --> 00:38:27,670
code pretty clearly it's

980
00:38:26,470 --> 00:38:29,560
it's a<font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of work but it's not</font>

981
00:38:27,670 --> 00:38:31,210
difficult once you think<font color="#E5E5E5"> about it know</font>

982
00:38:29,560 --> 00:38:32,799
how to<font color="#E5E5E5"> do it use current browser</font>

983
00:38:31,210 --> 00:38:36,310
technology this<font color="#E5E5E5"> is really important</font>

984
00:38:32,800 --> 00:38:39,130
mostly personal browsing of the web and

985
00:38:36,310 --> 00:38:41,799
as an enterprise make people upgrade

986
00:38:39,130 --> 00:38:43,450
their browsers and honorable is honestly

987
00:38:41,800 --> 00:38:45,190
assess your enterprise I mean this is

988
00:38:43,450 --> 00:38:47,470
looking<font color="#E5E5E5"> at not just what are we building</font>

989
00:38:45,190 --> 00:38:49,000
now what have<font color="#E5E5E5"> we built in the past do we</font>

990
00:38:47,470 --> 00:38:50,770
need to<font color="#E5E5E5"> tear this apart and rebuild it</font>

991
00:38:49,000 --> 00:38:52,930
to solve cross-site scripting do we have

992
00:38:50,770 --> 00:38:56,080
<font color="#E5E5E5">lots of legacy code that we're not going</font>

993
00:38:52,930 --> 00:38:58,000
<font color="#E5E5E5">to find an easy solution for or is this</font>

994
00:38:56,080 --> 00:38:59,020
something<font color="#E5E5E5"> that's going to be so cost and</font>

995
00:38:58,000 --> 00:39:01,630
effective we should put in something

996
00:38:59,020 --> 00:39:03,550
like a web application firewall or<font color="#CCCCCC"> snork</font>

997
00:39:01,630 --> 00:39:05,080
to actually kill requests that are going

998
00:39:03,550 --> 00:39:06,520
<font color="#E5E5E5">to be</font><font color="#CCCCCC"> getting you know signature</font>

999
00:39:05,080 --> 00:39:11,220
detectable cross-site scripting attacks

1000
00:39:06,520 --> 00:39:13,660
in our enterprise my contacts

1001
00:39:11,220 --> 00:39:15,609
bibliography these are people who<font color="#E5E5E5"> are</font>

1002
00:39:13,660 --> 00:39:16,629
smarter<font color="#CCCCCC"> than me so you shouldn't eat</font>

1003
00:39:15,609 --> 00:39:18,940
this something that I'm not addressing

1004
00:39:16,630 --> 00:39:20,410
you<font color="#E5E5E5"> won't hit these sources most</font>

1005
00:39:18,940 --> 00:39:21,780
important I<font color="#E5E5E5"> think actually uh Michael</font>

1006
00:39:20,410 --> 00:39:24,368
Ernst the second and third link down

1007
00:39:21,780 --> 00:39:25,840
just move from MIT to university<font color="#E5E5E5"> of</font>

1008
00:39:24,369 --> 00:39:27,700
washington<font color="#E5E5E5"> i discover these papers last</font>

1009
00:39:25,840 --> 00:39:29,020
week and they're basically about two

1010
00:39:27,700 --> 00:39:31,060
years beyond where i am thinking<font color="#CCCCCC"> about</font>

1011
00:39:29,020 --> 00:39:33,220
<font color="#E5E5E5">the same things so they're fantastic</font>

1012
00:39:31,060 --> 00:39:34,930
papers his tools are better than mine he

1013
00:39:33,220 --> 00:39:38,140
has<font color="#E5E5E5"> you know half doesn't</font><font color="#CCCCCC"> CS graduate</font>

1014
00:39:34,930 --> 00:39:40,118
students writing them for him yeah so

1015
00:39:38,140 --> 00:39:42,730
I'm secure to see if I<font color="#E5E5E5"> can talk to him</font>

1016
00:39:40,119 --> 00:39:44,710
and get some to push my own work forward

1017
00:39:42,730 --> 00:39:48,310
but I think this<font color="#E5E5E5"> is important work and</font>

1018
00:39:44,710 --> 00:39:50,640
then more bibliography and any more

1019
00:39:48,310 --> 00:39:50,640
questions

1020
00:39:57,580 --> 00:40:05,170
I'm sorry Oh hit my<font color="#CCCCCC"> ball blog I have a</font>

1021
00:40:03,670 --> 00:40:07,410
personal subversion server I didn't want

1022
00:40:05,170 --> 00:40:10,540
<font color="#E5E5E5">to put anything up until I</font><font color="#CCCCCC"> gave the talk</font>

1023
00:40:07,410 --> 00:40:12,700
i'll probably<font color="#E5E5E5"> put it in my personal that</font>

1024
00:40:10,540 --> 00:40:13,900
yeah codeplex complicates things for me

1025
00:40:12,700 --> 00:40:15,490
because<font color="#CCCCCC"> i did this completely on my own</font>

1026
00:40:13,900 --> 00:40:18,940
time and then I hand license ignore to

1027
00:40:15,490 --> 00:40:20,049
Microsoft since they pay my rent and I

1028
00:40:18,940 --> 00:40:28,500
don't have complete control her what to

1029
00:40:20,050 --> 00:40:28,500
do with<font color="#CCCCCC"> it any other questions</font>

1030
00:40:30,760 --> 00:40:36,070
<font color="#E5E5E5">I guess</font><font color="#CCCCCC"> that this is ready for</font><font color="#E5E5E5"> lunch</font>

1031
00:40:33,340 --> 00:40:38,250
about 15 minutes early thank you very

1032
00:40:36,070 --> 00:40:38,250
much

1033
00:40:45,480 --> 00:40:47,540
you

