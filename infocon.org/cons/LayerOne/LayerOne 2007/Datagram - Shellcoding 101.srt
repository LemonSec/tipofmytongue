1
00:03:12,690 --> 00:03:28,660
do you want to verify the<font color="#E5E5E5"> bars testicles</font>

2
00:03:22,540 --> 00:03:32,410
12 you get to<font color="#E5E5E5"> go</font><font color="#CCCCCC"> okay again she'll</font>

3
00:03:28,660 --> 00:03:35,320
coding 101 by data and we'll<font color="#E5E5E5"> get started</font>

4
00:03:32,410 --> 00:03:37,120
right away<font color="#E5E5E5"> about me you</font><font color="#CCCCCC"> don't care</font><font color="#E5E5E5"> about</font>

5
00:03:35,320 --> 00:03:39,489
all this<font color="#E5E5E5"> I do programming spoke at a</font>

6
00:03:37,120 --> 00:03:44,440
couple conferences last year superhero

7
00:03:39,490 --> 00:03:45,670
<font color="#E5E5E5">in my off time before before we go into</font>

8
00:03:44,440 --> 00:03:47,560
this slide I just want to<font color="#E5E5E5"> say it</font>

9
00:03:45,670 --> 00:03:50,290
prerequisite knowledge of assembly and

10
00:03:47,560 --> 00:03:55,600
<font color="#E5E5E5">Linux would be good despite what you</font>

11
00:03:50,290 --> 00:03:56,560
just saw there there is some but yeah

12
00:03:55,600 --> 00:03:58,630
we're<font color="#CCCCCC"> not going to</font><font color="#E5E5E5"> get into buffer</font>

13
00:03:56,560 --> 00:04:01,120
overflows or anything like that it's

14
00:03:58,630 --> 00:04:04,660
just going to be post exploitation

15
00:04:01,120 --> 00:04:06,580
execution that sort of thing so what<font color="#CCCCCC"> is</font>

16
00:04:04,660 --> 00:04:08,490
shellcode traditionally it's exactly

17
00:04:06,580 --> 00:04:11,410
like it sounds code that spawns a shell

18
00:04:08,490 --> 00:04:14,590
such as bin shell bash whatever you're

19
00:04:11,410 --> 00:04:16,570
into<font color="#E5E5E5"> now it's kind of morphed itself</font>

20
00:04:14,590 --> 00:04:19,030
into more of a payload it's anything

21
00:04:16,570 --> 00:04:22,719
that<font color="#E5E5E5"> you execute after taking control of</font>

22
00:04:19,029 --> 00:04:24,010
a machine and pretty much<font color="#E5E5E5"> any exploit</font>

23
00:04:22,720 --> 00:04:25,750
you're going to see these days is going

24
00:04:24,010 --> 00:04:28,510
to use this unless it's a you know

25
00:04:25,750 --> 00:04:31,810
override a config file exploit but most

26
00:04:28,510 --> 00:04:33,909
of<font color="#E5E5E5"> all overflows generally you're going</font>

27
00:04:31,810 --> 00:04:35,980
to see this kind<font color="#CCCCCC"> of stuff and the one</font>

28
00:04:33,910 --> 00:04:37,510
difference between or one of<font color="#E5E5E5"> the</font>

29
00:04:35,980 --> 00:04:38,740
differences between it and normal

30
00:04:37,510 --> 00:04:40,840
assembly code is<font color="#CCCCCC"> that it's single</font>

31
00:04:38,740 --> 00:04:43,570
segment so you don't<font color="#E5E5E5"> have a data segment</font>

32
00:04:40,840 --> 00:04:45,690
you're only using text segment as well

33
00:04:43,570 --> 00:04:48,250
as a stack and you know other things but

34
00:04:45,690 --> 00:04:49,810
generally it's as if you didn't have

35
00:04:48,250 --> 00:04:56,100
data to<font color="#E5E5E5"> work with while writing the code</font>

36
00:04:49,810 --> 00:04:56,100
and again<font color="#E5E5E5"> only post execution hijacking</font>

37
00:04:56,460 --> 00:05:04,390
so why has it transformed into payload

38
00:05:01,840 --> 00:05:06,489
rather than just shell spawning bin

39
00:05:04,390 --> 00:05:08,830
shell does offer you the most general

40
00:05:06,490 --> 00:05:11,530
flexibility but flexibility is not

41
00:05:08,830 --> 00:05:13,900
necessary if you know what your target

42
00:05:11,530 --> 00:05:15,219
is and what you want to do you basically

43
00:05:13,900 --> 00:05:17,109
<font color="#E5E5E5">can do everything</font><font color="#CCCCCC"> you want with</font>

44
00:05:15,220 --> 00:05:20,110
<font color="#CCCCCC">shellcode you don't need to have a</font>

45
00:05:17,110 --> 00:05:22,479
literal shell and all the overhead

46
00:05:20,110 --> 00:05:23,860
that's associated with it such as

47
00:05:22,479 --> 00:05:25,599
logging or auditing<font color="#E5E5E5"> or</font>

48
00:05:23,860 --> 00:05:27,909
anything<font color="#E5E5E5"> like that it's also a much</font>

49
00:05:25,599 --> 00:05:29,740
smaller memory footprint you're not

50
00:05:27,909 --> 00:05:33,789
going to have your shell history in cake

51
00:05:29,740 --> 00:05:35,050
or and less obvious because the generic

52
00:05:33,789 --> 00:05:37,840
way to look through memories with

53
00:05:35,050 --> 00:05:39,580
strings and much of shell code is

54
00:05:37,840 --> 00:05:41,500
unprintable ascii and it'll just<font color="#E5E5E5"> break</font>

55
00:05:39,580 --> 00:05:43,539
strings halfway<font color="#CCCCCC"> through so you won't be</font>

56
00:05:41,500 --> 00:05:44,949
<font color="#CCCCCC">able to see you know all this stuff</font>

57
00:05:43,539 --> 00:05:46,360
you're<font color="#E5E5E5"> doing you'll see random garbage</font>

58
00:05:44,949 --> 00:05:49,090
that you know will pretty much look like

59
00:05:46,360 --> 00:05:51,189
random normal memory garbage and shell

60
00:05:49,090 --> 00:05:54,818
isn't always the best or the easiest

61
00:05:51,189 --> 00:05:57,520
solution for example you're exploiting a

62
00:05:54,819 --> 00:06:00,520
my sequel server it generally you<font color="#CCCCCC"> don't</font>

63
00:05:57,520 --> 00:06:02,469
want a show you just want all the data

64
00:06:00,520 --> 00:06:04,210
from<font color="#E5E5E5"> that and if you get file system</font>

65
00:06:02,469 --> 00:06:05,560
access through the shell you can<font color="#CCCCCC"> have</font>

66
00:06:04,210 --> 00:06:07,239
big chunky files and you're gonna have

67
00:06:05,560 --> 00:06:09,759
<font color="#E5E5E5">to figure out all that sort of stuff so</font>

68
00:06:07,240 --> 00:06:12,819
in some cases<font color="#E5E5E5"> it's not always the best</font>

69
00:06:09,759 --> 00:06:16,349
solution and that's why targeted

70
00:06:12,819 --> 00:06:20,590
<font color="#CCCCCC">shellcode is kind of risen in popularity</font>

71
00:06:16,349 --> 00:06:23,110
quite a<font color="#E5E5E5"> bit I would feel free</font><font color="#CCCCCC"> to ask</font>

72
00:06:20,590 --> 00:06:26,489
questions<font color="#E5E5E5"> just shut shit out I'm I don't</font>

73
00:06:23,110 --> 00:06:28,870
<font color="#CCCCCC">really care so the enemies of shellcode</font>

74
00:06:26,490 --> 00:06:32,169
network intrusion detection generally

75
00:06:28,870 --> 00:06:35,469
through signature analysis such as snort

76
00:06:32,169 --> 00:06:37,539
that kind of thing there's<font color="#E5E5E5"> more host</font>

77
00:06:35,469 --> 00:06:40,330
intrusion detection systems that I'll do

78
00:06:37,539 --> 00:06:42,818
<font color="#E5E5E5">things like monitor what your process is</font>

79
00:06:40,330 --> 00:06:45,370
<font color="#CCCCCC">actually doing</font><font color="#E5E5E5"> on the system you know</font>

80
00:06:42,819 --> 00:06:47,710
file access that sort of things there's

81
00:06:45,370 --> 00:06:50,139
also IPS with sandboxing your your

82
00:06:47,710 --> 00:06:53,529
incoming code so that it watching it as

83
00:06:50,139 --> 00:06:55,180
<font color="#CCCCCC">its executing system customization this</font>

84
00:06:53,529 --> 00:06:57,969
is a big thing on<font color="#CCCCCC"> Linux</font><font color="#E5E5E5"> not so much</font>

85
00:06:55,180 --> 00:07:00,250
windows just because linux and unix are

86
00:06:57,969 --> 00:07:01,270
much more customizable down to the point

87
00:07:00,250 --> 00:07:04,589
where you<font color="#CCCCCC"> could rewrite the entire</font>

88
00:07:01,270 --> 00:07:07,210
system given enough<font color="#E5E5E5"> motivation</font><font color="#CCCCCC"> i suppose</font>

89
00:07:04,589 --> 00:07:09,250
there's also protocol restrictions which

90
00:07:07,210 --> 00:07:11,758
are probably like in<font color="#E5E5E5"> general the most</font>

91
00:07:09,250 --> 00:07:15,000
the biggest<font color="#CCCCCC"> problem for most shellcode</font>

92
00:07:11,759 --> 00:07:17,169
buffer size is a<font color="#CCCCCC"> big thing you know it's</font>

93
00:07:15,000 --> 00:07:19,060
buffer size directly relates to

94
00:07:17,169 --> 00:07:20,830
<font color="#E5E5E5">versatility of your code if you</font><font color="#CCCCCC"> only</font>

95
00:07:19,060 --> 00:07:22,300
have you know<font color="#E5E5E5"> X bytes to work with</font>

96
00:07:20,830 --> 00:07:24,789
rather than a free range of whatever you

97
00:07:22,300 --> 00:07:28,419
want<font color="#E5E5E5"> and also there's character and</font>

98
00:07:24,789 --> 00:07:30,279
opcode restrictions that may filter your

99
00:07:28,419 --> 00:07:33,130
incoming code and just start it to the

100
00:07:30,279 --> 00:07:34,149
<font color="#E5E5E5">point where it doesn't work at all or to</font>

101
00:07:33,130 --> 00:07:37,630
the<font color="#E5E5E5"> point where it might crash the</font>

102
00:07:34,149 --> 00:07:40,810
machine so basic shell

103
00:07:37,630 --> 00:07:42,880
again<font color="#CCCCCC"> single-segment assembly and no no</font>

104
00:07:40,810 --> 00:07:45,640
<font color="#E5E5E5">lore restricted</font><font color="#CCCCCC"> bites in some cases this</font>

105
00:07:42,880 --> 00:07:47,200
<font color="#E5E5E5">isn't really a big deal it really</font>

106
00:07:45,640 --> 00:07:49,719
depends but in general you should aim

107
00:07:47,200 --> 00:07:51,750
for<font color="#E5E5E5"> for no</font><font color="#CCCCCC"> nola restricted bites just</font>

108
00:07:49,720 --> 00:07:53,830
because it's generally a requirement for

109
00:07:51,750 --> 00:07:56,620
certain types<font color="#E5E5E5"> of overflows and most</font>

110
00:07:53,830 --> 00:07:58,120
exploits but<font color="#E5E5E5"> again not not a rule of</font>

111
00:07:56,620 --> 00:08:01,180
<font color="#E5E5E5">thumb for every single</font><font color="#CCCCCC"> thing you're</font>

112
00:07:58,120 --> 00:08:03,280
<font color="#E5E5E5">going to be doing so the basic way to do</font>

113
00:08:01,180 --> 00:08:06,220
this is just load data into assembly

114
00:08:03,280 --> 00:08:08,979
registers or using the stack and then

115
00:08:06,220 --> 00:08:10,210
you call the Linux kernel to basically

116
00:08:08,980 --> 00:08:12,490
figure out everything<font color="#E5E5E5"> for you passed</font>

117
00:08:10,210 --> 00:08:14,349
that you could also do anything you can

118
00:08:12,490 --> 00:08:18,130
<font color="#CCCCCC">normally do an assembly for the most</font>

119
00:08:14,350 --> 00:08:23,050
part given your ability to do so through

120
00:08:18,130 --> 00:08:24,640
your code so<font color="#E5E5E5"> before we get into actually</font>

121
00:08:23,050 --> 00:08:27,270
writing it feel like I should explain

122
00:08:24,640 --> 00:08:29,110
Linux system calls<font color="#CCCCCC"> a system call I</font>

123
00:08:27,270 --> 00:08:32,049
suppose you could<font color="#E5E5E5"> say it's basically a</font>

124
00:08:29,110 --> 00:08:34,960
kernel API and this instruction here in

125
00:08:32,049 --> 00:08:36,459
280 calls the kernel and then based on

126
00:08:34,960 --> 00:08:40,180
what's<font color="#E5E5E5"> in the registers of the stack of</font>

127
00:08:36,460 --> 00:08:42,250
the time it'll you know execute a

128
00:08:40,179 --> 00:08:44,680
command such as like we're on a system

129
00:08:42,250 --> 00:08:47,230
command or return your user ID your

130
00:08:44,680 --> 00:08:49,180
process ID that sort<font color="#CCCCCC"> of things and the</font>

131
00:08:47,230 --> 00:08:50,830
basic format for this is the<font color="#CCCCCC"> eax</font>

132
00:08:49,180 --> 00:08:52,979
register holds us<font color="#E5E5E5"> this call number and</font>

133
00:08:50,830 --> 00:08:55,960
everything<font color="#E5E5E5"> else including the stack</font>

134
00:08:52,980 --> 00:08:57,400
holds all the other parameters not

135
00:08:55,960 --> 00:08:58,870
always<font color="#CCCCCC"> are you going to</font><font color="#E5E5E5"> be using all the</font>

136
00:08:57,400 --> 00:09:02,890
registers sometimes you might just<font color="#E5E5E5"> use a</font>

137
00:08:58,870 --> 00:09:04,090
stack it depends on the<font color="#CCCCCC"> exact thing</font>

138
00:09:02,890 --> 00:09:07,900
you're<font color="#CCCCCC"> trying to execute because</font><font color="#E5E5E5"> some</font>

139
00:09:04,090 --> 00:09:09,730
things<font color="#E5E5E5"> will have more arguments than you</font>

140
00:09:07,900 --> 00:09:13,709
have registers for so in that case you'd

141
00:09:09,730 --> 00:09:17,950
have to use the stack and all the

142
00:09:13,710 --> 00:09:20,920
parables I'll show you basically<font color="#E5E5E5"> man 2</font>

143
00:09:17,950 --> 00:09:23,410
is the programming pages and you have

144
00:09:20,920 --> 00:09:28,430
all your codes like this is one of<font color="#CCCCCC"> the</font>

145
00:09:23,410 --> 00:09:33,959
syscalls is it

146
00:09:28,430 --> 00:09:41,609
these are source include yeah oh that

147
00:09:33,959 --> 00:09:45,660
works oh what the fuck is that<font color="#CCCCCC"> okay this</font>

148
00:09:41,610 --> 00:09:48,420
<font color="#CCCCCC">Kyle</font><font color="#E5E5E5"> Oh or not this machine appears to</font>

149
00:09:45,660 --> 00:09:53,360
be neither oh whatever don't worry<font color="#CCCCCC"> about</font>

150
00:09:48,420 --> 00:09:55,680
<font color="#E5E5E5">it basically basically that file on a</font>

151
00:09:53,360 --> 00:09:57,660
standard machine will have all the

152
00:09:55,680 --> 00:09:59,219
definitions of Alta tisk also you can

153
00:09:57,660 --> 00:10:01,050
see that<font color="#E5E5E5"> the appropriate syscall and</font><font color="#CCCCCC"> its</font>

154
00:09:59,220 --> 00:10:04,709
<font color="#CCCCCC">its number that should be loaded into</font>

155
00:10:01,050 --> 00:10:08,729
<font color="#CCCCCC">eax and with with man to like if we do</font>

156
00:10:04,709 --> 00:10:10,310
man to execute you see all the

157
00:10:08,730 --> 00:10:12,810
parameters that need to be passed to it

158
00:10:10,310 --> 00:10:15,599
and<font color="#E5E5E5"> from here you could pretty much do</font>

159
00:10:12,810 --> 00:10:17,489
whatever you want it's just a<font color="#E5E5E5"> little you</font>

160
00:10:15,600 --> 00:10:20,040
know working<font color="#CCCCCC"> with it and understanding</font>

161
00:10:17,490 --> 00:10:22,709
basic programming stuff and enables you

162
00:10:20,040 --> 00:10:25,709
to pretty much do anything you want as

163
00:10:22,709 --> 00:10:29,160
far as show code is concerned so here's

164
00:10:25,709 --> 00:10:31,739
a very very basic example exit 0 seen in

165
00:10:29,160 --> 00:10:34,410
probably every program somebody's

166
00:10:31,740 --> 00:10:37,709
written man to reports it as exit and

167
00:10:34,410 --> 00:10:40,740
then takes one parameter as the status

168
00:10:37,709 --> 00:10:44,430
which is just<font color="#E5E5E5"> a return value so again</font>

169
00:10:40,740 --> 00:10:46,860
eix is call numbers<font color="#CCCCCC"> 1 ebx return value</font>

170
00:10:44,430 --> 00:10:49,260
so here's here's our assembly that<font color="#E5E5E5"> would</font>

171
00:10:46,860 --> 00:10:51,089
do that and remember like some of this

172
00:10:49,260 --> 00:10:53,339
might not seem straightforward just

173
00:10:51,089 --> 00:10:54,630
<font color="#E5E5E5">because it's it's I wrote all this so</font>

174
00:10:53,339 --> 00:10:56,880
that there's a<font color="#E5E5E5"> nominal or restricted</font>

175
00:10:54,630 --> 00:10:58,320
bites and that kind of thing so I try<font color="#CCCCCC"> to</font>

176
00:10:56,880 --> 00:11:01,350
comment it as best I could but if you

177
00:10:58,320 --> 00:11:04,260
confuse and just ask questions try and

178
00:11:01,350 --> 00:11:07,110
keep up<font color="#E5E5E5"> that sort of thing first first</font>

179
00:11:04,260 --> 00:11:10,199
instruction here clears<font color="#CCCCCC"> eax and then we</font>

180
00:11:07,110 --> 00:11:12,089
copy 02<font color="#CCCCCC"> ebx which is a return value and</font>

181
00:11:10,199 --> 00:11:14,490
then we set<font color="#E5E5E5"> eax</font><font color="#CCCCCC"> to one if you don't do</font>

182
00:11:12,089 --> 00:11:17,760
this it'll<font color="#CCCCCC"> probably crash fact it will</font>

183
00:11:14,490 --> 00:11:19,380
seg fault and then you just call<font color="#E5E5E5"> the</font>

184
00:11:17,760 --> 00:11:21,569
colonel and<font color="#E5E5E5"> the colonel notices that the</font>

185
00:11:19,380 --> 00:11:26,060
cisco one which<font color="#CCCCCC"> is exit and then does</font>

186
00:11:21,570 --> 00:11:26,060
all the rest of the work for you so

187
00:11:28,130 --> 00:11:34,880
what is it mount is be all Josh

188
00:11:38,470 --> 00:11:44,910
<font color="#E5E5E5">okay so</font><font color="#CCCCCC"> once you could just</font><font color="#E5E5E5"> write it in</font>

189
00:11:42,600 --> 00:11:46,450
just for testing purposes like

190
00:11:44,910 --> 00:11:47,860
<font color="#E5E5E5">eventually you're going to want to run</font>

191
00:11:46,450 --> 00:11:49,390
this through it a<font color="#E5E5E5"> sea program just to</font>

192
00:11:47,860 --> 00:11:51,430
make sure<font color="#E5E5E5"> like as a string it's not</font>

193
00:11:49,390 --> 00:11:55,090
crashing itself but you could just<font color="#E5E5E5"> write</font>

194
00:11:51,430 --> 00:11:57,520
basic assembly and do it in<font color="#CCCCCC"> Nazem or gas</font>

195
00:11:55,090 --> 00:11:58,840
or whatever you want but i just did

196
00:11:57,520 --> 00:12:04,230
<font color="#CCCCCC">intel</font><font color="#E5E5E5"> because i think it's easier to</font>

197
00:11:58,840 --> 00:12:10,720
read for presentation purposes now exit

198
00:12:04,230 --> 00:12:12,730
and link it<font color="#CCCCCC"> Nazem compiles it into an</font>

199
00:12:10,720 --> 00:12:20,470
object file LD links it into an

200
00:12:12,730 --> 00:12:23,250
executable cute cute<font color="#E5E5E5"> oh yeah that's</font>

201
00:12:20,470 --> 00:12:29,260
going to compile it and then run it oh

202
00:12:23,250 --> 00:12:31,360
great oh there's no network connection

203
00:12:29,260 --> 00:12:34,660
nevermind<font color="#E5E5E5"> okay you don't</font><font color="#CCCCCC"> get see an</font>

204
00:12:31,360 --> 00:12:36,340
example<font color="#CCCCCC"> right but</font><font color="#E5E5E5"> basically it would</font>

205
00:12:34,660 --> 00:12:38,319
return whatever I set it to and I think

206
00:12:36,340 --> 00:12:43,810
<font color="#CCCCCC">I</font><font color="#E5E5E5"> just left it blank so that it returns</font>

207
00:12:38,320 --> 00:12:49,330
to 55 or 250 for everyone clear on this

208
00:12:43,810 --> 00:12:51,849
any questions so far<font color="#CCCCCC"> okay good so right</font>

209
00:12:49,330 --> 00:12:53,440
into the console a same basic format but

210
00:12:51,850 --> 00:12:55,690
you have more parameters and it's a

211
00:12:53,440 --> 00:12:57,640
<font color="#E5E5E5">little bit different i'm also using the</font>

212
00:12:55,690 --> 00:12:59,370
stack in this so the basic format is

213
00:12:57,640 --> 00:13:01,330
right and then the type of output

214
00:12:59,370 --> 00:13:02,440
address of the string you want<font color="#E5E5E5"> to write</font>

215
00:13:01,330 --> 00:13:04,840
and<font color="#E5E5E5"> then the length of the string you</font>

216
00:13:02,440 --> 00:13:08,920
want<font color="#CCCCCC"> to write so</font><font color="#E5E5E5"> sis call for is right</font>

217
00:13:04,840 --> 00:13:10,360
output is 1 1st standard out ECX will be

218
00:13:08,920 --> 00:13:13,329
the string address edx will be the

219
00:13:10,360 --> 00:13:15,190
string length and then afterwards if you

220
00:13:13,330 --> 00:13:18,490
<font color="#E5E5E5">don't exit cleanly it'll probably seg</font>

221
00:13:15,190 --> 00:13:20,170
fault depending on the machine but exits

222
00:13:18,490 --> 00:13:23,650
only a couple bites so usually if you

223
00:13:20,170 --> 00:13:26,349
<font color="#E5E5E5">can you should include it so again clear</font>

224
00:13:23,650 --> 00:13:29,860
ECX and then Molly CX is<font color="#CCCCCC"> a assembly</font>

225
00:13:26,350 --> 00:13:31,840
trick so that it's clearing<font color="#CCCCCC"> eax ECX and</font>

226
00:13:29,860 --> 00:13:34,600
edx all at once so that<font color="#CCCCCC"> you don't</font><font color="#E5E5E5"> have</font>

227
00:13:31,840 --> 00:13:37,570
to spend six bytes doing that with the

228
00:13:34,600 --> 00:13:39,610
desorption and then we push the string

229
00:13:37,570 --> 00:13:42,750
<font color="#CCCCCC">to the stack and reverse</font><font color="#E5E5E5"> really sad</font><font color="#CCCCCC"> I</font>

230
00:13:39,610 --> 00:13:42,750
can't execute these actually

231
00:13:48,040 --> 00:13:56,959
no<font color="#E5E5E5"> I don't want to waste time going</font>

232
00:13:54,560 --> 00:13:58,670
through GCC and all that but you guys

233
00:13:56,959 --> 00:14:02,810
can<font color="#E5E5E5"> test these later I'm sorry about</font>

234
00:13:58,670 --> 00:14:04,849
this so basically the string that i

235
00:14:02,810 --> 00:14:07,040
wrote says hello layer<font color="#E5E5E5"> 1 attendees you</font>

236
00:14:04,850 --> 00:14:08,509
push it in reverse and then load up your

237
00:14:07,040 --> 00:14:09,889
registers with what you want call

238
00:14:08,509 --> 00:14:13,160
Colonel<font color="#E5E5E5"> I'll dump that to the</font>

239
00:14:09,889 --> 00:14:17,899
<font color="#CCCCCC">standardout pretty</font><font color="#E5E5E5"> simple not too hard</font>

240
00:14:13,160 --> 00:14:19,279
to do and so like I said what<font color="#CCCCCC"> you should</font>

241
00:14:17,899 --> 00:14:21,589
do is<font color="#CCCCCC"> you just have a little</font><font color="#E5E5E5"> C program</font>

242
00:14:19,279 --> 00:14:23,240
to run it through so<font color="#CCCCCC"> that you know</font>

243
00:14:21,589 --> 00:14:25,970
you're not accidentally putting in null

244
00:14:23,240 --> 00:14:27,620
bytes which you probably should see if

245
00:14:25,970 --> 00:14:28,759
figure to write it in hex but just in

246
00:14:27,620 --> 00:14:31,819
case<font color="#CCCCCC"> just to make sure it works like</font>

247
00:14:28,759 --> 00:14:36,500
<font color="#CCCCCC">this and it's just a</font><font color="#E5E5E5"> basic little format</font>

248
00:14:31,819 --> 00:14:38,139
that basically just jumps execution to

249
00:14:36,500 --> 00:14:41,329
the start of<font color="#CCCCCC"> the shellcode string and</font>

250
00:14:38,139 --> 00:14:42,589
just does that and if you have things

251
00:14:41,329 --> 00:14:44,719
<font color="#E5E5E5">that aren't supposed to begin at offset</font>

252
00:14:42,589 --> 00:14:46,399
one you change this line here you<font color="#E5E5E5"> just</font>

253
00:14:44,720 --> 00:14:48,920
add<font color="#CCCCCC"> to it to wherever you want to jump</font>

254
00:14:46,399 --> 00:14:54,139
to pretty<font color="#E5E5E5"> simple you just use it as a</font>

255
00:14:48,920 --> 00:14:57,250
template so now we'll get<font color="#E5E5E5"> into actual</font>

256
00:14:54,139 --> 00:15:02,720
shell shell code spawning<font color="#E5E5E5"> a shell is exe</font>

257
00:14:57,250 --> 00:15:04,910
<font color="#CCCCCC">CVE and then</font><font color="#E5E5E5"> prime minister the path to</font>

258
00:15:02,720 --> 00:15:07,490
the<font color="#E5E5E5"> actual thing you want to execute the</font>

259
00:15:04,910 --> 00:15:08,540
argument list and then environment

260
00:15:07,490 --> 00:15:11,180
pointer if you want those variables

261
00:15:08,540 --> 00:15:13,969
included<font color="#E5E5E5"> we'll just run through this</font>

262
00:15:11,180 --> 00:15:15,439
will<font color="#CCCCCC"> click clear out ECX</font><font color="#E5E5E5"> pushing</font><font color="#CCCCCC"> dull</font>

263
00:15:13,970 --> 00:15:18,800
because<font color="#E5E5E5"> you'll need to know for certain</font>

264
00:15:15,439 --> 00:15:20,779
things such as string termination but

265
00:15:18,800 --> 00:15:22,910
doing this won't leave null bytes in

266
00:15:20,779 --> 00:15:25,519
your shellcode it'll be all dynamically

267
00:15:22,910 --> 00:15:28,880
created when<font color="#CCCCCC"> you actually run this and</font>

268
00:15:25,519 --> 00:15:33,410
then you<font color="#E5E5E5"> push again string and reverse</font>

269
00:15:28,880 --> 00:15:36,610
and then point a path to the string push

270
00:15:33,410 --> 00:15:41,300
<font color="#CCCCCC">the null byte which would end RV and</font>

271
00:15:36,610 --> 00:15:43,819
then move<font color="#CCCCCC"> argue V again and the null out</font>

272
00:15:41,300 --> 00:15:46,040
and II MVP because<font color="#CCCCCC"> you don't you don't</font>

273
00:15:43,819 --> 00:15:49,250
care about environment pointers call

274
00:15:46,040 --> 00:15:51,949
<font color="#CCCCCC">Cisco 11 which is exe CVE call Colonel</font>

275
00:15:49,250 --> 00:15:55,459
and you get a show you could optimize

276
00:15:51,949 --> 00:15:57,020
this by a few bites by doing an assembly

277
00:15:55,459 --> 00:15:58,910
trick and basically

278
00:15:57,020 --> 00:16:00,800
setting<font color="#CCCCCC"> EDX as a null and then just</font>

279
00:15:58,910 --> 00:16:02,030
using<font color="#CCCCCC"> that to push the</font><font color="#E5E5E5"> nulls but it</font>

280
00:16:00,800 --> 00:16:04,490
doesn't<font color="#E5E5E5"> really matter something like</font>

281
00:16:02,030 --> 00:16:06,980
three or four bites your saving which is

282
00:16:04,490 --> 00:16:10,490
good in theory but potentially not

283
00:16:06,980 --> 00:16:12,080
necessary here's<font color="#CCCCCC"> another example that's</font>

284
00:16:10,490 --> 00:16:16,070
pretty common for for exploitation

285
00:16:12,080 --> 00:16:21,590
purposes is clearing iptables here's a

286
00:16:16,070 --> 00:16:22,730
little complex<font color="#E5E5E5"> exe</font><font color="#CCCCCC"> CVE and the only</font>

287
00:16:21,590 --> 00:16:23,780
<font color="#E5E5E5">difference between this and the</font><font color="#CCCCCC"> other</font>

288
00:16:22,730 --> 00:16:25,820
one is that your<font color="#E5E5E5"> multiple parameters</font>

289
00:16:23,780 --> 00:16:27,770
that you're sending to our DB so you

290
00:16:25,820 --> 00:16:31,330
have to sit there<font color="#E5E5E5"> a null each one out</font>

291
00:16:27,770 --> 00:16:34,130
right here and<font color="#E5E5E5"> right here so you know</font>

292
00:16:31,330 --> 00:16:38,360
basically<font color="#E5E5E5"> knows when to end each RV</font>

293
00:16:34,130 --> 00:16:41,060
thing but<font color="#E5E5E5"> again it's it's not a it's not</font>

294
00:16:38,360 --> 00:16:43,960
done within your actual shellcode bytes

295
00:16:41,060 --> 00:16:47,719
<font color="#E5E5E5">so you won't have any no bites from this</font>

296
00:16:43,960 --> 00:16:51,680
so basically just push oxo beasts<font color="#CCCCCC"> sis</font>

297
00:16:47,720 --> 00:16:54,890
<font color="#CCCCCC">call number pop it cdq basically clears</font>

298
00:16:51,680 --> 00:16:56,930
<font color="#CCCCCC">edx it takes the unsigned bit in eax and</font>

299
00:16:54,890 --> 00:16:59,630
copies that to EDX so that's that's a

300
00:16:56,930 --> 00:17:01,849
<font color="#CCCCCC">one-bite zor which is again just a</font>

301
00:16:59,630 --> 00:17:03,560
little assembly trick and then basically

302
00:17:01,850 --> 00:17:05,120
the same format just a bit longer

303
00:17:03,560 --> 00:17:08,060
<font color="#E5E5E5">because you have so much more to push on</font>

304
00:17:05,119 --> 00:17:10,879
<font color="#E5E5E5">to the stack and then set all those and</font>

305
00:17:08,060 --> 00:17:13,129
then execute with the colonel there's

306
00:17:10,880 --> 00:17:14,660
one<font color="#CCCCCC"> thing that</font><font color="#E5E5E5"> I realized that</font><font color="#CCCCCC"> I hadn't</font>

307
00:17:13,130 --> 00:17:16,730
actually realized before from using show

308
00:17:14,660 --> 00:17:18,500
code what's the problem with running

309
00:17:16,730 --> 00:17:25,430
this when you're trying to wipe out<font color="#E5E5E5"> the</font>

310
00:17:18,500 --> 00:17:27,260
firewall rules yeah if you have if you

311
00:17:25,430 --> 00:17:29,600
<font color="#CCCCCC">have a default chain policy on input</font>

312
00:17:27,260 --> 00:17:32,390
forward or whatever flush doesn't wipe

313
00:17:29,600 --> 00:17:35,030
that and you can't use<font color="#E5E5E5"> F&P in the same</font>

314
00:17:32,390 --> 00:17:37,340
the same<font color="#CCCCCC"> iptables command so if you</font>

315
00:17:35,030 --> 00:17:39,290
really<font color="#E5E5E5"> wanted</font><font color="#CCCCCC"> to you'd have to you'd</font>

316
00:17:37,340 --> 00:17:42,530
<font color="#E5E5E5">have to call bash with a dash</font><font color="#CCCCCC"> C and</font><font color="#E5E5E5"> then</font>

317
00:17:39,290 --> 00:17:45,889
do a<font color="#E5E5E5"> really complex like double and to</font>

318
00:17:42,530 --> 00:17:47,629
do both<font color="#E5E5E5"> in one which</font><font color="#CCCCCC"> is you know a good</font>

319
00:17:45,890 --> 00:17:53,930
<font color="#CCCCCC">exercise if</font><font color="#E5E5E5"> you guys are</font><font color="#CCCCCC"> starting to get</font>

320
00:17:47,630 --> 00:17:55,850
into this one<font color="#CCCCCC"> I'll learn</font><font color="#E5E5E5"> it true true</font>

321
00:17:53,930 --> 00:17:57,800
but if the first one doesn't succeed

322
00:17:55,850 --> 00:18:00,469
then second one might potentially not

323
00:17:57,800 --> 00:18:03,600
succeed either and

324
00:18:00,470 --> 00:18:05,550
but yeah and also one other thing that<font color="#E5E5E5"> I</font>

325
00:18:03,600 --> 00:18:07,379
<font color="#CCCCCC">noticed you can</font><font color="#E5E5E5"> include actually we'll</font>

326
00:18:05,550 --> 00:18:10,409
get to that later I'm<font color="#E5E5E5"> getting ahead of</font>

327
00:18:07,380 --> 00:18:12,630
myself so advanced<font color="#E5E5E5"> shell coding uh with</font>

328
00:18:10,410 --> 00:18:14,370
with just<font color="#E5E5E5"> a basic knowledge of assembly</font>

329
00:18:12,630 --> 00:18:15,780
and insist<font color="#E5E5E5"> college you could probably do</font>

330
00:18:14,370 --> 00:18:21,870
the majority of<font color="#E5E5E5"> the things you want</font>

331
00:18:15,780 --> 00:18:23,490
however complex<font color="#CCCCCC"> nids or hid s probably</font>

332
00:18:21,870 --> 00:18:27,570
stomped your shellcode down in its

333
00:18:23,490 --> 00:18:29,940
tracks there's also you know program

334
00:18:27,570 --> 00:18:33,030
restrictions such as<font color="#CCCCCC"> ascii restrictions</font>

335
00:18:29,940 --> 00:18:34,560
or they might be filtering your<font color="#CCCCCC"> input</font>

336
00:18:33,030 --> 00:18:37,860
data to<font color="#CCCCCC"> the point that it's</font><font color="#E5E5E5"> going to</font>

337
00:18:34,560 --> 00:18:39,450
break the shell code so all these

338
00:18:37,860 --> 00:18:42,439
advanced features generally do a good

339
00:18:39,450 --> 00:18:45,180
job of either hiding the<font color="#CCCCCC"> shell code or</font>

340
00:18:42,440 --> 00:18:51,960
working to make it more flexible in the

341
00:18:45,180 --> 00:18:53,940
face of obscurity by the system so first

342
00:18:51,960 --> 00:18:56,430
thing is<font color="#E5E5E5"> ask your opcode restrictions</font>

343
00:18:53,940 --> 00:18:59,610
there's some protocols that will

344
00:18:56,430 --> 00:19:02,550
basically only accept a ski and despite

345
00:18:59,610 --> 00:19:04,139
<font color="#E5E5E5">like how hard that sounds</font><font color="#CCCCCC"> to to not be</font>

346
00:19:02,550 --> 00:19:06,030
able to execute shell code<font color="#E5E5E5"> on that given</font>

347
00:19:04,140 --> 00:19:09,420
that<font color="#E5E5E5"> you only have this is your op code</font>

348
00:19:06,030 --> 00:19:11,430
range it's still it's relatively easy

349
00:19:09,420 --> 00:19:13,110
once you understand assembly the point

350
00:19:11,430 --> 00:19:15,960
where you<font color="#CCCCCC"> can do it this is because</font>

351
00:19:13,110 --> 00:19:18,899
<font color="#E5E5E5">assembly is pretty much the most</font>

352
00:19:15,960 --> 00:19:20,780
flexible language that there is there's

353
00:19:18,900 --> 00:19:22,800
you<font color="#E5E5E5"> know ten ways to</font><font color="#CCCCCC"> do one thing and</font>

354
00:19:20,780 --> 00:19:26,100
<font color="#E5E5E5">all of those will have different bite</font>

355
00:19:22,800 --> 00:19:29,040
numbers and whatnot so<font color="#CCCCCC"> ascii only is</font>

356
00:19:26,100 --> 00:19:33,030
this range if you stay below<font color="#E5E5E5"> 7f you're</font>

357
00:19:29,040 --> 00:19:35,190
also unicode safe and then for specific

358
00:19:33,030 --> 00:19:37,470
to upper to lower calls you have these

359
00:19:35,190 --> 00:19:39,840
ranges<font color="#CCCCCC"> to work with or to not work with</font>

360
00:19:37,470 --> 00:19:43,350
<font color="#E5E5E5">i should say and then there's also</font>

361
00:19:39,840 --> 00:19:45,840
protocol restrictions for example ftp

362
00:19:43,350 --> 00:19:48,060
has an end of message thing i<font color="#E5E5E5"> believe</font>

363
00:19:45,840 --> 00:19:50,720
smtp does too<font color="#E5E5E5"> i don't</font><font color="#CCCCCC"> know the exact</font>

364
00:19:48,060 --> 00:19:53,700
bite there's also like<font color="#E5E5E5"> a ctrl-c ctrl-v</font>

365
00:19:50,720 --> 00:19:57,240
like in the middle<font color="#CCCCCC"> of a string may make</font>

366
00:19:53,700 --> 00:19:58,530
cause it to not work or a semicolon that

367
00:19:57,240 --> 00:19:59,850
sort of thing<font color="#E5E5E5"> basically just</font>

368
00:19:58,530 --> 00:20:02,610
understanding of the protocol<font color="#CCCCCC"> you're</font>

369
00:19:59,850 --> 00:20:05,760
you're working with probably make this<font color="#CCCCCC"> a</font>

370
00:20:02,610 --> 00:20:07,320
mute a moot point because you could just

371
00:20:05,760 --> 00:20:09,360
plan your shellcode to not have these

372
00:20:07,320 --> 00:20:12,120
<font color="#E5E5E5">bytes in it and then there's also a</font>

373
00:20:09,360 --> 00:20:14,070
program called assembler where a given

374
00:20:12,120 --> 00:20:17,100
input assembly code

375
00:20:14,070 --> 00:20:19,679
or hex code i should say whichever it'll

376
00:20:17,100 --> 00:20:21,419
basically take that and run ninja magic

377
00:20:19,680 --> 00:20:24,330
which is actually a command line option

378
00:20:21,420 --> 00:20:27,390
for dissembler is<font color="#E5E5E5"> ninja magic and it'll</font>

379
00:20:24,330 --> 00:20:29,010
convert it to bite assembly that

380
00:20:27,390 --> 00:20:30,690
essentially doesn't use all the

381
00:20:29,010 --> 00:20:34,140
characters you<font color="#E5E5E5"> tell it not to use so</font>

382
00:20:30,690 --> 00:20:36,300
it's very<font color="#CCCCCC"> very useful for ASCII only but</font>

383
00:20:34,140 --> 00:20:40,110
for for those starting out<font color="#CCCCCC"> I'd say just</font>

384
00:20:36,300 --> 00:20:41,820
go ahead and and do it by hand to the

385
00:20:40,110 --> 00:20:44,120
point where you it will<font color="#CCCCCC"> really increase</font>

386
00:20:41,820 --> 00:20:46,889
your assembly knowledge if nothing else

387
00:20:44,120 --> 00:20:51,239
but that's that's a tool if you need to

388
00:20:46,890 --> 00:20:53,270
use it it's<font color="#E5E5E5"> very effective so one thing</font>

389
00:20:51,240 --> 00:20:56,850
<font color="#E5E5E5">I see is that a lot</font><font color="#CCCCCC"> of people consider</font>

390
00:20:53,270 --> 00:21:00,660
polymorphism<font color="#CCCCCC"> to be encoding not the same</font>

391
00:20:56,850 --> 00:21:01,679
<font color="#CCCCCC">thing at all all three of these things</font>

392
00:21:00,660 --> 00:21:03,810
<font color="#E5E5E5">are different we're going to go into</font>

393
00:21:01,680 --> 00:21:04,800
<font color="#E5E5E5">each one of these separately but i just</font>

394
00:21:03,810 --> 00:21:06,810
want to<font color="#E5E5E5"> point out that these are</font>

395
00:21:04,800 --> 00:21:08,820
definitely<font color="#E5E5E5"> not the same</font><font color="#CCCCCC"> thing some</font>

396
00:21:06,810 --> 00:21:12,870
things have features that are<font color="#E5E5E5"> similar</font>

397
00:21:08,820 --> 00:21:14,970
but the function completely different so

398
00:21:12,870 --> 00:21:18,000
polymorphism is the ability of shell

399
00:21:14,970 --> 00:21:20,310
code to to be very different the problem

400
00:21:18,000 --> 00:21:23,990
with a<font color="#E5E5E5"> lot of nids is that while they</font>

401
00:21:20,310 --> 00:21:26,669
may have<font color="#E5E5E5"> a very reputable signature bass</font>

402
00:21:23,990 --> 00:21:28,110
you could pretty much code up an

403
00:21:26,670 --> 00:21:30,030
assembly program that won't match any

404
00:21:28,110 --> 00:21:33,090
signatures that they have given<font color="#E5E5E5"> the</font>

405
00:21:30,030 --> 00:21:37,230
extreme flexibility of assembly it's

406
00:21:33,090 --> 00:21:38,639
hard to do to automate not too hard

407
00:21:37,230 --> 00:21:41,070
depending on what you're working with to

408
00:21:38,640 --> 00:21:43,650
do by hand but<font color="#E5E5E5"> it is time consuming in</font>

409
00:21:41,070 --> 00:21:45,480
some cases three general areas of

410
00:21:43,650 --> 00:21:48,890
polymorphism our instruction usage

411
00:21:45,480 --> 00:21:51,060
instruction order and your use of<font color="#CCCCCC"> nops</font>

412
00:21:48,890 --> 00:21:55,080
<font color="#CCCCCC">we'll get into</font><font color="#E5E5E5"> each one of those right</font>

413
00:21:51,060 --> 00:21:57,450
now so again instructions very flexible

414
00:21:55,080 --> 00:22:00,600
<font color="#E5E5E5">I put some examples that might be pretty</font>

415
00:21:57,450 --> 00:22:01,740
<font color="#E5E5E5">common in just normal assembly as space</font>

416
00:22:00,600 --> 00:22:05,250
saving techniques but they also

417
00:22:01,740 --> 00:22:07,320
demonstrate how flexible you know move

418
00:22:05,250 --> 00:22:10,050
and Zoar two completely different<font color="#E5E5E5"> op</font>

419
00:22:07,320 --> 00:22:11,220
<font color="#E5E5E5">codes so they'll be as far as just</font>

420
00:22:10,050 --> 00:22:13,980
looking at the numbers you're given

421
00:22:11,220 --> 00:22:16,380
indistinguishable<font color="#E5E5E5"> to an</font><font color="#CCCCCC"> nids and there's</font>

422
00:22:13,980 --> 00:22:19,110
<font color="#E5E5E5">no really no way for an</font><font color="#CCCCCC"> NIDS to deal</font>

423
00:22:16,380 --> 00:22:20,610
with this given a the<font color="#CCCCCC"> the size of the</font>

424
00:22:19,110 --> 00:22:23,850
database it's going to have to work with

425
00:22:20,610 --> 00:22:26,219
and the overhead and processing required

426
00:22:23,850 --> 00:22:27,389
to you know it's to the point where

427
00:22:26,220 --> 00:22:27,779
there's a null way they're going<font color="#E5E5E5"> to be</font>

428
00:22:27,390 --> 00:22:32,129
able<font color="#E5E5E5"> to</font>

429
00:22:27,779 --> 00:22:33,809
<font color="#CCCCCC">an IDs for millions potentially of bite</font>

430
00:22:32,129 --> 00:22:35,668
combinations just for you<font color="#CCCCCC"> know every</font>

431
00:22:33,809 --> 00:22:38,849
single packet no way that's<font color="#CCCCCC"> going to</font>

432
00:22:35,669 --> 00:22:41,249
happen which makes learning polymorphism

433
00:22:38,849 --> 00:22:44,189
by hand very<font color="#E5E5E5"> very powerful because you</font>

434
00:22:41,249 --> 00:22:45,979
get to the point where an idea generally

435
00:22:44,190 --> 00:22:48,989
<font color="#E5E5E5">isn't isn't going to be very effective</font>

436
00:22:45,979 --> 00:22:51,749
so just some examples clearing<font color="#CCCCCC"> eax</font>

437
00:22:48,989 --> 00:22:53,729
moving stuff there's also more like

438
00:22:51,749 --> 00:22:56,039
complicated<font color="#E5E5E5"> like instead of it stays or</font>

439
00:22:53,729 --> 00:22:58,979
is not<font color="#E5E5E5"> a valid instruction for you you</font>

440
00:22:56,039 --> 00:23:01,679
could<font color="#E5E5E5"> do things like and and other types</font>

441
00:22:58,979 --> 00:23:05,070
of the logic instructions that generally

442
00:23:01,679 --> 00:23:07,769
produces same result<font color="#E5E5E5"> instructions order</font>

443
00:23:05,070 --> 00:23:10,739
is also very very<font color="#E5E5E5"> big thing interesting</font>

444
00:23:07,769 --> 00:23:13,259
thing about assembly is that in general

445
00:23:10,739 --> 00:23:14,729
like most parts of your code are going

446
00:23:13,259 --> 00:23:18,149
to be interchangeable as far as where

447
00:23:14,729 --> 00:23:19,889
you could put the opcode itself and here

448
00:23:18,149 --> 00:23:23,248
<font color="#E5E5E5">we</font><font color="#CCCCCC"> have this is the right I</font><font color="#E5E5E5"> used</font><font color="#CCCCCC"> earlier</font>

449
00:23:19,889 --> 00:23:25,258
and this<font color="#E5E5E5"> is how it is normally but</font>

450
00:23:23,249 --> 00:23:26,519
generally the only things that I need<font color="#CCCCCC"> to</font>

451
00:23:25,259 --> 00:23:28,080
keep intact is that these two

452
00:23:26,519 --> 00:23:30,239
instructions need to stay in<font color="#E5E5E5"> this order</font>

453
00:23:28,080 --> 00:23:35,609
and these instructors I'll need to stay

454
00:23:30,239 --> 00:23:36,749
in<font color="#E5E5E5"> this order and that's these two have</font>

455
00:23:35,609 --> 00:23:38,789
to stay in that<font color="#E5E5E5"> order everything else</font>

456
00:23:36,749 --> 00:23:40,440
can be moved around to the point where

457
00:23:38,789 --> 00:23:43,099
<font color="#E5E5E5">your your hex output of your shellcode</font>

458
00:23:40,440 --> 00:23:46,349
is going to<font color="#E5E5E5"> completely different and</font>

459
00:23:43,099 --> 00:23:47,309
borrowing a an IPS sandboxing this it's

460
00:23:46,349 --> 00:23:51,960
<font color="#E5E5E5">probably not to be able to tell the</font>

461
00:23:47,309 --> 00:23:54,149
difference so and on the right is just

462
00:23:51,960 --> 00:23:56,190
<font color="#CCCCCC">an</font><font color="#E5E5E5"> example of it being you know all</font>

463
00:23:54,149 --> 00:24:05,029
rearranged while<font color="#E5E5E5"> still maintaining</font>

464
00:23:56,190 --> 00:24:05,029
functionality any questions<font color="#E5E5E5"> all right</font>

465
00:24:07,140 --> 00:24:13,060
okay so not petting now padding is

466
00:24:09,460 --> 00:24:16,860
actually the way most<font color="#CCCCCC"> nids is will</font>

467
00:24:13,060 --> 00:24:20,139
identify not just existing shellcode but

468
00:24:16,860 --> 00:24:22,300
zero-day exploits just because you put<font color="#E5E5E5"> a</font>

469
00:24:20,140 --> 00:24:23,620
hundred oh x 90 instructions in a row

470
00:24:22,300 --> 00:24:26,320
<font color="#CCCCCC">and it's</font><font color="#E5E5E5"> going to be very very easy to</font>

471
00:24:23,620 --> 00:24:28,239
fingerprint and the general rule of

472
00:24:26,320 --> 00:24:31,600
thumb is you want to<font color="#E5E5E5"> put as many nops as</font>

473
00:24:28,240 --> 00:24:33,640
your protocol allow or as you know your

474
00:24:31,600 --> 00:24:37,840
your<font color="#E5E5E5"> level of secrecy that is desired</font>

475
00:24:33,640 --> 00:24:40,090
will allow an OP is an instruction<font color="#CCCCCC"> that</font>

476
00:24:37,840 --> 00:24:45,360
doesn't do anything stands for no

477
00:24:40,090 --> 00:24:49,449
operation basically it's just filler and

478
00:24:45,360 --> 00:24:51,459
most shellcode can put the literal

479
00:24:49,450 --> 00:24:52,840
instruction for<font color="#CCCCCC"> noppe is X 90 but</font>

480
00:24:51,460 --> 00:24:54,520
anything that doesn't affect your

481
00:24:52,840 --> 00:24:56,949
registers in a way you wouldn't want it

482
00:24:54,520 --> 00:24:59,740
can be used<font color="#E5E5E5"> as an OP so this means I</font>

483
00:24:56,950 --> 00:25:01,360
could<font color="#E5E5E5"> I can move stuff I can push to the</font>

484
00:24:59,740 --> 00:25:03,310
<font color="#E5E5E5">stack as long as I'm not interfering</font>

485
00:25:01,360 --> 00:25:06,820
with the things I've already pushed to

486
00:25:03,310 --> 00:25:08,290
the stack I can<font color="#CCCCCC"> decremented registers I</font>

487
00:25:06,820 --> 00:25:10,120
could pretty<font color="#E5E5E5"> much do whatever I want</font>

488
00:25:08,290 --> 00:25:12,460
like with the exception of jumping

489
00:25:10,120 --> 00:25:15,100
around<font color="#CCCCCC"> an execution and that kind of</font>

490
00:25:12,460 --> 00:25:17,080
thing like I said dead registers are

491
00:25:15,100 --> 00:25:19,899
especially useful<font color="#E5E5E5"> in exit we're only</font>

492
00:25:17,080 --> 00:25:22,179
using<font color="#CCCCCC"> eax and ebx so any other register</font>

493
00:25:19,900 --> 00:25:24,280
we can throw bullshit instructions at

494
00:25:22,180 --> 00:25:25,060
and it's gonna it's going to execute and

495
00:25:24,280 --> 00:25:26,530
it's going<font color="#E5E5E5"> to look like it's doing</font>

496
00:25:25,060 --> 00:25:28,270
something but<font color="#CCCCCC"> that's going</font><font color="#E5E5E5"> to have no</font>

497
00:25:26,530 --> 00:25:31,360
effect<font color="#E5E5E5"> on our final code other than</font>

498
00:25:28,270 --> 00:25:33,340
execution time and given<font color="#CCCCCC"> how</font><font color="#E5E5E5"> small most</font>

499
00:25:31,360 --> 00:25:37,290
shellcode is you generally put a hell of

500
00:25:33,340 --> 00:25:40,000
a lot<font color="#E5E5E5"> of knobs and most</font><font color="#CCCCCC"> nids is</font><font color="#E5E5E5"> do</font>

501
00:25:37,290 --> 00:25:42,010
<font color="#CCCCCC">fingerprint based on top and some even</font>

502
00:25:40,000 --> 00:25:46,780
have gone to the extent of including

503
00:25:42,010 --> 00:25:49,780
things like like inkay<font color="#E5E5E5"> eix right here or</font>

504
00:25:46,780 --> 00:25:52,389
you all the<font color="#CCCCCC"> gray ones are knobs for the</font>

505
00:25:49,780 --> 00:25:54,399
record any of these<font color="#E5E5E5"> gray ones done over</font>

506
00:25:52,390 --> 00:25:55,780
and over again some<font color="#CCCCCC"> nids is will</font>

507
00:25:54,400 --> 00:25:57,010
actually account for the same

508
00:25:55,780 --> 00:25:59,020
instruction being repeated over and over

509
00:25:57,010 --> 00:26:00,730
but<font color="#E5E5E5"> again you don't have to do anything</font>

510
00:25:59,020 --> 00:26:01,960
like<font color="#E5E5E5"> that you could do anything</font><font color="#CCCCCC"> that</font>

511
00:26:00,730 --> 00:26:04,240
doesn't affect the registers you're

512
00:26:01,960 --> 00:26:05,470
working with or you could even have them

513
00:26:04,240 --> 00:26:06,790
affect the registers you're working with

514
00:26:05,470 --> 00:26:08,500
as long as you accommodate for the

515
00:26:06,790 --> 00:26:11,820
changes when<font color="#CCCCCC"> you actually want to</font>

516
00:26:08,500 --> 00:26:11,820
execute the things you want<font color="#E5E5E5"> to execute</font>

517
00:26:14,140 --> 00:26:20,990
so here's a polymorphism example with

518
00:26:17,690 --> 00:26:23,539
all three elements combined I found a

519
00:26:20,990 --> 00:26:25,700
mad Wi-Fi exploit that I just you know

520
00:26:23,539 --> 00:26:28,309
first exploit I picked so that's the

521
00:26:25,700 --> 00:26:29,870
show code i'm using and essentially all

522
00:26:28,309 --> 00:26:32,809
it does is write stop sniffing our

523
00:26:29,870 --> 00:26:35,000
network<font color="#CCCCCC"> onto the attackers terminal well</font>

524
00:26:32,809 --> 00:26:37,490
<font color="#E5E5E5">assuming</font><font color="#CCCCCC"> mad wife is</font><font color="#E5E5E5"> being used by an</font>

525
00:26:35,000 --> 00:26:39,110
attacker but you understand and<font color="#E5E5E5"> then it</font>

526
00:26:37,490 --> 00:26:41,210
exits and that's that's all it<font color="#CCCCCC"> does so</font>

527
00:26:39,110 --> 00:26:44,178
it's similar<font color="#E5E5E5"> to the right that</font><font color="#CCCCCC"> i had</font>

528
00:26:41,210 --> 00:26:46,309
earlier but<font color="#CCCCCC"> it could be improved in a</font>

529
00:26:44,179 --> 00:26:48,080
few areas and all the examples I've

530
00:26:46,309 --> 00:26:51,710
shown you so far we're generally using

531
00:26:48,080 --> 00:26:54,860
the stack a because that in most cases

532
00:26:51,710 --> 00:26:57,169
will take up a bit fewer bytes so you're

533
00:26:54,860 --> 00:26:59,299
<font color="#E5E5E5">saving yourself a bit of space but more</font>

534
00:26:57,169 --> 00:27:01,940
importantly jump call is generally very

535
00:26:59,299 --> 00:27:04,340
easy to fingerprint unless you you you

536
00:27:01,940 --> 00:27:05,870
plan for<font color="#E5E5E5"> things like say you jump into a</font>

537
00:27:04,340 --> 00:27:07,340
bunch of knobs so they won't<font color="#E5E5E5"> be doing</font>

538
00:27:05,870 --> 00:27:11,870
anything and<font color="#E5E5E5"> you'll eventually hit where</font>

539
00:27:07,340 --> 00:27:13,279
you want to jump but<font color="#E5E5E5"> generally I tend</font><font color="#CCCCCC"> to</font>

540
00:27:11,870 --> 00:27:17,479
say that the stack<font color="#CCCCCC"> is much more</font>

541
00:27:13,279 --> 00:27:19,370
versatile not<font color="#E5E5E5"> only because you can move</font>

542
00:27:17,480 --> 00:27:20,570
around the instructions much better but

543
00:27:19,370 --> 00:27:22,399
you could also break them up so<font color="#CCCCCC"> that</font>

544
00:27:20,570 --> 00:27:24,289
you're<font color="#E5E5E5"> pushing small pieces at a time</font>

545
00:27:22,399 --> 00:27:27,529
here and there<font color="#E5E5E5"> with lots of</font><font color="#CCCCCC"> nops in</font>

546
00:27:24,289 --> 00:27:29,809
between making it even harder to<font color="#CCCCCC"> to</font>

547
00:27:27,529 --> 00:27:35,590
<font color="#E5E5E5">figure out what's going on but here's</font>

548
00:27:29,809 --> 00:27:39,200
the<font color="#E5E5E5"> original exploit and I actually</font>

549
00:27:35,590 --> 00:27:42,470
optimize it by<font color="#E5E5E5"> 11 bites before I by</font>

550
00:27:39,200 --> 00:27:44,659
using the the the push and the right is

551
00:27:42,470 --> 00:27:47,120
actually at<font color="#CCCCCC"> +1 bite because I have</font><font color="#E5E5E5"> to</font>

552
00:27:44,659 --> 00:27:50,380
push a<font color="#E5E5E5"> a word at the end but I just</font>

553
00:27:47,120 --> 00:27:52,518
<font color="#E5E5E5">threw on a new line so in this case the</font>

554
00:27:50,380 --> 00:27:55,389
the thing that you're jumping to the

555
00:27:52,519 --> 00:27:58,340
string is actually longer to justify

556
00:27:55,389 --> 00:28:00,019
space requirements but pushes allow you

557
00:27:58,340 --> 00:28:02,029
to move these anywhere you want as long

558
00:28:00,019 --> 00:28:03,740
<font color="#E5E5E5">as they stay in the order that you put</font>

559
00:28:02,029 --> 00:28:06,139
in again you can put them you can start

560
00:28:03,740 --> 00:28:07,190
pushing bytes or words or you know as

561
00:28:06,139 --> 00:28:09,439
small as you want to do it<font color="#CCCCCC"> in</font><font color="#E5E5E5"> as</font>

562
00:28:07,190 --> 00:28:11,330
numerous times as you want to do it so

563
00:28:09,440 --> 00:28:13,159
that like these push instructions could

564
00:28:11,330 --> 00:28:15,799
be<font color="#E5E5E5"> broken down</font><font color="#CCCCCC"> into 30 different</font>

565
00:28:13,159 --> 00:28:17,480
instructions with each with lots of

566
00:28:15,799 --> 00:28:18,889
knobs in between it so that it's very

567
00:28:17,480 --> 00:28:22,909
hard to determine you know what's going

568
00:28:18,889 --> 00:28:24,709
<font color="#E5E5E5">on just by looking at it real quick so</font>

569
00:28:22,909 --> 00:28:26,300
here's the original on the right is a

570
00:28:24,710 --> 00:28:29,060
new one I<font color="#E5E5E5"> just put a few not</font>

571
00:28:26,300 --> 00:28:31,310
to demonstrate but you could put quite a

572
00:28:29,060 --> 00:28:35,090
few more of course but I didn't want<font color="#CCCCCC"> it</font>

573
00:28:31,310 --> 00:28:38,330
to<font color="#E5E5E5"> be</font><font color="#CCCCCC"> you know sighs three font but yeah</font>

574
00:28:35,090 --> 00:28:41,830
it's 42 bites before I add the knobs so

575
00:28:38,330 --> 00:28:41,830
you got a lot<font color="#E5E5E5"> a</font><font color="#CCCCCC"> lot of room to work with</font>

576
00:28:41,860 --> 00:28:50,000
questions concerns<font color="#CCCCCC"> okay so we talked</font>

577
00:28:48,620 --> 00:28:54,379
about polymorphism now we'll get<font color="#E5E5E5"> into</font>

578
00:28:50,000 --> 00:28:57,080
encoders encoders are in a way you<font color="#E5E5E5"> could</font>

579
00:28:54,380 --> 00:28:59,060
say they're a very very simplified way

580
00:28:57,080 --> 00:29:01,310
of doing polymorphism on your show cook

581
00:28:59,060 --> 00:29:03,409
the problem is is that your encoder is

582
00:29:01,310 --> 00:29:05,360
generally not not going to be

583
00:29:03,410 --> 00:29:07,040
polymorphed itself which<font color="#CCCCCC"> is what</font>

584
00:29:05,360 --> 00:29:10,100
separates encoders from polymorphic

585
00:29:07,040 --> 00:29:11,780
encoders in the general way that

586
00:29:10,100 --> 00:29:13,909
encoders work is that<font color="#E5E5E5"> they just push</font>

587
00:29:11,780 --> 00:29:15,320
your show code to the<font color="#E5E5E5"> stack or however</font>

588
00:29:13,910 --> 00:29:17,870
they want to<font color="#E5E5E5"> get the address</font><font color="#CCCCCC"> of them and</font>

589
00:29:15,320 --> 00:29:20,389
then they decode it while it's there<font color="#E5E5E5"> and</font>

590
00:29:17,870 --> 00:29:23,540
then jump<font color="#E5E5E5"> to them and execute it so when</font>

591
00:29:20,390 --> 00:29:25,370
you you have your your hex they're ready

592
00:29:23,540 --> 00:29:27,110
to<font color="#E5E5E5"> go and your exploit and the victim</font>

593
00:29:25,370 --> 00:29:28,939
network receives it it'll just see a

594
00:29:27,110 --> 00:29:31,490
bunch of shit it doesn't know what to do

595
00:29:28,940 --> 00:29:33,500
with and then a decoder and unless<font color="#E5E5E5"> it's</font>

596
00:29:31,490 --> 00:29:35,600
sandboxing it it's probably<font color="#E5E5E5"> not going to</font>

597
00:29:33,500 --> 00:29:39,890
know you know what that is just<font color="#CCCCCC"> because</font>

598
00:29:35,600 --> 00:29:41,959
even if you<font color="#CCCCCC"> just add to</font><font color="#E5E5E5"> two numeric</font><font color="#CCCCCC"> to</font>

599
00:29:39,890 --> 00:29:43,670
<font color="#CCCCCC">to every bite they'll generally be</font>

600
00:29:41,960 --> 00:29:46,310
completely different<font color="#CCCCCC"> instructions as far</font>

601
00:29:43,670 --> 00:29:48,050
as your show<font color="#CCCCCC"> code is concerned so again</font>

602
00:29:46,310 --> 00:29:49,399
easier<font color="#E5E5E5"> than polymorphism because all you</font>

603
00:29:48,050 --> 00:29:52,790
need to do is<font color="#E5E5E5"> write a working decoder</font>

604
00:29:49,400 --> 00:29:55,490
you don't need<font color="#E5E5E5"> to work with instruction</font>

605
00:29:52,790 --> 00:29:57,530
order instruction<font color="#E5E5E5"> usage because the act</font>

606
00:29:55,490 --> 00:29:59,780
of encoding generally does that for you

607
00:29:57,530 --> 00:30:02,420
<font color="#CCCCCC">and it's very useful for a quick and</font>

608
00:29:59,780 --> 00:30:03,860
dirty upper and to lower evasion just

609
00:30:02,420 --> 00:30:06,500
because your encoder is going to take

610
00:30:03,860 --> 00:30:09,350
out very few very few bites and you can

611
00:30:06,500 --> 00:30:13,550
work<font color="#CCCCCC"> with that just to make a an encoder</font>

612
00:30:09,350 --> 00:30:15,020
that doesn't doesn't<font color="#E5E5E5"> a lie susceptible</font>

613
00:30:13,550 --> 00:30:17,510
to these two functions or other

614
00:30:15,020 --> 00:30:19,520
functions like it so here's an example

615
00:30:17,510 --> 00:30:21,740
<font color="#E5E5E5">and I actually didn't convert this to</font>

616
00:30:19,520 --> 00:30:23,960
Intel because I didn't<font color="#CCCCCC"> want to deal with</font>

617
00:30:21,740 --> 00:30:26,590
stack offsets and that sort of<font color="#CCCCCC"> stuff but</font>

618
00:30:23,960 --> 00:30:29,120
just basically just push the shellcode

619
00:30:26,590 --> 00:30:31,550
then you have your decoder loop and the

620
00:30:29,120 --> 00:30:34,010
shellcode is just it's the shellcode

621
00:30:31,550 --> 00:30:36,620
plus<font color="#E5E5E5"> one so every bite is incremented by</font>

622
00:30:34,010 --> 00:30:38,480
one and then the decoder just decrements

623
00:30:36,620 --> 00:30:39,370
every bite by one and then it jumps to

624
00:30:38,480 --> 00:30:41,780
it and execute

625
00:30:39,370 --> 00:30:45,439
actually think I got cut off but there

626
00:30:41,780 --> 00:30:49,520
should<font color="#CCCCCC"> be a return after this but but</font>

627
00:30:45,440 --> 00:30:52,760
that's basic format and polymorphic

628
00:30:49,520 --> 00:30:55,879
<font color="#CCCCCC">shoko encoders they generally automated</font>

629
00:30:52,760 --> 00:30:59,200
and they include features of both in

630
00:30:55,880 --> 00:31:01,610
quarter encoders and polymorphism

631
00:30:59,200 --> 00:31:04,669
examples are<font color="#CCCCCC"> Chicago</font><font color="#E5E5E5"> ganai which is the</font>

632
00:31:01,610 --> 00:31:05,870
<font color="#CCCCCC">metasploit basic one I don't know if</font>

633
00:31:04,669 --> 00:31:09,169
it's that<font color="#E5E5E5"> anymore with the new version</font>

634
00:31:05,870 --> 00:31:13,158
but I think it<font color="#CCCCCC"> is clit and then ad</font>

635
00:31:09,169 --> 00:31:16,340
mutate and at torque on<font color="#CCCCCC"> vlad presented a</font>

636
00:31:13,159 --> 00:31:18,799
talk on show code polymorphism and

637
00:31:16,340 --> 00:31:20,120
encoders and basically his<font color="#E5E5E5"> researches</font>

638
00:31:18,799 --> 00:31:22,460
<font color="#E5E5E5">and options is that they're</font><font color="#CCCCCC"> all one</font>

639
00:31:20,120 --> 00:31:24,049
hundred percent of detectable and not in

640
00:31:22,460 --> 00:31:25,549
the<font color="#E5E5E5"> sense that you just drop every</font>

641
00:31:24,049 --> 00:31:26,690
packet that comes in but in the sense

642
00:31:25,549 --> 00:31:30,158
that they're very<font color="#E5E5E5"> very easy to</font>

643
00:31:26,690 --> 00:31:32,929
fingerprint because not one of these

644
00:31:30,159 --> 00:31:34,820
actually properly implements any of the

645
00:31:32,929 --> 00:31:36,830
three well I shouldn't say any but all

646
00:31:34,820 --> 00:31:38,360
three of the the polymorphism features

647
00:31:36,830 --> 00:31:40,610
so in one way or<font color="#E5E5E5"> another they're very</font>

648
00:31:38,360 --> 00:31:42,918
easy to fingerprint either with<font color="#CCCCCC"> the</font>

649
00:31:40,610 --> 00:31:45,678
instruction order or instruction usage

650
00:31:42,919 --> 00:31:47,390
or that sort of thing<font color="#CCCCCC"> shikata and I I</font>

651
00:31:45,679 --> 00:31:49,700
believe was the<font color="#E5E5E5"> weakest and I believe</font>

652
00:31:47,390 --> 00:31:51,289
Colette<font color="#CCCCCC"> was the strongest but still one</font>

653
00:31:49,700 --> 00:31:53,840
hundred percent detectable very easy to

654
00:31:51,289 --> 00:31:56,360
to fingerprint which is why<font color="#CCCCCC"> I say</font><font color="#E5E5E5"> doing</font>

655
00:31:53,840 --> 00:31:58,580
polymorphism on your own probably a much

656
00:31:56,360 --> 00:32:04,699
better solution<font color="#E5E5E5"> than then trying to work</font>

657
00:31:58,580 --> 00:32:05,960
with the<font color="#E5E5E5"> existing tools I don't have an</font>

658
00:32:04,700 --> 00:32:08,059
<font color="#E5E5E5">example of polymorphic shellcode</font>

659
00:32:05,960 --> 00:32:10,220
encoders because they're like very long

660
00:32:08,059 --> 00:32:12,980
and it's pretty<font color="#E5E5E5"> much the same thing</font><font color="#CCCCCC"> as</font>

661
00:32:10,220 --> 00:32:15,740
an encoder once it's done let's show

662
00:32:12,980 --> 00:32:19,520
called blending basically it's spoofing

663
00:32:15,740 --> 00:32:20,720
<font color="#E5E5E5">the file type and is actually horribly</font>

664
00:32:19,520 --> 00:32:22,700
simple to do you could do it on the

665
00:32:20,720 --> 00:32:25,059
command line on your own you<font color="#E5E5E5"> just</font>

666
00:32:22,700 --> 00:32:27,289
basically<font color="#E5E5E5"> start your shellcode with</font>

667
00:32:25,059 --> 00:32:30,710
whatever bite that your file header

668
00:32:27,289 --> 00:32:32,330
represents itself as and then when when

669
00:32:30,710 --> 00:32:33,919
somebody runs file on you know a

670
00:32:32,330 --> 00:32:37,370
suspicious binary they'll see it as

671
00:32:33,919 --> 00:32:39,640
amiga<font color="#E5E5E5"> das data or risc OS junk data or</font>

672
00:32:37,370 --> 00:32:42,860
you know there's all sorts there's like

673
00:32:39,640 --> 00:32:45,679
yeah there's insane amounts of files and

674
00:32:42,860 --> 00:32:47,299
lucky for us<font color="#CCCCCC"> open-source</font><font color="#E5E5E5"> leaves all of</font>

675
00:32:45,679 --> 00:32:50,299
this information and exactly how<font color="#E5E5E5"> it's</font>

676
00:32:47,299 --> 00:32:51,740
parsed<font color="#CCCCCC"> an Etsy file magic or if you're</font>

677
00:32:50,299 --> 00:32:52,320
<font color="#CCCCCC">using fedora for whatever reason they</font>

678
00:32:51,740 --> 00:32:55,500
put it<font color="#E5E5E5"> in</font>

679
00:32:52,320 --> 00:32:57,509
user live RPM yeah you could look<font color="#E5E5E5"> at</font>

680
00:32:55,500 --> 00:32:59,009
<font color="#E5E5E5">that file and you basically just pick a</font>

681
00:32:57,509 --> 00:33:01,019
file format that you want it'll tell you

682
00:32:59,009 --> 00:33:03,630
exactly how to do it even<font color="#E5E5E5"> to the point</font>

683
00:33:01,019 --> 00:33:05,880
where it'll tell you like sub types of

684
00:33:03,630 --> 00:33:07,320
files<font color="#E5E5E5"> I really hope you have this file</font>

685
00:33:05,880 --> 00:33:13,070
I'm going to cry of course you don't

686
00:33:07,320 --> 00:33:15,418
have that file in what I see what I

687
00:33:13,070 --> 00:33:21,080
don't use I'm going to so I have no<font color="#CCCCCC"> idea</font>

688
00:33:15,419 --> 00:33:21,080
what you smell magic well there you<font color="#E5E5E5"> go</font>

689
00:33:21,200 --> 00:33:29,970
come<font color="#CCCCCC"> on f I apologize for this very much</font>

690
00:33:27,980 --> 00:33:34,500
believe I'm going<font color="#CCCCCC"> to that's what all</font>

691
00:33:29,970 --> 00:33:35,879
unity you should have every presentation

692
00:33:34,500 --> 00:33:40,500
you go do for<font color="#E5E5E5"> now and everybody bring a</font>

693
00:33:35,879 --> 00:33:46,230
laptop but yeah file contains all the

694
00:33:40,500 --> 00:33:50,279
information and magic contains all the

695
00:33:46,230 --> 00:33:51,990
ways it parses that file so<font color="#CCCCCC"> you what I</font>

696
00:33:50,279 --> 00:33:53,940
started doing actually last night was to

697
00:33:51,990 --> 00:33:55,500
make a little<font color="#E5E5E5"> python script that just</font>

698
00:33:53,940 --> 00:33:57,929
pulls a random file type and dumps it

699
00:33:55,500 --> 00:34:00,240
into my shell code which may or may not

700
00:33:57,929 --> 00:34:02,100
be bad because I haven't made support

701
00:34:00,240 --> 00:34:07,049
for it not to start on bad instructions

702
00:34:02,100 --> 00:34:10,759
yet but yeah<font color="#E5E5E5"> this file definitely come</font>

703
00:34:07,049 --> 00:34:14,040
on list all the information you need<font color="#CCCCCC"> I</font>

704
00:34:10,760 --> 00:34:17,579
have an example so basically to do this

705
00:34:14,040 --> 00:34:22,020
is in<font color="#CCCCCC"> Nazem you could</font><font color="#E5E5E5"> just dump your you</font>

706
00:34:17,579 --> 00:34:23,639
just use DB for Intel with AT&T it's

707
00:34:22,020 --> 00:34:27,060
like buy it or not whatever you're

708
00:34:23,639 --> 00:34:28,619
trying to trying to push you just<font color="#E5E5E5"> to</font>

709
00:34:27,060 --> 00:34:32,489
<font color="#E5E5E5">find these and this is example the zip</font>

710
00:34:28,619 --> 00:34:34,409
header again by<font color="#CCCCCC"> 5's variable</font><font color="#E5E5E5"> a little</font>

711
00:34:32,489 --> 00:34:36,388
different determine file will report

712
00:34:34,409 --> 00:34:39,089
different types of zip formats that are

713
00:34:36,389 --> 00:34:41,429
zip versions that are needed to unzip it

714
00:34:39,089 --> 00:34:43,560
and the only thing you need<font color="#CCCCCC"> to like</font>

715
00:34:41,429 --> 00:34:46,079
blending is very<font color="#E5E5E5"> very simple and should</font>

716
00:34:43,560 --> 00:34:49,909
be included if you have the space for it

717
00:34:46,079 --> 00:34:53,940
just because it will add to your your

718
00:34:49,909 --> 00:34:55,260
obfuscation if it were as it were but

719
00:34:53,940 --> 00:34:56,940
the only<font color="#E5E5E5"> two things you need</font><font color="#CCCCCC"> to make</font>

720
00:34:55,260 --> 00:34:59,280
sure is you account for modified

721
00:34:56,940 --> 00:35:01,800
registers like in this example<font color="#E5E5E5"> I need to</font>

722
00:34:59,280 --> 00:35:03,450
account for<font color="#E5E5E5"> the changes in EAX EBX</font>

723
00:35:01,800 --> 00:35:04,290
generally<font color="#E5E5E5"> I don't think this is going to</font>

724
00:35:03,450 --> 00:35:05,669
be a problem<font color="#E5E5E5"> because you're going to</font>

725
00:35:04,290 --> 00:35:06,630
<font color="#E5E5E5">wipe all those anyway at the beginning</font>

726
00:35:05,670 --> 00:35:07,890
of your shellcode

727
00:35:06,630 --> 00:35:10,680
should wipe all those anyway at<font color="#E5E5E5"> the</font>

728
00:35:07,890 --> 00:35:12,150
beginning to show code and make sure<font color="#E5E5E5"> you</font>

729
00:35:10,680 --> 00:35:14,220
don't start on op codes that will

730
00:35:12,150 --> 00:35:15,690
segfault<font color="#CCCCCC"> you you don't want to be</font>

731
00:35:14,220 --> 00:35:16,799
jumping into another programs address

732
00:35:15,690 --> 00:35:18,750
space because it'll kill you right away

733
00:35:16,800 --> 00:35:21,210
you don't want to call another programs

734
00:35:18,750 --> 00:35:22,700
address space because you know all<font color="#E5E5E5"> three</font>

735
00:35:21,210 --> 00:35:25,350
<font color="#E5E5E5">of these things and a couple other</font>

736
00:35:22,700 --> 00:35:30,210
specifics with those are three big<font color="#E5E5E5"> ones</font>

737
00:35:25,350 --> 00:35:31,970
and if you don't if you<font color="#E5E5E5"> don't know what</font>

738
00:35:30,210 --> 00:35:35,250
all codes these are actually producing

739
00:35:31,970 --> 00:35:37,169
just<font color="#CCCCCC"> Nazem up your your shellcode with</font>

740
00:35:35,250 --> 00:35:40,680
these bites at<font color="#CCCCCC"> the front and then you</font>

741
00:35:37,170 --> 00:35:42,510
can use object obj<font color="#E5E5E5"> dump object them to</font>

742
00:35:40,680 --> 00:35:46,230
disassemble it and<font color="#E5E5E5"> it'll tell you in</font>

743
00:35:42,510 --> 00:35:47,370
AT&T centex exactly what what assembly

744
00:35:46,230 --> 00:35:49,530
out<font color="#E5E5E5"> because those are and what they're</font>

745
00:35:47,370 --> 00:35:52,470
what they're doing so that way you can

746
00:35:49,530 --> 00:35:54,810
account for you know I don't<font color="#E5E5E5"> want to use</font>

747
00:35:52,470 --> 00:35:57,180
this or I want to make sure I jump to a

748
00:35:54,810 --> 00:35:58,440
different offset so that I'm<font color="#E5E5E5"> not calling</font>

749
00:35:57,180 --> 00:36:02,549
another programs address space or

750
00:35:58,440 --> 00:36:04,910
anything like that actually<font color="#E5E5E5"> I can plea</font>

751
00:36:02,550 --> 00:36:04,910
do this

752
00:36:08,650 --> 00:36:17,470
is this a little endian or is this a

753
00:36:12,640 --> 00:36:25,299
little endian machine<font color="#E5E5E5"> okay yeah I think</font>

754
00:36:17,470 --> 00:36:28,480
this will be okay oh damn so there see

755
00:36:25,299 --> 00:36:34,119
that's<font color="#E5E5E5"> all you have to do and then if</font>

756
00:36:28,480 --> 00:36:39,250
you wanted to do<font color="#E5E5E5"> this now</font><font color="#CCCCCC"> door reporters</font>

757
00:36:34,119 --> 00:36:41,829
I need version 9 to extract or 14 is I

758
00:36:39,250 --> 00:36:49,839
need version 2.0 to extract so there's

759
00:36:41,829 --> 00:36:53,049
there's literally that that I can't see

760
00:36:49,839 --> 00:36:55,180
it<font color="#E5E5E5"> it's off to the left but it's like</font>

761
00:36:53,049 --> 00:36:56,710
<font color="#E5E5E5">15,000 lines are in that file</font><font color="#CCCCCC"> so there's</font>

762
00:36:55,180 --> 00:36:58,960
a heat there's like files that I don't

763
00:36:56,710 --> 00:37:00,369
even<font color="#E5E5E5"> think I want to have reported just</font>

764
00:36:58,960 --> 00:37:03,760
<font color="#E5E5E5">because they'll be suspicious in and of</font>

765
00:37:00,369 --> 00:37:07,660
themselves with like you know risk draw

766
00:37:03,760 --> 00:37:10,599
data or you know until a motherboard

767
00:37:07,660 --> 00:37:13,808
code or random crap like that but take a

768
00:37:10,599 --> 00:37:18,069
look at it and it's very easy<font color="#E5E5E5"> to do good</font>

769
00:37:13,809 --> 00:37:19,960
<font color="#E5E5E5">way to obfuscate things</font><font color="#CCCCCC"> oh so one of the</font>

770
00:37:18,069 --> 00:37:22,750
last things is anti-system customization

771
00:37:19,960 --> 00:37:26,589
again linux and unix are easily the most

772
00:37:22,750 --> 00:37:29,380
customizable systems out there and<font color="#E5E5E5"> just</font>

773
00:37:26,589 --> 00:37:33,400
changing your shell to like bin law may

774
00:37:29,380 --> 00:37:34,869
be enough to to stop a lot it probably

775
00:37:33,400 --> 00:37:36,130
saw a hell of a<font color="#E5E5E5"> lot of shell code that's</font>

776
00:37:34,869 --> 00:37:38,980
out there just<font color="#CCCCCC"> cuz they're calling bin</font>

777
00:37:36,130 --> 00:37:42,400
shell directly but there's there's ways

778
00:37:38,980 --> 00:37:44,500
around this a problem i ran into<font color="#CCCCCC"> a lot</font>

779
00:37:42,400 --> 00:37:46,660
was a different systems like I'm boom 2

780
00:37:44,500 --> 00:37:50,760
i'm sure i'll list iptables and what

781
00:37:46,660 --> 00:37:50,759
user s bend or some crap like that<font color="#CCCCCC"> i</font>

782
00:37:51,990 --> 00:37:58,270
don't<font color="#CCCCCC"> know if that's</font><font color="#E5E5E5"> actually starting</font>

783
00:37:54,430 --> 00:38:00,430
with a slash bit so you could do things

784
00:37:58,270 --> 00:38:02,049
like<font color="#E5E5E5"> your witching it which will tell</font>

785
00:38:00,430 --> 00:38:05,230
you the location of it and<font color="#CCCCCC"> that will</font>

786
00:38:02,049 --> 00:38:08,020
count for a bit of just distribution

787
00:38:05,230 --> 00:38:09,880
differences at the very least and most

788
00:38:08,020 --> 00:38:13,029
systems<font color="#CCCCCC"> i think almost all systems have</font>

789
00:38:09,880 --> 00:38:14,559
which and then there's also<font color="#E5E5E5"> a</font>

790
00:38:13,029 --> 00:38:16,859
non-standard shell detection like say

791
00:38:14,559 --> 00:38:19,299
you do move your shell tube in wall I

792
00:38:16,859 --> 00:38:19,480
mean that's fun and all and I don't know

793
00:38:19,299 --> 00:38:20,470
how

794
00:38:19,480 --> 00:38:22,840
much of a headache that's going to be

795
00:38:20,470 --> 00:38:27,520
for your IT staff but there<font color="#E5E5E5"> is a way to</font>

796
00:38:22,840 --> 00:38:30,130
detect<font color="#E5E5E5"> that say</font><font color="#CCCCCC"> your York as a user with</font>

797
00:38:27,520 --> 00:38:34,570
your shell you start a process in a proc

798
00:38:30,130 --> 00:38:36,340
your process ID / exe will be or well

799
00:38:34,570 --> 00:38:39,700
the parents of<font color="#CCCCCC"> your the process you</font>

800
00:38:36,340 --> 00:38:42,160
start will<font color="#E5E5E5"> be the shell and the guy</font><font color="#CCCCCC"> at</font>

801
00:38:39,700 --> 00:38:44,500
<font color="#E5E5E5">this site name</font><font color="#CCCCCC"> Itzik you basically wrote</font>

802
00:38:42,160 --> 00:38:46,509
shellcode that'll grab the the process

803
00:38:44,500 --> 00:38:48,880
the parent process ID of the executing

804
00:38:46,510 --> 00:38:51,190
process and then see what she'll started

805
00:38:48,880 --> 00:38:53,290
that<font color="#CCCCCC"> and run it through there it's a</font>

806
00:38:51,190 --> 00:38:54,640
fairly compact shell code for the you

807
00:38:53,290 --> 00:38:56,920
know insane amount that it does<font color="#CCCCCC"> I think</font>

808
00:38:54,640 --> 00:39:01,390
<font color="#E5E5E5">it also like hides itself from</font><font color="#CCCCCC"> the from</font>

809
00:38:56,920 --> 00:39:03,310
PS and a lot of random crap but all this

810
00:39:01,390 --> 00:39:04,600
more or<font color="#E5E5E5"> less depends on the level of</font>

811
00:39:03,310 --> 00:39:06,520
<font color="#CCCCCC">information you</font><font color="#E5E5E5"> have on the target</font>

812
00:39:04,600 --> 00:39:09,700
system if you don't know<font color="#CCCCCC"> that they're</font>

813
00:39:06,520 --> 00:39:12,190
<font color="#CCCCCC">doing this it may</font><font color="#E5E5E5"> be hard to to target</font>

814
00:39:09,700 --> 00:39:15,600
it this way but generally like things

815
00:39:12,190 --> 00:39:18,940
like which are generally a good idea and

816
00:39:15,600 --> 00:39:21,400
you know it's just another another<font color="#E5E5E5"> way</font>

817
00:39:18,940 --> 00:39:24,070
to attack a customized system in<font color="#E5E5E5"> this</font>

818
00:39:21,400 --> 00:39:26,710
kind of setting so there's some

819
00:39:24,070 --> 00:39:27,940
resources<font color="#CCCCCC"> that if</font><font color="#E5E5E5"> you're if you want to</font>

820
00:39:26,710 --> 00:39:30,369
get into<font color="#E5E5E5"> this or you're into this but</font>

821
00:39:27,940 --> 00:39:34,359
you want more information good books<font color="#CCCCCC"> are</font>

822
00:39:30,369 --> 00:39:38,920
show cutters handbook which covers linux

823
00:39:34,359 --> 00:39:40,540
solaris and windows shell code hacking

824
00:39:38,920 --> 00:39:42,910
art of exploitation which is being sold

825
00:39:40,540 --> 00:39:45,910
by no starch press over in the vendors

826
00:39:42,910 --> 00:39:48,580
room has a huge chapter on shellcode

827
00:39:45,910 --> 00:39:51,279
also goes over all sorts of overflows

828
00:39:48,580 --> 00:39:53,830
and generic exploitation so that's your

829
00:39:51,280 --> 00:39:55,660
<font color="#E5E5E5">weak area I'd say definitely pick that</font>

830
00:39:53,830 --> 00:39:56,950
book up it's a great book and then this

831
00:39:55,660 --> 00:39:58,720
<font color="#E5E5E5">is actually the only assembly book I've</font>

832
00:39:56,950 --> 00:40:01,600
ever read so I don't<font color="#CCCCCC"> have anything else</font>

833
00:39:58,720 --> 00:40:04,209
to recommend but this is just by the

834
00:40:01,600 --> 00:40:07,180
guys that helped design that these two

835
00:40:04,210 --> 00:40:10,330
chips<font color="#E5E5E5"> I'd say chick get an assembly book</font>

836
00:40:07,180 --> 00:40:12,180
<font color="#CCCCCC">too if that's your weak area sites like</font>

837
00:40:10,330 --> 00:40:15,130
<font color="#E5E5E5">mill warm</font><font color="#CCCCCC"> and shouko torgul have</font>

838
00:40:12,180 --> 00:40:16,419
publicly browsable shellcode archives

839
00:40:15,130 --> 00:40:19,960
and you can go<font color="#CCCCCC"> through those and do a</font>

840
00:40:16,420 --> 00:40:21,130
lot of information basically like a good

841
00:40:19,960 --> 00:40:23,109
way to<font color="#E5E5E5"> get into this is just find a</font>

842
00:40:21,130 --> 00:40:26,140
thing you want a shellcode fun to find a

843
00:40:23,109 --> 00:40:28,779
command<font color="#E5E5E5"> you want to run and just try and</font>

844
00:40:26,140 --> 00:40:31,569
work it out and based on the examples

845
00:40:28,780 --> 00:40:32,890
you can see online and maybe a book you

846
00:40:31,570 --> 00:40:33,160
get you probably be<font color="#E5E5E5"> able to figure out</font>

847
00:40:32,890 --> 00:40:34,900
pretty

848
00:40:33,160 --> 00:40:36,700
quick I don't<font color="#CCCCCC"> think it's as hard as it</font>

849
00:40:34,900 --> 00:40:38,260
looks it's just assemblies a very

850
00:40:36,700 --> 00:40:40,328
foreign language to people who aren't

851
00:40:38,260 --> 00:40:41,619
familiar with it<font color="#CCCCCC"> but if</font><font color="#E5E5E5"> you have a basic</font>

852
00:40:40,329 --> 00:40:44,170
background in programming should be

853
00:40:41,619 --> 00:40:46,390
pretty easy to jump into and then

854
00:40:44,170 --> 00:40:48,609
supplementary material linkers and

855
00:40:46,390 --> 00:40:50,319
loaders is a great book i just got done

856
00:40:48,609 --> 00:40:51,880
reading memory as a programming concept

857
00:40:50,319 --> 00:40:54,819
which is another great book if<font color="#CCCCCC"> you want</font>

858
00:40:51,880 --> 00:40:56,589
to learn<font color="#CCCCCC"> more about the stack that he</font>

859
00:40:54,819 --> 00:40:58,990
you know how these things are created

860
00:40:56,589 --> 00:41:01,119
and used that sort of thing and then

861
00:40:58,990 --> 00:41:03,520
again general research of overflows and

862
00:41:01,119 --> 00:41:11,020
exploitation is also great supplementary

863
00:41:03,520 --> 00:41:12,609
material questions<font color="#E5E5E5"> I'll email them to</font>

864
00:41:11,020 --> 00:41:19,210
layer<font color="#CCCCCC"> one people and they'll be up on</font>

865
00:41:12,609 --> 00:41:20,740
the site or if not just can't read it

866
00:41:19,210 --> 00:41:23,530
just email me here<font color="#E5E5E5"> and i'll email it to</font>

867
00:41:20,740 --> 00:41:25,270
you i'll also email you all the

868
00:41:23,530 --> 00:41:26,650
associated files if you want to execute

869
00:41:25,270 --> 00:41:28,509
them and run them they're<font color="#E5E5E5"> all system</font>

870
00:41:26,650 --> 00:41:31,890
safe<font color="#E5E5E5"> worst-case scenario is that they</font>

871
00:41:28,510 --> 00:41:43,140
seg fault or root your machine you<font color="#CCCCCC"> know</font>

872
00:41:31,890 --> 00:41:45,848
<font color="#CCCCCC">worst case scenario what's that was it I</font>

873
00:41:43,140 --> 00:41:48,220
think it<font color="#E5E5E5"> was by Datagram comma</font><font color="#CCCCCC"> shell</font>

874
00:41:45,849 --> 00:41:51,940
cutting that'd be<font color="#CCCCCC"> my guess I</font><font color="#E5E5E5"> don't know</font>

875
00:41:48,220 --> 00:41:59,379
I don't do the website they run<font color="#CCCCCC"> x so I</font>

876
00:41:51,940 --> 00:42:03,180
wasn't familiar<font color="#E5E5E5"> I go back with yes what</font>

877
00:41:59,380 --> 00:42:03,180
you do it right there what's at

878
00:42:03,480 --> 00:42:09,250
that's the thing<font color="#CCCCCC"> that prints hello layer</font>

879
00:42:05,770 --> 00:42:11,380
<font color="#CCCCCC">1 attendees which is actually quite long</font>

880
00:42:09,250 --> 00:42:14,860
only because of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> enormous amount of</font>

881
00:42:11,380 --> 00:42:16,270
characters in the string like I think

882
00:42:14,860 --> 00:42:22,770
the<font color="#E5E5E5"> the string is more than the actual</font>

883
00:42:16,270 --> 00:42:28,420
code to print it so but yeah said it I

884
00:42:22,770 --> 00:42:30,910
should<font color="#E5E5E5"> probably just do this yeah just</font>

885
00:42:28,420 --> 00:42:33,640
uh thanks to layer<font color="#CCCCCC"> 1 staff</font><font color="#E5E5E5"> Vlad for his</font>

886
00:42:30,910 --> 00:42:35,649
polymorphic encoder research it's sick

887
00:42:33,640 --> 00:42:37,000
for his splendid show<font color="#E5E5E5"> could research he</font>

888
00:42:35,650 --> 00:42:40,000
also does a<font color="#CCCCCC"> lot of other crazy stuff</font>

889
00:42:37,000 --> 00:42:41,680
like<font color="#E5E5E5"> the system customization stuff and</font>

890
00:42:40,000 --> 00:42:43,810
his site is<font color="#E5E5E5"> definitely a great resource</font>

891
00:42:41,680 --> 00:42:45,460
if you're if you're kind<font color="#E5E5E5"> of intermediate</font>

892
00:42:43,810 --> 00:42:47,799
at this and you want to see like more

893
00:42:45,460 --> 00:42:49,720
advanced applications of shellcode he

894
00:42:47,800 --> 00:42:52,210
has stuff that tues you know crazy<font color="#E5E5E5"> stuff</font>

895
00:42:49,720 --> 00:42:54,640
very good his stuffs also up on mill

896
00:42:52,210 --> 00:43:04,800
worm and then<font color="#E5E5E5"> lorkhan for the exploit</font>

897
00:42:54,640 --> 00:43:04,799
ice thieved no questions no<font color="#CCCCCC"> okay thank</font>

898
00:43:08,710 --> 00:43:24,359
oh I'm<font color="#E5E5E5"> just pulling this out thank you</font>

899
00:43:16,599 --> 00:43:24,359
sir I'm smoking oh yeah

900
00:44:13,680 --> 00:44:29,730
anyone know if this works<font color="#E5E5E5"> place you up</font>

901
00:44:27,340 --> 00:44:29,730
yes

