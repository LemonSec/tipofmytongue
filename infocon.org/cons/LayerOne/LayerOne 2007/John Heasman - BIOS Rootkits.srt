1
00:01:12,550 --> 00:01:19,759
okay good afternoon everybody<font color="#E5E5E5"> I'll start</font>

2
00:01:17,479 --> 00:01:22,490
<font color="#E5E5E5">by trying to use this Mike if you can't</font>

3
00:01:19,760 --> 00:01:25,939
<font color="#E5E5E5">hear me at the back I will use the</font><font color="#CCCCCC"> other</font>

4
00:01:22,490 --> 00:01:30,399
mic so my name<font color="#CCCCCC"> is</font><font color="#E5E5E5"> John Heisman and I</font>

5
00:01:25,939 --> 00:01:32,630
work for NGS earlier in Mike Kemp's talk

6
00:01:30,399 --> 00:01:36,130
somebody<font color="#CCCCCC"> else a question who or what is</font>

7
00:01:32,630 --> 00:01:38,689
NGS NGS is a security consultancy

8
00:01:36,130 --> 00:01:41,719
headquartered in London we're soon to

9
00:01:38,689 --> 00:01:45,139
open a west coast USA office in Seattle

10
00:01:41,719 --> 00:01:51,229
and we specialize<font color="#CCCCCC"> in product assessment</font>

11
00:01:45,140 --> 00:01:54,140
and vulnerability research so I'm here

12
00:01:51,229 --> 00:01:56,390
to talk about bios rootkits firmware it

13
00:01:54,140 --> 00:02:01,359
gets and this is<font color="#E5E5E5"> pretty much what I want</font>

14
00:01:56,390 --> 00:02:03,829
to cover in 2006 I did some research and

15
00:02:01,359 --> 00:02:06,199
first produced a proof-of-concept bios

16
00:02:03,829 --> 00:02:08,989
rootkit that abused the advanced

17
00:02:06,200 --> 00:02:11,690
configuration and powering to face ack p

18
00:02:08,990 --> 00:02:13,820
so<font color="#CCCCCC"> i'm going</font><font color="#E5E5E5"> to start by giving you a</font>

19
00:02:11,690 --> 00:02:16,280
brief overview of that technology and

20
00:02:13,820 --> 00:02:19,190
its limitations which led me on to

21
00:02:16,280 --> 00:02:21,580
looking at the pci bus then going to

22
00:02:19,190 --> 00:02:26,180
talk about actually what the pci bus is

23
00:02:21,580 --> 00:02:29,959
how PCI devices actually work and the

24
00:02:26,180 --> 00:02:32,489
meat of the<font color="#E5E5E5"> talk is going to be abusing</font>

25
00:02:29,959 --> 00:02:35,760
component of PCI devices known as

26
00:02:32,489 --> 00:02:38,910
expansion roms that dovetails nicely

27
00:02:35,760 --> 00:02:41,549
into abusing pxe<font color="#CCCCCC"> Intel's pre-boot</font>

28
00:02:38,910 --> 00:02:43,470
environment we're then going to talk

29
00:02:41,550 --> 00:02:45,000
about actually trying<font color="#E5E5E5"> to take these</font>

30
00:02:43,470 --> 00:02:47,010
<font color="#E5E5E5">things trying to prevent them in the</font>

31
00:02:45,000 --> 00:02:49,739
first instance and that leads<font color="#E5E5E5"> him</font><font color="#CCCCCC"> to a</font>

32
00:02:47,010 --> 00:02:52,739
<font color="#E5E5E5">discussion on trusted computing and I'm</font>

33
00:02:49,739 --> 00:02:54,959
going to discuss vista installed on a

34
00:02:52,739 --> 00:02:56,849
books with the TPM<font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> going to talk</font>

35
00:02:54,959 --> 00:03:00,030
<font color="#E5E5E5">about whether BitLocker actually</font>

36
00:02:56,849 --> 00:03:02,030
prevents<font color="#E5E5E5"> this type of attack and then</font><font color="#CCCCCC"> I</font>

37
00:03:00,030 --> 00:03:05,970
<font color="#E5E5E5">leave you</font><font color="#CCCCCC"> with some questions at the end</font>

38
00:03:02,030 --> 00:03:10,190
questions for<font color="#E5E5E5"> further discussion so</font>

39
00:03:05,970 --> 00:03:13,290
let's get started<font color="#E5E5E5"> with ag p as i said i</font>

40
00:03:10,190 --> 00:03:16,260
presented this research in early 2006

41
00:03:13,290 --> 00:03:19,109
and essentially i was looking at ways of

42
00:03:16,260 --> 00:03:21,179
putting a rootkit in the<font color="#CCCCCC"> bios and the</font>

43
00:03:19,110 --> 00:03:23,430
first thing that struck me is the bios

44
00:03:21,180 --> 00:03:24,660
is<font color="#E5E5E5"> obviously pretty low-level it's code</font>

45
00:03:23,430 --> 00:03:26,450
that will execute when your machine

46
00:03:24,660 --> 00:03:30,000
turns on during the power-on self-test

47
00:03:26,450 --> 00:03:32,220
so how do you<font color="#CCCCCC"> actually go from storing</font>

48
00:03:30,000 --> 00:03:34,620
code or data in the bios to<font color="#CCCCCC"> actually</font>

49
00:03:32,220 --> 00:03:36,510
deploying our windows rootkit for

50
00:03:34,620 --> 00:03:38,850
example a rootkit that will hide

51
00:03:36,510 --> 00:03:41,850
processes hide files make covert network

52
00:03:38,850 --> 00:03:44,040
communications how do we go from the

53
00:03:41,850 --> 00:03:45,239
<font color="#E5E5E5">BIOS switches extremely</font><font color="#CCCCCC"> low-level</font><font color="#E5E5E5"> to</font>

54
00:03:44,040 --> 00:03:47,578
deploying something that's<font color="#CCCCCC"> actually</font>

55
00:03:45,239 --> 00:03:48,810
quite high level in the<font color="#E5E5E5"> in regard to the</font>

56
00:03:47,579 --> 00:03:53,670
<font color="#E5E5E5">operating system how it interacts with</font>

57
00:03:48,810 --> 00:03:56,280
<font color="#E5E5E5">the colonel and at p was a easy way</font>

58
00:03:53,670 --> 00:03:57,899
around this essentially<font color="#E5E5E5"> as i said that p</font>

59
00:03:56,280 --> 00:04:01,530
is the advanced configuration and power

60
00:03:57,900 --> 00:04:05,160
interface and it basically handles power

61
00:04:01,530 --> 00:04:06,930
management so it actually replaces the

62
00:04:05,160 --> 00:04:10,410
old APM the advanced power management

63
00:04:06,930 --> 00:04:12,660
spec the way it will actually<font color="#CCCCCC"> work</font><font color="#E5E5E5"> or</font>

64
00:04:10,410 --> 00:04:14,849
the<font color="#CCCCCC"> way</font><font color="#E5E5E5"> a PM used to work is supposing</font>

65
00:04:12,660 --> 00:04:16,889
on your notebook you wanted to retrieve

66
00:04:14,849 --> 00:04:18,000
some some sort of power setting for

67
00:04:16,889 --> 00:04:20,820
example<font color="#CCCCCC"> you wanted to know how</font><font color="#E5E5E5"> much</font>

68
00:04:18,000 --> 00:04:22,530
charge is left in your<font color="#E5E5E5"> battery the</font>

69
00:04:20,820 --> 00:04:25,200
operating system would simply pull into

70
00:04:22,530 --> 00:04:28,289
a APM interface that was<font color="#E5E5E5"> implemented in</font>

71
00:04:25,200 --> 00:04:29,849
the<font color="#CCCCCC"> BIOS and so these were implemented</font>

72
00:04:28,289 --> 00:04:31,979
by<font color="#E5E5E5"> the vendor and we're often very buggy</font>

73
00:04:29,849 --> 00:04:33,930
and your machine would hang for no

74
00:04:31,979 --> 00:04:35,969
reason and you'd say you know<font color="#E5E5E5"> stupid</font>

75
00:04:33,930 --> 00:04:37,430
microsoft when in fact it was that the

76
00:04:35,970 --> 00:04:42,080
vendors buggy APM code

77
00:04:37,430 --> 00:04:44,000
so they move towards act p consortium

78
00:04:42,080 --> 00:04:46,450
was formed with although all the usual

79
00:04:44,000 --> 00:04:49,040
<font color="#E5E5E5">kind of players Intel Microsoft HP and</font>

80
00:04:46,450 --> 00:04:51,409
the idea with<font color="#CCCCCC"> ag</font><font color="#E5E5E5"> p is</font><font color="#CCCCCC"> that they've</font>

81
00:04:49,040 --> 00:04:54,440
abstracted this so that supposing you

82
00:04:51,410 --> 00:04:57,400
want to find<font color="#E5E5E5"> out how much charges on</font>

83
00:04:54,440 --> 00:05:00,710
your battery the way act p would work is

84
00:04:57,400 --> 00:05:04,280
the bios holds holds some tables<font color="#E5E5E5"> take</font>

85
00:05:00,710 --> 00:05:06,140
data tables which contain virtual

86
00:05:04,280 --> 00:05:08,210
instructions the ACT p machine language

87
00:05:06,140 --> 00:05:10,729
instructions<font color="#E5E5E5"> which explain how to</font>

88
00:05:08,210 --> 00:05:14,960
actually retrieve the amount<font color="#E5E5E5"> of charge</font>

89
00:05:10,730 --> 00:05:16,880
for example the operating system will

90
00:05:14,960 --> 00:05:18,919
load a device driver one of the first it

91
00:05:16,880 --> 00:05:20,690
will load in fact that actually has a

92
00:05:18,920 --> 00:05:23,000
virtual machine inside it for this

93
00:05:20,690 --> 00:05:24,469
capable of interpreting these machine

94
00:05:23,000 --> 00:05:29,240
language instructions to the stored in

95
00:05:24,470 --> 00:05:31,580
the bios and basically this machine

96
00:05:29,240 --> 00:05:34,490
language instruction<font color="#E5E5E5"> set allows us to</font>

97
00:05:31,580 --> 00:05:37,219
interact with<font color="#E5E5E5"> the system so for example</font>

98
00:05:34,490 --> 00:05:39,520
if<font color="#E5E5E5"> one a particular motherboard we need</font>

99
00:05:37,220 --> 00:05:41,510
to do some certain io to retrieve say

100
00:05:39,520 --> 00:05:44,900
the temperature<font color="#E5E5E5"> the motherboard is</font>

101
00:05:41,510 --> 00:05:47,990
running at we using at p we can abstract

102
00:05:44,900 --> 00:05:52,099
that so that basically the vendor ships

103
00:05:47,990 --> 00:05:53,870
the device driver for<font color="#CCCCCC"> XP the story the</font>

104
00:05:52,100 --> 00:05:55,730
operating system vendor ships the device

105
00:05:53,870 --> 00:05:57,530
driver<font color="#CCCCCC"> frak p and then the motherboard</font>

106
00:05:55,730 --> 00:05:59,210
render ships the bios with the AG p

107
00:05:57,530 --> 00:06:01,580
tables which say you need to<font color="#E5E5E5"> implement</font>

108
00:05:59,210 --> 00:06:03,140
these specific instructions in order to

109
00:06:01,580 --> 00:06:05,900
say read the temperature off the

110
00:06:03,140 --> 00:06:07,400
motherboard so this machine language

111
00:06:05,900 --> 00:06:09,919
instruction set is actually very

112
00:06:07,400 --> 00:06:12,969
powerful one of the<font color="#E5E5E5"> things that allows</font>

113
00:06:09,920 --> 00:06:15,680
us<font color="#E5E5E5"> to do is interact with system memory</font>

114
00:06:12,970 --> 00:06:18,350
so the basic attack for the ACT p<font color="#CCCCCC"> bias</font>

115
00:06:15,680 --> 00:06:19,880
rootkit was we take a bios for your

116
00:06:18,350 --> 00:06:22,780
motherboard's we download<font color="#E5E5E5"> it say off of</font>

117
00:06:19,880 --> 00:06:25,130
the vendors website we crack it open

118
00:06:22,780 --> 00:06:26,359
bios that you'll download and actually

119
00:06:25,130 --> 00:06:28,280
flash to your to your motherboard is

120
00:06:26,360 --> 00:06:30,440
typically just an archive of some form

121
00:06:28,280 --> 00:06:32,479
so<font color="#CCCCCC"> we split</font><font color="#E5E5E5"> it into its components and</font>

122
00:06:30,440 --> 00:06:35,980
you'll see one of these component files

123
00:06:32,480 --> 00:06:38,660
is essentially these these tables of AML

124
00:06:35,980 --> 00:06:41,450
and we actually modify these AML tables

125
00:06:38,660 --> 00:06:42,710
so<font color="#CCCCCC"> that in addition to carrying out</font>

126
00:06:41,450 --> 00:06:44,539
these virtual instructions that are

127
00:06:42,710 --> 00:06:46,669
required to say read the temperature<font color="#E5E5E5"> off</font>

128
00:06:44,540 --> 00:06:51,110
the motherboard it will also execute our

129
00:06:46,670 --> 00:06:52,880
malicious AML and as he as<font color="#E5E5E5"> i just said</font>

130
00:06:51,110 --> 00:06:56,830
amen instructions they actually lets us

131
00:06:52,880 --> 00:06:56,830
interact with<font color="#CCCCCC"> io space and memory space</font>

132
00:06:57,070 --> 00:07:01,430
so the<font color="#E5E5E5"> idea is that when the machine</font>

133
00:06:59,300 --> 00:07:03,290
boots up and the<font color="#CCCCCC"> Acme</font><font color="#E5E5E5"> device driver</font>

134
00:07:01,430 --> 00:07:05,750
loads and it starts consulting these AML

135
00:07:03,290 --> 00:07:07,730
tables who will actually execute our

136
00:07:05,750 --> 00:07:09,230
virtual instructions and our virtual

137
00:07:07,730 --> 00:07:10,520
instructions will basically just patch

138
00:07:09,230 --> 00:07:13,190
our rootkit straight into memory

139
00:07:10,520 --> 00:07:17,510
overwriting whatever kernel code page

140
00:07:13,190 --> 00:07:19,160
your data page we need to so this is

141
00:07:17,510 --> 00:07:22,099
conceptually what act p would look like

142
00:07:19,160 --> 00:07:23,660
you have your<font color="#CCCCCC"> you're harder at the</font>

143
00:07:22,100 --> 00:07:25,880
bottom and<font color="#E5E5E5"> then you've</font><font color="#CCCCCC"> got your your</font>

144
00:07:23,660 --> 00:07:29,750
<font color="#CCCCCC">BIOS that's to be</font><font color="#E5E5E5"> stored in firmware</font>

145
00:07:25,880 --> 00:07:32,840
that<font color="#E5E5E5"> you can reflash conceptually above</font>

146
00:07:29,750 --> 00:07:34,790
that we have the<font color="#E5E5E5"> Acme tables and a</font>

147
00:07:32,840 --> 00:07:38,299
little scratch area for storage VIP

148
00:07:34,790 --> 00:07:41,410
registers on top of that we<font color="#CCCCCC"> have the</font>

149
00:07:38,300 --> 00:07:44,660
active device driver and that is a

150
00:07:41,410 --> 00:07:47,480
kernel module and the<font color="#E5E5E5"> can also has some</font>

151
00:07:44,660 --> 00:07:50,090
OS power management code that will

152
00:07:47,480 --> 00:07:52,010
basically allow applications to call

153
00:07:50,090 --> 00:07:56,900
into<font color="#CCCCCC"> the kernel and say for example how</font>

154
00:07:52,010 --> 00:07:59,180
much charge is left in the battery some

155
00:07:56,900 --> 00:08:00,760
limitations of this<font color="#E5E5E5"> technology firstly</font>

156
00:07:59,180 --> 00:08:04,580
we<font color="#CCCCCC"> have to be able to reflash the</font>

157
00:08:00,760 --> 00:08:06,950
motherboard<font color="#CCCCCC"> BIOS and there are</font>

158
00:08:04,580 --> 00:08:09,800
technologies to prevent this for example

159
00:08:06,950 --> 00:08:11,120
interim<font color="#E5E5E5"> Phoenix have the ability to only</font>

160
00:08:09,800 --> 00:08:14,510
<font color="#E5E5E5">flash their motherboards with signed</font>

161
00:08:11,120 --> 00:08:18,260
updates so we simply cannot get modified

162
00:08:14,510 --> 00:08:20,360
AML tables on there the second

163
00:08:18,260 --> 00:08:22,930
limitation is the operating<font color="#E5E5E5"> system has</font>

164
00:08:20,360 --> 00:08:25,340
<font color="#E5E5E5">too low the knack p device driver</font>

165
00:08:22,930 --> 00:08:26,840
typically you can still boot your

166
00:08:25,340 --> 00:08:29,090
operating system if<font color="#E5E5E5"> you don't load the</font>

167
00:08:26,840 --> 00:08:31,159
app p device driver it may not<font color="#E5E5E5"> recognize</font>

168
00:08:29,090 --> 00:08:33,049
all your devices because in addition to

169
00:08:31,160 --> 00:08:35,000
power management at p also<font color="#E5E5E5"> handles</font>

170
00:08:33,049 --> 00:08:38,150
configuration and it's actually

171
00:08:35,000 --> 00:08:39,200
replacement for plug and play but you

172
00:08:38,150 --> 00:08:42,650
can still get<font color="#E5E5E5"> your operating system</font>

173
00:08:39,200 --> 00:08:44,180
booted somehow without act p and the

174
00:08:42,650 --> 00:08:46,400
problem<font color="#CCCCCC"> is if you can load the operating</font>

175
00:08:44,179 --> 00:08:48,260
system without at p and you suspect you

176
00:08:46,400 --> 00:08:50,300
have an active rootkit then you can do

177
00:08:48,260 --> 00:08:52,040
the<font color="#E5E5E5"> sounded crossview detection so</font>

178
00:08:50,300 --> 00:08:53,689
essentially you scan your system without

179
00:08:52,040 --> 00:08:56,719
being<font color="#E5E5E5"> labeled you scan it without act p</font>

180
00:08:53,690 --> 00:08:59,120
enabled and then you compare the two<font color="#CCCCCC"> and</font>

181
00:08:56,720 --> 00:09:02,540
if there are<font color="#E5E5E5"> any discrepancies</font><font color="#CCCCCC"> that may</font>

182
00:08:59,120 --> 00:09:05,630
Kate there's a<font color="#E5E5E5"> recap and thirdly I said</font>

183
00:09:02,540 --> 00:09:08,060
that through this<font color="#E5E5E5"> AML we can actually</font>

184
00:09:05,630 --> 00:09:11,089
<font color="#E5E5E5">interact with system memory and the</font>

185
00:09:08,060 --> 00:09:13,400
system I o space one of the things<font color="#CCCCCC"> I</font>

186
00:09:11,089 --> 00:09:15,680
noted in my proof<font color="#E5E5E5"> of concept was when I</font>

187
00:09:13,400 --> 00:09:18,199
actually wrote to certain kernel code

188
00:09:15,680 --> 00:09:20,959
pages it on<font color="#CCCCCC"> Windows it generated an</font>

189
00:09:18,200 --> 00:09:22,850
event log error saying you shouldn't be

190
00:09:20,960 --> 00:09:25,910
doing<font color="#CCCCCC"> this but I'm going</font><font color="#E5E5E5"> to let you do</font>

191
00:09:22,850 --> 00:09:27,290
it for compatibility reasons so it

192
00:09:25,910 --> 00:09:30,459
wouldn't<font color="#E5E5E5"> take much for Microsoft to</font>

193
00:09:27,290 --> 00:09:32,540
actually or indeed any<font color="#CCCCCC"> IP device driver</font>

194
00:09:30,460 --> 00:09:34,820
whether<font color="#E5E5E5"> it be that the Linux one the</font>

195
00:09:32,540 --> 00:09:37,010
slowest one or the windows one to

196
00:09:34,820 --> 00:09:39,410
<font color="#E5E5E5">actually sandbox</font><font color="#CCCCCC"> EML interpreter to say</font>

197
00:09:37,010 --> 00:09:42,380
you shouldn't be overwriting kernel code

198
00:09:39,410 --> 00:09:44,120
pages I'm not<font color="#E5E5E5"> saying that would totally</font>

199
00:09:42,380 --> 00:09:45,830
prevent attacks they'll<font color="#CCCCCC"> probably be</font>

200
00:09:44,120 --> 00:09:47,480
various data structures we can still

201
00:09:45,830 --> 00:09:48,680
target but it was certainly make<font color="#CCCCCC"> it</font>

202
00:09:47,480 --> 00:09:52,520
easier it was certainly thought my

203
00:09:48,680 --> 00:09:54,349
initial proof of concepts so those

204
00:09:52,520 --> 00:09:56,529
limitations i was still<font color="#CCCCCC"> looking for a</font>

205
00:09:54,350 --> 00:09:59,240
rootkit that could persist on the system

206
00:09:56,529 --> 00:10:02,089
even if<font color="#E5E5E5"> you reinstall the system I mean</font>

207
00:09:59,240 --> 00:10:03,410
that's<font color="#E5E5E5"> my overall goal and so I really</font>

208
00:10:02,089 --> 00:10:05,240
considered the bios but the main

209
00:10:03,410 --> 00:10:07,910
limitation is systems that have a song

210
00:10:05,240 --> 00:10:09,920
by us we can't get our code on there so

211
00:10:07,910 --> 00:10:12,339
I started looking at other devices<font color="#E5E5E5"> that</font>

212
00:10:09,920 --> 00:10:14,750
have firmware in on a modern PC and

213
00:10:12,339 --> 00:10:16,580
there are literally tens of devices

214
00:10:14,750 --> 00:10:19,310
pretty much everything every component

215
00:10:16,580 --> 00:10:22,160
in your PC has some firmware which can

216
00:10:19,310 --> 00:10:23,630
typically be updated from the system

217
00:10:22,160 --> 00:10:25,699
itself as in we don't need to remove the

218
00:10:23,630 --> 00:10:28,189
component nor do we need to<font color="#E5E5E5"> remove the</font>

219
00:10:25,700 --> 00:10:32,300
the chip off the the prom off the card

220
00:10:28,190 --> 00:10:34,250
itself so the pci bus looked very

221
00:10:32,300 --> 00:10:37,160
appealing on the typical machine you'll

222
00:10:34,250 --> 00:10:39,350
have several PCI devices and one thing

223
00:10:37,160 --> 00:10:41,719
I'll make clear in my terminology is

224
00:10:39,350 --> 00:10:45,529
that when i talk about pci<font color="#E5E5E5"> and actually</font>

225
00:10:41,720 --> 00:10:46,580
talking about pci AGP and pci express so

226
00:10:45,529 --> 00:10:52,160
pretty<font color="#E5E5E5"> much all of those technologies</font>

227
00:10:46,580 --> 00:10:56,630
fall under well<font color="#E5E5E5"> i'm gonna call pci so</font>

228
00:10:52,160 --> 00:10:57,920
some questions to consider firstly so if

229
00:10:56,630 --> 00:11:01,339
you consider every machine on your

230
00:10:57,920 --> 00:11:05,630
network could you tell me<font color="#E5E5E5"> exactly which</font>

231
00:11:01,339 --> 00:11:06,770
PCI devices are in<font color="#E5E5E5"> every machine and if</font>

232
00:11:05,630 --> 00:11:08,959
you could<font color="#E5E5E5"> do</font><font color="#CCCCCC"> that could you tell me</font>

233
00:11:06,770 --> 00:11:10,250
where you saw<font color="#E5E5E5"> slew from could you tell</font>

234
00:11:08,959 --> 00:11:11,189
<font color="#CCCCCC">me how many people came into contact</font>

235
00:11:10,250 --> 00:11:13,980
with that card

236
00:11:11,190 --> 00:11:16,890
<font color="#CCCCCC">it left</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> factory</font><font color="#E5E5E5"> and ended up in your</font>

237
00:11:13,980 --> 00:11:18,270
machine if you<font color="#E5E5E5"> could tell me</font><font color="#CCCCCC"> that could</font>

238
00:11:16,890 --> 00:11:21,390
you tell me which of the cards can you

239
00:11:18,270 --> 00:11:24,240
actually update the firmware on if you

240
00:11:21,390 --> 00:11:26,000
<font color="#CCCCCC">can tell me</font><font color="#E5E5E5"> that can you tell</font><font color="#CCCCCC"> me what</font>

241
00:11:24,240 --> 00:11:28,890
firmware is<font color="#E5E5E5"> currently on your device and</font>

242
00:11:26,000 --> 00:11:30,570
<font color="#CCCCCC">if you could</font><font color="#E5E5E5"> tell me that then could you</font>

243
00:11:28,890 --> 00:11:34,080
answer whether you can<font color="#E5E5E5"> actually trust</font>

244
00:11:30,570 --> 00:11:36,480
the<font color="#E5E5E5"> integrity of that firmware and I'm</font>

245
00:11:34,080 --> 00:11:38,820
guessing in ninety-nine percent of the

246
00:11:36,480 --> 00:11:40,020
people here like pretty much<font color="#E5E5E5"> in general</font>

247
00:11:38,820 --> 00:11:40,890
across the board no one's going to be

248
00:11:40,020 --> 00:11:44,189
able to<font color="#E5E5E5"> answer all of these questions</font>

249
00:11:40,890 --> 00:11:46,199
may<font color="#E5E5E5"> be certain governments can but</font>

250
00:11:44,190 --> 00:11:48,000
certainly most corporations that I've

251
00:11:46,200 --> 00:11:49,500
seen they have a hard enough time

252
00:11:48,000 --> 00:11:51,810
knowing<font color="#CCCCCC"> what machines on their network</font>

253
00:11:49,500 --> 00:11:53,430
let<font color="#E5E5E5"> alone what cards are in those</font>

254
00:11:51,810 --> 00:11:57,239
machines let<font color="#E5E5E5"> alone whether they're</font>

255
00:11:53,430 --> 00:11:59,939
flashable so<font color="#E5E5E5"> I'll give a very brief</font>

256
00:11:57,240 --> 00:12:01,680
introduction to<font color="#E5E5E5"> the pci bus obviously</font>

257
00:11:59,940 --> 00:12:04,710
it's a computer<font color="#CCCCCC"> bus for attaching</font>

258
00:12:01,680 --> 00:12:08,030
peripherals to the motherboard developed

259
00:12:04,710 --> 00:12:10,950
around nineteen ninety by<font color="#CCCCCC"> intel and</font>

260
00:12:08,030 --> 00:12:13,020
essentially the way it works from an

261
00:12:10,950 --> 00:12:15,090
operating system perspective is the

262
00:12:13,020 --> 00:12:18,150
<font color="#E5E5E5">operating system will enumerate the pci</font>

263
00:12:15,090 --> 00:12:20,900
bus and will basically asked each device

264
00:12:18,150 --> 00:12:23,930
what are you what type of device are you

265
00:12:20,900 --> 00:12:28,850
give me some some sort of identification

266
00:12:23,930 --> 00:12:31,290
that lets me load a suitable driver and

267
00:12:28,850 --> 00:12:33,410
that information is stored in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> PCI</font>

268
00:12:31,290 --> 00:12:35,430
configuration space on the card and

269
00:12:33,410 --> 00:12:37,170
basically as I said it holds some

270
00:12:35,430 --> 00:12:39,780
various codes that holds<font color="#CCCCCC"> a plus code a</font>

271
00:12:37,170 --> 00:12:44,160
device code so that you can say I'm a

272
00:12:39,780 --> 00:12:45,780
graphics card<font color="#CCCCCC"> i'm a vga card whatever it</font>

273
00:12:44,160 --> 00:12:48,180
also<font color="#E5E5E5"> contains</font><font color="#CCCCCC"> a human readable</font>

274
00:12:45,780 --> 00:12:50,760
identification string so for<font color="#E5E5E5"> example in</font>

275
00:12:48,180 --> 00:12:53,640
<font color="#CCCCCC">Windows when you hot plug some some sort</font>

276
00:12:50,760 --> 00:12:56,100
of device since a USB<font color="#E5E5E5"> the similar thing</font>

277
00:12:53,640 --> 00:12:58,020
it's able to<font color="#E5E5E5"> prop up a box saying it's</font>

278
00:12:56,100 --> 00:12:59,550
recognized the hardware it may<font color="#E5E5E5"> not have</font>

279
00:12:58,020 --> 00:13:01,199
a driver for it but it's going<font color="#E5E5E5"> to print</font>

280
00:12:59,550 --> 00:13:06,870
you the string saying it's a<font color="#E5E5E5"> camera or</font>

281
00:13:01,200 --> 00:13:09,210
whatever<font color="#E5E5E5"> conceptually we have the</font>

282
00:13:06,870 --> 00:13:11,550
<font color="#E5E5E5">concept of a bridge you may have</font><font color="#CCCCCC"> more</font>

283
00:13:09,210 --> 00:13:14,310
than one pci bus probably have<font color="#CCCCCC"> a pci</font>

284
00:13:11,550 --> 00:13:16,829
express bus these days and we have the

285
00:13:14,310 --> 00:13:19,979
<font color="#E5E5E5">concept of devices so a device can have</font>

286
00:13:16,830 --> 00:13:22,140
multiple functions and the function

287
00:13:19,980 --> 00:13:24,030
<font color="#E5E5E5">really is what we would consider an</font>

288
00:13:22,140 --> 00:13:25,139
actual device as in something<font color="#CCCCCC"> that can</font>

289
00:13:24,030 --> 00:13:29,488
actually<font color="#E5E5E5"> do something</font>

290
00:13:25,139 --> 00:13:32,850
it will be<font color="#E5E5E5"> integrated into</font><font color="#CCCCCC"> 211</font><font color="#E5E5E5"> logical</font>

291
00:13:29,489 --> 00:13:35,249
device so<font color="#E5E5E5"> you can see here's a dump of</font>

292
00:13:32,850 --> 00:13:40,619
the<font color="#E5E5E5"> PCI bus on</font><font color="#CCCCCC"> my notebook</font><font color="#E5E5E5"> and have a</font>

293
00:13:35,249 --> 00:13:42,779
few multifunction devices so the

294
00:13:40,619 --> 00:13:44,669
interesting thing about PCI devices is

295
00:13:42,779 --> 00:13:48,569
that some of them require some

296
00:13:44,669 --> 00:13:50,549
initialization<font color="#E5E5E5"> and the way this</font>

297
00:13:48,569 --> 00:13:53,569
initialization happens is essentially

298
00:13:50,549 --> 00:13:56,209
<font color="#E5E5E5">there is</font><font color="#CCCCCC"> a rom on many pci cards and</font>

299
00:13:53,569 --> 00:14:01,378
this rom holds this initialization code

300
00:13:56,209 --> 00:14:03,988
typically x86 code so simply straight um

301
00:14:01,379 --> 00:14:07,379
x86 code that will be<font color="#CCCCCC"> executed by the</font>

302
00:14:03,989 --> 00:14:08,600
main<font color="#CCCCCC"> cpu on your system and more</font><font color="#E5E5E5"> likely</font>

303
00:14:07,379 --> 00:14:10,829
happens during the power-on self-test

304
00:14:08,600 --> 00:14:13,499
when you first turn your machine on is

305
00:14:10,829 --> 00:14:15,988
that your<font color="#CCCCCC"> BIOS will scan the PCI bus and</font>

306
00:14:13,499 --> 00:14:18,449
it will look<font color="#E5E5E5"> for all</font><font color="#CCCCCC"> the cards that have</font>

307
00:14:15,989 --> 00:14:19,980
expansion drums and when it finds an

308
00:14:18,449 --> 00:14:22,108
expansion run<font color="#CCCCCC"> McCobb with an expansion</font>

309
00:14:19,980 --> 00:14:25,019
rom it will ask it to copy its expansion

310
00:14:22,109 --> 00:14:28,859
run from the card itself into physical

311
00:14:25,019 --> 00:14:31,410
memory once the<font color="#CCCCCC"> bios has done this for</font>

312
00:14:28,859 --> 00:14:34,790
all of the cards in your system it will

313
00:14:31,410 --> 00:14:38,040
simply sequentially execute those roms

314
00:14:34,790 --> 00:14:41,488
so we've gone<font color="#CCCCCC"> from some code that was</font>

315
00:14:38,040 --> 00:14:43,618
<font color="#E5E5E5">stored on the pci card itself it's now</font>

316
00:14:41,489 --> 00:14:45,480
in physical memory and it's now being

317
00:14:43,619 --> 00:14:50,069
executed during during<font color="#E5E5E5"> the power-on</font>

318
00:14:45,480 --> 00:14:51,889
self-test so this<font color="#CCCCCC"> is essentially before</font>

319
00:14:50,069 --> 00:14:54,899
anything has been<font color="#E5E5E5"> printed to your screen</font>

320
00:14:51,889 --> 00:14:56,819
when you've turned it on certainly

321
00:14:54,899 --> 00:14:58,350
before<font color="#E5E5E5"> the OS loader has started and</font>

322
00:14:56,819 --> 00:15:00,628
obviously<font color="#E5E5E5"> before the operating system</font>

323
00:14:58,350 --> 00:15:02,699
has started so when you think<font color="#CCCCCC"> about</font><font color="#E5E5E5"> this</font>

324
00:15:00,629 --> 00:15:04,259
from<font color="#E5E5E5"> an attackers perspective this is</font>

325
00:15:02,699 --> 00:15:06,809
<font color="#CCCCCC">quite quite handy</font><font color="#E5E5E5"> you're actually</font>

326
00:15:04,259 --> 00:15:10,829
executing code in the bios that was

327
00:15:06,809 --> 00:15:13,410
stored<font color="#E5E5E5"> on a pci card in practice as I</font>

328
00:15:10,829 --> 00:15:16,738
said this is used for initialization for

329
00:15:13,410 --> 00:15:19,618
example your<font color="#CCCCCC"> pcie graphics card is</font>

330
00:15:16,739 --> 00:15:21,179
likely<font color="#CCCCCC"> to have an ee prom and the</font>

331
00:15:19,619 --> 00:15:22,919
difference<font color="#CCCCCC"> between an EEPROM and an ee</font>

332
00:15:21,179 --> 00:15:25,549
prom is whether you<font color="#E5E5E5"> need to actually</font>

333
00:15:22,919 --> 00:15:27,660
take the chip off<font color="#CCCCCC"> the card to flash it e</font>

334
00:15:25,549 --> 00:15:29,429
<font color="#CCCCCC">problems can actually be flashed while</font>

335
00:15:27,660 --> 00:15:31,259
they're on the cards by supplying a

336
00:15:29,429 --> 00:15:34,169
current rather than the<font color="#E5E5E5"> old fashioned</font>

337
00:15:31,259 --> 00:15:36,199
prom method of an ultraviolet lights and

338
00:15:34,169 --> 00:15:38,399
then burning burning new image<font color="#E5E5E5"> onto it</font>

339
00:15:36,199 --> 00:15:38,979
<font color="#CCCCCC">so your graphics card your pcie graphics</font>

340
00:15:38,399 --> 00:15:41,589
card

341
00:15:38,980 --> 00:15:43,060
we have an<font color="#CCCCCC"> EEPROM that will contain some</font>

342
00:15:41,589 --> 00:15:45,220
initialization code that during the

343
00:15:43,060 --> 00:15:47,529
power-on self-test is copied<font color="#CCCCCC"> to ram and</font>

344
00:15:45,220 --> 00:15:50,470
executed and that will<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> hook</font>

345
00:15:47,529 --> 00:15:53,709
interrupt 10 in the real mode interrupt

346
00:15:50,470 --> 00:15:57,970
vector table the interrupt vector table

347
00:15:53,709 --> 00:15:59,680
essentially gives you access to the set

348
00:15:57,970 --> 00:16:02,199
of services exposed by the<font color="#CCCCCC"> bios and</font>

349
00:15:59,680 --> 00:16:04,810
various cards that your<font color="#CCCCCC"> bootloader</font><font color="#E5E5E5"> has</font>

350
00:16:02,199 --> 00:16:08,170
to rely on so for<font color="#E5E5E5"> example by hooking in</font>

351
00:16:04,810 --> 00:16:10,449
10 it allows<font color="#CCCCCC"> us to actually output</font>

352
00:16:08,170 --> 00:16:13,300
characters to the screen so when your OS

353
00:16:10,449 --> 00:16:15,819
loader says you know starting grub or NT

354
00:16:13,300 --> 00:16:18,550
load of loading windows basically the

355
00:16:15,820 --> 00:16:22,139
pci graphics card has flipped in 10 and

356
00:16:18,550 --> 00:16:22,139
<font color="#CCCCCC">it's code is</font><font color="#E5E5E5"> being executed their</font>

357
00:16:24,060 --> 00:16:29,079
expansion rom this is kind of what it

358
00:16:26,410 --> 00:16:32,620
looks like you have<font color="#CCCCCC"> a signature couple</font>

359
00:16:29,079 --> 00:16:35,469
of bites and then you have offset<font color="#CCCCCC"> 3</font>

360
00:16:32,620 --> 00:16:38,829
essentially just an entry point into the

361
00:16:35,470 --> 00:16:40,870
the<font color="#E5E5E5"> rom itself and so that</font><font color="#CCCCCC"> the signature</font>

362
00:16:38,829 --> 00:16:43,000
bites<font color="#E5E5E5"> erm are used so that the bios once</font>

363
00:16:40,870 --> 00:16:44,589
it's copied the roms to ram can scan

364
00:16:43,000 --> 00:16:47,010
through<font color="#E5E5E5"> ram quickly and say here's an</font>

365
00:16:44,589 --> 00:16:54,250
expansion rom I'll just jump to offset<font color="#E5E5E5"> 3</font>

366
00:16:47,010 --> 00:16:56,079
they also have a checksum as well so the

367
00:16:54,250 --> 00:17:00,459
problem is really how do we go from this

368
00:16:56,079 --> 00:17:03,189
code that's executed in real mode 16-bit

369
00:17:00,459 --> 00:17:05,260
real mode how do<font color="#E5E5E5"> we go from that code in</font>

370
00:17:03,190 --> 00:17:08,260
the bios<font color="#CCCCCC"> or executed during the post</font>

371
00:17:05,260 --> 00:17:12,459
story to actually deploying our windows

372
00:17:08,260 --> 00:17:15,220
<font color="#CCCCCC">recap or a</font><font color="#E5E5E5"> linux recap there are</font><font color="#CCCCCC"> various</font>

373
00:17:12,459 --> 00:17:17,589
ways we can do this essentially the OS

374
00:17:15,220 --> 00:17:19,059
lo<font color="#E5E5E5"> there has to rely on the ivt this</font>

375
00:17:17,589 --> 00:17:22,240
vector table interrupt vector table

376
00:17:19,059 --> 00:17:23,589
because the OS loader doesn't know what

377
00:17:22,240 --> 00:17:25,150
hardware you have it doesn't know how to

378
00:17:23,589 --> 00:17:27,188
access the disk it doesn't know how to

379
00:17:25,150 --> 00:17:29,110
access the screen so it has to<font color="#E5E5E5"> rely on</font>

380
00:17:27,189 --> 00:17:34,120
some services exposed by the bios

381
00:17:29,110 --> 00:17:35,320
through the ivt so II I produced a boot

382
00:17:34,120 --> 00:17:39,370
sector<font color="#E5E5E5"> root get a couple of</font><font color="#CCCCCC"> years ago</font>

383
00:17:35,320 --> 00:17:41,918
and they actually hooked in 13 I think I

384
00:17:39,370 --> 00:17:43,750
<font color="#E5E5E5">should be in 15</font><font color="#CCCCCC"> for disk and what they</font>

385
00:17:41,919 --> 00:17:45,840
were<font color="#CCCCCC"> able to do is every time OS lo the</font>

386
00:17:43,750 --> 00:17:48,130
<font color="#CCCCCC">Coulomb 15 to read something off disk</font>

387
00:17:45,840 --> 00:17:48,870
they would<font color="#CCCCCC"> actually scan the byte stream</font>

388
00:17:48,130 --> 00:17:51,150
and modify

389
00:17:48,870 --> 00:17:52,979
in place so they would look for a

390
00:17:51,150 --> 00:17:54,960
particular device driver being loaded in

391
00:17:52,980 --> 00:17:56,730
this case the ethernet driver and when

392
00:17:54,960 --> 00:17:58,860
they spotted it being loaded they would

393
00:17:56,730 --> 00:18:00,410
<font color="#CCCCCC">actually catch it on the fly</font><font color="#E5E5E5"> so that</font>

394
00:17:58,860 --> 00:18:04,439
they could put their<font color="#CCCCCC"> back door</font><font color="#E5E5E5"> into it</font>

395
00:18:00,410 --> 00:18:06,000
so this was a nice technique it's a<font color="#E5E5E5"> I</font>

396
00:18:04,440 --> 00:18:07,170
guess one of the downfalls of this

397
00:18:06,000 --> 00:18:09,360
technique is you're<font color="#CCCCCC"> looking for a</font>

398
00:18:07,170 --> 00:18:10,650
specific string of<font color="#CCCCCC"> bites if you upgraded</font>

399
00:18:09,360 --> 00:18:12,750
your ethernet driver for example you

400
00:18:10,650 --> 00:18:16,440
might might not support that it's also a

401
00:18:12,750 --> 00:18:18,840
<font color="#E5E5E5">little bit clunky so I look for another</font>

402
00:18:16,440 --> 00:18:21,780
technique and I started looking<font color="#E5E5E5"> at in 10</font>

403
00:18:18,840 --> 00:18:24,360
which<font color="#CCCCCC"> is the video interrupt and what I</font>

404
00:18:21,780 --> 00:18:26,639
noticed was in 10 is cooled by the

405
00:18:24,360 --> 00:18:28,590
<font color="#E5E5E5">system BIOS well this is unsurprising</font>

406
00:18:26,640 --> 00:18:30,300
because if you want to output characters

407
00:18:28,590 --> 00:18:32,580
to the screen you have<font color="#E5E5E5"> to call in 10 and</font>

408
00:18:30,300 --> 00:18:37,710
when you turn your pc on it says dell or

409
00:18:32,580 --> 00:18:39,600
whatever that's calling in 10 NT loader

410
00:18:37,710 --> 00:18:42,240
the the windows OS loader also called it

411
00:18:39,600 --> 00:18:43,919
that was also unsurprising because it

412
00:18:42,240 --> 00:18:46,860
says NT later and it displays that bar

413
00:18:43,920 --> 00:18:49,980
at the<font color="#E5E5E5"> start slightly more surprising</font>

414
00:18:46,860 --> 00:18:51,479
was that the protective mode fixed a bit

415
00:18:49,980 --> 00:18:56,309
kernel enters<font color="#CCCCCC"> colonel the windows kernel</font>

416
00:18:51,480 --> 00:18:58,830
also called in 10 and so this was a

417
00:18:56,309 --> 00:19:00,840
little<font color="#CCCCCC"> bit confusing at first i will</font>

418
00:18:58,830 --> 00:19:03,990
<font color="#E5E5E5">explain it I'll take a little detour to</font>

419
00:19:00,840 --> 00:19:05,909
get there first recap of x86 operation

420
00:19:03,990 --> 00:19:08,460
modes so how what modes<font color="#E5E5E5"> can the</font>

421
00:19:05,910 --> 00:19:12,120
processor running it can run in real

422
00:19:08,460 --> 00:19:16,080
mode which is<font color="#E5E5E5"> essentially how Windows</font>

423
00:19:12,120 --> 00:19:17,550
three dot<font color="#E5E5E5"> one and das except for RAM and</font>

424
00:19:16,080 --> 00:19:20,129
essentially you have no concept<font color="#CCCCCC"> of</font>

425
00:19:17,550 --> 00:19:23,460
memory protection or multitasking so

426
00:19:20,130 --> 00:19:24,780
it's pretty<font color="#E5E5E5"> much not secure protective</font>

427
00:19:23,460 --> 00:19:28,080
mode we now have the concept of

428
00:19:24,780 --> 00:19:29,760
privilege levels we have four rings of

429
00:19:28,080 --> 00:19:33,449
privilege though most operating systems

430
00:19:29,760 --> 00:19:35,570
only<font color="#E5E5E5"> used to ring</font><font color="#CCCCCC"> 033 and we also have</font>

431
00:19:33,450 --> 00:19:38,280
the<font color="#E5E5E5"> concept of memory paging and</font>

432
00:19:35,570 --> 00:19:40,550
<font color="#E5E5E5">essentially all operating systems these</font>

433
00:19:38,280 --> 00:19:43,649
days are built in protective mode and

434
00:19:40,550 --> 00:19:46,080
it's the job of the OS load OS loader to

435
00:19:43,650 --> 00:19:47,370
actually transition the mr. the<font color="#CCCCCC"> CPU into</font>

436
00:19:46,080 --> 00:19:50,490
protective mode to then load your

437
00:19:47,370 --> 00:19:53,399
Colonel there's another mode which is

438
00:19:50,490 --> 00:19:55,800
<font color="#E5E5E5">quite</font><font color="#CCCCCC"> interesting</font><font color="#E5E5E5"> the 8086 mode also</font>

439
00:19:53,400 --> 00:19:59,130
called virtual real mode or vm 86 mode

440
00:19:55,800 --> 00:20:00,418
and this essentially is a hack for

441
00:19:59,130 --> 00:20:02,669
compatibility

442
00:20:00,419 --> 00:20:04,919
this lets you run those real mode

443
00:20:02,669 --> 00:20:06,629
applications dos games for example under

444
00:20:04,919 --> 00:20:09,090
<font color="#CCCCCC">windows under</font><font color="#E5E5E5"> your protective mode</font>

445
00:20:06,629 --> 00:20:12,509
environment and it does<font color="#E5E5E5"> this with a few</font>

446
00:20:09,090 --> 00:20:14,369
tricks as far as the old school

447
00:20:12,509 --> 00:20:16,499
real-mode application running on the

448
00:20:14,369 --> 00:20:18,658
windows thinks it really thinks it's

449
00:20:16,499 --> 00:20:21,359
running in real mode so it<font color="#CCCCCC"> will call</font>

450
00:20:18,659 --> 00:20:23,009
interrupts<font color="#E5E5E5"> for example in 10 and it will</font>

451
00:20:21,359 --> 00:20:25,408
access memory thinking<font color="#E5E5E5"> it's accident</font><font color="#CCCCCC"> in</font>

452
00:20:23,009 --> 00:20:28,950
the<font color="#E5E5E5"> physical memory in reality it's</font>

453
00:20:25,409 --> 00:20:30,929
still accessing virtual memory and it's

454
00:20:28,950 --> 00:20:36,419
still accessing<font color="#E5E5E5"> memory within its own</font>

455
00:20:30,929 --> 00:20:39,269
process<font color="#E5E5E5"> but it doesn't know this so the</font>

456
00:20:36,419 --> 00:20:40,619
key points here is that paging memory

457
00:20:39,269 --> 00:20:42,690
paging and memory protection is still

458
00:20:40,619 --> 00:20:47,730
applicable and vm 86 mode really as a

459
00:20:42,690 --> 00:20:51,509
hack so<font color="#E5E5E5"> what</font><font color="#CCCCCC"> i</font><font color="#E5E5E5"> noticed and will deduce</font>

460
00:20:47,730 --> 00:20:54,149
is that when<font color="#CCCCCC"> the windows kernel calls in</font>

461
00:20:51,509 --> 00:20:56,700
10 it must<font color="#E5E5E5"> have switched into the 8086</font>

462
00:20:54,149 --> 00:21:00,418
mode for some compatibility reasons some

463
00:20:56,700 --> 00:21:02,129
hack and sure enough i found an export

464
00:21:00,419 --> 00:21:05,940
in the kernel function in the kernel

465
00:21:02,129 --> 00:21:08,549
called ke 386<font color="#CCCCCC"> call</font><font color="#E5E5E5"> bios and we can see</font>

466
00:21:05,940 --> 00:21:12,149
<font color="#E5E5E5">that it's</font><font color="#CCCCCC"> actually called from the vga</font>

467
00:21:08,549 --> 00:21:14,220
driver vga<font color="#E5E5E5"> dot system basically ke 386</font>

468
00:21:12,149 --> 00:21:17,279
cool<font color="#CCCCCC"> BIOS switch is the processor into</font>

469
00:21:14,220 --> 00:21:19,169
the 8086 mode and doesn't<font color="#E5E5E5"> in 10 and the</font>

470
00:21:17,279 --> 00:21:20,639
<font color="#E5E5E5">reason</font><font color="#CCCCCC"> i</font><font color="#E5E5E5"> think it's doing this i didn't</font>

471
00:21:19,169 --> 00:21:22,230
look into it in great depth but the

472
00:21:20,639 --> 00:21:24,269
reason<font color="#CCCCCC"> it seems to</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> doing this it</font>

473
00:21:22,230 --> 00:21:27,749
seems<font color="#CCCCCC"> to be asking</font><font color="#E5E5E5"> your video card what</font>

474
00:21:24,269 --> 00:21:29,840
legacy video modes do support what what

475
00:21:27,749 --> 00:21:33,379
legacy scream scream<font color="#CCCCCC"> rescue</font><font color="#E5E5E5"> support and</font>

476
00:21:29,840 --> 00:21:37,559
it does this fairly late in the booth

477
00:21:33,379 --> 00:21:41,129
the way it actually switches TV 8086

478
00:21:37,559 --> 00:21:43,230
mode is fairly interesting it Maps<font color="#E5E5E5"> the</font>

479
00:21:41,129 --> 00:21:46,379
assembler code it requires in this case

480
00:21:43,230 --> 00:21:49,590
the m10 you see there into the<font color="#CCCCCC"> cs RSS</font>

481
00:21:46,379 --> 00:21:52,619
process in<font color="#E5E5E5"> windows and which is to be</font>

482
00:21:49,590 --> 00:21:54,539
8086 mode and starts executing it the

483
00:21:52,619 --> 00:21:56,639
problem is off you vent xq to drink 10

484
00:21:54,539 --> 00:21:58,590
how do we get<font color="#CCCCCC"> back into protective mode</font>

485
00:21:56,639 --> 00:22:03,119
and how do we carry on execution from

486
00:21:58,590 --> 00:22:04,649
<font color="#E5E5E5">the colonel from this</font><font color="#CCCCCC"> k 38 386 cool bars</font>

487
00:22:03,119 --> 00:22:06,359
function how do we<font color="#E5E5E5"> actually get back</font>

488
00:22:04,649 --> 00:22:08,879
there after switching into the 8086 mode

489
00:22:06,359 --> 00:22:11,519
and it uses<font color="#E5E5E5"> something which is kind of</font>

490
00:22:08,879 --> 00:22:13,980
strange it's called<font color="#E5E5E5"> a book and it's a</font>

491
00:22:11,519 --> 00:22:16,850
<font color="#E5E5E5">bad operation basically an invite</font>

492
00:22:13,980 --> 00:22:21,120
code so the<font color="#E5E5E5"> CPU starts to execute this</font>

493
00:22:16,850 --> 00:22:23,250
c4 c4<font color="#CCCCCC"> Fe sequence and</font><font color="#E5E5E5"> it basically says</font>

494
00:22:21,120 --> 00:22:25,918
this this is junk this is<font color="#CCCCCC"> natural this</font>

495
00:22:23,250 --> 00:22:27,150
is<font color="#E5E5E5"> not an actual operation and this is</font>

496
00:22:25,919 --> 00:22:29,040
deliberate because the book will

497
00:22:27,150 --> 00:22:31,110
actually then cause an invalid opcode

498
00:22:29,040 --> 00:22:34,370
fault which will cause it to jump back

499
00:22:31,110 --> 00:22:36,870
to colonel the colonel then detects ah

500
00:22:34,370 --> 00:22:38,729
we've come in via the<font color="#E5E5E5"> bop this is a</font>

501
00:22:36,870 --> 00:22:40,830
special<font color="#E5E5E5"> case so</font><font color="#CCCCCC"> I'm going to carry</font><font color="#E5E5E5"> on</font>

502
00:22:38,730 --> 00:22:44,370
from over here<font color="#CCCCCC"> so it's</font><font color="#E5E5E5"> kind of funny</font>

503
00:22:40,830 --> 00:22:49,110
<font color="#CCCCCC">let's look at it first but</font><font color="#E5E5E5"> we can hack</font>

504
00:22:44,370 --> 00:22:51,620
this in<font color="#E5E5E5"> a in a cool way basically as I</font>

505
00:22:49,110 --> 00:22:54,030
said it the<font color="#E5E5E5"> BOP generates an invalid</font>

506
00:22:51,620 --> 00:22:56,370
opcode fault which the colonel detects

507
00:22:54,030 --> 00:22:58,710
the colonel detects that it came from<font color="#CCCCCC"> a</font>

508
00:22:56,370 --> 00:23:02,760
book and the colonel then<font color="#E5E5E5"> uses a</font>

509
00:22:58,710 --> 00:23:04,620
specific structure the<font color="#E5E5E5"> PDM tip for the</font>

510
00:23:02,760 --> 00:23:07,440
information block to actually resume

511
00:23:04,620 --> 00:23:10,350
execution and<font color="#CCCCCC"> the interesting thing is</font>

512
00:23:07,440 --> 00:23:13,790
that<font color="#E5E5E5"> that term structure is in the low</font>

513
00:23:10,350 --> 00:23:17,879
one megabyte of<font color="#CCCCCC"> csr sss process space</font>

514
00:23:13,790 --> 00:23:21,270
what<font color="#E5E5E5"> this means is when we execute the</font>

515
00:23:17,880 --> 00:23:22,799
int<font color="#E5E5E5"> 10 we recruiting our code because</font>

516
00:23:21,270 --> 00:23:25,620
we've already flashed a graphics card

517
00:23:22,799 --> 00:23:27,809
we've hooked in 10<font color="#CCCCCC"> windows</font><font color="#E5E5E5"> has booted</font>

518
00:23:25,620 --> 00:23:31,229
it's called in 10 so it's now executing

519
00:23:27,809 --> 00:23:34,290
a code Envy 8086 mode the name of the

520
00:23:31,230 --> 00:23:36,570
game here is to modify this video tip

521
00:23:34,290 --> 00:23:38,549
structure so that when the colonel

522
00:23:36,570 --> 00:23:41,040
actually returns it's now been<font color="#CCCCCC"> in use</font>

523
00:23:38,549 --> 00:23:43,530
our values to return after we've

524
00:23:41,040 --> 00:23:45,360
modified the vdm tip structure we just

525
00:23:43,530 --> 00:23:47,160
allow the intent function to carry on as

526
00:23:45,360 --> 00:23:50,610
normal retrieve the legacy screen modes

527
00:23:47,160 --> 00:23:52,970
whatever<font color="#E5E5E5"> it's trying to do slight</font>

528
00:23:50,610 --> 00:23:55,290
complication is that we can't modify the

529
00:23:52,970 --> 00:23:57,419
register values in this video tip

530
00:23:55,290 --> 00:23:59,129
context structured directly because the

531
00:23:57,419 --> 00:24:01,260
fault handler looks at certain registers

532
00:23:59,130 --> 00:24:04,820
to see it as a special case to know that

533
00:24:01,260 --> 00:24:07,530
it came through this in 10 special<font color="#E5E5E5"> case</font>

534
00:24:04,820 --> 00:24:10,980
one thing one<font color="#CCCCCC"> register we can modify is</font>

535
00:24:07,530 --> 00:24:12,629
there's a stack frame pointer we can

536
00:24:10,980 --> 00:24:15,000
modify this to make<font color="#CCCCCC"> it point to our</font><font color="#E5E5E5"> own</font>

537
00:24:12,630 --> 00:24:16,559
fake stack frame and ultimately the

538
00:24:15,000 --> 00:24:18,540
colonel will use a stack frame to work

539
00:24:16,559 --> 00:24:21,720
out where to return to the parent

540
00:24:18,540 --> 00:24:24,570
function and when it does so<font color="#CCCCCC"> it returns</font>

541
00:24:21,720 --> 00:24:26,700
to<font color="#CCCCCC"> our code and so the long and short of</font>

542
00:24:24,570 --> 00:24:27,928
it is having gone from reflashing

543
00:24:26,700 --> 00:24:30,690
somebody's graphics cards

544
00:24:27,929 --> 00:24:34,159
and putting<font color="#E5E5E5"> the the in 10</font><font color="#CCCCCC"> hooking</font>

545
00:24:30,690 --> 00:24:36,360
<font color="#CCCCCC">ourselves we have the ability to execute</font>

546
00:24:34,159 --> 00:24:38,429
<font color="#E5E5E5">standard code</font><font color="#CCCCCC"> 32 bit protective mode</font>

547
00:24:36,360 --> 00:24:43,619
code in the<font color="#E5E5E5"> Windows kernel as</font><font color="#CCCCCC"> its</font>

548
00:24:38,429 --> 00:24:46,139
booting up I guess I've explained us

549
00:24:43,619 --> 00:24:48,178
very quickly it takes some going<font color="#CCCCCC"> throw</font>

550
00:24:46,139 --> 00:24:51,389
<font color="#E5E5E5">it's only took some tinkering to get it</font>

551
00:24:48,179 --> 00:24:55,559
working the takeaway point here is that

552
00:24:51,389 --> 00:24:56,729
E I used in 15 I used in 10 you can

553
00:24:55,559 --> 00:24:58,830
probably<font color="#CCCCCC"> use a whole host of other</font>

554
00:24:56,730 --> 00:25:01,049
interrupts the point is is that the OS

555
00:24:58,830 --> 00:25:03,509
lo that is dependent on<font color="#CCCCCC"> the services</font>

556
00:25:01,049 --> 00:25:05,970
exposed by the<font color="#CCCCCC"> BIOS via the interrupt</font>

557
00:25:03,509 --> 00:25:07,919
vector table so any services it pulls we

558
00:25:05,970 --> 00:25:10,679
can<font color="#E5E5E5"> probably hook and do something funky</font>

559
00:25:07,919 --> 00:25:12,330
to end up<font color="#E5E5E5"> getting code execution it's</font>

560
00:25:10,679 --> 00:25:14,309
basically just a dependency the OS

561
00:25:12,330 --> 00:25:19,649
loader cannot do anything on its own it

562
00:25:14,309 --> 00:25:23,690
needs to use this<font color="#CCCCCC"> ivt once i got code</font>

563
00:25:19,649 --> 00:25:26,758
execution and<font color="#E5E5E5"> i demonstrated a simple</font>

564
00:25:23,690 --> 00:25:28,919
the hello world of rootkit switch on

565
00:25:26,759 --> 00:25:34,679
<font color="#E5E5E5">windows is the one</font><font color="#CCCCCC"> byte patch to disable</font>

566
00:25:28,919 --> 00:25:36,570
all access control after that I made it

567
00:25:34,679 --> 00:25:39,029
a bit neater I start removing hard-coded

568
00:25:36,570 --> 00:25:41,789
addresses and you can think<font color="#E5E5E5"> of this like</font>

569
00:25:39,029 --> 00:25:44,129
an exploit where your first pass of it

570
00:25:41,789 --> 00:25:45,360
has some hard-coded addresses in which

571
00:25:44,129 --> 00:25:46,799
means that<font color="#E5E5E5"> only works on a particular</font>

572
00:25:45,360 --> 00:25:48,869
service pack<font color="#E5E5E5"> a particular version of</font>

573
00:25:46,799 --> 00:25:50,340
Linux and then<font color="#E5E5E5"> your later revisions you</font>

574
00:25:48,869 --> 00:25:52,230
want to try and remove all dependencies

575
00:25:50,340 --> 00:25:54,418
on the system so that it<font color="#E5E5E5"> can just run</font>

576
00:25:52,230 --> 00:25:57,360
automatically work out where the exports

577
00:25:54,419 --> 00:25:59,580
are at me it's that kind of thing those

578
00:25:57,360 --> 00:26:01,469
who played around with adding some

579
00:25:59,580 --> 00:26:03,960
compression at the start so<font color="#E5E5E5"> I have like</font>

580
00:26:01,470 --> 00:26:06,269
a little decompressor function which

581
00:26:03,960 --> 00:26:10,499
then allows me to compress feed the bulk

582
00:26:06,269 --> 00:26:11,580
of the rootkit because you may ask well

583
00:26:10,499 --> 00:26:15,869
how much space do you<font color="#E5E5E5"> have on these</font>

584
00:26:11,580 --> 00:26:17,610
<font color="#E5E5E5">cards the answer is obviously the</font>

585
00:26:15,869 --> 00:26:19,439
vendors got their code on the card so

586
00:26:17,610 --> 00:26:20,969
you need to kind of either get<font color="#E5E5E5"> rid of</font>

587
00:26:19,440 --> 00:26:22,110
the vendors code which is<font color="#E5E5E5"> probably not</font>

588
00:26:20,970 --> 00:26:24,539
an option because<font color="#E5E5E5"> it's probably there</font>

589
00:26:22,110 --> 00:26:26,939
for a reason if you<font color="#E5E5E5"> just wiped your VGA</font>

590
00:26:24,539 --> 00:26:28,769
bios off your graphics card your<font color="#E5E5E5"> machine</font>

591
00:26:26,940 --> 00:26:30,419
may still actually boot and when it<font color="#E5E5E5"> gets</font>

592
00:26:28,769 --> 00:26:32,159
to say windows or<font color="#E5E5E5"> linux it would be fine</font>

593
00:26:30,419 --> 00:26:35,970
but<font color="#E5E5E5"> you just wouldn't see anything until</font>

594
00:26:32,159 --> 00:26:37,440
then so removing their carried it

595
00:26:35,970 --> 00:26:38,850
probably isn't a good reason even if

596
00:26:37,440 --> 00:26:41,019
even if the machine would build boot

597
00:26:38,850 --> 00:26:43,820
it's not very stealthy obviously

598
00:26:41,019 --> 00:26:45,710
you could potentially<font color="#E5E5E5"> shrink their code</font>

599
00:26:43,820 --> 00:26:47,570
you could<font color="#E5E5E5"> maybe</font><font color="#CCCCCC"> dekhe maybe compress</font>

600
00:26:45,710 --> 00:26:49,330
their code and put your compressor at

601
00:26:47,570 --> 00:26:51,408
the<font color="#E5E5E5"> starter to free up some more space</font>

602
00:26:49,330 --> 00:26:54,549
the reality is you're<font color="#E5E5E5"> going to have</font>

603
00:26:51,409 --> 00:26:58,340
between about one and five kilobytes on

604
00:26:54,549 --> 00:27:02,179
every every rom I flipped app so

605
00:26:58,340 --> 00:27:04,580
compression may well be required to ride

606
00:27:02,179 --> 00:27:07,250
say to give you an idea of rootkit size

607
00:27:04,580 --> 00:27:09,710
you<font color="#E5E5E5"> can write a simple windows</font>

608
00:27:07,250 --> 00:27:14,659
processing hiding rootkit that takes

609
00:27:09,710 --> 00:27:17,779
<font color="#CCCCCC">about one on the</font><font color="#E5E5E5"> haas k i also wanted to</font>

610
00:27:14,659 --> 00:27:20,480
<font color="#E5E5E5">provide some means of updating it so I</font>

611
00:27:17,779 --> 00:27:22,159
came up<font color="#E5E5E5"> the idea of well if</font><font color="#CCCCCC"> we can just</font>

612
00:27:20,480 --> 00:27:24,350
reflash the card with<font color="#CCCCCC"> the with the</font><font color="#E5E5E5"> new</font>

613
00:27:22,159 --> 00:27:26,269
code how do we<font color="#E5E5E5"> actually go ahead and</font><font color="#CCCCCC"> get</font>

614
00:27:24,350 --> 00:27:28,129
the new code how do we get the update my

615
00:27:26,269 --> 00:27:30,590
first pass on<font color="#E5E5E5"> Windows was we use t VI</font>

616
00:27:28,129 --> 00:27:32,658
which is the networking layer in the

617
00:27:30,590 --> 00:27:36,678
kernel to go off and you<font color="#CCCCCC"> know make a</font>

618
00:27:32,659 --> 00:27:39,889
HTTP request or whatever but<font color="#E5E5E5"> that's not</font>

619
00:27:36,679 --> 00:27:43,159
very reliable<font color="#E5E5E5"> because if you have a</font>

620
00:27:39,889 --> 00:27:44,809
personal firewall anything that's also

621
00:27:43,159 --> 00:27:47,629
kernel level that's restricting network

622
00:27:44,809 --> 00:27:50,379
traffic out it could get caught so I

623
00:27:47,629 --> 00:27:52,820
came<font color="#E5E5E5"> up with a new objective which was</font>

624
00:27:50,379 --> 00:27:59,110
let's<font color="#E5E5E5"> try and update our rootkit</font>

625
00:27:52,820 --> 00:28:02,000
pre-boot this brings me<font color="#E5E5E5"> on to pixie</font>

626
00:27:59,110 --> 00:28:04,129
pixie is<font color="#E5E5E5"> Intel's pre-boot environment</font>

627
00:28:02,000 --> 00:28:06,830
which probably most<font color="#E5E5E5"> of your notebooks</font>

628
00:28:04,129 --> 00:28:09,080
have and most that's desktop machines

629
00:28:06,830 --> 00:28:13,399
also have essentially allow use allows

630
00:28:09,080 --> 00:28:15,678
you to from the CMOS setup screen select

631
00:28:13,399 --> 00:28:18,189
network as the device you<font color="#E5E5E5"> want to boot</font>

632
00:28:15,679 --> 00:28:21,049
off and boot off the<font color="#E5E5E5"> network to</font>

633
00:28:18,190 --> 00:28:23,450
essentially load your machine as a

634
00:28:21,049 --> 00:28:26,120
diskless workstation or to go to the

635
00:28:23,450 --> 00:28:27,259
machine or to actually reimage the

636
00:28:26,120 --> 00:28:31,309
machine like rebuild the<font color="#CCCCCC"> machine</font>

637
00:28:27,259 --> 00:28:35,169
entirely and so essentially all pixie is

638
00:28:31,309 --> 00:28:38,570
is an expansion rom on your network card

639
00:28:35,169 --> 00:28:41,570
and this expansion rom implements some

640
00:28:38,570 --> 00:28:44,389
core protocols<font color="#CCCCCC"> dhcp so we can</font><font color="#E5E5E5"> get a mac</font>

641
00:28:41,570 --> 00:28:47,120
address and then<font color="#E5E5E5"> tftp so that we can ask</font>

642
00:28:44,389 --> 00:28:50,539
a fixie server to actually send us an

643
00:28:47,120 --> 00:28:52,729
image to execute and<font color="#E5E5E5"> pixi used to be</font>

644
00:28:50,539 --> 00:28:53,539
implemented<font color="#CCCCCC"> as one big roms that just</font>

645
00:28:52,730 --> 00:28:55,369
did everything

646
00:28:53,539 --> 00:28:57,350
but the way vendor<font color="#E5E5E5"> seemed to go these</font>

647
00:28:55,369 --> 00:29:00,320
days is they kind of made it a bit nicer

648
00:28:57,350 --> 00:29:02,600
they split it into a series of roms so

649
00:29:00,320 --> 00:29:05,960
<font color="#E5E5E5">I'll explain how they've done it in a</font>

650
00:29:02,600 --> 00:29:09,049
second the idea being that as I said

651
00:29:05,960 --> 00:29:11,029
<font color="#E5E5E5">these rooms are simply x86 code it</font>

652
00:29:09,049 --> 00:29:12,499
doesn't<font color="#E5E5E5"> matter whether the pixi roms are</font>

653
00:29:11,029 --> 00:29:14,450
really on the network card or they're in

654
00:29:12,499 --> 00:29:16,159
<font color="#E5E5E5">your system</font><font color="#CCCCCC"> bios it really doesn't</font>

655
00:29:14,450 --> 00:29:17,779
<font color="#E5E5E5">matter so by splitting into these</font>

656
00:29:16,159 --> 00:29:19,609
modular arms we can actually<font color="#CCCCCC"> move the</font>

657
00:29:17,779 --> 00:29:23,479
code around put it on other cards put it

658
00:29:19,609 --> 00:29:26,149
in let the<font color="#E5E5E5"> system BIOS it's actually</font>

659
00:29:23,479 --> 00:29:29,690
quite easy to modularize pixie here are

660
00:29:26,149 --> 00:29:32,689
the main components we have<font color="#CCCCCC"> undie which</font>

661
00:29:29,690 --> 00:29:35,239
is the<font color="#E5E5E5"> lowest level API and undie is the</font>

662
00:29:32,690 --> 00:29:37,009
kind of card specific API that says how

663
00:29:35,239 --> 00:29:38,419
do<font color="#E5E5E5"> I actually send a frame onto the onto</font>

664
00:29:37,009 --> 00:29:43,429
<font color="#E5E5E5">the network and how to actually receive</font>

665
00:29:38,419 --> 00:29:45,080
one next we have pre-boot<font color="#E5E5E5"> API which is</font>

666
00:29:43,429 --> 00:29:47,960
responsible for housekeeping it

667
00:29:45,080 --> 00:29:50,418
initializes the undie rom and it also

668
00:29:47,960 --> 00:29:52,729
starts executing the base code and the

669
00:29:50,419 --> 00:29:54,320
base code is essentially the<font color="#CCCCCC"> pixi</font>

670
00:29:52,729 --> 00:29:56,450
application that will say you<font color="#E5E5E5"> know</font>

671
00:29:54,320 --> 00:30:00,019
welcome to<font color="#E5E5E5"> intel's boot manager looking</font>

672
00:29:56,450 --> 00:30:03,799
for dhcp server whatever we have a tftp

673
00:30:00,019 --> 00:30:06,649
and UDP<font color="#CCCCCC"> api</font><font color="#E5E5E5"> and kind of self-explanatory</font>

674
00:30:03,799 --> 00:30:09,259
just simple<font color="#CCCCCC"> api for sending and</font>

675
00:30:06,649 --> 00:30:10,668
receiving and then we have the base code

676
00:30:09,259 --> 00:30:12,229
which as I said is the actual

677
00:30:10,669 --> 00:30:17,359
application we<font color="#E5E5E5"> that's going to make use</font>

678
00:30:12,229 --> 00:30:19,970
of those three AP<font color="#CCCCCC"> is so we can abuse</font>

679
00:30:17,359 --> 00:30:22,428
pixie because pixie as I said it's<font color="#CCCCCC"> just</font>

680
00:30:19,970 --> 00:30:24,529
a rom on a network card chances are we

681
00:30:22,429 --> 00:30:28,580
can reflash that<font color="#CCCCCC"> wrong so we can</font><font color="#E5E5E5"> rewrite</font>

682
00:30:24,529 --> 00:30:30,559
<font color="#E5E5E5">the image so we can take Intel's</font>

683
00:30:28,580 --> 00:30:33,590
<font color="#E5E5E5">interval image on</font><font color="#CCCCCC"> your on your network</font>

684
00:30:30,559 --> 00:30:35,269
card we can pull it off the card we can

685
00:30:33,590 --> 00:30:38,509
patch it we can put it<font color="#E5E5E5"> back on the card</font>

686
00:30:35,269 --> 00:30:42,379
<font color="#CCCCCC">and we can</font><font color="#E5E5E5"> hook the base code so that</font>

687
00:30:38,509 --> 00:30:44,509
instead<font color="#E5E5E5"> of going off and executing the</font>

688
00:30:42,379 --> 00:30:46,459
standard<font color="#CCCCCC"> intel boot application that</font>

689
00:30:44,509 --> 00:30:51,019
says you know now loading image off

690
00:30:46,460 --> 00:30:53,119
server stealthily it goes to your<font color="#CCCCCC"> route</font>

691
00:30:51,019 --> 00:30:56,779
kick controller and austere do have an

692
00:30:53,119 --> 00:31:00,949
update can i download it the way we're

693
00:30:56,779 --> 00:31:02,800
actually going to do<font color="#CCCCCC"> this is firstly we</font>

694
00:31:00,950 --> 00:31:05,830
need to hook in<font color="#CCCCCC"> nineteen</font>

695
00:31:02,800 --> 00:31:07,899
in<font color="#CCCCCC"> nineteen is essentially when the</font>

696
00:31:05,830 --> 00:31:09,370
system comes out with post the power-on

697
00:31:07,900 --> 00:31:11,230
self-test and it's actually<font color="#CCCCCC"> going to</font>

698
00:31:09,370 --> 00:31:18,340
start loading something it calls in line

699
00:31:11,230 --> 00:31:22,540
team in line team essentially consults

700
00:31:18,340 --> 00:31:24,159
the IPL which is the list of the boot

701
00:31:22,540 --> 00:31:26,889
devices in the order you selected in the

702
00:31:24,160 --> 00:31:30,160
CMOS so that it knows which device to<font color="#E5E5E5"> go</font>

703
00:31:26,890 --> 00:31:31,930
and boot by hooking in<font color="#E5E5E5"> nineteen it</font>

704
00:31:30,160 --> 00:31:33,340
simply means<font color="#E5E5E5"> that regardless of whether</font>

705
00:31:31,930 --> 00:31:35,800
you said you want your c drive to boot

706
00:31:33,340 --> 00:31:38,230
first your network drive your cd-rom if

707
00:31:35,800 --> 00:31:39,820
we<font color="#E5E5E5"> hooked in nineteen we always win we</font>

708
00:31:38,230 --> 00:31:43,450
always<font color="#E5E5E5"> get our code executing before</font>

709
00:31:39,820 --> 00:31:47,530
anyone else so we get our code executing

710
00:31:43,450 --> 00:31:51,220
and what we do<font color="#E5E5E5"> is we call beyond the IPL</font>

711
00:31:47,530 --> 00:31:53,680
to initialize the network layer and we

712
00:31:51,220 --> 00:31:56,520
call our base code and<font color="#E5E5E5"> the hacked up</font>

713
00:31:53,680 --> 00:31:59,410
base code to text<font color="#CCCCCC"> that in this case</font><font color="#E5E5E5"> it's</font>

714
00:31:56,520 --> 00:32:01,570
a rootkit coming from in<font color="#E5E5E5"> nineteen that's</font>

715
00:31:59,410 --> 00:32:04,030
calling it and we<font color="#E5E5E5"> actually end up</font>

716
00:32:01,570 --> 00:32:05,800
executing our alternate payload and that

717
00:32:04,030 --> 00:32:11,500
will turn that payload now has access to

718
00:32:05,800 --> 00:32:13,780
a tftp UDP<font color="#CCCCCC"> dhcp api and so all this is</font>

719
00:32:11,500 --> 00:32:15,760
happening obviously<font color="#CCCCCC"> before your OS lo</font>

720
00:32:13,780 --> 00:32:19,660
that has got control<font color="#E5E5E5"> and essentially at</font>

721
00:32:15,760 --> 00:32:23,230
this point we can do dhcp 50p UDP so we

722
00:32:19,660 --> 00:32:24,760
can fire off a UDP packet say disguised

723
00:32:23,230 --> 00:32:26,490
as a<font color="#CCCCCC"> dns packet to</font><font color="#E5E5E5"> our route kick</font>

724
00:32:24,760 --> 00:32:29,200
controller saying do<font color="#E5E5E5"> you have an update</font>

725
00:32:26,490 --> 00:32:31,180
if it says yes we can<font color="#E5E5E5"> t ftp</font><font color="#CCCCCC"> the update</font>

726
00:32:29,200 --> 00:32:33,070
into memory we can either then flash it

727
00:32:31,180 --> 00:32:39,190
onto the<font color="#E5E5E5"> card or we can just execute it</font>

728
00:32:33,070 --> 00:32:40,600
straight from there as<font color="#CCCCCC"> I said the kind</font>

729
00:32:39,190 --> 00:32:43,990
of way you would do that in the field is

730
00:32:40,600 --> 00:32:47,020
you would take the existing<font color="#E5E5E5"> fixie ROM</font>

731
00:32:43,990 --> 00:32:48,640
Pat chip put it back on I didn't have

732
00:32:47,020 --> 00:32:50,379
<font color="#E5E5E5">time to do that nor did I particularly</font>

733
00:32:48,640 --> 00:32:53,980
want<font color="#E5E5E5"> to start disassembling Intel's code</font>

734
00:32:50,380 --> 00:32:56,110
so i looked at easter boot ether boot is

735
00:32:53,980 --> 00:32:59,110
an<font color="#E5E5E5"> open source pics iran creation tool</font>

736
00:32:56,110 --> 00:33:02,350
and it supports pretty much every

737
00:32:59,110 --> 00:33:04,689
network card going and it also supports

738
00:33:02,350 --> 00:33:07,030
tons of protocols above and beyond the

739
00:33:04,690 --> 00:33:09,640
<font color="#E5E5E5">pixie spec and so they even have a</font>

740
00:33:07,030 --> 00:33:11,940
simple<font color="#CCCCCC"> tisa piece back so</font><font color="#E5E5E5"> only you can</font>

741
00:33:09,640 --> 00:33:15,010
build HTTP on top of that

742
00:33:11,940 --> 00:33:16,690
essentially once you've<font color="#CCCCCC"> compartir for</font>

743
00:33:15,010 --> 00:33:18,220
<font color="#CCCCCC">ether boot and configured it it will</font>

744
00:33:16,690 --> 00:33:21,220
dump you a rom that you can<font color="#E5E5E5"> then just</font>

745
00:33:18,220 --> 00:33:23,140
burn straight on to your network card so

746
00:33:21,220 --> 00:33:26,890
because it's<font color="#CCCCCC"> open source it was nice and</font>

747
00:33:23,140 --> 00:33:29,080
<font color="#CCCCCC">easy to hack up if you use this it would</font>

748
00:33:26,890 --> 00:33:30,909
be easy to detect that it was<font color="#E5E5E5"> East the</font>

749
00:33:29,080 --> 00:33:34,270
boot and i'll<font color="#E5E5E5"> talk about detection a bit</font>

750
00:33:30,909 --> 00:33:35,770
later though we could make it<font color="#CCCCCC"> harder as</font>

751
00:33:34,270 --> 00:33:38,350
soon as<font color="#E5E5E5"> i got it downloading if the boot</font>

752
00:33:35,770 --> 00:33:40,900
the first thing I did is like comment

753
00:33:38,350 --> 00:33:42,610
out all of the most options and coming

754
00:33:40,900 --> 00:33:45,340
<font color="#E5E5E5">out anything that did any output to the</font>

755
00:33:42,610 --> 00:33:47,678
screen so basically<font color="#E5E5E5"> when when my ether</font>

756
00:33:45,340 --> 00:33:49,178
bootrom kicks in at boots you see

757
00:33:47,679 --> 00:33:51,010
nothing<font color="#E5E5E5"> and it's just sent that packet</font>

758
00:33:49,179 --> 00:33:56,740
and already<font color="#E5E5E5"> done</font><font color="#CCCCCC"> everything by the time</font>

759
00:33:51,010 --> 00:33:58,510
you're isolated kicks in so this<font color="#CCCCCC"> is</font>

760
00:33:56,740 --> 00:34:01,419
essentially how you modify if the boots

761
00:33:58,510 --> 00:34:02,950
as<font color="#CCCCCC"> I said</font><font color="#E5E5E5"> we have</font><font color="#CCCCCC"> to hook the IPO by PL</font>

762
00:34:01,419 --> 00:34:06,250
table in<font color="#E5E5E5"> nineteen so that we definitely</font>

763
00:34:02,950 --> 00:34:09,129
<font color="#E5E5E5">have control of boots we send out a UDP</font>

764
00:34:06,250 --> 00:34:11,320
heartbeat disguised as dns we check the

765
00:34:09,129 --> 00:34:13,598
response if the controller indicates

766
00:34:11,320 --> 00:34:18,190
there's an<font color="#CCCCCC"> update we downloaded by tftp</font>

767
00:34:13,599 --> 00:34:19,389
and then we continue boot as normal some

768
00:34:18,190 --> 00:34:22,000
improvements that could be made

769
00:34:19,389 --> 00:34:23,440
obviously we could encrypt it and we

770
00:34:22,000 --> 00:34:25,089
could maybe sign our code so<font color="#CCCCCC"> we know it</font>

771
00:34:23,440 --> 00:34:28,540
hasn't been tampered with kind of a

772
00:34:25,089 --> 00:34:31,330
nicety but not required compression

773
00:34:28,540 --> 00:34:34,000
compression<font color="#E5E5E5"> or like</font><font color="#CCCCCC"> delta updates would</font>

774
00:34:31,330 --> 00:34:35,440
be a good<font color="#E5E5E5"> one and this final one showed</font>

775
00:34:34,000 --> 00:34:38,320
you with updates is actually a more<font color="#E5E5E5"> of a</font>

776
00:34:35,440 --> 00:34:40,359
realistic one you may not want to<font color="#E5E5E5"> send</font>

777
00:34:38,320 --> 00:34:44,080
out this hot beat packet every time the

778
00:34:40,359 --> 00:34:46,418
machine boots so from our code we can

779
00:34:44,080 --> 00:34:50,409
check<font color="#E5E5E5"> the real time clock and maybe we</font>

780
00:34:46,418 --> 00:34:55,210
want to update every month or every week

781
00:34:50,409 --> 00:34:59,720
or after every patch tuesday or you know

782
00:34:55,210 --> 00:35:02,480
suitable time an interesting<font color="#CCCCCC"> point</font><font color="#E5E5E5"> I</font>

783
00:34:59,720 --> 00:35:04,970
touched on<font color="#CCCCCC"> earlier is expansion roms all</font>

784
00:35:02,480 --> 00:35:08,800
they are is x86 code that is copied from

785
00:35:04,970 --> 00:35:12,169
<font color="#CCCCCC">the card to ram and executed so</font><font color="#E5E5E5"> really</font>

786
00:35:08,800 --> 00:35:16,400
it doesn't matter what the what the code

787
00:35:12,170 --> 00:35:18,590
does on each card as in just because

788
00:35:16,400 --> 00:35:20,240
<font color="#E5E5E5">it's a network card doesn't mean we</font><font color="#CCCCCC"> need</font>

789
00:35:18,590 --> 00:35:22,280
to store the<font color="#E5E5E5"> pixi code on the network</font>

790
00:35:20,240 --> 00:35:25,879
card we can store the<font color="#E5E5E5"> pixi code on your</font>

791
00:35:22,280 --> 00:35:27,230
graphics card if you've got space we

792
00:35:25,880 --> 00:35:30,050
could put<font color="#E5E5E5"> it in the system</font><font color="#CCCCCC"> bios if we're</font>

793
00:35:27,230 --> 00:35:32,420
able to flash it and we<font color="#E5E5E5"> could even just</font>

794
00:35:30,050 --> 00:35:34,760
make a distributed rootkit that would

795
00:35:32,420 --> 00:35:41,120
basically we can split it across

796
00:35:34,760 --> 00:35:46,670
multiple cards so<font color="#E5E5E5"> I now talk about</font>

797
00:35:41,120 --> 00:35:49,400
detection and prevention so the<font color="#E5E5E5"> first</font>

798
00:35:46,670 --> 00:35:51,380
thing to remember is that as I keep

799
00:35:49,400 --> 00:35:54,440
saying these these roms are<font color="#E5E5E5"> copied to</font>

800
00:35:51,380 --> 00:35:57,170
ram and they have a signature in the

801
00:35:54,440 --> 00:35:59,750
checksum so why don't we<font color="#CCCCCC"> just scan</font>

802
00:35:57,170 --> 00:36:02,510
physical memory looking for this

803
00:35:59,750 --> 00:36:04,700
signature and basically dumped every<font color="#E5E5E5"> ron</font>

804
00:36:02,510 --> 00:36:08,270
we find and then do<font color="#CCCCCC"> some analysis on</font>

805
00:36:04,700 --> 00:36:11,870
them<font color="#CCCCCC"> on windows we can access device</font>

806
00:36:08,270 --> 00:36:14,270
physical memory<font color="#CCCCCC"> microsoft have actually</font>

807
00:36:11,870 --> 00:36:20,120
closed off access to that on win2k3 sp1

808
00:36:14,270 --> 00:36:21,410
on<font color="#E5E5E5"> linux we could use k mem you probably</font>

809
00:36:20,120 --> 00:36:22,970
<font color="#E5E5E5">want to be doing this from Colonel</font>

810
00:36:21,410 --> 00:36:24,920
anyway because if you suspect you have a

811
00:36:22,970 --> 00:36:27,080
rootkit<font color="#E5E5E5"> you don't want to be operating</font>

812
00:36:24,920 --> 00:36:28,880
in user mode to give<font color="#CCCCCC"> yourself any chance</font>

813
00:36:27,080 --> 00:36:34,850
of detecting it you have to be operating

814
00:36:28,880 --> 00:36:36,770
in<font color="#E5E5E5"> kernel once we've actually captured</font>

815
00:36:34,850 --> 00:36:39,440
all the roms out of memory how do<font color="#E5E5E5"> we</font>

816
00:36:36,770 --> 00:36:42,980
<font color="#E5E5E5">know if we have a root cap there's some</font>

817
00:36:39,440 --> 00:36:45,710
basic questions to ask so firstly what

818
00:36:42,980 --> 00:36:47,840
interrupts does the ROM hook if we

819
00:36:45,710 --> 00:36:49,970
identify<font color="#CCCCCC"> the ROM as the one that came</font>

820
00:36:47,840 --> 00:36:52,550
from my graphics card and it hooks in 10

821
00:36:49,970 --> 00:36:54,200
of the video interrupt you<font color="#CCCCCC"> know that's</font>

822
00:36:52,550 --> 00:36:56,690
<font color="#CCCCCC">fine that's probably not suspicious if</font>

823
00:36:54,200 --> 00:36:58,399
however our network card is hooking the

824
00:36:56,690 --> 00:37:02,500
video interrupt that's kind<font color="#E5E5E5"> of</font>

825
00:36:58,400 --> 00:37:05,120
suspicious does it contain 32-bit code

826
00:37:02,500 --> 00:37:07,520
these expansion<font color="#E5E5E5"> runs are executed while</font>

827
00:37:05,120 --> 00:37:07,819
the processor is still in 16-bit real

828
00:37:07,520 --> 00:37:09,530
mode

829
00:37:07,820 --> 00:37:11,570
so if you actually<font color="#E5E5E5"> just assemble it and</font>

830
00:37:09,530 --> 00:37:13,310
with something<font color="#E5E5E5"> like</font><font color="#CCCCCC"> ID a pro</font><font color="#E5E5E5"> and I da</font>

831
00:37:11,570 --> 00:37:15,170
<font color="#E5E5E5">say is left i found this trunk it looks</font>

832
00:37:13,310 --> 00:37:18,620
like 32 bit protective mode code that's

833
00:37:15,170 --> 00:37:21,140
probably suspicious in the case of ether

834
00:37:18,620 --> 00:37:23,810
boots it may<font color="#CCCCCC"> not be suspicious because</font>

835
00:37:21,140 --> 00:37:26,720
ether boot actually swaps in and out of

836
00:37:23,810 --> 00:37:28,130
<font color="#E5E5E5">real and protective mode but depending</font>

837
00:37:26,720 --> 00:37:29,259
on what the<font color="#CCCCCC"> ROM is it's probably</font>

838
00:37:28,130 --> 00:37:34,450
<font color="#E5E5E5">something that should you should</font>

839
00:37:29,260 --> 00:37:38,690
flaggers<font color="#CCCCCC"> alamba does it reference any</font>

840
00:37:34,450 --> 00:37:40,640
particular addresses<font color="#CCCCCC"> it's do we have</font>

841
00:37:38,690 --> 00:37:43,460
things<font color="#E5E5E5"> like the base address of the</font>

842
00:37:40,640 --> 00:37:46,549
colonel anything that might look

843
00:37:43,460 --> 00:37:48,320
suspicious and lastly kind of the

844
00:37:46,550 --> 00:37:50,360
catch-all what does the ROM actually do

845
00:37:48,320 --> 00:37:51,530
so if you weren't willing to<font color="#E5E5E5"> step</font>

846
00:37:50,360 --> 00:37:53,090
through the disassembly and actually

847
00:37:51,530 --> 00:37:56,740
<font color="#E5E5E5">work out what the hell things doing is</font>

848
00:37:53,090 --> 00:38:00,080
probably a<font color="#CCCCCC"> good way of detecting it</font>

849
00:37:56,740 --> 00:38:02,359
slight<font color="#CCCCCC"> problem often the ROM we dump</font>

850
00:38:00,080 --> 00:38:04,730
<font color="#E5E5E5">from memory isn't quite the ROM that's</font>

851
00:38:02,360 --> 00:38:07,550
on the card in the first place and this

852
00:38:04,730 --> 00:38:09,770
is a deliberate and basically the

853
00:38:07,550 --> 00:38:11,840
rationale behind<font color="#E5E5E5"> this is that the card</font>

854
00:38:09,770 --> 00:38:13,790
so the rom contains some initialization

855
00:38:11,840 --> 00:38:16,190
code which you're only going<font color="#E5E5E5"> to ever</font>

856
00:38:13,790 --> 00:38:19,220
execute when the system boots sorry when

857
00:38:16,190 --> 00:38:20,780
the system is powered on so really<font color="#E5E5E5"> once</font>

858
00:38:19,220 --> 00:38:23,750
that<font color="#CCCCCC"> codes been</font><font color="#E5E5E5"> executed we can throw</font>

859
00:38:20,780 --> 00:38:26,030
the way and what you'll find is that a

860
00:38:23,750 --> 00:38:27,980
lot of<font color="#E5E5E5"> vendors actually do this so</font>

861
00:38:26,030 --> 00:38:30,830
they'll execute the unit code which will

862
00:38:27,980 --> 00:38:33,500
at the very last thing it will do is fix

863
00:38:30,830 --> 00:38:36,110
up the image by rewriting the signature

864
00:38:33,500 --> 00:38:39,140
much later down and recomputing the

865
00:38:36,110 --> 00:38:41,900
checksum and basically indicating to<font color="#CCCCCC"> the</font>

866
00:38:39,140 --> 00:38:44,000
to the bios that any memory preceding

867
00:38:41,900 --> 00:38:45,830
that signature is now valid to be

868
00:38:44,000 --> 00:38:49,880
overwritten with something else another

869
00:38:45,830 --> 00:38:51,950
rom<font color="#CCCCCC"> for example so to be thorough just</font>

870
00:38:49,880 --> 00:38:55,870
simply<font color="#E5E5E5"> scanning physical memory it won't</font>

871
00:38:51,950 --> 00:38:55,870
capture the full contents of the roms

872
00:38:56,470 --> 00:39:02,359
there's a way around this and basically

873
00:38:59,510 --> 00:39:03,770
if the if the bios is<font color="#E5E5E5"> able to execute</font>

874
00:39:02,360 --> 00:39:06,080
instructions to dump the<font color="#CCCCCC"> ROM off the</font>

875
00:39:03,770 --> 00:39:09,320
card then so are we and this is a

876
00:39:06,080 --> 00:39:11,299
well-documented chapter in the pc i spec

877
00:39:09,320 --> 00:39:14,420
you basically<font color="#E5E5E5"> do</font><font color="#CCCCCC"> i owe</font><font color="#E5E5E5"> to the</font>

878
00:39:11,300 --> 00:39:15,710
configuration space and you can tell it

879
00:39:14,420 --> 00:39:17,349
to<font color="#E5E5E5"> double the</font><font color="#CCCCCC"> rom into a particular</font>

880
00:39:15,710 --> 00:39:24,460
location and physical memory

881
00:39:17,349 --> 00:39:26,769
full rom um difficult to difficulties in

882
00:39:24,460 --> 00:39:28,720
protection<font color="#E5E5E5"> well this the</font><font color="#CCCCCC"> first one is</font>

883
00:39:26,769 --> 00:39:32,729
kind<font color="#E5E5E5"> of a rootkit detection point in</font>

884
00:39:28,720 --> 00:39:34,808
general the nature of rootkits are that

885
00:39:32,729 --> 00:39:36,578
signature checking is insufficient

886
00:39:34,809 --> 00:39:38,349
because a rootkit has probably been

887
00:39:36,579 --> 00:39:41,710
written for<font color="#E5E5E5"> a very specific purpose and</font>

888
00:39:38,349 --> 00:39:46,239
the chances are your AV software has

889
00:39:41,710 --> 00:39:51,220
never seen it before then we have<font color="#E5E5E5"> the</font>

890
00:39:46,239 --> 00:39:52,989
whole IDs the story the whole

891
00:39:51,220 --> 00:39:56,379
polymorphism<font color="#E5E5E5"> Packer</font><font color="#CCCCCC"> Packers</font>

892
00:39:52,989 --> 00:39:59,410
self-modifying code as Datagram and

893
00:39:56,380 --> 00:40:01,660
talked about essentially we can make

894
00:39:59,410 --> 00:40:04,720
this thing hard to detect and if you

895
00:40:01,660 --> 00:40:07,089
know if we're planning on route<font color="#CCCCCC"> getting</font>

896
00:40:04,720 --> 00:40:08,200
an entire<font color="#E5E5E5"> corporation we can make every</font>

897
00:40:07,089 --> 00:40:10,749
rootkit live different even though

898
00:40:08,200 --> 00:40:12,700
<font color="#E5E5E5">they're the same and basically exactly</font>

899
00:40:10,749 --> 00:40:15,549
as we saw in the last talk those tricks

900
00:40:12,700 --> 00:40:18,729
of just different instructions

901
00:40:15,549 --> 00:40:21,038
reordering instructions inserting not

902
00:40:18,729 --> 00:40:22,660
equivalents it's exactly<font color="#CCCCCC"> the</font><font color="#E5E5E5"> same</font>

903
00:40:21,039 --> 00:40:27,700
because we are at the<font color="#E5E5E5"> end of the day</font>

904
00:40:22,660 --> 00:40:29,799
just dealing with x86 code so this kind

905
00:40:27,700 --> 00:40:31,930
of<font color="#E5E5E5"> makes</font><font color="#CCCCCC"> it difficult and it pretty much</font>

906
00:40:29,799 --> 00:40:34,779
moves the problem of detecting this kind

907
00:40:31,930 --> 00:40:39,038
of<font color="#CCCCCC"> route get into the realm of</font><font color="#E5E5E5"> malware</font>

908
00:40:34,779 --> 00:40:43,329
analysis so we can<font color="#E5E5E5"> do some dynamic</font>

909
00:40:39,039 --> 00:40:47,440
analysis using emulation or

910
00:40:43,329 --> 00:40:49,420
<font color="#E5E5E5">virtualization</font><font color="#CCCCCC"> VMware or emulator such</font>

911
00:40:47,440 --> 00:40:50,950
as box so you<font color="#CCCCCC"> can actually</font><font color="#E5E5E5"> capture the</font>

912
00:40:49,420 --> 00:40:52,719
ROM off the cards as I talked<font color="#CCCCCC"> about in</font>

913
00:40:50,950 --> 00:40:56,769
the<font color="#E5E5E5"> last slide and then try and load it</font>

914
00:40:52,719 --> 00:40:58,509
into box and box is a<font color="#E5E5E5"> open source x86</font>

915
00:40:56,769 --> 00:41:01,089
emulator with an integrated<font color="#CCCCCC"> debugger</font>

916
00:40:58,509 --> 00:41:03,549
that gives us absolutely full control of

917
00:41:01,089 --> 00:41:05,410
the virtual of the emulated machine so

918
00:41:03,549 --> 00:41:07,900
<font color="#E5E5E5">we can step through the bios we can</font>

919
00:41:05,410 --> 00:41:11,078
break point at any point we have

920
00:41:07,900 --> 00:41:13,930
absolutely full control the problem with

921
00:41:11,079 --> 00:41:15,549
this is if you've got so for example if

922
00:41:13,930 --> 00:41:17,799
you copy the<font color="#E5E5E5"> ROM off your graphics card</font>

923
00:41:15,549 --> 00:41:19,989
and find stick it in box it's not<font color="#E5E5E5"> going</font>

924
00:41:17,799 --> 00:41:21,309
to work<font color="#CCCCCC"> because the ROM will start</font>

925
00:41:19,989 --> 00:41:23,410
talking when<font color="#E5E5E5"> you execute the code it</font>

926
00:41:21,309 --> 00:41:24,999
<font color="#CCCCCC">will actually</font><font color="#E5E5E5"> stop talking I owe to the</font>

927
00:41:23,410 --> 00:41:25,549
graphics cards and obviously your

928
00:41:24,999 --> 00:41:27,140
emulator

929
00:41:25,550 --> 00:41:30,530
doesn't have that graphics card can't

930
00:41:27,140 --> 00:41:32,029
properly emulate the hard way so you can

931
00:41:30,530 --> 00:41:35,090
typically only do limited dynamic

932
00:41:32,030 --> 00:41:36,860
analysis if you can identify what use of

933
00:41:35,090 --> 00:41:39,440
what you suspect as the suspicious

934
00:41:36,860 --> 00:41:40,790
rootkit code that you know is unpacking

935
00:41:39,440 --> 00:41:43,910
some other code or using self-modifying

936
00:41:40,790 --> 00:41:47,270
code then you can<font color="#E5E5E5"> probably get quite</font>

937
00:41:43,910 --> 00:41:49,580
away using box but really static

938
00:41:47,270 --> 00:41:51,470
analysis as in hardcore disassembly

939
00:41:49,580 --> 00:41:57,140
<font color="#CCCCCC">maybe the only real way to</font><font color="#E5E5E5"> actually work</font>

940
00:41:51,470 --> 00:41:59,569
out<font color="#E5E5E5"> what's going on talk about</font>

941
00:41:57,140 --> 00:42:05,000
prevention for a bit and this is pretty

942
00:41:59,570 --> 00:42:07,790
<font color="#CCCCCC">tricky pretty much no pci or pci e or</font>

943
00:42:05,000 --> 00:42:12,800
AGP cards these days have a right Patek

944
00:42:07,790 --> 00:42:15,140
jumper for updating the firmware as you

945
00:42:12,800 --> 00:42:17,690
probably all the<font color="#CCCCCC"> way most motherboards</font>

946
00:42:15,140 --> 00:42:19,400
have this option have a physical switch

947
00:42:17,690 --> 00:42:22,070
a physical jumper that<font color="#E5E5E5"> you can basically</font>

948
00:42:19,400 --> 00:42:25,940
write protect so that the<font color="#CCCCCC"> BIOS cannot be</font>

949
00:42:22,070 --> 00:42:28,490
updated as it happens most vendors still

950
00:42:25,940 --> 00:42:32,150
ship with that<font color="#E5E5E5"> jumper set so that you</font>

951
00:42:28,490 --> 00:42:34,850
can write<font color="#CCCCCC"> to the BIOS similar rationale</font>

952
00:42:32,150 --> 00:42:36,890
behind<font color="#E5E5E5"> PCI cards when when they actually</font>

953
00:42:34,850 --> 00:42:38,420
when they produce the card they don't

954
00:42:36,890 --> 00:42:40,129
<font color="#CCCCCC">think</font><font color="#E5E5E5"> that someone's going</font><font color="#CCCCCC"> to try and</font>

955
00:42:38,420 --> 00:42:41,450
rootkit the card they just think<font color="#E5E5E5"> of</font>

956
00:42:40,130 --> 00:42:43,220
their consumer that wants to download

957
00:42:41,450 --> 00:42:44,720
the latest version because whatever game

958
00:42:43,220 --> 00:42:46,520
they're trying<font color="#E5E5E5"> to play doesn't work on</font>

959
00:42:44,720 --> 00:42:48,020
the graphics card so they want<font color="#E5E5E5"> to be</font>

960
00:42:46,520 --> 00:42:51,710
able to flash it and they don't<font color="#E5E5E5"> want to</font>

961
00:42:48,020 --> 00:42:53,330
have to take it out the<font color="#E5E5E5"> machine the PCI</font>

962
00:42:51,710 --> 00:42:56,000
cards typically the updates don't

963
00:42:53,330 --> 00:42:58,850
<font color="#E5E5E5">require don't need to be signed in any</font>

964
00:42:56,000 --> 00:43:00,350
way and again it's like well you know

965
00:42:58,850 --> 00:43:01,970
why would you want<font color="#CCCCCC"> to put your own</font>

966
00:43:00,350 --> 00:43:03,140
firmware on<font color="#CCCCCC"> the card your own you're</font>

967
00:43:01,970 --> 00:43:06,589
<font color="#E5E5E5">going to probably screw up the card in</font>

968
00:43:03,140 --> 00:43:08,540
the first place<font color="#E5E5E5"> and from a cost</font>

969
00:43:06,590 --> 00:43:11,090
perspective if you<font color="#E5E5E5"> now have to add some</font>

970
00:43:08,540 --> 00:43:12,800
extra maybe extra chip on the card to

971
00:43:11,090 --> 00:43:15,470
actually do some verification of the

972
00:43:12,800 --> 00:43:17,570
signature<font color="#E5E5E5"> and then you've</font><font color="#CCCCCC"> got the whole</font>

973
00:43:15,470 --> 00:43:19,910
like key management and it comes a

974
00:43:17,570 --> 00:43:22,130
headache so most vendors just simply I'm

975
00:43:19,910 --> 00:43:24,299
going to go there

976
00:43:22,130 --> 00:43:26,989
up until now I haven't really<font color="#E5E5E5"> talked</font>

977
00:43:24,299 --> 00:43:29,880
about<font color="#E5E5E5"> how we actually reflash a card</font>

978
00:43:26,989 --> 00:43:32,130
typically we do<font color="#E5E5E5"> i oh so we do the</font>

979
00:43:29,880 --> 00:43:37,289
assembly instructions in and out to the

980
00:43:32,130 --> 00:43:40,559
PCI configuration space if you download

981
00:43:37,289 --> 00:43:42,269
a vendor utility to flash the card so

982
00:43:40,559 --> 00:43:44,069
you go to a TI and you download a TI

983
00:43:42,269 --> 00:43:45,538
flash and you disassemble it you'll

984
00:43:44,069 --> 00:43:48,950
probably see<font color="#CCCCCC"> it it's doing</font><font color="#E5E5E5"> something</font>

985
00:43:45,539 --> 00:43:52,380
like<font color="#CCCCCC"> this it's using how get bus data</font>

986
00:43:48,950 --> 00:43:56,460
obsoleted kernel function more likely

987
00:43:52,380 --> 00:44:01,349
<font color="#CCCCCC">it's using apps on windows to actually</font>

988
00:43:56,460 --> 00:44:03,989
do i oh so<font color="#CCCCCC"> theoretically in terms of</font>

989
00:44:01,349 --> 00:44:05,549
prevention you could hook these your

990
00:44:03,989 --> 00:44:07,859
protection software could hook these and

991
00:44:05,549 --> 00:44:09,299
basically say try and capture whenever

992
00:44:07,859 --> 00:44:10,410
you're<font color="#CCCCCC"> trying to update the card and say</font>

993
00:44:09,299 --> 00:44:14,910
you know do<font color="#E5E5E5"> you</font><font color="#CCCCCC"> really want to</font><font color="#E5E5E5"> do this</font>

994
00:44:10,410 --> 00:44:17,879
<font color="#E5E5E5">sword prevent you doing it the real</font>

995
00:44:14,910 --> 00:44:19,980
problem is as I said<font color="#CCCCCC"> to reflash the card</font>

996
00:44:17,880 --> 00:44:21,839
you just need to do in and out so all

997
00:44:19,980 --> 00:44:23,730
the the<font color="#E5E5E5"> other two functions are had on</font>

998
00:44:21,839 --> 00:44:26,249
the last slide<font color="#E5E5E5"> or they are simply</font>

999
00:44:23,730 --> 00:44:27,539
wrappers round in and out if the

1000
00:44:26,249 --> 00:44:29,308
attacker can just issue those

1001
00:44:27,539 --> 00:44:33,720
instructions directly then they can

1002
00:44:29,309 --> 00:44:38,910
reflash your card and trapping<font color="#E5E5E5"> i/o is a</font>

1003
00:44:33,720 --> 00:44:41,939
difficult problem from user mode from

1004
00:44:38,910 --> 00:44:43,410
ring 3 on both linux and windows you

1005
00:44:41,940 --> 00:44:46,619
only have limited access to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> i/o</font>

1006
00:44:43,410 --> 00:44:48,359
space because why should you have full

1007
00:44:46,619 --> 00:44:50,970
access to all these devices as a low

1008
00:44:48,359 --> 00:44:52,828
privileged user it brings<font color="#CCCCCC"> 0 in colonel</font>

1009
00:44:50,970 --> 00:44:55,859
you<font color="#CCCCCC"> have full</font><font color="#E5E5E5"> access to the i/o space as</font>

1010
00:44:52,829 --> 00:44:57,660
you would imagine there's a couple<font color="#E5E5E5"> of</font>

1011
00:44:55,859 --> 00:44:59,910
interesting quirks on both linux and

1012
00:44:57,660 --> 00:45:02,160
windows we can change the i/o privilege

1013
00:44:59,910 --> 00:45:05,670
level to allow us<font color="#E5E5E5"> to</font><font color="#CCCCCC"> do unrestricted i/o</font>

1014
00:45:02,160 --> 00:45:08,730
from user mode on linux<font color="#E5E5E5"> i believe it's</font>

1015
00:45:05,670 --> 00:45:11,819
the I opl Cisco which you have to<font color="#E5E5E5"> be</font>

1016
00:45:08,730 --> 00:45:14,249
admin to use on<font color="#E5E5E5"> Windows it's empty set</font>

1017
00:45:11,819 --> 00:45:16,890
information process undocumented export

1018
00:45:14,249 --> 00:45:18,890
from NT dll essentially as the same

1019
00:45:16,890 --> 00:45:20,730
thing and<font color="#E5E5E5"> you have to be local system so</font>

1020
00:45:18,890 --> 00:45:22,769
<font color="#CCCCCC">you have to have where you have to have</font>

1021
00:45:20,730 --> 00:45:25,950
<font color="#E5E5E5">the SD TC be privileged on windows so</font>

1022
00:45:22,769 --> 00:45:27,779
you have to be local system<font color="#CCCCCC"> so i guess</font>

1023
00:45:25,950 --> 00:45:31,519
the protections prevention software

1024
00:45:27,779 --> 00:45:34,349
could hook empty set information process

1025
00:45:31,519 --> 00:45:35,020
but really if<font color="#CCCCCC"> the attackers on your</font>

1026
00:45:34,349 --> 00:45:39,400
machine and they

1027
00:45:35,020 --> 00:45:42,940
get into colonel yeah<font color="#E5E5E5"> I</font><font color="#CCCCCC"> mean these are</font>

1028
00:45:39,400 --> 00:45:44,920
<font color="#E5E5E5">really some ideas but if the attacker is</font>

1029
00:45:42,940 --> 00:45:46,870
really wanting to<font color="#E5E5E5"> put a rootkit on your</font>

1030
00:45:44,920 --> 00:45:52,570
PCI card they're probably skilled enough

1031
00:45:46,870 --> 00:45:54,910
not to trigger any of these so what

1032
00:45:52,570 --> 00:46:00,880
about trusted computing does that solve

1033
00:45:54,910 --> 00:46:03,879
our problems so many notebooks and many

1034
00:46:00,880 --> 00:46:06,250
high-end mainboards these days have a

1035
00:46:03,880 --> 00:46:08,200
TPM trusted platform module and

1036
00:46:06,250 --> 00:46:10,750
essentially this this piece of hardware

1037
00:46:08,200 --> 00:46:14,589
is the cornerstone of trusted computing

1038
00:46:10,750 --> 00:46:16,480
and it's a microcontroller that has a

1039
00:46:14,590 --> 00:46:19,660
few basic<font color="#E5E5E5"> functions so it can do</font>

1040
00:46:16,480 --> 00:46:22,500
standard crypto and it can create and

1041
00:46:19,660 --> 00:46:26,200
protect and manage keys it has the

1042
00:46:22,500 --> 00:46:28,180
controversial unique endorsement key the

1043
00:46:26,200 --> 00:46:32,200
unique identifier for your machine which

1044
00:46:28,180 --> 00:46:34,000
is all the drm concerns about but what

1045
00:46:32,200 --> 00:46:36,250
<font color="#CCCCCC">we're really interested</font><font color="#E5E5E5"> in with regard</font>

1046
00:46:34,000 --> 00:46:41,470
to this kind<font color="#E5E5E5"> of attack is the</font><font color="#CCCCCC"> platform</font>

1047
00:46:36,250 --> 00:46:43,630
measurement hashes and essentially the

1048
00:46:41,470 --> 00:46:45,359
way it works is that when you when you

1049
00:46:43,630 --> 00:46:50,620
configure your system with the TPM

1050
00:46:45,360 --> 00:46:54,270
various various measurements are taken

1051
00:46:50,620 --> 00:46:57,339
for<font color="#E5E5E5"> the first time I'm actually going to</font>

1052
00:46:54,270 --> 00:47:04,440
skip to a different slide deck for a

1053
00:46:57,340 --> 00:47:08,080
second these are a<font color="#E5E5E5"> couple of slides from</font>

1054
00:47:04,440 --> 00:47:10,810
Douglas MacGyver's presentation hack in

1055
00:47:08,080 --> 00:47:12,880
the<font color="#CCCCCC"> Box last year Douglas MacGyver works</font>

1056
00:47:10,810 --> 00:47:15,759
for the BitLocker team at Microsoft and

1057
00:47:12,880 --> 00:47:17,890
he gave a really good presentation a

1058
00:47:15,760 --> 00:47:19,660
really kind of candid like what's an<font color="#CCCCCC"> all</font>

1059
00:47:17,890 --> 00:47:23,319
presentation on exactly what BitLocker

1060
00:47:19,660 --> 00:47:26,830
does so<font color="#E5E5E5"> I highly recommend that and</font>

1061
00:47:23,320 --> 00:47:30,220
basically these boxes here are the

1062
00:47:26,830 --> 00:47:32,980
components<font color="#E5E5E5"> that are measured we measure</font>

1063
00:47:30,220 --> 00:47:35,859
the<font color="#CCCCCC"> BIOS the</font><font color="#E5E5E5"> musk Boot Record boot</font>

1064
00:47:32,980 --> 00:47:38,830
sector and the OS loader so the very

1065
00:47:35,860 --> 00:47:40,840
<font color="#CCCCCC">first time you run say BitLocker</font><font color="#E5E5E5"> you're</font>

1066
00:47:38,830 --> 00:47:42,790
<font color="#E5E5E5">an you initialize your TPM you'll take</font>

1067
00:47:40,840 --> 00:47:45,220
these measurments you're basically take

1068
00:47:42,790 --> 00:47:48,130
a hash of the<font color="#E5E5E5"> bios has a hash of the MBR</font>

1069
00:47:45,220 --> 00:47:48,759
hash of the<font color="#E5E5E5"> boot sector the idea being</font>

1070
00:47:48,130 --> 00:47:51,280
that on

1071
00:47:48,760 --> 00:47:53,980
<font color="#CCCCCC">cunt boots you</font><font color="#E5E5E5"> can then we measure these</font>

1072
00:47:51,280 --> 00:47:56,740
these quantities we rehash the<font color="#CCCCCC"> BIOS and</font>

1073
00:47:53,980 --> 00:48:01,770
if it's changed then essentially you can

1074
00:47:56,740 --> 00:48:04,439
<font color="#E5E5E5">flag that as potentially troublesome and</font>

1075
00:48:01,770 --> 00:48:12,759
these measurements are stored securely

1076
00:48:04,440 --> 00:48:14,560
protected by the TPM now the the<font color="#CCCCCC"> main</font>

1077
00:48:12,760 --> 00:48:16,000
problem will say BitLocker because

1078
00:48:14,560 --> 00:48:18,040
essentially what this doesn't show is

1079
00:48:16,000 --> 00:48:21,460
that another events that is considered

1080
00:48:18,040 --> 00:48:23,290
are the PCI expansion roms so we have

1081
00:48:21,460 --> 00:48:25,960
this chain where essentially the bios is

1082
00:48:23,290 --> 00:48:29,259
<font color="#E5E5E5">first verified if the bios is good then</font>

1083
00:48:25,960 --> 00:48:32,950
it will start dumping the<font color="#CCCCCC"> PCI expansion</font>

1084
00:48:29,260 --> 00:48:36,220
roms from the card into<font color="#CCCCCC"> Ram the</font>

1085
00:48:32,950 --> 00:48:39,580
expansion roms are then also checked so

1086
00:48:36,220 --> 00:48:40,839
if we've modified if for<font color="#CCCCCC"> example had</font>

1087
00:48:39,580 --> 00:48:42,190
physical access to your machine we took

1088
00:48:40,840 --> 00:48:43,300
your graphics card out we reflashed it

1089
00:48:42,190 --> 00:48:46,000
with our route cape stuck it back in

1090
00:48:43,300 --> 00:48:48,760
this is the<font color="#E5E5E5"> point that the TPM would say</font>

1091
00:48:46,000 --> 00:48:50,350
<font color="#CCCCCC">okay this</font><font color="#E5E5E5"> measurement has changed</font><font color="#CCCCCC"> there</font>

1092
00:48:48,760 --> 00:48:54,640
could well<font color="#E5E5E5"> be a rootkit here well</font>

1093
00:48:50,350 --> 00:48:56,410
something's gone wrong so um based on

1094
00:48:54,640 --> 00:48:58,230
what<font color="#E5E5E5"> I've said it sounds like TPM and</font>

1095
00:48:56,410 --> 00:49:03,460
trustworthy computing solipsist problem

1096
00:48:58,230 --> 00:49:04,900
<font color="#E5E5E5">however skip to the right slide as I</font>

1097
00:49:03,460 --> 00:49:07,680
said this is<font color="#CCCCCC"> a</font><font color="#E5E5E5"> highly recommended</font>

1098
00:49:04,900 --> 00:49:11,200
presentation for anyone listen twisting

1099
00:49:07,680 --> 00:49:14,379
the slide<font color="#CCCCCC"> on boot rootkits let's go</font>

1100
00:49:11,200 --> 00:49:17,109
<font color="#E5E5E5">through these so BitLocker detects boot</font>

1101
00:49:14,380 --> 00:49:18,910
rootkits installed offline so your

1102
00:49:17,110 --> 00:49:22,060
machines off somebody has physical

1103
00:49:18,910 --> 00:49:24,430
access they change something as in they

1104
00:49:22,060 --> 00:49:28,710
change for example<font color="#CCCCCC"> the expansion romagna</font>

1105
00:49:24,430 --> 00:49:28,710
graphics Club BitLocker de Texas

1106
00:49:28,890 --> 00:49:32,770
BitLocker also detects online boot

1107
00:49:31,270 --> 00:49:34,810
rootkits what do we call about there

1108
00:49:32,770 --> 00:49:37,840
what do<font color="#E5E5E5"> we mean by this essentially we</font>

1109
00:49:34,810 --> 00:49:40,810
mean that your operating system is

1110
00:49:37,840 --> 00:49:43,000
running someone compromises your machine

1111
00:49:40,810 --> 00:49:45,190
and they try and<font color="#E5E5E5"> stick a boot rootkit on</font>

1112
00:49:43,000 --> 00:49:47,020
there so for<font color="#E5E5E5"> example they change the</font>

1113
00:49:45,190 --> 00:49:50,920
Master Boot Record or they reflash the

1114
00:49:47,020 --> 00:49:54,400
your graphics card this<font color="#CCCCCC"> is the case that</font>

1115
00:49:50,920 --> 00:49:56,680
<font color="#E5E5E5">their BitLocker unaware and this the</font>

1116
00:49:54,400 --> 00:49:59,770
word unaware is kind of pivotal here so

1117
00:49:56,680 --> 00:50:01,549
BitLocker will detect detect them and<font color="#CCCCCC"> it</font>

1118
00:49:59,770 --> 00:50:03,620
<font color="#E5E5E5">will detect</font><font color="#CCCCCC"> that something has changed</font>

1119
00:50:01,550 --> 00:50:05,450
however<font color="#CCCCCC"> BitLocker does not protect</font>

1120
00:50:03,620 --> 00:50:08,870
against boot rootkits for the BitLocker

1121
00:50:05,450 --> 00:50:12,189
aware so if<font color="#CCCCCC"> I</font><font color="#E5E5E5"> compromise your machine</font>

1122
00:50:08,870 --> 00:50:14,480
and i know you have BitLocker running

1123
00:50:12,190 --> 00:50:17,150
essentially what what Douglas<font color="#E5E5E5"> what i was</font>

1124
00:50:14,480 --> 00:50:20,450
saying here is that<font color="#E5E5E5"> i can reflash your</font>

1125
00:50:17,150 --> 00:50:23,270
graphics card and<font color="#CCCCCC"> i can reseal the TPM</font>

1126
00:50:20,450 --> 00:50:25,220
measurements and basically as far as

1127
00:50:23,270 --> 00:50:27,080
your system is concerned it doesn't know

1128
00:50:25,220 --> 00:50:32,120
anything has changed or it thinks the

1129
00:50:27,080 --> 00:50:35,150
user has endorsed a change so basically

1130
00:50:32,120 --> 00:50:37,160
as it stands BitLocker prevents offline

1131
00:50:35,150 --> 00:50:47,060
attacks but does not prevent online

1132
00:50:37,160 --> 00:50:48,920
attacks well essentially the way it<font color="#E5E5E5"> was</font>

1133
00:50:47,060 --> 00:50:51,590
explained to<font color="#E5E5E5"> me by Douglas MacGyver was</font>

1134
00:50:48,920 --> 00:50:58,250
if you're running coding<font color="#CCCCCC"> colonel you can</font>

1135
00:50:51,590 --> 00:51:00,260
<font color="#E5E5E5">turn off BitLocker anyway you have to be</font>

1136
00:50:58,250 --> 00:51:02,390
able to do that as admin I mean this<font color="#CCCCCC"> is</font>

1137
00:51:00,260 --> 00:51:04,430
like a obviously an issue which they're

1138
00:51:02,390 --> 00:51:06,020
aware of and as far<font color="#E5E5E5"> as I'm aware it's</font>

1139
00:51:04,430 --> 00:51:08,540
going to be addressed<font color="#E5E5E5"> in the next</font>

1140
00:51:06,020 --> 00:51:11,600
question they're working on I don't

1141
00:51:08,540 --> 00:51:14,240
think<font color="#CCCCCC"> that this wasn't one of the goals</font>

1142
00:51:11,600 --> 00:51:16,310
of bit<font color="#CCCCCC"> lepa</font><font color="#E5E5E5"> from the outset to provide</font>

1143
00:51:14,240 --> 00:51:24,979
this level of protection it's mainly as

1144
00:51:16,310 --> 00:51:27,380
a offline prevent offline attacks yes I

1145
00:51:24,980 --> 00:51:30,350
would imagine so but<font color="#E5E5E5"> it mean it depends</font>

1146
00:51:27,380 --> 00:51:32,150
on I mean the TPM is all well and good

1147
00:51:30,350 --> 00:51:34,520
having one in<font color="#E5E5E5"> your machine but you need</font>

1148
00:51:32,150 --> 00:51:36,620
something to<font color="#E5E5E5"> use it</font><font color="#CCCCCC"> and in this case</font>

1149
00:51:34,520 --> 00:51:39,460
Vista has BitLocker I haven't<font color="#CCCCCC"> actually</font>

1150
00:51:36,620 --> 00:51:44,569
looked to any secure boot strap and

1151
00:51:39,460 --> 00:51:46,010
implementations for Linux well this is

1152
00:51:44,570 --> 00:51:47,270
this is interesting I actually think

1153
00:51:46,010 --> 00:51:50,270
<font color="#E5E5E5">it's BitLocker implementation that</font>

1154
00:51:47,270 --> 00:51:53,300
<font color="#E5E5E5">allows it i mean the TPM is just a piece</font>

1155
00:51:50,270 --> 00:51:54,740
of hardware I'm sure it can be

1156
00:51:53,300 --> 00:51:58,100
configured so that you cannot reseal it

1157
00:51:54,740 --> 00:52:01,089
as easily like I think this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a bit</font>

1158
00:51:58,100 --> 00:52:01,089
<font color="#E5E5E5">Locker implementation issue</font>

1159
00:52:06,400 --> 00:52:11,839
yeah or or summer session of physical

1160
00:52:09,499 --> 00:52:13,729
presence maybe but<font color="#E5E5E5"> that's kind of hard</font>

1161
00:52:11,839 --> 00:52:16,099
to do from when you're as high up as the

1162
00:52:13,729 --> 00:52:17,749
operating system so how do you how do

1163
00:52:16,099 --> 00:52:19,069
you yeah I<font color="#E5E5E5"> mean that's pretty much</font>

1164
00:52:17,749 --> 00:52:21,259
impossible to do how do you like it

1165
00:52:19,069 --> 00:52:23,989
<font color="#CCCCCC">what's the difference between popping up</font>

1166
00:52:21,259 --> 00:52:27,920
hope both the box and sort of yeah and

1167
00:52:23,989 --> 00:52:34,910
and yeah and users<font color="#CCCCCC"> code seemingly doing</font>

1168
00:52:27,920 --> 00:52:38,209
the same thing so to summarize expansion

1169
00:52:34,910 --> 00:52:40,459
roms<font color="#CCCCCC"> all they are</font><font color="#E5E5E5"> is blocks of x86 code</font>

1170
00:52:38,209 --> 00:52:43,930
on a pci card that's cockpit to ram

1171
00:52:40,459 --> 00:52:46,160
during boot so it<font color="#E5E5E5"> before boot</font>

1172
00:52:43,930 --> 00:52:49,368
essentially because the OS loader relies

1173
00:52:46,160 --> 00:52:53,868
on a table of services<font color="#CCCCCC"> that are residing</font>

1174
00:52:49,369 --> 00:52:55,459
the bios we can modify this table<font color="#E5E5E5"> and so</font>

1175
00:52:53,869 --> 00:52:57,459
<font color="#E5E5E5">that when the OS load that</font><font color="#CCCCCC"> caused one of</font>

1176
00:52:55,459 --> 00:53:00,140
<font color="#E5E5E5">these services we get control and</font>

1177
00:52:57,459 --> 00:53:03,499
ultimately we can<font color="#CCCCCC"> select the the entire</font>

1178
00:53:00,140 --> 00:53:05,989
operating system at<font color="#E5E5E5"> this</font><font color="#CCCCCC"> point i talked</font>

1179
00:53:03,499 --> 00:53:11,779
about<font color="#E5E5E5"> PHP using it as a means of</font>

1180
00:53:05,989 --> 00:53:14,440
updating the rootkit<font color="#CCCCCC"> pre-boot detection</font>

1181
00:53:11,779 --> 00:53:17,719
of these things<font color="#E5E5E5"> focuses really on</font>

1182
00:53:14,440 --> 00:53:19,279
analysis of the<font color="#E5E5E5"> expansion roms and you</font>

1183
00:53:17,719 --> 00:53:22,940
would need a combination of signature

1184
00:53:19,279 --> 00:53:25,449
checking and some automated some

1185
00:53:22,940 --> 00:53:28,369
heuristics as well as manual analysis

1186
00:53:25,449 --> 00:53:30,410
pretty much it exactly the<font color="#E5E5E5"> same as you</font>

1187
00:53:28,369 --> 00:53:31,880
would do for<font color="#E5E5E5"> malware analysis you would</font>

1188
00:53:30,410 --> 00:53:33,170
run some signatures over it you would

1189
00:53:31,880 --> 00:53:35,059
then run some tools over it that may

1190
00:53:33,170 --> 00:53:37,369
identify it as some<font color="#E5E5E5"> variants of another</font>

1191
00:53:35,059 --> 00:53:38,869
thing and depending<font color="#E5E5E5"> on how successful</font>

1192
00:53:37,369 --> 00:53:40,430
the tools where you may have to<font color="#E5E5E5"> get</font><font color="#CCCCCC"> your</font>

1193
00:53:38,869 --> 00:53:44,140
hands dirty and see what it's actually

1194
00:53:40,430 --> 00:53:46,969
doing and BitLocker as it stands

1195
00:53:44,140 --> 00:53:48,259
prevents or flying the tax only so if<font color="#E5E5E5"> we</font>

1196
00:53:46,969 --> 00:53:51,469
compromise your machine while it's

1197
00:53:48,259 --> 00:53:54,769
running theoretically<font color="#CCCCCC"> we can make</font>

1198
00:53:51,469 --> 00:53:57,680
everything seem ok and as<font color="#E5E5E5"> I talked about</font>

1199
00:53:54,769 --> 00:53:59,899
<font color="#E5E5E5">with the iop xlnt set information</font>

1200
00:53:57,680 --> 00:54:01,788
process we don't<font color="#CCCCCC"> necessarily need to be</font>

1201
00:53:59,900 --> 00:54:04,789
in kernel to reflash your card if we're

1202
00:54:01,789 --> 00:54:07,009
able to get admin then essentially we

1203
00:54:04,789 --> 00:54:09,529
can allow ourselves to the unrestricted

1204
00:54:07,009 --> 00:54:11,769
I oh and we can just<font color="#E5E5E5"> reflash</font><font color="#CCCCCC"> a card in</font>

1205
00:54:09,529 --> 00:54:11,769
user mode

1206
00:54:12,330 --> 00:54:18,730
so I'm going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> leave</font><font color="#CCCCCC"> you with</font><font color="#E5E5E5"> some some</font>

1207
00:54:15,460 --> 00:54:20,680
further discussion points this is a

1208
00:54:18,730 --> 00:54:23,470
<font color="#E5E5E5">question which I really have no no kind</font>

1209
00:54:20,680 --> 00:54:26,680
<font color="#E5E5E5">of handle on yet how long for widespread</font>

1210
00:54:23,470 --> 00:54:27,910
TPM adoption certainly<font color="#CCCCCC"> hi em notebooks</font>

1211
00:54:26,680 --> 00:54:31,450
these days will most certainly have a

1212
00:54:27,910 --> 00:54:35,170
TPM but a lot of them don't still it's

1213
00:54:31,450 --> 00:54:36,700
extra<font color="#E5E5E5"> cost and what about a working</font>

1214
00:54:35,170 --> 00:54:39,040
secure bootstrap implementation for

1215
00:54:36,700 --> 00:54:40,600
every operating system I'm sure there

1216
00:54:39,040 --> 00:54:44,350
are proof<font color="#E5E5E5"> of concept ones for the Linux</font>

1217
00:54:40,600 --> 00:54:46,680
out there and<font color="#CCCCCC"> Solaris etc but Microsoft</font>

1218
00:54:44,350 --> 00:54:49,450
are the first to market with here's our

1219
00:54:46,680 --> 00:54:52,000
actual offering pointing click to

1220
00:54:49,450 --> 00:54:53,890
install kind of thing so how long for

1221
00:54:52,000 --> 00:54:57,550
both of these things<font color="#E5E5E5"> are we talking five</font>

1222
00:54:53,890 --> 00:55:03,580
years<font color="#CCCCCC"> we're talking ten years like will</font>

1223
00:54:57,550 --> 00:55:06,580
it<font color="#CCCCCC"> ever happen yeah that's an excellent</font>

1224
00:55:03,580 --> 00:55:09,790
analogy there but yeah we could be

1225
00:55:06,580 --> 00:55:12,069
looking at 20<font color="#E5E5E5"> years or whatever whose</font>

1226
00:55:09,790 --> 00:55:15,310
problem is this and how do<font color="#E5E5E5"> we actually</font>

1227
00:55:12,070 --> 00:55:17,470
fix it is it the vendors should they add

1228
00:55:15,310 --> 00:55:19,299
a jumper to prevent updates like

1229
00:55:17,470 --> 00:55:21,629
<font color="#CCCCCC">realistically that that's never going to</font>

1230
00:55:19,300 --> 00:55:23,890
happen when you think about their market

1231
00:55:21,630 --> 00:55:25,840
their users don't want to have to take

1232
00:55:23,890 --> 00:55:28,359
<font color="#E5E5E5">the</font><font color="#CCCCCC"> machine out to reflash it they just</font>

1233
00:55:25,840 --> 00:55:30,340
<font color="#CCCCCC">want</font><font color="#E5E5E5"> to download that tool from</font><font color="#CCCCCC"> ati</font>

1234
00:55:28,360 --> 00:55:36,910
double-click it and have it do

1235
00:55:30,340 --> 00:55:40,480
everything for them<font color="#E5E5E5"> um perhaps yeah yeah</font>

1236
00:55:36,910 --> 00:55:43,000
of course should they<font color="#CCCCCC"> have a return to</font>

1237
00:55:40,480 --> 00:55:44,800
factory default so should they<font color="#CCCCCC"> have kind</font>

1238
00:55:43,000 --> 00:55:47,710
of the misnomer in terms of calling

1239
00:55:44,800 --> 00:55:49,210
everything of Ron it's really we

1240
00:55:47,710 --> 00:55:50,710
shouldn't be calling it a run maybe they

1241
00:55:49,210 --> 00:55:52,360
should actually have a proper rom on the

1242
00:55:50,710 --> 00:55:54,220
card in the true sense of the word that

1243
00:55:52,360 --> 00:55:57,160
we cannot alter and maybe they should

1244
00:55:54,220 --> 00:55:59,439
have some means of allowing us to copy

1245
00:55:57,160 --> 00:56:05,649
<font color="#CCCCCC">that back across to the the one that we</font>

1246
00:55:59,440 --> 00:56:07,150
can<font color="#E5E5E5"> change yeah so you ship a vulnerable</font>

1247
00:56:05,650 --> 00:56:08,359
what you should one that has a major bug

1248
00:56:07,150 --> 00:56:11,700
in it

1249
00:56:08,359 --> 00:56:13,619
should we like a current problem is

1250
00:56:11,700 --> 00:56:17,220
supposing you want to know whether you

1251
00:56:13,619 --> 00:56:18,780
have<font color="#E5E5E5"> an actual vendors a proper vendors</font>

1252
00:56:17,220 --> 00:56:20,490
<font color="#CCCCCC">roam on your</font><font color="#E5E5E5"> cards on your graphics code</font>

1253
00:56:18,780 --> 00:56:22,500
for example so you<font color="#CCCCCC"> dump the run out of</font>

1254
00:56:20,490 --> 00:56:24,450
memory in<font color="#CCCCCC"> your hash</font><font color="#E5E5E5"> it then what do you</font>

1255
00:56:22,500 --> 00:56:26,099
do you can go to the vendors website and

1256
00:56:24,450 --> 00:56:28,109
try<font color="#E5E5E5"> and download every update they've</font>

1257
00:56:26,099 --> 00:56:30,809
ever done you'll be lucky<font color="#E5E5E5"> enough to find</font>

1258
00:56:28,109 --> 00:56:32,279
like the most recent one let alone all

1259
00:56:30,809 --> 00:56:34,440
the<font color="#CCCCCC"> previous ones and you know they're</font>

1260
00:56:32,280 --> 00:56:36,150
versioning issues maybe<font color="#E5E5E5"> we</font><font color="#CCCCCC"> should have</font>

1261
00:56:34,440 --> 00:56:39,119
some kind<font color="#CCCCCC"> of centralized website where</font>

1262
00:56:36,150 --> 00:56:41,670
vendors are able to submit roms and have

1263
00:56:39,119 --> 00:56:43,319
them have a hash of them then at least

1264
00:56:41,670 --> 00:56:45,089
<font color="#CCCCCC">you're your first point of call once</font>

1265
00:56:43,319 --> 00:56:50,190
you've dumped<font color="#E5E5E5"> the ROM is to hash it and</font>

1266
00:56:45,089 --> 00:56:53,730
go see if it's a known good one and

1267
00:56:50,190 --> 00:56:56,130
finally will we<font color="#E5E5E5"> ever see malware target</font>

1268
00:56:53,730 --> 00:56:59,280
the from target firmware and target

1269
00:56:56,130 --> 00:57:02,180
<font color="#E5E5E5">these kind of techniques and well it's</font>

1270
00:56:59,280 --> 00:57:04,470
an interesting<font color="#E5E5E5"> one basically right</font><font color="#CCCCCC"> now</font>

1271
00:57:02,180 --> 00:57:07,020
there's not sufficient return on

1272
00:57:04,470 --> 00:57:08,430
investment for expending the time and

1273
00:57:07,020 --> 00:57:12,030
effort<font color="#E5E5E5"> to actually build one of these</font>

1274
00:57:08,430 --> 00:57:13,950
things<font color="#E5E5E5"> to work across</font><font color="#CCCCCC"> the major major</font>

1275
00:57:12,030 --> 00:57:15,480
graphics manufacturers when you have

1276
00:57:13,950 --> 00:57:18,660
botnets with tens of thousands<font color="#E5E5E5"> of</font>

1277
00:57:15,480 --> 00:57:20,520
machines essentially if if you lose a

1278
00:57:18,660 --> 00:57:22,589
machine at that botnet you'll just<font color="#E5E5E5"> go</font>

1279
00:57:20,520 --> 00:57:24,270
get another machine when it<font color="#E5E5E5"> gets to the</font>

1280
00:57:22,589 --> 00:57:26,490
point<font color="#E5E5E5"> where losing machines out of your</font>

1281
00:57:24,270 --> 00:57:28,380
botnet is a concern and you<font color="#E5E5E5"> have to keep</font>

1282
00:57:26,490 --> 00:57:30,808
those machines then we'll see a

1283
00:57:28,380 --> 00:57:33,240
transition to more more rootkit<font color="#CCCCCC"> light</font>

1284
00:57:30,809 --> 00:57:39,720
techniques and possibly these kind of

1285
00:57:33,240 --> 00:57:42,149
techniques but typically it may not be

1286
00:57:39,720 --> 00:57:44,129
you're going to have to do some trickery

1287
00:57:42,150 --> 00:57:47,760
either compress compressing the existing

1288
00:57:44,130 --> 00:57:49,470
existing image and all these kind of all

1289
00:57:47,760 --> 00:57:52,770
these factors add up to making it harder

1290
00:57:49,470 --> 00:57:56,129
to<font color="#E5E5E5"> build the the rootkit that's going to</font>

1291
00:57:52,770 --> 00:57:57,839
work across<font color="#E5E5E5"> every one system so right</font>

1292
00:57:56,130 --> 00:58:00,510
now I don't<font color="#E5E5E5"> think there's sufficient</font>

1293
00:57:57,839 --> 00:58:04,049
return on investment to do this but it's

1294
00:58:00,510 --> 00:58:07,020
an interesting<font color="#E5E5E5"> point and it's also in</font>

1295
00:58:04,049 --> 00:58:09,869
terms of denial of service and kind of

1296
00:58:07,020 --> 00:58:12,359
extortion that kind of thing we had the

1297
00:58:09,869 --> 00:58:14,849
<font color="#E5E5E5">CI h virus years ago that</font><font color="#CCCCCC"> are new people</font>

1298
00:58:12,359 --> 00:58:17,700
<font color="#CCCCCC">as viruses well PCI cards are still wide</font>

1299
00:58:14,849 --> 00:58:19,849
open so you could reflash their cards

1300
00:58:17,700 --> 00:58:19,848
and

1301
00:58:21,990 --> 00:58:30,279
who has internal access whether you've

1302
00:58:25,750 --> 00:58:33,790
<font color="#CCCCCC">got some you know crazy in termite ITI</font>

1303
00:58:30,280 --> 00:58:41,320
you ever inspire he's got way back in or

1304
00:58:33,790 --> 00:58:43,930
<font color="#E5E5E5">take advantage</font><font color="#CCCCCC"> yeah exactly yeah yeah i</font>

1305
00:58:41,320 --> 00:58:45,970
mean<font color="#CCCCCC"> i agree</font><font color="#E5E5E5"> that entirely in fact the</font>

1306
00:58:43,930 --> 00:58:48,149
kind<font color="#E5E5E5"> of scenario i give</font><font color="#CCCCCC"> that exact</font>

1307
00:58:45,970 --> 00:58:51,430
scenario for a bios crickets in general

1308
00:58:48,150 --> 00:58:54,160
basically consider like a large

1309
00:58:51,430 --> 00:58:56,230
corporation<font color="#E5E5E5"> where it disgruntled</font>

1310
00:58:54,160 --> 00:58:58,569
employee gets fired their laptop goes

1311
00:58:56,230 --> 00:59:00,880
back to the IT guys who re format it

1312
00:58:58,570 --> 00:59:02,410
send it out to the next next<font color="#E5E5E5"> guy but if</font>

1313
00:59:00,880 --> 00:59:04,690
you've got persistence through a<font color="#E5E5E5"> pci or</font>

1314
00:59:02,410 --> 00:59:08,920
<font color="#E5E5E5">the bios then essentially</font><font color="#CCCCCC"> you're you're</font>

1315
00:59:04,690 --> 00:59:10,240
back on<font color="#E5E5E5"> it straight away um some</font>

1316
00:59:08,920 --> 00:59:12,660
references here for anyone that's

1317
00:59:10,240 --> 00:59:14,859
interested I've also written a paper

1318
00:59:12,660 --> 00:59:16,839
which kind of goes into these concepts

1319
00:59:14,860 --> 00:59:22,960
in more detail and that's available from

1320
00:59:16,840 --> 00:59:25,270
dub dub dub NGS software com<font color="#E5E5E5"> I'll send</font>

1321
00:59:22,960 --> 00:59:27,040
this slide deck to layer<font color="#E5E5E5"> one guys</font>

1322
00:59:25,270 --> 00:59:29,410
because I've also got some extra points

1323
00:59:27,040 --> 00:59:35,340
at the end but just kind of things I

1324
00:59:29,410 --> 00:59:35,339
pulled out<font color="#E5E5E5"> the pxe spec etcetera yeah</font>

1325
00:59:42,450 --> 00:59:56,939
yeah yeah typically 64k 128 k yeah

1326
01:00:02,999 --> 01:00:10,269
yeah very true not that I have done a

1327
01:00:08,799 --> 01:00:12,069
<font color="#E5E5E5">lot of analysis on this but there are</font>

1328
01:00:10,269 --> 01:00:14,348
probably there's probably code in there

1329
01:00:12,069 --> 01:00:16,359
<font color="#E5E5E5">that's</font><font color="#CCCCCC"> very rarely cool that you could</font>

1330
01:00:14,349 --> 01:00:17,859
trim out so you could probably give them

1331
01:00:16,359 --> 01:00:19,720
like a much neater image of you know

1332
01:00:17,859 --> 01:00:21,130
they're probably bloatware on the way

1333
01:00:19,720 --> 01:00:22,660
they've developed the firmware you could

1334
01:00:21,130 --> 01:00:30,599
like or you<font color="#E5E5E5"> could even like</font><font color="#CCCCCC"> optimize</font>

1335
01:00:22,660 --> 01:00:30,598
<font color="#CCCCCC">their assembler to save a few bites okay</font>

1336
01:00:37,109 --> 01:00:50,109
true you<font color="#CCCCCC"> could do that yeah I mean</font>

1337
01:00:48,220 --> 01:00:52,569
that's<font color="#E5E5E5"> why if the boot is really nice</font>

1338
01:00:50,109 --> 01:00:55,420
and that gives you<font color="#E5E5E5"> TCP so you can</font>

1339
01:00:52,569 --> 01:00:57,308
potentially do HTTP though then again

1340
01:00:55,420 --> 01:00:59,019
it's a question of you know what if I

1341
01:00:57,309 --> 01:01:03,190
need a proxy server to get out your

1342
01:00:59,019 --> 01:01:06,459
enterprise really it's kind of again

1343
01:01:03,190 --> 01:01:09,099
it's it's probably not looking at the

1344
01:01:06,460 --> 01:01:10,779
<font color="#E5E5E5">kind of model of we can create a rootkit</font>

1345
01:01:09,099 --> 01:01:11,890
that's going to we can deploy on every

1346
01:01:10,779 --> 01:01:13,869
machine that's going to work everywhere

1347
01:01:11,890 --> 01:01:17,799
this again<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the targeted attack that</font>

1348
01:01:13,869 --> 01:01:22,299
has hard-coded parameters so yeah even

1349
01:01:17,799 --> 01:01:24,099
<font color="#E5E5E5">if I mean maybe we could get UDP out</font>

1350
01:01:22,299 --> 01:01:26,489
your organization disguised as a DNS

1351
01:01:24,099 --> 01:01:26,489
request

1352
01:01:37,350 --> 01:01:43,600
yeah not really<font color="#CCCCCC"> in doing well certainly</font>

1353
01:01:42,070 --> 01:01:50,020
not doing the<font color="#CCCCCC"> act p stuff because that's</font>

1354
01:01:43,600 --> 01:01:52,990
<font color="#E5E5E5">kind of high level than that and the</font>

1355
01:01:50,020 --> 01:01:55,810
reason<font color="#E5E5E5"> i chose the int 10 hook for this</font>

1356
01:01:52,990 --> 01:01:57,759
was because again it's<font color="#CCCCCC"> i'm cooking</font>

1357
01:01:55,810 --> 01:01:59,650
something low level but by the time

1358
01:01:57,760 --> 01:02:02,770
actually gets called we're like late

1359
01:01:59,650 --> 01:02:05,050
into the windows boot I know the e I

1360
01:02:02,770 --> 01:02:07,330
guys ran into some issues with the 820

1361
01:02:05,050 --> 01:02:08,890
stuff because they've actually if you

1362
01:02:07,330 --> 01:02:11,920
look at aecom they've done a second

1363
01:02:08,890 --> 01:02:14,020
version of boot routes and there's some

1364
01:02:11,920 --> 01:02:20,680
<font color="#E5E5E5">more stuff and I'd recommend checking</font>

1365
01:02:14,020 --> 01:02:23,080
that up<font color="#E5E5E5"> actually not too many i went to</font>

1366
01:02:20,680 --> 01:02:25,660
the recycled pc store in seattle and

1367
01:02:23,080 --> 01:02:28,720
bought a ton of what cheap cards and a

1368
01:02:25,660 --> 01:02:33,040
trick i found this that even if you Luca

1369
01:02:28,720 --> 01:02:35,770
<font color="#CCCCCC">cards if you can you</font><font color="#E5E5E5"> basically take it</font>

1370
01:02:33,040 --> 01:02:38,710
out sticker<font color="#E5E5E5"> PCI old pci card in not an</font>

1371
01:02:35,770 --> 01:02:40,630
<font color="#E5E5E5">ADP pci express the pci card in boot off</font>

1372
01:02:38,710 --> 01:02:43,450
that tell the operating system<font color="#CCCCCC"> to other</font>

1373
01:02:40,630 --> 01:02:44,800
the bios to<font color="#E5E5E5"> always use</font><font color="#CCCCCC"> that card then</font>

1374
01:02:43,450 --> 01:02:47,350
you can typically put the other car back

1375
01:02:44,800 --> 01:02:49,450
in and then run the vendor tools on<font color="#CCCCCC"> it</font>

1376
01:02:47,350 --> 01:02:51,610
to try and recover it so none

1377
01:02:49,450 --> 01:02:54,910
irreparably yet but<font color="#CCCCCC"> i fear them a pretty</font>

1378
01:02:51,610 --> 01:03:08,130
messed up right now<font color="#E5E5E5"> but don't over there</font>

1379
01:02:54,910 --> 01:03:08,129
first yeah

1380
01:03:16,350 --> 01:03:21,850
um I guess so but at the end of the day

1381
01:03:19,780 --> 01:03:23,860
like it's all down to that it'd<font color="#E5E5E5"> be nice</font>

1382
01:03:21,850 --> 01:03:27,160
for the users that want that<font color="#E5E5E5"> to be</font><font color="#CCCCCC"> able</font>

1383
01:03:23,860 --> 01:03:28,510
to modify that but you know<font color="#E5E5E5"> most users</font>

1384
01:03:27,160 --> 01:03:30,299
aren't ever gonna delve in those

1385
01:03:28,510 --> 01:03:33,430
settings and actually change anything

1386
01:03:30,300 --> 01:03:34,990
actually I just remembered that one of

1387
01:03:33,430 --> 01:03:36,370
the slides I wanted to put in<font color="#CCCCCC"> a guy from</font>

1388
01:03:34,990 --> 01:03:40,000
Microsoft pointed this out to me pointed

1389
01:03:36,370 --> 01:03:42,460
me to<font color="#CCCCCC"> a website there was I think some</font>

1390
01:03:40,000 --> 01:03:44,440
bios a few years<font color="#E5E5E5"> back where a program i</font>

1391
01:03:42,460 --> 01:03:46,510
managed<font color="#E5E5E5"> to get a backdoor into it that</font>

1392
01:03:44,440 --> 01:03:49,660
on his birthday<font color="#CCCCCC"> beeped happy birthday</font>

1393
01:03:46,510 --> 01:03:52,660
and that's<font color="#E5E5E5"> a good example</font><font color="#CCCCCC"> of we've</font>

1394
01:03:49,660 --> 01:03:54,339
talked about you<font color="#CCCCCC"> know getting physical</font>

1395
01:03:52,660 --> 01:03:56,589
access to the machine or hacking machine

1396
01:03:54,340 --> 01:03:58,720
while it's online but another kind of

1397
01:03:56,590 --> 01:04:00,520
interesting point is to what extent you

1398
01:03:58,720 --> 01:04:02,529
trust the factory<font color="#E5E5E5"> this thing came out of</font>

1399
01:04:00,520 --> 01:04:20,920
<font color="#E5E5E5">and everyone that's had contact with the</font>

1400
01:04:02,530 --> 01:04:24,190
card using what sorry um you mean eight

1401
01:04:20,920 --> 01:04:26,320
just AGP cards in general not that<font color="#CCCCCC"> i'm</font>

1402
01:04:24,190 --> 01:04:31,090
aware of though one of<font color="#E5E5E5"> my I've tested</font>

1403
01:04:26,320 --> 01:04:33,670
this on on pci AGP and pci e in terms of

1404
01:04:31,090 --> 01:04:35,650
the way expansion roms work they are

1405
01:04:33,670 --> 01:04:37,510
<font color="#E5E5E5">exactly the same across all of them</font>

1406
01:04:35,650 --> 01:04:39,280
regardless of how the actual card may

1407
01:04:37,510 --> 01:04:41,890
work after that in terms<font color="#E5E5E5"> of expansion</font>

1408
01:04:39,280 --> 01:04:44,860
rom they're all the same so<font color="#E5E5E5"> you know I</font>

1409
01:04:41,890 --> 01:04:46,870
tried the crappy<font color="#E5E5E5"> pci cards</font><font color="#CCCCCC"> i got first</font>

1410
01:04:44,860 --> 01:04:48,970
but then I when I kind<font color="#CCCCCC"> of got a bit</font>

1411
01:04:46,870 --> 01:04:50,920
cocky I moved on to my PCI Express cards

1412
01:04:48,970 --> 01:04:53,609
and gave them a shot and they work just

1413
01:04:50,920 --> 01:04:53,610
the same sir

1414
01:04:53,700 --> 01:05:16,759
cool thank you much are you<font color="#E5E5E5"> going to</font>

1415
01:05:13,890 --> 01:05:16,759
take a short break real quick

