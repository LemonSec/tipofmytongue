1
00:00:00,170 --> 00:00:04,580
and without further ado we have leap
presenting reverse engineering 101

2
00:00:04,580 --> 00:00:07,919
anybody who knows me knows I love this
topic

3
00:00:07,919 --> 00:00:11,740
and I maybe some other things you learn
will help you in the CTF n

4
00:00:11,740 --> 00:00:18,740
yep schedule contests el take away
morning everyone

5
00:00:21,130 --> 00:00:28,130
mines cleat the we're gonna get started
here

6
00:00:43,280 --> 00:00:47,000
sell for those you don't know me I'm
sleepy I'm member no space lab's

7
00:00:47,000 --> 00:00:51,640
on we're gonna go up into reverse
engineering 101

8
00:00:51,640 --> 00:00:55,780
just a quick show of hands I how many
people here have never

9
00:00:55,780 --> 00:00:59,129
I i assume a lot of your program is how
many have you have gone the other way

10
00:00:59,129 --> 00:00:59,629
taking

11
00:00:59,629 --> 00:01:03,010
programs apart tell you

12
00:01:03,010 --> 00:01:06,890
okay well good this is a good stir

13
00:01:06,890 --> 00:01:11,119
a group to start with a reverse
engineering is a really interesting

14
00:01:11,119 --> 00:01:11,920
topic

15
00:01:11,920 --> 00:01:15,880
I've been interested in it for a long
time om I'm still learning it

16
00:01:15,880 --> 00:01:20,339
so we're going to go in and start here

17
00:01:20,340 --> 00:01:23,940
'em I want to take off my head here
everyone knows

18
00:01:23,940 --> 00:01:27,429
me by my hat I pretty much never take it
off special Amicon

19
00:01:27,429 --> 00:01:30,450
that does kinda get in the way sometimes

20
00:01:30,450 --> 00:01:35,270
that's what my hair looks like an hour
right

21
00:01:35,270 --> 00:01:38,500
pretty cell

22
00:01:38,500 --> 00:01:43,220
who is this dude up my name sleeper so
as I said

23
00:01:43,220 --> 00:01:45,020
I'm a network engineer an

24
00:01:45,020 --> 00:01:48,789
an architect formally with Nortel
Networks

25
00:01:48,789 --> 00:01:52,009
on our ideal Asus girl Avaya

26
00:01:52,009 --> 00:01:58,759
HP and Jennifer I am NOT a professional
reverse engineer

27
00:01:58,759 --> 00:02:02,069
I don't do this for a living as i said
im a network engineer a America I

28
00:02:02,069 --> 00:02:06,329
and/or scary answer stuff I is just an
interest in mine

29
00:02:06,329 --> 00:02:10,250
I am a malware analyst temperature and

30
00:02:10,250 --> 00:02:15,209
capture the flag player i do teach
occasional assembly language classes at

31
00:02:15,209 --> 00:02:17,489
null space that's kind of an
exaggeration I think I have

32
00:02:17,489 --> 00:02:21,410
done maybe two or three and the the
tented

33
00:02:21,410 --> 00:02:25,540
space can a far parte just because every
life issues

34
00:02:25,540 --> 00:02:29,679
as my contact information adlai DC a
gmail

35
00:02:29,680 --> 00:02:34,709
gmail dot com or you can get me I I do
run desk on 805

36
00:02:34,709 --> 00:02:38,670
I Def Con 805 mainly consists of me
sitting in a bar

37
00:02:38,670 --> 00:02:42,309
drinking with lotsa plenty stuff around
me so if he ever actually up in the

38
00:02:42,310 --> 00:02:43,730
Ventura County area

39
00:02:43,730 --> 00:02:47,220
I do put out to nose is fine going to be
at the bar

40
00:02:47,220 --> 00:02:50,989
with a tricky stuff with my blankie
stuff doing pinky drinky things with

41
00:02:50,989 --> 00:02:51,790
pointy things

42
00:02:51,790 --> 00:02:56,790
and so come on by and sit down or talk
about hackery things

43
00:02:56,790 --> 00:03:01,078
cell this talks more about processed and
tools

44
00:03:01,079 --> 00:03:04,959
%uh the tools can vary it depends on
personal preference

45
00:03:04,959 --> 00:03:08,530
%uh but the the process the mindset is

46
00:03:08,530 --> 00:03:13,700
is a lot more important than what tools
are actually using I

47
00:03:13,700 --> 00:03:17,328
prepare for a lot of self-directed study
and

48
00:03:17,329 --> 00:03:20,470
the stuff is not easy to learn

49
00:03:20,470 --> 00:03:21,040
and

50
00:03:21,040 --> 00:03:26,079
it's very it can be very esoteric sell
you can have to push yourself

51
00:03:26,080 --> 00:03:29,570
and delight exercises as I said I'm
still learning I'm not a professional

52
00:03:29,570 --> 00:03:31,829
and buying that stretch the imagination

53
00:03:31,830 --> 00:03:34,880
I it can be very

54
00:03:34,880 --> 00:03:38,590
on a time where they can be very
frustrating other keep trying

55
00:03:38,590 --> 00:03:43,480
had remember in in the arms race between
malware writers

56
00:03:43,480 --> 00:03:47,109
and reverse engineers the reverse
engineers

57
00:03:47,110 --> 00:03:50,820
will always win because the stuff so as
to run on the computer

58
00:03:50,820 --> 00:03:54,660
and if they can run then we can decoded
we can debug it weaken

59
00:03:54,660 --> 00:03:58,170
figure out what's going on I

60
00:03:58,170 --> 00:04:02,489
do exercises right stupid little
programs and disassembled and see how

61
00:04:02,490 --> 00:04:03,430
they showed up

62
00:04:03,430 --> 00:04:06,920
see what your compiler did that program
the

63
00:04:06,920 --> 00:04:11,559
it doesn't have to be anything really
big just be- a couple for loops maybe a

64
00:04:11,560 --> 00:04:14,970
a case which is something like that and
see how it shows up in a silicon you'll

65
00:04:14,970 --> 00:04:17,760
get familiar with how that assembly is
going to show up

66
00:04:17,760 --> 00:04:21,339
as hell is going to represent your
higher-level language structures

67
00:04:21,339 --> 00:04:24,690
I A Crack Muse keygen me is

68
00:04:24,690 --> 00:04:29,110
but you can get Mauer examples are
several good now where compilation web

69
00:04:29,110 --> 00:04:29,710
sites

70
00:04:29,710 --> 00:04:34,380
out there that you can i join and get
malware live malware samples

71
00:04:34,380 --> 00:04:37,980
from and take them apart seen what they
did see what they do

72
00:04:37,980 --> 00:04:41,560
I do have a resource page listed at the
end

73
00:04:41,560 --> 00:04:45,220
if you guys want is take a look into
some more

74
00:04:45,220 --> 00:04:50,350
things for that %uh sources said the
stock it's kinda help you guys

75
00:04:50,350 --> 00:04:54,900
a introduce you to one process my
process for reverse engineering it

76
00:04:54,900 --> 00:04:56,090
doesn't have to be yours

77
00:04:56,090 --> 00:04:59,590
but people would like to do things in
different order some people like to do

78
00:04:59,590 --> 00:05:02,690
use dynamic analysis first cuz it's
quick to make it a lot of quick

79
00:05:02,690 --> 00:05:03,400
indicators

80
00:05:03,400 --> 00:05:07,210
what the man hours trying to do and then
they go an and the reverse

81
00:05:07,210 --> 00:05:12,770
statically a lot the interesting
features so why would you want to

82
00:05:12,770 --> 00:05:15,969
reverse engineer in the first place
you've got a perfectly good program

83
00:05:15,970 --> 00:05:19,980
wanna just leave it the way it is well
you can help do a couple things with it

84
00:05:19,980 --> 00:05:24,110
you may be interested in how it's doing
a specific feature in USA all that's a

85
00:05:24,110 --> 00:05:26,970
really cool thing but you don't have the
source code

86
00:05:26,970 --> 00:05:32,010
so you want to go and see how it's
actually accomplishing that feature

87
00:05:32,010 --> 00:05:35,620
you might wanna find hidden information
especially if you're in a capture the

88
00:05:35,620 --> 00:05:37,600
flag situation capture the flag

89
00:05:37,600 --> 00:05:42,080
writers love reverse engineering
challenges you have to take them apart

90
00:05:42,080 --> 00:05:47,260
and either either find the flag that
span obfuscated in the cold really have

91
00:05:47,260 --> 00:05:47,510
to

92
00:05:47,500 --> 00:05:52,350
rivers if the code if see a flag years
program programmatically generate any

93
00:05:52,350 --> 00:05:55,120
have to reverse the outer in this
creating the flag

94
00:05:55,120 --> 00:06:00,690
I to get around protection schemes you
might be surprised we might not

95
00:06:00,690 --> 00:06:03,950
to see just how laughably bad

96
00:06:03,950 --> 00:06:07,310
a lot of copy protection actually is you
could have a

97
00:06:07,310 --> 00:06:11,850
a there's one eilers reversing is a
program that had

98
00:06:11,850 --> 00:06:17,230
a big long licensed ring in our to see
if you are values are not to enable

99
00:06:17,230 --> 00:06:18,050
certain features

100
00:06:18,050 --> 00:06:21,340
and had a big deal I'll that's only
jobless to you

101
00:06:21,340 --> 00:06:24,780
take that a take that license

102
00:06:24,780 --> 00:06:28,450
key and figure out what features you are
entitled to you and went through all

103
00:06:28,450 --> 00:06:28,880
these

104
00:06:28,880 --> 00:06:33,139
machinations and and felt folding spin
Ling

105
00:06:33,139 --> 00:06:36,190
and mutilating that flag in our that to

106
00:06:36,190 --> 00:06:40,070
key in order to come up with what
features you our but at the end of the

107
00:06:40,070 --> 00:06:40,659
day

108
00:06:40,660 --> 00:06:45,110
it would come back and say are you valid
send one back

109
00:06:45,110 --> 00:06:49,840
if you're not alexander 0 back sell as
her version here what do you do

110
00:06:49,840 --> 00:06:53,669
you just that he just make it a one all
the time

111
00:06:53,669 --> 00:06:59,349
it happens a lot will be very surprised
to make money

112
00:06:59,350 --> 00:07:03,860
there are people that make their living
of love up finding bugs

113
00:07:03,860 --> 00:07:07,260
there a bug bounty programs for existing
commercial packages

114
00:07:07,260 --> 00:07:11,500
I and some people make money off it now

115
00:07:11,500 --> 00:07:15,479
do they make a lot of money it depends
on the bug they find see

116
00:07:15,479 --> 00:07:20,300
fine a lot of small Kynan not so high
dollar value buxton

117
00:07:20,300 --> 00:07:24,100
to get less money if it's a very big
wide impacting bugs n

118
00:07:24,100 --> 00:07:27,720
their places like zero day initiative
that will actually

119
00:07:27,720 --> 00:07:31,350
up broker the I'll bug bounty programs

120
00:07:31,350 --> 00:07:35,040
other companies have direct but bounty
programs that you can

121
00:07:35,040 --> 00:07:40,210
summit bucks to make money that way I
can also sell your 0 days to you

122
00:07:40,210 --> 00:07:44,780
other people such as you know the bat to
his

123
00:07:44,780 --> 00:07:48,460
they tend to pay really well but then
again you like your kneecaps to him

124
00:07:48,460 --> 00:07:51,950
but

125
00:07:51,950 --> 00:07:55,460
to add or disable features or functions
you may have a program that you may say

126
00:07:55,460 --> 00:07:57,919
this is a cool program but i wanna add
on to it

127
00:07:57,920 --> 00:08:01,000
and you may need to figure out how to
inject

128
00:08:01,000 --> 00:08:04,140
your own specific feature our code into
that program

129
00:08:04,140 --> 00:08:09,849
to develop saw for signatures and
indicators a compromise

130
00:08:09,850 --> 00:08:12,980
this is what now where are the virus
companies do

131
00:08:12,980 --> 00:08:16,740
they gather all hundreds of megabytes
are gigabytes

132
00:08:16,740 --> 00:08:20,200
%uh viruses and malware from around the
world every single day

133
00:08:20,200 --> 00:08:23,880
and they said they really take apart and
they see what time hours trying to do

134
00:08:23,880 --> 00:08:24,210
any

135
00:08:24,210 --> 00:08:28,780
develop a list up what is trying to do
the right a signature that then matches

136
00:08:28,780 --> 00:08:30,090
that particular strain

137
00:08:30,090 --> 00:08:33,360
Maller and sell if you're

138
00:08:33,360 --> 00:08:36,620
working at a company that you need to
find out if a specific

139
00:08:36,620 --> 00:08:40,390
peace malware is present on your works
computers you can develop

140
00:08:40,390 --> 00:08:43,530
indicators a compromise it then you can
go and

141
00:08:43,530 --> 00:08:46,800
do a search for that on other computers
in your system

142
00:08:46,800 --> 00:08:50,560
without having to go through %eh fuel
for huge can you can

143
00:08:50,560 --> 00:08:56,510
developer targeted indicators government
for shits and giggles

144
00:08:56,510 --> 00:08:59,540
%eh yeah sometimes it's just fun to
break things

145
00:08:59,540 --> 00:09:02,680
Anna here for some people it's just a
puzzle

146
00:09:02,680 --> 00:09:06,459
I'm I'm one of those people it kinda
interests me

147
00:09:06,460 --> 00:09:09,560
a that's just a personal preference

148
00:09:09,560 --> 00:09:13,069
step 1: learn assembly language

149
00:09:13,070 --> 00:09:18,070
sorry on sorry

150
00:09:18,070 --> 00:09:21,620
and there's really no two ways about it
when you're reversing

151
00:09:21,620 --> 00:09:25,840
a program what when you decide let you
don't get source code out of it

152
00:09:25,840 --> 00:09:30,050
you get assembly language and you have
to know what you're looking at

153
00:09:30,050 --> 00:09:34,839
Anna it that said you do not have to
learn

154
00:09:34,840 --> 00:09:39,890
all assembly language okay there are
hundreds if not thousands

155
00:09:39,890 --> 00:09:44,260
operation colors depending on what
architecture you're working in

156
00:09:44,260 --> 00:09:48,370
but you don't need to know all of them
there are

157
00:09:48,370 --> 00:09:51,590
a subset up those up cards that are used
all the time

158
00:09:51,590 --> 00:09:56,740
jumps a moose copies attempts string
compares that sorta stuff

159
00:09:56,740 --> 00:09:59,750
and then there's weird ones like an IMAX

160
00:09:59,750 --> 00:10:04,260
or a sissy stuff for three now that
aren't really used a whole lot

161
00:10:04,260 --> 00:10:08,700
you don't have to dolan memorize them if
you get one of those functions in your

162
00:10:08,700 --> 00:10:10,170
disassemble you can go look it up

163
00:10:10,170 --> 00:10:13,729
but the main op kurds that everyone uses
are

164
00:10:13,730 --> 00:10:19,150
well-known and you'll get to recognize
them very quickly so the reverse

165
00:10:19,150 --> 00:10:20,360
engineering environment

166
00:10:20,360 --> 00:10:23,860
a virtual machines are your friend

167
00:10:23,860 --> 00:10:27,420
they make it very easy to analyze
something then reset back to a known

168
00:10:27,420 --> 00:10:28,979
good state without having to

169
00:10:28,980 --> 00:10:32,330
reformat your hard drive there are
people that have

170
00:10:32,330 --> 00:10:36,640
up are a reversing set up that consists
of a stand-alone machine

171
00:10:36,640 --> 00:10:40,550
dead dade the image and then it runs

172
00:10:40,550 --> 00:10:45,550
because sometimes a malware and other
programs can be virtual machine aware

173
00:10:45,550 --> 00:10:49,130
and they change their behavior based on
whether or not they detect a virtual

174
00:10:49,130 --> 00:10:49,590
machine

175
00:10:49,590 --> 00:10:53,970
%uh cell that's one benefit having a
stand-alone system

176
00:10:53,970 --> 00:11:00,120
just does now analysis or whatever it is
but so you filled out your VM with all

177
00:11:00,120 --> 00:11:01,530
your tools and instrumentation

178
00:11:01,530 --> 00:11:08,530
snapshot thats not news to anyone you do
have to isolate the VM

179
00:11:08,890 --> 00:11:12,760
from the network as you don't wanna be
infecting the rest if your organization

180
00:11:12,760 --> 00:11:15,780
but you have to remember that your host

181
00:11:15,780 --> 00:11:19,160
that is hosting the VM is also a note on
that isolated network

182
00:11:19,160 --> 00:11:22,439
cell you have to make sure that your
current computer

183
00:11:22,440 --> 00:11:27,329
that the host computer is patched and so
you don't

184
00:11:27,329 --> 00:11:32,079
get the clap and then

185
00:11:32,079 --> 00:11:35,859
as a good neighbor Eisley your host
machine from the network if it's

186
00:11:35,860 --> 00:11:42,509
something that's particularly nasty like
alarm or something like that the tools

187
00:11:42,509 --> 00:11:45,850
he everyone starts out with a
disassembler

188
00:11:45,850 --> 00:11:49,629
and a debugger the December gold
standard is I to pro

189
00:11:49,629 --> 00:11:53,699
there is a freeware a free version
available and it's

190
00:11:53,699 --> 00:11:59,449
awesome the IDA Pro paid version is even
more awesome but it's also

191
00:11:59,449 --> 00:12:04,378
money lots of money especially if you
get the X-rays Decompiler

192
00:12:04,379 --> 00:12:09,290
IDA Pro professional %uh the full paid
version with x-rays Decompiler

193
00:12:09,290 --> 00:12:13,420
is almost five grand soul for

194
00:12:13,420 --> 00:12:17,410
amatures like me it's not cost-effective
thing we all wanna

195
00:12:17,410 --> 00:12:22,399
pay needed get it now get it happily a
specialized december's for some

196
00:12:22,399 --> 00:12:23,399
languages

197
00:12:23,399 --> 00:12:26,970
the do exist year like if you're working
with dotnet

198
00:12:26,970 --> 00:12:31,470
and they may present d'information a
little better

199
00:12:31,470 --> 00:12:36,660
if you're working with Flash technology
news as two Bs investigators from the lb

200
00:12:36,660 --> 00:12:40,920
if you're working dotnet dot net
reflector grail of

201
00:12:40,920 --> 00:12:44,040
they can take part that Bicutan

202
00:12:44,040 --> 00:12:47,230
that program and presented in a little
better

203
00:12:47,230 --> 00:12:52,170
way a debugger I usual choices are Ali
deberg

204
00:12:52,170 --> 00:12:56,050
or a Muni on I ladybugs been around for
a long time

205
00:12:56,050 --> 00:13:01,128
its still supported it's a great program
there's a lotta program a lotta plugins

206
00:13:01,129 --> 00:13:05,430
and scripts available for ollie immunity
if you don't know

207
00:13:05,430 --> 00:13:09,250
Muni to bisbee they took a ladybug
rewrote it with the Python back and so

208
00:13:09,250 --> 00:13:10,129
that allows

209
00:13:10,129 --> 00:13:14,170
up erect Python scripts immunity is

210
00:13:14,170 --> 00:13:17,209
kinda geared more towards dollar-billion
ala Cys

211
00:13:17,209 --> 00:13:20,888
an ollie is geared more towards first
engineering

212
00:13:20,889 --> 00:13:26,029
that makes sense on GDP for Linux for
the OG's

213
00:13:26,029 --> 00:13:30,089
datagram specter yeah blue GB

214
00:13:30,089 --> 00:13:34,610
yes eg day gramm it's actually on the
auspicious

215
00:13:34,610 --> 00:13:38,170
Labs website the he has a GD in it

216
00:13:38,170 --> 00:13:41,819
program for GTD that really takes it to
the next level

217
00:13:41,819 --> 00:13:46,860
%uh windy dutch whore windbag for
Windows kernel debugging

218
00:13:46,860 --> 00:13:51,160
its kinda the only game in town after
those view

219
00:13:51,160 --> 00:13:54,660
for familiar with when delivering three
verses ring 0

220
00:13:54,660 --> 00:13:58,860
debugging a four rings era to begin
getting into the Windows kernel that's

221
00:13:58,860 --> 00:14:00,290
not just userspace

222
00:14:00,290 --> 00:14:03,579
debugging kennel lindbergh is is

223
00:14:03,579 --> 00:14:07,099
dealing game in town that really gets
access to those

224
00:14:07,100 --> 00:14:11,529
system levels other tools Iran into

225
00:14:11,529 --> 00:14:15,180
PE I D it's still around the guy that
developed it

226
00:14:15,180 --> 00:14:18,699
I A is no longer updating it but there's
a operation available

227
00:14:18,699 --> 00:14:23,008
it's good for kinda general PE
investigation it will show you the PE

228
00:14:23,009 --> 00:14:23,759
headers

229
00:14:23,759 --> 00:14:27,050
and we'll show you I you know the
sections

230
00:14:27,050 --> 00:14:32,758
only PE things I will get into it can
also identify lot common Packers

231
00:14:32,759 --> 00:14:36,220
and for certain Packers it actually can

232
00:14:36,220 --> 00:14:41,339
contact them unpacked the program for
you Lord PE

233
00:14:41,339 --> 00:14:44,670
years a another program that's available
I

234
00:14:44,670 --> 00:14:48,040
its useful for its main Cup

235
00:14:48,040 --> 00:14:51,480
panic claim to fame is once you dump
I'll

236
00:14:51,480 --> 00:14:55,120
on packed programme out love process
memory

237
00:14:55,120 --> 00:14:59,040
it may or may not have its import
address table fixed

238
00:14:59,040 --> 00:15:02,110
which is necessary for a two-run
separate without the Packer

239
00:15:02,110 --> 00:15:07,019
and LRP can help %uh to reconstruct the
PE header and

240
00:15:07,019 --> 00:15:11,050
the IT other plugins that he might

241
00:15:11,050 --> 00:15:15,290
find useful Ali dum prolly don't exiled
on taxes and new version

242
00:15:15,290 --> 00:15:18,620
and is available for ollie

243
00:15:18,620 --> 00:15:20,240
immunity an

244
00:15:20,240 --> 00:15:23,880
and I believe it also has a when debug
other

245
00:15:23,880 --> 00:15:27,589
version available as well %uh

246
00:15:27,589 --> 00:15:30,720
i dont is useful for again unless you on

247
00:15:30,720 --> 00:15:35,220
pack program you can then dump its
memory space into a file

248
00:15:35,220 --> 00:15:38,610
and then that file is is the Packers
been stripped of

249
00:15:38,610 --> 00:15:42,089
making it clean code out a bit on

250
00:15:42,089 --> 00:15:45,250
it can also be useful for finding

251
00:15:45,250 --> 00:15:48,649
the original entry point we're going to
talk about what those are

252
00:15:48,649 --> 00:15:53,430
a little bit I it has some specific
trees features that allow you to you

253
00:15:53,430 --> 00:15:57,880
go into the assembly and Hannah step
through the section haps to find

254
00:15:57,880 --> 00:16:01,029
where the packer and where the real
program begins

255
00:16:01,029 --> 00:16:06,339
some I Mona dot high from the coral and
team is

256
00:16:06,339 --> 00:16:10,020
amazing if you're in a vulnerability
analysis

257
00:16:10,020 --> 00:16:13,270
I use it with a Muni immunity debugger

258
00:16:13,270 --> 00:16:16,680
and you can do things like fine drop
chance for real

259
00:16:16,680 --> 00:16:21,229
II can find all instances jumpy Axer
cold

260
00:16:21,230 --> 00:16:25,730
and give you a list where they r Memory
it can do a lot I really very cool

261
00:16:25,730 --> 00:16:26,430
things

262
00:16:26,430 --> 00:16:29,849
TLS catch here's a little plugin

263
00:16:29,850 --> 00:16:34,079
for up for ollie %uh it's useful for

264
00:16:34,079 --> 00:16:37,760
trapping tale a thread local storage
called AXS

265
00:16:37,760 --> 00:16:41,490
and we'll get into that in a little bit
%uh

266
00:16:41,490 --> 00:16:45,510
a hex editor for Ted at the hexane on

267
00:16:45,510 --> 00:16:50,610
yes sometimes just needed ahead a
program sometimes you need to change

268
00:16:50,610 --> 00:16:54,350
ahead or something like that hands
Exeter's useful for

269
00:16:54,350 --> 00:16:57,770
so certain sum the lingo you'll hear

270
00:16:57,770 --> 00:17:02,459
a racial issue point all the time
shooting evers engineering I every

271
00:17:02,459 --> 00:17:07,169
a program in DLL has an original entry
point where the program is going to be

272
00:17:07,170 --> 00:17:08,220
loaded into memory

273
00:17:08,220 --> 00:17:11,640
and steric several common

274
00:17:11,640 --> 00:17:16,730
places that they are usually learning
memory hex 400,000 as one of them

275
00:17:16,730 --> 00:17:20,610
%uh and because memories virtualized

276
00:17:20,609 --> 00:17:24,579
all these deals all these programs are
gonna try alone in the same memory space

277
00:17:24,579 --> 00:17:25,970
Linda says that's fine

278
00:17:25,970 --> 00:17:29,040
and just maps them between virtual
memory and get some

279
00:17:29,040 --> 00:17:32,430
our own virtual memory page and then
maps it over to a real

280
00:17:32,430 --> 00:17:35,440
memory location and that's all behind
the scenes

281
00:17:35,440 --> 00:17:39,160
sell all these programs are think
they're there at the same memory

282
00:17:39,160 --> 00:17:41,830
location but they're actually not there
just virtually mapped

283
00:17:41,830 --> 00:17:47,220
the original entry point forms the base
address from which

284
00:17:47,220 --> 00:17:50,890
are relative virtual at Ursinus are
calculated

285
00:17:50,890 --> 00:17:55,160
cell one programs are built

286
00:17:55,160 --> 00:17:58,400
the program doesn't know where

287
00:17:58,400 --> 00:18:01,820
the various functions are going to
reside in memory especially

288
00:18:01,820 --> 00:18:05,230
with newer operating systems where
they're using address space layout

289
00:18:05,230 --> 00:18:06,340
randomization

290
00:18:06,340 --> 00:18:10,669
they can be all over the place and sell
day miss a well

291
00:18:10,670 --> 00:18:14,420
I don't know where I am but hex a
thousand bites

292
00:18:14,420 --> 00:18:18,150
that way is a function that needs that's
a relative virtual address from wherever

293
00:18:18,150 --> 00:18:19,040
you are

294
00:18:19,040 --> 00:18:22,340
to where we need to go the difference
between those two is

295
00:18:22,340 --> 00:18:26,050
is the r-va says we just talked about

296
00:18:26,050 --> 00:18:30,500
so is a memory offset from the base
memory location image sell your

297
00:18:30,500 --> 00:18:34,870
your dealers loaded into memory and then
you say well for this message box

298
00:18:34,870 --> 00:18:38,840
a function it is 1200 bites

299
00:18:38,840 --> 00:18:43,860
down from Irish electrically I

300
00:18:43,860 --> 00:18:47,219
sell your see ABC have a

301
00:18:47,220 --> 00:18:52,610
image that gallard into hex for her 1000
if your relative virtual addresses X

302
00:18:52,610 --> 00:18:53,820
1000 than your

303
00:18:53,820 --> 00:18:57,399
your virtual address for that function
or that

304
00:18:57,400 --> 00:19:01,470
piece a dado would be at for her 1,007
exxon's

305
00:19:01,470 --> 00:19:06,320
so the import address table

306
00:19:06,320 --> 00:19:10,020
is really important a it's a map

307
00:19:10,020 --> 00:19:14,030
%uh all the various functions that a
program needs to run

308
00:19:14,030 --> 00:19:17,480
and the memory location where those
virtual

309
00:19:17,480 --> 00:19:21,900
I'll memory locations of where those
functions are on

310
00:19:21,900 --> 00:19:26,310
when your programming again you don't
know where

311
00:19:26,310 --> 00:19:29,429
these a deal as you're gonna load into
memory

312
00:19:29,430 --> 00:19:34,740
a so we call them by their function name
and the windows loader less loading up

313
00:19:34,740 --> 00:19:35,950
the PE file

314
00:19:35,950 --> 00:19:39,000
than maps the function name to

315
00:19:39,000 --> 00:19:39,800
where that

316
00:19:39,800 --> 00:19:44,950
action has been mapped in memory this is
important for working with address space

317
00:19:44,950 --> 00:19:46,330
layout randomization

318
00:19:46,330 --> 00:19:51,560
before we had a SLR II virus writers and
other people could count on functions

319
00:19:51,560 --> 00:19:55,070
being loaded into specific memory
locations a good statically color does

320
00:19:55,070 --> 00:19:58,270
and SLR was put in to help combat

321
00:19:58,270 --> 00:20:02,040
that sell a DLL that you rely on

322
00:20:02,040 --> 00:20:06,490
to make your virus run manana la men are
may no longer be at the same location

323
00:20:06,490 --> 00:20:07,530
all the time ticking

324
00:20:07,530 --> 00:20:10,879
change windows can can randomize

325
00:20:10,880 --> 00:20:13,980
where it's putting in a memory cell

326
00:20:13,980 --> 00:20:17,450
unless all you needed functions have
been statically compiled

327
00:20:17,450 --> 00:20:21,230
into the program you're gonna have
imports a program

328
00:20:21,230 --> 00:20:25,550
will have an import able to say I need
message box a I need a

329
00:20:25,550 --> 00:20:28,600
get prague I get process address a need
to

330
00:20:28,600 --> 00:20:32,219
get model name I need all these
functions in order to you

331
00:20:32,220 --> 00:20:35,380
a work with the window system unless

332
00:20:35,380 --> 00:20:39,570
use deadly compile you can's you can do
is cause data compilation where you

333
00:20:39,570 --> 00:20:42,800
the in your cut when you're compiling a
program you say

334
00:20:42,800 --> 00:20:46,590
I want all the functions that I need to
be wrapped up into my program

335
00:20:46,590 --> 00:20:51,620
and it doesn't call anybody else the
problem is it makes your program here

336
00:20:51,620 --> 00:20:56,659
which and cell in order to keep things
small

337
00:20:56,660 --> 00:21:00,460
a you generally it will have

338
00:21:00,460 --> 00:21:07,460
Windows API calls which means you have
to have imports

339
00:21:07,509 --> 00:21:11,119
so the general process for reverse
engineering his identify look kinda file

340
00:21:11,119 --> 00:21:11,759
it is

341
00:21:11,759 --> 00:21:15,509
a then you'd identify

342
00:21:15,509 --> 00:21:20,299
whether or not the proper the file is
packed we're going to Packers

343
00:21:20,299 --> 00:21:24,679
in a little bit my look for interesting
strings

344
00:21:24,679 --> 00:21:28,639
don't take the strings as gospel their
guidelines they're not gonna be

345
00:21:28,639 --> 00:21:34,658
and I'll be all indicators of what
program is a check its imports and

346
00:21:34,659 --> 00:21:35,440
exports

347
00:21:35,440 --> 00:21:38,739
you can tell a lot about a program by
away imports

348
00:21:38,739 --> 00:21:44,009
I'll what functions it's gonna be
calling I

349
00:21:44,009 --> 00:21:47,330
you might possibly want upload to

350
00:21:47,330 --> 00:21:51,739
Virus Total or malware there to web
sites they have

351
00:21:51,739 --> 00:21:56,249
a large list I think I think fire is
still as $8.48

352
00:21:56,249 --> 00:21:59,259
different antivirus engines that you can

353
00:21:59,259 --> 00:22:02,289
it will submit your program or file

354
00:22:02,289 --> 00:22:05,830
to all 48 those fires engines of the
same time

355
00:22:05,830 --> 00:22:08,850
and it'll get back to list what each
those buyers

356
00:22:08,850 --> 00:22:12,449
engines detect at to take that file is
having if anything

357
00:22:12,450 --> 00:22:16,669
you can also upload a md5 sum

358
00:22:16,669 --> 00:22:21,720
and the five-string a hash your file and
search on it to see if that fails

359
00:22:21,720 --> 00:22:22,700
already been reported

360
00:22:22,700 --> 00:22:28,570
why you might not want to do this is if
you are working at a company

361
00:22:28,570 --> 00:22:31,918
and you think you have a piece of
malware that is targeted

362
00:22:31,919 --> 00:22:35,590
to your company saying a someone

363
00:22:35,590 --> 00:22:40,139
wrote virus just to get into the bank
that you work at well

364
00:22:40,139 --> 00:22:43,178
if you operate uploaded to virustotal
are malware

365
00:22:43,179 --> 00:22:46,559
you've just put up a big red flag to

366
00:22:46,559 --> 00:22:49,850
the person that wrote that now where
saying all

367
00:22:49,850 --> 00:22:53,119
your program that you wrote for this
company is being reversed

368
00:22:53,119 --> 00:22:57,529
they're on to you and then all you have
to do is change couple things

369
00:22:57,529 --> 00:23:00,980
repack it it's got a different if I some
now

370
00:23:00,980 --> 00:23:04,650
send it out again and you've got a new
variant cell

371
00:23:04,650 --> 00:23:08,650
you may tip your hand because the virus
writers watch these web sites

372
00:23:08,650 --> 00:23:11,860
and I'll submit their on md5 hashes to
see

373
00:23:11,860 --> 00:23:16,639
who's checking it out %uh

374
00:23:16,640 --> 00:23:20,230
if the it if the excusal is packed

375
00:23:20,230 --> 00:23:23,600
than you were dumped hewlett try to
unpack

376
00:23:23,600 --> 00:23:28,120
and then dump it out a memory into a
separate file that strips the Packer of

377
00:23:28,120 --> 00:23:32,129
and then you'd go into

378
00:23:32,130 --> 00:23:35,360
I like to do dynamic analysis first just
because its quicker

379
00:23:35,360 --> 00:23:38,600
on you get a lot %uh information out %uh

380
00:23:38,600 --> 00:23:42,350
let them hours trying to deal are gonna
go into how to do that I'd actually have

381
00:23:42,350 --> 00:23:46,918
a little demo if we have time what I
don't have a demo love is static

382
00:23:46,919 --> 00:23:50,380
analysis because there is nothing more
boring than watching someone else

383
00:23:50,380 --> 00:23:51,140
posture

384
00:23:51,140 --> 00:23:55,660
code on sobel talk about it than i text
into a time

385
00:23:55,660 --> 00:23:59,990
%uh so identifying the file type

386
00:23:59,990 --> 00:24:03,540
ahead the file has to run cell

387
00:24:03,540 --> 00:24:07,770
even if its masquerading as file type:
they'll still have some clues as to what

388
00:24:07,770 --> 00:24:11,929
kinda file it is every file starts with
a magic number to tell the operating

389
00:24:11,929 --> 00:24:12,380
system

390
00:24:12,380 --> 00:24:16,179
kinda file it is %uh for PE files for
Windows

391
00:24:16,179 --> 00:24:19,350
files it's a NZ is the magic number if
you look in a

392
00:24:19,350 --> 00:24:22,659
and hex editor at the any file

393
00:24:22,660 --> 00:24:26,750
any excuse will see an easy at the start
that tells us that sixty

394
00:24:26,750 --> 00:24:30,309
tells windows its next cable program
same thing for

395
00:24:30,309 --> 00:24:35,910
Linex its magic number is dot elf ans

396
00:24:35,910 --> 00:24:39,540
some malware my pretend to be a
different kind of I like a PDF it'll

397
00:24:39,540 --> 00:24:40,230
have a PDF

398
00:24:40,230 --> 00:24:45,270
extension but if you actually look at
urs excusable and

399
00:24:45,270 --> 00:24:50,320
some malware might actually a have
invalid P Hatter's Tea

400
00:24:50,320 --> 00:24:53,500
you can mess with the PE header and
change some

401
00:24:53,500 --> 00:24:57,100
love other files like file size: a

402
00:24:57,100 --> 00:25:00,360
in order to mess with debuggers
debuggers can be much

403
00:25:00,360 --> 00:25:04,000
pickier than Windows the operating
system actually it's

404
00:25:04,000 --> 00:25:07,010
when this will still try to load it but
the debugger will say

405
00:25:07,010 --> 00:25:10,300
as an invalid p header and and crap out

406
00:25:10,300 --> 00:25:13,820
so they're doing that to use smack it's
not so still runs

407
00:25:13,820 --> 00:25:17,000
when someone tries to run it but makes
that much

408
00:25:17,000 --> 00:25:23,790
harder 40 reverse engineer if you
reverse for any amount of time you're

409
00:25:23,790 --> 00:25:24,760
going to run into

410
00:25:24,760 --> 00:25:27,950
anti reversing techniques and there's a
lot of fun

411
00:25:27,950 --> 00:25:31,850
%uh there's 0 a a really good paper

412
00:25:31,850 --> 00:25:35,270
%uh written by a game a guy named Peter
fairy

413
00:25:35,270 --> 00:25:38,940
%uh I'll give you a link at the end and
that has

414
00:25:38,940 --> 00:25:42,070
a huge huge list ours %uh

415
00:25:42,070 --> 00:25:46,570
the entire reversing techniques that are
out there cell

416
00:25:46,570 --> 00:25:50,770
the first thing your gonna run into his
Packers %uh a lot on our is packed

417
00:25:50,770 --> 00:25:55,929
and we're gonna talk about those in next
they might doesn't ma

418
00:25:55,929 --> 00:25:59,870
other now I might check for a departure
or for virtual machine

419
00:25:59,870 --> 00:26:04,750
%uh they might do something called a
thread local storage call back

420
00:26:04,750 --> 00:26:07,850
am gonna cut talk about those little bit
basically

421
00:26:07,850 --> 00:26:12,000
here the thread local storage it's
abusing till I start to make sure that

422
00:26:12,000 --> 00:26:15,420
co 2 runs before you actually hit the
first break point

423
00:26:15,420 --> 00:26:20,929
in your debugging session same thing
structured exception handling

424
00:26:20,929 --> 00:26:21,780
shenanigans

425
00:26:21,780 --> 00:26:26,260
and with structured exception handling
normally structure exception handlers

426
00:26:26,260 --> 00:26:27,200
only operate

427
00:26:27,200 --> 00:26:30,340
when there's an air in the program and
they have to cash in their

428
00:26:30,340 --> 00:26:35,659
I but Miller and virus writers and
capture the flag writers like

429
00:26:35,660 --> 00:26:39,270
a CH in order to you height they're
coming or going to go into that

430
00:26:39,270 --> 00:26:44,410
they might try to encrypt stuff wearing
colored their URL's in some way

431
00:26:44,410 --> 00:26:49,809
and one area that I find really
interesting on talk about his

432
00:26:49,809 --> 00:26:53,620
embedding junk data in the code sections
you can expect go to be

433
00:26:53,620 --> 00:26:57,909
expected to be there but if you and that
junk DNA you can actually

434
00:26:57,910 --> 00:27:04,059
I'll garble the disassembly so the first
thing is to see if it's packed

435
00:27:04,059 --> 00:27:07,410
on so packets are used to shrink files

436
00:27:07,410 --> 00:27:11,850
%uh but they can also be used to you ups
obfuscate could make it hard to analyze

437
00:27:11,850 --> 00:27:12,659
and

438
00:27:12,660 --> 00:27:15,210
some Packers are better at this than
others on

439
00:27:15,210 --> 00:27:18,480
some actually I'll will insert their own

440
00:27:18,480 --> 00:27:22,540
as-yet shenanigans and other things like
that when they're packing

441
00:27:22,540 --> 00:27:27,490
file P ID can identify many common
Packers

442
00:27:27,490 --> 00:27:32,490
Rupa X is still the most common packer
GPX is a free packer

443
00:27:32,490 --> 00:27:36,040
that you can get I A just to search for
it on the internet it's out there

444
00:27:36,040 --> 00:27:39,220
%uh it's not sneaky in any way

445
00:27:39,220 --> 00:27:42,450
it just tax the file a

446
00:27:42,450 --> 00:27:46,650
one thing that you'll notice about
packed files when you're debugging

447
00:27:46,650 --> 00:27:49,700
well when you're dissembling them is
they'll have very

448
00:27:49,700 --> 00:27:53,450
few imports and exports ands

449
00:27:53,450 --> 00:27:56,700
that's because one the Packer runs it

450
00:27:56,700 --> 00:28:00,050
mangles things and they only want enough

451
00:28:00,050 --> 00:28:05,000
imports just ended up at unpacking an
estate built in a and terrorising

452
00:28:05,000 --> 00:28:09,170
features cell

453
00:28:09,170 --> 00:28:13,430
as I said the Packers shrink the file n
but while they're shrinking at it also

454
00:28:13,430 --> 00:28:15,260
destroys the import actress table

455
00:28:15,260 --> 00:28:18,780
that the original program had and it
scrambles the file

456
00:28:18,780 --> 00:28:22,030
and then once the file is packed

457
00:28:22,030 --> 00:28:26,160
the on Packers stub program gets added
onto the front to the file

458
00:28:26,160 --> 00:28:30,340
so the studs job is to you

459
00:28:30,340 --> 00:28:33,679
unpack the file rebuild the import
address table

460
00:28:33,680 --> 00:28:37,420
and then once its done its job gets out
on the lawn returns execution back to

461
00:28:37,420 --> 00:28:38,430
the original excusable

462
00:28:38,430 --> 00:28:42,710
if there are any anti reversing features

463
00:28:42,710 --> 00:28:45,940
to the packard the stuff is also going
to take care

464
00:28:45,940 --> 00:28:52,800
earth doing those features us some
Packers are really complicated them into

465
00:28:52,800 --> 00:28:56,030
is one of them a.m. it actually has a
kernel

466
00:28:56,030 --> 00:29:01,010
component as well on but no matter how
complicated is

467
00:29:01,010 --> 00:29:04,470
it seems the can't make it so complex
that doesn't run

468
00:29:04,470 --> 00:29:07,510
and it's not reliable so there's always
a way

469
00:29:07,510 --> 00:29:13,050
to on Packers waste unpack files

470
00:29:13,050 --> 00:29:17,040
she can run ill do its job little
unpacking a run just fine but you will

471
00:29:17,040 --> 00:29:18,290
get infected with whatever

472
00:29:18,290 --> 00:29:20,789
house

473
00:29:20,789 --> 00:29:24,029
you can then done from process memory
but you're still intact

474
00:29:24,029 --> 00:29:27,899
you can use and unpacking routine

475
00:29:27,899 --> 00:29:32,260
a plugin there's actually some web sites
that will unpack your program for Ian

476
00:29:32,260 --> 00:29:33,269
mail it back to you

477
00:29:33,269 --> 00:29:36,740
up breaking news a program so like

478
00:29:36,740 --> 00:29:40,880
if you get you px ni and if you know you
px was used to pack the program just use

479
00:29:40,880 --> 00:29:42,130
a QP ext unpack

480
00:29:42,130 --> 00:29:46,980
that's fine a the ones you'd better
you're not gonna have

481
00:29:46,980 --> 00:29:50,149
unpacking stuff for our custom rolled

482
00:29:50,149 --> 00:29:53,549
customer all Packers sunday rose on
Packer

483
00:29:53,549 --> 00:29:57,918
you happen to have unless is use that
Packer lot someone's already written a

484
00:29:57,919 --> 00:29:58,899
script or something for

485
00:29:58,899 --> 00:30:04,229
or plugin a you can on pac manually

486
00:30:04,230 --> 00:30:07,240
Ali script is a deeper is a is a

487
00:30:07,240 --> 00:30:12,210
plugin for Ali debug that ads on a
scripting language

488
00:30:12,210 --> 00:30:16,570
and it has some features that allow you
to actually write a script that will

489
00:30:16,570 --> 00:30:17,870
unpack for you and then you

490
00:30:17,870 --> 00:30:22,229
if you go on I'll Darcy eat out or a
curse on the other web sites

491
00:30:22,230 --> 00:30:25,419
are the rivers in web sites you'll
actually see a huge list

492
00:30:25,419 --> 00:30:28,639
art scripts people people have written
into unpack

493
00:30:28,639 --> 00:30:33,889
various Packers but you can use all your
blood

494
00:30:33,889 --> 00:30:38,100
our our alley dumps traced by section
hop to find the tail jumper gonna go

495
00:30:38,100 --> 00:30:39,990
until at the tail jump is in second

496
00:30:39,990 --> 00:30:43,769
I you can open in the debugger

497
00:30:43,769 --> 00:30:49,000
and Van Til jumping we're gonna go into
that a little bit %uh

498
00:30:49,000 --> 00:30:52,730
because a lotta Packers store the
original entry point in here

499
00:30:52,730 --> 00:30:56,059
X after unpacking cell you would look
for

500
00:30:56,059 --> 00:31:00,500
a jumpy AX that's one way to do it if
you're

501
00:31:00,500 --> 00:31:03,559
on I don't think it but the sample a
point but

502
00:31:03,559 --> 00:31:07,100
if you're if they are doing structured
exception handling other shenanigans

503
00:31:07,100 --> 00:31:08,129
where they

504
00:31:08,130 --> 00:31:11,710
they take the structure exception
handler and then they jump to it a force

505
00:31:11,710 --> 00:31:13,730
in Aaron jump to structure exception
handling

506
00:31:13,730 --> 00:31:18,519
then you what you can do is on the first
entry a structure exception handler in

507
00:31:18,519 --> 00:31:20,159
memory you can actually set a breakpoint

508
00:31:20,159 --> 00:31:24,690
on access and then when that because a
lot of Packers will clean up the

509
00:31:24,690 --> 00:31:26,260
structured exception handling chain

510
00:31:26,260 --> 00:31:29,940
before the return execution backed early
P

511
00:31:29,940 --> 00:31:33,920
cell if you set a breakpoint on access
restriction exception handler

512
00:31:33,920 --> 00:31:37,640
when the clean it up after its done
unpacking then your break point of it

513
00:31:37,640 --> 00:31:42,540
and you'll be right before the tail Jim
a

514
00:31:42,540 --> 00:31:47,440
a lot to tell James may have a long jump
followed by a bunch in all day to heal

515
00:31:47,440 --> 00:31:48,210
you'll see

516
00:31:48,210 --> 00:31:52,450
because it is the program reserves
memory space right but it's packed

517
00:31:52,450 --> 00:31:56,760
so not all that many spaces filled so
you have a job

518
00:31:56,760 --> 00:32:00,850
that's going to you take it back to the
original entry point but then

519
00:32:00,850 --> 00:32:05,669
the the data space that the program
takes up has been filled out your

520
00:32:05,670 --> 00:32:11,300
has been populated by the Packer and

521
00:32:11,300 --> 00:32:14,490
detail jumpers where the on Packer
function has done its job and then

522
00:32:14,490 --> 00:32:15,510
returns

523
00:32:15,510 --> 00:32:18,700
control other newly unpacked a

524
00:32:18,700 --> 00:32:22,580
excusable back to you it cell

525
00:32:22,580 --> 00:32:26,439
he set a breakpoint on the tail junk
you're under the breakpoint and

526
00:32:26,440 --> 00:32:30,430
than once your at back at the original
entry point then you would dump the

527
00:32:30,430 --> 00:32:31,380
program on a memory

528
00:32:31,380 --> 00:32:35,590
I do have a little Dell

529
00:32:35,590 --> 00:32:38,590
its really nothing awesome we're gonna

530
00:32:38,590 --> 00:32:43,689
gonna pack something then see how it
shows up ir

531
00:32:43,690 --> 00:32:47,280
I am sadly

532
00:32:47,280 --> 00:32:54,280
sucks service

533
00:32:57,039 --> 00:32:59,460
so we got got

534
00:32:59,460 --> 00:33:03,830
the venerable Cal at the PX cell

535
00:33:03,830 --> 00:33:07,279
celts a benign 9

536
00:33:07,279 --> 00:33:11,159
X course Sony if you want to you

537
00:33:11,159 --> 00:33:16,359
pack just GC

538
00:33:16,359 --> 00:33:22,870
to EXE count day

539
00:33:22,870 --> 00:33:24,379
OKC pactor file

540
00:33:24,380 --> 00:33:28,700
the scale here is packed its original
cal

541
00:33:28,700 --> 00:33:32,400
you can see this guy a is 112 K

542
00:33:32,400 --> 00:33:38,710
skoo here's 55k I'm

543
00:33:38,710 --> 00:33:41,760
yes so

544
00:33:41,760 --> 00:33:44,910
if we Asus

545
00:33:44,910 --> 00:33:50,800
really bad resolution okay it's so

546
00:33:50,800 --> 00:33:54,460
we've gathered when we got here we go
others searchers

547
00:33:54,460 --> 00:33:57,940
Pead so

548
00:33:57,940 --> 00:34:03,220
take a look at our entry point here it's
once you do 475 you know I remember that

549
00:34:03,220 --> 00:34:06,340
are a sections

550
00:34:06,340 --> 00:34:10,739
over here we have a text today to a
resource section

551
00:34:10,739 --> 00:34:15,408
and then they are imports and exports
over here

552
00:34:15,409 --> 00:34:21,070
and are important so you can see these
are all the Windows APIs

553
00:34:21,070 --> 00:34:25,210
and when the EPA ID laws that were
importing these are all the functions

554
00:34:25,210 --> 00:34:28,750
down here are all the functions are
going to be using in the program

555
00:34:28,750 --> 00:34:31,780
me the

556
00:34:31,780 --> 00:34:34,720
it's a Windows program so it's got
Windows and all the windows stuff is in

557
00:34:34,719 --> 00:34:35,658
use at 32 to

558
00:34:35,659 --> 00:34:38,950
DLL fine great okay

559
00:34:38,949 --> 00:34:43,370
so if we do the same thing with our pact
execute a below here you can see that

560
00:34:43,370 --> 00:34:44,620
long

561
00:34:44,620 --> 00:34:47,150
there you can see that

562
00:34:47,150 --> 00:34:50,930
are sections have been renamed you px
your own you P x1

563
00:34:50,929 --> 00:34:55,310
you can see that our entry point has
changed

564
00:34:55,310 --> 00:34:59,020
and you can see right here that Pead has

565
00:34:59,020 --> 00:35:03,980
helpfully told us that is packed if you
look over in our

566
00:35:03,980 --> 00:35:07,180
imports and exports we have no experts
right here

567
00:35:07,180 --> 00:35:12,540
our imports all the functions that we
were going to see

568
00:35:12,540 --> 00:35:17,410
in our original programming on they're
packed so the import address the import

569
00:35:17,410 --> 00:35:18,569
address table is Ben

570
00:35:18,570 --> 00:35:23,050
chewed up and a new one that the Packer
needs has been substance place

571
00:35:23,050 --> 00:35:28,970
so as I said you can on pack this

572
00:35:28,970 --> 00:35:33,970
with %uh with the program that is packed
with you can pack with

573
00:35:33,970 --> 00:35:37,319
you px course but we're not gonna do
that we're gonna do the hard way

574
00:35:37,320 --> 00:35:42,730
so we're gonna go on a holiday but lying
to you too

575
00:35:42,730 --> 00:35:43,950
open and

576
00:35:43,950 --> 00:35:47,529
in the sky and

577
00:35:47,530 --> 00:35:51,270
one thing that you'll notice here out
when I come in here

578
00:35:51,270 --> 00:35:55,040
I'm gonna run term I A up when you see
this

579
00:35:55,040 --> 00:35:59,440
thing when your meta analyzing something
in I did I just say no

580
00:35:59,440 --> 00:36:04,640
my ass if you want to continue analysis
the analysis is gonna give you because

581
00:36:04,640 --> 00:36:06,629
the program is packed its not be wrong

582
00:36:06,630 --> 00:36:09,930
just to confuse you just ignore Colleen
Singh now

583
00:36:09,930 --> 00:36:14,220
so here we are we're in modulus E C
which is our main program

584
00:36:14,220 --> 00:36:18,990
and assures our original entry point me
remember that 20 of

585
00:36:18,990 --> 00:36:22,540
c50 was our entry point for that tactic
skewl

586
00:36:22,540 --> 00:36:25,900
one thing I like to do and I come into
the main

587
00:36:25,900 --> 00:36:29,530
programs I like to Kanha look around
look down here to buy me see

588
00:36:29,530 --> 00:36:33,670
see all the zeros that saw the anti
memory space I was talking about

589
00:36:33,670 --> 00:36:37,780
that's all memory space that's going to
be filled up when the program is

590
00:36:37,780 --> 00:36:41,480
unpacked its allocated but is not
initialized

591
00:36:41,480 --> 00:36:45,660
cell one thing I like to do as I like to
go back up to the top aware that

592
00:36:45,660 --> 00:36:49,170
know there's and look and see what's
there a look

593
00:36:49,170 --> 00:36:53,099
number 12 for 75

594
00:36:53,099 --> 00:36:57,109
that's the original entry point that's
the tail jump

595
00:36:57,109 --> 00:37:02,920
so we're gonna set a breakpoint on that
ever gonna run to our break point so I

596
00:37:02,920 --> 00:37:07,069
just hear breakpoint we're gonna f7 a
jump

597
00:37:07,069 --> 00:37:13,720
and here we are one to you for 75 that's
our original entry point and then you'd

598
00:37:13,720 --> 00:37:15,040
say plugins

599
00:37:15,040 --> 00:37:18,290
Ali did on don't debug process

600
00:37:18,290 --> 00:37:21,700
and for this you can

601
00:37:21,700 --> 00:37:26,399
a except the can accept the defaults

602
00:37:26,400 --> 00:37:31,020
use a dump and safely on california's
ACC

603
00:37:31,020 --> 00:37:32,060
dawn

604
00:37:32,060 --> 00:37:39,060
EXE cell we've got this new program over
here

605
00:37:39,400 --> 00:37:42,490
its now

606
00:37:42,490 --> 00:37:46,479
the stripped version are packed
programme

607
00:37:46,480 --> 00:37:50,170
you can see our original entry points
been fixed 10 but one thing over here

608
00:37:50,170 --> 00:37:52,119
it's kinda interesting is it still got

609
00:37:52,119 --> 00:37:57,350
you px 0 UPS one it didn't bother to go
and fix a section names

610
00:37:57,350 --> 00:38:03,060
but if you look over here in our import
able it did go ahead

611
00:38:03,060 --> 00:38:08,450
and rebuild others the functions that we
need to run the program so the question

612
00:38:08,450 --> 00:38:08,899
is

613
00:38:08,900 --> 00:38:14,130
does it run let's find out yeh does

614
00:38:14,130 --> 00:38:17,670
so that's the basics unpacking

615
00:38:17,670 --> 00:38:21,020
did UP ext is not trying to be sneaky at
all it

616
00:38:21,020 --> 00:38:24,270
just shrinks the file there are a lot
trickier

617
00:38:24,270 --> 00:38:28,590
Packers out there but cell ants that

618
00:38:28,590 --> 00:38:34,020
let's go back to you mum let's go back
to you

619
00:38:34,020 --> 00:38:37,330
are saying years there

620
00:38:37,330 --> 00:38:41,340
in

621
00:38:41,340 --> 00:38:45,540
news okay

622
00:38:45,540 --> 00:38:48,550
yes yes yes yes yes yes yes and yes

623
00:38:48,550 --> 00:38:54,050
okay so nothing that the mailer might
try to do is check for

624
00:38:54,050 --> 00:38:57,900
check to see if it's being run in a
debugger and there's a lotta ways to do

625
00:38:57,900 --> 00:38:58,420
that

626
00:38:58,420 --> 00:39:02,250
on or scotch

627
00:39:02,250 --> 00:39:06,850
some

628
00:39:06,850 --> 00:39:09,319
ok

629
00:39:09,320 --> 00:39:12,420
so the most common way that's gonna
check for the buggers a is a little

630
00:39:12,420 --> 00:39:18,310
a function called is debugger president
it's actually a wrapper for

631
00:39:18,310 --> 00:39:22,810
about four lines of code you might see
it either way it might do a call just

632
00:39:22,810 --> 00:39:26,570
is Doug present are there might actually
just say four lines of code

633
00:39:26,570 --> 00:39:29,839
it actually checks for a

634
00:39:29,839 --> 00:39:33,869
some flags in the process sexy praxis

635
00:39:33,869 --> 00:39:40,730
execution our process environment blog
there's also one called checked remote

636
00:39:40,730 --> 00:39:43,070
debugger present if you start seeing
these

637
00:39:43,070 --> 00:39:47,700
a system calls are these API calls show
up then is looking for a daughter

638
00:39:47,700 --> 00:39:52,160
antique where information process all
these are looking for

639
00:39:52,160 --> 00:39:56,078
various um flags

640
00:39:56,079 --> 00:39:59,320
or conditions being set on the program
because the debugger one

641
00:39:59,320 --> 00:40:02,810
you load up the program into a debugger
it sets things

642
00:40:02,810 --> 00:40:06,670
so that he can interrupt though at the
process flow

643
00:40:06,670 --> 00:40:10,980
in our to be debugged the process
environment block flags there's one

644
00:40:10,980 --> 00:40:12,130
called being debugged

645
00:40:12,130 --> 00:40:15,660
and date you can also there's flag that
gets set

646
00:40:15,660 --> 00:40:19,009
for the heap status %uh

647
00:40:19,010 --> 00:40:24,930
that can be checked by an hour as well
timing detection

648
00:40:24,930 --> 00:40:29,890
is an interesting one basically if you
see a system a system time check

649
00:40:29,890 --> 00:40:33,040
and then a ransom Codemasters just in
time check again

650
00:40:33,040 --> 00:40:36,170
does it compare normally in runtime

651
00:40:36,170 --> 00:40:39,670
there's not a whole lotta time between
those two checks but when you're

652
00:40:39,670 --> 00:40:41,040
debugging in your single stepping

653
00:40:41,040 --> 00:40:44,890
there could be a lot of time between
those two checks

654
00:40:44,890 --> 00:40:48,009
and sell if you seeing those two
compares

655
00:40:48,010 --> 00:40:51,010
as to time checks to compare and then a
craps out on your

656
00:40:51,010 --> 00:40:55,980
is probably doing a timing check it
might do

657
00:40:55,980 --> 00:40:59,000
a search on open windows on your system

658
00:40:59,000 --> 00:41:02,780
say is a rally window open well then you
it's probably

659
00:41:02,780 --> 00:41:05,839
has tidying but I

660
00:41:05,839 --> 00:41:09,859
it can check the entire global flag the

661
00:41:09,859 --> 00:41:13,630
Hill wary there are some flags that the

662
00:41:13,630 --> 00:41:16,359
it's a

663
00:41:16,359 --> 00:41:18,960
itself a flag in the in the prosecution

664
00:41:18,960 --> 00:41:23,840
up process and parent body it can do a
check some

665
00:41:23,840 --> 00:41:27,450
on the memory it know that the virus
writer knows

666
00:41:27,450 --> 00:41:31,480
what it was when he built thing but when
did

667
00:41:31,480 --> 00:41:34,710
when you attach debugger the stuff you
start inserting breakpoints

668
00:41:34,710 --> 00:41:38,670
it changes to check some other file
change the checksum

669
00:41:38,670 --> 00:41:42,550
memory so they can actually Jerry a
check some on the memory and say well if

670
00:41:42,550 --> 00:41:44,500
those different from the way I dotted

671
00:41:44,500 --> 00:41:49,720
then it's being too much %uh the virus

672
00:41:49,720 --> 00:41:53,700
or an hour my check for a virtual
machine other

673
00:41:53,700 --> 00:41:57,250
VMware is not stealthy a

674
00:41:57,250 --> 00:42:01,810
VMware Tools are you get a questioner
I'll I

675
00:42:01,810 --> 00:42:05,529
VMware Tools the has a lot to registry
keys

676
00:42:05,530 --> 00:42:08,710
head it has system drivers as a lot of
stuff that

677
00:42:08,710 --> 00:42:12,880
hat makes no effort to hide and sell you
might see your malware

678
00:42:12,880 --> 00:42:15,780
actually go and look for those things to
see if it's being run in a virtual

679
00:42:15,780 --> 00:42:16,300
machine

680
00:42:16,300 --> 00:42:21,380
there's a bunch %uh instructions that
VMware

681
00:42:21,380 --> 00:42:26,140
a my use but they're not common
instructions to be found in a regular

682
00:42:26,140 --> 00:42:26,730
program

683
00:42:26,730 --> 00:42:30,920
so if you start seeing system calls our
system checks

684
00:42:30,920 --> 00:42:35,460
to see I'll if the memory locations for
certain

685
00:42:35,460 --> 00:42:38,770
system calls are different unknown
values

686
00:42:38,770 --> 00:42:42,470
then a then elite deduce

687
00:42:42,470 --> 00:42:45,580
from there that it was being run in a VM

688
00:42:45,580 --> 00:42:50,848
so thread local storage call back
something that you'll see

689
00:42:50,849 --> 00:42:54,570
thread local storage is used to

690
00:42:54,570 --> 00:42:57,740
in the real world in the nice guy world
to initially

691
00:42:57,740 --> 00:43:02,729
initialize data and threads for process
before the process starts

692
00:43:02,730 --> 00:43:09,730
now if the malware has Cody in thread
local storage

693
00:43:10,170 --> 00:43:17,030
thread local storage code runs before
the main program so she said a break

694
00:43:17,030 --> 00:43:20,300
if you had there's an automatic break
point that set where it when you start

695
00:43:20,300 --> 00:43:21,420
up a program and allied

696
00:43:21,420 --> 00:43:24,059
are not an elite did

697
00:43:24,059 --> 00:43:26,940
and if I you have

698
00:43:26,940 --> 00:43:30,180
if the Cote St lesson it that cold will
run

699
00:43:30,180 --> 00:43:35,089
before you hit your break point seller
some things they can do

700
00:43:35,089 --> 00:43:38,490
there's no limit to what you can put in
train local storage communicable you

701
00:43:38,490 --> 00:43:39,109
want

702
00:43:39,109 --> 00:43:42,480
so that some things you can do is have
it

703
00:43:42,480 --> 00:43:46,240
remove break points so you're it is a

704
00:43:46,240 --> 00:43:49,459
did to voters trying to at breakpoints
and the TLS

705
00:43:49,460 --> 00:43:52,849
code then takes a break points out see
get infected anyway

706
00:43:52,849 --> 00:43:56,039
a

707
00:43:56,039 --> 00:44:00,030
so Miller writers often used the last
two check for debuggers our virtual

708
00:44:00,030 --> 00:44:02,099
machines you can put function calls in
there

709
00:44:02,099 --> 00:44:06,569
%uh and then either craft program out
start deleting stuff

710
00:44:06,569 --> 00:44:11,349
or switch behavior to something more
benign or act like something different

711
00:44:11,349 --> 00:44:16,020
it's also kinda easy to spot though
because it does

712
00:44:16,020 --> 00:44:20,579
at a section into the PE header dats dot
TLS section into the header

713
00:44:20,579 --> 00:44:24,309
cell if you see this you'll want to
change

714
00:44:24,309 --> 00:44:30,020
how the program is being how you put in
your break points and that's why are you

715
00:44:30,020 --> 00:44:31,200
still a sketch

716
00:44:31,200 --> 00:44:34,328
is one plugins a like to use because it
kept it

717
00:44:34,329 --> 00:44:38,890
such break points until us automatically

718
00:44:38,890 --> 00:44:42,629
structured exception handling
shenanigans carried on a

719
00:44:42,630 --> 00:44:46,080
time times on

720
00:44:46,080 --> 00:44:50,619
X its so structured exception handling

721
00:44:50,619 --> 00:44:53,890
again in the nice day world a

722
00:44:53,890 --> 00:44:57,089
structure exception handling should only
be called when there's our

723
00:44:57,090 --> 00:45:00,590
bad air on the program you wanna catch
that air and do something constructive

724
00:45:00,590 --> 00:45:02,490
with instead of just crash right

725
00:45:02,490 --> 00:45:06,509
cell structured exception handling is

726
00:45:06,510 --> 00:45:10,869
a linked list %uh code segments that
should only be executed in case there's

727
00:45:10,869 --> 00:45:11,580
an actual

728
00:45:11,580 --> 00:45:15,009
big air in the program but it can be
abused

729
00:45:15,010 --> 00:45:19,690
but malware writers and are you kept
flag Raiders out there

730
00:45:19,690 --> 00:45:23,970
abuses by putting their own code in
structure exception handling chain and

731
00:45:23,970 --> 00:45:25,490
then they force here they make

732
00:45:25,490 --> 00:45:30,240
something bad happen in order to divert
program flow away from the normal

733
00:45:30,240 --> 00:45:36,368
program flow in in the program and the
send it over to SCH because it's

734
00:45:36,369 --> 00:45:39,700
it just if you're setting a breakpoint
in a certain area and

735
00:45:39,700 --> 00:45:42,899
but this %eh chain happens he that air

736
00:45:42,900 --> 00:45:46,200
happens before you break point you you
never hit your break point it just goes

737
00:45:46,200 --> 00:45:47,660
to the SEHK an excuse

738
00:45:47,660 --> 00:45:53,310
anyway the first player to you the
structure exception handling change

739
00:45:53,310 --> 00:45:54,400
started at a zero

740
00:45:54,400 --> 00:45:57,780
a again as you learn assembly language

741
00:45:57,780 --> 00:46:01,190
allottees means cool become a more clear

742
00:46:01,190 --> 00:46:04,380
um and then the rest

743
00:46:04,380 --> 00:46:08,310
SCH chain store on the stack so what
you'll see play if you have a

744
00:46:08,310 --> 00:46:13,410
a malware that is doing a structure
session handling changes you'll see them

745
00:46:13,410 --> 00:46:17,569
insert their own code industry lol their
own memory addresses

746
00:46:17,570 --> 00:46:21,070
into a structured exception handling
chain and then

747
00:46:21,070 --> 00:46:24,400
Wednesday hope themselves into this %eh
chain then

748
00:46:24,400 --> 00:46:28,390
do like divide by 0 which causes the air

749
00:46:28,390 --> 00:46:31,069
jumbled message

750
00:46:31,070 --> 00:46:34,910
sch and basically it it consists %uh a
link to the next

751
00:46:34,910 --> 00:46:38,620
element in SCH chain and then the air
handlers

752
00:46:38,620 --> 00:46:42,440
cell as an air happens the system just

753
00:46:42,440 --> 00:46:45,700
goes from air handler care and related
air handler

754
00:46:45,700 --> 00:46:51,750
until it finds one that can handle the
air that occurred but

755
00:46:51,750 --> 00:46:55,220
ish the this is what I was saying
earlier you can find

756
00:46:55,220 --> 00:46:59,830
if you have someone that had if you have
a piece of software that is doing

757
00:46:59,830 --> 00:47:03,750
he's kinda structured exception handling
tricks

758
00:47:03,750 --> 00:47:07,820
if you set a break point on your memory

759
00:47:07,820 --> 00:47:11,640
that forms the first entry to structured
exception handling chain

760
00:47:11,640 --> 00:47:14,850
me a if it's on packing

761
00:47:14,850 --> 00:47:20,420
a the malware will usually try to clean
up the SCH chain before it transitions

762
00:47:20,420 --> 00:47:21,990
back to the original program

763
00:47:21,990 --> 00:47:25,419
cell if you set a breakpoint on that
memory access

764
00:47:25,420 --> 00:47:29,640
a on access for that mami location
you'll see it let ill hit that break

765
00:47:29,640 --> 00:47:30,190
point one

766
00:47:30,190 --> 00:47:33,770
does passes back through an on does it's
a CH chain

767
00:47:33,770 --> 00:47:37,190
sets one way that you can find a

768
00:47:37,190 --> 00:47:40,990
the original entry point I E

769
00:47:40,990 --> 00:47:44,250
people might say encrypt stuff encode
stuff thing

770
00:47:44,250 --> 00:47:47,770
with encryption it can be a real pain in
the ass up but the thing that you have

771
00:47:47,770 --> 00:47:48,700
to remember is

772
00:47:48,700 --> 00:47:53,000
it still has to be dietrich did before I
can be run cell

773
00:47:53,000 --> 00:47:56,310
if you have someone that in cryptic
everything you might not get a whole lot

774
00:47:56,310 --> 00:47:59,870
of static analysis you may have to
actually do some dynamic analysis

775
00:47:59,870 --> 00:48:04,900
dumped out a memory after twenty crypt a

776
00:48:04,900 --> 00:48:08,780
one thing that you'll run into is people
like to

777
00:48:08,780 --> 00:48:12,890
base 64 encoded stuff their leno's Bay
64

778
00:48:12,890 --> 00:48:16,830
the way to make it a little bit tougher
is to have your own pay 60 for also that

779
00:48:16,830 --> 00:48:17,549
he changed up

780
00:48:17,550 --> 00:48:21,830
so the because otherwise everyone just
use the same day sixty four-a

781
00:48:21,830 --> 00:48:25,660
alphabet you know you just go online got
a 60-40 children

782
00:48:25,660 --> 00:48:28,678
decode ollie

783
00:48:28,679 --> 00:48:32,979
letting you might run into you its its
kinda goofy but people still do it

784
00:48:32,979 --> 00:48:36,098
you might run into you Oct all or hex

785
00:48:36,099 --> 00:48:39,519
dealer URL including up those you are

786
00:48:39,519 --> 00:48:43,839
a familiar with like during coating
basically

787
00:48:43,839 --> 00:48:48,509
a everything on that URL before the at
sign is completely meaningless

788
00:48:48,509 --> 00:48:52,709
the actual IP address for that service
is actually in that the number on the

789
00:48:52,709 --> 00:48:53,049
and

790
00:48:53,049 --> 00:48:56,759
a yet who's familiar with the wrinkling

791
00:48:56,759 --> 00:49:00,619
yeah ok cell

792
00:49:00,619 --> 00:49:04,719
basically you you take an IP address
right and

793
00:49:04,719 --> 00:49:08,679
she basically you multiplayer first act
at a 256 the

794
00:49:08,679 --> 00:49:12,489
at the second actor and they multiply
the result that by 256

795
00:49:12,489 --> 00:49:16,999
at their and you multiply that 256 for
back

796
00:49:16,999 --> 00:49:20,229
you have the word basically it's
creating

797
00:49:20,229 --> 00:49:23,698
a binary string that if you look at it

798
00:49:23,699 --> 00:49:26,900
in total it adds up to that but for you

799
00:49:26,900 --> 00:49:30,969
reverse it out if you look at that D
word am like scientific calculator

800
00:49:30,969 --> 00:49:34,979
you can see the binary version that IP
address

801
00:49:34,979 --> 00:49:40,158
each Stockton's so there are some great
where a great web sites out there

802
00:49:40,159 --> 00:49:43,599
for a D word in texan

803
00:49:43,599 --> 00:49:48,209
octal including me

804
00:49:48,209 --> 00:49:52,390
okay that in and a break but

805
00:49:52,390 --> 00:49:57,239
you can embed they can embed junk data
to change the offset

806
00:49:57,239 --> 00:50:01,949
for December's and so if you look at
what's happening here

807
00:50:01,949 --> 00:50:04,999
you see this a

808
00:50:04,999 --> 00:50:08,779
this X Reax that makes year x0

809
00:50:08,779 --> 00:50:13,759
you see jump if 0 a near planner

810
00:50:13,759 --> 00:50:18,599
one bite over cell is jumping over this
junk up her right here

811
00:50:18,599 --> 00:50:22,259
down to you this construction right here

812
00:50:22,259 --> 00:50:29,259
and then returns that's what I want to
do

813
00:50:32,040 --> 00:50:32,730
I

814
00:50:32,730 --> 00:50:36,980
the december is trying to make things
nice and pretty for you cell

815
00:50:36,980 --> 00:50:40,770
is trying to interpret all these
commands including the jump once

816
00:50:40,770 --> 00:50:44,830
so let the disassembler would come up
with was now here's our TX

817
00:50:44,830 --> 00:50:48,430
and here's a jump but then it belongs
all these things together

818
00:50:48,430 --> 00:50:52,930
and gives you a jump to some weird
non-existent memory address

819
00:50:52,930 --> 00:50:56,390
it's just tricks to full d disassembler

820
00:50:56,390 --> 00:50:59,910
now

821
00:50:59,910 --> 00:51:05,450
that's a nice cell you might see jumps
to the same target

822
00:51:05,450 --> 00:51:11,129
I E where a jump if 0n jumped at 9:00
going to the same place his role just

823
00:51:11,130 --> 00:51:11,800
tricks

824
00:51:11,800 --> 00:51:17,619
to mess with December's you might see
this is a a really interesting trick

825
00:51:17,619 --> 00:51:21,180
you might see jumping back into the
middle

826
00:51:21,180 --> 00:51:25,259
a previous opcode its weird littlest

827
00:51:25,260 --> 00:51:28,400
so cheers what

828
00:51:28,400 --> 00:51:32,520
is and here's what the disassembler
thinks happens

829
00:51:32,520 --> 00:51:35,670
where is moving

830
00:51:35,670 --> 00:51:39,320
this instruction in AX the X-ers EX

831
00:51:39,320 --> 00:51:43,100
and then it jumps back 7 bites into the
metal

832
00:51:43,100 --> 00:51:47,150
this guy right here and then the
disassembler

833
00:51:47,150 --> 00:51:51,050
then reads this as

834
00:51:51,050 --> 00:51:56,000
what happened what's actually happening
at runtime is

835
00:51:56,000 --> 00:52:01,160
this jump happens and then it jumps back
to EP 05

836
00:52:01,160 --> 00:52:05,890
and a reliance the holder as a whole lot
all the opcodes

837
00:52:05,890 --> 00:52:09,830
sell what actually happens is a jumps
forward 5 bytes

838
00:52:09,830 --> 00:52:13,900
which Jan 23 45 258

839
00:52:13,900 --> 00:52:18,250
58 by itself as poppy AX c3 is return
and then tune ups

840
00:52:18,250 --> 00:52:21,369
that's what's actually happening but

841
00:52:21,369 --> 00:52:25,320
by concerning this weird lil backwards
jump

842
00:52:25,320 --> 00:52:29,710
it completely reliance everything that
HAP that happens after that

843
00:52:29,710 --> 00:52:34,060
now I for those of you who have done
reverse engineering has anyone seen

844
00:52:34,060 --> 00:52:37,770
a compiler that actually does as you
think Visual Studio does this but by

845
00:52:37,770 --> 00:52:38,430
default

846
00:52:38,430 --> 00:52:41,779
now this is I haven't seen anything as

847
00:52:41,780 --> 00:52:45,730
the have you seen a Decompiler that does
that are a compiler does this

848
00:52:45,730 --> 00:52:49,130
if not you may be looking at my next
talking

849
00:52:49,130 --> 00:52:52,450
I want to build something that does like
that does

850
00:52:52,450 --> 00:52:56,529
these kinda jumps that does
substitutions has its

851
00:52:56,530 --> 00:53:00,160
pretty awesome %uh

852
00:53:00,160 --> 00:53:04,580
cell if you're going to analyze
something nine am ically the process

853
00:53:04,580 --> 00:53:07,690
take a snapshot of your GM

854
00:53:07,690 --> 00:53:10,710
don't care what else you're doing take a
snapshot first

855
00:53:10,710 --> 00:53:17,210
just so you don't have to recreate your
VM structure monitoring tools

856
00:53:17,210 --> 00:53:22,130
and then run the malware see what it
does watch risk behaviors

857
00:53:22,130 --> 00:53:26,090
and then killed in our process deputy
tools

858
00:53:26,090 --> 00:53:30,450
gather the data interpret rebuilt do it
again

859
00:53:30,450 --> 00:53:35,569
sell things that you might find useful
for your

860
00:53:35,570 --> 00:53:40,010
a evaluating our or anything else for
that matter

861
00:53:40,010 --> 00:53:43,380
Process Monitor its by the system and
Charles guys

862
00:53:43,380 --> 00:53:48,830
the specific company the Microsoft
bottom Process Explorer

863
00:53:48,830 --> 00:53:52,670
red shot this eleven them out %uh

864
00:53:52,670 --> 00:53:59,670
the URL for it missing

865
00:54:01,220 --> 00:54:05,720
red shots a great program I it's a
SourceForge page for

866
00:54:05,720 --> 00:54:08,810
it allows you to take a snapshot I'll

867
00:54:08,810 --> 00:54:13,299
everything has gone on your system all
other other registry entries as they are

868
00:54:13,300 --> 00:54:17,550
and then after you run your mouth where
you take a second snapshot

869
00:54:17,550 --> 00:54:20,730
tells you everything a change on system
ollie all the up

870
00:54:20,730 --> 00:54:25,760
the registry entries all of the files
are created all the files were deleted

871
00:54:25,760 --> 00:54:29,080
another one

872
00:54:29,080 --> 00:54:32,130
captured at bat its of honey net

873
00:54:32,130 --> 00:54:36,450
is a great little program I you can run
it where

874
00:54:36,450 --> 00:54:40,080
options that anything that gets deleted
on the system

875
00:54:40,080 --> 00:54:44,450
during the malware ally running in gets
automatically copy and save into a

876
00:54:44,450 --> 00:54:45,080
directory

877
00:54:45,080 --> 00:54:49,210
it will also capture network traffic is
a peak ap file

878
00:54:49,210 --> 00:54:52,240
soul anything that happens during that
event

879
00:54:52,240 --> 00:54:59,089
it will capture and save of so it's a
handy little program have I'll Asharq

880
00:54:59,089 --> 00:55:04,190
where shark network sniffer headliners
at fake net signet

881
00:55:04,190 --> 00:55:08,170
is a program that was made by a sikorsky
and Honig

882
00:55:08,170 --> 00:55:14,270
the guys who will practice on our
analysis is pretty awesome I'll see it

883
00:55:14,270 --> 00:55:14,730
run

884
00:55:14,730 --> 00:55:18,520
but basically anything them our asks for

885
00:55:18,520 --> 00:55:22,440
faking it will provide it was a DNS
entry for some

886
00:55:22,440 --> 00:55:25,910
IRC server on over in Romania shirts and
right back

887
00:55:25,910 --> 00:55:29,750
its end in itself but it's sitting right
back in

888
00:55:29,750 --> 00:55:33,790
and it seems all the traffic that sense
you can set

889
00:55:33,790 --> 00:55:36,849
a if it's trying to mail something it
masks rate as

890
00:55:36,849 --> 00:55:41,380
as up as a SMTP sir it'll masquerade as
web server

891
00:55:41,380 --> 00:55:45,810
no masquerade as SSL secured web server
and Dietrich the traffic

892
00:55:45,810 --> 00:55:51,470
is cool I do have a double-double here

893
00:55:51,470 --> 00:55:55,529
cell i dont I'm maas

894
00:55:55,530 --> 00:55:59,950
good miles

895
00:55:59,950 --> 00:56:06,950
all boy

896
00:56:09,920 --> 00:56:14,359
are you

897
00:56:14,359 --> 00:56:17,038
then we don't need Ali anymore

898
00:56:17,039 --> 00:56:24,039
Sony weenie

899
00:56:26,359 --> 00:56:29,578
caption since and

900
00:56:29,579 --> 00:56:36,579
me so we're gonna run a little piece
valor here

901
00:56:37,270 --> 00:56:41,880
and us %uh she

902
00:56:41,880 --> 00:56:45,770
ash

903
00:56:45,770 --> 00:56:52,770
I'm start makin

904
00:57:02,280 --> 00:57:05,400
so yeah like I said I'll it'll

905
00:57:05,400 --> 00:57:08,510
masquerade is basically anything he
wants

906
00:57:08,510 --> 00:57:11,690
and then I'm gonna start up

907
00:57:11,690 --> 00:57:14,980
I read shutting registration and shot
him

908
00:57:14,980 --> 00:57:18,700
costs hacker

909
00:57:18,700 --> 00:57:22,580
Lee my sack taxed

910
00:57:22,580 --> 00:57:26,490
am yeah where'd my

911
00:57:26,490 --> 00:57:32,950
mom

912
00:57:32,950 --> 00:57:37,259
shots edge

913
00:57:37,260 --> 00:57:44,260
per shot sketch break

914
00:57:51,070 --> 00:57:56,290
speak to me

915
00:57:56,290 --> 00:57:58,350
homes.com almost

916
00:57:58,350 --> 00:58:05,160
almost

917
00:58:05,160 --> 00:58:06,080
done

918
00:58:06,080 --> 00:58:08,520
now

919
00:58:08,520 --> 00:58:12,299
done

920
00:58:12,299 --> 00:58:15,509
now

921
00:58:15,510 --> 00:58:17,650
Ste

922
00:58:17,650 --> 00:58:24,650
ok Salala that's gone on

923
00:58:29,220 --> 00:58:36,220
come home

924
00:58:38,920 --> 00:58:45,920
always hard doing stuff virtual machines
the

925
00:58:54,369 --> 00:58:58,230
so what we're gonna do his rehab start
for monitoring tools

926
00:58:58,230 --> 00:59:02,550
and I'm gonna run this little piece an
hour and see what it does

927
00:59:02,550 --> 00:59:07,869
on ok

928
00:59:07,869 --> 00:59:12,180
now that that's done we are going to you

929
00:59:12,180 --> 00:59:16,710
startup I caps that bad suffer capture

930
00:59:16,710 --> 00:59:21,660
that stuff he Xcel ISA

931
00:59:21,660 --> 00:59:25,330
save happy miles and network traffic

932
00:59:25,330 --> 00:59:28,480
and that's actually get mmm from

933
00:59:28,480 --> 00:59:31,920
ira

934
00:59:31,920 --> 00:59:37,630
farming there so it's actually got a
system

935
00:59:37,630 --> 00:59:40,700
a a system driver for capture bat

936
00:59:40,700 --> 00:59:44,490
and that allows it to copy secretary
level its Casa

937
00:59:44,490 --> 00:59:48,319
so now we've got I I'm our over here

938
00:59:48,320 --> 00:59:52,020
and we're going to you see what it does

939
00:59:52,020 --> 00:59:57,170
ok

940
00:59:57,170 --> 01:00:03,950
mentally itself remove me for Sony 5.0
baths okay well

941
01:00:03,950 --> 01:00:07,359
something interesting service SV KP has
been created

942
01:00:07,359 --> 01:00:12,569
okay did anything happen over here

943
01:00:12,570 --> 01:00:13,029
and

944
01:00:13,029 --> 01:00:17,199
Angelina the

945
01:00:17,199 --> 01:00:20,839
now not okay so nothing will happen

946
01:00:20,839 --> 01:00:24,699
awesome so what was good looking for

947
01:00:24,699 --> 01:00:31,699
let's take a second shot maybe go over
here

948
01:00:33,929 --> 01:00:40,929
and are capture that and see if it was
looking for anything in particular

949
01:00:43,430 --> 01:00:44,430
on

950
01:00:44,430 --> 01:00:47,770
on

951
01:00:47,770 --> 01:00:54,770
shoes

952
01:01:08,970 --> 01:01:11,129
awesome apps

953
01:01:11,130 --> 01:01:14,140
at

954
01:01:14,140 --> 01:01:17,270
cell shelter on maybe

955
01:01:17,270 --> 01:01:24,270
percentage

956
01:01:36,080 --> 01:01:43,080
yeah democrat democrats not kind so

957
01:01:44,490 --> 01:01:48,589
I actually not going out this

958
01:01:48,590 --> 01:01:53,750
this particular piece in our does

959
01:01:53,750 --> 01:01:57,830
VMware I'll is VMware power

960
01:01:57,830 --> 01:02:03,560
did come back okay so here gonna do or
compare on red shirt

961
01:02:03,560 --> 01:02:06,810
this particular piece in our

962
01:02:06,810 --> 01:02:12,779
is VMware aware and change its behavior
she can down here

963
01:02:12,780 --> 01:02:16,720
see it's creating

964
01:02:16,720 --> 01:02:20,200
a service that s PKP file

965
01:02:20,200 --> 01:02:25,609
and

966
01:02:25,609 --> 01:02:28,759
italy did

967
01:02:28,760 --> 01:02:32,970
now where da di XE it

968
01:02:32,970 --> 01:02:36,009
did know their

969
01:02:36,010 --> 01:02:40,099
in added this sp KP dat sis file here

970
01:02:40,099 --> 01:02:45,420
and

971
01:02:45,420 --> 01:02:48,800
it created a little batch file cover me

972
01:02:48,800 --> 01:02:55,800
me 4785 that bad so he stopped captured
at that and at work here

973
01:02:57,580 --> 01:03:02,119
than it scare on %uh logs directory

974
01:03:02,119 --> 01:03:06,080
mister deleted files

975
01:03:06,080 --> 01:03:09,589
get

976
01:03:09,589 --> 01:03:12,670
she

977
01:03:12,670 --> 01:03:16,530
I said

978
01:03:16,530 --> 01:03:19,210
in stranger

979
01:03:19,210 --> 01:03:26,210
in

980
01:03:31,620 --> 01:03:33,509
so there's that remove me for so many

981
01:03:33,510 --> 01:03:38,830
by week we see what is doing here

982
01:03:38,830 --> 01:03:42,190
it said two leading

983
01:03:42,190 --> 01:03:45,310
the malware that EXE I'll

984
01:03:45,310 --> 01:03:49,860
in just go back to top just double check
that it's been unchanged

985
01:03:49,860 --> 01:03:53,210
okays nothing much happened there

986
01:03:53,210 --> 01:03:56,760
what we're gonna do is run to restart
but the new snapshot

987
01:03:56,760 --> 01:04:03,760
are gonna do it again we're gonna take
out a VMware

988
01:04:05,350 --> 01:04:12,350
and it will change its behavior

989
01:04:17,529 --> 01:04:21,940
3 snapshots okay

990
01:04:21,940 --> 01:04:26,989
so second person was the first stir

991
01:04:26,989 --> 01:04:30,039
are a

992
01:04:30,039 --> 01:04:35,569
first thing to do is we're going to you
remove

993
01:04:35,569 --> 01:04:42,569
VMware so ahead this resolution their

994
01:04:42,779 --> 01:04:46,900
manana we're gonna do

995
01:04:46,900 --> 01:04:53,900
me age you look machine software

996
01:04:54,059 --> 01:05:01,059
VMware fans

997
01:05:02,829 --> 01:05:07,690
wages calling she elites

998
01:05:07,690 --> 01:05:13,330
all skies as a snapshot right who cares

999
01:05:13,330 --> 01:05:20,330
so now we're gonna see if the same
changed behavior at all

1000
01:05:45,850 --> 01:05:49,640
mean your

1001
01:05:49,640 --> 01:05:53,700
on snack

1002
01:05:53,700 --> 01:06:00,700
judge

1003
01:06:03,319 --> 01:06:09,000
and i dont

1004
01:06:09,000 --> 01:06:11,840
okay

1005
01:06:11,840 --> 01:06:13,950
is lunch right

1006
01:06:13,950 --> 01:06:19,299
so

1007
01:06:19,300 --> 01:06:25,530
three runs now earns you a does now make
him

1008
01:06:25,530 --> 01:06:32,530
that are now so of listing cleared

1009
01:06:50,310 --> 01:06:53,759
correct it here it didn't show up really
well

1010
01:06:53,760 --> 01:06:56,940
it's cut the question was I'll

1011
01:06:56,940 --> 01:07:00,320
question was sorry

1012
01:07:00,320 --> 01:07:05,560
I'd right

1013
01:07:05,560 --> 01:07:09,060
this particular Mauer well as reading
the tunnel for it

1014
01:07:09,060 --> 01:07:12,690
it detects VMware by looking for
registry keys

1015
01:07:12,690 --> 01:07:17,350
so I went in I deleted the registry keys
it takes a while to sort through

1016
01:07:17,350 --> 01:07:20,960
which is why I had initially the whole
process can scan a pain in the ass but

1017
01:07:20,960 --> 01:07:24,109
it does actually look for extra case I
just deleted all the VMware

1018
01:07:24,109 --> 01:07:28,590
a registry the sex talk on damn alright
but

1019
01:07:28,590 --> 01:07:32,780
you're gonna see when we run this that
change its behavior

1020
01:07:32,780 --> 01:07:36,260
provided that the democrats are kind RH

1021
01:07:36,260 --> 01:07:42,050
let's do this ban e signet ring

1022
01:07:42,050 --> 01:07:46,360
that's right captured

1023
01:07:46,360 --> 01:07:48,240
batons see

1024
01:07:48,240 --> 01:07:52,600
she grades

1025
01:07:52,600 --> 01:07:56,430
the body ready let's see what happens

1026
01:07:56,430 --> 01:08:00,480
so bringing glory their

1027
01:08:00,480 --> 01:08:07,480
runner now ok

1028
01:08:08,109 --> 01:08:10,509
so nothing a fake not does which is
kinda cool

1029
01:08:10,510 --> 01:08:13,790
is if a malware asks for

1030
01:08:13,790 --> 01:08:17,988
a program download and run it'll
actually

1031
01:08:17,988 --> 01:08:21,000
give it a little mini program to run it
just pops the slow

1032
01:08:21,000 --> 01:08:25,420
pop-up says I downloaded a program in
Iran it's awesome

1033
01:08:25,420 --> 01:08:31,910
so I I highly recommend Fig net it's
really a little call program

1034
01:08:31,910 --> 01:08:35,420
and again if it's as a sailing trip did
includes an SSL

1035
01:08:35,420 --> 01:08:39,290
certificate in OT cryptid the traffic
for you and give you the right text

1036
01:08:39,290 --> 01:08:40,170
which is awesome

1037
01:08:40,170 --> 01:08:45,569
cell usually if you are using Wireshark
I E just getting quick to traffic which

1038
01:08:45,569 --> 01:08:46,859
isn't a whole lot I used to you

1039
01:08:46,859 --> 01:08:51,190
right so he a figment many program has
been run

1040
01:08:51,189 --> 01:08:55,000
cell if you look here home where we go
in

1041
01:08:55,000 --> 01:08:58,140
are trying to go to H

1042
01:08:58,140 --> 01:09:02,489
she down with log dot com and then

1043
01:09:02,488 --> 01:09:07,189
it does says get TDS to EXE ancel

1044
01:09:07,189 --> 01:09:10,750
fake net happily responds with its own

1045
01:09:10,750 --> 01:09:14,310
TDS to EXE and

1046
01:09:14,310 --> 01:09:18,700
that's just me trying to chip Windows
Update and then

1047
01:09:18,700 --> 01:09:22,269
I am and it looks

1048
01:09:22,270 --> 01:09:25,470
it looks like its command control might
be over IRC

1049
01:09:25,470 --> 01:09:28,720
maybe not out that I receive channel

1050
01:09:28,720 --> 01:09:33,250
so that's a democrat eyes there's really
not a whole lot

1051
01:09:33,250 --> 01:09:40,250
left to this for an air X analysts here

1052
01:09:41,330 --> 01:09:45,889
I love you till I love you guessed

1053
01:09:45,889 --> 01:09:49,929
I'm gonna miss you as an island I'm I'm
leaving for Japan in August sign in a

1054
01:09:49,929 --> 01:09:53,270
messy and I know it sucks but you know
it's Japan's leader

1055
01:09:53,270 --> 01:10:00,270
as totally how that works

1056
01:10:02,320 --> 01:10:05,509
up okay

1057
01:10:05,510 --> 01:10:09,409
cell back to back to this there's not
there's really

1058
01:10:09,409 --> 01:10:13,690
there's like to sleep so years Irish

1059
01:10:13,690 --> 01:10:17,239
halter neckline shut up thank you
wonderful

1060
01:10:17,239 --> 01:10:20,900
K its

1061
01:10:20,900 --> 01:10:26,638
at back to you SK naaa yeah

1062
01:10:26,639 --> 01:10:32,330
static analysis washing plaster code is
boring IDA Pro Bowls with x-rays

1063
01:10:32,330 --> 01:10:35,250
Decompiler Eagles win equals five grand

1064
01:10:35,250 --> 01:10:39,969
God any guys gonna pay me to buy it I'll
happily buy it

1065
01:10:39,969 --> 01:10:44,670
it is when mode its all it just be
compressed be clear

1066
01:10:44,670 --> 01:10:48,270
X-rays Decompiler does not give you
source code

1067
01:10:48,270 --> 01:10:53,780
it gives you will X-rays approximation
of what your source code might be

1068
01:10:53,780 --> 01:10:57,699
it gives you pseudocode cell

1069
01:10:57,699 --> 01:11:01,949
if you want to you it's great for for a
coalescing

1070
01:11:01,949 --> 01:11:05,138
hundreds of lines assembly code down to
like

1071
01:11:05,139 --> 01:11:09,880
five alone five lines have pseudocode so
if you just wanna see what function does

1072
01:11:09,880 --> 01:11:15,270
it's great but it's also beaucoup bucks
the first step for static analysis is to

1073
01:11:15,270 --> 01:11:16,540
unpack whatcha lookin

1074
01:11:16,540 --> 01:11:20,080
as a it clean code and then

1075
01:11:20,080 --> 01:11:25,119
the first step is to look for strains
imports with your clean cold and then

1076
01:11:25,119 --> 01:11:26,780
go into

1077
01:11:26,780 --> 01:11:30,269
you're not gonna find anything
interesting and the Windows API you

1078
01:11:30,270 --> 01:11:31,239
don't need to reverse

1079
01:11:31,239 --> 01:11:34,638
those functions but you would look at
the original excusable

1080
01:11:34,639 --> 01:11:38,179
if it has any specific deal as a calm
with that excusable

1081
01:11:38,179 --> 01:11:41,620
he'd want to look into those and

1082
01:11:41,620 --> 01:11:45,570
go from there %uh so for some resources

1083
01:11:45,570 --> 01:11:49,389
there are some great resources out there
there's actually a time a

1084
01:11:49,389 --> 01:11:53,130
books a year stint developing this is
reversing by LTR

1085
01:11:53,130 --> 01:11:57,810
packed on our analysis by Sikorsky in
honey I cannot recommend enough

1086
01:11:57,810 --> 01:12:00,929
an this

1087
01:12:00,929 --> 01:12:04,810
book is is notable in that not only does
it include

1088
01:12:04,810 --> 01:12:08,989
a full a a full can a program on

1089
01:12:08,989 --> 01:12:12,968
now analysis but also includes exercises
and example code

1090
01:12:12,969 --> 01:12:16,409
and things like that that you can
actually use to train yourself to do in

1091
01:12:16,409 --> 01:12:17,449
our analysis

1092
01:12:17,449 --> 01:12:21,629
that's really invaluable the IDA Pro but
back to seal

1093
01:12:21,630 --> 01:12:25,570
day is great and she is an amazing

1094
01:12:25,570 --> 01:12:29,449
Anna I'm using programmer a coral and

1095
01:12:29,449 --> 01:12:32,710
the coral anti-nazi not my with them
higher guber

1096
01:12:32,710 --> 01:12:36,630
Hoover Hoover but toots for you

1097
01:12:36,630 --> 01:12:39,730
is a great website includes a lot love

1098
01:12:39,730 --> 01:12:44,000
tutorials hand things like that you can
find whole reversing

1099
01:12:44,000 --> 01:12:47,260
courses on their crack me study

1100
01:12:47,260 --> 01:12:50,520
is a great program as a great website
for

1101
01:12:50,520 --> 01:12:54,540
finding a little a totally legal

1102
01:12:54,540 --> 01:12:57,610
reverse engineering programs I

1103
01:12:57,610 --> 01:13:01,080
open security training that info has a
lot great

1104
01:13:01,080 --> 01:13:05,570
a resources for learning research
nearing denial

1105
01:13:05,570 --> 01:13:08,730
a two houses last name and

1106
01:13:08,730 --> 01:13:11,059
invite dole hear something like head

1107
01:13:11,060 --> 01:13:14,130
he is a great guy he works over New York

1108
01:13:14,130 --> 01:13:20,310
up in our CE .org and the net to the
anti debug paper that tonya about his

1109
01:13:20,310 --> 01:13:21,220
Peter shari

1110
01:13:21,220 --> 01:13:24,660
and it'll it has an enormous list some

1111
01:13:24,660 --> 01:13:28,760
150 pages long full of anti debugging
and error for some features

1112
01:13:28,760 --> 01:13:31,960
and then I trailer bets the company

1113
01:13:31,960 --> 01:13:37,460
just-released a a great ebook it's all
on CTF sand

1114
01:13:37,460 --> 01:13:42,070
CTF playing that has a very large
reversing component to it so I encourage

1115
01:13:42,070 --> 01:13:43,480
you to go and look

1116
01:13:43,480 --> 01:13:50,480
let's talk iisz if you have any
questions i'll be around

1117
01:13:54,860 --> 01:13:57,940
holcomb long look for the hat because
I'll be wearing a dress to the time

1118
01:13:57,940 --> 01:14:04,940
thank you

1119
01:14:09,860 --> 01:14:11,880
getting with the hat on that's knows

1120
01:14:11,880 --> 01:14:12,810
area

