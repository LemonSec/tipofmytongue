1
00:00:00,000 --> 00:00:05,400
<font color="#CCCCCC">alright i'm matt van gundy I'm from</font>

2
00:00:02,909 --> 00:00:07,500
<font color="#CCCCCC">Cisco and</font><font color="#E5E5E5"> so ntp is in just about</font>

3
00:00:05,400 --> 00:00:09,030
everything or rather everything that we

4
00:00:07,500 --> 00:00:11,340
sell relies on in some way and<font color="#E5E5E5"> so we</font>

5
00:00:09,030 --> 00:00:14,790
<font color="#CCCCCC">started to become concerned about it as</font>

6
00:00:11,340 --> 00:00:16,590
we saw more vulnerabilities pop up and

7
00:00:14,790 --> 00:00:18,448
so this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a very sort of truncated</font>

8
00:00:16,590 --> 00:00:21,600
summary of some of the anti patterns we

9
00:00:18,449 --> 00:00:23,189
came across in MTP and<font color="#CCCCCC"> I'm really</font>

10
00:00:21,600 --> 00:00:25,350
<font color="#E5E5E5">excited to hear people talking about</font>

11
00:00:23,189 --> 00:00:27,119
protecting legacy code because well the

12
00:00:25,350 --> 00:00:29,250
world is running<font color="#CCCCCC"> on legacy codes so</font>

13
00:00:27,119 --> 00:00:31,198
until<font color="#E5E5E5"> we throw away everything we have</font>

14
00:00:29,250 --> 00:00:33,059
and build<font color="#CCCCCC"> it better we</font><font color="#E5E5E5"> have to figure</font>

15
00:00:31,199 --> 00:00:35,579
out somebody you know to protect what we

16
00:00:33,059 --> 00:00:38,610
already<font color="#CCCCCC"> have so who here is already</font>

17
00:00:35,579 --> 00:00:41,010
familiar with how MTP works<font color="#CCCCCC"> okay pretty</font>

18
00:00:38,610 --> 00:00:42,210
<font color="#CCCCCC">good number of people all right so if if</font>

19
00:00:41,010 --> 00:00:44,730
you have any questions feel free to

20
00:00:42,210 --> 00:00:47,940
<font color="#CCCCCC">interrupt me and stop me but i'll try</font>

21
00:00:44,730 --> 00:00:49,529
and quickly reviewed essentially ntps

22
00:00:47,940 --> 00:00:54,329
basic structure and security properties

23
00:00:49,530 --> 00:00:57,180
so on your right there is a server and

24
00:00:54,329 --> 00:00:58,680
it has an attached reference clock and

25
00:00:57,180 --> 00:00:59,969
so basically<font color="#E5E5E5"> this is like an atomic of</font>

26
00:00:58,680 --> 00:01:02,039
<font color="#E5E5E5">GPS clock it has some sort of</font>

27
00:00:59,969 --> 00:01:04,290
independent and hopefully very reliable

28
00:01:02,039 --> 00:01:07,439
view of time and the<font color="#E5E5E5"> server's job is to</font>

29
00:01:04,290 --> 00:01:09,360
provide this time to the<font color="#CCCCCC"> network</font><font color="#E5E5E5"> and so</font>

30
00:01:07,439 --> 00:01:11,669
you<font color="#E5E5E5"> have some lowly client basically</font>

31
00:01:09,360 --> 00:01:13,799
says hey server what time is it the

32
00:01:11,670 --> 00:01:16,979
server responds with a<font color="#E5E5E5"> sample from its</font>

33
00:01:13,799 --> 00:01:18,479
reference clock and this allows the

34
00:01:16,979 --> 00:01:19,890
client to figure out its offset and to

35
00:01:18,479 --> 00:01:22,679
eventually synchronize it's time to the

36
00:01:19,890 --> 00:01:24,150
server to deal with<font color="#CCCCCC"> Network bleh and</font>

37
00:01:22,680 --> 00:01:25,860
other<font color="#E5E5E5"> problems like</font><font color="#CCCCCC"> that the client</font>

38
00:01:24,150 --> 00:01:29,100
actually sends multiple queries gets

39
00:01:25,860 --> 00:01:31,049
multiple responses averages them

40
00:01:29,100 --> 00:01:33,720
together tries to get a consistent view

41
00:01:31,049 --> 00:01:35,280
of the<font color="#CCCCCC"> server's time and to protect</font>

42
00:01:33,720 --> 00:01:36,979
<font color="#E5E5E5">against you know one server that just</font>

43
00:01:35,280 --> 00:01:39,180
happens to be off for misbehaving

44
00:01:36,979 --> 00:01:41,789
clients are<font color="#E5E5E5"> typically configured with a</font>

45
00:01:39,180 --> 00:01:43,020
number<font color="#CCCCCC"> of different</font><font color="#E5E5E5"> servers and so</font>

46
00:01:41,790 --> 00:01:45,180
they're going<font color="#E5E5E5"> to query each one of these</font>

47
00:01:43,020 --> 00:01:47,429
servers take a look at all their

48
00:01:45,180 --> 00:01:52,100
responses and end up selecting the best

49
00:01:47,430 --> 00:01:56,729
one you it's a majority voting algorithm

50
00:01:52,100 --> 00:01:59,969
so in order to<font color="#E5E5E5"> help form a public time</font>

51
00:01:56,729 --> 00:02:02,820
infrastructure every client at least by

52
00:01:59,969 --> 00:02:05,250
default is also a server so the<font color="#CCCCCC"> top</font>

53
00:02:02,820 --> 00:02:06,779
<font color="#CCCCCC">level servers that are connected to</font>

54
00:02:05,250 --> 00:02:09,568
reference clocks directly or stratum 1

55
00:02:06,780 --> 00:02:12,420
their clients are stratum 2 and you can

56
00:02:09,568 --> 00:02:13,750
have additional<font color="#CCCCCC"> lower level clients that</font>

57
00:02:12,420 --> 00:02:16,570
then use the stratum 2 sir

58
00:02:13,750 --> 00:02:20,170
vers to basically get their time and it

59
00:02:16,570 --> 00:02:21,730
forms a sort of tree structure so some

60
00:02:20,170 --> 00:02:24,429
important things to<font color="#E5E5E5"> note about this</font>

61
00:02:21,730 --> 00:02:27,070
structure are yet basically<font color="#E5E5E5"> every host</font>

62
00:02:24,430 --> 00:02:28,750
is both client and a server which means

63
00:02:27,070 --> 00:02:30,310
that absent other protections your

64
00:02:28,750 --> 00:02:33,130
laptop will serve time to the public

65
00:02:30,310 --> 00:02:34,720
internet and that means<font color="#E5E5E5"> that there's a</font>

66
00:02:33,130 --> 00:02:38,890
whole lot<font color="#CCCCCC"> of fun stuff that you can do</font>

67
00:02:34,720 --> 00:02:41,260
as an attacker so right now like I've

68
00:02:38,890 --> 00:02:43,059
just sort of described client-server

69
00:02:41,260 --> 00:02:44,920
mode but ntp actually runs in a variety

70
00:02:43,060 --> 00:02:47,320
of other modes as well and can do<font color="#CCCCCC"> so</font>

71
00:02:44,920 --> 00:02:50,549
simultaneously so there's broadcasts

72
00:02:47,320 --> 00:02:53,260
they're symmetric and there's also

73
00:02:50,550 --> 00:02:55,180
interleaved versions of broadcast and

74
00:02:53,260 --> 00:02:56,890
symmetric that change all these changes

75
00:02:55,180 --> 00:03:00,190
<font color="#E5E5E5">the semantics of the packets in the</font>

76
00:02:56,890 --> 00:03:03,220
<font color="#CCCCCC">timestamps and so any given client can</font>

77
00:03:00,190 --> 00:03:09,880
have peers in<font color="#E5E5E5"> the various modes at the</font>

78
00:03:03,220 --> 00:03:11,860
<font color="#E5E5E5">same</font><font color="#CCCCCC"> time any questions</font><font color="#E5E5E5"> so far cool</font><font color="#CCCCCC"> all</font>

79
00:03:09,880 --> 00:03:13,269
<font color="#CCCCCC">right so basically the way the</font><font color="#E5E5E5"> ntp</font>

80
00:03:11,860 --> 00:03:15,580
protects against<font color="#E5E5E5"> off path and</font>

81
00:03:13,270 --> 00:03:18,400
personation attacks is you know say you

82
00:03:15,580 --> 00:03:19,630
have some off path attacker knows that

83
00:03:18,400 --> 00:03:21,640
the clients communicating with the

84
00:03:19,630 --> 00:03:25,060
server and wants to basically<font color="#E5E5E5"> ford</font>

85
00:03:21,640 --> 00:03:27,700
responses from the<font color="#E5E5E5"> server ntp runs over</font>

86
00:03:25,060 --> 00:03:30,400
UDP and<font color="#E5E5E5"> doesn't involve employ any sort</font>

87
00:03:27,700 --> 00:03:32,048
of source port randomization and<font color="#E5E5E5"> so what</font>

88
00:03:30,400 --> 00:03:34,450
that means is that it would be trivially

89
00:03:32,049 --> 00:03:38,280
easy to spoof packets coming from the

90
00:03:34,450 --> 00:03:42,190
server except the ntp incorporates a

91
00:03:38,280 --> 00:03:44,500
custom mechanism to prevent this have

92
00:03:42,190 --> 00:03:47,440
sort of a visualization of an<font color="#CCCCCC"> ntp packet</font>

93
00:03:44,500 --> 00:03:49,840
and the things that<font color="#CCCCCC"> i want</font><font color="#E5E5E5"> you to take</font>

94
00:03:47,440 --> 00:03:53,829
note of are these three timestamps t1<font color="#E5E5E5"> t2</font>

95
00:03:49,840 --> 00:03:55,959
and t3 what happens is whenever the

96
00:03:53,829 --> 00:03:59,079
client<font color="#E5E5E5"> sends out a query it's going to</font>

97
00:03:55,959 --> 00:04:01,930
put its current clock<font color="#E5E5E5"> into t3 in the</font>

98
00:03:59,079 --> 00:04:06,040
outgoing packet and when<font color="#E5E5E5"> the server</font>

99
00:04:01,930 --> 00:04:09,910
responds the server is actually going to

100
00:04:06,040 --> 00:04:12,280
take that clients t3 and<font color="#E5E5E5"> put it in t1 of</font>

101
00:04:09,910 --> 00:04:13,620
the response packet and so when the

102
00:04:12,280 --> 00:04:17,100
client receives the server's response

103
00:04:13,620 --> 00:04:19,870
basically what<font color="#E5E5E5"> it'll check is hey is the</font>

104
00:04:17,100 --> 00:04:22,200
t1 and the response packet equal the t3

105
00:04:19,870 --> 00:04:24,970
in my query packet if not it drops it

106
00:04:22,200 --> 00:04:26,860
<font color="#E5E5E5">otherwise it's going to accept it as a</font>

107
00:04:24,970 --> 00:04:27,690
ballad reply so this essentially acts as

108
00:04:26,860 --> 00:04:30,370
a nut

109
00:04:27,690 --> 00:04:32,680
these<font color="#E5E5E5"> timestamps include fractional</font>

110
00:04:30,370 --> 00:04:34,900
seconds and ntp also randomly permute

111
00:04:32,680 --> 00:04:37,030
some of the bits of<font color="#CCCCCC"> the like the low</font>

112
00:04:34,900 --> 00:04:38,859
order bits of<font color="#E5E5E5"> the time stamp so that</font>

113
00:04:37,030 --> 00:04:42,280
means in practice it's about 32 bits of

114
00:04:38,860 --> 00:04:44,889
entropy and so it sits in the end it

115
00:04:42,280 --> 00:04:49,198
ends up<font color="#CCCCCC"> being relatively equivalent to</font>

116
00:04:44,889 --> 00:04:51,910
TCP sequence number randomization so

117
00:04:49,199 --> 00:04:55,750
like ultimately this<font color="#CCCCCC"> is not too terrible</font>

118
00:04:51,910 --> 00:04:57,970
of a a scheme but the way the MTP ends

119
00:04:55,750 --> 00:04:59,680
up being implemented is it takes all

120
00:04:57,970 --> 00:05:02,349
these modes and this relatively simple

121
00:04:59,680 --> 00:05:04,240
packet structure and it combines all

122
00:05:02,349 --> 00:05:07,150
these different semantics into a single

123
00:05:04,240 --> 00:05:09,130
code flow that makes it incredibly hard

124
00:05:07,150 --> 00:05:12,489
to<font color="#E5E5E5"> determine sort of what the</font>

125
00:05:09,130 --> 00:05:14,169
assumptions are on any any the

126
00:05:12,490 --> 00:05:19,870
preconditions are any point in the

127
00:05:14,169 --> 00:05:22,840
process<font color="#E5E5E5"> and so that's</font><font color="#CCCCCC"> actually was the</font>

128
00:05:19,870 --> 00:05:27,490
sort<font color="#E5E5E5"> of genesis of a number of bugs that</font>

129
00:05:22,840 --> 00:05:30,250
we found so this is<font color="#CCCCCC"> a incredibly</font>

130
00:05:27,490 --> 00:05:33,820
simplified view of ntps packet

131
00:05:30,250 --> 00:05:35,860
consistency checks and yeah I'm not

132
00:05:33,820 --> 00:05:37,630
kidding like incredibly simplified and

133
00:05:35,860 --> 00:05:39,490
rewritten in<font color="#E5E5E5"> Python to make a little bit</font>

134
00:05:37,630 --> 00:05:42,130
easier<font color="#E5E5E5"> to follow and I kind of want I</font>

135
00:05:39,490 --> 00:05:46,389
wanted<font color="#CCCCCC"> to walk through this to sort of</font>

136
00:05:42,130 --> 00:05:48,639
show how these things play out so the

137
00:05:46,389 --> 00:05:51,280
first consistency check ntp applies is

138
00:05:48,639 --> 00:05:53,979
is t3 the<font color="#CCCCCC"> transmitted time stamp from</font>

139
00:05:51,280 --> 00:05:56,979
the server 0 right this is an indication

140
00:05:53,979 --> 00:05:58,900
<font color="#CCCCCC">that</font><font color="#E5E5E5"> the server is unsynchronized or has</font>

141
00:05:56,979 --> 00:05:59,949
no idea time it is incredibly broken at

142
00:05:58,900 --> 00:06:03,400
which point we should<font color="#E5E5E5"> throw away the</font>

143
00:05:59,949 --> 00:06:07,479
packet so ntp marks the packet is

144
00:06:03,400 --> 00:06:09,359
invalid<font color="#E5E5E5"> and continues on late hopefully</font>

145
00:06:07,479 --> 00:06:12,969
later on throwing out the packet

146
00:06:09,360 --> 00:06:16,449
otherwise assuming<font color="#CCCCCC"> that the transmitted</font>

147
00:06:12,970 --> 00:06:19,659
<font color="#E5E5E5">time stamp is</font><font color="#CCCCCC"> nonzero it it asks well is</font>

148
00:06:16,449 --> 00:06:22,659
it<font color="#CCCCCC"> equal to our origin</font><font color="#E5E5E5"> time stamp right</font>

149
00:06:19,659 --> 00:06:25,630
so this origin time stamp is saving the

150
00:06:22,659 --> 00:06:27,310
<font color="#CCCCCC">transmitted time stamp seen in the last</font>

151
00:06:25,630 --> 00:06:31,060
ntp packet so this is<font color="#E5E5E5"> going to prevent</font>

152
00:06:27,310 --> 00:06:33,639
duplications and replays of the<font color="#CCCCCC"> last ntp</font>

153
00:06:31,060 --> 00:06:36,130
packet if so it basically marks it as

154
00:06:33,639 --> 00:06:39,430
invalid and immediately terminates this

155
00:06:36,130 --> 00:06:40,750
this processing notice<font color="#CCCCCC"> that it's only</font>

156
00:06:39,430 --> 00:06:42,460
checking if the

157
00:06:40,750 --> 00:06:44,230
matches the last time stamp so you know

158
00:06:42,460 --> 00:06:48,840
if it was a replay of like two packets

159
00:06:44,230 --> 00:06:48,840
later it'll accept it<font color="#E5E5E5"> potentially</font>

160
00:06:48,960 --> 00:06:54,609
otherwise if we're in broadcast mode

161
00:06:52,050 --> 00:06:57,610
it's basically going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> skip all further</font>

162
00:06:54,610 --> 00:07:00,190
tests so okay at this point<font color="#CCCCCC"> we're</font>

163
00:06:57,610 --> 00:07:01,990
probably<font color="#E5E5E5"> not in broadcast mode if we're</font>

164
00:07:00,190 --> 00:07:05,340
if we're<font color="#E5E5E5"> not an interleaved mode it</font>

165
00:07:01,990 --> 00:07:07,510
applies a whole nother set of checks so

166
00:07:05,340 --> 00:07:10,750
it asks all right is the origin

167
00:07:07,510 --> 00:07:12,490
<font color="#E5E5E5">timestamp equal to</font><font color="#CCCCCC"> zero so</font><font color="#E5E5E5"> this is this</font>

168
00:07:10,750 --> 00:07:14,950
is the nuts that the<font color="#E5E5E5"> server is supposed</font>

169
00:07:12,490 --> 00:07:17,980
to be reflecting back<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> client if</font>

170
00:07:14,950 --> 00:07:20,710
it is it sets its own version<font color="#CCCCCC"> of the</font>

171
00:07:17,980 --> 00:07:22,419
<font color="#E5E5E5">transmitted timestamp 20 basically what</font>

172
00:07:20,710 --> 00:07:26,289
it was holding onto to validate the

173
00:07:22,419 --> 00:07:29,080
server's reply and continues on rather

174
00:07:26,290 --> 00:07:31,000
<font color="#E5E5E5">than actually checking this nuts so it</font>

175
00:07:29,080 --> 00:07:33,909
turns<font color="#E5E5E5"> out that this is an artifact of</font>

176
00:07:31,000 --> 00:07:35,530
symmetric mode because<font color="#E5E5E5"> what happens is</font>

177
00:07:33,910 --> 00:07:37,360
when one side goes down<font color="#E5E5E5"> in symmetric</font>

178
00:07:35,530 --> 00:07:40,059
<font color="#E5E5E5">mode and comes back up its going to send</font>

179
00:07:37,360 --> 00:07:42,520
a<font color="#E5E5E5"> zero in its origin timestamp and so in</font>

180
00:07:40,060 --> 00:07:45,820
order to<font color="#E5E5E5"> support that ntp is basically</font>

181
00:07:42,520 --> 00:07:48,340
bypassed its own nuts checking in in

182
00:07:45,820 --> 00:07:50,800
this in<font color="#CCCCCC"> its set of packets consistency</font>

183
00:07:48,340 --> 00:07:53,080
checks and so what this will allow an

184
00:07:50,800 --> 00:07:55,030
attacker to<font color="#E5E5E5"> do is to put 0 in the origin</font>

185
00:07:53,080 --> 00:07:58,780
<font color="#E5E5E5">timestamp of any packet and basically</font>

186
00:07:55,030 --> 00:08:01,450
bypass that nuts check so interestingly

187
00:07:58,780 --> 00:08:04,150
if we look at<font color="#E5E5E5"> the next test we see that</font>

188
00:08:01,450 --> 00:08:05,169
if the<font color="#E5E5E5"> transmitted timestamp 0 is</font>

189
00:08:04,150 --> 00:08:09,250
holding onto to do this nuns

190
00:08:05,169 --> 00:08:11,440
verification is 0 or if the the origin

191
00:08:09,250 --> 00:08:13,510
timestamp t1 in the packet doesn't match

192
00:08:11,440 --> 00:08:17,700
that transmit timestamp we're<font color="#E5E5E5"> going to</font>

193
00:08:13,510 --> 00:08:19,870
fail you know the the<font color="#E5E5E5"> nuts check and</font>

194
00:08:17,700 --> 00:08:22,330
return unless you know this interleaving

195
00:08:19,870 --> 00:08:24,370
condition is true so interestingly this

196
00:08:22,330 --> 00:08:27,099
was their attempt<font color="#E5E5E5"> to prevent a previous</font>

197
00:08:24,370 --> 00:08:28,780
report of that 0 origin timestamp issue

198
00:08:27,100 --> 00:08:30,790
but<font color="#E5E5E5"> it also broke symmetric mode and</font>

199
00:08:28,780 --> 00:08:32,199
since they're in the same code path they

200
00:08:30,790 --> 00:08:37,780
<font color="#E5E5E5">added this previous condition which</font>

201
00:08:32,200 --> 00:08:39,880
reintroduce the bug before release so I

202
00:08:37,780 --> 00:08:42,429
said you<font color="#E5E5E5"> know they're gonna if we fail</font>

203
00:08:39,880 --> 00:08:45,790
that<font color="#CCCCCC"> nuts check we</font><font color="#E5E5E5"> actually have another</font>

204
00:08:42,429 --> 00:08:49,000
chance<font color="#E5E5E5"> to get through this this packet</font>

205
00:08:45,790 --> 00:08:52,599
processing logic so if the received

206
00:08:49,000 --> 00:08:54,790
timestamp which basically is marking

207
00:08:52,600 --> 00:08:57,400
what time we received the

208
00:08:54,790 --> 00:09:00,010
last packet from the server is non zero

209
00:08:57,400 --> 00:09:03,490
and the origin<font color="#E5E5E5"> timestamp is equal to</font>

210
00:09:00,010 --> 00:09:05,860
that receive timestamp this matches the

211
00:09:03,490 --> 00:09:08,320
semantics of interleave mode so rather

212
00:09:05,860 --> 00:09:10,660
<font color="#E5E5E5">than like explicitly declaring</font>

213
00:09:08,320 --> 00:09:13,120
interleave mode in any in any form in

214
00:09:10,660 --> 00:09:15,880
the packets or in the configuration ntp

215
00:09:13,120 --> 00:09:18,250
says oh we must be an interleaved mode

216
00:09:15,880 --> 00:09:40,870
let's switch to interleave mode and

217
00:09:18,250 --> 00:09:43,000
continue on yes yes well and so so

218
00:09:40,870 --> 00:09:44,560
interestingly is notice<font color="#CCCCCC"> that they</font><font color="#E5E5E5"> threw</font>

219
00:09:43,000 --> 00:09:46,900
like basically we're bypassing this in

220
00:09:44,560 --> 00:09:48,160
broadcast mode however that<font color="#CCCCCC"> means that</font>

221
00:09:46,900 --> 00:09:50,470
we could<font color="#E5E5E5"> be here if we're in symmetric</font>

222
00:09:48,160 --> 00:09:52,719
mode or if we're in basic client-server

223
00:09:50,470 --> 00:09:54,550
mode and so we could be potentially

224
00:09:52,720 --> 00:09:56,530
putting a client-server<font color="#E5E5E5"> Association for</font>

225
00:09:54,550 --> 00:10:00,609
which interleave mode is not defined in

226
00:09:56,530 --> 00:10:02,709
to interleave mode which in the end

227
00:10:00,610 --> 00:10:15,760
actually lets us change time on an<font color="#CCCCCC"> NTP</font>

228
00:10:02,710 --> 00:10:17,980
client over here yes so that yeah that

229
00:10:15,760 --> 00:10:21,250
comes a little<font color="#E5E5E5"> bit later and then and</font>

230
00:10:17,980 --> 00:10:24,070
<font color="#E5E5E5">then lastly we</font><font color="#CCCCCC"> have our our previous</font>

231
00:10:21,250 --> 00:10:26,940
occurrence of this 0 origin<font color="#CCCCCC"> timestamp</font>

232
00:10:24,070 --> 00:10:29,560
issue where in order to prevent

233
00:10:26,940 --> 00:10:31,240
basically if a query is duplicated and

234
00:10:29,560 --> 00:10:32,859
the server responds twice we don't want

235
00:10:31,240 --> 00:10:35,320
to accept both responses from the server

236
00:10:32,860 --> 00:10:37,150
so the<font color="#E5E5E5"> way they do that is after a</font>

237
00:10:35,320 --> 00:10:39,310
successful<font color="#CCCCCC"> nut check they clear that</font>

238
00:10:37,150 --> 00:10:42,490
nuts well unfortunately<font color="#E5E5E5"> they were</font>

239
00:10:39,310 --> 00:10:45,310
clearing it 2-0 so<font color="#E5E5E5"> basically if if you</font>

240
00:10:42,490 --> 00:10:47,050
know we have managed to come through<font color="#CCCCCC"> and</font>

241
00:10:45,310 --> 00:10:48,910
not hit either of these two failure

242
00:10:47,050 --> 00:10:50,829
cases it says<font color="#CCCCCC"> okay cool as a successful</font>

243
00:10:48,910 --> 00:10:53,290
check let's set it to<font color="#E5E5E5"> 0 which would mean</font>

244
00:10:50,830 --> 00:10:56,470
that the next from that<font color="#E5E5E5"> point on after a</font>

245
00:10:53,290 --> 00:10:58,120
successful<font color="#E5E5E5"> server reply that</font><font color="#CCCCCC"> nuts is 0</font>

246
00:10:56,470 --> 00:11:00,430
and an attacker<font color="#CCCCCC"> can just feed you know</font>

247
00:10:58,120 --> 00:11:02,760
packets with 0 origin timestamp to the

248
00:11:00,430 --> 00:11:02,760
client

249
00:11:03,830 --> 00:11:11,760
yes yes<font color="#E5E5E5"> it's not me it's not it's not</font>

250
00:11:10,080 --> 00:11:13,800
tracking am<font color="#E5E5E5"> I waiting for response from</font>

251
00:11:11,760 --> 00:11:15,780
the server<font color="#E5E5E5"> you know instead it's just</font>

252
00:11:13,800 --> 00:11:20,880
like I'll<font color="#CCCCCC"> just I'll clear my nuts and</font>

253
00:11:15,780 --> 00:11:22,620
and that'll be good enough sure no no

254
00:11:20,880 --> 00:11:27,540
this is this is great I just was going

255
00:11:22,620 --> 00:11:29,430
to take<font color="#E5E5E5"> a question from the back this is</font>

256
00:11:27,540 --> 00:11:39,360
the reference implementation from the

257
00:11:29,430 --> 00:11:41,339
<font color="#CCCCCC">ntp project yes the actually clearing</font>

258
00:11:39,360 --> 00:11:44,130
that transmit variable is in the RFC

259
00:11:41,340 --> 00:11:46,230
that's a protocol level bug also

260
00:11:44,130 --> 00:11:47,939
interleave mode has never been

261
00:11:46,230 --> 00:11:50,550
standardized in RFC at all so it's

262
00:11:47,940 --> 00:12:12,060
entirely in addition over and beyond the

263
00:11:50,550 --> 00:12:21,300
RFC but yes so the<font color="#CCCCCC"> time stamps are</font>

264
00:12:12,060 --> 00:12:23,130
actually 64-bit integers but yeah yeah<font color="#CCCCCC"> I</font>

265
00:12:21,300 --> 00:12:24,359
mean<font color="#E5E5E5"> later on they do subtractions and</font>

266
00:12:23,130 --> 00:12:29,570
things but<font color="#E5E5E5"> not for the consistency</font>

267
00:12:24,360 --> 00:12:29,570
checks for the most part yeah

268
00:12:37,210 --> 00:12:50,660
and you've got one<font color="#E5E5E5"> too you've got you</font>

269
00:12:41,390 --> 00:12:53,180
know four or five actions no I don't

270
00:12:50,660 --> 00:12:55,189
think<font color="#E5E5E5"> so and it used to be much simpler</font>

271
00:12:53,180 --> 00:12:57,170
but it has evolved over time and<font color="#E5E5E5"> it's</font>

272
00:12:55,190 --> 00:13:00,920
been refactored and and maybe<font color="#E5E5E5"> this is a</font>

273
00:12:57,170 --> 00:13:03,680
good<font color="#E5E5E5"> time to say that this is you know</font>

274
00:13:00,920 --> 00:13:05,900
probably not so testable the actual

275
00:13:03,680 --> 00:13:07,550
overall design<font color="#CCCCCC"> of ntp is very monolithic</font>

276
00:13:05,900 --> 00:13:09,319
and so it means<font color="#E5E5E5"> that you can't unit test</font>

277
00:13:07,550 --> 00:13:10,969
most pieces of it and so it shouldn't

278
00:13:09,320 --> 00:13:13,880
surprise you that there are virtually<font color="#CCCCCC"> no</font>

279
00:13:10,970 --> 00:13:16,610
tests which means that<font color="#E5E5E5"> every time it's</font>

280
00:13:13,880 --> 00:13:18,920
how to feature added or refactored there

281
00:13:16,610 --> 00:13:20,570
there's essentially no validation that

282
00:13:18,920 --> 00:13:22,550
previous functionality still works as

283
00:13:20,570 --> 00:13:24,940
intended or functionality that shouldn't

284
00:13:22,550 --> 00:13:34,900
have been there remains you know

285
00:13:24,940 --> 00:13:34,900
rejected any other questions<font color="#CCCCCC"> ok</font>

286
00:13:42,580 --> 00:13:49,580
keep in mind this is incredibly

287
00:13:45,740 --> 00:13:50,870
simplified so if we're you know

288
00:13:49,580 --> 00:13:53,240
<font color="#E5E5E5">basically at this point we're probably</font>

289
00:13:50,870 --> 00:13:56,480
if we've made it down in these if checks

290
00:13:53,240 --> 00:13:57,680
where an interleague mode and so it

291
00:13:56,480 --> 00:13:58,760
basically you know at this point is

292
00:13:57,680 --> 00:14:02,150
checking again as the server

293
00:13:58,760 --> 00:14:06,050
unsynchronized or you know here as i

294
00:14:02,150 --> 00:14:07,850
mentioned in interleave mode it<font color="#E5E5E5"> uses the</font>

295
00:14:06,050 --> 00:14:09,560
received timestamp and so the<font color="#CCCCCC"> transmit</font>

296
00:14:07,850 --> 00:14:12,680
<font color="#CCCCCC">timestamp</font><font color="#E5E5E5"> so it says you know if that's</font>

297
00:14:09,560 --> 00:14:13,849
nonzero or not equal to<font color="#CCCCCC"> the origin time</font>

298
00:14:12,680 --> 00:14:16,609
stamp from the server then we're going

299
00:14:13,850 --> 00:14:20,300
to fail the interleave mode check at

300
00:14:16,610 --> 00:14:25,520
this point finally we ask is the packet

301
00:14:20,300 --> 00:14:28,609
correctly authenticated and and if not

302
00:14:25,520 --> 00:14:30,050
we bail it out if so then<font color="#CCCCCC"> we if it's</font><font color="#E5E5E5"> not</font>

303
00:14:28,610 --> 00:14:32,840
interleave mode we go<font color="#E5E5E5"> ahead</font><font color="#CCCCCC"> and update</font>

304
00:14:30,050 --> 00:14:34,520
<font color="#E5E5E5">our receive timestamp and the the origin</font>

305
00:14:32,840 --> 00:14:38,720
timestamp so that we can prevent replays

306
00:14:34,520 --> 00:14:40,640
of that last packet at this point if we

307
00:14:38,720 --> 00:14:42,950
have detected<font color="#E5E5E5"> an error in any one of</font>

308
00:14:40,640 --> 00:14:45,050
these<font color="#E5E5E5"> cases that had a setting of this</font>

309
00:14:42,950 --> 00:14:47,330
flash variable that didn't return<font color="#E5E5E5"> only</font>

310
00:14:45,050 --> 00:14:49,160
now after updating these time stamps do

311
00:14:47,330 --> 00:15:03,170
we return like exit the packet

312
00:14:49,160 --> 00:15:07,189
processing code uh yeah yeah yeah so

313
00:15:03,170 --> 00:15:09,589
anyways<font color="#E5E5E5"> uh basically what I'm trying to</font>

314
00:15:07,190 --> 00:15:11,500
convey overall is is<font color="#CCCCCC"> there's an</font>

315
00:15:09,590 --> 00:15:14,060
incredible<font color="#E5E5E5"> number of paths for this code</font>

316
00:15:11,500 --> 00:15:15,890
and it's not clear<font color="#E5E5E5"> at many points</font>

317
00:15:14,060 --> 00:15:17,449
exactly what the preconditions are what

318
00:15:15,890 --> 00:15:19,189
the programmer thought the preconditions

319
00:15:17,450 --> 00:15:20,780
would be and so<font color="#E5E5E5"> that means that you can</font>

320
00:15:19,190 --> 00:15:23,420
do things<font color="#CCCCCC"> like ingress packets with a</font>

321
00:15:20,780 --> 00:15:26,439
timestamp of<font color="#CCCCCC"> 0 or flip a basic</font>

322
00:15:23,420 --> 00:15:29,120
client-server<font color="#CCCCCC"> Association into</font>

323
00:15:26,440 --> 00:15:32,360
interleaved mode which<font color="#CCCCCC"> is undefined used</font>

324
00:15:29,120 --> 00:15:34,520
by setting the t1 in the incoming packet

325
00:15:32,360 --> 00:15:36,530
to the time the client last received a

326
00:15:34,520 --> 00:15:38,780
packet from the server and then at that

327
00:15:36,530 --> 00:15:41,300
point you can then bypass this other

328
00:15:38,780 --> 00:15:46,939
check and again set time on on the

329
00:15:41,300 --> 00:15:48,829
client and<font color="#E5E5E5"> I am out of time there are</font>

330
00:15:46,940 --> 00:15:50,960
like one or<font color="#CCCCCC"> two more things I can show</font>

331
00:15:48,830 --> 00:15:52,220
you but if we you know if you want to

332
00:15:50,960 --> 00:15:54,400
<font color="#E5E5E5">stop here and go to the panel and fine</font>

333
00:15:52,220 --> 00:15:54,400
with that

334
00:15:56,170 --> 00:16:11,329
okay okay sure so<font color="#E5E5E5"> they're also so if you</font>

335
00:16:07,250 --> 00:16:13,610
notice here an interesting decision to

336
00:16:11,330 --> 00:16:15,470
me is that<font color="#E5E5E5"> they represent they have this</font>

337
00:16:13,610 --> 00:16:19,490
curious value of the authentication

338
00:16:15,470 --> 00:16:22,880
<font color="#E5E5E5">variable crypto this actually comes from</font>

339
00:16:19,490 --> 00:16:24,290
<font color="#CCCCCC">the RFC in a sense says the femoral</font>

340
00:16:22,880 --> 00:16:26,930
associations are<font color="#E5E5E5"> mobilized upon the</font>

341
00:16:24,290 --> 00:16:31,699
arrival of a packet and<font color="#CCCCCC"> are demobilized</font>

342
00:16:26,930 --> 00:16:33,529
on upon error timeout well an ephemeral

343
00:16:31,700 --> 00:16:35,930
association means that when ntp gets a

344
00:16:33,529 --> 00:16:39,800
packet from a<font color="#E5E5E5"> machine that it doesn't</font>

345
00:16:35,930 --> 00:16:41,569
recognize it has the potential to to set

346
00:16:39,800 --> 00:16:45,319
up a new<font color="#CCCCCC"> association and synchronize</font>

347
00:16:41,570 --> 00:16:46,880
time with that system luckily by<font color="#E5E5E5"> default</font>

348
00:16:45,320 --> 00:16:48,140
those packets are required to be

349
00:16:46,880 --> 00:16:52,160
authenticated which means you have<font color="#CCCCCC"> to</font>

350
00:16:48,140 --> 00:16:54,230
share<font color="#CCCCCC"> a cryptographic key with the with</font>

351
00:16:52,160 --> 00:16:55,490
<font color="#CCCCCC">the system that is receiving that pack</font>

352
00:16:54,230 --> 00:16:58,100
in order for to actually set<font color="#CCCCCC"> up that</font>

353
00:16:55,490 --> 00:17:00,050
<font color="#CCCCCC">association but you know we might ask</font>

354
00:16:58,100 --> 00:17:05,390
<font color="#CCCCCC">the protocol level well how does it know</font>

355
00:17:00,050 --> 00:17:07,698
like when when the remote side well so<font color="#E5E5E5"> I</font>

356
00:17:05,390 --> 00:17:10,160
guess<font color="#CCCCCC"> not explicitly stated in this</font>

357
00:17:07,699 --> 00:17:11,959
quote is that when there's an

358
00:17:10,160 --> 00:17:13,910
authentication error on the remote side

359
00:17:11,959 --> 00:17:15,890
and<font color="#E5E5E5"> I've set</font><font color="#CCCCCC"> up an ephemeral</font><font color="#E5E5E5"> Association</font>

360
00:17:13,910 --> 00:17:18,170
I demobilize that<font color="#E5E5E5"> Association well how</font>

361
00:17:15,890 --> 00:17:21,020
do I know the remote side sends a crypto

362
00:17:18,170 --> 00:17:22,760
<font color="#CCCCCC">knack it says hey I failed authenticate</font>

363
00:17:21,020 --> 00:17:24,949
your packet for some reason<font color="#E5E5E5"> you know</font>

364
00:17:22,760 --> 00:17:29,030
please you know do whatever you need to

365
00:17:24,949 --> 00:17:32,240
do so how that works is ntp authenticate

366
00:17:29,030 --> 00:17:36,470
says packets by forming a yeah we'll

367
00:17:32,240 --> 00:17:38,179
call<font color="#E5E5E5"> it a</font><font color="#CCCCCC"> Mac</font><font color="#E5E5E5"> over it's got its own</font>

368
00:17:36,470 --> 00:17:40,070
problems<font color="#E5E5E5"> but over over this</font>

369
00:17:38,179 --> 00:17:42,679
unauthenticated portion it basically

370
00:17:40,070 --> 00:17:44,020
appends a key ID and adds the digest

371
00:17:42,679 --> 00:17:46,760
from the message authentication code

372
00:17:44,020 --> 00:17:48,020
well it turns<font color="#CCCCCC"> out that they wanted</font><font color="#E5E5E5"> to</font>

373
00:17:46,760 --> 00:17:51,230
have this crypto<font color="#CCCCCC"> max support so they</font>

374
00:17:48,020 --> 00:17:53,629
decided well<font color="#E5E5E5"> key idea of</font><font color="#CCCCCC"> zero without a</font>

375
00:17:51,230 --> 00:17:56,780
digest is going to mean a cryptographic

376
00:17:53,630 --> 00:17:59,059
negative acknowledgement which means

377
00:17:56,780 --> 00:18:01,690
that that<font color="#E5E5E5"> is that is an unauthenticated</font>

378
00:17:59,059 --> 00:18:04,490
packet because it doesn't bear digest

379
00:18:01,690 --> 00:18:06,830
it's also as<font color="#CCCCCC"> you notice handled very</font>

380
00:18:04,490 --> 00:18:07,760
late in the code<font color="#E5E5E5"> after all the other</font>

381
00:18:06,830 --> 00:18:09,919
packet consistent

382
00:18:07,760 --> 00:18:11,750
see checks and rather than you<font color="#CCCCCC"> know</font>

383
00:18:09,920 --> 00:18:13,430
<font color="#CCCCCC">upfront</font><font color="#E5E5E5"> saying oh this is a crypto</font><font color="#CCCCCC"> nack</font>

384
00:18:11,750 --> 00:18:14,480
let's do whatever we're<font color="#E5E5E5"> going to do even</font>

385
00:18:13,430 --> 00:18:16,550
though it's not authenticated and

386
00:18:14,480 --> 00:18:18,380
throwing it out the way they keep track

387
00:18:16,550 --> 00:18:21,530
of that is they they add an additional

388
00:18:18,380 --> 00:18:22,610
authentication<font color="#E5E5E5"> state you know</font><font color="#CCCCCC"> instead of</font>

389
00:18:21,530 --> 00:18:24,440
<font color="#CCCCCC">it's not authenticated the</font>

390
00:18:22,610 --> 00:18:26,570
authentication<font color="#E5E5E5"> was okay or</font><font color="#CCCCCC"> there was an</font>

391
00:18:24,440 --> 00:18:29,890
error they say well we're going<font color="#E5E5E5"> to add</font>

392
00:18:26,570 --> 00:18:32,990
another state of<font color="#E5E5E5"> authentication crypto</font>

393
00:18:29,890 --> 00:18:34,340
what this means is that when ephemeral

394
00:18:32,990 --> 00:18:35,870
<font color="#CCCCCC">Association when it's trying to decide</font>

395
00:18:34,340 --> 00:18:38,510
am I going<font color="#E5E5E5"> to bring up an ephemeral</font>

396
00:18:35,870 --> 00:18:40,540
<font color="#E5E5E5">Association in most the code it</font>

397
00:18:38,510 --> 00:18:43,040
basically says hey if authentication is

398
00:18:40,540 --> 00:18:44,570
either error crypto go ahead and reject

399
00:18:43,040 --> 00:18:46,970
this packet don't bring up<font color="#E5E5E5"> the ephemeral</font>

400
00:18:44,570 --> 00:18:49,010
<font color="#E5E5E5">Association if it's none we're going to</font>

401
00:18:46,970 --> 00:18:50,720
reject this packet if if authentication

402
00:18:49,010 --> 00:18:54,110
is required otherwise will bring up a

403
00:18:50,720 --> 00:18:56,060
new<font color="#CCCCCC"> Association unfortunately for</font>

404
00:18:54,110 --> 00:18:57,860
symmetric active mode packets they

405
00:18:56,060 --> 00:18:59,810
introduce some additional logic to try

406
00:18:57,860 --> 00:19:02,240
and maintain compatibility with some

407
00:18:59,810 --> 00:19:03,500
broken clients and basically they said

408
00:19:02,240 --> 00:19:07,600
all right<font color="#E5E5E5"> well</font><font color="#CCCCCC"> if you know</font>

409
00:19:03,500 --> 00:19:10,130
authentication<font color="#E5E5E5"> is not enabled or error</font>

410
00:19:07,600 --> 00:19:11,629
basically we're going to fall<font color="#CCCCCC"> down into</font>

411
00:19:10,130 --> 00:19:14,510
<font color="#E5E5E5">the special code for special clients</font>

412
00:19:11,630 --> 00:19:16,310
otherwise mobilize an association and

413
00:19:14,510 --> 00:19:18,590
they forgot<font color="#CCCCCC"> to cover the crypto</font><font color="#E5E5E5"> nack</font>

414
00:19:16,310 --> 00:19:20,840
case which means that<font color="#E5E5E5"> all an attacker</font>

415
00:19:18,590 --> 00:19:22,520
has to do to induce a victim to set up

416
00:19:20,840 --> 00:19:25,240
an association and synchronize time with

417
00:19:22,520 --> 00:19:27,550
it is send them one of<font color="#E5E5E5"> these</font>

418
00:19:25,240 --> 00:19:30,530
unauthenticated krypton ack packets and

419
00:19:27,550 --> 00:19:32,090
<font color="#E5E5E5">i'll set up this association and so we</font>

420
00:19:30,530 --> 00:19:33,800
might<font color="#E5E5E5"> ask at this point well how do you</font>

421
00:19:32,090 --> 00:19:35,870
how does<font color="#E5E5E5"> the attacker know what key in</font>

422
00:19:33,800 --> 00:19:37,280
order<font color="#E5E5E5"> to actually communicate over this</font>

423
00:19:35,870 --> 00:19:40,310
you know what should it be<font color="#E5E5E5"> should be an</font>

424
00:19:37,280 --> 00:19:44,389
authenticated<font color="#CCCCCC"> association well it turns</font>

425
00:19:40,310 --> 00:19:47,290
<font color="#CCCCCC">out that ntp also reuses key id0</font>

426
00:19:44,390 --> 00:19:50,900
internally<font color="#CCCCCC"> to mean its unauthenticated</font>

427
00:19:47,290 --> 00:19:52,820
so that Krypton that packet sets up an

428
00:19:50,900 --> 00:19:54,380
unauthenticated<font color="#CCCCCC"> association at which</font>

429
00:19:52,820 --> 00:19:56,210
point the attacker can then just use

430
00:19:54,380 --> 00:19:57,890
unauthenticated symmetric ntp and

431
00:19:56,210 --> 00:19:59,390
control the victims clock and the

432
00:19:57,890 --> 00:20:01,790
attacker can basically do this as many

433
00:19:59,390 --> 00:20:04,510
times as necessary in order to actually

434
00:20:01,790 --> 00:20:13,430
override any legitimate time sources a

435
00:20:04,510 --> 00:20:16,220
victim might<font color="#CCCCCC"> have so one other fun thing</font>

436
00:20:13,430 --> 00:20:19,970
we found was the ability<font color="#E5E5E5"> to spoof rep</font>

437
00:20:16,220 --> 00:20:21,470
clocks so internally ntp you know how

438
00:20:19,970 --> 00:20:23,539
all these<font color="#E5E5E5"> peers well how do you keep</font>

439
00:20:21,470 --> 00:20:26,630
um well you know we identify them by IP

440
00:20:23,539 --> 00:20:28,220
address we put them in a peer list but

441
00:20:26,630 --> 00:20:29,480
you may<font color="#CCCCCC"> have one or more</font><font color="#E5E5E5"> ref clocks you</font>

442
00:20:28,220 --> 00:20:32,179
know so how do<font color="#E5E5E5"> we keep track of those</font>

443
00:20:29,480 --> 00:20:34,940
<font color="#E5E5E5">we'll put them in our peer list but</font>

444
00:20:32,179 --> 00:20:36,890
peers are identified<font color="#CCCCCC"> by IP address well</font>

445
00:20:34,940 --> 00:20:38,870
we'll identify ref clocks by<font color="#E5E5E5"> P address</font>

446
00:20:36,890 --> 00:20:41,150
even<font color="#CCCCCC"> they don't</font><font color="#E5E5E5"> really have</font><font color="#CCCCCC"> one so where</font>

447
00:20:38,870 --> 00:20:43,219
do<font color="#CCCCCC"> we get these IP addresses well you</font>

448
00:20:41,150 --> 00:20:45,080
know so we identify like you know our

449
00:20:43,220 --> 00:20:47,059
remote peer that we're synchronizing to

450
00:20:45,080 --> 00:20:49,460
using<font color="#E5E5E5"> the IP</font><font color="#CCCCCC"> address so we'll just</font>

451
00:20:47,059 --> 00:20:53,149
<font color="#E5E5E5">assign a local host IP address to our</font>

452
00:20:49,460 --> 00:20:56,299
ref clock and whenever we get a ref

453
00:20:53,150 --> 00:20:58,909
clock packet will basically create a

454
00:20:56,299 --> 00:21:02,210
fake network packet put the ref clocks

455
00:20:58,909 --> 00:21:05,000
IP address on it and and process it um

456
00:21:02,210 --> 00:21:11,900
does anyone say verdad no problem with

457
00:21:05,000 --> 00:21:16,340
<font color="#CCCCCC">it well you know on most systems they're</font>

458
00:21:11,900 --> 00:21:18,230
going to ntp assumes that that local net

459
00:21:16,340 --> 00:21:20,990
packets are going to be filtered out in

460
00:21:18,230 --> 00:21:22,940
their<font color="#E5E5E5"> martian packets right well that's</font>

461
00:21:20,990 --> 00:21:25,100
not true on all systems and for some

462
00:21:22,940 --> 00:21:26,659
very good reasons and so on those

463
00:21:25,100 --> 00:21:29,090
systems the attacker just basically

464
00:21:26,659 --> 00:21:32,270
spoofs a packet with a ref clock IP

465
00:21:29,090 --> 00:21:34,220
address and ntp will say<font color="#CCCCCC"> ok here's</font>

466
00:21:32,270 --> 00:21:54,799
here's a packet from my ref clock<font color="#CCCCCC"> i</font>

467
00:21:34,220 --> 00:21:58,840
better update<font color="#E5E5E5"> my time yeah it it has the</font>

468
00:21:54,799 --> 00:21:58,840
potential to get you in a lot of trouble

469
00:22:13,920 --> 00:22:19,710
or having certain state be implicit it's

470
00:22:17,910 --> 00:22:21,630
like well you<font color="#CCCCCC"> know we're in</font><font color="#E5E5E5"> the state if</font>

471
00:22:19,710 --> 00:22:33,180
this value<font color="#CCCCCC"> in that value have this</font>

472
00:22:21,630 --> 00:22:39,780
correspondence<font color="#E5E5E5"> you know nice yep you</font>

473
00:22:33,180 --> 00:22:42,720
mean as well assuming someone's using

474
00:22:39,780 --> 00:22:48,960
<font color="#CCCCCC">ipsi</font><font color="#E5E5E5"> ipsec right like that that's not</font>

475
00:22:42,720 --> 00:22:50,850
very common so yeah so ipsec could be

476
00:22:48,960 --> 00:22:53,700
used in<font color="#E5E5E5"> order prevent like you know off</font>

477
00:22:50,850 --> 00:22:55,980
path spoofing<font color="#E5E5E5"> the one thing that it you</font>

478
00:22:53,700 --> 00:22:59,370
know potentially<font color="#E5E5E5"> couldn't do take care</font>

479
00:22:55,980 --> 00:23:03,090
of would be like replays of previous

480
00:22:59,370 --> 00:23:04,199
legitimate packets so<font color="#CCCCCC"> i should</font><font color="#E5E5E5"> have</font>

481
00:23:03,090 --> 00:23:05,610
mentioned at the very beginning this is

482
00:23:04,200 --> 00:23:07,740
not all Cisco's work we were also

483
00:23:05,610 --> 00:23:10,310
collaborating with a shearing<font color="#E5E5E5"> goldberg</font>

484
00:23:07,740 --> 00:23:13,050
and<font color="#E5E5E5"> ancho</font><font color="#CCCCCC"> malhotra at Boston University</font>

485
00:23:10,310 --> 00:23:14,940
and and one of the<font color="#CCCCCC"> things that</font><font color="#E5E5E5"> they</font>

486
00:23:13,050 --> 00:23:17,970
specifically found was in broadcast mode

487
00:23:14,940 --> 00:23:19,380
just capture some packets replay them to

488
00:23:17,970 --> 00:23:23,810
the server and<font color="#E5E5E5"> you can basically pin it</font>

489
00:23:19,380 --> 00:23:23,810
at one<font color="#E5E5E5"> point in</font><font color="#CCCCCC"> time essentially</font><font color="#E5E5E5"> forever</font>

490
00:23:28,980 --> 00:23:31,790
thank you Matt

