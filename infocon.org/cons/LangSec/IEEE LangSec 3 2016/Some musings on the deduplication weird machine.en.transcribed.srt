1
00:00:00,000 --> 00:00:07,440
this talks about the wit machine which

2
00:00:04,009 --> 00:00:12,259
is created by memory deduplication a

3
00:00:07,440 --> 00:00:16,139
feature offered by some virtual machine

4
00:00:12,259 --> 00:00:24,539
some some hypervisors and lately also

5
00:00:16,139 --> 00:00:26,910
windows 8.1 and higher so it the yeah

6
00:00:24,539 --> 00:00:31,369
our paper presented at security and

7
00:00:26,910 --> 00:00:38,100
privacy yesterday explains the<font color="#CCCCCC"> whole</font>

8
00:00:31,369 --> 00:00:40,739
thing so this will be a kind of an

9
00:00:38,100 --> 00:00:50,070
improvised talk with some extra thoughts

10
00:00:40,739 --> 00:00:58,858
of about so yeah how the how does

11
00:00:50,070 --> 00:01:04,710
deduplication attack kind of well fits

12
00:00:58,859 --> 00:01:12,710
into the yeah<font color="#E5E5E5"> I would just realized too</font>

13
00:01:04,709 --> 00:01:17,990
weird machines so the so in our paper so

14
00:01:12,710 --> 00:01:21,298
the<font color="#E5E5E5"> people the authors of roham rjs have</font>

15
00:01:17,990 --> 00:01:36,139
shown that it's now possible to use the

16
00:01:21,299 --> 00:01:36,140
row hammer attack fit a hardware uh-huh

17
00:01:38,130 --> 00:01:47,158
a hardware attack which allows for bit

18
00:01:41,939 --> 00:01:51,990
flipping in memory also<font color="#E5E5E5"> work that also</font>

19
00:01:47,159 --> 00:01:55,560
<font color="#CCCCCC">works</font><font color="#E5E5E5"> from JavaScript and but the</font>

20
00:01:51,990 --> 00:01:58,500
published attack using<font color="#CCCCCC"> a</font><font color="#E5E5E5"> row hammer to</font>

21
00:01:55,560 --> 00:02:00,689
do privilege escalation is kind of

22
00:01:58,500 --> 00:02:06,140
difficult to<font color="#CCCCCC"> do from</font><font color="#E5E5E5"> JavaScript because</font>

23
00:02:00,689 --> 00:02:06,139
it requires<font color="#CCCCCC"> spraying of memory player at</font>

24
00:02:07,220 --> 00:02:15,209
paging memory paging pages in memory so

25
00:02:11,720 --> 00:02:19,109
<font color="#E5E5E5">it basically allocates lots of file</font>

26
00:02:15,209 --> 00:02:22,860
backed memory pages and then yeah make

27
00:02:19,110 --> 00:02:25,799
sure the a lot of pages and memory are

28
00:02:22,860 --> 00:02:28,650
actually used with using<font color="#CCCCCC"> the before the</font>

29
00:02:25,799 --> 00:02:30,870
paging mechanism so with this<font color="#CCCCCC"> is kind</font><font color="#E5E5E5"> of</font>

30
00:02:28,650 --> 00:02:34,790
difficult to achieve from<font color="#E5E5E5"> JavaScript so</font>

31
00:02:30,870 --> 00:02:40,920
in our attack we present a reliable

32
00:02:34,790 --> 00:02:44,780
pretty reliable exploitation<font color="#CCCCCC"> methods to</font>

33
00:02:40,920 --> 00:02:51,268
exploit Microsoft edge from<font color="#E5E5E5"> JavaScript</font>

34
00:02:44,780 --> 00:02:54,739
using a memory leak a memory leak it

35
00:02:51,269 --> 00:02:59,310
stems<font color="#CCCCCC"> from the</font><font color="#E5E5E5"> memory deduplication</font>

36
00:02:54,739 --> 00:03:01,590
functionality in Windows<font color="#CCCCCC"> 10 so in order</font>

37
00:02:59,310 --> 00:03:05,780
to do our row hammer attack we need to

38
00:03:01,590 --> 00:03:10,380
lick some information<font color="#CCCCCC"> in this case</font><font color="#E5E5E5"> heap</font>

39
00:03:05,780 --> 00:03:15,660
he put a heat pointer pointing to data

40
00:03:10,380 --> 00:03:18,959
we control and the code pointer to the

41
00:03:15,660 --> 00:03:22,560
<font color="#CCCCCC">JavaScript library itself and in our</font>

42
00:03:18,959 --> 00:03:25,980
exploit we pack this into a fake object

43
00:03:22,560 --> 00:03:28,980
and and then we will use row hammer to

44
00:03:25,980 --> 00:03:34,440
flip a bit from a pointer from one fake

45
00:03:28,980 --> 00:03:36,238
object from one from one real object to

46
00:03:34,440 --> 00:03:38,900
our fake object and from that we can art

47
00:03:36,239 --> 00:03:43,079
achieve an arbitrary<font color="#CCCCCC"> readwrite primitive</font>

48
00:03:38,900 --> 00:03:45,810
so but in order to<font color="#CCCCCC"> lick this</font><font color="#E5E5E5"> information</font>

49
00:03:43,079 --> 00:03:48,919
will be<font color="#CCCCCC"> using a memory deduplication</font>

50
00:03:45,810 --> 00:03:51,600
side-channel attack so how this is work

51
00:03:48,919 --> 00:03:57,270
in short if an attacker wants to

52
00:03:51,600 --> 00:04:00,660
you verified that a victim process or or

53
00:03:57,270 --> 00:04:03,060
virtual machine or anything has a

54
00:04:00,660 --> 00:04:07,770
certain specific picture of the Mona

55
00:04:03,060 --> 00:04:11,040
Lisa in his<font color="#CCCCCC"> or her memory then like this</font>

56
00:04:07,770 --> 00:04:15,900
then an attacker can replicate the

57
00:04:11,040 --> 00:04:22,039
memory pages and then the memory

58
00:04:15,900 --> 00:04:24,810
deduplication memory deduplication

59
00:04:22,040 --> 00:04:29,370
mechanism in the OS or the hypervisor

60
00:04:24,810 --> 00:04:31,140
will will merge that will identify that

61
00:04:29,370 --> 00:04:32,790
these pages are the same and then<font color="#E5E5E5"> will</font>

62
00:04:31,140 --> 00:04:38,039
point the page tables to the<font color="#E5E5E5"> same</font>

63
00:04:32,790 --> 00:04:41,690
physical location but then the<font color="#E5E5E5"> problem</font>

64
00:04:38,040 --> 00:04:44,820
<font color="#E5E5E5">is if anyone wants to write to this page</font>

65
00:04:41,690 --> 00:04:47,219
yeah you<font color="#E5E5E5"> can't change this in the other</font>

66
00:04:44,820 --> 00:04:50,490
process as well so the page is marked

67
00:04:47,220 --> 00:04:52,770
copy-on-write and that's where the

68
00:04:50,490 --> 00:04:54,480
problem lies because this<font color="#E5E5E5"> is detectable</font>

69
00:04:52,770 --> 00:04:57,390
and it's also<font color="#E5E5E5"> detectable from in</font>

70
00:04:54,480 --> 00:04:59,700
<font color="#CCCCCC">JavaScript because if you write</font><font color="#E5E5E5"> a change</font>

71
00:04:57,390 --> 00:05:02,250
one page with a single right it takes

72
00:04:59,700 --> 00:05:05,870
doesn't<font color="#E5E5E5"> take a lot of time certainly</font>

73
00:05:02,250 --> 00:05:08,400
when the cash is not cold but when you

74
00:05:05,870 --> 00:05:10,140
do this<font color="#E5E5E5"> on a copy on write page the</font>

75
00:05:08,400 --> 00:05:13,049
kernel or the hypervisor has to do all

76
00:05:10,140 --> 00:05:15,719
kinds of stuff before<font color="#CCCCCC"> you can write to</font>

77
00:05:13,050 --> 00:05:19,980
the page it has to deduplicate<font color="#CCCCCC"> d D D</font>

78
00:05:15,720 --> 00:05:23,030
duplicate the page and<font color="#E5E5E5"> before</font><font color="#CCCCCC"> you can</font>

79
00:05:19,980 --> 00:05:26,610
write<font color="#CCCCCC"> to it and this is measurable so</font>

80
00:05:23,030 --> 00:05:30,030
this is<font color="#CCCCCC"> this is a neat trick but all we</font>

81
00:05:26,610 --> 00:05:32,400
<font color="#CCCCCC">can do is is leaked one bit of</font>

82
00:05:30,030 --> 00:05:34,940
information a confirmation<font color="#CCCCCC"> that the</font>

83
00:05:32,400 --> 00:05:37,770
certain page is in memory so<font color="#CCCCCC"> can</font><font color="#E5E5E5"> we</font>

84
00:05:34,940 --> 00:05:40,380
generalize this to licking arbitrary

85
00:05:37,770 --> 00:05:42,900
data so turns out in some cases you can

86
00:05:40,380 --> 00:05:45,290
but there<font color="#CCCCCC"> are some</font><font color="#E5E5E5"> problems with this</font>

87
00:05:42,900 --> 00:05:49,289
because the the secret you want<font color="#E5E5E5"> to leak</font>

88
00:05:45,290 --> 00:05:54,030
might not be the size of a page if you

89
00:05:49,290 --> 00:05:59,040
can so you<font color="#CCCCCC"> need</font><font color="#E5E5E5"> to have a way to encode</font>

90
00:05:54,030 --> 00:06:04,090
a secret into a page so the thing is

91
00:05:59,040 --> 00:06:06,790
<font color="#CCCCCC">that this is</font><font color="#E5E5E5"> not really something and so</font>

92
00:06:04,090 --> 00:06:10,989
an application<font color="#CCCCCC"> developer should have to</font>

93
00:06:06,790 --> 00:06:14,260
worry about that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> cannot you cannot</font>

94
00:06:10,990 --> 00:06:16,840
create a page with a secret<font color="#E5E5E5"> in there and</font>

95
00:06:14,260 --> 00:06:21,639
then some other data that an attacker

96
00:06:16,840 --> 00:06:24,869
can guess so it turns<font color="#E5E5E5"> out this this yeah</font>

97
00:06:21,639 --> 00:06:27,729
you might have<font color="#CCCCCC"> a socket and you</font><font color="#E5E5E5"> write</font>

98
00:06:24,870 --> 00:06:30,220
your your data to the socket and then

99
00:06:27,729 --> 00:06:32,650
it's written inside a buffer but then

100
00:06:30,220 --> 00:06:34,270
you cut off<font color="#E5E5E5"> just before the end of the</font>

101
00:06:32,650 --> 00:06:36,099
page and at the end of the page there

102
00:06:34,270 --> 00:06:39,159
<font color="#CCCCCC">are still some data you might want to</font>

103
00:06:36,100 --> 00:06:40,720
leak so this is<font color="#E5E5E5"> not something an</font>

104
00:06:39,160 --> 00:06:45,630
application<font color="#CCCCCC"> developer should have to</font>

105
00:06:40,720 --> 00:06:50,530
protect against then there's another

106
00:06:45,630 --> 00:06:52,419
problem and that's that the thing you

107
00:06:50,530 --> 00:06:55,270
<font color="#E5E5E5">want to leak might have more entropy</font>

108
00:06:52,419 --> 00:06:58,090
than you could probe for because<font color="#CCCCCC"> you for</font>

109
00:06:55,270 --> 00:07:01,479
every possibility you have<font color="#E5E5E5"> to craft the</font>

110
00:06:58,090 --> 00:07:05,460
page in<font color="#CCCCCC"> your own memory and then you</font>

111
00:07:01,479 --> 00:07:05,460
will get the confirmation of which page

112
00:07:05,729 --> 00:07:13,960
exists in memory but if you have say a

113
00:07:10,139 --> 00:07:16,180
pointer with 24 bit of entropy you need

114
00:07:13,960 --> 00:07:19,000
64 gigabytes of memory to probe for

115
00:07:16,180 --> 00:07:22,419
every possibility so that's not<font color="#E5E5E5"> really</font>

116
00:07:19,000 --> 00:07:30,960
<font color="#E5E5E5">feasible so there are some in our paper</font>

117
00:07:22,419 --> 00:07:34,240
we describe some ways of of some ways of

118
00:07:30,960 --> 00:07:36,789
leaking this data anyway so one thing<font color="#CCCCCC"> is</font>

119
00:07:34,240 --> 00:07:43,120
if you can control the alignment of the

120
00:07:36,789 --> 00:07:46,330
secret that you can you want to lick you

121
00:07:43,120 --> 00:07:49,840
<font color="#CCCCCC">might be able</font><font color="#E5E5E5"> to have a page which with</font>

122
00:07:46,330 --> 00:07:51,370
almost with all known data but with part

123
00:07:49,840 --> 00:07:55,469
of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> secret you want</font><font color="#E5E5E5"> to lick so you</font>

124
00:07:51,370 --> 00:07:58,360
only have to probe for part of a secret

125
00:07:55,470 --> 00:08:01,870
if you don't<font color="#E5E5E5"> control the alignment there</font>

126
00:07:58,360 --> 00:08:05,200
might be a different way of getting what

127
00:08:01,870 --> 00:08:14,310
you want which is to overwrite part of

128
00:08:05,200 --> 00:08:17,250
the secret the<font color="#CCCCCC"> in in our exploit we use</font>

129
00:08:14,310 --> 00:08:21,220
the first first

130
00:08:17,250 --> 00:08:24,510
primitive so in the<font color="#E5E5E5"> Microsoft edge</font><font color="#CCCCCC"> there</font>

131
00:08:21,220 --> 00:08:30,220
<font color="#CCCCCC">is a</font><font color="#E5E5E5"> jet the JIT compiler creates</font>

132
00:08:24,510 --> 00:08:33,400
machine code but it has a the which<font color="#E5E5E5"> is</font>

133
00:08:30,220 --> 00:08:36,430
but the different and the last<font color="#E5E5E5"> part of</font>

134
00:08:33,400 --> 00:08:39,100
the function is always the same<font color="#E5E5E5"> except</font>

135
00:08:36,429 --> 00:08:43,929
for the code address and the code

136
00:08:39,100 --> 00:08:47,080
address is carry some<font color="#E5E5E5"> a SLR information</font>

137
00:08:43,929 --> 00:08:53,910
so we want to lick that so by creating

138
00:08:47,080 --> 00:09:00,640
JavaScript objects we can we can we can

139
00:08:53,910 --> 00:09:03,520
we can create pages which only carry

140
00:09:00,640 --> 00:09:07,540
part of the secret<font color="#E5E5E5"> of the part of the</font>

141
00:09:03,520 --> 00:09:12,270
SLR information by having controlling

142
00:09:07,540 --> 00:09:16,000
the alignment such that the code address

143
00:09:12,270 --> 00:09:19,660
spans multiple pages and then we can

144
00:09:16,000 --> 00:09:24,700
lick it in multiple phases and get the

145
00:09:19,660 --> 00:09:27,939
code address but there there might be a

146
00:09:24,700 --> 00:09:31,630
situation where<font color="#E5E5E5"> an attacker</font><font color="#CCCCCC"> kind of</font>

147
00:09:27,940 --> 00:09:34,450
craft is just a page that where where

148
00:09:31,630 --> 00:09:38,970
where where it kind of reduces the

149
00:09:34,450 --> 00:09:42,850
entropy of the secret at once a leak<font color="#E5E5E5"> but</font>

150
00:09:38,970 --> 00:09:47,350
yeah and this<font color="#CCCCCC"> is the case for this was</font>

151
00:09:42,850 --> 00:09:49,900
the<font color="#E5E5E5"> case for us for the hip pointer that</font>

152
00:09:47,350 --> 00:09:53,050
we wanted<font color="#E5E5E5"> to leak but there there is</font>

153
00:09:49,900 --> 00:09:55,990
another trick which is related to the

154
00:09:53,050 --> 00:10:01,479
birthday<font color="#E5E5E5"> problem which</font><font color="#CCCCCC"> is the into which</font>

155
00:09:55,990 --> 00:10:05,250
is the observation<font color="#CCCCCC"> that giving a group</font>

156
00:10:01,480 --> 00:10:08,200
of<font color="#CCCCCC"> people the chances of someone having</font>

157
00:10:05,250 --> 00:10:13,650
the same<font color="#CCCCCC"> birthday as someone else in the</font>

158
00:10:08,200 --> 00:10:22,900
<font color="#CCCCCC">group yeah for that is non-intuitive</font>

159
00:10:13,650 --> 00:10:25,060
lilo so and and the reason<font color="#CCCCCC"> for this is</font>

160
00:10:22,900 --> 00:10:27,310
that you're not comparing one person's

161
00:10:25,060 --> 00:10:29,380
birthday with a few other people's

162
00:10:27,310 --> 00:10:29,979
birthday you you're comparing every book

163
00:10:29,380 --> 00:10:31,750
every

164
00:10:29,980 --> 00:10:35,560
<font color="#CCCCCC">person's birthday with every other</font>

165
00:10:31,750 --> 00:10:38,500
person's birthday so in order to lick a

166
00:10:35,560 --> 00:10:43,479
hip pointer with data we control we use

167
00:10:38,500 --> 00:10:45,700
the<font color="#CCCCCC"> same principle so we don't</font><font color="#E5E5E5"> care</font>

168
00:10:43,480 --> 00:10:48,340
which<font color="#CCCCCC"> he point or we leak we just want</font>

169
00:10:45,700 --> 00:10:54,970
to lick one of them so we<font color="#E5E5E5"> just create</font>

170
00:10:48,340 --> 00:11:00,280
lots of objects<font color="#E5E5E5"> and then and these</font>

171
00:10:54,970 --> 00:11:02,560
objects represents and we yeah and we

172
00:11:00,280 --> 00:11:04,829
make sure that we have pages in memory

173
00:11:02,560 --> 00:11:08,680
with references to these objects and

174
00:11:04,830 --> 00:11:10,890
then we in<font color="#E5E5E5"> JavaScript we can also create</font>

175
00:11:08,680 --> 00:11:16,150
arbitrary binary data and we guess

176
00:11:10,890 --> 00:11:19,960
references to<font color="#E5E5E5"> objects and then we use</font>

177
00:11:16,150 --> 00:11:24,189
the<font color="#E5E5E5"> binary deduplication mechanism of</font>

178
00:11:19,960 --> 00:11:30,660
the OS to do an end times<font color="#E5E5E5"> M comparison</font>

179
00:11:24,190 --> 00:11:30,660
it will well<font color="#E5E5E5"> basically the the the the</font>

180
00:11:31,020 --> 00:11:36,730
yeah the whole mechanism of

181
00:11:34,060 --> 00:11:38,680
deduplication is doing compare is

182
00:11:36,730 --> 00:11:42,250
basically compare everything with

183
00:11:38,680 --> 00:11:45,959
everything<font color="#E5E5E5"> so well that's what we abuse</font>

184
00:11:42,250 --> 00:11:45,960
in this case and will

185
00:11:50,900 --> 00:12:04,230
yeah so yeah so basically this is a

186
00:11:59,430 --> 00:12:07,739
slice art are our demonstration of this

187
00:12:04,230 --> 00:12:09,480
<font color="#E5E5E5">so yeah the chance of getting one hit be</font>

188
00:12:07,740 --> 00:12:11,370
too yeah so it's slightly different

189
00:12:09,480 --> 00:12:14,730
compared to the<font color="#E5E5E5"> birthday problem because</font>

190
00:12:11,370 --> 00:12:17,339
the you have two groups but the the

191
00:12:14,730 --> 00:12:21,720
intuition is the same and<font color="#E5E5E5"> you only need</font>

192
00:12:17,339 --> 00:12:28,080
the square root space complexity to get

193
00:12:21,720 --> 00:12:30,810
the right head I<font color="#E5E5E5"> get a hit so yeah so</font>

194
00:12:28,080 --> 00:12:33,210
<font color="#E5E5E5">and then it gets duplicated then we can</font>

195
00:12:30,810 --> 00:12:38,489
lick<font color="#CCCCCC"> the address so this</font><font color="#E5E5E5"> is a figure</font>

196
00:12:33,210 --> 00:12:40,680
from the from the paper we I added so in

197
00:12:38,490 --> 00:12:45,060
practice we kind of have a side channel

198
00:12:40,680 --> 00:12:48,300
where we leak objects<font color="#E5E5E5"> with with a on a</font>

199
00:12:45,060 --> 00:12:51,770
megabyte boundary so we kind of leak no

200
00:12:48,300 --> 00:12:59,660
no the<font color="#E5E5E5"> the least significant bits and</font>

201
00:12:51,770 --> 00:13:01,680
<font color="#CCCCCC">then and then these objects represents</font>

202
00:12:59,660 --> 00:13:07,170
pointers which are very close together

203
00:13:01,680 --> 00:13:09,270
and then in our probe pages that we the

204
00:13:07,170 --> 00:13:14,099
other pages we guess might be in the

205
00:13:09,270 --> 00:13:17,520
address space we we take big jumps and

206
00:13:14,100 --> 00:13:22,080
then cover the whole address space and

207
00:13:17,520 --> 00:13:23,819
then we get matches so and recovered

208
00:13:22,080 --> 00:13:28,860
over the pointers that we<font color="#E5E5E5"> are</font><font color="#CCCCCC"> looking</font>

209
00:13:23,820 --> 00:13:32,520
<font color="#E5E5E5">for so to complete the attack we now can</font>

210
00:13:28,860 --> 00:13:33,900
<font color="#CCCCCC">controller create a fake objects inside</font>

211
00:13:32,520 --> 00:13:39,089
the JavaScript array there's another

212
00:13:33,900 --> 00:13:43,010
JavaScript array which has a reference

213
00:13:39,089 --> 00:13:43,010
appointed to it and then we<font color="#E5E5E5"> need to</font>

214
00:13:44,900 --> 00:13:52,310
change this pointer to our fake object

215
00:13:47,279 --> 00:13:59,209
for that we use the Java<font color="#CCCCCC"> row hammer</font>

216
00:13:52,310 --> 00:13:59,209
primitive in row hammer

217
00:14:01,150 --> 00:14:09,800
when you activate a certain role

218
00:14:03,910 --> 00:14:14,510
repeatedly there are some physical

219
00:14:09,800 --> 00:14:17,329
properties of the Durham memory which

220
00:14:14,510 --> 00:14:23,290
are made amid for out of capacitors

221
00:14:17,330 --> 00:14:27,830
which yeah which caused charges to leak

222
00:14:23,290 --> 00:14:33,920
and and if you do this quickly enough

223
00:14:27,830 --> 00:14:41,020
and you have<font color="#CCCCCC"> bad bad memory bits may</font>

224
00:14:33,920 --> 00:14:46,490
flip and so using this bit flip we can

225
00:14:41,020 --> 00:14:50,240
<font color="#E5E5E5">change a flip say one what a 120 and it</font>

226
00:14:46,490 --> 00:14:52,570
will point<font color="#CCCCCC"> our fake object and from that</font>

227
00:14:50,240 --> 00:15:03,350
we can escalate to arbitrary read right

228
00:14:52,570 --> 00:15:05,840
so yeah so yeah the main thing<font color="#CCCCCC"> to bring</font>

229
00:15:03,350 --> 00:15:09,290
back it is i guess<font color="#E5E5E5"> that memory</font>

230
00:15:05,840 --> 00:15:15,080
duplication is a bit more powerful than

231
00:15:09,290 --> 00:15:19,250
one bit side channel and yeah row hammer

232
00:15:15,080 --> 00:15:21,080
is the<font color="#E5E5E5"> air yeah we're browser</font>

233
00:15:19,250 --> 00:15:23,860
<font color="#CCCCCC">exploitation using row hammer is</font>

234
00:15:21,080 --> 00:15:23,860
possible

