1
00:00:00,000 --> 00:00:03,689
i'm here<font color="#E5E5E5"> to present on a posteriori</font>

2
00:00:01,740 --> 00:00:06,089
taint tracking for demonstrating

3
00:00:03,689 --> 00:00:07,710
non-interference in expressive low-level

4
00:00:06,089 --> 00:00:09,389
languages which is a<font color="#E5E5E5"> little bit</font>

5
00:00:07,710 --> 00:00:11,099
complicated so if you prefer you<font color="#CCCCCC"> can</font>

6
00:00:09,389 --> 00:00:12,780
call it faster automated proofs that

7
00:00:11,099 --> 00:00:15,750
information doesn't leak in<font color="#E5E5E5"> android</font>

8
00:00:12,780 --> 00:00:18,509
applications but<font color="#CCCCCC"> i do mean every word of</font>

9
00:00:15,750 --> 00:00:20,520
this what we're doing here<font color="#CCCCCC"> is taint</font>

10
00:00:18,510 --> 00:00:23,160
tracking after we've done<font color="#E5E5E5"> a static</font>

11
00:00:20,520 --> 00:00:24,720
analysis<font color="#E5E5E5"> and it's in a</font><font color="#CCCCCC"> dalek byte code</font>

12
00:00:23,160 --> 00:00:27,119
which is<font color="#CCCCCC"> an expressive low-level</font>

13
00:00:24,720 --> 00:00:28,740
language by expressive<font color="#CCCCCC"> i mean a language</font>

14
00:00:27,119 --> 00:00:30,960
that has things like functions and

15
00:00:28,740 --> 00:00:32,969
exceptional flow so<font color="#E5E5E5"> ultimately the</font>

16
00:00:30,960 --> 00:00:35,250
answer the question we want to answer is

17
00:00:32,969 --> 00:00:37,890
well what happens to my information my

18
00:00:35,250 --> 00:00:39,690
password my<font color="#E5E5E5"> GPS data whatever I mean</font>

19
00:00:37,890 --> 00:00:42,360
phones have access to a lot of stuff

20
00:00:39,690 --> 00:00:45,059
<font color="#E5E5E5">it's kind</font><font color="#CCCCCC"> of scary and so we were trying</font>

21
00:00:42,360 --> 00:00:46,469
<font color="#E5E5E5">to to to put a bound on where this</font>

22
00:00:45,059 --> 00:00:48,839
information can go and prove<font color="#CCCCCC"> that it's</font>

23
00:00:46,469 --> 00:00:50,250
<font color="#E5E5E5">not going to unsafe places so we start</font>

24
00:00:48,840 --> 00:00:52,800
<font color="#CCCCCC">with the</font><font color="#E5E5E5"> work that</font><font color="#CCCCCC"> Denning and denting</font>

25
00:00:50,250 --> 00:00:54,719
did in the 1970s they started<font color="#E5E5E5"> with taint</font>

26
00:00:52,800 --> 00:00:56,910
flow analysis which is kind of the

27
00:00:54,719 --> 00:00:58,829
digital equivalent of putting die in a

28
00:00:56,910 --> 00:01:00,239
pipe and seeing where it goes so you

29
00:00:58,829 --> 00:01:01,530
assign a tank to a value and then

30
00:01:00,239 --> 00:01:04,408
propagate that taint throughout

31
00:01:01,530 --> 00:01:06,659
throughout the program you know tape

32
00:01:04,409 --> 00:01:08,549
flow analysis is a dynamic analysis and

33
00:01:06,659 --> 00:01:09,630
we want<font color="#E5E5E5"> something it's fully static and</font>

34
00:01:08,549 --> 00:01:10,740
we want<font color="#E5E5E5"> something that allows us to</font>

35
00:01:09,630 --> 00:01:14,880
prove<font color="#E5E5E5"> something for all possible</font>

36
00:01:10,740 --> 00:01:17,820
executions of a program and the work

37
00:01:14,880 --> 00:01:20,039
<font color="#CCCCCC">that ending indenting did also is was</font>

38
00:01:17,820 --> 00:01:22,520
written and applied<font color="#CCCCCC"> to simple languages</font>

39
00:01:20,040 --> 00:01:25,080
that lacked functions and had very clear

40
00:01:22,520 --> 00:01:27,060
syntactic bounds on<font color="#CCCCCC"> the extent of</font>

41
00:01:25,080 --> 00:01:29,429
branches and things like that and<font color="#E5E5E5"> so we</font>

42
00:01:27,060 --> 00:01:31,799
also wanted<font color="#E5E5E5"> to apply this to a modern</font>

43
00:01:29,430 --> 00:01:35,040
language that has functions exceptions

44
00:01:31,799 --> 00:01:37,079
and so on and<font color="#E5E5E5"> so what we did is we took</font>

45
00:01:35,040 --> 00:01:38,759
the work of<font color="#CCCCCC"> Denning indenting and we</font>

46
00:01:37,079 --> 00:01:41,130
applied the work of Coos on cuusoo that

47
00:01:38,759 --> 00:01:43,259
is we put our dynamic analysis inside<font color="#CCCCCC"> of</font>

48
00:01:41,130 --> 00:01:47,210
a small step abstract interpreter and

49
00:01:43,259 --> 00:01:50,939
this magically becomes a static analysis

50
00:01:47,210 --> 00:01:52,530
but we did it<font color="#E5E5E5"> we didn't know if it</font>

51
00:01:50,939 --> 00:01:54,779
<font color="#CCCCCC">actually did what it purported to do so</font>

52
00:01:52,530 --> 00:01:57,270
it<font color="#E5E5E5"> asked to determine whether or not it</font>

53
00:01:54,780 --> 00:01:59,880
does what it does what<font color="#E5E5E5"> we</font><font color="#CCCCCC"> want what</font><font color="#E5E5E5"> we</font>

54
00:01:57,270 --> 00:02:02,490
<font color="#E5E5E5">want</font><font color="#CCCCCC"> it to do we needed to have a</font>

55
00:01:59,880 --> 00:02:04,699
formalism that<font color="#E5E5E5"> describes the property we</font>

56
00:02:02,490 --> 00:02:06,929
want so we call<font color="#CCCCCC"> this non-interference</font>

57
00:02:04,700 --> 00:02:09,090
non-interference formally is that no

58
00:02:06,930 --> 00:02:10,560
sensitive information may affect the

59
00:02:09,090 --> 00:02:12,840
behave the observable behaviors of a

60
00:02:10,560 --> 00:02:13,710
program so if we're worried about GPS

61
00:02:12,840 --> 00:02:15,330
data leak

62
00:02:13,710 --> 00:02:17,670
and we're worried about<font color="#E5E5E5"> it leaking to</font>

63
00:02:15,330 --> 00:02:20,010
the network the non-interference means

64
00:02:17,670 --> 00:02:23,160
that if we<font color="#CCCCCC"> have some program trace with</font>

65
00:02:20,010 --> 00:02:25,290
the<font color="#E5E5E5"> GPS datum that is represented by a</font>

66
00:02:23,160 --> 00:02:27,240
green square and it<font color="#E5E5E5"> goes through and it</font>

67
00:02:25,290 --> 00:02:29,100
does some things and then we<font color="#E5E5E5"> run the</font>

68
00:02:27,240 --> 00:02:31,380
program again and the<font color="#CCCCCC"> only difference is</font>

69
00:02:29,100 --> 00:02:33,660
that we have a blue star for our

70
00:02:31,380 --> 00:02:37,140
location that this program must do

71
00:02:33,660 --> 00:02:39,030
exactly the same things we all send in a

72
00:02:37,140 --> 00:02:43,350
model for<font color="#E5E5E5"> our computation and semantics</font>

73
00:02:39,030 --> 00:02:44,190
so our model is<font color="#E5E5E5"> a SI es que machine many</font>

74
00:02:43,350 --> 00:02:46,769
of you are<font color="#CCCCCC"> going to be familiar with</font>

75
00:02:44,190 --> 00:02:48,420
this CES and<font color="#CCCCCC"> K refer</font><font color="#E5E5E5"> to the different</font>

76
00:02:46,770 --> 00:02:50,340
components of a program state it's a

77
00:02:48,420 --> 00:02:53,670
snapshot of where we are in<font color="#E5E5E5"> the program</font>

78
00:02:50,340 --> 00:02:56,730
<font color="#E5E5E5">and what has values in memory and so on</font>

79
00:02:53,670 --> 00:02:58,829
are<font color="#CCCCCC"> so c is control or where we are it's</font>

80
00:02:56,730 --> 00:03:00,869
the expression or the line number or

81
00:02:58,830 --> 00:03:05,060
<font color="#E5E5E5">something like that environment is sort</font>

82
00:03:00,870 --> 00:03:08,970
of like our our local stack frame or

83
00:03:05,060 --> 00:03:11,670
it's a mapping from variables to

84
00:03:08,970 --> 00:03:13,950
addresses the store is<font color="#E5E5E5"> like our model of</font>

85
00:03:11,670 --> 00:03:16,440
memory it's a mapping from addresses to

86
00:03:13,950 --> 00:03:18,329
values and the continuation is like our

87
00:03:16,440 --> 00:03:19,470
program stack for those of you<font color="#CCCCCC"> who live</font>

88
00:03:18,330 --> 00:03:21,900
<font color="#E5E5E5">in the imperative world you might be</font>

89
00:03:19,470 --> 00:03:24,570
<font color="#E5E5E5">more comfortable with instruction</font>

90
00:03:21,900 --> 00:03:26,270
registers heap and stack which are

91
00:03:24,570 --> 00:03:29,400
<font color="#E5E5E5">roughly equivalent to what we're doing</font>

92
00:03:26,270 --> 00:03:31,590
<font color="#E5E5E5">so we take all of this and we bundle it</font>

93
00:03:29,400 --> 00:03:34,320
up and we put<font color="#E5E5E5"> it in this this one state</font>

94
00:03:31,590 --> 00:03:35,640
at the<font color="#E5E5E5"> top and then we calculate from</font>

95
00:03:34,320 --> 00:03:37,709
there using that say we can calculate

96
00:03:35,640 --> 00:03:40,380
its successor and then so on<font color="#E5E5E5"> and so</font>

97
00:03:37,710 --> 00:03:42,000
forth but<font color="#E5E5E5"> this is this is a concrete</font>

98
00:03:40,380 --> 00:03:44,400
analysis and that means<font color="#E5E5E5"> that it can</font>

99
00:03:42,000 --> 00:03:46,530
diverge it can go forever and it's only

100
00:03:44,400 --> 00:03:48,030
exploring one execution through the

101
00:03:46,530 --> 00:03:50,220
program<font color="#E5E5E5"> and so what we have to do is we</font>

102
00:03:48,030 --> 00:03:52,950
<font color="#CCCCCC">have to</font><font color="#E5E5E5"> take our CES and</font><font color="#CCCCCC"> K we have to</font>

103
00:03:50,220 --> 00:03:55,560
abstract them abstraction allows us to

104
00:03:52,950 --> 00:03:59,369
represent multiple concrete concrete

105
00:03:55,560 --> 00:04:01,650
<font color="#CCCCCC">States with a single abstract state and</font>

106
00:03:59,370 --> 00:04:03,390
this solves several problems it allows

107
00:04:01,650 --> 00:04:05,750
us<font color="#CCCCCC"> to look at all possible program</font>

108
00:04:03,390 --> 00:04:09,239
executions it<font color="#E5E5E5"> also allows us to prove</font>

109
00:04:05,750 --> 00:04:11,010
termination so one key bit of

110
00:04:09,240 --> 00:04:12,960
abstraction is that we're abstracting to

111
00:04:11,010 --> 00:04:15,720
a domain<font color="#E5E5E5"> that is</font><font color="#CCCCCC"> guaranteed to</font><font color="#E5E5E5"> be finite</font>

112
00:04:12,960 --> 00:04:17,130
and actually thanks to Van Horn<font color="#E5E5E5"> and</font>

113
00:04:15,720 --> 00:04:19,589
might and<font color="#CCCCCC"> they're abstracting abstract</font>

114
00:04:17,130 --> 00:04:22,409
machines work we know<font color="#E5E5E5"> all we need to do</font>

115
00:04:19,589 --> 00:04:24,960
is abstract the individual<font color="#CCCCCC"> components so</font>

116
00:04:22,410 --> 00:04:27,210
for<font color="#E5E5E5"> example the store maps from abstract</font>

117
00:04:24,960 --> 00:04:29,430
addresses which are<font color="#E5E5E5"> from a</font>

118
00:04:27,210 --> 00:04:32,549
finite set to abstract values which are

119
00:04:29,430 --> 00:04:34,740
also from a finite set so<font color="#E5E5E5"> we have some</font>

120
00:04:32,550 --> 00:04:37,139
abstract state and that abstract state

121
00:04:34,740 --> 00:04:39,060
may have multiple successors that's fine

122
00:04:37,139 --> 00:04:41,130
we<font color="#CCCCCC"> can explore this non</font>

123
00:04:39,060 --> 00:04:42,300
deterministically and they may merge

124
00:04:41,130 --> 00:04:44,280
back together<font color="#E5E5E5"> and they have the same</font>

125
00:04:42,300 --> 00:04:46,889
successor and it can branch out again

126
00:04:44,280 --> 00:04:48,479
and it can<font color="#E5E5E5"> even loop back on itself but</font>

127
00:04:46,889 --> 00:04:51,720
because of the nature of this type of

128
00:04:48,479 --> 00:04:54,360
interpretation this because each state

129
00:04:51,720 --> 00:04:55,770
SI es que encapsulate all the

130
00:04:54,360 --> 00:04:57,539
information<font color="#E5E5E5"> about what's going on in a</font>

131
00:04:55,770 --> 00:04:59,490
program we<font color="#E5E5E5"> won't discover any new</font>

132
00:04:57,539 --> 00:05:01,620
information by re-exploring the same

133
00:04:59,490 --> 00:05:05,580
<font color="#E5E5E5">state and so we</font><font color="#CCCCCC"> just say okay I've</font><font color="#E5E5E5"> seen</font>

134
00:05:01,620 --> 00:05:07,949
this I'm good now<font color="#CCCCCC"> we need to add some</font>

135
00:05:05,580 --> 00:05:09,990
machinery so that we can track taint so

136
00:05:07,949 --> 00:05:12,900
we add in a taint store in the same way

137
00:05:09,990 --> 00:05:15,599
that<font color="#CCCCCC"> the store maps addresses</font><font color="#E5E5E5"> to values</font>

138
00:05:12,900 --> 00:05:17,549
the taint store maps addresses to taint

139
00:05:15,599 --> 00:05:19,380
values and in<font color="#E5E5E5"> this presentation our team</font>

140
00:05:17,550 --> 00:05:21,150
values are simple<font color="#E5E5E5"> boolean although they</font>

141
00:05:19,380 --> 00:05:22,440
can be more complex and that goes all

142
00:05:21,150 --> 00:05:27,030
the way back<font color="#E5E5E5"> to the work by dining and</font>

143
00:05:22,440 --> 00:05:28,680
Denny so when we have some program

144
00:05:27,030 --> 00:05:31,679
that's copying a secret value on two

145
00:05:28,680 --> 00:05:34,110
ex-secret gets a taint on it and when we

146
00:05:31,680 --> 00:05:36,360
copy it onto<font color="#E5E5E5"> X we copy this onto</font><font color="#CCCCCC"> x's</font>

147
00:05:34,110 --> 00:05:38,729
address in the taint store that works

148
00:05:36,360 --> 00:05:40,229
great<font color="#E5E5E5"> until we start branching right if</font>

149
00:05:38,729 --> 00:05:41,699
we want to<font color="#E5E5E5"> prove the absence of any</font>

150
00:05:40,229 --> 00:05:43,710
information flows we have to deal with

151
00:05:41,699 --> 00:05:45,270
<font color="#E5E5E5">all the information flows and we can do</font>

152
00:05:43,710 --> 00:05:48,090
subtle things like in this little<font color="#CCCCCC"> Java</font>

153
00:05:45,270 --> 00:05:51,030
excerpt or a branch<font color="#E5E5E5"> on secret and then</font>

154
00:05:48,090 --> 00:05:53,669
assign constants to<font color="#E5E5E5"> X and the result of</font>

155
00:05:51,030 --> 00:05:56,369
<font color="#E5E5E5">this program is that</font><font color="#CCCCCC"> we've copied secret</font>

156
00:05:53,669 --> 00:05:58,530
on to X but at no point have we done

157
00:05:56,370 --> 00:06:01,110
that in a way that's observable to our

158
00:05:58,530 --> 00:06:02,969
<font color="#E5E5E5">system as it exists right now so we have</font>

159
00:06:01,110 --> 00:06:05,789
to add on yet another piece of machinery

160
00:06:02,969 --> 00:06:08,400
a set of branches where we've we've

161
00:06:05,789 --> 00:06:10,590
diverged our control flow based on

162
00:06:08,400 --> 00:06:13,799
sensitive information also call this the

163
00:06:10,590 --> 00:06:17,549
context ain't set and this is nothing

164
00:06:13,800 --> 00:06:18,930
<font color="#CCCCCC">more but a set of code points so now</font>

165
00:06:17,550 --> 00:06:20,849
back to our example now we have this

166
00:06:18,930 --> 00:06:22,440
thing in<font color="#CCCCCC"> the corner that</font><font color="#E5E5E5"> we're keeping</font>

167
00:06:20,849 --> 00:06:25,349
track of where we've branch so when we

168
00:06:22,440 --> 00:06:27,360
branch at<font color="#E5E5E5"> zero on line 0 we add that</font><font color="#CCCCCC"> to</font>

169
00:06:25,349 --> 00:06:28,979
our context ain't set and then on line

170
00:06:27,360 --> 00:06:31,259
one we're going<font color="#E5E5E5"> to create an implicit</font>

171
00:06:28,979 --> 00:06:33,449
taint value that says we branched<font color="#E5E5E5"> it 0</font>

172
00:06:31,259 --> 00:06:36,389
<font color="#CCCCCC">and then assigned something at line 1</font>

173
00:06:33,449 --> 00:06:38,520
similarly<font color="#CCCCCC"> on line three branch 20</font>

174
00:06:36,389 --> 00:06:40,199
<font color="#E5E5E5">assigned on line three but the problem</font>

175
00:06:38,520 --> 00:06:40,979
is we're also going to do<font color="#E5E5E5"> this to why</font>

176
00:06:40,199 --> 00:06:42,810
even

177
00:06:40,980 --> 00:06:46,230
though all<font color="#E5E5E5"> of us in the room can buy</font>

178
00:06:42,810 --> 00:06:49,860
<font color="#E5E5E5">inspections say this is safe our system</font>

179
00:06:46,230 --> 00:06:52,230
as it exists is going to a sign it ain't

180
00:06:49,860 --> 00:06:54,480
to it happily we have dining and dining

181
00:06:52,230 --> 00:06:57,060
to come to the rescue dining and denting

182
00:06:54,480 --> 00:06:59,190
actually suggested that we just<font color="#CCCCCC"> use</font><font color="#E5E5E5"> the</font>

183
00:06:57,060 --> 00:07:01,380
control flow graph what we can do is we

184
00:06:59,190 --> 00:07:04,620
can calculate the<font color="#E5E5E5"> post</font><font color="#CCCCCC"> Dominator which</font>

185
00:07:01,380 --> 00:07:06,990
<font color="#CCCCCC">I'll explain and and we can use this to</font>

186
00:07:04,620 --> 00:07:09,240
determine what is<font color="#CCCCCC"> it isn't safe so we</font>

187
00:07:06,990 --> 00:07:11,610
<font color="#E5E5E5">already have an abstract state graph and</font>

188
00:07:09,240 --> 00:07:13,320
we<font color="#E5E5E5"> can project this graph to create a</font>

189
00:07:11,610 --> 00:07:15,060
control flow graph of course when we're

190
00:07:13,320 --> 00:07:17,610
projecting we may have multiple states

191
00:07:15,060 --> 00:07:19,920
that are the same and so they'll merge

192
00:07:17,610 --> 00:07:21,810
together but we have this new graph and

193
00:07:19,920 --> 00:07:23,580
we look through and<font color="#E5E5E5"> we've got maybe one</font>

194
00:07:21,810 --> 00:07:26,400
<font color="#E5E5E5">Rao we've got another route we can loop</font>

195
00:07:23,580 --> 00:07:28,590
back and post dominance looks at all of

196
00:07:26,400 --> 00:07:30,960
<font color="#E5E5E5">them all of the routes from some node in</font>

197
00:07:28,590 --> 00:07:34,140
this case the top node to the<font color="#E5E5E5"> exit node</font>

198
00:07:30,960 --> 00:07:35,909
and every single<font color="#E5E5E5"> path coming from that</font>

199
00:07:34,140 --> 00:07:37,650
that top node that goes the exit node

200
00:07:35,910 --> 00:07:39,210
must go<font color="#CCCCCC"> through this one in the</font><font color="#E5E5E5"> middle</font>

201
00:07:37,650 --> 00:07:40,770
and that is the<font color="#E5E5E5"> first one</font><font color="#CCCCCC"> that has that</font>

202
00:07:39,210 --> 00:07:43,260
<font color="#E5E5E5">property so we call it the immediate</font>

203
00:07:40,770 --> 00:07:45,359
post Dominator and this is the point at

204
00:07:43,260 --> 00:07:47,099
which<font color="#CCCCCC"> we know our control flow must</font>

205
00:07:45,360 --> 00:07:48,720
always have converged at this point and

206
00:07:47,100 --> 00:07:51,930
so we know that it's safe to do

207
00:07:48,720 --> 00:07:55,050
assignments so back<font color="#E5E5E5"> to this example we</font>

208
00:07:51,930 --> 00:07:57,300
can<font color="#E5E5E5"> go from line 0 to 1 2 to 4 or we can</font>

209
00:07:55,050 --> 00:07:58,890
go from 90<font color="#E5E5E5"> to three to four and those</font>

210
00:07:57,300 --> 00:08:00,570
are<font color="#CCCCCC"> the only pass through this program</font>

211
00:07:58,890 --> 00:08:04,169
and so we know that will<font color="#E5E5E5"> always go from</font>

212
00:08:00,570 --> 00:08:06,810
<font color="#CCCCCC">0 to</font><font color="#E5E5E5"> 4 and so once we reach for we know</font>

213
00:08:04,170 --> 00:08:09,360
we're safe<font color="#E5E5E5"> and so what we do is we</font>

214
00:08:06,810 --> 00:08:11,070
ignore this taint value because we know

215
00:08:09,360 --> 00:08:13,500
we branched<font color="#E5E5E5"> at 0 and assigned at five</font>

216
00:08:11,070 --> 00:08:17,250
and five is<font color="#CCCCCC"> past that immediate post</font>

217
00:08:13,500 --> 00:08:19,320
Dominator<font color="#CCCCCC"> okay now you have to abstract</font>

218
00:08:17,250 --> 00:08:22,830
it we already<font color="#E5E5E5"> know how to abstract the</font>

219
00:08:19,320 --> 00:08:25,170
CES and<font color="#CCCCCC"> K the taint taint store is very</font>

220
00:08:22,830 --> 00:08:27,599
easy to abstract because<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> just going</font>

221
00:08:25,170 --> 00:08:29,400
to<font color="#E5E5E5"> have abstract ain't abstract</font>

222
00:08:27,600 --> 00:08:30,810
addresses and abstract ain't values and

223
00:08:29,400 --> 00:08:33,329
in the case of bullion's<font color="#CCCCCC"> they're only</font>

224
00:08:30,810 --> 00:08:34,979
two and two is finite<font color="#CCCCCC"> so we don't even</font>

225
00:08:33,330 --> 00:08:37,800
have to do anything with with this

226
00:08:34,979 --> 00:08:39,240
trivial a taint value system and the

227
00:08:37,799 --> 00:08:40,919
branches because they're<font color="#E5E5E5"> just a set of</font>

228
00:08:39,240 --> 00:08:42,720
code points and code points are finite

229
00:08:40,919 --> 00:08:47,270
because the size of the program is<font color="#E5E5E5"> one</font>

230
00:08:42,720 --> 00:08:49,470
of the parameters to our analysis we

231
00:08:47,270 --> 00:08:52,140
don't actually have<font color="#CCCCCC"> to abstract</font><font color="#E5E5E5"> that at</font>

232
00:08:49,470 --> 00:08:53,940
all and so okay we have<font color="#E5E5E5"> an analysis and</font>

233
00:08:52,140 --> 00:08:54,840
now we come back to the<font color="#E5E5E5"> question of does</font>

234
00:08:53,940 --> 00:08:57,210
it work

235
00:08:54,840 --> 00:08:59,070
and the answer is almost<font color="#E5E5E5"> and since this</font>

236
00:08:57,210 --> 00:09:01,020
workshop and<font color="#E5E5E5"> under the symposium</font>

237
00:08:59,070 --> 00:09:03,450
generally are about breaking stuff<font color="#CCCCCC"> I'll</font>

238
00:09:01,020 --> 00:09:05,910
<font color="#E5E5E5">show you exactly how we do it so this is</font>

239
00:09:03,450 --> 00:09:07,470
a java program again and and all of

240
00:09:05,910 --> 00:09:09,660
these techniques applied a job or double

241
00:09:07,470 --> 00:09:12,360
byte code or what have you so we have

242
00:09:09,660 --> 00:09:14,130
some private secret value and this is

243
00:09:12,360 --> 00:09:17,100
what we're going to try to exfiltrate so

244
00:09:14,130 --> 00:09:19,470
we design a function where we call it

245
00:09:17,100 --> 00:09:21,750
with frame 0 and this refers to how<font color="#E5E5E5"> far</font>

246
00:09:19,470 --> 00:09:23,910
how deep we are in the stack so we call

247
00:09:21,750 --> 00:09:25,380
it<font color="#E5E5E5"> with frame equal to 0</font><font color="#CCCCCC"> and then</font>

248
00:09:23,910 --> 00:09:27,689
immediately<font color="#E5E5E5"> recur with frame equal to 1</font>

249
00:09:25,380 --> 00:09:29,790
so<font color="#E5E5E5"> now and we ran imagine we're doing</font>

250
00:09:27,690 --> 00:09:31,650
this on two separate executions one

251
00:09:29,790 --> 00:09:34,589
where secret is true and one more secret

252
00:09:31,650 --> 00:09:36,750
is false so<font color="#CCCCCC"> again we've got our base</font>

253
00:09:34,590 --> 00:09:40,230
frame is<font color="#E5E5E5"> 0 and then our current stack</font>

254
00:09:36,750 --> 00:09:41,340
frame frame is one if secret is true

255
00:09:40,230 --> 00:09:43,380
then we're going to immediately<font color="#E5E5E5"> return</font>

256
00:09:41,340 --> 00:09:45,240
and if it's not we're going<font color="#E5E5E5"> to continue</font>

257
00:09:43,380 --> 00:09:47,310
on now<font color="#CCCCCC"> you'll</font><font color="#E5E5E5"> notice in both of these</font>

258
00:09:45,240 --> 00:09:50,220
executions we're going to be after this

259
00:09:47,310 --> 00:09:52,469
if else block so we're at<font color="#E5E5E5"> the same point</font>

260
00:09:50,220 --> 00:09:54,960
<font color="#E5E5E5">in the control flow graph but we're at</font>

261
00:09:52,470 --> 00:09:57,360
different stack<font color="#E5E5E5"> heights and so frame is</font>

262
00:09:54,960 --> 00:09:59,190
<font color="#E5E5E5">0 in one case and one in the other so we</font>

263
00:09:57,360 --> 00:10:00,780
exploit this we print not if frame as

264
00:09:59,190 --> 00:10:03,150
one and<font color="#E5E5E5"> then we print true in both cases</font>

265
00:10:00,780 --> 00:10:05,220
and we've printed not true when secret

266
00:10:03,150 --> 00:10:07,770
is false and true when secret is true

267
00:10:05,220 --> 00:10:09,600
and we've done it in a way that all<font color="#CCCCCC"> of</font>

268
00:10:07,770 --> 00:10:12,840
this machinery we've just design doesn't

269
00:10:09,600 --> 00:10:16,920
doesn't catch so we need to come<font color="#CCCCCC"> up with</font>

270
00:10:12,840 --> 00:10:19,260
something<font color="#E5E5E5"> else the problem is</font><font color="#CCCCCC"> that we</font>

271
00:10:16,920 --> 00:10:20,640
projected to a graph when we projected

272
00:10:19,260 --> 00:10:22,080
to the control flow graph we didn't

273
00:10:20,640 --> 00:10:24,030
capture all of the information about

274
00:10:22,080 --> 00:10:25,980
where we are in<font color="#E5E5E5"> the program so we need</font>

275
00:10:24,030 --> 00:10:27,360
to do a projection and we need<font color="#E5E5E5"> to</font>

276
00:10:25,980 --> 00:10:29,190
project to something<font color="#E5E5E5"> that's a little bit</font>

277
00:10:27,360 --> 00:10:31,800
richer but we want to<font color="#E5E5E5"> make</font><font color="#CCCCCC"> sure we</font>

278
00:10:29,190 --> 00:10:34,890
project to something that is just rich

279
00:10:31,800 --> 00:10:36,959
enough let me let me illustrate so if<font color="#CCCCCC"> we</font>

280
00:10:34,890 --> 00:10:39,600
merge these two nodes at the beginning

281
00:10:36,960 --> 00:10:41,700
together we have an earlier post

282
00:10:39,600 --> 00:10:43,860
Dominator and that earlier post

283
00:10:41,700 --> 00:10:45,840
Dominator means will propagate fewer

284
00:10:43,860 --> 00:10:49,710
taints and so will have less over

285
00:10:45,840 --> 00:10:51,810
tainting so we need to capture something

286
00:10:49,710 --> 00:10:55,860
that has both code points and

287
00:10:51,810 --> 00:10:57,930
continuations and it turns out that the

288
00:10:55,860 --> 00:11:00,630
proof all we ended up needing was the

289
00:10:57,930 --> 00:11:02,069
stack height so and that's easy to

290
00:11:00,630 --> 00:11:05,760
calculate from the continuation stack

291
00:11:02,070 --> 00:11:08,220
but we're projecting from abstract

292
00:11:05,760 --> 00:11:08,800
continuations and so we can't always

293
00:11:08,220 --> 00:11:10,839
calculate

294
00:11:08,800 --> 00:11:12,519
precise stack height so we needed some

295
00:11:10,839 --> 00:11:15,220
sort of abstraction and this turns out

296
00:11:12,519 --> 00:11:16,839
it's easy to do all<font color="#E5E5E5"> we need is</font><font color="#CCCCCC"> the</font>

297
00:11:15,220 --> 00:11:19,240
actual stack height if we can calculate

298
00:11:16,839 --> 00:11:21,040
it<font color="#E5E5E5"> and if</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> a wild card and then</font>

299
00:11:19,240 --> 00:11:23,620
whenever a post<font color="#E5E5E5"> Dominator is at one of</font>

300
00:11:21,040 --> 00:11:25,360
these wild card nodes in our execution

301
00:11:23,620 --> 00:11:29,440
point graph because control flow graph

302
00:11:25,360 --> 00:11:31,240
was taken we just say<font color="#E5E5E5"> okay we'll keep on</font>

303
00:11:29,440 --> 00:11:33,370
going<font color="#E5E5E5"> and we find another post Dominator</font>

304
00:11:31,240 --> 00:11:34,600
so it's the net whatever immediate post

305
00:11:33,370 --> 00:11:38,079
Dominator that doesn't represent

306
00:11:34,600 --> 00:11:39,970
potentially infinite notes<font color="#E5E5E5"> okay so prove</font>

307
00:11:38,079 --> 00:11:41,050
it how does<font color="#E5E5E5"> the proof work well the</font>

308
00:11:39,970 --> 00:11:42,970
proof works in the same<font color="#CCCCCC"> way that</font>

309
00:11:41,050 --> 00:11:44,769
non-interference works we're going<font color="#E5E5E5"> to</font>

310
00:11:42,970 --> 00:11:46,600
<font color="#CCCCCC">start by some program trace we go</font>

311
00:11:44,769 --> 00:11:49,180
someplace and we branch and now we're

312
00:11:46,600 --> 00:11:50,519
going to envision this as two separate

313
00:11:49,180 --> 00:11:53,050
executions again with different

314
00:11:50,519 --> 00:11:54,970
sensitive values but because we've

315
00:11:53,050 --> 00:11:57,910
branched we're not no longer in lockstep

316
00:11:54,970 --> 00:11:59,800
and what we can't<font color="#E5E5E5"> just do a trivial</font>

317
00:11:57,910 --> 00:12:01,810
proof of<font color="#E5E5E5"> leon by simulation or something</font>

318
00:11:59,800 --> 00:12:04,029
like that we've gone<font color="#E5E5E5"> to different places</font>

319
00:12:01,810 --> 00:12:05,709
and<font color="#E5E5E5"> we don't know where but</font><font color="#CCCCCC"> in many</font>

320
00:12:04,029 --> 00:12:08,079
cases we're going to branch and then

321
00:12:05,709 --> 00:12:09,609
come right back together<font color="#CCCCCC"> and so what we</font>

322
00:12:08,079 --> 00:12:12,250
need<font color="#E5E5E5"> to do is we have</font><font color="#CCCCCC"> to have a weakened</font>

323
00:12:09,610 --> 00:12:14,890
invariant that allows<font color="#CCCCCC"> us to say at every</font>

324
00:12:12,250 --> 00:12:17,050
state in the program either we have a

325
00:12:14,890 --> 00:12:19,689
context taint and we know about<font color="#E5E5E5"> it</font><font color="#CCCCCC"> so we</font>

326
00:12:17,050 --> 00:12:21,910
can mark things as unsafe or we're

327
00:12:19,690 --> 00:12:25,529
actually in these two executions we must

328
00:12:21,910 --> 00:12:28,240
be in<font color="#CCCCCC"> the same place</font><font color="#E5E5E5"> and therefore</font>

329
00:12:25,529 --> 00:12:29,560
because we must be in<font color="#E5E5E5"> the same</font><font color="#CCCCCC"> place we</font>

330
00:12:28,240 --> 00:12:31,420
know we're safe we also know that we've

331
00:12:29,560 --> 00:12:34,899
marked everything in memory that is

332
00:12:31,420 --> 00:12:39,219
unsafe and so<font color="#E5E5E5"> really we just have</font><font color="#CCCCCC"> this</font>

333
00:12:34,899 --> 00:12:42,120
one similar or so to speak we have one

334
00:12:39,220 --> 00:12:45,250
trace so what do the results<font color="#E5E5E5"> look like</font>

335
00:12:42,120 --> 00:12:47,470
well we implemented this and for 12 of

336
00:12:45,250 --> 00:12:49,360
our test bench programs every one<font color="#CCCCCC"> of</font>

337
00:12:47,470 --> 00:12:54,520
them timed out after a full day of

338
00:12:49,360 --> 00:12:56,170
analysis on our server<font color="#E5E5E5"> okay so took a</font>

339
00:12:54,520 --> 00:12:59,079
look at the complexity the complexity of

340
00:12:56,170 --> 00:13:00,579
this analysis is related it's a state

341
00:12:59,079 --> 00:13:03,550
complexity problem is related to the

342
00:13:00,579 --> 00:13:05,170
size of the<font color="#E5E5E5"> state space which is the</font>

343
00:13:03,550 --> 00:13:08,349
size of each of the sets of the

344
00:13:05,170 --> 00:13:11,339
components<font color="#E5E5E5"> okay so we've added on to</font>

345
00:13:08,350 --> 00:13:13,630
additional components to our state<font color="#E5E5E5"> and</font>

346
00:13:11,339 --> 00:13:15,670
the taint store is pretty

347
00:13:13,630 --> 00:13:17,680
straightforward just<font color="#CCCCCC"> maps app drawer</font>

348
00:13:15,670 --> 00:13:19,599
abstract addresses we already have those

349
00:13:17,680 --> 00:13:21,729
and we're updating the<font color="#CCCCCC"> Tate store in</font>

350
00:13:19,600 --> 00:13:22,930
parallel with the real store so this is

351
00:13:21,730 --> 00:13:28,080
unlikely to be the cult

352
00:13:22,930 --> 00:13:30,010
here however since the branch set is

353
00:13:28,080 --> 00:13:31,720
exponential in<font color="#CCCCCC"> the size of code points</font>

354
00:13:30,010 --> 00:13:34,450
because it's a set of code points this

355
00:13:31,720 --> 00:13:36,490
seems like a likely culprit so we

356
00:13:34,450 --> 00:13:38,950
<font color="#E5E5E5">thought about it and thought well what</font>

357
00:13:36,490 --> 00:13:41,380
can<font color="#E5E5E5"> we do to improve it we decided to</font>

358
00:13:38,950 --> 00:13:42,820
remove all of this extra machinery and

359
00:13:41,380 --> 00:13:45,880
just do an ordinary abstract

360
00:13:42,820 --> 00:13:49,600
interpretation and then add it back in

361
00:13:45,880 --> 00:13:50,950
and use our completed state graph and go

362
00:13:49,600 --> 00:13:54,850
<font color="#E5E5E5">over that and then to our taint flow</font>

363
00:13:50,950 --> 00:13:58,029
analysis now duarte flow analysis there

364
00:13:54,850 --> 00:14:00,730
we go so what<font color="#E5E5E5"> is the complexity</font><font color="#CCCCCC"> it's</font>

365
00:13:58,029 --> 00:14:02,770
unchanged but it's a little bit<font color="#CCCCCC"> better</font>

366
00:14:00,730 --> 00:14:06,910
in a few<font color="#CCCCCC"> ways one is that when we're</font>

367
00:14:02,770 --> 00:14:08,589
creating our execution point graph we're

368
00:14:06,910 --> 00:14:10,240
doing it from a much smaller state space

369
00:14:08,589 --> 00:14:13,570
because we're projecting from a SI es

370
00:14:10,240 --> 00:14:16,899
que state space and not a CES<font color="#CCCCCC"> KTB state</font>

371
00:14:13,570 --> 00:14:18,670
space there's also there are also other

372
00:14:16,899 --> 00:14:21,490
potential improvements we're not

373
00:14:18,670 --> 00:14:24,010
propagating spurious implicit taints and

374
00:14:21,490 --> 00:14:25,240
then removing them and that those those

375
00:14:24,010 --> 00:14:27,430
spurious taints could actually

376
00:14:25,240 --> 00:14:29,050
contribute to additional interpretation

377
00:14:27,430 --> 00:14:33,550
work which we don't<font color="#E5E5E5"> have to do because</font>

378
00:14:29,050 --> 00:14:35,709
of<font color="#E5E5E5"> this and it actually we have</font>

379
00:14:33,550 --> 00:14:37,569
intermediate results available that we

380
00:14:35,709 --> 00:14:39,339
can<font color="#E5E5E5"> work on we can start looking at and</font>

381
00:14:37,570 --> 00:14:41,620
it allows<font color="#CCCCCC"> us to</font><font color="#E5E5E5"> kind of kind of separate</font>

382
00:14:39,339 --> 00:14:44,200
things and this line of thought also<font color="#CCCCCC"> led</font>

383
00:14:41,620 --> 00:14:46,000
us to some exciting future work that is

384
00:14:44,200 --> 00:14:47,740
if we want<font color="#E5E5E5"> to apply this to a different</font>

385
00:14:46,000 --> 00:14:50,380
language at present what we have<font color="#E5E5E5"> to do</font>

386
00:14:47,740 --> 00:14:54,430
<font color="#CCCCCC">is develop an entirely new CES ktv</font>

387
00:14:50,380 --> 00:14:56,200
machine and prove<font color="#CCCCCC"> that it's correct but</font>

388
00:14:54,430 --> 00:14:58,060
if we're separating the abstract

389
00:14:56,200 --> 00:15:00,880
interpretation phase from the tape

390
00:14:58,060 --> 00:15:02,770
floats the phase we potentially will be

391
00:15:00,880 --> 00:15:04,630
able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> write simply a new abstract</font>

392
00:15:02,770 --> 00:15:06,430
interpreter for the<font color="#CCCCCC"> language which we</font>

393
00:15:04,630 --> 00:15:08,079
would need<font color="#E5E5E5"> to do anyway and then use the</font>

394
00:15:06,430 --> 00:15:10,089
results<font color="#E5E5E5"> from this interpreter feed it</font>

395
00:15:08,079 --> 00:15:11,589
<font color="#E5E5E5">into the same taint flow mechanism and</font>

396
00:15:10,089 --> 00:15:14,410
get a proof without additional

397
00:15:11,589 --> 00:15:16,480
theoretical work and I<font color="#E5E5E5"> believe that this</font>

398
00:15:14,410 --> 00:15:18,250
is possible to do even on languages that

399
00:15:16,480 --> 00:15:21,579
include things like call cc<font color="#E5E5E5"> or like</font>

400
00:15:18,250 --> 00:15:23,079
crazy expressive languages if you can

401
00:15:21,579 --> 00:15:24,640
write<font color="#E5E5E5"> an abstract interpreter I believe</font>

402
00:15:23,079 --> 00:15:27,880
it's possible to get<font color="#E5E5E5"> this proof for free</font>

403
00:15:24,640 --> 00:15:29,529
which is great so with<font color="#E5E5E5"> this updated</font>

404
00:15:27,880 --> 00:15:33,100
thing what do the<font color="#E5E5E5"> results look like in</font>

405
00:15:29,529 --> 00:15:35,560
our new version well they're better for

406
00:15:33,100 --> 00:15:36,610
the 12 applications five of them give us

407
00:15:35,560 --> 00:15:39,010
<font color="#CCCCCC">results</font>

408
00:15:36,610 --> 00:15:42,160
that are correct results right no no

409
00:15:39,010 --> 00:15:44,319
false negatives and in some cases

410
00:15:42,160 --> 00:15:47,649
reasonable false positive percentages

411
00:15:44,320 --> 00:15:49,120
within a day and we're still working to

412
00:15:47,649 --> 00:15:50,950
improve this<font color="#E5E5E5"> so this is this is still a</font>

413
00:15:49,120 --> 00:15:54,399
work in progress<font color="#E5E5E5"> but it is a work that</font>

414
00:15:50,950 --> 00:15:56,730
has progressed thank you<font color="#E5E5E5"> I'm ready</font><font color="#CCCCCC"> for</font>

415
00:15:54,399 --> 00:15:56,730
questions

