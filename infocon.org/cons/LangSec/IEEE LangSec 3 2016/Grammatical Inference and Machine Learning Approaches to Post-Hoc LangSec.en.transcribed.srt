1
00:00:00,000 --> 00:00:05,670
kind of after the fact approaches to

2
00:00:03,210 --> 00:00:07,470
<font color="#CCCCCC">Lang SEC using machine learning with a</font>

3
00:00:05,670 --> 00:00:10,800
somewhat of a grounding grammatical

4
00:00:07,470 --> 00:00:13,920
inference so just a quick outline I'm

5
00:00:10,800 --> 00:00:16,410
<font color="#E5E5E5">going to walk</font><font color="#CCCCCC"> through the theory of kind</font>

6
00:00:13,920 --> 00:00:18,810
of why we need<font color="#E5E5E5"> to do what we have</font>

7
00:00:16,410 --> 00:00:22,109
tempted starting with grammatical

8
00:00:18,810 --> 00:00:25,439
inference tying it into<font color="#CCCCCC"> lang</font><font color="#E5E5E5"> SEC will</font>

9
00:00:22,109 --> 00:00:26,970
cover the paper the general idea is to

10
00:00:25,439 --> 00:00:28,670
use<font color="#E5E5E5"> machine learning to bypass the</font>

11
00:00:26,970 --> 00:00:32,189
hardness<font color="#E5E5E5"> results that will discuss</font>

12
00:00:28,670 --> 00:00:35,190
discuss the experiment results in kind

13
00:00:32,189 --> 00:00:38,640
of our upcoming future work and close it

14
00:00:35,190 --> 00:00:40,170
out so to<font color="#E5E5E5"> start from kind of first</font>

15
00:00:38,640 --> 00:00:43,020
principles and grammatical inference we

16
00:00:40,170 --> 00:00:45,270
can think<font color="#E5E5E5"> of grammars as a tuple where</font>

17
00:00:43,020 --> 00:00:47,340
we consider<font color="#CCCCCC"> a set of non terminal</font>

18
00:00:45,270 --> 00:00:50,390
characters a set of terminal characters

19
00:00:47,340 --> 00:00:52,649
which is disjoint from the non terminals

20
00:00:50,390 --> 00:00:54,620
the terminal characters can be thought

21
00:00:52,649 --> 00:00:56,760
of as the alphabet that's if you see a

22
00:00:54,620 --> 00:00:58,858
actual word the terminal characters of

23
00:00:56,760 --> 00:01:00,780
what you're<font color="#CCCCCC"> looking at set of production</font>

24
00:00:58,859 --> 00:01:04,559
rules it gets us from the non terminals

25
00:01:00,780 --> 00:01:07,799
to the clean star set of terminals and

26
00:01:04,559 --> 00:01:09,509
on and a set<font color="#CCCCCC"> of starting characters</font>

27
00:01:07,799 --> 00:01:12,000
which will be a subset<font color="#E5E5E5"> of the non</font>

28
00:01:09,510 --> 00:01:14,700
terminals in general grammars will

29
00:01:12,000 --> 00:01:16,259
generate language which here we're just

30
00:01:14,700 --> 00:01:18,450
<font color="#CCCCCC">going</font><font color="#E5E5E5"> to use</font><font color="#CCCCCC"> that is the set of all</font>

31
00:01:16,259 --> 00:01:21,360
words that are in all possible

32
00:01:18,450 --> 00:01:24,330
enumerations of the alphabet such that

33
00:01:21,360 --> 00:01:25,950
you can reach those words by the using

34
00:01:24,330 --> 00:01:30,900
the production rules and starting at one

35
00:01:25,950 --> 00:01:33,000
of the starting characters so when we

36
00:01:30,900 --> 00:01:35,610
find these languages it can tie into the

37
00:01:33,000 --> 00:01:39,030
idea of<font color="#CCCCCC"> the Chomsky hierarchy and this</font>

38
00:01:35,610 --> 00:01:41,159
<font color="#E5E5E5">gets into the complexity and the four</font>

39
00:01:39,030 --> 00:01:43,560
levels of complexity the two that were

40
00:01:41,159 --> 00:01:45,210
most interested in both from a<font color="#CCCCCC"> Lang SEC</font>

41
00:01:43,560 --> 00:01:47,909
standpoint but also just<font color="#E5E5E5"> in general are</font>

42
00:01:45,210 --> 00:01:50,220
going to be regular in context free

43
00:01:47,909 --> 00:01:51,630
where<font color="#E5E5E5"> context free we can consider</font>

44
00:01:50,220 --> 00:01:56,329
either deterministic or non

45
00:01:51,630 --> 00:01:58,320
deterministic grammars within it so

46
00:01:56,329 --> 00:02:01,100
basically we're going to deal<font color="#CCCCCC"> with these</font>

47
00:01:58,320 --> 00:02:03,210
two and we're interested in pursuing

48
00:02:01,100 --> 00:02:07,500
context-free just because that's<font color="#E5E5E5"> what we</font>

49
00:02:03,210 --> 00:02:09,179
often<font color="#E5E5E5"> see the key questions that we're</font>

50
00:02:07,500 --> 00:02:13,050
going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> take away from the</font><font color="#E5E5E5"> ground go in</font>

51
00:02:09,179 --> 00:02:13,980
front side is given for given a

52
00:02:13,050 --> 00:02:15,180
particular

53
00:02:13,980 --> 00:02:18,149
grammar can we determine what<font color="#E5E5E5"> it's</font>

54
00:02:15,180 --> 00:02:21,000
produced languages in its entirety if we

55
00:02:18,150 --> 00:02:22,200
have two grammars or two languages can

56
00:02:21,000 --> 00:02:25,920
we determine if they're equivalent in

57
00:02:22,200 --> 00:02:28,170
some way and if we're given samples of a

58
00:02:25,920 --> 00:02:31,859
language so positive string examples can

59
00:02:28,170 --> 00:02:34,260
we learn a grammar from that and as it

60
00:02:31,860 --> 00:02:35,700
turns out in the realm of theoretical

61
00:02:34,260 --> 00:02:39,298
grammatical inference<font color="#CCCCCC"> the answer is</font>

62
00:02:35,700 --> 00:02:40,859
mostly no unless you're if you're

63
00:02:39,299 --> 00:02:43,560
anywhere above regular you basically

64
00:02:40,860 --> 00:02:44,909
cannot create a general learner and even

65
00:02:43,560 --> 00:02:46,230
in the case of regular you need

66
00:02:44,909 --> 00:02:49,260
something<font color="#E5E5E5"> like a complete expression</font>

67
00:02:46,230 --> 00:02:51,179
which means<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you have both a list of</font>

68
00:02:49,260 --> 00:02:52,440
words that are in the language and<font color="#CCCCCC"> also</font>

69
00:02:51,180 --> 00:02:55,590
list<font color="#E5E5E5"> of words that are not in the</font>

70
00:02:52,440 --> 00:02:58,019
language even<font color="#CCCCCC"> if we relax too simple</font>

71
00:02:55,590 --> 00:02:59,640
probabilistic identification such as

72
00:02:58,019 --> 00:03:03,569
valiance idea of probably approximately

73
00:02:59,640 --> 00:03:05,940
correct still learning is generally

74
00:03:03,569 --> 00:03:09,690
considered extremely difficult if not NP

75
00:03:05,940 --> 00:03:11,040
<font color="#CCCCCC">hard R and</font><font color="#E5E5E5"> P complete entirely there's a</font>

76
00:03:09,690 --> 00:03:15,239
few examples<font color="#CCCCCC"> of languages that are</font>

77
00:03:11,040 --> 00:03:18,599
learnable but they're kind of very

78
00:03:15,239 --> 00:03:19,919
specifically created to be such I'm

79
00:03:18,599 --> 00:03:21,780
going<font color="#E5E5E5"> to briefly talk about two of them</font>

80
00:03:19,919 --> 00:03:25,669
particularly<font color="#CCCCCC"> Anglin pattern languages</font>

81
00:03:21,780 --> 00:03:27,450
and<font color="#CCCCCC"> clark's non terminal e separated</font>

82
00:03:25,669 --> 00:03:29,160
this is these<font color="#CCCCCC"> are just kind</font><font color="#E5E5E5"> of like</font>

83
00:03:27,450 --> 00:03:32,160
examples to paint a picture of what

84
00:03:29,160 --> 00:03:34,859
we're<font color="#E5E5E5"> trying to deal with so from a</font>

85
00:03:32,160 --> 00:03:37,139
pattern language example that top parts

86
00:03:34,859 --> 00:03:38,370
the definition gets its heavily into

87
00:03:37,139 --> 00:03:40,769
math so if you don't<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to read it</font>

88
00:03:38,370 --> 00:03:42,630
<font color="#E5E5E5">don't worry too much about it basically</font>

89
00:03:40,769 --> 00:03:45,900
an example of it is if we're given a

90
00:03:42,630 --> 00:03:48,989
simple alphabet say 0 n1 so a binary we

91
00:03:45,900 --> 00:03:51,720
can construct a pattern here x1 x2 x3 or

92
00:03:48,989 --> 00:03:53,549
variable stand-ins for the<font color="#CCCCCC"> alphabet then</font>

93
00:03:51,720 --> 00:03:54,989
we can<font color="#E5E5E5"> consider a set of words where</font>

94
00:03:53,549 --> 00:03:57,569
we've made substitutions for those

95
00:03:54,989 --> 00:03:59,459
variables and we can that<font color="#E5E5E5"> would be a</font>

96
00:03:57,569 --> 00:04:02,310
subset within the language<font color="#CCCCCC"> generated by</font>

97
00:03:59,459 --> 00:04:03,690
that pattern again the issue with this

98
00:04:02,310 --> 00:04:06,150
is that it's a very restrictive language

99
00:04:03,690 --> 00:04:07,919
it's pretty unlikely that you'll in

100
00:04:06,150 --> 00:04:10,319
practice come across something that<font color="#E5E5E5"> has</font>

101
00:04:07,919 --> 00:04:12,750
a nice pattern break down like that and

102
00:04:10,319 --> 00:04:14,608
<font color="#E5E5E5">even if you do determining equivalence</font>

103
00:04:12,750 --> 00:04:18,238
between these two languages is still

104
00:04:14,609 --> 00:04:19,739
np-hard so it<font color="#E5E5E5"> doesn't necessarily spare</font>

105
00:04:18,238 --> 00:04:22,380
you if you're trying<font color="#E5E5E5"> to identify which</font>

106
00:04:19,738 --> 00:04:24,179
language you're looking at from the NTS

107
00:04:22,380 --> 00:04:27,370
language so this is a context-free

108
00:04:24,180 --> 00:04:30,150
grammar example that is can

109
00:04:27,370 --> 00:04:32,740
actually shown to be exactly learnable

110
00:04:30,150 --> 00:04:35,409
there's an in-depth discussion of by

111
00:04:32,740 --> 00:04:38,290
Clark in paper he wrote when<font color="#CCCCCC"> he won the</font>

112
00:04:35,410 --> 00:04:40,870
omphalos competition for building

113
00:04:38,290 --> 00:04:42,520
grammars from positive strings an

114
00:04:40,870 --> 00:04:44,740
<font color="#E5E5E5">example of the grammar his algorithm</font>

115
00:04:42,520 --> 00:04:46,570
produces is on the bottom<font color="#E5E5E5"> right there</font>

116
00:04:44,740 --> 00:04:49,120
it's actually truncated it's about three

117
00:04:46,570 --> 00:04:51,310
times as<font color="#E5E5E5"> long as that in the strings</font>

118
00:04:49,120 --> 00:04:53,139
<font color="#E5E5E5">that were given were pretty short and</font>

119
00:04:51,310 --> 00:04:55,810
the characters that were present any

120
00:04:53,139 --> 00:04:57,370
given language were I<font color="#E5E5E5"> mean not</font><font color="#CCCCCC"> a full</font>

121
00:04:55,810 --> 00:05:00,510
<font color="#CCCCCC">alphabet so you're talking about 10 to</font>

122
00:04:57,370 --> 00:05:05,199
14 characters possible and despite that

123
00:05:00,510 --> 00:05:07,479
the grammar is enormously complicated so

124
00:05:05,199 --> 00:05:09,370
the<font color="#CCCCCC"> takeaway from this is that we can</font>

125
00:05:07,479 --> 00:05:13,690
get exact results for very particular

126
00:05:09,370 --> 00:05:15,600
subsets of grammars but in his example

127
00:05:13,690 --> 00:05:18,930
he's algorithm is quite slow

128
00:05:15,600 --> 00:05:21,250
impractically so and it may<font color="#E5E5E5"> not converge</font>

129
00:05:18,930 --> 00:05:23,979
reasonably which is to say<font color="#CCCCCC"> that it may</font>

130
00:05:21,250 --> 00:05:25,870
converge at some point theoretically but

131
00:05:23,979 --> 00:05:27,550
it could be after the heat death of the

132
00:05:25,870 --> 00:05:30,220
universe or<font color="#CCCCCC"> something like that</font><font color="#E5E5E5"> so we</font>

133
00:05:27,550 --> 00:05:32,620
simply can't wait around<font color="#E5E5E5"> for</font><font color="#CCCCCC"> that</font>

134
00:05:30,220 --> 00:05:35,430
algorithm even if it can indeed produce

135
00:05:32,620 --> 00:05:37,870
results so from a length<font color="#CCCCCC"> sex standpoint</font>

136
00:05:35,430 --> 00:05:39,940
what this means to<font color="#E5E5E5"> us is</font><font color="#CCCCCC"> that learning</font>

137
00:05:37,870 --> 00:05:41,770
<font color="#CCCCCC">grammars is hard so we cannot determine</font>

138
00:05:39,940 --> 00:05:44,229
if a parsers grammar is equivalent to

139
00:05:41,770 --> 00:05:46,120
another so if even if we know a grammar

140
00:05:44,229 --> 00:05:47,650
that<font color="#E5E5E5"> is say</font><font color="#CCCCCC"> compromised or even if we</font>

141
00:05:46,120 --> 00:05:49,150
know grammar that<font color="#E5E5E5"> is valid for all</font>

142
00:05:47,650 --> 00:05:50,669
possible we can't necessarily tell if

143
00:05:49,150 --> 00:05:53,080
the one we're looking<font color="#CCCCCC"> at is the same</font>

144
00:05:50,669 --> 00:05:55,180
it's generally<font color="#CCCCCC"> not possible to enumerate</font>

145
00:05:53,080 --> 00:05:57,039
all safe or bad strings for a parser

146
00:05:55,180 --> 00:06:01,240
especially if it's not of a finite

147
00:05:57,039 --> 00:06:04,570
language and it you cannot generically

148
00:06:01,240 --> 00:06:07,030
learn all parsers using a single method

149
00:06:04,570 --> 00:06:08,889
so even though<font color="#E5E5E5"> clarks and england's</font>

150
00:06:07,030 --> 00:06:12,159
examples of languages that are directly

151
00:06:08,889 --> 00:06:15,190
<font color="#E5E5E5">learnable</font><font color="#CCCCCC"> exist those same methods</font><font color="#E5E5E5"> don't</font>

152
00:06:12,160 --> 00:06:17,110
say learn any given regular grammar or

153
00:06:15,190 --> 00:06:21,130
any given<font color="#E5E5E5"> context free grammar they only</font>

154
00:06:17,110 --> 00:06:22,570
learn those very specific subsets but we

155
00:06:21,130 --> 00:06:24,789
<font color="#E5E5E5">still want to try to get with the idea</font>

156
00:06:22,570 --> 00:06:26,349
that parsers should be restricted<font color="#CCCCCC"> to</font><font color="#E5E5E5"> low</font>

157
00:06:24,789 --> 00:06:29,650
level Chomsky hierarchy in order to

158
00:06:26,349 --> 00:06:31,780
maintain security but that's kind of

159
00:06:29,650 --> 00:06:33,820
difficult when a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> people either</font>

160
00:06:31,780 --> 00:06:36,580
want it to continue using what's easiest

161
00:06:33,820 --> 00:06:39,340
or don't<font color="#E5E5E5"> want to try to rewrite what</font>

162
00:06:36,580 --> 00:06:40,919
they consider not broken so in order to

163
00:06:39,340 --> 00:06:43,268
<font color="#E5E5E5">get around that</font>

164
00:06:40,919 --> 00:06:46,929
we're<font color="#E5E5E5"> going to relax the idea of</font>

165
00:06:43,269 --> 00:06:48,249
exacting and use the fact that we know

166
00:06:46,929 --> 00:06:50,078
that<font color="#E5E5E5"> computers are discrete and</font>

167
00:06:48,249 --> 00:06:51,789
computational there must<font color="#E5E5E5"> be some</font>

168
00:06:50,079 --> 00:06:53,769
underlying structure<font color="#E5E5E5"> even if it's not</font>

169
00:06:51,789 --> 00:06:55,679
necessarily clear to us and even<font color="#E5E5E5"> if it's</font>

170
00:06:53,769 --> 00:06:58,209
not necessarily a secure structure and

171
00:06:55,679 --> 00:07:00,219
rather than exactly trying to learn that

172
00:06:58,209 --> 00:07:01,839
grammar we're<font color="#E5E5E5"> going to try to do say</font>

173
00:07:00,219 --> 00:07:04,869
close recognition we're going to<font color="#E5E5E5"> relax</font>

174
00:07:01,839 --> 00:07:08,259
our assumptions heavily and just try to

175
00:07:04,869 --> 00:07:10,119
be good<font color="#E5E5E5"> enough so that we can kind</font><font color="#CCCCCC"> of</font>

176
00:07:08,259 --> 00:07:13,479
apply at least some level security even

177
00:07:10,119 --> 00:07:15,909
a situation where the people<font color="#E5E5E5"> who are</font>

178
00:07:13,479 --> 00:07:18,909
working with your<font color="#E5E5E5"> parser aren't willing</font>

179
00:07:15,909 --> 00:07:20,399
<font color="#E5E5E5">to change to more secure systems to do</font>

180
00:07:18,909 --> 00:07:22,029
this we're<font color="#E5E5E5"> going to use machine learning</font>

181
00:07:20,399 --> 00:07:24,579
basically going to build and train

182
00:07:22,029 --> 00:07:26,199
feature vectors from language examples

183
00:07:24,579 --> 00:07:28,659
this will be from positive<font color="#E5E5E5"> example and</font>

184
00:07:26,199 --> 00:07:30,129
the key differences between exact and

185
00:07:28,659 --> 00:07:32,769
machine learning is basically you can

186
00:07:30,129 --> 00:07:35,110
think<font color="#E5E5E5"> of exact learning the language is</font>

187
00:07:32,769 --> 00:07:37,179
building sentences from parts using

188
00:07:35,110 --> 00:07:39,459
rules if we consider in context of

189
00:07:37,179 --> 00:07:40,899
natural language whereas with machine

190
00:07:39,459 --> 00:07:43,449
learning we're not going to necessarily

191
00:07:40,899 --> 00:07:45,429
be able to construct the<font color="#E5E5E5"> rule set itself</font>

192
00:07:43,449 --> 00:07:47,769
but<font color="#E5E5E5"> we are going to be able to recognize</font>

193
00:07:45,429 --> 00:07:49,808
whether or not a<font color="#CCCCCC"> language is actually</font>

194
00:07:47,769 --> 00:07:52,029
present there and we're going<font color="#E5E5E5"> to do it</font>

195
00:07:49,809 --> 00:07:53,499
only<font color="#CCCCCC"> by knowing what the letters are</font>

196
00:07:52,029 --> 00:07:55,989
that go into<font color="#E5E5E5"> it so we're not going to</font>

197
00:07:53,499 --> 00:07:59,079
<font color="#E5E5E5">need</font><font color="#CCCCCC"> to know any other specifics besides</font>

198
00:07:55,989 --> 00:08:00,998
seeing the letters in<font color="#CCCCCC"> suppose of</font>

199
00:07:59,079 --> 00:08:03,759
examples the network we use is a

200
00:08:00,999 --> 00:08:06,849
multi-layered lstm it's a long short

201
00:08:03,759 --> 00:08:09,550
term memory let's buy a paper from hot

202
00:08:06,849 --> 00:08:10,949
schreiter instrument<font color="#CCCCCC"> kuber so you can</font>

203
00:08:09,550 --> 00:08:13,929
take a look<font color="#E5E5E5"> at that if you're interested</font>

204
00:08:10,949 --> 00:08:16,839
basically<font color="#CCCCCC"> our input is a one hot feature</font>

205
00:08:13,929 --> 00:08:18,188
vector input it has a one hot<font color="#E5E5E5"> encoding</font>

206
00:08:16,839 --> 00:08:20,319
for the various characters that can

207
00:08:18,189 --> 00:08:23,019
appear in<font color="#E5E5E5"> the alphabet on our case it</font>

208
00:08:20,319 --> 00:08:24,189
was 102 just because of<font color="#CCCCCC"> what the</font>

209
00:08:23,019 --> 00:08:26,679
training<font color="#E5E5E5"> set is which we'll get into</font>

210
00:08:24,189 --> 00:08:28,360
that goes into an embedding layer which

211
00:08:26,679 --> 00:08:30,099
kind<font color="#E5E5E5"> of abstracts the feature vector</font>

212
00:08:28,360 --> 00:08:31,989
into some kind of weight matrix and<font color="#E5E5E5"> then</font>

213
00:08:30,099 --> 00:08:34,088
goes through series<font color="#CCCCCC"> of L cm's</font><font color="#E5E5E5"> which</font>

214
00:08:31,989 --> 00:08:35,978
we'll discuss in a moment before finally

215
00:08:34,089 --> 00:08:38,919
coming to some normalized output vector

216
00:08:35,979 --> 00:08:40,659
usually that could be either another one

217
00:08:38,919 --> 00:08:45,579
hot feature vector or it could be a

218
00:08:40,659 --> 00:08:47,889
classification label so for lstm just a

219
00:08:45,579 --> 00:08:49,508
real<font color="#CCCCCC"> quick real short summary of it</font>

220
00:08:47,889 --> 00:08:52,809
that's kind of a<font color="#E5E5E5"> picture there have been</font>

221
00:08:49,509 --> 00:08:54,550
unwrapped lstm the idea it's a type of

222
00:08:52,809 --> 00:08:56,589
recurrent neural network it's

223
00:08:54,550 --> 00:08:58,149
forward so you give it an input it'll

224
00:08:56,589 --> 00:08:59,589
feed forward into a series of weight

225
00:08:58,149 --> 00:09:02,019
matrices which will then eventually

226
00:08:59,589 --> 00:09:04,120
produce some output it also

227
00:09:02,019 --> 00:09:06,010
simultaneously feeds back into the same

228
00:09:04,120 --> 00:09:07,990
layer you<font color="#CCCCCC"> can think of</font><font color="#E5E5E5"> this as having</font>

229
00:09:06,010 --> 00:09:10,060
some kind of idea of a stateful memory

230
00:09:07,990 --> 00:09:12,490
between each of the iterations in the

231
00:09:10,060 --> 00:09:14,349
learning period and<font color="#CCCCCC"> elysée on in</font>

232
00:09:12,490 --> 00:09:17,079
particular has this idea of the stateful

233
00:09:14,350 --> 00:09:18,760
memory that is maintained and edited

234
00:09:17,079 --> 00:09:19,989
kind of sparingly so edit limited

235
00:09:18,760 --> 00:09:22,870
doesn't mean that it's<font color="#E5E5E5"> not allowed to</font><font color="#CCCCCC"> be</font>

236
00:09:19,990 --> 00:09:24,310
edited<font color="#E5E5E5"> it's just kind of there's some</font>

237
00:09:22,870 --> 00:09:25,540
restriction to how much<font color="#E5E5E5"> it can the</font>

238
00:09:24,310 --> 00:09:27,760
weights can be edited at any given

239
00:09:25,540 --> 00:09:29,260
moment the nice thing that I'll see<font color="#CCCCCC"> em</font>

240
00:09:27,760 --> 00:09:30,819
is<font color="#CCCCCC"> that they</font><font color="#E5E5E5"> are able to</font><font color="#CCCCCC"> learn over what</font>

241
00:09:29,260 --> 00:09:32,800
it called long distances so if we're

242
00:09:30,820 --> 00:09:33,940
discussing something like trying to

243
00:09:32,800 --> 00:09:35,649
<font color="#E5E5E5">learn a language that's what we're</font>

244
00:09:33,940 --> 00:09:37,269
interested in because we'd like to have

245
00:09:35,649 --> 00:09:41,110
some<font color="#E5E5E5"> kind of dependency be cross the</font>

246
00:09:37,269 --> 00:09:42,820
characters so with that<font color="#E5E5E5"> as our network</font>

247
00:09:41,110 --> 00:09:45,130
idea the training data we're using is

248
00:09:42,820 --> 00:09:47,410
<font color="#E5E5E5">labeled URI data from apache server logs</font>

249
00:09:45,130 --> 00:09:49,149
we stripped out all<font color="#CCCCCC"> of this stuff like I</font>

250
00:09:47,410 --> 00:09:50,829
peas and any kind<font color="#CCCCCC"> of headers or anything</font>

251
00:09:49,149 --> 00:09:53,890
like that it's literally<font color="#CCCCCC"> just the uri +</font>

252
00:09:50,829 --> 00:09:56,229
the response code from<font color="#E5E5E5"> the server given</font>

253
00:09:53,890 --> 00:09:57,699
<font color="#CCCCCC">that you are i it is possible because of</font>

254
00:09:56,230 --> 00:10:00,310
<font color="#E5E5E5">this you could have multiple labels</font>

255
00:09:57,700 --> 00:10:01,810
especially once we start grouping so

256
00:10:00,310 --> 00:10:03,550
that<font color="#CCCCCC"> we'll get</font><font color="#E5E5E5"> into why that's not</font>

257
00:10:01,810 --> 00:10:06,699
<font color="#E5E5E5">necessarily great but we're already</font>

258
00:10:03,550 --> 00:10:08,560
relaxing assumptions anyways as<font color="#CCCCCC"> far the</font>

259
00:10:06,700 --> 00:10:09,910
network is concerned a URI is completely

260
00:10:08,560 --> 00:10:11,290
unknown to it it doesn't know what the

261
00:10:09,910 --> 00:10:13,029
structure<font color="#E5E5E5"> is and there's nothing about</font>

262
00:10:11,290 --> 00:10:15,849
<font color="#E5E5E5">the rfcs or any kind of convenient</font>

263
00:10:13,029 --> 00:10:17,950
constructions the only thing it knows is

264
00:10:15,850 --> 00:10:20,260
that a URI is constructed of a series of

265
00:10:17,950 --> 00:10:22,450
letters and that we're going<font color="#E5E5E5"> to give it</font>

266
00:10:20,260 --> 00:10:25,420
examples of what a URI is or what it

267
00:10:22,450 --> 00:10:27,670
shouldn't be our goal<font color="#CCCCCC"> here is validation</font>

268
00:10:25,420 --> 00:10:29,260
so we would like<font color="#CCCCCC"> to recognize</font><font color="#E5E5E5"> only valid</font>

269
00:10:27,670 --> 00:10:31,449
you<font color="#CCCCCC"> our eyes so that</font><font color="#E5E5E5"> if someone tries to</font>

270
00:10:29,260 --> 00:10:34,770
<font color="#E5E5E5">send an invalid URI or tap something to</font>

271
00:10:31,450 --> 00:10:36,970
it that shouldn't be in<font color="#E5E5E5"> a URI rejects it</font>

272
00:10:34,770 --> 00:10:39,089
but otherwise we also don't want to

273
00:10:36,970 --> 00:10:41,829
reject perfectly reasonable you<font color="#E5E5E5"> our eyes</font>

274
00:10:39,089 --> 00:10:43,329
so here's the results the first one<font color="#CCCCCC"> is</font>

275
00:10:41,829 --> 00:10:45,160
the table so here we're talking<font color="#CCCCCC"> about</font>

276
00:10:43,329 --> 00:10:48,430
the bays accuracy whenever you're

277
00:10:45,160 --> 00:10:50,260
dealing with a labeled data set in any

278
00:10:48,430 --> 00:10:51,550
kind of<font color="#E5E5E5"> prediction the Bayes error rates</font>

279
00:10:50,260 --> 00:10:53,410
absolute best you can get<font color="#E5E5E5"> just</font>

280
00:10:51,550 --> 00:10:55,560
especially<font color="#E5E5E5"> if there's overlap in the</font>

281
00:10:53,410 --> 00:10:58,120
labels this<font color="#E5E5E5"> basically represents the</font>

282
00:10:55,560 --> 00:11:00,518
percentage given that you randomly draw

283
00:10:58,120 --> 00:11:03,310
and get it correct despite there being

284
00:11:00,519 --> 00:11:05,410
an overlap so because there's multiple

285
00:11:03,310 --> 00:11:07,660
labels possible it's impossible<font color="#E5E5E5"> even if</font>

286
00:11:05,410 --> 00:11:08,589
your identifier is perfect to actually

287
00:11:07,660 --> 00:11:12,610
get one hypersonic

288
00:11:08,590 --> 00:11:14,320
see so basis of us we get ungroup<font color="#CCCCCC"> versus</font>

289
00:11:12,610 --> 00:11:16,180
grouped is again this idea of whether<font color="#E5E5E5"> or</font>

290
00:11:14,320 --> 00:11:17,830
not ungrouped means that we allow for

291
00:11:16,180 --> 00:11:20,949
any possible server response code so

292
00:11:17,830 --> 00:11:24,400
labeling at 50<font color="#E5E5E5"> 150</font><font color="#CCCCCC"> 2 or whatever grouped</font>

293
00:11:20,950 --> 00:11:28,090
is saying handled not handled or server

294
00:11:24,400 --> 00:11:29,650
error<font color="#E5E5E5"> in general there weren't really</font>

295
00:11:28,090 --> 00:11:32,350
many server errors but they are

296
00:11:29,650 --> 00:11:34,090
technically possible in the group data a

297
00:11:32,350 --> 00:11:36,340
table 2 gives a breakdown of a

298
00:11:34,090 --> 00:11:38,110
particular it gives<font color="#CCCCCC"> the</font><font color="#E5E5E5"> true positive</font>

299
00:11:36,340 --> 00:11:41,140
true negative and all that good stuff

300
00:11:38,110 --> 00:11:44,860
for<font color="#CCCCCC"> a very particular subset of the</font>

301
00:11:41,140 --> 00:11:47,230
table 1 and so the takeaway from these

302
00:11:44,860 --> 00:11:49,780
two tables is that for recognizing valid

303
00:11:47,230 --> 00:11:54,190
you<font color="#E5E5E5"> are</font><font color="#CCCCCC"> eyes it we can do exceedingly</font>

304
00:11:49,780 --> 00:11:56,560
well the when we try to<font color="#E5E5E5"> look at is this</font>

305
00:11:54,190 --> 00:11:58,390
<font color="#E5E5E5">a valid URI after a long extended</font>

306
00:11:56,560 --> 00:12:00,640
learning period with 99 percent accuracy

307
00:11:58,390 --> 00:12:03,640
<font color="#CCCCCC">it will return yes this is a valid URI</font>

308
00:12:00,640 --> 00:12:05,199
and on even some of the invalid you<font color="#CCCCCC"> are</font>

309
00:12:03,640 --> 00:12:09,160
eyes it will in fact return that<font color="#E5E5E5"> no this</font>

310
00:12:05,200 --> 00:12:12,430
is an invalid URI downside is<font color="#E5E5E5"> we'll get</font>

311
00:12:09,160 --> 00:12:15,339
into<font color="#E5E5E5"> is if you notice the false positive</font>

312
00:12:12,430 --> 00:12:18,640
rate is a little bit high but there's

313
00:12:15,340 --> 00:12:19,930
probably ways to reduce that so again

314
00:12:18,640 --> 00:12:21,730
the takeaway is that practical learning

315
00:12:19,930 --> 00:12:24,760
is possible so even though you<font color="#E5E5E5"> are eyes</font>

316
00:12:21,730 --> 00:12:26,500
can in theory be a CFG and even though

317
00:12:24,760 --> 00:12:27,700
we're dealing with a not well enumerated

318
00:12:26,500 --> 00:12:29,290
grammar and even though we don't know

319
00:12:27,700 --> 00:12:31,510
what any of the structure is we can

320
00:12:29,290 --> 00:12:33,819
still get recognition rate well above 99

321
00:12:31,510 --> 00:12:37,660
percent false positive rate at<font color="#E5E5E5"> the time</font>

322
00:12:33,820 --> 00:12:39,160
remains high we also did generation of

323
00:12:37,660 --> 00:12:40,870
<font color="#E5E5E5">your eyes that's also theoretically</font>

324
00:12:39,160 --> 00:12:43,449
possible since we did character by

325
00:12:40,870 --> 00:12:44,860
character learning so we are also able

326
00:12:43,450 --> 00:12:46,720
to generate what would be considered

327
00:12:44,860 --> 00:12:47,740
reasonable looking your eyes whether or

328
00:12:46,720 --> 00:12:52,660
not they<font color="#CCCCCC"> are actually valid on the</font>

329
00:12:47,740 --> 00:12:54,460
server is a different question so we can

330
00:12:52,660 --> 00:12:56,010
<font color="#CCCCCC">train a network to recognize you our</font>

331
00:12:54,460 --> 00:12:58,480
eyes we need no prior knowledge

332
00:12:56,010 --> 00:12:59,860
downsides are that false positive rate

333
00:12:58,480 --> 00:13:02,440
is high training is very<font color="#CCCCCC"> time</font><font color="#E5E5E5"> consuming</font>

334
00:12:59,860 --> 00:13:05,200
and if we want<font color="#E5E5E5"> good practical use</font><font color="#CCCCCC"> we'll</font>

335
00:13:02,440 --> 00:13:06,730
probably<font color="#E5E5E5"> need faster identification so</font>

336
00:13:05,200 --> 00:13:10,990
this takes segways in the future work

337
00:13:06,730 --> 00:13:13,000
which is it's<font color="#CCCCCC"> very possible that we</font><font color="#E5E5E5"> can</font>

338
00:13:10,990 --> 00:13:16,150
use<font color="#CCCCCC"> some kind of entropy base rule set</font>

339
00:13:13,000 --> 00:13:17,920
based on any given step in the character

340
00:13:16,150 --> 00:13:20,350
creation and from that we might be<font color="#CCCCCC"> able</font>

341
00:13:17,920 --> 00:13:21,670
to say make a finite state automata or

342
00:13:20,350 --> 00:13:23,230
something similar and

343
00:13:21,670 --> 00:13:25,030
that we<font color="#E5E5E5"> can construct a rule set that</font>

344
00:13:23,230 --> 00:13:27,610
<font color="#E5E5E5">will act much quicker than the network</font>

345
00:13:25,030 --> 00:13:28,569
itself the additional issue whenever

346
00:13:27,610 --> 00:13:30,040
you're doing training with neural

347
00:13:28,570 --> 00:13:33,160
networks as they might be<font color="#E5E5E5"> vulnerable to</font>

348
00:13:30,040 --> 00:13:35,589
<font color="#E5E5E5">Melissa training if someone gets for</font>

349
00:13:33,160 --> 00:13:38,350
instance puts in data into your good set

350
00:13:35,590 --> 00:13:40,350
that's actually invalid so we're doing

351
00:13:38,350 --> 00:13:43,660
<font color="#E5E5E5">work on determining the robustness of</font>

352
00:13:40,350 --> 00:13:49,110
training<font color="#CCCCCC"> in neural networks assuming</font>

353
00:13:43,660 --> 00:13:52,660
malicious traffic's included so that's

354
00:13:49,110 --> 00:13:54,340
kind of where<font color="#E5E5E5"> we're heading so kind of</font>

355
00:13:52,660 --> 00:13:56,319
bring the<font color="#E5E5E5"> whole talk together theories</font>

356
00:13:54,340 --> 00:13:58,030
often hard usually very hard and<font color="#CCCCCC"> P</font>

357
00:13:56,320 --> 00:13:59,560
harder NP complete when you're talking

358
00:13:58,030 --> 00:14:03,160
about learning grammars from positive

359
00:13:59,560 --> 00:14:05,109
<font color="#E5E5E5">example there's no clear exact line your</font>

360
00:14:03,160 --> 00:14:07,930
results however we have<font color="#E5E5E5"> good</font>

361
00:14:05,110 --> 00:14:09,940
experimental results so it seems like<font color="#E5E5E5"> it</font>

362
00:14:07,930 --> 00:14:12,609
may very well be possible to kind of

363
00:14:09,940 --> 00:14:14,740
just throw enough computational power

364
00:14:12,610 --> 00:14:16,120
and give it valid you our eyes and we

365
00:14:14,740 --> 00:14:18,880
can get something that actually does

366
00:14:16,120 --> 00:14:21,370
recognize you our eyes going<font color="#E5E5E5"> forward and</font>

367
00:14:18,880 --> 00:14:22,840
it's not perfect and certainly is not

368
00:14:21,370 --> 00:14:24,610
going to be a<font color="#CCCCCC"> long-term solution</font>

369
00:14:22,840 --> 00:14:26,470
especially in the realm of<font color="#E5E5E5"> blanc-sec but</font>

370
00:14:24,610 --> 00:14:28,960
it may be<font color="#E5E5E5"> good enough to convince people</font>

371
00:14:26,470 --> 00:14:32,170
who are otherwise not willing<font color="#CCCCCC"> to adopt</font>

372
00:14:28,960 --> 00:14:33,430
more perfect<font color="#CCCCCC"> parlors</font><font color="#E5E5E5"> to kind of hear</font>

373
00:14:32,170 --> 00:14:34,810
something<font color="#CCCCCC"> that you can tack on in the</font>

374
00:14:33,430 --> 00:14:41,579
meantime to try to<font color="#E5E5E5"> help secure it a</font>

375
00:14:34,810 --> 00:14:41,579
little bit more but with them

