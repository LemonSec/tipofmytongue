1
00:00:00,000 --> 00:00:04,920
I'm Jia Majnu<font color="#E5E5E5"> I have studied in the</font>

2
00:00:03,000 --> 00:00:08,370
Ecole Polytechnique in France<font color="#E5E5E5"> and I'm</font>

3
00:00:04,920 --> 00:00:11,219
<font color="#CCCCCC">knowing EPFL in Switzerland</font><font color="#E5E5E5"> and this is</font>

4
00:00:08,370 --> 00:00:14,009
a joint<font color="#CCCCCC"> work with</font><font color="#E5E5E5"> Olivia</font><font color="#CCCCCC"> lovino who was</font>

5
00:00:11,219 --> 00:00:18,660
here two years<font color="#E5E5E5"> ago</font><font color="#CCCCCC"> at long sac</font><font color="#E5E5E5"> and a</font>

6
00:00:14,009 --> 00:00:22,920
<font color="#CCCCCC">mineral from NC</font><font color="#E5E5E5"> so we worked on PDF</font>

7
00:00:18,660 --> 00:00:25,439
processing and validation<font color="#E5E5E5"> so what is PDF</font>

8
00:00:22,920 --> 00:00:29,699
<font color="#E5E5E5">it stands</font><font color="#CCCCCC"> for Portable Document format</font>

9
00:00:25,439 --> 00:00:33,090
<font color="#E5E5E5">and so it's a commonly used format but</font>

10
00:00:29,699 --> 00:00:35,430
by a lot of<font color="#E5E5E5"> people but it's also a</font>

11
00:00:33,090 --> 00:00:39,480
format<font color="#CCCCCC"> that has many security issues</font>

12
00:00:35,430 --> 00:00:44,309
which is<font color="#CCCCCC"> why when</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> are interested</font><font color="#E5E5E5"> in</font>

13
00:00:39,480 --> 00:00:47,788
this format<font color="#CCCCCC"> so</font><font color="#E5E5E5"> there have been more than</font>

14
00:00:44,309 --> 00:00:53,968
<font color="#E5E5E5">500 vulnerabilities in a</font><font color="#CCCCCC"> adobe reader</font>

15
00:00:47,789 --> 00:00:56,879
since<font color="#E5E5E5"> the last 17 years</font><font color="#CCCCCC"> so another point</font>

16
00:00:53,969 --> 00:01:00,690
is<font color="#CCCCCC"> that there are other</font><font color="#E5E5E5"> implementation</font>

17
00:00:56,879 --> 00:01:03,030
than<font color="#E5E5E5"> Adobe Reader but there are a lot</font><font color="#CCCCCC"> of</font>

18
00:01:00,690 --> 00:01:07,080
discrepancies<font color="#E5E5E5"> between these different</font>

19
00:01:03,030 --> 00:01:10,140
<font color="#CCCCCC">passers</font><font color="#E5E5E5"> which can be a problem first</font>

20
00:01:07,080 --> 00:01:12,900
<font color="#E5E5E5">like PDF can be used for contracts or</font>

21
00:01:10,140 --> 00:01:16,409
tax<font color="#CCCCCC"> forms so</font><font color="#E5E5E5"> we want to be to make</font><font color="#CCCCCC"> sure</font>

22
00:01:12,900 --> 00:01:20,490
<font color="#E5E5E5">that the file</font><font color="#CCCCCC"> is read in the</font><font color="#E5E5E5"> same way by</font>

23
00:01:16,409 --> 00:01:25,009
everyone and also if we write a malware

24
00:01:20,490 --> 00:01:28,530
detector that will analyze the semantic

25
00:01:25,009 --> 00:01:32,070
content of the file we want that his

26
00:01:28,530 --> 00:01:37,380
parser behaves the same<font color="#E5E5E5"> way as the PDF</font>

27
00:01:32,070 --> 00:01:40,710
<font color="#CCCCCC">reader and</font><font color="#E5E5E5"> last the syntax of PDF</font>

28
00:01:37,380 --> 00:01:44,310
facilitates polymorphism<font color="#E5E5E5"> so in previous</font>

29
00:01:40,710 --> 00:01:47,100
work there's been examples<font color="#CCCCCC"> of files</font><font color="#E5E5E5"> that</font>

30
00:01:44,310 --> 00:01:51,000
can<font color="#E5E5E5"> be</font><font color="#CCCCCC"> opened at the same time by a PDF</font>

31
00:01:47,100 --> 00:01:54,000
<font color="#E5E5E5">reader and by zip software or</font><font color="#CCCCCC"> jpg</font>

32
00:01:51,000 --> 00:01:55,649
software the a lot of this<font color="#E5E5E5"> kind of</font>

33
00:01:54,000 --> 00:01:57,719
<font color="#CCCCCC">examples</font><font color="#E5E5E5"> so again</font>

34
00:01:55,649 --> 00:02:02,549
for example of malware detector has to

35
00:01:57,719 --> 00:02:06,119
consider both types of the file and the

36
00:02:02,549 --> 00:02:09,479
<font color="#CCCCCC">keynote</font><font color="#E5E5E5"> when shown a bit of this you</font>

37
00:02:06,119 --> 00:02:12,690
could open a PDF as a text file you

38
00:02:09,479 --> 00:02:13,500
would<font color="#E5E5E5"> get something else</font><font color="#CCCCCC"> so so in our</font>

39
00:02:12,690 --> 00:02:16,620
work

40
00:02:13,500 --> 00:02:20,280
we aimed at verifying the PDF from<font color="#CCCCCC"> the</font>

41
00:02:16,620 --> 00:02:23,400
syntactic level<font color="#E5E5E5"> so from the very lower</font>

42
00:02:20,280 --> 00:02:27,150
layer of the format whereas previous

43
00:02:23,400 --> 00:02:29,700
work at more<font color="#CCCCCC"> analyzed semantic content</font>

44
00:02:27,150 --> 00:02:30,420
such as the JavaScript interpreter and

45
00:02:29,700 --> 00:02:33,869
stuff like that

46
00:02:30,420 --> 00:02:36,989
so there are<font color="#E5E5E5"> basically</font><font color="#CCCCCC"> two approaches</font><font color="#E5E5E5"> to</font>

47
00:02:33,870 --> 00:02:39,030
<font color="#E5E5E5">validate file the first one is the</font>

48
00:02:36,990 --> 00:02:41,880
blacklist<font color="#E5E5E5"> approach which</font><font color="#CCCCCC"> mods</font>

49
00:02:39,030 --> 00:02:44,400
<font color="#CCCCCC">Mirada</font><font color="#E5E5E5"> Tector implement so they just</font>

50
00:02:41,880 --> 00:02:47,760
collect a bunch<font color="#E5E5E5"> of existing malware and</font>

51
00:02:44,400 --> 00:02:51,780
try to blacklist them but it will not

52
00:02:47,760 --> 00:02:54,120
detect new forms of<font color="#E5E5E5"> malware and another</font>

53
00:02:51,780 --> 00:02:57,390
one is the<font color="#CCCCCC"> whitelist</font><font color="#E5E5E5"> approach that we</font>

54
00:02:54,120 --> 00:03:00,300
<font color="#CCCCCC">advocate here so at the expense may be</font>

55
00:02:57,390 --> 00:03:05,100
of a higher rejection<font color="#E5E5E5"> rate we accept</font>

56
00:03:00,300 --> 00:03:09,180
only<font color="#E5E5E5"> file directly so in this talk I</font>

57
00:03:05,100 --> 00:03:13,170
will first introduce<font color="#CCCCCC"> the syntax</font><font color="#E5E5E5"> and the</font>

58
00:03:09,180 --> 00:03:18,630
structure<font color="#E5E5E5"> of the PDF format then we will</font>

59
00:03:13,170 --> 00:03:20,790
try to to see what can be<font color="#E5E5E5"> a pragmatic</font>

60
00:03:18,630 --> 00:03:23,370
solution<font color="#CCCCCC"> to the program of</font><font color="#E5E5E5"> validation of</font>

61
00:03:20,790 --> 00:03:27,870
PDF files<font color="#E5E5E5"> to</font><font color="#CCCCCC"> our tool</font><font color="#E5E5E5"> carried out and</font>

62
00:03:23,370 --> 00:03:30,750
then we will<font color="#E5E5E5"> see how this</font><font color="#CCCCCC"> apply to a</font>

63
00:03:27,870 --> 00:03:37,830
real-world file and which conclusion we

64
00:03:30,750 --> 00:03:40,980
can draw from<font color="#E5E5E5"> it so first a PDF file</font>

65
00:03:37,830 --> 00:03:44,040
basically is written as a text like

66
00:03:40,980 --> 00:03:46,798
format<font color="#E5E5E5"> so it's made of</font><font color="#CCCCCC"> objects that</font><font color="#E5E5E5"> will</font>

67
00:03:44,040 --> 00:03:48,989
describe<font color="#E5E5E5"> the document so there's the</font>

68
00:03:46,799 --> 00:03:53,340
null object<font color="#CCCCCC"> brilliance number of strings</font>

69
00:03:48,989 --> 00:03:55,470
which are in<font color="#E5E5E5"> parentheses here</font><font color="#CCCCCC"> names</font><font color="#E5E5E5"> then</font>

70
00:03:53,340 --> 00:03:57,239
we can build more<font color="#CCCCCC"> complex</font><font color="#E5E5E5"> objects</font><font color="#CCCCCC"> such</font>

71
00:03:55,470 --> 00:04:00,180
as a race that's<font color="#CCCCCC"> going to contain</font>

72
00:03:57,239 --> 00:04:05,220
arbitrary objects and dictionaries that

73
00:04:00,180 --> 00:04:09,299
<font color="#E5E5E5">map</font><font color="#CCCCCC"> keys to values</font><font color="#E5E5E5"> then we</font><font color="#CCCCCC"> can build</font>

74
00:04:05,220 --> 00:04:14,400
<font color="#E5E5E5">more complex structures and we have we</font>

75
00:04:09,299 --> 00:04:16,410
can introduce reference so<font color="#E5E5E5"> we can give a</font>

76
00:04:14,400 --> 00:04:19,440
<font color="#CCCCCC">name to</font><font color="#E5E5E5"> an object so here</font><font color="#CCCCCC"> it's a pair of</font>

77
00:04:16,410 --> 00:04:22,260
<font color="#E5E5E5">two</font><font color="#CCCCCC"> numbers 1 0 for</font><font color="#E5E5E5"> example</font><font color="#CCCCCC"> and then we</font>

78
00:04:19,440 --> 00:04:24,030
can reference<font color="#E5E5E5"> this</font><font color="#CCCCCC"> object later</font><font color="#E5E5E5"> so it's</font>

79
00:04:22,260 --> 00:04:26,920
useful for<font color="#CCCCCC"> example</font><font color="#E5E5E5"> if you have a font</font>

80
00:04:24,030 --> 00:04:29,890
<font color="#E5E5E5">that is shared between several pages</font>

81
00:04:26,920 --> 00:04:33,130
you<font color="#CCCCCC"> know</font><font color="#E5E5E5"> want to copy the same object</font>

82
00:04:29,890 --> 00:04:35,919
several times and you also have streams

83
00:04:33,130 --> 00:04:37,450
which allowed to compress content so for

84
00:04:35,920 --> 00:04:40,210
<font color="#E5E5E5">example if we want to include images</font>

85
00:04:37,450 --> 00:04:42,400
<font color="#E5E5E5">inside the</font><font color="#CCCCCC"> document</font><font color="#E5E5E5"> there will</font><font color="#CCCCCC"> be</font>

86
00:04:40,210 --> 00:04:45,460
included in<font color="#E5E5E5"> the stream and the stream</font>

87
00:04:42,400 --> 00:04:48,060
also has metadata<font color="#E5E5E5"> which is in the form</font>

88
00:04:45,460 --> 00:04:52,780
of a<font color="#CCCCCC"> dictionary so for example the</font>

89
00:04:48,060 --> 00:04:56,380
dimensions<font color="#E5E5E5"> of the image</font><font color="#CCCCCC"> then at the file</font>

90
00:04:52,780 --> 00:04:59,650
<font color="#CCCCCC">level</font><font color="#E5E5E5"> the basic structure is as follows</font>

91
00:04:56,380 --> 00:05:05,320
<font color="#CCCCCC">so we have a header</font><font color="#E5E5E5"> that identifies the</font>

92
00:04:59,650 --> 00:05:08,500
PDF<font color="#E5E5E5"> type and the version then we have</font>

93
00:05:05,320 --> 00:05:11,770
all the objects<font color="#CCCCCC"> that represent the</font>

94
00:05:08,500 --> 00:05:14,590
documents<font color="#E5E5E5"> and then a reference table</font>

95
00:05:11,770 --> 00:05:17,530
that indicates the<font color="#CCCCCC"> location of this</font>

96
00:05:14,590 --> 00:05:20,710
object so<font color="#CCCCCC"> that we can retire them</font><font color="#E5E5E5"> last</font>

97
00:05:17,530 --> 00:05:23,590
we have a trailer which<font color="#E5E5E5"> is the logical</font>

98
00:05:20,710 --> 00:05:26,049
<font color="#CCCCCC">root of the document and the</font><font color="#E5E5E5"> under file</font>

99
00:05:23,590 --> 00:05:29,349
that indicates the position<font color="#E5E5E5"> of the</font>

100
00:05:26,050 --> 00:05:32,770
reference<font color="#CCCCCC"> table</font><font color="#E5E5E5"> so basically the former</font>

101
00:05:29,350 --> 00:05:34,480
was meant to be passed from the<font color="#CCCCCC"> end</font><font color="#E5E5E5"> so</font>

102
00:05:32,770 --> 00:05:37,299
we start at<font color="#E5E5E5"> the</font><font color="#CCCCCC"> end</font><font color="#E5E5E5"> of file retract the</font>

103
00:05:34,480 --> 00:05:41,590
reference<font color="#E5E5E5"> table and then can find the</font>

104
00:05:37,300 --> 00:05:44,530
objects<font color="#CCCCCC"> this</font><font color="#E5E5E5"> was the very basic format</font>

105
00:05:41,590 --> 00:05:47,590
but actually with the following versions

106
00:05:44,530 --> 00:05:49,809
of the format there are more complex

107
00:05:47,590 --> 00:05:54,219
structure were introduced<font color="#E5E5E5"> so for example</font>

108
00:05:49,810 --> 00:05:56,710
we can have<font color="#E5E5E5"> an incremental</font><font color="#CCCCCC"> update so if</font>

109
00:05:54,220 --> 00:05:59,980
you want<font color="#CCCCCC"> to update a file we can just</font>

110
00:05:56,710 --> 00:06:02,739
<font color="#E5E5E5">open new objects that will describe the</font>

111
00:05:59,980 --> 00:06:05,140
modification<font color="#E5E5E5"> and then</font><font color="#CCCCCC"> a new table and a</font>

112
00:06:02,740 --> 00:06:08,220
new under file that will<font color="#E5E5E5"> reference them</font>

113
00:06:05,140 --> 00:06:10,979
we can also delete previous<font color="#CCCCCC"> object and</font>

114
00:06:08,220 --> 00:06:14,050
it<font color="#E5E5E5"> will reference the previous table</font>

115
00:06:10,980 --> 00:06:18,630
<font color="#CCCCCC">there is also object stream which is a</font>

116
00:06:14,050 --> 00:06:21,160
means to encapsulate<font color="#E5E5E5"> objects inside</font><font color="#CCCCCC"> a</font>

117
00:06:18,630 --> 00:06:24,670
stream which is<font color="#E5E5E5"> a compressed object so</font>

118
00:06:21,160 --> 00:06:27,610
that the file<font color="#CCCCCC"> is of smaller size and</font>

119
00:06:24,670 --> 00:06:30,430
there is a linearization<font color="#E5E5E5"> which is used</font>

120
00:06:27,610 --> 00:06:33,820
for<font color="#E5E5E5"> if you want to deliver PDF file</font><font color="#CCCCCC"> of</font>

121
00:06:30,430 --> 00:06:36,190
our network<font color="#E5E5E5"> as we saw the table is at</font>

122
00:06:33,820 --> 00:06:38,500
the end which<font color="#CCCCCC"> is problematic so it's</font>

123
00:06:36,190 --> 00:06:41,530
kind of a hybrid structure<font color="#E5E5E5"> with</font><font color="#CCCCCC"> the</font>

124
00:06:38,500 --> 00:06:44,860
first object acting as a

125
00:06:41,530 --> 00:06:49,359
to be able<font color="#E5E5E5"> to display the content during</font>

126
00:06:44,860 --> 00:06:53,590
downloading then at the logical<font color="#CCCCCC"> level</font><font color="#E5E5E5"> a</font>

127
00:06:49,360 --> 00:06:56,160
PDF file so as as I mentioned there are

128
00:06:53,590 --> 00:07:00,190
there<font color="#CCCCCC"> are references between</font><font color="#E5E5E5"> object and</font>

129
00:06:56,160 --> 00:07:02,350
here is an<font color="#E5E5E5"> example of a 17 page document</font>

130
00:07:00,190 --> 00:07:05,440
like a presentation like<font color="#CCCCCC"> this so there</font>

131
00:07:02,350 --> 00:07:09,540
are<font color="#E5E5E5"> about</font><font color="#CCCCCC"> a thousand objects</font><font color="#E5E5E5"> and we can</font>

132
00:07:05,440 --> 00:07:11,710
see<font color="#E5E5E5"> that some of these objects are</font><font color="#CCCCCC"> in a</font>

133
00:07:09,540 --> 00:07:16,870
structural way so we will<font color="#CCCCCC"> try</font><font color="#E5E5E5"> to</font>

134
00:07:11,710 --> 00:07:20,260
investigate<font color="#E5E5E5"> that</font><font color="#CCCCCC"> so first we can note</font>

135
00:07:16,870 --> 00:07:22,240
<font color="#CCCCCC">that most of this structure in the graph</font>

136
00:07:20,260 --> 00:07:25,950
<font color="#CCCCCC">are trees the flags and all</font><font color="#E5E5E5"> of the pages</font>

137
00:07:22,240 --> 00:07:29,410
<font color="#E5E5E5">are organized as a tree and the leaves</font>

138
00:07:25,950 --> 00:07:32,140
<font color="#CCCCCC">of these trees are the pages</font><font color="#E5E5E5"> so the left</font>

139
00:07:29,410 --> 00:07:35,140
most leaf is<font color="#E5E5E5"> the first page then we can</font>

140
00:07:32,140 --> 00:07:37,630
go on<font color="#CCCCCC"> to find all the pages this can be</font>

141
00:07:35,140 --> 00:07:42,180
useful<font color="#E5E5E5"> if some pages share the same</font>

142
00:07:37,630 --> 00:07:45,670
properties<font color="#E5E5E5"> such as like the dimensions</font>

143
00:07:42,180 --> 00:07:49,120
<font color="#CCCCCC">also there is the table</font><font color="#E5E5E5"> of contents so</font>

144
00:07:45,670 --> 00:07:54,070
in this example<font color="#E5E5E5"> on the</font><font color="#CCCCCC"> left hand side</font>

145
00:07:49,120 --> 00:07:56,950
you can<font color="#CCCCCC"> see a</font><font color="#E5E5E5"> list of items</font><font color="#CCCCCC"> so for</font>

146
00:07:54,070 --> 00:08:00,310
example chapters and sections and it's

147
00:07:56,950 --> 00:08:04,900
also organized as the as a tree but the

148
00:08:00,310 --> 00:08:07,900
the thing<font color="#CCCCCC"> is</font><font color="#E5E5E5"> that the the kids are of</font>

149
00:08:04,900 --> 00:08:10,270
which<font color="#CCCCCC"> nodes are organized as a as a</font>

150
00:08:07,900 --> 00:08:12,310
linked list<font color="#E5E5E5"> which is a problem</font><font color="#CCCCCC"> for</font>

151
00:08:10,270 --> 00:08:14,680
passing because for example<font color="#CCCCCC"> an attacker</font>

152
00:08:12,310 --> 00:08:19,180
can write an invalid structure with

153
00:08:14,680 --> 00:08:23,470
loops inside the the linked list

154
00:08:19,180 --> 00:08:26,730
<font color="#E5E5E5">structure and actual process of</font><font color="#CCCCCC"> M don't</font>

155
00:08:23,470 --> 00:08:30,190
check that<font color="#E5E5E5"> so I have a demonstration</font>

156
00:08:26,730 --> 00:08:33,130
<font color="#E5E5E5">with two examples of PDF ID that may be</font>

157
00:08:30,190 --> 00:08:34,719
<font color="#E5E5E5">problematic</font><font color="#CCCCCC"> so the first one is a one</font>

158
00:08:33,130 --> 00:08:38,289
with the loop in<font color="#E5E5E5"> the outline structure</font>

159
00:08:34,719 --> 00:08:40,900
<font color="#E5E5E5">such</font><font color="#CCCCCC"> as the one I presented before</font><font color="#E5E5E5"> and</font>

160
00:08:38,289 --> 00:08:43,689
the second one is a polymorphic file so

161
00:08:40,900 --> 00:08:46,510
we will<font color="#E5E5E5"> open it with several PDF readers</font>

162
00:08:43,690 --> 00:08:49,180
<font color="#E5E5E5">and get different content so of course</font>

163
00:08:46,510 --> 00:08:51,460
this<font color="#E5E5E5"> file already reported to software</font>

164
00:08:49,180 --> 00:08:55,709
editors so the demo is with previous

165
00:08:51,460 --> 00:08:55,710
version<font color="#CCCCCC"> of this software</font><font color="#E5E5E5"> so</font>

166
00:08:56,020 --> 00:09:02,589
so I will start with<font color="#E5E5E5"> the cycle in the</font>

167
00:08:59,149 --> 00:09:05,270
outline<font color="#E5E5E5"> I open it with the Adobe</font><font color="#CCCCCC"> Reader</font>

168
00:09:02,589 --> 00:09:09,290
<font color="#CCCCCC">all</font><font color="#E5E5E5"> right so I can</font><font color="#CCCCCC"> see page</font><font color="#E5E5E5"> 1 page 2</font>

169
00:09:05,270 --> 00:09:12,500
page 1 again<font color="#E5E5E5"> if I open it</font><font color="#CCCCCC"> it starts like</font>

170
00:09:09,290 --> 00:09:17,230
this<font color="#E5E5E5"> and it's</font><font color="#CCCCCC"> never-ending</font>

171
00:09:12,500 --> 00:09:20,330
<font color="#CCCCCC">ok cool</font><font color="#E5E5E5"> if I open the same file with</font>

172
00:09:17,230 --> 00:09:23,750
<font color="#CCCCCC">Foxit reader what do I get</font>

173
00:09:20,330 --> 00:09:27,920
<font color="#CCCCCC">so again page 1 page 2</font><font color="#E5E5E5"> if I try</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> open</font>

174
00:09:23,750 --> 00:09:30,620
<font color="#E5E5E5">it how the program</font><font color="#CCCCCC"> has crash I will not</font>

175
00:09:27,920 --> 00:09:34,390
send the crash report<font color="#E5E5E5"> because it</font><font color="#CCCCCC"> will</font>

176
00:09:30,620 --> 00:09:38,720
not<font color="#CCCCCC"> work and then if I open it with</font>

177
00:09:34,390 --> 00:09:41,120
let's say sumatra PDF<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> here the</font>

178
00:09:38,720 --> 00:09:47,930
software detected the loop and stopped

179
00:09:41,120 --> 00:09:50,480
the thing<font color="#CCCCCC"> i can open it with</font><font color="#E5E5E5"> linux and</font>

180
00:09:47,930 --> 00:09:53,719
here we didn't see<font color="#E5E5E5"> properly but it's</font>

181
00:09:50,480 --> 00:09:58,070
loading forever<font color="#E5E5E5"> so we cannot see any</font>

182
00:09:53,720 --> 00:10:01,100
contact then the polymorphic example<font color="#CCCCCC"> i</font>

183
00:09:58,070 --> 00:10:05,140
open<font color="#CCCCCC"> it with Adobe Reader so we can see</font>

184
00:10:01,100 --> 00:10:09,230
that it detected Adobe Reader<font color="#CCCCCC"> I open it</font>

185
00:10:05,140 --> 00:10:11,540
with foxy Twitter<font color="#E5E5E5"> so this is the content</font>

186
00:10:09,230 --> 00:10:17,270
<font color="#E5E5E5">for foxy Twitter or</font><font color="#CCCCCC"> Chrome or</font><font color="#E5E5E5"> sumatra</font>

187
00:10:11,540 --> 00:10:23,089
PDF<font color="#CCCCCC"> i open it with sumatra PDF</font><font color="#E5E5E5"> again the</font>

188
00:10:17,270 --> 00:10:25,390
same content and the one with linux<font color="#E5E5E5"> so</font>

189
00:10:23,089 --> 00:10:28,190
this is poplar the library used for it

190
00:10:25,390 --> 00:10:35,180
this<font color="#E5E5E5"> is the same file you can find it on</font>

191
00:10:28,190 --> 00:10:38,060
our github<font color="#E5E5E5"> so this this</font><font color="#CCCCCC"> two example show</font>

192
00:10:35,180 --> 00:10:40,370
that problems in parser can lead to

193
00:10:38,060 --> 00:10:42,170
several<font color="#E5E5E5"> attacks so the first one would</font>

194
00:10:40,370 --> 00:10:44,420
be<font color="#E5E5E5"> a direct attack on the structure for</font>

195
00:10:42,170 --> 00:10:47,680
<font color="#CCCCCC">example a denial of service</font><font color="#E5E5E5"> as I showed</font>

196
00:10:44,420 --> 00:10:50,329
the the<font color="#E5E5E5"> processor is looping forever so</font>

197
00:10:47,680 --> 00:10:53,149
you can<font color="#CCCCCC"> imagine whatever</font><font color="#E5E5E5"> you want</font>

198
00:10:50,329 --> 00:10:56,540
<font color="#E5E5E5">and then you can have evasion techniques</font>

199
00:10:53,149 --> 00:11:00,370
so<font color="#E5E5E5"> we take advantage of implementation</font>

200
00:10:56,540 --> 00:11:04,819
discrepancies to<font color="#E5E5E5"> evade malware detector</font>

201
00:11:00,370 --> 00:11:06,480
and<font color="#CCCCCC"> target</font><font color="#E5E5E5"> only</font><font color="#CCCCCC"> the the for</font><font color="#E5E5E5"> example</font>

202
00:11:04,820 --> 00:11:11,519
Adobe<font color="#E5E5E5"> Reader that we</font>

203
00:11:06,480 --> 00:11:14,279
one<font color="#CCCCCC"> two attack so what are the possible</font>

204
00:11:11,519 --> 00:11:16,740
solution<font color="#CCCCCC"> so in karo dukh</font><font color="#E5E5E5"> we implemented</font>

205
00:11:14,279 --> 00:11:19,730
<font color="#E5E5E5">a verification of the document at three</font>

206
00:11:16,740 --> 00:11:23,910
<font color="#E5E5E5">levels</font><font color="#CCCCCC"> so first at the first</font><font color="#E5E5E5"> layer</font>

207
00:11:19,730 --> 00:11:26,670
<font color="#E5E5E5">really</font><font color="#CCCCCC"> check the file syntax</font><font color="#E5E5E5"> then we</font>

208
00:11:23,910 --> 00:11:30,029
check<font color="#CCCCCC"> the semantics of the</font><font color="#E5E5E5"> object which</font>

209
00:11:26,670 --> 00:11:32,459
consists of a type checking and then we

210
00:11:30,029 --> 00:11:34,740
can<font color="#E5E5E5"> perform</font><font color="#CCCCCC"> higher</font><font color="#E5E5E5"> level verification</font>

211
00:11:32,459 --> 00:11:38,209
<font color="#E5E5E5">such as verifying that the graph has</font><font color="#CCCCCC"> no</font>

212
00:11:34,740 --> 00:11:43,350
loops or that the images are great

213
00:11:38,209 --> 00:11:45,599
so at syntax level we want to<font color="#CCCCCC"> grantee</font>

214
00:11:43,350 --> 00:11:49,589
<font color="#E5E5E5">the extraction of objects without any</font>

215
00:11:45,600 --> 00:11:52,410
ambiguity<font color="#CCCCCC"> so for that</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> formalize</font><font color="#E5E5E5"> the</font>

216
00:11:49,589 --> 00:11:55,769
grammar for<font color="#E5E5E5"> PDF in BNF format because</font>

217
00:11:52,410 --> 00:11:57,870
the<font color="#E5E5E5"> the specification is actually</font>

218
00:11:55,769 --> 00:12:01,380
<font color="#E5E5E5">written in natural language and doesn't</font>

219
00:11:57,870 --> 00:12:04,230
<font color="#E5E5E5">provide any of this grammar and also the</font>

220
00:12:01,380 --> 00:12:06,199
posture that<font color="#E5E5E5"> we studied were mostly</font>

221
00:12:04,230 --> 00:12:10,290
shotgun process without any

222
00:12:06,199 --> 00:12:12,930
formalization of the<font color="#E5E5E5"> grammar</font><font color="#CCCCCC"> for this</font><font color="#E5E5E5"> we</font>

223
00:12:10,290 --> 00:12:15,420
also implemented structure which

224
00:12:12,930 --> 00:12:18,239
<font color="#E5E5E5">restriction so we don't want to allow</font>

225
00:12:15,420 --> 00:12:21,899
update linearization or<font color="#E5E5E5"> this kind of</font>

226
00:12:18,240 --> 00:12:26,329
complex structure which are<font color="#E5E5E5"> not strictly</font>

227
00:12:21,899 --> 00:12:29,519
<font color="#E5E5E5">necessary to to display file but which</font>

228
00:12:26,329 --> 00:12:33,839
add a layer<font color="#E5E5E5"> of complexity to the process</font>

229
00:12:29,519 --> 00:12:38,760
<font color="#E5E5E5">and last we systematically reject</font>

230
00:12:33,839 --> 00:12:41,940
<font color="#E5E5E5">corrupted file whereas the specification</font>

231
00:12:38,760 --> 00:12:45,089
<font color="#E5E5E5">so the</font><font color="#CCCCCC"> ISO specification says when I</font>

232
00:12:41,940 --> 00:12:47,730
confirm<font color="#E5E5E5"> agreed or reads a PDF file with</font>

233
00:12:45,089 --> 00:12:50,130
damaged or missing<font color="#CCCCCC"> cross reference</font><font color="#E5E5E5"> table</font>

234
00:12:47,730 --> 00:12:51,959
it's may attempt to<font color="#E5E5E5"> rebuild the table by</font>

235
00:12:50,130 --> 00:12:56,189
scanning all<font color="#CCCCCC"> the objects</font><font color="#E5E5E5"> in the file so</font>

236
00:12:51,959 --> 00:12:59,579
it doesn't say in<font color="#CCCCCC"> which extent in which</font>

237
00:12:56,190 --> 00:13:03,149
way<font color="#E5E5E5"> and actually each parcel it's a PDF</font>

238
00:12:59,579 --> 00:13:08,519
<font color="#E5E5E5">reader does is whatever</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> want which is</font>

239
00:13:03,149 --> 00:13:10,740
what we don't want then at the object

240
00:13:08,519 --> 00:13:14,550
level<font color="#E5E5E5"> we want to guarantee a semantic</font>

241
00:13:10,740 --> 00:13:16,589
consistency so if page reference is an

242
00:13:14,550 --> 00:13:19,469
image we want<font color="#E5E5E5"> to check</font><font color="#CCCCCC"> to be sure that</font>

243
00:13:16,589 --> 00:13:21,090
this object is<font color="#CCCCCC"> actually an image</font><font color="#E5E5E5"> and not</font>

244
00:13:19,470 --> 00:13:23,520
something else

245
00:13:21,090 --> 00:13:26,430
so for this purpose we implemented<font color="#E5E5E5"> a</font>

246
00:13:23,520 --> 00:13:30,210
type checking algorithm which<font color="#CCCCCC"> works</font><font color="#E5E5E5"> by</font><font color="#CCCCCC"> a</font>

247
00:13:26,430 --> 00:13:33,329
type inference<font color="#E5E5E5"> so here is an</font><font color="#CCCCCC"> example of</font>

248
00:13:30,210 --> 00:13:37,680
complete<font color="#E5E5E5"> hello Bob file</font><font color="#CCCCCC"> you don't have</font>

249
00:13:33,330 --> 00:13:39,990
to understand the details but<font color="#E5E5E5"> we start</font>

250
00:13:37,680 --> 00:13:42,209
the type checking<font color="#E5E5E5"> with the trailer which</font>

251
00:13:39,990 --> 00:13:44,430
<font color="#E5E5E5">is the logical route of the document so</font>

252
00:13:42,210 --> 00:13:46,680
<font color="#E5E5E5">we know that this object should have the</font>

253
00:13:44,430 --> 00:13:50,010
type trailer<font color="#E5E5E5"> here in yellow we have</font>

254
00:13:46,680 --> 00:13:52,500
<font color="#E5E5E5">inferred is this type then in blue we</font>

255
00:13:50,010 --> 00:13:57,290
will<font color="#CCCCCC"> actually check</font><font color="#E5E5E5"> the type so we'll</font>

256
00:13:52,500 --> 00:14:00,120
check that<font color="#E5E5E5"> each field is is correct</font>

257
00:13:57,290 --> 00:14:03,540
<font color="#CCCCCC">confirms to the type specification and</font>

258
00:14:00,120 --> 00:14:05,760
here<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example we can infer by the</font>

259
00:14:03,540 --> 00:14:09,990
route field<font color="#CCCCCC"> that the object number one</font>

260
00:14:05,760 --> 00:14:14,670
<font color="#E5E5E5">is of type</font><font color="#CCCCCC"> catalog and that the</font><font color="#E5E5E5"> object</font>

261
00:14:09,990 --> 00:14:17,190
number<font color="#E5E5E5"> six is the</font><font color="#CCCCCC"> type info then we go</font>

262
00:14:14,670 --> 00:14:20,630
on<font color="#CCCCCC"> with the</font><font color="#E5E5E5"> catalog we see that object</font>

263
00:14:17,190 --> 00:14:23,090
<font color="#E5E5E5">number</font><font color="#CCCCCC"> two should have type pages</font><font color="#E5E5E5"> so</font>

264
00:14:20,630 --> 00:14:28,170
that's<font color="#E5E5E5"> all right object</font><font color="#CCCCCC"> number one is</font>

265
00:14:23,090 --> 00:14:31,890
checked<font color="#CCCCCC"> we go on we see that we have an</font>

266
00:14:28,170 --> 00:14:34,949
array of kids which<font color="#E5E5E5"> are the pages so we</font>

267
00:14:31,890 --> 00:14:39,000
<font color="#E5E5E5">infer that object</font><font color="#CCCCCC"> number</font><font color="#E5E5E5"> three is not in</font>

268
00:14:34,950 --> 00:14:41,880
the page tree<font color="#E5E5E5"> and then last when we</font>

269
00:14:39,000 --> 00:14:44,339
<font color="#CCCCCC">arrive to the page</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> we check also the</font>

270
00:14:41,880 --> 00:14:47,040
<font color="#E5E5E5">fields and we go back again</font><font color="#CCCCCC"> to object</font>

271
00:14:44,339 --> 00:14:48,930
<font color="#CCCCCC">number two so we will not this time</font>

272
00:14:47,040 --> 00:14:51,360
infer<font color="#E5E5E5"> this type because we already</font>

273
00:14:48,930 --> 00:14:54,930
<font color="#E5E5E5">checked it but we will confirm</font><font color="#CCCCCC"> that</font>

274
00:14:51,360 --> 00:14:59,820
object number<font color="#E5E5E5"> two is of the type page</font>

275
00:14:54,930 --> 00:15:04,229
root which<font color="#CCCCCC"> is great so going</font><font color="#E5E5E5"> back</font><font color="#CCCCCC"> again</font>

276
00:14:59,820 --> 00:15:06,750
<font color="#CCCCCC">to</font><font color="#E5E5E5"> the previous</font><font color="#CCCCCC"> 17</font><font color="#E5E5E5"> page documents what</font>

277
00:15:04,230 --> 00:15:11,070
did we<font color="#E5E5E5"> find</font><font color="#CCCCCC"> with the type checking</font><font color="#E5E5E5"> so</font>

278
00:15:06,750 --> 00:15:13,890
here we<font color="#E5E5E5"> can see 17 blocks which are like</font>

279
00:15:11,070 --> 00:15:17,790
which which have a page at the<font color="#E5E5E5"> centre in</font>

280
00:15:13,890 --> 00:15:20,520
red and a lot of yellow objects around

281
00:15:17,790 --> 00:15:24,329
it<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> these objects represent like</font>

282
00:15:20,520 --> 00:15:28,010
<font color="#E5E5E5">arrows that scan hello to navigate in</font>

283
00:15:24,330 --> 00:15:32,850
<font color="#E5E5E5">the document I show it here on the right</font>

284
00:15:28,010 --> 00:15:33,630
bottom corner<font color="#E5E5E5"> then all the blue packets</font>

285
00:15:32,850 --> 00:15:36,720
will

286
00:15:33,630 --> 00:15:39,150
each font in the<font color="#E5E5E5"> document each object</font>

287
00:15:36,720 --> 00:15:43,350
<font color="#E5E5E5">will represent one belief in the in the</font>

288
00:15:39,150 --> 00:15:46,260
<font color="#CCCCCC">document or</font><font color="#E5E5E5"> one letter</font><font color="#CCCCCC"> and on the right</font>

289
00:15:43,350 --> 00:15:48,300
<font color="#E5E5E5">hand side we can see the outline of the</font>

290
00:15:46,260 --> 00:15:54,750
documents or the<font color="#E5E5E5"> table of contents and</font>

291
00:15:48,300 --> 00:15:58,439
<font color="#E5E5E5">we</font><font color="#CCCCCC"> can see this tree structure so then</font>

292
00:15:54,750 --> 00:16:01,460
once we have type and<font color="#E5E5E5"> shirt and type</font>

293
00:15:58,440 --> 00:16:04,380
check the document we can<font color="#E5E5E5"> perform</font>

294
00:16:01,460 --> 00:16:06,390
<font color="#E5E5E5">verification at a higher level</font><font color="#CCCCCC"> so we</font><font color="#E5E5E5"> can</font>

295
00:16:04,380 --> 00:16:09,420
verify that<font color="#CCCCCC"> the tree structure</font><font color="#E5E5E5"> are</font>

296
00:16:06,390 --> 00:16:13,080
correct<font color="#E5E5E5"> so the page tree is a tree the</font>

297
00:16:09,420 --> 00:16:16,380
outline is also correct<font color="#CCCCCC"> and then we can</font>

298
00:16:13,080 --> 00:16:19,140
easily<font color="#E5E5E5"> integrate other</font><font color="#CCCCCC"> verification in</font>

299
00:16:16,380 --> 00:16:21,060
the future<font color="#E5E5E5"> so we</font><font color="#CCCCCC"> can extract all</font><font color="#E5E5E5"> font</font>

300
00:16:19,140 --> 00:16:24,660
object and then check that<font color="#E5E5E5"> they are</font>

301
00:16:21,060 --> 00:16:27,180
<font color="#E5E5E5">confirm to their specification or images</font>

302
00:16:24,660 --> 00:16:31,650
or include existing<font color="#E5E5E5"> analysis on</font>

303
00:16:27,180 --> 00:16:34,920
JavaScript<font color="#E5E5E5"> because contrary</font><font color="#CCCCCC"> to previous</font>

304
00:16:31,650 --> 00:16:38,400
<font color="#E5E5E5">rot we are really sure of all the</font>

305
00:16:34,920 --> 00:16:42,449
objects in<font color="#CCCCCC"> the document we don't just</font>

306
00:16:38,400 --> 00:16:45,840
check this particular path<font color="#E5E5E5"> and maybe</font>

307
00:16:42,450 --> 00:16:50,850
miss some some<font color="#E5E5E5"> places where JavaScript</font>

308
00:16:45,840 --> 00:16:55,170
could<font color="#E5E5E5"> be present</font><font color="#CCCCCC"> so how does</font><font color="#E5E5E5"> it apply to</font>

309
00:16:50,850 --> 00:16:58,920
<font color="#CCCCCC">real-world files</font><font color="#E5E5E5"> so we did our</font>

310
00:16:55,170 --> 00:17:01,949
implementation in<font color="#E5E5E5"> oak ml with the PDF</font>

311
00:16:58,920 --> 00:17:04,680
specification<font color="#E5E5E5"> because as I said in</font>

312
00:17:01,950 --> 00:17:06,990
previous parcels<font color="#E5E5E5"> there was there wasn't</font>

313
00:17:04,680 --> 00:17:10,170
any<font color="#E5E5E5"> grammar formalization so we started</font>

314
00:17:06,990 --> 00:17:12,930
from scratch<font color="#E5E5E5"> and so what did the what</font>

315
00:17:10,170 --> 00:17:15,959
did we implement so from the PDF<font color="#E5E5E5"> file</font><font color="#CCCCCC"> we</font>

316
00:17:12,930 --> 00:17:19,350
implemented a strict processor that is

317
00:17:15,959 --> 00:17:21,480
<font color="#CCCCCC">the translation of Orgrimmar</font><font color="#E5E5E5"> but also a</font>

318
00:17:19,349 --> 00:17:24,629
relaxed posture<font color="#E5E5E5"> and I will come again to</font>

319
00:17:21,480 --> 00:17:28,079
it in<font color="#E5E5E5"> order to</font><font color="#CCCCCC"> normalize</font><font color="#E5E5E5"> existing files</font>

320
00:17:24,630 --> 00:17:32,040
so<font color="#CCCCCC"> that they can be accepted</font><font color="#E5E5E5"> but by the</font>

321
00:17:28,079 --> 00:17:35,730
strict parser then these parcels<font color="#E5E5E5"> gives</font>

322
00:17:32,040 --> 00:17:38,070
us the list of<font color="#CCCCCC"> object so we can output</font>

323
00:17:35,730 --> 00:17:40,890
<font color="#CCCCCC">the</font><font color="#E5E5E5"> graph of reference or extract</font>

324
00:17:38,070 --> 00:17:44,429
specific<font color="#E5E5E5"> object the user can kind of</font>

325
00:17:40,890 --> 00:17:45,330
<font color="#E5E5E5">access</font><font color="#CCCCCC"> to it and then we go on to</font><font color="#E5E5E5"> the</font>

326
00:17:44,430 --> 00:17:47,190
type checking

327
00:17:45,330 --> 00:17:49,439
so again

328
00:17:47,190 --> 00:17:53,490
we can extract<font color="#CCCCCC"> the list of insured types</font>

329
00:17:49,440 --> 00:17:56,520
<font color="#E5E5E5">for further analysis</font><font color="#CCCCCC"> then the graph</font>

330
00:17:53,490 --> 00:18:00,020
checking and ultimately we<font color="#E5E5E5"> checked that</font>

331
00:17:56,520 --> 00:18:04,379
the file<font color="#CCCCCC"> is correct</font>

332
00:18:00,020 --> 00:18:07,260
so how did<font color="#CCCCCC"> we</font><font color="#E5E5E5"> test it we collected</font>

333
00:18:04,380 --> 00:18:11,640
<font color="#E5E5E5">10,000 files from random queries on a</font>

334
00:18:07,260 --> 00:18:15,450
web search on<font color="#E5E5E5"> giant and you know we</font>

335
00:18:11,640 --> 00:18:18,000
tried our verification<font color="#CCCCCC"> solution</font><font color="#E5E5E5"> on them</font>

336
00:18:15,450 --> 00:18:22,650
so we can<font color="#E5E5E5"> see that already some files</font>

337
00:18:18,000 --> 00:18:24,510
directly accepted so<font color="#CCCCCC"> 14% but were</font>

338
00:18:22,650 --> 00:18:31,230
<font color="#E5E5E5">quickly passed with the strict processor</font>

339
00:18:24,510 --> 00:18:34,680
and a<font color="#CCCCCC"> 5% had no error on the</font><font color="#E5E5E5"> thing that</font>

340
00:18:31,230 --> 00:18:36,570
we checked<font color="#E5E5E5"> but we can see that</font><font color="#CCCCCC"> the</font>

341
00:18:34,680 --> 00:18:39,630
<font color="#E5E5E5">bottleneck is that was at the first</font>

342
00:18:36,570 --> 00:18:43,020
<font color="#E5E5E5">stage because many files did not pass</font>

343
00:18:39,630 --> 00:18:46,530
the strict browser<font color="#E5E5E5"> so we thought about</font>

344
00:18:43,020 --> 00:18:49,379
<font color="#E5E5E5">normalizing them and that's why we</font>

345
00:18:46,530 --> 00:18:51,450
implemented the relaxed parser<font color="#E5E5E5"> that</font><font color="#CCCCCC"> she</font>

346
00:18:49,380 --> 00:18:53,430
brought the common<font color="#E5E5E5"> structures</font><font color="#CCCCCC"> phone in</font>

347
00:18:51,450 --> 00:18:55,770
the wild so<font color="#E5E5E5"> incremental updates</font>

348
00:18:53,430 --> 00:18:58,590
<font color="#E5E5E5">objection</font><font color="#CCCCCC"> all of these are really</font>

349
00:18:55,770 --> 00:19:02,730
<font color="#E5E5E5">present in the wild so we</font><font color="#CCCCCC"> needed to</font>

350
00:18:58,590 --> 00:19:05,490
<font color="#E5E5E5">normalize</font><font color="#CCCCCC"> it so</font><font color="#E5E5E5"> here we have the relaxed</font>

351
00:19:02,730 --> 00:19:07,980
<font color="#CCCCCC">browser that's extract all</font><font color="#E5E5E5"> the objects</font>

352
00:19:05,490 --> 00:19:10,710
<font color="#E5E5E5">and then we have also a further cleaning</font>

353
00:19:07,980 --> 00:19:12,570
step where<font color="#CCCCCC"> we remove all</font><font color="#E5E5E5"> the unused</font>

354
00:19:10,710 --> 00:19:15,480
<font color="#E5E5E5">object the objects that are not</font>

355
00:19:12,570 --> 00:19:18,689
<font color="#E5E5E5">referenced so in the case of incremental</font>

356
00:19:15,480 --> 00:19:21,570
updates we could have deleted some of

357
00:19:18,690 --> 00:19:26,070
them so we<font color="#CCCCCC"> just removed them so that the</font>

358
00:19:21,570 --> 00:19:29,399
file is cleaner and then we can write

359
00:19:26,070 --> 00:19:32,669
the normalized file<font color="#E5E5E5"> so some file were</font>

360
00:19:29,400 --> 00:19:36,780
not normalized<font color="#E5E5E5"> because some of them were</font>

361
00:19:32,670 --> 00:19:40,010
encrypted and some of them also<font color="#E5E5E5"> had or</font>

362
00:19:36,780 --> 00:19:43,110
<font color="#E5E5E5">was their syntax errors that were</font>

363
00:19:40,010 --> 00:19:45,870
naturally present in the<font color="#E5E5E5"> spec so we did</font>

364
00:19:43,110 --> 00:19:47,510
we chose not to normalize<font color="#CCCCCC"> everything at</font>

365
00:19:45,870 --> 00:19:52,340
<font color="#E5E5E5">all costs</font>

366
00:19:47,510 --> 00:19:55,530
so after this<font color="#E5E5E5"> normalization step we also</font>

367
00:19:52,340 --> 00:19:58,290
run our tool chain

368
00:19:55,530 --> 00:20:00,940
so here the strict<font color="#E5E5E5"> parser accepted all</font>

369
00:19:58,290 --> 00:20:04,050
the<font color="#E5E5E5"> normalized trial which is good</font>

370
00:20:00,940 --> 00:20:07,990
and then after type-checking<font color="#CCCCCC"> we saw that</font>

371
00:20:04,050 --> 00:20:11,760
<font color="#E5E5E5">14% of the documents were fully type</font>

372
00:20:07,990 --> 00:20:16,440
checked so we increased<font color="#E5E5E5"> it by trifle</font>

373
00:20:11,760 --> 00:20:22,480
compared to the direct<font color="#E5E5E5"> verification and</font>

374
00:20:16,440 --> 00:20:24,580
about<font color="#E5E5E5"> 14%</font><font color="#CCCCCC"> also had type errors</font><font color="#E5E5E5"> and what</font>

375
00:20:22,480 --> 00:20:27,700
is in the<font color="#E5E5E5"> middle well we didn't</font>

376
00:20:24,580 --> 00:20:29,470
<font color="#CCCCCC">implement all of</font><font color="#E5E5E5"> the types that</font><font color="#CCCCCC"> could be</font>

377
00:20:27,700 --> 00:20:33,700
<font color="#E5E5E5">present in PDF file because</font><font color="#CCCCCC"> the</font>

378
00:20:29,470 --> 00:20:36,280
<font color="#E5E5E5">specification is like</font><font color="#CCCCCC"> 500 pages document</font>

379
00:20:33,700 --> 00:20:40,540
service<font color="#E5E5E5"> we try to</font><font color="#CCCCCC"> to start</font><font color="#E5E5E5"> with the most</font>

380
00:20:36,280 --> 00:20:46,149
<font color="#E5E5E5">common</font><font color="#CCCCCC"> types and then we can in the</font>

381
00:20:40,540 --> 00:20:50,110
<font color="#CCCCCC">future add new types what is interesting</font>

382
00:20:46,150 --> 00:20:51,910
is that our type checker detected typos

383
00:20:50,110 --> 00:20:56,070
<font color="#CCCCCC">that are present in real world and</font><font color="#E5E5E5"> that</font>

384
00:20:51,910 --> 00:20:59,170
were undetected before so for example

385
00:20:56,070 --> 00:21:01,629
normally<font color="#E5E5E5"> there is this one field that</font><font color="#CCCCCC"> is</font>

386
00:20:59,170 --> 00:21:05,530
supposed to<font color="#E5E5E5"> be black</font><font color="#CCCCCC"> is one with an</font>

387
00:21:01,630 --> 00:21:09,490
uppercase<font color="#CCCCCC"> I and some PDF producer just</font>

388
00:21:05,530 --> 00:21:13,330
so a lowercase L and wrote black LS<font color="#CCCCCC"> one</font>

389
00:21:09,490 --> 00:21:17,020
and no<font color="#E5E5E5"> one noticed that because you know</font>

390
00:21:13,330 --> 00:21:21,399
<font color="#E5E5E5">parsers are allowed to to to correct</font>

391
00:21:17,020 --> 00:21:23,350
<font color="#E5E5E5">files silently also some there</font><font color="#CCCCCC"> was the</font>

392
00:21:21,400 --> 00:21:27,840
<font color="#E5E5E5">typo instead of X object</font>

393
00:21:23,350 --> 00:21:31,240
<font color="#E5E5E5">there was</font><font color="#CCCCCC"> x subject so with a C inserted</font>

394
00:21:27,840 --> 00:21:34,439
so that's that<font color="#E5E5E5"> is good</font><font color="#CCCCCC"> to detect that</font>

395
00:21:31,240 --> 00:21:37,150
and then at the graph level we also

396
00:21:34,440 --> 00:21:40,810
identified incorrect<font color="#E5E5E5"> tree structures so</font>

397
00:21:37,150 --> 00:21:43,660
<font color="#CCCCCC">that had loops or something like</font><font color="#E5E5E5"> that so</font>

398
00:21:40,810 --> 00:21:46,570
what remains to be done<font color="#CCCCCC"> in the future so</font>

399
00:21:43,660 --> 00:21:50,710
the first thing to<font color="#CCCCCC"> do is to complete the</font>

400
00:21:46,570 --> 00:21:54,129
set of types so<font color="#CCCCCC"> that we can accept more</font>

401
00:21:50,710 --> 00:21:58,000
and more files and be realistic<font color="#CCCCCC"> for</font>

402
00:21:54,130 --> 00:22:00,460
<font color="#E5E5E5">deployment there's also the I didn't</font>

403
00:21:58,000 --> 00:22:03,490
mention<font color="#E5E5E5"> the compression filters but</font>

404
00:22:00,460 --> 00:22:07,450
there are a<font color="#E5E5E5"> lot of algorithm possible to</font>

405
00:22:03,490 --> 00:22:10,810
compress content and we kind<font color="#E5E5E5"> of we</font><font color="#CCCCCC"> have</font>

406
00:22:07,450 --> 00:22:12,850
to check<font color="#CCCCCC"> that</font><font color="#E5E5E5"> these compression filters</font>

407
00:22:10,810 --> 00:22:16,149
are correctly

408
00:22:12,850 --> 00:22:19,209
<font color="#E5E5E5">implemented</font><font color="#CCCCCC"> then the graphical</font><font color="#E5E5E5"> content</font>

409
00:22:16,150 --> 00:22:21,850
so I didn't motion that that<font color="#E5E5E5"> the</font>

410
00:22:19,210 --> 00:22:23,950
graphical<font color="#CCCCCC"> control</font><font color="#E5E5E5"> is basically vector</font>

411
00:22:21,850 --> 00:22:27,189
graphic content so you have a bunch<font color="#CCCCCC"> of</font>

412
00:22:23,950 --> 00:22:29,620
comments<font color="#E5E5E5"> that say</font><font color="#CCCCCC"> okay goes to</font><font color="#E5E5E5"> this</font>

413
00:22:27,190 --> 00:22:33,880
<font color="#CCCCCC">position right text that's wrap so it's</font>

414
00:22:29,620 --> 00:22:35,739
also another grammar and we could<font color="#E5E5E5"> we</font>

415
00:22:33,880 --> 00:22:38,080
<font color="#CCCCCC">could</font><font color="#E5E5E5"> check</font><font color="#CCCCCC"> that in the future and then</font>

416
00:22:35,740 --> 00:22:40,630
we could check the images phones<font color="#E5E5E5"> but</font>

417
00:22:38,080 --> 00:22:43,000
that are kind of<font color="#CCCCCC"> external to the PDF</font>

418
00:22:40,630 --> 00:22:46,990
format<font color="#E5E5E5"> but which are included in it</font>

419
00:22:43,000 --> 00:22:49,750
so to summarize our contribution first

420
00:22:46,990 --> 00:22:53,380
we identify novel issues in PDF process

421
00:22:49,750 --> 00:22:55,720
and<font color="#CCCCCC"> there's more</font><font color="#E5E5E5"> in our paper second we</font>

422
00:22:53,380 --> 00:22:58,450
<font color="#CCCCCC">propose and formalized</font><font color="#E5E5E5"> simplified syntax</font>

423
00:22:55,720 --> 00:23:01,570
for<font color="#E5E5E5"> PDF and the last we implemented</font>

424
00:22:58,450 --> 00:23:03,760
<font color="#CCCCCC">Caradog</font><font color="#E5E5E5"> to pass and validate</font><font color="#CCCCCC"> pf5 so we</font>

425
00:23:01,570 --> 00:23:06,820
have a data<font color="#E5E5E5"> page and we are happy to</font>

426
00:23:03,760 --> 00:23:10,360
take<font color="#E5E5E5"> poor requests and issues and</font>

427
00:23:06,820 --> 00:23:13,050
contributions so that's all I have I'm

428
00:23:10,360 --> 00:23:13,050
happy to take questions

429
00:23:21,560 --> 00:23:44,850
<font color="#E5E5E5">yeah yeah yeah that's true so I looked</font>

430
00:23:42,090 --> 00:23:50,820
at that<font color="#E5E5E5"> actually they just implemented a</font>

431
00:23:44,850 --> 00:23:54,209
very<font color="#CCCCCC"> basic implementation of this parser</font>

432
00:23:50,820 --> 00:23:56,909
and they are<font color="#CCCCCC"> point-wise</font><font color="#E5E5E5"> with the</font>

433
00:23:54,210 --> 00:24:00,450
<font color="#E5E5E5">incremental updates you can have a loop</font>

434
00:23:56,910 --> 00:24:02,940
<font color="#CCCCCC">actually so the each it's a reference</font>

435
00:24:00,450 --> 00:24:05,520
<font color="#E5E5E5">table which refer will reference the</font>

436
00:24:02,940 --> 00:24:10,050
other one as the previous one<font color="#E5E5E5"> and then</font>

437
00:24:05,520 --> 00:24:16,110
the unless loop<font color="#E5E5E5"> will will make the</font>

438
00:24:10,050 --> 00:24:19,440
<font color="#E5E5E5">parser crash</font><font color="#CCCCCC"> so in our case we try</font><font color="#E5E5E5"> to to</font>

439
00:24:16,110 --> 00:24:23,000
go a<font color="#CCCCCC"> bit a</font><font color="#E5E5E5"> bit further down</font><font color="#CCCCCC"> their walk</font>

440
00:24:19,440 --> 00:24:25,830
which was very basic<font color="#E5E5E5"> on that and we also</font>

441
00:24:23,000 --> 00:24:29,640
decided to discard incremental updates

442
00:24:25,830 --> 00:24:31,770
<font color="#E5E5E5">and</font><font color="#CCCCCC"> oh</font><font color="#E5E5E5"> because we</font><font color="#CCCCCC"> hope</font><font color="#E5E5E5"> that it was a bit</font>

443
00:24:29,640 --> 00:24:36,620
too complex to pass<font color="#CCCCCC"> and</font><font color="#E5E5E5"> actually they're</font>

444
00:24:31,770 --> 00:24:36,620
called<font color="#E5E5E5"> parser was quite long as they say</font>

445
00:25:01,260 --> 00:25:25,300
no because<font color="#E5E5E5"> it was a bit further at</font><font color="#CCCCCC"> her</font>

446
00:25:06,520 --> 00:25:28,120
<font color="#CCCCCC">i/o level</font><font color="#E5E5E5"> of the passing stage yeah yeah</font>

447
00:25:25,300 --> 00:25:33,010
so actually<font color="#E5E5E5"> we didn't really analyze</font>

448
00:25:28,120 --> 00:25:36,010
that<font color="#E5E5E5"> further but most PDF producer</font>

449
00:25:33,010 --> 00:25:38,800
<font color="#E5E5E5">included in the metadata which version</font>

450
00:25:36,010 --> 00:25:41,710
<font color="#E5E5E5">of the software</font><font color="#CCCCCC"> it is</font><font color="#E5E5E5"> and if I go</font><font color="#CCCCCC"> back</font>

451
00:25:38,800 --> 00:25:44,770
to<font color="#E5E5E5"> this kind of typos we can actually</font>

452
00:25:41,710 --> 00:25:47,650
<font color="#E5E5E5">identify that this came from the same</font>

453
00:25:44,770 --> 00:25:50,740
producer so yeah<font color="#E5E5E5"> it will be it would</font><font color="#CCCCCC"> be</font>

454
00:25:47,650 --> 00:25:53,710
an<font color="#E5E5E5"> interesting future rod to analyze</font>

455
00:25:50,740 --> 00:25:56,460
which processor which a producer behaves

456
00:25:53,710 --> 00:25:56,460
in which way

