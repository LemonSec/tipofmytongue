1
00:00:02,090 --> 00:00:15,780
<font color="#E5E5E5">okay yes yeah all right thank</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> okay</font>

2
00:00:09,030 --> 00:00:17,910
so to give<font color="#CCCCCC"> you a really quick recap the</font>

3
00:00:15,780 --> 00:00:19,919
hammer parser Combinator library for

4
00:00:17,910 --> 00:00:26,250
those of you who have not ever seen it

5
00:00:19,920 --> 00:00:28,500
is a<font color="#CCCCCC"> library meant to well bring bring</font>

6
00:00:26,250 --> 00:00:30,509
more grammatical parser specification

7
00:00:28,500 --> 00:00:33,690
into the world of C so this what you see

8
00:00:30,510 --> 00:00:35,550
here is a few<font color="#CCCCCC"> examples we have print or</font>

9
00:00:33,690 --> 00:00:39,149
primitive parsers that are then combined

10
00:00:35,550 --> 00:00:41,489
by higher level<font color="#CCCCCC"> Combinator's into more</font>

11
00:00:39,149 --> 00:00:44,239
complex structures<font color="#CCCCCC"> and you can also</font>

12
00:00:41,489 --> 00:00:49,530
define your own<font color="#CCCCCC"> combinators using those</font>

13
00:00:44,239 --> 00:00:52,890
and by<font color="#E5E5E5"> that we hopefully will arrive</font><font color="#CCCCCC"> at</font>

14
00:00:49,530 --> 00:00:55,110
a specification for our protocol which

15
00:00:52,890 --> 00:01:00,390
is at<font color="#CCCCCC"> the same</font><font color="#E5E5E5"> time kind of a grammar</font>

16
00:00:55,110 --> 00:01:02,309
and also its implementation so to give

17
00:01:00,390 --> 00:01:05,549
<font color="#CCCCCC">you a</font><font color="#E5E5E5"> little spoiler where this is going</font>

18
00:01:02,309 --> 00:01:08,009
to go this<font color="#E5E5E5"> is a circus favorite mantra I</font>

19
00:01:05,549 --> 00:01:13,290
think start with a grammar stay with a

20
00:01:08,010 --> 00:01:16,110
grammar now that's what we're hoping a

21
00:01:13,290 --> 00:01:17,549
hammer lets us do but the question of

22
00:01:16,110 --> 00:01:20,430
course<font color="#E5E5E5"> is what is that Graham are</font>

23
00:01:17,549 --> 00:01:24,210
actually for protocol like dnp3 there's

24
00:01:20,430 --> 00:01:26,580
a very<font color="#CCCCCC"> large specification but it does</font>

25
00:01:24,210 --> 00:01:28,820
not contain<font color="#E5E5E5"> a</font><font color="#CCCCCC"> dnf for something we've</font>

26
00:01:26,580 --> 00:01:31,789
already heard a lot of talks about

27
00:01:28,820 --> 00:01:34,559
trying to derive grammars and that's

28
00:01:31,790 --> 00:01:39,900
something that we did here<font color="#E5E5E5"> basically by</font>

29
00:01:34,560 --> 00:01:41,790
hand and it's the interesting lesson

30
00:01:39,900 --> 00:01:44,549
here is if you look at<font color="#CCCCCC"> the beginning</font><font color="#E5E5E5"> of</font>

31
00:01:41,790 --> 00:01:46,079
the specification<font color="#CCCCCC"> you don't have to be</font>

32
00:01:44,549 --> 00:01:49,939
able to read those very small text there

33
00:01:46,079 --> 00:01:53,189
obviously<font color="#E5E5E5"> this is an overview picture of</font>

34
00:01:49,939 --> 00:01:55,770
the d mp3 protocol layers it has a lower

35
00:01:53,189 --> 00:01:57,479
link layer transport layer and an

36
00:01:55,770 --> 00:01:59,520
application<font color="#CCCCCC"> layer at the top so that's</font>

37
00:01:57,479 --> 00:02:02,179
basically kind of mirroring the

38
00:01:59,520 --> 00:02:04,380
situation you'll have it on the<font color="#CCCCCC"> Internet</font>

39
00:02:02,180 --> 00:02:06,450
but this<font color="#E5E5E5"> is meant to run over modem</font>

40
00:02:04,380 --> 00:02:09,598
lines and such as well so it has all

41
00:02:06,450 --> 00:02:11,310
these three layers and if you if we

42
00:02:09,598 --> 00:02:13,890
concentrate on the application layer

43
00:02:11,310 --> 00:02:15,510
here you'll see that

44
00:02:13,890 --> 00:02:18,420
still looks pretty neat this is still

45
00:02:15,510 --> 00:02:21,899
from<font color="#CCCCCC"> the first pages of the spec and</font>

46
00:02:18,420 --> 00:02:24,869
this is this is a kind<font color="#E5E5E5"> of regular</font>

47
00:02:21,900 --> 00:02:26,459
expression representation of this

48
00:02:24,870 --> 00:02:31,310
structure of<font color="#E5E5E5"> this application layer</font>

49
00:02:26,459 --> 00:02:33,750
fragment as they call it<font color="#CCCCCC"> a packet which</font>

50
00:02:31,310 --> 00:02:36,780
consists of a header and that's followed

51
00:02:33,750 --> 00:02:38,820
by an arbitrary<font color="#CCCCCC"> number of objects blocks</font>

52
00:02:36,780 --> 00:02:40,880
so to speak and<font color="#E5E5E5"> each object block</font>

53
00:02:38,820 --> 00:02:43,350
contains another object header which

54
00:02:40,880 --> 00:02:47,160
specifies the type of objects basically

55
00:02:43,350 --> 00:02:49,799
and then<font color="#CCCCCC"> the object data itself those</font>

56
00:02:47,160 --> 00:02:53,040
can be multiple as well the stuff below

57
00:02:49,800 --> 00:02:56,670
here is then the detailed structure of

58
00:02:53,040 --> 00:02:59,400
well the header as well as the object so

59
00:02:56,670 --> 00:03:00,958
you'll see there are several fields you

60
00:02:59,400 --> 00:03:04,350
don't<font color="#E5E5E5"> obviously need</font><font color="#CCCCCC"> to know the details</font>

61
00:03:00,959 --> 00:03:06,600
of those but it's it's relatively easy

62
00:03:04,350 --> 00:03:09,600
to explain the structure and write down

63
00:03:06,600 --> 00:03:14,930
<font color="#E5E5E5">a regular expression</font><font color="#CCCCCC"> that fits it but</font>

64
00:03:09,600 --> 00:03:17,400
the problem<font color="#CCCCCC"> is that fails to capture the</font>

65
00:03:14,930 --> 00:03:19,829
dependencies and constraints that<font color="#E5E5E5"> exist</font>

66
00:03:17,400 --> 00:03:21,989
between<font color="#E5E5E5"> the flags in the header of</font><font color="#CCCCCC"> the</font>

67
00:03:19,829 --> 00:03:25,230
particular function being involved being

68
00:03:21,989 --> 00:03:27,930
<font color="#E5E5E5">invoked and the function and the groups</font>

69
00:03:25,230 --> 00:03:29,820
and are the types i should say group

70
00:03:27,930 --> 00:03:32,430
variation is<font color="#E5E5E5"> the DMP three-term the</font>

71
00:03:29,820 --> 00:03:35,040
types of the objects<font color="#CCCCCC"> that are expected</font>

72
00:03:32,430 --> 00:03:38,280
or allowed with that function and then

73
00:03:35,040 --> 00:03:41,010
also a bunch<font color="#E5E5E5"> of more particular fields</font>

74
00:03:38,280 --> 00:03:43,190
in that in that header so these<font color="#E5E5E5"> are</font>

75
00:03:41,010 --> 00:03:47,959
things that we had to somehow capture

76
00:03:43,190 --> 00:03:51,510
and yeah if you want to<font color="#CCCCCC"> look at the spec</font>

77
00:03:47,959 --> 00:03:55,799
for this information<font color="#E5E5E5"> you'll find a lot</font>

78
00:03:51,510 --> 00:03:58,590
<font color="#CCCCCC">of tables and descriptions</font><font color="#E5E5E5"> this is a</font>

79
00:03:55,799 --> 00:04:00,570
slide of a<font color="#E5E5E5"> screenshot of a slide that we</font>

80
00:03:58,590 --> 00:04:04,170
had in the talk where we presented this

81
00:04:00,570 --> 00:04:07,549
this year at s4 to the industrial

82
00:04:04,170 --> 00:04:10,380
control system community so to speak and

83
00:04:07,549 --> 00:04:13,590
yeah there's these tables<font color="#E5E5E5"> that that show</font>

84
00:04:10,380 --> 00:04:16,260
valid combinations of flags and here you

85
00:04:13,590 --> 00:04:19,289
see a little<font color="#E5E5E5"> bit of a text snippet out</font>

86
00:04:16,260 --> 00:04:22,530
of the semantics or a description of

87
00:04:19,289 --> 00:04:25,530
some function and if I blow that<font color="#E5E5E5"> zip it</font>

88
00:04:22,530 --> 00:04:27,299
up sorry I'll read that red part to you

89
00:04:25,530 --> 00:04:29,099
it says this is

90
00:04:27,300 --> 00:04:30,960
about a<font color="#E5E5E5"> certain type of object says read</font>

91
00:04:29,099 --> 00:04:34,319
requests and responses shall use

92
00:04:30,960 --> 00:04:37,080
qualifier code<font color="#CCCCCC"> 7 and range field value</font>

93
00:04:34,319 --> 00:04:39,389
of one for<font color="#E5E5E5"> this object this object can</font>

94
00:04:37,080 --> 00:04:42,568
be<font color="#E5E5E5"> included in a write</font><font color="#CCCCCC"> request so this</font>

95
00:04:39,389 --> 00:04:45,210
is<font color="#E5E5E5"> clearly actually syntactic</font>

96
00:04:42,569 --> 00:04:47,159
information this is the types of codes

97
00:04:45,210 --> 00:04:50,219
and flags you're supposed to use with

98
00:04:47,159 --> 00:04:52,469
this object type and the type of

99
00:04:50,220 --> 00:04:57,599
function that<font color="#E5E5E5"> you're allowed to use this</font>

100
00:04:52,470 --> 00:05:00,300
with but if you talk to dnp3 users

101
00:04:57,599 --> 00:05:01,919
they'll tell you well yes that's but

102
00:05:00,300 --> 00:05:03,599
that's semantics right that's in the

103
00:05:01,919 --> 00:05:05,669
semantics of the thing<font color="#E5E5E5"> because it's in</font>

104
00:05:03,599 --> 00:05:07,710
the<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the pros description of the spec</font>

105
00:05:05,669 --> 00:05:11,990
but in our view this is not actually

106
00:05:07,710 --> 00:05:16,289
semantics so our job is<font color="#CCCCCC"> to find the</font><font color="#E5E5E5"> true</font>

107
00:05:11,990 --> 00:05:20,310
syntax of this protocol here's<font color="#CCCCCC"> another</font>

108
00:05:16,289 --> 00:05:23,340
example where you have a structure

109
00:05:20,310 --> 00:05:28,139
that's for basically timestamps on

110
00:05:23,340 --> 00:05:30,719
events and to save bits on the<font color="#E5E5E5"> wire they</font>

111
00:05:28,139 --> 00:05:33,150
allow you<font color="#E5E5E5"> to specify these relative to</font>

112
00:05:30,719 --> 00:05:37,529
some common time of occurrence that's

113
00:05:33,150 --> 00:05:39,750
what the term is<font color="#E5E5E5"> and there's an obvious</font>

114
00:05:37,529 --> 00:05:42,449
constraint here if you don't<font color="#E5E5E5"> have a</font>

115
00:05:39,750 --> 00:05:44,580
common reference point you can't have

116
00:05:42,449 --> 00:05:47,009
relative time stamps but<font color="#E5E5E5"> the spec</font>

117
00:05:44,580 --> 00:05:48,750
actually never says this<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> reality</font>

118
00:05:47,009 --> 00:05:51,630
<font color="#CCCCCC">is that different implementations will</font>

119
00:05:48,750 --> 00:05:53,909
behave differently if this this common

120
00:05:51,630 --> 00:05:58,169
time of occurrence object is left out of

121
00:05:53,909 --> 00:06:00,629
<font color="#E5E5E5">the packet so you have instances where</font>

122
00:05:58,169 --> 00:06:04,258
the where the complexity of the language

123
00:06:00,629 --> 00:06:06,990
is kind of shifted out of the syntax

124
00:06:04,259 --> 00:06:09,750
into into<font color="#E5E5E5"> the pros description and you</font>

125
00:06:06,990 --> 00:06:14,389
have cases where it's<font color="#CCCCCC"> actually just not</font>

126
00:06:09,750 --> 00:06:19,800
there in the description anywhere yeah

127
00:06:14,389 --> 00:06:21,840
yeah yeah<font color="#CCCCCC"> okay um here to give you an</font>

128
00:06:19,800 --> 00:06:25,379
example of<font color="#E5E5E5"> what this looks like in our</font>

129
00:06:21,840 --> 00:06:28,619
code the top part is just<font color="#E5E5E5"> short names</font>

130
00:06:25,379 --> 00:06:31,620
for the<font color="#E5E5E5"> stuff stuff that was defined</font>

131
00:06:28,620 --> 00:06:33,900
<font color="#E5E5E5">elsewhere the interesting part is here</font>

132
00:06:31,620 --> 00:06:35,610
in the<font color="#E5E5E5"> middle you</font><font color="#CCCCCC"> can see a</font><font color="#E5E5E5"> 2</font>

133
00:06:33,900 --> 00:06:37,500
Combinator's use choice and sequence

134
00:06:35,610 --> 00:06:39,100
sequencing is just you know two things

135
00:06:37,500 --> 00:06:41,950
after another

136
00:06:39,100 --> 00:06:43,870
the interesting part<font color="#E5E5E5"> is there's a this</font>

137
00:06:41,950 --> 00:06:46,990
is for the<font color="#E5E5E5"> Select function that selects</font>

138
00:06:43,870 --> 00:06:50,230
a relay<font color="#E5E5E5"> to be switched or something like</font>

139
00:06:46,990 --> 00:06:53,230
that it's a you can see it<font color="#E5E5E5"> has three</font>

140
00:06:50,230 --> 00:06:55,720
possible forms of first one is a

141
00:06:53,230 --> 00:06:58,470
sequence of something called a<font color="#CCCCCC"> PC be</font>

142
00:06:55,720 --> 00:07:01,900
followed by multiple things called a PCM

143
00:06:58,470 --> 00:07:03,910
the third one is a thing<font color="#CCCCCC"> called</font><font color="#E5E5E5"> krob</font>

144
00:07:01,900 --> 00:07:09,070
that's a control relay object blog or

145
00:07:03,910 --> 00:07:10,570
<font color="#CCCCCC">something oh yeah yeah yeah</font><font color="#E5E5E5"> exactly</font>

146
00:07:09,070 --> 00:07:12,730
those are the data structures that say

147
00:07:10,570 --> 00:07:15,219
what<font color="#CCCCCC"> why what are you supposed to</font><font color="#E5E5E5"> do</font>

148
00:07:12,730 --> 00:07:18,640
with this relay and how often<font color="#E5E5E5"> and so on</font>

149
00:07:15,220 --> 00:07:20,350
<font color="#CCCCCC">so you have these different forms you</font>

150
00:07:18,640 --> 00:07:24,219
<font color="#CCCCCC">can specify these and then the whole</font>

151
00:07:20,350 --> 00:07:26,740
object data for the select request is

152
00:07:24,220 --> 00:07:31,080
supposed to consider<font color="#CCCCCC"> the contain consist</font>

153
00:07:26,740 --> 00:07:34,930
of many<font color="#E5E5E5"> of these blocks defined up here</font>

154
00:07:31,080 --> 00:07:37,630
the point here is we can already see

155
00:07:34,930 --> 00:07:39,190
<font color="#CCCCCC">that this is this leads us to some some</font>

156
00:07:37,630 --> 00:07:41,530
good questions about the about the

157
00:07:39,190 --> 00:07:43,180
<font color="#E5E5E5">syntax about the protocol which are also</font>

158
00:07:41,530 --> 00:07:46,030
sometimes<font color="#E5E5E5"> answered in the spec and</font>

159
00:07:43,180 --> 00:07:48,520
sometimes they aren't like is it<font color="#E5E5E5"> okay if</font>

160
00:07:46,030 --> 00:07:51,700
we have<font color="#E5E5E5"> none</font><font color="#CCCCCC"> of these things</font><font color="#E5E5E5"> in the</font>

161
00:07:48,520 --> 00:07:54,880
<font color="#CCCCCC">Select</font><font color="#E5E5E5"> request so should this actually</font>

162
00:07:51,700 --> 00:07:57,880
be M anyone Combinator or is it<font color="#E5E5E5"> or maybe</font>

163
00:07:54,880 --> 00:08:00,850
is it is the idea that you only have one

164
00:07:57,880 --> 00:08:02,890
of these<font color="#E5E5E5"> things and have individual</font>

165
00:08:00,850 --> 00:08:05,590
requests if you want to switch multiple

166
00:08:02,890 --> 00:08:07,180
relays so those<font color="#CCCCCC"> are some some good</font>

167
00:08:05,590 --> 00:08:13,510
questions that the grammatical approach

168
00:08:07,180 --> 00:08:15,850
already leads to yeah so as a very

169
00:08:13,510 --> 00:08:19,330
simple<font color="#CCCCCC"> application we built a validating</font>

170
00:08:15,850 --> 00:08:22,480
proxy for this protocol where we just

171
00:08:19,330 --> 00:08:26,800
intercept TCP stream and run it through

172
00:08:22,480 --> 00:08:30,670
run both the both directions of the

173
00:08:26,800 --> 00:08:33,159
<font color="#E5E5E5">stream through our parser and then drop</font>

174
00:08:30,670 --> 00:08:36,310
anything that that isn't valid and pass

175
00:08:33,159 --> 00:08:40,510
anything on that is and then we connect

176
00:08:36,309 --> 00:08:45,880
a fuzzer to that or something<font color="#E5E5E5"> else so</font>

177
00:08:40,510 --> 00:08:48,819
really<font color="#E5E5E5"> simple really basic app and what</font>

178
00:08:45,880 --> 00:08:50,290
we also<font color="#E5E5E5"> did for this application was to</font>

179
00:08:48,820 --> 00:08:52,270
integrate that with the system called

180
00:08:50,290 --> 00:08:55,030
elf<font color="#E5E5E5"> back</font>

181
00:08:52,270 --> 00:09:00,880
<font color="#CCCCCC">which yeah maybe you should</font><font color="#E5E5E5"> do that</font>

182
00:08:55,030 --> 00:09:04,860
intro is in process memory protection

183
00:09:00,880 --> 00:09:08,620
system enforcing the fact that some elf

184
00:09:04,860 --> 00:09:12,130
sections should only be accessing other

185
00:09:08,620 --> 00:09:14,860
sections but not others and so in our

186
00:09:12,130 --> 00:09:17,380
case for the proxy the idea was very

187
00:09:14,860 --> 00:09:20,580
simple if<font color="#E5E5E5"> you do put the craft we want</font>

188
00:09:17,380 --> 00:09:27,189
to catch it and we want to isolate

189
00:09:20,580 --> 00:09:29,400
whatever might be crash and presumably

190
00:09:27,190 --> 00:09:35,200
taken over at the a memory corruption

191
00:09:29,400 --> 00:09:38,140
from writing over the areas where Duncan

192
00:09:35,200 --> 00:09:42,760
to write and also wanted<font color="#CCCCCC"> to limit full</font>

193
00:09:38,140 --> 00:09:45,550
of the logic code from ever excessive

194
00:09:42,760 --> 00:09:49,180
parole input data because this is the

195
00:09:45,550 --> 00:09:57,130
<font color="#CCCCCC">joke</font><font color="#E5E5E5"> flow director is a UNIX kernel</font>

196
00:09:49,180 --> 00:09:59,020
<font color="#CCCCCC">patch exists for arm and x86 in the x86</font>

197
00:09:57,130 --> 00:10:03,430
prototype village<font color="#E5E5E5"> he developed</font><font color="#CCCCCC"> by julia</font>

198
00:09:59,020 --> 00:10:08,170
over there and the arm prototype was

199
00:10:03,430 --> 00:10:10,780
developed by a protector company so<font color="#CCCCCC"> we</font>

200
00:10:08,170 --> 00:10:12,459
hope that this thing takes in industrial

201
00:10:10,780 --> 00:10:15,220
computers because the proxy<font color="#E5E5E5"> that</font>

202
00:10:12,460 --> 00:10:19,300
revealed was one in industrial computer

203
00:10:15,220 --> 00:10:22,870
we wanted the industry to give us one us

204
00:10:19,300 --> 00:10:26,740
so we took ahead and pray my<font color="#E5E5E5"> already</font>

205
00:10:22,870 --> 00:10:29,620
mentioned on board so that with a

206
00:10:26,740 --> 00:10:32,860
certain that this thing was performed

207
00:10:29,620 --> 00:10:37,050
and would run<font color="#E5E5E5"> on the same hardware that</font>

208
00:10:32,860 --> 00:10:37,050
does mine<font color="#E5E5E5"> this way into substations</font>

209
00:10:39,530 --> 00:10:55,550
it's it involve humor as a part of the

210
00:10:49,140 --> 00:11:00,120
parser obviously and so you<font color="#E5E5E5"> okay fine so</font>

211
00:10:55,550 --> 00:11:02,370
one of the things that we<font color="#CCCCCC"> are some of</font>

212
00:11:00,120 --> 00:11:09,560
the challenges we faced with this<font color="#E5E5E5"> out</font>

213
00:11:02,370 --> 00:11:13,440
back system yeah again the idea<font color="#CCCCCC"> is that</font>

214
00:11:09,560 --> 00:11:17,729
we separate the parser logic precisely

215
00:11:13,440 --> 00:11:23,060
from the processing of<font color="#E5E5E5"> the of the</font>

216
00:11:17,730 --> 00:11:23,060
message some of the problems were that

217
00:11:23,420 --> 00:11:26,790
well first of all of course your

218
00:11:25,470 --> 00:11:28,980
application has<font color="#E5E5E5"> to be designed for this</font>

219
00:11:26,790 --> 00:11:34,949
kind of separation and we kind of did

220
00:11:28,980 --> 00:11:38,190
this or but yeah we can<font color="#E5E5E5"> imagine</font><font color="#CCCCCC"> that if</font>

221
00:11:34,950 --> 00:11:39,750
if you if you take a previous

222
00:11:38,190 --> 00:11:44,880
application it might be a little more

223
00:11:39,750 --> 00:11:48,060
trouble and yeah so what we found

224
00:11:44,880 --> 00:11:51,060
<font color="#E5E5E5">afterwards or yeah near the end was that</font>

225
00:11:48,060 --> 00:11:53,640
our memory allocation from that we did

226
00:11:51,060 --> 00:11:56,160
in the in the hammer library was not

227
00:11:53,640 --> 00:11:58,740
captured by elf back because it's just

228
00:11:56,160 --> 00:12:01,079
<font color="#CCCCCC">regular ml ox and elf</font><font color="#E5E5E5"> back at this point</font>

229
00:11:58,740 --> 00:12:04,950
at least doesn't support marking those

230
00:12:01,080 --> 00:12:07,350
as coming from a particular section so

231
00:12:04,950 --> 00:12:09,360
what we can do with modern systems that

232
00:12:07,350 --> 00:12:12,000
allow you to overcommit memory or that

233
00:12:09,360 --> 00:12:14,400
will overcome it to memory for you is we

234
00:12:12,000 --> 00:12:18,960
can say oh we like a very very large

235
00:12:14,400 --> 00:12:22,079
section here and just use a custom

236
00:12:18,960 --> 00:12:24,210
allocator to to pull<font color="#E5E5E5"> from that which</font>

237
00:12:22,080 --> 00:12:26,220
hammer allowed us to do very comfortably

238
00:12:24,210 --> 00:12:30,330
we just had to implement this alligator

239
00:12:26,220 --> 00:12:32,850
in the first place yeah but we also

240
00:12:30,330 --> 00:12:35,070
found that the overcommit handle of

241
00:12:32,850 --> 00:12:38,550
<font color="#CCCCCC">Linux will sometimes get in the way</font>

242
00:12:35,070 --> 00:12:45,089
<font color="#E5E5E5">because it it has an accountant an</font>

243
00:12:38,550 --> 00:12:46,500
accounting like sorry yeah counting

244
00:12:45,089 --> 00:12:48,150
system that will say oh I've already

245
00:12:46,500 --> 00:12:50,040
given<font color="#E5E5E5"> to you this much memory if you're</font>

246
00:12:48,150 --> 00:12:52,470
going<font color="#E5E5E5"> to use all that no I'm not going</font>

247
00:12:50,040 --> 00:12:53,819
to give<font color="#E5E5E5"> you more and we actually</font>

248
00:12:52,470 --> 00:12:55,020
we just want the<font color="#E5E5E5"> address space we're not</font>

249
00:12:53,820 --> 00:12:58,020
so much interested<font color="#CCCCCC"> in the memory itself</font>

250
00:12:55,020 --> 00:12:59,880
we just want address blocks so it would

251
00:12:58,020 --> 00:13:04,380
be useful if we had a different<font color="#CCCCCC"> API at</font>

252
00:12:59,880 --> 00:13:07,380
that point but yeah<font color="#CCCCCC"> alright so summing</font>

253
00:13:04,380 --> 00:13:09,870
up at the how we kind of validated this

254
00:13:07,380 --> 00:13:13,350
implement this implementation to see if

255
00:13:09,870 --> 00:13:15,810
if our approach<font color="#E5E5E5"> actually works first of</font>

256
00:13:13,350 --> 00:13:18,560
all we did lots of unit tests during the

257
00:13:15,810 --> 00:13:21,569
input during the implementation that

258
00:13:18,560 --> 00:13:24,180
also kind<font color="#E5E5E5"> of validates the lange starke</font>

259
00:13:21,570 --> 00:13:26,010
approach in there<font color="#E5E5E5"> because if if we have</font>

260
00:13:24,180 --> 00:13:29,670
a parser that<font color="#CCCCCC"> basically follows a</font>

261
00:13:26,010 --> 00:13:32,790
grammar then it naturally decomposes

262
00:13:29,670 --> 00:13:36,180
into smaller pieces that have natural

263
00:13:32,790 --> 00:13:39,270
unit tests so we<font color="#CCCCCC"> had a lot and</font><font color="#E5E5E5"> a lot of</font>

264
00:13:36,180 --> 00:13:41,520
those that got a huge coverage of the

265
00:13:39,270 --> 00:13:45,090
whole parser<font color="#E5E5E5"> and we also had some</font>

266
00:13:41,520 --> 00:13:47,819
particular tests done for common bugs on

267
00:13:45,090 --> 00:13:51,090
d mp3 that are well<font color="#E5E5E5"> basically always</font>

268
00:13:47,820 --> 00:13:55,050
<font color="#E5E5E5">happen then we did the typical</font><font color="#CCCCCC"> val grind</font>

269
00:13:51,090 --> 00:13:58,110
and also the fuzzing with the first of

270
00:13:55,050 --> 00:14:02,579
all AFL american fuzzy loop which is

271
00:13:58,110 --> 00:14:06,480
covered coverage based and also<font color="#CCCCCC"> Aegis is</font>

272
00:14:02,580 --> 00:14:08,550
the fuzzer by<font color="#E5E5E5"> adam crane that yeah he</font>

273
00:14:06,480 --> 00:14:12,810
famously used to crash all kinds of d

274
00:14:08,550 --> 00:14:15,240
mp3 systems and then lastly we ran this

275
00:14:12,810 --> 00:14:17,099
thing through different compilers as

276
00:14:15,240 --> 00:14:19,530
kind of a stand-in for the fact that we

277
00:14:17,100 --> 00:14:22,860
didn't do any particular static<font color="#E5E5E5"> analysis</font>

278
00:14:19,530 --> 00:14:25,050
but we<font color="#CCCCCC"> figured of compiling it with</font>

279
00:14:22,860 --> 00:14:32,550
different systems will at least give<font color="#CCCCCC"> us</font>

280
00:14:25,050 --> 00:14:37,740
some something<font color="#E5E5E5"> anyway well the</font><font color="#CCCCCC"> punchline</font>

281
00:14:32,550 --> 00:14:41,579
for<font color="#E5E5E5"> fuzzy lop is yeah where's my t-shirt</font>

282
00:14:37,740 --> 00:14:46,050
I forgot that<font color="#E5E5E5"> one but yeah we survived</font>

283
00:14:41,580 --> 00:14:47,850
<font color="#E5E5E5">American fuzzy law basically it it it</font>

284
00:14:46,050 --> 00:14:50,640
actually pointed to one problem that

285
00:14:47,850 --> 00:14:52,860
that was in<font color="#CCCCCC"> Hammer itself which we</font>

286
00:14:50,640 --> 00:14:56,490
subsequently fixed and interestingly

287
00:14:52,860 --> 00:14:59,850
this is a this was due<font color="#CCCCCC"> to what lengths</font>

288
00:14:56,490 --> 00:15:01,650
fields and some packets where the packet

289
00:14:59,850 --> 00:15:03,930
says hey I'm<font color="#E5E5E5"> containing five million</font>

290
00:15:01,650 --> 00:15:05,030
objects hammer would allocate five

291
00:15:03,930 --> 00:15:07,760
minutes

292
00:15:05,030 --> 00:15:11,360
allocate<font color="#E5E5E5"> 5 million objects for forests</font>

293
00:15:07,760 --> 00:15:14,120
and that would be denied by the<font color="#E5E5E5"> ml</font>

294
00:15:11,360 --> 00:15:15,770
awkward fall fair so we fixed<font color="#E5E5E5"> that so</font>

295
00:15:14,120 --> 00:15:18,640
hammer will only try<font color="#E5E5E5"> to allocate the</font>

296
00:15:15,770 --> 00:15:22,579
allocate these as a as a par system and

297
00:15:18,640 --> 00:15:26,960
the second one that<font color="#E5E5E5"> we ran</font><font color="#CCCCCC"> into is that</font>

298
00:15:22,580 --> 00:15:28,610
<font color="#CCCCCC">I actually did the the basic integer</font>

299
00:15:26,960 --> 00:15:31,070
overflow a mistake that<font color="#CCCCCC"> was one of the</font>

300
00:15:28,610 --> 00:15:32,300
<font color="#E5E5E5">one</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the standard dnp3 bugs because</font>

301
00:15:31,070 --> 00:15:35,540
they have this have a wonderful

302
00:15:32,300 --> 00:15:37,880
<font color="#CCCCCC">representation for their particular for</font>

303
00:15:35,540 --> 00:15:40,880
a particular count field so this<font color="#E5E5E5"> is</font>

304
00:15:37,880 --> 00:15:43,070
another one<font color="#CCCCCC"> of my yeah it's one</font><font color="#E5E5E5"> of my</font>

305
00:15:40,880 --> 00:15:45,230
favorite topics these length length and

306
00:15:43,070 --> 00:15:46,700
count fields so it's<font color="#E5E5E5"> interesting to see</font>

307
00:15:45,230 --> 00:15:49,970
<font color="#CCCCCC">that these actually cause the to cause</font>

308
00:15:46,700 --> 00:15:55,840
the two problems we had fun by the

309
00:15:49,970 --> 00:15:58,970
fuzzer all right yeah in the very last

310
00:15:55,840 --> 00:16:02,120
if we look<font color="#E5E5E5"> at the line shack approach is</font>

311
00:15:58,970 --> 00:16:06,340
kind of a roadmap towards developing of

312
00:16:02,120 --> 00:16:08,750
such your system we can sum up that

313
00:16:06,340 --> 00:16:11,030
thinking<font color="#E5E5E5"> about a grammar and specifying</font>

314
00:16:08,750 --> 00:16:13,370
grandma<font color="#CCCCCC"> and deriving</font><font color="#E5E5E5"> a parser from it is</font>

315
00:16:11,030 --> 00:16:14,600
not<font color="#E5E5E5"> everything but it seems somehow it</font>

316
00:16:13,370 --> 00:16:16,970
seems to help with<font color="#CCCCCC"> everything so that</font>

317
00:16:14,600 --> 00:16:21,280
validates validates that lengths like

318
00:16:16,970 --> 00:16:24,440
worldview and my am I in my eyes yeah

319
00:16:21,280 --> 00:16:28,220
like says the parsers at least parts of

320
00:16:24,440 --> 00:16:30,790
the decompose naturally for testing<font color="#CCCCCC"> the</font>

321
00:16:28,220 --> 00:16:33,530
code is<font color="#E5E5E5"> easier to maintain hopefully and</font>

322
00:16:30,790 --> 00:16:36,530
it also helps us with separation of

323
00:16:33,530 --> 00:16:41,329
privileges using that elf back toolkit

324
00:16:36,530 --> 00:16:44,530
in this case<font color="#CCCCCC"> alright some some downsize</font>

325
00:16:41,330 --> 00:16:48,020
or downsize or potential downsides I

326
00:16:44,530 --> 00:16:51,410
think we should mention is we have

327
00:16:48,020 --> 00:16:55,130
potential impact on speed and<font color="#CCCCCC"> memory</font>

328
00:16:51,410 --> 00:17:00,230
consumption with such a library<font color="#CCCCCC"> where a</font>

329
00:16:55,130 --> 00:17:01,520
in the speed case i'd like to say if the

330
00:17:00,230 --> 00:17:03,290
current implementation and<font color="#E5E5E5"> hammer</font>

331
00:17:01,520 --> 00:17:06,280
because it's because the protocol

332
00:17:03,290 --> 00:17:09,500
because it uses non context-free

333
00:17:06,280 --> 00:17:13,339
<font color="#CCCCCC">Combinator's uses a packrat back end</font><font color="#E5E5E5"> and</font>

334
00:17:09,500 --> 00:17:17,990
that<font color="#E5E5E5"> result in for instant or</font>

335
00:17:13,339 --> 00:17:18,770
particularly in these choice

336
00:17:17,990 --> 00:17:21,190
<font color="#CCCCCC">Combinator's</font>

337
00:17:18,770 --> 00:17:23,690
that<font color="#CCCCCC"> I showed before being tried</font>

338
00:17:21,190 --> 00:17:27,050
sequentially every option<font color="#E5E5E5"> is tried until</font>

339
00:17:23,690 --> 00:17:28,670
one matches this is of course not not as

340
00:17:27,050 --> 00:17:31,610
efficient as one would sometimes like

341
00:17:28,670 --> 00:17:34,400
because you<font color="#CCCCCC"> can have things wherever</font>

342
00:17:31,610 --> 00:17:36,740
we're simply all the functions are

343
00:17:34,400 --> 00:17:41,750
listed in a long choice Combinator and

344
00:17:36,740 --> 00:17:44,030
the yeah the the<font color="#CCCCCC"> options are just tried</font>

345
00:17:41,750 --> 00:17:47,420
until one number matches where in the

346
00:17:44,030 --> 00:17:49,610
real implementation you'd have<font color="#CCCCCC"> just</font><font color="#E5E5E5"> a</font>

347
00:17:47,420 --> 00:17:50,960
simple a table lookup and in one case we

348
00:17:49,610 --> 00:17:52,520
<font color="#CCCCCC">actually do say I think it is what the</font>

349
00:17:50,960 --> 00:17:54,800
function we actually do say<font color="#E5E5E5"> okay we're</font>

350
00:17:52,520 --> 00:17:57,639
going<font color="#E5E5E5"> to not do it the the context-free</font>

351
00:17:54,800 --> 00:18:00,500
way here but do a do a table lookup

352
00:17:57,640 --> 00:18:03,910
however if it<font color="#E5E5E5"> were all context-free we</font>

353
00:18:00,500 --> 00:18:07,310
could just run<font color="#CCCCCC"> this through context-free</font>

354
00:18:03,910 --> 00:18:09,200
parser generator algorithm like<font color="#E5E5E5"> ll</font><font color="#CCCCCC"> Kol</font>

355
00:18:07,310 --> 00:18:11,600
ALR which we actually have in hammer and

356
00:18:09,200 --> 00:18:14,030
<font color="#CCCCCC">that would just compile this all down to</font>

357
00:18:11,600 --> 00:18:16,939
a lookup table of course and then we'd

358
00:18:14,030 --> 00:18:19,090
have exactly that but we could still

359
00:18:16,940 --> 00:18:24,230
specify it in<font color="#E5E5E5"> the nice chromatic away</font>

360
00:18:19,090 --> 00:18:26,260
all right the memory impact there's well

361
00:18:24,230 --> 00:18:28,760
this<font color="#E5E5E5"> is a potential problem with</font>

362
00:18:26,260 --> 00:18:30,620
<font color="#CCCCCC">higher-level</font><font color="#E5E5E5"> libraries in general we</font>

363
00:18:28,760 --> 00:18:33,590
<font color="#CCCCCC">have a very generic representation for</font>

364
00:18:30,620 --> 00:18:38,530
the semantics semantics results of the

365
00:18:33,590 --> 00:18:42,040
of the pars and d mp3 goes to through

366
00:18:38,530 --> 00:18:45,290
great lengths to save bits on the<font color="#E5E5E5"> wire</font>

367
00:18:42,040 --> 00:18:47,480
so if we<font color="#CCCCCC"> have a very tightly packed bit</font>

368
00:18:45,290 --> 00:18:51,020
structure a hammer will blow this up

369
00:18:47,480 --> 00:18:53,030
into<font color="#E5E5E5"> big c structs so we haven't seen</font>

370
00:18:51,020 --> 00:18:55,510
<font color="#E5E5E5">any particular problems with this but</font>

371
00:18:53,030 --> 00:19:01,930
it's a potential thing to look out for

372
00:18:55,510 --> 00:19:05,660
and then one question that came up is

373
00:19:01,930 --> 00:19:08,410
can we can we separate can we<font color="#E5E5E5"> make</font>

374
00:19:05,660 --> 00:19:10,820
separate parsers out of the same

375
00:19:08,410 --> 00:19:13,700
implementation so to speak out of the

376
00:19:10,820 --> 00:19:18,950
same code that<font color="#E5E5E5"> we're we're one of them</font>

377
00:19:13,700 --> 00:19:21,140
simply skips the semantic values like if

378
00:19:18,950 --> 00:19:22,400
in our part in our application if we

379
00:19:21,140 --> 00:19:25,400
don't actually want<font color="#CCCCCC"> to do anything with</font>

380
00:19:22,400 --> 00:19:28,040
<font color="#CCCCCC">the packets we might want</font><font color="#E5E5E5"> to just just</font>

381
00:19:25,400 --> 00:19:30,800
<font color="#E5E5E5">only recognize and then obviously this</font>

382
00:19:28,040 --> 00:19:32,070
memory problem doesn't appear or

383
00:19:30,800 --> 00:19:34,260
shouldn't appear

384
00:19:32,070 --> 00:19:37,169
in our current implementation because

385
00:19:34,260 --> 00:19:41,700
the<font color="#CCCCCC"> library is supposed to be able to</font>

386
00:19:37,170 --> 00:19:44,310
use for all<font color="#CCCCCC"> kinds</font><font color="#E5E5E5"> of things we always we</font>

387
00:19:41,700 --> 00:19:50,450
always<font color="#E5E5E5"> generate semantic representations</font>

388
00:19:44,310 --> 00:19:50,450
so this is an interesting yeah direction

