1
00:00:00,000 --> 00:00:03,570
<font color="#E5E5E5">I'm a security researcher and assured</font>

2
00:00:01,800 --> 00:00:05,549
<font color="#E5E5E5">information security my interests</font>

3
00:00:03,570 --> 00:00:07,648
include<font color="#CCCCCC"> computation and language theory</font>

4
00:00:05,549 --> 00:00:08,099
<font color="#E5E5E5">no surprise and various transmission</font>

5
00:00:07,649 --> 00:00:11,519
media

6
00:00:08,099 --> 00:00:13,440
so like radio<font color="#CCCCCC"> and in case you guys are</font>

7
00:00:11,519 --> 00:00:16,500
wondering<font color="#E5E5E5"> I like long bounded walks on</font>

8
00:00:13,440 --> 00:00:17,369
the beach<font color="#E5E5E5"> so it's a little bit</font><font color="#CCCCCC"> own over</font>

9
00:00:16,500 --> 00:00:19,619
you what we're going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be talking about</font>

10
00:00:17,369 --> 00:00:23,039
today<font color="#CCCCCC"> we're gonna</font><font color="#E5E5E5"> do a little history</font><font color="#CCCCCC"> of</font>

11
00:00:19,619 --> 00:00:24,720
<font color="#CCCCCC">what</font><font color="#E5E5E5"> was the precedent</font><font color="#CCCCCC"> from oka and</font><font color="#E5E5E5"> what</font>

12
00:00:23,039 --> 00:00:26,400
we're<font color="#E5E5E5"> trying to accomplish with it</font>

13
00:00:24,720 --> 00:00:28,590
we're<font color="#E5E5E5"> gonna talk a little bit about how</font>

14
00:00:26,400 --> 00:00:30,209
the experiment is formulated and some of

15
00:00:28,590 --> 00:00:34,530
the preliminary<font color="#CCCCCC"> results we've seen so</font>

16
00:00:30,210 --> 00:00:37,380
far<font color="#E5E5E5"> and try to draw some</font><font color="#CCCCCC"> imparting pot</font>

17
00:00:34,530 --> 00:00:39,750
takeaway message from this<font color="#CCCCCC"> and I can't</font>

18
00:00:37,380 --> 00:00:42,000
<font color="#E5E5E5">stress this</font><font color="#CCCCCC"> enough I I prefer to</font><font color="#E5E5E5"> have an</font>

19
00:00:39,750 --> 00:00:44,160
open forum<font color="#E5E5E5"> if possible for adding</font>

20
00:00:42,000 --> 00:00:46,230
questions<font color="#CCCCCC"> so if</font><font color="#E5E5E5"> you have one</font><font color="#CCCCCC"> just shoot</font>

21
00:00:44,160 --> 00:00:49,648
<font color="#E5E5E5">one out there that way we're all moving</font>

22
00:00:46,230 --> 00:00:52,160
along<font color="#CCCCCC"> at the</font><font color="#E5E5E5"> same train so the preceding</font>

23
00:00:49,649 --> 00:00:55,739
effort as<font color="#CCCCCC"> Sergey was talking about</font><font color="#E5E5E5"> was</font>

24
00:00:52,160 --> 00:00:57,809
called crema<font color="#E5E5E5"> it was and I'm sure he will</font>

25
00:00:55,739 --> 00:01:00,390
<font color="#CCCCCC">correct me if I'm wrong on</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> but it</font>

26
00:00:57,809 --> 00:01:03,419
was an effort<font color="#CCCCCC"> to measure the effect of</font>

27
00:01:00,390 --> 00:01:05,099
restricting computation on formal

28
00:01:03,420 --> 00:01:06,240
languages so I believe they created a

29
00:01:05,099 --> 00:01:08,460
sub<font color="#CCCCCC"> turing-complete</font>

30
00:01:06,240 --> 00:01:11,039
programming language and measured<font color="#E5E5E5"> how</font>

31
00:01:08,460 --> 00:01:15,600
the<font color="#CCCCCC"> effect of porting languages into</font>

32
00:01:11,040 --> 00:01:19,680
<font color="#CCCCCC">that so</font><font color="#E5E5E5"> that begs the question up going</font>

33
00:01:15,600 --> 00:01:21,899
so far<font color="#E5E5E5"> begs the question of okay so we</font>

34
00:01:19,680 --> 00:01:25,890
know we<font color="#E5E5E5"> can do this we know its impact</font>

35
00:01:21,900 --> 00:01:28,950
how prevalent is being able to run code

36
00:01:25,890 --> 00:01:30,240
<font color="#CCCCCC">and sub turing-complete environments its</font>

37
00:01:28,950 --> 00:01:31,979
<font color="#E5E5E5">meaning like if</font><font color="#CCCCCC"> we looked at a large</font>

38
00:01:30,240 --> 00:01:35,460
code base how much of that<font color="#E5E5E5"> can be</font><font color="#CCCCCC"> run</font>

39
00:01:31,979 --> 00:01:38,039
sub turing-complete<font color="#E5E5E5"> so that's the goal</font>

40
00:01:35,460 --> 00:01:40,470
<font color="#CCCCCC">of MOCA in a nutshell we're trying to</font>

41
00:01:38,040 --> 00:01:42,960
<font color="#E5E5E5">look at large data sets and based on</font>

42
00:01:40,470 --> 00:01:45,179
what we're seeing<font color="#E5E5E5"> classify certain code</font>

43
00:01:42,960 --> 00:01:47,399
portions as either fully<font color="#CCCCCC"> turing-complete</font>

44
00:01:45,180 --> 00:01:52,049
or sub<font color="#E5E5E5"> turing-complete or somewhere in</font>

45
00:01:47,399 --> 00:01:54,270
between we don't know<font color="#E5E5E5"> so</font><font color="#CCCCCC"> I party have to</font>

46
00:01:52,049 --> 00:01:57,750
apologize<font color="#E5E5E5"> for this if you guys know this</font>

47
00:01:54,270 --> 00:01:58,829
already<font color="#E5E5E5"> bear with me</font><font color="#CCCCCC"> but why do</font><font color="#E5E5E5"> we care</font>

48
00:01:57,750 --> 00:01:59,490
<font color="#CCCCCC">about whether or</font><font color="#E5E5E5"> not something is</font>

49
00:01:58,829 --> 00:02:02,548
turing-complete

50
00:01:59,490 --> 00:02:05,158
well<font color="#E5E5E5"> turing complete code can accept</font>

51
00:02:02,549 --> 00:02:11,120
arbitrary inputs inputs govern program

52
00:02:05,159 --> 00:02:13,110
execution<font color="#E5E5E5"> behavior</font><font color="#CCCCCC"> oh</font><font color="#E5E5E5"> okay sorry and</font>

53
00:02:11,120 --> 00:02:13,860
because of that we can get ourselves

54
00:02:13,110 --> 00:02:17,010
into

55
00:02:13,860 --> 00:02:18,780
you undesirable or untrustworthy<font color="#CCCCCC"> States</font>

56
00:02:17,010 --> 00:02:21,859
so the land of weird machines in this

57
00:02:18,780 --> 00:02:26,130
case so<font color="#E5E5E5"> you know we don't enjoy that</font>

58
00:02:21,860 --> 00:02:28,920
<font color="#CCCCCC">however</font><font color="#E5E5E5"> on the contrast sub TC execution</font>

59
00:02:26,130 --> 00:02:31,680
is very<font color="#E5E5E5"> restricted and</font><font color="#CCCCCC"> well-defined</font>

60
00:02:28,920 --> 00:02:34,769
<font color="#E5E5E5">behavior</font><font color="#CCCCCC"> and from</font><font color="#E5E5E5"> that we can actually</font>

61
00:02:31,680 --> 00:02:36,420
have determinate operation and it can

62
00:02:34,770 --> 00:02:40,560
can<font color="#CCCCCC"> be</font><font color="#E5E5E5"> proven say from a</font><font color="#CCCCCC"> Lang</font><font color="#E5E5E5"> SEC</font>

63
00:02:36,420 --> 00:02:42,690
perspective<font color="#E5E5E5"> unfortunately this can't be</font>

64
00:02:40,560 --> 00:02:45,420
<font color="#E5E5E5">applied to all applications so input</font>

65
00:02:42,690 --> 00:02:47,160
<font color="#CCCCCC">handling has to be you know</font><font color="#E5E5E5"> take a user</font>

66
00:02:45,420 --> 00:02:49,429
input and so that's kind of at the

67
00:02:47,160 --> 00:02:53,459
discretion<font color="#E5E5E5"> of the user and possibly a</font>

68
00:02:49,430 --> 00:02:55,610
payload writer so the whole<font color="#E5E5E5"> point of</font>

69
00:02:53,459 --> 00:02:58,200
this is<font color="#E5E5E5"> to make a case for laying sick</font>

70
00:02:55,610 --> 00:03:00,630
<font color="#CCCCCC">we're not trying</font><font color="#E5E5E5"> at this point to say</font>

71
00:02:58,200 --> 00:03:02,700
it's<font color="#E5E5E5"> possible to do Lang sag here we're</font>

72
00:03:00,630 --> 00:03:05,910
trying<font color="#CCCCCC"> to say</font><font color="#E5E5E5"> that it's not only</font>

73
00:03:02,700 --> 00:03:07,470
possible it's almost stupid<font color="#E5E5E5"> not</font><font color="#CCCCCC"> to be</font>

74
00:03:05,910 --> 00:03:11,340
writing code with<font color="#E5E5E5"> lengths that can bind</font>

75
00:03:07,470 --> 00:03:13,440
it<font color="#CCCCCC"> so I think Dan Greer last year talked</font>

76
00:03:11,340 --> 00:03:15,510
about five stages of<font color="#E5E5E5"> codex</font><font color="#CCCCCC"> of acceptance</font>

77
00:03:13,440 --> 00:03:17,489
<font color="#E5E5E5">we should be pushing for that fifth we</font>

78
00:03:15,510 --> 00:03:22,380
should actively be saying why aren't<font color="#E5E5E5"> we</font>

79
00:03:17,489 --> 00:03:24,810
doing lying<font color="#E5E5E5"> sick with our stuff so for</font>

80
00:03:22,380 --> 00:03:28,140
the actual code we're working with we're

81
00:03:24,810 --> 00:03:31,110
using LLVM and clang to do a compilation

82
00:03:28,140 --> 00:03:33,660
<font color="#E5E5E5">and analysis Linux kernel version</font><font color="#CCCCCC"> four I</font>

83
00:03:31,110 --> 00:03:36,989
don't<font color="#E5E5E5"> remember the subunit that</font><font color="#CCCCCC"> we're</font>

84
00:03:33,660 --> 00:03:39,900
working with<font color="#E5E5E5"> but if you look at kernel</font>

85
00:03:36,989 --> 00:03:42,060
<font color="#E5E5E5">or gets the latest stable release and I</font>

86
00:03:39,900 --> 00:03:43,920
should mention here<font color="#CCCCCC"> that when I say</font>

87
00:03:42,060 --> 00:03:47,010
we're working<font color="#E5E5E5"> with the kernel where</font>

88
00:03:43,920 --> 00:03:49,410
<font color="#CCCCCC">Euler key working with a micro the micro</font>

89
00:03:47,010 --> 00:03:51,298
version<font color="#CCCCCC"> of not</font><font color="#E5E5E5"> the micro but a tailored</font>

90
00:03:49,410 --> 00:03:53,459
down version so<font color="#E5E5E5"> specifically for our</font>

91
00:03:51,299 --> 00:03:56,910
<font color="#CCCCCC">computer so that the the tiny configs</font>

92
00:03:53,459 --> 00:04:00,690
<font color="#E5E5E5">and python version to seven for doing</font>

93
00:03:56,910 --> 00:04:04,950
<font color="#CCCCCC">analysis of the output of LLVM so you</font>

94
00:04:00,690 --> 00:04:06,660
may be asking<font color="#CCCCCC"> why lob my not GCC LVM</font>

95
00:04:04,950 --> 00:04:08,399
allows a little bit has a little bit

96
00:04:06,660 --> 00:04:10,620
<font color="#CCCCCC">better</font><font color="#E5E5E5"> extensibility which is what we're</font>

97
00:04:08,400 --> 00:04:13,860
<font color="#CCCCCC">really looking for here</font><font color="#E5E5E5"> because as</font>

98
00:04:10,620 --> 00:04:17,910
you'll see we writing custom passes for

99
00:04:13,860 --> 00:04:19,919
<font color="#E5E5E5">a lot of</font><font color="#CCCCCC"> you analysis as well</font><font color="#E5E5E5"> as doing</font>

100
00:04:17,910 --> 00:04:21,120
some transformation passes so we're

101
00:04:19,918 --> 00:04:23,219
modifying the intermediate

102
00:04:21,120 --> 00:04:24,810
representations<font color="#E5E5E5"> of the code to make</font><font color="#CCCCCC"> it a</font>

103
00:04:23,220 --> 00:04:27,000
<font color="#E5E5E5">little more</font><font color="#CCCCCC"> obvious</font><font color="#E5E5E5"> to us as to whether</font>

104
00:04:24,810 --> 00:04:28,740
<font color="#E5E5E5">or not something will be</font><font color="#CCCCCC"> too</font><font color="#E5E5E5"> TC or sub</font>

105
00:04:27,000 --> 00:04:32,640
TC

106
00:04:28,740 --> 00:04:34,170
and additionally<font color="#CCCCCC"> it also allows for</font><font color="#E5E5E5"> a</font>

107
00:04:32,640 --> 00:04:37,260
<font color="#CCCCCC">little degree higher degree of verbosity</font>

108
00:04:34,170 --> 00:04:40,200
<font color="#CCCCCC">which allows again</font><font color="#E5E5E5"> for us to be a better</font>

109
00:04:37,260 --> 00:04:45,240
car that did better<font color="#E5E5E5"> metrics on what</font>

110
00:04:40,200 --> 00:04:48,240
we're working<font color="#CCCCCC"> with so now we have in</font>

111
00:04:45,240 --> 00:04:51,000
theory this<font color="#E5E5E5"> output from compilation what</font>

112
00:04:48,240 --> 00:04:53,160
are we looking for<font color="#CCCCCC"> we're looking to care</font>

113
00:04:51,000 --> 00:04:54,900
<font color="#E5E5E5">about things like input language</font><font color="#CCCCCC"> slock</font>

114
00:04:53,160 --> 00:04:56,160
so those guys of you who didn't spend

115
00:04:54,900 --> 00:05:00,919
time as a software<font color="#CCCCCC"> engineer in a</font>

116
00:04:56,160 --> 00:05:03,360
previous life<font color="#CCCCCC"> source lines of code</font><font color="#E5E5E5"> and</font>

117
00:05:00,920 --> 00:05:06,840
minimum machine power classification

118
00:05:03,360 --> 00:05:08,370
so<font color="#E5E5E5"> what these privileges</font><font color="#CCCCCC"> right so what's</font>

119
00:05:06,840 --> 00:05:10,229
the<font color="#CCCCCC"> little</font><font color="#E5E5E5"> lowest power of machine</font><font color="#CCCCCC"> that</font>

120
00:05:08,370 --> 00:05:13,620
<font color="#CCCCCC">we can run this with but in this case</font>

121
00:05:10,230 --> 00:05:14,910
<font color="#CCCCCC">it's just sub TC and TC that being said</font>

122
00:05:13,620 --> 00:05:17,550
this<font color="#E5E5E5"> is obviously broaching on the</font>

123
00:05:14,910 --> 00:05:20,220
halting problem<font color="#CCCCCC"> so that's what interns</font>

124
00:05:17,550 --> 00:05:21,750
are for manual analysis<font color="#E5E5E5"> but in all</font>

125
00:05:20,220 --> 00:05:27,930
<font color="#CCCCCC">actuality a lot of this is attempted to</font>

126
00:05:21,750 --> 00:05:29,310
<font color="#CCCCCC">be</font><font color="#E5E5E5"> done through</font><font color="#CCCCCC"> our code base itself so</font>

127
00:05:27,930 --> 00:05:31,800
as<font color="#E5E5E5"> I said we're running transformation</font>

128
00:05:29,310 --> 00:05:33,390
passes what does that mean<font color="#E5E5E5"> it means the</font>

129
00:05:31,800 --> 00:05:35,820
<font color="#CCCCCC">ability to look at code that may be</font>

130
00:05:33,390 --> 00:05:39,080
somewhat<font color="#CCCCCC"> ambiguous</font><font color="#E5E5E5"> and take that code</font>

131
00:05:35,820 --> 00:05:41,010
and<font color="#E5E5E5"> work it around a little bit to</font>

132
00:05:39,080 --> 00:05:43,260
display that<font color="#E5E5E5"> actually is either</font>

133
00:05:41,010 --> 00:05:44,820
<font color="#CCCCCC">turing-complete or sub</font><font color="#E5E5E5"> turing-complete</font>

134
00:05:43,260 --> 00:05:47,219
and<font color="#CCCCCC"> we'll show an example</font><font color="#E5E5E5"> of that</font><font color="#CCCCCC"> in a</font>

135
00:05:44,820 --> 00:05:49,080
little<font color="#CCCCCC"> bit so when we talk about</font>

136
00:05:47,220 --> 00:05:52,830
completeness<font color="#CCCCCC"> we</font><font color="#E5E5E5"> usually we think about</font>

137
00:05:49,080 --> 00:05:54,450
loops<font color="#CCCCCC"> so for our cases</font><font color="#E5E5E5"> things like loops</font>

138
00:05:52,830 --> 00:05:55,740
<font color="#E5E5E5">with varied well-defined</font>

139
00:05:54,450 --> 00:05:59,159
upper bounds<font color="#E5E5E5"> for their</font><font color="#CCCCCC"> induction</font>

140
00:05:55,740 --> 00:06:01,620
variables easily terminate<font color="#E5E5E5"> I mean and</font>

141
00:05:59,160 --> 00:06:03,270
that<font color="#CCCCCC"> being said there are</font><font color="#E5E5E5"> obvious you</font>

142
00:06:01,620 --> 00:06:05,880
might ask you know is there what about

143
00:06:03,270 --> 00:06:07,950
<font color="#E5E5E5">things that modify the loop variables</font>

144
00:06:05,880 --> 00:06:11,190
internally<font color="#E5E5E5"> uh you get a hit gets handled</font>

145
00:06:07,950 --> 00:06:14,099
by a loop pass in<font color="#CCCCCC"> LLVM already so it's</font>

146
00:06:11,190 --> 00:06:15,480
smart<font color="#CCCCCC"> enough to do that</font><font color="#E5E5E5"> we have some</font>

147
00:06:14,100 --> 00:06:17,270
things<font color="#E5E5E5"> that are</font><font color="#CCCCCC"> more ambiguous</font><font color="#E5E5E5"> and</font>

148
00:06:15,480 --> 00:06:19,350
you'll see they're pretty prevalent

149
00:06:17,270 --> 00:06:21,299
<font color="#E5E5E5">recursion</font><font color="#CCCCCC"> you also think of a lot of</font>

150
00:06:19,350 --> 00:06:25,169
<font color="#CCCCCC">times when you talk about</font><font color="#E5E5E5"> turn</font>

151
00:06:21,300 --> 00:06:27,260
completeness<font color="#CCCCCC"> and</font><font color="#E5E5E5"> LOV have the ability to</font>

152
00:06:25,169 --> 00:06:30,900
<font color="#E5E5E5">fully unwind some things if it knows</font>

153
00:06:27,260 --> 00:06:33,750
that the thing can be completely unwound

154
00:06:30,900 --> 00:06:36,960
rather so we can<font color="#E5E5E5"> count those a sub turn</font>

155
00:06:33,750 --> 00:06:39,030
complete and default to say like<font color="#CCCCCC"> app</font>

156
00:06:36,960 --> 00:06:40,919
<font color="#CCCCCC">lock</font><font color="#E5E5E5"> that manually analyze it after but</font>

157
00:06:39,030 --> 00:06:41,529
in general you<font color="#E5E5E5"> don't really see</font>

158
00:06:40,919 --> 00:06:43,389
recursion

159
00:06:41,529 --> 00:06:46,359
the<font color="#E5E5E5"> colonel it's just not</font><font color="#CCCCCC"> something they</font>

160
00:06:43,389 --> 00:06:48,459
do<font color="#E5E5E5"> so it's not really an issue for</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> so</font>

161
00:06:46,359 --> 00:06:49,929
<font color="#E5E5E5">completely contrived example of what we</font>

162
00:06:48,459 --> 00:06:52,319
<font color="#E5E5E5">usually look at when we look</font><font color="#CCCCCC"> at the</font>

163
00:06:49,929 --> 00:06:55,599
intermediate representations of things

164
00:06:52,319 --> 00:06:59,079
<font color="#CCCCCC">basic silly loop I less than 0 I plus</font>

165
00:06:55,599 --> 00:07:01,329
plus<font color="#CCCCCC"> you can look</font><font color="#E5E5E5"> on line</font><font color="#CCCCCC"> 3 of that and</font>

166
00:06:59,079 --> 00:07:05,289
see<font color="#E5E5E5"> that there's a comparison operation</font>

167
00:07:01,329 --> 00:07:08,889
between<font color="#E5E5E5"> the induction variable I and 10</font>

168
00:07:05,289 --> 00:07:11,169
like static 10 so we know from<font color="#E5E5E5"> that</font>

169
00:07:08,889 --> 00:07:13,629
<font color="#E5E5E5">great this is perfect</font><font color="#CCCCCC"> it terminates</font>

170
00:07:11,169 --> 00:07:16,628
let's classify this as a sub

171
00:07:13,629 --> 00:07:18,669
turing-complete piece of code<font color="#CCCCCC"> but</font>

172
00:07:16,629 --> 00:07:21,309
<font color="#CCCCCC">unfortunately you know not many people</font>

173
00:07:18,669 --> 00:07:24,339
write code<font color="#CCCCCC"> like that so what about</font>

174
00:07:21,309 --> 00:07:27,759
something<font color="#CCCCCC"> a little more complicated and</font>

175
00:07:24,339 --> 00:07:30,789
this is much more descriptive of<font color="#CCCCCC"> what we</font>

176
00:07:27,759 --> 00:07:32,499
actually<font color="#E5E5E5"> see in the kernel at least is</font>

177
00:07:30,789 --> 00:07:36,009
<font color="#CCCCCC">that we see some sort of buffer</font><font color="#E5E5E5"> being</font>

178
00:07:32,499 --> 00:07:38,559
defined and we<font color="#CCCCCC"> defined the</font><font color="#E5E5E5"> upper bound</font>

179
00:07:36,009 --> 00:07:41,439
<font color="#CCCCCC">for a loop</font><font color="#E5E5E5"> as one element</font><font color="#CCCCCC"> that buffer we</font>

180
00:07:38,559 --> 00:07:45,610
see the<font color="#CCCCCC"> sliding drivers a lot a lot</font><font color="#E5E5E5"> of</font>

181
00:07:41,439 --> 00:07:48,369
<font color="#E5E5E5">times in the x86</font><font color="#CCCCCC"> folder</font><font color="#E5E5E5"> of the kernel</font>

182
00:07:45,610 --> 00:07:52,779
<font color="#E5E5E5">and</font><font color="#CCCCCC"> you'll see on the first</font><font color="#E5E5E5"> example</font><font color="#CCCCCC"> here</font>

183
00:07:48,369 --> 00:07:55,329
on<font color="#CCCCCC"> the top the second line of</font><font color="#E5E5E5"> this piece</font>

184
00:07:52,779 --> 00:07:57,489
<font color="#E5E5E5">of code you can see this buffer and it's</font>

185
00:07:55,329 --> 00:07:59,949
it<font color="#E5E5E5"> doesn't know what to do with this so</font>

186
00:07:57,489 --> 00:08:02,438
we actually<font color="#E5E5E5"> look at does this we ask</font><font color="#CCCCCC"> LVM</font>

187
00:07:59,949 --> 00:08:06,789
does this have an upper bound<font color="#CCCCCC"> it'll say</font>

188
00:08:02,439 --> 00:08:09,219
I have no idea<font color="#CCCCCC"> so we actually just wrote</font>

189
00:08:06,789 --> 00:08:10,568
a transformation pass which actually<font color="#E5E5E5"> two</font>

190
00:08:09,219 --> 00:08:13,269
days ago<font color="#E5E5E5"> I think</font><font color="#CCCCCC"> so it didn't make it</font>

191
00:08:10,569 --> 00:08:15,819
<font color="#CCCCCC">into this slide deck</font><font color="#E5E5E5"> but essentially</font>

192
00:08:13,269 --> 00:08:19,989
what it does<font color="#CCCCCC"> is it pulls out the load</font>

193
00:08:15,819 --> 00:08:23,619
but the induction variable load and the

194
00:08:19,989 --> 00:08:25,628
buffer and pulls it out<font color="#CCCCCC"> of the loop</font>

195
00:08:23,619 --> 00:08:28,809
header so it can be resolved because<font color="#CCCCCC"> of</font>

196
00:08:25,629 --> 00:08:30,759
some quirkiness with<font color="#CCCCCC"> L</font><font color="#E5E5E5"> at the end not in</font>

197
00:08:28,809 --> 00:08:32,620
<font color="#E5E5E5">it just errors on the side of safety</font>

198
00:08:30,759 --> 00:08:35,519
because<font color="#CCCCCC"> it that</font><font color="#E5E5E5"> could be modified ahead</font>

199
00:08:32,620 --> 00:08:35,519
of time so

200
00:08:43,530 --> 00:08:54,010
so this is not<font color="#E5E5E5"> actually modifying like</font>

201
00:08:46,300 --> 00:08:56,560
the actual execution<font color="#E5E5E5"> of well that's all</font>

202
00:08:54,010 --> 00:08:57,850
talking<font color="#E5E5E5"> about this before</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> so your if</font>

203
00:08:56,560 --> 00:08:58,900
I understand<font color="#E5E5E5"> correctly so say like you</font>

204
00:08:57,850 --> 00:09:01,060
have some<font color="#CCCCCC"> sort of loop and that loop</font>

205
00:08:58,900 --> 00:09:01,900
counters modified internally<font color="#E5E5E5"> is that</font>

206
00:09:01,060 --> 00:09:09,489
what you're talking<font color="#CCCCCC"> about</font>

207
00:09:01,900 --> 00:09:11,410
I think it's covered by alias analysis

208
00:09:09,490 --> 00:09:12,820
the alias analysis<font color="#CCCCCC"> passed but I could be</font>

209
00:09:11,410 --> 00:09:17,650
<font color="#E5E5E5">wrong</font><font color="#CCCCCC"> it's something would have</font><font color="#E5E5E5"> to look</font>

210
00:09:12,820 --> 00:09:20,710
<font color="#E5E5E5">into yeah</font><font color="#CCCCCC"> we would LOV</font><font color="#E5E5E5"> M has a pass</font>

211
00:09:17,650 --> 00:09:22,449
called<font color="#CCCCCC"> L alias analysis and don't quote</font>

212
00:09:20,710 --> 00:09:23,620
this<font color="#E5E5E5"> is like gospel because I know I'm</font>

213
00:09:22,450 --> 00:09:25,510
<font color="#E5E5E5">not sure I haven't looked into it yet</font>

214
00:09:23,620 --> 00:09:28,150
<font color="#E5E5E5">we're still</font><font color="#CCCCCC"> doing the analysis of this</font>

215
00:09:25,510 --> 00:09:31,770
modification<font color="#CCCCCC"> but</font><font color="#E5E5E5"> it's definitely worth</font>

216
00:09:28,150 --> 00:09:34,270
noting<font color="#E5E5E5"> but in general at</font><font color="#CCCCCC"> least the</font>

217
00:09:31,770 --> 00:09:36,400
induction<font color="#E5E5E5"> variables taken care of and I</font>

218
00:09:34,270 --> 00:09:39,370
can't speak<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the upper bound but I'm</font>

219
00:09:36,400 --> 00:09:40,689
<font color="#E5E5E5">almost positive it's covered</font><font color="#CCCCCC"> so that</font>

220
00:09:39,370 --> 00:09:42,700
<font color="#CCCCCC">being said we could pull it out of the</font>

221
00:09:40,690 --> 00:09:44,230
loop header<font color="#E5E5E5"> and it can be resolved later</font>

222
00:09:42,700 --> 00:09:47,680
<font color="#E5E5E5">on as to whether or</font><font color="#CCCCCC"> not it has an upper</font>

223
00:09:44,230 --> 00:09:50,020
<font color="#CCCCCC">bound so we'll classify that</font><font color="#E5E5E5"> as TC sub</font>

224
00:09:47,680 --> 00:09:52,810
TC rather so in the next<font color="#E5E5E5"> couple</font><font color="#CCCCCC"> slides</font>

225
00:09:50,020 --> 00:09:54,880
I'm<font color="#E5E5E5"> going to be discussing what we're</font>

226
00:09:52,810 --> 00:09:57,189
seeing in the kernel in a<font color="#E5E5E5"> large scale</font>

227
00:09:54,880 --> 00:09:59,110
and you<font color="#E5E5E5"> have to bear</font><font color="#CCCCCC"> with me</font><font color="#E5E5E5"> because the</font>

228
00:09:57,190 --> 00:10:02,320
information<font color="#CCCCCC"> can</font><font color="#E5E5E5"> get kind of complicated</font>

229
00:09:59,110 --> 00:10:06,280
<font color="#CCCCCC">to describe but here's an example</font><font color="#E5E5E5"> of a</font>

230
00:10:02,320 --> 00:10:08,170
contrived example<font color="#E5E5E5"> I'm for example if you</font>

231
00:10:06,280 --> 00:10:09,310
had a<font color="#E5E5E5"> folder structure on there like I</font>

232
00:10:08,170 --> 00:10:12,699
think<font color="#E5E5E5"> you see on the right hand</font><font color="#CCCCCC"> side</font>

233
00:10:09,310 --> 00:10:15,550
there as such and we<font color="#E5E5E5"> want to represent</font>

234
00:10:12,700 --> 00:10:21,370
the<font color="#E5E5E5"> number of text files in this folder</font>

235
00:10:15,550 --> 00:10:23,349
structure<font color="#E5E5E5"> and their relative sizes</font><font color="#CCCCCC"> this</font>

236
00:10:21,370 --> 00:10:25,660
<font color="#E5E5E5">would be a way</font><font color="#CCCCCC"> to do it</font><font color="#E5E5E5"> so take for</font>

237
00:10:23,350 --> 00:10:27,420
example the temp<font color="#E5E5E5"> folder it has a lot</font><font color="#CCCCCC"> of</font>

238
00:10:25,660 --> 00:10:30,459
files in there with<font color="#CCCCCC"> it has a lot of</font>

239
00:10:27,420 --> 00:10:33,640
<font color="#CCCCCC">flock in that full subfolder</font><font color="#E5E5E5"> but</font>

240
00:10:30,460 --> 00:10:36,880
absolutely no<font color="#E5E5E5"> text files</font><font color="#CCCCCC"> the server</font>

241
00:10:33,640 --> 00:10:40,930
folder<font color="#E5E5E5"> has a moderates lock to it and a</font>

242
00:10:36,880 --> 00:10:42,580
lot of<font color="#E5E5E5"> text files so the concentrate the</font>

243
00:10:40,930 --> 00:10:46,329
<font color="#E5E5E5">saturation of color the color saturation</font>

244
00:10:42,580 --> 00:10:48,580
<font color="#E5E5E5">of the the graph represents how strongly</font>

245
00:10:46,330 --> 00:10:50,620
<font color="#E5E5E5">it correlates with the title of it so</font>

246
00:10:48,580 --> 00:10:53,080
<font color="#E5E5E5">just I know that sounds complicated but</font>

247
00:10:50,620 --> 00:10:53,529
it<font color="#E5E5E5"> nine out of</font><font color="#CCCCCC"> ten people in my office</font>

248
00:10:53,080 --> 00:10:55,360
<font color="#E5E5E5">did</font>

249
00:10:53,529 --> 00:10:58,329
understand this graph at first so bear

250
00:10:55,360 --> 00:11:00,670
with me<font color="#CCCCCC"> so what are</font><font color="#E5E5E5"> we seeing when it</font>

251
00:10:58,329 --> 00:11:04,060
<font color="#E5E5E5">looked at look at the kernel so believe</font>

252
00:11:00,670 --> 00:11:06,449
this or<font color="#E5E5E5"> not</font><font color="#CCCCCC"> and this is a sumed in view</font>

253
00:11:04,060 --> 00:11:10,209
because it just untenable mess otherwise

254
00:11:06,449 --> 00:11:14,559
<font color="#CCCCCC">we see a lot of terminating loops so far</font>

255
00:11:10,209 --> 00:11:16,809
<font color="#E5E5E5">so far in the arc x86 folder as well as</font>

256
00:11:14,559 --> 00:11:19,540
you see<font color="#CCCCCC"> a little</font><font color="#E5E5E5"> bit</font><font color="#CCCCCC"> of in the drivers</font>

257
00:11:16,809 --> 00:11:21,730
folder<font color="#E5E5E5"> as</font><font color="#CCCCCC"> well as kernel in time but a</font>

258
00:11:19,540 --> 00:11:24,279
<font color="#E5E5E5">very high</font><font color="#CCCCCC"> concentration in arc and</font>

259
00:11:21,730 --> 00:11:26,290
you'll<font color="#CCCCCC"> notice that</font><font color="#E5E5E5"> we at</font><font color="#CCCCCC"> least no</font>

260
00:11:24,279 --> 00:11:28,749
terminating no terminating<font color="#CCCCCC"> you'll see in</font>

261
00:11:26,290 --> 00:11:30,099
the next<font color="#E5E5E5"> slide no loops at all almost in</font>

262
00:11:28,749 --> 00:11:35,139
the includes which is not<font color="#E5E5E5"> terribly</font>

263
00:11:30,100 --> 00:11:36,999
surprising but so as far as unbounded

264
00:11:35,139 --> 00:11:38,589
<font color="#E5E5E5">and when I just say unbounded I'm erring</font>

265
00:11:36,999 --> 00:11:41,649
on the side of<font color="#E5E5E5"> caution</font><font color="#CCCCCC"> so we don't know</font>

266
00:11:38,589 --> 00:11:44,040
yet we haven't<font color="#E5E5E5"> determined</font><font color="#CCCCCC"> same thing we</font>

267
00:11:41,649 --> 00:11:46,540
have a tremendous number of loops in arc

268
00:11:44,040 --> 00:11:49,360
<font color="#CCCCCC">you see a much more heavy waiting now to</font>

269
00:11:46,540 --> 00:11:51,430
<font color="#E5E5E5">drivers</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> also some of the</font><font color="#CCCCCC"> scheduling</font>

270
00:11:49,360 --> 00:11:52,149
<font color="#E5E5E5">and event</font><font color="#CCCCCC"> handling and in the kernel</font>

271
00:11:51,430 --> 00:11:54,189
<font color="#E5E5E5">subfolders</font>

272
00:11:52,149 --> 00:11:56,559
but again almost<font color="#E5E5E5"> nothing in include</font>

273
00:11:54,189 --> 00:12:00,670
Linux or you know the include folder at

274
00:11:56,559 --> 00:12:02,230
all so just<font color="#CCCCCC"> to talk about get a</font><font color="#E5E5E5"> met get</font>

275
00:12:00,670 --> 00:12:04,509
a feel for<font color="#E5E5E5"> where we can be directing our</font>

276
00:12:02,230 --> 00:12:06,519
efforts<font color="#CCCCCC"> as a way to do manual analysis</font>

277
00:12:04,509 --> 00:12:10,660
some things we<font color="#CCCCCC"> just did a ratio</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> the</font>

278
00:12:06,519 --> 00:12:13,720
<font color="#E5E5E5">unbounded versus termination</font><font color="#CCCCCC"> arc seemed</font>

279
00:12:10,660 --> 00:12:16,809
to be a good candidate<font color="#E5E5E5"> I've looked at</font>

280
00:12:13,720 --> 00:12:18,699
drivers<font color="#CCCCCC"> Bay the drivers folders by hand</font>

281
00:12:16,809 --> 00:12:21,339
<font color="#E5E5E5">and they look</font><font color="#CCCCCC"> like a</font><font color="#E5E5E5"> fairly good</font>

282
00:12:18,699 --> 00:12:24,550
candidate for classification<font color="#E5E5E5"> for sub</font>

283
00:12:21,339 --> 00:12:26,529
<font color="#CCCCCC">turing completeness as well it should be</font>

284
00:12:24,550 --> 00:12:28,180
no like I said<font color="#CCCCCC"> this is</font><font color="#E5E5E5"> zoomed in so you</font>

285
00:12:26,529 --> 00:12:31,959
<font color="#CCCCCC">don't</font><font color="#E5E5E5"> see a pullers like mm or anything</font>

286
00:12:28,180 --> 00:12:35,469
like that<font color="#CCCCCC"> rfp</font><font color="#E5E5E5"> dev but the same sort of</font>

287
00:12:31,959 --> 00:12:37,388
trend follows around<font color="#CCCCCC"> so as far as</font><font color="#E5E5E5"> raw</font>

288
00:12:35,470 --> 00:12:42,449
numbers what we've seen so<font color="#CCCCCC"> far and this</font>

289
00:12:37,389 --> 00:12:44,589
is pending update around<font color="#E5E5E5"> you know</font>

290
00:12:42,449 --> 00:12:50,079
<font color="#CCCCCC">350,000 lines</font><font color="#E5E5E5"> of code</font>

291
00:12:44,589 --> 00:12:53,259
<font color="#CCCCCC">96% of</font><font color="#E5E5E5"> which are</font><font color="#CCCCCC"> ANSI C and I know the</font>

292
00:12:50,079 --> 00:12:55,239
the undecided<font color="#E5E5E5"> loops sound pretty high</font>

293
00:12:53,259 --> 00:12:58,420
compared to the<font color="#E5E5E5"> terminating but when you</font>

294
00:12:55,240 --> 00:12:59,769
look<font color="#E5E5E5"> at functions with undecided versus</font>

295
00:12:58,420 --> 00:13:03,099
the total<font color="#E5E5E5"> number of function we've seen</font>

296
00:12:59,769 --> 00:13:06,819
so far<font color="#CCCCCC"> it's fairly small so to go back</font>

297
00:13:03,100 --> 00:13:11,350
<font color="#CCCCCC">to visit</font><font color="#E5E5E5"> image here half of it</font>

298
00:13:06,819 --> 00:13:13,719
image is unloop t'<font color="#E5E5E5"> basically so what do</font>

299
00:13:11,350 --> 00:13:15,989
we<font color="#E5E5E5"> take away from</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> well much of</font>

300
00:13:13,720 --> 00:13:20,679
<font color="#CCCCCC">Linux kernel already can be run sub TC</font>

301
00:13:15,989 --> 00:13:22,629
fantastic so<font color="#E5E5E5"> that's a great great that</font>

302
00:13:20,679 --> 00:13:24,160
<font color="#E5E5E5">it means that well you</font><font color="#CCCCCC"> know this mean it</font>

303
00:13:22,629 --> 00:13:25,689
might be<font color="#CCCCCC"> assisted it might be</font>

304
00:13:24,160 --> 00:13:26,789
descriptive that a lot<font color="#E5E5E5"> of the code that</font>

305
00:13:25,689 --> 00:13:29,259
we normally<font color="#E5E5E5"> write from day to day</font>

306
00:13:26,789 --> 00:13:31,869
already can be a candidate for porting

307
00:13:29,259 --> 00:13:35,619
to<font color="#CCCCCC"> a restrictive environment for</font>

308
00:13:31,869 --> 00:13:37,149
programming<font color="#CCCCCC"> it's already and it is</font>

309
00:13:35,619 --> 00:13:37,689
possible we've done some<font color="#CCCCCC"> work on it</font>

310
00:13:37,149 --> 00:13:39,879
<font color="#E5E5E5">already</font>

311
00:13:37,689 --> 00:13:41,679
to modify loops to make<font color="#E5E5E5"> them more</font>

312
00:13:39,879 --> 00:13:46,179
obvious as to<font color="#E5E5E5"> whether or</font><font color="#CCCCCC"> not they can</font>

313
00:13:41,679 --> 00:13:48,988
run in a sub TC manner<font color="#CCCCCC"> or they're</font><font color="#E5E5E5"> not</font>

314
00:13:46,179 --> 00:13:50,949
they can't at all<font color="#E5E5E5"> and that's okay too</font>

315
00:13:48,989 --> 00:13:53,439
additionally<font color="#CCCCCC"> it'd be interesting I think</font>

316
00:13:50,949 --> 00:13:56,079
<font color="#E5E5E5">for future work to apply</font><font color="#CCCCCC"> this to other</font>

317
00:13:53,439 --> 00:13:58,748
<font color="#E5E5E5">domains so so be it application servers</font>

318
00:13:56,079 --> 00:14:00,638
or other client side code because<font color="#E5E5E5"> I</font>

319
00:13:58,749 --> 00:14:02,289
<font color="#E5E5E5">think you'd see a lot</font><font color="#CCCCCC"> veer</font><font color="#E5E5E5"> of a more</font>

320
00:14:00,639 --> 00:14:06,100
variation<font color="#E5E5E5"> in the types of loop you'd see</font>

321
00:14:02,289 --> 00:14:07,629
more recursive calls<font color="#E5E5E5"> just generally</font>

322
00:14:06,100 --> 00:14:11,019
different<font color="#E5E5E5"> types of programming</font><font color="#CCCCCC"> styles</font>

323
00:14:07,629 --> 00:14:15,459
there<font color="#E5E5E5"> additionally because the clinic</font>

324
00:14:11,019 --> 00:14:17,199
kernel is so stable so stable<font color="#E5E5E5"> monolithic</font>

325
00:14:15,459 --> 00:14:21,039
<font color="#E5E5E5">um it's had a lot</font><font color="#CCCCCC"> of tight chance for</font>

326
00:14:17,199 --> 00:14:22,599
whatever assignment<font color="#CCCCCC"> whereas in the user</font>

327
00:14:21,039 --> 00:14:24,069
<font color="#E5E5E5">code bases you really don't have</font><font color="#CCCCCC"> that a</font>

328
00:14:22,600 --> 00:14:26,289
luxury a lot of times so if you're

329
00:14:24,069 --> 00:14:27,969
<font color="#E5E5E5">pushing out a user space product you</font>

330
00:14:26,289 --> 00:14:29,439
don't<font color="#E5E5E5"> have</font><font color="#CCCCCC"> the luxury of always cranking</font>

331
00:14:27,970 --> 00:14:31,329
out the best code just<font color="#E5E5E5"> the one that gets</font>

332
00:14:29,439 --> 00:14:32,529
the<font color="#E5E5E5"> job</font><font color="#CCCCCC"> done at the end of the day and I</font>

333
00:14:31,329 --> 00:14:34,628
<font color="#CCCCCC">think that would be an interesting</font><font color="#E5E5E5"> way</font>

334
00:14:32,529 --> 00:14:39,970
<font color="#CCCCCC">to</font><font color="#E5E5E5"> look at those pieces of code base</font>

335
00:14:34,629 --> 00:14:42,329
those code bases and do comparison<font color="#CCCCCC"> I'd</font>

336
00:14:39,970 --> 00:14:44,319
like to thank DARPA<font color="#E5E5E5"> and Tim Frazier for</font>

337
00:14:42,329 --> 00:14:46,899
sponsoring this research effort<font color="#CCCCCC"> and</font>

338
00:14:44,319 --> 00:14:49,628
<font color="#CCCCCC">Sergei brought us for his technical</font>

339
00:14:46,899 --> 00:14:56,369
<font color="#CCCCCC">support pursue developing weighing</font><font color="#E5E5E5"> SEC</font>

340
00:14:49,629 --> 00:14:56,369
<font color="#E5E5E5">etcetera many questions thoughts</font>

