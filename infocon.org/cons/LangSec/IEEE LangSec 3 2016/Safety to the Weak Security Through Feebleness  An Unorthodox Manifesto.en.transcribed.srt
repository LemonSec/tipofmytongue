1
00:00:00,000 --> 00:00:05,270
they're back in the<font color="#CCCCCC"> 80s when I was in</font>

2
00:00:02,040 --> 00:00:09,480
grad school there was this notion of

3
00:00:05,270 --> 00:00:11,879
peace through strength and so this<font color="#E5E5E5"> is</font>

4
00:00:09,480 --> 00:00:15,599
<font color="#CCCCCC">actually the reverse of that security</font>

5
00:00:11,880 --> 00:00:22,859
through weakness and let's see is it was

6
00:00:15,599 --> 00:00:24,750
it somehow when I<font color="#E5E5E5"> click it should next</font>

7
00:00:22,859 --> 00:00:27,180
there we are how is that ok great so

8
00:00:24,750 --> 00:00:30,269
this is so here's the outline briefly

9
00:00:27,180 --> 00:00:32,399
i'm going to be talking<font color="#E5E5E5"> about</font><font color="#CCCCCC"> oh what</font>

10
00:00:30,269 --> 00:00:33,469
you know<font color="#E5E5E5"> what why basically is there</font>

11
00:00:32,399 --> 00:00:35,880
malware why do we have security

12
00:00:33,469 --> 00:00:37,260
vulnerabilities and the answer is going

13
00:00:35,880 --> 00:00:38,820
to be well it's<font color="#CCCCCC"> it's bugs and that's</font>

14
00:00:37,260 --> 00:00:40,890
going<font color="#E5E5E5"> to be basically all I'm going to</font>

15
00:00:38,820 --> 00:00:42,840
say about security it's all about bugs

16
00:00:40,890 --> 00:00:46,200
and then the rest of<font color="#E5E5E5"> the talk is how do</font>

17
00:00:42,840 --> 00:00:48,030
<font color="#E5E5E5">you find bugs and in particular why you</font>

18
00:00:46,200 --> 00:00:49,739
might care about having relatively

19
00:00:48,030 --> 00:00:51,980
weaker rather than stronger models of

20
00:00:49,739 --> 00:00:55,050
computation and a couple of case studies

21
00:00:51,980 --> 00:00:58,108
one from the early<font color="#E5E5E5"> 90s that was sort of</font>

22
00:00:55,050 --> 00:01:00,120
cautionary tale and one or from<font color="#CCCCCC"> the 90s</font>

23
00:00:58,109 --> 00:01:02,399
that was a cautionary tale and one that

24
00:01:00,120 --> 00:01:04,709
has been much more that it's been very

25
00:01:02,399 --> 00:01:07,560
recent an accidental which has been a

26
00:01:04,709 --> 00:01:11,250
much happier software-defined networking

27
00:01:07,560 --> 00:01:13,290
so<font color="#E5E5E5"> no one with that so if you take a</font>

28
00:01:11,250 --> 00:01:15,630
<font color="#E5E5E5">look and say where does malware come</font>

29
00:01:13,290 --> 00:01:18,420
from right you go and you take a look

30
00:01:15,630 --> 00:01:20,070
and say well these are this these are

31
00:01:18,420 --> 00:01:21,689
bugs by the way it on a better screen

32
00:01:20,070 --> 00:01:23,820
you can see they're actually very pretty

33
00:01:21,689 --> 00:01:27,570
when you look at these slides are online

34
00:01:23,820 --> 00:01:30,770
so you can find so in<font color="#E5E5E5"> general malware</font>

35
00:01:27,570 --> 00:01:33,029
exploits<font color="#CCCCCC"> a bug it isn't</font><font color="#E5E5E5"> always true the</font>

36
00:01:30,770 --> 00:01:36,179
people mentioned phishing attacks so

37
00:01:33,030 --> 00:01:38,970
that you can delude users uh but it is a

38
00:01:36,180 --> 00:01:40,680
broad stroke if you got<font color="#E5E5E5"> rid of bugs you</font>

39
00:01:38,970 --> 00:01:47,070
would have many fewer security problems

40
00:01:40,680 --> 00:01:50,189
so there's our message prevent bugs stay

41
00:01:47,070 --> 00:01:51,210
safe and so then the question is and

42
00:01:50,189 --> 00:01:52,829
that's the last thing I'm going to say

43
00:01:51,210 --> 00:01:55,880
about security all the rest of it is

44
00:01:52,829 --> 00:01:58,559
<font color="#E5E5E5">going to be about bugs so now hey look</font>

45
00:01:55,880 --> 00:02:01,670
just write code without bugs what the

46
00:01:58,560 --> 00:02:03,810
what<font color="#CCCCCC"> is the matter with you people and</font>

47
00:02:01,670 --> 00:02:05,189
<font color="#CCCCCC">by the</font><font color="#E5E5E5"> way it came up earlier somebody</font>

48
00:02:03,810 --> 00:02:06,899
said well you know people try them right

49
00:02:05,189 --> 00:02:11,430
to sell yeah people try right bug free

50
00:02:06,899 --> 00:02:12,960
code right I don't I try but I can't I

51
00:02:11,430 --> 00:02:14,250
try but I I can't

52
00:02:12,960 --> 00:02:15,930
can't<font color="#CCCCCC"> generally do it and the reason</font>

53
00:02:14,250 --> 00:02:18,990
that<font color="#E5E5E5"> we have trouble is well it's all</font>

54
00:02:15,930 --> 00:02:22,560
this guy's fault there was a movie<font color="#E5E5E5"> about</font>

55
00:02:18,990 --> 00:02:24,420
him recently and<font color="#E5E5E5"> of</font><font color="#CCCCCC"> course we all know</font>

56
00:02:22,560 --> 00:02:27,330
<font color="#E5E5E5">we talked to earlier in the day about</font>

57
00:02:24,420 --> 00:02:29,820
the<font color="#E5E5E5"> Turing Turing incompleteness theorem</font>

58
00:02:27,330 --> 00:02:31,800
right you cannot determine if a Turing

59
00:02:29,820 --> 00:02:34,049
machine halts which is to say given a

60
00:02:31,800 --> 00:02:38,130
Turing machine you can't find out if it

61
00:02:34,050 --> 00:02:40,230
has a bug and not only<font color="#E5E5E5"> can can you not</font>

62
00:02:38,130 --> 00:02:42,269
in theory find out<font color="#E5E5E5"> right that in the</font>

63
00:02:40,230 --> 00:02:45,269
sense that almost all Turing machines

64
00:02:42,270 --> 00:02:47,340
will be will have halting be undecidable

65
00:02:45,270 --> 00:02:49,050
as was correctly pointed out we write

66
00:02:47,340 --> 00:02:51,990
<font color="#E5E5E5">only a tiny fraction of Turing machines</font>

67
00:02:49,050 --> 00:02:53,730
but in practice you may<font color="#CCCCCC"> have</font><font color="#E5E5E5"> noticed</font>

68
00:02:51,990 --> 00:02:57,110
that<font color="#E5E5E5"> in 50 years of doing this stuff</font>

69
00:02:53,730 --> 00:03:01,260
automatically finding bugs is still hard

70
00:02:57,110 --> 00:03:03,210
right so in practice we find that that

71
00:03:01,260 --> 00:03:04,950
it is<font color="#CCCCCC"> that it is</font><font color="#E5E5E5"> hard not necessarily</font>

72
00:03:03,210 --> 00:03:06,600
undecidable David Wagner did some<font color="#E5E5E5"> very</font>

73
00:03:04,950 --> 00:03:10,649
good work on this at Berkeley a few

74
00:03:06,600 --> 00:03:12,960
years<font color="#E5E5E5"> ago ah but still in general it's a</font>

75
00:03:10,650 --> 00:03:15,060
<font color="#CCCCCC">crapshoot er we wouldn't be here but</font>

76
00:03:12,960 --> 00:03:16,650
then the question is do we really need

77
00:03:15,060 --> 00:03:18,510
Turing machines for everything we heard

78
00:03:16,650 --> 00:03:21,420
talk about cream in the last session

79
00:03:18,510 --> 00:03:24,209
which argued that no we don't in fact

80
00:03:21,420 --> 00:03:29,549
you can an awful lot of the units<font color="#CCCCCC"> of the</font>

81
00:03:24,210 --> 00:03:32,580
<font color="#CCCCCC">Linux kernel can be done without that so</font>

82
00:03:29,550 --> 00:03:33,840
here basically is so but the question is

83
00:03:32,580 --> 00:03:35,070
why do we used to Turing complete

84
00:03:33,840 --> 00:03:38,670
language is well the answer is they're

85
00:03:35,070 --> 00:03:40,500
really easy I mean we in fact in some

86
00:03:38,670 --> 00:03:42,390
strict sense we don't build<font color="#E5E5E5"> Turing</font>

87
00:03:40,500 --> 00:03:43,890
machines computers eventually run out of

88
00:03:42,390 --> 00:03:45,690
memory there's a<font color="#E5E5E5"> finite number of bits</font>

89
00:03:43,890 --> 00:03:48,000
in the universe so therefore everything

90
00:03:45,690 --> 00:03:49,350
is finite state but in practice when<font color="#E5E5E5"> we</font>

91
00:03:48,000 --> 00:03:50,670
say Turing machines it's<font color="#E5E5E5"> because the</font>

92
00:03:49,350 --> 00:03:52,890
state<font color="#CCCCCC"> is so big that we might as well</font>

93
00:03:50,670 --> 00:03:55,079
consider<font color="#E5E5E5"> it to be infinite and of course</font>

94
00:03:52,890 --> 00:03:57,750
<font color="#E5E5E5">they're powerful I can do anything</font><font color="#CCCCCC"> in</font>

95
00:03:55,080 --> 00:04:00,240
language XYZ right for my favorite

96
00:03:57,750 --> 00:04:02,700
language well yes<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can do anything</font><font color="#CCCCCC"> in</font>

97
00:04:00,240 --> 00:04:04,890
language XYZ including shoot shoot

98
00:04:02,700 --> 00:04:07,190
yourself in the foot and my<font color="#E5E5E5"> wedding that</font>

99
00:04:04,890 --> 00:04:09,480
what a nice hole you have down there

100
00:04:07,190 --> 00:04:10,950
because these languages are often much

101
00:04:09,480 --> 00:04:12,540
more powerful than its required to do

102
00:04:10,950 --> 00:04:15,269
the job is the talk that we heard on

103
00:04:12,540 --> 00:04:18,769
mocha just in the<font color="#CCCCCC"> last</font><font color="#E5E5E5"> session set and</font>

104
00:04:15,270 --> 00:04:22,320
they're impossible in terminal to verify

105
00:04:18,769 --> 00:04:24,210
so why is that are<font color="#E5E5E5"> they're weaker models</font>

106
00:04:22,320 --> 00:04:26,310
of computation where we can do<font color="#E5E5E5"> rather</font>

107
00:04:24,210 --> 00:04:28,969
better the answer is<font color="#CCCCCC"> yes</font>

108
00:04:26,310 --> 00:04:32,070
I mean turing-complete languages are

109
00:04:28,970 --> 00:04:34,590
verification is undecidable logic free

110
00:04:32,070 --> 00:04:36,900
models of computation by which<font color="#CCCCCC"> I</font><font color="#E5E5E5"> can</font>

111
00:04:34,590 --> 00:04:39,989
<font color="#E5E5E5">also call these structural these are in</font>

112
00:04:36,900 --> 00:04:42,330
general polynomial the most common

113
00:04:39,990 --> 00:04:44,220
example that we find is type checking

114
00:04:42,330 --> 00:04:46,620
languages right which<font color="#CCCCCC"> is essentially</font>

115
00:04:44,220 --> 00:04:49,290
checking for structural consistency so

116
00:04:46,620 --> 00:04:51,750
that's a that's polynomial<font color="#E5E5E5"> and for any</font>

117
00:04:49,290 --> 00:04:55,350
reasonable type system but it's also a

118
00:04:51,750 --> 00:04:57,090
relatively weak verification method but

119
00:04:55,350 --> 00:04:59,910
in the middle<font color="#E5E5E5"> you</font><font color="#CCCCCC"> have these</font><font color="#E5E5E5"> things</font>

120
00:04:57,090 --> 00:05:03,090
<font color="#CCCCCC">state free which is to say it's logic</font>

121
00:04:59,910 --> 00:05:04,950
but the logic<font color="#E5E5E5"> is a is purely a function</font>

122
00:05:03,090 --> 00:05:09,090
of the input there's no state at<font color="#E5E5E5"> all in</font>

123
00:05:04,950 --> 00:05:14,190
it that it turns out is np-complete but

124
00:05:09,090 --> 00:05:18,810
it's only<font color="#E5E5E5"> MP complete and the finite</font>

125
00:05:14,190 --> 00:05:22,350
state runs the gamut between MP complete

126
00:05:18,810 --> 00:05:24,510
if you're using CTL or all the way up to

127
00:05:22,350 --> 00:05:26,760
pspace complete if you're using LTL

128
00:05:24,510 --> 00:05:28,950
depends<font color="#E5E5E5"> upon what very end of that is</font>

129
00:05:26,760 --> 00:05:36,090
computation tree logic vs linear linear

130
00:05:28,950 --> 00:05:38,520
temporal logic so this<font color="#CCCCCC"> is um the thing</font>

131
00:05:36,090 --> 00:05:40,830
is that<font color="#CCCCCC"> we tend to write we tend to do</font>

132
00:05:38,520 --> 00:05:44,219
<font color="#E5E5E5">this and we tend</font><font color="#CCCCCC"> to write</font><font color="#E5E5E5"> programs in</font>

133
00:05:40,830 --> 00:05:45,870
this but this<font color="#CCCCCC"> area in here where the</font>

134
00:05:44,220 --> 00:05:49,800
models are relatively powerful enough to

135
00:05:45,870 --> 00:05:51,450
do reasonable stuff but uh but they're

136
00:05:49,800 --> 00:05:53,310
still weak enough that you can<font color="#CCCCCC"> actually</font>

137
00:05:51,450 --> 00:05:55,650
have a hope of verifying these things we

138
00:05:53,310 --> 00:06:00,600
don't use very often and that's<font color="#E5E5E5"> kind of</font>

139
00:05:55,650 --> 00:06:02,760
too bad so let's go to something of a

140
00:06:00,600 --> 00:06:05,130
cautionary<font color="#CCCCCC"> tale and this is why</font>

141
00:06:02,760 --> 00:06:07,139
languages really matter and this is

142
00:06:05,130 --> 00:06:10,020
Verilog VHDL who's heard<font color="#CCCCCC"> of parallel can</font>

143
00:06:07,139 --> 00:06:11,370
be HDL around here<font color="#E5E5E5"> all right it has</font>

144
00:06:10,020 --> 00:06:13,950
there anybody here has written<font color="#CCCCCC"> code of</font>

145
00:06:11,370 --> 00:06:16,190
them is there anybody here who's liked

146
00:06:13,950 --> 00:06:16,190
it

147
00:06:16,860 --> 00:06:25,569
you're a strange sad person<font color="#E5E5E5"> okay I got</font>

148
00:06:22,629 --> 00:06:29,289
my start doing this stuff and it drove

149
00:06:25,569 --> 00:06:30,969
me absolutely mad because when you you

150
00:06:29,289 --> 00:06:33,248
know the people who have<font color="#E5E5E5"> written code in</font>

151
00:06:30,969 --> 00:06:36,248
Verilog VHDL<font color="#E5E5E5"> know know about this</font>

152
00:06:33,249 --> 00:06:38,469
hardware the<font color="#CCCCCC"> datapath on a chip is</font><font color="#E5E5E5"> state</font>

153
00:06:36,249 --> 00:06:40,629
free right it's an ad or followed by a

154
00:06:38,469 --> 00:06:43,689
barrel shifter followed by followed by

155
00:06:40,629 --> 00:06:46,240
whatever right you just<font color="#E5E5E5"> plug stuff in so</font>

156
00:06:43,689 --> 00:06:48,659
that's combinatory logic control is a

157
00:06:46,240 --> 00:06:51,460
collection of finite state machines and

158
00:06:48,659 --> 00:06:52,899
typically by the way you're only really

159
00:06:51,460 --> 00:06:54,339
you're<font color="#E5E5E5"> not really interested</font><font color="#CCCCCC"> in ltl</font>

160
00:06:52,899 --> 00:06:56,050
properties when you go off and verify

161
00:06:54,339 --> 00:06:58,569
these things so what that means is that

162
00:06:56,050 --> 00:07:02,529
actually we could no kidding do it and

163
00:06:58,569 --> 00:07:04,569
can no kidding do it right<font color="#CCCCCC"> uh there are</font>

164
00:07:02,529 --> 00:07:07,360
many verification technologies they use

165
00:07:04,569 --> 00:07:09,879
BDD based data structures powerful SAT

166
00:07:07,360 --> 00:07:11,439
tools chemic melon the ACM doctoral

167
00:07:09,879 --> 00:07:13,749
dissertation award in early nineties

168
00:07:11,439 --> 00:07:15,639
there were abrasive great theses that

169
00:07:13,749 --> 00:07:18,460
came out of cma you in the early 90s

170
00:07:15,639 --> 00:07:19,930
about how to do this all under<font color="#E5E5E5"> egg clark</font>

171
00:07:18,460 --> 00:07:23,888
who eventually went to Turing award for

172
00:07:19,930 --> 00:07:27,249
it so this could no kidding be done the

173
00:07:23,889 --> 00:07:28,810
problem was it was<font color="#CCCCCC"> hard to</font><font color="#E5E5E5"> get this</font><font color="#CCCCCC"> i as</font>

174
00:07:27,249 --> 00:07:31,029
described in<font color="#E5E5E5"> the appropriate language</font><font color="#CCCCCC"> i</font>

175
00:07:28,810 --> 00:07:33,639
mean<font color="#E5E5E5"> what can used to do basically is we</font>

176
00:07:31,029 --> 00:07:39,999
go off we take some some Verilog code or

177
00:07:33,639 --> 00:07:42,849
VHDL we translated into sm v and and we

178
00:07:39,999 --> 00:07:44,499
go off and verify that so because<font color="#E5E5E5"> by</font>

179
00:07:42,849 --> 00:07:47,050
then<font color="#CCCCCC"> i designed</font><font color="#E5E5E5"> to electro system</font><font color="#CCCCCC"> had</font>

180
00:07:44,499 --> 00:07:49,089
grown up<font color="#CCCCCC"> around Verilog VHDL and as you</font>

181
00:07:47,050 --> 00:07:50,949
can see people much younger than I am

182
00:07:49,089 --> 00:07:53,409
still used this stuff so it continues to

183
00:07:50,949 --> 00:07:55,779
this day and the reason<font color="#CCCCCC"> was just an</font>

184
00:07:53,409 --> 00:07:57,729
accident of timing because people

185
00:07:55,779 --> 00:08:01,089
started to do logic design using tools

186
00:07:57,729 --> 00:08:03,610
in the 80s before logic synthesis and

187
00:08:01,089 --> 00:08:06,099
formal verification really took off and

188
00:08:03,610 --> 00:08:08,909
is and their primary tool was a

189
00:08:06,099 --> 00:08:12,430
simulator so fillmore be built Verilog

190
00:08:08,909 --> 00:08:15,550
and he just basically hacked it together

191
00:08:12,430 --> 00:08:18,159
and it was so bad you know it wasn't

192
00:08:15,550 --> 00:08:19,659
just<font color="#E5E5E5"> the case that the</font><font color="#CCCCCC"> cymatics didn't</font>

193
00:08:18,159 --> 00:08:21,219
match hardware the<font color="#E5E5E5"> semantics didn't</font>

194
00:08:19,659 --> 00:08:22,779
match hardware but forget<font color="#CCCCCC"> that for</font><font color="#E5E5E5"> a</font>

195
00:08:21,219 --> 00:08:25,180
second the semantics didn't match

196
00:08:22,779 --> 00:08:27,009
anything Rick<font color="#CCCCCC"> Radel was working at</font>

197
00:08:25,180 --> 00:08:28,780
synopsis and he was trying<font color="#E5E5E5"> to build over</font>

198
00:08:27,009 --> 00:08:30,639
basically<font color="#CCCCCC"> a Verilog compilers</font>

199
00:08:28,780 --> 00:08:33,010
system set and he<font color="#E5E5E5"> used to call more be</font>

200
00:08:30,639 --> 00:08:35,710
and tell<font color="#E5E5E5"> him</font><font color="#CCCCCC"> what the somatic severa wog</font>

201
00:08:33,010 --> 00:08:38,740
were because more he didn't know<font color="#E5E5E5"> you</font>

202
00:08:35,710 --> 00:08:40,270
just hacked it up then be HDL which I

203
00:08:38,740 --> 00:08:42,070
which came out<font color="#CCCCCC"> of the dark</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> visit</font>

204
00:08:40,270 --> 00:08:43,809
program i'm told it was born from<font color="#E5E5E5"> losing</font>

205
00:08:42,070 --> 00:08:46,480
aid effort this thing<font color="#E5E5E5"> actually did have</font>

206
00:08:43,809 --> 00:08:48,209
smacks unfortunately<font color="#CCCCCC"> for both of them</font>

207
00:08:46,480 --> 00:08:51,070
the<font color="#E5E5E5"> cymatics didn't match hardware</font>

208
00:08:48,210 --> 00:08:53,140
because<font color="#CCCCCC"> what they had was a bunch of</font>

209
00:08:51,070 --> 00:08:55,770
simulation control right how do<font color="#CCCCCC"> i make</font>

210
00:08:53,140 --> 00:08:58,030
<font color="#CCCCCC">the logic simulator work and go fast</font>

211
00:08:55,770 --> 00:08:59,860
along with<font color="#E5E5E5"> the hardware description so</font>

212
00:08:58,030 --> 00:09:01,900
as a result it was really hard to tell

213
00:08:59,860 --> 00:09:03,670
what the hardware was and you couldn't

214
00:09:01,900 --> 00:09:05,709
<font color="#E5E5E5">formally verified assign because he had</font>

215
00:09:03,670 --> 00:09:07,569
to<font color="#E5E5E5"> strip out all the simulation stuff</font>

216
00:09:05,710 --> 00:09:09,940
that was good in with it with the

217
00:09:07,570 --> 00:09:11,830
<font color="#CCCCCC">hardware and you couldn't even</font>

218
00:09:09,940 --> 00:09:16,180
<font color="#E5E5E5">synthesize and in fact I</font><font color="#CCCCCC"> remember was on</font>

219
00:09:11,830 --> 00:09:18,670
a panel<font color="#CCCCCC"> at</font><font color="#E5E5E5"> DAC i think in 1999 or</font>

220
00:09:16,180 --> 00:09:19,839
something and I on the hardware

221
00:09:18,670 --> 00:09:21,670
description language in the guy from the

222
00:09:19,839 --> 00:09:23,800
VHDL users group said being still is

223
00:09:21,670 --> 00:09:28,000
great it's<font color="#E5E5E5"> just that all the</font>

224
00:09:23,800 --> 00:09:29,709
synthesizers suck yeah great that's

225
00:09:28,000 --> 00:09:33,180
because the language is ambiguous piece

226
00:09:29,710 --> 00:09:36,580
of crap<font color="#E5E5E5"> right</font><font color="#CCCCCC"> i mean</font><font color="#E5E5E5"> you know i'm at</font>

227
00:09:33,180 --> 00:09:38,829
gosh<font color="#CCCCCC"> c is great you just can't write a</font>

228
00:09:36,580 --> 00:09:41,740
compiler for it right this makes no

229
00:09:38,830 --> 00:09:43,390
sense<font color="#E5E5E5"> at all so finally what we did was</font>

230
00:09:41,740 --> 00:09:44,589
we<font color="#E5E5E5"> put in synthesis cymatics in other</font>

231
00:09:43,390 --> 00:09:46,480
words figure out what was<font color="#E5E5E5"> really</font>

232
00:09:44,589 --> 00:09:48,730
hardware in all of<font color="#E5E5E5"> this and have a</font>

233
00:09:46,480 --> 00:09:51,130
synthesizable sub subset of the language

234
00:09:48,730 --> 00:09:53,650
and if you said well this<font color="#E5E5E5"> is ridiculous</font>

235
00:09:51,130 --> 00:09:56,589
imagine a computational subset of C Java

236
00:09:53,650 --> 00:10:00,630
Python and compiled all subsets you say

237
00:09:56,589 --> 00:10:03,490
that was nuts and of<font color="#CCCCCC"> course it is right</font>

238
00:10:00,630 --> 00:10:04,930
so that didn't<font color="#CCCCCC"> work out very well</font><font color="#E5E5E5"> and</font>

239
00:10:03,490 --> 00:10:06,760
it's still limping along there are still

240
00:10:04,930 --> 00:10:10,239
bugs and hardware designs it's better

241
00:10:06,760 --> 00:10:14,620
right as with most things in the world

242
00:10:10,240 --> 00:10:16,930
it's a mess so fast<font color="#CCCCCC"> forward about 10 or</font>

243
00:10:14,620 --> 00:10:19,240
11<font color="#CCCCCC"> years from that cautionary tale to</font>

244
00:10:16,930 --> 00:10:22,290
this rather hopeful one so how many

245
00:10:19,240 --> 00:10:25,720
people<font color="#CCCCCC"> understand the guts of networking</font>

246
00:10:22,290 --> 00:10:29,770
new people<font color="#E5E5E5"> all right so what you know is</font>

247
00:10:25,720 --> 00:10:33,670
that networking is a mess but networking

248
00:10:29,770 --> 00:10:39,220
about five<font color="#CCCCCC"> years ago became accidentally</font>

249
00:10:33,670 --> 00:10:42,130
verifiable and this was because this was

250
00:10:39,220 --> 00:10:45,100
in fact entirely accidental

251
00:10:42,130 --> 00:10:47,710
so it's a tale worth telling because<font color="#E5E5E5"> it</font>

252
00:10:45,100 --> 00:10:50,380
because it because it has some so this

253
00:10:47,710 --> 00:10:53,350
<font color="#E5E5E5">is a</font><font color="#CCCCCC"> traditional switch basically the</font>

254
00:10:50,380 --> 00:10:55,510
the data plane here is a stateless thing

255
00:10:53,350 --> 00:10:57,640
that just forwards packets according to

256
00:10:55,510 --> 00:10:59,439
some forwarding tables which are which

257
00:10:57,640 --> 00:11:01,390
are which are basically a bunch of state

258
00:10:59,440 --> 00:11:03,760
state free stuff more on that<font color="#E5E5E5"> later and</font>

259
00:11:01,390 --> 00:11:06,250
the forwarding tables are generated by a

260
00:11:03,760 --> 00:11:08,319
controller<font color="#CCCCCC"> that is sitting</font><font color="#E5E5E5"> in the that</font>

261
00:11:06,250 --> 00:11:10,630
<font color="#E5E5E5">is sitting in a switch that actually the</font>

262
00:11:08,320 --> 00:11:11,890
packets are coming through going up some

263
00:11:10,630 --> 00:11:13,420
of them<font color="#E5E5E5"> go up to the control</font><font color="#CCCCCC"> point to</font>

264
00:11:11,890 --> 00:11:16,030
tell people the state of the network but

265
00:11:13,420 --> 00:11:19,060
you have but these the<font color="#E5E5E5"> controllers is a</font>

266
00:11:16,030 --> 00:11:22,300
Turing is a Turing complete system and

267
00:11:19,060 --> 00:11:23,949
<font color="#E5E5E5">it's and in fact what you have in the</font>

268
00:11:22,300 --> 00:11:25,510
network is a bunch of<font color="#E5E5E5"> them running a</font>

269
00:11:23,950 --> 00:11:27,100
distributed algorithm to figure out how

270
00:11:25,510 --> 00:11:30,880
to send packets around and of course

271
00:11:27,100 --> 00:11:32,680
<font color="#E5E5E5">this is</font><font color="#CCCCCC"> stone unverifiable you know I</font>

272
00:11:30,880 --> 00:11:34,840
mean this is<font color="#E5E5E5"> why you do Wireshark and</font>

273
00:11:32,680 --> 00:11:37,920
stuff like that<font color="#E5E5E5"> so the network you know</font>

274
00:11:34,840 --> 00:11:40,450
the good news the<font color="#E5E5E5"> reason people did this</font>

275
00:11:37,920 --> 00:11:42,969
network does control and control of data

276
00:11:40,450 --> 00:11:44,560
is it runs completely autonomously right

277
00:11:42,970 --> 00:11:46,990
you don't need<font color="#E5E5E5"> any external control at</font>

278
00:11:44,560 --> 00:11:52,260
<font color="#E5E5E5">all but the verification is well you</font>

279
00:11:46,990 --> 00:11:54,250
have you<font color="#CCCCCC"> have some CLI and an SME SMS</font>

280
00:11:52,260 --> 00:11:58,600
SNMP and stuff like that<font color="#E5E5E5"> but it's</font>

281
00:11:54,250 --> 00:12:02,050
basically basically runs on<font color="#E5E5E5"> its own</font><font color="#CCCCCC"> so</font>

282
00:11:58,600 --> 00:12:03,730
about eight years ago<font color="#E5E5E5"> on Nick</font><font color="#CCCCCC"> McCune</font><font color="#E5E5E5"> and</font>

283
00:12:02,050 --> 00:12:06,550
one of his graduate students at Stanford

284
00:12:03,730 --> 00:12:10,330
had this idea called software-defined

285
00:12:06,550 --> 00:12:14,069
networking and the big idea here was off

286
00:12:10,330 --> 00:12:17,260
with its head let's rip the controller

287
00:12:14,070 --> 00:12:19,420
out of this out of<font color="#CCCCCC"> the switches so now</font>

288
00:12:17,260 --> 00:12:21,840
all the switches is a<font color="#E5E5E5"> forwarding table</font>

289
00:12:19,420 --> 00:12:24,040
and a data plane minuses idealized

290
00:12:21,840 --> 00:12:26,050
<font color="#CCCCCC">retrofits onto existing hardware so</font>

291
00:12:24,040 --> 00:12:27,760
nothing is so simple but the basic idea

292
00:12:26,050 --> 00:12:29,949
<font color="#CCCCCC">is this is</font><font color="#E5E5E5"> just a program running on</font>

293
00:12:27,760 --> 00:12:31,720
some computer somewhere as God and where

294
00:12:29,950 --> 00:12:35,980
God intended program should run by the

295
00:12:31,720 --> 00:12:37,360
way very religious experience and the

296
00:12:35,980 --> 00:12:39,100
<font color="#E5E5E5">data plane is simply forwarding packets</font>

297
00:12:37,360 --> 00:12:40,870
and the communication from the

298
00:12:39,100 --> 00:12:43,090
controller is just here's<font color="#E5E5E5"> your</font>

299
00:12:40,870 --> 00:12:46,330
forwarding table forward packets this

300
00:12:43,090 --> 00:12:47,890
way ok so the network just forwards

301
00:12:46,330 --> 00:12:48,910
packets<font color="#E5E5E5"> instead state information</font><font color="#CCCCCC"> of the</font>

302
00:12:47,890 --> 00:12:50,680
controller which generates the

303
00:12:48,910 --> 00:12:52,270
forwarding tables so this does require

304
00:12:50,680 --> 00:12:54,130
an external controller which is

305
00:12:52,270 --> 00:12:55,960
presumably a negative but the

306
00:12:54,130 --> 00:13:02,860
verification on this is in

307
00:12:55,960 --> 00:13:04,090
p it's in fact<font color="#E5E5E5"> NP complete because well</font>

308
00:13:02,860 --> 00:13:05,650
this was done to make networks for

309
00:13:04,090 --> 00:13:09,340
ground ball right the the original<font color="#E5E5E5"> paper</font>

310
00:13:05,650 --> 00:13:11,199
ethane<font color="#CCCCCC"> in sitcom 2007 was making making</font>

311
00:13:09,340 --> 00:13:13,210
networks controllable but it also

312
00:13:11,200 --> 00:13:17,250
provided verification of something<font color="#CCCCCC"> that</font>

313
00:13:13,210 --> 00:13:19,420
a few<font color="#CCCCCC"> people like me among others</font>

314
00:13:17,250 --> 00:13:20,980
realized in there and suddenly

315
00:13:19,420 --> 00:13:22,870
verification started to appear<font color="#CCCCCC"> so</font>

316
00:13:20,980 --> 00:13:24,580
suddenly he could prove that hey an open

317
00:13:22,870 --> 00:13:26,940
flow<font color="#E5E5E5"> network actually sent packets were</font>

318
00:13:24,580 --> 00:13:29,200
where it said it should was loop-free

319
00:13:26,940 --> 00:13:31,390
have various other properties that<font color="#CCCCCC"> you</font>

320
00:13:29,200 --> 00:13:32,860
cared about right and<font color="#E5E5E5"> that was because</font>

321
00:13:31,390 --> 00:13:36,130
the network of forwarding tables is

322
00:13:32,860 --> 00:13:40,330
isomorphic to a state free lot a logic

323
00:13:36,130 --> 00:13:44,170
circuit right aka the data path of a

324
00:13:40,330 --> 00:13:46,360
chip right that's all<font color="#E5E5E5"> it is and so the</font>

325
00:13:44,170 --> 00:13:49,060
verification methodology was then don't

326
00:13:46,360 --> 00:13:51,820
bother to verify<font color="#E5E5E5"> the controller right</font>

327
00:13:49,060 --> 00:13:53,859
<font color="#E5E5E5">but the controller is generating the the</font>

328
00:13:51,820 --> 00:13:56,020
state for<font color="#E5E5E5"> the network coming out in</font>

329
00:13:53,860 --> 00:13:58,300
these verification these tables so

330
00:13:56,020 --> 00:14:00,579
verify those that we can do before<font color="#E5E5E5"> you</font>

331
00:13:58,300 --> 00:14:02,469
load it into<font color="#E5E5E5"> the network right the</font>

332
00:14:00,580 --> 00:14:05,140
controller could<font color="#E5E5E5"> be a mess internally</font>

333
00:14:02,470 --> 00:14:07,060
but who cared you could stop from

334
00:14:05,140 --> 00:14:10,390
affecting the world by taking a look in

335
00:14:07,060 --> 00:14:11,890
saying<font color="#CCCCCC"> Hana that was that that set up</font>

336
00:14:10,390 --> 00:14:14,500
forwarding tables isn't what we wanted

337
00:14:11,890 --> 00:14:16,150
at all better<font color="#E5E5E5"> you could actually do a</font>

338
00:14:14,500 --> 00:14:17,830
safe update for the<font color="#CCCCCC"> network and I won't</font>

339
00:14:16,150 --> 00:14:20,199
go into<font color="#E5E5E5"> this but this was actually a</font>

340
00:14:17,830 --> 00:14:22,390
kind of<font color="#E5E5E5"> a neat discovery that you had</font>

341
00:14:20,200 --> 00:14:24,130
the<font color="#E5E5E5"> network was in state one you wanted</font>

342
00:14:22,390 --> 00:14:26,050
<font color="#E5E5E5">to go into state to you had to send out</font>

343
00:14:24,130 --> 00:14:27,730
updates to the switches in such a way

344
00:14:26,050 --> 00:14:29,500
that you<font color="#E5E5E5"> didn't bust any invariant and</font>

345
00:14:27,730 --> 00:14:30,760
you could actually<font color="#E5E5E5"> derive a schedule</font>

346
00:14:29,500 --> 00:14:32,170
that would do that or you could prove

347
00:14:30,760 --> 00:14:33,580
<font color="#CCCCCC">that there was no</font><font color="#E5E5E5"> such schedule that</font>

348
00:14:32,170 --> 00:14:38,079
there was no safe path from one<font color="#E5E5E5"> to the</font>

349
00:14:33,580 --> 00:14:40,270
other and so<font color="#E5E5E5"> and moreover even better</font>

350
00:14:38,080 --> 00:14:44,380
the network specifications were often

351
00:14:40,270 --> 00:14:46,810
state free so because when an applicant

352
00:14:44,380 --> 00:14:49,570
the idea was<font color="#E5E5E5"> gee let application writers</font>

353
00:14:46,810 --> 00:14:52,180
specify the network that they want much

354
00:14:49,570 --> 00:14:53,800
the storage app storage application

355
00:14:52,180 --> 00:14:56,380
designer gets<font color="#E5E5E5"> to say here's how I want</font>

356
00:14:53,800 --> 00:14:59,709
<font color="#E5E5E5">you to lay up walks on disk which you</font>

357
00:14:56,380 --> 00:15:01,300
can but it turned out that when people

358
00:14:59,710 --> 00:15:03,310
did that<font color="#E5E5E5"> what they actually said was</font>

359
00:15:01,300 --> 00:15:06,000
here's a graph of the network I want

360
00:15:03,310 --> 00:15:08,709
here are the weights on the edges

361
00:15:06,000 --> 00:15:09,790
controller make it<font color="#E5E5E5"> happen well this</font>

362
00:15:08,710 --> 00:15:12,430
desired that works<font color="#E5E5E5"> best</font>

363
00:15:09,790 --> 00:15:14,770
vacation<font color="#E5E5E5"> estate free as well so this</font><font color="#CCCCCC"> is</font>

364
00:15:12,430 --> 00:15:17,680
finite or state free and therefore

365
00:15:14,770 --> 00:15:20,710
verifiable the output of<font color="#CCCCCC"> the controller</font>

366
00:15:17,680 --> 00:15:23,589
is so the inputs to the controller are

367
00:15:20,710 --> 00:15:26,530
verifiable right this<font color="#E5E5E5"> network I want the</font>

368
00:15:23,590 --> 00:15:28,060
outputs are verifiable yeah it doesn't

369
00:15:26,530 --> 00:15:30,130
<font color="#E5E5E5">have any Brad properties and sweat you</font>

370
00:15:28,060 --> 00:15:32,619
wanted and so<font color="#E5E5E5"> even though this thing was</font>

371
00:15:30,130 --> 00:15:34,360
a total<font color="#CCCCCC"> mess or it could be a total mess</font>

372
00:15:32,620 --> 00:15:36,700
in fact is a total mess if you look at

373
00:15:34,360 --> 00:15:40,260
opendaylight the system as a whole is

374
00:15:36,700 --> 00:15:44,470
completely verifiable so by controlling

375
00:15:40,260 --> 00:15:46,240
this undecidable stuff in the middle or

376
00:15:44,470 --> 00:15:48,100
or hiding it just looking around the

377
00:15:46,240 --> 00:15:50,850
edges you could actually come up<font color="#E5E5E5"> with a</font>

378
00:15:48,100 --> 00:15:53,410
verifiable system with them with a key

379
00:15:50,850 --> 00:15:56,680
unverifiable component<font color="#E5E5E5"> okay we're</font><font color="#CCCCCC"> moving</font>

380
00:15:53,410 --> 00:16:01,000
beyond sdn to SDI now that<font color="#E5E5E5"> I've been</font>

381
00:15:56,680 --> 00:16:02,500
going for oh I would go<font color="#E5E5E5"> ten seconds it</font>

382
00:16:01,000 --> 00:16:05,020
doesn't tell me much all right I<font color="#E5E5E5"> when</font>

383
00:16:02,500 --> 00:16:06,460
going from<font color="#E5E5E5"> sdn and what software to find</font>

384
00:16:05,020 --> 00:16:08,590
infrastructure assist you go beyond

385
00:16:06,460 --> 00:16:12,270
defining the network but defining the

386
00:16:08,590 --> 00:16:14,920
whole ecosystem allocating containers

387
00:16:12,270 --> 00:16:17,220
populating them with software kicking

388
00:16:14,920 --> 00:16:19,949
them off to run various things

389
00:16:17,220 --> 00:16:23,860
controlling the network between them Go

390
00:16:19,950 --> 00:16:26,830
Go amazon<font color="#CCCCCC"> Genie whatever and make it</font>

391
00:16:23,860 --> 00:16:28,120
<font color="#CCCCCC">happen right so the key problem is</font>

392
00:16:26,830 --> 00:16:29,650
configuring the underlying

393
00:16:28,120 --> 00:16:31,390
infrastructure to do your application

394
00:16:29,650 --> 00:16:33,160
and what you'll typically do is<font color="#E5E5E5"> allocate</font>

395
00:16:31,390 --> 00:16:36,490
<font color="#E5E5E5">BMS and containers using something like</font>

396
00:16:33,160 --> 00:16:38,079
<font color="#CCCCCC">Nova but use</font><font color="#E5E5E5"> Software Defined Networking</font>

397
00:16:36,490 --> 00:16:40,180
to configure the networks may be working

398
00:16:38,080 --> 00:16:42,250
<font color="#CCCCCC">through a tool like neutron or better</font>

399
00:16:40,180 --> 00:16:44,189
yet oh noes if and<font color="#E5E5E5"> when that ever gets</font>

400
00:16:42,250 --> 00:16:47,220
well that is going to get released and

401
00:16:44,190 --> 00:16:49,150
then use and writing your your

402
00:16:47,220 --> 00:16:51,010
configuration code in something like

403
00:16:49,150 --> 00:16:52,540
<font color="#CCCCCC">frenetic which is</font><font color="#E5E5E5"> state free and then</font>

404
00:16:51,010 --> 00:16:55,510
use an orchid orchestrations and

405
00:16:52,540 --> 00:16:57,069
something like<font color="#E5E5E5"> ansible and he he and if</font>

406
00:16:55,510 --> 00:16:59,110
you take<font color="#E5E5E5"> a look at how these things work</font>

407
00:16:57,070 --> 00:17:01,110
these are either finite state in other

408
00:16:59,110 --> 00:17:03,190
words a pre-action markdown or

409
00:17:01,110 --> 00:17:04,839
restricted state which is<font color="#E5E5E5"> to say you can</font>

410
00:17:03,190 --> 00:17:06,190
load stuff in two variables but that is

411
00:17:04,839 --> 00:17:08,530
news and logic and they don't<font color="#CCCCCC"> have</font>

412
00:17:06,190 --> 00:17:11,320
things<font color="#E5E5E5"> like loops and stuff like that</font><font color="#CCCCCC"> so</font>

413
00:17:08,530 --> 00:17:14,020
it so it can it can hold values but

414
00:17:11,319 --> 00:17:16,480
these<font color="#CCCCCC"> things actually look like wires so</font>

415
00:17:14,020 --> 00:17:18,520
what that means is that hey look we can

416
00:17:16,480 --> 00:17:23,169
verify what is we can say<font color="#CCCCCC"> you're to put</font>

417
00:17:18,520 --> 00:17:25,418
your application deploys properly the

418
00:17:23,169 --> 00:17:27,519
work is configured properly you know me

419
00:17:25,419 --> 00:17:29,350
maybe your application still stinks

420
00:17:27,519 --> 00:17:30,850
that's always a possibility but<font color="#E5E5E5"> at least</font>

421
00:17:29,350 --> 00:17:34,330
we can prove we did the right thing and

422
00:17:30,850 --> 00:17:35,830
push up putting it out so that's a nice

423
00:17:34,330 --> 00:17:37,749
thing number<font color="#E5E5E5"> one which is and that's</font>

424
00:17:35,830 --> 00:17:42,070
actually<font color="#E5E5E5"> the next thing I'm going to be</font>

425
00:17:37,749 --> 00:17:46,109
doing in in a new operating<font color="#E5E5E5"> system that</font>

426
00:17:42,070 --> 00:17:49,149
we're building to control cities but

427
00:17:46,109 --> 00:17:51,999
well that<font color="#E5E5E5"> leaves but this is base this</font>

428
00:17:49,149 --> 00:17:53,309
is the next<font color="#CCCCCC"> to last slide which sure</font>

429
00:17:51,999 --> 00:17:55,749
<font color="#E5E5E5">everybody's going to be happy</font><font color="#CCCCCC"> about</font>

430
00:17:53,309 --> 00:18:00,668
which is<font color="#CCCCCC"> that this leads me to a wild</font>

431
00:17:55,749 --> 00:18:03,909
speculation is verifying<font color="#E5E5E5"> Turing machines</font>

432
00:18:00,669 --> 00:18:05,080
really undecidable and the answer is

433
00:18:03,909 --> 00:18:08,950
well of course you know there<font color="#E5E5E5"> are</font>

434
00:18:05,080 --> 00:18:12,668
theorems about this but the theorems

435
00:18:08,950 --> 00:18:14,139
don't say<font color="#E5E5E5"> uh you know you can't tell if</font>

436
00:18:12,669 --> 00:18:16,210
the system is going<font color="#E5E5E5"> to do what what it</font>

437
00:18:14,139 --> 00:18:18,639
was it says you<font color="#CCCCCC"> can't tell if this if</font>

438
00:18:16,210 --> 00:18:22,149
this Turing machine is going<font color="#E5E5E5"> to is going</font>

439
00:18:18,639 --> 00:18:24,758
to<font color="#E5E5E5"> do something reasonable so if we</font><font color="#CCCCCC"> take</font>

440
00:18:22,149 --> 00:18:27,369
a<font color="#E5E5E5"> look at soft at this this diagram of</font>

441
00:18:24,759 --> 00:18:29,830
software-defined networking that had a

442
00:18:27,369 --> 00:18:31,418
Turing machine sitting at its heart so

443
00:18:29,830 --> 00:18:34,269
the whole<font color="#CCCCCC"> thing should you know that</font>

444
00:18:31,419 --> 00:18:35,919
that thing<font color="#E5E5E5"> that was undecidable but the</font>

445
00:18:34,269 --> 00:18:37,929
system as a whole was too subtle because

446
00:18:35,919 --> 00:18:40,779
<font color="#CCCCCC">I surrounded it with it was surrounded</font>

447
00:18:37,929 --> 00:18:42,730
with enough finite verifiable stuff that

448
00:18:40,779 --> 00:18:44,859
whatever garbage it was doing in the

449
00:18:42,730 --> 00:18:46,509
<font color="#CCCCCC">middle didn't matter because we could</font>

450
00:18:44,859 --> 00:18:49,389
verify the inputs to the<font color="#E5E5E5"> Turing machine</font>

451
00:18:46,509 --> 00:18:51,759
its outputs so we can do the<font color="#CCCCCC"> same thing</font>

452
00:18:49,389 --> 00:18:53,590
with these little toy program not toy

453
00:18:51,759 --> 00:18:55,239
programs with these deployment engines

454
00:18:53,590 --> 00:18:56,799
that set up an infrastructure for<font color="#E5E5E5"> people</font>

455
00:18:55,239 --> 00:18:58,809
but could we do the same thing with

456
00:18:56,799 --> 00:19:01,539
German programs can we surround a

457
00:18:58,809 --> 00:19:04,690
program or components of a program with

458
00:19:01,539 --> 00:19:07,389
verifiable models and verify this stuff

459
00:19:04,690 --> 00:19:11,259
in<font color="#CCCCCC"> CID you and this</font><font color="#E5E5E5"> is I say the utterly</font>

460
00:19:07,389 --> 00:19:13,449
wild speculation so back when we were

461
00:19:11,259 --> 00:19:16,200
doing hardware for a living when I was

462
00:19:13,450 --> 00:19:20,049
doing<font color="#E5E5E5"> hardware for a living basically</font>

463
00:19:16,200 --> 00:19:21,909
the<font color="#CCCCCC"> you're you're</font><font color="#E5E5E5"> the stuff you were</font>

464
00:19:20,049 --> 00:19:24,549
verifying look like that it had some

465
00:19:21,909 --> 00:19:26,710
finite state input generator right so

466
00:19:24,549 --> 00:19:29,470
the world behave like a finite state

467
00:19:26,710 --> 00:19:31,239
machine and it poops stuff out at your

468
00:19:29,470 --> 00:19:33,279
your hardware design which was another

469
00:19:31,239 --> 00:19:34,749
finite state machine might be big and

470
00:19:33,279 --> 00:19:36,310
complicated but was a finite state

471
00:19:34,749 --> 00:19:37,870
machine

472
00:19:36,310 --> 00:19:39,700
and it too would interact and then you

473
00:19:37,870 --> 00:19:41,379
would get and then you would have<font color="#E5E5E5"> some</font>

474
00:19:39,700 --> 00:19:42,880
output specification which is here's

475
00:19:41,380 --> 00:19:45,490
what I think<font color="#E5E5E5"> the the output of this</font>

476
00:19:42,880 --> 00:19:47,830
thing should look like and you'd take

477
00:19:45,490 --> 00:19:49,840
the tensor product to these guys and you

478
00:19:47,830 --> 00:19:51,790
go and you say can this thing ever get

479
00:19:49,840 --> 00:19:53,740
into a wedge state right where you have

480
00:19:51,790 --> 00:19:55,360
some specification of what of what

481
00:19:53,740 --> 00:19:58,540
wedged would look like so you were able

482
00:19:55,360 --> 00:20:00,969
<font color="#E5E5E5">to verify it so that we could verify now</font>

483
00:19:58,540 --> 00:20:03,040
what we have<font color="#E5E5E5"> here in general in</font><font color="#CCCCCC"> the</font>

484
00:20:00,970 --> 00:20:05,920
world is we have some arbitrary and

485
00:20:03,040 --> 00:20:09,909
characterized inputs<font color="#E5E5E5"> Turing complete</font>

486
00:20:05,920 --> 00:20:11,770
program that's<font color="#CCCCCC"> that we can't verify and</font>

487
00:20:09,910 --> 00:20:13,390
some outputs and then we want to say

488
00:20:11,770 --> 00:20:14,910
<font color="#CCCCCC">just</font><font color="#E5E5E5"> the do the outputs do the right</font>

489
00:20:13,390 --> 00:20:16,930
thing to<font color="#CCCCCC"> the inputs and of course that's</font>

490
00:20:14,910 --> 00:20:19,780
or just the program do the right thing

491
00:20:16,930 --> 00:20:22,780
to the inputs to reduce the<font color="#CCCCCC"> outlet well</font>

492
00:20:19,780 --> 00:20:24,760
we don't know that but<font color="#E5E5E5"> what we do know I</font>

493
00:20:22,780 --> 00:20:26,620
mean and there are modeling finite state

494
00:20:24,760 --> 00:20:28,060
modeling tools that will let you take

495
00:20:26,620 --> 00:20:30,280
this for a program the trouble is that

496
00:20:28,060 --> 00:20:33,100
you can't prove that<font color="#E5E5E5"> it that the program</font>

497
00:20:30,280 --> 00:20:35,620
itself when it<font color="#E5E5E5"> rise corresponds to your</font>

498
00:20:33,100 --> 00:20:37,179
finite state model right or that the

499
00:20:35,620 --> 00:20:41,830
inputs are behaving as the finite state

500
00:20:37,180 --> 00:20:44,500
generator says but in fact when you're

501
00:20:41,830 --> 00:20:47,110
actually writing<font color="#E5E5E5"> the program you can you</font>

502
00:20:44,500 --> 00:20:51,130
can buy simulate right you can run the

503
00:20:47,110 --> 00:20:54,669
you can run the the the the<font color="#E5E5E5"> finite state</font>

504
00:20:51,130 --> 00:20:57,430
input thing and and in real time against

505
00:20:54,670 --> 00:21:02,290
<font color="#CCCCCC">the program and constantly check does</font>

506
00:20:57,430 --> 00:21:03,790
<font color="#E5E5E5">this thing actually correspond to</font><font color="#CCCCCC"> to to</font>

507
00:21:02,290 --> 00:21:05,649
<font color="#CCCCCC">the</font><font color="#E5E5E5"> to what the output is done and</font>

508
00:21:03,790 --> 00:21:07,300
already actually<font color="#E5E5E5"> programmers</font><font color="#CCCCCC"> do this</font>

509
00:21:05,650 --> 00:21:09,420
with the search statements right<font color="#E5E5E5"> i mean</font>

510
00:21:07,300 --> 00:21:13,180
what these things are is it's basically

511
00:21:09,420 --> 00:21:15,100
runtime runtime model checking within

512
00:21:13,180 --> 00:21:19,150
the body<font color="#E5E5E5"> of the program the problem is</font>

513
00:21:15,100 --> 00:21:20,800
that that the model checking is mixed

514
00:21:19,150 --> 00:21:23,080
with<font color="#CCCCCC"> the execution code so it's hard to</font>

515
00:21:20,800 --> 00:21:25,570
disentangle and disambiguate and<font color="#CCCCCC"> I've</font>

516
00:21:23,080 --> 00:21:27,790
<font color="#E5E5E5">been through that one since it's bad it</font>

517
00:21:25,570 --> 00:21:29,620
complicates the execution that makes the

518
00:21:27,790 --> 00:21:30,670
model hard to extract right you have<font color="#E5E5E5"> to</font>

519
00:21:29,620 --> 00:21:32,350
<font color="#E5E5E5">look at this collection of assert</font>

520
00:21:30,670 --> 00:21:34,180
statements and say oh well this is

521
00:21:32,350 --> 00:21:36,790
<font color="#E5E5E5">really what this guy is trying to say is</font>

522
00:21:34,180 --> 00:21:38,320
<font color="#CCCCCC">a model and it also makes the execution</font>

523
00:21:36,790 --> 00:21:40,750
code more complex than it has to be

524
00:21:38,320 --> 00:21:42,280
because<font color="#E5E5E5"> you you can't disentangle what's</font>

525
00:21:40,750 --> 00:21:44,650
actually doing something as opposed<font color="#E5E5E5"> to</font>

526
00:21:42,280 --> 00:21:46,270
what's checking itself and also it's not

527
00:21:44,650 --> 00:21:48,880
coupled to any formal verification

528
00:21:46,270 --> 00:21:49,660
engine so you can't construct proofs so

529
00:21:48,880 --> 00:21:51,310
I

530
00:21:49,660 --> 00:21:55,780
actually doing something like this is

531
00:21:51,310 --> 00:21:59,700
significant research opportunity so

532
00:21:55,780 --> 00:22:02,050
that's the<font color="#CCCCCC"> final word we need to design</font>

533
00:21:59,700 --> 00:22:03,730
basically i think i think<font color="#E5E5E5"> the</font>

534
00:22:02,050 --> 00:22:05,440
computational environments and language

535
00:22:03,730 --> 00:22:07,780
is needed to need to be designed with<font color="#E5E5E5"> an</font>

536
00:22:05,440 --> 00:22:10,300
eye to verification but it<font color="#E5E5E5"> doesn't mean</font>

537
00:22:07,780 --> 00:22:12,820
that<font color="#CCCCCC"> you need to actually go off and</font>

538
00:22:10,300 --> 00:22:13,930
redesign the guts to the language<font color="#E5E5E5"> I've</font>

539
00:22:12,820 --> 00:22:15,879
been<font color="#E5E5E5"> through that one before too and</font>

540
00:22:13,930 --> 00:22:18,130
that's really<font color="#E5E5E5"> hard because ecosystems</font>

541
00:22:15,880 --> 00:22:20,550
<font color="#E5E5E5">grow up around these things there</font>

542
00:22:18,130 --> 00:22:24,880
there's tools there are programmers

543
00:22:20,550 --> 00:22:26,860
there's there's compilers and there's

544
00:22:24,880 --> 00:22:29,290
culture and these things<font color="#E5E5E5"> are all very</font>

545
00:22:26,860 --> 00:22:31,479
<font color="#E5E5E5">very hard to change but what you can do</font>

546
00:22:29,290 --> 00:22:34,420
is surround these things with models and

547
00:22:31,480 --> 00:22:37,200
and construct bridges between the models

548
00:22:34,420 --> 00:22:40,390
and the program's themselves and get

549
00:22:37,200 --> 00:22:42,130
some verification<font color="#E5E5E5"> Nikki and more and the</font>

550
00:22:40,390 --> 00:22:44,860
the attraction to a developer on this by

551
00:22:42,130 --> 00:22:47,980
the way is oh you don't have to put some

552
00:22:44,860 --> 00:22:50,020
assert you don't have to put so many

553
00:22:47,980 --> 00:22:52,840
asserts statements in you know does the

554
00:22:50,020 --> 00:22:55,060
input look weird all<font color="#E5E5E5"> that stuff in your</font>

555
00:22:52,840 --> 00:22:57,669
code because the model if it's wrapped

556
00:22:55,060 --> 00:23:00,129
around properly<font color="#CCCCCC"> takes care of that so</font>

557
00:22:57,670 --> 00:23:02,770
<font color="#CCCCCC">that but the key is clean separate E and</font>

558
00:23:00,130 --> 00:23:05,230
use the runtime information to validate

559
00:23:02,770 --> 00:23:07,980
the correspondence and with<font color="#E5E5E5"> that thank</font>

560
00:23:05,230 --> 00:23:07,980
<font color="#E5E5E5">you very much for</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> time</font>

