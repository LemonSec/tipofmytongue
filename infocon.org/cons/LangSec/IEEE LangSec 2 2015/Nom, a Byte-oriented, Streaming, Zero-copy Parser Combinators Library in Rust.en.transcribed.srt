1
00:00:00,770 --> 00:00:07,470
hello<font color="#E5E5E5"> I'm Joe you free I'm</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to</font>

2
00:00:03,720 --> 00:00:16,230
talk<font color="#E5E5E5"> about</font><font color="#CCCCCC"> pasta communitas in rest</font><font color="#E5E5E5"> so</font>

3
00:00:07,470 --> 00:00:18,330
me<font color="#E5E5E5"> I'm I'm sorry</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so me I'm the</font>

4
00:00:16,230 --> 00:00:20,520
<font color="#E5E5E5">security guy at</font><font color="#CCCCCC"> clever cloud a</font><font color="#E5E5E5"> French</font>

5
00:00:18,330 --> 00:00:23,669
company doing<font color="#CCCCCC"> platform</font><font color="#E5E5E5"> the service</font>

6
00:00:20,520 --> 00:00:27,470
hosting<font color="#E5E5E5"> like Heroku but better just like</font>

7
00:00:23,670 --> 00:00:30,779
that<font color="#CCCCCC"> and I</font><font color="#E5E5E5"> also do some consulting</font>

8
00:00:27,470 --> 00:00:33,149
<font color="#E5E5E5">basically why are we talking about gnome</font>

9
00:00:30,779 --> 00:00:35,880
which is that cute puzzle<font color="#CCCCCC"> Combinator's</font>

10
00:00:33,149 --> 00:00:38,910
like well I'm<font color="#E5E5E5"> doing well</font>

11
00:00:35,880 --> 00:00:41,640
it all comes<font color="#E5E5E5"> from small projects that is</font>

12
00:00:38,910 --> 00:00:44,519
kind<font color="#E5E5E5"> of dear to me</font><font color="#CCCCCC"> I've worked</font><font color="#E5E5E5"> for a few</font>

13
00:00:41,640 --> 00:00:46,980
<font color="#E5E5E5">years for</font><font color="#CCCCCC"> VideoLAN</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> Windows</font>

14
00:00:44,520 --> 00:00:48,629
<font color="#E5E5E5">development and security reverse</font>

15
00:00:46,980 --> 00:00:50,148
engineers from formats<font color="#CCCCCC"> that kind of</font>

16
00:00:48,629 --> 00:00:55,879
stuff

17
00:00:50,149 --> 00:00:58,710
<font color="#E5E5E5">VLC has a big problem is</font><font color="#CCCCCC"> that it's the</font>

18
00:00:55,879 --> 00:01:02,309
software that that should handle all the

19
00:00:58,710 --> 00:01:05,099
<font color="#E5E5E5">format's that</font><font color="#CCCCCC"> exists like withdraw any</font>

20
00:01:02,309 --> 00:01:09,119
video any streaming<font color="#E5E5E5"> format it should</font>

21
00:01:05,099 --> 00:01:12,798
work<font color="#CCCCCC"> so it's good but there's the bad</font>

22
00:01:09,119 --> 00:01:15,600
part we have lots of vulnerabilities

23
00:01:12,799 --> 00:01:19,320
what's interesting here is<font color="#E5E5E5"> that the the</font>

24
00:01:15,600 --> 00:01:22,798
mp4 format<font color="#E5E5E5"> it's one of the most</font>

25
00:01:19,320 --> 00:01:26,369
<font color="#E5E5E5">ambiguous formats we we've seen it's</font>

26
00:01:22,799 --> 00:01:29,100
very hard to<font color="#E5E5E5"> write</font><font color="#CCCCCC"> a good passive</font><font color="#E5E5E5"> form</font>

27
00:01:26,369 --> 00:01:31,950
before at on the other<font color="#E5E5E5"> hand we have a</font>

28
00:01:29,100 --> 00:01:36,419
<font color="#E5E5E5">pass off</font><font color="#CCCCCC"> on matroska GMTV</font><font color="#E5E5E5"> fair files</font>

29
00:01:31,950 --> 00:01:39,590
which is<font color="#E5E5E5"> very big in a lot of files but</font>

30
00:01:36,420 --> 00:01:44,399
nobody seemed to<font color="#CCCCCC"> have found</font><font color="#E5E5E5"> any worse</font>

31
00:01:39,590 --> 00:01:47,000
maybe<font color="#E5E5E5"> check yourself solve this rule</font>

32
00:01:44,399 --> 00:01:50,509
<font color="#E5E5E5">that can just be found by simple fuzzing</font>

33
00:01:47,000 --> 00:01:54,990
so you always<font color="#E5E5E5"> find a crash somewhere</font>

34
00:01:50,509 --> 00:01:58,649
problem is we have<font color="#CCCCCC"> to write C parcel by</font>

35
00:01:54,990 --> 00:02:00,030
hand<font color="#CCCCCC"> so that's</font><font color="#E5E5E5"> not something</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> so we</font>

36
00:01:58,649 --> 00:02:04,560
need some<font color="#CCCCCC"> kind of more practical</font>

37
00:02:00,030 --> 00:02:07,590
<font color="#CCCCCC">solution what I would like is</font><font color="#E5E5E5"> something</font>

38
00:02:04,560 --> 00:02:11,099
<font color="#E5E5E5">that's Merri safe efficient enough for</font>

39
00:02:07,590 --> 00:02:13,310
streaming and<font color="#CCCCCC"> embed emergency</font><font color="#E5E5E5"> that kind</font>

40
00:02:11,099 --> 00:02:15,738
of requirement<font color="#E5E5E5"> is</font>

41
00:02:13,310 --> 00:02:18,470
important because the otherwise I would

42
00:02:15,739 --> 00:02:19,580
do<font color="#E5E5E5"> so just on a scale but the</font><font color="#CCCCCC"> runtime</font>

43
00:02:18,470 --> 00:02:21,859
with the<font color="#E5E5E5"> garbage collector</font><font color="#CCCCCC"> and</font>

44
00:02:19,580 --> 00:02:24,800
everything<font color="#CCCCCC"> is just too big for what we</font>

45
00:02:21,860 --> 00:02:28,099
want to do so I investigated the<font color="#CCCCCC"> rest</font>

46
00:02:24,800 --> 00:02:31,220
language that has<font color="#E5E5E5"> been developed by</font><font color="#CCCCCC"> the</font>

47
00:02:28,099 --> 00:02:34,940
<font color="#E5E5E5">Mozilla the 1.0 version was released</font>

48
00:02:31,220 --> 00:02:37,130
just last week so hopefully<font color="#CCCCCC"> now they</font>

49
00:02:34,940 --> 00:02:41,209
will stop breaking<font color="#CCCCCC"> the language every</font>

50
00:02:37,130 --> 00:02:45,260
<font color="#CCCCCC">two weeks yeah I've been</font><font color="#E5E5E5"> dropping</font><font color="#CCCCCC"> gnome</font>

51
00:02:41,209 --> 00:02:47,180
since October last<font color="#CCCCCC"> year</font><font color="#E5E5E5"> and at some</font>

52
00:02:45,260 --> 00:02:49,760
point but<font color="#CCCCCC"> just every</font><font color="#E5E5E5"> two weeks something</font>

53
00:02:47,180 --> 00:02:53,000
crashes and<font color="#E5E5E5"> you have to start over</font><font color="#CCCCCC"> but</font>

54
00:02:49,760 --> 00:02:54,530
right now it's very vegetable so<font color="#E5E5E5"> a few</font>

55
00:02:53,000 --> 00:02:58,989
lights on the features of<font color="#E5E5E5"> that</font><font color="#CCCCCC"> language</font>

56
00:02:54,530 --> 00:03:01,870
<font color="#CCCCCC">that pushed me</font><font color="#E5E5E5"> to choose it</font><font color="#CCCCCC"> so basically</font>

57
00:02:58,989 --> 00:03:04,819
they want to to<font color="#E5E5E5"> manage the memory</font>

58
00:03:01,870 --> 00:03:07,269
<font color="#E5E5E5">directly in the compiler because as a</font>

59
00:03:04,819 --> 00:03:10,069
developer<font color="#E5E5E5"> has a C developer</font><font color="#CCCCCC"> Isaac I</font>

60
00:03:07,269 --> 00:03:14,060
don't know how to develop a<font color="#CCCCCC"> pasta</font>

61
00:03:10,069 --> 00:03:16,458
<font color="#E5E5E5">correctly so I made mistakes and make</font>

62
00:03:14,060 --> 00:03:18,859
memory leaks<font color="#E5E5E5"> and so I shouldn't write</font>

63
00:03:16,459 --> 00:03:21,920
actually manage memory myself so

64
00:03:18,859 --> 00:03:25,640
basically in rust the compiler knows<font color="#CCCCCC"> at</font>

65
00:03:21,920 --> 00:03:29,030
any point in time<font color="#CCCCCC"> Hounds variable and</font>

66
00:03:25,640 --> 00:03:32,268
when it should<font color="#CCCCCC"> be allocated basically</font>

67
00:03:29,030 --> 00:03:36,500
you could write so some data sharing

68
00:03:32,269 --> 00:03:39,260
between between thread but it will<font color="#E5E5E5"> know</font>

69
00:03:36,500 --> 00:03:41,420
which thread and which wire<font color="#E5E5E5"> you've no</font>

70
00:03:39,260 --> 00:03:45,170
need for me taxes or anything<font color="#CCCCCC"> at all</font><font color="#E5E5E5"> so</font>

71
00:03:41,420 --> 00:03:47,208
that's quite powerful the other features

72
00:03:45,170 --> 00:03:49,910
that<font color="#E5E5E5"> Batman Christine you can manipulate</font>

73
00:03:47,209 --> 00:03:51,920
slices<font color="#E5E5E5"> instead of buffers the slice is</font>

74
00:03:49,910 --> 00:03:55,700
just<font color="#CCCCCC"> a structure containing a pointer</font>

75
00:03:51,920 --> 00:03:57,828
<font color="#E5E5E5">and</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> lens so maybe I thought what can</font>

76
00:03:55,700 --> 00:04:00,589
we do with<font color="#CCCCCC"> we've rust well we could do</font>

77
00:03:57,829 --> 00:04:03,739
some<font color="#E5E5E5"> zero copy passes like at the end of</font>

78
00:04:00,590 --> 00:04:06,440
<font color="#E5E5E5">the passing we just have pointers to the</font>

79
00:04:03,739 --> 00:04:10,040
relevant input and we don't copy

80
00:04:06,440 --> 00:04:13,160
anything<font color="#E5E5E5"> anyway so that was</font><font color="#CCCCCC"> a big bet</font>

81
00:04:10,040 --> 00:04:18,339
especially<font color="#CCCCCC"> in last October where</font><font color="#E5E5E5"> the</font>

82
00:04:13,160 --> 00:04:23,360
<font color="#E5E5E5">language was not that ready but well</font><font color="#CCCCCC"> a</font>

83
00:04:18,339 --> 00:04:27,500
trial<font color="#E5E5E5"> it was cute he was fun and he</font>

84
00:04:23,360 --> 00:04:38,330
how how it looks<font color="#E5E5E5"> so as we can</font><font color="#CCCCCC"> see is</font>

85
00:04:27,500 --> 00:04:39,740
that<font color="#E5E5E5"> big</font><font color="#CCCCCC"> enough</font><font color="#E5E5E5"> no okay</font><font color="#CCCCCC"> so first</font><font color="#E5E5E5"> thing</font>

86
00:04:38,330 --> 00:04:42,500
to<font color="#E5E5E5"> see</font>

87
00:04:39,740 --> 00:04:44,569
<font color="#E5E5E5">Rusty's language that has generics so</font>

88
00:04:42,500 --> 00:04:46,879
this is good because<font color="#CCCCCC"> as you see in the</font>

89
00:04:44,569 --> 00:04:49,250
first enumeration<font color="#CCCCCC"> we are result</font><font color="#E5E5E5"> the</font>

90
00:04:46,879 --> 00:04:53,030
<font color="#E5E5E5">result of</font><font color="#CCCCCC"> parser</font><font color="#E5E5E5"> we have done which</font>

91
00:04:49,250 --> 00:04:56,719
contains a part of the remaining input

92
00:04:53,030 --> 00:04:58,340
and the output type most of the time we

93
00:04:56,719 --> 00:05:02,150
manipulate byte arrays but we can

94
00:04:58,340 --> 00:05:04,758
manipulate anything<font color="#CCCCCC"> I'll go after on the</font>

95
00:05:02,150 --> 00:05:06,859
air or on<font color="#CCCCCC"> the incomplete but but</font>

96
00:05:04,759 --> 00:05:09,560
<font color="#E5E5E5">basically we have</font><font color="#CCCCCC"> we need to a</font><font color="#E5E5E5"> way to</font>

97
00:05:06,860 --> 00:05:12,169
represent<font color="#E5E5E5"> correctly errors and we need</font>

98
00:05:09,560 --> 00:05:14,270
to represent<font color="#E5E5E5"> incomplete data because</font>

99
00:05:12,169 --> 00:05:18,948
sometimes<font color="#CCCCCC"> just a person knows that it</font>

100
00:05:14,270 --> 00:05:23,599
must have<font color="#E5E5E5"> not more data so how</font><font color="#CCCCCC"> do you</font>

101
00:05:18,949 --> 00:05:26,750
write<font color="#CCCCCC"> paso it gets a bit hairy</font><font color="#E5E5E5"> basically</font>

102
00:05:23,599 --> 00:05:29,599
what we can see<font color="#CCCCCC"> at the</font><font color="#E5E5E5"> a posture of a</font>

103
00:05:26,750 --> 00:05:31,909
and it gets a lifetime<font color="#CCCCCC"> this is very</font>

104
00:05:29,599 --> 00:05:34,550
powerful because<font color="#CCCCCC"> you see that the output</font>

105
00:05:31,909 --> 00:05:36,830
<font color="#E5E5E5">data</font><font color="#CCCCCC"> as the</font><font color="#E5E5E5"> same</font><font color="#CCCCCC"> lifetime of the input</font>

106
00:05:34,550 --> 00:05:39,529
data that's how<font color="#E5E5E5"> I can</font><font color="#CCCCCC"> make sure that</font>

107
00:05:36,830 --> 00:05:43,849
data is not<font color="#CCCCCC"> compiler</font><font color="#E5E5E5"> is just a</font><font color="#CCCCCC"> reference</font>

108
00:05:39,529 --> 00:05:46,279
to the input<font color="#CCCCCC"> what do</font><font color="#E5E5E5"> we have on the</font>

109
00:05:43,849 --> 00:05:48,650
<font color="#CCCCCC">other side so</font><font color="#E5E5E5"> we can</font><font color="#CCCCCC"> return ours and</font>

110
00:05:46,279 --> 00:05:52,789
<font color="#E5E5E5">everything and you see the returned on</font>

111
00:05:48,650 --> 00:05:55,638
<font color="#E5E5E5">person</font><font color="#CCCCCC"> it's this is where</font><font color="#E5E5E5"> I take just a</font>

112
00:05:52,789 --> 00:05:59,990
slice of<font color="#CCCCCC"> the input data and return</font><font color="#E5E5E5"> it I</font>

113
00:05:55,639 --> 00:06:02,509
never<font color="#E5E5E5"> could be anything but it's kind of</font>

114
00:05:59,990 --> 00:06:05,500
hard<font color="#CCCCCC"> to write so there's no a feature</font>

115
00:06:02,509 --> 00:06:08,120
that's recall in rust<font color="#E5E5E5"> called the macros</font>

116
00:06:05,500 --> 00:06:11,389
<font color="#E5E5E5">that I started to use because it makes</font>

117
00:06:08,120 --> 00:06:13,669
the pass a bit easier to write<font color="#E5E5E5"> basically</font>

118
00:06:11,389 --> 00:06:16,669
<font color="#E5E5E5">I have the name macro to define a</font>

119
00:06:13,669 --> 00:06:19,520
function and then<font color="#CCCCCC"> it's this</font><font color="#E5E5E5"> just a chain</font>

120
00:06:16,669 --> 00:06:22,508
of<font color="#CCCCCC"> combinators</font><font color="#E5E5E5"> so here we have a simple</font>

121
00:06:19,520 --> 00:06:27,318
<font color="#E5E5E5">one but we have kind</font><font color="#CCCCCC"> of bigger ones</font><font color="#E5E5E5"> like</font>

122
00:06:22,509 --> 00:06:29,270
we<font color="#CCCCCC"> have the</font><font color="#E5E5E5"> mattress which can take the</font>

123
00:06:27,319 --> 00:06:31,940
result of<font color="#E5E5E5"> the first passer and apply a</font>

124
00:06:29,270 --> 00:06:34,430
function<font color="#E5E5E5"> on it we have the chain to</font>

125
00:06:31,940 --> 00:06:36,980
accumulate as a result and pass them in

126
00:06:34,430 --> 00:06:38,930
the closure so we can write

127
00:06:36,980 --> 00:06:41,450
some quite complex code very easily with

128
00:06:38,930 --> 00:06:44,900
<font color="#CCCCCC">these macros we have the usual</font>

129
00:06:41,450 --> 00:06:47,479
<font color="#CCCCCC">combinators</font><font color="#E5E5E5"> visual passers</font><font color="#CCCCCC"> some friend</font>

130
00:06:44,900 --> 00:06:51,380
just<font color="#E5E5E5"> proof contributed the begins</font><font color="#CCCCCC"> and</font>

131
00:06:47,480 --> 00:06:54,230
sign<font color="#E5E5E5"> passes</font><font color="#CCCCCC"> just yesterday</font><font color="#E5E5E5"> so I didn't</font>

132
00:06:51,380 --> 00:06:56,300
have<font color="#E5E5E5"> to write that good and with that</font>

133
00:06:54,230 --> 00:06:58,970
with a<font color="#E5E5E5"> language</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> those kind of</font>

134
00:06:56,300 --> 00:07:02,690
features<font color="#CCCCCC"> we</font><font color="#E5E5E5"> can get some interesting</font>

135
00:06:58,970 --> 00:07:03,320
performance so if you have seen the

136
00:07:02,690 --> 00:07:07,250
paper

137
00:07:03,320 --> 00:07:09,950
it's just I didn't write these two to

138
00:07:07,250 --> 00:07:12,980
see a<font color="#CCCCCC"> gnome</font><font color="#E5E5E5"> is the fastest</font><font color="#CCCCCC"> path</font><font color="#E5E5E5"> server</font>

139
00:07:09,950 --> 00:07:15,830
<font color="#E5E5E5">knows just to see where I was and also</font>

140
00:07:12,980 --> 00:07:20,270
to check what it wasn't the usability

141
00:07:15,830 --> 00:07:22,760
part basically<font color="#CCCCCC"> Hamelin on ways were a</font>

142
00:07:20,270 --> 00:07:26,060
bit hard to write so that's why<font color="#E5E5E5"> I</font>

143
00:07:22,760 --> 00:07:28,190
<font color="#E5E5E5">started to work on usability and macros</font>

144
00:07:26,060 --> 00:07:29,480
and everything<font color="#E5E5E5"> atop a second serial</font>

145
00:07:28,190 --> 00:07:32,360
<font color="#CCCCCC">weather which are written in a scale</font>

146
00:07:29,480 --> 00:07:36,410
were just so easy<font color="#E5E5E5"> to come to to write</font>

147
00:07:32,360 --> 00:07:39,980
int we understand and quite fast<font color="#CCCCCC"> too</font><font color="#E5E5E5"> so</font>

148
00:07:36,410 --> 00:07:41,510
<font color="#E5E5E5">that that's quite interesting because at</font>

149
00:07:39,980 --> 00:07:46,310
some point we would<font color="#CCCCCC"> like to</font><font color="#E5E5E5"> choose</font>

150
00:07:41,510 --> 00:07:48,590
easier to read instead of fast<font color="#E5E5E5"> and maybe</font>

151
00:07:46,310 --> 00:07:50,240
<font color="#CCCCCC">optimize afterwards</font>

152
00:07:48,590 --> 00:07:52,849
basically the<font color="#CCCCCC"> atop a</font><font color="#E5E5E5"> second</font><font color="#CCCCCC"> zero</font>

153
00:07:50,240 --> 00:07:56,720
<font color="#E5E5E5">passages one or two line different</font>

154
00:07:52,850 --> 00:07:59,360
<font color="#E5E5E5">nothing like that and that's one</font><font color="#CCCCCC"> of the</font>

155
00:07:56,720 --> 00:08:01,300
biggest goals of my project<font color="#CCCCCC"> I want to</font>

156
00:07:59,360 --> 00:08:04,370
<font color="#E5E5E5">make everything easier for developer</font>

157
00:08:01,300 --> 00:08:07,040
because there's not<font color="#E5E5E5"> only passing there's</font>

158
00:08:04,370 --> 00:08:10,250
all all the handling<font color="#E5E5E5"> the streaming and</font>

159
00:08:07,040 --> 00:08:13,610
everything like I present in the

160
00:08:10,250 --> 00:08:21,520
incomplete<font color="#E5E5E5"> part in</font><font color="#CCCCCC"> the new this is it</font>

161
00:08:13,610 --> 00:08:25,570
still<font color="#E5E5E5"> read about yeah maybe yeah right</font>

162
00:08:21,520 --> 00:08:28,729
<font color="#CCCCCC">ok</font><font color="#E5E5E5"> so incomplete is interesting because</font>

163
00:08:25,570 --> 00:08:31,849
<font color="#E5E5E5">sometimes</font><font color="#CCCCCC"> just want to tell ok I just</font>

164
00:08:28,730 --> 00:08:38,510
<font color="#CCCCCC">need</font><font color="#E5E5E5"> more data to understand the input</font>

165
00:08:31,850 --> 00:08:41,840
because with the streaming<font color="#E5E5E5"> RTP format or</font>

166
00:08:38,510 --> 00:08:44,330
mp4 like this kind of stuff<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know</font>

167
00:08:41,840 --> 00:08:47,660
more that<font color="#E5E5E5"> I will be able to come</font><font color="#CCCCCC"> so what</font>

168
00:08:44,330 --> 00:08:50,130
we do<font color="#E5E5E5"> after that</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> we have to</font>

169
00:08:47,660 --> 00:08:54,389
<font color="#CCCCCC">understand then it's not</font><font color="#E5E5E5"> really</font>

170
00:08:50,130 --> 00:08:55,949
I'm sorry<font color="#CCCCCC"> there's a lot</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> God here's a</font>

171
00:08:54,389 --> 00:08:58,199
<font color="#E5E5E5">pattern that I made easier for the</font>

172
00:08:55,949 --> 00:09:00,149
developer<font color="#E5E5E5"> because once you have</font><font color="#CCCCCC"> the inca</font>

173
00:08:58,199 --> 00:09:03,170
pitch<font color="#CCCCCC"> you can get all the plumbing to</font>

174
00:09:00,149 --> 00:09:07,620
<font color="#CCCCCC">pass the data as it comes</font><font color="#E5E5E5"> producer is</font>

175
00:09:03,170 --> 00:09:10,139
just some kind of piece<font color="#E5E5E5"> of data</font><font color="#CCCCCC"> data</font>

176
00:09:07,620 --> 00:09:12,959
comes like you're handling a file and

177
00:09:10,139 --> 00:09:14,819
goes all around the file<font color="#CCCCCC"> oh you get the</font>

178
00:09:12,959 --> 00:09:17,459
uniform<font color="#CCCCCC"> circuit</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> processor</font><font color="#E5E5E5"> will</font>

179
00:09:14,819 --> 00:09:18,990
handle passing the<font color="#CCCCCC"> data to</font><font color="#E5E5E5"> your passes</font>

180
00:09:17,459 --> 00:09:20,969
<font color="#CCCCCC">if he gets in complete it will</font>

181
00:09:18,990 --> 00:09:23,519
reallocate a buffer with the<font color="#E5E5E5"> proceeding</font>

182
00:09:20,970 --> 00:09:25,740
you put add more inputs<font color="#CCCCCC"> try</font><font color="#E5E5E5"> again and</font>

183
00:09:23,519 --> 00:09:29,880
all<font color="#CCCCCC"> of this ink automatically</font>

184
00:09:25,740 --> 00:09:31,019
automatically<font color="#E5E5E5"> but it's not enough we</font>

185
00:09:29,880 --> 00:09:36,240
<font color="#CCCCCC">need something more powerful</font>

186
00:09:31,019 --> 00:09:40,410
so we have the sorry<font color="#E5E5E5"> we have the</font>

187
00:09:36,240 --> 00:09:42,750
consumers the consumer is a bigger

188
00:09:40,410 --> 00:09:45,420
<font color="#CCCCCC">pattern basically</font><font color="#E5E5E5"> it's the other end and</font>

189
00:09:42,750 --> 00:09:48,500
it's a state machine<font color="#CCCCCC"> you implement</font>

190
00:09:45,420 --> 00:09:54,389
something<font color="#E5E5E5"> that will get a producer and</font>

191
00:09:48,500 --> 00:09:56,970
ask<font color="#CCCCCC"> data ask ok i io 8</font><font color="#E5E5E5"> 10 bytes or I</font>

192
00:09:54,389 --> 00:10:01,319
<font color="#E5E5E5">need</font><font color="#CCCCCC"> to seek back in the input or</font><font color="#E5E5E5"> seek</font>

193
00:09:56,970 --> 00:10:04,920
need to seek and your van so you can do

194
00:10:01,319 --> 00:10:07,979
that we have the plumbing for<font color="#E5E5E5"> that and</font>

195
00:10:04,920 --> 00:10:10,860
basically you<font color="#E5E5E5"> will define your state</font>

196
00:10:07,980 --> 00:10:14,550
your passes and you write your<font color="#CCCCCC"> state</font>

197
00:10:10,860 --> 00:10:16,350
machine like<font color="#E5E5E5"> so as an aside this is a</font>

198
00:10:14,550 --> 00:10:20,880
switch based tech machine<font color="#E5E5E5"> we all know</font>

199
00:10:16,350 --> 00:10:23,639
that it's a very<font color="#E5E5E5"> very bad</font><font color="#CCCCCC"> ID I tried to</font>

200
00:10:20,880 --> 00:10:27,120
play a bit with type and for state

201
00:10:23,639 --> 00:10:31,199
machines<font color="#E5E5E5"> in rust it's cute it's fun to</font>

202
00:10:27,120 --> 00:10:34,649
<font color="#E5E5E5">use</font><font color="#CCCCCC"> but basically we that's what</font><font color="#E5E5E5"> Eric</font>

203
00:10:31,199 --> 00:10:36,660
was<font color="#E5E5E5"> saying</font><font color="#CCCCCC"> we we need input</font><font color="#E5E5E5"> enable state</font>

204
00:10:34,649 --> 00:10:40,920
machines<font color="#E5E5E5"> so we</font><font color="#CCCCCC"> need to have any message</font>

205
00:10:36,660 --> 00:10:42,000
<font color="#CCCCCC">to come at any state so that kind of</font>

206
00:10:40,920 --> 00:10:43,800
<font color="#E5E5E5">state machine is</font><font color="#CCCCCC"> not good</font>

207
00:10:42,000 --> 00:10:49,290
I<font color="#E5E5E5"> should be off anyway to</font><font color="#CCCCCC"> generate them</font>

208
00:10:43,800 --> 00:10:52,920
for runtime<font color="#E5E5E5"> checking so I made it easier</font>

209
00:10:49,290 --> 00:10:56,370
<font color="#CCCCCC">to understand of pattern but</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> can do</font>

210
00:10:52,920 --> 00:10:58,949
better<font color="#CCCCCC"> for the developer</font><font color="#E5E5E5"> because the</font>

211
00:10:56,370 --> 00:11:00,720
passes are fun to write<font color="#CCCCCC"> but sometimes</font>

212
00:10:58,949 --> 00:11:03,819
when you<font color="#CCCCCC"> don't know</font><font color="#E5E5E5"> don't</font><font color="#CCCCCC"> know what</font>

213
00:11:00,720 --> 00:11:07,090
works<font color="#E5E5E5"> you you have to</font>

214
00:11:03,820 --> 00:11:09,310
to do a bit of guessing so for<font color="#CCCCCC"> the</font>

215
00:11:07,090 --> 00:11:13,150
<font color="#CCCCCC">dipping in part I</font><font color="#E5E5E5"> try to add some tools</font>

216
00:11:09,310 --> 00:11:17,050
that<font color="#E5E5E5"> could</font><font color="#CCCCCC"> make it fun to read to write</font>

217
00:11:13,150 --> 00:11:19,480
puzzles<font color="#E5E5E5"> so let's use a first tool that</font>

218
00:11:17,050 --> 00:11:21,130
<font color="#E5E5E5">will</font><font color="#CCCCCC"> note</font><font color="#E5E5E5"> the hex dump so that's easy</font>

219
00:11:19,480 --> 00:11:24,070
<font color="#CCCCCC">you take</font><font color="#E5E5E5"> a file you put it in hex dump</font>

220
00:11:21,130 --> 00:11:26,140
and it works well<font color="#E5E5E5"> why you shouldn't I be</font>

221
00:11:24,070 --> 00:11:28,270
<font color="#CCCCCC">able</font><font color="#E5E5E5"> to do that on</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> path so</font><font color="#CCCCCC"> that I</font>

222
00:11:26,140 --> 00:11:30,550
have in memory<font color="#E5E5E5"> on the path on the</font><font color="#CCCCCC"> Berthe</font>

223
00:11:28,270 --> 00:11:35,020
basically I see the<font color="#E5E5E5"> add an error with</font>

224
00:11:30,550 --> 00:11:39,609
women<font color="#CCCCCC"> on pasture I get</font><font color="#E5E5E5"> it slice and I do</font>

225
00:11:35,020 --> 00:11:43,150
a<font color="#CCCCCC"> hacking</font><font color="#E5E5E5"> stop this is the easiest one I</font>

226
00:11:39,610 --> 00:11:46,630
had the debug and debug macros<font color="#E5E5E5"> basically</font>

227
00:11:43,150 --> 00:11:49,120
if the child<font color="#E5E5E5"> passer returns an</font><font color="#CCCCCC"> arrow</font><font color="#E5E5E5"> it</font>

228
00:11:46,630 --> 00:11:52,450
prints the<font color="#E5E5E5"> arrow and the dependent will</font>

229
00:11:49,120 --> 00:11:57,250
also print the accident of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> input</font>

230
00:11:52,450 --> 00:12:00,820
<font color="#CCCCCC">tries but it's not enough we can do</font>

231
00:11:57,250 --> 00:12:03,190
better for<font color="#E5E5E5"> enrollment management</font><font color="#CCCCCC"> so it's</font>

232
00:12:00,820 --> 00:12:06,040
this<font color="#E5E5E5"> is why I have some complicated</font>

233
00:12:03,190 --> 00:12:09,820
types at the beginning in<font color="#CCCCCC"> nan the euro</font>

234
00:12:06,040 --> 00:12:14,199
was just just a neural code and nothing

235
00:12:09,820 --> 00:12:18,460
more<font color="#E5E5E5"> here we have the ability</font><font color="#CCCCCC"> to to show</font>

236
00:12:14,200 --> 00:12:22,090
error codes<font color="#E5E5E5"> position in the input and a</font>

237
00:12:18,460 --> 00:12:26,410
pointer to<font color="#E5E5E5"> the next</font><font color="#CCCCCC"> error</font><font color="#E5E5E5"> what can we do</font>

238
00:12:22,090 --> 00:12:29,440
with<font color="#E5E5E5"> that well we have the health the</font>

239
00:12:26,410 --> 00:12:32,640
error macro so<font color="#E5E5E5"> this macro is kind of</font>

240
00:12:29,440 --> 00:12:35,590
like the the<font color="#CCCCCC"> code operator in in Prolog</font>

241
00:12:32,640 --> 00:12:37,840
basically the<font color="#E5E5E5"> problem we have with</font><font color="#CCCCCC"> the</font>

242
00:12:35,590 --> 00:12:39,850
community<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that if there's an error it</font>

243
00:12:37,840 --> 00:12:42,130
will backtrack and try another one and

244
00:12:39,850 --> 00:12:45,940
<font color="#E5E5E5">that</font><font color="#CCCCCC"> at backtrack and the</font><font color="#E5E5E5"> pasta that we</font>

245
00:12:42,130 --> 00:12:48,310
return an error is the<font color="#E5E5E5"> root one and it</font>

246
00:12:45,940 --> 00:12:52,600
gives you zero information<font color="#CCCCCC"> or</font><font color="#E5E5E5"> non the</font>

247
00:12:48,310 --> 00:12:55,390
passing so with that<font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of macro you</font>

248
00:12:52,600 --> 00:12:58,330
can just return an error in the where

249
00:12:55,390 --> 00:13:00,730
<font color="#CCCCCC">wait</font><font color="#E5E5E5"> so that you can read under Lu</font><font color="#CCCCCC"> unity</font>

250
00:12:58,330 --> 00:13:04,150
<font color="#E5E5E5">to see</font><font color="#CCCCCC"> basically</font><font color="#E5E5E5"> will not backtrack we</font>

251
00:13:00,730 --> 00:13:06,580
just do an<font color="#CCCCCC"> error e return there's</font>

252
00:13:04,150 --> 00:13:09,340
another trick in there that if in<font color="#E5E5E5"> the</font>

253
00:13:06,580 --> 00:13:12,700
chain of child passes<font color="#E5E5E5"> there's another</font>

254
00:13:09,340 --> 00:13:17,800
evil macro it will touch that<font color="#E5E5E5"> area</font>

255
00:13:12,700 --> 00:13:19,540
return wrap<font color="#E5E5E5"> it added song and return so</font>

256
00:13:17,800 --> 00:13:24,819
so we have a chain of all that can<font color="#CCCCCC"> be</font>

257
00:13:19,540 --> 00:13:27,399
<font color="#E5E5E5">generated</font><font color="#CCCCCC"> like I don't</font><font color="#E5E5E5"> know if we see we</font>

258
00:13:24,819 --> 00:13:30,878
<font color="#CCCCCC">can have a better</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> here we see</font>

259
00:13:27,399 --> 00:13:33,149
<font color="#E5E5E5">that we</font><font color="#CCCCCC"> have a few</font><font color="#E5E5E5"> error that I would</font>

260
00:13:30,879 --> 00:13:37,149
unburied in<font color="#CCCCCC"> Java</font>

261
00:13:33,149 --> 00:13:40,779
what can we do with<font color="#CCCCCC"> that</font><font color="#E5E5E5"> the first thing</font>

262
00:13:37,149 --> 00:13:43,889
<font color="#CCCCCC">we can do is pattern match basically we</font>

263
00:13:40,779 --> 00:13:47,019
take the chain of error<font color="#CCCCCC"> code and try to</font>

264
00:13:43,889 --> 00:13:49,809
do get error message from that<font color="#E5E5E5"> there's a</font>

265
00:13:47,019 --> 00:13:52,509
problem<font color="#E5E5E5"> with this pattern matching will</font>

266
00:13:49,809 --> 00:13:54,879
break<font color="#E5E5E5"> if the grammar changes so there's</font>

267
00:13:52,509 --> 00:13:58,059
a<font color="#E5E5E5"> nice paper that you will see that's</font>

268
00:13:54,879 --> 00:14:00,129
<font color="#E5E5E5">called</font><font color="#CCCCCC"> mail that's</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> neuron management</font>

269
00:13:58,059 --> 00:14:03,399
system that<font color="#E5E5E5"> came from many of the in</font>

270
00:14:00,129 --> 00:14:06,429
<font color="#CCCCCC">akumal passes</font><font color="#E5E5E5"> basically the</font><font color="#CCCCCC"> IDS that</font><font color="#E5E5E5"> you</font>

271
00:14:03,399 --> 00:14:10,209
generate<font color="#E5E5E5"> around patterns from</font><font color="#CCCCCC"> known bad</font>

272
00:14:06,429 --> 00:14:11,738
inputs and you use<font color="#CCCCCC"> that as the your</font>

273
00:14:10,209 --> 00:14:14,079
management system<font color="#E5E5E5"> so here I take</font>

274
00:14:11,739 --> 00:14:17,920
<font color="#E5E5E5">somebody's</font><font color="#CCCCCC"> puddinin' oh I get</font><font color="#E5E5E5"> the error</font>

275
00:14:14,079 --> 00:14:21,429
that we<font color="#E5E5E5"> are returned I use that as watch</font>

276
00:14:17,920 --> 00:14:26,019
map if I<font color="#E5E5E5"> get a list of error code I do</font>

277
00:14:21,429 --> 00:14:28,110
directly the the<font color="#E5E5E5"> good a local and a last</font>

278
00:14:26,019 --> 00:14:32,110
<font color="#E5E5E5">one feature that we can do with the</font>

279
00:14:28,110 --> 00:14:36,549
chain of errors<font color="#E5E5E5"> is this we can see which</font>

280
00:14:32,110 --> 00:14:39,309
part of the<font color="#E5E5E5"> input in the ex dumped his</font>

281
00:14:36,549 --> 00:14:41,619
under<font color="#E5E5E5"> so there's a</font><font color="#CCCCCC"> program</font><font color="#E5E5E5"> if</font><font color="#CCCCCC"> that is</font>

282
00:14:39,309 --> 00:14:46,230
that<font color="#E5E5E5"> it's a chain it's a path in the</font>

283
00:14:41,619 --> 00:14:49,389
<font color="#E5E5E5">past episode</font><font color="#CCCCCC"> 3 so we do not see</font>

284
00:14:46,230 --> 00:14:51,970
contiguous<font color="#E5E5E5"> passes but we see just parent</font>

285
00:14:49,389 --> 00:14:54,549
child child child child<font color="#E5E5E5"> but it's quite</font>

286
00:14:51,970 --> 00:14:57,339
cool<font color="#E5E5E5"> I should say it's very was very</font><font color="#CCCCCC"> fun</font>

287
00:14:54,549 --> 00:15:01,089
to<font color="#E5E5E5"> develop and is quite cool</font><font color="#CCCCCC"> to use so</font>

288
00:14:57,339 --> 00:15:07,629
is it usable<font color="#CCCCCC"> no</font><font color="#E5E5E5"> well I'd say yes because</font>

289
00:15:01,089 --> 00:15:12,970
people<font color="#E5E5E5"> are using it so basically the</font>

290
00:15:07,629 --> 00:15:16,569
<font color="#CCCCCC">energy fan mp4 where mine because</font><font color="#E5E5E5"> I had</font>

291
00:15:12,970 --> 00:15:18,569
to try it but some<font color="#E5E5E5"> guy did the first</font><font color="#CCCCCC"> cue</font>

292
00:15:16,569 --> 00:15:19,959
which<font color="#E5E5E5"> is text format form colleague</font>

293
00:15:18,569 --> 00:15:22,689
genetic data

294
00:15:19,959 --> 00:15:25,209
<font color="#CCCCCC">Lib config</font><font color="#E5E5E5"> switched and Kafka for</font>

295
00:15:22,689 --> 00:15:28,719
messaging format<font color="#E5E5E5"> some ic1</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> also a</font>

296
00:15:25,209 --> 00:15:29,750
<font color="#E5E5E5">small company that you may know that has</font>

297
00:15:28,720 --> 00:15:34,220
<font color="#E5E5E5">used</font><font color="#CCCCCC"> no</font>

298
00:15:29,750 --> 00:15:36,649
for sometimes so some guy contacted me a

299
00:15:34,220 --> 00:15:40,550
<font color="#CCCCCC">few months</font><font color="#E5E5E5"> ago hey we do a streaming</font>

300
00:15:36,649 --> 00:15:42,970
HTTP<font color="#CCCCCC"> parsing we've done and it's quite</font>

301
00:15:40,550 --> 00:15:47,540
fast<font color="#CCCCCC"> all</font><font color="#E5E5E5"> right</font>

302
00:15:42,970 --> 00:15:50,569
so to sum up we have a language<font color="#CCCCCC"> and</font><font color="#E5E5E5"> a</font>

303
00:15:47,540 --> 00:15:53,329
passer<font color="#E5E5E5"> library is fast that is memory</font>

304
00:15:50,569 --> 00:15:56,029
safe<font color="#E5E5E5"> that has no runtime cost no garbage</font>

305
00:15:53,329 --> 00:15:58,209
collection nothing like that that can<font color="#E5E5E5"> be</font>

306
00:15:56,029 --> 00:16:00,889
embedded in<font color="#CCCCCC"> C and</font><font color="#E5E5E5"> made sure</font><font color="#CCCCCC"> it works</font><font color="#E5E5E5"> and</font>

307
00:15:58,209 --> 00:16:03,768
as a lot of<font color="#E5E5E5"> touring for the</font><font color="#CCCCCC"> reverse</font><font color="#E5E5E5"> so</font>

308
00:16:00,889 --> 00:16:06,800
this is not<font color="#E5E5E5"> very</font><font color="#CCCCCC"> formal but this is what</font>

309
00:16:03,769 --> 00:16:09,589
developers<font color="#E5E5E5"> like something that is easy</font>

310
00:16:06,800 --> 00:16:15,349
<font color="#E5E5E5">to use</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> tooling</font><font color="#CCCCCC"> that is makes the</font>

311
00:16:09,589 --> 00:16:20,480
<font color="#E5E5E5">development more interactive so</font><font color="#CCCCCC"> you have</font>

312
00:16:15,350 --> 00:16:24,100
the github<font color="#E5E5E5"> URL</font><font color="#CCCCCC"> I can take</font><font color="#E5E5E5"> question if</font>

313
00:16:20,480 --> 00:16:24,100
<font color="#E5E5E5">you me thank you</font>

314
00:16:29,980 --> 00:16:43,910
Oh<font color="#CCCCCC"> questions right truly array of hope</font>

315
00:16:40,839 --> 00:16:47,959
right<font color="#E5E5E5"> especially</font><font color="#CCCCCC"> I was especially</font><font color="#E5E5E5"> glad</font>

316
00:16:43,910 --> 00:16:56,389
to see the usage slide and then know the

317
00:16:47,959 --> 00:16:59,050
story<font color="#CCCCCC"> questions no rest programmers here</font>

318
00:16:56,389 --> 00:17:03,199
<font color="#E5E5E5">yeah well maybe after this day</font><font color="#CCCCCC"> I</font>

319
00:16:59,050 --> 00:17:08,559
certainly do know that<font color="#E5E5E5"> I'm going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> try</font>

320
00:17:03,199 --> 00:17:08,559
<font color="#E5E5E5">to write</font><font color="#CCCCCC"> something in</font><font color="#E5E5E5"> this language</font>

321
00:17:13,890 --> 00:17:17,290
I'm using one<font color="#E5E5E5"> breast in one of my</font>

322
00:17:16,000 --> 00:17:20,319
classes<font color="#CCCCCC"> on programming languages for</font>

323
00:17:17,290 --> 00:17:22,720
<font color="#E5E5E5">grad students and you know I've said</font><font color="#CCCCCC"> it</font>

324
00:17:20,319 --> 00:17:24,520
<font color="#CCCCCC">I</font><font color="#E5E5E5"> was looking around for</font><font color="#CCCCCC"> a parser but do</font>

325
00:17:22,720 --> 00:17:26,400
you think<font color="#E5E5E5"> it's ready you know enough for</font>

326
00:17:24,520 --> 00:17:28,450
grad students to use at this point or

327
00:17:26,400 --> 00:17:32,860
how much<font color="#CCCCCC"> what background is a student</font>

328
00:17:28,450 --> 00:17:36,010
have to<font color="#E5E5E5"> have use your library it's quite</font>

329
00:17:32,860 --> 00:17:37,899
hard to get<font color="#E5E5E5"> a lot of concepts most</font>

330
00:17:36,010 --> 00:17:41,980
<font color="#CCCCCC">happened about the</font><font color="#E5E5E5"> the memory because</font>

331
00:17:37,900 --> 00:17:44,170
the the<font color="#CCCCCC"> the compiler is just too smart</font>

332
00:17:41,980 --> 00:17:47,560
and sometimes you don't<font color="#E5E5E5"> understand what</font>

333
00:17:44,170 --> 00:17:49,660
<font color="#E5E5E5">20 means like there's some weird memory</font>

334
00:17:47,560 --> 00:17:53,800
<font color="#CCCCCC">error</font><font color="#E5E5E5"> that can happen but it's not</font>

335
00:17:49,660 --> 00:17:56,320
self-evident<font color="#E5E5E5"> and for beginner it can be</font>

336
00:17:53,800 --> 00:17:59,110
hard sometimes<font color="#CCCCCC"> but</font><font color="#E5E5E5"> basically it gets</font>

337
00:17:56,320 --> 00:18:09,220
<font color="#CCCCCC">smarter and smarter and</font><font color="#E5E5E5"> makes it easier</font>

338
00:17:59,110 --> 00:18:12,389
to thank you so I have a question<font color="#CCCCCC"> have</font>

339
00:18:09,220 --> 00:18:18,340
you<font color="#CCCCCC"> looked at data structures that</font>

340
00:18:12,390 --> 00:18:21,850
<font color="#E5E5E5">ssl/tls uses yes I'm not confident in</font>

341
00:18:18,340 --> 00:18:28,709
writing a TLS passer right now it may<font color="#E5E5E5"> be</font>

342
00:18:21,850 --> 00:18:31,740
doable<font color="#E5E5E5"> but basically</font><font color="#CCCCCC"> almost any binary</font>

343
00:18:28,710 --> 00:18:36,970
format right now<font color="#CCCCCC"> mm-hm</font>

344
00:18:31,740 --> 00:18:40,330
<font color="#CCCCCC">so how deeply nested</font><font color="#E5E5E5"> are the</font><font color="#CCCCCC"> format's</font>

345
00:18:36,970 --> 00:18:44,830
<font color="#CCCCCC">that</font><font color="#E5E5E5"> you have parse to date</font><font color="#CCCCCC"> ah well the</font>

346
00:18:40,330 --> 00:18:48,639
<font color="#CCCCCC">Jif one when you try to get</font><font color="#E5E5E5"> the image</font>

347
00:18:44,830 --> 00:18:51,980
data<font color="#E5E5E5"> it's on bit stream not a byte</font>

348
00:18:48,640 --> 00:18:55,880
stream so but that's not

349
00:18:51,980 --> 00:18:57,980
<font color="#CCCCCC">by tonight so you have some</font><font color="#E5E5E5"> time to get</font>

350
00:18:55,880 --> 00:19:00,470
free<font color="#CCCCCC"> bytes from the preceding three bits</font>

351
00:18:57,980 --> 00:19:05,660
from<font color="#E5E5E5"> the person</font><font color="#CCCCCC"> in byte and that's quite</font>

352
00:19:00,470 --> 00:19:08,810
annoying<font color="#E5E5E5"> the mp4 format is very very</font>

353
00:19:05,660 --> 00:19:12,620
<font color="#E5E5E5">ambiguous because well there's</font><font color="#CCCCCC"> a some</font>

354
00:19:08,810 --> 00:19:14,750
<font color="#E5E5E5">some a tone</font><font color="#CCCCCC"> that has a tag in</font><font color="#E5E5E5"> indicating</font>

355
00:19:12,620 --> 00:19:19,100
the<font color="#CCCCCC"> length</font><font color="#E5E5E5"> and then another tag that</font>

356
00:19:14,750 --> 00:19:23,600
<font color="#CCCCCC">indicates is if it</font><font color="#E5E5E5"> uses 32 or 64-bit</font>

357
00:19:19,100 --> 00:19:25,610
integers so that<font color="#CCCCCC"> changes land and you</font>

358
00:19:23,600 --> 00:19:28,010
can have nesting nested items that's

359
00:19:25,610 --> 00:19:31,250
quite hard to<font color="#E5E5E5"> write even with</font><font color="#CCCCCC"> path</font>

360
00:19:28,010 --> 00:19:41,629
<font color="#E5E5E5">illuminators did you have to introduce</font>

361
00:19:31,250 --> 00:19:45,740
<font color="#E5E5E5">any new kind of</font><font color="#CCCCCC"> combinators basically</font>

362
00:19:41,630 --> 00:19:49,370
most<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the ones I use already known</font><font color="#E5E5E5"> the</font>

363
00:19:45,740 --> 00:19:53,000
error one was quite<font color="#CCCCCC"> different because</font><font color="#E5E5E5"> it</font>

364
00:19:49,370 --> 00:19:56,209
can accumulate errors<font color="#E5E5E5"> but the other ones</font>

365
00:19:53,000 --> 00:19:58,750
are<font color="#E5E5E5"> quite classic yeah right</font>

366
00:19:56,210 --> 00:19:58,750
oh thank you

