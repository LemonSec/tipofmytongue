1
00:00:00,010 --> 00:00:03,909
so I'm Mike Petula I'm from<font color="#CCCCCC"> the United</font>

2
00:00:02,560 --> 00:00:05,859
States Military Academy which you may

3
00:00:03,909 --> 00:00:07,600
know as West Point we teach

4
00:00:05,860 --> 00:00:09,730
undergraduate students and one of my

5
00:00:07,600 --> 00:00:10,959
students at Joseph saw did this work

6
00:00:09,730 --> 00:00:12,820
<font color="#CCCCCC">with me unfortunately he wasn't</font><font color="#E5E5E5"> able to</font>

7
00:00:10,960 --> 00:00:14,680
come because he<font color="#E5E5E5"> had some obligations</font>

8
00:00:12,820 --> 00:00:16,810
with<font color="#CCCCCC"> the summer training so he might be</font>

9
00:00:14,680 --> 00:00:20,920
in the woods somewhere<font color="#E5E5E5"> right now I'm not</font>

10
00:00:16,810 --> 00:00:23,948
<font color="#CCCCCC">sure what he's up to right now so as the</font>

11
00:00:20,920 --> 00:00:25,840
introduction said this is work follow

12
00:00:23,949 --> 00:00:27,220
unworked what was presented last year so

13
00:00:25,840 --> 00:00:29,890
<font color="#E5E5E5">I'm going to kind of glaze through the</font>

14
00:00:27,220 --> 00:00:31,900
introduction you can refer to<font color="#E5E5E5"> that paper</font>

15
00:00:29,890 --> 00:00:36,539
if you're interested it's on the

16
00:00:31,900 --> 00:00:38,469
generality of convenience of<font color="#E5E5E5"> e-types and</font>

17
00:00:36,539 --> 00:00:39,309
let me let me just try something out<font color="#CCCCCC"> on</font>

18
00:00:38,469 --> 00:00:41,859
you something<font color="#CCCCCC"> to come up with this</font>

19
00:00:39,309 --> 00:00:43,419
morning so<font color="#E5E5E5"> you know I'm this is probably</font>

20
00:00:41,859 --> 00:00:45,670
end up being a light rather light talk

21
00:00:43,420 --> 00:00:46,510
but I hope you some of you at<font color="#CCCCCC"> least find</font>

22
00:00:45,670 --> 00:00:47,469
it kind of interesting<font color="#CCCCCC"> because we're</font>

23
00:00:46,510 --> 00:00:49,030
looking at<font color="#E5E5E5"> from the point of view of the</font>

24
00:00:47,469 --> 00:00:50,920
operating system is operating<font color="#CCCCCC"> system</font>

25
00:00:49,030 --> 00:00:53,289
designers but just let<font color="#CCCCCC"> me try something</font>

26
00:00:50,920 --> 00:00:55,899
<font color="#CCCCCC">out with you guys I would</font><font color="#E5E5E5"> just say that</font>

27
00:00:53,289 --> 00:01:01,359
are our operating system<font color="#CCCCCC"> is somewhat</font>

28
00:00:55,899 --> 00:01:02,589
laying sexy all right maybe that's the

29
00:01:01,359 --> 00:01:06,310
new<font color="#E5E5E5"> adjective we can start using on</font>

30
00:01:02,589 --> 00:01:09,970
things I'm<font color="#CCCCCC"> not sure okay</font><font color="#E5E5E5"> all right so</font>

31
00:01:06,310 --> 00:01:11,500
where do we start sometimes you<font color="#E5E5E5"> know</font><font color="#CCCCCC"> I</font>

32
00:01:09,970 --> 00:01:12,970
<font color="#CCCCCC">see that in</font><font color="#E5E5E5"> the literature summer I'm</font>

33
00:01:11,500 --> 00:01:15,820
going to have to<font color="#CCCCCC"> take credit there but</font>

34
00:01:12,970 --> 00:01:17,560
<font color="#E5E5E5">maybe I won't see it sometime ago jon</font>

35
00:01:15,820 --> 00:01:19,600
snow has started a project and he was

36
00:01:17,560 --> 00:01:21,160
looking<font color="#CCCCCC"> at really crafting os's that</font>

37
00:01:19,600 --> 00:01:23,080
really encouraged secure secure

38
00:01:21,160 --> 00:01:25,690
applications of course we have a lot of

39
00:01:23,080 --> 00:01:27,340
<font color="#CCCCCC">os's that perform various authorization</font>

40
00:01:25,690 --> 00:01:29,140
systems and whatnot but really when it

41
00:01:27,340 --> 00:01:31,630
comes down to the OS that makes is there

42
00:01:29,140 --> 00:01:33,730
to run applications and we want to do

43
00:01:31,630 --> 00:01:36,460
what we can<font color="#CCCCCC"> to make</font><font color="#E5E5E5"> writing robust or</font>

44
00:01:33,730 --> 00:01:38,800
secure applications easier<font color="#E5E5E5"> okay one of</font>

45
00:01:36,460 --> 00:01:41,470
the intuitions battalion ethos is that

46
00:01:38,800 --> 00:01:42,700
so the idea<font color="#E5E5E5"> is OS has provided property</font>

47
00:01:41,470 --> 00:01:44,050
call it complete mediation where the

48
00:01:42,700 --> 00:01:45,610
<font color="#E5E5E5">application can't really do anything out</font>

49
00:01:44,050 --> 00:01:49,060
of its own memory space unless it goes

50
00:01:45,610 --> 00:01:50,200
to the<font color="#CCCCCC"> OSS system calls okay so the one</font>

51
00:01:49,060 --> 00:01:52,030
of the intuitions of ethos is we

52
00:01:50,200 --> 00:01:55,080
leverage that property to try to improve

53
00:01:52,030 --> 00:01:57,490
security<font color="#E5E5E5"> okay we've been leveraging</font>

54
00:01:55,080 --> 00:01:59,520
complete mediation improve reliability

55
00:01:57,490 --> 00:02:03,280
for some time really since<font color="#E5E5E5"> the 70s</font>

56
00:01:59,520 --> 00:02:06,759
decades and<font color="#CCCCCC"> I'll give you an example</font>

57
00:02:03,280 --> 00:02:08,799
<font color="#E5E5E5">right so the fork system call right you</font>

58
00:02:06,760 --> 00:02:11,469
invoke fork and then what's the API

59
00:02:08,799 --> 00:02:12,870
after you forked to get your your memory

60
00:02:11,469 --> 00:02:14,489
isolated right

61
00:02:12,870 --> 00:02:16,019
of course there's no api to isolate your

62
00:02:14,489 --> 00:02:17,549
memory after your fork is the memory

63
00:02:16,019 --> 00:02:19,620
isolations baked into the fork system

64
00:02:17,549 --> 00:02:21,930
call it's this it's in the semantics of

65
00:02:19,620 --> 00:02:23,010
<font color="#E5E5E5">the fork system call itself so we kind</font>

66
00:02:21,930 --> 00:02:24,569
of look at well there are other

67
00:02:23,010 --> 00:02:26,310
semantics we can brought<font color="#CCCCCC"> draw on the OS</font>

68
00:02:24,569 --> 00:02:28,500
so the application don't have to worry

69
00:02:26,310 --> 00:02:30,569
about them<font color="#CCCCCC"> okay and so this</font><font color="#E5E5E5"> lang</font><font color="#CCCCCC"> SEC</font>

70
00:02:28,500 --> 00:02:32,069
type idea that every input should<font color="#E5E5E5"> be</font>

71
00:02:30,569 --> 00:02:33,629
recognized before it's actually acted

72
00:02:32,069 --> 00:02:35,069
upon is something we're trying to pull

73
00:02:33,629 --> 00:02:37,109
in the OS so that<font color="#E5E5E5"> kind of summarize what</font>

74
00:02:35,069 --> 00:02:38,458
we're trying to do<font color="#CCCCCC"> with ethos other</font>

75
00:02:37,110 --> 00:02:40,230
things as well encryption other things

76
00:02:38,459 --> 00:02:44,819
but<font color="#E5E5E5"> I'm gonna focus in on again the</font><font color="#CCCCCC"> lang</font>

77
00:02:40,230 --> 00:02:48,260
sexy part right so the<font color="#E5E5E5"> way that sort of</font>

78
00:02:44,819 --> 00:02:52,200
works out is in an ethos programmers

79
00:02:48,260 --> 00:02:54,149
they declare the types of all the OS

80
00:02:52,200 --> 00:02:55,798
objects OS objects being files and

81
00:02:54,150 --> 00:02:58,109
network connections and<font color="#CCCCCC"> inter process</font>

82
00:02:55,799 --> 00:03:01,379
<font color="#CCCCCC">communication channels everything in</font>

83
00:02:58,109 --> 00:03:03,120
ethos is typed and essentially what

84
00:03:01,379 --> 00:03:05,760
happens if you imagine we<font color="#CCCCCC"> have a program</font>

85
00:03:03,120 --> 00:03:07,859
that happens to<font color="#E5E5E5"> be written</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> Java does</font>

86
00:03:05,760 --> 00:03:09,810
a right system call of course that needs

87
00:03:07,859 --> 00:03:11,159
to pass through<font color="#E5E5E5"> the kernel and since</font>

88
00:03:09,810 --> 00:03:13,170
we've typed all our inter process

89
00:03:11,159 --> 00:03:14,519
communication channels for example that

90
00:03:13,170 --> 00:03:16,708
gives ethos the opportunity to recognize

91
00:03:14,519 --> 00:03:18,959
that<font color="#E5E5E5"> information before it ever becomes</font>

92
00:03:16,709 --> 00:03:20,130
input for this second program that

93
00:03:18,959 --> 00:03:23,099
happens to<font color="#E5E5E5"> be written</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> C down here</font>

94
00:03:20,130 --> 00:03:24,329
<font color="#CCCCCC">okay so idea is that</font><font color="#E5E5E5"> you know we kind of</font>

95
00:03:23,099 --> 00:03:25,590
talked about earlier that we should<font color="#E5E5E5"> be</font>

96
00:03:24,329 --> 00:03:27,480
able to point our finger at where our

97
00:03:25,590 --> 00:03:29,280
recognition routines are as opposed to

98
00:03:27,480 --> 00:03:30,959
where our logic is and<font color="#E5E5E5"> I will</font><font color="#CCCCCC"> tell you</font>

99
00:03:29,280 --> 00:03:32,160
that an ethos the recognition routines

100
00:03:30,959 --> 00:03:34,019
are right here I can<font color="#E5E5E5"> point at them every</font>

101
00:03:32,160 --> 00:03:35,849
<font color="#E5E5E5">time they're in the kernel and no data</font>

102
00:03:34,019 --> 00:03:41,099
no data flows through the system unless

103
00:03:35,849 --> 00:03:42,720
it's been recognized<font color="#E5E5E5"> okay so you know we</font>

104
00:03:41,099 --> 00:03:43,980
might have other other writes and reads

105
00:03:42,720 --> 00:03:45,810
going on they might be going over out

106
00:03:43,980 --> 00:03:47,010
the network or going to files whatever

107
00:03:45,810 --> 00:03:48,359
<font color="#CCCCCC">it maybe they're</font><font color="#E5E5E5"> going to be recognized</font>

108
00:03:47,010 --> 00:03:50,250
by the OS before they pass along

109
00:03:48,359 --> 00:03:54,599
otherwise the right of the read will

110
00:03:50,250 --> 00:03:56,489
fail so we<font color="#E5E5E5"> present the details of how</font>

111
00:03:54,599 --> 00:03:58,679
ethos actually pulls this off last year

112
00:03:56,489 --> 00:04:01,620
<font color="#CCCCCC">Lang sec okay so you can see that 2014</font>

113
00:03:58,680 --> 00:04:03,209
paper there if you'd like<font color="#CCCCCC"> to okay so</font>

114
00:04:01,620 --> 00:04:04,680
before<font color="#E5E5E5"> I move on I'm just going to</font>

115
00:04:03,209 --> 00:04:05,819
introduce four components from kind<font color="#E5E5E5"> of</font>

116
00:04:04,680 --> 00:04:08,459
last year's paper they're important for

117
00:04:05,819 --> 00:04:10,319
<font color="#E5E5E5">this talk the first one is this thing</font>

118
00:04:08,459 --> 00:04:12,239
called a notation and what a notation is

119
00:04:10,319 --> 00:04:14,099
it's essentially a type interface

120
00:04:12,239 --> 00:04:15,599
description language this<font color="#CCCCCC"> is where you</font>

121
00:04:14,099 --> 00:04:18,000
describe the types that<font color="#E5E5E5"> are going to be</font>

122
00:04:15,599 --> 00:04:19,409
<font color="#E5E5E5">permitted by</font><font color="#CCCCCC"> the system ok so it's</font>

123
00:04:18,000 --> 00:04:21,269
partially describing types and then also

124
00:04:19,410 --> 00:04:23,430
interfaces because we<font color="#E5E5E5"> kind of we roll</font>

125
00:04:21,269 --> 00:04:25,950
our pcs into the system as well remote

126
00:04:23,430 --> 00:04:26,730
procedure calls corresponding to<font color="#CCCCCC"> e</font>

127
00:04:25,950 --> 00:04:27,990
notation

128
00:04:26,730 --> 00:04:29,460
something called a coding and that's

129
00:04:27,990 --> 00:04:30,960
just the wire format<font color="#CCCCCC"> okay so there's a</font>

130
00:04:29,460 --> 00:04:32,940
<font color="#E5E5E5">there's a single wire format for any</font>

131
00:04:30,960 --> 00:04:34,979
thing I declare using an e notation

132
00:04:32,940 --> 00:04:38,250
there's a corresponding eco team that

133
00:04:34,980 --> 00:04:39,870
<font color="#E5E5E5">would be used within the system okay the</font>

134
00:04:38,250 --> 00:04:41,280
other two things are two tools that use

135
00:04:39,870 --> 00:04:43,110
during development the first tool is

136
00:04:41,280 --> 00:04:45,840
called et 2g<font color="#CCCCCC"> and what</font><font color="#E5E5E5"> et tu G is it</font>

137
00:04:43,110 --> 00:04:47,790
takes some notation specifications and

138
00:04:45,840 --> 00:04:49,619
it essentially compiles that into

139
00:04:47,790 --> 00:04:51,540
machine readable description of the

140
00:04:49,620 --> 00:04:53,340
types<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> because the OS has to be able</font>

141
00:04:51,540 --> 00:04:56,040
<font color="#E5E5E5">to read those types in so that</font><font color="#CCCCCC"> it can</font>

142
00:04:53,340 --> 00:04:57,989
recognize them and then also during this

143
00:04:56,040 --> 00:05:00,810
process it produces what we call a type

144
00:04:57,990 --> 00:05:04,770
hash and all the type hash is is it's a

145
00:05:00,810 --> 00:05:07,650
it's a universally unique identifier or

146
00:05:04,770 --> 00:05:09,090
name for a type<font color="#CCCCCC"> okay and that's what you</font>

147
00:05:07,650 --> 00:05:11,190
essentially associate with the file

148
00:05:09,090 --> 00:05:13,919
system object so if you want to say that

149
00:05:11,190 --> 00:05:16,920
this this this network connection

150
00:05:13,920 --> 00:05:18,120
accepts integers right you get the type

151
00:05:16,920 --> 00:05:20,400
fash for an integer and you'd associate

152
00:05:18,120 --> 00:05:21,870
with that network connection or that

153
00:05:20,400 --> 00:05:23,609
file much like you do with permissions

154
00:05:21,870 --> 00:05:25,080
today<font color="#E5E5E5"> okay so you can think about it</font>

155
00:05:23,610 --> 00:05:26,970
like metadata that describes the OS

156
00:05:25,080 --> 00:05:28,440
objects the other tool up there is

157
00:05:26,970 --> 00:05:30,420
called EG to source and what<font color="#CCCCCC"> that does</font>

158
00:05:28,440 --> 00:05:33,090
is<font color="#E5E5E5"> it takes a type graph as input and it</font>

159
00:05:30,420 --> 00:05:35,490
produces procedures<font color="#CCCCCC"> ok so this is kind</font>

160
00:05:33,090 --> 00:05:36,840
of<font color="#E5E5E5"> the length sucky look type of a deal</font>

161
00:05:35,490 --> 00:05:39,360
again<font color="#E5E5E5"> where we're specifying our types</font>

162
00:05:36,840 --> 00:05:42,359
and machine generating encoding decoding

163
00:05:39,360 --> 00:05:43,380
and recognizing routines which so we

164
00:05:42,360 --> 00:05:45,060
don't have to write<font color="#CCCCCC"> them by hand every</font>

165
00:05:43,380 --> 00:05:46,890
<font color="#CCCCCC">time</font><font color="#E5E5E5"> ok they're automatically generated</font>

166
00:05:45,060 --> 00:05:48,630
for us and these routines that are

167
00:05:46,890 --> 00:05:51,360
generated they exist they're made use of

168
00:05:48,630 --> 00:05:52,770
both in the kernel and in user space and

169
00:05:51,360 --> 00:05:54,240
you can of<font color="#CCCCCC"> course generate routines for</font>

170
00:05:52,770 --> 00:05:55,950
any programming language that<font color="#E5E5E5"> you sort</font>

171
00:05:54,240 --> 00:06:00,570
<font color="#E5E5E5">of</font><font color="#CCCCCC"> write the</font><font color="#E5E5E5"> right right the tool to</font>

172
00:05:55,950 --> 00:06:02,909
support ok ok so we've written a number

173
00:06:00,570 --> 00:06:04,560
of application for the system we've got

174
00:06:02,910 --> 00:06:06,420
a shell some system utility some<font color="#CCCCCC"> network</font>

175
00:06:04,560 --> 00:06:07,980
utilities a messaging system and<font color="#E5E5E5"> whatnot</font>

176
00:06:06,420 --> 00:06:10,110
<font color="#E5E5E5">and that that was the case last year but</font>

177
00:06:07,980 --> 00:06:11,550
what we wanted to show is basically<font color="#CCCCCC"> that</font>

178
00:06:10,110 --> 00:06:14,070
the system was general enough and

179
00:06:11,550 --> 00:06:15,240
convenient enough<font color="#CCCCCC"> ok the reason it needs</font>

180
00:06:14,070 --> 00:06:16,650
to be<font color="#E5E5E5"> gentle is because of universal</font>

181
00:06:15,240 --> 00:06:19,110
nothing flows to the system unless<font color="#CCCCCC"> it's</font>

182
00:06:16,650 --> 00:06:20,700
satisfy some a notation so is an e

183
00:06:19,110 --> 00:06:22,380
notation<font color="#E5E5E5"> general enough that there's we</font>

184
00:06:20,700 --> 00:06:24,630
don't want a class of a certain set of

185
00:06:22,380 --> 00:06:26,070
programs<font color="#E5E5E5"> that we can't write because you</font>

186
00:06:24,630 --> 00:06:28,320
know you notation doesn't sort of sort

187
00:06:26,070 --> 00:06:29,849
<font color="#E5E5E5">of support them ok so today we're going</font>

188
00:06:28,320 --> 00:06:32,430
to talk about how we<font color="#E5E5E5"> think it's general</font>

189
00:06:29,850 --> 00:06:34,440
and<font color="#E5E5E5"> also a convenient so why does it</font>

190
00:06:32,430 --> 00:06:37,230
need to be convenient<font color="#E5E5E5"> well it turns out</font>

191
00:06:34,440 --> 00:06:38,430
that yes ethos does recognize all the

192
00:06:37,230 --> 00:06:39,729
types flowing through the system but<font color="#E5E5E5"> the</font>

193
00:06:38,430 --> 00:06:43,689
problem is

194
00:06:39,729 --> 00:06:45,550
a programmer could of course say that

195
00:06:43,689 --> 00:06:46,870
his program just sends strings around

196
00:06:45,550 --> 00:06:48,339
the system<font color="#CCCCCC"> and then he could encode</font>

197
00:06:46,870 --> 00:06:51,219
whatever he wants a string and<font color="#E5E5E5"> that the</font>

198
00:06:48,339 --> 00:06:52,479
<font color="#CCCCCC">other end parse that back out and act on</font>

199
00:06:51,219 --> 00:06:54,129
that data right so now we're back<font color="#CCCCCC"> to</font>

200
00:06:52,479 --> 00:06:56,080
where we started where the<font color="#E5E5E5"> system will</font>

201
00:06:54,129 --> 00:06:57,370
recognize yeah that's a string but in

202
00:06:56,080 --> 00:06:59,349
fact it's a writ might be a rather

203
00:06:57,370 --> 00:07:00,879
sophisticated data structure and<font color="#CCCCCC"> the</font>

204
00:06:59,349 --> 00:07:02,199
system is once again not helping us make

205
00:07:00,879 --> 00:07:04,300
sure<font color="#E5E5E5"> that it's properly recognized</font>

206
00:07:02,199 --> 00:07:06,520
properly formatted or well-formed with

207
00:07:04,300 --> 00:07:08,469
respect to some definition<font color="#CCCCCC"> okay so we</font>

208
00:07:06,520 --> 00:07:10,210
want to avoid this and really the only

209
00:07:08,469 --> 00:07:12,789
way we can avoid that<font color="#E5E5E5"> is by saying it's</font>

210
00:07:10,210 --> 00:07:14,558
more it's it's more convenient to<font color="#CCCCCC"> Lou to</font>

211
00:07:12,789 --> 00:07:18,849
use the system than to try<font color="#CCCCCC"> to build</font>

212
00:07:14,559 --> 00:07:20,499
yourself a loophole like this<font color="#CCCCCC"> okay okay</font>

213
00:07:18,849 --> 00:07:24,580
<font color="#E5E5E5">so I'm sure we're all familiar with the</font>

214
00:07:20,499 --> 00:07:25,389
chart on the left but we're<font color="#CCCCCC"> just</font><font color="#E5E5E5"> so</font>

215
00:07:24,580 --> 00:07:26,919
we're gonna<font color="#E5E5E5"> start by talking about</font>

216
00:07:25,389 --> 00:07:28,089
generality and before we<font color="#E5E5E5"> get into that</font>

217
00:07:26,919 --> 00:07:29,378
we're just<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to make some comments</font>

218
00:07:28,089 --> 00:07:31,059
on input languages but I don't<font color="#E5E5E5"> think</font>

219
00:07:29,379 --> 00:07:33,490
this will be a surprise<font color="#CCCCCC"> to anybody in</font>

220
00:07:31,059 --> 00:07:34,870
the room<font color="#E5E5E5"> okay so one thing is it seems</font>

221
00:07:33,490 --> 00:07:37,289
<font color="#E5E5E5">that context free grammars are kind of</font>

222
00:07:34,870 --> 00:07:39,699
sufficient for most input grammars okay

223
00:07:37,289 --> 00:07:41,800
we do see systems you know there's

224
00:07:39,699 --> 00:07:43,539
there's there's higher levels of

225
00:07:41,800 --> 00:07:44,709
competition we want to avoid we do see

226
00:07:43,539 --> 00:07:46,719
systems that use<font color="#E5E5E5"> context-sensitive</font>

227
00:07:44,709 --> 00:07:49,990
languages but oftentimes that kind<font color="#E5E5E5"> of</font>

228
00:07:46,719 --> 00:07:51,279
appears accidental<font color="#E5E5E5"> okay so we know that</font>

229
00:07:49,990 --> 00:07:53,499
back in our forum can express

230
00:07:51,279 --> 00:07:55,029
context-free grammars we know<font color="#E5E5E5"> that</font>

231
00:07:53,499 --> 00:07:56,830
there's a particular form of bacchus

232
00:07:55,029 --> 00:07:59,740
narrow that is called chomsky normal

233
00:07:56,830 --> 00:08:01,479
form that is no less expressive as BNF

234
00:07:59,740 --> 00:08:02,680
but it's a lot easier transform<font color="#CCCCCC"> okay so</font>

235
00:08:01,479 --> 00:08:04,359
we're<font color="#E5E5E5"> going to we're going to make use</font>

236
00:08:02,680 --> 00:08:08,169
of that as we talk through this

237
00:08:04,360 --> 00:08:10,209
generality again chomsky normal form is

238
00:08:08,169 --> 00:08:11,378
nice because although it kind of blows

239
00:08:10,209 --> 00:08:13,479
up the number of reductions you have

240
00:08:11,379 --> 00:08:14,830
it's easy to transform<font color="#E5E5E5"> it because it's</font>

241
00:08:13,479 --> 00:08:16,120
so simple<font color="#E5E5E5"> so we're going to use</font><font color="#CCCCCC"> that as</font>

242
00:08:14,830 --> 00:08:18,878
a foothold as we get a system kind of

243
00:08:16,120 --> 00:08:21,099
going and so what I'm going<font color="#E5E5E5"> to show you</font>

244
00:08:18,879 --> 00:08:24,939
is basically that<font color="#E5E5E5"> we can machine process</font>

245
00:08:21,099 --> 00:08:27,308
a a relaxed form of chomsky normal form

246
00:08:24,939 --> 00:08:28,629
into e notation and let's essentially

247
00:08:27,309 --> 00:08:30,430
show generality that any notation is

248
00:08:28,629 --> 00:08:31,959
basically equivalent to being able<font color="#E5E5E5"> to</font>

249
00:08:30,430 --> 00:08:36,698
<font color="#E5E5E5">say</font><font color="#CCCCCC"> I want any context free grammar as</font>

250
00:08:31,959 --> 00:08:40,000
my input<font color="#E5E5E5"> okay okay so what we did is we</font>

251
00:08:36,698 --> 00:08:42,189
wrote a tool called BNF to<font color="#CCCCCC"> eat en</font><font color="#E5E5E5"> joseph</font>

252
00:08:40,000 --> 00:08:46,089
did a lot of work here it's written in

253
00:08:42,190 --> 00:08:48,579
go uses next and go yak and what it does

254
00:08:46,089 --> 00:08:51,220
essentially it takes as input a grammar

255
00:08:48,579 --> 00:08:53,260
G in this<font color="#E5E5E5"> relaxed chomping oral form and</font>

256
00:08:51,220 --> 00:08:53,649
when I keep saying relax well here's a

257
00:08:53,260 --> 00:08:56,110
relax

258
00:08:53,649 --> 00:08:58,480
so I'm sorry I should've got matches<font color="#CCCCCC"> too</font>

259
00:08:56,110 --> 00:09:01,600
you know of<font color="#E5E5E5"> course optional</font><font color="#CCCCCC"> form has 33</font>

260
00:08:58,480 --> 00:09:03,129
forms the start symbol can go to the you

261
00:09:01,600 --> 00:09:05,589
know the empty language or the empty

262
00:09:03,129 --> 00:09:07,689
string the other two forms is what

263
00:09:05,589 --> 00:09:09,759
everything else takes places you got a

264
00:09:07,689 --> 00:09:11,170
non-terminal can go either to two non

265
00:09:09,759 --> 00:09:14,170
terminals that are distinct or a

266
00:09:11,170 --> 00:09:15,910
non-terminal can go to a terminal our

267
00:09:14,170 --> 00:09:18,579
relaxation is essentially that central

268
00:09:15,910 --> 00:09:20,649
<font color="#CCCCCC">Center form where we say that a</font>

269
00:09:18,579 --> 00:09:23,800
non-terminal can go to any number<font color="#CCCCCC"> of non</font>

270
00:09:20,649 --> 00:09:25,480
terminals and in fact you can<font color="#CCCCCC"> have the</font>

271
00:09:23,800 --> 00:09:26,709
same<font color="#E5E5E5"> num terminal up here more than once</font>

272
00:09:25,480 --> 00:09:29,709
on the right side<font color="#CCCCCC"> okay and</font><font color="#E5E5E5"> that's just</font>

273
00:09:26,709 --> 00:09:33,160
that's sort of a<font color="#E5E5E5"> convenient bridges the</font>

274
00:09:29,709 --> 00:09:35,800
gap of the some of the downsides of

275
00:09:33,160 --> 00:09:38,019
chomsky normal form in a more general<font color="#E5E5E5"> EB</font>

276
00:09:35,800 --> 00:09:41,529
enough although<font color="#E5E5E5"> no more expressive</font><font color="#CCCCCC"> okay</font>

277
00:09:38,019 --> 00:09:43,869
<font color="#CCCCCC">okay so we take a G grammar G in as</font>

278
00:09:41,529 --> 00:09:47,769
input and what do we output well what we

279
00:09:43,869 --> 00:09:50,230
output is types<font color="#CCCCCC"> define Danny</font><font color="#E5E5E5"> notation so</font>

280
00:09:47,769 --> 00:09:52,509
we output you notation and essentially

281
00:09:50,230 --> 00:09:55,240
this these types are sufficient<font color="#E5E5E5"> to</font>

282
00:09:52,509 --> 00:09:57,490
describe any syntax tree which follows

283
00:09:55,240 --> 00:10:01,029
from any statement which is legal under

284
00:09:57,490 --> 00:10:03,790
G<font color="#E5E5E5"> ok so now we</font><font color="#CCCCCC"> have a notation that sort</font>

285
00:10:01,029 --> 00:10:05,860
of represents our original grammar and

286
00:10:03,790 --> 00:10:09,279
then we can process that as I<font color="#CCCCCC"> said</font>

287
00:10:05,860 --> 00:10:11,800
before to produce the type graph type

288
00:10:09,279 --> 00:10:13,620
hashes and then eventually produce

289
00:10:11,800 --> 00:10:16,660
encoding and decoding routines and

290
00:10:13,620 --> 00:10:18,009
recognition routines<font color="#E5E5E5"> ok well describe</font>

291
00:10:16,660 --> 00:10:23,050
the output a little bit<font color="#E5E5E5"> more in detail</font>

292
00:10:18,009 --> 00:10:24,699
in a moment so this kind<font color="#CCCCCC"> of also you</font>

293
00:10:23,050 --> 00:10:26,349
know the size from show is a little it's

294
00:10:24,699 --> 00:10:28,120
hopefully general enough for all inputs

295
00:10:26,350 --> 00:10:29,499
that we want<font color="#E5E5E5"> to handle it also shows</font>

296
00:10:28,120 --> 00:10:31,749
<font color="#E5E5E5">this convenient right because</font><font color="#CCCCCC"> if you</font>

297
00:10:29,499 --> 00:10:33,879
think about it it's often easier for a

298
00:10:31,749 --> 00:10:35,199
human being to look at<font color="#CCCCCC"> semi BNF if you</font>

299
00:10:33,879 --> 00:10:36,459
were to<font color="#E5E5E5"> look at the</font><font color="#CCCCCC"> eb NF for HTML</font>

300
00:10:35,199 --> 00:10:38,620
you're going to<font color="#E5E5E5"> recognize exactly what</font>

301
00:10:36,459 --> 00:10:40,569
it ought<font color="#CCCCCC"> to be doing faster than perhaps</font>

302
00:10:38,620 --> 00:10:42,519
if you looked at that that you<font color="#E5E5E5"> know the</font>

303
00:10:40,569 --> 00:10:43,929
parse tree the results<font color="#E5E5E5"> from parsing it</font>

304
00:10:42,519 --> 00:10:44,980
or something like that so<font color="#CCCCCC"> I think</font><font color="#E5E5E5"> it</font>

305
00:10:43,929 --> 00:10:46,839
makes it convenient for the<font color="#CCCCCC"> program to</font>

306
00:10:44,980 --> 00:10:48,249
be<font color="#CCCCCC"> able to look at eb enough even</font><font color="#E5E5E5"> if it</font>

307
00:10:46,839 --> 00:10:50,170
eventually turns into something like a

308
00:10:48,249 --> 00:10:53,649
notation and then automatically

309
00:10:50,170 --> 00:10:54,849
generated routines ok so again it should

310
00:10:53,649 --> 00:10:57,549
be no surprise with this tool does it

311
00:10:54,850 --> 00:10:59,049
<font color="#CCCCCC">Alexa lexically analyzes the grammar you</font>

312
00:10:57,549 --> 00:11:01,110
know that that is it's actually looking

313
00:10:59,049 --> 00:11:03,429
at the bacchus<font color="#E5E5E5"> normal now form</font>

314
00:11:01,110 --> 00:11:06,370
describing the grammar as opposed to we

315
00:11:03,429 --> 00:11:07,059
normally parse some statement under the

316
00:11:06,370 --> 00:11:08,799
grammar it's actually

317
00:11:07,059 --> 00:11:10,809
look at the grammar itself lexical<font color="#CCCCCC"> and</font>

318
00:11:08,799 --> 00:11:12,939
analyzing and producing a parse tree and

319
00:11:10,809 --> 00:11:17,169
then analyze and parse tree to generate

320
00:11:12,939 --> 00:11:18,608
a notation<font color="#E5E5E5"> okay so what does</font><font color="#CCCCCC"> it actually</font>

321
00:11:17,169 --> 00:11:20,109
generate it basically generates data

322
00:11:18,609 --> 00:11:21,609
structures and the day<font color="#CCCCCC"> structures take</font>

323
00:11:20,109 --> 00:11:23,979
the one<font color="#E5E5E5"> of three forms</font><font color="#CCCCCC"> other unions</font>

324
00:11:21,609 --> 00:11:25,239
typedef sand or structures and there's

325
00:11:23,979 --> 00:11:26,409
three transformation rules that we're

326
00:11:25,239 --> 00:11:28,569
going<font color="#E5E5E5"> to look at right</font><font color="#CCCCCC"> now that that</font>

327
00:11:26,409 --> 00:11:30,309
actually<font color="#CCCCCC"> do the work to produce this</font>

328
00:11:28,569 --> 00:11:32,949
data structure it sort of represents a

329
00:11:30,309 --> 00:11:34,478
<font color="#E5E5E5">grid of the grammar</font><font color="#CCCCCC"> okay so there's</font>

330
00:11:32,949 --> 00:11:37,779
three forms three transformations and

331
00:11:34,479 --> 00:11:39,249
this is the first one this applies when

332
00:11:37,779 --> 00:11:40,869
you have some non terminal on the left

333
00:11:39,249 --> 00:11:44,229
side more than<font color="#E5E5E5"> once</font><font color="#CCCCCC"> okay so here we have</font>

334
00:11:40,869 --> 00:11:45,999
a and it appears<font color="#CCCCCC"> to x on the left you</font>

335
00:11:44,229 --> 00:11:49,239
know either a can be the terminal you n

336
00:11:45,999 --> 00:11:50,769
64 or a can be essentially bc right and

337
00:11:49,239 --> 00:11:53,109
what we do when we see that is we

338
00:11:50,769 --> 00:11:55,299
generate a tag<font color="#CCCCCC"> Union</font><font color="#E5E5E5"> okay and</font><font color="#CCCCCC"> we call</font>

339
00:11:53,109 --> 00:11:57,489
that<font color="#CCCCCC"> Union a and it's got two options</font>

340
00:11:55,299 --> 00:11:59,769
the first option is the UN 64 and the

341
00:11:57,489 --> 00:12:02,469
other one<font color="#CCCCCC"> is the BC</font><font color="#E5E5E5"> okay so i should</font>

342
00:11:59,769 --> 00:12:04,089
take<font color="#E5E5E5"> a moment to to describe what we're</font>

343
00:12:02,469 --> 00:12:05,319
looking at here with the terminals<font color="#CCCCCC"> okay</font>

344
00:12:04,089 --> 00:12:06,039
so in this process terminals are a

345
00:12:05,319 --> 00:12:08,139
little different than what we normally

346
00:12:06,039 --> 00:12:10,209
think of normally you think of a

347
00:12:08,139 --> 00:12:11,379
terminal for example if you're<font color="#E5E5E5"> writing a</font>

348
00:12:10,209 --> 00:12:13,238
parser for see a terminal might

349
00:12:11,379 --> 00:12:15,069
represent a single digit and then<font color="#CCCCCC"> I</font>

350
00:12:13,239 --> 00:12:16,119
might you might build what<font color="#E5E5E5"> is a valid</font>

351
00:12:15,069 --> 00:12:17,289
integer or something out<font color="#CCCCCC"> of those</font>

352
00:12:16,119 --> 00:12:19,659
terminals perhaps using a regular

353
00:12:17,289 --> 00:12:22,629
<font color="#CCCCCC">expression or whatever your you know</font>

354
00:12:19,659 --> 00:12:23,979
your grammar tool supports<font color="#CCCCCC"> okay but here</font>

355
00:12:22,629 --> 00:12:26,019
a terminal isn't a turtle in that sense

356
00:12:23,979 --> 00:12:29,949
a terminal is any type that's already

357
00:12:26,019 --> 00:12:32,169
known<font color="#E5E5E5"> to the system okay so you n 64 is</font>

358
00:12:29,949 --> 00:12:34,358
a built-in type but this could just as

359
00:12:32,169 --> 00:12:35,559
easily be for example<font color="#CCCCCC"> because</font><font color="#E5E5E5"> it</font>

360
00:12:34,359 --> 00:12:39,549
presumably we're going to later defined

361
00:12:35,559 --> 00:12:42,098
be<font color="#E5E5E5"> okay so one of the interesting thing</font>

362
00:12:39,549 --> 00:12:43,478
this does is it gives you some kind of

363
00:12:42,099 --> 00:12:46,539
estimation of what you sometimes get

364
00:12:43,479 --> 00:12:47,829
from context sensitivity so the reason I

365
00:12:46,539 --> 00:12:50,769
<font color="#CCCCCC">say that is because I can replace this</font>

366
00:12:47,829 --> 00:12:53,829
UN 64 with a tuple of unit 64 s<font color="#E5E5E5"> okay and</font>

367
00:12:50,769 --> 00:12:56,259
the corresponding eco<font color="#CCCCCC"> Dean encoding of</font>

368
00:12:53,829 --> 00:12:58,269
that would be a length followed by a

369
00:12:56,259 --> 00:12:59,649
number of elements<font color="#E5E5E5"> okay and if you if</font>

370
00:12:58,269 --> 00:13:00,999
you think about<font color="#E5E5E5"> the element could even</font>

371
00:12:59,649 --> 00:13:02,439
be any type that I've declared so it

372
00:13:00,999 --> 00:13:04,599
could<font color="#E5E5E5"> be a compound type and whatnot so</font>

373
00:13:02,439 --> 00:13:06,819
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is sometimes what the content</font>

374
00:13:04,599 --> 00:13:08,259
context sensitivity you see in

375
00:13:06,819 --> 00:13:09,789
networking<font color="#CCCCCC"> protocols and whatnot and so</font>

376
00:13:08,259 --> 00:13:12,839
we can kind of indirectly support that

377
00:13:09,789 --> 00:13:12,839
to this mechanism

378
00:13:16,019 --> 00:13:25,199
<font color="#CCCCCC">okay so the next form and and I guess</font>

379
00:13:22,410 --> 00:13:27,868
I'm sorry just go back to terminals in a

380
00:13:25,199 --> 00:13:28,949
certain sense terminals are less

381
00:13:27,869 --> 00:13:30,360
important you know that you think<font color="#E5E5E5"> about</font>

382
00:13:28,949 --> 00:13:32,279
sometimes<font color="#E5E5E5"> turtles are things like while</font>

383
00:13:30,360 --> 00:13:34,350
and really while is just letting you

384
00:13:32,279 --> 00:13:37,739
know something about what<font color="#E5E5E5"> is is to</font>

385
00:13:34,350 --> 00:13:38,819
<font color="#E5E5E5">follow in the in the statement and once</font>

386
00:13:37,739 --> 00:13:39,809
you have your syntax tree it's less

387
00:13:38,819 --> 00:13:41,910
important<font color="#CCCCCC"> and since we're actually</font>

388
00:13:39,809 --> 00:13:43,290
building syntax trees the other

389
00:13:41,910 --> 00:13:45,719
traditional<font color="#CCCCCC"> use of terminal is less</font>

390
00:13:43,290 --> 00:13:48,719
important we can just distill what

391
00:13:45,720 --> 00:13:51,059
things are based on<font color="#E5E5E5"> their the tag union</font>

392
00:13:48,720 --> 00:13:54,119
instead as we're processing on the kind

393
00:13:51,059 --> 00:13:56,368
<font color="#CCCCCC">of the client</font><font color="#E5E5E5"> or the recipient</font><font color="#CCCCCC"> side okay</font>

394
00:13:54,119 --> 00:13:58,499
<font color="#CCCCCC">all right so there's another the very</font>

395
00:13:56,369 --> 00:14:00,299
simplest transformation rule is

396
00:13:58,499 --> 00:14:03,299
essentially if you've got some non

397
00:14:00,299 --> 00:14:04,559
terminal D which only appears once then

398
00:14:03,299 --> 00:14:06,769
you just essentially create a type

399
00:14:04,559 --> 00:14:09,480
cinema synonym or a typedef right so

400
00:14:06,769 --> 00:14:12,449
here we have a statement<font color="#E5E5E5"> d can become</font>

401
00:14:09,480 --> 00:14:14,489
only<font color="#E5E5E5"> nothing but</font><font color="#CCCCCC"> you n 64 and then we</font>

402
00:14:12,449 --> 00:14:17,008
<font color="#E5E5E5">just declare</font><font color="#CCCCCC"> okay d as a un 64 and the</font>

403
00:14:14,489 --> 00:14:21,899
same<font color="#E5E5E5"> thing here he becomes an FG and so</font>

404
00:14:17,009 --> 00:14:24,600
E is kind of typedef to be any FG<font color="#CCCCCC"> ok so</font>

405
00:14:21,899 --> 00:14:26,910
the final transformation rule is that

406
00:14:24,600 --> 00:14:30,029
two or more elements appear on the right

407
00:14:26,910 --> 00:14:31,379
side so this this this statement here

408
00:14:30,029 --> 00:14:33,019
would<font color="#E5E5E5"> not only trigger this rule but</font>

409
00:14:31,379 --> 00:14:35,220
would also trigger this<font color="#CCCCCC"> following rule</font>

410
00:14:33,019 --> 00:14:38,220
and in this case you<font color="#CCCCCC"> just created</font>

411
00:14:35,220 --> 00:14:41,040
structure right here we have<font color="#CCCCCC"> h goes to i</font>

412
00:14:38,220 --> 00:14:43,410
J and we create a structure we name it<font color="#CCCCCC"> I</font>

413
00:14:41,040 --> 00:14:45,029
<font color="#E5E5E5">J and the fields of the structure just</font>

414
00:14:43,410 --> 00:14:46,230
correspond to any number<font color="#CCCCCC"> of non</font>

415
00:14:45,029 --> 00:14:48,660
terminals<font color="#E5E5E5"> that appear on the right side</font>

416
00:14:46,230 --> 00:14:49,769
<font color="#E5E5E5">of that production ok so you</font><font color="#CCCCCC"> can imagine</font>

417
00:14:48,660 --> 00:14:52,559
if you start putting all this together

418
00:14:49,769 --> 00:14:57,240
what you basically get is a data type

419
00:14:52,559 --> 00:14:58,860
that's able<font color="#E5E5E5"> to represent any syntax tree</font>

420
00:14:57,240 --> 00:15:01,619
of the grammar that<font color="#CCCCCC"> you've started out</font>

421
00:14:58,860 --> 00:15:03,480
by describing ok<font color="#E5E5E5"> and again using the tag</font>

422
00:15:01,619 --> 00:15:05,339
<font color="#E5E5E5">unions you can kind of start to pick</font>

423
00:15:03,480 --> 00:15:08,610
that<font color="#CCCCCC"> thing apart</font><font color="#E5E5E5"> on the other end once</font>

424
00:15:05,339 --> 00:15:10,799
you've received it and act on it<font color="#CCCCCC"> ok and</font>

425
00:15:08,610 --> 00:15:12,149
so to kind of put that in another<font color="#E5E5E5"> way if</font>

426
00:15:10,799 --> 00:15:14,429
you think about<font color="#CCCCCC"> again this is any</font>

427
00:15:12,149 --> 00:15:16,339
notation that comes out<font color="#CCCCCC"> to be</font><font color="#E5E5E5"> b and f 2</font>

428
00:15:14,429 --> 00:15:21,360
<font color="#E5E5E5">e TM here's the grammar that comes in</font>

429
00:15:16,339 --> 00:15:24,269
essentially any data that's<font color="#E5E5E5"> well formed</font>

430
00:15:21,360 --> 00:15:26,309
with respect to n is a<font color="#E5E5E5"> representative of</font>

431
00:15:24,269 --> 00:15:28,139
some statement under G in any statement

432
00:15:26,309 --> 00:15:29,040
under G can be represented by some well

433
00:15:28,139 --> 00:15:33,180
form

434
00:15:29,040 --> 00:15:34,319
instance of n so here's an example<font color="#E5E5E5"> what</font>

435
00:15:33,180 --> 00:15:36,000
it all kind of comes together all<font color="#E5E5E5"> this</font>

436
00:15:34,320 --> 00:15:39,930
is is at the top<font color="#E5E5E5"> we have some BNF that</font>

437
00:15:36,000 --> 00:15:43,560
represents a<font color="#E5E5E5"> an arithmetic operation in</font>

438
00:15:39,930 --> 00:15:45,029
our relaxed chomsky normal form so you

439
00:15:43,560 --> 00:15:46,439
<font color="#E5E5E5">can see we take</font><font color="#CCCCCC"> advantage the real</font>

440
00:15:45,029 --> 00:15:48,509
action right<font color="#CCCCCC"> there to make</font><font color="#E5E5E5"> it easier for</font>

441
00:15:46,440 --> 00:15:50,579
a human being kind of look at we run

442
00:15:48,509 --> 00:15:52,639
that<font color="#E5E5E5"> through be enough to eat en and as</font>

443
00:15:50,579 --> 00:15:54,899
output we get<font color="#E5E5E5"> this Ino tation</font>

444
00:15:52,639 --> 00:15:56,639
description and if you read the previous

445
00:15:54,899 --> 00:15:59,250
paper it describes quite a bit<font color="#E5E5E5"> about</font>

446
00:15:56,639 --> 00:16:00,509
what you need any notation supports you

447
00:15:59,250 --> 00:16:01,949
know it supports kind of the union of

448
00:16:00,509 --> 00:16:04,589
<font color="#E5E5E5">all the types you typically see in</font>

449
00:16:01,949 --> 00:16:10,439
programming<font color="#E5E5E5"> languages</font><font color="#CCCCCC"> okay the less</font>

450
00:16:04,589 --> 00:16:12,060
sophisticated<font color="#CCCCCC"> texas to mind wages ok so</font>

451
00:16:10,440 --> 00:16:13,980
we<font color="#E5E5E5"> in the paper we talked about how we</font>

452
00:16:12,060 --> 00:16:16,079
we created a hyper which is essentially

453
00:16:13,980 --> 00:16:17,430
a HTML like grammar and a corresponding

454
00:16:16,079 --> 00:16:18,239
client and server and if you're

455
00:16:17,430 --> 00:16:20,540
interested that you can look<font color="#E5E5E5"> at the</font>

456
00:16:18,240 --> 00:16:22,649
paper or<font color="#E5E5E5"> eventually get the source code</font>

457
00:16:20,540 --> 00:16:24,060
so this<font color="#E5E5E5"> is what our programming flow</font>

458
00:16:22,649 --> 00:16:25,220
looks like now if you if you go through

459
00:16:24,060 --> 00:16:28,680
the technique that<font color="#CCCCCC"> I</font><font color="#E5E5E5"> just described</font>

460
00:16:25,220 --> 00:16:31,019
everything after BNF to<font color="#CCCCCC"> e TN is the</font><font color="#E5E5E5"> same</font>

461
00:16:28,680 --> 00:16:33,599
as<font color="#CCCCCC"> it was last year but</font><font color="#E5E5E5"> just kind of</font>

462
00:16:31,019 --> 00:16:35,399
summarize what we did what you do is you

463
00:16:33,600 --> 00:16:38,970
first specify your communication grammar

464
00:16:35,399 --> 00:16:40,709
using BNF then you feed that<font color="#E5E5E5"> BNF into</font>

465
00:16:38,970 --> 00:16:42,540
BNF to VTN to generate the corresponding

466
00:16:40,709 --> 00:16:43,649
key notation types again this is where

467
00:16:42,540 --> 00:16:47,579
it picks off from where we had before

468
00:16:43,649 --> 00:16:49,639
use<font color="#CCCCCC"> et tu G to generate a type graph the</font>

469
00:16:47,579 --> 00:16:51,989
type graph contains machine readable

470
00:16:49,639 --> 00:16:54,630
description of the types and some type

471
00:16:51,990 --> 00:16:56,190
hashes and then you can use EG to source

472
00:16:54,630 --> 00:16:57,870
to generate some source code which is

473
00:16:56,190 --> 00:16:59,610
<font color="#E5E5E5">your encoding decoding and recognition</font>

474
00:16:57,870 --> 00:17:00,720
routines you combine that<font color="#CCCCCC"> with your</font>

475
00:16:59,610 --> 00:17:02,399
logic code that you wrote in your

476
00:17:00,720 --> 00:17:04,260
programming language and then you have

477
00:17:02,399 --> 00:17:05,730
your program and then separately you

478
00:17:04,260 --> 00:17:07,679
take those type ashes and you sprinkle

479
00:17:05,730 --> 00:17:09,959
them across all the file system objects

480
00:17:07,679 --> 00:17:12,059
that<font color="#E5E5E5"> you want to permit the reading and</font>

481
00:17:09,959 --> 00:17:13,949
writing of this particular grammar of

482
00:17:12,059 --> 00:17:17,699
<font color="#E5E5E5">type during the operation in the system</font>

483
00:17:13,949 --> 00:17:21,839
and from<font color="#CCCCCC"> that point on this program</font><font color="#E5E5E5"> can</font>

484
00:17:17,699 --> 00:17:23,790
only produce using those OS objects data

485
00:17:21,839 --> 00:17:26,938
which is<font color="#E5E5E5"> well formed with respect to</font>

486
00:17:23,790 --> 00:17:28,139
this original grammar if it if it's<font color="#E5E5E5"> not</font>

487
00:17:26,939 --> 00:17:31,919
well formed when it does the right the

488
00:17:28,140 --> 00:17:34,770
right will fail<font color="#CCCCCC"> ok so that kind of gets</font>

489
00:17:31,919 --> 00:17:37,159
through generality you know we showed

490
00:17:34,770 --> 00:17:40,860
that it's roughly equivalent to chunk

491
00:17:37,159 --> 00:17:42,870
context-free grammars but we<font color="#E5E5E5"> still have</font>

492
00:17:40,860 --> 00:17:45,389
this problem as you recall the

493
00:17:42,870 --> 00:17:47,429
the programmer who decided<font color="#E5E5E5"> to just</font>

494
00:17:45,390 --> 00:17:49,170
declare all his OS objects<font color="#E5E5E5"> is handling</font>

495
00:17:47,430 --> 00:17:50,880
strings and then basically encode

496
00:17:49,170 --> 00:17:53,820
everything<font color="#E5E5E5"> to strings and on the other</font>

497
00:17:50,880 --> 00:17:55,020
side parse it out thus bypassing the<font color="#CCCCCC"> OS</font>

498
00:17:53,820 --> 00:17:56,580
<font color="#CCCCCC">is ability to really recognize what's</font>

499
00:17:55,020 --> 00:17:59,129
really going on<font color="#CCCCCC"> ok as opposed to just</font>

500
00:17:56,580 --> 00:18:00,780
looking at strings<font color="#CCCCCC"> ok but there's some</font>

501
00:17:59,130 --> 00:18:02,850
incentives with<font color="#E5E5E5"> Anita so they won't do</font>

502
00:18:00,780 --> 00:18:03,930
that ok the first<font color="#E5E5E5"> thing is right you'll</font>

503
00:18:02,850 --> 00:18:06,179
note that he doesn't have<font color="#E5E5E5"> to writing a</font>

504
00:18:03,930 --> 00:18:07,830
lexing arcing or encoding routines right

505
00:18:06,180 --> 00:18:09,000
because they're all<font color="#E5E5E5"> generated for him in</font>

506
00:18:07,830 --> 00:18:10,740
fact typically there's not really any

507
00:18:09,000 --> 00:18:14,190
parsing going on instead<font color="#E5E5E5"> it's passing</font>

508
00:18:10,740 --> 00:18:17,250
around these binary represented titovs

509
00:18:14,190 --> 00:18:19,800
in a<font color="#CCCCCC"> well-known for</font><font color="#E5E5E5"> Matty coding ok the</font>

510
00:18:17,250 --> 00:18:21,480
next thing is the<font color="#E5E5E5"> idea that you</font>

511
00:18:19,800 --> 00:18:22,860
automatically get a formal documentation

512
00:18:21,480 --> 00:18:24,840
of your communication formats<font color="#E5E5E5"> because</font>

513
00:18:22,860 --> 00:18:26,689
there any notation<font color="#E5E5E5"> ok and everybody's</font>

514
00:18:24,840 --> 00:18:28,980
generating routines that handle us that

515
00:18:26,690 --> 00:18:30,990
autumn you<font color="#E5E5E5"> know in machine generated</font>

516
00:18:28,980 --> 00:18:32,610
form so if you think<font color="#CCCCCC"> about</font><font color="#E5E5E5"> pakka tights</font>

517
00:18:30,990 --> 00:18:35,490
or packet types or some other things

518
00:18:32,610 --> 00:18:38,159
where they try to unify the documenting

519
00:18:35,490 --> 00:18:39,870
of the protocol with the actual writing

520
00:18:38,160 --> 00:18:43,020
the code for<font color="#E5E5E5"> the protocol ok you kind of</font>

521
00:18:39,870 --> 00:18:44,580
get that out of<font color="#E5E5E5"> this and then the final</font>

522
00:18:43,020 --> 00:18:47,700
<font color="#E5E5E5">thing is that the routines that are</font>

523
00:18:44,580 --> 00:18:49,080
generated resemble existing routines

524
00:18:47,700 --> 00:18:50,850
that everybody's really you know kind<font color="#E5E5E5"> of</font>

525
00:18:49,080 --> 00:18:52,080
comfortable with using right so on the

526
00:18:50,850 --> 00:18:54,480
<font color="#CCCCCC">Left we just have an exemplar there</font>

527
00:18:52,080 --> 00:18:56,159
python render<font color="#CCCCCC"> steak so this</font><font color="#E5E5E5"> is a</font><font color="#CCCCCC"> library</font>

528
00:18:54,480 --> 00:18:58,320
of expressions that you can compose to

529
00:18:56,160 --> 00:19:00,240
create HTML in this case<font color="#E5E5E5"> you're</font><font color="#CCCCCC"> just</font>

530
00:18:58,320 --> 00:19:02,309
making an ordered list<font color="#E5E5E5"> a</font><font color="#CCCCCC"> bunch of list</font>

531
00:19:00,240 --> 00:19:04,440
items and then<font color="#E5E5E5"> on the right we have the</font>

532
00:19:02,309 --> 00:19:06,149
routines that<font color="#E5E5E5"> eg to source generated in</font>

533
00:19:04,440 --> 00:19:07,860
a certain case and you can see you're

534
00:19:06,150 --> 00:19:09,090
just<font color="#E5E5E5"> sort of composing these things as</font>

535
00:19:07,860 --> 00:19:10,919
if their expressions as you did with

536
00:19:09,090 --> 00:19:11,939
your Python remission egg so I think

537
00:19:10,920 --> 00:19:13,320
<font color="#E5E5E5">there's a lot of reasons why people</font>

538
00:19:11,940 --> 00:19:15,030
would just like to use their system they

539
00:19:13,320 --> 00:19:17,399
don't have to write any parsing routines

540
00:19:15,030 --> 00:19:21,000
anymore or at least hopefully not as

541
00:19:17,400 --> 00:19:24,330
much<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> all right so that sort of</font>

542
00:19:21,000 --> 00:19:26,610
concludes here just to summarize the key

543
00:19:24,330 --> 00:19:29,189
point which goes back to last year is

544
00:19:26,610 --> 00:19:30,959
that our goal is so that the OS itself

545
00:19:29,190 --> 00:19:33,030
recognizes all<font color="#E5E5E5"> data before it ever</font>

546
00:19:30,960 --> 00:19:36,840
serves as input as into an application

547
00:19:33,030 --> 00:19:38,690
<font color="#E5E5E5">ok so we're kind of leveraging up the</font>

548
00:19:36,840 --> 00:19:42,510
<font color="#CCCCCC">idea of complete mediation</font><font color="#E5E5E5"> the OS and</font>

549
00:19:38,690 --> 00:19:48,120
we're we're kind of declaring the types

550
00:19:42,510 --> 00:19:50,129
of all s objects so<font color="#CCCCCC"> that is possible so</font>

551
00:19:48,120 --> 00:19:51,149
we've shown you that II notation can

552
00:19:50,130 --> 00:19:52,260
specify a data structure that's

553
00:19:51,150 --> 00:19:54,170
basically equivalent to a context-free

554
00:19:52,260 --> 00:19:56,340
grammar and we've also show you<font color="#E5E5E5"> that</font>

555
00:19:54,170 --> 00:19:57,679
incentives and ethos kind of dis

556
00:19:56,340 --> 00:20:01,049
courage cheating the system by just

557
00:19:57,679 --> 00:20:02,130
declaring everything as a string<font color="#E5E5E5"> okay so</font>

558
00:20:01,049 --> 00:20:03,240
we have<font color="#E5E5E5"> some future work we're</font><font color="#CCCCCC"> going to</font>

559
00:20:02,130 --> 00:20:04,320
this is kind of<font color="#E5E5E5"> work in progress we're</font>

560
00:20:03,240 --> 00:20:06,990
going to continue work with us<font color="#E5E5E5"> art with</font>

561
00:20:04,320 --> 00:20:09,210
our students on this but one thing we

562
00:20:06,990 --> 00:20:10,980
really want<font color="#E5E5E5"> to do is continue on the BNF</font>

563
00:20:09,210 --> 00:20:13,620
to<font color="#CCCCCC"> etn compiler so that doesn't have</font><font color="#E5E5E5"> to</font>

564
00:20:10,980 --> 00:20:15,360
use this restrictive chomsky normal form

565
00:20:13,620 --> 00:20:17,668
we'd like to just blow it up to support

566
00:20:15,360 --> 00:20:19,320
<font color="#CCCCCC">EB NF and the</font><font color="#E5E5E5"> reason why that's a</font>

567
00:20:17,669 --> 00:20:21,059
benefit is because you know one there's

568
00:20:19,320 --> 00:20:22,590
fewer productions but more importantly

569
00:20:21,059 --> 00:20:23,760
you can<font color="#E5E5E5"> write</font><font color="#CCCCCC"> the productions that a</font>

570
00:20:22,590 --> 00:20:25,740
human being can look at and be

571
00:20:23,760 --> 00:20:27,720
comfortable with<font color="#E5E5E5"> as opposed to when you</font>

572
00:20:25,740 --> 00:20:31,950
constrain what BNF is supported then you

573
00:20:27,720 --> 00:20:33,299
end up sort of kind<font color="#E5E5E5"> of jamming something</font>

574
00:20:31,950 --> 00:20:37,950
you'd write to like to write<font color="#CCCCCC"> it</font><font color="#E5E5E5"> another</font>

575
00:20:33,299 --> 00:20:40,710
way into into<font color="#CCCCCC"> the chomsky normal form on</font>

576
00:20:37,950 --> 00:20:42,659
the flip side then bye-bye<font color="#CCCCCC"> closed more</font>

577
00:20:40,710 --> 00:20:48,240
closely resembling straight a bit or a

578
00:20:42,659 --> 00:20:50,520
you know EBF your resulting in notation

579
00:20:48,240 --> 00:20:51,779
will also be easier for<font color="#CCCCCC"> a human being to</font>

580
00:20:50,520 --> 00:20:54,510
kind of look at and be comfortable with

581
00:20:51,779 --> 00:20:55,770
what what each subtype represents or

582
00:20:54,510 --> 00:20:58,200
what are you type it in the composite

583
00:20:55,770 --> 00:20:59,490
types represents the other thing we

584
00:20:58,200 --> 00:21:01,500
think<font color="#CCCCCC"> would be interesting is a new</font>

585
00:20:59,490 --> 00:21:03,210
programming language or preprocessor

586
00:21:01,500 --> 00:21:07,590
which takes a program which is intend to

587
00:21:03,210 --> 00:21:09,120
run ethos and not not separate from just

588
00:21:07,590 --> 00:21:10,889
the programming process it compiles that

589
00:21:09,120 --> 00:21:13,469
program object code but also pull

590
00:21:10,890 --> 00:21:15,510
<font color="#E5E5E5">extracts all the types and does the the</font>

591
00:21:13,470 --> 00:21:16,649
type graph compilation and then provides

592
00:21:15,510 --> 00:21:18,870
you with all the type hashes you need

593
00:21:16,649 --> 00:21:20,189
and so<font color="#E5E5E5"> that would kind of reduce some of</font>

594
00:21:18,870 --> 00:21:21,989
the steps here where you<font color="#CCCCCC"> have to use</font>

595
00:21:20,190 --> 00:21:23,279
multiple tools in<font color="#E5E5E5"> addition to your</font>

596
00:21:21,990 --> 00:21:24,809
<font color="#E5E5E5">actual programming language all right</font>

597
00:21:23,279 --> 00:21:26,730
<font color="#E5E5E5">that's not unlike how some you know and</font>

598
00:21:24,809 --> 00:21:28,710
everything back to onc RPC sometimes

599
00:21:26,730 --> 00:21:30,179
people are they you know they<font color="#E5E5E5"> don't want</font>

600
00:21:28,710 --> 00:21:32,760
to lose leave their programming language

601
00:21:30,179 --> 00:21:34,230
to have to write the other you know onc

602
00:21:32,760 --> 00:21:35,850
RPC<font color="#CCCCCC"> case the other you know the</font><font color="#E5E5E5"> other</font>

603
00:21:34,230 --> 00:21:38,820
language that defines their interfaces

604
00:21:35,850 --> 00:21:39,990
and there are pcs and stuff<font color="#CCCCCC"> okay we're</font>

605
00:21:38,820 --> 00:21:42,990
really working hard to get this open

606
00:21:39,990 --> 00:21:45,000
source it's<font color="#E5E5E5"> available in you can see our</font>

607
00:21:42,990 --> 00:21:46,380
website<font color="#E5E5E5"> there again John</font><font color="#CCCCCC"> Sora that the</font>

608
00:21:45,000 --> 00:21:47,669
University of illinois-chicago kind of

609
00:21:46,380 --> 00:21:51,149
leads the project these of<font color="#CCCCCC"> the ethos</font>

610
00:21:47,669 --> 00:21:52,260
project we<font color="#E5E5E5"> can or you can contact him</font>

611
00:21:51,149 --> 00:21:53,879
and<font color="#E5E5E5"> he'll give you access to the source</font>

612
00:21:52,260 --> 00:21:56,879
code now but we're trying to push out

613
00:21:53,880 --> 00:21:58,110
open source at least this summer the

614
00:21:56,880 --> 00:21:59,520
reason why I say it's<font color="#CCCCCC"> a little hard is</font>

615
00:21:58,110 --> 00:22:01,610
everything and ethos<font color="#E5E5E5"> is very tightly</font>

616
00:21:59,520 --> 00:22:04,168
coupled and so we don't<font color="#E5E5E5"> want to release</font>

617
00:22:01,610 --> 00:22:06,510
components when all their dependencies

618
00:22:04,169 --> 00:22:07,940
aren't sort of fit for outside

619
00:22:06,510 --> 00:22:10,039
consumption and with court

620
00:22:07,940 --> 00:22:11,210
all<font color="#E5E5E5"> in all that okay well internet</font>

621
00:22:10,039 --> 00:22:12,799
should<font color="#E5E5E5"> be available soon hopefully</font><font color="#CCCCCC"> this</font>

622
00:22:11,210 --> 00:22:45,799
summer and um maybe I'll<font color="#E5E5E5"> take any</font>

623
00:22:12,799 --> 00:22:47,840
questions yes yeah so this is<font color="#CCCCCC"> where I</font>

624
00:22:45,799 --> 00:22:49,789
perhaps I should have<font color="#E5E5E5"> given that caveat</font>

625
00:22:47,840 --> 00:22:51,709
right up front right and I think I did a

626
00:22:49,789 --> 00:22:54,230
better job at<font color="#E5E5E5"> it last year but ethos is</font>

627
00:22:51,710 --> 00:22:56,659
one hundred percent clean slate<font color="#E5E5E5"> okay so</font>

628
00:22:54,230 --> 00:22:59,570
we make no attempt to say that we're

629
00:22:56,659 --> 00:23:02,299
going<font color="#E5E5E5"> to support HTML we make no attempt</font>

630
00:22:59,570 --> 00:23:04,850
to say we're going to sew yes<font color="#E5E5E5"> basically</font>

631
00:23:02,299 --> 00:23:06,710
you have to<font color="#E5E5E5"> but the system calls are so</font>

632
00:23:04,850 --> 00:23:08,629
different than POSIX anyway that you

633
00:23:06,710 --> 00:23:12,500
can't just easily port an application

634
00:23:08,629 --> 00:23:13,699
you really have to rethink so and even

635
00:23:12,500 --> 00:23:16,700
<font color="#CCCCCC">though network protocol we use a</font>

636
00:23:13,700 --> 00:23:19,100
protocol called minimal so we we

637
00:23:16,700 --> 00:23:21,159
envision there could be gateways that

638
00:23:19,100 --> 00:23:23,449
would translate for them<font color="#E5E5E5"> between the two</font>

639
00:23:21,159 --> 00:23:24,769
but I mean in a certain sense you can

640
00:23:23,450 --> 00:23:26,120
see we're kind of trying<font color="#E5E5E5"> to take things</font>

641
00:23:24,769 --> 00:23:28,429
as far as we can to see where it goes

642
00:23:26,120 --> 00:23:29,779
and and the big trade-off we made is

643
00:23:28,429 --> 00:23:31,460
let's just go clean site and see what

644
00:23:29,779 --> 00:23:35,750
happens and I<font color="#CCCCCC"> think we got</font><font color="#E5E5E5"> some</font>

645
00:23:31,460 --> 00:23:36,860
interesting results that if you know not

646
00:23:35,750 --> 00:23:37,879
<font color="#E5E5E5">everybody's going to be using ethos</font>

647
00:23:36,860 --> 00:23:39,740
<font color="#E5E5E5">someday but we think they'll be using</font>

648
00:23:37,879 --> 00:23:42,889
something that resembles ethos in its

649
00:23:39,740 --> 00:23:45,169
<font color="#E5E5E5">kind of idea of a simplification through</font>

650
00:23:42,889 --> 00:23:47,120
and I guess another way to look at is

651
00:23:45,169 --> 00:23:48,649
we're trying<font color="#E5E5E5"> to take responsibilities</font>

652
00:23:47,120 --> 00:23:52,100
away from the programmers because they

653
00:23:48,649 --> 00:23:54,049
already have enough balls to juggle you

654
00:23:52,100 --> 00:23:56,449
know to have to worry about things<font color="#E5E5E5"> like</font>

655
00:23:54,049 --> 00:23:57,769
recognition<font color="#E5E5E5"> although that's so important</font>

656
00:23:56,450 --> 00:23:58,669
that it should be<font color="#CCCCCC"> just made universal</font>

657
00:23:57,769 --> 00:24:00,190
and they don't have<font color="#E5E5E5"> to worry about as</font>

658
00:23:58,669 --> 00:24:08,080
much<font color="#E5E5E5"> okay at least that's what we think</font>

659
00:24:00,190 --> 00:24:08,080
<font color="#E5E5E5">okay else okay thank you</font>

