1
00:00:00,890 --> 00:00:06,088
thanks for the introduction my name is

2
00:00:03,540 --> 00:00:09,290
<font color="#CCCCCC">Aaron dubrovsky I'm a PhD student at the</font>

3
00:00:06,089 --> 00:00:12,960
technical university in Vienna and

4
00:00:09,290 --> 00:00:18,240
researcher<font color="#E5E5E5"> at SB research in Vienna so</font>

5
00:00:12,960 --> 00:00:21,390
for<font color="#E5E5E5"> this talk I'm gonna simplify like</font>

6
00:00:18,240 --> 00:00:24,049
take file format data formats protocols

7
00:00:21,390 --> 00:00:29,269
treat them all as a<font color="#E5E5E5"> language they are</font>

8
00:00:24,050 --> 00:00:31,949
describing the data and<font color="#E5E5E5"> the</font><font color="#CCCCCC"> file</font><font color="#E5E5E5"> is a</font>

9
00:00:29,269 --> 00:00:35,610
transmission as a data<font color="#E5E5E5"> stream is one or</font>

10
00:00:31,949 --> 00:00:38,070
more packets conceptually from the

11
00:00:35,610 --> 00:00:41,730
length sock point of view they're quite

12
00:00:38,070 --> 00:00:45,030
the same and when we look<font color="#E5E5E5"> at the typical</font>

13
00:00:41,730 --> 00:00:48,510
input path we have<font color="#E5E5E5"> some machine that</font>

14
00:00:45,030 --> 00:00:54,120
takes the data interprets it decodes

15
00:00:48,510 --> 00:00:57,599
posits does some computation and output

16
00:00:54,120 --> 00:01:00,288
something that we like to see maybe it's

17
00:00:57,600 --> 00:01:03,570
a spreadsheet maybe it's a<font color="#CCCCCC"> picture</font>

18
00:01:00,289 --> 00:01:06,810
basically depending on on the data that

19
00:01:03,570 --> 00:01:09,570
it was fed with in the worst case from

20
00:01:06,810 --> 00:01:13,770
the length<font color="#CCCCCC"> sack perspective this machine</font>

21
00:01:09,570 --> 00:01:17,580
is Turing complete this is all just a

22
00:01:13,770 --> 00:01:19,770
part of the<font color="#E5E5E5"> picture then usually these</font>

23
00:01:17,580 --> 00:01:23,490
machines are nested concatenated or

24
00:01:19,770 --> 00:01:25,679
stacked in some way<font color="#CCCCCC"> for example</font><font color="#E5E5E5"> you</font>

25
00:01:23,490 --> 00:01:28,229
could have like a very simple machine

26
00:01:25,680 --> 00:01:30,060
that is<font color="#E5E5E5"> a synchronizer in front that</font>

27
00:01:28,229 --> 00:01:33,380
detects where the data starts and then

28
00:01:30,060 --> 00:01:36,600
you have some error correction or

29
00:01:33,380 --> 00:01:41,720
decompression and then the final machine

30
00:01:36,600 --> 00:01:47,850
that reads your data and does something

31
00:01:41,720 --> 00:01:52,408
so the different possibilities<font color="#CCCCCC"> why we</font>

32
00:01:47,850 --> 00:01:54,899
nest or layer the data and these

33
00:01:52,409 --> 00:01:57,290
machines and in some cases we have

34
00:01:54,899 --> 00:02:00,570
another simple machine in front of it

35
00:01:57,290 --> 00:02:04,680
that is in dissector which classifies

36
00:02:00,570 --> 00:02:08,128
the data format and usually do returns

37
00:02:04,680 --> 00:02:10,970
<font color="#E5E5E5">one power for one option how to read</font>

38
00:02:08,128 --> 00:02:13,200
this data this<font color="#E5E5E5"> is very common</font><font color="#CCCCCC"> sense</font>

39
00:02:10,970 --> 00:02:15,880
usually we'd like to have

40
00:02:13,200 --> 00:02:18,040
the nice<font color="#CCCCCC"> thing about standards is that</font>

41
00:02:15,880 --> 00:02:24,609
there are so many to choose<font color="#CCCCCC"> from so we</font>

42
00:02:18,040 --> 00:02:27,790
have like the picture program has to be

43
00:02:24,610 --> 00:02:33,370
able<font color="#E5E5E5"> to read multiple picture formats</font>

44
00:02:27,790 --> 00:02:35,829
and so we typically end up with an<font color="#E5E5E5"> even</font>

45
00:02:33,370 --> 00:02:39,520
more complex machine or array of

46
00:02:35,830 --> 00:02:43,330
machines so let's talk about<font color="#E5E5E5"> that the</font>

47
00:02:39,520 --> 00:02:46,690
dissector a little bit more we can play

48
00:02:43,330 --> 00:02:50,100
tricks with<font color="#E5E5E5"> the dissector by building</font>

49
00:02:46,690 --> 00:02:55,780
binary polyglots there is this

50
00:02:50,100 --> 00:02:58,750
tremendous work from<font color="#CCCCCC"> albertini that user</font>

51
00:02:55,780 --> 00:03:01,390
uses different file formats like PDF zip

52
00:02:58,750 --> 00:03:04,240
and g pack and stuff them so together

53
00:03:01,390 --> 00:03:09,339
<font color="#E5E5E5">that they are actually valid for all</font>

54
00:03:04,240 --> 00:03:11,440
free file formats about and yeah and<font color="#E5E5E5"> you</font>

55
00:03:09,340 --> 00:03:15,730
can open it with different programs and

56
00:03:11,440 --> 00:03:21,540
it shows two different content this has

57
00:03:15,730 --> 00:03:26,280
already security implications the famous

58
00:03:21,540 --> 00:03:30,070
ambiguity is in security paradigm

59
00:03:26,280 --> 00:03:32,620
<font color="#E5E5E5">imagine an antivirus firewall that does</font>

60
00:03:30,070 --> 00:03:35,760
not know how to treat this violent with

61
00:03:32,620 --> 00:03:38,290
my treatise file as one type scan for

62
00:03:35,760 --> 00:03:41,970
<font color="#E5E5E5">malicious content but the user that</font>

63
00:03:38,290 --> 00:03:47,920
<font color="#E5E5E5">opens</font><font color="#CCCCCC"> the file treated as another file</font>

64
00:03:41,970 --> 00:03:52,000
so let's picture this<font color="#E5E5E5"> a little bit we</font>

65
00:03:47,920 --> 00:03:54,690
have<font color="#E5E5E5"> our piece</font><font color="#CCCCCC"> of data</font><font color="#E5E5E5"> and we carefully</font>

66
00:03:52,000 --> 00:03:58,930
interleave these different file formats

67
00:03:54,690 --> 00:04:03,130
together maybe even reusing some of the

68
00:03:58,930 --> 00:04:07,930
<font color="#E5E5E5">bytes for both and some bytes are only</font>

69
00:04:03,130 --> 00:04:10,690
for one or the other file format the

70
00:04:07,930 --> 00:04:13,180
other thing<font color="#E5E5E5"> I mentioned briefly before</font>

71
00:04:10,690 --> 00:04:16,660
one<font color="#CCCCCC"> of these machines</font><font color="#E5E5E5"> could be an error</font>

72
00:04:13,180 --> 00:04:19,450
correction correcting machine so an

73
00:04:16,660 --> 00:04:22,210
error correcting machine is something

74
00:04:19,450 --> 00:04:26,620
that is heavily used for<font color="#E5E5E5"> example in data</font>

75
00:04:22,210 --> 00:04:29,830
transmission or in storage<font color="#CCCCCC"> for example</font>

76
00:04:26,620 --> 00:04:33,880
digital radio broadcasts of<font color="#CCCCCC"> different</font>

77
00:04:29,830 --> 00:04:37,690
kinds radio and video and telephone

78
00:04:33,880 --> 00:04:41,290
networks with GSM UMTS tetra whatever

79
00:04:37,690 --> 00:04:47,100
you named<font color="#CCCCCC"> Orion with storage on hard</font>

80
00:04:41,290 --> 00:04:51,880
disks on in rates in cloud<font color="#CCCCCC"> computing and</font>

81
00:04:47,100 --> 00:04:55,540
also with barcodes as kind of in between

82
00:04:51,880 --> 00:04:58,389
between transmission and storage so

83
00:04:55,540 --> 00:05:01,150
forward error correction is basically a

84
00:04:58,389 --> 00:05:03,820
technique that cope with arrows on an

85
00:05:01,150 --> 00:05:07,090
unreliable channel without having a

86
00:05:03,820 --> 00:05:09,360
return channel and it uses some kind of

87
00:05:07,090 --> 00:05:12,369
redundant encoding there are different

88
00:05:09,360 --> 00:05:14,620
<font color="#CCCCCC">types of these error correction</font>

89
00:05:12,370 --> 00:05:17,530
techniques very simple like parity and

90
00:05:14,620 --> 00:05:20,560
<font color="#E5E5E5">hamming codes or complex one with like</font>

91
00:05:17,530 --> 00:05:22,960
<font color="#CCCCCC">read Salamone or trouble codes for this</font>

92
00:05:20,560 --> 00:05:25,419
talk we<font color="#CCCCCC"> can treat them like a black box</font>

93
00:05:22,960 --> 00:05:29,799
they just correct our data within a

94
00:05:25,419 --> 00:05:34,200
certain margin error margin that<font color="#E5E5E5"> usually</font>

95
00:05:29,800 --> 00:05:39,820
can be configured so it transforms then

96
00:05:34,200 --> 00:05:43,030
data into code words and vice versa as

97
00:05:39,820 --> 00:05:46,150
long as this error margin is not

98
00:05:43,030 --> 00:05:49,690
overstressed we can or the transmission

99
00:05:46,150 --> 00:05:53,969
channel or the arrows can<font color="#E5E5E5"> override parts</font>

100
00:05:49,690 --> 00:05:56,979
of the data usually almost<font color="#E5E5E5"> everything</font>

101
00:05:53,970 --> 00:06:04,080
except maybe for the ECC header itself

102
00:05:56,979 --> 00:06:06,789
and a synchronization signal in front so

103
00:06:04,080 --> 00:06:13,359
basically we can now stick<font color="#E5E5E5"> both things</font>

104
00:06:06,789 --> 00:06:19,060
together and make include<font color="#CCCCCC"> a foreign or</font>

105
00:06:13,360 --> 00:06:22,419
alien data into this data packet or file

106
00:06:19,060 --> 00:06:26,110
or transmission because<font color="#E5E5E5"> the error</font>

107
00:06:22,419 --> 00:06:28,139
correction will transparently for the

108
00:06:26,110 --> 00:06:31,449
one data stream will transport<font color="#CCCCCC"> Lee</font>

109
00:06:28,139 --> 00:06:34,630
abstract the foreign data way on the

110
00:06:31,449 --> 00:06:38,960
<font color="#CCCCCC">other hand the foreign tater is still in</font>

111
00:06:34,630 --> 00:06:42,979
this packet the difference<font color="#E5E5E5"> to</font>

112
00:06:38,960 --> 00:06:47,448
say the packet in packet attack from

113
00:06:42,979 --> 00:06:50,110
from<font color="#E5E5E5"> Travis good speed at all is that in</font>

114
00:06:47,449 --> 00:06:53,590
this case<font color="#E5E5E5"> we do not modify the user data</font>

115
00:06:50,110 --> 00:06:56,330
the user data after<font color="#CCCCCC"> the error correction</font>

116
00:06:53,590 --> 00:07:00,679
remains the same we just included

117
00:06:56,330 --> 00:07:02,719
another packet inside of it and both

118
00:07:00,680 --> 00:07:06,590
packets are actually correct it's also

119
00:07:02,720 --> 00:07:11,270
not like a hidden data channel because

120
00:07:06,590 --> 00:07:14,659
we can<font color="#E5E5E5"> actually put in very valid data</font>

121
00:07:11,270 --> 00:07:18,289
in there that is then correctly picked

122
00:07:14,660 --> 00:07:24,050
up by some decoder by some standard

123
00:07:18,289 --> 00:07:26,539
compliant decoder we can sometimes we

124
00:07:24,050 --> 00:07:28,940
also include these packets includes a

125
00:07:26,539 --> 00:07:31,490
kind of<font color="#E5E5E5"> byte sequence header or magic</font>

126
00:07:28,940 --> 00:07:34,099
value or mark or synchronization pattern

127
00:07:31,490 --> 00:07:44,539
and even<font color="#E5E5E5"> that one we can</font><font color="#CCCCCC"> include inside</font>

128
00:07:34,099 --> 00:07:46,340
of this alien data in yeah so these as I

129
00:07:44,539 --> 00:07:48,530
<font color="#E5E5E5">told before this is used in several</font>

130
00:07:46,340 --> 00:07:51,349
transmission techniques like radio and

131
00:07:48,530 --> 00:07:55,280
story or in storage and it's also used

132
00:07:51,349 --> 00:07:58,909
in<font color="#CCCCCC"> barcodes so we put up a simple</font>

133
00:07:55,280 --> 00:08:02,179
<font color="#CCCCCC">example based on barcodes so you can</font>

134
00:07:58,909 --> 00:08:05,030
build<font color="#E5E5E5"> up sorry so you can take one</font>

135
00:08:02,180 --> 00:08:09,020
barcode and in a bit embed another bar

136
00:08:05,030 --> 00:08:11,960
code into it and both are actually

137
00:08:09,020 --> 00:08:14,419
standard compliant and it's based on<font color="#CCCCCC"> the</font>

138
00:08:11,960 --> 00:08:20,539
implementation<font color="#E5E5E5"> of the reader which one</font>

139
00:08:14,419 --> 00:08:22,250
it will decode so the the nice<font color="#E5E5E5"> thing</font>

140
00:08:20,539 --> 00:08:24,020
about barcodes again is there are so

141
00:08:22,250 --> 00:08:27,169
many to choose from we can stuff

142
00:08:24,020 --> 00:08:30,460
different barcode types into another or

143
00:08:27,169 --> 00:08:33,799
we can stuff the same power code type

144
00:08:30,460 --> 00:08:39,848
into it<font color="#E5E5E5"> this is just a quick overview</font>

145
00:08:33,799 --> 00:08:43,909
about different but 2d barcode types we

146
00:08:39,849 --> 00:08:48,320
focused in in our experiments on the

147
00:08:43,909 --> 00:08:52,490
barcodes with square pixels so we picked

148
00:08:48,320 --> 00:08:58,040
<font color="#E5E5E5">up QR data matrix and at stake code</font>

149
00:08:52,490 --> 00:09:02,000
and tested it with certain decoders the

150
00:08:58,040 --> 00:09:03,680
most<font color="#E5E5E5"> popular</font><font color="#CCCCCC"> Multi multi standard</font>

151
00:09:02,000 --> 00:09:09,200
barcode readers for<font color="#CCCCCC"> iphone and android</font>

152
00:09:03,680 --> 00:09:13,180
and a professional symbol barcode reader

153
00:09:09,200 --> 00:09:16,640
that is used like in point-of-sale

154
00:09:13,180 --> 00:09:19,729
installations so just a quick few

155
00:09:16,640 --> 00:09:22,939
examples like in<font color="#E5E5E5"> this one we stuffed an</font>

156
00:09:19,730 --> 00:09:28,399
extra<font color="#CCCCCC"> key code into a bigger QR code and</font>

157
00:09:22,940 --> 00:09:30,800
you<font color="#CCCCCC"> can see some decode the inner power</font>

158
00:09:28,399 --> 00:09:33,529
code sum decode the outer barcode

159
00:09:30,800 --> 00:09:37,370
sometimes it's indifferent and<font color="#E5E5E5"> the</font>

160
00:09:33,529 --> 00:09:42,830
decode one or another based on pure

161
00:09:37,370 --> 00:09:46,790
chance we did this with data matrix as

162
00:09:42,830 --> 00:09:51,440
well you can<font color="#CCCCCC"> see that for example neo</font>

163
00:09:46,790 --> 00:09:53,930
reader only<font color="#E5E5E5"> prefers the inner barcode in</font>

164
00:09:51,440 --> 00:09:57,290
this case the data matrix barcode other

165
00:09:53,930 --> 00:10:01,849
ones are either decoding the<font color="#E5E5E5"> inner or</font>

166
00:09:57,290 --> 00:10:07,849
the outer one with this example of QR in

167
00:10:01,850 --> 00:10:11,570
QR we can see<font color="#E5E5E5"> that for example the</font>

168
00:10:07,850 --> 00:10:14,480
symbol reader strongly prefers the inner

169
00:10:11,570 --> 00:10:17,720
one while most other readers decode the

170
00:10:14,480 --> 00:10:20,680
outer run or sometimes to come none but

171
00:10:17,720 --> 00:10:25,730
it's highly<font color="#E5E5E5"> implementation-specific and</font>

172
00:10:20,680 --> 00:10:29,239
the implementation basically is as

173
00:10:25,730 --> 00:10:32,270
follows we<font color="#CCCCCC"> have one very computational</font>

174
00:10:29,240 --> 00:10:34,640
lightweight machine that tries to<font color="#E5E5E5"> find</font>

175
00:10:32,270 --> 00:10:39,110
synchronization markers in the picture

176
00:10:34,640 --> 00:10:42,160
and determine which kind of bar code the

177
00:10:39,110 --> 00:10:44,930
user scanning and then we have a

178
00:10:42,160 --> 00:10:48,709
computational more complex code that

179
00:10:44,930 --> 00:10:54,260
then decodes the data and once<font color="#E5E5E5"> choosing</font>

180
00:10:48,709 --> 00:10:59,199
a path then the the decoder runs down

181
00:10:54,260 --> 00:11:04,160
<font color="#CCCCCC">and just returns one of these codes so</font>

182
00:10:59,200 --> 00:11:05,890
yeah and while the standard for a

183
00:11:04,160 --> 00:11:10,600
particular power code

184
00:11:05,890 --> 00:11:15,439
while they exist there is no standard in

185
00:11:10,600 --> 00:11:19,670
in a sequence how to dissect different

186
00:11:15,440 --> 00:11:22,640
bar codes so is<font color="#E5E5E5"> it just harmless fun or</font>

187
00:11:19,670 --> 00:11:28,280
are there some practical implications of

188
00:11:22,640 --> 00:11:30,110
it so with QR codes we know there have

189
00:11:28,280 --> 00:11:33,290
<font color="#CCCCCC">been several vulnerabilities like these</font>

190
00:11:30,110 --> 00:11:37,010
ussd codes that can wipe your phone into

191
00:11:33,290 --> 00:11:40,250
effect and make a factory reset they can

192
00:11:37,010 --> 00:11:42,200
generate<font color="#E5E5E5"> premium rate SMS messages or</font>

193
00:11:40,250 --> 00:11:48,800
they can trigger exploits in the web

194
00:11:42,200 --> 00:11:51,140
browser and with the knowledge that some

195
00:11:48,800 --> 00:11:53,839
readers and some phones or some decoders

196
00:11:51,140 --> 00:11:56,680
a prefer one coat or another<font color="#E5E5E5"> I can</font>

197
00:11:53,840 --> 00:11:59,420
actually<font color="#CCCCCC"> distinguish between different</font>

198
00:11:56,680 --> 00:12:02,510
platforms and readers and then tailor

199
00:11:59,420 --> 00:12:05,689
exploits<font color="#E5E5E5"> for specific users or maybe do</font>

200
00:12:02,510 --> 00:12:10,360
or just probabilistic exploits like

201
00:12:05,690 --> 00:12:12,950
divert a small number of users to

202
00:12:10,360 --> 00:12:16,010
transfer<font color="#E5E5E5"> money to a different location</font>

203
00:12:12,950 --> 00:12:21,110
since QR codes are also used like why

204
00:12:16,010 --> 00:12:23,390
people and Bitcoin so for<font color="#CCCCCC"> their</font><font color="#E5E5E5"> for the</font>

205
00:12:21,110 --> 00:12:27,200
<font color="#E5E5E5">bar code domain we can think of</font>

206
00:12:23,390 --> 00:12:29,780
different<font color="#E5E5E5"> countermeasures like and</font>

207
00:12:27,200 --> 00:12:32,480
string and decoding order or presenting

208
00:12:29,780 --> 00:12:35,930
the user with different options as soon

209
00:12:32,480 --> 00:12:40,970
as the reader software finds more than

210
00:12:35,930 --> 00:12:43,280
one code but this would include<font color="#CCCCCC"> the</font>

211
00:12:40,970 --> 00:12:45,950
<font color="#CCCCCC">reading software actually</font><font color="#E5E5E5"> tries to</font>

212
00:12:43,280 --> 00:12:50,689
decode all possible codes regardless

213
00:12:45,950 --> 00:12:54,530
which one it found first however for<font color="#E5E5E5"> the</font>

214
00:12:50,690 --> 00:13:00,400
generic case when we go back to<font color="#CCCCCC"> the more</font>

215
00:12:54,530 --> 00:13:04,520
generic transmission example from before

216
00:13:00,400 --> 00:13:05,990
it's kind<font color="#E5E5E5"> of hard</font><font color="#CCCCCC"> to spot multiple</font>

217
00:13:04,520 --> 00:13:08,540
synchronization markers in an

218
00:13:05,990 --> 00:13:10,540
asynchronous data channel and verify

219
00:13:08,540 --> 00:13:15,620
that their belonging<font color="#E5E5E5"> to non overlapping</font>

220
00:13:10,540 --> 00:13:17,000
overlapping data packets and this might

221
00:13:15,620 --> 00:13:20,370
also<font color="#E5E5E5"> to clue</font>

222
00:13:17,000 --> 00:13:23,520
include decoding and verifying all

223
00:13:20,370 --> 00:13:29,820
possible interpretations of the received

224
00:13:23,520 --> 00:13:35,400
data so one so application-specific the

225
00:13:29,820 --> 00:13:39,420
decoder could either drop the other the

226
00:13:35,400 --> 00:13:42,390
data or it can escalate it up towards

227
00:13:39,420 --> 00:13:46,280
<font color="#CCCCCC">the user and let the user choose you</font>

228
00:13:42,390 --> 00:13:50,880
could probably think also of other

229
00:13:46,280 --> 00:13:54,510
heuristics like choosing the data stream

230
00:13:50,880 --> 00:13:59,090
<font color="#E5E5E5">that has the highest data density but in</font>

231
00:13:54,510 --> 00:14:02,880
either way it's a kind<font color="#E5E5E5"> of guessing and</font>

232
00:13:59,090 --> 00:14:06,000
ambiguities in security so to wrap

233
00:14:02,880 --> 00:14:08,520
things up the main conceptual problem

234
00:14:06,000 --> 00:14:12,690
with countermeasures in this area is

235
00:14:08,520 --> 00:14:15,569
<font color="#CCCCCC">that ECC's</font><font color="#E5E5E5"> are error correcting codes</font>

236
00:14:12,690 --> 00:14:18,510
are designed to transmit<font color="#CCCCCC"> Lee hide any</font>

237
00:14:15,570 --> 00:14:22,770
modifications from the process<font color="#E5E5E5"> sing</font>

238
00:14:18,510 --> 00:14:24,960
layers above and as the host data data

239
00:14:22,770 --> 00:14:27,569
as well<font color="#CCCCCC"> as the parasitic data are</font>

240
00:14:24,960 --> 00:14:36,660
actually valid and conformed to

241
00:14:27,570 --> 00:14:39,570
specifications so having<font color="#CCCCCC"> ja in in in</font>

242
00:14:36,660 --> 00:14:42,510
some application domains a stringent

243
00:14:39,570 --> 00:14:44,850
language description that includes rules

244
00:14:42,510 --> 00:14:48,060
for the sexting multiple languages of

245
00:14:44,850 --> 00:14:53,280
standard might be a solution<font color="#E5E5E5"> but this</font>

246
00:14:48,060 --> 00:14:58,439
will not<font color="#CCCCCC"> work in the general case so</font>

247
00:14:53,280 --> 00:15:00,959
this was a dad yeah my talk and I'm

248
00:14:58,440 --> 00:15:03,260
happy<font color="#CCCCCC"> to take questions let's</font><font color="#E5E5E5"> take our</font>

249
00:15:00,960 --> 00:15:03,260
speaker

250
00:15:05,490 --> 00:15:16,840
questions yes Jacob would you say<font color="#E5E5E5"> this</font>

251
00:15:15,160 --> 00:15:19,000
is somewhat analogous to the<font color="#CCCCCC"> row hammer</font>

252
00:15:16,840 --> 00:15:21,850
bug where you have closer to the<font color="#E5E5E5"> Phi</font>

253
00:15:19,000 --> 00:15:23,980
level a ambiguity that's trying<font color="#CCCCCC"> to be</font>

254
00:15:21,850 --> 00:15:26,310
<font color="#E5E5E5">that's propagating through and actually</font>

255
00:15:23,980 --> 00:15:31,540
creating an<font color="#E5E5E5"> application-layer</font>

256
00:15:26,310 --> 00:15:41,699
vulnerability you can definitely<font color="#CCCCCC"> see it</font>

257
00:15:31,540 --> 00:15:41,699
this way thank you anybody<font color="#E5E5E5"> else</font>

