1
00:00:00,000 --> 00:00:04,680
yeah and this<font color="#E5E5E5"> is joint work with Stefan</font>

2
00:00:02,370 --> 00:00:07,529
kugelman and panetone<font color="#CCCCCC"> per my professor</font>

3
00:00:04,680 --> 00:00:09,719
<font color="#E5E5E5">and I have the management title on them</font>

4
00:00:07,529 --> 00:00:13,620
on the top and what we<font color="#CCCCCC"> actually do in</font>

5
00:00:09,719 --> 00:00:17,599
the<font color="#E5E5E5"> middle so it's about defining an</font>

6
00:00:13,620 --> 00:00:17,599
<font color="#CCCCCC">parses within context free grammars and</font>

7
00:00:17,660 --> 00:00:23,550
so perhaps a little bit about me to get

8
00:00:21,539 --> 00:00:26,039
this into the right context actually I

9
00:00:23,550 --> 00:00:29,880
<font color="#E5E5E5">am NOT from the security research</font><font color="#CCCCCC"> stuff</font>

10
00:00:26,039 --> 00:00:33,899
I'm doing software engineering so bear

11
00:00:29,880 --> 00:00:35,790
with me I'm i used to be a pen tester

12
00:00:33,899 --> 00:00:38,489
and now with soft engineering as i said

13
00:00:35,790 --> 00:00:40,079
and i will always wondered why is

14
00:00:38,489 --> 00:00:42,750
cross-site scripting is that hard that

15
00:00:40,079 --> 00:00:45,000
nobody gets<font color="#E5E5E5"> it right right so what</font><font color="#CCCCCC"> is</font>

16
00:00:42,750 --> 00:00:47,610
the fundamental problem<font color="#CCCCCC"> with</font><font color="#E5E5E5"> it and in</font>

17
00:00:45,000 --> 00:00:52,649
<font color="#CCCCCC">the end yeah i ended up at length sick</font>

18
00:00:47,610 --> 00:00:55,260
so<font color="#E5E5E5"> let's see how this comes so as you</font>

19
00:00:52,649 --> 00:00:59,879
all might know cross-site scripting and

20
00:00:55,260 --> 00:01:01,980
SQL injection our problems where an

21
00:00:59,879 --> 00:01:05,670
attacker<font color="#CCCCCC"> malformed</font><font color="#E5E5E5"> puts a malformed</font>

22
00:01:01,980 --> 00:01:09,450
input into a<font color="#CCCCCC"> front-end in here and then</font>

23
00:01:05,670 --> 00:01:11,220
manipulates some generated or some yeah

24
00:01:09,450 --> 00:01:16,070
some other<font color="#E5E5E5"> language was it generated</font>

25
00:01:11,220 --> 00:01:21,299
from this front-end um for SQL this is

26
00:01:16,070 --> 00:01:23,880
yeah<font color="#E5E5E5"> okay um so basically what to</font>

27
00:01:21,299 --> 00:01:28,560
abstract from this these are input

28
00:01:23,880 --> 00:01:32,579
design injection attacks and some

29
00:01:28,560 --> 00:01:37,909
different but I'm<font color="#CCCCCC"> 222 yeah generalize</font>

30
00:01:32,579 --> 00:01:40,740
these the the front end needs to umpires

31
00:01:37,909 --> 00:01:43,649
need some parts into some language in

32
00:01:40,740 --> 00:01:46,259
order to talks into some kind of back

33
00:01:43,649 --> 00:01:47,880
end so this is<font color="#CCCCCC"> a usual usual set up</font>

34
00:01:46,259 --> 00:01:50,579
where you<font color="#E5E5E5"> always find these injection</font>

35
00:01:47,880 --> 00:01:53,240
attacks might be the target let<font color="#E5E5E5"> as seen</font>

36
00:01:50,579 --> 00:01:56,039
here might be again browser or might be

37
00:01:53,240 --> 00:01:59,969
some back-end system so basically

38
00:01:56,040 --> 00:02:03,360
<font color="#E5E5E5">unpause in here so you might say</font><font color="#CCCCCC"> ok yeah</font>

39
00:01:59,969 --> 00:02:04,979
I<font color="#E5E5E5"> know SQL injection is already already</font>

40
00:02:03,360 --> 00:02:08,360
fixed we have some libraries for this

41
00:02:04,979 --> 00:02:12,150
and also for for cross-site scripting

42
00:02:08,360 --> 00:02:13,900
there is work which kind<font color="#E5E5E5"> of works so why</font>

43
00:02:12,150 --> 00:02:16,659
are<font color="#CCCCCC"> you talking about this</font>

44
00:02:13,900 --> 00:02:19,209
yeah<font color="#E5E5E5"> because it's not fixed for the</font>

45
00:02:16,659 --> 00:02:22,480
common case right so if we design our

46
00:02:19,209 --> 00:02:26,290
own protocols or somebody else's doing

47
00:02:22,480 --> 00:02:30,909
this then the question is how do they

48
00:02:26,290 --> 00:02:33,310
define<font color="#E5E5E5"> their yeah how to how do they</font>

49
00:02:30,909 --> 00:02:36,879
encode with their stuff right so they

50
00:02:33,310 --> 00:02:40,659
would basically just use just use string

51
00:02:36,879 --> 00:02:44,608
concatenation and or whatever and put it

52
00:02:40,659 --> 00:02:47,078
<font color="#E5E5E5">into put it into their formats so</font>

53
00:02:44,609 --> 00:02:49,659
basically<font color="#CCCCCC"> I'm concerned about</font><font color="#E5E5E5"> all these</font>

54
00:02:47,079 --> 00:02:52,599
cars all these backends interfaces which

55
00:02:49,659 --> 00:02:58,120
nobody had looked at or which are

56
00:02:52,599 --> 00:03:02,920
implemented in the future so to<font color="#E5E5E5"> get it</font>

57
00:02:58,120 --> 00:03:05,620
more a little bit on the point we have

58
00:03:02,920 --> 00:03:06,909
these usual stuff on the on the top here

59
00:03:05,620 --> 00:03:09,849
and where we have a string

60
00:03:06,909 --> 00:03:13,420
representation on<font color="#E5E5E5"> the wire and need to</font>

61
00:03:09,849 --> 00:03:16,089
<font color="#E5E5E5">pass it to make</font><font color="#CCCCCC"> it somehow usable for an</font>

62
00:03:13,420 --> 00:03:18,849
application<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then afterwards when an</font>

63
00:03:16,090 --> 00:03:20,470
application back talks to to to<font color="#E5E5E5"> bring</font>

64
00:03:18,849 --> 00:03:24,040
this on the wire again we need to

65
00:03:20,470 --> 00:03:27,430
unpause it and so usual round trip would

66
00:03:24,040 --> 00:03:30,489
be that for every<font color="#CCCCCC"> ast we would expect</font>

67
00:03:27,430 --> 00:03:32,859
<font color="#CCCCCC">that when we unpause it in later prosit</font>

68
00:03:30,489 --> 00:03:37,269
it gets again the same<font color="#CCCCCC"> esteem that's</font>

69
00:03:32,859 --> 00:03:40,389
nice and<font color="#E5E5E5"> true for for comm input but if</font>

70
00:03:37,269 --> 00:03:44,049
<font color="#E5E5E5">we inject or if an attacker inject some</font>

71
00:03:40,389 --> 00:03:47,019
some malicious input why are some

72
00:03:44,049 --> 00:03:49,150
whatever way into these application and

73
00:03:47,019 --> 00:03:51,489
the application wants to put<font color="#CCCCCC"> that into a</font>

74
00:03:49,150 --> 00:03:55,060
document so basically putting it into an

75
00:03:51,489 --> 00:04:00,760
<font color="#CCCCCC">ast and some some controls in control</font>

76
00:03:55,060 --> 00:04:03,010
characters and then we unpair<font color="#E5E5E5"> assist we</font>

77
00:04:00,760 --> 00:04:05,530
get an in young we get a different data

78
00:04:03,010 --> 00:04:09,728
structure so a different message on the

79
00:04:05,530 --> 00:04:13,090
wire which is not<font color="#E5E5E5"> what the developer</font>

80
00:04:09,729 --> 00:04:16,150
expected and so what what we actually

81
00:04:13,090 --> 00:04:18,340
need here is that<font color="#E5E5E5"> even in ask an even in</font>

82
00:04:16,149 --> 00:04:20,679
the way in unpause<font color="#CCCCCC"> 'that and these</font>

83
00:04:18,339 --> 00:04:23,650
special crafted messages these are

84
00:04:20,680 --> 00:04:25,370
correctly encoded and decoded again when

85
00:04:23,650 --> 00:04:29,250
parsed again

86
00:04:25,370 --> 00:04:32,010
so as we are lazy we don't want to write

87
00:04:29,250 --> 00:04:34,230
these<font color="#CCCCCC"> parcels</font><font color="#E5E5E5"> and unprocessed by hand so</font>

88
00:04:32,010 --> 00:04:37,950
<font color="#CCCCCC">we want to</font><font color="#E5E5E5"> generate them so we actually</font>

89
00:04:34,230 --> 00:04:41,280
<font color="#E5E5E5">implemented or extended a tool called</font>

90
00:04:37,950 --> 00:04:43,920
Monte core by so we have here our

91
00:04:41,280 --> 00:04:46,770
grammar and this<font color="#CCCCCC"> multi core tool is</font>

92
00:04:43,920 --> 00:04:48,480
basically<font color="#E5E5E5"> a pastor generator so we</font>

93
00:04:46,770 --> 00:04:51,180
generate<font color="#CCCCCC"> heartless from them and</font>

94
00:04:48,480 --> 00:04:54,770
<font color="#CCCCCC">unpowered what we actually did here in</font>

95
00:04:51,180 --> 00:04:57,420
this work is that we extended these

96
00:04:54,770 --> 00:05:00,599
definition of grandmas<font color="#CCCCCC"> with this</font>

97
00:04:57,420 --> 00:05:03,720
encoding table down here on a per token

98
00:05:00,600 --> 00:05:07,500
level so means you can define within the

99
00:05:03,720 --> 00:05:16,500
grammar<font color="#E5E5E5"> that everything which is in this</font>

100
00:05:07,500 --> 00:05:19,530
token is encoded or some some yes<font color="#CCCCCC"> some</font>

101
00:05:16,500 --> 00:05:21,630
tokens get encoded within this within

102
00:05:19,530 --> 00:05:23,969
this token so say these special

103
00:05:21,630 --> 00:05:26,780
characters here getting coded so there

104
00:05:23,970 --> 00:05:38,820
they<font color="#E5E5E5"> don't do not interfere with other</font>

105
00:05:26,780 --> 00:05:41,609
as other structures exactly so that's so

106
00:05:38,820 --> 00:05:43,740
we want<font color="#E5E5E5"> to do this for for the four</font>

107
00:05:41,610 --> 00:05:46,740
languages which are more complex so

108
00:05:43,740 --> 00:05:50,070
basically for for SQL this would be

109
00:05:46,740 --> 00:05:52,470
<font color="#E5E5E5">enough you</font><font color="#CCCCCC"> just you just right okay we</font>

110
00:05:50,070 --> 00:05:54,990
<font color="#E5E5E5">need to encode these these characters</font>

111
00:05:52,470 --> 00:05:58,500
here but if<font color="#E5E5E5"> we if it goes to more</font>

112
00:05:54,990 --> 00:06:03,020
complex languages like HTML we have more

113
00:05:58,500 --> 00:06:06,990
embedded different embedded contexts

114
00:06:03,020 --> 00:06:09,900
which yeah are embedded into each other

115
00:06:06,990 --> 00:06:12,420
and it gets more complicated so what

116
00:06:09,900 --> 00:06:15,510
what we use here is technique is the

117
00:06:12,420 --> 00:06:19,020
<font color="#CCCCCC">language composition which is basically</font>

118
00:06:15,510 --> 00:06:22,260
<font color="#CCCCCC">that you let you put that you define one</font>

119
00:06:19,020 --> 00:06:25,500
grammar / language and put it and put

120
00:06:22,260 --> 00:06:28,680
<font color="#E5E5E5">into this language another language so</font>

121
00:06:25,500 --> 00:06:30,510
that or you concatenate these these

122
00:06:28,680 --> 00:06:34,890
different different languages by

123
00:06:30,510 --> 00:06:37,349
replacing terminal symbol within the

124
00:06:34,890 --> 00:06:39,330
super grammar and<font color="#E5E5E5"> in that way you can</font>

125
00:06:37,350 --> 00:06:43,889
embed like<font color="#CCCCCC"> Java square</font>

126
00:06:39,330 --> 00:06:47,068
in HTML also and<font color="#E5E5E5"> you would then like on</font>

127
00:06:43,889 --> 00:06:50,750
the previous slide define<font color="#CCCCCC"> the encoding /</font>

128
00:06:47,069 --> 00:06:54,439
/ token so basically you<font color="#E5E5E5"> don't need to</font>

129
00:06:50,750 --> 00:07:00,090
<font color="#E5E5E5">cover about interference between</font>

130
00:06:54,439 --> 00:07:04,289
languages and now when we want to others

131
00:07:00,090 --> 00:07:06,830
this these composed languages we need to

132
00:07:04,289 --> 00:07:10,530
start from the bottom first and then

133
00:07:06,830 --> 00:07:14,940
Randy Randy<font color="#CCCCCC"> unpaired on the encoding and</font>

134
00:07:10,530 --> 00:07:19,169
then put this one into into the<font color="#E5E5E5"> yeah</font>

135
00:07:14,940 --> 00:07:22,800
<font color="#E5E5E5">more top language unpause</font><font color="#CCCCCC"> oh and so we</font>

136
00:07:19,169 --> 00:07:25,318
could use<font color="#E5E5E5"> some come some characters</font>

137
00:07:22,800 --> 00:07:28,409
within within one<font color="#CCCCCC"> of the sub languages</font>

138
00:07:25,319 --> 00:07:32,190
which is which<font color="#CCCCCC"> is used in the super</font>

139
00:07:28,409 --> 00:07:35,599
languages without having trouble so just

140
00:07:32,190 --> 00:07:39,629
from defining this it it gets this a

141
00:07:35,599 --> 00:07:42,509
secure<font color="#CCCCCC"> uh none pass process in the end</font>

142
00:07:39,629 --> 00:07:46,770
even though the developer does not have

143
00:07:42,509 --> 00:07:51,479
to explicitly specify this and within

144
00:07:46,770 --> 00:07:53,490
parsing it's it's the same way just just

145
00:07:51,479 --> 00:07:57,900
a different round just a<font color="#E5E5E5"> different way</font>

146
00:07:53,490 --> 00:08:00,300
around to them to<font color="#E5E5E5"> get these parsing</font>

147
00:07:57,900 --> 00:08:06,419
again these these encoding again within

148
00:08:00,300 --> 00:08:09,990
the<font color="#CCCCCC"> passing now if</font><font color="#E5E5E5"> we if we have the</font>

149
00:08:06,419 --> 00:08:13,139
case like within forums or and some

150
00:08:09,990 --> 00:08:15,930
other we keep wickets<font color="#CCCCCC"> Vicky's or so that</font>

151
00:08:13,139 --> 00:08:18,120
we want<font color="#E5E5E5"> to include some some highly</font>

152
00:08:15,930 --> 00:08:22,770
structured input into into an output

153
00:08:18,120 --> 00:08:26,819
like HTML then it might be<font color="#CCCCCC"> a so one</font>

154
00:08:22,770 --> 00:08:28,318
option to do this is<font color="#E5E5E5"> like you you can't</font>

155
00:08:26,819 --> 00:08:30,539
you constructed for your output and

156
00:08:28,319 --> 00:08:35,810
grammar and say<font color="#CCCCCC"> okay in this special</font>

157
00:08:30,539 --> 00:08:39,899
token named like a um<font color="#CCCCCC"> I wanna I wanna</font>

158
00:08:35,809 --> 00:08:42,179
<font color="#E5E5E5">yeah</font><font color="#CCCCCC"> reducing the mightiness of of the</font>

159
00:08:39,899 --> 00:08:45,570
language so I don't know don't allow all

160
00:08:42,179 --> 00:08:47,729
tokens here but just a subset that is an

161
00:08:45,570 --> 00:08:50,339
earlier but<font color="#CCCCCC"> that gets a little bit</font><font color="#E5E5E5"> of a</font>

162
00:08:47,730 --> 00:08:53,200
mess because you need<font color="#CCCCCC"> to need to</font><font color="#E5E5E5"> have a</font>

163
00:08:50,339 --> 00:08:55,570
look at it special namings also

164
00:08:53,200 --> 00:08:59,470
new grammar so another alternative

165
00:08:55,570 --> 00:09:02,170
approach would be to to just<font color="#E5E5E5"> limit the</font>

166
00:08:59,470 --> 00:09:05,440
input so the you writin you write a

167
00:09:02,170 --> 00:09:09,969
grammar for your for your input and say

168
00:09:05,440 --> 00:09:12,360
<font color="#CCCCCC">ok I</font><font color="#E5E5E5"> just I just use use this limited</font>

169
00:09:09,970 --> 00:09:16,330
input here and then just copy it over

170
00:09:12,360 --> 00:09:18,340
this is kind of defeating an output

171
00:09:16,330 --> 00:09:21,010
problem with an input validation which

172
00:09:18,340 --> 00:09:24,970
is always kind<font color="#E5E5E5"> of dangerous if you do</font>

173
00:09:21,010 --> 00:09:28,990
this so the the program code from from

174
00:09:24,970 --> 00:09:31,600
<font color="#CCCCCC">passing the input to to producing the</font>

175
00:09:28,990 --> 00:09:34,660
output must not change this stuff here

176
00:09:31,600 --> 00:09:39,970
because otherwise something might get

177
00:09:34,660 --> 00:09:45,939
injected here so to give a little bit<font color="#E5E5E5"> of</font>

178
00:09:39,970 --> 00:09:50,320
<font color="#E5E5E5">a wrap up here is so how to use this or</font>

179
00:09:45,940 --> 00:09:52,540
how developers should use this is that

180
00:09:50,320 --> 00:09:57,400
we have somebody<font color="#E5E5E5"> who defines the</font>

181
00:09:52,540 --> 00:10:01,120
language and defines with with<font color="#CCCCCC"> the</font>

182
00:09:57,400 --> 00:10:05,170
grammar the the encoding tables and then

183
00:10:01,120 --> 00:10:09,100
generates<font color="#E5E5E5"> parses a nun process and with</font>

184
00:10:05,170 --> 00:10:11,920
these decoding and encoding enabled and

185
00:10:09,100 --> 00:10:15,700
then later<font color="#E5E5E5"> on developers who are just</font>

186
00:10:11,920 --> 00:10:20,610
<font color="#E5E5E5">using the format and canoe sees these</font>

187
00:10:15,700 --> 00:10:24,700
<font color="#E5E5E5">these generated passes and unpause us to</font>

188
00:10:20,610 --> 00:10:27,310
to write write out their their messages

189
00:10:24,700 --> 00:10:32,950
and this works like<font color="#CCCCCC"> okay they</font><font color="#E5E5E5"> they first</font>

190
00:10:27,310 --> 00:10:35,500
have to create an<font color="#CCCCCC"> AST so the in order to</font>

191
00:10:32,950 --> 00:10:38,410
for this tooling to<font color="#E5E5E5"> know which context</font>

192
00:10:35,500 --> 00:10:43,030
it's in and which encoding it has to

193
00:10:38,410 --> 00:10:46,810
apply and<font color="#CCCCCC"> then the the number two so</font>

194
00:10:43,030 --> 00:10:49,209
when<font color="#E5E5E5"> you</font><font color="#CCCCCC"> have these this AST you you can</font>

195
00:10:46,810 --> 00:10:51,280
add the data from the input and don't

196
00:10:49,210 --> 00:10:53,800
have<font color="#E5E5E5"> to care</font><font color="#CCCCCC"> about how its structured</font>

197
00:10:51,280 --> 00:10:56,020
because in the third step the encoder

198
00:10:53,800 --> 00:10:59,620
will encode everything and so<font color="#E5E5E5"> because</font>

199
00:10:56,020 --> 00:11:01,780
it's a pain to to create an<font color="#E5E5E5"> AST with</font>

200
00:10:59,620 --> 00:11:04,720
program languages and we have also

201
00:11:01,780 --> 00:11:06,569
<font color="#E5E5E5">implemented a kind of other possible</font>

202
00:11:04,720 --> 00:11:11,399
template so you could

203
00:11:06,570 --> 00:11:13,990
you could write<font color="#E5E5E5"> yeah a template AST</font>

204
00:11:11,399 --> 00:11:17,649
which looks like<font color="#E5E5E5"> your output and we</font>

205
00:11:13,990 --> 00:11:23,529
<font color="#CCCCCC">passed this one into an AST and</font><font color="#E5E5E5"> then the</font>

206
00:11:17,649 --> 00:11:28,420
process guys and gets like explained so

207
00:11:23,529 --> 00:11:31,680
we actually did this with so we did a

208
00:11:28,420 --> 00:11:35,709
case study<font color="#E5E5E5"> with HTML and javascript and</font>

209
00:11:31,680 --> 00:11:39,489
implemented implemented remedy for both

210
00:11:35,709 --> 00:11:41,979
of these and enroll the web application

211
00:11:39,490 --> 00:11:44,290
which uses these passes and unprocessed

212
00:11:41,980 --> 00:11:48,850
that only so sorry only<font color="#E5E5E5"> the ant puzzle</font>

213
00:11:44,290 --> 00:11:51,130
and then we do what what one does with

214
00:11:48,850 --> 00:11:54,790
web applications we did scan for

215
00:11:51,130 --> 00:11:57,579
cross-site scripting and like a leaf on

216
00:11:54,790 --> 00:12:01,630
the overstep did not did not found

217
00:11:57,579 --> 00:12:04,989
anything and then we<font color="#E5E5E5"> did many review and</font>

218
00:12:01,630 --> 00:12:08,649
found that we actually ya missed in some

219
00:12:04,990 --> 00:12:11,709
so the encoding table was was not right

220
00:12:08,649 --> 00:12:14,350
and<font color="#E5E5E5"> we missed something here so we</font>

221
00:12:11,709 --> 00:12:18,040
<font color="#E5E5E5">actually just for convenience purpose</font>

222
00:12:14,350 --> 00:12:21,640
added some options so the the encoding

223
00:12:18,040 --> 00:12:24,910
table you could also it could also write

224
00:12:21,640 --> 00:12:27,279
in there that that the matching you are

225
00:12:24,910 --> 00:12:29,620
defining their that it's meant to be

226
00:12:27,279 --> 00:12:32,140
<font color="#E5E5E5">ants in</font><font color="#CCCCCC"> a case insensitive or ignoring</font>

227
00:12:29,620 --> 00:12:34,720
white spaces or so so<font color="#E5E5E5"> the point is here</font>

228
00:12:32,140 --> 00:12:39,880
we are not implementing yet another

229
00:12:34,720 --> 00:12:43,690
perfect perfect ght HTML and web and

230
00:12:39,880 --> 00:12:45,760
JavaScript parser it's just to show yeah

231
00:12:43,690 --> 00:12:47,620
this is<font color="#E5E5E5"> complicated stuff we don't get</font>

232
00:12:45,760 --> 00:12:53,020
it right<font color="#E5E5E5"> in the first place and we have</font>

233
00:12:47,620 --> 00:12:58,899
to<font color="#E5E5E5"> look at this later on exactly so to</font>

234
00:12:53,020 --> 00:13:03,370
conclude this we took a look at at

235
00:12:58,899 --> 00:13:06,010
injection attacks and the<font color="#E5E5E5"> and and yeah</font>

236
00:13:03,370 --> 00:13:08,880
and saw that these injection attacks

237
00:13:06,010 --> 00:13:11,560
have the root cause in the uncoating

238
00:13:08,880 --> 00:13:17,310
unpacking process where there's no

239
00:13:11,560 --> 00:13:20,300
encoding taking place and the the

240
00:13:17,310 --> 00:13:23,489
we solve this by by putting the

241
00:13:20,300 --> 00:13:27,029
definition of encoding into the actually

242
00:13:23,490 --> 00:13:32,880
<font color="#CCCCCC">the language definition so at the</font><font color="#E5E5E5"> attic</font>

243
00:13:27,029 --> 00:13:35,220
grammar token level and then we then we

244
00:13:32,880 --> 00:13:40,439
<font color="#E5E5E5">derive from this from this grammar we</font>

245
00:13:35,220 --> 00:13:44,370
derive Rida vyver generated encoder and

246
00:13:40,440 --> 00:13:48,060
decoder which then can be used to<font color="#E5E5E5"> pass a</font>

247
00:13:44,370 --> 00:13:53,820
nun pass these formats and as I said<font color="#E5E5E5"> not</font>

248
00:13:48,060 --> 00:13:57,270
yet another HTML encoder so what we also

249
00:13:53,820 --> 00:14:00,420
find and what is perhaps a little bit<font color="#E5E5E5"> of</font>

250
00:13:57,270 --> 00:14:03,779
a discussion is their templates like

251
00:14:00,420 --> 00:14:06,900
<font color="#E5E5E5">used it</font><font color="#CCCCCC"> with in heavily</font><font color="#E5E5E5"> used within web</font>

252
00:14:03,779 --> 00:14:09,420
applications are some kind of harmful

253
00:14:06,900 --> 00:14:12,600
because when you're when you put your

254
00:14:09,420 --> 00:14:15,930
input or your hear your input comes in

255
00:14:12,600 --> 00:14:17,940
and you you put these input into a

256
00:14:15,930 --> 00:14:19,349
template and just say okay we do with

257
00:14:17,940 --> 00:14:21,780
some string click on it and concrete

258
00:14:19,350 --> 00:14:25,620
annotation here and then you have no

259
00:14:21,780 --> 00:14:28,110
idea<font color="#E5E5E5"> which context this is in or which</font>

260
00:14:25,620 --> 00:14:32,730
wich encoding should apply at this point

261
00:14:28,110 --> 00:14:36,060
so the yeah you have<font color="#E5E5E5"> no chance to get</font>

262
00:14:32,730 --> 00:14:39,210
this fixed at this point and so the

263
00:14:36,060 --> 00:14:42,420
<font color="#CCCCCC">property we propose to no longer use</font>

264
00:14:39,210 --> 00:14:45,050
these these output links all these

265
00:14:42,420 --> 00:14:48,750
output interfaces which have no<font color="#CCCCCC"> idea of</font>

266
00:14:45,050 --> 00:14:51,719
of the correct encoding but instead yeah

267
00:14:48,750 --> 00:14:55,140
use something else which knows what

268
00:14:51,720 --> 00:14:56,820
which languages is in the output is<font color="#E5E5E5"> for</font>

269
00:14:55,140 --> 00:14:59,839
thanks for attention and I'm ready to

270
00:14:56,820 --> 00:14:59,839
<font color="#E5E5E5">take questions</font>

271
00:15:08,839 --> 00:15:20,880
questions trental and considered harmful

272
00:15:12,710 --> 00:15:23,580
parse it before you print it so you

273
00:15:20,880 --> 00:15:25,560
mentioned this library Monty<font color="#CCCCCC"> coder a lot</font>

274
00:15:23,580 --> 00:15:28,020
<font color="#E5E5E5">I googled it I can't find anything is</font>

275
00:15:25,560 --> 00:15:31,229
there something open source<font color="#E5E5E5"> coming there</font>

276
00:15:28,020 --> 00:15:33,360
is<font color="#E5E5E5"> something coming but the saasy the</font>

277
00:15:31,230 --> 00:15:35,460
mother project multicores currently in

278
00:15:33,360 --> 00:15:43,470
the release process<font color="#E5E5E5"> okay so we need to</font>

279
00:15:35,460 --> 00:15:48,890
start things in there cool more

280
00:15:43,470 --> 00:15:48,890
questions let's thank the speaker

