1
00:00:00,589 --> 00:00:07,048
this is an update of<font color="#CCCCCC"> some work that we</font>

2
00:00:03,629 --> 00:00:09,750
presented<font color="#CCCCCC"> last year</font><font color="#E5E5E5"> at shmoocon and in</font>

3
00:00:07,049 --> 00:00:13,410
particular we have to tell you today

4
00:00:09,750 --> 00:00:14,580
<font color="#CCCCCC">about</font><font color="#E5E5E5"> the results of a big search that</font>

5
00:00:13,410 --> 00:00:16,710
we<font color="#CCCCCC"> did</font><font color="#E5E5E5"> for actually three different</font>

6
00:00:14,580 --> 00:00:18,539
searches<font color="#CCCCCC"> so we'll go through the</font>

7
00:00:16,710 --> 00:00:22,619
<font color="#E5E5E5">introductory stuff fairly</font><font color="#CCCCCC"> quickly and</font>

8
00:00:18,539 --> 00:00:24,269
<font color="#CCCCCC">then get to our results I'm Mike</font>

9
00:00:22,619 --> 00:00:28,800
I started<font color="#E5E5E5"> great Scot gadgets and I make</font>

10
00:00:24,269 --> 00:00:31,470
a lot<font color="#CCCCCC"> of hardware</font><font color="#E5E5E5"> and stuff andand</font><font color="#CCCCCC"> onik</font>

11
00:00:28,800 --> 00:00:32,759
and I work for Mike working<font color="#CCCCCC"> on</font><font color="#E5E5E5"> upper</font>

12
00:00:31,470 --> 00:00:33,839
tooth and<font color="#CCCCCC"> and various other little</font>

13
00:00:32,759 --> 00:00:43,739
projects that are<font color="#CCCCCC"> usually about</font>

14
00:00:33,840 --> 00:00:45,149
communications technologies<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so if</font>

15
00:00:43,739 --> 00:00:50,399
there's any doubt I<font color="#E5E5E5"> don't speak on</font>

16
00:00:45,149 --> 00:00:52,860
behalf of the US government<font color="#E5E5E5"> so</font><font color="#CCCCCC"> anyway so</font>

17
00:00:50,399 --> 00:00:56,820
<font color="#E5E5E5">so we should</font><font color="#CCCCCC"> outline the problem which</font>

18
00:00:52,860 --> 00:01:00,059
<font color="#E5E5E5">is we were sort</font><font color="#CCCCCC"> of inspired</font><font color="#E5E5E5"> by this this</font>

19
00:00:56,820 --> 00:01:03,480
whole<font color="#CCCCCC"> Lang</font><font color="#E5E5E5"> sect movement and also</font>

20
00:01:00,059 --> 00:01:05,099
<font color="#E5E5E5">inspired by trying to defeat work that</font>

21
00:01:03,480 --> 00:01:07,679
Travis had<font color="#E5E5E5"> Travis</font><font color="#CCCCCC"> Goods be there done</font>

22
00:01:05,099 --> 00:01:09,658
and and that's<font color="#E5E5E5"> kind of how we</font><font color="#CCCCCC"> got to</font>

23
00:01:07,680 --> 00:01:14,070
where we are<font color="#CCCCCC"> now and we pitched this as</font>

24
00:01:09,659 --> 00:01:18,259
a DARPA<font color="#E5E5E5"> cyber fast track program</font><font color="#CCCCCC"> a piece</font>

25
00:01:14,070 --> 00:01:20,820
<font color="#CCCCCC">of research year two years</font><font color="#E5E5E5"> ago now and</font>

26
00:01:18,259 --> 00:01:25,229
essentially what we<font color="#CCCCCC"> want to do is stop</font>

27
00:01:20,820 --> 00:01:26,429
packets and packets<font color="#E5E5E5"> from working now</font><font color="#CCCCCC"> I'm</font>

28
00:01:25,229 --> 00:01:27,539
gonna<font color="#E5E5E5"> assume</font><font color="#CCCCCC"> that most people in here</font>

29
00:01:26,430 --> 00:01:32,479
have heard of<font color="#E5E5E5"> the packets</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> packets</font>

30
00:01:27,540 --> 00:01:35,070
<font color="#CCCCCC">attack so very briefly you put an entire</font>

31
00:01:32,479 --> 00:01:37,140
frame inside<font color="#E5E5E5"> the payload which you</font>

32
00:01:35,070 --> 00:01:39,720
control<font color="#E5E5E5"> from sort of user space on on</font>

33
00:01:37,140 --> 00:01:41,850
your system you<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> have access to a</font>

34
00:01:39,720 --> 00:01:44,009
radio<font color="#E5E5E5"> you don't have</font><font color="#CCCCCC"> access to</font><font color="#E5E5E5"> STR to do</font>

35
00:01:41,850 --> 00:01:46,220
like horrible radio things you control

36
00:01:44,009 --> 00:01:49,259
the high layer so you put an entire

37
00:01:46,220 --> 00:01:51,270
valid frame inside<font color="#E5E5E5"> the payload and then</font>

38
00:01:49,259 --> 00:01:53,700
you keep transmitting it until you get

39
00:01:51,270 --> 00:01:55,829
some noise at the receiver and the

40
00:01:53,700 --> 00:01:58,770
incorrect packet gets gets<font color="#CCCCCC"> received and</font>

41
00:01:55,829 --> 00:01:59,850
you can see this here<font color="#CCCCCC"> in</font><font color="#E5E5E5"> these these</font>

42
00:01:58,770 --> 00:02:02,339
packets<font color="#E5E5E5"> down here that have been</font>

43
00:01:59,850 --> 00:02:07,000
<font color="#E5E5E5">received betters taken from Travis's</font>

44
00:02:02,340 --> 00:02:10,449
<font color="#E5E5E5">talk and he did this with</font><font color="#CCCCCC"> ZigBee</font>

45
00:02:07,000 --> 00:02:12,010
but<font color="#E5E5E5"> instantly</font><font color="#CCCCCC"> Danielle and Andrea</font><font color="#E5E5E5"> from</font>

46
00:02:10,449 --> 00:02:14,170
<font color="#E5E5E5">inverse</font><font color="#CCCCCC"> path</font><font color="#E5E5E5"> managed to make this work</font>

47
00:02:12,010 --> 00:02:16,350
<font color="#E5E5E5">with wired Ethernet</font><font color="#CCCCCC"> which was a</font>

48
00:02:14,170 --> 00:02:19,239
fantastic<font color="#E5E5E5"> black hat talk two years ago</font>

49
00:02:16,350 --> 00:02:20,650
<font color="#E5E5E5">and there's a paper on being buzzed path</font>

50
00:02:19,240 --> 00:02:23,680
website about it and it's well<font color="#CCCCCC"> worth</font><font color="#E5E5E5"> the</font>

51
00:02:20,650 --> 00:02:25,390
<font color="#E5E5E5">read</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> they were able</font><font color="#CCCCCC"> to do it</font><font color="#E5E5E5"> but and</font>

52
00:02:23,680 --> 00:02:26,709
the noise they had was someone plugging

53
00:02:25,390 --> 00:02:29,140
<font color="#E5E5E5">something into the switch which just</font>

54
00:02:26,709 --> 00:02:32,380
created enough noise to<font color="#E5E5E5"> have frames</font>

55
00:02:29,140 --> 00:02:34,000
<font color="#E5E5E5">mistaken and theirs was a lot</font><font color="#CCCCCC"> more</font>

56
00:02:32,380 --> 00:02:36,670
complicated<font color="#E5E5E5"> because of various</font>

57
00:02:34,000 --> 00:02:37,959
mechanisms in<font color="#E5E5E5"> Ethernet that are actually</font>

58
00:02:36,670 --> 00:02:42,130
<font color="#E5E5E5">designed to stop this sort</font><font color="#CCCCCC"> of thing but</font>

59
00:02:37,959 --> 00:02:44,980
<font color="#E5E5E5">clearly don't</font><font color="#CCCCCC"> and I guess in</font><font color="#E5E5E5"> many ways</font>

60
00:02:42,130 --> 00:02:47,019
<font color="#CCCCCC">this also relates to</font><font color="#E5E5E5"> buffer overflows</font>

61
00:02:44,980 --> 00:02:50,410
and anywhere where you're trying<font color="#E5E5E5"> to</font>

62
00:02:47,020 --> 00:02:52,330
separate different<font color="#E5E5E5"> levels of privileged</font>

63
00:02:50,410 --> 00:02:53,920
data so you're saying we<font color="#CCCCCC"> have data</font>

64
00:02:52,330 --> 00:02:56,160
that's<font color="#E5E5E5"> untrusted from the user and we</font>

65
00:02:53,920 --> 00:02:59,410
have data which the system is putting in

66
00:02:56,160 --> 00:03:01,120
and<font color="#E5E5E5"> things like that</font><font color="#CCCCCC"> and we</font><font color="#E5E5E5"> want to</font>

67
00:02:59,410 --> 00:03:02,410
separate them out in<font color="#CCCCCC"> some way</font><font color="#E5E5E5"> so that</font>

68
00:03:01,120 --> 00:03:04,780
<font color="#CCCCCC">they're</font><font color="#E5E5E5"> not mistaken for each other and</font>

69
00:03:02,410 --> 00:03:06,400
I'm<font color="#E5E5E5"> aware this</font><font color="#CCCCCC"> is vaguely solved by the</font>

70
00:03:04,780 --> 00:03:09,520
you<font color="#E5E5E5"> know</font><font color="#CCCCCC"> no executes</font><font color="#E5E5E5"> better or anything</font>

71
00:03:06,400 --> 00:03:12,130
<font color="#E5E5E5">like that but it's also an</font><font color="#CCCCCC"> application</font>

72
00:03:09,520 --> 00:03:14,080
of our<font color="#E5E5E5"> work so what we'd find is</font>

73
00:03:12,130 --> 00:03:19,170
ambiguous encapsulation which is where

74
00:03:14,080 --> 00:03:21,010
you have data and you cannot without

75
00:03:19,170 --> 00:03:22,829
context<font color="#CCCCCC"> without knowing anything about</font>

76
00:03:21,010 --> 00:03:25,750
it<font color="#CCCCCC"> you cannot determine</font><font color="#E5E5E5"> whether it's</font>

77
00:03:22,830 --> 00:03:28,060
used by<font color="#E5E5E5"> data whether it's code whether</font>

78
00:03:25,750 --> 00:03:29,080
<font color="#E5E5E5">it's metadata or something like that and</font>

79
00:03:28,060 --> 00:03:31,269
we're mostly<font color="#E5E5E5"> interested in</font>

80
00:03:29,080 --> 00:03:33,910
communications protocols<font color="#E5E5E5"> so you can't</font>

81
00:03:31,269 --> 00:03:36,549
tell it whether<font color="#E5E5E5"> its payload or</font><font color="#CCCCCC"> header</font>

82
00:03:33,910 --> 00:03:38,350
<font color="#E5E5E5">data in your packets</font><font color="#CCCCCC"> and unambiguous</font>

83
00:03:36,549 --> 00:03:39,220
encapsulation is exactly the opposite

84
00:03:38,350 --> 00:03:42,040
and<font color="#E5E5E5"> that's what we're trying to define</font>

85
00:03:39,220 --> 00:03:44,890
<font color="#CCCCCC">here which is without the need for</font>

86
00:03:42,040 --> 00:03:46,269
context<font color="#CCCCCC"> given a series of bits you</font>

87
00:03:44,890 --> 00:03:48,369
should be able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> find a way to decode</font>

88
00:03:46,269 --> 00:03:50,709
<font color="#E5E5E5">them and know whether or</font><font color="#CCCCCC"> not they are</font>

89
00:03:48,370 --> 00:03:53,790
privileged data or whether they<font color="#CCCCCC"> are user</font>

90
00:03:50,709 --> 00:03:53,790
<font color="#CCCCCC">supplied data that you can't trust</font>

91
00:03:56,110 --> 00:04:00,860
so we think of unambiguous encapsulation

92
00:03:58,909 --> 00:04:02,239
<font color="#E5E5E5">as being a general principle</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> can be</font>

93
00:04:00,860 --> 00:04:02,659
applied<font color="#CCCCCC"> in</font><font color="#E5E5E5"> a whole bunch of</font><font color="#CCCCCC"> different</font>

94
00:04:02,239 --> 00:04:05,599
cases

95
00:04:02,659 --> 00:04:10,790
anytime<font color="#E5E5E5"> you're encapsulating data within</font>

96
00:04:05,599 --> 00:04:14,450
other data<font color="#E5E5E5"> we feel that it's good to</font>

97
00:04:10,790 --> 00:04:18,918
encapsulate<font color="#E5E5E5"> unambiguously where there's</font>

98
00:04:14,450 --> 00:04:22,280
no way to<font color="#E5E5E5"> to or and typically we do that</font>

99
00:04:18,918 --> 00:04:24,139
by some means of encoding<font color="#E5E5E5"> so that say</font>

100
00:04:22,280 --> 00:04:25,880
inner data are encoded in<font color="#E5E5E5"> a</font><font color="#CCCCCC"> completely</font>

101
00:04:24,139 --> 00:04:29,240
different way than<font color="#E5E5E5"> outer data are</font>

102
00:04:25,880 --> 00:04:30,169
encoded therefore you can't mistake one

103
00:04:29,240 --> 00:04:34,220
for the other

104
00:04:30,169 --> 00:04:35,930
but we're particularly interested<font color="#CCCCCC"> in</font><font color="#E5E5E5"> as</font>

105
00:04:34,220 --> 00:04:39,020
<font color="#E5E5E5">Dominic mentioned communication systems</font>

106
00:04:35,930 --> 00:04:41,210
<font color="#E5E5E5">and in communication</font><font color="#CCCCCC"> systems</font><font color="#E5E5E5"> if you keep</font>

107
00:04:39,020 --> 00:04:42,560
digging down and down and<font color="#CCCCCC"> down sooner</font><font color="#E5E5E5"> or</font>

108
00:04:41,210 --> 00:04:45,260
later you<font color="#E5E5E5"> get to the physical layer and</font>

109
00:04:42,560 --> 00:04:47,620
at that boundary between the<font color="#CCCCCC"> physical</font>

110
00:04:45,260 --> 00:04:51,469
layer and<font color="#E5E5E5"> where you start having data</font>

111
00:04:47,620 --> 00:04:54,250
binary data between<font color="#E5E5E5"> there you usually</font>

112
00:04:51,470 --> 00:04:56,960
<font color="#CCCCCC">find some kind of</font><font color="#E5E5E5"> an error control code</font>

113
00:04:54,250 --> 00:04:59,560
<font color="#CCCCCC">either an error detecting code or an</font>

114
00:04:56,960 --> 00:05:04,969
error<font color="#CCCCCC"> correcting code some kind of</font>

115
00:04:59,560 --> 00:05:08,470
<font color="#E5E5E5">encoding</font><font color="#CCCCCC"> that has some redundancy in it</font>

116
00:05:04,970 --> 00:05:13,220
as we learned<font color="#E5E5E5"> early this morning right</font>

117
00:05:08,470 --> 00:05:15,919
<font color="#CCCCCC">and but that's</font><font color="#E5E5E5"> an opportunity actually</font>

118
00:05:13,220 --> 00:05:18,770
to<font color="#E5E5E5"> take advantage of that that layer</font><font color="#CCCCCC"> of</font>

119
00:05:15,919 --> 00:05:21,859
encoding<font color="#CCCCCC"> and we think</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> that's an</font>

120
00:05:18,770 --> 00:05:23,599
opportunity<font color="#E5E5E5"> to introduce a new type of</font>

121
00:05:21,860 --> 00:05:28,639
<font color="#E5E5E5">encoding</font><font color="#CCCCCC"> that encapsulated</font><font color="#E5E5E5"> data</font>

122
00:05:23,599 --> 00:05:31,490
unambiguously<font color="#E5E5E5"> so we're looking at error</font>

123
00:05:28,639 --> 00:05:34,430
control codes<font color="#E5E5E5"> and in particular we're</font>

124
00:05:31,490 --> 00:05:35,660
looking at binary block codes the reason

125
00:05:34,430 --> 00:05:39,260
we're<font color="#CCCCCC"> looking at those</font><font color="#E5E5E5"> is because</font>

126
00:05:35,660 --> 00:05:41,690
they're simple<font color="#CCCCCC"> and we wanted</font><font color="#E5E5E5"> to start</font>

127
00:05:39,260 --> 00:05:44,120
<font color="#E5E5E5">with something simple and we wanted to</font>

128
00:05:41,690 --> 00:05:47,930
find out<font color="#CCCCCC"> if we could determine if we</font>

129
00:05:44,120 --> 00:05:50,120
could investigate<font color="#E5E5E5"> binary block codes and</font>

130
00:05:47,930 --> 00:05:53,030
find binary block codes that we think

131
00:05:50,120 --> 00:05:55,130
are useful<font color="#E5E5E5"> for the unambiguous encoding</font>

132
00:05:53,030 --> 00:05:57,830
or the unambiguous encapsulation of

133
00:05:55,130 --> 00:06:00,169
<font color="#CCCCCC">updater within other data such as</font><font color="#E5E5E5"> the</font>

134
00:05:57,830 --> 00:06:04,560
payload<font color="#E5E5E5"> within the frame</font>

135
00:06:00,169 --> 00:06:09,270
and so we're dealing with with<font color="#E5E5E5"> binary</font>

136
00:06:04,560 --> 00:06:11,760
block codes<font color="#CCCCCC"> that</font><font color="#E5E5E5"> usually we specify</font>

137
00:06:09,270 --> 00:06:14,580
having a certain number<font color="#CCCCCC"> of data bits</font>

138
00:06:11,760 --> 00:06:18,810
<font color="#E5E5E5">that are represented by that code</font><font color="#CCCCCC"> a</font>

139
00:06:14,580 --> 00:06:23,130
certain<font color="#E5E5E5"> number of bits in each code</font><font color="#CCCCCC"> word</font>

140
00:06:18,810 --> 00:06:25,199
<font color="#E5E5E5">and a certain minimum distance or we're</font>

141
00:06:23,130 --> 00:06:27,150
usually<font color="#CCCCCC"> - in this</font><font color="#E5E5E5"> case we're</font><font color="#CCCCCC"> doing the</font>

142
00:06:25,199 --> 00:06:29,760
<font color="#CCCCCC">hamming distance which is</font><font color="#E5E5E5"> the number of</font>

143
00:06:27,150 --> 00:06:32,539
<font color="#E5E5E5">bits that are different between one code</font>

144
00:06:29,760 --> 00:06:37,289
word<font color="#CCCCCC"> and another so just the classic</font>

145
00:06:32,540 --> 00:06:39,240
example the 743<font color="#CCCCCC"> Hamming code it's every</font>

146
00:06:37,290 --> 00:06:41,479
single<font color="#E5E5E5"> code word so you see that there's</font>

147
00:06:39,240 --> 00:06:44,729
<font color="#E5E5E5">sort of a jumble of code words up there</font>

148
00:06:41,479 --> 00:06:47,280
<font color="#CCCCCC">there are 16 of</font><font color="#E5E5E5"> them</font><font color="#CCCCCC"> which</font><font color="#E5E5E5"> means that</font>

149
00:06:44,729 --> 00:06:53,760
each code word can be<font color="#E5E5E5"> thought to</font>

150
00:06:47,280 --> 00:06:57,210
represent<font color="#E5E5E5"> one a data value between 0 and</font>

151
00:06:53,760 --> 00:07:00,630
15 so every single<font color="#CCCCCC"> code word represents</font>

152
00:06:57,210 --> 00:07:04,669
a<font color="#E5E5E5"> 4-bit number but it's encoded using</font><font color="#CCCCCC"> 7</font>

153
00:07:00,630 --> 00:07:06,000
bits<font color="#E5E5E5"> and out of all the possible</font><font color="#CCCCCC"> 7 bit</font>

154
00:07:04,669 --> 00:07:08,609
codes

155
00:07:06,000 --> 00:07:11,010
<font color="#CCCCCC">we're only</font><font color="#E5E5E5"> only select</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> 16 and</font>

156
00:07:08,610 --> 00:07:15,270
there's an analytic method<font color="#CCCCCC"> to</font><font color="#E5E5E5"> to</font>

157
00:07:11,010 --> 00:07:17,130
<font color="#E5E5E5">generate these things and that's</font>

158
00:07:15,270 --> 00:07:20,909
traditionally the way<font color="#E5E5E5"> that codes are</font>

159
00:07:17,130 --> 00:07:23,550
formed<font color="#CCCCCC"> but in but we're actually doing</font>

160
00:07:20,910 --> 00:07:27,599
<font color="#E5E5E5">things a little bit differently</font><font color="#CCCCCC"> in this</font>

161
00:07:23,550 --> 00:07:29,700
<font color="#E5E5E5">case the you get you get since there's a</font>

162
00:07:27,599 --> 00:07:33,030
minimum Hamming distance the<font color="#CCCCCC"> number of</font>

163
00:07:29,700 --> 00:07:37,409
bits that<font color="#CCCCCC"> differ between any two code</font>

164
00:07:33,030 --> 00:07:40,080
words<font color="#E5E5E5"> is at least 3 so that means</font><font color="#CCCCCC"> if one</font>

165
00:07:37,410 --> 00:07:42,150
bit is flipped you will not mistake<font color="#CCCCCC"> it</font>

166
00:07:40,080 --> 00:07:44,820
for<font color="#E5E5E5"> another code word</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> correct</font>

167
00:07:42,150 --> 00:07:46,289
that<font color="#E5E5E5"> error if</font><font color="#CCCCCC"> 2 bits</font><font color="#E5E5E5"> are flipped you can</font>

168
00:07:44,820 --> 00:07:49,349
detect an error<font color="#E5E5E5"> but you're not</font>

169
00:07:46,289 --> 00:07:50,820
absolutely<font color="#E5E5E5"> confident if you're receiving</font>

170
00:07:49,349 --> 00:07:53,760
those bits or reading them you're not

171
00:07:50,820 --> 00:07:55,889
confident which code word it was and if

172
00:07:53,760 --> 00:07:59,340
there are<font color="#E5E5E5"> three or more bits flipped you</font>

173
00:07:55,889 --> 00:08:01,950
could actually<font color="#E5E5E5"> just completely receive</font>

174
00:07:59,340 --> 00:08:05,429
the wrong code word<font color="#E5E5E5"> and not know it</font>

175
00:08:01,950 --> 00:08:07,020
so the group and that's entirely a

176
00:08:05,430 --> 00:08:08,370
function<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> Hamming</font><font color="#CCCCCC"> distance so the</font>

177
00:08:07,020 --> 00:08:11,640
greater the Hamming distance the more

178
00:08:08,370 --> 00:08:13,030
<font color="#CCCCCC">immunity to errors there is and what</font>

179
00:08:11,640 --> 00:08:15,250
we're<font color="#CCCCCC"> doing</font>

180
00:08:13,030 --> 00:08:17,679
<font color="#E5E5E5">is showing one of the when we're doing</font>

181
00:08:15,250 --> 00:08:20,320
dealing with these<font color="#E5E5E5"> codes we're doing</font>

182
00:08:17,680 --> 00:08:22,870
<font color="#E5E5E5">things</font><font color="#CCCCCC"> in kind</font><font color="#E5E5E5"> of a brute force</font><font color="#CCCCCC"> way</font><font color="#E5E5E5"> by</font>

183
00:08:20,320 --> 00:08:24,520
<font color="#E5E5E5">implementing with a lookup table instead</font>

184
00:08:22,870 --> 00:08:26,410
<font color="#E5E5E5">of implementing with a more</font>

185
00:08:24,520 --> 00:08:29,229
sophisticated algorithm which would be

186
00:08:26,410 --> 00:08:31,750
more<font color="#E5E5E5"> traditional</font><font color="#CCCCCC"> and we</font><font color="#E5E5E5"> kind of think of</font>

187
00:08:29,230 --> 00:08:33,940
that<font color="#E5E5E5"> as a brute force method in the case</font>

188
00:08:31,750 --> 00:08:35,890
of a small<font color="#E5E5E5"> code like this one a lookup</font>

189
00:08:33,940 --> 00:08:41,320
table is a perfectly reasonable<font color="#CCCCCC"> way to</font>

190
00:08:35,890 --> 00:08:43,449
implement a decoder<font color="#CCCCCC"> and we can also take</font>

191
00:08:41,320 --> 00:08:45,430
a brute<font color="#CCCCCC"> force a code</font><font color="#E5E5E5"> brute</font><font color="#CCCCCC"> force</font>

192
00:08:43,450 --> 00:08:49,960
approach to actually<font color="#E5E5E5"> generating the</font>

193
00:08:45,430 --> 00:08:52,120
codes<font color="#E5E5E5"> so this big list here all these</font>

194
00:08:49,960 --> 00:08:55,210
different<font color="#E5E5E5"> numbers well yeah there's an</font>

195
00:08:52,120 --> 00:08:57,670
analytic way to determine that set of

196
00:08:55,210 --> 00:08:59,110
code words<font color="#E5E5E5"> out of all the possible</font><font color="#CCCCCC"> seven</font>

197
00:08:57,670 --> 00:09:02,530
bit numbers we choose these<font color="#CCCCCC"> particular</font>

198
00:08:59,110 --> 00:09:04,690
<font color="#CCCCCC">16 well</font><font color="#E5E5E5"> you could also find those just</font>

199
00:09:02,530 --> 00:09:06,790
by doing a<font color="#CCCCCC"> brute-force search through</font>

200
00:09:04,690 --> 00:09:09,460
all<font color="#CCCCCC"> the</font><font color="#E5E5E5"> possible some bit code words and</font>

201
00:09:06,790 --> 00:09:10,839
<font color="#E5E5E5">find a set that meets the criteria that</font>

202
00:09:09,460 --> 00:09:12,850
you're interested<font color="#E5E5E5"> in and that's a</font>

203
00:09:10,840 --> 00:09:16,180
perfectly<font color="#E5E5E5"> reasonable approach</font><font color="#CCCCCC"> we think</font>

204
00:09:12,850 --> 00:09:18,340
to finding a code<font color="#E5E5E5"> especially</font><font color="#CCCCCC"> if you're</font>

205
00:09:16,180 --> 00:09:21,810
going to<font color="#E5E5E5"> implement</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> implement the</font>

206
00:09:18,340 --> 00:09:25,990
decoder with a lookup table<font color="#E5E5E5"> anyway so</font>

207
00:09:21,810 --> 00:09:28,000
jump back and show<font color="#E5E5E5"> you our simplest</font>

208
00:09:25,990 --> 00:09:30,490
example for a code that we think is

209
00:09:28,000 --> 00:09:33,580
useful<font color="#E5E5E5"> for unambiguous encapsulation</font><font color="#CCCCCC"> and</font>

210
00:09:30,490 --> 00:09:37,870
why we<font color="#E5E5E5"> think it's useful</font><font color="#CCCCCC"> here's a code</font>

211
00:09:33,580 --> 00:09:41,050
<font color="#E5E5E5">made up of five bit code words there are</font>

212
00:09:37,870 --> 00:09:45,400
eight<font color="#CCCCCC"> of them so each one can represent</font>

213
00:09:41,050 --> 00:09:47,589
a<font color="#E5E5E5"> three bit number and the minimum</font>

214
00:09:45,400 --> 00:09:50,890
Hamming distance<font color="#CCCCCC"> between any two of</font>

215
00:09:47,590 --> 00:09:55,960
<font color="#E5E5E5">those codes is</font><font color="#CCCCCC"> two any two of those code</font>

216
00:09:50,890 --> 00:09:58,990
words<font color="#CCCCCC"> is</font><font color="#E5E5E5"> two</font><font color="#CCCCCC"> now if you were</font><font color="#E5E5E5"> to take</font>

217
00:09:55,960 --> 00:10:01,270
those<font color="#CCCCCC"> eight different code words and</font>

218
00:09:58,990 --> 00:10:04,120
split them into two<font color="#CCCCCC"> groups</font><font color="#E5E5E5"> or two sub</font>

219
00:10:01,270 --> 00:10:06,520
codes now you can see that the<font color="#E5E5E5"> minimum</font>

220
00:10:04,120 --> 00:10:08,470
<font color="#E5E5E5">Hamming distance within each sub code is</font>

221
00:10:06,520 --> 00:10:12,520
<font color="#CCCCCC">two but the minimum</font><font color="#E5E5E5"> Hamming distance</font>

222
00:10:08,470 --> 00:10:15,910
<font color="#CCCCCC">between one code</font><font color="#E5E5E5"> one sub code and the</font>

223
00:10:12,520 --> 00:10:19,210
other sub code is three and we call this

224
00:10:15,910 --> 00:10:21,760
we call these<font color="#E5E5E5"> complementary codes and we</font>

225
00:10:19,210 --> 00:10:24,310
call this property<font color="#E5E5E5"> of having a minimum</font>

226
00:10:21,760 --> 00:10:26,390
<font color="#E5E5E5">distance from one sub code to the other</font>

227
00:10:24,310 --> 00:10:31,810
sub code we call that property<font color="#E5E5E5"> I</font>

228
00:10:26,390 --> 00:10:35,230
halation<font color="#CCCCCC"> and the idea</font><font color="#E5E5E5"> is that the</font>

229
00:10:31,810 --> 00:10:40,160
there's a certain level of immunity<font color="#CCCCCC"> to</font>

230
00:10:35,230 --> 00:10:42,650
<font color="#CCCCCC">two errors</font><font color="#E5E5E5"> where you could if you have</font>

231
00:10:40,160 --> 00:10:45,439
enough<font color="#CCCCCC"> error in comparison to your</font>

232
00:10:42,650 --> 00:10:49,040
<font color="#CCCCCC">hamming distance</font><font color="#E5E5E5"> then you might miss you</font>

233
00:10:45,440 --> 00:10:50,860
might incorrectly<font color="#E5E5E5"> decode something but</font>

234
00:10:49,040 --> 00:10:53,510
still<font color="#E5E5E5"> think it's in the right sub code</font>

235
00:10:50,860 --> 00:10:55,340
<font color="#E5E5E5">it takes a higher threshold a higher</font>

236
00:10:53,510 --> 00:10:59,480
number<font color="#CCCCCC"> of errors to actually break that</font>

237
00:10:55,340 --> 00:11:01,220
isolation boundary and<font color="#E5E5E5"> mistake a mistake</font>

238
00:10:59,480 --> 00:11:03,140
<font color="#CCCCCC">of</font><font color="#E5E5E5"> code word as being something that</font>

239
00:11:01,220 --> 00:11:05,960
belongs to the other sub code and we

240
00:11:03,140 --> 00:11:08,660
think<font color="#E5E5E5"> that this is a property</font><font color="#CCCCCC"> that might</font>

241
00:11:05,960 --> 00:11:11,540
be useful<font color="#E5E5E5"> for unambiguously</font>

242
00:11:08,660 --> 00:11:15,170
encapsulating data where maybe you'd use

243
00:11:11,540 --> 00:11:16,550
one set of code words<font color="#CCCCCC"> for the header and</font>

244
00:11:15,170 --> 00:11:17,540
the other set for the payload for

245
00:11:16,550 --> 00:11:22,490
example in a wireless<font color="#E5E5E5"> communication</font>

246
00:11:17,540 --> 00:11:25,280
<font color="#E5E5E5">protocol</font><font color="#CCCCCC"> and so we called this</font>

247
00:11:22,490 --> 00:11:28,430
<font color="#CCCCCC">particular type of code an isolated</font>

248
00:11:25,280 --> 00:11:30,260
<font color="#E5E5E5">complimentary binary block code</font><font color="#CCCCCC"> and in</font>

249
00:11:28,430 --> 00:11:33,319
this case if you<font color="#CCCCCC"> look down at the</font><font color="#E5E5E5"> bottom</font>

250
00:11:30,260 --> 00:11:36,290
here<font color="#E5E5E5"> one bit flipped gives you a</font>

251
00:11:33,320 --> 00:11:38,420
detectable<font color="#E5E5E5"> error</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> bits flipped gives</font>

252
00:11:36,290 --> 00:11:40,969
you an undetectable<font color="#E5E5E5"> error but it is</font>

253
00:11:38,420 --> 00:11:44,030
isolated<font color="#CCCCCC"> and you have to have at least</font>

254
00:11:40,970 --> 00:11:46,430
<font color="#E5E5E5">three bits flipped</font><font color="#CCCCCC"> in order</font><font color="#E5E5E5"> to have</font>

255
00:11:44,030 --> 00:11:55,160
something incorrectly decode as the

256
00:11:46,430 --> 00:11:56,449
other sub code<font color="#CCCCCC"> so we we wrote</font><font color="#E5E5E5"> C I'd</font>

257
00:11:55,160 --> 00:11:58,880
still see<font color="#E5E5E5"> applicate when we wrote a</font>

258
00:11:56,450 --> 00:12:01,010
<font color="#E5E5E5">Python version first proof of concept it</font>

259
00:11:58,880 --> 00:12:03,710
was hideously slow so<font color="#E5E5E5"> I wrote the C</font>

260
00:12:01,010 --> 00:12:05,270
version<font color="#E5E5E5"> and and just</font><font color="#CCCCCC"> to brute-force the</font>

261
00:12:03,710 --> 00:12:08,150
key<font color="#E5E5E5"> space and what it would do is you</font>

262
00:12:05,270 --> 00:12:09,829
give it a set<font color="#E5E5E5"> of input</font><font color="#CCCCCC"> parameters</font><font color="#E5E5E5"> and it</font>

263
00:12:08,150 --> 00:12:12,740
would go<font color="#CCCCCC"> out and</font><font color="#E5E5E5"> try and find the</font>

264
00:12:09,830 --> 00:12:14,330
<font color="#E5E5E5">biggest the biggest code it could so</font>

265
00:12:12,740 --> 00:12:17,000
them with the<font color="#E5E5E5"> the highest number of code</font>

266
00:12:14,330 --> 00:12:18,800
words<font color="#CCCCCC"> that fits your parameters</font><font color="#E5E5E5"> and the</font>

267
00:12:17,000 --> 00:12:22,610
promise<font color="#E5E5E5"> you give it would be length of</font>

268
00:12:18,800 --> 00:12:24,380
each code<font color="#CCCCCC"> word</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> Hamming distance the</font>

269
00:12:22,610 --> 00:12:26,330
minimum Hamming distance<font color="#E5E5E5"> within those</font>

270
00:12:24,380 --> 00:12:28,040
groups<font color="#E5E5E5"> and the minimum isolation between</font>

271
00:12:26,330 --> 00:12:30,410
<font color="#CCCCCC">the two and it</font><font color="#E5E5E5"> will go and try</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> find</font>

272
00:12:28,040 --> 00:12:33,319
larger and larger<font color="#E5E5E5"> groups</font>

273
00:12:30,410 --> 00:12:35,089
and<font color="#CCCCCC"> it's use a depth-first search</font>

274
00:12:33,319 --> 00:12:38,389
<font color="#E5E5E5">recursive algorithm of</font><font color="#CCCCCC"> the entire keys</font>

275
00:12:35,089 --> 00:12:40,009
<font color="#CCCCCC">basis</font><font color="#E5E5E5"> just a big brute force</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> we</font>

276
00:12:38,389 --> 00:12:42,620
looked at<font color="#E5E5E5"> other methods initially we</font>

277
00:12:40,009 --> 00:12:45,649
<font color="#E5E5E5">were planning</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> write some Bariloche</font>

278
00:12:42,620 --> 00:12:48,230
<font color="#E5E5E5">for the and run the the the</font><font color="#CCCCCC"> major search</font>

279
00:12:45,649 --> 00:12:51,889
on<font color="#E5E5E5"> FPGAs and buy some fairly expensive</font>

280
00:12:48,230 --> 00:12:53,269
<font color="#E5E5E5">FPGA hardware</font><font color="#CCCCCC"> and we do have</font>

281
00:12:51,889 --> 00:12:56,509
implementations of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> various</font>

282
00:12:53,269 --> 00:12:57,980
algorithms for<font color="#CCCCCC"> this but it's we weren't</font>

283
00:12:56,509 --> 00:13:00,319
<font color="#E5E5E5">really sure that</font><font color="#CCCCCC"> they were mature enough</font>

284
00:12:57,980 --> 00:13:03,800
<font color="#E5E5E5">at the time and we knew our C code</font>

285
00:13:00,319 --> 00:13:06,649
worked<font color="#E5E5E5"> and we decided to go with cloud</font>

286
00:13:03,800 --> 00:13:09,439
computing resources<font color="#CCCCCC"> so we we went</font><font color="#E5E5E5"> with</font>

287
00:13:06,649 --> 00:13:11,689
ec2 instead and we used a<font color="#E5E5E5"> lot of a lot</font>

288
00:13:09,439 --> 00:13:15,500
<font color="#CCCCCC">of computing</font><font color="#E5E5E5"> power over the course of</font>

289
00:13:11,689 --> 00:13:17,540
about five days on ec2<font color="#CCCCCC"> I'll come back to</font>

290
00:13:15,500 --> 00:13:20,089
that<font color="#E5E5E5"> a second</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> the other thing is</font>

291
00:13:17,540 --> 00:13:25,550
<font color="#CCCCCC">after we gave a talk</font><font color="#E5E5E5"> bukhan in 2014</font>

292
00:13:20,089 --> 00:13:28,639
someone used the<font color="#E5E5E5"> z3 Python bindings</font>

293
00:13:25,550 --> 00:13:31,819
which is sort of constraint satisfaction

294
00:13:28,639 --> 00:13:34,759
solver right<font color="#CCCCCC"> yeah and they they were</font>

295
00:13:31,819 --> 00:13:38,599
able<font color="#CCCCCC"> to produce actually quite a fast</font>

296
00:13:34,759 --> 00:13:40,970
method to prove that code exists<font color="#CCCCCC"> but</font><font color="#E5E5E5"> we</font>

297
00:13:38,600 --> 00:13:43,310
were we stuck with<font color="#CCCCCC"> our method because we</font>

298
00:13:40,970 --> 00:13:44,540
wanted<font color="#E5E5E5"> to find all the codes</font><font color="#CCCCCC"> so we we</font>

299
00:13:43,310 --> 00:13:46,579
want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> know that we've</font><font color="#CCCCCC"> done an</font>

300
00:13:44,540 --> 00:13:49,370
exhaustive<font color="#E5E5E5"> search and pas the reason is</font>

301
00:13:46,579 --> 00:13:51,199
that<font color="#E5E5E5"> we would we want to find like</font><font color="#CCCCCC"> the</font>

302
00:13:49,370 --> 00:13:54,399
biggest code and we keep<font color="#E5E5E5"> looking for</font>

303
00:13:51,199 --> 00:13:54,399
sort of<font color="#E5E5E5"> larger</font><font color="#CCCCCC"> and larger codes as we go</font>

304
00:13:54,519 --> 00:14:04,100
<font color="#E5E5E5">so as I say we we ran this on ec2 and</font>

305
00:14:01,060 --> 00:14:06,170
<font color="#E5E5E5">unlike all laptops for various test runs</font>

306
00:14:04,100 --> 00:14:10,160
<font color="#E5E5E5">and things and there were some codes</font>

307
00:14:06,170 --> 00:14:12,560
such<font color="#CCCCCC"> as this</font><font color="#E5E5E5"> 15 7 9 15 bit code</font><font color="#CCCCCC"> seven</font>

308
00:14:10,160 --> 00:14:14,449
bit<font color="#E5E5E5"> having just seven having the at</font>

309
00:14:12,560 --> 00:14:19,189
Hamming distance<font color="#E5E5E5"> within the groups and a</font>

310
00:14:14,449 --> 00:14:21,740
9 bit isolation<font color="#CCCCCC"> between the two and it</font>

311
00:14:19,189 --> 00:14:23,329
produced 111 gigabytes<font color="#E5E5E5"> of output filled</font>

312
00:14:21,740 --> 00:14:25,670
<font color="#E5E5E5">up my hard drive and then everything</font>

313
00:14:23,329 --> 00:14:27,410
just<font color="#E5E5E5"> fell over so like there were</font>

314
00:14:25,670 --> 00:14:30,920
certain ones we<font color="#E5E5E5"> started doing this with</font>

315
00:14:27,410 --> 00:14:32,600
like<font color="#E5E5E5"> be various large large sets in</font>

316
00:14:30,920 --> 00:14:34,360
<font color="#E5E5E5">order to try</font><font color="#CCCCCC"> and work out what we could</font>

317
00:14:32,600 --> 00:14:37,279
reasonably<font color="#CCCCCC"> expect to</font><font color="#E5E5E5"> be worthwhile and</font>

318
00:14:34,360 --> 00:14:39,019
<font color="#CCCCCC">the there's</font><font color="#E5E5E5"> a I think there's probably</font><font color="#CCCCCC"> a</font>

319
00:14:37,279 --> 00:14:41,600
hint there that if<font color="#E5E5E5"> you get a hundred and</font>

320
00:14:39,019 --> 00:14:43,460
<font color="#CCCCCC">eleven gigs of output from this Algar</font>

321
00:14:41,600 --> 00:14:46,450
that there<font color="#E5E5E5"> are a lot of codes that</font>

322
00:14:43,460 --> 00:14:48,980
<font color="#E5E5E5">exists there and so you can probably</font>

323
00:14:46,450 --> 00:14:50,480
alter<font color="#E5E5E5"> your parameters to get actually</font>

324
00:14:48,980 --> 00:14:54,380
like more efficiency out of<font color="#E5E5E5"> it</font>

325
00:14:50,480 --> 00:14:55,730
<font color="#CCCCCC">ie you're probably wasting a lot</font><font color="#E5E5E5"> of bits</font>

326
00:14:54,380 --> 00:14:57,920
if there are a lot of<font color="#E5E5E5"> opportunities</font><font color="#CCCCCC"> for</font>

327
00:14:55,730 --> 00:15:00,980
these codes to exist<font color="#CCCCCC"> I may not</font><font color="#E5E5E5"> have said</font>

328
00:14:57,920 --> 00:15:03,290
<font color="#CCCCCC">that</font><font color="#E5E5E5"> very well but anyway so that's</font>

329
00:15:00,980 --> 00:15:05,750
<font color="#E5E5E5">that's also why we decided to only run</font>

330
00:15:03,290 --> 00:15:09,920
for<font color="#E5E5E5"> up to eight bit codes for the for</font>

331
00:15:05,750 --> 00:15:13,820
the main search and then yeah<font color="#CCCCCC"> one to</font><font color="#E5E5E5"> end</font>

332
00:15:09,920 --> 00:15:14,990
for<font color="#E5E5E5"> the</font><font color="#CCCCCC"> hamming distance</font><font color="#E5E5E5"> and the</font><font color="#CCCCCC"> hamming</font>

333
00:15:13,820 --> 00:15:19,400
distance<font color="#E5E5E5"> the isolation always have to be</font>

334
00:15:14,990 --> 00:15:22,790
greater<font color="#E5E5E5"> than the</font><font color="#CCCCCC"> hamming distance</font><font color="#E5E5E5"> so</font>

335
00:15:19,400 --> 00:15:24,260
yeah we found<font color="#E5E5E5"> like 19 million codes and</font>

336
00:15:22,790 --> 00:15:25,939
we have them all<font color="#CCCCCC"> on a hard drive</font>

337
00:15:24,260 --> 00:15:28,069
somewhere<font color="#CCCCCC"> and they they</font><font color="#E5E5E5"> would be</font>

338
00:15:25,940 --> 00:15:30,650
<font color="#E5E5E5">publicly available if we had the</font>

339
00:15:28,070 --> 00:15:31,790
bandwidth<font color="#CCCCCC"> but but the I</font><font color="#E5E5E5"> mean the</font>

340
00:15:30,650 --> 00:15:33,280
algorithms out<font color="#E5E5E5"> there</font><font color="#CCCCCC"> and if you're if</font>

341
00:15:31,790 --> 00:15:34,969
<font color="#CCCCCC">you're interested in</font><font color="#E5E5E5"> developing</font><font color="#CCCCCC"> a</font>

342
00:15:33,280 --> 00:15:36,319
communication<font color="#CCCCCC"> method you could</font><font color="#E5E5E5"> go and</font>

343
00:15:34,970 --> 00:15:39,170
you wanted to<font color="#E5E5E5"> use</font><font color="#CCCCCC"> on ambiguous</font>

344
00:15:36,320 --> 00:15:41,990
<font color="#E5E5E5">encapsulation you could go and take a</font>

345
00:15:39,170 --> 00:15:44,750
look on the<font color="#CCCCCC"> code</font><font color="#E5E5E5"> and generate yourselfer</font>

346
00:15:41,990 --> 00:15:47,570
code and and two things that we're

347
00:15:44,750 --> 00:15:50,780
<font color="#CCCCCC">really quite interesting is we had a few</font>

348
00:15:47,570 --> 00:15:54,520
a few codes<font color="#E5E5E5"> few sets of input</font><font color="#CCCCCC"> parameters</font>

349
00:15:50,780 --> 00:15:56,600
that gave a similar<font color="#CCCCCC"> Cubs subcode sizes</font>

350
00:15:54,520 --> 00:16:00,370
<font color="#CCCCCC">so you might want to use them if you've</font>

351
00:15:56,600 --> 00:16:02,690
got say quite a balance between<font color="#E5E5E5"> your</font>

352
00:16:00,370 --> 00:16:05,510
metadata in your payload<font color="#CCCCCC"> or anything</font>

353
00:16:02,690 --> 00:16:08,960
like<font color="#E5E5E5"> that because you're going to be</font>

354
00:16:05,510 --> 00:16:10,910
seeing a<font color="#CCCCCC"> lot of</font><font color="#E5E5E5"> both whereas we had one</font>

355
00:16:08,960 --> 00:16:13,940
example<font color="#E5E5E5"> where there are there's a sub</font>

356
00:16:10,910 --> 00:16:16,370
code of - and the other one's got 44

357
00:16:13,940 --> 00:16:17,990
codes in it and if you've got a system

358
00:16:16,370 --> 00:16:20,780
whereby<font color="#E5E5E5"> you got to have a very</font><font color="#CCCCCC"> small</font>

359
00:16:17,990 --> 00:16:22,160
<font color="#CCCCCC">amount of metadata and</font><font color="#E5E5E5"> you want to</font>

360
00:16:20,780 --> 00:16:23,540
encode far more<font color="#E5E5E5"> bits in your data</font>

361
00:16:22,160 --> 00:16:26,319
<font color="#E5E5E5">something like that would be</font><font color="#CCCCCC"> more</font>

362
00:16:23,540 --> 00:16:28,969
<font color="#E5E5E5">appropriate because you can encode more</font>

363
00:16:26,320 --> 00:16:32,100
more values with the 44 than you could

364
00:16:28,970 --> 00:16:35,940
<font color="#CCCCCC">with say four</font>

365
00:16:32,100 --> 00:16:39,630
<font color="#CCCCCC">to explaining sure</font><font color="#E5E5E5"> yeah so we tried to</font>

366
00:16:35,940 --> 00:16:42,149
<font color="#E5E5E5">identify different</font><font color="#CCCCCC"> types of block codes</font>

367
00:16:39,630 --> 00:16:45,180
that we<font color="#E5E5E5"> thought had properties useful</font>

368
00:16:42,149 --> 00:16:48,329
for unambiguous encapsulation<font color="#E5E5E5"> and and</font>

369
00:16:45,180 --> 00:16:52,739
one<font color="#E5E5E5"> of the ones</font><font color="#CCCCCC"> that we</font><font color="#E5E5E5"> decided to look</font>

370
00:16:48,329 --> 00:16:56,729
at was<font color="#CCCCCC"> non-binary block codes and so</font>

371
00:16:52,740 --> 00:17:00,949
instead<font color="#CCCCCC"> of a</font><font color="#E5E5E5"> code word being a list of</font>

372
00:16:56,730 --> 00:17:05,189
bits<font color="#E5E5E5"> a code word is a list of values</font>

373
00:17:00,949 --> 00:17:07,530
that<font color="#E5E5E5"> are</font><font color="#CCCCCC"> not binary in this case we had</font>

374
00:17:05,189 --> 00:17:09,959
values ranging from 0 to 6

375
00:17:07,530 --> 00:17:11,760
we were envisioning<font color="#E5E5E5"> what</font><font color="#CCCCCC"> if we wanted</font><font color="#E5E5E5"> to</font>

376
00:17:09,959 --> 00:17:15,780
<font color="#E5E5E5">use it on some weird communications</font>

377
00:17:11,760 --> 00:17:17,879
system like<font color="#E5E5E5"> 7 phase</font><font color="#CCCCCC"> 7 level phase shift</font>

378
00:17:15,780 --> 00:17:22,168
keying<font color="#E5E5E5"> which is a system</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> I've</font>

379
00:17:17,880 --> 00:17:24,839
actually<font color="#E5E5E5"> seen in real life</font><font color="#CCCCCC"> it's unusual</font>

380
00:17:22,169 --> 00:17:28,429
to<font color="#CCCCCC"> see</font><font color="#E5E5E5"> systems like this I have a</font>

381
00:17:24,839 --> 00:17:32,280
modulation that<font color="#E5E5E5"> is an odd number</font><font color="#CCCCCC"> or a</font>

382
00:17:28,429 --> 00:17:36,480
number<font color="#E5E5E5"> that is not</font><font color="#CCCCCC"> a power of 2 but</font><font color="#E5E5E5"> they</font>

383
00:17:32,280 --> 00:17:39,030
do happen<font color="#E5E5E5"> and so we thought well we know</font>

384
00:17:36,480 --> 00:17:40,710
we found<font color="#E5E5E5"> these things for binary codes</font>

385
00:17:39,030 --> 00:17:43,590
but maybe let's try<font color="#E5E5E5"> something that's non</font>

386
00:17:40,710 --> 00:17:46,110
<font color="#E5E5E5">binary and 7 was just an example that we</font>

387
00:17:43,590 --> 00:17:50,129
had<font color="#E5E5E5"> so one thing that we did differently</font>

388
00:17:46,110 --> 00:17:53,070
here<font color="#E5E5E5"> was we we chose the</font><font color="#CCCCCC"> Li distance</font><font color="#E5E5E5"> as</font>

389
00:17:50,130 --> 00:17:55,590
our distance metric<font color="#E5E5E5"> where we used</font>

390
00:17:53,070 --> 00:17:58,649
Hamming distance for the binary<font color="#E5E5E5"> codes</font>

391
00:17:55,590 --> 00:18:03,178
and the Li distance is simply the

392
00:17:58,650 --> 00:18:05,490
shortest number<font color="#E5E5E5"> of hops from one one</font>

393
00:18:03,179 --> 00:18:09,360
point around<font color="#E5E5E5"> the circle to the</font><font color="#CCCCCC"> other</font><font color="#E5E5E5"> so</font>

394
00:18:05,490 --> 00:18:12,510
the distance<font color="#E5E5E5"> from</font><font color="#CCCCCC"> two to six naively you</font>

395
00:18:09,360 --> 00:18:14,459
might say that's<font color="#CCCCCC"> 4 6 minus 2 is 4</font><font color="#E5E5E5"> but</font>

396
00:18:12,510 --> 00:18:15,330
<font color="#CCCCCC">the shorter way around the circle it's</font>

397
00:18:14,460 --> 00:18:18,150
three hops

398
00:18:15,330 --> 00:18:21,928
<font color="#E5E5E5">so the</font><font color="#CCCCCC"> Li distance</font><font color="#E5E5E5"> so it's a modular</font>

399
00:18:18,150 --> 00:18:24,240
arithmetic<font color="#CCCCCC"> subtraction</font><font color="#E5E5E5"> that's it and it</font>

400
00:18:21,929 --> 00:18:28,890
takes into account<font color="#E5E5E5"> the cyclical nature</font>

401
00:18:24,240 --> 00:18:31,830
<font color="#CCCCCC">of certain</font><font color="#E5E5E5"> schemes like phase shift</font><font color="#CCCCCC"> King</font>

402
00:18:28,890 --> 00:18:33,659
so we so other than<font color="#CCCCCC"> the</font><font color="#E5E5E5"> fact that we</font>

403
00:18:31,830 --> 00:18:36,059
change the<font color="#E5E5E5"> distance metric it's</font>

404
00:18:33,659 --> 00:18:38,600
basically the exact<font color="#CCCCCC"> same</font><font color="#E5E5E5"> concept</font><font color="#CCCCCC"> and so</font>

405
00:18:36,059 --> 00:18:41,879
we were looking<font color="#E5E5E5"> for again isolated</font>

406
00:18:38,600 --> 00:18:45,090
<font color="#CCCCCC">complementary codes just in this case</font>

407
00:18:41,880 --> 00:18:45,539
with<font color="#CCCCCC"> seven level modulation instead of a</font>

408
00:18:45,090 --> 00:18:49,408
<font color="#CCCCCC">two</font>

409
00:18:45,539 --> 00:18:52,109
modulation and well<font color="#E5E5E5"> just to give you an</font>

410
00:18:49,409 --> 00:18:55,559
example<font color="#E5E5E5"> of one of the codes that we</font>

411
00:18:52,109 --> 00:18:58,710
found<font color="#CCCCCC"> this</font><font color="#E5E5E5"> first one</font><font color="#CCCCCC"> here is</font><font color="#E5E5E5"> made up of</font>

412
00:18:55,559 --> 00:19:01,350
two sub codes<font color="#E5E5E5"> one of them had two code</font>

413
00:18:58,710 --> 00:19:03,389
words and the other<font color="#E5E5E5"> sub code has four</font>

414
00:19:01,350 --> 00:19:05,459
code words so<font color="#E5E5E5"> that's there's an</font>

415
00:19:03,389 --> 00:19:08,820
asymmetric code like Dominic was talking

416
00:19:05,460 --> 00:19:10,679
about<font color="#CCCCCC"> and in</font><font color="#E5E5E5"> this case we had an</font>

417
00:19:08,820 --> 00:19:15,600
isolation<font color="#E5E5E5"> of five which is</font><font color="#CCCCCC"> a whole lot</font>

418
00:19:10,679 --> 00:19:17,549
<font color="#CCCCCC">of</font><font color="#E5E5E5"> isolation for a short code word but</font>

419
00:19:15,600 --> 00:19:20,459
and<font color="#E5E5E5"> then and then we have a symmetric</font>

420
00:19:17,549 --> 00:19:22,259
code example here at the bottom where<font color="#CCCCCC"> we</font>

421
00:19:20,460 --> 00:19:25,139
had code words that<font color="#E5E5E5"> were three symbols</font>

422
00:19:22,259 --> 00:19:29,809
long and had a minimum<font color="#CCCCCC"> Li distance of</font>

423
00:19:25,139 --> 00:19:29,809
five and a minimum isolation<font color="#E5E5E5"> of seven</font>

424
00:19:31,549 --> 00:19:35,460
and<font color="#E5E5E5"> again we</font><font color="#CCCCCC"> produced quite</font><font color="#E5E5E5"> a lot of</font>

425
00:19:34,109 --> 00:19:37,470
output um

426
00:19:35,460 --> 00:19:40,349
we tested eleven eleven thousand

427
00:19:37,470 --> 00:19:42,289
<font color="#CCCCCC">different sets of parameters and again</font>

428
00:19:40,349 --> 00:19:47,418
we<font color="#E5E5E5"> just scripted it all and throw</font><font color="#CCCCCC"> onto</font>

429
00:19:42,289 --> 00:19:50,549
<font color="#E5E5E5">ec2</font><font color="#CCCCCC"> and generally we went up to two nine</font>

430
00:19:47,419 --> 00:19:51,570
why we pick nine rather than eight I

431
00:19:50,549 --> 00:19:56,639
suppose doesn't really matter it<font color="#E5E5E5"> wasn't</font>

432
00:19:51,570 --> 00:19:59,489
boring<font color="#CCCCCC"> so so we pick</font><font color="#E5E5E5"> nine</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> 20</font>

433
00:19:56,639 --> 00:20:01,529
20 gigs of<font color="#CCCCCC"> locals successful output</font>

434
00:19:59,489 --> 00:20:04,019
because again there were various runs

435
00:20:01,529 --> 00:20:07,080
that filled<font color="#E5E5E5"> up</font><font color="#CCCCCC"> our disks and things like</font>

436
00:20:04,019 --> 00:20:08,460
<font color="#E5E5E5">that</font><font color="#CCCCCC"> poor</font><font color="#E5E5E5"> planning on my part</font><font color="#CCCCCC"> but again</font>

437
00:20:07,080 --> 00:20:10,259
<font color="#E5E5E5">I don't</font><font color="#CCCCCC"> think those results would be</font>

438
00:20:08,460 --> 00:20:12,509
that<font color="#E5E5E5"> relevant because it implies</font><font color="#CCCCCC"> that</font>

439
00:20:10,259 --> 00:20:14,159
you're<font color="#E5E5E5"> actually wasting a lot of</font>

440
00:20:12,509 --> 00:20:16,460
<font color="#E5E5E5">capacity in your in your communication</font>

441
00:20:14,159 --> 00:20:18,359
channel by<font color="#E5E5E5"> the fact there</font><font color="#CCCCCC"> are so many</font>

442
00:20:16,460 --> 00:20:21,149
I'm pretty sure I'm pretty<font color="#CCCCCC"> sure that's</font>

443
00:20:18,359 --> 00:20:23,820
<font color="#CCCCCC">true but I</font><font color="#E5E5E5"> have to go and get</font><font color="#CCCCCC"> a piece of</font>

444
00:20:21,149 --> 00:20:25,408
paper<font color="#CCCCCC"> and work</font><font color="#E5E5E5"> it out and yes some</font>

445
00:20:23,820 --> 00:20:27,720
processor is constrained<font color="#CCCCCC"> by resources I</font>

446
00:20:25,409 --> 00:20:31,200
had a lot of conversations<font color="#E5E5E5"> with an</font>

447
00:20:27,720 --> 00:20:33,479
engineer in on<font color="#E5E5E5"> behalf of Amazon over</font>

448
00:20:31,200 --> 00:20:36,029
over the course of<font color="#E5E5E5"> a week trying</font><font color="#CCCCCC"> to</font>

449
00:20:33,479 --> 00:20:37,590
<font color="#E5E5E5">convince them that I wasn't my ec2</font>

450
00:20:36,029 --> 00:20:40,499
account went from having<font color="#E5E5E5"> you know one</font>

451
00:20:37,590 --> 00:20:42,330
standard standards micro<font color="#E5E5E5"> instance which</font>

452
00:20:40,499 --> 00:20:44,700
I just played around<font color="#E5E5E5"> with once</font><font color="#CCCCCC"> to</font>

453
00:20:42,330 --> 00:20:48,210
spinning<font color="#CCCCCC"> up something like</font><font color="#E5E5E5"> 650 cores in</font>

454
00:20:44,700 --> 00:20:51,479
a window<font color="#CCCCCC"> of 24 hours and this</font><font color="#E5E5E5"> is</font>

455
00:20:48,210 --> 00:20:54,179
apparently unusual<font color="#E5E5E5"> behavior to them so</font>

456
00:20:51,479 --> 00:20:56,299
yeah we got<font color="#E5E5E5"> about 19 million results for</font>

457
00:20:54,179 --> 00:20:56,299
this

458
00:20:56,390 --> 00:21:00,760
<font color="#E5E5E5">not about</font><font color="#CCCCCC"> similar number of results</font>

459
00:21:01,960 --> 00:21:07,100
<font color="#E5E5E5">interesting</font><font color="#CCCCCC"> I may not have updated this</font>

460
00:21:04,460 --> 00:21:08,660
slide<font color="#CCCCCC"> correctly because</font><font color="#E5E5E5"> the value of n</font>

461
00:21:07,100 --> 00:21:11,870
has<font color="#E5E5E5"> changed and</font><font color="#CCCCCC"> that's the same</font><font color="#E5E5E5"> number</font>

462
00:21:08,660 --> 00:21:14,059
as<font color="#E5E5E5"> the previous ones</font><font color="#CCCCCC"> I did get a large</font>

463
00:21:11,870 --> 00:21:15,709
<font color="#E5E5E5">number and it</font><font color="#CCCCCC"> is very similar</font><font color="#E5E5E5"> which is</font>

464
00:21:14,059 --> 00:21:19,070
<font color="#CCCCCC">why I missed</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> I think on this</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> the</font>

465
00:21:15,710 --> 00:21:22,880
bottom of this is<font color="#E5E5E5"> correct</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> it we got</font>

466
00:21:19,070 --> 00:21:25,159
some really big asymmetric codes<font color="#E5E5E5"> so we</font>

467
00:21:22,880 --> 00:21:28,789
have a we have<font color="#E5E5E5"> one with a sub code of</font>

468
00:21:25,160 --> 00:21:33,789
<font color="#E5E5E5">two and a sub code of ten thousand two</font>

469
00:21:28,789 --> 00:21:36,679
hundred and sixty four code words<font color="#E5E5E5"> and</font>

470
00:21:33,789 --> 00:21:39,408
that might again it's unlikely you're

471
00:21:36,679 --> 00:21:42,320
<font color="#E5E5E5">ever</font><font color="#CCCCCC"> gonna have a set of data that's so</font>

472
00:21:39,409 --> 00:21:44,240
heavily<font color="#E5E5E5"> weighted like that but you might</font>

473
00:21:42,320 --> 00:21:46,129
<font color="#E5E5E5">want to use those two other codes you</font>

474
00:21:44,240 --> 00:21:47,240
<font color="#E5E5E5">might not care about privilege of your</font>

475
00:21:46,130 --> 00:21:50,120
data but you might want to use those<font color="#E5E5E5"> two</font>

476
00:21:47,240 --> 00:21:52,370
<font color="#E5E5E5">other codes for</font><font color="#CCCCCC"> start</font><font color="#E5E5E5"> to frame and end</font>

477
00:21:50,120 --> 00:21:54,350
<font color="#E5E5E5">of frame delimiter</font><font color="#CCCCCC"> z' which again with</font>

478
00:21:52,370 --> 00:21:56,209
<font color="#E5E5E5">the feed packets in packets because you</font>

479
00:21:54,350 --> 00:22:03,320
can spoof the<font color="#E5E5E5"> start to frame</font><font color="#CCCCCC"> or into</font>

480
00:21:56,210 --> 00:22:07,510
frame within<font color="#E5E5E5"> your payload the third and</font>

481
00:22:03,320 --> 00:22:10,129
final class<font color="#E5E5E5"> of codes that we thought up</font>

482
00:22:07,510 --> 00:22:12,190
<font color="#CCCCCC">that might be useful for unambiguous</font>

483
00:22:10,130 --> 00:22:15,260
encapsulation was what we called large

484
00:22:12,190 --> 00:22:18,919
<font color="#E5E5E5">complimentary binary block codes and the</font>

485
00:22:15,260 --> 00:22:20,990
idea is<font color="#E5E5E5"> kind of born out of the fact</font>

486
00:22:18,919 --> 00:22:23,059
that we're using brute force<font color="#E5E5E5"> search to</font>

487
00:22:20,990 --> 00:22:25,820
<font color="#E5E5E5">find these codes as opposed to an</font>

488
00:22:23,059 --> 00:22:28,039
analytic method to find<font color="#E5E5E5"> these codes</font><font color="#CCCCCC"> and</font>

489
00:22:25,820 --> 00:22:31,908
if you're doing<font color="#CCCCCC"> brute-force search</font><font color="#E5E5E5"> you</font>

490
00:22:28,039 --> 00:22:35,450
notice that some<font color="#CCCCCC"> of the the rules that</font>

491
00:22:31,909 --> 00:22:39,919
are generally followed for block codes

492
00:22:35,450 --> 00:22:42,950
could be ignored<font color="#E5E5E5"> like</font><font color="#CCCCCC"> for example</font><font color="#E5E5E5"> do you</font>

493
00:22:39,919 --> 00:22:46,850
<font color="#CCCCCC">need to have a number of</font><font color="#E5E5E5"> code words</font><font color="#CCCCCC"> that</font>

494
00:22:42,950 --> 00:22:49,580
is a power of<font color="#CCCCCC"> two traditionally people</font>

495
00:22:46,850 --> 00:22:52,610
are generating<font color="#E5E5E5"> codes using analytic</font>

496
00:22:49,580 --> 00:22:55,970
methods that<font color="#CCCCCC"> produce usually a linear</font>

497
00:22:52,610 --> 00:22:57,559
code which is made up of<font color="#E5E5E5"> a bunch of code</font>

498
00:22:55,970 --> 00:23:00,020
words and<font color="#E5E5E5"> that total</font><font color="#CCCCCC"> number of code</font>

499
00:22:57,559 --> 00:23:02,120
words<font color="#E5E5E5"> being</font><font color="#CCCCCC"> used is a power</font><font color="#E5E5E5"> of two and</font>

500
00:23:00,020 --> 00:23:05,179
that's convenient for<font color="#E5E5E5"> encoding binary</font>

501
00:23:02,120 --> 00:23:06,810
data of course<font color="#E5E5E5"> because then every code</font>

502
00:23:05,179 --> 00:23:09,810
word<font color="#E5E5E5"> is a</font>

503
00:23:06,810 --> 00:23:12,530
you know integer number of<font color="#E5E5E5"> bits it</font>

504
00:23:09,810 --> 00:23:15,179
represents an<font color="#E5E5E5"> integer number</font><font color="#CCCCCC"> of bits</font><font color="#E5E5E5"> so</font>

505
00:23:12,530 --> 00:23:18,930
<font color="#CCCCCC">but we were finding things like</font><font color="#E5E5E5"> this</font>

506
00:23:15,180 --> 00:23:20,700
code<font color="#CCCCCC"> you know a code word that</font><font color="#E5E5E5"> had that</font>

507
00:23:18,930 --> 00:23:23,760
has a sub code with ten thousand two

508
00:23:20,700 --> 00:23:26,430
hundred and<font color="#CCCCCC"> sixty-four code words</font><font color="#E5E5E5"> not a</font>

509
00:23:23,760 --> 00:23:30,390
power<font color="#E5E5E5"> of two traditionally you might</font>

510
00:23:26,430 --> 00:23:32,730
<font color="#E5E5E5">think well I'm just gonna take the</font>

511
00:23:30,390 --> 00:23:35,220
<font color="#E5E5E5">highest power of two that</font><font color="#CCCCCC"> I can and only</font>

512
00:23:32,730 --> 00:23:38,250
<font color="#E5E5E5">use you know</font><font color="#CCCCCC"> 8,000 out of those</font><font color="#E5E5E5"> 10,000</font>

513
00:23:35,220 --> 00:23:40,380
code words and<font color="#E5E5E5"> just skip the rest ignore</font>

514
00:23:38,250 --> 00:23:43,230
them<font color="#E5E5E5"> but you might have</font><font color="#CCCCCC"> some use for</font>

515
00:23:40,380 --> 00:23:46,340
having a non binary number of code words

516
00:23:43,230 --> 00:23:49,740
<font color="#E5E5E5">another example might be that</font><font color="#CCCCCC"> bottom one</font>

517
00:23:46,340 --> 00:23:52,970
<font color="#E5E5E5">two code words and four code words well</font>

518
00:23:49,740 --> 00:23:55,770
as a whole that's<font color="#E5E5E5"> six code words and</font>

519
00:23:52,970 --> 00:23:57,510
traditionally<font color="#CCCCCC"> you might</font><font color="#E5E5E5"> not choose</font><font color="#CCCCCC"> an on</font>

520
00:23:55,770 --> 00:23:59,850
power of two like<font color="#E5E5E5"> six but if you can</font>

521
00:23:57,510 --> 00:24:02,940
divide<font color="#E5E5E5"> them into two and four then that</font>

522
00:23:59,850 --> 00:24:06,840
could<font color="#E5E5E5"> be very</font><font color="#CCCCCC"> useful for for encoding</font>

523
00:24:02,940 --> 00:24:10,550
<font color="#E5E5E5">two different types of</font><font color="#CCCCCC"> information</font><font color="#E5E5E5"> so if</font>

524
00:24:06,840 --> 00:24:14,010
you do a<font color="#E5E5E5"> brute-force search and look for</font>

525
00:24:10,550 --> 00:24:17,629
<font color="#E5E5E5">forget about isolation just look for a</font>

526
00:24:14,010 --> 00:24:20,430
set of code<font color="#CCCCCC"> words that has a certain n</font>

527
00:24:17,630 --> 00:24:22,890
the length of the code word in bits<font color="#E5E5E5"> and</font>

528
00:24:20,430 --> 00:24:25,680
a certain<font color="#E5E5E5"> D the</font><font color="#CCCCCC"> disk the Hamming</font>

529
00:24:22,890 --> 00:24:28,200
distance minimum<font color="#CCCCCC"> Hamming distance and</font>

530
00:24:25,680 --> 00:24:31,230
then just look for the largest<font color="#E5E5E5"> sets of</font>

531
00:24:28,200 --> 00:24:35,700
code words you can<font color="#E5E5E5"> sometimes you find</font>

532
00:24:31,230 --> 00:24:38,480
codes that have a power<font color="#E5E5E5"> like in this</font>

533
00:24:35,700 --> 00:24:42,810
case<font color="#E5E5E5"> 20 code words meet this particular</font>

534
00:24:38,480 --> 00:24:45,330
criterion<font color="#CCCCCC"> there these of 8-bit code</font>

535
00:24:42,810 --> 00:24:49,350
words with a minimum Hamming distance of

536
00:24:45,330 --> 00:24:51,750
<font color="#CCCCCC">three</font><font color="#E5E5E5"> we found this set of 20 numbers 20</font>

537
00:24:49,350 --> 00:24:53,399
of<font color="#E5E5E5"> these 8 bit numbers that all have a</font>

538
00:24:51,750 --> 00:24:54,840
minimum Hamming distance of<font color="#CCCCCC"> 3 and we're</font>

539
00:24:53,400 --> 00:24:59,790
just representing representing them in

540
00:24:54,840 --> 00:25:01,320
decimal form here but<font color="#E5E5E5"> 20 traditionally</font>

541
00:24:59,790 --> 00:25:04,230
you<font color="#CCCCCC"> might just throw</font><font color="#E5E5E5"> out for those and</font>

542
00:25:01,320 --> 00:25:06,870
<font color="#CCCCCC">only use 16 and have each</font><font color="#E5E5E5"> code word</font>

543
00:25:04,230 --> 00:25:10,590
represent<font color="#E5E5E5"> four bits but you could take</font>

544
00:25:06,870 --> 00:25:12,030
<font color="#CCCCCC">that those extra</font><font color="#E5E5E5"> four and use that use</font>

545
00:25:10,590 --> 00:25:14,159
those even though we don't have

546
00:25:12,030 --> 00:25:16,050
isolation<font color="#E5E5E5"> just kind of take advantage of</font>

547
00:25:14,160 --> 00:25:18,380
those extra code words you get kind of

548
00:25:16,050 --> 00:25:18,379
for free

549
00:25:18,450 --> 00:25:27,250
yeah yeah<font color="#CCCCCC"> so again the search base was</font>

550
00:25:22,840 --> 00:25:31,750
we did<font color="#E5E5E5"> n is</font><font color="#CCCCCC"> to 215</font><font color="#E5E5E5"> they tend to be not</font>

551
00:25:27,250 --> 00:25:33,520
as many of these so we<font color="#CCCCCC"> were able to do a</font>

552
00:25:31,750 --> 00:25:35,200
much larger search<font color="#CCCCCC"> or much a lot of key</font>

553
00:25:33,520 --> 00:25:37,179
space<font color="#E5E5E5"> we were so part of the reason</font><font color="#CCCCCC"> for</font>

554
00:25:35,200 --> 00:25:40,120
<font color="#E5E5E5">that is we're not looking</font><font color="#CCCCCC"> for isolation</font>

555
00:25:37,179 --> 00:25:44,049
<font color="#CCCCCC">we're looking for a single sub code</font><font color="#E5E5E5"> so</font>

556
00:25:40,120 --> 00:25:45,459
we didn't we didn't need<font color="#E5E5E5"> to there's not</font>

557
00:25:44,049 --> 00:25:47,590
<font color="#E5E5E5">as much expansion if there are the</font>

558
00:25:45,460 --> 00:25:49,470
parameters<font color="#CCCCCC"> and this is straining</font><font color="#E5E5E5"> the</font>

559
00:25:47,590 --> 00:25:52,449
results<font color="#E5E5E5"> because we</font><font color="#CCCCCC"> only got a</font><font color="#E5E5E5"> Meg and</font>

560
00:25:49,470 --> 00:25:53,830
they all ended successfully<font color="#E5E5E5"> so this I</font>

561
00:25:52,450 --> 00:25:55,030
<font color="#E5E5E5">mean this data is is data we could</font>

562
00:25:53,830 --> 00:25:57,250
upload if anyone was genuinely

563
00:25:55,030 --> 00:26:01,178
<font color="#CCCCCC">interested I'm pretty sure I can find a</font>

564
00:25:57,250 --> 00:26:02,679
web server<font color="#CCCCCC"> that</font><font color="#E5E5E5"> can hold that so yeah as</font>

565
00:26:01,179 --> 00:26:04,360
I<font color="#E5E5E5"> said the search base is much smaller</font>

566
00:26:02,679 --> 00:26:07,000
because<font color="#E5E5E5"> you're not you</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> have that</font>

567
00:26:04,360 --> 00:26:10,110
<font color="#E5E5E5">extra factor to it that's what extra</font>

568
00:26:07,000 --> 00:26:12,340
branching factor of the isolation<font color="#CCCCCC"> and</font>

569
00:26:10,110 --> 00:26:14,620
one<font color="#E5E5E5"> of the things we mostly did was only</font>

570
00:26:12,340 --> 00:26:16,600
we only<font color="#E5E5E5"> wanted the the longest code for</font>

571
00:26:14,620 --> 00:26:19,330
a set<font color="#E5E5E5"> of input parameters because we're</font>

572
00:26:16,600 --> 00:26:21,730
<font color="#CCCCCC">looking</font><font color="#E5E5E5"> for those that are non powers of</font>

573
00:26:19,330 --> 00:26:24,100
<font color="#E5E5E5">two in length preferably because</font><font color="#CCCCCC"> they're</font>

574
00:26:21,730 --> 00:26:25,450
interesting<font color="#CCCCCC"> to us and if you find one of</font>

575
00:26:24,100 --> 00:26:27,040
<font color="#E5E5E5">those but then you find</font><font color="#CCCCCC"> a power of two</font>

576
00:26:25,450 --> 00:26:28,360
code that's longer<font color="#E5E5E5"> then really what</font>

577
00:26:27,040 --> 00:26:30,040
you're doing<font color="#CCCCCC"> is just not</font><font color="#E5E5E5"> using all of</font>

578
00:26:28,360 --> 00:26:32,168
<font color="#E5E5E5">the power of two code so we were</font>

579
00:26:30,040 --> 00:26:34,299
specifically<font color="#E5E5E5"> interested in examples</font>

580
00:26:32,169 --> 00:26:39,070
<font color="#CCCCCC">whereby the longest code that we could</font>

581
00:26:34,299 --> 00:26:44,710
find was not a power of<font color="#CCCCCC"> two and we</font><font color="#E5E5E5"> found</font>

582
00:26:39,070 --> 00:26:46,689
quite<font color="#E5E5E5"> a few</font><font color="#CCCCCC"> yep well another interesting</font>

583
00:26:44,710 --> 00:26:49,540
note even<font color="#E5E5E5"> though we did find quite a</font><font color="#CCCCCC"> few</font>

584
00:26:46,690 --> 00:26:51,490
of those non-binary codes for<font color="#CCCCCC"> all the</font>

585
00:26:49,540 --> 00:26:55,360
various parameters<font color="#E5E5E5"> we tested the</font>

586
00:26:51,490 --> 00:26:56,950
majority had a largest<font color="#E5E5E5"> code that was</font><font color="#CCCCCC"> a</font>

587
00:26:55,360 --> 00:26:59,168
power of<font color="#E5E5E5"> two right there were just</font>

588
00:26:56,950 --> 00:27:03,400
<font color="#CCCCCC">certain cases</font><font color="#E5E5E5"> certain test cases where</font>

589
00:26:59,169 --> 00:27:06,429
we found a large code that was larger

590
00:27:03,400 --> 00:27:08,770
than<font color="#CCCCCC"> a power of two or larger than the</font>

591
00:27:06,429 --> 00:27:11,020
<font color="#E5E5E5">largest power of two that we found which</font>

592
00:27:08,770 --> 00:27:11,650
<font color="#E5E5E5">was kind of interesting</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> but they do</font>

593
00:27:11,020 --> 00:27:15,370
exist

594
00:27:11,650 --> 00:27:18,820
so traditionally codes are selected

595
00:27:15,370 --> 00:27:21,129
based on various properties like the

596
00:27:18,820 --> 00:27:23,320
code rate or the<font color="#E5E5E5"> efficiency and what the</font>

597
00:27:21,130 --> 00:27:26,470
probability of<font color="#E5E5E5"> having an error is and so</font>

598
00:27:23,320 --> 00:27:29,779
forth<font color="#E5E5E5"> but we suggest maybe that people</font>

599
00:27:26,470 --> 00:27:32,719
should select codes<font color="#E5E5E5"> also based on</font>

600
00:27:29,779 --> 00:27:36,739
looking for<font color="#E5E5E5"> considering what happens</font>

601
00:27:32,719 --> 00:27:38,690
when encapsulation might break<font color="#CCCCCC"> and in</font>

602
00:27:36,739 --> 00:27:40,309
the<font color="#E5E5E5"> future we think some interesting</font>

603
00:27:38,690 --> 00:27:44,059
things could be done with<font color="#E5E5E5"> this</font><font color="#CCCCCC"> like</font>

604
00:27:40,309 --> 00:27:46,700
we've talked about<font color="#E5E5E5"> maybe trying to make</font>

605
00:27:44,059 --> 00:27:49,129
a variant of a<font color="#CCCCCC"> to 2.15 dot for that's</font>

606
00:27:46,700 --> 00:27:53,049
that uses unambiguous<font color="#E5E5E5"> encapsulation and</font>

607
00:27:49,129 --> 00:27:59,209
is not vulnerable to packet in packet<font color="#E5E5E5"> we</font>

608
00:27:53,049 --> 00:28:01,820
think<font color="#E5E5E5"> that probably the the the thing</font>

609
00:27:59,210 --> 00:28:03,589
<font color="#E5E5E5">that we didn't explore but</font><font color="#CCCCCC"> I think is</font>

610
00:28:01,820 --> 00:28:06,109
worth exploring with respect to error

611
00:28:03,589 --> 00:28:08,139
correcting codes<font color="#E5E5E5"> is investigating the</font>

612
00:28:06,109 --> 00:28:11,228
nature<font color="#CCCCCC"> of noise or investigating the</font>

613
00:28:08,139 --> 00:28:13,699
probability of<font color="#E5E5E5"> different types of errors</font>

614
00:28:11,229 --> 00:28:15,440
<font color="#CCCCCC">traditionally and partly</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is because</font>

615
00:28:13,700 --> 00:28:19,309
codes are traditionally generated by

616
00:28:15,440 --> 00:28:21,589
analytic means<font color="#E5E5E5"> probability</font><font color="#CCCCCC"> of errors</font>

617
00:28:19,309 --> 00:28:24,349
really ignored<font color="#E5E5E5"> other than having some</font>

618
00:28:21,589 --> 00:28:28,190
sort of a distance metric<font color="#E5E5E5"> like a Hamming</font>

619
00:28:24,349 --> 00:28:31,070
distance and selecting codes based<font color="#E5E5E5"> on</font>

620
00:28:28,190 --> 00:28:34,489
their<font color="#E5E5E5"> Hamming distance may not be as</font>

621
00:28:31,070 --> 00:28:36,289
good as selecting codes based on more

622
00:28:34,489 --> 00:28:41,659
thorough analysis of<font color="#E5E5E5"> the probability of</font>

623
00:28:36,289 --> 00:28:43,999
<font color="#E5E5E5">bit errors</font><font color="#CCCCCC"> and so you could apply a much</font>

624
00:28:41,659 --> 00:28:45,919
more sophisticated metric than something

625
00:28:43,999 --> 00:28:49,249
like<font color="#E5E5E5"> Hamming distance if you're doing</font>

626
00:28:45,919 --> 00:28:51,859
brute force search compared to analytic

627
00:28:49,249 --> 00:28:53,269
methods and that's<font color="#E5E5E5"> something maybe</font><font color="#CCCCCC"> not</font>

628
00:28:51,859 --> 00:28:55,460
necessarily<font color="#CCCCCC"> directly related to</font>

629
00:28:53,269 --> 00:28:58,549
unambiguous encapsulation but would be

630
00:28:55,460 --> 00:29:01,279
an interesting<font color="#CCCCCC"> direction to go</font><font color="#E5E5E5"> and we do</font>

631
00:28:58,549 --> 00:29:03,080
think that<font color="#E5E5E5"> this is a the general concept</font>

632
00:29:01,279 --> 00:29:05,450
of unambiguous encapsulation is

633
00:29:03,080 --> 00:29:08,210
something that could find its way into

634
00:29:05,450 --> 00:29:10,580
file formats could find its way into CPU

635
00:29:08,210 --> 00:29:12,409
architectures<font color="#CCCCCC"> could find its way into a</font>

636
00:29:10,580 --> 00:29:16,639
lot<font color="#E5E5E5"> of things that we haven't looked at</font>

637
00:29:12,409 --> 00:29:19,009
yet<font color="#CCCCCC"> so anytime</font><font color="#E5E5E5"> you encapsulate data</font>

638
00:29:16,639 --> 00:29:21,498
within other data<font color="#E5E5E5"> we hope you'll</font>

639
00:29:19,009 --> 00:29:25,339
consider<font color="#E5E5E5"> on ambiguous encapsulation</font>

640
00:29:21,499 --> 00:29:29,479
<font color="#E5E5E5">that's our sales pitch</font><font color="#CCCCCC"> thank you to</font>

641
00:29:25,339 --> 00:29:32,859
everyone here<font color="#E5E5E5"> and for having us and do</font>

642
00:29:29,479 --> 00:29:32,859
we<font color="#CCCCCC"> have a little</font><font color="#E5E5E5"> time</font><font color="#CCCCCC"> for a question</font>

643
00:29:51,420 --> 00:29:54,050
<font color="#CCCCCC">No</font>

644
00:29:56,060 --> 00:30:01,730
<font color="#CCCCCC">oh yeah</font><font color="#E5E5E5"> okay so following on from what</font>

645
00:30:00,140 --> 00:30:03,800
you're saying<font color="#CCCCCC"> about maybe not basing it</font>

646
00:30:01,730 --> 00:30:05,630
on<font color="#CCCCCC"> hamming distance could</font><font color="#E5E5E5"> you think you</font>

647
00:30:03,800 --> 00:30:07,370
know as I see<font color="#E5E5E5"> more and more low power</font>

648
00:30:05,630 --> 00:30:09,590
device with this nebulous<font color="#E5E5E5"> Internet of</font>

649
00:30:07,370 --> 00:30:10,909
<font color="#E5E5E5">Things</font><font color="#CCCCCC"> do you think you could use</font>

650
00:30:09,590 --> 00:30:12,260
<font color="#E5E5E5">something similar rather than using</font>

651
00:30:10,910 --> 00:30:14,480
<font color="#E5E5E5">Hamming distance but to look for</font>

652
00:30:12,260 --> 00:30:15,860
rotational errors<font color="#CCCCCC"> to this clock skew</font><font color="#E5E5E5"> as</font>

653
00:30:14,480 --> 00:30:18,410
well you<font color="#E5E5E5"> have a lot of low power devices</font>

654
00:30:15,860 --> 00:30:19,610
that might not have<font color="#E5E5E5"> synchronization</font>

655
00:30:18,410 --> 00:30:22,550
<font color="#E5E5E5">error so you might be able</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> look kind</font>

656
00:30:19,610 --> 00:30:27,139
of one or two off<font color="#CCCCCC"> to make</font><font color="#E5E5E5"> kind of timing</font>

657
00:30:22,550 --> 00:30:30,020
<font color="#CCCCCC">the safe coding</font><font color="#E5E5E5"> yes</font><font color="#CCCCCC"> that is an excellent</font>

658
00:30:27,140 --> 00:30:33,980
<font color="#E5E5E5">question</font><font color="#CCCCCC"> and actually something</font><font color="#E5E5E5"> that we</font>

659
00:30:30,020 --> 00:30:35,990
should<font color="#E5E5E5"> have put on this slide</font><font color="#CCCCCC"> I'm</font>

660
00:30:33,980 --> 00:30:41,410
pointing pointing out the fact that we

661
00:30:35,990 --> 00:30:44,840
didn't look at<font color="#E5E5E5"> time shift errors at all</font>

662
00:30:41,410 --> 00:30:46,100
<font color="#CCCCCC">we not in any formal way anyway I mean</font>

663
00:30:44,840 --> 00:30:47,949
<font color="#E5E5E5">we kind of talked about it a little</font><font color="#CCCCCC"> bit</font>

664
00:30:46,100 --> 00:30:51,800
<font color="#CCCCCC">but we we weren't searching</font><font color="#E5E5E5"> for</font>

665
00:30:47,950 --> 00:30:54,020
properties where like if<font color="#E5E5E5"> you if you take</font>

666
00:30:51,800 --> 00:30:56,860
<font color="#E5E5E5">a code word followed by another code</font>

667
00:30:54,020 --> 00:30:59,330
word<font color="#E5E5E5"> but then you like shift a</font>

668
00:30:56,860 --> 00:31:02,060
fractional code word<font color="#E5E5E5"> number of bits into</font>

669
00:30:59,330 --> 00:31:05,120
it you<font color="#E5E5E5"> might</font><font color="#CCCCCC"> find that there's another</font>

670
00:31:02,060 --> 00:31:07,220
code word there<font color="#CCCCCC"> and so that's</font><font color="#E5E5E5"> the type</font>

671
00:31:05,120 --> 00:31:11,540
<font color="#CCCCCC">that's a type of thing if you were going</font>

672
00:31:07,220 --> 00:31:14,090
<font color="#CCCCCC">to</font><font color="#E5E5E5"> try to</font><font color="#CCCCCC"> actually deploy</font><font color="#E5E5E5"> a new design a</font>

673
00:31:11,540 --> 00:31:15,470
new protocol or a new file format<font color="#CCCCCC"> or</font>

674
00:31:14,090 --> 00:31:18,889
something where you<font color="#CCCCCC"> actually wanted to</font>

675
00:31:15,470 --> 00:31:21,410
<font color="#E5E5E5">use this property</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> a type of</font>

676
00:31:18,890 --> 00:31:25,400
attack<font color="#CCCCCC"> that you should probably</font><font color="#E5E5E5"> look out</font>

677
00:31:21,410 --> 00:31:29,570
for<font color="#E5E5E5"> and we haven't so that's a really</font>

678
00:31:25,400 --> 00:31:32,510
important point<font color="#CCCCCC"> but getting</font><font color="#E5E5E5"> back to your</font>

679
00:31:29,570 --> 00:31:34,639
<font color="#CCCCCC">question about</font><font color="#E5E5E5"> like there are</font>

680
00:31:32,510 --> 00:31:36,470
intentional timing errors possible and

681
00:31:34,640 --> 00:31:38,780
they're also unintentional<font color="#E5E5E5"> timing errors</font>

682
00:31:36,470 --> 00:31:42,680
possible<font color="#E5E5E5"> and unintentional timing errors</font>

683
00:31:38,780 --> 00:31:44,450
are<font color="#E5E5E5"> actually quite probable</font><font color="#CCCCCC"> and so that</font>

684
00:31:42,680 --> 00:31:47,780
might<font color="#CCCCCC"> be one of</font><font color="#E5E5E5"> the things</font><font color="#CCCCCC"> that you put</font>

685
00:31:44,450 --> 00:31:53,500
into your<font color="#E5E5E5"> probability model</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> you were</font>

686
00:31:47,780 --> 00:31:56,840
<font color="#E5E5E5">trying to come</font><font color="#CCCCCC"> up with a a code</font>

687
00:31:53,500 --> 00:31:58,100
generation<font color="#E5E5E5"> method or search code search</font>

688
00:31:56,840 --> 00:32:00,679
method that took into<font color="#CCCCCC"> account</font>

689
00:31:58,100 --> 00:32:02,959
probability of errors<font color="#CCCCCC"> instead of just a</font>

690
00:32:00,680 --> 00:32:05,620
simple district distance metric<font color="#CCCCCC"> I think</font>

691
00:32:02,960 --> 00:32:05,620
that's an excellent point

692
00:32:10,220 --> 00:32:13,299
further<font color="#E5E5E5"> questions</font>

693
00:32:16,420 --> 00:32:22,430
how much have<font color="#CCCCCC"> you looked</font><font color="#E5E5E5"> into what</font>

694
00:32:19,400 --> 00:32:26,030
whether there is any theoretical

695
00:32:22,430 --> 00:32:28,520
analysis of how many of these codes are

696
00:32:26,030 --> 00:32:30,620
there<font color="#CCCCCC"> is it have you look in the into</font>

697
00:32:28,520 --> 00:32:33,560
<font color="#E5E5E5">this at all or</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> focus on the brute</font>

698
00:32:30,620 --> 00:32:36,709
force<font color="#E5E5E5"> it's actually an interesting</font>

699
00:32:33,560 --> 00:32:43,610
<font color="#E5E5E5">question of like the bounds of how many</font>

700
00:32:36,710 --> 00:32:46,850
codes there<font color="#E5E5E5"> exist on in various fridge</font>

701
00:32:43,610 --> 00:32:48,439
various criteria<font color="#CCCCCC"> and it's an area</font><font color="#E5E5E5"> that</font>

702
00:32:46,850 --> 00:32:51,230
<font color="#CCCCCC">there has been quite a bit of</font><font color="#E5E5E5"> research</font>

703
00:32:48,440 --> 00:32:53,210
<font color="#E5E5E5">on over the years</font><font color="#CCCCCC"> and it's not as well</font>

704
00:32:51,230 --> 00:32:55,520
<font color="#CCCCCC">understood as I thought it would</font><font color="#E5E5E5"> be</font>

705
00:32:53,210 --> 00:32:57,610
going<font color="#E5E5E5"> into this like you can find papers</font>

706
00:32:55,520 --> 00:33:02,260
that talk about<font color="#E5E5E5"> you know</font><font color="#CCCCCC"> people have</font>

707
00:32:57,610 --> 00:33:02,260
<font color="#E5E5E5">people have come up</font><font color="#CCCCCC"> over the</font><font color="#E5E5E5"> years with</font>

708
00:33:02,440 --> 00:33:09,520
algorithms<font color="#E5E5E5"> that tell us or equations</font>

709
00:33:06,230 --> 00:33:13,010
that<font color="#CCCCCC"> tell that tell us an upper bound on</font>

710
00:33:09,520 --> 00:33:14,510
or a lower bound on this like maximum

711
00:33:13,010 --> 00:33:20,360
<font color="#E5E5E5">number</font><font color="#CCCCCC"> of codes that</font><font color="#E5E5E5"> meet a certain</font>

712
00:33:14,510 --> 00:33:22,550
criteria<font color="#CCCCCC"> of set of criteria and</font><font color="#E5E5E5"> but</font>

713
00:33:20,360 --> 00:33:24,979
nobody's come up with like<font color="#E5E5E5"> a general way</font>

714
00:33:22,550 --> 00:33:27,830
even for<font color="#E5E5E5"> fairly simple binary block</font>

715
00:33:24,980 --> 00:33:30,500
codes<font color="#E5E5E5"> nobody's come up with a general</font>

716
00:33:27,830 --> 00:33:32,810
way<font color="#E5E5E5"> to just like compute how many</font>

717
00:33:30,500 --> 00:33:34,730
possible codes there are it's it's

718
00:33:32,810 --> 00:33:37,629
<font color="#E5E5E5">really quite interesting</font><font color="#CCCCCC"> I think it's</font>

719
00:33:34,730 --> 00:33:39,860
it's kind of surprising but then again

720
00:33:37,630 --> 00:33:41,600
<font color="#CCCCCC">knowing that there are</font><font color="#E5E5E5"> hard problems in</font>

721
00:33:39,860 --> 00:33:48,459
coding<font color="#E5E5E5"> theory maybe it's not so</font>

722
00:33:41,600 --> 00:33:51,530
surprising<font color="#CCCCCC"> do you have any idea like</font>

723
00:33:48,460 --> 00:33:54,500
have you<font color="#CCCCCC"> identified anything in what</font>

724
00:33:51,530 --> 00:33:57,500
you've done<font color="#E5E5E5"> that where you might guess</font>

725
00:33:54,500 --> 00:33:59,540
<font color="#CCCCCC">that it maybe is one of those hard</font>

726
00:33:57,500 --> 00:34:10,159
problems from coding theory shining

727
00:33:59,540 --> 00:34:12,440
through somehow I'm<font color="#E5E5E5"> not sure okay we</font>

728
00:34:10,159 --> 00:34:15,830
<font color="#E5E5E5">don't we don't really have too much of a</font>

729
00:34:12,440 --> 00:34:22,730
sense of<font color="#E5E5E5"> how hard</font><font color="#CCCCCC"> any of these</font><font color="#E5E5E5"> problems</font>

730
00:34:15,830 --> 00:34:25,969
is<font color="#E5E5E5"> but we do we do definitely believe</font>

731
00:34:22,730 --> 00:34:28,810
that<font color="#CCCCCC"> brute-force search</font><font color="#E5E5E5"> is a reasonable</font>

732
00:34:25,969 --> 00:34:31,060
approach<font color="#E5E5E5"> to take but only up to</font>

733
00:34:28,810 --> 00:34:32,710
only up to a certain limit<font color="#CCCCCC"> right like</font>

734
00:34:31,060 --> 00:34:35,040
we're<font color="#E5E5E5"> dealing with fairly</font><font color="#CCCCCC"> short codes</font>

735
00:34:32,710 --> 00:34:37,870
fairly short code words and<font color="#CCCCCC"> impractical</font>

736
00:34:35,040 --> 00:34:40,239
<font color="#E5E5E5">systems you might want longer code words</font>

737
00:34:37,870 --> 00:34:42,279
<font color="#E5E5E5">and in those cases it might make more</font>

738
00:34:40,239 --> 00:34:45,009
<font color="#CCCCCC">sense if you wanted to</font><font color="#E5E5E5"> just find a code</font>

739
00:34:42,280 --> 00:34:45,970
to use that has longer code words it

740
00:34:45,010 --> 00:34:49,179
<font color="#E5E5E5">might make more</font><font color="#CCCCCC"> sense to use the</font>

741
00:34:45,969 --> 00:34:51,129
<font color="#E5E5E5">constraint reasoning approach</font><font color="#CCCCCC"> but that's</font>

742
00:34:49,179 --> 00:34:53,740
<font color="#CCCCCC">gonna be an exhaustive search I think</font>

743
00:34:51,130 --> 00:34:56,380
<font color="#CCCCCC">and you might</font><font color="#E5E5E5"> not have the</font><font color="#CCCCCC"> best code you</font>

744
00:34:53,739 --> 00:34:58,600
just<font color="#E5E5E5"> have a good one</font><font color="#CCCCCC"> as a formal</font>

745
00:34:56,380 --> 00:35:01,390
mathematician<font color="#E5E5E5"> I would say that</font>

746
00:34:58,600 --> 00:35:03,730
combinatorics is really hard

747
00:35:01,390 --> 00:35:06,430
<font color="#CCCCCC">and when you start digging you never</font>

748
00:35:03,730 --> 00:35:10,380
know what you're going<font color="#CCCCCC"> to dig out you</font>

749
00:35:06,430 --> 00:35:13,960
know you may get into algebraic topology

750
00:35:10,380 --> 00:35:17,500
<font color="#CCCCCC">you may get into elliptic curves</font><font color="#E5E5E5"> you may</font>

751
00:35:13,960 --> 00:35:20,140
get into<font color="#E5E5E5"> any one</font><font color="#CCCCCC"> of those areas</font><font color="#E5E5E5"> quite</font>

752
00:35:17,500 --> 00:35:22,600
surprisingly so<font color="#E5E5E5"> I'm not surprised at all</font>

753
00:35:20,140 --> 00:35:25,240
that<font color="#CCCCCC"> this is a community real problem</font>

754
00:35:22,600 --> 00:35:26,759
that's that's still hot all<font color="#E5E5E5"> right it</font>

755
00:35:25,240 --> 00:35:28,959
should also be noted that brute force

756
00:35:26,760 --> 00:35:30,580
<font color="#CCCCCC">makes a lot of sense for the shoulder</font>

757
00:35:28,960 --> 00:35:31,870
codes<font color="#E5E5E5"> because this is a this</font><font color="#CCCCCC"> is</font>

758
00:35:30,580 --> 00:35:34,120
<font color="#CCCCCC">something you need</font><font color="#E5E5E5"> to do once when you</font>

759
00:35:31,870 --> 00:35:35,799
design your<font color="#E5E5E5"> system it's not it's not a</font>

760
00:35:34,120 --> 00:35:37,900
case that<font color="#CCCCCC"> you</font><font color="#E5E5E5"> need to do this as</font><font color="#CCCCCC"> part of</font>

761
00:35:35,800 --> 00:35:40,120
the<font color="#E5E5E5"> process so it's a it's a one-off</font>

762
00:35:37,900 --> 00:35:41,560
cost<font color="#E5E5E5"> now obviously there are code</font>

763
00:35:40,120 --> 00:35:43,089
lengths which just<font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> not going to be</font>

764
00:35:41,560 --> 00:35:45,460
feasible for<font color="#CCCCCC"> this sort of thing normals</font>

765
00:35:43,090 --> 00:35:46,900
<font color="#E5E5E5">to wait three years if you're like piece</font>

766
00:35:45,460 --> 00:35:48,820
of code to<font color="#E5E5E5"> finish before</font><font color="#CCCCCC"> they can</font>

767
00:35:46,900 --> 00:35:50,560
publish<font color="#E5E5E5"> their their spec for the new</font>

768
00:35:48,820 --> 00:35:52,990
<font color="#CCCCCC">communicator gives</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> five or whatever</font>

769
00:35:50,560 --> 00:35:55,000
<font color="#E5E5E5">but but there are you</font><font color="#CCCCCC"> know there are</font>

770
00:35:52,990 --> 00:35:56,169
balances there and things and so I<font color="#E5E5E5"> don't</font>

771
00:35:55,000 --> 00:35:58,720
think<font color="#CCCCCC"> while brute force isn't</font>

772
00:35:56,170 --> 00:35:59,860
<font color="#E5E5E5">necessarily the most efficient method</font>

773
00:35:58,720 --> 00:36:01,209
for<font color="#E5E5E5"> doing this</font>

774
00:35:59,860 --> 00:36:02,710
it was exhaustive which is what we

775
00:36:01,210 --> 00:36:04,030
wanted<font color="#E5E5E5"> I think is wrong with the brute</font>

776
00:36:02,710 --> 00:36:06,550
<font color="#CCCCCC">force</font>

777
00:36:04,030 --> 00:36:08,800
but let<font color="#E5E5E5"> me tell you when I see that</font>

778
00:36:06,550 --> 00:36:11,170
special<font color="#E5E5E5"> character that's not confusable</font>

779
00:36:08,800 --> 00:36:13,630
for the message character that's<font color="#E5E5E5"> the</font>

780
00:36:11,170 --> 00:36:17,430
delimiter character<font color="#CCCCCC"> I will know how much</font>

781
00:36:13,630 --> 00:36:21,750
it cost in ec2

782
00:36:17,430 --> 00:36:25,069
<font color="#CCCCCC">I will respect that character</font><font color="#E5E5E5"> all right</font>

783
00:36:21,750 --> 00:36:25,069
let's thank the<font color="#CCCCCC"> speakers</font><font color="#E5E5E5"> again</font>

