1
00:00:00,000 --> 00:00:04,620
<font color="#E5E5E5">I'm currently a software engineer in</font>

2
00:00:02,310 --> 00:00:07,140
Google and<font color="#CCCCCC"> Matias is an assistant</font>

3
00:00:04,620 --> 00:00:10,139
<font color="#E5E5E5">professor in Purdue</font><font color="#CCCCCC"> this is work that we</font>

4
00:00:07,140 --> 00:00:13,049
did<font color="#E5E5E5"> in early 2013</font><font color="#CCCCCC"> when</font><font color="#E5E5E5"> we were both</font>

5
00:00:10,139 --> 00:00:15,570
postdocs of<font color="#E5E5E5"> dongseong in UC Berkeley</font><font color="#CCCCCC"> and</font>

6
00:00:13,049 --> 00:00:17,160
it came from actually<font color="#CCCCCC"> a fairly simple</font>

7
00:00:15,570 --> 00:00:19,980
<font color="#E5E5E5">observation so I should warn you that</font>

8
00:00:17,160 --> 00:00:22,470
this is<font color="#E5E5E5"> not a very technical paper but</font>

9
00:00:19,980 --> 00:00:24,539
it was<font color="#E5E5E5"> meant more</font><font color="#CCCCCC"> as a position paper</font><font color="#E5E5E5"> to</font>

10
00:00:22,470 --> 00:00:27,660
outline<font color="#CCCCCC"> what we believe are some</font>

11
00:00:24,539 --> 00:00:29,789
<font color="#E5E5E5">directions of future research</font><font color="#CCCCCC"> okay in an</font>

12
00:00:27,660 --> 00:00:31,529
area that<font color="#E5E5E5"> hasn't received like it's sort</font>

13
00:00:29,789 --> 00:00:35,219
<font color="#E5E5E5">of known but it hasn't received a lot of</font>

14
00:00:31,529 --> 00:00:38,370
attention<font color="#CCCCCC"> and serious study</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> and</font>

15
00:00:35,219 --> 00:00:41,129
it's about a gap<font color="#CCCCCC"> that happens</font><font color="#E5E5E5"> between</font>

16
00:00:38,370 --> 00:00:44,010
what<font color="#E5E5E5"> a compiler even when correctly</font>

17
00:00:41,129 --> 00:00:46,620
<font color="#E5E5E5">implemented and correctly designed can</font>

18
00:00:44,010 --> 00:00:48,089
give you and the security guarantees you

19
00:00:46,620 --> 00:00:51,718
can put<font color="#CCCCCC"> into your code and whether they</font>

20
00:00:48,090 --> 00:00:54,600
are<font color="#E5E5E5"> preserved okay so I'll just</font><font color="#CCCCCC"> give you</font>

21
00:00:51,719 --> 00:00:56,219
<font color="#E5E5E5">some</font><font color="#CCCCCC"> examples of</font><font color="#E5E5E5"> this a couple of them</font>

22
00:00:54,600 --> 00:00:57,960
are known but then there<font color="#E5E5E5"> are others that</font>

23
00:00:56,219 --> 00:01:00,420
<font color="#E5E5E5">are</font><font color="#CCCCCC"> not known and</font><font color="#E5E5E5"> that's what we</font><font color="#CCCCCC"> discuss</font>

24
00:00:57,960 --> 00:01:01,710
in the<font color="#CCCCCC"> paper and more interestingly we</font>

25
00:01:00,420 --> 00:01:03,120
said<font color="#E5E5E5"> all right like people know about</font>

26
00:01:01,710 --> 00:01:05,400
<font color="#E5E5E5">these examples</font><font color="#CCCCCC"> but how</font><font color="#E5E5E5"> they've been</font>

27
00:01:03,120 --> 00:01:07,100
studied so we undertook some<font color="#E5E5E5"> analysis</font>

28
00:01:05,400 --> 00:01:09,360
<font color="#CCCCCC">and I'll give you a</font><font color="#E5E5E5"> summary of that</font><font color="#CCCCCC"> and</font>

29
00:01:07,100 --> 00:01:10,798
the main conclusion is really that

30
00:01:09,360 --> 00:01:14,010
<font color="#CCCCCC">there's a lot</font><font color="#E5E5E5"> of work to do in the</font>

31
00:01:10,799 --> 00:01:15,570
<font color="#CCCCCC">future okay</font><font color="#E5E5E5"> so whenever talking about</font>

32
00:01:14,010 --> 00:01:17,159
compilers it's one of the oldest

33
00:01:15,570 --> 00:01:19,199
compiler<font color="#CCCCCC"> construction is one of the</font>

34
00:01:17,159 --> 00:01:21,530
oldest fields in computer science<font color="#E5E5E5"> and</font>

35
00:01:19,200 --> 00:01:24,420
the problems<font color="#E5E5E5"> are very very hard and</font>

36
00:01:21,530 --> 00:01:26,310
we'll see that<font color="#CCCCCC"> you know like</font><font color="#E5E5E5"> all the</font>

37
00:01:24,420 --> 00:01:29,040
great<font color="#E5E5E5"> giants of computer science have</font>

38
00:01:26,310 --> 00:01:32,640
been<font color="#E5E5E5"> inspired by problems related to</font>

39
00:01:29,040 --> 00:01:34,530
compiler construction<font color="#CCCCCC"> and it's often</font>

40
00:01:32,640 --> 00:01:37,950
taken very long time to find solution so

41
00:01:34,530 --> 00:01:40,110
one of a prominent example<font color="#E5E5E5"> of somebody</font>

42
00:01:37,950 --> 00:01:42,030
talking about<font color="#CCCCCC"> this is</font><font color="#E5E5E5"> Ken Thompson in</font>

43
00:01:40,110 --> 00:01:44,340
his Turing<font color="#E5E5E5"> Award lecture where he said</font>

44
00:01:42,030 --> 00:01:46,100
you<font color="#CCCCCC"> know do</font><font color="#E5E5E5"> you trust your compiler and</font>

45
00:01:44,340 --> 00:01:49,259
<font color="#E5E5E5">he gave a specific</font><font color="#CCCCCC"> example of</font><font color="#E5E5E5"> how</font>

46
00:01:46,100 --> 00:01:52,789
<font color="#CCCCCC">compiler could introduce a</font><font color="#E5E5E5"> Trojan right</font>

47
00:01:49,259 --> 00:01:55,670
and he put out<font color="#E5E5E5"> there this question and</font>

48
00:01:52,790 --> 00:01:58,200
it's hard<font color="#E5E5E5"> to find people</font><font color="#CCCCCC"> who have</font>

49
00:01:55,670 --> 00:02:00,810
explicitly expressed the same<font color="#E5E5E5"> concern</font>

50
00:01:58,200 --> 00:02:02,130
but a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> people have worked</font><font color="#CCCCCC"> around</font>

51
00:02:00,810 --> 00:02:04,590
it in the<font color="#E5E5E5"> same way</font><font color="#CCCCCC"> and one</font><font color="#E5E5E5"> of the</font>

52
00:02:02,130 --> 00:02:07,048
earliest<font color="#E5E5E5"> cases is in the implementation</font>

53
00:02:04,590 --> 00:02:08,970
<font color="#E5E5E5">of the Lisp compiler John McCarthy and</font>

54
00:02:07,049 --> 00:02:10,739
James<font color="#CCCCCC"> Pinter talked about the</font>

55
00:02:08,970 --> 00:02:12,720
correctness<font color="#CCCCCC"> just of the expression</font>

56
00:02:10,739 --> 00:02:13,830
compilation part<font color="#CCCCCC"> okay and this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> in</font>

57
00:02:12,720 --> 00:02:15,690
1967

58
00:02:13,830 --> 00:02:17,730
and since then there's been<font color="#E5E5E5"> quite a lot</font>

59
00:02:15,690 --> 00:02:19,109
<font color="#E5E5E5">of work and in the last 15 years we</font>

60
00:02:17,730 --> 00:02:21,600
actually<font color="#E5E5E5"> have tools so there are a whole</font>

61
00:02:19,110 --> 00:02:25,020
<font color="#CCCCCC">bunch</font><font color="#E5E5E5"> of tools to do compiler testing</font>

62
00:02:21,600 --> 00:02:28,140
<font color="#E5E5E5">and the formal methods people</font><font color="#CCCCCC"> including</font>

63
00:02:25,020 --> 00:02:30,030
me<font color="#CCCCCC"> I belong</font><font color="#E5E5E5"> to that community and has</font>

64
00:02:28,140 --> 00:02:33,630
also done a<font color="#CCCCCC"> lot of</font><font color="#E5E5E5"> work on formally</font>

65
00:02:30,030 --> 00:02:35,970
verifying and in fact<font color="#CCCCCC"> Sevilla Lara in</font>

66
00:02:33,630 --> 00:02:38,010
the last years has implemented an entire

67
00:02:35,970 --> 00:02:40,080
compiler within a<font color="#E5E5E5"> clear improver so I</font>

68
00:02:38,010 --> 00:02:41,760
can recommend the papers mention<font color="#E5E5E5"> at the</font>

69
00:02:40,080 --> 00:02:43,380
bottom here the one<font color="#CCCCCC"> on taming compiler</font>

70
00:02:41,760 --> 00:02:45,810
<font color="#E5E5E5">fathers for an overview of the testing</font>

71
00:02:43,380 --> 00:02:47,670
side and the paper<font color="#CCCCCC"> and the other side</font>

72
00:02:45,810 --> 00:02:49,950
for an overview<font color="#CCCCCC"> of formal things</font><font color="#E5E5E5"> and if</font>

73
00:02:47,670 --> 00:02:51,869
<font color="#E5E5E5">you look at the second paper</font><font color="#CCCCCC"> it opens</font>

74
00:02:49,950 --> 00:02:53,910
with more or less<font color="#CCCCCC"> the same line that's</font>

75
00:02:51,870 --> 00:02:55,380
there in Ken Thompson's<font color="#E5E5E5"> during a</font><font color="#CCCCCC"> word</font>

76
00:02:53,910 --> 00:02:58,200
lecture which is<font color="#E5E5E5"> can you trust your</font>

77
00:02:55,380 --> 00:03:00,000
compiler so do we<font color="#CCCCCC"> conclude from</font><font color="#E5E5E5"> this</font>

78
00:02:58,200 --> 00:03:03,000
<font color="#CCCCCC">that nothing</font><font color="#E5E5E5"> happened in the 25 years</font>

79
00:03:00,000 --> 00:03:04,830
<font color="#CCCCCC">since that during</font><font color="#E5E5E5"> or in this paper</font><font color="#CCCCCC"> no I</font>

80
00:03:03,000 --> 00:03:06,630
mean what happened is this<font color="#CCCCCC"> is one</font>

81
00:03:04,830 --> 00:03:08,640
<font color="#CCCCCC">specific solution to the issue of</font>

82
00:03:06,630 --> 00:03:09,900
trusting a compiler that<font color="#E5E5E5"> he's presenting</font>

83
00:03:08,640 --> 00:03:12,809
that he spent more than<font color="#E5E5E5"> five</font><font color="#CCCCCC"> years</font>

84
00:03:09,900 --> 00:03:14,610
<font color="#E5E5E5">working on</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> and what I want to talk</font>

85
00:03:12,810 --> 00:03:16,380
<font color="#CCCCCC">about here</font><font color="#E5E5E5"> is that there is</font><font color="#CCCCCC"> one</font>

86
00:03:14,610 --> 00:03:18,840
<font color="#E5E5E5">community that</font><font color="#CCCCCC"> believes that there is</font>

87
00:03:16,380 --> 00:03:20,850
one solution<font color="#E5E5E5"> they have found but there</font>

88
00:03:18,840 --> 00:03:22,770
are other aspects and the issue<font color="#CCCCCC"> of what</font>

89
00:03:20,850 --> 00:03:24,930
<font color="#CCCCCC">does</font><font color="#E5E5E5"> trust mean goes pretty deep here</font>

90
00:03:22,770 --> 00:03:27,570
<font color="#E5E5E5">and let's look</font><font color="#CCCCCC"> at a couple</font><font color="#E5E5E5"> of examples</font>

91
00:03:24,930 --> 00:03:30,420
<font color="#CCCCCC">so this is from the GCC mailing list</font>

92
00:03:27,570 --> 00:03:33,480
from as early<font color="#CCCCCC"> as 2002 or somebody says</font>

93
00:03:30,420 --> 00:03:34,859
well look here's a small<font color="#CCCCCC"> cents</font><font color="#E5E5E5"> snippet</font>

94
00:03:33,480 --> 00:03:36,750
of code where I want to manipulate<font color="#CCCCCC"> a</font>

95
00:03:34,860 --> 00:03:40,620
password or<font color="#CCCCCC"> a password</font><font color="#E5E5E5"> hash in memory</font>

96
00:03:36,750 --> 00:03:43,620
and I want to you<font color="#E5E5E5"> know scrub the memory</font>

97
00:03:40,620 --> 00:03:45,150
before<font color="#CCCCCC"> I return and from the compilers</font>

98
00:03:43,620 --> 00:03:48,030
point of view the memory scrubbing

99
00:03:45,150 --> 00:03:50,130
operation the result of that is never

100
00:03:48,030 --> 00:03:52,709
used in computation anywhere so it's

101
00:03:50,130 --> 00:03:54,570
perfectly fine<font color="#E5E5E5"> to remove that to save</font>

102
00:03:52,709 --> 00:03:57,120
some load and store operations<font color="#CCCCCC"> just</font><font color="#E5E5E5"> from</font>

103
00:03:54,570 --> 00:03:59,130
a<font color="#E5E5E5"> performance point of view</font><font color="#CCCCCC"> ok and now</font>

104
00:03:57,120 --> 00:04:01,530
of course<font color="#CCCCCC"> this is because the compiler</font>

105
00:03:59,130 --> 00:04:02,850
doesn't<font color="#E5E5E5"> know the security intent of the</font>

106
00:04:01,530 --> 00:04:06,300
programmer<font color="#E5E5E5"> this is a well-known example</font>

107
00:04:02,850 --> 00:04:08,250
<font color="#E5E5E5">but</font><font color="#CCCCCC"> even there it took a long time and</font>

108
00:04:06,300 --> 00:04:10,530
<font color="#CCCCCC">still they're in</font><font color="#E5E5E5"> the clear agreement on</font>

109
00:04:08,250 --> 00:04:12,060
<font color="#E5E5E5">you know who should address this so if</font>

110
00:04:10,530 --> 00:04:14,820
you look there's a lot<font color="#E5E5E5"> of heated debate</font>

111
00:04:12,060 --> 00:04:17,880
<font color="#CCCCCC">right and</font><font color="#E5E5E5"> people with security concerns</font>

112
00:04:14,820 --> 00:04:19,500
<font color="#E5E5E5">have valid</font><font color="#CCCCCC"> points and people coming</font><font color="#E5E5E5"> from</font>

113
00:04:17,880 --> 00:04:23,250
<font color="#E5E5E5">the compiler point of view have valid</font>

114
00:04:19,500 --> 00:04:25,020
points<font color="#CCCCCC"> as well and what</font><font color="#E5E5E5"> we decided to do</font>

115
00:04:23,250 --> 00:04:26,550
is not actually to<font color="#E5E5E5"> take a position on</font>

116
00:04:25,020 --> 00:04:27,479
the debate but to say look there are two

117
00:04:26,550 --> 00:04:29,520
different<font color="#CCCCCC"> positions</font>

118
00:04:27,480 --> 00:04:31,440
here and there's a gap between<font color="#E5E5E5"> what they</font>

119
00:04:29,520 --> 00:04:33,780
<font color="#E5E5E5">believe the compiler should give you</font>

120
00:04:31,440 --> 00:04:34,530
right and let's study this gap very

121
00:04:33,780 --> 00:04:36,179
seriously

122
00:04:34,530 --> 00:04:37,979
right and<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is the gap between</font><font color="#E5E5E5"> the</font>

123
00:04:36,180 --> 00:04:41,940
correctness<font color="#E5E5E5"> and the security point of</font>

124
00:04:37,980 --> 00:04:44,190
<font color="#CCCCCC">view</font><font color="#E5E5E5"> that's what we were doing and more</font>

125
00:04:41,940 --> 00:04:46,980
generally we can ask the question<font color="#E5E5E5"> of can</font>

126
00:04:44,190 --> 00:04:49,469
a correctly designed<font color="#E5E5E5"> and even correctly</font>

127
00:04:46,980 --> 00:04:51,150
implemented compiler optimization<font color="#E5E5E5"> while</font>

128
00:04:49,470 --> 00:04:55,350
<font color="#E5E5E5">a it's some security guarantee you put</font>

129
00:04:51,150 --> 00:04:57,150
in your code<font color="#E5E5E5"> and if you look in the</font>

130
00:04:55,350 --> 00:04:58,980
literature<font color="#E5E5E5"> just for the example that I</font>

131
00:04:57,150 --> 00:05:01,320
<font color="#CCCCCC">gave you</font><font color="#E5E5E5"> it took a long time to have</font>

132
00:04:58,980 --> 00:05:03,570
reusable techniques<font color="#E5E5E5"> to prove correctness</font>

133
00:05:01,320 --> 00:05:05,670
of compiler optimizations<font color="#E5E5E5"> but in the</font>

134
00:05:03,570 --> 00:05:07,320
<font color="#E5E5E5">last few</font><font color="#CCCCCC"> years all these papers will</font>

135
00:05:05,670 --> 00:05:09,480
give you correctness<font color="#E5E5E5"> of the Dead Store</font>

136
00:05:07,320 --> 00:05:11,760
elimination<font color="#E5E5E5"> that I mentioned in the</font>

137
00:05:09,480 --> 00:05:13,860
beginning<font color="#CCCCCC"> ok so the answer to</font><font color="#E5E5E5"> this</font>

138
00:05:11,760 --> 00:05:15,690
question<font color="#CCCCCC"> is yes we</font><font color="#E5E5E5"> have an optimization</font>

139
00:05:13,860 --> 00:05:17,160
<font color="#E5E5E5">it has been correct</font><font color="#CCCCCC"> it has</font><font color="#E5E5E5"> been formally</font>

140
00:05:15,690 --> 00:05:19,320
<font color="#CCCCCC">verified it has been correctly</font>

141
00:05:17,160 --> 00:05:21,120
implemented<font color="#E5E5E5"> and it's clear</font><font color="#CCCCCC"> that it</font>

142
00:05:19,320 --> 00:05:23,730
<font color="#CCCCCC">widely it's some security guarantee</font><font color="#E5E5E5"> that</font>

143
00:05:21,120 --> 00:05:25,320
<font color="#E5E5E5">somebody wants</font><font color="#CCCCCC"> ok and this</font><font color="#E5E5E5"> is an</font>

144
00:05:23,730 --> 00:05:28,680
instance of<font color="#E5E5E5"> what</font><font color="#CCCCCC"> we call in the paper</font>

145
00:05:25,320 --> 00:05:30,599
the correctness<font color="#E5E5E5"> security</font><font color="#CCCCCC"> gap ok</font><font color="#E5E5E5"> but more</font>

146
00:05:28,680 --> 00:05:32,730
interestingly<font color="#E5E5E5"> what we wanted to then</font>

147
00:05:30,600 --> 00:05:34,680
understand is how prevalent is there so

148
00:05:32,730 --> 00:05:36,750
the example that<font color="#E5E5E5"> I gave you is on the</font>

149
00:05:34,680 --> 00:05:38,220
GCC<font color="#CCCCCC"> mail English</font><font color="#E5E5E5"> over</font><font color="#CCCCCC"> ten years ago</font><font color="#E5E5E5"> and</font>

150
00:05:36,750 --> 00:05:40,020
<font color="#E5E5E5">there are a couple of related examples</font>

151
00:05:38,220 --> 00:05:41,520
that are<font color="#CCCCCC"> well-known but</font><font color="#E5E5E5"> what are other</font>

152
00:05:40,020 --> 00:05:44,310
examples people<font color="#E5E5E5"> might not have thought</font>

153
00:05:41,520 --> 00:05:46,200
about<font color="#CCCCCC"> and more importantly it's all very</font>

154
00:05:44,310 --> 00:05:47,820
<font color="#CCCCCC">well</font><font color="#E5E5E5"> to say ok there is this and try to</font>

155
00:05:46,200 --> 00:05:49,590
play the blame game<font color="#CCCCCC"> but why does this</font>

156
00:05:47,820 --> 00:05:51,330
arise because<font color="#CCCCCC"> you know this</font><font color="#E5E5E5"> there's</font>

157
00:05:49,590 --> 00:05:53,760
<font color="#CCCCCC">something slightly</font><font color="#E5E5E5"> paradoxical in this</font>

158
00:05:51,330 --> 00:05:56,370
situation right<font color="#CCCCCC"> we have a</font><font color="#E5E5E5"> hard core</font>

159
00:05:53,760 --> 00:05:57,780
<font color="#E5E5E5">formally verified proof done within a</font>

160
00:05:56,370 --> 00:05:59,400
theorem prover that has been developed

161
00:05:57,780 --> 00:06:01,309
<font color="#E5E5E5">for many years and is</font><font color="#CCCCCC"> obviously</font><font color="#E5E5E5"> correct</font>

162
00:05:59,400 --> 00:06:03,239
<font color="#CCCCCC">but then there's our intuition of</font>

163
00:06:01,310 --> 00:06:07,110
semantics preservation that's being

164
00:06:03,240 --> 00:06:08,610
violated<font color="#E5E5E5"> here so what gives</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> so in the</font>

165
00:06:07,110 --> 00:06:12,570
<font color="#E5E5E5">paper we looked at a few</font><font color="#CCCCCC"> different gaps</font>

166
00:06:08,610 --> 00:06:14,970
so you might have code<font color="#CCCCCC"> that defends</font>

167
00:06:12,570 --> 00:06:16,950
against<font color="#E5E5E5"> memory related security issues</font>

168
00:06:14,970 --> 00:06:19,200
or against side channels and then we

169
00:06:16,950 --> 00:06:21,420
identified compiler optimizations<font color="#CCCCCC"> that</font>

170
00:06:19,200 --> 00:06:24,270
<font color="#CCCCCC">may violate</font><font color="#E5E5E5"> the security guarantees that</font>

171
00:06:21,420 --> 00:06:26,430
<font color="#E5E5E5">you have put in along those dimensions</font>

172
00:06:24,270 --> 00:06:27,960
<font color="#CCCCCC">ok and there</font><font color="#E5E5E5"> are also language specific</font>

173
00:06:26,430 --> 00:06:31,170
issues<font color="#CCCCCC"> of which we only look at</font>

174
00:06:27,960 --> 00:06:33,210
undefined<font color="#E5E5E5"> Ness in C and C++</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> and what</font>

175
00:06:31,170 --> 00:06:34,770
I will<font color="#E5E5E5"> do for the rest is just look at a</font>

176
00:06:33,210 --> 00:06:36,539
couple<font color="#CCCCCC"> of these examples</font><font color="#E5E5E5"> there</font><font color="#CCCCCC"> are more</font>

177
00:06:34,770 --> 00:06:38,479
in<font color="#E5E5E5"> the paper so you know if you find it</font>

178
00:06:36,540 --> 00:06:41,029
<font color="#CCCCCC">interesting please go and</font><font color="#E5E5E5"> read</font>

179
00:06:38,479 --> 00:06:43,998
so here's an example<font color="#E5E5E5"> where it's a very</font>

180
00:06:41,029 --> 00:06:46,129
<font color="#CCCCCC">toy example and it's deliberate</font><font color="#E5E5E5"> and I'll</font>

181
00:06:43,999 --> 00:06:49,969
come<font color="#CCCCCC"> back</font><font color="#E5E5E5"> to this point in a moment</font><font color="#CCCCCC"> but</font>

182
00:06:46,129 --> 00:06:52,129
you may write some code that<font color="#E5E5E5"> works in an</font>

183
00:06:49,969 --> 00:06:54,949
unsecure environment<font color="#CCCCCC"> and then all</font>

184
00:06:52,129 --> 00:06:56,509
computation<font color="#CCCCCC"> that is expected</font><font color="#E5E5E5"> to execute</font>

185
00:06:54,949 --> 00:06:57,949
in a secure<font color="#CCCCCC"> environment might be put</font>

186
00:06:56,509 --> 00:07:00,439
into<font color="#E5E5E5"> a separate</font><font color="#CCCCCC"> function that is called</font>

187
00:06:57,949 --> 00:07:02,919
<font color="#E5E5E5">at some point so what's happening here</font>

188
00:07:00,439 --> 00:07:05,059
<font color="#CCCCCC">is a coding pattern where you use</font>

189
00:07:02,919 --> 00:07:07,128
constructs<font color="#CCCCCC"> that the programming</font><font color="#E5E5E5"> language</font>

190
00:07:05,059 --> 00:07:09,409
gives you which is<font color="#E5E5E5"> basically function</font>

191
00:07:07,129 --> 00:07:11,900
boundaries<font color="#E5E5E5"> to enforce a trust boundary</font>

192
00:07:09,409 --> 00:07:13,819
<font color="#E5E5E5">right so a stack frame</font><font color="#CCCCCC"> now the nothing</font>

193
00:07:11,900 --> 00:07:15,739
stops the compiler<font color="#E5E5E5"> from trying to</font><font color="#CCCCCC"> inline</font>

194
00:07:13,819 --> 00:07:18,050
<font color="#E5E5E5">the</font><font color="#CCCCCC"> first function in which case the</font>

195
00:07:15,740 --> 00:07:19,879
data and computation<font color="#CCCCCC"> that</font><font color="#E5E5E5"> is assumed to</font>

196
00:07:18,050 --> 00:07:21,889
execute in a<font color="#E5E5E5"> secure stack frame and</font>

197
00:07:19,879 --> 00:07:23,960
environment will now be merged<font color="#E5E5E5"> with</font>

198
00:07:21,889 --> 00:07:26,120
stuff<font color="#CCCCCC"> that is not</font><font color="#E5E5E5"> assumed to expects</font>

199
00:07:23,960 --> 00:07:27,609
<font color="#CCCCCC">acute in a secure one okay so this is</font>

200
00:07:26,120 --> 00:07:30,139
<font color="#CCCCCC">just one</font><font color="#E5E5E5"> example</font>

201
00:07:27,610 --> 00:07:32,360
so another<font color="#E5E5E5"> category side channels</font>

202
00:07:30,139 --> 00:07:34,310
especially<font color="#E5E5E5"> in cryptographic code people</font>

203
00:07:32,360 --> 00:07:36,020
do things like write code using inline

204
00:07:34,310 --> 00:07:38,569
<font color="#E5E5E5">assembler</font><font color="#CCCCCC"> to make sure the timing</font>

205
00:07:36,020 --> 00:07:40,909
various operations<font color="#E5E5E5"> you know it doesn't</font>

206
00:07:38,569 --> 00:07:42,949
give<font color="#CCCCCC"> rise to a side</font><font color="#E5E5E5"> channel</font><font color="#CCCCCC"> so this is a</font>

207
00:07:40,909 --> 00:07:44,569
lot of<font color="#E5E5E5"> work but the</font><font color="#CCCCCC"> problem is that such</font>

208
00:07:42,949 --> 00:07:47,120
code is not always portable and it's

209
00:07:44,569 --> 00:07:49,879
very brittle<font color="#E5E5E5"> so when possible you would</font>

210
00:07:47,120 --> 00:07:51,770
like to use higher language coding

211
00:07:49,879 --> 00:07:53,330
<font color="#E5E5E5">provided that the semantics of the</font>

212
00:07:51,770 --> 00:07:56,180
language gives you some guarantees on

213
00:07:53,330 --> 00:07:59,060
<font color="#E5E5E5">timing so here's again a toy</font><font color="#CCCCCC"> example</font>

214
00:07:56,180 --> 00:08:00,800
where we have two<font color="#E5E5E5"> branches and on both</font>

215
00:07:59,060 --> 00:08:02,990
<font color="#CCCCCC">sides they have</font><font color="#E5E5E5"> the same structure</font>

216
00:08:00,800 --> 00:08:04,459
because you try<font color="#E5E5E5"> to preserve the timing</font>

217
00:08:02,990 --> 00:08:06,560
<font color="#E5E5E5">because they're very simple operations</font>

218
00:08:04,459 --> 00:08:08,719
<font color="#E5E5E5">and what might happen is in the else</font>

219
00:08:06,560 --> 00:08:10,459
<font color="#E5E5E5">branch the compiler might simplify and</font>

220
00:08:08,719 --> 00:08:12,560
say well there's a common expression

221
00:08:10,459 --> 00:08:15,529
occurring in all these<font color="#E5E5E5"> three we can</font>

222
00:08:12,560 --> 00:08:17,689
factor it<font color="#CCCCCC"> out</font><font color="#E5E5E5"> and then what happens is</font>

223
00:08:15,529 --> 00:08:19,789
<font color="#CCCCCC">you have simpler code but then the</font>

224
00:08:17,689 --> 00:08:21,649
timing<font color="#CCCCCC"> of the code is off now right so</font>

225
00:08:19,789 --> 00:08:23,628
<font color="#E5E5E5">more</font><font color="#CCCCCC"> generally you might write code with</font>

226
00:08:21,649 --> 00:08:26,899
a certain intent<font color="#E5E5E5"> compiler is not</font>

227
00:08:23,629 --> 00:08:28,520
guaranteed to preserve it undefined<font color="#E5E5E5"> Ness</font>

228
00:08:26,899 --> 00:08:30,349
there are many examples this<font color="#CCCCCC"> is one of</font>

229
00:08:28,520 --> 00:08:33,198
<font color="#CCCCCC">the better known cases this is actually</font>

230
00:08:30,349 --> 00:08:35,149
<font color="#E5E5E5">from the Linux kernel mailing list</font><font color="#CCCCCC"> sorry</font>

231
00:08:33,198 --> 00:08:37,458
this is from the Linux kernel<font color="#CCCCCC"> and you</font>

232
00:08:35,149 --> 00:08:39,349
see this<font color="#E5E5E5"> article</font><font color="#CCCCCC"> that you can</font><font color="#E5E5E5"> read about</font>

233
00:08:37,458 --> 00:08:41,779
<font color="#E5E5E5">it here but</font><font color="#CCCCCC"> what happened was somebody</font>

234
00:08:39,349 --> 00:08:44,660
<font color="#E5E5E5">actually patched a bug by introducing</font>

235
00:08:41,779 --> 00:08:47,510
<font color="#E5E5E5">the first the</font><font color="#CCCCCC"> Box in</font><font color="#E5E5E5"> the first line that</font>

236
00:08:44,660 --> 00:08:48,870
line<font color="#E5E5E5"> and what happens is now there is a</font>

237
00:08:47,510 --> 00:08:51,900
check

238
00:08:48,870 --> 00:08:52,620
if there's a check<font color="#E5E5E5"> that a pointer is not</font>

239
00:08:51,900 --> 00:08:54,209
null

240
00:08:52,620 --> 00:08:57,480
but then that pointer is actually

241
00:08:54,210 --> 00:09:00,900
dereference before so GCC concludes<font color="#CCCCCC"> that</font>

242
00:08:57,480 --> 00:09:04,260
you know if that pointer dereference

243
00:09:00,900 --> 00:09:06,300
didn't result in<font color="#E5E5E5"> a crash</font><font color="#CCCCCC"> then the second</font>

244
00:09:04,260 --> 00:09:08,040
check is not even<font color="#E5E5E5"> required so</font><font color="#CCCCCC"> it would</font>

245
00:09:06,300 --> 00:09:11,040
eliminate<font color="#CCCCCC"> that check and just return</font>

246
00:09:08,040 --> 00:09:14,219
that<font color="#CCCCCC"> ok so this situation</font><font color="#E5E5E5"> the bit subtle</font>

247
00:09:11,040 --> 00:09:15,599
because<font color="#E5E5E5"> from the compilers point of view</font>

248
00:09:14,220 --> 00:09:17,250
<font color="#CCCCCC">they're allowed to</font><font color="#E5E5E5"> do that because</font>

249
00:09:15,600 --> 00:09:19,500
<font color="#E5E5E5">dereferencing a null pointer is</font>

250
00:09:17,250 --> 00:09:21,270
undefined behavior<font color="#CCCCCC"> and compilers</font>

251
00:09:19,500 --> 00:09:24,150
interpret it in the<font color="#E5E5E5"> most opportunistic</font>

252
00:09:21,270 --> 00:09:26,189
<font color="#CCCCCC">way they can in this specific case you</font>

253
00:09:24,150 --> 00:09:27,840
can read in this article<font color="#CCCCCC"> combined with a</font>

254
00:09:26,190 --> 00:09:29,760
few other effects it leads<font color="#CCCCCC"> to a</font>

255
00:09:27,840 --> 00:09:33,000
privilege escalation bug in the<font color="#E5E5E5"> Linux</font>

256
00:09:29,760 --> 00:09:34,830
<font color="#CCCCCC">kernel ok and like in</font><font color="#E5E5E5"> this case it was</font>

257
00:09:33,000 --> 00:09:37,020
even an exploitable vulnerability<font color="#CCCCCC"> okay</font>

258
00:09:34,830 --> 00:09:38,520
<font color="#CCCCCC">and so this returns</font><font color="#E5E5E5"> to the point in our</font>

259
00:09:37,020 --> 00:09:40,920
paper and<font color="#CCCCCC"> in</font><font color="#E5E5E5"> this presentation I have a</font>

260
00:09:38,520 --> 00:09:42,540
lot<font color="#CCCCCC"> of toy examples</font><font color="#E5E5E5"> right by themselves</font>

261
00:09:40,920 --> 00:09:44,459
it's difficult to construct an exploit

262
00:09:42,540 --> 00:09:46,620
out of something<font color="#CCCCCC"> that small</font><font color="#E5E5E5"> but in a</font>

263
00:09:44,460 --> 00:09:48,450
context<font color="#E5E5E5"> where</font><font color="#CCCCCC"> a few other</font><font color="#E5E5E5"> dominoes might</font>

264
00:09:46,620 --> 00:09:51,480
fall<font color="#CCCCCC"> you may be actually able</font><font color="#E5E5E5"> to set up</font>

265
00:09:48,450 --> 00:09:52,860
<font color="#E5E5E5">an exploit and Linus himself has written</font>

266
00:09:51,480 --> 00:09:55,410
<font color="#E5E5E5">about this right this is one of his</font>

267
00:09:52,860 --> 00:09:58,320
biggest complaints with GCC<font color="#CCCCCC"> in the way</font>

268
00:09:55,410 --> 00:10:00,420
it's interpreting and modifying Cole in

269
00:09:58,320 --> 00:10:03,660
<font color="#E5E5E5">the presence of undefined</font><font color="#CCCCCC"> nests ok and</font>

270
00:10:00,420 --> 00:10:05,579
so again we have a gap between the way a

271
00:10:03,660 --> 00:10:07,410
compiler optimizer interprets<font color="#E5E5E5"> a</font>

272
00:10:05,580 --> 00:10:10,770
semantics and somebody carrying what

273
00:10:07,410 --> 00:10:12,209
security<font color="#E5E5E5"> might do that and in the</font>

274
00:10:10,770 --> 00:10:14,189
specific<font color="#CCCCCC"> case</font><font color="#E5E5E5"> of undefined nests that</font>

275
00:10:12,210 --> 00:10:15,780
<font color="#CCCCCC">was actually a cool</font><font color="#E5E5E5"> paper in 2013</font>

276
00:10:14,190 --> 00:10:17,700
concurrent to<font color="#E5E5E5"> the time we did the</font><font color="#CCCCCC"> work</font>

277
00:10:15,780 --> 00:10:19,500
<font color="#E5E5E5">but</font><font color="#CCCCCC"> it's quite different</font><font color="#E5E5E5"> in that they</font>

278
00:10:17,700 --> 00:10:22,050
have a tool and it finds<font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of such</font>

279
00:10:19,500 --> 00:10:24,540
bugs and it takes that one specific

280
00:10:22,050 --> 00:10:28,050
<font color="#E5E5E5">point and study it is studies it in</font>

281
00:10:24,540 --> 00:10:29,819
great depth<font color="#E5E5E5"> so let's look briefly at you</font>

282
00:10:28,050 --> 00:10:31,680
know where this<font color="#E5E5E5"> kind of comes from I've</font>

283
00:10:29,820 --> 00:10:33,270
given you a couple<font color="#CCCCCC"> of</font><font color="#E5E5E5"> examples</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> all</font>

284
00:10:31,680 --> 00:10:35,609
of<font color="#CCCCCC"> these are actually</font><font color="#E5E5E5"> things that have</font>

285
00:10:33,270 --> 00:10:37,740
formal correctness<font color="#E5E5E5"> proofs so what we</font>

286
00:10:35,610 --> 00:10:39,870
<font color="#E5E5E5">wanted to understand was what's going on</font>

287
00:10:37,740 --> 00:10:41,940
here why<font color="#E5E5E5"> can't I rely</font><font color="#CCCCCC"> on that</font>

288
00:10:39,870 --> 00:10:44,610
correctness proof to preserve the

289
00:10:41,940 --> 00:10:46,070
security<font color="#E5E5E5"> guarantee I put in my source</font><font color="#CCCCCC"> ok</font>

290
00:10:44,610 --> 00:10:48,600
and the main<font color="#CCCCCC"> observation is that</font>

291
00:10:46,070 --> 00:10:50,400
correctness proofs rely on some notion

292
00:10:48,600 --> 00:10:53,070
<font color="#CCCCCC">of preserving the behavior of</font><font color="#E5E5E5"> the</font>

293
00:10:50,400 --> 00:10:55,380
program<font color="#E5E5E5"> and the behavior is</font><font color="#CCCCCC"> defined with</font>

294
00:10:53,070 --> 00:10:57,570
respect to a notion<font color="#CCCCCC"> of execution</font><font color="#E5E5E5"> so let</font>

295
00:10:55,380 --> 00:10:59,250
<font color="#E5E5E5">me walk</font><font color="#CCCCCC"> through this abstracting as much</font>

296
00:10:57,570 --> 00:11:02,070
as<font color="#CCCCCC"> possible as I can</font>

297
00:10:59,250 --> 00:11:04,530
<font color="#E5E5E5">you know cement formal semantics issues</font>

298
00:11:02,070 --> 00:11:06,540
<font color="#E5E5E5">but here's a simple optimization where</font>

299
00:11:04,530 --> 00:11:09,600
you<font color="#E5E5E5"> replace a redundant variable and</font>

300
00:11:06,540 --> 00:11:11,550
<font color="#CCCCCC">just</font><font color="#E5E5E5"> return the result of incrementing a</font>

301
00:11:09,600 --> 00:11:14,550
variable and I'll walk<font color="#E5E5E5"> you</font><font color="#CCCCCC"> through what</font>

302
00:11:11,550 --> 00:11:16,500
<font color="#CCCCCC">the semantics might look like</font><font color="#E5E5E5"> so here is</font>

303
00:11:14,550 --> 00:11:17,939
a calling context you<font color="#E5E5E5"> have a call stack</font>

304
00:11:16,500 --> 00:11:19,710
<font color="#E5E5E5">and you have a program counter</font><font color="#CCCCCC"> of</font>

305
00:11:17,940 --> 00:11:23,220
variable X<font color="#E5E5E5"> that</font><font color="#CCCCCC"> is five</font><font color="#E5E5E5"> and a variable Y</font>

306
00:11:19,710 --> 00:11:26,040
that<font color="#CCCCCC"> it's ten and suppose you say y</font>

307
00:11:23,220 --> 00:11:27,870
sorry<font color="#E5E5E5"> X at Y is equal</font><font color="#CCCCCC"> to increment</font><font color="#E5E5E5"> of X</font>

308
00:11:26,040 --> 00:11:30,959
suppose<font color="#CCCCCC"> you do that then</font><font color="#E5E5E5"> what happens is</font>

309
00:11:27,870 --> 00:11:33,450
you<font color="#E5E5E5"> push</font><font color="#CCCCCC"> you know something on the call</font>

310
00:11:30,960 --> 00:11:34,920
stack<font color="#E5E5E5"> you have</font><font color="#CCCCCC"> a and B you increment</font><font color="#E5E5E5"> P</font>

311
00:11:33,450 --> 00:11:37,320
and then you<font color="#CCCCCC"> return it and that's what</font>

312
00:11:34,920 --> 00:11:39,719
you<font color="#E5E5E5"> get at the end okay this is in gory</font>

313
00:11:37,320 --> 00:11:42,750
detail walking through every state<font color="#CCCCCC"> of</font>

314
00:11:39,720 --> 00:11:44,670
<font color="#E5E5E5">the execution and if you take the</font>

315
00:11:42,750 --> 00:11:47,550
optimized code on the other<font color="#E5E5E5"> side what</font>

316
00:11:44,670 --> 00:11:49,770
<font color="#CCCCCC">we'll</font><font color="#E5E5E5"> have is that we just</font><font color="#CCCCCC"> have one step</font>

317
00:11:47,550 --> 00:11:52,050
in<font color="#E5E5E5"> the computation right and then you</font>

318
00:11:49,770 --> 00:11:53,850
increment<font color="#E5E5E5"> it and sort</font><font color="#CCCCCC"> of the essence of</font>

319
00:11:52,050 --> 00:11:56,189
<font color="#E5E5E5">these proofs is that you have a sort of</font>

320
00:11:53,850 --> 00:11:57,810
diamond here right<font color="#E5E5E5"> is that</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> doesn't</font>

321
00:11:56,190 --> 00:11:59,670
matter what<font color="#CCCCCC"> intermediate states you went</font>

322
00:11:57,810 --> 00:12:01,410
through<font color="#E5E5E5"> but at you begin and you start</font>

323
00:11:59,670 --> 00:12:02,790
in the same<font color="#E5E5E5"> state and this is the</font>

324
00:12:01,410 --> 00:12:03,870
essence of a compiler correctness

325
00:12:02,790 --> 00:12:06,120
argument<font color="#CCCCCC"> okay</font>

326
00:12:03,870 --> 00:12:07,680
that you could<font color="#E5E5E5"> take two different parts</font>

327
00:12:06,120 --> 00:12:08,970
one is<font color="#E5E5E5"> through the unoptimized code and</font>

328
00:12:07,680 --> 00:12:10,770
the other is through<font color="#E5E5E5"> the optimized code</font>

329
00:12:08,970 --> 00:12:12,660
<font color="#CCCCCC">and they'll give you</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> same result and</font>

330
00:12:10,770 --> 00:12:14,220
there are a<font color="#E5E5E5"> lot of proof techniques that</font>

331
00:12:12,660 --> 00:12:16,260
go by the<font color="#E5E5E5"> name</font><font color="#CCCCCC"> of simulation by</font>

332
00:12:14,220 --> 00:12:19,440
simulation logical relations and so<font color="#CCCCCC"> on</font>

333
00:12:16,260 --> 00:12:21,810
that<font color="#CCCCCC"> allow</font><font color="#E5E5E5"> you to do such reasoning</font><font color="#CCCCCC"> ok</font>

334
00:12:19,440 --> 00:12:24,680
and<font color="#E5E5E5"> so the main</font><font color="#CCCCCC"> observation I want to</font>

335
00:12:21,810 --> 00:12:26,280
have here is that when<font color="#E5E5E5"> you do</font>

336
00:12:24,680 --> 00:12:28,560
optimization the reason about

337
00:12:26,280 --> 00:12:31,110
correctness<font color="#E5E5E5"> we have some source code and</font>

338
00:12:28,560 --> 00:12:32,939
we<font color="#E5E5E5"> reason about</font><font color="#CCCCCC"> it with respect</font><font color="#E5E5E5"> to what</font>

339
00:12:31,110 --> 00:12:35,160
I<font color="#CCCCCC"> would</font><font color="#E5E5E5"> call the abstract machine which</font>

340
00:12:32,940 --> 00:12:36,839
is the machine with respect to which<font color="#CCCCCC"> the</font>

341
00:12:35,160 --> 00:12:39,329
programming language semantics is

342
00:12:36,839 --> 00:12:42,420
defined but when you reason<font color="#CCCCCC"> about</font>

343
00:12:39,330 --> 00:12:44,040
exploits and vulnerabilities<font color="#CCCCCC"> you don't</font>

344
00:12:42,420 --> 00:12:45,750
<font color="#E5E5E5">reason about some abstract</font><font color="#CCCCCC"> machine it</font>

345
00:12:44,040 --> 00:12:47,969
actually<font color="#E5E5E5"> runs in a concrete machine in a</font>

346
00:12:45,750 --> 00:12:50,100
concrete operating system so there's a

347
00:12:47,970 --> 00:12:52,740
different machine here<font color="#E5E5E5"> and there's a</font>

348
00:12:50,100 --> 00:12:56,220
different reasoning that's going on<font color="#CCCCCC"> okay</font>

349
00:12:52,740 --> 00:12:58,140
<font color="#E5E5E5">and in particular what's happening is</font>

350
00:12:56,220 --> 00:13:00,300
that<font color="#E5E5E5"> the attacker is reasoning with a</font>

351
00:12:58,140 --> 00:13:03,030
machine<font color="#E5E5E5"> that has artifacts like</font>

352
00:13:00,300 --> 00:13:05,310
persistence in memory timing and so on

353
00:13:03,030 --> 00:13:07,140
which are not even<font color="#E5E5E5"> captured by the</font>

354
00:13:05,310 --> 00:13:09,719
machine<font color="#CCCCCC"> that is</font><font color="#E5E5E5"> used when defining</font>

355
00:13:07,140 --> 00:13:11,699
<font color="#E5E5E5">language semantics and therefore these</font>

356
00:13:09,720 --> 00:13:12,450
artifacts don't even exist<font color="#E5E5E5"> at the level</font>

357
00:13:11,700 --> 00:13:17,400
of<font color="#E5E5E5"> the</font>

358
00:13:12,450 --> 00:13:19,770
<font color="#E5E5E5">okay so one could ask does this mean</font>

359
00:13:17,400 --> 00:13:22,020
<font color="#CCCCCC">that 40 years of work in compiler</font>

360
00:13:19,770 --> 00:13:23,939
correctness and so on<font color="#E5E5E5"> are completely</font>

361
00:13:22,020 --> 00:13:25,350
useless<font color="#E5E5E5"> right is there nothing that we</font>

362
00:13:23,940 --> 00:13:28,290
have gained<font color="#E5E5E5"> from it because we've been</font>

363
00:13:25,350 --> 00:13:31,140
<font color="#CCCCCC">using the</font><font color="#E5E5E5"> wrong machine model so let me</font>

364
00:13:28,290 --> 00:13:32,550
try<font color="#CCCCCC"> to redo that proof</font><font color="#E5E5E5"> using</font><font color="#CCCCCC"> a slightly</font>

365
00:13:31,140 --> 00:13:34,199
different machine model and the only

366
00:13:32,550 --> 00:13:36,089
difference I've made here is<font color="#CCCCCC"> that</font><font color="#E5E5E5"> in</font>

367
00:13:34,200 --> 00:13:37,710
<font color="#E5E5E5">practice we don't actually have a stack</font>

368
00:13:36,089 --> 00:13:40,020
that<font color="#CCCCCC"> works like</font><font color="#E5E5E5"> a stack data structure</font>

369
00:13:37,710 --> 00:13:42,060
<font color="#CCCCCC">but</font><font color="#E5E5E5"> we have memory and</font><font color="#CCCCCC"> we have a pointer</font>

370
00:13:40,020 --> 00:13:43,770
right<font color="#E5E5E5"> so let me just mimic that here</font>

371
00:13:42,060 --> 00:13:46,020
with the red box that<font color="#E5E5E5"> is saying where</font>

372
00:13:43,770 --> 00:13:47,279
the stack pointer might be everything

373
00:13:46,020 --> 00:13:49,319
else is the<font color="#CCCCCC"> same</font><font color="#E5E5E5"> as what we had before</font>

374
00:13:47,279 --> 00:13:51,839
<font color="#CCCCCC">the only</font><font color="#E5E5E5"> difference is</font><font color="#CCCCCC"> that in the</font><font color="#E5E5E5"> final</font>

375
00:13:49,320 --> 00:13:52,980
state<font color="#E5E5E5"> the pointer has gone down but you</font>

376
00:13:51,839 --> 00:13:55,500
<font color="#E5E5E5">know the previous</font><font color="#CCCCCC"> stack frame would</font>

377
00:13:52,980 --> 00:13:57,510
still be there<font color="#E5E5E5"> okay and now what</font><font color="#CCCCCC"> happens</font>

378
00:13:55,500 --> 00:14:00,710
is if<font color="#CCCCCC"> I compare the code before and</font>

379
00:13:57,510 --> 00:14:04,319
after the optimization<font color="#E5E5E5"> we can see that</font>

380
00:14:00,710 --> 00:14:08,160
even<font color="#CCCCCC"> though I have the same state at the</font>

381
00:14:04,320 --> 00:14:11,700
<font color="#CCCCCC">end</font><font color="#E5E5E5"> when I return the part that is</font><font color="#CCCCCC"> not</font>

382
00:14:08,160 --> 00:14:14,279
<font color="#E5E5E5">visible is actually different</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> so</font>

383
00:14:11,700 --> 00:14:17,940
if you use a different<font color="#CCCCCC"> machine model</font><font color="#E5E5E5"> you</font>

384
00:14:14,279 --> 00:14:20,100
can see<font color="#E5E5E5"> that the final states that you</font>

385
00:14:17,940 --> 00:14:23,400
would get<font color="#E5E5E5"> are different and so</font><font color="#CCCCCC"> you would</font>

386
00:14:20,100 --> 00:14:25,529
not<font color="#E5E5E5"> be able to complete the proof and so</font>

387
00:14:23,400 --> 00:14:27,660
actually<font color="#E5E5E5"> the good news is</font><font color="#CCCCCC"> that if we</font>

388
00:14:25,529 --> 00:14:30,240
<font color="#E5E5E5">look at this picture</font><font color="#CCCCCC"> and you</font><font color="#E5E5E5"> know we</font>

389
00:14:27,660 --> 00:14:32,520
tried a few<font color="#CCCCCC"> other examples so there</font><font color="#E5E5E5"> are</font>

390
00:14:30,240 --> 00:14:33,930
these<font color="#E5E5E5"> sort of inputs to your proof there</font>

391
00:14:32,520 --> 00:14:36,209
are the programming language and<font color="#E5E5E5"> the</font>

392
00:14:33,930 --> 00:14:38,550
<font color="#E5E5E5">machine semantics and then there's the</font>

393
00:14:36,209 --> 00:14:40,349
proof technique itself<font color="#E5E5E5"> and what I did</font>

394
00:14:38,550 --> 00:14:41,640
<font color="#E5E5E5">here was I use the same proof technique</font>

395
00:14:40,350 --> 00:14:43,860
I<font color="#CCCCCC"> walked through the</font><font color="#E5E5E5"> same thing and it</font>

396
00:14:41,640 --> 00:14:45,300
didn't<font color="#CCCCCC"> work out so the good news is that</font>

397
00:14:43,860 --> 00:14:47,370
it<font color="#E5E5E5"> is not our proof techniques that are</font>

398
00:14:45,300 --> 00:14:49,349
<font color="#E5E5E5">broken the proof techniques are all fine</font>

399
00:14:47,370 --> 00:14:51,540
what we need is better more accurate

400
00:14:49,350 --> 00:14:53,100
machine models right<font color="#E5E5E5"> and if we can</font>

401
00:14:51,540 --> 00:14:56,040
change<font color="#CCCCCC"> our machine models that we use in</font>

402
00:14:53,100 --> 00:14:57,540
the proof<font color="#E5E5E5"> maybe we can you know make</font>

403
00:14:56,040 --> 00:15:00,930
clearer conclusions with respect to

404
00:14:57,540 --> 00:15:03,480
<font color="#E5E5E5">security so</font><font color="#CCCCCC"> I talked about you know</font>

405
00:15:00,930 --> 00:15:06,540
<font color="#E5E5E5">these</font><font color="#CCCCCC"> areas</font><font color="#E5E5E5"> and there is the paper from</font>

406
00:15:03,480 --> 00:15:08,279
<font color="#E5E5E5">the group at MIT from s OSP 2013 that</font>

407
00:15:06,540 --> 00:15:11,189
very seriously studies the undefined

408
00:15:08,279 --> 00:15:13,230
<font color="#CCCCCC">Ness but</font><font color="#E5E5E5"> basically in every case here</font>

409
00:15:11,190 --> 00:15:15,029
<font color="#E5E5E5">there is a relationship between the</font>

410
00:15:13,230 --> 00:15:17,490
optimization and<font color="#E5E5E5"> its impact on security</font>

411
00:15:15,029 --> 00:15:19,529
<font color="#CCCCCC">and there's a lot</font><font color="#E5E5E5"> to study over there</font>

412
00:15:17,490 --> 00:15:22,110
right so<font color="#E5E5E5"> specifically we can</font><font color="#CCCCCC"> have</font>

413
00:15:19,529 --> 00:15:24,060
testing tools in all these cases<font color="#E5E5E5"> to find</font>

414
00:15:22,110 --> 00:15:25,990
out if the optimization<font color="#E5E5E5"> modify the</font>

415
00:15:24,060 --> 00:15:28,420
security guarantee in the source

416
00:15:25,990 --> 00:15:30,820
another thing which we<font color="#E5E5E5"> believe has</font><font color="#CCCCCC"> to be</font>

417
00:15:28,420 --> 00:15:32,680
<font color="#E5E5E5">studied</font><font color="#CCCCCC"> in the future is currently we</font>

418
00:15:30,820 --> 00:15:36,610
have<font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of work developing and</font>

419
00:15:32,680 --> 00:15:38,620
writing<font color="#E5E5E5"> down</font><font color="#CCCCCC"> models abstract semantic</font>

420
00:15:36,610 --> 00:15:40,000
machines right and this is not<font color="#E5E5E5"> just if</font>

421
00:15:38,620 --> 00:15:41,430
<font color="#E5E5E5">you want</font><font color="#CCCCCC"> to do correctness proof</font><font color="#E5E5E5"> even</font><font color="#CCCCCC"> if</font>

422
00:15:40,000 --> 00:15:44,350
you do things<font color="#E5E5E5"> like symbolic execution</font>

423
00:15:41,430 --> 00:15:45,969
<font color="#E5E5E5">right you need</font><font color="#CCCCCC"> a notion</font><font color="#E5E5E5"> of a machine</font>

424
00:15:44,350 --> 00:15:47,680
<font color="#E5E5E5">that you use and now if you want to use</font>

425
00:15:45,970 --> 00:15:49,510
<font color="#E5E5E5">symbolic execution to find these kind of</font>

426
00:15:47,680 --> 00:15:52,120
issues<font color="#CCCCCC"> you need</font><font color="#E5E5E5"> to capture some</font>

427
00:15:49,510 --> 00:15:53,050
semantics of<font color="#E5E5E5"> the machine and if you want</font>

428
00:15:52,120 --> 00:15:55,150
to do things like<font color="#CCCCCC"> side-channel attacks</font>

429
00:15:53,050 --> 00:15:57,099
<font color="#CCCCCC">you need timing in your machine so you</font>

430
00:15:55,150 --> 00:16:00,699
need a<font color="#E5E5E5"> lot of different machine models</font>

431
00:15:57,100 --> 00:16:02,950
and finally you know correctness<font color="#E5E5E5"> proofs</font>

432
00:16:00,700 --> 00:16:05,020
are described in<font color="#E5E5E5"> terms of well is this</font>

433
00:16:02,950 --> 00:16:06,790
optimization correct<font color="#E5E5E5"> but we might more</font>

434
00:16:05,020 --> 00:16:09,010
precisely want to ask is this

435
00:16:06,790 --> 00:16:12,490
optimization<font color="#E5E5E5"> oblivious</font><font color="#CCCCCC"> to an attacker</font>

436
00:16:09,010 --> 00:16:14,650
<font color="#CCCCCC">who's looking at a</font><font color="#E5E5E5"> machine right and the</font>

437
00:16:12,490 --> 00:16:17,230
point is this is a question that<font color="#E5E5E5"> would</font>

438
00:16:14,650 --> 00:16:19,449
strictly generalize in a precise sense

439
00:16:17,230 --> 00:16:21,220
the way compiler correctness<font color="#CCCCCC"> is done</font>

440
00:16:19,450 --> 00:16:23,140
today<font color="#E5E5E5"> because</font><font color="#CCCCCC"> current compiler</font>

441
00:16:21,220 --> 00:16:24,580
correctness is just code in a<font color="#CCCCCC"> specific</font>

442
00:16:23,140 --> 00:16:27,699
machine<font color="#E5E5E5"> with a specific notion of</font>

443
00:16:24,580 --> 00:16:29,170
observation<font color="#E5E5E5"> and one thing we observed in</font>

444
00:16:27,700 --> 00:16:31,390
<font color="#E5E5E5">the paper is</font><font color="#CCCCCC"> that there is a strong</font>

445
00:16:29,170 --> 00:16:33,630
analogy<font color="#E5E5E5"> to the situation with relaxed</font>

446
00:16:31,390 --> 00:16:35,949
<font color="#E5E5E5">memory models at some point you had</font>

447
00:16:33,630 --> 00:16:37,570
architecture that had<font color="#E5E5E5"> multiple cores and</font>

448
00:16:35,950 --> 00:16:40,060
then<font color="#E5E5E5"> you had relaxed memory models and</font>

449
00:16:37,570 --> 00:16:42,090
then they realized that<font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

450
00:16:40,060 --> 00:16:44,829
optimizations or<font color="#CCCCCC"> analyses</font><font color="#E5E5E5"> in compilers</font>

451
00:16:42,090 --> 00:16:46,840
<font color="#E5E5E5">might not give you the same soundness on</font>

452
00:16:44,830 --> 00:16:48,730
these new memory models<font color="#E5E5E5"> and then a lot</font>

453
00:16:46,840 --> 00:16:50,710
<font color="#E5E5E5">of work was done</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> having testing tools</font>

454
00:16:48,730 --> 00:16:53,640
to figure<font color="#E5E5E5"> out if there is an error on</font>

455
00:16:50,710 --> 00:16:56,410
having a notion<font color="#CCCCCC"> like memory barriers</font><font color="#E5E5E5"> and</font>

456
00:16:53,640 --> 00:16:57,910
you know<font color="#E5E5E5"> doing new formal work in a</font>

457
00:16:56,410 --> 00:17:01,569
<font color="#E5E5E5">similar way there's a whole research</font>

458
00:16:57,910 --> 00:17:03,430
<font color="#CCCCCC">program we believe</font><font color="#E5E5E5"> to pursue to you know</font>

459
00:17:01,570 --> 00:17:05,380
study<font color="#CCCCCC"> describe to identify when these</font>

460
00:17:03,430 --> 00:17:06,970
kind<font color="#E5E5E5"> of bugs happen to introduce</font>

461
00:17:05,380 --> 00:17:08,770
barriers to fix them<font color="#CCCCCC"> because you don't</font>

462
00:17:06,970 --> 00:17:10,990
<font color="#CCCCCC">want to</font><font color="#E5E5E5"> turn off all optimizations in</font>

463
00:17:08,770 --> 00:17:14,920
general<font color="#E5E5E5"> to develop new machine models</font>

464
00:17:10,990 --> 00:17:17,170
and so on<font color="#E5E5E5"> so that's more or</font><font color="#CCCCCC"> less our</font>

465
00:17:14,920 --> 00:17:19,120
position on this and you<font color="#E5E5E5"> know I think</font>

466
00:17:17,170 --> 00:17:21,450
<font color="#E5E5E5">that's a good point to stop and take</font>

467
00:17:19,119 --> 00:17:21,449
<font color="#CCCCCC">questions</font>

468
00:17:30,400 --> 00:17:52,549
somebody have a microphone thanks<font color="#E5E5E5"> for</font>

469
00:17:46,730 --> 00:17:55,250
<font color="#E5E5E5">the talk</font><font color="#CCCCCC"> so near the end you said</font><font color="#E5E5E5"> is the</font>

470
00:17:52,549 --> 00:17:57,610
optimization observable to an attacker

471
00:17:55,250 --> 00:18:00,110
who can monitor the<font color="#E5E5E5"> machine right and</font>

472
00:17:57,610 --> 00:18:04,189
I'm a<font color="#E5E5E5"> little worried about that because</font>

473
00:18:00,110 --> 00:18:06,770
I can't imagine<font color="#E5E5E5"> an optimization</font><font color="#CCCCCC"> that</font>

474
00:18:04,190 --> 00:18:11,120
would not be<font color="#E5E5E5"> observable to an attacker</font>

475
00:18:06,770 --> 00:18:16,039
monitoring the machine if you<font color="#CCCCCC"> have if</font>

476
00:18:11,120 --> 00:18:19,610
<font color="#CCCCCC">you if you model the</font><font color="#E5E5E5"> machine with high</font>

477
00:18:16,039 --> 00:18:22,549
fidelity<font color="#E5E5E5"> right like if the attacker</font>

478
00:18:19,610 --> 00:18:24,350
really can look at arbitrary<font color="#E5E5E5"> memory and</font>

479
00:18:22,549 --> 00:18:27,470
the program counter<font color="#CCCCCC"> and things like</font><font color="#E5E5E5"> that</font>

480
00:18:24,350 --> 00:18:29,570
<font color="#CCCCCC">it it seems unbelievable to me that</font>

481
00:18:27,470 --> 00:18:32,029
there could be an optimization<font color="#CCCCCC"> that does</font>

482
00:18:29,570 --> 00:18:35,090
<font color="#E5E5E5">not</font><font color="#CCCCCC"> change</font><font color="#E5E5E5"> the yes okay so I was using</font>

483
00:18:32,029 --> 00:18:37,960
the term<font color="#E5E5E5"> observable</font><font color="#CCCCCC"> an attacker</font><font color="#E5E5E5"> actually</font>

484
00:18:35,090 --> 00:18:40,250
<font color="#CCCCCC">in a very</font><font color="#E5E5E5"> in a</font><font color="#CCCCCC"> very formal sense meaning</font>

485
00:18:37,960 --> 00:18:43,850
<font color="#E5E5E5">not an attacker like us and not an</font>

486
00:18:40,250 --> 00:18:45,740
<font color="#E5E5E5">actual</font><font color="#CCCCCC"> machine but</font><font color="#E5E5E5"> I you could assume</font>

487
00:18:43,850 --> 00:18:47,719
you know the same<font color="#CCCCCC"> way you do attacker</font>

488
00:18:45,740 --> 00:18:49,130
correctness proofs<font color="#E5E5E5"> or security protocols</font>

489
00:18:47,720 --> 00:18:51,710
where you say there<font color="#E5E5E5"> are certain things</font>

490
00:18:49,130 --> 00:18:53,120
an attacker can and cannot do and<font color="#E5E5E5"> there</font>

491
00:18:51,710 --> 00:18:54,620
<font color="#E5E5E5">are certain things in attacker can and</font>

492
00:18:53,120 --> 00:18:56,178
cannot observe<font color="#CCCCCC"> right</font><font color="#E5E5E5"> but one of</font><font color="#CCCCCC"> them so</font>

493
00:18:54,620 --> 00:18:57,678
in this case I would<font color="#CCCCCC"> say</font><font color="#E5E5E5"> there's only</font>

494
00:18:56,179 --> 00:19:00,559
some part<font color="#E5E5E5"> of the state of</font><font color="#CCCCCC"> the machine</font>

495
00:18:57,679 --> 00:19:03,140
<font color="#CCCCCC">that</font><font color="#E5E5E5"> the attacker can observe right so</font>

496
00:19:00,559 --> 00:19:05,779
when you save in high<font color="#CCCCCC"> morality sorry</font><font color="#E5E5E5"> but</font>

497
00:19:03,140 --> 00:19:07,610
it included memory it included memory

498
00:19:05,779 --> 00:19:10,190
but it doesn't have<font color="#E5E5E5"> to include the</font>

499
00:19:07,610 --> 00:19:12,649
entire memory<font color="#E5E5E5"> right it doesn't</font><font color="#CCCCCC"> have to</font>

500
00:19:10,190 --> 00:19:14,090
<font color="#CCCCCC">include the entire memory everywhere for</font>

501
00:19:12,649 --> 00:19:15,918
example you<font color="#E5E5E5"> could say you can observe</font>

502
00:19:14,090 --> 00:19:17,959
the top of the stack or<font color="#E5E5E5"> the top and</font>

503
00:19:15,919 --> 00:19:19,909
<font color="#CCCCCC">everything before</font><font color="#E5E5E5"> but not you know</font>

504
00:19:17,960 --> 00:19:21,860
whatever<font color="#E5E5E5"> is actually on the stack so so</font>

505
00:19:19,909 --> 00:19:23,600
that's<font color="#E5E5E5"> that's what I mean</font>

506
00:19:21,860 --> 00:19:26,000
in<font color="#E5E5E5"> general what you're saying is</font><font color="#CCCCCC"> right</font>

507
00:19:23,600 --> 00:19:27,439
but you<font color="#CCCCCC"> know that</font><font color="#E5E5E5"> that also leads you to</font>

508
00:19:26,000 --> 00:19:29,750
a situation<font color="#E5E5E5"> where you can't do any</font>

509
00:19:27,440 --> 00:19:31,760
optimizations right right<font color="#E5E5E5"> exactly so</font>

510
00:19:29,750 --> 00:19:34,970
<font color="#E5E5E5">what I was trying</font><font color="#CCCCCC"> to get</font><font color="#E5E5E5"> up maybe is</font>

511
00:19:31,760 --> 00:19:37,460
<font color="#E5E5E5">like a distinction between like some</font>

512
00:19:34,970 --> 00:19:41,210
states of the machine

513
00:19:37,460 --> 00:19:44,480
it does<font color="#E5E5E5"> like if the attacker sees</font><font color="#CCCCCC"> it's</font>

514
00:19:41,210 --> 00:19:47,630
in state<font color="#E5E5E5"> a</font><font color="#CCCCCC"> versus state</font><font color="#E5E5E5"> B that's not a</font>

515
00:19:44,480 --> 00:19:50,750
<font color="#E5E5E5">security problem and some differences it</font>

516
00:19:47,630 --> 00:19:53,860
is<font color="#E5E5E5"> a security problem and I think that's</font>

517
00:19:50,750 --> 00:19:56,900
what needs<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be modeled that right so</font>

518
00:19:53,860 --> 00:19:59,929
<font color="#E5E5E5">analyzing don't</font><font color="#CCCCCC"> disguise</font><font color="#E5E5E5"> way the</font>

519
00:19:56,900 --> 00:20:02,540
<font color="#CCCCCC">security critical bits so actually when</font>

520
00:19:59,930 --> 00:20:05,210
you say you know<font color="#E5E5E5"> that is not a problem</font>

521
00:20:02,540 --> 00:20:06,740
why<font color="#E5E5E5"> is it not a problem so there is some</font>

522
00:20:05,210 --> 00:20:08,750
<font color="#CCCCCC">aspect of the</font><font color="#E5E5E5"> states that's irrelevant</font>

523
00:20:06,740 --> 00:20:11,360
to<font color="#E5E5E5"> any problem that you care about</font><font color="#CCCCCC"> right</font>

524
00:20:08,750 --> 00:20:13,340
and I would<font color="#CCCCCC"> say that's</font><font color="#E5E5E5"> part of what you</font>

525
00:20:11,360 --> 00:20:16,100
<font color="#E5E5E5">don't need to observe and I would factor</font>

526
00:20:13,340 --> 00:20:25,129
<font color="#E5E5E5">that into the observation</font><font color="#CCCCCC"> okay good</font>

527
00:20:16,100 --> 00:20:27,649
<font color="#CCCCCC">Thanks so it seems the lot</font><font color="#E5E5E5"> of the</font>

528
00:20:25,130 --> 00:20:30,500
problems that you<font color="#E5E5E5"> described come from</font>

529
00:20:27,650 --> 00:20:34,190
the semantics<font color="#CCCCCC"> of C and C++ not matching</font>

530
00:20:30,500 --> 00:20:36,950
what<font color="#E5E5E5"> programmers think and possibly</font>

531
00:20:34,190 --> 00:20:39,080
instead of trying<font color="#CCCCCC"> to modify</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> machine</font>

532
00:20:36,950 --> 00:20:40,820
<font color="#E5E5E5">model what you can do is try to figure</font>

533
00:20:39,080 --> 00:20:43,399
<font color="#E5E5E5">out what programmers actually think the</font>

534
00:20:40,820 --> 00:20:45,560
semantics<font color="#E5E5E5"> is C and C++ are and have a</font>

535
00:20:43,400 --> 00:20:47,930
compiler<font color="#E5E5E5"> that tries to respect those and</font>

536
00:20:45,560 --> 00:20:49,750
<font color="#CCCCCC">say the strict language standard how</font>

537
00:20:47,930 --> 00:20:53,330
much benefit you think that would have

538
00:20:49,750 --> 00:20:56,660
so I mean<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> not strictly true for</font>

539
00:20:53,330 --> 00:20:59,330
all the<font color="#CCCCCC"> optimizations so that's</font><font color="#E5E5E5"> true for</font>

540
00:20:56,660 --> 00:21:01,430
issues like<font color="#E5E5E5"> undefined Ness right where</font>

541
00:20:59,330 --> 00:21:03,260
<font color="#E5E5E5">people might assume</font><font color="#CCCCCC"> different things</font>

542
00:21:01,430 --> 00:21:05,810
happen when<font color="#E5E5E5"> something's undefined but if</font>

543
00:21:03,260 --> 00:21:09,980
you look at the the dead code case I max

544
00:21:05,810 --> 00:21:12,860
out something in memory<font color="#E5E5E5"> and so you know</font>

545
00:21:09,980 --> 00:21:15,080
is<font color="#CCCCCC"> is the result of calling</font><font color="#E5E5E5"> a function</font>

546
00:21:12,860 --> 00:21:16,850
<font color="#E5E5E5">the actual value or should the</font>

547
00:21:15,080 --> 00:21:18,470
programmer suddenly start to<font color="#CCCCCC"> boovie</font><font color="#E5E5E5"> I</font>

548
00:21:16,850 --> 00:21:19,969
don't even think it's<font color="#CCCCCC"> true that most</font>

549
00:21:18,470 --> 00:21:22,790
<font color="#E5E5E5">programmers would believe that</font><font color="#CCCCCC"> when I</font>

550
00:21:19,970 --> 00:21:24,860
call some function my result is the

551
00:21:22,790 --> 00:21:28,310
entire memory<font color="#E5E5E5"> state that persitz after I</font>

552
00:21:24,860 --> 00:21:32,629
<font color="#CCCCCC">call that</font><font color="#E5E5E5"> function right so I would</font>

553
00:21:28,310 --> 00:21:34,070
<font color="#CCCCCC">actually disagree there or I don't</font><font color="#E5E5E5"> even</font>

554
00:21:32,630 --> 00:21:35,900
<font color="#CCCCCC">think that most programmers would have</font>

555
00:21:34,070 --> 00:21:39,350
an agreement on what's happening there

556
00:21:35,900 --> 00:21:41,120
right<font color="#CCCCCC"> so</font><font color="#E5E5E5"> in very specific</font><font color="#CCCCCC"> contexts</font><font color="#E5E5E5"> you</font>

557
00:21:39,350 --> 00:21:44,899
care about the memory state not in

558
00:21:41,120 --> 00:21:47,860
general<font color="#CCCCCC"> be interesting to see what can</font>

559
00:21:44,900 --> 00:21:54,460
be<font color="#E5E5E5"> done</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> kind of</font>

560
00:21:47,860 --> 00:21:58,959
<font color="#CCCCCC">of approach versus the other yes any</font>

561
00:21:54,460 --> 00:22:00,970
other questions<font color="#CCCCCC"> I actually had one yeah</font>

562
00:21:58,960 --> 00:22:03,010
your observation<font color="#CCCCCC"> about side effects</font>

563
00:22:00,970 --> 00:22:06,330
<font color="#E5E5E5">particularly you</font><font color="#CCCCCC"> know hit home I noticed</font>

564
00:22:03,010 --> 00:22:08,200
<font color="#CCCCCC">how you know the the the the the second</font>

565
00:22:06,330 --> 00:22:10,030
computational model that you introduced

566
00:22:08,200 --> 00:22:11,260
was actually<font color="#E5E5E5"> tracking the side effects</font>

567
00:22:10,030 --> 00:22:13,899
in the you know<font color="#E5E5E5"> in the state</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

568
00:22:11,260 --> 00:22:15,700
variables<font color="#CCCCCC"> and you know when I</font><font color="#E5E5E5"> was</font>

569
00:22:13,900 --> 00:22:17,350
<font color="#E5E5E5">talking earlier about parsing being you</font>

570
00:22:15,700 --> 00:22:19,990
know a type construction operation that

571
00:22:17,350 --> 00:22:22,510
eliminates strings and and introduces

572
00:22:19,990 --> 00:22:24,190
some type the thing I didn't say<font color="#E5E5E5"> because</font>

573
00:22:22,510 --> 00:22:26,530
I tend<font color="#E5E5E5"> to be I tend to think like a</font>

574
00:22:24,190 --> 00:22:29,530
functional programmer is you want that

575
00:22:26,530 --> 00:22:31,270
<font color="#E5E5E5">function to be pure</font><font color="#CCCCCC"> you know</font><font color="#E5E5E5"> you want it</font>

576
00:22:29,530 --> 00:22:33,280
<font color="#E5E5E5">to not</font><font color="#CCCCCC"> introduce side effects you know</font>

577
00:22:31,270 --> 00:22:34,900
what you want it to<font color="#CCCCCC"> not</font><font color="#E5E5E5"> you know it</font>

578
00:22:33,280 --> 00:22:36,310
should<font color="#E5E5E5"> not go and jump to some other</font>

579
00:22:34,900 --> 00:22:37,780
region<font color="#E5E5E5"> of</font><font color="#CCCCCC"> memory and read the shell code</font>

580
00:22:36,310 --> 00:22:39,100
that's been<font color="#E5E5E5"> inserted by a previous you</font>

581
00:22:37,780 --> 00:22:41,470
<font color="#E5E5E5">know by previous</font><font color="#CCCCCC"> thing so what come on</font>

582
00:22:39,100 --> 00:22:43,510
<font color="#E5E5E5">what I'm wondering is is anybody taking</font>

583
00:22:41,470 --> 00:22:52,450
a look at<font color="#E5E5E5"> compilers from an effect</font>

584
00:22:43,510 --> 00:22:55,420
<font color="#E5E5E5">systems perspective like I mean effect</font>

585
00:22:52,450 --> 00:22:56,740
systems as as you know<font color="#E5E5E5"> the</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> analogy</font>

586
00:22:55,420 --> 00:22:59,740
to<font color="#E5E5E5"> type systems but studying the side</font>

587
00:22:56,740 --> 00:23:01,360
<font color="#E5E5E5">effects of computation</font><font color="#CCCCCC"> I mean that may</font>

588
00:22:59,740 --> 00:23:02,740
<font color="#E5E5E5">just that that may just be</font><font color="#CCCCCC"> an out of</font><font color="#E5E5E5"> the</font>

589
00:23:01,360 --> 00:23:03,760
you know<font color="#E5E5E5"> then out and out from left</font>

590
00:23:02,740 --> 00:23:08,980
field question you might<font color="#E5E5E5"> not know</font>

591
00:23:03,760 --> 00:23:10,360
<font color="#CCCCCC">anything</font><font color="#E5E5E5"> about that yes I think</font><font color="#CCCCCC"> and do</font>

592
00:23:08,980 --> 00:23:12,700
some background<font color="#CCCCCC"> work but but</font><font color="#E5E5E5"> my</font>

593
00:23:10,360 --> 00:23:16,659
knee-jerk<font color="#E5E5E5"> answer is sort of like I feel</font>

594
00:23:12,700 --> 00:23:18,280
like<font color="#E5E5E5"> compilers are all about the side</font>

595
00:23:16,660 --> 00:23:20,770
effects right yeah I mean<font color="#E5E5E5"> I think it's</font>

596
00:23:18,280 --> 00:23:22,840
<font color="#E5E5E5">highs</font><font color="#CCCCCC"> right about messing around with</font>

597
00:23:20,770 --> 00:23:26,139
<font color="#E5E5E5">the side effect to make sure right</font><font color="#CCCCCC"> act</font>

598
00:23:22,840 --> 00:23:27,520
itself is efficiently visible and which

599
00:23:26,140 --> 00:23:29,140
<font color="#E5E5E5">side effects do we care about</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> which</font>

600
00:23:27,520 --> 00:23:30,820
ones do we<font color="#E5E5E5"> not we really want that</font>

601
00:23:29,140 --> 00:23:31,840
password memory to be zeroed out and so

602
00:23:30,820 --> 00:23:33,399
we don't<font color="#E5E5E5"> want that but that to be</font>

603
00:23:31,840 --> 00:23:34,899
optimized<font color="#E5E5E5"> away so we have to preserve</font>

604
00:23:33,400 --> 00:23:39,250
that side<font color="#E5E5E5"> effect</font><font color="#CCCCCC"> but other side effects</font>

605
00:23:34,900 --> 00:23:45,910
we don't care so<font color="#CCCCCC"> much about any other</font>

606
00:23:39,250 --> 00:23:47,440
questions<font color="#E5E5E5"> all right so I'm not really</font>

607
00:23:45,910 --> 00:23:49,030
too<font color="#CCCCCC"> much of a low-level</font><font color="#E5E5E5"> guy but in</font>

608
00:23:47,440 --> 00:23:50,920
<font color="#E5E5E5">reading some blog post recently Rob</font>

609
00:23:49,030 --> 00:23:52,420
Graham wrote a post about you know not

610
00:23:50,920 --> 00:23:53,890
even<font color="#CCCCCC"> being</font><font color="#E5E5E5"> able to trust assembly code</font>

611
00:23:52,420 --> 00:23:58,030
because<font color="#E5E5E5"> of all the pipelining and things</font>

612
00:23:53,890 --> 00:24:00,070
<font color="#E5E5E5">going on like so to what degree how</font>

613
00:23:58,030 --> 00:24:01,240
serious is that to what do we<font color="#E5E5E5"> need to be</font>

614
00:24:00,070 --> 00:24:03,340
worried<font color="#CCCCCC"> about that so even</font><font color="#E5E5E5"> we</font>

615
00:24:01,240 --> 00:24:04,870
<font color="#E5E5E5">compilers producing code that we think</font>

616
00:24:03,340 --> 00:24:06,790
matches the<font color="#CCCCCC"> high-level model what we</font>

617
00:24:04,870 --> 00:24:12,429
think you should<font color="#E5E5E5"> do what what do we do</font>

618
00:24:06,790 --> 00:24:15,520
about<font color="#E5E5E5"> the hardware issues suppose that's</font>

619
00:24:12,430 --> 00:24:18,010
completely separate but you know so I

620
00:24:15,520 --> 00:24:20,560
would say I could<font color="#CCCCCC"> do this entire talk</font>

621
00:24:18,010 --> 00:24:23,260
right with starting at the<font color="#E5E5E5"> assembly</font>

622
00:24:20,560 --> 00:24:24,879
level<font color="#E5E5E5"> right because</font><font color="#CCCCCC"> Matias in fact</font>

623
00:24:23,260 --> 00:24:26,920
<font color="#E5E5E5">forwarded me that blog post once and</font>

624
00:24:24,880 --> 00:24:29,440
said assembler<font color="#CCCCCC"> is the new high-level</font>

625
00:24:26,920 --> 00:24:32,560
language<font color="#E5E5E5"> right</font><font color="#CCCCCC"> so all of these</font><font color="#E5E5E5"> issues</font>

626
00:24:29,440 --> 00:24:35,110
kind of apply and but<font color="#E5E5E5"> but on the other</font>

627
00:24:32,560 --> 00:24:37,210
<font color="#CCCCCC">hand that's that's not terribly bad I</font>

628
00:24:35,110 --> 00:24:39,580
think<font color="#E5E5E5"> kind of what we're saying is</font><font color="#CCCCCC"> that</font>

629
00:24:37,210 --> 00:24:41,440
once we start<font color="#E5E5E5"> studying this seriously</font>

630
00:24:39,580 --> 00:24:43,540
hopefully the techniques are reusable

631
00:24:41,440 --> 00:24:45,340
<font color="#E5E5E5">right so the kind of</font><font color="#CCCCCC"> tech</font><font color="#E5E5E5"> so the</font>

632
00:24:43,540 --> 00:24:47,260
specific models you may have to

633
00:24:45,340 --> 00:24:49,540
redevelop but the rest of the pipeline

634
00:24:47,260 --> 00:24:51,220
<font color="#CCCCCC">of how to</font><font color="#E5E5E5"> analyze and understand and</font>

635
00:24:49,540 --> 00:24:52,899
find<font color="#E5E5E5"> these gaps and the bugs</font>

636
00:24:51,220 --> 00:24:54,460
hopefully that's reusable at the

637
00:24:52,900 --> 00:24:56,590
<font color="#E5E5E5">assembly file right and of course</font>

638
00:24:54,460 --> 00:24:58,180
<font color="#CCCCCC">there's a</font><font color="#E5E5E5"> huge cost to pay in terms</font><font color="#CCCCCC"> of</font>

639
00:24:56,590 --> 00:25:00,840
analysis<font color="#E5E5E5"> and time and I</font><font color="#CCCCCC"> think that just</font>

640
00:24:58,180 --> 00:25:03,430
depends<font color="#E5E5E5"> on context and application</font>

641
00:25:00,840 --> 00:25:05,530
<font color="#E5E5E5">whether you want to pay that but but</font>

642
00:25:03,430 --> 00:25:09,040
like our<font color="#CCCCCC"> point is that we should at</font>

643
00:25:05,530 --> 00:25:12,730
least<font color="#E5E5E5"> know</font><font color="#CCCCCC"> that we can pay for</font><font color="#E5E5E5"> you know</font>

644
00:25:09,040 --> 00:25:15,240
<font color="#E5E5E5">that answer all right let's thank our</font>

645
00:25:12,730 --> 00:25:15,240
speaker again

