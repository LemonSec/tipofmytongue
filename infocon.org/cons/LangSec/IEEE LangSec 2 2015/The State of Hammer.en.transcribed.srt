1
00:00:00,000 --> 00:00:03,350
most of what<font color="#E5E5E5"> I'm going to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> talking</font>

2
00:00:01,469 --> 00:00:06,060
<font color="#E5E5E5">about here</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> actually going to be</font>

3
00:00:03,350 --> 00:00:08,970
contributions that users in our

4
00:00:06,060 --> 00:00:10,559
community have have added to hammer very

5
00:00:08,970 --> 00:00:12,179
<font color="#E5E5E5">little of this is actually my work so I</font>

6
00:00:10,559 --> 00:00:14,780
really appreciate all<font color="#CCCCCC"> of our open</font><font color="#E5E5E5"> source</font>

7
00:00:12,179 --> 00:00:18,300
contributors many of whom are here

8
00:00:14,780 --> 00:00:20,789
please keep up the great work so what

9
00:00:18,300 --> 00:00:25,380
has hammer been up to in<font color="#CCCCCC"> the last year</font>

10
00:00:20,789 --> 00:00:27,689
and why is my she not responding ok so

11
00:00:25,380 --> 00:00:29,130
we promised you<font color="#E5E5E5"> five backends and now we</font>

12
00:00:27,689 --> 00:00:31,740
<font color="#CCCCCC">actually have all five of them so</font>

13
00:00:29,130 --> 00:00:34,559
<font color="#CCCCCC">pak-rat is still handling all of our</font>

14
00:00:31,740 --> 00:00:37,649
context-sensitive grammars glr works for

15
00:00:34,559 --> 00:00:41,218
<font color="#E5E5E5">that as well we have lal</font><font color="#CCCCCC"> r and l ok on</font>

16
00:00:37,649 --> 00:00:43,739
the context-free side and a reg<font color="#E5E5E5"> ex vm</font>

17
00:00:41,219 --> 00:00:46,800
for regular languages cool so that's all

18
00:00:43,739 --> 00:00:50,070
in the can finally we also finished a

19
00:00:46,800 --> 00:00:51,239
ton of language bindings which I didn't

20
00:00:50,070 --> 00:00:53,010
actually list on this slide because you

21
00:00:51,239 --> 00:00:54,570
can just find<font color="#E5E5E5"> them on</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> website we</font>

22
00:00:53,010 --> 00:00:56,190
added<font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of new combinators because</font>

23
00:00:54,570 --> 00:00:58,620
it turns out that protocols are assholes

24
00:00:56,190 --> 00:01:01,620
and they will come and and they<font color="#E5E5E5"> will</font>

25
00:00:58,620 --> 00:01:04,170
come up<font color="#E5E5E5"> with ridiculous design decisions</font>

26
00:01:01,620 --> 00:01:07,590
that make us add new things like<font color="#CCCCCC"> what</font>

27
00:01:04,170 --> 00:01:09,450
you say endianness there<font color="#CCCCCC"> exists</font>

28
00:01:07,590 --> 00:01:12,030
protocols that switch endianness on the

29
00:01:09,450 --> 00:01:13,470
fly<font color="#CCCCCC"> TIFF is one of them you have to row</font>

30
00:01:12,030 --> 00:01:14,850
there is a bite that you read in the

31
00:01:13,470 --> 00:01:16,530
magic header and it tells you whether

32
00:01:14,850 --> 00:01:18,658
the rest of the<font color="#E5E5E5"> file is a little Indian</font>

33
00:01:16,530 --> 00:01:22,439
or big endian so now you can switch<font color="#CCCCCC"> that</font>

34
00:01:18,659 --> 00:01:23,820
up on<font color="#CCCCCC"> the fly H aligned sometimes</font>

35
00:01:22,439 --> 00:01:25,559
protocols care about whether bites are

36
00:01:23,820 --> 00:01:27,179
aligned I mean this this I'm pretty much

37
00:01:25,560 --> 00:01:31,979
<font color="#E5E5E5">okay with this is this is kind of a</font>

38
00:01:27,180 --> 00:01:33,750
special<font color="#E5E5E5"> case of a of an attribute</font>

39
00:01:31,979 --> 00:01:36,780
constraint just making<font color="#E5E5E5"> sure</font><font color="#CCCCCC"> that things</font>

40
00:01:33,750 --> 00:01:42,829
line up correctly I cannot say the same

41
00:01:36,780 --> 00:01:42,829
for these guys these are dnp3<font color="#E5E5E5"> s fault</font>

42
00:01:43,520 --> 00:01:48,240
dnp3<font color="#E5E5E5"> is so aggressively contact</font>

43
00:01:46,829 --> 00:01:50,729
sensitive that<font color="#CCCCCC"> we basically had to</font>

44
00:01:48,240 --> 00:01:53,399
introduce a symbol table with scope in

45
00:01:50,729 --> 00:01:57,539
order to be able to handle<font color="#CCCCCC"> all of the</font>

46
00:01:53,399 --> 00:02:01,200
 nesting that's in it each

47
00:01:57,540 --> 00:02:03,750
permutation is pngs fault if you<font color="#E5E5E5"> if you</font>

48
00:02:01,200 --> 00:02:05,640
read the PNG spec you will you<font color="#E5E5E5"> will</font>

49
00:02:03,750 --> 00:02:07,320
<font color="#E5E5E5">think oh this is a really cool spec this</font>

50
00:02:05,640 --> 00:02:08,550
is a really nice design eric<font color="#E5E5E5"> raymond was</font>

51
00:02:07,320 --> 00:02:10,220
totally right and then you<font color="#E5E5E5"> get to the</font>

52
00:02:08,550 --> 00:02:12,330
<font color="#E5E5E5">part where there are like five different</font>

53
00:02:10,220 --> 00:02:13,250
there<font color="#E5E5E5"> are like five different required</font>

54
00:02:12,330 --> 00:02:17,990
things

55
00:02:13,250 --> 00:02:21,470
can show up in any order so fortunately

56
00:02:17,990 --> 00:02:23,720
parsec the<font color="#E5E5E5"> Haskell parser Combinator</font>

57
00:02:21,470 --> 00:02:26,750
library introduced a permutation

58
00:02:23,720 --> 00:02:29,320
Combinator a while back and pesco who

59
00:02:26,750 --> 00:02:32,930
wrote most of these other guys too

60
00:02:29,320 --> 00:02:36,079
implemented that for<font color="#CCCCCC"> us he also</font>

61
00:02:32,930 --> 00:02:38,180
implemented monadic bind so this this

62
00:02:36,080 --> 00:02:40,520
one also ended up being dnp3<font color="#E5E5E5"> s fault and</font>

63
00:02:38,180 --> 00:02:44,930
it's a nice way<font color="#CCCCCC"> to sequence parsers</font>

64
00:02:40,520 --> 00:02:46,880
together much like you do in<font color="#CCCCCC"> Haskell so</font>

65
00:02:44,930 --> 00:02:48,860
this one came<font color="#CCCCCC"> in from out of nowhere I</font>

66
00:02:46,880 --> 00:02:51,320
have an algebraic topology buddy Michael

67
00:02:48,860 --> 00:02:52,970
venema<font color="#E5E5E5"> Johansson and he got really</font>

68
00:02:51,320 --> 00:02:54,709
interested<font color="#E5E5E5"> in generating functions</font>

69
00:02:52,970 --> 00:02:58,730
recently and so you will<font color="#E5E5E5"> now find in the</font>

70
00:02:54,709 --> 00:03:02,230
examples directory yeah you will now

71
00:02:58,730 --> 00:03:05,450
find any examples directory code for

72
00:03:02,230 --> 00:03:08,119
producing algebraic generating functions

73
00:03:05,450 --> 00:03:09,910
from a context-free grammar generating

74
00:03:08,120 --> 00:03:17,140
function is basically a power series

75
00:03:09,910 --> 00:03:19,850
that lets you enumerate the size of what

76
00:03:17,140 --> 00:03:24,048
well in this<font color="#E5E5E5"> case guy in this case a</font>

77
00:03:19,850 --> 00:03:25,730
grammar<font color="#CCCCCC"> ok we've also been working on</font>

78
00:03:24,049 --> 00:03:28,730
some<font color="#E5E5E5"> protocol implementations in my</font>

79
00:03:25,730 --> 00:03:30,859
copious free time I've banged out<font color="#E5E5E5"> pcap</font>

80
00:03:28,730 --> 00:03:35,298
and from there I've been working on

81
00:03:30,860 --> 00:03:37,280
Ethernet IP tcp I don't actually<font color="#E5E5E5"> have</font>

82
00:03:35,299 --> 00:03:41,690
anything on github for that yet<font color="#E5E5E5"> but I'll</font>

83
00:03:37,280 --> 00:03:45,680
get there pesco and Adam have been

84
00:03:41,690 --> 00:03:47,870
working on dnp3<font color="#E5E5E5"> it's about the biggest</font>

85
00:03:45,680 --> 00:03:51,260
<font color="#E5E5E5">nastiest protocol we've run into so far</font>

86
00:03:47,870 --> 00:03:53,000
it's substantially worse than mp4 it the

87
00:03:51,260 --> 00:03:54,590
<font color="#E5E5E5">long-range data dependencies like I said</font>

88
00:03:53,000 --> 00:03:56,150
required us to you<font color="#E5E5E5"> know to add a</font>

89
00:03:54,590 --> 00:03:58,370
freaking symbol table to make it work

90
00:03:56,150 --> 00:04:02,660
but<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is definitely you know testing</font>

91
00:03:58,370 --> 00:04:05,420
the the usability of the library in in

92
00:04:02,660 --> 00:04:06,890
terms of what convenience functions does

93
00:04:05,420 --> 00:04:10,540
it provide you to make it easier to

94
00:04:06,890 --> 00:04:14,268
<font color="#E5E5E5">conceive of this horrible enormous thing</font>

95
00:04:10,540 --> 00:04:15,828
so I mentioned<font color="#E5E5E5"> Michaels Michaels</font>

96
00:04:14,269 --> 00:04:17,630
generating functions I didn't tell you

97
00:04:15,829 --> 00:04:22,550
what they were for and they are for the

98
00:04:17,630 --> 00:04:26,240
grammar of tie knots in 1999 a couple of

99
00:04:22,550 --> 00:04:26,820
physicists think and Mao enumerated all

100
00:04:26,240 --> 00:04:29,370
possible

101
00:04:26,820 --> 00:04:31,349
tie knots like<font color="#E5E5E5"> necktie not starting from</font>

102
00:04:29,370 --> 00:04:33,360
<font color="#E5E5E5">the wide end of the tie and they came up</font>

103
00:04:31,350 --> 00:04:35,010
with 85 of them and then Michael was

104
00:04:33,360 --> 00:04:36,600
watching The Matrix Reloaded and noticed

105
00:04:35,010 --> 00:04:38,700
<font color="#CCCCCC">that the</font><font color="#E5E5E5"> Merovingians tie is not in that</font>

106
00:04:36,600 --> 00:04:40,440
list it turns out that you start that

107
00:04:38,700 --> 00:04:42,330
tie from the small end and so we

108
00:04:40,440 --> 00:04:43,740
investigated this you might<font color="#E5E5E5"> have seen</font>

109
00:04:42,330 --> 00:04:46,380
like last year there was like a piece in

110
00:04:43,740 --> 00:04:49,320
New Scientist that said 177,000 possible

111
00:04:46,380 --> 00:04:51,560
tie knots that was us we actually<font color="#CCCCCC"> got</font>

112
00:04:49,320 --> 00:04:54,030
<font color="#E5E5E5">that wrong it's actually more like</font>

113
00:04:51,560 --> 00:04:59,760
266,000 and that<font color="#CCCCCC"> papers coming</font><font color="#E5E5E5"> out next</font>

114
00:04:54,030 --> 00:05:02,669
<font color="#E5E5E5">Wednesday we've also put together a</font>

115
00:04:59,760 --> 00:05:06,360
series of tutorial videos on hammer with

116
00:05:02,670 --> 00:05:09,510
help from Stefan<font color="#E5E5E5"> back there it's it's</font>

117
00:05:06,360 --> 00:05:12,090
<font color="#E5E5E5">basically a code along the or the early</font>

118
00:05:09,510 --> 00:05:13,770
videos give you some basic introduction

119
00:05:12,090 --> 00:05:14,750
to how the<font color="#E5E5E5"> library works you know</font>

120
00:05:13,770 --> 00:05:17,729
setting up the<font color="#CCCCCC"> development environment</font>

121
00:05:14,750 --> 00:05:23,070
and then we jump straight into base64

122
00:05:17,730 --> 00:05:24,750
and then move on into<font color="#CCCCCC"> JSON RPC the and</font>

123
00:05:23,070 --> 00:05:26,310
<font color="#E5E5E5">and now that that ends up requiring</font>

124
00:05:24,750 --> 00:05:28,500
sequencing a bunch of parsers together

125
00:05:26,310 --> 00:05:31,310
to give you an idea of<font color="#E5E5E5"> how to build more</font>

126
00:05:28,500 --> 00:05:34,470
complicated systems by composing parsers

127
00:05:31,310 --> 00:05:36,750
so the beta version of that is up on

128
00:05:34,470 --> 00:05:39,480
github there are notes there is source

129
00:05:36,750 --> 00:05:43,950
code there<font color="#CCCCCC"> are videos please let us know</font>

130
00:05:39,480 --> 00:05:47,940
if<font color="#CCCCCC"> you run into any problems so what's</font>

131
00:05:43,950 --> 00:05:50,460
coming up next I'm planning on adding

132
00:05:47,940 --> 00:05:53,580
one more back end all star which is<font color="#E5E5E5"> the</font>

133
00:05:50,460 --> 00:05:56,609
which<font color="#CCCCCC"> is the what antler uses these days</font>

134
00:05:53,580 --> 00:05:58,680
it's<font color="#CCCCCC"> tearin sparse algorithm we've had</font>

135
00:05:56,610 --> 00:06:01,770
some confusion from users about pak-rat

136
00:05:58,680 --> 00:06:04,380
as the default back end because it turns

137
00:06:01,770 --> 00:06:10,190
out that ordered choice which is to say

138
00:06:04,380 --> 00:06:13,920
a choice operator that forces you to

139
00:06:10,190 --> 00:06:15,750
forces you to put prefixes after things

140
00:06:13,920 --> 00:06:18,120
<font color="#CCCCCC">they're prefixes of so for instance like</font>

141
00:06:15,750 --> 00:06:20,820
if you if it's a choice between foo and

142
00:06:18,120 --> 00:06:23,130
fubar you have to put fubar first in

143
00:06:20,820 --> 00:06:25,950
your list<font color="#E5E5E5"> of choices otherwise it will</font>

144
00:06:23,130 --> 00:06:28,170
never match who so this is<font color="#E5E5E5"> this turns</font>

145
00:06:25,950 --> 00:06:31,770
out<font color="#CCCCCC"> to confuse users and so we want to</font>

146
00:06:28,170 --> 00:06:33,450
retire that<font color="#E5E5E5"> as fast as we can I'll be</font>

147
00:06:31,770 --> 00:06:35,789
adding some<font color="#E5E5E5"> more bindings I've been</font>

148
00:06:33,450 --> 00:06:37,890
working on Lua other contributors have

149
00:06:35,790 --> 00:06:40,320
been working on rust and of all things

150
00:06:37,890 --> 00:06:40,650
<font color="#E5E5E5">haskell I can't figure out why but it's</font>

151
00:06:40,320 --> 00:06:44,430
really

152
00:06:40,650 --> 00:06:46,229
nice performing an optimization as

153
00:06:44,430 --> 00:06:49,050
<font color="#E5E5E5">Jeffrey pointed out are clearly</font>

154
00:06:46,229 --> 00:06:51,320
desperately desperately needed and there

155
00:06:49,050 --> 00:06:53,940
are a lot of<font color="#E5E5E5"> there there</font><font color="#CCCCCC"> are a lot of</font>

156
00:06:51,320 --> 00:06:56,699
naive optimizations fortunately that we

157
00:06:53,940 --> 00:07:01,530
can do to make to make stuff a lot

158
00:06:56,699 --> 00:07:02,759
easier like with the mp4 files that you

159
00:07:01,530 --> 00:07:04,500
know that<font color="#E5E5E5"> you were opening you know</font>

160
00:07:02,759 --> 00:07:07,080
you're you're reading like these giant

161
00:07:04,500 --> 00:07:08,699
buffers<font color="#CCCCCC"> that have like you know</font><font color="#E5E5E5"> a size</font>

162
00:07:07,080 --> 00:07:12,270
of you know tens of thousands of bytes

163
00:07:08,699 --> 00:07:14,039
if not more and when you're applying the

164
00:07:12,270 --> 00:07:15,690
in Tate parser over and over and over

165
00:07:14,039 --> 00:07:18,150
again<font color="#E5E5E5"> it turns out that you know doing</font>

166
00:07:15,690 --> 00:07:20,820
<font color="#E5E5E5">that naively you know requires a lot of</font>

167
00:07:18,150 --> 00:07:22,260
allocation and takes forever so<font color="#E5E5E5"> you know</font>

168
00:07:20,820 --> 00:07:24,180
there are<font color="#E5E5E5"> some there are definitely some</font>

169
00:07:22,260 --> 00:07:26,490
simple optimizations that we can do to

170
00:07:24,180 --> 00:07:30,750
to make<font color="#E5E5E5"> that less stupid and hopefully</font>

171
00:07:26,490 --> 00:07:33,300
faster<font color="#E5E5E5"> I mentioned that I've been</font>

172
00:07:30,750 --> 00:07:35,010
working<font color="#CCCCCC"> on some</font><font color="#E5E5E5"> protocol grammars the</font>

173
00:07:33,300 --> 00:07:37,770
thing that I'm basically blocking on

174
00:07:35,010 --> 00:07:39,990
before I release that is a nice general

175
00:07:37,770 --> 00:07:41,669
test framework so that if you decide to

176
00:07:39,990 --> 00:07:43,080
<font color="#CCCCCC">write a protocol grammar you don't have</font>

177
00:07:41,669 --> 00:07:44,760
to go through a<font color="#E5E5E5"> bunch of a bunch of</font>

178
00:07:43,080 --> 00:07:49,380
hassle to to test it and make sure it

179
00:07:44,760 --> 00:07:51,930
works and finally Michael and I are

180
00:07:49,380 --> 00:07:53,430
going to<font color="#E5E5E5"> be using the generating</font>

181
00:07:51,930 --> 00:07:57,000
functions stuff that we've<font color="#E5E5E5"> been</font><font color="#CCCCCC"> working</font>

182
00:07:53,430 --> 00:08:01,610
with to see what we can to see what we

183
00:07:57,000 --> 00:08:01,610
can<font color="#E5E5E5"> explore in terms of attack surfaces</font>

184
00:08:01,820 --> 00:08:06,300
it's a<font color="#E5E5E5"> little it's it's a I mean you</font>

185
00:08:04,860 --> 00:08:09,030
start to<font color="#E5E5E5"> get into kind of aesthetics</font>

186
00:08:06,300 --> 00:08:14,930
here<font color="#CCCCCC"> almost when when you're when you're</font>

187
00:08:09,030 --> 00:08:14,929
talking about when you're talking about

188
00:08:15,409 --> 00:08:23,130
what the way when you're talking about

189
00:08:20,340 --> 00:08:26,400
subsets you know<font color="#E5E5E5"> interesting subsets of</font>

190
00:08:23,130 --> 00:08:28,590
a topological space which<font color="#CCCCCC"> is essentially</font>

191
00:08:26,400 --> 00:08:29,880
what what you know<font color="#E5E5E5"> what what these</font>

192
00:08:28,590 --> 00:08:32,819
generating functions are sketching out

193
00:08:29,880 --> 00:08:34,830
here like a of some strings in the set

194
00:08:32,820 --> 00:08:36,150
<font color="#E5E5E5">of all possible strings and so within</font>

195
00:08:34,830 --> 00:08:38,760
<font color="#E5E5E5">there within that there's also going to</font>

196
00:08:36,150 --> 00:08:40,919
be sets of interesting strings which is

197
00:08:38,760 --> 00:08:43,588
to say like streams that provoke

198
00:08:40,919 --> 00:08:45,390
interesting back end behavior and so

199
00:08:43,589 --> 00:08:47,339
we're going to try<font color="#E5E5E5"> to see if we can</font>

200
00:08:45,390 --> 00:08:49,980
characterize these a little<font color="#CCCCCC"> better and a</font>

201
00:08:47,339 --> 00:08:52,620
little more mathematically and I

202
00:08:49,980 --> 00:08:53,740
<font color="#E5E5E5">mentioned the paper on this is coming</font>

203
00:08:52,620 --> 00:08:56,740
out<font color="#CCCCCC"> in</font>

204
00:08:53,740 --> 00:08:59,010
p rj computer science next wednesday so

205
00:08:56,740 --> 00:09:12,390
that'll be online please<font color="#E5E5E5"> enjoy and</font>

206
00:08:59,010 --> 00:09:16,770
that's all<font color="#E5E5E5"> I got any questions questions</font>

207
00:09:12,390 --> 00:09:16,770
well in that<font color="#CCCCCC"> case</font>

