1
00:00:05,410 --> 00:00:12,980
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> thank you</font>

2
00:00:08,750 --> 00:00:15,320
so hello everybody<font color="#E5E5E5"> we are care</font><font color="#CCCCCC"> working</font>

3
00:00:12,980 --> 00:00:17,900
in the French<font color="#CCCCCC"> MC so kind of like</font><font color="#E5E5E5"> missed</font>

4
00:00:15,320 --> 00:00:20,300
at French<font color="#E5E5E5"> and I work</font><font color="#CCCCCC"> a killer cloud the</font>

5
00:00:17,900 --> 00:00:23,630
French hosting company<font color="#CCCCCC"> we've</font><font color="#E5E5E5"> been</font>

6
00:00:20,300 --> 00:00:27,349
working on<font color="#CCCCCC"> passes and we're all here for</font>

7
00:00:23,630 --> 00:00:31,640
<font color="#CCCCCC">the</font><font color="#E5E5E5"> kind of the same reasons and we've</font>

8
00:00:27,349 --> 00:00:35,269
<font color="#CCCCCC">trying</font><font color="#E5E5E5"> to think about what what's the</font>

9
00:00:31,640 --> 00:00:37,940
relation between<font color="#E5E5E5"> our</font><font color="#CCCCCC"> tussles our memory</font>

10
00:00:35,269 --> 00:00:42,159
set<font color="#CCCCCC"> languages everything the new code</font>

11
00:00:37,940 --> 00:00:46,220
and<font color="#CCCCCC"> old code</font><font color="#E5E5E5"> so I can</font><font color="#CCCCCC"> write now right</font>

12
00:00:42,159 --> 00:00:48,729
<font color="#CCCCCC">production-ready code enrolled in or</font>

13
00:00:46,220 --> 00:00:51,760
<font color="#CCCCCC">Cameron</font><font color="#E5E5E5"> whatever in safe languages and</font>

14
00:00:48,729 --> 00:00:54,799
it<font color="#CCCCCC"> will be all</font><font color="#E5E5E5"> right because it's</font>

15
00:00:51,760 --> 00:00:57,559
<font color="#CCCCCC">correct for memory point of view we have</font>

16
00:00:54,799 --> 00:01:01,010
<font color="#E5E5E5">good technique</font><font color="#CCCCCC"> to write tassels</font><font color="#E5E5E5"> we can</font>

17
00:00:57,559 --> 00:01:03,260
even use formal methods but does<font color="#CCCCCC"> that</font>

18
00:01:01,010 --> 00:01:05,298
solve one problem is<font color="#CCCCCC"> that a lot</font><font color="#E5E5E5"> of the</font>

19
00:01:03,260 --> 00:01:08,420
code we use is actually legacy code

20
00:01:05,299 --> 00:01:10,609
written in unsafe languages with bad

21
00:01:08,420 --> 00:01:13,759
practices<font color="#E5E5E5"> so most of the time that will</font>

22
00:01:10,609 --> 00:01:15,859
<font color="#E5E5E5">be written C or C++ with handwritten</font>

23
00:01:13,759 --> 00:01:18,710
<font color="#E5E5E5">authors most of the code will</font><font color="#CCCCCC"> be a</font>

24
00:01:15,859 --> 00:01:20,740
highly<font color="#E5E5E5"> code like when you see protocol</font>

25
00:01:18,710 --> 00:01:24,380
implementation that's not just a busser

26
00:01:20,740 --> 00:01:25,759
<font color="#E5E5E5">nicely written in one place and then the</font>

27
00:01:24,380 --> 00:01:28,520
protocol implementation<font color="#E5E5E5"> but some things</font>

28
00:01:25,759 --> 00:01:32,359
like this huge state machine<font color="#E5E5E5"> where</font>

29
00:01:28,520 --> 00:01:34,490
everything is<font color="#CCCCCC"> done by hand and it's</font>

30
00:01:32,359 --> 00:01:37,699
usually very<font color="#E5E5E5"> hard to test really hard to</font>

31
00:01:34,490 --> 00:01:43,369
reflect on very hard to extract<font color="#CCCCCC"> from the</font>

32
00:01:37,700 --> 00:01:47,630
program<font color="#E5E5E5"> so we could try to rewrite the</font>

33
00:01:43,369 --> 00:01:51,829
Linux kernel<font color="#CCCCCC"> all of our web servers SMTP</font>

34
00:01:47,630 --> 00:01:54,439
servers<font color="#CCCCCC"> I'm trying to think</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> the PNG</font>

35
00:01:51,829 --> 00:01:57,109
<font color="#CCCCCC">jpg</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> leave all</font><font color="#E5E5E5"> those thing like I</font>

36
00:01:54,439 --> 00:01:59,689
could<font color="#E5E5E5"> spend my life on this it's not</font>

37
00:01:57,109 --> 00:02:02,359
<font color="#E5E5E5">it's not a good idea because this</font>

38
00:01:59,689 --> 00:02:06,639
<font color="#E5E5E5">project are usually very large the</font>

39
00:02:02,359 --> 00:02:09,978
<font color="#CCCCCC">codebase</font><font color="#E5E5E5"> is old and hard to navigate and</font>

40
00:02:06,639 --> 00:02:12,049
even if it may<font color="#E5E5E5"> be but</font><font color="#CCCCCC"> in return it's</font>

41
00:02:09,979 --> 00:02:14,600
<font color="#E5E5E5">already performing its job there's a</font>

42
00:02:12,050 --> 00:02:15,959
huge domain knowledge in<font color="#CCCCCC"> just like it is</font>

43
00:02:14,600 --> 00:02:19,319
<font color="#E5E5E5">imagine like</font>

44
00:02:15,959 --> 00:02:21,750
we want to rewrite<font color="#E5E5E5"> we were talking about</font>

45
00:02:19,319 --> 00:02:23,790
dlc dlc is already an old<font color="#CCCCCC"> project</font><font color="#E5E5E5"> and</font>

46
00:02:21,750 --> 00:02:26,280
lots and<font color="#E5E5E5"> lots</font><font color="#CCCCCC"> of bugs have been fixed</font>

47
00:02:23,790 --> 00:02:32,310
<font color="#CCCCCC">lots</font><font color="#E5E5E5"> and lots of techniques are there to</font>

48
00:02:26,280 --> 00:02:34,230
<font color="#E5E5E5">mangle like any format possible we if we</font>

49
00:02:32,310 --> 00:02:36,359
try<font color="#E5E5E5"> to write all</font><font color="#CCCCCC"> of this</font><font color="#E5E5E5"> we will</font>

50
00:02:34,230 --> 00:02:40,349
introduce bugs<font color="#E5E5E5"> and that's not something</font>

51
00:02:36,359 --> 00:02:43,200
we want<font color="#E5E5E5"> so we want to avoid regressions</font>

52
00:02:40,349 --> 00:02:45,298
<font color="#CCCCCC">and we also want to avoid</font><font color="#E5E5E5"> political</font>

53
00:02:43,200 --> 00:02:47,819
issues because if we try<font color="#CCCCCC"> to rewrite</font>

54
00:02:45,299 --> 00:02:50,670
everything<font color="#E5E5E5"> that means it's a whole novel</font>

55
00:02:47,819 --> 00:02:52,888
project<font color="#CCCCCC"> and all of the</font><font color="#E5E5E5"> developers must</font>

56
00:02:50,670 --> 00:02:56,940
learn a new language a new architecture

57
00:02:52,889 --> 00:02:59,280
and<font color="#E5E5E5"> they are</font><font color="#CCCCCC"> already working</font><font color="#E5E5E5"> on the</font><font color="#CCCCCC"> only</font>

58
00:02:56,940 --> 00:03:01,409
<font color="#CCCCCC">greeting project</font><font color="#E5E5E5"> with an architecture</font>

59
00:02:59,280 --> 00:03:04,290
that<font color="#CCCCCC"> they</font><font color="#E5E5E5"> familiar with most of the time</font>

60
00:03:01,409 --> 00:03:07,129
<font color="#E5E5E5">there will be a beast</font><font color="#CCCCCC"> so it's already</font><font color="#E5E5E5"> on</font>

61
00:03:04,290 --> 00:03:10,138
the free time<font color="#E5E5E5"> so</font><font color="#CCCCCC"> we want to reduce</font><font color="#E5E5E5"> the</font>

62
00:03:07,129 --> 00:03:12,388
<font color="#E5E5E5">the</font><font color="#CCCCCC"> cognitive load on the</font><font color="#E5E5E5"> day listening</font>

63
00:03:10,139 --> 00:03:16,760
developer<font color="#E5E5E5"> in projects in logistical</font>

64
00:03:12,389 --> 00:03:20,160
<font color="#E5E5E5">basis if you want to fix the security so</font>

65
00:03:16,760 --> 00:03:24,780
what we<font color="#E5E5E5"> came</font><font color="#CCCCCC"> up</font><font color="#E5E5E5"> with is can we just try</font>

66
00:03:20,160 --> 00:03:27,870
<font color="#E5E5E5">to remove the unsafe part and replace it</font>

67
00:03:24,780 --> 00:03:31,440
<font color="#E5E5E5">with something but we've left the least</font>

68
00:03:27,870 --> 00:03:34,049
impact possible so for this we need<font color="#CCCCCC"> a</font>

69
00:03:31,440 --> 00:03:37,109
few<font color="#CCCCCC"> things first something that will you</font>

70
00:03:34,049 --> 00:03:37,919
may<font color="#E5E5E5"> be safe because like if we try to to</font>

71
00:03:37,109 --> 00:03:40,199
go that way

72
00:03:37,919 --> 00:03:42,810
we might want<font color="#CCCCCC"> to avoid</font><font color="#E5E5E5"> see and</font><font color="#CCCCCC"> it's</font>

73
00:03:40,199 --> 00:03:45,690
issues<font color="#CCCCCC"> we want</font><font color="#E5E5E5"> language that can</font>

74
00:03:42,810 --> 00:03:48,599
interact well in we see so<font color="#CCCCCC"> that can call</font>

75
00:03:45,690 --> 00:03:49,799
<font color="#CCCCCC">C code but can also</font><font color="#E5E5E5"> be called by C code</font>

76
00:03:48,599 --> 00:03:51,869
<font color="#E5E5E5">we want something that will integrate</font>

77
00:03:49,799 --> 00:03:54,090
inside the<font color="#CCCCCC"> software</font><font color="#E5E5E5"> not something that</font>

78
00:03:51,870 --> 00:03:56,489
will wrap the the current application

79
00:03:54,090 --> 00:03:59,729
<font color="#E5E5E5">and something</font><font color="#CCCCCC"> that will be just right in</font>

80
00:03:56,489 --> 00:04:02,069
there if possible<font color="#E5E5E5"> no garbage collection</font>

81
00:03:59,729 --> 00:04:06,870
<font color="#E5E5E5">we want don't want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> inter</font><font color="#CCCCCC"> introduce</font>

82
00:04:02,069 --> 00:04:08,728
pauses<font color="#E5E5E5"> and we marginally we don't want</font>

83
00:04:06,870 --> 00:04:11,129
to mess<font color="#CCCCCC"> with the allocation in C</font>

84
00:04:08,729 --> 00:04:13,260
applications<font color="#E5E5E5"> because Moses I</font><font color="#CCCCCC"> maybe</font><font color="#E5E5E5"> there</font>

85
00:04:11,129 --> 00:04:16,560
will<font color="#E5E5E5"> be a</font><font color="#CCCCCC"> custom alligator or we in</font>

86
00:04:13,260 --> 00:04:18,630
embedded settings or we<font color="#E5E5E5"> don't want to</font>

87
00:04:16,560 --> 00:04:21,709
have like<font color="#CCCCCC"> our part of the application</font>

88
00:04:18,630 --> 00:04:24,770
<font color="#CCCCCC">that try</font><font color="#E5E5E5"> to do too much with the</font>

89
00:04:21,709 --> 00:04:28,910
with the memory we<font color="#CCCCCC"> were</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> guests</font>

90
00:04:24,770 --> 00:04:31,549
<font color="#E5E5E5">inside an</font><font color="#CCCCCC"> existing program</font><font color="#E5E5E5"> and last but</font>

91
00:04:28,910 --> 00:04:33,680
not least we want to be like fast enough

92
00:04:31,550 --> 00:04:36,320
<font color="#CCCCCC">because most of the time C</font><font color="#E5E5E5"> developer are</font>

93
00:04:33,680 --> 00:04:38,690
very specific specific about what they

94
00:04:36,320 --> 00:04:41,419
<font color="#E5E5E5">they expect on a performance</font><font color="#CCCCCC"> point of</font>

95
00:04:38,690 --> 00:04:45,830
view so maybe not the<font color="#E5E5E5"> fastest thing but</font>

96
00:04:41,419 --> 00:04:51,109
at least in the same runs as C so rust

97
00:04:45,830 --> 00:04:54,919
rust is kind of a good tool<font color="#CCCCCC"> for that</font><font color="#E5E5E5"> it</font>

98
00:04:51,110 --> 00:04:56,150
<font color="#CCCCCC">unloads memory</font><font color="#E5E5E5"> every not under</font>

99
00:04:54,919 --> 00:04:58,130
everything<font color="#E5E5E5"> for the memory point of view</font>

100
00:04:56,150 --> 00:05:00,169
for<font color="#E5E5E5"> you so there's no garbage collection</font>

101
00:04:58,130 --> 00:05:02,479
like the compiler knows<font color="#E5E5E5"> where to put a</font>

102
00:05:00,169 --> 00:05:04,849
malloc and free everywhere you don't

103
00:05:02,479 --> 00:05:07,510
<font color="#E5E5E5">handle that and if you're in let's say</font>

104
00:05:04,850 --> 00:05:10,580
in<font color="#E5E5E5"> the case</font><font color="#CCCCCC"> that's not safe it will just</font>

105
00:05:07,510 --> 00:05:12,620
if not compile<font color="#CCCCCC"> into</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> a tell you okay</font>

106
00:05:10,580 --> 00:05:16,099
<font color="#E5E5E5">there's an error there you have to fix</font>

107
00:05:12,620 --> 00:05:21,020
<font color="#E5E5E5">your type so the way you use memory it's</font>

108
00:05:16,099 --> 00:05:23,419
type safe<font color="#CCCCCC"> it goes to two wigglin to make</font>

109
00:05:21,020 --> 00:05:27,710
sure that there<font color="#E5E5E5"> will be</font><font color="#CCCCCC"> no that</font><font color="#E5E5E5"> erases</font>

110
00:05:23,419 --> 00:05:30,979
<font color="#E5E5E5">that all of the threads like they</font><font color="#CCCCCC"> made</font>

111
00:05:27,710 --> 00:05:32,630
might only be one mutable reference to

112
00:05:30,979 --> 00:05:36,849
<font color="#E5E5E5">anything at all like recently there's</font>

113
00:05:32,630 --> 00:05:39,050
been a<font color="#CCCCCC"> grid</font><font color="#E5E5E5"> framework for embedded the</font>

114
00:05:36,849 --> 00:05:41,000
multitasking<font color="#E5E5E5"> has been that's been</font>

115
00:05:39,050 --> 00:05:41,930
<font color="#CCCCCC">released</font><font color="#E5E5E5"> where you have privilege and</font>

116
00:05:41,000 --> 00:05:44,139
everything and<font color="#E5E5E5"> the type system</font>

117
00:05:41,930 --> 00:05:47,210
<font color="#CCCCCC">guarantees there will be no data race</font>

118
00:05:44,139 --> 00:05:51,169
without mutex<font color="#E5E5E5"> is everywhere so</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> kind</font>

119
00:05:47,210 --> 00:05:55,030
of<font color="#CCCCCC"> really what can you so it's easy to</font>

120
00:05:51,169 --> 00:05:58,250
talk<font color="#E5E5E5"> with</font><font color="#CCCCCC"> C code it's easy to write</font>

121
00:05:55,030 --> 00:06:01,489
<font color="#CCCCCC">low-level code with the rock apish like</font>

122
00:05:58,250 --> 00:06:04,010
you can you<font color="#E5E5E5"> manage memory very very</font>

123
00:06:01,490 --> 00:06:05,710
finely<font color="#E5E5E5"> so you can just avoid a lot of</font>

124
00:06:04,010 --> 00:06:08,229
<font color="#CCCCCC">copies you</font><font color="#E5E5E5"> would do in</font><font color="#CCCCCC"> other languages</font>

125
00:06:05,710 --> 00:06:12,590
<font color="#CCCCCC">you can write a safe</font><font color="#E5E5E5"> code if you want</font>

126
00:06:08,229 --> 00:06:15,139
the language will not<font color="#E5E5E5"> stop you</font><font color="#CCCCCC"> just it's</font>

127
00:06:12,590 --> 00:06:17,960
a contract between<font color="#CCCCCC"> the compiler and you</font>

128
00:06:15,139 --> 00:06:20,449
<font color="#E5E5E5">you say</font><font color="#CCCCCC"> okay when you</font><font color="#E5E5E5"> have the unsafe</font>

129
00:06:17,960 --> 00:06:23,590
part you guarantee to<font color="#CCCCCC"> the to the</font>

130
00:06:20,449 --> 00:06:26,630
<font color="#E5E5E5">compiler</font><font color="#CCCCCC"> I know what I'm doing there and</font>

131
00:06:23,590 --> 00:06:29,239
assume that<font color="#E5E5E5"> it will be</font><font color="#CCCCCC"> okay we and check</font>

132
00:06:26,630 --> 00:06:32,270
the rest<font color="#E5E5E5"> of the code most of the time we</font>

133
00:06:29,240 --> 00:06:33,860
can still make mistakes<font color="#CCCCCC"> in there it's a</font>

134
00:06:32,270 --> 00:06:34,960
very very small<font color="#E5E5E5"> footprint there's no</font>

135
00:06:33,860 --> 00:06:37,389
runtime<font color="#CCCCCC"> no</font>

136
00:06:34,960 --> 00:06:41,008
<font color="#E5E5E5">you know anything and good community the</font>

137
00:06:37,389 --> 00:06:45,639
new<font color="#E5E5E5"> language but it's it's getting there</font>

138
00:06:41,009 --> 00:06:48,310
<font color="#E5E5E5">so it's not enough to</font><font color="#CCCCCC"> write safe passers</font>

139
00:06:45,639 --> 00:06:50,289
<font color="#CCCCCC">like this is the kind of thing people</font>

140
00:06:48,310 --> 00:06:53,919
would do with<font color="#CCCCCC"> hundred</font><font color="#E5E5E5"> and tassels in</font>

141
00:06:50,289 --> 00:06:57,340
rest like the the rest for the project

142
00:06:53,919 --> 00:06:59,758
as a big<font color="#E5E5E5"> list of trophy cases with a lot</font>

143
00:06:57,340 --> 00:07:04,080
<font color="#E5E5E5">of tassels</font><font color="#CCCCCC"> returned by hand</font><font color="#E5E5E5"> like this</font>

144
00:06:59,759 --> 00:07:06,250
<font color="#CCCCCC">finds a lot of tissue unchecked web</font>

145
00:07:04,080 --> 00:07:09,219
<font color="#E5E5E5">bonds access that kind of</font><font color="#CCCCCC"> thing or</font>

146
00:07:06,250 --> 00:07:11,620
integer overflows<font color="#E5E5E5"> or the</font><font color="#CCCCCC"> unwrap</font><font color="#E5E5E5"> which is</font>

147
00:07:09,220 --> 00:07:13,330
like I'm supposed to have value there<font color="#CCCCCC"> so</font>

148
00:07:11,620 --> 00:07:16,660
I<font color="#E5E5E5"> will</font><font color="#CCCCCC"> just unwrap</font><font color="#E5E5E5"> if it said instead of</font>

149
00:07:13,330 --> 00:07:22,150
<font color="#E5E5E5">checking it's already there and the</font>

150
00:07:16,660 --> 00:07:24,940
fozziwig<font color="#E5E5E5"> Finder</font><font color="#CCCCCC"> can in that case that's</font>

151
00:07:22,150 --> 00:07:27,758
why I<font color="#E5E5E5"> wrote known a few years ago</font><font color="#CCCCCC"> it's a</font>

152
00:07:24,940 --> 00:07:31,740
faster community of library that uses<font color="#E5E5E5"> a</font>

153
00:07:27,759 --> 00:07:34,659
lot<font color="#CCCCCC"> of macros in</font><font color="#E5E5E5"> interest it's basically</font>

154
00:07:31,740 --> 00:07:37,090
every pastor is a function that takes an

155
00:07:34,659 --> 00:07:40,150
input and returns an<font color="#CCCCCC"> I result</font><font color="#E5E5E5"> I resulted</font>

156
00:07:37,090 --> 00:07:41,799
in the name that<font color="#E5E5E5"> contains ever</font><font color="#CCCCCC"> highest</font>

157
00:07:40,150 --> 00:07:44,380
value and<font color="#CCCCCC"> here's the remaining part of</font>

158
00:07:41,800 --> 00:07:47,139
<font color="#E5E5E5">the</font><font color="#CCCCCC"> input</font><font color="#E5E5E5"> or I have an arrow or I don't</font>

159
00:07:44,380 --> 00:07:49,479
<font color="#CCCCCC">have enough information</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> know if I can</font>

160
00:07:47,139 --> 00:07:50,250
<font color="#CCCCCC">pass so I return incomplete and maybe</font><font color="#E5E5E5"> I</font>

161
00:07:49,479 --> 00:07:54,008
<font color="#E5E5E5">need</font><font color="#CCCCCC"> more</font><font color="#E5E5E5"> data</font>

162
00:07:50,250 --> 00:07:57,490
so the<font color="#CCCCCC"> passes look like this</font><font color="#E5E5E5"> this one is</font>

163
00:07:54,009 --> 00:08:00,250
<font color="#E5E5E5">kind of easy you apply</font><font color="#CCCCCC"> alpha and digit</font>

164
00:07:57,490 --> 00:08:03,699
and return the result of alpha and it

165
00:08:00,250 --> 00:08:05,949
will just generate pattern matching it's

166
00:08:03,699 --> 00:08:09,070
just like branches if the first<font color="#E5E5E5"> pastor</font>

167
00:08:05,949 --> 00:08:11,229
gets<font color="#E5E5E5"> a result I could get a</font><font color="#CCCCCC"> store the</font>

168
00:08:09,070 --> 00:08:13,539
result I get<font color="#E5E5E5"> its remaining part a pass</font>

169
00:08:11,229 --> 00:08:15,370
it to the next<font color="#E5E5E5"> cetera all of the</font><font color="#CCCCCC"> codis</font>

170
00:08:13,539 --> 00:08:17,740
<font color="#E5E5E5">looks a bit like this when</font><font color="#CCCCCC"> generated</font>

171
00:08:15,370 --> 00:08:20,590
well it looks more like this because

172
00:08:17,740 --> 00:08:23,430
there are lots of things to<font color="#E5E5E5"> do but most</font>

173
00:08:20,590 --> 00:08:26,198
of the time it's quite straightforward

174
00:08:23,430 --> 00:08:28,509
<font color="#CCCCCC">so it's</font><font color="#E5E5E5"> perfect</font><font color="#CCCCCC"> metal</font><font color="#E5E5E5"> like most of the</font>

175
00:08:26,199 --> 00:08:30,610
things<font color="#CCCCCC"> we can expect there you can</font>

176
00:08:28,509 --> 00:08:33,279
handle<font color="#CCCCCC"> zero copy passing because the</font>

177
00:08:30,610 --> 00:08:36,880
compiler<font color="#E5E5E5"> will know that we when we</font><font color="#CCCCCC"> will</font>

178
00:08:33,279 --> 00:08:38,740
return<font color="#E5E5E5"> references from the input like I</font>

179
00:08:36,880 --> 00:08:41,380
have a<font color="#E5E5E5"> large input I want to have just</font><font color="#CCCCCC"> a</font>

180
00:08:38,740 --> 00:08:43,150
few<font color="#CCCCCC"> bytes in the middle the compiler</font>

181
00:08:41,380 --> 00:08:46,110
will guarantee that<font color="#E5E5E5"> the data is still</font>

182
00:08:43,150 --> 00:08:48,810
<font color="#E5E5E5">there</font><font color="#CCCCCC"> still</font><font color="#E5E5E5"> available when we return</font><font color="#CCCCCC"> the</font>

183
00:08:46,110 --> 00:08:51,120
the result<font color="#E5E5E5"> so it can be quite hard with</font>

184
00:08:48,810 --> 00:08:53,640
this<font color="#E5E5E5"> design with dreaming in mind so I</font>

185
00:08:51,120 --> 00:08:56,160
<font color="#CCCCCC">said if the pastor</font><font color="#E5E5E5"> has not enough</font><font color="#CCCCCC"> data</font>

186
00:08:53,640 --> 00:08:59,760
it can tell you<font color="#CCCCCC"> okay accumulate more and</font>

187
00:08:56,160 --> 00:09:03,930
<font color="#E5E5E5">come back later and it's made for reward</font>

188
00:08:59,760 --> 00:09:06,269
format like you<font color="#E5E5E5"> can sometimes avoid the</font>

189
00:09:03,930 --> 00:09:08,399
good<font color="#E5E5E5"> theoretical ideas and write an ugly</font>

190
00:09:06,269 --> 00:09:10,170
part and just plug<font color="#E5E5E5"> it</font><font color="#CCCCCC"> aside</font><font color="#E5E5E5"> better</font>

191
00:09:08,399 --> 00:09:14,430
because most of the<font color="#E5E5E5"> format's we see are</font>

192
00:09:10,170 --> 00:09:18,990
just<font color="#E5E5E5"> bad design so there are lots and</font>

193
00:09:14,430 --> 00:09:21,329
<font color="#E5E5E5">lots</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> format</font><font color="#CCCCCC"> available</font><font color="#E5E5E5"> and now we see</font>

194
00:09:18,990 --> 00:09:23,399
how we can integrate that<font color="#E5E5E5"> inside</font>

195
00:09:21,329 --> 00:09:28,649
existing<font color="#CCCCCC"> application so to</font><font color="#E5E5E5"> regather on</font>

196
00:09:23,399 --> 00:09:31,290
the<font color="#E5E5E5"> negativity bear okay so we want to</font>

197
00:09:28,649 --> 00:09:33,990
try all claims<font color="#E5E5E5"> in</font><font color="#CCCCCC"> real world project</font><font color="#E5E5E5"> so</font>

198
00:09:31,290 --> 00:09:37,380
project that has a many lines of<font color="#E5E5E5"> code</font>

199
00:09:33,990 --> 00:09:40,829
<font color="#E5E5E5">that have constrained some performances</font>

200
00:09:37,380 --> 00:09:44,100
and stuff like that and<font color="#E5E5E5"> we want to help</font>

201
00:09:40,829 --> 00:09:47,099
that make that first step<font color="#E5E5E5"> towards</font>

202
00:09:44,100 --> 00:09:49,470
security<font color="#CCCCCC"> it's important</font><font color="#E5E5E5"> to show people</font>

203
00:09:47,100 --> 00:09:51,779
what has to be done<font color="#CCCCCC"> correctly instead of</font>

204
00:09:49,470 --> 00:09:54,390
just<font color="#E5E5E5"> blaming them from from writing</font>

205
00:09:51,779 --> 00:09:57,839
insecure stuff okay so we want<font color="#E5E5E5"> to help</font>

206
00:09:54,390 --> 00:10:01,649
<font color="#E5E5E5">them improving things without breaking</font>

207
00:09:57,839 --> 00:10:04,079
all of<font color="#CCCCCC"> this of their software</font><font color="#E5E5E5"> so I'm</font>

208
00:10:01,649 --> 00:10:07,709
taking<font color="#CCCCCC"> sericata as an</font><font color="#E5E5E5"> example so ricotta</font>

209
00:10:04,079 --> 00:10:11,370
is a<font color="#E5E5E5"> network idea</font><font color="#CCCCCC"> so it's passing</font>

210
00:10:07,709 --> 00:10:14,310
network traffic at very high speed it

211
00:10:11,370 --> 00:10:16,860
has to<font color="#CCCCCC"> support lots of</font><font color="#E5E5E5"> passes so we</font><font color="#CCCCCC"> are</font>

212
00:10:14,310 --> 00:10:20,849
<font color="#E5E5E5">not talking about one or</font><font color="#CCCCCC"> two</font><font color="#E5E5E5"> but we are</font>

213
00:10:16,860 --> 00:10:22,680
talking<font color="#CCCCCC"> about</font><font color="#E5E5E5"> 100 of them</font><font color="#CCCCCC"> it's heavily</font>

214
00:10:20,850 --> 00:10:24,720
multi-threaded and that a huge

215
00:10:22,680 --> 00:10:27,270
constraint when you're<font color="#E5E5E5"> writing a</font><font color="#CCCCCC"> pattern</font>

216
00:10:24,720 --> 00:10:31,709
<font color="#E5E5E5">because you have to worry perfect code</font>

217
00:10:27,270 --> 00:10:35,310
and it has to do<font color="#E5E5E5"> that</font><font color="#CCCCCC"> too to pass</font><font color="#E5E5E5"> a 10th</font>

218
00:10:31,709 --> 00:10:38,189
of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> of gigabytes per second</font><font color="#E5E5E5"> so we we</font>

219
00:10:35,310 --> 00:10:40,439
have to prove that<font color="#CCCCCC"> it can</font><font color="#E5E5E5"> work in real</font>

220
00:10:38,190 --> 00:10:44,910
life<font color="#E5E5E5"> application and not only for small</font>

221
00:10:40,440 --> 00:10:47,579
examples so<font color="#E5E5E5"> let's build a hardened sorry</font>

222
00:10:44,910 --> 00:10:49,910
Jana<font color="#E5E5E5"> so this this is my</font><font color="#CCCCCC"> version of</font><font color="#E5E5E5"> the</font>

223
00:10:47,579 --> 00:10:52,290
hardened<font color="#E5E5E5"> serger</font>

224
00:10:49,910 --> 00:10:54,510
I'll give you another<font color="#CCCCCC"> view of</font><font color="#E5E5E5"> the method</font>

225
00:10:52,290 --> 00:10:57,360
<font color="#CCCCCC">okay so we will try to isolate Christian</font>

226
00:10:54,510 --> 00:10:59,730
function we want to<font color="#E5E5E5"> rely on the</font><font color="#CCCCCC"> existing</font>

227
00:10:57,360 --> 00:11:02,639
code we want<font color="#E5E5E5"> to avoid rewrite</font>

228
00:10:59,730 --> 00:11:04,440
the helper functions of the<font color="#E5E5E5"> program</font>

229
00:11:02,639 --> 00:11:06,480
itself we want<font color="#E5E5E5"> to use them the login</font>

230
00:11:04,440 --> 00:11:08,310
function the detection function and so

231
00:11:06,480 --> 00:11:14,699
on<font color="#E5E5E5"> and we want</font><font color="#CCCCCC"> to keep performances and</font>

232
00:11:08,310 --> 00:11:18,000
thread safety mode<font color="#E5E5E5"> mostly so we've done</font>

233
00:11:14,699 --> 00:11:19,740
that<font color="#E5E5E5"> on several protocols</font><font color="#CCCCCC"> I just used</font>

234
00:11:18,000 --> 00:11:22,250
here lesson<font color="#E5E5E5"> as an example</font><font color="#CCCCCC"> it's a good</font>

235
00:11:19,740 --> 00:11:25,529
<font color="#E5E5E5">example</font><font color="#CCCCCC"> of an important protocol</font><font color="#E5E5E5"> that</font>

236
00:11:22,250 --> 00:11:29,130
almost every single implementation is

237
00:11:25,529 --> 00:11:30,959
wrong so I'm not like claiming<font color="#E5E5E5"> mine is</font>

238
00:11:29,130 --> 00:11:33,959
wrong but as I'm only<font color="#E5E5E5"> implementing</font>

239
00:11:30,959 --> 00:11:38,479
detection well it's not so<font color="#CCCCCC"> bad but still</font>

240
00:11:33,959 --> 00:11:42,869
we want<font color="#E5E5E5"> to avoid memory issues right so</font>

241
00:11:38,480 --> 00:11:46,139
yeah also<font color="#E5E5E5"> I'm the</font><font color="#CCCCCC"> one who wrote the</font>

242
00:11:42,870 --> 00:11:47,880
<font color="#E5E5E5">previous implementation in c at the time</font>

243
00:11:46,139 --> 00:11:53,250
<font color="#CCCCCC">i was thinking i</font><font color="#E5E5E5"> could</font><font color="#CCCCCC"> do</font><font color="#E5E5E5"> that correctly</font>

244
00:11:47,880 --> 00:11:56,490
<font color="#E5E5E5">so now</font><font color="#CCCCCC"> I know so the methodology</font><font color="#E5E5E5"> is to</font>

245
00:11:53,250 --> 00:11:58,019
<font color="#E5E5E5">read a few</font><font color="#CCCCCC"> RFC so if you're jet-lagged</font>

246
00:11:56,490 --> 00:12:00,029
<font color="#CCCCCC">it's it's a good way</font><font color="#E5E5E5"> to solve the</font>

247
00:11:58,019 --> 00:12:02,639
problem you try<font color="#E5E5E5"> to read all them and</font>

248
00:12:00,029 --> 00:12:06,410
then you start<font color="#CCCCCC"> from</font><font color="#E5E5E5"> this specification</font>

249
00:12:02,639 --> 00:12:10,410
<font color="#E5E5E5">which are done like that and you try to</font>

250
00:12:06,410 --> 00:12:13,380
<font color="#E5E5E5">first define the structures okay so we</font>

251
00:12:10,410 --> 00:12:15,810
<font color="#E5E5E5">define the structures in rust here</font><font color="#CCCCCC"> I did</font>

252
00:12:13,380 --> 00:12:17,639
<font color="#E5E5E5">the higher</font><font color="#CCCCCC"> level structures I have not</font>

253
00:12:15,810 --> 00:12:21,479
defined<font color="#CCCCCC"> all of the protocol but only the</font>

254
00:12:17,639 --> 00:12:24,149
higher level<font color="#E5E5E5"> and for example we don't we</font>

255
00:12:21,480 --> 00:12:26,790
<font color="#E5E5E5">pause only the server hello but not the</font>

256
00:12:24,149 --> 00:12:30,709
extensions inside so we pass only<font color="#E5E5E5"> the</font>

257
00:12:26,790 --> 00:12:35,189
first<font color="#E5E5E5"> layer of the of the packet</font><font color="#CCCCCC"> then</font>

258
00:12:30,709 --> 00:12:38,638
<font color="#CCCCCC">we'll declare</font><font color="#E5E5E5"> the the structure we write</font>

259
00:12:35,190 --> 00:12:41,010
the pattern<font color="#E5E5E5"> so this is the actual</font><font color="#CCCCCC"> passer</font>

260
00:12:38,639 --> 00:12:44,279
<font color="#E5E5E5">for the</font><font color="#CCCCCC"> server</font><font color="#E5E5E5"> hello so I I think it's</font>

261
00:12:41,010 --> 00:12:47,310
rather small<font color="#E5E5E5"> and thanks to</font><font color="#CCCCCC"> Nam and</font>

262
00:12:44,279 --> 00:12:49,920
thanks to<font color="#CCCCCC"> rust it is</font><font color="#E5E5E5"> a memory safe and</font>

263
00:12:47,310 --> 00:12:52,829
it also adds all the<font color="#CCCCCC"> error checking code</font>

264
00:12:49,920 --> 00:12:55,649
which is really<font color="#E5E5E5"> really important that</font>

265
00:12:52,829 --> 00:12:58,019
usually<font color="#CCCCCC"> where parsers written in a safe</font>

266
00:12:55,649 --> 00:13:00,000
language fail<font color="#E5E5E5"> you have</font><font color="#CCCCCC"> to check every</font>

267
00:12:58,019 --> 00:13:03,240
<font color="#CCCCCC">single failure</font><font color="#E5E5E5"> that can happen for</font>

268
00:13:00,000 --> 00:13:06,720
<font color="#E5E5E5">example</font><font color="#CCCCCC"> incomplete reads here all of the</font>

269
00:13:03,240 --> 00:13:08,660
code is completely tested<font color="#E5E5E5"> for every</font>

270
00:13:06,720 --> 00:13:12,050
single<font color="#E5E5E5"> possibility of error</font>

271
00:13:08,660 --> 00:13:13,939
so once you did that<font color="#E5E5E5"> you returned</font><font color="#CCCCCC"> the</font>

272
00:13:12,050 --> 00:13:16,010
structure so the actual code is only the

273
00:13:13,940 --> 00:13:18,410
<font color="#E5E5E5">two third lines because the two last</font>

274
00:13:16,010 --> 00:13:23,420
lines are because you only<font color="#CCCCCC"> returned the</font>

275
00:13:18,410 --> 00:13:26,329
structure then you<font color="#E5E5E5"> refine the parser</font><font color="#CCCCCC"> as</font>

276
00:13:23,420 --> 00:13:28,490
I said we've not<font color="#E5E5E5"> DTLS extensions so</font>

277
00:13:26,330 --> 00:13:32,600
let's now declare the extensions<font color="#E5E5E5"> and</font>

278
00:13:28,490 --> 00:13:35,210
then instead<font color="#CCCCCC"> of</font><font color="#E5E5E5"> talking the a slice</font>

279
00:13:32,600 --> 00:13:38,150
which is a buffer in the<font color="#CCCCCC"> first level</font>

280
00:13:35,210 --> 00:13:41,300
structure will now return a<font color="#E5E5E5"> vector of</font>

281
00:13:38,150 --> 00:13:43,939
TLS extension which we can see in in the

282
00:13:41,300 --> 00:13:47,089
<font color="#E5E5E5">last line</font><font color="#CCCCCC"> and if we do</font><font color="#E5E5E5"> that on an all we</font>

283
00:13:43,940 --> 00:13:49,670
just<font color="#E5E5E5"> implement the full protocol having</font>

284
00:13:47,090 --> 00:13:52,190
a very simple implementation<font color="#E5E5E5"> that works</font>

285
00:13:49,670 --> 00:13:55,699
at<font color="#E5E5E5"> every time so it's a very</font><font color="#CCCCCC"> easy way</font>

286
00:13:52,190 --> 00:14:02,960
<font color="#E5E5E5">very fast way to develop</font><font color="#CCCCCC"> parser and and</font>

287
00:13:55,700 --> 00:14:06,050
to do that<font color="#E5E5E5"> in a memory safe way once</font>

288
00:14:02,960 --> 00:14:09,800
you've done that well it's not<font color="#E5E5E5"> enough</font>

289
00:14:06,050 --> 00:14:12,680
because<font color="#E5E5E5"> TLS is a kind of protocol you</font>

290
00:14:09,800 --> 00:14:15,530
you encounter in<font color="#CCCCCC"> real life that is a</font>

291
00:14:12,680 --> 00:14:18,199
stateful protocol<font color="#E5E5E5"> meaning you have to</font>

292
00:14:15,530 --> 00:14:21,319
know which<font color="#CCCCCC"> stage you are to know how to</font>

293
00:14:18,200 --> 00:14:25,160
pass the<font color="#E5E5E5"> next packet and I'm really</font>

294
00:14:21,320 --> 00:14:27,950
talking<font color="#E5E5E5"> about packet so this is one</font>

295
00:14:25,160 --> 00:14:30,860
<font color="#CCCCCC">keyless state machine because there are</font>

296
00:14:27,950 --> 00:14:33,350
as many<font color="#E5E5E5"> as implementations in fact the</font>

297
00:14:30,860 --> 00:14:35,930
specification did not specify the state

298
00:14:33,350 --> 00:14:38,270
machine but we've been trying<font color="#E5E5E5"> to think</font>

299
00:14:35,930 --> 00:14:42,770
<font color="#CCCCCC">about</font><font color="#E5E5E5"> how to specify that in a way that</font>

300
00:14:38,270 --> 00:14:44,870
<font color="#CCCCCC">is easy for developers to</font><font color="#E5E5E5"> write and</font><font color="#CCCCCC"> to</font>

301
00:14:42,770 --> 00:14:46,640
ensure that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can verify that</font><font color="#E5E5E5"> the</font>

302
00:14:44,870 --> 00:14:50,270
statement state machine is correct

303
00:14:46,640 --> 00:14:54,710
so the state machine is simply an inner

304
00:14:50,270 --> 00:14:58,390
ocean of possible<font color="#CCCCCC"> states</font><font color="#E5E5E5"> and we've</font>

305
00:14:54,710 --> 00:15:01,430
decided to<font color="#E5E5E5"> implement it as a simple</font>

306
00:14:58,390 --> 00:15:03,020
enumeration of matches which is you just

307
00:15:01,430 --> 00:15:05,479
<font color="#E5E5E5">compare the old state and</font><font color="#CCCCCC"> the new</font>

308
00:15:03,020 --> 00:15:09,560
message<font color="#CCCCCC"> and</font><font color="#E5E5E5"> given that you end up in a</font>

309
00:15:05,480 --> 00:15:12,860
in<font color="#E5E5E5"> the new state so the entire</font><font color="#CCCCCC"> kls state</font>

310
00:15:09,560 --> 00:15:17,979
machine which is usually almost<font color="#CCCCCC"> 1,000</font>

311
00:15:12,860 --> 00:15:22,090
line of C code<font color="#E5E5E5"> now fits</font><font color="#CCCCCC"> in 270 lines of</font>

312
00:15:17,980 --> 00:15:24,250
<font color="#E5E5E5">roast code right so it's not only a bit</font>

313
00:15:22,090 --> 00:15:27,730
better but if you look at the last line

314
00:15:24,250 --> 00:15:31,960
<font color="#E5E5E5">all of</font><font color="#CCCCCC"> the error 'invalid transitions</font>

315
00:15:27,730 --> 00:15:34,420
are handled in just one case so I think

316
00:15:31,960 --> 00:15:36,760
it's pretty nice and<font color="#E5E5E5"> for example the</font>

317
00:15:34,420 --> 00:15:40,839
evolution<font color="#CCCCCC"> to</font><font color="#E5E5E5"> TLS 1.3 was really simple</font>

318
00:15:36,760 --> 00:15:44,410
<font color="#E5E5E5">writing</font><font color="#CCCCCC"> that way</font><font color="#E5E5E5"> so this is only the</font>

319
00:15:40,840 --> 00:15:46,300
first step<font color="#CCCCCC"> right</font><font color="#E5E5E5"> we we write a parser we</font>

320
00:15:44,410 --> 00:15:48,400
need to test it<font color="#E5E5E5"> so let's try to see if</font>

321
00:15:46,300 --> 00:15:50,680
<font color="#CCCCCC">we if you</font><font color="#E5E5E5"> be testing correctly and why</font>

322
00:15:48,400 --> 00:15:52,120
is it<font color="#E5E5E5"> important it's important because</font>

323
00:15:50,680 --> 00:15:54,849
the<font color="#E5E5E5"> first</font><font color="#CCCCCC"> question if you want to</font>

324
00:15:52,120 --> 00:15:56,470
<font color="#E5E5E5">replace something in existing code the</font>

325
00:15:54,850 --> 00:15:59,200
first<font color="#E5E5E5"> question people will ask you is</font>

326
00:15:56,470 --> 00:16:01,180
<font color="#CCCCCC">that it works</font><font color="#E5E5E5"> exactly the same</font><font color="#CCCCCC"> way as</font>

327
00:15:59,200 --> 00:16:03,460
before<font color="#E5E5E5"> so you have to prove</font><font color="#CCCCCC"> equivalents</font>

328
00:16:01,180 --> 00:16:05,949
in<font color="#E5E5E5"> tests of in terms of performance</font><font color="#CCCCCC"> and</font>

329
00:16:03,460 --> 00:16:08,020
<font color="#E5E5E5">in terms of functionality so we'll use</font>

330
00:16:05,950 --> 00:16:12,540
two tools for that<font color="#E5E5E5"> we'll use benchmark</font>

331
00:16:08,020 --> 00:16:15,640
communities well<font color="#E5E5E5"> benchmarks I won't go</font>

332
00:16:12,540 --> 00:16:19,270
well I won't<font color="#E5E5E5"> detail that because you</font>

333
00:16:15,640 --> 00:16:22,720
know the<font color="#E5E5E5"> the method</font><font color="#CCCCCC"> just know</font><font color="#E5E5E5"> that for</font>

334
00:16:19,270 --> 00:16:26,140
<font color="#CCCCCC">example in the specific case of TLS I've</font>

335
00:16:22,720 --> 00:16:32,320
<font color="#CCCCCC">achieved</font><font color="#E5E5E5"> being I mean between five and</font>

336
00:16:26,140 --> 00:16:34,050
<font color="#E5E5E5">ten</font><font color="#CCCCCC"> percent longer than</font><font color="#E5E5E5"> the C code so</font>

337
00:16:32,320 --> 00:16:38,590
<font color="#CCCCCC">there is only a very small difference</font>

338
00:16:34,050 --> 00:16:41,979
<font color="#E5E5E5">which is I think a good result but after</font>

339
00:16:38,590 --> 00:16:44,980
<font color="#E5E5E5">performance you have to use unit tests</font>

340
00:16:41,980 --> 00:16:47,320
<font color="#CCCCCC">so when declaring</font><font color="#E5E5E5"> you a unit</font><font color="#CCCCCC"> test</font><font color="#E5E5E5"> you</font>

341
00:16:44,980 --> 00:16:49,240
<font color="#E5E5E5">just declare well what you expect</font>

342
00:16:47,320 --> 00:16:53,260
you just part later and then you just

343
00:16:49,240 --> 00:16:56,110
<font color="#CCCCCC">compare to one useful tip is to use</font><font color="#E5E5E5"> the</font>

344
00:16:53,260 --> 00:16:58,330
<font color="#CCCCCC">project</font><font color="#E5E5E5"> existing unit test sorry cat has</font>

345
00:16:56,110 --> 00:17:00,490
a lot<font color="#E5E5E5"> of unit tests that are embedded</font><font color="#CCCCCC"> in</font>

346
00:16:58,330 --> 00:17:02,440
the<font color="#E5E5E5"> code</font><font color="#CCCCCC"> I just wrote a single layer</font>

347
00:17:00,490 --> 00:17:10,480
that can<font color="#E5E5E5"> extract this unit test and</font>

348
00:17:02,440 --> 00:17:12,760
already<font color="#CCCCCC"> use them for the</font><font color="#E5E5E5"> parser to test</font>

349
00:17:10,480 --> 00:17:14,560
security<font color="#CCCCCC"> well mostly there are two ways</font>

350
00:17:12,760 --> 00:17:16,440
<font color="#CCCCCC">I won't detail it because details</font><font color="#E5E5E5"> are in</font>

351
00:17:14,560 --> 00:17:19,329
the paper<font color="#E5E5E5"> manual</font><font color="#CCCCCC"> Shaikh we did</font>

352
00:17:16,440 --> 00:17:21,580
disassemble all the<font color="#CCCCCC"> ir and assembly code</font>

353
00:17:19,329 --> 00:17:23,050
generated to verify that<font color="#E5E5E5"> some properties</font>

354
00:17:21,579 --> 00:17:25,359
are in<font color="#E5E5E5"> and there are some missing</font>

355
00:17:23,050 --> 00:17:28,270
<font color="#E5E5E5">properties and some are here and we use</font>

356
00:17:25,359 --> 00:17:31,449
<font color="#CCCCCC">fading because fading the great way to</font>

357
00:17:28,270 --> 00:17:33,900
first cover<font color="#CCCCCC"> to explore the possible path</font>

358
00:17:31,450 --> 00:17:36,850
so<font color="#E5E5E5"> to get maximum coverage of your code</font>

359
00:17:33,900 --> 00:17:39,040
<font color="#E5E5E5">and also to catch unexpected panic and</font>

360
00:17:36,850 --> 00:17:40,899
kind of debug code you insert in your

361
00:17:39,040 --> 00:17:45,520
<font color="#E5E5E5">puzzle</font><font color="#CCCCCC"> when developing it and you forget</font>

362
00:17:40,900 --> 00:17:48,280
<font color="#CCCCCC">to remove it</font><font color="#E5E5E5"> only expected stuff so the</font>

363
00:17:45,520 --> 00:17:50,830
tools where<font color="#CCCCCC"> you know reading tool these</font>

364
00:17:48,280 --> 00:17:54,180
these<font color="#E5E5E5"> ones are based on a little Adler</font>

365
00:17:50,830 --> 00:17:57,040
and<font color="#E5E5E5"> AFM they are available for</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> and</font>

366
00:17:54,180 --> 00:17:59,680
now that we<font color="#E5E5E5"> have</font><font color="#CCCCCC"> process</font><font color="#E5E5E5"> one problem is</font>

367
00:17:57,040 --> 00:18:04,180
how do we integrate<font color="#E5E5E5"> them into the main</font>

368
00:17:59,680 --> 00:18:08,050
program<font color="#E5E5E5"> so</font><font color="#CCCCCC"> I'll draw a</font><font color="#E5E5E5"> describe that so</font>

369
00:18:04,180 --> 00:18:10,240
<font color="#CCCCCC">I'll click</font><font color="#E5E5E5"> VLC as example</font><font color="#CCCCCC"> so lots and</font>

370
00:18:08,050 --> 00:18:13,930
lots of puzzles<font color="#E5E5E5"> in there it's basically</font>

371
00:18:10,240 --> 00:18:15,450
a call<font color="#CCCCCC"> that's a big event loop and then</font>

372
00:18:13,930 --> 00:18:19,090
a few plugins that<font color="#CCCCCC"> are each their own</font>

373
00:18:15,450 --> 00:18:21,400
<font color="#E5E5E5">dynamic library the idea was to write</font><font color="#CCCCCC"> a</font>

374
00:18:19,090 --> 00:18:24,149
dynamic library<font color="#CCCCCC"> in rust</font><font color="#E5E5E5"> with exactly the</font>

375
00:18:21,400 --> 00:18:27,850
same<font color="#E5E5E5"> API so it exports a few functions</font>

376
00:18:24,150 --> 00:18:30,400
<font color="#E5E5E5">registers</font><font color="#CCCCCC"> canonical bugs</font><font color="#E5E5E5"> when talking to</font>

377
00:18:27,850 --> 00:18:33,219
<font color="#E5E5E5">VLC and then we just plug</font><font color="#CCCCCC"> that inside</font>

378
00:18:30,400 --> 00:18:35,110
the vehicle<font color="#CCCCCC"> design should</font><font color="#E5E5E5"> work</font><font color="#CCCCCC"> the idea</font>

379
00:18:33,220 --> 00:18:37,690
<font color="#CCCCCC">is that we must interact with the</font><font color="#E5E5E5"> C code</font>

380
00:18:35,110 --> 00:18:40,419
so we must have the<font color="#E5E5E5"> same functions the</font>

381
00:18:37,690 --> 00:18:42,400
same structures and everything<font color="#CCCCCC"> so we</font>

382
00:18:40,420 --> 00:18:46,000
have to take that<font color="#CCCCCC"> kind of C code that's</font>

383
00:18:42,400 --> 00:18:49,510
kind<font color="#E5E5E5"> of object like C good idea maybe</font>

384
00:18:46,000 --> 00:18:51,790
<font color="#E5E5E5">and</font><font color="#CCCCCC"> write read structure so we can have</font>

385
00:18:49,510 --> 00:18:54,220
structure that can match exactly memory

386
00:18:51,790 --> 00:18:57,460
the ones we have in C so it's very

387
00:18:54,220 --> 00:19:02,140
useful<font color="#CCCCCC"> to</font><font color="#E5E5E5"> do it's a bit concerned to</font>

388
00:18:57,460 --> 00:19:04,360
<font color="#E5E5E5">write but we have tools for that</font><font color="#CCCCCC"> this we</font>

389
00:19:02,140 --> 00:19:07,540
must have a way<font color="#E5E5E5"> to export functions from</font>

390
00:19:04,360 --> 00:19:10,959
<font color="#E5E5E5">the</font><font color="#CCCCCC"> C code we can write safe</font><font color="#E5E5E5"> wrapper</font>

391
00:19:07,540 --> 00:19:14,500
<font color="#E5E5E5">Saudis so the function takes a pointer</font>

392
00:19:10,960 --> 00:19:16,510
under and<font color="#E5E5E5"> I manipulate</font><font color="#CCCCCC"> by slashes which</font>

393
00:19:14,500 --> 00:19:19,390
<font color="#CCCCCC">our structure</font><font color="#E5E5E5"> with a pointer and grant</font>

394
00:19:16,510 --> 00:19:23,470
<font color="#E5E5E5">but I don't have to manipulate that</font>

395
00:19:19,390 --> 00:19:24,820
directly in my<font color="#CCCCCC"> Roscoe rosemon joined the</font>

396
00:19:23,470 --> 00:19:27,040
tool I can automate most of the

397
00:19:24,820 --> 00:19:29,409
conversion from C<font color="#CCCCCC"> to</font><font color="#E5E5E5"> rust</font>

398
00:19:27,040 --> 00:19:32,470
<font color="#E5E5E5">versa also</font><font color="#CCCCCC"> have a rest each other</font><font color="#E5E5E5"> we can</font>

399
00:19:29,410 --> 00:19:35,350
generate<font color="#E5E5E5"> C header from rest code and</font>

400
00:19:32,470 --> 00:19:38,590
exported function<font color="#E5E5E5"> delivering</font>

401
00:19:35,350 --> 00:19:40,510
so the first ID<font color="#CCCCCC"> we make a</font><font color="#E5E5E5"> small posture</font>

402
00:19:38,590 --> 00:19:43,540
for<font color="#E5E5E5"> FLV files so the pleasure</font>

403
00:19:40,510 --> 00:19:45,220
<font color="#CCCCCC">you stuffed</font><font color="#E5E5E5"> just the header and this is</font>

404
00:19:43,540 --> 00:19:48,460
one<font color="#CCCCCC"> of the function</font><font color="#E5E5E5"> that's used in VLC</font>

405
00:19:45,220 --> 00:19:51,610
<font color="#CCCCCC">and during the</font><font color="#E5E5E5"> plug-in so it emulates a</font>

406
00:19:48,460 --> 00:19:54,400
<font color="#CCCCCC">C function let me get the D max</font>

407
00:19:51,610 --> 00:19:57,490
structure and then it will read a bit of

408
00:19:54,400 --> 00:19:59,740
the data<font color="#CCCCCC"> past</font><font color="#E5E5E5"> it and then tell VLC</font><font color="#CCCCCC"> okay</font>

409
00:19:57,490 --> 00:20:01,750
now we go there in the file<font color="#E5E5E5"> from here to</font>

410
00:19:59,740 --> 00:20:03,910
there you<font color="#CCCCCC"> have your your decoding</font><font color="#E5E5E5"> data</font>

411
00:20:01,750 --> 00:20:06,820
and everything<font color="#E5E5E5"> so it does not own the</font>

412
00:20:03,910 --> 00:20:08,890
data it's just<font color="#CCCCCC"> a guest</font><font color="#E5E5E5"> inside</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> C</font>

413
00:20:06,820 --> 00:20:11,230
program<font color="#E5E5E5"> even if it could do somethings</font>

414
00:20:08,890 --> 00:20:13,600
better than C<font color="#CCCCCC"> we're not there to replace</font>

415
00:20:11,230 --> 00:20:18,670
all of<font color="#E5E5E5"> the business logic just</font><font color="#CCCCCC"> a small</font>

416
00:20:13,600 --> 00:20:20,740
<font color="#E5E5E5">part to integrate it's kind of easy in</font>

417
00:20:18,670 --> 00:20:22,810
fact<font color="#E5E5E5"> you can make</font><font color="#CCCCCC"> an object</font><font color="#E5E5E5"> file with</font>

418
00:20:20,740 --> 00:20:24,810
the<font color="#CCCCCC"> res compiler</font><font color="#E5E5E5"> and just plug</font><font color="#CCCCCC"> that</font>

419
00:20:22,810 --> 00:20:27,310
inside the director of the<font color="#CCCCCC"> build system</font>

420
00:20:24,810 --> 00:20:30,340
we could<font color="#E5E5E5"> make a library but</font><font color="#CCCCCC"> lick tool</font>

421
00:20:27,310 --> 00:20:33,220
wants to tell us<font color="#E5E5E5"> that Gil knows better</font>

422
00:20:30,340 --> 00:20:36,070
how<font color="#E5E5E5"> to make a library</font><font color="#CCCCCC"> I disagree but</font>

423
00:20:33,220 --> 00:20:36,820
whatever it<font color="#CCCCCC"> was easier that</font><font color="#E5E5E5"> way for</font>

424
00:20:36,070 --> 00:20:41,110
sericata

425
00:20:36,820 --> 00:20:42,669
<font color="#CCCCCC">we made the knockout file</font><font color="#E5E5E5"> and you can</font>

426
00:20:41,110 --> 00:20:46,590
just link that inside the<font color="#CCCCCC"> project so</font>

427
00:20:42,670 --> 00:20:50,170
Russ it kind of makes it easy to<font color="#E5E5E5"> connect</font>

428
00:20:46,590 --> 00:20:52,570
the<font color="#E5E5E5"> rest part inside the C code just we</font>

429
00:20:50,170 --> 00:20:54,880
plug with the the interface<font color="#CCCCCC"> where we</font>

430
00:20:52,570 --> 00:20:59,230
<font color="#E5E5E5">import and then we plug this in the B</font>

431
00:20:54,880 --> 00:21:02,740
system and so I will let<font color="#CCCCCC"> PR</font><font color="#E5E5E5"> go to</font>

432
00:20:59,230 --> 00:21:05,950
conclude well<font color="#E5E5E5"> so this</font><font color="#CCCCCC"> is just another</font>

433
00:21:02,740 --> 00:21:08,950
<font color="#E5E5E5">view but the</font><font color="#CCCCCC"> details again are</font><font color="#E5E5E5"> in the in</font>

434
00:21:05,950 --> 00:21:12,120
the paper so to sum<font color="#CCCCCC"> up</font><font color="#E5E5E5"> we encourage</font>

435
00:21:08,950 --> 00:21:14,970
writing stand alone and<font color="#E5E5E5"> isolated process</font>

436
00:21:12,120 --> 00:21:18,100
<font color="#E5E5E5">because that not</font><font color="#CCCCCC"> only simplifies</font>

437
00:21:14,970 --> 00:21:20,890
verification<font color="#E5E5E5"> that also makes them</font>

438
00:21:18,100 --> 00:21:23,740
reusable in other<font color="#CCCCCC"> projects as well so</font>

439
00:21:20,890 --> 00:21:27,430
this would help building<font color="#CCCCCC"> referenced</font>

440
00:21:23,740 --> 00:21:29,530
<font color="#CCCCCC">answers that could be correct</font><font color="#E5E5E5"> so first</font>

441
00:21:27,430 --> 00:21:29,860
you write process<font color="#CCCCCC"> but that's the easy</font>

442
00:21:29,530 --> 00:21:31,990
part

443
00:21:29,860 --> 00:21:33,879
once you have<font color="#CCCCCC"> thousands you integrate</font>

444
00:21:31,990 --> 00:21:36,100
them<font color="#E5E5E5"> so you have</font><font color="#CCCCCC"> to write a small</font>

445
00:21:33,880 --> 00:21:38,110
abstraction layer and when your puzzles

446
00:21:36,100 --> 00:21:39,760
are reusable you just if<font color="#CCCCCC"> you want</font><font color="#E5E5E5"> to use</font>

447
00:21:38,110 --> 00:21:42,219
them<font color="#E5E5E5"> in</font><font color="#CCCCCC"> another project</font><font color="#E5E5E5"> you just write</font>

448
00:21:39,760 --> 00:21:46,030
<font color="#E5E5E5">another abstraction layer which should</font>

449
00:21:42,220 --> 00:21:47,980
be as<font color="#E5E5E5"> sane as possible so isolating</font><font color="#CCCCCC"> and</font>

450
00:21:46,030 --> 00:21:50,440
<font color="#CCCCCC">safe api is also</font><font color="#E5E5E5"> a great</font><font color="#CCCCCC"> thing because</font>

451
00:21:47,980 --> 00:21:52,920
<font color="#E5E5E5">for</font><font color="#CCCCCC"> code reviewing you just well it's</font>

452
00:21:50,440 --> 00:21:55,860
just<font color="#E5E5E5"> like the</font><font color="#CCCCCC"> unsupported</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> na</font>

453
00:21:52,920 --> 00:21:58,290
work with a red light<font color="#E5E5E5"> so we just have to</font>

454
00:21:55,860 --> 00:22:00,659
<font color="#CCCCCC">look at unsafe code let that's great for</font>

455
00:21:58,290 --> 00:22:03,120
reviewing<font color="#E5E5E5"> and once you've done</font><font color="#CCCCCC"> that you</font>

456
00:22:00,660 --> 00:22:05,630
<font color="#CCCCCC">just have to replace the person the</font>

457
00:22:03,120 --> 00:22:10,020
project<font color="#E5E5E5"> hoping</font><font color="#CCCCCC"> that you</font><font color="#E5E5E5"> won't break</font>

458
00:22:05,630 --> 00:22:12,360
everything<font color="#E5E5E5"> and</font><font color="#CCCCCC"> and that's nice but</font>

459
00:22:10,020 --> 00:22:14,760
<font color="#E5E5E5">really the</font><font color="#CCCCCC"> nicest result of this</font>

460
00:22:12,360 --> 00:22:17,250
<font color="#CCCCCC">methodology was not only to write safe</font>

461
00:22:14,760 --> 00:22:20,190
<font color="#CCCCCC">passes</font><font color="#E5E5E5"> the the well one of the most</font>

462
00:22:17,250 --> 00:22:23,640
important<font color="#CCCCCC"> result is that writing parser</font>

463
00:22:20,190 --> 00:22:26,460
becomes way faster the the first answer

464
00:22:23,640 --> 00:22:28,080
we had to wrote was a bit slower<font color="#E5E5E5"> maybe</font>

465
00:22:26,460 --> 00:22:30,180
because we had we had<font color="#CCCCCC"> to define the</font>

466
00:22:28,080 --> 00:22:32,340
interfaces<font color="#E5E5E5"> learn the language and so on</font>

467
00:22:30,180 --> 00:22:34,980
<font color="#E5E5E5">but the second one were really fast</font>

468
00:22:32,340 --> 00:22:37,320
<font color="#CCCCCC">really</font><font color="#E5E5E5"> quick writing and</font><font color="#CCCCCC"> no more sexual</font>

469
00:22:34,980 --> 00:22:41,400
you spend less time<font color="#CCCCCC"> in gdb well that's</font>

470
00:22:37,320 --> 00:22:43,980
great<font color="#E5E5E5"> so the feedback from other people</font>

471
00:22:41,400 --> 00:22:47,610
<font color="#CCCCCC">I've been for</font><font color="#E5E5E5"> example trying to convince</font>

472
00:22:43,980 --> 00:22:49,230
<font color="#CCCCCC">other people</font><font color="#E5E5E5"> to try that</font><font color="#CCCCCC"> themselves so</font>

473
00:22:47,610 --> 00:22:51,000
the biggest difficulties are not

474
00:22:49,230 --> 00:22:54,590
<font color="#E5E5E5">technical it's just trying to convince</font>

475
00:22:51,000 --> 00:22:57,690
<font color="#E5E5E5">them to use the tool to</font><font color="#CCCCCC"> try them</font><font color="#E5E5E5"> and</font>

476
00:22:54,590 --> 00:22:59,639
<font color="#E5E5E5">also see</font><font color="#CCCCCC"> people especially doesn't like</font>

477
00:22:57,690 --> 00:23:01,710
<font color="#CCCCCC">first</font><font color="#E5E5E5"> because it's a straight language</font>

478
00:22:59,640 --> 00:23:06,300
but it it's for their own good<font color="#CCCCCC"> I mean</font>

479
00:23:01,710 --> 00:23:08,160
<font color="#E5E5E5">strong</font><font color="#CCCCCC"> typing well readability can can</font>

480
00:23:06,300 --> 00:23:10,860
be<font color="#E5E5E5"> hard sometimes it's just like</font>

481
00:23:08,160 --> 00:23:14,640
learning<font color="#E5E5E5"> a</font><font color="#CCCCCC"> new language</font><font color="#E5E5E5"> so you can find</font>

482
00:23:10,860 --> 00:23:16,860
the<font color="#CCCCCC"> product on these links the codes</font>

483
00:23:14,640 --> 00:23:18,450
will<font color="#CCCCCC"> be integrated upstream very soon</font>

484
00:23:16,860 --> 00:23:20,219
it's just<font color="#E5E5E5"> being discussed and that's</font>

485
00:23:18,450 --> 00:23:22,170
great for<font color="#E5E5E5"> them because they</font><font color="#CCCCCC"> want to try</font>

486
00:23:20,220 --> 00:23:24,150
something<font color="#CCCCCC"> and that's</font><font color="#E5E5E5"> also</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> good result</font>

487
00:23:22,170 --> 00:23:26,730
<font color="#E5E5E5">from the methodology I mean we've been</font>

488
00:23:24,150 --> 00:23:30,840
trying with succeeded in convincing them

489
00:23:26,730 --> 00:23:33,720
<font color="#CCCCCC">to evolve from</font><font color="#E5E5E5"> their previous code to</font>

490
00:23:30,840 --> 00:23:35,550
adding<font color="#CCCCCC"> security by small steps</font><font color="#E5E5E5"> into the</font>

491
00:23:33,720 --> 00:23:39,570
new code<font color="#E5E5E5"> and bringing it more</font><font color="#CCCCCC"> and more</font>

492
00:23:35,550 --> 00:23:41,940
and<font color="#E5E5E5"> more and that's great so to conclude</font>

493
00:23:39,570 --> 00:23:44,760
we'd say<font color="#CCCCCC"> that</font><font color="#E5E5E5"> well it's time</font><font color="#CCCCCC"> to do</font>

494
00:23:41,940 --> 00:23:47,730
better<font color="#E5E5E5"> it's time to really change things</font>

495
00:23:44,760 --> 00:23:49,830
<font color="#CCCCCC">I really agree with the</font><font color="#E5E5E5"> the keynote it</font>

496
00:23:47,730 --> 00:23:52,680
was really it's<font color="#CCCCCC"> very important</font><font color="#E5E5E5"> to change</font>

497
00:23:49,830 --> 00:23:56,330
things<font color="#CCCCCC"> right now</font><font color="#E5E5E5"> we have to to make them</font>

498
00:23:52,680 --> 00:23:59,190
something<font color="#E5E5E5"> and we also try to encourage</font>

499
00:23:56,330 --> 00:24:01,290
building a community around safe<font color="#CCCCCC"> parsers</font>

500
00:23:59,190 --> 00:24:03,390
and<font color="#E5E5E5"> around safe code if we had</font>

501
00:24:01,290 --> 00:24:06,269
referenced<font color="#E5E5E5"> also that could be used in</font>

502
00:24:03,390 --> 00:24:08,299
<font color="#CCCCCC">other languages and</font><font color="#E5E5E5"> rust can be used in</font>

503
00:24:06,269 --> 00:24:11,669
other languages<font color="#CCCCCC"> if we could build a</font>

504
00:24:08,299 --> 00:24:13,950
<font color="#E5E5E5">library of</font><font color="#CCCCCC"> sales</font><font color="#E5E5E5"> process we'd make them</font>

505
00:24:11,669 --> 00:24:16,320
<font color="#E5E5E5">available for more</font><font color="#CCCCCC"> people and maybe</font>

506
00:24:13,950 --> 00:24:18,479
they'll change their own tools<font color="#E5E5E5"> to just</font>

507
00:24:16,320 --> 00:24:20,580
use them<font color="#E5E5E5"> instead</font><font color="#CCCCCC"> of writing them again</font>

508
00:24:18,479 --> 00:24:23,129
and<font color="#E5E5E5"> again so thank you for your</font>

509
00:24:20,580 --> 00:24:25,458
attention<font color="#CCCCCC"> we'll go to</font><font color="#E5E5E5"> questions if you</font>

510
00:24:23,129 --> 00:24:25,458
<font color="#CCCCCC">have</font><font color="#E5E5E5"> some</font>

511
00:24:26,630 --> 00:24:31,380
[Applause]

512
00:24:44,720 --> 00:24:48,550
being able to<font color="#E5E5E5"> safely run</font>

513
00:24:56,510 --> 00:25:04,320
HTTP so<font color="#CCCCCC"> there are already a lot of</font>

514
00:25:01,200 --> 00:25:06,120
project to the web servers<font color="#CCCCCC"> interest</font><font color="#E5E5E5"> I'm</font>

515
00:25:04,320 --> 00:25:07,860
<font color="#E5E5E5">walking on the reverse proxy and I've</font>

516
00:25:06,120 --> 00:25:10,379
spent like most of the day

517
00:25:07,860 --> 00:25:15,389
studying the<font color="#E5E5E5"> HTTP parser that</font><font color="#CCCCCC"> was really</font>

518
00:25:10,380 --> 00:25:17,910
numb<font color="#E5E5E5"> it's still holding apparently</font><font color="#CCCCCC"> then</font>

519
00:25:15,390 --> 00:25:20,610
it's I<font color="#E5E5E5"> think it will be more useful</font><font color="#CCCCCC"> for</font>

520
00:25:17,910 --> 00:25:23,880
the<font color="#E5E5E5"> libraries because we could like find</font>

521
00:25:20,610 --> 00:25:26,820
a way to make a library<font color="#E5E5E5"> that's API</font>

522
00:25:23,880 --> 00:25:32,940
compatible with existing<font color="#E5E5E5"> c1 you can just</font>

523
00:25:26,820 --> 00:25:36,840
replace<font color="#CCCCCC"> that one key point</font><font color="#E5E5E5"> here is that</font>

524
00:25:32,940 --> 00:25:39,600
we we don't rewrite the<font color="#CCCCCC"> entire project</font>

525
00:25:36,840 --> 00:25:46,770
<font color="#E5E5E5">and that is way easier for making it</font>

526
00:25:39,600 --> 00:25:50,159
accepted by developers yep state machine

527
00:25:46,770 --> 00:25:56,520
<font color="#CCCCCC">that was really absolutely disgusting</font>

528
00:25:50,160 --> 00:25:59,790
<font color="#E5E5E5">and with a much</font><font color="#CCCCCC"> more systematic much</font>

529
00:25:56,520 --> 00:26:04,260
nicer representation<font color="#CCCCCC"> one of the things I</font>

530
00:25:59,790 --> 00:26:06,810
feel<font color="#E5E5E5"> that this difference is quite</font>

531
00:26:04,260 --> 00:26:09,030
stunning<font color="#E5E5E5"> one of the things that I'm</font>

532
00:26:06,810 --> 00:26:11,879
thinking about<font color="#E5E5E5"> in the background is</font>

533
00:26:09,030 --> 00:26:14,940
whether we're also as a lot of shotgun

534
00:26:11,880 --> 00:26:17,760
state machines in our car because<font color="#E5E5E5"> there</font>

535
00:26:14,940 --> 00:26:21,210
<font color="#E5E5E5">are lots of instances in which you know</font>

536
00:26:17,760 --> 00:26:22,090
<font color="#E5E5E5">you take an enormous horrible hairball</font>

537
00:26:21,210 --> 00:26:24,880
and

538
00:26:22,090 --> 00:26:27,129
it really what it is<font color="#CCCCCC"> concealing</font><font color="#E5E5E5"> is a</font>

539
00:26:24,880 --> 00:26:28,480
small much more easy<font color="#E5E5E5"> to add a lot of</font>

540
00:26:27,130 --> 00:26:30,039
state machine<font color="#E5E5E5"> micelle there's a</font>

541
00:26:28,480 --> 00:26:33,510
<font color="#E5E5E5">professional</font><font color="#CCCCCC"> language paper two years</font>

542
00:26:30,039 --> 00:26:36,279
ago yeah so the<font color="#E5E5E5"> question here is whether</font>

543
00:26:33,510 --> 00:26:38,049
whether<font color="#E5E5E5"> raise it</font><font color="#CCCCCC"> formalizing state</font>

544
00:26:36,279 --> 00:26:41,380
machines<font color="#CCCCCC"> being</font><font color="#E5E5E5"> much bigger</font>

545
00:26:38,049 --> 00:26:43,600
representations it<font color="#E5E5E5"> is that you will do</font>

546
00:26:41,380 --> 00:26:47,380
the<font color="#CCCCCC"> to the formalization</font><font color="#E5E5E5"> languages and</font>

547
00:26:43,600 --> 00:26:53,110
<font color="#CCCCCC">generated</font><font color="#E5E5E5"> and anger that</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> business</font>

548
00:26:47,380 --> 00:26:56,020
looks like a<font color="#E5E5E5"> beautiful example yeah the</font>

549
00:26:53,110 --> 00:26:58,479
issue<font color="#E5E5E5"> is real I totally agree</font><font color="#CCCCCC"> I showed</font>

550
00:26:56,020 --> 00:27:00,190
the<font color="#E5E5E5"> best part because</font><font color="#CCCCCC"> sometime</font><font color="#E5E5E5"> here you</font>

551
00:26:58,480 --> 00:27:02,380
have to match<font color="#E5E5E5"> the content of the packet</font>

552
00:27:00,190 --> 00:27:05,830
<font color="#CCCCCC">to decide on the next set so it's not so</font>

553
00:27:02,380 --> 00:27:09,070
<font color="#CCCCCC">easy to completely describe in a very</font>

554
00:27:05,830 --> 00:27:12,760
formal<font color="#E5E5E5"> way at least I've not thought</font>

555
00:27:09,070 --> 00:27:16,960
<font color="#E5E5E5">very long about that so I surely missed</font>

556
00:27:12,760 --> 00:27:20,590
a theory<font color="#CCCCCC"> or good representation on that</font>

557
00:27:16,960 --> 00:27:22,450
this was<font color="#CCCCCC"> just a intuition I mean that's</font>

558
00:27:20,590 --> 00:27:25,299
just<font color="#CCCCCC"> the</font><font color="#E5E5E5"> first code I wrote on</font><font color="#CCCCCC"> the on</font>

559
00:27:22,450 --> 00:27:28,990
this specific state machine and<font color="#E5E5E5"> it just</font>

560
00:27:25,299 --> 00:27:31,389
proved to<font color="#CCCCCC"> be</font><font color="#E5E5E5"> quite easy enough I just</font>

561
00:27:28,990 --> 00:27:33,909
<font color="#CCCCCC">removed</font><font color="#E5E5E5"> in fact the some</font><font color="#CCCCCC"> of the keywords</font>

562
00:27:31,390 --> 00:27:38,500
<font color="#CCCCCC">just to make it fit on one slide but</font>

563
00:27:33,909 --> 00:27:40,539
that's<font color="#E5E5E5"> exactly the distribution</font><font color="#CCCCCC"> and yes</font>

564
00:27:38,500 --> 00:27:42,190
we need<font color="#E5E5E5"> to</font><font color="#CCCCCC"> work also on</font><font color="#E5E5E5"> state machine</font>

565
00:27:40,539 --> 00:27:45,480
because not<font color="#CCCCCC"> only the parsing is a very</font>

566
00:27:42,190 --> 00:27:47,860
sensible problem the state machines<font color="#E5E5E5"> in</font>

567
00:27:45,480 --> 00:27:50,529
clients or servers for example are

568
00:27:47,860 --> 00:27:53,500
really often<font color="#E5E5E5"> badly implemented so</font>

569
00:27:50,529 --> 00:27:55,419
sometimes<font color="#E5E5E5"> we've been trying to</font><font color="#CCCCCC"> fill the</font>

570
00:27:53,500 --> 00:27:58,860
state machine and achieve good results

571
00:27:55,419 --> 00:27:58,860
especially<font color="#CCCCCC"> in calais</font>

572
00:28:05,049 --> 00:28:24,360
University certainly<font color="#CCCCCC"> there's</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> left</font>

573
00:28:13,989 --> 00:28:26,890
come on take<font color="#CCCCCC"> em up it no thank you</font>

574
00:28:24,360 --> 00:28:26,889
[Applause]

