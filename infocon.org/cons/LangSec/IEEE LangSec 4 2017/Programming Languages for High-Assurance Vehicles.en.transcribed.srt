1
00:00:03,000 --> 00:00:08,610
<font color="#E5E5E5">okay so what I want to do to kick things</font>

2
00:00:06,450 --> 00:00:10,889
off is like on<font color="#E5E5E5"> the next slide put</font>

3
00:00:08,610 --> 00:00:13,440
together a graphic to kind of summarize

4
00:00:10,889 --> 00:00:14,910
<font color="#E5E5E5">where we're at with the state of the art</font>

5
00:00:13,440 --> 00:00:17,880
in terms of<font color="#E5E5E5"> security for embedded</font>

6
00:00:14,910 --> 00:00:20,550
<font color="#CCCCCC">systems and</font><font color="#E5E5E5"> it looks</font><font color="#CCCCCC"> like this</font><font color="#E5E5E5"> in my my</font>

7
00:00:17,880 --> 00:00:22,140
<font color="#E5E5E5">point here is</font><font color="#CCCCCC"> that with respect to</font>

8
00:00:20,550 --> 00:00:24,419
embedded systems and<font color="#E5E5E5"> security we're</font>

9
00:00:22,140 --> 00:00:26,789
stuck in the 70s<font color="#CCCCCC"> right the disco era and</font>

10
00:00:24,419 --> 00:00:29,189
why is that<font color="#E5E5E5"> well the reason</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> because</font>

11
00:00:26,789 --> 00:00:31,050
we're still using<font color="#E5E5E5"> the</font><font color="#CCCCCC"> same</font><font color="#E5E5E5"> tools and</font>

12
00:00:29,189 --> 00:00:33,989
techniques<font color="#CCCCCC"> for building better systems</font>

13
00:00:31,050 --> 00:00:36,330
that we've<font color="#E5E5E5"> been using since then so</font>

14
00:00:33,989 --> 00:00:40,080
generally this<font color="#CCCCCC"> means doing development</font>

15
00:00:36,330 --> 00:00:42,390
and<font color="#E5E5E5"> C or C++</font><font color="#CCCCCC"> you know building</font><font color="#E5E5E5"> these new</font>

16
00:00:40,080 --> 00:00:44,370
tools<font color="#E5E5E5"> if you're lucky and you've got a</font>

17
00:00:42,390 --> 00:00:46,230
JTAG header on your board<font color="#E5E5E5"> you can use</font>

18
00:00:44,370 --> 00:00:50,280
gdb to debug it otherwise you may be

19
00:00:46,230 --> 00:00:53,160
blinking<font color="#E5E5E5"> LEDs or sending data over the</font>

20
00:00:50,280 --> 00:00:55,740
you are so<font color="#E5E5E5"> um although we're still</font>

21
00:00:53,160 --> 00:00:58,800
<font color="#E5E5E5">building systems the same way we've been</font>

22
00:00:55,740 --> 00:01:00,560
<font color="#CCCCCC">doing it for decades now the complexity</font>

23
00:00:58,800 --> 00:01:03,030
<font color="#CCCCCC">of embedded systems has grown</font>

24
00:01:00,560 --> 00:01:03,510
exponentially so there's a name for<font color="#E5E5E5"> it</font>

25
00:01:03,030 --> 00:01:05,820
<font color="#E5E5E5">right</font>

26
00:01:03,510 --> 00:01:06,990
you know it's fashionable now<font color="#CCCCCC"> not to say</font>

27
00:01:05,820 --> 00:01:10,880
embedded systems but<font color="#E5E5E5"> cyber-physical</font>

28
00:01:06,990 --> 00:01:13,408
<font color="#E5E5E5">systems and the emphasis here</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> that</font>

29
00:01:10,880 --> 00:01:17,009
what<font color="#E5E5E5"> we think of as embedded systems</font>

30
00:01:13,409 --> 00:01:18,600
<font color="#E5E5E5">really has grown in terms of how much</font>

31
00:01:17,010 --> 00:01:20,580
they're networked in<font color="#E5E5E5"> the complexity of</font>

32
00:01:18,600 --> 00:01:23,399
the<font color="#E5E5E5"> system so if you take in a modern</font>

33
00:01:20,580 --> 00:01:26,820
<font color="#CCCCCC">automobile for example inside a</font><font color="#E5E5E5"> modern</font>

34
00:01:23,400 --> 00:01:29,370
vehicle there are dozens<font color="#E5E5E5"> maybe up</font><font color="#CCCCCC"> to a</font>

35
00:01:26,820 --> 00:01:33,059
hundred now of electronic control units

36
00:01:29,370 --> 00:01:35,370
or ECU's so microcontrollers scattered

37
00:01:33,060 --> 00:01:36,990
throughout the<font color="#E5E5E5"> vehicle</font><font color="#CCCCCC"> and they're all</font>

38
00:01:35,370 --> 00:01:39,659
networked<font color="#CCCCCC"> together on data buses</font>

39
00:01:36,990 --> 00:01:43,199
primarily can bus<font color="#E5E5E5"> and there's also a</font>

40
00:01:39,659 --> 00:01:45,570
whole<font color="#CCCCCC"> bunch of external interfaces so</font>

41
00:01:43,200 --> 00:01:48,690
radios connecting to everything from<font color="#CCCCCC"> OD</font>

42
00:01:45,570 --> 00:01:51,149
<font color="#CCCCCC">D obd2 port for the mechanics to</font><font color="#E5E5E5"> plug</font>

43
00:01:48,690 --> 00:01:52,920
<font color="#CCCCCC">into short-range radios like Bluetooth</font>

44
00:01:51,150 --> 00:01:54,930
<font color="#E5E5E5">long range telemetry systems</font>

45
00:01:52,920 --> 00:01:57,690
entertainment systems and so<font color="#E5E5E5"> on and so</font>

46
00:01:54,930 --> 00:02:00,390
forth<font color="#CCCCCC"> so it's not surprising then since</font>

47
00:01:57,690 --> 00:02:02,700
we essentially have<font color="#E5E5E5"> you know complex</font>

48
00:02:00,390 --> 00:02:06,780
<font color="#CCCCCC">networked computers on wheels</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> this</font>

49
00:02:02,700 --> 00:02:09,899
is a<font color="#E5E5E5"> ripe target for attacking and it's</font>

50
00:02:06,780 --> 00:02:12,810
now<font color="#CCCCCC"> pretty broadly known you know some</font>

51
00:02:09,899 --> 00:02:15,260
of the early work happening in 2011<font color="#E5E5E5"> even</font>

52
00:02:12,810 --> 00:02:18,230
earlier that we can

53
00:02:15,260 --> 00:02:20,450
<font color="#CCCCCC">HAC and automobiles so there's a New</font>

54
00:02:18,230 --> 00:02:22,429
<font color="#CCCCCC">York Times clipping</font><font color="#E5E5E5"> also more recent</font>

55
00:02:20,450 --> 00:02:25,819
work<font color="#CCCCCC"> by Charlie Miller and Chris Valek</font>

56
00:02:22,430 --> 00:02:27,590
so here's a table from some of the work

57
00:02:25,819 --> 00:02:29,480
from<font color="#E5E5E5"> University of Washington</font><font color="#CCCCCC"> UC San</font>

58
00:02:27,590 --> 00:02:31,549
Diego<font color="#E5E5E5"> that was</font><font color="#CCCCCC"> mentioned the New York</font>

59
00:02:29,480 --> 00:02:33,230
Times<font color="#E5E5E5"> article and I really like this to</font>

60
00:02:31,549 --> 00:02:35,480
point<font color="#E5E5E5"> out a couple</font><font color="#CCCCCC"> of points that</font><font color="#E5E5E5"> have</font>

61
00:02:33,230 --> 00:02:37,670
been<font color="#E5E5E5"> made</font><font color="#CCCCCC"> here already</font><font color="#E5E5E5"> today so the</font>

62
00:02:35,480 --> 00:02:40,640
first<font color="#CCCCCC"> thing is that</font><font color="#E5E5E5"> so this is</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> table</font>

63
00:02:37,670 --> 00:02:42,619
talking<font color="#CCCCCC"> about all the ways that they're</font>

64
00:02:40,640 --> 00:02:44,869
able<font color="#E5E5E5"> to</font><font color="#CCCCCC"> penetrate</font><font color="#E5E5E5"> a modern automobile</font>

65
00:02:42,620 --> 00:02:46,939
remotely so through these<font color="#E5E5E5"> different</font>

66
00:02:44,870 --> 00:02:49,459
<font color="#E5E5E5">interfaces</font><font color="#CCCCCC"> like things like short-range</font>

67
00:02:46,939 --> 00:02:50,239
radio and<font color="#E5E5E5"> long-range wireless and</font><font color="#CCCCCC"> the</font>

68
00:02:49,459 --> 00:02:51,829
first thing you'll<font color="#E5E5E5"> and draw your</font>

69
00:02:50,239 --> 00:02:53,389
attention to<font color="#E5E5E5"> is the full control column</font>

70
00:02:51,829 --> 00:02:55,400
and what this means<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that no matter</font>

71
00:02:53,389 --> 00:02:58,069
how the attacker got into the<font color="#E5E5E5"> vehicle</font>

72
00:02:55,400 --> 00:03:00,409
<font color="#E5E5E5">were they able to take over any</font><font color="#CCCCCC"> other</font>

73
00:02:58,069 --> 00:03:02,899
functionality in the system so you know

74
00:03:00,409 --> 00:03:05,690
<font color="#E5E5E5">if I can through</font><font color="#CCCCCC"> bluetooth still able to</font>

75
00:03:02,900 --> 00:03:09,290
<font color="#E5E5E5">disable breaks still able to lock the</font>

76
00:03:05,690 --> 00:03:11,510
<font color="#E5E5E5">seat belts still able</font><font color="#CCCCCC"> to change Lane</font>

77
00:03:09,290 --> 00:03:14,030
<font color="#CCCCCC">Assist etc etc and then every case</font><font color="#E5E5E5"> is</font>

78
00:03:11,510 --> 00:03:15,620
yes<font color="#CCCCCC"> so it's a really squishy insights</font>

79
00:03:14,030 --> 00:03:17,450
right like once you<font color="#E5E5E5"> get in it's game</font>

80
00:03:15,620 --> 00:03:19,010
over<font color="#E5E5E5"> the second thing I want to draw</font>

81
00:03:17,450 --> 00:03:21,349
your<font color="#CCCCCC"> attention to</font><font color="#E5E5E5"> and this was mentioned</font>

82
00:03:19,010 --> 00:03:24,260
<font color="#E5E5E5">in the</font><font color="#CCCCCC"> keynote at the</font><font color="#E5E5E5"> beginning is</font><font color="#CCCCCC"> that</font>

83
00:03:21,349 --> 00:03:25,819
what<font color="#E5E5E5"> kind of new esoteric vulnerably</font>

84
00:03:24,260 --> 00:03:27,858
security vulnerabilities that<font color="#E5E5E5"> they use</font>

85
00:03:25,819 --> 00:03:30,319
to get into<font color="#CCCCCC"> these systems</font><font color="#E5E5E5"> right well</font>

86
00:03:27,859 --> 00:03:32,109
<font color="#E5E5E5">none right</font><font color="#CCCCCC"> it's buffer overflow buffer</font>

87
00:03:30,319 --> 00:03:34,819
overflow buffer overflow so you know

88
00:03:32,109 --> 00:03:36,500
we've<font color="#E5E5E5"> got a new more complex system</font><font color="#CCCCCC"> but</font>

89
00:03:34,819 --> 00:03:39,768
it's<font color="#E5E5E5"> the same old problem that we've</font>

90
00:03:36,500 --> 00:03:41,810
known about<font color="#CCCCCC"> for a long time</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> you could</font>

91
00:03:39,769 --> 00:03:43,639
<font color="#E5E5E5">say well you</font><font color="#CCCCCC"> know um</font><font color="#E5E5E5"> you know aren't be</font>

92
00:03:41,810 --> 00:03:47,269
solve problems don't we know how to

93
00:03:43,639 --> 00:03:49,280
address them<font color="#E5E5E5"> and you know there's</font>

94
00:03:47,269 --> 00:03:51,650
approaches like<font color="#E5E5E5"> sandboxing you know</font>

95
00:03:49,280 --> 00:03:53,900
things<font color="#E5E5E5"> like hypervisors and chrome</font>

96
00:03:51,650 --> 00:03:55,730
Native Client<font color="#E5E5E5"> these are open source ways</font>

97
00:03:53,900 --> 00:03:57,650
to sandbox<font color="#E5E5E5"> high-level programming</font>

98
00:03:55,730 --> 00:03:59,000
languages with powerful type systems

99
00:03:57,650 --> 00:04:01,370
that are you know<font color="#E5E5E5"> in particular</font><font color="#CCCCCC"> type</font>

100
00:03:59,000 --> 00:04:04,310
safe and memory safe<font color="#CCCCCC"> you know so two</font>

101
00:04:01,370 --> 00:04:06,319
ones I like functional languages<font color="#CCCCCC"> or oh</font>

102
00:04:04,310 --> 00:04:09,199
<font color="#CCCCCC">camel and Haskell we've got a</font><font color="#E5E5E5"> number of</font>

103
00:04:06,319 --> 00:04:11,388
verification tools but I would say in

104
00:04:09,199 --> 00:04:13,340
the space<font color="#CCCCCC"> of embedded systems these</font><font color="#E5E5E5"> are</font>

105
00:04:11,389 --> 00:04:15,349
not sufficient and why well first of<font color="#E5E5E5"> all</font>

106
00:04:13,340 --> 00:04:18,260
<font color="#E5E5E5">um even though you know it's the modern</font>

107
00:04:15,349 --> 00:04:20,358
<font color="#E5E5E5">era we still use very small impoverished</font>

108
00:04:18,260 --> 00:04:22,340
microcontrollers so everything<font color="#E5E5E5"> from you</font>

109
00:04:20,358 --> 00:04:23,960
know<font color="#E5E5E5"> 8-bit microcontrollers</font><font color="#CCCCCC"> with just a</font>

110
00:04:22,340 --> 00:04:29,000
few kilobytes of RAM and

111
00:04:23,960 --> 00:04:30,580
<font color="#E5E5E5">and and flash for program memory</font><font color="#CCCCCC"> and</font>

112
00:04:29,000 --> 00:04:34,270
<font color="#CCCCCC">without any</font><font color="#E5E5E5"> kind of virtual memory</font>

113
00:04:30,580 --> 00:04:36,318
system<font color="#CCCCCC"> and you know</font><font color="#E5E5E5"> even though a</font>

114
00:04:34,270 --> 00:04:38,568
microcontroller might be<font color="#CCCCCC"> this</font><font color="#E5E5E5"> small like</font>

115
00:04:36,319 --> 00:04:40,280
an Arduino for example<font color="#CCCCCC"> people developed</font>

116
00:04:38,569 --> 00:04:42,620
you know full auto pilots that fit on

117
00:04:40,280 --> 00:04:45,739
these<font color="#E5E5E5"> things you</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> on with just a few</font>

118
00:04:42,620 --> 00:04:47,990
kilobytes of RAM<font color="#CCCCCC"> in contrast you know</font>

119
00:04:45,740 --> 00:04:50,300
something like hello world<font color="#CCCCCC"> in modern</font>

120
00:04:47,990 --> 00:04:54,819
Haskell<font color="#CCCCCC"> compiled it down it's</font><font color="#E5E5E5"> about</font>

121
00:04:50,300 --> 00:04:57,979
requires about<font color="#E5E5E5"> a Meg of RAM to run and a</font>

122
00:04:54,819 --> 00:05:00,349
Meg of size for the executable

123
00:04:57,979 --> 00:05:01,580
not to mention unpredictability in the

124
00:05:00,349 --> 00:05:04,639
<font color="#CCCCCC">runtime system</font><font color="#E5E5E5"> for garbage collection</font>

125
00:05:01,580 --> 00:05:06,620
<font color="#CCCCCC">and furthermore</font><font color="#E5E5E5"> even</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> these systems</font>

126
00:05:04,639 --> 00:05:08,270
are<font color="#CCCCCC"> really small in terms of lines of</font>

127
00:05:06,620 --> 00:05:09,979
code they<font color="#CCCCCC"> can be extraordinarily complex</font>

128
00:05:08,270 --> 00:05:11,719
you've got interrupts<font color="#E5E5E5"> with device</font>

129
00:05:09,979 --> 00:05:14,960
drivers you're running on a<font color="#E5E5E5"> real</font><font color="#CCCCCC"> table</font>

130
00:05:11,720 --> 00:05:16,580
and<font color="#CCCCCC"> are toss</font><font color="#E5E5E5"> so you might have high</font>

131
00:05:14,960 --> 00:05:19,969
levels of<font color="#E5E5E5"> concurrency with periodic</font>

132
00:05:16,580 --> 00:05:22,599
<font color="#CCCCCC">tasks and sporadic</font><font color="#E5E5E5"> tasks and so and not</font>

133
00:05:19,970 --> 00:05:24,740
to mention you linking in Lib C so

134
00:05:22,599 --> 00:05:27,530
<font color="#E5E5E5">modeling and verifying these systems</font>

135
00:05:24,740 --> 00:05:33,050
<font color="#E5E5E5">post talk is very very difficult</font><font color="#CCCCCC"> even if</font>

136
00:05:27,530 --> 00:05:34,270
the code sizes are small<font color="#CCCCCC"> if our problems</font>

137
00:05:33,050 --> 00:05:36,500
<font color="#E5E5E5">not hard enough</font>

138
00:05:34,270 --> 00:05:38,960
<font color="#CCCCCC">additionally in these</font><font color="#E5E5E5"> embedded systems</font>

139
00:05:36,500 --> 00:05:42,020
<font color="#CCCCCC">it's not just like I have</font><font color="#E5E5E5"> to worry about</font>

140
00:05:38,960 --> 00:05:43,849
network<font color="#CCCCCC"> security or crypto or you know</font>

141
00:05:42,020 --> 00:05:46,639
control systems<font color="#E5E5E5"> everything's thrown in</font>

142
00:05:43,849 --> 00:05:50,509
together<font color="#CCCCCC"> right</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> this is a</font><font color="#E5E5E5"> block</font>

143
00:05:46,639 --> 00:05:52,190
diagram<font color="#CCCCCC"> of a autopilot</font><font color="#E5E5E5"> and I'm not going</font>

144
00:05:50,509 --> 00:05:53,990
to go through it but I<font color="#CCCCCC"> just want</font><font color="#E5E5E5"> to draw</font>

145
00:05:52,190 --> 00:05:55,490
<font color="#CCCCCC">your attention to give you a sense of</font>

146
00:05:53,990 --> 00:05:57,020
the complexity of the kinds of

147
00:05:55,490 --> 00:05:58,729
properties<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we add the diversity of</font>

148
00:05:57,020 --> 00:06:00,680
properties we<font color="#CCCCCC"> have to worry</font><font color="#E5E5E5"> about so you</font>

149
00:05:58,729 --> 00:06:03,020
know statically linked<font color="#E5E5E5"> into one</font><font color="#CCCCCC"> binary</font>

150
00:06:00,680 --> 00:06:06,770
<font color="#E5E5E5">you have to deal with</font><font color="#CCCCCC"> a device driver</font>

151
00:06:03,020 --> 00:06:08,508
correction correctness<font color="#E5E5E5"> sensor fusion so</font>

152
00:06:06,770 --> 00:06:10,130
you know Coleman filters we've got

153
00:06:08,509 --> 00:06:13,849
control laws so DeLaval<font color="#E5E5E5"> you know</font>

154
00:06:10,130 --> 00:06:17,330
<font color="#E5E5E5">correctness</font><font color="#CCCCCC"> of dynamic</font><font color="#E5E5E5"> the vehicle</font>

155
00:06:13,849 --> 00:06:19,340
<font color="#E5E5E5">dynamics</font><font color="#CCCCCC"> the comm systems networking</font>

156
00:06:17,330 --> 00:06:20,750
crypto<font color="#E5E5E5"> and all this is together we want</font>

157
00:06:19,340 --> 00:06:25,729
<font color="#CCCCCC">to reason about</font><font color="#E5E5E5"> the correctness of all</font>

158
00:06:20,750 --> 00:06:28,849
<font color="#CCCCCC">of this so as was mentioned to address</font>

159
00:06:25,729 --> 00:06:31,130
this<font color="#E5E5E5"> and see if we can live up to the</font>

160
00:06:28,849 --> 00:06:32,150
<font color="#E5E5E5">Challenger or at least make some</font>

161
00:06:31,130 --> 00:06:33,889
progress

162
00:06:32,150 --> 00:06:35,750
DARPA began the highest<font color="#CCCCCC"> Shore and cyber</font>

163
00:06:33,889 --> 00:06:37,640
military systems<font color="#E5E5E5"> program so this is</font>

164
00:06:35,750 --> 00:06:39,710
the brainchild of Kathleen Fisher who's

165
00:06:37,640 --> 00:06:42,500
now<font color="#E5E5E5"> Tufts</font><font color="#CCCCCC"> and she was the</font><font color="#E5E5E5"> original</font>

166
00:06:39,710 --> 00:06:43,880
program manager<font color="#E5E5E5"> and we were one of the</font>

167
00:06:42,500 --> 00:06:45,140
performers<font color="#E5E5E5"> and</font><font color="#CCCCCC"> we worked with a team</font>

168
00:06:43,880 --> 00:06:48,140
<font color="#CCCCCC">that included Rockwell Collins</font>

169
00:06:45,140 --> 00:06:50,840
University of Minnesota<font color="#CCCCCC"> a Boeing and</font>

170
00:06:48,140 --> 00:06:54,680
<font color="#CCCCCC">Galois where</font><font color="#E5E5E5"> I met and so the idea was</font>

171
00:06:50,840 --> 00:06:57,409
<font color="#E5E5E5">let's start small</font><font color="#CCCCCC"> let's try out to build</font>

172
00:06:54,680 --> 00:06:58,970
<font color="#E5E5E5">if we start take a Greenfield approach</font>

173
00:06:57,410 --> 00:07:03,140
and let's say<font color="#E5E5E5"> let's try to do things the</font>

174
00:06:58,970 --> 00:07:04,790
right<font color="#CCCCCC"> way and build secure systems from</font>

175
00:07:03,140 --> 00:07:07,969
<font color="#E5E5E5">the ground up can we do this for small</font>

176
00:07:04,790 --> 00:07:10,570
<font color="#CCCCCC">systems</font><font color="#E5E5E5"> think like</font><font color="#CCCCCC"> quad rotors</font><font color="#E5E5E5"> and then</font>

177
00:07:07,970 --> 00:07:13,580
work with<font color="#E5E5E5"> Boeing to transition this to</font>

178
00:07:10,570 --> 00:07:15,980
large<font color="#E5E5E5"> complex systems in this case</font>

179
00:07:13,580 --> 00:07:18,530
they're unmanned little bird which is<font color="#CCCCCC"> an</font>

180
00:07:15,980 --> 00:07:20,090
optionally piloted helicopter so human

181
00:07:18,530 --> 00:07:23,450
can fly around this<font color="#CCCCCC"> helicopter</font><font color="#E5E5E5"> it can</font>

182
00:07:20,090 --> 00:07:25,520
just<font color="#E5E5E5"> fly</font><font color="#CCCCCC"> on its own so what I want to</font><font color="#E5E5E5"> do</font>

183
00:07:23,450 --> 00:07:27,440
is<font color="#E5E5E5"> just tell you a bit give you a sense</font>

184
00:07:25,520 --> 00:07:29,930
<font color="#E5E5E5">of the story of you know how we went</font>

185
00:07:27,440 --> 00:07:31,610
about<font color="#E5E5E5"> this so let me take you back</font><font color="#CCCCCC"> to</font>

186
00:07:29,930 --> 00:07:33,460
the<font color="#E5E5E5"> beginning of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> program so is a</font>

187
00:07:31,610 --> 00:07:35,890
long<font color="#E5E5E5"> program is about four years long</font>

188
00:07:33,460 --> 00:07:39,080
but at the beginning<font color="#CCCCCC"> we knew we had to</font>

189
00:07:35,890 --> 00:07:41,030
address multiple airframes<font color="#E5E5E5"> so quickly</font>

190
00:07:39,080 --> 00:07:44,690
moving from you know small auto pilots

191
00:07:41,030 --> 00:07:46,760
<font color="#E5E5E5">to large military systems we were</font>

192
00:07:44,690 --> 00:07:48,800
developing<font color="#CCCCCC"> four</font><font color="#E5E5E5"> brand-new hardware's of</font>

193
00:07:46,760 --> 00:07:52,700
boards that<font color="#CCCCCC"> we would be manufacturing</font>

194
00:07:48,800 --> 00:07:55,010
<font color="#E5E5E5">and as part of the program and we wanted</font>

195
00:07:52,700 --> 00:07:56,930
to be able<font color="#E5E5E5"> to compile our applications</font>

196
00:07:55,010 --> 00:07:59,270
to multiple operating systems<font color="#E5E5E5"> so</font><font color="#CCCCCC"> for</font>

197
00:07:56,930 --> 00:08:01,130
example with in<font color="#E5E5E5"> terms of the</font><font color="#CCCCCC"> real-time</font>

198
00:07:59,270 --> 00:08:04,130
<font color="#E5E5E5">operating systems we used free</font><font color="#CCCCCC"> are toss</font>

199
00:08:01,130 --> 00:08:06,320
which is a available<font color="#E5E5E5"> art</font><font color="#CCCCCC"> artists to do</font>

200
00:08:04,130 --> 00:08:08,930
some initial prototyping but in this

201
00:08:06,320 --> 00:08:10,940
<font color="#E5E5E5">project we are</font><font color="#CCCCCC"> working with Nick does</font>

202
00:08:08,930 --> 00:08:13,490
<font color="#CCCCCC">mention</font><font color="#E5E5E5"> the morning keynote they</font>

203
00:08:10,940 --> 00:08:15,680
developed<font color="#CCCCCC"> STL 4 which</font><font color="#E5E5E5"> is a formally</font>

204
00:08:13,490 --> 00:08:17,270
verified microkernel which we also want

205
00:08:15,680 --> 00:08:19,880
<font color="#CCCCCC">to target as they are developing it as</font>

206
00:08:17,270 --> 00:08:21,669
well as<font color="#E5E5E5"> their verified artists called</font>

207
00:08:19,880 --> 00:08:25,040
<font color="#CCCCCC">Acronis</font><font color="#E5E5E5"> so we need to target multiple</font>

208
00:08:21,669 --> 00:08:28,130
operating<font color="#CCCCCC"> systems oh yeah develop a</font>

209
00:08:25,040 --> 00:08:31,370
fairly sophisticated<font color="#CCCCCC"> autopilot so all</font>

210
00:08:28,130 --> 00:08:33,380
the application code develop a ground

211
00:08:31,370 --> 00:08:35,990
control station<font color="#E5E5E5"> to communicate with the</font>

212
00:08:33,380 --> 00:08:38,120
system with an embedded encrypted data

213
00:08:35,990 --> 00:08:40,610
link and we wanted<font color="#CCCCCC"> to also</font><font color="#E5E5E5"> have some</font>

214
00:08:38,120 --> 00:08:42,740
<font color="#E5E5E5">properties about</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> system that we</font>

215
00:08:40,610 --> 00:08:44,720
could<font color="#E5E5E5"> you know give to a red team for</font>

216
00:08:42,740 --> 00:08:46,310
<font color="#CCCCCC">example to say hey here are the claims</font>

217
00:08:44,720 --> 00:08:49,250
<font color="#E5E5E5">that we're making and we wanted to have</font>

218
00:08:46,310 --> 00:08:49,819
some architectural models to<font color="#E5E5E5"> explain at</font>

219
00:08:49,250 --> 00:08:52,790
a higher

220
00:08:49,820 --> 00:08:54,770
level what<font color="#E5E5E5"> the system supposed to do in</font>

221
00:08:52,790 --> 00:08:56,689
terms<font color="#E5E5E5"> of the the hardware and the</font>

222
00:08:54,770 --> 00:08:58,790
network<font color="#E5E5E5"> buses and we were stuck in</font><font color="#CCCCCC"> the</font>

223
00:08:56,690 --> 00:09:00,470
<font color="#E5E5E5">middle so developing</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> system and the</font>

224
00:08:58,790 --> 00:09:02,599
approach we took was one of building

225
00:09:00,470 --> 00:09:05,840
domain-specific languages or<font color="#CCCCCC"> DSL so that</font>

226
00:09:02,600 --> 00:09:08,060
we could generate<font color="#E5E5E5"> from one from a family</font>

227
00:09:05,840 --> 00:09:10,130
of<font color="#E5E5E5"> DSL the security properties the</font>

228
00:09:08,060 --> 00:09:13,250
architectural models and the software

229
00:09:10,130 --> 00:09:18,290
<font color="#E5E5E5">and</font><font color="#CCCCCC"> so this is what what at the end of</font>

230
00:09:13,250 --> 00:09:22,040
this<font color="#E5E5E5"> this was given to a red team in an</font>

231
00:09:18,290 --> 00:09:24,890
iterative<font color="#CCCCCC"> fashion and I'm kind of</font>

232
00:09:22,040 --> 00:09:29,540
spoiling the surprise but they said this

233
00:09:24,890 --> 00:09:30,949
<font color="#E5E5E5">is a that it was free from the</font><font color="#CCCCCC"> normal</font>

234
00:09:29,540 --> 00:09:33,920
defects that<font color="#E5E5E5"> they found so I'm not</font><font color="#CCCCCC"> going</font>

235
00:09:30,950 --> 00:09:37,160
<font color="#CCCCCC">to claim it's perfectly secure but it</font>

236
00:09:33,920 --> 00:09:38,750
was it<font color="#E5E5E5"> was more hardened than any of the</font>

237
00:09:37,160 --> 00:09:41,300
other systems<font color="#CCCCCC"> that they had</font><font color="#E5E5E5"> looked at in</font>

238
00:09:38,750 --> 00:09:42,740
a bench to benchmark<font color="#E5E5E5"> the kinds of</font>

239
00:09:41,300 --> 00:09:44,839
security<font color="#CCCCCC"> that they see in these systems</font>

240
00:09:42,740 --> 00:09:46,700
<font color="#CCCCCC">is one government official remarked</font><font color="#E5E5E5"> this</font>

241
00:09:44,840 --> 00:09:48,440
<font color="#E5E5E5">was the most secure UAV in the world</font>

242
00:09:46,700 --> 00:09:51,680
that we'd built<font color="#CCCCCC"> and by the way we did</font>

243
00:09:48,440 --> 00:09:53,510
this in 18<font color="#CCCCCC"> months ok</font><font color="#E5E5E5"> so what I want to</font>

244
00:09:51,680 --> 00:09:58,069
<font color="#E5E5E5">talk about is how we built via</font><font color="#CCCCCC"> cells for</font>

245
00:09:53,510 --> 00:09:59,990
<font color="#E5E5E5">coaching this problem and so at Galois</font>

246
00:09:58,070 --> 00:10:01,490
we are big<font color="#CCCCCC"> fans of functional</font>

247
00:09:59,990 --> 00:10:02,750
programming<font color="#CCCCCC"> and in particular</font><font color="#E5E5E5"> Haskell</font>

248
00:10:01,490 --> 00:10:05,410
and so we thought you know<font color="#E5E5E5"> would</font><font color="#CCCCCC"> it be</font>

249
00:10:02,750 --> 00:10:08,510
nice if<font color="#E5E5E5"> we could do embedded programming</font>

250
00:10:05,410 --> 00:10:10,400
<font color="#E5E5E5">using the benefits of Haskell</font><font color="#CCCCCC"> so you get</font>

251
00:10:08,510 --> 00:10:13,280
a powerful<font color="#E5E5E5"> type system type inference</font>

252
00:10:10,400 --> 00:10:17,569
<font color="#E5E5E5">type checking it's a pure higher order</font>

253
00:10:13,280 --> 00:10:19,490
language without<font color="#E5E5E5"> side effects and you</font>

254
00:10:17,570 --> 00:10:22,220
get the modularity and<font color="#CCCCCC"> the composition</font>

255
00:10:19,490 --> 00:10:25,940
<font color="#CCCCCC">that that functional programmers have</font>

256
00:10:22,220 --> 00:10:28,790
come to know about<font color="#E5E5E5"> and and love however</font>

257
00:10:25,940 --> 00:10:30,290
as I already mentioned<font color="#CCCCCC"> you know I can't</font>

258
00:10:28,790 --> 00:10:33,170
fit a Haskell program on one of these

259
00:10:30,290 --> 00:10:34,459
embedded microcontrollers<font color="#CCCCCC"> and so you</font>

260
00:10:33,170 --> 00:10:36,500
know there's a couple<font color="#E5E5E5"> options we could</font>

261
00:10:34,460 --> 00:10:39,710
consider one would be writing<font color="#E5E5E5"> a whole</font>

262
00:10:36,500 --> 00:10:42,140
<font color="#E5E5E5">new language from scratch this would be</font>

263
00:10:39,710 --> 00:10:44,150
all kind of if<font color="#E5E5E5"> you squint you could</font>

264
00:10:42,140 --> 00:10:46,069
think<font color="#E5E5E5"> of Russ taking this approach and</font>

265
00:10:44,150 --> 00:10:49,760
<font color="#CCCCCC">when we began this project</font><font color="#E5E5E5"> actually rust</font>

266
00:10:46,070 --> 00:10:52,760
was<font color="#E5E5E5"> a pre 1.0</font><font color="#CCCCCC"> release</font><font color="#E5E5E5"> so there's just</font>

267
00:10:49,760 --> 00:10:54,590
<font color="#CCCCCC">not</font><font color="#E5E5E5"> the time to do</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you know to</font>

268
00:10:52,760 --> 00:10:56,630
basically<font color="#E5E5E5"> do a compile</font><font color="#CCCCCC"> er development</font>

269
00:10:54,590 --> 00:10:58,340
from scratch the<font color="#E5E5E5"> other approach would be</font>

270
00:10:56,630 --> 00:11:02,000
<font color="#E5E5E5">let's try to hack down the runtime</font>

271
00:10:58,340 --> 00:11:03,410
<font color="#CCCCCC">system but the runtime very little</font>

272
00:11:02,000 --> 00:11:05,480
secret<font color="#E5E5E5"> of these functional languages</font>

273
00:11:03,410 --> 00:11:07,399
right like<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know oh we've got all the</font>

274
00:11:05,480 --> 00:11:11,019
purity and<font color="#E5E5E5"> then</font><font color="#CCCCCC"> we've got 50,000</font><font color="#E5E5E5"> plus</font>

275
00:11:07,399 --> 00:11:13,879
lines of C or C<font color="#E5E5E5"> - - sitting underneath</font>

276
00:11:11,019 --> 00:11:16,819
that functional language to implement

277
00:11:13,879 --> 00:11:18,920
the runtime<font color="#CCCCCC"> system</font><font color="#E5E5E5"> and you know trying</font>

278
00:11:16,819 --> 00:11:21,199
to do that<font color="#E5E5E5"> in in a short order and</font>

279
00:11:18,920 --> 00:11:23,300
<font color="#E5E5E5">guaranteeing correctness is just too</font>

280
00:11:21,199 --> 00:11:26,870
difficult<font color="#CCCCCC"> so the approach we took was</font>

281
00:11:23,300 --> 00:11:29,359
<font color="#E5E5E5">one of building an embedded DSL or</font><font color="#CCCCCC"> edia</font>

282
00:11:26,870 --> 00:11:31,160
so so the<font color="#E5E5E5"> idea</font><font color="#CCCCCC"> here is</font><font color="#E5E5E5"> let</font><font color="#CCCCCC"> me build some</font>

283
00:11:29,360 --> 00:11:35,990
<font color="#CCCCCC">Combinator's in my functional language</font>

284
00:11:31,160 --> 00:11:38,149
<font color="#E5E5E5">and this is going to implement</font><font color="#CCCCCC"> my my</font>

285
00:11:35,990 --> 00:11:40,730
safe<font color="#E5E5E5"> programming language and what this</font>

286
00:11:38,149 --> 00:11:43,189
<font color="#E5E5E5">will do is</font><font color="#CCCCCC"> it'll generate safe embedded</font>

287
00:11:40,730 --> 00:11:44,839
<font color="#E5E5E5">C so the nice thing</font><font color="#CCCCCC"> about taking this</font>

288
00:11:43,189 --> 00:11:46,099
<font color="#E5E5E5">approach this</font><font color="#CCCCCC"> Eid ESL approach is that</font>

289
00:11:44,839 --> 00:11:48,889
<font color="#CCCCCC">your new language that you're designing</font>

290
00:11:46,100 --> 00:11:51,620
<font color="#E5E5E5">is just</font><font color="#CCCCCC"> quote-unquote a library in</font>

291
00:11:48,889 --> 00:11:52,250
Haskell<font color="#CCCCCC"> and you get a bunch of things</font>

292
00:11:51,620 --> 00:11:54,319
for free

293
00:11:52,250 --> 00:11:57,500
I get type checking<font color="#E5E5E5"> for free I get all</font>

294
00:11:54,319 --> 00:12:00,199
the syntax<font color="#E5E5E5"> and parsing for free and most</font>

295
00:11:57,500 --> 00:12:02,959
importantly I get<font color="#CCCCCC"> to use the the host</font>

296
00:12:00,199 --> 00:12:05,389
language Haskell as a type safe turning

297
00:12:02,959 --> 00:12:08,839
complete macro language and I'll talk

298
00:12:05,389 --> 00:12:10,160
more<font color="#E5E5E5"> about that in a few moments so the</font>

299
00:12:08,839 --> 00:12:13,189
language<font color="#E5E5E5"> we developed is something</font>

300
00:12:10,160 --> 00:12:14,000
called ivory embedded<font color="#E5E5E5"> in</font><font color="#CCCCCC"> Haskell and you</font>

301
00:12:13,189 --> 00:12:15,560
can think of<font color="#E5E5E5"> it as</font><font color="#CCCCCC"> a high-level</font>

302
00:12:14,000 --> 00:12:17,540
functioning program language for

303
00:12:15,560 --> 00:12:19,130
<font color="#E5E5E5">low-level embedded systems and</font><font color="#CCCCCC"> there's a</font>

304
00:12:17,540 --> 00:12:21,560
few features<font color="#CCCCCC"> I'll draw your attention to</font>

305
00:12:19,130 --> 00:12:24,880
<font color="#E5E5E5">so one is it's you know effectively it's</font>

306
00:12:21,560 --> 00:12:27,680
a<font color="#E5E5E5"> safe</font><font color="#CCCCCC"> C language in embedded</font><font color="#E5E5E5"> at</font><font color="#CCCCCC"> Haskell</font>

307
00:12:24,880 --> 00:12:31,519
<font color="#CCCCCC">and specialized for embedded systems so</font>

308
00:12:27,680 --> 00:12:33,319
the primary there's a few trap doors but

309
00:12:31,519 --> 00:12:34,600
the<font color="#CCCCCC"> primary use it is you know sub</font>

310
00:12:33,319 --> 00:12:38,620
turing-complete

311
00:12:34,600 --> 00:12:41,060
however the way we are able<font color="#E5E5E5"> to get</font>

312
00:12:38,620 --> 00:12:42,920
usability as I mentioned is is this type

313
00:12:41,060 --> 00:12:45,069
safe macro programming<font color="#CCCCCC"> so I can kind of</font>

314
00:12:42,920 --> 00:12:47,839
fake<font color="#E5E5E5"> turing-complete</font>

315
00:12:45,069 --> 00:12:49,910
programming at design time at compile

316
00:12:47,839 --> 00:12:52,519
time by using Haskell and I'll give you

317
00:12:49,910 --> 00:12:54,500
some<font color="#E5E5E5"> examples and we've also got some</font>

318
00:12:52,519 --> 00:12:56,839
<font color="#E5E5E5">verification tool integration including</font>

319
00:12:54,500 --> 00:12:59,389
of symbolic simulation if you're

320
00:12:56,839 --> 00:13:03,860
improving<font color="#CCCCCC"> back-end facl - as well</font><font color="#E5E5E5"> as</font>

321
00:12:59,389 --> 00:13:05,269
automated test case generation<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> so let</font>

322
00:13:03,860 --> 00:13:07,490
me<font color="#E5E5E5"> just give you a quick taste of the</font>

323
00:13:05,269 --> 00:13:09,290
language<font color="#CCCCCC"> you know just so you can</font>

324
00:13:07,490 --> 00:13:13,819
concretely see what it looks like<font color="#E5E5E5"> so</font>

325
00:13:09,290 --> 00:13:16,550
here is a loop<font color="#E5E5E5"> that operates over an</font>

326
00:13:13,819 --> 00:13:16,810
array adding a value to each<font color="#E5E5E5"> element in</font>

327
00:13:16,550 --> 00:13:19,390
the

328
00:13:16,810 --> 00:13:22,119
<font color="#CCCCCC">Rea</font><font color="#E5E5E5"> so first I'm going to show you</font><font color="#CCCCCC"> the</font>

329
00:13:19,390 --> 00:13:23,980
type<font color="#CCCCCC"> I've written it here explicitly</font><font color="#E5E5E5"> but</font>

330
00:13:22,120 --> 00:13:26,200
there's actually<font color="#E5E5E5"> type inference for free</font>

331
00:13:23,980 --> 00:13:29,740
so I didn't have to explicitly<font color="#E5E5E5"> write</font>

332
00:13:26,200 --> 00:13:31,540
this and I've<font color="#E5E5E5"> got a type level list and</font>

333
00:13:29,740 --> 00:13:33,880
it takes two arguments corresponding<font color="#CCCCCC"> to</font>

334
00:13:31,540 --> 00:13:36,160
<font color="#CCCCCC">the two arguments that the function will</font>

335
00:13:33,880 --> 00:13:38,370
take so the first is a reference<font color="#CCCCCC"> so this</font>

336
00:13:36,160 --> 00:13:41,439
is a not guaranteed null null pointer

337
00:13:38,370 --> 00:13:43,930
with a type<font color="#CCCCCC"> variable</font><font color="#E5E5E5"> S which means the</font>

338
00:13:41,440 --> 00:13:45,760
allocation scope of the array in this

339
00:13:43,930 --> 00:13:47,290
<font color="#E5E5E5">case it's a type variable means it could</font>

340
00:13:45,760 --> 00:13:51,069
<font color="#E5E5E5">be locally allocate or globally</font>

341
00:13:47,290 --> 00:13:52,920
allocated<font color="#CCCCCC"> it takes it's a pointer to an</font>

342
00:13:51,070 --> 00:13:56,890
array with four<font color="#E5E5E5"> elements and in each</font>

343
00:13:52,920 --> 00:13:58,990
element<font color="#CCCCCC"> is a unsigned 8-bit value and it</font>

344
00:13:56,890 --> 00:14:02,920
takes<font color="#E5E5E5"> another unsigned 8-bit value and</font>

345
00:13:58,990 --> 00:14:06,100
returns void so if we walk through<font color="#E5E5E5"> this</font>

346
00:14:02,920 --> 00:14:08,050
<font color="#E5E5E5">in the implementation</font><font color="#CCCCCC"> I have a lambda</font>

347
00:14:06,100 --> 00:14:10,810
binding that corresponds to the two

348
00:14:08,050 --> 00:14:13,510
<font color="#E5E5E5">arguments</font><font color="#CCCCCC"> the function will take if you</font>

349
00:14:10,810 --> 00:14:15,550
think of it as a CF function the array

350
00:14:13,510 --> 00:14:17,950
and the value and then<font color="#CCCCCC"> we have a</font>

351
00:14:15,550 --> 00:14:19,719
Combinator array map which maps<font color="#E5E5E5"> over the</font>

352
00:14:17,950 --> 00:14:22,360
element so<font color="#E5E5E5"> guarantees I can't walk off</font>

353
00:14:19,720 --> 00:14:24,640
the array<font color="#E5E5E5"> and for each index it's going</font>

354
00:14:22,360 --> 00:14:26,290
to dereference<font color="#E5E5E5"> a value this is</font>

355
00:14:24,640 --> 00:14:28,569
<font color="#E5E5E5">guaranteed mil-mil by type checking</font>

356
00:14:26,290 --> 00:14:36,520
dereference<font color="#E5E5E5"> and then store a new value</font>

357
00:14:28,570 --> 00:14:38,320
there<font color="#E5E5E5"> okay now</font><font color="#CCCCCC"> as we you know</font><font color="#E5E5E5"> did this</font>

358
00:14:36,520 --> 00:14:42,670
<font color="#E5E5E5">even even if you're a Haskell programmer</font>

359
00:14:38,320 --> 00:14:43,690
<font color="#CCCCCC">like if there's a lot to to</font><font color="#E5E5E5"> lot to take</font>

360
00:14:42,670 --> 00:14:46,300
in there so one of<font color="#CCCCCC"> the things we</font>

361
00:14:43,690 --> 00:14:47,770
realized<font color="#CCCCCC"> especially one of</font><font color="#E5E5E5"> the goals of</font>

362
00:14:46,300 --> 00:14:49,390
the<font color="#E5E5E5"> program's to transition</font><font color="#CCCCCC"> this to</font>

363
00:14:47,770 --> 00:14:52,750
engineer systems<font color="#E5E5E5"> engineers who are not</font>

364
00:14:49,390 --> 00:14:55,439
Haskell developers<font color="#CCCCCC"> we wanted a concrete</font>

365
00:14:52,750 --> 00:14:57,940
<font color="#E5E5E5">see like syntax</font><font color="#CCCCCC"> so we developed a</font>

366
00:14:55,440 --> 00:15:00,190
concrete syntax over this<font color="#E5E5E5"> where if you</font>

367
00:14:57,940 --> 00:15:01,959
squint<font color="#E5E5E5"> it looks quite see like so here's</font>

368
00:15:00,190 --> 00:15:03,310
the same function again in a concrete

369
00:15:01,959 --> 00:15:04,719
<font color="#E5E5E5">syntax and there's just a few</font>

370
00:15:03,310 --> 00:15:06,939
differences I'll call out so first<font color="#E5E5E5"> of</font>

371
00:15:04,720 --> 00:15:08,380
all in<font color="#CCCCCC"> C of course you know you pass in</font>

372
00:15:06,940 --> 00:15:10,420
the length of the array that<font color="#CCCCCC"> you're</font>

373
00:15:08,380 --> 00:15:12,370
going to<font color="#E5E5E5"> map over we'd have to do that</font>

374
00:15:10,420 --> 00:15:17,650
in the concrete<font color="#E5E5E5"> syntax</font><font color="#CCCCCC"> we still have</font>

375
00:15:12,370 --> 00:15:19,800
this map operation which which instead

376
00:15:17,650 --> 00:15:21,970
<font color="#CCCCCC">of</font><font color="#E5E5E5"> having a for loop over</font><font color="#CCCCCC"> the array and</font>

377
00:15:19,800 --> 00:15:24,010
as I mentioned I've got<font color="#E5E5E5"> different</font>

378
00:15:21,970 --> 00:15:26,410
allocation scopes and<font color="#E5E5E5"> so I can decorate</font>

379
00:15:24,010 --> 00:15:29,740
a pointer<font color="#E5E5E5"> and say this is</font><font color="#CCCCCC"> for example</font>

380
00:15:26,410 --> 00:15:30,620
<font color="#CCCCCC">global allocation and this is really</font>

381
00:15:29,740 --> 00:15:32,210
<font color="#E5E5E5">important so</font>

382
00:15:30,620 --> 00:15:34,040
we started the<font color="#CCCCCC"> program and</font><font color="#E5E5E5"> did not have</font>

383
00:15:32,210 --> 00:15:35,330
a concrete<font color="#CCCCCC"> syntax like</font><font color="#E5E5E5"> this and we're</font>

384
00:15:34,040 --> 00:15:37,819
trying<font color="#CCCCCC"> to throw this over the wall to</font>

385
00:15:35,330 --> 00:15:39,140
C++<font color="#E5E5E5"> developers at Boeing there's just no</font>

386
00:15:37,820 --> 00:15:42,410
way that<font color="#CCCCCC"> they're going</font><font color="#E5E5E5"> to be able to use</font>

387
00:15:39,140 --> 00:15:44,750
the language<font color="#E5E5E5"> so but by doing</font><font color="#CCCCCC"> this by</font>

388
00:15:42,410 --> 00:15:47,360
<font color="#E5E5E5">having us see like syntax we could</font><font color="#CCCCCC"> throw</font>

389
00:15:44,750 --> 00:15:49,610
it over the wall<font color="#CCCCCC"> and as far as they are</font>

390
00:15:47,360 --> 00:15:53,900
<font color="#E5E5E5">concerned this</font><font color="#CCCCCC"> was basically</font><font color="#E5E5E5"> you know</font><font color="#CCCCCC"> a</font>

391
00:15:49,610 --> 00:15:57,410
strange<font color="#CCCCCC"> C with different type errors and</font>

392
00:15:53,900 --> 00:15:59,840
some cool macros<font color="#CCCCCC"> and so they</font><font color="#E5E5E5"> are able to</font>

393
00:15:57,410 --> 00:16:01,430
basically<font color="#E5E5E5"> rewrite many many thousands of</font>

394
00:15:59,840 --> 00:16:02,690
lines of codes<font color="#E5E5E5"> rewriting their flight</font>

395
00:16:01,430 --> 00:16:05,839
controller and mission<font color="#E5E5E5"> computer with</font>

396
00:16:02,690 --> 00:16:07,220
very<font color="#E5E5E5"> little help from from us</font><font color="#CCCCCC"> okay so</font>

397
00:16:05,840 --> 00:16:08,780
I've mentioned<font color="#E5E5E5"> this</font><font color="#CCCCCC"> idea of typesafe</font>

398
00:16:07,220 --> 00:16:11,330
<font color="#E5E5E5">macros a few times so let me just give</font>

399
00:16:08,780 --> 00:16:13,670
you<font color="#E5E5E5"> an</font><font color="#CCCCCC"> example so</font><font color="#E5E5E5"> the the language</font>

400
00:16:11,330 --> 00:16:16,670
<font color="#E5E5E5">itself is very impoverished</font><font color="#CCCCCC"> so for</font>

401
00:16:13,670 --> 00:16:20,660
<font color="#E5E5E5">example</font><font color="#CCCCCC"> I in ivory there is just one</font>

402
00:16:16,670 --> 00:16:23,270
construct<font color="#E5E5E5"> for doing control for for if</font>

403
00:16:20,660 --> 00:16:25,370
and<font color="#E5E5E5"> else</font><font color="#CCCCCC"> controls so there's no</font>

404
00:16:23,270 --> 00:16:27,290
conditional statements<font color="#E5E5E5"> and so you can</font>

405
00:16:25,370 --> 00:16:28,820
have<font color="#E5E5E5"> if you've got a lot of nested</font>

406
00:16:27,290 --> 00:16:30,199
if/then/else is it can<font color="#E5E5E5"> you know if your</font>

407
00:16:28,820 --> 00:16:33,080
list programmer this might look<font color="#E5E5E5"> familiar</font>

408
00:16:30,200 --> 00:16:34,760
<font color="#CCCCCC">but</font><font color="#E5E5E5"> it can be quite cumbersome now one</font>

409
00:16:33,080 --> 00:16:38,510
of the<font color="#E5E5E5"> benefits though is that the</font>

410
00:16:34,760 --> 00:16:41,540
developer because it's an embedded DSL

411
00:16:38,510 --> 00:16:44,390
does not have to be stuck<font color="#E5E5E5"> in the</font>

412
00:16:41,540 --> 00:16:46,819
paradigm<font color="#CCCCCC"> of writing in with just</font><font color="#E5E5E5"> the</font>

413
00:16:44,390 --> 00:16:50,780
operators that<font color="#CCCCCC"> we provide</font><font color="#E5E5E5"> so for example</font>

414
00:16:46,820 --> 00:16:54,590
a developer with just a literally four

415
00:16:50,780 --> 00:16:56,990
lines of<font color="#E5E5E5"> code can define a datatype cond</font>

416
00:16:54,590 --> 00:16:59,570
for conditional can define a<font color="#E5E5E5"> couple of</font>

417
00:16:56,990 --> 00:17:02,840
smart constructors so here we've got<font color="#CCCCCC"> a</font>

418
00:16:59,570 --> 00:17:04,300
fat arrow that returns something that is

419
00:17:02,840 --> 00:17:07,280
<font color="#E5E5E5">equivalent</font><font color="#CCCCCC"> to the data type</font><font color="#E5E5E5"> and then</font>

420
00:17:04,300 --> 00:17:10,399
constructors over lists and what it<font color="#E5E5E5"> will</font>

421
00:17:07,280 --> 00:17:13,579
do is construct new syntax in<font color="#CCCCCC"> the</font>

422
00:17:10,400 --> 00:17:16,220
language and so<font color="#E5E5E5"> ivory has not changed at</font>

423
00:17:13,579 --> 00:17:17,599
all<font color="#E5E5E5"> but I'm able</font><font color="#CCCCCC"> to now generate a much</font>

424
00:17:16,220 --> 00:17:20,660
<font color="#E5E5E5">more pleasing</font><font color="#CCCCCC"> depending</font><font color="#E5E5E5"> on your</font>

425
00:17:17,599 --> 00:17:23,300
perspective<font color="#CCCCCC"> conditional expression that</font>

426
00:17:20,660 --> 00:17:25,340
is equivalent<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> original without</font>

427
00:17:23,300 --> 00:17:27,950
<font color="#E5E5E5">having to bake this into</font><font color="#CCCCCC"> the language</font>

428
00:17:25,339 --> 00:17:31,490
itself<font color="#CCCCCC"> okay so here's a</font><font color="#E5E5E5"> very simple</font>

429
00:17:27,950 --> 00:17:35,320
<font color="#CCCCCC">example a more complex example is one we</font>

430
00:17:31,490 --> 00:17:38,180
used in a developing sensor fusion<font color="#E5E5E5"> so</font>

431
00:17:35,320 --> 00:17:39,260
automatic<font color="#CCCCCC"> differentiation is that how</font>

432
00:17:38,180 --> 00:17:41,190
many<font color="#E5E5E5"> people</font><font color="#CCCCCC"> are familiar</font><font color="#E5E5E5"> to automatic</font>

433
00:17:39,260 --> 00:17:45,140
differentiation programming<font color="#E5E5E5"> okay</font>

434
00:17:41,190 --> 00:17:48,620
it's a you<font color="#CCCCCC"> know a maybe underappreciated</font>

435
00:17:45,140 --> 00:17:50,820
<font color="#CCCCCC">but fairly ubiquitous</font><font color="#E5E5E5"> approach to do</font>

436
00:17:48,620 --> 00:17:53,239
automatically computing differentiation

437
00:17:50,820 --> 00:17:56,159
for programs<font color="#E5E5E5"> that's neither symbolic</font>

438
00:17:53,240 --> 00:17:58,680
differentiation or new murica

439
00:17:56,160 --> 00:18:00,720
proximation<font color="#E5E5E5"> the idea is that it's that I</font>

440
00:17:58,680 --> 00:18:04,920
can<font color="#E5E5E5"> automatically transform a program to</font>

441
00:18:00,720 --> 00:18:08,190
<font color="#E5E5E5">compute the differential using different</font>

442
00:18:04,920 --> 00:18:10,710
<font color="#E5E5E5">techniques and this</font><font color="#CCCCCC"> is quite</font><font color="#E5E5E5"> useful</font><font color="#CCCCCC"> for</font>

443
00:18:08,190 --> 00:18:12,720
for writing<font color="#E5E5E5"> programs that have to deal</font>

444
00:18:10,710 --> 00:18:15,120
with<font color="#E5E5E5"> continuous dynamics so let me just</font>

445
00:18:12,720 --> 00:18:17,270
<font color="#E5E5E5">walk you very briefly through you know</font>

446
00:18:15,120 --> 00:18:19,560
<font color="#CCCCCC">forward</font><font color="#E5E5E5"> automatic differentiation and so</font>

447
00:18:17,270 --> 00:18:21,389
the<font color="#CCCCCC"> ideas I'm</font><font color="#E5E5E5"> going to walk through a</font>

448
00:18:19,560 --> 00:18:23,610
program automatically transform it so

449
00:18:21,390 --> 00:18:25,140
<font color="#E5E5E5">that I'm going to take variables and</font>

450
00:18:23,610 --> 00:18:28,229
replace them with pairs where I keep

451
00:18:25,140 --> 00:18:30,020
track of the original value<font color="#CCCCCC"> and the</font>

452
00:18:28,230 --> 00:18:33,720
differential<font color="#E5E5E5"> with respect to that value</font>

453
00:18:30,020 --> 00:18:37,200
<font color="#E5E5E5">so as I there's a few rules</font><font color="#CCCCCC"> so for</font>

454
00:18:33,720 --> 00:18:40,140
<font color="#E5E5E5">example you know to do addition on these</font>

455
00:18:37,200 --> 00:18:42,930
pairs I'm going to define<font color="#E5E5E5"> an algebra so</font>

456
00:18:40,140 --> 00:18:45,600
I just do addition point wise for

457
00:18:42,930 --> 00:18:47,160
multiplication<font color="#CCCCCC"> I've got an</font><font color="#E5E5E5"> expression</font>

458
00:18:45,600 --> 00:18:49,949
like follows where I multiply the

459
00:18:47,160 --> 00:18:52,230
<font color="#CCCCCC">original values and then like you do in</font>

460
00:18:49,950 --> 00:18:56,520
differential<font color="#CCCCCC"> calculus</font><font color="#E5E5E5"> I'm going to take</font>

461
00:18:52,230 --> 00:18:59,910
<font color="#CCCCCC">UV prime plus</font><font color="#E5E5E5"> the times u</font><font color="#CCCCCC"> prime</font><font color="#E5E5E5"> etc etc</font>

462
00:18:56,520 --> 00:19:02,340
for the arithmetic<font color="#E5E5E5"> operations and so</font>

463
00:18:59,910 --> 00:19:06,030
like as a little<font color="#CCCCCC"> example if</font><font color="#E5E5E5"> I got f of x</font>

464
00:19:02,340 --> 00:19:11,300
<font color="#E5E5E5">equals x plus 2 times X plus 3</font><font color="#CCCCCC"> I can</font>

465
00:19:06,030 --> 00:19:13,710
transform it<font color="#CCCCCC"> variable if I take that</font>

466
00:19:11,300 --> 00:19:15,629
derivative<font color="#E5E5E5"> of the variable I get</font><font color="#CCCCCC"> one</font>

467
00:19:13,710 --> 00:19:18,750
derivatives constants<font color="#E5E5E5"> are</font><font color="#CCCCCC"> zero and</font>

468
00:19:15,630 --> 00:19:21,090
follow the rules<font color="#CCCCCC"> i I get there the</font>

469
00:19:18,750 --> 00:19:26,160
<font color="#E5E5E5">original value at plus the differential</font>

470
00:19:21,090 --> 00:19:29,159
the<font color="#CCCCCC"> derivative okay so um what is all</font>

471
00:19:26,160 --> 00:19:31,230
this all mean well<font color="#E5E5E5"> because in</font><font color="#CCCCCC"> haskell</font>

472
00:19:29,160 --> 00:19:33,480
we've got type classes and which<font color="#E5E5E5"> means</font><font color="#CCCCCC"> i</font>

473
00:19:31,230 --> 00:19:35,190
can<font color="#CCCCCC"> do operations</font><font color="#E5E5E5"> as long as anything</font>

474
00:19:33,480 --> 00:19:38,370
satisfies those<font color="#E5E5E5"> type classes in</font>

475
00:19:35,190 --> 00:19:39,780
particular so for example I've<font color="#E5E5E5"> got</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> num</font>

476
00:19:38,370 --> 00:19:44,550
type class<font color="#CCCCCC"> that tells me how to</font><font color="#E5E5E5"> do</font>

477
00:19:39,780 --> 00:19:47,129
addition subtraction etc etc<font color="#E5E5E5"> if I have</font>

478
00:19:44,550 --> 00:19:50,310
any instance of this including<font color="#CCCCCC"> the ast</font>

479
00:19:47,130 --> 00:19:52,950
for<font color="#E5E5E5"> the ivory language I can use these</font>

480
00:19:50,310 --> 00:19:54,629
operations for free<font color="#E5E5E5"> so in</font><font color="#CCCCCC"> Haskell like</font>

481
00:19:52,950 --> 00:19:56,100
in other languages automatic

482
00:19:54,630 --> 00:20:00,150
appreciation has been defined<font color="#CCCCCC"> and</font>

483
00:19:56,100 --> 00:20:02,760
because of<font color="#E5E5E5"> this I can</font><font color="#CCCCCC"> use these use the</font>

484
00:20:00,150 --> 00:20:05,250
<font color="#CCCCCC">libraries that compute these things for</font>

485
00:20:02,760 --> 00:20:10,320
free<font color="#CCCCCC"> to automatically</font><font color="#E5E5E5"> develop new C code</font>

486
00:20:05,250 --> 00:20:12,480
that<font color="#E5E5E5"> that computes the derivative</font><font color="#CCCCCC"> and so</font>

487
00:20:10,320 --> 00:20:14,070
the upshot<font color="#CCCCCC"> of this</font><font color="#E5E5E5"> is for example in</font>

488
00:20:12,480 --> 00:20:16,740
<font color="#E5E5E5">developing our inertial navigation</font>

489
00:20:14,070 --> 00:20:20,850
system<font color="#E5E5E5"> we can write</font><font color="#CCCCCC"> just a few hundred</font>

490
00:20:16,740 --> 00:20:23,070
lines of code<font color="#E5E5E5"> for</font><font color="#CCCCCC"> M in use these</font>

491
00:20:20,850 --> 00:20:24,750
techniques for<font color="#CCCCCC"> example to compute the</font>

492
00:20:23,070 --> 00:20:26,790
Jacobian matrices which are used in<font color="#E5E5E5"> the</font>

493
00:20:24,750 --> 00:20:28,590
column filters we developed so<font color="#CCCCCC"> this just</font>

494
00:20:26,790 --> 00:20:30,690
to give you a taste of<font color="#E5E5E5"> the ways we're</font>

495
00:20:28,590 --> 00:20:33,510
<font color="#E5E5E5">able to build these abstractions up</font>

496
00:20:30,690 --> 00:20:35,160
<font color="#E5E5E5">without having to bake them</font><font color="#CCCCCC"> into the</font><font color="#E5E5E5"> DSL</font>

497
00:20:33,510 --> 00:20:36,930
we could keep<font color="#E5E5E5"> this</font><font color="#CCCCCC"> smoke</font><font color="#E5E5E5"> small and lean</font>

498
00:20:35,160 --> 00:20:39,350
allowing us to<font color="#E5E5E5"> do things like static</font>

499
00:20:36,930 --> 00:20:41,700
analysis etcetera on the language and

500
00:20:39,350 --> 00:20:49,010
<font color="#E5E5E5">and not have to extend</font><font color="#CCCCCC"> it to a journal</font>

501
00:20:41,700 --> 00:20:51,500
purpose language<font color="#E5E5E5"> okay um let's see</font><font color="#CCCCCC"> so</font>

502
00:20:49,010 --> 00:20:55,230
what I'm<font color="#E5E5E5"> going to do is I'm going</font><font color="#CCCCCC"> to</font>

503
00:20:51,500 --> 00:20:58,080
just<font color="#CCCCCC"> briefly talk but not</font><font color="#E5E5E5"> go through in</font>

504
00:20:55,230 --> 00:21:00,960
detail<font color="#E5E5E5"> given the time about the approach</font>

505
00:20:58,080 --> 00:21:02,399
we took<font color="#E5E5E5"> to</font><font color="#CCCCCC"> two</font><font color="#E5E5E5"> concurrency so you know</font>

506
00:21:00,960 --> 00:21:04,860
this is all well<font color="#CCCCCC"> and fine we can use</font>

507
00:21:02,400 --> 00:21:07,770
<font color="#CCCCCC">ivory developed</font><font color="#E5E5E5"> to write our application</font>

508
00:21:04,860 --> 00:21:10,229
<font color="#CCCCCC">code for our individual threads in the</font>

509
00:21:07,770 --> 00:21:14,129
system whether it's on SEO for or on an

510
00:21:10,230 --> 00:21:16,290
<font color="#CCCCCC">artist but um when you start</font><font color="#E5E5E5"> looking at</font>

511
00:21:14,130 --> 00:21:19,050
the problem<font color="#E5E5E5"> of all the glue code</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> the</font>

512
00:21:16,290 --> 00:21:22,110
<font color="#E5E5E5">inner procedure communication handling</font>

513
00:21:19,050 --> 00:21:23,879
interrupts<font color="#E5E5E5"> we start running</font><font color="#CCCCCC"> into all</font>

514
00:21:22,110 --> 00:21:27,600
this was written<font color="#E5E5E5"> in</font><font color="#CCCCCC"> handwritten and see</font>

515
00:21:23,880 --> 00:21:30,090
and it becomes a nightmare<font color="#CCCCCC"> and this is a</font>

516
00:21:27,600 --> 00:21:33,419
problem<font color="#E5E5E5"> even if we're developing on a</font>

517
00:21:30,090 --> 00:21:35,189
formally verified<font color="#CCCCCC"> operating system so</font>

518
00:21:33,420 --> 00:21:38,490
you know if I'm writing<font color="#E5E5E5"> everything by</font>

519
00:21:35,190 --> 00:21:41,210
hand<font color="#E5E5E5"> on SEO for even you know the kernel</font>

520
00:21:38,490 --> 00:21:43,380
<font color="#E5E5E5">if you say I want to communicate between</font>

521
00:21:41,210 --> 00:21:45,570
<font color="#E5E5E5">two threads that shouldn't communicate</font>

522
00:21:43,380 --> 00:21:47,610
with each other it will perfectly let

523
00:21:45,570 --> 00:21:49,020
you do that<font color="#E5E5E5"> right</font><font color="#CCCCCC"> so it's up to you to</font>

524
00:21:47,610 --> 00:21:51,030
have<font color="#E5E5E5"> the right</font><font color="#CCCCCC"> kind of specification</font>

525
00:21:49,020 --> 00:21:53,040
requirements<font color="#E5E5E5"> and furthermore we want to</font>

526
00:21:51,030 --> 00:21:56,070
<font color="#E5E5E5">easily be able</font><font color="#CCCCCC"> to port from from one</font>

527
00:21:53,040 --> 00:21:58,320
<font color="#E5E5E5">operating system to another so um we did</font>

528
00:21:56,070 --> 00:22:01,439
<font color="#CCCCCC">it this story</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> exactly the same we</font>

529
00:21:58,320 --> 00:22:05,220
built another<font color="#CCCCCC"> DSL on top of ivory that</font>

530
00:22:01,440 --> 00:22:07,040
<font color="#E5E5E5">handled generating things like the IPC</font>

531
00:22:05,220 --> 00:22:09,830
<font color="#E5E5E5">and the glue code</font>

532
00:22:07,040 --> 00:22:13,040
<font color="#E5E5E5">to guarantee safe concurrency the</font>

533
00:22:09,830 --> 00:22:15,800
implementation uses<font color="#E5E5E5"> a whore monitor</font>

534
00:22:13,040 --> 00:22:18,050
style<font color="#E5E5E5"> approach and we can also do this</font>

535
00:22:15,800 --> 00:22:19,820
to generate architectural<font color="#CCCCCC"> models so in</font>

536
00:22:18,050 --> 00:22:23,000
particular we<font color="#E5E5E5"> generated models in the</font>

537
00:22:19,820 --> 00:22:24,500
<font color="#CCCCCC">ADL which</font><font color="#E5E5E5"> is an architectural modeling</font>

538
00:22:23,000 --> 00:22:26,360
<font color="#E5E5E5">and</font><font color="#CCCCCC"> design language which allows you to</font>

539
00:22:24,500 --> 00:22:34,160
do verification at the architectural

540
00:22:26,360 --> 00:22:40,240
level<font color="#E5E5E5"> right okay so I'm going</font><font color="#CCCCCC"> to skip</font>

541
00:22:34,160 --> 00:22:43,730
through some<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> examples of this and</font>

542
00:22:40,240 --> 00:22:45,980
let<font color="#E5E5E5"> me skip here so with ivory in our</font>

543
00:22:43,730 --> 00:22:50,810
we've got a number<font color="#CCCCCC"> of</font><font color="#E5E5E5"> backends we uh</font>

544
00:22:45,980 --> 00:22:56,000
so targeting<font color="#CCCCCC"> POSIX</font><font color="#E5E5E5"> as I mentioned free</font>

545
00:22:50,810 --> 00:22:56,659
<font color="#CCCCCC">are toss and ADL and then we there's an</font>

546
00:22:56,000 --> 00:22:59,410
<font color="#CCCCCC">in-progress</font>

547
00:22:56,660 --> 00:23:05,210
<font color="#E5E5E5">target to</font><font color="#CCCCCC"> the cell model checker</font><font color="#E5E5E5"> and</font>

548
00:22:59,410 --> 00:23:07,640
through ADL<font color="#E5E5E5"> we target</font><font color="#CCCCCC"> Acronis and SEL</font>

549
00:23:05,210 --> 00:23:09,530
for which I mentioned were verified

550
00:23:07,640 --> 00:23:11,210
operating systems<font color="#E5E5E5"> and this is what we</font>

551
00:23:09,530 --> 00:23:14,240
<font color="#CCCCCC">called our</font><font color="#E5E5E5"> trusted build which which we</font>

552
00:23:11,210 --> 00:23:16,670
used in<font color="#E5E5E5"> the program and this tied in to</font>

553
00:23:14,240 --> 00:23:20,270
a larger story<font color="#CCCCCC"> of analysis which I won't</font>

554
00:23:16,670 --> 00:23:21,380
go into<font color="#E5E5E5"> of using various tools that are</font>

555
00:23:20,270 --> 00:23:23,980
developed<font color="#CCCCCC"> and that are</font><font color="#E5E5E5"> in the</font>

556
00:23:21,380 --> 00:23:26,090
open-source<font color="#CCCCCC"> domain for doing things like</font>

557
00:23:23,980 --> 00:23:27,770
model<font color="#E5E5E5"> checking at</font><font color="#CCCCCC"> the architectural</font>

558
00:23:26,090 --> 00:23:29,949
<font color="#CCCCCC">level but also doing requirements</font>

559
00:23:27,770 --> 00:23:33,440
analysis so for example this resolute

560
00:23:29,950 --> 00:23:37,040
<font color="#E5E5E5">tool allows</font><font color="#CCCCCC"> you to develop</font><font color="#E5E5E5"> a safety case</font>

561
00:23:33,440 --> 00:23:38,690
so<font color="#CCCCCC"> I'm a I always have unform apportions</font>

562
00:23:37,040 --> 00:23:42,740
<font color="#E5E5E5">of my program</font><font color="#CCCCCC"> that I want to be able</font><font color="#E5E5E5"> to</font>

563
00:23:38,690 --> 00:23:44,480
talk<font color="#CCCCCC"> about why I believe</font><font color="#E5E5E5"> they meet the</font>

564
00:23:42,740 --> 00:23:46,550
<font color="#CCCCCC">requirements even if I don't</font><font color="#E5E5E5"> have a</font>

565
00:23:44,480 --> 00:23:48,230
formal<font color="#E5E5E5"> proof so by building a safety</font>

566
00:23:46,550 --> 00:23:53,450
case you stitch together the informal

567
00:23:48,230 --> 00:23:59,110
<font color="#E5E5E5">with the formal</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> so um this is just a</font>

568
00:23:53,450 --> 00:24:01,370
<font color="#CCCCCC">eye candy slide we took this our our</font>

569
00:23:59,110 --> 00:24:03,169
project<font color="#E5E5E5"> on a road show</font>

570
00:24:01,370 --> 00:24:07,250
so this included probably being<font color="#E5E5E5"> the</font>

571
00:24:03,170 --> 00:24:11,060
first UAV to fly the first pictures in

572
00:24:07,250 --> 00:24:12,890
the courtyard of<font color="#CCCCCC"> the Pentagon what we</font>

573
00:24:11,060 --> 00:24:14,810
learned there<font color="#E5E5E5"> was that the most</font>

574
00:24:12,890 --> 00:24:16,910
important rule is do<font color="#E5E5E5"> not step on the</font>

575
00:24:14,810 --> 00:24:20,690
<font color="#E5E5E5">grass at the Pentagon</font>

576
00:24:16,910 --> 00:24:23,230
and we<font color="#CCCCCC"> also there</font><font color="#E5E5E5"> was a briefing of this</font>

577
00:24:20,690 --> 00:24:25,250
on 60<font color="#CCCCCC"> minutes so here we are flying with</font>

578
00:24:23,230 --> 00:24:28,610
Lesley Stahl and<font color="#CCCCCC"> there's Kathleen Fisher</font>

579
00:24:25,250 --> 00:24:31,610
in the in the foreground<font color="#E5E5E5"> and as I</font>

580
00:24:28,610 --> 00:24:33,649
mentioned in<font color="#E5E5E5"> the red team analysis</font><font color="#CCCCCC"> they</font>

581
00:24:31,610 --> 00:24:35,510
were given all the code all<font color="#E5E5E5"> the</font>

582
00:24:33,650 --> 00:24:38,120
requirements<font color="#E5E5E5"> on all the specification</font>

583
00:24:35,510 --> 00:24:40,420
the<font color="#E5E5E5"> hardware and two months to analyze</font>

584
00:24:38,120 --> 00:24:43,010
this and<font color="#E5E5E5"> this is actually in</font>

585
00:24:40,420 --> 00:24:45,170
<font color="#CCCCCC">inter-process the main</font><font color="#E5E5E5"> result they said</font>

586
00:24:43,010 --> 00:24:46,850
you know we cannot penetrate the<font color="#E5E5E5"> network</font>

587
00:24:45,170 --> 00:24:48,950
<font color="#E5E5E5">in the vehicle and there's definitely</font>

588
00:24:46,850 --> 00:24:50,780
<font color="#E5E5E5">you know issues that they discovered so</font>

589
00:24:48,950 --> 00:24:53,090
things like for<font color="#CCCCCC"> example we left a</font>

590
00:24:50,780 --> 00:24:55,129
<font color="#E5E5E5">debugging port open which</font><font color="#CCCCCC"> you know if</font>

591
00:24:53,090 --> 00:24:57,830
you had physical<font color="#CCCCCC"> access</font><font color="#E5E5E5"> you could attack</font>

592
00:24:55,130 --> 00:25:01,700
<font color="#CCCCCC">I'm there's an unverified assertion so</font>

593
00:24:57,830 --> 00:25:03,560
we were especially brave for assertions

594
00:25:01,700 --> 00:25:05,630
that<font color="#E5E5E5"> we had not verified away a design</font>

595
00:25:03,560 --> 00:25:06,800
time we still provide<font color="#E5E5E5"> left those in</font><font color="#CCCCCC"> and</font>

596
00:25:05,630 --> 00:25:11,300
said<font color="#CCCCCC"> you</font><font color="#E5E5E5"> know please let us know if you</font>

597
00:25:06,800 --> 00:25:14,450
trigger<font color="#E5E5E5"> Navy's so as I mentioned this is</font>

598
00:25:11,300 --> 00:25:16,399
<font color="#E5E5E5">much better than the</font><font color="#CCCCCC"> baseline systems</font>

599
00:25:14,450 --> 00:25:20,210
that that have<font color="#E5E5E5"> been that we're not</font>

600
00:25:16,400 --> 00:25:22,670
analyzed in both<font color="#CCCCCC"> open-source and DOD</font>

601
00:25:20,210 --> 00:25:24,560
systems<font color="#E5E5E5"> so I just want to end by</font><font color="#CCCCCC"> giving</font>

602
00:25:22,670 --> 00:25:29,060
a couple<font color="#E5E5E5"> kind of lessons</font><font color="#CCCCCC"> learned from</font>

603
00:25:24,560 --> 00:25:31,010
this project<font color="#E5E5E5"> so the first is is that you</font>

604
00:25:29,060 --> 00:25:32,690
know while this was a formal

605
00:25:31,010 --> 00:25:34,160
<font color="#E5E5E5">verification project</font><font color="#CCCCCC"> it's also a</font>

606
00:25:32,690 --> 00:25:36,280
research project<font color="#E5E5E5"> and that was almost</font>

607
00:25:34,160 --> 00:25:38,510
that<font color="#E5E5E5"> was at odds in some sense</font><font color="#CCCCCC"> right so</font>

608
00:25:36,280 --> 00:25:40,250
you know we know how<font color="#CCCCCC"> to write high</font>

609
00:25:38,510 --> 00:25:42,290
assurance code even<font color="#E5E5E5"> without formal</font>

610
00:25:40,250 --> 00:25:43,790
methods<font color="#E5E5E5"> it just takes a long</font><font color="#CCCCCC"> long time</font>

611
00:25:42,290 --> 00:25:45,950
right<font color="#E5E5E5"> but you know people are writing</font>

612
00:25:43,790 --> 00:25:47,899
code<font color="#CCCCCC"> for the</font><font color="#E5E5E5"> space shuttle</font><font color="#CCCCCC"> before</font>

613
00:25:45,950 --> 00:25:49,760
there's static analyzers before there's

614
00:25:47,900 --> 00:25:52,250
model checking<font color="#E5E5E5"> and widespread</font><font color="#CCCCCC"> use</font><font color="#E5E5E5"> and</font>

615
00:25:49,760 --> 00:25:58,190
it's fairly bug free but you know you're

616
00:25:52,250 --> 00:26:01,010
<font color="#CCCCCC">talking a</font><font color="#E5E5E5"> a very much lower programmer</font>

617
00:25:58,190 --> 00:26:03,740
productivity<font color="#CCCCCC"> and you know you can't</font>

618
00:26:01,010 --> 00:26:07,610
expect formal verification<font color="#E5E5E5"> to magically</font>

619
00:26:03,740 --> 00:26:09,440
make<font color="#CCCCCC"> the process go faster and let</font><font color="#E5E5E5"> you</font>

620
00:26:07,610 --> 00:26:16,100
alive the<font color="#E5E5E5"> other kinds of things to</font>

621
00:26:09,440 --> 00:26:18,170
<font color="#E5E5E5">improve your your sister system so um</font><font color="#CCCCCC"> so</font>

622
00:26:16,100 --> 00:26:20,600
you know<font color="#E5E5E5"> one of the things is</font><font color="#CCCCCC"> that you</font>

623
00:26:18,170 --> 00:26:22,400
<font color="#CCCCCC">know if</font><font color="#E5E5E5"> I'm developing around a verified</font>

624
00:26:20,600 --> 00:26:24,050
microkernel<font color="#CCCCCC"> I need to make sure</font><font color="#E5E5E5"> that the</font>

625
00:26:22,400 --> 00:26:26,540
rest<font color="#E5E5E5"> of my system has</font><font color="#CCCCCC"> a verification</font>

626
00:26:24,050 --> 00:26:28,370
story for it as well<font color="#CCCCCC"> I can't just</font><font color="#E5E5E5"> assume</font>

627
00:26:26,540 --> 00:26:30,870
that<font color="#CCCCCC"> oh I verified this one little</font><font color="#E5E5E5"> piece</font>

628
00:26:28,370 --> 00:26:33,719
and everything<font color="#E5E5E5"> is going</font><font color="#CCCCCC"> to be fine</font>

629
00:26:30,870 --> 00:26:35,250
and we need to do all the easy<font color="#CCCCCC"> stuff in</font>

630
00:26:33,720 --> 00:26:36,809
addition to verification right

631
00:26:35,250 --> 00:26:38,760
<font color="#E5E5E5">regression testing fuzz testing</font>

632
00:26:36,809 --> 00:26:41,639
continuous integration codes<font color="#CCCCCC"> or code</font>

633
00:26:38,760 --> 00:26:43,740
reviews<font color="#E5E5E5"> and so this is why</font><font color="#CCCCCC"> you know</font><font color="#E5E5E5"> I</font>

634
00:26:41,640 --> 00:26:45,210
build truly<font color="#E5E5E5"> secure systems you can't</font>

635
00:26:43,740 --> 00:26:47,750
just just rely on formal verification

636
00:26:45,210 --> 00:26:50,669
even though it's a critical part<font color="#E5E5E5"> as</font>

637
00:26:47,750 --> 00:26:51,990
we've heard<font color="#E5E5E5"> a</font><font color="#CCCCCC"> number</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> times today we</font>

638
00:26:50,669 --> 00:26:53,160
need to do the<font color="#E5E5E5"> other things like you</font>

639
00:26:51,990 --> 00:26:56,059
<font color="#E5E5E5">know one of the simple</font><font color="#CCCCCC"> things that</font><font color="#E5E5E5"> we</font>

640
00:26:53,160 --> 00:27:00,510
did which you know is filtering

641
00:26:56,059 --> 00:27:02,840
filtering the the network communications

642
00:27:00,510 --> 00:27:06,270
on this thing which has a huge<font color="#E5E5E5"> effect so</font>

643
00:27:02,840 --> 00:27:07,139
originally for example in an<font color="#CCCCCC"> open source</font>

644
00:27:06,270 --> 00:27:10,470
<font color="#CCCCCC">auto pilot</font>

645
00:27:07,140 --> 00:27:12,570
<font color="#E5E5E5">there was a convenience</font><font color="#CCCCCC"> quote unquote of</font>

646
00:27:10,470 --> 00:27:13,919
allowing you to reflash the code<font color="#E5E5E5"> over</font>

647
00:27:12,570 --> 00:27:16,139
the data<font color="#CCCCCC"> link</font><font color="#E5E5E5"> with the ground control</font>

648
00:27:13,919 --> 00:27:18,299
station<font color="#E5E5E5"> which is</font><font color="#CCCCCC"> you know really great</font>

649
00:27:16,140 --> 00:27:20,580
if you're<font color="#E5E5E5"> developing by yourself and</font><font color="#CCCCCC"> you</font>

650
00:27:18,299 --> 00:27:22,500
<font color="#E5E5E5">just want to you know you don't want</font>

651
00:27:20,580 --> 00:27:24,360
have<font color="#CCCCCC"> to</font><font color="#E5E5E5"> plug into the</font><font color="#CCCCCC"> USB</font><font color="#E5E5E5"> to reflash</font><font color="#CCCCCC"> the</font>

652
00:27:22,500 --> 00:27:26,520
code but<font color="#E5E5E5"> you know what anyone</font><font color="#CCCCCC"> who has</font>

653
00:27:24,360 --> 00:27:30,510
<font color="#E5E5E5">access to that can do it even</font><font color="#CCCCCC"> in flight</font>

654
00:27:26,520 --> 00:27:34,110
for example and you know also we need to

655
00:27:30,510 --> 00:27:37,590
<font color="#E5E5E5">handle</font><font color="#CCCCCC"> all the possible errors in</font><font color="#E5E5E5"> the</font>

656
00:27:34,110 --> 00:27:39,209
interfaces<font color="#CCCCCC"> tool integration this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> an</font>

657
00:27:37,590 --> 00:27:40,709
<font color="#E5E5E5">unsolved problem you know there's</font>

658
00:27:39,210 --> 00:27:42,929
multiple tools and how do<font color="#E5E5E5"> we pull them</font>

659
00:27:40,710 --> 00:27:45,090
<font color="#E5E5E5">all together to combine the analyses and</font>

660
00:27:42,929 --> 00:27:48,210
<font color="#E5E5E5">get a global view of a system is still a</font>

661
00:27:45,090 --> 00:27:51,000
very<font color="#E5E5E5"> difficult problem and one that has</font>

662
00:27:48,210 --> 00:27:53,070
to be<font color="#E5E5E5"> addressed and there's</font><font color="#CCCCCC"> definitely a</font>

663
00:27:51,000 --> 00:27:56,580
number<font color="#CCCCCC"> of</font><font color="#E5E5E5"> things</font><font color="#CCCCCC"> that you know we did</font>

664
00:27:53,070 --> 00:27:58,799
<font color="#E5E5E5">not I don't have a good answer to so you</font>

665
00:27:56,580 --> 00:28:01,860
know for<font color="#E5E5E5"> example</font><font color="#CCCCCC"> um</font><font color="#E5E5E5"> this is a system</font>

666
00:27:58,799 --> 00:28:04,500
that<font color="#CCCCCC"> is hovering above you with sharp</font>

667
00:28:01,860 --> 00:28:06,240
<font color="#E5E5E5">edges and when something</font><font color="#CCCCCC"> goes</font><font color="#E5E5E5"> wrong you</font>

668
00:28:04,500 --> 00:28:08,820
know<font color="#E5E5E5"> you might you know</font><font color="#CCCCCC"> five an IT</font>

669
00:28:06,240 --> 00:28:10,440
<font color="#E5E5E5">system and someone's attacking my my</font>

670
00:28:08,820 --> 00:28:13,379
server<font color="#E5E5E5"> well I might</font><font color="#CCCCCC"> just power it</font><font color="#E5E5E5"> down</font>

671
00:28:10,440 --> 00:28:15,179
<font color="#E5E5E5">that's not going to work</font><font color="#CCCCCC"> for a UAV</font>

672
00:28:13,380 --> 00:28:18,570
that's right you don't<font color="#E5E5E5"> want to just</font>

673
00:28:15,179 --> 00:28:20,850
power it<font color="#E5E5E5"> down so how do</font><font color="#CCCCCC"> i gracefully do</font>

674
00:28:18,570 --> 00:28:22,889
a<font color="#E5E5E5"> failover if there's a security</font>

675
00:28:20,850 --> 00:28:27,539
<font color="#CCCCCC">vulnerability discovered in real time or</font>

676
00:28:22,890 --> 00:28:29,370
<font color="#CCCCCC">I</font><font color="#E5E5E5"> I'm under attack okay</font><font color="#CCCCCC"> everything's</font>

677
00:28:27,539 --> 00:28:31,950
<font color="#CCCCCC">open source</font><font color="#E5E5E5"> we've got a website</font><font color="#CCCCCC"> for the</font>

678
00:28:29,370 --> 00:28:34,879
language<font color="#E5E5E5"> and</font><font color="#CCCCCC"> the autopilot so you can</font>

679
00:28:31,950 --> 00:28:37,110
<font color="#E5E5E5">build everything yourself</font><font color="#CCCCCC"> and go fly and</font>

680
00:28:34,880 --> 00:28:39,679
with that I'm happy<font color="#E5E5E5"> to take</font><font color="#CCCCCC"> questions</font>

681
00:28:37,110 --> 00:28:39,678
thank<font color="#E5E5E5"> you</font>

682
00:28:39,720 --> 00:28:44,940
[Applause]

683
00:28:55,729 --> 00:29:01,649
so that's a good point

684
00:28:57,509 --> 00:29:05,519
so in fact we did two different<font color="#CCCCCC"> versions</font>

685
00:29:01,649 --> 00:29:10,708
one from a one from a<font color="#E5E5E5"> ADL where that was</font>

686
00:29:05,519 --> 00:29:13,320
the the primary<font color="#E5E5E5"> design language</font><font color="#CCCCCC"> in the</font>

687
00:29:10,709 --> 00:29:15,719
other direction<font color="#CCCCCC"> so in fact so it's our</font>

688
00:29:13,320 --> 00:29:18,059
language<font color="#E5E5E5"> I glossed over</font><font color="#CCCCCC"> as if you can</font>

689
00:29:15,719 --> 00:29:22,769
<font color="#E5E5E5">think of it as a Haskell version of a</font><font color="#CCCCCC"> a</font>

690
00:29:18,059 --> 00:29:24,029
<font color="#CCCCCC">BIA which is morally equivalent one one</font>

691
00:29:22,769 --> 00:29:28,739
advantage<font color="#E5E5E5"> of going the other direction</font>

692
00:29:24,029 --> 00:29:31,979
<font color="#E5E5E5">is that it</font><font color="#CCCCCC"> enforced so because</font><font color="#E5E5E5"> Tower has</font>

693
00:29:28,739 --> 00:29:34,589
tied has the same shares of type system

694
00:29:31,979 --> 00:29:37,229
with<font color="#CCCCCC"> ivory</font><font color="#E5E5E5"> it guarantees that every time</font>

695
00:29:34,589 --> 00:29:39,719
you recompile your<font color="#E5E5E5"> system</font><font color="#CCCCCC"> I rebuild my</font>

696
00:29:37,229 --> 00:29:42,629
architectural model of the system<font color="#CCCCCC"> and so</font>

697
00:29:39,719 --> 00:29:45,389
<font color="#CCCCCC">I wouldn't don't have this possibility</font>

698
00:29:42,629 --> 00:29:47,059
<font color="#E5E5E5">of my architectural model that I might</font>

699
00:29:45,389 --> 00:29:50,279
have<font color="#CCCCCC"> done some nice formal analysis on</font>

700
00:29:47,059 --> 00:29:51,869
drifting<font color="#E5E5E5"> apart from my compiled code</font><font color="#CCCCCC"> so</font>

701
00:29:50,279 --> 00:29:57,419
that's one<font color="#CCCCCC"> advantage of going that</font>

702
00:29:51,869 --> 00:29:59,988
direction<font color="#E5E5E5"> okay</font>

703
00:29:57,419 --> 00:29:59,989
all right thank

704
00:30:02,450 --> 00:30:07,959
[Applause]

