1
00:00:02,139 --> 00:00:06,799
<font color="#E5E5E5">hi my name is</font><font color="#CCCCCC"> tamas to zola I'm with the</font>

2
00:00:04,910 --> 00:00:08,300
short information security<font color="#CCCCCC"> here to talk</font>

3
00:00:06,800 --> 00:00:10,550
<font color="#E5E5E5">to your product</font><font color="#CCCCCC"> project</font><font color="#E5E5E5"> we did</font><font color="#CCCCCC"> name</font>

4
00:00:08,300 --> 00:00:14,630
nurse Trudeau<font color="#CCCCCC"> iris treta I was basically</font>

5
00:00:10,550 --> 00:00:16,100
a<font color="#CCCCCC"> Irish research I look into</font><font color="#E5E5E5"> the</font>

6
00:00:14,630 --> 00:00:17,779
possibility of using harder enforcement

7
00:00:16,100 --> 00:00:20,150
to create a<font color="#CCCCCC"> sub turing-complete</font>

8
00:00:17,779 --> 00:00:21,470
<font color="#E5E5E5">environment for a program so basically</font>

9
00:00:20,150 --> 00:00:23,810
we're just<font color="#E5E5E5"> trying</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> make a more safe</font>

10
00:00:21,470 --> 00:00:25,970
and secure development environment<font color="#CCCCCC"> for</font>

11
00:00:23,810 --> 00:00:28,579
programmers<font color="#E5E5E5"> and make analysis more</font>

12
00:00:25,970 --> 00:00:31,668
straightforward so first<font color="#CCCCCC"> rotos goal was</font>

13
00:00:28,579 --> 00:00:33,350
to a productive honorable software with

14
00:00:31,669 --> 00:00:36,020
<font color="#E5E5E5">compilation run</font><font color="#CCCCCC"> time protection</font><font color="#E5E5E5"> so we</font>

15
00:00:33,350 --> 00:00:38,060
<font color="#CCCCCC">wanted to dynamically</font><font color="#E5E5E5"> the detect code</font>

16
00:00:36,020 --> 00:00:39,590
that was of interest<font color="#E5E5E5"> to</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> create an</font>

17
00:00:38,060 --> 00:00:41,390
execution environment that was<font color="#CCCCCC"> sub her</font>

18
00:00:39,590 --> 00:00:43,340
and complete and make<font color="#E5E5E5"> those</font>

19
00:00:41,390 --> 00:00:45,890
transformations automatically<font color="#E5E5E5"> we did the</font>

20
00:00:43,340 --> 00:00:47,450
harder enforcement with a feature in

21
00:00:45,890 --> 00:00:49,910
that Intel provided<font color="#E5E5E5"> is called Intel</font>

22
00:00:47,450 --> 00:00:52,820
<font color="#E5E5E5">process tracing I'll talk about a little</font>

23
00:00:49,910 --> 00:00:54,440
bit more<font color="#E5E5E5"> in future slides so a little</font>

24
00:00:52,820 --> 00:00:56,240
<font color="#E5E5E5">bit of background</font><font color="#CCCCCC"> information weird</font>

25
00:00:54,440 --> 00:00:58,849
machines weird machines are basically a

26
00:00:56,240 --> 00:01:00,500
situation<font color="#CCCCCC"> where programs execute a set</font>

27
00:00:58,850 --> 00:01:02,450
<font color="#E5E5E5">of his</font><font color="#CCCCCC"> normal spec</font><font color="#E5E5E5"> so if you think</font><font color="#CCCCCC"> about</font>

28
00:01:00,500 --> 00:01:03,860
<font color="#E5E5E5">a situation where you have Rob</font><font color="#CCCCCC"> cane</font>

29
00:01:02,450 --> 00:01:06,250
exploitation or something like that that

30
00:01:03,860 --> 00:01:08,750
would<font color="#E5E5E5"> be putting</font><font color="#CCCCCC"> the weird machine</font><font color="#E5E5E5"> state</font>

31
00:01:06,250 --> 00:01:11,960
the two things we leverage for this

32
00:01:08,750 --> 00:01:14,480
project are<font color="#E5E5E5"> LVM</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> until</font><font color="#CCCCCC"> Petey LLVM is</font>

33
00:01:11,960 --> 00:01:15,408
basically a tool chain that<font color="#CCCCCC"> we that has</font>

34
00:01:14,480 --> 00:01:17,330
a lot of<font color="#E5E5E5"> things in but we're</font>

35
00:01:15,409 --> 00:01:19,370
specifically interested<font color="#E5E5E5"> in the IR and</font>

36
00:01:17,330 --> 00:01:22,789
<font color="#E5E5E5">narrated representation JIT engine</font>

37
00:01:19,370 --> 00:01:23,840
support and the clang compiler so<font color="#E5E5E5"> Intel</font>

38
00:01:22,790 --> 00:01:25,190
process of<font color="#E5E5E5"> tracing was something that</font>

39
00:01:23,840 --> 00:01:27,110
was introduced by Intel back in about

40
00:01:25,190 --> 00:01:29,300
2015 for the skylake processors<font color="#E5E5E5"> I</font>

41
00:01:27,110 --> 00:01:32,360
understand there's some cases<font color="#CCCCCC"> where is</font>

42
00:01:29,300 --> 00:01:34,340
<font color="#E5E5E5">available</font><font color="#CCCCCC"> before that but you know and</font>

43
00:01:32,360 --> 00:01:36,620
it was it has about<font color="#E5E5E5"> a</font><font color="#CCCCCC"> 5% overhead from</font>

44
00:01:34,340 --> 00:01:38,270
our from<font color="#E5E5E5"> our work when we did our</font>

45
00:01:36,620 --> 00:01:40,729
testing<font color="#E5E5E5"> and also from other people's</font>

46
00:01:38,270 --> 00:01:43,820
work the account about<font color="#E5E5E5"> 5% overhead for</font>

47
00:01:40,729 --> 00:01:44,929
just for the tracing part so what's the

48
00:01:43,820 --> 00:01:47,479
problem<font color="#E5E5E5"> we're</font><font color="#CCCCCC"> trying to solve</font>

49
00:01:44,930 --> 00:01:50,450
basically turing-complete languages are

50
00:01:47,479 --> 00:01:51,650
<font color="#CCCCCC">very powerful</font><font color="#E5E5E5"> they give a lot</font><font color="#CCCCCC"> more</font><font color="#E5E5E5"> they</font>

51
00:01:50,450 --> 00:01:54,650
deliver a lot<font color="#E5E5E5"> more power than the</font>

52
00:01:51,650 --> 00:01:56,930
developer<font color="#E5E5E5"> main necessarily need and so</font>

53
00:01:54,650 --> 00:01:59,180
that<font color="#E5E5E5"> sort of opens up the door for</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> lot</font>

54
00:01:56,930 --> 00:02:01,189
<font color="#CCCCCC">of weird machine</font><font color="#E5E5E5"> behavior we did some</font>

55
00:01:59,180 --> 00:02:01,950
work<font color="#CCCCCC"> about a year ago I believe</font><font color="#E5E5E5"> for a</font>

56
00:02:01,189 --> 00:02:03,658
project

57
00:02:01,950 --> 00:02:05,939
<font color="#CCCCCC">Milka that looked into the possibility</font>

58
00:02:03,659 --> 00:02:08,099
of making the Linux kernel<font color="#CCCCCC"> subtor</font><font color="#E5E5E5"> and</font>

59
00:02:05,939 --> 00:02:10,169
complete<font color="#E5E5E5"> wherever applicable and we</font>

60
00:02:08,098 --> 00:02:11,730
found<font color="#CCCCCC"> that</font><font color="#E5E5E5"> about 90% of the kernel was a</font>

61
00:02:10,169 --> 00:02:13,849
candidate<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be made sub train complete</font>

62
00:02:11,730 --> 00:02:15,629
that's a pretty decent<font color="#E5E5E5"> metric for</font>

63
00:02:13,849 --> 00:02:17,819
<font color="#E5E5E5">whether or not you could extend that</font>

64
00:02:15,629 --> 00:02:20,069
<font color="#E5E5E5">kind of sub Turing completeness to other</font>

65
00:02:17,819 --> 00:02:21,660
simple applications or not so simple

66
00:02:20,069 --> 00:02:23,488
<font color="#E5E5E5">applications because</font><font color="#CCCCCC"> Glennis kernel is</font>

67
00:02:21,660 --> 00:02:25,109
for one quite large<font color="#CCCCCC"> it also has a lot of</font>

68
00:02:23,489 --> 00:02:26,720
<font color="#E5E5E5">other components</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> it like event</font>

69
00:02:25,110 --> 00:02:28,860
handlers which certainly don't<font color="#CCCCCC"> terminate</font>

70
00:02:26,720 --> 00:02:30,540
<font color="#CCCCCC">so you can kind of extend</font><font color="#E5E5E5"> that to</font>

71
00:02:28,860 --> 00:02:32,370
understand that if<font color="#E5E5E5"> 90% Linux kernel can</font>

72
00:02:30,540 --> 00:02:34,290
be made simpler and complete<font color="#CCCCCC"> than many</font>

73
00:02:32,370 --> 00:02:38,700
of the applications<font color="#CCCCCC"> can probably be done</font>

74
00:02:34,290 --> 00:02:40,650
similarly<font color="#E5E5E5"> or better so we are sort of in</font>

75
00:02:38,700 --> 00:02:42,298
<font color="#E5E5E5">this circle of bugs where you have a</font>

76
00:02:40,650 --> 00:02:44,430
complex data format you have<font color="#CCCCCC"> a complex</font>

77
00:02:42,299 --> 00:02:47,459
parser<font color="#CCCCCC"> you have analysis trying to do</font>

78
00:02:44,430 --> 00:02:48,930
which leads to bugs<font color="#CCCCCC"> and then we tried to</font>

79
00:02:47,459 --> 00:02:51,599
reactively deal with them by<font color="#E5E5E5"> writing</font>

80
00:02:48,930 --> 00:02:53,970
signatures<font color="#E5E5E5"> which is certainly not the</font>

81
00:02:51,599 --> 00:02:56,730
<font color="#CCCCCC">best</font><font color="#E5E5E5"> you know way things are going but</font>

82
00:02:53,970 --> 00:02:59,310
<font color="#CCCCCC">that's how they</font><font color="#E5E5E5"> are and at the center of</font>

83
00:02:56,730 --> 00:03:01,260
that is<font color="#E5E5E5"> input parsing which you know you</font>

84
00:02:59,310 --> 00:03:02,940
basically<font color="#CCCCCC"> have a program which an</font>

85
00:03:01,260 --> 00:03:05,160
attacker<font color="#E5E5E5"> has control</font><font color="#CCCCCC"> over</font><font color="#E5E5E5"> to put in</font>

86
00:03:02,940 --> 00:03:06,269
whatever type<font color="#CCCCCC"> of input they want</font><font color="#E5E5E5"> and if</font>

87
00:03:05,160 --> 00:03:08,130
they do it<font color="#E5E5E5"> right they can drive</font>

88
00:03:06,269 --> 00:03:11,310
execution flow and put the system<font color="#CCCCCC"> intent</font>

89
00:03:08,130 --> 00:03:14,280
on<font color="#CCCCCC"> course for the state which is hard to</font>

90
00:03:11,310 --> 00:03:15,780
model hard to hard to deal with<font color="#E5E5E5"> and</font><font color="#CCCCCC"> hard</font>

91
00:03:14,280 --> 00:03:17,670
to understand hard<font color="#E5E5E5"> to predict what</font>

92
00:03:15,780 --> 00:03:19,470
they're going to be doing<font color="#E5E5E5"> and in a</font>

93
00:03:17,670 --> 00:03:22,078
turing-complete environment so<font color="#E5E5E5"> you know</font>

94
00:03:19,470 --> 00:03:23,549
we can't<font color="#CCCCCC"> really</font><font color="#E5E5E5"> produce proof of what</font>

95
00:03:22,079 --> 00:03:25,680
<font color="#E5E5E5">that's going to look like because you</font>

96
00:03:23,549 --> 00:03:27,030
have a<font color="#CCCCCC"> situation where this</font><font color="#E5E5E5"> basically a</font>

97
00:03:25,680 --> 00:03:29,519
<font color="#E5E5E5">state exploding there's so many states</font>

98
00:03:27,030 --> 00:03:32,340
<font color="#E5E5E5">that we can't possibly you</font><font color="#CCCCCC"> know fully</font>

99
00:03:29,519 --> 00:03:33,600
understand them<font color="#CCCCCC"> if we model them all so</font>

100
00:03:32,340 --> 00:03:36,180
<font color="#E5E5E5">you sort of end up in the</font><font color="#CCCCCC"> situation</font>

101
00:03:33,600 --> 00:03:38,130
where as as well<font color="#E5E5E5"> as the you know</font>

102
00:03:36,180 --> 00:03:39,900
language<font color="#E5E5E5"> is more powerful the more</font>

103
00:03:38,130 --> 00:03:42,780
<font color="#E5E5E5">difficult it is to analyze automated</font>

104
00:03:39,900 --> 00:03:44,549
analysis tools don't really work<font color="#CCCCCC"> you</font>

105
00:03:42,780 --> 00:03:47,010
know becomes impossible to understand

106
00:03:44,549 --> 00:03:48,599
whether<font color="#E5E5E5"> or not the</font><font color="#CCCCCC"> program's no default</font>

107
00:03:47,010 --> 00:03:51,720
or<font color="#CCCCCC"> not</font><font color="#E5E5E5"> so you</font><font color="#CCCCCC"> have this kind of an</font>

108
00:03:48,599 --> 00:03:54,569
undecidability cliff<font color="#E5E5E5"> so</font><font color="#CCCCCC"> okay so</font><font color="#E5E5E5"> that's</font>

109
00:03:51,720 --> 00:03:57,120
all bad what<font color="#E5E5E5"> do we do to try to work</font>

110
00:03:54,569 --> 00:03:59,940
<font color="#E5E5E5">towards</font><font color="#CCCCCC"> a solution</font><font color="#E5E5E5"> so we took</font><font color="#CCCCCC"> LLVM</font>

111
00:03:57,120 --> 00:04:01,919
passes which a pass is basically a way

112
00:03:59,940 --> 00:04:02,819
<font color="#CCCCCC">to change an intermediate presentation</font>

113
00:04:01,919 --> 00:04:05,730
to a different type of near<font color="#CCCCCC"> meaner</font>

114
00:04:02,819 --> 00:04:07,619
representations so<font color="#CCCCCC"> LLVM supports passes</font>

115
00:04:05,730 --> 00:04:10,590
for a couple of<font color="#E5E5E5"> different things</font>

116
00:04:07,620 --> 00:04:11,920
loops functions<font color="#E5E5E5"> that sort of thing</font>

117
00:04:10,590 --> 00:04:13,510
there's a whole bunch<font color="#CCCCCC"> of other</font><font color="#E5E5E5"> ones we</font>

118
00:04:11,920 --> 00:04:16,570
particular<font color="#E5E5E5"> interest in the loop</font><font color="#CCCCCC"> pass</font><font color="#E5E5E5"> and</font>

119
00:04:13,510 --> 00:04:21,579
we can mark them for<font color="#E5E5E5"> unrolling and photo</font>

120
00:04:16,570 --> 00:04:22,900
<font color="#CCCCCC">enforcement</font><font color="#E5E5E5"> so we do exactly</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we you</font>

121
00:04:21,579 --> 00:04:25,000
know<font color="#E5E5E5"> we enroll them to afford only</font>

122
00:04:22,900 --> 00:04:28,210
<font color="#E5E5E5">situation to tread in areas of interest</font>

123
00:04:25,000 --> 00:04:30,730
and we can enforce afford only<font color="#E5E5E5"> behavior</font>

124
00:04:28,210 --> 00:04:32,500
<font color="#E5E5E5">right until</font><font color="#CCCCCC"> PT so a little</font><font color="#E5E5E5"> bit</font><font color="#CCCCCC"> more</font>

125
00:04:30,730 --> 00:04:34,330
<font color="#E5E5E5">detail</font><font color="#CCCCCC"> with what we specifically did</font>

126
00:04:32,500 --> 00:04:37,060
<font color="#CCCCCC">well you take a program</font><font color="#E5E5E5"> compile it to</font>

127
00:04:34,330 --> 00:04:39,580
the IR<font color="#E5E5E5"> and then you do your run</font><font color="#CCCCCC"> an</font>

128
00:04:37,060 --> 00:04:41,620
<font color="#E5E5E5">analysis to identify whatever loops</font><font color="#CCCCCC"> are</font>

129
00:04:39,580 --> 00:04:43,780
of interest<font color="#CCCCCC"> under all simple ones</font><font color="#E5E5E5"> so</font>

130
00:04:41,620 --> 00:04:46,060
simple loop means if you take for

131
00:04:43,780 --> 00:04:47,679
example<font color="#CCCCCC"> C for loop</font><font color="#E5E5E5"> for I equals</font><font color="#CCCCCC"> 0 I less</font>

132
00:04:46,060 --> 00:04:48,550
than 10<font color="#CCCCCC"> I plus plus that's a</font><font color="#E5E5E5"> simple loop</font>

133
00:04:47,680 --> 00:04:50,680
we know it's going<font color="#E5E5E5"> to terminate at</font>

134
00:04:48,550 --> 00:04:52,540
compile time<font color="#CCCCCC"> we just unroll</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> one</font>

135
00:04:50,680 --> 00:04:54,220
right away<font color="#CCCCCC"> for more complex loops think</font>

136
00:04:52,540 --> 00:04:56,080
about<font color="#CCCCCC"> something like I equals</font><font color="#E5E5E5"> 0 I less</font>

137
00:04:54,220 --> 00:04:58,690
than J<font color="#E5E5E5"> I plus plus</font><font color="#CCCCCC"> but we don't know</font><font color="#E5E5E5"> a J</font>

138
00:04:56,080 --> 00:05:00,639
it<font color="#E5E5E5"> is compiled as a compile time at some</font>

139
00:04:58,690 --> 00:05:04,330
<font color="#E5E5E5">more complex loops so we leave</font><font color="#CCCCCC"> that one</font>

140
00:05:00,639 --> 00:05:06,400
to<font color="#E5E5E5"> be a JIT handle that JIT by putting</font>

141
00:05:04,330 --> 00:05:08,979
it into<font color="#CCCCCC"> another function</font><font color="#E5E5E5"> and dealing</font>

142
00:05:06,400 --> 00:05:11,260
with<font color="#CCCCCC"> it at that point</font><font color="#E5E5E5"> for the hardware</font>

143
00:05:08,979 --> 00:05:13,870
enforcement we can insert<font color="#E5E5E5"> start sub</font>

144
00:05:11,260 --> 00:05:16,510
traces that can be<font color="#E5E5E5"> done automatically or</font>

145
00:05:13,870 --> 00:05:18,400
manually<font color="#E5E5E5"> there can be times when a</font>

146
00:05:16,510 --> 00:05:20,469
programmer just<font color="#E5E5E5"> wants to make sure that</font>

147
00:05:18,400 --> 00:05:21,789
they are<font color="#CCCCCC"> securing certain</font><font color="#E5E5E5"> sections of</font>

148
00:05:20,470 --> 00:05:23,440
code<font color="#E5E5E5"> so they can put that in manually to</font>

149
00:05:21,789 --> 00:05:27,570
enforce that<font color="#E5E5E5"> like a start of a function</font>

150
00:05:23,440 --> 00:05:30,130
in Lib C or something<font color="#CCCCCC"> like that and so</font>

151
00:05:27,570 --> 00:05:34,419
with the<font color="#E5E5E5"> with Intel PT we can trace data</font>

152
00:05:30,130 --> 00:05:36,370
and do parsing<font color="#E5E5E5"> so we can</font><font color="#CCCCCC"> detect if a</font>

153
00:05:34,419 --> 00:05:37,780
branch has gone to lower address which

154
00:05:36,370 --> 00:05:40,750
may not<font color="#E5E5E5"> be what we want if it's inside</font>

155
00:05:37,780 --> 00:05:43,539
<font color="#E5E5E5">this sort of sub trace and then as of</font>

156
00:05:40,750 --> 00:05:45,190
<font color="#E5E5E5">right now we currently are parsing the</font>

157
00:05:43,539 --> 00:05:46,390
target black actor's executed but

158
00:05:45,190 --> 00:05:47,740
there's not<font color="#E5E5E5"> really any reason we</font>

159
00:05:46,390 --> 00:05:51,729
<font color="#E5E5E5">couldn't do concurrent parsing it's just</font>

160
00:05:47,740 --> 00:05:53,229
a<font color="#E5E5E5"> question of man-hours</font><font color="#CCCCCC"> ok so that's</font>

161
00:05:51,729 --> 00:05:55,659
what we<font color="#CCCCCC"> set</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> to do and</font><font color="#E5E5E5"> that's what we</font>

162
00:05:53,229 --> 00:05:58,270
are<font color="#CCCCCC"> able to do successfully so in the in</font>

163
00:05:55,660 --> 00:06:00,940
actual implementation we<font color="#CCCCCC"> can under all</font>

164
00:05:58,270 --> 00:06:03,520
simple loops<font color="#E5E5E5"> and handle a complex whoops</font>

165
00:06:00,940 --> 00:06:05,260
JIT for<font color="#CCCCCC"> delay enforcement does work and</font>

166
00:06:03,520 --> 00:06:08,139
every case<font color="#E5E5E5"> that we would test and we</font>

167
00:06:05,260 --> 00:06:11,530
also were<font color="#CCCCCC"> able to handle some unexpected</font>

168
00:06:08,139 --> 00:06:13,750
instructions so for example if we we can

169
00:06:11,530 --> 00:06:15,280
model something<font color="#E5E5E5"> where if it returns to</font>

170
00:06:13,750 --> 00:06:17,919
an<font color="#E5E5E5"> address that we don't expect</font><font color="#CCCCCC"> it to</font>

171
00:06:15,280 --> 00:06:19,119
return<font color="#CCCCCC"> to we can trap that some that we</font>

172
00:06:17,919 --> 00:06:20,700
can be extended it's just something we

173
00:06:19,120 --> 00:06:23,800
sort<font color="#E5E5E5"> of played with for a little while</font>

174
00:06:20,700 --> 00:06:24,570
so we did all<font color="#CCCCCC"> that is this actually</font>

175
00:06:23,800 --> 00:06:27,420
effective as

176
00:06:24,570 --> 00:06:29,150
<font color="#E5E5E5">exploitation</font><font color="#CCCCCC"> so in order to</font><font color="#E5E5E5"> answer that</font>

177
00:06:27,420 --> 00:06:32,610
<font color="#CCCCCC">question we did a little</font><font color="#E5E5E5"> bit of testing</font>

178
00:06:29,150 --> 00:06:35,760
<font color="#E5E5E5">by creating by looking to see if we can</font>

179
00:06:32,610 --> 00:06:37,830
create a<font color="#CCCCCC"> quarterly wrap chain</font><font color="#E5E5E5"> versus</font>

180
00:06:35,760 --> 00:06:39,810
just and how success we were with<font color="#CCCCCC"> that</font>

181
00:06:37,830 --> 00:06:41,700
versus doing the simple<font color="#E5E5E5"> rock chain</font>

182
00:06:39,810 --> 00:06:43,830
<font color="#E5E5E5">without any of this enforcement so this</font>

183
00:06:41,700 --> 00:06:45,840
is<font color="#E5E5E5"> an extremely stupid</font><font color="#CCCCCC"> simple way</font><font color="#E5E5E5"> to</font>

184
00:06:43,830 --> 00:06:47,609
visualize it<font color="#CCCCCC"> I have</font><font color="#E5E5E5"> an actual partial</font>

185
00:06:45,840 --> 00:06:50,400
<font color="#CCCCCC">wrap chain the next slide but just to</font>

186
00:06:47,610 --> 00:06:51,750
sort<font color="#E5E5E5"> of illustrate what we're doing for</font>

187
00:06:50,400 --> 00:06:53,159
<font color="#E5E5E5">anyone who's not</font><font color="#CCCCCC"> familiar</font><font color="#E5E5E5"> opportunities</font>

188
00:06:51,750 --> 00:06:55,680
basically if you have a<font color="#E5E5E5"> non exceedence</font>

189
00:06:53,160 --> 00:06:57,120
<font color="#CCCCCC">back you can't just look for</font><font color="#E5E5E5"> a city a</font>

190
00:06:55,680 --> 00:06:59,070
buffer overflow copy<font color="#CCCCCC"> or</font><font color="#E5E5E5"> shelter</font><font color="#CCCCCC"> in the</font>

191
00:06:57,120 --> 00:07:00,450
stack<font color="#E5E5E5"> and execute with a</font><font color="#CCCCCC"> shell code so</font>

192
00:06:59,070 --> 00:07:03,570
we need to do is find code somewhere<font color="#E5E5E5"> you</font>

193
00:07:00,450 --> 00:07:05,400
<font color="#CCCCCC">can</font><font color="#E5E5E5"> execute it so you can put some put</font>

194
00:07:03,570 --> 00:07:07,740
some data on the stack<font color="#CCCCCC"> that you need to</font>

195
00:07:05,400 --> 00:07:09,239
return the proper addresses find some

196
00:07:07,740 --> 00:07:10,830
gadgets throughout your executable

197
00:07:09,240 --> 00:07:12,690
environment jump from them<font color="#E5E5E5"> so you've</font>

198
00:07:10,830 --> 00:07:15,330
basically created<font color="#CCCCCC"> Nome and you so you</font>

199
00:07:12,690 --> 00:07:17,400
<font color="#E5E5E5">define</font><font color="#CCCCCC"> drop gadgets</font><font color="#E5E5E5"> throughout your code</font>

200
00:07:15,330 --> 00:07:18,810
<font color="#CCCCCC">so on the knurl in a normal environment</font>

201
00:07:17,400 --> 00:07:20,190
<font color="#E5E5E5">you can jump all over the</font><font color="#CCCCCC"> place in</font><font color="#E5E5E5"> your</font>

202
00:07:18,810 --> 00:07:22,140
code<font color="#E5E5E5"> from any addresses you</font><font color="#CCCCCC"> want from</font>

203
00:07:20,190 --> 00:07:23,760
lower to higher higher to lower so<font color="#CCCCCC"> they</font>

204
00:07:22,140 --> 00:07:24,960
live example you're going<font color="#CCCCCC"> from</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> to</font>

205
00:07:23,760 --> 00:07:26,340
the next to<font color="#E5E5E5"> the next and skipping the</font>

206
00:07:24,960 --> 00:07:27,630
one going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the last one going back</font>

207
00:07:26,340 --> 00:07:29,549
<font color="#E5E5E5">where as interest rate oh you can only</font>

208
00:07:27,630 --> 00:07:31,200
go forward<font color="#CCCCCC"> whereas you can skip certain</font>

209
00:07:29,550 --> 00:07:34,080
gadgets<font color="#E5E5E5"> you can if you try to go back</font>

210
00:07:31,200 --> 00:07:37,500
you'll get you'll get told off by<font color="#CCCCCC"> Intel</font>

211
00:07:34,080 --> 00:07:39,150
PT so here's a bit more of an

212
00:07:37,500 --> 00:07:41,670
illustrative example with a partial<font color="#CCCCCC"> Rob</font>

213
00:07:39,150 --> 00:07:43,049
chain I just<font color="#CCCCCC"> pull that enough to be able</font>

214
00:07:41,670 --> 00:07:44,970
<font color="#E5E5E5">to show you without</font><font color="#CCCCCC"> it being so small</font>

215
00:07:43,050 --> 00:07:47,130
you can't read it<font color="#E5E5E5"> but basically you know</font>

216
00:07:44,970 --> 00:07:48,480
the arrows kind of help<font color="#CCCCCC"> show you that</font>

217
00:07:47,130 --> 00:07:50,190
you<font color="#E5E5E5"> know on the</font><font color="#CCCCCC"> top one you</font><font color="#E5E5E5"> have the</font>

218
00:07:48,480 --> 00:07:51,540
lower addresses<font color="#E5E5E5"> higher either stays</font>

219
00:07:50,190 --> 00:07:53,040
higher addresses lower registers in some

220
00:07:51,540 --> 00:07:55,100
<font color="#E5E5E5">cases actually repeats the same gadget</font>

221
00:07:53,040 --> 00:07:58,890
<font color="#CCCCCC">in our shredder they can only go forward</font>

222
00:07:55,100 --> 00:08:01,020
<font color="#E5E5E5">which is at the bottom</font><font color="#CCCCCC"> so in order</font><font color="#E5E5E5"> to do</font>

223
00:07:58,890 --> 00:08:03,120
this<font color="#CCCCCC"> answer this question initially</font><font color="#E5E5E5"> we</font>

224
00:08:01,020 --> 00:08:05,669
tried to just<font color="#CCCCCC"> do one by hand</font><font color="#E5E5E5"> which was</font>

225
00:08:03,120 --> 00:08:07,200
<font color="#E5E5E5">about as miserable as you'd expect there</font>

226
00:08:05,670 --> 00:08:09,300
<font color="#E5E5E5">was no</font><font color="#CCCCCC"> situation that I found that I</font>

227
00:08:07,200 --> 00:08:11,159
<font color="#CCCCCC">could actually do this</font><font color="#E5E5E5"> so we took a tool</font>

228
00:08:09,300 --> 00:08:13,770
<font color="#CCCCCC">name</font><font color="#E5E5E5"> dropper which is freely available</font>

229
00:08:11,160 --> 00:08:16,290
<font color="#E5E5E5">and github and modified it</font><font color="#CCCCCC"> to be able</font><font color="#E5E5E5"> to</font>

230
00:08:13,770 --> 00:08:18,659
support and only do<font color="#CCCCCC"> four</font><font color="#E5E5E5"> lean</font><font color="#CCCCCC"> fund</font>

231
00:08:16,290 --> 00:08:22,470
afford<font color="#E5E5E5"> only gadget</font><font color="#CCCCCC"> sorry for only</font><font color="#E5E5E5"> Rob</font>

232
00:08:18,660 --> 00:08:24,150
<font color="#E5E5E5">chain so and basically what it would do</font>

233
00:08:22,470 --> 00:08:25,830
is you know you tell it to<font color="#E5E5E5"> go and it</font>

234
00:08:24,150 --> 00:08:27,060
<font color="#E5E5E5">would start from our</font><font color="#CCCCCC"> self and first</font><font color="#E5E5E5"> guys</font>

235
00:08:25,830 --> 00:08:28,260
<font color="#E5E5E5">are defined works the way down trying to</font>

236
00:08:27,060 --> 00:08:29,550
<font color="#E5E5E5">find some of your</font><font color="#CCCCCC"> sales</font><font color="#E5E5E5"> and go back up</font>

237
00:08:28,260 --> 00:08:32,189
<font color="#CCCCCC">and try again so</font><font color="#E5E5E5"> next one down all the</font>

238
00:08:29,550 --> 00:08:33,479
way<font color="#E5E5E5"> down so it was about you know and so</font>

239
00:08:32,190 --> 00:08:35,070
we tested this<font color="#E5E5E5"> across a bunch of</font>

240
00:08:33,479 --> 00:08:36,560
different gadgets the

241
00:08:35,070 --> 00:08:39,450
are a bunch of different binaries

242
00:08:36,559 --> 00:08:41,880
<font color="#E5E5E5">including for Linux we tried to do</font>

243
00:08:39,450 --> 00:08:43,470
exactly<font color="#CCCCCC"> e</font><font color="#E5E5E5"> some sort of</font><font color="#CCCCCC"> excuse actually D</font>

244
00:08:41,880 --> 00:08:45,660
like<font color="#E5E5E5"> X</font><font color="#CCCCCC"> cubed been SH which</font><font color="#E5E5E5"> is a pretty</font>

245
00:08:43,470 --> 00:08:48,660
<font color="#E5E5E5">traditional way to do a rap chain or run</font>

246
00:08:45,660 --> 00:08:50,910
<font color="#E5E5E5">em</font><font color="#CCCCCC"> protect</font><font color="#E5E5E5"> invert and virtual</font><font color="#CCCCCC"> flag for</font>

247
00:08:48,660 --> 00:08:54,030
<font color="#CCCCCC">Windows</font><font color="#E5E5E5"> and so in the next case we just</font>

248
00:08:50,910 --> 00:08:55,680
<font color="#E5E5E5">made us a really simple Lib C</font><font color="#CCCCCC"> statically</font>

249
00:08:54,030 --> 00:08:57,120
<font color="#CCCCCC">linked elf binary which I think it just</font>

250
00:08:55,680 --> 00:08:59,819
<font color="#E5E5E5">had like a print half and just echoed</font>

251
00:08:57,120 --> 00:09:01,770
<font color="#E5E5E5">linked in Lib C and then MySQL daemon</font>

252
00:08:59,820 --> 00:09:04,770
because it was big<font color="#CCCCCC"> and we did</font><font color="#E5E5E5"> that for</font>

253
00:09:01,770 --> 00:09:06,930
<font color="#CCCCCC">x86 and</font><font color="#E5E5E5"> x86 64 and for Windows we just</font>

254
00:09:04,770 --> 00:09:10,500
use the<font color="#E5E5E5"> windows CMD + a cygwin bash that</font>

255
00:09:06,930 --> 00:09:11,910
<font color="#E5E5E5">exe for x86 and</font><font color="#CCCCCC"> x86 64</font><font color="#E5E5E5"> in all cases this</font>

256
00:09:10,500 --> 00:09:14,370
thing failed across the board there's no

257
00:09:11,910 --> 00:09:16,199
case where it could<font color="#E5E5E5"> find a</font><font color="#CCCCCC"> erupted chain</font>

258
00:09:14,370 --> 00:09:19,920
in her<font color="#CCCCCC"> straight-up case even in cases</font>

259
00:09:16,200 --> 00:09:22,020
where we had a<font color="#CCCCCC"> rob</font><font color="#E5E5E5"> chain failure in a</font>

260
00:09:19,920 --> 00:09:23,819
normal environment<font color="#E5E5E5"> it would ristretto</font>

261
00:09:22,020 --> 00:09:25,319
still causes the<font color="#CCCCCC"> fail</font><font color="#E5E5E5"> of very early</font><font color="#CCCCCC"> on</font>

262
00:09:23,820 --> 00:09:27,780
<font color="#E5E5E5">so we sometimes not even be able to get</font>

263
00:09:25,320 --> 00:09:31,020
past<font color="#E5E5E5"> the first gadget in the in the</font>

264
00:09:27,780 --> 00:09:33,750
chain so it's pretty it did a<font color="#E5E5E5"> pretty</font>

265
00:09:31,020 --> 00:09:35,640
good job overall<font color="#E5E5E5"> so the performance</font>

266
00:09:33,750 --> 00:09:37,440
<font color="#E5E5E5">impact of doing this with until PT I</font>

267
00:09:35,640 --> 00:09:39,569
mentioned<font color="#CCCCCC"> before about</font><font color="#E5E5E5"> 5% that's what we</font>

268
00:09:37,440 --> 00:09:41,700
found in our testing that's just for the

269
00:09:39,570 --> 00:09:42,990
tracing part for the parsing<font color="#E5E5E5"> the</font>

270
00:09:41,700 --> 00:09:44,820
overhead comes out to<font color="#E5E5E5"> about</font><font color="#CCCCCC"> 200 percent</font>

271
00:09:42,990 --> 00:09:46,080
this<font color="#CCCCCC"> is still</font><font color="#E5E5E5"> very you know initial</font>

272
00:09:44,820 --> 00:09:47,910
research<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that could be whittled down</font>

273
00:09:46,080 --> 00:09:50,280
quite a<font color="#CCCCCC"> bit which I can talk about a</font>

274
00:09:47,910 --> 00:09:51,750
<font color="#CCCCCC">little more in a bit and for the JIT</font>

275
00:09:50,280 --> 00:09:53,270
<font color="#CCCCCC">enrolling</font><font color="#E5E5E5"> that was also a pretty</font>

276
00:09:51,750 --> 00:09:55,890
substantial hit but<font color="#E5E5E5"> that's not very</font>

277
00:09:53,270 --> 00:09:57,120
<font color="#CCCCCC">common to encounter a situation we need</font>

278
00:09:55,890 --> 00:10:00,360
to actually<font color="#E5E5E5"> handle the loop JIT</font>

279
00:09:57,120 --> 00:10:01,740
<font color="#E5E5E5">and even and as a result of that we</font>

280
00:10:00,360 --> 00:10:03,270
<font color="#CCCCCC">actually had a difficult time testing it</font>

281
00:10:01,740 --> 00:10:09,200
because not<font color="#E5E5E5"> many samples</font><font color="#CCCCCC"> of that to base</font>

282
00:10:03,270 --> 00:10:11,100
our overall performance head off of so

283
00:10:09,200 --> 00:10:14,070
what do we<font color="#E5E5E5"> take</font><font color="#CCCCCC"> what can we take away</font>

284
00:10:11,100 --> 00:10:16,410
from<font color="#E5E5E5"> this well this this kind of a this</font>

285
00:10:14,070 --> 00:10:19,020
path forward sort of gives a<font color="#E5E5E5"> ability to</font>

286
00:10:16,410 --> 00:10:20,430
you<font color="#CCCCCC"> know be able</font><font color="#E5E5E5"> to handle suffer and</font>

287
00:10:19,020 --> 00:10:21,960
form the verify some software<font color="#CCCCCC"> that we</font>

288
00:10:20,430 --> 00:10:24,420
previously<font color="#E5E5E5"> couldn't because it</font><font color="#CCCCCC"> was</font>

289
00:10:21,960 --> 00:10:26,130
<font color="#CCCCCC">Turing</font><font color="#E5E5E5"> complete it can automatically</font>

290
00:10:24,420 --> 00:10:27,870
limited risks<font color="#E5E5E5"> to certain types of</font>

291
00:10:26,130 --> 00:10:30,150
programming practices

292
00:10:27,870 --> 00:10:33,480
<font color="#CCCCCC">I sort of you</font><font color="#E5E5E5"> know hand those tools over</font>

293
00:10:30,150 --> 00:10:35,100
to some partners<font color="#E5E5E5"> so there's a lot</font><font color="#CCCCCC"> of</font>

294
00:10:33,480 --> 00:10:36,840
future work that<font color="#E5E5E5"> can</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> done in this</font>

295
00:10:35,100 --> 00:10:39,750
<font color="#E5E5E5">respect for a lot</font><font color="#CCCCCC"> of this work</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> I</font>

296
00:10:36,840 --> 00:10:40,890
<font color="#E5E5E5">mentioned card parsing before</font><font color="#CCCCCC"> that's</font>

297
00:10:39,750 --> 00:10:43,050
<font color="#E5E5E5">certain something</font><font color="#CCCCCC"> we can do is just a</font>

298
00:10:40,890 --> 00:10:44,670
<font color="#E5E5E5">question of manpower</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> are other</font>

299
00:10:43,050 --> 00:10:44,930
<font color="#E5E5E5">enforcement mechanisms that are out</font>

300
00:10:44,670 --> 00:10:46,699
there

301
00:10:44,930 --> 00:10:47,899
that could be<font color="#E5E5E5"> leveraged</font><font color="#CCCCCC"> to substantially</font>

302
00:10:46,700 --> 00:10:50,120
increase<font color="#CCCCCC"> the performance</font><font color="#E5E5E5"> of this I</font>

303
00:10:47,899 --> 00:10:51,200
<font color="#E5E5E5">believe that arm actually supports</font>

304
00:10:50,120 --> 00:10:53,540
certain<font color="#E5E5E5"> types of branch</font><font color="#CCCCCC"> carving</font><font color="#E5E5E5"> in the</font>

305
00:10:51,200 --> 00:10:55,220
<font color="#E5E5E5">hardware there's also the</font><font color="#CCCCCC"> ability</font><font color="#E5E5E5"> and</font>

306
00:10:53,540 --> 00:10:56,750
<font color="#E5E5E5">arm in the hardware level to do for</font>

307
00:10:55,220 --> 00:10:57,920
<font color="#E5E5E5">delay enforcement so that</font><font color="#CCCCCC"> would be</font>

308
00:10:56,750 --> 00:10:59,630
certainly<font color="#E5E5E5"> something to look into it</font>

309
00:10:57,920 --> 00:11:02,569
would in that case<font color="#E5E5E5"> actually limited the</font>

310
00:10:59,630 --> 00:11:04,010
parsing cost entirely<font color="#CCCCCC"> and</font><font color="#E5E5E5"> we could do</font>

311
00:11:02,570 --> 00:11:05,990
some<font color="#CCCCCC"> more</font><font color="#E5E5E5"> performances</font><font color="#CCCCCC"> in the JIT which</font>

312
00:11:04,010 --> 00:11:07,279
I mentioned before<font color="#E5E5E5"> we had pretty limited</font>

313
00:11:05,990 --> 00:11:10,459
<font color="#CCCCCC">sample sets to actually get a full</font>

314
00:11:07,279 --> 00:11:12,770
semblance of how how substantial the

315
00:11:10,459 --> 00:11:14,510
performance<font color="#E5E5E5"> impact it has on us there's</font>

316
00:11:12,770 --> 00:11:16,430
various<font color="#CCCCCC"> other tests we can do</font><font color="#E5E5E5"> Testament</font>

317
00:11:14,510 --> 00:11:19,490
binaries<font color="#CCCCCC"> that sort of</font><font color="#E5E5E5"> thing</font>

318
00:11:16,430 --> 00:11:21,290
and since we you know given given all

319
00:11:19,490 --> 00:11:22,850
this work there's a<font color="#E5E5E5"> lot of other</font>

320
00:11:21,290 --> 00:11:25,160
<font color="#E5E5E5">techniques</font><font color="#CCCCCC"> like I mentioned before</font><font color="#E5E5E5"> that</font>

321
00:11:22,850 --> 00:11:28,160
<font color="#E5E5E5">we can do with if we don't have to worry</font>

322
00:11:25,160 --> 00:11:30,140
<font color="#E5E5E5">about termination and also since we can</font>

323
00:11:28,160 --> 00:11:31,910
recognize certain areas the code

324
00:11:30,140 --> 00:11:35,449
<font color="#CCCCCC">automatically</font><font color="#E5E5E5"> that are subject to</font>

325
00:11:31,910 --> 00:11:38,300
possibly being in danger<font color="#E5E5E5"> of you know of</font>

326
00:11:35,450 --> 00:11:39,980
<font color="#CCCCCC">being causing weird machine State that</font>

327
00:11:38,300 --> 00:11:41,329
kind of lends itself to mean that<font color="#E5E5E5"> even a</font>

328
00:11:39,980 --> 00:11:42,560
compiler<font color="#E5E5E5"> environment we can recognize</font>

329
00:11:41,330 --> 00:11:44,600
certain areas of<font color="#E5E5E5"> the code</font><font color="#CCCCCC"> that could</font><font color="#E5E5E5"> be</font>

330
00:11:42,560 --> 00:11:46,189
made more simple more secure<font color="#E5E5E5"> that sort</font>

331
00:11:44,600 --> 00:11:47,330
of<font color="#E5E5E5"> thing and warning a developer on the</font>

332
00:11:46,190 --> 00:11:51,050
fly<font color="#E5E5E5"> that maybe they should consider</font>

333
00:11:47,330 --> 00:11:52,820
rewriting something a different<font color="#CCCCCC"> way</font><font color="#E5E5E5"> on a</font>

334
00:11:51,050 --> 00:11:54,349
<font color="#E5E5E5">different note there's also the</font>

335
00:11:52,820 --> 00:11:57,050
possibility of<font color="#E5E5E5"> looking to something like</font>

336
00:11:54,350 --> 00:11:58,970
<font color="#E5E5E5">a subset processor so think about this</font>

337
00:11:57,050 --> 00:12:00,589
in a sense<font color="#E5E5E5"> of you don't need to actually</font>

338
00:11:58,970 --> 00:12:01,610
<font color="#CCCCCC">a physical separate processor but it</font><font color="#E5E5E5"> may</font>

339
00:12:00,589 --> 00:12:04,070
<font color="#E5E5E5">be easier to visualize it in that</font>

340
00:12:01,610 --> 00:12:05,240
respect<font color="#CCCCCC"> so like a GPU</font><font color="#E5E5E5"> has a FPU that</font>

341
00:12:04,070 --> 00:12:06,440
only does floating-point<font color="#E5E5E5"> operations so</font>

342
00:12:05,240 --> 00:12:08,390
if you had a separate<font color="#CCCCCC"> processor</font><font color="#E5E5E5"> that if</font>

343
00:12:06,440 --> 00:12:09,860
only<font color="#CCCCCC"> did</font><font color="#E5E5E5"> for one execution or can</font><font color="#CCCCCC"> only</font>

344
00:12:08,390 --> 00:12:11,270
do certain<font color="#CCCCCC"> types of memory access or</font>

345
00:12:09,860 --> 00:12:12,890
something<font color="#E5E5E5"> like</font><font color="#CCCCCC"> that we could</font><font color="#E5E5E5"> isolate</font>

346
00:12:11,270 --> 00:12:15,860
that kind of execution to that<font color="#CCCCCC"> hardware</font>

347
00:12:12,890 --> 00:12:18,319
and isolate<font color="#CCCCCC"> it that way separately we</font>

348
00:12:15,860 --> 00:12:19,820
<font color="#CCCCCC">could also look into making</font><font color="#E5E5E5"> our passes a</font>

349
00:12:18,320 --> 00:12:22,820
bit more general so they can make it

350
00:12:19,820 --> 00:12:24,260
easier<font color="#E5E5E5"> to port and even</font><font color="#CCCCCC"> our attractively</font>

351
00:12:22,820 --> 00:12:26,420
go back and look<font color="#E5E5E5"> at some existing</font>

352
00:12:24,260 --> 00:12:28,220
binaries by using<font color="#CCCCCC"> a binary looking tool</font>

353
00:12:26,420 --> 00:12:30,319
like MCC<font color="#CCCCCC"> mo which is a tool provided by</font>

354
00:12:28,220 --> 00:12:32,630
trailer bits which lifts a binary<font color="#E5E5E5"> into</font>

355
00:12:30,320 --> 00:12:35,450
<font color="#E5E5E5">hell opium bit code and doing operations</font>

356
00:12:32,630 --> 00:12:38,240
<font color="#CCCCCC">on that moving</font><font color="#E5E5E5"> forward</font><font color="#CCCCCC"> and there's also</font>

357
00:12:35,450 --> 00:12:40,130
<font color="#E5E5E5">certain things like looking into doing</font>

358
00:12:38,240 --> 00:12:44,510
<font color="#CCCCCC">Magento micro</font><font color="#E5E5E5"> recoding to do have this</font>

359
00:12:40,130 --> 00:12:46,040
<font color="#CCCCCC">kind of</font><font color="#E5E5E5"> thing on the fly anyway I'd like</font>

360
00:12:44,510 --> 00:12:48,140
to thank<font color="#CCCCCC"> therefore i2 o for sponsoring</font>

361
00:12:46,040 --> 00:12:50,120
this work as well as<font color="#CCCCCC"> Sergey</font><font color="#E5E5E5"> and however</font>

362
00:12:48,140 --> 00:12:52,449
<font color="#E5E5E5">for their</font><font color="#CCCCCC"> input and support</font><font color="#E5E5E5"> any</font>

363
00:12:50,120 --> 00:12:52,450
questions

364
00:12:52,690 --> 00:12:55,889
[Applause]

365
00:12:56,600 --> 00:13:07,500
you mentioned<font color="#CCCCCC"> LPG</font><font color="#E5E5E5"> here there are other</font>

366
00:13:02,750 --> 00:13:09,600
you<font color="#CCCCCC"> are not</font><font color="#E5E5E5"> that I'm more of except for</font>

367
00:13:07,500 --> 00:13:12,210
the<font color="#E5E5E5"> arm one admittedly I haven't</font><font color="#CCCCCC"> looked</font>

368
00:13:09,600 --> 00:13:13,800
into<font color="#E5E5E5"> it really that much but arm arms so</font>

369
00:13:12,210 --> 00:13:15,210
I'm told and I'm<font color="#E5E5E5"> trusting one of our</font>

370
00:13:13,800 --> 00:13:17,490
other developers<font color="#CCCCCC"> to tell me the</font><font color="#E5E5E5"> truth on</font>

371
00:13:15,210 --> 00:13:19,170
<font color="#E5E5E5">this one he told me that that</font><font color="#CCCCCC"> arm</font>

372
00:13:17,490 --> 00:13:21,000
<font color="#E5E5E5">actually allows you to you know trap on</font>

373
00:13:19,170 --> 00:13:22,280
certain unexpected branches and<font color="#E5E5E5"> actually</font>

374
00:13:21,000 --> 00:13:24,900
<font color="#CCCCCC">enforcement Hardware forward only</font>

375
00:13:22,280 --> 00:13:26,819
branching our sorry<font color="#E5E5E5"> for delay execution</font>

376
00:13:24,900 --> 00:13:27,600
so as far as<font color="#E5E5E5"> the other ones I'm not</font>

377
00:13:26,820 --> 00:13:29,880
<font color="#CCCCCC">really sure about the other</font>

378
00:13:27,600 --> 00:13:31,170
<font color="#CCCCCC">architectures but I would I mean now</font>

379
00:13:29,880 --> 00:13:35,450
they<font color="#E5E5E5"> asked that question I would think</font>

380
00:13:31,170 --> 00:13:35,449
so<font color="#CCCCCC"> that would make</font><font color="#E5E5E5"> sense to me</font>

381
00:13:48,830 --> 00:14:07,230
<font color="#E5E5E5">developed not only</font><font color="#CCCCCC"> we have enough not</font>

382
00:14:06,000 --> 00:14:10,220
really it's probably<font color="#CCCCCC"> some</font><font color="#E5E5E5"> admission</font>

383
00:14:07,230 --> 00:14:10,220
<font color="#CCCCCC">firearm play for</font><font color="#E5E5E5"> future work</font>

384
00:14:14,760 --> 00:14:17,809
[Music]

