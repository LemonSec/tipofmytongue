1
00:00:00,140 --> 00:00:04,129
it gets it in<font color="#CCCCCC"> the</font>

2
00:00:16,219 --> 00:00:19,220
yep

3
00:00:28,170 --> 00:00:31,580
<font color="#E5E5E5">of course I'm just</font>

4
00:00:41,500 --> 00:00:47,660
<font color="#E5E5E5">Valley por nada como</font><font color="#CCCCCC"> Townsend encinia</font>

5
00:00:45,110 --> 00:00:51,140
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> since this is a cinema</font><font color="#CCCCCC"> let me show</font>

6
00:00:47,660 --> 00:00:53,629
you that<font color="#CCCCCC"> picture</font><font color="#E5E5E5"> on world is</font><font color="#CCCCCC"> name I'm</font>

7
00:00:51,140 --> 00:00:55,550
Peppa<font color="#CCCCCC"> Villa I'll tell you about a</font>

8
00:00:53,629 --> 00:01:01,730
project<font color="#CCCCCC"> where I've</font><font color="#E5E5E5"> been doing some</font>

9
00:00:55,550 --> 00:01:05,300
<font color="#E5E5E5">research with my PhD</font><font color="#CCCCCC"> thesis director I'm</font>

10
00:01:01,730 --> 00:01:08,869
a<font color="#E5E5E5"> PhD student at India software which is</font>

11
00:01:05,300 --> 00:01:11,990
messages here in<font color="#CCCCCC"> Portola</font><font color="#E5E5E5"> plus my Twitter</font>

12
00:01:08,869 --> 00:01:14,660
account<font color="#E5E5E5"> on my</font><font color="#CCCCCC"> URL where there</font><font color="#E5E5E5"> is a draft</font>

13
00:01:11,990 --> 00:01:19,899
<font color="#E5E5E5">of this paper in them with a little more</font>

14
00:01:14,660 --> 00:01:22,340
detail<font color="#E5E5E5"> so I'll do</font><font color="#CCCCCC"> my best to speed up</font>

15
00:01:19,899 --> 00:01:26,479
<font color="#E5E5E5">because I'll tell you about many things</font>

16
00:01:22,340 --> 00:01:31,250
so before I start<font color="#E5E5E5"> cron was a black</font><font color="#CCCCCC"> focus</font>

17
00:01:26,479 --> 00:01:36,679
<font color="#E5E5E5">on the answer recently it renders things</font>

18
00:01:31,250 --> 00:01:41,920
with HTML so here<font color="#CCCCCC"> I</font><font color="#E5E5E5"> good this is a good</font>

19
00:01:36,679 --> 00:01:41,920
list<font color="#E5E5E5"> of things where you</font><font color="#CCCCCC"> could start</font>

20
00:01:43,940 --> 00:01:49,140
now several<font color="#E5E5E5"> tenders like their lists</font>

21
00:01:46,890 --> 00:01:51,840
where you can actually<font color="#E5E5E5"> ask questions</font><font color="#CCCCCC"> you</font>

22
00:01:49,140 --> 00:01:54,410
can talk to developers<font color="#E5E5E5"> if you're</font>

23
00:01:51,840 --> 00:01:57,660
interested<font color="#E5E5E5"> in a specific functionality</font>

24
00:01:54,410 --> 00:01:59,280
you can<font color="#CCCCCC"> find things</font><font color="#E5E5E5"> pointers and</font>

25
00:01:57,660 --> 00:02:01,560
references of our code in<font color="#E5E5E5"> their lists</font>

26
00:01:59,280 --> 00:02:05,490
<font color="#CCCCCC">that</font><font color="#E5E5E5"> can be quite</font><font color="#CCCCCC"> useful design</font>

27
00:02:01,560 --> 00:02:07,320
documents these are Google Docs used by

28
00:02:05,490 --> 00:02:09,600
developers

29
00:02:07,320 --> 00:02:13,820
for the current<font color="#CCCCCC"> project</font><font color="#E5E5E5"> with diagrams</font>

30
00:02:09,600 --> 00:02:18,930
<font color="#E5E5E5">potential designs of new functionalities</font>

31
00:02:13,820 --> 00:02:21,950
most will<font color="#CCCCCC"> be out of date all since</font>

32
00:02:18,930 --> 00:02:24,840
they're implementing 24 by 7 is<font color="#E5E5E5"> terrible</font>

33
00:02:21,950 --> 00:02:26,519
<font color="#E5E5E5">why did you think when they implement</font>

34
00:02:24,840 --> 00:02:28,920
something<font color="#E5E5E5"> it will</font><font color="#CCCCCC"> probably be very</font>

35
00:02:26,520 --> 00:02:30,360
<font color="#CCCCCC">different from what you've read about in</font>

36
00:02:28,920 --> 00:02:32,280
<font color="#E5E5E5">the design document but to give you an</font>

37
00:02:30,360 --> 00:02:35,580
<font color="#E5E5E5">idea it should be handy</font>

38
00:02:32,280 --> 00:02:37,910
bug track<font color="#CCCCCC"> well the same story you can</font>

39
00:02:35,580 --> 00:02:40,170
search for<font color="#CCCCCC"> specific functionalities or</font>

40
00:02:37,910 --> 00:02:42,480
bugs in functionalities and<font color="#E5E5E5"> there are</font>

41
00:02:40,170 --> 00:02:45,630
always references to the<font color="#E5E5E5"> code no</font><font color="#CCCCCC"> way to</font>

42
00:02:42,480 --> 00:02:47,549
<font color="#CCCCCC">move around and</font><font color="#E5E5E5"> finally if you don't</font>

43
00:02:45,630 --> 00:02:50,730
want to<font color="#E5E5E5"> install them if they install</font>

44
00:02:47,550 --> 00:02:53,880
anything<font color="#E5E5E5"> locally this URL gives you all</font>

45
00:02:50,730 --> 00:02:56,399
the source code<font color="#E5E5E5"> for</font><font color="#CCCCCC"> chrome with</font>

46
00:02:53,880 --> 00:03:00,500
references<font color="#CCCCCC"> of different sorts</font><font color="#E5E5E5"> so it is</font>

47
00:02:56,400 --> 00:03:00,500
quite handy to<font color="#CCCCCC"> browse</font>

48
00:03:01,520 --> 00:03:06,260
I'm going to be<font color="#CCCCCC"> touching on many</font>

49
00:03:04,520 --> 00:03:11,990
<font color="#E5E5E5">different things very quickly</font><font color="#CCCCCC"> if you</font>

50
00:03:06,260 --> 00:03:15,880
really want to go<font color="#CCCCCC"> into detail come</font><font color="#E5E5E5"> over</font>

51
00:03:11,990 --> 00:03:20,360
and let<font color="#CCCCCC"> me</font><font color="#E5E5E5"> know so a brief introduction</font>

52
00:03:15,880 --> 00:03:22,460
event-driven programming<font color="#E5E5E5"> event loops and</font>

53
00:03:20,360 --> 00:03:25,760
the timing side channels channel on

54
00:03:22,460 --> 00:03:31,880
event loops they state what we will see

55
00:03:25,760 --> 00:03:33,829
a very<font color="#CCCCCC"> simple</font><font color="#E5E5E5"> idea</font><font color="#CCCCCC"> in chrome EDP is a</font>

56
00:03:31,880 --> 00:03:38,269
programming paradigm<font color="#E5E5E5"> for</font><font color="#CCCCCC"> gear is</font>

57
00:03:33,830 --> 00:03:41,630
basically for web lines<font color="#E5E5E5"> in fact the</font>

58
00:03:38,270 --> 00:03:47,630
<font color="#E5E5E5">standard itself</font><font color="#CCCCCC"> for HTML 5</font><font color="#E5E5E5"> says that</font><font color="#CCCCCC"> you</font>

59
00:03:41,630 --> 00:03:51,140
should use<font color="#CCCCCC"> some EDP</font><font color="#E5E5E5"> and we're</font><font color="#CCCCCC"> talking</font>

60
00:03:47,630 --> 00:03:53,570
<font color="#CCCCCC">about software</font><font color="#E5E5E5"> and hardware</font><font color="#CCCCCC"> networks</font><font color="#E5E5E5"> so</font>

61
00:03:51,140 --> 00:03:56,029
<font color="#CCCCCC">far however which is</font><font color="#E5E5E5"> getting non</font>

62
00:03:53,570 --> 00:03:59,840
<font color="#E5E5E5">synchronous packages so this is a way to</font>

63
00:03:56,030 --> 00:04:01,640
program<font color="#E5E5E5"> these devices also for the</font>

64
00:03:59,840 --> 00:04:06,500
server side<font color="#E5E5E5"> it's working quite well on</font>

65
00:04:01,640 --> 00:04:10,119
the server side<font color="#CCCCCC"> Java Python</font><font color="#E5E5E5"> this all</font>

66
00:04:06,500 --> 00:04:13,730
<font color="#E5E5E5">sorts of frameworks where you can use</font>

67
00:04:10,120 --> 00:04:15,740
event<font color="#E5E5E5"> loops the main benefit</font><font color="#CCCCCC"> is that</font>

68
00:04:13,730 --> 00:04:19,190
throughput is quite reasonable<font color="#CCCCCC"> with very</font>

69
00:04:15,740 --> 00:04:21,829
little sumption the flow<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> program</font>

70
00:04:19,190 --> 00:04:23,690
is actually<font color="#CCCCCC"> determined by the events or</font>

71
00:04:21,829 --> 00:04:25,550
the messages<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we get in a</font>

72
00:04:23,690 --> 00:04:29,210
conventional program we will have a main

73
00:04:25,550 --> 00:04:32,240
than a function is and that would define

74
00:04:29,210 --> 00:04:34,039
<font color="#CCCCCC">the flow the execution flow with an</font>

75
00:04:32,240 --> 00:04:36,110
event-driven program we define<font color="#CCCCCC"> what</font>

76
00:04:34,040 --> 00:04:38,840
events<font color="#E5E5E5"> we're interested in and</font><font color="#CCCCCC"> what we</font>

77
00:04:36,110 --> 00:04:41,000
do when we get them<font color="#E5E5E5"> so whenever we get</font>

78
00:04:38,840 --> 00:04:42,890
<font color="#E5E5E5">an event from outside it could be</font>

79
00:04:41,000 --> 00:04:45,470
<font color="#E5E5E5">hardware interruptions or</font><font color="#CCCCCC"> net wave</font>

80
00:04:42,890 --> 00:04:48,590
messages that would trigger the function

81
00:04:45,470 --> 00:04:52,130
we're interested in<font color="#CCCCCC"> okay so it</font><font color="#E5E5E5"> is widely</font>

82
00:04:48,590 --> 00:04:57,440
used the idea about<font color="#E5E5E5"> events looks very</font>

83
00:04:52,130 --> 00:04:59,120
simple here we have a FIFO queue<font color="#CCCCCC"> now</font>

84
00:04:57,440 --> 00:05:02,810
<font color="#E5E5E5">this fashion and then we have a very</font>

85
00:04:59,120 --> 00:05:06,470
<font color="#E5E5E5">simple loop we're talking about messages</font>

86
00:05:02,810 --> 00:05:09,290
or events<font color="#E5E5E5"> they get to the ticket here</font>

87
00:05:06,470 --> 00:05:13,060
and the first one<font color="#CCCCCC"> in is processed</font><font color="#E5E5E5"> the</font>

88
00:05:09,290 --> 00:05:15,800
important thing<font color="#CCCCCC"> here is that processing</font>

89
00:05:13,060 --> 00:05:18,320
when printing<font color="#CCCCCC"> a message if you make a</font>

90
00:05:15,800 --> 00:05:22,280
blocking<font color="#CCCCCC"> call like for example accessing</font>

91
00:05:18,320 --> 00:05:24,080
the<font color="#CCCCCC"> hard drive</font><font color="#E5E5E5"> data</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> network it</font>

92
00:05:22,280 --> 00:05:26,390
handles it in a non synchronous way<font color="#E5E5E5"> it</font>

93
00:05:24,080 --> 00:05:30,620
<font color="#E5E5E5">processes</font><font color="#CCCCCC"> the event</font><font color="#E5E5E5"> it delegates the</font>

94
00:05:26,390 --> 00:05:32,240
<font color="#E5E5E5">task to a worker the</font><font color="#CCCCCC"> worker that can be</font>

95
00:05:30,620 --> 00:05:35,840
another computer another<font color="#E5E5E5"> process another</font>

96
00:05:32,240 --> 00:05:37,880
thread and that way it keeps processing

97
00:05:35,840 --> 00:05:40,789
the other events<font color="#E5E5E5"> coming in or whatever</font>

98
00:05:37,880 --> 00:05:43,420
comes from the<font color="#E5E5E5"> other clients that is</font>

99
00:05:40,790 --> 00:05:46,100
what makes throughput quite reasonable

100
00:05:43,420 --> 00:05:47,690
so with that very simple idea we have a

101
00:05:46,100 --> 00:05:50,270
concurrency model which is very<font color="#E5E5E5"> simple</font>

102
00:05:47,690 --> 00:05:53,630
<font color="#E5E5E5">for</font><font color="#CCCCCC"> the developer because they may they</font>

103
00:05:50,270 --> 00:05:56,799
may get away<font color="#CCCCCC"> from</font><font color="#E5E5E5"> other tasks but what</font>

104
00:05:53,630 --> 00:05:59,600
happens when this<font color="#CCCCCC"> event loop is shared</font>

105
00:05:56,800 --> 00:06:02,030
between<font color="#CCCCCC"> different parties between</font>

106
00:05:59,600 --> 00:06:03,680
mutually distrusting programs in<font color="#E5E5E5"> this</font>

107
00:06:02,030 --> 00:06:07,489
case<font color="#E5E5E5"> we have an attack and attack</font><font color="#CCCCCC"> us</font>

108
00:06:03,680 --> 00:06:09,740
sending messages or tasks to this event

109
00:06:07,490 --> 00:06:13,880
loop and<font color="#E5E5E5"> is measuring the time that each</font>

110
00:06:09,740 --> 00:06:16,100
one takes<font color="#E5E5E5"> to be processed</font><font color="#CCCCCC"> so we</font><font color="#E5E5E5"> measure</font>

111
00:06:13,880 --> 00:06:18,380
the time between<font color="#E5E5E5"> two consecutive events</font>

112
00:06:16,100 --> 00:06:22,430
and we see what delay we have if we see

113
00:06:18,380 --> 00:06:26,060
a bigger delay we may infer<font color="#E5E5E5"> that a</font>

114
00:06:22,430 --> 00:06:28,040
victim Wolvie<font color="#E5E5E5"> has sent the message or</font>

115
00:06:26,060 --> 00:06:31,880
that<font color="#E5E5E5"> it is processing a message</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> from</font>

116
00:06:28,040 --> 00:06:34,370
us<font color="#E5E5E5"> from someone else so keep that idea</font>

117
00:06:31,880 --> 00:06:36,560
<font color="#E5E5E5">in your mind because this is what we</font>

118
00:06:34,370 --> 00:06:42,440
will<font color="#CCCCCC"> be using in</font><font color="#E5E5E5"> Chrome</font><font color="#CCCCCC"> to do some cool</font>

119
00:06:36,560 --> 00:06:48,380
things well the Pope<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the name of a</font>

120
00:06:42,440 --> 00:06:50,600
project anyway why<font color="#CCCCCC"> Chrome well I chose</font>

121
00:06:48,380 --> 00:06:53,270
<font color="#CCCCCC">chrome because it is a</font><font color="#E5E5E5"> white the</font><font color="#CCCCCC"> most</font>

122
00:06:50,600 --> 00:06:56,300
widely used browser<font color="#CCCCCC"> a lot of people say</font>

123
00:06:53,270 --> 00:06:59,810
that<font color="#CCCCCC"> it is the</font><font color="#E5E5E5"> safest some argue</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> it</font>

124
00:06:56,300 --> 00:07:02,680
might be Microsoft<font color="#E5E5E5"> edge but it is the</font>

125
00:06:59,810 --> 00:07:05,570
first multi-process browser<font color="#E5E5E5"> anyway other</font>

126
00:07:02,680 --> 00:07:07,100
<font color="#E5E5E5">browsers are catching up</font><font color="#CCCCCC"> I have to say</font>

127
00:07:05,570 --> 00:07:10,400
<font color="#CCCCCC">informs</font>

128
00:07:07,100 --> 00:07:12,560
I'll give you a rundown of the

129
00:07:10,400 --> 00:07:15,440
architectural<font color="#CCCCCC"> firm so you have an idea</font>

130
00:07:12,560 --> 00:07:18,860
<font color="#E5E5E5">about the attacks the same origin</font><font color="#CCCCCC"> policy</font>

131
00:07:15,440 --> 00:07:21,950
I assume<font color="#E5E5E5"> everyone knows</font><font color="#CCCCCC"> about just in</font>

132
00:07:18,860 --> 00:07:23,960
case let<font color="#E5E5E5"> me explain it this</font><font color="#CCCCCC"> is the</font>

133
00:07:21,950 --> 00:07:29,180
<font color="#E5E5E5">security policy implemented by browsers</font>

134
00:07:23,960 --> 00:07:34,099
<font color="#E5E5E5">since the dawn of time in origin with</font>

135
00:07:29,180 --> 00:07:36,410
<font color="#CCCCCC">the scheme's a domain unopposed and it</font>

136
00:07:34,100 --> 00:07:42,610
prevents the<font color="#CCCCCC"> scrip</font><font color="#E5E5E5"> to this executed in</font>

137
00:07:36,410 --> 00:07:42,610
origin a accessing origin<font color="#E5E5E5"> to origin B</font>

138
00:07:44,740 --> 00:07:51,200
and the main<font color="#E5E5E5"> problem</font><font color="#CCCCCC"> with this</font><font color="#E5E5E5"> so this</font>

139
00:07:48,380 --> 00:07:53,360
<font color="#CCCCCC">is a very restrictive policy so</font>

140
00:07:51,200 --> 00:07:56,000
<font color="#E5E5E5">developers wanted to do more complex</font>

141
00:07:53,360 --> 00:07:58,030
<font color="#CCCCCC">things in the internet</font><font color="#E5E5E5"> so they wanted</font>

142
00:07:56,000 --> 00:08:00,980
additional functionalities

143
00:07:58,030 --> 00:08:05,750
specifications<font color="#E5E5E5"> api's the ecosystem gets</font>

144
00:08:00,980 --> 00:08:08,270
bigger and bigger<font color="#E5E5E5"> and that means a much</font>

145
00:08:05,750 --> 00:08:13,940
larger surface<font color="#E5E5E5"> for attacks in turn</font>

146
00:08:08,270 --> 00:08:15,229
leading<font color="#E5E5E5"> to failure</font><font color="#CCCCCC"> mistakes errors</font><font color="#E5E5E5"> we</font>

147
00:08:13,940 --> 00:08:17,330
have overlaps between different

148
00:08:15,230 --> 00:08:20,690
technologies and<font color="#CCCCCC"> we have new</font>

149
00:08:17,330 --> 00:08:23,960
vulnerabilities as you can imagine this

150
00:08:20,690 --> 00:08:25,940
<font color="#E5E5E5">is what you</font><font color="#CCCCCC"> justified</font><font color="#E5E5E5"> moving to a</font>

151
00:08:23,960 --> 00:08:28,609
multi-process architecture<font color="#E5E5E5"> the main</font>

152
00:08:25,940 --> 00:08:31,690
benefit<font color="#E5E5E5"> with chrome is that unlike</font><font color="#CCCCCC"> the</font>

153
00:08:28,610 --> 00:08:34,250
other browsers at last time which had a

154
00:08:31,690 --> 00:08:36,289
<font color="#E5E5E5">monolithic architecture</font><font color="#CCCCCC"> which is one</font>

155
00:08:34,250 --> 00:08:37,909
huge process they said<font color="#CCCCCC"> okay let's start</font>

156
00:08:36,289 --> 00:08:40,429
from<font color="#CCCCCC"> scratch</font><font color="#E5E5E5"> and do it the right</font><font color="#CCCCCC"> way</font>

157
00:08:37,909 --> 00:08:41,809
<font color="#CCCCCC">first</font><font color="#E5E5E5"> time</font><font color="#CCCCCC"> around</font><font color="#E5E5E5"> what are the main</font>

158
00:08:40,429 --> 00:08:45,140
benefits<font color="#CCCCCC"> of a multi-process architecture</font>

159
00:08:41,809 --> 00:08:49,189
<font color="#E5E5E5">like that in chrome well they have a</font>

160
00:08:45,140 --> 00:08:51,140
main process the<font color="#CCCCCC"> hosts process or the</font>

161
00:08:49,190 --> 00:08:53,710
<font color="#E5E5E5">browser process and then they have</font>

162
00:08:51,140 --> 00:08:56,720
smaller processes renderer processes

163
00:08:53,710 --> 00:08:59,180
ideally<font color="#E5E5E5"> each origin or each one</font><font color="#CCCCCC"> of web</font>

164
00:08:56,720 --> 00:09:02,920
applications is executed in an isolated

165
00:08:59,180 --> 00:09:07,878
<font color="#E5E5E5">way in a</font><font color="#CCCCCC"> different process we are</font>

166
00:09:02,920 --> 00:09:11,420
<font color="#E5E5E5">isolating each</font><font color="#CCCCCC"> website that</font><font color="#E5E5E5"> security</font>

167
00:09:07,879 --> 00:09:13,559
because these<font color="#CCCCCC"> processes are sandboxed</font>

168
00:09:11,420 --> 00:09:16,378
renderers would not have<font color="#CCCCCC"> access</font><font color="#E5E5E5"> to</font>

169
00:09:13,559 --> 00:09:18,149
system<font color="#E5E5E5"> api's only the host process would</font>

170
00:09:16,379 --> 00:09:20,399
<font color="#E5E5E5">have access when the render process</font>

171
00:09:18,149 --> 00:09:22,050
wants to<font color="#CCCCCC"> access</font><font color="#E5E5E5"> the network to see what</font>

172
00:09:20,399 --> 00:09:23,819
the<font color="#E5E5E5"> user is doing or to see the follow</font>

173
00:09:22,050 --> 00:09:27,569
system<font color="#CCCCCC"> it has to</font><font color="#E5E5E5"> communicate with the</font>

174
00:09:23,819 --> 00:09:29,399
house process when<font color="#E5E5E5"> people say sandbox in</font>

175
00:09:27,569 --> 00:09:31,019
<font color="#E5E5E5">chrome they usually mean this and then</font>

176
00:09:29,399 --> 00:09:33,209
we have<font color="#E5E5E5"> better fault tolerance if we</font>

177
00:09:31,019 --> 00:09:38,040
have a one single processor for whatever

178
00:09:33,209 --> 00:09:41,040
reason<font color="#E5E5E5"> one tank crashes one time crashes</font>

179
00:09:38,040 --> 00:09:43,379
that's it everything<font color="#E5E5E5"> crashes when we</font>

180
00:09:41,040 --> 00:09:47,839
have a problem<font color="#CCCCCC"> with</font><font color="#E5E5E5"> chrome and a tab has</font>

181
00:09:43,379 --> 00:09:51,179
a problem we<font color="#CCCCCC"> don't lose the other tabs</font>

182
00:09:47,839 --> 00:09:54,299
<font color="#CCCCCC">in</font><font color="#E5E5E5"> Chrome each</font><font color="#CCCCCC"> and every process has a</font>

183
00:09:51,179 --> 00:09:55,920
lot of threads<font color="#E5E5E5"> here I have included only</font>

184
00:09:54,299 --> 00:09:57,989
<font color="#E5E5E5">the main ones which are the ones we</font>

185
00:09:55,920 --> 00:09:59,399
<font color="#E5E5E5">should be interested</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> in the case of</font>

186
00:09:57,989 --> 00:10:01,019
the<font color="#CCCCCC"> browser princess we have the main</font>

187
00:09:59,399 --> 00:10:07,860
thread which<font color="#CCCCCC"> is the point</font><font color="#E5E5E5"> of entry</font><font color="#CCCCCC"> for</font>

188
00:10:01,019 --> 00:10:11,549
<font color="#E5E5E5">all users actions user actions are how</font>

189
00:10:07,860 --> 00:10:13,829
<font color="#CCCCCC">rivet</font><font color="#E5E5E5"> and entry into</font><font color="#CCCCCC"> the browser</font><font color="#E5E5E5"> goes</font>

190
00:10:11,549 --> 00:10:15,629
through this process<font color="#E5E5E5"> and then</font><font color="#CCCCCC"> the</font>

191
00:10:13,829 --> 00:10:19,459
<font color="#CCCCCC">input-output threat of the</font><font color="#E5E5E5"> house process</font>

192
00:10:15,629 --> 00:10:19,459
which is<font color="#E5E5E5"> the one in</font><font color="#CCCCCC"> charge of</font>

193
00:10:22,129 --> 00:10:30,660
communication between processes and<font color="#E5E5E5"> also</font>

194
00:10:27,529 --> 00:10:33,569
of handling access to the network<font color="#E5E5E5"> the</font>

195
00:10:30,660 --> 00:10:36,118
<font color="#CCCCCC">filesystem and so</font><font color="#E5E5E5"> on in the case of</font>

196
00:10:33,569 --> 00:10:38,160
renderers the main thread<font color="#CCCCCC"> Raceway the</font>

197
00:10:36,119 --> 00:10:40,339
<font color="#CCCCCC">most important thing happens</font><font color="#E5E5E5"> javascript</font>

198
00:10:38,160 --> 00:10:44,429
assess executors here rendering pages

199
00:10:40,339 --> 00:10:45,959
style<font color="#E5E5E5"> the</font><font color="#CCCCCC"> input-output thread of</font>

200
00:10:44,429 --> 00:10:48,269
rendering system one<font color="#CCCCCC"> that is used to</font>

201
00:10:45,959 --> 00:10:50,429
<font color="#CCCCCC">communicate with</font><font color="#E5E5E5"> the house process so</font>

202
00:10:48,269 --> 00:10:51,990
all messages<font color="#E5E5E5"> to request a privileged</font>

203
00:10:50,429 --> 00:10:55,019
action will go through the<font color="#E5E5E5"> input of the</font>

204
00:10:51,990 --> 00:10:57,929
thread the<font color="#CCCCCC"> other one will go</font><font color="#E5E5E5"> through</font>

205
00:10:55,019 --> 00:10:59,819
<font color="#E5E5E5">certain compositor thread each one of</font>

206
00:10:57,929 --> 00:11:02,119
these threads implements an event loop

207
00:10:59,819 --> 00:11:04,110
of them like the ones we saw before<font color="#CCCCCC"> so</font>

208
00:11:02,119 --> 00:11:08,939
<font color="#CCCCCC">communication between threads and</font>

209
00:11:04,110 --> 00:11:12,319
processes is<font color="#E5E5E5"> there for message delivery</font>

210
00:11:08,939 --> 00:11:12,319
<font color="#E5E5E5">between event loops</font>

211
00:11:13,270 --> 00:11:21,199
to make you see for yourselves<font color="#E5E5E5"> I'm sure</font>

212
00:11:15,800 --> 00:11:24,020
you know this in<font color="#CCCCCC"> chrome if you go to</font>

213
00:11:21,200 --> 00:11:26,480
preferences<font color="#E5E5E5"> we have a really</font><font color="#CCCCCC"> beautiful</font>

214
00:11:24,020 --> 00:11:28,600
task manager<font color="#E5E5E5"> where we can see</font><font color="#CCCCCC"> all</font>

215
00:11:26,480 --> 00:11:30,530
processes we see that the<font color="#CCCCCC"> host</font><font color="#E5E5E5"> process</font>

216
00:11:28,600 --> 00:11:35,240
can you<font color="#E5E5E5"> see it</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> the back</font>

217
00:11:30,530 --> 00:11:37,970
anyway each tab occupies a different

218
00:11:35,240 --> 00:11:39,980
processing space<font color="#E5E5E5"> plugins are</font><font color="#CCCCCC"> running</font>

219
00:11:37,970 --> 00:11:44,680
isolated processes there's a special

220
00:11:39,980 --> 00:11:44,680
process<font color="#E5E5E5"> to handle access to the GPU</font>

221
00:11:52,019 --> 00:11:57,149
but this is what would<font color="#E5E5E5"> happen in an</font>

222
00:11:54,579 --> 00:11:59,979
ideal world<font color="#CCCCCC"> we can</font><font color="#E5E5E5"> isolate completely</font>

223
00:11:57,149 --> 00:12:02,620
all<font color="#E5E5E5"> origins all applications from the</font>

224
00:11:59,980 --> 00:12:07,079
web<font color="#CCCCCC"> at the end of the day of running</font>

225
00:12:02,620 --> 00:12:10,240
<font color="#E5E5E5">code you cannot trust because JavaScript</font>

226
00:12:07,079 --> 00:12:13,800
it may be interpreted<font color="#E5E5E5"> in the sandbox</font><font color="#CCCCCC"> but</font>

227
00:12:10,240 --> 00:12:17,649
it is executed in your<font color="#E5E5E5"> CPU after all so</font>

228
00:12:13,800 --> 00:12:20,199
in an<font color="#CCCCCC"> ideal world</font><font color="#E5E5E5"> we would isolate them</font>

229
00:12:17,649 --> 00:12:25,410
in individual processes the processes

230
00:12:20,199 --> 00:12:27,609
take up memory in<font color="#E5E5E5"> order to strike a</font>

231
00:12:25,410 --> 00:12:30,009
reasonable balance<font color="#CCCCCC"> between security</font><font color="#E5E5E5"> and</font>

232
00:12:27,610 --> 00:12:31,569
memory<font color="#E5E5E5"> usage which is one of the main</font>

233
00:12:30,009 --> 00:12:34,389
problems<font color="#CCCCCC"> with Google with Google</font><font color="#E5E5E5"> Chrome</font>

234
00:12:31,569 --> 00:12:37,029
<font color="#CCCCCC">you apply different policies to map</font>

235
00:12:34,389 --> 00:12:38,949
these into different<font color="#CCCCCC"> businesses the main</font>

236
00:12:37,029 --> 00:12:43,120
policy<font color="#E5E5E5"> is processed beside instance</font>

237
00:12:38,949 --> 00:12:45,189
which defines a site as the registered

238
00:12:43,120 --> 00:12:47,129
domain which is<font color="#CCCCCC"> the</font><font color="#E5E5E5"> TLD plus the domain</font>

239
00:12:45,189 --> 00:12:54,550
<font color="#CCCCCC">your user you have</font><font color="#E5E5E5"> registered under</font>

240
00:12:47,129 --> 00:12:55,839
<font color="#E5E5E5">protocol so any sub domain even with</font>

241
00:12:54,550 --> 00:13:02,410
different<font color="#E5E5E5"> origins will have the same</font>

242
00:12:55,839 --> 00:13:06,009
site a site in France is<font color="#CCCCCC"> the sites that</font>

243
00:13:02,410 --> 00:13:07,719
<font color="#E5E5E5">are</font><font color="#CCCCCC"> connected and connected means that</font>

244
00:13:06,009 --> 00:13:09,879
our scripts that<font color="#E5E5E5"> is execute being</font>

245
00:13:07,720 --> 00:13:13,199
executed in a certain obligation<font color="#E5E5E5"> as a</font>

246
00:13:09,879 --> 00:13:15,850
reference pointing at another window<font color="#CCCCCC"> ok</font>

247
00:13:13,199 --> 00:13:18,699
however<font color="#CCCCCC"> there</font><font color="#E5E5E5"> are some</font><font color="#CCCCCC"> exceptions to</font>

248
00:13:15,850 --> 00:13:21,370
<font color="#CCCCCC">this and</font><font color="#E5E5E5"> for example when we have an</font>

249
00:13:18,699 --> 00:13:27,219
iframe<font color="#E5E5E5"> when we have an iframe on</font><font color="#CCCCCC"> a page</font>

250
00:13:21,370 --> 00:13:32,470
we<font color="#E5E5E5"> don't care about the origin from</font><font color="#CCCCCC"> EBL</font>

251
00:13:27,220 --> 00:13:33,939
<font color="#CCCCCC">comm we can load a Volcom both will</font>

252
00:13:32,470 --> 00:13:39,069
share the same process<font color="#CCCCCC"> why is this a</font>

253
00:13:33,939 --> 00:13:41,170
<font color="#E5E5E5">case well since we need to have a</font>

254
00:13:39,069 --> 00:13:43,269
reference<font color="#E5E5E5"> implementing these iframe</font>

255
00:13:41,170 --> 00:13:45,998
<font color="#CCCCCC">asunder</font><font color="#E5E5E5"> different</font><font color="#CCCCCC"> classes would imply an</font>

256
00:13:43,269 --> 00:13:48,790
overhead<font color="#CCCCCC"> and</font><font color="#E5E5E5"> complexity to</font><font color="#CCCCCC"> manage the</font>

257
00:13:45,999 --> 00:13:51,569
<font color="#E5E5E5">communication between processes and an</font>

258
00:13:48,790 --> 00:13:51,569
<font color="#E5E5E5">overhead on</font>

259
00:13:51,740 --> 00:14:00,900
communication so<font color="#CCCCCC"> I friends are the</font>

260
00:13:59,250 --> 00:14:03,390
exception<font color="#E5E5E5"> then we have</font><font color="#CCCCCC"> link Thailand</font>

261
00:14:00,900 --> 00:14:05,579
navigation<font color="#E5E5E5"> when you click on</font><font color="#CCCCCC"> a link in</font><font color="#E5E5E5"> a</font>

262
00:14:03,390 --> 00:14:08,730
certain page<font color="#E5E5E5"> under target for that link</font>

263
00:14:05,580 --> 00:14:11,430
opens a new tab instead of refreshing it

264
00:14:08,730 --> 00:14:14,820
within<font color="#E5E5E5"> the tab you were in this new one</font>

265
00:14:11,430 --> 00:14:16,949
<font color="#E5E5E5">has a reference to the opener tab in</font>

266
00:14:14,820 --> 00:14:18,480
that case that's happened regardless<font color="#CCCCCC"> of</font>

267
00:14:16,950 --> 00:14:21,030
the origins will keep sharing<font color="#E5E5E5"> that</font>

268
00:14:18,480 --> 00:14:23,760
process and the last exception is when

269
00:14:21,030 --> 00:14:26,490
we go beyond<font color="#CCCCCC"> the maximum number of</font>

270
00:14:23,760 --> 00:14:28,530
<font color="#E5E5E5">processes</font><font color="#CCCCCC"> for Chrome this is defined the</font>

271
00:14:26,490 --> 00:14:30,420
maximum number is<font color="#E5E5E5"> define based on the</font>

272
00:14:28,530 --> 00:14:33,300
RAM memory that is available<font color="#E5E5E5"> in the</font>

273
00:14:30,420 --> 00:14:36,689
<font color="#CCCCCC">system</font><font color="#E5E5E5"> and that</font><font color="#CCCCCC"> is usually 30</font><font color="#E5E5E5"> devices</font>

274
00:14:33,300 --> 00:14:39,449
for<font color="#CCCCCC"> 4k 4 gigabytes of RAM and up to 70</font>

275
00:14:36,690 --> 00:14:42,780
when we have<font color="#E5E5E5"> 8 gigabytes or more as soon</font>

276
00:14:39,450 --> 00:14:45,030
as we have<font color="#E5E5E5"> that when we</font><font color="#CCCCCC"> open a new</font><font color="#E5E5E5"> tab</font>

277
00:14:42,780 --> 00:14:48,390
<font color="#E5E5E5">an existing</font><font color="#CCCCCC"> process will be reused in</font>

278
00:14:45,030 --> 00:14:52,319
<font color="#CCCCCC">the case</font><font color="#E5E5E5"> of the house process there is</font>

279
00:14:48,390 --> 00:14:54,780
only one house process<font color="#CCCCCC"> for tabs even the</font>

280
00:14:52,320 --> 00:14:57,690
ones<font color="#E5E5E5"> that are opened in</font><font color="#CCCCCC"> without animals</font>

281
00:14:54,780 --> 00:14:59,160
browsing all of them will go through the

282
00:14:57,690 --> 00:15:01,860
input<font color="#CCCCCC"> up</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> thread for</font><font color="#E5E5E5"> the host process</font>

283
00:14:59,160 --> 00:15:04,140
which is unique<font color="#E5E5E5"> by the way for the side</font>

284
00:15:01,860 --> 00:15:07,280
isolation project which is<font color="#E5E5E5"> a project</font>

285
00:15:04,140 --> 00:15:10,380
launched by<font color="#E5E5E5"> the guys over a chromium</font>

286
00:15:07,280 --> 00:15:11,900
<font color="#E5E5E5">they started working on this and I'm</font>

287
00:15:10,380 --> 00:15:14,280
sure<font color="#E5E5E5"> we see results</font><font color="#CCCCCC"> throughout this year</font>

288
00:15:11,900 --> 00:15:18,680
they're basically<font color="#E5E5E5"> trying to solve all of</font>

289
00:15:14,280 --> 00:15:22,579
these problems with exceptions to

290
00:15:18,680 --> 00:15:25,560
reinforce this<font color="#E5E5E5"> isolation between sites</font>

291
00:15:22,580 --> 00:15:28,560
even<font color="#CCCCCC"> the granularity in terms of</font>

292
00:15:25,560 --> 00:15:30,839
isolation<font color="#E5E5E5"> of processes will never be the</font>

293
00:15:28,560 --> 00:15:32,640
<font color="#CCCCCC">same as the one at the logical levels of</font>

294
00:15:30,840 --> 00:15:34,589
the origin<font color="#E5E5E5"> because origin and</font><font color="#CCCCCC"> site are</font>

295
00:15:32,640 --> 00:15:38,120
different concepts<font color="#E5E5E5"> the different</font>

296
00:15:34,589 --> 00:15:41,810
granularities if you like so quickly

297
00:15:38,120 --> 00:15:41,810
what<font color="#E5E5E5"> we will do now</font>

298
00:15:42,230 --> 00:15:49,920
is to spy on those event loops<font color="#E5E5E5"> they do</font>

299
00:15:47,760 --> 00:15:53,430
resource passing<font color="#CCCCCC"> star calculation layout</font>

300
00:15:49,920 --> 00:15:56,370
painting JavaScript execution<font color="#CCCCCC"> and the</font>

301
00:15:53,430 --> 00:15:59,550
most important thing here for<font color="#CCCCCC"> this</font><font color="#E5E5E5"> event</font>

302
00:15:56,370 --> 00:16:01,880
loop is that<font color="#E5E5E5"> every time</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> execute a</font>

303
00:15:59,550 --> 00:16:04,680
<font color="#E5E5E5">JavaScript</font><font color="#CCCCCC"> function is that function</font>

304
00:16:01,880 --> 00:16:06,689
actually is being<font color="#E5E5E5"> executed it blocks out</font>

305
00:16:04,680 --> 00:16:10,800
the<font color="#CCCCCC"> entirety event loop</font><font color="#E5E5E5"> when you go for</font>

306
00:16:06,690 --> 00:16:14,490
while equals<font color="#E5E5E5"> one this is a task that</font>

307
00:16:10,800 --> 00:16:17,160
<font color="#CCCCCC">cause v8</font><font color="#E5E5E5"> it starts</font><font color="#CCCCCC"> executing it and the</font>

308
00:16:14,490 --> 00:16:20,700
event<font color="#E5E5E5"> loop is blocked so you see this</font>

309
00:16:17,160 --> 00:16:22,980
<font color="#E5E5E5">the tab frozen because nothing is</font>

310
00:16:20,700 --> 00:16:25,890
happening<font color="#E5E5E5"> there's no sign acylation</font><font color="#CCCCCC"> no</font>

311
00:16:22,980 --> 00:16:27,720
layout node when<font color="#E5E5E5"> brain nothing so</font>

312
00:16:25,890 --> 00:16:30,000
depending on<font color="#E5E5E5"> the length of the</font>

313
00:16:27,720 --> 00:16:32,460
<font color="#E5E5E5">JavaScript are using it will get</font><font color="#CCCCCC"> logged</font>

314
00:16:30,000 --> 00:16:35,610
for shorter or<font color="#E5E5E5"> a</font><font color="#CCCCCC"> longer period</font><font color="#E5E5E5"> of time</font>

315
00:16:32,460 --> 00:16:38,250
<font color="#E5E5E5">name problem here</font><font color="#CCCCCC"> when when</font><font color="#E5E5E5"> two vendors</font>

316
00:16:35,610 --> 00:16:41,070
<font color="#E5E5E5">are sharing the same process the main</font>

317
00:16:38,250 --> 00:16:44,760
thread is also shared of the same event

318
00:16:41,070 --> 00:16:47,940
loop is shared the in<font color="#E5E5E5"> products</font><font color="#CCCCCC"> are</font>

319
00:16:44,760 --> 00:16:52,200
thread for the hospital<font color="#CCCCCC"> set is</font><font color="#E5E5E5"> another</font>

320
00:16:47,940 --> 00:16:53,880
event loop will be spying on<font color="#E5E5E5"> and I'll</font>

321
00:16:52,200 --> 00:16:56,130
give you a couple of examples<font color="#CCCCCC"> to explain</font>

322
00:16:53,880 --> 00:16:58,500
<font color="#E5E5E5">how it works</font><font color="#CCCCCC"> on the one</font><font color="#E5E5E5"> hand we said</font>

323
00:16:56,130 --> 00:17:01,560
that<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is the entry point for user</font>

324
00:16:58,500 --> 00:17:04,560
actions so in the main thread<font color="#E5E5E5"> for the</font>

325
00:17:01,560 --> 00:17:07,530
<font color="#CCCCCC">house process we get a click from</font><font color="#E5E5E5"> the</font>

326
00:17:04,560 --> 00:17:09,208
<font color="#E5E5E5">user and</font><font color="#CCCCCC"> that click from</font><font color="#E5E5E5"> the user will</font>

327
00:17:07,530 --> 00:17:11,389
go into the input upper thread of the

328
00:17:09,209 --> 00:17:14,280
house process which which will do

329
00:17:11,390 --> 00:17:15,750
multiplexing<font color="#E5E5E5"> and send it</font><font color="#CCCCCC"> to the renderer</font>

330
00:17:14,280 --> 00:17:18,359
which is in the<font color="#E5E5E5"> for in the foreground</font>

331
00:17:15,750 --> 00:17:19,589
<font color="#E5E5E5">only to the tab</font><font color="#CCCCCC"> that is</font><font color="#E5E5E5"> active now the</font>

332
00:17:18,359 --> 00:17:21,089
rest<font color="#E5E5E5"> don't need to know about this</font>

333
00:17:19,589 --> 00:17:23,520
because<font color="#E5E5E5"> this is irrelevant information</font>

334
00:17:21,089 --> 00:17:27,260
for them and then<font color="#E5E5E5"> we have the opposite</font>

335
00:17:23,520 --> 00:17:32,190
example<font color="#E5E5E5"> which is a renderer executing a</font>

336
00:17:27,260 --> 00:17:33,750
request what it does<font color="#E5E5E5"> I can't see</font>

337
00:17:32,190 --> 00:17:36,170
anything without<font color="#E5E5E5"> my</font><font color="#CCCCCC"> glasses but thank</font>

338
00:17:33,750 --> 00:17:36,170
you<font color="#E5E5E5"> Roman</font>

339
00:17:45,120 --> 00:17:52,149
if I<font color="#E5E5E5"> don't see it it is</font><font color="#CCCCCC"> not illegal from</font>

340
00:17:50,260 --> 00:17:54,340
the main thread<font color="#E5E5E5"> we want to do a network</font>

341
00:17:52,150 --> 00:17:56,470
request<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> so we go to the input up a</font>

342
00:17:54,340 --> 00:17:58,240
thread for the<font color="#CCCCCC"> red thread</font><font color="#E5E5E5"> this renderer</font>

343
00:17:56,470 --> 00:18:00,730
will send a request<font color="#CCCCCC"> to the input/output</font>

344
00:17:58,240 --> 00:18:02,710
thread from<font color="#E5E5E5"> the</font><font color="#CCCCCC"> host process and this in</font>

345
00:18:00,730 --> 00:18:04,929
turn<font color="#E5E5E5"> since he wants to do something with</font>

346
00:18:02,710 --> 00:18:08,140
<font color="#CCCCCC">that blocks</font><font color="#E5E5E5"> everything else will</font>

347
00:18:04,929 --> 00:18:10,240
delegate the task<font color="#E5E5E5"> into a worker which is</font>

348
00:18:08,140 --> 00:18:12,520
a pool of sockets or threads that the

349
00:18:10,240 --> 00:18:14,830
process has to<font color="#CCCCCC"> do network requests as</font>

350
00:18:12,520 --> 00:18:16,870
soon as it is<font color="#CCCCCC"> done</font><font color="#E5E5E5"> it will say that</font><font color="#CCCCCC"> it</font>

351
00:18:14,830 --> 00:18:18,580
<font color="#E5E5E5">has</font><font color="#CCCCCC"> completed everything</font><font color="#E5E5E5"> in the event</font>

352
00:18:16,870 --> 00:18:20,799
<font color="#E5E5E5">loop in the</font><font color="#CCCCCC"> productive thread for the</font>

353
00:18:18,580 --> 00:18:22,389
health<font color="#E5E5E5"> process and will send the</font><font color="#CCCCCC"> signal</font>

354
00:18:20,799 --> 00:18:25,418
to<font color="#CCCCCC"> the renderer</font><font color="#E5E5E5"> telling it</font><font color="#CCCCCC"> that it has</font>

355
00:18:22,390 --> 00:18:27,490
completed<font color="#CCCCCC"> the</font><font color="#E5E5E5"> task that means that there</font>

356
00:18:25,419 --> 00:18:29,620
will<font color="#E5E5E5"> be a message in the main thread for</font>

357
00:18:27,490 --> 00:18:37,630
the<font color="#E5E5E5"> render process which will trigger</font>

358
00:18:29,620 --> 00:18:39,459
the<font color="#E5E5E5"> call back to</font><font color="#CCCCCC"> that request I'll focus</font>

359
00:18:37,630 --> 00:18:44,020
on those ones for the idea<font color="#E5E5E5"> that these</font>

360
00:18:39,460 --> 00:18:46,450
events<font color="#CCCCCC"> are widely used the QE for the</font>

361
00:18:44,020 --> 00:18:51,580
GPU process is another event<font color="#E5E5E5"> loop</font>

362
00:18:46,450 --> 00:18:53,650
<font color="#E5E5E5">workers shared and service workers work</font>

363
00:18:51,580 --> 00:18:59,590
through a<font color="#E5E5E5"> leave a loop API sand</font>

364
00:18:53,650 --> 00:19:01,360
extensions<font color="#CCCCCC"> well the same</font><font color="#E5E5E5"> thing and to</font>

365
00:18:59,590 --> 00:19:03,610
show you that<font color="#CCCCCC"> this is all</font><font color="#E5E5E5"> through I</font>

366
00:19:01,360 --> 00:19:07,540
<font color="#E5E5E5">think I have enough time I'll show you</font>

367
00:19:03,610 --> 00:19:10,090
something<font color="#E5E5E5"> I'll show you a tool which is</font>

368
00:19:07,540 --> 00:19:11,549
in chrome body fault<font color="#E5E5E5"> you probably know</font>

369
00:19:10,090 --> 00:19:17,520
about<font color="#E5E5E5"> it</font>

370
00:19:11,549 --> 00:19:17,520
I'll<font color="#CCCCCC"> zoom</font><font color="#E5E5E5"> in this is the profiler</font>

371
00:19:21,919 --> 00:19:27,990
so<font color="#CCCCCC"> I have a</font><font color="#E5E5E5"> very simple</font><font color="#CCCCCC"> page</font><font color="#E5E5E5"> I've just</font>

372
00:19:26,280 --> 00:19:30,899
defined<font color="#CCCCCC"> a listener for</font><font color="#E5E5E5"> whenever I</font>

373
00:19:27,990 --> 00:19:33,419
<font color="#E5E5E5">someone does click then alert this show</font>

374
00:19:30,900 --> 00:19:36,419
the alert<font color="#E5E5E5"> blocks the execution of</font>

375
00:19:33,419 --> 00:19:40,230
JavaScript<font color="#E5E5E5"> a big signal in the event</font>

376
00:19:36,419 --> 00:19:43,860
<font color="#E5E5E5">loop which is what we want</font><font color="#CCCCCC"> to watch</font><font color="#E5E5E5"> so</font>

377
00:19:40,230 --> 00:19:47,690
we<font color="#E5E5E5"> click here there's many options</font><font color="#CCCCCC"> so</font>

378
00:19:43,860 --> 00:19:54,178
<font color="#CCCCCC">that we can do tracing in different ways</font>

379
00:19:47,690 --> 00:19:55,230
we click we move the mouse enough right

380
00:19:54,179 --> 00:19:58,400
<font color="#E5E5E5">this is it</font>

381
00:19:55,230 --> 00:20:00,510
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is what is</font><font color="#E5E5E5"> same rated by the trace</font>

382
00:19:58,400 --> 00:20:04,740
<font color="#E5E5E5">here we have all the processes in</font><font color="#CCCCCC"> the</font>

383
00:20:00,510 --> 00:20:07,049
<font color="#E5E5E5">browser this is</font><font color="#CCCCCC"> a host process and here</font>

384
00:20:04,740 --> 00:20:09,870
we have<font color="#CCCCCC"> all the</font><font color="#E5E5E5"> threads and</font><font color="#CCCCCC"> the house</font>

385
00:20:07,049 --> 00:20:12,270
process<font color="#E5E5E5"> we have a male thread we have</font>

386
00:20:09,870 --> 00:20:14,129
the<font color="#CCCCCC"> input up the threads</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> the ranch</font>

387
00:20:12,270 --> 00:20:15,570
here we have the renderer which<font color="#E5E5E5"> is</font>

388
00:20:14,130 --> 00:20:16,980
basically the page that we<font color="#CCCCCC"> have executed</font>

389
00:20:15,570 --> 00:20:19,860
their here and we have different<font color="#E5E5E5"> threads</font>

390
00:20:16,980 --> 00:20:22,710
the main thread<font color="#CCCCCC"> included</font><font color="#E5E5E5"> to show you the</font>

391
00:20:19,860 --> 00:20:24,780
<font color="#CCCCCC">visit</font><font color="#E5E5E5"> room but first if it feels weird</font>

392
00:20:22,710 --> 00:20:31,190
but it moves this way so it's quite

393
00:20:24,780 --> 00:20:34,580
funny yeah

394
00:20:31,190 --> 00:20:37,640
we see a set<font color="#CCCCCC"> of</font><font color="#E5E5E5"> locks these are</font>

395
00:20:34,580 --> 00:20:39,350
<font color="#E5E5E5">executions this is a frame graph or we</font>

396
00:20:37,640 --> 00:20:42,170
<font color="#E5E5E5">seal the internal calls produced by the</font>

397
00:20:39,350 --> 00:20:44,300
event<font color="#E5E5E5"> if you click on them you</font><font color="#CCCCCC"> will see</font>

398
00:20:42,170 --> 00:20:46,670
<font color="#CCCCCC">a link</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> the code where</font><font color="#E5E5E5"> that function</font>

399
00:20:44,300 --> 00:20:49,220
<font color="#CCCCCC">can</font><font color="#E5E5E5"> be found</font><font color="#CCCCCC"> and you see that in the</font>

400
00:20:46,670 --> 00:20:52,460
main<font color="#E5E5E5"> thread</font><font color="#CCCCCC"> we are getting the signal</font>

401
00:20:49,220 --> 00:20:54,320
this is Malik's placements this is sent

402
00:20:52,460 --> 00:20:55,940
to the input<font color="#CCCCCC"> upper thread and then put</font>

403
00:20:54,320 --> 00:21:00,950
up a thread<font color="#E5E5E5"> sunset through the</font><font color="#CCCCCC"> renderer</font>

404
00:20:55,940 --> 00:21:05,450
<font color="#E5E5E5">you see this here</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is what the mass</font>

405
00:21:00,950 --> 00:21:10,970
displacement<font color="#E5E5E5"> cursor does without any</font>

406
00:21:05,450 --> 00:21:13,100
JavaScript we have functions that<font color="#CCCCCC"> are</font>

407
00:21:10,970 --> 00:21:20,330
executed<font color="#E5E5E5"> on</font><font color="#CCCCCC"> blocks our event loop for</font>

408
00:21:13,100 --> 00:21:23,209
approximately<font color="#CCCCCC"> half of a millisecond -</font>

409
00:21:20,330 --> 00:21:26,389
<font color="#CCCCCC">Giulia cursor displacements</font><font color="#E5E5E5"> because the</font>

410
00:21:23,210 --> 00:21:29,590
the periodicity is<font color="#E5E5E5"> 8 milliseconds</font><font color="#CCCCCC"> and</font>

411
00:21:26,390 --> 00:21:32,210
here we<font color="#E5E5E5"> see that</font><font color="#CCCCCC"> I click got</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> got in</font>

412
00:21:29,590 --> 00:21:35,990
it gets to the input up<font color="#CCCCCC"> as fresh for</font><font color="#E5E5E5"> the</font>

413
00:21:32,210 --> 00:21:41,960
redress<font color="#E5E5E5"> and then the callback is</font>

414
00:21:35,990 --> 00:21:44,570
<font color="#CCCCCC">executed the alert we have executed we</font>

415
00:21:41,960 --> 00:21:46,730
see the<font color="#E5E5E5"> flame graph here we see the</font>

416
00:21:44,570 --> 00:21:48,919
event handler for<font color="#E5E5E5"> JavaScript</font><font color="#CCCCCC"> we're</font>

417
00:21:46,730 --> 00:21:50,870
invoking v8 which is the<font color="#E5E5E5"> JavaScript</font>

418
00:21:48,920 --> 00:21:52,220
engine for<font color="#E5E5E5"> Chrome we execute a</font><font color="#CCCCCC"> function</font>

419
00:21:50,870 --> 00:21:56,840
the function

420
00:21:52,220 --> 00:21:59,330
<font color="#CCCCCC">- 1.5 seconds this</font><font color="#E5E5E5"> is to give you an</font>

421
00:21:56,840 --> 00:22:01,310
<font color="#CCCCCC">idea this is a</font><font color="#E5E5E5"> simplification of</font>

422
00:21:59,330 --> 00:22:03,830
everything but this<font color="#E5E5E5"> is what is</font><font color="#CCCCCC"> actually</font>

423
00:22:01,310 --> 00:22:07,419
happening in the transept<font color="#CCCCCC"> an alert on</font>

424
00:22:03,830 --> 00:22:07,419
<font color="#E5E5E5">the function blocking the event loop</font>

425
00:22:07,950 --> 00:22:10,010
you

426
00:22:10,770 --> 00:22:14,629
sorry<font color="#CCCCCC"> now is a spoiler</font>

427
00:22:18,580 --> 00:22:25,030
I was a bit of a theory<font color="#CCCCCC"> then I'd move on</font>

428
00:22:23,080 --> 00:22:27,280
to certain<font color="#E5E5E5"> practical scenarios where</font><font color="#CCCCCC"> it</font>

429
00:22:25,030 --> 00:22:29,800
would<font color="#E5E5E5"> be interesting to do things or</font>

430
00:22:27,280 --> 00:22:32,410
where<font color="#E5E5E5"> people predefined</font><font color="#CCCCCC"> close</font><font color="#E5E5E5"> event</font>

431
00:22:29,800 --> 00:22:39,610
loops<font color="#CCCCCC"> I think the most likely</font><font color="#E5E5E5"> scenario</font>

432
00:22:32,410 --> 00:22:41,860
would be malicious<font color="#CCCCCC"> adverse</font><font color="#E5E5E5"> events many</font>

433
00:22:39,610 --> 00:22:45,939
occasions residents are loaded into

434
00:22:41,860 --> 00:22:48,729
iframes because the SOP protects us from

435
00:22:45,940 --> 00:22:51,100
malicious advertisements it will not be

436
00:22:48,730 --> 00:22:52,690
<font color="#CCCCCC">able to steal the</font><font color="#E5E5E5"> content on the page</font>

437
00:22:51,100 --> 00:22:56,620
but because this is an iframe and we're

438
00:22:52,690 --> 00:22:58,390
sharing<font color="#CCCCCC"> data to the code that is</font>

439
00:22:56,620 --> 00:23:00,879
<font color="#E5E5E5">executed by</font><font color="#CCCCCC"> this advertisement</font><font color="#E5E5E5"> can</font>

440
00:22:58,390 --> 00:23:03,430
monitor<font color="#CCCCCC"> whatever is</font><font color="#E5E5E5"> happening as we will</font>

441
00:23:00,880 --> 00:23:05,550
see this can disclose information<font color="#E5E5E5"> about</font>

442
00:23:03,430 --> 00:23:08,830
what the user is doing<font color="#E5E5E5"> another</font><font color="#CCCCCC"> thing a</font>

443
00:23:05,550 --> 00:23:10,840
complex channel as well<font color="#CCCCCC"> key numbers</font><font color="#E5E5E5"> I</font>

444
00:23:08,830 --> 00:23:14,949
will not<font color="#CCCCCC"> go into the details at amount</font>

445
00:23:10,840 --> 00:23:18,879
of time the main question is how<font color="#E5E5E5"> can we</font>

446
00:23:14,950 --> 00:23:22,510
post our tasks from<font color="#E5E5E5"> a website using</font>

447
00:23:18,880 --> 00:23:23,980
<font color="#E5E5E5">javascript tasks into</font><font color="#CCCCCC"> the loops</font><font color="#E5E5E5"> in the</font>

448
00:23:22,510 --> 00:23:27,070
render<font color="#CCCCCC"> is main thread that's why we</font>

449
00:23:23,980 --> 00:23:30,550
execute<font color="#E5E5E5"> JavaScript in JavaScript when</font>

450
00:23:27,070 --> 00:23:32,409
you<font color="#E5E5E5"> execute a function you</font><font color="#CCCCCC"> see that a</font>

451
00:23:30,550 --> 00:23:34,960
task is created<font color="#CCCCCC"> a block</font><font color="#E5E5E5"> sees answers</font>

452
00:23:32,410 --> 00:23:37,630
<font color="#E5E5E5">what it is being processed</font><font color="#CCCCCC"> when the</font>

453
00:23:34,960 --> 00:23:40,360
<font color="#E5E5E5">function calls another function</font><font color="#CCCCCC"> that</font>

454
00:23:37,630 --> 00:23:43,180
<font color="#E5E5E5">happens in a synchronized</font><font color="#CCCCCC"> way not it</font><font color="#E5E5E5"> no</font>

455
00:23:40,360 --> 00:23:44,709
new task is created<font color="#E5E5E5"> it is added</font><font color="#CCCCCC"> to the</font>

456
00:23:43,180 --> 00:23:47,230
course<font color="#E5E5E5"> panicked if we call</font><font color="#CCCCCC"> as our</font>

457
00:23:44,710 --> 00:23:49,930
functions or there is a loop<font color="#E5E5E5"> we will</font>

458
00:23:47,230 --> 00:23:52,420
<font color="#E5E5E5">have a single task which gets huge and</font>

459
00:23:49,930 --> 00:23:56,310
whether it<font color="#E5E5E5"> is we don't want that we want</font>

460
00:23:52,420 --> 00:23:59,860
to have a large number<font color="#E5E5E5"> of separate tasks</font>

461
00:23:56,310 --> 00:24:02,470
so<font color="#CCCCCC"> that those we</font><font color="#E5E5E5"> want to spy on get in</font>

462
00:23:59,860 --> 00:24:04,780
between<font color="#E5E5E5"> so it's non synchronous</font><font color="#CCCCCC"> calls</font>

463
00:24:02,470 --> 00:24:07,780
that's a solution<font color="#CCCCCC"> not what</font><font color="#E5E5E5"> most</font>

464
00:24:04,780 --> 00:24:09,340
developers use is<font color="#CCCCCC"> timeout the idea is</font><font color="#E5E5E5"> to</font>

465
00:24:07,780 --> 00:24:11,139
have an<font color="#E5E5E5"> operation that is taking a long</font>

466
00:24:09,340 --> 00:24:12,159
<font color="#E5E5E5">time</font><font color="#CCCCCC"> lucky</font><font color="#E5E5E5"> the event loop for more than</font>

467
00:24:11,140 --> 00:24:14,980
16 milliseconds

468
00:24:12,160 --> 00:24:17,110
well you split up<font color="#E5E5E5"> into</font><font color="#CCCCCC"> small</font><font color="#E5E5E5"> portions</font>

469
00:24:14,980 --> 00:24:20,410
<font color="#E5E5E5">you</font><font color="#CCCCCC"> do work timeout</font>

470
00:24:17,110 --> 00:24:22,719
I'm in between<font color="#E5E5E5"> you can re render the</font>

471
00:24:20,410 --> 00:24:25,090
page and the user<font color="#E5E5E5"> doesn't have any</font>

472
00:24:22,720 --> 00:24:27,250
feeding that this is getting frozen the

473
00:24:25,090 --> 00:24:28,929
program with<font color="#E5E5E5"> timeout is that even</font><font color="#CCCCCC"> fresh</font>

474
00:24:27,250 --> 00:24:32,290
<font color="#CCCCCC">Ellucian</font><font color="#E5E5E5"> even if you use 0.1</font>

475
00:24:28,930 --> 00:24:35,800
milliseconds you've got<font color="#E5E5E5"> problems</font>

476
00:24:32,290 --> 00:24:38,050
so resolutions are not enough<font color="#E5E5E5"> and then</font>

477
00:24:35,800 --> 00:24:40,690
with non active<font color="#CCCCCC"> taps signmark goes all</font>

478
00:24:38,050 --> 00:24:42,460
the way up to<font color="#E5E5E5"> one second so no way the</font>

479
00:24:40,690 --> 00:24:45,100
solution<font color="#CCCCCC"> is to use the</font><font color="#E5E5E5"> API from</font>

480
00:24:42,460 --> 00:24:49,990
<font color="#CCCCCC">postmessage</font><font color="#E5E5E5"> which allows us to post</font>

481
00:24:45,100 --> 00:24:52,719
messages<font color="#E5E5E5"> in our</font><font color="#CCCCCC"> eventual recursively</font>

482
00:24:49,990 --> 00:24:56,080
<font color="#CCCCCC">I'll show you the code hosting</font><font color="#E5E5E5"> a large</font>

483
00:24:52,720 --> 00:24:59,020
<font color="#CCCCCC">number of tasks to</font><font color="#E5E5E5"> measure time now the</font>

484
00:24:56,080 --> 00:25:01,629
new<font color="#CCCCCC"> when it is closed there are many</font>

485
00:24:59,020 --> 00:25:03,940
more with<font color="#E5E5E5"> ecbs</font><font color="#CCCCCC"> mmm have other options</font>

486
00:25:01,630 --> 00:25:08,800
<font color="#E5E5E5">with a put up a thread we have two</font>

487
00:25:03,940 --> 00:25:11,020
<font color="#E5E5E5">techniques one we force a network</font>

488
00:25:08,800 --> 00:25:13,750
<font color="#CCCCCC">request which will go to be put out put</font>

489
00:25:11,020 --> 00:25:17,590
thread when it goes back<font color="#CCCCCC"> Michaels</font><font color="#E5E5E5"> back</font>

490
00:25:13,750 --> 00:25:19,690
we measure the time these<font color="#CCCCCC"> fine lines</font><font color="#E5E5E5"> of</font>

491
00:25:17,590 --> 00:25:22,360
JavaScript<font color="#E5E5E5"> are all that</font><font color="#CCCCCC"> is needed to</font>

492
00:25:19,690 --> 00:25:27,910
<font color="#CCCCCC">monitor the event loop it is incredibly</font>

493
00:25:22,360 --> 00:25:31,060
<font color="#CCCCCC">simple we define a loop function self is</font>

494
00:25:27,910 --> 00:25:32,890
a reference<font color="#CCCCCC"> to our window</font><font color="#E5E5E5"> so we send any</font>

495
00:25:31,060 --> 00:25:36,190
message<font color="#E5E5E5"> with not interested in the</font>

496
00:25:32,890 --> 00:25:39,010
content we save the timestamp<font color="#E5E5E5"> performer</font>

497
00:25:36,190 --> 00:25:41,560
now<font color="#E5E5E5"> there's an API that</font><font color="#CCCCCC"> gives you an</font>

498
00:25:39,010 --> 00:25:43,270
accuracy of<font color="#CCCCCC"> microseconds in the</font>

499
00:25:41,560 --> 00:25:45,340
<font color="#CCCCCC">timestamp</font><font color="#E5E5E5"> and then will you</font><font color="#CCCCCC"> find the</font>

500
00:25:43,270 --> 00:25:47,920
<font color="#E5E5E5">event handler</font><font color="#CCCCCC"> for all messages</font><font color="#E5E5E5"> and send</font>

501
00:25:45,340 --> 00:25:53,620
the first message once we do that<font color="#E5E5E5"> what</font>

502
00:25:47,920 --> 00:25:56,290
we have is a very<font color="#E5E5E5"> short function which</font>

503
00:25:53,620 --> 00:25:58,360
stores a timestamp<font color="#E5E5E5"> which is executed in</font>

504
00:25:56,290 --> 00:26:00,460
a non synchronous way many<font color="#E5E5E5"> times these</font>

505
00:25:58,360 --> 00:26:02,199
<font color="#CCCCCC">are tasks in the event</font><font color="#E5E5E5"> loop what</font><font color="#CCCCCC"> we will</font>

506
00:26:00,460 --> 00:26:05,590
<font color="#E5E5E5">have at the</font><font color="#CCCCCC"> end</font><font color="#E5E5E5"> is a vector of</font>

507
00:26:02,200 --> 00:26:08,440
<font color="#E5E5E5">timestamps we subtract them is</font><font color="#CCCCCC"> their</font>

508
00:26:05,590 --> 00:26:10,600
<font color="#CCCCCC">consecutive to</font><font color="#E5E5E5"> now we have the</font><font color="#CCCCCC"> timestamp</font>

509
00:26:08,440 --> 00:26:14,260
<font color="#CCCCCC">between two events</font><font color="#E5E5E5"> the trick is</font><font color="#CCCCCC"> stead of</font>

510
00:26:10,600 --> 00:26:16,449
<font color="#CCCCCC">using a normal array because of the way</font>

511
00:26:14,260 --> 00:26:18,250
this<font color="#E5E5E5"> is implemented in Chrome that will</font>

512
00:26:16,450 --> 00:26:20,710
<font color="#E5E5E5">generate a lot</font><font color="#CCCCCC"> of garbage</font><font color="#E5E5E5"> collection we</font>

513
00:26:18,250 --> 00:26:23,080
will<font color="#CCCCCC"> use our last type array and it</font>

514
00:26:20,710 --> 00:26:25,330
would make<font color="#E5E5E5"> it quicker in the case of</font>

515
00:26:23,080 --> 00:26:26,889
spying on shared event<font color="#E5E5E5"> loops in the</font>

516
00:26:25,330 --> 00:26:29,290
input<font color="#E5E5E5"> upper thread for the Hospice's</font>

517
00:26:26,890 --> 00:26:32,140
<font color="#E5E5E5">this is an example the idea is the same</font>

518
00:26:29,290 --> 00:26:34,510
as<font color="#CCCCCC"> a form</font><font color="#E5E5E5"> we store this timestamp</font>

519
00:26:32,140 --> 00:26:38,830
what we do is send<font color="#E5E5E5"> a network</font><font color="#CCCCCC"> request</font>

520
00:26:34,510 --> 00:26:40,030
<font color="#E5E5E5">with an on route runcible IP when you</font>

521
00:26:38,830 --> 00:26:43,480
get to the<font color="#E5E5E5"> input up a thread</font>

522
00:26:40,030 --> 00:26:46,300
it says no this<font color="#E5E5E5"> is mirror</font><font color="#CCCCCC"> it gives us an</font>

523
00:26:43,480 --> 00:26:47,950
error<font color="#CCCCCC"> message</font><font color="#E5E5E5"> we measure and we cache</font>

524
00:26:46,300 --> 00:26:50,740
the error so<font color="#CCCCCC"> that it invokes the</font>

525
00:26:47,950 --> 00:26:52,090
function<font color="#CCCCCC"> again a bit more noise a bit</font>

526
00:26:50,740 --> 00:26:54,070
more latency because we are

527
00:26:52,090 --> 00:26:55,750
communicating<font color="#E5E5E5"> between processes and the</font>

528
00:26:54,070 --> 00:26:58,270
input up our thread is sending it to a

529
00:26:55,750 --> 00:27:01,480
worker<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> a bit slower but it gives us</font>

530
00:26:58,270 --> 00:27:03,870
<font color="#CCCCCC">a</font><font color="#E5E5E5"> resolution of some 500 microseconds we</font>

531
00:27:01,480 --> 00:27:07,030
can do it better<font color="#E5E5E5"> with the shared workers</font>

532
00:27:03,870 --> 00:27:10,959
this<font color="#E5E5E5"> is like a spread of JavaScript but</font>

533
00:27:07,030 --> 00:27:13,330
<font color="#CCCCCC">it's executed detached from act</font><font color="#E5E5E5"> of the</font>

534
00:27:10,960 --> 00:27:15,280
rendering<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> idea is that all</font>

535
00:27:13,330 --> 00:27:16,510
communication with<font color="#E5E5E5"> the shared work is</font>

536
00:27:15,280 --> 00:27:18,610
what goes<font color="#CCCCCC"> through the input of the</font>

537
00:27:16,510 --> 00:27:20,560
thread in that<font color="#E5E5E5"> case we would</font><font color="#CCCCCC"> have the</font>

538
00:27:18,610 --> 00:27:22,780
spying website that hosts process and

539
00:27:20,560 --> 00:27:24,820
the shared worker<font color="#E5E5E5"> what we do is define a</font>

540
00:27:22,780 --> 00:27:28,149
shared worker which is simply responding

541
00:27:24,820 --> 00:27:30,310
<font color="#CCCCCC">to all</font><font color="#E5E5E5"> messages getting to</font><font color="#CCCCCC"> it the spying</font>

542
00:27:28,150 --> 00:27:31,390
website as a function which<font color="#E5E5E5"> is</font>

543
00:27:30,310 --> 00:27:33,550
equivalent<font color="#CCCCCC"> to the</font><font color="#E5E5E5"> one we saw the</font>

544
00:27:31,390 --> 00:27:36,250
beginning<font color="#E5E5E5"> it stores the</font><font color="#CCCCCC"> timestamp it</font>

545
00:27:33,550 --> 00:27:37,389
sends a<font color="#CCCCCC"> message the message is returned</font>

546
00:27:36,250 --> 00:27:39,520
<font color="#E5E5E5">because that's what the shared worker</font>

547
00:27:37,390 --> 00:27:41,200
does and we do it<font color="#E5E5E5"> again</font><font color="#CCCCCC"> okay so</font><font color="#E5E5E5"> we save</font>

548
00:27:39,520 --> 00:27:44,590
it on<font color="#E5E5E5"> the time stamp</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> time stamp</font>

549
00:27:41,200 --> 00:27:46,000
we're saving now it's a<font color="#CCCCCC"> runtime trip</font>

550
00:27:44,590 --> 00:27:48,159
through the<font color="#CCCCCC"> input up a thread for the</font>

551
00:27:46,000 --> 00:27:50,530
<font color="#E5E5E5">house process until the shared work is</font>

552
00:27:48,160 --> 00:27:52,660
reached<font color="#CCCCCC"> a little bit more noise</font><font color="#E5E5E5"> but it</font>

553
00:27:50,530 --> 00:27:55,180
gives<font color="#E5E5E5"> us</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> my precision accuracy of 100</font>

554
00:27:52,660 --> 00:28:00,130
microseconds<font color="#E5E5E5"> if the input up of thread</font>

555
00:27:55,180 --> 00:28:02,260
is congested<font color="#E5E5E5"> we will see delays in the</font>

556
00:28:00,130 --> 00:28:04,030
trace that<font color="#E5E5E5"> we generate this could</font>

557
00:28:02,260 --> 00:28:05,740
improve<font color="#CCCCCC"> if</font><font color="#E5E5E5"> instead of savings time</font>

558
00:28:04,030 --> 00:28:07,270
<font color="#CCCCCC">stamps on</font><font color="#E5E5E5"> one side we save them on both</font>

559
00:28:05,740 --> 00:28:11,890
<font color="#E5E5E5">sides</font><font color="#CCCCCC"> on the</font><font color="#E5E5E5"> shared work</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> the spying</font>

560
00:28:07,270 --> 00:28:18,920
website and then

561
00:28:11,890 --> 00:28:20,750
we match them this is the idea with that

562
00:28:18,920 --> 00:28:22,820
<font color="#E5E5E5">very simple</font><font color="#CCCCCC"> telescope</font><font color="#E5E5E5"> that can</font><font color="#CCCCCC"> be</font>

563
00:28:20,750 --> 00:28:25,190
executed<font color="#E5E5E5"> in</font><font color="#CCCCCC"> their website we would</font>

564
00:28:22,820 --> 00:28:27,500
generate an event delay traces in one

565
00:28:25,190 --> 00:28:30,080
second we<font color="#E5E5E5"> will have some 45,000 time</font>

566
00:28:27,500 --> 00:28:32,300
measurements main problems we have lots

567
00:28:30,080 --> 00:28:36,139
of noise because<font color="#CCCCCC"> javascript is very</font>

568
00:28:32,300 --> 00:28:41,680
noisy<font color="#E5E5E5"> it does just in time consolation</font>

569
00:28:36,140 --> 00:28:44,150
<font color="#E5E5E5">it does garbage collection</font><font color="#CCCCCC"> injective</font>

570
00:28:41,680 --> 00:28:46,490
functions are<font color="#E5E5E5"> optimized after certain</font>

571
00:28:44,150 --> 00:28:48,650
time this has been<font color="#E5E5E5"> executed certain time</font>

572
00:28:46,490 --> 00:28:50,840
<font color="#E5E5E5">a number of times so we assume that next</font>

573
00:28:48,650 --> 00:28:52,250
time<font color="#CCCCCC"> it will be this way if you take</font><font color="#E5E5E5"> a</font>

574
00:28:50,840 --> 00:28:54,709
little bit<font color="#E5E5E5"> of traces you will see the</font>

575
00:28:52,250 --> 00:28:57,020
effect of JIT compilation<font color="#E5E5E5"> at first the</font>

576
00:28:54,710 --> 00:28:58,820
<font color="#E5E5E5">function is</font><font color="#CCCCCC"> very low</font><font color="#E5E5E5"> but in a very very</font>

577
00:28:57,020 --> 00:29:01,990
little<font color="#E5E5E5"> time</font><font color="#CCCCCC"> you gets optimized on</font><font color="#E5E5E5"> it's</font>

578
00:28:58,820 --> 00:29:05,149
much quicker<font color="#E5E5E5"> the garbage collection</font><font color="#CCCCCC"> past</font>

579
00:29:01,990 --> 00:29:07,160
it is non-deterministic<font color="#CCCCCC"> and the problem</font>

580
00:29:05,150 --> 00:29:08,810
is<font color="#E5E5E5"> that this</font><font color="#CCCCCC"> is executed in between</font><font color="#E5E5E5"> so</font>

581
00:29:07,160 --> 00:29:14,920
the other<font color="#E5E5E5"> JavaScript and that can</font>

582
00:29:08,810 --> 00:29:18,710
increase delays<font color="#CCCCCC"> spread</font><font color="#E5E5E5"> into leading a</font>

583
00:29:14,920 --> 00:29:26,900
finite number<font color="#CCCCCC"> of course introducing</font>

584
00:29:18,710 --> 00:29:29,300
noise during<font color="#CCCCCC"> the time they use CPU and</font>

585
00:29:26,900 --> 00:29:32,770
now I'll show<font color="#CCCCCC"> you</font><font color="#E5E5E5"> the three</font><font color="#CCCCCC"> rules</font><font color="#E5E5E5"> of</font>

586
00:29:29,300 --> 00:29:36,700
concept that<font color="#CCCCCC"> I put together</font><font color="#E5E5E5"> very simple</font>

587
00:29:32,770 --> 00:29:40,540
the first<font color="#E5E5E5"> one is basically</font><font color="#CCCCCC"> webpage</font>

588
00:29:36,700 --> 00:29:44,840
identification through these traces<font color="#CCCCCC"> I</font>

589
00:29:40,540 --> 00:29:47,030
measured the event loop as a website

590
00:29:44,840 --> 00:29:48,709
opens in a new tab<font color="#E5E5E5"> and then based on</font><font color="#CCCCCC"> the</font>

591
00:29:47,030 --> 00:29:50,600
trace I try to determine what website

592
00:29:48,710 --> 00:29:54,640
that was and at<font color="#CCCCCC"> least rug timing</font>

593
00:29:50,600 --> 00:30:00,050
information<font color="#E5E5E5"> thank you very much</font>

594
00:29:54,640 --> 00:30:03,230
<font color="#CCCCCC">so in the case of travel</font><font color="#E5E5E5"> information so</font>

595
00:30:00,050 --> 00:30:07,970
that<font color="#E5E5E5"> we are here is to detect keystrokes</font>

596
00:30:03,230 --> 00:30:12,170
<font color="#E5E5E5">and because we kind of</font><font color="#CCCCCC"> affect the key</font>

597
00:30:07,970 --> 00:30:15,110
<font color="#E5E5E5">that has being stopped so we just detect</font>

598
00:30:12,170 --> 00:30:19,670
the time the time when the key was

599
00:30:15,110 --> 00:30:21,740
<font color="#E5E5E5">stroke therefore we know what happens</font>

600
00:30:19,670 --> 00:30:24,970
and therefore<font color="#E5E5E5"> this</font><font color="#CCCCCC"> reduces the</font><font color="#E5E5E5"> entropy</font>

601
00:30:21,740 --> 00:30:24,970
of the<font color="#CCCCCC"> buzzwords</font>

602
00:30:25,480 --> 00:30:31,370
so we can<font color="#CCCCCC"> producers as a password</font>

603
00:30:28,100 --> 00:30:34,519
interrupted entropy and<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Wesker</font>

604
00:30:31,370 --> 00:30:42,199
<font color="#E5E5E5">scenario do</font><font color="#CCCCCC"> get to see the length of the</font>

605
00:30:34,519 --> 00:30:45,799
password so<font color="#CCCCCC"> DC's the view of this trace</font>

606
00:30:42,200 --> 00:30:48,320
of even relays<font color="#E5E5E5"> so they have been</font>

607
00:30:45,799 --> 00:30:51,379
<font color="#E5E5E5">recorded for five seconds</font><font color="#CCCCCC"> so we can see</font>

608
00:30:48,320 --> 00:30:59,480
that<font color="#E5E5E5"> they are quite different they have</font>

609
00:30:51,379 --> 00:31:01,639
<font color="#E5E5E5">a difference when I came here I hadn't</font>

610
00:30:59,480 --> 00:31:04,009
done any machine learning before have

611
00:31:01,639 --> 00:31:07,158
induced and in machine learning<font color="#E5E5E5"> and</font><font color="#CCCCCC"> I</font>

612
00:31:04,009 --> 00:31:08,870
tell you what I did<font color="#E5E5E5"> basically two things</font>

613
00:31:07,159 --> 00:31:12,289
<font color="#E5E5E5">came to mind</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> me to approach this</font>

614
00:31:08,870 --> 00:31:14,570
topic<font color="#E5E5E5"> first of all was reducing what is</font>

615
00:31:12,289 --> 00:31:19,809
most classic which is<font color="#E5E5E5"> just feature</font>

616
00:31:14,570 --> 00:31:24,230
instruction and one is also do you see

617
00:31:19,809 --> 00:31:26,389
support the<font color="#E5E5E5"> new machine and dynamic time</font>

618
00:31:24,230 --> 00:31:29,600
<font color="#E5E5E5">rubbing they are they are the first one</font>

619
00:31:26,389 --> 00:31:31,820
is<font color="#CCCCCC"> that you have</font><font color="#E5E5E5"> any trace of encoded</font>

620
00:31:29,600 --> 00:31:34,668
traffic or time event delayed and here

621
00:31:31,820 --> 00:31:37,490
you try to generate<font color="#CCCCCC"> a</font><font color="#E5E5E5"> vector for each</font>

622
00:31:34,669 --> 00:31:40,009
feature where you<font color="#CCCCCC"> go and say we have</font>

623
00:31:37,490 --> 00:31:44,570
sent out this amount<font color="#E5E5E5"> of packages in one</font>

624
00:31:40,009 --> 00:31:46,370
direction or<font color="#E5E5E5"> also the time that it's</font>

625
00:31:44,570 --> 00:31:49,070
like<font color="#CCCCCC"> for these packages</font><font color="#E5E5E5"> to come and go</font>

626
00:31:46,370 --> 00:31:51,439
<font color="#CCCCCC">so we need to have an expert we need an</font>

627
00:31:49,070 --> 00:31:57,408
expert to analyze all these<font color="#CCCCCC"> traces</font>

628
00:31:51,440 --> 00:32:00,259
manually and to then become features<font color="#E5E5E5"> and</font>

629
00:31:57,409 --> 00:32:01,970
then support vector machine but I'm not

630
00:32:00,259 --> 00:32:07,279
going<font color="#E5E5E5"> to go into that but for you to</font>

631
00:32:01,970 --> 00:32:11,149
<font color="#CCCCCC">have a feel if we have</font><font color="#E5E5E5"> vector with two</font>

632
00:32:07,279 --> 00:32:14,450
features<font color="#CCCCCC"> that is translated into a plane</font>

633
00:32:11,149 --> 00:32:17,149
we<font color="#E5E5E5"> train it with many of data that we</font>

634
00:32:14,450 --> 00:32:19,519
have<font color="#CCCCCC"> and then support vector</font><font color="#E5E5E5"> machine we</font>

635
00:32:17,149 --> 00:32:21,799
try to<font color="#E5E5E5"> generate a model that would tell</font>

636
00:32:19,519 --> 00:32:24,019
<font color="#E5E5E5">us about the line that separates</font><font color="#CCCCCC"> two</font>

637
00:32:21,799 --> 00:32:26,418
clusters clusters of the different

638
00:32:24,019 --> 00:32:28,759
<font color="#CCCCCC">elements</font><font color="#E5E5E5"> and then the</font><font color="#CCCCCC"> other one the</font>

639
00:32:26,419 --> 00:32:31,639
other<font color="#CCCCCC"> approach is</font><font color="#E5E5E5"> dynamic time wrapping</font>

640
00:32:28,759 --> 00:32:33,320
this is the one that<font color="#E5E5E5"> I chose the main</font>

641
00:32:31,639 --> 00:32:35,658
advantage of this one is<font color="#E5E5E5"> that we</font><font color="#CCCCCC"> don't</font>

642
00:32:33,320 --> 00:32:36,340
need<font color="#E5E5E5"> very many samples to deliver the</font>

643
00:32:35,659 --> 00:32:38,860
model

644
00:32:36,340 --> 00:32:42,070
to<font color="#E5E5E5"> train the models so we</font><font color="#CCCCCC"> have some</font>

645
00:32:38,860 --> 00:32:45,399
<font color="#E5E5E5">serious as well here this allows</font><font color="#CCCCCC"> us to</font>

646
00:32:42,070 --> 00:32:47,590
see the<font color="#CCCCCC"> vectors of our</font><font color="#E5E5E5"> traces we see</font>

647
00:32:45,400 --> 00:32:52,179
them in<font color="#E5E5E5"> the form of</font><font color="#CCCCCC"> span cereal so these</font>

648
00:32:47,590 --> 00:32:56,309
are measures<font color="#E5E5E5"> over delays and instead of</font>

649
00:32:52,179 --> 00:32:59,919
calculating<font color="#CCCCCC"> the distance helping us</font>

650
00:32:56,309 --> 00:33:07,779
measuring the difference between<font color="#CCCCCC"> foods</font>

651
00:32:59,919 --> 00:33:09,490
<font color="#E5E5E5">I'm serious what we do we want to</font>

652
00:33:07,779 --> 00:33:11,679
measure the<font color="#CCCCCC"> difference between</font><font color="#E5E5E5"> the two</font>

653
00:33:09,490 --> 00:33:13,360
<font color="#E5E5E5">time series in the case</font><font color="#CCCCCC"> to premium</font>

654
00:33:11,679 --> 00:33:15,730
distance we will take the<font color="#CCCCCC"> first element</font>

655
00:33:13,360 --> 00:33:20,439
<font color="#E5E5E5">that is to say cereal elements of</font><font color="#CCCCCC"> series</font>

656
00:33:15,730 --> 00:33:23,049
<font color="#CCCCCC">amb we just subtracted with some all the</font>

657
00:33:20,440 --> 00:33:24,789
differences we move the<font color="#E5E5E5"> square roots and</font>

658
00:33:23,049 --> 00:33:27,220
<font color="#E5E5E5">the index at the same time and</font><font color="#CCCCCC"> that</font>

659
00:33:24,789 --> 00:33:29,110
<font color="#CCCCCC">gives us</font><font color="#E5E5E5"> a distance we the differences</font>

660
00:33:27,220 --> 00:33:31,330
<font color="#CCCCCC">is multi separate it is similar and if</font>

661
00:33:29,110 --> 00:33:33,760
the distance is<font color="#CCCCCC"> lovely it's not as</font>

662
00:33:31,330 --> 00:33:37,510
similar however<font color="#CCCCCC"> you have a trade were</font>

663
00:33:33,760 --> 00:33:42,789
uneventful but it occurs varies the

664
00:33:37,510 --> 00:33:48,158
moment the trace if kind of most we<font color="#E5E5E5"> are</font>

665
00:33:42,789 --> 00:33:50,860
<font color="#E5E5E5">comparing apples with them oranges this</font>

666
00:33:48,159 --> 00:33:53,320
<font color="#E5E5E5">is what times up does it finds the</font>

667
00:33:50,860 --> 00:33:56,408
optimal alignment between two<font color="#CCCCCC"> traces and</font>

668
00:33:53,320 --> 00:33:58,779
then the it measures is<font color="#E5E5E5"> calculate the</font>

669
00:33:56,409 --> 00:34:00,970
<font color="#E5E5E5">distance the problem</font><font color="#CCCCCC"> well computational</font>

670
00:33:58,779 --> 00:34:03,399
speaking this is<font color="#E5E5E5"> a bit costly with</font>

671
00:34:00,970 --> 00:34:08,730
dynamic<font color="#CCCCCC"> programming you</font><font color="#E5E5E5"> can do that in</font>

672
00:34:03,399 --> 00:34:13,629
quadratic time and to make it<font color="#E5E5E5"> more</font>

673
00:34:08,730 --> 00:34:16,510
<font color="#E5E5E5">efficient you may establish a lower</font>

674
00:34:13,629 --> 00:34:19,480
<font color="#CCCCCC">bound</font><font color="#E5E5E5"> to make it faster</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> to find an</font>

675
00:34:16,510 --> 00:34:22,179
optimal<font color="#E5E5E5"> solution</font><font color="#CCCCCC"> so the solution exactly</font>

676
00:34:19,480 --> 00:34:24,639
<font color="#CCCCCC">here here we see the trace of event</font>

677
00:34:22,179 --> 00:34:27,280
<font color="#CCCCCC">delays we may generated by Google</font><font color="#E5E5E5"> calm</font>

678
00:34:24,639 --> 00:34:29,020
<font color="#E5E5E5">therefore I am monitoring that then in</font>

679
00:34:27,280 --> 00:34:31,629
<font color="#E5E5E5">this is uploaded in a different Google</font>

680
00:34:29,020 --> 00:34:33,219
<font color="#E5E5E5">come up</font><font color="#CCCCCC"> and then I generate the trace</font>

681
00:34:31,629 --> 00:34:36,098
and<font color="#CCCCCC"> also the</font><font color="#E5E5E5"> youtube.com/</font>

682
00:34:33,219 --> 00:34:37,839
<font color="#E5E5E5">the matrix in the middle is drawing the</font>

683
00:34:36,099 --> 00:34:40,780
<font color="#CCCCCC">working path and this is the alignment</font>

684
00:34:37,839 --> 00:34:44,349
<font color="#E5E5E5">between the two traces if what impasse</font>

685
00:34:40,780 --> 00:34:46,869
<font color="#E5E5E5">moves diagonal means that we are</font>

686
00:34:44,349 --> 00:34:49,240
aligning<font color="#E5E5E5"> many Google points with one</font>

687
00:34:46,869 --> 00:34:52,510
with a<font color="#E5E5E5"> single</font><font color="#CCCCCC"> points of YouTube</font>

688
00:34:49,239 --> 00:34:54,520
<font color="#E5E5E5">DCC intuition our</font><font color="#CCCCCC"> fear</font><font color="#E5E5E5"> and if it moves</font>

689
00:34:52,510 --> 00:34:56,950
but<font color="#CCCCCC"> practically</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is the other way</font>

690
00:34:54,520 --> 00:34:59,110
<font color="#E5E5E5">around</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> several</font><font color="#CCCCCC"> duty</font><font color="#E5E5E5"> bonds are being</font>

691
00:34:56,949 --> 00:35:01,240
aligned with<font color="#CCCCCC"> a single</font><font color="#E5E5E5"> point in</font><font color="#CCCCCC"> Google</font><font color="#E5E5E5"> so</font>

692
00:34:59,110 --> 00:35:03,250
in the end<font color="#E5E5E5"> I run a number of experiments</font>

693
00:35:01,240 --> 00:35:06,490
<font color="#CCCCCC">to see whether this works or not</font>

694
00:35:03,250 --> 00:35:13,900
I took 100 sites<font color="#CCCCCC"> i extracted several</font>

695
00:35:06,490 --> 00:35:16,839
traces so<font color="#E5E5E5"> I just couple of different</font>

696
00:35:13,900 --> 00:35:17,980
machines<font color="#E5E5E5"> with different OSS</font><font color="#CCCCCC"> now what I</font>

697
00:35:16,840 --> 00:35:21,210
did was<font color="#E5E5E5"> the following</font>

698
00:35:17,980 --> 00:35:23,530
<font color="#E5E5E5">I'd use one single trace of</font><font color="#CCCCCC"> each page as</font>

699
00:35:21,210 --> 00:35:27,220
reference this<font color="#E5E5E5"> is machine learning with</font>

700
00:35:23,530 --> 00:35:29,980
a single<font color="#E5E5E5"> sample I just need and I'm just</font>

701
00:35:27,220 --> 00:35:32,200
using a trace of each<font color="#E5E5E5"> space and if you</font>

702
00:35:29,980 --> 00:35:36,580
give<font color="#E5E5E5"> me tragic that I've never seen</font>

703
00:35:32,200 --> 00:35:38,410
<font color="#E5E5E5">before</font><font color="#CCCCCC"> I compute the dynamic time</font>

704
00:35:36,580 --> 00:35:41,259
distance with each of the<font color="#E5E5E5"> points and I</font>

705
00:35:38,410 --> 00:35:44,410
just<font color="#CCCCCC"> then take the closest the nearest</font>

706
00:35:41,260 --> 00:35:46,960
<font color="#E5E5E5">point and these are some of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> results</font>

707
00:35:44,410 --> 00:35:53,618
<font color="#CCCCCC">these are basically the</font><font color="#E5E5E5"> parameters is</font>

708
00:35:46,960 --> 00:35:55,510
<font color="#CCCCCC">ranges in advance that with the paper so</font>

709
00:35:53,619 --> 00:35:58,030
with the best parameters we've reduced

710
00:35:55,510 --> 00:36:03,270
only one<font color="#CCCCCC"> secondly the monitor for</font><font color="#E5E5E5"> only</font>

711
00:35:58,030 --> 00:36:06,400
<font color="#E5E5E5">one second we get up to 62 percent</font>

712
00:36:03,270 --> 00:36:08,770
success<font color="#CCCCCC"> rates</font><font color="#E5E5E5"> if we use two seconds and</font>

713
00:36:06,400 --> 00:36:11,710
that goes up<font color="#CCCCCC"> to 75 time in between two</font>

714
00:36:08,770 --> 00:36:13,660
<font color="#CCCCCC">and four seconds its rate is more like</font>

715
00:36:11,710 --> 00:36:17,350
the same this makes sense because most

716
00:36:13,660 --> 00:36:19,450
<font color="#E5E5E5">of the sites after two seconds they just</font>

717
00:36:17,350 --> 00:36:22,150
do whatever<font color="#CCCCCC"> they I expected to do I'm</font>

718
00:36:19,450 --> 00:36:25,000
<font color="#CCCCCC">not</font><font color="#E5E5E5"> going to go</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> cross-validation</font>

719
00:36:22,150 --> 00:36:29,800
these are the results of<font color="#E5E5E5"> the experiments</font>

720
00:36:25,000 --> 00:36:31,390
<font color="#CCCCCC">that</font><font color="#E5E5E5"> I won and now in Turkish rock</font>

721
00:36:29,800 --> 00:36:36,369
<font color="#E5E5E5">climbing information that the other</font>

722
00:36:31,390 --> 00:36:39,850
<font color="#E5E5E5">proof of concept that</font><font color="#CCCCCC"> I did we've seen</font>

723
00:36:36,369 --> 00:36:40,800
that the mouse displacement is crawling

724
00:36:39,850 --> 00:36:43,868
creeps

725
00:36:40,800 --> 00:36:47,109
<font color="#CCCCCC">auto-related</font><font color="#E5E5E5"> into a JavaScript blocking</font>

726
00:36:43,869 --> 00:36:48,850
<font color="#E5E5E5">that event loop and usually the patterns</font>

727
00:36:47,109 --> 00:36:51,310
that<font color="#E5E5E5"> are generated because of the</font>

728
00:36:48,850 --> 00:36:55,540
different periodicity or<font color="#E5E5E5"> shape or length</font>

729
00:36:51,310 --> 00:36:56,420
<font color="#E5E5E5">allow us to identify</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> harmony with a</font>

730
00:36:55,540 --> 00:37:00,038
vermin

731
00:36:56,420 --> 00:37:00,039
<font color="#CCCCCC">ten minutes</font><font color="#E5E5E5"> ago</font>

732
00:37:07,530 --> 00:37:14,430
basically this is<font color="#CCCCCC"> the</font><font color="#E5E5E5"> aperture</font><font color="#CCCCCC"> of a tool</font>

733
00:37:10,040 --> 00:37:17,610
<font color="#E5E5E5">I'll show you later on it is an HTML</font>

734
00:37:14,430 --> 00:37:22,020
page<font color="#E5E5E5"> drawing graphs and basically this</font>

735
00:37:17,610 --> 00:37:24,420
square box is the zoom of the trace<font color="#CCCCCC"> that</font>

736
00:37:22,020 --> 00:37:28,040
we<font color="#E5E5E5"> generated and we can see whether each</font>

737
00:37:24,420 --> 00:37:31,950
of<font color="#E5E5E5"> these Peaks much is the movement</font>

738
00:37:28,040 --> 00:37:33,660
<font color="#CCCCCC">these</font><font color="#E5E5E5"> placement of the profiler</font><font color="#CCCCCC"> when we</font>

739
00:37:31,950 --> 00:37:35,910
do some Google<font color="#CCCCCC"> profilers</font><font color="#E5E5E5"> understand</font>

740
00:37:33,660 --> 00:37:38,520
things that's<font color="#CCCCCC"> very nice however you</font><font color="#E5E5E5"> can</font>

741
00:37:35,910 --> 00:37:41,310
<font color="#E5E5E5">adjust that later</font><font color="#CCCCCC"> on to see</font><font color="#E5E5E5"> how long</font><font color="#CCCCCC"> it</font>

742
00:37:38,520 --> 00:37:43,980
<font color="#CCCCCC">takes for</font><font color="#E5E5E5"> an event in real world because</font>

743
00:37:41,310 --> 00:37:46,650
<font color="#CCCCCC">the profiler is introducing</font><font color="#E5E5E5"> lots of the</font>

744
00:37:43,980 --> 00:37:50,190
code<font color="#E5E5E5"> that is executed in the middle so</font>

745
00:37:46,650 --> 00:37:54,660
<font color="#E5E5E5">therefore in the</font><font color="#CCCCCC"> performanc says</font>

746
00:37:50,190 --> 00:37:57,990
seriously impacted so<font color="#CCCCCC"> we said this</font><font color="#E5E5E5"> is</font>

747
00:37:54,660 --> 00:38:01,560
more or<font color="#CCCCCC"> less one point milliseconds</font>

748
00:37:57,990 --> 00:38:03,419
delay<font color="#CCCCCC"> separation is</font><font color="#E5E5E5"> AIDS so we see all</font>

749
00:38:01,560 --> 00:38:05,340
these<font color="#CCCCCC"> Peaks in blue so if you see this</font>

750
00:38:03,420 --> 00:38:09,030
trace you come and<font color="#E5E5E5"> say well the user is</font>

751
00:38:05,340 --> 00:38:11,040
displacing<font color="#CCCCCC"> this mouse mouse and then</font>

752
00:38:09,030 --> 00:38:15,870
well the same goes<font color="#CCCCCC"> for clicks</font><font color="#E5E5E5"> if you</font>

753
00:38:11,040 --> 00:38:18,240
want to focus on clicks so this is what

754
00:38:15,870 --> 00:38:21,359
you will<font color="#CCCCCC"> see if there are no event leads</font>

755
00:38:18,240 --> 00:38:27,299
list<font color="#CCCCCC"> they're defined in JavaScript to</font>

756
00:38:21,360 --> 00:38:31,650
<font color="#CCCCCC">listen any events but if page defined</font>

757
00:38:27,300 --> 00:38:35,240
<font color="#E5E5E5">several events well the pattern of each</font>

758
00:38:31,650 --> 00:38:35,240
<font color="#E5E5E5">event will look differently</font>

759
00:38:38,180 --> 00:38:46,440
therefore I did the following<font color="#CCCCCC"> I looked</font>

760
00:38:41,249 --> 00:38:49,680
at the aspect the look of the<font color="#E5E5E5"> battery of</font>

761
00:38:46,440 --> 00:38:53,160
a keystroke<font color="#E5E5E5"> in Google so we</font><font color="#CCCCCC"> hear two</font>

762
00:38:49,680 --> 00:39:01,950
consecutive events<font color="#CCCCCC"> the case down</font><font color="#E5E5E5"> and the</font>

763
00:38:53,160 --> 00:39:04,220
key press so we'll go<font color="#CCCCCC"> back to element</font>

764
00:39:01,950 --> 00:39:04,220
inspector

765
00:39:14,760 --> 00:39:24,030
so when the user strikes<font color="#CCCCCC"> key</font><font color="#E5E5E5"> a Java</font>

766
00:39:19,770 --> 00:39:28,530
Script function will be executed every

767
00:39:24,030 --> 00:39:34,470
<font color="#CCCCCC">time to strike the key JavaScript</font>

768
00:39:28,530 --> 00:39:38,369
<font color="#E5E5E5">blocking the event loop and this is what</font>

769
00:39:34,470 --> 00:39:40,319
we are seeing<font color="#E5E5E5"> here so what was my</font>

770
00:39:38,369 --> 00:39:48,200
experiment about<font color="#E5E5E5"> I took several</font>

771
00:39:40,320 --> 00:39:52,380
passwords and then I set up element

772
00:39:48,200 --> 00:39:56,549
emulating the big<font color="#E5E5E5"> thing it it</font><font color="#CCCCCC"> scripted</font>

773
00:39:52,380 --> 00:39:58,650
<font color="#E5E5E5">pop-up of Google logout which is a</font>

774
00:39:56,550 --> 00:40:02,010
<font color="#CCCCCC">typical event</font><font color="#E5E5E5"> because of about has a</font>

775
00:39:58,650 --> 00:40:05,640
<font color="#E5E5E5">reference</font><font color="#CCCCCC"> unshared event</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> site</font><font color="#E5E5E5"> the</font>

776
00:40:02,010 --> 00:40:08,780
<font color="#E5E5E5">webpage can spy on yes and</font><font color="#CCCCCC"> I introduced</font>

777
00:40:05,640 --> 00:40:10,828
a keystroke with a delay between keys of

778
00:40:08,780 --> 00:40:16,980
between hundred and three hundred

779
00:40:10,829 --> 00:40:21,150
milliseconds<font color="#E5E5E5"> and on the one hand I got</font>

780
00:40:16,980 --> 00:40:23,280
the information<font color="#E5E5E5"> of selenium that transom</font>

781
00:40:21,150 --> 00:40:27,480
sells me<font color="#E5E5E5"> and then I also get the</font>

782
00:40:23,280 --> 00:40:29,730
<font color="#CCCCCC">timestamp that I identify with my super</font>

783
00:40:27,480 --> 00:40:33,050
elaborated technique of machine learning

784
00:40:29,730 --> 00:40:35,849
<font color="#CCCCCC">to recognize buttons of keystrokes</font><font color="#E5E5E5"> and</font>

785
00:40:33,050 --> 00:40:42,630
then this is the technique that<font color="#CCCCCC"> I use</font>

786
00:40:35,849 --> 00:40:46,500
<font color="#CCCCCC">I'd use this piece of</font><font color="#E5E5E5"> JavaScript and</font><font color="#CCCCCC"> if</font>

787
00:40:42,630 --> 00:40:48,630
I go through<font color="#E5E5E5"> the trace that</font><font color="#CCCCCC"> inducer</font>

788
00:40:46,500 --> 00:40:50,430
creates a<font color="#E5E5E5"> free</font><font color="#CCCCCC"> rights and by looking</font>

789
00:40:48,630 --> 00:40:53,000
<font color="#E5E5E5">through consecutive events between that</font>

790
00:40:50,430 --> 00:40:57,480
<font color="#E5E5E5">range between 100 and 300 milliseconds I</font>

791
00:40:53,000 --> 00:41:00,890
get a success rate<font color="#E5E5E5"> of 91%</font>

792
00:40:57,480 --> 00:41:04,710
<font color="#E5E5E5">so therefore in 90% of the cases I</font>

793
00:41:00,890 --> 00:41:07,470
detect the<font color="#E5E5E5"> length of the password as</font>

794
00:41:04,710 --> 00:41:12,000
well<font color="#CCCCCC"> as a millisecond where each of the</font>

795
00:41:07,470 --> 00:41:14,480
keys have been<font color="#E5E5E5"> pressed</font><font color="#CCCCCC"> I know that I'm</font>

796
00:41:12,000 --> 00:41:14,480
going fast

797
00:41:18,250 --> 00:41:25,530
and now I'd<font color="#CCCCCC"> like to show you coverage</font>

798
00:41:21,400 --> 00:41:25,530
channel<font color="#E5E5E5"> that I implement a few days ago</font>

799
00:41:39,710 --> 00:41:45,170
basically we have two different

800
00:41:41,360 --> 00:41:49,880
<font color="#E5E5E5">processes one of them is sending silly</font>

801
00:41:45,170 --> 00:41:51,380
<font color="#E5E5E5">and request to monitor the event loop</font>

802
00:41:49,880 --> 00:41:54,650
and the other one is<font color="#E5E5E5"> sending out lots of</font>

803
00:41:51,380 --> 00:41:58,730
noise<font color="#CCCCCC"> if now</font><font color="#E5E5E5"> it is above specific</font>

804
00:41:54,650 --> 00:42:01,810
threshold<font color="#E5E5E5"> we get either one and if it is</font>

805
00:41:58,730 --> 00:42:07,100
below<font color="#CCCCCC"> the</font><font color="#E5E5E5"> set</font><font color="#CCCCCC"> of threshold we get</font>

806
00:42:01,810 --> 00:42:11,240
receive a civil this is a proof of

807
00:42:07,100 --> 00:42:14,420
concept<font color="#CCCCCC"> very simple to</font><font color="#E5E5E5"> implement you</font>

808
00:42:11,240 --> 00:42:17,660
could<font color="#CCCCCC"> implement it more carefully</font><font color="#E5E5E5"> and if</font>

809
00:42:14,420 --> 00:42:19,190
so we do personally that comes to mind

810
00:42:17,660 --> 00:42:21,830
<font color="#CCCCCC">for instance imagine that you have a</font><font color="#E5E5E5"> job</font>

811
00:42:19,190 --> 00:42:23,840
doing<font color="#CCCCCC"> weird things</font><font color="#E5E5E5"> in a weird domain if</font>

812
00:42:21,830 --> 00:42:25,940
you<font color="#CCCCCC"> filter it</font><font color="#E5E5E5"> and if someone is looking</font>

813
00:42:23,840 --> 00:42:28,310
at that in the<font color="#CCCCCC"> dev</font><font color="#E5E5E5"> tools you can see</font>

814
00:42:25,940 --> 00:42:30,920
that that<font color="#E5E5E5"> is making</font><font color="#CCCCCC"> connections outside</font>

815
00:42:28,310 --> 00:42:33,740
<font color="#E5E5E5">if you wait</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> the user</font><font color="#CCCCCC"> to open less</font>

816
00:42:30,920 --> 00:42:36,830
<font color="#CCCCCC">clear</font><font color="#E5E5E5"> service do</font><font color="#CCCCCC"> juice bar</font><font color="#E5E5E5"> coverage</font>

817
00:42:33,740 --> 00:42:39,589
<font color="#CCCCCC">channel and then from</font><font color="#E5E5E5"> domain that looks</font>

818
00:42:36,830 --> 00:42:41,360
harmless<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can use</font><font color="#E5E5E5"> it to send</font>

819
00:42:39,590 --> 00:42:43,790
<font color="#E5E5E5">something else so if you like our</font>

820
00:42:41,360 --> 00:42:45,760
<font color="#CCCCCC">channel well I will upload this one</font>

821
00:42:43,790 --> 00:42:50,540
<font color="#CCCCCC">together</font><font color="#E5E5E5"> with others and</font><font color="#CCCCCC"> they github</font>

822
00:42:45,760 --> 00:42:54,860
<font color="#E5E5E5">these are good funny and I'm nearly</font>

823
00:42:50,540 --> 00:42:56,750
<font color="#E5E5E5">finished now</font><font color="#CCCCCC"> look scan this is what I</font>

824
00:42:54,860 --> 00:42:58,520
did take a<font color="#E5E5E5"> look at the graphs</font>

825
00:42:56,750 --> 00:43:02,050
<font color="#E5E5E5">well first of all to draw the graphs and</font>

826
00:42:58,520 --> 00:43:05,090
understand the traces you want to see

827
00:43:02,050 --> 00:43:07,550
<font color="#CCCCCC">inside to do things there</font><font color="#E5E5E5"> and to see how</font>

828
00:43:05,090 --> 00:43:09,470
all that<font color="#CCCCCC"> is</font><font color="#E5E5E5"> translated you say</font><font color="#CCCCCC"> okay in</font>

829
00:43:07,550 --> 00:43:11,300
this<font color="#CCCCCC"> page of doing this and it generates</font>

830
00:43:09,470 --> 00:43:15,910
a super trace that I can easily<font color="#E5E5E5"> identify</font>

831
00:43:11,300 --> 00:43:15,910
<font color="#E5E5E5">and this will actually do so</font>

832
00:43:24,390 --> 00:43:29,118
<font color="#E5E5E5">okay so I started</font>

833
00:43:31,530 --> 00:43:37,170
this is the trace has been<font color="#CCCCCC"> generators</font>

834
00:43:34,050 --> 00:43:39,870
<font color="#E5E5E5">after in</font><font color="#CCCCCC"> defying on the input up of</font>

835
00:43:37,170 --> 00:43:42,360
<font color="#CCCCCC">Fletch of the host process</font><font color="#E5E5E5"> and as I told</font>

836
00:43:39,870 --> 00:43:45,480
<font color="#E5E5E5">you before about</font><font color="#CCCCCC"> utilization</font><font color="#E5E5E5"> before is</font>

837
00:43:42,360 --> 00:43:48,510
shown there become<font color="#CCCCCC"> displays</font><font color="#E5E5E5"> of ourselves</font>

838
00:43:45,480 --> 00:43:51,810
<font color="#CCCCCC">here</font><font color="#E5E5E5"> there so means amount so this is</font>

839
00:43:48,510 --> 00:43:54,180
the<font color="#CCCCCC"> advanced displacement as</font><font color="#E5E5E5"> money to</font>

840
00:43:51,810 --> 00:43:59,460
that as I<font color="#CCCCCC"> was doing nothing</font><font color="#E5E5E5"> but if we</font>

841
00:43:54,180 --> 00:44:03,810
repeat the closet now I open<font color="#CCCCCC"> it up so</font>

842
00:43:59,460 --> 00:44:07,380
this<font color="#E5E5E5"> is very slow</font><font color="#CCCCCC"> and we see more</font>

843
00:44:03,810 --> 00:44:09,570
activity more<font color="#E5E5E5"> things taking place here</font>

844
00:44:07,380 --> 00:44:12,000
not very many things<font color="#CCCCCC"> but</font><font color="#E5E5E5"> this is for you</font>

845
00:44:09,570 --> 00:44:14,520
to have a feel<font color="#CCCCCC"> about it</font><font color="#E5E5E5"> and the case of</font>

846
00:44:12,000 --> 00:44:21,690
rendering<font color="#E5E5E5"> this is even clearer</font><font color="#CCCCCC"> because</font>

847
00:44:14,520 --> 00:44:24,060
<font color="#CCCCCC">there is less noise so then here one</font>

848
00:44:21,690 --> 00:44:26,700
thing<font color="#E5E5E5"> is that I have to clean this up</font>

849
00:44:24,060 --> 00:44:28,920
I will<font color="#CCCCCC"> publish it</font><font color="#E5E5E5"> very soon so this is</font>

850
00:44:26,700 --> 00:44:33,689
<font color="#E5E5E5">very simple you've seen the JavaScript</font>

851
00:44:28,920 --> 00:44:36,540
code<font color="#E5E5E5"> and I</font><font color="#CCCCCC"> juice it for quick viewing I</font>

852
00:44:33,690 --> 00:44:39,360
just didn't want<font color="#E5E5E5"> to be nice I just</font>

853
00:44:36,540 --> 00:44:42,180
<font color="#E5E5E5">wanted</font><font color="#CCCCCC"> you to have the identify</font><font color="#E5E5E5"> buttons</font>

854
00:44:39,360 --> 00:44:44,280
well and if you want<font color="#CCCCCC"> to create a logo</font>

855
00:44:42,180 --> 00:44:48,210
<font color="#E5E5E5">feel free to do</font><font color="#CCCCCC"> it and</font><font color="#E5E5E5"> then</font>

856
00:44:44,280 --> 00:44:51,750
countermeasures<font color="#E5E5E5"> one of them will be</font><font color="#CCCCCC"> very</font>

857
00:44:48,210 --> 00:44:53,730
limiting the way which tasks can<font color="#CCCCCC"> be</font>

858
00:44:51,750 --> 00:44:58,520
posted and if you do that what happens

859
00:44:53,730 --> 00:45:01,980
<font color="#CCCCCC">do just crushing or ruining the</font>

860
00:44:58,520 --> 00:45:04,020
<font color="#E5E5E5">streaming of</font><font color="#CCCCCC"> webpages it has a huge</font>

861
00:45:01,980 --> 00:45:06,330
<font color="#CCCCCC">impact on performance to the</font><font color="#E5E5E5"> one could</font>

862
00:45:04,020 --> 00:45:07,110
be reducing<font color="#E5E5E5"> the performance of</font>

863
00:45:06,330 --> 00:45:09,330
<font color="#E5E5E5">timestamps</font>

864
00:45:07,110 --> 00:45:13,310
that is to say so that you cannot<font color="#CCCCCC"> see</font>

865
00:45:09,330 --> 00:45:16,740
that<font color="#E5E5E5"> as microseconds but at a higher</font>

866
00:45:13,310 --> 00:45:18,690
time of<font color="#E5E5E5"> right so there</font><font color="#CCCCCC"> are different</font>

867
00:45:16,740 --> 00:45:20,910
possible<font color="#CCCCCC"> ways to</font><font color="#E5E5E5"> measure times not only</font>

868
00:45:18,690 --> 00:45:23,250
milliseconds but<font color="#E5E5E5"> also in</font><font color="#CCCCCC"> - seconds you</font>

869
00:45:20,910 --> 00:45:28,230
can do that<font color="#E5E5E5"> with your browser so judges</font>

870
00:45:23,250 --> 00:45:32,100
you can use make a silly<font color="#CCCCCC"> loop</font><font color="#E5E5E5"> and then</font>

871
00:45:28,230 --> 00:45:34,140
starting a counter and<font color="#E5E5E5"> every time so</font>

872
00:45:32,100 --> 00:45:36,450
when you finish the<font color="#E5E5E5"> request you just</font>

873
00:45:34,140 --> 00:45:40,020
take a look at the counter<font color="#E5E5E5"> and that is a</font>

874
00:45:36,450 --> 00:45:42,569
pseudo thick<font color="#CCCCCC"> initial phase pseudo check</font>

875
00:45:40,020 --> 00:45:44,790
of execution there are many ways<font color="#CCCCCC"> to do</font>

876
00:45:42,570 --> 00:45:46,860
that<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> either reduce the</font>

877
00:45:44,790 --> 00:45:49,170
solution while reducing<font color="#E5E5E5"> the resolution</font>

878
00:45:46,860 --> 00:45:52,200
of IP estimation<font color="#E5E5E5"> sense is not a good</font>

879
00:45:49,170 --> 00:45:55,890
solution is<font color="#CCCCCC"> useless announced</font><font color="#E5E5E5"> full</font>

880
00:45:52,200 --> 00:45:59,009
isolation<font color="#E5E5E5"> the problem with</font><font color="#CCCCCC"> that is</font>

881
00:45:55,890 --> 00:46:01,620
granularity<font color="#CCCCCC"> of isolation so with you</font>

882
00:45:59,010 --> 00:46:04,770
<font color="#E5E5E5">compromises</font><font color="#CCCCCC"> sub-domain or if there is a</font>

883
00:46:01,620 --> 00:46:07,920
subdomain that<font color="#CCCCCC"> you don't fully</font><font color="#E5E5E5"> trust in</font>

884
00:46:04,770 --> 00:46:12,720
<font color="#E5E5E5">terms of like the nests of it executing</font>

885
00:46:07,920 --> 00:46:14,700
and<font color="#CCCCCC"> malice malicious code</font><font color="#E5E5E5"> but the issue</font>

886
00:46:12,720 --> 00:46:17,850
<font color="#E5E5E5">of the house process continues to be</font>

887
00:46:14,700 --> 00:46:20,220
there or the<font color="#E5E5E5"> expansion the plugins that</font>

888
00:46:17,850 --> 00:46:22,650
<font color="#CCCCCC">does not fall</font><font color="#E5E5E5"> within these</font><font color="#CCCCCC"> site</font>

889
00:46:20,220 --> 00:46:24,629
isolation projects and this<font color="#E5E5E5"> is something</font>

890
00:46:22,650 --> 00:46:26,820
<font color="#CCCCCC">that happened to</font><font color="#E5E5E5"> me when I was when I</font>

891
00:46:24,630 --> 00:46:29,340
finished<font color="#CCCCCC"> the run in my experiments and</font>

892
00:46:26,820 --> 00:46:32,940
then out<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the sudden my laptop</font><font color="#CCCCCC"> our</font>

893
00:46:29,340 --> 00:46:36,030
credit to the last latest crumb and the

894
00:46:32,940 --> 00:46:38,940
thing is<font color="#E5E5E5"> that they</font><font color="#CCCCCC"> have implemented the</font>

895
00:46:36,030 --> 00:46:43,950
<font color="#E5E5E5">CPU throttling so it means that when</font><font color="#CCCCCC"> you</font>

896
00:46:38,940 --> 00:46:49,470
<font color="#CCCCCC">have it up in the</font><font color="#E5E5E5"> background the use of</font>

897
00:46:43,950 --> 00:46:54,200
<font color="#E5E5E5">this CPU is limited and I didn't like</font>

898
00:46:49,470 --> 00:46:54,200
that<font color="#E5E5E5"> because</font><font color="#CCCCCC"> that was a</font><font color="#E5E5E5"> problem for me</font>

899
00:46:54,740 --> 00:47:01,919
but well<font color="#E5E5E5"> people</font><font color="#CCCCCC"> started</font><font color="#E5E5E5"> to complain</font>

900
00:46:58,770 --> 00:47:04,530
about that because<font color="#E5E5E5"> for</font><font color="#CCCCCC"> instance</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> are</font>

901
00:47:01,920 --> 00:47:07,140
on Spotify<font color="#CCCCCC"> you're</font><font color="#E5E5E5"> listening</font><font color="#CCCCCC"> to music and</font>

902
00:47:04,530 --> 00:47:10,500
<font color="#CCCCCC">you have it in the background</font><font color="#E5E5E5"> tab then</font>

903
00:47:07,140 --> 00:47:12,779
<font color="#E5E5E5">the music stops playing and</font><font color="#CCCCCC"> developers</font>

904
00:47:10,500 --> 00:47:15,830
said look if the API is in<font color="#E5E5E5"> the</font>

905
00:47:12,780 --> 00:47:18,300
background<font color="#CCCCCC"> and</font><font color="#E5E5E5"> if they use the</font><font color="#CCCCCC"> Audio API</font>

906
00:47:15,830 --> 00:47:22,890
<font color="#E5E5E5">that I've put it in the foreground</font><font color="#CCCCCC"> if</font>

907
00:47:18,300 --> 00:47:24,960
you do that to bypass<font color="#CCCCCC"> that so we had an</font>

908
00:47:22,890 --> 00:47:27,900
impact on me however<font color="#E5E5E5"> there are different</font>

909
00:47:24,960 --> 00:47:33,360
ways<font color="#CCCCCC"> to bypass</font><font color="#E5E5E5"> that so the conclusion is</font>

910
00:47:27,900 --> 00:47:36,600
as<font color="#CCCCCC"> is it said before so if you</font><font color="#E5E5E5"> find that</font>

911
00:47:33,360 --> 00:47:38,900
<font color="#E5E5E5">an exploding</font><font color="#CCCCCC"> from that is perched on the</font>

912
00:47:36,600 --> 00:47:38,900
<font color="#CCCCCC">face</font>

913
00:47:39,050 --> 00:47:48,440
and in logical<font color="#E5E5E5"> failure can</font><font color="#CCCCCC"> be easily</font>

914
00:47:43,480 --> 00:47:51,110
<font color="#CCCCCC">patched however with our channels they</font>

915
00:47:48,440 --> 00:47:52,910
<font color="#CCCCCC">are</font><font color="#E5E5E5"> very difficult to mitigate because</font>

916
00:47:51,110 --> 00:47:54,950
<font color="#CCCCCC">securities may</font><font color="#E5E5E5"> indeed factor of chrome</font>

917
00:47:52,910 --> 00:47:57,170
that<font color="#CCCCCC"> requires will</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> stability</font><font color="#CCCCCC"> not</font>

918
00:47:54,950 --> 00:48:00,350
to take up<font color="#E5E5E5"> lots of memory they have to</font>

919
00:47:57,170 --> 00:48:03,080
run<font color="#E5E5E5"> fast</font><font color="#CCCCCC"> so you'd really need to fight</font>

920
00:48:00,350 --> 00:48:07,490
<font color="#E5E5E5">an intermediate point so that everyone</font>

921
00:48:03,080 --> 00:48:09,850
is<font color="#E5E5E5"> happy and secure and</font><font color="#CCCCCC"> nearly finish in</font>

922
00:48:07,490 --> 00:48:12,830
future<font color="#E5E5E5"> other browsers</font>

923
00:48:09,850 --> 00:48:16,220
one of the first Firefox is moving

924
00:48:12,830 --> 00:48:18,440
<font color="#E5E5E5">forward and multiplex</font><font color="#CCCCCC"> which is different</font>

925
00:48:16,220 --> 00:48:20,000
architecture from that of<font color="#CCCCCC"> Chrome but</font>

926
00:48:18,440 --> 00:48:23,690
without taking<font color="#CCCCCC"> a look at the</font>

927
00:48:20,000 --> 00:48:26,270
architecture<font color="#CCCCCC"> the details loosing the per</font>

928
00:48:23,690 --> 00:48:29,330
second you can<font color="#CCCCCC"> see a similar</font><font color="#E5E5E5"> situation</font>

929
00:48:26,270 --> 00:48:32,600
<font color="#CCCCCC">with the loop events so the problem is</font>

930
00:48:29,330 --> 00:48:35,210
there with other browsers therefore I

931
00:48:32,600 --> 00:48:38,540
have good<font color="#CCCCCC"> rhapsody I'm curious to see</font>

932
00:48:35,210 --> 00:48:43,010
what<font color="#CCCCCC"> will</font><font color="#E5E5E5"> happens with sever it is the</font>

933
00:48:38,540 --> 00:48:46,840
new engine we made<font color="#CCCCCC"> in vests I want to</font>

934
00:48:43,010 --> 00:48:51,080
see how event<font color="#E5E5E5"> ellipse up dose is there</font>

935
00:48:46,840 --> 00:48:55,070
and as I say I was curious<font color="#E5E5E5"> about about</font>

936
00:48:51,080 --> 00:48:57,160
<font color="#CCCCCC">it</font><font color="#E5E5E5"> and also improving attacks these are</font>

937
00:48:55,070 --> 00:49:01,340
proofs of concept<font color="#E5E5E5"> covered channel</font>

938
00:48:57,160 --> 00:49:04,850
<font color="#E5E5E5">identification</font><font color="#CCCCCC"> of website I use only one</font>

939
00:49:01,340 --> 00:49:07,490
trace to learn if you use more<font color="#E5E5E5"> traces</font>

940
00:49:04,850 --> 00:49:11,049
performance goes up<font color="#E5E5E5"> a lot and then even</font>

941
00:49:07,490 --> 00:49:16,819
do this very generic is not only

942
00:49:11,050 --> 00:49:20,390
exclusive of browsers<font color="#E5E5E5"> so we have to see</font>

943
00:49:16,820 --> 00:49:22,760
what other environments<font color="#E5E5E5"> and</font><font color="#CCCCCC"> then</font><font color="#E5E5E5"> website</font>

944
00:49:20,390 --> 00:49:24,500
<font color="#E5E5E5">sounds and you have to see whether we</font>

945
00:49:22,760 --> 00:49:27,280
come<font color="#E5E5E5"> on attack them as well</font><font color="#CCCCCC"> so thank you</font>

946
00:49:24,500 --> 00:49:27,280
<font color="#CCCCCC">very much for</font><font color="#E5E5E5"> your attention</font>

947
00:49:29,069 --> 00:49:35,440
so we are<font color="#E5E5E5"> doing good with time so we</font>

948
00:49:33,609 --> 00:49:43,359
have time for two more questions for two

949
00:49:35,440 --> 00:49:45,279
questions<font color="#CCCCCC"> I have a question I was</font><font color="#E5E5E5"> about</font>

950
00:49:43,359 --> 00:49:48,299
doing<font color="#E5E5E5"> the typical</font><font color="#CCCCCC"> ad on that because</font>

951
00:49:45,279 --> 00:49:52,299
plug-in that<font color="#CCCCCC"> you go have it in there</font>

952
00:49:48,299 --> 00:49:56,200
opens up so that is<font color="#E5E5E5"> running</font><font color="#CCCCCC"> therefore</font>

953
00:49:52,299 --> 00:49:57,640
that it is creating noise<font color="#E5E5E5"> well many</font>

954
00:49:56,200 --> 00:50:00,339
people<font color="#E5E5E5"> ask me just</font><font color="#CCCCCC"> the opposite I think</font>

955
00:49:57,640 --> 00:50:05,220
<font color="#CCCCCC">what happens is you introduce the</font>

956
00:50:00,339 --> 00:50:05,220
scenario<font color="#E5E5E5"> of malicious they're plugging</font>

957
00:50:05,400 --> 00:50:10,450
<font color="#E5E5E5">always running well in our Christology</font>

958
00:50:08,349 --> 00:50:13,210
can do fingerprinting through malicious

959
00:50:10,450 --> 00:50:15,279
plugging and to the<font color="#CCCCCC"> diplom</font><font color="#E5E5E5"> what they are</font>

960
00:50:13,210 --> 00:50:17,710
used<font color="#E5E5E5"> to detect them through event loop</font>

961
00:50:15,279 --> 00:50:20,130
<font color="#CCCCCC">yes you could do that any other</font>

962
00:50:17,710 --> 00:50:20,130
questions

963
00:50:20,160 --> 00:50:25,019
<font color="#CCCCCC">all right thank you</font><font color="#E5E5E5"> very much pepper</font>

964
00:50:26,220 --> 00:50:35,669
what about<font color="#E5E5E5"> I remind you that you can cut</font>

965
00:50:30,099 --> 00:50:35,670
in<font color="#CCCCCC"> hose</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> Calvary</font>

