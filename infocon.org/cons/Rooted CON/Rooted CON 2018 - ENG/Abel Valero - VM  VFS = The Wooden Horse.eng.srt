1
00:00:00,140 --> 00:00:06,439
these are mobile telephones that are

2
00:00:03,720 --> 00:00:10,920
handmade by a heart for swamp okay

3
00:00:06,440 --> 00:00:14,580
using a Bradbury Pi and Arduino sockets

4
00:00:10,920 --> 00:00:18,779
and then you have the whistle 2,600

5
00:00:14,580 --> 00:00:21,689
Hertz which will be part of a pack okay

6
00:00:18,779 --> 00:00:24,600
well mr. Valerio I think you know him

7
00:00:21,689 --> 00:00:27,689
his presentations always impact me I'm

8
00:00:24,600 --> 00:00:30,890
sure that you will spoil my lunch but

9
00:00:27,689 --> 00:00:30,890
please introduce yourself

10
00:02:14,320 --> 00:02:18,739
- tardes a todo gracias por a good

11
00:02:17,330 --> 00:02:25,280
afternoon everyone and thank you for

12
00:02:18,740 --> 00:02:27,530
coming I'll be telling you about a type

13
00:02:25,280 --> 00:02:31,250
of malware does he is useful espionage

14
00:02:27,530 --> 00:02:33,800
is used by States basically with very

15
00:02:31,250 --> 00:02:38,390
peculiar detection mechanisms behind the

16
00:02:33,800 --> 00:02:42,980
scenes I will not stop here for too long

17
00:02:38,390 --> 00:02:47,350
are invalid oh I were a panda my contact

18
00:02:42,980 --> 00:02:47,350
details are there my Twitter profile

19
00:02:47,770 --> 00:02:53,060
I'll talk about finfisher this is a

20
00:02:51,230 --> 00:02:55,609
surveillance software developed by a

21
00:02:53,060 --> 00:03:00,440
company called gamma international with

22
00:02:55,610 --> 00:03:02,180
headquarters in the UK and Germany and a

23
00:03:00,440 --> 00:03:04,609
number of subsidiaries they all belong

24
00:03:02,180 --> 00:03:07,720
to gamma group international this is

25
00:03:04,610 --> 00:03:12,260
from Wikipedia nothing else about them

26
00:03:07,720 --> 00:03:16,220
towards the end of 2011 there was a leak

27
00:03:12,260 --> 00:03:18,500
information leak in WikiLeaks telling us

28
00:03:16,220 --> 00:03:22,190
about C and C how to connect with

29
00:03:18,500 --> 00:03:25,070
servers in September of 2014 WikiLeaks

30
00:03:22,190 --> 00:03:29,710
released the binaries for Windows own

31
00:03:25,070 --> 00:03:29,709
investigators started looking at this

32
00:03:30,610 --> 00:03:37,510
since 2014 different investigators have

33
00:03:34,720 --> 00:03:41,620
been analyzing the code that was made

34
00:03:37,510 --> 00:03:46,989
public by WikiLeaks just scratching the

35
00:03:41,620 --> 00:03:50,820
surface immersed in most cases several

36
00:03:46,990 --> 00:03:53,170
private events have been discussing the

37
00:03:50,820 --> 00:03:55,780
details about the files that were leaked

38
00:03:53,170 --> 00:03:58,630
by WikiLeaks and then in october last

39
00:03:55,780 --> 00:04:01,210
year 2017 a paper was published men's

40
00:03:58,630 --> 00:04:03,490
mentioning fulfilling fisher black

41
00:04:01,210 --> 00:04:06,790
racist apt and new targeted attacks

42
00:04:03,490 --> 00:04:10,150
leveraging zero to exploit in this paper

43
00:04:06,790 --> 00:04:11,799
they talk about the existence of a

44
00:04:10,150 --> 00:04:15,280
virtual machine which is used within

45
00:04:11,800 --> 00:04:20,320
Winfred for sure the md5 for the binary

46
00:04:15,280 --> 00:04:21,970
was analyzed this is the value we know

47
00:04:20,320 --> 00:04:24,219
that there is a virtual machine and you

48
00:04:21,970 --> 00:04:26,910
know that I don't like them so I started

49
00:04:24,220 --> 00:04:26,910
looking into this

50
00:04:28,759 --> 00:04:33,979
so I started analyzing the drop apart

51
00:04:31,189 --> 00:04:37,490
obviously I would open the file to see

52
00:04:33,979 --> 00:04:41,300
the structure here we see there is just

53
00:04:37,490 --> 00:04:43,099
a basic PE 32 bytes compiled with MSB C

54
00:04:41,300 --> 00:04:45,830
without the typical sections for that

55
00:04:43,099 --> 00:04:49,878
type of file and then it has a resource

56
00:04:45,830 --> 00:04:53,599
with several entries as you see there

57
00:04:49,879 --> 00:04:55,909
are some language trees icon M trees I

58
00:04:53,599 --> 00:04:59,808
can group entries and configuration

59
00:04:55,909 --> 00:05:01,580
files here icons are legitimate a

60
00:04:59,809 --> 00:05:02,180
configuration file I'll mention in a

61
00:05:01,580 --> 00:05:05,710
minute

62
00:05:02,180 --> 00:05:10,819
and this will be part of some payloads

63
00:05:05,710 --> 00:05:15,109
so I start looking at the code and I

64
00:05:10,819 --> 00:05:18,849
realized that this is what you can see

65
00:05:15,110 --> 00:05:18,849
there's a jump here

66
00:05:19,500 --> 00:05:23,250
it's counted out there into the same

67
00:05:22,590 --> 00:05:29,130
address

68
00:05:23,250 --> 00:05:32,160
it could be J obje we will jump to the

69
00:05:29,130 --> 00:05:34,020
next to race whether it was the first or

70
00:05:32,160 --> 00:05:37,080
the second one that was executed in

71
00:05:34,020 --> 00:05:41,549
order to continue the analysis we will

72
00:05:37,080 --> 00:05:43,890
have to clean the coat because if we try

73
00:05:41,550 --> 00:05:46,860
to look at this directly in their code

74
00:05:43,890 --> 00:05:50,520
we would just see rubbish with invalid

75
00:05:46,860 --> 00:05:55,590
instructions things that make it

76
00:05:50,520 --> 00:05:58,770
impossible to read the code properly and

77
00:05:55,590 --> 00:06:02,489
if what is cutter or either it will be

78
00:05:58,770 --> 00:06:04,590
impossible to read so we must transform

79
00:06:02,490 --> 00:06:07,500
these conditional jumps into

80
00:06:04,590 --> 00:06:09,179
unconditional jumps something which is

81
00:06:07,500 --> 00:06:11,520
relatively easy with the number of

82
00:06:09,180 --> 00:06:16,200
matches let me show you a chart how this

83
00:06:11,520 --> 00:06:20,520
has been coded in x86 here you see how

84
00:06:16,200 --> 00:06:23,430
the jump is represented all the elements

85
00:06:20,520 --> 00:06:28,229
under way it has been coded 70 Jo its y

86
00:06:23,430 --> 00:06:30,120
0 F 80 well you see that we can jump to

87
00:06:28,230 --> 00:06:32,130
areas that are closer to their due to

88
00:06:30,120 --> 00:06:36,690
the memory or areas that are farther

89
00:06:32,130 --> 00:06:38,760
away you stop code using two mice where

90
00:06:36,690 --> 00:06:41,810
is cursor for longer jumps you can

91
00:06:38,760 --> 00:06:41,810
occupy five bytes

92
00:06:42,580 --> 00:06:51,849
you see 0 F 0 80 0 F 81 these are

93
00:06:49,610 --> 00:06:51,850
similar

94
00:06:55,229 --> 00:06:59,949
changing from conditional to

95
00:06:57,369 --> 00:07:02,259
unconditional it is as simple as

96
00:06:59,949 --> 00:07:04,689
changing two bytes the first one we can

97
00:07:02,259 --> 00:07:08,799
solve using ninety and the second one

98
00:07:04,689 --> 00:07:13,109
will change by using a nine this way we

99
00:07:08,799 --> 00:07:16,359
are we are converting to this into a JMP

100
00:07:13,109 --> 00:07:19,808
the zeros replaced by ninety on the 82

101
00:07:16,359 --> 00:07:23,349
is replaced by a nine we don't have to

102
00:07:19,809 --> 00:07:26,229
do any alterations to the code the next

103
00:07:23,349 --> 00:07:28,029
jump will be cancelled and not

104
00:07:26,229 --> 00:07:31,748
interested anymore because both go in

105
00:07:28,029 --> 00:07:34,449
the same direction so six bytes are you

106
00:07:31,749 --> 00:07:36,659
the mapping and the code has a single

107
00:07:34,449 --> 00:07:36,659
jump

108
00:07:37,840 --> 00:07:42,280
for shorter jumps conditional to

109
00:07:40,330 --> 00:07:44,889
unconditional there's only two baths

110
00:07:42,280 --> 00:07:49,090
that need to be matched here we replace

111
00:07:44,889 --> 00:07:51,639
seven plus something by an EB so moving

112
00:07:49,090 --> 00:07:56,200
from conditional to unconditional the

113
00:07:51,639 --> 00:08:00,900
same we saw before here we have 77092 EB

114
00:07:56,200 --> 00:08:00,900
0 9 9 bytes forward

115
00:08:02,729 --> 00:08:10,229
to do the cleansing we find we search

116
00:08:06,330 --> 00:08:16,669
for patterns these are the ones 0f8

117
00:08:10,229 --> 00:08:16,669
whatever 0f8 whatever

118
00:08:18,030 --> 00:08:23,609
and that mask we can have values

119
00:08:21,020 --> 00:08:27,510
different values we need to locate all

120
00:08:23,610 --> 00:08:31,010
of them and change all of them here we

121
00:08:27,510 --> 00:08:31,010
have a script a simple script

122
00:08:32,340 --> 00:08:36,529
which that's what we want okay let me

123
00:08:34,830 --> 00:08:42,150
explain this

124
00:08:36,529 --> 00:08:46,770
these are macros from our 2 /x does a

125
00:08:42,150 --> 00:08:50,939
search with wildcards find me anything 0

126
00:08:46,770 --> 00:08:53,699
fade whatever 0 fade whatever this is

127
00:08:50,940 --> 00:08:54,390
everything it does ok nothing else the

128
00:08:53,700 --> 00:08:58,290
next line

129
00:08:54,390 --> 00:09:04,560
yeah we're defying a macro which does

130
00:08:58,290 --> 00:09:08,819
patch 1 patch 1 we're right on down the

131
00:09:04,560 --> 00:09:10,890
position on that position 99 which

132
00:09:08,820 --> 00:09:12,650
server writes the unconditional the

133
00:09:10,890 --> 00:09:15,839
additional jump and converts it into

134
00:09:12,650 --> 00:09:19,949
unconditional the next thing it does is

135
00:09:15,839 --> 00:09:22,500
move 6 bytes ahead and then do the

136
00:09:19,950 --> 00:09:24,779
mapping for the instruction behind the

137
00:09:22,500 --> 00:09:27,650
scenes and then I go back to the initial

138
00:09:24,779 --> 00:09:32,250
position and this is where we have the

139
00:09:27,650 --> 00:09:34,560
magic here a macro is a find which is

140
00:09:32,250 --> 00:09:37,800
executed at the same time in the first

141
00:09:34,560 --> 00:09:41,219
line we did a search we will have hit

142
00:09:37,800 --> 00:09:44,280
one hit 2 3 and offset whatever here I'm

143
00:09:41,220 --> 00:09:48,589
defining a macro it's saying that in the

144
00:09:44,280 --> 00:09:52,230
full variable it will store that place

145
00:09:48,589 --> 00:09:55,290
it jumps to if it moves from 40 to

146
00:09:52,230 --> 00:09:58,440
vector 100 it would say 40 to 100 if I

147
00:09:55,290 --> 00:09:59,819
move 6 bytes ahead and it will tell me

148
00:09:58,440 --> 00:10:04,400
about the destination for the next

149
00:09:59,820 --> 00:10:04,400
instruction then I go back where I was

150
00:10:04,769 --> 00:10:09,869
we start if it gives me zero they were

151
00:10:07,889 --> 00:10:14,369
all jumping they were both jumping to

152
00:10:09,869 --> 00:10:16,499
the same location if there is a

153
00:10:14,369 --> 00:10:20,519
conditional jump it goes to the same

154
00:10:16,499 --> 00:10:24,839
location there I know there by knowing

155
00:10:20,519 --> 00:10:29,100
that I am what I want to be and with the

156
00:10:24,839 --> 00:10:34,110
advantage all of these will be passed to

157
00:10:29,100 --> 00:10:36,029
the macro if the condition is met with a

158
00:10:34,110 --> 00:10:41,399
question mark exclamation mark it will

159
00:10:36,029 --> 00:10:43,319
execute bash one that's one so match one

160
00:10:41,399 --> 00:10:44,699
will be executed for anything to meet

161
00:10:43,319 --> 00:10:47,939
the requirements so the code will be

162
00:10:44,699 --> 00:10:49,799
clean for short run that was for long

163
00:10:47,939 --> 00:10:52,699
jumps for short jumps is exactly the

164
00:10:49,799 --> 00:10:56,639
same but looking for the short patterns

165
00:10:52,699 --> 00:10:58,829
the final script looks like this I said

166
00:10:56,639 --> 00:11:00,959
magic well it's not that magic but

167
00:10:58,829 --> 00:11:03,660
anyway it's about being able to

168
00:11:00,959 --> 00:11:07,018
interpret microformats properly in this

169
00:11:03,660 --> 00:11:09,709
one two three six times six lines gives

170
00:11:07,019 --> 00:11:09,709
us everything

171
00:11:11,200 --> 00:11:20,139
so I carry on with my analysis and these

172
00:11:17,110 --> 00:11:23,589
are the functions this is a start of a

173
00:11:20,139 --> 00:11:27,550
normal function it initializes the rate

174
00:11:23,589 --> 00:11:32,199
the Registry's in the stack but here all

175
00:11:27,550 --> 00:11:34,380
instructions are referenced and all of

176
00:11:32,199 --> 00:11:38,339
them do things that don't make any sense

177
00:11:34,380 --> 00:11:41,889
here it multiply something storing it

178
00:11:38,339 --> 00:11:43,570
but lots of strange things happening it

179
00:11:41,889 --> 00:11:46,029
doesn't turn up it doesn't make any

180
00:11:43,570 --> 00:11:49,060
sense all functions are this do the same

181
00:11:46,029 --> 00:11:53,740
thing this code makes no sense

182
00:11:49,060 --> 00:11:56,518
whatsoever what we do see is that all

183
00:11:53,740 --> 00:11:56,519
the functions

184
00:11:57,089 --> 00:12:06,119
end up jumping 240 1950 this address it

185
00:12:04,439 --> 00:12:08,909
makes me think that this is the virtual

186
00:12:06,119 --> 00:12:11,159
machine they were talking about this is

187
00:12:08,909 --> 00:12:15,959
a function to has its Harrisville code

188
00:12:11,159 --> 00:12:19,229
which has been replaced by useless code

189
00:12:15,959 --> 00:12:25,169
that does nothing because one will get

190
00:12:19,229 --> 00:12:27,869
to this point it does nothing at all so

191
00:12:25,169 --> 00:12:33,629
whatever you did here doesn't make any

192
00:12:27,869 --> 00:12:36,029
difference this is just about

193
00:12:33,629 --> 00:12:37,379
introducing services on the stack this

194
00:12:36,029 --> 00:12:40,139
value that you see here from this

195
00:12:37,379 --> 00:12:43,499
function and calling the interpreter for

196
00:12:40,139 --> 00:12:46,259
the e-version machine multiple calls to

197
00:12:43,499 --> 00:12:47,819
that address 14 19 and 50 which is a

198
00:12:46,259 --> 00:12:50,669
function that we initialize the virtual

199
00:12:47,819 --> 00:12:54,509
machine is so dysfunctional stores

200
00:12:50,669 --> 00:12:58,199
memory and then decrypt the algorithm to

201
00:12:54,509 --> 00:13:01,309
encrypt or decrypt the P code which will

202
00:12:58,199 --> 00:13:04,949
be interpreting the original quarry will

203
00:13:01,309 --> 00:13:08,909
encrypt the P code and then we'll see

204
00:13:04,949 --> 00:13:11,639
the thread we are in and then it will

205
00:13:08,909 --> 00:13:15,239
compute a value to access to the memory

206
00:13:11,639 --> 00:13:18,179
area in the context of VM and then it

207
00:13:15,239 --> 00:13:20,999
will jump to one of the 21 operations

208
00:13:18,179 --> 00:13:26,089
available for it and well that's all for

209
00:13:20,999 --> 00:13:31,949
the VM and let us say that a month ago

210
00:13:26,089 --> 00:13:37,829
was article published the first

211
00:13:31,949 --> 00:13:40,618
name of the article was from rose there

212
00:13:37,829 --> 00:13:42,988
was an article about cleaning the code

213
00:13:40,619 --> 00:13:47,730
and then and he also published another

214
00:13:42,989 --> 00:13:52,980
article about VM then parallel to - SS

215
00:13:47,730 --> 00:13:59,160
published wonderful PDF explaining how

216
00:13:52,980 --> 00:14:01,259
GM worked well when I sent out his that

217
00:13:59,160 --> 00:14:03,719
proposal I was told that there have been

218
00:14:01,259 --> 00:14:10,290
already been published so if you are

219
00:14:03,720 --> 00:14:13,350
interested in VM so I gave tutorial

220
00:14:10,290 --> 00:14:15,358
about VM has identified them how to set

221
00:14:13,350 --> 00:14:17,850
them up okay so you have information

222
00:14:15,359 --> 00:14:18,799
that did happen all see in English and

223
00:14:17,850 --> 00:14:23,129
Spanish

224
00:14:18,799 --> 00:14:25,230
alright so what did I do from there so

225
00:14:23,129 --> 00:14:27,480
there was a virtual machine and then I

226
00:14:25,230 --> 00:14:29,579
say okay what I'm going to do now

227
00:14:27,480 --> 00:14:34,319
because I want to have some fun I'm

228
00:14:29,579 --> 00:14:36,868
going to freak set that code that is to

229
00:14:34,319 --> 00:14:40,410
say I want to get the binary before it

230
00:14:36,869 --> 00:14:41,850
well it was virtualized so for that I

231
00:14:40,410 --> 00:14:47,610
created a tool

232
00:14:41,850 --> 00:14:50,759
I gave name P tool so then I had an

233
00:14:47,610 --> 00:14:52,949
original p2 then I added the plaster and

234
00:14:50,759 --> 00:14:55,769
then it supports the different

235
00:14:52,949 --> 00:14:59,399
configurations of VM and I just wanted

236
00:14:55,769 --> 00:15:01,499
to obtain binary close as close as

237
00:14:59,399 --> 00:15:03,929
possible to the original one I was I

238
00:15:01,499 --> 00:15:06,569
turned 40 years of age and I was a bit

239
00:15:03,929 --> 00:15:09,110
depressed and I decided to go for this

240
00:15:06,569 --> 00:15:11,959
to have some fun okay they need

241
00:15:09,110 --> 00:15:15,329
requirements I needed to have a PA

242
00:15:11,959 --> 00:15:18,929
parser to access different sections and

243
00:15:15,329 --> 00:15:21,029
to rebuild it have that library but also

244
00:15:18,929 --> 00:15:23,339
an own library that I built a few years

245
00:15:21,029 --> 00:15:25,100
ago which is still working so it is

246
00:15:23,339 --> 00:15:27,800
assembler we

247
00:15:25,100 --> 00:15:30,620
but we'll have custom but I have my own

248
00:15:27,800 --> 00:15:32,810
one and the one that I'm one over of

249
00:15:30,620 --> 00:15:35,030
then I have a search engine that it also

250
00:15:32,810 --> 00:15:37,640
makes me allows me to make binary

251
00:15:35,030 --> 00:15:40,670
searches and then we process it in code

252
00:15:37,640 --> 00:15:43,250
see with no problems and then what I

253
00:15:40,670 --> 00:15:45,579
have what I don't have ideas took it

254
00:15:43,250 --> 00:15:49,760
from somewhere I took these compiler

255
00:15:45,580 --> 00:15:52,430
disassembler I used Keystone but very

256
00:15:49,760 --> 00:15:56,740
faithful for me so I will end up doing

257
00:15:52,430 --> 00:16:00,620
kiss on myself okay and then I have

258
00:15:56,740 --> 00:16:04,610
decompiler routine it is the AP live by

259
00:16:00,620 --> 00:16:06,560
your some Epson it is highly optimized

260
00:16:04,610 --> 00:16:13,280
and it is very good to compile code and

261
00:16:06,560 --> 00:16:15,619
then I always want to do all these in a

262
00:16:13,280 --> 00:16:18,079
simple manner okay so that I can come

263
00:16:15,620 --> 00:16:21,140
back to it at any time and do not have

264
00:16:18,080 --> 00:16:23,270
any trouble okay this is a to-do list

265
00:16:21,140 --> 00:16:25,670
okay and these are the things that I

266
00:16:23,270 --> 00:16:27,890
have to do to rebuild the code first of

267
00:16:25,670 --> 00:16:33,410
all I need to have the configuration of

268
00:16:27,890 --> 00:16:35,630
the VM well they have made true that

269
00:16:33,410 --> 00:16:37,459
virtualizes a code but darker is not

270
00:16:35,630 --> 00:16:40,010
always virtualized in the same manner

271
00:16:37,460 --> 00:16:46,730
but the only thing that they change is

272
00:16:40,010 --> 00:16:50,330
the code table so when they build the

273
00:16:46,730 --> 00:16:53,780
second virtual machine the to say GB so

274
00:16:50,330 --> 00:16:56,420
they just change the table they change

275
00:16:53,780 --> 00:16:58,819
the table and the codes in it okay not

276
00:16:56,420 --> 00:17:02,319
the actual virtualization system then I

277
00:16:58,820 --> 00:17:06,050
will have to have the size of the

278
00:17:02,320 --> 00:17:09,320
unzipped P code and then the P code I

279
00:17:06,050 --> 00:17:12,079
will have to find the operations table

280
00:17:09,319 --> 00:17:15,208
that is to say and to emulated and for

281
00:17:12,079 --> 00:17:17,279
that I will have to change

282
00:17:15,209 --> 00:17:20,189
the efficient that I told you about

283
00:17:17,279 --> 00:17:23,130
before then I will have to interpret the

284
00:17:20,189 --> 00:17:25,380
P code all at once just to find out

285
00:17:23,130 --> 00:17:27,569
about all the available functions and

286
00:17:25,380 --> 00:17:30,179
then I will have to isolate each of

287
00:17:27,569 --> 00:17:31,860
functions within that P code perhaps

288
00:17:30,179 --> 00:17:35,970
that's the most complicated bit but it

289
00:17:31,860 --> 00:17:37,590
can be done fast if I want to rebuild it

290
00:17:35,970 --> 00:17:39,870
like if it hadn't gone through the

291
00:17:37,590 --> 00:17:41,970
virtual machine I will have to take care

292
00:17:39,870 --> 00:17:44,639
of three locations which are values a

293
00:17:41,970 --> 00:17:47,549
change whenever an executable is change

294
00:17:44,640 --> 00:17:50,130
the moves to different memory areas so

295
00:17:47,549 --> 00:17:51,990
well to get the configuration of the VM

296
00:17:50,130 --> 00:17:56,360
how was it the following I will use this

297
00:17:51,990 --> 00:17:59,760
trick I know that this executable can be

298
00:17:56,360 --> 00:18:02,789
relocated in the memory so some areas of

299
00:17:59,760 --> 00:18:05,039
the executable well insert it with a

300
00:18:02,789 --> 00:18:06,750
location so they need to find out about

301
00:18:05,039 --> 00:18:10,320
the base of the program so the value

302
00:18:06,750 --> 00:18:12,960
that we see here there's 0 0 4000 that

303
00:18:10,320 --> 00:18:15,059
value changes depending where the image

304
00:18:12,960 --> 00:18:17,850
space of the program is today is for

305
00:18:15,059 --> 00:18:20,639
tick maybe 15 maybe several so what I do

306
00:18:17,850 --> 00:18:22,709
I just load the file I just second look

307
00:18:20,640 --> 00:18:24,450
at the default image base and I'm going

308
00:18:22,710 --> 00:18:27,480
to look for it so this is the first

309
00:18:24,450 --> 00:18:30,929
match that is to say these four bytes

310
00:18:27,480 --> 00:18:33,240
that I have here is the VI if I had

311
00:18:30,929 --> 00:18:35,309
40,000 to this value that's what the P

312
00:18:33,240 --> 00:18:37,799
code which has been compiled in the

313
00:18:35,309 --> 00:18:40,440
virtual machine instance then the pickle

314
00:18:37,799 --> 00:18:43,550
would be on top one Cities D compiles

315
00:18:40,440 --> 00:18:49,309
and here we have the

316
00:18:43,550 --> 00:18:51,530
decrypting decryption key so for also to

317
00:18:49,309 --> 00:18:54,440
find the opcode table I would do the

318
00:18:51,530 --> 00:18:56,840
same thing they said in the offset you

319
00:18:54,440 --> 00:18:57,080
have these code one two three what do I

320
00:18:56,840 --> 00:18:59,600
do

321
00:18:57,080 --> 00:19:01,909
I'll do the same thing because the exa

322
00:18:59,600 --> 00:19:05,209
can be relocated in the memory I'm going

323
00:19:01,910 --> 00:19:07,309
to look for the opcode table but I will

324
00:19:05,210 --> 00:19:09,380
look at in the high part of the base I'm

325
00:19:07,309 --> 00:19:12,080
going to rule out the low part of it

326
00:19:09,380 --> 00:19:14,900
because these jumps are relatively close

327
00:19:12,080 --> 00:19:17,659
to each other and then this paddle helps

328
00:19:14,900 --> 00:19:21,800
me find it fast so I'm going to look

329
00:19:17,660 --> 00:19:23,600
only 50 4000 and any value this is the

330
00:19:21,800 --> 00:19:26,899
way it is represented in the memory and

331
00:19:23,600 --> 00:19:31,030
this is the way it is represented so

332
00:19:26,900 --> 00:19:33,470
these with a mask of this kind x/x x x

333
00:19:31,030 --> 00:19:36,139
4000

334
00:19:33,470 --> 00:19:39,260
we'll look for the test section of the

335
00:19:36,140 --> 00:19:44,390
binary to find the table once I have the

336
00:19:39,260 --> 00:19:47,750
table I will have to recognize well

337
00:19:44,390 --> 00:19:50,390
which each up code what do I need to do

338
00:19:47,750 --> 00:19:53,809
for that well first cleaning the

339
00:19:50,390 --> 00:19:55,730
obfuscation my disassembler these are

340
00:19:53,809 --> 00:19:58,760
samples instructions and then I find

341
00:19:55,730 --> 00:20:00,559
these the results if I put the result of

342
00:19:58,760 --> 00:20:04,250
the cleaning the code I don't want to

343
00:20:00,559 --> 00:20:09,200
show it but if I find a jump which is

344
00:20:04,250 --> 00:20:12,410
close which is 8 sting or 32 bits I tell

345
00:20:09,200 --> 00:20:15,590
it to disassemble that point where there

346
00:20:12,410 --> 00:20:21,620
is the change so because I've changed

347
00:20:15,590 --> 00:20:24,139
the GPE to GMP so that the JMP I'm not

348
00:20:21,620 --> 00:20:28,909
reducing it because it is linear so from

349
00:20:24,140 --> 00:20:34,720
here any jump which is not 8 16 or 32

350
00:20:28,910 --> 00:20:38,179
which is a memory jump when jump that

351
00:20:34,720 --> 00:20:40,790
stops the disassembling if I find a

352
00:20:38,179 --> 00:20:43,270
conditional jump I will stir it see in

353
00:20:40,790 --> 00:20:45,790
the table and will this

354
00:20:43,270 --> 00:20:48,400
sample later on to find out more about

355
00:20:45,790 --> 00:20:52,480
instruction when I do that I create

356
00:20:48,400 --> 00:20:55,750
signatures in txt I store them and this

357
00:20:52,480 --> 00:20:59,680
is an opcode a full of code which is a

358
00:20:55,750 --> 00:21:02,730
comparison notice that in the VM the VM

359
00:20:59,680 --> 00:21:06,640
is reading from EAX that has been

360
00:21:02,730 --> 00:21:10,840
initialized to be xed as well it stores

361
00:21:06,640 --> 00:21:15,520
the initial flags so it is testing the

362
00:21:10,840 --> 00:21:18,010
influx with 800,000 with 80 okay so that

363
00:21:15,520 --> 00:21:21,220
was for this jump this is clearly this

364
00:21:18,010 --> 00:21:24,280
is JC because it is comparing it against

365
00:21:21,220 --> 00:21:27,690
40 and then we have opcode to emulate

366
00:21:24,280 --> 00:21:30,850
code so all of them have the same format

367
00:21:27,690 --> 00:21:34,390
if I hadn't cleans them I would have

368
00:21:30,850 --> 00:21:36,580
seen lots of useless germs and

369
00:21:34,390 --> 00:21:39,550
instructions and jumps but if I repeat

370
00:21:36,580 --> 00:21:42,879
the process and if I compare the txt and

371
00:21:39,550 --> 00:21:44,860
if I identify it I will identify each

372
00:21:42,880 --> 00:21:48,130
and every one of the up codes no matter

373
00:21:44,860 --> 00:21:52,600
comma they've been changed then I have a

374
00:21:48,130 --> 00:21:55,480
Tod file where I store each of these

375
00:21:52,600 --> 00:21:58,629
structures and that will be used in the

376
00:21:55,480 --> 00:22:00,760
giant switch for interpretation so every

377
00:21:58,630 --> 00:22:02,800
time I interpret and the key code it

378
00:22:00,760 --> 00:22:05,650
will go through my switch mass which

379
00:22:02,800 --> 00:22:07,960
will print out what for instance the

380
00:22:05,650 --> 00:22:10,420
pickle if i disassemble it sub center

381
00:22:07,960 --> 00:22:15,100
and suffering this is XA days so the

382
00:22:10,420 --> 00:22:17,680
code one is GL and the one is j9 and

383
00:22:15,100 --> 00:22:19,659
then I have the parameters of the number

384
00:22:17,680 --> 00:22:23,290
of restructures and as I say that is

385
00:22:19,660 --> 00:22:27,310
available in the documents of from soils

386
00:22:23,290 --> 00:22:29,230
and assets so these are I initialize

387
00:22:27,310 --> 00:22:32,050
some internal structures to represent a

388
00:22:29,230 --> 00:22:33,899
letter to have a code flow so here I

389
00:22:32,050 --> 00:22:38,039
will have to immunize

390
00:22:33,899 --> 00:22:41,399
spatter of things pie of him Fisher but

391
00:22:38,039 --> 00:22:44,820
with a self inspire I mean finfisher so

392
00:22:41,399 --> 00:22:48,870
we the Crypt each of the instructions

393
00:22:44,820 --> 00:22:52,340
that we got so each of them occupies 24

394
00:22:48,870 --> 00:22:56,129
bytes the first the word is does not

395
00:22:52,340 --> 00:22:59,759
doesn't have the X or applied the first

396
00:22:56,129 --> 00:23:02,459
EXO is an ID EXO so the dispatcher

397
00:22:59,759 --> 00:23:04,850
checks leave the value to be no reading

398
00:23:02,460 --> 00:23:07,950
each of the register requires three

399
00:23:04,850 --> 00:23:10,799
location application so we'll be tries

400
00:23:07,950 --> 00:23:16,019
in the VM and then if it has been

401
00:23:10,799 --> 00:23:18,720
relocated it has to be detected and then

402
00:23:16,019 --> 00:23:20,610
we show that with a flag so this is what

403
00:23:18,720 --> 00:23:22,409
I do this is the full function that I

404
00:23:20,610 --> 00:23:26,008
will be getting that will give me the

405
00:23:22,409 --> 00:23:30,179
full code of the VM the VM code era will

406
00:23:26,009 --> 00:23:33,059
interpret so the color in the buffer it

407
00:23:30,179 --> 00:23:36,620
is as easy as applying a sure after the

408
00:23:33,059 --> 00:23:39,870
first beam were when we have the P code

409
00:23:36,620 --> 00:23:44,370
so we do that for the five diverse and

410
00:23:39,870 --> 00:23:46,979
then we code it so this is what Finn

411
00:23:44,370 --> 00:23:48,899
aspired us to interpret code so it is

412
00:23:46,980 --> 00:23:52,799
checking whether the recently relocation

413
00:23:48,899 --> 00:23:55,889
or not in the bite six of what we have

414
00:23:52,799 --> 00:23:58,470
the up code we see whether the next

415
00:23:55,889 --> 00:24:01,529
parameter has been relocated or not if

416
00:23:58,470 --> 00:24:04,679
it is relocated he will up the value of

417
00:24:01,529 --> 00:24:06,480
the place and then I called my this big

418
00:24:04,679 --> 00:24:09,179
switch that I showed you before and

419
00:24:06,480 --> 00:24:11,100
therefore he will give me a legible

420
00:24:09,179 --> 00:24:13,529
representation of the code can you see

421
00:24:11,100 --> 00:24:14,789
that but once I do that that function

422
00:24:13,529 --> 00:24:17,519
this is what I get in return

423
00:24:14,789 --> 00:24:20,879
okay so this is the Pico this is the ID

424
00:24:17,519 --> 00:24:23,820
value which is never decrypted often

425
00:24:20,879 --> 00:24:25,320
they are consecutive in 24 bytes and at

426
00:24:23,820 --> 00:24:26,840
the end of the day this is a code this

427
00:24:25,320 --> 00:24:33,200
is interpreted this

428
00:24:26,840 --> 00:24:35,209
10:48 852 so I have here all the fools

429
00:24:33,200 --> 00:24:36,710
pick out that icon from the program

430
00:24:35,210 --> 00:24:38,660
everything everything that they didn't

431
00:24:36,710 --> 00:24:42,470
want us to see we are seeing it now but

432
00:24:38,660 --> 00:24:44,450
now we have a problem I don't know what

433
00:24:42,470 --> 00:24:47,440
the function start or finish so

434
00:24:44,450 --> 00:24:54,800
therefore I will have to look within the

435
00:24:47,440 --> 00:24:56,930
decode P code we need to know in the

436
00:24:54,800 --> 00:24:59,720
dropper in the dropper a speakers

437
00:24:56,930 --> 00:25:02,330
correct myself - I would have to find

438
00:24:59,720 --> 00:25:03,860
where each function being called as I

439
00:25:02,330 --> 00:25:05,689
told you before the important was the

440
00:25:03,860 --> 00:25:07,580
funding of the push that I did and then

441
00:25:05,690 --> 00:25:10,100
they jump to the address for me to

442
00:25:07,580 --> 00:25:13,189
determine the entry to V M the the

443
00:25:10,100 --> 00:25:18,949
routine for T so we'll have to look for

444
00:25:13,190 --> 00:25:21,320
structures of this kind 84 X 8 X s x0 F

445
00:25:18,950 --> 00:25:22,670
8 4 which is the pattern that we are

446
00:25:21,320 --> 00:25:25,610
seeing on the screen and there is

447
00:25:22,670 --> 00:25:27,320
another way of calling is it is push and

448
00:25:25,610 --> 00:25:29,780
jump and that will give me different

449
00:25:27,320 --> 00:25:31,669
values so when I look for all those

450
00:25:29,780 --> 00:25:33,320
values I will look for those beliefs I

451
00:25:31,670 --> 00:25:36,470
receive which one's cool the same

452
00:25:33,320 --> 00:25:39,980
factual most of the times and then I

453
00:25:36,470 --> 00:25:43,790
will identify while the entry to V M is

454
00:25:39,980 --> 00:25:46,490
then I will just store the that push

455
00:25:43,790 --> 00:25:50,149
value and also the location of the

456
00:25:46,490 --> 00:25:54,620
address and in this way now well we have

457
00:25:50,150 --> 00:25:56,870
the masks in my search engine now alpha

458
00:25:54,620 --> 00:25:58,809
erase the busts that I showed you

459
00:25:56,870 --> 00:26:02,309
and once I would

460
00:25:58,809 --> 00:26:05,740
time I will find these rule if we call

461
00:26:02,309 --> 00:26:07,360
this room and then I would closer it

462
00:26:05,740 --> 00:26:09,970
what do I do

463
00:26:07,360 --> 00:26:14,199
well what I told you I check how many

464
00:26:09,970 --> 00:26:15,850
times it has called it if it does it

465
00:26:14,200 --> 00:26:18,129
more than three times that repeat the

466
00:26:15,850 --> 00:26:20,918
same step and that promises everything

467
00:26:18,129 --> 00:26:22,870
again so therefore I have all the calls

468
00:26:20,919 --> 00:26:25,749
that have been made to the VM and a half

469
00:26:22,870 --> 00:26:29,080
of that is stored in the list and then I

470
00:26:25,749 --> 00:26:32,110
will go through the first call I go to

471
00:26:29,080 --> 00:26:35,889
where the P code starts and I start to

472
00:26:32,110 --> 00:26:39,399
decode decode and the moment the

473
00:26:35,889 --> 00:26:41,979
instruction I'm about to decode matches

474
00:26:39,399 --> 00:26:43,899
the address of one of the codes that I

475
00:26:41,980 --> 00:26:46,059
have that means that the function has

476
00:26:43,899 --> 00:26:49,119
been terminated because I am going to

477
00:26:46,059 --> 00:26:54,119
enter in the next function so therefore

478
00:26:49,119 --> 00:26:56,918
I have I know where the instructions

479
00:26:54,119 --> 00:26:58,389
have been eliminated whereas in this

480
00:26:56,919 --> 00:27:00,519
case I also let him

481
00:26:58,389 --> 00:27:03,039
I can't rebuild them I know whatever and

482
00:27:00,519 --> 00:27:05,619
I can put them back okay this is the

483
00:27:03,039 --> 00:27:08,980
algorithm that I just once I check

484
00:27:05,619 --> 00:27:11,860
whether the code has been recovered or

485
00:27:08,980 --> 00:27:14,519
not I repeat number step number one with

486
00:27:11,860 --> 00:27:17,678
all the functions up until I'll recover

487
00:27:14,519 --> 00:27:20,200
perfectly a perfect functioning code

488
00:27:17,679 --> 00:27:22,869
okay this is the code of my tool that

489
00:27:20,200 --> 00:27:26,320
does that this is the first loop where

490
00:27:22,869 --> 00:27:28,360
the entries are generated by the native

491
00:27:26,320 --> 00:27:31,080
code for each of the entries of VM is

492
00:27:28,360 --> 00:27:34,508
generated and if everything is correct

493
00:27:31,080 --> 00:27:36,850
then I go into here and I enter the

494
00:27:34,509 --> 00:27:39,730
branches so in the beginning I'm only

495
00:27:36,850 --> 00:27:42,668
interested in identifying the sizes how

496
00:27:39,730 --> 00:27:45,899
much the function measures well I do

497
00:27:42,669 --> 00:27:48,700
that run again but this time to apply

498
00:27:45,899 --> 00:27:51,219
generating code I applied relapse and I

499
00:27:48,700 --> 00:27:53,049
know the size of each of the function

500
00:27:51,220 --> 00:27:54,549
when I apply the relationship

501
00:27:53,049 --> 00:27:57,249
between the instruction and every locks

502
00:27:54,549 --> 00:28:01,408
i generate the assembler code and

503
00:27:57,249 --> 00:28:03,820
therefore my code is perfect okay now

504
00:28:01,409 --> 00:28:05,919
okay this is the part that will apply to

505
00:28:03,820 --> 00:28:08,168
every location I was about to show you

506
00:28:05,919 --> 00:28:12,190
how the Tool Works but my mom and told

507
00:28:08,169 --> 00:28:14,230
me that I have no time for it okay well

508
00:28:12,190 --> 00:28:17,710
I will show it to you at the end anyway

509
00:28:14,230 --> 00:28:19,360
well because if I start to know the VMS

510
00:28:17,710 --> 00:28:21,639
now it will take will be time consuming

511
00:28:19,360 --> 00:28:23,769
I will show it to you at the end of the

512
00:28:21,639 --> 00:28:26,229
presentation okay you have my tool now

513
00:28:23,769 --> 00:28:27,820
every time I would find code from the VM

514
00:28:26,230 --> 00:28:29,289
I would go through my jeweler I forget

515
00:28:27,820 --> 00:28:32,799
about everything and the tool would give

516
00:28:29,289 --> 00:28:36,519
me a perfectly clean cut back okay

517
00:28:32,799 --> 00:28:39,190
actual analysis of the code dropper so

518
00:28:36,519 --> 00:28:41,859
the code has been repealed no fish

519
00:28:39,190 --> 00:28:45,129
station in it and the main function of

520
00:28:41,859 --> 00:28:47,590
this dropper is to trip the next phases

521
00:28:45,129 --> 00:28:51,070
and to inject them in Explorer touch

522
00:28:47,590 --> 00:28:52,029
Excel so if we try to debug these with

523
00:28:51,070 --> 00:28:53,799
not work like that

524
00:28:52,029 --> 00:28:56,259
if the malware is accelerating in

525
00:28:53,799 --> 00:28:57,789
sandbox will not work so therefore no

526
00:28:56,259 --> 00:29:00,399
one we know what will happen the matter

527
00:28:57,789 --> 00:29:07,330
is doing nothing wrong so that's a good

528
00:29:00,399 --> 00:29:10,268
way to bypass so well debug actions be

529
00:29:07,330 --> 00:29:12,879
looking for network card to see whether

530
00:29:10,269 --> 00:29:15,100
it is in the virtual machine or not so

531
00:29:12,879 --> 00:29:17,799
it rules out things okay because it

532
00:29:15,100 --> 00:29:21,189
doesn't want to be done in virtual

533
00:29:17,799 --> 00:29:24,460
machine then it does a part to debug

534
00:29:21,190 --> 00:29:28,960
breakpoint so if you punch that API

535
00:29:24,460 --> 00:29:31,659
every time that there is that point then

536
00:29:28,960 --> 00:29:34,180
windows calls there but it doesn't call

537
00:29:31,659 --> 00:29:37,210
that because we insert and ninety

538
00:29:34,180 --> 00:29:39,880
there is a CC function so it never stops

539
00:29:37,210 --> 00:29:42,100
whenever the recent debug function okay

540
00:29:39,880 --> 00:29:45,190
instead of grade point you just replace

541
00:29:42,100 --> 00:29:48,399
it with ninety then in that sense

542
00:29:45,190 --> 00:29:51,010
information thread so it blocks the

543
00:29:48,400 --> 00:29:53,380
frame so that it cannot receive debugger

544
00:29:51,010 --> 00:29:56,350
messages it also checks whether the

545
00:29:53,380 --> 00:29:59,140
debugger towards is active or not so the

546
00:29:56,350 --> 00:30:01,270
only problem that we will find within VM

547
00:29:59,140 --> 00:30:04,060
if we are not debugging is the first one

548
00:30:01,270 --> 00:30:06,670
they set up API that we will touch later

549
00:30:04,060 --> 00:30:12,520
on okay so I continue analyzing the code

550
00:30:06,670 --> 00:30:16,870
I open up the program again the decipher

551
00:30:12,520 --> 00:30:20,680
decrypted VM and then I see that it has

552
00:30:16,870 --> 00:30:25,120
a resource so these bitmaps would be the

553
00:30:20,680 --> 00:30:28,300
payload to infecting the 3262 system

554
00:30:25,120 --> 00:30:30,879
this peddler has been encrypted with RC

555
00:30:28,300 --> 00:30:32,770
for do you just take the time data stamp

556
00:30:30,880 --> 00:30:37,000
or the header of the file to multiply it

557
00:30:32,770 --> 00:30:41,230
by two to apply an RC four and then you

558
00:30:37,000 --> 00:30:43,240
make that you can decrypt the resources

559
00:30:41,230 --> 00:30:47,950
and then they will you will end up with

560
00:30:43,240 --> 00:30:51,490
the binary so you can do that for 32 and

561
00:30:47,950 --> 00:30:53,440
for 64 I will focus on the 32 bits part

562
00:30:51,490 --> 00:30:56,080
so the trouble with injecting the

563
00:30:53,440 --> 00:30:59,170
Explorer what I have just found out or

564
00:30:56,080 --> 00:31:03,429
check out from itself that is to say the

565
00:30:59,170 --> 00:31:06,530
dll that will continue with our patch

566
00:31:03,430 --> 00:31:09,050
okay so this injection system

567
00:31:06,530 --> 00:31:11,270
has been interesting hospitable

568
00:31:09,050 --> 00:31:12,530
attention well surely some of you have

569
00:31:11,270 --> 00:31:16,040
seen it before I hadn't seen it before

570
00:31:12,530 --> 00:31:18,560
so at the current process current

571
00:31:16,040 --> 00:31:20,600
process went to assembly in the mikvah

572
00:31:18,560 --> 00:31:24,950
which is its own process it will obtain

573
00:31:20,600 --> 00:31:29,090
the user 32 address and now notice what

574
00:31:24,950 --> 00:31:31,190
it does it reads that address within the

575
00:31:29,090 --> 00:31:34,189
experiment process I was shocked by that

576
00:31:31,190 --> 00:31:37,970
and I said well Windows when the system

577
00:31:34,190 --> 00:31:41,060
starts juices juices 32 cognate to 232

578
00:31:37,970 --> 00:31:43,280
and entity L are always marked in the

579
00:31:41,060 --> 00:31:45,379
same direction for all the process when

580
00:31:43,280 --> 00:31:49,280
the system is asserted so if you

581
00:31:45,380 --> 00:31:51,800
obtained the base address of DLL do

582
00:31:49,280 --> 00:31:54,200
we'll find that very same address in any

583
00:31:51,800 --> 00:31:56,990
process that you may open producing 32

584
00:31:54,200 --> 00:31:59,480
for Candida jutsu so debride I use a 32

585
00:31:56,990 --> 00:32:01,340
of the explora they read it to the

586
00:31:59,480 --> 00:32:04,640
current system they patched the third

587
00:32:01,340 --> 00:32:07,490
entry in the test system which is a

588
00:32:04,640 --> 00:32:09,410
dispatcher of messages when that's the

589
00:32:07,490 --> 00:32:11,570
function that sends us messages to the

590
00:32:09,410 --> 00:32:13,820
windows function it is patched so that

591
00:32:11,570 --> 00:32:18,649
it points at at their own code and then

592
00:32:13,820 --> 00:32:21,980
they stop the Explorer they did map the

593
00:32:18,650 --> 00:32:25,340
original section in Explorer they did

594
00:32:21,980 --> 00:32:28,460
map the user 32 and they mapped the one

595
00:32:25,340 --> 00:32:30,709
that they have purged so by the time

596
00:32:28,460 --> 00:32:33,110
they will restart the Explorer system

597
00:32:30,710 --> 00:32:35,360
they will see that the function that

598
00:32:33,110 --> 00:32:37,820
used to do that is patter of the

599
00:32:35,360 --> 00:32:40,820
messages that go to the experiment will

600
00:32:37,820 --> 00:32:43,250
go through the code that they have

601
00:32:40,820 --> 00:32:45,050
injected and then the code will resolve

602
00:32:43,250 --> 00:32:47,930
the pain note that has been just

603
00:32:45,050 --> 00:32:51,379
inserted in Explorer if that pain note

604
00:32:47,930 --> 00:32:53,300
as we are seeing now but we can dump it

605
00:32:51,380 --> 00:32:55,880
no problem we know where it comes from

606
00:32:53,300 --> 00:32:59,180
it comes through these resources we know

607
00:32:55,880 --> 00:33:00,620
which is the the encryption key so we

608
00:32:59,180 --> 00:33:03,320
don't need to jump anything we just

609
00:33:00,620 --> 00:33:04,379
rebuild this as it is and that's it and

610
00:33:03,320 --> 00:33:05,909
then

611
00:33:04,380 --> 00:33:13,290
move on to the next phase which is the P

612
00:33:05,910 --> 00:33:14,150
payload in charge of infecting 32-bit

613
00:33:13,290 --> 00:33:17,100
system

614
00:33:14,150 --> 00:33:20,600
so whenever a Windows program has to

615
00:33:17,100 --> 00:33:23,699
call functions there are tables to go to

616
00:33:20,600 --> 00:33:26,250
so do you see these are values where

617
00:33:23,700 --> 00:33:30,990
we'll have a VA which is pointing to a

618
00:33:26,250 --> 00:33:33,990
part of the X file with text string so

619
00:33:30,990 --> 00:33:38,400
they have replaced the VA the address

620
00:33:33,990 --> 00:33:42,000
has been replaced with CRC the Soraka is

621
00:33:38,400 --> 00:33:44,630
CRC instead of pointing to the string to

622
00:33:42,000 --> 00:33:46,950
the change okay two points out the CRC

623
00:33:44,630 --> 00:33:50,370
because if you try to insert this in the

624
00:33:46,950 --> 00:33:52,590
memory will explode it will test the

625
00:33:50,370 --> 00:33:56,760
first okay because it doesn't know how

626
00:33:52,590 --> 00:34:01,199
to rebuild our code so reconstructing or

627
00:33:56,760 --> 00:34:04,980
rebuilding i-80 if we know how RC RC

628
00:34:01,200 --> 00:34:08,330
works we will have the time to build

629
00:34:04,980 --> 00:34:12,659
another two so this is the function as

630
00:34:08,330 --> 00:34:15,960
CRC the function is just a shirt well

631
00:34:12,659 --> 00:34:19,440
from the previous value and the current

632
00:34:15,960 --> 00:34:25,129
value and that's it and then the Tutera

633
00:34:19,440 --> 00:34:29,190
we'll be using to reconstruct me my i8c

634
00:34:25,129 --> 00:34:31,830
will go through the payload of AIT I

635
00:34:29,190 --> 00:34:34,230
will obtain the name of tll I will do

636
00:34:31,830 --> 00:34:37,409
the load library of DLL I will obtain

637
00:34:34,230 --> 00:34:40,110
the first rank CRC and then by the Sanwa

638
00:34:37,409 --> 00:34:43,010
we'll do that we'll check the CRC and

639
00:34:40,110 --> 00:34:49,139
then I would name it and then now I have

640
00:34:43,010 --> 00:34:50,370
this program so we should point to what

641
00:34:49,139 --> 00:34:53,280
it says Mensa

642
00:34:50,370 --> 00:34:55,710
so once we have that we have the IAT

643
00:34:53,280 --> 00:34:58,620
already rebuilt another let's take a

644
00:34:55,710 --> 00:35:02,160
look at the file see what's in it again

645
00:34:58,620 --> 00:35:04,890
typical sections and we have these

646
00:35:02,160 --> 00:35:11,790
sections where we have two resources and

647
00:35:04,890 --> 00:35:14,339
then an icon section so this dll will in

648
00:35:11,790 --> 00:35:16,650
fact well we take care of the infection

649
00:35:14,340 --> 00:35:19,140
process first of all we'll get some part

650
00:35:16,650 --> 00:35:21,720
from the resources of the fights the

651
00:35:19,140 --> 00:35:26,400
first thing that we do we'll open items

652
00:35:21,720 --> 00:35:30,089
will decrypt it with resource routine

653
00:35:26,400 --> 00:35:32,820
and once it will be decrypted so that

654
00:35:30,090 --> 00:35:37,110
file it is like installation

655
00:35:32,820 --> 00:35:40,650
configuration has name of files and then

656
00:35:37,110 --> 00:35:43,500
it reads part of that config file it

657
00:35:40,650 --> 00:35:46,470
will record that very same file Pattie

658
00:35:43,500 --> 00:35:50,310
system encrypted with a key that it has

659
00:35:46,470 --> 00:35:53,970
with take from itself and then a will

660
00:35:50,310 --> 00:35:59,940
record it or it will save it as X X dot

661
00:35:53,970 --> 00:36:03,319
CA B and then the name of the directory

662
00:35:59,940 --> 00:36:10,530
is hid service we will create a hidden

663
00:36:03,320 --> 00:36:13,670
folder and X X will be the date of the

664
00:36:10,530 --> 00:36:15,660
system okay since when the system was

665
00:36:13,670 --> 00:36:18,750
started okay

666
00:36:15,660 --> 00:36:21,690
he will decrypt this section with no

667
00:36:18,750 --> 00:36:25,140
name that section would be decrypted and

668
00:36:21,690 --> 00:36:28,380
it would be written in a disk with a key

669
00:36:25,140 --> 00:36:32,879
that has taken out from the file that

670
00:36:28,380 --> 00:36:38,190
was read before it is a key with 256

671
00:36:32,880 --> 00:36:41,370
bytes so this file it is written in on

672
00:36:38,190 --> 00:36:43,070
the disk so these people have a solution

673
00:36:41,370 --> 00:36:47,279
they set up a number of configurations

674
00:36:43,070 --> 00:36:49,800
so that a batched of field pfizer

675
00:36:47,280 --> 00:36:51,510
doesn't include the same directories

676
00:36:49,800 --> 00:36:52,130
always so that it is more difficult to

677
00:36:51,510 --> 00:36:53,900
find

678
00:36:52,130 --> 00:36:55,700
so the initial part of the payload is

679
00:36:53,900 --> 00:36:59,240
about generating config files and

680
00:36:55,700 --> 00:37:01,759
folders once it will go into persistence

681
00:36:59,240 --> 00:37:04,419
into actual infection infection can be

682
00:37:01,760 --> 00:37:07,760
carried out in two ways we when the

683
00:37:04,420 --> 00:37:09,830
program was run if the user was an admin

684
00:37:07,760 --> 00:37:14,600
okay so you have made it very very easy

685
00:37:09,830 --> 00:37:19,370
for him if you are in Windows 7 X 32

686
00:37:14,600 --> 00:37:22,580
allows you to install drivers if you

687
00:37:19,370 --> 00:37:24,560
install drivers with no signature so the

688
00:37:22,580 --> 00:37:28,400
site is X ok have a remain privileged

689
00:37:24,560 --> 00:37:30,470
good I'm going to take out resource 101

690
00:37:28,400 --> 00:37:34,400
I'm going to code it and that resource

691
00:37:30,470 --> 00:37:38,450
is a citizen writer so it installs such

692
00:37:34,400 --> 00:37:41,030
as service system service and that's it

693
00:37:38,450 --> 00:37:42,350
if if you're an admin but if you're not

694
00:37:41,030 --> 00:37:45,290
and I mean if we do it in a different

695
00:37:42,350 --> 00:37:48,259
way it would take out from resource 101

696
00:37:45,290 --> 00:37:50,120
it would take the driver hit services

697
00:37:48,260 --> 00:37:53,960
then it will look for a mask

698
00:37:50,120 --> 00:37:55,759
ok 8 FS f letters and then when it will

699
00:37:53,960 --> 00:37:58,010
come to the points we will see that

700
00:37:55,760 --> 00:38:00,050
another driver starts that driver will

701
00:37:58,010 --> 00:38:03,260
be marked in the memory will go to its

702
00:38:00,050 --> 00:38:06,290
resource and he will take out a dll that

703
00:38:03,260 --> 00:38:09,440
DLL will be written on the disk and then

704
00:38:06,290 --> 00:38:11,270
he will extract the resource 103 and

705
00:38:09,440 --> 00:38:14,560
they were also writing on the disk and

706
00:38:11,270 --> 00:38:17,420
then it will generate these register key

707
00:38:14,560 --> 00:38:20,840
so it will include the entire length I

708
00:38:17,420 --> 00:38:27,560
have been instructed for it to be in

709
00:38:20,840 --> 00:38:31,340
front equals brand DLL control so if a

710
00:38:27,560 --> 00:38:35,270
says establish that node' to charge

711
00:38:31,340 --> 00:38:38,119
these or to load these payload

712
00:38:35,270 --> 00:38:40,670
if the system is Windows attitude can

713
00:38:38,119 --> 00:38:43,700
use that driver what the action driver

714
00:38:40,670 --> 00:38:45,800
will do all this by the time the system

715
00:38:43,700 --> 00:38:47,868
will be run again the driver would check

716
00:38:45,800 --> 00:38:51,260
out the driver Tariq has inside and then

717
00:38:47,869 --> 00:38:55,010
that second driver will take care in the

718
00:38:51,260 --> 00:38:59,320
log on windows so explora

719
00:38:55,010 --> 00:39:02,180
I will install it but if he doesn't have

720
00:38:59,320 --> 00:39:03,440
the privilege we'll do the same thing

721
00:39:02,180 --> 00:39:05,060
but through Explorer

722
00:39:03,440 --> 00:39:08,599
I'm not going to complicate my life and

723
00:39:05,060 --> 00:39:11,210
I'm going to analyze the second part so

724
00:39:08,599 --> 00:39:13,700
summary creates the config files the

725
00:39:11,210 --> 00:39:17,690
ride persistence takes out the binary

726
00:39:13,700 --> 00:39:20,180
files CRT click DLL or instruct his

727
00:39:17,690 --> 00:39:21,589
service and install it as a service one

728
00:39:20,180 --> 00:39:26,000
of the two things will happen through

729
00:39:21,589 --> 00:39:30,710
that payload let us see what CRT client

730
00:39:26,000 --> 00:39:34,040
does so what a coincidence

731
00:39:30,710 --> 00:39:36,920
it has a VM it's not a problem because

732
00:39:34,040 --> 00:39:40,940
we have our tools so with the minds

733
00:39:36,920 --> 00:39:42,859
about these we just ignore that DLL so

734
00:39:40,940 --> 00:39:45,140
it reconstructs all the virtual

735
00:39:42,859 --> 00:39:48,440
functions I was short actually the demo

736
00:39:45,140 --> 00:39:51,529
it will restore all the bytes so notice

737
00:39:48,440 --> 00:39:54,080
that DLL has lots of code that has been

738
00:39:51,530 --> 00:39:56,960
eliminated and that I have rebuilt when

739
00:39:54,080 --> 00:39:58,880
done once it is rebuilt I can analyze

740
00:39:56,960 --> 00:40:01,460
DLL and I can see that the only

741
00:39:58,880 --> 00:40:06,050
objective is to read from the disk at

742
00:40:01,460 --> 00:40:08,540
the library MS VCR 90 and to inject it

743
00:40:06,050 --> 00:40:12,040
in Explorer and uses the same techniques

744
00:40:08,540 --> 00:40:16,070
which is the Explorer the hooks loader

745
00:40:12,040 --> 00:40:18,710
rancid and acid so it also has an

746
00:40:16,070 --> 00:40:22,040
unsigned hook technique which is quite

747
00:40:18,710 --> 00:40:24,589
typical which is to say eat child nodes

748
00:40:22,040 --> 00:40:27,080
the libraries that uses the pros the

749
00:40:24,589 --> 00:40:29,390
process it uses it maps them in the

750
00:40:27,080 --> 00:40:32,210
memory and then it checks the actual one

751
00:40:29,390 --> 00:40:34,368
for the system and I said okay let us

752
00:40:32,210 --> 00:40:37,040
see if some of them has been purged

753
00:40:34,369 --> 00:40:40,640
so if they're having party

754
00:40:37,040 --> 00:40:42,800
see that it is trying to hook the APS

755
00:40:40,640 --> 00:40:46,160
and it stops working it off against the

756
00:40:42,800 --> 00:40:49,160
calls to APS but mapping the memory disk

757
00:40:46,160 --> 00:40:52,250
and then it does like trampolines

758
00:40:49,160 --> 00:40:55,910
instead of calling the jet version as

759
00:40:52,250 --> 00:40:57,920
mapped in the memory I will call the jet

760
00:40:55,910 --> 00:41:00,799
version of the DLL that I mapped

761
00:40:57,920 --> 00:41:05,780
manually and that will call the actual

762
00:41:00,800 --> 00:41:10,310
address so you will always see in memory

763
00:41:05,780 --> 00:41:13,310
which is not a typical one and then you

764
00:41:10,310 --> 00:41:15,529
will see lots of functions and names

765
00:41:13,310 --> 00:41:18,560
that do not really make any sense to

766
00:41:15,530 --> 00:41:20,600
them and now when I take a look at hit

767
00:41:18,560 --> 00:41:23,540
service and I said well something is

768
00:41:20,600 --> 00:41:29,450
looks odd to eat it's like a driver with

769
00:41:23,540 --> 00:41:32,390
another driver inside a DLL well I have

770
00:41:29,450 --> 00:41:34,669
my tool if for to extract it from

771
00:41:32,390 --> 00:41:39,020
virtual machines notice the Kota has

772
00:41:34,670 --> 00:41:42,590
been rebuilt 18 bytes a 36 bytes not

773
00:41:39,020 --> 00:41:46,910
very lots of code so once that code

774
00:41:42,590 --> 00:41:47,480
these decrypt other drivers in the data

775
00:41:46,910 --> 00:41:49,250
section

776
00:41:47,480 --> 00:41:51,770
loves it in the memory and transit

777
00:41:49,250 --> 00:41:54,140
that's the only thing it does so this

778
00:41:51,770 --> 00:41:55,759
driver is a persistent system let us

779
00:41:54,140 --> 00:41:58,609
take a look at the second driver that

780
00:41:55,760 --> 00:42:00,320
was taken out if we analyze it we see

781
00:41:58,610 --> 00:42:04,220
that there is a section for resources

782
00:42:00,320 --> 00:42:06,920
where we see a big file

783
00:42:04,220 --> 00:42:09,770
it uses VM not from that for us because

784
00:42:06,920 --> 00:42:12,690
we rebuilt it again notice it has

785
00:42:09,770 --> 00:42:19,680
rebuilt several blocks it is a bit not

786
00:42:12,690 --> 00:42:25,160
so this driver will decrypt em as we see

787
00:42:19,680 --> 00:42:30,690
our 97 artists ttcc

788
00:42:25,160 --> 00:42:33,328
it will inject it in wind lagoon so it

789
00:42:30,690 --> 00:42:35,430
will not be necessary for us to run

790
00:42:33,329 --> 00:42:38,940
anything in this driver because the

791
00:42:35,430 --> 00:42:41,399
actual loader knows how to decrypt it

792
00:42:38,940 --> 00:42:44,130
and everything so we will be using the

793
00:42:41,400 --> 00:42:45,930
same method that it uses for decrypting

794
00:42:44,130 --> 00:42:52,260
it and we will obtain it what we will

795
00:42:45,930 --> 00:42:55,828
obtain well MSB see our 90 DLL this DLL

796
00:42:52,260 --> 00:43:00,030
again has been compiled with VM ok we

797
00:42:55,829 --> 00:43:02,880
remove it so we don't see it well this

798
00:43:00,030 --> 00:43:05,579
one didn't have lots of code either but

799
00:43:02,880 --> 00:43:09,510
enough not to be able to analyze it and

800
00:43:05,579 --> 00:43:10,349
now the objective is to decrypt the DLL

801
00:43:09,510 --> 00:43:13,049
of finfisher

802
00:43:10,349 --> 00:43:16,559
for to do the espionage activities for

803
00:43:13,049 --> 00:43:19,170
us so it will give features protection

804
00:43:16,559 --> 00:43:21,510
or secure features so this DLL is an

805
00:43:19,170 --> 00:43:25,470
injector is a loader and it is also a

806
00:43:21,510 --> 00:43:28,410
protector so if we take the DLL front of

807
00:43:25,470 --> 00:43:30,029
efficient we load it directly in theory

808
00:43:28,410 --> 00:43:34,200
will work but there are some things that

809
00:43:30,029 --> 00:43:38,050
we have set aside because of the

810
00:43:34,200 --> 00:43:41,140
specific characteristics of this DLL

811
00:43:38,050 --> 00:43:45,520
this include the final DLL from

812
00:43:41,140 --> 00:43:47,200
finfisher let's take a look at the

813
00:43:45,520 --> 00:43:49,450
projections this is something that I

814
00:43:47,200 --> 00:43:54,850
really liked the first thing after

815
00:43:49,450 --> 00:43:56,890
injecting is intercepting this kill key

816
00:43:54,850 --> 00:43:58,690
I use our exception dispatcher any

817
00:43:56,890 --> 00:44:01,839
exception within the Explorer will be

818
00:43:58,690 --> 00:44:06,070
treated by the implanted by the injector

819
00:44:01,840 --> 00:44:08,050
code the screen pop-up telling you

820
00:44:06,070 --> 00:44:14,280
whatever is happening so this is

821
00:44:08,050 --> 00:44:14,280
intercepted now when it starts loading

822
00:44:16,190 --> 00:44:24,250
the final DLL it resolves it manually so

823
00:44:21,020 --> 00:44:24,250
has to resolve its impulse

824
00:44:26,090 --> 00:44:31,490
it hooks them directly these three api's

825
00:44:28,960 --> 00:44:35,000
during the resolution of official DLL

826
00:44:31,490 --> 00:44:36,979
are intercepted the three api's are

827
00:44:35,000 --> 00:44:41,900
interested in visual protect preset DCW

828
00:44:36,980 --> 00:44:45,980
and lady see in any analysis that you

829
00:44:41,900 --> 00:44:47,810
carry out of course or finish a DLL you

830
00:44:45,980 --> 00:44:49,880
will have to take into account whenever

831
00:44:47,810 --> 00:44:53,960
we may cost of these ABI STIs are not

832
00:44:49,880 --> 00:44:57,860
the original EPS from Windows virtual

833
00:44:53,960 --> 00:45:01,340
protect what it does well you first call

834
00:44:57,860 --> 00:45:03,650
virtual protect we will do a visual

835
00:45:01,340 --> 00:45:05,330
query to different memory addresses it

836
00:45:03,650 --> 00:45:07,850
will find out whether these are

837
00:45:05,330 --> 00:45:10,490
executable only if so if that is the

838
00:45:07,850 --> 00:45:15,290
case you will allow the power of the

839
00:45:10,490 --> 00:45:19,279
permissions to be established hook

840
00:45:15,290 --> 00:45:23,090
delete to Z things are beginning to make

841
00:45:19,280 --> 00:45:25,610
more sense here this hook establishes

842
00:45:23,090 --> 00:45:30,050
other hooks like create red terminate

843
00:45:25,610 --> 00:45:33,550
Fred and exit red so it controls the

844
00:45:30,050 --> 00:45:33,550
creation of threads in the process

845
00:45:35,420 --> 00:45:42,030
as a parameter a code

846
00:45:39,210 --> 00:45:44,430
is passed to this function what does the

847
00:45:42,030 --> 00:45:47,700
function do you call the function do you

848
00:45:44,430 --> 00:45:50,629
pass it the payload it takes the code it

849
00:45:47,700 --> 00:45:50,629
encrypts it

850
00:45:52,490 --> 00:45:56,540
and there will be a location in the

851
00:45:54,710 --> 00:45:59,750
memory memory which you will not be able

852
00:45:56,540 --> 00:46:03,170
to access every time you call the

853
00:45:59,750 --> 00:46:06,050
function he will create the threads and

854
00:46:03,170 --> 00:46:08,570
suspend them it will protect the code by

855
00:46:06,050 --> 00:46:10,460
encrypting it and finally adding

856
00:46:08,570 --> 00:46:13,430
permissions non-accessible permissions

857
00:46:10,460 --> 00:46:17,690
and then able to execute the thread what

858
00:46:13,430 --> 00:46:21,680
will happen well the full mess the

859
00:46:17,690 --> 00:46:26,210
system will say this is a paging ever if

860
00:46:21,680 --> 00:46:29,770
you manage to apply paging with forensic

861
00:46:26,210 --> 00:46:29,770
tools this will be encrypted

862
00:46:32,130 --> 00:46:39,570
why because you are supposed not to see

863
00:46:34,590 --> 00:46:41,190
anything strange with infant Fisher when

864
00:46:39,570 --> 00:46:43,980
we see that call we will know that it is

865
00:46:41,190 --> 00:46:47,250
protecting certain memory areas and then

866
00:46:43,980 --> 00:46:49,080
who was at ECW this is in vogue to the

867
00:46:47,250 --> 00:46:52,490
sanctity the activation release at the

868
00:46:49,080 --> 00:46:55,080
memory that we indicate as a summary

869
00:46:52,490 --> 00:46:58,859
which will protect his food so it

870
00:46:55,080 --> 00:47:00,990
doesn't disturb delete the Z is in

871
00:46:58,860 --> 00:47:03,870
charge of protecting payloads in memory

872
00:47:00,990 --> 00:47:06,410
by encrypting Henry and eliminating the

873
00:47:03,870 --> 00:47:09,810
read permission from the memory page

874
00:47:06,410 --> 00:47:11,810
reset these DCW is in charge of

875
00:47:09,810 --> 00:47:14,820
reverting and releasing memory and

876
00:47:11,810 --> 00:47:16,410
payloads that are protected and can use

877
00:47:14,820 --> 00:47:20,250
an exception dispatcher that's what we

878
00:47:16,410 --> 00:47:22,290
have just seen here we start the

879
00:47:20,250 --> 00:47:27,500
analysis the proper analysis of

880
00:47:22,290 --> 00:47:27,500
finfisher here are flipping out

881
00:47:30,440 --> 00:47:36,200
five previous payloads were passed in

882
00:47:33,319 --> 00:47:38,960
theory this was protected in memory but

883
00:47:36,200 --> 00:47:42,078
if we have obtained the DLL if we have

884
00:47:38,960 --> 00:47:46,940
obtained a DLL we will see this without

885
00:47:42,079 --> 00:47:49,460
any problems so now that we have the DLL

886
00:47:46,940 --> 00:47:51,099
since it was not encrypted I'm not sure

887
00:47:49,460 --> 00:47:56,000
you can read it but this is wonderful

888
00:47:51,099 --> 00:47:58,760
this is what he allows us it recalls

889
00:47:56,000 --> 00:48:02,000
emails it recalls details and the Wi-Fi

890
00:47:58,760 --> 00:48:05,089
connection would be caused the passwords

891
00:48:02,000 --> 00:48:11,119
it's got a key Locker it has controls

892
00:48:05,089 --> 00:48:13,339
for voice over IP Mouse events it

893
00:48:11,119 --> 00:48:15,079
records anything with a webcam it record

894
00:48:13,339 --> 00:48:17,180
anything on the screen if we have a

895
00:48:15,079 --> 00:48:22,730
mobile phone connected it records there

896
00:48:17,180 --> 00:48:25,520
all the events he can even find out

897
00:48:22,730 --> 00:48:29,869
whether the computer has forensics tools

898
00:48:25,520 --> 00:48:32,259
installed change file records in audio

899
00:48:29,869 --> 00:48:35,510
files of the uploaded saying it's ours

900
00:48:32,260 --> 00:48:40,700
they can read data from our skype they

901
00:48:35,510 --> 00:48:43,720
can print I can delete well I wonder is

902
00:48:40,700 --> 00:48:43,720
there anything they cannot do

903
00:48:45,049 --> 00:48:48,489
you have text by anyway

904
00:48:48,579 --> 00:48:53,109
if you dump this when the malware is

905
00:48:51,189 --> 00:48:57,038
active you will see nothing but with the

906
00:48:53,109 --> 00:49:00,249
dll you can get in to it so all of this

907
00:48:57,039 --> 00:49:02,380
code can be read its protection was

908
00:49:00,249 --> 00:49:04,058
applied to the previous stages and onto

909
00:49:02,380 --> 00:49:09,369
the virtual machine but here there's

910
00:49:04,059 --> 00:49:12,910
nothing if we kept the dll the party is

911
00:49:09,369 --> 00:49:15,130
on there are two phases for the DLL the

912
00:49:12,910 --> 00:49:17,410
first one will be the ll main when it is

913
00:49:15,130 --> 00:49:20,229
loaded into memory and the second one is

914
00:49:17,410 --> 00:49:22,269
run dll which is invoked as we saw

915
00:49:20,229 --> 00:49:27,118
before with the corresponding option

916
00:49:22,269 --> 00:49:30,640
the other main this will initiate

917
00:49:27,119 --> 00:49:31,900
reading diverge virtual files if it

918
00:49:30,640 --> 00:49:34,749
accesses payloads

919
00:49:31,900 --> 00:49:39,759
those payloads are not in single files

920
00:49:34,749 --> 00:49:42,848
in unit files I showed you before a file

921
00:49:39,759 --> 00:49:46,209
that was written into a folder and this

922
00:49:42,849 --> 00:49:48,999
is a container for a virtual file system

923
00:49:46,209 --> 00:49:51,759
you know that to access this this will

924
00:49:48,999 --> 00:49:54,488
hook all the api's for disk access

925
00:49:51,759 --> 00:49:56,890
create file the lead file get current

926
00:49:54,489 --> 00:50:00,969
directory copy file well anything you

927
00:49:56,890 --> 00:50:05,170
can imagine and then it will hook create

928
00:50:00,969 --> 00:50:08,499
process W on create remote red hooks to

929
00:50:05,170 --> 00:50:12,339
api's for access to disk are established

930
00:50:08,499 --> 00:50:17,249
in order to use an encrypted virtual

931
00:50:12,339 --> 00:50:22,719
file system open 7f for example if you

932
00:50:17,249 --> 00:50:24,519
try to open the file using Windows you

933
00:50:22,719 --> 00:50:27,309
will not open anything but the system

934
00:50:24,519 --> 00:50:29,890
will check the virtual file system to

935
00:50:27,309 --> 00:50:31,779
try and find out a 7f file under cryptid

936
00:50:29,890 --> 00:50:34,868
the rest of the folks is for the

937
00:50:31,779 --> 00:50:40,170
protection system brought about by M s

938
00:50:34,869 --> 00:50:45,690
VZ r 19 when you execute

939
00:50:40,170 --> 00:50:48,430
will create process usually make a goal

940
00:50:45,690 --> 00:50:52,390
what the who does this create the

941
00:50:48,430 --> 00:50:55,839
process but suspended so that you can

942
00:50:52,390 --> 00:50:59,670
apply their protections that you need in

943
00:50:55,840 --> 00:50:59,670
order for it not to be located in memory

944
00:51:00,090 --> 00:51:05,190
that's that's how the system works

945
00:51:02,620 --> 00:51:09,190
you may indicate the parameter and

946
00:51:05,190 --> 00:51:13,960
everything will be executed suspend in a

947
00:51:09,190 --> 00:51:16,630
suspended fashion second stage bear in

948
00:51:13,960 --> 00:51:19,930
mind that all these api is within next

949
00:51:16,630 --> 00:51:23,890
for adult XE it lives within the

950
00:51:19,930 --> 00:51:26,470
Explorer so it will open up all of its

951
00:51:23,890 --> 00:51:29,830
components resource one-zero-one does a

952
00:51:26,470 --> 00:51:32,709
communications proxy which will be

953
00:51:29,830 --> 00:51:34,720
injected into asteroid attack cor

954
00:51:32,710 --> 00:51:38,440
sheltered X a Y in these applications

955
00:51:34,720 --> 00:51:40,799
because they usually have access to the

956
00:51:38,440 --> 00:51:40,800
Internet

957
00:51:42,820 --> 00:51:47,740
artists shell is for remote control for

958
00:51:45,430 --> 00:51:52,000
Windows machines Windows Mac Windows

959
00:51:47,740 --> 00:51:55,000
boxes so it's either Explorer or our

960
00:51:52,000 --> 00:51:56,710
shell nothing suspicious because it's an

961
00:51:55,000 --> 00:51:58,720
internet browser press in the internet

962
00:51:56,710 --> 00:52:01,570
so it makes it makes sense and then

963
00:51:58,720 --> 00:52:04,120
there's another payload race 103 in this

964
00:52:01,570 --> 00:52:09,670
infection this is called Network Mac map

965
00:52:04,120 --> 00:52:11,020
area AR Jai injected into processes this

966
00:52:09,670 --> 00:52:13,900
is like a li a keylogger

967
00:52:11,020 --> 00:52:16,120
a global key logger finfisher includes

968
00:52:13,900 --> 00:52:18,880
initial payloads but then it can

969
00:52:16,120 --> 00:52:21,130
download download many more payloads to

970
00:52:18,880 --> 00:52:24,250
include all the functionalities that we

971
00:52:21,130 --> 00:52:25,990
saw before with screen songs recording

972
00:52:24,250 --> 00:52:27,370
conversations and so on and so forth and

973
00:52:25,990 --> 00:52:31,209
then the file that i mentioned before

974
00:52:27,370 --> 00:52:33,490
setup cab where we have all the files

975
00:52:31,210 --> 00:52:36,700
for all the payloads if in the next

976
00:52:33,490 --> 00:52:39,270
stage the tool wants to take a

977
00:52:36,700 --> 00:52:39,270
screenshot

978
00:52:41,240 --> 00:52:46,549
it will download it and instead of

979
00:52:44,150 --> 00:52:48,200
saving it to a disk to the disk it will

980
00:52:46,550 --> 00:52:51,260
include it into its virtual file system

981
00:52:48,200 --> 00:52:55,910
it will be encrypted so you might open

982
00:52:51,260 --> 00:52:58,369
it and you would still see nothing how

983
00:52:55,910 --> 00:53:00,319
about the virtual file system well we

984
00:52:58,369 --> 00:53:02,420
have the payloads that will be injected

985
00:53:00,320 --> 00:53:05,330
into specific processes we have the

986
00:53:02,420 --> 00:53:07,400
configurations for the malware itself we

987
00:53:05,330 --> 00:53:10,310
have the C and C for downloads and the

988
00:53:07,400 --> 00:53:15,530
processes to be intercepted with infant

989
00:53:10,310 --> 00:53:18,710
Fisher itself dumping set up cap is

990
00:53:15,530 --> 00:53:21,950
relatively easy we can read it we can

991
00:53:18,710 --> 00:53:27,850
see it decrypted because the DLL does

992
00:53:21,950 --> 00:53:27,850
everything I am lost

993
00:53:28,760 --> 00:53:33,980
the routine to access this virtual file

994
00:53:31,490 --> 00:53:36,140
this is very simple we have the CRC we

995
00:53:33,980 --> 00:53:40,280
have the size and then we have a field

996
00:53:36,140 --> 00:53:45,560
indicating the size of the file and the

997
00:53:40,280 --> 00:53:49,820
start of the next file so by using this

998
00:53:45,560 --> 00:53:54,170
we see that we have this file fe0

999
00:53:49,820 --> 00:53:59,600
i know these things files with the

1000
00:53:54,170 --> 00:54:02,000
suffix 0 our configuration files for IP

1001
00:53:59,600 --> 00:54:05,600
addresses environment variables whatever

1002
00:54:02,000 --> 00:54:09,470
and files for suffix 2 our executable

1003
00:54:05,600 --> 00:54:12,799
payloads dll's which have their their

1004
00:54:09,470 --> 00:54:16,250
corresponding via vm inside no problem

1005
00:54:12,800 --> 00:54:18,260
because we can extract this let's take a

1006
00:54:16,250 --> 00:54:23,420
look at the configuration file because

1007
00:54:18,260 --> 00:54:29,090
it's quite interesting this is a fault

1008
00:54:23,420 --> 00:54:31,630
as it is which has been compiled Jason

1009
00:54:29,090 --> 00:54:31,630
compiled

1010
00:54:32,980 --> 00:54:40,150
so we've got a section called TA and

1011
00:54:35,980 --> 00:54:42,430
let's call em IL 105 oh where they have

1012
00:54:40,150 --> 00:54:44,920
the service they could need to connect

1013
00:54:42,430 --> 00:54:48,250
you these are the current servers that

1014
00:54:44,920 --> 00:54:51,250
were live at that time the malware is

1015
00:54:48,250 --> 00:54:54,520
connecting to and then it's got a

1016
00:54:51,250 --> 00:54:56,140
section with additional services let me

1017
00:54:54,520 --> 00:54:59,730
just go back to something because I

1018
00:54:56,140 --> 00:54:59,730
wanted to show you right

1019
00:55:11,500 --> 00:55:18,880
can you see they're perfect

1020
00:55:15,470 --> 00:55:18,879
yeah we have

1021
00:55:20,270 --> 00:55:27,290
the CS easily it will be connecting and

1022
00:55:23,360 --> 00:55:32,020
the princesses to be monitored all of

1023
00:55:27,290 --> 00:55:32,020
these task manager windows task manager

1024
00:55:32,800 --> 00:55:40,420
inside well you name it this monitor

1025
00:55:36,620 --> 00:55:40,420
blah blah blah blah

1026
00:55:44,690 --> 00:55:50,440
how about sniffer well let's control

1027
00:55:47,090 --> 00:55:55,100
sniffers while Shack network analyzer

1028
00:55:50,440 --> 00:55:59,390
whatever if you apply for insects to

1029
00:55:55,100 --> 00:56:01,430
this computer a payload will be injected

1030
00:55:59,390 --> 00:56:02,930
into wet shark feed you you will not be

1031
00:56:01,430 --> 00:56:06,700
able to see the traffic that's how it

1032
00:56:02,930 --> 00:56:11,120
works if you use the buggers same story

1033
00:56:06,700 --> 00:56:11,990
interactive disassembler windbg brasses

1034
00:56:11,120 --> 00:56:13,850
okay

1035
00:56:11,990 --> 00:56:15,470
let's plug into there let's get all that

1036
00:56:13,850 --> 00:56:17,180
credentials try for smell so they're

1037
00:56:15,470 --> 00:56:20,299
Firefox I Explorer windows Internet

1038
00:56:17,180 --> 00:56:23,540
Explorer whatever messenger applications

1039
00:56:20,300 --> 00:56:26,660
well let's get all of them ICQ from last

1040
00:56:23,540 --> 00:56:30,920
century Skype why patron Jo messenger

1041
00:56:26,660 --> 00:56:34,509
perilous trillion Google Talk mail

1042
00:56:30,920 --> 00:56:34,510
clients all of them

1043
00:56:37,630 --> 00:56:41,240
people know exchanging vials well let's

1044
00:56:40,310 --> 00:56:45,799
go for all of them

1045
00:56:41,240 --> 00:56:49,100
BitTorrent utorrent mutant many people

1046
00:56:45,800 --> 00:56:52,940
use voice over IP services well let's go

1047
00:56:49,100 --> 00:56:54,920
into them eggs light mercury mercury as

1048
00:56:52,940 --> 00:56:58,360
you see they control absolutely

1049
00:56:54,920 --> 00:57:01,400
everything on in the infected machine

1050
00:56:58,360 --> 00:57:03,820
okay let me go back to the basic

1051
00:57:01,400 --> 00:57:03,820
structure

1052
00:57:10,310 --> 00:57:19,730
okay I'm reaching the end how much time

1053
00:57:16,750 --> 00:57:24,590
well I will not show you more payloads

1054
00:57:19,730 --> 00:57:26,690
because it would be too much I just

1055
00:57:24,590 --> 00:57:29,090
wanted to show you how they have done

1056
00:57:26,690 --> 00:57:30,440
their best to protect this and yet we

1057
00:57:29,090 --> 00:57:33,950
have been able to extract the

1058
00:57:30,440 --> 00:57:37,190
information what did you look at when

1059
00:57:33,950 --> 00:57:39,410
affecting a 64-byte system things are

1060
00:57:37,190 --> 00:57:43,270
almost identical the virtual machine is

1061
00:57:39,410 --> 00:57:47,470
different for 64 bytes obviously because

1062
00:57:43,270 --> 00:57:50,509
instructions are different however I

1063
00:57:47,470 --> 00:57:55,939
would say that whoever implemented this

1064
00:57:50,510 --> 00:57:58,250
VM leverage whatever was there before

1065
00:57:55,940 --> 00:58:02,230
and it's not the same it's not the same

1066
00:57:58,250 --> 00:58:02,230
person this 64 byte machine

1067
00:58:04,630 --> 00:58:09,010
moving all the stretches trees well it

1068
00:58:07,210 --> 00:58:13,030
doesn't say anything about that this

1069
00:58:09,010 --> 00:58:15,250
portion shot that's it it seems that

1070
00:58:13,030 --> 00:58:17,650
they had an intern in place and the guy

1071
00:58:15,250 --> 00:58:21,300
user used another methodologies for

1072
00:58:17,650 --> 00:58:25,240
implementation into 64-byte systems

1073
00:58:21,300 --> 00:58:28,710
adapting the beetle plus told to a

1074
00:58:25,240 --> 00:58:28,709
64-byte environment

1075
00:58:34,619 --> 00:58:40,650
so it was relatively easy getting all

1076
00:58:37,200 --> 00:58:42,960
that code we've seen how these guys that

1077
00:58:40,650 --> 00:58:46,440
over a gamma have have implemented a lot

1078
00:58:42,960 --> 00:58:49,369
of defensive mechanisms to hide the

1079
00:58:46,440 --> 00:58:49,369
final vll

1080
00:58:52,380 --> 00:58:56,589
unfortunately the his protective

1081
00:58:54,369 --> 00:58:57,849
measures have not been enough it's been

1082
00:58:56,589 --> 00:58:59,440
very well implemented the visual

1083
00:58:57,849 --> 00:59:00,970
machines has very well implemented but

1084
00:58:59,440 --> 00:59:04,510
in the scale from 1 to 10 I would give

1085
00:59:00,970 --> 00:59:09,240
it a 4 there's lots of things we've been

1086
00:59:04,510 --> 00:59:11,470
able to see but looking at that of this

1087
00:59:09,240 --> 00:59:17,348
so this limit there's quite a few

1088
00:59:11,470 --> 00:59:19,990
limitations bearing in mind the of

1089
00:59:17,349 --> 00:59:22,210
course as I have included this virtual

1090
00:59:19,990 --> 00:59:24,700
machine is something that could be

1091
00:59:22,210 --> 00:59:26,619
analyzed by any of us in fact I would

1092
00:59:24,700 --> 00:59:28,390
encourage you to take a look at the

1093
00:59:26,619 --> 00:59:32,589
virtual machine following Leela this

1094
00:59:28,390 --> 00:59:35,770
methodology or any other methodology for

1095
00:59:32,589 --> 00:59:39,369
that matter and what I now says this

1096
00:59:35,770 --> 00:59:40,990
wouldn't hosting well these guys they

1097
00:59:39,369 --> 00:59:44,470
took for granted are there security

1098
00:59:40,990 --> 00:59:48,339
measures we're more than enough but they

1099
00:59:44,470 --> 00:59:51,009
when they initiate the system they have

1100
00:59:48,339 --> 00:59:53,070
the wooden horse I will say I'm a Trojan

1101
00:59:51,010 --> 00:59:55,780
horse making it very clear what I am

1102
00:59:53,070 --> 00:59:57,640
they said I have all the protection in

1103
00:59:55,780 --> 00:59:59,800
the world no one will look into it and

1104
00:59:57,640 --> 01:00:03,580
then I have a sense of humor so how

1105
00:59:59,800 --> 01:00:06,030
about using the wooden horse well that's

1106
01:00:03,580 --> 01:00:06,029
what I found

1107
01:00:06,900 --> 01:00:10,560
and that would really be the end of my

1108
01:00:08,700 --> 01:00:14,790
presentation I hope you're not dozing

1109
01:00:10,560 --> 01:00:17,509
off let me show you two demos let me

1110
01:00:14,790 --> 01:00:17,509
show you how it works

1111
01:01:15,830 --> 01:01:27,380
perfect here we have this file that you

1112
01:01:19,130 --> 01:01:30,380
saw at the beginning just a binary and

1113
01:01:27,380 --> 01:01:32,000
this sophisticated completely here you

1114
01:01:30,380 --> 01:01:37,070
have the rebuilds that's given by the

1115
01:01:32,000 --> 01:01:40,600
tools Pete all classes might all I said

1116
01:01:37,070 --> 01:01:40,600
input file other file

1117
01:01:43,870 --> 01:01:50,160
so I brand this and I do a request

1118
01:01:52,280 --> 01:01:58,880
I execute it it's cleaning the code it's

1119
01:01:56,570 --> 01:02:01,190
getting rid of all that rubbish I'll

1120
01:01:58,880 --> 01:02:08,120
explain it step by step okay please just

1121
01:02:01,190 --> 01:02:13,580
finish as you see has to clean 121 and

1122
01:02:08,120 --> 01:02:14,029
129 routines it's still working there we

1123
01:02:13,580 --> 01:02:16,450
go

1124
01:02:14,030 --> 01:02:16,450
we're done

1125
01:02:18,450 --> 01:02:24,348
I don't know how long it took them to

1126
01:02:20,280 --> 01:02:24,349
build this virtual machine but

1127
01:02:24,589 --> 01:02:30,109
deconstructing it took me a very short

1128
01:02:27,869 --> 01:02:30,109
time

1129
01:02:35,400 --> 01:02:42,450
the first thing is to identify Lyoko the

1130
01:02:38,849 --> 01:02:44,150
opcodes I have a txt file we'll have all

1131
01:02:42,450 --> 01:02:47,399
that definition for all the your codes

1132
01:02:44,150 --> 01:02:49,049
up code zero points of this address of

1133
01:02:47,400 --> 01:02:51,539
course zero one points of this address

1134
01:02:49,049 --> 01:02:55,049
and so on and so forth and then I

1135
01:02:51,539 --> 01:02:57,390
identify the basis for the virtual

1136
01:02:55,049 --> 01:03:00,559
machine whatever it is ups in the key

1137
01:02:57,390 --> 01:03:00,558
the P code

1138
01:03:04,200 --> 01:03:09,379
I apply the cleaning process for the

1139
01:03:06,990 --> 01:03:09,379
jumps

1140
01:03:15,130 --> 01:03:19,050
this would just clean the code

1141
01:03:23,880 --> 01:03:27,359
and then in each compilation of the

1142
01:03:26,069 --> 01:03:29,519
programs where there was your first

1143
01:03:27,359 --> 01:03:32,220
state this is the up code table they

1144
01:03:29,519 --> 01:03:35,848
want to move here the uploads are the

1145
01:03:32,220 --> 01:03:37,799
same the up code in the table is 0 which

1146
01:03:35,849 --> 01:03:42,210
is the same in my dictionary okay

1147
01:03:37,799 --> 01:03:44,130
they're all the same numbers this is

1148
01:03:42,210 --> 01:03:50,390
what I use for the patterns and then

1149
01:03:44,130 --> 01:03:50,390
finally finally

1150
01:03:54,680 --> 01:04:00,740
what I do is define in the process

1151
01:03:56,870 --> 01:04:02,299
reconstruct the cold apply locations and

1152
01:04:00,740 --> 01:04:06,160
that word we should return in binary

1153
01:04:02,300 --> 01:04:06,160
with six which is executable

1154
01:04:08,020 --> 01:04:13,150
this is what this was at the beginning

1155
01:04:09,670 --> 01:04:18,150
liqueur now I've called the code that

1156
01:04:13,150 --> 01:04:21,670
has been reconstructed okay little else

1157
01:04:18,150 --> 01:04:25,470
I'm going to reconstruct several other

1158
01:04:21,670 --> 01:04:25,470
files this is the same

1159
01:04:38,660 --> 01:04:45,940
okay yes this one I'll call it driver

1160
01:04:41,420 --> 01:04:45,940
and route dot rebuild

1161
01:04:51,520 --> 01:04:55,320
I'm rebuilding into code

1162
01:05:02,550 --> 01:05:07,770
so up code zero now corresponds to

1163
01:05:04,860 --> 01:05:10,410
number five in my table number one

1164
01:05:07,770 --> 01:05:13,759
customer number three the table I've got

1165
01:05:10,410 --> 01:05:13,759
here let me show you

1166
01:05:31,299 --> 01:05:36,819
I only need my Asian is this and then a

1167
01:05:34,419 --> 01:05:41,558
final up consists where I mentioned

1168
01:05:36,819 --> 01:05:45,609
before this is simply right it's just a

1169
01:05:41,559 --> 01:05:47,109
dictionary how we would call the old

1170
01:05:45,609 --> 01:05:50,909
code I'm sorry you cannot see everything

1171
01:05:47,109 --> 01:05:50,909
let me just scroll up

1172
01:05:52,369 --> 01:06:00,519
how could if has this representation how

1173
01:05:57,859 --> 01:06:03,739
could 5 was what you see below

1174
01:06:00,519 --> 01:06:06,218
disassembling I'm comparing character

1175
01:06:03,739 --> 01:06:06,219
that I'd

1176
01:06:08,079 --> 01:06:15,819
two little things - additional things

1177
01:06:10,359 --> 01:06:18,700
not irrelevant this is what we have

1178
01:06:15,819 --> 01:06:22,869
rebuilt now we have a file that can be

1179
01:06:18,700 --> 01:06:26,950
executed don't take my word for any

1180
01:06:22,869 --> 01:06:29,519
operator Leslie I'll execute it now and

1181
01:06:26,950 --> 01:06:33,098
now get hold of the first file that was

1182
01:06:29,519 --> 01:06:34,209
decoded and execute the dropper as it

1183
01:06:33,099 --> 01:06:35,680
lands on the Internet

1184
01:06:34,209 --> 01:06:37,690
and we will see that there is no

1185
01:06:35,680 --> 01:06:42,029
infection because it will detect my

1186
01:06:37,690 --> 01:06:42,029
virtual machine next

1187
01:06:44,530 --> 01:06:49,930
I will use the one that have rebuilt

1188
01:06:46,890 --> 01:06:52,720
I'll patch the biter detecting the

1189
01:06:49,930 --> 01:06:58,690
virtual machine and then we'll execute

1190
01:06:52,720 --> 01:07:03,370
it to show you what it does exactly this

1191
01:06:58,690 --> 01:07:06,660
will take a while my hard drive is not

1192
01:07:03,370 --> 01:07:06,660
the fastest in the world anyway

1193
01:07:10,670 --> 01:07:14,510
this is a user mode

1194
01:07:23,830 --> 01:07:30,120
is a local mode of high service folder

1195
01:07:27,100 --> 01:07:30,120
I'll copy here

1196
01:07:36,539 --> 01:07:40,710
this is the original bug I was

1197
01:07:39,279 --> 01:07:47,200
downloaded from the internet

1198
01:07:40,710 --> 01:07:50,339
uncle I'll call it bug don't XE and I'll

1199
01:07:47,200 --> 01:07:50,339
execute it right away

1200
01:07:55,320 --> 01:07:59,970
so why is he doing nothing because it's

1201
01:07:57,900 --> 01:08:01,950
the detected official machine why is it

1202
01:07:59,970 --> 01:08:04,069
taking so long well because the solution

1203
01:08:01,950 --> 01:08:07,200
machine there it's slowing it down

1204
01:08:04,070 --> 01:08:08,880
you see the difference there's no file

1205
01:08:07,200 --> 01:08:09,319
created here nothing has been created

1206
01:08:08,880 --> 01:08:13,650
here

1207
01:08:09,320 --> 01:08:14,310
I'll take the rebuild part this has been

1208
01:08:13,650 --> 01:08:17,839
patched

1209
01:08:14,310 --> 01:08:20,640
just one bite we'll compare this file

1210
01:08:17,839 --> 01:08:23,990
with the one we have just rebuilt called

1211
01:08:20,640 --> 01:08:23,990
routed okay

1212
01:08:38,040 --> 01:08:48,450
so Johnson I changed last kid to find

1213
01:08:41,189 --> 01:08:50,969
differences here we are comparing the

1214
01:08:48,450 --> 01:08:53,630
one we have power touched with the one I

1215
01:08:50,970 --> 01:08:53,630
have just rebuilt

1216
01:08:57,309 --> 01:09:01,500
so we'll do this we'll execute this

1217
01:09:13,540 --> 01:09:16,569
ctrl-c ctrl-v

1218
01:09:21,908 --> 01:09:29,858
wait'll you taste it okay that's perfect

1219
01:09:26,560 --> 01:09:32,130
I'll go into a desktop that doesn't make

1220
01:09:29,859 --> 01:09:32,130
a difference

1221
01:09:52,630 --> 01:09:56,250
and this one will execute

1222
01:09:57,150 --> 01:10:04,299
delete it no longer there if we go to

1223
01:10:01,180 --> 01:10:06,820
this file to this folder here we see

1224
01:10:04,300 --> 01:10:07,900
this directory with all the files that I

1225
01:10:06,820 --> 01:10:11,380
have mentioned throughout my

1226
01:10:07,900 --> 01:10:13,809
presentation it's very visual for the

1227
01:10:11,380 --> 01:10:14,290
system that they set up on everything

1228
01:10:13,810 --> 01:10:16,750
else

1229
01:10:14,290 --> 01:10:21,190
this machine is now compromised and is

1230
01:10:16,750 --> 01:10:22,840
trying to connect to those servers to

1231
01:10:21,190 --> 01:10:24,610
try and tell them though we are really

1232
01:10:22,840 --> 01:10:28,500
cool this is everything I wanted to show

1233
01:10:24,610 --> 01:10:28,500
you I hope you have enjoyed yourselves I

1234
01:10:32,550 --> 01:10:41,290
love you number Ferrara I'm flipping out

1235
01:10:37,650 --> 01:10:43,750
any questions there's a question up

1236
01:10:41,290 --> 01:10:47,200
there oh sorry I didn't say anything

1237
01:10:43,750 --> 01:10:50,050
mark wanted to say something oh by the

1238
01:10:47,200 --> 01:10:53,730
way it was Margaret that taught me about

1239
01:10:50,050 --> 01:10:53,730
this I learned everything from him

1240
01:10:55,510 --> 01:11:02,040
I will man this was so impressive really

1241
01:11:04,809 --> 01:11:11,010
if you had told us lies we would have

1242
01:11:07,929 --> 01:11:13,300
believed you anyway this is so stunning

1243
01:11:11,010 --> 01:11:15,670
anyway you mentioned this before but

1244
01:11:13,300 --> 01:11:17,469
after questions compared to what a

1245
01:11:15,670 --> 01:11:19,210
virtual machine sound like that would

1246
01:11:17,469 --> 01:11:24,010
like the one used by keeps another

1247
01:11:19,210 --> 01:11:25,869
Marber types this is as complex as the

1248
01:11:24,010 --> 01:11:30,909
other ones King some never looked into

1249
01:11:25,869 --> 01:11:38,339
it with this virtual machine is a

1250
01:11:30,909 --> 01:11:38,339
virtual machine for children I mean it

1251
01:11:41,310 --> 01:11:46,380
I said before Valley fog was a challenge

1252
01:11:44,310 --> 01:11:49,350
I we did for a city F that virtual

1253
01:11:46,380 --> 01:11:50,700
machines more encodings and more

1254
01:11:49,350 --> 01:11:54,900
instructions than the world would just

1255
01:11:50,700 --> 01:11:57,599
seen and that was for a CDF someone who

1256
01:11:54,900 --> 01:11:59,519
is getting paid a huge salary I don't

1257
01:11:57,600 --> 01:12:02,280
know how the price with this bargain

1258
01:11:59,520 --> 01:12:04,740
from from the Gunma guys I'm sure it's a

1259
01:12:02,280 --> 01:12:08,580
six-figure amount I can't understand why

1260
01:12:04,740 --> 01:12:11,880
it's so simplistic but the second

1261
01:12:08,580 --> 01:12:15,140
question would be do you think the

1262
01:12:11,880 --> 01:12:17,960
effort in creating a virtual machine

1263
01:12:15,140 --> 01:12:21,360
like the one they used for finfisher

1264
01:12:17,960 --> 01:12:23,970
pays off compared to other protection

1265
01:12:21,360 --> 01:12:28,259
methodologies for example with a packet

1266
01:12:23,970 --> 01:12:30,270
or other things yes no doubt even saying

1267
01:12:28,260 --> 01:12:33,780
that this is a virtual machine for

1268
01:12:30,270 --> 01:12:38,130
children any solutions for system

1269
01:12:33,780 --> 01:12:39,630
monitoring any emulator which tries to

1270
01:12:38,130 --> 01:12:45,990
emulate the code will not be able to

1271
01:12:39,630 --> 01:12:49,800
emulate that this is really a very well

1272
01:12:45,990 --> 01:12:51,849
hidden a limited into the depths of the

1273
01:12:49,800 --> 01:12:54,699
system

1274
01:12:51,849 --> 01:12:56,739
it is very well hidden if you recompile

1275
01:12:54,699 --> 01:12:59,530
the binary it cannot be captured by

1276
01:12:56,739 --> 01:13:06,669
anything unless whoever he's trying to

1277
01:12:59,530 --> 01:13:08,860
get to it interprets the VM properly I'm

1278
01:13:06,670 --> 01:13:12,369
sure there lots of people here have got

1279
01:13:08,860 --> 01:13:16,179
offers from to do black ops in exchange

1280
01:13:12,369 --> 01:13:18,509
for a lot of money there's a question at

1281
01:13:16,179 --> 01:13:18,510
the top

1282
01:13:28,090 --> 01:13:30,690
hi

1283
01:13:30,800 --> 01:13:34,990
I work in system production

1284
01:13:36,760 --> 01:13:47,350
so my question is with the system from

1285
01:13:42,580 --> 01:13:49,450
sysinternals there is tracing the

1286
01:13:47,350 --> 01:13:54,239
opening of a file the loading of an

1287
01:13:49,450 --> 01:13:54,239
image for example while loading images

1288
01:13:56,280 --> 01:14:00,440
we will

1289
01:13:58,340 --> 01:14:01,790
verify that there is a sector so the

1290
01:14:00,440 --> 01:14:03,410
system will verify that there's a

1291
01:14:01,790 --> 01:14:08,269
signature from Microsoft with is

1292
01:14:03,410 --> 01:14:10,510
detected in the CMC VR whatever now you

1293
01:14:08,270 --> 01:14:12,980
won't detect it let me tell you why

1294
01:14:10,510 --> 01:14:16,250
because these are injections that are

1295
01:14:12,980 --> 01:14:18,519
done manually there's not there's no

1296
01:14:16,250 --> 01:14:24,010
load library okay

1297
01:14:18,520 --> 01:14:24,010
you could detect it if you apply rules

1298
01:14:24,970 --> 01:14:30,470
when the signing memory to the process

1299
01:14:27,620 --> 01:14:33,680
there you would see it but you would not

1300
01:14:30,470 --> 01:14:38,090
see the load of a DLL because there's no

1301
01:14:33,680 --> 01:14:41,120
such load these tools map the memory

1302
01:14:38,090 --> 01:14:43,190
into the process if you did a hook well

1303
01:14:41,120 --> 01:14:45,740
he investigated the API of the open

1304
01:14:43,190 --> 01:14:49,490
process there you would see how things

1305
01:14:45,740 --> 01:14:53,420
are being written but you wouldn't see a

1306
01:14:49,490 --> 01:14:57,139
library being loaded so you need to

1307
01:14:53,420 --> 01:14:59,440
activate the trace you need to activate

1308
01:14:57,140 --> 01:14:59,440
a trace

1309
01:14:59,880 --> 01:15:04,460
creating rumors France and so on and so

1310
01:15:02,340 --> 01:15:07,199
forth

1311
01:15:04,460 --> 01:15:08,940
writing memory for certain processes

1312
01:15:07,199 --> 01:15:14,070
that is important to detect this type of

1313
01:15:08,940 --> 01:15:17,610
things well it made me a little bit

1314
01:15:14,070 --> 01:15:20,969
nervous because we see some strange

1315
01:15:17,610 --> 01:15:25,230
alerts in certainly certain computers of

1316
01:15:20,969 --> 01:15:29,480
unsign loads he may be here you wouldn't

1317
01:15:25,230 --> 01:15:32,370
see loading events for unsigned elements

1318
01:15:29,480 --> 01:15:34,940
because of the way it works you wouldn't

1319
01:15:32,370 --> 01:15:34,940
see this event

1320
01:15:40,070 --> 01:15:46,150
have you investigated the entry point

1321
01:15:43,240 --> 01:15:51,349
how does it get into the memory directly

1322
01:15:46,150 --> 01:15:55,759
as I said that paper the entry point is

1323
01:15:51,350 --> 01:15:58,900
a zero-day let me think about it I can't

1324
01:15:55,760 --> 01:16:02,060
remember right now a zero-day

1325
01:15:58,900 --> 01:16:04,759
something to do with the browser they

1326
01:16:02,060 --> 01:16:07,490
execute the the main excel file and it

1327
01:16:04,760 --> 01:16:10,090
does everything else last question

1328
01:16:07,490 --> 01:16:10,090
before lunch

1329
01:16:15,959 --> 01:16:20,030
hello this is really impressive

1330
01:16:20,130 --> 01:16:25,199
I have a quite a doubt as I understand

1331
01:16:23,310 --> 01:16:27,900
it this type of companies when selling

1332
01:16:25,199 --> 01:16:30,210
colors to their customers if a customer

1333
01:16:27,900 --> 01:16:36,259
makes a mistake and attacks the wrong

1334
01:16:30,210 --> 01:16:36,260
person that malice sample

1335
01:16:39,320 --> 01:16:44,039
should be taken into account for other

1336
01:16:41,820 --> 01:16:47,070
customers using the same product that's

1337
01:16:44,039 --> 01:16:49,679
a common my question is in using the

1338
01:16:47,070 --> 01:16:54,179
social machine have you found any other

1339
01:16:49,679 --> 01:16:59,760
samples with the Opie Opie codes have

1340
01:16:54,179 --> 01:17:02,219
been changed in a different way so that

1341
01:16:59,760 --> 01:17:03,689
a mistake made by one customer you know

1342
01:17:02,219 --> 01:17:06,150
is not reproduced by other customers

1343
01:17:03,689 --> 01:17:08,760
whether this visual machine was created

1344
01:17:06,150 --> 01:17:09,539
in such a way that in each compilation

1345
01:17:08,760 --> 01:17:11,400
of finfisher

1346
01:17:09,539 --> 01:17:13,559
for each customer the result is

1347
01:17:11,400 --> 01:17:16,320
completely different from what you have

1348
01:17:13,559 --> 01:17:18,929
in other customers so this has been

1349
01:17:16,320 --> 01:17:21,869
leeched and you know what the file

1350
01:17:18,929 --> 01:17:26,429
structure is and the order of your codes

1351
01:17:21,869 --> 01:17:28,619
that were very easy to locate in fact

1352
01:17:26,429 --> 01:17:30,869
the reason a customer has mentioned that

1353
01:17:28,619 --> 01:17:34,259
but each compilation for each customer

1354
01:17:30,869 --> 01:17:37,139
has been customized it uses the same VM

1355
01:17:34,260 --> 01:17:39,929
of course are always the same but there

1356
01:17:37,139 --> 01:17:42,920
is every ordering of the table ok and

1357
01:17:39,929 --> 01:17:46,699
then because there is this application

1358
01:17:42,920 --> 01:17:46,699
branch of the station

1359
01:17:50,680 --> 01:17:54,300
each analysis system

1360
01:17:54,879 --> 01:18:00,849
we'll have difficulties who are

1361
01:17:56,619 --> 01:18:05,219
analyzing similar samples in that sense

1362
01:18:00,849 --> 01:18:07,749
they have made an effort generating

1363
01:18:05,219 --> 01:18:10,479
customized implementations for each

1364
01:18:07,749 --> 01:18:16,148
customer if you compare two customers

1365
01:18:10,479 --> 01:18:18,939
with each other you will need if in fair

1366
01:18:16,149 --> 01:18:20,679
is the same VM same code but you will

1367
01:18:18,939 --> 01:18:26,169
never but you will need to get all that

1368
01:18:20,679 --> 01:18:28,859
told so they do pay attention and that's

1369
01:18:26,169 --> 01:18:32,409
why that VM has been designed that way

1370
01:18:28,859 --> 01:18:34,269
that everything will be hidden for a

1371
01:18:32,409 --> 01:18:36,848
long time that's the main purpose of

1372
01:18:34,269 --> 01:18:39,749
this tool very well thank you so much

1373
01:18:36,849 --> 01:18:39,749
have a spectacular

1374
01:18:39,850 --> 01:18:45,469
[Applause]

