1
00:00:00,030 --> 00:00:12,928
but continue on was okay so let's

2
00:00:02,159 --> 00:00:16,230
perform we have P that is trained be 64

3
00:00:12,929 --> 00:00:18,750
if we decode it with a decoder we see

4
00:00:16,230 --> 00:00:23,910
that the header if we make a file it

5
00:00:18,750 --> 00:00:28,349
says that it could be a ting image but

6
00:00:23,910 --> 00:00:30,920
if we see any editor that we can talk to

7
00:00:28,349 --> 00:00:35,130
you and we can open it we see nothing so

8
00:00:30,920 --> 00:00:36,870
we leave it aside and we'll see whether

9
00:00:35,130 --> 00:00:38,910
we can do anything with this and we

10
00:00:36,870 --> 00:00:42,149
follow this file that has been written

11
00:00:38,910 --> 00:00:45,000
and it seems that it has more data peers

12
00:00:42,149 --> 00:00:49,039
one is the extension of power solar

13
00:00:45,000 --> 00:00:53,370
power so files and what we can see here

14
00:00:49,039 --> 00:00:54,809
it's an Power Cell that is in one line

15
00:00:53,370 --> 00:00:59,699
and at the beginning we see a

16
00:00:54,809 --> 00:01:02,608
combination of characters if we if we

17
00:00:59,699 --> 00:01:08,220
solve just the ID 1 and 13 we see that

18
00:01:02,609 --> 00:01:10,320
they are I so it's ie X so it's going to

19
00:01:08,220 --> 00:01:13,229
execute anything that could solve the

20
00:01:10,320 --> 00:01:15,210
previous thing as we don't want it to be

21
00:01:13,229 --> 00:01:18,720
executed right now and as we want to see

22
00:01:15,210 --> 00:01:21,289
what is what this does we can change the

23
00:01:18,720 --> 00:01:24,600
ie X it's like evil of other languages

24
00:01:21,290 --> 00:01:27,930
and we can reverse it by right and we

25
00:01:24,600 --> 00:01:30,960
redirect from whatever we've got well if

26
00:01:27,930 --> 00:01:32,460
you see the strength if numbers 64 with

27
00:01:30,960 --> 00:01:35,369
transformations it takes other things

28
00:01:32,460 --> 00:01:38,490
etc so we won't stop here because we

29
00:01:35,369 --> 00:01:42,720
want to keep on moving and we take it to

30
00:01:38,490 --> 00:01:46,020
the file we would do it with this line

31
00:01:42,720 --> 00:01:48,740
that you can see here we modified we

32
00:01:46,020 --> 00:01:54,240
change it for ride we redirect it to

33
00:01:48,740 --> 00:01:58,949
file we find another script that has the

34
00:01:54,240 --> 00:02:03,030
same to execute so we do except for the

35
00:01:58,950 --> 00:02:05,610
same right and we take the file ass and

36
00:02:03,030 --> 00:02:06,860
here we have something that can that's

37
00:02:05,610 --> 00:02:10,070
readable

38
00:02:06,860 --> 00:02:11,180
a manufacturer mode variables etc a

39
00:02:10,070 --> 00:02:14,989
function is called Hackerman

40
00:02:11,180 --> 00:02:17,960
so we have a power sold code that can be

41
00:02:14,990 --> 00:02:24,090
seen we can see what it's gonna happen

42
00:02:17,960 --> 00:02:25,180
with this so what does this creat have

43
00:02:24,090 --> 00:02:28,160
[Music]

44
00:02:25,180 --> 00:02:32,720
apart from reading it clearly it has a

45
00:02:28,160 --> 00:02:35,420
check flags

46
00:02:32,720 --> 00:02:38,240
purification flags it's another debug

47
00:02:35,420 --> 00:02:40,130
measure so if it matches with this the

48
00:02:38,240 --> 00:02:43,280
script would be done it wouldn't be

49
00:02:40,130 --> 00:02:45,740
executed on the other hand the good

50
00:02:43,280 --> 00:02:48,590
thing is that we have all this text

51
00:02:45,740 --> 00:02:51,440
plain text so we can open a Power Cell

52
00:02:48,590 --> 00:02:55,250
we can apply changes on the script so

53
00:02:51,440 --> 00:02:56,990
here we do not have to patch we don't

54
00:02:55,250 --> 00:02:58,220
have to include breakpoints we don't

55
00:02:56,990 --> 00:03:00,500
have to make changes we have the script

56
00:02:58,220 --> 00:03:07,790
you can delete this line and keep on

57
00:03:00,500 --> 00:03:11,060
moving so after this it checks that we

58
00:03:07,790 --> 00:03:12,920
have the registry code that were the six

59
00:03:11,060 --> 00:03:15,110
characters that the other binary had

60
00:03:12,920 --> 00:03:17,988
written down it checks that this exists

61
00:03:15,110 --> 00:03:21,980
and if it doesn't it would equally be

62
00:03:17,989 --> 00:03:23,440
over and it stores it in a variable and

63
00:03:21,980 --> 00:03:27,380
[Music]

64
00:03:23,440 --> 00:03:29,810
it checks that P file exists to the one

65
00:03:27,380 --> 00:03:32,799
that had written the binary and we

66
00:03:29,810 --> 00:03:32,800
thought that it was an image

67
00:03:33,040 --> 00:03:40,819
okay so this valley is recovered

68
00:03:36,550 --> 00:03:43,280
retrieved sorry and as we see what we

69
00:03:40,819 --> 00:03:45,349
had in the registry was the six-second

70
00:03:43,280 --> 00:03:47,930
characters we knew the first ones but it

71
00:03:45,349 --> 00:03:49,790
retrieves that six second ones of what

72
00:03:47,930 --> 00:03:55,390
we had typed in in the baton in the

73
00:03:49,790 --> 00:03:58,340
previous binary it retrieves it and it

74
00:03:55,390 --> 00:04:01,779
stores them in the variable data one

75
00:03:58,340 --> 00:04:07,370
after this it creates a new variable yes

76
00:04:01,780 --> 00:04:11,920
and it makes a loop for loop here were

77
00:04:07,370 --> 00:04:16,190
it applies an XOR with one a normal XOR

78
00:04:11,920 --> 00:04:19,728
to every character of this variable and

79
00:04:16,190 --> 00:04:23,060
this is what happens with the Ackermann

80
00:04:19,728 --> 00:04:29,440
function that we saw us defined on the

81
00:04:23,060 --> 00:04:33,410
top this function checks this strength

82
00:04:29,440 --> 00:04:36,770
after applying the XOR so the first

83
00:04:33,410 --> 00:04:41,240
thing it does stores in a hack variable

84
00:04:36,770 --> 00:04:47,630
the result of the character 5 well this

85
00:04:41,240 --> 00:04:52,460
is the last one so this character minus

86
00:04:47,630 --> 00:04:54,229
2 all the food all the full

87
00:04:52,460 --> 00:04:56,630
representation of the character and it

88
00:04:54,229 --> 00:04:58,610
should match the powerful version that

89
00:04:56,630 --> 00:05:07,789
we have in the device that has been

90
00:04:58,610 --> 00:05:10,150
calculated at the very beginning we can

91
00:05:07,789 --> 00:05:10,150
say

92
00:05:17,800 --> 00:05:39,970
and second character is compared to see

93
00:05:24,879 --> 00:05:42,550
if it looks the 88 and 89 copy this we

94
00:05:39,970 --> 00:05:44,770
can have this powershell and to see what

95
00:05:42,550 --> 00:05:48,750
happens if we execute the first one

96
00:05:44,770 --> 00:05:48,750
we'll get one the second culture will be

97
00:05:51,090 --> 00:06:58,029
146 for you that means the first car

98
00:05:57,819 --> 00:07:08,560
code should be for the string the name

99
00:06:58,029 --> 00:07:13,240
that will say true this it will be false

100
00:07:08,560 --> 00:07:16,930
so we have the same operation before 3-0

101
00:07:13,240 --> 00:07:19,249
plus 2 is 5 what we have to say that our

102
00:07:16,930 --> 00:07:23,209
will be released 5

103
00:07:19,249 --> 00:07:25,129
that means that to have an array and to

104
00:07:23,209 --> 00:07:27,469
find this and to work with this array

105
00:07:25,129 --> 00:07:31,099
has to be done only with this version

106
00:07:27,469 --> 00:07:40,039
this release own money yes okay we have

107
00:07:31,099 --> 00:07:42,739
the strain and three as it is reversible

108
00:07:40,039 --> 00:07:47,299
to know what happens in a previous

109
00:07:42,739 --> 00:07:48,948
binary we do this will define we have a

110
00:07:47,299 --> 00:07:52,539
new variable and we apply the same

111
00:07:48,949 --> 00:08:00,619
operation to perform the same thing and

112
00:07:52,539 --> 00:08:06,199
it will be vo1 0:32 should be at Harry

113
00:08:00,619 --> 00:08:09,649
space then getting information about it

114
00:08:06,199 --> 00:08:14,049
and then let's at least after this after

115
00:08:09,649 --> 00:08:20,479
Hackerman is given us correct result

116
00:08:14,049 --> 00:08:23,929
saying true way after the xor xor we

117
00:08:20,479 --> 00:08:32,198
just write two value laughs tracks or

118
00:08:23,929 --> 00:08:43,728
and this dog file it is w space talk do

119
00:08:32,198 --> 00:09:01,250
RC with a content of the variable we as

120
00:08:43,729 --> 00:09:11,029
a result 56 minus that amount to each

121
00:09:01,250 --> 00:09:16,990
value we array and use excel file in CI

122
00:09:11,029 --> 00:09:22,450
i forward write it call him to technique

123
00:09:16,990 --> 00:09:26,680
wmic which allows us to pass this moment

124
00:09:22,450 --> 00:09:30,130
which is a file XML then in the XML code

125
00:09:26,680 --> 00:09:33,069
we can add the jscript code this is what

126
00:09:30,130 --> 00:09:40,689
we do this is a way of having a bypass

127
00:09:33,070 --> 00:09:44,829
it's a technique of bypass this is by a

128
00:09:40,690 --> 00:09:49,560
sign and proper there is a way to skip

129
00:09:44,829 --> 00:09:54,219
it to jump to have a bypass link was

130
00:09:49,560 --> 00:09:59,890
created a few months ago you file a dot

131
00:09:54,220 --> 00:10:04,589
XLS a dot XLS it was a hater XML in the

132
00:09:59,890 --> 00:10:13,630
end there was a tagger defined here

133
00:10:04,589 --> 00:10:17,310
language James creeped strings here c64

134
00:10:13,630 --> 00:10:31,029
bass and the things we have to clear

135
00:10:17,310 --> 00:10:33,609
look for the strings to jscript

136
00:10:31,029 --> 00:10:40,870
so of course we might have another

137
00:10:33,610 --> 00:10:42,370
binary in between and jscript is similar

138
00:10:40,870 --> 00:10:48,190
to the other one but the implementation

139
00:10:42,370 --> 00:10:53,050
is by Microsoft and then as you see here

140
00:10:48,190 --> 00:10:58,560
it is we can use it to delete this we

141
00:10:53,050 --> 00:10:58,560
have this possibility of using the dot

142
00:10:59,130 --> 00:11:06,730
the 64 or a stream it is coded in 64

143
00:11:03,760 --> 00:11:09,430
based codes there are versions here that

144
00:11:06,730 --> 00:11:12,850
are as we see here we have a semicolon

145
00:11:09,430 --> 00:11:15,939
here and they use the variable that is

146
00:11:12,850 --> 00:11:19,420
array defined there up there with a

147
00:11:15,940 --> 00:11:23,680
strain after that there is a code which

148
00:11:19,420 --> 00:11:24,430
is the main code it is as such it is not

149
00:11:23,680 --> 00:11:27,410
a function

150
00:11:24,430 --> 00:11:29,929
it is a 1 as such

151
00:11:27,410 --> 00:11:33,410
it is what works with upper part of it

152
00:11:29,929 --> 00:11:37,869
then there is an object here even top we

153
00:11:33,410 --> 00:11:41,809
look about this technique there is a

154
00:11:37,869 --> 00:11:44,779
serialized object there serial objects

155
00:11:41,809 --> 00:11:47,569
that's been hard coded on top to render

156
00:11:44,779 --> 00:11:52,059
this more difficult they had created

157
00:11:47,569 --> 00:11:55,219
this adding up several 64 base change

158
00:11:52,059 --> 00:11:57,829
strings and there are this two other

159
00:11:55,220 --> 00:12:01,009
other arrays but if you know how it

160
00:11:57,829 --> 00:12:04,368
works you get to the MZ value and then

161
00:12:01,009 --> 00:12:08,869
and out of this enormous debt you want

162
00:12:04,369 --> 00:12:11,119
to have to know what it is to know what

163
00:12:08,869 --> 00:12:13,970
it is and to do it not to have to get

164
00:12:11,119 --> 00:12:15,259
attached then you use the debugger is

165
00:12:13,970 --> 00:12:18,319
one of the debugger as I've mentioned

166
00:12:15,259 --> 00:12:22,009
before the ones I had on my machine and

167
00:12:18,319 --> 00:12:23,809
have this debugger here will have a

168
00:12:22,009 --> 00:12:25,849
breakpoint and you could consult the

169
00:12:23,809 --> 00:12:29,509
value of the variable having established

170
00:12:25,849 --> 00:12:33,850
the concatenation or simply you can

171
00:12:29,509 --> 00:12:33,850
command to the code and you can have

172
00:12:34,959 --> 00:12:42,559
print and screen so you can have here

173
00:12:38,409 --> 00:12:44,869
you can have W script to play to execute

174
00:12:42,559 --> 00:12:48,529
and you see down here the variable on

175
00:12:44,869 --> 00:12:54,559
screen it's simple then with this we

176
00:12:48,529 --> 00:12:56,869
retrieve this we have 64 decode if we

177
00:12:54,559 --> 00:13:00,169
take it this is not ready to be executed

178
00:12:56,869 --> 00:13:05,229
directly but it is possible to master

179
00:13:00,169 --> 00:13:13,579
code here so what does editor a excel as

180
00:13:05,229 --> 00:13:17,809
we go and we the program that allows us

181
00:13:13,579 --> 00:13:20,388
to see because it is dartnet it is

182
00:13:17,809 --> 00:13:22,819
possible to have access to the code to

183
00:13:20,389 --> 00:13:25,249
the source code original source code

184
00:13:22,819 --> 00:13:28,640
there's not a representation but it is

185
00:13:25,249 --> 00:13:31,399
the source code as such

186
00:13:28,640 --> 00:13:35,899
what do we see here the program that's

187
00:13:31,399 --> 00:13:38,870
been executed from the hard disk memory

188
00:13:35,899 --> 00:13:42,200
the program the software is checking

189
00:13:38,870 --> 00:13:47,779
that the date where it was executed it

190
00:13:42,200 --> 00:13:56,950
is the first of January 2019 and to skip

191
00:13:47,779 --> 00:13:56,950
this then you could have put your device

192
00:14:05,480 --> 00:14:12,490
[Music]

193
00:14:18,190 --> 00:14:29,300
expected date you go to the main case

194
00:14:23,480 --> 00:14:41,990
there is a request to the domain of this

195
00:14:29,300 --> 00:14:44,240
request the site will you have a

196
00:14:41,990 --> 00:14:49,810
response what you get is an exception

197
00:14:44,240 --> 00:14:54,380
what is it it is a try catch and catch

198
00:14:49,810 --> 00:14:58,310
get the exception and it goes to other

199
00:14:54,380 --> 00:15:01,310
thing which is program C program the

200
00:14:58,310 --> 00:15:03,199
software expects to do

201
00:15:01,310 --> 00:15:09,930
[Music]

202
00:15:03,200 --> 00:15:13,079
what they check there is a P the P was

203
00:15:09,930 --> 00:15:15,599
from before from the first binary you

204
00:15:13,079 --> 00:15:21,269
remember the header other able to that

205
00:15:15,600 --> 00:15:25,019
was base64 so it check and dog so

206
00:15:21,269 --> 00:15:27,899
created by the PowerShell file with a

207
00:15:25,019 --> 00:15:47,550
verbal have been applying sort of what

208
00:15:27,899 --> 00:15:55,070
has been they string shark zero one dog

209
00:15:47,550 --> 00:15:59,729
files are deleted checking based on time

210
00:15:55,070 --> 00:16:20,339
seconds elapsed less than thousand

211
00:15:59,730 --> 00:16:27,750
seconds string calculated with this 0 1

212
00:16:20,339 --> 00:16:34,560
goes to deciphering process in a yes is

213
00:16:27,750 --> 00:16:37,769
used to using the dark he is going to be

214
00:16:34,560 --> 00:16:39,869
read it's going to be deciphered and P

215
00:16:37,769 --> 00:16:47,430
is going to be deciphered and it's going

216
00:16:39,870 --> 00:16:51,180
to be written in W we have a file we see

217
00:16:47,430 --> 00:16:54,569
its look at the entropy high entropy

218
00:16:51,180 --> 00:16:58,829
that means that it is a father surely

219
00:16:54,569 --> 00:17:01,589
the deciphered ciphered file and then we

220
00:16:58,829 --> 00:17:02,339
have to remember their hand to go to the

221
00:17:01,589 --> 00:17:05,380
beginning

222
00:17:02,339 --> 00:17:09,459
think about true ciphering

223
00:17:05,380 --> 00:17:14,919
if we look for true suffering the size

224
00:17:09,459 --> 00:17:17,319
of the binary 512 thousand bytes that's

225
00:17:14,919 --> 00:17:20,410
striking that is five hundred and twelve

226
00:17:17,319 --> 00:17:24,159
thousand it's striking to be precisely

227
00:17:20,410 --> 00:17:26,679
that size that amount and then you see

228
00:17:24,160 --> 00:17:30,940
here and you get mad trying to look for

229
00:17:26,679 --> 00:17:32,679
ward it could be you say does it mean

230
00:17:30,940 --> 00:17:35,230
something to you ask your friends and

231
00:17:32,679 --> 00:17:39,010
co-workers and having having looked

232
00:17:35,230 --> 00:17:41,080
around you get the proper ciphering

233
00:17:39,010 --> 00:17:45,690
means true crypt

234
00:17:41,080 --> 00:17:50,158
perhaps if we look for true crypt

235
00:17:45,690 --> 00:17:52,990
containers in general in true crypt

236
00:17:50,159 --> 00:17:57,789
those are 512 modules

237
00:17:52,990 --> 00:18:01,030
512 modules it seems we have is a

238
00:17:57,789 --> 00:18:03,669
container of true crypt but to retrieve

239
00:18:01,030 --> 00:18:06,879
this and to see the we will need a

240
00:18:03,669 --> 00:18:09,730
password and then to have a password the

241
00:18:06,880 --> 00:18:26,559
first thing we do is we try whatever we

242
00:18:09,730 --> 00:18:29,080
have from before then you see tough job

243
00:18:26,559 --> 00:18:31,780
you have to have their hashes from the

244
00:18:29,080 --> 00:18:35,139
container so there is a script and the

245
00:18:31,780 --> 00:18:37,600
references here you have it it is really

246
00:18:35,140 --> 00:18:41,010
the container from script and you get

247
00:18:37,600 --> 00:18:43,389
hashes in a forward that is understood

248
00:18:41,010 --> 00:18:47,050
[Music]

249
00:18:43,390 --> 00:18:50,020
by John and what happens there is that I

250
00:18:47,050 --> 00:18:52,659
have executed this I have used the rock

251
00:18:50,020 --> 00:18:56,080
you and I let it executed

252
00:18:52,660 --> 00:18:59,740
I let it to be executed and will happen

253
00:18:56,080 --> 00:19:01,480
will hash cat in TrueCrypt you have two

254
00:18:59,740 --> 00:19:05,650
modes the normal mode and the hidden

255
00:19:01,480 --> 00:19:13,890
mode the way to calculate the way to

256
00:19:05,650 --> 00:19:23,200
calculate two hashes to give the first

257
00:19:13,890 --> 00:19:26,110
bytes 65536 first ones for the next

258
00:19:23,200 --> 00:19:34,180
ciphering you start with the six two old

259
00:19:26,110 --> 00:19:39,669
one which is this one and you you run

260
00:19:34,180 --> 00:20:25,230
this and for those modes there is a

261
00:19:39,670 --> 00:20:28,289
password okay

262
00:20:25,230 --> 00:20:28,289
[Music]

263
00:20:40,610 --> 00:20:43,649
[Music]

264
00:20:51,930 --> 00:22:21,420
and apply to contract

265
00:22:24,590 --> 00:22:36,689
[Music]

266
00:23:00,360 --> 00:23:17,609
[Music]

267
00:23:29,110 --> 00:23:33,719
[Music]

268
00:23:59,740 --> 00:24:08,770
I put this dictionary where I try to

269
00:24:05,470 --> 00:24:12,390
execute this because you don't take the

270
00:24:08,770 --> 00:24:15,629
deciphering directly they say it is

271
00:24:12,390 --> 00:24:15,630
that's it

272
00:24:19,050 --> 00:24:59,610
flag file where you have and what I

273
00:24:41,920 --> 00:25:06,040
check up to execute by finding a

274
00:24:59,610 --> 00:25:12,879
password it was six characters six card

275
00:25:06,040 --> 00:25:24,510
too long and for Thomas for first three

276
00:25:12,880 --> 00:25:24,510
years and the same thing it is the flag

277
00:25:24,900 --> 00:25:35,309
flag great that you were very good

278
00:25:31,410 --> 00:25:35,309
that's what I wanted to say

279
00:25:40,020 --> 00:25:53,290
questions questions comments I don't

280
00:25:46,360 --> 00:25:56,770
know I will give you the slides I have

281
00:25:53,290 --> 00:25:58,780
my blog and you can read my slides and

282
00:25:56,770 --> 00:26:08,770
you can do it directly it's the only way

283
00:25:58,780 --> 00:26:13,510
to control this from the basic I think

284
00:26:08,770 --> 00:26:16,300
the first crack is easier and I wish you

285
00:26:13,510 --> 00:26:19,379
luck and success were the challenges and

286
00:26:16,300 --> 00:26:19,379
thank you very much

