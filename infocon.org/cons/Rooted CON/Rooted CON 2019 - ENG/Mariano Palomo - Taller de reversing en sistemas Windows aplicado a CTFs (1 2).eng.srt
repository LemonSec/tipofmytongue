1
00:00:01,490 --> 00:00:08,820
thank you my name is Mariana Bellomo I

2
00:00:04,950 --> 00:00:11,400
am malware analyst of antal gene a

3
00:00:08,820 --> 00:00:15,269
low-tech system who have changed the

4
00:00:11,400 --> 00:00:17,820
name now its security systems and I'm

5
00:00:15,269 --> 00:00:21,029
working in reversing but where analysis

6
00:00:17,820 --> 00:00:23,698
and when you see the beautiful thing bad

7
00:00:21,029 --> 00:00:26,730
guys do you are interested in knowing

8
00:00:23,699 --> 00:00:33,690
the dark side the other side of the coin

9
00:00:26,730 --> 00:00:36,090
well my email is here and you can get in

10
00:00:33,690 --> 00:00:37,709
touch with me if you'd like to sell it

11
00:00:36,090 --> 00:00:41,280
feedback or a beautiful picture well

12
00:00:37,710 --> 00:00:44,160
look nice and we're going to start now

13
00:00:41,280 --> 00:00:46,260
with this malware analysis and the

14
00:00:44,160 --> 00:00:49,919
reverse in lab we're going to have

15
00:00:46,260 --> 00:00:54,410
reversing or malware analysis workshops

16
00:00:49,920 --> 00:00:57,180
in order to analyze all binary and CTF

17
00:00:54,410 --> 00:01:00,779
environments or what's equivalent and

18
00:00:57,180 --> 00:01:03,750
the daily analysis we perform we have

19
00:01:00,780 --> 00:01:08,250
here a graph where we have the way I had

20
00:01:03,750 --> 00:01:10,850
organized my daily analysis lab it is

21
00:01:08,250 --> 00:01:14,250
what I do to get connected to CTF

22
00:01:10,850 --> 00:01:17,158
systems and here I have the virtual

23
00:01:14,250 --> 00:01:19,830
device virtual machine I use the

24
00:01:17,159 --> 00:01:23,790
software virtualization malware because

25
00:01:19,830 --> 00:01:27,420
things that are good and they facilitate

26
00:01:23,790 --> 00:01:29,579
things and tasks are easier I'd like to

27
00:01:27,420 --> 00:01:34,740
show you that I've connected this to my

28
00:01:29,579 --> 00:01:37,679
host and I have a series of rules

29
00:01:34,740 --> 00:01:40,979
applied for the traffic to be redirected

30
00:01:37,680 --> 00:01:44,040
towards a proxy proxy proxy in

31
00:01:40,979 --> 00:01:49,320
transparent mode in such a way that with

32
00:01:44,040 --> 00:01:53,520
a certificate of the user I can I can

33
00:01:49,320 --> 00:01:56,100
break I can breach the HTTP for traffic

34
00:01:53,520 --> 00:01:59,300
and see requests clearly for this to

35
00:01:56,100 --> 00:02:02,509
work I have to tell the device

36
00:01:59,300 --> 00:02:06,020
we should use the DNS of your host the

37
00:02:02,510 --> 00:02:08,210
domain and system I use of DLS mask with

38
00:02:06,020 --> 00:02:11,780
this configuration the domain server of

39
00:02:08,210 --> 00:02:13,910
the host I have this mask here and you

40
00:02:11,780 --> 00:02:15,650
can copy this directly and you can have

41
00:02:13,910 --> 00:02:19,070
your own lab you would like to start

42
00:02:15,650 --> 00:02:20,990
fighting malware and on top of this I'd

43
00:02:19,070 --> 00:02:24,560
like to say that as we work with a

44
00:02:20,990 --> 00:02:26,720
virtual machine then they know this the

45
00:02:24,560 --> 00:02:29,630
bad guys know about it and there are

46
00:02:26,720 --> 00:02:32,440
ways to contract this because they are

47
00:02:29,630 --> 00:02:36,230
traces their registries there are

48
00:02:32,440 --> 00:02:38,690
footprints things that easy to check

49
00:02:36,230 --> 00:02:41,799
with programming tools and if we don't

50
00:02:38,690 --> 00:02:45,859
want to have patches all the time to

51
00:02:41,800 --> 00:02:48,410
pass the tests we can change the

52
00:02:45,860 --> 00:02:53,330
configuration of the device well we can

53
00:02:48,410 --> 00:02:56,590
then refrain from doing cumbersome tasks

54
00:02:53,330 --> 00:03:00,620
and as I said before this could be

55
00:02:56,590 --> 00:03:06,590
perfectly done otherwise and are things

56
00:03:00,620 --> 00:03:11,060
I'd like to say as we saw the CPUID

57
00:03:06,590 --> 00:03:15,350
instruction and their symbol if we put

58
00:03:11,060 --> 00:03:20,950
the register EXA one bit at one that

59
00:03:15,350 --> 00:03:23,900
sends us if it is a it's sent to the

60
00:03:20,950 --> 00:03:27,190
instruction it means the instruction is

61
00:03:23,900 --> 00:03:29,840
taking place at Virtual Machine the

62
00:03:27,190 --> 00:03:31,700
configuration file add this line you see

63
00:03:29,840 --> 00:03:35,989
here if you add this first line the one

64
00:03:31,700 --> 00:03:38,600
on top of here then you get always a

65
00:03:35,989 --> 00:03:40,880
zero from the instructions in the

66
00:03:38,600 --> 00:03:43,820
configuration in the configuration file

67
00:03:40,880 --> 00:03:46,430
you can say that your virtual machine

68
00:03:43,820 --> 00:03:50,090
will be a cloning of the manufacturing

69
00:03:46,430 --> 00:03:53,480
of yours the virtual machine is a clone

70
00:03:50,090 --> 00:03:54,950
of the host of a CPU ID when you use the

71
00:03:53,480 --> 00:03:58,060
other parameters you'll get a string

72
00:03:54,950 --> 00:04:00,738
that is used to compare and to see a

73
00:03:58,060 --> 00:04:06,280
virtual machine so you're checking and

74
00:04:00,739 --> 00:04:10,990
you're as you see here skipping the

75
00:04:06,280 --> 00:04:13,150
test so then there are ways perhaps you

76
00:04:10,990 --> 00:04:15,269
will see here in small print but there

77
00:04:13,150 --> 00:04:18,959
are some MAC address that corresponds to

78
00:04:15,269 --> 00:04:21,370
VirtualBox or malware software's and

79
00:04:18,959 --> 00:04:24,550
virtualization and a configuration in

80
00:04:21,370 --> 00:04:27,400
this card you change this configuration

81
00:04:24,550 --> 00:04:32,650
and you put one that looks like your

82
00:04:27,400 --> 00:04:35,200
host when they check the hardware like

83
00:04:32,650 --> 00:04:37,929
the amount of RAM memory you have or for

84
00:04:35,200 --> 00:04:40,719
instance the size of a hard disk and

85
00:04:37,930 --> 00:04:43,180
this capacity the number of processors

86
00:04:40,720 --> 00:04:45,460
when you create a virtual machine and if

87
00:04:43,180 --> 00:04:48,610
you don't have lots of resources you put

88
00:04:45,460 --> 00:04:52,150
something that is not very ambitious and

89
00:04:48,610 --> 00:04:55,720
useless for tracing also there are some

90
00:04:52,150 --> 00:04:59,169
programs some software programs that are

91
00:04:55,720 --> 00:05:03,870
free al qussair and Pasha's they have

92
00:04:59,169 --> 00:05:06,430
implemented the normal malware

93
00:05:03,870 --> 00:05:09,700
verifications to detect virtual machines

94
00:05:06,430 --> 00:05:12,669
and as those are open software's you can

95
00:05:09,700 --> 00:05:15,460
go to the repository and you can see the

96
00:05:12,669 --> 00:05:19,990
code that's checking things so you can

97
00:05:15,460 --> 00:05:23,349
think how to turn it by the way and to

98
00:05:19,990 --> 00:05:27,160
see everything green everything is good

99
00:05:23,350 --> 00:05:29,919
when they execute the software once you

100
00:05:27,160 --> 00:05:32,610
have implemented the suffer machine you

101
00:05:29,919 --> 00:05:36,099
have to give some tools to a machine

102
00:05:32,610 --> 00:05:37,630
facilitating our analysis tasks I'd like

103
00:05:36,100 --> 00:05:40,960
to split this into different categories

104
00:05:37,630 --> 00:05:43,630
and I have here rapid access from the

105
00:05:40,960 --> 00:05:43,810
bar but each one of you can do it your

106
00:05:43,630 --> 00:05:49,380
way

107
00:05:43,810 --> 00:05:52,960
do it your own way I have several

108
00:05:49,380 --> 00:05:57,070
decompilers too for languages like

109
00:05:52,960 --> 00:06:01,270
dotnet or another software the decompile

110
00:05:57,070 --> 00:06:03,080
flash router it and there are debuggers

111
00:06:01,270 --> 00:06:08,000
like immunity I have

112
00:06:03,080 --> 00:06:13,609
the old one that it's good still frost

113
00:06:08,000 --> 00:06:16,460
and the Model X 32 t BG X 32 d BG the

114
00:06:13,610 --> 00:06:20,030
modern one of course I have what you see

115
00:06:16,460 --> 00:06:27,310
on screen the graphic user interface

116
00:06:20,030 --> 00:06:31,520
that's also useful and hexadecimal

117
00:06:27,310 --> 00:06:34,639
compiler we have the 0-1 editor that is

118
00:06:31,520 --> 00:06:37,609
able to have a string inaccessible and

119
00:06:34,639 --> 00:06:39,560
you can't copy and paste and for

120
00:06:37,610 --> 00:06:42,139
instance you have a binary coded in

121
00:06:39,560 --> 00:06:45,139
hexadecimal you copy directly and you

122
00:06:42,139 --> 00:06:49,430
have the binary and such ready for using

123
00:06:45,139 --> 00:06:52,550
it and executed then a normal one HX d

124
00:06:49,430 --> 00:06:57,259
or the one that down there that allows

125
00:06:52,550 --> 00:06:59,960
you when you have a memory memory part

126
00:06:57,259 --> 00:07:03,080
use you can look for it and you can say

127
00:06:59,960 --> 00:07:07,880
clean it clean everything to have MZ

128
00:07:03,080 --> 00:07:11,840
header and also the other part can be

129
00:07:07,880 --> 00:07:14,599
cleaned debugger to analyze the binary

130
00:07:11,840 --> 00:07:16,729
structures are seen here as we see for

131
00:07:14,599 --> 00:07:19,159
instance to detect the version of a

132
00:07:16,729 --> 00:07:22,610
compiler the compiler that's been used

133
00:07:19,159 --> 00:07:27,770
for generating the binary visual C C++

134
00:07:22,610 --> 00:07:29,810
or dollfie or whatever and also for

135
00:07:27,770 --> 00:07:32,240
instance there are programs like

136
00:07:29,810 --> 00:07:36,129
multi-purpose programs to see different

137
00:07:32,240 --> 00:07:46,699
things like piece to do and people to

138
00:07:36,129 --> 00:07:52,780
see resources from executable they want

139
00:07:46,699 --> 00:07:54,850
to dump it and keep it's executing

140
00:07:52,780 --> 00:07:56,830
to reconstruct very poor table a

141
00:07:54,850 --> 00:08:01,660
software like Excel our incorrect are

142
00:07:56,830 --> 00:08:06,789
useful many times as we use the vector

143
00:08:01,660 --> 00:08:10,120
for entry there what they use is the

144
00:08:06,790 --> 00:08:13,120
videos or the USGS that are interpreted

145
00:08:10,120 --> 00:08:16,000
by the window script the mother and

146
00:08:13,120 --> 00:08:19,090
there are some debug rocks included for

147
00:08:16,000 --> 00:08:22,180
us to know to this text file those are

148
00:08:19,090 --> 00:08:25,570
text files and we have some points to

149
00:08:22,180 --> 00:08:27,460
add to be executed in other cases web

150
00:08:25,570 --> 00:08:30,580
another program that was created by one

151
00:08:27,460 --> 00:08:36,179
of my co-workers to load to the file

152
00:08:30,580 --> 00:08:37,409
there and you have it's you play and

153
00:08:36,179 --> 00:08:41,770
[Music]

154
00:08:37,409 --> 00:08:43,080
it's quite easy to use user friendly and

155
00:08:41,770 --> 00:08:45,400
that was done by one of my co-workers

156
00:08:43,080 --> 00:08:47,200
obviously we need to know what happens

157
00:08:45,400 --> 00:08:51,640
with the operating system when we

158
00:08:47,200 --> 00:08:54,660
execute here from Microsoft it's very

159
00:08:51,640 --> 00:08:57,490
useful the internal things and there

160
00:08:54,660 --> 00:09:00,640
this program also were the capture of

161
00:08:57,490 --> 00:09:02,740
all the keys all the registries from the

162
00:09:00,640 --> 00:09:05,620
system and you can do whatever you want

163
00:09:02,740 --> 00:09:08,230
to do you executed a sample and then you

164
00:09:05,620 --> 00:09:10,960
compared to see the keys modified what's

165
00:09:08,230 --> 00:09:14,740
been deleted and so on so forth and also

166
00:09:10,960 --> 00:09:16,690
there are tools like the one you see

167
00:09:14,740 --> 00:09:20,260
here to analyze documents in the case of

168
00:09:16,690 --> 00:09:24,250
Microsoft Office it is what we can give

169
00:09:20,260 --> 00:09:27,640
to the machine or to start upload and

170
00:09:24,250 --> 00:09:31,000
let's talk here to Athena

171
00:09:27,640 --> 00:09:33,819
Antonia platform Athena who knows at na

172
00:09:31,000 --> 00:09:37,150
Athena who's played with all the

173
00:09:33,820 --> 00:09:40,610
challenges you've taken the challenges

174
00:09:37,150 --> 00:09:44,209
to first channel is Athena

175
00:09:40,610 --> 00:09:47,049
is safety information technology safety

176
00:09:44,209 --> 00:09:50,209
and security platform we have several

177
00:09:47,049 --> 00:09:53,509
challenges like cryptography stenography

178
00:09:50,209 --> 00:09:55,429
exploding networking reversing and what

179
00:09:53,509 --> 00:09:58,819
we're going to talk here is reversing

180
00:09:55,429 --> 00:10:01,670
and there's Athena platform they created

181
00:09:58,819 --> 00:10:05,420
a school Athena Athena school for those

182
00:10:01,670 --> 00:10:09,069
who are starting security and

183
00:10:05,420 --> 00:10:12,559
information technology there are some

184
00:10:09,069 --> 00:10:14,899
courses were the theory and tutorial

185
00:10:12,559 --> 00:10:16,339
courses with the challenges but the

186
00:10:14,899 --> 00:10:18,649
difference is that you get solutions

187
00:10:16,339 --> 00:10:21,259
here you can compare if you are in the

188
00:10:18,649 --> 00:10:24,290
right track if you're doing well or not

189
00:10:21,259 --> 00:10:27,350
so where to start with reversing in the

190
00:10:24,290 --> 00:10:30,709
school Athena School in Reverse in

191
00:10:27,350 --> 00:10:35,449
Category we have a computer architecture

192
00:10:30,709 --> 00:10:39,878
we have the Intel's syntaxes we have to

193
00:10:35,449 --> 00:10:42,679
know all the act active on norman

194
00:10:39,879 --> 00:10:45,350
characteristics we describe here the

195
00:10:42,679 --> 00:10:48,230
binary format of Windows we define the

196
00:10:45,350 --> 00:10:51,379
portable executable format from

197
00:10:48,230 --> 00:10:55,910
Microsoft theory of D and sample

198
00:10:51,379 --> 00:10:59,389
compiler d compiler and the MST and so

199
00:10:55,910 --> 00:11:02,809
on and the challenges from Athena I was

200
00:10:59,389 --> 00:11:08,049
told to analyze have seen challenges in

201
00:11:02,809 --> 00:11:08,049
front of you and those are old

202
00:11:08,259 --> 00:11:14,179
challenges out of those for reversing

203
00:11:11,360 --> 00:11:16,249
challenges I'd like to say I'd like to

204
00:11:14,179 --> 00:11:18,410
revise with you I'd like to elaborate on

205
00:11:16,249 --> 00:11:21,739
the simple ones for those who are

206
00:11:18,410 --> 00:11:24,769
starting and just to get a flavor and

207
00:11:21,739 --> 00:11:28,520
with that we're going to talk about

208
00:11:24,769 --> 00:11:31,459
another Matuschka the Matushka

209
00:11:28,520 --> 00:11:34,100
it is one of the most difficult

210
00:11:31,459 --> 00:11:37,250
challenges of the platform of reversing

211
00:11:34,100 --> 00:11:39,830
challenges and was totally the first one

212
00:11:37,250 --> 00:11:43,160
that cracked me if you can't crack me if

213
00:11:39,830 --> 00:11:46,670
you can and distract me the challenge is

214
00:11:43,160 --> 00:11:49,670
to obtain the key that is of a code that

215
00:11:46,670 --> 00:11:52,079
will appear when the binary is executed

216
00:11:49,670 --> 00:11:54,219
in the proper way

217
00:11:52,080 --> 00:11:57,890
[Music]

218
00:11:54,220 --> 00:12:01,700
two out of five stars and we get the

219
00:11:57,890 --> 00:12:06,350
binary and the hash tag whenever we see

220
00:12:01,700 --> 00:12:08,540
a new binary I like to explain how it's

221
00:12:06,350 --> 00:12:12,410
been done on what has been used to do it

222
00:12:08,540 --> 00:12:15,170
because you can get an idea of where to

223
00:12:12,410 --> 00:12:18,469
go which tool you should use and about

224
00:12:15,170 --> 00:12:21,110
the next steps to take and then here in

225
00:12:18,470 --> 00:12:26,510
this case for instance we check the file

226
00:12:21,110 --> 00:12:29,510
of God is an executable and 32 bits for

227
00:12:26,510 --> 00:12:33,110
Microsoft Windows and there is a tool I

228
00:12:29,510 --> 00:12:36,890
have described which is detected easy D

229
00:12:33,110 --> 00:12:39,620
I eat to see the compiler in this case

230
00:12:36,890 --> 00:12:44,050
is a visual C C++

231
00:12:39,620 --> 00:12:48,589
that's the Edition 2015 version release

232
00:12:44,050 --> 00:12:53,240
414 and then it seems here the entropy

233
00:12:48,589 --> 00:12:56,930
of the binary and you see that it is not

234
00:12:53,240 --> 00:13:00,470
high this entropy so they haven't use

235
00:12:56,930 --> 00:13:02,810
sort of blaring methods so when you want

236
00:13:00,470 --> 00:13:04,640
to take the D compiling and the

237
00:13:02,810 --> 00:13:07,250
assembling of the program you see the

238
00:13:04,640 --> 00:13:10,310
real code that was created by the

239
00:13:07,250 --> 00:13:12,500
programmer and then we take this and

240
00:13:10,310 --> 00:13:16,969
crack me if you can knowing that we are

241
00:13:12,500 --> 00:13:19,880
able to see it as such we upload at D

242
00:13:16,970 --> 00:13:22,190
assembler it is first of all I prefer

243
00:13:19,880 --> 00:13:26,660
the static analysis to see in the

244
00:13:22,190 --> 00:13:29,839
program flow as it is visual C C++ was

245
00:13:26,660 --> 00:13:32,089
subscribed by our colleagues previously

246
00:13:29,839 --> 00:13:35,720
when you conduct a program

247
00:13:32,090 --> 00:13:37,910
and visual C++ the entry point is not

248
00:13:35,720 --> 00:13:41,600
the main that was created by the

249
00:13:37,910 --> 00:13:43,670
programmer the compiler man puts a lot

250
00:13:41,600 --> 00:13:48,080
of code and beginning but with the

251
00:13:43,670 --> 00:13:51,260
experience and good of idea a bit of

252
00:13:48,080 --> 00:13:54,380
idea you can see this is Hydra software

253
00:13:51,260 --> 00:13:58,040
Hydra software that's an open software

254
00:13:54,380 --> 00:14:02,150
nowadays with Hydra and in this case we

255
00:13:58,040 --> 00:14:05,510
upload the program and we see and the

256
00:14:02,150 --> 00:14:13,520
left inside the entry point look for

257
00:14:05,510 --> 00:14:16,280
this and the decompiling with the

258
00:14:13,520 --> 00:14:18,500
assembling once we have the entry point

259
00:14:16,280 --> 00:14:20,060
there we see decompiling on the

260
00:14:18,500 --> 00:14:23,750
right-hand side and there is a function

261
00:14:20,060 --> 00:14:26,119
to which we give two parameters and in

262
00:14:23,750 --> 00:14:29,000
this case we have two pointers but in

263
00:14:26,120 --> 00:14:31,400
general and the truth is that this is

264
00:14:29,000 --> 00:14:35,330
the main because you have here the

265
00:14:31,400 --> 00:14:37,390
arguments and you have here another way

266
00:14:35,330 --> 00:14:41,030
to get to the main would be to look for

267
00:14:37,390 --> 00:14:42,890
strains of characters in those strings

268
00:14:41,030 --> 00:14:44,470
of characters I mean strings of

269
00:14:42,890 --> 00:14:47,960
characters and to look for something

270
00:14:44,470 --> 00:14:50,780
striking and this binary web CCN

271
00:14:47,960 --> 00:14:52,550
container CCN container and then you

272
00:14:50,780 --> 00:14:55,910
would look for the string of characters

273
00:14:52,550 --> 00:15:00,380
and here you could tell of a system

274
00:14:55,910 --> 00:15:03,469
where was a string used and then it will

275
00:15:00,380 --> 00:15:07,939
take you to the d assembler where it was

276
00:15:03,470 --> 00:15:10,460
used and you could go up levels to get

277
00:15:07,940 --> 00:15:12,620
to what you think it's the main it

278
00:15:10,460 --> 00:15:19,910
should be a function there will be

279
00:15:12,620 --> 00:15:25,090
visual c c++ that array of characters

280
00:15:19,910 --> 00:15:28,730
and one figure so we see here the

281
00:15:25,090 --> 00:15:32,690
representation of c dacoit code created

282
00:15:28,730 --> 00:15:35,720
by hydra on the main of a program and

283
00:15:32,690 --> 00:15:39,080
what you see here is that there is an F

284
00:15:35,720 --> 00:15:41,760
condition that's each if it does not

285
00:15:39,080 --> 00:15:45,480
comply with this that goes to zero and

286
00:15:41,760 --> 00:15:48,240
finished that's it what in this f there

287
00:15:45,480 --> 00:15:50,790
was an F condition sin equal nama for

288
00:15:48,240 --> 00:15:52,920
the program to go on to go ahead and

289
00:15:50,790 --> 00:15:56,219
then what let's see what happens there

290
00:15:52,920 --> 00:16:00,569
and I would like to say that what we see

291
00:15:56,220 --> 00:16:03,420
here is parameter 1 and it should be

292
00:16:00,570 --> 00:16:06,930
more than 2 bigger than 2 the main

293
00:16:03,420 --> 00:16:10,469
function parameter parameter responds to

294
00:16:06,930 --> 00:16:13,770
the number of parameters we have here

295
00:16:10,470 --> 00:16:17,040
given to this binary it should be higher

296
00:16:13,770 --> 00:16:19,680
than 2 so we have two parameters to the

297
00:16:17,040 --> 00:16:22,020
program and we'll see which two

298
00:16:19,680 --> 00:16:24,449
parameters are there are there is

299
00:16:22,020 --> 00:16:27,300
another function that will give back

300
00:16:24,450 --> 00:16:31,710
another variable boolean viral role that

301
00:16:27,300 --> 00:16:35,099
instance really into figure as you see

302
00:16:31,710 --> 00:16:37,650
here it's different from 0 so we see

303
00:16:35,100 --> 00:16:39,540
that we have to compare two parameters

304
00:16:37,650 --> 00:16:45,150
and that let's see what the function

305
00:16:39,540 --> 00:16:49,939
does the function if we see here the D

306
00:16:45,150 --> 00:16:54,390
compiler and the D assembler of such

307
00:16:49,940 --> 00:16:58,800
method we see it uses they create to

308
00:16:54,390 --> 00:17:03,420
help 32 snapshot that as I said before

309
00:16:58,800 --> 00:17:06,959
if you go to MS which is the reference

310
00:17:03,420 --> 00:17:09,569
of all the ones of the operation

311
00:17:06,959 --> 00:17:12,240
operating system it's used to capture

312
00:17:09,569 --> 00:17:16,198
the process that are executing on the

313
00:17:12,240 --> 00:17:20,370
machine at the moment when you call the

314
00:17:16,199 --> 00:17:24,120
function and then with 32 first and next

315
00:17:20,369 --> 00:17:25,439
you see you go long the snapshot and you

316
00:17:24,119 --> 00:17:28,770
do whatever you want with it

317
00:17:25,440 --> 00:17:31,440
if you look in detail the code of what's

318
00:17:28,770 --> 00:17:34,080
been done there is a verbal to which has

319
00:17:31,440 --> 00:17:36,870
been compared which is an array where

320
00:17:34,080 --> 00:17:40,230
the string of characters I don't know if

321
00:17:36,870 --> 00:17:42,219
you see it in grey its renamed here and

322
00:17:40,230 --> 00:17:46,370
then

323
00:17:42,220 --> 00:17:49,730
strange chinga tu white shark protocol

324
00:17:46,370 --> 00:17:51,350
analysis software that is going to be

325
00:17:49,730 --> 00:17:56,420
used by the analyst the software

326
00:17:51,350 --> 00:17:59,449
analysis analyst and it checks it's

327
00:17:56,420 --> 00:18:04,340
trying to someone is trying to spy to

328
00:17:59,450 --> 00:18:05,810
see the program and then to overcome

329
00:18:04,340 --> 00:18:09,709
this you could have a breakpoint here

330
00:18:05,810 --> 00:18:13,460
and you could make the opposite in the

331
00:18:09,710 --> 00:18:15,980
case you would have one of those but

332
00:18:13,460 --> 00:18:17,840
let's see how to overcome this you have

333
00:18:15,980 --> 00:18:20,600
to take a look at net to have one of

334
00:18:17,840 --> 00:18:23,540
those software is open whenever you are

335
00:18:20,600 --> 00:18:26,449
debugging or you are cleaning the

336
00:18:23,540 --> 00:18:30,020
program the software once the function

337
00:18:26,450 --> 00:18:33,140
is past its function there is another

338
00:18:30,020 --> 00:18:36,320
function down here part of the program

339
00:18:33,140 --> 00:18:39,110
where there is a parameter a parameter I

340
00:18:36,320 --> 00:18:44,149
don't know if you can see it here the

341
00:18:39,110 --> 00:18:48,050
parameter is the first first string that

342
00:18:44,150 --> 00:18:50,600
goes as parameter into the program

343
00:18:48,050 --> 00:18:53,720
knowing that this is the first parameter

344
00:18:50,600 --> 00:18:56,600
given to the program and what you see

345
00:18:53,720 --> 00:19:01,160
here is you have a call of the API of

346
00:18:56,600 --> 00:19:03,679
get computer name instruction you have

347
00:19:01,160 --> 00:19:06,740
to be too clever to know that we're

348
00:19:03,680 --> 00:19:11,240
seeing the computer name but you can go

349
00:19:06,740 --> 00:19:14,330
to MS D and to see what the parameter is

350
00:19:11,240 --> 00:19:19,240
the one it's that's God and then you

351
00:19:14,330 --> 00:19:21,320
compare what is given back to the

352
00:19:19,240 --> 00:19:23,960
parameter the first parameter you have

353
00:19:21,320 --> 00:19:26,780
to convey is the name of our computer

354
00:19:23,960 --> 00:19:31,160
computer name and in the case they do

355
00:19:26,780 --> 00:19:34,780
not get what is to be expected then it

356
00:19:31,160 --> 00:19:37,340
is going to create another flow and

357
00:19:34,780 --> 00:19:40,580
another flow and this flow calls a

358
00:19:37,340 --> 00:19:44,149
function that is showing directly the

359
00:19:40,580 --> 00:19:46,929
window like as such and this crack me if

360
00:19:44,150 --> 00:19:49,660
you can if the name is

361
00:19:46,930 --> 00:19:51,730
that's unexpected someone could think

362
00:19:49,660 --> 00:19:55,510
that's a key or the code or something

363
00:19:51,730 --> 00:19:59,860
but there are other conditions and other

364
00:19:55,510 --> 00:20:02,710
tests to pass curiosity it will look for

365
00:19:59,860 --> 00:20:05,649
the string of characters in Google with

366
00:20:02,710 --> 00:20:11,500
the search for this this is part of the

367
00:20:05,650 --> 00:20:15,220
Neal Stephenson's book and perhaps you

368
00:20:11,500 --> 00:20:27,940
get an idea on this challenge into what

369
00:20:15,220 --> 00:20:34,060
is related to parameters we'll see

370
00:20:27,940 --> 00:20:37,920
number two parameter and what's the

371
00:20:34,060 --> 00:20:41,639
function here in the program program

372
00:20:37,920 --> 00:20:44,050
comparing comparing as it was the case

373
00:20:41,640 --> 00:20:45,610
the first parameter was given to the

374
00:20:44,050 --> 00:20:48,940
first one now the second parameter is

375
00:20:45,610 --> 00:20:56,020
given to the second function and there

376
00:20:48,940 --> 00:20:59,500
are some operations going to the left

377
00:20:56,020 --> 00:21:02,560
and so on so forth and this is in this

378
00:20:59,500 --> 00:21:05,280
case of a hard-coded string hard-coded

379
00:21:02,560 --> 00:21:11,050
string of characters

380
00:21:05,280 --> 00:21:15,250
once they operations they perform the

381
00:21:11,050 --> 00:21:18,129
operations and if they compare this with

382
00:21:15,250 --> 00:21:21,060
the parameter and they coincide this is

383
00:21:18,130 --> 00:21:24,550
going to be used as a code for

384
00:21:21,060 --> 00:21:27,399
deciphering deciphering code it is in

385
00:21:24,550 --> 00:21:32,590
order to whatever here for instance hash

386
00:21:27,400 --> 00:21:35,770
data will have the code or whatever it's

387
00:21:32,590 --> 00:21:38,929
decoding clearly it's decoding

388
00:21:35,770 --> 00:21:41,330
deciphering and that decompiling does

389
00:21:38,930 --> 00:21:44,480
same clearly but we see the version of

390
00:21:41,330 --> 00:21:48,320
the dissemble and we see that what is

391
00:21:44,480 --> 00:21:50,380
given back by the function goes as the

392
00:21:48,320 --> 00:21:53,090
local verbal here as an input and

393
00:21:50,380 --> 00:21:57,380
there's a local variable and you see

394
00:21:53,090 --> 00:22:02,000
that it goes to the one receiving the

395
00:21:57,380 --> 00:22:04,490
code proved crypt create hash and the

396
00:22:02,000 --> 00:22:09,920
code is what stems from this function

397
00:22:04,490 --> 00:22:13,340
what goes out of this function once we

398
00:22:09,920 --> 00:22:16,010
have the code we can have a program in C

399
00:22:13,340 --> 00:22:19,610
language implementing the same thing and

400
00:22:16,010 --> 00:22:21,650
to execute the program or or knowing

401
00:22:19,610 --> 00:22:26,209
that we have an idea and where it goes

402
00:22:21,650 --> 00:22:28,940
we have a debugger the x32 dbg and with

403
00:22:26,210 --> 00:22:31,880
the debugger with a debugger now we're

404
00:22:28,940 --> 00:22:34,340
good to have breakpoints at those points

405
00:22:31,880 --> 00:22:37,190
to check that the analysis and static

406
00:22:34,340 --> 00:22:41,240
analysis dusk respond whether what we

407
00:22:37,190 --> 00:22:42,950
believe it is and then in this item at

408
00:22:41,240 --> 00:22:45,470
this point where we have the defi

409
00:22:42,950 --> 00:22:47,780
deciphering of this who have another

410
00:22:45,470 --> 00:22:50,390
breakpoint comparing this with the

411
00:22:47,780 --> 00:22:54,649
parameter that was conveyed and then we

412
00:22:50,390 --> 00:22:56,220
send randomized parameter first we see

413
00:22:54,650 --> 00:22:59,730
the characters and

414
00:22:56,220 --> 00:23:02,820
we know here we get the second parameter

415
00:22:59,730 --> 00:23:04,740
of this I have a video where I have done

416
00:23:02,820 --> 00:23:07,710
this and I'm going to show the video to

417
00:23:04,740 --> 00:23:10,649
you video on we have the entry point

418
00:23:07,710 --> 00:23:13,049
then I have another one in this main the

419
00:23:10,649 --> 00:23:17,820
main one look at this have another one

420
00:23:13,049 --> 00:23:20,309
here then we skip again we'll go towards

421
00:23:17,820 --> 00:23:23,970
the part where it's comparing with a get

422
00:23:20,309 --> 00:23:26,970
computer name we'll see what's back from

423
00:23:23,970 --> 00:23:29,429
this it's a name of my computer and it's

424
00:23:26,970 --> 00:23:31,289
compared with commando who know which

425
00:23:29,429 --> 00:23:36,389
was the one the name I gave at the

426
00:23:31,289 --> 00:23:38,669
beginning we check because we know the

427
00:23:36,389 --> 00:23:42,469
first one we change the name we swap

428
00:23:38,669 --> 00:23:45,360
we'll put the first name we accept and I

429
00:23:42,470 --> 00:23:49,289
don't know if the video is a bit blurry

430
00:23:45,360 --> 00:23:52,469
or not but then we video again we see it

431
00:23:49,289 --> 00:23:55,559
again we execute again we see that now

432
00:23:52,470 --> 00:23:58,169
it passes the test and here it's

433
00:23:55,559 --> 00:24:02,908
comparing with a string of characters

434
00:23:58,169 --> 00:24:05,490
and I think the video is not time we see

435
00:24:02,909 --> 00:24:07,379
what's been generated the comparison

436
00:24:05,490 --> 00:24:14,279
have accelerated to see the process

437
00:24:07,379 --> 00:24:18,600
let's speed up then note block where I

438
00:24:14,279 --> 00:24:22,980
have included all characters and in the

439
00:24:18,600 --> 00:24:26,189
end it is Neal Stephenson was a string

440
00:24:22,980 --> 00:24:31,110
that appeared there and then we swap it

441
00:24:26,190 --> 00:24:33,029
put lunch gain the program and now we

442
00:24:31,110 --> 00:24:35,339
see

443
00:24:33,029 --> 00:24:38,099
we have a follow break point we see the

444
00:24:35,339 --> 00:24:41,519
comparisons will coincide now and it is

445
00:24:38,099 --> 00:24:44,999
the side we wanted they are comparing

446
00:24:41,519 --> 00:24:48,329
now the string of characters and then

447
00:24:44,999 --> 00:24:57,059
yes let's end this okay the and is that

448
00:24:48,329 --> 00:24:59,129
we get the flag of challenge to you if

449
00:24:57,059 --> 00:25:04,019
you have a time you know what to do and

450
00:24:59,129 --> 00:25:06,658
please go ahead and I wanted to tribute

451
00:25:04,019 --> 00:25:08,699
curiosity you have to create a virtual

452
00:25:06,659 --> 00:25:11,549
machine and to play a little bit with

453
00:25:08,699 --> 00:25:14,669
the virtual machine and now another item

454
00:25:11,549 --> 00:25:17,279
and this is what I wanted to say but I

455
00:25:14,669 --> 00:25:19,679
think that you're not you following me

456
00:25:17,279 --> 00:25:21,929
you're following me yes if not during

457
00:25:19,679 --> 00:25:23,749
the Q&A session can go back and see

458
00:25:21,929 --> 00:25:29,009
things and now we're going to talk about

459
00:25:23,749 --> 00:25:31,829
the Russian Russian puppets with Madonna

460
00:25:29,009 --> 00:25:33,649
Trischka and we're going to find out by

461
00:25:31,829 --> 00:25:37,349
the flag and to overcome this challenge

462
00:25:33,649 --> 00:25:40,289
that is specially difficult this is

463
00:25:37,349 --> 00:25:43,438
matreshka and then on top of this and

464
00:25:40,289 --> 00:25:45,779
this challenge to have a clue that we'll

465
00:25:43,439 --> 00:25:49,589
see we're going to use this or not is to

466
00:25:45,779 --> 00:25:53,969
think about the true ciphering and that

467
00:25:49,589 --> 00:25:57,918
the zip code is infected there is

468
00:25:53,969 --> 00:26:01,229
something and it it is a five star

469
00:25:57,919 --> 00:26:05,219
difficulty it's a we'll see if it is

470
00:26:01,229 --> 00:26:07,469
that difficult let's continue now we get

471
00:26:05,219 --> 00:26:10,249
a zip where we have a binary code inside

472
00:26:07,469 --> 00:26:16,039
we have hash tag here and we just

473
00:26:10,249 --> 00:26:19,159
extract the zip and we see the binary

474
00:26:16,039 --> 00:26:21,799
and now the first thing striking me is

475
00:26:19,159 --> 00:26:24,200
that the header the header is bit odd

476
00:26:21,799 --> 00:26:26,749
strange it's not the typical ones note P

477
00:26:24,200 --> 00:26:31,609
whatever you see the one will you have a

478
00:26:26,749 --> 00:26:33,889
sword and know it is sort of making us

479
00:26:31,609 --> 00:26:36,289
think that the compiler is not the

480
00:26:33,889 --> 00:26:38,779
standard wall not a well-known one you

481
00:26:36,289 --> 00:26:40,519
know the one I've seen till now one of

482
00:26:38,779 --> 00:26:43,369
those have seen two now or they have

483
00:26:40,519 --> 00:26:46,399
used to a type of pattern let's see the

484
00:26:43,369 --> 00:26:49,099
tech TDC so they moved to detected AC

485
00:26:46,399 --> 00:26:52,158
and receive entropy of the binary system

486
00:26:49,099 --> 00:26:54,649
is at a very high level seven point nine

487
00:26:52,159 --> 00:26:59,119
nine nine so it's almost a ninety nine

488
00:26:54,649 --> 00:27:04,219
percent the spidery that we've been

489
00:26:59,119 --> 00:27:07,789
given is packaged so the Packers the

490
00:27:04,220 --> 00:27:09,229
commercial Packers most of them have

491
00:27:07,789 --> 00:27:12,109
been analyzed by the community and they

492
00:27:09,229 --> 00:27:15,139
create created some signatures equally

493
00:27:12,109 --> 00:27:17,928
there are programs where you have a

494
00:27:15,139 --> 00:27:21,289
binary system that could be packaged and

495
00:27:17,929 --> 00:27:26,690
on the basis of these signatures or on

496
00:27:21,289 --> 00:27:30,080
the basis of the execution they tell you

497
00:27:26,690 --> 00:27:34,159
whether the commercial package the

498
00:27:30,080 --> 00:27:35,899
Packer they tell you the the commercial

499
00:27:34,159 --> 00:27:38,029
part of the refused with this detector

500
00:27:35,899 --> 00:27:42,889
may be the Packer that they've used is

501
00:27:38,029 --> 00:27:46,159
Mac code compressor so we know that it's

502
00:27:42,889 --> 00:27:50,119
packaged and in order to see the app

503
00:27:46,159 --> 00:27:52,070
code as the programmer is done we'll

504
00:27:50,119 --> 00:27:54,609
have to apply some transformations we'll

505
00:27:52,070 --> 00:27:57,918
have to stop an execution

506
00:27:54,609 --> 00:28:00,918
it's a executing the binary we'll see

507
00:27:57,919 --> 00:28:03,710
how to do it in order to see the app

508
00:28:00,919 --> 00:28:05,749
code anyway just for the sake of

509
00:28:03,710 --> 00:28:09,489
curiosity were on launch it to sources

510
00:28:05,749 --> 00:28:13,700
and the app was this it was a padlock

511
00:28:09,489 --> 00:28:16,460
that will ask us to type some kind of

512
00:28:13,700 --> 00:28:20,869
combination and depending on what we

513
00:28:16,460 --> 00:28:24,849
type in we will keep on moving so we

514
00:28:20,869 --> 00:28:24,849
know what my code compressor is

515
00:28:25,050 --> 00:28:30,070
and as the community has worked on this

516
00:28:28,450 --> 00:28:33,250
if the first search that you do in

517
00:28:30,070 --> 00:28:36,070
Google is my code my code compressor in

518
00:28:33,250 --> 00:28:41,410
pack you'll see five or six a great

519
00:28:36,070 --> 00:28:43,570
bunch of videos of people D packaging

520
00:28:41,410 --> 00:28:48,160
binaries that have been packaged with

521
00:28:43,570 --> 00:28:49,928
this Packer and the way of packaging

522
00:28:48,160 --> 00:28:52,510
them as well you watch the video news

523
00:28:49,929 --> 00:28:55,150
here you say well this exactly one so

524
00:28:52,510 --> 00:29:01,450
let's see how we can do it so in this

525
00:28:55,150 --> 00:29:04,450
case it's quite similar to upx and we

526
00:29:01,450 --> 00:29:08,890
get to the entry point we would continue

527
00:29:04,450 --> 00:29:10,870
through ESP in the uploading and the

528
00:29:08,890 --> 00:29:12,670
address that we have well we would

529
00:29:10,870 --> 00:29:14,800
include a hard word break point we would

530
00:29:12,670 --> 00:29:17,800
last the binary execute and we would

531
00:29:14,800 --> 00:29:19,809
come to the jump before the original

532
00:29:17,800 --> 00:29:22,059
entry point just before the original

533
00:29:19,809 --> 00:29:23,980
entry point and this is the entropy of

534
00:29:22,059 --> 00:29:27,399
the original program before being

535
00:29:23,980 --> 00:29:30,900
replaced by the packet okay so we would

536
00:29:27,400 --> 00:29:35,380
tamper the binary we would look for the

537
00:29:30,900 --> 00:29:37,600
importable of this new binary and we

538
00:29:35,380 --> 00:29:40,540
would fix it so that the binary can be

539
00:29:37,600 --> 00:29:43,570
executed from the disk and here we would

540
00:29:40,540 --> 00:29:46,899
check that the binary has grown from one

541
00:29:43,570 --> 00:29:49,750
point six megabytes to almost five point

542
00:29:46,900 --> 00:29:51,880
and megabytes and it's still executable

543
00:29:49,750 --> 00:29:55,630
so this way we have been able to

544
00:29:51,880 --> 00:29:58,179
retrieve the most similar things to the

545
00:29:55,630 --> 00:30:00,910
original code of the app and we've have

546
00:29:58,179 --> 00:30:03,970
we have something to see it and with a

547
00:30:00,910 --> 00:30:06,040
static analysis so if we have a look at

548
00:30:03,970 --> 00:30:08,530
this detector of this binary refer

549
00:30:06,040 --> 00:30:11,200
detected detect it easy we see that it

550
00:30:08,530 --> 00:30:12,879
has been done with a Delfy and we see

551
00:30:11,200 --> 00:30:16,330
that the Anthropy has been reduced to

552
00:30:12,880 --> 00:30:18,640
five point 35 so we're almost 100% sure

553
00:30:16,330 --> 00:30:20,379
that we'll be able to include some some

554
00:30:18,640 --> 00:30:23,020
code some codes and we'll be able to

555
00:30:20,380 --> 00:30:27,260
play around with it

556
00:30:23,020 --> 00:30:30,350
so looking for correctly characters or

557
00:30:27,260 --> 00:30:32,000
strains we've seen that we have had pad

558
00:30:30,350 --> 00:30:34,610
we have buttons or so button to

559
00:30:32,000 --> 00:30:37,520
one-click button to click these trends

560
00:30:34,610 --> 00:30:39,889
were quite curious were quite curious to

561
00:30:37,520 --> 00:30:43,100
me and I saw that they were defined in

562
00:30:39,890 --> 00:30:47,660
an structure were above every strain

563
00:30:43,100 --> 00:30:52,399
there was an offset to a function so I

564
00:30:47,660 --> 00:30:57,230
saw how the graph graphic interfaces in

565
00:30:52,400 --> 00:31:00,410
toughy work and this well these offsets

566
00:30:57,230 --> 00:31:04,130
are the functions that are dealing with

567
00:31:00,410 --> 00:31:06,110
the pulses of every button so here they

568
00:31:04,130 --> 00:31:10,370
are the appearance button one button two

569
00:31:06,110 --> 00:31:13,520
and we have numbers but we have to to

570
00:31:10,370 --> 00:31:15,979
see that button one doesn't match number

571
00:31:13,520 --> 00:31:19,040
one so in order to see what every

572
00:31:15,980 --> 00:31:21,770
function does we need to see the length

573
00:31:19,040 --> 00:31:25,040
between button one what button it really

574
00:31:21,770 --> 00:31:31,610
is in the interface so for this what I

575
00:31:25,040 --> 00:31:35,210
did was to upload the application in the

576
00:31:31,610 --> 00:31:40,580
debugger and as we have the opposites

577
00:31:35,210 --> 00:31:44,600
here I included a break point as every

578
00:31:40,580 --> 00:31:47,929
offset so that it stops here to launch

579
00:31:44,600 --> 00:31:49,850
the app for example I click on a and I

580
00:31:47,930 --> 00:31:51,710
see what offset I've stopped so if this

581
00:31:49,850 --> 00:31:55,490
offset is the one that I have here okay

582
00:31:51,710 --> 00:31:59,120
so button one is a repeating this with

583
00:31:55,490 --> 00:32:02,990
every with with with every button we see

584
00:31:59,120 --> 00:32:07,159
that one side - is e etc etc so this

585
00:32:02,990 --> 00:32:10,100
already we can see the strain and a

586
00:32:07,160 --> 00:32:14,300
function that is called fun create this

587
00:32:10,100 --> 00:32:18,139
function initializes the logic of the

588
00:32:14,300 --> 00:32:20,389
graphic interface to initialize

589
00:32:18,140 --> 00:32:21,980
variables all the logic that the

590
00:32:20,390 --> 00:32:26,759
programmer has created for this

591
00:32:21,980 --> 00:32:30,479
interface so if you have a look at this

592
00:32:26,759 --> 00:32:34,709
function we see some variables that have

593
00:32:30,479 --> 00:32:37,889
been renamed but initially you see that

594
00:32:34,709 --> 00:32:42,659
these are variables as you can see on

595
00:32:37,889 --> 00:32:47,728
the screen and if you keep well if you

596
00:32:42,659 --> 00:32:52,769
follow the program areas where these

597
00:32:47,729 --> 00:32:55,259
variables are used you see that there's

598
00:32:52,769 --> 00:32:58,309
an increase of these of this variable

599
00:32:55,259 --> 00:33:01,139
and this is included in a button code

600
00:32:58,309 --> 00:33:04,619
specifically this is included in button

601
00:33:01,139 --> 00:33:08,549
a so these are counters of how many

602
00:33:04,619 --> 00:33:10,708
times you've clicked on these buttons so

603
00:33:08,549 --> 00:33:13,859
there's a counter for buckling a 1/4

604
00:33:10,709 --> 00:33:18,959
button II another 1/4 button 3 and

605
00:33:13,859 --> 00:33:23,099
another one for button C ok and what we

606
00:33:18,959 --> 00:33:25,169
can see afterwards is that this is moved

607
00:33:23,099 --> 00:33:28,979
to a local variable and after that to a

608
00:33:25,169 --> 00:33:31,199
specific offset that these ones where

609
00:33:28,979 --> 00:33:34,379
you can see here I know them down

610
00:33:31,199 --> 00:33:36,929
because they are retrieved these is

611
00:33:34,379 --> 00:33:40,259
retrieved from these offsets to compare

612
00:33:36,929 --> 00:33:43,769
to another function so just to know or

613
00:33:40,259 --> 00:33:52,529
to note down that button a is 980 the

614
00:33:43,769 --> 00:33:54,690
other one is 900 and 984 etc and this is

615
00:33:52,529 --> 00:33:56,519
this on one hand and if you keep on

616
00:33:54,690 --> 00:34:02,429
seeing character strains on this binary

617
00:33:56,519 --> 00:34:04,499
you see that on the one hand this these

618
00:34:02,429 --> 00:34:07,799
strains are some of these strains are

619
00:34:04,499 --> 00:34:11,250
quite big and one of them stays starts

620
00:34:07,799 --> 00:34:14,879
with 4 D 5 a header this is the

621
00:34:11,250 --> 00:34:21,179
equivalent in ASCI I to NZ that is the

622
00:34:14,879 --> 00:34:25,049
header of our windows binary so it could

623
00:34:21,179 --> 00:34:26,730
suspect that in some way we would say

624
00:34:25,049 --> 00:34:27,899
where this has been used we see that

625
00:34:26,730 --> 00:34:30,569
there's a function where it seems that

626
00:34:27,899 --> 00:34:32,460
there is another variable and after that

627
00:34:30,569 --> 00:34:34,570
this variable moves to a function where

628
00:34:32,460 --> 00:34:37,210
there is a right and there's a

629
00:34:34,570 --> 00:34:40,210
okay so everything seems to indicate

630
00:34:37,210 --> 00:34:42,909
that there's another binary round that

631
00:34:40,210 --> 00:34:48,070
will be written in the disk so when

632
00:34:42,909 --> 00:34:50,140
something happens on the disk if we keep

633
00:34:48,070 --> 00:34:52,000
on looking we see the variable as being

634
00:34:50,139 --> 00:34:55,299
Coppedge that has been renamed marine

635
00:34:52,000 --> 00:34:59,260
and s is at part one or chunk one we see

636
00:34:55,300 --> 00:35:02,190
where it is used and we see that we are

637
00:34:59,260 --> 00:35:05,590
moving to other functions and if you

638
00:35:02,190 --> 00:35:07,090
check that these are variables at the

639
00:35:05,590 --> 00:35:11,470
same time that they are following this

640
00:35:07,090 --> 00:35:13,030
order so I guessed and I saw that that

641
00:35:11,470 --> 00:35:16,870
was the case that this was the order

642
00:35:13,030 --> 00:35:18,580
that the binary building was going I was

643
00:35:16,870 --> 00:35:24,759
going to follow so chunk one check two

644
00:35:18,580 --> 00:35:27,670
chain three and after that I renamed all

645
00:35:24,760 --> 00:35:31,320
these asked all these functions and I

646
00:35:27,670 --> 00:35:31,320
renamed the function as part one

647
00:35:31,830 --> 00:35:38,470
variable to you as part two and I looked

648
00:35:35,260 --> 00:35:41,620
at where these functions were called and

649
00:35:38,470 --> 00:35:45,490
if you follow them we can see that both

650
00:35:41,620 --> 00:35:48,970
parts one and two and what I do in the

651
00:35:45,490 --> 00:35:51,370
functions come in a row and they are

652
00:35:48,970 --> 00:35:53,410
called in the offset code that manage

653
00:35:51,370 --> 00:35:56,049
the lodging of paten a if you do the

654
00:35:53,410 --> 00:35:58,270
same for the other parts which well you

655
00:35:56,050 --> 00:36:00,370
see that beforehand there are some

656
00:35:58,270 --> 00:36:02,680
requirements that we'll see but if we do

657
00:36:00,370 --> 00:36:05,650
the same with the other parts well see

658
00:36:02,680 --> 00:36:07,779
that for part three and four and five

659
00:36:05,650 --> 00:36:09,910
and six are on the bottom okay

660
00:36:07,780 --> 00:36:13,360
and seven and eight are on the bottom C

661
00:36:09,910 --> 00:36:17,890
so it seems that these are the partners

662
00:36:13,360 --> 00:36:20,530
that will participate in our pad and the

663
00:36:17,890 --> 00:36:23,500
ones that will have to do something with

664
00:36:20,530 --> 00:36:27,730
if we have a closer look to the code a

665
00:36:23,500 --> 00:36:30,030
code the button a codes are in we see

666
00:36:27,730 --> 00:36:32,110
that agree comes the variables that we

667
00:36:30,030 --> 00:36:33,340
considered as counters before and

668
00:36:32,110 --> 00:36:35,410
they're included in another local

669
00:36:33,340 --> 00:36:37,960
variable and after that there will be a

670
00:36:35,410 --> 00:36:40,270
comparison of that with other values

671
00:36:37,960 --> 00:36:41,990
that have been defined

672
00:36:40,270 --> 00:36:44,580
[Music]

673
00:36:41,990 --> 00:36:49,560
that are fixed in the code in this case

674
00:36:44,580 --> 00:36:52,490
these are four and zero so we see that

675
00:36:49,560 --> 00:36:56,150
it is recovering it and when we click on

676
00:36:52,490 --> 00:37:00,120
it was the function that way that

677
00:36:56,150 --> 00:37:02,130
executes when we push a button so it

678
00:37:00,120 --> 00:37:05,160
checks how many times this button has

679
00:37:02,130 --> 00:37:07,950
been clicked and it compares it with for

680
00:37:05,160 --> 00:37:11,069
with button Ian is compared with 0 and

681
00:37:07,950 --> 00:37:13,350
button see with zero so if we click on a

682
00:37:11,070 --> 00:37:16,640
four four times at the fourth time this

683
00:37:13,350 --> 00:37:20,190
condition will emerge and we'll see that

684
00:37:16,640 --> 00:37:22,920
there will be a file on the disk with T

685
00:37:20,190 --> 00:37:26,510
dot TMP that contains the two first

686
00:37:22,920 --> 00:37:31,290
parts of what is considered as an e MZ

687
00:37:26,510 --> 00:37:32,730
if we click on OK it has the safe one

688
00:37:31,290 --> 00:37:37,290
and after that the other one on the

689
00:37:32,730 --> 00:37:40,440
first one well these counters are global

690
00:37:37,290 --> 00:37:43,170
ok they do not change so it looks how

691
00:37:40,440 --> 00:37:45,240
many times Buckner has been clicked we

692
00:37:43,170 --> 00:37:47,130
don't have to click on a more times

693
00:37:45,240 --> 00:37:51,080
before clicking on our K how many times

694
00:37:47,130 --> 00:37:53,220
we've clicked on e zero and one for C so

695
00:37:51,080 --> 00:37:56,549
clicking on a four four times and

696
00:37:53,220 --> 00:37:58,799
clicking on save for one just once we

697
00:37:56,550 --> 00:38:01,500
would have the part three and four do

698
00:37:58,800 --> 00:38:03,000
you get on long more or less get it well

699
00:38:01,500 --> 00:38:08,970
each Eklund same happens for the second

700
00:38:03,000 --> 00:38:11,250
part a has to be 5 times C 1 one time

701
00:38:08,970 --> 00:38:14,419
and we have the next parts and with the

702
00:38:11,250 --> 00:38:16,380
button see you have the same the same

703
00:38:14,420 --> 00:38:17,610
checks with the same value with the

704
00:38:16,380 --> 00:38:21,090
other values and in the end it has a

705
00:38:17,610 --> 00:38:23,970
code but it just renamed T dot TMP to a

706
00:38:21,090 --> 00:38:28,680
dot X a and each launches the binary

707
00:38:23,970 --> 00:38:31,620
okay so we could launch this on the

708
00:38:28,680 --> 00:38:34,890
debugger and as far as we know the

709
00:38:31,620 --> 00:38:36,870
combination we've been cool breakpoints

710
00:38:34,890 --> 00:38:38,950
in those offsets that we had to check

711
00:38:36,870 --> 00:38:41,650
that this really case

712
00:38:38,950 --> 00:38:43,750
and we could include a one last break

713
00:38:41,650 --> 00:38:45,460
point before the binary executes so as

714
00:38:43,750 --> 00:38:47,829
it's written on the disk we will have it

715
00:38:45,460 --> 00:38:49,720
as itself as such and we will have to

716
00:38:47,829 --> 00:38:53,170
see what we keep on doing with this new

717
00:38:49,720 --> 00:38:56,490
binary so we'll do this and once we

718
00:38:53,170 --> 00:39:00,490
recover this new binary that is a dot XA

719
00:38:56,490 --> 00:39:02,259
we repeat the process the same again we

720
00:39:00,490 --> 00:39:05,109
have a look at it to see what compiler

721
00:39:02,260 --> 00:39:08,200
we've used to created in this case I've

722
00:39:05,109 --> 00:39:11,619
used this XA a info that tells us that

723
00:39:08,200 --> 00:39:15,308
maybe it is a visual C++ we look at the

724
00:39:11,619 --> 00:39:19,119
Anthropy and it doesn't seem that it's

725
00:39:15,309 --> 00:39:21,099
packaged so we upload it again and we

726
00:39:19,119 --> 00:39:26,019
perform another static analysis of this

727
00:39:21,099 --> 00:39:28,839
new binary as it is with visual C++

728
00:39:26,019 --> 00:39:33,640
Visual C++ sorry we would move to the

729
00:39:28,839 --> 00:39:36,130
entry point we threw a strain or having

730
00:39:33,640 --> 00:39:38,348
a look at the D compiler code we would

731
00:39:36,130 --> 00:39:40,269
look we would find the main function or

732
00:39:38,349 --> 00:39:43,450
through an API that could call your

733
00:39:40,269 --> 00:39:47,500
attention you would move to the part

734
00:39:43,450 --> 00:39:49,808
where the main code is the first

735
00:39:47,500 --> 00:39:52,740
instruction that we see is a get console

736
00:39:49,809 --> 00:39:57,250
window we see the windows versus

737
00:39:52,740 --> 00:40:01,359
executing ad and if we have looked at

738
00:39:57,250 --> 00:40:06,519
MSD DN MSDN it says that it should be

739
00:40:01,359 --> 00:40:09,390
hidden I don't know the prefix but the

740
00:40:06,519 --> 00:40:13,538
program as soon as it executes will hide

741
00:40:09,390 --> 00:40:20,140
the window where it is executing the CMD

742
00:40:13,539 --> 00:40:24,220
or whatever so after this we'll see a

743
00:40:20,140 --> 00:40:26,078
stream of operations that you can

744
00:40:24,220 --> 00:40:27,700
include you see loops you can do things

745
00:40:26,079 --> 00:40:30,940
and eventually you see that with all

746
00:40:27,700 --> 00:40:34,899
this it doesn't do anything it it's

747
00:40:30,940 --> 00:40:36,940
stored in the variables it releases them

748
00:40:34,900 --> 00:40:39,519
it reassigns them well if you compare

749
00:40:36,940 --> 00:40:41,079
with the P with a PI calculation

750
00:40:39,519 --> 00:40:44,189
algorithm it was this

751
00:40:41,079 --> 00:40:48,490
I mean it's code to delay the execution

752
00:40:44,190 --> 00:40:50,290
so you have to stop here of course you

753
00:40:48,490 --> 00:40:55,089
have to lose some time

754
00:40:50,290 --> 00:40:58,240
or if you are if you are very good and

755
00:40:55,090 --> 00:41:00,850
you see it you see you say oh okay

756
00:40:58,240 --> 00:41:05,799
that's fine but after doing this the

757
00:41:00,850 --> 00:41:07,509
next step would be something a little

758
00:41:05,800 --> 00:41:12,130
bit more relevant and it's a function

759
00:41:07,510 --> 00:41:16,180
that is called with a new thread with

760
00:41:12,130 --> 00:41:21,990
create fur and this function makes a

761
00:41:16,180 --> 00:41:26,169
hook to the dbg you remote breaking API

762
00:41:21,990 --> 00:41:29,350
this API is called when you have a

763
00:41:26,170 --> 00:41:32,560
binary that is executing a Nutella

764
00:41:29,350 --> 00:41:40,150
debugger to attach to this process to

765
00:41:32,560 --> 00:41:45,460
debugging so what it's doing here is to

766
00:41:40,150 --> 00:41:47,650
have a look where the API addresses and

767
00:41:45,460 --> 00:41:53,980
it is telling it to write down what that

768
00:41:47,650 --> 00:41:59,200
API is to jump to exit to exit processes

769
00:41:53,980 --> 00:42:01,330
so that when you attach to the binary it

770
00:41:59,200 --> 00:42:05,500
calls exit process and it's done it is

771
00:42:01,330 --> 00:42:08,290
an anti attach measure and here we can

772
00:42:05,500 --> 00:42:10,270
see before and after this API if you

773
00:42:08,290 --> 00:42:13,480
keep on what the API is you see that

774
00:42:10,270 --> 00:42:16,060
normally speaking space and some

775
00:42:13,480 --> 00:42:17,590
references and once this code section

776
00:42:16,060 --> 00:42:21,480
has been executed you see that it jumps

777
00:42:17,590 --> 00:42:26,670
to exit process okay so to skip this

778
00:42:21,480 --> 00:42:32,020
debugger you'd have to note this call or

779
00:42:26,670 --> 00:42:36,490
to to know the write process memory call

780
00:42:32,020 --> 00:42:39,940
for example in order to avoid this hook

781
00:42:36,490 --> 00:42:42,850
from happening we continue there are

782
00:42:39,940 --> 00:42:46,090
there a small code then that makes a

783
00:42:42,850 --> 00:42:49,720
different verifications and what it

784
00:42:46,090 --> 00:42:51,670
checks are the permission stars that

785
00:42:49,720 --> 00:42:55,480
this binary has to be executed and it

786
00:42:51,670 --> 00:42:58,360
does it with this IPRs with a certain

787
00:42:55,480 --> 00:43:00,310
information to a stroke with token

788
00:42:58,360 --> 00:43:02,220
elevation as a parameter so we can see

789
00:43:00,310 --> 00:43:03,990
whether the program is being executed

790
00:43:02,220 --> 00:43:05,879
with the permission token and that's

791
00:43:03,990 --> 00:43:08,270
telling us that the banner will have to

792
00:43:05,880 --> 00:43:12,300
be executed with administrator

793
00:43:08,270 --> 00:43:15,530
permission on the other hand it's true

794
00:43:12,300 --> 00:43:18,570
that we could skip this but maybe this

795
00:43:15,530 --> 00:43:21,450
check is being done because maybe the

796
00:43:18,570 --> 00:43:22,950
administrators need some some time of

797
00:43:21,450 --> 00:43:24,810
permission so it's for free so we can

798
00:43:22,950 --> 00:43:30,330
execute it as an administrator and

799
00:43:24,810 --> 00:43:33,420
that's fine on the other hand as a crown

800
00:43:30,330 --> 00:43:36,000
previous correctly did it uses the

801
00:43:33,420 --> 00:43:37,980
create to health to the two structures

802
00:43:36,000 --> 00:43:40,140
API to make a snapshot of the processes

803
00:43:37,980 --> 00:43:44,550
and it goes through them and it checks

804
00:43:40,140 --> 00:43:48,270
in this case that processes father so to

805
00:43:44,550 --> 00:43:49,770
speak should be process with an end CMD

806
00:43:48,270 --> 00:43:52,920
dot X a it doesn't mean that it has to

807
00:43:49,770 --> 00:43:55,110
be CMD dot X a from Windows we could

808
00:43:52,920 --> 00:43:57,810
rename our debugger as CMD on X a and

809
00:43:55,110 --> 00:44:01,100
this condition would be fulfilled or

810
00:43:57,810 --> 00:44:07,400
including a breakpoint and skipping it

811
00:44:01,100 --> 00:44:09,810
after that more checks we see or it

812
00:44:07,400 --> 00:44:11,880
verifies that the Windows version that

813
00:44:09,810 --> 00:44:13,410
we are using to execute this well it's a

814
00:44:11,880 --> 00:44:18,510
little bit tricky here because it's a

815
00:44:13,410 --> 00:44:20,910
live and sometimes it chance where we do

816
00:44:18,510 --> 00:44:23,130
not want it to jump so it has to see

817
00:44:20,910 --> 00:44:27,180
that the Windows version is a Windows 7

818
00:44:23,130 --> 00:44:29,270
on and after that it has a new thread it

819
00:44:27,180 --> 00:44:31,830
creates a new thread with other a

820
00:44:29,270 --> 00:44:37,080
function that we'll have a look at right

821
00:44:31,830 --> 00:44:41,520
now out of this thread a variable is

822
00:44:37,080 --> 00:44:44,069
assigned or allocated and we very far

823
00:44:41,520 --> 00:44:46,950
the not of this variable so that we need

824
00:44:44,070 --> 00:44:48,930
to verify that this variable is set so

825
00:44:46,950 --> 00:44:50,850
that it doesn't care get into the lift

826
00:44:48,930 --> 00:44:53,339
because we don't want that because this

827
00:44:50,850 --> 00:44:56,180
moves directly to a protection that

828
00:44:53,340 --> 00:44:58,250
would delete the executable

829
00:44:56,180 --> 00:45:00,140
so what do we have in this new threat

830
00:44:58,250 --> 00:45:04,400
and this new threat

831
00:45:00,140 --> 00:45:07,460
we have called together saying get a

832
00:45:04,400 --> 00:45:12,799
sign he state and we have a look at MSDN

833
00:45:07,460 --> 00:45:15,319
this is to lock the keyboard pulses and

834
00:45:12,799 --> 00:45:18,980
what does it do with this it has a

835
00:45:15,319 --> 00:45:21,500
counter at the end it checks that it's

836
00:45:18,980 --> 00:45:26,569
different from 12 and it increases every

837
00:45:21,500 --> 00:45:29,869
time we click on an on a key so when we

838
00:45:26,569 --> 00:45:32,029
click on one key for 12 times it will

839
00:45:29,869 --> 00:45:35,690
get out of the scope we do not know what

840
00:45:32,029 --> 00:45:41,230
the key it is but we will have to see

841
00:45:35,690 --> 00:45:47,359
what it does with it if this function

842
00:45:41,230 --> 00:45:53,480
the 14 17 F 0 that has the reference of

843
00:45:47,359 --> 00:45:55,578
what the user has just introduced says

844
00:45:53,480 --> 00:46:01,970
that everything is correct we would

845
00:45:55,579 --> 00:46:05,359
write the next 6 characters in a

846
00:46:01,970 --> 00:46:06,470
registry key that would be current user

847
00:46:05,359 --> 00:46:08,839
software interact

848
00:46:06,470 --> 00:46:13,220
it sets the variable that we were saying

849
00:46:08,839 --> 00:46:15,470
that we want to set in 1 to make the

850
00:46:13,220 --> 00:46:18,140
comparison later on so what does this

851
00:46:15,470 --> 00:46:19,368
function do to compare the value so as

852
00:46:18,140 --> 00:46:25,879
happen as has happened before

853
00:46:19,369 --> 00:46:28,789
we have a jet of code a code jet the

854
00:46:25,880 --> 00:46:33,140
well these are base operations with a

855
00:46:28,789 --> 00:46:37,130
variable defined on other side equally

856
00:46:33,140 --> 00:46:39,950
we can either try to copy this and make

857
00:46:37,130 --> 00:46:41,960
or create a program in C on Python or

858
00:46:39,950 --> 00:46:43,430
wherever you want it but in fact thing

859
00:46:41,960 --> 00:46:45,619
you have to be careful because this is

860
00:46:43,430 --> 00:46:47,779
roll on roll 1 it's taking the lowest

861
00:46:45,619 --> 00:46:50,329
part of the registry so you need to use

862
00:46:47,779 --> 00:46:54,829
these variables or to use more faces too

863
00:46:50,329 --> 00:46:57,710
or masks sorry to to do it if you don't

864
00:46:54,829 --> 00:47:01,430
have time you can do it on C or if you

865
00:46:57,710 --> 00:47:03,170
even have less time executable you have

866
00:47:01,430 --> 00:47:05,029
to launch the executable and you have to

867
00:47:03,170 --> 00:47:07,420
include a break point when the

868
00:47:05,029 --> 00:47:09,849
comparisons is done

869
00:47:07,420 --> 00:47:11,890
between what you've taken out from here

870
00:47:09,849 --> 00:47:14,799
and what we've just included so apart

871
00:47:11,890 --> 00:47:16,690
from all of this you have to verify that

872
00:47:14,799 --> 00:47:19,299
the variable that we've passed it's 12

873
00:47:16,690 --> 00:47:21,609
we know that it has a life of 12 and you

874
00:47:19,299 --> 00:47:25,210
should check the six first characters of

875
00:47:21,609 --> 00:47:27,910
it so that executing this function and

876
00:47:25,210 --> 00:47:30,880
doing these breakpoints we'd be able to

877
00:47:27,910 --> 00:47:33,549
know what's our other six first scan of

878
00:47:30,880 --> 00:47:36,549
six first characters that the binary is

879
00:47:33,549 --> 00:47:39,190
expecting so this is what I've done here

880
00:47:36,549 --> 00:47:41,380
I've stopped just before calling this

881
00:47:39,190 --> 00:47:42,490
function and now I'm going to get in and

882
00:47:41,380 --> 00:47:53,440
I'm going to have a look at the

883
00:47:42,490 --> 00:47:55,660
comparison and dramas so we get in we

884
00:47:53,440 --> 00:47:59,619
see the operation stream the operations

885
00:47:55,660 --> 00:48:04,058
flow we put a breakpoint right here we

886
00:47:59,619 --> 00:48:07,980
execute it and I'm still uploading

887
00:48:04,059 --> 00:48:11,529
memory of this variable that will be

888
00:48:07,980 --> 00:48:13,180
writing down initially it's this so now

889
00:48:11,529 --> 00:48:15,160
I'm going to perform to promote

890
00:48:13,180 --> 00:48:22,029
transformation you can see how it's

891
00:48:15,160 --> 00:48:24,069
going to be executed we execute it it's

892
00:48:22,029 --> 00:48:26,410
a little bit start but well you can see

893
00:48:24,069 --> 00:48:28,779
and it is Atari and if you have a look

894
00:48:26,410 --> 00:48:31,690
at lexa this is the space here's the

895
00:48:28,779 --> 00:48:38,590
first six first characters are Atari

896
00:48:31,690 --> 00:48:41,950
space r2 this

897
00:48:38,590 --> 00:48:43,960
there are more checks it checks whether

898
00:48:41,950 --> 00:48:46,720
you are doing it in a virtual machine in

899
00:48:43,960 --> 00:48:50,320
this case the verification is through

900
00:48:46,720 --> 00:48:53,529
registration registry codes when you

901
00:48:50,320 --> 00:48:57,100
install the les éditions in a machine to

902
00:48:53,530 --> 00:49:01,390
make it compatible with the screen size

903
00:48:57,100 --> 00:49:04,870
to make file copies these leaves the

904
00:49:01,390 --> 00:49:07,720
trace in Windows logs that are these

905
00:49:04,870 --> 00:49:11,049
specific codes so if we make a check and

906
00:49:07,720 --> 00:49:12,640
these keys exist these goes exists we

907
00:49:11,050 --> 00:49:16,900
know that we are executing it on a

908
00:49:12,640 --> 00:49:21,129
virtual machine after this there's

909
00:49:16,900 --> 00:49:23,800
another anti debug measure well we have

910
00:49:21,130 --> 00:49:29,260
the reference here we can see how we use

911
00:49:23,800 --> 00:49:31,510
it and it's calling an a ent DL API

912
00:49:29,260 --> 00:49:34,210
there's another debug measure that we

913
00:49:31,510 --> 00:49:41,130
could skip changing registry and that's

914
00:49:34,210 --> 00:49:46,060
it so after all this we would have the

915
00:49:41,130 --> 00:49:52,960
file writing with P name that you can

916
00:49:46,060 --> 00:49:55,120
see you can see there you have you have

917
00:49:52,960 --> 00:49:57,820
the buffer of what we were going to

918
00:49:55,120 --> 00:50:00,940
write so we're at this that it seems at

919
00:49:57,820 --> 00:50:02,830
64 strain it looks like a 64 strain and

920
00:50:00,940 --> 00:50:07,570
it's going to write a P file with this

921
00:50:02,830 --> 00:50:09,960
content on the other hand well I saw

922
00:50:07,570 --> 00:50:12,760
this before but it made more sense to

923
00:50:09,960 --> 00:50:16,180
input this and this part because it is

924
00:50:12,760 --> 00:50:21,310
when it is used it has resource with the

925
00:50:16,180 --> 00:50:25,569
name 666 and after the OTP it creates

926
00:50:21,310 --> 00:50:31,750
the resource and it takes it to another

927
00:50:25,570 --> 00:50:34,540
file with the name one dot ps1 so if we

928
00:50:31,750 --> 00:50:37,990
do not make some of these replications

929
00:50:34,540 --> 00:50:42,400
of binary we'll make pink and with this

930
00:50:37,990 --> 00:50:44,589
land would call bail and moves this and

931
00:50:42,400 --> 00:50:49,990
passes this strain that is the name of

932
00:50:44,590 --> 00:50:51,580
its executable so it's deleted so it's

933
00:50:49,990 --> 00:50:53,169
not a measure that may

934
00:50:51,580 --> 00:50:54,759
analysis is more difficult because we

935
00:50:53,170 --> 00:50:59,110
need to have a copy and we need to do

936
00:50:54,760 --> 00:51:02,230
this so okay what have we got what do we

937
00:50:59,110 --> 00:51:05,020
have we have a P and P dot ps1 so we

938
00:51:02,230 --> 00:51:06,390
would execute it we would see the

939
00:51:05,020 --> 00:51:13,259
different conditions will you write down

940
00:51:06,390 --> 00:51:13,259
Atari they say that we're going to make

