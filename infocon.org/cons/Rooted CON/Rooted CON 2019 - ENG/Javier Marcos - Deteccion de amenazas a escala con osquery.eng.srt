1
00:00:00,120 --> 00:00:06,450
muchas gracias thank you very much for

2
00:00:03,030 --> 00:00:10,500
being here and I'd like to thank rooted

3
00:00:06,450 --> 00:00:14,059
for this opportunity and happy 10th

4
00:00:10,500 --> 00:00:17,940
anniversary and we're going to command

5
00:00:14,059 --> 00:00:20,580
scale threats detection would have been

6
00:00:17,940 --> 00:00:22,439
working on for the last years with

7
00:00:20,580 --> 00:00:25,470
different tools one of the tools have

8
00:00:22,439 --> 00:00:27,630
developed is what I have deployed in

9
00:00:25,470 --> 00:00:31,080
certain environments corporate

10
00:00:27,630 --> 00:00:33,930
environments and also what does still

11
00:00:31,080 --> 00:00:39,890
use this osprey and after this

12
00:00:33,930 --> 00:00:42,660
introduction and you know that detection

13
00:00:39,890 --> 00:00:45,719
security and safety engineering free

14
00:00:42,660 --> 00:00:48,750
source open source this is where I

15
00:00:45,719 --> 00:00:51,780
prefer I always work with companies and

16
00:00:48,750 --> 00:00:55,350
big scale now working with paper mechs

17
00:00:51,780 --> 00:00:58,260
so let's move forward the first part of

18
00:00:55,350 --> 00:01:01,350
my presentation it is precisely I've

19
00:00:58,260 --> 00:01:05,840
divided my presentation into three parts

20
00:01:01,350 --> 00:01:10,350
first part is precisely the OS query

21
00:01:05,840 --> 00:01:13,580
what is OS query the way it works the

22
00:01:10,350 --> 00:01:16,679
case were can use it configure this and

23
00:01:13,580 --> 00:01:19,289
summon accounts some aspects some

24
00:01:16,680 --> 00:01:21,720
advices to start using this and then

25
00:01:19,290 --> 00:01:25,860
after this I'm going to try to explain

26
00:01:21,720 --> 00:01:28,829
the concept of the OS query client their

27
00:01:25,860 --> 00:01:31,619
servers and a network nodes where we'll

28
00:01:28,829 --> 00:01:33,929
have directional communication issues we

29
00:01:31,619 --> 00:01:36,720
will sort of the second part regarding

30
00:01:33,930 --> 00:01:38,780
of servers the configuration aspects and

31
00:01:36,720 --> 00:01:41,369
we'll try to explain concepts

32
00:01:38,780 --> 00:01:44,369
consultations programmed consultations

33
00:01:41,369 --> 00:01:46,549
programming of queries and PACs and how

34
00:01:44,369 --> 00:01:50,100
the queries will play a role regarding

35
00:01:46,549 --> 00:01:52,530
they yield regarding what we achieve

36
00:01:50,100 --> 00:01:54,270
with this because it's very important to

37
00:01:52,530 --> 00:01:58,450
have the minimum fingerprint with other

38
00:01:54,270 --> 00:02:01,509
system and to enhance their resort

39
00:01:58,450 --> 00:02:04,600
second part of lecture will be the

40
00:02:01,509 --> 00:02:08,169
second part will be to use the remote

41
00:02:04,600 --> 00:02:11,379
API which is a concept we use and

42
00:02:08,169 --> 00:02:16,720
details related to configuration we can

43
00:02:11,379 --> 00:02:20,170
use flax and also basic commands on OS

44
00:02:16,720 --> 00:02:24,069
Curie like our memories and almost

45
00:02:20,170 --> 00:02:27,309
real-time file carving and then we will

46
00:02:24,069 --> 00:02:30,458
have a demonstration on a TLS endpoint

47
00:02:27,310 --> 00:02:33,880
we're using for the last few years so

48
00:02:30,459 --> 00:02:36,940
start with two months how many of you

49
00:02:33,880 --> 00:02:40,900
have already heard the operating system

50
00:02:36,940 --> 00:02:42,730
the operating system query OS query how

51
00:02:40,900 --> 00:02:46,750
many of you have used to this operating

52
00:02:42,730 --> 00:02:50,488
system well not many well we'll see OS

53
00:02:46,750 --> 00:02:54,340
query is a tool it's a tool that it's

54
00:02:50,489 --> 00:02:57,130
adding layer to the operating operating

55
00:02:54,340 --> 00:03:00,130
system or you could carve information

56
00:02:57,130 --> 00:03:05,440
using SQL it's been developed and it's

57
00:03:00,130 --> 00:03:09,910
been open-source ills 2014 end of 2014

58
00:03:05,440 --> 00:03:12,519
and Facebook was a company developing

59
00:03:09,910 --> 00:03:15,579
this and I had the opportunity of

60
00:03:12,519 --> 00:03:17,980
starting working on that from the very

61
00:03:15,579 --> 00:03:21,400
beginning so we know how it works

62
00:03:17,980 --> 00:03:24,548
OS query internally and there were

63
00:03:21,400 --> 00:03:28,150
critical parts also but the truth is

64
00:03:24,549 --> 00:03:31,900
that it is important to know the tool

65
00:03:28,150 --> 00:03:35,079
and to analyze the instructions were the

66
00:03:31,900 --> 00:03:39,160
tool you know well it was born with idea

67
00:03:35,079 --> 00:03:42,310
that we would follow the example of

68
00:03:39,160 --> 00:03:45,250
instrumentation homelessness mutation

69
00:03:42,310 --> 00:03:49,690
systems and one of the characteristics

70
00:03:45,250 --> 00:03:54,180
of iOS query is they use the API 1% from

71
00:03:49,690 --> 00:03:57,299
operating systems no Forks of XA

72
00:03:54,180 --> 00:03:59,750
you know call sue sue sue blown it is

73
00:03:57,299 --> 00:04:03,450
directly information is retrieved

74
00:03:59,750 --> 00:04:09,989
directly from the operating system and

75
00:04:03,450 --> 00:04:11,369
here we have a web of os query God as we

76
00:04:09,989 --> 00:04:14,849
see here

77
00:04:11,370 --> 00:04:18,228
io and then we have all the information

78
00:04:14,849 --> 00:04:21,418
of this and even on Facebook you have

79
00:04:18,228 --> 00:04:24,900
different approaches different branches

80
00:04:21,418 --> 00:04:28,710
where you can see how it has evolved and

81
00:04:24,900 --> 00:04:31,440
then I have for five years working in

82
00:04:28,710 --> 00:04:34,650
California and I have contacts with

83
00:04:31,440 --> 00:04:36,780
companies that are really important in

84
00:04:34,650 --> 00:04:39,599
the field of technology but I would like

85
00:04:36,780 --> 00:04:42,239
to do here is to demonstrate which

86
00:04:39,599 --> 00:04:44,969
companies are using cos curing it was

87
00:04:42,240 --> 00:04:48,870
developed by Facebook Facebook deployed

88
00:04:44,970 --> 00:04:51,539
this at a huge scale or as query and

89
00:04:48,870 --> 00:04:55,169
then afterward knowing that was a tool

90
00:04:51,539 --> 00:04:57,509
that who has good performance and that

91
00:04:55,169 --> 00:04:59,880
it did work well for the case of use

92
00:04:57,509 --> 00:05:02,699
that was necessary and other many

93
00:04:59,880 --> 00:05:06,270
companies followed the example and now

94
00:05:02,699 --> 00:05:08,909
it is almost the default agent for

95
00:05:06,270 --> 00:05:11,430
cooperation of cooperative systems sorry

96
00:05:08,909 --> 00:05:14,610
and productive systems like in Netflix

97
00:05:11,430 --> 00:05:19,080
and many of those you see here

98
00:05:14,610 --> 00:05:22,229
Netflix Huber Dropbox BMB they don't

99
00:05:19,080 --> 00:05:26,190
want to acknowledge these OS curing but

100
00:05:22,229 --> 00:05:29,400
why to use or as query the motivation

101
00:05:26,190 --> 00:05:31,620
for creating or as query as we see here

102
00:05:29,400 --> 00:05:34,169
there were very many administration

103
00:05:31,620 --> 00:05:37,620
system scripts whether were able to

104
00:05:34,169 --> 00:05:40,830
execute several commands on cooperative

105
00:05:37,620 --> 00:05:43,470
hosts and there was no standardization

106
00:05:40,830 --> 00:05:46,050
let's see how I can retrieve the

107
00:05:43,470 --> 00:05:49,520
information specific information for all

108
00:05:46,050 --> 00:05:53,550
the fleet all the devices all the

109
00:05:49,520 --> 00:05:56,280
production system with questions like

110
00:05:53,550 --> 00:05:58,139
I'm going to ask you let's imagine for

111
00:05:56,280 --> 00:06:00,900
instance how could we know which

112
00:05:58,139 --> 00:06:04,300
corporate hosts will have a very

113
00:06:00,900 --> 00:06:07,448
extension with a certain idea

114
00:06:04,300 --> 00:06:10,240
and how many of you would be able to say

115
00:06:07,449 --> 00:06:12,490
how many file descriptors were open

116
00:06:10,240 --> 00:06:15,069
yesterday per hour in all your

117
00:06:12,490 --> 00:06:17,560
production systems yesterday and another

118
00:06:15,069 --> 00:06:20,169
question could be which devices are

119
00:06:17,560 --> 00:06:22,990
routing the Virtual Private Networks

120
00:06:20,169 --> 00:06:27,400
towards the local area network so those

121
00:06:22,990 --> 00:06:29,560
questions that are not unsane because

122
00:06:27,400 --> 00:06:32,500
each one will deal with a different part

123
00:06:29,560 --> 00:06:36,729
of system administration what was

124
00:06:32,500 --> 00:06:39,909
introducing tools to in a very uniform

125
00:06:36,729 --> 00:06:42,550
way the same way using this everywhere

126
00:06:39,909 --> 00:06:44,919
before developing purposes for

127
00:06:42,550 --> 00:06:47,349
production purposes for corporate

128
00:06:44,919 --> 00:06:53,099
management purposes and the decision of

129
00:06:47,349 --> 00:06:57,729
using OS query everywhere language SQL

130
00:06:53,099 --> 00:07:00,310
disruption was SQL basically is the

131
00:06:57,729 --> 00:07:03,250
concept of OS query are universal

132
00:07:00,310 --> 00:07:06,009
concepts depending on the basic concepts

133
00:07:03,250 --> 00:07:10,630
of the platform that which you're

134
00:07:06,009 --> 00:07:13,509
working and this is a concept that's

135
00:07:10,630 --> 00:07:15,840
been there for years for many years then

136
00:07:13,509 --> 00:07:18,729
it is true that is quite popular

137
00:07:15,840 --> 00:07:21,698
developers and system administrators are

138
00:07:18,729 --> 00:07:24,310
using it so it's easy to invite people

139
00:07:21,699 --> 00:07:28,810
to use it to encourage people to use it

140
00:07:24,310 --> 00:07:31,090
using SQL language so happens for

141
00:07:28,810 --> 00:07:33,879
instance questions where you get the PID

142
00:07:31,090 --> 00:07:36,638
the name and the user ID from all

143
00:07:33,879 --> 00:07:40,750
processes and then for instance another

144
00:07:36,639 --> 00:07:44,620
item added here and what why have we

145
00:07:40,750 --> 00:07:47,440
started using SQL language for that

146
00:07:44,620 --> 00:07:49,990
basically we have an operating system we

147
00:07:47,440 --> 00:07:52,240
have my several parts and then that is a

148
00:07:49,990 --> 00:07:54,729
concept which you would like to extract

149
00:07:52,240 --> 00:07:58,270
information the concept will be the

150
00:07:54,729 --> 00:08:00,729
table to use once you have the concept

151
00:07:58,270 --> 00:08:02,289
you say I'm going to focus on that part

152
00:08:00,729 --> 00:08:05,110
of the operating system how about the

153
00:08:02,289 --> 00:08:07,330
details of a concept about which I would

154
00:08:05,110 --> 00:08:10,150
like to which I'd like to concentrate

155
00:08:07,330 --> 00:08:12,159
the Cullens I'd like to extract and then

156
00:08:10,150 --> 00:08:14,560
afterwards I'd like to apply

157
00:08:12,159 --> 00:08:17,860
restrictions you to have too many data

158
00:08:14,560 --> 00:08:22,779
or not to or to look for the information

159
00:08:17,860 --> 00:08:25,089
I'm interested only in so for instance

160
00:08:22,779 --> 00:08:29,349
you would like to retrieve all processes

161
00:08:25,089 --> 00:08:31,899
that won't have the user ID equals zero

162
00:08:29,349 --> 00:08:36,448
there's a restriction or it could be

163
00:08:31,899 --> 00:08:39,549
used in more advanced node the first SQL

164
00:08:36,448 --> 00:08:41,890
joining this with other table you have

165
00:08:39,549 --> 00:08:44,380
on the system in this case you joined

166
00:08:41,890 --> 00:08:47,199
users and processes whether they have

167
00:08:44,380 --> 00:08:52,810
the idea of user that's given here and

168
00:08:47,199 --> 00:08:54,819
those are interesting once you haven't

169
00:08:52,810 --> 00:08:57,369
done this small introduction video on

170
00:08:54,819 --> 00:08:59,979
the u.s. query the approach the

171
00:08:57,370 --> 00:09:02,260
philosophical approach we have here the

172
00:08:59,980 --> 00:09:09,910
first part which is the command line

173
00:09:02,260 --> 00:09:14,170
interface square is the client in which

174
00:09:09,910 --> 00:09:17,620
you can execute local queries and see

175
00:09:14,170 --> 00:09:22,750
for results this is what you see in case

176
00:09:17,620 --> 00:09:27,100
of tables they use here's ql elite as in

177
00:09:22,750 --> 00:09:30,490
murder and they have was developed by a

178
00:09:27,100 --> 00:09:33,040
facebook also which it was relevant at

179
00:09:30,490 --> 00:09:35,260
the given point in time now they are

180
00:09:33,040 --> 00:09:38,020
having doubts while using it or not but

181
00:09:35,260 --> 00:09:41,829
the performance is rather good the

182
00:09:38,020 --> 00:09:43,630
process is always query on your machine

183
00:09:41,829 --> 00:09:46,270
and we would like to know which tables

184
00:09:43,630 --> 00:09:48,430
we should use they your queries you'd

185
00:09:46,270 --> 00:09:51,160
like to deploy and once you know your

186
00:09:48,430 --> 00:09:54,339
strategy well you define consultations

187
00:09:51,160 --> 00:09:58,029
and then you use OS query i'd like to

188
00:09:54,339 --> 00:10:00,459
invite you to go to the information you

189
00:09:58,029 --> 00:10:02,709
have Elaine KUB slides and send the

190
00:10:00,459 --> 00:10:05,589
repository and then it is well

191
00:10:02,709 --> 00:10:08,410
documented well explained all the

192
00:10:05,589 --> 00:10:09,970
different components of us query and the

193
00:10:08,410 --> 00:10:10,640
command-line interface and all the

194
00:10:09,970 --> 00:10:12,890
command lines

195
00:10:10,640 --> 00:10:15,880
forgot about command lines we should

196
00:10:12,890 --> 00:10:21,230
have talked about command lines anyway

197
00:10:15,880 --> 00:10:24,890
we have here the command line and you

198
00:10:21,230 --> 00:10:30,020
have like self completing tables and so

199
00:10:24,890 --> 00:10:33,670
on and so once you are there we dot help

200
00:10:30,020 --> 00:10:39,970
you retrieve options possible options

201
00:10:33,670 --> 00:10:39,969
that are useful and you have from the

202
00:10:41,470 --> 00:10:46,700
you can have for instance all in the

203
00:10:44,270 --> 00:10:49,250
name of a table with the dot all you

204
00:10:46,700 --> 00:10:51,200
select all from the table or evidence

205
00:10:49,250 --> 00:10:55,460
from a table for instance you could

206
00:10:51,200 --> 00:10:58,040
change format of the output you could

207
00:10:55,460 --> 00:11:00,920
use or whatever format instead of

208
00:10:58,040 --> 00:11:03,860
columns you can have rows instead of

209
00:11:00,920 --> 00:11:06,199
columns in any way of criteria different

210
00:11:03,860 --> 00:11:10,360
parameters you could directly put in the

211
00:11:06,200 --> 00:11:10,360
come on line to retrieve what you want

212
00:11:10,420 --> 00:11:20,990
tables took tables is the grand old

213
00:11:18,020 --> 00:11:22,880
tables actual and on the platform on

214
00:11:20,990 --> 00:11:24,830
which you are accepting on things you

215
00:11:22,880 --> 00:11:28,460
will see here tables that are really

216
00:11:24,830 --> 00:11:31,070
active tables valid to concentrations on

217
00:11:28,460 --> 00:11:33,410
you won't see other tables you will be a

218
00:11:31,070 --> 00:11:36,290
Mac you wouldn't see tables which are

219
00:11:33,410 --> 00:11:39,890
valid for Windows or Linux and so on and

220
00:11:36,290 --> 00:11:41,569
so forth this is useful you say I'm

221
00:11:39,890 --> 00:11:45,590
going to work on this and then it's okay

222
00:11:41,570 --> 00:11:47,260
and then to know the in detail for

223
00:11:45,590 --> 00:11:54,450
instance

224
00:11:47,260 --> 00:12:01,630
the commanding general is pragma table

225
00:11:54,450 --> 00:12:04,810
info and then you add details that are

226
00:12:01,630 --> 00:12:08,410
more specific about the most basic use

227
00:12:04,810 --> 00:12:12,209
or advanced use of in search engine

228
00:12:08,410 --> 00:12:19,390
you'd like to use here and they release

229
00:12:12,210 --> 00:12:23,020
we have 229 table three to release we've

230
00:12:19,390 --> 00:12:28,810
got support for platforms Mac Windows

231
00:12:23,020 --> 00:12:32,500
Linux and free those are data that are

232
00:12:28,810 --> 00:12:41,650
easy to retrieve and correlate when in

233
00:12:32,500 --> 00:12:43,390
principle were those queries you can

234
00:12:41,650 --> 00:12:45,579
choose according to the platform or

235
00:12:43,390 --> 00:12:49,750
going to add to cheer and to know what

236
00:12:45,580 --> 00:12:51,310
much table mean this is a post if you

237
00:12:49,750 --> 00:13:03,610
want to look at the code you can also

238
00:12:51,310 --> 00:13:11,290
get the curve tables ACPI tables and you

239
00:13:03,610 --> 00:13:13,420
see the tables you're interested you can

240
00:13:11,290 --> 00:13:16,870
join from one table to another and so on

241
00:13:13,420 --> 00:13:20,740
so forth one of the important tails to

242
00:13:16,870 --> 00:13:22,750
understand oh as query is that the

243
00:13:20,740 --> 00:13:25,900
execution per table at a given moment

244
00:13:22,750 --> 00:13:27,880
you have a select the execution is

245
00:13:25,900 --> 00:13:31,480
taking place at that very moment we only

246
00:13:27,880 --> 00:13:33,820
have the advanced configuration of OS

247
00:13:31,480 --> 00:13:37,690
query there are certain tables were you

248
00:13:33,820 --> 00:13:41,430
have cache the Heritage that is a

249
00:13:37,690 --> 00:13:45,430
culture template those are based on the

250
00:13:41,430 --> 00:13:48,579
lower frequency of consultation that was

251
00:13:45,430 --> 00:13:51,280
more complicated but I just mentioned

252
00:13:48,580 --> 00:13:52,810
this it's like information dropping for

253
00:13:51,280 --> 00:13:55,060
you to know that there are certain

254
00:13:52,810 --> 00:13:56,619
tables where you have this template

255
00:13:55,060 --> 00:13:59,979
cache

256
00:13:56,620 --> 00:14:05,410
you have then the possibility when you

257
00:13:59,980 --> 00:14:08,950
retrieve the table you see their

258
00:14:05,410 --> 00:14:11,350
differences and then had been executed

259
00:14:08,950 --> 00:14:13,870
there is a code associated to the

260
00:14:11,350 --> 00:14:18,610
operating system and the system executed

261
00:14:13,870 --> 00:14:21,100
every certain time what happens when you

262
00:14:18,610 --> 00:14:24,850
have a higher load within the operating

263
00:14:21,100 --> 00:14:27,339
system we have two execution of

264
00:14:24,850 --> 00:14:31,420
frequency is lower than you might have

265
00:14:27,339 --> 00:14:35,019
peaks of using the CPU so higher load

266
00:14:31,420 --> 00:14:37,120
and the CPU once you have the table so

267
00:14:35,019 --> 00:14:39,459
we have a select all for instance if

268
00:14:37,120 --> 00:14:41,800
you're not sure all columns or some of

269
00:14:39,459 --> 00:14:48,790
them and you tend to find what we call

270
00:14:41,800 --> 00:14:51,310
before the straining in this case we can

271
00:14:48,790 --> 00:14:54,279
have a file table you cannot find the

272
00:14:51,310 --> 00:14:57,219
root which would like to ask something

273
00:14:54,279 --> 00:15:02,350
and you give the directory of a given

274
00:14:57,220 --> 00:15:05,980
route you look for the route and you

275
00:15:02,350 --> 00:15:11,050
take nutreve this join example that's

276
00:15:05,980 --> 00:15:17,770
useful is having a join hash using the

277
00:15:11,050 --> 00:15:20,079
path then what is the hashing function

278
00:15:17,770 --> 00:15:23,410
you'd like to execute in the case of

279
00:15:20,079 --> 00:15:25,390
that given a file you see there are lots

280
00:15:23,410 --> 00:15:29,829
of possibilities lots of possibilities

281
00:15:25,390 --> 00:15:33,459
and I'm getting the empty five here so

282
00:15:29,829 --> 00:15:37,630
if we use all the those are parameter

283
00:15:33,459 --> 00:15:39,459
tables we load on CPU varies so we'll

284
00:15:37,630 --> 00:15:40,360
have the impact on performance and I'm

285
00:15:39,459 --> 00:15:42,489
going to give you some useful

286
00:15:40,360 --> 00:15:45,610
information we have some basic table

287
00:15:42,490 --> 00:15:50,490
examples here for instance we had easy

288
00:15:45,610 --> 00:15:53,370
to correlate data easy to retrieve data

289
00:15:50,490 --> 00:15:57,050
from the different systems according to

290
00:15:53,370 --> 00:16:01,580
wood has been stalled a kernel kernel

291
00:15:57,050 --> 00:16:04,410
modules that are for instance running

292
00:16:01,580 --> 00:16:07,050
what's been executed in a given time so

293
00:16:04,410 --> 00:16:10,530
some example what is the hostname of a

294
00:16:07,050 --> 00:16:12,900
system and how many users in which users

295
00:16:10,530 --> 00:16:14,850
do we have on a system which processes

296
00:16:12,900 --> 00:16:20,220
are running now you know I'm just a host

297
00:16:14,850 --> 00:16:20,850
of the system well step will be than

298
00:16:20,220 --> 00:16:30,060
easy

299
00:16:20,850 --> 00:16:33,750
as you see here we should see it then

300
00:16:30,060 --> 00:16:34,550
run Padilla and I would have a client

301
00:16:33,750 --> 00:16:37,560
here

302
00:16:34,550 --> 00:16:41,280
os query and it's what I mentioned

303
00:16:37,560 --> 00:16:43,680
before you have do seats because in

304
00:16:41,280 --> 00:16:47,280
terminals cannot see anything anyway oh

305
00:16:43,680 --> 00:16:51,390
it's query I if you do not launch this

306
00:16:47,280 --> 00:16:54,270
as route the row columns will be empty

307
00:16:51,390 --> 00:17:13,980
you need the permit you need to have

308
00:16:54,270 --> 00:17:17,430
this idea what about this table I'd like

309
00:17:13,980 --> 00:17:19,620
to consult it and in this case this is a

310
00:17:17,430 --> 00:17:22,080
command I've mentioned before pragmatic

311
00:17:19,619 --> 00:17:25,500
table info I'd like to know about the

312
00:17:22,079 --> 00:17:30,649
host then I have here we have a host

313
00:17:25,500 --> 00:17:35,850
name column I select host name host name

314
00:17:30,650 --> 00:17:38,640
from system info host name from system

315
00:17:35,850 --> 00:17:41,909
info we have retrieved to the host and

316
00:17:38,640 --> 00:17:44,850
that is the way the steps to follow when

317
00:17:41,910 --> 00:17:48,780
you're not to explain you're not an

318
00:17:44,850 --> 00:17:51,870
expert regarding the different parts and

319
00:17:48,780 --> 00:17:56,070
here this will be to extract extracts a

320
00:17:51,870 --> 00:17:59,830
host of a system host name a system the

321
00:17:56,070 --> 00:18:03,639
case of users you select UID username

322
00:17:59,830 --> 00:18:05,980
users those are easy tables to use to

323
00:18:03,640 --> 00:18:08,980
tree views of information and very easy

324
00:18:05,980 --> 00:18:11,590
to conduct queries more complicated is

325
00:18:08,980 --> 00:18:17,860
what about the user and the shell of

326
00:18:11,590 --> 00:18:21,459
each process running tell us the user

327
00:18:17,860 --> 00:18:27,668
and the shell process running you select

328
00:18:21,460 --> 00:18:31,750
bi p PID rename P path username and the

329
00:18:27,669 --> 00:18:33,820
shell from processes and you take this

330
00:18:31,750 --> 00:18:38,370
you have a joint show you the users

331
00:18:33,820 --> 00:18:41,460
table and you have here the information

332
00:18:38,370 --> 00:18:46,120
that you want to see that's an example

333
00:18:41,460 --> 00:18:49,799
I'm going to show this to you the same

334
00:18:46,120 --> 00:18:53,709
query and then you will have here

335
00:18:49,799 --> 00:18:56,200
running the PID the user and the shell

336
00:18:53,710 --> 00:18:59,820
per user and that's quite convenient to

337
00:18:56,200 --> 00:19:03,010
know that there's a problem of a user

338
00:18:59,820 --> 00:19:08,678
being traded for a backdoor entry or

339
00:19:03,010 --> 00:19:13,720
something wrong so once we know the

340
00:19:08,679 --> 00:19:17,480
concept then the level of service is how

341
00:19:13,720 --> 00:19:19,610
we're going to deploy or as query when

342
00:19:17,480 --> 00:19:23,240
I'm not going to look directly at things

343
00:19:19,610 --> 00:19:25,428
I want to deploy or ice query and I have

344
00:19:23,240 --> 00:19:29,000
to program consultations and I want to

345
00:19:25,429 --> 00:19:33,520
be true in that books the demon OS query

346
00:19:29,000 --> 00:19:36,410
D is very boiler binary and with this

347
00:19:33,520 --> 00:19:40,490
demon we have differences regarding the

348
00:19:36,410 --> 00:19:44,330
way it's been executed and demons been

349
00:19:40,490 --> 00:19:48,350
prepared to launch it have here whatever

350
00:19:44,330 --> 00:19:52,879
I need system MD lunch D service windows

351
00:19:48,350 --> 00:19:55,699
whatever we can execute programmed

352
00:19:52,880 --> 00:20:00,260
queries in all machine as you want to

353
00:19:55,700 --> 00:20:02,860
monitor and you have logs of state of a

354
00:20:00,260 --> 00:20:06,700
demon and results and basic level

355
00:20:02,860 --> 00:20:12,530
options of configuration are very many

356
00:20:06,700 --> 00:20:15,559
you have to see the well it is use the

357
00:20:12,530 --> 00:20:18,080
help to look at the flash to see all the

358
00:20:15,559 --> 00:20:19,960
options that you could use yeah I'm not

359
00:20:18,080 --> 00:20:23,960
going to mention the demon or whatever

360
00:20:19,960 --> 00:20:26,240
saying configuration file and then this

361
00:20:23,960 --> 00:20:31,910
has been defined and it's explained in

362
00:20:26,240 --> 00:20:34,130
help so basically the scheme used now we

363
00:20:31,910 --> 00:20:37,160
will put this together at the bottom

364
00:20:34,130 --> 00:20:40,190
here you see the operative system

365
00:20:37,160 --> 00:20:43,850
operating systems operating system the

366
00:20:40,190 --> 00:20:46,910
users the services so first couple this

367
00:20:43,850 --> 00:20:50,049
we have the OS query ID a configuration

368
00:20:46,910 --> 00:20:54,590
I don't know which we conduct loving

369
00:20:50,049 --> 00:20:59,690
tasks and with centralized management we

370
00:20:54,590 --> 00:21:02,090
update and oh we can get the logs once

371
00:20:59,690 --> 00:21:06,710
you get the information it's when we

372
00:21:02,090 --> 00:21:14,059
start with the strategy to have incident

373
00:21:06,710 --> 00:21:15,559
responses and very many use cases for

374
00:21:14,059 --> 00:21:18,710
any change

375
00:21:15,559 --> 00:21:20,960
the configuration in the case of the

376
00:21:18,710 --> 00:21:24,620
u.s. diamond the most polished use flags

377
00:21:20,960 --> 00:21:27,320
flags commands parameters you put into

378
00:21:24,620 --> 00:21:29,748
the diamond but to render laughs easier

379
00:21:27,320 --> 00:21:32,330
could you use a flag file and inflect

380
00:21:29,749 --> 00:21:35,299
file will have everything so all the

381
00:21:32,330 --> 00:21:38,240
parameters one of the cases that are

382
00:21:35,299 --> 00:21:44,629
frequently seen is to use what you see

383
00:21:38,240 --> 00:21:46,840
here one type of it--are noble software

384
00:21:44,629 --> 00:21:50,360
and they create the software flag

385
00:21:46,840 --> 00:21:52,009
depending on the axis and the system and

386
00:21:50,360 --> 00:21:55,459
then the demon starts with a

387
00:21:52,009 --> 00:21:58,429
configuration that you've chosen the

388
00:21:55,460 --> 00:22:04,070
help is extremely useful here for sq

389
00:21:58,429 --> 00:22:06,559
area D or the OS query ID that's very

390
00:22:04,070 --> 00:22:10,249
important and should use help once we

391
00:22:06,559 --> 00:22:12,289
have us query configured flags here are

392
00:22:10,249 --> 00:22:14,299
just injecting configurations inside of

393
00:22:12,289 --> 00:22:17,330
the demon we can use this with a

394
00:22:14,299 --> 00:22:20,360
configuration file or we're going to

395
00:22:17,330 --> 00:22:21,889
define several paths and it is important

396
00:22:20,360 --> 00:22:24,830
to explain the different parts of this

397
00:22:21,889 --> 00:22:28,369
configuration file the first part is the

398
00:22:24,830 --> 00:22:32,330
field of options adjacent file standard

399
00:22:28,369 --> 00:22:36,199
JSON file per block here in options

400
00:22:32,330 --> 00:22:38,658
won't have the same values and what you

401
00:22:36,200 --> 00:22:41,330
receive for instance you could be

402
00:22:38,659 --> 00:22:43,669
launching a service in a way you could

403
00:22:41,330 --> 00:22:47,439
configure this with a plug-in of file

404
00:22:43,669 --> 00:22:50,240
system and then we could override they

405
00:22:47,440 --> 00:22:53,720
things and that's something that could

406
00:22:50,240 --> 00:22:57,470
be done important thing in the

407
00:22:53,720 --> 00:23:00,379
configuration file decorators decorate

408
00:22:57,470 --> 00:23:03,900
myself imagine with all results we have

409
00:23:00,379 --> 00:23:06,419
with OS curator curators we have

410
00:23:03,900 --> 00:23:10,140
I won't add on top of this who to add

411
00:23:06,420 --> 00:23:13,320
some metadata to retrieve more

412
00:23:10,140 --> 00:23:16,170
information from those machines and I

413
00:23:13,320 --> 00:23:19,320
use decorators for that decorators you

414
00:23:16,170 --> 00:23:20,880
can have only one demon load or whatever

415
00:23:19,320 --> 00:23:24,720
you have loads into the centralized

416
00:23:20,880 --> 00:23:27,150
system and they detail of decorators the

417
00:23:24,720 --> 00:23:29,940
thing of decorators is that you might

418
00:23:27,150 --> 00:23:32,160
have an undefined undefined number of

419
00:23:29,940 --> 00:23:34,559
columns dependently on the table you're

420
00:23:32,160 --> 00:23:38,220
making a consultation on but only one

421
00:23:34,559 --> 00:23:41,040
result could be accepted if not all the

422
00:23:38,220 --> 00:23:44,910
cases when you have no result because

423
00:23:41,040 --> 00:23:46,889
that is not funny how that you would

424
00:23:44,910 --> 00:23:49,350
like to overload the system who would

425
00:23:46,890 --> 00:23:52,470
like to have a system it's like adding

426
00:23:49,350 --> 00:23:54,600
metadata adding metadata that are

427
00:23:52,470 --> 00:23:55,920
basically useful to retrieve information

428
00:23:54,600 --> 00:23:57,840
to have a more complete information

429
00:23:55,920 --> 00:23:59,390
don't know what's happening at the level

430
00:23:57,840 --> 00:24:02,340
of the system

431
00:23:59,390 --> 00:24:04,140
the problem was queries that I was

432
00:24:02,340 --> 00:24:06,928
talking about there are there queries

433
00:24:04,140 --> 00:24:09,900
that you were looking for customers

434
00:24:06,929 --> 00:24:13,080
queries and there's a number of fields

435
00:24:09,900 --> 00:24:14,970
within the configuration set up Jason

436
00:24:13,080 --> 00:24:17,428
where you can define different things

437
00:24:14,970 --> 00:24:19,020
you for example your query the query is

438
00:24:17,429 --> 00:24:22,440
the chain that you will be executing

439
00:24:19,020 --> 00:24:26,190
this query interval is the frequency of

440
00:24:22,440 --> 00:24:28,590
execution second by default you have a

441
00:24:26,190 --> 00:24:32,400
possibility of adding details so you

442
00:24:28,590 --> 00:24:36,959
have all the queries executed every 60

443
00:24:32,400 --> 00:24:40,429
seconds in order to avoid overloading

444
00:24:36,960 --> 00:24:43,920
other queries you will have five percent

445
00:24:40,429 --> 00:24:47,160
margin and the second and interval that

446
00:24:43,920 --> 00:24:49,679
assign the positive sign different

447
00:24:47,160 --> 00:24:53,370
queries at different moment for them not

448
00:24:49,679 --> 00:24:56,309
to be executed at the same time platform

449
00:24:53,370 --> 00:24:58,590
also you might have different kind of

450
00:24:56,309 --> 00:25:01,470
systems and the Windows queries are not

451
00:24:58,590 --> 00:25:03,090
the Linus queries or map queries which

452
00:25:01,470 --> 00:25:05,250
are not compatible with the other so you

453
00:25:03,090 --> 00:25:08,129
can limit the number of queries executed

454
00:25:05,250 --> 00:25:11,280
in order to avoid overloading of the

455
00:25:08,130 --> 00:25:13,220
daemon engine and there's another action

456
00:25:11,280 --> 00:25:16,940
the shorting action

457
00:25:13,220 --> 00:25:21,860
meaning this query will be executed only

458
00:25:16,940 --> 00:25:24,920
this one so I use statistics to know how

459
00:25:21,860 --> 00:25:27,320
many times this query will be executed

460
00:25:24,920 --> 00:25:30,260
which is a little bit artificial but we

461
00:25:27,320 --> 00:25:31,939
can do that and then snapshot when I

462
00:25:30,260 --> 00:25:33,730
program queries a lot of people say I

463
00:25:31,940 --> 00:25:36,640
don't see them I don't see the result

464
00:25:33,730 --> 00:25:43,970
this might happen because when you

465
00:25:36,640 --> 00:25:46,460
select any kind of table you flag the

466
00:25:43,970 --> 00:25:49,000
buffer that is maintained by you always

467
00:25:46,460 --> 00:25:51,860
query for a result and when you have

468
00:25:49,000 --> 00:25:55,130
program results you will see the changes

469
00:25:51,860 --> 00:25:57,919
in these results but if you activate

470
00:25:55,130 --> 00:26:00,860
snap job flag you will see all the

471
00:25:57,920 --> 00:26:05,990
results which will provide you with the

472
00:26:00,860 --> 00:26:11,209
more data than expected weather system

473
00:26:05,990 --> 00:26:14,900
you used to manage it is important for

474
00:26:11,210 --> 00:26:16,370
some cases for specific cases it is

475
00:26:14,900 --> 00:26:18,590
important because if I want to see all

476
00:26:16,370 --> 00:26:21,739
the processes that are being run in this

477
00:26:18,590 --> 00:26:23,510
machine every 30 30 seconds you might

478
00:26:21,740 --> 00:26:26,150
believe this machine has been machine

479
00:26:23,510 --> 00:26:29,270
has been compromised so you don't want

480
00:26:26,150 --> 00:26:32,720
to use audit system or sales by tables

481
00:26:29,270 --> 00:26:35,120
so you say ok every 30 second what

482
00:26:32,720 --> 00:26:38,060
happens with this if some malware is

483
00:26:35,120 --> 00:26:40,370
executed in the moment in which you're

484
00:26:38,060 --> 00:26:42,260
not running the query the query you will

485
00:26:40,370 --> 00:26:45,199
not be able to see that and I don't know

486
00:26:42,260 --> 00:26:49,610
what would happen like I said before a

487
00:26:45,200 --> 00:26:51,890
scheduled query so you have the schedule

488
00:26:49,610 --> 00:26:54,830
with the query so you would define the

489
00:26:51,890 --> 00:26:56,630
name with all the fields I was

490
00:26:54,830 --> 00:27:01,250
mentioning before and then you have

491
00:26:56,630 --> 00:27:04,180
query tax which basically means I have

492
00:27:01,250 --> 00:27:06,620
my my setup which is ok then I have

493
00:27:04,180 --> 00:27:09,200
something that applies to everything but

494
00:27:06,620 --> 00:27:10,639
then some queries are for specific

495
00:27:09,200 --> 00:27:13,760
things that can be activated or

496
00:27:10,640 --> 00:27:15,530
deactivated or they might be running in

497
00:27:13,760 --> 00:27:17,610
one machine and not in the other machine

498
00:27:15,530 --> 00:27:20,420
because it will be very big

499
00:27:17,610 --> 00:27:25,850
so how can I a great different queries

500
00:27:20,420 --> 00:27:29,070
in any kind of file or in a specific

501
00:27:25,850 --> 00:27:31,559
logical group so you would you would be

502
00:27:29,070 --> 00:27:33,510
using query packs with different fields

503
00:27:31,559 --> 00:27:36,210
that could be applied in these packs

504
00:27:33,510 --> 00:27:40,410
query to be executed the interval

505
00:27:36,210 --> 00:27:42,809
version apart from which that query is

506
00:27:40,410 --> 00:27:50,760
executed exactly imagine you have a

507
00:27:42,809 --> 00:27:55,590
table that create only GIS with the 2.0

508
00:27:50,760 --> 00:28:01,080
version and you have a 1.8 version so in

509
00:27:55,590 --> 00:28:04,290
order to to avoid creating one more line

510
00:28:01,080 --> 00:28:06,870
you can say execute this query in the

511
00:28:04,290 --> 00:28:09,990
machines that have only up to this

512
00:28:06,870 --> 00:28:12,989
version running some then the scripture

513
00:28:09,990 --> 00:28:17,760
there's field is an idea that was

514
00:28:12,990 --> 00:28:23,130
implemented to encourage people to share

515
00:28:17,760 --> 00:28:27,059
query packs or compromise packs to

516
00:28:23,130 --> 00:28:28,679
define the query you were running and to

517
00:28:27,059 --> 00:28:32,668
indicate the value as well which is also

518
00:28:28,679 --> 00:28:33,870
the problem of the fields so I was

519
00:28:32,669 --> 00:28:37,910
queried kampf

520
00:28:33,870 --> 00:28:42,899
for packs that have been tested by the

521
00:28:37,910 --> 00:28:45,150
audit team of ours query so some for

522
00:28:42,900 --> 00:28:48,030
monitor is some for responses in the

523
00:28:45,150 --> 00:28:55,169
event of a incidence for IT compliance

524
00:28:48,030 --> 00:28:57,990
for Windows or or OSX so I invite you to

525
00:28:55,169 --> 00:29:00,120
go through the packs for you to know the

526
00:28:57,990 --> 00:29:02,490
kind of filters you can use for the

527
00:29:00,120 --> 00:29:05,850
different queries now let me give you an

528
00:29:02,490 --> 00:29:08,910
example for example how to for you to

529
00:29:05,850 --> 00:29:10,889
see how on a query is it never quite a

530
00:29:08,910 --> 00:29:13,650
pack so you define the fields of the

531
00:29:10,890 --> 00:29:16,020
query the name of the query and all the

532
00:29:13,650 --> 00:29:17,880
other fields for example I didn't

533
00:29:16,020 --> 00:29:20,280
include value in description because

534
00:29:17,880 --> 00:29:25,590
this is very simple query but you might

535
00:29:20,280 --> 00:29:29,299
know so we have the queries at a local

536
00:29:25,590 --> 00:29:30,980
level with their name with their title

537
00:29:29,299 --> 00:29:33,230
so we execute them in our machine we

538
00:29:30,980 --> 00:29:36,049
said this is covering okay these are the

539
00:29:33,230 --> 00:29:38,989
tables to be executed fields are clear I

540
00:29:36,049 --> 00:29:42,950
know what the system is I know what the

541
00:29:38,989 --> 00:29:45,649
columns I want to query about I'm sorry

542
00:29:42,950 --> 00:29:49,009
if I want to join you validate to you

543
00:29:45,649 --> 00:29:50,928
evaluate your read your group of

544
00:29:49,009 --> 00:29:53,149
machines and you say oh these queries

545
00:29:50,929 --> 00:29:55,700
will be executing at this interval every

546
00:29:53,149 --> 00:29:57,830
24 hours for example and you say I'm

547
00:29:55,700 --> 00:30:01,399
going to launch this for all the machine

548
00:29:57,830 --> 00:30:04,309
to see what happens so now imagine for

549
00:30:01,399 --> 00:30:08,600
any event that happened one of the

550
00:30:04,309 --> 00:30:10,789
machine you suspected was compromised

551
00:30:08,600 --> 00:30:12,678
and you want to get all the bases and

552
00:30:10,789 --> 00:30:14,779
one directory but the problem there is

553
00:30:12,679 --> 00:30:18,200
that you launched all this to all the

554
00:30:14,779 --> 00:30:21,679
production system but I want to see the

555
00:30:18,200 --> 00:30:25,519
specific machine with big directory with

556
00:30:21,679 --> 00:30:28,669
smaller directives but you can have a

557
00:30:25,519 --> 00:30:31,100
CPU that there is small and you

558
00:30:28,669 --> 00:30:35,600
interpret that this machine has a

559
00:30:31,100 --> 00:30:38,269
problem etc so the impact could be on

560
00:30:35,600 --> 00:30:40,668
production system or products that are

561
00:30:38,269 --> 00:30:44,470
being developed at the company or this

562
00:30:40,669 --> 00:30:48,769
might entail problems in your employee

563
00:30:44,470 --> 00:30:51,230
computer so so we have an internal

564
00:30:48,769 --> 00:30:53,899
application our square eight watchdog

565
00:30:51,230 --> 00:30:57,139
that could be applied to all the demons

566
00:30:53,899 --> 00:30:59,869
so things are done by default and our

567
00:30:57,139 --> 00:31:03,350
query and the reason why this is done

568
00:30:59,869 --> 00:31:06,769
like that I mean applying this by

569
00:31:03,350 --> 00:31:08,330
default is in order to have stability of

570
00:31:06,769 --> 00:31:16,039
the systems and because that has been

571
00:31:08,330 --> 00:31:18,949
tested so our query D is executed in a

572
00:31:16,039 --> 00:31:22,759
single thread so if there is hoarding of

573
00:31:18,950 --> 00:31:26,239
the service or the CPU this explains the

574
00:31:22,759 --> 00:31:27,739
problem so the always query D watchdog

575
00:31:26,239 --> 00:31:32,090
does as follows

576
00:31:27,739 --> 00:31:34,580
so if the use of the CPUs is of more

577
00:31:32,090 --> 00:31:38,649
than sixty percent for nine seconds or

578
00:31:34,580 --> 00:31:41,879
more plus always query will be really

579
00:31:38,649 --> 00:31:44,580
initiated same thing for the

580
00:31:41,880 --> 00:31:49,080
amount of memory using if the machine is

581
00:31:44,580 --> 00:31:52,530
using more than 12 to 200 megabytes of

582
00:31:49,080 --> 00:31:55,980
memory the service will be rinsed every

583
00:31:52,530 --> 00:31:59,820
initiated if this value has been touched

584
00:31:55,980 --> 00:32:03,750
because you believe that that you need

585
00:31:59,820 --> 00:32:05,909
more marching in order to use a less

586
00:32:03,750 --> 00:32:10,740
queried you will see that your nodes

587
00:32:05,910 --> 00:32:13,290
will be reinitiated and our square is

588
00:32:10,740 --> 00:32:15,240
serviced so this might lead you to think

589
00:32:13,290 --> 00:32:19,050
what is going on here but the thing is

590
00:32:15,240 --> 00:32:21,120
that there our square ad watch that is

591
00:32:19,050 --> 00:32:24,530
responsible for that so we have a

592
00:32:21,120 --> 00:32:27,570
computer and I want to execute this

593
00:32:24,530 --> 00:32:30,030
these queries I want to launch them for

594
00:32:27,570 --> 00:32:32,429
all the machines with these intervals

595
00:32:30,030 --> 00:32:35,310
etc and I want to provide this service

596
00:32:32,430 --> 00:32:37,920
so I have clear in mind what is the

597
00:32:35,310 --> 00:32:40,620
setup I'm going to implement what is the

598
00:32:37,920 --> 00:32:44,700
next step therefore to be able to

599
00:32:40,620 --> 00:32:50,610
monitor or manage all your hours queries

600
00:32:44,700 --> 00:32:54,450
nodes from centralized system manian

601
00:32:50,610 --> 00:32:58,530
meaning how do you go from an hours

602
00:32:54,450 --> 00:33:02,820
query system to a botnet so you would

603
00:32:58,530 --> 00:33:06,450
use the remote API hours quality and you

604
00:33:02,820 --> 00:33:09,149
have some options option product options

605
00:33:06,450 --> 00:33:11,730
offering you this solution some of them

606
00:33:09,150 --> 00:33:15,450
are open for freely for others you have

607
00:33:11,730 --> 00:33:18,500
to buy some versions are in the two

608
00:33:15,450 --> 00:33:21,080
places because they have an open source

609
00:33:18,500 --> 00:33:26,490
apart and then they have a paying

610
00:33:21,080 --> 00:33:30,120
version for collide and central is what

611
00:33:26,490 --> 00:33:32,070
they have so they have a free version

612
00:33:30,120 --> 00:33:34,979
and then they have a more complicated

613
00:33:32,070 --> 00:33:37,379
version that you have to pay for the

614
00:33:34,980 --> 00:33:41,400
flags that you will be using for the

615
00:33:37,380 --> 00:33:45,330
hours query demons to setup map in order

616
00:33:41,400 --> 00:33:47,100
to use centralized server is are listed

617
00:33:45,330 --> 00:33:51,149
here and you can see them on the screen

618
00:33:47,100 --> 00:33:55,230
these are the plugins that would be used

619
00:33:51,150 --> 00:33:57,900
that will be using so clients are

620
00:33:55,230 --> 00:34:01,830
Fickett if you want your notes to open

621
00:33:57,900 --> 00:34:05,370
with a server using neutral TLS so you

622
00:34:01,830 --> 00:34:07,230
would define the key you define the host

623
00:34:05,370 --> 00:34:10,649
in which they will be speaking each

624
00:34:07,230 --> 00:34:14,270
other because the TLS the share TLS is

625
00:34:10,649 --> 00:34:19,109
on the internet so there's no need of

626
00:34:14,270 --> 00:34:21,418
BPM or any kind of access this is will

627
00:34:19,109 --> 00:34:24,810
all depends on your production system

628
00:34:21,418 --> 00:34:27,540
and you will see what is the host you

629
00:34:24,810 --> 00:34:31,020
will be using so you have the mutual

630
00:34:27,540 --> 00:34:33,029
dealers but then the P means certificate

631
00:34:31,020 --> 00:34:34,500
etcetera well these are the flaps that

632
00:34:33,030 --> 00:34:37,169
you will be using what is the

633
00:34:34,500 --> 00:34:40,379
architecture scheme that is basic is as

634
00:34:37,168 --> 00:34:42,658
follows you have a TLS connected to the

635
00:34:40,379 --> 00:34:52,000
internet like I'm going to show you

636
00:34:42,659 --> 00:34:55,580
using this it's gonna be easier okay

637
00:34:52,000 --> 00:35:00,830
so you have all your notes using our

638
00:34:55,580 --> 00:35:03,049
squares customer you want this to hack

639
00:35:00,830 --> 00:35:04,150
them to send results and locks you send

640
00:35:03,050 --> 00:35:07,880
the information through the internet

641
00:35:04,150 --> 00:35:12,020
with a TLS endpoint and I put a lock

642
00:35:07,880 --> 00:35:18,110
here because I was query use TLS for

643
00:35:12,020 --> 00:35:21,110
communication to avoid cases where I can

644
00:35:18,110 --> 00:35:23,450
see communications from Martine at the

645
00:35:21,110 --> 00:35:29,120
same machine but at the same time I can

646
00:35:23,450 --> 00:35:33,200
see sensitive information so this is

647
00:35:29,120 --> 00:35:37,430
only possible on TLS so places to

648
00:35:33,200 --> 00:35:43,819
develop a basic TLS and point three four

649
00:35:37,430 --> 00:35:45,859
main parts first of all you define the

650
00:35:43,820 --> 00:35:49,820
end point where you would define the

651
00:35:45,860 --> 00:35:53,600
enroll and your launch post then another

652
00:35:49,820 --> 00:36:01,010
aim point to receive of lock status or

653
00:35:53,600 --> 00:36:04,520
course result another post petition for

654
00:36:01,010 --> 00:36:08,180
notes for it setup of configuration and

655
00:36:04,520 --> 00:36:11,900
another post for extras on demand

656
00:36:08,180 --> 00:36:16,100
queries file carving or if another

657
00:36:11,900 --> 00:36:19,580
function is launched using here is quite

658
00:36:16,100 --> 00:36:23,450
the documentation the configuration

659
00:36:19,580 --> 00:36:25,880
defines the petitions the requests the

660
00:36:23,450 --> 00:36:28,419
format you have to send and receive and

661
00:36:25,880 --> 00:36:31,390
things are very easy and it is true that

662
00:36:28,420 --> 00:36:35,600
this could be implemented by using

663
00:36:31,390 --> 00:36:37,839
script with a simple past or maybe you

664
00:36:35,600 --> 00:36:41,870
can have a system doesn't support

665
00:36:37,840 --> 00:36:44,600
queries much in legacy type machines etc

666
00:36:41,870 --> 00:36:48,799
so you could implement the API the

667
00:36:44,600 --> 00:36:51,020
remote API you spike OS query and have

668
00:36:48,800 --> 00:36:55,900
another system that supports this kind

669
00:36:51,020 --> 00:37:00,500
of ports that could be possible let me

670
00:36:55,900 --> 00:37:03,320
focus on extras now because I want to

671
00:37:00,500 --> 00:37:07,940
explain on-demand queries or real-time

672
00:37:03,320 --> 00:37:11,090
ending an endpoint so you have a the

673
00:37:07,940 --> 00:37:13,660
Oscar daemon that is implemented a

674
00:37:11,090 --> 00:37:16,700
service in the machine that have

675
00:37:13,660 --> 00:37:22,580
programmer configured queries to be

676
00:37:16,700 --> 00:37:26,299
executed at each time length so I need

677
00:37:22,580 --> 00:37:30,020
to investigate to search the kind of

678
00:37:26,300 --> 00:37:32,600
machine and this host and quickly and I

679
00:37:30,020 --> 00:37:34,910
want to know what is the information of

680
00:37:32,600 --> 00:37:37,130
the operating systems and the users or

681
00:37:34,910 --> 00:37:39,109
the routes that is by all paths that are

682
00:37:37,130 --> 00:37:43,160
being used and I need this right now so

683
00:37:39,110 --> 00:37:46,850
you could implement there's part TLS

684
00:37:43,160 --> 00:37:50,180
endpoint configured queries and this is

685
00:37:46,850 --> 00:37:53,000
important for research investigation on

686
00:37:50,180 --> 00:37:56,080
in case of instant response when you

687
00:37:53,000 --> 00:38:01,160
need first hand and very fast

688
00:37:56,080 --> 00:38:03,770
information flags are as follows you set

689
00:38:01,160 --> 00:38:06,589
up queries to activate distributed

690
00:38:03,770 --> 00:38:09,140
queries which is deactivated by default

691
00:38:06,590 --> 00:38:11,720
you would define the interval that

692
00:38:09,140 --> 00:38:14,779
intervals in which the query will be

693
00:38:11,720 --> 00:38:18,020
checking in the host that is running

694
00:38:14,780 --> 00:38:20,570
your TLS endpoint you define the

695
00:38:18,020 --> 00:38:22,250
plugging that is working the TLS plugin

696
00:38:20,570 --> 00:38:25,100
actually because in OS query you can

697
00:38:22,250 --> 00:38:26,780
define different plugins and you can

698
00:38:25,100 --> 00:38:29,089
make them run at the same time for

699
00:38:26,780 --> 00:38:31,700
example you say I won't config always

700
00:38:29,090 --> 00:38:34,790
query configuration and on demand query

701
00:38:31,700 --> 00:38:38,930
will go through TLS but logs will be

702
00:38:34,790 --> 00:38:41,570
done locally because I used lock stars

703
00:38:38,930 --> 00:38:44,270
for plans for water or any other kind of

704
00:38:41,570 --> 00:38:45,710
solution these logs will be locally

705
00:38:44,270 --> 00:38:49,940
stored and then you send them to a

706
00:38:45,710 --> 00:38:52,100
different system the flexibility the

707
00:38:49,940 --> 00:38:54,980
necessary flexibility to define things

708
00:38:52,100 --> 00:38:57,230
according to your needs and this would

709
00:38:54,980 --> 00:39:00,500
be defined here so you would define the

710
00:38:57,230 --> 00:39:04,010
maximum number of attempts to send the

711
00:39:00,500 --> 00:39:07,210
query and then the path of the system

712
00:39:04,010 --> 00:39:10,820
for either

713
00:39:07,210 --> 00:39:14,270
reiden point when you launch a query l

714
00:39:10,820 --> 00:39:17,660
read and point and then you get the

715
00:39:14,270 --> 00:39:20,030
result and on right so you have read and

716
00:39:17,660 --> 00:39:23,540
point and write and when you receive the

717
00:39:20,030 --> 00:39:27,710
results so another part another extra

718
00:39:23,540 --> 00:39:29,840
configuration is file carving so fat

719
00:39:27,710 --> 00:39:31,040
carving is when you have a machine and

720
00:39:29,840 --> 00:39:33,170
you believe this machine to be

721
00:39:31,040 --> 00:39:39,580
compromised and you want to carve all

722
00:39:33,170 --> 00:39:41,900
the files and home slash user slash

723
00:39:39,580 --> 00:39:44,120
percentage and you want to take them and

724
00:39:41,900 --> 00:39:47,540
send them to your TLS server so you

725
00:39:44,120 --> 00:39:51,170
define one file a single file or number

726
00:39:47,540 --> 00:39:56,259
of files using logs for example all

727
00:39:51,170 --> 00:40:01,100
files in this directory for all files

728
00:39:56,260 --> 00:40:05,030
with this name percentage musics and

729
00:40:01,100 --> 00:40:07,790
then percentage because the like effect

730
00:40:05,030 --> 00:40:09,620
of the TLS will would be considered in

731
00:40:07,790 --> 00:40:13,040
this regard and you can activate

732
00:40:09,620 --> 00:40:17,960
compression I was query automatically

733
00:40:13,040 --> 00:40:20,990
would come and bundle them together

734
00:40:17,960 --> 00:40:24,470
and then send to TLS for communication

735
00:40:20,990 --> 00:40:27,620
to be faster the example how the query

736
00:40:24,470 --> 00:40:32,439
sent to us OS query is this fellow you

737
00:40:27,620 --> 00:40:38,720
use the curves table you define the file

738
00:40:32,440 --> 00:40:42,620
path file or directory and you should

739
00:40:38,720 --> 00:40:49,189
put path equal one otherwise curve will

740
00:40:42,620 --> 00:40:54,470
never be run so flags real-time query

741
00:40:49,190 --> 00:40:57,350
system is activated by default so this

742
00:40:54,470 --> 00:41:00,200
is an experimental four function so you

743
00:40:57,350 --> 00:41:02,720
have to activate two times because it's

744
00:41:00,200 --> 00:41:07,100
deactivated by default I'm sorry so you

745
00:41:02,720 --> 00:41:09,230
have the Carver and you will get the

746
00:41:07,100 --> 00:41:13,400
size of the file you will be receiving

747
00:41:09,230 --> 00:41:16,940
the number of blocks for each request of

748
00:41:13,400 --> 00:41:20,650
the continue endpoint and then the

749
00:41:16,940 --> 00:41:23,930
number of files could be configured so

750
00:41:20,650 --> 00:41:27,470
first request saying I'm gonna send you

751
00:41:23,930 --> 00:41:30,049
all this and then files will be arriving

752
00:41:27,470 --> 00:41:33,100
so you order them once you've received

753
00:41:30,050 --> 00:41:39,820
them you put them together and then you

754
00:41:33,100 --> 00:41:43,130
verify the path I developed myself

755
00:41:39,820 --> 00:41:46,400
solution for TLS endpoint this is the

756
00:41:43,130 --> 00:41:49,190
architecture I use so basically the idea

757
00:41:46,400 --> 00:41:50,990
is that the TLS endpoint is on the

758
00:41:49,190 --> 00:41:53,000
internet system could be deployed all

759
00:41:50,990 --> 00:41:59,500
around the world you have all the us

760
00:41:53,000 --> 00:42:02,300
cool query node results etc this is very

761
00:41:59,500 --> 00:42:05,900
simple so then you will have the

762
00:42:02,300 --> 00:42:09,560
administration administration part for

763
00:42:05,900 --> 00:42:14,630
queries or the system used by operators

764
00:42:09,560 --> 00:42:16,520
or they answer I mean the responses team

765
00:42:14,630 --> 00:42:19,880
and then the administration will turn

766
00:42:16,520 --> 00:42:22,430
through it in database so basically this

767
00:42:19,880 --> 00:42:25,160
is a very simple distributed system

768
00:42:22,430 --> 00:42:27,770
which works very well when you have all

769
00:42:25,160 --> 00:42:31,879
the others query notes different

770
00:42:27,770 --> 00:42:38,420
components the TLS endpoint first for

771
00:42:31,880 --> 00:42:42,260
the OS query nodes no authentication you

772
00:42:38,420 --> 00:42:45,370
can use simple certification or or

773
00:42:42,260 --> 00:42:47,840
authentication by certificate and then

774
00:42:45,370 --> 00:42:50,750
different context for execution and the

775
00:42:47,840 --> 00:42:55,250
data are sent related system so that is

776
00:42:50,750 --> 00:42:57,140
the original design was designed to be

777
00:42:55,250 --> 00:43:00,290
used proportionally because at the

778
00:42:57,140 --> 00:43:04,160
beginning you try to roll down one

779
00:43:00,290 --> 00:43:07,820
solution at the beginning and fight I

780
00:43:04,160 --> 00:43:09,620
fought with the IT team because one

781
00:43:07,820 --> 00:43:11,600
Monday morning I came to the office and

782
00:43:09,620 --> 00:43:14,660
fifteen thousand machines have been

783
00:43:11,600 --> 00:43:18,770
integrated is that I had developed this

784
00:43:14,660 --> 00:43:20,240
for for this to be distributed in ten

785
00:43:18,770 --> 00:43:22,000
instances in different geographies

786
00:43:20,240 --> 00:43:25,299
because

787
00:43:22,000 --> 00:43:28,599
it has been thought for being used as in

788
00:43:25,299 --> 00:43:31,210
a simple way so you say something is

789
00:43:28,599 --> 00:43:34,210
gonna be screwed up I'm sure about that

790
00:43:31,210 --> 00:43:36,549
but you have a you have a great traffic

791
00:43:34,210 --> 00:43:39,190
running through this so it has been

792
00:43:36,549 --> 00:43:41,619
thought for being used in distributed

793
00:43:39,190 --> 00:43:44,140
system in different area so the

794
00:43:41,619 --> 00:43:46,559
administration console that communicates

795
00:43:44,140 --> 00:43:51,190
with the TLS through a database

796
00:43:46,559 --> 00:43:54,880
it could be not on the internet but on a

797
00:43:51,190 --> 00:43:57,910
private network or in or a VPN or you

798
00:43:54,880 --> 00:44:01,750
can use different sign name notes

799
00:43:57,910 --> 00:44:03,430
etcetera and then maybe because because

800
00:44:01,750 --> 00:44:11,470
I had a mad experience I create myself

801
00:44:03,430 --> 00:44:15,490
at commands control our database so this

802
00:44:11,470 --> 00:44:17,368
is the line of command so then I don't

803
00:44:15,490 --> 00:44:21,038
miss I miss anything

804
00:44:17,369 --> 00:44:23,619
so this is good to automate tasks

805
00:44:21,039 --> 00:44:26,559
because nodes are given in different

806
00:44:23,619 --> 00:44:29,430
formats and now the most important thing

807
00:44:26,559 --> 00:44:29,430
which is that demo

808
00:44:32,630 --> 00:44:39,590
okay we're long and this is the system

809
00:44:37,220 --> 00:44:41,810
which is very simple as you can see I

810
00:44:39,590 --> 00:44:44,660
know if people sitting at the rear can

811
00:44:41,810 --> 00:44:50,360
see it as well but we aggregated here

812
00:44:44,660 --> 00:44:55,720
the service aggregated or added when you

813
00:44:50,360 --> 00:44:58,250
roll down things you add the service the

814
00:44:55,720 --> 00:44:59,419
administration or TLS service because

815
00:44:58,250 --> 00:45:02,090
the two of them are working with the

816
00:44:59,420 --> 00:45:05,530
same machine so they add themselves and

817
00:45:02,090 --> 00:45:09,290
you can monitor the system through the

818
00:45:05,530 --> 00:45:12,410
so you collect information you said what

819
00:45:09,290 --> 00:45:15,080
the execution process will be the

820
00:45:12,410 --> 00:45:16,700
machine the localhost you see the

821
00:45:15,080 --> 00:45:19,700
changes that were produced the kind of

822
00:45:16,700 --> 00:45:23,270
platform the version you have also the

823
00:45:19,700 --> 00:45:25,609
IP and if you have machines using the

824
00:45:23,270 --> 00:45:27,830
end the internet you can use

825
00:45:25,610 --> 00:45:29,840
geolocalization features and more

826
00:45:27,830 --> 00:45:35,150
details when they enroll and was done

827
00:45:29,840 --> 00:45:38,660
when last stated status what the results

828
00:45:35,150 --> 00:45:40,790
was produced so data that are

829
00:45:38,660 --> 00:45:45,680
interesting to manage different machines

830
00:45:40,790 --> 00:45:48,440
status is a little bit complicated but

831
00:45:45,680 --> 00:45:53,589
they can be good to see everything and

832
00:45:48,440 --> 00:45:56,960
then results and these are the new by

833
00:45:53,590 --> 00:45:59,630
context so this is the setup or

834
00:45:56,960 --> 00:46:03,430
configuration as I said before the

835
00:45:59,630 --> 00:46:07,970
different options the schedule queries

836
00:46:03,430 --> 00:46:11,419
writers and metadata the aggregates

837
00:46:07,970 --> 00:46:17,750
information that is necessary for the

838
00:46:11,420 --> 00:46:19,700
service scheduled and now I'm going to

839
00:46:17,750 --> 00:46:22,550
show you something with the line of

840
00:46:19,700 --> 00:46:24,859
commands using the line of command in

841
00:46:22,550 --> 00:46:27,260
order to aggregate a new function system

842
00:46:24,860 --> 00:46:30,980
and I'm going to add new things why is

843
00:46:27,260 --> 00:46:33,440
that because I think it all depends on

844
00:46:30,980 --> 00:46:37,040
the share or pepper system to add all

845
00:46:33,440 --> 00:46:41,450
the machine so I create myself a system

846
00:46:37,040 --> 00:46:43,310
with a script to configure or add hours

847
00:46:41,450 --> 00:46:46,129
query within the endpoint of use

848
00:46:43,310 --> 00:46:52,180
so I have a couple of virtual machines

849
00:46:46,130 --> 00:47:00,560
that are working I mean in operation now

850
00:46:52,180 --> 00:47:03,020
so opt control the different options so

851
00:47:00,560 --> 00:47:08,840
the first thing is to add a context and

852
00:47:03,020 --> 00:47:16,460
you say ok you write context ADT we need

853
00:47:08,840 --> 00:47:24,760
a contract we add each and then router

854
00:47:16,460 --> 00:47:33,100
- host 10.10 to ten dot six - comes

855
00:47:24,760 --> 00:47:36,680
slash a big round machine then query LOI

856
00:47:33,100 --> 00:47:39,410
query so I'm writing here the

857
00:47:36,680 --> 00:47:41,779
distribution to all my machines same

858
00:47:39,410 --> 00:47:44,390
thing that I have the same I have an

859
00:47:41,780 --> 00:47:47,470
account in the development context and

860
00:47:44,390 --> 00:47:50,390
then the certificate according to which

861
00:47:47,470 --> 00:47:52,100
that I'm going to be using for the

862
00:47:50,390 --> 00:47:54,529
machines to recognize the system

863
00:47:52,100 --> 00:47:56,390
otherwise our query will decide and I

864
00:47:54,530 --> 00:47:58,480
cannot validate the system and I'm not

865
00:47:56,390 --> 00:48:07,400
going to use the system if we don't

866
00:47:58,480 --> 00:48:11,120
enjoy this so I have added everything so

867
00:48:07,400 --> 00:48:14,570
we have the router context the D context

868
00:48:11,120 --> 00:48:17,870
so going back here we refresh we see the

869
00:48:14,570 --> 00:48:20,870
Rooter context has been added machines

870
00:48:17,870 --> 00:48:23,750
that are activated in act in in not in

871
00:48:20,870 --> 00:48:26,299
operation so I unrolled machines this is

872
00:48:23,750 --> 00:48:28,730
standard form ax and Linux all the UNIX

873
00:48:26,300 --> 00:48:31,970
machines and this is PowerShell for the

874
00:48:28,730 --> 00:48:36,140
other systems and I have here the

875
00:48:31,970 --> 00:48:40,009
machine so I execute them here so you

876
00:48:36,140 --> 00:48:44,720
have the enrolled thing I executed I

877
00:48:40,010 --> 00:48:47,510
executed here and here so so we we

878
00:48:44,720 --> 00:48:51,419
didn't have any activated machine we

879
00:48:47,510 --> 00:48:54,420
have three hosts here and

880
00:48:51,420 --> 00:48:57,750
you can add more instances that are

881
00:48:54,420 --> 00:48:59,819
running if you want so you say I want to

882
00:48:57,750 --> 00:49:03,710
know all the processes that are running

883
00:48:59,819 --> 00:49:07,730
in our my router execution environment

884
00:49:03,710 --> 00:49:08,849
so your execute router when you execute

885
00:49:07,730 --> 00:49:11,130
query

886
00:49:08,849 --> 00:49:15,930
it's a linus machine so what do I need

887
00:49:11,130 --> 00:49:18,299
so I need this so I see here all the

888
00:49:15,930 --> 00:49:20,910
processes when I get the process I get

889
00:49:18,299 --> 00:49:23,910
to the last process out it so you add

890
00:49:20,910 --> 00:49:26,730
the query here and now the target I want

891
00:49:23,910 --> 00:49:29,308
to execute so I'll be using for context

892
00:49:26,730 --> 00:49:30,869
I want to use all the machine of the

893
00:49:29,309 --> 00:49:34,640
context I'll launch the query the query

894
00:49:30,869 --> 00:49:38,279
is is working the number of successful

895
00:49:34,640 --> 00:49:40,950
executions and failed execution based on

896
00:49:38,279 --> 00:49:43,619
their status as we can see three

897
00:49:40,950 --> 00:49:46,558
machines in the router execution context

898
00:49:43,619 --> 00:49:48,960
so I would go to query and then there's

899
00:49:46,559 --> 00:49:53,970
a result with all the systems based on

900
00:49:48,960 --> 00:49:57,480
their name and all the queries running

901
00:49:53,970 --> 00:50:02,250
in the router execution environment so

902
00:49:57,480 --> 00:50:10,259
you could use alert to apply other rules

903
00:50:02,250 --> 00:50:14,000
etc okay now a couple of things that I

904
00:50:10,259 --> 00:50:18,539
need to complete implementation still

905
00:50:14,000 --> 00:50:21,630
probably this tool will be opened I'm

906
00:50:18,539 --> 00:50:25,859
very obsessed so I don't want to open

907
00:50:21,630 --> 00:50:29,569
things if they are not completed if then

908
00:50:25,859 --> 00:50:34,589
I completed so I would use the modular

909
00:50:29,569 --> 00:50:39,630
logger for e lk kinases Kafka another

910
00:50:34,589 --> 00:50:44,460
kind of a modular systems I want to use

911
00:50:39,630 --> 00:50:48,029
this to be able with WCS at the moment

912
00:50:44,460 --> 00:50:54,299
we do this locally I would like I want

913
00:50:48,029 --> 00:50:57,090
to finish implementing caches with the

914
00:50:54,299 --> 00:51:01,490
Redis

915
00:50:57,090 --> 00:51:01,490
so but using one cash cash you would

916
00:51:02,990 --> 00:51:10,410
avoid some problems when we use fatties

917
00:51:06,900 --> 00:51:12,930
so I was query advanced I was query if

918
00:51:10,410 --> 00:51:15,270
you're interested you might find this on

919
00:51:12,930 --> 00:51:20,040
your own because this will change your

920
00:51:15,270 --> 00:51:21,960
idea of how coming up with the responses

921
00:51:20,040 --> 00:51:24,810
in an efficient and efficient way so you

922
00:51:21,960 --> 00:51:27,540
might find if I am file integrity

923
00:51:24,810 --> 00:51:31,440
monitoring because I was query could be

924
00:51:27,540 --> 00:51:35,279
used to detect file integrity breaches

925
00:51:31,440 --> 00:51:36,900
so event tables or audit system that

926
00:51:35,280 --> 00:51:40,080
generates information when things happen

927
00:51:36,900 --> 00:51:42,020
this is good to know when new process is

928
00:51:40,080 --> 00:51:45,259
happening or new connection happening

929
00:51:42,020 --> 00:51:49,259
connections happen or when new users

930
00:51:45,260 --> 00:51:52,200
happen and that's very good so the I was

931
00:51:49,260 --> 00:51:56,550
query extension to be executed as part

932
00:51:52,200 --> 00:51:59,839
of always query with a system see plus

933
00:51:56,550 --> 00:52:02,370
Kivar Python there is a extension

934
00:51:59,840 --> 00:52:06,270
repository in dump I people have

935
00:52:02,370 --> 00:52:10,020
terabytes which will allow you to create

936
00:52:06,270 --> 00:52:12,509
firewall rules an activation for the

937
00:52:10,020 --> 00:52:16,380
platform you'll be using using hours

938
00:52:12,510 --> 00:52:19,470
query which is an advanced query because

939
00:52:16,380 --> 00:52:21,900
you can orchestrate thing and say if I

940
00:52:19,470 --> 00:52:24,330
have results from this query you will

941
00:52:21,900 --> 00:52:26,610
create a rule for this machine to be

942
00:52:24,330 --> 00:52:28,920
isolated and see what is happening with

943
00:52:26,610 --> 00:52:31,710
the machine to know what a machine whose

944
00:52:28,920 --> 00:52:35,280
compressed or not and then automated

945
00:52:31,710 --> 00:52:37,350
table construction ATC that defines the

946
00:52:35,280 --> 00:52:37,920
information you're looking for an OS

947
00:52:37,350 --> 00:52:40,940
query

948
00:52:37,920 --> 00:52:43,890
automatically will create a custom table

949
00:52:40,940 --> 00:52:47,370
with real temporaries or scheduled

950
00:52:43,890 --> 00:52:49,710
queries you can query the custom table

951
00:52:47,370 --> 00:52:52,740
otherwise you would have a more complex

952
00:52:49,710 --> 00:52:57,090
or complicated query which will be

953
00:52:52,740 --> 00:52:59,490
longer that's it query has a lot of

954
00:52:57,090 --> 00:53:02,980
information you have the codes on the

955
00:52:59,490 --> 00:53:05,470
website you have an official hours query

956
00:53:02,980 --> 00:53:07,960
black I don't know if you have time for

957
00:53:05,470 --> 00:53:11,770
questions or not oh yeah we do so

958
00:53:07,960 --> 00:53:15,990
questions let's see if I made up

959
00:53:11,770 --> 00:53:19,359
everything okay or not no questions so

960
00:53:15,990 --> 00:53:20,979
if if if all is clear it's maybe

961
00:53:19,359 --> 00:53:21,880
everything was clear or nobody

962
00:53:20,980 --> 00:53:23,680
understood anything

963
00:53:21,880 --> 00:53:26,770
I don't know so if you have questions oh

964
00:53:23,680 --> 00:53:31,649
yes there's a question here I think it

965
00:53:26,770 --> 00:53:34,570
was very interesting your solution to

966
00:53:31,650 --> 00:53:37,839
monitor obscure things

967
00:53:34,570 --> 00:53:39,880
is there an integration for file

968
00:53:37,839 --> 00:53:42,970
monitoring I'm really interesting on

969
00:53:39,880 --> 00:53:45,730
that content now hashing files in order

970
00:53:42,970 --> 00:53:48,819
to have files and when the file is

971
00:53:45,730 --> 00:53:54,070
changed you see an alert on the other

972
00:53:48,820 --> 00:53:57,070
hand monitoring services that might be

973
00:53:54,070 --> 00:54:08,200
listening to incoming connections to

974
00:53:57,070 --> 00:54:10,119
know if something has been exactly that

975
00:54:08,200 --> 00:54:13,240
it's done by the file integrity

976
00:54:10,119 --> 00:54:22,319
monitoring system I'm doing all access

977
00:54:13,240 --> 00:54:25,089
types but in the case of single cases

978
00:54:22,319 --> 00:54:27,069
given point in time I do suspect and it

979
00:54:25,089 --> 00:54:29,730
might be funny things there yes then you

980
00:54:27,069 --> 00:54:33,369
can activate it a second question

981
00:54:29,730 --> 00:54:36,099
regarding the tables even tables for

982
00:54:33,369 --> 00:54:42,130
instance those event tables you can have

983
00:54:36,099 --> 00:54:43,780
a joins with all the new connections I

984
00:54:42,130 --> 00:54:45,880
want that information to be retrieved

985
00:54:43,780 --> 00:54:49,240
you want to get this information with

986
00:54:45,880 --> 00:54:51,369
the one table in the case of us query or

987
00:54:49,240 --> 00:54:55,560
activating the auditing system you can

988
00:54:51,369 --> 00:54:59,900
monitor this well and some reported

989
00:54:55,560 --> 00:55:03,470
presenter some postures about it and

990
00:54:59,900 --> 00:55:07,190
to activate allergen systems I can send

991
00:55:03,470 --> 00:55:09,709
you the link I can even show this to all

992
00:55:07,190 --> 00:55:12,000
of you include this as part of my slides

993
00:55:09,710 --> 00:55:14,500
Thank You excellent thank you

994
00:55:12,000 --> 00:55:14,500
[Applause]

