1
00:00:00,170 --> 00:00:06,779
well what if I could save more let's

2
00:00:04,380 --> 00:00:08,280
analyze over a kernel exploitation

3
00:00:06,779 --> 00:00:10,500
presentation is about Cardinal

4
00:00:08,280 --> 00:00:13,469
exploitation I know that there are many

5
00:00:10,500 --> 00:00:15,750
people fond of colonel kizhe first of

6
00:00:13,469 --> 00:00:20,369
all I would like to congratulate reddit

7
00:00:15,750 --> 00:00:23,670
Connell 10th anniversary and the only

8
00:00:20,369 --> 00:00:29,939
one who is flattering routed cone I

9
00:00:23,670 --> 00:00:32,399
think I have participated in the return

10
00:00:29,939 --> 00:00:35,130
of the ten rooted cones I gave

11
00:00:32,399 --> 00:00:38,899
presentations in front of them and one

12
00:00:35,130 --> 00:00:42,629
year I gave two presentations and then

13
00:00:38,899 --> 00:00:46,170
another edition I shared a presentation

14
00:00:42,629 --> 00:00:52,860
with Danny we won we were the best

15
00:00:46,170 --> 00:00:54,690
braided presentation and well as I said

16
00:00:52,860 --> 00:00:56,280
our presentation the password really

17
00:00:54,690 --> 00:00:58,199
entertaining good fun but they are not

18
00:00:56,280 --> 00:00:58,590
good fun anymore now they are really

19
00:00:58,199 --> 00:01:02,730
boring

20
00:00:58,590 --> 00:01:06,689
Ohama I kept a Alma Twitter neither man

21
00:01:02,730 --> 00:01:10,220
and most of my time is devoted to being

22
00:01:06,689 --> 00:01:14,009
a hater at the interwebs and now

23
00:01:10,220 --> 00:01:26,610
seriously you may know me better for

24
00:01:14,010 --> 00:01:31,619
being the king of small things you know

25
00:01:26,610 --> 00:01:33,299
me as well for being small things and

26
00:01:31,619 --> 00:01:37,650
this is the type of things that I do

27
00:01:33,299 --> 00:01:39,960
when I go through NATO TV show and this

28
00:01:37,650 --> 00:01:42,240
is what I have to put up with let us see

29
00:01:39,960 --> 00:01:45,869
if you do some magic tricks but not with

30
00:01:42,240 --> 00:01:51,990
cards but with drinks and then neither

31
00:01:45,869 --> 00:01:55,049
saying after plus magician plus drink 15

32
00:01:51,990 --> 00:01:58,350
euros that not include bugs from Colonel

33
00:01:55,049 --> 00:02:00,719
well this is now talking seriously so I

34
00:01:58,350 --> 00:02:03,899
didn't have any recent photographs to

35
00:02:00,719 --> 00:02:07,059
bring with me so this is me I've been

36
00:02:03,899 --> 00:02:09,889
working as a researcher for can

37
00:02:07,060 --> 00:02:14,350
cannot for cussing because I say was

38
00:02:09,889 --> 00:02:19,549
very cool I used to have a CTS but now I

39
00:02:14,350 --> 00:02:23,630
waste my time in GDP now this is the

40
00:02:19,550 --> 00:02:25,610
disclaimer that I show every year if you

41
00:02:23,630 --> 00:02:27,920
go back to presentation that I gave two

42
00:02:25,610 --> 00:02:30,230
years ago he was a very same disclaimer

43
00:02:27,920 --> 00:02:35,839
please do not use daca for security

44
00:02:30,230 --> 00:02:39,709
purposes okay because we don't have lots

45
00:02:35,840 --> 00:02:40,430
of time how we'll skip that is this all

46
00:02:39,709 --> 00:02:43,660
about

47
00:02:40,430 --> 00:02:47,750
I'm not a big fan of exploitation tools

48
00:02:43,660 --> 00:02:50,239
of no specific bug because we really

49
00:02:47,750 --> 00:02:52,940
that requires the audience to have a

50
00:02:50,239 --> 00:02:54,920
deep understanding of the times they are

51
00:02:52,940 --> 00:02:58,250
boring hearted fellow if you get

52
00:02:54,920 --> 00:03:00,470
distracted you may lose the whole thread

53
00:02:58,250 --> 00:03:02,780
of the presentation so often these

54
00:03:00,470 --> 00:03:05,180
presentations have quite when people do

55
00:03:02,780 --> 00:03:08,780
not like not very much this should be a

56
00:03:05,180 --> 00:03:11,329
trial trilogy that is to say talk about

57
00:03:08,780 --> 00:03:13,130
can I don't talk about canal I don't

58
00:03:11,329 --> 00:03:17,870
speak about kindness because that's what

59
00:03:13,130 --> 00:03:20,150
I do daily basis talk about expectation

60
00:03:17,870 --> 00:03:23,120
memory management better being tool

61
00:03:20,150 --> 00:03:25,910
sanitizer how to find bugs but because I

62
00:03:23,120 --> 00:03:29,570
will never do that I'm going trying to

63
00:03:25,910 --> 00:03:32,390
make a mix that is to say I will try to

64
00:03:29,570 --> 00:03:35,930
explain a real-life bug and how to

65
00:03:32,390 --> 00:03:40,458
exploit it what we will try to explain

66
00:03:35,930 --> 00:03:42,880
is share with you introduction to basic

67
00:03:40,459 --> 00:03:45,950
on a concept bicycle and exploitation

68
00:03:42,880 --> 00:03:48,380
some medications are often implemented

69
00:03:45,950 --> 00:03:50,600
in kernel I will not be talking about

70
00:03:48,380 --> 00:03:54,590
memory management or dynamic memory

71
00:03:50,600 --> 00:03:59,780
management and will tell you or share

72
00:03:54,590 --> 00:04:02,600
with you a real-world exploit I will try

73
00:03:59,780 --> 00:04:04,670
to explain it at a very high level I'm

74
00:04:02,600 --> 00:04:07,910
sure those are basic knowledge will not

75
00:04:04,670 --> 00:04:10,608
like it because we're not fully follow

76
00:04:07,910 --> 00:04:12,350
it and those who have high level of

77
00:04:10,609 --> 00:04:14,610
expertise you go and say please do not

78
00:04:12,350 --> 00:04:18,570
tell me that just tell me about

79
00:04:14,610 --> 00:04:21,120
but let me tell about the back so I will

80
00:04:18,570 --> 00:04:24,210
start off with the parallel Rajal and

81
00:04:21,120 --> 00:04:28,260
the rigid con those who will survive

82
00:04:24,210 --> 00:04:31,109
will get free drinks so basic things

83
00:04:28,260 --> 00:04:33,300
about kana kana according to Wikipedia I

84
00:04:31,110 --> 00:04:35,340
don't know whether you are aware of what

85
00:04:33,300 --> 00:04:37,350
kernel is about I'm not going to read

86
00:04:35,340 --> 00:04:41,700
all that but basically man it is the

87
00:04:37,350 --> 00:04:45,030
memory the processes it is the separate

88
00:04:41,700 --> 00:04:48,780
area of the memory does access is not

89
00:04:45,030 --> 00:04:51,900
allowed to may interfere from different

90
00:04:48,780 --> 00:04:53,669
user space through system call and

91
00:04:51,900 --> 00:04:56,190
through many other methods see if you

92
00:04:53,670 --> 00:05:00,000
visit Wikipedia okay you may read

93
00:04:56,190 --> 00:05:03,420
through all that this is a graph where

94
00:05:00,000 --> 00:05:05,970
we can see this lower locator the

95
00:05:03,420 --> 00:05:08,070
mcalligator I cannot tell you more

96
00:05:05,970 --> 00:05:11,190
because we don't have the time phrase

97
00:05:08,070 --> 00:05:14,310
but these are a couple of basics so

98
00:05:11,190 --> 00:05:17,070
virtual memory one of the first things

99
00:05:14,310 --> 00:05:19,590
that Canon makes is to manage the memory

100
00:05:17,070 --> 00:05:21,870
of the system the physical memory will

101
00:05:19,590 --> 00:05:24,840
have from byte 0 to 2 gigabytes of

102
00:05:21,870 --> 00:05:26,730
memory or 8 or 20 you name it but

103
00:05:24,840 --> 00:05:30,960
actually the machine when you're working

104
00:05:26,730 --> 00:05:33,960
with it you don't see from byte 0 to 8

105
00:05:30,960 --> 00:05:37,440
gigabytes so do you get to see these

106
00:05:33,960 --> 00:05:41,700
addresses and these are the fist bridges

107
00:05:37,440 --> 00:05:43,590
often 32-bit we had other problems or

108
00:05:41,700 --> 00:05:46,110
comments are not there anymore and now

109
00:05:43,590 --> 00:05:50,219
with in 64-bit because it isn't so much

110
00:05:46,110 --> 00:05:52,980
physical memory not only 64 bits are

111
00:05:50,220 --> 00:05:56,910
used for free forwarding so it often

112
00:05:52,980 --> 00:05:59,910
this case is well 47 bits and the symbol

113
00:05:56,910 --> 00:06:02,010
is using use and then we also extended

114
00:05:59,910 --> 00:06:04,610
those on top of negative we launched the

115
00:06:02,010 --> 00:06:08,700
kernel and those ones here at the bottom

116
00:06:04,610 --> 00:06:10,830
are from user space and these chunk in

117
00:06:08,700 --> 00:06:14,880
the middle because we haven't used these

118
00:06:10,830 --> 00:06:16,020
bits so we don't forward is we don't

119
00:06:14,880 --> 00:06:17,760
have access to it

120
00:06:16,020 --> 00:06:20,370
so the most frequent thing is the four

121
00:06:17,760 --> 00:06:23,099
level page table using 47 weeks for

122
00:06:20,370 --> 00:06:25,480
address space plus a bit sign and then

123
00:06:23,100 --> 00:06:28,120
with that you may direct 103

124
00:06:25,480 --> 00:06:31,650
terabytes of memory which is often

125
00:06:28,120 --> 00:06:35,380
normal for process of Dussehra space and

126
00:06:31,650 --> 00:06:41,979
128 for kernel into 256 terabytes

127
00:06:35,380 --> 00:06:43,659
however short echo 5 level page tables

128
00:06:41,980 --> 00:06:49,590
were introduced and now do have

129
00:06:43,660 --> 00:06:49,590
addresses with 56 bits and 64 petabytes

130
00:06:52,290 --> 00:06:59,200
basic memory map looks like this so do

131
00:06:56,620 --> 00:07:01,270
you have the user space here they sent a

132
00:06:59,200 --> 00:07:06,010
process that has been uploaded we will

133
00:07:01,270 --> 00:07:09,729
upload a different memory map locations

134
00:07:06,010 --> 00:07:12,039
linear allocations and when other things

135
00:07:09,730 --> 00:07:16,630
that are not relevant for this

136
00:07:12,040 --> 00:07:19,450
presentation if we compare that to the

137
00:07:16,630 --> 00:07:21,670
previous drafts from here to top

138
00:07:19,450 --> 00:07:25,920
including no canonical addresses that is

139
00:07:21,670 --> 00:07:30,340
to say that can be addressed up to here

140
00:07:25,920 --> 00:07:34,210
we have the and whatever is below that

141
00:07:30,340 --> 00:07:36,969
that is user space the kernel space is

142
00:07:34,210 --> 00:07:40,239
being shared between all processes and

143
00:07:36,970 --> 00:07:45,700
then depending on the memory map D this

144
00:07:40,240 --> 00:07:51,070
space changes gdb if you introduce a

145
00:07:45,700 --> 00:07:54,490
break we have the siscon to open the

146
00:07:51,070 --> 00:07:56,650
file you take a look at the process when

147
00:07:54,490 --> 00:07:58,510
you introduce the breakpoints and then

148
00:07:56,650 --> 00:08:00,669
you take a look at the interest limit

149
00:07:58,510 --> 00:08:03,039
and this tells you that this address

150
00:08:00,670 --> 00:08:05,380
here you may see you may notice that it

151
00:08:03,040 --> 00:08:07,360
is it's same as this one this is one of

152
00:08:05,380 --> 00:08:10,030
the structures that they cannot use when

153
00:08:07,360 --> 00:08:12,880
is read income checks that with that

154
00:08:10,030 --> 00:08:15,460
address limit and then living above or

155
00:08:12,880 --> 00:08:19,030
below I'm reading above or below these

156
00:08:15,460 --> 00:08:21,940
juicers space so what we often have is

157
00:08:19,030 --> 00:08:24,580
the kernel space which is shared by all

158
00:08:21,940 --> 00:08:27,790
the processes and then the processes

159
00:08:24,580 --> 00:08:30,609
processes change and here the bottom row

160
00:08:27,790 --> 00:08:32,890
of this graph well this is like a bit of

161
00:08:30,610 --> 00:08:34,120
a cheesy introduction but there you go

162
00:08:32,890 --> 00:08:38,429
so the basic

163
00:08:34,120 --> 00:08:42,789
right now if this were a very faraway

164
00:08:38,429 --> 00:08:45,010
galaxy and we have a kernel release we

165
00:08:42,789 --> 00:08:50,730
know is Marta Smith or any type of

166
00:08:45,010 --> 00:08:53,770
protection then someone will try to

167
00:08:50,730 --> 00:08:56,650
point everything that are suppose that

168
00:08:53,770 --> 00:08:59,920
we just create a mix device the kernel

169
00:08:56,650 --> 00:09:06,610
and we map it here in slash vulnerable

170
00:08:59,920 --> 00:09:08,050
we create a mix device then ioctl so we

171
00:09:06,610 --> 00:09:13,660
don't have the function that implements

172
00:09:08,050 --> 00:09:17,109
that in the kernel so when we launch an

173
00:09:13,660 --> 00:09:20,490
our CTL to the mix device and then is

174
00:09:17,110 --> 00:09:25,630
trying to preserve the memory by using

175
00:09:20,490 --> 00:09:29,580
GFP atomic some number of introductions

176
00:09:25,630 --> 00:09:33,250
and then you are very likely to return

177
00:09:29,580 --> 00:09:37,570
note and allocating now if it comes to

178
00:09:33,250 --> 00:09:42,700
know it returns no so we go here to the

179
00:09:37,570 --> 00:09:44,860
pointer without check if we do not check

180
00:09:42,700 --> 00:09:46,779
what then has returned from your nose

181
00:09:44,860 --> 00:09:50,080
actually this call would not return no

182
00:09:46,779 --> 00:09:52,000
no but it may return no so if you don't

183
00:09:50,080 --> 00:09:54,370
check it here in test will have zero

184
00:09:52,000 --> 00:09:57,040
zero zero the pointer points are zero

185
00:09:54,370 --> 00:09:59,680
and when we're gonna say to the point do

186
00:09:57,040 --> 00:10:02,260
make the reference because I want to get

187
00:09:59,680 --> 00:10:05,529
access to this counter and then we have

188
00:10:02,260 --> 00:10:07,990
0 0 +4 well that will depend on the

189
00:10:05,529 --> 00:10:11,290
pairing of these structures and then

190
00:10:07,990 --> 00:10:18,430
from the user space the trigger is an

191
00:10:11,290 --> 00:10:22,029
open and then we have the file desktop

192
00:10:18,430 --> 00:10:24,939
this is quite simple then if it triggers

193
00:10:22,029 --> 00:10:28,060
no at pointer clear reference should

194
00:10:24,940 --> 00:10:31,930
appear and what happens if we map the

195
00:10:28,060 --> 00:10:34,000
zero address so we make an end map and

196
00:10:31,930 --> 00:10:36,160
we map the zero memory of the address

197
00:10:34,000 --> 00:10:38,950
and what happens here when they can I

198
00:10:36,160 --> 00:10:41,829
will go and read 0 address then you will

199
00:10:38,950 --> 00:10:43,720
go to do special I say all the serial

200
00:10:41,830 --> 00:10:45,220
address has been mapped and then I will

201
00:10:43,720 --> 00:10:49,240
read what's in there

202
00:10:45,220 --> 00:10:50,649
you introduce these false structure we

203
00:10:49,240 --> 00:10:53,529
will have the same format down the

204
00:10:50,649 --> 00:10:56,230
kernel and then be countered you pointed

205
00:10:53,529 --> 00:10:58,480
to escalate privilege which is this

206
00:10:56,230 --> 00:11:01,240
function here in the user space and then

207
00:10:58,480 --> 00:11:04,870
I will do hacking offense and then you

208
00:11:01,240 --> 00:11:07,180
call the ioctl then you will have the

209
00:11:04,870 --> 00:11:11,620
back and then you will have a null

210
00:11:07,180 --> 00:11:14,138
pointer the reference so we have the

211
00:11:11,620 --> 00:11:19,870
kernel the structure it is where to be

212
00:11:14,139 --> 00:11:21,850
known when you call the counter then it

213
00:11:19,870 --> 00:11:24,819
reads it from here from the user space

214
00:11:21,850 --> 00:11:26,860
which is set at 0 0 0 and then it says

215
00:11:24,819 --> 00:11:28,149
that it points to the code that we have

216
00:11:26,860 --> 00:11:30,699
in the user space and then it

217
00:11:28,149 --> 00:11:33,129
accelerates it escalate privileges and

218
00:11:30,699 --> 00:11:36,969
that's it so congratulations for having

219
00:11:33,129 --> 00:11:43,899
traveled to 1999 and now you are o as EE

220
00:11:36,970 --> 00:11:46,149
certified now meets occasions these

221
00:11:43,899 --> 00:11:50,709
started to become a bit absurd because

222
00:11:46,149 --> 00:11:52,449
mitigations became trendy if there are

223
00:11:50,709 --> 00:11:54,899
medications that are no longer exploits

224
00:11:52,449 --> 00:11:57,729
but for some reason this is not the case

225
00:11:54,899 --> 00:11:59,680
for you to have a feel about the level

226
00:11:57,730 --> 00:12:02,350
of absurdity that we have reached we

227
00:11:59,680 --> 00:12:04,589
have the null pointer of reference this

228
00:12:02,350 --> 00:12:08,529
has been touched for many many years now

229
00:12:04,589 --> 00:12:10,750
so we have sanitizers here we have

230
00:12:08,529 --> 00:12:14,379
everything that had been implemented for

231
00:12:10,750 --> 00:12:21,610
the side channel for the control flow

232
00:12:14,379 --> 00:12:26,559
integrity for its map smell so full

233
00:12:21,610 --> 00:12:28,809
pages of mitigation this is a comic

234
00:12:26,559 --> 00:12:31,149
strip we together of raising the bar on

235
00:12:28,809 --> 00:12:37,360
exploitation until no more exploits can

236
00:12:31,149 --> 00:12:42,959
be seen so we comment on a couple of

237
00:12:37,360 --> 00:12:45,819
most common medications map and it's map

238
00:12:42,959 --> 00:12:50,579
everything that I will be showing to you

239
00:12:45,819 --> 00:12:54,988
will be Intel 864 smart

240
00:12:50,579 --> 00:12:57,959
SMAP have protections like the ones that

241
00:12:54,989 --> 00:13:00,480
reduced mark a memory zone they done

242
00:12:57,959 --> 00:13:03,599
executed and this is reviewed by the

243
00:13:00,480 --> 00:13:08,360
processor your Kernan doesn't do that as

244
00:13:03,600 --> 00:13:15,239
much if you are on a privilege mode or

245
00:13:08,360 --> 00:13:20,179
executing kernel code pages are having

246
00:13:15,239 --> 00:13:20,179
marked as user pages will not be read

247
00:13:20,209 --> 00:13:27,268
and you cannot execute code from any

248
00:13:23,339 --> 00:13:29,639
pages that are user space while CPU is

249
00:13:27,269 --> 00:13:31,860
running in the privileged Mountain so

250
00:13:29,639 --> 00:13:37,110
when it's implemented in beats 20 the

251
00:13:31,860 --> 00:13:40,980
other one is 21 and then in this map CLC

252
00:13:37,110 --> 00:13:44,759
and stuck flags are being used to clean

253
00:13:40,980 --> 00:13:49,829
and set it so what will happen if we use

254
00:13:44,759 --> 00:13:53,730
our bug from 1999 with this so we have

255
00:13:49,829 --> 00:13:56,939
had known then the reference and then

256
00:13:53,730 --> 00:13:59,399
these points at zero then gets the

257
00:13:56,939 --> 00:14:01,230
structure we try to read it and I said

258
00:13:59,399 --> 00:14:03,029
that the code is in the user space they

259
00:14:01,230 --> 00:14:04,919
would try to execute it and then this

260
00:14:03,029 --> 00:14:07,799
message look at kind of execute code

261
00:14:04,919 --> 00:14:11,369
that has been hosted in with the user

262
00:14:07,799 --> 00:14:18,839
especially and then we have this one

263
00:14:11,369 --> 00:14:21,059
goes to read the zero address you cannot

264
00:14:18,839 --> 00:14:23,399
even read it in the user space neither

265
00:14:21,059 --> 00:14:26,639
the zero address or any other address

266
00:14:23,399 --> 00:14:32,869
another one that you may have had office

267
00:14:26,639 --> 00:14:36,029
KPT I okay sir this one was implemented

268
00:14:32,869 --> 00:14:38,879
as a result of this tech meltdown

269
00:14:36,029 --> 00:14:42,749
attacks so basically it has two sets of

270
00:14:38,879 --> 00:14:44,699
page tables has a set of page tables

271
00:14:42,749 --> 00:14:46,980
from Connors where all the user space

272
00:14:44,699 --> 00:14:51,449
are marked as non-executive also you

273
00:14:46,980 --> 00:14:54,509
have to buy one under mitigation against

274
00:14:51,449 --> 00:14:56,149
side channels and now you have free is

275
00:14:54,509 --> 00:15:00,839
map that you get with your cell phone

276
00:14:56,149 --> 00:15:02,889
and then these another page table well

277
00:15:00,839 --> 00:15:07,899
the kernel is reduced

278
00:15:02,889 --> 00:15:10,540
minimum there's enough space for Cisco's

279
00:15:07,899 --> 00:15:13,949
and others so therefore you are reducing

280
00:15:10,540 --> 00:15:16,929
the level of exposure in terms of the

281
00:15:13,949 --> 00:15:18,969
size of memory that is being used to

282
00:15:16,929 --> 00:15:21,549
introduce attack this is like really

283
00:15:18,970 --> 00:15:23,589
awful but there is nothing we can do

284
00:15:21,549 --> 00:15:26,230
about it so if we take a look at it in a

285
00:15:23,589 --> 00:15:32,049
graphical manner in the past we have

286
00:15:26,230 --> 00:15:35,529
these page tables no matter whether we

287
00:15:32,049 --> 00:15:38,799
were into sales page privileged mode or

288
00:15:35,529 --> 00:15:41,739
not whereas now with page tables

289
00:15:38,799 --> 00:15:44,290
isolation when we are running on kernel

290
00:15:41,739 --> 00:15:46,720
mode we have the user space but the user

291
00:15:44,290 --> 00:15:48,819
space is marked as executable and if

292
00:15:46,720 --> 00:15:52,199
it's running and use induce inner space

293
00:15:48,819 --> 00:15:55,118
will have a minimum area of attack

294
00:15:52,199 --> 00:15:58,329
therefore what will happen if you don't

295
00:15:55,119 --> 00:16:03,459
have his map was made and we could map 0

296
00:15:58,329 --> 00:16:06,160
address so when we try to execute code

297
00:16:03,459 --> 00:16:07,719
in reducer in space would not allow us

298
00:16:06,160 --> 00:16:10,419
to do it because you had any privilege

299
00:16:07,720 --> 00:16:13,299
modes and you try to execute here it

300
00:16:10,419 --> 00:16:15,749
will destroy the page table that has

301
00:16:13,299 --> 00:16:19,899
marked it uses Python or non-executable

302
00:16:15,749 --> 00:16:22,959
management of dynamic memory will I will

303
00:16:19,899 --> 00:16:27,100
not be telling you lots about it so it

304
00:16:22,959 --> 00:16:30,479
is very similar to Kim Malik it is the

305
00:16:27,100 --> 00:16:35,019
default method that is used to preserve

306
00:16:30,480 --> 00:16:36,939
memory which is a smaller than the page

307
00:16:35,019 --> 00:16:39,910
size in the corner which is often from

308
00:16:36,939 --> 00:16:41,799
case this is organized and starting

309
00:16:39,910 --> 00:16:45,519
conscious this is time to avoid

310
00:16:41,799 --> 00:16:47,889
fragmentation through performance and in

311
00:16:45,519 --> 00:16:51,779
the past this was done with coloring and

312
00:16:47,889 --> 00:16:54,699
others so to try and improve the heat's

313
00:16:51,779 --> 00:16:57,459
if you get bored with this pepper can

314
00:16:54,699 --> 00:17:00,399
tell you more about it so this is an

315
00:16:57,459 --> 00:17:02,799
example of all these that are created by

316
00:17:00,399 --> 00:17:06,490
default they are multiples of 2 so cuz

317
00:17:02,799 --> 00:17:10,299
she is creating four objects of a 16 32

318
00:17:06,490 --> 00:17:12,370
64 up until a thousand 192 because the

319
00:17:10,299 --> 00:17:14,709
other system because they allocate so

320
00:17:12,369 --> 00:17:15,589
much they have their own caches to store

321
00:17:14,709 --> 00:17:19,159
objects

322
00:17:15,589 --> 00:17:21,918
NFC's they have their own caches to

323
00:17:19,159 --> 00:17:25,309
store the objects this is a basic graph

324
00:17:21,919 --> 00:17:27,679
you have a cache made up of his slabs

325
00:17:25,309 --> 00:17:31,789
and each s level comes in with objects

326
00:17:27,679 --> 00:17:34,070
often a slabs are the size of a page

327
00:17:31,789 --> 00:17:36,890
they are never not always multiple of

328
00:17:34,070 --> 00:17:39,110
pages of doing the pages the size of

329
00:17:36,890 --> 00:17:39,890
them and then in this case the example

330
00:17:39,110 --> 00:17:43,100
here

331
00:17:39,890 --> 00:17:45,169
imagine cashier 192 bytes not all the

332
00:17:43,100 --> 00:17:47,600
objects are here but if the alligator

333
00:17:45,169 --> 00:17:51,080
that were using is as large and often

334
00:17:47,600 --> 00:17:54,709
contains 20 chunks and if you are using

335
00:17:51,080 --> 00:17:57,500
Islam you can enter 21 because the

336
00:17:54,710 --> 00:18:00,380
descriptors are put in the front so

337
00:17:57,500 --> 00:18:02,210
alligators ever since Linnaeus was being

338
00:18:00,380 --> 00:18:03,770
implemented several alligators are being

339
00:18:02,210 --> 00:18:05,659
implemented the first one that was

340
00:18:03,770 --> 00:18:09,668
implemented was the slapper comes from

341
00:18:05,659 --> 00:18:14,059
solaris then was followed by a slap in

342
00:18:09,669 --> 00:18:16,490
theory smaller memory footprint and less

343
00:18:14,059 --> 00:18:20,178
locking and it's not personal often work

344
00:18:16,490 --> 00:18:23,029
with it is after login to enter a very

345
00:18:20,179 --> 00:18:25,880
system each hello cater have some way to

346
00:18:23,029 --> 00:18:29,630
track the memory that has been allocated

347
00:18:25,880 --> 00:18:32,779
the memory that has been free the local

348
00:18:29,630 --> 00:18:33,890
CPU caches etc and now we have another

349
00:18:32,779 --> 00:18:37,340
draft

350
00:18:33,890 --> 00:18:37,880
so we have the Kashi and the case of his

351
00:18:37,340 --> 00:18:40,639
love

352
00:18:37,880 --> 00:18:43,490
it keeps three lists so this is a bit

353
00:18:40,640 --> 00:18:46,630
confusing because it's love is the name

354
00:18:43,490 --> 00:18:49,460
given to a locator as well as to the

355
00:18:46,630 --> 00:18:51,679
units okay to the actual slabs even if

356
00:18:49,460 --> 00:18:53,929
it just it uses the allocator is lab

357
00:18:51,679 --> 00:18:56,120
this lab is the name that is given to

358
00:18:53,929 --> 00:18:58,010
the unit that is contains two objects in

359
00:18:56,120 --> 00:19:01,399
the case of a slap it contains three

360
00:18:58,010 --> 00:19:02,960
lists full partial and free in the case

361
00:19:01,399 --> 00:19:08,840
of his lab I would say that it only

362
00:19:02,960 --> 00:19:11,750
keeps the partial slab and then this is

363
00:19:08,840 --> 00:19:14,360
the gdb with the scripts and then if we

364
00:19:11,750 --> 00:19:15,080
take a look at the flash for assisted

365
00:19:14,360 --> 00:19:19,610
TCP

366
00:19:15,080 --> 00:19:21,350
it tells you the space taking out each

367
00:19:19,610 --> 00:19:23,240
of the objects how many of these you can

368
00:19:21,350 --> 00:19:25,250
introduce in each of the slabs how many

369
00:19:23,240 --> 00:19:26,750
pages I start off with this lab but

370
00:19:25,250 --> 00:19:27,430
information which is not relevant to you

371
00:19:26,750 --> 00:19:29,590
right now

372
00:19:27,430 --> 00:19:31,660
and then there is another example here

373
00:19:29,590 --> 00:19:33,790
in the case of his love and as I said

374
00:19:31,660 --> 00:19:35,680
this is the one that we don't use as

375
00:19:33,790 --> 00:19:43,600
much because his love is used more than

376
00:19:35,680 --> 00:19:47,950
this one we have the objects this is a

377
00:19:43,600 --> 00:19:57,340
complete page and within it we have the

378
00:19:47,950 --> 00:20:08,410
objects and slab descriptors so here we

379
00:19:57,340 --> 00:20:13,260
have scripts in graphic mode objects one

380
00:20:08,410 --> 00:20:13,260
is location or is free and here we have

381
00:20:18,120 --> 00:20:25,600
so there's not a lot of time we could do

382
00:20:21,880 --> 00:20:34,000
a lot with this I'm not going to give

383
00:20:25,600 --> 00:20:37,750
the locator either but we came here to

384
00:20:34,000 --> 00:20:39,700
see a real exploitation example I don't

385
00:20:37,750 --> 00:20:44,620
if you follow Twitter you see Church

386
00:20:39,700 --> 00:20:49,920
like this one fluoroacetate does it

387
00:20:44,620 --> 00:20:52,510
again they used type confusion an edge

388
00:20:49,920 --> 00:20:54,670
rates condition in the kernel then how

389
00:20:52,510 --> 00:21:00,660
to bound right to am where to go from a

390
00:20:54,670 --> 00:21:05,760
browser so the host OS the u n-- 130 k +

391
00:21:00,660 --> 00:21:08,380
+13 master of pwm points these are the

392
00:21:05,760 --> 00:21:13,660
monsters and the radial had a field area

393
00:21:08,380 --> 00:21:15,790
so if ever you ask or wonder how this

394
00:21:13,660 --> 00:21:19,360
works we will try to explain it but this

395
00:21:15,790 --> 00:21:23,030
I don't have enough

396
00:21:19,360 --> 00:21:25,550
time for ya give it to me examples I

397
00:21:23,030 --> 00:21:30,940
will show you how a bug for obviously

398
00:21:25,550 --> 00:21:36,080
reasons this is based on a risk

399
00:21:30,940 --> 00:21:40,460
conditional code it's not a real bug but

400
00:21:36,080 --> 00:21:45,320
if you but it's also much useful as a

401
00:21:40,460 --> 00:21:52,550
framework our basic exploit use a race

402
00:21:45,320 --> 00:21:54,889
condition that causes a corruption with

403
00:21:52,550 --> 00:21:58,730
what you do is we get the race condition

404
00:21:54,890 --> 00:22:01,880
to corrupt online and add twice to say

405
00:21:58,730 --> 00:22:07,460
my turn then we release the item that

406
00:22:01,880 --> 00:22:10,880
needs an entry an object so it generates

407
00:22:07,460 --> 00:22:14,030
a race after three then repeat state

408
00:22:10,880 --> 00:22:24,140
steps one two for tonight can use after

409
00:22:14,030 --> 00:22:28,250
free so you get UAF so you do this with

410
00:22:24,140 --> 00:22:32,750
a race condition I couldn't think of

411
00:22:28,250 --> 00:22:34,640
another way to exploit it anyway so this

412
00:22:32,750 --> 00:22:40,400
is very basic and I'll spend some time

413
00:22:34,640 --> 00:22:45,260
on it so we can so we're all on the same

414
00:22:40,400 --> 00:22:47,240
page with this the macro will define

415
00:22:45,260 --> 00:22:51,140
this is the wonderful land of macros and

416
00:22:47,240 --> 00:22:57,620
kernels so then this one macro points to

417
00:22:51,140 --> 00:23:00,260
another so you may have a macro this one

418
00:22:57,620 --> 00:23:04,489
creates and unit up from the list and

419
00:23:00,260 --> 00:23:07,030
the macro whichever name creates a

420
00:23:04,490 --> 00:23:11,830
structure and it calls another macro

421
00:23:07,030 --> 00:23:14,090
with the same name this macro

422
00:23:11,830 --> 00:23:18,379
initializes the structure that is Terry

423
00:23:14,090 --> 00:23:23,240
with send the next and previous points

424
00:23:18,380 --> 00:23:25,840
to itself so it's assembly it's easier

425
00:23:23,240 --> 00:23:32,170
than the Cole

426
00:23:25,840 --> 00:23:40,520
we have the use of doubly linked lists

427
00:23:32,170 --> 00:23:44,120
the first structure I found use the

428
00:23:40,520 --> 00:23:47,660
backlight of lighting so it has several

429
00:23:44,120 --> 00:23:52,969
drivers internal generates and this with

430
00:23:47,660 --> 00:23:56,990
a structure which every driver links

431
00:23:52,970 --> 00:24:00,170
between them with entry so you link one

432
00:23:56,990 --> 00:24:02,180
to the next one here we can see it in

433
00:24:00,170 --> 00:24:05,840
graphic form okay we have done this head

434
00:24:02,180 --> 00:24:07,220
to start which is just a structure I

435
00:24:05,840 --> 00:24:10,220
showed you the beginning with an exome

436
00:24:07,220 --> 00:24:13,160
proof and then the objects that you are

437
00:24:10,220 --> 00:24:17,210
actually linking each one poster next

438
00:24:13,160 --> 00:24:19,910
one video previously so these next and

439
00:24:17,210 --> 00:24:22,340
previous never point to the initial part

440
00:24:19,910 --> 00:24:25,870
of a structure rather to the senator or

441
00:24:22,340 --> 00:24:29,620
wherever you have to find the list head

442
00:24:25,870 --> 00:24:32,840
it is in the first field of a structure

443
00:24:29,620 --> 00:24:41,979
it go there or in the middle to go there

444
00:24:32,840 --> 00:24:41,980
as well so whitelist points to itself

445
00:24:42,700 --> 00:24:47,260
here's a double list

446
00:24:47,470 --> 00:24:56,020
so if elements to a list of linkers we

447
00:24:53,330 --> 00:24:59,060
have the goal not a cold

448
00:24:56,020 --> 00:25:03,040
indicate the list head and the item you

449
00:24:59,060 --> 00:25:07,370
want to add so and it takes the header

450
00:25:03,040 --> 00:25:14,060
and the next puts the item right in the

451
00:25:07,370 --> 00:25:16,340
middle you put it in the center so with

452
00:25:14,060 --> 00:25:19,370
a previous example as a pointer to

453
00:25:16,340 --> 00:25:21,760
itself it just adds here at anything the

454
00:25:19,370 --> 00:25:21,760
item

455
00:25:23,240 --> 00:25:28,620
at least there's someone who's in his

456
00:25:26,700 --> 00:25:31,049
right mind here because I haven't

457
00:25:28,620 --> 00:25:34,260
realized that either and the next time

458
00:25:31,049 --> 00:25:39,720
we want a flat table okay I told you of

459
00:25:34,260 --> 00:25:46,169
them so we had the item a new object a

460
00:25:39,720 --> 00:25:48,299
nice truck we had a second item one ends

461
00:25:46,169 --> 00:25:50,429
up here and it adds a new one between

462
00:25:48,299 --> 00:25:56,700
the listener and the one that was there

463
00:25:50,429 --> 00:26:03,150
earlier and then it was next then to

464
00:25:56,700 --> 00:26:05,850
eliminate an item you indicate the item

465
00:26:03,150 --> 00:26:12,200
to eliminative joins them and the one of

466
00:26:05,850 --> 00:26:12,199
the middle it removes kids or to poison

467
00:26:13,520 --> 00:26:19,820
so in case if it is use the Kerner will

468
00:26:16,710 --> 00:26:19,820
reject him

469
00:26:24,000 --> 00:26:40,480
so you eliminate this bogus race

470
00:26:36,280 --> 00:26:57,399
condition we can add vulnerable

471
00:26:40,480 --> 00:27:00,760
subsystem it verifies from the adage is

472
00:26:57,400 --> 00:27:16,120
not false it's not zero then it sets it

473
00:27:00,760 --> 00:27:18,909
to one apparently properly so the two

474
00:27:16,120 --> 00:27:25,030
cause don't attempt to manage the same

475
00:27:18,909 --> 00:27:29,740
list at the same time so here if I run

476
00:27:25,030 --> 00:27:34,418
this code to process and two cores at

477
00:27:29,740 --> 00:27:37,809
the same time both will reach at the

478
00:27:34,419 --> 00:27:41,320
same time with the same entry so say hey

479
00:27:37,809 --> 00:27:44,230
I'm zero well I'm 0-2 so both will come

480
00:27:41,320 --> 00:27:45,970
in here so when they come in here they

481
00:27:44,230 --> 00:27:48,700
would set it to one and the same item

482
00:27:45,970 --> 00:28:06,100
will be added twice therefore that's a

483
00:27:48,700 --> 00:28:09,900
problem the next point in to ascertain

484
00:28:06,100 --> 00:28:12,520
the previz also to myself so this is

485
00:28:09,900 --> 00:28:14,530
these tests continue to your point the

486
00:28:12,520 --> 00:28:18,750
next and the other one still comes back

487
00:28:14,530 --> 00:28:18,750
but our item is pointed to ourselves

488
00:28:25,030 --> 00:28:31,899
we release because if we have the burn

489
00:28:28,150 --> 00:28:34,470
on the system here we also had a burn

490
00:28:31,900 --> 00:28:37,450
[Music]

491
00:28:34,470 --> 00:28:42,159
could enter twice you want to create a

492
00:28:37,450 --> 00:28:44,740
problem too so you added this yes then

493
00:28:42,159 --> 00:28:54,990
you removed from the lists and then

494
00:28:44,740 --> 00:28:54,990
release memory we removed from the list

495
00:28:57,299 --> 00:29:10,710
point to itself in a probe to notice the

496
00:29:07,690 --> 00:29:14,429
previous code you have not only I'm

497
00:29:10,710 --> 00:29:17,770
committed let's put your Java object so

498
00:29:14,429 --> 00:29:22,990
relax because we're not doing anything

499
00:29:17,770 --> 00:29:27,639
with this anyway this object here was

500
00:29:22,990 --> 00:29:37,750
ready so we have a list pointing to an

501
00:29:27,640 --> 00:29:52,090
object using the same locate on top of

502
00:29:37,750 --> 00:29:55,390
it someone goes through this list chunk

503
00:29:52,090 --> 00:30:06,309
that is free and enter data that we can

504
00:29:55,390 --> 00:30:17,350
control within the then you look for a

505
00:30:06,309 --> 00:30:20,049
cool can execute the code structure with

506
00:30:17,350 --> 00:30:22,059
pointers to functions so I tried to

507
00:30:20,049 --> 00:30:24,039
change the pointers and then find a call

508
00:30:22,059 --> 00:30:28,030
that uses a structure and you call the

509
00:30:24,039 --> 00:30:31,470
pointer in this case unfortunately there

510
00:30:28,030 --> 00:30:31,470
was nothing which were explored

511
00:30:32,260 --> 00:30:38,690
otherwise a bug would have been

512
00:30:34,340 --> 00:30:39,290
terminated but in this case we had was a

513
00:30:38,690 --> 00:30:42,890
bed

514
00:30:39,290 --> 00:30:46,220
well queue so you can explore the memory

515
00:30:42,890 --> 00:30:50,180
now and then run it will take the work

516
00:30:46,220 --> 00:30:54,560
queue executors of the new order but for

517
00:30:50,180 --> 00:31:00,320
this to be initiated you don't have to

518
00:30:54,560 --> 00:31:03,169
interact with them using the current so

519
00:31:00,320 --> 00:31:04,820
the kind of the user wants to do

520
00:31:03,170 --> 00:31:12,380
something that'll be worth nothing

521
00:31:04,820 --> 00:31:20,149
so not a poll or anything but I had to

522
00:31:12,380 --> 00:31:28,960
put it somewhere in a memory box you

523
00:31:20,150 --> 00:31:31,160
need to fulfill the following criteria

524
00:31:28,960 --> 00:31:35,390
to be able to allocate and deallocate

525
00:31:31,160 --> 00:31:41,260
memory at will in the kernel it's not

526
00:31:35,390 --> 00:31:43,430
enough to call a Cisco it has to be

527
00:31:41,260 --> 00:31:46,400
returned to you the space keep the

528
00:31:43,430 --> 00:31:52,340
memory there and under for reuse and

529
00:31:46,400 --> 00:31:54,770
release then I want to control the

530
00:31:52,340 --> 00:32:00,770
allocation size to be able to hit

531
00:31:54,770 --> 00:32:03,740
different caches so in this way I can

532
00:32:00,770 --> 00:32:06,170
control which calendar so I'm sure that

533
00:32:03,740 --> 00:32:10,610
the object to be rewritten is was in

534
00:32:06,170 --> 00:32:13,160
that same shape Oh cash you find that

535
00:32:10,610 --> 00:32:18,229
sprain is required so having high limits

536
00:32:13,160 --> 00:32:21,950
is desired for the Cisco if you don't

537
00:32:18,230 --> 00:32:25,760
add a bit at the end of the buffer I

538
00:32:21,950 --> 00:32:31,210
usually do this in two ways one is using

539
00:32:25,760 --> 00:32:35,930
message queues google has many tutorials

540
00:32:31,210 --> 00:32:37,760
you put messages send the cues in this

541
00:32:35,930 --> 00:32:39,740
way here is our memory depending the

542
00:32:37,760 --> 00:32:44,620
size of the message if you go to one

543
00:32:39,740 --> 00:32:44,620
cache or another so when you use the map

544
00:32:46,080 --> 00:32:54,449
when one consumes messages it your

545
00:32:49,570 --> 00:32:54,450
release memory in the control the size

546
00:32:54,510 --> 00:33:07,930
this is 48 bytes which is the normal

547
00:33:02,560 --> 00:33:11,350
amount of the architecture you only

548
00:33:07,930 --> 00:33:17,560
control 8 of those 48 and it allows you

549
00:33:11,350 --> 00:33:23,530
to add any type of data remember how

550
00:33:17,560 --> 00:33:30,840
many message queues but it's quite a

551
00:33:23,530 --> 00:33:35,950
high number never seen anyone nuisance

552
00:33:30,840 --> 00:33:37,929
to this on Twitter is my use but I've

553
00:33:35,950 --> 00:33:40,360
never seen anyone use it because this is

554
00:33:37,930 --> 00:33:43,530
one of the first sub systems where I

555
00:33:40,360 --> 00:33:47,820
started looking bugs and key management

556
00:33:43,530 --> 00:33:51,670
people who don't look at the kernel and

557
00:33:47,820 --> 00:33:58,629
we can introduce case and to leave them

558
00:33:51,670 --> 00:34:02,140
in the kernel so with this hello key of

559
00:33:58,630 --> 00:34:05,740
the data of the key I'd rather use the

560
00:34:02,140 --> 00:34:07,650
name instead of the number so by using

561
00:34:05,740 --> 00:34:12,219
the name you don't get any data

562
00:34:07,650 --> 00:34:20,320
initially in this way we control all

563
00:34:12,219 --> 00:34:21,339
bytes except the last one cannot be

564
00:34:20,320 --> 00:34:25,020
exactly the same

565
00:34:21,340 --> 00:34:25,020
it's very at least one byte

566
00:34:27,219 --> 00:34:32,889
this one is limiting emissions there's

567
00:34:30,400 --> 00:34:41,560
the key quota which is usually limited

568
00:34:32,889 --> 00:34:47,409
to 200 KS so things get a bit dodgy

569
00:34:41,560 --> 00:34:51,489
after this trust me I am science the dog

570
00:34:47,409 --> 00:34:52,969
says so let's try to abuse that you use

571
00:34:51,489 --> 00:34:55,189
after free

572
00:34:52,969 --> 00:34:58,640
move your money I will be Anitra there

573
00:34:55,190 --> 00:35:00,380
was no way to exploit it obviously so

574
00:34:58,640 --> 00:35:01,759
you're gonna have to believe me because

575
00:35:00,380 --> 00:35:04,039
I'm not gonna show the court or anything

576
00:35:01,760 --> 00:35:07,099
you will have to take my word for it you

577
00:35:04,039 --> 00:35:11,559
try let's see what we have if we either

578
00:35:07,099 --> 00:35:11,559
another entry and a doubly-linked list

579
00:35:13,900 --> 00:35:20,630
to the list when you put it in the nose

580
00:35:17,990 --> 00:35:26,689
on the girl but it gets the prayer to

581
00:35:20,630 --> 00:35:30,140
point to the previous so what we have

582
00:35:26,690 --> 00:35:32,990
here is an 8-byte are writing that upon

583
00:35:30,140 --> 00:35:36,609
to an address that we haven't got so

584
00:35:32,990 --> 00:35:36,609
this is getting worse and worse isn't it

585
00:35:41,619 --> 00:35:46,780
so there's a few things that you can

586
00:35:44,210 --> 00:35:53,180
control so if you take a look at this

587
00:35:46,780 --> 00:35:56,869
you override offset 176 the only thing

588
00:35:53,180 --> 00:36:07,819
we know pointer previous objects in the

589
00:35:56,869 --> 00:36:10,130
list to object 168 we know that I can

590
00:36:07,819 --> 00:36:14,750
overwrite a bytes of data that I've no

591
00:36:10,130 --> 00:36:17,059
control in the offset 176 object and I

592
00:36:14,750 --> 00:36:22,069
can allocate another system there we

593
00:36:17,059 --> 00:36:28,849
have to look for the following different

594
00:36:22,069 --> 00:36:30,549
y ways to try to exploit this we would

595
00:36:28,849 --> 00:36:34,490
have to look for the following a

596
00:36:30,549 --> 00:36:41,020
structure that fits and 119 byte cache

597
00:36:34,490 --> 00:36:56,209
it has a pointer to another structure

598
00:36:41,020 --> 00:36:58,710
106 required this is not an easy task

599
00:36:56,210 --> 00:37:05,700
because we can

600
00:36:58,710 --> 00:37:09,450
with between 128 292 bytes so this is a

601
00:37:05,700 --> 00:37:12,450
structure different ideas to exploit

602
00:37:09,450 --> 00:37:15,960
this one was obviously looking for

603
00:37:12,450 --> 00:37:31,799
structure between these two sizes 184 9

604
00:37:15,960 --> 00:37:38,369
2 in position 176 had a pointer which

605
00:37:31,800 --> 00:37:42,050
was uh nakida 6 bytes trail you can

606
00:37:38,369 --> 00:37:42,050
overwrite the non terminates without

607
00:37:52,070 --> 00:38:07,970
cash into obviously needed plenty more

608
00:38:00,589 --> 00:38:12,440
so so the first option here I loaded

609
00:38:07,970 --> 00:38:12,439
structures the scripts that can search

610
00:38:15,980 --> 00:38:26,520
with a pointer to function in bite 176

611
00:38:21,589 --> 00:38:30,180
structures so when you check them out to

612
00:38:26,520 --> 00:38:36,660
see that some of fire operations or

613
00:38:30,180 --> 00:38:41,640
series-parallel static lines that hello

614
00:38:36,660 --> 00:38:48,799
Kate and McGee locate I suppose you were

615
00:38:41,640 --> 00:38:48,799
fine even thousand

616
00:38:53,410 --> 00:39:05,410
a machine that uses this offset 176 here

617
00:39:00,140 --> 00:39:09,979
we do have a point to function but if I

618
00:39:05,410 --> 00:39:15,680
locate this empty space in the US after

619
00:39:09,979 --> 00:39:24,710
free so I don't have any control so I

620
00:39:15,680 --> 00:39:36,229
ended up the long way command as much as

621
00:39:24,710 --> 00:39:41,410
possible doesn't save who allocated

622
00:39:36,229 --> 00:39:41,410
walks so you can do it with a sanitizer

623
00:39:54,999 --> 00:40:06,348
repeated and you get a list this is the

624
00:39:58,609 --> 00:40:14,960
list I could fit into a screen maybe 400

625
00:40:06,349 --> 00:40:17,930
stacks of startups salmon you know cold

626
00:40:14,960 --> 00:40:23,089
and see like what did it an occasion if

627
00:40:17,930 --> 00:40:30,680
you could use that to exploit it so 30

628
00:40:23,089 --> 00:40:35,869
days later this is true lot of

629
00:40:30,680 --> 00:40:38,538
desperation I found that systems one

630
00:40:35,869 --> 00:40:42,289
shared memories second minute so it is

631
00:40:38,539 --> 00:40:44,719
fulfilled criteria within the hundred

632
00:40:42,289 --> 00:40:58,249
ninety-two podcast and it'll point to

633
00:40:44,719 --> 00:41:01,640
something offset 76 so this means that

634
00:40:58,249 --> 00:41:05,558
the structure can be located in hundreds

635
00:41:01,640 --> 00:41:10,089
of cash so if we look at the structure

636
00:41:05,559 --> 00:41:13,339
that is created here a shared memory

637
00:41:10,089 --> 00:41:26,269
there but if there's a hundred 20 bytes

638
00:41:13,339 --> 00:41:30,489
and we wanted to write as one creates

639
00:41:26,269 --> 00:41:30,488
the structure issue before the pointer

640
00:41:33,039 --> 00:41:38,799
the size of the structure which was 120

641
00:41:47,079 --> 00:42:03,229
structure plus the offset 76 which is

642
00:41:59,509 --> 00:42:05,809
what we want to overwrite and 112 is

643
00:42:03,229 --> 00:42:14,660
this one here this pointer that points

644
00:42:05,809 --> 00:42:17,599
to a user structure so the relationship

645
00:42:14,660 --> 00:42:20,509
between both structures is this the one

646
00:42:17,599 --> 00:42:24,469
we use for shared memory this is the one

647
00:42:20,509 --> 00:42:29,440
we will overwrite a pointer over right

648
00:42:24,469 --> 00:42:29,440
and this points to the structure that

649
00:42:34,900 --> 00:42:41,299
when you start looking for bugs you keep

650
00:42:39,049 --> 00:42:46,670
finding bugs in different places and

651
00:42:41,299 --> 00:42:49,690
with different functions for an entire

652
00:42:46,670 --> 00:42:49,690
file system

653
00:42:50,510 --> 00:43:06,060
this is a structure for using lock for

654
00:42:55,530 --> 00:43:13,830
locking in the memory to free we

655
00:43:06,060 --> 00:43:16,440
allocate here shared memory signals this

656
00:43:13,830 --> 00:43:21,240
was free and we had the list punch into

657
00:43:16,440 --> 00:43:27,300
the subject reserved a shared memory

658
00:43:21,240 --> 00:43:31,649
chunk and if we're lucky it'll fall

659
00:43:27,300 --> 00:43:35,810
right on top before is one rule

660
00:43:31,650 --> 00:43:35,810
subsystem now we have a structure

661
00:43:37,460 --> 00:43:42,930
initially there was 64 kilobytes of the

662
00:43:40,500 --> 00:43:48,480
structure then what we add into it which

663
00:43:42,930 --> 00:43:55,560
is a Hong Kong 20 which is here 176

664
00:43:48,480 --> 00:43:58,470
offset we have the so if we when we have

665
00:43:55,560 --> 00:44:01,590
exploited the first use after free and

666
00:43:58,470 --> 00:44:02,990
this list should not have a shared

667
00:44:01,590 --> 00:44:07,650
memory segment

668
00:44:02,990 --> 00:44:10,859
it will be a tight confusing so if we

669
00:44:07,650 --> 00:44:14,190
add a new item the vulnerable sister on

670
00:44:10,860 --> 00:44:17,430
to the list we added here and we

671
00:44:14,190 --> 00:44:24,120
overwrite this pointer so now what we

672
00:44:17,430 --> 00:44:28,830
have is a memory segment to the pointer

673
00:44:24,120 --> 00:44:38,250
that points here unless you what we can

674
00:44:28,830 --> 00:44:41,340
do with it abuse again with a race

675
00:44:38,250 --> 00:44:45,270
condition to add this item twice and so

676
00:44:41,340 --> 00:44:47,940
that we immediately in this and we'll

677
00:44:45,270 --> 00:44:50,759
have a free and now we can exploit a

678
00:44:47,940 --> 00:44:52,890
second tier after free and allocate for

679
00:44:50,760 --> 00:44:54,470
who please so we'll have the full

680
00:44:52,890 --> 00:44:57,200
control

681
00:44:54,470 --> 00:45:01,578
of the structure point in here here we

682
00:44:57,200 --> 00:45:07,669
can locate or allocate a structure what

683
00:45:01,579 --> 00:45:09,740
was its name you use a struct we would

684
00:45:07,670 --> 00:45:18,400
put it here and have total control over

685
00:45:09,740 --> 00:45:21,109
this now we use a technique between

686
00:45:18,400 --> 00:45:25,010
using them the message queues or any

687
00:45:21,109 --> 00:45:29,509
page in case we use the message put a

688
00:45:25,010 --> 00:45:34,640
message in queue and look you know to

689
00:45:29,510 --> 00:45:36,470
allocate right above the so in the past

690
00:45:34,640 --> 00:45:38,720
we should have two structures of a

691
00:45:36,470 --> 00:45:41,618
vulnerable subsystem that were exploited

692
00:45:38,720 --> 00:45:48,740
we have a structure in shared memory

693
00:45:41,619 --> 00:45:53,030
that points the previous objects so then

694
00:45:48,740 --> 00:45:58,609
leads to a new user to free structure

695
00:45:53,030 --> 00:46:02,599
that we control entirely because we're

696
00:45:58,609 --> 00:46:04,160
in a message queue and all of data but

697
00:46:02,599 --> 00:46:07,010
now in C this is not the end of the

698
00:46:04,160 --> 00:46:13,910
problems one of them is that when we

699
00:46:07,010 --> 00:46:17,390
take a look at it turns out what they're

700
00:46:13,910 --> 00:46:21,410
pointing to log said one six eight and

701
00:46:17,390 --> 00:46:28,460
the user struct occupies a hundred by a

702
00:46:21,410 --> 00:46:31,098
hundred four hundred sixty is to 72 cat

703
00:46:28,460 --> 00:46:34,369
is a hundred just 92 so then we're

704
00:46:31,099 --> 00:46:36,740
exceeding the amount of bytes so we are

705
00:46:34,369 --> 00:46:39,530
writing maybe this part of the structure

706
00:46:36,740 --> 00:46:42,500
and we'll go to the to read the rest and

707
00:46:39,530 --> 00:46:45,680
reading beyond that other than to buy

708
00:46:42,500 --> 00:46:49,490
junk so I have a small problem here I

709
00:46:45,680 --> 00:46:54,379
see it graphically the pointer pointing

710
00:46:49,490 --> 00:47:00,319
the 168 basically

711
00:46:54,380 --> 00:47:02,810
same structure 24.3 from here we're

712
00:47:00,320 --> 00:47:07,970
reading outside to towards the next

713
00:47:02,810 --> 00:47:12,080
object looks we're going back for this

714
00:47:07,970 --> 00:47:15,439
little forward so don't worry the more

715
00:47:12,080 --> 00:47:18,980
prominent it could be could seem simple

716
00:47:15,440 --> 00:47:21,020
to reserve on memory chunks that have

717
00:47:18,980 --> 00:47:23,870
just been released but it's not the

718
00:47:21,020 --> 00:47:25,940
coats the cases that's not deterministic

719
00:47:23,870 --> 00:47:40,339
deterministic have a kernel with many

720
00:47:25,940 --> 00:47:42,920
CPU so the browser each one is doing

721
00:47:40,340 --> 00:47:44,330
their own thing and you compete in where

722
00:47:42,920 --> 00:47:47,930
there are people who are just adding

723
00:47:44,330 --> 00:47:49,610
know someone make him appear reserve

724
00:47:47,930 --> 00:47:52,629
this a hundred to switch off and

725
00:47:49,610 --> 00:47:59,810
everything will let their poor little

726
00:47:52,630 --> 00:48:04,640
complex things like religion and rock in

727
00:47:59,810 --> 00:48:07,160
memory castle through CPU is used so

728
00:48:04,640 --> 00:48:11,620
that each CPU can allocate memory

729
00:48:07,160 --> 00:48:15,490
quickly without using spell notes etc

730
00:48:11,620 --> 00:48:25,850
therefore it is necessary to try to gain

731
00:48:15,490 --> 00:48:29,359
some space so this dependence system

732
00:48:25,850 --> 00:48:36,500
memory the pressure it has what's the

733
00:48:29,360 --> 00:48:39,950
burden to transform something that is

734
00:48:36,500 --> 00:48:45,610
non-deterministic and unstable by nature

735
00:48:39,950 --> 00:48:45,609
into something that is relatively stable

736
00:48:48,510 --> 00:48:53,850
so we'll continue with what we were

737
00:48:50,490 --> 00:48:58,259
doing earlier we said 24 bytes left

738
00:48:53,850 --> 00:48:59,819
because of the chunk following when we

739
00:48:58,260 --> 00:49:02,970
try to read here we are reading from

740
00:48:59,820 --> 00:49:12,020
another memory charge so we would have

741
00:49:02,970 --> 00:49:30,080
an overflow here we have the original

742
00:49:12,020 --> 00:49:34,530
with the first turn the structure round

743
00:49:30,080 --> 00:49:46,859
this is the beginning at the end this

744
00:49:34,530 --> 00:50:02,460
was at the structure about 120 we

745
00:49:46,859 --> 00:50:06,060
introduce a change structure using slabs

746
00:50:02,460 --> 00:50:12,960
instead of flux so use chunks one chunk

747
00:50:06,060 --> 00:50:21,960
is 100 rounds into bytes we want to do

748
00:50:12,960 --> 00:50:24,960
here is that the next chunk of data when

749
00:50:21,960 --> 00:50:27,750
you read household you just want to

750
00:50:24,960 --> 00:50:32,130
control the next chunk of data as well

751
00:50:27,750 --> 00:50:37,080
so the first thing that we do to get

752
00:50:32,130 --> 00:50:40,170
these labs from 192 Kashi and then you

753
00:50:37,080 --> 00:50:43,279
see let us see what slaps are doing and

754
00:50:40,170 --> 00:50:47,550
then those that are helpful we fill them

755
00:50:43,280 --> 00:50:50,700
so depending on the kernel is love you

756
00:50:47,550 --> 00:50:53,880
go to proc slap in for to see how many

757
00:50:50,700 --> 00:50:57,569
crashes have been located and then you

758
00:50:53,880 --> 00:51:00,360
read we read that file we fill in those

759
00:50:57,570 --> 00:51:05,670
spaces to do that we may use the

760
00:51:00,360 --> 00:51:11,190
messenger the queues of the messages so

761
00:51:05,670 --> 00:51:13,200
we scan any random data of a specific

762
00:51:11,190 --> 00:51:16,350
size so that it fits in within Takashi

763
00:51:13,200 --> 00:51:18,870
and then we feel all the free spaces and

764
00:51:16,350 --> 00:51:20,850
the next thing that we want to do is to

765
00:51:18,870 --> 00:51:25,380
create two new slabs

766
00:51:20,850 --> 00:51:29,130
so that we control those two new slabs

767
00:51:25,380 --> 00:51:33,240
with our data and then in those data we

768
00:51:29,130 --> 00:51:38,780
will be entering these structure so

769
00:51:33,240 --> 00:51:42,689
after filling them well in this case we

770
00:51:38,780 --> 00:51:47,640
okay Malik because we want to create the

771
00:51:42,690 --> 00:51:49,770
to control the start of the object so

772
00:51:47,640 --> 00:51:52,140
here the center says structure from the

773
00:51:49,770 --> 00:51:54,500
start and then we control cs50 the

774
00:51:52,140 --> 00:51:58,650
action structure and we create 40 keys

775
00:51:54,500 --> 00:52:01,860
and then we enter in the name the data

776
00:51:58,650 --> 00:52:04,920
of this structure so it's thunder and

777
00:52:01,860 --> 00:52:07,380
then we have created two new slabs that

778
00:52:04,920 --> 00:52:11,070
we fully control of ourselves then we

779
00:52:07,380 --> 00:52:14,760
create three case not random by three

780
00:52:11,070 --> 00:52:22,760
sequential keys so that we create three

781
00:52:14,760 --> 00:52:25,920
holes so if we are lucky and someone use

782
00:52:22,760 --> 00:52:29,070
free space we can allocate ourselves in

783
00:52:25,920 --> 00:52:33,780
these holes that we have provided so we

784
00:52:29,070 --> 00:52:36,330
trigger there is condition again then we

785
00:52:33,780 --> 00:52:38,190
enter the system of the vulnerables the

786
00:52:36,330 --> 00:52:41,220
structure of the venerable system and

787
00:52:38,190 --> 00:52:45,720
then after producing the juice after

788
00:52:41,220 --> 00:52:49,680
free by using MC ten we point the

789
00:52:45,720 --> 00:52:51,509
counter to our structure so we cannot

790
00:52:49,680 --> 00:52:54,450
really explain it that well but that's

791
00:52:51,510 --> 00:52:58,920
the reason why these light cells have so

792
00:52:54,450 --> 00:53:02,160
much porosity in them so as long as you

793
00:52:58,920 --> 00:53:04,080
are clear about this craziness a bit

794
00:53:02,160 --> 00:53:06,540
clear about this crazy me I will be

795
00:53:04,080 --> 00:53:11,650
happy so what will be the

796
00:53:06,540 --> 00:53:16,000
final aspect of this memory so we have

797
00:53:11,650 --> 00:53:18,130
the mac-10 and then the next one here we

798
00:53:16,000 --> 00:53:21,970
will also have all the data control by

799
00:53:18,130 --> 00:53:26,830
ourselves after reading it he will move

800
00:53:21,970 --> 00:53:29,500
on to read this other chunk so if you

801
00:53:26,830 --> 00:53:34,920
get them both and you move them the

802
00:53:29,500 --> 00:53:38,080
structure is placed in D appropriate

803
00:53:34,920 --> 00:53:39,640
position so we have a segment resistant

804
00:53:38,080 --> 00:53:45,279
list that shouldn't be there

805
00:53:39,640 --> 00:53:46,960
we have a pointer a data structure and

806
00:53:45,280 --> 00:53:48,760
you fully control it how did you explode

807
00:53:46,960 --> 00:53:52,470
it this is the structure where we have

808
00:53:48,760 --> 00:53:56,050
full control if you take a look at it

809
00:53:52,470 --> 00:53:57,609
well sadly you may find something that

810
00:53:56,050 --> 00:54:01,450
we've been discussing this afternoon

811
00:53:57,610 --> 00:54:07,870
again we have another double linked list

812
00:54:01,450 --> 00:54:10,120
that is useful hash tables when you it

813
00:54:07,870 --> 00:54:13,390
is about to be delicious

814
00:54:10,120 --> 00:54:17,200
it says people if in my fake structure

815
00:54:13,390 --> 00:54:20,049
in the paper I put one it says next and

816
00:54:17,200 --> 00:54:22,149
here I put the memory address that one

817
00:54:20,050 --> 00:54:25,870
to overwrite and then in the next the

818
00:54:22,150 --> 00:54:27,850
data that I want to trigger that piece

819
00:54:25,870 --> 00:54:33,279
of code and number of conditions are to

820
00:54:27,850 --> 00:54:37,839
be met so you need to lock the shared

821
00:54:33,280 --> 00:54:40,900
memory segments once you lock it when

822
00:54:37,840 --> 00:54:45,660
you release the share segment the

823
00:54:40,900 --> 00:54:45,660
counter field should be set to one

824
00:54:49,030 --> 00:54:56,570
so for reference countersued fields must

825
00:54:53,360 --> 00:54:58,550
be set to one so that when it is set to

826
00:54:56,570 --> 00:55:00,800
zero says when the one is using the

827
00:54:58,550 --> 00:55:03,470
subject in the memory therefore I will

828
00:55:00,800 --> 00:55:08,510
free it when you free it this code is

829
00:55:03,470 --> 00:55:12,589
executed and then we achieve it so after

830
00:55:08,510 --> 00:55:15,260
all these we have all these and then we

831
00:55:12,590 --> 00:55:17,660
may write eight bytes of data anywhere

832
00:55:15,260 --> 00:55:20,690
in the memory so what is the most common

833
00:55:17,660 --> 00:55:25,069
thing to do often people describe a file

834
00:55:20,690 --> 00:55:27,580
operational structure for for my

835
00:55:25,070 --> 00:55:30,920
separation to create a mix device who

836
00:55:27,580 --> 00:55:33,319
anything which is this is the most basic

837
00:55:30,920 --> 00:55:36,020
instruction of unit why do you have a

838
00:55:33,320 --> 00:55:39,830
list of pointers what you do is see the

839
00:55:36,020 --> 00:55:42,170
very grade when you open a port serial

840
00:55:39,830 --> 00:55:45,440
as civil port is not the same as opening

841
00:55:42,170 --> 00:55:47,390
the file with your passwords so when you

842
00:55:45,440 --> 00:55:49,970
call sick you are calling different

843
00:55:47,390 --> 00:55:51,799
functions in the kernel often these are

844
00:55:49,970 --> 00:55:53,589
global they have been defined in the

845
00:55:51,800 --> 00:55:56,240
kernel and they are quite easy to find

846
00:55:53,590 --> 00:55:59,690
so therefore they are widely used in

847
00:55:56,240 --> 00:56:02,540
this case we will be using the depth PTM

848
00:55:59,690 --> 00:56:06,740
x and we will be overriding in the

849
00:56:02,540 --> 00:56:10,970
pointer l seek the pointer that sequence

850
00:56:06,740 --> 00:56:13,250
are a dummy implementation doesn't know

851
00:56:10,970 --> 00:56:15,680
what it doesn't let the know probably

852
00:56:13,250 --> 00:56:18,290
because it doesn't do the check before

853
00:56:15,680 --> 00:56:21,169
so this permutation no one uses it we

854
00:56:18,290 --> 00:56:26,060
overwrite it and then I tell you more

855
00:56:21,170 --> 00:56:29,530
about it if we take a look at the

856
00:56:26,060 --> 00:56:32,930
prototype of this function no ll seek

857
00:56:29,530 --> 00:56:34,820
the file descriptor will be the first

858
00:56:32,930 --> 00:56:39,160
argument the second argument of certain

859
00:56:34,820 --> 00:56:41,720
the third argument origin of the offset

860
00:56:39,160 --> 00:56:44,060
if you know the calling convention which

861
00:56:41,720 --> 00:56:47,359
is often used in himself this will come

862
00:56:44,060 --> 00:56:51,290
in this CP you are register and this

863
00:56:47,360 --> 00:56:55,390
will coming RTX so when you will call ll

864
00:56:51,290 --> 00:57:04,450
seek from user space we can control

865
00:56:55,390 --> 00:57:04,450
we registers the era's RSI and our asset

866
00:57:05,349 --> 00:57:10,309
so because we can control these two well

867
00:57:08,450 --> 00:57:13,009
the last one will not be good because it

868
00:57:10,309 --> 00:57:16,450
is an Intel 32-byte the offset is good

869
00:57:13,010 --> 00:57:20,150
for us because it's 64 so we move our

870
00:57:16,450 --> 00:57:22,700
aside from our SP or exchange that would

871
00:57:20,150 --> 00:57:26,079
be enough and doing a stock pivot is

872
00:57:22,700 --> 00:57:29,000
very simple very easy thing to do I'm

873
00:57:26,079 --> 00:57:30,829
not I'm not going to explain you this

874
00:57:29,000 --> 00:57:31,339
but basically there are thousands of

875
00:57:30,829 --> 00:57:34,190
ways

876
00:57:31,339 --> 00:57:37,759
so do disable this map on this map to

877
00:57:34,190 --> 00:57:41,510
bypass it or try to find your user base

878
00:57:37,760 --> 00:57:43,790
page in the common memory and to mark it

879
00:57:41,510 --> 00:57:46,730
as executable this is what I will be

880
00:57:43,790 --> 00:57:49,700
doing here so we assume that we have

881
00:57:46,730 --> 00:57:53,329
overridden the pointer of an L SiC

882
00:57:49,700 --> 00:57:57,020
function when you open DP TM x then you

883
00:57:53,329 --> 00:57:59,720
called sick and then the argument you

884
00:57:57,020 --> 00:58:05,359
and the address but we have our fake

885
00:57:59,720 --> 00:58:09,740
stuck then the fakest act will chain and

886
00:58:05,359 --> 00:58:13,160
then the rope chain will be changed the

887
00:58:09,740 --> 00:58:16,819
site will mark it as executable and then

888
00:58:13,160 --> 00:58:19,940
we our code will be trigger this is a

889
00:58:16,819 --> 00:58:21,740
direct mapping well that depends on the

890
00:58:19,940 --> 00:58:24,079
different versions of the kernel

891
00:58:21,740 --> 00:58:25,879
sometimes you can struck the address

892
00:58:24,079 --> 00:58:28,190
from here sometimes you kind of do it

893
00:58:25,880 --> 00:58:31,490
and mark it as executable so they

894
00:58:28,190 --> 00:58:33,140
exploit if we forget about everything

895
00:58:31,490 --> 00:58:36,129
that we have done or a meet everything

896
00:58:33,140 --> 00:58:40,220
that we have done in the file operations

897
00:58:36,130 --> 00:58:42,230
pointer we open the DB TM x you call the

898
00:58:40,220 --> 00:58:44,598
seek function for we have written the

899
00:58:42,230 --> 00:58:46,609
pointer in kernel and when you get to

900
00:58:44,599 --> 00:58:48,650
the sick function we will do a stock

901
00:58:46,609 --> 00:58:51,049
pivot to this memory address which is a

902
00:58:48,650 --> 00:58:53,089
non canonical address to give it a valid

903
00:58:51,049 --> 00:58:55,400
address and then they will do is stack

904
00:58:53,089 --> 00:58:59,029
pivots then we will have a drop chain

905
00:58:55,400 --> 00:59:01,790
and then the our page will be marked as

906
00:58:59,030 --> 00:59:03,680
executable then they will be this

907
00:59:01,790 --> 00:59:04,250
function you will look for it in the

908
00:59:03,680 --> 00:59:06,859
kernel

909
00:59:04,250 --> 00:59:08,330
even mark it as executable and then we

910
00:59:06,859 --> 00:59:12,020
will be

911
00:59:08,330 --> 00:59:14,870
executing Beavis of whistle last we will

912
00:59:12,020 --> 00:59:17,300
have to do a bit of a cleanup because

913
00:59:14,870 --> 00:59:20,210
after all this mess the kernel is not

914
00:59:17,300 --> 00:59:23,150
very stable then you will have to clean

915
00:59:20,210 --> 00:59:26,740
the common caches that you may have

916
00:59:23,150 --> 00:59:29,480
corrupted any pointers as you may have

917
00:59:26,740 --> 00:59:32,029
overridden like the file operations that

918
00:59:29,480 --> 00:59:36,410
we brought in the end then they stuck to

919
00:59:32,030 --> 00:59:41,570
live it as cities do before you can you

920
00:59:36,410 --> 00:59:44,060
make clean the stock to go back rightly

921
00:59:41,570 --> 00:59:46,100
or in good condition to the user space

922
00:59:44,060 --> 00:59:49,520
so to fix to clean up everything that

923
00:59:46,100 --> 00:59:53,470
you have broken I have a demo here and I

924
00:59:49,520 --> 00:59:57,310
hope that it is not as confusing as the

925
00:59:53,470 --> 00:59:57,310
the words of this lady

926
01:00:04,829 --> 01:00:21,160
this is a virtual machine okay we load

927
01:00:10,509 --> 01:00:23,230
the image I have to exploit so this is

928
01:00:21,160 --> 01:00:25,029
not the most stable one but if this is

929
01:00:23,230 --> 01:00:27,849
not a stable it is not good at all

930
01:00:25,029 --> 01:00:29,710
but sometimes ideas to the park on

931
01:00:27,849 --> 01:00:32,799
deliveries and I say that or complicate

932
01:00:29,710 --> 01:00:35,999
my life but these must be stable for it

933
01:00:32,799 --> 01:00:35,999
to be useful of course

934
01:00:43,510 --> 01:00:56,830
Oh has worked okay we can read file and

935
01:00:52,900 --> 01:00:59,080
this kind of thing so this is crap I

936
01:00:56,830 --> 01:01:00,850
don't often get four sensations about

937
01:00:59,080 --> 01:01:04,090
this because I said well this must be

938
01:01:00,850 --> 01:01:07,240
really boring May told you you might

939
01:01:04,090 --> 01:01:10,390
fall asleep if I sit down to this sample

940
01:01:07,240 --> 01:01:13,419
presentation say look I'm not interested

941
01:01:10,390 --> 01:01:15,670
in these well but anyway this year I

942
01:01:13,420 --> 01:01:18,040
decided to share that with you and now

943
01:01:15,670 --> 01:01:20,260
you can criticize me as much as you'd

944
01:01:18,040 --> 01:01:22,270
like to and this is for me sometimes I

945
01:01:20,260 --> 01:01:24,730
see this crap of craps undersell well

946
01:01:22,270 --> 01:01:38,080
this is like a what a wanker has written

947
01:01:24,730 --> 01:01:41,530
this is being a pleasure to be here in

948
01:01:38,080 --> 01:01:44,200
this 10th edition of the rigid condo so

949
01:01:41,530 --> 01:01:46,960
we are that old now

950
01:01:44,200 --> 01:01:47,859
well I still keep my hair all right

951
01:01:46,960 --> 01:01:51,340
other questions

952
01:01:47,859 --> 01:01:54,660
who dares who dares who is brave enough

953
01:01:51,340 --> 01:01:57,310
to ask questions I'm very daring myself

954
01:01:54,660 --> 01:01:59,290
well many have survived through this

955
01:01:57,310 --> 01:02:01,570
presentation they may not have any

956
01:01:59,290 --> 01:02:03,970
questions so remember to use a mic for

957
01:02:01,570 --> 01:02:05,740
the presentation there are seven or

958
01:02:03,970 --> 01:02:09,689
eight or nine people queuing to ask you

959
01:02:05,740 --> 01:02:12,669
the question now I might have a question

960
01:02:09,690 --> 01:02:15,670
let's see how can i structure the

961
01:02:12,670 --> 01:02:18,600
question I still didn't get the zero

962
01:02:15,670 --> 01:02:21,460
percent yes it is so it's just

963
01:02:18,600 --> 01:02:23,790
impossible to follow this is a

964
01:02:21,460 --> 01:02:26,560
presentation to republish in a blog post

965
01:02:23,790 --> 01:02:29,230
but if people are clear and now as to

966
01:02:26,560 --> 01:02:32,049
how to exploit the real back well I

967
01:02:29,230 --> 01:02:34,980
would be happy even if you create a

968
01:02:32,050 --> 01:02:41,470
faster to find a point to introduce a

969
01:02:34,980 --> 01:02:45,040
bug can you automate it can somehow no I

970
01:02:41,470 --> 01:02:48,310
don't know what part you can automate

971
01:02:45,040 --> 01:02:51,840
you may automate the faster of course I

972
01:02:48,310 --> 01:02:54,730
don't do all that by hand manually I

973
01:02:51,840 --> 01:02:55,310
need to find the structures of half the

974
01:02:54,730 --> 01:02:58,310
size

975
01:02:55,310 --> 01:03:01,310
then I apply it I will say who have

976
01:02:58,310 --> 01:03:04,070
Filton objects okay let us do sanitizer

977
01:03:01,310 --> 01:03:06,440
with tracer in the kernel this is as

978
01:03:04,070 --> 01:03:08,210
much as you can automate as I've seen

979
01:03:06,440 --> 01:03:10,490
you kind of doing this kind of here if

980
01:03:08,210 --> 01:03:13,940
that will be it I would lose my job well

981
01:03:10,490 --> 01:03:17,870
and what about machine learning well I

982
01:03:13,940 --> 01:03:25,010
leave that up to PhD people I'm a

983
01:03:17,870 --> 01:03:27,319
plumber okay I'm not an academic would

984
01:03:25,010 --> 01:03:29,510
you do something to try and find the

985
01:03:27,320 --> 01:03:32,750
structures that would fit as quietly or

986
01:03:29,510 --> 01:03:35,600
perhaps looking them in the kernel from

987
01:03:32,750 --> 01:03:38,510
distance Oh world yes I have subscribers

988
01:03:35,600 --> 01:03:40,400
that I go and tell them tell me all the

989
01:03:38,510 --> 01:03:42,590
structures of these sides are not only

990
01:03:40,400 --> 01:03:44,600
bad and in this sunset point to this

991
01:03:42,590 --> 01:03:48,290
functional point of this structure it is

992
01:03:44,600 --> 01:03:50,180
a billion at the end of the day it is

993
01:03:48,290 --> 01:03:52,850
the person that needs a different

994
01:03:50,180 --> 01:03:54,710
objects each time when you explode in

995
01:03:52,850 --> 01:03:56,810
all the trainers I say look this is the

996
01:03:54,710 --> 01:03:59,930
start cover flow overwrite the network

997
01:03:56,810 --> 01:04:02,630
and then haha so good fun if it is not

998
01:03:59,930 --> 01:04:05,060
real doesn't work so people have the

999
01:04:02,630 --> 01:04:07,040
tips oh I read the my ok room and this

1000
01:04:05,060 --> 01:04:10,130
is the tip and I said look I don't care

1001
01:04:07,040 --> 01:04:12,470
the allocator that is being used so the

1002
01:04:10,130 --> 01:04:14,870
book will go to different place every

1003
01:04:12,470 --> 01:04:17,209
time so what you have to do is to reduce

1004
01:04:14,870 --> 01:04:22,819
your brains and something that cannot be

1005
01:04:17,210 --> 01:04:25,910
exploited actually this bug was taken

1006
01:04:22,820 --> 01:04:28,850
over by those of Google they said a low

1007
01:04:25,910 --> 01:04:31,819
level of risk could be but it continues

1008
01:04:28,850 --> 01:04:33,980
to be there so they thought that it was

1009
01:04:31,820 --> 01:04:36,380
low risk because it could not be

1010
01:04:33,980 --> 01:04:39,470
exploited but I kind of think about

1011
01:04:36,380 --> 01:04:42,860
anything that you can automate because

1012
01:04:39,470 --> 01:04:45,379
all cases we are different from each

1013
01:04:42,860 --> 01:04:48,410
other then from books you learn three

1014
01:04:45,380 --> 01:04:51,770
techniques but then in real life you can

1015
01:04:48,410 --> 01:04:53,480
only well you either don't apply any of

1016
01:04:51,770 --> 01:04:58,080
those techniques or they applied the

1017
01:04:53,480 --> 01:05:01,170
three of them simultaneously all right

1018
01:04:58,080 --> 01:05:04,440
turn out a lot Daleks Percy didn't okay

1019
01:05:01,170 --> 01:05:08,460
so I haven't finished okay be back on

1020
01:05:04,440 --> 01:05:10,320
time I would like my friend Wendy Jack

1021
01:05:08,460 --> 01:05:16,850
to have as much time as needed for

1022
01:05:10,320 --> 01:05:16,850
representation very thank you very much

