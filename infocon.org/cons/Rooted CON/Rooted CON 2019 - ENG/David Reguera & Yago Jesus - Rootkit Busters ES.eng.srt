1
00:00:02,179 --> 00:00:11,550
first of all thanks so much for coming

2
00:00:05,450 --> 00:00:15,088
so we're very excited to be here in

3
00:00:11,550 --> 00:00:16,350
rooted X when we saw these eggs we

4
00:00:15,089 --> 00:00:18,869
thought that perhaps not to read out

5
00:00:16,350 --> 00:00:21,600
what's got me into to give a talk but

6
00:00:18,869 --> 00:00:24,180
anyway it turns out they don't seem to

7
00:00:21,600 --> 00:00:27,570
have come so we're going to talk about

8
00:00:24,180 --> 00:00:33,090
rootkit Busters which is basically about

9
00:00:27,570 --> 00:00:42,000
chasing were kids in names and UNIX

10
00:00:33,090 --> 00:00:43,800
environments so the block security by

11
00:00:42,000 --> 00:00:46,920
their fault I don't know if you know it

12
00:00:43,800 --> 00:00:48,419
or if you follow it oh boy I haven't

13
00:00:46,920 --> 00:00:50,850
been updating it for the last two or

14
00:00:48,420 --> 00:00:53,610
three years I've developed a tool such

15
00:00:50,850 --> 00:00:59,270
as unhide anti ransom radiography and

16
00:00:53,610 --> 00:01:04,500
you can follow me in Twitter in why

17
00:00:59,270 --> 00:01:12,930
Jesus right now I work with we work on

18
00:01:04,500 --> 00:01:16,049
digital certification of content I've

19
00:01:12,930 --> 00:01:19,110
been for over 10 years working in this

20
00:01:16,049 --> 00:01:22,880
sector but as a hobby

21
00:01:19,110 --> 00:01:22,880
perhaps family-owned since I was a kid

22
00:01:27,680 --> 00:01:33,950
from when not many people were

23
00:01:30,390 --> 00:01:37,890
interested by it particularly things to

24
00:01:33,950 --> 00:01:41,159
connect it with caramel is one of my

25
00:01:37,890 --> 00:01:47,040
passions and I've programmed a few

26
00:01:41,159 --> 00:01:50,490
things in this area X 64 did you be okay

27
00:01:47,040 --> 00:01:52,750
DB child and this is my future in case

28
00:01:50,490 --> 00:01:56,380
you want to follow me

29
00:01:52,750 --> 00:01:58,530
and whoever is writing to my mom please

30
00:01:56,380 --> 00:01:58,530
stop

31
00:01:58,740 --> 00:02:04,720
it's about Seoul let's move on to the

32
00:02:01,600 --> 00:02:11,019
presentation a rootkit will have to say

33
00:02:04,720 --> 00:02:13,120
is not exactly the end when usually when

34
00:02:11,020 --> 00:02:15,220
you use it it is not that's not and I'm

35
00:02:13,120 --> 00:02:18,370
in and of itself is just a tool a

36
00:02:15,220 --> 00:02:22,240
service tool something that provides

37
00:02:18,370 --> 00:02:27,459
service to an attacker to hide things we

38
00:02:22,240 --> 00:02:32,740
all know that my Trillian tools have

39
00:02:27,459 --> 00:02:34,840
become very trendy and to make harder

40
00:02:32,740 --> 00:02:38,290
the detection to forensics and

41
00:02:34,840 --> 00:02:42,010
understand to an antivirus process or

42
00:02:38,290 --> 00:02:46,329
whatever people use a rootkit root kits

43
00:02:42,010 --> 00:02:48,880
allow you to hide from a file connection

44
00:02:46,330 --> 00:02:51,520
to process many things these are tools

45
00:02:48,880 --> 00:02:54,130
that are constantly evolving the ones

46
00:02:51,520 --> 00:02:55,930
that used to be huge 10 years ago are

47
00:02:54,130 --> 00:02:59,640
not the same at the ones that are being

48
00:02:55,930 --> 00:03:04,480
used now and it's the the mumps and in

49
00:02:59,640 --> 00:03:06,040
game you I new techniques and they have

50
00:03:04,480 --> 00:03:09,880
new techniques for the new techniques

51
00:03:06,040 --> 00:03:11,859
and we we move forward that way most

52
00:03:09,880 --> 00:03:16,170
important things have a rootkit is that

53
00:03:11,860 --> 00:03:20,739
it is necessary to preserve the

54
00:03:16,170 --> 00:03:24,429
privileges we're going to see it forget

55
00:03:20,739 --> 00:03:26,140
demo for those who've never seen one and

56
00:03:24,430 --> 00:03:27,670
they are generally familiar with a

57
00:03:26,140 --> 00:03:30,488
concept so they're called

58
00:03:27,670 --> 00:03:32,470
make this demo is to see how an attacker

59
00:03:30,489 --> 00:03:35,760
would see it and what would happen in

60
00:03:32,470 --> 00:03:35,760
the victim machine

61
00:03:38,950 --> 00:03:42,130
[Music]

62
00:03:49,820 --> 00:03:55,230
aqui Arriba

63
00:03:52,170 --> 00:03:57,390
alive giveaway upon it lab here to the

64
00:03:55,230 --> 00:04:03,780
left I'm going to show the victim

65
00:03:57,390 --> 00:04:06,950
machine now we're going to set up the

66
00:04:03,780 --> 00:04:06,950
attacker machine

67
00:04:14,440 --> 00:04:18,060
you should have had that in place

68
00:04:33,860 --> 00:04:42,590
so you till they're right can you read

69
00:04:38,780 --> 00:04:49,179
it or should I expand it a bit bigger a

70
00:04:42,590 --> 00:04:49,179
bigger double vote of us ever know I see

71
00:04:50,320 --> 00:04:56,450
bueno pues aquí la máquina attic auntie

72
00:04:53,230 --> 00:05:00,740
in the attackers machine we can directly

73
00:04:56,450 --> 00:05:08,150
connect with the machine which has a

74
00:05:00,740 --> 00:05:21,470
back door when the attacker collected a

75
00:05:08,150 --> 00:05:26,870
particular attack and here and this is

76
00:05:21,470 --> 00:05:29,650
the connection this is the terminology

77
00:05:26,870 --> 00:05:29,650
in here

78
00:05:31,070 --> 00:05:35,540
stolen rotor is in red and everything's

79
00:05:33,680 --> 00:05:37,310
hidden so all processes that are

80
00:05:35,540 --> 00:05:39,830
launched from this time you know files

81
00:05:37,310 --> 00:05:43,880
created connections all of that done

82
00:05:39,830 --> 00:05:46,370
from here there are children of a

83
00:05:43,880 --> 00:05:49,700
machine cannot detect it all that take

84
00:05:46,370 --> 00:05:53,120
all of these rootkit so we're gonna do a

85
00:05:49,700 --> 00:05:57,979
test we're going to leave here running

86
00:05:53,120 --> 00:06:00,320
at top process and this is the route

87
00:05:57,980 --> 00:06:03,140
from the machine and I think in the

88
00:06:00,320 --> 00:06:07,880
machine is taking longer and longer and

89
00:06:03,140 --> 00:06:10,760
they do a wrap top and as you see they

90
00:06:07,880 --> 00:06:14,169
are not seeing what's happening what

91
00:06:10,760 --> 00:06:14,169
processes are being run in this machine

92
00:06:14,230 --> 00:06:18,010
look at the connections

93
00:06:21,590 --> 00:06:29,130
we see 130 which is the victim machine

94
00:06:25,470 --> 00:06:31,979
but the attacking machine which is 131

95
00:06:29,130 --> 00:06:34,800
we see no connection so in this way the

96
00:06:31,979 --> 00:06:41,580
attacker can introduce any type of

97
00:06:34,800 --> 00:06:43,949
malicious process ask my good friend got

98
00:06:41,580 --> 00:06:46,859
me that I would say the malicious truth

99
00:06:43,949 --> 00:06:51,000
process this is a joke about the Catalan

100
00:06:46,860 --> 00:06:53,669
situation so this is just a small

101
00:06:51,000 --> 00:06:58,950
demonstration where you can see what the

102
00:06:53,669 --> 00:07:01,380
attacker see is what the victims is so

103
00:06:58,950 --> 00:07:03,450
as you can see it's very simple there

104
00:07:01,380 --> 00:07:05,010
are many tools that I live at that

105
00:07:03,450 --> 00:07:09,180
somebody would without too much

106
00:07:05,010 --> 00:07:16,590
knowledge can grab adopt and I installed

107
00:07:09,180 --> 00:07:22,380
in in a machine in TV it half is is full

108
00:07:16,590 --> 00:07:24,859
of those ok there's plenty of stuff now

109
00:07:22,380 --> 00:07:28,500
we're going to talk about trends

110
00:07:24,860 --> 00:07:30,450
regarding drug kids in recent years when

111
00:07:28,500 --> 00:07:32,970
we talk about trends it doesn't mean

112
00:07:30,450 --> 00:07:34,830
that in that other things were not being

113
00:07:32,970 --> 00:07:38,970
used in that year but this is in very

114
00:07:34,830 --> 00:07:42,450
general terms if we go back to 2002 year

115
00:07:38,970 --> 00:07:45,270
2000 rooted what kids already existed

116
00:07:42,450 --> 00:07:48,060
and they tended to replace the system

117
00:07:45,270 --> 00:07:51,389
commands for instance in Linux I have a

118
00:07:48,060 --> 00:07:53,880
number of commands and what I do is

119
00:07:51,389 --> 00:07:58,320
replace them so that they hide things

120
00:07:53,880 --> 00:08:03,120
and here they were great engineering

121
00:07:58,320 --> 00:08:08,099
works for instance like creating a cell

122
00:08:03,120 --> 00:08:11,639
screen cell script that actually called

123
00:08:08,099 --> 00:08:17,300
the right one but with regret so

124
00:08:11,639 --> 00:08:20,340
it's very much worthwhile for a

125
00:08:17,300 --> 00:08:23,039
consulting company charging 100 euros

126
00:08:20,340 --> 00:08:25,830
per hour and you know that lineage is

127
00:08:23,039 --> 00:08:29,159
open-source and it was so cheap that

128
00:08:25,830 --> 00:08:32,309
sometimes they would get the code source

129
00:08:29,159 --> 00:08:34,880
source code they turned it into a

130
00:08:32,309 --> 00:08:38,429
Georgian and they installed it

131
00:08:34,880 --> 00:08:40,260
so sometimes the administrator and who's

132
00:08:38,429 --> 00:08:43,169
appears have a number of flags that

133
00:08:40,260 --> 00:08:46,680
could we're not in this life where flags

134
00:08:43,169 --> 00:08:48,990
and then it wasn't working and that they

135
00:08:46,680 --> 00:08:51,300
tell me that that flag doesn't exist

136
00:08:48,990 --> 00:08:57,390
this was very early in time when people

137
00:08:51,300 --> 00:09:00,870
were doing what they could in 2005 it

138
00:08:57,390 --> 00:09:03,000
became trendy to tackle the cabinet the

139
00:09:00,870 --> 00:09:06,029
leaner scandal is very good but it

140
00:09:03,000 --> 00:09:07,950
wasn't designed with competing security

141
00:09:06,029 --> 00:09:11,820
features and that a lot among other

142
00:09:07,950 --> 00:09:15,000
things for the memory representation of

143
00:09:11,820 --> 00:09:18,750
the cabinet which was on the third line

144
00:09:15,000 --> 00:09:22,850
was pretty much editable so there was a

145
00:09:18,750 --> 00:09:25,649
rootkit called Suki that patched the

146
00:09:22,850 --> 00:09:26,970
memory of the kernel so it was great for

147
00:09:25,649 --> 00:09:29,750
the attacker because it was quite

148
00:09:26,970 --> 00:09:33,209
difficult to detect when it came to

149
00:09:29,750 --> 00:09:36,329
accessing this fall table which is where

150
00:09:33,209 --> 00:09:40,140
the cause of the systems are marked when

151
00:09:36,329 --> 00:09:42,599
it's at the end and those were public so

152
00:09:40,140 --> 00:09:46,920
it was very easy to find the locations

153
00:09:42,600 --> 00:09:49,800
and change so it's were times when

154
00:09:46,920 --> 00:09:53,069
everybody was doing root kits for

155
00:09:49,800 --> 00:09:55,589
Cameron and thanks to that many

156
00:09:53,070 --> 00:09:58,440
improvements were made for a Thursday a

157
00:09:55,589 --> 00:10:00,600
cold table is not so easy to find you

158
00:09:58,440 --> 00:10:07,910
need to do many more things you cannot

159
00:10:00,600 --> 00:10:10,829
write and read in the in the dev cam em

160
00:10:07,910 --> 00:10:14,550
sometimes when you when you go against

161
00:10:10,829 --> 00:10:15,949
the kernel it's quite delicate so if the

162
00:10:14,550 --> 00:10:18,469
in the machine

163
00:10:15,950 --> 00:10:20,480
administrator had compiled the route the

164
00:10:18,470 --> 00:10:22,220
colonel they had permit rises and it

165
00:10:20,480 --> 00:10:28,130
cries because it wasn't the standard

166
00:10:22,220 --> 00:10:34,760
Colonel so you we can see the current

167
00:10:28,130 --> 00:10:36,949
trend is okay so the idea is to inject a

168
00:10:34,760 --> 00:10:39,230
library or to put a library with

169
00:10:36,949 --> 00:10:41,269
features that have been altered so that

170
00:10:39,230 --> 00:10:45,260
when the binary is going to use a

171
00:10:41,269 --> 00:10:47,959
library will be uploaded below with a

172
00:10:45,260 --> 00:10:50,209
function or the functionality that is

173
00:10:47,959 --> 00:10:55,579
the functionality you're interested in

174
00:10:50,209 --> 00:10:59,930
so you can use you get you kind X user

175
00:10:55,579 --> 00:11:01,969
or you can hide other files stop along

176
00:10:59,930 --> 00:11:05,469
to other people so the important thing

177
00:11:01,970 --> 00:11:10,430
for this rootkit as David would mention

178
00:11:05,470 --> 00:11:12,800
that exists in great numbers so it's a

179
00:11:10,430 --> 00:11:16,040
very difficult it's very easy to come up

180
00:11:12,800 --> 00:11:20,390
with one for a different environment so

181
00:11:16,040 --> 00:11:22,849
LD dot sow is also preload so they are

182
00:11:20,390 --> 00:11:26,870
easily to be detected because if you

183
00:11:22,850 --> 00:11:30,050
compile a to a tool with a GCC on static

184
00:11:26,870 --> 00:11:32,240
mode you will not upload the library and

185
00:11:30,050 --> 00:11:35,149
everything is in this mode yeah for

186
00:11:32,240 --> 00:11:38,120
example very often when this became

187
00:11:35,149 --> 00:11:41,300
popular there were good kids that they

188
00:11:38,120 --> 00:11:48,279
take detect detected detected I'm sorry

189
00:11:41,300 --> 00:11:54,229
static compiling and they alter for you

190
00:11:48,279 --> 00:11:57,829
to have instead of LDS odo dot preload

191
00:11:54,230 --> 00:12:00,290
you have some some some a different file

192
00:11:57,829 --> 00:12:02,329
because the binary was modified or the

193
00:12:00,290 --> 00:12:04,040
part of code reading that file and they

194
00:12:02,329 --> 00:12:07,250
replaced this by another one of the

195
00:12:04,040 --> 00:12:10,610
system so so that was the idea behind of

196
00:12:07,250 --> 00:12:14,089
this they we are going to enhance all

197
00:12:10,610 --> 00:12:16,490
that for us to prevent this to be

198
00:12:14,089 --> 00:12:20,050
detected as easily as as it is now

199
00:12:16,490 --> 00:12:22,819
another trend is to inject on-the-fly

200
00:12:20,050 --> 00:12:27,618
meaning I have a process

201
00:12:22,819 --> 00:12:30,139
CEL H or M Dean or something L complying

202
00:12:27,619 --> 00:12:32,899
with the verification standards of the

203
00:12:30,139 --> 00:12:36,439
system so it's an original packet with a

204
00:12:32,899 --> 00:12:38,600
digital signature and this binary is

205
00:12:36,439 --> 00:12:41,719
patched in memory with another feature

206
00:12:38,600 --> 00:12:44,299
for example a backdoor or a port to be

207
00:12:41,720 --> 00:12:46,609
connected to et cetera so this is a kind

208
00:12:44,299 --> 00:12:50,149
of true generation which is a little bit

209
00:12:46,609 --> 00:12:52,160
complicated because for experts is

210
00:12:50,149 --> 00:12:55,999
difficult to determine determine whether

211
00:12:52,160 --> 00:12:59,059
or not a process was corrupted in order

212
00:12:55,999 --> 00:13:02,539
to be altered with the new functions and

213
00:12:59,059 --> 00:13:08,738
an online access based on Petrus a which

214
00:13:02,539 --> 00:13:08,739
is have functionality available on Linux

215
00:13:11,139 --> 00:13:20,929
so this is this is how things function

216
00:13:15,049 --> 00:13:24,049
now so now we're going to be talking

217
00:13:20,929 --> 00:13:26,269
about own unhide tool I don't know if

218
00:13:24,049 --> 00:13:29,769
you've used unhide or not please raise

219
00:13:26,269 --> 00:13:37,119
your hand if you've used it what come on

220
00:13:29,769 --> 00:13:40,129
so it it should be like a right wing

221
00:13:37,119 --> 00:13:43,279
meeting so you should raise your hand so

222
00:13:40,129 --> 00:13:48,309
it is packed in great number of

223
00:13:43,279 --> 00:13:52,100
distribution centers red hard freebsd

224
00:13:48,309 --> 00:13:54,219
you bunty or de bein so you can find it

225
00:13:52,100 --> 00:14:01,249
as a bundle as a packet as a bundle and

226
00:13:54,220 --> 00:14:04,220
in there with me we advise to compile

227
00:14:01,249 --> 00:14:05,839
this statically nobody does this one of

228
00:14:04,220 --> 00:14:08,600
the thing is that the ideal situation

229
00:14:05,839 --> 00:14:11,359
will be able will be to be able to

230
00:14:08,600 --> 00:14:14,059
compile in a static machine and then use

231
00:14:11,359 --> 00:14:19,609
it because if you're using a rootkit

232
00:14:14,059 --> 00:14:21,529
you I mean static compelling could be

233
00:14:19,609 --> 00:14:27,079
detected and we have to bear this in

234
00:14:21,529 --> 00:14:29,119
mind and then unhide so why did you want

235
00:14:27,079 --> 00:14:32,929
to create did you want to create this

236
00:14:29,119 --> 00:14:33,980
tool well when I started working with

237
00:14:32,929 --> 00:14:37,220
them

238
00:14:33,980 --> 00:14:40,759
compromised environment at the beginning

239
00:14:37,220 --> 00:14:44,749
of my career by 2002 I saw there were no

240
00:14:40,759 --> 00:14:47,749
tools all the forensic processes based

241
00:14:44,749 --> 00:14:51,290
on extracting hardware

242
00:14:47,749 --> 00:14:54,649
so using corners toolkit etc but the

243
00:14:51,290 --> 00:14:57,949
line mode had not been exploited or we

244
00:14:54,649 --> 00:15:01,549
didn't have reliable tools to verify the

245
00:14:57,949 --> 00:15:06,889
binary md5 etc could be used so we

246
00:15:01,549 --> 00:15:11,269
create hype cross view based and then

247
00:15:06,889 --> 00:15:15,259
when somebody created similar tools this

248
00:15:11,269 --> 00:15:19,369
was called cross for you so what it

249
00:15:15,259 --> 00:15:21,350
means in plain language is that you are

250
00:15:19,369 --> 00:15:25,489
we are able to compare different things

251
00:15:21,350 --> 00:15:29,089
because you have resources to ask the

252
00:15:25,489 --> 00:15:31,609
process what are you being PS what are

253
00:15:29,089 --> 00:15:34,669
you book put what do you see or you can

254
00:15:31,609 --> 00:15:36,889
do something else you can speak to the

255
00:15:34,669 --> 00:15:39,019
colonel directly to compare so if you

256
00:15:36,889 --> 00:15:41,540
know a process is in execution it should

257
00:15:39,019 --> 00:15:44,839
be done from different perspective and

258
00:15:41,540 --> 00:15:48,019
so if you can only see one point there

259
00:15:44,839 --> 00:15:51,559
is a hiding of of the other points so

260
00:15:48,019 --> 00:15:55,879
this is a little bit the timeline of

261
00:15:51,559 --> 00:15:58,339
unhide the prototype was created in 2002

262
00:15:55,879 --> 00:16:02,540
and Perl that was Python at the time

263
00:15:58,339 --> 00:16:05,209
PI's and was not used people said this

264
00:16:02,540 --> 00:16:06,799
person is the future but then people

265
00:16:05,209 --> 00:16:09,410
said no but instead of PI's and years

266
00:16:06,799 --> 00:16:13,429
Perl so we used kid priority for

267
00:16:09,410 --> 00:16:17,600
verification look for on on PS and then

268
00:16:13,429 --> 00:16:19,009
get priority to see they spit in the

269
00:16:17,600 --> 00:16:24,339
system to see we're not altering

270
00:16:19,009 --> 00:16:29,480
alterations were done and then stat so

271
00:16:24,339 --> 00:16:32,539
this is how unhide was created they

272
00:16:29,480 --> 00:16:35,319
unhide that is that was made public in

273
00:16:32,539 --> 00:16:35,319
2013

274
00:16:35,790 --> 00:16:42,849
okay so this we are on the other correct

275
00:16:39,250 --> 00:16:46,750
slide so the main technique for unhide

276
00:16:42,850 --> 00:16:49,330
even if the even if there more we cannot

277
00:16:46,750 --> 00:16:52,600
go into all the details so the idea is

278
00:16:49,330 --> 00:16:56,500
we compare peers against Brooke

279
00:16:52,600 --> 00:16:59,320
yes against Cisco yes against brute

280
00:16:56,500 --> 00:17:04,240
force and then compare this with their

281
00:16:59,320 --> 00:17:06,640
binary so the first one proc if you

282
00:17:04,240 --> 00:17:09,309
don't know online looks all the process

283
00:17:06,640 --> 00:17:12,550
huh are mapped on a specific process

284
00:17:09,309 --> 00:17:16,149
called proc with pig and a series of

285
00:17:12,550 --> 00:17:18,159
data commands of the libraries that have

286
00:17:16,150 --> 00:17:21,670
been uploaded etc so the technique is

287
00:17:18,160 --> 00:17:26,470
very simple if you want if you see by a

288
00:17:21,670 --> 00:17:31,000
PS like a process like PS ID 3 2 to 2

289
00:17:26,470 --> 00:17:34,750
and then /proc / 3 to 2 so the two

290
00:17:31,000 --> 00:17:39,130
things are the same but on PS I can't

291
00:17:34,750 --> 00:17:41,980
find a process but there is an entry -

292
00:17:39,130 --> 00:17:44,050
in the directories something is

293
00:17:41,980 --> 00:17:50,050
happening something has been hidden so

294
00:17:44,050 --> 00:17:50,860
with this technique if hidden processes

295
00:17:50,050 --> 00:17:56,639
exist

296
00:17:50,860 --> 00:17:59,530
comparing proc and PS so instead of

297
00:17:56,640 --> 00:18:03,250
conducting a stanford directorial I use

298
00:17:59,530 --> 00:18:07,600
other functions chdr to execute a

299
00:18:03,250 --> 00:18:10,360
directory so if we have if we open CH

300
00:18:07,600 --> 00:18:14,969
dear but there's no proc there's a

301
00:18:10,360 --> 00:18:18,459
problem so if we use the Siskel's

302
00:18:14,970 --> 00:18:21,670
technique same thing happened with P

303
00:18:18,460 --> 00:18:24,490
ends I have to see certain process when

304
00:18:21,670 --> 00:18:28,480
I use the system call which is a picture

305
00:18:24,490 --> 00:18:30,580
kernel offers for certain things the

306
00:18:28,480 --> 00:18:33,250
same thing should be done so if I use a

307
00:18:30,580 --> 00:18:37,240
priority to see what the process is

308
00:18:33,250 --> 00:18:40,380
priority priority so ID 3 - 2 but I

309
00:18:37,240 --> 00:18:43,870
don't see it on PS so the problem arises

310
00:18:40,380 --> 00:18:46,680
arises so these are the Siskel's I'm

311
00:18:43,870 --> 00:18:50,580
using if you are interested in

312
00:18:46,680 --> 00:18:53,490
you can google them to know more about

313
00:18:50,580 --> 00:18:55,770
each process so the last technique which

314
00:18:53,490 --> 00:18:58,260
is the most effective actually the

315
00:18:55,770 --> 00:19:00,660
malware creators say talked about this

316
00:18:58,260 --> 00:19:07,680
on Farah and they say well this is very

317
00:19:00,660 --> 00:19:12,050
difficult to skip an ABC Journal talked

318
00:19:07,680 --> 00:19:16,590
about brute force for brute ein Spanish

319
00:19:12,050 --> 00:19:19,980
good force things are always like that

320
00:19:16,590 --> 00:19:22,949
on service so we have a process the

321
00:19:19,980 --> 00:19:25,290
highest process ID how many processes a

322
00:19:22,950 --> 00:19:27,840
day will be delivered by kernel from 1

323
00:19:25,290 --> 00:19:32,399
to 32 thousand 768

324
00:19:27,840 --> 00:19:36,270
so the first were preserved but this is

325
00:19:32,400 --> 00:19:38,790
no longer applicable so I do fork at a

326
00:19:36,270 --> 00:19:42,300
maximum number and then I will take note

327
00:19:38,790 --> 00:19:44,909
for each fork the process ID and some of

328
00:19:42,300 --> 00:19:45,990
them will not be offered because they

329
00:19:44,910 --> 00:19:51,270
are being used

330
00:19:45,990 --> 00:19:55,200
here's like bingo like in homes for

331
00:19:51,270 --> 00:19:59,400
elderly right so so the process ID gave

332
00:19:55,200 --> 00:20:02,670
me a T so that nine to one wasn't

333
00:19:59,400 --> 00:20:07,850
provided so you we should you I'm sorry

334
00:20:02,670 --> 00:20:10,950
you should use slash bin slash PS and

335
00:20:07,850 --> 00:20:15,179
this is very difficult to skip actually

336
00:20:10,950 --> 00:20:19,140
I also have to say that we use fourth

337
00:20:15,180 --> 00:20:22,250
but we we also use P threads these are

338
00:20:19,140 --> 00:20:27,900
the two ways to initiate processes and

339
00:20:22,250 --> 00:20:32,130
an unhide so we have the same technique

340
00:20:27,900 --> 00:20:33,360
to know where if ports are being used so

341
00:20:32,130 --> 00:20:36,090
if you ask

342
00:20:33,360 --> 00:20:40,229
show me what are the open port they

343
00:20:36,090 --> 00:20:45,810
should be all visible if they are not

344
00:20:40,230 --> 00:20:49,710
visible net that if I want I mean and

345
00:20:45,810 --> 00:20:52,950
compared against binned or bind bi and E

346
00:20:49,710 --> 00:20:55,740
so the all the ports should be reflected

347
00:20:52,950 --> 00:20:58,410
if not the port is being used by

348
00:20:55,740 --> 00:21:03,580
something I'm not seeing

349
00:20:58,410 --> 00:21:09,720
we also do this for TCP and TVP and UDP

350
00:21:03,580 --> 00:21:14,980
I'm sorry also I have to say that people

351
00:21:09,720 --> 00:21:19,230
made generous efforts to bypass unhide

352
00:21:14,980 --> 00:21:22,330
and one of the things that was done is

353
00:21:19,230 --> 00:21:27,880
using command line and if the process it

354
00:21:22,330 --> 00:21:34,230
is called unhide well I don't I didn't

355
00:21:27,880 --> 00:21:39,460
do evil so someone in a code called

356
00:21:34,230 --> 00:21:42,150
unhide cape rocks so the creator of this

357
00:21:39,460 --> 00:21:47,530
malware was a homophobic person probably

358
00:21:42,150 --> 00:21:49,929
but I have to say that he said I think

359
00:21:47,530 --> 00:21:54,490
he wanted to change the name he was not

360
00:21:49,929 --> 00:21:57,280
feeling well because he gave the malware

361
00:21:54,490 --> 00:22:00,630
this name Gabe rocks we're gonna show

362
00:21:57,280 --> 00:22:07,000
some demos for you to see what happens

363
00:22:00,630 --> 00:22:08,950
when someone is using anti unhide which

364
00:22:07,000 --> 00:22:11,080
is the basic amend where Johnny we're

365
00:22:08,950 --> 00:22:13,659
going to show the basic one that is

366
00:22:11,080 --> 00:22:17,049
found most frequently and then another

367
00:22:13,659 --> 00:22:19,720
demo with something more complicated and

368
00:22:17,049 --> 00:22:24,639
then a demo with nothing at all where we

369
00:22:19,720 --> 00:22:28,120
can skip this application so let's see a

370
00:22:24,640 --> 00:22:31,480
normal system with the rookie without an

371
00:22:28,120 --> 00:22:36,969
anti unhide like this one so let's see

372
00:22:31,480 --> 00:22:39,000
how the section happens okay it's this

373
00:22:36,970 --> 00:22:43,620
one

374
00:22:39,000 --> 00:22:48,510
okay so we go back to the victim machine

375
00:22:43,620 --> 00:22:51,639
here we are we are the root and we

376
00:22:48,510 --> 00:22:55,000
believe something bad is happening or

377
00:22:51,640 --> 00:23:00,309
strange things happen the system run

378
00:22:55,000 --> 00:23:02,940
slow so we download on hide and let's

379
00:23:00,309 --> 00:23:02,940
see what happens

380
00:23:05,940 --> 00:23:15,130
unhide Linux and the first thing is we

381
00:23:12,640 --> 00:23:17,880
are going to enter as attacker to launch

382
00:23:15,130 --> 00:23:17,880
a process

383
00:23:43,849 --> 00:23:48,840
malee estamos the hummus on top okay so

384
00:23:47,249 --> 00:23:55,080
we have this as a tacher

385
00:23:48,840 --> 00:24:00,418
that is running so we launch unhide with

386
00:23:55,080 --> 00:24:03,539
the sis parameter unless some someone

387
00:24:00,419 --> 00:24:08,159
wants to elaborate on something as you

388
00:24:03,539 --> 00:24:10,679
can see boom there is something that was

389
00:24:08,159 --> 00:24:14,369
been that has been detected because it

390
00:24:10,679 --> 00:24:19,399
is hidden so comparing against different

391
00:24:14,369 --> 00:24:23,189
sources oh there's a top a bash

392
00:24:19,399 --> 00:24:25,678
something is going on which is very

393
00:24:23,190 --> 00:24:33,899
strange so we have a territory here

394
00:24:25,679 --> 00:24:38,519
within within with an Al as last Lib and

395
00:24:33,899 --> 00:24:40,439
now if I try to write something I'm I'm

396
00:24:38,519 --> 00:24:45,989
good I'm going to see that nothing

397
00:24:40,440 --> 00:24:48,320
happens there's nothing actually we have

398
00:24:45,989 --> 00:24:52,139
the territory the directory I'm sorry

399
00:24:48,320 --> 00:24:55,678
and the attacker has many things let's I

400
00:24:52,139 --> 00:24:59,099
use another parameter more than the

401
00:24:55,679 --> 00:25:02,159
brute brute force actually that launches

402
00:24:59,099 --> 00:25:06,418
many processes is like bingo game like a

403
00:25:02,159 --> 00:25:10,080
bingo game so we so so bash was detected

404
00:25:06,419 --> 00:25:14,309
that directory something's strange P

405
00:25:10,080 --> 00:25:17,820
trade is the same thing same result so

406
00:25:14,309 --> 00:25:19,859
so in the end well you can get even if

407
00:25:17,820 --> 00:25:25,470
you have more parameters for example

408
00:25:19,859 --> 00:25:28,080
o'clock with these simple things sis

409
00:25:25,470 --> 00:25:31,320
brute and truck the results are the same

410
00:25:28,080 --> 00:25:33,989
we know what hidden process is happening

411
00:25:31,320 --> 00:25:36,269
and things are not going well so this is

412
00:25:33,989 --> 00:25:39,989
with a machine that doesn't have an anti

413
00:25:36,269 --> 00:25:43,379
bracket anti hide system it is wicked

414
00:25:39,989 --> 00:25:45,869
that works well but it doesn't take into

415
00:25:43,379 --> 00:25:48,119
consideration this kind of a thanks so

416
00:25:45,869 --> 00:25:52,109
let's see the same demo with their work

417
00:25:48,119 --> 00:25:55,789
head with this with a technology based

418
00:25:52,109 --> 00:25:55,789
on the name of the process

419
00:26:15,290 --> 00:26:23,270
I know I'm presenting some something of

420
00:26:20,780 --> 00:26:28,850
linux with them with with windows oh

421
00:26:23,270 --> 00:26:33,440
because you didn't see your keyboard the

422
00:26:28,850 --> 00:26:35,389
thing is I we have the same rootkit and

423
00:26:33,440 --> 00:26:39,920
the same situation but the difference is

424
00:26:35,390 --> 00:26:42,520
that we are detected so we have a nun

425
00:26:39,920 --> 00:26:44,360
hired process so the wicked

426
00:26:42,520 --> 00:26:47,690
automatically will provide the

427
00:26:44,360 --> 00:26:51,139
information to it because the unhide is

428
00:26:47,690 --> 00:26:51,650
seeing the hidden process because it was

429
00:26:51,140 --> 00:26:58,100
not hidden

430
00:26:51,650 --> 00:27:01,730
it doesn't detect it so attacker same

431
00:26:58,100 --> 00:27:08,120
thing attack will launch the attack the

432
00:27:01,730 --> 00:27:12,310
attack so the talk is running so I will

433
00:27:08,120 --> 00:27:12,310
launch now unhide

434
00:27:16,140 --> 00:27:20,000
with Brut for example

435
00:27:24,649 --> 00:27:32,610
and like I said nothing happens because

436
00:27:28,860 --> 00:27:35,760
they because unhide is considering

437
00:27:32,610 --> 00:27:41,129
everything if someone is using beaters

438
00:27:35,760 --> 00:27:41,929
or if you run a s trace you will have

439
00:27:41,130 --> 00:27:47,029
everything

440
00:27:41,929 --> 00:27:54,059
same thing with put proc so let's try

441
00:27:47,029 --> 00:28:02,520
this same thing the result is given same

442
00:27:54,059 --> 00:28:06,600
thing will proc no result show up it's a

443
00:28:02,520 --> 00:28:10,918
little bit too ridiculous because if I

444
00:28:06,600 --> 00:28:12,539
change unhide lonex and I called he can

445
00:28:10,919 --> 00:28:17,070
I calls it hello how are you and then

446
00:28:12,539 --> 00:28:20,370
execute and then I write this and you

447
00:28:17,070 --> 00:28:25,049
say what the heck what has it done it's

448
00:28:20,370 --> 00:28:28,949
absurd but if you don't want to work one

449
00:28:25,049 --> 00:28:32,039
day you can do this this is something

450
00:28:28,950 --> 00:28:38,220
smart as we call it actually so as you

451
00:28:32,039 --> 00:28:42,629
can see this is ridiculous so we advise

452
00:28:38,220 --> 00:28:48,539
you to use static with a safe machine

453
00:28:42,630 --> 00:28:51,630
and use any name and then with these

454
00:28:48,539 --> 00:28:56,669
recommendations you will find everything

455
00:28:51,630 --> 00:29:00,149
and I've downloaded a great number of

456
00:28:56,669 --> 00:29:03,510
route kids with the unhide and I was

457
00:29:00,149 --> 00:29:05,939
wondering but what do people do so this

458
00:29:03,510 --> 00:29:10,200
is what we wanted to show you a demo

459
00:29:05,940 --> 00:29:13,200
with rookie without width and behind so

460
00:29:10,200 --> 00:29:16,679
that was on hi 2013 so I said to myself

461
00:29:13,200 --> 00:29:19,799
I don't know what else I can do and I I

462
00:29:16,679 --> 00:29:27,990
said I'm gonna call this martyr person I

463
00:29:19,799 --> 00:29:29,840
know but he was busy so David I was free

464
00:29:27,990 --> 00:29:34,510
so I called him

465
00:29:29,840 --> 00:29:39,110
and this is when our love story began

466
00:29:34,510 --> 00:29:41,000
like the Titanic story and I'm the I'm

467
00:29:39,110 --> 00:29:43,580
the girl actually yeah because you have

468
00:29:41,000 --> 00:29:46,840
beautiful eyes so it's better for you to

469
00:29:43,580 --> 00:29:50,330
be the girl so david incorporated

470
00:29:46,840 --> 00:29:55,120
improvements in the near unhide yep

471
00:29:50,330 --> 00:29:58,220
the thing is I had an entire book kids

472
00:29:55,120 --> 00:30:02,360
boxes that we're all around so we

473
00:29:58,220 --> 00:30:05,990
started working and then I decided oh

474
00:30:02,360 --> 00:30:10,429
let's integrate this into something that

475
00:30:05,990 --> 00:30:15,320
was that is what well done so I said oh

476
00:30:10,430 --> 00:30:17,930
yeah go let him incorporate this created

477
00:30:15,320 --> 00:30:19,189
created wicked to see what people can do

478
00:30:17,930 --> 00:30:23,120
with that so the first thing we did

479
00:30:19,190 --> 00:30:28,870
we're is to change the name so the ideal

480
00:30:23,120 --> 00:30:31,580
situation would be if you if he gave or

481
00:30:28,870 --> 00:30:33,919
and if you want to get the bundle that

482
00:30:31,580 --> 00:30:36,860
would be good because the executable the

483
00:30:33,920 --> 00:30:38,270
executable will start working like that

484
00:30:36,860 --> 00:30:41,719
and people will never know what is

485
00:30:38,270 --> 00:30:47,020
happening so what we did is to add a

486
00:30:41,720 --> 00:30:52,580
parameter on hardliner design unhide

487
00:30:47,020 --> 00:30:56,210
deposit or other unhide systems you

488
00:30:52,580 --> 00:30:59,389
changed the name you send it to a

489
00:30:56,210 --> 00:31:02,630
temporary directory with a random name

490
00:30:59,390 --> 00:31:06,020
to for it to copy itself and then you

491
00:31:02,630 --> 00:31:10,070
say launch this command so you launch

492
00:31:06,020 --> 00:31:13,580
this random long name you've created and

493
00:31:10,070 --> 00:31:15,110
there you go so this is one of the

494
00:31:13,580 --> 00:31:20,360
things we incorporate another thing we

495
00:31:15,110 --> 00:31:23,330
incorporated is brute force for the

496
00:31:20,360 --> 00:31:25,610
group of users having this file or

497
00:31:23,330 --> 00:31:27,290
process to explain you this I have to

498
00:31:25,610 --> 00:31:32,229
explain you something else before all

499
00:31:27,290 --> 00:31:35,590
the processes on unix and files have a

500
00:31:32,230 --> 00:31:35,590
single number

501
00:31:35,679 --> 00:31:41,750
so many rico creators because they are

502
00:31:39,140 --> 00:31:43,850
lazy or because this is the MARTA is the

503
00:31:41,750 --> 00:31:46,250
smartest thing to do take this group and

504
00:31:43,850 --> 00:31:48,590
they generate a number a magical number

505
00:31:46,250 --> 00:31:50,990
they create for example a thousand seven

506
00:31:48,590 --> 00:31:54,050
hundred and twenty one all the files on

507
00:31:50,990 --> 00:31:55,820
the system having eight thousand seven

508
00:31:54,050 --> 00:31:58,040
hundred and ten to one number are not

509
00:31:55,820 --> 00:32:01,040
listed and the process is running with

510
00:31:58,040 --> 00:32:03,200
us will not be listed so you intercept

511
00:32:01,040 --> 00:32:05,570
the calls to the system and when you see

512
00:32:03,200 --> 00:32:08,540
the number things will be hidden so

513
00:32:05,570 --> 00:32:14,120
therefore they don't exist easy to do

514
00:32:08,540 --> 00:32:17,270
with not many failures so what we're

515
00:32:14,120 --> 00:32:22,790
gonna do is we're gonna brute force them

516
00:32:17,270 --> 00:32:27,679
so again we'll word bingo or but gettin

517
00:32:22,790 --> 00:32:30,950
my we're playing bingo so why if i

518
00:32:27,679 --> 00:32:33,920
create a file and if i put this number

519
00:32:30,950 --> 00:32:37,010
things disappear same thing for

520
00:32:33,920 --> 00:32:42,110
processes if I launch processes in hng

521
00:32:37,010 --> 00:32:44,629
IT ID and then it disappears is because

522
00:32:42,110 --> 00:32:48,199
something is hidden it another thing I

523
00:32:44,630 --> 00:32:51,890
wanted to comment there are people that

524
00:32:48,200 --> 00:32:56,140
are more advanced and they don't use

525
00:32:51,890 --> 00:33:00,820
this basic thing to hide files but they

526
00:32:56,140 --> 00:33:03,980
use a long name with letters and numbers

527
00:33:00,820 --> 00:33:06,950
so everything having this long list of

528
00:33:03,980 --> 00:33:09,020
letters and numbers are not listed so

529
00:33:06,950 --> 00:33:12,440
like we can do we can not use brute

530
00:33:09,020 --> 00:33:17,480
force because this long change mmm

531
00:33:12,440 --> 00:33:20,840
make this not possible so how can I hide

532
00:33:17,480 --> 00:33:23,929
the process if it is a program that has

533
00:33:20,840 --> 00:33:28,280
been hidden but when I launched this on

534
00:33:23,929 --> 00:33:34,460
bara proc on slash Brock so we will not

535
00:33:28,280 --> 00:33:37,940
have the extended get so so thank you

536
00:33:34,460 --> 00:33:38,360
very much but we will discover what you

537
00:33:37,940 --> 00:33:41,990
did

538
00:33:38,360 --> 00:33:44,840
so I brute force files and processes

539
00:33:41,990 --> 00:33:47,600
it's very simple I get a file and

540
00:33:44,840 --> 00:33:50,959
but group zero I listed I can see it yes

541
00:33:47,600 --> 00:33:55,039
now following one two three four and up

542
00:33:50,960 --> 00:33:58,309
until 32 bits bytes or bits for

543
00:33:55,039 --> 00:34:01,429
spreading so I create a process and put

544
00:33:58,309 --> 00:34:05,120
ID number one two three four lists if I

545
00:34:01,429 --> 00:34:07,909
can't is because something is hiding it

546
00:34:05,120 --> 00:34:11,299
because with slash bro they cannot do

547
00:34:07,909 --> 00:34:13,790
that so some people can get an

548
00:34:11,300 --> 00:34:18,500
environment variable to try to trace it

549
00:34:13,790 --> 00:34:22,699
down but this is what we did so what

550
00:34:18,500 --> 00:34:27,409
kind of brute force can we implement as

551
00:34:22,699 --> 00:34:33,020
I did this I used rocket I found over

552
00:34:27,409 --> 00:34:36,109
time in there so so this it's very

553
00:34:33,020 --> 00:34:39,109
simple because so what happens if I'm an

554
00:34:36,109 --> 00:34:43,069
attacker and I want to put a webserver

555
00:34:39,109 --> 00:34:44,899
some processes change the user group

556
00:34:43,070 --> 00:34:47,540
when they are being executed because

557
00:34:44,899 --> 00:34:49,668
they are they have the set of somewhere

558
00:34:47,540 --> 00:34:52,668
else so you have the process with the

559
00:34:49,668 --> 00:34:54,888
magic number to avoid detection but when

560
00:34:52,668 --> 00:34:57,348
it is launched because it is program

561
00:34:54,889 --> 00:34:59,690
another thing happening happen so it

562
00:34:57,349 --> 00:35:01,250
discovers itself and the root of the

563
00:34:59,690 --> 00:35:04,160
machine will be able to see the service

564
00:35:01,250 --> 00:35:07,099
so I said to myself that said it's very

565
00:35:04,160 --> 00:35:10,339
easy I will launch a process I said to

566
00:35:07,099 --> 00:35:13,640
myself and I make the process to occupy

567
00:35:10,339 --> 00:35:17,270
all the spaces I have so if it stacks at

568
00:35:13,640 --> 00:35:20,629
one point it is because someone is

569
00:35:17,270 --> 00:35:23,720
trying to push me because the rookie

570
00:35:20,630 --> 00:35:27,080
code tells us follow if I am a hidden

571
00:35:23,720 --> 00:35:30,649
process and I want to change to group of

572
00:35:27,080 --> 00:35:33,410
users that are going to see me I can do

573
00:35:30,650 --> 00:35:36,260
that because when I can no longer change

574
00:35:33,410 --> 00:35:40,910
is because I'm being retained this is

575
00:35:36,260 --> 00:35:45,830
the easiest and faster way I can do this

576
00:35:40,910 --> 00:35:48,240
very easy same thing is regroup all

577
00:35:45,830 --> 00:35:53,730
users in a process

578
00:35:48,240 --> 00:35:57,660
do we dare /proc similar to what a PS

579
00:35:53,730 --> 00:36:00,900
would do but this is law yeah go tested

580
00:35:57,660 --> 00:36:05,368
this and an old machine and it took him

581
00:36:00,900 --> 00:36:08,250
one week to see the two billion

582
00:36:05,369 --> 00:36:10,980
possibilities that existed so we started

583
00:36:08,250 --> 00:36:14,430
with PS at the beginning so imagine it

584
00:36:10,980 --> 00:36:18,180
was not viable and unless you have a

585
00:36:14,430 --> 00:36:23,279
great machine to do that and then we

586
00:36:18,180 --> 00:36:26,549
installed such it with start /proc slash

587
00:36:23,280 --> 00:36:29,640
the process being run at the time so and

588
00:36:26,550 --> 00:36:33,030
if there's disappears there you go so I

589
00:36:29,640 --> 00:36:36,270
don't know if this this took us eight

590
00:36:33,030 --> 00:36:38,570
nine hours maybe use him it's a long but

591
00:36:36,270 --> 00:36:41,339
you have been running this for eight

592
00:36:38,570 --> 00:36:47,760
hours and there you see four billion

593
00:36:41,339 --> 00:36:52,109
possibilities and that did jereal took

594
00:36:47,760 --> 00:36:54,780
four hours I think it's slow but you

595
00:36:52,109 --> 00:36:58,080
have to do that more than four billion

596
00:36:54,780 --> 00:37:01,770
times so it's very difficult something I

597
00:36:58,080 --> 00:37:04,770
didn't see that and I wondered why

598
00:37:01,770 --> 00:37:08,940
nobody did this before and the other

599
00:37:04,770 --> 00:37:12,390
thing I had was a very simple idea we

600
00:37:08,940 --> 00:37:16,500
are in user space and when you call an

601
00:37:12,390 --> 00:37:20,730
api of a high-level for director it will

602
00:37:16,500 --> 00:37:22,980
call a another one that is less abstract

603
00:37:20,730 --> 00:37:25,589
less abstract more concrete Martin Queen

604
00:37:22,980 --> 00:37:30,540
so this is a very simple process so I

605
00:37:25,589 --> 00:37:34,799
call the high level IP are Rio Dell all

606
00:37:30,540 --> 00:37:38,369
the processes with /proc and then kernel

607
00:37:34,800 --> 00:37:40,470
and I called it and tumbler with kernel

608
00:37:38,369 --> 00:37:44,550
and I say yeah in five minutes I will

609
00:37:40,470 --> 00:37:48,450
have everything so I see I said this is

610
00:37:44,550 --> 00:37:54,510
fast and I detected all space all user

611
00:37:48,450 --> 00:37:55,720
spaces so I don't call the get dens of

612
00:37:54,510 --> 00:37:59,589
Linux

613
00:37:55,720 --> 00:38:01,569
so I get the interruption I see on

614
00:37:59,589 --> 00:38:08,740
Colonel what the interruption is and I

615
00:38:01,569 --> 00:38:11,170
call the unifier system so the problem

616
00:38:08,740 --> 00:38:15,399
is that I have to see for each UNIX

617
00:38:11,170 --> 00:38:18,640
would each system and how it was called

618
00:38:15,400 --> 00:38:25,599
what they did what the enabler is so get

619
00:38:18,640 --> 00:38:27,460
read + smothered /proc is the everything

620
00:38:25,599 --> 00:38:31,210
is easier to correlate some of the

621
00:38:27,460 --> 00:38:35,109
problems we had with that was that oh my

622
00:38:31,210 --> 00:38:37,690
god I've been working with that and it

623
00:38:35,109 --> 00:38:41,020
is blocked and without wicked it didn't

624
00:38:37,690 --> 00:38:43,810
it didn't block so what was what is the

625
00:38:41,020 --> 00:38:49,720
problem I said to myself I realized that

626
00:38:43,810 --> 00:38:53,910
many were coaches mal is badly done the

627
00:38:49,720 --> 00:38:56,649
programmer does whatever he wants

628
00:38:53,910 --> 00:38:58,540
because you don't call many times

629
00:38:56,650 --> 00:38:59,740
because appears does it and then you

630
00:38:58,540 --> 00:39:03,490
close it and that's it

631
00:38:59,740 --> 00:39:05,379
but I'm doing QA or refuse so the

632
00:39:03,490 --> 00:39:08,319
process starts and nothing happens which

633
00:39:05,380 --> 00:39:13,000
is okay because instead of waiting for

634
00:39:08,319 --> 00:39:15,550
two weeks in only two minutes I make the

635
00:39:13,000 --> 00:39:19,119
process I mean I cross the process in

636
00:39:15,550 --> 00:39:21,430
two minutes so when when you do that

637
00:39:19,119 --> 00:39:25,420
easily is because the process is not

638
00:39:21,430 --> 00:39:30,690
going to be blocked so this is what what

639
00:39:25,420 --> 00:39:37,270
it does the searched jail was the faster

640
00:39:30,690 --> 00:39:43,690
process when this kind of tools will

641
00:39:37,270 --> 00:39:45,790
give you strange mistake it is because

642
00:39:43,690 --> 00:39:48,579
they will have the machine will have a

643
00:39:45,790 --> 00:39:52,050
rocket because the thing is that the

644
00:39:48,579 --> 00:39:55,990
machine was blocked with this circuit so

645
00:39:52,050 --> 00:39:58,660
when whenever you see a failure it is

646
00:39:55,990 --> 00:40:01,209
not because we made a mistake but it is

647
00:39:58,660 --> 00:40:04,000
because the work is wicked a good kid is

648
00:40:01,210 --> 00:40:07,130
not good so let me show you a demo of an

649
00:40:04,000 --> 00:40:13,160
IP I high level you

650
00:40:07,130 --> 00:40:15,410
in force brute force so so in order not

651
00:40:13,160 --> 00:40:22,190
to be here for a week what we are going

652
00:40:15,410 --> 00:40:24,410
to do is to use a new it a new in a CD

653
00:40:22,190 --> 00:40:26,690
that is closed so we have their attacker

654
00:40:24,410 --> 00:40:38,359
and we're gonna launch it for a to

655
00:40:26,690 --> 00:40:41,240
detect this what is running we have 14

656
00:40:38,360 --> 00:40:43,700
area where automatically it goes

657
00:40:41,240 --> 00:40:56,049
directly to Darcy and people if you

658
00:40:43,700 --> 00:41:00,529
wanted in a directory with fun because

659
00:40:56,050 --> 00:41:04,870
it's very close and it says the detected

660
00:41:00,530 --> 00:41:07,780
key is this one four four four seven

661
00:41:04,870 --> 00:41:11,359
so what's fun about this

662
00:41:07,780 --> 00:41:14,330
if I hadn't done this to for you to see

663
00:41:11,360 --> 00:41:16,460
the demo in two minutes here it would

664
00:41:14,330 --> 00:41:20,299
have busted because they wrote it is a

665
00:41:16,460 --> 00:41:22,790
poorly program so this is how it is when

666
00:41:20,300 --> 00:41:24,440
you detective they filed their processes

667
00:41:22,790 --> 00:41:26,750
and everything else is the same

668
00:41:24,440 --> 00:41:29,570
it's one we were doing with a course on

669
00:41:26,750 --> 00:41:34,550
the buyers the other timer I want to

670
00:41:29,570 --> 00:41:40,310
show is what I've said to call the high

671
00:41:34,550 --> 00:41:43,270
level abi abi and it's cool because it's

672
00:41:40,310 --> 00:41:43,270
incredibly fast

673
00:41:43,330 --> 00:41:50,060
you call this and makes a number of

674
00:41:45,950 --> 00:41:52,069
calls and that take tell today

675
00:41:50,060 --> 00:41:57,080
it's just calling them see what happens

676
00:41:52,070 --> 00:41:59,780
so you get the pids of the healing

677
00:41:57,080 --> 00:42:03,319
processors and I haven't for this

678
00:41:59,780 --> 00:42:07,250
concept demonstration I have not

679
00:42:03,320 --> 00:42:10,970
anything else and you could look at the

680
00:42:07,250 --> 00:42:13,010
command line in Texas Ravi 2 LS if you

681
00:42:10,970 --> 00:42:22,970
try to list this day directory you

682
00:42:13,010 --> 00:42:26,090
cannot do it you cannot open it because

683
00:42:22,970 --> 00:42:30,410
I am going to hide this but if you write

684
00:42:26,090 --> 00:42:39,050
something else as I want I pick this

685
00:42:30,410 --> 00:42:41,290
from here this would be the use for this

686
00:42:39,050 --> 00:42:43,880
type of tool then we're going to

687
00:42:41,290 --> 00:42:45,650
integrate everything they don't hide

688
00:42:43,880 --> 00:42:49,460
from violence because it's also very

689
00:42:45,650 --> 00:42:52,160
fast I don't want to have just that you

690
00:42:49,460 --> 00:42:54,530
promise to have it before they wrote

691
00:42:52,160 --> 00:42:57,279
Evan but it's done I just have to

692
00:42:54,530 --> 00:42:57,280
integrate it

693
00:42:58,760 --> 00:43:04,190
so things that we want to include the

694
00:43:02,180 --> 00:43:06,529
confirmation of compilations with study

695
00:43:04,190 --> 00:43:08,630
I've said everyone that want to want to

696
00:43:06,530 --> 00:43:11,330
compile something static he won't let

697
00:43:08,630 --> 00:43:14,570
you but try to compile something static

698
00:43:11,330 --> 00:43:16,069
and then part that SSL to see whether it

699
00:43:14,570 --> 00:43:18,740
is telling or no so you're doing

700
00:43:16,070 --> 00:43:21,350
something that it doesn't compile static

701
00:43:18,740 --> 00:43:25,970
then I detect what you don't want me to

702
00:43:21,350 --> 00:43:28,220
do so it's always very useful is to have

703
00:43:25,970 --> 00:43:32,270
different sources for comparison

704
00:43:28,220 --> 00:43:36,500
something that I had a bit of an idea

705
00:43:32,270 --> 00:43:40,130
that was sort of working was to say it

706
00:43:36,500 --> 00:43:43,040
from I take a program that emulates

707
00:43:40,130 --> 00:43:44,990
itself they a call to the system and

708
00:43:43,040 --> 00:43:47,840
then I introduce to find all the

709
00:43:44,990 --> 00:43:54,649
instructions had called so I do list the

710
00:43:47,840 --> 00:43:57,440
files and then I put in the file every I

711
00:43:54,650 --> 00:43:59,619
do one dynamic and one static and if the

712
00:43:57,440 --> 00:44:02,210
instructions that I go through from

713
00:43:59,619 --> 00:44:05,060
static to dynamic program are not the

714
00:44:02,210 --> 00:44:10,010
same it means somebody is intercepting

715
00:44:05,060 --> 00:44:11,779
something at some point and because it's

716
00:44:10,010 --> 00:44:13,640
usually at the beginning well that's

717
00:44:11,780 --> 00:44:18,560
another way we have to start at this

718
00:44:13,640 --> 00:44:21,290
because we would have to introduce the

719
00:44:18,560 --> 00:44:29,150
emulator or something that perhaps is a

720
00:44:21,290 --> 00:44:32,000
bit heavy but so some controversies yes

721
00:44:29,150 --> 00:44:34,190
I'm going to run because we have little

722
00:44:32,000 --> 00:44:36,080
time left so what can we do to try to

723
00:44:34,190 --> 00:44:39,320
avoid this if there's something we can

724
00:44:36,080 --> 00:44:41,750
do regarding rootkits based on binary

725
00:44:39,320 --> 00:44:45,109
it's very simple because almost all

726
00:44:41,750 --> 00:44:49,700
modern distributions have installation

727
00:44:45,109 --> 00:44:53,210
facility such as rpm and dpkg in the

728
00:44:49,700 --> 00:44:56,200
case of Dania that take to the some of

729
00:44:53,210 --> 00:45:00,050
the conventional time of binaries so

730
00:44:56,200 --> 00:45:03,319
directly with the RPM

731
00:45:00,050 --> 00:45:05,120
or with deaf subs - hey you can see what

732
00:45:03,320 --> 00:45:10,640
has been changed in the system there are

733
00:45:05,120 --> 00:45:13,130
other systems of this sort tripwire and

734
00:45:10,640 --> 00:45:18,799
in the case of modules in the kernel

735
00:45:13,130 --> 00:45:21,440
Linux uses the secure fault I think

736
00:45:18,800 --> 00:45:24,020
quite appropriate so the camera with not

737
00:45:21,440 --> 00:45:24,560
load a module without the digital

738
00:45:24,020 --> 00:45:26,330
signature

739
00:45:24,560 --> 00:45:29,299
I don't like me to make herself that you

740
00:45:26,330 --> 00:45:31,520
have to pay a lot of money - we are out

741
00:45:29,300 --> 00:45:35,000
to sign your own programs but with these

742
00:45:31,520 --> 00:45:37,520
tools that I have listed here you can

743
00:45:35,000 --> 00:45:41,300
generate your own digital certificate to

744
00:45:37,520 --> 00:45:44,290
sign the module and do the intro which

745
00:45:41,300 --> 00:45:46,550
is rather a secure and drone it asks for

746
00:45:44,290 --> 00:45:49,130
opinion you have to reboot the system

747
00:45:46,550 --> 00:45:51,650
you cannot do an intro of a pirate

748
00:45:49,130 --> 00:45:54,380
certificate without having to overcome

749
00:45:51,650 --> 00:46:01,640
every boot and introduce a pin so it's

750
00:45:54,380 --> 00:46:14,450
rather safe unsigned diver is here we

751
00:46:01,640 --> 00:46:16,609
have to say that Windows you can even

752
00:46:14,450 --> 00:46:18,770
define different scenarios and different

753
00:46:16,610 --> 00:46:21,110
priorities whether they were binary is

754
00:46:18,770 --> 00:46:23,630
sign or not and with languages of the

755
00:46:21,110 --> 00:46:26,840
case a project was launched to try

756
00:46:23,630 --> 00:46:29,600
parrot Island since 2009 they've stopped

757
00:46:26,840 --> 00:46:34,690
implementing it and later on it is true

758
00:46:29,600 --> 00:46:38,930
that in the linux kernel and

759
00:46:34,690 --> 00:46:40,730
architecture Safran architecture or tog

760
00:46:38,930 --> 00:46:43,460
rafi in the kernel in theory should

761
00:46:40,730 --> 00:46:47,270
offer this function library where you

762
00:46:43,460 --> 00:46:49,550
you can define whether the library if

763
00:46:47,270 --> 00:46:51,890
it's not signed cannot be uploaded and

764
00:46:49,550 --> 00:46:53,870
if you have a binary without a digital

765
00:46:51,890 --> 00:46:56,000
signature is not executed in the system

766
00:46:53,870 --> 00:46:57,920
but the problem it is is that it is

767
00:46:56,000 --> 00:47:00,710
quite complex to use I took the

768
00:46:57,920 --> 00:47:03,170
recommendation of the IMA and the

769
00:47:00,710 --> 00:47:08,089
program of

770
00:47:03,170 --> 00:47:11,119
that says that in the program about how

771
00:47:08,089 --> 00:47:13,880
by having less taxes you can collect

772
00:47:11,119 --> 00:47:15,289
more money and in that program was

773
00:47:13,880 --> 00:47:18,559
easier for me to understand that the

774
00:47:15,289 --> 00:47:22,460
element in terms of the process

775
00:47:18,559 --> 00:47:27,289
injection what his year is to to unable

776
00:47:22,460 --> 00:47:29,960
the penetration of the system you can no

777
00:47:27,289 --> 00:47:33,019
longer use it for good or bad and if you

778
00:47:29,960 --> 00:47:35,450
think that's too aggressive be an

779
00:47:33,019 --> 00:47:41,359
athlete you can also set up rules to

780
00:47:35,450 --> 00:47:44,509
detect it is the have like to cite the

781
00:47:41,359 --> 00:47:46,578
source but I had them in my own system

782
00:47:44,509 --> 00:47:49,130
and it was happy and able to find it

783
00:47:46,579 --> 00:47:53,509
regarding the loading of libraries in

784
00:47:49,130 --> 00:47:54,109
this case I have a tool called API from

785
00:47:53,509 --> 00:47:58,940
API

786
00:47:54,109 --> 00:47:59,569
I looked funny but it doesn't look so

787
00:47:58,940 --> 00:48:03,230
funny anymore

788
00:47:59,569 --> 00:48:06,619
in its diner's process there is a file

789
00:48:03,230 --> 00:48:09,380
called maps that corresponds to the the

790
00:48:06,619 --> 00:48:11,839
place in the memory for this process

791
00:48:09,380 --> 00:48:14,569
where's the deposition for library for

792
00:48:11,839 --> 00:48:18,109
resource so when new to an injection

793
00:48:14,569 --> 00:48:20,119
with tools such as index or one of the

794
00:48:18,109 --> 00:48:23,150
others there is an alteration and you

795
00:48:20,119 --> 00:48:26,450
can see that a new memory space has been

796
00:48:23,150 --> 00:48:29,150
created with execution permissions with

797
00:48:26,450 --> 00:48:33,589
the library that has been loaded so if

798
00:48:29,150 --> 00:48:36,609
we add that rpm and the PK she have

799
00:48:33,589 --> 00:48:39,680
integrity file integrity the system you

800
00:48:36,609 --> 00:48:42,739
search all of the libraries that have a

801
00:48:39,680 --> 00:48:45,919
crossers loaded and then I ask rpm or

802
00:48:42,739 --> 00:48:48,019
dpkg if they know them and if they do

803
00:48:45,920 --> 00:48:49,999
not know it if they say this library

804
00:48:48,019 --> 00:48:52,220
it's not does not belong to the system

805
00:48:49,999 --> 00:48:53,959
and so then I show it to you

806
00:48:52,220 --> 00:48:57,799
there is a process here which is

807
00:48:53,960 --> 00:49:00,230
legitimate and there's a library that's

808
00:48:57,799 --> 00:49:02,450
there and you should know why and this

809
00:49:00,230 --> 00:49:11,989
is a way to detect many types of

810
00:49:02,450 --> 00:49:14,538
processes injections well the

811
00:49:11,989 --> 00:49:18,589
conclusions are pretty obvious okay very

812
00:49:14,539 --> 00:49:23,690
quickly this is done all from the

813
00:49:18,589 --> 00:49:26,239
attacking machine we're going to do what

814
00:49:23,690 --> 00:49:31,210
Diego has a we're going to take one

815
00:49:26,239 --> 00:49:33,769
process launch it and inject a library

816
00:49:31,210 --> 00:49:41,269
it's very simple it's called

817
00:49:33,769 --> 00:49:43,788
sample target and it pretty I was taking

818
00:49:41,269 --> 00:49:46,629
and we're going to inject library in

819
00:49:43,789 --> 00:49:46,630
execution type

820
00:50:01,440 --> 00:50:10,599
so we're going to inject the library

821
00:50:04,059 --> 00:50:18,359
here so this is just living and when I

822
00:50:10,599 --> 00:50:18,359
inject the library you are the code

823
00:50:21,010 --> 00:50:28,020
over the name miners and same sample

824
00:50:25,020 --> 00:50:28,020
target

825
00:50:32,089 --> 00:50:35,259
- and

826
00:51:02,020 --> 00:51:07,319
I have all the times tried to run so

827
00:51:04,030 --> 00:51:07,319
much I got confused

828
00:51:21,220 --> 00:51:30,189
see though it says I just got loaded and

829
00:51:25,510 --> 00:51:36,490
very quickly if we go to here we have to

830
00:51:30,190 --> 00:51:39,810
execute this with a pie pie hunter and

831
00:51:36,490 --> 00:51:43,720
here it's looking for all the assistants

832
00:51:39,810 --> 00:51:45,730
here it says in this process what is

833
00:51:43,720 --> 00:51:47,919
library doing here it's a very simple

834
00:51:45,730 --> 00:51:50,560
way to see that there is a library been

835
00:51:47,920 --> 00:51:53,130
injected in this process you know very

836
00:51:50,560 --> 00:51:56,740
quickly there's some conclusions

837
00:51:53,130 --> 00:51:58,510
well basically beyond all the route kids

838
00:51:56,740 --> 00:52:03,939
that we have seen there are some more

839
00:51:58,510 --> 00:52:06,819
sophisticated ones to the BIOS UEFI

840
00:52:03,940 --> 00:52:08,890
which is quite difficult to detect and

841
00:52:06,819 --> 00:52:17,160
lightweight because many people say

842
00:52:08,890 --> 00:52:19,750
inaudible forensics and looking sort of

843
00:52:17,160 --> 00:52:21,250
under live mode which is when you are

844
00:52:19,750 --> 00:52:26,500
competing on equal terms with the

845
00:52:21,250 --> 00:52:32,319
attacker and if you develop this and the

846
00:52:26,500 --> 00:52:34,030
rootkit code I won't advise you that you

847
00:52:32,319 --> 00:52:36,550
shouldn't publish everything because

848
00:52:34,030 --> 00:52:39,520
it's agarose otherwise we start with a

849
00:52:36,550 --> 00:52:41,440
anti anti anti you always have to keep

850
00:52:39,520 --> 00:52:45,280
something at your sleeve to be able to

851
00:52:41,440 --> 00:52:49,020
surprise the attackers and that's all

852
00:52:45,280 --> 00:52:49,020
thanks very much it was a real pleasure

853
00:52:50,160 --> 00:52:56,980
well graph yes I mean over on 30 April

854
00:52:54,030 --> 00:52:58,540
so thanks for my girlfriend for putting

855
00:52:56,980 --> 00:53:02,520
up with me when I was 2 getting this

856
00:52:58,540 --> 00:53:02,520
ready other questions

857
00:53:03,819 --> 00:53:06,969
all right

858
00:53:11,910 --> 00:53:23,910
my second birthday we go already

859
00:53:14,710 --> 00:53:23,910
see not nice Italian no see

860
00:53:26,500 --> 00:53:40,240
I am old school I am old school and

861
00:53:38,350 --> 00:53:42,610
because you have talked about the old

862
00:53:40,240 --> 00:53:46,629
technique because I actually remember a

863
00:53:42,610 --> 00:53:50,110
couple of scripts to be able to install

864
00:53:46,630 --> 00:53:53,860
quickly I wrote great and one more the

865
00:53:50,110 --> 00:53:58,590
one you have mentioned the cell script

866
00:53:53,860 --> 00:54:07,330
with a career change the execution back

867
00:53:58,590 --> 00:54:10,860
in new entry included - when you change

868
00:54:07,330 --> 00:54:16,029
it quickly which was with grapes

869
00:54:10,860 --> 00:54:18,490
introduced in the base RC and oh yes

870
00:54:16,030 --> 00:54:20,230
that's true and I was hearing listen to

871
00:54:18,490 --> 00:54:22,779
you and I didn't know if this what

872
00:54:20,230 --> 00:54:26,650
attacked because binaries have been

873
00:54:22,780 --> 00:54:30,060
changed your comparing with - beans but

874
00:54:26,650 --> 00:54:30,060
- appears

875
00:54:33,110 --> 00:54:37,350
so it wouldn't hide it for the user but

876
00:54:36,030 --> 00:54:39,480
not for that program

877
00:54:37,350 --> 00:54:43,009
I don't know well it's very interesting

878
00:54:39,480 --> 00:54:48,420
because if you call directly the ps4

879
00:54:43,010 --> 00:54:51,810
route and rather what it's looking for

880
00:54:48,420 --> 00:54:59,100
I take right here to introduce more

881
00:54:51,810 --> 00:55:03,500
features introduced to do that yes thank

882
00:54:59,100 --> 00:55:08,190
you another question

883
00:55:03,500 --> 00:55:14,670
hi I wanted to ask a question what

884
00:55:08,190 --> 00:55:19,500
you've said about that sometimes it

885
00:55:14,670 --> 00:55:25,970
crashes and you've said that it's the

886
00:55:19,500 --> 00:55:29,010
route kids fault do you have no way

887
00:55:25,970 --> 00:55:31,799
could there be false positives in that

888
00:55:29,010 --> 00:55:35,910
case do you do when he check him to

889
00:55:31,800 --> 00:55:42,150
check that it doesn't crash yes you did

890
00:55:35,910 --> 00:55:47,009
four thousand million times my code is

891
00:55:42,150 --> 00:55:51,450
executed four thousand four billion time

892
00:55:47,010 --> 00:55:55,740
so if so I tested with rocket and

893
00:55:51,450 --> 00:55:59,730
without and and and if there is a bit

894
00:55:55,740 --> 00:56:04,620
you see that because I'm checking on the

895
00:55:59,730 --> 00:56:05,190
CPU and RAM so if it happens in in two

896
00:56:04,620 --> 00:56:06,839
minutes

897
00:56:05,190 --> 00:56:08,490
crashes in two minutes and I realize

898
00:56:06,840 --> 00:56:11,910
that it's not my fault but because we

899
00:56:08,490 --> 00:56:15,689
have to execute the same bit of code

900
00:56:11,910 --> 00:56:17,970
four billion times then and if I see I'm

901
00:56:15,690 --> 00:56:19,770
watching it but it's quite manual

902
00:56:17,970 --> 00:56:21,660
there's something that we keep doing I

903
00:56:19,770 --> 00:56:25,170
don't know if that's good enough for you

904
00:56:21,660 --> 00:56:27,098
or do you have a better suggestion but I

905
00:56:25,170 --> 00:56:31,400
know

906
00:56:27,099 --> 00:56:34,640
that you can do demos to see if you get

907
00:56:31,400 --> 00:56:38,119
out of this day those you should be your

908
00:56:34,640 --> 00:56:39,700
company sells called audits I'm just

909
00:56:38,119 --> 00:56:45,619
asking

910
00:56:39,700 --> 00:56:48,470
it's very good just to know but code is

911
00:56:45,619 --> 00:56:53,980
public so anybody can see or collaborate

912
00:56:48,470 --> 00:56:59,439
or analyze question suggestion let's

913
00:56:53,980 --> 00:56:59,440
come on take us down

914
00:57:01,640 --> 00:57:07,899
okay thanks a lot

915
00:57:04,090 --> 00:57:07,899
[Applause]

