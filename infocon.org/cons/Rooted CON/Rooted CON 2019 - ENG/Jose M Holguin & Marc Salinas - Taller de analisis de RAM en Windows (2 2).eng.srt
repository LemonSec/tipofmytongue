1
00:00:00,030 --> 00:00:19,800
we're significant was just a more defy

2
00:00:14,750 --> 00:00:26,220
the play the attack second part of this

3
00:00:19,800 --> 00:00:27,470
is the second part of can read the text

4
00:00:26,220 --> 00:00:32,278
[Music]

5
00:00:27,470 --> 00:00:42,769
identify the attackers IP it comes from

6
00:00:32,279 --> 00:00:42,770
to have traces of other attacks we have

7
00:00:45,890 --> 00:01:31,829
we would like to reframe what we said

8
00:00:49,469 --> 00:01:43,860
we're looking for the top of this as we

9
00:01:31,829 --> 00:01:50,220
saw before this process control log in

10
00:01:43,860 --> 00:01:53,850
tokens administrator can write this the

11
00:01:50,220 --> 00:01:58,380
exploiter or the attacker can because

12
00:01:53,850 --> 00:01:59,189
the exploit can get into it related to

13
00:01:58,380 --> 00:02:05,009
the stand

14
00:01:59,189 --> 00:02:08,000
attack here we see there is 480 someone

15
00:02:05,009 --> 00:02:11,540
listening which is abnormal

16
00:02:08,000 --> 00:02:16,220
and so within the memory and going to

17
00:02:11,540 --> 00:02:20,450
have achieved we have here a couple of

18
00:02:16,220 --> 00:02:26,840
items were to try to find something and

19
00:02:20,450 --> 00:02:31,910
it is like looking at this filters and

20
00:02:26,840 --> 00:02:35,270
we can go into world mentions everything

21
00:02:31,910 --> 00:02:38,870
that it's not IP internally the phone

22
00:02:35,270 --> 00:02:43,250
could be the attackers IP have faltered

23
00:02:38,870 --> 00:02:47,090
and we delete ten zero but you get only

24
00:02:43,250 --> 00:02:49,490
almost nothing but it was a good idea in

25
00:02:47,090 --> 00:02:54,160
this case had been locked and it

26
00:02:49,490 --> 00:02:54,160
possible trying to look at the process

27
00:02:58,750 --> 00:03:05,209
HTTP protocol or another product called

28
00:03:01,700 --> 00:03:08,359
with characteristics that do interest us

29
00:03:05,209 --> 00:03:11,959
what I do in those cases is first of all

30
00:03:08,360 --> 00:03:15,110
when I try to use grabs strings trying

31
00:03:11,959 --> 00:03:17,180
to look for a point without a memory we

32
00:03:15,110 --> 00:03:21,290
had certain things there but it's to

33
00:03:17,180 --> 00:03:26,500
bake to bake then where it is in this

34
00:03:21,290 --> 00:03:26,500
second part of challenge strings

35
00:03:40,730 --> 00:03:49,709
I'm not going to accept you're just too

36
00:03:43,470 --> 00:03:55,159
slow first thing I did was dump the

37
00:03:49,709 --> 00:04:00,569
process 300 which was given me and

38
00:03:55,159 --> 00:04:04,340
instead I use Robin which is part of the

39
00:04:00,569 --> 00:04:12,048
frame rather from reversing I used to I

40
00:04:04,340 --> 00:04:15,000
got lots of different strains UT 16 TCH

41
00:04:12,049 --> 00:04:22,108
so the most probable thing is to find

42
00:04:15,000 --> 00:04:36,840
this lunch grab and it should be as a

43
00:04:22,108 --> 00:04:40,770
result as a result when I got here I

44
00:04:36,840 --> 00:04:47,270
used to filter trying to see if I could

45
00:04:40,770 --> 00:04:51,000
find the IP there at this tag hey others

46
00:04:47,270 --> 00:04:54,750
HTTP is taxes and be everything that was

47
00:04:51,000 --> 00:04:57,419
related to traffic and that was or could

48
00:04:54,750 --> 00:05:03,080
contain an IP but I was lucky enough to

49
00:04:57,419 --> 00:05:03,080
find it whatsoever and take a look here

50
00:05:30,200 --> 00:05:35,140
you choose the process here

51
00:05:38,129 --> 00:05:47,050
what's left is to say which rule they

52
00:05:43,810 --> 00:05:51,310
should use this is a rule that's rather

53
00:05:47,050 --> 00:05:53,770
like the one they would grab we used but

54
00:05:51,310 --> 00:05:56,919
now we're using this module the

55
00:05:53,770 --> 00:06:05,979
volatility module and the module on the

56
00:05:56,919 --> 00:06:09,389
top of launching saying there is we can

57
00:06:05,979 --> 00:06:14,229
filter by process it is whether this PIV

58
00:06:09,389 --> 00:06:18,490
and so we have here numbers only

59
00:06:14,229 --> 00:06:22,330
I was lucky but if you're close to

60
00:06:18,490 --> 00:06:25,300
something you could have information you

61
00:06:22,330 --> 00:06:27,818
could try to unveil all the situation

62
00:06:25,300 --> 00:06:31,870
but this was another case once again I

63
00:06:27,819 --> 00:06:38,039
wasn't lucky poor chance not luck I

64
00:06:31,870 --> 00:06:46,870
wasn't lucky bad chance bad luck I

65
00:06:38,039 --> 00:06:48,969
followed this port 8080 this is related

66
00:06:46,870 --> 00:06:54,690
to this malicious attack

67
00:06:48,969 --> 00:06:59,860
so it's wrong do 32 it's an executable

68
00:06:54,690 --> 00:07:02,500
to low deal out it is like an exit the

69
00:06:59,860 --> 00:07:05,770
role is to explore functionality to

70
00:07:02,500 --> 00:07:08,229
contain elements and their works port

71
00:07:05,770 --> 00:07:13,960
functionalities for the developer not to

72
00:07:08,229 --> 00:07:16,690
implement this game this occasion of

73
00:07:13,960 --> 00:07:21,370
this binary you have this path towards

74
00:07:16,690 --> 00:07:23,919
one dll function you would like to use

75
00:07:21,370 --> 00:07:25,930
in Google numbered or not and then if

76
00:07:23,919 --> 00:07:29,799
you have argument space and so on so

77
00:07:25,930 --> 00:07:31,839
forth it could have a case of a room dll

78
00:07:29,800 --> 00:07:32,290
without any parameter but you could

79
00:07:31,839 --> 00:07:35,730
happen

80
00:07:32,290 --> 00:07:40,150
then we tried to get a hint that

81
00:07:35,730 --> 00:07:43,270
imagining there were introducing would

82
00:07:40,150 --> 00:07:46,359
have a bug in DLL formats and they were

83
00:07:43,270 --> 00:07:59,859
learning this imagine that we're the

84
00:07:46,360 --> 00:08:02,680
case okay you have our DLL no parameter

85
00:07:59,860 --> 00:08:06,570
there is no normal Balu can find any

86
00:08:02,680 --> 00:08:09,040
file than that so in other processes

87
00:08:06,570 --> 00:08:11,860
this is a way to see if they have

88
00:08:09,040 --> 00:08:14,080
parameters you could have a route DLL

89
00:08:11,860 --> 00:08:21,580
and so on so forth but that was not the

90
00:08:14,080 --> 00:08:24,539
case this time okay and then we'll

91
00:08:21,580 --> 00:08:24,539
discard this

92
00:08:33,809 --> 00:08:42,958
maybe if we see and want to read about

93
00:08:40,379 --> 00:08:46,620
the affero blue and the double pulsar

94
00:08:42,958 --> 00:08:50,069
once after the payloads I inject DLL in

95
00:08:46,620 --> 00:09:01,620
the process and then inject this who can

96
00:08:50,069 --> 00:09:04,769
find this loaded and the process window

97
00:09:01,620 --> 00:09:09,180
structure that's all identified first of

98
00:09:04,769 --> 00:09:14,180
all so room until exceed and then all

99
00:09:09,180 --> 00:09:14,180
the DLL is important and then in swaggy

100
00:09:16,939 --> 00:09:34,170
P IPL and so on and so forth

101
00:09:20,910 --> 00:09:36,540
and whatever or if there is a name that

102
00:09:34,170 --> 00:09:43,620
is not correct it looks like it's not

103
00:09:36,540 --> 00:09:47,629
correct you have it doesn't appear

104
00:09:43,620 --> 00:09:47,629
because been injected somewhere else

105
00:09:50,149 --> 00:09:54,509
structure windows because volatility

106
00:09:53,250 --> 00:09:58,889
find it

107
00:09:54,509 --> 00:10:02,490
so we discard here once again it's quite

108
00:09:58,889 --> 00:10:07,759
unclear we cannot start digging on that

109
00:10:02,490 --> 00:10:07,759
so after a while and then

110
00:10:11,020 --> 00:10:22,410
a lot of you know they didn't fall to

111
00:10:16,390 --> 00:10:27,010
the files we have Microsoft structures

112
00:10:22,410 --> 00:10:32,350
metadata each part of memory to know

113
00:10:27,010 --> 00:10:36,910
what is been used for chunk so why has

114
00:10:32,350 --> 00:10:40,000
been it it's been used know more about

115
00:10:36,910 --> 00:10:49,079
it with this command you see here on

116
00:10:40,000 --> 00:10:49,080
screen look at the command yeah yeah

117
00:10:49,170 --> 00:10:54,290
okay

118
00:10:51,450 --> 00:10:54,290
that's better

119
00:10:56,390 --> 00:11:00,399
what okay

120
00:11:03,010 --> 00:11:08,960
I'm sorry

121
00:11:05,820 --> 00:11:08,960
you see here

122
00:11:18,880 --> 00:11:27,250
right okay but inflow and the yet be

123
00:11:24,459 --> 00:11:31,930
their brothers payload of the process

124
00:11:27,250 --> 00:11:41,529
name info here and it's sort of a

125
00:11:31,930 --> 00:11:46,560
lot of noise let's scroll down

126
00:11:41,529 --> 00:11:46,560
I haven't controlled yet wait a second

127
00:11:51,009 --> 00:11:56,160
it's blocked it's block of these

128
00:12:00,250 --> 00:12:12,710
is section of memory within the process

129
00:12:05,770 --> 00:12:16,310
is the execution process the waterboxx

130
00:12:12,710 --> 00:12:19,360
is identifying the executor base will

131
00:12:16,310 --> 00:12:23,839
have the main binary we have the path

132
00:12:19,360 --> 00:12:36,380
this disk for boots we have lots of

133
00:12:23,840 --> 00:12:42,230
flags the time it is perform a commit to

134
00:12:36,380 --> 00:12:44,689
spy and we have seen it's not else where

135
00:12:42,230 --> 00:12:47,510
of course there's no pointing towards

136
00:12:44,690 --> 00:12:49,580
some dll could be a memory that is

137
00:12:47,510 --> 00:12:53,360
pointing to whatever father because my

138
00:12:49,580 --> 00:12:56,960
executable idea little structures seen

139
00:12:53,360 --> 00:13:04,970
anything we scroll down and we try to

140
00:12:56,960 --> 00:13:07,640
find there's only read only write read

141
00:13:04,970 --> 00:13:09,110
and write something that's striking

142
00:13:07,640 --> 00:13:12,350
something that attracts our attention

143
00:13:09,110 --> 00:13:18,830
look at this this is a memory zone where

144
00:13:12,350 --> 00:13:20,540
there's this section quite I'll show you

145
00:13:18,830 --> 00:13:22,880
the structure there's a common structure

146
00:13:20,540 --> 00:13:36,170
and a lot of numeration would have read

147
00:13:22,880 --> 00:13:38,000
write an executive the permits so normal

148
00:13:36,170 --> 00:13:45,439
thing is to find it here to find the

149
00:13:38,000 --> 00:13:50,110
stable region many pages it could be

150
00:13:45,440 --> 00:13:57,050
difficult to see it well of course so

151
00:13:50,110 --> 00:14:04,480
volatility is helping us the command to

152
00:13:57,050 --> 00:14:07,689
have introduced before finding normally

153
00:14:04,480 --> 00:14:18,620
is it you should permit pointed to us

154
00:14:07,690 --> 00:14:22,040
something that's consistent Microsoft

155
00:14:18,620 --> 00:14:25,040
software so for instance navigators are

156
00:14:22,040 --> 00:14:40,699
using this we see how the Firefox

157
00:14:25,040 --> 00:14:44,930
process page and this assembly some

158
00:14:40,700 --> 00:14:51,320
funny skips but we have here it's been

159
00:14:44,930 --> 00:15:02,089
aligned this tag is misaligned high but

160
00:14:51,320 --> 00:15:05,030
so I would browser now then Firefox

161
00:15:02,090 --> 00:15:26,470
again those were parts of his navigator

162
00:15:05,030 --> 00:15:33,530
of the bride browser Firefox and we just

163
00:15:26,470 --> 00:15:36,040
noise now that was striking and attract

164
00:15:33,530 --> 00:15:36,040
alright

165
00:15:36,590 --> 00:15:44,750
from the beginning they said four full

166
00:15:38,630 --> 00:15:47,870
code Semmy said saving in the context

167
00:15:44,750 --> 00:15:51,080
where it comes from if you want to save

168
00:15:47,870 --> 00:15:53,630
something it's going to say what it was

169
00:15:51,080 --> 00:15:54,980
before and then you can do something

170
00:15:53,630 --> 00:15:57,439
else and you can continue with the

171
00:15:54,980 --> 00:16:00,290
execution without breaking the smooth

172
00:15:57,440 --> 00:16:10,250
and simple process we do not see clearly

173
00:16:00,290 --> 00:16:15,380
what it does but since we expect it and

174
00:16:10,250 --> 00:16:22,750
this sort of part of logic is showing a

175
00:16:15,380 --> 00:16:22,750
good purpose so even though we could

176
00:16:23,750 --> 00:16:30,500
don't think engine try to include

177
00:16:27,019 --> 00:16:36,709
something wrong fine you see the bonfire

178
00:16:30,500 --> 00:16:43,240
we see it seems cumbersome complicated

179
00:16:36,709 --> 00:16:43,239
it's worthwhile because we know what

180
00:16:58,180 --> 00:17:11,780
make this worthwhile making the analysis

181
00:17:02,569 --> 00:17:30,559
of the dump with a part just to

182
00:17:11,780 --> 00:17:33,530
separately or you can have a full box

183
00:17:30,559 --> 00:17:44,899
injected somewhere else to get some

184
00:17:33,530 --> 00:17:46,908
hints something wrong was there it was

185
00:17:44,900 --> 00:17:48,789
the same position we were talking before

186
00:17:46,909 --> 00:17:57,130
so it's the same thing we had already

187
00:17:48,789 --> 00:18:05,809
detected before and so I have this line

188
00:17:57,130 --> 00:18:08,289
Linus device and what I do is I use this

189
00:18:05,809 --> 00:18:08,289
grader

190
00:18:12,570 --> 00:18:17,210
the memory analysis I got inflammation

191
00:18:20,690 --> 00:18:36,600
binary code that should be converted

192
00:18:23,490 --> 00:18:39,960
into Windows 7 32 bytes to show the

193
00:18:36,600 --> 00:18:53,280
truth telling the architecture is the

194
00:18:39,960 --> 00:18:59,640
one you see here was the file of the

195
00:18:53,280 --> 00:19:04,139
doms part that is making me Restless and

196
00:18:59,640 --> 00:19:06,960
let's try to look at this disassembly

197
00:19:04,140 --> 00:19:10,530
in a black screen you see it beautifully

198
00:19:06,960 --> 00:19:16,400
but here were the white no it's not

199
00:19:10,530 --> 00:19:16,399
unwise not even if Lucy and I'm going to

200
00:19:16,790 --> 00:19:31,110
black/white some black is okay you see

201
00:19:19,830 --> 00:19:42,090
what we knew before it is simply flag

202
00:19:31,110 --> 00:19:46,139
was control sometimes you find strength

203
00:19:42,090 --> 00:19:52,379
as a matter of fact if we go into the

204
00:19:46,140 --> 00:19:55,590
first there was FC and there is a call

205
00:19:52,380 --> 00:19:56,280
there is a function inside this go

206
00:19:55,590 --> 00:20:00,300
inside

207
00:19:56,280 --> 00:20:16,399
the first thing you will see is it this

208
00:20:00,300 --> 00:20:16,399
time the Raider is smart and the

209
00:20:19,210 --> 00:20:32,390
if it is as Ski Valley character

210
00:20:24,320 --> 00:20:38,270
identified as a 32 WSHH WSHH - there is

211
00:20:32,390 --> 00:20:43,190
a way to have traffic so we are the good

212
00:20:38,270 --> 00:20:49,670
try side of the track try so it is well

213
00:20:43,190 --> 00:21:01,580
fine worthwhile trying to analyze this

214
00:20:49,670 --> 00:21:05,180
in detail they shell code to execute

215
00:21:01,580 --> 00:21:09,169
code they have some mathematical

216
00:21:05,180 --> 00:21:13,850
calculations from the hash I wonder

217
00:21:09,170 --> 00:21:16,190
executed Joseph executed then I can see

218
00:21:13,850 --> 00:21:18,770
it and I know what's going to happen if

219
00:21:16,190 --> 00:21:35,270
I'm executing this and some of the funny

220
00:21:18,770 --> 00:21:37,790
things are executed well I translated

221
00:21:35,270 --> 00:21:52,730
into the assembly code as it shows

222
00:21:37,790 --> 00:21:55,159
before everywhere and it is not such a

223
00:21:52,730 --> 00:21:59,140
situation that I can double click an

224
00:21:55,160 --> 00:22:03,080
executed this what I did then was I

225
00:21:59,140 --> 00:22:10,220
passed my values into this array each

226
00:22:03,080 --> 00:22:14,629
byte was o X bytes and then we have coma

227
00:22:10,220 --> 00:22:18,110
we have three lines here the first line

228
00:22:14,630 --> 00:22:22,400
you see here is array you have here you

229
00:22:18,110 --> 00:22:24,479
see here the bite has a value of this

230
00:22:22,400 --> 00:22:27,330
array

231
00:22:24,480 --> 00:22:28,169
you can read this is the time it's a

232
00:22:27,330 --> 00:22:30,840
shellcode

233
00:22:28,169 --> 00:22:34,650
I told it that what I did is I have

234
00:22:30,840 --> 00:22:38,010
imported from Windows to use this and I

235
00:22:34,650 --> 00:22:44,160
go to functions and three instructions

236
00:22:38,010 --> 00:22:46,260
the first one that is my reservation of

237
00:22:44,160 --> 00:22:48,030
a memory zone the process what I do is

238
00:22:46,260 --> 00:22:51,629
okay you make a reservation of memory

239
00:22:48,030 --> 00:22:54,240
zone somewhere and you give read write

240
00:22:51,630 --> 00:23:01,590
execute permits I'm trying to imitate

241
00:22:54,240 --> 00:23:04,290
the context that was executed before I

242
00:23:01,590 --> 00:23:07,730
can read execute and read what there's

243
00:23:04,290 --> 00:23:10,770
written down I can copy in that memory

244
00:23:07,730 --> 00:23:13,710
the what I've just converted into birds

245
00:23:10,770 --> 00:23:15,960
and the much that I want to analyze that

246
00:23:13,710 --> 00:23:17,790
I copy on the memory where you want to

247
00:23:15,960 --> 00:23:19,679
execute I want to analyze that cetera

248
00:23:17,790 --> 00:23:23,040
and finally this can be done in the 32

249
00:23:19,679 --> 00:23:26,429
bits and it's not anything with 64 down

250
00:23:23,040 --> 00:23:29,129
slash don't flash that you keys well use

251
00:23:26,429 --> 00:23:31,500
the formula here on the screen and you

252
00:23:29,130 --> 00:23:34,140
could put an assembly code in your

253
00:23:31,500 --> 00:23:37,169
program it's just a few times when it's

254
00:23:34,140 --> 00:23:38,730
useful but this is one and you can take

255
00:23:37,169 --> 00:23:42,230
advantage of some variables that you can

256
00:23:38,730 --> 00:23:45,030
have in your code so that's amazing

257
00:23:42,230 --> 00:23:46,590
pointer here where I have the memory

258
00:23:45,030 --> 00:23:49,500
very reserved where I put the Southcoast

259
00:23:46,590 --> 00:23:53,340
so I moved I'll move that pointer to

260
00:23:49,500 --> 00:23:55,620
that to register I make a push to put it

261
00:23:53,340 --> 00:23:56,870
into the stack to be the first thing

262
00:23:55,620 --> 00:24:00,439
that we have into the stack because

263
00:23:56,870 --> 00:24:03,899
after that I'll make a red a red

264
00:24:00,440 --> 00:24:05,429
absolute at what I have first of all in

265
00:24:03,900 --> 00:24:09,330
the stack and it will execute it from

266
00:24:05,429 --> 00:24:15,690
there so that's it these are two lines

267
00:24:09,330 --> 00:24:19,049
cellco and this logical 64 bits well I

268
00:24:15,690 --> 00:24:20,340
couldn't make this work I've been able

269
00:24:19,049 --> 00:24:21,780
to execute a little bit more complicated

270
00:24:20,340 --> 00:24:22,889
assemblers you have to include some

271
00:24:21,780 --> 00:24:26,809
other things when in this case that it

272
00:24:22,890 --> 00:24:26,809
was 32 it was perfect it was ideal

273
00:24:28,380 --> 00:24:39,929
I only intend to project those at sea an

274
00:24:35,730 --> 00:24:44,490
attempt of compilation well I have this

275
00:24:39,929 --> 00:24:54,690
executable so let's open this to see

276
00:24:44,490 --> 00:25:08,270
what's gonna happen where are you at

277
00:24:54,690 --> 00:25:08,270
speed line man okay cool

278
00:25:13,130 --> 00:25:20,780
Molly okay so this is what we can find

279
00:25:18,620 --> 00:25:24,979
when we compile there's a logic that

280
00:25:20,780 --> 00:25:30,460
have just shown you so if I click on

281
00:25:24,980 --> 00:25:38,780
execute the fan will requests for access

282
00:25:30,460 --> 00:25:41,720
so we're doing a good job and here we

283
00:25:38,780 --> 00:25:48,950
have the process so let's see it's

284
00:25:41,720 --> 00:25:52,730
memory okay so these are the virtual

285
00:25:48,950 --> 00:25:54,350
address descriptors the VADs v.a.t.s the

286
00:25:52,730 --> 00:25:56,870
blocks that we were seeing with a via

287
00:25:54,350 --> 00:26:01,219
the volatility bad bad list we have the

288
00:25:56,870 --> 00:26:03,500
old dll's here the pv tape these are the

289
00:26:01,220 --> 00:26:07,039
process structures whether the threads

290
00:26:03,500 --> 00:26:10,760
information and the process itself here

291
00:26:07,039 --> 00:26:13,039
we have our exit when you make a program

292
00:26:10,760 --> 00:26:14,809
you are rebuilding some things and

293
00:26:13,039 --> 00:26:16,850
basically you're getting the the

294
00:26:14,809 --> 00:26:18,830
difference in program and Wrentham is

295
00:26:16,850 --> 00:26:20,418
that the program uploads the Excel and

296
00:26:18,830 --> 00:26:21,889
the mandem uploads everything that we've

297
00:26:20,419 --> 00:26:27,830
seen this list there's a bunch of

298
00:26:21,890 --> 00:26:33,409
information tape etc and here we have a

299
00:26:27,830 --> 00:26:35,870
memory zone we click on execute again

300
00:26:33,409 --> 00:26:39,679
execute again it's quite similar to

301
00:26:35,870 --> 00:26:46,010
South code maybe it's this apart from

302
00:26:39,679 --> 00:26:48,830
this if we move to network exactly yeah

303
00:26:46,010 --> 00:26:50,030
we have it just there it's not grandi a

304
00:26:48,830 --> 00:26:51,710
little but you have that logic that we

305
00:26:50,030 --> 00:26:54,590
wanted to see to see what's going on -

306
00:26:51,710 --> 00:26:56,960
what's was doing in the system using the

307
00:26:54,590 --> 00:26:59,240
8080 port will end up in a center

308
00:26:56,960 --> 00:27:01,309
assembly equally but we'll see the

309
00:26:59,240 --> 00:27:03,429
cartridge what's going on and we can see

310
00:27:01,309 --> 00:27:12,309
the memory you can see many more things

311
00:27:03,429 --> 00:27:12,309
so we're going to kill the process here

312
00:27:17,970 --> 00:27:28,000
I'm going to use some tools that I have

313
00:27:22,450 --> 00:27:30,309
to do this I have radare I have many

314
00:27:28,000 --> 00:27:35,200
tools this was a comfortable but well

315
00:27:30,309 --> 00:27:37,928
they're almost there almost the same so

316
00:27:35,200 --> 00:27:40,090
if I move a little bit faster here we

317
00:27:37,929 --> 00:27:42,370
have the opcode what the CPU is

318
00:27:40,090 --> 00:27:47,049
executing on the right you can see the

319
00:27:42,370 --> 00:27:48,879
registers and eggs etc and here we can

320
00:27:47,049 --> 00:27:50,679
see the stack at the bottom of the page

321
00:27:48,880 --> 00:27:52,779
we were pushing things in we're taking

322
00:27:50,679 --> 00:27:55,539
things out to take advantage of them and

323
00:27:52,779 --> 00:27:58,330
here 64 vfq when you put an executable

324
00:27:55,539 --> 00:28:00,639
it says ntdll before everything's

325
00:27:58,330 --> 00:28:01,990
uploaded it's like in an initial moment

326
00:28:00,639 --> 00:28:04,029
of the extraction of that binary it has

327
00:28:01,990 --> 00:28:07,510
not been uploaded the access has not

328
00:28:04,029 --> 00:28:09,970
been uploaded if you click it once it

329
00:28:07,510 --> 00:28:11,590
takes you to the process entry to the

330
00:28:09,970 --> 00:28:13,090
first up code that is executed in your

331
00:28:11,590 --> 00:28:15,129
excel file but what happens that we've

332
00:28:13,090 --> 00:28:16,629
component with Visual Studio and it has

333
00:28:15,130 --> 00:28:19,360
issued many things that have nothing to

334
00:28:16,630 --> 00:28:22,539
do with our logic and we're far away

335
00:28:19,360 --> 00:28:24,250
from what we want to have a look at I

336
00:28:22,539 --> 00:28:28,059
know that the first thing that I do my

337
00:28:24,250 --> 00:28:29,769
code is to called virtual Alec so what I

338
00:28:28,059 --> 00:28:36,789
like to do to get to logy that

339
00:28:29,769 --> 00:28:38,799
interested in look for virtual Alec I

340
00:28:36,789 --> 00:28:40,600
know that it's in Cranford too but if

341
00:28:38,799 --> 00:28:43,649
you put in any app in Google you see

342
00:28:40,600 --> 00:28:43,649
that DLL has it

343
00:28:51,790 --> 00:29:16,090
just a second I mean the feather perfect

344
00:29:14,650 --> 00:29:18,970
okay perfect

345
00:29:16,090 --> 00:29:20,830
so know what's gonna happen is that when

346
00:29:18,970 --> 00:29:22,540
my executable called special Allen is

347
00:29:20,830 --> 00:29:24,280
the first thing that it will do it's the

348
00:29:22,540 --> 00:29:30,810
first API that I've called it will stop

349
00:29:24,280 --> 00:29:34,300
the execution so we let it do its stuff

350
00:29:30,810 --> 00:29:36,490
okay and it has not stopped at the first

351
00:29:34,300 --> 00:29:37,750
filter log but in the DLL it's where we

352
00:29:36,490 --> 00:29:40,390
have the break because in our executable

353
00:29:37,750 --> 00:29:42,520
we didn't know where it was but in the

354
00:29:40,390 --> 00:29:44,740
stack as it comes from our executable I

355
00:29:42,520 --> 00:29:46,000
just make it call and and the stack

356
00:29:44,740 --> 00:29:48,550
appears where it comes from it comes

357
00:29:46,000 --> 00:29:53,340
from project to our executable I mean we

358
00:29:48,550 --> 00:29:53,340
push enter we scroll up a little bit

359
00:29:56,520 --> 00:30:04,500
okay so this is beginning of a function

360
00:30:00,980 --> 00:30:06,960
here we have our Vil travelogue Visual

361
00:30:04,500 --> 00:30:11,520
Studio has converted our remain coming

362
00:30:06,960 --> 00:30:12,960
in many quite ugly coders but a little

363
00:30:11,520 --> 00:30:16,309
bit down we can say that their

364
00:30:12,960 --> 00:30:18,900
supporters what a variable looks like -

365
00:30:16,309 --> 00:30:21,540
it makes a push the ax and it makes a

366
00:30:18,900 --> 00:30:24,210
return these things have been been

367
00:30:21,540 --> 00:30:26,970
employed by us and here it's what were

368
00:30:24,210 --> 00:30:32,309
we interested in starts so you put a

369
00:30:26,970 --> 00:30:34,380
breakpoint for some reason I can't use

370
00:30:32,309 --> 00:30:38,790
the the the keyboard this is much faster

371
00:30:34,380 --> 00:30:42,059
and we let it execute okay so after just

372
00:30:38,790 --> 00:30:44,220
up to this if you actually it would jump

373
00:30:42,059 --> 00:30:45,990
to this memory zone where we have

374
00:30:44,220 --> 00:30:47,700
written our code and we should be able

375
00:30:45,990 --> 00:30:50,700
to see what's going on so we make

376
00:30:47,700 --> 00:30:53,880
history inside and we're familiar with

377
00:30:50,700 --> 00:30:55,980
us with this right CLD the code to the

378
00:30:53,880 --> 00:30:58,050
first function the push up with the one

379
00:30:55,980 --> 00:31:00,150
that we've kept the context and these

380
00:30:58,050 --> 00:31:05,370
complicated things that we were seeing

381
00:31:00,150 --> 00:31:08,429
we make two steps and again we can see

382
00:31:05,370 --> 00:31:14,820
the these characters that maybe there

383
00:31:08,429 --> 00:31:19,140
were a string with a DW s 32 and all the

384
00:31:14,820 --> 00:31:23,820
logic I don't like this very much if I

385
00:31:19,140 --> 00:31:25,920
if we see it sa graph it's not very

386
00:31:23,820 --> 00:31:27,629
helpful but it's clearer for me so what

387
00:31:25,920 --> 00:31:31,790
I'm going to do is well I know that the

388
00:31:27,630 --> 00:31:31,790
first call if it makes steps

389
00:31:33,120 --> 00:31:38,449
look at the funeral Gators here this

390
00:31:35,669 --> 00:31:40,919
function what it has done is a pop VAP

391
00:31:38,450 --> 00:31:43,769
to see what did it come from from the

392
00:31:40,919 --> 00:31:45,360
coal someone has made this call the

393
00:31:43,769 --> 00:31:48,029
address that I haven't did it stack is

394
00:31:45,360 --> 00:31:52,678
what it comes and immediately after I

395
00:31:48,029 --> 00:31:54,690
put into the VP register so it has taken

396
00:31:52,679 --> 00:31:57,179
out what comes after that it has made

397
00:31:54,690 --> 00:31:59,340
many pushes and 32-bits these are the

398
00:31:57,179 --> 00:32:01,230
parameters that we're going to send but

399
00:31:59,340 --> 00:32:02,490
just before I call these are the

400
00:32:01,230 --> 00:32:04,620
parameters for this function so there

401
00:32:02,490 --> 00:32:07,740
are four parameters this still has two

402
00:32:04,620 --> 00:32:11,518
in fact it is here it is filled the

403
00:32:07,740 --> 00:32:13,830
string with a DLL name and calls EVP it

404
00:32:11,519 --> 00:32:15,419
makes a call to just after the previous

405
00:32:13,830 --> 00:32:17,820
call is quite typical in cell phones

406
00:32:15,419 --> 00:32:20,820
never normal in a typical logic

407
00:32:17,820 --> 00:32:23,450
execution this jumps with : Chalmers so

408
00:32:20,820 --> 00:32:23,450
let's get in

409
00:32:27,470 --> 00:32:30,220
oh gosh

410
00:32:33,669 --> 00:32:39,940
okay

411
00:32:36,100 --> 00:32:43,840
right yes so now we are down here where

412
00:32:39,940 --> 00:32:45,910
you can find that VIP UNAMID CLG this

413
00:32:43,840 --> 00:32:49,889
made the call and with a a VP call is

414
00:32:45,910 --> 00:32:57,310
jumped just after but this function is

415
00:32:49,890 --> 00:32:59,620
is terrible this is it doesn't know

416
00:32:57,310 --> 00:33:01,690
where any API is it wants to make things

417
00:32:59,620 --> 00:33:04,629
and the best thing to do that is to call

418
00:33:01,690 --> 00:33:06,790
create process create file API etc so

419
00:33:04,630 --> 00:33:10,750
what they usually do stew solve them for

420
00:33:06,790 --> 00:33:13,470
that what they do is they pass on some

421
00:33:10,750 --> 00:33:15,880
data name or whatever some mathematical

422
00:33:13,470 --> 00:33:18,010
calculations and they find that API to

423
00:33:15,880 --> 00:33:19,600
be able to code so this is probably good

424
00:33:18,010 --> 00:33:21,220
logic and normally it doesn't have any

425
00:33:19,600 --> 00:33:26,409
symbol any element that helps you know

426
00:33:21,220 --> 00:33:28,960
what's going on but normally at the end

427
00:33:26,410 --> 00:33:30,460
of a function we have a read so when a

428
00:33:28,960 --> 00:33:33,190
function is over the last code is

429
00:33:30,460 --> 00:33:35,110
usually a read off return to go back to

430
00:33:33,190 --> 00:33:37,060
logic that you were doing before so you

431
00:33:35,110 --> 00:33:41,790
continue with your program in this case

432
00:33:37,060 --> 00:33:45,690
if we move to the end we find a jump so

433
00:33:41,790 --> 00:33:45,690
let's see what's going on here

434
00:33:50,080 --> 00:33:55,699
manufactory I mean Telep we've put a

435
00:33:53,869 --> 00:33:57,769
breakpoint in the jump we've let it

436
00:33:55,700 --> 00:34:00,409
execute until up to there and it's

437
00:33:57,769 --> 00:34:02,359
jumping to it and yes it has a solved

438
00:34:00,409 --> 00:34:06,559
API in the librarians going to use it

439
00:34:02,359 --> 00:34:08,719
and if we keep clicking on it on it we

440
00:34:06,559 --> 00:34:10,790
see that just after that we don't care

441
00:34:08,719 --> 00:34:12,379
about what it it is doing we have found

442
00:34:10,790 --> 00:34:14,480
a function that solves API so we are

443
00:34:12,379 --> 00:34:15,949
able to have an intuition of what this

444
00:34:14,480 --> 00:34:18,379
logic is doing because of the APS that

445
00:34:15,949 --> 00:34:20,149
it calls how it's making a WS a startup

446
00:34:18,379 --> 00:34:23,629
if we look on Google we see that it is

447
00:34:20,149 --> 00:34:26,839
an initialization of the logic that you

448
00:34:23,629 --> 00:34:30,049
need to make a pause to to connect to a

449
00:34:26,839 --> 00:34:33,199
port etc so it prepares a socket it

450
00:34:30,049 --> 00:34:36,710
makes a beam it puts options into the

451
00:34:33,199 --> 00:34:38,928
socket a listen and a W as except if you

452
00:34:36,710 --> 00:34:40,970
see it says pause because now it's here

453
00:34:38,929 --> 00:34:42,589
and it's waiting for me to click on play

454
00:34:40,969 --> 00:34:45,379
to continue with the logic if I click on

455
00:34:42,589 --> 00:34:47,899
it again it keeps on lesson executing it

456
00:34:45,379 --> 00:34:50,418
keeps on executing so after the WUSA

457
00:34:47,899 --> 00:34:52,699
said it doesn't come back here it's

458
00:34:50,418 --> 00:34:57,770
student something and what it is doing

459
00:34:52,699 --> 00:34:59,990
if we move here if we go here it's to

460
00:34:57,770 --> 00:35:01,040
listen at the 8080 port it is then

461
00:34:59,990 --> 00:35:02,930
everything that he needed to prepare

462
00:35:01,040 --> 00:35:06,109
that port and it's listening so here we

463
00:35:02,930 --> 00:35:10,308
can see what happens when the bad guy

464
00:35:06,109 --> 00:35:12,380
and connects so let's try to move on

465
00:35:10,309 --> 00:35:15,470
this way to see if we can have something

466
00:35:12,380 --> 00:35:20,079
in return or whatever so if we if we

467
00:35:15,470 --> 00:35:20,078
open it if it opens okay perfect

468
00:35:26,290 --> 00:35:35,890
money okay so now I've been very fast

469
00:35:31,480 --> 00:35:37,300
keeping some things and following the

470
00:35:35,890 --> 00:35:39,129
thread that I follow when I wasn't the

471
00:35:37,300 --> 00:35:40,450
good way I'm trying to see what I was

472
00:35:39,130 --> 00:35:43,510
doing looking for something trusting

473
00:35:40,450 --> 00:35:46,270
here but I can tell you that there's

474
00:35:43,510 --> 00:35:47,620
nothing special relevant up to here so

475
00:35:46,270 --> 00:35:51,280
now we connect to this port from another

476
00:35:47,620 --> 00:36:02,140
machine and it says refuse it's refusing

477
00:35:51,280 --> 00:36:05,020
us for some reasons and in fact she was

478
00:36:02,140 --> 00:36:07,359
come with leaven accion if you look for

479
00:36:05,020 --> 00:36:09,700
the connection here we can see a request

480
00:36:07,360 --> 00:36:11,440
the one that I've asked and it's

481
00:36:09,700 --> 00:36:16,680
automatic reset that says forget it I'm

482
00:36:11,440 --> 00:36:24,820
not interested in that so I'm going to

483
00:36:16,680 --> 00:36:28,149
move here so we are at this point we are

484
00:36:24,820 --> 00:36:30,670
able to execute we see what it does the

485
00:36:28,150 --> 00:36:32,410
port is listening but it rejects us it

486
00:36:30,670 --> 00:36:34,060
refuses it doesn't like what we're doing

487
00:36:32,410 --> 00:36:35,620
the only information that it has from us

488
00:36:34,060 --> 00:36:37,210
is the IP because there's a nun port and

489
00:36:35,620 --> 00:36:40,150
we haven't passed on anything else so

490
00:36:37,210 --> 00:36:42,130
what doesn't what what's a bad thing

491
00:36:40,150 --> 00:36:46,870
here maybe the IP you will see how the

492
00:36:42,130 --> 00:36:48,880
WS a see that that worm that is the X

493
00:36:46,870 --> 00:36:53,680
was we've executed it can receive up to

494
00:36:48,880 --> 00:36:57,430
5 para me shoes these as MSDN when I

495
00:36:53,680 --> 00:37:01,180
want to do what an IP a API does it's an

496
00:36:57,430 --> 00:37:02,290
I use this command when we can see that

497
00:37:01,180 --> 00:37:05,049
this is socket information on the

498
00:37:02,290 --> 00:37:07,150
sockets my third one it has more

499
00:37:05,050 --> 00:37:09,340
facility by the two last things one is

500
00:37:07,150 --> 00:37:11,560
the condition that if you read it it

501
00:37:09,340 --> 00:37:12,910
says that even make an accessible reject

502
00:37:11,560 --> 00:37:15,730
of the request depending on the

503
00:37:12,910 --> 00:37:18,009
condition it looks good and the other

504
00:37:15,730 --> 00:37:19,600
thing is a callback maybe it's function

505
00:37:18,010 --> 00:37:20,500
refuses later on it seems that it

506
00:37:19,600 --> 00:37:25,180
doesn't but maybe it could be

507
00:37:20,500 --> 00:37:26,260
interesting when it's good who is going

508
00:37:25,180 --> 00:37:28,540
to have this control when the connection

509
00:37:26,260 --> 00:37:31,090
is over if we execute the program again

510
00:37:28,540 --> 00:37:34,210
I'm going to go a little bit fast if we

511
00:37:31,090 --> 00:37:35,470
execute it again before the WS accepts

512
00:37:34,210 --> 00:37:38,730
that call to the API

513
00:37:35,470 --> 00:37:38,730
we'll be able to see

514
00:37:41,190 --> 00:37:50,470
no I won't take the risk here we can see

515
00:37:45,780 --> 00:37:52,330
that it's just going to the function so

516
00:37:50,470 --> 00:37:54,850
this is the first parameter this is a

517
00:37:52,330 --> 00:37:56,350
handler to the socket and all the rests

518
00:37:54,850 --> 00:38:00,670
are in zero because they were optional

519
00:37:56,350 --> 00:38:02,290
so it nothing happens and here you can

520
00:38:00,670 --> 00:38:04,570
see in the trace and it's an address in

521
00:38:02,290 --> 00:38:06,580
sight it's it's logic and if we move

522
00:38:04,570 --> 00:38:07,990
that back here we see that it has this

523
00:38:06,580 --> 00:38:09,460
socket and the other thing that has gone

524
00:38:07,990 --> 00:38:12,250
through some issues has been the

525
00:38:09,460 --> 00:38:15,040
condition one so that's perfect let's

526
00:38:12,250 --> 00:38:17,920
see what that condition does we stopped

527
00:38:15,040 --> 00:38:20,020
at that point it was the side that that

528
00:38:17,920 --> 00:38:21,460
was going to go through the verification

529
00:38:20,020 --> 00:38:22,990
process and it had to do with the selfi

530
00:38:21,460 --> 00:38:26,080
so let's see what's going on here on the

531
00:38:22,990 --> 00:38:28,120
right we see that we we we can see what

532
00:38:26,080 --> 00:38:30,400
we have in graphic node if we move there

533
00:38:28,120 --> 00:38:32,200
and we see that our the different

534
00:38:30,400 --> 00:38:35,830
pointers it's getting different things

535
00:38:32,200 --> 00:38:39,960
it compares it with in hexadecimal value

536
00:38:35,830 --> 00:38:42,549
and depending on the result if that

537
00:38:39,960 --> 00:38:44,080
subtraction is zero it makes something

538
00:38:42,550 --> 00:38:47,140
and if doesn't it does a different thing

539
00:38:44,080 --> 00:38:49,299
so if I get this this function should

540
00:38:47,140 --> 00:38:52,629
give zero but well it should give one

541
00:38:49,300 --> 00:38:55,450
but if I get something else you would

542
00:38:52,630 --> 00:38:57,670
give something else back so if we make a

543
00:38:55,450 --> 00:39:00,339
net cap again when it's listening and I

544
00:38:57,670 --> 00:39:03,610
put a breakpoint and that's a logic area

545
00:39:00,340 --> 00:39:05,920
where it's going to make the

546
00:39:03,610 --> 00:39:07,660
verification process just before it

547
00:39:05,920 --> 00:39:08,620
doesn't we'll take control and we'll be

548
00:39:07,660 --> 00:39:11,319
able to see what's there

549
00:39:08,620 --> 00:39:14,230
and what is subtracting it what are we

550
00:39:11,320 --> 00:39:16,330
sending that that is causing that we do

551
00:39:14,230 --> 00:39:17,290
not have zero and because of this it

552
00:39:16,330 --> 00:39:19,900
doesn't like you do it but the break

553
00:39:17,290 --> 00:39:21,970
point would put a make a break up and we

554
00:39:19,900 --> 00:39:24,520
jump directly to this abstraction

555
00:39:21,970 --> 00:39:27,100
I'm not interested on the memory areas

556
00:39:24,520 --> 00:39:30,580
from the structures where the ax

557
00:39:27,100 --> 00:39:39,730
movements were taking place and we had a

558
00:39:30,580 --> 00:39:40,840
0:14 well we see the code here this had

559
00:39:39,730 --> 00:39:45,640
to be an IP because there's no

560
00:39:40,840 --> 00:39:47,440
information that we had so I to world

561
00:39:45,640 --> 00:39:50,279
will have in ax

562
00:39:47,440 --> 00:39:52,660
I chucked it because that can't be and

563
00:39:50,280 --> 00:39:54,849
well I tried it so to be honest had

564
00:39:52,660 --> 00:39:56,730
tried the student to become an IP moving

565
00:39:54,849 --> 00:39:59,950
to decimal but of course it didn't work

566
00:39:56,730 --> 00:40:04,960
chunking it we have four chunks and the

567
00:39:59,950 --> 00:40:07,569
result of chunking it it was 192 160 271

568
00:40:04,960 --> 00:40:09,160
that was the IP of my Linux device that

569
00:40:07,569 --> 00:40:11,308
it was using there it was perfect its

570
00:40:09,160 --> 00:40:14,890
cover my IP with something with what

571
00:40:11,309 --> 00:40:18,400
when we do the same with the hex decimal

572
00:40:14,890 --> 00:40:25,328
that I was comparing I gave this I got

573
00:40:18,400 --> 00:40:27,160
this the solution at length like an IP

574
00:40:25,329 --> 00:40:28,390
it's comparing to my app if and it

575
00:40:27,160 --> 00:40:30,038
doesn't like it it won't continue the

576
00:40:28,390 --> 00:40:37,390
execution finally it seems that we have

577
00:40:30,039 --> 00:40:40,210
an IP my I put this IP to my Linux to

578
00:40:37,390 --> 00:40:41,950
device and I include the IP so that both

579
00:40:40,210 --> 00:40:44,530
machines can talk to each other and I

580
00:40:41,950 --> 00:40:46,390
was able to send whatever I wanted to

581
00:40:44,530 --> 00:40:48,339
send so after reaching this point the

582
00:40:46,390 --> 00:40:49,990
first thing that it did was to go to the

583
00:40:48,339 --> 00:40:54,549
points in the platform I took the five

584
00:40:49,990 --> 00:40:56,770
out and yes I had an IP I had got an IP

585
00:40:54,549 --> 00:40:59,579
you know in a real case I would be able

586
00:40:56,770 --> 00:41:03,130
to have a look at the ideas and logs

587
00:40:59,579 --> 00:41:05,529
what I have in terms of information

588
00:41:03,130 --> 00:41:07,029
network information to see the

589
00:41:05,529 --> 00:41:08,559
interaction with another team another

590
00:41:07,029 --> 00:41:10,750
equipment sorry because it will have an

591
00:41:08,559 --> 00:41:13,779
element that I can use to keep on

592
00:41:10,750 --> 00:41:15,549
searching I haven't got anything at any

593
00:41:13,779 --> 00:41:18,549
other step because it was that it

594
00:41:15,549 --> 00:41:20,259
hexadecimal format since in a Cell kind

595
00:41:18,549 --> 00:41:21,400
of chunk of memory could look for

596
00:41:20,260 --> 00:41:23,410
connections because there was nothing

597
00:41:21,400 --> 00:41:25,900
there so the way of reaching here the

598
00:41:23,410 --> 00:41:32,140
only way that I can think of is to make

599
00:41:25,900 --> 00:41:34,589
this reverse anyone and well-proven

600
00:41:32,140 --> 00:41:34,589
solves

601
00:41:38,200 --> 00:41:42,558
muchas gracias

602
00:41:39,859 --> 00:41:44,500
Denise preguntas so thank you very much

603
00:41:42,559 --> 00:41:48,200
do you have any questions the mics are

604
00:41:44,500 --> 00:41:51,109
here on the first row so please feel

605
00:41:48,200 --> 00:41:51,529
free Bobby's intently looking I don't

606
00:41:51,109 --> 00:41:55,240
know

607
00:41:51,529 --> 00:41:55,240
you understood what they've done right

608
00:41:55,900 --> 00:42:00,390
okay so thank you very much cheers a big

609
00:41:58,880 --> 00:42:03,460
round of applause please

610
00:42:00,390 --> 00:42:03,460
[Applause]

