1
00:00:00,000 --> 00:00:20,250
[Music]

2
00:00:16,070 --> 00:00:22,590
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> Hinault is a freelance journalist</font>

3
00:00:20,250 --> 00:00:24,869
and<font color="#E5E5E5"> security researcher sometimes he</font>

4
00:00:22,590 --> 00:00:27,570
tricks<font color="#E5E5E5"> semantics into getting their math</font>

5
00:00:24,869 --> 00:00:30,359
wrong with regards to TLS keys and

6
00:00:27,570 --> 00:00:32,850
otherwise he<font color="#CCCCCC"> just throws random crap at</font>

7
00:00:30,359 --> 00:00:34,530
freely<font color="#CCCCCC"> problem so software</font><font color="#E5E5E5"> as part of</font>

8
00:00:32,850 --> 00:00:44,390
the<font color="#CCCCCC"> fuzzing</font><font color="#E5E5E5"> project so</font><font color="#CCCCCC"> please welcome</font>

9
00:00:34,530 --> 00:00:48,030
<font color="#E5E5E5">Hannah yeah hello</font><font color="#CCCCCC"> so today I want to</font>

10
00:00:44,390 --> 00:00:50,280
present some methods to<font color="#E5E5E5"> you how you can</font>

11
00:00:48,030 --> 00:00:53,219
improve<font color="#CCCCCC"> your software if you write</font>

12
00:00:50,280 --> 00:00:54,989
<font color="#CCCCCC">software and like</font><font color="#E5E5E5"> introduce the little</font>

13
00:00:53,219 --> 00:00:58,440
project I have<font color="#CCCCCC"> been running</font><font color="#E5E5E5"> for a few</font>

14
00:00:54,989 --> 00:01:01,140
years<font color="#E5E5E5"> so</font><font color="#CCCCCC"> I run the</font><font color="#E5E5E5"> fuzzing project which</font>

15
00:00:58,440 --> 00:01:02,670
is<font color="#E5E5E5"> also supported by the Linux</font>

16
00:01:01,140 --> 00:01:06,510
Foundation score infrastructure

17
00:01:02,670 --> 00:01:09,030
initiative<font color="#CCCCCC"> yeah and I generally</font><font color="#E5E5E5"> try to</font>

18
00:01:06,510 --> 00:01:12,750
improve the security<font color="#E5E5E5"> of free and</font><font color="#CCCCCC"> open</font>

19
00:01:09,030 --> 00:01:14,880
<font color="#CCCCCC">source software</font><font color="#E5E5E5"> layer and I occasionally</font>

20
00:01:12,750 --> 00:01:18,060
find these box where I think<font color="#CCCCCC"> like</font><font color="#E5E5E5"> these</font>

21
00:01:14,880 --> 00:01:21,420
<font color="#E5E5E5">box should really shouldn't happen</font><font color="#CCCCCC"> so</font>

22
00:01:18,060 --> 00:01:24,330
this is this was back in keep<font color="#CCCCCC"> us XE so</font>

23
00:01:21,420 --> 00:01:26,330
which is like the standard<font color="#E5E5E5"> free software</font>

24
00:01:24,330 --> 00:01:31,110
password manager people use these days

25
00:01:26,330 --> 00:01:34,079
<font color="#E5E5E5">so there was a string of 48 bytes and</font>

26
00:01:31,110 --> 00:01:41,479
that was<font color="#E5E5E5"> stored in that variable so does</font>

27
00:01:34,079 --> 00:01:41,479
<font color="#E5E5E5">anyone see anything wrong with</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> no</font>

28
00:01:43,189 --> 00:01:49,320
<font color="#E5E5E5">zero terminator I heard it yeah so the</font>

29
00:01:46,680 --> 00:01:51,270
thing<font color="#CCCCCC"> is if</font><font color="#E5E5E5"> you have a string in C</font><font color="#CCCCCC"> its 0</font>

30
00:01:49,320 --> 00:01:54,240
terminated it means it<font color="#E5E5E5"> has a</font><font color="#CCCCCC"> zero</font><font color="#E5E5E5"> byte</font>

31
00:01:51,270 --> 00:01:56,490
at the end<font color="#E5E5E5"> and this</font><font color="#CCCCCC"> 0 byte at the end</font>

32
00:01:54,240 --> 00:01:58,619
has to<font color="#E5E5E5"> be stored somewhere</font><font color="#CCCCCC"> so if you</font>

33
00:01:56,490 --> 00:02:01,890
have a string of 48 byte length then

34
00:01:58,619 --> 00:02:05,189
your buffer needs to be 49 bytes this

35
00:02:01,890 --> 00:02:07,530
code was part of<font color="#CCCCCC"> keep has XE as I said</font>

36
00:02:05,189 --> 00:02:10,228
it was<font color="#CCCCCC"> executed when you started it</font><font color="#E5E5E5"> and</font>

37
00:02:07,530 --> 00:02:13,920
it<font color="#E5E5E5"> was copied over from</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> project called</font>

38
00:02:10,229 --> 00:02:16,710
<font color="#E5E5E5">set</font><font color="#CCCCCC"> xev</font><font color="#E5E5E5"> BNC so this is</font>

39
00:02:13,920 --> 00:02:18,899
an algorithm to<font color="#E5E5E5"> judge the quality of a</font>

40
00:02:16,710 --> 00:02:20,760
<font color="#E5E5E5">password</font><font color="#CCCCCC"> it's been ported to various</font>

41
00:02:18,900 --> 00:02:26,640
languages and<font color="#CCCCCC"> this is kind of the C</font>

42
00:02:20,760 --> 00:02:27,980
version of it<font color="#E5E5E5"> so so this situation we</font>

43
00:02:26,640 --> 00:02:32,399
<font color="#E5E5E5">have</font><font color="#CCCCCC"> here is we have a buffer overflow</font>

44
00:02:27,980 --> 00:02:35,220
which gets like<font color="#E5E5E5"> triggered right at the</font>

45
00:02:32,400 --> 00:02:37,650
start of an application<font color="#CCCCCC"> it comes from a</font>

46
00:02:35,220 --> 00:02:40,470
security<font color="#E5E5E5"> tool then it gets copied over</font>

47
00:02:37,650 --> 00:02:43,920
to<font color="#E5E5E5"> the code</font><font color="#CCCCCC"> of another security</font><font color="#E5E5E5"> tool so</font>

48
00:02:40,470 --> 00:02:46,680
that's<font color="#E5E5E5"> kind of a bit worrying</font><font color="#CCCCCC"> I mean</font>

49
00:02:43,920 --> 00:02:48,899
this is<font color="#E5E5E5"> probably not exploitable in any</font>

50
00:02:46,680 --> 00:02:50,640
<font color="#CCCCCC">reasonable way because like there's no</font>

51
00:02:48,900 --> 00:02:53,610
attacker controlled input<font color="#E5E5E5"> or anything</font>

52
00:02:50,640 --> 00:02:57,089
<font color="#E5E5E5">but it's clearly a</font><font color="#CCCCCC"> back and it</font><font color="#E5E5E5"> it's</font>

53
00:02:53,610 --> 00:03:00,780
concerning if these parks happen so<font color="#CCCCCC"> yeah</font>

54
00:02:57,090 --> 00:03:01,500
<font color="#CCCCCC">why did nobody notice that another</font>

55
00:03:00,780 --> 00:03:04,019
example

56
00:03:01,500 --> 00:03:06,540
<font color="#CCCCCC">Zomba so you probably all know samba</font>

57
00:03:04,019 --> 00:03:10,200
<font color="#E5E5E5">it's kind of the</font><font color="#CCCCCC"> linux version of this</font>

58
00:03:06,540 --> 00:03:13,200
<font color="#E5E5E5">Windows network file system protocol and</font>

59
00:03:10,200 --> 00:03:16,589
you<font color="#E5E5E5"> probably heard of the shadow brokers</font>

60
00:03:13,200 --> 00:03:19,440
which was like that<font color="#CCCCCC"> a group of unknown</font>

61
00:03:16,590 --> 00:03:23,549
origin that dropped a bunch of exploits

62
00:03:19,440 --> 00:03:25,320
a while ago and they<font color="#CCCCCC"> are presumably</font><font color="#E5E5E5"> from</font>

63
00:03:23,549 --> 00:03:27,329
<font color="#CCCCCC">the NSA I</font><font color="#E5E5E5"> mean we don't know for sure</font>

64
00:03:25,320 --> 00:03:29,700
but that's what<font color="#E5E5E5"> everyone assumes and</font>

65
00:03:27,329 --> 00:03:32,820
most of these exploits were against the

66
00:03:29,700 --> 00:03:35,160
SMB protocol so the windows network file

67
00:03:32,820 --> 00:03:37,560
system<font color="#CCCCCC"> and I had the</font><font color="#E5E5E5"> idea if you</font><font color="#CCCCCC"> run</font>

68
00:03:35,160 --> 00:03:39,570
these exploits against<font color="#E5E5E5"> Samba like the</font>

69
00:03:37,560 --> 00:03:40,739
open source implementation<font color="#CCCCCC"> maybe that</font>

70
00:03:39,570 --> 00:03:42,570
also triggers<font color="#CCCCCC"> backs</font>

71
00:03:40,739 --> 00:03:48,420
I mean the exploit probably will not

72
00:03:42,570 --> 00:03:50,850
<font color="#E5E5E5">work but it may trigger a bug that that</font>

73
00:03:48,420 --> 00:03:52,589
did<font color="#CCCCCC"> not</font><font color="#E5E5E5"> happen</font><font color="#CCCCCC"> so I didn't</font><font color="#E5E5E5"> find any bugs</font>

74
00:03:50,850 --> 00:03:57,470
triggered by<font color="#CCCCCC"> these exploits but I found</font>

75
00:03:52,590 --> 00:04:00,480
<font color="#E5E5E5">a couple of other bugs so this one here</font>

76
00:03:57,470 --> 00:04:03,239
<font color="#E5E5E5">if you look at this it may seem a</font><font color="#CCCCCC"> bit</font>

77
00:04:00,480 --> 00:04:06,209
<font color="#E5E5E5">odd so you have here</font><font color="#CCCCCC"> two strikes</font><font color="#E5E5E5"> that</font>

78
00:04:03,239 --> 00:04:08,190
<font color="#CCCCCC">are basically pointing to a</font><font color="#E5E5E5"> to another</font>

79
00:04:06,209 --> 00:04:10,410
struct and<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> size and</font><font color="#E5E5E5"> then</font><font color="#CCCCCC"> you have</font>

80
00:04:08,190 --> 00:04:12,870
the size of the structure but<font color="#E5E5E5"> you have</font>

81
00:04:10,410 --> 00:04:14,940
here key twice and on the right<font color="#CCCCCC"> side you</font>

82
00:04:12,870 --> 00:04:17,880
see<font color="#E5E5E5"> key n track so something is really</font>

83
00:04:14,940 --> 00:04:20,100
<font color="#E5E5E5">so what</font><font color="#CCCCCC"> it really meant is that</font><font color="#E5E5E5"> the</font>

84
00:04:17,880 --> 00:04:24,060
second line should also be<font color="#E5E5E5"> rack and the</font>

85
00:04:20,100 --> 00:04:27,510
size of<font color="#CCCCCC"> wreck and</font>

86
00:04:24,060 --> 00:04:30,110
then this is a very<font color="#CCCCCC"> classic back this</font>

87
00:04:27,510 --> 00:04:33,090
<font color="#E5E5E5">was a</font><font color="#CCCCCC"> faction that</font><font color="#E5E5E5"> while accessing</font><font color="#CCCCCC"> a</font>

88
00:04:30,110 --> 00:04:36,180
<font color="#E5E5E5">string at position minus one and</font>

89
00:04:33,090 --> 00:04:39,570
checking if that's<font color="#E5E5E5"> the new line and but</font>

90
00:04:36,180 --> 00:04:41,700
this string could be a string of zeros

91
00:04:39,570 --> 00:04:44,310
eyes and if you have a string of zeros

92
00:04:41,700 --> 00:04:50,700
eyes and then<font color="#CCCCCC"> XS minus one</font><font color="#E5E5E5"> you end up in</font>

93
00:04:44,310 --> 00:04:52,680
invalid memory<font color="#E5E5E5"> so and these two</font><font color="#CCCCCC"> backs</font>

94
00:04:50,700 --> 00:04:56,159
and<font color="#E5E5E5"> one other works so two of them I</font>

95
00:04:52,680 --> 00:04:58,770
found by<font color="#E5E5E5"> running mate check like the</font>

96
00:04:56,160 --> 00:05:00,750
test suite of that<font color="#CCCCCC"> application and one</font>

97
00:04:58,770 --> 00:05:06,450
of them I found by just running<font color="#E5E5E5"> number</font>

98
00:05:00,750 --> 00:05:08,610
and trying to access<font color="#E5E5E5"> it so yeah how</font><font color="#CCCCCC"> did</font>

99
00:05:06,450 --> 00:05:10,440
I do that and why<font color="#CCCCCC"> did nobody else find</font>

100
00:05:08,610 --> 00:05:13,800
<font color="#CCCCCC">these pockets because</font><font color="#E5E5E5"> clearly</font><font color="#CCCCCC"> okay they</font>

101
00:05:10,440 --> 00:05:15,600
were triggered<font color="#CCCCCC"> by the test suite</font><font color="#E5E5E5"> or just</font>

102
00:05:13,800 --> 00:05:20,340
by<font color="#E5E5E5"> running the</font><font color="#CCCCCC"> application and trying to</font>

103
00:05:15,600 --> 00:05:23,310
access<font color="#E5E5E5"> it so and what I'm</font><font color="#CCCCCC"> using here</font><font color="#E5E5E5"> is</font>

104
00:05:20,340 --> 00:05:25,560
<font color="#CCCCCC">a tool called</font><font color="#E5E5E5"> address sanitizer</font><font color="#CCCCCC"> which is</font>

105
00:05:23,310 --> 00:05:28,380
a feature that is part<font color="#E5E5E5"> of the compiler</font>

106
00:05:25,560 --> 00:05:31,620
<font color="#CCCCCC">so it's available both in</font><font color="#E5E5E5"> GCC and in</font>

107
00:05:28,380 --> 00:05:33,240
clang which are the two usually<font color="#E5E5E5"> used</font>

108
00:05:31,620 --> 00:05:35,970
open<font color="#CCCCCC"> source free and open source</font>

109
00:05:33,240 --> 00:05:42,270
compilers which you can activate<font color="#CCCCCC"> with</font>

110
00:05:35,970 --> 00:05:44,660
this compiler flag so that<font color="#E5E5E5"> and here's a</font>

111
00:05:42,270 --> 00:05:48,960
very<font color="#CCCCCC"> simple example</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> is kind</font><font color="#CCCCCC"> of a</font>

112
00:05:44,660 --> 00:05:51,210
textbook buffer overflow we we're like

113
00:05:48,960 --> 00:05:54,049
defining<font color="#E5E5E5"> an</font><font color="#CCCCCC"> area with</font><font color="#E5E5E5"> three</font><font color="#CCCCCC"> elements and</font>

114
00:05:51,210 --> 00:05:56,700
then we're writing<font color="#E5E5E5"> to element 3 and</font>

115
00:05:54,050 --> 00:05:59,520
given<font color="#E5E5E5"> that we are starting</font><font color="#CCCCCC"> the counting</font>

116
00:05:56,700 --> 00:06:02,190
from<font color="#CCCCCC"> zero then the element</font><font color="#E5E5E5"> zero one and</font>

117
00:05:59,520 --> 00:06:07,139
<font color="#CCCCCC">two are valid and element 3 that is</font>

118
00:06:02,190 --> 00:06:13,919
invalid<font color="#CCCCCC"> I have this quote here as an</font>

119
00:06:07,139 --> 00:06:17,690
example<font color="#E5E5E5"> yeah it was so what do you think</font>

120
00:06:13,919 --> 00:06:17,690
what happens if we<font color="#CCCCCC"> just start</font><font color="#E5E5E5"> just</font>

121
00:06:19,290 --> 00:06:33,300
anyone yeah yeah so it will just do what

122
00:06:29,530 --> 00:06:37,690
we<font color="#CCCCCC"> expected it prints the five because</font>

123
00:06:33,300 --> 00:06:39,610
<font color="#CCCCCC">the it like it it apparently at this</font>

124
00:06:37,690 --> 00:06:42,460
point it can write to<font color="#CCCCCC"> that memory</font>

125
00:06:39,610 --> 00:06:44,680
<font color="#E5E5E5">nothing crashes and so we won't notice</font>

126
00:06:42,460 --> 00:06:50,799
<font color="#E5E5E5">that back we have a buffer overflow but</font>

127
00:06:44,680 --> 00:06:54,880
we don't<font color="#CCCCCC"> notice it and now if we add</font>

128
00:06:50,800 --> 00:06:59,020
this<font color="#CCCCCC"> sanitized flag F</font><font color="#E5E5E5"> sanitized address</font>

129
00:06:54,880 --> 00:07:02,290
<font color="#E5E5E5">and then we started again then we get a</font>

130
00:06:59,020 --> 00:07:05,469
crash and a really nice error message so

131
00:07:02,290 --> 00:07:08,740
and if we add<font color="#E5E5E5"> G which it's debugging</font>

132
00:07:05,470 --> 00:07:11,680
then we even get line numbers<font color="#E5E5E5"> so it says</font>

133
00:07:08,740 --> 00:07:14,470
<font color="#CCCCCC">okay we have a error address and it has</font>

134
00:07:11,680 --> 00:07:18,460
a stack buffer overflow right of size

135
00:07:14,470 --> 00:07:22,150
<font color="#E5E5E5">four</font><font color="#CCCCCC"> and here we get in line four</font><font color="#E5E5E5"> so</font>

136
00:07:18,460 --> 00:07:24,190
that's<font color="#E5E5E5"> very nice so now we we get a very</font>

137
00:07:22,150 --> 00:07:29,440
<font color="#CCCCCC">good information</font><font color="#E5E5E5"> what's going wrong and</font>

138
00:07:24,190 --> 00:07:31,419
that<font color="#CCCCCC"> we have a buffer overflow here this</font>

139
00:07:29,440 --> 00:07:34,810
is another example<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is a classic use</font>

140
00:07:31,419 --> 00:07:38,320
after free back with use after free<font color="#E5E5E5"> it's</font>

141
00:07:34,810 --> 00:07:40,690
kind of unpredictable<font color="#CCCCCC"> what happens if</font>

142
00:07:38,320 --> 00:07:42,610
you just<font color="#E5E5E5"> run that code</font><font color="#CCCCCC"> so what</font><font color="#E5E5E5"> we're</font>

143
00:07:40,690 --> 00:07:45,370
doing<font color="#E5E5E5"> here</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> okay we're allocating some</font>

144
00:07:42,610 --> 00:07:47,380
memory<font color="#E5E5E5"> and then we're copying a string</font>

145
00:07:45,370 --> 00:07:51,789
to it<font color="#E5E5E5"> and then we're freeing that memory</font>

146
00:07:47,380 --> 00:07:53,979
<font color="#E5E5E5">you're shaking your head as a quotation</font>

147
00:07:51,789 --> 00:07:56,229
mark missing for<font color="#E5E5E5"> last last</font><font color="#CCCCCC"> terrible</font><font color="#E5E5E5"> for</font>

148
00:07:53,979 --> 00:08:04,930
sanitation worker missing I fixed that

149
00:07:56,229 --> 00:08:07,030
but I didn't press reload yeah sorry

150
00:08:04,930 --> 00:08:11,620
and then we're freeing<font color="#CCCCCC"> that</font><font color="#E5E5E5"> and then</font>

151
00:08:07,030 --> 00:08:15,729
we're<font color="#CCCCCC"> trying to</font><font color="#E5E5E5"> print that so if we</font>

152
00:08:11,620 --> 00:08:20,440
compile that<font color="#E5E5E5"> then nothing happens but if</font>

153
00:08:15,729 --> 00:08:23,500
we compile<font color="#CCCCCC"> that with address sanitizer</font>

154
00:08:20,440 --> 00:08:25,840
and<font color="#E5E5E5"> debugging again then again we get a</font>

155
00:08:23,500 --> 00:08:30,820
very<font color="#E5E5E5"> nice error message and for use</font>

156
00:08:25,840 --> 00:08:36,490
<font color="#E5E5E5">after free</font><font color="#CCCCCC"> backs like oh it doesn't</font>

157
00:08:30,820 --> 00:08:39,039
did as a use after free<font color="#E5E5E5"> ma'am okay</font><font color="#CCCCCC"> it</font>

158
00:08:36,490 --> 00:08:40,570
thinks it's a buffalo flow it's not

159
00:08:39,039 --> 00:08:43,799
always<font color="#E5E5E5"> working perfectly</font><font color="#CCCCCC"> but you see</font>

160
00:08:40,570 --> 00:08:43,800
that<font color="#E5E5E5"> it there's a back here</font>

161
00:08:44,039 --> 00:08:49,089
so<font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> address any title it's a very</font>

162
00:08:47,050 --> 00:08:52,900
powerful tool<font color="#CCCCCC"> to find bugs in</font><font color="#E5E5E5"> your C</font>

163
00:08:49,090 --> 00:08:55,270
code or C++ code<font color="#CCCCCC"> and I'll</font><font color="#E5E5E5"> just say if</font>

164
00:08:52,900 --> 00:08:57,370
<font color="#CCCCCC">you're if you're</font><font color="#E5E5E5"> responsible to develop</font>

165
00:08:55,270 --> 00:08:59,290
or maintain any<font color="#CCCCCC"> kind of</font><font color="#E5E5E5"> C code there's</font>

166
00:08:57,370 --> 00:09:00,280
just no excuse not to test it with

167
00:08:59,290 --> 00:09:02,949
address analyzer

168
00:09:00,280 --> 00:09:05,050
and if I see<font color="#CCCCCC"> like that</font><font color="#E5E5E5"> tools that are</font>

169
00:09:02,950 --> 00:09:07,600
security tools or something<font color="#CCCCCC"> like</font><font color="#E5E5E5"> Samba</font>

170
00:09:05,050 --> 00:09:10,120
which is very<font color="#E5E5E5"> exposed to attacks that</font>

171
00:09:07,600 --> 00:09:11,710
they apparently have never tested<font color="#CCCCCC"> their</font>

172
00:09:10,120 --> 00:09:14,860
code with this tool which is freely

173
00:09:11,710 --> 00:09:18,400
<font color="#E5E5E5">available and really</font><font color="#CCCCCC"> simple to use I</font>

174
00:09:14,860 --> 00:09:20,290
don't get that so I will<font color="#CCCCCC"> try</font><font color="#E5E5E5"> to tell</font>

175
00:09:18,400 --> 00:09:22,360
<font color="#CCCCCC">people hey this is a very powerful tool</font>

176
00:09:20,290 --> 00:09:25,240
<font color="#CCCCCC">to improve</font><font color="#E5E5E5"> the quality of a code please</font>

177
00:09:22,360 --> 00:09:26,620
test your<font color="#E5E5E5"> code with it</font><font color="#CCCCCC"> and to get back</font>

178
00:09:25,240 --> 00:09:29,110
to the example from<font color="#E5E5E5"> the beginning</font>

179
00:09:26,620 --> 00:09:30,790
anyways keep us<font color="#E5E5E5"> so I've compiled that</font>

180
00:09:29,110 --> 00:09:33,040
before<font color="#E5E5E5"> because if I would compile it</font>

181
00:09:30,790 --> 00:09:35,170
during the talk you<font color="#E5E5E5"> would have to wait</font>

182
00:09:33,040 --> 00:09:38,290
<font color="#E5E5E5">several minutes to see the</font><font color="#CCCCCC"> compile which</font>

183
00:09:35,170 --> 00:09:41,829
is not very<font color="#E5E5E5"> interesting but</font><font color="#CCCCCC"> if I</font><font color="#E5E5E5"> just</font>

184
00:09:38,290 --> 00:09:44,290
<font color="#CCCCCC">try to start</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> I get this very long</font>

185
00:09:41,830 --> 00:09:46,300
stack trace and tells me<font color="#CCCCCC"> yeah right of</font>

186
00:09:44,290 --> 00:09:54,849
<font color="#E5E5E5">size one so that was the buffer</font><font color="#CCCCCC"> overflow</font>

187
00:09:46,300 --> 00:09:56,319
we saw right at the beginning yeah so it

188
00:09:54,850 --> 00:09:58,390
been addressing<font color="#CCCCCC"> if I</font><font color="#E5E5E5"> ever finds all</font>

189
00:09:56,320 --> 00:10:00,040
these<font color="#CCCCCC"> bugs</font><font color="#E5E5E5"> you could wonder okay what</font>

190
00:09:58,390 --> 00:10:04,150
happens if we<font color="#E5E5E5"> try</font><font color="#CCCCCC"> to build</font><font color="#E5E5E5"> a whole</font>

191
00:10:00,040 --> 00:10:05,800
<font color="#E5E5E5">system with it like just the whole Linux</font>

192
00:10:04,150 --> 00:10:09,490
system<font color="#E5E5E5"> I mean we have all the code we</font>

193
00:10:05,800 --> 00:10:13,060
could do that and<font color="#CCCCCC"> that's so what I did</font>

194
00:10:09,490 --> 00:10:14,740
was that<font color="#E5E5E5"> I was created a gentle system I</font>

195
00:10:13,060 --> 00:10:17,319
mean with<font color="#CCCCCC"> Trento</font><font color="#E5E5E5"> it's kind of convenient</font>

196
00:10:14,740 --> 00:10:21,160
because<font color="#E5E5E5"> it's anyway a system that you</font>

197
00:10:17,320 --> 00:10:23,350
compile yourself<font color="#CCCCCC"> it wasn't</font><font color="#E5E5E5"> that easy</font>

198
00:10:21,160 --> 00:10:25,420
because<font color="#CCCCCC"> you kind of have dependency</font>

199
00:10:23,350 --> 00:10:28,170
issues and you need to get the right

200
00:10:25,420 --> 00:10:31,209
order<font color="#E5E5E5"> in which you compile the packages</font>

201
00:10:28,170 --> 00:10:34,449
<font color="#E5E5E5">but eventually it worked and I was able</font>

202
00:10:31,210 --> 00:10:36,640
<font color="#CCCCCC">to run a full system compiled with</font>

203
00:10:34,450 --> 00:10:38,770
<font color="#CCCCCC">address any ties you</font><font color="#E5E5E5"> end up that it's</font>

204
00:10:36,640 --> 00:10:40,870
getting<font color="#CCCCCC"> very</font><font color="#E5E5E5"> slow and it needs a lot</font><font color="#CCCCCC"> of</font>

205
00:10:38,770 --> 00:10:44,710
<font color="#E5E5E5">RAM because</font><font color="#CCCCCC"> it Restless</font><font color="#E5E5E5"> either has a</font>

206
00:10:40,870 --> 00:10:46,420
huge<font color="#E5E5E5"> memory footprint but it works</font>

207
00:10:44,710 --> 00:10:50,110
there's<font color="#E5E5E5"> just a list of applications</font>

208
00:10:46,420 --> 00:10:52,229
<font color="#CCCCCC">where</font><font color="#E5E5E5"> I found box just by compiling them</font>

209
00:10:50,110 --> 00:10:55,450
and<font color="#E5E5E5"> running them with address analyzer</font>

210
00:10:52,230 --> 00:10:57,160
<font color="#E5E5E5">so at the</font><font color="#CCCCCC"> beginning I had to</font><font color="#E5E5E5"> fix some</font><font color="#CCCCCC"> of</font>

211
00:10:55,450 --> 00:10:59,680
those back so<font color="#E5E5E5"> they were that I was even</font>

212
00:10:57,160 --> 00:11:03,130
able<font color="#CCCCCC"> to use that system</font><font color="#E5E5E5"> because like</font>

213
00:10:59,680 --> 00:11:06,010
bash was crashing all the time and it's

214
00:11:03,130 --> 00:11:09,160
<font color="#E5E5E5">not very usable so but eventually a</font><font color="#CCCCCC"> lot</font>

215
00:11:06,010 --> 00:11:25,960
of<font color="#E5E5E5"> parts got fixed in a lot of important</font>

216
00:11:09,160 --> 00:11:28,719
packages yeah yeah<font color="#CCCCCC"> so address any ties</font>

217
00:11:25,960 --> 00:11:32,470
is part of<font color="#E5E5E5"> kind of a whole suit of</font>

218
00:11:28,720 --> 00:11:34,360
different sanitizer features<font color="#CCCCCC"> they</font><font color="#E5E5E5"> are</font>

219
00:11:32,470 --> 00:11:38,110
developed mostly<font color="#CCCCCC"> by people</font><font color="#E5E5E5"> from Google</font>

220
00:11:34,360 --> 00:11:40,900
and you're in<font color="#CCCCCC"> in-ceiling</font><font color="#E5E5E5"> and some of</font>

221
00:11:38,110 --> 00:11:42,490
them are then ported to<font color="#E5E5E5"> GCC and address</font>

222
00:11:40,900 --> 00:11:44,800
sanitizer is definitely the most

223
00:11:42,490 --> 00:11:48,280
powerful one so it's<font color="#E5E5E5"> very easy</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> use</font>

224
00:11:44,800 --> 00:11:50,380
<font color="#E5E5E5">and it finds box with high impact but</font>

225
00:11:48,280 --> 00:11:53,290
<font color="#E5E5E5">the others are worth looking at too so</font>

226
00:11:50,380 --> 00:11:55,390
there's undefined behavior sanitizer<font color="#E5E5E5"> so</font>

227
00:11:53,290 --> 00:11:57,310
if you follow discussions about C there

228
00:11:55,390 --> 00:11:59,710
are a lot<font color="#CCCCCC"> of situations</font><font color="#E5E5E5"> where the C</font>

229
00:11:57,310 --> 00:12:02,530
standard says<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> if you do this that's</font>

230
00:11:59,710 --> 00:12:04,360
undefined and you after<font color="#CCCCCC"> that you can</font>

231
00:12:02,530 --> 00:12:06,880
<font color="#CCCCCC">have no</font><font color="#E5E5E5"> expectation that your code does</font>

232
00:12:04,360 --> 00:12:08,980
anything<font color="#E5E5E5"> correct so a typical thing is</font>

233
00:12:06,880 --> 00:12:11,380
an integer overflow if<font color="#CCCCCC"> your</font><font color="#E5E5E5"> overflowing</font>

234
00:12:08,980 --> 00:12:13,840
an integer<font color="#E5E5E5"> and for example checking</font>

235
00:12:11,380 --> 00:12:15,970
after<font color="#CCCCCC"> that whether the integer has</font>

236
00:12:13,840 --> 00:12:17,650
overflown that does not work because

237
00:12:15,970 --> 00:12:19,150
then the compiler can say it is an

238
00:12:17,650 --> 00:12:21,930
integer overflow that can never<font color="#E5E5E5"> happen</font>

239
00:12:19,150 --> 00:12:24,970
<font color="#CCCCCC">so we can</font><font color="#E5E5E5"> just optimize that check out</font>

240
00:12:21,930 --> 00:12:27,250
<font color="#E5E5E5">or another thing is invalid shifts like</font>

241
00:12:24,970 --> 00:12:29,320
the the shift operations<font color="#E5E5E5"> in C there are</font>

242
00:12:27,250 --> 00:12:31,480
<font color="#CCCCCC">a lot of rules</font><font color="#E5E5E5"> you cannot have a shift</font>

243
00:12:29,320 --> 00:12:34,600
by a<font color="#E5E5E5"> negative value or</font><font color="#CCCCCC"> you cannot shift</font>

244
00:12:31,480 --> 00:12:38,160
a negative value<font color="#CCCCCC"> and undefined undefined</font>

245
00:12:34,600 --> 00:12:38,160
behavior sanitizer finds these<font color="#E5E5E5"> things</font>

246
00:12:38,640 --> 00:12:45,819
<font color="#CCCCCC">then s memory</font><font color="#E5E5E5"> sanitizer that finds use</font>

247
00:12:41,770 --> 00:12:48,130
of uninitialized memory<font color="#E5E5E5"> so yeah to</font><font color="#CCCCCC"> be</font>

248
00:12:45,820 --> 00:12:50,080
you're using<font color="#CCCCCC"> you're initializing you're</font>

249
00:12:48,130 --> 00:12:51,520
defining<font color="#E5E5E5"> a variable and then you're</font>

250
00:12:50,080 --> 00:12:55,089
<font color="#E5E5E5">reading it</font><font color="#CCCCCC"> before you've written</font>

251
00:12:51,520 --> 00:12:56,740
anything<font color="#E5E5E5"> into it things like</font><font color="#CCCCCC"> that the</font>

252
00:12:55,089 --> 00:12:58,150
<font color="#E5E5E5">problem with that is it's a bit more</font>

253
00:12:56,740 --> 00:12:59,650
<font color="#E5E5E5">tricky</font><font color="#CCCCCC"> to use</font><font color="#E5E5E5"> because they</font>

254
00:12:58,150 --> 00:13:01,959
you not<font color="#CCCCCC"> only need to compile your</font>

255
00:12:59,650 --> 00:13:04,660
<font color="#CCCCCC">application with it but</font><font color="#E5E5E5"> also all the</font>

256
00:13:01,960 --> 00:13:06,970
libraries<font color="#E5E5E5"> and if it's the plus plus then</font>

257
00:13:04,660 --> 00:13:09,640
that includes<font color="#CCCCCC"> G Lipsy</font>

258
00:13:06,970 --> 00:13:11,920
so using<font color="#E5E5E5"> that it's a bit annoying for</font>

259
00:13:09,640 --> 00:13:15,510
small applications<font color="#CCCCCC"> it works for</font><font color="#E5E5E5"> bigger</font>

260
00:13:11,920 --> 00:13:18,939
applications it gets<font color="#E5E5E5"> really tricky but</font>

261
00:13:15,510 --> 00:13:21,069
so Google has<font color="#E5E5E5"> built</font><font color="#CCCCCC"> Chrome</font><font color="#E5E5E5"> visits so it</font>

262
00:13:18,940 --> 00:13:22,540
is also<font color="#CCCCCC"> possible to build applications</font>

263
00:13:21,070 --> 00:13:24,490
<font color="#CCCCCC">with it but you have</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> dependency</font>

264
00:13:22,540 --> 00:13:27,010
issue so it's not as straightforward as

265
00:13:24,490 --> 00:13:28,840
<font color="#E5E5E5">addressing each other and then there's</font>

266
00:13:27,010 --> 00:13:31,510
also<font color="#CCCCCC"> thread sanitizer which finds</font>

267
00:13:28,840 --> 00:13:32,800
concurrency issues which is mostly

268
00:13:31,510 --> 00:13:36,490
interesting for more complex

269
00:13:32,800 --> 00:13:43,329
<font color="#E5E5E5">applications so race conditions and</font>

270
00:13:36,490 --> 00:13:47,040
things<font color="#E5E5E5"> like that you okay um this is a</font>

271
00:13:43,330 --> 00:13:52,150
security<font color="#E5E5E5"> advisory for TCP dump and</font>

272
00:13:47,040 --> 00:13:56,050
there's a large<font color="#E5E5E5"> number of CVS</font><font color="#CCCCCC"> 41 if</font><font color="#E5E5E5"> I'm</font>

273
00:13:52,150 --> 00:14:00,730
<font color="#E5E5E5">not mistaken</font><font color="#CCCCCC"> more</font><font color="#E5E5E5"> than half of them were</font>

274
00:13:56,050 --> 00:14:02,260
<font color="#E5E5E5">reported by me</font><font color="#CCCCCC"> and when you see</font>

275
00:14:00,730 --> 00:14:05,110
<font color="#E5E5E5">something</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> that it</font><font color="#CCCCCC"> usually means</font>

276
00:14:02,260 --> 00:14:08,610
<font color="#E5E5E5">someone was using fuzzing because you</font>

277
00:14:05,110 --> 00:14:12,190
just find large number of parts of that

278
00:14:08,610 --> 00:14:15,400
<font color="#E5E5E5">so let's talk a bit about fighting so</font>

279
00:14:12,190 --> 00:14:17,890
following<font color="#E5E5E5"> the</font><font color="#CCCCCC"> basic idea is your testing</font>

280
00:14:15,400 --> 00:14:20,230
software<font color="#E5E5E5"> with invalid inputs so you have</font>

281
00:14:17,890 --> 00:14:23,800
kind<font color="#E5E5E5"> of a</font><font color="#CCCCCC"> feather that</font><font color="#E5E5E5"> is it's taking</font>

282
00:14:20,230 --> 00:14:26,790
some input some example<font color="#CCCCCC"> input and then</font>

283
00:14:23,800 --> 00:14:29,109
<font color="#E5E5E5">it's just adding random errors and like</font>

284
00:14:26,790 --> 00:14:30,610
hundreds<font color="#E5E5E5"> a second and testing the</font>

285
00:14:29,110 --> 00:14:33,190
application<font color="#CCCCCC"> again</font><font color="#E5E5E5"> and again and again</font>

286
00:14:30,610 --> 00:14:35,620
<font color="#E5E5E5">and sees if it crashes at some point and</font>

287
00:14:33,190 --> 00:14:37,480
if we have a crash a crash is usually

288
00:14:35,620 --> 00:14:39,550
high likelihood of being some<font color="#E5E5E5"> kind of</font>

289
00:14:37,480 --> 00:14:46,170
memory corruption so it may<font color="#CCCCCC"> very well</font><font color="#E5E5E5"> be</font>

290
00:14:39,550 --> 00:14:49,479
<font color="#CCCCCC">a security bug and traditionally there</font>

291
00:14:46,170 --> 00:14:51,310
have been like the the very<font color="#E5E5E5"> first</font><font color="#CCCCCC"> idea</font>

292
00:14:49,480 --> 00:14:53,350
<font color="#E5E5E5">of fuzzing is to do dump fuzzing which</font>

293
00:14:51,310 --> 00:14:56,979
just means you take<font color="#E5E5E5"> a valid input and</font>

294
00:14:53,350 --> 00:15:00,430
add random<font color="#E5E5E5"> errors to it that's already</font>

295
00:14:56,980 --> 00:15:04,330
<font color="#E5E5E5">quite effective but you don't find the</font>

296
00:15:00,430 --> 00:15:06,280
more complex box with that<font color="#E5E5E5"> and then in</font>

297
00:15:04,330 --> 00:15:08,680
<font color="#E5E5E5">the past like many people</font><font color="#CCCCCC"> have been</font>

298
00:15:06,280 --> 00:15:11,470
written fuzzing tools that were specific

299
00:15:08,680 --> 00:15:15,310
to to a certain file format<font color="#CCCCCC"> or certain</font>

300
00:15:11,470 --> 00:15:16,870
protocol<font color="#CCCCCC"> that is more</font><font color="#E5E5E5"> effective but the</font>

301
00:15:15,310 --> 00:15:19,479
problem with that<font color="#E5E5E5"> is that it doesn't</font>

302
00:15:16,870 --> 00:15:21,700
<font color="#E5E5E5">really scale because like you need a</font>

303
00:15:19,480 --> 00:15:23,440
specific fuzzing tool<font color="#CCCCCC"> basically for</font>

304
00:15:21,700 --> 00:15:26,860
every<font color="#CCCCCC"> application</font><font color="#E5E5E5"> or at least every</font>

305
00:15:23,440 --> 00:15:28,390
<font color="#E5E5E5">format you're testing and then there's</font>

306
00:15:26,860 --> 00:15:30,100
<font color="#E5E5E5">been a new development in</font><font color="#CCCCCC"> the past</font>

307
00:15:28,390 --> 00:15:34,180
couple of<font color="#E5E5E5"> years which is</font><font color="#CCCCCC"> so-called</font>

308
00:15:30,100 --> 00:15:36,880
<font color="#CCCCCC">coverage based fuzzing and</font><font color="#E5E5E5"> they're the</font>

309
00:15:34,180 --> 00:15:38,829
<font color="#E5E5E5">father' itself gets kind of smart but</font>

310
00:15:36,880 --> 00:15:41,620
you don't have to do anything<font color="#E5E5E5"> about</font><font color="#CCCCCC"> it</font>

311
00:15:38,830 --> 00:15:44,200
<font color="#E5E5E5">and</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> is there are funding tools that</font>

312
00:15:41,620 --> 00:15:46,030
are detecting what code paths are

313
00:15:44,200 --> 00:15:48,490
triggered within<font color="#E5E5E5"> an application</font><font color="#CCCCCC"> and that</font>

314
00:15:46,030 --> 00:15:51,610
<font color="#CCCCCC">gives you a feedback what inputs are</font>

315
00:15:48,490 --> 00:15:54,610
interesting so if I have I don't<font color="#E5E5E5"> know a</font>

316
00:15:51,610 --> 00:15:57,700
playback file and I'm fuzzing a<font color="#CCCCCC"> powerful</font>

317
00:15:54,610 --> 00:16:01,300
<font color="#CCCCCC">JPEG</font><font color="#E5E5E5"> and then it's okay</font><font color="#CCCCCC"> if I</font><font color="#E5E5E5"> change this</font>

318
00:15:57,700 --> 00:16:03,430
<font color="#E5E5E5">bite to something then it triggers a new</font>

319
00:16:01,300 --> 00:16:06,280
code path<font color="#E5E5E5"> within my</font><font color="#CCCCCC"> executable that</font>

320
00:16:03,430 --> 00:16:09,339
<font color="#CCCCCC">means that is an interesting input</font><font color="#E5E5E5"> it</font>

321
00:16:06,280 --> 00:16:12,100
may trigger<font color="#E5E5E5"> some unusual feature and</font>

322
00:16:09,340 --> 00:16:14,650
then it can use that input<font color="#E5E5E5"> to do further</font>

323
00:16:12,100 --> 00:16:16,480
fuzzing<font color="#E5E5E5"> as a starting point and</font><font color="#CCCCCC"> then</font>

324
00:16:14,650 --> 00:16:19,810
<font color="#E5E5E5">it's turned out to be</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> effective</font><font color="#CCCCCC"> and</font>

325
00:16:16,480 --> 00:16:21,970
the tool that<font color="#CCCCCC"> kind of first introduced</font>

326
00:16:19,810 --> 00:16:28,239
this<font color="#CCCCCC"> technology is called American fuzzy</font>

327
00:16:21,970 --> 00:16:29,950
<font color="#CCCCCC">lop</font><font color="#E5E5E5"> here's a screen shot</font><font color="#CCCCCC"> of it</font><font color="#E5E5E5"> so yeah</font>

328
00:16:28,240 --> 00:16:31,780
shows you lots of information<font color="#E5E5E5"> the most</font>

329
00:16:29,950 --> 00:16:34,090
<font color="#E5E5E5">interesting information is the upper</font>

330
00:16:31,780 --> 00:16:38,949
right which tells you how<font color="#CCCCCC"> many</font><font color="#E5E5E5"> crashes</font>

331
00:16:34,090 --> 00:16:41,320
it's already found yeah it's relatively

332
00:16:38,950 --> 00:16:42,820
straightforward<font color="#CCCCCC"> to use</font><font color="#E5E5E5"> the one thing you</font>

333
00:16:41,320 --> 00:16:44,830
need<font color="#E5E5E5"> to consider here</font><font color="#CCCCCC"> is that you need</font>

334
00:16:42,820 --> 00:16:47,650
<font color="#CCCCCC">to recompile your application because</font>

335
00:16:44,830 --> 00:16:49,540
<font color="#E5E5E5">and it needs this feedback mechanism for</font>

336
00:16:47,650 --> 00:16:51,970
the code<font color="#CCCCCC"> path</font><font color="#E5E5E5"> it needs to add special</font>

337
00:16:49,540 --> 00:16:56,319
<font color="#E5E5E5">code instructions to the code so you</font>

338
00:16:51,970 --> 00:16:59,560
<font color="#CCCCCC">have a compiler</font><font color="#E5E5E5"> wrapper</font><font color="#CCCCCC"> AFL GCC or afl's</font>

339
00:16:56,320 --> 00:17:01,300
<font color="#E5E5E5">clang and then you recompile your</font>

340
00:16:59,560 --> 00:17:03,280
application and then<font color="#E5E5E5"> you run the</font><font color="#CCCCCC"> fuzzer</font>

341
00:17:01,300 --> 00:17:06,010
<font color="#CCCCCC">and it's really</font><font color="#E5E5E5"> straightforward so it's</font>

342
00:17:03,280 --> 00:17:07,930
not<font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of work</font><font color="#E5E5E5"> and that's also</font><font color="#CCCCCC"> I</font>

343
00:17:06,010 --> 00:17:10,060
<font color="#E5E5E5">think why it's quite a</font><font color="#CCCCCC"> popular tool</font>

344
00:17:07,930 --> 00:17:12,720
because like you really get started<font color="#E5E5E5"> with</font>

345
00:17:10,060 --> 00:17:12,720
<font color="#CCCCCC">it really</font><font color="#E5E5E5"> fast</font>

346
00:17:14,609 --> 00:17:19,599
so yeah I would<font color="#CCCCCC"> say if el has</font>

347
00:17:17,648 --> 00:17:21,609
<font color="#E5E5E5">revolutionized fuzzing and it's also</font>

348
00:17:19,599 --> 00:17:24,009
like<font color="#E5E5E5"> occasionally have debates with</font>

349
00:17:21,609 --> 00:17:27,458
<font color="#CCCCCC">people who have</font><font color="#E5E5E5"> ideas about fuzzing that</font>

350
00:17:24,009 --> 00:17:30,220
are as they outdated<font color="#CCCCCC"> they they are</font><font color="#E5E5E5"> not</font>

351
00:17:27,459 --> 00:17:33,309
like because like<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is I mean fuzzing</font>

352
00:17:30,220 --> 00:17:34,899
has been around for decades<font color="#CCCCCC"> but what has</font>

353
00:17:33,309 --> 00:17:36,428
happened<font color="#CCCCCC"> in the past</font><font color="#E5E5E5"> couple of years is</font>

354
00:17:34,899 --> 00:17:38,918
just<font color="#E5E5E5"> that we have tools</font><font color="#CCCCCC"> that are so much</font>

355
00:17:36,429 --> 00:17:40,809
more<font color="#CCCCCC"> powerful that it doesn't really</font>

356
00:17:38,919 --> 00:17:42,789
make<font color="#E5E5E5"> sense to use</font><font color="#CCCCCC"> the methods that have</font>

357
00:17:40,809 --> 00:17:44,649
been used<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> past anymore you sure</font>

358
00:17:42,789 --> 00:17:46,450
you should use those modern fuzzing

359
00:17:44,649 --> 00:17:51,939
tools that are much more<font color="#E5E5E5"> powerful than</font>

360
00:17:46,450 --> 00:17:53,739
what we had<font color="#CCCCCC"> in the past so if I tend</font><font color="#E5E5E5"> to</font>

361
00:17:51,940 --> 00:17:56,019
say it basically has found<font color="#CCCCCC"> box in</font><font color="#E5E5E5"> every</font>

362
00:17:53,739 --> 00:17:58,600
major piece<font color="#CCCCCC"> of software out there I'm</font>

363
00:17:56,019 --> 00:18:00,399
<font color="#E5E5E5">just naming a few that should be open as</font>

364
00:17:58,600 --> 00:18:03,369
<font color="#CCCCCC">a sage there</font><font color="#E5E5E5"> is another</font><font color="#CCCCCC"> area on the</font>

365
00:18:00,399 --> 00:18:06,100
slide<font color="#E5E5E5"> so in my cell plenty of arrows and</font>

366
00:18:03,369 --> 00:18:07,480
<font color="#CCCCCC">open SSL in Apache</font><font color="#E5E5E5"> and lip Draper Clippy</font>

367
00:18:06,100 --> 00:18:10,928
<font color="#E5E5E5">entry which was the major image</font>

368
00:18:07,480 --> 00:18:12,549
libraries SQLite<font color="#E5E5E5"> no</font><font color="#CCCCCC"> Petrie</font><font color="#E5E5E5"> bash forever</font>

369
00:18:10,929 --> 00:18:15,309
basically

370
00:18:12,549 --> 00:18:18,580
but these are<font color="#E5E5E5"> just a prominent examples</font>

371
00:18:15,309 --> 00:18:20,470
but really if you go to the web<font color="#E5E5E5"> page</font><font color="#CCCCCC"> you</font>

372
00:18:18,580 --> 00:18:23,080
can find<font color="#CCCCCC"> a list</font><font color="#E5E5E5"> in what it</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> has</font>

373
00:18:20,470 --> 00:18:27,850
already found box<font color="#CCCCCC"> it's extremely</font>

374
00:18:23,080 --> 00:18:30,369
effective<font color="#E5E5E5"> and</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> I've alia talked about</font>

375
00:18:27,850 --> 00:18:33,488
address sanitizer<font color="#CCCCCC"> you can use those</font>

376
00:18:30,369 --> 00:18:35,908
<font color="#CCCCCC">together</font><font color="#E5E5E5"> because like address sanitizer</font>

377
00:18:33,489 --> 00:18:38,739
<font color="#E5E5E5">enables detection of additional box</font>

378
00:18:35,909 --> 00:18:41,169
<font color="#E5E5E5">these</font><font color="#CCCCCC"> pacts</font><font color="#E5E5E5"> that don't necessarily crash</font>

379
00:18:38,739 --> 00:18:43,929
an application<font color="#E5E5E5"> particular things like</font>

380
00:18:41,169 --> 00:18:47,590
buffer<font color="#CCCCCC"> overeats</font><font color="#E5E5E5"> like usually if you read</font>

381
00:18:43,929 --> 00:18:49,359
past the<font color="#E5E5E5"> bounds of a buffer that most of</font>

382
00:18:47,590 --> 00:18:51,488
the time doesn't<font color="#E5E5E5"> crash because there is</font>

383
00:18:49,359 --> 00:18:54,549
still<font color="#E5E5E5"> valid memory that you can read</font>

384
00:18:51,489 --> 00:18:56,289
beyond<font color="#E5E5E5"> the buffer and combining the</font>

385
00:18:54,549 --> 00:18:58,869
father<font color="#E5E5E5"> with addressing it as able to</font>

386
00:18:56,289 --> 00:19:01,029
take those<font color="#E5E5E5"> it will slow things down but</font>

387
00:18:58,869 --> 00:19:03,988
<font color="#E5E5E5">it will increase the number</font><font color="#CCCCCC"> of box you</font>

388
00:19:01,029 --> 00:19:03,989
<font color="#CCCCCC">find</font><font color="#E5E5E5"> massively</font>

389
00:19:06,010 --> 00:19:13,070
<font color="#CCCCCC">and there's another tool called lip</font>

390
00:19:09,080 --> 00:19:15,980
<font color="#CCCCCC">buzzer which is based on</font><font color="#E5E5E5"> the same basic</font>

391
00:19:13,070 --> 00:19:19,929
<font color="#E5E5E5">idea of fuzzing it's using this coverage</font>

392
00:19:15,980 --> 00:19:19,930
based fuzzing with code path detection

393
00:19:20,320 --> 00:19:27,260
<font color="#E5E5E5">but the difference is so</font><font color="#CCCCCC"> AFL is</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> test</font>

394
00:19:23,870 --> 00:19:33,129
<font color="#E5E5E5">is testing executables and</font><font color="#CCCCCC"> Lib</font><font color="#E5E5E5"> father is</font>

395
00:19:27,260 --> 00:19:35,240
testing functions<font color="#E5E5E5"> so here's an example</font>

396
00:19:33,130 --> 00:19:38,270
<font color="#CCCCCC">so what you're</font><font color="#E5E5E5"> doing there is you're</font>

397
00:19:35,240 --> 00:19:41,660
<font color="#E5E5E5">writing this kind</font><font color="#CCCCCC"> of test function which</font>

398
00:19:38,270 --> 00:19:43,760
takes a buffer<font color="#E5E5E5"> and the size and then</font><font color="#CCCCCC"> you</font>

399
00:19:41,660 --> 00:19:46,130
pass that to<font color="#CCCCCC"> the function that you</font>

400
00:19:43,760 --> 00:19:48,260
really want<font color="#E5E5E5"> to test and in this case</font>

401
00:19:46,130 --> 00:19:49,310
this function expects something<font color="#CCCCCC"> that is</font>

402
00:19:48,260 --> 00:19:52,460
0 terminated

403
00:19:49,310 --> 00:19:54,950
<font color="#E5E5E5">so</font><font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> allocating a buffer</font><font color="#CCCCCC"> that has one</font>

404
00:19:52,460 --> 00:19:58,130
byte more and add a<font color="#E5E5E5"> zero at the end and</font>

405
00:19:54,950 --> 00:20:01,520
then copy this input<font color="#E5E5E5"> buffer to my</font>

406
00:19:58,130 --> 00:20:01,880
temporary<font color="#E5E5E5"> input buffer and the function</font>

407
00:20:01,520 --> 00:20:04,970
here

408
00:20:01,880 --> 00:20:11,420
I was create query<font color="#E5E5E5"> belongs to</font><font color="#CCCCCC"> C eros</font>

409
00:20:04,970 --> 00:20:16,790
<font color="#E5E5E5">which</font><font color="#CCCCCC"> is a DNS library and yeah I</font><font color="#E5E5E5"> have a</font>

410
00:20:11,420 --> 00:20:19,940
demo here so<font color="#E5E5E5"> so I have already compiled</font>

411
00:20:16,790 --> 00:20:23,389
that library<font color="#E5E5E5"> with some specific see</font>

412
00:20:19,940 --> 00:20:25,610
flags and the ceiling so<font color="#CCCCCC"> Liberata</font><font color="#E5E5E5"> only</font>

413
00:20:23,390 --> 00:20:31,150
works with ceiling does<font color="#E5E5E5"> not work with</font>

414
00:20:25,610 --> 00:20:34,370
GCC<font color="#E5E5E5"> and now</font><font color="#CCCCCC"> i when</font><font color="#E5E5E5"> I'm compiling this</font>

415
00:20:31,150 --> 00:20:36,830
this fuzzing stop so<font color="#E5E5E5"> this file</font><font color="#CCCCCC"> lipfird</font>

416
00:20:34,370 --> 00:20:43,010
<font color="#CCCCCC">LCR</font><font color="#E5E5E5"> is something that is the code I just</font>

417
00:20:36,830 --> 00:20:45,439
showed<font color="#E5E5E5"> you and then I</font><font color="#CCCCCC"> link in the the</font>

418
00:20:43,010 --> 00:20:48,110
the static version<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> library I</font>

419
00:20:45,440 --> 00:20:53,150
trust compiled<font color="#E5E5E5"> then I link in lip buzzer</font>

420
00:20:48,110 --> 00:20:54,649
itself<font color="#E5E5E5"> and then okay it needs the</font>

421
00:20:53,150 --> 00:20:56,480
include file which is<font color="#CCCCCC"> in the current</font>

422
00:20:54,650 --> 00:20:59,210
<font color="#E5E5E5">directory that's trivial and it needs</font>

423
00:20:56,480 --> 00:21:02,870
<font color="#E5E5E5">the thread</font><font color="#CCCCCC"> library and then I add</font>

424
00:20:59,210 --> 00:21:05,390
address sanitizer<font color="#E5E5E5"> again because I want</font>

425
00:21:02,870 --> 00:21:07,669
to find more box and then I add<font color="#E5E5E5"> this</font>

426
00:21:05,390 --> 00:21:10,430
flag<font color="#CCCCCC"> F's and it</font><font color="#E5E5E5"> has coverage this gives</font>

427
00:21:07,670 --> 00:21:13,970
the father and<font color="#CCCCCC"> the capability to find</font>

428
00:21:10,430 --> 00:21:15,830
these code paths<font color="#CCCCCC"> and then I add tree</font>

429
00:21:13,970 --> 00:21:18,200
which adds debugging so I get<font color="#E5E5E5"> better</font>

430
00:21:15,830 --> 00:21:20,330
error messages

431
00:21:18,200 --> 00:21:23,420
and if<font color="#E5E5E5"> we run this</font><font color="#CCCCCC"> and this is kind of</font>

432
00:21:20,330 --> 00:21:25,669
an older version of that library<font color="#CCCCCC"> you see</font>

433
00:21:23,420 --> 00:21:32,150
<font color="#CCCCCC">basically in an instant I get a crash</font>

434
00:21:25,670 --> 00:21:34,610
and this<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is a real back and this</font>

435
00:21:32,150 --> 00:21:38,150
was used in<font color="#E5E5E5"> an exploit chain against</font>

436
00:21:34,610 --> 00:21:40,459
Chrome OS<font color="#E5E5E5"> in a really complex exploit</font>

437
00:21:38,150 --> 00:21:42,830
but that was kind of the<font color="#CCCCCC"> initial attack</font>

438
00:21:40,460 --> 00:21:45,410
vector so that<font color="#CCCCCC"> was real back so if</font>

439
00:21:42,830 --> 00:21:48,699
anyone had fast dysfunction before<font color="#E5E5E5"> with</font>

440
00:21:45,410 --> 00:21:52,070
<font color="#CCCCCC">lib father he would have found that back</font>

441
00:21:48,700 --> 00:21:54,620
so<font color="#E5E5E5"> I can recur actively created this</font>

442
00:21:52,070 --> 00:21:56,629
<font color="#CCCCCC">fuzzing stuff</font><font color="#E5E5E5"> after I knew that there</font>

443
00:21:54,620 --> 00:21:58,939
was a<font color="#CCCCCC"> bug in that function but I</font><font color="#E5E5E5"> think</font>

444
00:21:56,630 --> 00:22:01,640
it shows like how powerful that is<font color="#E5E5E5"> ended</font>

445
00:21:58,940 --> 00:22:03,620
<font color="#CCCCCC">I didn't</font><font color="#E5E5E5"> even give it any starting value</font>

446
00:22:01,640 --> 00:22:05,300
here I was<font color="#CCCCCC"> just</font><font color="#E5E5E5"> basically starting the</font>

447
00:22:03,620 --> 00:22:11,300
<font color="#CCCCCC">fuzzum</font><font color="#E5E5E5"> without a starting value so it</font>

448
00:22:05,300 --> 00:22:13,399
starts<font color="#E5E5E5"> fighting with random bytes so we</font>

449
00:22:11,300 --> 00:22:18,649
have like a real<font color="#CCCCCC"> pack with really severe</font>

450
00:22:13,400 --> 00:22:21,500
impact<font color="#E5E5E5"> and we can find it very</font><font color="#CCCCCC"> easily</font>

451
00:22:18,650 --> 00:22:23,720
so the advantage from<font color="#E5E5E5"> lip-lip</font><font color="#CCCCCC"> father</font>

452
00:22:21,500 --> 00:22:26,240
<font color="#CCCCCC">over AFL</font><font color="#E5E5E5"> is that is much faster</font><font color="#CCCCCC"> because</font>

453
00:22:23,720 --> 00:22:28,070
<font color="#E5E5E5">like we're calling functions and a</font>

454
00:22:26,240 --> 00:22:30,590
function call is faster than calling an

455
00:22:28,070 --> 00:22:33,230
executable because loading<font color="#CCCCCC"> an executable</font>

456
00:22:30,590 --> 00:22:35,149
has a lot of<font color="#CCCCCC"> overhead the disadvantages</font>

457
00:22:33,230 --> 00:22:37,550
<font color="#E5E5E5">it's more work because we</font><font color="#CCCCCC"> usually have</font>

458
00:22:35,150 --> 00:22:40,580
to write some kind<font color="#E5E5E5"> of code</font><font color="#CCCCCC"> I mean you</font>

459
00:22:37,550 --> 00:22:44,930
can see it's not<font color="#E5E5E5"> a lot of code there was</font>

460
00:22:40,580 --> 00:22:47,179
<font color="#E5E5E5">the code but it takes</font><font color="#CCCCCC"> longer like if I</font>

461
00:22:44,930 --> 00:22:49,550
start to<font color="#E5E5E5"> file something with</font><font color="#CCCCCC"> AFL it</font>

462
00:22:47,180 --> 00:22:52,340
takes me maybe like five minutes and

463
00:22:49,550 --> 00:22:54,560
<font color="#E5E5E5">then I get started</font><font color="#CCCCCC"> if I want to find</font>

464
00:22:52,340 --> 00:22:58,040
something<font color="#CCCCCC"> with Lib father it it's more</font>

465
00:22:54,560 --> 00:23:07,100
<font color="#E5E5E5">like half an hour it's not</font><font color="#CCCCCC"> dramatic but</font>

466
00:22:58,040 --> 00:23:10,610
<font color="#E5E5E5">it's definitely a higher barrier so you</font>

467
00:23:07,100 --> 00:23:13,340
probably<font color="#E5E5E5"> all</font><font color="#CCCCCC"> remember this right the</font>

468
00:23:10,610 --> 00:23:17,060
heartbleed<font color="#CCCCCC"> bug which was like</font><font color="#E5E5E5"> very</font>

469
00:23:13,340 --> 00:23:19,010
severe barking<font color="#CCCCCC"> of methacel</font><font color="#E5E5E5"> and I decided</font>

470
00:23:17,060 --> 00:23:20,870
<font color="#E5E5E5">to make a little experiment I wanted to</font>

471
00:23:19,010 --> 00:23:27,140
know could<font color="#E5E5E5"> we find a bug like hot plate</font>

472
00:23:20,870 --> 00:23:29,239
with fuzzing<font color="#E5E5E5"> and so I have to say</font>

473
00:23:27,140 --> 00:23:32,200
something<font color="#CCCCCC"> about it heartbleed was</font>

474
00:23:29,240 --> 00:23:34,280
basically found with fuzzing

475
00:23:32,200 --> 00:23:36,380
so it was found<font color="#E5E5E5"> by two people</font>

476
00:23:34,280 --> 00:23:39,110
<font color="#E5E5E5">independently but one of them was using</font>

477
00:23:36,380 --> 00:23:41,780
<font color="#E5E5E5">father but that was a specialized father</font>

478
00:23:39,110 --> 00:23:43,699
for TLS protocol and<font color="#E5E5E5"> also it's</font>

479
00:23:41,780 --> 00:23:45,590
commercial so it's not publicly

480
00:23:43,700 --> 00:23:47,840
<font color="#CCCCCC">available</font><font color="#E5E5E5"> it's not</font><font color="#CCCCCC"> free software so</font><font color="#E5E5E5"> I</font>

481
00:23:45,590 --> 00:23:53,060
<font color="#E5E5E5">cannot look at it and I cannot easily</font>

482
00:23:47,840 --> 00:23:56,540
<font color="#CCCCCC">use it</font><font color="#E5E5E5"> so but so I did an experiment</font>

483
00:23:53,060 --> 00:23:59,149
where I tried to<font color="#E5E5E5"> like fast the handshake</font>

484
00:23:56,540 --> 00:24:02,210
<font color="#CCCCCC">of</font><font color="#E5E5E5"> OpenSSL so I created a little</font>

485
00:23:59,150 --> 00:24:05,000
<font color="#E5E5E5">application</font><font color="#CCCCCC"> that would</font><font color="#E5E5E5"> basically do an</font>

486
00:24:02,210 --> 00:24:08,780
handshake with itself<font color="#E5E5E5"> and while doing</font>

487
00:24:05,000 --> 00:24:11,600
<font color="#CCCCCC">that</font><font color="#E5E5E5"> would write out all the handshake</font>

488
00:24:08,780 --> 00:24:13,310
messages into<font color="#E5E5E5"> files and then I added a</font>

489
00:24:11,600 --> 00:24:15,530
<font color="#CCCCCC">functionality that I could swap out</font><font color="#E5E5E5"> one</font>

490
00:24:13,310 --> 00:24:17,929
<font color="#CCCCCC">of these handshake messages</font><font color="#E5E5E5"> with one</font>

491
00:24:15,530 --> 00:24:19,720
that I gave<font color="#CCCCCC"> it over</font><font color="#E5E5E5"> the command line so</font>

492
00:24:17,930 --> 00:24:23,900
with that I was<font color="#E5E5E5"> able to run a</font>

493
00:24:19,720 --> 00:24:27,970
<font color="#E5E5E5">father-like</font><font color="#CCCCCC"> AFL against it and in</font>

494
00:24:23,900 --> 00:24:33,310
<font color="#CCCCCC">combination with address analyzer</font><font color="#E5E5E5"> and</font>

495
00:24:27,970 --> 00:24:36,400
after six<font color="#CCCCCC"> hours it found</font><font color="#E5E5E5"> heartbleed so</font>

496
00:24:33,310 --> 00:24:38,810
if that would have<font color="#CCCCCC"> been</font><font color="#E5E5E5"> done and I mean</font>

497
00:24:36,400 --> 00:24:40,640
it's<font color="#E5E5E5"> always kind of tricky</font><font color="#CCCCCC"> to say okay</font>

498
00:24:38,810 --> 00:24:45,260
<font color="#E5E5E5">you reader actively found something</font>

499
00:24:40,640 --> 00:24:47,000
<font color="#E5E5E5">that's easy but I I would</font><font color="#CCCCCC"> say and I mean</font>

500
00:24:45,260 --> 00:24:48,680
you can<font color="#CCCCCC"> read my blog post</font><font color="#E5E5E5"> about it I</font>

501
00:24:47,000 --> 00:24:50,600
would say that<font color="#CCCCCC"> I didn't use</font><font color="#E5E5E5"> any specific</font>

502
00:24:48,680 --> 00:24:52,460
<font color="#E5E5E5">knowledge about the heartbleed bug it</font>

503
00:24:50,600 --> 00:24:56,480
was really just fuzzing the<font color="#E5E5E5"> handshake</font>

504
00:24:52,460 --> 00:24:59,830
straightforward<font color="#CCCCCC"> what you would expect</font><font color="#E5E5E5"> if</font>

505
00:24:56,480 --> 00:25:02,360
you want to find bugs in a TLS deck

506
00:24:59,830 --> 00:25:04,129
<font color="#CCCCCC">interesting also lib further</font><font color="#E5E5E5"> I didn't</font>

507
00:25:02,360 --> 00:25:06,050
know<font color="#E5E5E5"> lib further back then but then I</font>

508
00:25:04,130 --> 00:25:08,150
got an<font color="#E5E5E5"> email from its developer who said</font>

509
00:25:06,050 --> 00:25:09,889
yeah I try<font color="#E5E5E5"> to recreate your experiment</font>

510
00:25:08,150 --> 00:25:11,240
with<font color="#CCCCCC"> Lib father and it's much faster it</font>

511
00:25:09,890 --> 00:25:17,800
can do it in five<font color="#CCCCCC"> minutes</font>

512
00:25:11,240 --> 00:25:17,800
<font color="#E5E5E5">so that shows like how much faster it is</font>

513
00:25:19,060 --> 00:25:24,050
<font color="#E5E5E5">okay</font>

514
00:25:21,010 --> 00:25:26,330
differential fast testing so what I told

515
00:25:24,050 --> 00:25:28,970
<font color="#CCCCCC">you until</font><font color="#E5E5E5"> now was mostly about these</font>

516
00:25:26,330 --> 00:25:31,939
memory<font color="#CCCCCC"> safety issues which is like the</font>

517
00:25:28,970 --> 00:25:34,430
typical<font color="#E5E5E5"> box you</font><font color="#CCCCCC"> have in C code where you</font>

518
00:25:31,940 --> 00:25:36,710
have buffer overflows buffer overeats

519
00:25:34,430 --> 00:25:39,140
<font color="#E5E5E5">but they are also</font><font color="#CCCCCC"> very different</font><font color="#E5E5E5"> kinds</font>

520
00:25:36,710 --> 00:25:41,030
of box where you can use fuzzing<font color="#E5E5E5"> and one</font>

521
00:25:39,140 --> 00:25:43,100
<font color="#E5E5E5">method and differential fast testing</font>

522
00:25:41,030 --> 00:25:45,020
means that<font color="#CCCCCC"> we are</font><font color="#E5E5E5"> facing something and</font>

523
00:25:43,100 --> 00:25:49,909
<font color="#E5E5E5">we are comparing the output of diff</font>

524
00:25:45,020 --> 00:25:52,370
implementations so when we look at

525
00:25:49,910 --> 00:25:55,550
crypto I mean crypto is ultimately just

526
00:25:52,370 --> 00:25:58,070
<font color="#E5E5E5">math right we're doing some</font><font color="#CCCCCC"> calculations</font>

527
00:25:55,550 --> 00:26:02,000
based<font color="#E5E5E5"> with some keys which are in the</font>

528
00:25:58,070 --> 00:26:04,220
endless numbers<font color="#CCCCCC"> but a question we can</font>

529
00:26:02,000 --> 00:26:07,940
ask<font color="#E5E5E5"> you is the math always correct</font><font color="#CCCCCC"> or</font>

530
00:26:04,220 --> 00:26:10,160
what if there's a bug<font color="#CCCCCC"> because</font><font color="#E5E5E5"> like if</font>

531
00:26:07,940 --> 00:26:12,980
<font color="#E5E5E5">you have bugs in the crypto that can be</font>

532
00:26:10,160 --> 00:26:16,460
pretty<font color="#CCCCCC"> devastating one example</font><font color="#E5E5E5"> for that</font>

533
00:26:12,980 --> 00:26:19,730
is<font color="#CCCCCC"> the so called RS a CRT bug</font><font color="#E5E5E5"> so if</font>

534
00:26:16,460 --> 00:26:21,830
you're doing an<font color="#CCCCCC"> RSA signature what most</font>

535
00:26:19,730 --> 00:26:24,530
<font color="#CCCCCC">real-world implementations do is that</font>

536
00:26:21,830 --> 00:26:27,740
they do some kind<font color="#CCCCCC"> of optimization</font><font color="#E5E5E5"> where</font>

537
00:26:24,530 --> 00:26:31,129
they split<font color="#E5E5E5"> up one big costly calculation</font>

538
00:26:27,740 --> 00:26:34,160
into two smaller calculations and I

539
00:26:31,130 --> 00:26:36,350
cannot go into<font color="#E5E5E5"> the details but what</font>

540
00:26:34,160 --> 00:26:39,080
happens<font color="#E5E5E5"> here is that if one</font><font color="#CCCCCC"> of these</font>

541
00:26:36,350 --> 00:26:42,020
calculations has an error in it<font color="#E5E5E5"> and it</font>

542
00:26:39,080 --> 00:26:44,929
<font color="#E5E5E5">doesn't matter what kind of error then</font>

543
00:26:42,020 --> 00:26:47,450
the<font color="#CCCCCC"> signature you</font><font color="#E5E5E5"> get reveals your</font>

544
00:26:44,930 --> 00:26:50,270
private key<font color="#E5E5E5"> and</font><font color="#CCCCCC"> that is pretty</font>

545
00:26:47,450 --> 00:26:52,490
<font color="#CCCCCC">devastating</font><font color="#E5E5E5"> and there was a very nice</font>

546
00:26:50,270 --> 00:26:56,210
paper by<font color="#E5E5E5"> Florian</font><font color="#CCCCCC"> Weimer</font><font color="#E5E5E5"> who's working at</font>

547
00:26:52,490 --> 00:26:57,770
<font color="#CCCCCC">redhead</font><font color="#E5E5E5"> where he was just connecting</font><font color="#CCCCCC"> to</font>

548
00:26:56,210 --> 00:26:59,540
all the servers<font color="#CCCCCC"> in the internet and</font>

549
00:26:57,770 --> 00:27:01,730
seeing if they give him<font color="#E5E5E5"> signatures with</font>

550
00:26:59,540 --> 00:27:06,610
this<font color="#CCCCCC"> back</font><font color="#E5E5E5"> so he could get their private</font>

551
00:27:01,730 --> 00:27:06,610
key<font color="#CCCCCC"> and he found like couple of hundred</font>

552
00:27:06,760 --> 00:27:11,150
so<font color="#E5E5E5"> it's very important that the math</font>

553
00:27:09,800 --> 00:27:15,379
<font color="#CCCCCC">we're using for our cryptographic</font>

554
00:27:11,150 --> 00:27:18,100
algorithms is correct and so one thing<font color="#CCCCCC"> I</font>

555
00:27:15,380 --> 00:27:21,650
<font color="#E5E5E5">did was take that</font><font color="#CCCCCC"> I did a calculation</font>

556
00:27:18,100 --> 00:27:23,300
<font color="#CCCCCC">with this input from a father and then</font>

557
00:27:21,650 --> 00:27:25,070
<font color="#E5E5E5">compare the</font><font color="#CCCCCC"> output of</font><font color="#E5E5E5"> two different</font>

558
00:27:23,300 --> 00:27:27,080
implementations<font color="#CCCCCC"> like for example</font><font color="#E5E5E5"> you</font>

559
00:27:25,070 --> 00:27:29,300
<font color="#CCCCCC">take oh</font><font color="#E5E5E5"> my sis</font><font color="#CCCCCC"> L and you take the</font><font color="#E5E5E5"> tree</font>

560
00:27:27,080 --> 00:27:31,280
crypt and you do something maybe a

561
00:27:29,300 --> 00:27:33,470
modular exponentiation<font color="#E5E5E5"> which is the</font>

562
00:27:31,280 --> 00:27:35,240
basic<font color="#CCCCCC"> operation for RSA and</font>

563
00:27:33,470 --> 00:27:37,280
diffie-hellman and many other crypto

564
00:27:35,240 --> 00:27:39,260
algorithms and then you see if the

565
00:27:37,280 --> 00:27:41,660
result matches<font color="#CCCCCC"> because I mean it's math</font>

566
00:27:39,260 --> 00:27:43,760
<font color="#E5E5E5">there should be only one result if you</font>

567
00:27:41,660 --> 00:27:47,300
<font color="#CCCCCC">do an exponentiation</font><font color="#E5E5E5"> there's no</font>

568
00:27:43,760 --> 00:27:49,450
ambiguity here so if you<font color="#E5E5E5"> we have</font><font color="#CCCCCC"> a</font>

569
00:27:47,300 --> 00:27:53,659
different result<font color="#E5E5E5"> that's definitely a bug</font>

570
00:27:49,450 --> 00:27:54,950
in<font color="#CCCCCC"> one of the two implementations</font><font color="#E5E5E5"> and</font>

571
00:27:53,660 --> 00:27:57,230
that turned out<font color="#CCCCCC"> to be pretty successful</font>

572
00:27:54,950 --> 00:27:58,890
so<font color="#CCCCCC"> I found a bargain the modular</font>

573
00:27:57,230 --> 00:28:02,400
exponentiation<font color="#E5E5E5"> of</font><font color="#CCCCCC"> OpenSSL</font>

574
00:27:58,890 --> 00:28:04,980
I found one in NSS<font color="#CCCCCC"> I found several bugs</font>

575
00:28:02,400 --> 00:28:07,429
<font color="#E5E5E5">in the elliptic curve operation of metal</font>

576
00:28:04,980 --> 00:28:10,650
which<font color="#CCCCCC"> is the library used by new TLS I</font>

577
00:28:07,429 --> 00:28:14,520
found a back in the<font color="#CCCCCC"> Palio 1305</font>

578
00:28:10,650 --> 00:28:16,950
Authenticator and<font color="#CCCCCC"> OpenSSL</font><font color="#E5E5E5"> before it was</font>

579
00:28:14,520 --> 00:28:19,740
officially<font color="#CCCCCC"> released so it got</font><font color="#E5E5E5"> fixed for</font>

580
00:28:16,950 --> 00:28:22,350
release<font color="#E5E5E5"> that's always nice</font><font color="#CCCCCC"> and in matrix</font>

581
00:28:19,740 --> 00:28:22,920
<font color="#CCCCCC">SL and here with the matrix this is L</font>

582
00:28:22,350 --> 00:28:25,730
<font color="#CCCCCC">box</font>

583
00:28:22,920 --> 00:28:28,290
I very much suspect that some of<font color="#E5E5E5"> the</font>

584
00:28:25,730 --> 00:28:30,960
some of the key is<font color="#E5E5E5"> Florian</font><font color="#CCCCCC"> Weimer</font><font color="#E5E5E5"> was</font>

585
00:28:28,290 --> 00:28:38,820
able to extract<font color="#E5E5E5"> from</font><font color="#CCCCCC"> devices were due to</font>

586
00:28:30,960 --> 00:28:41,309
this back yeah so yeah so<font color="#E5E5E5"> this kind of</font>

587
00:28:38,820 --> 00:28:43,139
shows<font color="#CCCCCC"> that you can also</font><font color="#E5E5E5"> use fuzzing to</font>

588
00:28:41,309 --> 00:28:49,530
find completely different classes<font color="#CCCCCC"> of</font>

589
00:28:43,140 --> 00:28:54,000
<font color="#CCCCCC">bugs yeah</font><font color="#E5E5E5"> and I want to talk a bit why</font>

590
00:28:49,530 --> 00:28:55,770
this<font color="#E5E5E5"> all matters so I mean we heard</font>

591
00:28:54,000 --> 00:28:58,040
<font color="#CCCCCC">earlier that many of you</font><font color="#E5E5E5"> are using Linux</font>

592
00:28:55,770 --> 00:29:01,049
<font color="#E5E5E5">that's great</font><font color="#CCCCCC"> because it's free software</font>

593
00:28:58,040 --> 00:29:04,860
gives<font color="#E5E5E5"> you freedom to change it and so on</font>

594
00:29:01,049 --> 00:29:06,870
<font color="#E5E5E5">but how secure is that and we have</font>

595
00:29:04,860 --> 00:29:11,879
actually<font color="#E5E5E5"> some pretty scary attack</font>

596
00:29:06,870 --> 00:29:14,580
surfaces<font color="#E5E5E5"> on typical</font><font color="#CCCCCC"> Linux desktops</font><font color="#E5E5E5"> so</font>

597
00:29:11,880 --> 00:29:17,400
there was a very<font color="#E5E5E5"> interesting exploit a</font>

598
00:29:14,580 --> 00:29:19,470
while ago<font color="#CCCCCC"> so there</font><font color="#E5E5E5"> are a couple</font><font color="#CCCCCC"> of</font>

599
00:29:17,400 --> 00:29:21,059
browsers<font color="#CCCCCC"> that automatically download</font>

600
00:29:19,470 --> 00:29:23,190
files and put it in<font color="#E5E5E5"> your downloads</font>

601
00:29:21,059 --> 00:29:26,520
directory for example chrome<font color="#E5E5E5"> does that</font>

602
00:29:23,190 --> 00:29:30,660
but also<font color="#E5E5E5"> epiphany which is then a Chrome</font>

603
00:29:26,520 --> 00:29:33,168
browser<font color="#CCCCCC"> so basically that means</font><font color="#E5E5E5"> a web</font>

604
00:29:30,660 --> 00:29:37,799
<font color="#E5E5E5">page can create files on your hard disk</font>

605
00:29:33,169 --> 00:29:40,320
<font color="#E5E5E5">which may</font><font color="#CCCCCC"> be concerning and then we have</font>

606
00:29:37,799 --> 00:29:44,490
things desktop search tools that

607
00:29:40,320 --> 00:29:46,559
automatically index all those files like

608
00:29:44,490 --> 00:29:51,540
<font color="#E5E5E5">gnome has something called tracker and</font>

609
00:29:46,559 --> 00:29:54,720
<font color="#E5E5E5">KD has something called</font><font color="#CCCCCC"> Balu</font><font color="#E5E5E5"> and then</font>

610
00:29:51,540 --> 00:29:57,600
like this this Search Indexing tools

611
00:29:54,720 --> 00:29:59,130
then use a lot of<font color="#CCCCCC"> code</font><font color="#E5E5E5"> to kind of index</font>

612
00:29:57,600 --> 00:30:01,980
your file for example<font color="#CCCCCC"> to extract</font>

613
00:29:59,130 --> 00:30:04,470
metadata or generate something<font color="#CCCCCC"> or</font>

614
00:30:01,980 --> 00:30:06,830
<font color="#E5E5E5">whatever and if you can find a bug in</font>

615
00:30:04,470 --> 00:30:10,169
<font color="#CCCCCC">one of those parcels that's exploitable</font>

616
00:30:06,830 --> 00:30:12,060
<font color="#E5E5E5">then you end up that from a</font><font color="#CCCCCC"> webpage you</font>

617
00:30:10,169 --> 00:30:16,410
<font color="#CCCCCC">can exploit that</font><font color="#E5E5E5"> code</font>

618
00:30:12,060 --> 00:30:19,889
on your<font color="#CCCCCC"> linux machine and these these</font>

619
00:30:16,410 --> 00:30:24,290
<font color="#E5E5E5">tools use many</font><font color="#CCCCCC"> process</font><font color="#E5E5E5"> that are not very</font>

620
00:30:19,890 --> 00:30:27,990
well<font color="#CCCCCC"> tested for security</font><font color="#E5E5E5"> issues</font><font color="#CCCCCC"> and</font>

621
00:30:24,290 --> 00:30:30,899
<font color="#E5E5E5">Chris Evans he is a security</font><font color="#CCCCCC"> researcher</font>

622
00:30:27,990 --> 00:30:34,020
<font color="#E5E5E5">he he found a back where he could use a</font>

623
00:30:30,900 --> 00:30:36,600
<font color="#CCCCCC">partner</font><font color="#E5E5E5"> for Nintendo sound files which</font>

624
00:30:34,020 --> 00:30:40,950
is<font color="#E5E5E5"> more or</font><font color="#CCCCCC"> less kind</font><font color="#E5E5E5"> of like an emulator</font>

625
00:30:36,600 --> 00:30:45,179
<font color="#CCCCCC">of that sound chip in gstreamer to to</font>

626
00:30:40,950 --> 00:30:47,310
exploit a Linux desktop<font color="#E5E5E5"> from</font><font color="#CCCCCC"> web page so</font>

627
00:30:45,180 --> 00:30:50,940
<font color="#E5E5E5">web page downloads file the file gets</font>

628
00:30:47,310 --> 00:30:52,950
indexed by tracker<font color="#E5E5E5"> tracker passes it to</font>

629
00:30:50,940 --> 00:30:54,840
tree<font color="#E5E5E5"> streamer tree streamer passes into</font>

630
00:30:52,950 --> 00:30:58,040
some kind of<font color="#E5E5E5"> Nintendo sound file parser</font>

631
00:30:54,840 --> 00:31:02,659
<font color="#CCCCCC">and that could be exploited</font>

632
00:30:58,040 --> 00:31:06,120
so we're exposing all this code which

633
00:31:02,660 --> 00:31:08,400
it's very<font color="#CCCCCC"> often</font><font color="#E5E5E5"> not very secure to files</font>

634
00:31:06,120 --> 00:31:11,669
from the<font color="#E5E5E5"> internet</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> a bit</font>

635
00:31:08,400 --> 00:31:15,060
concerning<font color="#E5E5E5"> yeah</font>

636
00:31:11,670 --> 00:31:17,280
that basically sums<font color="#CCCCCC"> it up</font><font color="#E5E5E5"> so I've given</font>

637
00:31:15,060 --> 00:31:19,200
<font color="#E5E5E5">a whole talk about this at FOSDEM</font><font color="#CCCCCC"> if you</font>

638
00:31:17,280 --> 00:31:25,470
want to look it up it should<font color="#CCCCCC"> be online</font>

639
00:31:19,200 --> 00:31:28,140
<font color="#CCCCCC">on YouTube so</font><font color="#E5E5E5"> you know in reaction to</font>

640
00:31:25,470 --> 00:31:31,290
this<font color="#E5E5E5"> head sandbox the desktop search now</font>

641
00:31:28,140 --> 00:31:33,240
<font color="#CCCCCC">and also</font><font color="#E5E5E5"> the thumbnail</font><font color="#CCCCCC"> because you have</font>

642
00:31:31,290 --> 00:31:35,670
a very<font color="#CCCCCC"> similar</font><font color="#E5E5E5"> issue with the thumbnail</font>

643
00:31:33,240 --> 00:31:37,950
<font color="#CCCCCC">uh so in the if you open a file manager</font>

644
00:31:35,670 --> 00:31:40,230
then it will automatically create a

645
00:31:37,950 --> 00:31:42,690
small<font color="#CCCCCC"> version of this like a small image</font>

646
00:31:40,230 --> 00:31:46,200
of that<font color="#E5E5E5"> file and that also exposes a lot</font>

647
00:31:42,690 --> 00:31:49,950
of potentially insecure code to

648
00:31:46,200 --> 00:31:53,250
untrusted input Katie has not done

649
00:31:49,950 --> 00:31:55,350
anything in that direction<font color="#CCCCCC"> so if you're</font>

650
00:31:53,250 --> 00:32:00,210
using KDE you should be maybe<font color="#E5E5E5"> a bit</font>

651
00:31:55,350 --> 00:32:01,649
concerned about<font color="#E5E5E5"> this yeah and also in</font>

652
00:32:00,210 --> 00:32:04,020
reaction to<font color="#E5E5E5"> that like I have started</font>

653
00:32:01,650 --> 00:32:08,010
<font color="#E5E5E5">passing</font><font color="#CCCCCC"> tree</font><font color="#E5E5E5"> streamer and it was led</font><font color="#CCCCCC"> to</font>

654
00:32:04,020 --> 00:32:09,900
like 20 bucks fixed<font color="#E5E5E5"> but there's a lot</font>

655
00:32:08,010 --> 00:32:12,530
<font color="#E5E5E5">more code that is exposed through these</font>

656
00:32:09,900 --> 00:32:12,530
mechanisms

657
00:32:13,510 --> 00:32:19,750
so to get<font color="#CCCCCC"> to conclusion so so I know</font>

658
00:32:18,040 --> 00:32:22,059
<font color="#E5E5E5">that a lot of people say we should not</font>

659
00:32:19,750 --> 00:32:25,090
no<font color="#E5E5E5"> longer you see at all</font><font color="#CCCCCC"> we should</font>

660
00:32:22,059 --> 00:32:30,399
<font color="#E5E5E5">rewrite everything in rust or whatever</font>

661
00:32:25,090 --> 00:32:31,928
it go or<font color="#CCCCCC"> Haskell but realistically there</font>

662
00:32:30,400 --> 00:32:34,960
are still a lot of<font color="#E5E5E5"> C code that we're</font>

663
00:32:31,929 --> 00:32:36,790
using<font color="#E5E5E5"> right</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> probably your operating</font>

664
00:32:34,960 --> 00:32:38,820
system is written in C<font color="#CCCCCC"> your browser's</font>

665
00:32:36,790 --> 00:32:43,780
<font color="#E5E5E5">written in C and</font><font color="#CCCCCC"> most of the attack</font>

666
00:32:38,820 --> 00:32:45,639
<font color="#E5E5E5">application to use also so but with a</font>

667
00:32:43,780 --> 00:32:48,160
combination<font color="#CCCCCC"> of</font><font color="#E5E5E5"> using these sanitizer</font>

668
00:32:45,640 --> 00:32:50,760
features and with fuzzing we were able

669
00:32:48,160 --> 00:32:54,580
to discover a<font color="#E5E5E5"> lot of</font><font color="#CCCCCC"> these typical C box</font>

670
00:32:50,760 --> 00:33:01,720
<font color="#CCCCCC">and we should do</font><font color="#E5E5E5"> that and I mean the the</font>

671
00:32:54,580 --> 00:33:04,639
<font color="#CCCCCC">tools are free</font><font color="#E5E5E5"> so please use them yeah</font>

672
00:33:01,720 --> 00:33:06,120
<font color="#E5E5E5">that was it</font><font color="#CCCCCC"> Thanks</font>

673
00:33:04,640 --> 00:33:09,670
[Applause]

674
00:33:06,120 --> 00:33:09,669
[Music]

675
00:33:13,909 --> 00:33:21,740
so if there are any questions<font color="#E5E5E5"> we have</font>

676
00:33:16,380 --> 00:33:21,740
two mics open in the middle<font color="#E5E5E5"> go get there</font>

677
00:33:23,360 --> 00:33:28,918
hi hon oh thanks<font color="#E5E5E5"> for the talk it was</font>

678
00:33:26,010 --> 00:33:30,809
very<font color="#E5E5E5"> nice and entertaining</font><font color="#CCCCCC"> I was</font><font color="#E5E5E5"> just</font>

679
00:33:28,919 --> 00:33:32,760
like I have no questions I<font color="#E5E5E5"> was just like</font>

680
00:33:30,809 --> 00:33:35,309
to thank<font color="#E5E5E5"> you</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> all the work you've</font>

681
00:33:32,760 --> 00:33:37,830
done<font color="#E5E5E5"> because in my personal opinion you</font>

682
00:33:35,309 --> 00:33:40,408
<font color="#CCCCCC">make the</font><font color="#E5E5E5"> software we all use every</font>

683
00:33:37,830 --> 00:33:49,740
<font color="#E5E5E5">fucking day</font><font color="#CCCCCC"> way</font><font color="#E5E5E5"> better and safer so</font>

684
00:33:40,409 --> 00:33:52,190
thank you from my heart but<font color="#E5E5E5"> you can do</font>

685
00:33:49,740 --> 00:33:52,190
that too

686
00:33:54,320 --> 00:34:00,600
hey I had a question<font color="#E5E5E5"> you</font><font color="#CCCCCC"> said you find</font>

687
00:33:57,900 --> 00:34:03,210
the<font color="#E5E5E5"> heartbleed perk using fussing but as</font>

688
00:34:00,600 --> 00:34:06,689
I understand it the<font color="#CCCCCC"> Heartlake</font><font color="#E5E5E5"> book was</font>

689
00:34:03,210 --> 00:34:08,580
one<font color="#CCCCCC"> that leaked information without</font>

690
00:34:06,690 --> 00:34:12,149
<font color="#E5E5E5">doing any sorts of crashes or anything</font>

691
00:34:08,580 --> 00:34:15,359
<font color="#E5E5E5">yeah sort of addressing it either comes</font>

692
00:34:12,149 --> 00:34:20,279
in so it<font color="#CCCCCC"> happened it was a classic</font>

693
00:34:15,359 --> 00:34:23,668
<font color="#CCCCCC">before overeat</font><font color="#E5E5E5"> right so you had a you</font>

694
00:34:20,280 --> 00:34:25,320
had<font color="#CCCCCC"> a length</font><font color="#E5E5E5"> and a message and you</font><font color="#CCCCCC"> could</font>

695
00:34:23,668 --> 00:34:26,819
give the longer length than the<font color="#E5E5E5"> message</font>

696
00:34:25,320 --> 00:34:30,270
and<font color="#E5E5E5"> then it would just read random</font>

697
00:34:26,820 --> 00:34:32,580
memory<font color="#E5E5E5"> but address sanitizer detects</font>

698
00:34:30,270 --> 00:34:34,259
<font color="#E5E5E5">exactly these things</font><font color="#CCCCCC"> so if you read past</font>

699
00:34:32,580 --> 00:34:36,449
<font color="#E5E5E5">the bounce of a buffer then address in</font>

700
00:34:34,260 --> 00:34:40,409
the size of a<font color="#CCCCCC"> crash' application of</font>

701
00:34:36,449 --> 00:34:40,980
course<font color="#E5E5E5"> good answer thank you yeah in the</font>

702
00:34:40,409 --> 00:34:44,339
front

703
00:34:40,980 --> 00:34:46,260
hi so you said that you recompile gen 2

704
00:34:44,339 --> 00:34:46,859
using a<font color="#CCCCCC"> zone right</font><font color="#E5E5E5"> yeah the address</font>

705
00:34:46,260 --> 00:34:49,169
<font color="#CCCCCC">sanitizer</font>

706
00:34:46,859 --> 00:34:50,790
so actually I did the<font color="#E5E5E5"> same but</font><font color="#CCCCCC"> like when</font>

707
00:34:49,168 --> 00:34:52,949
I<font color="#CCCCCC"> tried to</font><font color="#E5E5E5"> use double gate I already</font>

708
00:34:50,790 --> 00:34:55,560
found<font color="#CCCCCC"> a bug so I give up on</font><font color="#E5E5E5"> that part I</font>

709
00:34:52,949 --> 00:34:58,830
I'm happy<font color="#CCCCCC"> that you go down that path</font><font color="#E5E5E5"> and</font>

710
00:34:55,560 --> 00:35:01,140
<font color="#CCCCCC">find all those box so but have you told</font>

711
00:34:58,830 --> 00:35:03,690
because if you know<font color="#CCCCCC"> gen 2 also has a way</font>

712
00:35:01,140 --> 00:35:06,629
to test each package after<font color="#CCCCCC"> you build it</font>

713
00:35:03,690 --> 00:35:08,970
so maybe you could also run the test

714
00:35:06,630 --> 00:35:11,490
<font color="#CCCCCC">suite and not just try to use the master</font>

715
00:35:08,970 --> 00:35:15,779
<font color="#E5E5E5">and I actually did that</font>

716
00:35:11,490 --> 00:35:19,379
<font color="#CCCCCC">I</font><font color="#E5E5E5"> didn't go through</font><font color="#CCCCCC"> all the things that</font>

717
00:35:15,780 --> 00:35:20,850
<font color="#CCCCCC">it</font><font color="#E5E5E5"> found and reported it because it was</font>

718
00:35:19,380 --> 00:35:23,280
<font color="#CCCCCC">just</font><font color="#E5E5E5"> too much</font><font color="#CCCCCC"> eh</font>

719
00:35:20,850 --> 00:35:26,790
I went through the relevant packages and

720
00:35:23,280 --> 00:35:30,420
did then<font color="#CCCCCC"> all right</font><font color="#E5E5E5"> thank you in the back</font>

721
00:35:26,790 --> 00:35:33,660
thank<font color="#E5E5E5"> you</font><font color="#CCCCCC"> for that</font><font color="#E5E5E5"> awesome talk so I've</font>

722
00:35:30,420 --> 00:35:36,420
never used the code sanitizer<font color="#CCCCCC"> but I used</font>

723
00:35:33,660 --> 00:35:39,379
for grinds<font color="#CCCCCC"> how do they compare</font><font color="#E5E5E5"> yeah okay</font>

724
00:35:36,420 --> 00:35:42,810
<font color="#E5E5E5">that's actually</font><font color="#CCCCCC"> a good question</font><font color="#E5E5E5"> so so I</font>

725
00:35:39,380 --> 00:35:47,640
<font color="#CCCCCC">think what grind is mostly deprecated</font>

726
00:35:42,810 --> 00:35:50,400
these days<font color="#CCCCCC"> so it</font><font color="#E5E5E5"> it's an awesome tool</font>

727
00:35:47,640 --> 00:35:52,950
<font color="#E5E5E5">for what it's doing</font><font color="#CCCCCC"> but address</font>

728
00:35:50,400 --> 00:35:55,230
sanitizer kind of covers most of<font color="#CCCCCC"> the</font>

729
00:35:52,950 --> 00:35:57,868
<font color="#CCCCCC">things that</font><font color="#E5E5E5"> warrant covers it covers</font>

730
00:35:55,230 --> 00:36:01,280
<font color="#CCCCCC">bugs that by definition</font><font color="#E5E5E5"> you cannot find</font>

731
00:35:57,869 --> 00:36:03,960
with a runtime tool<font color="#E5E5E5"> and it's much faster</font>

732
00:36:01,280 --> 00:36:05,760
<font color="#E5E5E5">the</font><font color="#CCCCCC"> only thing</font><font color="#E5E5E5"> more wine</font><font color="#CCCCCC"> fines that</font>

733
00:36:03,960 --> 00:36:08,760
<font color="#E5E5E5">address sanitizer doesn't find is</font>

734
00:36:05,760 --> 00:36:11,369
uninitialized memory and<font color="#E5E5E5"> therefore</font>

735
00:36:08,760 --> 00:36:14,190
there's memory sanitizer but memory

736
00:36:11,369 --> 00:36:16,050
sanitizer is a bit more tricky<font color="#CCCCCC"> to use so</font>

737
00:36:14,190 --> 00:36:19,020
they're kind of<font color="#CCCCCC"> well grind</font><font color="#E5E5E5"> may still</font>

738
00:36:16,050 --> 00:36:21,480
have a use case but it's actually

739
00:36:19,020 --> 00:36:23,880
<font color="#CCCCCC">something that that I'm</font><font color="#E5E5E5"> trying to pre</font>

740
00:36:21,480 --> 00:36:28,260
trib it that that<font color="#E5E5E5"> address any</font><font color="#CCCCCC"> tile is</font>

741
00:36:23,880 --> 00:36:29,940
kind of like<font color="#CCCCCC"> war</font><font color="#E5E5E5"> going but better</font><font color="#CCCCCC"> and if</font>

742
00:36:28,260 --> 00:36:36,450
you're only using<font color="#CCCCCC"> work right</font><font color="#E5E5E5"> these days</font>

743
00:36:29,940 --> 00:36:38,600
<font color="#CCCCCC">I'd say you're</font><font color="#E5E5E5"> doing it wrong hi thanks</font>

744
00:36:36,450 --> 00:36:43,740
for<font color="#E5E5E5"> a talk what do you think about</font>

745
00:36:38,600 --> 00:36:46,259
sanitizers as security features yeah

746
00:36:43,740 --> 00:36:47,459
<font color="#CCCCCC">okay so a good</font><font color="#E5E5E5"> question</font><font color="#CCCCCC"> I I thought</font>

747
00:36:46,260 --> 00:36:54,410
that's a<font color="#E5E5E5"> good idea</font>

748
00:36:47,460 --> 00:36:58,680
but I was corrected so address analyzer

749
00:36:54,410 --> 00:37:00,810
<font color="#CCCCCC">so so I had the idea to say</font><font color="#E5E5E5"> okay it has</font>

750
00:36:58,680 --> 00:37:04,080
a huge overhead but maybe you can afford

751
00:37:00,810 --> 00:37:06,000
<font color="#E5E5E5">it</font><font color="#CCCCCC"> for a high secure system the problem</font>

752
00:37:04,080 --> 00:37:08,759
is<font color="#E5E5E5"> that addressing each other</font><font color="#CCCCCC"> basically</font>

753
00:37:06,000 --> 00:37:11,670
a disables<font color="#E5E5E5"> SLR and</font><font color="#CCCCCC"> a bunch of other</font>

754
00:37:08,760 --> 00:37:14,010
security<font color="#E5E5E5"> features then you can use</font>

755
00:37:11,670 --> 00:37:16,590
address and it has<font color="#CCCCCC"> a crash reporting</font><font color="#E5E5E5"> to</font>

756
00:37:14,010 --> 00:37:17,670
to get<font color="#CCCCCC"> route if you have a</font><font color="#E5E5E5"> suit binary</font>

757
00:37:16,590 --> 00:37:19,920
compiled with it

758
00:37:17,670 --> 00:37:23,190
so there<font color="#E5E5E5"> are a bunch of</font><font color="#CCCCCC"> issues with it</font>

759
00:37:19,920 --> 00:37:24,690
there was<font color="#CCCCCC"> a very detailed</font><font color="#E5E5E5"> post on all</font>

760
00:37:23,190 --> 00:37:27,000
the security

761
00:37:24,690 --> 00:37:28,970
<font color="#CCCCCC">whereas someone</font><font color="#E5E5E5"> said</font><font color="#CCCCCC"> a detail these</font><font color="#E5E5E5"> all</font>

762
00:37:27,000 --> 00:37:32,460
<font color="#E5E5E5">these issues that come</font><font color="#CCCCCC"> up so</font><font color="#E5E5E5"> it's not</font>

763
00:37:28,970 --> 00:37:34,169
it's but it's<font color="#E5E5E5"> very not designed to</font><font color="#CCCCCC"> be a</font>

764
00:37:32,460 --> 00:37:36,510
security feature it's a debugging

765
00:37:34,170 --> 00:37:40,970
<font color="#E5E5E5">feature to find Baxter for developers</font>

766
00:37:36,510 --> 00:37:44,280
<font color="#E5E5E5">and do it do you see some way to make it</font>

767
00:37:40,970 --> 00:37:52,680
<font color="#CCCCCC">more security</font><font color="#E5E5E5"> feature more as a</font><font color="#CCCCCC"> security</font>

768
00:37:44,280 --> 00:37:56,790
feature maybe modify it somehow<font color="#E5E5E5"> that may</font>

769
00:37:52,680 --> 00:37:58,259
be<font color="#E5E5E5"> possible</font><font color="#CCCCCC"> but I I don't</font><font color="#E5E5E5"> have a I don't</font>

770
00:37:56,790 --> 00:38:00,450
<font color="#CCCCCC">know I don't have a good answer to that</font>

771
00:37:58,260 --> 00:38:03,060
<font color="#E5E5E5">maybe that's possible but one would have</font>

772
00:38:00,450 --> 00:38:06,328
<font color="#CCCCCC">to go like into the very details on how</font>

773
00:38:03,060 --> 00:38:10,049
<font color="#CCCCCC">it works</font><font color="#E5E5E5"> and check that and I know but I</font>

774
00:38:06,329 --> 00:38:14,040
mean the<font color="#CCCCCC"> the thing is</font><font color="#E5E5E5"> like there are</font>

775
00:38:10,050 --> 00:38:15,630
some new exploit mitigations<font color="#E5E5E5"> that that</font>

776
00:38:14,040 --> 00:38:18,900
are<font color="#CCCCCC"> available but they are not widely</font>

777
00:38:15,630 --> 00:38:20,790
used<font color="#E5E5E5"> and the thing with exploit</font>

778
00:38:18,900 --> 00:38:22,680
mitigations is<font color="#CCCCCC"> you people only use them</font>

779
00:38:20,790 --> 00:38:25,800
<font color="#CCCCCC">if they have a very</font><font color="#E5E5E5"> small overhead</font><font color="#CCCCCC"> I</font>

780
00:38:22,680 --> 00:38:27,598
mean it took us like<font color="#E5E5E5"> more than</font><font color="#CCCCCC"> 10 years</font>

781
00:38:25,800 --> 00:38:32,640
to<font color="#E5E5E5"> convince Linux distributions to to</font>

782
00:38:27,599 --> 00:38:35,400
<font color="#E5E5E5">enable</font><font color="#CCCCCC"> SLR and</font><font color="#E5E5E5"> you won't sell them a</font>

783
00:38:32,640 --> 00:38:39,990
feature that<font color="#CCCCCC"> has 50%</font><font color="#E5E5E5"> overhead in</font><font color="#CCCCCC"> runtime</font>

784
00:38:35,400 --> 00:38:41,730
<font color="#E5E5E5">and even more in memory use so I would</font>

785
00:38:39,990 --> 00:38:43,709
not<font color="#CCCCCC"> be overly optimistic and</font><font color="#E5E5E5"> I think</font>

786
00:38:41,730 --> 00:38:47,250
maybe it's<font color="#CCCCCC"> just not the right tool for</font>

787
00:38:43,710 --> 00:38:51,000
exploit mitigation thank you in the

788
00:38:47,250 --> 00:38:54,210
front what's about some complex systems

789
00:38:51,000 --> 00:38:56,480
<font color="#E5E5E5">like Nvidia CUDA if I want to find out</font>

790
00:38:54,210 --> 00:38:59,369
<font color="#E5E5E5">sell some</font><font color="#CCCCCC"> box or security</font>

791
00:38:56,480 --> 00:39:02,550
vulnerabilities in it because secured

792
00:38:59,369 --> 00:39:07,530
our library and<font color="#CCCCCC"> Nvidia driver</font><font color="#E5E5E5"> are closed</font>

793
00:39:02,550 --> 00:39:10,140
source and NVIDIA GPU and film are also

794
00:39:07,530 --> 00:39:15,839
closed<font color="#E5E5E5"> things and our domains between it</font>

795
00:39:10,140 --> 00:39:17,609
<font color="#CCCCCC">I have no</font><font color="#E5E5E5"> idea sorry</font><font color="#CCCCCC"> I mean yeah that</font>

796
00:39:15,839 --> 00:39:19,560
<font color="#CCCCCC">you're</font><font color="#E5E5E5"> basically going to</font><font color="#CCCCCC"> a completely</font>

797
00:39:17,609 --> 00:39:24,720
<font color="#CCCCCC">different</font><font color="#E5E5E5"> art architecture with</font>

798
00:39:19,560 --> 00:39:27,029
different system design and<font color="#E5E5E5"> yeah I don't</font>

799
00:39:24,720 --> 00:39:29,399
<font color="#CCCCCC">think the</font><font color="#E5E5E5"> things I presented here apply</font>

800
00:39:27,030 --> 00:39:31,910
to that it's<font color="#E5E5E5"> just kind of a completely</font>

801
00:39:29,400 --> 00:39:31,910
<font color="#E5E5E5">different domain</font>

802
00:39:32,110 --> 00:39:36,490
are there more<font color="#CCCCCC"> questions</font>

803
00:39:37,390 --> 00:39:41,879
<font color="#CCCCCC">three-two-one no okay</font><font color="#E5E5E5"> then thank</font><font color="#CCCCCC"> you hon</font>

804
00:39:40,610 --> 00:39:42,120
<font color="#E5E5E5">Oh</font>

805
00:39:41,880 --> 00:39:49,920
[Music]

806
00:39:42,120 --> 00:40:02,069
[Applause]

807
00:39:49,920 --> 00:40:02,070
[Music]

