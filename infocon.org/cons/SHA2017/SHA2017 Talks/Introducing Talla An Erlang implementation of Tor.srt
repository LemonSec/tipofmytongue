1
00:00:00,000 --> 00:00:08,800
[Music]

2
00:00:15,039 --> 00:00:18,680
thank you all<font color="#E5E5E5"> for showing up today</font>

3
00:00:17,029 --> 00:00:21,740
<font color="#CCCCCC">I'm going to talk a bit about</font><font color="#E5E5E5"> my pet</font>

4
00:00:18,680 --> 00:00:23,029
project called<font color="#E5E5E5"> Tala</font><font color="#CCCCCC"> it's gonna take 30</font>

5
00:00:21,740 --> 00:00:26,808
<font color="#CCCCCC">to 40 minutes and</font><font color="#E5E5E5"> then there will be</font>

6
00:00:23,029 --> 00:00:28,550
questions afterwards<font color="#E5E5E5"> and so the</font><font color="#CCCCCC"> targets</font>

7
00:00:26,809 --> 00:00:29,719
<font color="#E5E5E5">gonna be split into a couple of points</font>

8
00:00:28,550 --> 00:00:31,219
we're gonna start<font color="#E5E5E5"> with an introduction</font>

9
00:00:29,719 --> 00:00:33,230
<font color="#CCCCCC">then we're gonna talk a little bit about</font>

10
00:00:31,219 --> 00:00:36,260
the C programming language<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> all</font>

11
00:00:33,230 --> 00:00:38,599
love<font color="#CCCCCC"> then we're gonna walk</font><font color="#E5E5E5"> over a bit</font><font color="#CCCCCC"> of</font>

12
00:00:36,260 --> 00:00:41,089
the architecture behind Tala<font color="#E5E5E5"> some</font>

13
00:00:38,600 --> 00:00:44,149
testing<font color="#E5E5E5"> and how we represent a very</font>

14
00:00:41,090 --> 00:00:46,609
specific component of the software<font color="#E5E5E5"> in</font>

15
00:00:44,149 --> 00:00:48,589
our line<font color="#E5E5E5"> and then at the end there's</font>

16
00:00:46,609 --> 00:00:50,179
<font color="#E5E5E5">questions if there's anything you want</font>

17
00:00:48,589 --> 00:00:51,679
to sort<font color="#E5E5E5"> of interrupt me with and ask a</font>

18
00:00:50,179 --> 00:00:53,710
question<font color="#CCCCCC"> during the talk feel free to do</font>

19
00:00:51,679 --> 00:00:53,710
so

20
00:00:54,920 --> 00:01:01,839
so<font color="#E5E5E5"> Tala is an attempt to write a robust</font>

21
00:00:58,480 --> 00:01:04,489
<font color="#E5E5E5">third-party implementation of tor</font><font color="#CCCCCC"> I</font>

22
00:01:01,839 --> 00:01:06,470
decided to do it<font color="#E5E5E5"> in Erlang because I</font>

23
00:01:04,489 --> 00:01:08,360
really<font color="#CCCCCC"> liked Erlang</font><font color="#E5E5E5"> is there anyone in</font>

24
00:01:06,470 --> 00:01:10,130
<font color="#CCCCCC">here who's familiar with Erlang</font><font color="#E5E5E5"> then you</font>

25
00:01:08,360 --> 00:01:11,420
can<font color="#E5E5E5"> raise</font><font color="#CCCCCC"> the head oh wow there's a</font><font color="#E5E5E5"> lot</font>

26
00:01:10,130 --> 00:01:13,640
of people<font color="#E5E5E5"> cool very cool</font>

27
00:01:11,420 --> 00:01:15,259
<font color="#CCCCCC">so this</font><font color="#E5E5E5"> is also</font><font color="#CCCCCC"> talk to create some</font>

28
00:01:13,640 --> 00:01:16,729
<font color="#E5E5E5">enthusiasm for the project</font><font color="#CCCCCC"> so if you</font>

29
00:01:15,259 --> 00:01:21,439
want<font color="#E5E5E5"> to hack on</font><font color="#CCCCCC"> it afterwards</font><font color="#E5E5E5"> come by to</font>

30
00:01:16,729 --> 00:01:24,229
me and we<font color="#CCCCCC"> can talk</font><font color="#E5E5E5"> about</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> um it was</font>

31
00:01:21,439 --> 00:01:25,939
also I everyone<font color="#CCCCCC"> who's</font><font color="#E5E5E5"> here I guess knows</font>

32
00:01:24,229 --> 00:01:29,929
something about tor and knows like the e

33
00:01:25,939 --> 00:01:32,389
FF picture with with how<font color="#E5E5E5"> tall works does</font>

34
00:01:29,930 --> 00:01:34,490
<font color="#E5E5E5">everyone know that</font><font color="#CCCCCC"> picture it's used</font>

35
00:01:32,390 --> 00:01:36,079
quite<font color="#E5E5E5"> a lot and I wanted</font><font color="#CCCCCC"> to know a</font><font color="#E5E5E5"> bit</font>

36
00:01:34,490 --> 00:01:37,759
more<font color="#E5E5E5"> deep how it</font><font color="#CCCCCC"> worked so I wanted</font><font color="#E5E5E5"> to</font>

37
00:01:36,079 --> 00:01:39,619
try to<font color="#E5E5E5"> implement look at the specs see</font>

38
00:01:37,759 --> 00:01:41,420
how it works<font color="#E5E5E5"> see how what are the</font>

39
00:01:39,619 --> 00:01:45,200
<font color="#E5E5E5">problems with designing these things and</font>

40
00:01:41,420 --> 00:01:47,840
so<font color="#E5E5E5"> on</font><font color="#CCCCCC"> it's also one of those typical</font>

41
00:01:45,200 --> 00:01:49,880
<font color="#CCCCCC">evening only open</font><font color="#E5E5E5"> source projects where</font>

42
00:01:47,840 --> 00:01:52,520
I have a<font color="#E5E5E5"> little time every now and then</font>

43
00:01:49,880 --> 00:01:54,350
<font color="#CCCCCC">and if I have</font><font color="#E5E5E5"> time to hack a bit on it I</font>

44
00:01:52,520 --> 00:01:56,270
do<font color="#E5E5E5"> it but other than that it</font><font color="#CCCCCC"> doesn't get</font>

45
00:01:54,350 --> 00:02:00,469
too much<font color="#CCCCCC"> attention</font><font color="#E5E5E5"> because I also have a</font>

46
00:01:56,270 --> 00:02:02,179
work to<font color="#E5E5E5"> do so a little bit of the</font>

47
00:02:00,469 --> 00:02:04,850
history it all started<font color="#E5E5E5"> out at the Erlang</font>

48
00:02:02,179 --> 00:02:07,009
user conference in 2015 they take place

49
00:02:04,850 --> 00:02:10,008
each year<font color="#CCCCCC"> in the summer where I</font><font color="#E5E5E5"> met</font>

50
00:02:07,009 --> 00:02:11,480
<font color="#E5E5E5">leaners from Detroit and</font><font color="#CCCCCC"> he was very</font>

51
00:02:10,008 --> 00:02:12,950
enthusiastic<font color="#E5E5E5"> about</font><font color="#CCCCCC"> doing a tour</font>

52
00:02:11,480 --> 00:02:16,130
implementation in Erlang but didn't have

53
00:02:12,950 --> 00:02:17,390
much time<font color="#E5E5E5"> to do so so we</font><font color="#CCCCCC"> sat back</font><font color="#E5E5E5"> during</font>

54
00:02:16,130 --> 00:02:19,640
one of<font color="#E5E5E5"> the talks and talked about what</font>

55
00:02:17,390 --> 00:02:21,768
would<font color="#CCCCCC"> be required to</font><font color="#E5E5E5"> do so and how far</font>

56
00:02:19,640 --> 00:02:23,018
would we<font color="#E5E5E5"> be</font><font color="#CCCCCC"> able to get</font><font color="#E5E5E5"> it what kind of</font>

57
00:02:21,769 --> 00:02:26,750
<font color="#E5E5E5">time frame</font>

58
00:02:23,019 --> 00:02:30,349
so we started<font color="#E5E5E5"> the development in August</font>

59
00:02:26,750 --> 00:02:32,750
2015<font color="#CCCCCC"> we had a</font><font color="#E5E5E5"> very simple proof of</font>

60
00:02:30,349 --> 00:02:35,238
concept<font color="#CCCCCC"> demon up and running</font><font color="#E5E5E5"> a bit later</font>

61
00:02:32,750 --> 00:02:37,849
that<font color="#CCCCCC"> year and we then went to a slightly</font>

62
00:02:35,239 --> 00:02:40,040
more<font color="#E5E5E5"> sensible design</font><font color="#CCCCCC"> a couple of</font><font color="#E5E5E5"> months</font>

63
00:02:37,849 --> 00:02:44,238
after<font color="#CCCCCC"> that and a guy called</font><font color="#E5E5E5"> layer also</font>

64
00:02:40,040 --> 00:02:45,859
giant<font color="#E5E5E5"> boy and</font><font color="#CCCCCC"> lessor has been working on</font>

65
00:02:44,239 --> 00:02:47,569
<font color="#E5E5E5">it quite</font><font color="#CCCCCC"> actually ever since and</font>

66
00:02:45,860 --> 00:02:48,860
cleaning up some<font color="#E5E5E5"> of the initial code and</font>

67
00:02:47,569 --> 00:02:50,599
so on<font color="#E5E5E5"> getting it to work in a more</font>

68
00:02:48,860 --> 00:02:52,909
stable manner so right now we're<font color="#CCCCCC"> two</font>

69
00:02:50,599 --> 00:02:54,319
active people<font color="#CCCCCC"> on the project and we're</font>

70
00:02:52,909 --> 00:02:58,940
of course<font color="#E5E5E5"> interested in finding</font><font color="#CCCCCC"> more</font>

71
00:02:54,319 --> 00:03:00,619
active people<font color="#E5E5E5"> to the project there is</font>

72
00:02:58,940 --> 00:03:02,390
the official to our<font color="#CCCCCC"> implementation in</font><font color="#E5E5E5"> C</font>

73
00:03:00,620 --> 00:03:04,549
and then there is a couple of<font color="#CCCCCC"> other</font>

74
00:03:02,390 --> 00:03:07,149
implementations as you can see here I'm

75
00:03:04,549 --> 00:03:09,140
not<font color="#E5E5E5"> gonna go</font><font color="#CCCCCC"> over any of them they are</font>

76
00:03:07,150 --> 00:03:11,390
specific to the languages some of them

77
00:03:09,140 --> 00:03:13,940
are further than<font color="#E5E5E5"> others</font>

78
00:03:11,390 --> 00:03:15,290
<font color="#CCCCCC">Galois which is like a company</font><font color="#E5E5E5"> that does</font>

79
00:03:13,940 --> 00:03:17,000
a<font color="#E5E5E5"> lot of</font><font color="#CCCCCC"> haskell they are pretty far</font>

80
00:03:15,290 --> 00:03:19,129
<font color="#E5E5E5">with their implementation</font><font color="#CCCCCC"> they have a</font>

81
00:03:17,000 --> 00:03:23,480
hidden<font color="#CCCCCC"> service</font><font color="#E5E5E5"> support I think up to</font>

82
00:03:19,129 --> 00:03:25,280
that<font color="#E5E5E5"> point and then nothing else I think</font>

83
00:03:23,480 --> 00:03:27,918
the subgraph people are the ones who

84
00:03:25,280 --> 00:03:29,540
<font color="#CCCCCC">started the</font><font color="#E5E5E5"> a kite project which is the</font>

85
00:03:27,919 --> 00:03:31,549
<font color="#CCCCCC">Java implementation which is</font><font color="#E5E5E5"> also pretty</font>

86
00:03:29,540 --> 00:03:33,319
interesting<font color="#E5E5E5"> so these are the ones you</font>

87
00:03:31,549 --> 00:03:34,849
could look at the one that<font color="#CCCCCC"> inspired me</font>

88
00:03:33,319 --> 00:03:38,000
initially<font color="#CCCCCC"> to do it in Erlang was the</font><font color="#E5E5E5"> co</font>

89
00:03:34,849 --> 00:03:39,500
implementation which it<font color="#CCCCCC"> actually managed</font>

90
00:03:38,000 --> 00:03:43,959
to<font color="#E5E5E5"> run on the production network and set</font>

91
00:03:39,500 --> 00:03:43,959
some pretty with a very<font color="#E5E5E5"> very fast relay</font>

92
00:03:44,079 --> 00:03:51,829
so we set to figure out a minimal Viable

93
00:03:48,470 --> 00:03:54,079
Product<font color="#E5E5E5"> to do here</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> do two tours and</font>

94
00:03:51,829 --> 00:03:55,549
<font color="#CCCCCC">two</font><font color="#E5E5E5"> n nature of the program we really</font>

95
00:03:54,079 --> 00:03:57,199
<font color="#E5E5E5">didn't</font><font color="#CCCCCC"> want</font><font color="#E5E5E5"> to implement a client</font>

96
00:03:55,549 --> 00:03:58,669
<font color="#E5E5E5">because the client is where all the</font>

97
00:03:57,199 --> 00:04:01,190
difficult logic is it's the client that

98
00:03:58,669 --> 00:04:03,319
decides the<font color="#E5E5E5"> circuit</font><font color="#CCCCCC"> paths is the client</font>

99
00:04:01,190 --> 00:04:06,049
<font color="#E5E5E5">that has all the crypto negotiations etc</font>

100
00:04:03,319 --> 00:04:08,780
etc etc<font color="#E5E5E5"> so we settled on doing a middle</font>

101
00:04:06,049 --> 00:04:10,579
relay as the primary<font color="#CCCCCC"> priority and as</font><font color="#E5E5E5"> the</font>

102
00:04:08,780 --> 00:04:12,410
secondary<font color="#E5E5E5"> priority doing exit</font><font color="#CCCCCC"> notes</font>

103
00:04:10,579 --> 00:04:15,340
<font color="#E5E5E5">I guess is everyone familiar with the</font>

104
00:04:12,410 --> 00:04:17,930
differences between<font color="#CCCCCC"> those</font><font color="#E5E5E5"> two great</font>

105
00:04:15,340 --> 00:04:19,970
onion services we're ignoring for<font color="#E5E5E5"> now</font>

106
00:04:17,930 --> 00:04:22,039
except where we have<font color="#CCCCCC"> to and</font><font color="#E5E5E5"> we want to</font>

107
00:04:19,970 --> 00:04:23,270
use as few<font color="#CCCCCC"> C dependencies as possible</font>

108
00:04:22,039 --> 00:04:25,219
<font color="#E5E5E5">that's also part of the code because</font>

109
00:04:23,270 --> 00:04:28,430
like we're<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> that a bit</font>

110
00:04:25,220 --> 00:04:31,280
later<font color="#E5E5E5"> it was also important when we</font>

111
00:04:28,430 --> 00:04:33,770
started the design that we did it so

112
00:04:31,280 --> 00:04:35,669
much alert that we could go<font color="#E5E5E5"> back and</font>

113
00:04:33,770 --> 00:04:37,680
<font color="#E5E5E5">rewrite the core part of this</font>

114
00:04:35,670 --> 00:04:39,450
from<font color="#E5E5E5"> scratch if we did something</font><font color="#CCCCCC"> stupid</font>

115
00:04:37,680 --> 00:04:44,130
<font color="#CCCCCC">because there's a big chance we're gonna</font>

116
00:04:39,450 --> 00:04:45,840
<font color="#E5E5E5">do that so when you do something</font><font color="#CCCCCC"> like</font>

117
00:04:44,130 --> 00:04:47,640
<font color="#E5E5E5">this</font><font color="#CCCCCC"> you have to be a bit careful with</font>

118
00:04:45,840 --> 00:04:48,840
<font color="#E5E5E5">what we do we cannot run these things</font>

119
00:04:47,640 --> 00:04:53,280
that we<font color="#CCCCCC"> experiment with and the</font>

120
00:04:48,840 --> 00:04:54,419
production<font color="#CCCCCC"> at work</font><font color="#E5E5E5"> there</font><font color="#CCCCCC"> exists few test</font>

121
00:04:53,280 --> 00:04:56,010
networks<font color="#CCCCCC"> I don't know if people are</font>

122
00:04:54,420 --> 00:04:58,650
<font color="#E5E5E5">familiar with Bitcoin Bitcoin has a very</font>

123
00:04:56,010 --> 00:05:00,539
active<font color="#E5E5E5"> test network and it's well</font>

124
00:04:58,650 --> 00:05:03,960
<font color="#E5E5E5">running and there's notes on it</font><font color="#CCCCCC"> and it's</font>

125
00:05:00,540 --> 00:05:05,640
<font color="#E5E5E5">doing work tor has a small test network</font>

126
00:05:03,960 --> 00:05:08,190
which is only like<font color="#E5E5E5"> internal people and</font>

127
00:05:05,640 --> 00:05:09,930
you have to<font color="#E5E5E5"> get</font><font color="#CCCCCC"> invited to it</font><font color="#E5E5E5"> so we have</font>

128
00:05:08,190 --> 00:05:11,820
to settle<font color="#E5E5E5"> with some smaller test network</font>

129
00:05:09,930 --> 00:05:13,620
that we run ourselves<font color="#CCCCCC"> I'm gonna</font><font color="#E5E5E5"> get back</font>

130
00:05:11,820 --> 00:05:17,760
<font color="#E5E5E5">to</font><font color="#CCCCCC"> that when we look at</font><font color="#E5E5E5"> the how we test</font>

131
00:05:13,620 --> 00:05:21,570
the source code<font color="#CCCCCC"> I also started an email</font>

132
00:05:17,760 --> 00:05:24,180
threat<font color="#E5E5E5"> in August</font><font color="#CCCCCC"> about what</font><font color="#E5E5E5"> the Tor</font>

133
00:05:21,570 --> 00:05:26,760
project saw as important aspect to<font color="#E5E5E5"> think</font>

134
00:05:24,180 --> 00:05:27,750
of when you<font color="#E5E5E5"> start a project</font><font color="#CCCCCC"> like this</font>

135
00:05:26,760 --> 00:05:32,760
<font color="#E5E5E5">because there might be other people</font>

136
00:05:27,750 --> 00:05:33,930
<font color="#E5E5E5">doing it at some point so there's</font>

137
00:05:32,760 --> 00:05:35,400
already a lot of<font color="#CCCCCC"> people in</font><font color="#E5E5E5"> here who</font>

138
00:05:33,930 --> 00:05:37,080
knows her<font color="#E5E5E5"> Lang er Lang is a functional</font>

139
00:05:35,400 --> 00:05:40,830
programming language made by<font color="#E5E5E5"> Ericsson in</font>

140
00:05:37,080 --> 00:05:42,900
Sweden<font color="#E5E5E5"> it focuses a lot on doing</font>

141
00:05:40,830 --> 00:05:44,940
concurrency where we pass data<font color="#CCCCCC"> around</font>

142
00:05:42,900 --> 00:05:46,440
using messages some people<font color="#E5E5E5"> might be</font>

143
00:05:44,940 --> 00:05:48,600
<font color="#CCCCCC">familiar</font><font color="#E5E5E5"> with that from other languages</font>

144
00:05:46,440 --> 00:05:50,310
but Erlang<font color="#E5E5E5"> this pace</font><font color="#CCCCCC"> around this extra</font>

145
00:05:48,600 --> 00:05:51,780
<font color="#E5E5E5">model where you</font><font color="#CCCCCC"> design everything using</font>

146
00:05:50,310 --> 00:05:54,870
different processes<font color="#CCCCCC"> that communicates</font>

147
00:05:51,780 --> 00:05:56,159
<font color="#CCCCCC">throughout message message it</font><font color="#E5E5E5"> has one</font>

148
00:05:54,870 --> 00:05:57,360
really neat feature I don't<font color="#CCCCCC"> know the</font>

149
00:05:56,160 --> 00:05:59,700
<font color="#E5E5E5">people who are doing Erlang probably</font>

150
00:05:57,360 --> 00:06:01,170
knows them as binaries<font color="#CCCCCC"> it's a way to do</font>

151
00:05:59,700 --> 00:06:02,940
pattern<font color="#CCCCCC"> matching from functional</font>

152
00:06:01,170 --> 00:06:06,030
languages on binary structures which is

153
00:06:02,940 --> 00:06:07,650
really really really<font color="#CCCCCC"> awesome it was the</font>

154
00:06:06,030 --> 00:06:09,989
one feature who really sold me<font color="#E5E5E5"> on Erlang</font>

155
00:06:07,650 --> 00:06:11,520
initially and it's very nice<font color="#CCCCCC"> for</font><font color="#E5E5E5"> working</font>

156
00:06:09,990 --> 00:06:13,350
with<font color="#E5E5E5"> network protocols because of that</font>

157
00:06:11,520 --> 00:06:16,740
both string based protocols but also

158
00:06:13,350 --> 00:06:18,300
<font color="#E5E5E5">like real binary protocols like tor it's</font>

159
00:06:16,740 --> 00:06:21,570
running<font color="#E5E5E5"> on this virtual</font><font color="#CCCCCC"> machine called</font>

160
00:06:18,300 --> 00:06:24,480
<font color="#CCCCCC">beam</font><font color="#E5E5E5"> and it compiles to these byte</font><font color="#CCCCCC"> COFA</font>

161
00:06:21,570 --> 00:06:25,650
<font color="#E5E5E5">byte code byte code files that you load</font>

162
00:06:24,480 --> 00:06:31,110
<font color="#E5E5E5">into the</font><font color="#CCCCCC"> virtual machine</font><font color="#E5E5E5"> we're gonna</font>

163
00:06:25,650 --> 00:06:33,330
look a bit more than<font color="#E5E5E5"> you code using</font>

164
00:06:31,110 --> 00:06:35,340
modules in Erlang and modules<font color="#CCCCCC"> consists</font>

165
00:06:33,330 --> 00:06:39,810
of functions<font color="#CCCCCC"> like you expose a function</font>

166
00:06:35,340 --> 00:06:43,229
<font color="#E5E5E5">interface from the module</font><font color="#CCCCCC"> you tend to</font>

167
00:06:39,810 --> 00:06:44,790
module your complex objects with<font color="#E5E5E5"> state</font>

168
00:06:43,230 --> 00:06:47,460
as processes and processes<font color="#CCCCCC"> and</font>

169
00:06:44,790 --> 00:06:48,449
communicates via message passing<font color="#CCCCCC"> I said</font>

170
00:06:47,460 --> 00:06:50,818
before

171
00:06:48,449 --> 00:06:52,680
and you also use when we<font color="#E5E5E5"> have a lot of</font>

172
00:06:50,819 --> 00:06:54,210
concurrent processes that is doing a lot

173
00:06:52,680 --> 00:06:55,800
<font color="#CCCCCC">of</font><font color="#E5E5E5"> different work that we sort of need</font>

174
00:06:54,210 --> 00:06:57,599
<font color="#CCCCCC">to have</font><font color="#E5E5E5"> some ordering of some of the</font>

175
00:06:55,800 --> 00:06:59,789
events<font color="#CCCCCC"> in</font><font color="#E5E5E5"> these systems</font><font color="#CCCCCC"> so we have</font>

176
00:06:57,599 --> 00:07:02,188
<font color="#E5E5E5">processes taking care of sort of</font>

177
00:06:59,789 --> 00:07:04,378
serializing the flow<font color="#CCCCCC"> of data by sending</font>

178
00:07:02,189 --> 00:07:06,150
a<font color="#E5E5E5"> message to</font><font color="#CCCCCC"> this process</font><font color="#E5E5E5"> then it can</font>

179
00:07:04,379 --> 00:07:07,650
only handle<font color="#CCCCCC"> one message at a time so the</font>

180
00:07:06,150 --> 00:07:11,370
<font color="#E5E5E5">next</font><font color="#CCCCCC"> message that</font><font color="#E5E5E5"> comes after will have</font>

181
00:07:07,650 --> 00:07:13,138
some kind<font color="#CCCCCC"> of ordering in this system</font><font color="#E5E5E5"> the</font>

182
00:07:11,370 --> 00:07:14,939
language has very very<font color="#E5E5E5"> good</font><font color="#CCCCCC"> testing</font>

183
00:07:13,139 --> 00:07:17,249
frameworks very very<font color="#CCCCCC"> mature testing</font>

184
00:07:14,939 --> 00:07:19,129
frameworks<font color="#E5E5E5"> and it has very</font><font color="#CCCCCC"> very rich</font>

185
00:07:17,249 --> 00:07:21,509
like<font color="#E5E5E5"> mocking features where we can</font>

186
00:07:19,129 --> 00:07:24,539
change a function just for<font color="#CCCCCC"> test and</font>

187
00:07:21,509 --> 00:07:25,889
<font color="#CCCCCC">outter</font><font color="#E5E5E5"> it's like you're playing with</font>

188
00:07:24,539 --> 00:07:27,628
Lego where we<font color="#CCCCCC"> quickly can move things</font>

189
00:07:25,889 --> 00:07:29,370
<font color="#E5E5E5">around when we do to doing some kind of</font>

190
00:07:27,629 --> 00:07:35,249
tests<font color="#E5E5E5"> and that's especially</font><font color="#CCCCCC"> useful for</font>

191
00:07:29,370 --> 00:07:36,900
<font color="#E5E5E5">cryptography stuff in the code so</font><font color="#CCCCCC"> you</font>

192
00:07:35,249 --> 00:07:38,550
have to have this special mentality when

193
00:07:36,900 --> 00:07:40,318
you're working with Erlang<font color="#CCCCCC"> you have to</font>

194
00:07:38,550 --> 00:07:41,969
see it<font color="#E5E5E5"> as you're</font><font color="#CCCCCC"> writing an operating</font>

195
00:07:40,319 --> 00:07:46,409
<font color="#E5E5E5">system which is domain-specific for your</font>

196
00:07:41,969 --> 00:07:48,089
work<font color="#CCCCCC"> your program the way</font><font color="#E5E5E5"> airline works</font>

197
00:07:46,409 --> 00:07:49,830
is that you<font color="#CCCCCC"> have a lot of modules</font><font color="#E5E5E5"> which</font>

198
00:07:48,089 --> 00:07:51,979
is included in applications and<font color="#CCCCCC"> you then</font>

199
00:07:49,830 --> 00:07:54,359
start the applications inside this

200
00:07:51,979 --> 00:07:56,310
domain-specific<font color="#E5E5E5"> operating system that</font>

201
00:07:54,360 --> 00:07:57,899
<font color="#E5E5E5">you have built so we have also a set of</font>

202
00:07:56,310 --> 00:08:01,740
application that<font color="#E5E5E5"> consists of a set of</font>

203
00:07:57,899 --> 00:08:03,810
modules<font color="#E5E5E5"> that were then running</font><font color="#CCCCCC"> and one</font>

204
00:08:01,740 --> 00:08:05,189
of the really nice features of<font color="#E5E5E5"> Erlang</font>

205
00:08:03,810 --> 00:08:07,620
that many languages<font color="#E5E5E5"> don't have is that</font>

206
00:08:05,189 --> 00:08:09,419
you can hot load code<font color="#CCCCCC"> I thought that was</font>

207
00:08:07,620 --> 00:08:11,069
<font color="#CCCCCC">nice nice for</font><font color="#E5E5E5"> tour because you know when</font>

208
00:08:09,419 --> 00:08:13,080
you have a tour relay and you need to

209
00:08:11,069 --> 00:08:15,020
restart it you're gonna terminate<font color="#E5E5E5"> every</font>

210
00:08:13,080 --> 00:08:17,430
<font color="#E5E5E5">connection that is relaying through you</font>

211
00:08:15,020 --> 00:08:18,899
with this<font color="#E5E5E5"> unless</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> is a very</font><font color="#CCCCCC"> very</font>

212
00:08:17,430 --> 00:08:20,520
critical bug we would be able<font color="#CCCCCC"> to keep</font>

213
00:08:18,899 --> 00:08:22,469
<font color="#E5E5E5">the connections open while</font><font color="#CCCCCC"> we upgrade</font>

214
00:08:20,520 --> 00:08:24,680
<font color="#CCCCCC">this system that's</font><font color="#E5E5E5"> also a very</font><font color="#CCCCCC"> very nice</font>

215
00:08:22,469 --> 00:08:29,248
property<font color="#E5E5E5"> to have in a system</font>

216
00:08:24,680 --> 00:08:30,719
<font color="#E5E5E5">any questions about this no we have a</font>

217
00:08:29,249 --> 00:08:33,060
community<font color="#CCCCCC"> you're free to</font><font color="#E5E5E5"> join our Tala</font>

218
00:08:30,719 --> 00:08:36,929
<font color="#E5E5E5">IRC channel it's on the same IRC network</font>

219
00:08:33,059 --> 00:08:39,000
as<font color="#CCCCCC"> the pond hack festival we have a an</font>

220
00:08:36,929 --> 00:08:42,419
IRC server and an onion URL you<font color="#E5E5E5"> can</font>

221
00:08:39,000 --> 00:08:43,679
connect to<font color="#CCCCCC"> for for chatting and all</font><font color="#E5E5E5"> the</font>

222
00:08:42,419 --> 00:08:49,649
developers<font color="#E5E5E5"> are basically sitting in</font>

223
00:08:43,679 --> 00:08:51,899
there so a<font color="#E5E5E5"> little bit about C so it's</font>

224
00:08:49,649 --> 00:08:53,610
hard to<font color="#E5E5E5"> write complicated</font><font color="#CCCCCC"> C code we</font>

225
00:08:51,899 --> 00:08:55,079
already know that<font color="#E5E5E5"> and I guess if</font><font color="#CCCCCC"> we know</font>

226
00:08:53,610 --> 00:08:57,899
<font color="#E5E5E5">that from history by</font><font color="#CCCCCC"> now we've seen</font><font color="#E5E5E5"> it</font>

227
00:08:55,079 --> 00:09:01,150
<font color="#CCCCCC">with a lot of</font><font color="#E5E5E5"> projects each week having</font>

228
00:08:57,899 --> 00:09:03,410
severe<font color="#E5E5E5"> security issues</font>

229
00:09:01,150 --> 00:09:06,819
the<font color="#CCCCCC"> toward demon is a very very</font>

230
00:09:03,410 --> 00:09:09,439
high-quality piece<font color="#E5E5E5"> of C code</font><font color="#CCCCCC"> in general</font>

231
00:09:06,820 --> 00:09:12,800
<font color="#E5E5E5">it's considered</font><font color="#CCCCCC"> that by quite a lot</font><font color="#E5E5E5"> of</font>

232
00:09:09,440 --> 00:09:15,560
people we've seen that the<font color="#CCCCCC"> PVS studio is</font>

233
00:09:12,800 --> 00:09:17,810
people familiar with<font color="#CCCCCC"> us - there's a</font>

234
00:09:15,560 --> 00:09:19,939
proprietary static code<font color="#E5E5E5"> analyzing and</font>

235
00:09:17,810 --> 00:09:21,380
they went<font color="#E5E5E5"> over the</font><font color="#CCCCCC"> Tor source code</font>

236
00:09:19,940 --> 00:09:27,500
recently and they couldn't<font color="#E5E5E5"> find any bugs</font>

237
00:09:21,380 --> 00:09:29,720
<font color="#E5E5E5">with it which is quite well done we also</font>

238
00:09:27,500 --> 00:09:31,790
<font color="#E5E5E5">had that the does people</font><font color="#CCCCCC"> know what</font>

239
00:09:29,720 --> 00:09:33,530
Coverity is<font color="#CCCCCC"> cover</font><font color="#E5E5E5"> should come it's also</font>

240
00:09:31,790 --> 00:09:34,880
a static<font color="#E5E5E5"> code analyzes they also ran a</font>

241
00:09:33,530 --> 00:09:37,160
lot of tests<font color="#CCCCCC"> and they gave a lot of</font>

242
00:09:34,880 --> 00:09:39,470
<font color="#E5E5E5">kudos in 2009</font><font color="#CCCCCC"> -</font><font color="#E5E5E5"> Turin a lot of other</font>

243
00:09:37,160 --> 00:09:41,300
projects where we got<font color="#CCCCCC"> wrong 3</font>

244
00:09:39,470 --> 00:09:42,350
certification<font color="#E5E5E5"> I'm not fully sure what</font>

245
00:09:41,300 --> 00:09:47,500
that<font color="#E5E5E5"> means but you can google this</font>

246
00:09:42,350 --> 00:09:47,500
report and find the explicit summary<font color="#CCCCCC"> -</font>

247
00:09:48,670 --> 00:09:53,479
<font color="#CCCCCC">Turin C works pretty well we have very</font>

248
00:09:51,050 --> 00:09:56,719
high<font color="#E5E5E5"> I also work on</font><font color="#CCCCCC"> sea</font><font color="#E5E5E5"> tour</font><font color="#CCCCCC"> and like</font>

249
00:09:53,480 --> 00:09:58,880
for a living<font color="#CCCCCC"> so I do the Erlang thing in</font>

250
00:09:56,720 --> 00:10:02,090
my spare<font color="#CCCCCC"> time and see singing</font><font color="#E5E5E5"> my work</font>

251
00:09:58,880 --> 00:10:03,470
time<font color="#CCCCCC"> we have</font><font color="#E5E5E5"> very high test coverage</font>

252
00:10:02,090 --> 00:10:05,450
<font color="#E5E5E5">that's one thing that's really</font><font color="#CCCCCC"> really</font>

253
00:10:03,470 --> 00:10:09,440
good<font color="#E5E5E5"> for us so we detect things early</font>

254
00:10:05,450 --> 00:10:13,130
because<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the test</font><font color="#E5E5E5"> we have active team</font>

255
00:10:09,440 --> 00:10:14,930
rotations in<font color="#E5E5E5"> the core team of</font><font color="#CCCCCC"> Tor so</font>

256
00:10:13,130 --> 00:10:16,490
<font color="#CCCCCC">that each week we have</font><font color="#E5E5E5"> different tasks</font>

257
00:10:14,930 --> 00:10:18,770
we need to deal<font color="#CCCCCC"> with like handling new</font>

258
00:10:16,490 --> 00:10:20,360
bugs handling<font color="#E5E5E5"> user support and one of</font>

259
00:10:18,770 --> 00:10:21,920
them is handling Coverity issues that

260
00:10:20,360 --> 00:10:24,950
comes in from static code analyzers

261
00:10:21,920 --> 00:10:27,170
running around we recently joined the

262
00:10:24,950 --> 00:10:29,120
OSS fuss as people familiar<font color="#CCCCCC"> with that</font>

263
00:10:27,170 --> 00:10:30,650
what that<font color="#CCCCCC"> is it's Google who set up this</font>

264
00:10:29,120 --> 00:10:34,130
fussing infrastructure where you can

265
00:10:30,650 --> 00:10:37,579
submit small programs that<font color="#E5E5E5"> is executed</font>

266
00:10:34,130 --> 00:10:40,880
on some undefined big cluster at Google

267
00:10:37,580 --> 00:10:43,880
<font color="#E5E5E5">and it's doing a lot of fussing using</font>

268
00:10:40,880 --> 00:10:46,280
AFL and<font color="#CCCCCC"> lip buzzer</font><font color="#E5E5E5"> I believe and of</font>

269
00:10:43,880 --> 00:10:48,770
course we have code review as all other

270
00:10:46,280 --> 00:10:50,270
mature projects everyone all code that

271
00:10:48,770 --> 00:10:52,790
goes in has<font color="#E5E5E5"> to be reviewed</font><font color="#CCCCCC"> by someone</font>

272
00:10:50,270 --> 00:10:55,040
<font color="#CCCCCC">and we also have that NIC Mathewson is</font>

273
00:10:52,790 --> 00:10:57,380
at the end<font color="#CCCCCC"> reading all lines that Enders</font>

274
00:10:55,040 --> 00:11:00,439
<font color="#CCCCCC">tor that get so there is</font><font color="#E5E5E5"> like an extra</font>

275
00:10:57,380 --> 00:11:01,730
safety net<font color="#E5E5E5"> there in Nick so some really</font>

276
00:11:00,440 --> 00:11:04,850
interesting work<font color="#CCCCCC"> that started happening</font>

277
00:11:01,730 --> 00:11:06,020
at the<font color="#E5E5E5"> last</font><font color="#CCCCCC"> tour developers meeting</font><font color="#E5E5E5"> when</font>

278
00:11:04,850 --> 00:11:07,490
<font color="#E5E5E5">we were in Amsterdam</font><font color="#CCCCCC"> earlier this year</font>

279
00:11:06,020 --> 00:11:10,640
was that<font color="#CCCCCC"> there was a breakout session</font>

280
00:11:07,490 --> 00:11:12,520
<font color="#E5E5E5">about</font><font color="#CCCCCC"> third patty implementations</font><font color="#E5E5E5"> and it</font>

281
00:11:10,640 --> 00:11:15,130
was led by Chelsea

282
00:11:12,520 --> 00:11:17,439
there was a lot<font color="#CCCCCC"> of discussions mostly</font>

283
00:11:15,130 --> 00:11:21,459
around<font color="#CCCCCC"> a thing</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> Tala</font><font color="#E5E5E5"> which is an</font>

284
00:11:17,440 --> 00:11:23,830
entire rewrite of<font color="#CCCCCC"> Tor but also by people</font>

285
00:11:21,459 --> 00:11:26,199
who wants to slowly<font color="#CCCCCC"> change the seat or</font>

286
00:11:23,830 --> 00:11:27,940
into<font color="#E5E5E5"> something else and we are actively</font>

287
00:11:26,200 --> 00:11:30,690
now working or well<font color="#E5E5E5"> Sebastian and</font>

288
00:11:27,940 --> 00:11:32,830
Chelsea<font color="#CCCCCC"> and Isis</font><font color="#E5E5E5"> are working on</font>

289
00:11:30,690 --> 00:11:35,440
<font color="#E5E5E5">integrating rust into the seat or</font>

290
00:11:32,830 --> 00:11:37,240
project there<font color="#E5E5E5"> is rust</font><font color="#CCCCCC"> coat</font><font color="#E5E5E5"> already in</font>

291
00:11:35,440 --> 00:11:40,209
the<font color="#E5E5E5"> seat or repository and you can build</font>

292
00:11:37,240 --> 00:11:42,700
tour with rust<font color="#E5E5E5"> enabled and I believe we</font>

293
00:11:40,209 --> 00:11:44,859
use the rust memory allocator<font color="#CCCCCC"> a sort of</font>

294
00:11:42,700 --> 00:11:46,149
a test for<font color="#CCCCCC"> all of it it's pretty</font><font color="#E5E5E5"> cool</font>

295
00:11:44,860 --> 00:11:47,560
and it seems to<font color="#CCCCCC"> be that way</font><font color="#E5E5E5"> we are</font>

296
00:11:46,149 --> 00:11:50,080
<font color="#CCCCCC">moving right now</font><font color="#E5E5E5"> we are talking about</font>

297
00:11:47,560 --> 00:11:51,729
new<font color="#E5E5E5"> features at some point in the future</font>

298
00:11:50,080 --> 00:11:57,640
<font color="#E5E5E5">it's gonna be have to be written in rust</font>

299
00:11:51,730 --> 00:11:59,320
<font color="#E5E5E5">instead of C so</font><font color="#CCCCCC"> tala</font><font color="#E5E5E5"> and C so I want to</font>

300
00:11:57,640 --> 00:12:00,660
<font color="#E5E5E5">write something</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> has a little C as</font>

301
00:11:59,320 --> 00:12:05,980
possible

302
00:12:00,660 --> 00:12:08,290
<font color="#CCCCCC">beam is C by nature we use lip sodium</font>

303
00:12:05,980 --> 00:12:11,350
for some cryptography we use lip crypt

304
00:12:08,290 --> 00:12:13,209
over from<font color="#E5E5E5"> open SSL alia SSL but we do</font>

305
00:12:11,350 --> 00:12:16,060
not use lip SSL<font color="#E5E5E5"> as people know what the</font>

306
00:12:13,209 --> 00:12:18,729
difference between<font color="#E5E5E5"> that</font><font color="#CCCCCC"> is so</font><font color="#E5E5E5"> loopy SSL</font>

307
00:12:16,060 --> 00:12:20,800
is the TLS state machine and the TLS

308
00:12:18,730 --> 00:12:22,930
protocol<font color="#E5E5E5"> and lip crypto is just the</font>

309
00:12:20,800 --> 00:12:24,849
crypto primitives so we<font color="#E5E5E5"> don't use when</font>

310
00:12:22,930 --> 00:12:26,800
there is issues<font color="#E5E5E5"> with TLS in openness as</font>

311
00:12:24,850 --> 00:12:30,610
though we're not<font color="#CCCCCC"> effective Erlang has</font>

312
00:12:26,800 --> 00:12:32,589
its own<font color="#CCCCCC"> chiller state machine we also</font>

313
00:12:30,610 --> 00:12:34,360
had to use<font color="#E5E5E5"> some small</font><font color="#CCCCCC"> C functions for</font>

314
00:12:32,589 --> 00:12:36,430
RSA key<font color="#E5E5E5"> generation because that was not</font>

315
00:12:34,360 --> 00:12:41,260
<font color="#CCCCCC">available from for some</font><font color="#E5E5E5"> reason in the</font>

316
00:12:36,430 --> 00:12:43,270
oral nvm so I'm gonna jump<font color="#E5E5E5"> to a bit of</font>

317
00:12:41,260 --> 00:12:44,319
how the architecture<font color="#E5E5E5"> isn't Allah was</font>

318
00:12:43,270 --> 00:12:45,600
there any questions to<font color="#E5E5E5"> any of these</font>

319
00:12:44,320 --> 00:12:50,440
things

320
00:12:45,600 --> 00:12:52,570
<font color="#E5E5E5">no so we have one component called a</font>

321
00:12:50,440 --> 00:12:54,640
knuckle knuckle is this small crypto

322
00:12:52,570 --> 00:12:56,920
library made by Daniel<font color="#E5E5E5"> Bernstein and a</font>

323
00:12:54,640 --> 00:12:59,319
couple<font color="#E5E5E5"> of other people</font><font color="#CCCCCC"> ie Naugle is</font>

324
00:12:56,920 --> 00:13:00,339
written by yes /<font color="#E5E5E5"> who's quite active in</font>

325
00:12:59,320 --> 00:13:02,620
the<font color="#CCCCCC"> Orlan community</font>

326
00:13:00,339 --> 00:13:06,670
it's a wrapper around<font color="#E5E5E5"> lip sodium and we</font>

327
00:13:02,620 --> 00:13:08,529
use<font color="#CCCCCC"> it for x.25 519</font><font color="#E5E5E5"> TV</font><font color="#CCCCCC"> Hellman</font><font color="#E5E5E5"> and for</font>

328
00:13:06,670 --> 00:13:10,149
it has<font color="#E5E5E5"> access to deaf few random it has</font>

329
00:13:08,529 --> 00:13:11,500
like a<font color="#E5E5E5"> wrapper that is portable for</font>

330
00:13:10,149 --> 00:13:14,700
different operating systems that<font color="#E5E5E5"> we use</font>

331
00:13:11,500 --> 00:13:17,110
<font color="#E5E5E5">for a random byte sequence generation</font>

332
00:13:14,700 --> 00:13:19,180
the source code is on github under yes

333
00:13:17,110 --> 00:13:20,770
<font color="#E5E5E5">pers URL is a pretty nice library it's</font>

334
00:13:19,180 --> 00:13:23,020
very well tested<font color="#CCCCCC"> and pretty</font><font color="#E5E5E5"> high quality</font>

335
00:13:20,770 --> 00:13:24,560
<font color="#CCCCCC">it's used a lot by different online</font>

336
00:13:23,020 --> 00:13:28,439
<font color="#E5E5E5">projects</font>

337
00:13:24,560 --> 00:13:29,400
then we need<font color="#E5E5E5"> to also use eg 25</font><font color="#CCCCCC"> 5:19 it</font>

338
00:13:28,440 --> 00:13:31,740
turns out that there's different

339
00:13:29,400 --> 00:13:33,329
versions<font color="#E5E5E5"> of this signature scheme where</font>

340
00:13:31,740 --> 00:13:35,520
they encode the signatures differently

341
00:13:33,330 --> 00:13:38,220
some<font color="#E5E5E5"> hashes the public key into the</font>

342
00:13:35,520 --> 00:13:42,750
<font color="#E5E5E5">final signature and some doesn't so we</font>

343
00:13:38,220 --> 00:13:45,330
couldn't use<font color="#CCCCCC"> edy 25 519 from</font><font color="#E5E5E5"> X 25 5 9 NL</font>

344
00:13:42,750 --> 00:13:47,790
from<font color="#CCCCCC"> enamel so we have to take the</font>

345
00:13:45,330 --> 00:13:51,090
implementation from<font color="#CCCCCC"> tour lift out of</font><font color="#E5E5E5"> the</font>

346
00:13:47,790 --> 00:13:54,449
tour repository and make a small shim<font color="#CCCCCC"> to</font>

347
00:13:51,090 --> 00:13:56,070
interface with<font color="#CCCCCC"> Erlang for it and yawning</font>

348
00:13:54,450 --> 00:13:57,510
was a great<font color="#CCCCCC"> help for</font><font color="#E5E5E5"> this to find out</font>

349
00:13:56,070 --> 00:13:58,860
that there<font color="#CCCCCC"> is different</font><font color="#E5E5E5"> versions of this</font>

350
00:13:57,510 --> 00:14:03,090
signature scheme and I think it<font color="#E5E5E5"> took</font><font color="#CCCCCC"> me</font>

351
00:13:58,860 --> 00:14:05,730
a weekend to figure<font color="#E5E5E5"> out this then we</font>

352
00:14:03,090 --> 00:14:06,960
<font color="#E5E5E5">have Luke there's this big fear in the</font>

353
00:14:05,730 --> 00:14:08,600
crypto community right<font color="#CCCCCC"> now that</font>

354
00:14:06,960 --> 00:14:10,800
everything has<font color="#CCCCCC"> to move to post quantum</font>

355
00:14:08,600 --> 00:14:14,160
cryptography where<font color="#E5E5E5"> we're secure against</font>

356
00:14:10,800 --> 00:14:16,890
<font color="#E5E5E5">quantum computer attacks there is some</font>

357
00:14:14,160 --> 00:14:19,319
work by Isis<font color="#E5E5E5"> and Peter</font><font color="#CCCCCC"> Shravan where</font>

358
00:14:16,890 --> 00:14:21,449
they've made<font color="#CCCCCC"> a specification for</font><font color="#E5E5E5"> tour to</font>

359
00:14:19,320 --> 00:14:24,870
support<font color="#CCCCCC"> this new hope handshake mixed</font>

360
00:14:21,450 --> 00:14:27,210
with<font color="#CCCCCC"> x.25 519</font><font color="#E5E5E5"> so that if new hope turns</font>

361
00:14:24,870 --> 00:14:28,800
<font color="#E5E5E5">out to be a problem then we can still</font>

362
00:14:27,210 --> 00:14:31,710
rely on the<font color="#E5E5E5"> hash function</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we</font>

363
00:14:28,800 --> 00:14:34,949
believe is secure and<font color="#CCCCCC"> x.25</font><font color="#E5E5E5"> 1519 which we</font>

364
00:14:31,710 --> 00:14:36,510
believe is secure<font color="#CCCCCC"> now as well we haven't</font>

365
00:14:34,950 --> 00:14:38,280
<font color="#CCCCCC">really integrated it yet</font><font color="#E5E5E5"> because there</font>

366
00:14:36,510 --> 00:14:40,110
is no code for DC<font color="#CCCCCC"> to our implementation</font>

367
00:14:38,280 --> 00:14:42,360
<font color="#E5E5E5">right now to support this so we're still</font>

368
00:14:40,110 --> 00:14:43,830
sort of waiting a<font color="#E5E5E5"> bit with how that is</font>

369
00:14:42,360 --> 00:14:53,780
going to turn<font color="#CCCCCC"> out</font><font color="#E5E5E5"> for for towards off</font>

370
00:14:43,830 --> 00:14:56,820
<font color="#E5E5E5">yes</font><font color="#CCCCCC"> it's based</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> all what's it called</font>

371
00:14:53,780 --> 00:15:00,890
<font color="#CCCCCC">ring learning with</font><font color="#E5E5E5"> error</font><font color="#CCCCCC"> that's sort of</font>

372
00:14:56,820 --> 00:15:03,450
the problem<font color="#E5E5E5"> they're using in the system</font>

373
00:15:00,890 --> 00:15:04,980
so it's like it has a pretty<font color="#E5E5E5"> big keys</font>

374
00:15:03,450 --> 00:15:09,060
<font color="#E5E5E5">but smaller than</font><font color="#CCCCCC"> some of the other</font>

375
00:15:04,980 --> 00:15:11,610
quantum postpones<font color="#CCCCCC"> on</font><font color="#E5E5E5"> it's also important</font>

376
00:15:09,060 --> 00:15:13,229
to<font color="#CCCCCC"> address the tour is trying to we</font>

377
00:15:11,610 --> 00:15:15,240
don't<font color="#CCCCCC"> try</font><font color="#E5E5E5"> to prevent an active attacker</font>

378
00:15:13,230 --> 00:15:16,860
who has right<font color="#CCCCCC"> now a quantum computer</font>

379
00:15:15,240 --> 00:15:18,780
<font color="#CCCCCC">because then we would need to change all</font>

380
00:15:16,860 --> 00:15:20,160
these signature schemes as well<font color="#E5E5E5"> so it's</font>

381
00:15:18,780 --> 00:15:22,470
only<font color="#E5E5E5"> that we want to be sure that the</font>

382
00:15:20,160 --> 00:15:24,240
data flowing in the network cannot<font color="#E5E5E5"> be</font>

383
00:15:22,470 --> 00:15:26,400
decrypted<font color="#E5E5E5"> when someone in the</font><font color="#CCCCCC"> future</font>

384
00:15:24,240 --> 00:15:29,610
builds<font color="#E5E5E5"> a quantum computer</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> two</font>

385
00:15:26,400 --> 00:15:31,439
different<font color="#E5E5E5"> attack scenarios but this is</font>

386
00:15:29,610 --> 00:15:33,330
mostly a fun project<font color="#CCCCCC"> that</font><font color="#E5E5E5"> I added one</font>

387
00:15:31,440 --> 00:15:35,010
evening so<font color="#CCCCCC"> there's</font><font color="#E5E5E5"> nothing yet</font><font color="#CCCCCC"> forefront</font>

388
00:15:33,330 --> 00:15:36,870
<font color="#CCCCCC">or</font><font color="#E5E5E5"> about this</font>

389
00:15:35,010 --> 00:15:38,700
then we have the most important

390
00:15:36,870 --> 00:15:40,680
<font color="#E5E5E5">libraries</font><font color="#CCCCCC"> just called onion</font><font color="#E5E5E5"> it's a small</font>

391
00:15:38,700 --> 00:15:43,490
Erlang application which<font color="#E5E5E5"> binds all these</font>

392
00:15:40,680 --> 00:15:46,109
other components<font color="#CCCCCC"> together and exposes</font>

393
00:15:43,490 --> 00:15:48,390
nicely<font color="#CCCCCC"> modular interface</font><font color="#E5E5E5"> which means</font>

394
00:15:46,110 --> 00:15:49,980
that the big application<font color="#CCCCCC"> which does all</font>

395
00:15:48,390 --> 00:15:51,510
the<font color="#E5E5E5"> state machine for</font><font color="#CCCCCC"> the protocol</font><font color="#E5E5E5"> has</font>

396
00:15:49,980 --> 00:15:53,730
some utility<font color="#CCCCCC"> library where there's not</font>

397
00:15:51,510 --> 00:15:56,160
really<font color="#E5E5E5"> many stateful functions which we</font>

398
00:15:53,730 --> 00:15:57,740
can just use as API<font color="#CCCCCC"> for wrapping</font><font color="#E5E5E5"> out</font><font color="#CCCCCC"> to</font>

399
00:15:56,160 --> 00:16:00,930
different<font color="#CCCCCC"> providers</font>

400
00:15:57,740 --> 00:16:02,730
everything we do we<font color="#E5E5E5"> generally try to</font>

401
00:16:00,930 --> 00:16:05,040
generalize it and<font color="#E5E5E5"> lift it into the onion</font>

402
00:16:02,730 --> 00:16:06,540
library and then we at make sure that

403
00:16:05,040 --> 00:16:08,880
there's tests for all<font color="#E5E5E5"> the code in there</font>

404
00:16:06,540 --> 00:16:10,740
so<font color="#CCCCCC"> that is like the most important and</font>

405
00:16:08,880 --> 00:16:12,270
most<font color="#CCCCCC"> stable part of</font><font color="#E5E5E5"> the project right</font>

406
00:16:10,740 --> 00:16:14,910
<font color="#CCCCCC">now it's</font><font color="#E5E5E5"> like the standard library for</font>

407
00:16:12,270 --> 00:16:20,010
building<font color="#E5E5E5"> tor related applications in</font>

408
00:16:14,910 --> 00:16:21,750
Erlang then<font color="#E5E5E5"> there's Tala itself if</font>

409
00:16:20,010 --> 00:16:23,370
you're familiar<font color="#CCCCCC"> it was tor there's like</font>

410
00:16:21,750 --> 00:16:25,830
a directory component where there's

411
00:16:23,370 --> 00:16:27,300
something<font color="#CCCCCC"> where we work with this</font><font color="#E5E5E5"> system</font>

412
00:16:25,830 --> 00:16:28,530
where you announce your relays and

413
00:16:27,300 --> 00:16:30,240
clients<font color="#CCCCCC"> use</font><font color="#E5E5E5"> it to figure out which</font>

414
00:16:28,530 --> 00:16:31,920
relays exist and there you're voting

415
00:16:30,240 --> 00:16:33,660
about it and then we have an actual

416
00:16:31,920 --> 00:16:35,939
onion protocol where we connect through

417
00:16:33,660 --> 00:16:38,699
<font color="#CCCCCC">the</font><font color="#E5E5E5"> networks using this using the onion</font>

418
00:16:35,940 --> 00:16:40,280
protocol and then we have some<font color="#E5E5E5"> kind of</font>

419
00:16:38,700 --> 00:16:42,510
core which is abstraction<font color="#E5E5E5"> it's</font>

420
00:16:40,280 --> 00:16:43,980
information about<font color="#E5E5E5"> uptime of the relay</font>

421
00:16:42,510 --> 00:16:45,569
and stuff like that things<font color="#CCCCCC"> that just</font>

422
00:16:43,980 --> 00:16:49,170
needs to<font color="#E5E5E5"> be generalized but are still</font>

423
00:16:45,570 --> 00:16:51,390
somewhat stateful the<font color="#E5E5E5"> onion routing</font>

424
00:16:49,170 --> 00:16:53,160
component<font color="#CCCCCC"> and the directory component</font>

425
00:16:51,390 --> 00:16:54,810
have sort of<font color="#E5E5E5"> a circular dependency to</font>

426
00:16:53,160 --> 00:16:56,760
each other which is really<font color="#CCCCCC"> nasty that</font>

427
00:16:54,810 --> 00:16:59,910
we're<font color="#E5E5E5"> trying to figure</font><font color="#CCCCCC"> out how we deal</font>

428
00:16:56,760 --> 00:17:01,380
with<font color="#CCCCCC"> somehow that means</font><font color="#E5E5E5"> the code is a</font>

429
00:16:59,910 --> 00:17:03,270
bit more icky than it's<font color="#CCCCCC"> supposed to</font><font color="#E5E5E5"> be</font>

430
00:17:01,380 --> 00:17:05,250
but<font color="#CCCCCC"> we have</font><font color="#E5E5E5"> some kind of idea</font><font color="#CCCCCC"> how to</font>

431
00:17:03,270 --> 00:17:08,180
abstract<font color="#E5E5E5"> it out right now by of course</font>

432
00:17:05,250 --> 00:17:10,170
adding<font color="#CCCCCC"> one extra layer of</font><font color="#E5E5E5"> abstraction</font>

433
00:17:08,180 --> 00:17:13,470
this<font color="#E5E5E5"> is pretty</font><font color="#CCCCCC"> much</font><font color="#E5E5E5"> how it looked we</font>

434
00:17:10,170 --> 00:17:16,709
used to not have RSA<font color="#CCCCCC"> now we used to need</font>

435
00:17:13,470 --> 00:17:19,050
a<font color="#CCCCCC"> sea shim in the onion library for key</font>

436
00:17:16,709 --> 00:17:21,570
generation<font color="#E5E5E5"> of RSA that has been moved</font>

437
00:17:19,050 --> 00:17:23,430
into OTP like in the Erlang releases so

438
00:17:21,569 --> 00:17:26,458
we don't have<font color="#E5E5E5"> that need anymore for from</font>

439
00:17:23,430 --> 00:17:29,460
OTP<font color="#E5E5E5"> 20 which was released in June</font>

440
00:17:26,459 --> 00:17:31,620
earlier this year but<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> generally</font>

441
00:17:29,460 --> 00:17:33,270
<font color="#E5E5E5">dhole all the dependencies all the</font>

442
00:17:31,620 --> 00:17:35,729
applications that we have<font color="#E5E5E5"> running in the</font>

443
00:17:33,270 --> 00:17:36,840
Erlang<font color="#CCCCCC"> V M of course ignoring all these</font>

444
00:17:35,730 --> 00:17:40,620
things that comes<font color="#CCCCCC"> from the Erlang</font>

445
00:17:36,840 --> 00:17:42,709
standard library testing was<font color="#CCCCCC"> there any</font>

446
00:17:40,620 --> 00:17:48,229
<font color="#E5E5E5">question to any of this</font>

447
00:17:42,710 --> 00:17:50,980
<font color="#CCCCCC">No can</font><font color="#E5E5E5"> people see this yeah okay cool we</font>

448
00:17:48,230 --> 00:17:53,720
have like classical<font color="#E5E5E5"> unit testing and the</font>

449
00:17:50,980 --> 00:17:55,279
<font color="#E5E5E5">tour source code itself comes with a lot</font>

450
00:17:53,720 --> 00:17:56,960
of<font color="#E5E5E5"> tests that is very nice when you're</font>

451
00:17:55,279 --> 00:17:58,640
working<font color="#CCCCCC"> with this</font><font color="#E5E5E5"> because you can</font><font color="#CCCCCC"> just</font>

452
00:17:56,960 --> 00:17:59,990
<font color="#E5E5E5">copy out some of the test vectors and</font>

453
00:17:58,640 --> 00:18:01,970
play<font color="#CCCCCC"> around with</font><font color="#E5E5E5"> it and make sure</font><font color="#CCCCCC"> that</font>

454
00:17:59,990 --> 00:18:06,980
<font color="#CCCCCC">your code works</font><font color="#E5E5E5"> this is generally taken</font>

455
00:18:01,970 --> 00:18:07,940
<font color="#E5E5E5">from the</font><font color="#CCCCCC"> sea tour implementation but</font><font color="#E5E5E5"> for</font>

456
00:18:06,980 --> 00:18:10,580
some of the components that are

457
00:18:07,940 --> 00:18:12,740
<font color="#E5E5E5">standardized we also act like test</font>

458
00:18:10,580 --> 00:18:14,840
vectors from the<font color="#E5E5E5"> RFC's that we then</font>

459
00:18:12,740 --> 00:18:17,390
include into the source<font color="#E5E5E5"> code so that we</font>

460
00:18:14,840 --> 00:18:22,580
just build up some<font color="#CCCCCC"> trust in</font><font color="#E5E5E5"> the code</font>

461
00:18:17,390 --> 00:18:23,870
<font color="#CCCCCC">that we're trying to to build</font><font color="#E5E5E5"> up we also</font>

462
00:18:22,580 --> 00:18:25,760
use<font color="#E5E5E5"> something called property based</font>

463
00:18:23,870 --> 00:18:30,590
<font color="#CCCCCC">tests where</font><font color="#E5E5E5"> we try to generalize our</font>

464
00:18:25,760 --> 00:18:34,070
<font color="#E5E5E5">tests into testing properties instead of</font>

465
00:18:30,590 --> 00:18:35,418
testing direct values we have<font color="#CCCCCC"> chuka</font>

466
00:18:34,070 --> 00:18:37,220
people familiar with property based

467
00:18:35,419 --> 00:18:40,940
testing<font color="#E5E5E5"> someone yeah of course the</font>

468
00:18:37,220 --> 00:18:42,140
<font color="#E5E5E5">Erlang people are probably</font><font color="#CCCCCC"> had you</font><font color="#E5E5E5"> have</font>

469
00:18:40,940 --> 00:18:44,960
a concept<font color="#E5E5E5"> called a generator which</font>

470
00:18:42,140 --> 00:18:47,480
generally is<font color="#CCCCCC"> a way to generate a random</font>

471
00:18:44,960 --> 00:18:49,010
<font color="#CCCCCC">value of a specific type and then you</font>

472
00:18:47,480 --> 00:18:51,200
have a shrinker<font color="#E5E5E5"> attached to the</font>

473
00:18:49,010 --> 00:18:55,010
generator which can<font color="#E5E5E5"> shrink</font><font color="#CCCCCC"> towards some</font>

474
00:18:51,200 --> 00:18:57,110
zero value<font color="#E5E5E5"> so for a list type it would</font>

475
00:18:55,010 --> 00:18:58,820
<font color="#E5E5E5">be going towards the empty list for an</font>

476
00:18:57,110 --> 00:19:02,840
integer<font color="#E5E5E5"> value it would be going towards</font>

477
00:18:58,820 --> 00:19:04,220
<font color="#CCCCCC">zero etc etc etc we use a free</font>

478
00:19:02,840 --> 00:19:06,230
implementation of this there<font color="#CCCCCC"> is a really</font>

479
00:19:04,220 --> 00:19:07,760
really<font color="#E5E5E5"> good proprietary quick check</font>

480
00:19:06,230 --> 00:19:09,470
implementation by a Swedish<font color="#CCCCCC"> company</font>

481
00:19:07,760 --> 00:19:12,200
which<font color="#E5E5E5"> cost like five thousand year a</font>

482
00:19:09,470 --> 00:19:14,929
year so<font color="#E5E5E5"> we cannot use that</font><font color="#CCCCCC"> because</font>

483
00:19:12,200 --> 00:19:16,549
nobody<font color="#E5E5E5"> can</font><font color="#CCCCCC"> afford</font><font color="#E5E5E5"> that and</font><font color="#CCCCCC"> right now we</font>

484
00:19:14,929 --> 00:19:17,630
mostly use<font color="#CCCCCC"> it for stateless testing with</font>

485
00:19:16,549 --> 00:19:19,190
quick check you can<font color="#E5E5E5"> do some really neat</font>

486
00:19:17,630 --> 00:19:20,000
<font color="#E5E5E5">stateful testing where you start testing</font>

487
00:19:19,190 --> 00:19:22,220
<font color="#E5E5E5">protocols</font>

488
00:19:20,000 --> 00:19:24,529
we plan on<font color="#CCCCCC"> using that</font><font color="#E5E5E5"> but for now it's</font>

489
00:19:22,220 --> 00:19:27,620
only<font color="#E5E5E5"> the safest stuff we're using so a</font>

490
00:19:24,529 --> 00:19:30,500
simple<font color="#E5E5E5"> example of</font><font color="#CCCCCC"> that I'm</font><font color="#E5E5E5"> gonna go a</font>

491
00:19:27,620 --> 00:19:35,059
bit away<font color="#CCCCCC"> from you we have a base 64</font>

492
00:19:30,500 --> 00:19:38,090
module which has an encoder which and

493
00:19:35,059 --> 00:19:39,590
<font color="#E5E5E5">return some</font><font color="#CCCCCC"> binary data</font><font color="#E5E5E5"> that's how like</font>

494
00:19:38,090 --> 00:19:41,779
the signature<font color="#CCCCCC"> of the encoder</font>

495
00:19:39,590 --> 00:19:43,428
the decoder<font color="#E5E5E5"> is a bit</font><font color="#CCCCCC"> different it takes</font>

496
00:19:41,779 --> 00:19:45,499
<font color="#CCCCCC">some encoded data</font><font color="#E5E5E5"> with using binary data</font>

497
00:19:43,429 --> 00:19:48,080
and returns a tuple which is either<font color="#E5E5E5"> okay</font>

498
00:19:45,499 --> 00:19:52,370
and decoded<font color="#E5E5E5"> or</font><font color="#CCCCCC"> her own</font><font color="#E5E5E5"> a reason so the</font>

499
00:19:48,080 --> 00:19:54,259
decoder can fail<font color="#E5E5E5"> then we have a validate</font>

500
00:19:52,370 --> 00:19:56,178
function which<font color="#CCCCCC"> just takes and some</font>

501
00:19:54,259 --> 00:19:58,909
encoded data and tells us whether the

502
00:19:56,179 --> 00:20:03,139
it's space 64 encoded or we can assume

503
00:19:58,909 --> 00:20:07,639
<font color="#E5E5E5">that it's base64 encoded this we can</font>

504
00:20:03,139 --> 00:20:10,490
generalize<font color="#E5E5E5"> into a property so we say we</font>

505
00:20:07,639 --> 00:20:13,639
encode we have some data which is a

506
00:20:10,490 --> 00:20:15,440
random binary sequence we say we encode

507
00:20:13,639 --> 00:20:18,469
this random binary sequence into the

508
00:20:15,440 --> 00:20:20,210
encoded wave data we then<font color="#E5E5E5"> check with the</font>

509
00:20:18,470 --> 00:20:21,919
our valid data that the data<font color="#E5E5E5"> that we</font>

510
00:20:20,210 --> 00:20:23,299
generate is valid to<font color="#E5E5E5"> ourselves it would</font>

511
00:20:21,919 --> 00:20:25,879
be pretty stupid that we generate data

512
00:20:23,299 --> 00:20:29,450
that we cannot validate<font color="#E5E5E5"> and then we say</font>

513
00:20:25,879 --> 00:20:32,029
<font color="#CCCCCC">that if we decode the encoded data</font><font color="#E5E5E5"> then</font>

514
00:20:29,450 --> 00:20:33,529
we get decoded<font color="#E5E5E5"> variable and then at the</font>

515
00:20:32,029 --> 00:20:36,679
end we say that data<font color="#CCCCCC"> should be equal to</font>

516
00:20:33,529 --> 00:20:38,330
the decoded value does people get this

517
00:20:36,679 --> 00:20:41,210
sort of<font color="#E5E5E5"> weird</font><font color="#CCCCCC"> transiting to use</font><font color="#E5E5E5"> a more</font>

518
00:20:38,330 --> 00:20:44,960
<font color="#E5E5E5">fee between these this is a pretty</font>

519
00:20:41,210 --> 00:20:46,820
simple<font color="#CCCCCC"> example</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> build tool for a</font>

520
00:20:44,960 --> 00:20:48,409
langdon generates a set of<font color="#E5E5E5"> tests you can</font>

521
00:20:46,820 --> 00:20:51,678
have it<font color="#E5E5E5"> run all</font><font color="#CCCCCC"> night or you can</font><font color="#E5E5E5"> just</font>

522
00:20:48,409 --> 00:20:53,059
<font color="#E5E5E5">have it run for 100</font><font color="#CCCCCC"> tests and it will</font>

523
00:20:51,679 --> 00:20:55,009
try to find<font color="#CCCCCC"> some</font><font color="#E5E5E5"> errors if there's no</font>

524
00:20:53,059 --> 00:20:58,490
errors<font color="#E5E5E5"> everything is good</font><font color="#CCCCCC"> and we try</font><font color="#E5E5E5"> to</font>

525
00:20:55,009 --> 00:20:59,990
run this for<font color="#E5E5E5"> everything we do a slightly</font>

526
00:20:58,490 --> 00:21:02,950
<font color="#E5E5E5">more complicated example we have</font>

527
00:20:59,990 --> 00:21:05,809
diffie-hellman<font color="#E5E5E5"> classic</font><font color="#CCCCCC"> DVM and it's used</font>

528
00:21:02,950 --> 00:21:10,240
mostly for<font color="#E5E5E5"> the legacy hidden services</font>

529
00:21:05,809 --> 00:21:13,309
right<font color="#CCCCCC"> now where we have a generator</font>

530
00:21:10,240 --> 00:21:15,649
which is<font color="#CCCCCC"> two in</font><font color="#E5E5E5"> this case and we have</font>

531
00:21:13,309 --> 00:21:17,240
some prime number<font color="#CCCCCC"> then we have the</font>

532
00:21:15,649 --> 00:21:19,969
function to generate<font color="#CCCCCC"> a key pair a secret</font>

533
00:21:17,240 --> 00:21:21,919
key<font color="#E5E5E5"> and a</font><font color="#CCCCCC"> public key we can</font><font color="#E5E5E5"> generate a</font>

534
00:21:19,970 --> 00:21:24,529
<font color="#E5E5E5">shared secret from someone else's public</font>

535
00:21:21,919 --> 00:21:27,379
key and<font color="#E5E5E5"> our secret key we can check if</font>

536
00:21:24,529 --> 00:21:29,899
the public key we received is<font color="#CCCCCC"> T generate</font>

537
00:21:27,379 --> 00:21:31,789
<font color="#E5E5E5">it has some specific specifications</font><font color="#CCCCCC"> not</font>

538
00:21:29,899 --> 00:21:33,799
some specific properties<font color="#CCCCCC"> we</font><font color="#E5E5E5"> want to test</font>

539
00:21:31,789 --> 00:21:36,769
for<font color="#E5E5E5"> there which is also</font><font color="#CCCCCC"> defined in</font>

540
00:21:33,799 --> 00:21:38,360
<font color="#CCCCCC">tourists specifications</font><font color="#E5E5E5"> and we have some</font>

541
00:21:36,769 --> 00:21:40,129
<font color="#E5E5E5">parameters we make the parameter is a</font>

542
00:21:38,360 --> 00:21:42,258
function<font color="#CCCCCC"> that returns a list</font><font color="#E5E5E5"> of two</font>

543
00:21:40,129 --> 00:21:43,908
elements<font color="#CCCCCC"> just our PNG this is so that we</font>

544
00:21:42,259 --> 00:21:46,480
<font color="#CCCCCC">can mark it later</font><font color="#E5E5E5"> we can change the</font>

545
00:21:43,909 --> 00:21:46,480
generator<font color="#E5E5E5"> and we</font>

546
00:21:48,740 --> 00:21:53,009
we then create a simple generator

547
00:21:51,389 --> 00:21:55,229
<font color="#E5E5E5">because we're using real random data</font>

548
00:21:53,009 --> 00:21:57,590
here we just generate<font color="#CCCCCC"> the key pair using</font>

549
00:21:55,230 --> 00:22:02,669
<font color="#E5E5E5">whatever</font><font color="#CCCCCC"> OpenSSL is doing to generate</font><font color="#E5E5E5"> it</font>

550
00:21:57,590 --> 00:22:06,720
<font color="#E5E5E5">we can then save for all a secret and a</font>

551
00:22:02,669 --> 00:22:09,480
<font color="#E5E5E5">public about key pairs we've just</font>

552
00:22:06,720 --> 00:22:13,830
generated if we<font color="#E5E5E5"> compute this shared</font>

553
00:22:09,480 --> 00:22:15,450
secret between<font color="#E5E5E5"> a s and B</font><font color="#CCCCCC"> P and P is an</font>

554
00:22:13,830 --> 00:22:17,370
AP we want to be<font color="#E5E5E5"> sure that they're the</font>

555
00:22:15,450 --> 00:22:18,659
same<font color="#E5E5E5"> this sort of the property of</font>

556
00:22:17,370 --> 00:22:20,969
diffie-hellman that we get<font color="#E5E5E5"> the chef's</font>

557
00:22:18,659 --> 00:22:25,409
secret<font color="#E5E5E5"> if we exchange</font><font color="#CCCCCC"> public this</font><font color="#E5E5E5"> is a</font>

558
00:22:20,970 --> 00:22:26,850
pretty simple test to<font color="#E5E5E5"> do this is a bit</font>

559
00:22:25,409 --> 00:22:30,360
more<font color="#CCCCCC"> complicated we have to test</font><font color="#E5E5E5"> for</font>

560
00:22:26,850 --> 00:22:33,330
these<font color="#CCCCCC"> G generate values so we still have</font>

561
00:22:30,360 --> 00:22:37,139
the<font color="#CCCCCC"> rtmp this is the same module</font><font color="#E5E5E5"> we have</font>

562
00:22:33,330 --> 00:22:39,120
<font color="#E5E5E5">these generate is</font><font color="#CCCCCC"> to generate value we</font>

563
00:22:37,139 --> 00:22:40,820
now have a set of<font color="#E5E5E5"> things</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we know is</font>

564
00:22:39,120 --> 00:22:43,018
bad values when<font color="#CCCCCC"> you have diffie-hellman</font>

565
00:22:40,820 --> 00:22:46,080
<font color="#E5E5E5">we know that all the negative numbers</font>

566
00:22:43,019 --> 00:22:49,019
<font color="#CCCCCC">are</font><font color="#E5E5E5"> bad we know that the integers 0</font><font color="#CCCCCC"> and</font>

567
00:22:46,080 --> 00:22:52,949
<font color="#CCCCCC">1</font><font color="#E5E5E5"> we know that using</font><font color="#CCCCCC"> D generator</font><font color="#E5E5E5"> itself</font>

568
00:22:49,019 --> 00:22:57,090
is bad<font color="#E5E5E5"> and we know that every</font><font color="#CCCCCC"> value from</font>

569
00:22:52,950 --> 00:22:58,740
P minus 1 to infinity of bad values so

570
00:22:57,090 --> 00:23:00,899
now we can<font color="#CCCCCC"> define a test down</font><font color="#E5E5E5"> here that</font>

571
00:22:58,740 --> 00:23:02,340
<font color="#E5E5E5">says for all pub bad public keys that</font>

572
00:23:00,899 --> 00:23:05,610
we've<font color="#E5E5E5"> generated with the bad public key</font>

573
00:23:02,340 --> 00:23:07,889
generator the<font color="#E5E5E5"> onion is generate function</font>

574
00:23:05,610 --> 00:23:09,990
should return true now we can generate a

575
00:23:07,889 --> 00:23:13,500
lot<font color="#CCCCCC"> of bad keys the big analysis and</font>

576
00:23:09,990 --> 00:23:18,389
again we also test that the keys that<font color="#CCCCCC"> we</font>

577
00:23:13,500 --> 00:23:23,250
generate<font color="#CCCCCC"> I'm not the generator does</font>

578
00:23:18,389 --> 00:23:25,229
<font color="#E5E5E5">people get that soon</font><font color="#CCCCCC"> flag for Network</font>

579
00:23:23,250 --> 00:23:27,210
<font color="#E5E5E5">testing we use chutney it's a pretty</font>

580
00:23:25,230 --> 00:23:30,240
nice little tool<font color="#CCCCCC"> that is provided by tor</font>

581
00:23:27,210 --> 00:23:32,309
<font color="#E5E5E5">you write these Python files that where</font>

582
00:23:30,240 --> 00:23:34,379
you say how many<font color="#E5E5E5"> of a</font><font color="#CCCCCC"> certain type of</font>

583
00:23:32,309 --> 00:23:35,850
tor instance you want<font color="#E5E5E5"> to be running then</font>

584
00:23:34,379 --> 00:23:39,299
you say how<font color="#CCCCCC"> many</font><font color="#E5E5E5"> of them you want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> run</font>

585
00:23:35,850 --> 00:23:41,340
and then<font color="#CCCCCC"> you run those pretty</font><font color="#E5E5E5"> few steps</font>

586
00:23:39,299 --> 00:23:43,139
<font color="#E5E5E5">to configure your network to start it to</font>

587
00:23:41,340 --> 00:23:45,178
check the status of<font color="#CCCCCC"> every node is there</font>

588
00:23:43,139 --> 00:23:46,979
so running<font color="#E5E5E5"> and you can stop it again so</font>

589
00:23:45,179 --> 00:23:49,620
you<font color="#E5E5E5"> can quickly spawn up a big tor</font>

590
00:23:46,980 --> 00:23:51,500
network of 200 notes and have it run<font color="#CCCCCC"> on</font>

591
00:23:49,620 --> 00:23:53,969
your laptop with directory authorities

592
00:23:51,500 --> 00:23:56,370
<font color="#E5E5E5">middle relays clients exit notes</font>

593
00:23:53,970 --> 00:23:58,490
everything it's a very very nice tool<font color="#CCCCCC"> to</font>

594
00:23:56,370 --> 00:23:58,489
use

595
00:23:59,029 --> 00:24:10,980
this it is designed for<font color="#E5E5E5"> tour</font><font color="#CCCCCC"> but</font>

596
00:24:08,519 --> 00:24:12,720
basically it takes<font color="#E5E5E5"> a binary and just</font>

597
00:24:10,980 --> 00:24:14,820
starts<font color="#E5E5E5"> the binary many times with some</font>

598
00:24:12,720 --> 00:24:16,889
configuration files from a template<font color="#E5E5E5"> it's</font>

599
00:24:14,820 --> 00:24:18,840
a very generic tool but it's like the

600
00:24:16,889 --> 00:24:29,250
code that<font color="#E5E5E5"> ships with it is to sign for</font>

601
00:24:18,840 --> 00:24:31,529
tour yeah you can integrate your<font color="#CCCCCC"> own</font>

602
00:24:29,250 --> 00:24:33,330
<font color="#E5E5E5">stuff into it so I integrate</font><font color="#CCCCCC"> tala</font><font color="#E5E5E5"> into</font>

603
00:24:31,529 --> 00:24:35,429
chutney<font color="#E5E5E5"> so</font><font color="#CCCCCC"> a small epic network of</font>

604
00:24:33,330 --> 00:24:38,460
ordinary<font color="#CCCCCC"> see tour</font><font color="#E5E5E5"> demons</font><font color="#CCCCCC"> and then I run</font>

605
00:24:35,429 --> 00:24:42,269
a<font color="#E5E5E5"> few tall a demons in it</font><font color="#CCCCCC"> whose</font><font color="#E5E5E5"> that is</font>

606
00:24:38,460 --> 00:24:44,250
<font color="#E5E5E5">possible this is like the most important</font>

607
00:24:42,269 --> 00:24:46,230
component of the tolerable occasion we

608
00:24:44,250 --> 00:24:48,419
<font color="#CCCCCC">have a</font><font color="#E5E5E5"> peer process which represents a</font>

609
00:24:46,230 --> 00:24:51,750
node in the<font color="#CCCCCC"> network an active</font><font color="#E5E5E5"> node that</font>

610
00:24:48,419 --> 00:24:53,399
we are connected<font color="#CCCCCC"> to because</font><font color="#E5E5E5"> the network</font>

611
00:24:51,750 --> 00:24:55,139
can block when we send messages<font color="#E5E5E5"> we</font><font color="#CCCCCC"> also</font>

612
00:24:53,399 --> 00:24:56,850
have to have<font color="#CCCCCC"> a small satellite process</font>

613
00:24:55,139 --> 00:24:58,529
that are sort<font color="#CCCCCC"> of connected to</font><font color="#E5E5E5"> it which</font>

614
00:24:56,850 --> 00:25:01,379
has the<font color="#CCCCCC"> queue</font><font color="#E5E5E5"> of cells that we're</font>

615
00:24:58,529 --> 00:25:02,970
sending this is where we sort<font color="#E5E5E5"> of</font>

616
00:25:01,379 --> 00:25:08,279
serialize the data that we're<font color="#E5E5E5"> sending</font>

617
00:25:02,970 --> 00:25:10,110
out to this node<font color="#E5E5E5"> what we</font><font color="#CCCCCC"> then do is that</font>

618
00:25:08,279 --> 00:25:13,259
we<font color="#E5E5E5"> have a number</font><font color="#CCCCCC"> of circuits and</font><font color="#E5E5E5"> we</font>

619
00:25:10,110 --> 00:25:15,990
built<font color="#E5E5E5"> up that we make out so these are</font>

620
00:25:13,259 --> 00:25:17,460
also individual processes this means now

621
00:25:15,990 --> 00:25:18,659
the<font color="#CCCCCC"> dish circuit</font><font color="#E5E5E5"> encryption that is</font>

622
00:25:17,460 --> 00:25:20,730
happening is<font color="#CCCCCC"> happening in their own</font>

623
00:25:18,659 --> 00:25:22,470
processes<font color="#E5E5E5"> this means that they're</font>

624
00:25:20,730 --> 00:25:24,360
isolated we can terminate<font color="#E5E5E5"> one of them if</font>

625
00:25:22,470 --> 00:25:30,299
we have<font color="#CCCCCC"> an error</font><font color="#E5E5E5"> and it won't</font><font color="#CCCCCC"> affect the</font>

626
00:25:24,360 --> 00:25:31,889
other ones when we<font color="#E5E5E5"> build connectivity to</font>

627
00:25:30,299 --> 00:25:33,509
another node in<font color="#E5E5E5"> the network because</font>

628
00:25:31,889 --> 00:25:35,729
we're only a middle node we never make

629
00:25:33,509 --> 00:25:37,320
clients<font color="#CCCCCC"> that means that we always have a</font>

630
00:25:35,730 --> 00:25:39,720
connection<font color="#E5E5E5"> coming in which wants to</font>

631
00:25:37,320 --> 00:25:41,100
connect to someone<font color="#E5E5E5"> on the</font><font color="#CCCCCC"> outside this</font>

632
00:25:39,720 --> 00:25:42,659
<font color="#E5E5E5">means that we</font><font color="#CCCCCC"> have a representation</font><font color="#E5E5E5"> of</font>

633
00:25:41,100 --> 00:25:44,428
both of them<font color="#CCCCCC"> and</font><font color="#E5E5E5"> we have a manager which</font>

634
00:25:42,659 --> 00:25:47,220
sort of<font color="#E5E5E5"> takes</font><font color="#CCCCCC"> care of all D and put</font><font color="#E5E5E5"> an</font>

635
00:25:44,429 --> 00:25:48,450
<font color="#E5E5E5">output of it and make</font><font color="#CCCCCC"> sure</font><font color="#E5E5E5"> that if one</font>

636
00:25:47,220 --> 00:25:51,509
<font color="#E5E5E5">of them disconnects the other one is</font>

637
00:25:48,450 --> 00:25:54,029
notified etc<font color="#E5E5E5"> etc right now we have one</font>

638
00:25:51,509 --> 00:25:55,529
circuit process represented for each of

639
00:25:54,029 --> 00:25:57,120
the peer which is<font color="#CCCCCC"> stupid because</font><font color="#E5E5E5"> they</font>

640
00:25:55,529 --> 00:25:58,620
have the<font color="#E5E5E5"> same state so we're moving</font>

641
00:25:57,120 --> 00:26:01,649
<font color="#E5E5E5">towards</font><font color="#CCCCCC"> a network design which is more</font>

642
00:25:58,620 --> 00:26:02,939
<font color="#CCCCCC">like this</font><font color="#E5E5E5"> so we have</font><font color="#CCCCCC"> States circuits</font>

643
00:26:01,649 --> 00:26:05,178
<font color="#CCCCCC">that are mutually</font><font color="#E5E5E5"> owned by the two</font>

644
00:26:02,940 --> 00:26:05,179
processes

645
00:26:05,990 --> 00:26:11,130
there are some resources<font color="#E5E5E5"> to</font><font color="#CCCCCC"> look at we</font>

646
00:26:08,700 --> 00:26:12,990
<font color="#E5E5E5">have</font><font color="#CCCCCC"> detour specifications</font><font color="#E5E5E5"> there's the</font>

647
00:26:11,130 --> 00:26:14,730
tour spec and the direct respect those

648
00:26:12,990 --> 00:26:17,280
are needed<font color="#E5E5E5"> you have to read</font><font color="#CCCCCC"> all of them</font>

649
00:26:14,730 --> 00:26:18,960
to understand the tailor code there is

650
00:26:17,280 --> 00:26:20,540
<font color="#E5E5E5">some really good</font><font color="#CCCCCC"> airline resources if</font>

651
00:26:18,960 --> 00:26:23,280
you<font color="#CCCCCC"> want to get introduced to our</font><font color="#E5E5E5"> line</font>

652
00:26:20,540 --> 00:26:25,350
<font color="#E5E5E5">and there is of course a seat for code</font>

653
00:26:23,280 --> 00:26:27,870
which is really<font color="#E5E5E5"> really easy to also dive</font>

654
00:26:25,350 --> 00:26:30,000
into and get some kind<font color="#CCCCCC"> of</font><font color="#E5E5E5"> understanding</font>

655
00:26:27,870 --> 00:26:31,229
of what's going<font color="#CCCCCC"> on</font><font color="#E5E5E5"> and extracting test</font>

656
00:26:30,000 --> 00:26:35,610
cases and<font color="#E5E5E5"> so on when you're building</font>

657
00:26:31,230 --> 00:26:37,560
stuff the source code itself<font color="#CCCCCC"> atala</font><font color="#E5E5E5"> is</font>

658
00:26:35,610 --> 00:26:38,850
available<font color="#CCCCCC"> I would really like</font><font color="#E5E5E5"> that you</font>

659
00:26:37,560 --> 00:26:40,169
don't<font color="#CCCCCC"> run it on the production</font><font color="#E5E5E5"> network</font>

660
00:26:38,850 --> 00:26:41,790
that's<font color="#E5E5E5"> sort of the whole carefulness</font>

661
00:26:40,170 --> 00:26:44,340
thing run it and<font color="#E5E5E5"> test if you want</font><font color="#CCCCCC"> to</font>

662
00:26:41,790 --> 00:26:47,790
play<font color="#E5E5E5"> around with it and feel</font><font color="#CCCCCC"> free to</font>

663
00:26:44,340 --> 00:26:51,240
submit issues<font color="#E5E5E5"> and patches if you want to</font>

664
00:26:47,790 --> 00:26:52,680
work<font color="#CCCCCC"> in it so some of the conclusions</font>

665
00:26:51,240 --> 00:26:53,970
<font color="#CCCCCC">that I found out when I started this</font>

666
00:26:52,680 --> 00:26:55,710
project<font color="#E5E5E5"> and especially</font><font color="#CCCCCC"> after</font><font color="#E5E5E5"> I've</font>

667
00:26:53,970 --> 00:26:56,880
started working<font color="#CCCCCC"> on DC implementation is</font>

668
00:26:55,710 --> 00:26:58,680
<font color="#CCCCCC">that it's really</font><font color="#E5E5E5"> really</font><font color="#CCCCCC"> difficult to</font>

669
00:26:56,880 --> 00:27:02,460
write a<font color="#E5E5E5"> third</font><font color="#CCCCCC"> pattie implementation of</font>

670
00:26:58,680 --> 00:27:04,950
<font color="#E5E5E5">tor these specs are really good there's</font>

671
00:27:02,460 --> 00:27:07,080
really good tests but there's a lot<font color="#E5E5E5"> of</font>

672
00:27:04,950 --> 00:27:08,670
things<font color="#CCCCCC"> in the source code that is</font><font color="#E5E5E5"> not in</font>

673
00:27:07,080 --> 00:27:10,590
<font color="#CCCCCC">the specifications because there is such</font>

674
00:27:08,670 --> 00:27:12,240
a big research community and security

675
00:27:10,590 --> 00:27:14,310
people<font color="#E5E5E5"> who are looking at tor constantly</font>

676
00:27:12,240 --> 00:27:16,200
and things are evolving<font color="#E5E5E5"> very fast this</font>

677
00:27:14,310 --> 00:27:19,560
<font color="#E5E5E5">makes it difficult to make a very safe</font>

678
00:27:16,200 --> 00:27:20,610
implementation it was a<font color="#E5E5E5"> really good way</font>

679
00:27:19,560 --> 00:27:22,889
<font color="#CCCCCC">for me</font><font color="#E5E5E5"> to get a very deep understanding</font>

680
00:27:20,610 --> 00:27:24,510
<font color="#E5E5E5">of how tor works which was one of</font><font color="#CCCCCC"> these</font>

681
00:27:22,890 --> 00:27:27,480
<font color="#E5E5E5">things I really wanted to learn</font>

682
00:27:24,510 --> 00:27:29,010
initially and we're at the<font color="#CCCCCC"> point</font><font color="#E5E5E5"> where</font>

683
00:27:27,480 --> 00:27:31,590
we can relate traffic as a middle node

684
00:27:29,010 --> 00:27:34,290
we want<font color="#E5E5E5"> to do exit node during this year</font>

685
00:27:31,590 --> 00:27:35,939
at some point and<font color="#CCCCCC"> we can</font><font color="#E5E5E5"> run it on a</font>

686
00:27:34,290 --> 00:27:39,420
small test<font color="#E5E5E5"> network for ourselves and</font>

687
00:27:35,940 --> 00:27:43,220
<font color="#E5E5E5">that seems to be working</font><font color="#CCCCCC"> pretty well is</font>

688
00:27:39,420 --> 00:27:45,520
there any questions we<font color="#E5E5E5"> are at the end</font>

689
00:27:43,220 --> 00:28:33,670
yes

690
00:27:45,520 --> 00:28:35,200
I mean I<font color="#CCCCCC"> think one of the problem is the</font>

691
00:28:33,670 --> 00:28:37,210
specifications will always be a bit

692
00:28:35,200 --> 00:28:38,710
<font color="#CCCCCC">behind of state-of-the-art</font><font color="#E5E5E5"> research</font>

693
00:28:37,210 --> 00:28:41,920
<font color="#E5E5E5">because the research comes out the</font>

694
00:28:38,710 --> 00:28:43,150
<font color="#E5E5E5">release papers we</font><font color="#CCCCCC"> analyze your papers we</font>

695
00:28:41,920 --> 00:28:45,730
find some issues<font color="#CCCCCC"> and then</font><font color="#E5E5E5"> we have to go</font>

696
00:28:43,150 --> 00:28:47,260
back and fix<font color="#E5E5E5"> the specifications that's</font>

697
00:28:45,730 --> 00:28:50,830
more<font color="#E5E5E5"> the problem that you would have to</font>

698
00:28:47,260 --> 00:28:53,080
I think I would have<font color="#E5E5E5"> to read more text</font>

699
00:28:50,830 --> 00:28:55,090
than I want<font color="#E5E5E5"> to read to understand all</font>

700
00:28:53,080 --> 00:28:58,149
these<font color="#E5E5E5"> things</font><font color="#CCCCCC"> that are encoded in</font><font color="#E5E5E5"> each</font>

701
00:28:55,090 --> 00:28:59,530
line in deceit or<font color="#E5E5E5"> implementation</font><font color="#CCCCCC"> that's</font>

702
00:28:58,150 --> 00:29:01,240
sort of<font color="#CCCCCC"> the scary thing reading these</font>

703
00:28:59,530 --> 00:29:02,830
specs is very easy<font color="#E5E5E5"> that was what I</font>

704
00:29:01,240 --> 00:29:04,750
wanted initially<font color="#CCCCCC"> my mental image was</font>

705
00:29:02,830 --> 00:29:07,000
<font color="#CCCCCC">that I should be able</font><font color="#E5E5E5"> to sit</font><font color="#CCCCCC"> down read</font>

706
00:29:04,750 --> 00:29:09,220
<font color="#E5E5E5">these text files</font><font color="#CCCCCC"> and be able change</font><font color="#E5E5E5"> them</font>

707
00:29:07,000 --> 00:29:11,530
<font color="#CCCCCC">and that's sort</font><font color="#E5E5E5"> of a pretty sensible</font>

708
00:29:09,220 --> 00:29:13,350
goal I think<font color="#E5E5E5"> but when it came to that I</font>

709
00:29:11,530 --> 00:29:15,460
started looking into<font color="#E5E5E5"> the C source code</font>

710
00:29:13,350 --> 00:29:18,580
<font color="#E5E5E5">there's a lot of things there was like</font>

711
00:29:15,460 --> 00:29:19,870
timing<font color="#E5E5E5"> and how it schedules how things</font>

712
00:29:18,580 --> 00:29:22,840
are coming<font color="#E5E5E5"> out and stuff like that that</font>

713
00:29:19,870 --> 00:29:28,260
<font color="#E5E5E5">are important to keep equal to these two</font>

714
00:29:22,840 --> 00:29:28,260
<font color="#CCCCCC">DC</font><font color="#E5E5E5"> implementation this</font>

715
00:29:33,210 --> 00:29:37,090
<font color="#E5E5E5">No</font>

716
00:29:34,720 --> 00:29:39,429
decoe<font color="#E5E5E5"> and I actually think the Java</font>

717
00:29:37,090 --> 00:29:42,759
implementation<font color="#CCCCCC"> might have some client</font>

718
00:29:39,429 --> 00:29:44,679
notes but of the middle notes

719
00:29:42,759 --> 00:29:47,649
I think the go implementation written<font color="#E5E5E5"> by</font>

720
00:29:44,679 --> 00:29:49,690
Tom he he wrote it and ran it and<font color="#E5E5E5"> I</font>

721
00:29:47,649 --> 00:29:51,178
think<font color="#CCCCCC"> it broke some records and how much</font>

722
00:29:49,690 --> 00:29:53,679
<font color="#E5E5E5">traffic it was actually running through</font>

723
00:29:51,179 --> 00:29:56,830
he faced<font color="#E5E5E5"> a problem with a memory leak</font>

724
00:29:53,679 --> 00:30:01,840
between goes<font color="#E5E5E5"> copying between stacks from</font>

725
00:29:56,830 --> 00:30:03,100
how go is to the<font color="#E5E5E5"> C code of OpenSSL that</font>

726
00:30:01,840 --> 00:30:04,480
I know has been running<font color="#E5E5E5"> on the</font>

727
00:30:03,100 --> 00:30:04,990
production<font color="#E5E5E5"> network but it's not running</font>

728
00:30:04,480 --> 00:30:15,970
there anymore

729
00:30:04,990 --> 00:30:17,470
<font color="#E5E5E5">he sort</font><font color="#CCCCCC"> of left</font><font color="#E5E5E5"> the project very good</font>

730
00:30:15,970 --> 00:30:20,879
<font color="#E5E5E5">question for people who are not familiar</font>

731
00:30:17,470 --> 00:30:23,139
wizard<font color="#E5E5E5"> Erlang is sort of an old</font>

732
00:30:20,879 --> 00:30:25,959
functional language and<font color="#CCCCCC"> Alex here's a</font>

733
00:30:23,139 --> 00:30:27,729
more<font color="#E5E5E5"> modern it's a bit Ruby like I don't</font>

734
00:30:25,960 --> 00:30:29,559
<font color="#E5E5E5">know if it's bad to call it that</font><font color="#CCCCCC"> it's a</font>

735
00:30:27,730 --> 00:30:31,210
more fancy<font color="#CCCCCC"> version and it's</font><font color="#E5E5E5"> running on</font>

736
00:30:29,559 --> 00:30:34,408
<font color="#E5E5E5">the same virtual machine there is no</font>

737
00:30:31,210 --> 00:30:37,330
<font color="#CCCCCC">reason other than I</font><font color="#E5E5E5"> know where Lang</font><font color="#CCCCCC"> I</font>

738
00:30:34,409 --> 00:30:39,580
think we would welcome<font color="#CCCCCC"> elixir components</font>

739
00:30:37,330 --> 00:30:43,269
in<font color="#E5E5E5"> it we use rebar three years</font><font color="#CCCCCC"> build</font>

740
00:30:39,580 --> 00:30:44,889
<font color="#CCCCCC">tools so</font><font color="#E5E5E5"> you would be able</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> use but I</font>

741
00:30:43,269 --> 00:30:46,269
<font color="#E5E5E5">just don't know what I'd</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> think</font>

742
00:30:44,889 --> 00:30:49,918
I like some<font color="#E5E5E5"> of these things</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> Alex</font>

743
00:30:46,269 --> 00:30:49,919
here but I'm<font color="#E5E5E5"> just more familiar</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> our</font>

744
00:30:50,490 --> 00:30:56,169
<font color="#CCCCCC">other questions if you want to you can</font>

745
00:30:53,769 --> 00:30:57,940
come<font color="#E5E5E5"> by our village</font><font color="#CCCCCC"> Oh if you want to</font>

746
00:30:56,169 --> 00:31:01,750
you can<font color="#E5E5E5"> come by our village and share a</font>

747
00:30:57,940 --> 00:31:06,570
bit<font color="#CCCCCC"> about the differences cool thank you</font>

748
00:31:01,750 --> 00:31:18,720
[Applause]

749
00:31:06,570 --> 00:31:18,720
[Music]

