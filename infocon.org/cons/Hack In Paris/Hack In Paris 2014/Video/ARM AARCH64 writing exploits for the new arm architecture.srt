1
00:00:00,070 --> 00:00:03,800
once say welcome to my introduction
about the new

2
00:00:03,800 --> 00:00:08,340
I'm architecture about new oMG age 64
bit

3
00:00:08,340 --> 00:00:12,050
a mic picture are my name is Thomas Ross
I do

4
00:00:12,050 --> 00:00:17,600
in bed at 6:30 p.m. oh well security up
mostly in the direction of bootloaders

5
00:00:17,600 --> 00:00:22,289
and so on and yeah we gonna take a
relatively short look at

6
00:00:22,289 --> 00:00:27,730
what's new in the architecture and what
changed and how it does it make

7
00:00:27,730 --> 00:00:33,440
my job different and how I'd doesn't
change the future of

8
00:00:33,440 --> 00:00:36,829
I mobile exploitation

9
00:00:36,829 --> 00:00:40,399
are for example put a breaks for

10
00:00:40,399 --> 00:00:44,760
hyper I prime are either invasion and
Swan

11
00:00:44,760 --> 00:00:48,250
think this is the basic

12
00:00:48,250 --> 00:00:51,649
who wrote map of they just three of the
ARM architecture

13
00:00:51,649 --> 00:00:55,899
it started with the with the relatively
old on b5

14
00:00:55,899 --> 00:01:00,550
on the six I construction Southampton on
current mobile phones they're most

15
00:01:00,550 --> 00:01:01,609
likely using

16
00:01:01,609 --> 00:01:05,260
and armpits having peace process for arm

17
00:01:05,260 --> 00:01:09,830
p.m. was obviated this I V eight is
basically the biggest

18
00:01:09,830 --> 00:01:13,650
upgrade to the instructions at since it
was invented

19
00:01:13,650 --> 00:01:17,729
I in and obviate we have stuff like

20
00:01:17,729 --> 00:01:20,900
mandatory floating-point we have I

21
00:01:20,900 --> 00:01:24,180
at fort here exceptional based

22
00:01:24,180 --> 00:01:31,180
architectural hypervisor sands on and if
we look at most changes and arm

23
00:01:31,329 --> 00:01:35,659
64-bit its really focused on high
performance applications

24
00:01:35,659 --> 00:01:38,979
say one well the normal city to bed arm
I

25
00:01:38,979 --> 00:01:44,030
is very good for small devices for
minimum power consumption devices

26
00:01:44,030 --> 00:01:47,180
with on 64 we can actually really

27
00:01:47,180 --> 00:01:50,490
do massive processing I love

28
00:01:50,490 --> 00:01:53,649
the instructions contained stuff like
hymns for the

29
00:01:53,649 --> 00:01:57,520
for pipeline optimization for caching
optimization

30
00:01:57,520 --> 00:02:00,969
and so on arm we don't have the

31
00:02:00,969 --> 00:02:04,790
the old CPU modes anymore we now have
so-called exceptional levels

32
00:02:04,790 --> 00:02:07,790
we have virtualization burden I'm

33
00:02:07,790 --> 00:02:12,430
and yet the the instruction are still 32
bit fix linked those so you're you're

34
00:02:12,430 --> 00:02:12,900
not

35
00:02:12,900 --> 00:02:16,590
doubling your coat size we have much
more registers

36
00:02:16,590 --> 00:02:20,349
we have a divide instruction finally if
you've ever written

37
00:02:20,349 --> 00:02:24,480
embedded for I'm Cody 10 what a pain it
was still

38
00:02:24,480 --> 00:02:27,890
text would divide something new
bootloader with the comp and

39
00:02:27,890 --> 00:02:31,110
and some construction and start-up
Mumbai and thunder

40
00:02:31,110 --> 00:02:35,129
conditional sum each and every
instruction we can still

41
00:02:35,129 --> 00:02:38,220
also on 32-bit up I'm code

42
00:02:38,220 --> 00:02:41,569
save if we compared to the

43
00:02:41,569 --> 00:02:45,280
old are instruction set third does some
main difference

44
00:02:45,280 --> 00:02:48,360
a for example there's no more some vote
some

45
00:02:48,360 --> 00:02:51,910
don't want to instruction set on arm
that basically was

46
00:02:51,910 --> 00:02:55,190
the normal instructions such shrink down
to sixteen

47
00:02:55,190 --> 00:02:58,370
sixteen-bit construction its was very
limited

48
00:02:58,370 --> 00:03:03,769
but very small and onto very good for
compilers to generate because the

49
00:03:03,769 --> 00:03:08,519
a it was so simple another thing

50
00:03:08,519 --> 00:03:11,900
that's missing now are conditionally a

51
00:03:11,900 --> 00:03:15,739
executing instructions on on 32-bit

52
00:03:15,739 --> 00:03:19,129
each instruction could have I'm a
condition

53
00:03:19,129 --> 00:03:22,129
in it so you could for example have a
block

54
00:03:22,129 --> 00:03:25,530
instead of having up branches for

55
00:03:25,530 --> 00:03:29,129
comparison and so on for its and tells
you could just have

56
00:03:29,129 --> 00:03:32,610
a forbid in the instruction set
differently and it would

57
00:03:32,610 --> 00:03:35,870
are compared per instruction

58
00:03:35,870 --> 00:03:40,879
we also don't have a coprocessor anymore
which is stiffing that you use

59
00:03:40,879 --> 00:03:44,840
on on I would seep use for it your a
menu configuration

60
00:03:44,840 --> 00:03:49,250
for your and higher power management
setup where cashing at Swan

61
00:03:49,250 --> 00:03:54,110
arm the the program counters not
writeable

62
00:03:54,110 --> 00:03:57,209
anymore only by branch instructions but
we have

63
00:03:57,209 --> 00:04:04,030
almost double the registers if you if
you want to get started was a bit of

64
00:04:04,030 --> 00:04:07,739
on 64 development there are some
official home

65
00:04:07,739 --> 00:04:11,810
have simulators as the iPhone 5s that
you can get

66
00:04:11,810 --> 00:04:16,739
your coat execute 100 and there's the
visit Alex press which is basically in

67
00:04:16,739 --> 00:04:20,769
fpga-based I implementation of the

68
00:04:20,769 --> 00:04:25,440
on 64 and there are some other boats and
also very cool is that

69
00:04:25,440 --> 00:04:28,620
chemo now house full support for up

70
00:04:28,620 --> 00:04:32,500
actually since quite a long time full
support for arc

71
00:04:32,500 --> 00:04:39,440
64 if you want to analyze final result
generate binary this

72
00:04:39,440 --> 00:04:42,690
and want to reverse engineer existing
I'm 64k

73
00:04:42,690 --> 00:04:47,110
most schools are already up to it I and
II the pro 60 months ago there was an

74
00:04:47,110 --> 00:04:48,580
update that now supports

75
00:04:48,580 --> 00:04:52,479
on 64-bit she says she can generate and
object them

76
00:04:52,479 --> 00:04:57,550
I can disassemble the the code the
hopper disassembler which is a very very

77
00:04:57,550 --> 00:05:00,710
nice and cheaper alternative to either
pro

78
00:05:00,710 --> 00:05:04,229
house limited but working I'm sixty-four

79
00:05:04,229 --> 00:05:08,350
support and if you want to debug
something I want to just chill could you

80
00:05:08,350 --> 00:05:10,550
could just one in chemo and a

81
00:05:10,550 --> 00:05:15,610
are in no time

82
00:05:15,610 --> 00:05:18,639
already sleds talk about the the
architecture

83
00:05:18,639 --> 00:05:22,199
at you from work is normal amplicor so
they will know that you had like

84
00:05:22,199 --> 00:05:27,070
16 registers on will some of which were
bank

85
00:05:27,070 --> 00:05:30,490
between the different in trouble levels
and so on and now you're

86
00:05:30,490 --> 00:05:33,520
actually apps search for general purpose
registers

87
00:05:33,520 --> 00:05:36,530
and also to search you first register
which is

88
00:05:36,530 --> 00:05:40,210
you the dislike point to or as you
register depending on your

89
00:05:40,210 --> 00:05:43,759
on your context on I'm

90
00:05:43,759 --> 00:05:46,990
for the first aides who registers which
are

91
00:05:46,990 --> 00:05:51,500
and intuitively at the bottom of the
slide up hope for me to stand with salsa

92
00:05:51,500 --> 00:05:53,600
and their function sets and I never

93
00:05:53,600 --> 00:05:59,289
bank between cause on the eighth is if
you return a pointer and you have

94
00:05:59,289 --> 00:06:02,400
as some six scratch which is the sum sum

95
00:06:02,400 --> 00:06:07,650
into procedure climate justice and so on
it's actually quite easy did one that

96
00:06:07,650 --> 00:06:11,800
if you write exploits will you be come
for confronted with the most will be you

97
00:06:11,800 --> 00:06:16,009
register 30 and 29 which is the friend
point and the link for just a

98
00:06:16,009 --> 00:06:19,210
about yet basically everything

99
00:06:19,210 --> 00:06:23,160
like before up accrue from you is that
you can

100
00:06:23,160 --> 00:06:26,610
all registers can be used either in
64-bit mode

101
00:06:26,610 --> 00:06:31,069
or in such a bad mood so if you for
example you happen in 10 shit

102
00:06:31,069 --> 00:06:34,300
implementation we work with 32-bit
integers

103
00:06:34,300 --> 00:06:38,270
it won't be slowed down by checks where
for example if you rotate

104
00:06:38,270 --> 00:06:43,660
wrote it shipped something your you have
to copy over the the first half

105
00:06:43,660 --> 00:06:47,750
I into the second because you you need
to such two-bit

106
00:06:47,750 --> 00:06:52,280
shifting the instructions that has not
all that and and you also have

107
00:06:52,280 --> 00:06:56,030
32 additional floating-point registers
which is

108
00:06:56,030 --> 00:07:00,880
useful if you're into science stuff

109
00:07:00,880 --> 00:07:05,449
sink the on the old I'm simply use we
have

110
00:07:05,449 --> 00:07:09,530
I the different modes basically if
you're your applications were always

111
00:07:09,530 --> 00:07:10,930
running in user mode

112
00:07:10,930 --> 00:07:15,110
the operating system was a running in
the system mod

113
00:07:15,110 --> 00:07:19,460
and and some parts of your system might
even run in the supervisor mode which is

114
00:07:19,460 --> 00:07:21,990
a slightly enhanced system mode and so
on

115
00:07:21,990 --> 00:07:26,250
it was very very difficult to build it
for

116
00:07:26,250 --> 00:07:29,780
virtualization and so on because they
fear you only have

117
00:07:29,780 --> 00:07:33,050
by one Haas interrupt handler and its

118
00:07:33,050 --> 00:07:36,530
a dedicated CPU mode and so on ads was a
lot of

119
00:07:36,530 --> 00:07:40,080
over had to if you actually did real
virtualization because a and interrupt

120
00:07:40,080 --> 00:07:41,819
was firing you have to check what

121
00:07:41,819 --> 00:07:46,599
who what BMI and and what what am I
actually supposed to do and you couldn't

122
00:07:46,599 --> 00:07:47,550
have a real

123
00:07:47,550 --> 00:07:50,949
hypervisor on money to promote on the
niece year

124
00:07:50,949 --> 00:07:54,229
the guest operating systems without a
lot of overhead

125
00:07:54,229 --> 00:07:58,599
on the get rid of that and I we only
have four months left

126
00:07:58,599 --> 00:08:03,330
up we have the whips sorry

127
00:08:03,330 --> 00:08:06,590
I'm up we we have the a

128
00:08:06,590 --> 00:08:11,930
years00 exceptional 0 which is %um
privileged mode we applications run in

129
00:08:11,930 --> 00:08:15,819
we have the exceptional the one where
you into be operating system you kinda

130
00:08:15,819 --> 00:08:17,280
and Swanson

131
00:08:17,280 --> 00:08:21,970
and we have a certain and exceptional
way a hypervisor for example your

132
00:08:21,970 --> 00:08:26,050
when you're just a bit will be your VM
there or whatever runs and and then

133
00:08:26,050 --> 00:08:29,960
underneath that we have another mode
which is called is seeking money to a

134
00:08:29,960 --> 00:08:34,550
arm which managers the state switch
between the

135
00:08:34,550 --> 00:08:39,690
in normal mode and these so-called see
just ate

136
00:08:39,690 --> 00:08:44,410
at this this graphic shows the mid how
it could look on actual system you have

137
00:08:44,410 --> 00:08:46,740
fewer applications and exceptional

138
00:08:46,740 --> 00:08:50,550
0 basically didn't do you lower your a

139
00:08:50,550 --> 00:08:53,959
the exception that the number is the low
I A privileges

140
00:08:53,959 --> 00:08:58,870
and for on foreign normal summer system
for example could look like this that

141
00:08:58,870 --> 00:09:01,470
you have a hypervisor which is

142
00:09:01,470 --> 00:09:04,850
RVM go whatever KVM and then you have to
guess

143
00:09:04,850 --> 00:09:08,810
which would bill a Linux and then on top
of that applications

144
00:09:08,810 --> 00:09:13,730
and then also money to mod and the money
to mod can be called to switch and Hugh

145
00:09:13,730 --> 00:09:16,899
as secure stayed up to sleep you can see
just ate

146
00:09:16,899 --> 00:09:21,430
a its up to love it too is missing but
you can run as CJ operating system which

147
00:09:21,430 --> 00:09:23,279
can provide functions

148
00:09:23,279 --> 00:09:27,180
to your guests to your hyper visor for
example poquito graffiti

149
00:09:27,180 --> 00:09:30,180
say up if even if you have ideas

150
00:09:30,180 --> 00:09:33,890
owned your seat area won't be on because
that

151
00:09:33,890 --> 00:09:38,140
it's entirely dedicated and separated by
this money to live here which is

152
00:09:38,140 --> 00:09:42,510
quite cool and and quite similar to what
we do today with Swiss trust them

153
00:09:42,510 --> 00:09:45,600
and I'm I'm quite excited to see the
presentations

154
00:09:45,600 --> 00:09:48,980
from ap to the bottom and up again

155
00:09:48,980 --> 00:09:53,550
on the right hand side be

156
00:09:53,550 --> 00:09:57,200
right um each privilege level

157
00:09:57,200 --> 00:10:00,800
except iight exceptional level 0 canned
said

158
00:10:00,800 --> 00:10:04,779
what causes level change basically you
cut tougher

159
00:10:04,779 --> 00:10:09,050
hardware button that causes the CPU to
jump into exception at three or you

160
00:10:09,050 --> 00:10:09,899
could have

161
00:10:09,899 --> 00:10:16,690
as soon as a as a specific date axis
happened yes if you can jump to

162
00:10:16,690 --> 00:10:20,570
to such a level 22 hypervisor for
example to mention a

163
00:10:20,570 --> 00:10:25,240
memory access was hardware whatever and
so on a turn to be you can also

164
00:10:25,240 --> 00:10:26,110
explicitly

165
00:10:26,110 --> 00:10:31,269
call down from the exception that just
never up so exceptional 0 could just

166
00:10:31,269 --> 00:10:35,029
issue and has some see instruction and
it would jump into the

167
00:10:35,029 --> 00:10:38,899
on into the secure money toward
depending on

168
00:10:38,899 --> 00:10:42,149
on the exact configuration it's quite
cool because you can

169
00:10:42,149 --> 00:10:45,500
very finally con Fuego what happens

170
00:10:45,500 --> 00:10:49,089
with the different permissions of the
excerpts from exceptional see you can't

171
00:10:49,089 --> 00:10:50,860
even the operating system level

172
00:10:50,860 --> 00:10:54,320
can be very lockdown and very limited in
what it can do

173
00:10:54,320 --> 00:10:58,070
which could be interesting poll if
you're hypervisors

174
00:10:58,070 --> 00:11:01,399
like my pic or something arm

175
00:11:01,399 --> 00:11:04,700
yep there are also three different
interrupt vectors for the

176
00:11:04,700 --> 00:11:08,480
exceptional to each if such love the
house its

177
00:11:08,480 --> 00:11:12,149
own intro Victor candidates own
interrupts and so on

178
00:11:12,149 --> 00:11:16,209
and for example an interrupted that
happens while the CPU is an exception

179
00:11:16,209 --> 00:11:17,510
level 0 could

180
00:11:17,510 --> 00:11:21,089
go into the exceptional to but then

181
00:11:21,089 --> 00:11:25,269
the such a lovely determines okay I can
I checked this

182
00:11:25,269 --> 00:11:29,070
I interrupt I can give it up to the
operating system again because it's

183
00:11:29,070 --> 00:11:30,519
nothing

184
00:11:30,519 --> 00:11:33,800
they need to care about

185
00:11:33,800 --> 00:11:36,930
I mentioned earlier the co-processor
which is switches

186
00:11:36,930 --> 00:11:40,899
I use to configure your and then you
you're catching and so on this

187
00:11:40,899 --> 00:11:44,220
on now gone it's basically not this
architecture

188
00:11:44,220 --> 00:11:48,200
we have a separate co-processor in your
heart it's now all done

189
00:11:48,200 --> 00:11:51,690
a yet dedicated a system management
instructions

190
00:11:51,690 --> 00:11:55,269
which yeah it's it's quite a nice change
and it still

191
00:11:55,269 --> 00:11:58,750
back what's comfortable so you can even
if we if we go to

192
00:11:58,750 --> 00:12:01,750
is a slight you can even have guessed
that still run

193
00:12:01,750 --> 00:12:05,779
in on 32-bit

194
00:12:05,779 --> 00:12:08,829
but the hypervisor on 64-bit and the
second guessed

195
00:12:08,829 --> 00:12:14,079
is arm 64 bit too so it's it's really
cool because you can just from the

196
00:12:14,079 --> 00:12:15,160
bottom up

197
00:12:15,160 --> 00:12:19,800
up change architecture however you like
so you could even go want one

198
00:12:19,800 --> 00:12:24,829
a 64-bit on Linux oren 32-bit ARM Linux
and the

199
00:12:24,829 --> 00:12:28,560
the old red just the bank thing that
happened before is now

200
00:12:28,560 --> 00:12:34,250
met onto the new registers

201
00:12:34,250 --> 00:12:39,769
alrighty I'm port-au-prince real up for
this republics levels we obviously need

202
00:12:39,769 --> 00:12:40,290
to have

203
00:12:40,290 --> 00:12:43,860
different memory translations because
each

204
00:12:43,860 --> 00:12:47,990
yet we r on operating system must not
run in the same

205
00:12:47,990 --> 00:12:51,420
at this pace is your second operating
system and say

206
00:12:51,420 --> 00:12:55,000
in the worst case you missed three
staged for translation of a memory

207
00:12:55,000 --> 00:12:56,139
addresses from

208
00:12:56,139 --> 00:12:59,200
virtual to physical arm

209
00:12:59,200 --> 00:13:04,120
which how does seems to be fast enough
and it's it's quite cool because you can

210
00:13:04,120 --> 00:13:07,310
shifty a your full translation tables
around and

211
00:13:07,310 --> 00:13:10,440
each operating system still without any

212
00:13:10,440 --> 00:13:14,200
any penalty kick and manage its own

213
00:13:14,200 --> 00:13:17,850
memory no no need to call you high
proviso for doing

214
00:13:17,850 --> 00:13:21,560
all that stuff welcome

215
00:13:21,560 --> 00:13:25,720
I yep the function prologue and epilogue

216
00:13:25,720 --> 00:13:29,070
on on the up on arm

217
00:13:29,070 --> 00:13:33,300
64th a bit different to to what happened
before

218
00:13:33,300 --> 00:13:36,470
because be follow-on I'm city to you
basically when you

219
00:13:36,470 --> 00:13:40,570
went into a function on the registers
you were going to touch you just

220
00:13:40,570 --> 00:13:44,220
thank them into onto the stack yellowed

221
00:13:44,220 --> 00:13:48,290
I we just on multiple register
instruction unfortunately

222
00:13:48,290 --> 00:13:52,550
or whyever her this instruction doesn't
exist anymore

223
00:13:52,550 --> 00:13:56,320
now you can only store load Parisa
registers

224
00:13:56,320 --> 00:13:59,740
say to and the compilers evenly Lake

225
00:13:59,740 --> 00:14:03,339
even right now compile is already
optimized lot in that direction so they

226
00:14:03,339 --> 00:14:05,560
try to avoid using a lot of registers

227
00:14:05,560 --> 00:14:09,279
even though they have a lot of of them
available because you you would have to

228
00:14:09,279 --> 00:14:10,310
have a lot apps

229
00:14:10,310 --> 00:14:14,389
stop hair instructions to store so two
registers

230
00:14:14,389 --> 00:14:17,980
arm but yeah the basic a

231
00:14:17,980 --> 00:14:21,230
the the basic product just stores

232
00:14:21,230 --> 00:14:24,630
your up the link register and your
friend point

233
00:14:24,630 --> 00:14:28,519
onto the stack contributors to stake
twisted -32

234
00:14:28,519 --> 00:14:31,990
a to reserve a space for your local

235
00:14:31,990 --> 00:14:35,170
function variables and Swan and the

236
00:14:35,170 --> 00:14:40,250
a and the Reese the year appeal ok does
the same suspect wats

237
00:14:40,250 --> 00:14:45,149
loads your lingering just again lets
your friend point again

238
00:14:45,149 --> 00:14:48,820
at 32 by to the Taser to do by to the
stock

239
00:14:48,820 --> 00:14:53,170
and returns the return instruction does
nothing like an x86 Red

240
00:14:53,170 --> 00:14:57,019
pops addresses and so on return really
just sets the

241
00:14:57,019 --> 00:15:00,430
program counter to the current content
of the linked

242
00:15:00,430 --> 00:15:05,410
register so it's just then unconditional
branch it doesn't do any magic lichen

243
00:15:05,410 --> 00:15:09,230
x86

244
00:15:09,230 --> 00:15:12,750
soon if we if we look at some example
occurred to power up

245
00:15:12,750 --> 00:15:16,500
very very simple arm sees of function

246
00:15:16,500 --> 00:15:20,560
which just takes an integer close
another function dats

247
00:15:20,560 --> 00:15:24,070
to the result of the function this would
me what

248
00:15:24,070 --> 00:15:27,459
the currency since the resulting is
Asian to

249
00:15:27,459 --> 00:15:32,259
said it stores the current up the
current limiting resistor and Frank

250
00:15:32,259 --> 00:15:35,139
pointer

251
00:15:35,139 --> 00:15:38,820
it moves these current stack pointer
into the into the

252
00:15:38,820 --> 00:15:42,810
a from point A its doors the

253
00:15:42,810 --> 00:15:46,750
argument that was supplied to the a to
the function

254
00:15:46,750 --> 00:15:51,160
into up Alan today

255
00:15:51,160 --> 00:15:55,529
up onto the stack Rd B-sixteen is
basically the of that

256
00:15:55,529 --> 00:15:58,899
to the Prime pointer and then it goes on
call

257
00:15:58,899 --> 00:16:03,730
who the reason we copied the argument
over is that we we can be sure that

258
00:16:03,730 --> 00:16:08,500
up foo won't touch register 0 because
we're just as he was overseas

259
00:16:08,500 --> 00:16:11,560
return values

260
00:16:11,560 --> 00:16:15,019
say to for returns we could be the
return value into

261
00:16:15,019 --> 00:16:19,040
register we load our argument again

262
00:16:19,040 --> 00:16:22,160
this Casey compile up to Mason optimizes
a bitch

263
00:16:22,160 --> 00:16:25,690
City we had them together and then

264
00:16:25,690 --> 00:16:28,759
just up store again

265
00:16:28,759 --> 00:16:32,160
I missed of rampant a link register and
return

266
00:16:32,160 --> 00:16:35,589
its its that easy it's really

267
00:16:35,589 --> 00:16:38,620
a breeze to read because the amount of
instructions you have to know

268
00:16:38,620 --> 00:16:43,199
it's really though and its very very
comfortable to

269
00:16:43,199 --> 00:16:48,089
frightened read I'm sixty-four code

270
00:16:48,089 --> 00:16:51,769
early I'm no es very small demo of

271
00:16:51,769 --> 00:16:55,180
up of how you can

272
00:16:55,180 --> 00:16:58,690
run I'm sixty-four stuff on your

273
00:16:58,690 --> 00:17:03,660
a computer a were

274
00:17:03,660 --> 00:17:07,480
great say I have the money to don't know
if it's

275
00:17:07,480 --> 00:17:12,299
but I'm basically weekend just you see
the cone chemo

276
00:17:12,299 --> 00:17:17,919
just had has full are 64 support at
least enough to put Linux on it

277
00:17:17,919 --> 00:17:21,230
and if you if you want to experiment was
a real

278
00:17:21,230 --> 00:17:25,799
I'm sixty-four use the land you can't
you can just get the Linaro

279
00:17:25,799 --> 00:17:29,230
harbors and run them in QM at some point
something this case

280
00:17:29,230 --> 00:17:32,820
a all the stuff will be on my kids have
half that is talking if the

281
00:17:32,820 --> 00:17:35,030
international to work today

282
00:17:35,030 --> 00:17:38,809
and in this case we can just boot up a
Linux kernel

283
00:17:38,809 --> 00:17:42,559
in up on 64 mode

284
00:17:42,559 --> 00:17:46,309
and the scrolling works that would be
great

285
00:17:46,309 --> 00:17:49,860
well

286
00:17:49,860 --> 00:17:53,789
world

287
00:17:53,789 --> 00:17:59,710
yep and now we can look in this is the
roots normally used by

288
00:17:59,710 --> 00:18:03,960
add to to compile stuff for the
architecture and its easy we now have a

289
00:18:03,960 --> 00:18:08,390
attest to the land runs in I'm 64 and

290
00:18:08,390 --> 00:18:13,990
yeah really be easy to use

291
00:18:13,990 --> 00:18:17,370
to looked at the reverse engineering
workflow I'm

292
00:18:17,370 --> 00:18:21,240
have also prepared a small demo of the
hopper disassembler

293
00:18:21,240 --> 00:18:24,370
I'm for example we

294
00:18:24,370 --> 00:18:29,220
the too because I think

295
00:18:29,220 --> 00:18:33,559
to a in this case this is part of the
code we have before just in this case a

296
00:18:33,559 --> 00:18:35,410
a whole excusable

297
00:18:35,410 --> 00:18:38,470
and I can now adjust are

298
00:18:38,470 --> 00:18:43,260
take me hopper disassembler and love my
binary in there

299
00:18:43,260 --> 00:18:49,440
and it will immediately were

300
00:18:49,440 --> 00:18:52,710
I'll all screens but small

301
00:18:52,710 --> 00:18:56,910
will immediately find all the symbols
that included in the code and I can just

302
00:18:56,910 --> 00:18:58,350
may be difficult

303
00:18:58,350 --> 00:19:01,750
and see that the code we we had earlier
is

304
00:19:01,750 --> 00:19:04,960
pretty much exactly what apart health
facilities

305
00:19:04,960 --> 00:19:09,030
now too so it's really really a breeze
to turn every day with the tools you

306
00:19:09,030 --> 00:19:09,770
already have

307
00:19:09,770 --> 00:19:13,620
up love them will will come I'm sure I
will

308
00:19:13,620 --> 00:19:18,590
also have some IDA Pro stretched which
you can find my get up which allow you

309
00:19:18,590 --> 00:19:19,260
to

310
00:19:19,260 --> 00:19:23,559
up to basically automatically search for
on coat

311
00:19:23,559 --> 00:19:27,429
I'm sixty-four code in a blob so for
example if you have a bootloader

312
00:19:27,429 --> 00:19:30,460
and here loaded into the IDA Pro

313
00:19:30,460 --> 00:19:33,470
you can run the script and it will look
for the function appeal oaks and

314
00:19:33,470 --> 00:19:34,360
function

315
00:19:34,360 --> 00:19:38,460
prologues automatically to see functions

316
00:19:38,460 --> 00:19:42,500
in in binary blobs where you have no
idea if they actually

317
00:19:42,500 --> 00:19:49,500
code or data and so on it a try society
to bed

318
00:19:50,169 --> 00:19:53,470
up array

319
00:19:53,470 --> 00:19:57,950
so um for exploits on on on 64

320
00:19:57,950 --> 00:20:02,000
unfortunately we can't do in deaf
because of our time limitation but I

321
00:20:02,000 --> 00:20:03,020
just 20

322
00:20:03,020 --> 00:20:07,330
you very short overview on how its the
different form from homes for 22 in

323
00:20:07,330 --> 00:20:08,169
regard to

324
00:20:08,169 --> 00:20:11,669
the the steak offsets and so on

325
00:20:11,669 --> 00:20:16,510
but of all a its on 64 has two standard

326
00:20:16,510 --> 00:20:20,809
mitigation techniques so your contest
you don't just have a execute will stack

327
00:20:20,809 --> 00:20:22,960
and heap on the operating systems

328
00:20:22,960 --> 00:20:26,030
a return to Lipsy is not possible
because at least the first

329
00:20:26,030 --> 00:20:29,200
8 arguments will be in registers and not
on stock

330
00:20:29,200 --> 00:20:32,200
arm and yeah unfortunately

331
00:20:32,200 --> 00:20:35,960
compared to arms 32 especially when
you're working with Spurs bootloaders we

332
00:20:35,960 --> 00:20:38,130
often a very small functions

333
00:20:38,130 --> 00:20:42,669
it's difficult to find good catches to
configure registers

334
00:20:42,669 --> 00:20:47,380
a as you want it since then important
goal if you want to

335
00:20:47,380 --> 00:20:51,120
be able to call random functions and not
just three-ton oriented programming

336
00:20:51,120 --> 00:20:52,059
captured

337
00:20:52,059 --> 00:20:56,309
Trevor a function which loads memory
into registers

338
00:20:56,309 --> 00:21:01,070
because the load multiple instruction is
now missing

339
00:21:01,070 --> 00:21:05,370
a most compilers don't generate nice
gadgets for something more

340
00:21:05,370 --> 00:21:09,539
so yes sorry separate I'm oriented
programming is the way to go

341
00:21:09,539 --> 00:21:14,169
as always at the moment and yup

342
00:21:14,169 --> 00:21:18,230
a if we compared the EPL ok of the

343
00:21:18,230 --> 00:21:21,409
often on 32-bit execute herbal and and
and

344
00:21:21,409 --> 00:21:24,429
I'm sings for exit pupil function

345
00:21:24,429 --> 00:21:28,090
we see that in I'm 32 the

346
00:21:28,090 --> 00:21:33,179
a the program counter the instruction
point in the memory where where the

347
00:21:33,179 --> 00:21:34,610
current code is executed

348
00:21:34,610 --> 00:21:39,860
up was directly loaded from the stack
i'd is not possible anymore because

349
00:21:39,860 --> 00:21:43,510
on the new 64 bit architecture the new
PC

350
00:21:43,510 --> 00:21:46,669
the polling plan is not writeable
anymore are

351
00:21:46,669 --> 00:21:50,059
and it can only be modified by
instructions like

352
00:21:50,059 --> 00:21:53,570
the like branch instructions and return
instructions

353
00:21:53,570 --> 00:21:57,669
this is mostly as I've been told by an
I'm engineer because up

354
00:21:57,669 --> 00:22:01,549
pipeline stuff basically the pipeline
needs to be flashed on a

355
00:22:01,549 --> 00:22:05,890
return instruction and so on and even
the return instructions

356
00:22:05,890 --> 00:22:10,070
signals to the CPU that this is not just
an unconditional promise you can do

357
00:22:10,070 --> 00:22:12,200
other optimizations because this is a

358
00:22:12,200 --> 00:22:17,140
return and so on. it's it's quite with
making but it's it's just important to

359
00:22:17,140 --> 00:22:18,020
know that

360
00:22:18,020 --> 00:22:21,909
basically reload the link address and
the previous frame pointer from the

361
00:22:21,909 --> 00:22:22,620
stack

362
00:22:22,620 --> 00:22:29,110
and the return will jump onto stacked

363
00:22:29,110 --> 00:22:33,309
three this is I'm very very

364
00:22:33,309 --> 00:22:36,370
us from the simplified version of

365
00:22:36,370 --> 00:22:40,090
code from was does the vid bootloader
which

366
00:22:40,090 --> 00:22:44,200
already run runs on on 64 in the
basically

367
00:22:44,200 --> 00:22:48,370
I gives you group yep to conclude

368
00:22:48,370 --> 00:22:52,650
on that una a basically gave you the
chance

369
00:22:52,650 --> 00:22:56,440
to up supply recovery script that's

370
00:22:56,440 --> 00:23:00,990
booted on the first food but you have to
have some authentication to actually run

371
00:23:00,990 --> 00:23:03,380
the do come on function and so on

372
00:23:03,380 --> 00:23:06,990
by I was able to founders sector will
flow

373
00:23:06,990 --> 00:23:10,280
and Boulogne itself which could be up

374
00:23:10,280 --> 00:23:14,120
used by a buyer

375
00:23:14,120 --> 00:23:19,370
accuse be protocol message we can just
have full control over the stack

376
00:23:19,370 --> 00:23:22,409
and after while upon this

377
00:23:22,409 --> 00:23:25,780
reverse-engineered stuff from the boot
loader which basically allows me to

378
00:23:25,780 --> 00:23:28,030
execute whatever I want

379
00:23:28,030 --> 00:23:31,640
on the system given that I can control
the recover

380
00:23:31,640 --> 00:23:37,549
Sanskrit which actually come

381
00:23:37,549 --> 00:23:42,250
so return oriented program growing
basically means that we

382
00:23:42,250 --> 00:23:47,010
we want to return from one function to
another and we control where we return

383
00:23:47,010 --> 00:23:48,620
true so in this case

384
00:23:48,620 --> 00:23:51,880
I have we get bay over break from the

385
00:23:51,880 --> 00:23:56,860
the on stapling bridges that we get our
code to jump to

386
00:23:56,860 --> 00:24:00,950
the return statement here to you attempt
to cover the Jazz Age

387
00:24:00,950 --> 00:24:04,150
which were returned the address of the
string

388
00:24:04,150 --> 00:24:07,580
into register 0

389
00:24:07,580 --> 00:24:10,850
and then we want to jump to the system
called because then we can immediately

390
00:24:10,850 --> 00:24:14,130
execute the shell script mister the buff

391
00:24:14,130 --> 00:24:17,520
I because nicely to get recovers

392
00:24:17,520 --> 00:24:21,929
re script function computer register 0

393
00:24:21,929 --> 00:24:25,549
very nicely for us was a past that we
can you can execute

394
00:24:25,549 --> 00:24:28,779
so yet we we want to jump to the address
at

395
00:24:28,779 --> 00:24:32,179
a set up the first instruction sue

396
00:24:32,179 --> 00:24:36,559
up then we want to return be at the
stock be there

397
00:24:36,559 --> 00:24:40,130
frame that's stored on the stock to the
system

398
00:24:40,130 --> 00:24:44,630
and we have a root shell in this case
was a very easy case and its

399
00:24:44,630 --> 00:24:49,340
on a quite interesting device but I
can't get into more detail said as we

400
00:24:49,340 --> 00:24:50,409
are in

401
00:24:50,409 --> 00:24:54,929
responsible disclosure am yet

402
00:24:54,929 --> 00:24:58,010
suit basically what what we do you like
on

403
00:24:58,010 --> 00:25:01,350
like me the on most divisive on most
modern

404
00:25:01,350 --> 00:25:05,190
exploits we have a stake in the flu

405
00:25:05,190 --> 00:25:08,190
about this we over Breitling register

406
00:25:08,190 --> 00:25:12,570
we up we jump we we pride our own

407
00:25:12,570 --> 00:25:16,260
frame pointer and after that we put in a
second

408
00:25:16,260 --> 00:25:19,549
languages time frame pointer onto just
taxing

409
00:25:19,549 --> 00:25:23,470
understate cover plays bass in PD done
what's growing stack

410
00:25:23,470 --> 00:25:27,250
and we just configured all link register
to

411
00:25:27,250 --> 00:25:32,390
up to point to the return statement of
to get recovery script and offering

412
00:25:32,390 --> 00:25:34,250
pointer

413
00:25:34,250 --> 00:25:38,010
which which will be loaded by the return
as the new link register

414
00:25:38,010 --> 00:25:41,630
and the new Franklin to address offering
pointed

415
00:25:41,630 --> 00:25:45,340
points3 stay cover flow control it

416
00:25:45,340 --> 00:25:49,360
make bridges to said the return instead
of returning to whatever

417
00:25:49,360 --> 00:25:53,480
whether we came from like to return to
the system statement

418
00:25:53,480 --> 00:25:57,140
and give us the possibility to execute
whatever you want

419
00:25:57,140 --> 00:26:01,080
a and thats basically it's just a basic
overview

420
00:26:01,080 --> 00:26:04,169
over the on 64 instructor and said

421
00:26:04,169 --> 00:26:11,169
I hope you have fun and thank you

422
00:26:14,830 --> 00:26:17,919
I other any questions

423
00:26:17,919 --> 00:26:20,919
only topic or just

424
00:26:20,919 --> 00:26:24,100
but me later forever

425
00:26:24,100 --> 00:26:29,519
thank you here

