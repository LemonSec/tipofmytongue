1
00:00:01,110 --> 00:00:04,040
hello there my name is Jon butterworth

2
00:00:04,040 --> 00:00:07,549
amor security researcher at The MITRE
Corporation I'm going to talk to you

3
00:00:07,549 --> 00:00:08,389
today about a

4
00:00:08,389 --> 00:00:12,330
some research to my colleagues and I
have been working on are specifically in

5
00:00:12,330 --> 00:00:12,889
the realm of

6
00:00:12,889 --> 00:00:17,550
firmware attacks and defense I'm gonna
show you today some

7
00:00:17,550 --> 00:00:20,630
firmware some Vanderbilt easily found

8
00:00:20,630 --> 00:00:26,240
which permit the bypass value wi-fi and
Windows 8 secure boot

9
00:00:26,240 --> 00:00:29,390
technologies whose

10
00:00:29,390 --> 00:00:34,140
so what we have here is I just organ
refer to for a little while as the

11
00:00:34,140 --> 00:00:35,410
amount where food chain

12
00:00:35,410 --> 00:00:39,770
up here if I can get my mouse there so
here we have the %uh BIOS firmware

13
00:00:39,770 --> 00:00:42,930
this is what foods as soon as you power
on your a PCR platform

14
00:00:42,930 --> 00:00:46,800
this is the bootloader which the biocide
hands of control to once it's done

15
00:00:46,800 --> 00:00:48,890
initializing all the firmware and
hardware

16
00:00:48,890 --> 00:00:53,300
the bootloader them searches for a valid
operating system in Boots it

17
00:00:53,300 --> 00:00:57,199
up to this point where your OS now in

18
00:00:57,199 --> 00:01:00,940
as a general rule when talking about the
platform

19
00:01:00,940 --> 00:01:04,900
boot process are rootkits that are able
to execute earlier

20
00:01:04,900 --> 00:01:09,140
during the boot process are have are in
a position where they can compromise

21
00:01:09,140 --> 00:01:13,210
code which executes at a later time in
the boot process

22
00:01:13,210 --> 00:01:16,290
on now way back when

23
00:01:16,290 --> 00:01:20,409
in the olden days are just really a few
years ago used to be that malware

24
00:01:20,409 --> 00:01:22,090
running with sufficient privileges

25
00:01:22,090 --> 00:01:26,350
on the operating system could almost
trivially overwrite

26
00:01:26,350 --> 00:01:29,960
the BIOS firmware and worthy bootloader

27
00:01:29,960 --> 00:01:34,100
for example the he used to be that the
BIOS firmware is protected by typically

28
00:01:34,100 --> 00:01:35,810
nothing more than just to check some

29
00:01:35,810 --> 00:01:40,700
on nowadays all systems pretty much are
using

30
00:01:40,700 --> 00:01:44,570
assigned for more updates which insures
that only

31
00:01:44,570 --> 00:01:47,710
a trusted assigned for more image

32
00:01:47,710 --> 00:01:51,729
is allowed to be written into the BIOS
flash however

33
00:01:51,729 --> 00:01:55,030
a that can only protect that which

34
00:01:55,030 --> 00:01:58,860
is located on the BIOS flash so

35
00:01:58,860 --> 00:02:03,500
in other words I have provides no
protection to areas a

36
00:02:03,500 --> 00:02:07,170
herbal components that are located
outside the house where such as a boot

37
00:02:07,170 --> 00:02:10,500
loader which is going to be located on
your hard drive or otherwise pics media

38
00:02:10,500 --> 00:02:14,000
arm so in other words you can prevent

39
00:02:14,000 --> 00:02:17,650
things like food kits are evil made
attacks in such however

40
00:02:17,650 --> 00:02:24,260
UEFI BIOS which is the successor to
what's known as a legacy by our server

41
00:02:24,260 --> 00:02:27,580
compatible or conventional PC BIOS I

42
00:02:27,580 --> 00:02:31,629
implements a security feature called
secure boot secure boo

43
00:02:31,629 --> 00:02:34,670
when it's enabled cryptographically
validates

44
00:02:34,670 --> 00:02:38,000
platform food components like your
bootloader

45
00:02:38,000 --> 00:02:41,050
I'm before permitting it to load

46
00:02:41,050 --> 00:02:44,590
and then execute however p.m.

47
00:02:44,590 --> 00:02:48,069
um secure boot only checks during the
boot process

48
00:02:48,069 --> 00:02:52,620
that's it has actually no way to protect
the actual bootloader itself from that

49
00:02:52,620 --> 00:02:55,110
initial malicious right to an attacker
can still

50
00:02:55,110 --> 00:02:58,470
overwrite the boot the bootloader and
insert a good kid

51
00:02:58,470 --> 00:03:03,050
however its relied on for platform
security that upon next reboot

52
00:03:03,050 --> 00:03:07,019
secure who will check in authenticate
that image that bootloader

53
00:03:07,019 --> 00:03:13,060
and deny it the ability to load and
execute in summary a secure boot

54
00:03:13,060 --> 00:03:16,800
basically secure approval verify any if
I execute a bowl

55
00:03:16,800 --> 00:03:20,659
on or just have two component if you
will that's found

56
00:03:20,659 --> 00:03:25,950
by the UEFI BIOS during the boot process
I know this all depends actually on the

57
00:03:25,950 --> 00:03:26,739
secure boot

58
00:03:26,739 --> 00:03:30,530
policy so what we see here

59
00:03:30,530 --> 00:03:33,989
is the verification handler this the

60
00:03:33,989 --> 00:03:37,739
determines secure boots actions that
will take

61
00:03:37,739 --> 00:03:41,860
on he filed its attempting to load and
execute based on

62
00:03:41,860 --> 00:03:45,390
the originating location above that file
for example

63
00:03:45,390 --> 00:03:49,209
if it's a originating on the boot on the
BIOS flash

64
00:03:49,209 --> 00:03:53,519
its permitted to our automatically
always execute now this actually isn't a

65
00:03:53,519 --> 00:03:54,390
bad thing

66
00:03:54,390 --> 00:03:58,349
because its relied upon that the most
sign for more updates

67
00:03:58,349 --> 00:04:01,849
have validated everything that's on the
BIOS splash so

68
00:04:01,849 --> 00:04:05,299
always excuse generally OK however for
the other

69
00:04:05,299 --> 00:04:08,900
on a boo locations mentioned here

70
00:04:08,900 --> 00:04:12,250
option ROM removable media and fix media
on

71
00:04:12,250 --> 00:04:16,100
secure boot will determine what to do
with those based on the policy that a

72
00:04:16,100 --> 00:04:19,479
retrieves from storage on the flash in
we'll talk about where that's where

73
00:04:19,479 --> 00:04:20,530
those are located

74
00:04:20,530 --> 00:04:24,880
and then the default policy is to deny
excuse security violation which means

75
00:04:24,880 --> 00:04:25,610
curable

76
00:04:25,610 --> 00:04:29,020
automatically check an authentically
everything else it doesn't fit one of

77
00:04:29,020 --> 00:04:32,680
these are key statements

78
00:04:32,680 --> 00:04:35,680
so what we see here this is the
disassembly

79
00:04:35,680 --> 00:04:39,990
love this secure boot policy
initialization this is a very dull

80
00:04:39,990 --> 00:04:44,770
e64 30 bio serve is in heat 12 just for
reference

81
00:04:44,770 --> 00:04:48,380
much actually like the system's I have
right here

82
00:04:48,380 --> 00:04:52,009
what we see here so little bit messy but

83
00:04:52,009 --> 00:04:55,270
we see the secure who policy is defined

84
00:04:55,270 --> 00:04:59,360
by tooth while it's defined by the setup
variable

85
00:04:59,360 --> 00:05:03,550
if the variable exists and if it's valid

86
00:05:03,550 --> 00:05:07,310
and which case the contents have that
setup variable or what defines a

87
00:05:07,310 --> 00:05:08,259
security policy

88
00:05:08,259 --> 00:05:14,910
otherwise then India results just the
policies just hard coded

89
00:05:14,910 --> 00:05:18,509
now the year five variables themselves
which is where the

90
00:05:18,509 --> 00:05:21,550
security policies toward one of these
variables

91
00:05:21,550 --> 00:05:24,850
other typically stored on the BIOS flash

92
00:05:24,850 --> 00:05:29,410
that bio spices the same by a splashy
contains a bias excusable code

93
00:05:29,410 --> 00:05:33,430
which execute on boo so here we have

94
00:05:33,430 --> 00:05:38,100
the UEFI setup variable and we can also
see its attributes

95
00:05:38,100 --> 00:05:41,740
I'm this is this set a variable from
that same a Dell laptop

96
00:05:41,740 --> 00:05:45,970
so here we have NV which means it's
located on non-volatile storage meaning

97
00:05:45,970 --> 00:05:47,860
it's located on the flash

98
00:05:47,860 --> 00:05:52,050
the BS here is a we don't really care
about that but that means that this

99
00:05:52,050 --> 00:05:54,560
variable can be modified from the food
services

100
00:05:54,560 --> 00:05:58,690
it's really just a requirement for the
RT here which is only really care about

101
00:05:58,690 --> 00:06:02,810
our team insists variable can be updated
or modified from

102
00:06:02,810 --> 00:06:06,410
from within the operating system

103
00:06:06,410 --> 00:06:11,229
so it's accessible by what's called the
runtime services and I you if I world

104
00:06:11,229 --> 00:06:16,250
so what's missing now is some attributes
that requires that any application that

105
00:06:16,250 --> 00:06:18,069
wants to modify this variable

106
00:06:18,069 --> 00:06:22,370
being authenticated application but as a
result to that I can show you

107
00:06:22,370 --> 00:06:25,539
few attacks against care so

108
00:06:25,539 --> 00:06:30,080
as a Windows 8 microsoft provides an API

109
00:06:30,080 --> 00:06:33,430
for interacting with the with these
variables

110
00:06:33,430 --> 00:06:38,169
a get firm firmware environment variable
set for more environment variable just

111
00:06:38,169 --> 00:06:38,810
two

112
00:06:38,810 --> 00:06:44,430
have those there are others as well

113
00:06:44,430 --> 00:06:49,740
so the first attack is pretty obvious
since there's no authentication required

114
00:06:49,740 --> 00:06:53,720
a we can simply a offers news when we're
looking at here

115
00:06:53,720 --> 00:06:57,490
this is the setup variable again just a
little further down this is the secure

116
00:06:57,490 --> 00:06:58,229
boo

117
00:06:58,229 --> 00:07:02,180
on an off by TSO on is one so secure
boot is enabled

118
00:07:02,180 --> 00:07:05,660
and if this were to be 0mb of on

119
00:07:05,660 --> 00:07:10,410
here is the secure boo policy bite them
refers to the

120
00:07:10,410 --> 00:07:15,090
firmware a flash a origin so in other
words a size zero means are always

121
00:07:15,090 --> 00:07:15,900
execute

122
00:07:15,900 --> 00:07:20,990
and his remaining force mean always deny
or deny execute on security violation so

123
00:07:20,990 --> 00:07:24,410
on these would be for the FX media the
CD-rom in

124
00:07:24,410 --> 00:07:27,789
USB I think the other one so

125
00:07:27,789 --> 00:07:32,229
as a result though because because this
variable is accessible from

126
00:07:32,229 --> 00:07:35,430
within the operating system week in a
modified

127
00:07:35,430 --> 00:07:38,449
the firmware environment variable just
using the API which is a little bit a

128
00:07:38,449 --> 00:07:39,130
privilege

129
00:07:39,130 --> 00:07:42,710
required I'm to do so so we can use it

130
00:07:42,710 --> 00:07:46,340
to set the security policy to always
execute

131
00:07:46,340 --> 00:07:49,539
regardless of the origin of the media
the file that's trying to load an

132
00:07:49,539 --> 00:07:51,970
Execute

133
00:07:51,970 --> 00:07:56,699
so as a result even though secure boot
in this case is still unable because we

134
00:07:56,699 --> 00:07:58,300
didn't actually disable it

135
00:07:58,300 --> 00:08:02,039
on it's effectively disable however
because its permitting everything so

136
00:08:02,039 --> 00:08:04,800
it's not really doing its job do you
think it's doing

137
00:08:04,800 --> 00:08:08,060
I'm so things like food kitserver
drivers are

138
00:08:08,060 --> 00:08:10,830
malicious option runs anything really
can just execute without any

139
00:08:10,830 --> 00:08:13,270
verification whatsoever

140
00:08:13,270 --> 00:08:16,949
so in summary this one's a little more
stealthy

141
00:08:16,949 --> 00:08:20,090
but this one is a exploitable from usual
and to

142
00:08:20,090 --> 00:08:23,919
disable the security policy or
effectively to say what I say

143
00:08:23,919 --> 00:08:27,780
for make the permissive religious is the
right way to say it on

144
00:08:27,780 --> 00:08:31,960
boot kits will function unimpeded and
secure boot however will still report

145
00:08:31,960 --> 00:08:34,240
itself is running in functional

146
00:08:34,240 --> 00:08:37,610
the us his way see this more stealthy
attack

147
00:08:37,610 --> 00:08:41,250
this next one is a little bit I clumsy
but this is just something that we try

148
00:08:41,250 --> 00:08:42,690
to see what happened

149
00:08:42,690 --> 00:08:46,190
I so we tried deleting the setup
variable oh when you delete this setup

150
00:08:46,190 --> 00:08:46,920
variable and

151
00:08:46,920 --> 00:08:50,750
UEFI world did reverse the system to
what's called a Gaia

152
00:08:50,750 --> 00:08:54,410
legacy I guess legacy boot mode so in
other words

153
00:08:54,410 --> 00:08:57,709
cuba is effectively disable because at
that

154
00:08:57,709 --> 00:09:02,110
and us good get some such can also
execute a secure boot is also disabled

155
00:09:02,110 --> 00:09:05,690
however when you go to sexy a pursuit
secure who's running

156
00:09:05,690 --> 00:09:09,730
it will see its not running so it's not
exactly stealthy implementation but it

157
00:09:09,730 --> 00:09:12,330
is exploitable from usual and just like
the other

158
00:09:12,330 --> 00:09:17,360
on and again boo kits works you without
any authentication

159
00:09:17,360 --> 00:09:21,110
so the third one is really just kind of
an offshoot

160
00:09:21,110 --> 00:09:24,670
at the second one because we found out
that when we do this I just pay secure

161
00:09:24,670 --> 00:09:29,580
being I disabled from the OS when we do
it the actual reboot

162
00:09:29,580 --> 00:09:32,970
the UEFI firmware before secure routers
even-par the picture

163
00:09:32,970 --> 00:09:36,250
detects that the setup variable is gone

164
00:09:36,250 --> 00:09:39,370
I'm and so what it does is it worth
restores

165
00:09:39,370 --> 00:09:43,360
the contents %uh that set a variable
from another variable called standard

166
00:09:43,360 --> 00:09:46,290
defaults

167
00:09:46,290 --> 00:09:49,880
no standard defaults and forcefully
suffers from the same Malays

168
00:09:49,880 --> 00:09:53,570
as does the set a variable it's located
on the non-volatile flash its only

169
00:09:53,570 --> 00:09:55,700
problem with services who cares

170
00:09:55,700 --> 00:09:58,750
but it is still available from the
runtime services without any of

171
00:09:58,750 --> 00:10:00,350
indication whatsoever so

172
00:10:00,350 --> 00:10:03,920
if you gonna modify the contents have
you set a variable but %um is also

173
00:10:03,920 --> 00:10:06,240
modify the content substandard faults

174
00:10:06,240 --> 00:10:09,310
unless you have a little more
persistence in your a

175
00:10:09,310 --> 00:10:12,540
making your security policy more
permissive or something else a secure

176
00:10:12,540 --> 00:10:13,060
policy

177
00:10:13,060 --> 00:10:16,290
permissive

178
00:10:16,290 --> 00:10:19,670
a so I'm how this is

179
00:10:19,670 --> 00:10:23,420
fixed is actually pretty simple a you if
I

180
00:10:23,420 --> 00:10:26,440
in there specifications they provide
other

181
00:10:26,440 --> 00:10:30,010
additional attributes which can be
applied to variables one of these being

182
00:10:30,010 --> 00:10:31,660
an authenticated right

183
00:10:31,660 --> 00:10:36,279
access meaning that the application that
wants to update or modify this variable

184
00:10:36,279 --> 00:10:40,170
must be authenticated and signed by
choice key located one the keystore

185
00:10:40,170 --> 00:10:43,209
variables which I'll talk about a little
bit I'm

186
00:10:43,209 --> 00:10:47,070
there's actually another authenticated a
access

187
00:10:47,070 --> 00:10:52,120
attributes at all to record it 7 the
timestamp Zazzle's called timing based

188
00:10:52,120 --> 00:10:56,339
authenticator write access but this is
adequate week usually see most of the

189
00:10:56,339 --> 00:10:58,180
time

190
00:10:58,180 --> 00:11:01,399
other summary this vulnerability

191
00:11:01,399 --> 00:11:04,680
I is the what we call reported this with

192
00:11:04,680 --> 00:11:07,730
Intel I'm this certain numbers here

193
00:11:07,730 --> 00:11:11,519
and basically it summarizes this
vulnerability allows bypasses secure boo

194
00:11:11,519 --> 00:11:16,420
on many systems as some keep in mind
because it's not strictly

195
00:11:16,420 --> 00:11:20,269
result is delaware this model in fact I
mean just we first identify this

196
00:11:20,269 --> 00:11:22,170
vulnerability on a Dell

197
00:11:22,170 --> 00:11:26,600
e64 30 but it's not limited to the deli
6430

198
00:11:26,600 --> 00:11:29,880
in fact is not limited to Dell as an OEM

199
00:11:29,880 --> 00:11:33,360
its across other additional volumes as
well

200
00:11:33,360 --> 00:11:36,980
on and if we looked into the idea by

201
00:11:36,980 --> 00:11:40,459
the UEFI reference specification also
called you know core

202
00:11:40,459 --> 00:11:43,470
I if you will and we looked into that

203
00:11:43,470 --> 00:11:47,110
and this vulnerability is not existent
in there as well

204
00:11:47,110 --> 00:11:51,160
a block these variables down properly to
so which means that someone took the

205
00:11:51,160 --> 00:11:52,700
reference specification

206
00:11:52,700 --> 00:11:56,329
and at some point unlock them and didn't
remember to

207
00:11:56,329 --> 00:12:00,920
lock them down again or should say
require authentication to modify them

208
00:12:00,920 --> 00:12:04,029
so the it leaves basically one

209
00:12:04,029 --> 00:12:08,870
hard who is responsible for this that
would be the independent bio spenders or

210
00:12:08,870 --> 00:12:10,089
IV these

211
00:12:10,089 --> 00:12:13,740
these are the guys like American
megatrends inside Phoenix

212
00:12:13,740 --> 00:12:16,769
they're the ones the downloaden take the

213
00:12:16,769 --> 00:12:20,310
reference specification and then a
modified the at a lot of proprietary

214
00:12:20,310 --> 00:12:21,010
stuff

215
00:12:21,010 --> 00:12:27,230
and they sell it to the OEM's like Dell
HP and all the rest

216
00:12:27,230 --> 00:12:30,279
on so specifically who did it well

217
00:12:30,279 --> 00:12:33,410
I'm it doesn't appear in the reference
specification a

218
00:12:33,410 --> 00:12:37,339
vulnerability affects multiple OEM so
it's not tell it's not where the OEM's

219
00:12:37,339 --> 00:12:40,610
they don't sell to each other their
competitors the vulnerability was

220
00:12:40,610 --> 00:12:42,070
introduced by an IV V

221
00:12:42,070 --> 00:12:47,250
based on our analysis it was a I'm

222
00:12:47,250 --> 00:12:50,490
so in we've seen

223
00:12:50,490 --> 00:12:54,350
how if I variables that her trivially
writeable

224
00:12:54,350 --> 00:12:57,790
without requiring authentication I can
be abused

225
00:12:57,790 --> 00:13:00,790
arm by an attacker now

226
00:13:00,790 --> 00:13:04,360
not all here by variables of course are
non authenticated

227
00:13:04,360 --> 00:13:07,589
I'm some of them require knowledge a
private key

228
00:13:07,589 --> 00:13:11,670
in order to be modified I'm

229
00:13:11,670 --> 00:13:16,120
ever authenticated variables such as
this a story very important

230
00:13:16,120 --> 00:13:19,100
information on the system regarding
secure boot in other aspects of the

231
00:13:19,100 --> 00:13:20,079
system to

232
00:13:20,079 --> 00:13:23,540
for example like there's the accused or
that

233
00:13:23,540 --> 00:13:26,700
basically contains a list above
whitelisted hashes

234
00:13:26,700 --> 00:13:29,959
a VAP occasions and drivers which are
permitted to execute there's also a

235
00:13:29,959 --> 00:13:31,120
blacklist

236
00:13:31,120 --> 00:13:34,529
in there and then there's a a a listserv
operas keys

237
00:13:34,529 --> 00:13:38,050
which the additionally witcha

238
00:13:38,050 --> 00:13:43,959
applications attempting to loan execute
are allowed to be signed by

239
00:13:43,959 --> 00:13:48,360
and gesture reiterate these a
authenticated variables

240
00:13:48,360 --> 00:13:52,920
on the SPI flash are located basically
just alongside the BIOS firmware execute

241
00:13:52,920 --> 00:13:53,660
a bull

242
00:13:53,660 --> 00:13:58,660
which actually raises a bit of a problem
for the vendor's

243
00:13:58,660 --> 00:14:02,610
my vendors in this case I really mean
the OEM's on

244
00:14:02,610 --> 00:14:06,630
the Dells in the HP's insights so
basically what it boils down to

245
00:14:06,630 --> 00:14:10,500
is at the SPI flash for the BIOS flash
just for simplicity

246
00:14:10,500 --> 00:14:14,170
is getting pretty crowded it's getting
harder and harder to manage

247
00:14:14,170 --> 00:14:17,760
all the rate ability requirements up
these

248
00:14:17,760 --> 00:14:21,889
these variables I mean you have the BIOS
execute a ble which during runtime

249
00:14:21,889 --> 00:14:25,410
should never change so that should be
read-only

250
00:14:25,410 --> 00:14:28,920
but then you have these variables which
per UEFI spec

251
00:14:28,920 --> 00:14:33,279
must be writeable during runtime they
must be sometimes the operating system

252
00:14:33,279 --> 00:14:36,339
some them are arbitrary not that
important but some of them are important

253
00:14:36,339 --> 00:14:39,339
but they all have to be writeable from

254
00:14:39,339 --> 00:14:43,380
from the operating system during runtime

255
00:14:43,380 --> 00:14:47,860
so the question is how can alway M's
securely implement

256
00:14:47,860 --> 00:14:51,430
these a all these different read/write
permissions

257
00:14:51,430 --> 00:14:56,029
a these co located a food all these
comps located components all these

258
00:14:56,029 --> 00:14:57,420
variables alongside the

259
00:14:57,420 --> 00:15:00,649
by 06 a cuticle so

260
00:15:00,649 --> 00:15:03,779
Intel does provide some perfect
protection

261
00:15:03,779 --> 00:15:08,649
mechanisms there which can help they
provide a a number of protections that

262
00:15:08,649 --> 00:15:10,899
can help lock down the SPI flash

263
00:15:10,899 --> 00:15:14,139
they can be summarized into two basic
group

264
00:15:14,139 --> 00:15:17,470
to basic and it is really a there's
global rate protection and then there's

265
00:15:17,470 --> 00:15:18,110
range

266
00:15:18,110 --> 00:15:22,519
rate protection and it's up to the OEM's
to implement these

267
00:15:22,519 --> 00:15:25,540
so we'll talk about the global rate
protection first this

268
00:15:25,540 --> 00:15:29,170
is all managed by the this sings

269
00:15:29,170 --> 00:15:32,019
legacy has been around for years and
talked about for years but it's called

270
00:15:32,019 --> 00:15:33,949
the BIOS control register

271
00:15:33,949 --> 00:15:37,730
what it does in a nutshell is a provide
system management mode the ability to

272
00:15:37,730 --> 00:15:38,769
control

273
00:15:38,769 --> 00:15:41,930
a the raid ability of the SPI flash

274
00:15:41,930 --> 00:15:45,320
so what happens here ZF two bits the
BIOS lock enable

275
00:15:45,320 --> 00:15:49,699
in the BIOS great neighborhood the only
way the BIOS flash can be written to

276
00:15:49,699 --> 00:15:52,810
is if there by was right nablas asserted
21

277
00:15:52,810 --> 00:15:56,699
so that's all fine and dandy there's
news the buyers Larkin able

278
00:15:56,699 --> 00:16:01,810
that when it's when it's asserted it can
be dessert until the next review

279
00:16:01,810 --> 00:16:05,800
but when it's asserted that means that
when the BIOS right nipple bitten

280
00:16:05,800 --> 00:16:08,899
is also asserted in those two bits are
both asserted together

281
00:16:08,899 --> 00:16:12,690
that triggers are generates system
management interrupt

282
00:16:12,690 --> 00:16:15,839
no system is interrupt is one that
transitions

283
00:16:15,839 --> 00:16:20,709
this CPU processor from protected motor
whatever long motor whatever was in

284
00:16:20,709 --> 00:16:21,440
before

285
00:16:21,440 --> 00:16:26,350
into system management mode I means all
other running processes are suspended

286
00:16:26,350 --> 00:16:31,589
the system enters system management mode
executes the SMI Candler in that secure

287
00:16:31,589 --> 00:16:35,630
memory space and a and then resumes back

288
00:16:35,630 --> 00:16:38,740
and then the the processes that were
suspended

289
00:16:38,740 --> 00:16:42,810
are resumed again after that now during
this time in system isn't known in this

290
00:16:42,810 --> 00:16:43,959
case however

291
00:16:43,959 --> 00:16:47,160
I wanna those checks it does is part of
its normal routine

292
00:16:47,160 --> 00:16:51,570
is to take a look at this bios rain able
bit if it sees its asserted

293
00:16:51,570 --> 00:16:54,899
and it knows it did not actually
initiate this rate

294
00:16:54,899 --> 00:16:58,079
to the BIOS splash in owes its night it
should not be allowed

295
00:16:58,079 --> 00:17:01,100
energy asserts this bit back to zero so

296
00:17:01,100 --> 00:17:04,589
when the processor resumes back to

297
00:17:04,589 --> 00:17:09,039
now protected mode on the offending
application I was trying to

298
00:17:09,039 --> 00:17:13,470
assert this page here season 0 and
brought back seat thinks it's actually a

299
00:17:13,470 --> 00:17:16,510
read-only bed

300
00:17:16,510 --> 00:17:21,510
but it is actually read right so his
this to a step through the process kinda

301
00:17:21,510 --> 00:17:26,850
so we have a the attacker process here
irony is rings 0 because it requires a

302
00:17:26,850 --> 00:17:30,590
what you to portray or the ability to
Matt memory as we have bio's control

303
00:17:30,590 --> 00:17:31,770
here with the BIOS lock

304
00:17:31,770 --> 00:17:35,070
enabled as set to one so that when

305
00:17:35,070 --> 00:17:39,000
the attacker whips there's a bit too
want to make the by a swatch writeable

306
00:17:39,000 --> 00:17:44,410
generates Isis management interrupt the
Cebu transitions Asus management mode

307
00:17:44,410 --> 00:17:48,120
BIOS rate enable is reset back to zero

308
00:17:48,120 --> 00:17:51,169
in the system resumes back to the a

309
00:17:51,169 --> 00:17:54,620
back to the attackers code for any
application for that matter that

310
00:17:54,620 --> 00:17:56,530
attempts to set BIOS rate naval

311
00:17:56,530 --> 00:17:59,870
with the BIOS lock enable set

312
00:17:59,870 --> 00:18:04,740
and thus the bias remains read-only now

313
00:18:04,740 --> 00:18:07,789
it's a important to know that the only
way in

314
00:18:07,789 --> 00:18:10,799
out up system management mode is through

315
00:18:10,799 --> 00:18:13,910
a system management interrupt I should
say

316
00:18:13,910 --> 00:18:17,770
the only way into sis management mode as
fierce as to my sis measuring drop

317
00:18:17,770 --> 00:18:21,120
the only way I would assist management
was be at the resume function but

318
00:18:21,120 --> 00:18:24,280
instruction but that's kinda be on the

319
00:18:24,280 --> 00:18:27,510
the point whose

320
00:18:27,510 --> 00:18:32,910
so now we'll talk about the second
protection mechanism provided by Intel

321
00:18:32,910 --> 00:18:36,980
was very briefly it's the that's called
the protected range registers

322
00:18:36,980 --> 00:18:40,539
these basically enable the Year by host

323
00:18:40,539 --> 00:18:44,090
the ability to program protected range

324
00:18:44,090 --> 00:18:48,049
have the Flash and make you right to
rate protect the Ranger the flash we can

325
00:18:48,049 --> 00:18:49,770
actually also said read protection to

326
00:18:49,770 --> 00:18:56,770
deny reads beret protection is the most
practical

327
00:18:57,460 --> 00:19:01,850
I'm and then to lock it all down because
as we noticed looking at these

328
00:19:01,850 --> 00:19:05,590
here these registers are always read
writeable by you have to be a lock them

329
00:19:05,590 --> 00:19:06,799
down to the wire some could just

330
00:19:06,799 --> 00:19:10,740
remove your protected ranges so there's
this other or register

331
00:19:10,740 --> 00:19:15,010
the sequencing registers it's a it's
after lock down to splash lockdown

332
00:19:15,010 --> 00:19:18,600
and that once at was so once you have
all your protected Rangers said

333
00:19:18,600 --> 00:19:22,179
the new setup lockdown was protected
ranges can no longer be modified until

334
00:19:22,179 --> 00:19:26,059
the next reboot

335
00:19:26,059 --> 00:19:31,030
so the challenge is just to restate the
challenge for the OEM's

336
00:19:31,030 --> 00:19:35,530
is at what it boils down to is that the
year 5 variable region

337
00:19:35,530 --> 00:19:40,500
must be writeable so therefore it can't
use those protected range registers

338
00:19:40,500 --> 00:19:45,059
it has to rely solely on system
management mode to protect

339
00:19:45,059 --> 00:19:49,630
that range those variables which is all
fine and dandy is on a system as remote

340
00:19:49,630 --> 00:19:50,460
can always

341
00:19:50,460 --> 00:19:54,400
run and reset the BIOS flash to make the
flash

342
00:19:54,400 --> 00:19:58,320
to keep the flash read-only

343
00:19:58,320 --> 00:20:03,370
however we found you can actually
suppress system management interrupts

344
00:20:03,370 --> 00:20:07,900
'em which effectively bypasses

345
00:20:07,900 --> 00:20:12,049
any in all protection mechanisms offered
to you by system management

346
00:20:12,049 --> 00:20:15,289
mode from within system engine mod

347
00:20:15,289 --> 00:20:20,030
the bio skin this bypasses those BIOS
control protections have the Flash

348
00:20:20,030 --> 00:20:25,150
that I just talked about on it does not
require anything other than just a

349
00:20:25,150 --> 00:20:26,320
little bit of privileges

350
00:20:26,320 --> 00:20:30,370
executing from the operating system I
you don't have to execute any code or

351
00:20:30,370 --> 00:20:32,409
anything like that from system engine
mod

352
00:20:32,409 --> 00:20:37,039
you do this right from your OS and
suppresses my so

353
00:20:37,039 --> 00:20:40,419
how to do this is via the SMI

354
00:20:40,419 --> 00:20:44,620
enables control register it's located in
the power management

355
00:20:44,620 --> 00:20:48,200
registers have the chipset on this is
just

356
00:20:48,200 --> 00:20:52,020
the global assume I enable this disables
all different types

357
00:20:52,020 --> 00:20:56,610
%uh system as manager apps however
that's part of a larger register that

358
00:20:56,610 --> 00:20:57,850
contains other

359
00:20:57,850 --> 00:21:01,840
bits that can be set to disable specific
kinds of interrupts if you want to go

360
00:21:01,840 --> 00:21:03,000
fine-tune

361
00:21:03,000 --> 00:21:06,659
which says mise you allow and disallow
I'm

362
00:21:06,659 --> 00:21:09,860
but the point is I'm showing you the
global one because it disables

363
00:21:09,860 --> 00:21:12,919
all system management interrupts

364
00:21:12,919 --> 00:21:16,400
so if this register is not locked by
asserting

365
00:21:16,400 --> 00:21:21,309
when I see you laters the SMI lock bit
when I say to present prevent this

366
00:21:21,309 --> 00:21:24,370
as some eyes are disabled

367
00:21:24,370 --> 00:21:28,039
with SMI suppressed we are allowed to
write to that

368
00:21:28,039 --> 00:21:32,030
variable region of the flash and
effectively bypass

369
00:21:32,030 --> 00:21:36,950
largest disable the protections provided
by the BIOS control and sis management

370
00:21:36,950 --> 00:21:38,010
mode

371
00:21:38,010 --> 00:21:42,559
on as a side note we've been serving a
lot over

372
00:21:42,559 --> 00:21:45,740
machines like throughout our company in
a couple other organizations

373
00:21:45,740 --> 00:21:52,740
and forty percent the system surveyed do
not have this bit set

374
00:21:53,150 --> 00:21:56,309
and there's another note here which says
you can also technically downgrade most

375
00:21:56,309 --> 00:21:57,409
bio says to

376
00:21:57,409 --> 00:22:00,860
depending on whether sign in our weather
baseline signatures

377
00:22:00,860 --> 00:22:04,789
and then you can also even if a a so in
other words if a BIOS has been patched

378
00:22:04,789 --> 00:22:05,750
in as resolve this

379
00:22:05,750 --> 00:22:09,530
if you downgrade the BIOS you might also
be able to re enable this vulnerability

380
00:22:09,530 --> 00:22:11,299
in the system

381
00:22:11,299 --> 00:22:16,010
so this is how it works when SM eyes
have been disabled

382
00:22:16,010 --> 00:22:20,280
so again the attackers trying to set
BIOS rate naval

383
00:22:20,280 --> 00:22:23,970
it's important to note that buyers like
enable is still set

384
00:22:23,970 --> 00:22:27,510
I'm the attacker flips bit 1

385
00:22:27,510 --> 00:22:31,500
it up the a BIOS flips BIOS rain able
thus

386
00:22:31,500 --> 00:22:35,590
SPI flash is now enabled what would
normally happen of course is a system

387
00:22:35,590 --> 00:22:37,440
which transitions system is winnowed

388
00:22:37,440 --> 00:22:40,659
in that bill would be D asserted and
then the attacker wouldn't be able to do

389
00:22:40,659 --> 00:22:43,350
anything with it however because I some
eyes are suppressed

390
00:22:43,350 --> 00:22:47,179
the system never transitions to system
management mode and that by was right

391
00:22:47,179 --> 00:22:49,130
nipple bit stays asserted

392
00:22:49,130 --> 00:22:53,820
and the attackers now free to modify any
portion of the bio said he

393
00:22:53,820 --> 00:22:57,880
can one thing obeyed I did mention
earlier about the protected range

394
00:22:57,880 --> 00:22:58,950
registers

395
00:22:58,950 --> 00:23:02,320
I'm with projected range registers in
place

396
00:23:02,320 --> 00:23:05,980
the those don't rely on system
management mode so technically protected

397
00:23:05,980 --> 00:23:07,419
range registers will also prevent

398
00:23:07,419 --> 00:23:10,429
rights to the flash but as we know from
what I was saying earlier

399
00:23:10,429 --> 00:23:13,450
that the variables at a minimum must be
writeable

400
00:23:13,450 --> 00:23:16,530
so you can use a protected Rangers is on
those in

401
00:23:16,530 --> 00:23:19,809
so much you can do to protect them in
this case

402
00:23:19,809 --> 00:23:25,640
I'm so these variables like the setup
variable which contained in to find the

403
00:23:25,640 --> 00:23:26,570
secure boot

404
00:23:26,570 --> 00:23:30,350
up that of an authentication

405
00:23:30,350 --> 00:23:35,669
settings I'm can now be modified in the
sole out revealed by passive secure boo

406
00:23:35,669 --> 00:23:38,580
kinda like what we're doing we're
modifying the setup variable earlier

407
00:23:38,580 --> 00:23:40,330
it's all pretty easy

408
00:23:40,330 --> 00:23:47,330
stuff via demo video to show you

409
00:23:53,250 --> 00:23:58,460
so

410
00:23:58,460 --> 00:24:03,130
okay so what we're doing his words going
to demonstrate this is a UEFI system

411
00:24:03,130 --> 00:24:04,810
this is the UEFI shell

412
00:24:04,810 --> 00:24:08,380
now I'm basically it's like a edges
command line interface from here you can

413
00:24:08,380 --> 00:24:08,630
know

414
00:24:08,600 --> 00:24:11,860
go into every spouse systems that this
system is overloaded

415
00:24:11,860 --> 00:24:15,240
and you can execute things like a really
care bootloader and such to boot into

416
00:24:15,240 --> 00:24:15,810
windows and

417
00:24:15,810 --> 00:24:19,130
whatever what we're going to do is we're
going to attempt to load

418
00:24:19,130 --> 00:24:23,070
ASEM bootloader which is the attackers
Google Alerts

419
00:24:23,070 --> 00:24:27,010
one that but a bouquet basically

420
00:24:27,010 --> 00:24:31,850
benign to keep it yes so now what we're
showing you here

421
00:24:31,850 --> 00:24:38,850
is that excuse me okay

422
00:24:39,310 --> 00:24:43,590
so earlier I had mentioned those a

423
00:24:43,590 --> 00:24:47,540
those authenticated variables these are
the ones that contain we see the

424
00:24:47,540 --> 00:24:48,830
waitlist two passes

425
00:24:48,830 --> 00:24:53,300
this is the waitlist year the DB is DV
databases the waitlist

426
00:24:53,300 --> 00:24:56,470
passes so in other words if you have a a
if you harass

427
00:24:56,470 --> 00:25:00,660
to gas up like a a unified drivers on
the road and put that ass in here

428
00:25:00,660 --> 00:25:03,800
that will be permitted to execute I'm

429
00:25:03,800 --> 00:25:07,670
we're just showing you these mbna is I
just sat there too

430
00:25:07,670 --> 00:25:10,950
just to show you a that when we had a
new one it will be a

431
00:25:10,950 --> 00:25:16,940
very visible as a currently the

432
00:25:16,940 --> 00:25:23,940
permitted Chivers

433
00:25:33,690 --> 00:25:40,690
I'm just gonna boot into the legitimate
operating system

434
00:25:42,090 --> 00:25:43,880
so rate you're using flash from

435
00:25:43,880 --> 00:25:50,170
to dump the BIOS flash to says a lot
about but

436
00:25:50,170 --> 00:25:57,170
I'm sees this opens important

437
00:25:59,909 --> 00:26:03,679
because so here to search just as a
warning to show

438
00:26:03,679 --> 00:26:07,099
that I'm attempting to write to the
flash on

439
00:26:07,099 --> 00:26:10,440
earlier can went by quick but this is
the BIOS

440
00:26:10,440 --> 00:26:14,979
control registers located off-site DC in
what's called a low pin count

441
00:26:14,979 --> 00:26:20,009
PCI device sir lacy device been there
for a long time but it's a

442
00:26:20,009 --> 00:26:23,989
offset DC is that by was control
register I just lost it on here

443
00:26:23,989 --> 00:26:28,419
I'm it's been disabled so in other words
a

444
00:26:28,419 --> 00:26:31,849
the value of their so what it's saying
in a nutshell is that buyers lock is

445
00:26:31,849 --> 00:26:32,489
enabled

446
00:26:32,489 --> 00:26:38,309
and Assis manager Graham has a reset by
was writen able back to zero so that we

447
00:26:38,309 --> 00:26:39,190
can try to it

448
00:26:39,190 --> 00:26:43,719
so what we doing is we're going to I
disable

449
00:26:43,719 --> 00:26:47,089
surmising this in the method I say which
civil script that does that

450
00:26:47,089 --> 00:26:50,369
I'm which is in a we just had

451
00:26:50,369 --> 00:26:54,389
do you sir SMI enable bit 0 in the power
core there

452
00:26:54,389 --> 00:27:01,389
I was at the video

453
00:27:03,070 --> 00:27:08,869
it's failed because buyers like a
neighbor said

454
00:27:08,869 --> 00:27:15,869
I call you put this together college
stars

455
00:27:17,299 --> 00:27:24,299
heard had to look it up to see what that
was

456
00:27:30,210 --> 00:27:31,520
so

457
00:27:31,520 --> 00:27:34,890
what we're doing now is we're actually
able to flash a bow so what we've done

458
00:27:34,890 --> 00:27:38,750
show you a moment for you just projected
here

459
00:27:38,750 --> 00:27:42,650
is a base with you Buy rating to the
flash we took their we took the hash

460
00:27:42,650 --> 00:27:46,030
above are a %uh are shame

461
00:27:46,030 --> 00:27:49,940
bootloader and added it to the DB
whitelist

462
00:27:49,940 --> 00:27:56,940
so we expect that it should now be able
to boot

463
00:28:22,240 --> 00:28:26,210
to go back into the approved we're only
going to leave because that's the only

464
00:28:26,210 --> 00:28:27,750
way to actually with the mall but

465
00:28:27,750 --> 00:28:32,760
I'm so now we see the the additional
these arc which is just how are you if I

466
00:28:32,760 --> 00:28:34,420
names objects and such but

467
00:28:34,420 --> 00:28:37,710
we see the new addition added to the

468
00:28:37,710 --> 00:28:44,710
waitlist so

469
00:28:45,740 --> 00:28:50,280
now we can do to the show we can again
try to

470
00:28:50,280 --> 00:28:54,220
load a to Lodi rush im x64

471
00:28:54,220 --> 00:28:57,930
which to see said my colleague wrote
this juvenile

472
00:28:57,930 --> 00:29:04,539
the years

473
00:29:04,539 --> 00:29:06,409
it's actually surprisingly easy to do

474
00:29:06,409 --> 00:29:09,690
it's also easy to prevent no one seems
to know about it

475
00:29:09,690 --> 00:29:15,580
so

476
00:29:15,580 --> 00:29:20,700
in a that is very possible to pull off
in a

477
00:29:20,700 --> 00:29:24,770
prevents us measure RAM for my being
able to protect your BIOS flash

478
00:29:24,770 --> 00:29:28,130
on if you're interested in learning how
to lock it down

479
00:29:28,130 --> 00:29:32,250
this is how this there's actually a
couple ways you can do it for starters I

480
00:29:32,250 --> 00:29:33,950
mentioned earlier there's esmi

481
00:29:33,950 --> 00:29:37,409
lock bit it's located in what's called
the gen

482
00:29:37,409 --> 00:29:41,250
power management configuration register
up

483
00:29:41,250 --> 00:29:45,190
also located in that core area where the
other ones were it so I'm

484
00:29:45,190 --> 00:29:50,049
basically containing hiya that register
contains a big called as my lock

485
00:29:50,049 --> 00:29:54,130
that when it said all the contents up
there SMI enable register

486
00:29:54,130 --> 00:29:58,450
are locked in place so what the strategy
should be then

487
00:29:58,450 --> 00:30:01,960
is that once Asus measuring is
configured by the BIOS

488
00:30:01,960 --> 00:30:05,320
in that once it's all set and ready to
go that they have to ensure that

489
00:30:05,320 --> 00:30:09,840
as some eyes are configured ready to go
and then assert this bed

490
00:30:09,840 --> 00:30:13,090
to prevent any further changes to it
like a

491
00:30:13,090 --> 00:30:16,529
someone wants to suppress system
management interrupts I'm

492
00:30:16,529 --> 00:30:21,870
and then the second way to prevent this

493
00:30:21,870 --> 00:30:26,980
is parade newer bit there was at it also
to the BIOS control register

494
00:30:26,980 --> 00:30:30,200
as the one there's so much earlier that
lets as some RAM

495
00:30:30,200 --> 00:30:33,760
decide who and what gets to rate to the
flash this bit

496
00:30:33,760 --> 00:30:37,549
is a relatively new I guess is fuse old
so

497
00:30:37,549 --> 00:30:41,500
I won't call new but it's a SMM BWT by
was right protect

498
00:30:41,500 --> 00:30:46,320
our bus ride to sable I'm PSD is

499
00:30:46,320 --> 00:30:49,980
for P is for disable on the I have

500
00:30:49,980 --> 00:30:54,240
what it says basically is set the SPI
flash cannot be written to

501
00:30:54,240 --> 00:30:57,820
and was all cores that the CPU are in
system engine mod

502
00:30:57,820 --> 00:31:02,070
so even if a so what what that means

503
00:31:02,070 --> 00:31:06,240
is a if this bit worser did this
requiring the processor

504
00:31:06,240 --> 00:31:10,049
in all its course be in suspension or
before the BIOS flash can be written to

505
00:31:10,049 --> 00:31:13,580
even if you did serve suppress system as
we enter ups

506
00:31:13,580 --> 00:31:17,669
and then assert by was right enabling
the bass control registers

507
00:31:17,669 --> 00:31:22,700
you could modify the SPI flash you can
modify it all because just mention

508
00:31:22,700 --> 00:31:25,799
the CPU will never enters this mission
mode so it's kinda

509
00:31:25,799 --> 00:31:29,240
nifty love chess move here this bitch
pretty much always be set

510
00:31:29,240 --> 00:31:32,350
but again most vendors do not as you'll
see from our

511
00:31:32,350 --> 00:31:37,000
research results coming up on

512
00:31:37,000 --> 00:31:40,889
so the currency the protection is less
than great

513
00:31:40,889 --> 00:31:45,350
over 10,000 system so far we've
evaluated in only would release 6

514
00:31:45,350 --> 00:31:49,549
them have actually had the SMM BIOS rate
protective its set

515
00:31:49,549 --> 00:31:54,360
pass rate Disable Bit set a about 40
percent of the system's measured as I

516
00:31:54,360 --> 00:31:55,100
said earlier

517
00:31:55,100 --> 00:31:59,960
a did not have the SMI lockset maybe a
table might have

518
00:31:59,960 --> 00:32:04,260
SMI lockset I'm so

519
00:32:04,260 --> 00:32:08,210
more vendors and this is really
responsibility though Williams but the

520
00:32:08,210 --> 00:32:10,059
OEM's really need to be

521
00:32:10,059 --> 00:32:14,320
aware of this and to to set their biases
to configure this

522
00:32:14,320 --> 00:32:18,730
these bids to prevent trivial attacks
like this this is really easy stuff

523
00:32:18,730 --> 00:32:22,610
we actually have for more talks in the
works coming about

524
00:32:22,610 --> 00:32:26,490
also other ways to bypass secure boo
protections and such but

525
00:32:26,490 --> 00:32:29,720
that's for another day but these are
like them

526
00:32:29,720 --> 00:32:33,850
easiest to do so basically

527
00:32:33,850 --> 00:32:38,210
in summary the secure boo

528
00:32:38,210 --> 00:32:41,850
and is it is a good thing for the most
part it allows

529
00:32:41,850 --> 00:32:46,190
it does provide your system protection
from a malicious or unwanted

530
00:32:46,190 --> 00:32:50,399
executed wills from executing during the
boot process like a pool or something

531
00:32:50,399 --> 00:32:51,669
like that

532
00:32:51,669 --> 00:32:56,059
said kid I'm however it's defined

533
00:32:56,059 --> 00:33:00,610
by variables located on the plastic can
be trivially overwritten if not secured

534
00:33:00,610 --> 00:33:04,409
those variables must require
authentication to be modified

535
00:33:04,409 --> 00:33:07,659
and then of course the underlying
architecture underneath that

536
00:33:07,659 --> 00:33:11,630
in the chipset must also be configured
so that the systems

537
00:33:11,630 --> 00:33:15,649
most important resources like system is
remote can actually do their job and

538
00:33:15,649 --> 00:33:16,990
protect your system

539
00:33:16,990 --> 00:33:20,580
from malicious rights to the flash I'm

540
00:33:20,580 --> 00:33:25,929
his sister was have some related work

541
00:33:25,929 --> 00:33:29,809
we've been working on as well till on
soccer bypass Windows 8 secure boot

542
00:33:29,809 --> 00:33:34,559
arm and defeating signed by us and force
me to use

543
00:33:34,559 --> 00:33:37,940
some intelligence to

544
00:33:37,940 --> 00:33:42,320
rick martinez is actually will tell I'm
we did disclose all this

545
00:33:42,320 --> 00:33:46,419
to them prior to her ever releasing in
such a course

546
00:33:46,419 --> 00:33:49,850
I'm actually convinced

547
00:33:49,850 --> 00:33:53,149
very quickly a speaking very quickly but

548
00:33:53,149 --> 00:34:00,149
and it does anyone have any questions

549
00:34:10,450 --> 00:34:10,770
anchors

