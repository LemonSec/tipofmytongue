1
00:00:09,940 --> 00:00:16,619
hey guys<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> really excited to be here</font>

2
00:00:12,820 --> 00:00:19,960
and<font color="#CCCCCC"> by excited I mean</font><font color="#E5E5E5"> extremely stressed</font>

3
00:00:16,619 --> 00:00:22,300
so<font color="#CCCCCC"> my name is</font><font color="#E5E5E5"> Philip</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> work for cyber</font>

4
00:00:19,960 --> 00:00:26,949
reason we do endpoint protection and

5
00:00:22,300 --> 00:00:29,550
fashionable<font color="#CCCCCC"> allo t-shirts and my twitter</font>

6
00:00:26,949 --> 00:00:31,599
handle<font color="#CCCCCC"> is pretty much my full name</font><font color="#E5E5E5"> so</font>

7
00:00:29,550 --> 00:00:34,780
<font color="#CCCCCC">we're going</font><font color="#E5E5E5"> to talk about lateral</font>

8
00:00:31,599 --> 00:00:37,629
movement<font color="#E5E5E5"> in</font><font color="#CCCCCC"> WMI we're pretty</font><font color="#E5E5E5"> much gonna</font>

9
00:00:34,780 --> 00:00:39,460
have a quick intro to<font color="#E5E5E5"> the scope of</font>

10
00:00:37,629 --> 00:00:42,519
lateral movement<font color="#CCCCCC"> at least in this talk</font>

11
00:00:39,460 --> 00:00:46,300
and what<font color="#CCCCCC"> WMI is with a tiny peek under</font>

12
00:00:42,520 --> 00:00:49,030
the<font color="#CCCCCC"> hood we're gonna show some new and</font>

13
00:00:46,300 --> 00:00:51,819
new ish improved methods of lateral

14
00:00:49,030 --> 00:00:54,039
movement using<font color="#CCCCCC"> WMI</font><font color="#E5E5E5"> and we'll have a word</font>

15
00:00:51,820 --> 00:00:59,980
<font color="#E5E5E5">about how to detect all of these attacks</font>

16
00:00:54,039 --> 00:01:03,660
and some others so in<font color="#E5E5E5"> recent years there</font>

17
00:00:59,980 --> 00:01:06,429
were lots of attempts<font color="#CCCCCC"> to take</font><font color="#E5E5E5"> network</font>

18
00:01:03,660 --> 00:01:09,190
network penetration and put it into some

19
00:01:06,430 --> 00:01:12,460
<font color="#CCCCCC">kind of geometrical shape may it be the</font>

20
00:01:09,190 --> 00:01:14,800
cyber<font color="#CCCCCC"> kale chane the threat lifecycle</font>

21
00:01:12,460 --> 00:01:18,818
the<font color="#E5E5E5"> attack matrix or my own hexagon</font><font color="#CCCCCC"> of</font>

22
00:01:14,800 --> 00:01:21,759
discomfort all of them have phase which

23
00:01:18,819 --> 00:01:24,039
is<font color="#E5E5E5"> called lateral movement now the scope</font>

24
00:01:21,759 --> 00:01:28,030
<font color="#E5E5E5">of his phase changes between all of</font>

25
00:01:24,039 --> 00:01:32,679
those<font color="#E5E5E5"> frameworks but in its core</font><font color="#CCCCCC"> it's</font>

26
00:01:28,030 --> 00:01:34,530
pretty<font color="#E5E5E5"> much this you as an attacker have</font>

27
00:01:32,679 --> 00:01:37,959
gained some kind of initial foothold

28
00:01:34,530 --> 00:01:39,789
<font color="#CCCCCC">whether by exploiting</font><font color="#E5E5E5"> some kind of</font>

29
00:01:37,959 --> 00:01:42,039
vulnerability<font color="#CCCCCC"> in an application or</font>

30
00:01:39,789 --> 00:01:45,550
exploiting some kind of vulnerable user

31
00:01:42,039 --> 00:01:47,560
via phishing and using this and if your

32
00:01:45,550 --> 00:01:50,440
foot hold you've gained some kind<font color="#E5E5E5"> of</font>

33
00:01:47,560 --> 00:01:52,750
credentials<font color="#CCCCCC"> now you want to use</font><font color="#E5E5E5"> these</font>

34
00:01:50,440 --> 00:01:55,030
credentials to move to a machine<font color="#CCCCCC"> which</font>

35
00:01:52,750 --> 00:01:57,489
is a bit more<font color="#CCCCCC"> interesting to you</font><font color="#E5E5E5"> which</font>

36
00:01:55,030 --> 00:01:59,289
contains<font color="#E5E5E5"> maybe other higher</font><font color="#CCCCCC"> privileged</font>

37
00:01:57,489 --> 00:02:01,390
credentials or it contains the actual

38
00:01:59,289 --> 00:02:03,310
<font color="#E5E5E5">information you want to steal or show</font>

39
00:02:01,390 --> 00:02:06,640
you<font color="#E5E5E5"> can steal if you're just a red</font>

40
00:02:03,310 --> 00:02:08,560
<font color="#CCCCCC">teamer not an</font><font color="#E5E5E5"> evil evil attacker now of</font>

41
00:02:06,640 --> 00:02:10,660
<font color="#CCCCCC">course the scope of lateral movement has</font>

42
00:02:08,560 --> 00:02:12,610
<font color="#E5E5E5">been expanded</font><font color="#CCCCCC"> by stuff like external</font>

43
00:02:10,660 --> 00:02:14,680
<font color="#CCCCCC">blue but we won't be talking</font><font color="#E5E5E5"> about</font>

44
00:02:12,610 --> 00:02:18,000
exploits here<font color="#E5E5E5"> we're going we're</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to</font>

45
00:02:14,680 --> 00:02:21,450
talk about using<font color="#E5E5E5"> stolen credentials to</font>

46
00:02:18,000 --> 00:02:21,450
achieve remote execution

47
00:02:22,240 --> 00:02:27,550
now most of these<font color="#CCCCCC"> Larry Lewman</font>

48
00:02:25,240 --> 00:02:30,370
techniques are not bugs<font color="#CCCCCC"> they're features</font>

49
00:02:27,550 --> 00:02:32,830
<font color="#CCCCCC">this means you're not</font><font color="#E5E5E5"> making an</font>

50
00:02:30,370 --> 00:02:35,110
application<font color="#CCCCCC"> act in a way it was not</font>

51
00:02:32,830 --> 00:02:36,730
designed to<font color="#E5E5E5"> you're using some kind of</font>

52
00:02:35,110 --> 00:02:39,580
feature some kind of<font color="#CCCCCC"> Windows</font><font color="#E5E5E5"> feature</font>

53
00:02:36,730 --> 00:02:41,739
because this is a Windows<font color="#E5E5E5"> doc</font><font color="#CCCCCC"> that is</font>

54
00:02:39,580 --> 00:02:44,770
actually<font color="#E5E5E5"> designed to</font><font color="#CCCCCC"> allow remote</font>

55
00:02:41,740 --> 00:02:46,960
<font color="#CCCCCC">execution to execute remotely this means</font>

56
00:02:44,770 --> 00:02:50,320
nobody's gonna close these as bugs

57
00:02:46,960 --> 00:02:51,970
<font color="#CCCCCC">because system admins and other people</font>

58
00:02:50,320 --> 00:02:53,709
are using these<font color="#CCCCCC"> features</font><font color="#E5E5E5"> because</font>

59
00:02:51,970 --> 00:02:59,740
sometimes you<font color="#E5E5E5"> actually need</font><font color="#CCCCCC"> to execute</font>

60
00:02:53,710 --> 00:03:01,720
remote code so the most<font color="#E5E5E5"> common</font><font color="#CCCCCC"> methods</font>

61
00:02:59,740 --> 00:03:04,000
of lateral movement<font color="#CCCCCC"> are remote service</font>

62
00:03:01,720 --> 00:03:06,820
creation<font color="#E5E5E5"> using stuff like PSX AG or</font><font color="#CCCCCC"> its</font>

63
00:03:04,000 --> 00:03:09,700
impacted implementations<font color="#CCCCCC"> remote</font><font color="#E5E5E5"> task</font>

64
00:03:06,820 --> 00:03:13,000
scheduling<font color="#E5E5E5"> using</font><font color="#CCCCCC"> 80</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> SCH tasks and</font>

65
00:03:09,700 --> 00:03:15,040
what's called today<font color="#CCCCCC"> WMI</font><font color="#E5E5E5"> lateral movement</font>

66
00:03:13,000 --> 00:03:17,560
classic method of<font color="#CCCCCC"> WI lateral movement</font>

67
00:03:15,040 --> 00:03:21,100
which actually uses<font color="#E5E5E5"> a class called win32</font>

68
00:03:17,560 --> 00:03:23,890
process and a method called create now

69
00:03:21,100 --> 00:03:25,840
why do we<font color="#E5E5E5"> need additional</font><font color="#CCCCCC"> vectors of</font>

70
00:03:23,890 --> 00:03:27,850
execution<font color="#E5E5E5"> we have those three they work</font>

71
00:03:25,840 --> 00:03:31,870
if you have the<font color="#E5E5E5"> credentials they're</font>

72
00:03:27,850 --> 00:03:35,350
mostly<font color="#E5E5E5"> enabled on</font><font color="#CCCCCC"> I think most networks</font>

73
00:03:31,870 --> 00:03:37,510
so it's<font color="#E5E5E5"> not a challenge</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> get your code</font>

74
00:03:35,350 --> 00:03:39,329
<font color="#CCCCCC">to</font><font color="#E5E5E5"> run on another system the actual</font>

75
00:03:37,510 --> 00:03:42,489
<font color="#CCCCCC">challenge</font><font color="#E5E5E5"> here is not to get caught</font>

76
00:03:39,330 --> 00:03:45,370
<font color="#E5E5E5">unlike local execution vectors exploits</font>

77
00:03:42,490 --> 00:03:47,500
<font color="#E5E5E5">persistent</font><font color="#CCCCCC"> match methods etc</font><font color="#E5E5E5"> attackers</font>

78
00:03:45,370 --> 00:03:50,590
still used pretty<font color="#E5E5E5"> much those three</font>

79
00:03:47,500 --> 00:03:52,720
<font color="#E5E5E5">methods</font><font color="#CCCCCC"> to do almost all lateral</font>

80
00:03:50,590 --> 00:03:55,330
<font color="#E5E5E5">movement</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> all almost all lateral</font>

81
00:03:52,720 --> 00:03:57,970
movement tasks and this means<font color="#E5E5E5"> that if</font>

82
00:03:55,330 --> 00:04:00,460
you<font color="#CCCCCC"> can somehow</font><font color="#E5E5E5"> monitor these things and</font>

83
00:03:57,970 --> 00:04:02,830
look<font color="#E5E5E5"> just for them you're gonna you're</font>

84
00:04:00,460 --> 00:04:06,250
gonna<font color="#E5E5E5"> catch lots of even pretty advanced</font>

85
00:04:02,830 --> 00:04:07,960
attackers so if you can somehow expand

86
00:04:06,250 --> 00:04:11,290
your arsenal of lateral movement

87
00:04:07,960 --> 00:04:13,210
<font color="#CCCCCC">techniques you could shape how</font><font color="#E5E5E5"> you look</font>

88
00:04:11,290 --> 00:04:15,489
<font color="#E5E5E5">to the defenders how you look to</font><font color="#CCCCCC"> the</font>

89
00:04:13,210 --> 00:04:17,650
network<font color="#E5E5E5"> so you can get caught in</font><font color="#CCCCCC"> the</font>

90
00:04:15,490 --> 00:04:20,140
noise or<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> exhibit some</font><font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of</font>

91
00:04:17,649 --> 00:04:24,580
behavior nobody is looking<font color="#E5E5E5"> for and not</font>

92
00:04:20,140 --> 00:04:27,640
get caught now let's talk a<font color="#CCCCCC"> bit about</font>

93
00:04:24,580 --> 00:04:30,070
<font color="#CCCCCC">WMI because all of these techniques I'm</font>

94
00:04:27,640 --> 00:04:30,550
gonna show are based on the WMI feature

95
00:04:30,070 --> 00:04:35,349
in Windows

96
00:04:30,550 --> 00:04:38,620
<font color="#E5E5E5">so W my was designed to allow</font>

97
00:04:35,350 --> 00:04:40,840
<font color="#CCCCCC">Tork admins and programmers to interact</font>

98
00:04:38,620 --> 00:04:44,380
with<font color="#E5E5E5"> lots of unrelated elements on a</font>

99
00:04:40,840 --> 00:04:47,500
machine<font color="#CCCCCC"> like processes and the registry</font>

100
00:04:44,380 --> 00:04:50,230
and monitors like both software and

101
00:04:47,500 --> 00:04:52,680
<font color="#CCCCCC">hardware</font><font color="#E5E5E5"> through one single API</font><font color="#CCCCCC"> if you</font>

102
00:04:50,230 --> 00:04:55,210
<font color="#E5E5E5">wanna</font><font color="#CCCCCC"> if you wanna</font>

103
00:04:52,680 --> 00:04:59,350
<font color="#E5E5E5">obtain some</font><font color="#CCCCCC"> information about</font><font color="#E5E5E5"> anything</font>

104
00:04:55,210 --> 00:05:01,510
that's that's represented but<font color="#CCCCCC"> WMI you</font>

105
00:04:59,350 --> 00:05:04,780
basically<font color="#CCCCCC"> pass through one single</font><font color="#E5E5E5"> API</font>

106
00:05:01,510 --> 00:05:07,300
and<font color="#CCCCCC"> you say well can I please have</font><font color="#E5E5E5"> the</font>

107
00:05:04,780 --> 00:05:09,450
enumeration<font color="#E5E5E5"> of whatever is represented</font>

108
00:05:07,300 --> 00:05:12,880
by a specific<font color="#E5E5E5"> class</font><font color="#CCCCCC"> WI is an</font>

109
00:05:09,450 --> 00:05:15,039
object-oriented model<font color="#E5E5E5"> and you</font><font color="#CCCCCC"> can do</font>

110
00:05:12,880 --> 00:05:16,900
this remotely<font color="#E5E5E5"> through two protocols</font><font color="#CCCCCC"> one</font>

111
00:05:15,040 --> 00:05:19,090
is decom and the other is when I ran

112
00:05:16,900 --> 00:05:21,310
<font color="#CCCCCC">weather the first</font><font color="#E5E5E5"> is implemented on top</font>

113
00:05:19,090 --> 00:05:27,580
<font color="#CCCCCC">of DC RPC and the second is implemented</font>

114
00:05:21,310 --> 00:05:31,180
<font color="#E5E5E5">on</font><font color="#CCCCCC"> top of HTTP so the way W might looks</font>

115
00:05:27,580 --> 00:05:33,310
or regular<font color="#CCCCCC"> WI usage looks is that as I</font>

116
00:05:31,180 --> 00:05:35,290
<font color="#E5E5E5">said you have classes which represent</font>

117
00:05:33,310 --> 00:05:37,900
actual things on a<font color="#CCCCCC"> machine like the</font>

118
00:05:35,290 --> 00:05:42,160
win32 process class<font color="#CCCCCC"> and you could use an</font>

119
00:05:37,900 --> 00:05:45,880
SQL like same tax called<font color="#E5E5E5"> wql or any kind</font>

120
00:05:42,160 --> 00:05:47,260
of abstraction<font color="#E5E5E5"> to it and just</font><font color="#CCCCCC"> ask local</font>

121
00:05:45,880 --> 00:05:49,270
or remote machine hey can you give me

122
00:05:47,260 --> 00:05:50,980
all the<font color="#E5E5E5"> instances of win32 process or</font>

123
00:05:49,270 --> 00:05:55,630
you could ask

124
00:05:50,980 --> 00:05:57,550
<font color="#CCCCCC">WMI to execute a method</font><font color="#E5E5E5"> that is</font>

125
00:05:55,630 --> 00:06:01,570
available<font color="#E5E5E5"> is</font><font color="#CCCCCC"> available on</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> these</font>

126
00:05:57,550 --> 00:06:04,390
classes and this is done the same<font color="#E5E5E5"> way no</font>

127
00:06:01,570 --> 00:06:09,550
<font color="#CCCCCC">matter what</font><font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of thing the WMI class</font>

128
00:06:04,390 --> 00:06:12,280
represents now<font color="#E5E5E5"> as you can see</font>

129
00:06:09,550 --> 00:06:14,350
<font color="#E5E5E5">WMI does represent lots of unrelated</font>

130
00:06:12,280 --> 00:06:15,760
stuff<font color="#E5E5E5"> it can represent processes but it</font>

131
00:06:14,350 --> 00:06:17,620
also could represent what's called

132
00:06:15,760 --> 00:06:19,000
protocol bindings which<font color="#E5E5E5"> which are</font>

133
00:06:17,620 --> 00:06:21,520
basically network adapters it could

134
00:06:19,000 --> 00:06:23,530
represent the registry itself<font color="#CCCCCC"> scheduled</font>

135
00:06:21,520 --> 00:06:26,349
jobs etc<font color="#E5E5E5"> and you would need to</font><font color="#CCCCCC"> use lots</font>

136
00:06:23,530 --> 00:06:29,950
of different<font color="#CCCCCC"> api's and write lots of</font>

137
00:06:26,350 --> 00:06:32,620
code to<font color="#CCCCCC"> access all of this information</font>

138
00:06:29,950 --> 00:06:36,039
<font color="#E5E5E5">at the same time instead</font><font color="#CCCCCC"> of just using</font>

139
00:06:32,620 --> 00:06:41,080
very<font color="#E5E5E5"> very similar code to have all this</font>

140
00:06:36,040 --> 00:06:43,030
information just<font color="#CCCCCC"> given to</font><font color="#E5E5E5"> you now to</font>

141
00:06:41,080 --> 00:06:45,460
understand some<font color="#CCCCCC"> of</font><font color="#E5E5E5"> my techniques</font><font color="#CCCCCC"> you</font>

142
00:06:43,030 --> 00:06:47,020
would need to<font color="#CCCCCC"> know a</font><font color="#E5E5E5"> bit how</font><font color="#CCCCCC"> WMI works</font>

143
00:06:45,460 --> 00:06:50,159
under<font color="#CCCCCC"> the hood and the</font>

144
00:06:47,020 --> 00:06:54,609
architecture<font color="#E5E5E5"> of</font><font color="#CCCCCC"> WMI</font><font color="#E5E5E5"> it's comprised of</font>

145
00:06:50,160 --> 00:06:57,400
three<font color="#CCCCCC"> main</font><font color="#E5E5E5"> components the</font><font color="#CCCCCC"> first is the</font>

146
00:06:54,610 --> 00:06:59,500
<font color="#E5E5E5">wind management server service the</font>

147
00:06:57,400 --> 00:07:02,620
provider<font color="#E5E5E5"> the second is the providers and</font>

148
00:06:59,500 --> 00:07:04,599
<font color="#CCCCCC">the third is</font><font color="#E5E5E5"> the repository the wind</font>

149
00:07:02,620 --> 00:07:07,870
management service or the<font color="#CCCCCC"> WMI service is</font>

150
00:07:04,599 --> 00:07:11,650
actually<font color="#E5E5E5"> the face of</font><font color="#CCCCCC"> WMI</font><font color="#E5E5E5"> each time you</font>

151
00:07:07,870 --> 00:07:13,569
as a client<font color="#CCCCCC"> try to do any kind of WMI</font>

152
00:07:11,650 --> 00:07:17,409
action<font color="#E5E5E5"> whether it be enumerated</font>

153
00:07:13,569 --> 00:07:20,349
something using a<font color="#E5E5E5"> query or or invoking a</font>

154
00:07:17,409 --> 00:07:23,590
method you speak<font color="#E5E5E5"> only to the WMI service</font>

155
00:07:20,349 --> 00:07:27,849
and it knows how to<font color="#E5E5E5"> interact with every</font>

156
00:07:23,590 --> 00:07:29,888
other part of<font color="#CCCCCC"> WMI to allow you to gain</font>

157
00:07:27,849 --> 00:07:32,710
<font color="#CCCCCC">the information</font><font color="#E5E5E5"> that you wish or to</font>

158
00:07:29,889 --> 00:07:36,520
allow you<font color="#E5E5E5"> to execute the action which</font>

159
00:07:32,710 --> 00:07:39,310
<font color="#E5E5E5">you requested the other part is WMI</font>

160
00:07:36,520 --> 00:07:42,008
providers WMI providers contain the

161
00:07:39,310 --> 00:07:45,069
actual<font color="#E5E5E5"> implementations of the classes</font>

162
00:07:42,009 --> 00:07:47,110
this<font color="#E5E5E5"> means if I want to enumerate</font>

163
00:07:45,069 --> 00:07:49,599
processes using<font color="#CCCCCC"> wintery</font><font color="#E5E5E5"> due process</font>

164
00:07:47,110 --> 00:07:53,050
there's an actual<font color="#CCCCCC"> implementation</font><font color="#E5E5E5"> of that</font>

165
00:07:49,599 --> 00:07:56,440
sound where this is not<font color="#E5E5E5"> magic and the</font>

166
00:07:53,050 --> 00:07:58,509
WMI providers are calm<font color="#CCCCCC"> dll's</font><font color="#E5E5E5"> or calm</font>

167
00:07:56,440 --> 00:08:00,789
<font color="#CCCCCC">exists which actually know how to</font>

168
00:07:58,509 --> 00:08:02,889
implement all<font color="#CCCCCC"> of the functionality that</font>

169
00:08:00,789 --> 00:08:06,880
is<font color="#E5E5E5"> maybe that is needed from</font><font color="#CCCCCC"> a class and</font>

170
00:08:02,889 --> 00:08:11,020
also<font color="#E5E5E5"> know how to speak</font><font color="#CCCCCC"> WMI</font><font color="#E5E5E5"> back to the</font>

171
00:08:06,880 --> 00:08:15,250
<font color="#CCCCCC">WMI service</font><font color="#E5E5E5"> which later gives back the</font>

172
00:08:11,020 --> 00:08:16,930
results to<font color="#E5E5E5"> the client</font><font color="#CCCCCC"> the third part is</font>

173
00:08:15,250 --> 00:08:18,880
the<font color="#CCCCCC"> WMI repository</font>

174
00:08:16,930 --> 00:08:21,400
these are<font color="#E5E5E5"> basically a couple of files</font>

175
00:08:18,880 --> 00:08:24,729
which<font color="#E5E5E5"> are saved on disk and they contain</font>

176
00:08:21,400 --> 00:08:27,659
<font color="#E5E5E5">the whole definition of the WMI model</font>

177
00:08:24,729 --> 00:08:30,849
the definitions<font color="#E5E5E5"> of classes methods and</font>

178
00:08:27,659 --> 00:08:34,539
the association between clash between

179
00:08:30,849 --> 00:08:39,370
classes<font color="#E5E5E5"> and providers so if we now go</font>

180
00:08:34,539 --> 00:08:41,620
<font color="#CCCCCC">back</font><font color="#E5E5E5"> to the win32 process class we can</font>

181
00:08:39,370 --> 00:08:43,990
somehow understand how this whole

182
00:08:41,620 --> 00:08:45,430
lateral movement technique works<font color="#CCCCCC"> the</font>

183
00:08:43,990 --> 00:08:47,740
winter<font color="#CCCCCC"> is due process class as I've said</font>

184
00:08:45,430 --> 00:08:50,949
represents<font color="#E5E5E5"> a single process on a machine</font>

185
00:08:47,740 --> 00:08:53,380
<font color="#E5E5E5">and this class</font><font color="#CCCCCC"> has a method called</font>

186
00:08:50,950 --> 00:08:59,649
<font color="#CCCCCC">create which basically is an abstraction</font>

187
00:08:53,380 --> 00:09:00,390
<font color="#E5E5E5">of create process so when you invoke the</font>

188
00:08:59,649 --> 00:09:02,220
command

189
00:09:00,390 --> 00:09:04,680
the<font color="#CCCCCC"> powershell command</font><font color="#E5E5E5"> that's behind me</font>

190
00:09:02,220 --> 00:09:07,709
<font color="#E5E5E5">what happens become behind the scenes is</font>

191
00:09:04,680 --> 00:09:10,140
that<font color="#CCCCCC"> I communicate as a client</font><font color="#E5E5E5"> or the</font>

192
00:09:07,709 --> 00:09:13,469
<font color="#E5E5E5">local or remote instance of the</font><font color="#CCCCCC"> WMI</font>

193
00:09:10,140 --> 00:09:15,870
service and I sent out a request to use

194
00:09:13,470 --> 00:09:19,560
the<font color="#CCCCCC"> create method of</font><font color="#E5E5E5"> wintry due process</font>

195
00:09:15,870 --> 00:09:23,610
with the supplied arguments the when the

196
00:09:19,560 --> 00:09:26,010
<font color="#E5E5E5">the WMI service checks which provider is</font>

197
00:09:23,610 --> 00:09:28,620
responsible<font color="#CCCCCC"> for implementing</font><font color="#E5E5E5"> this method</font>

198
00:09:26,010 --> 00:09:30,660
of<font color="#E5E5E5"> this class since the routes of the</font>

199
00:09:28,620 --> 00:09:34,260
<font color="#E5E5E5">request to the provider</font><font color="#CCCCCC"> the provider</font>

200
00:09:30,660 --> 00:09:37,529
then actually<font color="#CCCCCC"> executes whatever is</font>

201
00:09:34,260 --> 00:09:40,589
needed to<font color="#E5E5E5"> execute</font><font color="#CCCCCC"> returns</font><font color="#E5E5E5"> to the service</font>

202
00:09:37,529 --> 00:09:45,300
and the service returns our return value

203
00:09:40,589 --> 00:09:48,660
<font color="#CCCCCC">to the user now this is pretty</font><font color="#E5E5E5"> much all</font>

204
00:09:45,300 --> 00:09:51,540
<font color="#CCCCCC">of the classic</font><font color="#E5E5E5"> this one method</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> pretty</font>

205
00:09:48,660 --> 00:09:54,779
much<font color="#E5E5E5"> classic lateral movement using</font><font color="#CCCCCC"> WMI</font>

206
00:09:51,540 --> 00:09:57,920
but there are<font color="#E5E5E5"> actually a couple of</font><font color="#CCCCCC"> ways</font>

207
00:09:54,779 --> 00:10:03,630
<font color="#E5E5E5">to avoid using the win32 process class</font>

208
00:09:57,920 --> 00:10:05,939
to move laterally<font color="#E5E5E5"> and if you're if</font>

209
00:10:03,630 --> 00:10:08,910
<font color="#CCCCCC">you're</font><font color="#E5E5E5"> an adversary or the defender is</font>

210
00:10:05,940 --> 00:10:11,910
looking for<font color="#CCCCCC"> win32 process you could use</font>

211
00:10:08,910 --> 00:10:13,439
some<font color="#E5E5E5"> other stuff so the first technique</font>

212
00:10:11,910 --> 00:10:15,089
<font color="#E5E5E5">isn't really a</font><font color="#CCCCCC"> new lateral movement</font>

213
00:10:13,440 --> 00:10:17,790
technique but it's an evasion technique

214
00:10:15,089 --> 00:10:21,540
first publicly implemented by<font color="#CCCCCC"> matt</font>

215
00:10:17,790 --> 00:10:24,000
<font color="#CCCCCC">Graber</font><font color="#E5E5E5"> and it abuses the fact that WMI</font>

216
00:10:21,540 --> 00:10:26,279
is an object-oriented model and<font color="#E5E5E5"> just</font>

217
00:10:24,000 --> 00:10:30,779
like every<font color="#CCCCCC"> single</font><font color="#E5E5E5"> object oriented model</font>

218
00:10:26,279 --> 00:10:33,930
<font color="#CCCCCC">it</font><font color="#E5E5E5"> has a class hierarchy</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> means that</font>

219
00:10:30,779 --> 00:10:37,470
we<font color="#E5E5E5"> could use a subclass we could create</font>

220
00:10:33,930 --> 00:10:42,630
a subclass of<font color="#CCCCCC"> win32 process and use this</font>

221
00:10:37,470 --> 00:10:46,140
instead so if we create<font color="#E5E5E5"> when</font><font color="#CCCCCC"> 32 not evil</font>

222
00:10:42,630 --> 00:10:50,310
at all<font color="#E5E5E5"> using an API that</font><font color="#CCCCCC"> WMI</font><font color="#E5E5E5"> actually</font>

223
00:10:46,140 --> 00:10:52,140
provides remotely<font color="#E5E5E5"> this new</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> 32 not</font>

224
00:10:50,310 --> 00:10:54,510
evil at all<font color="#E5E5E5"> subclass of whether you</font>

225
00:10:52,140 --> 00:10:57,720
process actually inherits all<font color="#CCCCCC"> of the</font>

226
00:10:54,510 --> 00:11:02,519
methods of the parent and this means<font color="#E5E5E5"> we</font>

227
00:10:57,720 --> 00:11:04,079
can<font color="#E5E5E5"> also get the create</font><font color="#CCCCCC"> method so we</font>

228
00:11:02,519 --> 00:11:06,510
just call the create method<font color="#E5E5E5"> on</font><font color="#CCCCCC"> a new</font>

229
00:11:04,079 --> 00:11:11,010
class and we've avoided directly using

230
00:11:06,510 --> 00:11:13,350
win32 process now there<font color="#E5E5E5"> will be a short</font>

231
00:11:11,010 --> 00:11:15,750
demo<font color="#E5E5E5"> I'm gonna try to look at</font>

232
00:11:13,350 --> 00:11:19,230
what happens in<font color="#CCCCCC"> WMI using the w my</font>

233
00:11:15,750 --> 00:11:21,480
activity<font color="#E5E5E5"> etw provider while</font><font color="#CCCCCC"> i derive a</font>

234
00:11:19,230 --> 00:11:27,510
class from<font color="#CCCCCC"> win32 process</font><font color="#E5E5E5"> and just</font>

235
00:11:21,480 --> 00:11:35,790
<font color="#E5E5E5">launched</font><font color="#CCCCCC"> notepad so we're enabling</font><font color="#E5E5E5"> the</font>

236
00:11:27,510 --> 00:11:38,130
<font color="#E5E5E5">etw provider and this is short</font><font color="#CCCCCC"> script</font>

237
00:11:35,790 --> 00:11:40,650
<font color="#E5E5E5">that just creates a new class remotely</font>

238
00:11:38,130 --> 00:11:53,430
that inherits from win32 process and

239
00:11:40,650 --> 00:11:55,380
<font color="#E5E5E5">called create so now we've launched an</font>

240
00:11:53,430 --> 00:11:58,500
instance<font color="#E5E5E5"> of notepad and we could see the</font>

241
00:11:55,380 --> 00:12:01,380
event saying if you don't<font color="#CCCCCC"> can't read it</font>

242
00:11:58,500 --> 00:12:06,290
this says exact method not<font color="#E5E5E5"> evil at all</font>

243
00:12:01,380 --> 00:12:08,970
create and of course we have<font color="#CCCCCC"> notepad now</font>

244
00:12:06,290 --> 00:12:15,480
<font color="#E5E5E5">what we're looking</font><font color="#CCCCCC"> at is event</font><font color="#E5E5E5"> a living</font>

245
00:12:08,970 --> 00:12:18,960
of this<font color="#CCCCCC"> WMI activity</font><font color="#E5E5E5"> etw provider</font><font color="#CCCCCC"> this</font>

246
00:12:15,480 --> 00:12:22,200
event represents all of<font color="#CCCCCC"> the requests</font>

247
00:12:18,960 --> 00:12:24,900
there are forwarded to<font color="#E5E5E5"> the WMI service</font>

248
00:12:22,200 --> 00:12:27,540
and as we see there's win32 not evil at

249
00:12:24,900 --> 00:12:30,000
all so if you're<font color="#CCCCCC"> looking</font><font color="#E5E5E5"> at</font><font color="#CCCCCC"> wintery a</font>

250
00:12:27,540 --> 00:12:32,930
<font color="#E5E5E5">new process you</font><font color="#CCCCCC"> can't find</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> here but</font>

251
00:12:30,000 --> 00:12:35,970
you could find<font color="#CCCCCC"> it</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> another</font><font color="#E5E5E5"> event event</font>

252
00:12:32,930 --> 00:12:38,069
<font color="#E5E5E5">how does this happen we've created</font>

253
00:12:35,970 --> 00:12:41,760
another<font color="#E5E5E5"> class for not using</font><font color="#CCCCCC"> wintery to</font>

254
00:12:38,070 --> 00:12:43,590
process now this kind of event event<font color="#E5E5E5"> 12</font>

255
00:12:41,760 --> 00:12:48,930
is actually<font color="#E5E5E5"> the request that there are</font>

256
00:12:43,590 --> 00:12:50,760
forwarded<font color="#CCCCCC"> to WMI providers and while we</font>

257
00:12:48,930 --> 00:12:52,770
have created a new<font color="#CCCCCC"> class</font><font color="#E5E5E5"> we haven't</font>

258
00:12:50,760 --> 00:12:55,230
<font color="#CCCCCC">introduced</font><font color="#E5E5E5"> any new code to</font><font color="#CCCCCC"> the machine</font>

259
00:12:52,770 --> 00:13:00,530
this means something needs<font color="#E5E5E5"> to implement</font>

260
00:12:55,230 --> 00:13:03,690
that same<font color="#CCCCCC"> WMI method and it still the</font>

261
00:13:00,530 --> 00:13:05,490
create method of<font color="#E5E5E5"> winter to do process so</font>

262
00:13:03,690 --> 00:13:08,010
if you know where<font color="#CCCCCC"> to look</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> you don't</font>

263
00:13:05,490 --> 00:13:10,500
just look at<font color="#CCCCCC"> the request to duck</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> WMI</font>

264
00:13:08,010 --> 00:13:16,439
service you could still detect this<font color="#E5E5E5"> kind</font>

265
00:13:10,500 --> 00:13:17,940
<font color="#CCCCCC">of attack actually if</font><font color="#E5E5E5"> we try to use</font><font color="#CCCCCC"> some</font>

266
00:13:16,440 --> 00:13:19,800
attacks which<font color="#CCCCCC"> aren't</font><font color="#E5E5E5"> really lateral</font>

267
00:13:17,940 --> 00:13:22,710
movement<font color="#E5E5E5"> but involve</font><font color="#CCCCCC"> deriving classes</font>

268
00:13:19,800 --> 00:13:25,229
<font color="#E5E5E5">that do not have methods like some</font>

269
00:13:22,710 --> 00:13:28,309
popular persistence methods like some

270
00:13:25,230 --> 00:13:31,169
popular persistent techniques

271
00:13:28,309 --> 00:13:34,499
you don't see any provider<font color="#CCCCCC"> method calls</font>

272
00:13:31,169 --> 00:13:37,619
<font color="#E5E5E5">so you don't really see any trace</font><font color="#CCCCCC"> of the</font>

273
00:13:34,499 --> 00:13:40,589
original<font color="#CCCCCC"> class which makes</font><font color="#E5E5E5"> it a tiny bit</font>

274
00:13:37,619 --> 00:13:42,629
stealthier another way to detect this

275
00:13:40,589 --> 00:13:45,989
kind<font color="#CCCCCC"> of attack is by using WMI</font>

276
00:13:42,629 --> 00:13:48,689
introspection<font color="#CCCCCC"> w might allows you to look</font>

277
00:13:45,989 --> 00:13:51,359
inside<font color="#E5E5E5"> the w mark the</font><font color="#CCCCCC"> w my model itself</font>

278
00:13:48,689 --> 00:13:53,189
and provides you an event<font color="#E5E5E5"> clip system</font>

279
00:13:51,359 --> 00:13:55,619
that<font color="#E5E5E5"> tells you whenever a method is</font>

280
00:13:53,189 --> 00:14:00,389
<font color="#E5E5E5">called or a new instance of a class has</font>

281
00:13:55,619 --> 00:14:03,329
created and when you<font color="#E5E5E5"> use this</font><font color="#CCCCCC"> very</font>

282
00:14:00,389 --> 00:14:07,649
syntax<font color="#E5E5E5"> to try to find new instances</font>

283
00:14:03,329 --> 00:14:10,228
where target<font color="#E5E5E5"> instance is some class you</font>

284
00:14:07,649 --> 00:14:13,139
<font color="#E5E5E5">actually look at all</font><font color="#CCCCCC"> subclasses</font><font color="#E5E5E5"> this</font>

285
00:14:10,229 --> 00:14:16,559
means<font color="#E5E5E5"> that if I</font><font color="#CCCCCC"> replaced some class with</font>

286
00:14:13,139 --> 00:14:22,919
win32 process this is going to catch my

287
00:14:16,559 --> 00:14:25,829
new W my not<font color="#CCCCCC"> yveltal</font><font color="#E5E5E5"> class I did try to</font>

288
00:14:22,919 --> 00:14:28,679
do something a bit<font color="#CCCCCC"> more stealthy</font><font color="#E5E5E5"> and I</font>

289
00:14:25,829 --> 00:14:30,628
<font color="#CCCCCC">try to</font><font color="#E5E5E5"> use another</font><font color="#CCCCCC"> method that</font><font color="#E5E5E5"> the W my</font>

290
00:14:28,679 --> 00:14:33,269
system itself exposes which is cloning<font color="#CCCCCC"> a</font>

291
00:14:30,629 --> 00:14:36,299
class now when you clone a class<font color="#E5E5E5"> you</font>

292
00:14:33,269 --> 00:14:39,600
don't have a child<font color="#E5E5E5"> class you have a</font>

293
00:14:36,299 --> 00:14:42,569
class<font color="#E5E5E5"> that implements everything or at</font>

294
00:14:39,600 --> 00:14:45,059
least has all<font color="#CCCCCC"> of the methods but it</font>

295
00:14:42,569 --> 00:14:47,849
shares<font color="#E5E5E5"> a parent with the original class</font>

296
00:14:45,059 --> 00:14:50,850
<font color="#E5E5E5">which means</font><font color="#CCCCCC"> the hierarchy is a little</font>

297
00:14:47,850 --> 00:14:53,339
harder<font color="#E5E5E5"> to follow but it turns out that</font>

298
00:14:50,850 --> 00:14:55,829
<font color="#E5E5E5">the W my service doesn't really know how</font>

299
00:14:53,339 --> 00:14:59,759
to find that method<font color="#E5E5E5"> on the clone class</font>

300
00:14:55,829 --> 00:15:01,349
so this simply doesn't work you<font color="#CCCCCC"> try you</font>

301
00:14:59,759 --> 00:15:04,789
could clone the class but<font color="#E5E5E5"> the moment you</font>

302
00:15:01,350 --> 00:15:04,789
call the<font color="#E5E5E5"> method</font><font color="#CCCCCC"> it just fails</font>

303
00:15:04,850 --> 00:15:12,269
now another<font color="#E5E5E5"> category of</font><font color="#CCCCCC"> WW</font><font color="#E5E5E5"> my lateral</font>

304
00:15:10,470 --> 00:15:14,729
movement techniques<font color="#E5E5E5"> is pretty much</font>

305
00:15:12,269 --> 00:15:19,549
sprinkling<font color="#CCCCCC"> WMI on top of the classic</font>

306
00:15:14,729 --> 00:15:21,720
techniques now this shouldn't suppose

307
00:15:19,549 --> 00:15:23,789
this<font color="#E5E5E5"> isn't supposed to help you unless</font>

308
00:15:21,720 --> 00:15:26,809
<font color="#CCCCCC">you can somehow evade detection by</font>

309
00:15:23,789 --> 00:15:30,169
sprinkling<font color="#CCCCCC"> WMI over those</font><font color="#E5E5E5"> techniques and</font>

310
00:15:26,809 --> 00:15:33,238
the way it helps you<font color="#CCCCCC"> vary detection is</font>

311
00:15:30,169 --> 00:15:37,649
by<font color="#CCCCCC"> looking completely different on the</font>

312
00:15:33,239 --> 00:15:40,710
wire<font color="#CCCCCC"> you won't see the packets</font><font color="#E5E5E5"> that are</font>

313
00:15:37,649 --> 00:15:45,120
used<font color="#E5E5E5"> by other by other laws movie</font>

314
00:15:40,710 --> 00:15:47,339
when<font color="#CCCCCC"> eww my</font><font color="#E5E5E5"> fightin the first of those</font>

315
00:15:45,120 --> 00:15:49,230
techniques<font color="#E5E5E5"> is win32 service which</font>

316
00:15:47,339 --> 00:15:52,320
represents a single<font color="#E5E5E5"> service on a machine</font>

317
00:15:49,230 --> 00:15:55,680
<font color="#E5E5E5">and it provides you the whole capability</font>

318
00:15:52,320 --> 00:15:58,110
of<font color="#E5E5E5"> SDXC this means you could start</font>

319
00:15:55,680 --> 00:16:01,560
services<font color="#E5E5E5"> stop them create new ones and</font>

320
00:15:58,110 --> 00:16:03,209
change musics existing<font color="#CCCCCC"> ones and this</font>

321
00:16:01,560 --> 00:16:07,550
basically means<font color="#E5E5E5"> that you could</font>

322
00:16:03,209 --> 00:16:10,649
re-implement PS exec using WM<font color="#E5E5E5"> i only and</font>

323
00:16:07,550 --> 00:16:12,719
if it's not<font color="#E5E5E5"> enough there are four</font>

324
00:16:10,649 --> 00:16:15,270
classes<font color="#E5E5E5"> which represent services on a</font>

325
00:16:12,720 --> 00:16:17,220
machine<font color="#E5E5E5"> so you don't even need to derive</font>

326
00:16:15,270 --> 00:16:19,350
<font color="#E5E5E5">new classes to use that old technique</font>

327
00:16:17,220 --> 00:16:21,089
<font color="#E5E5E5">the to use the previous technique you</font>

328
00:16:19,350 --> 00:16:23,880
<font color="#CCCCCC">could</font><font color="#E5E5E5"> just use one of those</font><font color="#CCCCCC"> four who</font>

329
00:16:21,089 --> 00:16:26,540
that have the exact<font color="#E5E5E5"> same methods to</font>

330
00:16:23,880 --> 00:16:29,820
launch a new service on a target machine

331
00:16:26,540 --> 00:16:33,000
so<font color="#E5E5E5"> you basically need to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> aware of all</font>

332
00:16:29,820 --> 00:16:38,010
four<font color="#E5E5E5"> classes now</font><font color="#CCCCCC"> if you look at a</font>

333
00:16:33,000 --> 00:16:42,350
wireshark capture of PS exec or SDXC you

334
00:16:38,010 --> 00:16:44,970
see that<font color="#E5E5E5"> the protocol in use is DC or</font><font color="#CCCCCC"> PC</font>

335
00:16:42,350 --> 00:16:46,680
which is<font color="#CCCCCC"> pretty complex but</font><font color="#E5E5E5"> the two</font>

336
00:16:44,970 --> 00:16:50,310
things you<font color="#E5E5E5"> need to know</font><font color="#CCCCCC"> about it is</font><font color="#E5E5E5"> that</font>

337
00:16:46,680 --> 00:16:52,589
there's an interface ID field<font color="#E5E5E5"> which</font>

338
00:16:50,310 --> 00:16:56,599
identifies the<font color="#CCCCCC"> service</font><font color="#E5E5E5"> behind the</font>

339
00:16:52,589 --> 00:17:00,480
protocol<font color="#E5E5E5"> so I could identify hey this is</font>

340
00:16:56,600 --> 00:17:02,790
somebody's connecting to<font color="#CCCCCC"> the service</font>

341
00:17:00,480 --> 00:17:06,990
manager and there's the operation<font color="#CCCCCC"> number</font>

342
00:17:02,790 --> 00:17:09,178
field<font color="#E5E5E5"> which determines</font><font color="#CCCCCC"> the actual</font>

343
00:17:06,990 --> 00:17:11,880
function called there are<font color="#E5E5E5"> some levels</font><font color="#CCCCCC"> of</font>

344
00:17:09,179 --> 00:17:13,980
encryption of DC RPC<font color="#E5E5E5"> but even even at</font>

345
00:17:11,880 --> 00:17:17,370
the highest level of encryption<font color="#E5E5E5"> you</font>

346
00:17:13,980 --> 00:17:19,740
still you could still<font color="#E5E5E5"> find out that</font>

347
00:17:17,369 --> 00:17:23,178
<font color="#CCCCCC">somebody is calling</font><font color="#E5E5E5"> the create service</font>

348
00:17:19,740 --> 00:17:25,559
function on<font color="#CCCCCC"> the on the service manager</font>

349
00:17:23,179 --> 00:17:28,079
now<font color="#E5E5E5"> if you</font><font color="#CCCCCC"> implement the same thing</font>

350
00:17:25,559 --> 00:17:30,860
using<font color="#CCCCCC"> went through</font><font color="#E5E5E5"> service you</font><font color="#CCCCCC"> sim you</font>

351
00:17:28,079 --> 00:17:34,290
see something<font color="#E5E5E5"> else entirely</font>

352
00:17:30,860 --> 00:17:38,669
<font color="#E5E5E5">WMI as I've said could work over decom</font>

353
00:17:34,290 --> 00:17:42,570
which<font color="#E5E5E5"> also works over DC RPC but all W</font>

354
00:17:38,670 --> 00:17:45,480
my method calls are actually transmitted

355
00:17:42,570 --> 00:17:49,139
over<font color="#E5E5E5"> one interface and using only one</font>

356
00:17:45,480 --> 00:17:51,510
function<font color="#E5E5E5"> and this means that if you're</font>

357
00:17:49,140 --> 00:17:54,600
using<font color="#E5E5E5"> this you</font><font color="#CCCCCC"> can't tell the difference</font>

358
00:17:51,510 --> 00:17:57,658
<font color="#E5E5E5">between somebody calling a benign</font><font color="#CCCCCC"> W</font>

359
00:17:54,600 --> 00:18:00,418
and somebody using the service or or

360
00:17:57,659 --> 00:18:03,029
anything like<font color="#E5E5E5"> that</font><font color="#CCCCCC"> you you just know</font>

361
00:18:00,419 --> 00:18:09,539
<font color="#E5E5E5">somebody called some W my method which</font>

362
00:18:03,029 --> 00:18:11,850
is a bit<font color="#CCCCCC"> more opaque another similar</font>

363
00:18:09,539 --> 00:18:14,070
technique is<font color="#CCCCCC"> old-style schedule</font><font color="#E5E5E5"> tests</font>

364
00:18:11,850 --> 00:18:18,149
which is<font color="#E5E5E5"> basically an abstraction of the</font>

365
00:18:14,070 --> 00:18:21,509
<font color="#E5E5E5">functionality</font><font color="#CCCCCC"> of a txz now it provides</font>

366
00:18:18,149 --> 00:18:24,149
you with<font color="#CCCCCC"> a bit of</font><font color="#E5E5E5"> a thin API just</font><font color="#CCCCCC"> like a</font>

367
00:18:21,509 --> 00:18:25,799
<font color="#E5E5E5">exe itself</font><font color="#CCCCCC"> if you</font><font color="#E5E5E5"> want to enumerate jobs</font>

368
00:18:24,149 --> 00:18:28,229
you just enumerate instances of the

369
00:18:25,799 --> 00:18:31,799
class<font color="#CCCCCC"> and if you want to create a new</font>

370
00:18:28,230 --> 00:18:35,000
job to run in at some time you<font color="#CCCCCC"> just use</font>

371
00:18:31,799 --> 00:18:39,750
the create method<font color="#E5E5E5"> there's no way to run</font>

372
00:18:35,000 --> 00:18:42,210
a scheduled job forcefully but<font color="#E5E5E5"> you know</font>

373
00:18:39,750 --> 00:18:44,100
you can just<font color="#E5E5E5"> always create a job that</font>

374
00:18:42,210 --> 00:18:45,629
<font color="#CCCCCC">will run in a minute and</font><font color="#E5E5E5"> take a quick</font>

375
00:18:44,100 --> 00:18:52,289
bathroom break and<font color="#E5E5E5"> return</font><font color="#CCCCCC"> to code</font>

376
00:18:45,629 --> 00:18:54,809
execution<font color="#CCCCCC"> but this will this will</font><font color="#E5E5E5"> not</font>

377
00:18:52,289 --> 00:18:57,179
run on<font color="#CCCCCC"> newer operating systems edited</font>

378
00:18:54,809 --> 00:19:00,240
<font color="#CCCCCC">eggsy has been deprecated</font><font color="#E5E5E5"> and not only</font>

379
00:18:57,179 --> 00:19:03,720
<font color="#E5E5E5">the has the executable being deprecated</font>

380
00:19:00,240 --> 00:19:05,340
<font color="#E5E5E5">but the actual functionality behind the</font>

381
00:19:03,720 --> 00:19:11,909
<font color="#CCCCCC">old style schedule</font><font color="#E5E5E5"> test has been</font>

382
00:19:05,340 --> 00:19:14,519
<font color="#CCCCCC">deprecated</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> windows</font><font color="#E5E5E5"> 8</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> up and you</font>

383
00:19:11,909 --> 00:19:17,370
won't be able<font color="#E5E5E5"> to</font><font color="#CCCCCC"> use the</font><font color="#E5E5E5"> WMI version</font>

384
00:19:14,519 --> 00:19:20,159
unless somebody has explicitly enable

385
00:19:17,370 --> 00:19:21,959
this functionality on your systems but

386
00:19:20,159 --> 00:19:23,159
fortunately we do have<font color="#E5E5E5"> the new style</font>

387
00:19:21,960 --> 00:19:26,220
<font color="#E5E5E5">scheduled tasks which are also</font>

388
00:19:23,159 --> 00:19:28,649
represented by<font color="#CCCCCC"> WMI</font><font color="#E5E5E5"> and this is</font>

389
00:19:26,220 --> 00:19:34,230
<font color="#E5E5E5">represented actually by the PS scheduled</font>

390
00:19:28,649 --> 00:19:37,949
tasks class<font color="#CCCCCC"> and it provides the full</font><font color="#E5E5E5"> API</font>

391
00:19:34,230 --> 00:19:41,070
<font color="#CCCCCC">api</font><font color="#E5E5E5"> of scheduled tasks</font><font color="#CCCCCC"> directly but it's</font>

392
00:19:37,950 --> 00:19:43,529
only available<font color="#E5E5E5"> on</font><font color="#CCCCCC"> windows 8 and up</font><font color="#E5E5E5"> ACH</font>

393
00:19:41,070 --> 00:19:46,769
tasks that<font color="#CCCCCC"> XE</font><font color="#E5E5E5"> is available on Windows</font><font color="#CCCCCC"> 7</font>

394
00:19:43,529 --> 00:19:50,250
but<font color="#CCCCCC"> the WMI</font><font color="#E5E5E5"> version of it is is gone</font><font color="#CCCCCC"> and</font>

395
00:19:46,769 --> 00:19:52,740
you<font color="#E5E5E5"> can do</font><font color="#CCCCCC"> anything to make it works</font><font color="#E5E5E5"> to</font>

396
00:19:50,250 --> 00:19:54,600
make it<font color="#E5E5E5"> work but it does give you a</font>

397
00:19:52,740 --> 00:19:56,370
pretty rich API<font color="#E5E5E5"> this means you could</font>

398
00:19:54,600 --> 00:19:57,928
register new tasks you could run them

399
00:19:56,370 --> 00:19:59,549
forcefully<font color="#CCCCCC"> you could change existing</font>

400
00:19:57,929 --> 00:20:03,320
ones you could change the actions of

401
00:19:59,549 --> 00:20:08,129
existing ones<font color="#E5E5E5"> and delete them and</font>

402
00:20:03,320 --> 00:20:09,510
another interesting<font color="#E5E5E5"> thing is that there</font>

403
00:20:08,129 --> 00:20:13,199
<font color="#E5E5E5">are a couple</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> commandlets</font>

404
00:20:09,510 --> 00:20:14,669
in<font color="#E5E5E5"> powershell 3 and up that are related</font>

405
00:20:13,200 --> 00:20:17,250
<font color="#CCCCCC">to</font><font color="#E5E5E5"> scheduled tasks like the new</font>

406
00:20:14,669 --> 00:20:19,350
<font color="#E5E5E5">scheduled tasks</font><font color="#CCCCCC"> manlet and all of</font><font color="#E5E5E5"> these</font>

407
00:20:17,250 --> 00:20:22,559
<font color="#CCCCCC">are actually</font><font color="#E5E5E5"> using</font><font color="#CCCCCC"> WMI behind the scenes</font>

408
00:20:19,350 --> 00:20:24,418
<font color="#E5E5E5">so if you've ever used this in some kind</font>

409
00:20:22,559 --> 00:20:27,830
of red teaming engagement<font color="#E5E5E5"> you were</font>

410
00:20:24,419 --> 00:20:30,000
actually you might have been<font color="#E5E5E5"> actually</font>

411
00:20:27,830 --> 00:20:32,580
subverting some kind<font color="#E5E5E5"> of ideas without</font>

412
00:20:30,000 --> 00:20:35,750
<font color="#E5E5E5">even knowing it because you were using a</font>

413
00:20:32,580 --> 00:20:39,059
whole different kind of communication

414
00:20:35,750 --> 00:20:41,279
<font color="#E5E5E5">now let's see a quick demo</font><font color="#CCCCCC"> I'm gonna</font>

415
00:20:39,059 --> 00:20:44,190
<font color="#E5E5E5">install meterpreter on a remote machine</font>

416
00:20:41,279 --> 00:20:47,669
<font color="#E5E5E5">while I'm</font><font color="#CCCCCC"> looking at the</font><font color="#E5E5E5"> network traffic</font>

417
00:20:44,190 --> 00:20:52,769
with Wireshark<font color="#E5E5E5"> and looking at service</font>

418
00:20:47,669 --> 00:20:59,340
control packets so we have a<font color="#CCCCCC"> listener</font>

419
00:20:52,769 --> 00:21:01,350
<font color="#CCCCCC">and we're looking at service control</font>

420
00:20:59,340 --> 00:21:03,899
packets because<font color="#E5E5E5"> we're going to start a</font>

421
00:21:01,350 --> 00:21:06,449
<font color="#CCCCCC">new service</font><font color="#E5E5E5"> much like with PS exec and</font>

422
00:21:03,899 --> 00:21:09,799
we're<font color="#E5E5E5"> just gonna run meterpreter as a</font>

423
00:21:06,450 --> 00:21:09,799
new service using<font color="#CCCCCC"> WI</font>

424
00:21:19,000 --> 00:21:27,020
so we have a new session<font color="#CCCCCC"> of course we're</font>

425
00:21:22,700 --> 00:21:29,450
system and let's see how<font color="#CCCCCC"> many packets</font>

426
00:21:27,020 --> 00:21:32,690
we've generated<font color="#E5E5E5"> zero service control</font>

427
00:21:29,450 --> 00:21:35,660
packets which is<font color="#E5E5E5"> pretty nice</font><font color="#CCCCCC"> if this was</font>

428
00:21:32,690 --> 00:21:38,650
an IDs looking for<font color="#CCCCCC"> es exact this is</font>

429
00:21:35,660 --> 00:21:38,650
exactly what it would<font color="#E5E5E5"> see</font>

430
00:21:39,730 --> 00:21:50,260
so another lateral movement method is

431
00:21:45,799 --> 00:21:53,179
the win32 product class class which is

432
00:21:50,260 --> 00:21:55,309
<font color="#CCCCCC">isn't-isn't and modification of an</font>

433
00:21:53,179 --> 00:21:58,400
existing method or some kind of a of

434
00:21:55,309 --> 00:22:01,100
<font color="#E5E5E5">evasive technique it's a whole new</font>

435
00:21:58,400 --> 00:22:04,280
lateral movement method and the winter

436
00:22:01,100 --> 00:22:06,409
<font color="#CCCCCC">ado product class is it</font><font color="#E5E5E5"> represents</font>

437
00:22:04,280 --> 00:22:10,190
<font color="#E5E5E5">applications that are installed by MSI</font>

438
00:22:06,410 --> 00:22:11,840
exec and it has a very handy method

439
00:22:10,190 --> 00:22:17,990
<font color="#E5E5E5">called install which allows you to</font>

440
00:22:11,840 --> 00:22:20,600
<font color="#E5E5E5">install basically any MSI file you you</font>

441
00:22:17,990 --> 00:22:22,850
also have the admin which is

442
00:22:20,600 --> 00:22:24,980
administrative install method which

443
00:22:22,850 --> 00:22:27,770
could also<font color="#E5E5E5"> be used to install image</font><font color="#CCCCCC"> AI</font>

444
00:22:24,980 --> 00:22:33,160
files<font color="#E5E5E5"> and you could also use the upgrade</font>

445
00:22:27,770 --> 00:22:35,720
<font color="#E5E5E5">and configure to do some other stuff</font><font color="#CCCCCC"> and</font>

446
00:22:33,160 --> 00:22:38,960
<font color="#E5E5E5">fortunately even</font><font color="#CCCCCC"> Metasploit allows you</font>

447
00:22:35,720 --> 00:22:41,510
to package<font color="#E5E5E5"> your payload as an MSI but it</font>

448
00:22:38,960 --> 00:22:45,650
basically only allows you to package<font color="#CCCCCC"> Xen</font>

449
00:22:41,510 --> 00:22:49,090
<font color="#CCCCCC">dll payloads</font><font color="#E5E5E5"> the MSI format itself</font>

450
00:22:45,650 --> 00:22:51,710
allows<font color="#CCCCCC"> you to use vbscript and jscript</font>

451
00:22:49,090 --> 00:22:53,720
inside of an MSI so you can<font color="#E5E5E5"> basically</font>

452
00:22:51,710 --> 00:22:56,840
<font color="#E5E5E5">just use something like dotnet to</font>

453
00:22:53,720 --> 00:23:01,429
jscript<font color="#E5E5E5"> embedded into an MSI and run it</font>

454
00:22:56,840 --> 00:23:06,168
with this and without<font color="#E5E5E5"> using any commonly</font>

455
00:23:01,429 --> 00:23:08,780
known execution vector and there are

456
00:23:06,169 --> 00:23:10,880
historically pretty advanced groups

457
00:23:08,780 --> 00:23:13,490
which have used<font color="#CCCCCC"> MSI payloads but I</font>

458
00:23:10,880 --> 00:23:16,040
haven't<font color="#E5E5E5"> seen anybody</font><font color="#CCCCCC"> use an msi payload</font>

459
00:23:13,490 --> 00:23:18,410
using this they were basically dropping

460
00:23:16,040 --> 00:23:21,668
<font color="#E5E5E5">an MSI payload on disk and then using</font>

461
00:23:18,410 --> 00:23:25,640
TSX sick or something else<font color="#E5E5E5"> not really</font>

462
00:23:21,669 --> 00:23:30,080
<font color="#E5E5E5">not really using this whole MSI format</font>

463
00:23:25,640 --> 00:23:36,070
<font color="#CCCCCC">and what am</font><font color="#E5E5E5"> I saying exactly</font><font color="#CCCCCC"> to do and</font>

464
00:23:30,080 --> 00:23:38,899
<font color="#E5E5E5">again a short demo as always meterpreter</font>

465
00:23:36,070 --> 00:23:44,510
<font color="#CCCCCC">I'm just going to</font><font color="#E5E5E5"> use the install method</font>

466
00:23:38,900 --> 00:23:45,830
<font color="#E5E5E5">to install it this actually throws an</font>

467
00:23:44,510 --> 00:23:47,770
error because<font color="#CCCCCC"> I don't really</font><font color="#E5E5E5"> want</font><font color="#CCCCCC"> to</font>

468
00:23:45,830 --> 00:23:52,870
<font color="#E5E5E5">install anything I just want to run</font><font color="#CCCCCC"> my</font>

469
00:23:47,770 --> 00:23:52,870
my payload<font color="#E5E5E5"> and not touch the registry</font>

470
00:23:57,250 --> 00:24:03,049
now this has a TMP<font color="#E5E5E5"> file executing as a</font>

471
00:24:00,710 --> 00:24:05,000
child of MSI exact because<font color="#E5E5E5"> this is the</font>

472
00:24:03,049 --> 00:24:07,100
Metasploit version and because<font color="#CCCCCC"> well I'm</font>

473
00:24:05,000 --> 00:24:10,460
lazy<font color="#E5E5E5"> and I didn't write some kind</font><font color="#CCCCCC"> of</font>

474
00:24:07,100 --> 00:24:12,500
<font color="#CCCCCC">chase jscript version of a payload but</font>

475
00:24:10,460 --> 00:24:16,700
you could just<font color="#CCCCCC"> as well</font><font color="#E5E5E5"> subsea do it for</font>

476
00:24:12,500 --> 00:24:18,890
any MSI file do you want now I did try

477
00:24:16,700 --> 00:24:21,890
to do other<font color="#CCCCCC"> stuff with the win32 product</font>

478
00:24:18,890 --> 00:24:24,799
class<font color="#E5E5E5"> first I try to</font><font color="#CCCCCC"> replicate the a</font>

479
00:24:21,890 --> 00:24:26,900
mistake MSI<font color="#E5E5E5"> exec /y option which</font>

480
00:24:24,799 --> 00:24:29,540
basically turns<font color="#CCCCCC"> MSI exec</font><font color="#E5E5E5"> into a version</font>

481
00:24:26,900 --> 00:24:32,900
of run<font color="#E5E5E5"> DLL 32 and it allows you to load</font>

482
00:24:29,540 --> 00:24:35,270
an arbitrary<font color="#E5E5E5"> DLL now there's simply no</font>

483
00:24:32,900 --> 00:24:38,570
<font color="#CCCCCC">way</font><font color="#E5E5E5"> to do this</font><font color="#CCCCCC"> fire wmi</font><font color="#E5E5E5"> which is pretty</font>

484
00:24:35,270 --> 00:24:43,580
sad another<font color="#E5E5E5"> cool thing I thought about</font>

485
00:24:38,570 --> 00:24:47,230
is by looking<font color="#CCCCCC"> at</font><font color="#E5E5E5"> on installers</font><font color="#CCCCCC"> each</font>

486
00:24:43,580 --> 00:24:49,639
installed application has<font color="#CCCCCC"> an uninstaller</font>

487
00:24:47,230 --> 00:24:53,270
<font color="#E5E5E5">command line path written in the</font>

488
00:24:49,640 --> 00:24:55,340
registry under<font color="#E5E5E5"> that application and it's</font>

489
00:24:53,270 --> 00:24:57,799
used when you're using the add or remove

490
00:24:55,340 --> 00:24:59,418
programs<font color="#CCCCCC"> dialog it could</font><font color="#E5E5E5"> just use msi</font>

491
00:24:57,799 --> 00:25:02,360
exec or it could run that specific

492
00:24:59,419 --> 00:25:04,840
command line so<font color="#E5E5E5"> i tried to</font><font color="#CCCCCC"> use</font><font color="#E5E5E5"> the</font>

493
00:25:02,360 --> 00:25:08,570
uninstall method of<font color="#E5E5E5"> winterly new product</font>

494
00:25:04,840 --> 00:25:11,090
<font color="#E5E5E5">to basically run a command line which</font><font color="#CCCCCC"> i</font>

495
00:25:08,570 --> 00:25:13,639
inserted into an existing installed

496
00:25:11,090 --> 00:25:19,090
application<font color="#E5E5E5"> which sounds</font><font color="#CCCCCC"> great but it</font>

497
00:25:13,640 --> 00:25:19,090
<font color="#E5E5E5">just doesn't</font><font color="#CCCCCC"> do anything so Shane</font>

498
00:25:21,760 --> 00:25:29,419
another method is another technique<font color="#E5E5E5"> is</font>

499
00:25:24,860 --> 00:25:31,610
abusing WMI providers<font color="#CCCCCC"> as I've said</font><font color="#E5E5E5"> W my</font>

500
00:25:29,419 --> 00:25:33,770
providers<font color="#E5E5E5"> are work all of the class</font>

501
00:25:31,610 --> 00:25:37,070
instances and methods of<font color="#E5E5E5"> W my</font><font color="#CCCCCC"> are</font>

502
00:25:33,770 --> 00:25:39,470
implemented<font color="#CCCCCC"> this means that if you can</font>

503
00:25:37,070 --> 00:25:42,770
somehow run your own WI provider<font color="#E5E5E5"> in the</font>

504
00:25:39,470 --> 00:25:44,270
system and you<font color="#CCCCCC"> can load it remotely</font>

505
00:25:42,770 --> 00:25:48,158
you're basically<font color="#CCCCCC"> running code</font><font color="#E5E5E5"> on the</font>

506
00:25:44,270 --> 00:25:48,158
machine<font color="#E5E5E5"> which is exactly</font><font color="#CCCCCC"> what we want</font>

507
00:25:49,480 --> 00:25:55,820
<font color="#E5E5E5">now a guy called Alex Leary has shown a</font>

508
00:25:53,600 --> 00:25:59,240
method to register a<font color="#E5E5E5"> new provider purely</font>

509
00:25:55,820 --> 00:26:02,000
using<font color="#CCCCCC"> WMI functions</font><font color="#E5E5E5"> during last Derby</font>

510
00:25:59,240 --> 00:26:05,870
<font color="#CCCCCC">con</font><font color="#E5E5E5"> and he's actually really in a really</font>

511
00:26:02,000 --> 00:26:09,110
cool<font color="#E5E5E5"> W my provider POC malware which</font>

512
00:26:05,870 --> 00:26:13,129
acts as an actual W by provider<font color="#E5E5E5"> but</font><font color="#CCCCCC"> I</font>

513
00:26:09,110 --> 00:26:16,490
had two<font color="#E5E5E5"> problems was with this method</font>

514
00:26:13,130 --> 00:26:18,340
with this method<font color="#E5E5E5"> the first is that you</font>

515
00:26:16,490 --> 00:26:21,470
actually need<font color="#CCCCCC"> to write</font><font color="#E5E5E5"> some kind of DLL</font>

516
00:26:18,340 --> 00:26:25,340
that's<font color="#E5E5E5"> W my compliant</font><font color="#CCCCCC"> and drop it on the</font>

517
00:26:21,470 --> 00:26:28,610
<font color="#E5E5E5">disk and if I can avoid</font><font color="#CCCCCC"> disk I I prefer</font>

518
00:26:25,340 --> 00:26:31,100
to do that<font color="#CCCCCC"> and the second part is that</font>

519
00:26:28,610 --> 00:26:34,340
<font color="#CCCCCC">you really need to</font><font color="#E5E5E5"> write W my provider</font>

520
00:26:31,100 --> 00:26:37,189
which works and write lots of W my code

521
00:26:34,340 --> 00:26:39,799
which at least and C++ looks absolutely

522
00:26:37,190 --> 00:26:42,470
<font color="#E5E5E5">horrible and I'm a lazy person so I</font>

523
00:26:39,799 --> 00:26:45,080
really don't want<font color="#E5E5E5"> to write an actual</font>

524
00:26:42,470 --> 00:26:48,740
working W my provider<font color="#E5E5E5"> why do you want to</font>

525
00:26:45,080 --> 00:26:50,928
<font color="#E5E5E5">do is just make this whole provider load</font>

526
00:26:48,740 --> 00:26:53,240
loading functionality<font color="#E5E5E5"> you load an</font>

527
00:26:50,929 --> 00:26:57,350
arbitrary command line because<font color="#CCCCCC"> arbitrary</font>

528
00:26:53,240 --> 00:27:00,620
command lines are the best to do so<font color="#E5E5E5"> we</font>

529
00:26:57,350 --> 00:27:02,629
<font color="#CCCCCC">need to have</font><font color="#E5E5E5"> three steps first we</font><font color="#CCCCCC"> need</font>

530
00:27:00,620 --> 00:27:04,668
to create<font color="#CCCCCC"> a</font><font color="#E5E5E5"> comm object-- because wi</font>

531
00:27:02,630 --> 00:27:06,950
providers are calm objects and<font color="#E5E5E5"> that's</font>

532
00:27:04,669 --> 00:27:09,230
how they're implemented second we

533
00:27:06,950 --> 00:27:12,679
somehow need<font color="#CCCCCC"> to register</font><font color="#E5E5E5"> this object</font><font color="#CCCCCC"> as</font>

534
00:27:09,230 --> 00:27:14,840
a<font color="#E5E5E5"> W my provider</font><font color="#CCCCCC"> and third registration</font>

535
00:27:12,679 --> 00:27:20,120
isn't enough we want<font color="#E5E5E5"> to</font><font color="#CCCCCC"> actually load</font>

536
00:27:14,840 --> 00:27:23,750
our code so let's<font color="#CCCCCC"> start by</font><font color="#E5E5E5"> creating a</font>

537
00:27:20,120 --> 00:27:26,658
cob<font color="#CCCCCC"> jecht</font><font color="#E5E5E5"> to create a</font><font color="#CCCCCC"> convict you</font>

538
00:27:23,750 --> 00:27:30,529
basically only<font color="#E5E5E5"> need to modify the</font>

539
00:27:26,659 --> 00:27:32,330
registry<font color="#CCCCCC"> you need to add sub key of the</font>

540
00:27:30,529 --> 00:27:35,260
relevant class ID you've chosen for<font color="#CCCCCC"> your</font>

541
00:27:32,330 --> 00:27:38,990
object which is<font color="#E5E5E5"> the gooood shown here</font>

542
00:27:35,260 --> 00:27:41,179
and add an implementation now if your

543
00:27:38,990 --> 00:27:43,730
implementation is<font color="#E5E5E5"> an</font><font color="#CCCCCC"> x ii you added</font>

544
00:27:41,179 --> 00:27:47,020
under<font color="#CCCCCC"> local server</font><font color="#E5E5E5"> 32 if it's a dll you</font>

545
00:27:43,730 --> 00:27:50,899
you<font color="#E5E5E5"> had it under in</font><font color="#CCCCCC"> proc server 32 and</font>

546
00:27:47,020 --> 00:27:52,879
whenever this object<font color="#E5E5E5"> is called is an</font>

547
00:27:50,899 --> 00:27:57,219
instance of<font color="#E5E5E5"> the sky object is created</font>

548
00:27:52,880 --> 00:27:57,220
this<font color="#E5E5E5"> is what gets loaded</font>

549
00:27:58,250 --> 00:28:04,700
the second step is<font color="#CCCCCC"> to read is to</font>

550
00:28:01,010 --> 00:28:07,010
register WMI provider now<font color="#E5E5E5"> the WMI</font>

551
00:28:04,700 --> 00:28:10,160
providers are actually represented

552
00:28:07,010 --> 00:28:13,840
themselves<font color="#CCCCCC"> by a w my class which is</font>

553
00:28:10,160 --> 00:28:18,080
double underscore win32 provider and

554
00:28:13,840 --> 00:28:20,179
this is a pretty big class<font color="#CCCCCC"> it has lots</font>

555
00:28:18,080 --> 00:28:23,179
of properties<font color="#CCCCCC"> but there are basically</font>

556
00:28:20,180 --> 00:28:25,760
only<font color="#E5E5E5"> two properties that interest us as</font>

557
00:28:23,180 --> 00:28:28,010
bad guys<font color="#CCCCCC"> because we don't</font><font color="#E5E5E5"> really want it</font>

558
00:28:25,760 --> 00:28:29,990
<font color="#E5E5E5">to</font><font color="#CCCCCC"> work as a good W by provider we just</font>

559
00:28:28,010 --> 00:28:31,790
wanted to<font color="#CCCCCC"> load the first is a name</font>

560
00:28:29,990 --> 00:28:34,640
<font color="#E5E5E5">because</font><font color="#CCCCCC"> we need to somehow reference</font><font color="#E5E5E5"> our</font>

561
00:28:31,790 --> 00:28:38,649
WMI provider<font color="#E5E5E5"> and the second is the class</font>

562
00:28:34,640 --> 00:28:42,170
ID which is<font color="#CCCCCC"> the ID of the common object</font>

563
00:28:38,650 --> 00:28:43,700
which we want<font color="#CCCCCC"> to load sorry</font><font color="#E5E5E5"> and there's</font>

564
00:28:42,170 --> 00:28:46,310
a third<font color="#E5E5E5"> one which is</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> host the</font>

565
00:28:43,700 --> 00:28:48,800
hosting model the hosting model tells us

566
00:28:46,310 --> 00:28:52,310
how do we<font color="#E5E5E5"> want to load or WMI provider</font>

567
00:28:48,800 --> 00:28:55,790
when it loads<font color="#E5E5E5"> you could load</font><font color="#CCCCCC"> it as an</font>

568
00:28:52,310 --> 00:28:58,250
independent<font color="#E5E5E5"> XE with system privileges or</font>

569
00:28:55,790 --> 00:29:02,690
you could load<font color="#CCCCCC"> it as a dll</font><font color="#E5E5E5"> into one of</font>

570
00:28:58,250 --> 00:29:05,330
several<font color="#E5E5E5"> hosts provide host processes</font><font color="#CCCCCC"> so</font>

571
00:29:02,690 --> 00:29:07,370
if you've<font color="#E5E5E5"> ever seen those pesky</font><font color="#CCCCCC"> W</font><font color="#E5E5E5"> my</font>

572
00:29:05,330 --> 00:29:10,010
<font color="#E5E5E5">prvc processes running on your machine</font>

573
00:29:07,370 --> 00:29:12,379
<font color="#CCCCCC">these are actually WMI provider hosts</font>

574
00:29:10,010 --> 00:29:13,970
and the reason there's multiple hosts

575
00:29:12,380 --> 00:29:17,060
it's because they're<font color="#E5E5E5"> running as</font>

576
00:29:13,970 --> 00:29:20,120
different users some soundin need to be

577
00:29:17,060 --> 00:29:23,240
running<font color="#E5E5E5"> as system while others are</font>

578
00:29:20,120 --> 00:29:25,280
<font color="#E5E5E5">better off running just as local local</font>

579
00:29:23,240 --> 00:29:26,960
service<font color="#E5E5E5"> host or network service host</font>

580
00:29:25,280 --> 00:29:32,810
<font color="#E5E5E5">because they don't really need those</font>

581
00:29:26,960 --> 00:29:34,460
privileges so it seems that<font color="#E5E5E5"> if you just</font>

582
00:29:32,810 --> 00:29:37,490
<font color="#E5E5E5">create an instance of this a double</font>

583
00:29:34,460 --> 00:29:39,230
underscore win32 provider<font color="#E5E5E5"> class that's</font>

584
00:29:37,490 --> 00:29:42,950
it you've registered<font color="#E5E5E5"> your own</font><font color="#CCCCCC"> WI</font>

585
00:29:39,230 --> 00:29:45,350
provider and you can choose<font color="#E5E5E5"> your own</font>

586
00:29:42,950 --> 00:29:47,090
class ID<font color="#CCCCCC"> we're going to choose the</font>

587
00:29:45,350 --> 00:29:50,000
hosting model to be self host<font color="#CCCCCC"> width</font>

588
00:29:47,090 --> 00:29:52,550
which is<font color="#CCCCCC"> a special model that loads your</font>

589
00:29:50,000 --> 00:29:56,960
W by provider<font color="#E5E5E5"> as an outside XE with</font>

590
00:29:52,550 --> 00:29:59,990
system privileges and if we if we<font color="#E5E5E5"> really</font>

591
00:29:56,960 --> 00:30:02,030
<font color="#E5E5E5">wanted we</font><font color="#CCCCCC"> could just</font><font color="#E5E5E5"> switch up the the</font>

592
00:29:59,990 --> 00:30:05,090
hosting model and provide<font color="#E5E5E5"> some kind of</font>

593
00:30:02,030 --> 00:30:07,600
<font color="#E5E5E5">dealer or something</font><font color="#CCCCCC"> like that</font><font color="#E5E5E5"> but as of</font>

594
00:30:05,090 --> 00:30:11,870
<font color="#CCCCCC">now we're</font><font color="#E5E5E5"> going to stick with self host</font>

595
00:30:07,600 --> 00:30:16,309
but we still<font color="#E5E5E5"> need to somehow load this</font>

596
00:30:11,870 --> 00:30:19,090
provider<font color="#E5E5E5"> now how how normally how</font><font color="#CCCCCC"> EE</font>

597
00:30:16,309 --> 00:30:22,639
micro batteries are loaded normally is

598
00:30:19,090 --> 00:30:25,399
<font color="#CCCCCC">on-demand that means that if</font><font color="#E5E5E5"> something</font>

599
00:30:22,640 --> 00:30:28,820
is asking for a class<font color="#E5E5E5"> which is</font>

600
00:30:25,400 --> 00:30:31,040
implemented by provider<font color="#E5E5E5"> that's not up</font><font color="#CCCCCC"> W</font>

601
00:30:28,820 --> 00:30:34,550
<font color="#CCCCCC">might loads up that provider</font><font color="#E5E5E5"> and that's</font>

602
00:30:31,040 --> 00:30:37,159
it<font color="#E5E5E5"> now if you don't remember</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> W my</font>

603
00:30:34,550 --> 00:30:40,100
provider is<font color="#E5E5E5"> PowerShell running calc</font>

604
00:30:37,160 --> 00:30:42,830
<font color="#E5E5E5">which way does</font><font color="#CCCCCC"> not implement</font><font color="#E5E5E5"> any W my</font>

605
00:30:40,100 --> 00:30:45,919
class<font color="#E5E5E5"> so we need to find</font><font color="#CCCCCC"> another way to</font>

606
00:30:42,830 --> 00:30:51,620
load this because nobody's gonna demand

607
00:30:45,920 --> 00:30:53,809
<font color="#E5E5E5">or</font><font color="#CCCCCC"> W</font><font color="#E5E5E5"> my W my</font><font color="#CCCCCC"> Cal provider</font><font color="#E5E5E5"> it turns out</font>

608
00:30:51,620 --> 00:30:57,320
there is<font color="#CCCCCC"> a way which</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> the MSFT</font>

609
00:30:53,809 --> 00:31:00,020
providers class this class<font color="#E5E5E5"> represents</font>

610
00:30:57,320 --> 00:31:04,159
all WMI providers currently<font color="#E5E5E5"> loaded on a</font>

611
00:31:00,020 --> 00:31:08,059
machine<font color="#E5E5E5"> and it has a handy method called</font>

612
00:31:04,160 --> 00:31:11,000
load which basically receives the name

613
00:31:08,059 --> 00:31:15,139
<font color="#E5E5E5">of a WMI provider and loads it up</font>

614
00:31:11,000 --> 00:31:17,570
without any demand<font color="#CCCCCC"> beforehand</font><font color="#E5E5E5"> and as</font>

615
00:31:15,140 --> 00:31:21,860
with every other<font color="#CCCCCC"> WY method this is</font>

616
00:31:17,570 --> 00:31:24,050
<font color="#CCCCCC">available remotely so what happens</font>

617
00:31:21,860 --> 00:31:29,059
behind the<font color="#E5E5E5"> scenes</font><font color="#CCCCCC"> and I know</font><font color="#E5E5E5"> this</font>

618
00:31:24,050 --> 00:31:30,470
<font color="#E5E5E5">because this didn't work initially the</font>

619
00:31:29,059 --> 00:31:33,980
reason this didn't work initially<font color="#E5E5E5"> is</font>

620
00:31:30,470 --> 00:31:36,470
because<font color="#CCCCCC"> I mistyped calc</font><font color="#E5E5E5"> but I did open</font>

621
00:31:33,980 --> 00:31:38,809
<font color="#E5E5E5">it up in Ida because that was the</font><font color="#CCCCCC"> first</font>

622
00:31:36,470 --> 00:31:40,480
<font color="#E5E5E5">thought I had</font><font color="#CCCCCC"> before like checking</font><font color="#E5E5E5"> if I</font>

623
00:31:38,809 --> 00:31:44,178
mistyped calc

624
00:31:40,480 --> 00:31:46,280
so the slope method internally calls the

625
00:31:44,179 --> 00:31:50,110
server object for all<font color="#E5E5E5"> factory create</font>

626
00:31:46,280 --> 00:31:51,260
instance method which pretty much

627
00:31:50,110 --> 00:31:55,309
unconditionally

628
00:31:51,260 --> 00:31:57,800
<font color="#CCCCCC">Ryan runs this block which creates an</font>

629
00:31:55,309 --> 00:32:00,800
instance<font color="#E5E5E5"> of the object denoted by our</font>

630
00:31:57,800 --> 00:32:03,919
class ID<font color="#E5E5E5"> this means that the first time</font>

631
00:32:00,800 --> 00:32:06,559
anything checks or WMI provider<font color="#E5E5E5"> is an</font>

632
00:32:03,920 --> 00:32:09,200
actual WMI provider and<font color="#CCCCCC"> not just</font><font color="#E5E5E5"> a bunch</font>

633
00:32:06,559 --> 00:32:14,600
<font color="#E5E5E5">of crap is after our code is running and</font>

634
00:32:09,200 --> 00:32:17,710
if our<font color="#CCCCCC"> codes</font><font color="#E5E5E5"> running we don't care so</font>

635
00:32:14,600 --> 00:32:20,020
what happens is this function

636
00:32:17,710 --> 00:32:22,419
checks<font color="#E5E5E5"> the local service the local</font>

637
00:32:20,020 --> 00:32:27,100
server<font color="#E5E5E5"> 32 key under the relevant class</font>

638
00:32:22,419 --> 00:32:30,669
ID<font color="#E5E5E5"> if we're using the self host model it</font>

639
00:32:27,100 --> 00:32:34,090
runs<font color="#E5E5E5"> our command</font><font color="#CCCCCC"> line</font><font color="#E5E5E5"> and then it tries</font>

640
00:32:30,669 --> 00:32:36,190
to somehow interact with it using using

641
00:32:34,090 --> 00:32:40,658
<font color="#E5E5E5">inter process communication and query</font>

642
00:32:36,190 --> 00:32:42,669
different interfaces<font color="#E5E5E5"> laying</font><font color="#CCCCCC"> WMI</font><font color="#E5E5E5"> and of</font>

643
00:32:40,659 --> 00:32:45,520
course fails because<font color="#E5E5E5"> this is not a real</font>

644
00:32:42,669 --> 00:32:47,590
WMI provider<font color="#E5E5E5"> but we were already running</font>

645
00:32:45,520 --> 00:32:47,950
<font color="#E5E5E5">and we could do pretty much anything we</font>

646
00:32:47,590 --> 00:32:50,529
want

647
00:32:47,950 --> 00:32:52,149
<font color="#E5E5E5">we have never wanted</font><font color="#CCCCCC"> to actually</font>

648
00:32:50,529 --> 00:32:54,789
implement a<font color="#CCCCCC"> WM provider we just wanted</font>

649
00:32:52,149 --> 00:32:59,350
<font color="#CCCCCC">to bootstrap</font><font color="#E5E5E5"> our own code using this</font>

650
00:32:54,789 --> 00:33:02,140
functionality now there is a problem

651
00:32:59,350 --> 00:33:04,389
with<font color="#E5E5E5"> a self host hosting modal hosting</font>

652
00:33:02,140 --> 00:33:08,350
model which is basically what we're

653
00:33:04,390 --> 00:33:12,520
using to to run arbitrary command lines

654
00:33:08,350 --> 00:33:15,520
and that<font color="#E5E5E5"> every time you create a new</font><font color="#CCCCCC"> W</font>

655
00:33:12,520 --> 00:33:17,980
<font color="#CCCCCC">my provider will self host</font><font color="#E5E5E5"> there's an</font>

656
00:33:15,520 --> 00:33:20,440
event<font color="#E5E5E5"> log there's an event</font><font color="#CCCCCC"> log event</font>

657
00:33:17,980 --> 00:33:23,799
that<font color="#CCCCCC"> just says something like this could</font>

658
00:33:20,440 --> 00:33:29,279
be<font color="#CCCCCC"> a real</font><font color="#E5E5E5"> security issue which is really</font>

659
00:33:23,799 --> 00:33:33,730
not good<font color="#E5E5E5"> if our if our goal is stuff</font>

660
00:33:29,279 --> 00:33:35,559
because a huge event<font color="#E5E5E5"> saying somebody did</font>

661
00:33:33,730 --> 00:33:38,640
<font color="#E5E5E5">this and that and which could be a</font>

662
00:33:35,559 --> 00:33:41,158
security<font color="#E5E5E5"> issue isn't really stealthy</font>

663
00:33:38,640 --> 00:33:43,590
<font color="#CCCCCC">fortunately the angel of</font>

664
00:33:41,159 --> 00:33:44,940
<font color="#CCCCCC">backwards-compatibility</font><font color="#E5E5E5"> smiles on us and</font>

665
00:33:43,590 --> 00:33:48,879
[Music]

666
00:33:44,940 --> 00:33:51,270
because of<font color="#E5E5E5"> all W my provider because of</font>

667
00:33:48,880 --> 00:33:53,590
all WI providers there's a special

668
00:33:51,270 --> 00:33:56,649
hosting model called<font color="#E5E5E5"> network service</font>

669
00:33:53,590 --> 00:33:58,720
host<font color="#E5E5E5"> or self host which tries</font><font color="#CCCCCC"> to load</font>

670
00:33:56,649 --> 00:34:02,469
the provider<font color="#CCCCCC"> as a DLL into a lower</font>

671
00:33:58,720 --> 00:34:06,070
privileged host process and if it fails

672
00:34:02,470 --> 00:34:07,800
<font color="#CCCCCC">it just loads it as as an outside</font>

673
00:34:06,070 --> 00:34:10,089
process with<font color="#E5E5E5"> the system privileges and</font>

674
00:34:07,800 --> 00:34:13,570
this of course does<font color="#CCCCCC"> not write anything</font>

675
00:34:10,089 --> 00:34:16,750
<font color="#E5E5E5">to the event log so if we can make</font><font color="#CCCCCC"> it</font>

676
00:34:13,570 --> 00:34:19,030
fail to load our DLL by let's say simply

677
00:34:16,750 --> 00:34:22,750
not having<font color="#CCCCCC"> a DLL and having only</font><font color="#E5E5E5"> an exit</font>

678
00:34:19,030 --> 00:34:25,240
file<font color="#CCCCCC"> it will</font><font color="#E5E5E5"> always default to running</font>

679
00:34:22,750 --> 00:34:27,129
our code as system as an outside process

680
00:34:25,239 --> 00:34:31,388
<font color="#E5E5E5">without writing anything to the event</font>

681
00:34:27,129 --> 00:34:36,848
log<font color="#E5E5E5"> well almost anything because just</font>

682
00:34:31,389 --> 00:34:38,440
<font color="#E5E5E5">like with comm hijacking artifacts</font><font color="#CCCCCC"> we</font>

683
00:34:36,849 --> 00:34:42,369
haven't<font color="#CCCCCC"> really implemented a real</font><font color="#E5E5E5"> calm</font>

684
00:34:38,440 --> 00:34:44,500
object which will give you this<font color="#E5E5E5"> very</font>

685
00:34:42,369 --> 00:34:47,589
nice event<font color="#E5E5E5"> that says that something</font>

686
00:34:44,500 --> 00:34:49,750
didn't register with<font color="#CCCCCC"> the with decom this</font>

687
00:34:47,589 --> 00:34:53,199
class ID is actually the class ID of our

688
00:34:49,750 --> 00:34:55,929
malicious<font color="#E5E5E5"> EE my provider but we could</font>

689
00:34:53,199 --> 00:34:58,419
<font color="#E5E5E5">implement some kind</font><font color="#CCCCCC"> of rudimentary comm</font>

690
00:34:55,929 --> 00:35:03,460
functionality just<font color="#CCCCCC"> to bypass this</font><font color="#E5E5E5"> if we</font>

691
00:34:58,420 --> 00:35:06,310
really want to and another demo<font color="#E5E5E5"> this</font>

692
00:35:03,460 --> 00:35:08,109
time we're gonna<font color="#E5E5E5"> use</font><font color="#CCCCCC"> WMI to write</font>

693
00:35:06,310 --> 00:35:09,580
remotely the registry<font color="#E5E5E5"> of a victim</font>

694
00:35:08,109 --> 00:35:12,970
<font color="#CCCCCC">machine</font><font color="#E5E5E5"> we're going to create a new</font>

695
00:35:09,580 --> 00:35:14,830
comma object and then we're<font color="#E5E5E5"> going to</font>

696
00:35:12,970 --> 00:35:18,160
register<font color="#CCCCCC"> a</font><font color="#E5E5E5"> new WMI provider which uses</font>

697
00:35:14,830 --> 00:35:29,980
fist comma object<font color="#E5E5E5"> and load it which will</font>

698
00:35:18,160 --> 00:35:34,149
<font color="#E5E5E5">result in system level execution all</font>

699
00:35:29,980 --> 00:35:36,760
<font color="#E5E5E5">right</font><font color="#CCCCCC"> so these were all</font><font color="#E5E5E5"> of my new</font>

700
00:35:34,150 --> 00:35:40,990
lateral movement techniques but as I<font color="#E5E5E5"> was</font>

701
00:35:36,760 --> 00:35:43,180
researching<font color="#CCCCCC"> WMI I wanted to see what's</font>

702
00:35:40,990 --> 00:35:46,450
the stupidest thing I<font color="#CCCCCC"> could do with WMI</font>

703
00:35:43,180 --> 00:35:49,930
and<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> messing with boot</font>

704
00:35:46,450 --> 00:35:51,879
configuration<font color="#CCCCCC"> if you're not familiar</font>

705
00:35:49,930 --> 00:35:54,790
with<font color="#CCCCCC"> Abby CD store or the boot</font>

706
00:35:51,880 --> 00:35:58,480
configuration data store<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font>

707
00:35:54,790 --> 00:36:01,810
basically how<font color="#E5E5E5"> Windows knows how to boot</font>

708
00:35:58,480 --> 00:36:04,690
it contains entries about the boot

709
00:36:01,810 --> 00:36:08,230
manager<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> Windows loader</font><font color="#E5E5E5"> which are</font>

710
00:36:04,690 --> 00:36:11,980
the<font color="#E5E5E5"> elements</font><font color="#CCCCCC"> which load the kernel among</font>

711
00:36:08,230 --> 00:36:14,890
other stuff<font color="#E5E5E5"> and it turns out there are</font>

712
00:36:11,980 --> 00:36:18,609
<font color="#CCCCCC">BC there are WI providers which allow</font>

713
00:36:14,890 --> 00:36:21,700
you<font color="#E5E5E5"> to interact with BCD and manipulate</font>

714
00:36:18,609 --> 00:36:25,450
it and just like with every other W my

715
00:36:21,700 --> 00:36:27,368
feature it's available<font color="#CCCCCC"> remotely so we</font>

716
00:36:25,450 --> 00:36:31,680
<font color="#CCCCCC">could basically change the files which</font>

717
00:36:27,369 --> 00:36:35,319
are used by<font color="#CCCCCC"> windows to load</font><font color="#E5E5E5"> windows so</font>

718
00:36:31,680 --> 00:36:39,549
there are no<font color="#CCCCCC"> profound</font><font color="#E5E5E5"> boot security</font>

719
00:36:35,319 --> 00:36:42,130
insights here just this<font color="#E5E5E5"> stupid thing I'm</font>

720
00:36:39,550 --> 00:36:44,320
gonna try to<font color="#E5E5E5"> open the BCD store and find</font>

721
00:36:42,130 --> 00:36:46,200
when loaded eggsy<font color="#E5E5E5"> which is base</font>

722
00:36:44,320 --> 00:36:48,550
the component that<font color="#E5E5E5"> loads the kernel and</font>

723
00:36:46,200 --> 00:36:51,339
because<font color="#E5E5E5"> I don't know how to write boot</font>

724
00:36:48,550 --> 00:36:54,330
<font color="#CCCCCC">kits I'm</font><font color="#E5E5E5"> gonna take</font><font color="#CCCCCC"> one load and use WMI</font>

725
00:36:51,340 --> 00:36:57,580
to switch<font color="#E5E5E5"> it out with</font><font color="#CCCCCC"> Kaldur eggsy and</font>

726
00:36:54,330 --> 00:37:00,910
I'm gonna make the<font color="#CCCCCC"> machine restart</font><font color="#E5E5E5"> again</font>

727
00:36:57,580 --> 00:37:04,470
using<font color="#CCCCCC"> WMI and later we're</font><font color="#E5E5E5"> gonna see how</font>

728
00:37:00,910 --> 00:37:11,470
<font color="#E5E5E5">Windows tries to boot from a calculator</font>

729
00:37:04,470 --> 00:37:13,750
<font color="#E5E5E5">which we could see in this demo</font><font color="#CCCCCC"> so here</font>

730
00:37:11,470 --> 00:37:16,930
we have<font color="#CCCCCC"> just</font><font color="#E5E5E5"> a regular BCD configuration</font>

731
00:37:13,750 --> 00:37:20,650
with<font color="#CCCCCC"> win low drag Z and and the boot</font>

732
00:37:16,930 --> 00:37:23,940
manager<font color="#E5E5E5"> we're gonna override this</font>

733
00:37:20,650 --> 00:37:23,940
configuration with calculator

734
00:37:33,260 --> 00:37:36,770
and now if you look<font color="#CCCCCC"> at the bottom we</font>

735
00:37:34,940 --> 00:37:40,609
have calculator as the Windows boot

736
00:37:36,770 --> 00:37:45,320
<font color="#E5E5E5">loader and we're going to restart the</font>

737
00:37:40,609 --> 00:37:47,000
remote<font color="#CCCCCC"> machine so if you've</font><font color="#E5E5E5"> ever wanted</font>

738
00:37:45,320 --> 00:37:58,369
to see<font color="#E5E5E5"> Windows boot from a calculator</font>

739
00:37:47,000 --> 00:38:04,910
<font color="#CCCCCC">you</font><font color="#E5E5E5"> could see this video do</font><font color="#CCCCCC"> you really</font>

740
00:37:58,369 --> 00:38:11,500
expect anything<font color="#E5E5E5"> else like don't book</font>

741
00:38:04,910 --> 00:38:16,279
<font color="#E5E5E5">from calc and now a word about detection</font>

742
00:38:11,500 --> 00:38:19,070
as I've shown and pretty<font color="#E5E5E5"> much the first</font>

743
00:38:16,280 --> 00:38:22,760
lateral movement method<font color="#E5E5E5"> the W my</font>

744
00:38:19,070 --> 00:38:24,320
activity<font color="#CCCCCC"> ADT W provider</font><font color="#E5E5E5"> basically gives</font>

745
00:38:22,760 --> 00:38:26,780
you all the<font color="#CCCCCC"> information you</font><font color="#E5E5E5"> need</font><font color="#CCCCCC"> to</font>

746
00:38:24,320 --> 00:38:30,080
detect<font color="#E5E5E5"> all of these techniques and many</font>

747
00:38:26,780 --> 00:38:32,750
others<font color="#E5E5E5"> it could show you every time a</font>

748
00:38:30,080 --> 00:38:35,779
method is called<font color="#E5E5E5"> even if it's a derived</font>

749
00:38:32,750 --> 00:38:37,880
method of class that<font color="#E5E5E5"> you created it</font>

750
00:38:35,780 --> 00:38:40,100
could show you each time a<font color="#CCCCCC"> new instance</font>

751
00:38:37,880 --> 00:38:43,070
<font color="#E5E5E5">of a class is created each time there</font>

752
00:38:40,100 --> 00:38:45,680
are changes<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> WMI model such as</font><font color="#E5E5E5"> new</font>

753
00:38:43,070 --> 00:38:49,880
classes or new providers installed and

754
00:38:45,680 --> 00:38:52,069
each time a new<font color="#E5E5E5"> provider is loaded so</font>

755
00:38:49,880 --> 00:38:55,190
this basically covers all<font color="#CCCCCC"> of</font><font color="#E5E5E5"> my</font>

756
00:38:52,070 --> 00:38:58,160
techniques and<font color="#E5E5E5"> I think you could use it</font>

757
00:38:55,190 --> 00:39:00,290
intelligently<font color="#CCCCCC"> to cover each and every</font>

758
00:38:58,160 --> 00:39:04,879
<font color="#CCCCCC">double you might have seen in the wild</font>

759
00:39:00,290 --> 00:39:07,340
<font color="#E5E5E5">and</font><font color="#CCCCCC"> probably most future ones unless</font><font color="#E5E5E5"> you</font>

760
00:39:04,880 --> 00:39:11,540
actually<font color="#E5E5E5"> exploit</font><font color="#CCCCCC"> WMI somehow</font><font color="#E5E5E5"> without</font>

761
00:39:07,340 --> 00:39:14,600
using its built-in functionality<font color="#E5E5E5"> another</font>

762
00:39:11,540 --> 00:39:16,580
<font color="#E5E5E5">great method which I've also shown is</font><font color="#CCCCCC"> W</font>

763
00:39:14,600 --> 00:39:19,700
my introspection<font color="#CCCCCC"> the W my inventing</font>

764
00:39:16,580 --> 00:39:23,299
system allows you pretty much everything

765
00:39:19,700 --> 00:39:27,740
<font color="#CCCCCC">the etw provider allows</font><font color="#E5E5E5"> it's just a bit</font>

766
00:39:23,300 --> 00:39:30,859
less<font color="#E5E5E5"> it's a bit slower</font><font color="#CCCCCC"> so if you can use</font>

767
00:39:27,740 --> 00:39:32,689
the<font color="#CCCCCC"> the GW provider</font><font color="#E5E5E5"> just use that but</font>

768
00:39:30,859 --> 00:39:35,480
you<font color="#E5E5E5"> could also see pretty</font><font color="#CCCCCC"> much every</font>

769
00:39:32,690 --> 00:39:37,700
<font color="#E5E5E5">method</font><font color="#CCCCCC"> called instance creation and in</font>

770
00:39:35,480 --> 00:39:44,740
some cases even<font color="#E5E5E5"> the arguments sent to</font>

771
00:39:37,700 --> 00:39:49,089
the methods which is<font color="#E5E5E5"> pretty nice now</font>

772
00:39:44,740 --> 00:39:53,859
the things I've shown<font color="#E5E5E5"> are only relating</font>

773
00:39:49,090 --> 00:39:56,560
to W my providers and classes<font color="#CCCCCC"> developed</font>

774
00:39:53,860 --> 00:39:58,990
<font color="#E5E5E5">by Microsoft but you could write your</font>

775
00:39:56,560 --> 00:40:01,540
<font color="#E5E5E5">own W my providers as we've seen with</font>

776
00:39:58,990 --> 00:40:03,899
<font color="#CCCCCC">our malicious provider</font><font color="#E5E5E5"> ish thing and</font>

777
00:40:01,540 --> 00:40:07,029
vendors actually<font color="#E5E5E5"> use this functionality</font>

778
00:40:03,900 --> 00:40:09,130
<font color="#E5E5E5">so depending on your software</font><font color="#CCCCCC"> and your</font>

779
00:40:07,030 --> 00:40:11,950
hardware<font color="#CCCCCC"> you could have a</font><font color="#E5E5E5"> much larger</font>

780
00:40:09,130 --> 00:40:14,860
attack surface because<font color="#CCCCCC"> of people not</font>

781
00:40:11,950 --> 00:40:18,040
thinking thoroughly whether WMI

782
00:40:14,860 --> 00:40:20,740
providers<font color="#CCCCCC"> exposed</font><font color="#E5E5E5"> because if you can use</font>

783
00:40:18,040 --> 00:40:25,830
<font color="#E5E5E5">W my remotely you</font><font color="#CCCCCC"> can use all W my</font>

784
00:40:20,740 --> 00:40:30,640
<font color="#E5E5E5">classes remotely</font><font color="#CCCCCC"> such as this laptop</font><font color="#E5E5E5"> has</font>

785
00:40:25,830 --> 00:40:33,100
<font color="#E5E5E5">W my provider</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> its BIOS and I can</font>

786
00:40:30,640 --> 00:40:37,210
remotely change my bios password<font color="#E5E5E5"> and</font>

787
00:40:33,100 --> 00:40:40,299
then enable<font color="#E5E5E5"> it and restart my machine</font>

788
00:40:37,210 --> 00:40:43,540
<font color="#E5E5E5">making</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> pretty much a brick again</font><font color="#CCCCCC"> not</font>

789
00:40:40,300 --> 00:40:48,220
<font color="#E5E5E5">really useful but really annoying</font><font color="#CCCCCC"> and</font>

790
00:40:43,540 --> 00:40:49,509
<font color="#E5E5E5">you could probably use this and you</font>

791
00:40:48,220 --> 00:40:53,560
could<font color="#E5E5E5"> probably use lots of other</font>

792
00:40:49,510 --> 00:40:57,250
<font color="#CCCCCC">software vendors providers to do lots of</font>

793
00:40:53,560 --> 00:40:59,140
evil<font color="#CCCCCC"> and this is why you really need to</font>

794
00:40:57,250 --> 00:41:01,810
<font color="#CCCCCC">know what W my providers in classes</font>

795
00:40:59,140 --> 00:41:04,660
exist on your specific<font color="#E5E5E5"> machine and also</font>

796
00:41:01,810 --> 00:41:07,740
<font color="#E5E5E5">look at W my as a whole and</font><font color="#CCCCCC"> not just</font><font color="#E5E5E5"> at</font>

797
00:41:04,660 --> 00:41:13,480
specific at specific techniques used by

798
00:41:07,740 --> 00:41:17,250
<font color="#E5E5E5">one attacker or another so I've actually</font>

799
00:41:13,480 --> 00:41:19,860
written a<font color="#CCCCCC"> PLC tool which implements</font>

800
00:41:17,250 --> 00:41:22,000
everything but the stupid<font color="#E5E5E5"> BCD thing and</font>

801
00:41:19,860 --> 00:41:25,300
you could get it<font color="#CCCCCC"> at the cyber reason</font>

802
00:41:22,000 --> 00:41:29,590
github<font color="#CCCCCC"> and also if you want an article</font>

803
00:41:25,300 --> 00:41:31,810
version of<font color="#E5E5E5"> slides which provide a tiny</font>

804
00:41:29,590 --> 00:41:35,920
bit more<font color="#CCCCCC"> information</font><font color="#E5E5E5"> you can check out</font>

805
00:41:31,810 --> 00:41:38,950
this link<font color="#CCCCCC"> and of course</font><font color="#E5E5E5"> I keep posting</font>

806
00:41:35,920 --> 00:41:41,080
tiny offensive techniques<font color="#E5E5E5"> on my Twitter</font>

807
00:41:38,950 --> 00:41:45,629
so<font color="#E5E5E5"> if you're interested</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> just</font>

808
00:41:41,080 --> 00:41:45,630
follow<font color="#E5E5E5"> me thank</font><font color="#CCCCCC"> you</font>

809
00:41:51,299 --> 00:41:55,380
so questions

810
00:42:01,960 --> 00:42:04,960
right

811
00:42:05,520 --> 00:42:13,020
[Applause]

