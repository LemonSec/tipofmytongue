1
00:00:10,310 --> 00:00:13,580
welcome thank you<font color="#E5E5E5"> so much for coming</font>

2
00:00:12,020 --> 00:00:15,500
here<font color="#CCCCCC"> today I'll be talking</font><font color="#E5E5E5"> about invoke</font>

3
00:00:13,580 --> 00:00:18,619
<font color="#CCCCCC">da</font><font color="#E5E5E5"> sophistication techniques for</font><font color="#CCCCCC"> fin</font>

4
00:00:15,500 --> 00:00:20,689
style<font color="#CCCCCC"> das level command</font><font color="#E5E5E5"> obfuscation my</font>

5
00:00:18,619 --> 00:00:22,330
name is Daniel Bohannon<font color="#E5E5E5"> I work for</font>

6
00:00:20,689 --> 00:00:25,160
<font color="#E5E5E5">mandiant</font><font color="#CCCCCC"> fire</font><font color="#E5E5E5"> I out of Washington DC</font>

7
00:00:22,330 --> 00:00:28,339
<font color="#CCCCCC">super stoked to</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> here in</font><font color="#E5E5E5"> Paris</font><font color="#CCCCCC"> and</font>

8
00:00:25,160 --> 00:00:30,140
what I do my day job<font color="#E5E5E5"> was originally an</font>

9
00:00:28,340 --> 00:00:32,058
instant response<font color="#E5E5E5"> consulting and now I do</font>

10
00:00:30,140 --> 00:00:33,710
apply detection research which usually

11
00:00:32,058 --> 00:00:35,300
<font color="#E5E5E5">means tracking down</font><font color="#CCCCCC"> thread actors all</font>

12
00:00:33,710 --> 00:00:36,920
around the world<font color="#E5E5E5"> and then also causing</font>

13
00:00:35,300 --> 00:00:38,989
more troubles for us as<font color="#CCCCCC"> defenders</font><font color="#E5E5E5"> in</font>

14
00:00:36,920 --> 00:00:40,400
researching<font color="#E5E5E5"> office</font><font color="#CCCCCC"> keishon techniques to</font>

15
00:00:38,989 --> 00:00:42,709
better be able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> detect the things we</font>

16
00:00:40,400 --> 00:00:43,719
haven't<font color="#E5E5E5"> even seen before</font><font color="#CCCCCC"> I'm a few of</font>

17
00:00:42,710 --> 00:00:46,460
the projects I've worked on before

18
00:00:43,719 --> 00:00:47,870
<font color="#E5E5E5">include invoke obfuscation</font><font color="#CCCCCC"> an</font><font color="#E5E5E5"> invoke</font>

19
00:00:46,460 --> 00:00:50,120
<font color="#E5E5E5">cradle crafter office</font><font color="#CCCCCC"> Gatien for</font>

20
00:00:47,870 --> 00:00:52,040
<font color="#E5E5E5">PowerShell</font><font color="#CCCCCC"> a co-wrote revoke</font>

21
00:00:50,120 --> 00:00:53,780
confiscation for detecting office<font color="#E5E5E5"> gated</font>

22
00:00:52,040 --> 00:00:55,489
<font color="#E5E5E5">PowerShell I did that research with Lee</font>

23
00:00:53,780 --> 00:00:57,730
<font color="#CCCCCC">Holmes</font><font color="#E5E5E5"> from Microsoft and then we'll be</font>

24
00:00:55,489 --> 00:01:00,288
talking<font color="#CCCCCC"> about today invoked ossification</font>

25
00:00:57,730 --> 00:01:01,578
<font color="#E5E5E5">so a brief disclaimer</font><font color="#CCCCCC"> none of the stuff</font>

26
00:01:00,289 --> 00:01:04,160
I'm talking<font color="#CCCCCC"> about is outing any</font>

27
00:01:01,579 --> 00:01:05,780
particular client or<font color="#E5E5E5"> client group most</font>

28
00:01:04,160 --> 00:01:07,399
of the stuff<font color="#E5E5E5"> we'd never seen</font><font color="#CCCCCC"> before in</font>

29
00:01:05,780 --> 00:01:10,430
the wild before<font color="#E5E5E5"> I released this research</font>

30
00:01:07,399 --> 00:01:12,289
but<font color="#E5E5E5"> just a general disclaimer</font><font color="#CCCCCC"> so today</font>

31
00:01:10,430 --> 00:01:13,670
what I'm<font color="#E5E5E5"> gonna start with</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> kind of a</font>

32
00:01:12,289 --> 00:01:15,080
<font color="#CCCCCC">high-level</font><font color="#E5E5E5"> overview of a state of</font>

33
00:01:13,670 --> 00:01:16,520
obfuscation<font color="#CCCCCC"> and the way that we see it</font>

34
00:01:15,080 --> 00:01:17,960
being<font color="#E5E5E5"> played out</font><font color="#CCCCCC"> amongst threat actors</font>

35
00:01:16,520 --> 00:01:19,939
<font color="#E5E5E5">and then we're going to dive into three</font>

36
00:01:17,960 --> 00:01:22,580
case<font color="#CCCCCC"> studies that</font><font color="#E5E5E5"> really defines kind of</font>

37
00:01:19,939 --> 00:01:24,529
how I happened into this area<font color="#E5E5E5"> of</font>

38
00:01:22,580 --> 00:01:26,000
obfuscation research<font color="#E5E5E5"> over the past year</font>

39
00:01:24,530 --> 00:01:29,420
we're gonna<font color="#E5E5E5"> look at a couple different</font>

40
00:01:26,000 --> 00:01:30,799
<font color="#CCCCCC">areas of</font><font color="#E5E5E5"> command XE obfuscation</font><font color="#CCCCCC"> and then</font>

41
00:01:29,420 --> 00:01:32,689
we're gonna kind of put all those pieces

42
00:01:30,799 --> 00:01:36,560
<font color="#E5E5E5">together for some crazy payload</font><font color="#CCCCCC"> encoding</font>

43
00:01:32,689 --> 00:01:37,908
all with be wonderful cmd.exe<font color="#CCCCCC"> then we'll</font>

44
00:01:36,560 --> 00:01:39,860
do a demo<font color="#E5E5E5"> of the tool and then lastly</font>

45
00:01:37,909 --> 00:01:43,250
we'll look at detecting this kind of

46
00:01:39,860 --> 00:01:45,289
obfuscation<font color="#E5E5E5"> so first a state of office</font>

47
00:01:43,250 --> 00:01:47,600
keishon from the red team's perspective

48
00:01:45,290 --> 00:01:49,610
<font color="#CCCCCC">office keishon is great it's a cheap way</font>

49
00:01:47,600 --> 00:01:51,979
<font color="#CCCCCC">to evade a lot of rigid detection</font><font color="#E5E5E5"> you</font>

50
00:01:49,610 --> 00:01:54,110
don't have to change<font color="#E5E5E5"> the core of your</font>

51
00:01:51,979 --> 00:01:56,450
payload<font color="#E5E5E5"> if you're not being detected</font>

52
00:01:54,110 --> 00:01:58,759
based on heuristics but off<font color="#E5E5E5"> of syntax of</font>

53
00:01:56,450 --> 00:02:00,320
<font color="#E5E5E5">the payload or the command itself</font><font color="#CCCCCC"> then</font>

54
00:01:58,759 --> 00:02:02,240
<font color="#CCCCCC">office keishon is a great way to evade</font>

55
00:02:00,320 --> 00:02:04,189
those kinds of detection techniques and

56
00:02:02,240 --> 00:02:05,570
there's an office keishon framework for

57
00:02:04,189 --> 00:02:07,429
free for almost any language<font color="#E5E5E5"> you can</font>

58
00:02:05,570 --> 00:02:09,049
think<font color="#CCCCCC"> of</font><font color="#E5E5E5"> and even though I may</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> biased</font>

59
00:02:07,430 --> 00:02:11,450
<font color="#CCCCCC">I don't really see it</font><font color="#E5E5E5"> slowing down</font>

60
00:02:09,049 --> 00:02:13,100
<font color="#E5E5E5">anytime soon</font><font color="#CCCCCC"> when a blue team's</font>

61
00:02:11,450 --> 00:02:14,988
perspective<font color="#CCCCCC"> we've actually seen some</font>

62
00:02:13,100 --> 00:02:17,090
really significant improvements in

63
00:02:14,989 --> 00:02:18,950
visibility<font color="#E5E5E5"> from a defensive perspective</font>

64
00:02:17,090 --> 00:02:22,370
things like Microsoft's anti-malware

65
00:02:18,950 --> 00:02:23,510
<font color="#E5E5E5">scan interface</font><font color="#CCCCCC"> ET w which is event</font>

66
00:02:22,370 --> 00:02:24,110
tracing<font color="#E5E5E5"> for</font><font color="#CCCCCC"> Windows a lot of these</font>

67
00:02:23,510 --> 00:02:25,579
things<font color="#E5E5E5"> some</font>

68
00:02:24,110 --> 00:02:27,470
some have<font color="#CCCCCC"> been around for a long time</font>

69
00:02:25,580 --> 00:02:28,990
<font color="#E5E5E5">but it's giving defenders today more</font>

70
00:02:27,470 --> 00:02:32,359
visibility than<font color="#CCCCCC"> we had before</font>

71
00:02:28,990 --> 00:02:34,370
however attackers are you know they're

72
00:02:32,360 --> 00:02:36,950
not stopping<font color="#CCCCCC"> they're improving and</font>

73
00:02:34,370 --> 00:02:39,230
they're countering this in one of<font color="#CCCCCC"> a few</font>

74
00:02:36,950 --> 00:02:40,850
<font color="#E5E5E5">ways they could just choose softer</font>

75
00:02:39,230 --> 00:02:42,560
targets<font color="#E5E5E5"> say okay well that's great</font><font color="#CCCCCC"> that</font>

76
00:02:40,850 --> 00:02:44,150
<font color="#CCCCCC">you have</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> great</font><font color="#E5E5E5"> defensive visibility</font>

77
00:02:42,560 --> 00:02:46,160
<font color="#E5E5E5">we'll just go after this target in this</font>

78
00:02:44,150 --> 00:02:48,620
client<font color="#E5E5E5"> that doesn't or they're just</font>

79
00:02:46,160 --> 00:02:49,880
disabling this defensive visibility<font color="#E5E5E5"> or</font>

80
00:02:48,620 --> 00:02:51,830
they're<font color="#CCCCCC"> just going</font><font color="#E5E5E5"> around it and saying</font>

81
00:02:49,880 --> 00:02:54,049
okay<font color="#E5E5E5"> PowerShell has gotten incredible in</font>

82
00:02:51,830 --> 00:02:55,430
terms<font color="#E5E5E5"> of visibility and script lock and</font>

83
00:02:54,050 --> 00:02:58,340
module logging and all this<font color="#E5E5E5"> great stuff</font>

84
00:02:55,430 --> 00:03:00,770
<font color="#CCCCCC">so why</font><font color="#E5E5E5"> don't</font><font color="#CCCCCC"> we just use</font><font color="#E5E5E5"> JavaScript or C</font>

85
00:02:58,340 --> 00:03:02,480
sharp<font color="#CCCCCC"> or just crazy idea but maybe we'll</font>

86
00:03:00,770 --> 00:03:03,950
just compile our own<font color="#E5E5E5"> binary and drop it</font>

87
00:03:02,480 --> 00:03:05,320
on disk because<font color="#E5E5E5"> not many people are</font>

88
00:03:03,950 --> 00:03:07,160
<font color="#E5E5E5">actually doing application whitelisting</font>

89
00:03:05,320 --> 00:03:08,989
<font color="#CCCCCC">and so they can</font><font color="#E5E5E5"> just choose a language</font>

90
00:03:07,160 --> 00:03:10,310
<font color="#E5E5E5">that</font><font color="#CCCCCC"> doesn't have</font><font color="#E5E5E5"> this visibility so</font>

91
00:03:08,990 --> 00:03:11,690
with this talk today typically I've

92
00:03:10,310 --> 00:03:14,300
talked about PowerShell office<font color="#CCCCCC"> Gatien</font>

93
00:03:11,690 --> 00:03:17,030
<font color="#E5E5E5">but this is</font><font color="#CCCCCC"> completely about command XE</font>

94
00:03:14,300 --> 00:03:18,800
and a lot of detections<font color="#E5E5E5"> today are based</font>

95
00:03:17,030 --> 00:03:22,190
for command that<font color="#E5E5E5"> exe are based</font><font color="#CCCCCC"> primarily</font>

96
00:03:18,800 --> 00:03:24,650
on process called cmd.exe<font color="#CCCCCC"> and contains</font>

97
00:03:22,190 --> 00:03:27,079
arguments of<font color="#E5E5E5"> this or this or this other</font>

98
00:03:24,650 --> 00:03:29,180
things are like parent-child process

99
00:03:27,080 --> 00:03:31,400
relationship so maybe<font color="#E5E5E5"> Explorer spawning</font>

100
00:03:29,180 --> 00:03:32,959
command XE could be interesting but

101
00:03:31,400 --> 00:03:34,190
<font color="#CCCCCC">windward spawning</font><font color="#E5E5E5"> command XE is a bit</font>

102
00:03:32,959 --> 00:03:36,140
<font color="#E5E5E5">more interesting</font><font color="#CCCCCC"> and so</font><font color="#E5E5E5"> kind of the</font>

103
00:03:34,190 --> 00:03:38,150
context<font color="#E5E5E5"> around who is spawning the</font>

104
00:03:36,140 --> 00:03:39,920
process<font color="#E5E5E5"> and then also looking at command</font>

105
00:03:38,150 --> 00:03:42,230
<font color="#E5E5E5">XE is like a source of action command</font>

106
00:03:39,920 --> 00:03:44,450
modifying a registry key<font color="#CCCCCC"> directly or</font>

107
00:03:42,230 --> 00:03:47,720
writing a file or being from<font color="#CCCCCC"> a file or</font>

108
00:03:44,450 --> 00:03:50,149
<font color="#CCCCCC">something like</font><font color="#E5E5E5"> that so the case studies</font>

109
00:03:47,720 --> 00:03:52,190
<font color="#CCCCCC">that really</font><font color="#E5E5E5"> led me into this work my</font>

110
00:03:50,150 --> 00:03:54,140
manager Nick Carr he and I wrote this

111
00:03:52,190 --> 00:03:56,660
blog<font color="#CCCCCC"> post back at the very end</font><font color="#E5E5E5"> of June</font>

112
00:03:54,140 --> 00:03:58,369
last<font color="#E5E5E5"> year</font><font color="#CCCCCC"> and it highlights some</font>

113
00:03:56,660 --> 00:03:59,930
<font color="#E5E5E5">interesting in the wild obfuscation</font>

114
00:03:58,370 --> 00:04:01,670
techniques that we saw<font color="#CCCCCC"> used by three</font>

115
00:03:59,930 --> 00:04:03,920
different<font color="#E5E5E5"> threat groups Financial</font>

116
00:04:01,670 --> 00:04:06,079
Group's<font color="#CCCCCC"> fin 7 known as</font><font color="#E5E5E5"> carbon AK</font><font color="#CCCCCC"> fin 8</font>

117
00:04:03,920 --> 00:04:10,518
and then<font color="#CCCCCC"> apt 32 also known as</font><font color="#E5E5E5"> ocean</font>

118
00:04:06,080 --> 00:04:12,590
Lotus out of Vietnam so the first one is

119
00:04:10,519 --> 00:04:14,900
fin 8 and when fin<font color="#E5E5E5"> 8 there's some really</font>

120
00:04:12,590 --> 00:04:17,329
cool stuff<font color="#CCCCCC"> this</font><font color="#E5E5E5"> was actually an ad</font>

121
00:04:14,900 --> 00:04:19,160
<font color="#E5E5E5">office gated macro payload where they</font>

122
00:04:17,329 --> 00:04:20,539
were setting the very bottom<font color="#E5E5E5"> they have</font>

123
00:04:19,160 --> 00:04:22,280
this<font color="#E5E5E5"> PowerShell command they set into</font>

124
00:04:20,540 --> 00:04:24,620
one environment<font color="#E5E5E5"> variable and then they</font>

125
00:04:22,280 --> 00:04:26,000
had PowerShell - in another<font color="#CCCCCC"> environment</font>

126
00:04:24,620 --> 00:04:27,380
variable and then the actual command the

127
00:04:26,000 --> 00:04:29,090
only thing you saw spawn from<font color="#CCCCCC"> windward</font>

128
00:04:27,380 --> 00:04:32,270
was the very top command command slash

129
00:04:29,090 --> 00:04:33,799
the echo<font color="#E5E5E5"> var one pipe of r2 which is</font>

130
00:04:32,270 --> 00:04:35,930
piping the actual PowerShell command

131
00:04:33,800 --> 00:04:37,729
into PowerShell - which runs a child

132
00:04:35,930 --> 00:04:39,860
process<font color="#CCCCCC"> of</font><font color="#E5E5E5"> PowerShell invoking the</font>

133
00:04:37,729 --> 00:04:41,300
<font color="#E5E5E5">since</font><font color="#CCCCCC"> past</font><font color="#E5E5E5"> in a standard input which is</font>

134
00:04:39,860 --> 00:04:44,839
a great way to keep your payload<font color="#E5E5E5"> off the</font>

135
00:04:41,300 --> 00:04:46,729
command line<font color="#CCCCCC"> the next one was a t32 two</font>

136
00:04:44,839 --> 00:04:49,819
months later and they were using Casey

137
00:04:46,729 --> 00:04:52,188
Smith squiggly-doo<font color="#E5E5E5"> usage of red serve</font><font color="#CCCCCC"> 32</font>

138
00:04:49,819 --> 00:04:54,379
<font color="#CCCCCC">XE to download a remote SCT payload and</font>

139
00:04:52,189 --> 00:04:55,789
execute it<font color="#CCCCCC"> and so originally we saw them</font>

140
00:04:54,379 --> 00:04:56,809
using the command<font color="#E5E5E5"> the</font><font color="#CCCCCC"> X's caret</font>

141
00:04:55,789 --> 00:04:58,729
characters which<font color="#E5E5E5"> are the escape</font>

142
00:04:56,809 --> 00:05:02,210
characters<font color="#CCCCCC"> to break up detection</font><font color="#E5E5E5"> that</font>

143
00:04:58,729 --> 00:05:04,039
are looking<font color="#E5E5E5"> for</font><font color="#CCCCCC"> /i : HTTP but then we</font>

144
00:05:02,210 --> 00:05:05,688
saw them using the double quote<font color="#E5E5E5"> and this</font>

145
00:05:04,039 --> 00:05:07,188
is something I've tweeted<font color="#E5E5E5"> about a couple</font>

146
00:05:05,689 --> 00:05:09,979
times over<font color="#E5E5E5"> the past year</font><font color="#CCCCCC"> - that the</font>

147
00:05:07,189 --> 00:05:12,020
double quote is such a more<font color="#E5E5E5"> effective</font>

148
00:05:09,979 --> 00:05:13,789
<font color="#CCCCCC">efficient character than the caret for a</font>

149
00:05:12,020 --> 00:05:15,229
lot of reasons<font color="#CCCCCC"> and we'll see that a few</font>

150
00:05:13,789 --> 00:05:16,938
slides in but it was cool<font color="#CCCCCC"> to see</font><font color="#E5E5E5"> them</font>

151
00:05:15,229 --> 00:05:18,438
actually<font color="#E5E5E5"> use it and it didn't</font><font color="#CCCCCC"> just spray</font>

152
00:05:16,939 --> 00:05:20,270
<font color="#CCCCCC">it all over</font><font color="#E5E5E5"> the entire command you could</font>

153
00:05:18,439 --> 00:05:21,589
see they were<font color="#E5E5E5"> very intentional</font><font color="#CCCCCC"> about</font>

154
00:05:20,270 --> 00:05:23,628
where they put these obfuscation

155
00:05:21,589 --> 00:05:25,610
characters and so for me I really

156
00:05:23,629 --> 00:05:26,899
<font color="#CCCCCC">appreciate this because</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> actually</font>

157
00:05:25,610 --> 00:05:28,430
understand<font color="#E5E5E5"> the effort of what they are</font>

158
00:05:26,899 --> 00:05:30,469
<font color="#E5E5E5">trying</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> do so I kind of call this more</font>

159
00:05:28,430 --> 00:05:33,379
tasteful<font color="#E5E5E5"> office</font><font color="#CCCCCC"> Gatien as opposed to</font>

160
00:05:30,469 --> 00:05:34,969
just<font color="#E5E5E5"> like obfuscating everything and the</font>

161
00:05:33,379 --> 00:05:37,550
last one this this<font color="#E5E5E5"> one example</font>

162
00:05:34,969 --> 00:05:41,539
single-handedly started me down<font color="#E5E5E5"> the path</font>

163
00:05:37,550 --> 00:05:43,669
<font color="#E5E5E5">of this research so fin</font><font color="#CCCCCC"> 7 fin 7</font><font color="#E5E5E5"> and apt</font>

164
00:05:41,539 --> 00:05:45,050
<font color="#E5E5E5">32 they really compete for first place</font>

165
00:05:43,669 --> 00:05:46,909
<font color="#E5E5E5">in my heart when it comes to like</font><font color="#CCCCCC"> the</font>

166
00:05:45,050 --> 00:05:49,009
coolest<font color="#E5E5E5"> most tasteful obfuscation like</font>

167
00:05:46,909 --> 00:05:50,569
<font color="#CCCCCC">they're really</font><font color="#E5E5E5"> creative now and certain</font>

168
00:05:49,009 --> 00:05:52,279
this<font color="#CCCCCC"> pelo this is extracted from</font><font color="#E5E5E5"> a</font>

169
00:05:50,569 --> 00:05:55,849
malicious link file that was<font color="#E5E5E5"> dropped to</font>

170
00:05:52,279 --> 00:05:57,139
disk<font color="#CCCCCC"> and</font><font color="#E5E5E5"> so the two portions</font><font color="#CCCCCC"> they have</font>

171
00:05:55,849 --> 00:05:59,569
some<font color="#E5E5E5"> JavaScript encoding because they're</font>

172
00:05:57,139 --> 00:06:01,370
echoing out a JavaScript content to a

173
00:05:59,569 --> 00:06:03,080
file and so for<font color="#E5E5E5"> example instead of</font>

174
00:06:01,370 --> 00:06:05,330
<font color="#CCCCCC">having eval they had this nice</font><font color="#E5E5E5"> ASCII</font>

175
00:06:03,080 --> 00:06:07,359
conversion and then adding in VA and<font color="#CCCCCC"> l</font>

176
00:06:05,330 --> 00:06:09,909
but<font color="#E5E5E5"> the the two portions in the red box</font>

177
00:06:07,360 --> 00:06:12,349
<font color="#E5E5E5">when I saw this this really</font><font color="#CCCCCC"> confuse me</font>

178
00:06:09,909 --> 00:06:13,789
because I've<font color="#E5E5E5"> been digging around for a</font>

179
00:06:12,349 --> 00:06:16,550
<font color="#E5E5E5">while looking</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> interesting characters</font>

180
00:06:13,789 --> 00:06:18,199
like the double quote the the the carrot

181
00:06:16,550 --> 00:06:21,639
that<font color="#E5E5E5"> you can use and break up commands</font>

182
00:06:18,199 --> 00:06:24,229
<font color="#E5E5E5">but I didn't understand this this part</font>

183
00:06:21,639 --> 00:06:27,439
so this command is command slash<font color="#E5E5E5"> C and</font>

184
00:06:24,229 --> 00:06:29,300
then it's setting this process level

185
00:06:27,439 --> 00:06:30,979
<font color="#CCCCCC">environment variable X and it's setting</font>

186
00:06:29,300 --> 00:06:32,509
this<font color="#CCCCCC"> W script command in</font><font color="#E5E5E5"> that variable</font>

187
00:06:30,979 --> 00:06:34,279
<font color="#E5E5E5">then you have the part where it's</font>

188
00:06:32,509 --> 00:06:35,959
writing<font color="#E5E5E5"> out a file and then you have the</font>

189
00:06:34,279 --> 00:06:37,999
end where it's echoing<font color="#E5E5E5"> the variable X</font>

190
00:06:35,959 --> 00:06:39,649
<font color="#E5E5E5">into command since command can also</font>

191
00:06:37,999 --> 00:06:41,629
execute<font color="#CCCCCC"> what's passed in a standard</font>

192
00:06:39,649 --> 00:06:43,339
<font color="#E5E5E5">input but what I didn't understand</font><font color="#CCCCCC"> was</font>

193
00:06:41,629 --> 00:06:46,129
<font color="#E5E5E5">these</font><font color="#CCCCCC"> DES limiters they were using</font><font color="#E5E5E5"> I'd</font>

194
00:06:43,339 --> 00:06:47,779
never seen the<font color="#CCCCCC"> @ character and they put</font>

195
00:06:46,129 --> 00:06:49,189
<font color="#CCCCCC">that in W script and jscript</font>

196
00:06:47,779 --> 00:06:50,780
now if you copy and<font color="#CCCCCC"> paste</font><font color="#E5E5E5"> this command</font>

197
00:06:49,189 --> 00:06:52,639
that actually<font color="#E5E5E5"> doesn't work</font>

198
00:06:50,780 --> 00:06:54,950
those<font color="#CCCCCC"> @ signs don't function properly in</font>

199
00:06:52,639 --> 00:06:57,200
<font color="#CCCCCC">that context what I notice</font><font color="#E5E5E5"> was that</font><font color="#CCCCCC"> when</font>

200
00:06:54,950 --> 00:06:58,550
they called<font color="#CCCCCC"> percent</font><font color="#E5E5E5"> X at the end when</font>

201
00:06:57,200 --> 00:07:00,650
<font color="#CCCCCC">they did it was they</font><font color="#E5E5E5"> actually made space</font>

202
00:06:58,550 --> 00:07:02,780
after<font color="#E5E5E5"> the variable name and then they</font>

203
00:07:00,650 --> 00:07:04,039
put in<font color="#E5E5E5"> this syntax right here and what</font>

204
00:07:02,780 --> 00:07:05,869
this<font color="#E5E5E5"> does is this is</font><font color="#CCCCCC"> a string</font>

205
00:07:04,040 --> 00:07:07,940
replacement syntax native to command<font color="#CCCCCC"> not</font>

206
00:07:05,870 --> 00:07:09,650
<font color="#CCCCCC">EXCI</font><font color="#E5E5E5"> so you have the colon after the</font>

207
00:07:07,940 --> 00:07:11,719
variable name and then the string

208
00:07:09,650 --> 00:07:13,460
leading up to the equal sign it finds

209
00:07:11,720 --> 00:07:15,470
<font color="#E5E5E5">and replaces every instance of</font><font color="#CCCCCC"> that</font>

210
00:07:13,460 --> 00:07:17,030
string<font color="#E5E5E5"> with whatever's on the right side</font>

211
00:07:15,470 --> 00:07:18,350
of the equal sign<font color="#CCCCCC"> and in this case</font>

212
00:07:17,030 --> 00:07:20,388
there's nothing<font color="#CCCCCC"> on the</font><font color="#E5E5E5"> right side so</font>

213
00:07:18,350 --> 00:07:22,400
<font color="#CCCCCC">what it's saying</font><font color="#E5E5E5"> is yes I know that this</font>

214
00:07:20,389 --> 00:07:25,120
variable<font color="#E5E5E5"> contains these characters but</font>

215
00:07:22,400 --> 00:07:27,310
in memory<font color="#CCCCCC"> I want you to remove</font><font color="#E5E5E5"> them</font>

216
00:07:25,120 --> 00:07:32,419
<font color="#E5E5E5">before I act on the variable</font>

217
00:07:27,310 --> 00:07:33,800
now what finesse<font color="#CCCCCC"> holy cow when I when I</font>

218
00:07:32,419 --> 00:07:35,090
figured this out and<font color="#E5E5E5"> they sue me about a</font>

219
00:07:33,800 --> 00:07:37,820
day<font color="#E5E5E5"> of just looking at</font><font color="#CCCCCC"> trying to figure</font>

220
00:07:35,090 --> 00:07:40,880
what's<font color="#E5E5E5"> going on here</font><font color="#CCCCCC"> I was so blown away</font>

221
00:07:37,820 --> 00:07:42,110
by how cool this was so<font color="#CCCCCC"> Oh</font><font color="#E5E5E5"> the timeline</font>

222
00:07:40,880 --> 00:07:44,030
of<font color="#CCCCCC"> this is we</font><font color="#E5E5E5"> found this payload on a</font>

223
00:07:42,110 --> 00:07:45,919
Wednesday<font color="#E5E5E5"> we figured it out</font><font color="#CCCCCC"> that</font>

224
00:07:44,030 --> 00:07:47,780
<font color="#E5E5E5">Thursday</font><font color="#CCCCCC"> me and Nick wrote this blog</font>

225
00:07:45,919 --> 00:07:49,580
<font color="#CCCCCC">post I got it published</font><font color="#E5E5E5"> on a Friday I</font>

226
00:07:47,780 --> 00:07:51,409
was still so jazzed about that technique

227
00:07:49,580 --> 00:07:53,090
that I<font color="#CCCCCC"> was like I</font><font color="#E5E5E5"> wanna write a POC</font>

228
00:07:51,410 --> 00:07:55,130
about this<font color="#CCCCCC"> I went</font><font color="#E5E5E5"> home and</font><font color="#CCCCCC"> spent all</font>

229
00:07:53,090 --> 00:07:57,890
weekend and I pushed this POC called out

230
00:07:55,130 --> 00:08:00,740
<font color="#CCCCCC">fin coded command like fin style encoded</font>

231
00:07:57,890 --> 00:08:02,360
<font color="#E5E5E5">and and I pushed it out and then as soon</font>

232
00:08:00,740 --> 00:08:04,850
as<font color="#CCCCCC"> I did</font><font color="#E5E5E5"> I kind of sat back and thought</font>

233
00:08:02,360 --> 00:08:06,890
<font color="#E5E5E5">I wonder</font><font color="#CCCCCC"> if there's more here</font><font color="#E5E5E5"> like this</font>

234
00:08:04,850 --> 00:08:08,510
<font color="#E5E5E5">is just one</font><font color="#CCCCCC"> character but how long has</font>

235
00:08:06,890 --> 00:08:10,820
this been available in command<font color="#E5E5E5"> XE and I</font>

236
00:08:08,510 --> 00:08:12,140
never knew it like<font color="#E5E5E5"> I wonder what else</font>

237
00:08:10,820 --> 00:08:14,000
<font color="#E5E5E5">could</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> there is this worthy of</font>

238
00:08:12,140 --> 00:08:16,490
actually some significant<font color="#E5E5E5"> research time</font>

239
00:08:14,000 --> 00:08:18,560
and after about a week of initial

240
00:08:16,490 --> 00:08:20,900
research<font color="#CCCCCC"> I realized I was hooked</font><font color="#E5E5E5"> and</font>

241
00:08:18,560 --> 00:08:22,370
there was a lot here<font color="#E5E5E5"> to uncover so two</font>

242
00:08:20,900 --> 00:08:24,140
defenders I would say this<font color="#E5E5E5"> has</font><font color="#CCCCCC"> some</font>

243
00:08:22,370 --> 00:08:26,150
pretty<font color="#E5E5E5"> interesting implications both for</font>

244
00:08:24,140 --> 00:08:28,250
<font color="#E5E5E5">dynamic detection looking for like</font>

245
00:08:26,150 --> 00:08:30,080
command arguments like upon process

246
00:08:28,250 --> 00:08:32,360
execution<font color="#E5E5E5"> or even those artifacts in</font>

247
00:08:30,080 --> 00:08:35,659
like your system on Eid<font color="#E5E5E5"> one or security</font>

248
00:08:32,360 --> 00:08:37,130
ID<font color="#CCCCCC"> forty 688</font><font color="#E5E5E5"> process execution logs but</font>

249
00:08:35,659 --> 00:08:38,718
it also has<font color="#CCCCCC"> implications for static</font>

250
00:08:37,130 --> 00:08:40,669
detections as well looking<font color="#E5E5E5"> for these</font>

251
00:08:38,719 --> 00:08:43,339
payloads in the registry run keys or in

252
00:08:40,669 --> 00:08:45,579
service<font color="#E5E5E5"> image</font><font color="#CCCCCC"> paths or even in like</font>

253
00:08:43,339 --> 00:08:48,350
batch files or other sources<font color="#E5E5E5"> like that</font>

254
00:08:45,580 --> 00:08:50,180
so what we're gonna do<font color="#E5E5E5"> by the end</font><font color="#CCCCCC"> of</font>

255
00:08:48,350 --> 00:08:51,680
this talk<font color="#CCCCCC"> is you'll have</font><font color="#E5E5E5"> mechanisms in</font>

256
00:08:50,180 --> 00:08:53,780
which you can<font color="#E5E5E5"> take any</font><font color="#CCCCCC"> input</font><font color="#E5E5E5"> in the</font>

257
00:08:51,680 --> 00:08:56,569
arbitrary<font color="#CCCCCC"> input command</font><font color="#E5E5E5"> and it's hard to</font>

258
00:08:53,780 --> 00:08:58,370
add layer upon layer<font color="#E5E5E5"> of obfuscation</font><font color="#CCCCCC"> and</font>

259
00:08:56,570 --> 00:09:01,490
<font color="#CCCCCC">get something like this that still</font><font color="#E5E5E5"> works</font>

260
00:08:58,370 --> 00:09:03,170
perfectly<font color="#E5E5E5"> fine</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> hang on tight we're</font>

261
00:09:01,490 --> 00:09:04,339
gonna move really fast<font color="#CCCCCC"> all these slides</font>

262
00:09:03,170 --> 00:09:06,229
are online<font color="#E5E5E5"> there's</font>

263
00:09:04,339 --> 00:09:07,819
also a<font color="#E5E5E5"> 36 page white paper that</font><font color="#CCCCCC"> I put</font>

264
00:09:06,230 --> 00:09:10,279
together with<font color="#CCCCCC"> all this on</font><font color="#E5E5E5"> there it's</font>

265
00:09:07,819 --> 00:09:11,839
<font color="#E5E5E5">basically these slides -</font><font color="#CCCCCC"> the fun memes</font>

266
00:09:10,279 --> 00:09:13,819
<font color="#E5E5E5">so there was some kind</font><font color="#CCCCCC"> of give or take</font>

267
00:09:11,839 --> 00:09:14,749
<font color="#CCCCCC">but all the information is there and</font>

268
00:09:13,819 --> 00:09:16,639
<font color="#E5E5E5">what we're gonna do is we're gonna look</font>

269
00:09:14,749 --> 00:09:18,290
<font color="#E5E5E5">at all these building blocks and we're</font>

270
00:09:16,639 --> 00:09:20,569
gonna stack them all<font color="#E5E5E5"> on one another and</font>

271
00:09:18,290 --> 00:09:25,248
at the end be able to do crazy<font color="#E5E5E5"> encoding</font>

272
00:09:20,569 --> 00:09:27,378
using<font color="#E5E5E5"> just command XE so first let's</font>

273
00:09:25,249 --> 00:09:29,420
look<font color="#CCCCCC"> at</font><font color="#E5E5E5"> binary</font><font color="#CCCCCC"> name alpha station</font><font color="#E5E5E5"> this</font>

274
00:09:27,379 --> 00:09:30,800
<font color="#E5E5E5">will be brief a lot of defenders look</font>

275
00:09:29,420 --> 00:09:33,860
for they write rules that say the

276
00:09:30,800 --> 00:09:37,790
process<font color="#CCCCCC"> name is command</font><font color="#E5E5E5"> XE and blah blah</font>

277
00:09:33,860 --> 00:09:39,529
<font color="#E5E5E5">blah</font><font color="#CCCCCC"> well some attackers like</font><font color="#E5E5E5"> to just</font>

278
00:09:37,790 --> 00:09:42,319
rename binaries<font color="#E5E5E5"> so if they rename</font>

279
00:09:39,529 --> 00:09:43,759
command<font color="#E5E5E5"> exit</font><font color="#CCCCCC"> to benign XE then you just</font>

280
00:09:42,319 --> 00:09:45,229
you lost all your rules unless you're

281
00:09:43,759 --> 00:09:47,029
looking<font color="#E5E5E5"> and through some other means</font>

282
00:09:45,230 --> 00:09:48,019
looking at<font color="#CCCCCC"> a header information to see</font>

283
00:09:47,029 --> 00:09:50,569
<font color="#E5E5E5">this is actually still the original</font>

284
00:09:48,019 --> 00:09:51,740
<font color="#E5E5E5">filename is command XE and there's also</font>

285
00:09:50,569 --> 00:09:53,779
<font color="#E5E5E5">command but that's not what we're</font>

286
00:09:51,740 --> 00:09:56,509
talking<font color="#CCCCCC"> about there's</font><font color="#E5E5E5"> also command XE</font>

287
00:09:53,779 --> 00:09:58,550
substitutes like<font color="#CCCCCC"> pca lua</font><font color="#E5E5E5"> for file script</font>

288
00:09:56,509 --> 00:10:00,949
runner<font color="#E5E5E5"> some are</font><font color="#CCCCCC"> wint in only but</font>

289
00:09:58,550 --> 00:10:03,920
basically there's a good list going<font color="#E5E5E5"> here</font>

290
00:10:00,949 --> 00:10:05,689
kind<font color="#E5E5E5"> of the the new term now is law bins</font>

291
00:10:03,920 --> 00:10:07,639
<font color="#CCCCCC">i guess of</font><font color="#E5E5E5"> LOL living off the land</font>

292
00:10:05,689 --> 00:10:08,599
binaries but<font color="#E5E5E5"> basically other things you</font>

293
00:10:07,639 --> 00:10:10,009
should<font color="#CCCCCC"> look for so if you're only</font>

294
00:10:08,600 --> 00:10:11,779
<font color="#E5E5E5">looking for windward spawning</font><font color="#CCCCCC"> command</font>

295
00:10:10,009 --> 00:10:13,490
<font color="#CCCCCC">what if one word spawns for files and</font>

296
00:10:11,779 --> 00:10:14,839
<font color="#E5E5E5">then something else like we need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be</font>

297
00:10:13,490 --> 00:10:16,189
<font color="#E5E5E5">aware of these additional binaries as</font>

298
00:10:14,839 --> 00:10:18,379
well but that's also<font color="#E5E5E5"> not what i'm</font>

299
00:10:16,189 --> 00:10:20,360
<font color="#CCCCCC">talking about i'm talking about from a</font>

300
00:10:18,379 --> 00:10:23,089
command argument perspective what<font color="#CCCCCC"> are</font>

301
00:10:20,360 --> 00:10:26,240
pure syntactical ways that we can have a

302
00:10:23,089 --> 00:10:27,559
binary name like<font color="#E5E5E5"> powershell and command</font>

303
00:10:26,240 --> 00:10:29,569
those are the two examples<font color="#E5E5E5"> we'll look at</font>

304
00:10:27,559 --> 00:10:32,689
here<font color="#E5E5E5"> so one way you can do this is using</font>

305
00:10:29,569 --> 00:10:34,998
<font color="#CCCCCC">environment variable substrings</font><font color="#E5E5E5"> so for</font>

306
00:10:32,689 --> 00:10:37,550
example to get the string CMD if we echo

307
00:10:34,999 --> 00:10:38,959
<font color="#E5E5E5">program data assuming that c drive is</font>

308
00:10:37,550 --> 00:10:40,939
your home drive which is<font color="#E5E5E5"> an assumption</font>

309
00:10:38,959 --> 00:10:43,128
not every system is like<font color="#E5E5E5"> that we can say</font>

310
00:10:40,939 --> 00:10:45,259
let me<font color="#E5E5E5"> take the substring of</font><font color="#CCCCCC"> 0 index and</font>

311
00:10:43,129 --> 00:10:47,809
go forward<font color="#CCCCCC"> 1 and then index 9 and go for</font>

312
00:10:45,259 --> 00:10:49,610
<font color="#E5E5E5">2 and that will be CMD and now if we run</font>

313
00:10:47,809 --> 00:10:51,079
<font color="#CCCCCC">that on</font><font color="#E5E5E5"> the command line it reassembles</font>

314
00:10:49,610 --> 00:10:53,529
it and that's what the command is and

315
00:10:51,079 --> 00:10:55,729
the bottom example<font color="#CCCCCC"> is</font><font color="#E5E5E5"> using powershell</font>

316
00:10:53,529 --> 00:10:57,980
now what's important here is<font color="#CCCCCC"> that if you</font>

317
00:10:55,730 --> 00:10:58,939
<font color="#CCCCCC">copy</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> paste this into command</font><font color="#E5E5E5"> XE when</font>

318
00:10:57,980 --> 00:11:00,319
you look at the logs

319
00:10:58,939 --> 00:11:01,660
none of this obfuscation are still

320
00:11:00,319 --> 00:11:04,040
present<font color="#E5E5E5"> because it's an existing</font>

321
00:11:01,660 --> 00:11:05,480
<font color="#E5E5E5">environment variable so if you want to</font>

322
00:11:04,040 --> 00:11:06,949
get the real value<font color="#CCCCCC"> out of this</font><font color="#E5E5E5"> you have</font>

323
00:11:05,480 --> 00:11:08,540
to<font color="#CCCCCC"> use</font><font color="#E5E5E5"> non existing environment</font>

324
00:11:06,949 --> 00:11:09,979
variables because they don't resolve the

325
00:11:08,540 --> 00:11:12,980
same way in the command<font color="#CCCCCC"> line in certain</font>

326
00:11:09,980 --> 00:11:14,990
<font color="#E5E5E5">contexts but we'll get to that</font><font color="#CCCCCC"> but an</font>

327
00:11:12,980 --> 00:11:16,429
<font color="#E5E5E5">interesting way</font><font color="#CCCCCC"> i was</font><font color="#E5E5E5"> trying to</font><font color="#CCCCCC"> figure</font>

328
00:11:14,990 --> 00:11:18,220
out<font color="#E5E5E5"> well</font><font color="#CCCCCC"> how can</font><font color="#E5E5E5"> i how can</font><font color="#CCCCCC"> I have an</font>

329
00:11:16,429 --> 00:11:19,420
obfuscated version of these<font color="#E5E5E5"> binary</font><font color="#CCCCCC"> name</font>

330
00:11:18,220 --> 00:11:21,850
but not have it<font color="#E5E5E5"> resolved in the command</font>

331
00:11:19,420 --> 00:11:23,050
line<font color="#E5E5E5"> so what I came down to</font><font color="#CCCCCC"> were three</font>

332
00:11:21,850 --> 00:11:25,600
<font color="#E5E5E5">internal</font><font color="#CCCCCC"> commands</font>

333
00:11:23,050 --> 00:11:26,829
<font color="#E5E5E5">set</font><font color="#CCCCCC"> esos and f-type set will show you</font>

334
00:11:25,600 --> 00:11:28,720
all<font color="#E5E5E5"> the environment variables and their</font>

335
00:11:26,830 --> 00:11:30,730
values<font color="#E5E5E5"> Assos and</font><font color="#CCCCCC"> F type are actually</font>

336
00:11:28,720 --> 00:11:33,370
related<font color="#E5E5E5"> Assos</font><font color="#CCCCCC"> shows the association</font>

337
00:11:30,730 --> 00:11:34,450
between<font color="#E5E5E5"> an extension and then the type</font>

338
00:11:33,370 --> 00:11:39,850
of application<font color="#CCCCCC"> that goes</font><font color="#E5E5E5"> with that</font>

339
00:11:34,450 --> 00:11:42,370
<font color="#E5E5E5">extension</font><font color="#CCCCCC"> so like a CCDA is access and</font>

340
00:11:39,850 --> 00:11:44,500
then<font color="#E5E5E5"> f-type takes that association type</font>

341
00:11:42,370 --> 00:11:46,300
with<font color="#CCCCCC"> the binary and</font><font color="#E5E5E5"> arguments to</font>

342
00:11:44,500 --> 00:11:47,590
actually<font color="#E5E5E5"> run it but the reason that I</font>

343
00:11:46,300 --> 00:11:48,880
came down<font color="#E5E5E5"> to these</font><font color="#CCCCCC"> were their internal</font>

344
00:11:47,590 --> 00:11:50,620
commands so it's not spawning another

345
00:11:48,880 --> 00:11:51,610
process<font color="#E5E5E5"> but somewhere in the payload</font>

346
00:11:50,620 --> 00:11:54,460
you'll actually find<font color="#E5E5E5"> the string</font>

347
00:11:51,610 --> 00:11:56,260
<font color="#CCCCCC">powershell or CMD in</font><font color="#E5E5E5"> the text output so</font>

348
00:11:54,460 --> 00:11:57,970
let's just<font color="#E5E5E5"> use set as an example</font><font color="#CCCCCC"> if we</font>

349
00:11:56,260 --> 00:11:59,620
run set and grep or a fine string for

350
00:11:57,970 --> 00:12:01,540
<font color="#CCCCCC">powershell we'll see we find the string</font>

351
00:11:59,620 --> 00:12:03,790
powershell in the<font color="#E5E5E5"> path and PS module</font>

352
00:12:01,540 --> 00:12:04,870
path variable<font color="#E5E5E5"> people's path for roles</font>

353
00:12:03,790 --> 00:12:06,310
are probably gonna<font color="#CCCCCC"> be different</font><font color="#E5E5E5"> on each</font>

354
00:12:04,870 --> 00:12:07,600
<font color="#E5E5E5">system so let's actually go with PS</font>

355
00:12:06,310 --> 00:12:09,489
module path it should<font color="#CCCCCC"> be a little</font><font color="#E5E5E5"> more</font>

356
00:12:07,600 --> 00:12:10,990
<font color="#CCCCCC">consistent</font><font color="#E5E5E5"> and this screenshot</font><font color="#CCCCCC"> on the</font>

357
00:12:09,490 --> 00:12:13,120
bottom is actually<font color="#E5E5E5"> a snippet</font><font color="#CCCCCC"> for my code</font>

358
00:12:10,990 --> 00:12:14,530
<font color="#CCCCCC">so whenever I write</font><font color="#E5E5E5"> office</font><font color="#CCCCCC"> keishon</font>

359
00:12:13,120 --> 00:12:16,240
frameworks for fuzzing<font color="#CCCCCC"> and things like</font>

360
00:12:14,530 --> 00:12:18,310
<font color="#E5E5E5">this I like to take a lot of</font><font color="#CCCCCC"> options so</font>

361
00:12:16,240 --> 00:12:20,080
<font color="#CCCCCC">that you never get the same option</font><font color="#E5E5E5"> every</font>

362
00:12:18,310 --> 00:12:21,790
<font color="#CCCCCC">time you're on the tool</font><font color="#E5E5E5"> so all these sub</font>

363
00:12:20,080 --> 00:12:23,620
strings<font color="#E5E5E5"> if you actually put</font><font color="#CCCCCC"> that in with</font>

364
00:12:21,790 --> 00:12:26,800
fine string it<font color="#E5E5E5"> will return PS module</font>

365
00:12:23,620 --> 00:12:28,750
path so now when<font color="#E5E5E5"> we return this this is</font>

366
00:12:26,800 --> 00:12:31,630
the value<font color="#CCCCCC"> we</font><font color="#E5E5E5"> get here the the path to</font>

367
00:12:28,750 --> 00:12:33,160
the PS modules<font color="#E5E5E5"> and what we want to do is</font>

368
00:12:31,630 --> 00:12:34,600
actually figure<font color="#E5E5E5"> out what</font><font color="#CCCCCC"> delimiter czar</font>

369
00:12:33,160 --> 00:12:37,390
on each side<font color="#CCCCCC"> of</font><font color="#E5E5E5"> PowerShell so we can</font>

370
00:12:34,600 --> 00:12:39,460
just<font color="#E5E5E5"> like lift those values out so the</font>

371
00:12:37,390 --> 00:12:40,930
<font color="#E5E5E5">lowercase s and the backslash are the</font>

372
00:12:39,460 --> 00:12:43,720
delimiting characters around<font color="#E5E5E5"> each</font>

373
00:12:40,930 --> 00:12:44,620
instance<font color="#E5E5E5"> of PowerShell so if we doing</font>

374
00:12:43,720 --> 00:12:47,110
that on those characters<font color="#CCCCCC"> that actually</font>

375
00:12:44,620 --> 00:12:48,700
<font color="#E5E5E5">breaks up this string into 13 pieces but</font>

376
00:12:47,110 --> 00:12:51,640
we're<font color="#CCCCCC"> interested in piece number 4 and</font>

377
00:12:48,700 --> 00:12:53,980
number<font color="#E5E5E5"> 11 which is</font><font color="#CCCCCC"> PowerShell so the way</font>

378
00:12:51,640 --> 00:12:55,720
<font color="#CCCCCC">that we can do this</font><font color="#E5E5E5"> was command</font><font color="#CCCCCC"> XE is to</font>

379
00:12:53,980 --> 00:12:57,550
run a command and to<font color="#E5E5E5"> capture the</font><font color="#CCCCCC"> output</font>

380
00:12:55,720 --> 00:12:59,410
into<font color="#CCCCCC"> a variable</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> use</font><font color="#E5E5E5"> the for loop</font><font color="#CCCCCC"> and</font>

381
00:12:57,550 --> 00:13:01,479
the for<font color="#CCCCCC"> loop will let us run in the end</font>

382
00:12:59,410 --> 00:13:03,459
<font color="#E5E5E5">are set fine string PSM to get that</font>

383
00:13:01,480 --> 00:13:04,810
<font color="#CCCCCC">output</font><font color="#E5E5E5"> and then what we'll do is we'll</font>

384
00:13:03,460 --> 00:13:06,130
define<font color="#CCCCCC"> de limiters within the for loop</font>

385
00:13:04,810 --> 00:13:08,109
<font color="#E5E5E5">because</font><font color="#CCCCCC"> it gives us that option and</font>

386
00:13:06,130 --> 00:13:09,939
<font color="#E5E5E5">we'll say the</font><font color="#CCCCCC"> lower case asks backslash</font>

387
00:13:08,110 --> 00:13:11,680
delimiters and we want index number<font color="#CCCCCC"> 4</font>

388
00:13:09,940 --> 00:13:13,810
and when we do that<font color="#CCCCCC"> we'll see that it</font>

389
00:13:11,680 --> 00:13:16,270
pops<font color="#E5E5E5"> out the string</font><font color="#CCCCCC"> powershell</font><font color="#E5E5E5"> and we</font>

390
00:13:13,810 --> 00:13:18,280
execute what comes out of<font color="#CCCCCC"> that result</font><font color="#E5E5E5"> so</font>

391
00:13:16,270 --> 00:13:19,720
<font color="#E5E5E5">now on the command line</font><font color="#CCCCCC"> for the initial</font>

392
00:13:18,280 --> 00:13:21,579
command power shells and nowhere to<font color="#CCCCCC"> be</font>

393
00:13:19,720 --> 00:13:23,410
found<font color="#CCCCCC"> but</font><font color="#E5E5E5"> it actually pulls it out of</font>

394
00:13:21,580 --> 00:13:25,450
<font color="#E5E5E5">memory based on this for loop and the</font>

395
00:13:23,410 --> 00:13:27,760
delimiter<font color="#CCCCCC"> that come out of</font><font color="#E5E5E5"> it now in</font>

396
00:13:25,450 --> 00:13:29,380
this<font color="#E5E5E5"> example well obviously</font><font color="#CCCCCC"> PowerShell</font>

397
00:13:27,760 --> 00:13:31,160
is going to be the child process<font color="#CCCCCC"> so you</font>

398
00:13:29,380 --> 00:13:32,569
will see PowerShell<font color="#E5E5E5"> in that regard</font>

399
00:13:31,160 --> 00:13:34,430
what if your command actually<font color="#E5E5E5"> isn't a</font>

400
00:13:32,569 --> 00:13:36,649
separate binary this actually opens<font color="#CCCCCC"> up</font>

401
00:13:34,430 --> 00:13:38,029
some really<font color="#CCCCCC"> interesting opportunities so</font>

402
00:13:36,649 --> 00:13:39,560
let's keep going<font color="#E5E5E5"> that was just ways to</font>

403
00:13:38,029 --> 00:13:41,720
obfuscate<font color="#CCCCCC"> the binary name and this</font><font color="#E5E5E5"> this</font>

404
00:13:39,560 --> 00:13:43,670
<font color="#E5E5E5">is important if</font><font color="#CCCCCC"> you say are looking for</font>

405
00:13:41,720 --> 00:13:45,560
registry run keys that have<font color="#E5E5E5"> the string</font>

406
00:13:43,670 --> 00:13:47,839
<font color="#CCCCCC">PowerShell in it</font><font color="#E5E5E5"> well in this case it's</font>

407
00:13:45,560 --> 00:13:49,219
nowhere<font color="#E5E5E5"> to be found there right so it</font>

408
00:13:47,839 --> 00:13:51,170
has a bit more<font color="#E5E5E5"> implications for static</font>

409
00:13:49,220 --> 00:13:53,089
detections<font color="#E5E5E5"> but still implications for</font>

410
00:13:51,170 --> 00:13:54,709
dynamic so a<font color="#E5E5E5"> character insertion</font>

411
00:13:53,089 --> 00:13:56,240
obfuscation<font color="#CCCCCC"> what are characters that you</font>

412
00:13:54,709 --> 00:13:58,008
can<font color="#E5E5E5"> put</font><font color="#CCCCCC"> all over the</font><font color="#E5E5E5"> place for command</font>

413
00:13:56,240 --> 00:13:59,389
<font color="#CCCCCC">exit and really mess up detection x'</font>

414
00:13:58,009 --> 00:14:00,829
well the<font color="#E5E5E5"> caret character is the most</font>

415
00:13:59,389 --> 00:14:02,120
common one that we<font color="#CCCCCC"> see attackers use</font>

416
00:14:00,829 --> 00:14:04,310
which is the<font color="#CCCCCC"> escape character</font><font color="#E5E5E5"> for</font>

417
00:14:02,120 --> 00:14:06,680
command<font color="#E5E5E5"> XE so if you escape something</font>

418
00:14:04,310 --> 00:14:07,729
that has no escapable meaning then it

419
00:14:06,680 --> 00:14:10,128
does<font color="#CCCCCC"> nothing in the command runs</font>

420
00:14:07,730 --> 00:14:11,990
perfectly fine we saw<font color="#CCCCCC"> a PT thirty-two</font>

421
00:14:10,129 --> 00:14:13,339
using the double quote characters which

422
00:14:11,990 --> 00:14:15,649
<font color="#E5E5E5">are even better</font><font color="#CCCCCC"> because you</font><font color="#E5E5E5"> don't have</font>

423
00:14:13,339 --> 00:14:17,360
like<font color="#CCCCCC"> half-life if you use the caret</font>

424
00:14:15,649 --> 00:14:19,639
escape characters then you lose one set

425
00:14:17,360 --> 00:14:21,529
of escapes or like one layer of escaping

426
00:14:19,639 --> 00:14:23,990
every child process but with double

427
00:14:21,529 --> 00:14:25,310
quotes they go all<font color="#E5E5E5"> the way down and they</font>

428
00:14:23,990 --> 00:14:26,689
even go<font color="#E5E5E5"> down in the processes that</font>

429
00:14:25,310 --> 00:14:28,638
wouldn't normally process the double

430
00:14:26,689 --> 00:14:30,550
quote but since<font color="#E5E5E5"> command</font><font color="#CCCCCC"> x</font><font color="#E5E5E5"> is the parent</font>

431
00:14:28,639 --> 00:14:33,410
process<font color="#E5E5E5"> you're good to go</font>

432
00:14:30,550 --> 00:14:35,060
encapsulating<font color="#E5E5E5"> parentheses so I first saw</font>

433
00:14:33,410 --> 00:14:36,920
this while investigating<font color="#E5E5E5"> some newscaster</font>

434
00:14:35,060 --> 00:14:38,569
activity and I don't<font color="#CCCCCC"> think they were</font>

435
00:14:36,920 --> 00:14:40,069
using<font color="#E5E5E5"> it for obfuscation purposes but</font>

436
00:14:38,569 --> 00:14:42,380
<font color="#E5E5E5">basically you can</font><font color="#CCCCCC"> put</font><font color="#E5E5E5"> any</font><font color="#CCCCCC"> amount of</font>

437
00:14:40,069 --> 00:14:43,939
evenly<font color="#E5E5E5"> paired</font><font color="#CCCCCC"> parentheses</font><font color="#E5E5E5"> around</font>

438
00:14:42,380 --> 00:14:46,009
commands<font color="#E5E5E5"> and certain sub commands as</font>

439
00:14:43,939 --> 00:14:47,420
<font color="#CCCCCC">well</font><font color="#E5E5E5"> and this will come into play if you</font>

440
00:14:46,009 --> 00:14:49,670
have<font color="#CCCCCC"> the Texans looking for</font><font color="#E5E5E5"> like and</font>

441
00:14:47,420 --> 00:14:51,410
adored commands<font color="#E5E5E5"> that assume there's only</font>

442
00:14:49,670 --> 00:14:52,849
going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be white space between those</font>

443
00:14:51,410 --> 00:14:54,560
ands and ORS and<font color="#E5E5E5"> the next</font><font color="#CCCCCC"> pieces of the</font>

444
00:14:52,850 --> 00:14:56,870
command<font color="#E5E5E5"> but now you have</font><font color="#CCCCCC"> to factor in</font>

445
00:14:54,560 --> 00:14:58,910
parentheses as well and it actually<font color="#E5E5E5"> gets</font>

446
00:14:56,870 --> 00:15:00,589
worse<font color="#CCCCCC"> so when I</font><font color="#E5E5E5"> was after I discovered</font>

447
00:14:58,910 --> 00:15:02,089
this I wrote<font color="#CCCCCC"> a fuzzer to say well let me</font>

448
00:15:00,589 --> 00:15:04,040
just create<font color="#CCCCCC"> a</font><font color="#E5E5E5"> bunch of commands and</font>

449
00:15:02,089 --> 00:15:05,540
insert random<font color="#E5E5E5"> characters somewhere in</font>

450
00:15:04,040 --> 00:15:07,790
the command and<font color="#E5E5E5"> see if I can find other</font>

451
00:15:05,540 --> 00:15:09,589
characters<font color="#CCCCCC"> that do the same</font><font color="#E5E5E5"> thing and so</font>

452
00:15:07,790 --> 00:15:12,380
I<font color="#E5E5E5"> came across through that process the</font>

453
00:15:09,589 --> 00:15:13,910
comma<font color="#E5E5E5"> and the semicolon and before</font>

454
00:15:12,380 --> 00:15:15,470
releasing<font color="#CCCCCC"> this research I've never seen</font>

455
00:15:13,910 --> 00:15:17,750
this used<font color="#E5E5E5"> in the wild</font><font color="#CCCCCC"> and I looked a lot</font>

456
00:15:15,470 --> 00:15:19,670
<font color="#E5E5E5">but the command and semicolon can be</font>

457
00:15:17,750 --> 00:15:21,649
used in the<font color="#E5E5E5"> place of white space</font><font color="#CCCCCC"> all</font>

458
00:15:19,670 --> 00:15:23,509
three serving as delimiter characters

459
00:15:21,649 --> 00:15:25,490
and<font color="#E5E5E5"> we'll see</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> the places where that</font>

460
00:15:23,509 --> 00:15:26,689
<font color="#E5E5E5">applies or you can use these and this is</font>

461
00:15:25,490 --> 00:15:28,939
<font color="#E5E5E5">really really</font><font color="#CCCCCC"> cool</font>

462
00:15:26,689 --> 00:15:30,410
we already saw standard<font color="#E5E5E5"> in hiding um</font>

463
00:15:28,939 --> 00:15:32,199
echoing<font color="#E5E5E5"> content in the command or</font>

464
00:15:30,410 --> 00:15:34,279
<font color="#CCCCCC">PowerShell</font>

465
00:15:32,199 --> 00:15:35,660
<font color="#CCCCCC">non-existent environment variables this</font>

466
00:15:34,279 --> 00:15:37,879
<font color="#CCCCCC">is one I found</font><font color="#E5E5E5"> in the blog from several</font>

467
00:15:35,660 --> 00:15:39,469
years<font color="#CCCCCC"> ago</font><font color="#E5E5E5"> where for batch files this is</font>

468
00:15:37,879 --> 00:15:40,850
really only a static<font color="#CCCCCC"> thing for batch</font>

469
00:15:39,470 --> 00:15:41,930
files if you<font color="#E5E5E5"> use</font><font color="#CCCCCC"> non existant</font>

470
00:15:40,850 --> 00:15:43,790
environment variables they'll<font color="#E5E5E5"> just</font>

471
00:15:41,930 --> 00:15:44,689
resolve to nothing and<font color="#E5E5E5"> so it's the way</font>

472
00:15:43,790 --> 00:15:47,449
you can office get your

473
00:15:44,690 --> 00:15:48,769
on<font color="#CCCCCC"> disk custom environment variables and</font>

474
00:15:47,449 --> 00:15:51,829
<font color="#E5E5E5">then existing environment variables we</font>

475
00:15:48,769 --> 00:15:53,720
looked at previously<font color="#E5E5E5"> so when I released</font>

476
00:15:51,829 --> 00:15:55,758
the<font color="#CCCCCC"> out fin coded command POC I included</font>

477
00:15:53,720 --> 00:15:57,290
some of<font color="#CCCCCC"> these obfuscated versions using</font>

478
00:15:55,759 --> 00:15:59,540
<font color="#E5E5E5">the environment variable</font><font color="#CCCCCC"> substrings for</font>

479
00:15:57,290 --> 00:16:00,800
command and<font color="#CCCCCC"> PowerShell</font><font color="#E5E5E5"> and then within a</font>

480
00:15:59,540 --> 00:16:02,389
few<font color="#E5E5E5"> minutes someone replied on</font><font color="#CCCCCC"> twitter</font>

481
00:16:00,800 --> 00:16:03,290
with a full command<font color="#E5E5E5"> that was just this</font>

482
00:16:02,389 --> 00:16:05,629
encoded stuff

483
00:16:03,290 --> 00:16:07,790
and so in the the tool invoked

484
00:16:05,629 --> 00:16:08,959
ossification<font color="#CCCCCC"> you can feed it any input</font>

485
00:16:07,790 --> 00:16:10,849
command and one of the option is just

486
00:16:08,959 --> 00:16:11,628
<font color="#E5E5E5">environment variable encoding and then</font>

487
00:16:10,850 --> 00:16:13,189
we'll go through<font color="#CCCCCC"> and randomly select</font>

488
00:16:11,629 --> 00:16:14,839
<font color="#E5E5E5">environment variables and the characters</font>

489
00:16:13,189 --> 00:16:18,379
in<font color="#CCCCCC"> there and</font><font color="#E5E5E5"> produce payload just like</font>

490
00:16:14,839 --> 00:16:19,939
this so after come after looking at<font color="#E5E5E5"> this</font>

491
00:16:18,379 --> 00:16:20,720
part<font color="#E5E5E5"> of the research</font><font color="#CCCCCC"> I started writing</font>

492
00:16:19,939 --> 00:16:22,689
<font color="#CCCCCC">ER rules</font>

493
00:16:20,720 --> 00:16:24,259
scraping internal<font color="#E5E5E5"> external sources</font>

494
00:16:22,689 --> 00:16:25,849
<font color="#E5E5E5">writing all different kinds of</font>

495
00:16:24,259 --> 00:16:26,629
signatures to see do<font color="#E5E5E5"> we actually</font><font color="#CCCCCC"> see</font>

496
00:16:25,850 --> 00:16:28,399
this in the<font color="#E5E5E5"> wild</font>

497
00:16:26,629 --> 00:16:30,230
have we seen it in the wild<font color="#CCCCCC"> and for</font>

498
00:16:28,399 --> 00:16:32,180
environment variable<font color="#E5E5E5"> encoding the answer</font>

499
00:16:30,230 --> 00:16:35,149
is yes<font color="#E5E5E5"> and</font><font color="#CCCCCC"> for a</font><font color="#E5E5E5"> really long time</font><font color="#CCCCCC"> this</font>

500
00:16:32,180 --> 00:16:37,790
sample is a malware<font color="#E5E5E5"> called devour from</font>

501
00:16:35,149 --> 00:16:40,129
2012 but it<font color="#CCCCCC"> goes way back a lot older</font>

502
00:16:37,790 --> 00:16:41,719
than<font color="#E5E5E5"> that</font><font color="#CCCCCC"> using environment variable sub</font>

503
00:16:40,129 --> 00:16:43,100
<font color="#CCCCCC">strings</font><font color="#E5E5E5"> um here's another one where</font>

504
00:16:41,720 --> 00:16:45,410
<font color="#CCCCCC">instead of</font><font color="#E5E5E5"> just using known environment</font>

505
00:16:43,100 --> 00:16:47,360
variables<font color="#E5E5E5"> they set a custom dictionary</font>

506
00:16:45,410 --> 00:16:49,310
into a custom<font color="#CCCCCC"> variable and then the rest</font>

507
00:16:47,360 --> 00:16:51,439
<font color="#E5E5E5">of the command is just sub strengths of</font>

508
00:16:49,310 --> 00:16:53,239
that<font color="#CCCCCC"> custom environment variable</font><font color="#E5E5E5"> we've</font>

509
00:16:51,439 --> 00:16:55,939
actually seen an<font color="#E5E5E5"> interesting Chinese apt</font>

510
00:16:53,240 --> 00:16:57,860
group<font color="#E5E5E5"> use this pretty interesting stuff</font>

511
00:16:55,939 --> 00:16:59,599
and this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> from a tool called Jas batch</font>

512
00:16:57,860 --> 00:17:01,370
alpha skater<font color="#E5E5E5"> on github it's like the</font>

513
00:16:59,600 --> 00:17:03,350
smallest<font color="#CCCCCC"> office skater</font><font color="#E5E5E5"> I've ever seen</font>

514
00:17:01,370 --> 00:17:05,720
<font color="#E5E5E5">but</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> amazing it's a really fun tool</font>

515
00:17:03,350 --> 00:17:06,919
to use go check it out<font color="#CCCCCC"> I mean this last</font>

516
00:17:05,720 --> 00:17:08,539
one there's a<font color="#E5E5E5"> lot more details in the</font>

517
00:17:06,919 --> 00:17:10,459
<font color="#E5E5E5">white paper about some of the political</font>

518
00:17:08,539 --> 00:17:12,439
<font color="#E5E5E5">nature of this fish that</font><font color="#CCCCCC"> this payload</font>

519
00:17:10,459 --> 00:17:14,659
was in but batch encryption is a really

520
00:17:12,439 --> 00:17:16,069
<font color="#CCCCCC">interesting combination</font><font color="#E5E5E5"> of known of</font>

521
00:17:14,659 --> 00:17:17,870
existing and custom environment

522
00:17:16,069 --> 00:17:20,449
variables and<font color="#E5E5E5"> a lot of other stuff so</font>

523
00:17:17,869 --> 00:17:22,639
I'll leave<font color="#CCCCCC"> that I'll leave out into the</font>

524
00:17:20,449 --> 00:17:23,929
to go check<font color="#E5E5E5"> out in the white paper</font><font color="#CCCCCC"> so</font>

525
00:17:22,640 --> 00:17:25,640
we've talked about<font color="#E5E5E5"> binary name</font><font color="#CCCCCC"> Office</font>

526
00:17:23,929 --> 00:17:27,230
keishon<font color="#E5E5E5"> talked about these different</font>

527
00:17:25,640 --> 00:17:31,100
character<font color="#E5E5E5"> insertion character</font>

528
00:17:27,230 --> 00:17:34,490
obfuscation components<font color="#E5E5E5"> um so what if as</font>

529
00:17:31,100 --> 00:17:35,539
an attacker<font color="#CCCCCC"> I know that the company I'm</font>

530
00:17:34,490 --> 00:17:36,919
<font color="#CCCCCC">going up against is looking for these</font>

531
00:17:35,539 --> 00:17:38,150
<font color="#CCCCCC">characters</font><font color="#E5E5E5"> they're looking for the</font>

532
00:17:36,919 --> 00:17:39,799
carrots looking for the quotes the

533
00:17:38,150 --> 00:17:42,080
commas semicolons all these things<font color="#E5E5E5"> and</font>

534
00:17:39,799 --> 00:17:43,820
they're really<font color="#E5E5E5"> good at detecting it so</font>

535
00:17:42,080 --> 00:17:46,039
when I'm<font color="#CCCCCC"> thinking</font><font color="#E5E5E5"> as an attacker this</font>

536
00:17:43,820 --> 00:17:48,289
way I wanted<font color="#E5E5E5"> to</font><font color="#CCCCCC"> figure out a way to</font>

537
00:17:46,039 --> 00:17:51,650
<font color="#E5E5E5">obfuscate a payload</font><font color="#CCCCCC"> without having to</font>

538
00:17:48,289 --> 00:17:53,390
<font color="#E5E5E5">rely on any of those</font><font color="#CCCCCC"> characters</font><font color="#E5E5E5"> so let's</font>

539
00:17:51,650 --> 00:17:55,070
take this example<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> just in that</font>

540
00:17:53,390 --> 00:17:56,330
<font color="#E5E5E5">stack command but the first portion if</font>

541
00:17:55,070 --> 00:17:57,230
there's any defenders in here that<font color="#E5E5E5"> first</font>

542
00:17:56,330 --> 00:17:58,159
portion of<font color="#E5E5E5"> the command should look</font>

543
00:17:57,230 --> 00:17:59,360
really familiar

544
00:17:58,160 --> 00:18:01,340
and this is like<font color="#E5E5E5"> one</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the most sick of</font>

545
00:17:59,360 --> 00:18:02,780
all things in<font color="#E5E5E5"> the world</font><font color="#CCCCCC"> Metasploit uses</font>

546
00:18:01,340 --> 00:18:05,840
<font color="#E5E5E5">this a lot of tools use this</font><font color="#CCCCCC"> comm speck</font>

547
00:18:02,780 --> 00:18:08,810
<font color="#E5E5E5">in and of itself should</font><font color="#CCCCCC"> be pretty a big</font>

548
00:18:05,840 --> 00:18:11,510
flag but /bc<font color="#E5E5E5"> start beam in a really</font>

549
00:18:08,810 --> 00:18:12,860
common set of<font color="#CCCCCC"> arguments</font><font color="#E5E5E5"> so I wanted to</font>

550
00:18:11,510 --> 00:18:15,370
<font color="#E5E5E5">use this really common example</font><font color="#CCCCCC"> to show</font>

551
00:18:12,860 --> 00:18:18,709
<font color="#E5E5E5">how you can mess with even really good</font>

552
00:18:15,370 --> 00:18:20,090
signatures<font color="#E5E5E5"> and indicators right so it's</font>

553
00:18:18,710 --> 00:18:21,410
good<font color="#CCCCCC"> to</font><font color="#E5E5E5"> know what the variable is what</font>

554
00:18:20,090 --> 00:18:22,550
the arguments are and<font color="#E5E5E5"> sometimes you can</font>

555
00:18:21,410 --> 00:18:25,460
<font color="#CCCCCC">just drop one of the variables and it</font>

556
00:18:22,550 --> 00:18:26,389
still runs perfectly fine<font color="#E5E5E5"> so</font><font color="#CCCCCC"> here's kind</font>

557
00:18:25,460 --> 00:18:28,040
of a description<font color="#E5E5E5"> of some of those</font>

558
00:18:26,390 --> 00:18:30,590
<font color="#CCCCCC">variables one we wanna focus on is calm</font>

559
00:18:28,040 --> 00:18:33,710
<font color="#CCCCCC">spec for</font><font color="#E5E5E5"> right now so a calm spec is the</font>

560
00:18:30,590 --> 00:18:35,959
path to<font color="#E5E5E5"> see windows system32 command X</font><font color="#CCCCCC"> e</font>

561
00:18:33,710 --> 00:18:37,400
<font color="#E5E5E5">so two ways that we can obfuscate this</font>

562
00:18:35,960 --> 00:18:39,650
<font color="#E5E5E5">are using environment variable substring</font>

563
00:18:37,400 --> 00:18:41,150
<font color="#E5E5E5">and substitution</font><font color="#CCCCCC"> so the substring is as</font>

564
00:18:39,650 --> 00:18:43,160
we already saw<font color="#E5E5E5"> this value is 27</font>

565
00:18:41,150 --> 00:18:45,530
characters<font color="#E5E5E5"> long which means that we can</font>

566
00:18:43,160 --> 00:18:47,840
<font color="#E5E5E5">do sub strings in</font><font color="#CCCCCC"> define start from 0 go</font>

567
00:18:45,530 --> 00:18:49,580
for 27 or just start from 0<font color="#E5E5E5"> and go</font>

568
00:18:47,840 --> 00:18:51,770
forward till it's done<font color="#CCCCCC"> and</font><font color="#E5E5E5"> you can also</font>

569
00:18:49,580 --> 00:18:53,449
do negative<font color="#E5E5E5"> indexes negative 27 as well</font>

570
00:18:51,770 --> 00:18:55,610
but<font color="#CCCCCC"> actually it doesn't</font><font color="#E5E5E5"> really matter</font>

571
00:18:53,450 --> 00:18:57,530
<font color="#E5E5E5">how long the payload is you can use</font>

572
00:18:55,610 --> 00:18:59,000
values that are much<font color="#E5E5E5"> larger than</font><font color="#CCCCCC"> that</font>

573
00:18:57,530 --> 00:19:01,250
<font color="#CCCCCC">and it still works fine</font><font color="#E5E5E5"> because it can't</font>

574
00:18:59,000 --> 00:19:03,920
go past forward<font color="#E5E5E5"> or backward</font><font color="#CCCCCC"> the actual</font>

575
00:19:01,250 --> 00:19:06,320
value<font color="#CCCCCC"> so</font><font color="#E5E5E5"> negative 13</font><font color="#CCCCCC"> 37 will still</font>

576
00:19:03,920 --> 00:19:08,570
<font color="#E5E5E5">produce the same full value of this path</font>

577
00:19:06,320 --> 00:19:09,950
to command<font color="#E5E5E5"> XE you can also do the</font>

578
00:19:08,570 --> 00:19:11,540
environment variable substitution<font color="#E5E5E5"> and</font>

579
00:19:09,950 --> 00:19:13,190
with this you<font color="#E5E5E5"> can choose variables</font><font color="#CCCCCC"> or</font>

580
00:19:11,540 --> 00:19:14,899
about characters that<font color="#CCCCCC"> actually exist</font>

581
00:19:13,190 --> 00:19:16,730
like converting backward and forward

582
00:19:14,900 --> 00:19:18,410
slashes back and forth<font color="#E5E5E5"> or you can choose</font>

583
00:19:16,730 --> 00:19:19,580
<font color="#CCCCCC">values that aren't gonna exist</font><font color="#E5E5E5"> anywhere</font>

584
00:19:18,410 --> 00:19:21,530
but it doesn't matter<font color="#E5E5E5"> cuz you're not</font>

585
00:19:19,580 --> 00:19:24,110
<font color="#E5E5E5">actually trying</font><font color="#CCCCCC"> to change it you just</font>

586
00:19:21,530 --> 00:19:25,370
want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> break up</font><font color="#CCCCCC"> percent com spec %</font>

587
00:19:24,110 --> 00:19:28,149
<font color="#E5E5E5">because if that's</font><font color="#CCCCCC"> when a defender is</font>

588
00:19:25,370 --> 00:19:30,229
looking for then they're gonna miss this

589
00:19:28,150 --> 00:19:32,360
<font color="#CCCCCC">and so let's just</font><font color="#E5E5E5"> take two of these</font>

590
00:19:30,230 --> 00:19:34,040
<font color="#E5E5E5">examples and keep off the skating</font><font color="#CCCCCC"> so you</font>

591
00:19:32,360 --> 00:19:35,929
can randomize the case for<font color="#E5E5E5"> any variable</font>

592
00:19:34,040 --> 00:19:37,700
<font color="#CCCCCC">it has</font><font color="#E5E5E5"> no effect on</font><font color="#CCCCCC"> it you can also</font><font color="#E5E5E5"> add</font>

593
00:19:35,930 --> 00:19:38,960
a lot of<font color="#CCCCCC"> white space and for this bottom</font>

594
00:19:37,700 --> 00:19:40,460
example<font color="#E5E5E5"> it actually does change the</font>

595
00:19:38,960 --> 00:19:41,810
<font color="#E5E5E5">behavior of it but in this case</font><font color="#CCCCCC"> it</font>

596
00:19:40,460 --> 00:19:43,550
doesn't matter<font color="#E5E5E5"> because we're not</font><font color="#CCCCCC"> trying</font>

597
00:19:41,810 --> 00:19:45,679
<font color="#CCCCCC">to</font><font color="#E5E5E5"> change the value and then you can</font>

598
00:19:43,550 --> 00:19:47,600
also explicitly sign integers and

599
00:19:45,680 --> 00:19:49,250
command<font color="#CCCCCC"> exit II so</font><font color="#E5E5E5"> I don't know if</font>

600
00:19:47,600 --> 00:19:50,810
you've ever seen<font color="#CCCCCC"> a</font><font color="#E5E5E5"> minus</font><font color="#CCCCCC"> zero or plus</font>

601
00:19:49,250 --> 00:19:51,950
zero on the command<font color="#E5E5E5"> line</font><font color="#CCCCCC"> but this</font>

602
00:19:50,810 --> 00:19:54,350
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> has I'm really interesting</font>

603
00:19:51,950 --> 00:19:58,130
simple detection wins<font color="#CCCCCC"> if you are</font>

604
00:19:54,350 --> 00:20:00,409
randomly adding signed<font color="#E5E5E5"> operators to your</font>

605
00:19:58,130 --> 00:20:02,090
integers so we'll go with<font color="#CCCCCC"> the second</font>

606
00:20:00,410 --> 00:20:03,290
<font color="#CCCCCC">option and throw it into the command</font><font color="#E5E5E5"> now</font>

607
00:20:02,090 --> 00:20:05,120
a really important<font color="#E5E5E5"> point here is that</font>

608
00:20:03,290 --> 00:20:07,639
context matters<font color="#CCCCCC"> so if you try</font><font color="#E5E5E5"> to copy</font>

609
00:20:05,120 --> 00:20:10,080
and paste<font color="#E5E5E5"> this into something that's not</font>

610
00:20:07,640 --> 00:20:12,600
<font color="#CCCCCC">a command XE context it won't</font>

611
00:20:10,080 --> 00:20:14,010
because it the<font color="#CCCCCC"> comp spec variable works</font>

612
00:20:12,600 --> 00:20:15,330
as a run key or service because<font color="#CCCCCC"> the</font>

613
00:20:14,010 --> 00:20:17,160
operating system will kind of find and

614
00:20:15,330 --> 00:20:18,389
replace that<font color="#E5E5E5"> with</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> full path but it</font>

615
00:20:17,160 --> 00:20:20,730
doesn't know<font color="#E5E5E5"> how</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> interpret this this</font>

616
00:20:18,390 --> 00:20:23,300
weird sub string and string replacement

617
00:20:20,730 --> 00:20:25,770
syntax<font color="#E5E5E5"> so you have to be in a command XE</font>

618
00:20:23,300 --> 00:20:27,419
<font color="#E5E5E5">syntax if the very first part</font><font color="#CCCCCC"> of the</font>

619
00:20:25,770 --> 00:20:29,070
command<font color="#E5E5E5"> is actually off to skated in</font>

620
00:20:27,420 --> 00:20:30,990
this way<font color="#E5E5E5"> but if you start with command</font>

621
00:20:29,070 --> 00:20:34,080
<font color="#E5E5E5">XE and then the rest of the command can</font>

622
00:20:30,990 --> 00:20:35,130
be obfuscated with this no<font color="#CCCCCC"> problem so</font>

623
00:20:34,080 --> 00:20:37,020
for<font color="#E5E5E5"> the rest of the command we can</font>

624
00:20:35,130 --> 00:20:39,090
randomize the case with<font color="#E5E5E5"> those flags</font><font color="#CCCCCC"> I'm</font>

625
00:20:37,020 --> 00:20:41,190
an interesting thing<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> BC</font>

626
00:20:39,090 --> 00:20:42,959
start<font color="#CCCCCC"> B min you can</font><font color="#E5E5E5"> actually remove all</font>

627
00:20:41,190 --> 00:20:44,400
<font color="#E5E5E5">the</font><font color="#CCCCCC"> whitespace</font><font color="#E5E5E5"> between those arguments</font>

628
00:20:42,960 --> 00:20:45,570
<font color="#E5E5E5">now this actually gets really</font>

629
00:20:44,400 --> 00:20:46,410
<font color="#E5E5E5">interesting with a lot of detections</font>

630
00:20:45,570 --> 00:20:48,120
that assume you have to have a

631
00:20:46,410 --> 00:20:50,340
<font color="#E5E5E5">whitespace</font><font color="#CCCCCC"> slash something whitespace</font>

632
00:20:48,120 --> 00:20:52,979
<font color="#CCCCCC">and another important note here is that</font>

633
00:20:50,340 --> 00:20:55,649
in between<font color="#E5E5E5"> the</font><font color="#CCCCCC"> comm spec variable and</font>

634
00:20:52,980 --> 00:20:57,630
<font color="#E5E5E5">slash</font><font color="#CCCCCC"> B there's no white</font><font color="#E5E5E5"> space in our</font>

635
00:20:55,650 --> 00:20:59,100
command<font color="#E5E5E5"> but when it</font><font color="#CCCCCC"> actually runs the</font>

636
00:20:57,630 --> 00:21:01,140
operating system<font color="#E5E5E5"> inserts an extra</font>

637
00:20:59,100 --> 00:21:03,600
<font color="#E5E5E5">whitespace there so when you look at</font><font color="#CCCCCC"> a</font>

638
00:21:01,140 --> 00:21:05,190
live running process or<font color="#CCCCCC"> even evidence</font><font color="#E5E5E5"> in</font>

639
00:21:03,600 --> 00:21:07,679
the process execution<font color="#E5E5E5"> log so there's an</font>

640
00:21:05,190 --> 00:21:09,090
extra<font color="#CCCCCC"> whitespace so now this</font><font color="#E5E5E5"> means is</font>

641
00:21:07,680 --> 00:21:11,430
hey maybe I have a detection<font color="#E5E5E5"> that works</font>

642
00:21:09,090 --> 00:21:13,590
<font color="#E5E5E5">great looking for</font><font color="#CCCCCC"> this statically in</font>

643
00:21:11,430 --> 00:21:14,820
registry but the<font color="#E5E5E5"> operating system</font>

644
00:21:13,590 --> 00:21:17,159
<font color="#CCCCCC">actually changed something in the</font>

645
00:21:14,820 --> 00:21:18,899
<font color="#E5E5E5">evidence</font><font color="#CCCCCC"> I'm looking at later</font><font color="#E5E5E5"> so do I</font>

646
00:21:17,160 --> 00:21:20,400
need<font color="#E5E5E5"> to change and have two</font><font color="#CCCCCC"> different</font>

647
00:21:18,900 --> 00:21:24,420
detection<font color="#E5E5E5"> for both or make it robust</font>

648
00:21:20,400 --> 00:21:26,550
enough<font color="#E5E5E5"> to</font><font color="#CCCCCC"> cover both pieces</font><font color="#E5E5E5"> so we'll</font>

649
00:21:24,420 --> 00:21:28,680
<font color="#E5E5E5">just reorder that</font><font color="#CCCCCC"> an o2 in la for</font><font color="#E5E5E5"> fun</font>

650
00:21:26,550 --> 00:21:30,899
you can also add a lot of<font color="#E5E5E5"> white</font><font color="#CCCCCC"> space</font>

651
00:21:28,680 --> 00:21:32,250
between<font color="#CCCCCC"> all these and then remember</font>

652
00:21:30,900 --> 00:21:34,110
<font color="#E5E5E5">anywhere there's white spaces as a</font>

653
00:21:32,250 --> 00:21:35,700
<font color="#E5E5E5">delimiter</font><font color="#CCCCCC"> you can add commas and</font>

654
00:21:34,110 --> 00:21:37,020
semicolons<font color="#CCCCCC"> because they also serve as</font>

655
00:21:35,700 --> 00:21:38,340
delimiter characters and you can add as

656
00:21:37,020 --> 00:21:39,720
many as<font color="#CCCCCC"> you want</font>

657
00:21:38,340 --> 00:21:41,100
so now<font color="#CCCCCC"> that starts to</font><font color="#E5E5E5"> get really</font>

658
00:21:39,720 --> 00:21:43,860
interesting<font color="#CCCCCC"> maybe</font><font color="#E5E5E5"> you were doing regice</font>

659
00:21:41,100 --> 00:21:46,260
regice is looking for /b<font color="#CCCCCC"> you know</font><font color="#E5E5E5"> slash</font>

660
00:21:43,860 --> 00:21:47,010
s star<font color="#E5E5E5"> for any amount of white</font><font color="#CCCCCC"> space but</font>

661
00:21:46,260 --> 00:21:50,520
<font color="#CCCCCC">then they have to</font><font color="#E5E5E5"> take into</font><font color="#CCCCCC"> account</font>

662
00:21:47,010 --> 00:21:52,680
<font color="#CCCCCC">white space commas semicolons maybe some</font>

663
00:21:50,520 --> 00:21:54,240
other stuff<font color="#E5E5E5"> as</font><font color="#CCCCCC"> well let's keep going</font><font color="#E5E5E5"> you</font>

664
00:21:52,680 --> 00:21:56,370
can<font color="#CCCCCC"> add all those</font><font color="#E5E5E5"> caret characters and</font>

665
00:21:54,240 --> 00:21:58,080
<font color="#E5E5E5">places</font><font color="#CCCCCC"> that it doesn't</font><font color="#E5E5E5"> matter and then</font>

666
00:21:56,370 --> 00:21:59,429
when you actually<font color="#E5E5E5"> run that the process</font>

667
00:21:58,080 --> 00:22:01,139
execution<font color="#E5E5E5"> is going</font><font color="#CCCCCC"> from the</font><font color="#E5E5E5"> bottom up</font>

668
00:21:59,430 --> 00:22:02,610
<font color="#CCCCCC">you'll notice that the carrots are</font>

669
00:22:01,140 --> 00:22:05,640
losing one<font color="#E5E5E5"> layer every time they go up</font>

670
00:22:02,610 --> 00:22:06,990
<font color="#CCCCCC">and this portion highlighted blue</font><font color="#E5E5E5"> we'll</font>

671
00:22:05,640 --> 00:22:09,030
look at<font color="#E5E5E5"> this in the detection portion</font>

672
00:22:06,990 --> 00:22:12,300
but<font color="#E5E5E5"> whenever you see command</font><font color="#CCCCCC"> X E space</font>

673
00:22:09,030 --> 00:22:15,930
space<font color="#CCCCCC"> slash s space slash</font><font color="#E5E5E5"> D space slash</font>

674
00:22:12,300 --> 00:22:17,639
<font color="#CCCCCC">c0</font><font color="#E5E5E5"> space double quote space and then the</font>

675
00:22:15,930 --> 00:22:18,930
command<font color="#E5E5E5"> I know that was a mouthful this</font>

676
00:22:17,640 --> 00:22:20,430
is actually an artifact of the<font color="#E5E5E5"> operating</font>

677
00:22:18,930 --> 00:22:21,720
system you have sub commands<font color="#CCCCCC"> and a few</font>

678
00:22:20,430 --> 00:22:22,890
other weird scenarios<font color="#CCCCCC"> like piping</font>

679
00:22:21,720 --> 00:22:25,440
content from standard<font color="#E5E5E5"> in</font>

680
00:22:22,890 --> 00:22:27,690
put into a binary<font color="#E5E5E5"> what that means from a</font>

681
00:22:25,440 --> 00:22:30,120
Finnish perspective is whenever<font color="#E5E5E5"> you see</font>

682
00:22:27,690 --> 00:22:31,710
<font color="#E5E5E5">this command</font><font color="#CCCCCC"> it's actually gonna be an</font>

683
00:22:30,120 --> 00:22:33,330
artifact<font color="#E5E5E5"> from</font><font color="#CCCCCC"> the OS and you</font>

684
00:22:31,710 --> 00:22:35,070
automatically<font color="#CCCCCC"> have context around the</font>

685
00:22:33,330 --> 00:22:36,720
arguments<font color="#CCCCCC"> that it was either a sub</font>

686
00:22:35,070 --> 00:22:38,399
command or<font color="#CCCCCC"> as</font><font color="#E5E5E5"> pushed in a standard input</font>

687
00:22:36,720 --> 00:22:40,050
so this so when you look at all these

688
00:22:38,400 --> 00:22:42,120
office<font color="#CCCCCC"> Gatien building blocks these</font>

689
00:22:40,050 --> 00:22:43,470
operating system artifacts are actually

690
00:22:42,120 --> 00:22:45,239
<font color="#E5E5E5">really helpful in detecting some of</font>

691
00:22:43,470 --> 00:22:47,220
these<font color="#E5E5E5"> but what you'll notice is that our</font>

692
00:22:45,240 --> 00:22:48,990
<font color="#CCCCCC">file netstat command doesn't have any</font><font color="#E5E5E5"> of</font>

693
00:22:47,220 --> 00:22:50,940
<font color="#E5E5E5">this cool</font><font color="#CCCCCC"> office keishon in it it just</font>

694
00:22:48,990 --> 00:22:52,020
<font color="#E5E5E5">has the casing and white space but why</font>

695
00:22:50,940 --> 00:22:54,870
did none of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> other characters work</font>

696
00:22:52,020 --> 00:22:57,090
well<font color="#E5E5E5"> the comma and the semicolon</font><font color="#CCCCCC"> and the</font>

697
00:22:54,870 --> 00:22:59,459
<font color="#E5E5E5">caret actually aren't compatible with</font>

698
00:22:57,090 --> 00:23:02,490
this netstat command<font color="#CCCCCC"> but the one</font>

699
00:22:59,460 --> 00:23:03,300
character<font color="#CCCCCC"> that is is the double quote so</font>

700
00:23:02,490 --> 00:23:04,620
now if we<font color="#E5E5E5"> put a double quote double</font>

701
00:23:03,300 --> 00:23:06,030
<font color="#E5E5E5">quote in the original command it</font>

702
00:23:04,620 --> 00:23:07,830
persists all the way through and we<font color="#E5E5E5"> get</font>

703
00:23:06,030 --> 00:23:10,730
it into<font color="#E5E5E5"> our final commands which is</font>

704
00:23:07,830 --> 00:23:13,350
awesome from<font color="#E5E5E5"> an evasion perspective but</font>

705
00:23:10,730 --> 00:23:14,700
this is really difficult<font color="#E5E5E5"> actually so in</font>

706
00:23:13,350 --> 00:23:16,560
<font color="#E5E5E5">PowerShell authentication I've done in</font>

707
00:23:14,700 --> 00:23:18,330
the<font color="#E5E5E5"> past you had the benefit</font><font color="#CCCCCC"> of using</font>

708
00:23:16,560 --> 00:23:21,300
<font color="#CCCCCC">PowerShell tokenizer to be able to say</font>

709
00:23:18,330 --> 00:23:21,870
given<font color="#E5E5E5"> this crazy garbled thing what's</font>

710
00:23:21,300 --> 00:23:23,070
the<font color="#E5E5E5"> command</font>

711
00:23:21,870 --> 00:23:25,080
what's the string what are the arguments

712
00:23:23,070 --> 00:23:26,490
<font color="#E5E5E5">to kind of tokenize it and inform</font><font color="#CCCCCC"> me</font>

713
00:23:25,080 --> 00:23:28,770
<font color="#CCCCCC">about</font><font color="#E5E5E5"> what the whole thing is well</font>

714
00:23:26,490 --> 00:23:31,350
there's none of<font color="#E5E5E5"> that for command XE so I</font>

715
00:23:28,770 --> 00:23:32,730
call this my you know sad little violin

716
00:23:31,350 --> 00:23:34,409
slide looking<font color="#E5E5E5"> for a little</font><font color="#CCCCCC"> bit of</font>

717
00:23:32,730 --> 00:23:35,700
sympathy<font color="#E5E5E5"> not really but it was</font><font color="#CCCCCC"> just a</font>

718
00:23:34,410 --> 00:23:37,560
really<font color="#E5E5E5"> interesting problem</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> try to</font>

719
00:23:35,700 --> 00:23:39,270
solve<font color="#E5E5E5"> without having these cool tools</font>

720
00:23:37,560 --> 00:23:41,820
that power<font color="#E5E5E5"> still made available so it</font>

721
00:23:39,270 --> 00:23:43,889
was a<font color="#E5E5E5"> much more rigid detection problem</font>

722
00:23:41,820 --> 00:23:46,830
to solve<font color="#E5E5E5"> but it</font><font color="#CCCCCC"> definitely made for</font><font color="#E5E5E5"> some</font>

723
00:23:43,890 --> 00:23:48,060
interesting<font color="#CCCCCC"> challenges so again the</font>

724
00:23:46,830 --> 00:23:48,720
defender may say well I don't<font color="#CCCCCC"> care about</font>

725
00:23:48,060 --> 00:23:51,240
any<font color="#E5E5E5"> of this stuff</font>

726
00:23:48,720 --> 00:23:53,400
you ran<font color="#E5E5E5"> netstat I don't care if they're</font>

727
00:23:51,240 --> 00:23:55,080
you know ticks<font color="#E5E5E5"> or quotes in the</font>

728
00:23:53,400 --> 00:23:56,400
arguments I'm still going to<font color="#E5E5E5"> detect that</font>

729
00:23:55,080 --> 00:23:58,379
so I don't<font color="#CCCCCC"> need</font><font color="#E5E5E5"> to care about any</font><font color="#CCCCCC"> of</font>

730
00:23:56,400 --> 00:24:00,450
this office<font color="#CCCCCC"> Gatien stuff</font><font color="#E5E5E5"> well I would</font>

731
00:23:58,380 --> 00:24:02,700
say two<font color="#CCCCCC"> things one is I think detecting</font>

732
00:24:00,450 --> 00:24:04,110
obfuscation<font color="#CCCCCC"> in and of itself is</font><font color="#E5E5E5"> valuable</font>

733
00:24:02,700 --> 00:24:06,660
<font color="#E5E5E5">because that tells you something</font><font color="#CCCCCC"> about</font>

734
00:24:04,110 --> 00:24:08,280
intent<font color="#E5E5E5"> if something is obfuscated</font><font color="#CCCCCC"> I</font>

735
00:24:06,660 --> 00:24:09,660
immediately am more<font color="#E5E5E5"> interested in it and</font>

736
00:24:08,280 --> 00:24:11,700
want to<font color="#CCCCCC"> know what was trying to be</font>

737
00:24:09,660 --> 00:24:12,990
hidden<font color="#E5E5E5"> from me</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> the other reason I'd</font>

738
00:24:11,700 --> 00:24:15,540
say it's important is that<font color="#E5E5E5"> an attacker</font>

739
00:24:12,990 --> 00:24:17,580
<font color="#E5E5E5">could do a lot</font><font color="#CCCCCC"> of things that if the</font>

740
00:24:15,540 --> 00:24:19,020
whole<font color="#E5E5E5"> command</font><font color="#CCCCCC"> was obfuscated</font><font color="#E5E5E5"> and let's</font>

741
00:24:17,580 --> 00:24:21,000
say it never spawned the child process

742
00:24:19,020 --> 00:24:22,800
<font color="#CCCCCC">like all these things they don't</font><font color="#E5E5E5"> spawn a</font>

743
00:24:21,000 --> 00:24:24,810
single<font color="#E5E5E5"> child process then you'd miss</font>

744
00:24:22,800 --> 00:24:26,730
<font color="#CCCCCC">that unless</font><font color="#E5E5E5"> you were looking for</font><font color="#CCCCCC"> often</font>

745
00:24:24,810 --> 00:24:28,409
in and of itself<font color="#CCCCCC"> so if you're actually</font>

746
00:24:26,730 --> 00:24:30,660
<font color="#E5E5E5">having attackers on the command line in</font>

747
00:24:28,410 --> 00:24:32,460
obfuscated fashion renaming binaries or

748
00:24:30,660 --> 00:24:34,410
<font color="#E5E5E5">maybe reading files are doing directory</font>

749
00:24:32,460 --> 00:24:36,690
listings or I don't<font color="#E5E5E5"> know maybe</font><font color="#CCCCCC"> sinkhole</font>

750
00:24:34,410 --> 00:24:37,920
in your cloud-based security solution by

751
00:24:36,690 --> 00:24:39,810
dropping something<font color="#E5E5E5"> into</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> hosts file</font>

752
00:24:37,920 --> 00:24:41,310
these are all<font color="#E5E5E5"> things that we should care</font>

753
00:24:39,810 --> 00:24:43,560
<font color="#E5E5E5">about as defenders that it's never</font><font color="#CCCCCC"> gonna</font>

754
00:24:41,310 --> 00:24:45,330
<font color="#CCCCCC">spawn child process and if attackers are</font>

755
00:24:43,560 --> 00:24:46,350
using this<font color="#CCCCCC"> ossification stuff then we're</font>

756
00:24:45,330 --> 00:24:48,389
<font color="#CCCCCC">not gonna see it</font><font color="#E5E5E5"> if we're not looking</font>

757
00:24:46,350 --> 00:24:53,610
<font color="#CCCCCC">for</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> office Gatien</font><font color="#E5E5E5"> in and of itself</font>

758
00:24:48,390 --> 00:24:55,110
<font color="#CCCCCC">so in all this research basically it</font>

759
00:24:53,610 --> 00:24:57,600
came down to<font color="#E5E5E5"> four different</font><font color="#CCCCCC"> ways to</font>

760
00:24:55,110 --> 00:24:58,860
encode an entire payload without using

761
00:24:57,600 --> 00:25:00,270
any of<font color="#E5E5E5"> these special</font><font color="#CCCCCC"> characters</font><font color="#E5E5E5"> without</font>

762
00:24:58,860 --> 00:25:03,419
having to use them but<font color="#E5E5E5"> you have the</font>

763
00:25:00,270 --> 00:25:06,000
option<font color="#CCCCCC"> the first one is concatenation</font><font color="#E5E5E5"> so</font>

764
00:25:03,420 --> 00:25:07,770
let's take this netstat command<font color="#CCCCCC"> a fun</font>

765
00:25:06,000 --> 00:25:09,450
<font color="#E5E5E5">fact whenever you have arguments that</font>

766
00:25:07,770 --> 00:25:11,190
start<font color="#CCCCCC"> with a - you should try to replace</font>

767
00:25:09,450 --> 00:25:12,570
them with<font color="#E5E5E5"> a slash because</font><font color="#CCCCCC"> a lot of times</font>

768
00:25:11,190 --> 00:25:14,910
that works<font color="#CCCCCC"> and a lot of defenders</font><font color="#E5E5E5"> are</font>

769
00:25:12,570 --> 00:25:16,860
<font color="#CCCCCC">only</font><font color="#E5E5E5"> looking for one or the other so if</font>

770
00:25:14,910 --> 00:25:18,750
you look<font color="#E5E5E5"> at W script no logo that can</font><font color="#CCCCCC"> be</font>

771
00:25:16,860 --> 00:25:21,000
one<font color="#CCCCCC"> or two slashes or it can be a</font><font color="#E5E5E5"> dash</font>

772
00:25:18,750 --> 00:25:23,610
<font color="#E5E5E5">or if you're looking at PowerShell not</font>

773
00:25:21,000 --> 00:25:25,860
<font color="#CCCCCC">Donnie dot a slash or -</font><font color="#E5E5E5"> Ian</font><font color="#CCCCCC"> C you</font><font color="#E5E5E5"> could</font>

774
00:25:23,610 --> 00:25:27,750
change<font color="#E5E5E5"> those two slashes as well</font><font color="#CCCCCC"> I very</font>

775
00:25:25,860 --> 00:25:29,370
rarely see<font color="#CCCCCC"> this but it totally works and</font>

776
00:25:27,750 --> 00:25:31,260
it evades<font color="#CCCCCC"> a lot of rigid detection 'z</font>

777
00:25:29,370 --> 00:25:33,330
<font color="#CCCCCC">red serve you can</font><font color="#E5E5E5"> also do</font><font color="#CCCCCC"> slashes the</font>

778
00:25:31,260 --> 00:25:35,190
<font color="#E5E5E5">dashes also if you look at URLs you can</font>

779
00:25:33,330 --> 00:25:36,389
do forward slashes<font color="#CCCCCC"> to back and then</font>

780
00:25:35,190 --> 00:25:37,830
<font color="#E5E5E5">someone will</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> like PowerShell you</font>

781
00:25:36,390 --> 00:25:39,810
can do forward back backward forward<font color="#E5E5E5"> and</font>

782
00:25:37,830 --> 00:25:41,070
get really<font color="#E5E5E5"> crazy really fast</font><font color="#CCCCCC"> so whenever</font>

783
00:25:39,810 --> 00:25:42,960
you're<font color="#CCCCCC"> writing the sections if you're</font>

784
00:25:41,070 --> 00:25:44,310
<font color="#CCCCCC">writing slash slash</font><font color="#E5E5E5"> ask yourself can</font>

785
00:25:42,960 --> 00:25:45,720
<font color="#E5E5E5">these actually be reversed or can I swap</font>

786
00:25:44,310 --> 00:25:47,429
these with dashes<font color="#E5E5E5"> and those are the</font>

787
00:25:45,720 --> 00:25:49,410
kinds of<font color="#E5E5E5"> things that really make rigid</font>

788
00:25:47,430 --> 00:25:52,380
detection<font color="#CCCCCC"> 'z</font><font color="#E5E5E5"> move into more resilient</font>

789
00:25:49,410 --> 00:25:54,930
robust detections<font color="#E5E5E5"> so we're gonna set our</font>

790
00:25:52,380 --> 00:25:56,130
payload into this<font color="#E5E5E5"> comm variable and then</font>

791
00:25:54,930 --> 00:25:57,180
we're gonna echo the variable and see

792
00:25:56,130 --> 00:25:59,190
that it<font color="#CCCCCC"> actually doesn't</font><font color="#E5E5E5"> resolve the</font>

793
00:25:57,180 --> 00:26:01,680
value two ways we can<font color="#CCCCCC"> use</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> resolve the</font>

794
00:25:59,190 --> 00:26:03,240
value is to spawn a child process<font color="#CCCCCC"> or we</font>

795
00:26:01,680 --> 00:26:05,520
can<font color="#CCCCCC"> use the call internal command to</font>

796
00:26:03,240 --> 00:26:07,440
resolve that variable so<font color="#E5E5E5"> let's just use</font>

797
00:26:05,520 --> 00:26:09,780
call and if we do<font color="#E5E5E5"> that then it runs</font>

798
00:26:07,440 --> 00:26:11,460
<font color="#CCCCCC">netstat great well</font><font color="#E5E5E5"> now why don't we chop</font>

799
00:26:09,780 --> 00:26:13,470
<font color="#CCCCCC">up</font><font color="#E5E5E5"> our command in the three pieces</font><font color="#CCCCCC"> come</font>

800
00:26:11,460 --> 00:26:15,150
<font color="#E5E5E5">one come two and come three and then</font>

801
00:26:13,470 --> 00:26:17,640
we'll<font color="#E5E5E5"> call the concatenation of those</font>

802
00:26:15,150 --> 00:26:19,230
and<font color="#E5E5E5"> what's interesting here and I wrote</font>

803
00:26:17,640 --> 00:26:20,610
a<font color="#E5E5E5"> blog</font><font color="#CCCCCC"> post on</font><font color="#E5E5E5"> this is that if you're</font>

804
00:26:19,230 --> 00:26:22,530
using<font color="#E5E5E5"> sis Mon as your data source</font>

805
00:26:20,610 --> 00:26:25,979
there's actually a parsing bug in sis

806
00:26:22,530 --> 00:26:28,170
one that has to do with<font color="#CCCCCC"> %</font><font color="#E5E5E5"> so I'll leave</font>

807
00:26:25,980 --> 00:26:29,160
<font color="#CCCCCC">that</font><font color="#E5E5E5"> for later</font><font color="#CCCCCC"> but basically if you're</font>

808
00:26:28,170 --> 00:26:30,360
using<font color="#E5E5E5"> system on</font><font color="#CCCCCC"> that's a data source</font>

809
00:26:29,160 --> 00:26:31,470
<font color="#E5E5E5">definitely check this out there's a</font>

810
00:26:30,360 --> 00:26:33,780
<font color="#E5E5E5">couple of different ways this can mess</font>

811
00:26:31,470 --> 00:26:35,220
up<font color="#E5E5E5"> particularly if using event</font><font color="#CCCCCC"> viewer or</font>

812
00:26:33,780 --> 00:26:37,950
power shells get one event to<font color="#E5E5E5"> view</font>

813
00:26:35,220 --> 00:26:40,830
system on Eid one logs<font color="#E5E5E5"> specifically in</font>

814
00:26:37,950 --> 00:26:42,660
the command line field<font color="#E5E5E5"> so it's important</font>

815
00:26:40,830 --> 00:26:44,040
<font color="#E5E5E5">to test your</font><font color="#CCCCCC"> d4 tools</font><font color="#E5E5E5"> know your data</font>

816
00:26:42,660 --> 00:26:46,020
sources and<font color="#E5E5E5"> check against a couple</font>

817
00:26:44,040 --> 00:26:47,190
different tools<font color="#E5E5E5"> and sources to make sure</font>

818
00:26:46,020 --> 00:26:50,250
that the stuff<font color="#E5E5E5"> you're writing your</font>

819
00:26:47,190 --> 00:26:50,490
detection for is<font color="#E5E5E5"> actually valid</font><font color="#CCCCCC"> we can</font>

820
00:26:50,250 --> 00:26:51,870
also

821
00:26:50,490 --> 00:26:55,500
reorder<font color="#E5E5E5"> the</font><font color="#CCCCCC"> substrings as long as we</font>

822
00:26:51,870 --> 00:26:56,760
reorder them back at the<font color="#CCCCCC"> end</font><font color="#E5E5E5"> and let's</font>

823
00:26:55,500 --> 00:26:58,320
keep going so when we actually set it

824
00:26:56,760 --> 00:26:59,700
into a final<font color="#E5E5E5"> variable and call that</font>

825
00:26:58,320 --> 00:27:01,260
there's a couple<font color="#CCCCCC"> different options</font><font color="#E5E5E5"> we</font>

826
00:26:59,700 --> 00:27:04,050
have on the tool<font color="#E5E5E5"> one we can</font><font color="#CCCCCC"> just say</font>

827
00:27:01,260 --> 00:27:06,150
call final and<font color="#CCCCCC"> just in</font><font color="#E5E5E5"> that same session</font>

828
00:27:04,050 --> 00:27:08,730
we can<font color="#E5E5E5"> execute the results if you have</font>

829
00:27:06,150 --> 00:27:10,740
certain<font color="#E5E5E5"> special characters like pipes</font>

830
00:27:08,730 --> 00:27:12,120
<font color="#E5E5E5">then that call variable actually expands</font>

831
00:27:10,740 --> 00:27:13,440
it and in<font color="#E5E5E5"> that context it tries</font><font color="#CCCCCC"> to</font>

832
00:27:12,120 --> 00:27:15,449
actually<font color="#E5E5E5"> push the contents through the</font>

833
00:27:13,440 --> 00:27:17,040
pipe<font color="#CCCCCC"> so in those</font><font color="#E5E5E5"> cases you have to have</font>

834
00:27:15,450 --> 00:27:19,200
the second<font color="#E5E5E5"> option which is</font><font color="#CCCCCC"> spawning a</font>

835
00:27:17,040 --> 00:27:21,149
child process<font color="#E5E5E5"> to call the</font><font color="#CCCCCC"> variable or</font>

836
00:27:19,200 --> 00:27:23,309
echoing the variable into a child

837
00:27:21,150 --> 00:27:24,990
<font color="#E5E5E5">process and it's a little sloppier since</font>

838
00:27:23,309 --> 00:27:26,490
you have to have a second execution<font color="#E5E5E5"> but</font>

839
00:27:24,990 --> 00:27:27,990
<font color="#CCCCCC">there are some things to</font><font color="#E5E5E5"> be gained from</font>

840
00:27:26,490 --> 00:27:29,429
having<font color="#E5E5E5"> that child process particularly</font>

841
00:27:27,990 --> 00:27:31,440
<font color="#E5E5E5">when you're using the standard input</font>

842
00:27:29,429 --> 00:27:32,880
<font color="#E5E5E5">option options four and five are the</font>

843
00:27:31,440 --> 00:27:34,950
<font color="#E5E5E5">same as two and three but instead of</font>

844
00:27:32,880 --> 00:27:37,020
command<font color="#E5E5E5"> that's using PowerShell so in</font>

845
00:27:34,950 --> 00:27:38,190
the tool I basically give you the option

846
00:27:37,020 --> 00:27:40,200
that<font color="#E5E5E5"> if you want to run a straight</font>

847
00:27:38,190 --> 00:27:43,020
<font color="#E5E5E5">powershell command then it will handle</font>

848
00:27:40,200 --> 00:27:45,870
<font color="#CCCCCC">boss level office Gatien that then wraps</font>

849
00:27:43,020 --> 00:27:47,700
around PowerShell level<font color="#E5E5E5"> escaping of that</font>

850
00:27:45,870 --> 00:27:51,270
obfuscation both for PowerShell and<font color="#E5E5E5"> for</font>

851
00:27:47,700 --> 00:27:52,890
<font color="#CCCCCC">kxe so it's like it's</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> gave me a lot</font>

852
00:27:51,270 --> 00:27:54,750
<font color="#CCCCCC">of</font><font color="#E5E5E5"> headaches but that that's there</font>

853
00:27:52,890 --> 00:27:56,309
<font color="#CCCCCC">because</font><font color="#E5E5E5"> attacker is also like PowerShell</font>

854
00:27:54,750 --> 00:27:59,100
and I'm a bit obsessed with PowerShell

855
00:27:56,309 --> 00:28:01,290
<font color="#E5E5E5">so this doesn't have net stat anywhere</font>

856
00:27:59,100 --> 00:28:03,570
in it in the arguments itself<font color="#E5E5E5"> and we</font>

857
00:28:01,290 --> 00:28:05,490
didn't use<font color="#CCCCCC"> any special characters but if</font>

858
00:28:03,570 --> 00:28:08,220
you wanted<font color="#E5E5E5"> to you could totally do that</font>

859
00:28:05,490 --> 00:28:09,570
<font color="#E5E5E5">so you could randomize the casing you</font>

860
00:28:08,220 --> 00:28:11,220
could remove<font color="#CCCCCC"> whitespace you could add</font>

861
00:28:09,570 --> 00:28:12,928
whitespace<font color="#E5E5E5"> you can do commas and</font>

862
00:28:11,220 --> 00:28:14,490
semicolons<font color="#CCCCCC"> tons of carrots</font><font color="#E5E5E5"> and even</font>

863
00:28:12,929 --> 00:28:17,280
<font color="#E5E5E5">parentheses if you wanted and it would</font>

864
00:28:14,490 --> 00:28:18,870
run just<font color="#CCCCCC"> fine but you still have net</font>

865
00:28:17,280 --> 00:28:20,420
<font color="#CCCCCC">stat in the arguments okay well we saw</font>

866
00:28:18,870 --> 00:28:23,100
<font color="#CCCCCC">before we use those double quotes right</font>

867
00:28:20,420 --> 00:28:24,750
boom<font color="#E5E5E5"> double quotes works perfectly fine</font>

868
00:28:23,100 --> 00:28:26,820
<font color="#E5E5E5">if you'll notice that the double quotes</font>

869
00:28:24,750 --> 00:28:28,140
are side by<font color="#CCCCCC"> side so a really interesting</font>

870
00:28:26,820 --> 00:28:30,000
challenge came what if I want

871
00:28:28,140 --> 00:28:32,160
non-adjacent double quotes like that

872
00:28:30,000 --> 00:28:33,900
second option<font color="#E5E5E5"> this is extremely</font>

873
00:28:32,160 --> 00:28:35,850
<font color="#E5E5E5">challenging</font><font color="#CCCCCC"> because there's no way</font><font color="#E5E5E5"> to</font>

874
00:28:33,900 --> 00:28:38,460
actually escape double quotes in command

875
00:28:35,850 --> 00:28:39,480
<font color="#CCCCCC">on</font><font color="#E5E5E5"> axiom so we can't do this this</font>

876
00:28:38,460 --> 00:28:41,700
actually fails

877
00:28:39,480 --> 00:28:44,070
so the<font color="#CCCCCC"> solution I</font><font color="#E5E5E5"> came up to this was a</font>

878
00:28:41,700 --> 00:28:45,240
<font color="#CCCCCC">four part solution because we have to</font>

879
00:28:44,070 --> 00:28:48,480
have<font color="#E5E5E5"> evenly paired double quotes</font>

880
00:28:45,240 --> 00:28:50,429
<font color="#E5E5E5">throughout the entire command so the</font>

881
00:28:48,480 --> 00:28:52,620
first step is anywhere where I want a

882
00:28:50,429 --> 00:28:55,260
single or<font color="#E5E5E5"> it let me</font><font color="#CCCCCC"> an on pair two</font>

883
00:28:52,620 --> 00:28:57,629
double quote<font color="#E5E5E5"> I make it paired so we have</font>

884
00:28:55,260 --> 00:28:59,910
Co quote in<font color="#E5E5E5"> the later quote quote next</font>

885
00:28:57,630 --> 00:29:01,650
<font color="#E5E5E5">I'm gonna set</font><font color="#CCCCCC"> a custom variable let's</font>

886
00:28:59,910 --> 00:29:04,350
just call it quotes<font color="#E5E5E5"> and is the value</font>

887
00:29:01,650 --> 00:29:05,970
quote quote third

888
00:29:04,350 --> 00:29:07,770
the final variable<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> gonna use that</font>

889
00:29:05,970 --> 00:29:09,419
<font color="#E5E5E5">fancy string substitution</font><font color="#CCCCCC"> that command</font>

890
00:29:07,770 --> 00:29:11,580
<font color="#E5E5E5">that actually has and say anywhere where</font>

891
00:29:09,419 --> 00:29:14,250
we have quote quote<font color="#CCCCCC"> I want to replace it</font>

892
00:29:11,580 --> 00:29:16,379
<font color="#CCCCCC">with one double quote</font><font color="#E5E5E5"> but if I put one</font>

893
00:29:14,250 --> 00:29:18,600
double<font color="#E5E5E5"> quote here I'm now unbalanced in</font>

894
00:29:16,380 --> 00:29:20,580
the whole command<font color="#E5E5E5"> and it doesn't work so</font>

895
00:29:18,600 --> 00:29:22,168
how can<font color="#E5E5E5"> I have</font><font color="#CCCCCC"> in-memory it'd be an odd</font>

896
00:29:20,580 --> 00:29:24,720
<font color="#CCCCCC">number of double quotes</font><font color="#E5E5E5"> but on the</font>

897
00:29:22,169 --> 00:29:28,049
command line an even number<font color="#E5E5E5"> and the</font>

898
00:29:24,720 --> 00:29:30,000
answer is I can<font color="#E5E5E5"> take a substring of the</font>

899
00:29:28,049 --> 00:29:33,270
quotes variable and<font color="#E5E5E5"> just get one double</font>

900
00:29:30,000 --> 00:29:35,370
quote but this<font color="#E5E5E5"> doesn't work because the</font>

901
00:29:33,270 --> 00:29:37,500
<font color="#E5E5E5">percents for that quotes variable are</font>

902
00:29:35,370 --> 00:29:39,658
inside the<font color="#E5E5E5"> percent of the final variable</font>

903
00:29:37,500 --> 00:29:41,730
<font color="#E5E5E5">so this got me thinking is there a way</font>

904
00:29:39,659 --> 00:29:43,620
<font color="#E5E5E5">that I and this doesn't work because</font><font color="#CCCCCC"> the</font>

905
00:29:41,730 --> 00:29:45,360
<font color="#CCCCCC">percents</font><font color="#E5E5E5"> get all mismatched</font><font color="#CCCCCC"> is there a</font>

906
00:29:43,620 --> 00:29:47,668
way I can<font color="#E5E5E5"> extract a variable value</font>

907
00:29:45,360 --> 00:29:50,580
without percents<font color="#CCCCCC"> the answer is actually</font>

908
00:29:47,669 --> 00:29:54,240
surprising<font color="#E5E5E5"> if you're running Vista or</font>

909
00:29:50,580 --> 00:29:56,189
<font color="#CCCCCC">later you can use</font><font color="#E5E5E5"> this flag Vista with</font>

910
00:29:54,240 --> 00:29:58,860
the flag<font color="#CCCCCC"> Vista</font><font color="#E5E5E5"> you can then use</font>

911
00:29:56,190 --> 00:30:00,390
exclamation<font color="#E5E5E5"> points and this resolves the</font>

912
00:29:58,860 --> 00:30:02,189
variable so now exclamation points for

913
00:30:00,390 --> 00:30:04,620
the quotes variable inside<font color="#CCCCCC"> of print</font>

914
00:30:02,190 --> 00:30:06,240
<font color="#E5E5E5">percents for the other variable and our</font>

915
00:30:04,620 --> 00:30:09,539
command works perfectly fine with

916
00:30:06,240 --> 00:30:11,400
unpaired double quotes<font color="#E5E5E5"> awesome now I</font>

917
00:30:09,539 --> 00:30:12,870
have to<font color="#E5E5E5"> admit this</font><font color="#CCCCCC"> is a</font><font color="#E5E5E5"> little bit of a</font>

918
00:30:11,400 --> 00:30:14,309
troll<font color="#E5E5E5"> there is no such thing as the</font>

919
00:30:12,870 --> 00:30:16,408
<font color="#E5E5E5">vista flag but that command does work</font>

920
00:30:14,309 --> 00:30:18,539
and the<font color="#E5E5E5"> answer is if you look at</font>

921
00:30:16,409 --> 00:30:20,340
commands help menu there<font color="#CCCCCC"> is this v on</font>

922
00:30:18,539 --> 00:30:22,650
which is for enabling delayed

923
00:30:20,340 --> 00:30:25,740
environment variable expansion but what

924
00:30:22,650 --> 00:30:27,840
I found is that<font color="#E5E5E5"> you can do V on vo v :</font>

925
00:30:25,740 --> 00:30:29,929
<font color="#E5E5E5">as long as it's not</font><font color="#CCCCCC"> V</font><font color="#E5E5E5"> : off and a couple</font>

926
00:30:27,840 --> 00:30:32,309
other weird variations you can do<font color="#CCCCCC"> v</font>

927
00:30:29,929 --> 00:30:36,240
literally<font color="#CCCCCC"> almost anything under the Sun</font>

928
00:30:32,309 --> 00:30:38,220
<font color="#E5E5E5">and it works now that's weird right so</font>

929
00:30:36,240 --> 00:30:39,690
other things<font color="#E5E5E5"> you can do is office gate</font>

930
00:30:38,220 --> 00:30:41,460
environment variable names<font color="#E5E5E5"> to be special</font>

931
00:30:39,690 --> 00:30:43,080
characters<font color="#E5E5E5"> or even whitespace in</font>

932
00:30:41,460 --> 00:30:44,700
differing<font color="#E5E5E5"> links following any one non</font>

933
00:30:43,080 --> 00:30:46,649
whitespace character<font color="#E5E5E5"> so if you're a</font>

934
00:30:44,700 --> 00:30:50,039
cruel attacker you can get pretty pretty

935
00:30:46,650 --> 00:30:51,480
nasty here so dude<font color="#CCCCCC"> you call yourself a</font>

936
00:30:50,039 --> 00:30:53,789
defender but why you do<font color="#E5E5E5"> this to yourself</font>

937
00:30:51,480 --> 00:30:55,080
<font color="#E5E5E5">and to</font><font color="#CCCCCC"> the rest</font><font color="#E5E5E5"> of us well I started</font>

938
00:30:53,789 --> 00:30:56,640
with concatenation because we've already

939
00:30:55,080 --> 00:30:58,710
seen baby steps of this being<font color="#E5E5E5"> done in</font>

940
00:30:56,640 --> 00:31:01,140
the wild before<font color="#E5E5E5"> this research and</font>

941
00:30:58,710 --> 00:31:03,090
typically it was<font color="#E5E5E5"> in the the context of</font>

942
00:31:01,140 --> 00:31:04,679
malicious link files concatenated

943
00:31:03,090 --> 00:31:07,350
PowerShell sometimes having garbage

944
00:31:04,679 --> 00:31:08,610
concatenations in there<font color="#CCCCCC"> but yeah this is</font>

945
00:31:07,350 --> 00:31:10,320
<font color="#E5E5E5">stuff that we've seen attackers do just</font>

946
00:31:08,610 --> 00:31:11,668
for<font color="#E5E5E5"> one string of a command but we've</font>

947
00:31:10,320 --> 00:31:16,168
<font color="#E5E5E5">never seen them apply it to a whole</font>

948
00:31:11,669 --> 00:31:17,070
<font color="#E5E5E5">command before this research so the next</font>

949
00:31:16,169 --> 00:31:18,210
<font color="#E5E5E5">three we're going to look at are things</font>

950
00:31:17,070 --> 00:31:19,800
<font color="#CCCCCC">that we've not</font><font color="#E5E5E5"> seen</font>

951
00:31:18,210 --> 00:31:21,450
anything at all in the wild for and when

952
00:31:19,800 --> 00:31:22,860
I say that<font color="#CCCCCC"> what that</font><font color="#E5E5E5"> means</font><font color="#CCCCCC"> is that for</font>

953
00:31:21,450 --> 00:31:23,430
<font color="#CCCCCC">the nine</font><font color="#E5E5E5"> months of</font><font color="#CCCCCC"> research that</font><font color="#E5E5E5"> went</font>

954
00:31:22,860 --> 00:31:25,050
<font color="#CCCCCC">into</font><font color="#E5E5E5"> this</font>

955
00:31:23,430 --> 00:31:27,300
I was looking<font color="#CCCCCC"> across public</font><font color="#E5E5E5"> and internal</font>

956
00:31:25,050 --> 00:31:28,770
<font color="#CCCCCC">foul repositories</font><font color="#E5E5E5"> sandbox execution</font>

957
00:31:27,300 --> 00:31:30,000
reports and writing protections<font color="#E5E5E5"> for over</font>

958
00:31:28,770 --> 00:31:32,400
<font color="#CCCCCC">10 million</font><font color="#E5E5E5"> endpoints all around the</font>

959
00:31:30,000 --> 00:31:33,840
world and all<font color="#E5E5E5"> of our clients to see do</font>

960
00:31:32,400 --> 00:31:35,910
<font color="#E5E5E5">we do we have any of this kind</font><font color="#CCCCCC"> of stuff</font>

961
00:31:33,840 --> 00:31:38,250
going<font color="#CCCCCC"> on in the wild and we didn't see</font>

962
00:31:35,910 --> 00:31:40,200
any<font color="#E5E5E5"> of it in the context we're talking</font>

963
00:31:38,250 --> 00:31:41,640
about here<font color="#E5E5E5"> so</font><font color="#CCCCCC"> number two we talked about</font>

964
00:31:40,200 --> 00:31:45,030
concatenation what about the for loop

965
00:31:41,640 --> 00:31:47,370
for loop is really really<font color="#CCCCCC"> interesting if</font>

966
00:31:45,030 --> 00:31:48,750
you go<font color="#CCCCCC"> to the</font><font color="#E5E5E5"> command help menu when we</font>

967
00:31:47,370 --> 00:31:50,729
look at<font color="#CCCCCC"> that</font><font color="#E5E5E5"> V on for the variable</font>

968
00:31:48,750 --> 00:31:52,290
expansion stuff<font color="#E5E5E5"> it also says the virus</font>

969
00:31:50,730 --> 00:31:53,790
attacks<font color="#E5E5E5"> expands variable blah blah blah</font>

970
00:31:52,290 --> 00:31:55,830
<font color="#E5E5E5">which is quite a different</font><font color="#CCCCCC"> thing when</font>

971
00:31:53,790 --> 00:31:57,659
<font color="#E5E5E5">inside of a for</font><font color="#CCCCCC"> loop that is an</font>

972
00:31:55,830 --> 00:32:00,270
<font color="#E5E5E5">understatement</font><font color="#CCCCCC"> the for</font><font color="#E5E5E5"> loop gives you</font>

973
00:31:57,660 --> 00:32:01,680
<font color="#E5E5E5">crazy cool capabilities so let's check</font>

974
00:32:00,270 --> 00:32:03,480
<font color="#CCCCCC">it out</font><font color="#E5E5E5"> let's go back to our netstat</font>

975
00:32:01,680 --> 00:32:06,300
command<font color="#E5E5E5"> we want to make sure we have</font>

976
00:32:03,480 --> 00:32:09,330
that<font color="#CCCCCC"> /b for variable expansion and for</font>

977
00:32:06,300 --> 00:32:11,310
<font color="#CCCCCC">slash C so what attackers</font><font color="#E5E5E5"> rename</font>

978
00:32:09,330 --> 00:32:13,290
binaries<font color="#E5E5E5"> I don't like to rely on binary</font>

979
00:32:11,310 --> 00:32:15,600
names in any of my detection so<font color="#E5E5E5"> slash</font><font color="#CCCCCC"> C</font>

980
00:32:13,290 --> 00:32:17,220
has always been<font color="#E5E5E5"> a nice kind of anchor to</font>

981
00:32:15,600 --> 00:32:19,949
say this is potentially a command

982
00:32:17,220 --> 00:32:21,960
execution<font color="#E5E5E5"> or looking for like slash K or</font>

983
00:32:19,950 --> 00:32:24,330
Q or<font color="#CCCCCC"> some of</font><font color="#E5E5E5"> that kind</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> stuff but if</font>

984
00:32:21,960 --> 00:32:26,120
you actually look<font color="#E5E5E5"> um if you look</font><font color="#CCCCCC"> in</font>

985
00:32:24,330 --> 00:32:29,760
commands help menu if<font color="#E5E5E5"> you scroll</font><font color="#CCCCCC"> down</font>

986
00:32:26,120 --> 00:32:33,689
for compatibility reasons<font color="#CCCCCC"> /r is the same</font>

987
00:32:29,760 --> 00:32:35,910
as<font color="#CCCCCC"> /c what is that true</font><font color="#E5E5E5"> surely you can't</font>

988
00:32:33,690 --> 00:32:38,310
replace<font color="#CCCCCC"> that /c with</font><font color="#E5E5E5"> a /r and it works</font>

989
00:32:35,910 --> 00:32:40,560
<font color="#E5E5E5">turns out you totally can and the way I</font>

990
00:32:38,310 --> 00:32:42,210
remember these anchors<font color="#E5E5E5"> are</font><font color="#CCCCCC"> cr-v you have</font>

991
00:32:40,560 --> 00:32:43,770
slash c and slash art which is<font color="#CCCCCC"> the</font>

992
00:32:42,210 --> 00:32:46,380
typical<font color="#CCCCCC"> c flag and then the V</font><font color="#E5E5E5"> for</font>

993
00:32:43,770 --> 00:32:48,690
variable expansion so C V<font color="#CCCCCC"> and R are</font>

994
00:32:46,380 --> 00:32:50,460
really interesting to<font color="#CCCCCC"> look for this</font><font color="#E5E5E5"> is</font>

995
00:32:48,690 --> 00:32:51,690
<font color="#E5E5E5">also an amazing troll portunity remember</font>

996
00:32:50,460 --> 00:32:54,360
how we could put anything<font color="#E5E5E5"> we wanted to</font>

997
00:32:51,690 --> 00:32:57,630
<font color="#E5E5E5">after</font><font color="#CCCCCC"> that slash V well any space</font>

998
00:32:54,360 --> 00:32:59,310
leading<font color="#E5E5E5"> up to that /r or C you could put</font>

999
00:32:57,630 --> 00:33:01,320
anything you want<font color="#E5E5E5"> in there like this</font>

1000
00:32:59,310 --> 00:33:03,330
command actually<font color="#E5E5E5"> works</font><font color="#CCCCCC"> it doesn't</font><font color="#E5E5E5"> show</font>

1001
00:33:01,320 --> 00:33:05,010
<font color="#CCCCCC">the gif but that's</font><font color="#E5E5E5"> crazy right</font>

1002
00:33:03,330 --> 00:33:06,750
<font color="#CCCCCC">like attacker</font><font color="#E5E5E5"> should be putting funny</font>

1003
00:33:05,010 --> 00:33:08,220
messages to us defenders to make her you

1004
00:33:06,750 --> 00:33:10,470
know brighten our days a little<font color="#E5E5E5"> bit</font>

1005
00:33:08,220 --> 00:33:12,540
right<font color="#CCCCCC"> what if you have an analyst that</font>

1006
00:33:10,470 --> 00:33:15,150
sees this<font color="#E5E5E5"> do they think it's just</font>

1007
00:33:12,540 --> 00:33:16,530
echoing<font color="#E5E5E5"> the path variable</font><font color="#CCCCCC"> what</font><font color="#E5E5E5"> about all</font>

1008
00:33:15,150 --> 00:33:18,450
this white<font color="#E5E5E5"> space down to this other</font>

1009
00:33:16,530 --> 00:33:21,600
command way down here that's because

1010
00:33:18,450 --> 00:33:23,850
backslash<font color="#E5E5E5"> D has zero meaning /c is what</font>

1011
00:33:21,600 --> 00:33:25,679
we're looking<font color="#CCCCCC"> for</font><font color="#E5E5E5"> or /r in this case so</font>

1012
00:33:23,850 --> 00:33:27,659
if you run<font color="#E5E5E5"> this next that actually runs</font>

1013
00:33:25,680 --> 00:33:29,400
<font color="#E5E5E5">so if you're doing</font><font color="#CCCCCC"> analysis and hit</font>

1014
00:33:27,660 --> 00:33:31,900
review and<font color="#E5E5E5"> your horizontal scroll bars</font>

1015
00:33:29,400 --> 00:33:33,520
<font color="#E5E5E5">really small</font><font color="#CCCCCC"> you should probably</font>

1016
00:33:31,900 --> 00:33:34,720
all over or<font color="#E5E5E5"> just enable line</font><font color="#CCCCCC"> wrap so</font>

1017
00:33:33,520 --> 00:33:36,100
<font color="#E5E5E5">that you're not missing some halo that's</font>

1018
00:33:34,720 --> 00:33:38,290
like a thousand characters down the line

1019
00:33:36,100 --> 00:33:41,560
<font color="#E5E5E5">and command</font><font color="#CCCCCC"> actually has a command line</font>

1020
00:33:38,290 --> 00:33:44,830
argument<font color="#E5E5E5"> limit of 8191 characters that's</font>

1021
00:33:41,560 --> 00:33:46,750
a lot of<font color="#E5E5E5"> space</font><font color="#CCCCCC"> to work with</font><font color="#E5E5E5"> so anyways</font>

1022
00:33:44,830 --> 00:33:48,159
as on the side let's get back to it<font color="#CCCCCC"> what</font>

1023
00:33:46,750 --> 00:33:50,230
we can do is set the unique characters

1024
00:33:48,160 --> 00:33:52,360
for<font color="#E5E5E5"> a payload into a variable let's call</font>

1025
00:33:50,230 --> 00:33:54,940
it unique<font color="#E5E5E5"> and</font><font color="#CCCCCC"> then in the for loop</font><font color="#E5E5E5"> we're</font>

1026
00:33:52,360 --> 00:33:58,570
<font color="#E5E5E5">going to set the indexes for our payload</font>

1027
00:33:54,940 --> 00:34:01,600
<font color="#CCCCCC">so to form netstat we need 0 1 2</font><font color="#E5E5E5"> 3 and</font>

1028
00:33:58,570 --> 00:34:03,070
the rest for net stat space<font color="#CCCCCC"> ano and then</font>

1029
00:34:01,600 --> 00:34:05,199
we're going<font color="#E5E5E5"> to set a delimiter that is</font>

1030
00:34:03,070 --> 00:34:06,610
not any<font color="#CCCCCC"> of</font><font color="#E5E5E5"> those values and then for</font>

1031
00:34:05,200 --> 00:34:08,470
<font color="#CCCCCC">each item</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> for loop we're going to</font>

1032
00:34:06,610 --> 00:34:10,418
set the substring<font color="#E5E5E5"> of that variable of</font>

1033
00:34:08,469 --> 00:34:12,399
that index<font color="#CCCCCC"> and we're going</font><font color="#E5E5E5"> to append it</font>

1034
00:34:10,418 --> 00:34:14,290
to<font color="#CCCCCC"> a new variable called final and then</font>

1035
00:34:12,399 --> 00:34:16,480
we're<font color="#E5E5E5"> going to execute</font><font color="#CCCCCC"> final if we hit</font>

1036
00:34:14,290 --> 00:34:17,800
<font color="#E5E5E5">that</font><font color="#CCCCCC"> endpoint delimiter and so this goes</font>

1037
00:34:16,480 --> 00:34:20,380
through interactively in standard output

1038
00:34:17,800 --> 00:34:21,940
<font color="#E5E5E5">you'll see every iteration adding one</font>

1039
00:34:20,380 --> 00:34:23,850
character at a time<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the command but</font>

1040
00:34:21,940 --> 00:34:26,350
none of it hits<font color="#CCCCCC"> command-line arguments</font>

1041
00:34:23,850 --> 00:34:27,399
so it looks<font color="#CCCCCC"> something like this</font><font color="#E5E5E5"> it's</font>

1042
00:34:26,350 --> 00:34:29,739
<font color="#E5E5E5">actually fun</font><font color="#CCCCCC"> to watch</font><font color="#E5E5E5"> is kinda like the</font>

1043
00:34:27,399 --> 00:34:30,909
<font color="#E5E5E5">matrix as it Scrolls down</font><font color="#CCCCCC"> and then if</font>

1044
00:34:29,739 --> 00:34:32,770
you want to up the<font color="#CCCCCC"> game</font><font color="#E5E5E5"> you can add</font>

1045
00:34:30,909 --> 00:34:35,350
additional characters in there<font color="#E5E5E5"> and</font>

1046
00:34:32,770 --> 00:34:37,210
<font color="#E5E5E5">adjust the index values as</font><font color="#CCCCCC"> well and as</font>

1047
00:34:35,350 --> 00:34:38,830
with any<font color="#E5E5E5"> of the other ones</font><font color="#CCCCCC"> d'Assaut</font>

1048
00:34:37,210 --> 00:34:41,710
<font color="#CCCCCC">station will automatically add the</font>

1049
00:34:38,830 --> 00:34:44,319
<font color="#CCCCCC">whitespace commas and semicolons carrots</font>

1050
00:34:41,710 --> 00:34:47,490
<font color="#CCCCCC">parentheses and for fun explicit signing</font>

1051
00:34:44,320 --> 00:34:49,540
of integers so it can get pretty<font color="#E5E5E5"> crazy</font>

1052
00:34:47,489 --> 00:34:50,859
and there's another<font color="#E5E5E5"> show opportunity</font>

1053
00:34:49,540 --> 00:34:52,630
here in the tool you<font color="#CCCCCC"> can actually put</font>

1054
00:34:50,860 --> 00:34:54,370
custom messages to start your unique

1055
00:34:52,630 --> 00:34:55,659
variable and then any characters that

1056
00:34:54,370 --> 00:34:57,040
<font color="#CCCCCC">are missing from your actual</font><font color="#E5E5E5"> input</font>

1057
00:34:55,659 --> 00:34:58,720
command it'll just<font color="#E5E5E5"> add those at the</font><font color="#CCCCCC"> end</font>

1058
00:34:57,040 --> 00:34:59,980
<font color="#CCCCCC">so again there's nothing</font><font color="#E5E5E5"> to say</font>

1059
00:34:58,720 --> 00:35:01,390
attackers can't have some fun<font color="#CCCCCC"> and</font><font color="#E5E5E5"> make</font>

1060
00:34:59,980 --> 00:35:03,520
defenders<font color="#CCCCCC"> just you know jobs a little</font>

1061
00:35:01,390 --> 00:35:06,910
little interesting and happy during<font color="#E5E5E5"> the</font>

1062
00:35:03,520 --> 00:35:08,230
day the third one is reversal this<font color="#E5E5E5"> is</font>

1063
00:35:06,910 --> 00:35:09,940
also using the for loop but using the

1064
00:35:08,230 --> 00:35:12,190
<font color="#CCCCCC">slash L so instead of having</font><font color="#E5E5E5"> to specify</font>

1065
00:35:09,940 --> 00:35:13,810
<font color="#CCCCCC">every index you just have the start</font>

1066
00:35:12,190 --> 00:35:15,310
<font color="#E5E5E5">index the in index and then the</font>

1067
00:35:13,810 --> 00:35:18,790
decrement or<font color="#CCCCCC"> increment or to basically</font>

1068
00:35:15,310 --> 00:35:20,170
<font color="#CCCCCC">traverse in the forward or reverse and</font>

1069
00:35:18,790 --> 00:35:21,509
so there's other similar<font color="#E5E5E5"> things you can</font>

1070
00:35:20,170 --> 00:35:26,320
do to make it<font color="#E5E5E5"> a little more complicated</font>

1071
00:35:21,510 --> 00:35:27,610
<font color="#E5E5E5">kind</font><font color="#CCCCCC"> of go through</font><font color="#E5E5E5"> here skip that the</font>

1072
00:35:26,320 --> 00:35:29,470
last one<font color="#E5E5E5"> is fin coding so we talked</font>

1073
00:35:27,610 --> 00:35:31,120
about concatenation<font color="#E5E5E5"> we then have the for</font>

1074
00:35:29,470 --> 00:35:32,830
loop<font color="#E5E5E5"> doing for coding or for loop and</font>

1075
00:35:31,120 --> 00:35:34,420
coding we just looked at reversal and

1076
00:35:32,830 --> 00:35:36,130
then fin coding is that what the

1077
00:35:34,420 --> 00:35:38,050
original POC was was kind of<font color="#E5E5E5"> the fin</font>

1078
00:35:36,130 --> 00:35:39,160
coded command stuff<font color="#E5E5E5"> but there's a lot of</font>

1079
00:35:38,050 --> 00:35:41,050
things<font color="#E5E5E5"> that I learned that made this a</font>

1080
00:35:39,160 --> 00:35:42,399
<font color="#E5E5E5">lot better over</font><font color="#CCCCCC"> nine</font><font color="#E5E5E5"> months of research</font>

1081
00:35:41,050 --> 00:35:44,170
<font color="#E5E5E5">so basically you take commands like</font>

1082
00:35:42,400 --> 00:35:45,310
<font color="#E5E5E5">let's take every T let's replace it with</font>

1083
00:35:44,170 --> 00:35:47,290
a capital<font color="#CCCCCC"> z</font>

1084
00:35:45,310 --> 00:35:49,630
then later let's replace<font color="#CCCCCC"> capital Z in</font>

1085
00:35:47,290 --> 00:35:51,640
memory with lowercase T and then execute

1086
00:35:49,630 --> 00:35:52,660
that sub<font color="#E5E5E5"> one variable and then we</font><font color="#CCCCCC"> go</font>

1087
00:35:51,640 --> 00:35:54,490
through<font color="#CCCCCC"> another layer and let's replace</font>

1088
00:35:52,660 --> 00:35:56,109
all the A's with<font color="#CCCCCC"> sevens</font><font color="#E5E5E5"> and then later</font>

1089
00:35:54,490 --> 00:35:57,939
replace the sevens with a<font color="#E5E5E5"> z' and then</font>

1090
00:35:56,110 --> 00:36:00,520
execute that variable<font color="#E5E5E5"> and go as</font><font color="#CCCCCC"> many</font>

1091
00:35:57,940 --> 00:36:02,830
<font color="#E5E5E5">layers deep as you</font><font color="#CCCCCC"> want so on the bottom</font>

1092
00:36:00,520 --> 00:36:05,440
<font color="#E5E5E5">is an example from the original POC now</font>

1093
00:36:02,830 --> 00:36:08,140
at that<font color="#E5E5E5"> time</font><font color="#CCCCCC"> I didn't know</font><font color="#E5E5E5"> about /v for</font>

1094
00:36:05,440 --> 00:36:10,120
expansion<font color="#E5E5E5"> so every single substitution I</font>

1095
00:36:08,140 --> 00:36:12,250
<font color="#E5E5E5">spawned the child process so this child</font>

1096
00:36:10,120 --> 00:36:14,080
process<font color="#E5E5E5"> tree was like command command</font>

1097
00:36:12,250 --> 00:36:16,270
command command command<font color="#E5E5E5"> and because of</font>

1098
00:36:14,080 --> 00:36:19,870
<font color="#CCCCCC">that I had</font><font color="#E5E5E5"> to escape all the ampersands</font>

1099
00:36:16,270 --> 00:36:21,759
so I had one layer of escaping<font color="#CCCCCC"> two</font>

1100
00:36:19,870 --> 00:36:23,259
layers three layers so basically<font color="#CCCCCC"> after</font>

1101
00:36:21,760 --> 00:36:25,060
three layers is like half your<font color="#E5E5E5"> command</font>

1102
00:36:23,260 --> 00:36:27,460
was<font color="#CCCCCC"> caressed it looked</font><font color="#E5E5E5"> really bad really</font>

1103
00:36:25,060 --> 00:36:29,650
obvious but<font color="#CCCCCC"> none of</font><font color="#E5E5E5"> that is an issue</font><font color="#CCCCCC"> in</font>

1104
00:36:27,460 --> 00:36:32,140
the<font color="#CCCCCC"> in the new form because variable</font>

1105
00:36:29,650 --> 00:36:34,420
expansion makes that really<font color="#CCCCCC"> easy</font><font color="#E5E5E5"> so</font>

1106
00:36:32,140 --> 00:36:35,920
let's look<font color="#E5E5E5"> at a demo of the tool please</font>

1107
00:36:34,420 --> 00:36:38,230
don't use this<font color="#E5E5E5"> for evil and if you're</font>

1108
00:36:35,920 --> 00:36:39,550
<font color="#CCCCCC">fin 7/8 or apt</font><font color="#E5E5E5"> 32 and define evil</font>

1109
00:36:38,230 --> 00:36:41,020
differently than I do just<font color="#E5E5E5"> don't use</font><font color="#CCCCCC"> it</font>

1110
00:36:39,550 --> 00:36:44,530
all I know you still will<font color="#E5E5E5"> but I still</font>

1111
00:36:41,020 --> 00:36:46,600
say it<font color="#CCCCCC"> the code is up in my</font><font color="#E5E5E5"> github</font><font color="#CCCCCC"> and</font>

1112
00:36:44,530 --> 00:36:47,590
<font color="#E5E5E5">again any input you</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> there's a</font>

1113
00:36:46,600 --> 00:36:48,130
<font color="#E5E5E5">couple different</font><font color="#CCCCCC"> things</font><font color="#E5E5E5"> you can do with</font>

1114
00:36:47,590 --> 00:36:50,530
it

1115
00:36:48,130 --> 00:36:51,790
if you know me I love animated ASCII art

1116
00:36:50,530 --> 00:36:53,890
with any of<font color="#E5E5E5"> my tools so this is the</font>

1117
00:36:51,790 --> 00:36:55,440
intro<font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of like video when you run</font>

1118
00:36:53,890 --> 00:36:58,810
the tool<font color="#E5E5E5"> just doing a little bit</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> fun</font>

1119
00:36:55,440 --> 00:37:00,520
<font color="#E5E5E5">colored office keishon there and then</font>

1120
00:36:58,810 --> 00:37:02,500
the<font color="#E5E5E5"> the uses the</font><font color="#CCCCCC"> same menu</font><font color="#E5E5E5"> as</font><font color="#CCCCCC"> the</font>

1121
00:37:00,520 --> 00:37:04,150
<font color="#E5E5E5">PowerShell office</font><font color="#CCCCCC"> Gatien tools so</font>

1122
00:37:02,500 --> 00:37:05,560
there's a<font color="#CCCCCC"> tutorial</font><font color="#E5E5E5"> help anything</font><font color="#CCCCCC"> in</font>

1123
00:37:04,150 --> 00:37:08,260
yellow<font color="#CCCCCC"> will take you to a new menu</font><font color="#E5E5E5"> and</font>

1124
00:37:05,560 --> 00:37:09,790
<font color="#CCCCCC">green actually executes</font><font color="#E5E5E5"> something so you</font>

1125
00:37:08,260 --> 00:37:10,990
<font color="#E5E5E5">can set</font><font color="#CCCCCC"> your commands</font><font color="#E5E5E5"> that your path to</font>

1126
00:37:09,790 --> 00:37:13,930
<font color="#CCCCCC">your commands you</font><font color="#E5E5E5"> can set the final</font>

1127
00:37:10,990 --> 00:37:15,850
binary to be command or<font color="#E5E5E5"> PowerShell</font><font color="#CCCCCC"> the</font>

1128
00:37:13,930 --> 00:37:17,500
first option is<font color="#CCCCCC"> just binary</font><font color="#E5E5E5"> so if you</font>

1129
00:37:15,850 --> 00:37:20,319
want<font color="#E5E5E5"> to get that weird obfuscated syntax</font>

1130
00:37:17,500 --> 00:37:21,700
for<font color="#E5E5E5"> a command or</font><font color="#CCCCCC"> PowerShell</font><font color="#E5E5E5"> then you</font>

1131
00:37:20,320 --> 00:37:24,220
<font color="#E5E5E5">don't have to put any input in for this</font>

1132
00:37:21,700 --> 00:37:26,049
<font color="#E5E5E5">it'll just spit out this this office get</font>

1133
00:37:24,220 --> 00:37:28,419
its syntax<font color="#CCCCCC"> so this is using</font><font color="#E5E5E5"> the for loop</font>

1134
00:37:26,050 --> 00:37:29,890
<font color="#CCCCCC">to create</font><font color="#E5E5E5"> the command</font><font color="#CCCCCC"> PowerShell</font><font color="#E5E5E5"> if we</font>

1135
00:37:28,420 --> 00:37:32,800
paste<font color="#E5E5E5"> it in the command</font><font color="#CCCCCC"> we'll see that</font>

1136
00:37:29,890 --> 00:37:34,839
it runs<font color="#E5E5E5"> PowerShell just fine so that's</font>

1137
00:37:32,800 --> 00:37:36,790
<font color="#E5E5E5">the binary section the next</font><font color="#CCCCCC"> one that</font>

1138
00:37:34,840 --> 00:37:39,940
<font color="#CCCCCC">we'll look at is actually</font><font color="#E5E5E5"> entering a</font>

1139
00:37:36,790 --> 00:37:42,610
<font color="#E5E5E5">command so in this case we'll just set a</font>

1140
00:37:39,940 --> 00:37:43,750
command so we'll do set command<font color="#E5E5E5"> that</font>

1141
00:37:42,610 --> 00:37:48,010
<font color="#E5E5E5">will do ping 8888</font>

1142
00:37:43,750 --> 00:37:49,570
<font color="#E5E5E5">and then we will go to encoding and then</font>

1143
00:37:48,010 --> 00:37:51,130
add<font color="#E5E5E5"> some encoding layers at any point</font>

1144
00:37:49,570 --> 00:37:52,420
you<font color="#E5E5E5"> can do show or show options and see</font>

1145
00:37:51,130 --> 00:37:54,460
<font color="#E5E5E5">what command you've set what office</font>

1146
00:37:52,420 --> 00:37:56,950
<font color="#CCCCCC">keishon options you've run the length of</font>

1147
00:37:54,460 --> 00:37:58,660
it<font color="#CCCCCC"> etcetera</font><font color="#E5E5E5"> and there's kind of profiles</font>

1148
00:37:56,950 --> 00:37:59,479
<font color="#E5E5E5">like 1 2</font><font color="#CCCCCC"> &</font><font color="#E5E5E5"> 3</font><font color="#CCCCCC"> of like low medium high</font>

1149
00:37:58,660 --> 00:38:01,190
office

1150
00:37:59,479 --> 00:38:03,589
if you go<font color="#E5E5E5"> into the underlying functions</font>

1151
00:38:01,190 --> 00:38:05,119
you get a lot<font color="#CCCCCC"> more options and when we</font>

1152
00:38:03,589 --> 00:38:07,339
talk<font color="#CCCCCC"> about the test harness for</font>

1153
00:38:05,119 --> 00:38:09,229
defenders at the end<font color="#CCCCCC"> then you'll see</font>

1154
00:38:07,339 --> 00:38:10,819
<font color="#E5E5E5">that it actually utilizes all the</font>

1155
00:38:09,229 --> 00:38:12,140
capabilities of<font color="#E5E5E5"> the tool whereas the</font>

1156
00:38:10,819 --> 00:38:13,670
interface which<font color="#CCCCCC"> is typically what script</font>

1157
00:38:12,140 --> 00:38:16,759
<font color="#E5E5E5">kitties are going to use is</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> be a</font>

1158
00:38:13,670 --> 00:38:18,289
limited set so lastly let's set a

1159
00:38:16,759 --> 00:38:19,849
<font color="#CCCCCC">PowerShell command</font><font color="#E5E5E5"> so we're gonna set</font>

1160
00:38:18,289 --> 00:38:21,440
<font color="#E5E5E5">our command and they're also gonna say</font>

1161
00:38:19,849 --> 00:38:23,900
set the final binary to be PowerShell

1162
00:38:21,440 --> 00:38:25,430
and<font color="#CCCCCC"> as you can</font><font color="#E5E5E5"> see here in show we have</font>

1163
00:38:23,900 --> 00:38:27,469
our command configured<font color="#E5E5E5"> to PowerShell</font>

1164
00:38:25,430 --> 00:38:28,729
<font color="#CCCCCC">everything's</font><font color="#E5E5E5"> good so we go into the</font>

1165
00:38:27,469 --> 00:38:31,039
payload office station then we'll do

1166
00:38:28,729 --> 00:38:32,359
catenation<font color="#E5E5E5"> and there's just a plain</font>

1167
00:38:31,039 --> 00:38:34,160
option<font color="#E5E5E5"> one</font><font color="#CCCCCC"> is going to</font><font color="#E5E5E5"> be zero</font>

1168
00:38:32,359 --> 00:38:35,359
additional special characters but<font color="#E5E5E5"> just</font>

1169
00:38:34,160 --> 00:38:37,460
do exactly<font color="#CCCCCC"> what you asked</font>

1170
00:38:35,359 --> 00:38:39,589
so that's concatenation or you can do

1171
00:38:37,460 --> 00:38:41,660
often<font color="#E5E5E5"> three which is</font><font color="#CCCCCC"> gonna be not the</font>

1172
00:38:39,589 --> 00:38:43,400
craziest obfuscation but crazy enough<font color="#CCCCCC"> to</font>

1173
00:38:41,660 --> 00:38:45,739
make a<font color="#E5E5E5"> point which there's your payload</font>

1174
00:38:43,400 --> 00:38:48,200
now so if we copy<font color="#CCCCCC"> that</font><font color="#E5E5E5"> then it runs</font>

1175
00:38:45,739 --> 00:38:52,759
<font color="#E5E5E5">PowerShell</font><font color="#CCCCCC"> and there's your command so</font>

1176
00:38:48,200 --> 00:38:54,558
for me when<font color="#E5E5E5"> I was trying</font><font color="#CCCCCC"> to debug this I</font>

1177
00:38:52,759 --> 00:38:56,150
figured what's<font color="#E5E5E5"> the worst</font><font color="#CCCCCC"> possible thing</font>

1178
00:38:54,559 --> 00:38:58,519
I<font color="#CCCCCC"> could have to deal with all the weird</font>

1179
00:38:56,150 --> 00:39:01,069
fringe cases<font color="#E5E5E5"> and I thought well</font><font color="#CCCCCC"> maybe if</font>

1180
00:38:58,519 --> 00:39:02,508
input<font color="#E5E5E5"> was office gated PowerShell</font>

1181
00:39:01,069 --> 00:39:04,009
command from all my other<font color="#E5E5E5"> tools that</font>

1182
00:39:02,509 --> 00:39:05,869
would be like my worst nightmare

1183
00:39:04,009 --> 00:39:07,430
so I<font color="#CCCCCC"> basically built</font><font color="#E5E5E5"> unit</font><font color="#CCCCCC"> test</font><font color="#E5E5E5"> and made</font>

1184
00:39:05,869 --> 00:39:09,559
that<font color="#E5E5E5"> my worst nightmare and it still</font>

1185
00:39:07,430 --> 00:39:11,359
haunts<font color="#E5E5E5"> me to this day</font><font color="#CCCCCC"> so I took this</font>

1186
00:39:09,559 --> 00:39:12,979
payload hosted at this bitly link<font color="#CCCCCC"> I ran</font>

1187
00:39:11,359 --> 00:39:15,859
it<font color="#CCCCCC"> through</font><font color="#E5E5E5"> invoke cradle crafter to get</font>

1188
00:39:12,979 --> 00:39:18,319
an office gated<font color="#E5E5E5"> PowerShell downloader</font><font color="#CCCCCC"> I</font>

1189
00:39:15,859 --> 00:39:20,089
then took that<font color="#E5E5E5"> office kid</font><font color="#CCCCCC"> content</font>

1190
00:39:18,319 --> 00:39:21,739
<font color="#CCCCCC">Rancher in BO confiscation</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> obfuscate</font>

1191
00:39:20,089 --> 00:39:23,299
<font color="#CCCCCC">over token layers</font><font color="#E5E5E5"> I then took that</font>

1192
00:39:21,739 --> 00:39:25,339
output ran in<font color="#E5E5E5"> there invoked ossification</font>

1193
00:39:23,299 --> 00:39:27,140
<font color="#E5E5E5">to get this for coding and this is bad</font>

1194
00:39:25,339 --> 00:39:28,519
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is the result and</font><font color="#E5E5E5"> this takes about</font>

1195
00:39:27,140 --> 00:39:30,650
twice as long<font color="#E5E5E5"> as what it should because</font>

1196
00:39:28,519 --> 00:39:32,689
my VM was like struggling<font color="#CCCCCC"> a hard with</font>

1197
00:39:30,650 --> 00:39:34,640
all this but all this<font color="#CCCCCC"> is in</font><font color="#E5E5E5"> standard</font>

1198
00:39:32,690 --> 00:39:37,039
output none of it hits<font color="#CCCCCC"> command-line</font><font color="#E5E5E5"> and</font>

1199
00:39:34,640 --> 00:39:39,078
how this<font color="#E5E5E5"> goes on for</font><font color="#CCCCCC"> awhile we fast</font>

1200
00:39:37,039 --> 00:39:41,960
forward just<font color="#E5E5E5"> a quick</font><font color="#CCCCCC"> saying</font><font color="#E5E5E5"> it's getting</font>

1201
00:39:39,079 --> 00:39:43,759
close it's getting close does it work

1202
00:39:41,960 --> 00:39:45,829
PowerShell<font color="#CCCCCC"> attack</font><font color="#E5E5E5"> yes</font>

1203
00:39:43,759 --> 00:39:48,609
<font color="#CCCCCC">yeah we're I mean to do my</font><font color="#E5E5E5"> video so you</font>

1204
00:39:45,829 --> 00:39:48,609
know it's gonna<font color="#CCCCCC"> work but</font>

1205
00:39:54,620 --> 00:40:01,170
that took<font color="#E5E5E5"> way</font><font color="#CCCCCC"> too much time to make that</font>

1206
00:39:56,940 --> 00:40:03,150
work<font color="#E5E5E5"> but it does so for the blue teamers</font>

1207
00:40:01,170 --> 00:40:04,440
how do you detect this<font color="#E5E5E5"> stuff</font><font color="#CCCCCC"> I have tons</font>

1208
00:40:03,150 --> 00:40:06,090
of<font color="#E5E5E5"> information in the white paper on</font>

1209
00:40:04,440 --> 00:40:07,350
<font color="#E5E5E5">this that goes into much more detail but</font>

1210
00:40:06,090 --> 00:40:08,790
<font color="#E5E5E5">some</font><font color="#CCCCCC"> high-level</font><font color="#E5E5E5"> things you can look for</font>

1211
00:40:07,350 --> 00:40:10,080
<font color="#CCCCCC">the presence of these special</font><font color="#E5E5E5"> characters</font>

1212
00:40:08,790 --> 00:40:12,390
but<font color="#E5E5E5"> there are plenty of tools that will</font>

1213
00:40:10,080 --> 00:40:13,860
<font color="#CCCCCC">gently use them you</font><font color="#E5E5E5"> can also look for</font>

1214
00:40:12,390 --> 00:40:15,900
<font color="#E5E5E5">this is actually really</font><font color="#CCCCCC"> valuable is</font>

1215
00:40:13,860 --> 00:40:17,010
looking for<font color="#E5E5E5"> these internal commands like</font>

1216
00:40:15,900 --> 00:40:18,540
figure<font color="#E5E5E5"> out what are the building blocks</font>

1217
00:40:17,010 --> 00:40:20,010
<font color="#E5E5E5">to</font><font color="#CCCCCC"> make all this stuff work because</font>

1218
00:40:18,540 --> 00:40:21,330
command is very<font color="#CCCCCC"> rigid so</font><font color="#E5E5E5"> that are only a</font>

1219
00:40:20,010 --> 00:40:23,130
certain<font color="#E5E5E5"> set of building blocks</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> need</font>

1220
00:40:21,330 --> 00:40:24,540
so why don't I look for the<font color="#E5E5E5"> presence</font><font color="#CCCCCC"> of</font>

1221
00:40:23,130 --> 00:40:26,670
those that<font color="#E5E5E5"> are then broken up by certain</font>

1222
00:40:24,540 --> 00:40:27,660
obfuscation characters looking for

1223
00:40:26,670 --> 00:40:30,120
<font color="#CCCCCC">substring</font><font color="#E5E5E5"> syntax</font>

1224
00:40:27,660 --> 00:40:31,589
also for loops<font color="#CCCCCC"> and again the</font><font color="#E5E5E5"> white paper</font>

1225
00:40:30,120 --> 00:40:32,850
has some sample reg X's even some

1226
00:40:31,590 --> 00:40:34,380
<font color="#CCCCCC">powershell functions to make that a</font>

1227
00:40:32,850 --> 00:40:36,480
<font color="#E5E5E5">little bit easier</font>

1228
00:40:34,380 --> 00:40:37,740
I suffer from FOMO which for me<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the</font>

1229
00:40:36,480 --> 00:40:39,840
fear<font color="#E5E5E5"> of missing office</font><font color="#CCCCCC"> keishon because</font>

1230
00:40:37,740 --> 00:40:42,000
I'm obsessed<font color="#CCCCCC"> with it so what I did</font><font color="#E5E5E5"> is I</font>

1231
00:40:39,840 --> 00:40:43,500
<font color="#E5E5E5">wrote a test harness to basically use</font>

1232
00:40:42,000 --> 00:40:44,910
the tool and<font color="#E5E5E5"> generate thousands upon</font>

1233
00:40:43,500 --> 00:40:46,680
thousands of samples<font color="#E5E5E5"> and then</font>

1234
00:40:44,910 --> 00:40:48,420
immediately test does it execute

1235
00:40:46,680 --> 00:40:50,580
<font color="#E5E5E5">properly does my syntax actually work</font>

1236
00:40:48,420 --> 00:40:52,620
<font color="#E5E5E5">and then did I detect this with my set</font>

1237
00:40:50,580 --> 00:40:54,540
of well-defined<font color="#E5E5E5"> rules and so this is the</font>

1238
00:40:52,620 --> 00:40:55,859
exact test harness that<font color="#E5E5E5"> I use for</font>

1239
00:40:54,540 --> 00:40:57,420
developing all the detection<font color="#CCCCCC"> is that we</font>

1240
00:40:55,860 --> 00:40:59,670
have in all of<font color="#CCCCCC"> our endpoint solutions</font>

1241
00:40:57,420 --> 00:41:01,380
and network solutions for this<font color="#CCCCCC"> that I</font>

1242
00:40:59,670 --> 00:41:03,120
spent like the<font color="#E5E5E5"> better half of a year</font>

1243
00:41:01,380 --> 00:41:04,710
working on<font color="#E5E5E5"> and so this was released with</font>

1244
00:41:03,120 --> 00:41:06,960
the<font color="#E5E5E5"> product as well so any defender can</font>

1245
00:41:04,710 --> 00:41:08,550
go and run<font color="#CCCCCC"> this to generate samples or I</font>

1246
00:41:06,960 --> 00:41:11,070
published over<font color="#CCCCCC"> 4,000</font><font color="#E5E5E5"> samples of</font>

1247
00:41:08,550 --> 00:41:13,620
obfuscated code from minimal<font color="#E5E5E5"> to maximum</font>

1248
00:41:11,070 --> 00:41:15,570
obfuscation<font color="#CCCCCC"> in text files</font><font color="#E5E5E5"> or event log</font>

1249
00:41:13,620 --> 00:41:17,609
files<font color="#E5E5E5"> for a system on Eid one or</font>

1250
00:41:15,570 --> 00:41:19,500
security<font color="#CCCCCC"> 46 ata so you can</font><font color="#E5E5E5"> literally</font>

1251
00:41:17,610 --> 00:41:21,710
<font color="#CCCCCC">take those files and without running</font><font color="#E5E5E5"> any</font>

1252
00:41:19,500 --> 00:41:24,690
of my PowerShell code you have<font color="#E5E5E5"> all these</font>

1253
00:41:21,710 --> 00:41:27,300
sample executions of this content to

1254
00:41:24,690 --> 00:41:28,920
start writing detections against so the

1255
00:41:27,300 --> 00:41:31,590
main takeaways attackers love office

1256
00:41:28,920 --> 00:41:33,030
gating stuff<font color="#CCCCCC"> it's cheap its effective I</font>

1257
00:41:31,590 --> 00:41:36,360
don't see it going away<font color="#CCCCCC"> anytime soon</font>

1258
00:41:33,030 --> 00:41:37,830
<font color="#CCCCCC">command</font><font color="#E5E5E5"> XE has a lot of new tricks that</font>

1259
00:41:36,360 --> 00:41:39,330
<font color="#E5E5E5">have actually been</font><font color="#CCCCCC"> around forever that</font>

1260
00:41:37,830 --> 00:41:41,910
you can put together and do some<font color="#E5E5E5"> really</font>

1261
00:41:39,330 --> 00:41:43,410
<font color="#E5E5E5">crazy stuff with and if we as defenders</font>

1262
00:41:41,910 --> 00:41:45,450
have to match the level<font color="#E5E5E5"> of creativity</font>

1263
00:41:43,410 --> 00:41:47,520
<font color="#E5E5E5">that attackers go through if they're</font>

1264
00:41:45,450 --> 00:41:49,379
doing<font color="#CCCCCC"> really</font><font color="#E5E5E5"> tasteful obfuscation</font><font color="#CCCCCC"> then</font>

1265
00:41:47,520 --> 00:41:51,570
why<font color="#E5E5E5"> can't we also do tasteful detection</font>

1266
00:41:49,380 --> 00:41:53,250
by no means am<font color="#E5E5E5"> I saying</font><font color="#CCCCCC"> it's easy</font>

1267
00:41:51,570 --> 00:41:56,190
<font color="#E5E5E5">because it's not and that's</font><font color="#CCCCCC"> why</font><font color="#E5E5E5"> we all</font>

1268
00:41:53,250 --> 00:41:57,930
have jobs but but yeah I<font color="#E5E5E5"> really hope</font>

1269
00:41:56,190 --> 00:41:58,980
<font color="#E5E5E5">that this overview</font><font color="#CCCCCC"> is helpful and</font><font color="#E5E5E5"> that</font>

1270
00:41:57,930 --> 00:42:02,160
the white paper will give you a lot more

1271
00:41:58,980 --> 00:42:04,530
<font color="#E5E5E5">insight there I'm on Twitter and please</font>

1272
00:42:02,160 --> 00:42:06,000
hit me<font color="#E5E5E5"> up for questions or anything like</font>

1273
00:42:04,530 --> 00:42:06,660
that and I<font color="#E5E5E5"> just want to say a huge</font><font color="#CCCCCC"> thank</font>

1274
00:42:06,000 --> 00:42:08,550
<font color="#E5E5E5">you</font>

1275
00:42:06,660 --> 00:42:10,200
hack in Paris and the whole crew<font color="#CCCCCC"> for</font>

1276
00:42:08,550 --> 00:42:11,370
<font color="#E5E5E5">having me out here for for your time and</font>

1277
00:42:10,200 --> 00:42:13,259
<font color="#E5E5E5">also to my team</font>

1278
00:42:11,370 --> 00:42:15,779
the advanced practices team at<font color="#CCCCCC"> fireEye</font>

1279
00:42:13,260 --> 00:42:17,100
mandiant and then a huge thanks<font color="#CCCCCC"> to my</font>

1280
00:42:15,780 --> 00:42:20,640
wife<font color="#E5E5E5"> Paige because this is over</font><font color="#CCCCCC"> a</font>

1281
00:42:17,100 --> 00:42:22,380
thousand hours<font color="#CCCCCC"> of work</font><font color="#E5E5E5"> and that's not</font>

1282
00:42:20,640 --> 00:42:24,480
the most fun thing to<font color="#CCCCCC"> watch me just code</font>

1283
00:42:22,380 --> 00:42:26,490
many hours<font color="#E5E5E5"> every night for like nine</font>

1284
00:42:24,480 --> 00:42:27,630
<font color="#CCCCCC">months</font><font color="#E5E5E5"> it was a huge effort and</font><font color="#CCCCCC"> it's to</font>

1285
00:42:26,490 --> 00:42:30,060
<font color="#E5E5E5">really want to say a big thank you to</font>

1286
00:42:27,630 --> 00:42:31,860
her for supporting me<font color="#CCCCCC"> and doing</font><font color="#E5E5E5"> that and</font>

1287
00:42:30,060 --> 00:42:33,840
so with that<font color="#E5E5E5"> again</font><font color="#CCCCCC"> I'm available</font><font color="#E5E5E5"> on</font>

1288
00:42:31,860 --> 00:42:36,720
<font color="#E5E5E5">Twitter</font><font color="#CCCCCC"> here's my blog the code and</font>

1289
00:42:33,840 --> 00:42:37,830
white paper are linked here<font color="#CCCCCC"> and before</font>

1290
00:42:36,720 --> 00:42:39,540
you see if anyone has questions I just

1291
00:42:37,830 --> 00:42:40,650
<font color="#E5E5E5">want to say again</font><font color="#CCCCCC"> thank you very</font><font color="#E5E5E5"> much I</font>

1292
00:42:39,540 --> 00:42:41,509
really<font color="#CCCCCC"> appreciate your</font><font color="#E5E5E5"> time and</font>

1293
00:42:40,650 --> 00:42:51,979
<font color="#E5E5E5">attention</font>

1294
00:42:41,510 --> 00:42:51,979
[Applause]

