1
00:00:05,359 --> 00:00:11,519
all right welcome thank you for coming

2
00:00:08,450 --> 00:00:13,768
today I am going to and I tend to move

3
00:00:11,519 --> 00:00:16,619
around a lot so I'm just gonna do this

4
00:00:13,769 --> 00:00:19,259
how about that today I'm gonna be

5
00:00:16,619 --> 00:00:23,580
talking about ironpython and a bunch of

6
00:00:19,260 --> 00:00:25,080
dotnet tradecraft so hopefully you'll be

7
00:00:23,580 --> 00:00:29,580
interested in what about to say this is

8
00:00:25,080 --> 00:00:31,948
basically a completely updated talk that

9
00:00:29,580 --> 00:00:34,079
I did a third week on last year and it's

10
00:00:31,949 --> 00:00:35,910
so updated that I mean all the content

11
00:00:34,079 --> 00:00:37,980
is different it just I guess it just has

12
00:00:35,910 --> 00:00:41,129
the same title and I'm gonna put to talk

13
00:00:37,980 --> 00:00:44,099
my ironpython dead tradecraft and I'm

14
00:00:41,129 --> 00:00:47,309
also be introducing a type of payload

15
00:00:44,100 --> 00:00:49,289
that you can use for both post

16
00:00:47,309 --> 00:00:52,019
exploitation or initial access that I've

17
00:00:49,289 --> 00:00:53,760
started pointing be Yui payloads so

18
00:00:52,020 --> 00:00:55,379
bring your own interpreter payloads just

19
00:00:53,760 --> 00:00:57,690
because of the nature of this talk and

20
00:00:55,379 --> 00:01:00,120
we're gonna be covering a lot of ground

21
00:00:57,690 --> 00:01:03,870
so I'm really just gonna jump right into

22
00:01:00,120 --> 00:01:05,548
it this is our agenda for today I'm

23
00:01:03,870 --> 00:01:08,070
gonna be going over some of the my key

24
00:01:05,549 --> 00:01:10,290
motivations here in terms of like why

25
00:01:08,070 --> 00:01:12,750
even do this in the first place

26
00:01:10,290 --> 00:01:15,630
some dotnet framework concepts we sort

27
00:01:12,750 --> 00:01:17,700
of have to all get on the same page and

28
00:01:15,630 --> 00:01:19,830
to completely grasp what I'm about to

29
00:01:17,700 --> 00:01:21,509
tell you so I'm not I'm not gonna assume

30
00:01:19,830 --> 00:01:23,158
everyone's a.net developer here so I

31
00:01:21,509 --> 00:01:24,240
just want to introduce some high-level

32
00:01:23,159 --> 00:01:26,729
concepts about the dotnet framework

33
00:01:24,240 --> 00:01:27,929
nothing to be scared about then we're

34
00:01:26,729 --> 00:01:29,729
gonna be talking about embedding

35
00:01:27,930 --> 00:01:31,770
interpreters and engines which is sort

36
00:01:29,729 --> 00:01:32,880
of the root of this talk the the key

37
00:01:31,770 --> 00:01:35,339
point of this talk we're gonna be

38
00:01:32,880 --> 00:01:37,470
talking about how to embed interpreters

39
00:01:35,340 --> 00:01:39,990
and engines to do really weird stuff and

40
00:01:37,470 --> 00:01:42,840
possibly evade some controls or EDR

41
00:01:39,990 --> 00:01:44,490
solutions then I'm gonna be talking

42
00:01:42,840 --> 00:01:47,009
about I actually bring your own

43
00:01:44,490 --> 00:01:48,780
interpreter payloads b.o.b Yui pillows

44
00:01:47,009 --> 00:01:50,909
themselves then we're gonna be talking

45
00:01:48,780 --> 00:01:55,170
about how to actually weaponize just any

46
00:01:50,909 --> 00:01:57,780
dotnet scripting language and really in

47
00:01:55,170 --> 00:02:00,270
general terms you don't necessarily have

48
00:01:57,780 --> 00:02:04,740
to embed these languages within another

49
00:02:00,270 --> 00:02:08,758
you can use the provided and just that

50
00:02:04,740 --> 00:02:11,489
just got louder real fast okay perfect

51
00:02:08,758 --> 00:02:13,799
and we're gonna be talking about how to

52
00:02:11,489 --> 00:02:16,170
use some of the built-in compilers

53
00:02:13,800 --> 00:02:17,640
to actually compile dotnet scripting

54
00:02:16,170 --> 00:02:18,839
languages as opposed to embedding in

55
00:02:17,640 --> 00:02:21,480
them one another which allows for a

56
00:02:18,840 --> 00:02:23,340
really quick weaponization and if we

57
00:02:21,480 --> 00:02:24,929
have time after all of that I'm gonna be

58
00:02:23,340 --> 00:02:26,430
also be demoing a tool that I've

59
00:02:24,930 --> 00:02:27,810
developed that sort of tries to bring

60
00:02:26,430 --> 00:02:30,840
together a lot of these concepts called

61
00:02:27,810 --> 00:02:34,760
Silent Trinity and then after that we

62
00:02:30,840 --> 00:02:37,740
need detection and questions and answers

63
00:02:34,760 --> 00:02:39,870
so quick Who am I my name is Marcelo I

64
00:02:37,740 --> 00:02:41,370
go by bike bleeder on Twitter I work for

65
00:02:39,870 --> 00:02:44,040
Black Hills information security I've

66
00:02:41,370 --> 00:02:45,720
got a lot of sparkly papers on my wall

67
00:02:44,040 --> 00:02:48,420
which some people say they're certs and

68
00:02:45,720 --> 00:02:51,390
I've also written some open source tools

69
00:02:48,420 --> 00:02:54,570
over the years I have no life please

70
00:02:51,390 --> 00:02:57,359
send help and that is my github profile

71
00:02:54,570 --> 00:02:58,950
if you are interested in viewing some of

72
00:02:57,360 --> 00:03:03,270
the stuff that I've written and in the

73
00:02:58,950 --> 00:03:05,700
past 5 to 6 years now I think so we're

74
00:03:03,270 --> 00:03:09,420
gonna jump right into it the main

75
00:03:05,700 --> 00:03:12,149
reasoning behind all of this really at

76
00:03:09,420 --> 00:03:13,799
the beginning was to try and innovate a

77
00:03:12,150 --> 00:03:16,260
lot of the powershell protections that

78
00:03:13,800 --> 00:03:17,670
were put in place by Microsoft over the

79
00:03:16,260 --> 00:03:20,670
course of the years PowerShell has been

80
00:03:17,670 --> 00:03:22,649
all the rage over the past four or five

81
00:03:20,670 --> 00:03:23,790
years in terms of attacks and terms of

82
00:03:22,650 --> 00:03:26,520
like offensive tradecraft

83
00:03:23,790 --> 00:03:29,489
and that's steadily and slowly been

84
00:03:26,520 --> 00:03:32,280
dying I'm not I tend to say that it's

85
00:03:29,490 --> 00:03:33,810
not really dead yet just because at

86
00:03:32,280 --> 00:03:36,209
least in my personal experience and the

87
00:03:33,810 --> 00:03:38,490
clients that I've I've I've been

88
00:03:36,209 --> 00:03:40,530
assigned to have Black Hills we see a

89
00:03:38,490 --> 00:03:43,830
lot of PowerShell version one installed

90
00:03:40,530 --> 00:03:45,570
on a lot of endpoints so they really if

91
00:03:43,830 --> 00:03:48,780
you can switch back to powershell

92
00:03:45,570 --> 00:03:51,180
tradecraft in that case and so it's not

93
00:03:48,780 --> 00:03:53,580
completely dead yet so like this is on

94
00:03:51,180 --> 00:03:56,010
most red teams in most mature security

95
00:03:53,580 --> 00:03:58,440
environments I can definitely say that

96
00:03:56,010 --> 00:04:00,000
PowerShell is a powershell tradecraft is

97
00:03:58,440 --> 00:04:02,880
completely off the table and we'll get

98
00:04:00,000 --> 00:04:05,130
you detected in a matter of seconds but

99
00:04:02,880 --> 00:04:07,019
in some organizations it just completely

100
00:04:05,130 --> 00:04:08,790
still flies under the radar so it really

101
00:04:07,020 --> 00:04:09,870
does vary so I like to say it's in

102
00:04:08,790 --> 00:04:12,769
zombie mode right now

103
00:04:09,870 --> 00:04:15,300
because it's not completely dead but

104
00:04:12,770 --> 00:04:19,290
it's still there hey you can you can

105
00:04:15,300 --> 00:04:24,360
still use it we're also gonna be talking

106
00:04:19,290 --> 00:04:26,790
about some of the I'd like to say some

107
00:04:24,360 --> 00:04:27,270
of like the the bad things about the C

108
00:04:26,790 --> 00:04:30,300
sharp

109
00:04:27,270 --> 00:04:31,409
migration right so all of the PowerShell

110
00:04:30,300 --> 00:04:33,090
stuff that's been written in over the

111
00:04:31,410 --> 00:04:34,590
past four or five years we've been

112
00:04:33,090 --> 00:04:36,750
slowly and the offensive community has

113
00:04:34,590 --> 00:04:38,818
slowly been migrating it all over to C

114
00:04:36,750 --> 00:04:40,979
sharp right and that brings a lot of

115
00:04:38,819 --> 00:04:42,120
operational disadvantages and this is

116
00:04:40,979 --> 00:04:45,150
really what I wanted to address

117
00:04:42,120 --> 00:04:48,930
originally was compiling stuff all the

118
00:04:45,150 --> 00:04:51,150
time on engagements really can be

119
00:04:48,930 --> 00:04:53,280
time-consuming and you can set up like

120
00:04:51,150 --> 00:04:54,539
continuous integration pipelines which a

121
00:04:53,280 --> 00:04:56,698
lot of people have already done already

122
00:04:54,539 --> 00:04:59,280
and stuff but I guess I'm just too lazy

123
00:04:56,699 --> 00:05:02,810
for that so what I wanted to do was

124
00:04:59,280 --> 00:05:05,909
shift back shift back the paradigm from

125
00:05:02,810 --> 00:05:08,610
c-sharp tooling back to PowerShell style

126
00:05:05,909 --> 00:05:10,919
like attacks because dynamic languages

127
00:05:08,610 --> 00:05:13,440
and scripting languages are the best

128
00:05:10,919 --> 00:05:15,000
thing you can use in terms on a red team

129
00:05:13,440 --> 00:05:16,830
engagement because they're flexible and

130
00:05:15,000 --> 00:05:18,479
because of the nature of the dynamic

131
00:05:16,830 --> 00:05:22,139
languages you can use built-in functions

132
00:05:18,479 --> 00:05:23,849
like eval and all of those all of those

133
00:05:22,139 --> 00:05:26,280
built-in dynamic language functions to

134
00:05:23,849 --> 00:05:28,280
quickly prototype things and weaponize

135
00:05:26,280 --> 00:05:30,119
things so it's a lot more flexible

136
00:05:28,280 --> 00:05:33,809
operationally in terms of what you can

137
00:05:30,120 --> 00:05:36,030
do in an environment and also I really

138
00:05:33,810 --> 00:05:36,690
do like developing weird tools in

139
00:05:36,030 --> 00:05:38,460
tradecraft

140
00:05:36,690 --> 00:05:41,219
whenever like something new comes out I

141
00:05:38,460 --> 00:05:43,380
tend to find like the very niche areas

142
00:05:41,219 --> 00:05:46,650
of it that's that's always sort of been

143
00:05:43,380 --> 00:05:48,180
my thing I'm not exactly sure and I'm

144
00:05:46,650 --> 00:05:51,508
stealing this quote from a friend of

145
00:05:48,180 --> 00:05:53,039
mine that he I should really frame the

146
00:05:51,509 --> 00:05:54,750
weirder you get the harder you are to

147
00:05:53,039 --> 00:05:56,460
detect and the more I think about it

148
00:05:54,750 --> 00:06:00,620
there really is that the more true that

149
00:05:56,460 --> 00:06:06,388
gets I just I love the way phrase that

150
00:06:00,620 --> 00:06:07,889
so before I talk about the actual engine

151
00:06:06,389 --> 00:06:09,599
embedding we have to cover some

152
00:06:07,889 --> 00:06:12,120
high-level dotnet framework concepts

153
00:06:09,599 --> 00:06:13,830
right so if you're familiar with some of

154
00:06:12,120 --> 00:06:16,319
the if you're familiar at all with

155
00:06:13,830 --> 00:06:18,479
dotnet development you probably heard

156
00:06:16,319 --> 00:06:19,500
this dot a dot in an assembly term

157
00:06:18,479 --> 00:06:20,729
thrown around a lot

158
00:06:19,500 --> 00:06:23,279
we got guarantee you if you start

159
00:06:20,729 --> 00:06:24,479
looking into c-sharp or net you'll

160
00:06:23,279 --> 00:06:27,029
probably hear this term almost

161
00:06:24,479 --> 00:06:30,389
immediately and so we need to understand

162
00:06:27,029 --> 00:06:33,110
like what that is in order to completely

163
00:06:30,389 --> 00:06:35,550
grasp the rest of this talk right so a

164
00:06:33,110 --> 00:06:37,440
dotnet assembly all you really need to

165
00:06:35,550 --> 00:06:39,089
know we're not going to be covering it

166
00:06:37,440 --> 00:06:40,420
in depth because I could be here like I

167
00:06:39,089 --> 00:06:41,920
can do a talk on that

168
00:06:40,420 --> 00:06:44,350
just by itself but all you really need

169
00:06:41,920 --> 00:06:47,710
to know dotnet assembly is a blob of pre

170
00:06:44,350 --> 00:06:50,200
compiled code okay that any dotnet

171
00:06:47,710 --> 00:06:52,090
language can interpret and execute

172
00:06:50,200 --> 00:06:53,170
that's that's all you really need to

173
00:06:52,090 --> 00:06:54,849
know we're not gonna be covering the

174
00:06:53,170 --> 00:06:56,530
format of that because that that that's

175
00:06:54,850 --> 00:06:59,710
complicated

176
00:06:56,530 --> 00:07:01,960
so the key phrase there the key part of

177
00:06:59,710 --> 00:07:04,270
that sentence though is that any dotnet

178
00:07:01,960 --> 00:07:05,530
language can interpret and execute it

179
00:07:04,270 --> 00:07:08,289
and that has some really interesting

180
00:07:05,530 --> 00:07:11,559
implications so how do you go about

181
00:07:08,290 --> 00:07:13,120
generating a dotnet assembly diamond

182
00:07:11,560 --> 00:07:15,250
assembly you take any dotnet language

183
00:07:13,120 --> 00:07:17,920
and you compile it okay and this is

184
00:07:15,250 --> 00:07:19,780
another I guess misunderstanding that

185
00:07:17,920 --> 00:07:21,610
all people have is that they whenever we

186
00:07:19,780 --> 00:07:23,109
talk about dotnet framework a lot of

187
00:07:21,610 --> 00:07:26,380
people tend to associated only with

188
00:07:23,110 --> 00:07:28,270
c-sharp dotnet c-sharp is not the dotnet

189
00:07:26,380 --> 00:07:32,440
framework dotnet framework is a set of

190
00:07:28,270 --> 00:07:35,140
tools and infrastructure and really a

191
00:07:32,440 --> 00:07:37,660
framework that you can use to build your

192
00:07:35,140 --> 00:07:39,940
own programming language C sharp is just

193
00:07:37,660 --> 00:07:42,010
the de-facto language of it but it's not

194
00:07:39,940 --> 00:07:44,530
necessarily the dotnet framework itself

195
00:07:42,010 --> 00:07:46,210
okay so I'm using c-sharp here an

196
00:07:44,530 --> 00:07:48,760
example but you can replace it with any

197
00:07:46,210 --> 00:07:51,370
language based on net so you take a

198
00:07:48,760 --> 00:07:54,219
dotnet language compile it you'll get an

199
00:07:51,370 --> 00:07:56,800
executable egg C write that executable

200
00:07:54,220 --> 00:07:59,110
is a dotnet assembly what's really

201
00:07:56,800 --> 00:08:03,130
interesting though is that if you take

202
00:07:59,110 --> 00:08:06,880
that same code your c-sharp code and

203
00:08:03,130 --> 00:08:08,620
compile it into a DLL that DLL is also a

204
00:08:06,880 --> 00:08:10,900
dotnet assembly so that this is where

205
00:08:08,620 --> 00:08:13,060
things change from what you would expect

206
00:08:10,900 --> 00:08:14,710
from native languages or unmanaged

207
00:08:13,060 --> 00:08:17,170
languages as we call them and dotnet

208
00:08:14,710 --> 00:08:20,109
development right so both this

209
00:08:17,170 --> 00:08:22,120
executable and a DLL that you generate

210
00:08:20,110 --> 00:08:25,480
from c-sharp code are dotnet assemblies

211
00:08:22,120 --> 00:08:27,430
and again like another important concept

212
00:08:25,480 --> 00:08:30,700
to understand is that dotnet assemblies

213
00:08:27,430 --> 00:08:32,560
are not the same as native executables

214
00:08:30,700 --> 00:08:35,049
and dll's the format is basically a

215
00:08:32,559 --> 00:08:36,549
completely different so we in the dotnet

216
00:08:35,049 --> 00:08:38,650
world we tend to say managed and

217
00:08:36,549 --> 00:08:40,349
unmanaged code managed code being any

218
00:08:38,650 --> 00:08:43,150
code based on the.net framework

219
00:08:40,350 --> 00:08:46,180
unmanaged code is stuff like C or C++

220
00:08:43,150 --> 00:08:47,410
that's completely separate from the CLR

221
00:08:46,180 --> 00:08:50,040
and the dotnet in the dotnet framework

222
00:08:47,410 --> 00:08:50,040
itself

223
00:08:50,329 --> 00:08:53,748
now we have to sort of go back to what I

224
00:08:51,920 --> 00:08:55,219
said earlier about dotnet languages

225
00:08:53,749 --> 00:08:58,369
because it's important to understand

226
00:08:55,220 --> 00:09:00,559
this right so the dotnet framework is

227
00:08:58,369 --> 00:09:01,850
just a set of tools and infrastructure

228
00:09:00,559 --> 00:09:03,679
in place in order to build your own

229
00:09:01,850 --> 00:09:06,410
language right and there are a lot of

230
00:09:03,679 --> 00:09:08,059
languages based on the.net framework

231
00:09:06,410 --> 00:09:10,459
there are some that are officially

232
00:09:08,059 --> 00:09:12,350
supported by Microsoft and c-sharp is by

233
00:09:10,459 --> 00:09:13,819
far the de-facto net language is a

234
00:09:12,350 --> 00:09:15,860
c-sharp but there's also powershell

235
00:09:13,819 --> 00:09:18,019
powershell powershell is a dotnet

236
00:09:15,860 --> 00:09:20,480
language there's also f-sharp there's

237
00:09:18,019 --> 00:09:23,389
also vb.net then you can get into the

238
00:09:20,480 --> 00:09:26,389
weird mixed mixed mode assemblies with

239
00:09:23,389 --> 00:09:29,920
c-plus visual c++ which is just the

240
00:09:26,389 --> 00:09:32,749
crazy world to be in but there are also

241
00:09:29,920 --> 00:09:35,839
third-party dotnet languages right that

242
00:09:32,749 --> 00:09:37,459
Microsoft doesn't support and these are

243
00:09:35,839 --> 00:09:39,499
really really interesting so there's

244
00:09:37,459 --> 00:09:41,508
ironpython for example ironpython

245
00:09:39,499 --> 00:09:44,629
is nothing more than a Python

246
00:09:41,509 --> 00:09:47,329
implementation of on top of the dotnet

247
00:09:44,629 --> 00:09:48,920
framework so normal Python is based on C

248
00:09:47,329 --> 00:09:51,638
Python which is based on C right

249
00:09:48,920 --> 00:09:54,979
ironpython is based on the.net framework

250
00:09:51,639 --> 00:09:56,329
there's also boo lang so boo lang is how

251
00:09:54,980 --> 00:10:00,649
many of you who have heard of boo line

252
00:09:56,329 --> 00:10:01,279
before one two okay two people that's

253
00:10:00,649 --> 00:10:03,410
pretty good

254
00:10:01,279 --> 00:10:05,299
but that's I've gotten less than that in

255
00:10:03,410 --> 00:10:06,860
other conferences boo lang is amazing

256
00:10:05,299 --> 00:10:08,360
and I'm gonna be demoing a lot of the

257
00:10:06,860 --> 00:10:11,899
stuff that bullying has because in terms

258
00:10:08,360 --> 00:10:14,419
of like in terms of operational and in

259
00:10:11,899 --> 00:10:16,819
terms of operational value it's amazing

260
00:10:14,419 --> 00:10:18,889
so I'm gonna be demoing that ironruby is

261
00:10:16,819 --> 00:10:21,709
also in case you want to write Ruby

262
00:10:18,889 --> 00:10:23,360
based on net there's also that option

263
00:10:21,709 --> 00:10:25,099
but there are tons more and I actually

264
00:10:23,360 --> 00:10:27,860
have a list at the end of these slides

265
00:10:25,100 --> 00:10:30,019
of all the dotnet scripting languages

266
00:10:27,860 --> 00:10:32,329
that I found so far and there's one

267
00:10:30,019 --> 00:10:35,449
there's a couple based on Lua it's just

268
00:10:32,329 --> 00:10:37,248
amazing the stuff that you find so now

269
00:10:35,449 --> 00:10:40,639
that we've covered that we have to a

270
00:10:37,249 --> 00:10:41,449
little bit talk about like a why c-sharp

271
00:10:40,639 --> 00:10:43,309
tradecraft

272
00:10:41,449 --> 00:10:46,758
is such a big deal in the first place

273
00:10:43,309 --> 00:10:48,519
right and the root cause really comes

274
00:10:46,759 --> 00:10:51,259
down to this function this is a function

275
00:10:48,519 --> 00:10:53,540
C sharp and dotnet languages are

276
00:10:51,259 --> 00:10:55,160
reflective by nature which means you can

277
00:10:53,540 --> 00:10:57,769
do introspection and a lot of cool

278
00:10:55,160 --> 00:11:01,429
programming stuff assembly that load is

279
00:10:57,769 --> 00:11:02,869
a magical function that accepts a lot of

280
00:11:01,429 --> 00:11:03,720
other parameters but there's a bunch of

281
00:11:02,869 --> 00:11:06,390
overloads too

282
00:11:03,720 --> 00:11:09,720
but one of the overloads is a byte array

283
00:11:06,390 --> 00:11:12,930
and assembly that load takes the byte

284
00:11:09,720 --> 00:11:15,120
array of a dotnet assembly ok and then

285
00:11:12,930 --> 00:11:17,189
loads that completely in memory and you

286
00:11:15,120 --> 00:11:20,160
can access all of the code that you've

287
00:11:17,190 --> 00:11:21,810
written when you compiled that dotnet

288
00:11:20,160 --> 00:11:23,280
assembly ok so going back to what I said

289
00:11:21,810 --> 00:11:24,989
earlier right you have your source code

290
00:11:23,280 --> 00:11:27,630
you compile it to a dotnet assembly that

291
00:11:24,990 --> 00:11:30,150
generates an executable in a DLL all you

292
00:11:27,630 --> 00:11:32,040
really need is to take the byte array so

293
00:11:30,150 --> 00:11:33,810
the bytes you read that DLL the byte

294
00:11:32,040 --> 00:11:36,599
array pass it to you assembly that load

295
00:11:33,810 --> 00:11:37,979
and dotnet will just automatically load

296
00:11:36,600 --> 00:11:41,510
load that into memory

297
00:11:37,980 --> 00:11:44,030
okay so assembly that load is

298
00:11:41,510 --> 00:11:46,710
essentially the equivalent of having

299
00:11:44,030 --> 00:11:49,770
reflective DLL and reflective P

300
00:11:46,710 --> 00:11:50,430
injection built in to a language if that

301
00:11:49,770 --> 00:11:52,350
makes sense

302
00:11:50,430 --> 00:11:54,569
so this is an extremely powerful

303
00:11:52,350 --> 00:11:56,820
function both for developers but and

304
00:11:54,570 --> 00:12:01,170
also for offensive tradecraft

305
00:11:56,820 --> 00:12:04,980
right so this is where things start

306
00:12:01,170 --> 00:12:09,439
getting tied together because because of

307
00:12:04,980 --> 00:12:11,760
that and because the dotnet framework

308
00:12:09,440 --> 00:12:15,270
any language based on the.net framework

309
00:12:11,760 --> 00:12:18,930
can interpret and execute a dotnet

310
00:12:15,270 --> 00:12:20,939
assembly that also means that all of

311
00:12:18,930 --> 00:12:23,280
these languages are completely

312
00:12:20,940 --> 00:12:25,500
interoperable with each other okay they

313
00:12:23,280 --> 00:12:27,959
all can execute that in at assemblies

314
00:12:25,500 --> 00:12:29,760
and what that also means is because

315
00:12:27,960 --> 00:12:31,800
they're based on the same framework and

316
00:12:29,760 --> 00:12:33,270
I apologize if I keep saying that net

317
00:12:31,800 --> 00:12:35,939
framework but it's just inevitable in

318
00:12:33,270 --> 00:12:38,040
this talk because if they're based on

319
00:12:35,940 --> 00:12:40,980
the same framework you can also embed

320
00:12:38,040 --> 00:12:42,839
these languages within one another so

321
00:12:40,980 --> 00:12:45,090
you can take ironpython and embed it

322
00:12:42,840 --> 00:12:47,280
into c-sharp you can take c-sharp

323
00:12:45,090 --> 00:12:49,230
embedded into ironpython you can take

324
00:12:47,280 --> 00:12:50,790
powershell embed it into boo lang bend

325
00:12:49,230 --> 00:12:52,110
it into ironpython you could just keep

326
00:12:50,790 --> 00:12:54,420
on going if you want to

327
00:12:52,110 --> 00:12:56,430
ironpython actually has this thing where

328
00:12:54,420 --> 00:12:58,530
I've called it engine inception where

329
00:12:56,430 --> 00:13:01,229
you can just take ironpython engines and

330
00:12:58,530 --> 00:13:02,670
keep embedding them one in another you

331
00:13:01,230 --> 00:13:06,900
can get you can get it really really

332
00:13:02,670 --> 00:13:09,990
crazy with it so again like this isn't

333
00:13:06,900 --> 00:13:11,730
mind blowing stuff because we've sort of

334
00:13:09,990 --> 00:13:13,470
been doing this for a while and whether

335
00:13:11,730 --> 00:13:15,480
like if you're a pen tester a Red Team

336
00:13:13,470 --> 00:13:17,980
Red Team or you probably used a tool

337
00:13:15,480 --> 00:13:20,620
that sort of did this

338
00:13:17,980 --> 00:13:22,410
in one way or another and we're gonna be

339
00:13:20,620 --> 00:13:26,500
talking about that in a second but

340
00:13:22,410 --> 00:13:29,170
because the reason why all of the

341
00:13:26,500 --> 00:13:31,090
PowerShell tooling got migrated to

342
00:13:29,170 --> 00:13:35,410
c-sharp in the first place was because

343
00:13:31,090 --> 00:13:37,300
that is just the well two reasons one is

344
00:13:35,410 --> 00:13:39,130
because c-sharp is a natural transition

345
00:13:37,300 --> 00:13:41,469
from powershell if you know powershell

346
00:13:39,130 --> 00:13:43,060
you sort of need to know c-sharp so from

347
00:13:41,470 --> 00:13:45,220
a developer standpoint like it's an easy

348
00:13:43,060 --> 00:13:48,790
easy language to just pick up and learn

349
00:13:45,220 --> 00:13:51,100
right so but the second reason is all of

350
00:13:48,790 --> 00:13:52,719
as of right now all of the protections

351
00:13:51,100 --> 00:13:56,710
that Microsoft has in place for

352
00:13:52,720 --> 00:13:58,540
PowerShell are not built-in to the

353
00:13:56,710 --> 00:14:00,220
underlying framework itself right

354
00:13:58,540 --> 00:14:02,260
they're not built into their framework

355
00:14:00,220 --> 00:14:06,670
they're built they're built in currently

356
00:14:02,260 --> 00:14:09,040
into the PowerShell runtime so all you

357
00:14:06,670 --> 00:14:11,050
need to do to bypass all of that is to

358
00:14:09,040 --> 00:14:14,110
just jump to another dotnet framework

359
00:14:11,050 --> 00:14:18,189
language so instead of using PowerShell

360
00:14:14,110 --> 00:14:19,990
you can use c-sharp right so that's that

361
00:14:18,190 --> 00:14:22,270
that's the easiest transition but

362
00:14:19,990 --> 00:14:24,730
c-sharp is a compiled language right and

363
00:14:22,270 --> 00:14:25,930
I think we've sort of been I don't know

364
00:14:24,730 --> 00:14:27,940
I think the offensive community I think

365
00:14:25,930 --> 00:14:31,270
we've sort of been pigeon-holed into

366
00:14:27,940 --> 00:14:34,180
using c-sharp but like we can use all of

367
00:14:31,270 --> 00:14:36,579
the other languages that both

368
00:14:34,180 --> 00:14:38,050
third-party and supported to do the

369
00:14:36,580 --> 00:14:40,510
exact same same thing that we've been

370
00:14:38,050 --> 00:14:42,670
doing with PowerShell and in a language

371
00:14:40,510 --> 00:14:44,189
that might be even easier to code than

372
00:14:42,670 --> 00:14:47,380
PowerShell right so we can use

373
00:14:44,190 --> 00:14:49,450
ironpython for example and through

374
00:14:47,380 --> 00:14:51,490
ironpython you can access the dotnet it

375
00:14:49,450 --> 00:14:53,589
complete net api so you can do the same

376
00:14:51,490 --> 00:14:58,360
thing that we've been doing with

377
00:14:53,589 --> 00:15:00,580
powershell only in python and yeah

378
00:14:58,360 --> 00:15:02,910
python that I guess I'm biased but I

379
00:15:00,580 --> 00:15:05,530
just I just like Python a lot better and

380
00:15:02,910 --> 00:15:07,810
you can use boo lang and iron Ruby so

381
00:15:05,530 --> 00:15:10,030
this is really the the meat of this talk

382
00:15:07,810 --> 00:15:12,910
this is the key concept of this talk is

383
00:15:10,030 --> 00:15:14,589
that we can just use a scripting

384
00:15:12,910 --> 00:15:16,660
language instead of a compiled language

385
00:15:14,589 --> 00:15:20,520
that offers us a lot more operational

386
00:15:16,660 --> 00:15:22,689
flexibility during red team's right so

387
00:15:20,520 --> 00:15:25,150
that's not as small as I thought it

388
00:15:22,690 --> 00:15:29,050
would be okay so thankfully I have this

389
00:15:25,150 --> 00:15:30,439
thing so you have been doing this if

390
00:15:29,050 --> 00:15:31,729
you're a pen tester

391
00:15:30,440 --> 00:15:33,650
teamer you've probably already done

392
00:15:31,730 --> 00:15:36,370
something like this without even knowing

393
00:15:33,650 --> 00:15:40,040
it there are a lot of tools out there

394
00:15:36,370 --> 00:15:41,840
mainly pone shell and PS powerline which

395
00:15:40,040 --> 00:15:44,300
I have up here there's a bunch of tools

396
00:15:41,840 --> 00:15:46,790
that essentially allow you to run

397
00:15:44,300 --> 00:15:49,760
PowerShell without the powershell

398
00:15:46,790 --> 00:15:52,730
executable right have you ever wondered

399
00:15:49,760 --> 00:15:55,610
why that's even possible because the

400
00:15:52,730 --> 00:15:57,140
dotnet framework it all the dotnet

401
00:15:55,610 --> 00:16:00,020
languages are interoperable with each

402
00:15:57,140 --> 00:16:03,140
other that means it's natural that you

403
00:16:00,020 --> 00:16:06,050
can take a powershell runtime and embed

404
00:16:03,140 --> 00:16:08,300
it within a c-sharp binary so all of

405
00:16:06,050 --> 00:16:09,949
these tools are doing exactly this

406
00:16:08,300 --> 00:16:11,839
they're just embedding the PowerShell

407
00:16:09,950 --> 00:16:13,730
runtime within the CI c-sharp binary

408
00:16:11,840 --> 00:16:16,370
itself so here for example we're just

409
00:16:13,730 --> 00:16:18,110
we're there's a concept of powershell

410
00:16:16,370 --> 00:16:20,240
run spaces and stuff but we're creating

411
00:16:18,110 --> 00:16:22,160
a pipeline we're embedding the actual

412
00:16:20,240 --> 00:16:24,170
powershell runtime within a c-sharp

413
00:16:22,160 --> 00:16:27,709
binary but you can also do the reverse

414
00:16:24,170 --> 00:16:29,900
right you can take c-sharp and embed it

415
00:16:27,710 --> 00:16:33,170
in powershell and a lot of tools did

416
00:16:29,900 --> 00:16:36,380
this one way or another ad type which is

417
00:16:33,170 --> 00:16:38,300
the built-in function to do something

418
00:16:36,380 --> 00:16:41,210
like this which you needed to do like

419
00:16:38,300 --> 00:16:42,790
call native api's and stuff from an ops

420
00:16:41,210 --> 00:16:45,460
tech perspective this isn't the best

421
00:16:42,790 --> 00:16:48,020
solution because it leaves files to disk

422
00:16:45,460 --> 00:16:49,850
but like the power to the power sploit

423
00:16:48,020 --> 00:16:53,449
stuff for example uses reflection and

424
00:16:49,850 --> 00:16:55,040
the vehement api to actually build these

425
00:16:53,450 --> 00:16:57,260
functions on the fly in order to not

426
00:16:55,040 --> 00:17:02,180
leave traces on this but you can just

427
00:16:57,260 --> 00:17:03,890
embed c-sharp in powershell and the same

428
00:17:02,180 --> 00:17:05,119
thing with any other dotnet language and

429
00:17:03,890 --> 00:17:07,069
that's what i'm gonna be talking about

430
00:17:05,119 --> 00:17:09,139
today i'm gonna be demoing a couple of

431
00:17:07,069 --> 00:17:13,149
payloads that i created to do exactly

432
00:17:09,140 --> 00:17:16,370
this so when you start embedding

433
00:17:13,150 --> 00:17:18,980
third-party languages within other

434
00:17:16,369 --> 00:17:21,050
dotnet languages especially ones that

435
00:17:18,980 --> 00:17:23,360
aren't officially supported by Microsoft

436
00:17:21,050 --> 00:17:26,180
you'll run into some common common

437
00:17:23,359 --> 00:17:28,669
problems and these are usually the

438
00:17:26,180 --> 00:17:30,260
problems that you run into and the organ

439
00:17:28,670 --> 00:17:31,610
you're gonna see some especially if you

440
00:17:30,260 --> 00:17:34,100
take a look at the code you're going to

441
00:17:31,610 --> 00:17:35,810
see some cottom common patterns that we

442
00:17:34,100 --> 00:17:39,080
use in order to take care of all of

443
00:17:35,810 --> 00:17:40,520
these issues the biggest issue not

444
00:17:39,080 --> 00:17:42,020
really the biggest issue a lot of people

445
00:17:40,520 --> 00:17:43,220
think that a lot of people say to me

446
00:17:42,020 --> 00:17:44,280
that this is probably the biggest issue

447
00:17:43,220 --> 00:17:46,470
but I personally

448
00:17:44,280 --> 00:17:49,980
don't think it is the embedded language

449
00:17:46,470 --> 00:17:52,590
is usually need net version 4.0 and

450
00:17:49,980 --> 00:17:54,030
above there are exceptions but this is

451
00:17:52,590 --> 00:17:55,500
usually the case that's because the

452
00:17:54,030 --> 00:17:57,420
scripting capabilities of that net

453
00:17:55,500 --> 00:18:00,420
framework were introduced in 4.0 with

454
00:17:57,420 --> 00:18:01,920
the DLR as opposed to the CLR the

455
00:18:00,420 --> 00:18:04,500
embedded languages are going to need

456
00:18:01,920 --> 00:18:06,510
some dll's that are not installed by

457
00:18:04,500 --> 00:18:08,610
default but since they are dotnet

458
00:18:06,510 --> 00:18:10,920
assemblies we can usually just call

459
00:18:08,610 --> 00:18:12,870
assembly that load on them and just

460
00:18:10,920 --> 00:18:14,190
download them from the internet and you

461
00:18:12,870 --> 00:18:18,419
take care of that problem pretty fast

462
00:18:14,190 --> 00:18:20,730
the required assemblies yeah they're not

463
00:18:18,420 --> 00:18:22,380
installed by default but also depending

464
00:18:20,730 --> 00:18:24,300
on the host language you are going to

465
00:18:22,380 --> 00:18:26,970
have to resolve those assemblies on

466
00:18:24,300 --> 00:18:28,200
runtime this is more of a problem if

467
00:18:26,970 --> 00:18:29,940
you're embedding the language within

468
00:18:28,200 --> 00:18:32,490
c-sharp because it's a compiled language

469
00:18:29,940 --> 00:18:34,050
if you do it through PowerShell you it's

470
00:18:32,490 --> 00:18:36,720
it's an easier way you don't have to

471
00:18:34,050 --> 00:18:39,570
hook events in dotnet or anything like

472
00:18:36,720 --> 00:18:42,060
that and again because of assembly that

473
00:18:39,570 --> 00:18:43,740
load we can just load these directly in

474
00:18:42,060 --> 00:18:48,179
memory without ever touching this and

475
00:18:43,740 --> 00:18:50,040
remain OPSEC safe right so how do you

476
00:18:48,180 --> 00:18:52,200
about actually loading these what

477
00:18:50,040 --> 00:18:53,310
required assemblies this is more geared

478
00:18:52,200 --> 00:18:55,140
toward c-sharp

479
00:18:53,310 --> 00:18:57,480
but essentially there are certain that

480
00:18:55,140 --> 00:19:01,500
there are events in net where you can

481
00:18:57,480 --> 00:19:03,900
hook and you can add custom logic to the

482
00:19:01,500 --> 00:19:07,680
way c-sharp goes about resolving those

483
00:19:03,900 --> 00:19:10,200
assemblies okay so the assembly resolved

484
00:19:07,680 --> 00:19:11,480
event in c-sharp is the primary way of

485
00:19:10,200 --> 00:19:13,740
doing it but there are a bunch of other

486
00:19:11,480 --> 00:19:16,680
plugins for a visual studio and stuff

487
00:19:13,740 --> 00:19:18,690
that allow you to seamlessly do this

488
00:19:16,680 --> 00:19:20,850
within Visual Studio itself like

489
00:19:18,690 --> 00:19:22,470
castrati using other techniques and a

490
00:19:20,850 --> 00:19:24,689
combination of other and a combination

491
00:19:22,470 --> 00:19:26,640
of other little tricks to do this so

492
00:19:24,690 --> 00:19:28,380
these are I'm not going to bore you too

493
00:19:26,640 --> 00:19:30,660
much with this because these are just

494
00:19:28,380 --> 00:19:32,220
like implementation details so we're

495
00:19:30,660 --> 00:19:35,460
just gonna skip ahead here and actually

496
00:19:32,220 --> 00:19:36,990
see like a demo like some of the stuff

497
00:19:35,460 --> 00:19:38,730
that I've created and you know this is

498
00:19:36,990 --> 00:19:39,990
this might be a little weird but it's

499
00:19:38,730 --> 00:19:43,020
all fun it's good

500
00:19:39,990 --> 00:19:45,600
so the first payload I'm gonna demo here

501
00:19:43,020 --> 00:19:46,980
is ironpython okay so we're gonna be

502
00:19:45,600 --> 00:19:50,429
embedding ironpython

503
00:19:46,980 --> 00:19:52,980
within powershell all of the the host

504
00:19:50,430 --> 00:19:54,900
language that i'm gonna be demoing today

505
00:19:52,980 --> 00:19:56,190
is always going to be powershell so

506
00:19:54,900 --> 00:19:57,350
that's the language that we're embedding

507
00:19:56,190 --> 00:19:59,330
into the Rhys

508
00:19:57,350 --> 00:20:00,770
for that is for demo purposes it's a lot

509
00:19:59,330 --> 00:20:02,449
easier to understand and I don't have to

510
00:20:00,770 --> 00:20:06,590
compile stuff all the time live which is

511
00:20:02,450 --> 00:20:09,559
not fun but ironpython again it's just a

512
00:20:06,590 --> 00:20:13,250
Python implementation on top of the

513
00:20:09,559 --> 00:20:17,080
dotnet framework okay the biggest issue

514
00:20:13,250 --> 00:20:20,780
with embedding ironpython though is that

515
00:20:17,080 --> 00:20:24,500
the module that it needs to execute

516
00:20:20,780 --> 00:20:26,480
native DLLs so to perform p invoke which

517
00:20:24,500 --> 00:20:29,030
essentially allows you to call native

518
00:20:26,480 --> 00:20:31,640
functions so when 32 functions is a

519
00:20:29,030 --> 00:20:34,850
third-party module and it breaks

520
00:20:31,640 --> 00:20:37,549
completely breaks if you try to do it in

521
00:20:34,850 --> 00:20:39,350
memory so if the arm Python runtime is

522
00:20:37,549 --> 00:20:42,168
loaded in memory and you try to call

523
00:20:39,350 --> 00:20:43,699
native dll's through it the B module

524
00:20:42,169 --> 00:20:46,340
completely breaks and airs out and this

525
00:20:43,700 --> 00:20:48,590
is a known issue on ironpython so the

526
00:20:46,340 --> 00:20:51,230
unfortunately ironpython

527
00:20:48,590 --> 00:20:52,699
really isn't the best language to embed

528
00:20:51,230 --> 00:20:55,190
because of that because it doesn't allow

529
00:20:52,700 --> 00:20:56,570
you the flexibility in terms of when you

530
00:20:55,190 --> 00:21:01,309
crafting your payloads in order to call

531
00:20:56,570 --> 00:21:03,020
native api's and stuff so i'm python

532
00:21:01,309 --> 00:21:05,539
itself and all of the code that i'm

533
00:21:03,020 --> 00:21:07,429
gonna be showing you is available on on

534
00:21:05,539 --> 00:21:09,650
that github repo so if you want to take

535
00:21:07,429 --> 00:21:11,480
a look at this either live or like right

536
00:21:09,650 --> 00:21:14,600
now or later you can go ahead and follow

537
00:21:11,480 --> 00:21:17,510
along there are two examples in that

538
00:21:14,600 --> 00:21:19,399
repository there's a sharp snake that CS

539
00:21:17,510 --> 00:21:21,919
which is a sharp version of it and

540
00:21:19,400 --> 00:21:23,179
there's invoke ironpython that ps1 which

541
00:21:21,919 --> 00:21:26,450
i'm going to be showing you in a second

542
00:21:23,179 --> 00:21:29,030
ironpython requires four dll's to run

543
00:21:26,450 --> 00:21:31,580
and they're listed over there two of

544
00:21:29,030 --> 00:21:33,678
them are they have Microsoft in the name

545
00:21:31,580 --> 00:21:36,678
they're not signed dll's but they're

546
00:21:33,679 --> 00:21:38,750
there B to add to allow hyoeun Python to

547
00:21:36,679 --> 00:21:40,970
hook into the dotnet framework okay

548
00:21:38,750 --> 00:21:43,270
so I'm gonna be demoing this payload for

549
00:21:40,970 --> 00:21:43,270
you right now

550
00:21:55,370 --> 00:21:59,780
okay can everyone see that back there I

551
00:21:59,960 --> 00:22:12,540
see a maybe from okay I'm gonna make it

552
00:22:03,240 --> 00:22:15,720
bigger that's probably better okay so

553
00:22:12,540 --> 00:22:17,280
this is a powershell script right inside

554
00:22:15,720 --> 00:22:19,230
the powershell script and this is gonna

555
00:22:17,280 --> 00:22:21,270
be awkward with this microphone inside

556
00:22:19,230 --> 00:22:24,120
the PowerShell script there is a bunch

557
00:22:21,270 --> 00:22:28,200
of ironpython code this ironpython code

558
00:22:24,120 --> 00:22:30,679
is essentially loading a assembly this

559
00:22:28,200 --> 00:22:33,240
assembly is the internal monologue

560
00:22:30,680 --> 00:22:34,440
project I don't know if I don't know how

561
00:22:33,240 --> 00:22:35,820
many of you who haven't heard of

562
00:22:34,440 --> 00:22:37,950
internal monologue but essentially it's

563
00:22:35,820 --> 00:22:40,290
a really cool way of getting the local

564
00:22:37,950 --> 00:22:42,420
users or any logged in users depending

565
00:22:40,290 --> 00:22:46,020
on your privileges password hashes and

566
00:22:42,420 --> 00:22:50,160
it's gonna just be deflate it loaded in

567
00:22:46,020 --> 00:22:53,430
memory all using ironpython right so the

568
00:22:50,160 --> 00:22:56,190
PowerShell script itself isn't malicious

569
00:22:53,430 --> 00:22:58,260
per se because all that PowerShell can

570
00:22:56,190 --> 00:23:00,560
see is that you're loading a bunch of

571
00:22:58,260 --> 00:23:03,180
assemblies the ironpython assemblies the

572
00:23:00,560 --> 00:23:05,010
microsoft scripting dll's the Microsoft

573
00:23:03,180 --> 00:23:07,200
dynamic dll's you're loading those in

574
00:23:05,010 --> 00:23:08,190
memory you're calling load that assembly

575
00:23:07,200 --> 00:23:11,640
which is that function that I was

576
00:23:08,190 --> 00:23:14,040
talking about and then you create the

577
00:23:11,640 --> 00:23:16,110
ironpython engine and then you spin up

578
00:23:14,040 --> 00:23:22,230
the arm you actually execute the

579
00:23:16,110 --> 00:23:26,300
ironpython code which I will do now and

580
00:23:22,230 --> 00:23:30,000
there you go so we've essentially

581
00:23:26,300 --> 00:23:32,700
executed in ironpython script and this

582
00:23:30,000 --> 00:23:34,440
is the password for my local user here

583
00:23:32,700 --> 00:23:38,070
on the one on the password hash rather

584
00:23:34,440 --> 00:23:39,870
of the local user on this machine we've

585
00:23:38,070 --> 00:23:41,879
essentially spin up an arm Python engine

586
00:23:39,870 --> 00:23:46,830
within PowerShell okay we've then

587
00:23:41,880 --> 00:23:48,060
executed the ironpython the actual

588
00:23:46,830 --> 00:23:50,610
script which is embedded in the

589
00:23:48,060 --> 00:23:52,320
PowerShell file itself and then loaded

590
00:23:50,610 --> 00:23:55,439
an assembly through the ironpython

591
00:23:52,320 --> 00:23:59,669
engine as opposed to powershell if that

592
00:23:55,440 --> 00:24:02,700
makes sense so in terms of what

593
00:23:59,670 --> 00:24:05,280
PowerShell sees like it isn't malicious

594
00:24:02,700 --> 00:24:08,010
per se it is it's just a bunch of

595
00:24:05,280 --> 00:24:21,120
assembly loading and a script execution

596
00:24:08,010 --> 00:24:21,840
which and and nothing else okay so as I

597
00:24:21,120 --> 00:24:24,510
said before

598
00:24:21,840 --> 00:24:26,399
ironpython is great and you know python

599
00:24:24,510 --> 00:24:28,440
is fantastic and all but unfortunately

600
00:24:26,400 --> 00:24:30,900
from an operational perspective it isn't

601
00:24:28,440 --> 00:24:33,870
the best because you cannot call native

602
00:24:30,900 --> 00:24:36,270
api's and we need to do that and during

603
00:24:33,870 --> 00:24:39,000
red team's to do all the fun shell code

604
00:24:36,270 --> 00:24:40,320
injection stuff and all of you know the

605
00:24:39,000 --> 00:24:43,520
low-level stuff that we need that we

606
00:24:40,320 --> 00:24:46,710
usually do boo lang on the other hand is

607
00:24:43,520 --> 00:24:50,550
much better for a number of reasons one

608
00:24:46,710 --> 00:24:52,470
it's very inspired by Python which you

609
00:24:50,550 --> 00:24:53,490
know makes me like it already it's

610
00:24:52,470 --> 00:24:55,800
essentially the lovechild between

611
00:24:53,490 --> 00:24:58,620
c-sharp and python it's it's strongly

612
00:24:55,800 --> 00:25:00,960
typed it's and the most important thing

613
00:24:58,620 --> 00:25:03,719
though is that it has the functionality

614
00:25:00,960 --> 00:25:05,820
of calling native dll's by default so

615
00:25:03,720 --> 00:25:07,290
native functions by default it's built

616
00:25:05,820 --> 00:25:11,669
into the language it's not a third-party

617
00:25:07,290 --> 00:25:14,340
module on top of that because of the way

618
00:25:11,670 --> 00:25:18,240
the arm Python the boolean compiler

619
00:25:14,340 --> 00:25:19,409
rather works it there are no calls to

620
00:25:18,240 --> 00:25:21,990
CSE Dexy

621
00:25:19,410 --> 00:25:24,510
which means all of the blank code gets

622
00:25:21,990 --> 00:25:26,130
compiled in memory through into an

623
00:25:24,510 --> 00:25:28,740
intermediate language which is what that

624
00:25:26,130 --> 00:25:32,460
net uses in order to actually execute on

625
00:25:28,740 --> 00:25:34,710
multiple operating systems so in terms

626
00:25:32,460 --> 00:25:37,080
of OPSEC this is probably like the best

627
00:25:34,710 --> 00:25:38,610
Lang if you choose to like create one of

628
00:25:37,080 --> 00:25:40,199
these payloads on your own this is

629
00:25:38,610 --> 00:25:42,990
probably the best language to do it in

630
00:25:40,200 --> 00:25:44,850
because it is truly OPSEC safe okay and

631
00:25:42,990 --> 00:25:50,730
I'm gonna I'm gonna show you really

632
00:25:44,850 --> 00:25:53,459
quickly a demo on this oh and I guess

633
00:25:50,730 --> 00:25:59,400
well I can talk about that later why not

634
00:25:53,460 --> 00:26:01,890
I skip the slide okay so I have this is

635
00:25:59,400 --> 00:26:04,020
again like all of all of these scripts

636
00:26:01,890 --> 00:26:07,110
are in that github repository that I had

637
00:26:04,020 --> 00:26:10,139
on the slides but this is a PowerShell

638
00:26:07,110 --> 00:26:11,699
script called invoke jump-scare and I

639
00:26:10,140 --> 00:26:15,159
thought I thought that was cute because

640
00:26:11,700 --> 00:26:17,809
you know boo Lang boo okay

641
00:26:15,159 --> 00:26:19,009
so I have a bunch of shell code in this

642
00:26:17,809 --> 00:26:20,840
PowerShell script you don't necessarily

643
00:26:19,009 --> 00:26:22,849
need to put it in the PowerShell script

644
00:26:20,840 --> 00:26:24,738
you can put it completely in the blank

645
00:26:22,849 --> 00:26:26,689
source I just have it in the PowerShell

646
00:26:24,739 --> 00:26:30,499
script to make it easier for everyone to

647
00:26:26,690 --> 00:26:32,659
understand so I have a just the calc

648
00:26:30,499 --> 00:26:35,769
payload okay this is a shell code for a

649
00:26:32,659 --> 00:26:39,109
calc payload in the PowerShell script I

650
00:26:35,769 --> 00:26:41,389
then load the blank DLL the boolean

651
00:26:39,109 --> 00:26:43,519
compiler in the blank parser these are

652
00:26:41,389 --> 00:26:45,529
three dotnet assemblies that bullying

653
00:26:43,519 --> 00:26:50,960
needs in order to actually compile blank

654
00:26:45,529 --> 00:26:54,019
code okay and then I am reading the

655
00:26:50,960 --> 00:26:56,239
blank source code off disk but that also

656
00:26:54,019 --> 00:26:57,700
can be put in the PowerShell script you

657
00:26:56,239 --> 00:27:04,909
can literally just comment this

658
00:26:57,700 --> 00:27:06,440
uncomment that one line right there you

659
00:27:04,909 --> 00:27:08,779
can just comment this whole line here

660
00:27:06,440 --> 00:27:11,119
uncomment it rather and just paste in

661
00:27:08,779 --> 00:27:13,279
the blank source code and that'll work

662
00:27:11,119 --> 00:27:14,809
too so you can create a single payload I

663
00:27:13,279 --> 00:27:16,399
suppose you know dropping stuff on this

664
00:27:14,809 --> 00:27:18,908
canned everything I'm and then

665
00:27:16,399 --> 00:27:21,978
initializing the bulan compiler and

666
00:27:18,909 --> 00:27:23,629
executing the actual blank source now

667
00:27:21,979 --> 00:27:27,970
let's take a look at the blank source

668
00:27:23,629 --> 00:27:30,349
for a second just to give you an idea of

669
00:27:27,970 --> 00:27:35,259
cu1 with sublime yes ooh boy that's

670
00:27:30,349 --> 00:27:35,259
small nope wrong button Oh

671
00:27:48,560 --> 00:27:56,000
okay well I guess you know my zoom broke

672
00:27:51,080 --> 00:27:57,439
but it's fine well you're just gonna

673
00:27:56,000 --> 00:27:59,090
have to trust me I guess on this one but

674
00:27:57,440 --> 00:28:01,460
you can go view it on get up if you want

675
00:27:59,090 --> 00:28:03,949
later essentially it looks a lot like

676
00:28:01,460 --> 00:28:05,480
Python and we're just defining on the

677
00:28:03,950 --> 00:28:07,070
top here we're just defining a bunch of

678
00:28:05,480 --> 00:28:08,870
DLL imports so like this day if you're

679
00:28:07,070 --> 00:28:11,929
familiar with c-sharp it's literally

680
00:28:08,870 --> 00:28:14,239
just a bunch of DLL imports after that

681
00:28:11,930 --> 00:28:16,510
there's a bunch of shell code injection

682
00:28:14,240 --> 00:28:18,650
code so they're they're currently this

683
00:28:16,510 --> 00:28:21,290
gulang source supports like three

684
00:28:18,650 --> 00:28:23,330
injection methods there's the qu APC

685
00:28:21,290 --> 00:28:25,639
method if you're familiar with that one

686
00:28:23,330 --> 00:28:27,740
and then there's the classic bright

687
00:28:25,640 --> 00:28:29,090
bright memory create remote thread and

688
00:28:27,740 --> 00:28:30,500
then there's the wait for single object

689
00:28:29,090 --> 00:28:31,730
method so there's three shell code

690
00:28:30,500 --> 00:28:34,160
injection methods that you can choose

691
00:28:31,730 --> 00:28:36,440
from when you actually go to perform

692
00:28:34,160 --> 00:28:40,910
this right you actually go to actually

693
00:28:36,440 --> 00:28:43,970
execute it let's go back to this here

694
00:28:40,910 --> 00:28:51,910
okay so we're embedding boo lang and now

695
00:28:43,970 --> 00:28:51,910
let's do the classic pop calc here

696
00:28:53,500 --> 00:29:05,330
alright so I loaded the PowerShell

697
00:28:55,910 --> 00:29:10,070
script there you go and sweet there you

698
00:29:05,330 --> 00:29:13,129
go there's calc so just to recap here

699
00:29:10,070 --> 00:29:15,649
because I'm probably I'm trying to like

700
00:29:13,130 --> 00:29:18,350
whenever whenever I present this talk I

701
00:29:15,650 --> 00:29:19,970
just want to make sure that I'm actually

702
00:29:18,350 --> 00:29:23,990
conveying the information correctly

703
00:29:19,970 --> 00:29:26,990
right so we're embedding boo lang itself

704
00:29:23,990 --> 00:29:32,000
inside of a PowerShell script and then

705
00:29:26,990 --> 00:29:34,940
executing boo Lang source directly in

706
00:29:32,000 --> 00:29:36,260
memory which injects shell code okay so

707
00:29:34,940 --> 00:29:38,330
that that's that's essentially what

708
00:29:36,260 --> 00:29:42,320
happened here and the reasoning behind

709
00:29:38,330 --> 00:29:44,899
this is mainly an alternative to c-sharp

710
00:29:42,320 --> 00:29:46,700
right so instead again shifting that

711
00:29:44,900 --> 00:29:49,070
paradigm back to PowerShell style like

712
00:29:46,700 --> 00:29:50,990
attacks because with very few lines of

713
00:29:49,070 --> 00:29:53,030
code you can modify this to basically

714
00:29:50,990 --> 00:29:55,700
pull boo source code down from the

715
00:29:53,030 --> 00:29:59,090
internet and compile it on the fly using

716
00:29:55,700 --> 00:30:02,170
PowerShell right so it's this is easily

717
00:29:59,090 --> 00:30:02,169
weaponized that way

718
00:30:08,500 --> 00:30:14,990
all right so I should have talked about

719
00:30:12,110 --> 00:30:17,510
this before I showed you that but boo

720
00:30:14,990 --> 00:30:19,760
Langley needs three dotnet assemblies to

721
00:30:17,510 --> 00:30:20,600
run and and they're listed on top of

722
00:30:19,760 --> 00:30:22,550
there

723
00:30:20,600 --> 00:30:24,110
I'm PowerShell it's really easy to load

724
00:30:22,550 --> 00:30:25,730
them c-sharp II need to pull some of

725
00:30:24,110 --> 00:30:27,139
that event hooking that I was talking

726
00:30:25,730 --> 00:30:28,790
about before

727
00:30:27,140 --> 00:30:31,220
and again like these examples that I

728
00:30:28,790 --> 00:30:33,649
just showed you are on the github repo

729
00:30:31,220 --> 00:30:35,060
and there's a c-sharp version of it and

730
00:30:33,650 --> 00:30:36,950
the powershell version of it if you're

731
00:30:35,060 --> 00:30:38,870
interested so you can grab it off of

732
00:30:36,950 --> 00:30:42,260
that now another one and this is a

733
00:30:38,870 --> 00:30:44,030
recent discovery another dotnet language

734
00:30:42,260 --> 00:30:45,800
that i discovered recently of mine was

735
00:30:44,030 --> 00:30:47,629
clear script now clear skipped is

736
00:30:45,800 --> 00:30:49,700
extremely interesting for a number of

737
00:30:47,630 --> 00:30:52,310
reasons one is it's a mic officially

738
00:30:49,700 --> 00:30:55,700
supported microsoft.net language and it

739
00:30:52,310 --> 00:30:59,300
was literally made to add scripting

740
00:30:55,700 --> 00:31:03,350
capabilities to dotnet line and to a

741
00:30:59,300 --> 00:31:05,480
tonight applications so clear script has

742
00:31:03,350 --> 00:31:08,719
its own jscript and VB script

743
00:31:05,480 --> 00:31:12,040
implementation okay so what's also

744
00:31:08,720 --> 00:31:14,390
interesting is that the those

745
00:31:12,040 --> 00:31:15,710
implementations don't seem to go through

746
00:31:14,390 --> 00:31:17,690
the standard windows script host

747
00:31:15,710 --> 00:31:20,360
environment which means that it should

748
00:31:17,690 --> 00:31:22,100
by default and again like I'm not 100%

749
00:31:20,360 --> 00:31:24,500
sure on this but I've examined the code

750
00:31:22,100 --> 00:31:28,100
and there are no comm calls to any of

751
00:31:24,500 --> 00:31:29,810
the classic common objects that you'd

752
00:31:28,100 --> 00:31:31,580
usually need to do in order to start up

753
00:31:29,810 --> 00:31:34,520
the windows script host environment

754
00:31:31,580 --> 00:31:37,669
right so it should completely go through

755
00:31:34,520 --> 00:31:40,010
that unless like as someone here knows

756
00:31:37,670 --> 00:31:41,510
if it actually does start up doing the

757
00:31:40,010 --> 00:31:44,600
script oh so far I'm not able to find

758
00:31:41,510 --> 00:31:47,120
any code that actually has any evidence

759
00:31:44,600 --> 00:31:49,399
of that right well it's also really cool

760
00:31:47,120 --> 00:31:53,389
though is that clear script allows you

761
00:31:49,400 --> 00:31:57,100
to expose the dotnet CLR to J script

762
00:31:53,390 --> 00:32:02,090
itself so you can just dynamically call

763
00:31:57,100 --> 00:32:04,370
dotnet api's from J script from an

764
00:32:02,090 --> 00:32:07,760
embedded clear script engine within

765
00:32:04,370 --> 00:32:10,370
PowerShell it gets complicated but but

766
00:32:07,760 --> 00:32:12,050
like it's you can just keep embedding

767
00:32:10,370 --> 00:32:14,090
these languages until you get the

768
00:32:12,050 --> 00:32:14,980
desired functionality that you want so

769
00:32:14,090 --> 00:32:16,389
and this is

770
00:32:14,980 --> 00:32:25,570
I'm gonna this is another demo real

771
00:32:16,390 --> 00:32:27,250
quick and let's see here so let's go to

772
00:32:25,570 --> 00:32:29,080
the the invoke clear script and again

773
00:32:27,250 --> 00:32:30,370
this is on that the same github repo so

774
00:32:29,080 --> 00:32:34,299
if you want to take a look at the code

775
00:32:30,370 --> 00:32:35,799
feel free to so again just just one

776
00:32:34,299 --> 00:32:37,330
assembly that's nothing great about

777
00:32:35,799 --> 00:32:39,280
clear script it's one assembly instead

778
00:32:37,330 --> 00:32:40,809
of three or four so we have one assembly

779
00:32:39,280 --> 00:32:44,320
here we load it directly in PowerShell

780
00:32:40,809 --> 00:32:49,030
then we initialize the clear script J

781
00:32:44,320 --> 00:32:52,080
script engine okay or you could also use

782
00:32:49,030 --> 00:32:54,520
VB script with clear scripts so

783
00:32:52,080 --> 00:32:56,470
depending on what engine you want the

784
00:32:54,520 --> 00:32:59,040
magic sort of the real magic happens

785
00:32:56,470 --> 00:33:01,630
down below because here we're calling a

786
00:32:59,040 --> 00:33:03,490
what clear scripts called extended host

787
00:33:01,630 --> 00:33:06,490
functionality and that allows you to

788
00:33:03,490 --> 00:33:08,410
expose the dotnet CLR to J script itself

789
00:33:06,490 --> 00:33:11,200
right and we're also telling it to allow

790
00:33:08,410 --> 00:33:14,110
reflection so you can just dynamically

791
00:33:11,200 --> 00:33:18,120
load assemblies from an embedded clear

792
00:33:14,110 --> 00:33:20,500
script engine that runs J script and

793
00:33:18,120 --> 00:33:22,330
then this is the actual J script code

794
00:33:20,500 --> 00:33:24,400
that we're going to be executing right

795
00:33:22,330 --> 00:33:25,290
and you can see here from the first two

796
00:33:24,400 --> 00:33:27,309
lines

797
00:33:25,290 --> 00:33:30,220
hopefully it's big enough but we're

798
00:33:27,309 --> 00:33:31,690
essentially just it do be essentially of

799
00:33:30,220 --> 00:33:33,250
the the equivalent of the using

800
00:33:31,690 --> 00:33:35,679
statement and c-sharp so we're importing

801
00:33:33,250 --> 00:33:37,510
namespaces in order to access the system

802
00:33:35,679 --> 00:33:39,160
dot core system that reflection and

803
00:33:37,510 --> 00:33:41,799
system dot Interop services which are

804
00:33:39,160 --> 00:33:43,750
the the great like namespaces that we

805
00:33:41,799 --> 00:33:45,129
usually use for creating payloads and

806
00:33:43,750 --> 00:33:47,200
stuff because of the functionality that

807
00:33:45,130 --> 00:33:48,790
they have and then we're just calling

808
00:33:47,200 --> 00:33:50,080
system console that write line in order

809
00:33:48,790 --> 00:33:51,668
to just print something from the screen

810
00:33:50,080 --> 00:33:54,220
in order to demonstrate that it does

811
00:33:51,669 --> 00:33:57,070
have access to the CLR we're also

812
00:33:54,220 --> 00:33:59,470
calling get object here which allows you

813
00:33:57,070 --> 00:34:02,530
to download an SCT script and execute

814
00:33:59,470 --> 00:34:04,090
whatever function you defined in SCT

815
00:34:02,530 --> 00:34:06,910
script so if you really was sub T's work

816
00:34:04,090 --> 00:34:09,149
and SCT payloads you can just call get

817
00:34:06,910 --> 00:34:11,440
object from within clear script and

818
00:34:09,149 --> 00:34:15,489
it'll it'll just it everything just

819
00:34:11,440 --> 00:34:18,389
magically works as you'd expect so I'm

820
00:34:15,489 --> 00:34:22,750
just going to quickly start up a simple

821
00:34:18,389 --> 00:34:24,490
Python HTTP server here on my side okay

822
00:34:22,750 --> 00:34:28,790
so we got a HTTP server running there

823
00:34:24,489 --> 00:34:40,580
and now when I execute this

824
00:34:28,790 --> 00:34:40,969
Oh yep there you go wrong command there

825
00:34:40,580 --> 00:34:44,630
you go

826
00:34:40,969 --> 00:34:48,259
so and from the output you can see that

827
00:34:44,630 --> 00:34:50,600
we've also have access to the dotnet CLR

828
00:34:48,260 --> 00:34:52,790
right because we've managed to actually

829
00:34:50,600 --> 00:34:56,330
access dynamically access done at api's

830
00:34:52,790 --> 00:35:01,279
from jscript within powershell within

831
00:34:56,330 --> 00:35:03,500
clear script that make sense and we pop

832
00:35:01,280 --> 00:35:06,010
calc so we successfully executed the SCT

833
00:35:03,500 --> 00:35:06,010
payload

834
00:35:15,999 --> 00:35:23,480
sweet okay and again like this isn't

835
00:35:20,180 --> 00:35:26,269
exactly like revolutionary stuff but

836
00:35:23,480 --> 00:35:31,940
again it's about shifting that paradigm

837
00:35:26,269 --> 00:35:33,439
back from compiled languages to see -

838
00:35:31,940 --> 00:35:35,239
like PowerShell style attacks so

839
00:35:33,440 --> 00:35:37,220
dynamically evaluating scripts and

840
00:35:35,239 --> 00:35:40,190
getting in like creating your payloads

841
00:35:37,220 --> 00:35:41,839
on the fly server-side rather than like

842
00:35:40,190 --> 00:35:43,400
setting up development pipelines and

843
00:35:41,839 --> 00:35:45,410
that kind of stuff so and it's such a

844
00:35:43,400 --> 00:35:47,809
like streamlining your payload creation

845
00:35:45,410 --> 00:35:50,690
for rapid prototyping and at the same

846
00:35:47,809 --> 00:35:53,960
time like because we're embedding these

847
00:35:50,690 --> 00:35:55,489
languages that the PowerShell that

848
00:35:53,960 --> 00:35:57,230
PowerShell doesn't have any insight into

849
00:35:55,489 --> 00:35:58,400
like all the defenses that the

850
00:35:57,230 --> 00:36:01,099
PowerShell runtime doesn't have any

851
00:35:58,400 --> 00:36:04,069
insight into we're also bypassing a lot

852
00:36:01,099 --> 00:36:06,230
of protections so like MZ and all that

853
00:36:04,069 --> 00:36:09,380
stuff so like it has a number of

854
00:36:06,230 --> 00:36:10,789
advantages and it's also usually at

855
00:36:09,380 --> 00:36:12,319
least in my experience when I have used

856
00:36:10,789 --> 00:36:14,539
these it's also really confusing for

857
00:36:12,319 --> 00:36:16,099
defenders when they go read this they're

858
00:36:14,539 --> 00:36:18,400
just they usually are just really

859
00:36:16,099 --> 00:36:22,400
confused so you know it's sort of

860
00:36:18,400 --> 00:36:25,789
passive obfuscation there's also a

861
00:36:22,400 --> 00:36:27,829
c-sharp example of this that you can

862
00:36:25,789 --> 00:36:28,970
view in the github repo as well so if

863
00:36:27,829 --> 00:36:30,799
you want you want to do this through

864
00:36:28,970 --> 00:36:32,720
c-sharp you can do that too and again

865
00:36:30,799 --> 00:36:34,220
like because of the interoperability of

866
00:36:32,720 --> 00:36:35,899
all these languages you can just pick

867
00:36:34,220 --> 00:36:40,368
and choose which language to embed these

868
00:36:35,900 --> 00:36:41,660
engines in and there you go yeah I

869
00:36:40,369 --> 00:36:45,230
already talked about that so there you

870
00:36:41,660 --> 00:36:48,078
go and so I just talked about three

871
00:36:45,230 --> 00:36:49,970
languages now right there are a bunch of

872
00:36:48,079 --> 00:36:52,700
others and these are the ones that I've

873
00:36:49,970 --> 00:36:54,558
found so far there's Lua implementations

874
00:36:52,700 --> 00:36:56,118
on top of the net so first if you're

875
00:36:54,559 --> 00:37:00,140
comfortable with Lua and you want to

876
00:36:56,119 --> 00:37:02,930
create malware on with Lua based on net

877
00:37:00,140 --> 00:37:05,598
you can do that and again like you can

878
00:37:02,930 --> 00:37:08,029
directly call dotnet api's through these

879
00:37:05,599 --> 00:37:10,519
languages because they're based on the

880
00:37:08,029 --> 00:37:12,799
dotnet framework I'm not a really

881
00:37:10,519 --> 00:37:15,859
interesting one that I'm going to be

882
00:37:12,799 --> 00:37:20,210
looking into hopefully soon if I ever

883
00:37:15,859 --> 00:37:23,299
get time is a dotnet webassembly project

884
00:37:20,210 --> 00:37:26,340
and that allows you to dynamically

885
00:37:23,299 --> 00:37:29,520
create and execute web assemblies from

886
00:37:26,340 --> 00:37:31,680
thin dotnet which I find to be quite

887
00:37:29,520 --> 00:37:33,180
mind-blowing so I'm definitely gonna be

888
00:37:31,680 --> 00:37:35,220
look at that because that that would be

889
00:37:33,180 --> 00:37:36,990
some interesting I think shenanigan

890
00:37:35,220 --> 00:37:38,819
opportunities in terms of like payload

891
00:37:36,990 --> 00:37:40,049
and malware creation so that would be

892
00:37:38,820 --> 00:37:41,880
that's that's fantastic

893
00:37:40,050 --> 00:37:44,040
there's also ironpython to which i've

894
00:37:41,880 --> 00:37:46,200
talked about a rip there's ironpython

895
00:37:44,040 --> 00:37:49,320
three is in the works I'm hoping that

896
00:37:46,200 --> 00:37:52,230
there it's going to be ready by like the

897
00:37:49,320 --> 00:37:54,090
Python to eol but considering it's like

898
00:37:52,230 --> 00:37:57,060
it's not the same developers at all it

899
00:37:54,090 --> 00:38:00,780
might not be ready by next year and is

900
00:37:57,060 --> 00:38:04,049
also boo lang you can also embed the

901
00:38:00,780 --> 00:38:06,180
djinns project just standard JavaScript

902
00:38:04,050 --> 00:38:07,790
if you want to embed JavaScript within

903
00:38:06,180 --> 00:38:11,310
dotnet you can do that too

904
00:38:07,790 --> 00:38:12,600
excuse me it would be interesting to see

905
00:38:11,310 --> 00:38:13,920
I'm not try this yet it would be

906
00:38:12,600 --> 00:38:16,290
interesting to see what happens if you

907
00:38:13,920 --> 00:38:18,270
embedded JavaScript within c-sharp and

908
00:38:16,290 --> 00:38:20,130
then through a beef hook at it that

909
00:38:18,270 --> 00:38:22,200
would be interesting I'm I'm gonna I

910
00:38:20,130 --> 00:38:24,450
would assume it would break but it would

911
00:38:22,200 --> 00:38:25,859
be pretty cool to like beef endpoints

912
00:38:24,450 --> 00:38:31,279
that I think that would that would be

913
00:38:25,860 --> 00:38:35,250
that would be like pretty hilarious so

914
00:38:31,280 --> 00:38:37,710
if so say you don't want to do any of

915
00:38:35,250 --> 00:38:41,070
this okay so you're like marchello like

916
00:38:37,710 --> 00:38:42,510
this is this is great but I'm I don't

917
00:38:41,070 --> 00:38:44,010
want to do any of this whatsoever I

918
00:38:42,510 --> 00:38:45,480
don't want to embed stuff I don't want

919
00:38:44,010 --> 00:38:47,540
to worry about dll's I don't want to

920
00:38:45,480 --> 00:38:51,900
worry about anything I just want to

921
00:38:47,540 --> 00:38:54,540
rapidly create payloads that you can

922
00:38:51,900 --> 00:38:57,540
serve to any dotnet machine well well

923
00:38:54,540 --> 00:38:59,880
boo Lang delivers so I got you fam when

924
00:38:57,540 --> 00:39:01,500
it comes to that because usually because

925
00:38:59,880 --> 00:39:03,420
these languages are based on the.net

926
00:39:01,500 --> 00:39:05,940
framework dotnet framework provides

927
00:39:03,420 --> 00:39:07,410
these languages a bunch of tools in

928
00:39:05,940 --> 00:39:09,450
order to for them to quickly create

929
00:39:07,410 --> 00:39:11,069
compilers for those scripting languages

930
00:39:09,450 --> 00:39:13,980
okay so usually these third-party

931
00:39:11,070 --> 00:39:16,020
languages come with built-in compilers

932
00:39:13,980 --> 00:39:19,080
so you can take your boo lang script

933
00:39:16,020 --> 00:39:21,750
okay compile it directly to a dotnet

934
00:39:19,080 --> 00:39:24,270
assembly and it'll just run everywhere

935
00:39:21,750 --> 00:39:26,820
directly so and it's a lot faster than

936
00:39:24,270 --> 00:39:29,250
installing Visual Studio fumbling around

937
00:39:26,820 --> 00:39:30,600
like you know in the the UI of visual

938
00:39:29,250 --> 00:39:33,120
suit if you're not familiar with its

939
00:39:30,600 --> 00:39:34,500
just sublime text some boo Lang stores

940
00:39:33,120 --> 00:39:37,020
compile it and you're good to go

941
00:39:34,500 --> 00:39:39,480
and again it's a dotnet assembly so you

942
00:39:37,020 --> 00:39:41,670
can embed it you know in HT a

943
00:39:39,480 --> 00:39:44,130
using dotnet to jsut know your world's

944
00:39:41,670 --> 00:39:50,520
your oyster at that point and I'm gonna

945
00:39:44,130 --> 00:39:51,810
demo that real quick so I have here well

946
00:39:50,520 --> 00:39:54,570
that's kind of you know what I'm gonna

947
00:39:51,810 --> 00:39:56,820
close sublime see if maybe that works

948
00:39:54,570 --> 00:39:58,170
with the zoom no I don't want to same

949
00:39:56,820 --> 00:40:13,560
changes there you go

950
00:39:58,170 --> 00:40:15,360
okay let's go over here can a sex is I

951
00:40:13,560 --> 00:40:21,060
never know zoom would be my dismay in

952
00:40:15,360 --> 00:40:22,470
this talk okay um you can have two again

953
00:40:21,060 --> 00:40:23,730
trust me but again this is also in the

954
00:40:22,470 --> 00:40:26,879
same rev Oh so if you want to pull this

955
00:40:23,730 --> 00:40:28,650
pull this down it's pretty easy to do so

956
00:40:26,880 --> 00:40:30,150
this is a some bullying source that

957
00:40:28,650 --> 00:40:33,300
essentially calls mini dump right dump

958
00:40:30,150 --> 00:40:35,670
okay so it's a native API that allows

959
00:40:33,300 --> 00:40:37,080
you to dump process memory and of course

960
00:40:35,670 --> 00:40:39,000
we're gonna be dumping else ass because

961
00:40:37,080 --> 00:40:41,069
that's what we don't want to do and I

962
00:40:39,000 --> 00:40:43,890
just want to note that it's 29 lines of

963
00:40:41,070 --> 00:40:46,200
code no Visual Studio required you can

964
00:40:43,890 --> 00:40:48,870
even do this on like a Linux system

965
00:40:46,200 --> 00:40:50,970
server side if you wanted and then you

966
00:40:48,870 --> 00:40:54,150
can couple that with embedding boo lang

967
00:40:50,970 --> 00:40:57,480
in PowerShell or C sharp or whatever and

968
00:40:54,150 --> 00:40:59,670
pulling this down remotely compiling it

969
00:40:57,480 --> 00:41:01,470
on the end point and doing this but ya

970
00:40:59,670 --> 00:41:03,720
do it like actually performing like some

971
00:41:01,470 --> 00:41:05,910
c2 and stuff that you can compile that

972
00:41:03,720 --> 00:41:07,109
you can the there's a lot of flexibility

973
00:41:05,910 --> 00:41:12,450
in terms of what you can do with this

974
00:41:07,110 --> 00:41:15,450
right so once you have this script how

975
00:41:12,450 --> 00:41:17,520
do you go about compiling it so but

976
00:41:15,450 --> 00:41:19,200
again these languages usually come with

977
00:41:17,520 --> 00:41:21,780
a built in compiler in boolean's case

978
00:41:19,200 --> 00:41:24,480
there's an executable called busi that

979
00:41:21,780 --> 00:41:27,750
eggsy you see that eggsy is the actual

980
00:41:24,480 --> 00:41:31,800
compiler for this so we're giving it the

981
00:41:27,750 --> 00:41:33,720
source of the bullying file that dumps

982
00:41:31,800 --> 00:41:35,310
memory okay and then we're telling it

983
00:41:33,720 --> 00:41:36,990
you know output it to an executable by

984
00:41:35,310 --> 00:41:40,950
default it outputs to an executable you

985
00:41:36,990 --> 00:41:42,629
can have it output to a DLL I'm gonna

986
00:41:40,950 --> 00:41:45,359
run this and there you go

987
00:41:42,630 --> 00:41:47,520
compiler starts up compiles it we're

988
00:41:45,360 --> 00:41:50,420
good to go and now it should be on my

989
00:41:47,520 --> 00:41:50,420
desktop here

990
00:41:50,550 --> 00:42:02,620
there it is I'm gonna open up our show

991
00:41:55,960 --> 00:42:03,850
and run it so mmmm that XE the second

992
00:42:02,620 --> 00:42:05,140
the first argument the only argument

993
00:42:03,850 --> 00:42:07,720
that it accepts is the name of the

994
00:42:05,140 --> 00:42:10,120
memory dump you want to put on disk I'm

995
00:42:07,720 --> 00:42:12,759
just gonna call it what it also helps

996
00:42:10,120 --> 00:42:14,410
that I started up start PowerShell up as

997
00:42:12,760 --> 00:42:15,880
administrator because in order to do

998
00:42:14,410 --> 00:42:19,990
this I need to be administrator so I'll

999
00:42:15,880 --> 00:42:22,600
do that real quick oh boy well you saw

1000
00:42:19,990 --> 00:42:32,200
the command line so I get I think you

1001
00:42:22,600 --> 00:42:33,370
all trust me desktop ok you know what's

1002
00:42:32,200 --> 00:42:39,430
gonna make this bigger real quick once

1003
00:42:33,370 --> 00:42:41,400
again 28 there you go that's probably

1004
00:42:39,430 --> 00:42:45,339
better

1005
00:42:41,400 --> 00:42:48,550
I'm gonna call it have it agent IP there

1006
00:42:45,340 --> 00:42:51,310
you go dump to CH IP so this is now a

1007
00:42:48,550 --> 00:42:56,410
memory dump we go to the C Drive here

1008
00:42:51,310 --> 00:42:58,540
and there it is so we've created a

1009
00:42:56,410 --> 00:43:00,870
really quick bullying script that you

1010
00:42:58,540 --> 00:43:03,790
can just write in Visual Studio

1011
00:43:00,870 --> 00:43:05,560
sorry sublime text without the overhead

1012
00:43:03,790 --> 00:43:07,570
of the development environment anything

1013
00:43:05,560 --> 00:43:09,370
like that just a quick script you

1014
00:43:07,570 --> 00:43:11,140
compile it and it runs on any dotnet

1015
00:43:09,370 --> 00:43:13,029
input and runs on any employment with

1016
00:43:11,140 --> 00:43:15,370
that dotnet framework installed what's

1017
00:43:13,030 --> 00:43:18,490
really cool again about pooling also is

1018
00:43:15,370 --> 00:43:20,710
that unless you if you don't reference

1019
00:43:18,490 --> 00:43:22,479
the bullying tool chain itself in your

1020
00:43:20,710 --> 00:43:23,950
script so if you don't import some of

1021
00:43:22,480 --> 00:43:26,260
the like the blank compilers and that

1022
00:43:23,950 --> 00:43:28,450
kind of thing it compiles directly to ms

1023
00:43:26,260 --> 00:43:31,180
IL which means that it'll also execute

1024
00:43:28,450 --> 00:43:33,220
on any version of.net so if you took

1025
00:43:31,180 --> 00:43:34,419
this binary put it on a Windows 7

1026
00:43:33,220 --> 00:43:36,790
machine with the dotnet framework

1027
00:43:34,420 --> 00:43:39,760
version 2 installed it would just run no

1028
00:43:36,790 --> 00:43:42,580
problem ok so it's just it's it's a

1029
00:43:39,760 --> 00:43:44,890
really cool way of just quickly

1030
00:43:42,580 --> 00:43:49,470
prototyping scripts and operationally

1031
00:43:44,890 --> 00:43:49,470
weaponizing stuff at least in my opinion

1032
00:43:54,850 --> 00:43:59,380
okay and I already did this so there you

1033
00:43:59,020 --> 00:44:02,110
go

1034
00:43:59,380 --> 00:44:03,580
so how much and I do not have time to do

1035
00:44:02,110 --> 00:44:08,260
this because I think there's only 40

1036
00:44:03,580 --> 00:44:09,520
seconds left but silent Trinity is a

1037
00:44:08,260 --> 00:44:11,080
tool that I wrote you can find that at

1038
00:44:09,520 --> 00:44:13,390
that URL there if you're interested I

1039
00:44:11,080 --> 00:44:15,819
have a big update for it coming but as

1040
00:44:13,390 --> 00:44:19,690
of right now it has some pretty big good

1041
00:44:15,820 --> 00:44:22,180
functionality it sent tries to wrap

1042
00:44:19,690 --> 00:44:24,460
these concepts around a framework and

1043
00:44:22,180 --> 00:44:27,370
around an implant to a masse to implant

1044
00:44:24,460 --> 00:44:28,750
tool so it tends to weaponize some of

1045
00:44:27,370 --> 00:44:30,480
these concepts a little bit more and

1046
00:44:28,750 --> 00:44:35,770
make it a little bit more streamlined

1047
00:44:30,480 --> 00:44:38,890
the 1.0 update which is on github right

1048
00:44:35,770 --> 00:44:42,280
now has a lot of cool stuff it has

1049
00:44:38,890 --> 00:44:44,410
encrypted c2 coms gulang support so

1050
00:44:42,280 --> 00:44:47,110
they're actually boo lang modules in the

1051
00:44:44,410 --> 00:44:49,810
version that's online right now the tab

1052
00:44:47,110 --> 00:44:52,300
complete is awesome and it completes

1053
00:44:49,810 --> 00:44:53,710
everything which i always that's a pet

1054
00:44:52,300 --> 00:44:56,110
peeve of mine so I put to have a

1055
00:44:53,710 --> 00:44:57,310
complete and everything custom and you

1056
00:44:56,110 --> 00:44:59,410
can customize the check in into real

1057
00:44:57,310 --> 00:45:01,259
sessions and you can there's no help

1058
00:44:59,410 --> 00:45:03,609
manual option you know which which helps

1059
00:45:01,260 --> 00:45:05,230
so you get and there's a bunch of

1060
00:45:03,610 --> 00:45:07,030
mothers and me me cats module there's a

1061
00:45:05,230 --> 00:45:07,780
bunch of stuff so definitely I encourage

1062
00:45:07,030 --> 00:45:11,620
you to check it out if you're interested

1063
00:45:07,780 --> 00:45:13,060
in this stuff the to version 2.0 I'm

1064
00:45:11,620 --> 00:45:15,430
working on right now the next version of

1065
00:45:13,060 --> 00:45:17,080
it and it'll be client-server based so

1066
00:45:15,430 --> 00:45:18,310
if you have something like cobalt strike

1067
00:45:17,080 --> 00:45:20,049
if you're familiar with cloth strike

1068
00:45:18,310 --> 00:45:21,940
it'll basically be implemented like that

1069
00:45:20,050 --> 00:45:24,700
so you have a client a server it'll be

1070
00:45:21,940 --> 00:45:26,890
multi player and multi server so I'm

1071
00:45:24,700 --> 00:45:28,540
hoping that it'll be also like an

1072
00:45:26,890 --> 00:45:32,920
alternative to cobalt strike I just have

1073
00:45:28,540 --> 00:45:35,470
to work on it a bit more now detection

1074
00:45:32,920 --> 00:45:38,290
this is where stuff gets a little hard

1075
00:45:35,470 --> 00:45:43,000
as usual dotnet so things are getting

1076
00:45:38,290 --> 00:45:45,990
better dotnet 4.8 has integrated MZ

1077
00:45:43,000 --> 00:45:49,510
support now again it's signature based

1078
00:45:45,990 --> 00:45:50,830
so your mileage may vary on that one and

1079
00:45:49,510 --> 00:45:52,750
there are there's already research in

1080
00:45:50,830 --> 00:45:54,610
place that allows you to bypass the MD

1081
00:45:52,750 --> 00:45:59,500
support at four point eight another

1082
00:45:54,610 --> 00:46:01,960
problem is that there won't be like

1083
00:45:59,500 --> 00:46:03,010
another problem is that the endpoints

1084
00:46:01,960 --> 00:46:04,420
won't have gotten a four point eight

1085
00:46:03,010 --> 00:46:05,980
installed by default so we're back to

1086
00:46:04,420 --> 00:46:07,600
the PowerShell problem we're like

1087
00:46:05,980 --> 00:46:09,010
different version of.net well

1088
00:46:07,600 --> 00:46:13,750
the defenses in place and some well

1089
00:46:09,010 --> 00:46:15,940
these are some links to defensive

1090
00:46:13,750 --> 00:46:18,040
techniques that have come out and in the

1091
00:46:15,940 --> 00:46:20,230
in the recent couple of months

1092
00:46:18,040 --> 00:46:22,990
essentially or just a year or so it's

1093
00:46:20,230 --> 00:46:24,330
pretty recent crab ztw is an official

1094
00:46:22,990 --> 00:46:27,430
Microsoft project that allows you to

1095
00:46:24,330 --> 00:46:29,590
detect this behavior using a technology

1096
00:46:27,430 --> 00:46:31,020
called etw which is built into the

1097
00:46:29,590 --> 00:46:34,270
Windows operating system by default

1098
00:46:31,020 --> 00:46:36,700
based on C++ silk etw is also an awesome

1099
00:46:34,270 --> 00:46:38,080
resource and it attempts to try to

1100
00:46:36,700 --> 00:46:41,410
detect this stuff there's also been some

1101
00:46:38,080 --> 00:46:43,420
awesome stuff by the wool vermigli with

1102
00:46:41,410 --> 00:46:46,180
that twitter handle that he's put out

1103
00:46:43,420 --> 00:46:49,090
about but about a but like how detecting

1104
00:46:46,180 --> 00:46:51,240
these kind of attacks luke Jenning at

1105
00:46:49,090 --> 00:46:53,230
blackhat eighteen that are awesome talk

1106
00:46:51,240 --> 00:46:54,790
memory reason an implants code injection

1107
00:46:53,230 --> 00:46:56,980
is alive as well which is a good

1108
00:46:54,790 --> 00:47:00,250
resource for some measures against this

1109
00:46:56,980 --> 00:47:02,950
stuff counter step actually did i think

1110
00:47:00,250 --> 00:47:05,530
is counter step is the MWR company they

1111
00:47:02,950 --> 00:47:08,049
actually did a blog post on detecting

1112
00:47:05,530 --> 00:47:09,940
silent energy itself so you can

1113
00:47:08,050 --> 00:47:12,610
definitely refer to that if you want in

1114
00:47:09,940 --> 00:47:14,830
terms of like how to create signatures

1115
00:47:12,610 --> 00:47:17,710
and detect these kind of activity on

1116
00:47:14,830 --> 00:47:21,700
endpoints the biggest giveaway though in

1117
00:47:17,710 --> 00:47:24,100
my opinion is non assemblies with not a

1118
00:47:21,700 --> 00:47:26,589
file backing and by that I mean if you

1119
00:47:24,100 --> 00:47:29,529
inspect the actual app domains that the

1120
00:47:26,590 --> 00:47:34,150
dotnet processes spin up and see that

1121
00:47:29,530 --> 00:47:36,460
the assemblies themselves don't have a

1122
00:47:34,150 --> 00:47:38,380
file name attached to them like they're

1123
00:47:36,460 --> 00:47:40,960
not on disk that's probably a pretty

1124
00:47:38,380 --> 00:47:42,910
good giveaway I actually haven't seen a

1125
00:47:40,960 --> 00:47:45,490
legitimate that in an application yet

1126
00:47:42,910 --> 00:47:48,730
that actually loads assemblies via

1127
00:47:45,490 --> 00:47:51,160
reflection so I still have to find that

1128
00:47:48,730 --> 00:47:54,280
which is kind of surprising to me and

1129
00:47:51,160 --> 00:47:55,390
also the fact that you know gulang and I

1130
00:47:54,280 --> 00:47:59,350
they're called bullying and ironpython

1131
00:47:55,390 --> 00:48:00,759
zip read that giveaway and which could

1132
00:47:59,350 --> 00:48:02,410
indicate some malicious activity so

1133
00:48:00,760 --> 00:48:03,700
ironpython and bullying are definitely

1134
00:48:02,410 --> 00:48:05,799
something that you should probably watch

1135
00:48:03,700 --> 00:48:09,100
out for in terms of like look net

1136
00:48:05,800 --> 00:48:10,480
processes if they're loaded in NR I

1137
00:48:09,100 --> 00:48:12,160
talked about this but then again

1138
00:48:10,480 --> 00:48:13,540
long-term goal silent journey will be to

1139
00:48:12,160 --> 00:48:14,770
integrate a lotta bunch of other stuff

1140
00:48:13,540 --> 00:48:17,790
that I wrote over the course of the

1141
00:48:14,770 --> 00:48:19,810
years so you'll have like one tool to do

1142
00:48:17,790 --> 00:48:21,460
infrastructure automation and network

1143
00:48:19,810 --> 00:48:24,009
pentesting so it would be cool

1144
00:48:21,460 --> 00:48:25,170
have a single - I did all this thank you

1145
00:48:24,010 --> 00:48:33,749
appreciate it

1146
00:48:25,170 --> 00:48:33,749
[Applause]

