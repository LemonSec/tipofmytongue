1
00:00:06,020 --> 00:00:11,550
okay hello everyone and welcome to our

2
00:00:09,570 --> 00:00:15,089
talk on using machine learning to

3
00:00:11,550 --> 00:00:17,070
exploit other machines we've just had a

4
00:00:15,089 --> 00:00:19,560
very nice talk by Philip talking about

5
00:00:17,070 --> 00:00:21,180
one aspect of exploitation we want to

6
00:00:19,560 --> 00:00:22,979
review a different aspect of it and

7
00:00:21,180 --> 00:00:24,689
hopefully you can learn something from

8
00:00:22,980 --> 00:00:26,970
this talk

9
00:00:24,689 --> 00:00:28,529
usually we begin this talk and we've

10
00:00:26,970 --> 00:00:30,090
done a couple of them with this legal

11
00:00:28,529 --> 00:00:32,729
disclaimer and we have to wait patiently

12
00:00:30,090 --> 00:00:34,410
while all of you read it however I no

13
00:00:32,729 --> 00:00:37,648
longer work for that company so I don't

14
00:00:34,410 --> 00:00:40,349
have to make you do anything I do work I

15
00:00:37,649 --> 00:00:42,840
hope that you're really tall but I have

16
00:00:40,350 --> 00:00:45,780
the clicker so I decide so my name is

17
00:00:42,840 --> 00:00:47,399
guy and this is Ezra we're both active

18
00:00:45,780 --> 00:00:50,760
very active in the community in Israel

19
00:00:47,399 --> 00:00:52,230
we both are leading the besides Tel Aviv

20
00:00:50,760 --> 00:00:53,969
which we're going to happen next week

21
00:00:52,230 --> 00:00:55,709
and if you haven't planned to arrive

22
00:00:53,969 --> 00:00:59,190
there yet you should really buy your

23
00:00:55,710 --> 00:01:01,219
airplane tickets now as I was also

24
00:00:59,190 --> 00:01:03,539
reading the local DEF CON community and

25
00:01:01,219 --> 00:01:05,610
all together we are doing a lot of

26
00:01:03,539 --> 00:01:07,950
research together for I think about a

27
00:01:05,610 --> 00:01:11,220
year and a half two years now so that's

28
00:01:07,950 --> 00:01:13,590
been fun we've been around the roll most

29
00:01:11,220 --> 00:01:16,439
recently we gave a talk at the SAS

30
00:01:13,590 --> 00:01:19,530
conference in Singapore by kaspersky and

31
00:01:16,439 --> 00:01:22,020
in other places as well and I will refer

32
00:01:19,530 --> 00:01:24,659
to some of these talks later in in this

33
00:01:22,020 --> 00:01:25,979
deck and I encourage you to find the

34
00:01:24,659 --> 00:01:28,049
videos or come and ask us questions

35
00:01:25,979 --> 00:01:32,158
later because some of that can be useful

36
00:01:28,049 --> 00:01:34,200
for you so to give a rough explanation

37
00:01:32,159 --> 00:01:39,270
of the problem on hand it over to Ezra

38
00:01:34,200 --> 00:01:42,150
so the problems like this imagine your

39
00:01:39,270 --> 00:01:45,649
classical passing scenario where you

40
00:01:42,150 --> 00:01:48,479
have thousands of crashes to analyze

41
00:01:45,649 --> 00:01:48,780
which is I believe a good problem to

42
00:01:48,479 --> 00:01:54,840
have

43
00:01:48,780 --> 00:02:00,600
if our Father finds crashes our status

44
00:01:54,840 --> 00:02:04,290
is okay however having out of crashes

45
00:02:00,600 --> 00:02:07,259
means that we need to sift through them

46
00:02:04,290 --> 00:02:10,610
and we can do it automatically and we if

47
00:02:07,259 --> 00:02:14,310
we do it automatically we might miss

48
00:02:10,610 --> 00:02:18,510
some important crashes

49
00:02:14,310 --> 00:02:21,450
but it helps reduce the thousands of

50
00:02:18,510 --> 00:02:23,760
crashes that we have into just hundreds

51
00:02:21,450 --> 00:02:29,609
of results which could be interesting I

52
00:02:23,760 --> 00:02:32,790
hope so and let's also understand that

53
00:02:29,610 --> 00:02:36,080
if we're doing this work manually I mean

54
00:02:32,790 --> 00:02:39,390
when it gets to the actual researcher

55
00:02:36,080 --> 00:02:42,300
trying to find these exploitable crashes

56
00:02:39,390 --> 00:02:45,720
it's not something that can really scale

57
00:02:42,300 --> 00:02:50,280
it's something that takes time it's

58
00:02:45,720 --> 00:02:56,070
something that requires manual work it's

59
00:02:50,280 --> 00:02:59,640
not simple so when we started thinking

60
00:02:56,070 --> 00:03:03,840
about this whole world this whole set of

61
00:02:59,640 --> 00:03:06,630
problems we thought that the main work

62
00:03:03,840 --> 00:03:10,620
that we will need to do to be able to

63
00:03:06,630 --> 00:03:15,269
use machine learning to help us identify

64
00:03:10,620 --> 00:03:18,480
these crashes the time will be in

65
00:03:15,270 --> 00:03:19,980
building this particular model and we're

66
00:03:18,480 --> 00:03:21,480
going to go in a few about what it's

67
00:03:19,980 --> 00:03:23,040
model and words machine learning or at

68
00:03:21,480 --> 00:03:27,570
least how we believe it's machine

69
00:03:23,040 --> 00:03:30,900
learning and model but when we started

70
00:03:27,570 --> 00:03:33,209
working with this we identified that the

71
00:03:30,900 --> 00:03:36,959
actual problem was not building the

72
00:03:33,209 --> 00:03:40,530
model but rather starting to gather the

73
00:03:36,959 --> 00:03:45,750
data that we can start using to train

74
00:03:40,530 --> 00:03:50,220
machines to do our work turns out that

75
00:03:45,750 --> 00:03:52,260
finding real crashes that are really

76
00:03:50,220 --> 00:03:58,650
exploitable it's not a simple problem

77
00:03:52,260 --> 00:04:02,070
and not only that we don't only need to

78
00:03:58,650 --> 00:04:08,090
have data but rather have good data

79
00:04:02,070 --> 00:04:12,090
because if we have 10,000 times exactly

80
00:04:08,090 --> 00:04:16,010
the same crash it's not going to help us

81
00:04:12,090 --> 00:04:21,478
we need diverse data we need diverse

82
00:04:16,010 --> 00:04:23,400
crashes that are exploitable so as we

83
00:04:21,478 --> 00:04:27,750
can imagine as we can understand from

84
00:04:23,400 --> 00:04:30,539
this point it's not simple

85
00:04:27,750 --> 00:04:34,290
and one of the things that I had seen in

86
00:04:30,540 --> 00:04:37,350
the past it's very useful when you are

87
00:04:34,290 --> 00:04:40,130
having this kind of problems work you

88
00:04:37,350 --> 00:04:43,760
don't even know where to start

89
00:04:40,130 --> 00:04:47,580
it's just to define it and define it as

90
00:04:43,760 --> 00:04:50,909
well as possible so you will be able to

91
00:04:47,580 --> 00:04:54,990
concentrate directly into what you need

92
00:04:50,910 --> 00:04:58,770
to solve so having said that we thought

93
00:04:54,990 --> 00:05:03,560
about how to make the question of the

94
00:04:58,770 --> 00:05:03,560
problem which is what is Australia

95
00:05:09,740 --> 00:05:16,860
anyways now we're really talking the

96
00:05:13,560 --> 00:05:20,340
problem was can we create a machine

97
00:05:16,860 --> 00:05:24,320
learning model that can triage these

98
00:05:20,340 --> 00:05:27,390
crashes and can help us as researchers

99
00:05:24,320 --> 00:05:30,360
only to focus on exploitable ones

100
00:05:27,390 --> 00:05:32,700
because again guy is going to tell you a

101
00:05:30,360 --> 00:05:36,660
little bit of the story about how we

102
00:05:32,700 --> 00:05:44,880
started with this but we had a big big

103
00:05:36,660 --> 00:05:46,590
big corpus of AFL crashes so to give you

104
00:05:44,880 --> 00:05:49,530
some background a bit of a story about

105
00:05:46,590 --> 00:05:51,599
how this presentation came to be I'll

106
00:05:49,530 --> 00:05:54,929
give you some a couple of sentences

107
00:05:51,600 --> 00:05:57,419
about what we previous is done so my

108
00:05:54,930 --> 00:05:59,310
team and Ezra's team my team and the

109
00:05:57,419 --> 00:06:01,680
others were trying to build exploits

110
00:05:59,310 --> 00:06:03,660
actually finding active exploits in

111
00:06:01,680 --> 00:06:04,710
machine learning stacks so that's a

112
00:06:03,660 --> 00:06:06,720
whole different talk and it's an

113
00:06:04,710 --> 00:06:08,909
interesting one but we had a problem

114
00:06:06,720 --> 00:06:10,410
than where we were fuzzing the system

115
00:06:08,910 --> 00:06:12,120
running a lot of different inputs on the

116
00:06:10,410 --> 00:06:14,070
systems and getting a lot of crashes a

117
00:06:12,120 --> 00:06:16,470
lot of results when I sell out of

118
00:06:14,070 --> 00:06:18,599
crashes I mean a couple of tens of

119
00:06:16,470 --> 00:06:20,610
thousands of crashes that we had to

120
00:06:18,600 --> 00:06:22,590
triage we had to separate and we had to

121
00:06:20,610 --> 00:06:24,450
bring some order in to them to know

122
00:06:22,590 --> 00:06:25,919
where do we want to invest a lot of

123
00:06:24,450 --> 00:06:28,770
labor into understanding if they are

124
00:06:25,919 --> 00:06:31,950
exploitable or not so we were trying

125
00:06:28,770 --> 00:06:34,890
riding the car from I think it was from

126
00:06:31,950 --> 00:06:37,110
San Jose southern Bay Area all the way

127
00:06:34,890 --> 00:06:39,150
to San Francisco we were talking well we

128
00:06:37,110 --> 00:06:40,740
need a new idea for the next conference

129
00:06:39,150 --> 00:06:43,380
and want to submit to and

130
00:06:40,740 --> 00:06:44,850
wouldn't be wouldn't it be really cool

131
00:06:43,380 --> 00:06:47,010
if you could use machine learning to do

132
00:06:44,850 --> 00:06:48,510
all of the hard work for us before me

133
00:06:47,010 --> 00:06:51,360
because we were spending a lot of time

134
00:06:48,510 --> 00:06:53,070
trying to investigate those AFL results

135
00:06:51,360 --> 00:06:54,960
those crashes what if the machine

136
00:06:53,070 --> 00:06:58,680
learning model could do this for us so

137
00:06:54,960 --> 00:07:00,510
from that car ride that drive for San

138
00:06:58,680 --> 00:07:03,000
Francisco came this talk and this idea

139
00:07:00,510 --> 00:07:05,730
and this project so to define this more

140
00:07:03,000 --> 00:07:08,430
specifically what we wanted to achieve

141
00:07:05,730 --> 00:07:10,410
was to create a machine learning model

142
00:07:08,430 --> 00:07:12,570
that would take what we were doing by

143
00:07:10,410 --> 00:07:15,000
hand which was to run a tool called

144
00:07:12,570 --> 00:07:16,890
exploitable a sidenote here every time

145
00:07:15,000 --> 00:07:18,630
that I say exploitable and you see it

146
00:07:16,890 --> 00:07:21,930
underlined I mean the tool not the

147
00:07:18,630 --> 00:07:24,090
adjective or the verb so we were using

148
00:07:21,930 --> 00:07:26,280
this tool exploitable against our inputs

149
00:07:24,090 --> 00:07:28,530
and trying to discern if this is a good

150
00:07:26,280 --> 00:07:31,109
crash or a bad crash good as in is it

151
00:07:28,530 --> 00:07:32,549
exploitable or not so if we can create a

152
00:07:31,110 --> 00:07:34,800
machine learning model that can

153
00:07:32,550 --> 00:07:36,900
outperform exploitable meaning that it

154
00:07:34,800 --> 00:07:39,390
can work fast or it can find more cases

155
00:07:36,900 --> 00:07:41,929
or you can use it more flexibly

156
00:07:39,390 --> 00:07:45,390
than we would mean we could move through

157
00:07:41,930 --> 00:07:49,500
orders of magnitude more crashes at

158
00:07:45,390 --> 00:07:52,050
least in our vision so the first thing

159
00:07:49,500 --> 00:07:53,940
that I really want to share is the full

160
00:07:52,050 --> 00:07:55,380
disclosure for this project we had a

161
00:07:53,940 --> 00:07:57,990
very limited data set I'm going to

162
00:07:55,380 --> 00:08:00,150
explain exactly why this is not like a

163
00:07:57,990 --> 00:08:03,720
deep learning project or some other kind

164
00:08:00,150 --> 00:08:05,159
of buzzword I think I what we wanted to

165
00:08:03,720 --> 00:08:06,990
achieve in this talk is to share the

166
00:08:05,160 --> 00:08:09,270
methodology more than the results even

167
00:08:06,990 --> 00:08:11,460
though we will share the results but our

168
00:08:09,270 --> 00:08:13,349
aspiration is is that people who find

169
00:08:11,460 --> 00:08:15,539
machine learning if they're too buzzword

170
00:08:13,350 --> 00:08:18,450
you're too scary to take the time and

171
00:08:15,540 --> 00:08:22,170
try to use machine learning for other

172
00:08:18,450 --> 00:08:23,610
purposes even offensive purposes and in

173
00:08:22,170 --> 00:08:25,410
the end we're going to show you some

174
00:08:23,610 --> 00:08:28,770
results and we will explain why you can

175
00:08:25,410 --> 00:08:30,660
trust the results where we show you so

176
00:08:28,770 --> 00:08:33,090
the first thing is what the hell is

177
00:08:30,660 --> 00:08:35,490
machine learning so a lot of people are

178
00:08:33,090 --> 00:08:37,080
hearing the buzz words and treat machine

179
00:08:35,490 --> 00:08:39,600
learning today a bit like they treat

180
00:08:37,080 --> 00:08:41,220
blockchain it's a big buzz worthy thing

181
00:08:39,600 --> 00:08:43,140
it doesn't really have a lot of value

182
00:08:41,220 --> 00:08:44,550
and you should really wait for the storm

183
00:08:43,140 --> 00:08:44,910
to pass and everything to return to

184
00:08:44,550 --> 00:08:47,310
normal

185
00:08:44,910 --> 00:08:50,850
well machine learning is the buzzword

186
00:08:47,310 --> 00:08:53,099
thing there's no argument there however

187
00:08:50,850 --> 00:08:54,310
it is a tool and as a tool it has its

188
00:08:53,100 --> 00:08:56,860
use case where it

189
00:08:54,310 --> 00:08:59,800
very very effective and it has other use

190
00:08:56,860 --> 00:09:01,090
cases where obviously it isn't what

191
00:08:59,800 --> 00:09:02,949
we're going to show you today how to

192
00:09:01,090 --> 00:09:04,840
understand which use cases are

193
00:09:02,950 --> 00:09:06,820
applicable for machine learning in which

194
00:09:04,840 --> 00:09:08,740
use cases are probably not a good idea

195
00:09:06,820 --> 00:09:11,410
to use it and there are more of a buzz

196
00:09:08,740 --> 00:09:13,779
where the same kind of thing the other

197
00:09:11,410 --> 00:09:15,760
thing is is that we've spent I don't

198
00:09:13,779 --> 00:09:17,890
know about eighteen months researching

199
00:09:15,760 --> 00:09:19,870
the security of machine learning systems

200
00:09:17,890 --> 00:09:22,540
as I said referred to in the and the

201
00:09:19,870 --> 00:09:23,770
other talk that we gave and machine

202
00:09:22,540 --> 00:09:26,079
learning system have a lot of issues

203
00:09:23,770 --> 00:09:28,900
which I'm not going to go into here now

204
00:09:26,080 --> 00:09:30,880
but what they do share in common is that

205
00:09:28,900 --> 00:09:33,490
the way that they analyze the data and

206
00:09:30,880 --> 00:09:36,040
they produce the results is something

207
00:09:33,490 --> 00:09:38,980
that we as security researchers can use

208
00:09:36,040 --> 00:09:43,599
we can use those systems to make our

209
00:09:38,980 --> 00:09:45,010
lives easier so generally speaking what

210
00:09:43,600 --> 00:09:47,200
is machine learning machine learning is

211
00:09:45,010 --> 00:09:49,750
a process it's a process that feeds on

212
00:09:47,200 --> 00:09:51,339
data on one end and spits out results on

213
00:09:49,750 --> 00:09:53,470
the other just like any other process

214
00:09:51,339 --> 00:09:55,779
just like any function call that you use

215
00:09:53,470 --> 00:09:57,730
there are some caveat some things that

216
00:09:55,779 --> 00:09:59,530
you have to be cautious when you're

217
00:09:57,730 --> 00:10:03,580
using machine learning but once you

218
00:09:59,530 --> 00:10:06,339
understand what those caveats are it'll

219
00:10:03,580 --> 00:10:08,620
make your lives much much easier so the

220
00:10:06,339 --> 00:10:11,230
first part of the I will try to use my

221
00:10:08,620 --> 00:10:12,910
pointer not sure if I can here it is

222
00:10:11,230 --> 00:10:14,740
so the first part of the pipeline is

223
00:10:12,910 --> 00:10:17,100
data ingestion the way that the machine

224
00:10:14,740 --> 00:10:19,450
learning model is feeding on data

225
00:10:17,100 --> 00:10:21,160
usually when you think about machinery

226
00:10:19,450 --> 00:10:24,220
models might think you might have

227
00:10:21,160 --> 00:10:26,469
something like churns inputs like images

228
00:10:24,220 --> 00:10:28,330
I'm building a machine learning model to

229
00:10:26,470 --> 00:10:29,920
discern between images of cats and dogs

230
00:10:28,330 --> 00:10:32,170
so the inputs to that system would be

231
00:10:29,920 --> 00:10:34,120
images of cats and dogs sometimes it

232
00:10:32,170 --> 00:10:35,829
would be labeled images so I'll provide

233
00:10:34,120 --> 00:10:38,860
an image of a cat and I'll also provide

234
00:10:35,830 --> 00:10:41,050
the string this is a cat the machine

235
00:10:38,860 --> 00:10:42,850
learning model will take this input and

236
00:10:41,050 --> 00:10:44,890
will try to build an internal

237
00:10:42,850 --> 00:10:47,320
representation of that model that it

238
00:10:44,890 --> 00:10:50,170
will match against whatever it's off

239
00:10:47,320 --> 00:10:52,600
previously so if I give them 1,000

240
00:10:50,170 --> 00:10:54,760
images of cats different cats and 1000

241
00:10:52,600 --> 00:10:56,050
images of dogs it will try to build the

242
00:10:54,760 --> 00:10:58,209
model that would differentiate between

243
00:10:56,050 --> 00:11:00,579
cats and dogs so when I present a new

244
00:10:58,209 --> 00:11:02,229
image of either a cat or a dog it will

245
00:11:00,580 --> 00:11:04,450
know it belongs to this class or to that

246
00:11:02,230 --> 00:11:07,060
class basically that's what it's

247
00:11:04,450 --> 00:11:08,999
supposed to do however machine learning

248
00:11:07,060 --> 00:11:11,228
doesn't really understand

249
00:11:08,999 --> 00:11:13,869
definitely not as we humans look at

250
00:11:11,229 --> 00:11:17,109
images but it understands bytes it

251
00:11:13,869 --> 00:11:19,269
understands data structures so the

252
00:11:17,109 --> 00:11:22,959
second step here is to look at those

253
00:11:19,269 --> 00:11:24,429
inputs and to understand to decide what

254
00:11:22,959 --> 00:11:26,649
kind of features are you going to look

255
00:11:24,429 --> 00:11:28,478
into when you're looking at that input

256
00:11:26,649 --> 00:11:30,309
for example if you're looking at an

257
00:11:28,479 --> 00:11:31,989
image do you want to look at the ratio

258
00:11:30,309 --> 00:11:33,819
between pixels do you want to look at

259
00:11:31,989 --> 00:11:35,910
the color histogram do you want to look

260
00:11:33,819 --> 00:11:37,868
at the size do you want to look at the

261
00:11:35,910 --> 00:11:39,100
geometrical relationship between the

262
00:11:37,869 --> 00:11:40,509
objects in the image there are lots of

263
00:11:39,100 --> 00:11:42,249
different features that you can look at

264
00:11:40,509 --> 00:11:45,069
but one thing that you're definitely not

265
00:11:42,249 --> 00:11:47,229
doing is not look oh it has four legs

266
00:11:45,069 --> 00:11:48,759
and it has a long snout it's probably a

267
00:11:47,229 --> 00:11:50,109
horse that's not the way the machine

268
00:11:48,759 --> 00:11:52,689
learning does it's just a computer

269
00:11:50,109 --> 00:11:54,579
software so once you determine the

270
00:11:52,689 --> 00:11:56,228
features you run the machine learning

271
00:11:54,579 --> 00:11:58,329
process and you train it I'm not going

272
00:11:56,229 --> 00:12:00,429
to go into it but then you have a model

273
00:11:58,329 --> 00:12:02,319
and the model is an iterative process

274
00:12:00,429 --> 00:12:04,660
where you feel it more information and

275
00:12:02,319 --> 00:12:07,839
as it gets more information usually it

276
00:12:04,660 --> 00:12:09,249
improves usually and when it doesn't you

277
00:12:07,839 --> 00:12:11,470
have to go back to the drawing board and

278
00:12:09,249 --> 00:12:13,119
try again but in the end we have a

279
00:12:11,470 --> 00:12:15,759
machine learning model and then you get

280
00:12:13,119 --> 00:12:17,799
the predictions so you put an input on

281
00:12:15,759 --> 00:12:21,509
one end and you get a prediction I think

282
00:12:17,799 --> 00:12:26,079
this is a cat with a likelihood of 0.76

283
00:12:21,509 --> 00:12:28,629
basically that's what it does so let's

284
00:12:26,079 --> 00:12:31,289
start with what it isn't first of all

285
00:12:28,629 --> 00:12:33,549
this is not magic this is like basic

286
00:12:31,289 --> 00:12:36,069
algorithmic stuff that's known since the

287
00:12:33,549 --> 00:12:37,929
60s or the 70s there's nothing new in

288
00:12:36,069 --> 00:12:39,759
machine learning for the past 30 40

289
00:12:37,929 --> 00:12:42,339
years the only thing that is new is that

290
00:12:39,759 --> 00:12:46,029
now we have more CPUs now it's scalable

291
00:12:42,339 --> 00:12:48,039
it wasn't 30 40 years ago the second

292
00:12:46,029 --> 00:12:49,239
thing is that if you've ever studied in

293
00:12:48,039 --> 00:12:52,029
college something called linear

294
00:12:49,239 --> 00:12:54,789
regression you now understand 90% of

295
00:12:52,029 --> 00:12:56,679
what machine learning is the third is

296
00:12:54,789 --> 00:12:58,509
it's not really difficult it's not

297
00:12:56,679 --> 00:13:00,999
really complex it is if you're trying to

298
00:12:58,509 --> 00:13:03,009
develop new things new algorithms but if

299
00:13:00,999 --> 00:13:05,709
you're trying to use what already exists

300
00:13:03,009 --> 00:13:07,600
it's just like using a framework if the

301
00:13:05,709 --> 00:13:09,368
framework exists that's really easy to

302
00:13:07,600 --> 00:13:11,919
use but if you're trying to write your

303
00:13:09,369 --> 00:13:15,299
own framework you probably need to put a

304
00:13:11,919 --> 00:13:17,789
lot of thinking a lot of effort into it

305
00:13:15,299 --> 00:13:20,619
unfortunately it is one of the holy

306
00:13:17,789 --> 00:13:21,580
Vista buzz words just like cyber zero

307
00:13:20,619 --> 00:13:25,660
trusts and blocked

308
00:13:21,580 --> 00:13:28,089
so it does create a lot of unfortunate

309
00:13:25,660 --> 00:13:29,939
the uncomfortableness for people when

310
00:13:28,089 --> 00:13:32,140
they are talking about machine learning

311
00:13:29,940 --> 00:13:34,450
so this is a good rule of thumb for

312
00:13:32,140 --> 00:13:36,790
everyone to have if somebody is talking

313
00:13:34,450 --> 00:13:39,430
to you about machine learning and it has

314
00:13:36,790 --> 00:13:41,769
code that's really machine learning and

315
00:13:39,430 --> 00:13:42,399
when you have slides like me that's

316
00:13:41,769 --> 00:13:46,060


317
00:13:42,399 --> 00:13:49,209
sorry that's PowerPoint so I'll give you

318
00:13:46,060 --> 00:13:51,310
an example the title to this talk is

319
00:13:49,209 --> 00:13:54,010
using machines to exploit machines

320
00:13:51,310 --> 00:13:57,880
harnessing AI to accelerate exploitation

321
00:13:54,010 --> 00:14:00,250
so in PowerPoint sorry everybody says

322
00:13:57,880 --> 00:14:01,540
the AI there is no AI sorry to support

323
00:14:00,250 --> 00:14:03,730
to do the spoiler-free there is no

324
00:14:01,540 --> 00:14:05,760
artificial intelligence not yet probably

325
00:14:03,730 --> 00:14:09,040
not for the next 10 to 15 years at least

326
00:14:05,760 --> 00:14:11,589
there is machine learning and everybody

327
00:14:09,040 --> 00:14:15,370
mixes them up we mix them up as well and

328
00:14:11,589 --> 00:14:17,740
I will mix up during the talk however it

329
00:14:15,370 --> 00:14:19,600
is a tool and as a tool it's very useful

330
00:14:17,740 --> 00:14:21,459
for some things it's very useful for

331
00:14:19,600 --> 00:14:24,700
finding patterns when you have huge

332
00:14:21,459 --> 00:14:26,229
amounts of data you can educate the

333
00:14:24,700 --> 00:14:28,029
machine learning model and what patterns

334
00:14:26,230 --> 00:14:29,620
you are trying to look for much faster

335
00:14:28,029 --> 00:14:31,589
then you can actually write your own

336
00:14:29,620 --> 00:14:35,140
heuristics on all of it

337
00:14:31,589 --> 00:14:36,970
it's also much easier to build models to

338
00:14:35,140 --> 00:14:38,529
correlate between different inputs if

339
00:14:36,970 --> 00:14:40,450
you're looking at a lot of logs and you

340
00:14:38,529 --> 00:14:43,000
know that if someone is located at a

341
00:14:40,450 --> 00:14:44,320
specific country and it has a login at

342
00:14:43,000 --> 00:14:46,120
the same time from a different country

343
00:14:44,320 --> 00:14:48,490
that's two pieces of information that

344
00:14:46,120 --> 00:14:50,500
writing heuristics for is possible but

345
00:14:48,490 --> 00:14:53,350
it's painful and usually takes a lot of

346
00:14:50,500 --> 00:14:54,579
talent time however you can just throw

347
00:14:53,350 --> 00:14:56,440
everything at the machine learning model

348
00:14:54,579 --> 00:14:58,839
and it will understand by itself which

349
00:14:56,440 --> 00:14:59,620
pieces of data is correlated and not and

350
00:14:58,839 --> 00:15:01,930
which are not

351
00:14:59,620 --> 00:15:03,940
but the most amazing thing at least in

352
00:15:01,930 --> 00:15:06,729
my opinion is that you can abstract a

353
00:15:03,940 --> 00:15:08,529
problem away in such a way in such a

354
00:15:06,730 --> 00:15:10,630
sense that the machine learning model

355
00:15:08,529 --> 00:15:12,370
will just try to fit different variables

356
00:15:10,630 --> 00:15:14,980
together and spit out something that

357
00:15:12,370 --> 00:15:17,260
makes sense sometimes it does make sense

358
00:15:14,980 --> 00:15:19,329
and that means that for us we don't

359
00:15:17,260 --> 00:15:21,339
really need to build those heuristics we

360
00:15:19,329 --> 00:15:23,620
just need to build a build enough

361
00:15:21,339 --> 00:15:25,720
information to do the feature extraction

362
00:15:23,620 --> 00:15:27,370
correctly and the machine learning model

363
00:15:25,720 --> 00:15:29,699
will be able to actually do something

364
00:15:27,370 --> 00:15:29,699
with it

365
00:15:30,209 --> 00:15:33,540
predictions

366
00:15:31,649 --> 00:15:36,180
in the end the machinery model spits out

367
00:15:33,540 --> 00:15:38,099
some answers we're asking it a question

368
00:15:36,180 --> 00:15:41,040
is this a cat it will speak spit out an

369
00:15:38,100 --> 00:15:44,430
answer yes this is a cat with a 76%

370
00:15:41,040 --> 00:15:46,618
probability however and this is a very

371
00:15:44,430 --> 00:15:49,079
strong caveat that you have to remember

372
00:15:46,619 --> 00:15:51,329
it's basing its prediction on stuff that

373
00:15:49,079 --> 00:15:53,399
it's already seen what it was trained on

374
00:15:51,329 --> 00:15:55,469
it will not spit out answer something

375
00:15:53,399 --> 00:15:57,420
that he's never seen before so if you

376
00:15:55,470 --> 00:15:58,949
hear someone that has like this very

377
00:15:57,420 --> 00:16:03,779
good machine learning model that knows

378
00:15:58,949 --> 00:16:05,758
how to detect zero-days be cautious the

379
00:16:03,779 --> 00:16:07,800
other thing is it's trained on data that

380
00:16:05,759 --> 00:16:09,449
you supply just like in any other

381
00:16:07,800 --> 00:16:10,498
programming language like in any other

382
00:16:09,449 --> 00:16:13,889
piece of software that you've ever

383
00:16:10,499 --> 00:16:15,119
written garbage in garbage out same

384
00:16:13,889 --> 00:16:16,589
thing goes for machine learning models

385
00:16:15,119 --> 00:16:19,079
if you have bad data you're going to

386
00:16:16,589 --> 00:16:20,850
have a bad model which is a problem it's

387
00:16:19,079 --> 00:16:27,719
not very easy to detect if your data is

388
00:16:20,850 --> 00:16:29,189
bad or not so what do you get if you

389
00:16:27,720 --> 00:16:31,800
build a machine learning model you can

390
00:16:29,189 --> 00:16:33,599
train it to say ok I have this crash can

391
00:16:31,800 --> 00:16:35,089
you look at this crash analyze it and

392
00:16:33,600 --> 00:16:37,290
tell me is this a place where I should

393
00:16:35,089 --> 00:16:39,749
invest more time and effort and

394
00:16:37,290 --> 00:16:41,939
investigate it and if it says yes you

395
00:16:39,749 --> 00:16:45,149
should this is a highly likelihood that

396
00:16:41,939 --> 00:16:46,769
it's exploitable because of reasons then

397
00:16:45,149 --> 00:16:49,410
you should probably take a better look

398
00:16:46,769 --> 00:16:51,059
at it but the big benefit is that if it

399
00:16:49,410 --> 00:16:52,649
can look at those samples and say look

400
00:16:51,059 --> 00:16:55,050
this is nothing exploitable in it

401
00:16:52,649 --> 00:16:57,749
there's no need for you to look at it I

402
00:16:55,050 --> 00:16:59,969
can throw out a lot of those bad results

403
00:16:57,749 --> 00:17:03,990
and just focus on the ones that are much

404
00:16:59,970 --> 00:17:08,579
more probable to be beneficial and with

405
00:17:03,990 --> 00:17:10,349
that back to Ezra so one of the things

406
00:17:08,579 --> 00:17:13,709
that we wanted to understand is now we

407
00:17:10,349 --> 00:17:15,629
have these crashes that are basically

408
00:17:13,709 --> 00:17:18,449
corridors that happened whenever we have

409
00:17:15,630 --> 00:17:20,880
a problematic function in our in our

410
00:17:18,449 --> 00:17:25,709
code and on the code that were auditing

411
00:17:20,880 --> 00:17:28,319
and there are two things that before we

412
00:17:25,709 --> 00:17:32,580
get into details I want to to convey to

413
00:17:28,319 --> 00:17:35,820
you the message the first one is that in

414
00:17:32,580 --> 00:17:39,830
this case I'm only looking for one

415
00:17:35,820 --> 00:17:42,360
exploitable crush I don't care if I miss

416
00:17:39,830 --> 00:17:44,189
ten of them I'm looking for one of them

417
00:17:42,360 --> 00:17:45,809
that it's being able to be exploitable

418
00:17:44,190 --> 00:17:47,639
without safe thing

419
00:17:45,809 --> 00:17:51,690
manually through all of them and to be

420
00:17:47,639 --> 00:17:55,649
able to do that I need to understand how

421
00:17:51,690 --> 00:17:57,690
do I work how whenever I look at the

422
00:17:55,649 --> 00:18:00,539
crash after our long running a a fall

423
00:17:57,690 --> 00:18:03,509
session I tried to identify which

424
00:18:00,539 --> 00:18:06,749
crushes are exploitable so to be able to

425
00:18:03,509 --> 00:18:10,710
do that I model what's a common morning

426
00:18:06,749 --> 00:18:12,450
in my life so actually the morning

427
00:18:10,710 --> 00:18:14,730
doesn't start at the morning starts the

428
00:18:12,450 --> 00:18:17,669
night before when I left the process

429
00:18:14,730 --> 00:18:19,649
running for the my favorite father and I

430
00:18:17,669 --> 00:18:22,649
go home and I have a really good sleep

431
00:18:19,649 --> 00:18:26,479
and the next morning I wake up extremely

432
00:18:22,649 --> 00:18:29,869
early around 11 o'clock in the morning

433
00:18:26,480 --> 00:18:34,580
to drink my first coffee of the day

434
00:18:29,869 --> 00:18:39,749
because we have coffee no life and

435
00:18:34,580 --> 00:18:42,600
basically I I plug this crush down that

436
00:18:39,749 --> 00:18:46,049
is generated the crusher you open my gdb

437
00:18:42,600 --> 00:18:51,658
I take a look at this particular crash

438
00:18:46,049 --> 00:18:55,168
and I start to analyze a lot of a lot of

439
00:18:51,659 --> 00:18:56,940
a lot of stuff that it's in there I take

440
00:18:55,169 --> 00:18:58,499
a look at the registers I take a look at

441
00:18:56,940 --> 00:19:02,100
the batteries and take a look at the

442
00:18:58,499 --> 00:19:04,649
memory locations and I need to do it to

443
00:19:02,100 --> 00:19:08,129
be able to to identify what works what

444
00:19:04,649 --> 00:19:10,678
doesn't work and one of the most

445
00:19:08,129 --> 00:19:16,009
important things is that this is a

446
00:19:10,679 --> 00:19:19,379
process that a lot of experience its

447
00:19:16,009 --> 00:19:22,950
behind it I do it based on what I know

448
00:19:19,379 --> 00:19:25,918
and if we remember like guy was

449
00:19:22,950 --> 00:19:30,809
explaining before machine learning is

450
00:19:25,919 --> 00:19:34,440
good at solving problems it has seen in

451
00:19:30,809 --> 00:19:38,730
the past so I confirmed this same

452
00:19:34,440 --> 00:19:42,570
sinners to the computer of how I take a

453
00:19:38,730 --> 00:19:46,320
look at the problem it's possible that

454
00:19:42,570 --> 00:19:49,289
it will be able to outperform me so if I

455
00:19:46,320 --> 00:19:54,240
were to map this process to to a mesh to

456
00:19:49,289 --> 00:19:56,009
a computer way machine way oh and sorry

457
00:19:54,240 --> 00:19:59,100
before that I forgot the most important

458
00:19:56,009 --> 00:20:01,710
part honestly the font

459
00:19:59,100 --> 00:20:03,750
to fall this is to start developing the

460
00:20:01,710 --> 00:20:05,789
proof-of-concept I mean going through

461
00:20:03,750 --> 00:20:07,620
the crushes it's it's it's it's a hard

462
00:20:05,789 --> 00:20:10,200
process it takes a lot of time and we

463
00:20:07,620 --> 00:20:12,090
want to go to the to the proof of

464
00:20:10,200 --> 00:20:17,370
concept development as fast as possible

465
00:20:12,090 --> 00:20:21,149
so with machinery if I was able to do it

466
00:20:17,370 --> 00:20:24,030
with ai ai overlords do not need slaves

467
00:20:21,150 --> 00:20:26,039
so everything is faster are they also

468
00:20:24,030 --> 00:20:27,809
don't need coffee which is probably the

469
00:20:26,039 --> 00:20:32,220
reason why we will have a machine group

470
00:20:27,809 --> 00:20:34,649
racing eventually if we arrive to AI the

471
00:20:32,220 --> 00:20:37,710
pre-processing phase prepares the data

472
00:20:34,650 --> 00:20:39,780
for the machine learning analysis so if

473
00:20:37,710 --> 00:20:41,220
previously I was opening opening every

474
00:20:39,780 --> 00:20:43,408
crash and I was extracting all the

475
00:20:41,220 --> 00:20:45,030
features like the registers for the new

476
00:20:43,409 --> 00:20:46,890
location so the back-trace now the

477
00:20:45,030 --> 00:20:48,990
computer can do it automatically and

478
00:20:46,890 --> 00:20:53,400
generate now this information that it

479
00:20:48,990 --> 00:20:57,390
will be automatically triggered into the

480
00:20:53,400 --> 00:20:59,840
machine learning process and then it's

481
00:20:57,390 --> 00:21:03,059
being automagically really analyzed

482
00:20:59,840 --> 00:21:04,980
based on the same experience like I had

483
00:21:03,059 --> 00:21:08,010
my experience I train now the machine

484
00:21:04,980 --> 00:21:11,190
learning to have similar experience to

485
00:21:08,010 --> 00:21:13,770
the experience that I have so if we were

486
00:21:11,190 --> 00:21:16,830
to use the phrase that that guy defined

487
00:21:13,770 --> 00:21:21,389
in the previous slide is how similar it

488
00:21:16,830 --> 00:21:25,139
is to what it has seen in the past and

489
00:21:21,390 --> 00:21:28,320
it meets its predictions based on the

490
00:21:25,140 --> 00:21:30,419
human intuition or in this case that a

491
00:21:28,320 --> 00:21:34,950
the heuristics and it will tell me yeah

492
00:21:30,419 --> 00:21:37,049
this just crash it's it's certain

493
00:21:34,950 --> 00:21:40,919
probability to be exploitable because

494
00:21:37,049 --> 00:21:43,049
it's similar to where I know and at this

495
00:21:40,919 --> 00:21:45,539
moment the computer just can leave us

496
00:21:43,049 --> 00:21:48,408
the fun word to start developing the

497
00:21:45,539 --> 00:21:48,408
proof of concept

498
00:21:51,090 --> 00:21:55,889
I mentioned earlier that getting good

499
00:21:53,250 --> 00:21:57,870
data is a big problem so I want to

500
00:21:55,890 --> 00:22:00,270
describe where we looked for and where

501
00:21:57,870 --> 00:22:02,699
we found our data but before going into

502
00:22:00,270 --> 00:22:05,220
that I want to clarify something and

503
00:22:02,700 --> 00:22:07,440
make a remark when we were talking about

504
00:22:05,220 --> 00:22:10,410
finding crashes what we mean by that is

505
00:22:07,440 --> 00:22:12,390
that we're trying to run some program

506
00:22:10,410 --> 00:22:14,100
imagine some program running on some

507
00:22:12,390 --> 00:22:16,410
library that we're calling the function

508
00:22:14,100 --> 00:22:19,139
from and we're iterating on different

509
00:22:16,410 --> 00:22:20,570
inputs so further you have a command

510
00:22:19,140 --> 00:22:24,180
line operation called

511
00:22:20,570 --> 00:22:27,720
command dot X Z and you try and slash a

512
00:22:24,180 --> 00:22:29,970
equals with a BBB slash a equals CCC

513
00:22:27,720 --> 00:22:32,400
slash a equals ddd whatever you're

514
00:22:29,970 --> 00:22:34,440
running on different inputs if one of

515
00:22:32,400 --> 00:22:37,170
those inputs causes the program to crash

516
00:22:34,440 --> 00:22:39,240
we want to capture the information the

517
00:22:37,170 --> 00:22:41,790
crash information from that crash so we

518
00:22:39,240 --> 00:22:43,620
could analyze it when we're talking

519
00:22:41,790 --> 00:22:45,120
about data that's the data that we're

520
00:22:43,620 --> 00:22:47,879
talking about we want to know which

521
00:22:45,120 --> 00:22:49,379
input caused the program to crash and

522
00:22:47,880 --> 00:22:50,820
you want to know what was the state of

523
00:22:49,380 --> 00:22:54,600
the program at the moment that it

524
00:22:50,820 --> 00:22:56,970
crashed so we need good source of

525
00:22:54,600 --> 00:22:59,429
information that has these properties

526
00:22:56,970 --> 00:23:01,040
and perfectly that's pretty hard

527
00:22:59,430 --> 00:23:03,750
nobody's really keeping track of

528
00:23:01,040 --> 00:23:06,750
whenever your program crashed it was

529
00:23:03,750 --> 00:23:08,220
because it was of an exploitable bug we

530
00:23:06,750 --> 00:23:10,230
have a lot of crashes there a lot of

531
00:23:08,220 --> 00:23:12,720
repositories of crashes but nobody

532
00:23:10,230 --> 00:23:15,960
really set through it to say this was

533
00:23:12,720 --> 00:23:17,580
because of an exploitable bug but this

534
00:23:15,960 --> 00:23:20,250
was not because of an exploitable bug

535
00:23:17,580 --> 00:23:22,379
this was just a regular bug so getting

536
00:23:20,250 --> 00:23:24,000
that kind of information is pretty hard

537
00:23:22,380 --> 00:23:26,340
and that kind of stopped our research

538
00:23:24,000 --> 00:23:29,880
for quite a while until we stumbled upon

539
00:23:26,340 --> 00:23:32,070
the DARPA cyber Grand Challenge so this

540
00:23:29,880 --> 00:23:33,210
was from a couple of years ago but what

541
00:23:32,070 --> 00:23:35,550
they've done in the cyber grant

542
00:23:33,210 --> 00:23:36,930
challenge is that they've annotated that

543
00:23:35,550 --> 00:23:39,000
data and they give it away to

544
00:23:36,930 --> 00:23:40,560
researchers during a competition for

545
00:23:39,000 --> 00:23:43,380
them to create a machine learning model

546
00:23:40,560 --> 00:23:46,679
and can do some stuff with that data so

547
00:23:43,380 --> 00:23:49,230
what we have here is 632 different cases

548
00:23:46,680 --> 00:23:51,000
different programs that we know have

549
00:23:49,230 --> 00:23:52,860
exploitable crashes how do we know

550
00:23:51,000 --> 00:23:55,590
because the data comes with a wiki and

551
00:23:52,860 --> 00:23:57,629
on the wiki it says when you run this

552
00:23:55,590 --> 00:24:00,209
program with that input you will get a

553
00:23:57,630 --> 00:24:02,580
buffer overflow so we know each and

554
00:24:00,210 --> 00:24:04,700
every one of these 632 different crashes

555
00:24:02,580 --> 00:24:07,840
is exploitable

556
00:24:04,700 --> 00:24:10,549
but when we ran them through the program

557
00:24:07,840 --> 00:24:11,359
exploitable underscore here when we ran

558
00:24:10,549 --> 00:24:14,779
them through the program

559
00:24:11,359 --> 00:24:17,059
it only correctly identified 607 of them

560
00:24:14,779 --> 00:24:19,940
as exploitable and give 12 of them

561
00:24:17,059 --> 00:24:22,460
probably exploitable and 13 of them I

562
00:24:19,940 --> 00:24:24,710
have no idea what it is and that means

563
00:24:22,460 --> 00:24:27,169
that our tool are exploitable tool not

564
00:24:24,710 --> 00:24:28,820
we didn't write it we just used it when

565
00:24:27,169 --> 00:24:31,340
we use that tool we left a lot of

566
00:24:28,820 --> 00:24:34,129
exploitable crashes summer lying on the

567
00:24:31,340 --> 00:24:35,570
floor we couldn't identify them so if

568
00:24:34,129 --> 00:24:37,699
you trained our machine learning model

569
00:24:35,570 --> 00:24:38,749
to actually be better than this then we

570
00:24:37,700 --> 00:24:40,700
would be better than the

571
00:24:38,749 --> 00:24:47,389
state-of-the-art tooling that we now use

572
00:24:40,700 --> 00:24:49,820
in order to identify crashes so what

573
00:24:47,389 --> 00:24:52,850
kind of information does a crash give us

574
00:24:49,820 --> 00:24:55,850
as I mentioned it gives us registers so

575
00:24:52,850 --> 00:24:57,379
we know the eix value we know the stack

576
00:24:55,850 --> 00:24:59,629
pointers we know the destination index

577
00:24:57,379 --> 00:25:01,340
etc we know the instruction pointer

578
00:24:59,629 --> 00:25:03,350
where which was pointing at we have a

579
00:25:01,340 --> 00:25:05,149
lot of the data that comes from the CPU

580
00:25:03,350 --> 00:25:07,158
and the state of the CPU at the moment

581
00:25:05,149 --> 00:25:08,869
of the crash we also have other pieces

582
00:25:07,159 --> 00:25:11,059
of information like what was the input

583
00:25:08,869 --> 00:25:13,009
the timing stuff like that but we chose

584
00:25:11,059 --> 00:25:15,220
to focus on those registers because we

585
00:25:13,009 --> 00:25:17,600
thought well maybe there would be enough

586
00:25:15,220 --> 00:25:20,720
maybe there would be enough to correctly

587
00:25:17,600 --> 00:25:22,998
identify program as a bug or more

588
00:25:20,720 --> 00:25:27,109
correctly they could better identify a

589
00:25:22,999 --> 00:25:29,509
bug if it's exploitable or not so what

590
00:25:27,109 --> 00:25:30,949
was our process we build the harness and

591
00:25:29,509 --> 00:25:33,470
ran all of those different programs

592
00:25:30,950 --> 00:25:36,169
through our harness and created those

593
00:25:33,470 --> 00:25:38,359
crashes with different inputs and we

594
00:25:36,169 --> 00:25:40,730
collected that they did that data the

595
00:25:38,359 --> 00:25:42,499
crash analysis and then we fed that data

596
00:25:40,730 --> 00:25:44,960
into two different Forks two different

597
00:25:42,499 --> 00:25:46,429
ways the first one was running it for

598
00:25:44,960 --> 00:25:48,859
exploitable and recorded whatever

599
00:25:46,429 --> 00:25:50,629
exploitable decided that the result from

600
00:25:48,859 --> 00:25:52,129
that analysis was and the other was

601
00:25:50,629 --> 00:25:56,178
through our model and compared the

602
00:25:52,129 --> 00:25:59,418
results but we had we encountered the

603
00:25:56,179 --> 00:26:01,730
problem right out of the start looking

604
00:25:59,419 --> 00:26:03,259
at registers is very very interesting

605
00:26:01,730 --> 00:26:05,090
but the data that those registers

606
00:26:03,259 --> 00:26:08,029
contain is not exactly the same

607
00:26:05,090 --> 00:26:09,889
think about the EAX register it at one

608
00:26:08,029 --> 00:26:12,619
point in time hold the value like three

609
00:26:09,889 --> 00:26:14,508
or four or five but it also can find an

610
00:26:12,619 --> 00:26:17,330
address somewhere in kernel space which

611
00:26:14,509 --> 00:26:18,550
we hex value FF something found

612
00:26:17,330 --> 00:26:20,379
something

613
00:26:18,550 --> 00:26:24,970
so if you look at this graph this graph

614
00:26:20,380 --> 00:26:26,950
shows you the the sparsity of the of the

615
00:26:24,970 --> 00:26:29,290
data space for that for those registers

616
00:26:26,950 --> 00:26:31,570
so this is specific for specifically for

617
00:26:29,290 --> 00:26:34,240
the ECX register and you can see that

618
00:26:31,570 --> 00:26:36,520
there's a lot of low values and there's

619
00:26:34,240 --> 00:26:38,740
a lot of high values but there are

620
00:26:36,520 --> 00:26:41,290
really very few values in between them

621
00:26:38,740 --> 00:26:44,860
and high value here is that similar

622
00:26:41,290 --> 00:26:47,980
about the 40 trillion 40 billion sorry

623
00:26:44,860 --> 00:26:49,719
so that means that all of those high

624
00:26:47,980 --> 00:26:52,300
values that we're seeing are probably

625
00:26:49,720 --> 00:26:54,250
addresses and all other low values that

626
00:26:52,300 --> 00:26:56,260
we're seeing are probably let's say

627
00:26:54,250 --> 00:26:58,060
working numbers during computations and

628
00:26:56,260 --> 00:26:59,440
it's not the same thing it's not the

629
00:26:58,060 --> 00:27:01,179
same thing from when you are trying to

630
00:26:59,440 --> 00:27:03,970
analyze what the program is doing if

631
00:27:01,180 --> 00:27:06,010
it's the X holding an address or is it

632
00:27:03,970 --> 00:27:10,180
holding a value so we had to separate

633
00:27:06,010 --> 00:27:14,500
these two cases so what we're trying to

634
00:27:10,180 --> 00:27:16,330
do is to build a way or or teach the

635
00:27:14,500 --> 00:27:18,940
model a way to discern between both

636
00:27:16,330 --> 00:27:21,220
between the two cases ever quite

637
00:27:18,940 --> 00:27:23,920
unsuccessful at first it didn't work we

638
00:27:21,220 --> 00:27:25,870
didn't get good results and then we

639
00:27:23,920 --> 00:27:27,550
thought about this we called we this is

640
00:27:25,870 --> 00:27:29,860
something called binning instead of

641
00:27:27,550 --> 00:27:32,350
looking at values as a discrete value

642
00:27:29,860 --> 00:27:35,979
which has like a range we can look at

643
00:27:32,350 --> 00:27:38,370
the different baskets and see what how

644
00:27:35,980 --> 00:27:40,930
many values fit into each bucket and

645
00:27:38,370 --> 00:27:43,899
what we did we took the entire range and

646
00:27:40,930 --> 00:27:45,820
divided it pretty uniformly to ten

647
00:27:43,900 --> 00:27:47,650
different buckets so the first bucket

648
00:27:45,820 --> 00:27:49,960
and the last bucket had lots of values

649
00:27:47,650 --> 00:27:51,790
but they are let's say the buckets on

650
00:27:49,960 --> 00:27:53,320
the edges had more values but the

651
00:27:51,790 --> 00:27:54,670
buckets in the middle had very few

652
00:27:53,320 --> 00:27:57,040
values because that's the way that the

653
00:27:54,670 --> 00:27:59,560
data behaved and once we've done that

654
00:27:57,040 --> 00:28:01,360
the machine learning model found it much

655
00:27:59,560 --> 00:28:03,100
easier to understand what the data is

656
00:28:01,360 --> 00:28:04,870
because if it's a low value or high

657
00:28:03,100 --> 00:28:07,959
value makes it much easier to understand

658
00:28:04,870 --> 00:28:10,090
if it's exploitable or not so the first

659
00:28:07,960 --> 00:28:12,280
thing we've done we tried a machine

660
00:28:10,090 --> 00:28:14,439
learning model or machine learning

661
00:28:12,280 --> 00:28:16,690
algorithm called one class support

662
00:28:14,440 --> 00:28:19,000
vector machine I'm not expecting anyone

663
00:28:16,690 --> 00:28:20,380
to actually recognize this but I will

664
00:28:19,000 --> 00:28:22,540
give you a brief introduction what it

665
00:28:20,380 --> 00:28:24,580
means so imagine that we have two

666
00:28:22,540 --> 00:28:27,040
classes of information we have black

667
00:28:24,580 --> 00:28:28,750
dots and we have white dots our purpose

668
00:28:27,040 --> 00:28:31,120
is to find a way to separate between

669
00:28:28,750 --> 00:28:32,440
these two classes of information so we

670
00:28:31,120 --> 00:28:34,360
can start with a green line

671
00:28:32,440 --> 00:28:36,520
which we can all see is a pretty bad fit

672
00:28:34,360 --> 00:28:38,770
because it doesn't really separate well

673
00:28:36,520 --> 00:28:40,750
the two classes so we can progress to

674
00:28:38,770 --> 00:28:42,730
the blue line which does separate the

675
00:28:40,750 --> 00:28:44,440
classes pretty well there's all of the Y

676
00:28:42,730 --> 00:28:46,240
dots on one side and all of the black

677
00:28:44,440 --> 00:28:47,830
dots on another but it's not very

678
00:28:46,240 --> 00:28:50,350
optimal because the distance between

679
00:28:47,830 --> 00:28:52,570
each dot and all of the other dots is

680
00:28:50,350 --> 00:28:54,520
not the same it's not optimal so if you

681
00:28:52,570 --> 00:28:58,050
look at the red line the red line would

682
00:28:54,520 --> 00:29:00,520
say okay the this is the minimal

683
00:28:58,050 --> 00:29:03,159
distance that each cluster has from each

684
00:29:00,520 --> 00:29:04,960
other and that helps us to build a much

685
00:29:03,160 --> 00:29:06,790
better rule of thumb when trying to

686
00:29:04,960 --> 00:29:09,490
separate the data so this was like a

687
00:29:06,790 --> 00:29:12,430
very hand wavy explanation of what SVM

688
00:29:09,490 --> 00:29:14,650
is but the modern line is that we took

689
00:29:12,430 --> 00:29:19,060
this model to the data that we had and

690
00:29:14,650 --> 00:29:22,510
tried to train our model using this

691
00:29:19,060 --> 00:29:27,010
algorithm to get better classification

692
00:29:22,510 --> 00:29:29,740
results and what we found was that out

693
00:29:27,010 --> 00:29:33,129
of those 25 records that the exploited

694
00:29:29,740 --> 00:29:36,220
ball was not correctly identifying we

695
00:29:33,130 --> 00:29:39,580
could a categorized 23 records out of

696
00:29:36,220 --> 00:29:41,770
them as exploitable and two of them as

697
00:29:39,580 --> 00:29:44,949
probably exploitable and we didn't I

698
00:29:41,770 --> 00:29:47,650
didn't leave any crash lying on the

699
00:29:44,950 --> 00:29:51,150
floor unidentified so we were already

700
00:29:47,650 --> 00:29:53,860
performing much better than exploitable

701
00:29:51,150 --> 00:29:55,810
but we didn't stop there we tried

702
00:29:53,860 --> 00:29:57,340
another algorithm because we weren't

703
00:29:55,810 --> 00:29:59,080
sure that this algorithm was really

704
00:29:57,340 --> 00:30:01,870
robust enough really strong enough for

705
00:29:59,080 --> 00:30:04,270
our purposes so we took something called

706
00:30:01,870 --> 00:30:06,389
cosine similarity what cosine similarity

707
00:30:04,270 --> 00:30:10,150
means is that we are looking at this

708
00:30:06,390 --> 00:30:11,830
huge multi dimensional space which for

709
00:30:10,150 --> 00:30:13,690
this example would be a two dimensional

710
00:30:11,830 --> 00:30:15,760
space and say we have two things we have

711
00:30:13,690 --> 00:30:17,470
a burger and a sandwich these are two

712
00:30:15,760 --> 00:30:22,330
points on the axes and we are

713
00:30:17,470 --> 00:30:24,670
calculating the the cosine angle the

714
00:30:22,330 --> 00:30:27,129
cosine of the angle between them that's

715
00:30:24,670 --> 00:30:28,720
a bit of math sorry but basically what

716
00:30:27,130 --> 00:30:30,430
this means I'm trying to calculate a

717
00:30:28,720 --> 00:30:32,830
metric that says what what is the

718
00:30:30,430 --> 00:30:35,260
distance between the burger and the

719
00:30:32,830 --> 00:30:36,760
sandwich points in my data plane the

720
00:30:35,260 --> 00:30:38,770
same thing goes when I'm looking at all

721
00:30:36,760 --> 00:30:40,330
of the different registers if I can look

722
00:30:38,770 --> 00:30:42,340
at all of the registers that belong to

723
00:30:40,330 --> 00:30:43,689
the exportable class and say okay this

724
00:30:42,340 --> 00:30:45,970
new class which I don't know what it is

725
00:30:43,690 --> 00:30:46,360
what's the distance between it and all

726
00:30:45,970 --> 00:30:48,040
of the diff

727
00:30:46,360 --> 00:30:50,199
on all of the previous points that I

728
00:30:48,040 --> 00:30:51,670
already know if it's close to them it's

729
00:30:50,200 --> 00:30:53,710
inside the same cluster it means its

730
00:30:51,670 --> 00:30:55,720
exploitable if it's far away from them

731
00:30:53,710 --> 00:30:58,390
then it's not exported it belongs to a

732
00:30:55,720 --> 00:31:01,750
different cluster or it's an outlier so

733
00:30:58,390 --> 00:31:05,740
we took this algorithm to our to our

734
00:31:01,750 --> 00:31:07,690
data and we got interesting results when

735
00:31:05,740 --> 00:31:10,540
we did the basic thing which I just a

736
00:31:07,690 --> 00:31:12,220
claim which is a linear cosine

737
00:31:10,540 --> 00:31:14,560
similarity meaning just like the

738
00:31:12,220 --> 00:31:17,110
algorithm which I just explained we were

739
00:31:14,560 --> 00:31:19,659
correctly identifying sixteen results

740
00:31:17,110 --> 00:31:22,330
that exploitable was not able to

741
00:31:19,660 --> 00:31:24,610
identify however when we use something

742
00:31:22,330 --> 00:31:26,409
called centroid similarity which means

743
00:31:24,610 --> 00:31:28,629
we didn't look at it as a plane but more

744
00:31:26,410 --> 00:31:30,730
like a sphere when we did that kind of

745
00:31:28,630 --> 00:31:33,550
calculations we did much better we did

746
00:31:30,730 --> 00:31:36,160
we identified quirky identified twenty

747
00:31:33,550 --> 00:31:38,860
two more cases twenty two more crashes

748
00:31:36,160 --> 00:31:41,230
that the best state-of-the-art heuristic

749
00:31:38,860 --> 00:31:43,709
was not able to identify which is pretty

750
00:31:41,230 --> 00:31:46,270
nifty and

751
00:31:43,710 --> 00:31:48,580
the last experiment that we ran is

752
00:31:46,270 --> 00:31:50,590
called XG boost extra boost is an

753
00:31:48,580 --> 00:31:53,020
algorithm that tries to build out a tree

754
00:31:50,590 --> 00:31:54,730
that says okay this parameter this

755
00:31:53,020 --> 00:31:56,980
variable that you're looking at is more

756
00:31:54,730 --> 00:31:59,350
important it has more impact to the

757
00:31:56,980 --> 00:32:01,420
prediction than any other variable here

758
00:31:59,350 --> 00:32:04,060
so you start with the first variable and

759
00:32:01,420 --> 00:32:05,470
second variable etc and then it gives

760
00:32:04,060 --> 00:32:07,659
you a structure that you can say okay

761
00:32:05,470 --> 00:32:10,120
this is my data and apparently it's the

762
00:32:07,660 --> 00:32:11,980
X is much more important than EBX for

763
00:32:10,120 --> 00:32:14,320
some reason I have no idea why but that

764
00:32:11,980 --> 00:32:16,590
thing I can analyze and understand what

765
00:32:14,320 --> 00:32:19,480
am I seeing when I'm analyzing the data

766
00:32:16,590 --> 00:32:20,949
so we trained our model in the way the

767
00:32:19,480 --> 00:32:23,410
usual way that you train models that

768
00:32:20,950 --> 00:32:26,680
took 80% of the data we did the churn

769
00:32:23,410 --> 00:32:29,740
with DD analysis the validation etc and

770
00:32:26,680 --> 00:32:31,960
we got fantastic results the worst case

771
00:32:29,740 --> 00:32:34,660
that we got was 95% accuracy and the

772
00:32:31,960 --> 00:32:37,330
best case was 99% accuracy and that

773
00:32:34,660 --> 00:32:38,740
sounds very good very happy but actually

774
00:32:37,330 --> 00:32:43,810
that's crap

775
00:32:38,740 --> 00:32:47,320
let me explain why assume that we had a

776
00:32:43,810 --> 00:32:49,210
system that would take input and just

777
00:32:47,320 --> 00:32:56,520
return the same result again and again

778
00:32:49,210 --> 00:32:59,700
and again my data had 90s I was a 96%

779
00:32:56,520 --> 00:33:01,500
exploitable infirmities of in

780
00:32:59,700 --> 00:33:04,320
nation in it if I had a function that

781
00:33:01,500 --> 00:33:07,409
only returns exploitable for every time

782
00:33:04,320 --> 00:33:09,418
that it's called it will be correct 96%

783
00:33:07,409 --> 00:33:11,279
of the times that I call it it will be

784
00:33:09,419 --> 00:33:13,950
wrong on 4% but that's a pretty good

785
00:33:11,279 --> 00:33:16,500
function there and I don't really need

786
00:33:13,950 --> 00:33:18,330
machine learning in order to do all of

787
00:33:16,500 --> 00:33:20,070
that I can just like everything is

788
00:33:18,330 --> 00:33:22,949
exploitable in my world now

789
00:33:20,070 --> 00:33:24,840
so that was not a very good result so

790
00:33:22,950 --> 00:33:26,610
this algorithm really showed us that we

791
00:33:24,840 --> 00:33:28,740
had a problem and the data that we were

792
00:33:26,610 --> 00:33:30,750
looking at that data was corrupt

793
00:33:28,740 --> 00:33:33,029
well corrupt maybe is not the right word

794
00:33:30,750 --> 00:33:34,559
but the data was biased we didn't have

795
00:33:33,029 --> 00:33:37,950
enough information our information was

796
00:33:34,559 --> 00:33:39,750
not diverse enough but he did give us

797
00:33:37,950 --> 00:33:41,519
something that we could use when we

798
00:33:39,750 --> 00:33:44,399
looked at the tree we could get some

799
00:33:41,519 --> 00:33:47,130
information out of it for example find

800
00:33:44,399 --> 00:33:50,158
the pointer again you can see that if a

801
00:33:47,130 --> 00:33:53,039
BP is in the first bin and a size in the

802
00:33:50,159 --> 00:33:55,440
first bin and e-cig ECX is also in the

803
00:33:53,039 --> 00:33:58,460
first bin there are 16 records that

804
00:33:55,440 --> 00:34:00,720
match this 7 of them works voidable

805
00:33:58,460 --> 00:34:03,929
again you can follow the tree and you'll

806
00:34:00,720 --> 00:34:05,220
get like 26 voidable etc however if

807
00:34:03,929 --> 00:34:07,200
you're saying ok

808
00:34:05,220 --> 00:34:08,879
EB P is not in the first bin it's

809
00:34:07,200 --> 00:34:11,399
anywhere else but not in the first bin

810
00:34:08,879 --> 00:34:13,770
and ESP is not in the FIR in the second

811
00:34:11,399 --> 00:34:16,949
bin you would be correct 90% of the

812
00:34:13,770 --> 00:34:18,810
times which I find absolutely crazy that

813
00:34:16,949 --> 00:34:21,388
means we have a rule of thumb to analyze

814
00:34:18,810 --> 00:34:24,690
any software that says if you have a

815
00:34:21,389 --> 00:34:27,629
crash and your register value in EBP was

816
00:34:24,690 --> 00:34:30,210
not in bin 1 and if edge astir value in

817
00:34:27,629 --> 00:34:33,060
ESP was not in being 2 which means they

818
00:34:30,210 --> 00:34:36,810
did not have a very low value then you

819
00:34:33,060 --> 00:34:38,819
have an exploitable crash well to borrow

820
00:34:36,810 --> 00:34:42,119
a word from our friends across the pond

821
00:34:38,819 --> 00:34:45,300
this is bollocks this does not make any

822
00:34:42,119 --> 00:34:47,970
sense whatsoever it does fit the data it

823
00:34:45,300 --> 00:34:50,099
does fit the data in the sense that we

824
00:34:47,969 --> 00:34:52,138
fed information to our machine learning

825
00:34:50,099 --> 00:34:54,899
model the machine learning model gave us

826
00:34:52,139 --> 00:34:57,390
answers back it's not lying it just says

827
00:34:54,899 --> 00:34:59,848
that this is not a real-world production

828
00:34:57,390 --> 00:35:03,569
ready tool because it will be wrong

829
00:34:59,849 --> 00:35:06,180
quite often and it's an open question

830
00:35:03,569 --> 00:35:08,630
would this still be true if you fed it

831
00:35:06,180 --> 00:35:12,810
more data I actually I don't know

832
00:35:08,630 --> 00:35:15,339
so to summarize that piece

833
00:35:12,810 --> 00:35:17,799
comparing our machine learning model

834
00:35:15,339 --> 00:35:19,420
versus the tool called exploitable the

835
00:35:17,800 --> 00:35:22,150
state-of-the-art heuristic based model

836
00:35:19,420 --> 00:35:24,670
we show that on the same data we can do

837
00:35:22,150 --> 00:35:27,819
much better than exportable which gives

838
00:35:24,670 --> 00:35:29,560
us a strong sense strong smell that

839
00:35:27,819 --> 00:35:32,380
there is a way for machine learning to

840
00:35:29,560 --> 00:35:35,920
outperform the way that heuristics are

841
00:35:32,380 --> 00:35:37,480
doing today on the other hand we don't

842
00:35:35,920 --> 00:35:39,280
have enough data we don't have enough

843
00:35:37,480 --> 00:35:41,349
data to say this is a good machine

844
00:35:39,280 --> 00:35:44,410
learning model go ahead take it and use

845
00:35:41,349 --> 00:35:47,770
it otherwise we would have released it 6

846
00:35:44,410 --> 00:35:51,549
months ago what we're trying to share

847
00:35:47,770 --> 00:35:54,460
here with you is that it's possible to

848
00:35:51,550 --> 00:35:57,390
use these kinds of tools in our world in

849
00:35:54,460 --> 00:36:00,160
our offensive research world in order to

850
00:35:57,390 --> 00:36:02,618
make our lives easier to get more

851
00:36:00,160 --> 00:36:06,790
information to better understand the

852
00:36:02,619 --> 00:36:09,550
behavior that we're trying to learn so

853
00:36:06,790 --> 00:36:12,160
if you're interested in diving deeper

854
00:36:09,550 --> 00:36:14,290
into this world we really recommend to

855
00:36:12,160 --> 00:36:15,700
read the white paper the URL is here you

856
00:36:14,290 --> 00:36:17,650
can take a photo if you want if not

857
00:36:15,700 --> 00:36:20,919
it'll probably be released in the

858
00:36:17,650 --> 00:36:22,359
conference later and also check out our

859
00:36:20,920 --> 00:36:24,339
videos on our previous work where we

860
00:36:22,359 --> 00:36:27,900
also explain how you would attack this

861
00:36:24,339 --> 00:36:29,920
how would you go ahead and and exploit

862
00:36:27,900 --> 00:36:31,780
machine learning models running in

863
00:36:29,920 --> 00:36:34,569
production how would you break them how

864
00:36:31,780 --> 00:36:36,280
would you subvert them but in the end

865
00:36:34,569 --> 00:36:38,529
this is a call out to everyone else and

866
00:36:36,280 --> 00:36:40,690
saying you can take this research you

867
00:36:38,530 --> 00:36:42,460
can duplicate it but you can extend it

868
00:36:40,690 --> 00:36:44,770
you can take it into your old world and

869
00:36:42,460 --> 00:36:46,690
try to build upon it and we encourage

870
00:36:44,770 --> 00:36:48,150
you to do it and we would be glad to

871
00:36:46,690 --> 00:36:52,150
help

872
00:36:48,150 --> 00:36:54,040
so in conclusion machine learning the

873
00:36:52,150 --> 00:36:56,230
bottom line is it will only answer this

874
00:36:54,040 --> 00:36:58,119
question how similar is the thing that

875
00:36:56,230 --> 00:37:00,069
I'm looking at right now to everything

876
00:36:58,119 --> 00:37:01,839
that I've seen in the past if you have

877
00:37:00,069 --> 00:37:03,819
questions that are a good fit to this

878
00:37:01,839 --> 00:37:07,660
kind of model machine learning is the

879
00:37:03,819 --> 00:37:10,839
right tool for you from a data

880
00:37:07,660 --> 00:37:14,950
perspective we had a biased piece of

881
00:37:10,839 --> 00:37:17,109
data we had 632 software data points

882
00:37:14,950 --> 00:37:19,049
that were all exploitable which is

883
00:37:17,109 --> 00:37:23,529
pretty bad because we needed at least

884
00:37:19,050 --> 00:37:25,630
632 32 software programs that we knew

885
00:37:23,530 --> 00:37:26,070
for a fact that were not exploitable as

886
00:37:25,630 --> 00:37:28,080
a

887
00:37:26,070 --> 00:37:31,440
control group and without that control

888
00:37:28,080 --> 00:37:33,569
group we got really bad overall results

889
00:37:31,440 --> 00:37:35,820
because we can't really trust what the

890
00:37:33,570 --> 00:37:37,590
machine learning model is telling us so

891
00:37:35,820 --> 00:37:41,280
what we're trying to tell you is that

892
00:37:37,590 --> 00:37:43,740
machine learning can be used it should

893
00:37:41,280 --> 00:37:45,930
be used that you should be very cautious

894
00:37:43,740 --> 00:37:47,700
when you use it because it's very easy

895
00:37:45,930 --> 00:37:50,190
to walk down a path and get some very

896
00:37:47,700 --> 00:37:52,319
amazing result and miss out entirely

897
00:37:50,190 --> 00:37:57,990
that you had like a serious mistake

898
00:37:52,320 --> 00:37:59,940
somewhere in the beginning so imagine

899
00:37:57,990 --> 00:38:01,649
that this would be a world where the

900
00:37:59,940 --> 00:38:04,650
machine learning model worked where

901
00:38:01,650 --> 00:38:06,660
could you use it well I always try to

902
00:38:04,650 --> 00:38:07,980
think of what would the blue team do

903
00:38:06,660 --> 00:38:09,359
with this kind of technology what would

904
00:38:07,980 --> 00:38:11,340
you do with these kind of results

905
00:38:09,360 --> 00:38:12,960
so imagine that you could go over all of

906
00:38:11,340 --> 00:38:15,840
your bugs in your bug tracker all of

907
00:38:12,960 --> 00:38:17,970
your crashes that somebody found and say

908
00:38:15,840 --> 00:38:20,040
to your team's well these are high

909
00:38:17,970 --> 00:38:22,859
priority because our tool says that are

910
00:38:20,040 --> 00:38:25,259
exploitable and the rest of them magic

911
00:38:22,860 --> 00:38:27,600
and the rest of them are not exploitable

912
00:38:25,260 --> 00:38:29,640
so given lower priority that would be a

913
00:38:27,600 --> 00:38:31,020
high benefit to any kind of software

914
00:38:29,640 --> 00:38:33,120
house it's trying to solve the real

915
00:38:31,020 --> 00:38:34,920
issues because you really should focus

916
00:38:33,120 --> 00:38:37,319
and what's exploitable before you fix

917
00:38:34,920 --> 00:38:39,210
everything else it's also good for us

918
00:38:37,320 --> 00:38:41,280
for when ability hunters because if I

919
00:38:39,210 --> 00:38:44,820
can take a piece of software and take

920
00:38:41,280 --> 00:38:46,830
10,000 attempts at attacking it and just

921
00:38:44,820 --> 00:38:48,960
looking at the ten that are actually

922
00:38:46,830 --> 00:38:50,520
exploitable I would save a lot of time I

923
00:38:48,960 --> 00:38:53,670
will get greater focus and I would get

924
00:38:50,520 --> 00:38:56,250
better results but in the end the bottom

925
00:38:53,670 --> 00:38:58,710
line is that if we could integrate this

926
00:38:56,250 --> 00:39:01,080
into existing tooling like fuzzers

927
00:38:58,710 --> 00:39:04,800
puzzles would be able to learn and to

928
00:39:01,080 --> 00:39:06,840
focus much faster on high-priority paths

929
00:39:04,800 --> 00:39:08,820
when we are exploring their fuzzing

930
00:39:06,840 --> 00:39:11,280
goals and that would mean we will get

931
00:39:08,820 --> 00:39:13,260
better more higher quality results from

932
00:39:11,280 --> 00:39:18,300
those fuzzers when we are trying to find

933
00:39:13,260 --> 00:39:19,950
those exploits data science is an art

934
00:39:18,300 --> 00:39:22,230
even though it has science in the name

935
00:39:19,950 --> 00:39:24,629
and that would probably be true with

936
00:39:22,230 --> 00:39:26,580
whatever PhD would talk to probably not

937
00:39:24,630 --> 00:39:28,560
some of our marketing but PhDs would

938
00:39:26,580 --> 00:39:30,890
tell you this is mainly in art what

939
00:39:28,560 --> 00:39:33,900
usually happens in machine learning

940
00:39:30,890 --> 00:39:35,640
experiments projects or product is that

941
00:39:33,900 --> 00:39:37,600
you go back to the drawing board again

942
00:39:35,640 --> 00:39:39,879
and again and again and again

943
00:39:37,600 --> 00:39:42,130
because it's an art and you really have

944
00:39:39,880 --> 00:39:44,290
to develop a sense of what would work

945
00:39:42,130 --> 00:39:46,630
what wouldn't and run those experiments

946
00:39:44,290 --> 00:39:49,029
but for us the biggest learning from

947
00:39:46,630 --> 00:39:51,070
this was that we needed to take our

948
00:39:49,030 --> 00:39:53,590
world the way that we look at the world

949
00:39:51,070 --> 00:39:54,970
as a exploit developers and talk to

950
00:39:53,590 --> 00:39:57,520
people in other domains with other

951
00:39:54,970 --> 00:40:00,879
expertise because they have tools and

952
00:39:57,520 --> 00:40:06,009
they have methodologies that can help us

953
00:40:00,880 --> 00:40:08,770
do our job much better so to wrap this

954
00:40:06,010 --> 00:40:11,290
up we want to acknowledge Dennis from

955
00:40:08,770 --> 00:40:12,850
our team but also the people behind the

956
00:40:11,290 --> 00:40:14,800
cyber Grand Challenge and the people

957
00:40:12,850 --> 00:40:18,069
behind the wonderful exploitable tool

958
00:40:14,800 --> 00:40:23,400
who we really built a lot upon their

959
00:40:18,070 --> 00:40:23,400
work and with that thank you

960
00:40:28,990 --> 00:40:33,368
so we have some time for questions and

961
00:40:31,300 --> 00:40:35,560
if you would submit your question into

962
00:40:33,369 --> 00:40:37,540
that deck which I think our we're seeing

963
00:40:35,560 --> 00:40:39,730
right now okay starting from top to

964
00:40:37,540 --> 00:40:41,080
bottom I believe what you call

965
00:40:39,730 --> 00:40:42,820
predictions could also be a

966
00:40:41,080 --> 00:40:44,259
classification isn't classification more

967
00:40:42,820 --> 00:40:45,010
relevant in experts research than

968
00:40:44,260 --> 00:40:46,900
predictions

969
00:40:45,010 --> 00:40:48,310
well prediction is an abstract way to

970
00:40:46,900 --> 00:40:50,950
think about classifications while

971
00:40:48,310 --> 00:40:52,930
classifications is only relevant to

972
00:40:50,950 --> 00:40:54,089
algorithms that do classifications are

973
00:40:52,930 --> 00:40:56,529
algorithms that don't do classification

974
00:40:54,089 --> 00:40:58,509
so I hope that kind of answers the

975
00:40:56,530 --> 00:41:00,070
question what type of machine learning

976
00:40:58,510 --> 00:41:00,550
are you discussing and as if you're

977
00:41:00,070 --> 00:41:02,980
talking about

978
00:41:00,550 --> 00:41:04,990
unsupervised machine learning in the

979
00:41:02,980 --> 00:41:07,510
sense this is not this is a branch of

980
00:41:04,990 --> 00:41:09,430
supervised machine learning because we

981
00:41:07,510 --> 00:41:12,220
fed it information however it was a

982
00:41:09,430 --> 00:41:15,339
single class supervised learning as in

983
00:41:12,220 --> 00:41:17,080
we didn't have additional data before I

984
00:41:15,339 --> 00:41:18,910
can continue to reading off the screen

985
00:41:17,080 --> 00:41:43,569
any question from the audience here

986
00:41:18,910 --> 00:41:47,680
thank you sir so the answer to that is

987
00:41:43,570 --> 00:41:49,750
like all good things yes and no so for

988
00:41:47,680 --> 00:41:51,940
that specific algorithm named X reboost

989
00:41:49,750 --> 00:41:53,200
and the other variants of X jables this

990
00:41:51,940 --> 00:41:54,849
is not the way it works so it does not

991
00:41:53,200 --> 00:41:56,830
give you out probabilities you can

992
00:41:54,849 --> 00:41:58,180
discern probabilities in a sense out of

993
00:41:56,830 --> 00:41:59,920
it but you wouldn't count on it

994
00:41:58,180 --> 00:42:02,560
there are other algorithms that actually

995
00:41:59,920 --> 00:42:04,510
do give you a classification tree or in

996
00:42:02,560 --> 00:42:05,680
a sense that you can say okay this is a

997
00:42:04,510 --> 00:42:07,570
higher problem this is lower probability

998
00:42:05,680 --> 00:42:09,368
and kind of mix and match between them

999
00:42:07,570 --> 00:42:12,010
we didn't do that but we are aware of

1000
00:42:09,369 --> 00:42:14,790
that probably of that option but it

1001
00:42:12,010 --> 00:42:17,260
leads it leads to a much more diverse

1002
00:42:14,790 --> 00:42:20,220
information gathering which we didn't

1003
00:42:17,260 --> 00:42:23,400
have another question from the audience

1004
00:42:20,220 --> 00:42:23,399
yes sir

1005
00:42:35,940 --> 00:42:40,270
so I'll say two things about that the

1006
00:42:38,590 --> 00:42:43,390
first one there are openly available by

1007
00:42:40,270 --> 00:42:45,009
the DARPA project from the US so you can

1008
00:42:43,390 --> 00:42:47,049
download the sources for all of them

1009
00:42:45,010 --> 00:42:48,820
compiled and random we also built a

1010
00:42:47,050 --> 00:42:51,100
harness which was basically a docker

1011
00:42:48,820 --> 00:42:52,330
that compiled everything and then fed

1012
00:42:51,100 --> 00:42:54,160
out the crashes into a different

1013
00:42:52,330 --> 00:42:55,779
document in the analysis and build an

1014
00:42:54,160 --> 00:42:57,549
entire pipeline which I didn't discuss

1015
00:42:55,780 --> 00:43:01,690
here but we can do it we can release it

1016
00:42:57,550 --> 00:43:03,520
on github it's completely free ok

1017
00:43:01,690 --> 00:43:08,200
another one from the audience or I go

1018
00:43:03,520 --> 00:43:10,150
back to the screen ok is exploitable

1019
00:43:08,200 --> 00:43:11,980
open source yes it is open for

1020
00:43:10,150 --> 00:43:14,680
contribution I believe it is but you

1021
00:43:11,980 --> 00:43:16,390
have to check check with the github page

1022
00:43:14,680 --> 00:43:19,149
and license and everything to see how

1023
00:43:16,390 --> 00:43:20,650
they do that is it more efficient to

1024
00:43:19,150 --> 00:43:23,140
have multiple models for each type of

1025
00:43:20,650 --> 00:43:24,190
binary trash dump or only one model

1026
00:43:23,140 --> 00:43:26,560
that's well trained enough to be

1027
00:43:24,190 --> 00:43:29,460
applicable to all cases that's a good

1028
00:43:26,560 --> 00:43:31,960
question actually and that comes into

1029
00:43:29,460 --> 00:43:33,640
something we call the Cascade effect

1030
00:43:31,960 --> 00:43:35,470
imagine you have like a single

1031
00:43:33,640 --> 00:43:37,540
all-knowing model that can handle all

1032
00:43:35,470 --> 00:43:39,549
kinds of cases that would be absolutely

1033
00:43:37,540 --> 00:43:41,740
ideal and therefore does not exist on

1034
00:43:39,550 --> 00:43:43,900
the other hand you can have a relatively

1035
00:43:41,740 --> 00:43:45,819
good model that would be correct in 90%

1036
00:43:43,900 --> 00:43:47,740
of the cases and then maybe you would

1037
00:43:45,820 --> 00:43:49,450
like to have another model that will

1038
00:43:47,740 --> 00:43:51,970
look at the same inputs and be correct

1039
00:43:49,450 --> 00:43:53,799
at 30% of the cases and another model

1040
00:43:51,970 --> 00:43:55,660
does not you know 50% of the cases and

1041
00:43:53,800 --> 00:43:57,130
then aggregate those results and compare

1042
00:43:55,660 --> 00:43:59,319
them and get like a cascade effect

1043
00:43:57,130 --> 00:44:00,970
between them because if each model is

1044
00:43:59,320 --> 00:44:03,000
trained differently and looks at the

1045
00:44:00,970 --> 00:44:05,589
different portion of the of the picture

1046
00:44:03,000 --> 00:44:07,780
combining the answers if two out of

1047
00:44:05,590 --> 00:44:09,310
three say that this is exploitable it's

1048
00:44:07,780 --> 00:44:11,590
probably something that I need the human

1049
00:44:09,310 --> 00:44:13,330
to take a look at if all three decide

1050
00:44:11,590 --> 00:44:14,620
that it's not exploitable I could

1051
00:44:13,330 --> 00:44:18,190
probably just chuck it aside and ignore

1052
00:44:14,620 --> 00:44:21,339
it hope this helps another question from

1053
00:44:18,190 --> 00:44:23,350
the audience you can also find us if you

1054
00:44:21,340 --> 00:44:26,190
want you this car will be available in

1055
00:44:23,350 --> 00:44:28,810
the whole outside for more questions

1056
00:44:26,190 --> 00:44:31,480
would this work in Australia yes but you

1057
00:44:28,810 --> 00:44:32,660
have to turn it upside down

1058
00:44:31,480 --> 00:44:39,179
thank you

1059
00:44:32,660 --> 00:44:39,178
[Applause]

