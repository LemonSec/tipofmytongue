1
00:00:00,090 --> 00:00:09,170
[Applause]

2
00:00:06,830 --> 00:00:12,179
okay good morning everyone

3
00:00:09,170 --> 00:00:15,809
can everyone hear me clearly yeah

4
00:00:12,179 --> 00:00:17,698
excellent it's a good start so welcome

5
00:00:15,809 --> 00:00:20,250
to my talk cracking the perimeter with

6
00:00:17,699 --> 00:00:23,430
sharpshooter my name is Dominic Chell

7
00:00:20,250 --> 00:00:25,920
and I work in the red team in a company

8
00:00:23,430 --> 00:00:27,359
in the UK called mb/sec where I'm mainly

9
00:00:25,920 --> 00:00:30,570
focused on the offensive side of

10
00:00:27,359 --> 00:00:32,309
security and day to day I spend a lot of

11
00:00:30,570 --> 00:00:33,809
my time managing and executing our

12
00:00:32,308 --> 00:00:36,449
threat intelligence led Red Team

13
00:00:33,809 --> 00:00:38,879
engagements under the C best star and TV

14
00:00:36,450 --> 00:00:40,290
frameworks if you're on Twitter you can

15
00:00:38,879 --> 00:00:45,599
find me on twitter under the

16
00:00:40,290 --> 00:00:47,370
unimaginative handle of dom gel so today

17
00:00:45,600 --> 00:00:48,960
for the next sort of 45 minutes or so

18
00:00:47,370 --> 00:00:50,459
I'm going to talk a little bit about the

19
00:00:48,960 --> 00:00:53,100
state of play with regards to initial

20
00:00:50,460 --> 00:00:55,350
access and the main focus of the talk is

21
00:00:53,100 --> 00:00:56,969
on at all that I developed and to

22
00:00:55,350 --> 00:01:00,059
streamline payload generation called

23
00:00:56,969 --> 00:01:02,010
sharpshooter I'll include some of the

24
00:01:00,059 --> 00:01:03,300
history of some of the advancements some

25
00:01:02,010 --> 00:01:05,158
of the new features that I added as

26
00:01:03,300 --> 00:01:06,479
defenders started to respond to it and

27
00:01:05,159 --> 00:01:12,180
then I'll finish off with a few trade

28
00:01:06,479 --> 00:01:14,130
craft tips so getting a foothold and

29
00:01:12,180 --> 00:01:15,930
it's often one of the most complex parts

30
00:01:14,130 --> 00:01:17,908
of a Red Team engagement I often find

31
00:01:15,930 --> 00:01:19,259
that I spend a lot of my time actually

32
00:01:17,909 --> 00:01:21,810
trying to get in but once we're in

33
00:01:19,259 --> 00:01:24,360
things tend to fly by and there's been a

34
00:01:21,810 --> 00:01:26,220
lot of research into lateral movement

35
00:01:24,360 --> 00:01:28,049
into Active Directory the development of

36
00:01:26,220 --> 00:01:29,369
tools things like bloodhound which kind

37
00:01:28,049 --> 00:01:31,380
of really streamlined the testing

38
00:01:29,369 --> 00:01:33,509
process weren't sure actually in but

39
00:01:31,380 --> 00:01:36,119
with a few exceptions has generally been

40
00:01:33,509 --> 00:01:38,040
a lot less tooling around the first bit

41
00:01:36,119 --> 00:01:39,619
which is kind of getting onto the

42
00:01:38,040 --> 00:01:42,030
network and establishing that foothold

43
00:01:39,619 --> 00:01:43,170
and we used to use things like

44
00:01:42,030 --> 00:01:45,360
PowerShell quite a lot in our

45
00:01:43,170 --> 00:01:47,189
engagements particularly in any kind of

46
00:01:45,360 --> 00:01:49,320
scenario where you could run something

47
00:01:47,189 --> 00:01:51,119
like an execution cradle and the reason

48
00:01:49,320 --> 00:01:52,740
for this was PowerShell was a great way

49
00:01:51,119 --> 00:01:55,079
to kind of get into memory so you kind

50
00:01:52,740 --> 00:01:56,759
of got to evade antivirus unfortunately

51
00:01:55,079 --> 00:01:58,589
defenders are now pretty aware of

52
00:01:56,759 --> 00:02:00,960
PowerShell mainly because it's quite

53
00:01:58,590 --> 00:02:02,579
easy to signature and both statically

54
00:02:00,960 --> 00:02:04,770
from the PowerShell scripts as well as

55
00:02:02,579 --> 00:02:06,089
with things like command line logging so

56
00:02:04,770 --> 00:02:07,530
defenders are looking for things like

57
00:02:06,090 --> 00:02:09,509
encoded command and whatnot on the

58
00:02:07,530 --> 00:02:11,370
command line then also looking for

59
00:02:09,508 --> 00:02:13,559
process spawn chains so for example if

60
00:02:11,370 --> 00:02:13,890
you see a windward executing PowerShell

61
00:02:13,560 --> 00:02:17,400
that

62
00:02:13,890 --> 00:02:20,190
that's probably not a good thing we also

63
00:02:17,400 --> 00:02:22,319
saw the introduction of am G which

64
00:02:20,190 --> 00:02:24,690
provided AV engines with the ability to

65
00:02:22,319 --> 00:02:25,980
inspect process memory whereas

66
00:02:24,690 --> 00:02:27,600
previously if you could actually get a

67
00:02:25,980 --> 00:02:30,989
script into memory you generally had car

68
00:02:27,600 --> 00:02:33,030
plunge and then we kind of saw the rise

69
00:02:30,990 --> 00:02:35,130
of some boxing technologies we tend to

70
00:02:33,030 --> 00:02:36,990
encounter these quite a lot on our red

71
00:02:35,130 --> 00:02:39,030
team engagements things like fireEye or

72
00:02:36,990 --> 00:02:41,310
bromium where your payloads are actually

73
00:02:39,030 --> 00:02:43,590
getting open inside a micro VM and

74
00:02:41,310 --> 00:02:45,390
there's products like silence Palo Alto

75
00:02:43,590 --> 00:02:48,330
traps which describe themselves as kind

76
00:02:45,390 --> 00:02:51,839
of next-gen AV which focus on prevention

77
00:02:48,330 --> 00:02:53,489
don't rely on signatures we've also had

78
00:02:51,840 --> 00:02:55,200
difficulties getting payloads into

79
00:02:53,489 --> 00:02:56,910
environments and people are becoming

80
00:02:55,200 --> 00:02:57,958
more aware of the things that they

81
00:02:56,910 --> 00:02:59,970
actually need to block on the perimeter

82
00:02:57,959 --> 00:03:02,280
so for example we used to use things

83
00:02:59,970 --> 00:03:04,769
like HD a is quite a lot what we started

84
00:03:02,280 --> 00:03:07,739
as they gained popularity we started to

85
00:03:04,769 --> 00:03:10,620
see companies blocking application HTM

86
00:03:07,739 --> 00:03:12,780
I'm type h TTX tensions on the corporate

87
00:03:10,620 --> 00:03:15,810
gateways and so we obviously had to kind

88
00:03:12,780 --> 00:03:17,580
of move away from them and so overall I

89
00:03:15,810 --> 00:03:20,070
would say in the last couple of years

90
00:03:17,580 --> 00:03:22,380
and I feel like red teaming has got

91
00:03:20,070 --> 00:03:23,940
harder which is not necessarily a bad

92
00:03:22,380 --> 00:03:27,359
thing because it generally shows that

93
00:03:23,940 --> 00:03:28,920
that people are getting better kind of

94
00:03:27,360 --> 00:03:30,780
with this in mind I started to develop

95
00:03:28,920 --> 00:03:32,760
some tooling that would have sisters in

96
00:03:30,780 --> 00:03:35,190
generating payloads and that's the main

97
00:03:32,760 --> 00:03:36,690
focus of what the of my talk and the

98
00:03:35,190 --> 00:03:38,549
tool was named sharpshooter or at least

99
00:03:36,690 --> 00:03:40,530
it last year I've done several

100
00:03:38,549 --> 00:03:43,079
iterations of additional features and

101
00:03:40,530 --> 00:03:45,030
updates to it and we've used it on quite

102
00:03:43,079 --> 00:03:47,280
a few engagements and it's give us some

103
00:03:45,030 --> 00:03:49,320
success I'm it's helped as in bypassing

104
00:03:47,280 --> 00:03:51,930
some of these kind of next-gen products

105
00:03:49,320 --> 00:03:54,510
and some boxes things like silence and

106
00:03:51,930 --> 00:03:57,120
fire as well as the kind of traditional

107
00:03:54,510 --> 00:03:59,269
AV solutions like McAfee and Windows

108
00:03:57,120 --> 00:03:59,269
Defender

109
00:03:59,480 --> 00:04:03,988
and I released a tool yet last year um

110
00:04:01,950 --> 00:04:05,880
it got it seems to be reasonably well

111
00:04:03,989 --> 00:04:08,540
received by the security community and

112
00:04:05,880 --> 00:04:10,890
it was also featured in the latest

113
00:04:08,540 --> 00:04:14,790
hackers playbook 3a Red Team Edition

114
00:04:10,890 --> 00:04:16,918
which I thought was kind of cool and so

115
00:04:14,790 --> 00:04:18,959
what does it do well it basically allows

116
00:04:16,918 --> 00:04:20,880
you to generate staged and stateless

117
00:04:18,959 --> 00:04:23,490
payloads for the majority of the windows

118
00:04:20,880 --> 00:04:25,890
and scripting file formats specifically

119
00:04:23,490 --> 00:04:27,690
things like HTML applications JavaScript

120
00:04:25,890 --> 00:04:30,570
files VB script files

121
00:04:27,690 --> 00:04:32,270
window script files as well as VBA and X

122
00:04:30,570 --> 00:04:34,830
all for macros

123
00:04:32,270 --> 00:04:36,479
when I say staged and what I mean is

124
00:04:34,830 --> 00:04:38,669
basically there's a small bit of code

125
00:04:36,480 --> 00:04:41,220
that is embedded inside the payload

126
00:04:38,670 --> 00:04:43,680
which is the stager this will then and

127
00:04:41,220 --> 00:04:46,860
retrieve the main payload which in our

128
00:04:43,680 --> 00:04:48,420
case is and some c-sharp source code and

129
00:04:46,860 --> 00:04:49,980
when I say stage list I basically mean

130
00:04:48,420 --> 00:04:51,930
that the full code is embedded inside

131
00:04:49,980 --> 00:04:54,660
the script file and that's what will

132
00:04:51,930 --> 00:04:56,310
execute when it's run I included some

133
00:04:54,660 --> 00:04:58,560
defensive evasion techniques inside the

134
00:04:56,310 --> 00:05:00,510
tool and things like sandbox detection

135
00:04:58,560 --> 00:05:03,650
and a technique called HTML smuggling

136
00:05:00,510 --> 00:05:03,650
which I'll talk a little bit about later

137
00:05:03,890 --> 00:05:09,180
so the foundation on which the tool is

138
00:05:06,150 --> 00:05:11,250
built is based on a tool called net TJ

139
00:05:09,180 --> 00:05:13,190
script this is a really cool tool that

140
00:05:11,250 --> 00:05:17,000
was built by James for Shore from

141
00:05:13,190 --> 00:05:19,620
project zero at Google essentially

142
00:05:17,000 --> 00:05:22,410
dotnet tjs provides you with full

143
00:05:19,620 --> 00:05:24,600
Interop between and nets and the windows

144
00:05:22,410 --> 00:05:26,070
script host and through comm this

145
00:05:24,600 --> 00:05:29,490
basically means that you can take any

146
00:05:26,070 --> 00:05:31,980
arbitrary compiled dotnet program and

147
00:05:29,490 --> 00:05:34,020
embed it as a serialized object that can

148
00:05:31,980 --> 00:05:37,110
be accessed through JavaScript or VB

149
00:05:34,020 --> 00:05:40,440
script so what sharpshooter does is it

150
00:05:37,110 --> 00:05:42,390
takes the net to jscript loader and the

151
00:05:40,440 --> 00:05:44,040
sharpshooter's serialized object it then

152
00:05:42,390 --> 00:05:46,860
encrypts it with a random key using the

153
00:05:44,040 --> 00:05:48,900
rc4 base64 encode zip and embeds it

154
00:05:46,860 --> 00:05:50,400
inside whatever scripting format that

155
00:05:48,900 --> 00:05:52,109
you've chosen it then has a small

156
00:05:50,400 --> 00:05:55,169
harness which will decode in decrypt the

157
00:05:52,110 --> 00:05:57,510
payload and execute it in a staged

158
00:05:55,170 --> 00:05:59,220
payload scenario and the payload that's

159
00:05:57,510 --> 00:06:01,800
executed will actually be some c-sharp

160
00:05:59,220 --> 00:06:04,200
source code and it's retrieved via via

161
00:06:01,800 --> 00:06:07,080
web or DNS delivery as you can kind of

162
00:06:04,200 --> 00:06:09,840
see on my little diagram here so that

163
00:06:07,080 --> 00:06:12,539
when the dot nature JSX Acutes uses dns

164
00:06:09,840 --> 00:06:14,280
or web delivery to retrieve some c-sharp

165
00:06:12,540 --> 00:06:17,190
source code it then compiles it on the

166
00:06:14,280 --> 00:06:20,280
host using the.net code on compiler and

167
00:06:17,190 --> 00:06:21,360
uses reflection to execute it and that

168
00:06:20,280 --> 00:06:23,010
code could be anything it could be

169
00:06:21,360 --> 00:06:24,870
something that stages an implant into

170
00:06:23,010 --> 00:06:31,409
memory it could be a memory cat so it

171
00:06:24,870 --> 00:06:32,640
could be whatever you want it to be so

172
00:06:31,410 --> 00:06:35,550
how do we kind of go about using one of

173
00:06:32,640 --> 00:06:38,130
these tools in an engagement well prior

174
00:06:35,550 --> 00:06:40,110
to use conducting any Red Team

175
00:06:38,130 --> 00:06:41,380
assessment we invest quite a lot of time

176
00:06:40,110 --> 00:06:43,270
in recording

177
00:06:41,380 --> 00:06:45,400
we try to really try and understand our

178
00:06:43,270 --> 00:06:47,200
target and what their environment might

179
00:06:45,400 --> 00:06:49,030
look like if you're using something like

180
00:06:47,200 --> 00:06:51,190
sharpshooter there's a few things that

181
00:06:49,030 --> 00:06:52,539
you might be interested in firstly we

182
00:06:51,190 --> 00:06:54,310
might want to know the version of

183
00:06:52,540 --> 00:06:55,780
the.net framework or even if the dotnet

184
00:06:54,310 --> 00:06:57,790
framework is installed on the endpoint

185
00:06:55,780 --> 00:07:00,099
and the reason for this is that we

186
00:06:57,790 --> 00:07:03,460
actually tailor our payload to match

187
00:07:00,100 --> 00:07:05,350
that dotnet version so Windows 7 systems

188
00:07:03,460 --> 00:07:06,940
you'll probably find in version 3 of the

189
00:07:05,350 --> 00:07:09,460
dotnet framework Windows 10 systems you

190
00:07:06,940 --> 00:07:10,750
might find version 4 and secondly if you

191
00:07:09,460 --> 00:07:12,190
want to actually execute something like

192
00:07:10,750 --> 00:07:13,660
shell code on the end point we need to

193
00:07:12,190 --> 00:07:17,560
know what the architecture is if we're

194
00:07:13,660 --> 00:07:19,360
executing in process obviously the kind

195
00:07:17,560 --> 00:07:21,850
of way around this would be to spawn a

196
00:07:19,360 --> 00:07:25,510
new 32-bit process and inject some

197
00:07:21,850 --> 00:07:27,220
32-bit shell code into that so how do we

198
00:07:25,510 --> 00:07:28,630
kind of approach this reconnaissance and

199
00:07:27,220 --> 00:07:30,970
well it's actually quite simple because

200
00:07:28,630 --> 00:07:32,469
most client-side software will disclose

201
00:07:30,970 --> 00:07:35,110
quite a lot of interesting information

202
00:07:32,470 --> 00:07:37,360
when you interact with it so let's say

203
00:07:35,110 --> 00:07:39,820
we send a user just a very simple

204
00:07:37,360 --> 00:07:42,430
phishing email all they need to do is

205
00:07:39,820 --> 00:07:43,900
maybe open it and what outlook might do

206
00:07:42,430 --> 00:07:46,930
is if we've got an embedded image

207
00:07:43,900 --> 00:07:49,179
something like this and inside our email

208
00:07:46,930 --> 00:07:51,700
when we'll Outlook tries to retrieve

209
00:07:49,180 --> 00:07:53,710
that image it will then send us a bunch

210
00:07:51,700 --> 00:07:55,780
of you kind of useful information about

211
00:07:53,710 --> 00:07:57,760
the version of Office that is installed

212
00:07:55,780 --> 00:08:00,010
so in this kind of scenario you can see

213
00:07:57,760 --> 00:08:02,130
we've got it says while 64 which means

214
00:08:00,010 --> 00:08:04,390
it's 32-bit office on a 64-bit system

215
00:08:02,130 --> 00:08:06,700
we've got various versions of the.net

216
00:08:04,390 --> 00:08:09,610
framework installed and we can see it's

217
00:08:06,700 --> 00:08:12,099
actually using office 2016 so from a

218
00:08:09,610 --> 00:08:13,300
very kind of simple email we're actually

219
00:08:12,100 --> 00:08:16,590
able to get quite a lot of good

220
00:08:13,300 --> 00:08:19,300
information about our target in advance

221
00:08:16,590 --> 00:08:20,710
how do we then approach getting the

222
00:08:19,300 --> 00:08:22,570
payloads into the environment well I

223
00:08:20,710 --> 00:08:25,270
mentioned this technique called HTML

224
00:08:22,570 --> 00:08:28,360
smuggling this is a really clever little

225
00:08:25,270 --> 00:08:30,520
trick that was first documented by Rich

226
00:08:28,360 --> 00:08:33,669
Warren from NCC group in his deme guys

227
00:08:30,520 --> 00:08:37,020
tool and the way this works is you can

228
00:08:33,669 --> 00:08:39,909
basically take any arbitrary file and

229
00:08:37,020 --> 00:08:42,460
rc4 encrypt it with a random key embed

230
00:08:39,909 --> 00:08:45,579
it inside a HTML file when the HTML file

231
00:08:42,460 --> 00:08:47,740
is opened and it uses the JavaScript web

232
00:08:45,580 --> 00:08:50,740
crypto API is to decrypt and serve the

233
00:08:47,740 --> 00:08:53,200
file to the user using the and the web

234
00:08:50,740 --> 00:08:54,460
storage method a massive blob this

235
00:08:53,200 --> 00:08:54,820
technique is really powerful because

236
00:08:54,460 --> 00:08:56,950
what

237
00:08:54,820 --> 00:08:59,860
actually means is all the corporate

238
00:08:56,950 --> 00:09:03,250
proxy might see is a HTML file with the

239
00:08:59,860 --> 00:09:05,980
the mime type text HTML plus outlook

240
00:09:03,250 --> 00:09:07,150
actually also supports opening HTML

241
00:09:05,980 --> 00:09:10,120
files from an email so you could just

242
00:09:07,150 --> 00:09:11,860
send it directly to your target so I've

243
00:09:10,120 --> 00:09:13,810
included a couple of templates within

244
00:09:11,860 --> 00:09:16,480
sharpshooter to populate these using

245
00:09:13,810 --> 00:09:18,520
HTML smuggling but you can really dress

246
00:09:16,480 --> 00:09:23,080
it up to kind of fit in well with your

247
00:09:18,520 --> 00:09:25,090
phishing campaign I mentioned we need to

248
00:09:23,080 --> 00:09:26,830
kind of be aware of some boxes and so

249
00:09:25,090 --> 00:09:29,140
what kind of tricks does sharpshooter

250
00:09:26,830 --> 00:09:31,210
use to kind of avoid these well the

251
00:09:29,140 --> 00:09:32,740
theory really is that some boxes use

252
00:09:31,210 --> 00:09:34,480
automated analysis to look for bad

253
00:09:32,740 --> 00:09:35,740
behavior if they don't see any bad

254
00:09:34,480 --> 00:09:38,140
behavior then we'll mark the file is

255
00:09:35,740 --> 00:09:40,690
safe so if we're actually able to detect

256
00:09:38,140 --> 00:09:42,100
that we're running in a sandbox and do

257
00:09:40,690 --> 00:09:43,570
nothing particularly malicious inside

258
00:09:42,100 --> 00:09:46,270
the sandbox then it might end up getting

259
00:09:43,570 --> 00:09:48,400
sent through to the user shop shoots has

260
00:09:46,270 --> 00:09:50,500
got a number of techniques that were

261
00:09:48,400 --> 00:09:52,270
inspired by Christensen and Brandon are

262
00:09:50,500 --> 00:09:54,280
Varney's and check please projects so

263
00:09:52,270 --> 00:09:56,110
these include things like domain keying

264
00:09:54,280 --> 00:09:57,310
so if we're able to actually figure out

265
00:09:56,110 --> 00:09:59,290
what the internal Active Directory

266
00:09:57,310 --> 00:10:01,449
domain name is of the company in advance

267
00:09:59,290 --> 00:10:03,219
we can key our payload to only ever

268
00:10:01,450 --> 00:10:06,550
actually run on those domain joint

269
00:10:03,220 --> 00:10:08,500
systems if we can't figure out that ad

270
00:10:06,550 --> 00:10:10,180
name then maybe we want to just limit

271
00:10:08,500 --> 00:10:13,270
the payload to only winning on systems

272
00:10:10,180 --> 00:10:14,800
that are just on any domain the reason

273
00:10:13,270 --> 00:10:16,720
for this is many of the sandbox

274
00:10:14,800 --> 00:10:18,699
appliances and can't necessarily be

275
00:10:16,720 --> 00:10:20,230
customized so things like fire I will

276
00:10:18,700 --> 00:10:22,210
come with like predefined guest images

277
00:10:20,230 --> 00:10:23,530
you can't necessarily easily modify

278
00:10:22,210 --> 00:10:26,770
these or join them to your internal

279
00:10:23,530 --> 00:10:28,420
domain then it's also got some bits of

280
00:10:26,770 --> 00:10:30,449
functionality to look for various

281
00:10:28,420 --> 00:10:32,979
artifacts from some boxes so things like

282
00:10:30,450 --> 00:10:35,170
MAC addresses that link in with

283
00:10:32,980 --> 00:10:36,520
virtualization solutions and it checks

284
00:10:35,170 --> 00:10:40,209
whether it's been debugged that kind of

285
00:10:36,520 --> 00:10:41,439
stuff so let's say we want to try and

286
00:10:40,210 --> 00:10:42,730
figure out what the internal active

287
00:10:41,440 --> 00:10:44,470
directory name is of a company in

288
00:10:42,730 --> 00:10:45,730
advance and well there's a few different

289
00:10:44,470 --> 00:10:47,200
kind of tricks that you can use to do

290
00:10:45,730 --> 00:10:48,850
this and the one that we've had a good

291
00:10:47,200 --> 00:10:52,360
amount of success with is targeting

292
00:10:48,850 --> 00:10:54,310
Skype for business deployments so if a

293
00:10:52,360 --> 00:10:56,530
company is using Skype for business as

294
00:10:54,310 --> 00:10:58,359
their edge server which a lot of

295
00:10:56,530 --> 00:10:59,860
companies do and you can actually

296
00:10:58,360 --> 00:11:02,260
retrieve the full of qualified domain

297
00:10:59,860 --> 00:11:04,990
name from that host from one of the

298
00:11:02,260 --> 00:11:06,700
other headers just by querying it and so

299
00:11:04,990 --> 00:11:09,330
we've got an example here where you can

300
00:11:06,700 --> 00:11:09,330
see we're querying

301
00:11:09,400 --> 00:11:15,010
Skype for business server and it's

302
00:11:11,980 --> 00:11:17,110
disclosing the the fqdn of the Skype

303
00:11:15,010 --> 00:11:19,870
server and many companies will actually

304
00:11:17,110 --> 00:11:21,940
use the that is actually internal ad

305
00:11:19,870 --> 00:11:23,740
name so here we could speculate maybe

306
00:11:21,940 --> 00:11:26,590
that fireEye's internal ad name is fire

307
00:11:23,740 --> 00:11:29,950
comp we did the same thing with carbon

308
00:11:26,590 --> 00:11:32,650
black we could see that it's actually

309
00:11:29,950 --> 00:11:34,480
disclosing this bit nine dot local

310
00:11:32,650 --> 00:11:36,670
domain so we could again speculate that

311
00:11:34,480 --> 00:11:38,560
carbon blacks internal aid active

312
00:11:36,670 --> 00:11:40,479
directory name might be bit nine dot

313
00:11:38,560 --> 00:11:42,400
local so when we've got this information

314
00:11:40,480 --> 00:11:43,870
we can then plug it into and sharp

315
00:11:42,400 --> 00:11:49,030
shoots and actually key our payload to

316
00:11:43,870 --> 00:11:52,900
only one on these domains so let's look

317
00:11:49,030 --> 00:11:57,240
at a little example of sharpshooter

318
00:11:52,900 --> 00:11:57,240
against Palo Alto traps

319
00:12:07,340 --> 00:12:13,280
okay so I have videoed all my demos

320
00:12:09,560 --> 00:12:14,959
because I've done talks before so

321
00:12:13,280 --> 00:12:19,790
basically what I'm doing is I'm gonna

322
00:12:14,960 --> 00:12:24,710
create a stage 'less HD a file using

323
00:12:19,790 --> 00:12:26,420
sharpshooter which is using the HTML

324
00:12:24,710 --> 00:12:30,910
smuggling as well and I'm going to host

325
00:12:26,420 --> 00:12:30,910
the file on a cobalt strike team server

326
00:12:37,300 --> 00:12:43,130
then I've got a VM here with you can see

327
00:12:41,360 --> 00:12:45,620
we've got Palo Alto traps in it and it's

328
00:12:43,130 --> 00:12:47,360
enabled and this is what the user would

329
00:12:45,620 --> 00:12:50,630
see they just download the HTML file it

330
00:12:47,360 --> 00:12:54,080
serves them HDA it when they open the

331
00:12:50,630 --> 00:12:56,689
HDA we get a cobalt strike beacon back

332
00:12:54,080 --> 00:12:58,640
which where we've got full Seaway - see

333
00:12:56,690 --> 00:13:01,390
- so we've completely bypassed and the

334
00:12:58,640 --> 00:13:01,390
Palo ISO traps

335
00:13:08,520 --> 00:13:13,079
and shortly after a released at all um

336
00:13:11,250 --> 00:13:16,950
it started to get signatures by some of

337
00:13:13,080 --> 00:13:19,290
the various AV vendors actually Windows

338
00:13:16,950 --> 00:13:21,420
Defender created and I'm the signature

339
00:13:19,290 --> 00:13:23,010
that didn't just block some of the

340
00:13:21,420 --> 00:13:24,990
sharpshooter payloads but it also

341
00:13:23,010 --> 00:13:26,430
blocked the primitive and the exploit

342
00:13:24,990 --> 00:13:28,649
primitive that was used by donates

343
00:13:26,430 --> 00:13:30,209
jscript meaning that any dotnet to

344
00:13:28,649 --> 00:13:32,850
JavaScript payload was now flagged as a

345
00:13:30,209 --> 00:13:35,369
malicious this kind of led to the tool

346
00:13:32,850 --> 00:13:39,209
and being proclaimed dead by Casey Smith

347
00:13:35,370 --> 00:13:41,149
on Twitter I'm not necessarily sure I

348
00:13:39,209 --> 00:13:44,040
would say it was entirely dead because I

349
00:13:41,149 --> 00:13:46,170
dropped some payloads into virustotal

350
00:13:44,040 --> 00:13:48,719
last week just to see how what the kind

351
00:13:46,170 --> 00:13:52,680
of response was and the kind of default

352
00:13:48,720 --> 00:13:55,680
HJ HTML file only had seven out of 56

353
00:13:52,680 --> 00:13:57,899
detections and the default HD a file

354
00:13:55,680 --> 00:14:01,859
hunt 18 out of 56 so it's probably still

355
00:13:57,899 --> 00:14:03,920
some mileage in it but regardless um

356
00:14:01,860 --> 00:14:06,089
what I wanted to do was actually try and

357
00:14:03,920 --> 00:14:11,339
see if I could bring the tool back see

358
00:14:06,089 --> 00:14:13,230
if it could resurrect it so the first

359
00:14:11,339 --> 00:14:16,170
thing I did was to try and look at what

360
00:14:13,230 --> 00:14:17,640
defender was triggering on and I noticed

361
00:14:16,170 --> 00:14:20,550
defender didn't actually care about the

362
00:14:17,640 --> 00:14:22,980
file the payload when it was on disk the

363
00:14:20,550 --> 00:14:25,469
the signature was actually tied to an z

364
00:14:22,980 --> 00:14:26,850
so it was being checked in memory i'm

365
00:14:25,470 --> 00:14:28,829
swamis a security feature that was added

366
00:14:26,850 --> 00:14:30,990
in windows 10 provides a standard

367
00:14:28,829 --> 00:14:32,609
interface for file memory stream

368
00:14:30,990 --> 00:14:34,620
scanning for any application on the

369
00:14:32,610 --> 00:14:36,029
endpoint and the analysis actually

370
00:14:34,620 --> 00:14:38,490
occurs at the scripting engine level

371
00:14:36,029 --> 00:14:40,529
which is where the power is really

372
00:14:38,490 --> 00:14:42,209
because it means that the AV engines can

373
00:14:40,529 --> 00:14:45,510
get access to the plain deal for skated

374
00:14:42,209 --> 00:14:46,819
code currently MZ is supported across

375
00:14:45,510 --> 00:14:50,510
powershell windows script host

376
00:14:46,820 --> 00:14:52,620
JavaScript VB scripts and visual basic

377
00:14:50,510 --> 00:14:55,350
so here's a little high-level overview

378
00:14:52,620 --> 00:14:57,480
of the a MIDI architecture and the way

379
00:14:55,350 --> 00:14:59,100
MC works is essentially there's a DLL

380
00:14:57,480 --> 00:15:02,160
that is loaded into every PowerShell

381
00:14:59,100 --> 00:15:03,930
windows script host session the DLL

382
00:15:02,160 --> 00:15:06,000
contains a number of exported functions

383
00:15:03,930 --> 00:15:07,859
that allow the container process and

384
00:15:06,000 --> 00:15:10,620
such as PowerShell to call the am z

385
00:15:07,860 --> 00:15:12,810
api's and then this basically allows the

386
00:15:10,620 --> 00:15:14,970
registered AV engine on the system to

387
00:15:12,810 --> 00:15:16,819
process and scan content and if

388
00:15:14,970 --> 00:15:20,190
malicious content is detected and

389
00:15:16,820 --> 00:15:22,230
executions blocked and there's event 1 1

390
00:15:20,190 --> 00:15:23,880
1 6 is triggered

391
00:15:22,230 --> 00:15:25,980
it's worth noting that the ambience face

392
00:15:23,880 --> 00:15:27,420
is open so any application can actually

393
00:15:25,980 --> 00:15:29,700
call in - it doesn't have to be one of

394
00:15:27,420 --> 00:15:31,740
the scripting engines you could have say

395
00:15:29,700 --> 00:15:33,149
for example an email client and that

396
00:15:31,740 --> 00:15:34,560
wanted to scan emails or an instant

397
00:15:33,149 --> 00:15:38,580
messenger that wanted discount messages

398
00:15:34,560 --> 00:15:40,380
they could actually query am Z so Z

399
00:15:38,580 --> 00:15:42,209
something we need actually need to worry

400
00:15:40,380 --> 00:15:44,250
about as a red teamer and well I thought

401
00:15:42,209 --> 00:15:45,930
this kind of tweet from Lee homes was

402
00:15:44,250 --> 00:15:47,520
pretty interesting because it shows the

403
00:15:45,930 --> 00:15:49,589
kind of state of play with regards to

404
00:15:47,520 --> 00:15:51,029
OMSI right now and so as you can see

405
00:15:49,589 --> 00:15:53,160
there's actually only a handful of

406
00:15:51,029 --> 00:15:54,570
vendors that are using um Z and if you

407
00:15:53,160 --> 00:15:56,610
remember I said it's only available on

408
00:15:54,570 --> 00:15:58,230
Windows 10 so if your target isn't on

409
00:15:56,610 --> 00:16:00,240
Windows 10 and they're not using one of

410
00:15:58,230 --> 00:16:01,589
these handful of Av solutions then you

411
00:16:00,240 --> 00:16:06,720
might actually not even need to think

412
00:16:01,589 --> 00:16:08,339
about it so let's talk a little bit

413
00:16:06,720 --> 00:16:11,209
about some some antiviruses

414
00:16:08,339 --> 00:16:14,070
and so mid-april last year Casey Smith

415
00:16:11,209 --> 00:16:15,660
released the details on the second

416
00:16:14,070 --> 00:16:19,790
iteration of what he called the squiggly

417
00:16:15,660 --> 00:16:22,380
attacks called squiggly - this attack

418
00:16:19,790 --> 00:16:24,329
basically allowed you to execute script

419
00:16:22,380 --> 00:16:26,490
let's in full trust and when they were

420
00:16:24,330 --> 00:16:29,130
embedded inside an XML stylesheet using

421
00:16:26,490 --> 00:16:30,839
the wmic command-line tool and while I

422
00:16:29,130 --> 00:16:33,120
was playing with this technique and what

423
00:16:30,839 --> 00:16:34,620
I noticed was that the same sharpshooter

424
00:16:33,120 --> 00:16:37,170
payload when it was embedded inside a

425
00:16:34,620 --> 00:16:40,709
scribbler wasn't triggering the defender

426
00:16:37,170 --> 00:16:42,390
and Zita signature this was kind of

427
00:16:40,709 --> 00:16:44,520
interesting because and what it meant

428
00:16:42,390 --> 00:16:46,980
was that after kind of proclaiming the

429
00:16:44,520 --> 00:16:48,959
tool to be you know dead Casey had

430
00:16:46,980 --> 00:16:54,600
actually provided me with a potential

431
00:16:48,959 --> 00:16:56,219
technique to resurrect it and with this

432
00:16:54,600 --> 00:16:58,080
in mind what I started to do was

433
00:16:56,220 --> 00:17:02,520
incorporate some updates into

434
00:16:58,080 --> 00:17:05,790
sharpshooter that used the the various

435
00:17:02,520 --> 00:17:07,709
kind of squiggly attacks and so not just

436
00:17:05,790 --> 00:17:09,688
squiggly - and but also the squiggly do

437
00:17:07,709 --> 00:17:12,839
original attack which uses the register

438
00:17:09,689 --> 00:17:16,709
of 32 binary within a CT file and to do

439
00:17:12,839 --> 00:17:18,149
this what I did was I kind of created or

440
00:17:16,709 --> 00:17:20,309
coined a coin the phrase can't calm

441
00:17:18,150 --> 00:17:23,160
staging and so essentially there are

442
00:17:20,309 --> 00:17:25,920
several known calm methods that allow

443
00:17:23,160 --> 00:17:28,380
you to run an execution create long

444
00:17:25,920 --> 00:17:29,700
windows and that are accessible to

445
00:17:28,380 --> 00:17:31,869
anything that can access calm so

446
00:17:29,700 --> 00:17:35,019
something like the windows script toast

447
00:17:31,869 --> 00:17:37,959
so what I did was I basically introduced

448
00:17:35,019 --> 00:17:40,389
I took took advantage of some of these

449
00:17:37,960 --> 00:17:44,019
common objects and specifically the

450
00:17:40,389 --> 00:17:45,488
outlook create object which was first

451
00:17:44,019 --> 00:17:49,029
documented by Etsy in Stallman's at

452
00:17:45,489 --> 00:17:53,710
seven space debris script run and the

453
00:17:49,029 --> 00:17:54,969
shell browser window run method which is

454
00:17:53,710 --> 00:17:57,789
kind of interesting because that one

455
00:17:54,969 --> 00:17:59,889
actually uses the parent processes of

456
00:17:57,789 --> 00:18:01,869
Explorer when it executes and so that

457
00:17:59,889 --> 00:18:06,158
can can kind of confuse edr a little bit

458
00:18:01,869 --> 00:18:09,519
and the WMI start win32 process common

459
00:18:06,159 --> 00:18:12,940
objects and so I use these comment

460
00:18:09,519 --> 00:18:14,589
phases to execute wmic or register 32 on

461
00:18:12,940 --> 00:18:16,179
the command line to perform one of the

462
00:18:14,589 --> 00:18:19,869
scribbly do or could be two attacks and

463
00:18:16,179 --> 00:18:21,609
this works reasonably well so if we look

464
00:18:19,869 --> 00:18:24,570
at that kind of workflow we would have

465
00:18:21,609 --> 00:18:28,539
something like a HDA or javascript file

466
00:18:24,570 --> 00:18:29,799
which would use the common to face to

467
00:18:28,539 --> 00:18:31,989
call one of these common methods

468
00:18:29,799 --> 00:18:33,158
something like upload create object it

469
00:18:31,989 --> 00:18:35,469
would call wmic

470
00:18:33,159 --> 00:18:38,309
on the command line or register of 32 it

471
00:18:35,469 --> 00:18:41,710
would then retrieve a remotely hosted

472
00:18:38,309 --> 00:18:44,349
stylesheet or a CT file online and

473
00:18:41,710 --> 00:18:45,639
execute them in memory and that worked

474
00:18:44,349 --> 00:18:47,200
that worked pretty well as I said it

475
00:18:45,639 --> 00:18:49,269
kind of completely bypassed Anzhi and

476
00:18:47,200 --> 00:18:51,279
but then I had a little bit of a

477
00:18:49,269 --> 00:18:53,109
revelation in that there might be a

478
00:18:51,279 --> 00:18:57,309
slightly more elegant way to approach

479
00:18:53,109 --> 00:19:01,178
this what I kind of realized was that if

480
00:18:57,309 --> 00:19:02,469
we'd already got access to comm and if

481
00:19:01,179 --> 00:19:04,599
we could find a common space that would

482
00:19:02,469 --> 00:19:06,099
natively process a stylesheet it might

483
00:19:04,599 --> 00:19:08,580
be possible to execute the script lit

484
00:19:06,099 --> 00:19:11,049
directly from windows script host and

485
00:19:08,580 --> 00:19:13,379
and with that in mind I started to kind

486
00:19:11,049 --> 00:19:15,668
of do some research and MSDN looking for

487
00:19:13,379 --> 00:19:19,209
comm interfaces that would actually

488
00:19:15,669 --> 00:19:20,320
allow you to process style sheets and

489
00:19:19,210 --> 00:19:23,589
one of them that were the one that I

490
00:19:20,320 --> 00:19:25,418
identified was the XML Dom interface and

491
00:19:23,589 --> 00:19:28,029
this basically had I'm a transform node

492
00:19:25,419 --> 00:19:29,950
method that could be used to pass either

493
00:19:28,029 --> 00:19:33,399
an inline or remotely hosted XML

494
00:19:29,950 --> 00:19:36,489
stylesheet and execute JavaScript or VB

495
00:19:33,399 --> 00:19:38,018
script sinful trusts the main benefit of

496
00:19:36,489 --> 00:19:39,999
this over the squiggly-doo

497
00:19:38,019 --> 00:19:42,369
and squiggly two attacks is that there's

498
00:19:39,999 --> 00:19:44,139
no kind of command line execution and so

499
00:19:42,369 --> 00:19:45,429
you get to avoid all the indicators that

500
00:19:44,139 --> 00:19:47,919
are associated with the

501
00:19:45,430 --> 00:19:50,020
techniques and also the payload can

502
00:19:47,920 --> 00:19:52,690
actually be very small so it's quite

503
00:19:50,020 --> 00:19:54,639
difficult to distinguish it from you

504
00:19:52,690 --> 00:19:59,890
know legitimate use of this common to

505
00:19:54,640 --> 00:20:01,450
face and I mentioned earlier that Andy

506
00:19:59,890 --> 00:20:02,890
wasn't actually supported and scriptlet

507
00:20:01,450 --> 00:20:04,780
so it wasn't at this time it gave you

508
00:20:02,890 --> 00:20:08,200
full full kind of carte blanche bypass

509
00:20:04,780 --> 00:20:10,780
for Hamsi they did Windows did add

510
00:20:08,200 --> 00:20:11,940
Microsoft did add support for that in

511
00:20:10,780 --> 00:20:15,639
early 2019

512
00:20:11,940 --> 00:20:18,220
and this technique was also used by beau

513
00:20:15,640 --> 00:20:23,560
hops to bypass Windows Defender

514
00:20:18,220 --> 00:20:25,270
application control so what might an

515
00:20:23,560 --> 00:20:26,800
exploit for this kind of thing looked

516
00:20:25,270 --> 00:20:29,340
like worth so here's this very simple

517
00:20:26,800 --> 00:20:32,530
JavaScript example and all its doing is

518
00:20:29,340 --> 00:20:33,310
retrieving in sort of five lines of

519
00:20:32,530 --> 00:20:34,600
JavaScript

520
00:20:33,310 --> 00:20:36,700
it's retrieving the remotely hosted

521
00:20:34,600 --> 00:20:38,469
stylesheet and when it calls the

522
00:20:36,700 --> 00:20:41,110
transform node method it will execute

523
00:20:38,470 --> 00:20:43,450
any JavaScript or VB scripts inside that

524
00:20:41,110 --> 00:20:46,810
stylesheet in full trust so that

525
00:20:43,450 --> 00:20:51,880
basically allowed us to execute a dotnet

526
00:20:46,810 --> 00:20:54,100
tjs payload from from the stylesheet so

527
00:20:51,880 --> 00:20:56,820
if we look at a little example of how

528
00:20:54,100 --> 00:20:56,820
this might look

529
00:21:10,980 --> 00:21:16,170
so I'm using sharpshooter to create a

530
00:21:14,190 --> 00:21:19,220
JavaScript file and I'm telling you that

531
00:21:16,170 --> 00:21:25,040
the stylesheet is hosted on this URL

532
00:21:19,220 --> 00:21:25,040
1002 480 XSL demo

533
00:21:26,180 --> 00:21:30,390
and then I'm just going to host both of

534
00:21:28,530 --> 00:21:32,750
the files on the Cobell strike team

535
00:21:30,390 --> 00:21:32,750
server

536
00:21:46,470 --> 00:21:53,519
and I've got a Windows 10 VM with

537
00:21:49,799 --> 00:22:00,870
Windows Defender turned on updated at

538
00:21:53,519 --> 00:22:02,509
the time and if we browse the HTML file

539
00:22:00,870 --> 00:22:07,070
you can see it serves a JavaScript file

540
00:22:02,509 --> 00:22:10,710
the user opens the JavaScript file and

541
00:22:07,070 --> 00:22:12,899
it fully bypasses our defender and you

542
00:22:10,710 --> 00:22:19,159
can see just appear I look over to it in

543
00:22:12,899 --> 00:22:22,320
a second all those have been triggered

544
00:22:19,159 --> 00:22:25,129
we've fully bypassed and defend oh and

545
00:22:22,320 --> 00:22:25,129
I'm Zee

546
00:22:38,330 --> 00:22:44,179
so as I said that that technique works

547
00:22:40,480 --> 00:22:48,190
reasonably well until Microsoft added MZ

548
00:22:44,180 --> 00:22:50,270
support to scriptlets earlier this year

549
00:22:48,190 --> 00:22:52,700
so let's talk a little bit about some

550
00:22:50,270 --> 00:22:56,960
other bypasses that directly focused on

551
00:22:52,700 --> 00:22:58,880
AM Z well tally Berman discovered quite

552
00:22:56,960 --> 00:23:00,500
a simple little trick essentially

553
00:22:58,880 --> 00:23:03,010
there's a registry key and that's

554
00:23:00,500 --> 00:23:06,740
accessible in the the current user hive

555
00:23:03,010 --> 00:23:09,800
called AM Z enable if this key is set to

556
00:23:06,740 --> 00:23:12,290
1 or sorry it set to 0 then MD is just

557
00:23:09,800 --> 00:23:14,750
completely disabled and so with this in

558
00:23:12,290 --> 00:23:18,020
mind what you can do is basically have a

559
00:23:14,750 --> 00:23:20,570
small harness that will first check

560
00:23:18,020 --> 00:23:23,030
whether the key exists if it doesn't

561
00:23:20,570 --> 00:23:26,060
exist you write it and then you just

562
00:23:23,030 --> 00:23:27,860
reopen your same payload and then on the

563
00:23:26,060 --> 00:23:30,110
second second pass when you open your

564
00:23:27,860 --> 00:23:32,449
payload for the second time on Z is

565
00:23:30,110 --> 00:23:33,669
completely disabled and you get carte

566
00:23:32,450 --> 00:23:36,350
blanche

567
00:23:33,670 --> 00:23:37,760
so payload for the month for that might

568
00:23:36,350 --> 00:23:40,219
look something like this so it's very

569
00:23:37,760 --> 00:23:43,120
simple javascript file and first checks

570
00:23:40,220 --> 00:23:46,220
whether or not the registry key exists

571
00:23:43,120 --> 00:23:47,899
if it doesn't exist because we tried to

572
00:23:46,220 --> 00:23:50,930
read from it it throws an exception so

573
00:23:47,900 --> 00:23:54,740
when we catch the exception we write the

574
00:23:50,930 --> 00:23:57,710
and the key and then we just reopen the

575
00:23:54,740 --> 00:23:59,630
the scripts again and we set it back to

576
00:23:57,710 --> 00:24:03,220
what it was and on the second pass when

577
00:23:59,630 --> 00:24:05,710
we call C scripts it gets full kind of

578
00:24:03,220 --> 00:24:08,810
access with it with OMSI being disabled

579
00:24:05,710 --> 00:24:11,650
so that again you know what still works

580
00:24:08,810 --> 00:24:11,649
today works quite well

581
00:24:12,490 --> 00:24:17,690
another MZ bypass this one was

582
00:24:14,630 --> 00:24:19,190
discovered by James for Shaw he

583
00:24:17,690 --> 00:24:22,550
discovered basically MZ was susceptible

584
00:24:19,190 --> 00:24:24,770
to DLL hijacking and so what James

585
00:24:22,550 --> 00:24:27,530
discovered was that it was possible to

586
00:24:24,770 --> 00:24:29,750
stop and load library from loading the

587
00:24:27,530 --> 00:24:31,850
MZ DLL by convincing it into thinking it

588
00:24:29,750 --> 00:24:35,780
was actually already open the way he did

589
00:24:31,850 --> 00:24:39,080
this was he crated I'm just a copy of W

590
00:24:35,780 --> 00:24:41,389
script XE and just renamed it to MZ DLL

591
00:24:39,080 --> 00:24:44,120
which you can use to you can still

592
00:24:41,390 --> 00:24:46,730
execute on Windows and when he runs the

593
00:24:44,120 --> 00:24:48,949
am Z DLL with the script file load

594
00:24:46,730 --> 00:24:50,900
library would see that that image is

595
00:24:48,950 --> 00:24:51,860
already loaded and it's obviously it

596
00:24:50,900 --> 00:24:54,409
wasn't an GDL

597
00:24:51,860 --> 00:24:55,668
it's actually W script or XE but it

598
00:24:54,409 --> 00:24:57,260
would think about it's already loaded

599
00:24:55,669 --> 00:24:59,960
and it would refuse to load the

600
00:24:57,260 --> 00:25:01,340
legitimate MZ DLL so norm of the

601
00:24:59,960 --> 00:25:04,070
exported DLL functions would be

602
00:25:01,340 --> 00:25:06,470
available am G would fail open and

603
00:25:04,070 --> 00:25:10,850
basically meant that no am G support was

604
00:25:06,470 --> 00:25:12,830
available inside that process probably

605
00:25:10,850 --> 00:25:15,080
one of the most well known mg bypasses

606
00:25:12,830 --> 00:25:17,658
is the mg scam before patch and this one

607
00:25:15,080 --> 00:25:19,549
again was discovered by Talley Berman so

608
00:25:17,659 --> 00:25:20,840
because the OMSI dll's loaded into a

609
00:25:19,549 --> 00:25:23,600
process that you've already got code

610
00:25:20,840 --> 00:25:25,639
execution in and the bypass works simply

611
00:25:23,600 --> 00:25:27,649
by finding and patching the MD scam

612
00:25:25,639 --> 00:25:29,510
before function so this is the function

613
00:25:27,649 --> 00:25:32,768
that's responsible for processing and

614
00:25:29,510 --> 00:25:35,120
scanning the kind of malicious buffer

615
00:25:32,769 --> 00:25:37,220
and basically you would patch it to

616
00:25:35,120 --> 00:25:39,168
return MZ was all clean which means that

617
00:25:37,220 --> 00:25:43,429
AM Z will never actually detect anything

618
00:25:39,169 --> 00:25:45,019
malicious so with this in mind what I

619
00:25:43,429 --> 00:25:46,549
did was I started to add some of these

620
00:25:45,019 --> 00:25:49,130
Angie bypass techniques into

621
00:25:46,549 --> 00:25:51,549
sharpshooter so I'll demonstrate one of

622
00:25:49,130 --> 00:25:51,549
them now

623
00:26:01,920 --> 00:26:04,700
so again

624
00:26:03,320 --> 00:26:07,070
and the kind of thing I'm just creating

625
00:26:04,700 --> 00:26:10,960
the the initial payload hosting it on

626
00:26:07,070 --> 00:26:10,960
the the Kabul strike team server

627
00:26:19,460 --> 00:26:23,120
we've got a Windows 10 IVM here where

628
00:26:21,920 --> 00:26:28,730
you can see the register keys not

629
00:26:23,120 --> 00:26:32,540
currently set your browser to the same

630
00:26:28,730 --> 00:26:36,260
file retrieve a malicious javascript

631
00:26:32,540 --> 00:26:40,370
file an open app you can see it pops up

632
00:26:36,260 --> 00:26:42,890
twice which is the second pass and now

633
00:26:40,370 --> 00:26:44,860
the registry key set there's no there's

634
00:26:42,890 --> 00:26:51,650
been no kind of alerts or anything from

635
00:26:44,860 --> 00:26:54,320
Windows Defender and we've got another

636
00:26:51,650 --> 00:26:58,330
cobots try beacon so again we've got

637
00:26:54,320 --> 00:26:58,330
another kind of full bypass fur farms II

638
00:27:07,649 --> 00:27:12,279
in February this year I added some

639
00:27:10,570 --> 00:27:16,299
additional functionalities sharpshooter

640
00:27:12,279 --> 00:27:18,190
to generate macros and specifically I

641
00:27:16,299 --> 00:27:20,710
added a couple of new templates and the

642
00:27:18,190 --> 00:27:22,690
first one to use the XML Dom technique

643
00:27:20,710 --> 00:27:25,360
that I mentioned earlier with VBA the

644
00:27:22,690 --> 00:27:30,159
second one was to add support for Excel

645
00:27:25,360 --> 00:27:31,899
4 so the excel for trick was kind of

646
00:27:30,159 --> 00:27:33,399
quite interesting this followed on from

647
00:27:31,899 --> 00:27:36,489
some research that was performed by Stan

648
00:27:33,399 --> 00:27:37,899
from Al flank Stan basically discovered

649
00:27:36,490 --> 00:27:40,570
that there was a legacy feature of

650
00:27:37,899 --> 00:27:44,439
Office that allowed you to execute macro

651
00:27:40,570 --> 00:27:47,019
code without without VBA this technique

652
00:27:44,440 --> 00:27:49,299
had long really been forgotten about and

653
00:27:47,019 --> 00:27:51,159
the engine for it didn't actually

654
00:27:49,299 --> 00:27:53,470
support MZ so you didn't really need to

655
00:27:51,159 --> 00:27:57,190
worry about Hamsi and a lot of the EDR

656
00:27:53,470 --> 00:27:59,139
and AV solutions are based on based

657
00:27:57,190 --> 00:28:01,840
their detection around traditional VBA P

658
00:27:59,139 --> 00:28:03,490
code so again this kind of got around a

659
00:28:01,840 --> 00:28:06,850
lot of lot of ideas and we've had a lot

660
00:28:03,490 --> 00:28:08,559
of success with it so to bring this to

661
00:28:06,850 --> 00:28:11,469
sharpshooter I basically added support

662
00:28:08,559 --> 00:28:13,570
to generate silk files and it's

663
00:28:11,470 --> 00:28:15,820
basically you can now create a silk file

664
00:28:13,570 --> 00:28:18,158
that will execute shell code using Excel

665
00:28:15,820 --> 00:28:20,408
and Excel for macro and silk files are

666
00:28:18,159 --> 00:28:22,690
particularly interesting because they

667
00:28:20,409 --> 00:28:24,159
open outside of excels and protective

668
00:28:22,690 --> 00:28:26,559
view sandbox so that means that there's

669
00:28:24,159 --> 00:28:29,260
no there's one less warning really for

670
00:28:26,559 --> 00:28:32,740
the user to for the user experience when

671
00:28:29,260 --> 00:28:36,158
you're targeting them so I've got

672
00:28:32,740 --> 00:28:38,580
another little demo of an Excel for

673
00:28:36,159 --> 00:28:38,580
payload

674
00:28:49,610 --> 00:28:55,229
so with with the the Excel four ones

675
00:28:53,400 --> 00:28:56,910
what you actually have to do is modify

676
00:28:55,230 --> 00:28:59,370
the shell codes and not containing your

677
00:28:56,910 --> 00:29:02,700
bytes so before i do that i'm just using

678
00:28:59,370 --> 00:29:07,760
MSF venom to do it and then sharpshooter

679
00:29:02,700 --> 00:29:07,760
will use the null byte free shell code

680
00:29:08,600 --> 00:29:22,320
so again I'm just hosting this on cobalt

681
00:29:11,190 --> 00:29:26,810
strike team server now we've got Windows

682
00:29:22,320 --> 00:29:34,560
10 p.m. with defender and all the

683
00:29:26,810 --> 00:29:37,710
protections turned on so this time we

684
00:29:34,560 --> 00:29:40,290
get a silk file and when we open the

685
00:29:37,710 --> 00:29:42,690
silk it opens up in Excel and the user

686
00:29:40,290 --> 00:29:45,060
just gets the standard kind of macro

687
00:29:42,690 --> 00:29:50,550
enable content warning when they click

688
00:29:45,060 --> 00:29:52,760
enable content they get the it runs the

689
00:29:50,550 --> 00:29:52,760
shellcode

690
00:29:56,210 --> 00:30:00,120
so as I mentioned we've had a lot of

691
00:29:58,170 --> 00:30:03,450
success with this technique on

692
00:30:00,120 --> 00:30:05,370
engagements because a lot of defector

693
00:30:03,450 --> 00:30:07,400
sections that aim to focus on macro

694
00:30:05,370 --> 00:30:15,540
blocking macros are focused around

695
00:30:07,400 --> 00:30:18,060
detecting VBA so let's talk a little bit

696
00:30:15,540 --> 00:30:20,610
about tradecraft so by default

697
00:30:18,060 --> 00:30:22,710
sharpshooter doesn't actually it's not

698
00:30:20,610 --> 00:30:25,740
intended to be weaponized it doesn't

699
00:30:22,710 --> 00:30:28,050
employ any specific I'm OPSEC tradecraft

700
00:30:25,740 --> 00:30:31,320
and the version that I released was

701
00:30:28,050 --> 00:30:33,180
mainly proof of concept as such there's

702
00:30:31,320 --> 00:30:35,220
there are a number of indicators and

703
00:30:33,180 --> 00:30:37,890
that exists in the default templates

704
00:30:35,220 --> 00:30:38,790
that you might want to address before if

705
00:30:37,890 --> 00:30:42,810
you're going to use this in a real

706
00:30:38,790 --> 00:30:44,159
operation so these these were noted in

707
00:30:42,810 --> 00:30:46,409
the analysis that was performed by a

708
00:30:44,160 --> 00:30:47,700
number of vendors so there's two kind of

709
00:30:46,410 --> 00:30:49,560
really interesting blog post from the

710
00:30:47,700 --> 00:30:50,790
guys accounts EPS and which talk about

711
00:30:49,560 --> 00:30:53,250
some of the things that they hunt for

712
00:30:50,790 --> 00:30:56,399
and the the IOC s that they would hunt

713
00:30:53,250 --> 00:30:57,660
for in this tool and specifically some

714
00:30:56,400 --> 00:31:00,860
of the things that they mentioned are

715
00:30:57,660 --> 00:31:03,150
and the default templates will

716
00:31:00,860 --> 00:31:05,159
what the default payload will allocate

717
00:31:03,150 --> 00:31:08,190
memory for shellcode using the execute

718
00:31:05,160 --> 00:31:09,570
read write page permission which means

719
00:31:08,190 --> 00:31:12,690
that hunters can just search for this

720
00:31:09,570 --> 00:31:14,970
these memory permissions in use it will

721
00:31:12,690 --> 00:31:16,200
execute shellcode in process which means

722
00:31:14,970 --> 00:31:18,330
that you might end up having something

723
00:31:16,200 --> 00:31:22,020
like MSHDA calling out to the Internet

724
00:31:18,330 --> 00:31:23,850
to perform your c2 and then it doesn't

725
00:31:22,020 --> 00:31:25,710
really do any kind of manipulation or

726
00:31:23,850 --> 00:31:28,050
process spawn chains so what you will

727
00:31:25,710 --> 00:31:29,640
have is it will just end up with a

728
00:31:28,050 --> 00:31:33,090
default parent so you could end up

729
00:31:29,640 --> 00:31:35,430
having W script 2xe running as a child

730
00:31:33,090 --> 00:31:37,350
process of chrome de XE so again this is

731
00:31:35,430 --> 00:31:40,890
probably an indicator that something

732
00:31:37,350 --> 00:31:44,340
malicious is going on so how can we kind

733
00:31:40,890 --> 00:31:46,980
of address these well firstly just with

734
00:31:44,340 --> 00:31:49,679
a couple of extra lines of c-sharp we

735
00:31:46,980 --> 00:31:54,150
can modify the permissions that we

736
00:31:49,680 --> 00:31:56,370
allocate for for the shellcode and we

737
00:31:54,150 --> 00:31:59,280
basically specifically try and avoid the

738
00:31:56,370 --> 00:32:01,080
execute we dry permission so what we

739
00:31:59,280 --> 00:32:04,889
would do is firstly allocate the page

740
00:32:01,080 --> 00:32:07,230
using page readwrite then we would write

741
00:32:04,890 --> 00:32:08,880
our shellcode to it we would that using

742
00:32:07,230 --> 00:32:11,850
write process memory we would then reset

743
00:32:08,880 --> 00:32:13,530
the page permissions and to page execute

744
00:32:11,850 --> 00:32:15,840
reads so at no point have we ever been

745
00:32:13,530 --> 00:32:17,340
execute readwrite this means if the

746
00:32:15,840 --> 00:32:19,080
hunters are searching for execute we'd

747
00:32:17,340 --> 00:32:23,399
write they'll never find it it's very

748
00:32:19,080 --> 00:32:25,530
simple we can also avoid some of the

749
00:32:23,400 --> 00:32:28,050
process indicators and by using

750
00:32:25,530 --> 00:32:30,030
injection and so rather than executing

751
00:32:28,050 --> 00:32:32,220
shellcode in process what we can do is

752
00:32:30,030 --> 00:32:34,020
spawn a new process something innocuous

753
00:32:32,220 --> 00:32:35,580
that might normally talk to the internet

754
00:32:34,020 --> 00:32:38,070
for example something like Internet

755
00:32:35,580 --> 00:32:39,840
Explorer we would then inject our

756
00:32:38,070 --> 00:32:41,429
shellcode into it using whatever your

757
00:32:39,840 --> 00:32:43,230
preferred injection technique is whether

758
00:32:41,430 --> 00:32:46,200
that's set thread context great with

759
00:32:43,230 --> 00:32:47,970
many thread whatever you want to do and

760
00:32:46,200 --> 00:32:50,100
then that basically avoid something like

761
00:32:47,970 --> 00:32:51,780
MSHDA talking to the Internet we've just

762
00:32:50,100 --> 00:32:53,969
got IX Internet Explorer talking to the

763
00:32:51,780 --> 00:32:58,379
Internet which kind of blends in a

764
00:32:53,970 --> 00:33:00,000
little bit finally we can avoid those

765
00:32:58,380 --> 00:33:01,500
pesky kind of parent process

766
00:33:00,000 --> 00:33:04,110
relationships using the pee-peed

767
00:33:01,500 --> 00:33:06,150
spoofing technique and essentially when

768
00:33:04,110 --> 00:33:08,699
we create a new process and that we

769
00:33:06,150 --> 00:33:11,340
inject into we can specify an arbitrary

770
00:33:08,700 --> 00:33:13,350
startup info X structure that points to

771
00:33:11,340 --> 00:33:14,220
any arbitrary process so what you would

772
00:33:13,350 --> 00:33:16,260
do is first

773
00:33:14,220 --> 00:33:18,630
gamm for the process idea of something

774
00:33:16,260 --> 00:33:21,480
like explorer.exe get a handle to it

775
00:33:18,630 --> 00:33:23,340
then populate this structure with a

776
00:33:21,480 --> 00:33:26,280
pointer to that handle then spawn the

777
00:33:23,340 --> 00:33:28,320
new process this this writ works really

778
00:33:26,280 --> 00:33:30,658
well and it fools many of the analysis

779
00:33:28,320 --> 00:33:31,980
engines including sis mon we've used it

780
00:33:30,659 --> 00:33:32,909
to bypass the process Bourne

781
00:33:31,980 --> 00:33:33,539
relationships and things like

782
00:33:32,909 --> 00:33:35,940
CrowdStrike

783
00:33:33,539 --> 00:33:38,158
and it basically falls them into

784
00:33:35,940 --> 00:33:41,240
thinking that the pairing process is

785
00:33:38,159 --> 00:33:41,240
actually explore a taxi

786
00:33:41,720 --> 00:33:48,110
so let's our look at a little demo of

787
00:33:44,909 --> 00:33:48,110
some of this tradecraft

788
00:34:02,309 --> 00:34:07,830
so I'm creating a payload and just

789
00:34:05,369 --> 00:34:10,918
hosting it initially and then I'll show

790
00:34:07,830 --> 00:34:14,210
on the end point a breakdown of what

791
00:34:10,918 --> 00:34:14,210
this looks like in prison Sokka

792
00:34:24,159 --> 00:34:29,290
so we've got our defender turned on as

793
00:34:27,110 --> 00:34:29,290
normal

794
00:34:41,060 --> 00:34:53,520
when we open the javascript file let's

795
00:34:49,050 --> 00:34:58,109
just pause that there what we can now

796
00:34:53,520 --> 00:35:00,030
see is rather than W scripts or

797
00:34:58,109 --> 00:35:02,578
equivalent

798
00:35:00,030 --> 00:35:05,520
we've actually got Internet Explorer

799
00:35:02,579 --> 00:35:08,869
running which is hosting our implant and

800
00:35:05,520 --> 00:35:11,820
Internet Explorer is a child process of

801
00:35:08,869 --> 00:35:14,760
explorador XE and so we've actually

802
00:35:11,820 --> 00:35:16,109
fooled proces hacker and I mentioned

803
00:35:14,760 --> 00:35:18,690
before what this works with CrowdStrike

804
00:35:16,109 --> 00:35:21,060
and system on and most of the other kind

805
00:35:18,690 --> 00:35:24,000
of analysis engines we've actually

806
00:35:21,060 --> 00:35:27,480
fooled into thinking Internet Explorer

807
00:35:24,000 --> 00:35:33,240
which is hosting and doing lossy to is

808
00:35:27,480 --> 00:35:36,060
the the child process of Explorer and

809
00:35:33,240 --> 00:35:38,819
just to prove we've we've got full kind

810
00:35:36,060 --> 00:35:40,109
of C - I think I'll just flip to cobalt

811
00:35:38,820 --> 00:35:46,710
strike and you can see we've got the

812
00:35:40,109 --> 00:35:50,960
beacon book so that's a couple of tricks

813
00:35:46,710 --> 00:35:53,960
techniques that you could use to improve

814
00:35:50,960 --> 00:35:53,960
tradecraft

815
00:36:00,630 --> 00:36:06,660
so I spend a couple of minutes just

816
00:36:03,390 --> 00:36:08,520
talking about detection prevention so

817
00:36:06,660 --> 00:36:11,490
how would we approach actually detecting

818
00:36:08,520 --> 00:36:14,580
one of these these payloads well if the

819
00:36:11,490 --> 00:36:16,169
payload is is staged and it's using the

820
00:36:14,580 --> 00:36:18,000
code Dom reflection technique that I

821
00:36:16,170 --> 00:36:19,590
talked about earlier you might think

822
00:36:18,000 --> 00:36:21,060
that the payload is actually compiled in

823
00:36:19,590 --> 00:36:23,700
memory which is actually what I thought

824
00:36:21,060 --> 00:36:25,350
when I was building this tool the reason

825
00:36:23,700 --> 00:36:27,060
for that was and there was one of the

826
00:36:25,350 --> 00:36:28,710
parameters that I used to the past of

827
00:36:27,060 --> 00:36:30,870
the code dump compiler called generating

828
00:36:28,710 --> 00:36:33,180
memory equals true but that parameter

829
00:36:30,870 --> 00:36:33,600
doesn't actually do what you think it

830
00:36:33,180 --> 00:36:35,940
does

831
00:36:33,600 --> 00:36:38,549
oh why thought it does so what it ends

832
00:36:35,940 --> 00:36:40,500
up doing is it stores a copy of the

833
00:36:38,550 --> 00:36:43,980
c-sharp source code in the windows

834
00:36:40,500 --> 00:36:46,620
temporary directory for short spell it

835
00:36:43,980 --> 00:36:49,200
then calls out to CSC directs C which is

836
00:36:46,620 --> 00:36:51,660
bundled with the.net framework compiles

837
00:36:49,200 --> 00:36:55,169
it on the host as a DLL and then loads

838
00:36:51,660 --> 00:36:56,549
it into memory so as a defender you can

839
00:36:55,170 --> 00:36:58,680
kind of monitor for this kind of

840
00:36:56,550 --> 00:37:02,400
behavior and using things like command

841
00:36:58,680 --> 00:37:03,720
line logging looking for CSC 2xe C C

842
00:37:02,400 --> 00:37:05,850
sharp scripts getting written to the

843
00:37:03,720 --> 00:37:08,069
Windows 10 folder and there is like a

844
00:37:05,850 --> 00:37:11,069
way to kind of get around this I'm using

845
00:37:08,070 --> 00:37:12,300
using the Rosalind compiler shops you

846
00:37:11,070 --> 00:37:14,730
doesn't support that but and it's only

847
00:37:12,300 --> 00:37:18,120
available in later versions of the that

848
00:37:14,730 --> 00:37:20,340
framework if the palos using something

849
00:37:18,120 --> 00:37:22,259
like DNS delivery and the way the DNS

850
00:37:20,340 --> 00:37:24,990
delivery works is it calls out to

851
00:37:22,260 --> 00:37:28,260
nslookup XE on the command line and to

852
00:37:24,990 --> 00:37:30,689
retrieve text records the reason it uses

853
00:37:28,260 --> 00:37:32,460
this this technique for nslookup is

854
00:37:30,690 --> 00:37:34,950
because version 3 of the dotnet

855
00:37:32,460 --> 00:37:38,160
framework doesn't have a native library

856
00:37:34,950 --> 00:37:40,410
to do dns text lookups so if you're a

857
00:37:38,160 --> 00:37:41,640
defender you can and you see and you've

858
00:37:40,410 --> 00:37:44,430
got command line logging in place with

859
00:37:41,640 --> 00:37:46,290
something like this one and you see lots

860
00:37:44,430 --> 00:37:48,810
of nslookup taxis being called then

861
00:37:46,290 --> 00:37:51,570
potentially something malicious is

862
00:37:48,810 --> 00:37:54,060
happening as a defender you can also

863
00:37:51,570 --> 00:37:56,190
monitor for monitor the registry for

864
00:37:54,060 --> 00:37:59,190
modifications to things like the MZ

865
00:37:56,190 --> 00:38:00,930
enable registry key because this is not

866
00:37:59,190 --> 00:38:05,430
really likely to happen on a workstation

867
00:38:00,930 --> 00:38:08,879
through everyday usage in terms of

868
00:38:05,430 --> 00:38:10,230
prevention there are you know some

869
00:38:08,880 --> 00:38:12,560
really powerful kind of prevention

870
00:38:10,230 --> 00:38:14,490
strategies probably the most effective

871
00:38:12,560 --> 00:38:17,340
is quite a stringent

872
00:38:14,490 --> 00:38:18,990
device guard code integrity policy and

873
00:38:17,340 --> 00:38:21,720
so you can use this to limit script

874
00:38:18,990 --> 00:38:24,000
execution to only sign scripts you could

875
00:38:21,720 --> 00:38:26,520
have application whitelisting which will

876
00:38:24,000 --> 00:38:29,100
block things like MSHDA or w script or

877
00:38:26,520 --> 00:38:31,680
CSC most users might not necessarily

878
00:38:29,100 --> 00:38:33,270
need to run these you could use group

879
00:38:31,680 --> 00:38:35,190
policy to change the default handlers

880
00:38:33,270 --> 00:38:36,780
for I'm some of the scripts in file

881
00:38:35,190 --> 00:38:40,140
formats so for example you could

882
00:38:36,780 --> 00:38:43,860
associate Jas or HDA with notepad rather

883
00:38:40,140 --> 00:38:46,529
than MSHDA or W script or just a

884
00:38:43,860 --> 00:38:48,810
combination of all these on the network

885
00:38:46,530 --> 00:38:50,430
level obviously if you've gotten DNS

886
00:38:48,810 --> 00:38:53,490
monitoring in place you can look for

887
00:38:50,430 --> 00:38:59,430
signs of DNS c2 because they are quite

888
00:38:53,490 --> 00:39:01,740
easy to spot you could monitor for HTML

889
00:38:59,430 --> 00:39:03,299
smuggling using by detecting files that

890
00:39:01,740 --> 00:39:04,740
are using the web crypto API is although

891
00:39:03,300 --> 00:39:10,170
it's probably prone to false positives

892
00:39:04,740 --> 00:39:12,330
so to wrap up conclusions and the

893
00:39:10,170 --> 00:39:14,670
windows script host provides quite a few

894
00:39:12,330 --> 00:39:16,740
powerful file formats and some

895
00:39:14,670 --> 00:39:18,950
interesting opportunities for initial

896
00:39:16,740 --> 00:39:21,930
access if you leverage these with com

897
00:39:18,950 --> 00:39:24,990
you can harness them using code

898
00:39:21,930 --> 00:39:28,080
execution cradles with scriptlets and

899
00:39:24,990 --> 00:39:32,270
execution of you know wmic register 32

900
00:39:28,080 --> 00:39:32,270
those types of application whitelisting

901
00:39:33,380 --> 00:39:38,280
weaponized tools can raise some ethical

902
00:39:36,930 --> 00:39:40,140
dilemmas particularly when they get

903
00:39:38,280 --> 00:39:42,570
observed in the wild after I released

904
00:39:40,140 --> 00:39:46,529
this tool and Microsoft did a big

905
00:39:42,570 --> 00:39:50,280
blogpost on real actors that they'd seen

906
00:39:46,530 --> 00:39:52,200
using it in the wild and they used it to

907
00:39:50,280 --> 00:39:55,530
actually disrupt two particular malware

908
00:39:52,200 --> 00:39:57,390
campaigns in June last year and they

909
00:39:55,530 --> 00:40:00,930
also acknowledged this kind of

910
00:39:57,390 --> 00:40:02,580
researchers providing an opportunity for

911
00:40:00,930 --> 00:40:04,440
them to raise the bar in their detection

912
00:40:02,580 --> 00:40:06,270
and improve their products so I do think

913
00:40:04,440 --> 00:40:07,619
there are some kind of positives to come

914
00:40:06,270 --> 00:40:09,390
out over thread the Red Team research

915
00:40:07,619 --> 00:40:11,130
and Red Team tooling because it gives

916
00:40:09,390 --> 00:40:15,000
you that opportunity to raise the bar at

917
00:40:11,130 --> 00:40:17,490
scale and then finally if you are

918
00:40:15,000 --> 00:40:18,869
interested in downloading or using one

919
00:40:17,490 --> 00:40:22,379
of these tools and an engagement it's

920
00:40:18,869 --> 00:40:24,420
available on our github repo just a

921
00:40:22,380 --> 00:40:27,810
quick thanks as well to all the people

922
00:40:24,420 --> 00:40:28,320
whose research I used or whose tools

923
00:40:27,810 --> 00:40:30,299
that I

924
00:40:28,320 --> 00:40:31,650
Road I would recommend going following

925
00:40:30,300 --> 00:40:34,980
these guys on Twitter because they will

926
00:40:31,650 --> 00:40:37,560
release a lot of interesting stuff and I

927
00:40:34,980 --> 00:40:38,940
think stand from the outflank team he's

928
00:40:37,560 --> 00:40:40,200
got some colleagues here they're talking

929
00:40:38,940 --> 00:40:43,530
this afternoon so I'd recommend going

930
00:40:40,200 --> 00:40:45,480
and listen to their talk as well finally

931
00:40:43,530 --> 00:40:48,200
we've got a couple of minutes left for

932
00:40:45,480 --> 00:40:48,200
any questions

933
00:40:49,740 --> 00:41:05,868
[Applause]

934
00:40:59,950 --> 00:41:13,368
no questions okay oh one question

935
00:41:05,869 --> 00:41:17,119
someone's waving sorry yeah course camp

936
00:41:13,369 --> 00:41:20,470
there you go yeah follow these guys they

937
00:41:17,119 --> 00:41:20,470
do what's more interesting stuff than me

938
00:41:22,900 --> 00:41:32,359
okay I think any of this this questions

939
00:41:28,280 --> 00:41:34,400
from do you use go compiled binaries not

940
00:41:32,359 --> 00:41:36,560
usually no but I can kind of guess who

941
00:41:34,400 --> 00:41:40,970
which go fanboy you might have asked me

942
00:41:36,560 --> 00:41:43,900
that one thanks Rio no more questions

943
00:41:40,970 --> 00:41:50,299
okay thanks thank you very much

944
00:41:43,900 --> 00:41:50,300
[Applause]

