1
00:00:05,180 --> 00:00:12,149
so good afternoon thank you for coming

2
00:00:09,179 --> 00:00:14,429
here to this introduction to IOT reverse

3
00:00:12,150 --> 00:00:17,070
engineering with an example on a home

4
00:00:14,429 --> 00:00:18,840
router I know that the time after lunch

5
00:00:17,070 --> 00:00:20,880
is the most easily be time of the day so

6
00:00:18,840 --> 00:00:23,539
I hope you will find this presentation

7
00:00:20,880 --> 00:00:26,580
interesting enough to keep you awake

8
00:00:23,539 --> 00:00:29,240
my name is Valerio Dijon Pietro I am an

9
00:00:26,580 --> 00:00:31,619
Italian I am passionate about

10
00:00:29,240 --> 00:00:33,989
electronics and technology since when I

11
00:00:31,619 --> 00:00:36,059
was a child for this reason I studied

12
00:00:33,989 --> 00:00:38,820
electronic engineering at University and

13
00:00:36,059 --> 00:00:41,849
started working as a digital hardware

14
00:00:38,820 --> 00:00:43,649
designer but soon I moved to a unique

15
00:00:41,850 --> 00:00:47,219
system at the ministration position and

16
00:00:43,649 --> 00:00:49,469
later to an IT infrastructure manager

17
00:00:47,219 --> 00:00:52,230
position managing servers but on the

18
00:00:49,469 --> 00:00:55,289
cloud and on-premise managing storage

19
00:00:52,230 --> 00:00:59,940
networking databases and so on I am also

20
00:00:55,289 --> 00:01:03,359
a Linux enthusiast since 1993 my

21
00:00:59,940 --> 00:01:06,090
personal home page is Valerio written as

22
00:01:03,359 --> 00:01:07,920
valor dot IO you will find a copy of

23
00:01:06,090 --> 00:01:10,350
this presentation and more important

24
00:01:07,920 --> 00:01:13,350
links to everything I will talk about

25
00:01:10,350 --> 00:01:16,619
today my email address is Valerio

26
00:01:13,350 --> 00:01:19,140
written is v8 lair dot io and my twitter

27
00:01:16,619 --> 00:01:22,619
handle is Valerio being a nerd I am

28
00:01:19,140 --> 00:01:25,500
quite proud of these addresses what we

29
00:01:22,619 --> 00:01:27,330
will talk about today I will start with

30
00:01:25,500 --> 00:01:29,280
the short introduction about reverse

31
00:01:27,330 --> 00:01:31,439
engineering and then describe the

32
00:01:29,280 --> 00:01:32,880
reverse engineering process based on

33
00:01:31,439 --> 00:01:35,669
informational gatoring

34
00:01:32,880 --> 00:01:38,149
building an emulation environment using

35
00:01:35,670 --> 00:01:41,400
came where to run interesting IOT

36
00:01:38,150 --> 00:01:44,159
binaries then analyzing out the device

37
00:01:41,400 --> 00:01:50,100
work and then at the end modify the

38
00:01:44,159 --> 00:01:52,079
firmware that is our target what is to

39
00:01:50,100 --> 00:01:54,479
define reverse engineering we have to

40
00:01:52,079 --> 00:01:56,669
first define what engineering is we can

41
00:01:54,479 --> 00:01:59,729
say that engineering is the science of

42
00:01:56,670 --> 00:02:02,549
making things that starts with the

43
00:01:59,729 --> 00:02:04,560
product requirements continue the

44
00:02:02,549 --> 00:02:06,740
designing the product and finish

45
00:02:04,560 --> 00:02:09,660
building or manufacturing the product

46
00:02:06,740 --> 00:02:12,030
the reverse engineering process is

47
00:02:09,660 --> 00:02:13,390
exactly the same process but done in

48
00:02:12,030 --> 00:02:16,330
reverse order and

49
00:02:13,390 --> 00:02:18,730
usually with the limited scope so we

50
00:02:16,330 --> 00:02:21,640
start from the product manufactured by

51
00:02:18,730 --> 00:02:25,209
someone else we analyze the product we

52
00:02:21,640 --> 00:02:29,109
take measurements and we reconstruct the

53
00:02:25,209 --> 00:02:31,840
design and the requirements in our home

54
00:02:29,110 --> 00:02:34,360
router example the limited scope is to

55
00:02:31,840 --> 00:02:37,780
understand how to modify the router

56
00:02:34,360 --> 00:02:42,370
firmer to add features and additional

57
00:02:37,780 --> 00:02:44,170
programs will start with informational

58
00:02:42,370 --> 00:02:46,420
catering the first information we need

59
00:02:44,170 --> 00:02:49,269
is who makes the device in this example

60
00:02:46,420 --> 00:02:52,030
it is the d-link that makes the device

61
00:02:49,270 --> 00:02:54,430
and but we also want to know if there is

62
00:02:52,030 --> 00:02:57,489
an original design manufacturer because

63
00:02:54,430 --> 00:03:00,760
sometimes a company makes the device but

64
00:02:57,489 --> 00:03:03,790
another company is designed and

65
00:03:00,760 --> 00:03:06,040
developed the firmware of the device we

66
00:03:03,790 --> 00:03:08,620
start opening the case trying to

67
00:03:06,040 --> 00:03:11,170
identify the main device components and

68
00:03:08,620 --> 00:03:13,630
we are especially interested and it is

69
00:03:11,170 --> 00:03:17,230
very important to the word and the JTAG

70
00:03:13,630 --> 00:03:20,320
interfaces at at the end we want to get

71
00:03:17,230 --> 00:03:25,179
the firmware and the root filesystem of

72
00:03:20,320 --> 00:03:26,950
the device we increase case in this

73
00:03:25,180 --> 00:03:29,829
example we open the case I start to

74
00:03:26,950 --> 00:03:31,899
looking at the mainboard top you can see

75
00:03:29,829 --> 00:03:34,060
that it's not easy to identify each

76
00:03:31,900 --> 00:03:37,299
electronic device because some devices

77
00:03:34,060 --> 00:03:40,420
are hidden below that black it's ink and

78
00:03:37,299 --> 00:03:42,579
also below that metal sheet used to

79
00:03:40,420 --> 00:03:45,369
shield radio frequencies anyway we are

80
00:03:42,579 --> 00:03:47,920
able to identify some devices and in

81
00:03:45,370 --> 00:03:51,579
this case we are able to identify the

82
00:03:47,920 --> 00:03:54,578
the word that is clearly market on the

83
00:03:51,579 --> 00:03:56,890
PCB I wasn't able to confirm the

84
00:03:54,579 --> 00:03:59,680
position of the JTAG interface in this

85
00:03:56,890 --> 00:04:01,750
case looking at the bottom of the board

86
00:03:59,680 --> 00:04:03,660
that we can identify some additional

87
00:04:01,750 --> 00:04:06,610
devices like for example the NAND flash

88
00:04:03,660 --> 00:04:08,260
device in the Y file module but I wasn't

89
00:04:06,610 --> 00:04:11,769
able to identify the system on a chip

90
00:04:08,260 --> 00:04:14,730
maybe it is even below that metal sheet

91
00:04:11,769 --> 00:04:17,168
used to shield the radio frequencies

92
00:04:14,730 --> 00:04:19,358
locating the what interface is very very

93
00:04:17,168 --> 00:04:21,700
important on the right you can see the

94
00:04:19,358 --> 00:04:24,430
word position on some machine and all

95
00:04:21,700 --> 00:04:26,409
sports we the first step we start the

96
00:04:24,430 --> 00:04:27,210
searching on internet to see if someone

97
00:04:26,410 --> 00:04:30,180
else is

98
00:04:27,210 --> 00:04:33,419
the job before us identifying the word

99
00:04:30,180 --> 00:04:35,639
interface on our device otherwise we

100
00:04:33,419 --> 00:04:38,698
have to identify potential serial

101
00:04:35,639 --> 00:04:41,340
headers candidates sometimes these are

102
00:04:38,699 --> 00:04:43,919
market on the PC basic screen so it easy

103
00:04:41,340 --> 00:04:47,008
to identify but otherwise we have to

104
00:04:43,919 --> 00:04:51,299
identify four pins that are power ground

105
00:04:47,009 --> 00:04:53,490
TX and rx we can use a multimeter to

106
00:04:51,300 --> 00:04:56,160
find potential candidates it is easy

107
00:04:53,490 --> 00:04:59,910
with the multimeter to identify power a

108
00:04:56,160 --> 00:05:02,960
ground TX usually is a pull-up resistor

109
00:04:59,910 --> 00:05:05,610
and rx usually is an AI impedance input

110
00:05:02,960 --> 00:05:08,310
we can also if we know the system on a

111
00:05:05,610 --> 00:05:12,210
chip and if we have its datasheet we can

112
00:05:08,310 --> 00:05:15,300
identify the word interface on the chip

113
00:05:12,210 --> 00:05:18,210
on the ship itself and try to follow the

114
00:05:15,300 --> 00:05:21,570
PCB traces this this is not easy to the

115
00:05:18,210 --> 00:05:24,000
multi-layer board we can also use tools

116
00:05:21,570 --> 00:05:27,030
like jtagulator a calculator is a

117
00:05:24,000 --> 00:05:29,669
fantastic piece of tool it is it has a

118
00:05:27,030 --> 00:05:32,729
lot of headers that we can attach to

119
00:05:29,669 --> 00:05:35,969
potential headers candidates but for the

120
00:05:32,729 --> 00:05:38,969
earth and for JTAG interface it can run

121
00:05:35,970 --> 00:05:41,820
some automatic scanning logic and it is

122
00:05:38,970 --> 00:05:45,900
able to identify the pin out of the word

123
00:05:41,820 --> 00:05:47,789
or over the JTAG interface we can also

124
00:05:45,900 --> 00:05:51,210
use an oscilloscope or a logic analyzer

125
00:05:47,789 --> 00:05:53,550
to locate the TX pin because for sure

126
00:05:51,210 --> 00:05:55,948
during a boot something will be written

127
00:05:53,550 --> 00:05:58,770
on the seller console and this pin will

128
00:05:55,949 --> 00:06:01,949
go up and down but maybe it is a bit

129
00:05:58,770 --> 00:06:04,229
overkill we also want to locate the JTAG

130
00:06:01,949 --> 00:06:07,259
interface the JTAG interface is an

131
00:06:04,229 --> 00:06:09,419
intern into standard for testing printed

132
00:06:07,259 --> 00:06:12,030
circuit boards after manufacture and

133
00:06:09,419 --> 00:06:15,719
allows access to many internal signals

134
00:06:12,030 --> 00:06:18,239
of complex integrated circuits it also

135
00:06:15,720 --> 00:06:20,940
allows access to read the right to flash

136
00:06:18,240 --> 00:06:22,740
memory content and can be used as a

137
00:06:20,940 --> 00:06:26,340
primary means for any in-circuit

138
00:06:22,740 --> 00:06:28,800
emulator multiple devices are daisy

139
00:06:26,340 --> 00:06:31,169
chained together and each one of them

140
00:06:28,800 --> 00:06:35,430
can be accessed using the geotag

141
00:06:31,169 --> 00:06:37,830
interface it is four or five signal pins

142
00:06:35,430 --> 00:06:41,169
that are test clock this that I mean

143
00:06:37,830 --> 00:06:43,508
they started out this mode select and

144
00:06:41,169 --> 00:06:45,758
resid test resset is optional because we

145
00:06:43,509 --> 00:06:49,210
can reset the interface also using the

146
00:06:45,759 --> 00:06:51,610
other pins to locate the position of the

147
00:06:49,210 --> 00:06:53,710
JTAG interface is not easy because there

148
00:06:51,610 --> 00:06:55,479
is a non-standard pin out but anyway

149
00:06:53,710 --> 00:06:57,669
there are a few popular pin outs that

150
00:06:55,479 --> 00:06:59,590
are available on the oral shown on the

151
00:06:57,669 --> 00:07:02,529
slide on the right side you can see some

152
00:06:59,590 --> 00:07:04,029
examples of popular pin outs so the

153
00:07:02,529 --> 00:07:05,620
first step is always to search on

154
00:07:04,029 --> 00:07:08,349
Internet to see if someone else has

155
00:07:05,620 --> 00:07:11,229
already identified the position of the

156
00:07:08,349 --> 00:07:14,080
track interface in our device otherwise

157
00:07:11,229 --> 00:07:17,949
we start looking for adders labeled t ck

158
00:07:14,080 --> 00:07:21,159
t di t do and TMS but if no label has

159
00:07:17,949 --> 00:07:24,249
been found we have to look for potential

160
00:07:21,159 --> 00:07:27,639
pin headers candidates arranged in a row

161
00:07:24,249 --> 00:07:33,370
of five or six pin or in a double row of

162
00:07:27,639 --> 00:07:35,800
ten 14 or 20 pins we can use a

163
00:07:33,370 --> 00:07:40,120
multimeter to identify power ground this

164
00:07:35,800 --> 00:07:42,699
is easy we know that TMS and TDI usually

165
00:07:40,120 --> 00:07:45,210
they have a pull-up resistor the test

166
00:07:42,699 --> 00:07:48,250
receipt can be pulled up or pull it down

167
00:07:45,210 --> 00:07:49,839
tto should be.i impedance so with the

168
00:07:48,250 --> 00:07:52,599
multimeter we can try to identify

169
00:07:49,839 --> 00:07:55,360
someone as a mortise pin then match what

170
00:07:52,599 --> 00:07:58,120
we found with popular pin outs and this

171
00:07:55,360 --> 00:08:01,539
way try to identify the pin out of the

172
00:07:58,120 --> 00:08:02,770
JTAG interface otherwise we can if we

173
00:08:01,539 --> 00:08:06,099
know the system ownership in this

174
00:08:02,770 --> 00:08:08,049
datasheet as before we can identify the

175
00:08:06,099 --> 00:08:09,699
position of the JTAG interface of the

176
00:08:08,050 --> 00:08:13,569
system on a chip and try to follow the

177
00:08:09,699 --> 00:08:17,349
PCB traces or we can use tools like Jada

178
00:08:13,569 --> 00:08:19,930
kool-aid or as seen before after we have

179
00:08:17,349 --> 00:08:22,149
identified these interfaces we have to

180
00:08:19,930 --> 00:08:24,789
repopulate them this means to attach

181
00:08:22,149 --> 00:08:26,770
adders to these interfaces using a

182
00:08:24,789 --> 00:08:30,248
disordering pump and a soldering iron

183
00:08:26,770 --> 00:08:32,919
and then use a connector in this case it

184
00:08:30,249 --> 00:08:36,039
is it a USB TTLs serial adapter to

185
00:08:32,919 --> 00:08:38,318
connect the IOT device to the PC with a

186
00:08:36,039 --> 00:08:40,240
terminal emulator running running putti

187
00:08:38,318 --> 00:08:42,760
but why you want to repopulate interface

188
00:08:40,240 --> 00:08:45,579
say why we are so interested in the in

189
00:08:42,760 --> 00:08:48,639
TC 2 interfaces the word is really

190
00:08:45,579 --> 00:08:50,739
really important because it allows us to

191
00:08:48,639 --> 00:08:53,500
watch what is printed on the serial

192
00:08:50,740 --> 00:08:55,330
console during the boot and T's allows

193
00:08:53,500 --> 00:08:57,250
us to identify

194
00:08:55,330 --> 00:09:00,280
the bootloader and operating system

195
00:08:57,250 --> 00:09:03,400
version because I want to modify the

196
00:09:00,280 --> 00:09:05,589
firmware I can also watch what is it is

197
00:09:03,400 --> 00:09:08,620
printed on the serial console during the

198
00:09:05,590 --> 00:09:11,020
upgrade cycle and maybe get some

199
00:09:08,620 --> 00:09:13,780
information on how the upgrade is done

200
00:09:11,020 --> 00:09:15,819
we have to use a neo submitted TTL

201
00:09:13,780 --> 00:09:18,370
cellular doctor and the terminal

202
00:09:15,820 --> 00:09:22,060
terminal emulator on a PC like for

203
00:09:18,370 --> 00:09:25,510
example booty we also are interested in

204
00:09:22,060 --> 00:09:30,060
the JTAG interface because it allows us

205
00:09:25,510 --> 00:09:33,160
to read the farmer from the flash EEPROM

206
00:09:30,060 --> 00:09:36,160
allows us also to break into the boot

207
00:09:33,160 --> 00:09:39,219
cycle and use the JTAG interface as a

208
00:09:36,160 --> 00:09:41,800
means to do in circuit debugging to do

209
00:09:39,220 --> 00:09:44,800
so we able to attach a board like bus

210
00:09:41,800 --> 00:09:47,020
pilot to the JTAG interface and we have

211
00:09:44,800 --> 00:09:49,660
to use an open source software like open

212
00:09:47,020 --> 00:09:51,550
OCD to damper the flash EEPROM and to do

213
00:09:49,660 --> 00:09:57,100
insecurity debugging any way to do this

214
00:09:51,550 --> 00:09:59,020
kind of things is really really hard the

215
00:09:57,100 --> 00:10:01,450
last step of information gathering is to

216
00:09:59,020 --> 00:10:03,010
get the firmware file we always follow

217
00:10:01,450 --> 00:10:05,170
the easiest part first

218
00:10:03,010 --> 00:10:07,420
this means that if the supplier is a

219
00:10:05,170 --> 00:10:09,280
website with the firmware updates we go

220
00:10:07,420 --> 00:10:12,310
and download the firmware file from

221
00:10:09,280 --> 00:10:15,040
there if the firmware update can be

222
00:10:12,310 --> 00:10:17,290
downloaded directly only by the device

223
00:10:15,040 --> 00:10:19,120
we can sniff the communication with the

224
00:10:17,290 --> 00:10:22,209
Wireshark and get to the firmware file

225
00:10:19,120 --> 00:10:24,040
if the above steps are not available we

226
00:10:22,210 --> 00:10:27,190
have to download their from image

227
00:10:24,040 --> 00:10:31,120
through the JTAG interface using a bus

228
00:10:27,190 --> 00:10:32,740
pilot and open on CD once we have the

229
00:10:31,120 --> 00:10:34,420
firmware file in this case I downloaded

230
00:10:32,740 --> 00:10:36,670
the firmware file from the supplier

231
00:10:34,420 --> 00:10:39,760
website we want to have some information

232
00:10:36,670 --> 00:10:41,650
from this firmware file on Linux we can

233
00:10:39,760 --> 00:10:45,040
use the file command but this tells us

234
00:10:41,650 --> 00:10:46,930
that we have just a data file but there

235
00:10:45,040 --> 00:10:49,240
is a very good piece of software that is

236
00:10:46,930 --> 00:10:50,650
been walk bin work is able to scan

237
00:10:49,240 --> 00:10:52,990
inside a data file

238
00:10:50,650 --> 00:10:55,240
searching a lot of different signatures

239
00:10:52,990 --> 00:10:57,490
of many file system images or image

240
00:10:55,240 --> 00:10:59,950
pictures of digital certificates or

241
00:10:57,490 --> 00:11:02,890
compressed data and so on in this case

242
00:10:59,950 --> 00:11:06,310
bill bin walked tells us that we have j

243
00:11:02,890 --> 00:11:09,390
FF s 2 file system image and exhibit

244
00:11:06,310 --> 00:11:11,849
compressor the data segment jmf through

245
00:11:09,390 --> 00:11:14,340
stands for journaling flash file system

246
00:11:11,850 --> 00:11:17,370
version to ant is quite popular in

247
00:11:14,340 --> 00:11:20,370
embedded device with named flash flash

248
00:11:17,370 --> 00:11:23,940
file system we are also interested to

249
00:11:20,370 --> 00:11:25,560
extract the content from the flat from

250
00:11:23,940 --> 00:11:28,050
the file system image because we want to

251
00:11:25,560 --> 00:11:31,109
see the root file system to extract the

252
00:11:28,050 --> 00:11:33,689
content we need the Jefferson program to

253
00:11:31,110 --> 00:11:37,410
install on our Linux machine because the

254
00:11:33,690 --> 00:11:39,480
jmf to file system runs on top of the

255
00:11:37,410 --> 00:11:41,880
empty driver that operates differently

256
00:11:39,480 --> 00:11:44,760
from the block device driver and cannot

257
00:11:41,880 --> 00:11:47,160
be loop mounted but once we have

258
00:11:44,760 --> 00:11:50,340
installed Jefferson we can use beam wall

259
00:11:47,160 --> 00:11:53,010
to recursively extract the content of

260
00:11:50,340 --> 00:11:55,230
the thermal file in this case with the -

261
00:11:53,010 --> 00:11:59,280
II option we can see that beam walk

262
00:11:55,230 --> 00:12:01,680
extract the first file that it extracted

263
00:11:59,280 --> 00:12:04,170
is the good zip at the data segment that

264
00:12:01,680 --> 00:12:06,689
is at our archive containing some

265
00:12:04,170 --> 00:12:10,560
packages on board specific packages the

266
00:12:06,690 --> 00:12:13,680
second file 200 . j FF s2 is the file

267
00:12:10,560 --> 00:12:16,079
system image and the third folder GFS 2

268
00:12:13,680 --> 00:12:18,540
- root is the filesystem image that has

269
00:12:16,080 --> 00:12:22,200
been regularly extracted into the file

270
00:12:18,540 --> 00:12:24,150
system looking at what was extracted it

271
00:12:22,200 --> 00:12:25,980
seems that we have a tree file system in

272
00:12:24,150 --> 00:12:28,620
reality we haven't only - this is a

273
00:12:25,980 --> 00:12:30,330
glitch of the Jefferson program the

274
00:12:28,620 --> 00:12:32,460
first file system is the boot file

275
00:12:30,330 --> 00:12:36,000
system we have we seek it that we have

276
00:12:32,460 --> 00:12:38,820
two files one is CF Irama dot 0 0 that

277
00:12:36,000 --> 00:12:41,910
it is the boot order image based on the

278
00:12:38,820 --> 00:12:44,820
Broadcom common firmer environment the

279
00:12:41,910 --> 00:12:48,060
second file is the Linux kernel in an

280
00:12:44,820 --> 00:12:50,580
unusual cfv compressed format if we

281
00:12:48,060 --> 00:12:53,160
start looking at other files and start

282
00:12:50,580 --> 00:12:55,770
doing some file system analysis we can

283
00:12:53,160 --> 00:12:58,020
see that the system is based on busybox

284
00:12:55,770 --> 00:13:01,050
using the strings command we can also

285
00:12:58,020 --> 00:13:02,970
identify the busybox version busybox is

286
00:13:01,050 --> 00:13:06,359
quite popular in embedded devices

287
00:13:02,970 --> 00:13:08,040
because in a single binary it it

288
00:13:06,360 --> 00:13:10,100
implements a lot of different

289
00:13:08,040 --> 00:13:16,020
functionalities like the init process

290
00:13:10,100 --> 00:13:18,900
the bash interpreter LS grep and in many

291
00:13:16,020 --> 00:13:20,610
many other device using the cross to

292
00:13:18,900 --> 00:13:22,740
Train read F command we can also

293
00:13:20,610 --> 00:13:23,279
understand that the system is based on

294
00:13:22,740 --> 00:13:27,660
moosie

295
00:13:23,279 --> 00:13:30,019
you see mu syllabus e is also quite

296
00:13:27,660 --> 00:13:33,180
popular in embedded devices because it

297
00:13:30,019 --> 00:13:35,129
implements a lot of functionality of the

298
00:13:33,180 --> 00:13:37,949
Liberty library almost everything the

299
00:13:35,129 --> 00:13:40,379
the the newly BC implements but which

300
00:13:37,949 --> 00:13:42,748
are much much smaller footprint we can

301
00:13:40,379 --> 00:13:44,790
also look at our other libraries for

302
00:13:42,749 --> 00:13:49,259
example the Lib decrypt library and

303
00:13:44,790 --> 00:13:51,389
other libraries in their version so now

304
00:13:49,259 --> 00:13:53,339
we that we have done some preliminary

305
00:13:51,389 --> 00:13:56,339
analysis we can attach the cellar

306
00:13:53,339 --> 00:13:58,559
console to the PC running putti and we

307
00:13:56,339 --> 00:14:00,629
power power up the board they start

308
00:13:58,559 --> 00:14:02,819
looking at what is printed on the serial

309
00:14:00,629 --> 00:14:05,910
console during boot we can confirm that

310
00:14:02,819 --> 00:14:09,360
the bootloader is is a CF v we can also

311
00:14:05,910 --> 00:14:11,759
identify its version we can have the

312
00:14:09,360 --> 00:14:14,370
chip ID in this case it is a Broadcom

313
00:14:11,759 --> 00:14:16,709
chip it is there are no so many

314
00:14:14,370 --> 00:14:18,600
information about the chip on the

315
00:14:16,709 --> 00:14:20,819
internet probably is a custom-made chip

316
00:14:18,600 --> 00:14:23,459
because the Brautigan allows is a

317
00:14:20,819 --> 00:14:25,550
customer to build chips putting together

318
00:14:23,459 --> 00:14:29,279
a processor core and some other devices

319
00:14:25,550 --> 00:14:31,500
but anyway we know that it is it is a

320
00:14:29,279 --> 00:14:36,449
processor core that it is an ARM Cortex

321
00:14:31,500 --> 00:14:40,290
a9 dual-core cpu running at 1 gigahertz

322
00:14:36,449 --> 00:14:43,979
we also can identify that it is 256

323
00:14:40,290 --> 00:14:47,279
megabytes of RAM in 256 megabytes of

324
00:14:43,980 --> 00:14:49,769
flesh a prom we can also identify the

325
00:14:47,279 --> 00:14:54,930
Linux kernel version that it is 3.4

326
00:14:49,769 --> 00:14:57,180
point 11 with real-time pages 19 the

327
00:14:54,930 --> 00:14:59,609
instruction set is the arm v7

328
00:14:57,180 --> 00:15:02,309
instruction set and the jmf through file

329
00:14:59,610 --> 00:15:04,740
system among other things supports the

330
00:15:02,309 --> 00:15:07,949
non-standard feature that is the lzma

331
00:15:04,740 --> 00:15:12,720
compression we can also identify how the

332
00:15:07,949 --> 00:15:15,719
named flesh is a partition and we can

333
00:15:12,720 --> 00:15:19,319
also confirm that busybox

334
00:15:15,720 --> 00:15:22,920
is the init process and that the first

335
00:15:19,319 --> 00:15:25,349
script started is the LCS script this is

336
00:15:22,920 --> 00:15:28,410
according to the init tab configuration

337
00:15:25,350 --> 00:15:31,379
file during boot we can also identify

338
00:15:28,410 --> 00:15:33,600
the string epicentro software version if

339
00:15:31,379 --> 00:15:35,429
we search on the internet for this

340
00:15:33,600 --> 00:15:36,499
string we can identify the original

341
00:15:35,429 --> 00:15:39,348
design

342
00:15:36,499 --> 00:15:41,779
so this router was made by the link but

343
00:15:39,349 --> 00:15:46,729
the firmer was developed by a swiss

344
00:15:41,779 --> 00:15:49,459
company called ADB so summarizing what

345
00:15:46,729 --> 00:15:53,089
we has found till now we found that our

346
00:15:49,459 --> 00:15:56,179
router is based on an arm ab7 cortex and

347
00:15:53,089 --> 00:15:59,689
multi-core processor that is 256

348
00:15:56,179 --> 00:16:02,389
megabytes of anand flesh that use a

349
00:15:59,689 --> 00:16:05,329
linux kernel that was released on in

350
00:16:02,389 --> 00:16:06,589
2012 this router started shipping in

351
00:16:05,329 --> 00:16:11,118
2018

352
00:16:06,589 --> 00:16:13,759
so it is a 6 years old Linux kernel we

353
00:16:11,119 --> 00:16:15,649
can also identify the version of other

354
00:16:13,759 --> 00:16:18,319
components like new syllabus II was

355
00:16:15,649 --> 00:16:21,619
released in 2012 busybox

356
00:16:18,319 --> 00:16:24,709
in 2010 Liberty crypt was released in

357
00:16:21,619 --> 00:16:27,679
2009 and we also identified that the

358
00:16:24,709 --> 00:16:30,289
original design manufacturer was ADB as

359
00:16:27,679 --> 00:16:33,468
you can see we have all the software or

360
00:16:30,289 --> 00:16:35,509
a new device we can ask why this happens

361
00:16:33,469 --> 00:16:37,819
probably because the the maker tried to

362
00:16:35,509 --> 00:16:41,299
save some money reusing something that

363
00:16:37,819 --> 00:16:43,728
it already is or maybe reusing some

364
00:16:41,299 --> 00:16:45,858
software development development kit

365
00:16:43,729 --> 00:16:48,049
that was released by the chip

366
00:16:45,859 --> 00:16:50,239
manufacturer anyway from a security

367
00:16:48,049 --> 00:16:53,059
point of view this is quite bad because

368
00:16:50,239 --> 00:16:55,039
we have a new device with all the

369
00:16:53,059 --> 00:16:56,719
software potentially with all the

370
00:16:55,039 --> 00:17:01,970
software with some unpatch with the

371
00:16:56,720 --> 00:17:03,499
vulnerabilities now that we have done we

372
00:17:01,970 --> 00:17:05,990
finished the information gathering

373
00:17:03,499 --> 00:17:07,610
process we can start to build an

374
00:17:05,990 --> 00:17:09,500
emulation environment we won't want to

375
00:17:07,609 --> 00:17:13,609
build an emulation environment where to

376
00:17:09,500 --> 00:17:15,919
run IOT binaries which we have to choose

377
00:17:13,609 --> 00:17:18,378
an emulation system to emulate first of

378
00:17:15,919 --> 00:17:20,899
all to emulate our processor and we use

379
00:17:18,378 --> 00:17:24,500
K mu K mu is a fantastic tool that

380
00:17:20,898 --> 00:17:27,648
emulates a lot of different type of CPU

381
00:17:24,500 --> 00:17:30,470
and a lot of different boards in this

382
00:17:27,648 --> 00:17:33,799
case we choose the we express a 9 board

383
00:17:30,470 --> 00:17:36,500
with the cortex a9 processor that it's

384
00:17:33,799 --> 00:17:41,899
the same CPU is the one in our IOT

385
00:17:36,500 --> 00:17:44,419
device but we not only need to emulate

386
00:17:41,899 --> 00:17:45,709
the processor we also need a kernel and

387
00:17:44,419 --> 00:17:47,869
a root filesystem

388
00:17:45,710 --> 00:17:49,340
to emulate our environment we could

389
00:17:47,869 --> 00:17:50,120
think of building everything by

390
00:17:49,340 --> 00:17:52,668
ourselves

391
00:17:50,120 --> 00:17:55,250
cross-compiling everything but it is an

392
00:17:52,669 --> 00:17:57,440
almost impossible task because of a lot

393
00:17:55,250 --> 00:18:00,110
of interdependencies among packages

394
00:17:57,440 --> 00:18:02,270
libraries device drivers and so on so we

395
00:18:00,110 --> 00:18:05,449
able to choose a build system there are

396
00:18:02,270 --> 00:18:07,820
open source very popular build system

397
00:18:05,450 --> 00:18:10,610
the most popular one is the Yocto

398
00:18:07,820 --> 00:18:13,039
project it is very powerful it not only

399
00:18:10,610 --> 00:18:16,250
builds a root filesystem and a kernel

400
00:18:13,039 --> 00:18:18,408
but it is also able to build a custom

401
00:18:16,250 --> 00:18:21,710
Linux distribution with an included

402
00:18:18,409 --> 00:18:24,250
package manager but its main drawback is

403
00:18:21,710 --> 00:18:26,779
that it is a steep learning curve

404
00:18:24,250 --> 00:18:29,029
another popular build system is build

405
00:18:26,779 --> 00:18:32,179
root it builds only the root filesystem

406
00:18:29,029 --> 00:18:33,830
and kernel but it is easy and fast to

407
00:18:32,179 --> 00:18:34,520
learn and there is a very good user

408
00:18:33,830 --> 00:18:37,789
manual

409
00:18:34,520 --> 00:18:40,940
another popular build system is open wrt

410
00:18:37,789 --> 00:18:43,570
later renamed it leader it is tailored

411
00:18:40,940 --> 00:18:47,000
to build a replacement or outer firmer

412
00:18:43,570 --> 00:18:49,039
but the documentation is cut red in the

413
00:18:47,000 --> 00:18:51,409
website and it requires more time to

414
00:18:49,039 --> 00:18:54,890
learn compared to build the root for

415
00:18:51,409 --> 00:18:57,529
this reason in my home project I choose

416
00:18:54,890 --> 00:18:59,929
the Builder root choosing builder root

417
00:18:57,529 --> 00:19:02,210
is not enough we want to have a root

418
00:18:59,929 --> 00:19:04,279
filesystem that is computed compatible

419
00:19:02,210 --> 00:19:06,559
with what we have on IOT device because

420
00:19:04,279 --> 00:19:08,659
we were want to run IOT device binaries

421
00:19:06,559 --> 00:19:10,730
so we are also able to choose a builder

422
00:19:08,659 --> 00:19:13,159
root version because we want to have a

423
00:19:10,730 --> 00:19:15,830
root filesystem and it is based on same

424
00:19:13,159 --> 00:19:17,990
components that we have on the IOT

425
00:19:15,830 --> 00:19:21,049
device aw it has to be based on the same

426
00:19:17,990 --> 00:19:23,690
syllabus aversion it must have a

427
00:19:21,049 --> 00:19:26,620
compatible Liberty crypt carpet crypto

428
00:19:23,690 --> 00:19:28,940
library he must have the same kernel and

429
00:19:26,620 --> 00:19:33,469
also other libraries should have

430
00:19:28,940 --> 00:19:36,380
compatible version on on on what we have

431
00:19:33,470 --> 00:19:38,480
on the our IOT device so the Builder

432
00:19:36,380 --> 00:19:42,159
root aversion to use is build the root

433
00:19:38,480 --> 00:19:44,690
that was released on February 12 2014

434
00:19:42,159 --> 00:19:47,720
unfortunately due to the dependency hell

435
00:19:44,690 --> 00:19:49,940
this version doesn't run on a recent

436
00:19:47,720 --> 00:19:53,809
Linux distribution so it doesn't run on

437
00:19:49,940 --> 00:19:56,450
Ubuntu 1604 or Ubuntu 1804 so we have to

438
00:19:53,809 --> 00:19:58,370
use an older Linux distribution that is

439
00:19:56,450 --> 00:20:01,220
more or less the same age as the other

440
00:19:58,370 --> 00:20:02,809
components that was released so we can

441
00:20:01,220 --> 00:20:03,560
use they been with Z that was released

442
00:20:02,809 --> 00:20:06,320
in 2000

443
00:20:03,560 --> 00:20:08,950
13 and we will run teas in a docker

444
00:20:06,320 --> 00:20:12,139
container using docker as a light a

445
00:20:08,950 --> 00:20:13,940
virtualization environment so we have to

446
00:20:12,140 --> 00:20:15,920
build a docker file for docker container

447
00:20:13,940 --> 00:20:18,260
this is a minimal they've done with the

448
00:20:15,920 --> 00:20:20,240
container with just the packages needed

449
00:20:18,260 --> 00:20:24,650
to run build the root docker file is

450
00:20:20,240 --> 00:20:26,990
available on my github repository the

451
00:20:24,650 --> 00:20:29,120
important thing when we run docker is

452
00:20:26,990 --> 00:20:32,270
three important choices we map the

453
00:20:29,120 --> 00:20:35,060
temporary x11 folder in the author of

454
00:20:32,270 --> 00:20:36,950
the Oz machine inside the same position

455
00:20:35,060 --> 00:20:39,800
in the docker machine this is to be able

456
00:20:36,950 --> 00:20:42,860
to run graphical programs in the docker

457
00:20:39,800 --> 00:20:45,169
machine as for example the make X config

458
00:20:42,860 --> 00:20:47,419
command we also map at the home

459
00:20:45,170 --> 00:20:48,980
directory in the host machine inside the

460
00:20:47,420 --> 00:20:51,470
same position in the local machine and

461
00:20:48,980 --> 00:20:53,570
we map user name and user read in the

462
00:20:51,470 --> 00:20:55,490
auto machine to the same user name user

463
00:20:53,570 --> 00:20:57,560
read in the docker machine in this way

464
00:20:55,490 --> 00:21:01,160
we can have a system with for example

465
00:20:57,560 --> 00:21:04,460
two windows one it is the host window

466
00:21:01,160 --> 00:21:07,250
running a boon to 18:04 and the other

467
00:21:04,460 --> 00:21:09,770
one is the docker machine running debian

468
00:21:07,250 --> 00:21:12,410
with z but the two windows share exactly

469
00:21:09,770 --> 00:21:15,980
the same home directory and exactly the

470
00:21:12,410 --> 00:21:20,360
same username and userid using the the

471
00:21:15,980 --> 00:21:23,090
shredding of information files build

472
00:21:20,360 --> 00:21:26,149
route must also be configured B because

473
00:21:23,090 --> 00:21:29,209
we want to build this root filesystem as

474
00:21:26,150 --> 00:21:31,640
we want so the configuration starts with

475
00:21:29,210 --> 00:21:33,590
the ship at the configuration file

476
00:21:31,640 --> 00:21:36,530
sheephead with the build route that is

477
00:21:33,590 --> 00:21:38,389
based on our emulated bore that is the

478
00:21:36,530 --> 00:21:40,820
be expressed board but we able to do

479
00:21:38,390 --> 00:21:42,290
some modification the most important

480
00:21:40,820 --> 00:21:44,780
modifications that we want to build

481
00:21:42,290 --> 00:21:46,430
packages a ladder is with debugging

482
00:21:44,780 --> 00:21:49,490
symbols and other debugging information

483
00:21:46,430 --> 00:21:51,350
because we want to be able to run IOT

484
00:21:49,490 --> 00:21:54,680
binaries in our environment they want to

485
00:21:51,350 --> 00:21:57,320
be able to use the new debugger and at

486
00:21:54,680 --> 00:21:59,450
least we can put breakpoints on library

487
00:21:57,320 --> 00:22:01,939
functions entry and we can understand

488
00:21:59,450 --> 00:22:06,380
what the bynars do looking at what

489
00:22:01,940 --> 00:22:08,870
library function function calls and what

490
00:22:06,380 --> 00:22:11,930
are the parameters use the in this

491
00:22:08,870 --> 00:22:14,330
function calls we also want to build

492
00:22:11,930 --> 00:22:17,330
debugging tools like GDB GDB server and

493
00:22:14,330 --> 00:22:19,580
so on and we as be able to include

494
00:22:17,330 --> 00:22:22,070
for the men to flesh in the jmf stew

495
00:22:19,580 --> 00:22:24,740
file system we also able to include

496
00:22:22,070 --> 00:22:28,010
other libraries use it in the entirety

497
00:22:24,740 --> 00:22:31,580
device we also have to do some minor

498
00:22:28,010 --> 00:22:34,280
kernel configuration basically we select

499
00:22:31,580 --> 00:22:36,260
the same board with the vestry support

500
00:22:34,280 --> 00:22:38,690
we select the preemptable kernel as in

501
00:22:36,260 --> 00:22:40,430
our IET device we have to include the

502
00:22:38,690 --> 00:22:42,170
name the device the support and support

503
00:22:40,430 --> 00:22:43,880
for Linda Fletcher simulator and

504
00:22:42,170 --> 00:22:46,820
obviously we have to included support

505
00:22:43,880 --> 00:22:49,130
for the jf2 file system with lzma

506
00:22:46,820 --> 00:22:50,480
compression we also have to do some

507
00:22:49,130 --> 00:22:52,970
minor or configuration for the MU

508
00:22:50,480 --> 00:22:54,590
syllabus II this is the result of trial

509
00:22:52,970 --> 00:22:57,190
there for example we were able to

510
00:22:54,590 --> 00:23:00,409
include a native POSIX trading and so on

511
00:22:57,190 --> 00:23:03,080
and we also able to include some debug

512
00:23:00,410 --> 00:23:04,790
to include the back knee symbols also in

513
00:23:03,080 --> 00:23:07,070
the mo syllabus C configuration you do

514
00:23:04,790 --> 00:23:08,570
some quirks in this configuration we

515
00:23:07,070 --> 00:23:12,620
able to do in it some more complicated

516
00:23:08,570 --> 00:23:14,870
way I go fast because I have to be short

517
00:23:12,620 --> 00:23:19,969
shorter than originally anticipated

518
00:23:14,870 --> 00:23:22,729
sorry because we want to replace the

519
00:23:19,970 --> 00:23:25,640
firmer the original idea is to modify

520
00:23:22,730 --> 00:23:28,550
the firmware file to load the firmer

521
00:23:25,640 --> 00:23:30,680
using the normal upgrade process so we

522
00:23:28,550 --> 00:23:32,930
want to analyze the upgrade process on

523
00:23:30,680 --> 00:23:34,970
the IOT device we start the upgrade

524
00:23:32,930 --> 00:23:37,550
process using the web interface and

525
00:23:34,970 --> 00:23:40,940
start looking at what is printed on the

526
00:23:37,550 --> 00:23:42,889
serial console during the upgrade in

527
00:23:40,940 --> 00:23:44,750
this case we can see that is printed and

528
00:23:42,890 --> 00:23:47,450
Sarah consult at the script that the

529
00:23:44,750 --> 00:23:50,570
start is upgrade prepare dot SH but then

530
00:23:47,450 --> 00:23:54,050
the script upgraded SH is started it

531
00:23:50,570 --> 00:23:57,470
prints signature okay so this means that

532
00:23:54,050 --> 00:24:00,169
the firmware file is assigned then a

533
00:23:57,470 --> 00:24:02,210
flesh aerosol command is a command is

534
00:24:00,170 --> 00:24:04,700
executed to erase the third partition

535
00:24:02,210 --> 00:24:07,610
T's is the partition dedicated to the

536
00:24:04,700 --> 00:24:10,610
firmware upgrade and then the DD command

537
00:24:07,610 --> 00:24:13,159
is used to extract the root and boot

538
00:24:10,610 --> 00:24:15,199
file system from the firmware file and

539
00:24:13,160 --> 00:24:18,800
the nan the write command is used to

540
00:24:15,200 --> 00:24:22,760
write this booter root filesystem to the

541
00:24:18,800 --> 00:24:26,060
nand flash device after T is some kernel

542
00:24:22,760 --> 00:24:28,490
module does a partition split on the fly

543
00:24:26,060 --> 00:24:31,460
and create two new partitions that are

544
00:24:28,490 --> 00:24:33,770
both FS 2 and the root FS June

545
00:24:31,460 --> 00:24:36,980
looking at parameters in the DD command

546
00:24:33,770 --> 00:24:38,600
we can identify where in the former file

547
00:24:36,980 --> 00:24:43,490
the boot a root filesystem

548
00:24:38,600 --> 00:24:45,980
are located we can see that some

549
00:24:43,490 --> 00:24:48,290
packages are added in the new root

550
00:24:45,980 --> 00:24:50,630
filesystem these packages were included

551
00:24:48,290 --> 00:24:53,780
in the zip at the compressor data inside

552
00:24:50,630 --> 00:24:57,050
the firmware file and then the boot

553
00:24:53,780 --> 00:24:59,030
order is written again in the in the

554
00:24:57,050 --> 00:25:03,590
flesh Abram and then the router is

555
00:24:59,030 --> 00:25:06,470
rebooted so summarizing very shortly the

556
00:25:03,590 --> 00:25:08,270
most important script to analyze to be

557
00:25:06,470 --> 00:25:11,420
able to understand how the per grade

558
00:25:08,270 --> 00:25:14,780
farmer works and how we can modify the

559
00:25:11,420 --> 00:25:17,870
firmware is upgraded SH the firmware

560
00:25:14,780 --> 00:25:19,760
file is assigned at the signature is

561
00:25:17,870 --> 00:25:21,860
checkered with the sig and the score

562
00:25:19,760 --> 00:25:23,390
verify binary that is included in the

563
00:25:21,860 --> 00:25:26,120
root filesystem

564
00:25:23,390 --> 00:25:27,860
of the router the booty root filesystem

565
00:25:26,120 --> 00:25:30,830
are written a single and the write

566
00:25:27,860 --> 00:25:33,290
operation some kernel module is used to

567
00:25:30,830 --> 00:25:35,120
split the partition on-the-fly some

568
00:25:33,290 --> 00:25:36,950
other kernel module is used to delimit

569
00:25:35,120 --> 00:25:39,739
the end of the root file system

570
00:25:36,950 --> 00:25:43,280
partition some additional packages are

571
00:25:39,740 --> 00:25:46,040
added at the end based on on bore type

572
00:25:43,280 --> 00:25:48,230
and the bootloader at the end is written

573
00:25:46,040 --> 00:25:51,409
on the nand flash and the system is

574
00:25:48,230 --> 00:25:55,400
rebooted so if we want to modify the

575
00:25:51,410 --> 00:25:57,560
firmware we have seen that the firmware

576
00:25:55,400 --> 00:25:59,810
file is a signature so we want to

577
00:25:57,560 --> 00:26:02,419
understand if we can fake the signature

578
00:25:59,810 --> 00:26:04,700
to be able to load our own of famer file

579
00:26:02,420 --> 00:26:07,520
because the signature is checkered with

580
00:26:04,700 --> 00:26:11,390
the second score verify binary we want

581
00:26:07,520 --> 00:26:13,790
to we want to execute this command in

582
00:26:11,390 --> 00:26:16,520
our emulated environment to understand

583
00:26:13,790 --> 00:26:19,399
what it does and to understand if we can

584
00:26:16,520 --> 00:26:21,889
fake the signature second score verify

585
00:26:19,400 --> 00:26:24,380
is all other binaries in the router is a

586
00:26:21,890 --> 00:26:26,450
stupid binary it is no debugging

587
00:26:24,380 --> 00:26:28,690
information but it calls library

588
00:26:26,450 --> 00:26:31,760
functions so the idea is to run it is

589
00:26:28,690 --> 00:26:35,120
acceptable in our emulation environment

590
00:26:31,760 --> 00:26:39,050
and putting a breakpoint on each library

591
00:26:35,120 --> 00:26:41,750
function entry we can have a list of all

592
00:26:39,050 --> 00:26:43,820
library functions called by the sig

593
00:26:41,750 --> 00:26:45,180
verify binary with the cross store chain

594
00:26:43,820 --> 00:26:47,280
read elf command

595
00:26:45,180 --> 00:26:49,380
the shown parameters in this case we

596
00:26:47,280 --> 00:26:53,760
have a list of all the library function

597
00:26:49,380 --> 00:26:58,230
calls we can run a ciggy verify you know

598
00:26:53,760 --> 00:27:01,650
the bugger using the DB DB server in the

599
00:26:58,230 --> 00:27:04,470
emulated environment and the cross to

600
00:27:01,650 --> 00:27:06,840
change DB in the author system these two

601
00:27:04,470 --> 00:27:08,910
will talk together and on those the

602
00:27:06,840 --> 00:27:10,980
system the gdb will do the hard work of

603
00:27:08,910 --> 00:27:15,060
showing the breakpoint variable contents

604
00:27:10,980 --> 00:27:17,240
source code and so on doing this kind of

605
00:27:15,060 --> 00:27:20,159
analysis it is possible to clearly

606
00:27:17,240 --> 00:27:23,610
understand what sig underscore verified

607
00:27:20,160 --> 00:27:25,770
us just looking at the library function

608
00:27:23,610 --> 00:27:28,979
calls that it does basically it reads

609
00:27:25,770 --> 00:27:32,040
the last 256 bytes from the ephemeral

610
00:27:28,980 --> 00:27:35,550
file this is the signature then it

611
00:27:32,040 --> 00:27:37,490
calculates the sherwin checksum of the

612
00:27:35,550 --> 00:27:40,770
firmware file using the Liberty crypt

613
00:27:37,490 --> 00:27:42,990
library functions then it calls other

614
00:27:40,770 --> 00:27:45,510
Liberty crypt library functions to check

615
00:27:42,990 --> 00:27:48,480
the C to verify the signature passing as

616
00:27:45,510 --> 00:27:52,860
parameter the sherwin message digests

617
00:27:48,480 --> 00:27:55,860
calculated passing the signature and the

618
00:27:52,860 --> 00:27:58,770
public key the signature is the original

619
00:27:55,860 --> 00:28:01,620
ish a one message digest encrypted with

620
00:27:58,770 --> 00:28:03,840
the private key and the public key is

621
00:28:01,620 --> 00:28:06,870
used to decrypt the signature and to see

622
00:28:03,840 --> 00:28:10,230
if it matches with the calculated a

623
00:28:06,870 --> 00:28:13,469
sha-1 message digest if it does it

624
00:28:10,230 --> 00:28:18,270
returns okay otherwise it returns an

625
00:28:13,470 --> 00:28:20,760
error the public key is based on two big

626
00:28:18,270 --> 00:28:23,850
integers or multi version integers that

627
00:28:20,760 --> 00:28:26,250
are called models and exponent using the

628
00:28:23,850 --> 00:28:28,530
new debugger we can this we can dump

629
00:28:26,250 --> 00:28:31,230
these two big integers from memory

630
00:28:28,530 --> 00:28:33,590
and we reconstruct the public key in the

631
00:28:31,230 --> 00:28:36,330
standard dot pam format but

632
00:28:33,590 --> 00:28:39,090
unfortunately the private key remains

633
00:28:36,330 --> 00:28:41,070
unknown so it's not positive and it's

634
00:28:39,090 --> 00:28:44,399
not included in Reuters certificate

635
00:28:41,070 --> 00:28:47,189
files as expected so this means

636
00:28:44,400 --> 00:28:49,770
basically that we it's not possible to

637
00:28:47,190 --> 00:28:52,140
modify the firmware using the standard

638
00:28:49,770 --> 00:28:54,600
Firma upgrade process because we don't

639
00:28:52,140 --> 00:28:57,300
know the private key and we cannot fake

640
00:28:54,600 --> 00:28:58,919
the signature so we able to find another

641
00:28:57,300 --> 00:29:01,050
way

642
00:28:58,920 --> 00:29:02,640
so we start finding another way we can

643
00:29:01,050 --> 00:29:05,639
see that the in this case the router

644
00:29:02,640 --> 00:29:07,890
allows an telnet SSH connection but

645
00:29:05,640 --> 00:29:10,980
present a Cisco like restricted shell

646
00:29:07,890 --> 00:29:13,440
Cisco like means that if we type help we

647
00:29:10,980 --> 00:29:16,830
have a list of all available comments

648
00:29:13,440 --> 00:29:18,720
the comments are also out of completed

649
00:29:16,830 --> 00:29:24,240
and if you type a question mark all the

650
00:29:18,720 --> 00:29:26,550
options are shown but that's all annal I

651
00:29:24,240 --> 00:29:29,130
don't doing some file system analysis we

652
00:29:26,550 --> 00:29:31,470
can understand that it is restricted the

653
00:29:29,130 --> 00:29:35,250
shell is based on an open source project

654
00:29:31,470 --> 00:29:37,410
that is called clash analyzing the

655
00:29:35,250 --> 00:29:39,780
startup script we can understand that

656
00:29:37,410 --> 00:29:44,100
the configuration file files are located

657
00:29:39,780 --> 00:29:46,800
inside a select MP / Krish directory and

658
00:29:44,100 --> 00:29:50,100
this is a link that points to a folder

659
00:29:46,800 --> 00:29:52,169
in normal mode and to another folder in

660
00:29:50,100 --> 00:29:55,860
factory mode so we can start analyzing

661
00:29:52,170 --> 00:29:59,010
the startup script for example in normal

662
00:29:55,860 --> 00:30:01,949
mode to see if we can find something

663
00:29:59,010 --> 00:30:04,320
interesting inside in this case we find

664
00:30:01,950 --> 00:30:07,050
interesting command inside that is

665
00:30:04,320 --> 00:30:08,820
factory mode this is an even command it

666
00:30:07,050 --> 00:30:11,310
then means that if you type L it's not

667
00:30:08,820 --> 00:30:13,590
shown and it is not also how to

668
00:30:11,310 --> 00:30:15,300
completed the pressing tab because of

669
00:30:13,590 --> 00:30:18,389
this this means that it is an

670
00:30:15,300 --> 00:30:22,020
interesting command so we execute this

671
00:30:18,390 --> 00:30:24,840
command and the Reuters enters the

672
00:30:22,020 --> 00:30:26,100
factory mode and reboots factory mode is

673
00:30:24,840 --> 00:30:28,800
a special mode do we have a non-normal

674
00:30:26,100 --> 00:30:31,560
Wi-Fi no internet connection or the DHCP

675
00:30:28,800 --> 00:30:33,659
server and so on but it is an

676
00:30:31,560 --> 00:30:36,929
interesting comment it is a privilege

677
00:30:33,660 --> 00:30:38,550
with a non privileged reddish relogin so

678
00:30:36,930 --> 00:30:41,640
it is the system shell command that

679
00:30:38,550 --> 00:30:44,490
gives us a normal linux shell this is a

680
00:30:41,640 --> 00:30:47,130
normal user linux shell so we cannot

681
00:30:44,490 --> 00:30:50,270
modify the system but we can explore the

682
00:30:47,130 --> 00:30:53,550
system so our target is to become a root

683
00:30:50,270 --> 00:30:55,050
so we start looking for process for

684
00:30:53,550 --> 00:31:00,540
processes running with the root

685
00:30:55,050 --> 00:31:03,060
privileges trying to find some something

686
00:31:00,540 --> 00:31:05,760
to act to become rope to become root so

687
00:31:03,060 --> 00:31:08,370
with we start identifying each process

688
00:31:05,760 --> 00:31:10,350
and exec tables we can use the strengths

689
00:31:08,370 --> 00:31:12,250
command to see the strings inside the in

690
00:31:10,350 --> 00:31:15,730
this case identify

691
00:31:12,250 --> 00:31:18,640
what this product is a process does and

692
00:31:15,730 --> 00:31:20,590
is a version we can also try to run at

693
00:31:18,640 --> 00:31:23,530
these executables in the target itself

694
00:31:20,590 --> 00:31:27,520
or in dominated the environment with -

695
00:31:23,530 --> 00:31:29,830
v4 version or mine - h4 ALP command to

696
00:31:27,520 --> 00:31:32,559
identify the program in this version in

697
00:31:29,830 --> 00:31:35,590
this case in this way we can identify

698
00:31:32,559 --> 00:31:37,720
all open-source executables and their

699
00:31:35,590 --> 00:31:40,570
version and we can search the internet

700
00:31:37,720 --> 00:31:43,360
for known vulnerabilities for the

701
00:31:40,570 --> 00:31:46,240
specific executable version if some

702
00:31:43,360 --> 00:31:49,120
vulnerability is found we have to check

703
00:31:46,240 --> 00:31:51,669
that this vulnerabilities is exploitable

704
00:31:49,120 --> 00:31:54,668
in the specific IOT device configuration

705
00:31:51,669 --> 00:31:57,730
because often we have vulnerabilities

706
00:31:54,669 --> 00:32:01,419
that are exploitable only under certain

707
00:31:57,730 --> 00:32:03,610
circumstances if no exploitable

708
00:32:01,419 --> 00:32:05,650
vulnerability has been found as in this

709
00:32:03,610 --> 00:32:07,928
case we able to select a process

710
00:32:05,650 --> 00:32:09,850
candidate to reverse engineer in our

711
00:32:07,929 --> 00:32:12,940
emulated environment to find

712
00:32:09,850 --> 00:32:15,039
vulnerabilities operating system

713
00:32:12,940 --> 00:32:17,169
binaries with non owner abilities are

714
00:32:15,039 --> 00:32:19,390
hard to crack because if nobody else

715
00:32:17,169 --> 00:32:21,270
have already found the vulnerability it

716
00:32:19,390 --> 00:32:24,190
will be difficult for us to find one

717
00:32:21,270 --> 00:32:27,059
lower level stuff like stuff related to

718
00:32:24,190 --> 00:32:29,380
DNS or VoIP or other special devices

719
00:32:27,059 --> 00:32:31,480
usually are more difficult to crack

720
00:32:29,380 --> 00:32:33,039
because they do one specific thing and

721
00:32:31,480 --> 00:32:36,190
they have a smaller

722
00:32:33,039 --> 00:32:38,289
attack surface higher level executables

723
00:32:36,190 --> 00:32:40,720
like with the bigger configuration files

724
00:32:38,289 --> 00:32:42,940
usually are less difficult to crack

725
00:32:40,720 --> 00:32:46,179
because they have a larger attack

726
00:32:42,940 --> 00:32:47,530
surface analyzing the process the most

727
00:32:46,179 --> 00:32:50,110
interesting one is the configuration

728
00:32:47,530 --> 00:32:52,418
management process it runs as route in

729
00:32:50,110 --> 00:32:54,729
background 8 it does all the root

730
00:32:52,419 --> 00:32:57,270
configuration changes like adding new

731
00:32:54,730 --> 00:33:01,830
users configuring the DHCP server

732
00:32:57,270 --> 00:33:01,830
changing router address and so on

733
00:33:02,010 --> 00:33:07,330
analyzing startup scripts and executing

734
00:33:05,650 --> 00:33:09,340
a cm in the emulation environment we can

735
00:33:07,330 --> 00:33:12,399
discover that this process use shell

736
00:33:09,340 --> 00:33:14,709
scripts to carry out its duties on the

737
00:33:12,400 --> 00:33:19,059
router there is also the CM client

738
00:33:14,710 --> 00:33:22,179
command that is executed by as a normal

739
00:33:19,059 --> 00:33:24,610
user by the web interface and by the

740
00:33:22,179 --> 00:33:26,080
restricted shell that talks to the

741
00:33:24,610 --> 00:33:29,409
background CM pro

742
00:33:26,080 --> 00:33:32,080
to do the change in this way

743
00:33:29,410 --> 00:33:34,620
it seems the the router seems

744
00:33:32,080 --> 00:33:36,909
well-designed because in this way only

745
00:33:34,620 --> 00:33:41,379
permitted the configuration trains are

746
00:33:36,910 --> 00:33:43,630
allowed but cm are doing filesystem

747
00:33:41,380 --> 00:33:46,780
analysis we can see that cm client is

748
00:33:43,630 --> 00:33:49,870
used in startup scripts to configure the

749
00:33:46,780 --> 00:33:52,899
CM process so in a startup script there

750
00:33:49,870 --> 00:33:54,939
is for example that command that tells

751
00:33:52,900 --> 00:33:57,580
through the same process flawed all the

752
00:33:54,940 --> 00:34:00,250
same ml configuration files I will label

753
00:33:57,580 --> 00:34:02,590
in that folder in that folder one of

754
00:34:00,250 --> 00:34:05,830
this configuration file is management

755
00:34:02,590 --> 00:34:08,310
dot XML but others are similar that is

756
00:34:05,830 --> 00:34:10,840
inside it is interesting snippet when

757
00:34:08,310 --> 00:34:16,409
basically to tells to the same process

758
00:34:10,840 --> 00:34:20,500
to use the users dot SH script to change

759
00:34:16,409 --> 00:34:23,230
users properties or to add new user so

760
00:34:20,500 --> 00:34:27,929
the idea is we can copy the management

761
00:34:23,230 --> 00:34:30,190
dot XML in our own folder modify it

762
00:34:27,929 --> 00:34:32,260
reconfigure the CM process using the

763
00:34:30,190 --> 00:34:35,950
same Claude client the trans is a normal

764
00:34:32,260 --> 00:34:39,250
user we can modify inside the fake

765
00:34:35,949 --> 00:34:42,069
management XML just to execute not the

766
00:34:39,250 --> 00:34:45,418
standard user dot SH but our own version

767
00:34:42,070 --> 00:34:48,400
that we call fake users dot SH that does

768
00:34:45,418 --> 00:34:50,259
same thing as the original but just with

769
00:34:48,400 --> 00:34:53,080
the few instruction to modify the H

770
00:34:50,260 --> 00:34:56,919
password file to remove the root

771
00:34:53,080 --> 00:35:00,220
password we can then trigger the

772
00:34:56,918 --> 00:35:02,379
execution of accusers dot SH it will be

773
00:35:00,220 --> 00:35:05,109
executed by the same process as rune as

774
00:35:02,380 --> 00:35:07,690
a root and we'll be able to modify the

775
00:35:05,110 --> 00:35:11,740
edge password file we can put together

776
00:35:07,690 --> 00:35:15,280
all these steps in a in a script and

777
00:35:11,740 --> 00:35:19,359
then we can copy this script on the as a

778
00:35:15,280 --> 00:35:23,020
normal user on the device we can make in

779
00:35:19,360 --> 00:35:26,440
the device is a script executable we can

780
00:35:23,020 --> 00:35:30,820
run this script and having removed the

781
00:35:26,440 --> 00:35:34,900
password for the root user we can do n

782
00:35:30,820 --> 00:35:37,270
su and become root so now we can find

783
00:35:34,900 --> 00:35:39,339
everything we want but our target is to

784
00:35:37,270 --> 00:35:43,310
modify the firmware

785
00:35:39,339 --> 00:35:45,980
so basically Ana based on a firmer and

786
00:35:43,310 --> 00:35:48,470
our own analysis of the firmer upper

787
00:35:45,980 --> 00:35:50,480
grade script we can understand that the

788
00:35:48,470 --> 00:35:52,430
the firmware file is the following

789
00:35:50,480 --> 00:35:54,920
structure we have an immediate Wrexham

790
00:35:52,430 --> 00:35:56,990
we have the boot file system a partition

791
00:35:54,920 --> 00:35:59,420
splitter the root filesystem an endo

792
00:35:56,990 --> 00:36:02,720
partition marker at at the end the

793
00:35:59,420 --> 00:36:05,390
signature so our idea is to modify just

794
00:36:02,720 --> 00:36:07,939
only the root file system so we can

795
00:36:05,390 --> 00:36:11,450
extract the root file system from the

796
00:36:07,940 --> 00:36:16,310
firmware file modify it create the new

797
00:36:11,450 --> 00:36:18,410
root file system image modified pad pad

798
00:36:16,310 --> 00:36:20,750
the file system image to the same size

799
00:36:18,410 --> 00:36:22,430
as the original root file system image

800
00:36:20,750 --> 00:36:24,109
because in the firmware file there are

801
00:36:22,430 --> 00:36:25,819
many fields that we don't know their

802
00:36:24,109 --> 00:36:28,009
purpose and we don't know how they are

803
00:36:25,819 --> 00:36:31,550
recalculated changing the root file

804
00:36:28,010 --> 00:36:33,200
system sides if we need additional

805
00:36:31,550 --> 00:36:35,810
software to be installed on the router

806
00:36:33,200 --> 00:36:39,169
we can use an USB key that is additional

807
00:36:35,810 --> 00:36:41,029
storage at the end we can reassemble

808
00:36:39,170 --> 00:36:44,420
everything putting everything together

809
00:36:41,030 --> 00:36:46,430
using the DD command and in this way we

810
00:36:44,420 --> 00:36:48,589
have an unsigned firmware file the

811
00:36:46,430 --> 00:36:50,629
problem is that we cannot load this

812
00:36:48,589 --> 00:36:53,779
unsigned firmware file with the standard

813
00:36:50,630 --> 00:36:56,810
upgrade procedure but we are also we

814
00:36:53,780 --> 00:36:59,810
have some we we can do something in the

815
00:36:56,810 --> 00:37:02,839
original upgrade script the the firmer

816
00:36:59,810 --> 00:37:05,000
is check it with these two lines of code

817
00:37:02,839 --> 00:37:07,279
so the Sigma verify does the track and

818
00:37:05,000 --> 00:37:10,339
the red code variables returns the

819
00:37:07,280 --> 00:37:12,829
output of the the return value of the

820
00:37:10,339 --> 00:37:15,500
Sigma verify command so we can copy this

821
00:37:12,829 --> 00:37:17,810
script in a temporary folder modify it

822
00:37:15,500 --> 00:37:22,880
to always return 0 this means always

823
00:37:17,810 --> 00:37:25,880
returns ok also if the the signature

824
00:37:22,880 --> 00:37:29,450
check fails and then we can temporary

825
00:37:25,880 --> 00:37:32,060
replace the original script with our own

826
00:37:29,450 --> 00:37:34,790
version using the mount with the - -

827
00:37:32,060 --> 00:37:37,279
bind option the bind option in the mount

828
00:37:34,790 --> 00:37:39,950
command is usually used to mount a

829
00:37:37,280 --> 00:37:42,530
folder over another but can also be used

830
00:37:39,950 --> 00:37:44,810
to mount the file over another an

831
00:37:42,530 --> 00:37:47,780
interesting thing is that it can also be

832
00:37:44,810 --> 00:37:50,000
used to mount a file over another in a

833
00:37:47,780 --> 00:37:52,040
read-only file system in this case we

834
00:37:50,000 --> 00:37:55,640
can temporary replace the

835
00:37:52,040 --> 00:37:59,660
Grado TCH script doing so we can do now

836
00:37:55,640 --> 00:38:02,810
the upgrade with our unsigned framer

837
00:37:59,660 --> 00:38:04,970
file and the upgrade will succeed so we

838
00:38:02,810 --> 00:38:09,350
have reached our target that was to

839
00:38:04,970 --> 00:38:12,080
modify the firma so conclusion summary

840
00:38:09,350 --> 00:38:15,370
we can say that reverse engineering can

841
00:38:12,080 --> 00:38:18,350
be really really challenging it is

842
00:38:15,370 --> 00:38:20,900
important to clearly define the limited

843
00:38:18,350 --> 00:38:23,080
scope of the in the reverse engineering

844
00:38:20,900 --> 00:38:25,850
project to remain focused on the target

845
00:38:23,080 --> 00:38:28,580
it is important to start gathering

846
00:38:25,850 --> 00:38:30,560
information always following the easiest

847
00:38:28,580 --> 00:38:33,290
part first so if something is available

848
00:38:30,560 --> 00:38:35,570
internet we can search this otherwise if

849
00:38:33,290 --> 00:38:38,570
some information is missing or difficult

850
00:38:35,570 --> 00:38:41,930
to get we try to move forward and we go

851
00:38:38,570 --> 00:38:43,310
back only if absolutely needed we can

852
00:38:41,930 --> 00:38:46,009
search on internet for everything

853
00:38:43,310 --> 00:38:50,270
including known vulnerabilities this is

854
00:38:46,010 --> 00:38:51,050
always the easiest part to do and if we

855
00:38:50,270 --> 00:38:53,720
have talked to

856
00:38:51,050 --> 00:38:55,760
Aksum process we able to select process

857
00:38:53,720 --> 00:39:01,939
running his route and with a large

858
00:38:55,760 --> 00:39:04,400
attack surface on this at the end of

859
00:39:01,940 --> 00:39:07,400
this presentation I have included a lot

860
00:39:04,400 --> 00:39:09,770
of useful links to some github Miami

861
00:39:07,400 --> 00:39:11,870
github repository one with all the tools

862
00:39:09,770 --> 00:39:14,210
and a firmer modification kit for this

863
00:39:11,870 --> 00:39:16,580
router another one to build the

864
00:39:14,210 --> 00:39:20,260
emulation environment add other link to

865
00:39:16,580 --> 00:39:22,610
everything I talked about today so I

866
00:39:20,260 --> 00:39:25,930
unfortunately I even have time for

867
00:39:22,610 --> 00:39:29,150
question because time is quite short and

868
00:39:25,930 --> 00:39:29,940
so thank you very much for your time and

869
00:39:29,150 --> 00:39:34,139
your patience

870
00:39:29,940 --> 00:39:34,139
[Applause]

