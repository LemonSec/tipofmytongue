1
00:00:00,090 --> 00:00:08,490
[Applause]

2
00:00:08,630 --> 00:00:15,650
all right sweet can everyone hear me yep

3
00:00:16,369 --> 00:00:27,119
I'm audible which is awesome so hi there

4
00:00:24,510 --> 00:00:28,590
are you beautiful talented people my

5
00:00:27,119 --> 00:00:31,830
name is Philip and I work for cyber

6
00:00:28,590 --> 00:00:34,230
easing I do security research and well

7
00:00:31,830 --> 00:00:36,000
that's all about me anyway this talk is

8
00:00:34,230 --> 00:00:38,190
going to be about a Windows feature

9
00:00:36,000 --> 00:00:40,320
called device guard and we'll find a

10
00:00:38,190 --> 00:00:42,480
couple of interesting ways to bypass it

11
00:00:40,320 --> 00:00:44,940
many of them relating to Microsoft

12
00:00:42,480 --> 00:00:46,468
Office none of them don't and we'll find

13
00:00:44,940 --> 00:00:48,390
out how these techniques could help us

14
00:00:46,469 --> 00:00:51,090
against other things which are not

15
00:00:48,390 --> 00:00:52,500
device guard so because this is a device

16
00:00:51,090 --> 00:00:56,789
guard talk and I'm going to say this

17
00:00:52,500 --> 00:00:59,879
term a bunch let's just discover what

18
00:00:56,789 --> 00:01:01,500
the hell is this feature now device

19
00:00:59,879 --> 00:01:03,510
guard is an application whitelisting

20
00:01:01,500 --> 00:01:05,519
feature that was introduced in Windows

21
00:01:03,510 --> 00:01:09,390
10 it is actually the successor to an

22
00:01:05,519 --> 00:01:11,880
older feature called app Locker and this

23
00:01:09,390 --> 00:01:14,850
feature is as an application

24
00:01:11,880 --> 00:01:17,070
whitelisting feature it tries to defend

25
00:01:14,850 --> 00:01:19,020
against an attacker that already has

26
00:01:17,070 --> 00:01:21,869
some kind of access to your machine and

27
00:01:19,020 --> 00:01:24,298
it does so by only a lot by only

28
00:01:21,869 --> 00:01:26,850
allowing code that's defined in a

29
00:01:24,299 --> 00:01:29,460
specific policy which could be a bunch

30
00:01:26,850 --> 00:01:32,309
of certificates or hashes or even file

31
00:01:29,460 --> 00:01:34,470
names and only that code could actually

32
00:01:32,310 --> 00:01:36,780
run on the machine and this really

33
00:01:34,470 --> 00:01:39,270
inhibits the attackers ability to run

34
00:01:36,780 --> 00:01:40,799
any code and do whatever they want on

35
00:01:39,270 --> 00:01:45,240
the machine even though they could run

36
00:01:40,799 --> 00:01:49,020
some code you basically can choose only

37
00:01:45,240 --> 00:01:53,429
from a very closed set now this has a

38
00:01:49,020 --> 00:01:55,170
very interesting attack surface because

39
00:01:53,430 --> 00:01:57,119
basically you could do you could use

40
00:01:55,170 --> 00:01:59,040
anything you have on a machine to try

41
00:01:57,119 --> 00:02:04,920
and bypass device guard which is all

42
00:01:59,040 --> 00:02:08,039
code and Windows so this feature tries

43
00:02:04,920 --> 00:02:09,989
to prohibit an attacker to achieving

44
00:02:08,038 --> 00:02:12,059
arbitrary code execution and will need

45
00:02:09,989 --> 00:02:13,530
to define this term a bit better to

46
00:02:12,060 --> 00:02:17,130
understand why in hell

47
00:02:13,530 --> 00:02:19,800
card works so what does arbitrary code

48
00:02:17,130 --> 00:02:22,680
execution mean at least in our context

49
00:02:19,800 --> 00:02:26,910
and for me it will be to be able to

50
00:02:22,680 --> 00:02:29,670
interact freely with the US which is

51
00:02:26,910 --> 00:02:32,100
mostly accomplished by just having full

52
00:02:29,670 --> 00:02:35,220
control of a process and this means that

53
00:02:32,100 --> 00:02:38,220
I can try to ask the u.s. to do anything

54
00:02:35,220 --> 00:02:40,859
I could have access deny you don't have

55
00:02:38,220 --> 00:02:44,130
enough privileges answer but still I

56
00:02:40,860 --> 00:02:46,350
need to be able to ask the question for

57
00:02:44,130 --> 00:02:49,049
it at least for me to count as arbitrary

58
00:02:46,350 --> 00:02:51,150
code execution and this could be

59
00:02:49,050 --> 00:02:53,940
achieved by being able to allocate code

60
00:02:51,150 --> 00:02:57,269
and jump to it or by being able to call

61
00:02:53,940 --> 00:02:58,950
arbitrary API calls or sis calls and of

62
00:02:57,269 --> 00:03:00,540
course it's really easy to jump between

63
00:02:58,950 --> 00:03:02,640
these two definitions because if you

64
00:03:00,540 --> 00:03:04,470
could do the one you could just allocate

65
00:03:02,640 --> 00:03:07,819
code that does whatever API is you want

66
00:03:04,470 --> 00:03:11,430
and you have the API to allocate code

67
00:03:07,819 --> 00:03:13,980
now this whole definition is it's a bit

68
00:03:11,430 --> 00:03:16,080
useless when you don't have application

69
00:03:13,980 --> 00:03:18,510
whitelisting because without application

70
00:03:16,080 --> 00:03:20,850
whitelisting arbitrary command execution

71
00:03:18,510 --> 00:03:24,030
and arbitrary code execution is pretty

72
00:03:20,850 --> 00:03:26,340
much equivalent because i can start an

73
00:03:24,030 --> 00:03:28,650
arbitrary process so I have my own

74
00:03:26,340 --> 00:03:32,100
executable my own library my own

75
00:03:28,650 --> 00:03:34,200
whatever so I just load it and it has my

76
00:03:32,100 --> 00:03:36,989
code and I can do anything I want on the

77
00:03:34,200 --> 00:03:38,940
machine but this equation actually

78
00:03:36,989 --> 00:03:42,060
breaks the moment you implement

79
00:03:38,940 --> 00:03:44,790
application whitelisting and suddenly

80
00:03:42,060 --> 00:03:46,410
you can only rely on what's allowed by

81
00:03:44,790 --> 00:03:49,350
the application while testing policy

82
00:03:46,410 --> 00:03:52,430
meaning that alright I have a really

83
00:03:49,350 --> 00:03:56,040
cool exploit that allows me to pop calc

84
00:03:52,430 --> 00:03:58,109
on my machine and then I try to use it

85
00:03:56,040 --> 00:04:00,540
against some kind of machine with with

86
00:03:58,109 --> 00:04:03,150
application whitelisting with device

87
00:04:00,540 --> 00:04:06,209
card and I discover that I can pop calc

88
00:04:03,150 --> 00:04:09,440
on my target machine and this does not

89
00:04:06,209 --> 00:04:11,910
help me in any way so you can't really

90
00:04:09,440 --> 00:04:14,609
you can really implement credentials to

91
00:04:11,910 --> 00:04:16,649
mean you can't really implement CNC very

92
00:04:14,609 --> 00:04:19,228
well etc etc and even if you have

93
00:04:16,649 --> 00:04:21,269
something like a cool privilege

94
00:04:19,228 --> 00:04:22,919
escalation vulnerability sometimes you

95
00:04:21,269 --> 00:04:25,460
don't have the ability to run your

96
00:04:22,919 --> 00:04:30,409
privilege escalation code because again

97
00:04:25,460 --> 00:04:31,818
it is not allowed by the policy so this

98
00:04:30,410 --> 00:04:33,530
is what makes application whitelisting

99
00:04:31,819 --> 00:04:36,199
and device guards really strong because

100
00:04:33,530 --> 00:04:38,690
you already have an attacker able to

101
00:04:36,199 --> 00:04:40,669
execute code of their choice on the

102
00:04:38,690 --> 00:04:44,660
machine and they still can't do

103
00:04:40,669 --> 00:04:49,219
everything they want now it's not enough

104
00:04:44,660 --> 00:04:51,349
that you've broken out of this white

105
00:04:49,220 --> 00:04:53,419
listing once because let's say you're

106
00:04:51,349 --> 00:04:56,590
fully controlling a single process but

107
00:04:53,419 --> 00:04:59,840
maybe it's an ascent in the sandbox and

108
00:04:56,590 --> 00:05:01,039
you have a cool sandbox escape but you

109
00:04:59,840 --> 00:05:03,650
have application whitelisting

110
00:05:01,039 --> 00:05:06,949
so you could escape your sandbox with

111
00:05:03,650 --> 00:05:08,239
notepad which is absolutely useless when

112
00:05:06,949 --> 00:05:11,060
you try to do lateral movement you

113
00:05:08,240 --> 00:05:13,009
mostly run commands again not good

114
00:05:11,060 --> 00:05:14,870
against application whitelisting

115
00:05:13,009 --> 00:05:17,360
same thing with persistence and

116
00:05:14,870 --> 00:05:20,000
privilege escalation so you need to have

117
00:05:17,360 --> 00:05:22,810
a bunch of consistent methods to be able

118
00:05:20,000 --> 00:05:25,099
to circumvent application whitelisting

119
00:05:22,810 --> 00:05:29,300
if you really want to do stuff on a

120
00:05:25,099 --> 00:05:31,370
machine so this was application

121
00:05:29,300 --> 00:05:33,710
whitelisting in general so let's have a

122
00:05:31,370 --> 00:05:37,130
little look at what device guard itself

123
00:05:33,710 --> 00:05:38,900
does on a Windows 10 machine so the

124
00:05:37,130 --> 00:05:41,330
first thing that the first way to

125
00:05:38,900 --> 00:05:44,090
execute code device guard protects

126
00:05:41,330 --> 00:05:46,909
against SB files and that's very

127
00:05:44,090 --> 00:05:48,859
straightforward if your PE file is not

128
00:05:46,909 --> 00:05:50,930
allowed by the policy it will not be

129
00:05:48,860 --> 00:05:54,710
executed unless you have some kind of

130
00:05:50,930 --> 00:05:57,139
vulnerability this is a bit more subtle

131
00:05:54,710 --> 00:05:59,448
the moment you start looking at the

132
00:05:57,139 --> 00:06:03,560
other types the other code execution

133
00:05:59,449 --> 00:06:06,530
vectors for example PowerShell actually

134
00:06:03,560 --> 00:06:08,240
lets you execute unsigned disallowed

135
00:06:06,530 --> 00:06:10,039
scripts but they will execute in what's

136
00:06:08,240 --> 00:06:14,120
called constraint language mode or CLM

137
00:06:10,039 --> 00:06:16,669
and it basically takes away everything

138
00:06:14,120 --> 00:06:20,719
that makes PowerShell fun all of the

139
00:06:16,669 --> 00:06:24,139
dotnet enter up comm types comma objects

140
00:06:20,719 --> 00:06:25,880
and whatever all of these simply

141
00:06:24,139 --> 00:06:30,699
disappear and you're left with something

142
00:06:25,880 --> 00:06:35,120
much less a useful gun you know former

143
00:06:30,699 --> 00:06:36,979
ultimate red teamers toolkit and is the

144
00:06:35,120 --> 00:06:39,199
same thing or a very similar thing

145
00:06:36,979 --> 00:06:42,498
happens with active script engines which

146
00:06:39,199 --> 00:06:44,629
jscript vbscript etcetera these actually

147
00:06:42,499 --> 00:06:45,379
only communicate with the operating

148
00:06:44,629 --> 00:06:48,620
system

149
00:06:45,379 --> 00:06:51,650
Viacom Viacom object and when you're

150
00:06:48,620 --> 00:06:54,349
running an script that's not whitelisted

151
00:06:51,650 --> 00:06:58,758
that's not signed you will only be able

152
00:06:54,349 --> 00:07:00,498
to create a very small subset of comm

153
00:06:58,759 --> 00:07:02,479
objects and none of them are useful for

154
00:07:00,499 --> 00:07:04,460
attackers so even if you want to do

155
00:07:02,479 --> 00:07:08,300
something like W squared she'll execute

156
00:07:04,460 --> 00:07:10,758
you simply won't be able and again this

157
00:07:08,300 --> 00:07:12,889
means that scripting dangers engines are

158
00:07:10,759 --> 00:07:14,870
neutered you could still run pretty

159
00:07:12,889 --> 00:07:19,310
boring scripts or maybe something useful

160
00:07:14,870 --> 00:07:22,159
for benign for benign reasons but you

161
00:07:19,310 --> 00:07:26,349
can't really use it for offensive

162
00:07:22,159 --> 00:07:30,409
purposes so if for example you try to

163
00:07:26,349 --> 00:07:33,110
double click a disallowed form and this

164
00:07:30,409 --> 00:07:34,669
loud be file on on a device coded

165
00:07:33,110 --> 00:07:38,150
machine you will get this pretty blue

166
00:07:34,669 --> 00:07:42,378
pop-up that says new and that's it not

167
00:07:38,150 --> 00:07:45,198
very useful so that was a small

168
00:07:42,379 --> 00:07:46,909
introduction to device guard and one

169
00:07:45,199 --> 00:07:48,379
thing I want to say is that some of the

170
00:07:46,909 --> 00:07:53,270
bypasses I'm gonna show here are

171
00:07:48,379 --> 00:07:55,520
actually bypasses requiring admin and an

172
00:07:53,270 --> 00:07:58,219
administrative user could actually just

173
00:07:55,520 --> 00:08:00,469
disable the Vice guard but this requires

174
00:07:58,219 --> 00:08:02,899
the restart and this actually throws

175
00:08:00,469 --> 00:08:05,539
event events into an event log and if

176
00:08:02,899 --> 00:08:07,550
you've taken the effort to actually

177
00:08:05,539 --> 00:08:09,770
implement device got an application

178
00:08:07,550 --> 00:08:10,279
whitelisting on your network on your

179
00:08:09,770 --> 00:08:13,430
machines

180
00:08:10,279 --> 00:08:15,409
you should still really look at every

181
00:08:13,430 --> 00:08:18,289
single event that says oh the Vice guard

182
00:08:15,409 --> 00:08:19,819
got got disabled here because this

183
00:08:18,289 --> 00:08:22,580
should really raise the silent or the

184
00:08:19,819 --> 00:08:26,479
sirens and should be extremely extremely

185
00:08:22,580 --> 00:08:28,998
suspicious so if we have other ways as

186
00:08:26,479 --> 00:08:31,310
an admin to disable or just bypass the

187
00:08:28,999 --> 00:08:35,149
device guard without disabling it we are

188
00:08:31,310 --> 00:08:39,078
gaining the basically the advantage of

189
00:08:35,149 --> 00:08:40,729
stealth because if you bypass device

190
00:08:39,078 --> 00:08:44,560
guard for a second and immediately get

191
00:08:40,729 --> 00:08:47,600
caught this is also not very fortunate

192
00:08:44,560 --> 00:08:51,430
anyway let's look at a couple of actual

193
00:08:47,600 --> 00:08:53,800
bypasses the first view will use VBA

194
00:08:51,430 --> 00:08:57,790
now VBA or Visual Basic for applications

195
00:08:53,800 --> 00:09:01,949
is the scripting or the programming

196
00:08:57,790 --> 00:09:04,839
language that powers office macros and

197
00:09:01,950 --> 00:09:06,610
for some reason Microsoft just doesn't

198
00:09:04,839 --> 00:09:08,589
instrument VBA

199
00:09:06,610 --> 00:09:10,930
with device card meaning that the moment

200
00:09:08,589 --> 00:09:14,410
you could run VBA you could run any kind

201
00:09:10,930 --> 00:09:16,899
of VBA code regardless of it being

202
00:09:14,410 --> 00:09:19,149
signed compliant with the policy etc and

203
00:09:16,899 --> 00:09:21,130
this is pretty weird because while it's

204
00:09:19,149 --> 00:09:22,720
not a part of the operating system it's

205
00:09:21,130 --> 00:09:25,750
pretty ubiquitous and it is made by

206
00:09:22,720 --> 00:09:27,580
Microsoft now

207
00:09:25,750 --> 00:09:29,980
if you've run a macro you're able to

208
00:09:27,580 --> 00:09:31,290
reach well my definition of arbitrary

209
00:09:29,980 --> 00:09:34,420
code execution

210
00:09:31,290 --> 00:09:36,310
mainly we're using two ways the first is

211
00:09:34,420 --> 00:09:37,990
directly import with API functions that

212
00:09:36,310 --> 00:09:40,510
just use them to run shell code or

213
00:09:37,990 --> 00:09:43,390
whatever and the second is using column

214
00:09:40,510 --> 00:09:45,520
objects and change for shah's dotnet the

215
00:09:43,390 --> 00:09:48,250
jscript technique which basically uses

216
00:09:45,520 --> 00:09:52,660
dotnet interrupt interrupt and comm

217
00:09:48,250 --> 00:09:56,950
objects to load and darknet assembly

218
00:09:52,660 --> 00:09:58,630
into memory so you could use any of

219
00:09:56,950 --> 00:10:01,480
these two the moment you're able to run

220
00:09:58,630 --> 00:10:04,390
a macro but the naive way to run a macro

221
00:10:01,480 --> 00:10:07,000
is is this which is really lame because

222
00:10:04,390 --> 00:10:09,520
you know you actually have to press a

223
00:10:07,000 --> 00:10:11,740
button and we're talking about a post

224
00:10:09,520 --> 00:10:13,750
exploitation scenario I could I could

225
00:10:11,740 --> 00:10:16,060
already run commands on a machine so now

226
00:10:13,750 --> 00:10:18,430
I'm gonna open Excel and just wait for

227
00:10:16,060 --> 00:10:21,010
somebody to push a button or I know

228
00:10:18,430 --> 00:10:25,199
already p2 a machine that's that's

229
00:10:21,010 --> 00:10:28,890
pretty lame and that's why I try to see

230
00:10:25,200 --> 00:10:33,400
if I do have any ways to run VBA macros

231
00:10:28,890 --> 00:10:36,250
without any user GUI interaction so one

232
00:10:33,400 --> 00:10:40,630
such way is using decom or basically

233
00:10:36,250 --> 00:10:42,880
removed comm the macro functionality of

234
00:10:40,630 --> 00:10:46,750
pretty much all office applications is

235
00:10:42,880 --> 00:10:49,149
exposed through decom meaning that while

236
00:10:46,750 --> 00:10:51,130
i can't create these objects easily on

237
00:10:49,149 --> 00:10:53,380
my device guarded machine i could

238
00:10:51,130 --> 00:10:56,680
actually create them remotely if i have

239
00:10:53,380 --> 00:11:00,040
admin and i can use these objects to run

240
00:10:56,680 --> 00:11:03,880
my arbitrary VBA code I don't even need

241
00:11:00,040 --> 00:11:05,020
a file actually and this looks pretty

242
00:11:03,880 --> 00:11:06,939
much like this

243
00:11:05,020 --> 00:11:10,899
so what I'm doing is first of all

244
00:11:06,940 --> 00:11:13,779
defining macro as a string I'm doing a

245
00:11:10,899 --> 00:11:16,480
bit of w my magic to change a small

246
00:11:13,779 --> 00:11:18,970
registry key at my target on my target

247
00:11:16,480 --> 00:11:22,450
machine to allow me to file lessly

248
00:11:18,970 --> 00:11:25,410
inject VBA code into an instance of

249
00:11:22,450 --> 00:11:28,899
Excel it could also be word or or

250
00:11:25,410 --> 00:11:32,500
anything pretty much but I inject my

251
00:11:28,899 --> 00:11:35,140
macro and then all I need to do is run

252
00:11:32,500 --> 00:11:36,940
it and there's no file involved you

253
00:11:35,140 --> 00:11:38,770
don't actually have a malicious document

254
00:11:36,940 --> 00:11:40,839
on the machine all you have is an

255
00:11:38,770 --> 00:11:43,959
instance of Excel running arbitrary code

256
00:11:40,839 --> 00:11:46,450
on the remote machine even though it has

257
00:11:43,959 --> 00:11:51,609
the bus guard and should be protected

258
00:11:46,450 --> 00:11:55,480
against that but that required admin

259
00:11:51,610 --> 00:11:58,330
privileges because mostly only admits

260
00:11:55,480 --> 00:12:00,490
could actually reach these objects

261
00:11:58,330 --> 00:12:03,100
through decom and that was also remotely

262
00:12:00,490 --> 00:12:05,440
what I want to do is well let's just run

263
00:12:03,100 --> 00:12:09,430
a command line on my target machine and

264
00:12:05,440 --> 00:12:12,700
run to macro and that's it so I found

265
00:12:09,430 --> 00:12:14,920
two ways to do that one of them is by

266
00:12:12,700 --> 00:12:17,440
abusing trusted documents basically if

267
00:12:14,920 --> 00:12:21,250
you actually click this enable contact

268
00:12:17,440 --> 00:12:23,110
button once and you run your macro when

269
00:12:21,250 --> 00:12:24,940
you open your file again you would

270
00:12:23,110 --> 00:12:27,149
you'll discover that oh the button

271
00:12:24,940 --> 00:12:29,290
doesn't exist the macro just runs and

272
00:12:27,149 --> 00:12:31,959
this is because the document is now

273
00:12:29,290 --> 00:12:36,310
considered trusted but I actually opted

274
00:12:31,959 --> 00:12:38,199
to use the second option which is doc

275
00:12:36,310 --> 00:12:40,689
using documents running from trusted

276
00:12:38,200 --> 00:12:44,500
locations and not especially trusted

277
00:12:40,690 --> 00:12:46,240
documents now trusted locations are

278
00:12:44,500 --> 00:12:48,760
actually a bunch of folders that are

279
00:12:46,240 --> 00:12:50,740
managed in the registry and pretty much

280
00:12:48,760 --> 00:12:53,290
all almost all of the default ones are

281
00:12:50,740 --> 00:12:54,940
writable by admins meaning that if I'm

282
00:12:53,290 --> 00:12:57,270
running from a trusted event just

283
00:12:54,940 --> 00:13:00,430
opening a document in a trusted location

284
00:12:57,270 --> 00:13:02,170
office doesn't ask me oh is this is this

285
00:13:00,430 --> 00:13:05,319
allow do you want to enable content it

286
00:13:02,170 --> 00:13:08,709
just it just immediately runs everything

287
00:13:05,320 --> 00:13:12,130
that I want but again the default ones

288
00:13:08,709 --> 00:13:14,589
are writable by admins and we did say

289
00:13:12,130 --> 00:13:16,900
that we want to do this unprivileged so

290
00:13:14,589 --> 00:13:18,279
as you can see we have here this weird a

291
00:13:16,900 --> 00:13:21,519
cc wheels

292
00:13:18,279 --> 00:13:23,170
folder which is writable only by admins

293
00:13:21,519 --> 00:13:25,810
and this is actually the microsoft

294
00:13:23,170 --> 00:13:27,670
access trusted directory and that's

295
00:13:25,810 --> 00:13:31,899
managed in the rate in the registry in

296
00:13:27,670 --> 00:13:34,628
this office 16 access security trusted

297
00:13:31,899 --> 00:13:36,550
locations whatever key and as you can

298
00:13:34,629 --> 00:13:41,439
see you just you just have the name of

299
00:13:36,550 --> 00:13:43,449
the folder and the path but it's cool

300
00:13:41,439 --> 00:13:46,509
that it's only writable by admins but

301
00:13:43,449 --> 00:13:49,089
take us take a short look at the actual

302
00:13:46,509 --> 00:13:52,720
registry path there's a problem here and

303
00:13:49,089 --> 00:13:55,569
it is HD current user meaning that maybe

304
00:13:52,720 --> 00:13:57,610
I only can I need admin to write into

305
00:13:55,569 --> 00:13:59,110
the folder but I could actually change

306
00:13:57,610 --> 00:14:01,480
the registry key to an arbitrary

307
00:13:59,110 --> 00:14:04,240
location because the current user

308
00:14:01,480 --> 00:14:06,610
registry hive is always excessive it is

309
00:14:04,240 --> 00:14:08,920
always accessible by the current user so

310
00:14:06,610 --> 00:14:11,639
I could just ignore the identity of the

311
00:14:08,920 --> 00:14:16,689
actual folder and just create my own and

312
00:14:11,639 --> 00:14:20,290
that's exactly what I would do so here

313
00:14:16,689 --> 00:14:23,670
again I do a bit of w my magic to modify

314
00:14:20,290 --> 00:14:28,059
registry because sometimes people block

315
00:14:23,670 --> 00:14:30,550
reg exe etc using application

316
00:14:28,059 --> 00:14:35,529
whitelisting and WI is a bit harder to

317
00:14:30,550 --> 00:14:38,410
block and all I do is just change just

318
00:14:35,529 --> 00:14:43,980
add a new trusted location for Excel or

319
00:14:38,410 --> 00:14:46,990
for access in my case it's C temp and

320
00:14:43,980 --> 00:14:49,959
that's where I store my malicious macro

321
00:14:46,990 --> 00:14:52,240
and then the the moment I tried to run

322
00:14:49,959 --> 00:14:56,258
access with my file and try to run my

323
00:14:52,240 --> 00:15:00,639
macro this weird embedding flag just

324
00:14:56,259 --> 00:15:03,339
prohibits access from actually showing a

325
00:15:00,639 --> 00:15:06,730
GUI so this will of course be invisible

326
00:15:03,339 --> 00:15:08,559
to to the actual user nothing stops me

327
00:15:06,730 --> 00:15:13,720
from just running the macro and again I

328
00:15:08,559 --> 00:15:17,110
could run arbitrary code so these were

329
00:15:13,720 --> 00:15:19,240
two bypasses using VBA and VBA is

330
00:15:17,110 --> 00:15:23,740
actually implemented in a library called

331
00:15:19,240 --> 00:15:26,920
vb7 DLL and what if he just block it it

332
00:15:23,740 --> 00:15:28,540
doesn't matter which kinds of registry

333
00:15:26,920 --> 00:15:30,399
keys you modify let's just block the

334
00:15:28,540 --> 00:15:32,110
library itself with device guard let's

335
00:15:30,399 --> 00:15:34,000
say it's not compliant with

336
00:15:32,110 --> 00:15:37,990
and then you will never be able to run

337
00:15:34,000 --> 00:15:41,589
VBA macros so let's try to find

338
00:15:37,990 --> 00:15:43,779
something that's not based on VBA and so

339
00:15:41,589 --> 00:15:46,089
we got a bit annoyed by macros because

340
00:15:43,779 --> 00:15:49,329
they're horrible this is why the next

341
00:15:46,089 --> 00:15:51,670
step is going to be more macros and it's

342
00:15:49,329 --> 00:15:55,239
gonna be Excel for macros which are

343
00:15:51,670 --> 00:15:57,519
actually an older legacy macro feature

344
00:15:55,240 --> 00:16:00,519
that only exists in Excel and it was

345
00:15:57,519 --> 00:16:03,370
introduced in 92 and this is implemented

346
00:16:00,519 --> 00:16:06,190
in Excel that XE itself which actually

347
00:16:03,370 --> 00:16:09,370
is pretty important for later and this

348
00:16:06,190 --> 00:16:11,589
feature actually has a call in register

349
00:16:09,370 --> 00:16:16,899
functions which will allow you to call

350
00:16:11,589 --> 00:16:20,800
an arbitrary export from a DLL they also

351
00:16:16,899 --> 00:16:22,839
have absolutely disgusting syntax so

352
00:16:20,800 --> 00:16:26,260
calling arbitrary functions from dll's

353
00:16:22,839 --> 00:16:30,399
is actually exactly what I want for my

354
00:16:26,260 --> 00:16:32,890
definition of arbitrary code but when I

355
00:16:30,399 --> 00:16:35,680
first discovered Excel for macros I

356
00:16:32,890 --> 00:16:37,630
actually didn't understand how to use

357
00:16:35,680 --> 00:16:40,839
them for shellcode because of a bunch of

358
00:16:37,630 --> 00:16:46,140
constraints until I discovered that 10

359
00:16:40,839 --> 00:16:46,140
hacked and Pieter Zeeman of Al Clank

360
00:16:46,589 --> 00:16:52,720
actually were able to run shellcode via

361
00:16:49,980 --> 00:16:58,390
Excel for macros what I was able to do

362
00:16:52,720 --> 00:17:00,430
is just run scriptlets run run command

363
00:16:58,390 --> 00:17:03,160
light etc and this was never able to

364
00:17:00,430 --> 00:17:05,799
escape device guard so the moment I can

365
00:17:03,160 --> 00:17:08,049
run shellcode I could draw an arbitrary

366
00:17:05,799 --> 00:17:09,990
code and it looks like this basically we

367
00:17:08,049 --> 00:17:13,240
have the register function that

368
00:17:09,990 --> 00:17:17,410
registers into the Excel for macro all

369
00:17:13,240 --> 00:17:19,329
of the code injection shell code shell

370
00:17:17,410 --> 00:17:21,669
code execution usual suspects such as

371
00:17:19,329 --> 00:17:23,980
virtual lock write process memory and

372
00:17:21,669 --> 00:17:27,429
create read and then calls them with the

373
00:17:23,980 --> 00:17:29,230
prop with appropriate arguments the

374
00:17:27,429 --> 00:17:32,830
shell Co itself is actually stored in

375
00:17:29,230 --> 00:17:36,070
this weird value cell because while

376
00:17:32,830 --> 00:17:38,290
Excel doesn't really know how to display

377
00:17:36,070 --> 00:17:40,090
huge byte arrays it actually knows how

378
00:17:38,290 --> 00:17:41,980
to store them so it just gives me an

379
00:17:40,090 --> 00:17:45,709
exception and then still stores the

380
00:17:41,980 --> 00:17:48,380
binary and if I run this

381
00:17:45,710 --> 00:17:51,620
I would run my shellcode but again we

382
00:17:48,380 --> 00:17:53,930
have this enable content thing but now

383
00:17:51,620 --> 00:17:56,270
we do know how to bypass this so first

384
00:17:53,930 --> 00:17:59,030
so the first version would be to use

385
00:17:56,270 --> 00:18:01,490
this with decom and it's pretty simple

386
00:17:59,030 --> 00:18:03,770
and it's pretty similar to the previous

387
00:18:01,490 --> 00:18:09,550
version all we need to do is is create

388
00:18:03,770 --> 00:18:12,260
excel data application and open remote

389
00:18:09,550 --> 00:18:16,580
excel file we could actually also use

390
00:18:12,260 --> 00:18:21,560
this with a with a function called

391
00:18:16,580 --> 00:18:24,350
execute Excel for macro which was

392
00:18:21,560 --> 00:18:27,770
actually used by Excel for decom again

393
00:18:24,350 --> 00:18:29,870
by the outline guys but it but this

394
00:18:27,770 --> 00:18:32,990
whole thing will still had a bunch of

395
00:18:29,870 --> 00:18:36,639
shortcomings and it was that shellcode

396
00:18:32,990 --> 00:18:40,760
running only only worked for 32-bit

397
00:18:36,640 --> 00:18:42,320
office because well the feature wasn't

398
00:18:40,760 --> 00:18:43,730
really implemented that well and it

399
00:18:42,320 --> 00:18:45,649
caused a bunch of memory corruption

400
00:18:43,730 --> 00:18:51,020
stuff the moment you tried to use it for

401
00:18:45,650 --> 00:18:53,440
64-bit so I tried to implement a bit of

402
00:18:51,020 --> 00:18:55,850
an alternative shellcode runner using

403
00:18:53,440 --> 00:18:59,090
excel for mac rose again and if you're

404
00:18:55,850 --> 00:19:02,050
interested just look at just enter this

405
00:18:59,090 --> 00:19:08,649
link and there's a small write-up for it

406
00:19:02,050 --> 00:19:13,040
anyway so now we can do this via decom

407
00:19:08,650 --> 00:19:15,080
tirelessly and on 64 bits you basically

408
00:19:13,040 --> 00:19:17,180
just write your payload into the memory

409
00:19:15,080 --> 00:19:21,290
of excel in the upper mode instance of

410
00:19:17,180 --> 00:19:22,670
excel and then execute it and you could

411
00:19:21,290 --> 00:19:25,149
do the same thing with a trusted folder

412
00:19:22,670 --> 00:19:28,580
you can just create a new trusted folder

413
00:19:25,150 --> 00:19:32,830
put your excel for macro document in it

414
00:19:28,580 --> 00:19:38,179
launch it no GUI no protected mode

415
00:19:32,830 --> 00:19:42,100
arbitrary code execution so the benefit

416
00:19:38,180 --> 00:19:46,700
of excel for mac rose over vba is that

417
00:19:42,100 --> 00:19:49,580
they are not implemented in a separate

418
00:19:46,700 --> 00:19:52,220
library meaning that they're implemented

419
00:19:49,580 --> 00:19:54,800
in Excel or XE so you can't use excel

420
00:19:52,220 --> 00:19:56,570
without allowing Excel for macros it

421
00:19:54,800 --> 00:19:58,250
doesn't matter what you try how you try

422
00:19:56,570 --> 00:19:59,450
to play with the registry because most

423
00:19:58,250 --> 00:20:01,399
of the rich

424
00:19:59,450 --> 00:20:03,440
most of the security controls for office

425
00:20:01,399 --> 00:20:06,229
actually exist in the current user hive

426
00:20:03,440 --> 00:20:08,840
and we could modify it because we're the

427
00:20:06,230 --> 00:20:11,480
current user so we can always allow the

428
00:20:08,840 --> 00:20:14,330
execution of Excel for macros until I

429
00:20:11,480 --> 00:20:16,820
suppose Microsoft deprecates them so if

430
00:20:14,330 --> 00:20:19,908
you have Excel on your machine you could

431
00:20:16,820 --> 00:20:24,289
bypass device guard and until these are

432
00:20:19,909 --> 00:20:26,360
deprecated so let's move to a different

433
00:20:24,289 --> 00:20:28,940
technology and this time it's going to

434
00:20:26,360 --> 00:20:31,610
be active script and act the script

435
00:20:28,940 --> 00:20:33,350
which is the magic behind J script and

436
00:20:31,610 --> 00:20:36,939
VB script is actually a generic Windows

437
00:20:33,350 --> 00:20:39,649
scripting technology or a standard and

438
00:20:36,940 --> 00:20:41,600
it has already being the target of a

439
00:20:39,649 --> 00:20:44,149
couple of device guard bypasses the

440
00:20:41,600 --> 00:20:51,469
squiggly due to and squiggly something

441
00:20:44,149 --> 00:20:53,809
else and it looks a bit like this so

442
00:20:51,470 --> 00:20:56,570
there are two main components for active

443
00:20:53,809 --> 00:20:59,658
script the first is the scripting host

444
00:20:56,570 --> 00:21:02,809
which is an application that knows how

445
00:20:59,659 --> 00:21:06,559
to use various scripting engines

446
00:21:02,809 --> 00:21:09,918
implemented with active script to do a

447
00:21:06,559 --> 00:21:12,080
bunch of tasks so it's and the other

448
00:21:09,919 --> 00:21:14,690
part is the actual scripting engine and

449
00:21:12,080 --> 00:21:16,549
these active script interfaces are

450
00:21:14,690 --> 00:21:19,039
actually calm interfaces so the moment

451
00:21:16,549 --> 00:21:21,408
you define and implement those

452
00:21:19,039 --> 00:21:24,169
interfaces you're basically an active

453
00:21:21,409 --> 00:21:27,260
scripting engine and host and what the

454
00:21:24,169 --> 00:21:30,230
host actually allows you is to use your

455
00:21:27,260 --> 00:21:32,720
use code from your application inside of

456
00:21:30,230 --> 00:21:36,529
the script this is why Internet Explorer

457
00:21:32,720 --> 00:21:38,809
is able to use VB script to manipulate

458
00:21:36,529 --> 00:21:42,080
HTML because VB script itself does not

459
00:21:38,809 --> 00:21:44,299
have any capabilities as such but the

460
00:21:42,080 --> 00:21:47,750
moment it runs under the Internet

461
00:21:44,299 --> 00:21:52,760
Explorer scripting host it is exposed to

462
00:21:47,750 --> 00:21:55,970
all of these capabilities so the most

463
00:21:52,760 --> 00:21:59,179
common host and engines for active

464
00:21:55,970 --> 00:22:02,029
script on on you know just a native

465
00:21:59,179 --> 00:22:04,250
Windows installation are on the host

466
00:22:02,029 --> 00:22:07,309
side we have W and C script XE we have

467
00:22:04,250 --> 00:22:10,279
AC ro BL l which is actually the engine

468
00:22:07,309 --> 00:22:12,610
behind scriptlets we have msxml and 3 &

469
00:22:10,279 --> 00:22:15,340
6 which run

470
00:22:12,610 --> 00:22:17,199
XSL transforms and we have MS HTML which

471
00:22:15,340 --> 00:22:21,209
is actually the Internet Explorer and

472
00:22:17,200 --> 00:22:26,470
also the HDA engine on the script site

473
00:22:21,210 --> 00:22:30,580
we have jscript which is the most common

474
00:22:26,470 --> 00:22:32,320
version of JavaScript you will use like

475
00:22:30,580 --> 00:22:34,510
with Microsoft stuff we have BB script

476
00:22:32,320 --> 00:22:37,090
way and we also have a script 9 DLL

477
00:22:34,510 --> 00:22:39,039
which is the version of JavaScript that

478
00:22:37,090 --> 00:22:42,428
mostly runs in Internet Explorer and HTA

479
00:22:39,039 --> 00:22:44,620
etc now this list is not exhaustive and

480
00:22:42,429 --> 00:22:47,070
you still have a bunch of other

481
00:22:44,620 --> 00:22:51,939
scripting host and scripting engines

482
00:22:47,070 --> 00:22:54,639
natively available on Windows right so

483
00:22:51,940 --> 00:22:57,100
let's have a little look at how device

484
00:22:54,639 --> 00:23:01,479
guard is implemented in active scripting

485
00:22:57,100 --> 00:23:04,959
engines and as I said before what device

486
00:23:01,480 --> 00:23:07,210
guard does for active script is if your

487
00:23:04,960 --> 00:23:10,510
script is not allowed by the policy you

488
00:23:07,210 --> 00:23:14,500
will only be able to create a very small

489
00:23:10,510 --> 00:23:16,870
set of predefined call objects so let's

490
00:23:14,500 --> 00:23:18,809
say want to create W script shell which

491
00:23:16,870 --> 00:23:22,090
is actually prohibited for a

492
00:23:18,809 --> 00:23:26,649
non-complying script so I'm gonna write

493
00:23:22,090 --> 00:23:28,510
first of all I'm gonna write just a

494
00:23:26,649 --> 00:23:31,209
bunch of a bit of JavaScript new

495
00:23:28,510 --> 00:23:33,279
activexobject W script Archelle this

496
00:23:31,210 --> 00:23:36,580
will then be passed to class ID from

497
00:23:33,279 --> 00:23:38,679
probe ID - to translate the friendly W

498
00:23:36,580 --> 00:23:41,189
script shell name to the class ID to the

499
00:23:38,679 --> 00:23:44,409
gooood identifying Arkham object and

500
00:23:41,190 --> 00:23:46,750
this is passed by the engine to the host

501
00:23:44,409 --> 00:23:52,059
which calls a function a method called

502
00:23:46,750 --> 00:23:54,580
is class loud and it checks it checks

503
00:23:52,059 --> 00:23:58,870
this class ID against a hard-coded list

504
00:23:54,580 --> 00:24:03,580
and in a window slobberry called WL DP

505
00:23:58,870 --> 00:24:06,129
Windows lockdown policy DLL and if this

506
00:24:03,580 --> 00:24:08,529
checks if this check fails you just

507
00:24:06,130 --> 00:24:12,279
can't create the object if it's if it

508
00:24:08,529 --> 00:24:16,480
succeeds it just get is allowed true and

509
00:24:12,279 --> 00:24:19,120
you're able to create your object so not

510
00:24:16,480 --> 00:24:21,760
every scripting host actually implements

511
00:24:19,120 --> 00:24:26,409
this is class allowed function this is

512
00:24:21,760 --> 00:24:30,910
why there's a there's a default success

513
00:24:26,410 --> 00:24:32,950
the implementation in every engine so if

514
00:24:30,910 --> 00:24:34,930
I'm trying to do the hostess class

515
00:24:32,950 --> 00:24:38,110
allowed from the internet just discover

516
00:24:34,930 --> 00:24:40,150
oh there's no functions there's no such

517
00:24:38,110 --> 00:24:45,010
function I will just continue creating

518
00:24:40,150 --> 00:24:49,840
the the column object and simply

519
00:24:45,010 --> 00:24:51,790
disregard device card so a couple of

520
00:24:49,840 --> 00:24:55,139
bypasses abusing active script actually

521
00:24:51,790 --> 00:24:57,550
abuse that just scripting hosts that are

522
00:24:55,140 --> 00:25:00,940
that don't have as class allowed

523
00:24:57,550 --> 00:25:03,370
implemented and one such object is the

524
00:25:00,940 --> 00:25:06,460
active script event the active script

525
00:25:03,370 --> 00:25:08,500
consumer which is actually the most

526
00:25:06,460 --> 00:25:11,680
common W my persistence method

527
00:25:08,500 --> 00:25:13,720
it's an event consumer that implements

528
00:25:11,680 --> 00:25:17,230
its own active script host which is

529
00:25:13,720 --> 00:25:20,440
completely independent of the whole

530
00:25:17,230 --> 00:25:24,250
previous list and it doesn't have this

531
00:25:20,440 --> 00:25:27,400
is class allowed function but you could

532
00:25:24,250 --> 00:25:30,850
only use this as an admin meaning that

533
00:25:27,400 --> 00:25:33,610
if you have admin you could just run any

534
00:25:30,850 --> 00:25:36,310
script you want through ser cons or the

535
00:25:33,610 --> 00:25:38,050
active script consumer and the is class

536
00:25:36,310 --> 00:25:39,879
allow function just simply won't exist

537
00:25:38,050 --> 00:25:43,930
and won't be called so all of your coops

538
00:25:39,880 --> 00:25:47,440
and all of your scripts will run as as

539
00:25:43,930 --> 00:25:50,230
usual and implementing to this is

540
00:25:47,440 --> 00:25:52,690
actually absolutely identical to

541
00:25:50,230 --> 00:25:56,320
implementing W my persistence because

542
00:25:52,690 --> 00:25:58,540
it's the exact same process you will you

543
00:25:56,320 --> 00:26:00,909
will just device card will be completely

544
00:25:58,540 --> 00:26:04,389
blind to you so all you need to do is

545
00:26:00,910 --> 00:26:05,410
create your you can create your script

546
00:26:04,390 --> 00:26:07,810
text

547
00:26:05,410 --> 00:26:10,410
pass it as an argument to your scripting

548
00:26:07,810 --> 00:26:13,649
consumer and then bind your consumer

549
00:26:10,410 --> 00:26:18,370
with an event that it should fire upon

550
00:26:13,650 --> 00:26:21,400
using an filter to consumer binding W my

551
00:26:18,370 --> 00:26:24,840
object and the moment the event triggers

552
00:26:21,400 --> 00:26:26,590
your script will will run uninterrupted

553
00:26:24,840 --> 00:26:31,899
alright

554
00:26:26,590 --> 00:26:34,449
so another type of unenlightened

555
00:26:31,899 --> 00:26:38,018
scripting host host that doesn't have

556
00:26:34,450 --> 00:26:41,230
this class allowed function is msxml and

557
00:26:38,019 --> 00:26:45,159
this dll actually implements XSLT

558
00:26:41,230 --> 00:26:48,669
transforms which is a file format that

559
00:26:45,159 --> 00:26:52,240
allows you to basically change the

560
00:26:48,669 --> 00:26:55,210
format of xml files and you could script

561
00:26:52,240 --> 00:26:58,600
that file format with embedded scripting

562
00:26:55,210 --> 00:27:00,879
and these are actually hosted in ms XML

563
00:26:58,600 --> 00:27:03,879
itself which doesn't have as class

564
00:27:00,879 --> 00:27:07,269
allowed so the moment you can use an

565
00:27:03,879 --> 00:27:08,799
excel sheet to transform an XML file you

566
00:27:07,269 --> 00:27:10,539
could run the embedded script

567
00:27:08,799 --> 00:27:13,029
uninterrupted without ever looking at

568
00:27:10,539 --> 00:27:15,369
device guard so there's a couple of ways

569
00:27:13,029 --> 00:27:18,970
to use Excel cells but I'll show a

570
00:27:15,369 --> 00:27:21,279
couple of less known ones the first one

571
00:27:18,970 --> 00:27:23,379
is actually again a common method of an

572
00:27:21,279 --> 00:27:26,619
office application this time it's access

573
00:27:23,379 --> 00:27:29,379
and Microsoft Access has a transform XML

574
00:27:26,619 --> 00:27:31,959
method that does exactly what you

575
00:27:29,379 --> 00:27:34,600
imagine you have a data source a

576
00:27:31,960 --> 00:27:37,059
transform source which is an XML in

577
00:27:34,600 --> 00:27:39,759
excel sheet and the moment you call the

578
00:27:37,059 --> 00:27:42,549
at the moment you call the function

579
00:27:39,759 --> 00:27:45,399
it applies your XSL to your XML and runs

580
00:27:42,549 --> 00:27:47,379
the edit script so you could do this

581
00:27:45,399 --> 00:27:49,689
with four lines of PowerShell or with

582
00:27:47,379 --> 00:27:53,889
four lines of your favorite scripting or

583
00:27:49,690 --> 00:27:55,960
whatever language and again the moment

584
00:27:53,889 --> 00:27:57,908
you run this embedded script runs noting

585
00:27:55,960 --> 00:27:59,740
and nothing looks at device guard and

586
00:27:57,909 --> 00:28:01,710
all of your comics get rated and you

587
00:27:59,740 --> 00:28:05,169
could get arbitrary code execution

588
00:28:01,710 --> 00:28:09,220
another way to use XML to use Excel

589
00:28:05,169 --> 00:28:12,210
style sheets again in a decom context is

590
00:28:09,220 --> 00:28:14,710
actually by using outlook which has

591
00:28:12,210 --> 00:28:18,039
create object method and this method

592
00:28:14,710 --> 00:28:21,700
allows you to remotely create arbitrary

593
00:28:18,039 --> 00:28:25,629
com object so again I could create an MS

594
00:28:21,700 --> 00:28:29,049
XML the I could create an XML object and

595
00:28:25,629 --> 00:28:31,299
XSL object apply the XSL to the XML run

596
00:28:29,049 --> 00:28:35,230
the embedded script and it again runs

597
00:28:31,299 --> 00:28:37,269
uninterrupted now when I first showed

598
00:28:35,230 --> 00:28:40,340
this thing it was actually a lie by

599
00:28:37,269 --> 00:28:44,360
omission because

600
00:28:40,340 --> 00:28:48,230
I didn't tell you how the scripting

601
00:28:44,360 --> 00:28:51,620
engine actually passes the class ID the

602
00:28:48,230 --> 00:28:54,920
gooood of the object to the s-class

603
00:28:51,620 --> 00:28:57,260
allowed function in the host and the

604
00:28:54,920 --> 00:29:00,260
answer is there is no one single

605
00:28:57,260 --> 00:29:02,240
implementation of this which is or which

606
00:29:00,260 --> 00:29:05,330
was actually the source of a

607
00:29:02,240 --> 00:29:09,140
vulnerability in device guard so let's

608
00:29:05,330 --> 00:29:11,179
look at two cold stacks the top call

609
00:29:09,140 --> 00:29:15,290
stack has the jscript nine scripting

610
00:29:11,180 --> 00:29:18,020
engine executing under the MS HTML

611
00:29:15,290 --> 00:29:22,760
scripting host and here we have jscript

612
00:29:18,020 --> 00:29:26,690
nine executing calling can object run

613
00:29:22,760 --> 00:29:28,940
which then passes execution to the

614
00:29:26,690 --> 00:29:32,300
scripting host and the function that

615
00:29:28,940 --> 00:29:34,310
runs is a host query custom policy which

616
00:29:32,300 --> 00:29:39,889
is a generic function that checks for

617
00:29:34,310 --> 00:29:42,500
calm object security and ms HTML itself

618
00:29:39,890 --> 00:29:46,310
decides oh here i want to call is class

619
00:29:42,500 --> 00:29:49,520
allowed and then it calls this and if

620
00:29:46,310 --> 00:29:52,669
the class is disallowed the whole query

621
00:29:49,520 --> 00:29:55,340
custom policy function returns false and

622
00:29:52,670 --> 00:29:58,310
the object can't be created but here we

623
00:29:55,340 --> 00:30:01,490
see that ms HTML itself is responsible

624
00:29:58,310 --> 00:30:04,490
for calling is class allowed on the

625
00:30:01,490 --> 00:30:07,100
contrary if you look at the bottom

626
00:30:04,490 --> 00:30:11,300
picture you see that you have a script

627
00:30:07,100 --> 00:30:13,639
executing Kanna can object get object

628
00:30:11,300 --> 00:30:15,860
from probe ID and then immediately you

629
00:30:13,640 --> 00:30:21,220
see that is class allowed is called

630
00:30:15,860 --> 00:30:23,750
meaning that J script is it is itself

631
00:30:21,220 --> 00:30:26,660
responsible for calling as class allowed

632
00:30:23,750 --> 00:30:28,730
so we have two different approaches the

633
00:30:26,660 --> 00:30:30,830
one gives the responsibility to the

634
00:30:28,730 --> 00:30:32,660
developers of the scripting host the

635
00:30:30,830 --> 00:30:36,720
other gives the responsibility to the

636
00:30:32,660 --> 00:30:38,290
developers of the scripting engine and

637
00:30:36,720 --> 00:30:41,000
[Music]

638
00:30:38,290 --> 00:30:43,639
now we have basically a couple of

639
00:30:41,000 --> 00:30:45,320
different teams of developers each of

640
00:30:43,640 --> 00:30:49,670
them thinks that the other is

641
00:30:45,320 --> 00:30:52,490
responsible for a security feature and

642
00:30:49,670 --> 00:30:53,750
what happens when we break those

643
00:30:52,490 --> 00:30:57,260
assumptions

644
00:30:53,750 --> 00:30:59,270
as I said before all of the scripting

645
00:30:57,260 --> 00:31:01,550
engines and screaming hosts because

646
00:30:59,270 --> 00:31:04,879
they're all active script and hat and

647
00:31:01,550 --> 00:31:07,250
they have the same interfaces or they

648
00:31:04,880 --> 00:31:09,890
could be used interchangeably meaning

649
00:31:07,250 --> 00:31:15,830
that I could actually use something like

650
00:31:09,890 --> 00:31:17,750
J script line which thinks that oh the

651
00:31:15,830 --> 00:31:20,750
developers of the scripting host will

652
00:31:17,750 --> 00:31:24,230
call my function and use it well under

653
00:31:20,750 --> 00:31:26,480
let's say ski C script which thinks that

654
00:31:24,230 --> 00:31:28,070
oh I'm just gonna give a pointer to the

655
00:31:26,480 --> 00:31:31,190
security function to the scripting

656
00:31:28,070 --> 00:31:34,610
engine and then it will call it and what

657
00:31:31,190 --> 00:31:38,210
happens when I do that is that nobody

658
00:31:34,610 --> 00:31:40,459
actually calls the function because the

659
00:31:38,210 --> 00:31:43,130
two teams of developers were absolutely

660
00:31:40,460 --> 00:31:45,410
sure that the other team implements the

661
00:31:43,130 --> 00:31:49,970
call to s-class allowed and again we

662
00:31:45,410 --> 00:31:51,830
have success by default the function is

663
00:31:49,970 --> 00:31:55,520
never called and our object is created

664
00:31:51,830 --> 00:31:56,960
with no checks whatsoever and it looks

665
00:31:55,520 --> 00:32:00,590
like this it's actually really easy to

666
00:31:56,960 --> 00:32:03,890
implement so in the first example we

667
00:32:00,590 --> 00:32:05,659
have me just trying to run a disallowed

668
00:32:03,890 --> 00:32:09,560
script and I get an error when I tried

669
00:32:05,660 --> 00:32:13,250
to create double skeptic shell and the

670
00:32:09,560 --> 00:32:17,899
second example actually shows me forcing

671
00:32:13,250 --> 00:32:20,810
C script to use the J script 9 scripting

672
00:32:17,900 --> 00:32:22,760
engine and the moment I do that its

673
00:32:20,810 --> 00:32:27,560
class allowed is never called and I'm

674
00:32:22,760 --> 00:32:30,280
able to run my script as usual and this

675
00:32:27,560 --> 00:32:33,889
is actually also or this was actually

676
00:32:30,280 --> 00:32:38,500
also this also worked for scriptlets

677
00:32:33,890 --> 00:32:41,720
because SE r ll also had the exact same

678
00:32:38,500 --> 00:32:45,580
implementation as c script so again if I

679
00:32:41,720 --> 00:32:49,640
try to run a script 9 others se robbed

680
00:32:45,580 --> 00:32:53,629
as class law is never called and it's a

681
00:32:49,640 --> 00:32:57,260
bit harder to do because C Rob can't

682
00:32:53,630 --> 00:33:00,440
really get a class ID and it makes a

683
00:32:57,260 --> 00:33:03,350
friendly name a proper ID and jscript 9

684
00:33:00,440 --> 00:33:06,680
doesn't have one so all I need to do is

685
00:33:03,350 --> 00:33:07,550
to register one so I just write it to

686
00:33:06,680 --> 00:33:10,340
the current use

687
00:33:07,550 --> 00:33:12,800
registry hive and I say oh now I have

688
00:33:10,340 --> 00:33:15,080
another engine called also J's trip and

689
00:33:12,800 --> 00:33:17,389
not just jscript so let's run a script

690
00:33:15,080 --> 00:33:23,360
it with also J script and again my code

691
00:33:17,390 --> 00:33:26,720
runs as expected so this actually was

692
00:33:23,360 --> 00:33:31,729
patched in November but look at this

693
00:33:26,720 --> 00:33:34,430
screenshot we have newly patched system

694
00:33:31,730 --> 00:33:39,620
with jscript 9 to which the patch was

695
00:33:34,430 --> 00:33:42,950
applied and the the top file is jscript

696
00:33:39,620 --> 00:33:45,050
9 the the past version and we see that

697
00:33:42,950 --> 00:33:48,920
the signature is valid the signer

698
00:33:45,050 --> 00:33:51,200
certificate is microsoft etc etc the

699
00:33:48,920 --> 00:33:53,420
bottom picture is the vulnerable version

700
00:33:51,200 --> 00:33:55,940
of jscript 9 the one with the same

701
00:33:53,420 --> 00:33:58,340
vulnerability that I just showed now

702
00:33:55,940 --> 00:34:00,890
this file is still signed by Microsoft

703
00:33:58,340 --> 00:34:03,169
and it has the same top level

704
00:34:00,890 --> 00:34:05,330
certificate meaning that it's still

705
00:34:03,170 --> 00:34:07,400
compliant with the same device policy

706
00:34:05,330 --> 00:34:11,540
the same device guard policy that I put

707
00:34:07,400 --> 00:34:15,590
in place and I'm as the person who could

708
00:34:11,540 --> 00:34:18,969
execute arbitrary commands I could just

709
00:34:15,590 --> 00:34:23,149
choose to execute the vulnerable version

710
00:34:18,969 --> 00:34:26,209
and this is actually what Jimmy Bain or

711
00:34:23,149 --> 00:34:29,060
perhaps discovered that you could take

712
00:34:26,210 --> 00:34:30,620
two of our bypasses just bring the older

713
00:34:29,060 --> 00:34:32,570
version the vulnerable version to the

714
00:34:30,620 --> 00:34:35,120
Machine and just use they have to bypass

715
00:34:32,570 --> 00:34:38,780
device guards so who cares that the

716
00:34:35,120 --> 00:34:40,460
vulnerability got patched if if the

717
00:34:38,780 --> 00:34:44,690
vulnerable version is still compliant

718
00:34:40,460 --> 00:34:48,800
for the policy and the way Microsoft

719
00:34:44,690 --> 00:34:53,960
tried to handle this is by adding the

720
00:34:48,800 --> 00:34:56,330
the suspect libraries to specific policy

721
00:34:53,960 --> 00:34:57,770
that you need to merge with your device

722
00:34:56,330 --> 00:35:01,220
guard policy that will explicitly

723
00:34:57,770 --> 00:35:06,040
disallow vulnerable versions but that's

724
00:35:01,220 --> 00:35:09,799
not a really elegant solution because

725
00:35:06,040 --> 00:35:13,009
there's a systemic problem with device

726
00:35:09,800 --> 00:35:17,060
guard that this was only one example of

727
00:35:13,010 --> 00:35:19,930
meaning that when you update and patch a

728
00:35:17,060 --> 00:35:24,970
device guard vulnerability

729
00:35:19,930 --> 00:35:29,049
maybe in some cases the the vulnerable

730
00:35:24,970 --> 00:35:33,040
code will still be usable and you could

731
00:35:29,050 --> 00:35:35,400
use stuff like code execution

732
00:35:33,040 --> 00:35:38,320
vulnerabilities that were patched as

733
00:35:35,400 --> 00:35:42,250
device guard bypasses so these for

734
00:35:38,320 --> 00:35:45,070
example are a bunch of our two project

735
00:35:42,250 --> 00:35:47,410
zero vulnerabilities and these are the

736
00:35:45,070 --> 00:35:48,760
script the versions of the scripting

737
00:35:47,410 --> 00:35:50,830
engines that have these vulnerabilities

738
00:35:48,760 --> 00:35:53,980
and again as you can see the signatures

739
00:35:50,830 --> 00:35:56,680
are valid so I could just use use after

740
00:35:53,980 --> 00:35:58,960
free vulnerability on an older library

741
00:35:56,680 --> 00:36:02,230
that's still compliant and again bypass

742
00:35:58,960 --> 00:36:05,220
device guard and it turns out that the

743
00:36:02,230 --> 00:36:09,010
scope of this issue is pretty much

744
00:36:05,220 --> 00:36:11,890
everything meaning that Windows doesn't

745
00:36:09,010 --> 00:36:14,680
really delete catalogs or explicitly

746
00:36:11,890 --> 00:36:17,190
disallow vulnerable versions of code

747
00:36:14,680 --> 00:36:22,319
when it updates stuff and when you have

748
00:36:17,190 --> 00:36:25,450
a feature that is only dependent on

749
00:36:22,320 --> 00:36:28,780
signatures and certificate this means

750
00:36:25,450 --> 00:36:31,180
that in some way patching is meaningless

751
00:36:28,780 --> 00:36:33,070
against device guard because you could

752
00:36:31,180 --> 00:36:37,000
always use the vulnerable code there's

753
00:36:33,070 --> 00:36:39,520
no privileged barrier all you need to do

754
00:36:37,000 --> 00:36:42,000
is just sometimes register it in the

755
00:36:39,520 --> 00:36:44,320
registry but sometimes maybe it's just

756
00:36:42,000 --> 00:36:46,810
maybe it's just a shitty executable and

757
00:36:44,320 --> 00:36:48,420
you just bring it from home you actually

758
00:36:46,810 --> 00:36:51,430
don't even need to bring it because

759
00:36:48,420 --> 00:36:53,320
almost all of these are still on your

760
00:36:51,430 --> 00:36:58,210
passion machine and the winner success

761
00:36:53,320 --> 00:37:00,970
folder you just need to find it so until

762
00:36:58,210 --> 00:37:05,830
this whole signature catalog hygiene

763
00:37:00,970 --> 00:37:08,740
issue is not solved you will see many

764
00:37:05,830 --> 00:37:10,750
more issues such as this such as the

765
00:37:08,740 --> 00:37:12,879
patch didn't really help me because I

766
00:37:10,750 --> 00:37:14,100
could just use the same punch ability

767
00:37:12,880 --> 00:37:17,530
all over again

768
00:37:14,100 --> 00:37:19,600
great so these were all of my bypasses

769
00:37:17,530 --> 00:37:21,870
for device guard but actually well

770
00:37:19,600 --> 00:37:24,160
nobody uses device guard like

771
00:37:21,870 --> 00:37:26,170
application whitelisting is terrible so

772
00:37:24,160 --> 00:37:29,680
let's try to use whatever I just showed

773
00:37:26,170 --> 00:37:31,630
you for other stuff first of all we

774
00:37:29,680 --> 00:37:33,310
these were a couple of alternative

775
00:37:31,630 --> 00:37:35,710
execution vectors which

776
00:37:33,310 --> 00:37:39,310
are a bit weird they say really

777
00:37:35,710 --> 00:37:42,270
sometimes don't look like other stuff

778
00:37:39,310 --> 00:37:45,820
that attackers used for example I

779
00:37:42,270 --> 00:37:50,800
haven't really seen office used directly

780
00:37:45,820 --> 00:37:53,560
for post exploitation that much and also

781
00:37:50,800 --> 00:37:56,080
some of those are actually am za masala

782
00:37:53,560 --> 00:37:58,180
bypasses for example jscript 9 isn't

783
00:37:56,080 --> 00:38:01,840
instrumented with a MSI meaning that if

784
00:37:58,180 --> 00:38:05,109
you run a script through a script 9 you

785
00:38:01,840 --> 00:38:09,820
will never call any kind of a MSI

786
00:38:05,110 --> 00:38:11,890
function so what I could do is just use

787
00:38:09,820 --> 00:38:14,290
the exact same exploit that I used with

788
00:38:11,890 --> 00:38:17,910
jscript 9 to bypass device guard and

789
00:38:14,290 --> 00:38:20,350
this is still a valid aims i bypassed

790
00:38:17,910 --> 00:38:24,520
and again it's just it's a single

791
00:38:20,350 --> 00:38:27,790
command line and I actually found out

792
00:38:24,520 --> 00:38:30,490
that you could use that you have a very

793
00:38:27,790 --> 00:38:33,850
similar MZ pie test with another library

794
00:38:30,490 --> 00:38:35,649
which is chakra DLL and that's another

795
00:38:33,850 --> 00:38:37,900
active script version of JavaScript

796
00:38:35,650 --> 00:38:40,870
because do you weren't enough now

797
00:38:37,900 --> 00:38:43,510
there's no way MSI for chakra but also

798
00:38:40,870 --> 00:38:45,790
there's no active X or qualms object

799
00:38:43,510 --> 00:38:47,590
functionality for chakra so you know you

800
00:38:45,790 --> 00:38:48,970
can't create up you if you can't create

801
00:38:47,590 --> 00:38:52,030
column objects you don't really need to

802
00:38:48,970 --> 00:38:54,640
monitor them but see script and W script

803
00:38:52,030 --> 00:38:57,520
actually expose a method called W script

804
00:38:54,640 --> 00:39:01,560
create object which is just a drop and

805
00:38:57,520 --> 00:39:04,000
replacement so if you have let's say

806
00:39:01,560 --> 00:39:07,120
dotnet - J script or something like that

807
00:39:04,000 --> 00:39:09,940
the only thing you'd need to modify in

808
00:39:07,120 --> 00:39:11,859
the script is to replace new

809
00:39:09,940 --> 00:39:14,950
activexobject with W script create

810
00:39:11,860 --> 00:39:16,870
object and then run it with a chakra dll

811
00:39:14,950 --> 00:39:20,500
library instead of jscript

812
00:39:16,870 --> 00:39:24,790
and that's it you are now invisible to

813
00:39:20,500 --> 00:39:27,340
AM Z and you actually could stick these

814
00:39:24,790 --> 00:39:29,940
things together because now we are able

815
00:39:27,340 --> 00:39:34,720
to remotely inject code into Excel

816
00:39:29,940 --> 00:39:37,660
tirelessly without any of the injection

817
00:39:34,720 --> 00:39:40,560
usual suspects because we're calling all

818
00:39:37,660 --> 00:39:44,740
of our functions from inside the process

819
00:39:40,560 --> 00:39:47,049
we could use this from cradle that's

820
00:39:44,740 --> 00:39:49,330
invisible to MZ etc

821
00:39:47,050 --> 00:39:51,130
cetera and actually most of the stuff

822
00:39:49,330 --> 00:39:54,060
that I showed here is invisible to AM Z

823
00:39:51,130 --> 00:39:57,880
because when you run macros tirelessly

824
00:39:54,060 --> 00:40:00,670
they're the they're never monitored by

825
00:39:57,880 --> 00:40:04,200
MZ so you could just use any of these

826
00:40:00,670 --> 00:40:06,880
and most of the newer Windows 10

827
00:40:04,200 --> 00:40:13,450
antivirus visibility features just to

828
00:40:06,880 --> 00:40:14,980
fail against it anyway so detecting

829
00:40:13,450 --> 00:40:17,109
these things is pretty easy because

830
00:40:14,980 --> 00:40:19,900
actually almost everything I've shown

831
00:40:17,110 --> 00:40:21,970
because it's used in the context of

832
00:40:19,900 --> 00:40:23,410
device guard is just command-line so you

833
00:40:21,970 --> 00:40:25,060
can't use it from your own code if you

834
00:40:23,410 --> 00:40:26,290
could use it from your own code you

835
00:40:25,060 --> 00:40:27,549
could probably run your own code and

836
00:40:26,290 --> 00:40:30,820
then you don't have the device guard

837
00:40:27,550 --> 00:40:33,670
problem so it's almost everything is

838
00:40:30,820 --> 00:40:36,580
command lines a bit registry monitoring

839
00:40:33,670 --> 00:40:39,370
may be a tiny bit of WI monitoring but

840
00:40:36,580 --> 00:40:41,890
well I could also switch out the W my

841
00:40:39,370 --> 00:40:43,960
stuff for other stuff but again you

842
00:40:41,890 --> 00:40:47,080
don't need any kind of special new

843
00:40:43,960 --> 00:40:49,840
visibility and you could pretty much do

844
00:40:47,080 --> 00:40:53,770
detect anything if you know how it looks

845
00:40:49,840 --> 00:40:55,630
now the way I think the feature should

846
00:40:53,770 --> 00:40:57,790
develop is first of all you should

847
00:40:55,630 --> 00:40:59,320
really lock down office because it's

848
00:40:57,790 --> 00:41:01,180
pretty ubiquitous and unless you want to

849
00:40:59,320 --> 00:41:03,610
say that oh device guard is actually a

850
00:41:01,180 --> 00:41:06,069
server feature you're gonna have office

851
00:41:03,610 --> 00:41:09,930
on your device guarding machines meaning

852
00:41:06,070 --> 00:41:13,750
that you'll have basically a ton of

853
00:41:09,930 --> 00:41:16,060
device guard for every day's the second

854
00:41:13,750 --> 00:41:18,250
thing is implementing a generic solution

855
00:41:16,060 --> 00:41:21,040
to catalog hygiene is extremely

856
00:41:18,250 --> 00:41:23,470
important because if patching is

857
00:41:21,040 --> 00:41:28,360
meaningless it means that you always

858
00:41:23,470 --> 00:41:31,029
have to you always have to keep track of

859
00:41:28,360 --> 00:41:33,070
every single vulnerability not only the

860
00:41:31,030 --> 00:41:35,530
device guard once and know that oh this

861
00:41:33,070 --> 00:41:38,710
could be used against me which again

862
00:41:35,530 --> 00:41:42,040
brings you back into monitoring

863
00:41:38,710 --> 00:41:44,110
everything also I'm not sure that I'm

864
00:41:42,040 --> 00:41:46,930
that I found the only bug with the

865
00:41:44,110 --> 00:41:49,150
inconsistent implementations of device

866
00:41:46,930 --> 00:41:51,160
guard for scripting so maybe if there

867
00:41:49,150 --> 00:41:55,980
was only one implementation it would be

868
00:41:51,160 --> 00:41:58,990
very much simpler to to maintain and

869
00:41:55,980 --> 00:42:00,849
finally I just think that what if I want

870
00:41:58,990 --> 00:42:04,238
to use Java what if I want

871
00:42:00,849 --> 00:42:05,970
use Python on my machine like the next

872
00:42:04,239 --> 00:42:08,109
step for the bicycle acting should be

873
00:42:05,970 --> 00:42:11,578
implementing something more generic that

874
00:42:08,109 --> 00:42:13,900
will allow programming language and

875
00:42:11,579 --> 00:42:17,519
scripting language developers to just

876
00:42:13,900 --> 00:42:20,710
plug-in device guard into the language

877
00:42:17,519 --> 00:42:23,558
and then just say well if my Python

878
00:42:20,710 --> 00:42:25,269
script is inside then just don't allow

879
00:42:23,559 --> 00:42:29,589
me to use c-types or something like that

880
00:42:25,269 --> 00:42:33,519
and anyway I think that's it for my talk

881
00:42:29,589 --> 00:42:36,549
I just want to say one more thing I want

882
00:42:33,519 --> 00:42:39,339
to add is there's tons of people

883
00:42:36,549 --> 00:42:42,489
research advice card they're extremely

884
00:42:39,339 --> 00:42:44,589
talented and they're doing some really

885
00:42:42,489 --> 00:42:47,079
cool work outside of the device card and

886
00:42:44,589 --> 00:42:49,630
you should probably follow these people

887
00:42:47,079 --> 00:42:51,099
and people on Twitter if you're in any

888
00:42:49,630 --> 00:42:55,529
way interested in application

889
00:42:51,099 --> 00:42:55,529
whitelisting or device card that's it

890
00:43:01,440 --> 00:43:03,500
you

