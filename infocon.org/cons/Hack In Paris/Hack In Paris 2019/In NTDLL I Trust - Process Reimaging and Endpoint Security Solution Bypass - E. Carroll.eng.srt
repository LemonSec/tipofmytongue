1
00:00:05,359 --> 00:00:11,160
okay so I'm delighted and very excited

2
00:00:07,830 --> 00:00:12,509
to be here today for two reasons firstly

3
00:00:11,160 --> 00:00:14,070
this is the first time speaking of hack

4
00:00:12,509 --> 00:00:15,540
in Paris so I'd like to thank the

5
00:00:14,070 --> 00:00:18,330
hacking paris team for the opportunity

6
00:00:15,540 --> 00:00:20,009
today and secondly I'm going to be

7
00:00:18,330 --> 00:00:22,528
discussing a for the opportunity he's

8
00:00:20,010 --> 00:00:24,600
demonstrated and also share with you for

9
00:00:22,529 --> 00:00:26,550
the first time here today I knew when

10
00:00:24,600 --> 00:00:29,060
does the defence evasion technique which

11
00:00:26,550 --> 00:00:31,590
has been discovered by McAfee ATR and

12
00:00:29,060 --> 00:00:34,519
who here is familiar with process

13
00:00:31,590 --> 00:00:38,149
manipulations such as process injection

14
00:00:34,520 --> 00:00:43,530
yeah I got a few hands process Halloween

15
00:00:38,149 --> 00:00:45,020
yeah process doppelganger few more so we

16
00:00:43,530 --> 00:00:48,899
got a few volunteers for a demo later

17
00:00:45,020 --> 00:00:51,270
yeah only joking okay so what if we had

18
00:00:48,899 --> 00:00:55,800
a technique that was much simpler to

19
00:00:51,270 --> 00:00:59,100
execute require no code injection didn't

20
00:00:55,800 --> 00:01:00,538
require any complicated ap is most

21
00:00:59,100 --> 00:01:02,640
likely affects every endpoint security

22
00:01:00,539 --> 00:01:06,600
solution impacted all versions of

23
00:01:02,640 --> 00:01:08,490
Windows what we do and we call a process

24
00:01:06,600 --> 00:01:10,559
reimaging and that's what we're going to

25
00:01:08,490 --> 00:01:11,460
demonstrate here today and we're also

26
00:01:10,560 --> 00:01:12,570
going to talk about some of the

27
00:01:11,460 --> 00:01:16,589
mitigations and how you can protect

28
00:01:12,570 --> 00:01:21,298
yourself so if you cast your minds back

29
00:01:16,590 --> 00:01:22,979
to April May 2018 does that resonate

30
00:01:21,299 --> 00:01:28,080
would anybody from a ransomware

31
00:01:22,979 --> 00:01:29,759
perspective so it was roughly five

32
00:01:28,080 --> 00:01:31,560
months after process topic gang was

33
00:01:29,759 --> 00:01:34,530
disclosed at blackhat it became

34
00:01:31,560 --> 00:01:37,110
weaponized with cynic ransomware and at

35
00:01:34,530 --> 00:01:39,600
the time myself and an ATR teammate a

36
00:01:37,110 --> 00:01:42,960
man Ryan were analyzing cynic ransomware

37
00:01:39,600 --> 00:01:45,298
in the lab and what we discovered was it

38
00:01:42,960 --> 00:01:47,369
was using processed doppelganger but if

39
00:01:45,299 --> 00:01:50,880
you blocked doppelganger it would fall

40
00:01:47,369 --> 00:01:52,530
back to process Halloween okay so at

41
00:01:50,880 --> 00:01:53,520
this point you may be asking well what

42
00:01:52,530 --> 00:01:55,409
is the relevance and what is the

43
00:01:53,520 --> 00:01:57,780
importance here today and why does it

44
00:01:55,409 --> 00:01:59,399
matter process reimaging well if process

45
00:01:57,780 --> 00:02:01,170
DARPA ganging was weaponized only five

46
00:01:59,399 --> 00:02:02,280
months out have been disclosed there's a

47
00:02:01,170 --> 00:02:05,579
high likelihood this is going to be

48
00:02:02,280 --> 00:02:07,140
weaponized also um and I think it really

49
00:02:05,579 --> 00:02:09,209
all gonna be amazed how simple this is

50
00:02:07,140 --> 00:02:10,949
to execute I'll be pretty complicated

51
00:02:09,209 --> 00:02:12,720
under the hood and we go through some of

52
00:02:10,949 --> 00:02:13,630
the kernel drivers are the kernel api is

53
00:02:12,720 --> 00:02:15,370
and how it works

54
00:02:13,630 --> 00:02:17,070
but it is relatively simple to execute

55
00:02:15,370 --> 00:02:19,090
um

56
00:02:17,070 --> 00:02:21,670
so later on we're going to do a live

57
00:02:19,090 --> 00:02:24,160
demo and we're going to show how we can

58
00:02:21,670 --> 00:02:26,500
bypass Windows Defender with process

59
00:02:24,160 --> 00:02:29,950
reimaging the reason we use Windows

60
00:02:26,500 --> 00:02:31,900
Defender is because process reimaging

61
00:02:29,950 --> 00:02:34,239
impacts all versions of Windows and

62
00:02:31,900 --> 00:02:37,510
Windows Defender is a default security

63
00:02:34,240 --> 00:02:38,680
solution on Windows now I just want to

64
00:02:37,510 --> 00:02:40,959
clarify before we get into the

65
00:02:38,680 --> 00:02:43,240
presentation when we speak about Windows

66
00:02:40,960 --> 00:02:45,310
Defender it's explicitly in relation to

67
00:02:43,240 --> 00:02:47,380
processor imaging we're making no

68
00:02:45,310 --> 00:02:50,320
reference to Windows defenders ability

69
00:02:47,380 --> 00:02:53,100
to detect or protect against process

70
00:02:50,320 --> 00:02:55,900
Halloween a process stop again

71
00:02:53,100 --> 00:02:58,150
so before we kind of get into the detail

72
00:02:55,900 --> 00:03:00,310
I'd like to get some attribution done so

73
00:02:58,150 --> 00:03:03,190
myself I did all the reverse engineering

74
00:03:00,310 --> 00:03:05,440
understand what was actually happening

75
00:03:03,190 --> 00:03:08,200
under the hood root cause and also the

76
00:03:05,440 --> 00:03:10,120
impact and detect and analysis and then

77
00:03:08,200 --> 00:03:11,320
Steve Hernan who's one of our kernel

78
00:03:10,120 --> 00:03:13,510
developers he did some of the proof

79
00:03:11,320 --> 00:03:16,269
concept code and he also designed a fix

80
00:03:13,510 --> 00:03:17,560
for this and Cedric Cotchin who maybe a

81
00:03:16,270 --> 00:03:19,750
lot of people here today know he's a

82
00:03:17,560 --> 00:03:20,740
Parisien living in Hillsborough in

83
00:03:19,750 --> 00:03:22,690
Portland

84
00:03:20,740 --> 00:03:25,810
Cedric actually discovered the technique

85
00:03:22,690 --> 00:03:27,670
and how to execute it and then Steve of

86
00:03:25,810 --> 00:03:30,760
Olney who's the head of vulnerability

87
00:03:27,670 --> 00:03:32,649
research for McAfee ATR or advanced her

88
00:03:30,760 --> 00:03:34,030
research Steve handle all the

89
00:03:32,650 --> 00:03:37,840
communications and the disclosure

90
00:03:34,030 --> 00:03:40,570
process so just a little bit about

91
00:03:37,840 --> 00:03:42,340
myself and who I am so I go by the name

92
00:03:40,570 --> 00:03:44,500
EE tree night on Twitter probably

93
00:03:42,340 --> 00:03:46,180
connected with a few people here I've

94
00:03:44,500 --> 00:03:49,450
been working in technology for about

95
00:03:46,180 --> 00:03:51,610
twenty years or so at first ten years I

96
00:03:49,450 --> 00:03:53,799
worked as an electronic engineer across

97
00:03:51,610 --> 00:03:55,780
the semiconductor and also cause the

98
00:03:53,800 --> 00:03:58,600
medical device industry and during that

99
00:03:55,780 --> 00:04:00,640
time I worked across hardware and

100
00:03:58,600 --> 00:04:03,280
software and then I moved about ten

101
00:04:00,640 --> 00:04:05,230
years ago I moved into security and and

102
00:04:03,280 --> 00:04:08,290
since then I've worked across product

103
00:04:05,230 --> 00:04:11,140
security IT security as an individual

104
00:04:08,290 --> 00:04:12,730
contributor team lead and manager and

105
00:04:11,140 --> 00:04:14,260
that's given me kind of really good

106
00:04:12,730 --> 00:04:17,789
perspective before moving into a

107
00:04:14,260 --> 00:04:20,469
security research role within McAfee ITR

108
00:04:17,790 --> 00:04:22,510
so over the next 40 minutes or so we're

109
00:04:20,470 --> 00:04:24,790
going to discuss an overview what

110
00:04:22,510 --> 00:04:26,620
process reimaging is then we talk about

111
00:04:24,790 --> 00:04:27,669
the AV scanners and how they relate to

112
00:04:26,620 --> 00:04:29,260
process room

113
00:04:27,669 --> 00:04:31,889
we'll talk about the major attack

114
00:04:29,260 --> 00:04:33,520
framework and defense evasion and then

115
00:04:31,889 --> 00:04:35,290
hypothetically what would process

116
00:04:33,520 --> 00:04:37,960
reimaging look like if it was weaponized

117
00:04:35,290 --> 00:04:39,280
by syn/ack ransomware and then we get

118
00:04:37,960 --> 00:04:40,960
into a bit more detail under the hood

119
00:04:39,280 --> 00:04:44,020
what's happening with the kernel api's

120
00:04:40,960 --> 00:04:45,370
they're exposed by ntdll and why this is

121
00:04:44,020 --> 00:04:47,740
actually happening and why we can do

122
00:04:45,370 --> 00:04:49,900
this technique and then we will finish

123
00:04:47,740 --> 00:04:51,910
off with a live demo demo God's

124
00:04:49,900 --> 00:04:53,710
permitting but hopefully all goes well

125
00:04:51,910 --> 00:04:55,180
and I'm sure it will and I think you'll

126
00:04:53,710 --> 00:04:57,940
really see how simple this technique is

127
00:04:55,180 --> 00:04:59,560
but very impactful and then we'll finish

128
00:04:57,940 --> 00:05:02,410
up with some impact and protection

129
00:04:59,560 --> 00:05:04,270
mitigations so Microsoft did give an

130
00:05:02,410 --> 00:05:07,720
update for this in the June cumulative

131
00:05:04,270 --> 00:05:10,320
update but it only resolves a small

132
00:05:07,720 --> 00:05:12,820
piece of this bypass and it only

133
00:05:10,320 --> 00:05:14,500
mitigates a Windows Defender it doesn't

134
00:05:12,820 --> 00:05:17,349
fix that the operating system level so

135
00:05:14,500 --> 00:05:19,000
we'll talk about that later on so to

136
00:05:17,350 --> 00:05:21,850
give an over your what process reimaging

137
00:05:19,000 --> 00:05:24,460
is exactly it's exactly what the name

138
00:05:21,850 --> 00:05:26,470
says it takes a process and it reaches

139
00:05:24,460 --> 00:05:29,320
it and associates the process with a

140
00:05:26,470 --> 00:05:30,669
different file on disk and if you take

141
00:05:29,320 --> 00:05:31,270
about an employee security solution why

142
00:05:30,669 --> 00:05:33,250
does that matter

143
00:05:31,270 --> 00:05:34,960
well there's generally two use cases

144
00:05:33,250 --> 00:05:37,150
where an operating system will depend

145
00:05:34,960 --> 00:05:39,640
our sorry an endpoint security solution

146
00:05:37,150 --> 00:05:41,739
will depend on an operating system it

147
00:05:39,640 --> 00:05:43,990
will depend on her to verify what an

148
00:05:41,740 --> 00:05:46,780
executing process has any malicious

149
00:05:43,990 --> 00:05:49,270
files associate with it on disk but it

150
00:05:46,780 --> 00:05:51,460
may also look to verify whether that

151
00:05:49,270 --> 00:05:53,799
process can be trusted if it's signed by

152
00:05:51,460 --> 00:05:55,239
it's by for example Microsoft or

153
00:05:53,800 --> 00:05:56,710
wherever the case may be and it's

154
00:05:55,240 --> 00:05:58,780
trusted to call in to its infrastructure

155
00:05:56,710 --> 00:06:00,940
so they're generally due to use cases

156
00:05:58,780 --> 00:06:03,638
now I do want to highlight here as well

157
00:06:00,940 --> 00:06:06,850
that process reimaging targets non EDR

158
00:06:03,639 --> 00:06:08,350
type as security solutions so with EDR

159
00:06:06,850 --> 00:06:10,690
type solutions if they're configured

160
00:06:08,350 --> 00:06:13,120
correctly they can trace processes and

161
00:06:10,690 --> 00:06:15,610
can detect this so this would target

162
00:06:13,120 --> 00:06:18,310
specifically consumers and people who do

163
00:06:15,610 --> 00:06:21,039
not have a deal ADR such as small medium

164
00:06:18,310 --> 00:06:22,510
enterprises as I mentioned it's

165
00:06:21,039 --> 00:06:26,050
equivalent an impact to process

166
00:06:22,510 --> 00:06:28,090
following a process stop again and it's

167
00:06:26,050 --> 00:06:29,440
highly likely that every endpoint

168
00:06:28,090 --> 00:06:31,179
security solution is vulnerable to this

169
00:06:29,440 --> 00:06:35,710
because they're going to be dependent on

170
00:06:31,180 --> 00:06:38,680
these api's ok one last thing I wanted

171
00:06:35,710 --> 00:06:40,239
to say on this is that what's really

172
00:06:38,680 --> 00:06:40,820
important here is that once this process

173
00:06:40,240 --> 00:06:43,700
gets

174
00:06:40,820 --> 00:06:45,500
securing and weary image it then until

175
00:06:43,700 --> 00:06:47,479
there's a signature update or even after

176
00:06:45,500 --> 00:06:53,120
a signature update you need to do a full

177
00:06:47,480 --> 00:06:54,830
scan or a reboot to detect this so we

178
00:06:53,120 --> 00:06:57,320
talked about AV scanners so on the

179
00:06:54,830 --> 00:06:59,359
left-hand side here you can see this is

180
00:06:57,320 --> 00:07:02,300
the general flow for process getting

181
00:06:59,360 --> 00:07:05,300
created on Windows and when when an AV

182
00:07:02,300 --> 00:07:08,810
engine is active it will scan a file for

183
00:07:05,300 --> 00:07:11,210
malicious code at file create at section

184
00:07:08,810 --> 00:07:12,710
create an image load once it has a

185
00:07:11,210 --> 00:07:16,700
signature it will detect malicious a

186
00:07:12,710 --> 00:07:20,419
malicious file now if it doesn't if it

187
00:07:16,700 --> 00:07:24,560
doesn't have a signature and it will not

188
00:07:20,420 --> 00:07:26,630
detect at those points and at that stage

189
00:07:24,560 --> 00:07:28,010
the process will execute and then the

190
00:07:26,630 --> 00:07:29,870
endpoint security solution becomes

191
00:07:28,010 --> 00:07:32,060
dependent on the operating system API is

192
00:07:29,870 --> 00:07:34,190
to verify the attributes of that process

193
00:07:32,060 --> 00:07:36,260
and what I mean by the attributes is

194
00:07:34,190 --> 00:07:41,060
that whether that process has malicious

195
00:07:36,260 --> 00:07:43,130
files and discs associated with it sorry

196
00:07:41,060 --> 00:07:45,800
so just to define process reimaging

197
00:07:43,130 --> 00:07:47,300
exactly what it is so the windows

198
00:07:45,800 --> 00:07:49,940
currently API is returned stale and

199
00:07:47,300 --> 00:07:51,860
inconsistent file object Pat's which

200
00:07:49,940 --> 00:07:53,900
enable aniversary to bypass Windows

201
00:07:51,860 --> 00:07:54,380
operating system process attribute Farra

202
00:07:53,900 --> 00:07:56,479
fication

203
00:07:54,380 --> 00:07:59,360
and right now it is actually no

204
00:07:56,480 --> 00:08:00,950
documented way to securely identify the

205
00:07:59,360 --> 00:08:06,140
files associated with a process and disk

206
00:08:00,950 --> 00:08:07,969
in Windows so when we talk we talk about

207
00:08:06,140 --> 00:08:10,729
the mitre attack framework and and the

208
00:08:07,970 --> 00:08:12,790
different domains within it the mitre

209
00:08:10,730 --> 00:08:15,530
attack framework is a post exploitation

210
00:08:12,790 --> 00:08:17,420
enumeration techniques which are used by

211
00:08:15,530 --> 00:08:20,150
real world adversary's on windows linux

212
00:08:17,420 --> 00:08:22,820
and mac and what's an adversary gets

213
00:08:20,150 --> 00:08:24,830
code execution on the box that obviously

214
00:08:22,820 --> 00:08:26,870
want to evade detection using defense

215
00:08:24,830 --> 00:08:28,729
evasion techniques such as process

216
00:08:26,870 --> 00:08:32,810
hollowing and DARPA ganging and our

217
00:08:28,730 --> 00:08:35,690
process reimaging do we have any Game of

218
00:08:32,809 --> 00:08:37,968
Thrones fans here today yeah everybody

219
00:08:35,690 --> 00:08:41,320
happy with the last season all right

220
00:08:37,969 --> 00:08:46,020
maybe I shouldn't ask that question but

221
00:08:41,320 --> 00:08:47,670
everybody trust this guy here yeah

222
00:08:46,020 --> 00:08:50,250
so he's Irish but I still don't trust

223
00:08:47,670 --> 00:08:51,420
him so Sansa depended on this guy and

224
00:08:50,250 --> 00:08:53,190
she trusted him but she wasn't

225
00:08:51,420 --> 00:08:54,959
completely blind to him right and any

226
00:08:53,190 --> 00:08:56,760
Game of Thrones fans know how would I

227
00:08:54,959 --> 00:08:59,399
tended up in the finish the reason I

228
00:08:56,760 --> 00:09:00,779
show this is because I've meant heard a

229
00:08:59,399 --> 00:09:02,310
lot of product engineers and security

230
00:09:00,779 --> 00:09:04,050
engineers and one of the first things I

231
00:09:02,310 --> 00:09:05,790
always say when you're looking at a

232
00:09:04,050 --> 00:09:08,550
system you got to understand the

233
00:09:05,790 --> 00:09:10,500
security model how does it work what are

234
00:09:08,550 --> 00:09:11,969
the main dependencies how can you break

235
00:09:10,500 --> 00:09:14,240
that system what does it really depend

236
00:09:11,970 --> 00:09:17,670
on that may be in or out of your control

237
00:09:14,240 --> 00:09:19,080
and if you think about endpoints sorry

238
00:09:17,670 --> 00:09:21,140
if you think about the endpoint security

239
00:09:19,080 --> 00:09:22,950
solutions

240
00:09:21,140 --> 00:09:24,569
sorry it's around blunder

241
00:09:22,950 --> 00:09:26,580
if you think about the endpoint security

242
00:09:24,570 --> 00:09:28,950
solutions they place inherent trust in

243
00:09:26,580 --> 00:09:30,089
the operating system for capabilities

244
00:09:28,950 --> 00:09:33,029
such as digital signature verification

245
00:09:30,089 --> 00:09:36,390
and also for process attribute

246
00:09:33,029 --> 00:09:39,149
verification so some time back the team

247
00:09:36,390 --> 00:09:41,189
at Spectre ops and subverted the Windows

248
00:09:39,149 --> 00:09:43,709
operating system for digital signature

249
00:09:41,190 --> 00:09:45,810
verification and similarly what we've

250
00:09:43,709 --> 00:09:47,790
done in ATR is we no subvert the

251
00:09:45,810 --> 00:09:52,670
operating system for process attribute

252
00:09:47,790 --> 00:09:54,839
certification with process reimaging so

253
00:09:52,670 --> 00:09:57,569
just to cast our minds back again I'm

254
00:09:54,839 --> 00:09:59,760
going to go back to May 2018 and talk

255
00:09:57,570 --> 00:10:03,329
about use cynic ransomware as a case

256
00:09:59,760 --> 00:10:04,439
study and a reason going to do that is

257
00:10:03,329 --> 00:10:07,349
because we're going to compare and

258
00:10:04,440 --> 00:10:09,089
contrast to set ourselves off for

259
00:10:07,350 --> 00:10:10,709
understanding the demo of what Halloween

260
00:10:09,089 --> 00:10:15,300
and doppelganger look like compared to

261
00:10:10,709 --> 00:10:18,359
process reimaging so when we look at a

262
00:10:15,300 --> 00:10:20,699
typical ransomware generally you know it

263
00:10:18,360 --> 00:10:22,140
needs some initial or I suppose an

264
00:10:20,700 --> 00:10:24,240
attack but in particular for cynic

265
00:10:22,140 --> 00:10:26,069
ransomware it generally needs some kind

266
00:10:24,240 --> 00:10:28,560
of an infection vector our initial

267
00:10:26,070 --> 00:10:31,260
access such as a drive-by compromise or

268
00:10:28,560 --> 00:10:32,250
a phishing attack and then it needs to

269
00:10:31,260 --> 00:10:34,410
get a code execution

270
00:10:32,250 --> 00:10:35,760
once it gets code execution then it's

271
00:10:34,410 --> 00:10:37,290
going to try and evade itself from the

272
00:10:35,760 --> 00:10:39,060
operating system from our from the

273
00:10:37,290 --> 00:10:41,730
endpoint security solution from

274
00:10:39,060 --> 00:10:43,859
detection now if you look at how

275
00:10:41,730 --> 00:10:45,480
processed DARPA ganging worked it had a

276
00:10:43,860 --> 00:10:48,779
dropper for argument's sake we call it's

277
00:10:45,480 --> 00:10:53,040
enacted exe and then it had a trusted

278
00:10:48,779 --> 00:10:54,900
binary called MSI exec now for process

279
00:10:53,040 --> 00:10:56,459
hollowing as I'm sure a lot of people

280
00:10:54,900 --> 00:10:58,529
know here today it starts off by

281
00:10:56,459 --> 00:10:59,339
creating the process in suspended mode

282
00:10:58,529 --> 00:11:01,530
so

283
00:10:59,340 --> 00:11:04,800
uses the trusted process MSI execu and

284
00:11:01,530 --> 00:11:06,990
then it uses numerous API is where by a

285
00:11:04,800 --> 00:11:11,699
hollow Celtic Ohio's out the memory and

286
00:11:06,990 --> 00:11:13,650
then replace it malicious code now what

287
00:11:11,700 --> 00:11:16,440
if the endpoint security solution fails

288
00:11:13,650 --> 00:11:19,140
to detect this dropper then the process

289
00:11:16,440 --> 00:11:20,940
is allowed to execute signatures get

290
00:11:19,140 --> 00:11:23,850
updated but once the process is

291
00:11:20,940 --> 00:11:25,650
executing then it's reliant on the up

292
00:11:23,850 --> 00:11:27,180
its operating system to tell it

293
00:11:25,650 --> 00:11:29,430
information or attributes about that

294
00:11:27,180 --> 00:11:31,290
process and so this is where process

295
00:11:29,430 --> 00:11:33,209
reimaging comes in and why these aps are

296
00:11:31,290 --> 00:11:36,449
important because you now have four

297
00:11:33,210 --> 00:11:38,460
api's which we look at in a moment which

298
00:11:36,450 --> 00:11:40,470
are required which the endpoint security

299
00:11:38,460 --> 00:11:42,260
solution depends on to give the

300
00:11:40,470 --> 00:11:46,590
information about the running process

301
00:11:42,260 --> 00:11:49,080
and so the operating system now gets msi

302
00:11:46,590 --> 00:11:50,190
exact back which we expect right process

303
00:11:49,080 --> 00:11:53,310
Halloween we know how that technique

304
00:11:50,190 --> 00:11:54,960
works and now the adversary is free to

305
00:11:53,310 --> 00:11:59,670
act in their objectives because that's a

306
00:11:54,960 --> 00:12:03,120
trusted process now if we talk about

307
00:11:59,670 --> 00:12:05,449
process doppelganger same approach here

308
00:12:03,120 --> 00:12:08,550
exactly the same binaries being used

309
00:12:05,450 --> 00:12:11,010
albeit a little different a technique it

310
00:12:08,550 --> 00:12:16,920
also starts with a trusted process MSI

311
00:12:11,010 --> 00:12:19,920
exec and then we have it uses the

312
00:12:16,920 --> 00:12:21,030
Windows transaction file ap is a little

313
00:12:19,920 --> 00:12:22,770
bit different process following about

314
00:12:21,030 --> 00:12:24,089
the same end goal and impact where can

315
00:12:22,770 --> 00:12:28,020
get malicious code executing in a

316
00:12:24,090 --> 00:12:29,310
trusted process and once again once the

317
00:12:28,020 --> 00:12:32,579
endpoint security solution fails to

318
00:12:29,310 --> 00:12:35,420
detect that wrapper then the operating

319
00:12:32,580 --> 00:12:38,220
system will return back and say it's MSI

320
00:12:35,420 --> 00:12:39,630
executing and is trusted and once again

321
00:12:38,220 --> 00:12:44,430
the adversary's free to act in their

322
00:12:39,630 --> 00:12:46,740
objectives so let's compare and contrast

323
00:12:44,430 --> 00:12:50,550
what they look like with process

324
00:12:46,740 --> 00:12:52,140
reimaging so process reimaging has the

325
00:12:50,550 --> 00:12:53,189
exact same prerequisites as process

326
00:12:52,140 --> 00:12:55,080
Halloween or doppelganger

327
00:12:53,190 --> 00:12:57,770
you need to have code execution on the

328
00:12:55,080 --> 00:13:00,690
box first and then it's about evading

329
00:12:57,770 --> 00:13:02,010
detection so they've already gained

330
00:13:00,690 --> 00:13:04,650
access to machine and the GAR code

331
00:13:02,010 --> 00:13:06,360
execution now the tree attack vectors

332
00:13:04,650 --> 00:13:07,350
are variants to process reimaging and

333
00:13:06,360 --> 00:13:09,150
we'll see this later

334
00:13:07,350 --> 00:13:10,980
when we look under the hood and also

335
00:13:09,150 --> 00:13:13,329
when we look at when we see the demo

336
00:13:10,980 --> 00:13:15,519
alive but there's a file path

337
00:13:13,330 --> 00:13:16,930
where we sit it's as simple as rename

338
00:13:15,519 --> 00:13:19,269
the file part of the process that's

339
00:13:16,930 --> 00:13:21,219
executing or you simply the second one

340
00:13:19,269 --> 00:13:24,160
you rename the file name and then the

341
00:13:21,220 --> 00:13:26,380
third one can use either the father file

342
00:13:24,160 --> 00:13:28,420
name or file path but it just uses Lord

343
00:13:26,380 --> 00:13:30,760
library to reuse the same object in

344
00:13:28,420 --> 00:13:32,290
memory it's not as impactful but we will

345
00:13:30,760 --> 00:13:34,269
just highlight it here today it is a

346
00:13:32,290 --> 00:13:39,250
variant of it but it still requires the

347
00:13:34,269 --> 00:13:41,230
change to file name or fall apart okay

348
00:13:39,250 --> 00:13:43,269
so what would Cenac ransomware look like

349
00:13:41,230 --> 00:13:45,279
if it had weaponized process reimaging

350
00:13:43,269 --> 00:13:46,680
you know and the reason this is so

351
00:13:45,279 --> 00:13:48,820
important if you if you think about

352
00:13:46,680 --> 00:13:50,529
defense evasion techniques right there's

353
00:13:48,820 --> 00:13:52,630
many techniques in the miter attack

354
00:13:50,529 --> 00:13:54,370
framework and with sin act we saw

355
00:13:52,630 --> 00:13:56,110
process topic gang and hollowing being

356
00:13:54,370 --> 00:13:57,640
used together right not just using one

357
00:13:56,110 --> 00:14:01,029
technique anymore they're using many

358
00:13:57,640 --> 00:14:02,589
techniques so this is another both of

359
00:14:01,029 --> 00:14:04,180
our arrow in a way and we need to make

360
00:14:02,589 --> 00:14:05,170
sure we're protected against this so

361
00:14:04,180 --> 00:14:07,060
we'll just go through how did the

362
00:14:05,170 --> 00:14:09,160
mechanics of this attack would work or

363
00:14:07,060 --> 00:14:10,899
this technique so it's a little bit

364
00:14:09,160 --> 00:14:12,880
different so instead of starting with a

365
00:14:10,899 --> 00:14:15,130
trusted process it starts with a

366
00:14:12,880 --> 00:14:17,170
malicious exe so if you think about what

367
00:14:15,130 --> 00:14:19,209
would happen here is same as before

368
00:14:17,170 --> 00:14:20,649
you've the same two files here we have

369
00:14:19,209 --> 00:14:24,969
an additional undetected file here at

370
00:14:20,649 --> 00:14:27,579
disrupt the disk now instead of having

371
00:14:24,970 --> 00:14:29,079
numerous API is here noisy API is that

372
00:14:27,579 --> 00:14:31,899
can potentially be detected by yarra

373
00:14:29,079 --> 00:14:34,270
what we have are very very simple API is

374
00:14:31,899 --> 00:14:36,130
which would be very hard to detect yara

375
00:14:34,270 --> 00:14:38,589
because they would be very noisy we'll

376
00:14:36,130 --> 00:14:40,720
be seeing typically in a binary and

377
00:14:38,589 --> 00:14:44,380
they're used to copy and move a file

378
00:14:40,720 --> 00:14:45,940
around on the file system and then

379
00:14:44,380 --> 00:14:47,290
what's the dropper once the endpoint

380
00:14:45,940 --> 00:14:49,570
security solution fails to take the

381
00:14:47,290 --> 00:14:52,750
dropper we get that malicious process

382
00:14:49,570 --> 00:14:56,589
executing they update their signatures

383
00:14:52,750 --> 00:14:59,020
and then they query the operating

384
00:14:56,589 --> 00:15:01,149
operating system API is for the

385
00:14:59,020 --> 00:15:03,279
executing process name and you can see

386
00:15:01,149 --> 00:15:05,560
here right there's a malicious process

387
00:15:03,279 --> 00:15:07,510
executing we just don't we don't detect

388
00:15:05,560 --> 00:15:09,459
it right the the operating system gives

389
00:15:07,510 --> 00:15:10,810
the wrong information back what we

390
00:15:09,459 --> 00:15:12,729
actually see from an operating system

391
00:15:10,810 --> 00:15:14,109
perspective this MSI exactly and we

392
00:15:12,730 --> 00:15:16,390
actually see that in the demo we'll see

393
00:15:14,110 --> 00:15:17,649
the malicious process executing and then

394
00:15:16,390 --> 00:15:18,670
we reimage it you actually see the

395
00:15:17,649 --> 00:15:20,949
operating system it gets a different

396
00:15:18,670 --> 00:15:22,479
view of it so we get the exact same

397
00:15:20,949 --> 00:15:24,189
impact this process Halloween on top

398
00:15:22,480 --> 00:15:26,380
again

399
00:15:24,190 --> 00:15:31,300
and once again they're free to act on

400
00:15:26,380 --> 00:15:33,700
their objectives so we go a little bit

401
00:15:31,300 --> 00:15:34,810
deeper now on the colonel AP is and

402
00:15:33,700 --> 00:15:39,430
what's actually happening under the hood

403
00:15:34,810 --> 00:15:41,560
and a reason for this so there's

404
00:15:39,430 --> 00:15:43,120
numerous api's involved here we see

405
00:15:41,560 --> 00:15:45,579
summary table in a moment but there's

406
00:15:43,120 --> 00:15:48,370
four particular ap is the forestry API

407
00:15:45,580 --> 00:15:51,250
is here we have get module file name we

408
00:15:48,370 --> 00:15:54,070
have process image file name and we have

409
00:15:51,250 --> 00:15:59,020
query full process image file name and

410
00:15:54,070 --> 00:16:01,870
ultimately they all call in to the

411
00:15:59,020 --> 00:16:04,050
Windows kernel query information process

412
00:16:01,870 --> 00:16:05,950
which is exposed by NC dll and

413
00:16:04,050 --> 00:16:07,420
ultimately that goes into the Windows

414
00:16:05,950 --> 00:16:09,300
kernel which is like a switch table a

415
00:16:07,420 --> 00:16:12,400
large switch table and gives you back

416
00:16:09,300 --> 00:16:13,750
depending on the API you call it will

417
00:16:12,400 --> 00:16:18,000
give you back information from the e

418
00:16:13,750 --> 00:16:20,080
process structure okay now the reason

419
00:16:18,000 --> 00:16:22,240
process reimaging can actually happen

420
00:16:20,080 --> 00:16:24,790
this technique is because windows is

421
00:16:22,240 --> 00:16:27,280
inconsistent right what's we imagery mr.

422
00:16:24,790 --> 00:16:28,990
process these fields hold different

423
00:16:27,280 --> 00:16:32,199
values for the file name and file path

424
00:16:28,990 --> 00:16:33,820
once you rename them on a disk you get

425
00:16:32,200 --> 00:16:36,190
into consistent values back here and

426
00:16:33,820 --> 00:16:38,560
depending on the API you called you will

427
00:16:36,190 --> 00:16:39,580
get the wrong file name or file path so

428
00:16:38,560 --> 00:16:41,770
the very high level that's what's

429
00:16:39,580 --> 00:16:44,230
happening so we have these three api's

430
00:16:41,770 --> 00:16:46,120
calling in the query information process

431
00:16:44,230 --> 00:16:48,340
and then they get information back from

432
00:16:46,120 --> 00:16:51,270
the e process structure from different

433
00:16:48,340 --> 00:16:54,220
fields depending on the API you called

434
00:16:51,270 --> 00:16:57,880
and a fort API is get mapped file name

435
00:16:54,220 --> 00:17:00,850
and this API calls into another ntdll

436
00:16:57,880 --> 00:17:03,100
api which is called NT query virtual

437
00:17:00,850 --> 00:17:05,500
memory and I get this information from

438
00:17:03,100 --> 00:17:09,520
the a process a process structure to vad

439
00:17:05,500 --> 00:17:12,250
our virtual address descriptor ok so

440
00:17:09,520 --> 00:17:14,139
there the for api is and at a high level

441
00:17:12,250 --> 00:17:16,810
10,000 foot level that's kind of what

442
00:17:14,140 --> 00:17:21,310
we're seeing in Ida and what's actually

443
00:17:16,810 --> 00:17:24,099
happening underneath okay so to

444
00:17:21,310 --> 00:17:28,419
summarize that on the left hand side

445
00:17:24,099 --> 00:17:31,149
here we have for AP is the specific API

446
00:17:28,420 --> 00:17:33,130
I get module filename get map file name

447
00:17:31,150 --> 00:17:34,860
get process image file name and query

448
00:17:33,130 --> 00:17:37,840
full process image file name and

449
00:17:34,860 --> 00:17:40,600
depending on which API you call

450
00:17:37,840 --> 00:17:41,799
once you reimage a process every version

451
00:17:40,600 --> 00:17:43,740
of Windows will give you back the wrong

452
00:17:41,799 --> 00:17:48,510
file path if you rename the file part

453
00:17:43,740 --> 00:17:50,500
but any version less than Windows 10 and

454
00:17:48,510 --> 00:17:54,309
depending on which one you use will give

455
00:17:50,500 --> 00:17:56,110
it a round file name okay and one thing

456
00:17:54,309 --> 00:17:58,658
to note here is sorry for just go back

457
00:17:56,110 --> 00:18:01,178
one slide on Windows 10 a new field was

458
00:17:58,659 --> 00:18:04,299
added to the process structure and it's

459
00:18:01,179 --> 00:18:07,230
the image file pointer field so in

460
00:18:04,299 --> 00:18:09,400
Windows 10 if you call the write API

461
00:18:07,230 --> 00:18:10,809
this field here will always give you the

462
00:18:09,400 --> 00:18:12,760
right file name when you really rename

463
00:18:10,809 --> 00:18:15,039
it but for some win the reason Windows

464
00:18:12,760 --> 00:18:16,299
Defender does not use it so even though

465
00:18:15,039 --> 00:18:18,340
they have the capability in Windows 10

466
00:18:16,299 --> 00:18:20,168
they don't use it and they get the wrong

467
00:18:18,340 --> 00:18:21,629
file name back so we'll see more on that

468
00:18:20,169 --> 00:18:24,549
later

469
00:18:21,630 --> 00:18:26,080
so as I said this is a summary table and

470
00:18:24,549 --> 00:18:29,679
you can see here what we summarizes the

471
00:18:26,080 --> 00:18:31,990
API is the anti DLL a PID call and then

472
00:18:29,679 --> 00:18:33,580
the offset fields within the process

473
00:18:31,990 --> 00:18:36,130
structure where do we get the file name

474
00:18:33,580 --> 00:18:39,730
or fall apart and you can see here on

475
00:18:36,130 --> 00:18:40,870
Windows 10 depending on if you use these

476
00:18:39,730 --> 00:18:42,250
three api's you always get the right

477
00:18:40,870 --> 00:18:49,658
file name but you'll always get the

478
00:18:42,250 --> 00:18:51,100
wrong file path so we said it was three

479
00:18:49,659 --> 00:18:53,020
kind of variants or attack vectors

480
00:18:51,100 --> 00:18:56,439
there's a file path the file name and

481
00:18:53,020 --> 00:18:58,149
you have the load library version so I'm

482
00:18:56,440 --> 00:19:00,130
going to show now what's happening at

483
00:18:58,149 --> 00:19:02,049
the kernel level and then we'll see in

484
00:19:00,130 --> 00:19:04,450
parallel what's happening at the process

485
00:19:02,049 --> 00:19:06,850
and filesystem level so as you can see

486
00:19:04,450 --> 00:19:11,919
here what we said before we have for AP

487
00:19:06,850 --> 00:19:12,370
is and then depending on the AP ID is

488
00:19:11,919 --> 00:19:13,600
called

489
00:19:12,370 --> 00:19:16,570
they will call into anti query

490
00:19:13,600 --> 00:19:19,529
information process our NT query virtual

491
00:19:16,570 --> 00:19:21,879
memory now these two top API is here

492
00:19:19,529 --> 00:19:24,520
when you put a curly bugger on these you

493
00:19:21,880 --> 00:19:27,520
will see they pass these values in to be

494
00:19:24,520 --> 00:19:30,879
hex which executes switch-case 43 in the

495
00:19:27,520 --> 00:19:33,639
kernel once you call query information

496
00:19:30,880 --> 00:19:37,960
process and then they get the file path

497
00:19:33,640 --> 00:19:40,510
and file name from the SC ordered I'm

498
00:19:37,960 --> 00:19:43,299
sorry from the section object now if you

499
00:19:40,510 --> 00:19:44,770
call get process image filename which

500
00:19:43,299 --> 00:19:47,320
we'll see later that Windows Defender is

501
00:19:44,770 --> 00:19:48,970
doing and it does execute a different

502
00:19:47,320 --> 00:19:51,100
switch statement within the kernel and

503
00:19:48,970 --> 00:19:51,970
it gets the information from the section

504
00:19:51,100 --> 00:19:55,610
object here

505
00:19:51,970 --> 00:19:57,980
and then the guy get my full name that

506
00:19:55,610 --> 00:19:59,360
actually gets it from the VAD here so

507
00:19:57,980 --> 00:20:01,880
all these fields are wood in the process

508
00:19:59,360 --> 00:20:03,350
structure and but depending whatever

509
00:20:01,880 --> 00:20:05,330
process been reimaged or not which we

510
00:20:03,350 --> 00:20:08,389
see later these will actually giving

511
00:20:05,330 --> 00:20:10,669
inconsistent results so these are this

512
00:20:08,390 --> 00:20:13,700
is the data structure side and this is a

513
00:20:10,670 --> 00:20:16,340
logic flow here and how did the user

514
00:20:13,700 --> 00:20:17,930
mode API is connect to the kernel api's

515
00:20:16,340 --> 00:20:22,280
and then today actually process

516
00:20:17,930 --> 00:20:23,630
structure so if we want to talk through

517
00:20:22,280 --> 00:20:25,730
the sequence of actually what happens

518
00:20:23,630 --> 00:20:26,840
from creating a process what happens in

519
00:20:25,730 --> 00:20:29,510
disk and then what's happening at the

520
00:20:26,840 --> 00:20:31,879
kernel level so we were seeing a demo

521
00:20:29,510 --> 00:20:33,410
later on that ultimately what we do is

522
00:20:31,880 --> 00:20:36,530
we just create a process called running

523
00:20:33,410 --> 00:20:37,670
phase one at a you see a fit so the

524
00:20:36,530 --> 00:20:39,620
directory running you could make that

525
00:20:37,670 --> 00:20:41,180
any directory you want and we just cause

526
00:20:39,620 --> 00:20:43,610
a phase one early exceed that can be any

527
00:20:41,180 --> 00:20:45,890
AC you want but that exe is made me cats

528
00:20:43,610 --> 00:20:47,120
we just renamed it so from the talk

529
00:20:45,890 --> 00:20:49,640
earlier today I'm sure everybody

530
00:20:47,120 --> 00:20:52,879
remembers what mini cats is it's a post

531
00:20:49,640 --> 00:20:54,350
exploitation tool and most employee

532
00:20:52,880 --> 00:20:56,420
security solutions should detect that

533
00:20:54,350 --> 00:20:58,129
and that's the reason we're using it and

534
00:20:56,420 --> 00:21:00,650
we will see defender detected and then

535
00:20:58,130 --> 00:21:03,130
once the image has been a process has

536
00:21:00,650 --> 00:21:06,620
been reimaged it will fail to detect it

537
00:21:03,130 --> 00:21:09,260
so what we do then is we just simply

538
00:21:06,620 --> 00:21:11,419
rename the execution directory so we

539
00:21:09,260 --> 00:21:14,150
launch the process as running phase one

540
00:21:11,420 --> 00:21:16,850
which is ultimately mainly cats and then

541
00:21:14,150 --> 00:21:18,650
we renamed a path to hide running so now

542
00:21:16,850 --> 00:21:21,230
what we have is and then we copy the

543
00:21:18,650 --> 00:21:22,760
Kodiaks eve which is msi exec which you

544
00:21:21,230 --> 00:21:25,010
saw with the cynic ransom ever been

545
00:21:22,760 --> 00:21:28,520
dropped to disk and we copied that to

546
00:21:25,010 --> 00:21:30,379
face will not exe so ultimately what we

547
00:21:28,520 --> 00:21:33,020
have now is we created a process with a

548
00:21:30,380 --> 00:21:35,060
malicious file we rename the directory

549
00:21:33,020 --> 00:21:37,850
and then we copied a good files where

550
00:21:35,060 --> 00:21:39,200
that malicious file was so now when you

551
00:21:37,850 --> 00:21:44,000
scan that with Windows Defender

552
00:21:39,200 --> 00:21:46,820
what happens is when does the fender

553
00:21:44,000 --> 00:21:49,190
cause the API get process image filename

554
00:21:46,820 --> 00:21:51,620
and it actually returns running phase

555
00:21:49,190 --> 00:21:53,540
one and running phase one is now MSI

556
00:21:51,620 --> 00:21:54,860
exactly that exe and we will see that in

557
00:21:53,540 --> 00:21:56,629
process explorer with the demo later on

558
00:21:54,860 --> 00:21:58,010
so the alternate view of mini cats

559
00:21:56,630 --> 00:22:00,560
running as fair as well nadiak see

560
00:21:58,010 --> 00:22:04,270
you've renamed a location and I Windows

561
00:22:00,560 --> 00:22:04,270
Defender tinks MSI exactly SEC security

562
00:22:04,440 --> 00:22:08,970
and you can see here has been absolutely

563
00:22:06,780 --> 00:22:11,460
no changes here in I needa fields in II

564
00:22:08,970 --> 00:22:14,010
process structure so the Windows kernel

565
00:22:11,460 --> 00:22:15,720
has failed to reflect the file system

566
00:22:14,010 --> 00:22:21,240
changes through the fire control block

567
00:22:15,720 --> 00:22:23,340
to the II processor fields so that

568
00:22:21,240 --> 00:22:25,650
impacts all version of Windows so you

569
00:22:23,340 --> 00:22:28,919
simply rename the directory and you can

570
00:22:25,650 --> 00:22:34,320
completely bypass the process attribute

571
00:22:28,920 --> 00:22:35,730
verification so for Windows 10 sorry the

572
00:22:34,320 --> 00:22:38,310
second variant is called with the file

573
00:22:35,730 --> 00:22:39,960
name changes so instead of renaming the

574
00:22:38,310 --> 00:22:45,500
file directory we just simply rename the

575
00:22:39,960 --> 00:22:47,610
file so you can see here again apologies

576
00:22:45,500 --> 00:22:49,350
you see here again we launched our

577
00:22:47,610 --> 00:22:49,740
process running phase one which is mini

578
00:22:49,350 --> 00:22:52,320
cats

579
00:22:49,740 --> 00:22:54,750
and then instead of rename the directory

580
00:22:52,320 --> 00:22:56,490
we just rename the file name so we

581
00:22:54,750 --> 00:22:59,010
renamed the father hidden Daddy XE and

582
00:22:56,490 --> 00:23:02,130
then we copied it MSI exact which is

583
00:22:59,010 --> 00:23:04,860
good exe the phase one a XE and then

584
00:23:02,130 --> 00:23:07,740
when Windows Defender runs once again it

585
00:23:04,860 --> 00:23:10,709
calls the same API and it takes phase

586
00:23:07,740 --> 00:23:12,630
one not hidden exe so once again it gets

587
00:23:10,710 --> 00:23:14,970
the wrong file on disk once you rename

588
00:23:12,630 --> 00:23:18,240
the file but you can actually see as I

589
00:23:14,970 --> 00:23:20,220
mentioned before Windows did put an

590
00:23:18,240 --> 00:23:22,620
update into Windows 10 for a new field

591
00:23:20,220 --> 00:23:24,300
called image file pointer which actually

592
00:23:22,620 --> 00:23:26,550
does get the right funds you can see

593
00:23:24,300 --> 00:23:28,100
here it reflects the change so you

594
00:23:26,550 --> 00:23:32,010
changed name a disk and it was reflected

595
00:23:28,100 --> 00:23:34,080
but depends on the API you call to give

596
00:23:32,010 --> 00:23:35,400
it a write value back but the API that

597
00:23:34,080 --> 00:23:37,230
Windows Defender is using does not

598
00:23:35,400 --> 00:23:39,570
reference this field it actually

599
00:23:37,230 --> 00:23:43,680
references section object and so it gets

600
00:23:39,570 --> 00:23:47,700
the wrong file on disk so that's four

601
00:23:43,680 --> 00:23:49,020
versions greater than Windows 10 and the

602
00:23:47,700 --> 00:23:50,820
reason I was that's happening with the

603
00:23:49,020 --> 00:23:53,280
file image pointer if you look in the

604
00:23:50,820 --> 00:23:55,919
kernel the file image pointer is located

605
00:23:53,280 --> 00:23:58,320
at four four eight hex offset in the

606
00:23:55,920 --> 00:24:00,720
process structure and and now I'm not

607
00:23:58,320 --> 00:24:02,520
sure that field was added for Windows 10

608
00:24:00,720 --> 00:24:04,650
I'm not sure not void or not using it it

609
00:24:02,520 --> 00:24:06,540
obviously does reflect the file name

610
00:24:04,650 --> 00:24:08,190
changes and you can see the changes

611
00:24:06,540 --> 00:24:11,790
clearly in the kernel but it's not being

612
00:24:08,190 --> 00:24:15,350
used now for Windows versions less than

613
00:24:11,790 --> 00:24:18,649
ten what we have is

614
00:24:15,350 --> 00:24:20,330
it's a little bit different so and what

615
00:24:18,650 --> 00:24:22,130
I mean by the different is that it makes

616
00:24:20,330 --> 00:24:23,929
different changes here and in the a

617
00:24:22,130 --> 00:24:25,640
process structure it doesn't have the

618
00:24:23,930 --> 00:24:29,300
image file pointer because that's only

619
00:24:25,640 --> 00:24:32,570
for Windows versions 10 so once again

620
00:24:29,300 --> 00:24:35,300
you rename the file name you copy the

621
00:24:32,570 --> 00:24:38,030
MSI exactly good file to phase one at

622
00:24:35,300 --> 00:24:39,950
exe and Mme cats are sorry

623
00:24:38,030 --> 00:24:42,889
when is offender fails to detect the

624
00:24:39,950 --> 00:24:44,690
memory cats process executing and you

625
00:24:42,890 --> 00:24:47,000
can see why right I mean you only feel

626
00:24:44,690 --> 00:24:49,700
it's all updated here is the the VAD

627
00:24:47,000 --> 00:24:51,740
right so the only API that would give

628
00:24:49,700 --> 00:24:53,720
you the correct file name is get map for

629
00:24:51,740 --> 00:24:56,360
them which Windows Defender is not using

630
00:24:53,720 --> 00:25:01,070
to verify the backing file at disk

631
00:24:56,360 --> 00:25:02,260
associate with a process everybody with

632
00:25:01,070 --> 00:25:04,850
me so far

633
00:25:02,260 --> 00:25:06,560
yeah I know there's a lot in that but

634
00:25:04,850 --> 00:25:09,709
when we when we do the demo I solidify

635
00:25:06,560 --> 00:25:11,600
and you really see what's happening so

636
00:25:09,710 --> 00:25:14,600
once again here like we don't have that

637
00:25:11,600 --> 00:25:17,179
for 48 offset here we have the P

638
00:25:14,600 --> 00:25:19,100
reference process file pointer which

639
00:25:17,180 --> 00:25:20,330
points to this section object and

640
00:25:19,100 --> 00:25:23,810
obviously we're getting the wrong

641
00:25:20,330 --> 00:25:25,399
information back I'm not going to go

642
00:25:23,810 --> 00:25:26,720
into these ones in too much detail and

643
00:25:25,400 --> 00:25:29,000
they're a slight variant or not as

644
00:25:26,720 --> 00:25:32,060
impactful the only impact they get my

645
00:25:29,000 --> 00:25:33,500
full name and ultimately what's

646
00:25:32,060 --> 00:25:35,990
happening here is when you do a lord

647
00:25:33,500 --> 00:25:37,310
library in a free library it seems to

648
00:25:35,990 --> 00:25:39,200
cache the object and the file pad

649
00:25:37,310 --> 00:25:41,300
associate with our file object so then

650
00:25:39,200 --> 00:25:43,430
when you reload it a second time it uses

651
00:25:41,300 --> 00:25:44,870
the incorrect path so I'm not going to

652
00:25:43,430 --> 00:25:46,250
go into it in too much detail because it

653
00:25:44,870 --> 00:25:48,560
still depends on the file name and file

654
00:25:46,250 --> 00:25:53,390
path but it is a variant of it and it

655
00:25:48,560 --> 00:25:55,010
impacts all versions of Windows so I

656
00:25:53,390 --> 00:25:56,390
think I want to spend a bit of time in

657
00:25:55,010 --> 00:25:58,460
this demo and really kind of solidified

658
00:25:56,390 --> 00:25:59,570
us here today and put it all this into

659
00:25:58,460 --> 00:26:01,940
action so you can see what's happening

660
00:25:59,570 --> 00:26:03,889
so in the demo we're gonna focus

661
00:26:01,940 --> 00:26:05,660
completely on the file path we're not

662
00:26:03,890 --> 00:26:07,640
going to do the file name because even

663
00:26:05,660 --> 00:26:10,640
with the latest windows update for the

664
00:26:07,640 --> 00:26:13,670
June cumulative update this still works

665
00:26:10,640 --> 00:26:15,470
if you if we did a file named bypass it

666
00:26:13,670 --> 00:26:16,940
wouldn't work as Windows protected

667
00:26:15,470 --> 00:26:20,990
against it specifically for a defender

668
00:26:16,940 --> 00:26:23,420
not at the OS level okay so we're gonna

669
00:26:20,990 --> 00:26:26,140
fire up this demo and show exactly what

670
00:26:23,420 --> 00:26:26,140
how this works

671
00:26:41,750 --> 00:26:53,160
second okay everybody see that okay just

672
00:26:48,360 --> 00:26:54,899
duplicate my laptop so we've Windows

673
00:26:53,160 --> 00:26:55,890
Defender turned off here and the reason

674
00:26:54,900 --> 00:26:57,870
we have this turned off is we're

675
00:26:55,890 --> 00:26:59,640
simulating a undetected piece of not

676
00:26:57,870 --> 00:27:01,290
ever being dropped to disk right we're

677
00:26:59,640 --> 00:27:03,300
not in the habit of releasing zero days

678
00:27:01,290 --> 00:27:04,710
here so we're just simulating what would

679
00:27:03,300 --> 00:27:07,050
happen in a real-world scenario where

680
00:27:04,710 --> 00:27:08,460
for example with cynic you got a binary

681
00:27:07,050 --> 00:27:12,180
which was dropped to disk a malicious

682
00:27:08,460 --> 00:27:17,960
binary and wasn't detected so let me

683
00:27:12,180 --> 00:27:17,960
just show you what's happening here so

684
00:27:18,590 --> 00:27:28,050
what we have in this excluded folder is

685
00:27:21,120 --> 00:27:31,020
bad Exe which is mini cats you can see

686
00:27:28,050 --> 00:27:33,450
here it's me me cats and then we have

687
00:27:31,020 --> 00:27:34,889
good exe which is MSI exec so we're just

688
00:27:33,450 --> 00:27:36,300
going to talk through exactly the floor

689
00:27:34,890 --> 00:27:40,710
we saw earlier and then we're going to

690
00:27:36,300 --> 00:27:42,510
execute it so you can see MSI now on

691
00:27:40,710 --> 00:27:44,160
this run here we're not going to reimage

692
00:27:42,510 --> 00:27:45,420
the process we're all we're simply going

693
00:27:44,160 --> 00:27:48,150
to do here is create a folder called

694
00:27:45,420 --> 00:27:50,250
running copy mini cats to phase one at a

695
00:27:48,150 --> 00:27:52,320
UC and executed so basically we have

696
00:27:50,250 --> 00:27:54,120
made me cats running as a process called

697
00:27:52,320 --> 00:27:56,070
phase one at a XE and offender should

698
00:27:54,120 --> 00:27:58,050
detect it okay so we're just going to

699
00:27:56,070 --> 00:28:01,139
show what it looks like when you don't

700
00:27:58,050 --> 00:28:06,090
reuse the process and if you look at the

701
00:28:01,140 --> 00:28:11,280
filter here for a process monitor and we

702
00:28:06,090 --> 00:28:13,740
have we have a filter on running phase

703
00:28:11,280 --> 00:28:15,840
one that exe so what we see is when

704
00:28:13,740 --> 00:28:17,790
Windows Defender scan runs it will

705
00:28:15,840 --> 00:28:19,800
actually look at this location correctly

706
00:28:17,790 --> 00:28:21,300
for the file on disk and then when we

707
00:28:19,800 --> 00:28:23,790
show the image process later you'll see

708
00:28:21,300 --> 00:28:27,379
it looks in the wrong wrong location so

709
00:28:23,790 --> 00:28:27,379
let's just run this to see what happens

710
00:28:28,010 --> 00:28:36,350
sorry just as a couple of events in

711
00:28:30,420 --> 00:28:40,700
process monitor so our

712
00:28:36,350 --> 00:28:43,129
there is on Windows Defender exe and on

713
00:28:40,700 --> 00:28:48,970
the path where we're running phase 1 ATC

714
00:28:43,130 --> 00:28:48,970
which is ultimately memory cards so

715
00:28:50,470 --> 00:28:55,070
process reimaging on the score file path

716
00:28:53,299 --> 00:28:56,600
that exe is busy just simulating a

717
00:28:55,070 --> 00:28:59,059
dropper which would be used for example

718
00:28:56,600 --> 00:29:00,019
with cynic and no itself just means that

719
00:28:59,059 --> 00:29:03,440
we're not actually going to reimage the

720
00:29:00,019 --> 00:29:04,850
process so you can see here we've

721
00:29:03,440 --> 00:29:06,710
Windows Defender turned off because we

722
00:29:04,850 --> 00:29:08,840
want to simulate an undetected binary

723
00:29:06,710 --> 00:29:13,549
let the process run then weary in able

724
00:29:08,840 --> 00:29:14,990
defender and it should catch it ok so

725
00:29:13,549 --> 00:29:18,970
you can see me cat is running there

726
00:29:14,990 --> 00:29:18,970
right now if we pick up process Explorer

727
00:29:31,789 --> 00:29:39,919
second now okay you can see our own sign

728
00:29:36,979 --> 00:29:42,350
dropper has launched phase one dot exe

729
00:29:39,919 --> 00:29:46,789
which you can see as many cats can

730
00:29:42,350 --> 00:29:49,779
everybody see that clearly yeah okay so

731
00:29:46,789 --> 00:29:49,779
let's run renders offender

732
00:30:02,710 --> 00:30:05,289
see already winners offenders pick

733
00:30:03,970 --> 00:30:09,039
something up here they may be tress in

734
00:30:05,289 --> 00:30:11,169
your device and you can see the alert

735
00:30:09,039 --> 00:30:13,299
here and and that's what we'd expect

736
00:30:11,169 --> 00:30:16,960
right we have a malicious process

737
00:30:13,299 --> 00:30:21,549
running it's phase one dot exe you can

738
00:30:16,960 --> 00:30:22,899
see here we just copied we just copied

739
00:30:21,549 --> 00:30:24,010
mini cats in here and called phase will

740
00:30:22,899 --> 00:30:25,178
not exceed that's all we did

741
00:30:24,010 --> 00:30:27,700
and that's exactly what you'd expect

742
00:30:25,179 --> 00:30:29,860
right so there's no reimaging going on

743
00:30:27,700 --> 00:30:33,130
there and you can see here it detected

744
00:30:29,860 --> 00:30:37,110
mini cats okay so let's just pause that

745
00:30:33,130 --> 00:30:37,110
and we go and do the process reimaging

746
00:30:56,410 --> 00:31:01,660
so now we're process reimaging exactly

747
00:31:00,340 --> 00:31:04,480
the same setup we have Windows Defender

748
00:31:01,660 --> 00:31:06,580
disabled similar to zero undetected

749
00:31:04,480 --> 00:31:11,020
binary on disk we have our dropper and

750
00:31:06,580 --> 00:31:13,629
then we have Mimi Katz and we have MSI

751
00:31:11,020 --> 00:31:15,730
exec just called good exe as I said

752
00:31:13,630 --> 00:31:17,260
before so what's going to happen this

753
00:31:15,730 --> 00:31:18,970
time and I'll leave this window open so

754
00:31:17,260 --> 00:31:19,900
you can see it happening real time we're

755
00:31:18,970 --> 00:31:21,910
going to create a directory called

756
00:31:19,900 --> 00:31:25,330
running which will have phase 1 exe as

757
00:31:21,910 --> 00:31:27,520
before and that Lots baby mini cats but

758
00:31:25,330 --> 00:31:28,990
then we have a second folder we'll

759
00:31:27,520 --> 00:31:30,730
rename that folder called hide running

760
00:31:28,990 --> 00:31:33,100
and then we'll make another folder

761
00:31:30,730 --> 00:31:34,690
called running which will have to go DXE

762
00:31:33,100 --> 00:31:40,360
and we completely subvert the operating

763
00:31:34,690 --> 00:31:42,700
system so what I have here is I have a

764
00:31:40,360 --> 00:31:44,889
filter on the windows defender process I

765
00:31:42,700 --> 00:31:46,990
have a filter on running phase 1 and

766
00:31:44,890 --> 00:31:48,940
have a filter also on hide running phase

767
00:31:46,990 --> 00:31:51,640
1 now the reason I put two filters is

768
00:31:48,940 --> 00:31:53,410
because you'd be able to see the binary

769
00:31:51,640 --> 00:31:54,880
I used to launch the process will be

770
00:31:53,410 --> 00:31:56,320
located at hide running but Windows

771
00:31:54,880 --> 00:31:58,780
Defender never even goes that location

772
00:31:56,320 --> 00:32:01,419
and our good exe is going to be at

773
00:31:58,780 --> 00:32:02,980
running phase 1 dot exe so completely

774
00:32:01,420 --> 00:32:05,170
looks in the wrong direction or wrong

775
00:32:02,980 --> 00:32:09,540
location and it trusts the file on disk

776
00:32:05,170 --> 00:32:09,540
so we'll just hit OK there

777
00:32:16,429 --> 00:32:23,360
okay so you'll see the changes happening

778
00:32:17,720 --> 00:32:24,799
here real-time so we just we started

779
00:32:23,360 --> 00:32:26,449
it's just running there it's phase one

780
00:32:24,799 --> 00:32:28,039
dot exe that's me me cats and now we

781
00:32:26,450 --> 00:32:30,499
rename the directory you'll see it

782
00:32:28,039 --> 00:32:32,658
happening now so now we just renamed

783
00:32:30,499 --> 00:32:34,039
running to hide running and then we

784
00:32:32,659 --> 00:32:38,169
create a new directory called running I

785
00:32:34,039 --> 00:32:41,330
put two good exe in there so the process

786
00:32:38,169 --> 00:32:43,159
the process patch you started with now

787
00:32:41,330 --> 00:32:46,399
has a good file as opposed to the memory

788
00:32:43,159 --> 00:32:47,720
Katz file so now let's have a look in

789
00:32:46,399 --> 00:32:52,449
process explorer to see what's happening

790
00:32:47,720 --> 00:32:52,450
before and after we run Windows Defender

791
00:33:09,510 --> 00:33:14,490
so now you can see here that's exactly

792
00:33:12,210 --> 00:33:16,260
the same we started with mini cats we've

793
00:33:14,490 --> 00:33:18,870
reimaged the process and now we can

794
00:33:16,260 --> 00:33:20,520
clearly see that's a trusted Microsoft

795
00:33:18,870 --> 00:33:22,949
Windows installer that's a messiah

796
00:33:20,520 --> 00:33:25,080
exactly so now we have mini cats running

797
00:33:22,950 --> 00:33:28,049
and from an operating system perspective

798
00:33:25,080 --> 00:33:30,030
it's msi exec and that-that's-that's

799
00:33:28,049 --> 00:33:31,679
process reimaging and what we'll do here

800
00:33:30,030 --> 00:33:35,059
now is we just run Windows Defender and

801
00:33:31,679 --> 00:33:35,059
you see it failed to detect it

802
00:33:47,560 --> 00:33:53,649
since one second so now you can see

803
00:33:51,840 --> 00:33:56,439
Windows has it looked in the same

804
00:33:53,650 --> 00:33:57,970
location running phase 1 at Exe but

805
00:33:56,440 --> 00:34:00,250
we've renamed a TAC team is slightly

806
00:33:57,970 --> 00:34:04,210
exactly and our malicious file is

807
00:34:00,250 --> 00:34:05,410
running in hide running location so you

808
00:34:04,210 --> 00:34:06,580
can see there's no alert stare and I'll

809
00:34:05,410 --> 00:34:07,780
leave that running we can check at the

810
00:34:06,580 --> 00:34:12,580
end of the presentation you'll see it

811
00:34:07,780 --> 00:34:13,600
doesn't detect anything so you can see

812
00:34:12,580 --> 00:34:15,730
it's already looked in that location

813
00:34:13,600 --> 00:34:17,710
it's looked at this executing process

814
00:34:15,730 --> 00:34:20,590
it's looked for the Associated file on

815
00:34:17,710 --> 00:34:22,929
disk and a file on disk you get is MSI

816
00:34:20,590 --> 00:34:25,810
exec as opposed to many cats it's

817
00:34:22,929 --> 00:34:30,159
completely bypassed the operating system

818
00:34:25,810 --> 00:34:31,540
API so I leave that running and we'll

819
00:34:30,159 --> 00:34:34,450
see at the end that it comes back with a

820
00:34:31,540 --> 00:34:44,830
clean scan anybody any questions on that

821
00:34:34,449 --> 00:34:46,480
ok so I'll just continue on with the

822
00:34:44,830 --> 00:34:57,819
presentation and we come back to that in

823
00:34:46,480 --> 00:35:01,330
a moment to see a clean scan ok ok so

824
00:34:57,820 --> 00:35:02,860
that's the demo just to give a summary

825
00:35:01,330 --> 00:35:06,220
down of the process and the epilation

826
00:35:02,860 --> 00:35:09,070
techniques a recap so we have processor

827
00:35:06,220 --> 00:35:10,750
e imaging and a lot easier to execute

828
00:35:09,070 --> 00:35:12,040
very very simple you can see there all

829
00:35:10,750 --> 00:35:14,230
we're doing is rename it a directory or

830
00:35:12,040 --> 00:35:16,440
a file file name that's it there's no

831
00:35:14,230 --> 00:35:17,740
complex API is a code injection involved

832
00:35:16,440 --> 00:35:19,960
excuse me

833
00:35:17,740 --> 00:35:22,029
process hollowing across the stop again

834
00:35:19,960 --> 00:35:25,450
the difference is to start with atrocity

835
00:35:22,030 --> 00:35:27,430
XE we start with a malicious exe but

836
00:35:25,450 --> 00:35:31,270
ultimately the end and impact is the

837
00:35:27,430 --> 00:35:32,890
same they both bought up here as trusted

838
00:35:31,270 --> 00:35:34,570
processes and are allowed to evade

839
00:35:32,890 --> 00:35:38,049
detection and execute interval on the

840
00:35:34,570 --> 00:35:40,540
endpoint so just to kind of there are

841
00:35:38,050 --> 00:35:43,420
some pros and cons right to all the

842
00:35:40,540 --> 00:35:45,730
different techniques from processor

843
00:35:43,420 --> 00:35:47,740
imaging perspective and as I said it's a

844
00:35:45,730 --> 00:35:50,110
lot easier to execute it doesn't require

845
00:35:47,740 --> 00:35:53,109
code injection impacts all versions of

846
00:35:50,110 --> 00:35:55,270
Windows there's no real API signature

847
00:35:53,110 --> 00:35:56,260
there from a yarra perspective and

848
00:35:55,270 --> 00:36:00,310
there's no protection out there right

849
00:35:56,260 --> 00:36:01,390
now and now I suppose on a disadvantage

850
00:36:00,310 --> 00:36:03,160
side is you

851
00:36:01,390 --> 00:36:04,509
use it as a fireless attack and you

852
00:36:03,160 --> 00:36:06,129
can't delete the file on disk once you

853
00:36:04,510 --> 00:36:07,810
have the process running like process

854
00:36:06,130 --> 00:36:09,370
hollowing it up again you still need the

855
00:36:07,810 --> 00:36:10,900
malicious file on disk because it's

856
00:36:09,370 --> 00:36:12,970
still associate with the process you

857
00:36:10,900 --> 00:36:16,180
can't delete it now we'll talk about a

858
00:36:12,970 --> 00:36:19,270
fix that we put in our selves which was

859
00:36:16,180 --> 00:36:21,310
designed by Steve Herndon but ultimately

860
00:36:19,270 --> 00:36:23,170
if you're using EDR or memory scanning

861
00:36:21,310 --> 00:36:24,640
obviously you would detect this but for

862
00:36:23,170 --> 00:36:28,270
non EDRs the systems you're not going to

863
00:36:24,640 --> 00:36:30,700
detect this so from an impact

864
00:36:28,270 --> 00:36:34,540
perspective as I said before there's two

865
00:36:30,700 --> 00:36:36,819
use cases and we scored this the same as

866
00:36:34,540 --> 00:36:40,600
we did process doppelganger we gave it a

867
00:36:36,820 --> 00:36:42,430
CVS s of 5.0 where the integrity was

868
00:36:40,600 --> 00:36:43,299
very high because you cannot no longer

869
00:36:42,430 --> 00:36:46,480
trust the process

870
00:36:43,300 --> 00:36:48,010
so the to use case we spoke about

871
00:36:46,480 --> 00:36:50,740
earlier is where you're trying to verify

872
00:36:48,010 --> 00:36:53,560
a remote process whether you can trust

873
00:36:50,740 --> 00:36:55,959
the file associate with that on disk and

874
00:36:53,560 --> 00:36:57,370
obviously you can't in this case and in

875
00:36:55,960 --> 00:37:00,310
the second one is where you're trying to

876
00:36:57,370 --> 00:37:01,900
verify the actual trust of the process

877
00:37:00,310 --> 00:37:04,540
whether that can call into your trusted

878
00:37:01,900 --> 00:37:06,220
infrastructure or not now that depending

879
00:37:04,540 --> 00:37:08,710
on your endpoint security solution and

880
00:37:06,220 --> 00:37:11,109
the architecture how it works that CBS s

881
00:37:08,710 --> 00:37:12,640
could be a lot higher I can't quantify

882
00:37:11,110 --> 00:37:17,830
that because it depends on the endpoint

883
00:37:12,640 --> 00:37:19,089
security architecture so if you have an

884
00:37:17,830 --> 00:37:20,380
endpoint security solution and you're

885
00:37:19,090 --> 00:37:22,060
using any of those API is mentioned

886
00:37:20,380 --> 00:37:26,800
today it's highly likely you're

887
00:37:22,060 --> 00:37:28,600
vulnerable to process reimaging so from

888
00:37:26,800 --> 00:37:31,120
a protection recommendations to the

889
00:37:28,600 --> 00:37:33,430
endpoint security vendors and what we

890
00:37:31,120 --> 00:37:35,770
say is that you need to track the file

891
00:37:33,430 --> 00:37:37,480
object so if you remember back to the

892
00:37:35,770 --> 00:37:40,240
process creation steps of file create

893
00:37:37,480 --> 00:37:42,190
you can get an idea at that step when

894
00:37:40,240 --> 00:37:43,419
the file objects created before it's

895
00:37:42,190 --> 00:37:45,580
cleaned up and it's closed by the

896
00:37:43,420 --> 00:37:48,670
operating system I need to track that ID

897
00:37:45,580 --> 00:37:52,500
the whole way true keep that cached and

898
00:37:48,670 --> 00:37:54,520
then when you want to verify a process

899
00:37:52,500 --> 00:37:56,110
you take the trust away from the

900
00:37:54,520 --> 00:37:57,790
operating system and you use that ID

901
00:37:56,110 --> 00:38:00,430
yourself to verify if the process had

902
00:37:57,790 --> 00:38:01,840
been reimaged or not so the endpoint

903
00:38:00,430 --> 00:38:03,759
security vendor actually needs to track

904
00:38:01,840 --> 00:38:05,290
this unless windows go on update the

905
00:38:03,760 --> 00:38:06,220
operating system I mean I think that's

906
00:38:05,290 --> 00:38:07,720
the right thing to do

907
00:38:06,220 --> 00:38:10,029
Windows haven't done that and and

908
00:38:07,720 --> 00:38:12,600
Microsoft I hope they do do it but right

909
00:38:10,030 --> 00:38:12,600
now they haven't

910
00:38:14,060 --> 00:38:19,440
so we did give a number of protection

911
00:38:16,410 --> 00:38:20,819
recommendations to Microsoft as well so

912
00:38:19,440 --> 00:38:22,830
for example one of the things was that

913
00:38:20,820 --> 00:38:24,570
if you change something in a file system

914
00:38:22,830 --> 00:38:26,069
that the file control dock were to

915
00:38:24,570 --> 00:38:29,280
reflect that in the process structure in

916
00:38:26,070 --> 00:38:30,869
the kernel and also one of the big

917
00:38:29,280 --> 00:38:33,180
things is to consolidate the API is

918
00:38:30,869 --> 00:38:35,010
right we have for API is effectively

919
00:38:33,180 --> 00:38:36,180
doing the same thing and getting

920
00:38:35,010 --> 00:38:38,040
information from different areas in the

921
00:38:36,180 --> 00:38:43,020
kernel they're inconsistent right it

922
00:38:38,040 --> 00:38:45,119
needs to be more consistent so Microsoft

923
00:38:43,020 --> 00:38:47,280
did make an update in the June

924
00:38:45,119 --> 00:38:49,710
cumulative update as I said but it's

925
00:38:47,280 --> 00:38:53,040
only a partial fix for the file name

926
00:38:49,710 --> 00:38:53,460
bypass and it only mitigates Windows

927
00:38:53,040 --> 00:38:54,720
Defender

928
00:38:53,460 --> 00:38:58,619
there was no change at the operating

929
00:38:54,720 --> 00:39:01,319
system level ok so if you're an endpoint

930
00:38:58,619 --> 00:39:02,910
security solution you know I'm hoping

931
00:39:01,320 --> 00:39:04,230
Microsoft will update an operating

932
00:39:02,910 --> 00:39:04,920
system level but if not you're going to

933
00:39:04,230 --> 00:39:06,560
have to do

934
00:39:04,920 --> 00:39:11,240
I think the recommendation that we

935
00:39:06,560 --> 00:39:11,240
propose is the right way to do that so

936
00:39:11,510 --> 00:39:15,750
Windows Defender as a show today that's

937
00:39:13,740 --> 00:39:17,759
the latest updated operating system

938
00:39:15,750 --> 00:39:20,130
version it's still vulnerable to the

939
00:39:17,760 --> 00:39:24,420
file path renaming so even with our past

940
00:39:20,130 --> 00:39:26,190
are still vulnerable and that's it right

941
00:39:24,420 --> 00:39:28,500
SHINee Dena which is Irish sure that's

942
00:39:26,190 --> 00:39:29,790
all folks and we have a blog which will

943
00:39:28,500 --> 00:39:33,960
be released after this which goes

944
00:39:29,790 --> 00:39:35,130
through this in detail and I'm sure you

945
00:39:33,960 --> 00:39:36,810
can all decode that piece at the end

946
00:39:35,130 --> 00:39:38,070
I'll leave that for a challenge for

947
00:39:36,810 --> 00:39:39,690
everybody which I'm sure won't be much

948
00:39:38,070 --> 00:39:42,150
of a challenge but you can decode that

949
00:39:39,690 --> 00:39:44,880
nonetheless so thank you for your time

950
00:39:42,150 --> 00:39:46,560
today and if there's any questions and I

951
00:39:44,880 --> 00:39:48,420
think we have another three minutes or

952
00:39:46,560 --> 00:39:54,389
so

953
00:39:48,420 --> 00:39:54,389
[Applause]

