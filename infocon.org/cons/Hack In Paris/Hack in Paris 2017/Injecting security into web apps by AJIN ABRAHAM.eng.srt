1
00:00:08,970 --> 00:00:14,630
good evening<font color="#E5E5E5"> hacking Paris my name is</font>

2
00:00:11,820 --> 00:00:14,630
Adina brahaman

3
00:00:15,860 --> 00:00:21,800
and I'm so a bit<font color="#E5E5E5"> about myself I'm an</font>

4
00:00:19,520 --> 00:00:23,660
independent<font color="#E5E5E5"> security consultant</font><font color="#CCCCCC"> I do a</font>

5
00:00:21,800 --> 00:00:26,960
lot of freelance and currently doing

6
00:00:23,660 --> 00:00:28,599
security engineering<font color="#E5E5E5"> for</font><font color="#CCCCCC"> emini oh I do a</font>

7
00:00:26,960 --> 00:00:32,029
lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> research on runtime application</font>

8
00:00:28,599 --> 00:00:33,920
<font color="#E5E5E5">self-protection by instrumentation</font><font color="#CCCCCC"> other</font>

9
00:00:32,029 --> 00:00:36,380
couple of security<font color="#CCCCCC"> tools like mobile</font>

10
00:00:33,920 --> 00:00:39,440
<font color="#CCCCCC">security framework</font><font color="#E5E5E5"> over snorting cetera</font>

11
00:00:36,380 --> 00:00:43,879
and I do teach application security at

12
00:00:39,440 --> 00:00:46,010
<font color="#E5E5E5">OPSEC</font><font color="#CCCCCC"> XCOM</font><font color="#E5E5E5"> so the agenda</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> today's talk</font>

13
00:00:43,879 --> 00:00:47,870
<font color="#E5E5E5">I'll be</font><font color="#CCCCCC"> talking</font><font color="#E5E5E5"> about runtime</font>

14
00:00:46,010 --> 00:00:50,660
application<font color="#CCCCCC"> source protection so the</font>

15
00:00:47,870 --> 00:00:52,280
talk<font color="#CCCCCC"> is about</font><font color="#E5E5E5"> how a</font><font color="#CCCCCC"> Rass product I'm</font>

16
00:00:50,660 --> 00:00:54,410
pretty<font color="#E5E5E5"> much</font><font color="#CCCCCC"> sure that some</font><font color="#E5E5E5"> of you might</font>

17
00:00:52,280 --> 00:00:56,090
know about<font color="#CCCCCC"> the time for some of you it's</font>

18
00:00:54,410 --> 00:01:00,199
pretty<font color="#E5E5E5"> new it's a new term coined by</font>

19
00:00:56,090 --> 00:01:02,210
Gartner<font color="#E5E5E5"> for to categorize a new set or a</font>

20
00:01:00,200 --> 00:01:05,600
new kind<font color="#E5E5E5"> of security product that's out</font>

21
00:01:02,210 --> 00:01:07,520
there<font color="#CCCCCC"> so the agenda</font><font color="#E5E5E5"> of the talk is</font><font color="#CCCCCC"> like</font>

22
00:01:05,600 --> 00:01:09,740
I'll be going through<font color="#E5E5E5"> the technical</font>

23
00:01:07,520 --> 00:01:11,899
aspects of how an<font color="#CCCCCC"> instrument arras work</font>

24
00:01:09,740 --> 00:01:14,630
I will<font color="#E5E5E5"> also share my research outcomes</font>

25
00:01:11,899 --> 00:01:16,399
<font color="#E5E5E5">on implementing one such rasp</font><font color="#CCCCCC"> that</font>

26
00:01:14,630 --> 00:01:18,560
actually injects security into a very

27
00:01:16,399 --> 00:01:21,590
vulnerable<font color="#CCCCCC"> Python application written</font>

28
00:01:18,560 --> 00:01:25,040
<font color="#E5E5E5">into NATO and it's not anything about a</font>

29
00:01:21,590 --> 00:01:27,409
graph or any<font color="#CCCCCC"> old thing in a new</font><font color="#E5E5E5"> body</font><font color="#CCCCCC"> so</font>

30
00:01:25,040 --> 00:01:31,070
<font color="#E5E5E5">it's a</font><font color="#CCCCCC"> pretty a new stuff that I'm</font><font color="#E5E5E5"> going</font>

31
00:01:27,409 --> 00:01:33,229
to<font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about before</font><font color="#E5E5E5"> going into all this</font>

32
00:01:31,070 --> 00:01:34,850
let's see<font color="#CCCCCC"> what how is the AB SEC</font>

33
00:01:33,229 --> 00:01:37,310
industry now some<font color="#CCCCCC"> of the ab6</font><font color="#E5E5E5"> challenges</font>

34
00:01:34,850 --> 00:01:39,199
that we face<font color="#CCCCCC"> now we all know that</font>

35
00:01:37,310 --> 00:01:41,000
writing<font color="#CCCCCC"> secure code is not really easy</font><font color="#E5E5E5"> I</font>

36
00:01:39,200 --> 00:01:43,549
mean myself being a security<font color="#CCCCCC"> engineer</font>

37
00:01:41,000 --> 00:01:46,360
<font color="#CCCCCC">often at times</font><font color="#E5E5E5"> I write a lot of insecure</font>

38
00:01:43,549 --> 00:01:49,700
code it's<font color="#E5E5E5"> not easy to write secure code</font>

39
00:01:46,360 --> 00:01:51,170
doing<font color="#E5E5E5"> mistakes is common and that's what</font>

40
00:01:49,700 --> 00:01:52,430
people<font color="#E5E5E5"> normally do</font><font color="#CCCCCC"> and that's the reason</font>

41
00:01:51,170 --> 00:01:56,750
why<font color="#CCCCCC"> all those security bugs are out</font>

42
00:01:52,430 --> 00:01:58,790
<font color="#E5E5E5">there</font><font color="#CCCCCC"> currently most</font><font color="#E5E5E5"> of them follows</font>

43
00:01:56,750 --> 00:02:00,650
agile development strategies so<font color="#E5E5E5"> that</font>

44
00:01:58,790 --> 00:02:02,600
means you have frequent releases and

45
00:02:00,650 --> 00:02:05,750
frequent<font color="#E5E5E5"> bills coming one after another</font>

46
00:02:02,600 --> 00:02:08,060
maybe<font color="#E5E5E5"> weekly or daily or also so it's</font>

47
00:02:05,750 --> 00:02:10,459
the chance to get the chance for<font color="#E5E5E5"> a</font>

48
00:02:08,060 --> 00:02:13,129
vulnerability<font color="#E5E5E5"> to get</font><font color="#CCCCCC"> in sin is very</font><font color="#E5E5E5"> high</font>

49
00:02:10,459 --> 00:02:15,019
I mean a new vulnerability can be

50
00:02:13,129 --> 00:02:17,780
introduced<font color="#E5E5E5"> or the one that was fixed</font>

51
00:02:15,019 --> 00:02:19,730
previously can be reintroduced then

52
00:02:17,780 --> 00:02:21,620
<font color="#E5E5E5">there are other problems in abstract</font>

53
00:02:19,730 --> 00:02:22,970
like<font color="#E5E5E5"> session hijacking credential</font>

54
00:02:21,620 --> 00:02:24,890
stuffing which is<font color="#E5E5E5"> the headache of this</font>

55
00:02:22,970 --> 00:02:26,239
century<font color="#CCCCCC"> so these are not</font><font color="#E5E5E5"> really</font>

56
00:02:24,890 --> 00:02:27,708
vulnerabilities like session<font color="#E5E5E5"> hijacking</font>

57
00:02:26,239 --> 00:02:29,030
and credential stuffing are not really

58
00:02:27,709 --> 00:02:32,750
vulnerabilities they

59
00:02:29,030 --> 00:02:34,069
more of a design problem<font color="#E5E5E5"> so it's</font>

60
00:02:32,750 --> 00:02:36,319
difficult to tackle<font color="#E5E5E5"> with this most</font>

61
00:02:34,069 --> 00:02:38,450
security products you have<font color="#E5E5E5"> or the</font>

62
00:02:36,319 --> 00:02:40,819
solutions that<font color="#E5E5E5"> offer protection to you</font>

63
00:02:38,450 --> 00:02:43,250
<font color="#E5E5E5">it's not really enough to protect</font>

64
00:02:40,819 --> 00:02:45,880
against<font color="#E5E5E5"> these</font><font color="#CCCCCC"> new threats so we will be</font>

65
00:02:43,250 --> 00:02:49,550
talking<font color="#E5E5E5"> a bit</font><font color="#CCCCCC"> about that as well okay</font>

66
00:02:45,880 --> 00:02:51,739
<font color="#CCCCCC">let's talk</font><font color="#E5E5E5"> about</font><font color="#CCCCCC"> web framework of</font><font color="#E5E5E5"> you</font>

67
00:02:49,550 --> 00:02:54,380
know the web applications in the comment

68
00:02:51,739 --> 00:02:55,910
currently<font color="#E5E5E5"> so we don't actually write web</font>

69
00:02:54,380 --> 00:02:58,670
application from scratch<font color="#E5E5E5"> like we don't</font>

70
00:02:55,910 --> 00:03:01,940
write web application from<font color="#E5E5E5"> PHP or Java</font>

71
00:02:58,670 --> 00:03:03,679
<font color="#E5E5E5">or Python from scratch as of now we have</font>

72
00:03:01,940 --> 00:03:05,510
a lot of<font color="#CCCCCC"> frameworks to</font><font color="#E5E5E5"> ease our work so</font>

73
00:03:03,680 --> 00:03:08,959
we tend to<font color="#E5E5E5"> use frameworks like Django</font>

74
00:03:05,510 --> 00:03:11,810
<font color="#E5E5E5">Ruby on Rails spring etc so these days</font>

75
00:03:08,959 --> 00:03:15,590
most<font color="#E5E5E5"> of the web applications are built</font>

76
00:03:11,810 --> 00:03:17,120
on top of<font color="#CCCCCC"> some frameworks and most of</font>

77
00:03:15,590 --> 00:03:20,870
these frameworks<font color="#E5E5E5"> offer some level of</font>

78
00:03:17,120 --> 00:03:22,970
security<font color="#E5E5E5"> to</font><font color="#CCCCCC"> some level of</font><font color="#E5E5E5"> security in</font>

79
00:03:20,870 --> 00:03:25,360
will with the<font color="#E5E5E5"> framework so for example</font>

80
00:03:22,970 --> 00:03:27,380
you have<font color="#CCCCCC"> and these automatic CSF tokens</font>

81
00:03:25,360 --> 00:03:29,209
<font color="#CCCCCC">most of the frameworks have this feature</font>

82
00:03:27,380 --> 00:03:31,190
<font color="#E5E5E5">within which it will automatically</font>

83
00:03:29,209 --> 00:03:32,810
inject<font color="#CCCCCC"> an DC</font><font color="#E5E5E5"> sort of talk and so that</font>

84
00:03:31,190 --> 00:03:35,269
you don't have<font color="#E5E5E5"> to worry about CSRF</font>

85
00:03:32,810 --> 00:03:39,470
issues you have templates that will

86
00:03:35,269 --> 00:03:41,420
escape the user input and<font color="#E5E5E5"> basically that</font>

87
00:03:39,470 --> 00:03:43,970
<font color="#CCCCCC">means</font><font color="#E5E5E5"> ideally there should not be any</font>

88
00:03:41,420 --> 00:03:46,190
<font color="#E5E5E5">excesses and you have</font><font color="#CCCCCC"> high-level or arms</font>

89
00:03:43,970 --> 00:03:49,070
like active records in Ruby etc that

90
00:03:46,190 --> 00:03:51,680
exposes you a particular API<font color="#CCCCCC"> rather</font><font color="#E5E5E5"> than</font>

91
00:03:49,070 --> 00:03:54,829
writing<font color="#E5E5E5"> raw SQL query so which again</font>

92
00:03:51,680 --> 00:03:56,750
means there is no scaling<font color="#CCCCCC"> and at the end</font>

93
00:03:54,829 --> 00:03:59,090
of the day you need<font color="#CCCCCC"> to use the secure</font>

94
00:03:56,750 --> 00:04:02,060
API to<font color="#E5E5E5"> make sure that your core</font>

95
00:03:59,090 --> 00:04:03,500
application is<font color="#CCCCCC"> built securely so often</font>

96
00:04:02,060 --> 00:04:05,540
many times security issues of bugs

97
00:04:03,500 --> 00:04:08,450
happen when people<font color="#CCCCCC"> write unsecure code</font>

98
00:04:05,540 --> 00:04:11,239
or<font color="#E5E5E5"> miss configure this so even though we</font>

99
00:04:08,450 --> 00:04:13,518
have all this some<font color="#CCCCCC"> of the basic</font><font color="#E5E5E5"> security</font>

100
00:04:11,239 --> 00:04:15,470
mechanisms offered by framework it's not

101
00:04:13,519 --> 00:04:18,680
still<font color="#E5E5E5"> enough so when it when you talk</font>

102
00:04:15,470 --> 00:04:20,660
<font color="#CCCCCC">about</font><font color="#E5E5E5"> anti CSRF token so</font><font color="#CCCCCC"> myself I do a</font>

103
00:04:18,680 --> 00:04:23,690
lot of code review<font color="#E5E5E5"> and I have seen this</font>

104
00:04:20,660 --> 00:04:25,669
<font color="#E5E5E5">very often people may be like testing</font><font color="#CCCCCC"> or</font>

105
00:04:23,690 --> 00:04:27,950
you know doing in something in the

106
00:04:25,669 --> 00:04:30,560
testing environment<font color="#E5E5E5"> and then often turn</font>

107
00:04:27,950 --> 00:04:32,360
off<font color="#E5E5E5"> CSR which I have seen</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> lot for some</font>

108
00:04:30,560 --> 00:04:34,789
API set cetera they have turned off

109
00:04:32,360 --> 00:04:37,250
intentionally<font color="#CCCCCC"> or unintentionally then</font>

110
00:04:34,789 --> 00:04:39,020
the template escaping so the most of the

111
00:04:37,250 --> 00:04:40,990
templates<font color="#E5E5E5"> out there</font>

112
00:04:39,020 --> 00:04:43,008
the problem with them<font color="#CCCCCC"> is that they do</font>

113
00:04:40,990 --> 00:04:45,619
<font color="#E5E5E5">HTML escaping but</font><font color="#CCCCCC"> excess</font>

114
00:04:43,009 --> 00:04:47,419
is not that<font color="#CCCCCC"> simple as that</font><font color="#E5E5E5"> you have this</font>

115
00:04:45,619 --> 00:04:49,939
concept of different context<font color="#E5E5E5"> and you</font>

116
00:04:47,419 --> 00:04:52,308
need to specifically escape for each

117
00:04:49,939 --> 00:04:54,649
context<font color="#E5E5E5"> which is not</font><font color="#CCCCCC"> something</font><font color="#E5E5E5"> most of</font>

118
00:04:52,309 --> 00:04:57,499
the templating<font color="#E5E5E5"> engine do by default</font><font color="#CCCCCC"> so</font>

119
00:04:54,649 --> 00:04:59,509
if you do<font color="#CCCCCC"> HTML escaping</font><font color="#E5E5E5"> in a different</font>

120
00:04:57,499 --> 00:05:04,300
context<font color="#CCCCCC"> it can still result in excesses</font>

121
00:04:59,509 --> 00:05:04,300
<font color="#CCCCCC">let me show you one simple example</font><font color="#E5E5E5"> so</font>

122
00:05:05,619 --> 00:05:14,020
here I<font color="#E5E5E5"> have a jsfiddle</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> yeah so you</font>

123
00:05:11,659 --> 00:05:16,399
can see that in the<font color="#CCCCCC"> bottom there is a</font>

124
00:05:14,020 --> 00:05:18,948
HTML<font color="#E5E5E5"> escaping function which is</font>

125
00:05:16,399 --> 00:05:21,469
something<font color="#E5E5E5"> made to stimulate the typical</font>

126
00:05:18,949 --> 00:05:24,259
HTML escaper so in real world<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font>

127
00:05:21,469 --> 00:05:26,659
<font color="#CCCCCC">how your</font><font color="#E5E5E5"> templates escape all the user</font>

128
00:05:24,259 --> 00:05:28,430
input in HTML escaping<font color="#CCCCCC"> mode so</font><font color="#E5E5E5"> you can</font>

129
00:05:26,659 --> 00:05:30,379
see on the left<font color="#E5E5E5"> side the characters</font><font color="#CCCCCC"> I</font>

130
00:05:28,430 --> 00:05:32,539
mean<font color="#E5E5E5"> the harmful characters which will</font>

131
00:05:30,379 --> 00:05:37,059
get escaped into the<font color="#E5E5E5"> characters on the</font>

132
00:05:32,539 --> 00:05:40,520
right side<font color="#E5E5E5"> so here we have a symbol of</font>

133
00:05:37,059 --> 00:05:43,099
paragraph field as well as<font color="#E5E5E5"> an anger tag</font>

134
00:05:40,520 --> 00:05:45,080
<font color="#E5E5E5">and we are we have two inputs</font><font color="#CCCCCC"> the first</font>

135
00:05:43,099 --> 00:05:47,180
one is a typical script solid script<font color="#E5E5E5"> and</font>

136
00:05:45,080 --> 00:05:49,248
then<font color="#E5E5E5"> the second one</font><font color="#CCCCCC"> is JavaScript</font><font color="#E5E5E5"> alert</font>

137
00:05:47,180 --> 00:05:51,020
<font color="#E5E5E5">if you see here we</font><font color="#CCCCCC"> actually pass this</font>

138
00:05:49,249 --> 00:05:53,449
user input<font color="#CCCCCC"> to the escape function</font><font color="#E5E5E5"> and</font>

139
00:05:51,020 --> 00:05:55,279
then write it<font color="#CCCCCC"> to these two are tributes</font>

140
00:05:53,449 --> 00:05:57,889
<font color="#CCCCCC">as a paragraph</font><font color="#E5E5E5"> tag as well as the anger</font>

141
00:05:55,279 --> 00:06:00,050
<font color="#CCCCCC">a chav tag</font><font color="#E5E5E5"> so the first one it works</font>

142
00:05:57,889 --> 00:06:05,180
perfectly fine<font color="#CCCCCC"> you do HTML escaping and</font>

143
00:06:00,050 --> 00:06:08,959
it just come back as harmless<font color="#E5E5E5"> data but</font>

144
00:06:05,180 --> 00:06:10,699
in the second<font color="#CCCCCC"> case your HTML escaping is</font>

145
00:06:08,959 --> 00:06:12,439
not going to help you it just<font color="#E5E5E5"> executed</font>

146
00:06:10,699 --> 00:06:14,620
as a script because<font color="#E5E5E5"> there is</font><font color="#CCCCCC"> nothing to</font>

147
00:06:12,439 --> 00:06:17,269
do with<font color="#CCCCCC"> tml escaping on this context and</font>

148
00:06:14,620 --> 00:06:19,279
this<font color="#E5E5E5"> is a different context and doing</font>

149
00:06:17,269 --> 00:06:21,680
HTML<font color="#CCCCCC"> escaping on that context will never</font>

150
00:06:19,279 --> 00:06:26,949
save you from<font color="#E5E5E5"> Exorcist so these are some</font>

151
00:06:21,680 --> 00:06:26,949
of<font color="#E5E5E5"> the problems</font><font color="#CCCCCC"> ok</font>

152
00:06:40,470 --> 00:06:46,330
so again when it<font color="#E5E5E5"> comes to SQL injection</font>

153
00:06:44,290 --> 00:06:48,160
<font color="#E5E5E5">you have the</font><font color="#CCCCCC"> O arms the problem with</font>

154
00:06:46,330 --> 00:06:49,930
<font color="#E5E5E5">autumn's is that even with some</font><font color="#CCCCCC"> of the</font>

155
00:06:48,160 --> 00:06:52,540
<font color="#E5E5E5">arms a scale injection is still possible</font>

156
00:06:49,930 --> 00:06:55,210
<font color="#CCCCCC">for example in case of</font><font color="#E5E5E5"> active records</font>

157
00:06:52,540 --> 00:06:59,530
used by rails<font color="#CCCCCC"> you can see a lot of</font>

158
00:06:55,210 --> 00:07:00,880
<font color="#E5E5E5">possible way to exploit</font><font color="#CCCCCC"> SQL injection</font><font color="#E5E5E5"> so</font>

159
00:06:59,530 --> 00:07:03,429
there's been<font color="#E5E5E5"> a wiki which has</font>

160
00:07:00,880 --> 00:07:04,480
information<font color="#E5E5E5"> about that even using this</font>

161
00:07:03,430 --> 00:07:07,810
<font color="#CCCCCC">high level API</font>

162
00:07:04,480 --> 00:07:10,150
SQL injection<font color="#E5E5E5"> is still possible so let's</font>

163
00:07:07,810 --> 00:07:12,220
small and there<font color="#E5E5E5"> are other application</font>

164
00:07:10,150 --> 00:07:14,280
security specific threats like OS

165
00:07:12,220 --> 00:07:16,540
<font color="#E5E5E5">command execution remote code injection</font>

166
00:07:14,280 --> 00:07:19,119
then server-side templating diction

167
00:07:16,540 --> 00:07:21,220
session hijacking web tampering<font color="#E5E5E5"> and</font><font color="#CCCCCC"> the</font>

168
00:07:19,120 --> 00:07:23,050
list goes<font color="#CCCCCC"> on</font><font color="#E5E5E5"> I mean the framework</font>

169
00:07:21,220 --> 00:07:24,340
doesn't<font color="#E5E5E5"> have any means</font><font color="#CCCCCC"> to you know</font>

170
00:07:23,050 --> 00:07:25,900
because that's<font color="#E5E5E5"> not a purpose of</font>

171
00:07:24,340 --> 00:07:27,909
frameworks<font color="#E5E5E5"> giving a basic set of</font>

172
00:07:25,900 --> 00:07:29,229
<font color="#CCCCCC">security is always</font><font color="#E5E5E5"> good but it's not</font>

173
00:07:27,910 --> 00:07:32,890
<font color="#E5E5E5">something that is designed to give</font><font color="#CCCCCC"> you</font>

174
00:07:29,230 --> 00:07:34,960
<font color="#CCCCCC">into and security</font><font color="#E5E5E5"> coverage so most of</font>

175
00:07:32,890 --> 00:07:37,030
<font color="#E5E5E5">the people</font><font color="#CCCCCC"> okay we have this unforeseen</font>

176
00:07:34,960 --> 00:07:38,680
<font color="#CCCCCC">fritz that's going to happen</font><font color="#E5E5E5"> so people</font>

177
00:07:37,030 --> 00:07:40,630
always<font color="#CCCCCC"> think</font><font color="#E5E5E5"> that let's use a</font><font color="#CCCCCC"> wofe to</font>

178
00:07:38,680 --> 00:07:42,250
you know defend<font color="#E5E5E5"> against these</font><font color="#CCCCCC"> attacks</font>

179
00:07:40,630 --> 00:07:45,760
<font color="#E5E5E5">that can happen against my web</font>

180
00:07:42,250 --> 00:07:48,130
application<font color="#CCCCCC"> but the question is can</font>

181
00:07:45,760 --> 00:07:51,909
<font color="#CCCCCC">walls really</font><font color="#E5E5E5"> solve the problem</font><font color="#CCCCCC"> the first</font>

182
00:07:48,130 --> 00:07:54,010
<font color="#CCCCCC">work force</font><font color="#E5E5E5"> actually here from like 1999</font>

183
00:07:51,910 --> 00:07:57,250
<font color="#E5E5E5">it</font><font color="#CCCCCC"> was it was</font><font color="#E5E5E5"> called app shield</font><font color="#CCCCCC"> it's</font>

184
00:07:54,010 --> 00:07:59,289
<font color="#E5E5E5">almost like 18 years</font><font color="#CCCCCC"> of existence and I</font>

185
00:07:57,250 --> 00:08:01,240
have a question to<font color="#CCCCCC"> the audience how many</font>

186
00:07:59,290 --> 00:08:06,850
<font color="#E5E5E5">of you use a</font><font color="#CCCCCC"> wolf in your</font><font color="#E5E5E5"> company</font><font color="#CCCCCC"> or</font>

187
00:08:01,240 --> 00:08:09,790
<font color="#CCCCCC">organization or only one other people</font>

188
00:08:06,850 --> 00:08:12,190
<font color="#CCCCCC">don't trust</font><font color="#E5E5E5"> war</font><font color="#CCCCCC"> Francis</font><font color="#E5E5E5"> okay couple</font><font color="#CCCCCC"> of</font>

189
00:08:09,790 --> 00:08:13,510
folks<font color="#E5E5E5"> so how many of you</font><font color="#CCCCCC"> ran it in</font>

190
00:08:12,190 --> 00:08:15,010
defending<font color="#E5E5E5"> mode so there are that like</font>

191
00:08:13,510 --> 00:08:16,180
two<font color="#E5E5E5"> modes one</font><font color="#CCCCCC"> you can run it when</font>

192
00:08:15,010 --> 00:08:17,530
defending<font color="#E5E5E5"> mode to prevent all the</font>

193
00:08:16,180 --> 00:08:18,760
attacks<font color="#CCCCCC"> so one is the monitoring</font><font color="#E5E5E5"> mode</font>

194
00:08:17,530 --> 00:08:20,469
where you will<font color="#CCCCCC"> actually see what is</font>

195
00:08:18,760 --> 00:08:23,370
happening how many of you run it in

196
00:08:20,470 --> 00:08:23,370
defending<font color="#E5E5E5"> mode</font>

197
00:08:23,550 --> 00:08:29,200
none<font color="#E5E5E5"> that's crazy</font><font color="#CCCCCC"> I mean</font><font color="#E5E5E5"> you you pay a</font>

198
00:08:27,850 --> 00:08:31,240
lot of money and then you<font color="#E5E5E5"> bought a</font>

199
00:08:29,200 --> 00:08:33,010
product<font color="#E5E5E5"> and you</font><font color="#CCCCCC"> put it in monitoring</font>

200
00:08:31,240 --> 00:08:34,900
mode to see what is<font color="#CCCCCC"> actually happening</font>

201
00:08:33,010 --> 00:08:38,919
at your organization<font color="#E5E5E5"> and not you don't</font>

202
00:08:34,900 --> 00:08:42,280
<font color="#E5E5E5">want to prevent anything yeah so the</font>

203
00:08:38,919 --> 00:08:45,160
fact<font color="#E5E5E5"> is that</font><font color="#CCCCCC"> laughs I mean most of</font><font color="#E5E5E5"> them</font>

204
00:08:42,280 --> 00:08:46,569
have this problem of false positives and

205
00:08:45,160 --> 00:08:48,819
it's actually due to<font color="#E5E5E5"> the basic</font>

206
00:08:46,570 --> 00:08:50,950
fundamental idea of<font color="#CCCCCC"> a flick they use a</font>

207
00:08:48,820 --> 00:08:52,370
set<font color="#E5E5E5"> of black lists to make</font><font color="#CCCCCC"> sure that an</font>

208
00:08:50,950 --> 00:08:54,410
attack<font color="#E5E5E5"> doesn't happen so</font>

209
00:08:52,370 --> 00:08:56,029
problem with<font color="#CCCCCC"> blacklist is</font><font color="#E5E5E5"> that it can</font>

210
00:08:54,410 --> 00:08:58,160
<font color="#CCCCCC">actually give you a lot of false</font>

211
00:08:56,029 --> 00:09:00,350
<font color="#CCCCCC">positives</font><font color="#E5E5E5"> plus it can be bypassed easily</font>

212
00:08:58,160 --> 00:09:02,990
so being app application security<font color="#E5E5E5"> guys</font>

213
00:09:00,350 --> 00:09:04,820
we know that<font color="#E5E5E5"> blacklist is not the way to</font>

214
00:09:02,990 --> 00:09:06,560
go<font color="#E5E5E5"> on I mean today or tomorrow it will</font>

215
00:09:04,820 --> 00:09:09,770
get<font color="#E5E5E5"> bypassed so I remember this incident</font>

216
00:09:06,560 --> 00:09:11,689
<font color="#E5E5E5">like we have this famous Apache</font><font color="#CCCCCC"> struts</font>

217
00:09:09,770 --> 00:09:14,750
issue came in like<font color="#CCCCCC"> couple</font><font color="#E5E5E5"> of months back</font>

218
00:09:11,690 --> 00:09:16,460
and all the vendors<font color="#CCCCCC"> just suddenly</font><font color="#E5E5E5"> try to</font>

219
00:09:14,750 --> 00:09:19,370
come up<font color="#CCCCCC"> with</font><font color="#E5E5E5"> the rules to prevent that</font>

220
00:09:16,460 --> 00:09:21,290
<font color="#E5E5E5">and then they come</font><font color="#CCCCCC"> up with a rule</font>

221
00:09:19,370 --> 00:09:23,150
it was bypass on the second day they

222
00:09:21,290 --> 00:09:24,290
come up<font color="#E5E5E5"> with another rule and then there</font>

223
00:09:23,150 --> 00:09:26,689
was a new variant of the validity

224
00:09:24,290 --> 00:09:28,670
published<font color="#E5E5E5"> again</font><font color="#CCCCCC"> they have to go with</font><font color="#E5E5E5"> a</font>

225
00:09:26,690 --> 00:09:30,830
lot<font color="#E5E5E5"> of other things so in terms if you</font>

226
00:09:28,670 --> 00:09:34,729
see a typical<font color="#CCCCCC"> organization you don't</font>

227
00:09:30,830 --> 00:09:36,980
really have time<font color="#E5E5E5"> to</font><font color="#CCCCCC"> you know fix the</font>

228
00:09:34,730 --> 00:09:38,839
<font color="#CCCCCC">chord then do all the testing and then</font>

229
00:09:36,980 --> 00:09:40,610
put it<font color="#CCCCCC"> back to the</font><font color="#E5E5E5"> production</font><font color="#CCCCCC"> so that's</font>

230
00:09:38,839 --> 00:09:41,900
the<font color="#CCCCCC"> reason most people use</font><font color="#E5E5E5"> a wife I mean</font>

231
00:09:40,610 --> 00:09:44,240
<font color="#E5E5E5">you can</font><font color="#CCCCCC"> easily deploy</font><font color="#E5E5E5"> it and make sure</font>

232
00:09:41,900 --> 00:09:45,560
<font color="#CCCCCC">that that issue won't</font><font color="#E5E5E5"> happen so you</font>

233
00:09:44,240 --> 00:09:48,410
don't<font color="#E5E5E5"> have to worry about a whole fix or</font>

234
00:09:45,560 --> 00:09:50,719
so but in reality it's giving a<font color="#E5E5E5"> little</font>

235
00:09:48,410 --> 00:09:52,189
bit more pain like one today<font color="#CCCCCC"> or tomorrow</font>

236
00:09:50,720 --> 00:09:54,290
it's<font color="#E5E5E5"> getting bypass you have to rely on</font>

237
00:09:52,190 --> 00:09:58,550
new roles etc<font color="#CCCCCC"> so that's a problem that</font>

238
00:09:54,290 --> 00:09:59,930
<font color="#CCCCCC">we need</font><font color="#E5E5E5"> to solve</font><font color="#CCCCCC"> so there is</font><font color="#E5E5E5"> something</font>

239
00:09:58,550 --> 00:10:03,050
<font color="#CCCCCC">that we need to understand first</font><font color="#E5E5E5"> like</font>

240
00:09:59,930 --> 00:10:05,000
how a typical<font color="#CCCCCC"> war folks</font><font color="#E5E5E5"> so a vas is</font>

241
00:10:03,050 --> 00:10:07,160
completely out of application context it

242
00:10:05,000 --> 00:10:09,560
works based on<font color="#E5E5E5"> the requests</font><font color="#CCCCCC"> that it is</font>

243
00:10:07,160 --> 00:10:12,170
<font color="#E5E5E5">coming to the valve so you have a basic</font>

244
00:10:09,560 --> 00:10:14,540
<font color="#E5E5E5">HTTP request</font><font color="#CCCCCC"> it goes to your wife which</font>

245
00:10:12,170 --> 00:10:15,890
act as<font color="#E5E5E5"> a proxy and then based on its</font>

246
00:10:14,540 --> 00:10:17,449
signature<font color="#E5E5E5"> or blacklist it will make a</font>

247
00:10:15,890 --> 00:10:20,089
decision<font color="#CCCCCC"> whether to allow this traffic</font>

248
00:10:17,450 --> 00:10:22,160
or not<font color="#E5E5E5"> and depending upon the traffic is</font>

249
00:10:20,089 --> 00:10:24,520
allowed<font color="#CCCCCC"> to pass so the basic idea is it</font>

250
00:10:22,160 --> 00:10:28,040
detects an attack not a vulnerability

251
00:10:24,520 --> 00:10:30,439
<font color="#CCCCCC">simple as</font><font color="#E5E5E5"> that and as I mentioned the</font>

252
00:10:28,040 --> 00:10:32,180
strengths are like blacklist<font color="#E5E5E5"> they detect</font>

253
00:10:30,440 --> 00:10:33,800
attack and auto vulnerability<font color="#E5E5E5"> they have</font>

254
00:10:32,180 --> 00:10:36,140
no<font color="#CCCCCC"> application context so I've off</font>

255
00:10:33,800 --> 00:10:38,300
typically does not<font color="#CCCCCC"> have any idea of what</font>

256
00:10:36,140 --> 00:10:40,370
is<font color="#E5E5E5"> happening inside your application so</font>

257
00:10:38,300 --> 00:10:42,680
the only thing it does is it<font color="#CCCCCC"> actually</font>

258
00:10:40,370 --> 00:10:44,450
sits as a proxy between<font color="#E5E5E5"> the requests</font>

259
00:10:42,680 --> 00:10:49,069
<font color="#CCCCCC">coming from the</font><font color="#E5E5E5"> client and the one that</font>

260
00:10:44,450 --> 00:10:50,900
<font color="#E5E5E5">goes</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the app server going on like</font>

261
00:10:49,070 --> 00:10:52,730
<font color="#CCCCCC">what even</font><font color="#E5E5E5"> used to downgrade</font><font color="#CCCCCC"> your</font>

262
00:10:50,900 --> 00:10:55,579
<font color="#CCCCCC">security so</font><font color="#E5E5E5"> you know about perfect</font>

263
00:10:52,730 --> 00:10:58,640
<font color="#CCCCCC">forward secrecy right so like last year</font>

264
00:10:55,580 --> 00:11:00,620
heartbleed<font color="#E5E5E5"> bug was there so which means</font>

265
00:10:58,640 --> 00:11:02,870
that<font color="#E5E5E5"> attacker can actually steal the</font>

266
00:11:00,620 --> 00:11:05,329
<font color="#CCCCCC">server's private key from</font><font color="#E5E5E5"> memory and if</font>

267
00:11:02,870 --> 00:11:06,080
he has<font color="#E5E5E5"> encrypted</font><font color="#CCCCCC"> HTTP</font><font color="#E5E5E5"> traffic which is</font>

268
00:11:05,329 --> 00:11:08,359
<font color="#E5E5E5">collected previously</font>

269
00:11:06,080 --> 00:11:10,760
<font color="#E5E5E5">see he can use that key</font><font color="#CCCCCC"> to decrypt the</font>

270
00:11:08,360 --> 00:11:13,010
traffic<font color="#E5E5E5"> so perfect forward secrecy is a</font>

271
00:11:10,760 --> 00:11:15,350
<font color="#E5E5E5">solution</font><font color="#CCCCCC"> for that I mean if you</font><font color="#E5E5E5"> use BFS</font>

272
00:11:13,010 --> 00:11:16,819
<font color="#CCCCCC">even if you have a previously</font>

273
00:11:15,350 --> 00:11:18,410
interrupted communication and even<font color="#CCCCCC"> if</font>

274
00:11:16,820 --> 00:11:21,890
your private key<font color="#E5E5E5"> sleek</font><font color="#CCCCCC"> and attacker</font>

275
00:11:18,410 --> 00:11:24,230
cannot decrypt it<font color="#CCCCCC"> with the traffic using</font>

276
00:11:21,890 --> 00:11:26,330
the key so this is something<font color="#E5E5E5"> which</font><font color="#CCCCCC"> is</font>

277
00:11:24,230 --> 00:11:29,750
<font color="#E5E5E5">really needed and really recommended so</font>

278
00:11:26,330 --> 00:11:31,690
before putting products that<font color="#E5E5E5"> actually</font>

279
00:11:29,750 --> 00:11:34,970
gives you a sense of<font color="#E5E5E5"> security</font><font color="#CCCCCC"> it's</font>

280
00:11:31,690 --> 00:11:36,350
better or it's ideal to<font color="#CCCCCC"> have</font><font color="#E5E5E5"> some real</font>

281
00:11:34,970 --> 00:11:38,390
secure implementation resources

282
00:11:36,350 --> 00:11:40,850
<font color="#E5E5E5">PFS was something that provides this</font>

283
00:11:38,390 --> 00:11:42,650
level of<font color="#CCCCCC"> security</font><font color="#E5E5E5"> even if certainly here</font>

284
00:11:40,850 --> 00:11:44,600
did work was<font color="#CCCCCC"> even if</font><font color="#E5E5E5"> heard bit bug</font>

285
00:11:42,650 --> 00:11:46,760
<font color="#E5E5E5">affects you if DFS was there you don't</font>

286
00:11:44,600 --> 00:11:49,070
<font color="#E5E5E5">have to you have to worry but still you</font>

287
00:11:46,760 --> 00:11:51,980
<font color="#E5E5E5">don't have to worry about the previously</font>

288
00:11:49,070 --> 00:11:54,740
captured<font color="#E5E5E5"> traffic so the Worf can support</font>

289
00:11:51,980 --> 00:11:56,120
it basically because<font color="#E5E5E5"> you know what you</font>

290
00:11:54,740 --> 00:11:58,250
cannot use that<font color="#E5E5E5"> private key to decrypt</font>

291
00:11:56,120 --> 00:11:59,840
your<font color="#CCCCCC"> traffic so forwards to work it</font><font color="#E5E5E5"> has</font>

292
00:11:58,250 --> 00:12:01,580
<font color="#CCCCCC">to decrypt</font><font color="#E5E5E5"> the traffic and then inspect</font>

293
00:11:59,840 --> 00:12:04,880
<font color="#E5E5E5">it to make</font><font color="#CCCCCC"> sure</font><font color="#E5E5E5"> that there is no issues</font>

294
00:12:01,580 --> 00:12:07,610
but when PFS is there works cannot do it

295
00:12:04,880 --> 00:12:10,010
and some of<font color="#E5E5E5"> them for</font><font color="#CCCCCC"> sometimes some of</font>

296
00:12:07,610 --> 00:12:12,770
them<font color="#E5E5E5"> usually skip those HTTP</font>

297
00:12:10,010 --> 00:12:14,689
transactions which have which is using

298
00:12:12,770 --> 00:12:17,390
an electrical corrupt or anything<font color="#CCCCCC"> that</font>

299
00:12:14,690 --> 00:12:19,730
<font color="#CCCCCC">is</font><font color="#E5E5E5"> VSS and the other thing is it they</font>

300
00:12:17,390 --> 00:12:22,280
will actually<font color="#E5E5E5"> ask you to</font><font color="#CCCCCC"> stop using TFS</font>

301
00:12:19,730 --> 00:12:25,610
use something I mean<font color="#E5E5E5"> use a different set</font>

302
00:12:22,280 --> 00:12:27,620
<font color="#CCCCCC">of</font><font color="#E5E5E5"> specification for</font><font color="#CCCCCC"> HTTP</font><font color="#E5E5E5"> which is not</font>

303
00:12:25,610 --> 00:12:29,360
really something<font color="#E5E5E5"> good and recently some</font>

304
00:12:27,620 --> 00:12:31,580
of<font color="#E5E5E5"> them have</font><font color="#CCCCCC"> come up with this</font><font color="#E5E5E5"> concept</font>

305
00:12:29,360 --> 00:12:33,440
<font color="#E5E5E5">of reverse proxy to forward the</font><font color="#CCCCCC"> traffic</font>

306
00:12:31,580 --> 00:12:35,720
again<font color="#E5E5E5"> back to rust after downloading</font>

307
00:12:33,440 --> 00:12:37,130
this is<font color="#CCCCCC"> a</font><font color="#E5E5E5"> I mean</font><font color="#CCCCCC"> a downgrading Lexus LX</font>

308
00:12:35,720 --> 00:12:38,840
cetera<font color="#E5E5E5"> a couple of things like</font><font color="#CCCCCC"> that but</font>

309
00:12:37,130 --> 00:12:44,570
<font color="#CCCCCC">that has</font><font color="#E5E5E5"> there are its own performance</font>

310
00:12:38,840 --> 00:12:46,190
impact so again TLS 1.3 is coming<font color="#E5E5E5"> and if</font>

311
00:12:44,570 --> 00:12:47,540
you see the elliptical<font color="#CCCCCC"> curve</font>

312
00:12:46,190 --> 00:12:50,810
specification there are a couple of them

313
00:12:47,540 --> 00:12:54,040
to support<font color="#E5E5E5"> BFS and it's going to be a</font>

314
00:12:50,810 --> 00:12:56,750
hard time for off for<font color="#E5E5E5"> most of them</font>

315
00:12:54,040 --> 00:12:59,480
<font color="#CCCCCC">okay so let's take the evolution</font>

316
00:12:56,750 --> 00:13:02,390
evolution of this so we<font color="#E5E5E5"> have</font><font color="#CCCCCC"> wofe</font><font color="#E5E5E5"> which</font>

317
00:12:59,480 --> 00:13:04,220
attack which do attack detection sorry

318
00:13:02,390 --> 00:13:06,170
<font color="#CCCCCC">which to</font><font color="#E5E5E5"> attack detection and prevention</font>

319
00:13:04,220 --> 00:13:07,880
<font color="#E5E5E5">and then you have the SAST and DAST</font>

320
00:13:06,170 --> 00:13:10,280
<font color="#CCCCCC">tools your static and dynamic analyzer</font>

321
00:13:07,880 --> 00:13:11,960
which<font color="#CCCCCC"> two vulnerability detection then</font>

322
00:13:10,280 --> 00:13:14,449
the new breed<font color="#E5E5E5"> which is more related to</font>

323
00:13:11,960 --> 00:13:16,460
<font color="#CCCCCC">Roth's called the IAS T which gives you</font>

324
00:13:14,450 --> 00:13:18,440
precise one ability<font color="#E5E5E5"> detection works more</font>

325
00:13:16,460 --> 00:13:19,580
or less<font color="#E5E5E5"> similar to</font><font color="#CCCCCC"> a rasp and then you</font>

326
00:13:18,440 --> 00:13:21,950
have the rasp<font color="#CCCCCC"> at</font>

327
00:13:19,580 --> 00:13:24,410
<font color="#CCCCCC">detection prevention utilization etc</font><font color="#E5E5E5"> so</font>

328
00:13:21,950 --> 00:13:26,360
these two<font color="#CCCCCC"> are more like a abstract tool</font>

329
00:13:24,410 --> 00:13:28,790
which is to be<font color="#E5E5E5"> used inside</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> app SEC</font>

330
00:13:26,360 --> 00:13:31,520
<font color="#E5E5E5">by security professionals and these are</font>

331
00:13:28,790 --> 00:13:33,170
<font color="#E5E5E5">more</font><font color="#CCCCCC"> like a firewall kind of thing or a</font>

332
00:13:31,520 --> 00:13:36,350
protection kind of<font color="#CCCCCC"> endpoints which you</font>

333
00:13:33,170 --> 00:13:40,490
use just<font color="#E5E5E5"> before internet I</font><font color="#CCCCCC"> mean just</font>

334
00:13:36,350 --> 00:13:43,610
before<font color="#E5E5E5"> your</font><font color="#CCCCCC"> co-operators</font><font color="#E5E5E5"> it's so moving</font>

335
00:13:40,490 --> 00:13:46,490
<font color="#E5E5E5">on let's talk a</font><font color="#CCCCCC"> little</font><font color="#E5E5E5"> bit about runtime</font>

336
00:13:43,610 --> 00:13:48,520
application<font color="#E5E5E5"> self defense</font><font color="#CCCCCC"> it should be</font>

337
00:13:46,490 --> 00:13:50,210
able<font color="#E5E5E5"> to detect both attack</font><font color="#CCCCCC"> and</font>

338
00:13:48,520 --> 00:13:52,250
vulnerability this is some of the

339
00:13:50,210 --> 00:13:54,260
characteristics that<font color="#E5E5E5"> a typical dasu</font><font color="#CCCCCC"> so</font>

340
00:13:52,250 --> 00:13:57,230
right now the term rasp is very generic

341
00:13:54,260 --> 00:13:59,150
<font color="#E5E5E5">people have often come up with</font><font color="#CCCCCC"> different</font>

342
00:13:57,230 --> 00:14:00,590
<font color="#E5E5E5">definition for</font><font color="#CCCCCC"> that so I've</font><font color="#E5E5E5"> collected</font>

343
00:13:59,150 --> 00:14:01,880
some of<font color="#E5E5E5"> them and come up with the</font>

344
00:14:00,590 --> 00:14:03,320
<font color="#E5E5E5">conclusion so these are some</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

345
00:14:01,880 --> 00:14:04,820
<font color="#E5E5E5">things that</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> least you should</font><font color="#CCCCCC"> be</font>

346
00:14:03,320 --> 00:14:06,320
<font color="#E5E5E5">having so it's not something that this</font>

347
00:14:04,820 --> 00:14:08,840
<font color="#CCCCCC">is the definition but since it's a</font>

348
00:14:06,320 --> 00:14:11,360
<font color="#E5E5E5">pretty new concept so it should be</font>

349
00:14:08,840 --> 00:14:12,770
<font color="#E5E5E5">having zero called modification and easy</font>

350
00:14:11,360 --> 00:14:13,430
integration<font color="#E5E5E5"> so this is one important</font>

351
00:14:12,770 --> 00:14:15,140
<font color="#CCCCCC">point of a</font><font color="#E5E5E5"> rust</font>

352
00:14:13,430 --> 00:14:17,150
<font color="#CCCCCC">IRA's product</font><font color="#E5E5E5"> should not</font><font color="#CCCCCC"> ask you to</font>

353
00:14:15,140 --> 00:14:19,610
<font color="#E5E5E5">modify your code</font><font color="#CCCCCC"> to add security to it</font>

354
00:14:17,150 --> 00:14:22,010
and then there is no<font color="#E5E5E5"> need of any extra</font>

355
00:14:19,610 --> 00:14:23,750
hardware<font color="#CCCCCC"> it should be able</font><font color="#E5E5E5"> to apply the</font>

356
00:14:22,010 --> 00:14:25,490
<font color="#CCCCCC">difference</font><font color="#E5E5E5"> inside the application not</font>

357
00:14:23,750 --> 00:14:27,710
around the application<font color="#E5E5E5"> or outside it</font>

358
00:14:25,490 --> 00:14:29,540
like whatever off does and then it

359
00:14:27,710 --> 00:14:30,890
<font color="#CCCCCC">should have caught 11</font><font color="#E5E5E5"> sites like it</font>

360
00:14:29,540 --> 00:14:32,599
should be able<font color="#E5E5E5"> to tell you like this</font>

361
00:14:30,890 --> 00:14:34,939
<font color="#E5E5E5">particular line of code has an</font><font color="#CCCCCC"> issue and</font>

362
00:14:32,600 --> 00:14:36,740
the attack I mean<font color="#CCCCCC"> the attack payload try</font>

363
00:14:34,940 --> 00:14:38,240
to<font color="#E5E5E5"> now reach here</font><font color="#CCCCCC"> and this is the place</font>

364
00:14:36,740 --> 00:14:40,940
where<font color="#E5E5E5"> the issue</font><font color="#CCCCCC"> is you need</font><font color="#E5E5E5"> to fix it</font>

365
00:14:38,240 --> 00:14:42,800
here and then yeah<font color="#CCCCCC"> obviously in</font><font color="#E5E5E5"> the</font>

366
00:14:40,940 --> 00:14:46,340
executed<font color="#E5E5E5"> runtime and there is no use of</font>

367
00:14:42,800 --> 00:14:48,170
blacklist<font color="#E5E5E5"> so going on up like I said</font>

368
00:14:46,340 --> 00:14:49,970
<font color="#CCCCCC">this is</font><font color="#E5E5E5"> the ideal place</font><font color="#CCCCCC"> for putting</font><font color="#E5E5E5"> your</font>

369
00:14:48,170 --> 00:14:51,560
security<font color="#E5E5E5"> product it should</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> inside</font><font color="#CCCCCC"> the</font>

370
00:14:49,970 --> 00:14:55,160
application not around your application

371
00:14:51,560 --> 00:14:58,579
or outside your application<font color="#CCCCCC"> ok so again</font>

372
00:14:55,160 --> 00:15:00,589
there is some classification of rasp<font color="#E5E5E5"> so</font>

373
00:14:58,580 --> 00:15:03,530
this is also not<font color="#E5E5E5"> strictly defined</font>

374
00:15:00,590 --> 00:15:05,030
anywhere<font color="#E5E5E5"> just I got it from couple of</font>

375
00:15:03,530 --> 00:15:06,880
researchers<font color="#CCCCCC"> a couple of open</font><font color="#E5E5E5"> source</font>

376
00:15:05,030 --> 00:15:09,439
implementations<font color="#CCCCCC"> that I have seen outside</font>

377
00:15:06,880 --> 00:15:10,760
<font color="#E5E5E5">there is a pattern</font><font color="#CCCCCC"> matching with there</font>

378
00:15:09,440 --> 00:15:11,210
is one type with pattern matching<font color="#E5E5E5"> and</font>

379
00:15:10,760 --> 00:15:14,030
<font color="#CCCCCC">blacklists</font>

380
00:15:11,210 --> 00:15:16,070
so that's<font color="#E5E5E5"> just your typical graph</font><font color="#CCCCCC"> it's</font>

381
00:15:14,030 --> 00:15:17,689
an all thing in<font color="#CCCCCC"> an you all wine in a new</font>

382
00:15:16,070 --> 00:15:19,700
bottle it's not<font color="#E5E5E5"> the right thing that's</font>

383
00:15:17,690 --> 00:15:21,820
not even a lot it doesn't<font color="#CCCCCC"> even deserve</font>

384
00:15:19,700 --> 00:15:23,180
to<font color="#E5E5E5"> be</font><font color="#CCCCCC"> called as or as it's just your</font>

385
00:15:21,820 --> 00:15:25,670
<font color="#CCCCCC">wofe</font>

386
00:15:23,180 --> 00:15:26,989
more like a software buff<font color="#E5E5E5"> then you have</font>

387
00:15:25,670 --> 00:15:28,640
dynamic training which is a good

388
00:15:26,990 --> 00:15:31,730
<font color="#CCCCCC">methodology but</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> haven't</font><font color="#E5E5E5"> really seen it</font>

389
00:15:28,640 --> 00:15:33,439
<font color="#E5E5E5">being used in a lot</font><font color="#CCCCCC"> of them maybe</font>

390
00:15:31,730 --> 00:15:36,050
<font color="#E5E5E5">because</font><font color="#CCCCCC"> of the performance</font><font color="#E5E5E5"> impact that</font>

391
00:15:33,440 --> 00:15:36,890
we'll add up<font color="#E5E5E5"> then there is the one by</font>

392
00:15:36,050 --> 00:15:39,079
which realization and

393
00:15:36,890 --> 00:15:41,689
compartmentalization<font color="#CCCCCC"> it's a bit less</font>

394
00:15:39,080 --> 00:15:44,780
precise<font color="#CCCCCC"> and it's</font><font color="#E5E5E5"> very</font><font color="#CCCCCC"> specific to</font>

395
00:15:41,690 --> 00:15:47,480
certain like certain<font color="#E5E5E5"> languages or</font>

396
00:15:44,780 --> 00:15:49,880
certain frameworks<font color="#CCCCCC"> currently the</font><font color="#E5E5E5"> one</font>

397
00:15:47,480 --> 00:15:51,110
that I have<font color="#E5E5E5"> seen is for JVM and then</font>

398
00:15:49,880 --> 00:15:52,970
there is the<font color="#E5E5E5"> one</font><font color="#CCCCCC"> that I'm going</font><font color="#E5E5E5"> to talk</font>

399
00:15:51,110 --> 00:15:55,240
<font color="#CCCCCC">about today</font><font color="#E5E5E5"> that's</font><font color="#CCCCCC"> the one using code</font>

400
00:15:52,970 --> 00:15:58,010
instrumentation and dynamic<font color="#E5E5E5"> whitelist</font>

401
00:15:55,240 --> 00:16:00,050
<font color="#E5E5E5">it's specific to framework so for a</font>

402
00:15:58,010 --> 00:16:01,910
particular product like<font color="#CCCCCC"> grasp to work</font>

403
00:16:00,050 --> 00:16:02,660
<font color="#E5E5E5">you need</font><font color="#CCCCCC"> to have framework to be used in</font>

404
00:16:01,910 --> 00:16:05,089
<font color="#CCCCCC">your organization</font>

405
00:16:02,660 --> 00:16:07,550
so if you write<font color="#E5E5E5"> PHP or Java or Ruby or</font>

406
00:16:05,090 --> 00:16:09,890
<font color="#CCCCCC">Python code from scratch</font><font color="#E5E5E5"> it's pretty</font>

407
00:16:07,550 --> 00:16:11,240
much<font color="#CCCCCC"> not that useful but you</font><font color="#E5E5E5"> have if you</font>

408
00:16:09,890 --> 00:16:14,120
<font color="#E5E5E5">have application built on top of</font>

409
00:16:11,240 --> 00:16:17,150
frameworks<font color="#E5E5E5"> this kind of for us makes a</font>

410
00:16:14,120 --> 00:16:19,850
lot of sense<font color="#E5E5E5"> so these are the focus</font><font color="#CCCCCC"> of</font>

411
00:16:17,150 --> 00:16:21,770
my research I will<font color="#E5E5E5"> be talking</font><font color="#CCCCCC"> about us</font>

412
00:16:19,850 --> 00:16:24,500
<font color="#CCCCCC">by API instrumentation and dynamic</font>

413
00:16:21,770 --> 00:16:26,449
whitelist<font color="#E5E5E5"> I'll also show you a pretty</font>

414
00:16:24,500 --> 00:16:29,630
vulnerable<font color="#E5E5E5"> buys an application developed</font>

415
00:16:26,450 --> 00:16:31,370
in<font color="#CCCCCC"> senado and proof of</font><font color="#E5E5E5"> concept</font><font color="#CCCCCC"> Russ</font>

416
00:16:29,630 --> 00:16:33,590
model implemented<font color="#E5E5E5"> to inject security</font>

417
00:16:31,370 --> 00:16:34,730
into it you<font color="#E5E5E5"> will see a couple</font><font color="#CCCCCC"> of code</font>

418
00:16:33,590 --> 00:16:39,530
injection vulnerabilities being

419
00:16:34,730 --> 00:16:41,300
prevented like SQL I<font color="#E5E5E5"> RC</font><font color="#CCCCCC"> XS etc and some</font>

420
00:16:39,530 --> 00:16:43,040
<font color="#E5E5E5">of the other</font><font color="#CCCCCC"> apps X</font><font color="#E5E5E5"> challenges like web</font>

421
00:16:41,300 --> 00:16:46,490
tampering<font color="#CCCCCC"> federal injection file upload</font>

422
00:16:43,040 --> 00:16:48,020
<font color="#E5E5E5">protection</font><font color="#CCCCCC"> pass travel etc and also just</font>

423
00:16:46,490 --> 00:16:51,230
give<font color="#E5E5E5"> you a glimpse on my</font><font color="#CCCCCC"> ongoing</font>

424
00:16:48,020 --> 00:16:52,790
research also so before going into

425
00:16:51,230 --> 00:16:53,930
<font color="#E5E5E5">instrument</font><font color="#CCCCCC"> I draw square these</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> the</font>

426
00:16:52,790 --> 00:16:55,459
<font color="#CCCCCC">couple of</font><font color="#E5E5E5"> things</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you need to</font>

427
00:16:53,930 --> 00:16:57,410
understand really

428
00:16:55,460 --> 00:16:59,870
so one first thing is<font color="#CCCCCC"> monkey-patching</font>

429
00:16:57,410 --> 00:17:02,030
and second one is lexical analysis<font color="#E5E5E5"> and</font>

430
00:16:59,870 --> 00:17:03,170
the third thing is context<font color="#CCCCCC"> generation</font><font color="#E5E5E5"> we</font>

431
00:17:02,030 --> 00:17:05,480
<font color="#E5E5E5">will go through</font><font color="#CCCCCC"> each</font><font color="#E5E5E5"> of this concept</font>

432
00:17:03,170 --> 00:17:06,920
<font color="#E5E5E5">most of the things may be aware of I</font>

433
00:17:05,480 --> 00:17:11,270
mean<font color="#E5E5E5"> you might</font><font color="#CCCCCC"> be aware of</font><font color="#E5E5E5"> most of the</font>

434
00:17:06,920 --> 00:17:13,220
things so monkey patching or<font color="#E5E5E5"> runtime</font>

435
00:17:11,270 --> 00:17:15,980
hooking and patching is the methodology

436
00:17:13,220 --> 00:17:19,100
<font color="#CCCCCC">that allows</font><font color="#E5E5E5"> you to change the</font><font color="#CCCCCC"> definition</font>

437
00:17:15,980 --> 00:17:21,020
<font color="#E5E5E5">of a function at runtime just let me</font>

438
00:17:19,099 --> 00:17:25,119
<font color="#E5E5E5">show you an example that's easiest way</font>

439
00:17:21,020 --> 00:17:29,810
to<font color="#E5E5E5"> demonstrate this so you have</font><font color="#CCCCCC"> here</font>

440
00:17:25,119 --> 00:17:33,080
<font color="#E5E5E5">okay you have an HTML anchor tag</font><font color="#CCCCCC"> and you</font>

441
00:17:29,810 --> 00:17:33,560
<font color="#E5E5E5">can see that there's an on click event</font>

442
00:17:33,080 --> 00:17:35,960
handler

443
00:17:33,560 --> 00:17:39,200
<font color="#E5E5E5">JavaScript which one click will alert we</font>

444
00:17:35,960 --> 00:17:41,230
love you and<font color="#CCCCCC"> there's text for that</font>

445
00:17:39,200 --> 00:17:43,400
<font color="#E5E5E5">that's monkey parts let's click on</font><font color="#CCCCCC"> that</font>

446
00:17:41,230 --> 00:17:43,850
but it's<font color="#E5E5E5"> actually showing we don't love</font>

447
00:17:43,400 --> 00:17:46,250
<font color="#E5E5E5">you anymore</font>

448
00:17:43,850 --> 00:17:47,030
<font color="#E5E5E5">so that's a simple</font><font color="#CCCCCC"> example of monkey</font>

449
00:17:46,250 --> 00:17:49,430
patching<font color="#E5E5E5"> so what</font>

450
00:17:47,030 --> 00:17:52,100
actually did is we modify the<font color="#E5E5E5"> I mean we</font>

451
00:17:49,430 --> 00:17:53,840
we modify hook into<font color="#CCCCCC"> that function and we</font>

452
00:17:52,100 --> 00:17:55,520
modify what it is supposed to do we

453
00:17:53,840 --> 00:17:56,929
actually<font color="#CCCCCC"> change replace</font><font color="#E5E5E5"> arguments with</font>

454
00:17:55,520 --> 00:18:00,320
something like this we don't<font color="#E5E5E5"> love you</font>

455
00:17:56,930 --> 00:18:02,120
<font color="#E5E5E5">anymore that's a basic concept so that's</font>

456
00:18:00,320 --> 00:18:04,100
pretty clear

457
00:18:02,120 --> 00:18:08,090
moving on<font color="#E5E5E5"> lexical analysis</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> talk on</font>

458
00:18:04,100 --> 00:18:09,350
<font color="#E5E5E5">generation</font><font color="#CCCCCC"> so we have to use elixir so</font>

459
00:18:08,090 --> 00:18:11,810
<font color="#E5E5E5">I'll tell you like why we are actually</font>

460
00:18:09,350 --> 00:18:13,189
<font color="#CCCCCC">using all this in</font><font color="#E5E5E5"> couple of slides after</font>

461
00:18:11,810 --> 00:18:15,919
but before that let's understand this is

462
00:18:13,190 --> 00:18:18,650
first so a typical lecture how it works

463
00:18:15,920 --> 00:18:21,860
is<font color="#CCCCCC"> like you give a statement</font><font color="#E5E5E5"> to it like</font>

464
00:18:18,650 --> 00:18:24,440
something<font color="#CCCCCC"> like if X greater than 3.1 it</font>

465
00:18:21,860 --> 00:18:26,600
will go to the lexical analyzer<font color="#E5E5E5"> which</font>

466
00:18:24,440 --> 00:18:29,060
will create a set of<font color="#CCCCCC"> tokens</font><font color="#E5E5E5"> like if is a</font>

467
00:18:26,600 --> 00:18:31,760
<font color="#E5E5E5">keyword opening is a bracket then X is</font>

468
00:18:29,060 --> 00:18:33,830
<font color="#E5E5E5">an identifier and less greater less than</font>

469
00:18:31,760 --> 00:18:36,200
sorry greater than<font color="#E5E5E5"> it's an operator and</font>

470
00:18:33,830 --> 00:18:37,879
number<font color="#CCCCCC"> 3 point 1</font><font color="#E5E5E5"> is the number so</font><font color="#CCCCCC"> that's</font>

471
00:18:36,200 --> 00:18:42,080
how a typical lexical analyzers work<font color="#E5E5E5"> it</font>

472
00:18:37,880 --> 00:18:43,640
generates tokens and in the<font color="#E5E5E5"> generic</font><font color="#CCCCCC"> to</font>

473
00:18:42,080 --> 00:18:45,679
the lexical<font color="#E5E5E5"> analyzer what it does is it</font>

474
00:18:43,640 --> 00:18:49,730
will<font color="#E5E5E5"> skip all the white spaces and</font>

475
00:18:45,680 --> 00:18:51,680
comments and also<font color="#E5E5E5"> if it sees a you know</font>

476
00:18:49,730 --> 00:18:54,050
statement which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> not in its grammar</font><font color="#CCCCCC"> it</font>

477
00:18:51,680 --> 00:18:56,240
will<font color="#E5E5E5"> actually break so I have actually</font>

478
00:18:54,050 --> 00:18:58,100
modified these two things slightly<font color="#E5E5E5"> a</font>

479
00:18:56,240 --> 00:19:01,070
<font color="#CCCCCC">different way to support this</font><font color="#E5E5E5"> particular</font>

480
00:18:58,100 --> 00:19:03,740
concept so the lecture<font color="#E5E5E5"> that I have</font><font color="#CCCCCC"> will</font>

481
00:19:01,070 --> 00:19:06,020
accept<font color="#E5E5E5"> whitespace and comments also</font><font color="#CCCCCC"> it</font>

482
00:19:03,740 --> 00:19:08,450
will try<font color="#E5E5E5"> to you know categorize those</font>

483
00:19:06,020 --> 00:19:09,710
things that it cannot identify<font color="#E5E5E5"> and it</font>

484
00:19:08,450 --> 00:19:12,440
won't generate<font color="#E5E5E5"> an error when</font><font color="#CCCCCC"> it doesn't</font>

485
00:19:09,710 --> 00:19:15,230
<font color="#E5E5E5">see an invalid talking so this is how a</font>

486
00:19:12,440 --> 00:19:18,890
<font color="#CCCCCC">symbol</font><font color="#E5E5E5"> statement int value equal to 100</font>

487
00:19:15,230 --> 00:19:20,720
and a command value is 100 so if you

488
00:19:18,890 --> 00:19:22,520
give it<font color="#E5E5E5"> a</font><font color="#CCCCCC"> typical lecture it will looks</font>

489
00:19:20,720 --> 00:19:25,070
it like this<font color="#E5E5E5"> into the</font><font color="#CCCCCC"> keyword value side</font>

490
00:19:22,520 --> 00:19:27,050
<font color="#CCCCCC">refer</font><font color="#E5E5E5"> equal to operator 100 is constant</font>

491
00:19:25,070 --> 00:19:28,790
and something called<font color="#E5E5E5"> a symbol the same</font>

492
00:19:27,050 --> 00:19:30,230
thing if you give it to the custom

493
00:19:28,790 --> 00:19:31,970
lecture that we<font color="#CCCCCC"> will be using</font><font color="#E5E5E5"> it also</font>

494
00:19:30,230 --> 00:19:34,570
<font color="#E5E5E5">considered white spaces as well as</font>

495
00:19:31,970 --> 00:19:37,610
<font color="#CCCCCC">comments</font><font color="#E5E5E5"> that's</font><font color="#CCCCCC"> only</font><font color="#E5E5E5"> difference</font>

496
00:19:34,570 --> 00:19:40,760
so moving on<font color="#CCCCCC"> there is</font><font color="#E5E5E5"> another thing</font>

497
00:19:37,610 --> 00:19:42,050
<font color="#E5E5E5">called context determination so this is</font>

498
00:19:40,760 --> 00:19:43,760
<font color="#E5E5E5">pretty important</font><font color="#CCCCCC"> for cross-site</font>

499
00:19:42,050 --> 00:19:46,340
<font color="#E5E5E5">scripting we'll come into that but</font>

500
00:19:43,760 --> 00:19:49,070
before that you have<font color="#CCCCCC"> a set of HTML code</font>

501
00:19:46,340 --> 00:19:51,290
<font color="#CCCCCC">you</font><font color="#E5E5E5"> parse it using an HTML parser and</font>

502
00:19:49,070 --> 00:19:54,590
what happens is the parser will generate

503
00:19:51,290 --> 00:19:56,659
as<font color="#E5E5E5"> Dom tree which clearly mentions what</font>

504
00:19:54,590 --> 00:19:59,449
is what like<font color="#CCCCCC"> there is an ID tag call</font><font color="#E5E5E5"> ID</font>

505
00:19:56,660 --> 00:20:00,970
n whose value is ID<font color="#CCCCCC"> n and then there is</font>

506
00:19:59,450 --> 00:20:03,850
<font color="#E5E5E5">h1 inside the text</font>

507
00:20:00,970 --> 00:20:05,799
cetera<font color="#E5E5E5"> so that's a pass</font><font color="#CCCCCC"> tree that's</font><font color="#E5E5E5"> for</font>

508
00:20:03,850 --> 00:20:09,158
context<font color="#CCCCCC"> termination so right we now know</font>

509
00:20:05,799 --> 00:20:12,330
that<font color="#E5E5E5"> what context is</font><font color="#CCCCCC"> ids in what context</font>

510
00:20:09,159 --> 00:20:16,929
<font color="#CCCCCC">iDEN</font><font color="#E5E5E5"> is in what context hello is in</font><font color="#CCCCCC"> etc</font>

511
00:20:12,330 --> 00:20:18,549
<font color="#E5E5E5">okay so you know about we know that</font>

512
00:20:16,929 --> 00:20:20,559
<font color="#E5E5E5">there have been like injection</font>

513
00:20:18,549 --> 00:20:21,850
vulnerabilities<font color="#E5E5E5"> from</font><font color="#CCCCCC"> sins from</font><font color="#E5E5E5"> the</font>

514
00:20:20,559 --> 00:20:23,950
beginning of where there is like

515
00:20:21,850 --> 00:20:26,199
<font color="#CCCCCC">excesses</font><font color="#E5E5E5"> SQL and a lot more</font><font color="#CCCCCC"> and it is</font>

516
00:20:23,950 --> 00:20:28,210
still there even<font color="#E5E5E5"> today</font><font color="#CCCCCC"> we were not</font>

517
00:20:26,200 --> 00:20:31,480
<font color="#E5E5E5">really successful</font><font color="#CCCCCC"> in preventing that</font>

518
00:20:28,210 --> 00:20:33,490
unless we write secure code right so the

519
00:20:31,480 --> 00:20:35,200
<font color="#E5E5E5">thing that we have</font><font color="#CCCCCC"> to understand is</font><font color="#E5E5E5"> the</font>

520
00:20:33,490 --> 00:20:37,120
reason<font color="#CCCCCC"> for all this</font><font color="#E5E5E5"> injection</font>

521
00:20:35,200 --> 00:20:39,070
<font color="#E5E5E5">vulnerability is that your interpreter</font>

522
00:20:37,120 --> 00:20:41,408
<font color="#E5E5E5">does not distinguish between code and</font>

523
00:20:39,070 --> 00:20:44,139
data<font color="#E5E5E5"> so whatever you give it to it it</font>

524
00:20:41,409 --> 00:20:46,120
actually<font color="#E5E5E5"> executes irrespective of you</font>

525
00:20:44,140 --> 00:20:47,650
know any<font color="#CCCCCC"> other instruction so it cannot</font>

526
00:20:46,120 --> 00:20:49,360
distinguish<font color="#CCCCCC"> between your code and data</font>

527
00:20:47,650 --> 00:20:51,340
so if you can solve that<font color="#CCCCCC"> problem till</font>

528
00:20:49,360 --> 00:20:53,530
your interpreter that this is caught and

529
00:20:51,340 --> 00:20:55,000
this<font color="#E5E5E5"> is data then you can pretty much</font>

530
00:20:53,530 --> 00:20:56,260
<font color="#E5E5E5">solve this problem all the injection</font>

531
00:20:55,000 --> 00:20:59,620
problems<font color="#E5E5E5"> so that's what we are going to</font>

532
00:20:56,260 --> 00:21:03,370
do here<font color="#CCCCCC"> so let's</font><font color="#E5E5E5"> take a look into how we</font>

533
00:20:59,620 --> 00:21:05,110
are preventing<font color="#E5E5E5"> SQL injection first this</font>

534
00:21:03,370 --> 00:21:07,239
<font color="#E5E5E5">is a symbol a scale</font><font color="#CCCCCC"> quarry select star</font>

535
00:21:05,110 --> 00:21:08,678
from user input so where user input is

536
00:21:07,240 --> 00:21:11,490
something that<font color="#E5E5E5"> comes from the user so a</font>

537
00:21:08,679 --> 00:21:13,510
simple<font color="#E5E5E5"> scale quarry</font><font color="#CCCCCC"> so as per the</font>

538
00:21:11,490 --> 00:21:16,240
technologies that we<font color="#E5E5E5"> learn before we</font>

539
00:21:13,510 --> 00:21:18,250
<font color="#E5E5E5">hook into</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> cursor or execute so</font>

540
00:21:16,240 --> 00:21:20,980
before<font color="#CCCCCC"> that I'm I'll be showing a sample</font>

541
00:21:18,250 --> 00:21:22,390
<font color="#E5E5E5">Python application in which the</font><font color="#CCCCCC"> RAF's</font>

542
00:21:20,980 --> 00:21:23,799
technology is implemented so everything

543
00:21:22,390 --> 00:21:26,409
<font color="#CCCCCC">that</font><font color="#E5E5E5"> I talk from a core prospective will</font>

544
00:21:23,799 --> 00:21:28,299
be corresponding<font color="#E5E5E5"> to Python so</font><font color="#CCCCCC"> cannot</font>

545
00:21:26,409 --> 00:21:30,730
<font color="#E5E5E5">execute</font><font color="#CCCCCC"> is an API in</font><font color="#E5E5E5"> Python that allows</font>

546
00:21:28,299 --> 00:21:34,090
you<font color="#E5E5E5"> to execute xql</font><font color="#CCCCCC"> Cori's what we do is</font>

547
00:21:30,730 --> 00:21:36,490
we hook<font color="#E5E5E5"> in the coset or execute and we</font>

548
00:21:34,090 --> 00:21:38,110
use<font color="#CCCCCC"> monkey-patching to you know take the</font>

549
00:21:36,490 --> 00:21:40,720
extract the statements that<font color="#E5E5E5"> is select</font>

550
00:21:38,110 --> 00:21:42,459
star from logs we do a lexical analysis

551
00:21:40,720 --> 00:21:44,289
of this so select star from<font color="#CCCCCC"> locks will</font>

552
00:21:42,460 --> 00:21:45,789
come down as select is a<font color="#E5E5E5"> keyword and</font>

553
00:21:44,289 --> 00:21:47,770
then there's a<font color="#E5E5E5"> white space</font><font color="#CCCCCC"> so on and so</font>

554
00:21:45,789 --> 00:21:50,408
forth so<font color="#E5E5E5"> you get a structure</font><font color="#CCCCCC"> either as</font>

555
00:21:47,770 --> 00:21:52,690
<font color="#CCCCCC">broken so for</font><font color="#E5E5E5"> that particular line</font><font color="#CCCCCC"> of</font>

556
00:21:50,409 --> 00:21:55,030
code in the application<font color="#CCCCCC"> we have a</font>

557
00:21:52,690 --> 00:21:57,130
context which tells you exactly this is

558
00:21:55,030 --> 00:21:58,510
<font color="#CCCCCC">the structure and the next time an</font>

559
00:21:57,130 --> 00:22:01,030
attacker try to<font color="#E5E5E5"> inject something like</font>

560
00:21:58,510 --> 00:22:02,110
this which this will actually changes

561
00:22:01,030 --> 00:22:04,299
everything<font color="#E5E5E5"> when you do</font><font color="#CCCCCC"> and execute</font>

562
00:22:02,110 --> 00:22:05,799
analysis and we can precisely detect it

563
00:22:04,299 --> 00:22:08,679
<font color="#CCCCCC">and clock it so it's it's</font><font color="#E5E5E5"> quite precise</font>

564
00:22:05,799 --> 00:22:10,059
so for example for the<font color="#E5E5E5"> particular</font>

565
00:22:08,679 --> 00:22:12,789
context<font color="#E5E5E5"> that</font><font color="#CCCCCC"> execute select star from</font>

566
00:22:10,059 --> 00:22:14,870
incident<font color="#CCCCCC"> boot</font><font color="#E5E5E5"> we learn that the talk and</font>

567
00:22:12,789 --> 00:22:16,670
<font color="#E5E5E5">for that</font><font color="#CCCCCC"> particular context is</font>

568
00:22:14,870 --> 00:22:18,830
<font color="#CCCCCC">keyword white space operator white space</font>

569
00:22:16,670 --> 00:22:20,450
<font color="#CCCCCC">keyword bites with string so it should</font>

570
00:22:18,830 --> 00:22:21,980
ideally allow anything<font color="#E5E5E5"> like select stuff</font>

571
00:22:20,450 --> 00:22:24,020
<font color="#CCCCCC">on low select</font><font color="#E5E5E5"> star from history or</font>

572
00:22:21,980 --> 00:22:25,520
<font color="#E5E5E5">select star from any other string but</font>

573
00:22:24,020 --> 00:22:28,670
<font color="#CCCCCC">the moment you</font><font color="#E5E5E5"> try to</font><font color="#CCCCCC"> are there code</font>

574
00:22:25,520 --> 00:22:30,920
there like<font color="#E5E5E5"> selects often logs and SQL</font>

575
00:22:28,670 --> 00:22:32,570
and curry<font color="#E5E5E5"> which is like a code if the</font>

576
00:22:30,920 --> 00:22:34,760
structure<font color="#E5E5E5"> completely changes and you can</font>

577
00:22:32,570 --> 00:22:38,439
precisely detect it as a scale injection

578
00:22:34,760 --> 00:22:38,440
so let's see a demo

579
00:22:49,360 --> 00:22:55,409
so here I have<font color="#CCCCCC"> a vulnerable tornado</font>

580
00:22:51,940 --> 00:22:55,410
application let me just run it

581
00:23:05,440 --> 00:23:11,540
it has a<font color="#E5E5E5"> couple</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> SQL injections</font><font color="#CCCCCC"> like</font>

582
00:23:08,650 --> 00:23:16,940
here<font color="#E5E5E5"> let's do the classic SQL injection</font>

583
00:23:11,540 --> 00:23:18,950
payload<font color="#E5E5E5"> you can see that login</font><font color="#CCCCCC"> success</font>

584
00:23:16,940 --> 00:23:25,280
<font color="#E5E5E5">alert me so the underlying vulnerable</font>

585
00:23:18,950 --> 00:23:28,850
code is<font color="#E5E5E5"> something like this one select</font>

586
00:23:25,280 --> 00:23:30,530
<font color="#CCCCCC">star from users where</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> username is</font>

587
00:23:28,850 --> 00:23:31,790
coming from user input<font color="#CCCCCC"> and password is</font>

588
00:23:30,530 --> 00:23:34,610
<font color="#CCCCCC">also coming</font><font color="#E5E5E5"> from user and pretty</font>

589
00:23:31,790 --> 00:23:35,570
straightforward now let's see how it

590
00:23:34,610 --> 00:23:40,370
<font color="#CCCCCC">works</font>

591
00:23:35,570 --> 00:23:41,750
with Ross module in incorporated so this

592
00:23:40,370 --> 00:23:43,939
is a protected version of the same a

593
00:23:41,750 --> 00:23:45,350
<font color="#E5E5E5">little</font><font color="#CCCCCC"> application</font><font color="#E5E5E5"> and for your</font>

594
00:23:43,940 --> 00:23:47,240
reference I'll just show you<font color="#E5E5E5"> the only</font>

595
00:23:45,350 --> 00:23:54,620
<font color="#E5E5E5">change</font><font color="#CCCCCC"> that I made with</font><font color="#E5E5E5"> this application</font>

596
00:23:47,240 --> 00:23:59,240
is that<font color="#CCCCCC"> okay so this</font><font color="#E5E5E5"> is a vulnerable</font>

597
00:23:54,620 --> 00:24:01,489
<font color="#E5E5E5">application on the left side and this is</font>

598
00:23:59,240 --> 00:24:04,310
<font color="#E5E5E5">sorry this is a vulnerable application</font>

599
00:24:01,490 --> 00:24:06,440
on the right side and then<font color="#CCCCCC"> there were</font>

600
00:24:04,310 --> 00:24:07,970
the protected application on the left

601
00:24:06,440 --> 00:24:10,160
side<font color="#CCCCCC"> so the only</font><font color="#E5E5E5"> change is there is</font>

602
00:24:07,970 --> 00:24:12,350
something<font color="#E5E5E5"> state a statement called</font>

603
00:24:10,160 --> 00:24:13,810
<font color="#E5E5E5">embarass that's only difference</font><font color="#CCCCCC"> li so</font><font color="#E5E5E5"> I</font>

604
00:24:12,350 --> 00:24:18,980
haven't<font color="#CCCCCC"> changed any code you</font><font color="#E5E5E5"> can just</font>

605
00:24:13,810 --> 00:24:20,480
<font color="#CCCCCC">cord out</font><font color="#E5E5E5"> and see the same set</font><font color="#CCCCCC"> of</font>

606
00:24:18,980 --> 00:24:27,620
vulnerable<font color="#CCCCCC"> caught there is</font><font color="#E5E5E5"> nothing out</font>

607
00:24:20,480 --> 00:24:33,020
<font color="#CCCCCC">of there okay</font><font color="#E5E5E5"> so let's take the</font>

608
00:24:27,620 --> 00:24:34,879
protected application and for the first

609
00:24:33,020 --> 00:24:35,930
<font color="#E5E5E5">time it has to learn your application so</font>

610
00:24:34,880 --> 00:24:37,760
<font color="#E5E5E5">that's the time when you'd actually</font>

611
00:24:35,930 --> 00:24:40,310
tokenize and create at the legitimate

612
00:24:37,760 --> 00:24:47,030
<font color="#E5E5E5">talk and for the particular context so</font>

613
00:24:40,310 --> 00:24:51,850
let<font color="#E5E5E5"> me try</font><font color="#CCCCCC"> something like it says login</font>

614
00:24:47,030 --> 00:24:51,850
<font color="#E5E5E5">failed and I give something</font><font color="#CCCCCC"> like this</font>

615
00:24:52,600 --> 00:24:58,760
<font color="#CCCCCC">okay login is successful now let's</font><font color="#E5E5E5"> try</font>

616
00:24:55,880 --> 00:25:03,130
to<font color="#E5E5E5"> exploit this using an SQL injection</font>

617
00:24:58,760 --> 00:25:03,129
<font color="#E5E5E5">let's try to execute the Curie</font>

618
00:25:06,320 --> 00:25:12,470
it blocked me so what essentially

619
00:25:09,529 --> 00:25:13,789
happened is the structure<font color="#E5E5E5"> of the</font>

620
00:25:12,470 --> 00:25:15,470
<font color="#CCCCCC">tokenized structure of the quarry</font>

621
00:25:13,789 --> 00:25:18,620
changes and that's<font color="#CCCCCC"> the reason</font><font color="#E5E5E5"> why it got</font>

622
00:25:15,470 --> 00:25:20,120
<font color="#E5E5E5">blocked if you want to see how we see</font>

623
00:25:18,620 --> 00:25:30,258
the rule for the<font color="#E5E5E5"> particular context</font><font color="#CCCCCC"> I</font>

624
00:25:20,120 --> 00:25:32,629
<font color="#CCCCCC">can just</font><font color="#E5E5E5"> show you so in real world it's</font>

625
00:25:30,259 --> 00:25:34,610
not<font color="#E5E5E5"> it won't be using any database or</font>

626
00:25:32,630 --> 00:25:36,440
<font color="#CCCCCC">something like this because</font><font color="#E5E5E5"> that's again</font>

627
00:25:34,610 --> 00:25:37,908
hard up another headaches<font color="#E5E5E5"> and all those</font>

628
00:25:36,440 --> 00:25:39,049
things<font color="#E5E5E5"> so</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> for the</font><font color="#CCCCCC"> demonstration</font>

629
00:25:37,909 --> 00:25:41,330
purpose<font color="#E5E5E5"> I will be showing in a database</font>

630
00:25:39,049 --> 00:25:45,110
<font color="#E5E5E5">so this is the rule</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> the particular</font>

631
00:25:41,330 --> 00:25:46,668
context<font color="#CCCCCC"> so you can see that this is the</font>

632
00:25:45,110 --> 00:25:48,740
rule generated for the particular

633
00:25:46,669 --> 00:25:50,779
context of a skill<font color="#E5E5E5"> a select star from</font>

634
00:25:48,740 --> 00:25:54,159
<font color="#CCCCCC">username where something is user and</font>

635
00:25:50,779 --> 00:25:56,480
something is password so that's that<font color="#E5E5E5"> and</font>

636
00:25:54,159 --> 00:26:00,830
anything that's<font color="#E5E5E5"> not</font><font color="#CCCCCC"> in the context will</font>

637
00:25:56,480 --> 00:26:03,379
be blocked<font color="#E5E5E5"> similarly we have a remote</font>

638
00:26:00,830 --> 00:26:06,830
command<font color="#E5E5E5"> X injection</font><font color="#CCCCCC"> so let's consider a</font>

639
00:26:03,379 --> 00:26:08,389
command like ping<font color="#E5E5E5"> -</font><font color="#CCCCCC"> C 3 user input</font><font color="#E5E5E5"> we</font>

640
00:26:06,830 --> 00:26:10,519
hook<font color="#E5E5E5"> into the command execution API</font>

641
00:26:08,389 --> 00:26:12,080
that's something<font color="#CCCCCC"> like coil system or</font>

642
00:26:10,519 --> 00:26:14,120
<font color="#CCCCCC">processed or P upon</font><font color="#E5E5E5"> or anything similar</font>

643
00:26:12,080 --> 00:26:15,730
<font color="#CCCCCC">and then we extract the commands</font>

644
00:26:14,120 --> 00:26:20,178
<font color="#E5E5E5">that's the arguments to the function and</font>

645
00:26:15,730 --> 00:26:21,710
then we do a tokenization<font color="#CCCCCC"> we do so it</font>

646
00:26:20,179 --> 00:26:23,870
all depends<font color="#E5E5E5"> upon how you design your</font>

647
00:26:21,710 --> 00:26:25,250
lecture ourselves or this<font color="#CCCCCC"> lecture is a</font>

648
00:26:23,870 --> 00:26:28,518
little bit intelligent intelligent it

649
00:26:25,250 --> 00:26:30,259
can actually<font color="#CCCCCC"> identify</font><font color="#E5E5E5"> the local host IPS</font>

650
00:26:28,519 --> 00:26:31,879
<font color="#E5E5E5">and IP or domain so even if you give a</font>

651
00:26:30,259 --> 00:26:34,879
domain there it will still classify it

652
00:26:31,879 --> 00:26:38,480
as a IP or domain<font color="#E5E5E5"> a bit more intelligent</font>

653
00:26:34,879 --> 00:26:40,428
<font color="#CCCCCC">and the moment you give a</font><font color="#E5E5E5"> different</font>

654
00:26:38,480 --> 00:26:43,250
command<font color="#E5E5E5"> which actually which alter the</font>

655
00:26:40,429 --> 00:26:47,539
structure<font color="#E5E5E5"> it will block so for the</font>

656
00:26:43,250 --> 00:26:50,440
context<font color="#E5E5E5"> ping</font><font color="#CCCCCC"> - 3 C 3 user input</font><font color="#E5E5E5"> it will</font>

657
00:26:47,539 --> 00:26:53,120
<font color="#E5E5E5">allow you to have thing</font><font color="#CCCCCC"> - c3 127.0.0.1</font>

658
00:26:50,440 --> 00:26:55,789
<font color="#CCCCCC">or Google or any</font><font color="#E5E5E5"> other thing at the</font>

659
00:26:53,120 --> 00:26:57,168
<font color="#CCCCCC">moment you try to inject a multi node</font>

660
00:26:55,789 --> 00:27:01,629
command<font color="#E5E5E5"> it</font><font color="#CCCCCC"> will block him</font>

661
00:26:57,169 --> 00:27:01,629
let's see<font color="#CCCCCC"> atom of</font><font color="#E5E5E5"> that as well</font>

662
00:27:05,810 --> 00:27:16,590
so here I<font color="#CCCCCC"> have the one level application</font>

663
00:27:14,150 --> 00:27:19,440
there's an option to<font color="#E5E5E5"> link to a</font>

664
00:27:16,590 --> 00:27:23,129
particular<font color="#E5E5E5"> server so let's do that</font>

665
00:27:19,440 --> 00:27:29,940
pinging fine let's try to execute<font color="#E5E5E5"> some</font>

666
00:27:23,130 --> 00:27:32,100
command and you can see that it works

667
00:27:29,940 --> 00:27:34,040
<font color="#E5E5E5">let's try the same thing</font><font color="#CCCCCC"> in the</font>

668
00:27:32,100 --> 00:27:36,540
<font color="#CCCCCC">protected version of the application so</font>

669
00:27:34,040 --> 00:27:39,060
<font color="#CCCCCC">the first time you do a legitimate</font>

670
00:27:36,540 --> 00:27:42,930
request<font color="#E5E5E5"> that will learn the structure of</font>

671
00:27:39,060 --> 00:27:48,810
the token and the next time you<font color="#E5E5E5"> try to</font>

672
00:27:42,930 --> 00:27:54,770
<font color="#E5E5E5">give a command like this it should block</font>

673
00:27:48,810 --> 00:27:56,909
that<font color="#E5E5E5"> works all right so moving on</font>

674
00:27:54,770 --> 00:27:58,350
<font color="#E5E5E5">cross-site scripting so cross-site</font>

675
00:27:56,910 --> 00:28:00,300
scripting<font color="#E5E5E5"> is a slightly different thing</font>

676
00:27:58,350 --> 00:28:02,699
<font color="#CCCCCC">if you if you</font><font color="#E5E5E5"> try to do lexical analysis</font>

677
00:28:00,300 --> 00:28:04,320
on a pretty large document it's not

678
00:28:02,700 --> 00:28:05,790
<font color="#E5E5E5">gonna it's going to take a lot of time</font>

679
00:28:04,320 --> 00:28:07,679
and that<font color="#E5E5E5"> will</font><font color="#CCCCCC"> actually have performance</font>

680
00:28:05,790 --> 00:28:10,350
impact in<font color="#CCCCCC"> your application so we really</font>

681
00:28:07,680 --> 00:28:13,350
don't<font color="#E5E5E5"> want to do the same approach</font><font color="#CCCCCC"> here</font>

682
00:28:10,350 --> 00:28:15,060
<font color="#CCCCCC">there so folks process scripting we will</font>

683
00:28:13,350 --> 00:28:16,320
<font color="#CCCCCC">actually use this concept</font><font color="#E5E5E5"> that we</font>

684
00:28:15,060 --> 00:28:18,929
<font color="#E5E5E5">learned before called context</font>

685
00:28:16,320 --> 00:28:21,480
<font color="#E5E5E5">elimination what we do is we take a set</font>

686
00:28:18,930 --> 00:28:23,490
of<font color="#CCCCCC"> HTML and we try to identify</font><font color="#E5E5E5"> the</font>

687
00:28:21,480 --> 00:28:26,520
<font color="#E5E5E5">places where user and would come in what</font>

688
00:28:23,490 --> 00:28:27,630
is the<font color="#E5E5E5"> context</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> that so essentially</font>

689
00:28:26,520 --> 00:28:32,160
we<font color="#E5E5E5"> will hook into the template rendering</font>

690
00:28:27,630 --> 00:28:34,230
API<font color="#E5E5E5"> and we have like let's say we hook</font>

691
00:28:32,160 --> 00:28:36,330
and collect the HTML<font color="#E5E5E5"> that's going to be</font>

692
00:28:34,230 --> 00:28:39,150
rendered and<font color="#E5E5E5"> the user in</font><font color="#CCCCCC"> the inputs that</font>

693
00:28:36,330 --> 00:28:40,649
<font color="#E5E5E5">comes from the user it can be user and</font>

694
00:28:39,150 --> 00:28:42,240
good or it can be anything that's<font color="#CCCCCC"> output</font>

695
00:28:40,650 --> 00:28:46,110
in this application as<font color="#CCCCCC"> well it doesn't</font>

696
00:28:42,240 --> 00:28:49,230
<font color="#E5E5E5">matter so we</font><font color="#CCCCCC"> pass HTML and we get a</font>

697
00:28:46,110 --> 00:28:52,439
complete<font color="#E5E5E5"> set</font><font color="#CCCCCC"> of HTML Dom tree which</font>

698
00:28:49,230 --> 00:28:54,150
really tells<font color="#E5E5E5"> us like what is user input</font>

699
00:28:52,440 --> 00:28:55,560
<font color="#E5E5E5">one is in what context user input - is</font>

700
00:28:54,150 --> 00:28:58,140
in what context<font color="#E5E5E5"> so it's clearly visible</font>

701
00:28:55,560 --> 00:29:00,480
that<font color="#E5E5E5"> you soon but one is in HTML context</font>

702
00:28:58,140 --> 00:29:04,020
<font color="#E5E5E5">and the other one is on JavaScript</font><font color="#CCCCCC"> value</font>

703
00:29:00,480 --> 00:29:05,790
context so if you give a normal<font color="#E5E5E5"> input</font>

704
00:29:04,020 --> 00:29:08,879
like this<font color="#CCCCCC"> to user</font><font color="#E5E5E5"> input and user into -</font>

705
00:29:05,790 --> 00:29:11,159
it's<font color="#CCCCCC"> ok it</font><font color="#E5E5E5"> fine it just do the template</font>

706
00:29:08,880 --> 00:29:13,440
rendering<font color="#E5E5E5"> and gives you the response but</font>

707
00:29:11,160 --> 00:29:15,270
<font color="#E5E5E5">the moment</font><font color="#CCCCCC"> you try to give a payload</font>

708
00:29:13,440 --> 00:29:16,920
like this the<font color="#E5E5E5"> first one is the payload</font>

709
00:29:15,270 --> 00:29:18,960
for HTML context and the second one is

710
00:29:16,920 --> 00:29:20,520
for<font color="#CCCCCC"> editing is value context</font>

711
00:29:18,960 --> 00:29:22,830
we don't really block the requests like

712
00:29:20,520 --> 00:29:25,710
<font color="#E5E5E5">a waft us so this is one problem of off</font>

713
00:29:22,830 --> 00:29:28,020
like if it sees a open bracket or

714
00:29:25,710 --> 00:29:29,460
process<font color="#CCCCCC"> backer - - it can actually</font>

715
00:29:28,020 --> 00:29:30,420
trigger<font color="#E5E5E5"> a false positive and</font><font color="#CCCCCC"> block the</font>

716
00:29:29,460 --> 00:29:32,550
request which is<font color="#E5E5E5"> not something</font><font color="#CCCCCC"> you</font>

717
00:29:30,420 --> 00:29:34,560
<font color="#CCCCCC">really</font><font color="#E5E5E5"> want</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> in this case we</font><font color="#CCCCCC"> don't</font>

718
00:29:32,550 --> 00:29:37,080
really block the<font color="#E5E5E5"> request</font><font color="#CCCCCC"> what we do is</font>

719
00:29:34,560 --> 00:29:39,419
we try<font color="#CCCCCC"> to do</font><font color="#E5E5E5"> context specific escaping</font>

720
00:29:37,080 --> 00:29:49,679
which is not there before<font color="#E5E5E5"> so let me show</font>

721
00:29:39,420 --> 00:29:51,630
<font color="#E5E5E5">you a demo the same vulnerable</font>

722
00:29:49,680 --> 00:29:59,670
application<font color="#E5E5E5"> it has</font><font color="#CCCCCC"> a search field</font><font color="#E5E5E5"> let's</font>

723
00:29:51,630 --> 00:30:01,950
try the vanilla<font color="#E5E5E5"> axis payload and</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> it</font>

724
00:29:59,670 --> 00:30:10,470
works and if you see the reflection

725
00:30:01,950 --> 00:30:13,770
context you can see that there is<font color="#E5E5E5"> two</font>

726
00:30:10,470 --> 00:30:16,380
<font color="#CCCCCC">reflections one in the HTML context</font><font color="#E5E5E5"> and</font>

727
00:30:13,770 --> 00:30:19,200
the other one is on<font color="#CCCCCC"> the JavaScript value</font>

728
00:30:16,380 --> 00:30:22,190
context so let's try the same thing<font color="#CCCCCC"> on</font>

729
00:30:19,200 --> 00:30:22,190
the protected application

730
00:30:29,369 --> 00:30:34,539
we have the search field<font color="#E5E5E5"> let's try the</font>

731
00:30:32,289 --> 00:30:38,109
first<font color="#E5E5E5"> time it has to learn so let's try</font>

732
00:30:34,539 --> 00:30:42,429
with something very genuine<font color="#E5E5E5"> and then</font>

733
00:30:38,109 --> 00:30:44,259
let's try<font color="#CCCCCC"> to give the payload</font><font color="#E5E5E5"> and it</font>

734
00:30:42,429 --> 00:30:51,700
didn't execute it escaped properly<font color="#E5E5E5"> if</font>

735
00:30:44,259 --> 00:30:54,159
you see the context<font color="#CCCCCC"> you can see that</font>

736
00:30:51,700 --> 00:30:56,470
it's properly<font color="#E5E5E5"> escape for HTML context as</font>

737
00:30:54,159 --> 00:30:58,029
well<font color="#E5E5E5"> as for the escape context so for</font>

738
00:30:56,470 --> 00:31:02,679
<font color="#E5E5E5">JavaScript context if you if you even</font>

739
00:30:58,029 --> 00:31:04,450
try a payload like this it will still

740
00:31:02,679 --> 00:31:07,509
won't execute because we do proper

741
00:31:04,450 --> 00:31:09,639
escaping for JavaScript context which<font color="#CCCCCC"> is</font>

742
00:31:07,509 --> 00:31:16,559
you can see<font color="#E5E5E5"> that it prevents breaking</font>

743
00:31:09,639 --> 00:31:16,559
out<font color="#CCCCCC"> from the data context so moving</font><font color="#E5E5E5"> on</font>

744
00:31:19,289 --> 00:31:24,279
<font color="#CCCCCC">Dom</font><font color="#E5E5E5"> X</font><font color="#CCCCCC"> is it's another thing that is</font>

745
00:31:22,299 --> 00:31:27,029
actually<font color="#E5E5E5"> worrying us for a lot of time I</font>

746
00:31:24,279 --> 00:31:30,340
mean<font color="#E5E5E5"> we have like lots of solutions</font>

747
00:31:27,029 --> 00:31:34,539
<font color="#E5E5E5">trying to prevent this and which are not</font>

748
00:31:30,340 --> 00:31:36,158
really you<font color="#CCCCCC"> know it's a</font><font color="#E5E5E5"> problem even for</font>

749
00:31:34,539 --> 00:31:38,229
the<font color="#E5E5E5"> people to detect it as well as I</font>

750
00:31:36,159 --> 00:31:41,559
mean nobody<font color="#CCCCCC"> wants to look into a bunch</font>

751
00:31:38,229 --> 00:31:43,269
of office<font color="#E5E5E5"> catered piece of JavaScript</font>

752
00:31:41,559 --> 00:31:44,979
code<font color="#CCCCCC"> and</font><font color="#E5E5E5"> trying to figure</font><font color="#CCCCCC"> out</font><font color="#E5E5E5"> tommix is</font>

753
00:31:43,269 --> 00:31:46,869
so that is something<font color="#CCCCCC"> it's quite</font>

754
00:31:44,979 --> 00:31:48,399
difficult<font color="#E5E5E5"> I mean using this approach we</font>

755
00:31:46,869 --> 00:31:50,649
can<font color="#CCCCCC"> easily figure out</font><font color="#E5E5E5"> the issue as well</font>

756
00:31:48,399 --> 00:31:52,869
as prevent the<font color="#E5E5E5"> issue so the work has</font>

757
00:31:50,649 --> 00:31:55,119
<font color="#E5E5E5">been previously done by</font><font color="#CCCCCC"> queue 53</font><font color="#E5E5E5"> they</font>

758
00:31:52,869 --> 00:31:57,340
are based out of<font color="#E5E5E5"> Germany and what</font>

759
00:31:55,119 --> 00:31:59,139
<font color="#E5E5E5">they've done</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> this is specifically for</font>

760
00:31:57,340 --> 00:32:00,849
jQuery so I'm<font color="#E5E5E5"> just showing an example</font>

761
00:31:59,139 --> 00:32:02,889
<font color="#CCCCCC">you</font><font color="#E5E5E5"> can do it with almost any of the</font>

762
00:32:00,849 --> 00:32:06,369
frameworks<font color="#E5E5E5"> not everything but most of</font>

763
00:32:02,889 --> 00:32:09,039
<font color="#E5E5E5">the frameworks so what they do is they</font>

764
00:32:06,369 --> 00:32:10,629
have a<font color="#E5E5E5"> library called</font><font color="#CCCCCC"> Dom purify and</font>

765
00:32:09,039 --> 00:32:13,179
they have a<font color="#CCCCCC"> library called a predefined</font>

766
00:32:10,629 --> 00:32:15,428
so the<font color="#CCCCCC"> J purify library will hook into</font>

767
00:32:13,179 --> 00:32:18,639
those jQuery functions that write HTML

768
00:32:15,429 --> 00:32:20,649
to your<font color="#CCCCCC"> Dom</font><font color="#E5E5E5"> and then it</font><font color="#CCCCCC"> passes the</font>

769
00:32:18,639 --> 00:32:22,629
arguments through Dom purify so what<font color="#E5E5E5"> Dom</font>

770
00:32:20,649 --> 00:32:24,428
<font color="#E5E5E5">purified us is if you if you throw a</font>

771
00:32:22,629 --> 00:32:26,889
<font color="#E5E5E5">bunch of HTML and JavaScript</font><font color="#CCCCCC"> to DOM</font>

772
00:32:24,429 --> 00:32:29,529
purify it will remove the JavaScript

773
00:32:26,889 --> 00:32:31,988
part of it<font color="#E5E5E5"> and give you back the HTML so</font>

774
00:32:29,529 --> 00:32:33,879
it they integrated it with jQuery so

775
00:32:31,989 --> 00:32:36,690
that<font color="#E5E5E5"> lets save somebody used a Korean</font>

776
00:32:33,879 --> 00:32:40,029
<font color="#CCCCCC">and unsecure way</font><font color="#E5E5E5"> it will still prevent</font>

777
00:32:36,690 --> 00:32:43,169
<font color="#E5E5E5">Dom X's from</font><font color="#CCCCCC"> links being exploited so</font>

778
00:32:40,029 --> 00:32:43,169
I'll just show a demo<font color="#E5E5E5"> of that</font>

779
00:32:46,370 --> 00:32:54,659
so here we have a couple<font color="#E5E5E5"> of libraries</font>

780
00:32:51,630 --> 00:32:56,910
and<font color="#CCCCCC"> dump your face loader</font>

781
00:32:54,660 --> 00:32:58,830
JP reef is loaded you can<font color="#E5E5E5"> see that we</font>

782
00:32:56,910 --> 00:33:02,100
are<font color="#E5E5E5"> trying to write some JavaScript and</font>

783
00:32:58,830 --> 00:33:04,439
HTML to the<font color="#CCCCCC"> Dom but in the reflection</font>

784
00:33:02,100 --> 00:33:07,080
context there<font color="#CCCCCC"> is a lead HTML because</font><font color="#E5E5E5"> the</font>

785
00:33:04,440 --> 00:33:11,250
<font color="#E5E5E5">on</font><font color="#CCCCCC"> purify has removed the bird</font><font color="#E5E5E5"> malicious</font>

786
00:33:07,080 --> 00:33:16,980
<font color="#CCCCCC">J's from the payload okay</font><font color="#E5E5E5"> so that's a</font>

787
00:33:11,250 --> 00:33:18,570
simple<font color="#E5E5E5"> example for</font><font color="#CCCCCC"> term X's going on</font>

788
00:33:16,980 --> 00:33:20,370
we have other interesting abstract

789
00:33:18,570 --> 00:33:21,899
challenges like work tampering<font color="#CCCCCC"> when we</font>

790
00:33:20,370 --> 00:33:24,179
deal with API<font color="#E5E5E5"> so it's pretty</font>

791
00:33:21,900 --> 00:33:26,250
<font color="#CCCCCC">straightforward</font><font color="#E5E5E5"> and simple what we</font><font color="#CCCCCC"> do is</font>

792
00:33:24,180 --> 00:33:29,490
we hook<font color="#E5E5E5"> into the API that is reasonable</font>

793
00:33:26,250 --> 00:33:31,860
for requests and response handling we

794
00:33:29,490 --> 00:33:34,050
learned HTTP verbs<font color="#CCCCCC"> as</font><font color="#E5E5E5"> and when they</font>

795
00:33:31,860 --> 00:33:35,639
occur<font color="#E5E5E5"> we generate a whitelist and once</font>

796
00:33:34,050 --> 00:33:37,500
the learning phase is completed<font color="#E5E5E5"> anything</font>

797
00:33:35,640 --> 00:33:39,900
<font color="#E5E5E5">that comes to</font><font color="#CCCCCC"> that particular endpoint</font>

798
00:33:37,500 --> 00:33:41,430
will be blocked<font color="#CCCCCC"> so we have a I can just</font>

799
00:33:39,900 --> 00:33:45,660
show<font color="#CCCCCC"> you a quick</font><font color="#E5E5E5"> and simple demo for</font>

800
00:33:41,430 --> 00:33:47,970
that<font color="#E5E5E5"> as well so we know that the home</font>

801
00:33:45,660 --> 00:33:49,620
page<font color="#CCCCCC"> we have accessed</font><font color="#E5E5E5"> the homepage of</font>

802
00:33:47,970 --> 00:33:52,320
this<font color="#CCCCCC"> protected web application couple of</font>

803
00:33:49,620 --> 00:33:54,659
times so we know that<font color="#E5E5E5"> that should</font><font color="#CCCCCC"> be now</font>

804
00:33:52,320 --> 00:33:56,460
<font color="#CCCCCC">that should</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> protected</font><font color="#E5E5E5"> so let's try to</font>

805
00:33:54,660 --> 00:34:01,160
do a web tampering attack on the home

806
00:33:56,460 --> 00:34:01,160
page let's<font color="#E5E5E5"> try to make a post request</font>

807
00:34:03,200 --> 00:34:11,449
and you can see that last<font color="#CCCCCC"> blocked for</font>

808
00:34:08,340 --> 00:34:14,190
tampering<font color="#E5E5E5"> attack pretty straightforward</font>

809
00:34:11,449 --> 00:34:16,259
other things<font color="#E5E5E5"> that we can do is you have</font>

810
00:34:14,190 --> 00:34:18,120
the HTTP header splitting attacks which

811
00:34:16,260 --> 00:34:19,440
were<font color="#CCCCCC"> a part of couple</font><font color="#E5E5E5"> of legacy</font>

812
00:34:18,120 --> 00:34:21,060
application<font color="#E5E5E5"> and even in today's</font>

813
00:34:19,440 --> 00:34:23,550
application you<font color="#E5E5E5"> can see this one ability</font>

814
00:34:21,060 --> 00:34:24,960
<font color="#E5E5E5">once in a while a typical</font><font color="#CCCCCC"> wofe really</font>

815
00:34:23,550 --> 00:34:27,810
have to actually look<font color="#E5E5E5"> for all the</font>

816
00:34:24,960 --> 00:34:29,310
possible encoded combination<font color="#E5E5E5"> escaped or</font>

817
00:34:27,810 --> 00:34:31,049
<font color="#CCCCCC">wash by</font><font color="#E5E5E5"> passing payloads all those thing</font>

818
00:34:29,310 --> 00:34:33,060
it has<font color="#CCCCCC"> to look</font><font color="#E5E5E5"> into because</font><font color="#CCCCCC"> it's all</font>

819
00:34:31,050 --> 00:34:34,710
signature based but for us we<font color="#CCCCCC"> don't</font>

820
00:34:33,060 --> 00:34:36,420
<font color="#E5E5E5">really have to do it we only have to</font>

821
00:34:34,710 --> 00:34:38,639
<font color="#E5E5E5">inspect it at the final stage when it is</font>

822
00:34:36,420 --> 00:34:40,830
going to get<font color="#CCCCCC"> processed</font><font color="#E5E5E5"> we just have to</font>

823
00:34:38,639 --> 00:34:43,319
look for percentage<font color="#CCCCCC"> 0 and percentage 0 D</font>

824
00:34:40,830 --> 00:34:45,270
who can do legislative HTTP request API

825
00:34:43,320 --> 00:34:48,030
<font color="#E5E5E5">look for characters in the headers</font><font color="#CCCCCC"> and</font>

826
00:34:45,270 --> 00:34:51,259
<font color="#E5E5E5">then block it if present so here is a</font>

827
00:34:48,030 --> 00:34:51,260
quick demo<font color="#E5E5E5"> for that as well</font>

828
00:34:53,590 --> 00:34:56,590
<font color="#CCCCCC">peejoe</font>

829
00:35:08,330 --> 00:35:12,910
so we just give a legitimate header and

830
00:35:14,620 --> 00:35:23,380
it just works<font color="#CCCCCC"> it gives you the response</font>

831
00:35:17,480 --> 00:35:23,380
back now let us try with response<font color="#CCCCCC"> dating</font>

832
00:35:26,320 --> 00:35:35,300
and it blocks<font color="#CCCCCC"> injection attempt alright</font>

833
00:35:30,320 --> 00:35:36,880
so moving<font color="#E5E5E5"> on the other thing file upload</font>

834
00:35:35,300 --> 00:35:39,440
<font color="#CCCCCC">protection so in the</font><font color="#E5E5E5"> previous</font>

835
00:35:36,880 --> 00:35:41,330
presentation<font color="#CCCCCC"> there was I mentioning</font>

836
00:35:39,440 --> 00:35:44,540
about the<font color="#CCCCCC"> typical classic PHP file</font>

837
00:35:41,330 --> 00:35:46,250
upload bypass<font color="#E5E5E5"> weather where you bypass a</font>

838
00:35:44,540 --> 00:35:48,410
restriction<font color="#E5E5E5"> by changing the extension of</font>

839
00:35:46,250 --> 00:35:49,970
<font color="#E5E5E5">the file name to something else those</font>

840
00:35:48,410 --> 00:35:51,200
are things that<font color="#E5E5E5"> is actually happens due</font>

841
00:35:49,970 --> 00:35:53,660
to insecure<font color="#E5E5E5"> cording not really a</font>

842
00:35:51,200 --> 00:35:55,790
vulnerability<font color="#E5E5E5"> as such but mostly due</font><font color="#CCCCCC"> to</font>

843
00:35:53,660 --> 00:35:57,350
<font color="#E5E5E5">the insecure coding practices we even</font>

844
00:35:55,790 --> 00:35:59,630
<font color="#E5E5E5">take care of that as</font><font color="#CCCCCC"> well</font><font color="#E5E5E5"> so what we do</font>

845
00:35:57,350 --> 00:36:01,910
is we hook into the API responsible for

846
00:35:59,630 --> 00:36:04,310
<font color="#CCCCCC">writing the files to the</font><font color="#E5E5E5"> file system we</font>

847
00:36:01,910 --> 00:36:05,720
learn the parameters I mean the

848
00:36:04,310 --> 00:36:07,279
parameters means the path of the file

849
00:36:05,720 --> 00:36:09,859
and the<font color="#E5E5E5"> mod</font><font color="#CCCCCC"> of the writing then we</font>

850
00:36:07,280 --> 00:36:12,800
<font color="#E5E5E5">create a like a</font><font color="#CCCCCC"> whitelist</font><font color="#E5E5E5"> and we block</font>

851
00:36:09,860 --> 00:36:21,650
anything<font color="#E5E5E5"> that's not in</font><font color="#CCCCCC"> the list so again</font>

852
00:36:12,800 --> 00:36:26,720
for the demo<font color="#E5E5E5"> part let's try to upload a</font>

853
00:36:21,650 --> 00:36:29,110
file<font color="#CCCCCC"> upload</font><font color="#E5E5E5"> work fine let's try to</font>

854
00:36:26,720 --> 00:36:32,600
upload<font color="#E5E5E5"> a different kind of file a</font><font color="#CCCCCC"> server</font>

855
00:36:29,110 --> 00:36:34,280
works fine and the<font color="#CCCCCC"> next time by this</font>

856
00:36:32,600 --> 00:36:35,630
time it should have learned what all

857
00:36:34,280 --> 00:36:38,450
<font color="#CCCCCC">this files it should actually</font><font color="#E5E5E5"> allow</font><font color="#CCCCCC"> to</font>

858
00:36:35,630 --> 00:36:40,910
<font color="#E5E5E5">upload and now if you try to upload a</font>

859
00:36:38,450 --> 00:36:45,350
different<font color="#E5E5E5"> file like a Python file it</font>

860
00:36:40,910 --> 00:36:46,609
should<font color="#E5E5E5"> block so it's all some of the</font>

861
00:36:45,350 --> 00:36:48,560
<font color="#E5E5E5">things that you can actually do if you</font>

862
00:36:46,610 --> 00:36:50,450
do in if you do runtime instrumentation

863
00:36:48,560 --> 00:36:52,190
of critical<font color="#CCCCCC"> api's of your web</font>

864
00:36:50,450 --> 00:36:54,710
application

865
00:36:52,190 --> 00:36:57,140
<font color="#E5E5E5">the other thing yeah so past</font><font color="#CCCCCC"> traversal</font>

866
00:36:54,710 --> 00:37:00,110
is another<font color="#CCCCCC"> problem so if you</font><font color="#E5E5E5"> see the</font>

867
00:36:57,140 --> 00:37:02,299
rule set of<font color="#E5E5E5"> above you will be</font><font color="#CCCCCC"> it's like</font>

868
00:37:00,110 --> 00:37:04,370
<font color="#E5E5E5">plenty of lines like this and it has</font><font color="#CCCCCC"> to</font>

869
00:37:02,300 --> 00:37:08,060
look for<font color="#E5E5E5"> possible combination of all</font>

870
00:37:04,370 --> 00:37:09,620
this escaped<font color="#CCCCCC"> you know dot slashes in the</font>

871
00:37:08,060 --> 00:37:11,240
<font color="#E5E5E5">incoming</font><font color="#CCCCCC"> request</font><font color="#E5E5E5"> that's what a typical</font>

872
00:37:09,620 --> 00:37:14,480
box<font color="#E5E5E5"> this is just a snippet</font><font color="#CCCCCC"> version of</font>

873
00:37:11,240 --> 00:37:16,279
<font color="#E5E5E5">the same it's more than like it's a huge</font>

874
00:37:14,480 --> 00:37:17,960
it's a lot of the things<font color="#E5E5E5"> that a typical</font>

875
00:37:16,280 --> 00:37:20,480
dwarf has to look for we<font color="#CCCCCC"> don't really</font>

876
00:37:17,960 --> 00:37:22,270
<font color="#E5E5E5">have to do that because we do the checks</font>

877
00:37:20,480 --> 00:37:25,220
only<font color="#CCCCCC"> when the path</font><font color="#E5E5E5"> normalization</font>

878
00:37:22,270 --> 00:37:27,740
<font color="#CCCCCC">same way for file upload protection what</font>

879
00:37:25,220 --> 00:37:30,410
we do is hook into<font color="#E5E5E5"> the file IO</font><font color="#CCCCCC"> ap</font>

880
00:37:27,740 --> 00:37:33,560
responsible for reading<font color="#CCCCCC"> condense</font><font color="#E5E5E5"> get the</font>

881
00:37:30,410 --> 00:37:35,509
directory and the file name<font color="#CCCCCC"> we learn</font><font color="#E5E5E5"> it</font>

882
00:37:33,560 --> 00:37:36,980
and the<font color="#E5E5E5"> next time when it tries to</font>

883
00:37:35,510 --> 00:37:39,200
normal<font color="#CCCCCC"> a sore escape out of the</font>

884
00:37:36,980 --> 00:37:46,099
directory we can<font color="#E5E5E5"> effectively block so</font><font color="#CCCCCC"> we</font>

885
00:37:39,200 --> 00:37:54,410
have the classic demo of let's let me

886
00:37:46,099 --> 00:37:57,140
show the vulnerability first so<font color="#E5E5E5"> I can</font>

887
00:37:54,410 --> 00:37:59,930
actually alter<font color="#E5E5E5"> the file name to read the</font>

888
00:37:57,140 --> 00:38:00,950
<font color="#CCCCCC">e.t.c password files but let's do the</font>

889
00:37:59,930 --> 00:38:09,950
<font color="#E5E5E5">same thing</font><font color="#CCCCCC"> with the protected</font>

890
00:38:00,950 --> 00:38:15,339
application and now let's<font color="#E5E5E5"> try to hit it</font>

891
00:38:09,950 --> 00:38:17,149
<font color="#E5E5E5">and it locks so that's that moving on</font>

892
00:38:15,339 --> 00:38:19,369
this<font color="#E5E5E5"> is something</font><font color="#CCCCCC"> that I'm currently</font>

893
00:38:17,150 --> 00:38:22,339
working<font color="#E5E5E5"> on find out a possible way to</font>

894
00:38:19,369 --> 00:38:24,380
prevent session hijacking<font color="#E5E5E5"> where you know</font>

895
00:38:22,339 --> 00:38:27,200
your users cookies are still<font color="#E5E5E5"> stolen by</font>

896
00:38:24,380 --> 00:38:29,630
<font color="#E5E5E5">attacker and later reuse</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> to get you</font>

897
00:38:27,200 --> 00:38:31,759
know get access to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> data console</font>

898
00:38:29,630 --> 00:38:34,849
which is something that I'm trying<font color="#CCCCCC"> to</font>

899
00:38:31,760 --> 00:38:37,099
prevent then layer<font color="#CCCCCC"> 7 those so it's a new</font>

900
00:38:34,849 --> 00:38:38,690
<font color="#E5E5E5">kind of doors with a lot of</font><font color="#CCCCCC"> port nets</font>

901
00:38:37,099 --> 00:38:42,589
<font color="#E5E5E5">out there you can see it's pretty</font>

902
00:38:38,690 --> 00:38:44,480
<font color="#E5E5E5">effective out there I mean it's very</font>

903
00:38:42,589 --> 00:38:46,849
difficult<font color="#CCCCCC"> to detect dos attacks</font>

904
00:38:44,480 --> 00:38:48,230
happening at application layer<font color="#E5E5E5"> at the</font>

905
00:38:46,849 --> 00:38:49,819
network layer you have<font color="#CCCCCC"> the firewall</font><font color="#E5E5E5"> so</font>

906
00:38:48,230 --> 00:38:52,069
everything<font color="#CCCCCC"> that works</font><font color="#E5E5E5"> fine but when it</font>

907
00:38:49,819 --> 00:38:54,380
comes to the application<font color="#CCCCCC"> layer</font><font color="#E5E5E5"> if you're</font>

908
00:38:52,069 --> 00:38:56,540
<font color="#E5E5E5">getting dos for example like you</font><font color="#CCCCCC"> have a</font>

909
00:38:54,380 --> 00:38:58,940
regex<font color="#CCCCCC"> Docs you have a widely</font><font color="#E5E5E5"> quoted reg</font>

910
00:38:56,540 --> 00:39:00,980
<font color="#E5E5E5">X in your application and you want to</font>

911
00:38:58,940 --> 00:39:02,599
prevent that<font color="#CCCCCC"> from</font><font color="#E5E5E5"> being attacked it's</font>

912
00:39:00,980 --> 00:39:03,770
quite difficult so those are the some

913
00:39:02,599 --> 00:39:05,270
problems that<font color="#CCCCCC"> we</font><font color="#E5E5E5"> are actually trying to</font>

914
00:39:03,770 --> 00:39:07,670
<font color="#E5E5E5">solve with this instrumented technology</font>

915
00:39:05,270 --> 00:39:09,829
then credential stuffing a big headache

916
00:39:07,670 --> 00:39:11,329
<font color="#E5E5E5">like whenever there's a new breach</font>

917
00:39:09,829 --> 00:39:13,730
happening<font color="#E5E5E5"> people will try to you know</font>

918
00:39:11,329 --> 00:39:16,329
<font color="#E5E5E5">dump out</font><font color="#CCCCCC"> the DB and then</font><font color="#E5E5E5"> try the DB</font>

919
00:39:13,730 --> 00:39:19,910
credentials against your application and

920
00:39:16,329 --> 00:39:22,040
<font color="#E5E5E5">I mean people</font><font color="#CCCCCC"> reuse their passwords a</font>

921
00:39:19,910 --> 00:39:23,750
lot so<font color="#E5E5E5"> that's the reason</font><font color="#CCCCCC"> why this kind</font>

922
00:39:22,040 --> 00:39:25,579
<font color="#E5E5E5">of attacks are really</font><font color="#CCCCCC"> successful so</font>

923
00:39:23,750 --> 00:39:28,970
that's also<font color="#CCCCCC"> something that we're trying</font>

924
00:39:25,579 --> 00:39:30,829
<font color="#E5E5E5">to solve this advantage</font><font color="#CCCCCC"> is that</font><font color="#E5E5E5"> this</font>

925
00:39:28,970 --> 00:39:32,118
technology<font color="#E5E5E5"> can give is accurate and</font>

926
00:39:30,829 --> 00:39:34,490
precise one of the detection and

927
00:39:32,119 --> 00:39:35,840
<font color="#E5E5E5">prevention you get caught level inside I</font>

928
00:39:34,490 --> 00:39:37,580
haven't shown anything in the

929
00:39:35,840 --> 00:39:38,750
but you really can get<font color="#E5E5E5"> caught level</font>

930
00:39:37,580 --> 00:39:41,450
inside because<font color="#CCCCCC"> you know at what</font>

931
00:39:38,750 --> 00:39:43,940
particular<font color="#E5E5E5"> line issue is being exploited</font>

932
00:39:41,450 --> 00:39:45,439
or being<font color="#CCCCCC"> protected it's not based on</font>

933
00:39:43,940 --> 00:39:49,160
heuristics so you don't<font color="#E5E5E5"> have to worry</font>

934
00:39:45,440 --> 00:39:52,070
much<font color="#E5E5E5"> about false positives</font><font color="#CCCCCC"> and other</font>

935
00:39:49,160 --> 00:39:53,690
things<font color="#E5E5E5"> then there is no all the hide of</font>

936
00:39:52,070 --> 00:39:55,430
SSL decryption<font color="#CCCCCC"> and re encryption because</font>

937
00:39:53,690 --> 00:39:57,380
<font color="#E5E5E5">this cell will be unloaded at the</font>

938
00:39:55,430 --> 00:39:58,910
application<font color="#E5E5E5"> and we do inspection after</font>

939
00:39:57,380 --> 00:40:02,990
<font color="#CCCCCC">that is done so we don't really play</font>

940
00:39:58,910 --> 00:40:04,520
<font color="#E5E5E5">with this</font><font color="#CCCCCC"> yeah and it</font><font color="#E5E5E5"> doesn't downgrade</font>

941
00:40:02,990 --> 00:40:06,379
your security<font color="#E5E5E5"> you can actually use any</font>

942
00:40:04,520 --> 00:40:08,420
<font color="#E5E5E5">of the existing security implementation</font>

943
00:40:06,380 --> 00:40:09,890
with this and there is<font color="#E5E5E5"> pre-emptive</font>

944
00:40:08,420 --> 00:40:11,300
<font color="#E5E5E5">securities like when a</font><font color="#CCCCCC"> zero-day of</font>

945
00:40:09,890 --> 00:40:13,910
course or something<font color="#E5E5E5"> you</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> to</font>

946
00:40:11,300 --> 00:40:15,200
run for<font color="#E5E5E5"> a rule for</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> like when the</font>

947
00:40:13,910 --> 00:40:17,120
first<font color="#E5E5E5"> time that particular</font><font color="#CCCCCC"> route of your</font>

948
00:40:15,200 --> 00:40:18,890
application<font color="#E5E5E5"> was seen we will actually</font>

949
00:40:17,120 --> 00:40:20,450
whitelist<font color="#E5E5E5"> that particular route and</font>

950
00:40:18,890 --> 00:40:22,040
anything that's<font color="#E5E5E5"> outside of that will be</font>

951
00:40:20,450 --> 00:40:24,680
prevented<font color="#CCCCCC"> which will essentially prevent</font>

952
00:40:22,040 --> 00:40:26,630
<font color="#E5E5E5">most of the zero days and yes as I shown</font>

953
00:40:24,680 --> 00:40:28,250
before<font color="#CCCCCC"> it should have sea record change</font>

954
00:40:26,630 --> 00:40:30,410
and it should be easy<font color="#CCCCCC"> to integrate like</font>

955
00:40:28,250 --> 00:40:31,160
pip install the module<font color="#E5E5E5"> and then import</font>

956
00:40:30,410 --> 00:40:34,160
the module that's<font color="#E5E5E5"> it</font>

957
00:40:31,160 --> 00:40:36,920
and yes the biggest<font color="#E5E5E5"> advantage is now you</font>

958
00:40:34,160 --> 00:40:38,480
can<font color="#E5E5E5"> run something in protection</font><font color="#CCCCCC"> mode</font><font color="#E5E5E5"> you</font>

959
00:40:36,920 --> 00:40:40,580
can pay<font color="#CCCCCC"> for</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> and you can actually</font><font color="#E5E5E5"> run</font>

960
00:40:38,480 --> 00:40:43,580
something<font color="#E5E5E5"> in protection mode that's the</font>

961
00:40:40,580 --> 00:40:44,990
biggest advantage<font color="#CCCCCC"> some of the</font>

962
00:40:43,580 --> 00:40:47,840
characteristics that<font color="#CCCCCC"> you need to look</font>

963
00:40:44,990 --> 00:40:49,459
into while you know you will<font color="#E5E5E5"> be seeing a</font>

964
00:40:47,840 --> 00:40:52,220
<font color="#CCCCCC">lot of rust commercial products out</font>

965
00:40:49,460 --> 00:40:53,990
there<font color="#CCCCCC"> it will</font><font color="#E5E5E5"> be coming</font><font color="#CCCCCC"> soon so most</font><font color="#E5E5E5"> of</font>

966
00:40:52,220 --> 00:40:55,459
<font color="#E5E5E5">them are in the early</font><font color="#CCCCCC"> betas or so some</font>

967
00:40:53,990 --> 00:40:57,169
of<font color="#E5E5E5"> them have</font><font color="#CCCCCC"> really</font><font color="#E5E5E5"> good products</font><font color="#CCCCCC"> but</font>

968
00:40:55,460 --> 00:40:58,550
<font color="#CCCCCC">these are the things that</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> should</font>

969
00:40:57,170 --> 00:41:01,460
actually<font color="#E5E5E5"> look out when</font><font color="#CCCCCC"> you're evaluating</font>

970
00:40:58,550 --> 00:41:02,930
<font color="#CCCCCC">one such</font><font color="#E5E5E5"> as product so it should have</font>

971
00:41:01,460 --> 00:41:03,770
minimal performance<font color="#E5E5E5"> impact</font><font color="#CCCCCC"> because you</font>

972
00:41:02,930 --> 00:41:05,480
are<font color="#E5E5E5"> doing a lot of runtime</font>

973
00:41:03,770 --> 00:41:07,730
instrumentation if it's<font color="#E5E5E5"> written poorly</font>

974
00:41:05,480 --> 00:41:09,110
<font color="#CCCCCC">that means</font><font color="#E5E5E5"> your</font><font color="#CCCCCC"> application will be slow</font>

975
00:41:07,730 --> 00:41:12,200
if you<font color="#E5E5E5"> are</font><font color="#CCCCCC"> a security</font><font color="#E5E5E5"> predictor which is</font>

976
00:41:09,110 --> 00:41:13,760
not something<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you want and then it</font>

977
00:41:12,200 --> 00:41:15,290
<font color="#E5E5E5">should</font><font color="#CCCCCC"> not introduce</font><font color="#E5E5E5"> any third any extra</font>

978
00:41:13,760 --> 00:41:18,740
vulnerabilities it should<font color="#E5E5E5"> not consume</font>

979
00:41:15,290 --> 00:41:20,000
<font color="#CCCCCC">the customers</font><font color="#E5E5E5"> purse PII informations and</font>

980
00:41:18,740 --> 00:41:21,410
<font color="#E5E5E5">it should not learn the bad stuff that's</font>

981
00:41:20,000 --> 00:41:23,150
<font color="#E5E5E5">also important if you teach it the bad</font>

982
00:41:21,410 --> 00:41:24,950
stuff<font color="#E5E5E5"> then it will learn the bad stuff</font>

983
00:41:23,150 --> 00:41:27,980
and<font color="#E5E5E5"> then it</font><font color="#CCCCCC"> will not prevent against any</font>

984
00:41:24,950 --> 00:41:30,049
attacks<font color="#E5E5E5"> and it should be real</font><font color="#CCCCCC"> Rus it</font>

985
00:41:27,980 --> 00:41:31,970
should not be any<font color="#CCCCCC"> fault</font><font color="#E5E5E5"> fancy bath with</font>

986
00:41:30,050 --> 00:41:38,300
some<font color="#E5E5E5"> blacklist that's that's not errors</font>

987
00:41:31,970 --> 00:41:45,609
<font color="#E5E5E5">and yes that's all folks thank you</font>

988
00:41:38,300 --> 00:41:50,599
[Applause]

989
00:41:45,609 --> 00:41:53,240
do we have<font color="#E5E5E5"> any questions any comment yes</font>

990
00:41:50,599 --> 00:41:55,430
we have a question<font color="#CCCCCC"> if the lady</font><font color="#E5E5E5"> I can't</font>

991
00:41:53,240 --> 00:41:56,020
tell long hair<font color="#E5E5E5"> okay gentlemen</font><font color="#CCCCCC"> sorry</font><font color="#E5E5E5"> my</font>

992
00:41:55,430 --> 00:41:58,549
<font color="#E5E5E5">bad</font>

993
00:41:56,020 --> 00:42:14,509
stand up and<font color="#E5E5E5"> shout it out so</font><font color="#CCCCCC"> everybody</font>

994
00:41:58,550 --> 00:42:16,250
can<font color="#E5E5E5"> hear it please</font><font color="#CCCCCC"> alright so the</font>

995
00:42:14,510 --> 00:42:18,530
question<font color="#CCCCCC"> was like</font><font color="#E5E5E5"> how</font><font color="#CCCCCC"> does our asked</font>

996
00:42:16,250 --> 00:42:21,740
know that the<font color="#CCCCCC"> learning step is</font><font color="#E5E5E5"> finished</font>

997
00:42:18,530 --> 00:42:25,160
and it knows all the routes<font color="#E5E5E5"> right yeah</font>

998
00:42:21,740 --> 00:42:27,919
so in real world<font color="#E5E5E5"> we have like most of</font>

999
00:42:25,160 --> 00:42:29,868
the organization have this functional

1000
00:42:27,920 --> 00:42:31,369
test where you<font color="#CCCCCC"> actually whenever</font><font color="#E5E5E5"> a new</font>

1001
00:42:29,869 --> 00:42:34,040
<font color="#E5E5E5">functionality started you run a</font>

1002
00:42:31,369 --> 00:42:35,599
functional<font color="#E5E5E5"> test so that all the rods</font>

1003
00:42:34,040 --> 00:42:38,240
<font color="#E5E5E5">roots of the application will be gone</font>

1004
00:42:35,599 --> 00:42:40,280
through so that's<font color="#E5E5E5"> something that</font><font color="#CCCCCC"> we can</font>

1005
00:42:38,240 --> 00:42:41,839
actually<font color="#E5E5E5"> make use of it's</font><font color="#CCCCCC"> not like it</font>

1006
00:42:40,280 --> 00:42:43,730
<font color="#E5E5E5">doesn't give you complete</font><font color="#CCCCCC"> coverage but</font>

1007
00:42:41,839 --> 00:42:45,920
<font color="#E5E5E5">that's something</font><font color="#CCCCCC"> that we can actually</font>

1008
00:42:43,730 --> 00:42:47,660
make use of<font color="#E5E5E5"> so you run the</font><font color="#CCCCCC"> Ross module</font>

1009
00:42:45,920 --> 00:42:49,490
inside your application<font color="#E5E5E5"> when</font><font color="#CCCCCC"> you are</font>

1010
00:42:47,660 --> 00:42:50,839
<font color="#E5E5E5">doing a functional test</font><font color="#CCCCCC"> it will go</font>

1011
00:42:49,490 --> 00:42:52,399
through<font color="#E5E5E5"> most of the routes so that there</font>

1012
00:42:50,839 --> 00:42:54,049
are snow<font color="#E5E5E5"> where to hook</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> and where to</font>

1013
00:42:52,400 --> 00:42:57,109
put<font color="#E5E5E5"> in the security</font><font color="#CCCCCC"> controls that's one</font>

1014
00:42:54,050 --> 00:42:59,750
thing another<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> is again this</font><font color="#E5E5E5"> is</font>

1015
00:42:57,109 --> 00:43:01,180
with more like let's say you have a

1016
00:42:59,750 --> 00:43:03,530
<font color="#E5E5E5">security team and they are doing</font>

1017
00:43:01,180 --> 00:43:05,149
security tests on your<font color="#E5E5E5"> application by</font>

1018
00:43:03,530 --> 00:43:07,460
that time also<font color="#E5E5E5"> Russ can actually look</font>

1019
00:43:05,150 --> 00:43:10,130
for learn<font color="#E5E5E5"> I mean it can actually learn</font>

1020
00:43:07,460 --> 00:43:11,359
<font color="#E5E5E5">so the idea is that whenever if you if</font>

1021
00:43:10,130 --> 00:43:12,890
you<font color="#CCCCCC"> want if you try to exploit something</font>

1022
00:43:11,359 --> 00:43:14,810
<font color="#E5E5E5">so in most cases you have to actually</font>

1023
00:43:12,890 --> 00:43:16,970
<font color="#CCCCCC">issue a legitimate request and then you</font>

1024
00:43:14,810 --> 00:43:18,650
try to<font color="#E5E5E5"> exploit so by giving the</font>

1025
00:43:16,970 --> 00:43:20,810
legitimate<font color="#CCCCCC"> request you</font><font color="#E5E5E5"> can learn and of</font>

1026
00:43:18,650 --> 00:43:22,670
course there is<font color="#CCCCCC"> no predefined settings</font>

1027
00:43:20,810 --> 00:43:23,930
like you should learn only<font color="#CCCCCC"> the first</font>

1028
00:43:22,670 --> 00:43:26,089
<font color="#E5E5E5">request you can</font><font color="#CCCCCC"> actually keep it</font><font color="#E5E5E5"> for</font>

1029
00:43:23,930 --> 00:43:28,460
let's say<font color="#E5E5E5"> learn for a couple of time or</font>

1030
00:43:26,089 --> 00:43:29,810
<font color="#E5E5E5">you know till you find that most of</font><font color="#CCCCCC"> the</font>

1031
00:43:28,460 --> 00:43:31,520
roots are covered<font color="#CCCCCC"> or most of</font><font color="#E5E5E5"> most of the</font>

1032
00:43:29,810 --> 00:43:34,220
<font color="#CCCCCC">context are covered</font><font color="#E5E5E5"> so it's up to you</font>

1033
00:43:31,520 --> 00:43:36,680
<font color="#CCCCCC">and the coverage</font><font color="#E5E5E5"> is mostly done by this</font>

1034
00:43:34,220 --> 00:43:37,879
way or by generally<font color="#CCCCCC"> people browsing</font><font color="#E5E5E5"> to</font>

1035
00:43:36,680 --> 00:43:39,710
your application<font color="#E5E5E5"> by the time people</font>

1036
00:43:37,880 --> 00:43:43,550
<font color="#E5E5E5">browse your application</font><font color="#CCCCCC"> their ask will</font>

1037
00:43:39,710 --> 00:43:45,200
learn most<font color="#E5E5E5"> of the context and also yeah</font>

1038
00:43:43,550 --> 00:43:47,060
to add up<font color="#E5E5E5"> to that one thing</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> it should</font>

1039
00:43:45,200 --> 00:43:49,279
<font color="#E5E5E5">not learn the bad stuff so the Ross</font>

1040
00:43:47,060 --> 00:43:50,930
module should have some predefined set

1041
00:43:49,280 --> 00:43:52,640
of<font color="#E5E5E5"> things to</font><font color="#CCCCCC"> make sure that it doesn't</font>

1042
00:43:50,930 --> 00:43:53,359
learn the<font color="#E5E5E5"> bad thing so it's a different</font>

1043
00:43:52,640 --> 00:43:55,190
thing<font color="#CCCCCC"> but</font>

1044
00:43:53,359 --> 00:43:57,319
that's something which is<font color="#CCCCCC"> a needed</font>

1045
00:43:55,190 --> 00:43:59,090
<font color="#E5E5E5">characteristics for us</font><font color="#CCCCCC"> I think I saw</font>

1046
00:43:57,320 --> 00:44:03,800
another<font color="#CCCCCC"> question up</font><font color="#E5E5E5"> on the front was</font>

1047
00:43:59,090 --> 00:44:08,180
there another hand<font color="#E5E5E5"> up there somebody he</font>

1048
00:44:03,800 --> 00:44:09,950
had a hand who no longer has a hand<font color="#E5E5E5"> all</font>

1049
00:44:08,180 --> 00:44:14,118
<font color="#E5E5E5">right</font><font color="#CCCCCC"> thank you very much I appreciate</font>

1050
00:44:09,950 --> 00:44:16,149
<font color="#CCCCCC">oh</font><font color="#E5E5E5"> do we we do I</font><font color="#CCCCCC"> don't okay we have a</font>

1051
00:44:14,119 --> 00:44:23,060
mic over<font color="#E5E5E5"> there</font><font color="#CCCCCC"> yes I do</font>

1052
00:44:16,150 --> 00:44:29,480
<font color="#E5E5E5">I was wondering if you miss a function</font>

1053
00:44:23,060 --> 00:44:31,940
or a field in the unique test<font color="#E5E5E5"> and do we</font>

1054
00:44:29,480 --> 00:44:36,530
have<font color="#E5E5E5"> the risk that the application will</font>

1055
00:44:31,940 --> 00:44:41,720
block the regular browsing for example

1056
00:44:36,530 --> 00:44:44,840
if I<font color="#E5E5E5"> just</font><font color="#CCCCCC"> enter some person's character</font>

1057
00:44:41,720 --> 00:44:49,790
and<font color="#CCCCCC"> validate several time</font><font color="#E5E5E5"> because I'm</font>

1058
00:44:44,840 --> 00:44:53,180
testing<font color="#E5E5E5"> we were</font><font color="#CCCCCC"> too and</font><font color="#E5E5E5"> the regular user</font>

1059
00:44:49,790 --> 00:44:57,200
comes after<font color="#E5E5E5"> and try to search his name</font>

1060
00:44:53,180 --> 00:44:59,629
for<font color="#CCCCCC"> example and it doesn't</font><font color="#E5E5E5"> work so it</font>

1061
00:44:57,200 --> 00:45:04,029
could downgrade the security<font color="#E5E5E5"> because</font>

1062
00:44:59,630 --> 00:45:09,260
it's not useful and<font color="#CCCCCC"> disponible</font><font color="#E5E5E5"> anymore</font>

1063
00:45:04,030 --> 00:45:10,490
so in<font color="#CCCCCC"> reality we are</font><font color="#E5E5E5"> not really</font><font color="#CCCCCC"> I if I</font>

1064
00:45:09,260 --> 00:45:14,089
<font color="#CCCCCC">if I understand what you have asked</font><font color="#E5E5E5"> me</font>

1065
00:45:10,490 --> 00:45:16,240
<font color="#E5E5E5">so it's like in</font><font color="#CCCCCC"> reality we don't</font><font color="#E5E5E5"> really</font>

1066
00:45:14,089 --> 00:45:20,029
<font color="#E5E5E5">classify this as good and this as bad</font><font color="#CCCCCC"> so</font>

1067
00:45:16,240 --> 00:45:22,160
<font color="#CCCCCC">the idea</font><font color="#E5E5E5"> is that we try to learn your</font>

1068
00:45:20,030 --> 00:45:23,599
application by X I mean<font color="#E5E5E5"> looking into the</font>

1069
00:45:22,160 --> 00:45:25,129
behavior<font color="#CCCCCC"> of your application</font><font color="#E5E5E5"> like how</font>

1070
00:45:23,599 --> 00:45:28,190
the application how that<font color="#CCCCCC"> particular is</font>

1071
00:45:25,130 --> 00:45:29,630
supposed to be<font color="#E5E5E5"> executed or how it how I</font>

1072
00:45:28,190 --> 00:45:32,240
mean which<font color="#E5E5E5"> are the feeds it is supposed</font>

1073
00:45:29,630 --> 00:45:34,280
<font color="#E5E5E5">to get data from so at the first</font><font color="#CCCCCC"> time</font>

1074
00:45:32,240 --> 00:45:35,899
itself we are<font color="#E5E5E5"> not doing it correct then</font>

1075
00:45:34,280 --> 00:45:37,760
it's very<font color="#CCCCCC"> difficult for</font><font color="#E5E5E5"> us to you</font><font color="#CCCCCC"> know</font>

1076
00:45:35,900 --> 00:45:39,830
find out what's the legitimate<font color="#CCCCCC"> purpose</font>

1077
00:45:37,760 --> 00:45:42,230
of the application<font color="#CCCCCC"> let's say your users</font>

1078
00:45:39,830 --> 00:45:43,848
are the first guys to<font color="#E5E5E5"> use it then we can</font>

1079
00:45:42,230 --> 00:45:46,099
actually get a convex<font color="#E5E5E5"> set so okay this</font>

1080
00:45:43,849 --> 00:45:47,900
<font color="#CCCCCC">is more</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> less like a username or more</font>

1081
00:45:46,099 --> 00:45:49,760
like a search field where there is a

1082
00:45:47,900 --> 00:45:51,770
user input coming<font color="#E5E5E5"> from the user which is</font>

1083
00:45:49,760 --> 00:45:53,510
<font color="#E5E5E5">small like a string and then we have to</font>

1084
00:45:51,770 --> 00:45:55,490
process<font color="#CCCCCC"> it in that way</font><font color="#E5E5E5"> so we learn it</font>

1085
00:45:53,510 --> 00:45:56,960
but for the<font color="#E5E5E5"> first time itself if it's</font>

1086
00:45:55,490 --> 00:45:59,259
learned in a different way we cannot do

1087
00:45:56,960 --> 00:46:01,320
<font color="#CCCCCC">anything</font><font color="#E5E5E5"> okay</font>

1088
00:45:59,260 --> 00:46:01,320
you

