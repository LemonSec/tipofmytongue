1
00:00:08,889 --> 00:00:15,849
well<font color="#CCCCCC"> Jule</font><font color="#E5E5E5"> well do what Dave you knew</font>

2
00:00:12,480 --> 00:00:17,259
beyond OWASP top 10 no sorry I'm<font color="#E5E5E5"> not</font>

3
00:00:15,849 --> 00:00:19,360
gonna not<font color="#E5E5E5"> gonna do this one in French I</font>

4
00:00:17,259 --> 00:00:21,160
apologize<font color="#E5E5E5"> I'm from Canada</font>

5
00:00:19,360 --> 00:00:23,430
<font color="#E5E5E5">so I</font><font color="#CCCCCC"> I do speak a little bit</font><font color="#E5E5E5"> of French</font>

6
00:00:21,160 --> 00:00:27,340
<font color="#E5E5E5">but I won't</font><font color="#CCCCCC"> embarrass myself by</font><font color="#E5E5E5"> trying</font>

7
00:00:23,430 --> 00:00:28,570
so we'll do this<font color="#CCCCCC"> one in English</font><font color="#E5E5E5"> however</font>

8
00:00:27,340 --> 00:00:30,759
this<font color="#E5E5E5"> one's going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be a little bit</font>

9
00:00:28,570 --> 00:00:32,020
quicker<font color="#CCCCCC"> because I know that a</font><font color="#E5E5E5"> lot of you</font>

10
00:00:30,759 --> 00:00:34,870
are still<font color="#CCCCCC"> trailing back from lunch</font>

11
00:00:32,020 --> 00:00:38,129
<font color="#E5E5E5">because of the stringent Disney security</font>

12
00:00:34,870 --> 00:00:41,828
security<font color="#E5E5E5"> just the always a pain isn't it</font>

13
00:00:38,129 --> 00:00:45,360
it's kind of ironic<font color="#E5E5E5"> so welcome to this</font>

14
00:00:41,829 --> 00:00:47,160
talk it's called beyond OAuth top<font color="#CCCCCC"> 10 and</font>

15
00:00:45,360 --> 00:00:52,570
<font color="#E5E5E5">let's get into it</font>

16
00:00:47,160 --> 00:00:57,429
people stream in the last minute<font color="#E5E5E5"> all</font>

17
00:00:52,570 --> 00:00:59,230
<font color="#CCCCCC">right</font><font color="#E5E5E5"> so first up this is me</font><font color="#CCCCCC"> my name is</font>

18
00:00:57,430 --> 00:01:01,750
<font color="#E5E5E5">Aaron Natsu I'm a senior</font><font color="#CCCCCC"> security</font>

19
00:00:59,230 --> 00:01:03,578
researcher at security compass it's a

20
00:01:01,750 --> 00:01:05,740
company<font color="#CCCCCC"> that does security</font><font color="#E5E5E5"> testing of</font>

21
00:01:03,579 --> 00:01:07,600
all sorts<font color="#E5E5E5"> and I'll be basing a</font><font color="#CCCCCC"> lot of my</font>

22
00:01:05,740 --> 00:01:09,509
work<font color="#CCCCCC"> on my research</font><font color="#E5E5E5"> and on the other</font>

23
00:01:07,600 --> 00:01:12,490
<font color="#E5E5E5">work that</font><font color="#CCCCCC"> our consultants</font><font color="#E5E5E5"> and our other</font>

24
00:01:09,509 --> 00:01:15,130
my co-workers do as well so<font color="#E5E5E5"> that's where</font>

25
00:01:12,490 --> 00:01:18,039
I come<font color="#CCCCCC"> from</font><font color="#E5E5E5"> my background is pretty</font>

26
00:01:15,130 --> 00:01:19,420
<font color="#E5E5E5">diverse</font><font color="#CCCCCC"> in IT</font><font color="#E5E5E5"> I was a software developer</font>

27
00:01:18,040 --> 00:01:21,580
professionally<font color="#CCCCCC"> now I just do it</font><font color="#E5E5E5"> for</font>

28
00:01:19,420 --> 00:01:23,650
<font color="#E5E5E5">hobby</font><font color="#CCCCCC"> with a college professor</font><font color="#E5E5E5"> and</font>

29
00:01:21,580 --> 00:01:24,970
application security security consultant

30
00:01:23,650 --> 00:01:29,680
system administrator web developer all

31
00:01:24,970 --> 00:01:31,390
that stuff<font color="#CCCCCC"> basically I've seen a lot one</font>

32
00:01:29,680 --> 00:01:33,010
thing to note my<font color="#CCCCCC"> twitter account is</font><font color="#E5E5E5"> at</font>

33
00:01:31,390 --> 00:01:35,130
inspector<font color="#E5E5E5"> it's pretty easy to</font><font color="#CCCCCC"> remember</font>

34
00:01:33,010 --> 00:01:36,970
it's<font color="#CCCCCC"> inspector with a three and an re</font>

35
00:01:35,130 --> 00:01:38,979
<font color="#CCCCCC">follow that because I'm going</font><font color="#E5E5E5"> to be</font>

36
00:01:36,970 --> 00:01:40,450
<font color="#E5E5E5">posting my slides and everything later</font>

37
00:01:38,979 --> 00:01:42,490
on and a<font color="#E5E5E5"> little bit more detailed</font>

38
00:01:40,450 --> 00:01:43,030
write-up<font color="#CCCCCC"> about this so if you want some</font>

39
00:01:42,490 --> 00:01:44,890
<font color="#CCCCCC">more information</font>

40
00:01:43,030 --> 00:01:47,080
<font color="#E5E5E5">further on</font><font color="#CCCCCC"> be sure to</font><font color="#E5E5E5"> check that out</font>

41
00:01:44,890 --> 00:01:48,159
<font color="#E5E5E5">I'll be giving</font><font color="#CCCCCC"> my email address at</font><font color="#E5E5E5"> the</font>

42
00:01:47,080 --> 00:01:50,710
end<font color="#E5E5E5"> so if you want me to send you slides</font>

43
00:01:48,159 --> 00:01:54,580
after you can use that as<font color="#CCCCCC"> well so let's</font>

44
00:01:50,710 --> 00:01:56,350
dive in what is this talk<font color="#CCCCCC"> about this</font>

45
00:01:54,580 --> 00:01:59,140
talk is about

46
00:01:56,350 --> 00:02:01,000
but more specifically<font color="#E5E5E5"> as this laser</font>

47
00:01:59,140 --> 00:02:04,750
pointer falls apart<font color="#E5E5E5"> more specifically</font>

48
00:02:01,000 --> 00:02:08,408
it's about their<font color="#E5E5E5"> top 10 project so the</font>

49
00:02:04,750 --> 00:02:09,669
<font color="#CCCCCC">OS</font><font color="#E5E5E5"> top 10 project is a project by OAuth</font>

50
00:02:08,408 --> 00:02:13,269
which is the open web application

51
00:02:09,669 --> 00:02:15,129
security project<font color="#E5E5E5"> where they list out or</font>

52
00:02:13,269 --> 00:02:18,190
they try to list of the top<font color="#CCCCCC"> 10 security</font>

53
00:02:15,129 --> 00:02:20,260
vulnerabilities in web applications so

54
00:02:18,190 --> 00:02:22,359
it's kind of the de facto standard<font color="#E5E5E5"> when</font>

55
00:02:20,260 --> 00:02:23,679
it<font color="#E5E5E5"> comes</font><font color="#CCCCCC"> to web application security</font>

56
00:02:22,360 --> 00:02:26,590
and it's often<font color="#E5E5E5"> what we give</font><font color="#CCCCCC"> developers</font>

57
00:02:23,680 --> 00:02:28,210
when when they ask us<font color="#CCCCCC"> what do I do</font>

58
00:02:26,590 --> 00:02:30,280
for security what's the security<font color="#CCCCCC"> thing</font>

59
00:02:28,210 --> 00:02:32,080
when I'm developing web<font color="#CCCCCC"> applications not</font>

60
00:02:30,280 --> 00:02:33,730
<font color="#E5E5E5">only</font><font color="#CCCCCC"> that when we're doing penetration</font>

61
00:02:32,080 --> 00:02:35,920
testing<font color="#CCCCCC"> when you're actually</font><font color="#E5E5E5"> doing</font>

62
00:02:33,730 --> 00:02:38,350
security assessments web applications

63
00:02:35,920 --> 00:02:40,929
<font color="#E5E5E5">typically it's used as a category</font>

64
00:02:38,350 --> 00:02:43,030
<font color="#E5E5E5">categorization scheme as</font><font color="#CCCCCC"> well so you say</font>

65
00:02:40,930 --> 00:02:44,530
<font color="#CCCCCC">this particular vulnerability falls</font>

66
00:02:43,030 --> 00:02:45,880
under you know the cross-site scripting

67
00:02:44,530 --> 00:02:46,930
or it falls under security<font color="#E5E5E5"> Mis</font>

68
00:02:45,880 --> 00:02:50,290
configuration which are<font color="#E5E5E5"> different</font>

69
00:02:46,930 --> 00:02:53,230
<font color="#CCCCCC">categories of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> AUSA</font><font color="#E5E5E5"> top</font><font color="#CCCCCC"> ten however</font>

70
00:02:50,290 --> 00:02:54,760
<font color="#E5E5E5">unfortunately actually going to cover</font>

71
00:02:53,230 --> 00:02:57,549
the next<font color="#E5E5E5"> slide which is talk about</font>

72
00:02:54,760 --> 00:03:01,600
<font color="#CCCCCC">coverage as</font><font color="#E5E5E5"> well this details this</font><font color="#CCCCCC"> is</font>

73
00:02:57,550 --> 00:03:03,700
from the sans the sans 2015<font color="#E5E5E5"> state of</font>

74
00:03:01,600 --> 00:03:06,220
application<font color="#E5E5E5"> security report basically</font>

75
00:03:03,700 --> 00:03:08,049
<font color="#E5E5E5">shows the top application security</font>

76
00:03:06,220 --> 00:03:11,200
standards or models that<font color="#E5E5E5"> organizations</font>

77
00:03:08,050 --> 00:03:12,820
follow<font color="#E5E5E5"> as you can see the top ten is by</font>

78
00:03:11,200 --> 00:03:16,179
far<font color="#CCCCCC"> the</font><font color="#E5E5E5"> most common one</font><font color="#CCCCCC"> that</font>

79
00:03:12,820 --> 00:03:18,040
organizations follow this is great as a

80
00:03:16,180 --> 00:03:21,120
first step<font color="#E5E5E5"> however the problem with this</font>

81
00:03:18,040 --> 00:03:22,959
is that<font color="#CCCCCC"> the top ten does</font><font color="#E5E5E5"> not cover</font>

82
00:03:21,120 --> 00:03:24,340
everything it does<font color="#E5E5E5"> not even come close</font>

83
00:03:22,959 --> 00:03:27,040
<font color="#E5E5E5">to covering everything when it comes</font><font color="#CCCCCC"> to</font>

84
00:03:24,340 --> 00:03:29,049
web application security<font color="#E5E5E5"> so this talk is</font>

85
00:03:27,040 --> 00:03:31,359
<font color="#CCCCCC">about those</font><font color="#E5E5E5"> other vulnerabilities</font><font color="#CCCCCC"> that</font>

86
00:03:29,049 --> 00:03:32,560
aren't covered<font color="#CCCCCC"> by</font><font color="#E5E5E5"> the OAuth top</font><font color="#CCCCCC"> ten</font><font color="#E5E5E5"> so</font>

87
00:03:31,360 --> 00:03:34,120
when you're looking<font color="#E5E5E5"> at security</font>

88
00:03:32,560 --> 00:03:35,980
<font color="#E5E5E5">vulnerabilities and web applications you</font>

89
00:03:34,120 --> 00:03:37,930
need<font color="#E5E5E5"> to be aware that there is way</font><font color="#CCCCCC"> more</font>

90
00:03:35,980 --> 00:03:40,179
<font color="#CCCCCC">than that</font><font color="#E5E5E5"> and there is it's something</font>

91
00:03:37,930 --> 00:03:42,040
<font color="#CCCCCC">you have</font><font color="#E5E5E5"> to continue to learn</font><font color="#CCCCCC"> so well</font>

92
00:03:40,180 --> 00:03:45,970
let's dive into the OWASP top 10 first

93
00:03:42,040 --> 00:03:48,040
<font color="#E5E5E5">so I will cover this briefly but first</font>

94
00:03:45,970 --> 00:03:50,830
one is<font color="#E5E5E5"> injection it's basically when you</font>

95
00:03:48,040 --> 00:03:52,269
can pass in user<font color="#E5E5E5"> control data or an</font>

96
00:03:50,830 --> 00:03:53,980
attacker<font color="#E5E5E5"> control data gets passed to an</font>

97
00:03:52,269 --> 00:03:55,840
interpreter as part of a commander query

98
00:03:53,980 --> 00:03:58,209
<font color="#E5E5E5">so in example this would be sequel</font>

99
00:03:55,840 --> 00:04:00,220
injection<font color="#E5E5E5"> second one broken</font>

100
00:03:58,209 --> 00:04:03,790
authentication session management<font color="#E5E5E5"> this</font>

101
00:04:00,220 --> 00:04:04,989
<font color="#E5E5E5">is basically where any any issue where</font>

102
00:04:03,790 --> 00:04:07,269
there's like a session<font color="#E5E5E5"> ID that can be</font>

103
00:04:04,989 --> 00:04:09,100
<font color="#E5E5E5">guessed or there's you</font><font color="#CCCCCC"> know some way</font>

104
00:04:07,269 --> 00:04:11,230
<font color="#CCCCCC">that it</font><font color="#E5E5E5"> could be you can grab the</font>

105
00:04:09,100 --> 00:04:12,790
session ID<font color="#E5E5E5"> through you know a cookie or</font>

106
00:04:11,230 --> 00:04:13,840
<font color="#CCCCCC">whatnot that's broken</font><font color="#E5E5E5"> off that education</font>

107
00:04:12,790 --> 00:04:14,950
<font color="#CCCCCC">and session management there's more to</font>

108
00:04:13,840 --> 00:04:16,600
it<font color="#CCCCCC"> than that but</font><font color="#E5E5E5"> anything</font><font color="#CCCCCC"> to do with</font>

109
00:04:14,950 --> 00:04:17,978
authentication session management<font color="#E5E5E5"> kind</font>

110
00:04:16,600 --> 00:04:20,470
of falls under there cross-site

111
00:04:17,978 --> 00:04:22,860
scripting<font color="#CCCCCC"> most people know about</font><font color="#E5E5E5"> this</font>

112
00:04:20,470 --> 00:04:26,110
but<font color="#CCCCCC"> it's where you</font><font color="#E5E5E5"> can an attacker can</font>

113
00:04:22,860 --> 00:04:27,760
inject their own code into a<font color="#E5E5E5"> browsers</font>

114
00:04:26,110 --> 00:04:30,930
session and in the context<font color="#E5E5E5"> of their</font>

115
00:04:27,760 --> 00:04:32,950
client so usually<font color="#E5E5E5"> JavaScript and</font>

116
00:04:30,930 --> 00:04:34,930
insecure direct object reference if<font color="#E5E5E5"> you</font>

117
00:04:32,950 --> 00:04:36,550
ever see a<font color="#E5E5E5"> website where</font><font color="#CCCCCC"> you can</font>

118
00:04:34,930 --> 00:04:39,430
directly<font color="#E5E5E5"> go</font><font color="#CCCCCC"> to a</font>

119
00:04:36,550 --> 00:04:41,290
file or go to a page based<font color="#E5E5E5"> on a unique</font>

120
00:04:39,430 --> 00:04:44,200
ID<font color="#E5E5E5"> if you can browse</font><font color="#CCCCCC"> to it</font><font color="#E5E5E5"> and there's</font>

121
00:04:41,290 --> 00:04:44,560
no access controls<font color="#CCCCCC"> paths are provided on</font>

122
00:04:44,200 --> 00:04:47,349
that

123
00:04:44,560 --> 00:04:48,490
that's called an ID or next<font color="#E5E5E5"> with</font>

124
00:04:47,350 --> 00:04:49,840
<font color="#E5E5E5">security</font><font color="#CCCCCC"> miss configuration this was</font>

125
00:04:48,490 --> 00:04:52,120
kind of<font color="#E5E5E5"> a bit</font><font color="#CCCCCC"> of a catch-all but if</font>

126
00:04:49,840 --> 00:04:53,560
you're using a product<font color="#E5E5E5"> that is not</font>

127
00:04:52,120 --> 00:04:55,630
configured<font color="#CCCCCC"> correctly so for example in</font>

128
00:04:53,560 --> 00:04:57,520
the Java Springs framework they have an

129
00:04:55,630 --> 00:04:59,080
<font color="#E5E5E5">option to enable cease or protection if</font>

130
00:04:57,520 --> 00:05:01,060
you<font color="#CCCCCC"> disable that explicitly that</font><font color="#E5E5E5"> would</font>

131
00:04:59,080 --> 00:05:04,300
fall under<font color="#E5E5E5"> this so those are the first</font>

132
00:05:01,060 --> 00:05:06,040
<font color="#E5E5E5">five next one sensitive data exposure</font>

133
00:05:04,300 --> 00:05:09,430
basically you're<font color="#E5E5E5"> not encrypting stuff at</font>

134
00:05:06,040 --> 00:05:10,690
rest<font color="#E5E5E5"> or in transit next one you're</font>

135
00:05:09,430 --> 00:05:12,430
missing some kind<font color="#CCCCCC"> of access</font><font color="#E5E5E5"> control</font>

136
00:05:10,690 --> 00:05:13,810
around functions<font color="#CCCCCC"> so before I talked</font>

137
00:05:12,430 --> 00:05:15,190
<font color="#CCCCCC">about authentication and session</font>

138
00:05:13,810 --> 00:05:17,590
<font color="#E5E5E5">management but this one is if you're</font>

139
00:05:15,190 --> 00:05:19,120
<font color="#E5E5E5">looking at a</font><font color="#CCCCCC"> specific function in an</font>

140
00:05:17,590 --> 00:05:22,270
application<font color="#E5E5E5"> so if you're calling out on</font>

141
00:05:19,120 --> 00:05:23,320
a<font color="#CCCCCC"> slash admin / delete</font><font color="#E5E5E5"> user that is a</font>

142
00:05:22,270 --> 00:05:24,909
function if<font color="#CCCCCC"> you don't have the proper</font>

143
00:05:23,320 --> 00:05:27,219
<font color="#E5E5E5">control</font><font color="#CCCCCC"> around that individual function</font>

144
00:05:24,910 --> 00:05:29,020
then it would fall<font color="#CCCCCC"> under this cross-site</font>

145
00:05:27,220 --> 00:05:31,810
request forgery<font color="#E5E5E5"> basically allows an</font>

146
00:05:29,020 --> 00:05:33,729
attacker<font color="#CCCCCC"> to or an attacker</font><font color="#E5E5E5"> can force a</font>

147
00:05:31,810 --> 00:05:35,320
user to make<font color="#E5E5E5"> a request from their</font>

148
00:05:33,730 --> 00:05:36,640
browser and<font color="#E5E5E5"> if they're authenticated</font>

149
00:05:35,320 --> 00:05:39,550
<font color="#E5E5E5">already it will pass their session</font>

150
00:05:36,640 --> 00:05:40,390
session<font color="#CCCCCC"> token' in a cookie with their</font>

151
00:05:39,550 --> 00:05:43,540
browser<font color="#E5E5E5"> request</font>

152
00:05:40,390 --> 00:05:44,500
that's a cross-site request forgery<font color="#E5E5E5"> this</font>

153
00:05:43,540 --> 00:05:46,600
one using opponents of known

154
00:05:44,500 --> 00:05:47,920
vulnerabilities basically just patch<font color="#E5E5E5"> so</font>

155
00:05:46,600 --> 00:05:49,480
if you're using<font color="#CCCCCC"> something</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> is not up</font>

156
00:05:47,920 --> 00:05:51,670
<font color="#CCCCCC">to</font><font color="#E5E5E5"> date and has security vulnerabilities</font>

157
00:05:49,480 --> 00:05:53,830
<font color="#E5E5E5">that are known falls under this and last</font>

158
00:05:51,670 --> 00:05:55,810
<font color="#E5E5E5">but not least</font><font color="#CCCCCC"> unvalidated redirects and</font>

159
00:05:53,830 --> 00:05:57,310
forwards<font color="#E5E5E5"> and this basically is an</font>

160
00:05:55,810 --> 00:05:59,170
<font color="#E5E5E5">example there's be an open redirect so</font>

161
00:05:57,310 --> 00:06:01,420
if you have the option<font color="#CCCCCC"> to pass a URL</font>

162
00:05:59,170 --> 00:06:03,130
<font color="#E5E5E5">that you can actually explicitly state</font>

163
00:06:01,420 --> 00:06:05,470
<font color="#E5E5E5">what URL you're sending them to an</font>

164
00:06:03,130 --> 00:06:07,719
attacker<font color="#E5E5E5"> can basically send someone</font>

165
00:06:05,470 --> 00:06:09,430
wherever they want them<font color="#E5E5E5"> to go so that</font>

166
00:06:07,720 --> 00:06:12,250
could be a<font color="#E5E5E5"> MOS</font><font color="#CCCCCC"> web site drive-by</font>

167
00:06:09,430 --> 00:06:13,990
download<font color="#E5E5E5"> whatever so those are the off</font>

168
00:06:12,250 --> 00:06:15,490
<font color="#E5E5E5">top</font><font color="#CCCCCC"> ten so that's</font><font color="#E5E5E5"> just a</font><font color="#CCCCCC"> basic overview</font>

169
00:06:13,990 --> 00:06:17,590
<font color="#E5E5E5">of what's covered in there which is a</font>

170
00:06:15,490 --> 00:06:19,240
decent<font color="#E5E5E5"> coverage and it's a great place</font>

171
00:06:17,590 --> 00:06:20,380
to<font color="#E5E5E5"> start so it's a great place if</font><font color="#CCCCCC"> you</font>

172
00:06:19,240 --> 00:06:21,970
<font color="#E5E5E5">don't know anything about security and</font>

173
00:06:20,380 --> 00:06:23,710
<font color="#E5E5E5">your your web developer</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> need to know</font>

174
00:06:21,970 --> 00:06:25,030
what are the basic concepts that<font color="#E5E5E5"> I need</font>

175
00:06:23,710 --> 00:06:27,400
to understand before<font color="#E5E5E5"> building a web</font>

176
00:06:25,030 --> 00:06:29,289
application<font color="#E5E5E5"> however</font><font color="#CCCCCC"> as I mentioned</font>

177
00:06:27,400 --> 00:06:31,719
<font color="#CCCCCC">before there really is a lot</font><font color="#E5E5E5"> more than</font>

178
00:06:29,290 --> 00:06:33,280
this because<font color="#E5E5E5"> this is trying to cover the</font>

179
00:06:31,720 --> 00:06:35,200
most<font color="#CCCCCC"> common ones and</font><font color="#E5E5E5"> not necessarily</font>

180
00:06:33,280 --> 00:06:37,390
everything<font color="#E5E5E5"> and not necessarily the most</font>

181
00:06:35,200 --> 00:06:39,610
damaging ones either<font color="#E5E5E5"> if they occur and</font>

182
00:06:37,390 --> 00:06:41,409
they're more rare so let's get into the

183
00:06:39,610 --> 00:06:44,620
first<font color="#E5E5E5"> one that falls outside of the</font><font color="#CCCCCC"> u.s.</font>

184
00:06:41,410 --> 00:06:46,840
<font color="#E5E5E5">top 10 and that</font><font color="#CCCCCC"> is HTTP parameter</font>

185
00:06:44,620 --> 00:06:48,970
pollution try saying that<font color="#CCCCCC"> 10 times fast</font>

186
00:06:46,840 --> 00:06:52,388
<font color="#E5E5E5">it has a</font><font color="#CCCCCC"> cwe as well but</font><font color="#E5E5E5"> basically what</font>

187
00:06:48,970 --> 00:06:54,880
it<font color="#CCCCCC"> means on this is more</font><font color="#E5E5E5"> of a being</font>

188
00:06:52,389 --> 00:06:58,240
aware of your underlying web technology

189
00:06:54,880 --> 00:07:00,190
<font color="#E5E5E5">issue than anything and if you were to</font>

190
00:06:58,240 --> 00:07:01,990
see a request<font color="#CCCCCC"> so the way this</font><font color="#E5E5E5"> works is</font>

191
00:07:00,190 --> 00:07:03,460
<font color="#CCCCCC">if</font><font color="#E5E5E5"> you send a request</font><font color="#CCCCCC"> and has a</font>

192
00:07:01,990 --> 00:07:06,190
parameter<font color="#CCCCCC"> in it somewhere</font><font color="#E5E5E5"> so it can be</font>

193
00:07:03,460 --> 00:07:08,530
in the URL<font color="#E5E5E5"> request so it can be actual</font>

194
00:07:06,190 --> 00:07:09,310
in the actual URL<font color="#E5E5E5"> as let's say you do</font>

195
00:07:08,530 --> 00:07:13,929
<font color="#E5E5E5">example.com</font>

196
00:07:09,310 --> 00:07:14,760
<font color="#CCCCCC">slash</font><font color="#E5E5E5"> you see the question</font><font color="#CCCCCC"> mark equals</font>

197
00:07:13,930 --> 00:07:17,500
one two three

198
00:07:14,760 --> 00:07:19,719
that's a parameter<font color="#E5E5E5"> value so the</font>

199
00:07:17,500 --> 00:07:21,160
parameter name is a and the<font color="#E5E5E5"> value is one</font>

200
00:07:19,720 --> 00:07:23,919
two<font color="#E5E5E5"> three</font><font color="#CCCCCC"> you can also see it</font><font color="#E5E5E5"> in cookies</font>

201
00:07:21,160 --> 00:07:24,970
you can<font color="#E5E5E5"> also see it in a post body so</font>

202
00:07:23,919 --> 00:07:26,349
when you're making<font color="#CCCCCC"> a request you can</font>

203
00:07:24,970 --> 00:07:28,419
pass<font color="#E5E5E5"> these parameters basically our</font>

204
00:07:26,350 --> 00:07:29,800
variables<font color="#E5E5E5"> that you can pass</font><font color="#CCCCCC"> to a web</font>

205
00:07:28,419 --> 00:07:32,639
application<font color="#CCCCCC"> to</font><font color="#E5E5E5"> do something different</font>

206
00:07:29,800 --> 00:07:36,280
<font color="#CCCCCC">based on what</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> variable is</font><font color="#E5E5E5"> however</font>

207
00:07:32,639 --> 00:07:37,630
what you<font color="#CCCCCC"> can do is if you send</font><font color="#E5E5E5"> multiple</font>

208
00:07:36,280 --> 00:07:40,000
parameters of the same name but

209
00:07:37,630 --> 00:07:43,590
<font color="#E5E5E5">different values so if I say a equals</font>

210
00:07:40,000 --> 00:07:45,669
<font color="#CCCCCC">one two three and a equals four five six</font>

211
00:07:43,590 --> 00:07:47,440
<font color="#E5E5E5">what happens is different web</font>

212
00:07:45,669 --> 00:07:49,150
technologies handle this<font color="#E5E5E5"> differently</font><font color="#CCCCCC"> and</font>

213
00:07:47,440 --> 00:07:51,789
if<font color="#E5E5E5"> you're not anticipating how web</font>

214
00:07:49,150 --> 00:07:53,138
technology handles this then it'll

215
00:07:51,789 --> 00:07:54,520
<font color="#E5E5E5">result in something happening in the</font>

216
00:07:53,139 --> 00:07:55,900
application<font color="#CCCCCC"> you don't expect</font><font color="#E5E5E5"> and this</font>

217
00:07:54,520 --> 00:07:57,849
<font color="#E5E5E5">can</font><font color="#CCCCCC"> actually result</font><font color="#E5E5E5"> in a security</font>

218
00:07:55,900 --> 00:07:58,960
vulnerability<font color="#CCCCCC"> given the right</font>

219
00:07:57,850 --> 00:08:00,310
<font color="#CCCCCC">circumstances and I'll show</font><font color="#E5E5E5"> you some</font>

220
00:07:58,960 --> 00:08:03,909
examples<font color="#CCCCCC"> of</font><font color="#E5E5E5"> exactly what that</font><font color="#CCCCCC"> looks like</font>

221
00:08:00,310 --> 00:08:05,889
<font color="#E5E5E5">so</font><font color="#CCCCCC"> remember how I how I mentioned</font><font color="#E5E5E5"> there</font>

222
00:08:03,910 --> 00:08:08,770
were different web technologies that did

223
00:08:05,889 --> 00:08:11,289
<font color="#E5E5E5">handled it differently here's a really</font>

224
00:08:08,770 --> 00:08:12,669
<font color="#CCCCCC">good starter grid that shows you all the</font>

225
00:08:11,289 --> 00:08:14,289
different<font color="#E5E5E5"> ways that</font><font color="#CCCCCC"> these common</font>

226
00:08:12,669 --> 00:08:16,750
technologies handle it so if you take<font color="#E5E5E5"> a</font>

227
00:08:14,289 --> 00:08:19,840
<font color="#E5E5E5">look at asp.net it actually concatenates</font>

228
00:08:16,750 --> 00:08:22,360
them all the values with commas<font color="#CCCCCC"> and then</font>

229
00:08:19,840 --> 00:08:24,070
it<font color="#CCCCCC"> also if you</font><font color="#E5E5E5"> look at PHP for example</font>

230
00:08:22,360 --> 00:08:25,389
it takes<font color="#CCCCCC"> the last occurrence so it'll</font>

231
00:08:24,070 --> 00:08:27,610
ignore<font color="#CCCCCC"> anything except for</font><font color="#E5E5E5"> the last one</font>

232
00:08:25,389 --> 00:08:29,950
<font color="#CCCCCC">that it sees and</font><font color="#E5E5E5"> then</font><font color="#CCCCCC"> I believe Python</font>

233
00:08:27,610 --> 00:08:31,660
it makes it into an array<font color="#E5E5E5"> so there's all</font>

234
00:08:29,950 --> 00:08:33,549
different ways that it's handled<font color="#CCCCCC"> when</font>

235
00:08:31,660 --> 00:08:34,839
you pass<font color="#CCCCCC"> multiple values and multiple</font>

236
00:08:33,549 --> 00:08:37,449
variables into an<font color="#E5E5E5"> application with the</font>

237
00:08:34,839 --> 00:08:41,050
<font color="#E5E5E5">same name and if you're not anticipating</font>

238
00:08:37,450 --> 00:08:43,900
<font color="#E5E5E5">this then things can get ugly so let's</font>

239
00:08:41,049 --> 00:08:46,569
start<font color="#E5E5E5"> with some exploits the way this is</font>

240
00:08:43,900 --> 00:08:48,790
commonly<font color="#CCCCCC"> used is</font><font color="#E5E5E5"> one example is to</font>

241
00:08:46,570 --> 00:08:50,290
actually<font color="#E5E5E5"> leverage this confusion to</font>

242
00:08:48,790 --> 00:08:53,980
bypass some kind<font color="#CCCCCC"> of access control</font>

243
00:08:50,290 --> 00:08:55,959
restriction to bypass firewalls<font color="#E5E5E5"> web</font>

244
00:08:53,980 --> 00:08:57,250
application firewalls<font color="#E5E5E5"> and specifically</font>

245
00:08:55,959 --> 00:08:59,500
when you're using<font color="#E5E5E5"> it</font><font color="#CCCCCC"> for other attacks</font>

246
00:08:57,250 --> 00:09:01,780
<font color="#E5E5E5">like you're doing a sequel injection</font><font color="#CCCCCC"> if</font>

247
00:08:59,500 --> 00:09:03,790
you were to pass this string in or

248
00:09:01,780 --> 00:09:08,020
<font color="#E5E5E5">passed this request to an application</font>

249
00:09:03,790 --> 00:09:11,980
that's<font color="#CCCCCC"> using asp.net</font><font color="#E5E5E5"> for example this</font>

250
00:09:08,020 --> 00:09:14,290
will actually<font color="#CCCCCC"> result in this</font><font color="#E5E5E5"> because</font>

251
00:09:11,980 --> 00:09:17,709
<font color="#E5E5E5">remember asp.net concatenates all values</font>

252
00:09:14,290 --> 00:09:18,969
with commas and if it's using<font color="#CCCCCC"> microsoft</font>

253
00:09:17,709 --> 00:09:20,709
sequel<font color="#E5E5E5"> in the back end which is very</font>

254
00:09:18,970 --> 00:09:22,000
likely because<font color="#E5E5E5"> asp.net and</font><font color="#CCCCCC"> microsoft</font>

255
00:09:20,709 --> 00:09:24,099
sequel are<font color="#E5E5E5"> both Microsoft products and</font>

256
00:09:22,000 --> 00:09:25,780
<font color="#CCCCCC">they're often used</font><font color="#E5E5E5"> together it will</font>

257
00:09:24,100 --> 00:09:29,320
result in<font color="#E5E5E5"> this query and in Microsoft</font>

258
00:09:25,780 --> 00:09:31,209
sequel<font color="#E5E5E5"> a comment actually adds a space</font>

259
00:09:29,320 --> 00:09:34,209
as well so this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a valid</font><font color="#E5E5E5"> sequel</font>

260
00:09:31,209 --> 00:09:35,920
command that does a select for name<font color="#CCCCCC"> and</font>

261
00:09:34,209 --> 00:09:36,670
password<font color="#E5E5E5"> from</font><font color="#CCCCCC"> the users table so this</font><font color="#E5E5E5"> is</font>

262
00:09:35,920 --> 00:09:39,640
a sequel injection

263
00:09:36,670 --> 00:09:42,010
<font color="#E5E5E5">hidden through HTTP parameter pollution</font>

264
00:09:39,640 --> 00:09:44,050
now this may<font color="#CCCCCC"> not this exact thing may</font>

265
00:09:42,010 --> 00:09:45,760
not<font color="#CCCCCC"> work anymore</font>

266
00:09:44,050 --> 00:09:47,229
I'm sure web application fire will catch

267
00:09:45,760 --> 00:09:49,420
<font color="#CCCCCC">it now but there's all different</font>

268
00:09:47,230 --> 00:09:50,680
variations<font color="#CCCCCC"> you can do</font><font color="#E5E5E5"> because web</font>

269
00:09:49,420 --> 00:09:52,870
application firewalls are typically

270
00:09:50,680 --> 00:09:55,900
<font color="#E5E5E5">signature based rather than heuristics</font>

271
00:09:52,870 --> 00:09:56,709
or<font color="#E5E5E5"> rather than basically because their</font>

272
00:09:55,900 --> 00:09:58,660
signature based they can't catch

273
00:09:56,709 --> 00:10:00,760
everything<font color="#E5E5E5"> so if you find ways</font><font color="#CCCCCC"> to modify</font>

274
00:09:58,660 --> 00:10:03,250
<font color="#CCCCCC">this you can probably get something like</font>

275
00:10:00,760 --> 00:10:05,110
sequel injection<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> also do</font>

276
00:10:03,250 --> 00:10:07,540
<font color="#CCCCCC">something like bypassing web application</font>

277
00:10:05,110 --> 00:10:09,610
firewalls like I mentioned<font color="#CCCCCC"> before but to</font>

278
00:10:07,540 --> 00:10:11,620
<font color="#E5E5E5">get a to get cross-site scripting so if</font>

279
00:10:09,610 --> 00:10:13,060
you take<font color="#CCCCCC"> a</font><font color="#E5E5E5"> look at this string</font><font color="#CCCCCC"> stain</font>

280
00:10:11,620 --> 00:10:14,890
concept as before<font color="#CCCCCC"> but</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> time we're</font>

281
00:10:13,060 --> 00:10:17,020
passing in a script tag with an alert

282
00:10:14,890 --> 00:10:18,550
which<font color="#E5E5E5"> can</font><font color="#CCCCCC"> obviously be</font><font color="#E5E5E5"> more</font><font color="#CCCCCC"> damaging if</font>

283
00:10:17,020 --> 00:10:20,020
you do like<font color="#E5E5E5"> steal a session</font><font color="#CCCCCC"> token</font><font color="#E5E5E5"> or</font>

284
00:10:18,550 --> 00:10:22,780
something but this<font color="#CCCCCC"> is just</font><font color="#E5E5E5"> a basic</font>

285
00:10:20,020 --> 00:10:26,470
<font color="#CCCCCC">example to show how you can</font><font color="#E5E5E5"> hide what</font>

286
00:10:22,780 --> 00:10:27,699
the payload<font color="#CCCCCC"> is</font><font color="#E5E5E5"> through HTTP parameter</font>

287
00:10:26,470 --> 00:10:31,120
pollutions<font color="#E5E5E5"> so let's see what the next</font>

288
00:10:27,700 --> 00:10:32,170
<font color="#E5E5E5">slide does so</font><font color="#CCCCCC"> that first one would</font>

289
00:10:31,120 --> 00:10:33,910
basically give you a script tag the

290
00:10:32,170 --> 00:10:35,500
second one is another way of<font color="#E5E5E5"> bypassing</font>

291
00:10:33,910 --> 00:10:36,760
<font color="#E5E5E5">input validation</font><font color="#CCCCCC"> remember how I said</font>

292
00:10:35,500 --> 00:10:39,040
<font color="#E5E5E5">there was three</font><font color="#CCCCCC"> different places</font><font color="#E5E5E5"> that</font>

293
00:10:36,760 --> 00:10:42,610
you<font color="#CCCCCC"> can actually pass</font><font color="#E5E5E5"> parameters in the</font>

294
00:10:39,040 --> 00:10:43,810
request this<font color="#E5E5E5"> shows</font><font color="#CCCCCC"> well not only</font><font color="#E5E5E5"> that</font>

295
00:10:42,610 --> 00:10:46,029
<font color="#E5E5E5">you can</font><font color="#CCCCCC"> pass it in three</font><font color="#E5E5E5"> different spots</font>

296
00:10:43,810 --> 00:10:47,949
<font color="#CCCCCC">they are actually handled in a certain</font>

297
00:10:46,029 --> 00:10:49,720
order<font color="#CCCCCC"> so if you know</font><font color="#E5E5E5"> that order you can</font>

298
00:10:47,950 --> 00:10:51,970
pass variables<font color="#E5E5E5"> in those different spots</font>

299
00:10:49,720 --> 00:10:55,510
to get them to join together<font color="#E5E5E5"> at the end</font>

300
00:10:51,970 --> 00:10:57,940
<font color="#CCCCCC">so here's an example</font><font color="#E5E5E5"> this request would</font>

301
00:10:55,510 --> 00:11:00,069
result in if you're using<font color="#E5E5E5"> again it put a</font>

302
00:10:57,940 --> 00:11:02,980
<font color="#CCCCCC">asp.net</font><font color="#E5E5E5"> where it concatenates</font><font color="#CCCCCC"> and adds</font>

303
00:11:00,070 --> 00:11:06,280
<font color="#CCCCCC">commas this would result</font><font color="#E5E5E5"> in a equals one</font>

304
00:11:02,980 --> 00:11:07,900
<font color="#E5E5E5">two three four five six so</font><font color="#CCCCCC"> you can see</font>

305
00:11:06,280 --> 00:11:10,209
that the<font color="#E5E5E5"> first place it takes the</font><font color="#CCCCCC"> value</font>

306
00:11:07,900 --> 00:11:13,709
from<font color="#E5E5E5"> or the variables from is the actual</font>

307
00:11:10,209 --> 00:11:16,500
URL<font color="#E5E5E5"> so the URL variable takes first</font>

308
00:11:13,710 --> 00:11:17,490
<font color="#E5E5E5">second takes it</font><font color="#CCCCCC"> from the post body see</font>

309
00:11:16,500 --> 00:11:19,890
if I can get this<font color="#E5E5E5"> thing here we go</font>

310
00:11:17,490 --> 00:11:22,260
<font color="#E5E5E5">second one is</font><font color="#CCCCCC"> the post body third one</font><font color="#E5E5E5"> is</font>

311
00:11:19,890 --> 00:11:23,550
<font color="#E5E5E5">the cookies</font><font color="#CCCCCC"> so if you can use them in</font>

312
00:11:22,260 --> 00:11:25,350
<font color="#E5E5E5">that order and you actually understand</font>

313
00:11:23,550 --> 00:11:27,120
<font color="#E5E5E5">the order that it's taken in that's</font>

314
00:11:25,350 --> 00:11:28,530
another way of<font color="#E5E5E5"> bypassing info validation</font>

315
00:11:27,120 --> 00:11:30,270
<font color="#CCCCCC">because you can</font><font color="#E5E5E5"> join them together not</font>

316
00:11:28,530 --> 00:11:33,329
<font color="#CCCCCC">just in one spot</font><font color="#E5E5E5"> but across different</font>

317
00:11:30,270 --> 00:11:34,860
areas<font color="#E5E5E5"> so again this is a tool is not</font>

318
00:11:33,330 --> 00:11:38,250
<font color="#E5E5E5">only</font><font color="#CCCCCC"> a vulnerability in itself but it's</font>

319
00:11:34,860 --> 00:11:39,330
<font color="#E5E5E5">leverage to bypass often bypass any kind</font>

320
00:11:38,250 --> 00:11:42,830
<font color="#CCCCCC">of access control</font><font color="#E5E5E5"> and get another</font>

321
00:11:39,330 --> 00:11:44,730
<font color="#CCCCCC">vulnerability in or exploit and</font><font color="#E5E5E5"> rather</font>

322
00:11:42,830 --> 00:11:47,370
again here's another<font color="#CCCCCC"> way of hiding</font>

323
00:11:44,730 --> 00:11:48,570
cross-site request forgery<font color="#E5E5E5"> basically</font>

324
00:11:47,370 --> 00:11:50,550
makes it<font color="#E5E5E5"> look like</font><font color="#CCCCCC"> a post action</font><font color="#E5E5E5"> but</font>

325
00:11:48,570 --> 00:11:52,440
it's actually<font color="#E5E5E5"> a delete action</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> won't go</font>

326
00:11:50,550 --> 00:11:54,510
into that<font color="#E5E5E5"> new further so here's an</font>

327
00:11:52,440 --> 00:11:58,950
actual<font color="#CCCCCC"> example of</font><font color="#E5E5E5"> this being used in the</font>

328
00:11:54,510 --> 00:12:00,420
wild<font color="#CCCCCC"> if you take so this</font><font color="#E5E5E5"> is so everyone</font>

329
00:11:58,950 --> 00:12:01,890
here should<font color="#E5E5E5"> be are some people should be</font>

330
00:12:00,420 --> 00:12:03,990
familiar<font color="#E5E5E5"> with OAuth</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> lot is basically a</font>

331
00:12:01,890 --> 00:12:06,000
way of authorizing<font color="#CCCCCC"> an application to</font>

332
00:12:03,990 --> 00:12:07,890
perform<font color="#CCCCCC"> actions on</font><font color="#E5E5E5"> your behalf</font><font color="#CCCCCC"> so with</font>

333
00:12:06,000 --> 00:12:09,480
Twitter if<font color="#CCCCCC"> you if you use OAuth to</font>

334
00:12:07,890 --> 00:12:11,250
authorize an application that

335
00:12:09,480 --> 00:12:12,660
application<font color="#E5E5E5"> can</font><font color="#CCCCCC"> usually read</font><font color="#E5E5E5"> from your</font>

336
00:12:11,250 --> 00:12:14,130
<font color="#E5E5E5">timeline right to your timeline</font>

337
00:12:12,660 --> 00:12:15,120
basically do everything<font color="#CCCCCC"> on your</font><font color="#E5E5E5"> behalf</font>

338
00:12:14,130 --> 00:12:17,220
<font color="#CCCCCC">you're basically giving</font><font color="#E5E5E5"> them permission</font>

339
00:12:15,120 --> 00:12:18,150
<font color="#CCCCCC">to use</font><font color="#E5E5E5"> your</font><font color="#CCCCCC"> account so it's very</font>

340
00:12:17,220 --> 00:12:21,480
<font color="#E5E5E5">dangerous when you have vulnerabilities</font>

341
00:12:18,150 --> 00:12:22,680
<font color="#CCCCCC">in that kind of framework</font><font color="#E5E5E5"> however in</font>

342
00:12:21,480 --> 00:12:24,270
this<font color="#E5E5E5"> case</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> vulnerability was in the</font>

343
00:12:22,680 --> 00:12:26,880
<font color="#E5E5E5">framework it was in the way that Twitter</font>

344
00:12:24,270 --> 00:12:30,660
<font color="#CCCCCC">was handling the</font><font color="#E5E5E5"> authorization so let me</font>

345
00:12:26,880 --> 00:12:34,680
break<font color="#CCCCCC"> this down here this is a</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> NOAA</font>

346
00:12:30,660 --> 00:12:36,530
<font color="#E5E5E5">request</font><font color="#CCCCCC"> to basic to authorize periscope</font>

347
00:12:34,680 --> 00:12:39,089
TV to access your Twitter timeline

348
00:12:36,530 --> 00:12:41,970
because the host is periscope TV and

349
00:12:39,090 --> 00:12:43,740
digits<font color="#E5E5E5"> is what Twitter at the time was</font>

350
00:12:41,970 --> 00:12:47,340
using I<font color="#CCCCCC"> think they still do it's easily</font>

351
00:12:43,740 --> 00:12:49,560
the<font color="#E5E5E5"> domain to</font><font color="#CCCCCC"> do OAuth so what they do</font>

352
00:12:47,340 --> 00:12:51,570
in this<font color="#E5E5E5"> case is it looks like periscope</font>

353
00:12:49,560 --> 00:12:53,959
TV is getting<font color="#CCCCCC"> access</font><font color="#E5E5E5"> to your Twitter</font>

354
00:12:51,570 --> 00:12:57,330
timeline and to use<font color="#E5E5E5"> your Twitter account</font>

355
00:12:53,960 --> 00:12:58,470
<font color="#E5E5E5">however what the what the attacker</font>

356
00:12:57,330 --> 00:12:59,760
<font color="#CCCCCC">actually found</font><font color="#E5E5E5"> and this is on a bug</font>

357
00:12:58,470 --> 00:13:01,590
bounty reports you<font color="#CCCCCC"> can see the report</font>

358
00:12:59,760 --> 00:13:04,020
here but what the attacker actually

359
00:13:01,590 --> 00:13:07,460
<font color="#E5E5E5">found was</font><font color="#CCCCCC"> that if they pass the second</font>

360
00:13:04,020 --> 00:13:11,040
host<font color="#E5E5E5"> variable with attacker</font><font color="#CCCCCC"> com it</font>

361
00:13:07,460 --> 00:13:13,830
<font color="#E5E5E5">Twitter past periscope TV through and it</font>

362
00:13:11,040 --> 00:13:15,000
saw that<font color="#E5E5E5"> that is a valid authorization</font>

363
00:13:13,830 --> 00:13:17,430
<font color="#E5E5E5">that it will allow or at least that this</font>

364
00:13:15,000 --> 00:13:19,020
application<font color="#CCCCCC"> will allow however</font><font color="#E5E5E5"> by</font>

365
00:13:17,430 --> 00:13:21,060
<font color="#E5E5E5">passing a second variable through with</font>

366
00:13:19,020 --> 00:13:23,880
the<font color="#E5E5E5"> host set to something</font><font color="#CCCCCC"> different in</font>

367
00:13:21,060 --> 00:13:26,609
this case<font color="#CCCCCC"> attacker com</font>

368
00:13:23,880 --> 00:13:28,890
<font color="#E5E5E5">it would</font><font color="#CCCCCC"> actually authorize</font><font color="#E5E5E5"> attacker.com</font>

369
00:13:26,610 --> 00:13:31,320
<font color="#E5E5E5">but look like it was authorizing</font>

370
00:13:28,890 --> 00:13:33,960
periscope TV<font color="#E5E5E5"> so someone who clicked this</font>

371
00:13:31,320 --> 00:13:35,820
link was would think that<font color="#CCCCCC"> ok periscope</font>

372
00:13:33,960 --> 00:13:37,830
<font color="#E5E5E5">tot TV is is going to be using my</font>

373
00:13:35,820 --> 00:13:39,750
<font color="#E5E5E5">Twitter that's fine I use periscope I</font>

374
00:13:37,830 --> 00:13:41,610
<font color="#E5E5E5">want it to easily you know post</font><font color="#CCCCCC"> things</font>

375
00:13:39,750 --> 00:13:43,350
to my Twitter timeline<font color="#E5E5E5"> however what</font>

376
00:13:41,610 --> 00:13:44,790
really<font color="#CCCCCC"> happens is attacker comm gets</font>

377
00:13:43,350 --> 00:13:46,530
your<font color="#E5E5E5"> OAuth token and make</font><font color="#CCCCCC"> him</font><font color="#E5E5E5"> then do</font>

378
00:13:44,790 --> 00:13:47,969
everything<font color="#E5E5E5"> on your account instead so</font>

379
00:13:46,530 --> 00:13:49,920
this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> quickly patched but this is a</font>

380
00:13:47,970 --> 00:13:52,290
perfect example of HTTP parameter

381
00:13:49,920 --> 00:13:54,180
pollution used in the<font color="#E5E5E5"> wild</font><font color="#CCCCCC"> which is</font>

382
00:13:52,290 --> 00:13:55,110
really<font color="#CCCCCC"> interesting so I've showed you</font>

383
00:13:54,180 --> 00:13:55,859
some some ways<font color="#E5E5E5"> that it could be</font>

384
00:13:55,110 --> 00:13:57,840
exploited<font color="#CCCCCC"> I can show you with</font>

385
00:13:55,860 --> 00:14:00,170
<font color="#E5E5E5">vulnerability</font><font color="#CCCCCC"> is how do you actually</font>

386
00:13:57,840 --> 00:14:02,490
test for<font color="#CCCCCC"> it so let's go</font><font color="#E5E5E5"> through this</font>

387
00:14:00,170 --> 00:14:04,290
<font color="#E5E5E5">really the way</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> test for this is is</font>

388
00:14:02,490 --> 00:14:06,630
the best way is<font color="#CCCCCC"> to</font><font color="#E5E5E5"> just kind</font><font color="#CCCCCC"> of test</font>

389
00:14:04,290 --> 00:14:09,569
your applications as<font color="#CCCCCC"> you use them so for</font>

390
00:14:06,630 --> 00:14:12,210
<font color="#E5E5E5">example if you get to your request with</font>

391
00:14:09,570 --> 00:14:13,680
parameters in<font color="#CCCCCC"> it in your application try</font>

392
00:14:12,210 --> 00:14:16,260
changing the<font color="#CCCCCC"> values of values try</font>

393
00:14:13,680 --> 00:14:18,120
passing<font color="#CCCCCC"> a second parameter</font><font color="#E5E5E5"> with the same</font>

394
00:14:16,260 --> 00:14:19,140
name<font color="#E5E5E5"> different values see what happens</font>

395
00:14:18,120 --> 00:14:20,640
<font color="#CCCCCC">see what you get</font><font color="#E5E5E5"> on the other end</font>

396
00:14:19,140 --> 00:14:22,350
<font color="#E5E5E5">remember</font><font color="#CCCCCC"> that you can put into</font><font color="#E5E5E5"> those</font>

397
00:14:20,640 --> 00:14:23,790
different<font color="#E5E5E5"> spots in the request</font><font color="#CCCCCC"> so see</font>

398
00:14:22,350 --> 00:14:26,100
<font color="#E5E5E5">what happens if you put it in either the</font>

399
00:14:23,790 --> 00:14:29,219
URL<font color="#E5E5E5"> request the post body or the cookies</font>

400
00:14:26,100 --> 00:14:31,470
<font color="#E5E5E5">you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> actually automate this as well</font>

401
00:14:29,220 --> 00:14:34,170
with burp<font color="#E5E5E5"> suite and</font><font color="#CCCCCC"> cruder this is</font>

402
00:14:31,470 --> 00:14:36,000
another example<font color="#CCCCCC"> but you can</font><font color="#E5E5E5"> pass</font><font color="#CCCCCC"> in a</font>

403
00:14:34,170 --> 00:14:37,349
second<font color="#CCCCCC"> parameter with different name it</font>

404
00:14:36,000 --> 00:14:39,060
intruder just makes it really easy to

405
00:14:37,350 --> 00:14:40,830
automate stuff<font color="#E5E5E5"> like this as well</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> you</font>

406
00:14:39,060 --> 00:14:45,420
can do<font color="#E5E5E5"> it really quickly across all your</font>

407
00:14:40,830 --> 00:14:47,130
application<font color="#E5E5E5"> so you want to look in the</font>

408
00:14:45,420 --> 00:14:48,360
following<font color="#E5E5E5"> sources I think I get</font><font color="#CCCCCC"> to</font>

409
00:14:47,130 --> 00:14:50,280
<font color="#E5E5E5">another point later that I won't talk</font>

410
00:14:48,360 --> 00:14:52,320
<font color="#CCCCCC">about</font><font color="#E5E5E5"> so here's some common</font><font color="#CCCCCC"> sources</font>

411
00:14:50,280 --> 00:14:54,600
you're going to find<font color="#E5E5E5"> parameters passed</font>

412
00:14:52,320 --> 00:14:56,430
in form fields pagination<font color="#E5E5E5"> so that's like</font>

413
00:14:54,600 --> 00:14:56,880
page<font color="#CCCCCC"> equals</font><font color="#E5E5E5"> one page equals two things</font>

414
00:14:56,430 --> 00:14:59,520
<font color="#CCCCCC">like that</font>

415
00:14:56,880 --> 00:15:02,220
I haven't<font color="#E5E5E5"> page identifiers so if you can</font>

416
00:14:59,520 --> 00:15:05,010
access a page where the<font color="#CCCCCC"> page is ID is</font>

417
00:15:02,220 --> 00:15:07,080
<font color="#CCCCCC">one and</font><font color="#E5E5E5"> that's the admin page if you can</font>

418
00:15:05,010 --> 00:15:09,720
only<font color="#E5E5E5"> access it as I'm and try accessing</font>

419
00:15:07,080 --> 00:15:11,280
a regular page<font color="#CCCCCC"> with like an ID of one</font>

420
00:15:09,720 --> 00:15:13,410
two three four and<font color="#CCCCCC"> then add</font><font color="#E5E5E5"> another</font>

421
00:15:11,280 --> 00:15:14,640
<font color="#E5E5E5">parameter value with page equals one and</font>

422
00:15:13,410 --> 00:15:18,600
see<font color="#E5E5E5"> if you can get to that second one</font><font color="#CCCCCC"> or</font>

423
00:15:14,640 --> 00:15:21,660
switch<font color="#CCCCCC"> it around so yes this is</font><font color="#E5E5E5"> exactly</font>

424
00:15:18,600 --> 00:15:23,310
<font color="#CCCCCC">what I'm</font><font color="#E5E5E5"> talking about</font><font color="#CCCCCC"> and there's a way</font>

425
00:15:21,660 --> 00:15:24,569
<font color="#CCCCCC">you can actually intercept all post</font>

426
00:15:23,310 --> 00:15:26,310
requests and parameters<font color="#E5E5E5"> but not just</font>

427
00:15:24,570 --> 00:15:28,350
<font color="#E5E5E5">post requests now</font>

428
00:15:26,310 --> 00:15:30,270
burp suite<font color="#CCCCCC"> makes</font><font color="#E5E5E5"> it really easy because</font>

429
00:15:28,350 --> 00:15:31,380
<font color="#E5E5E5">you can there's a setting to just</font>

430
00:15:30,270 --> 00:15:33,390
intercept<font color="#CCCCCC"> all requests that have</font>

431
00:15:31,380 --> 00:15:34,589
parameters so that<font color="#CCCCCC"> could be get request</font>

432
00:15:33,390 --> 00:15:37,319
post request<font color="#E5E5E5"> it doesn't matter I mean</font>

433
00:15:34,589 --> 00:15:39,600
probably<font color="#E5E5E5"> put</font><font color="#CCCCCC"> requests</font><font color="#E5E5E5"> maybe</font>

434
00:15:37,320 --> 00:15:40,949
and other ones but the<font color="#E5E5E5"> most common ones</font>

435
00:15:39,600 --> 00:15:42,660
are<font color="#E5E5E5"> going to be getting post</font><font color="#CCCCCC"> requests so</font>

436
00:15:40,949 --> 00:15:44,519
<font color="#E5E5E5">so burps we make this makes it super</font>

437
00:15:42,660 --> 00:15:46,170
easy<font color="#E5E5E5"> to actually do so try one time when</font>

438
00:15:44,519 --> 00:15:49,139
your<font color="#CCCCCC"> browse with your application</font><font color="#E5E5E5"> set</font>

439
00:15:46,170 --> 00:15:51,660
this on<font color="#CCCCCC"> setup a burp instance setup the</font>

440
00:15:49,139 --> 00:15:54,509
proxy<font color="#CCCCCC"> and then just enable this this</font>

441
00:15:51,660 --> 00:15:55,920
option<font color="#E5E5E5"> and make sure to set it the last</font>

442
00:15:54,509 --> 00:15:57,000
<font color="#CCCCCC">option to that it's in</font><font color="#E5E5E5"> your scope</font>

443
00:15:55,920 --> 00:15:59,699
it's<font color="#E5E5E5"> your only testing your own</font>

444
00:15:57,000 --> 00:16:00,899
application<font color="#CCCCCC"> but try seeing what</font>

445
00:15:59,699 --> 00:16:03,508
parameters you're<font color="#E5E5E5"> seeing coming through</font>

446
00:16:00,899 --> 00:16:04,529
and try<font color="#CCCCCC"> changing things as they</font><font color="#E5E5E5"> go so</font>

447
00:16:03,509 --> 00:16:05,699
how do you<font color="#CCCCCC"> actually defend against this</font>

448
00:16:04,529 --> 00:16:08,490
<font color="#E5E5E5">so let's take a look quickly through</font>

449
00:16:05,699 --> 00:16:09,930
here<font color="#E5E5E5"> really the the key thing is dynamic</font>

450
00:16:08,490 --> 00:16:11,579
testing actually<font color="#E5E5E5"> test your application</font>

451
00:16:09,930 --> 00:16:12,569
to see how it<font color="#CCCCCC"> handles</font><font color="#E5E5E5"> this because like</font>

452
00:16:11,579 --> 00:16:14,250
I said<font color="#CCCCCC"> different application</font>

453
00:16:12,569 --> 00:16:16,439
technologies<font color="#E5E5E5"> handle parameters</font>

454
00:16:14,250 --> 00:16:19,050
differently so the only way<font color="#E5E5E5"> to really</font>

455
00:16:16,440 --> 00:16:20,759
<font color="#E5E5E5">know as these technologies change and</font>

456
00:16:19,050 --> 00:16:22,670
evolve<font color="#E5E5E5"> and new ones get added because I</font>

457
00:16:20,759 --> 00:16:24,959
don't even<font color="#CCCCCC"> think node</font><font color="#E5E5E5"> was on that list</font>

458
00:16:22,670 --> 00:16:26,219
<font color="#CCCCCC">try to understand like test it in your</font>

459
00:16:24,959 --> 00:16:29,489
<font color="#E5E5E5">in your</font><font color="#CCCCCC"> environment to see how it</font>

460
00:16:26,220 --> 00:16:31,259
handles<font color="#CCCCCC"> it</font><font color="#E5E5E5"> I take a look through source</font>

461
00:16:29,490 --> 00:16:34,680
code find<font color="#CCCCCC"> where parameters are accepted</font>

462
00:16:31,259 --> 00:16:36,149
pretty easy validate how your<font color="#CCCCCC"> last</font>

463
00:16:34,680 --> 00:16:37,979
<font color="#E5E5E5">handles is you will have application</font>

464
00:16:36,149 --> 00:16:39,569
firewall<font color="#E5E5E5"> because if it's handling things</font>

465
00:16:37,980 --> 00:16:40,620
differently<font color="#CCCCCC"> and passing things things</font>

466
00:16:39,569 --> 00:16:43,079
through to<font color="#CCCCCC"> your application</font><font color="#E5E5E5"> that you're</font>

467
00:16:40,620 --> 00:16:44,250
not expecting<font color="#E5E5E5"> you may have tested your</font>

468
00:16:43,079 --> 00:16:45,000
application thoroughly but if you put

469
00:16:44,250 --> 00:16:46,769
<font color="#E5E5E5">something in</font><font color="#CCCCCC"> front of</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> that's</font>

470
00:16:45,000 --> 00:16:49,199
modifying those requests<font color="#E5E5E5"> or stripping</font>

471
00:16:46,769 --> 00:16:51,060
out<font color="#E5E5E5"> parameters if there's duplicate ones</font>

472
00:16:49,199 --> 00:16:52,589
whatever<font color="#E5E5E5"> you need to know how that</font>

473
00:16:51,060 --> 00:16:55,709
reacts in your<font color="#CCCCCC"> environment so</font><font color="#E5E5E5"> you can</font>

474
00:16:52,589 --> 00:16:57,180
adjust appropriately<font color="#CCCCCC"> and just general</font>

475
00:16:55,709 --> 00:16:59,550
good practice output<font color="#E5E5E5"> encoding so if</font>

476
00:16:57,180 --> 00:17:01,979
someone does manage<font color="#E5E5E5"> to get get through</font>

477
00:16:59,550 --> 00:17:04,770
your applications access<font color="#E5E5E5"> control or get</font>

478
00:17:01,980 --> 00:17:06,900
through any kind<font color="#E5E5E5"> of defense against this</font>

479
00:17:04,770 --> 00:17:09,569
this just makes it so that<font color="#E5E5E5"> the ensuing</font>

480
00:17:06,900 --> 00:17:10,620
attack is neutered<font color="#E5E5E5"> so you know they</font>

481
00:17:09,569 --> 00:17:12,119
can't get through<font color="#E5E5E5"> with across that</font>

482
00:17:10,619 --> 00:17:13,829
scripting they can't execute JavaScript

483
00:17:12,119 --> 00:17:15,359
if it's encoded properly again there's

484
00:17:13,829 --> 00:17:19,109
ways around<font color="#E5E5E5"> this but</font><font color="#CCCCCC"> that's just general</font>

485
00:17:15,359 --> 00:17:21,719
<font color="#E5E5E5">good practice and best case be as</font>

486
00:17:19,109 --> 00:17:23,668
<font color="#E5E5E5">explicit as possible so strip duplicate</font>

487
00:17:21,720 --> 00:17:25,559
parameters or explicitly choose the last

488
00:17:23,669 --> 00:17:27,449
one<font color="#E5E5E5"> whatever it's up to you if you're</font>

489
00:17:25,559 --> 00:17:30,178
designing<font color="#CCCCCC"> the application be as</font><font color="#E5E5E5"> explicit</font>

490
00:17:27,449 --> 00:17:31,830
as possible<font color="#E5E5E5"> always</font><font color="#CCCCCC"> good practice</font><font color="#E5E5E5"> so</font>

491
00:17:30,179 --> 00:17:34,500
here's some<font color="#E5E5E5"> more further reading again</font>

492
00:17:31,830 --> 00:17:37,760
I'm going<font color="#E5E5E5"> to post this afterwards</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> you</font>

493
00:17:34,500 --> 00:17:40,500
can check<font color="#E5E5E5"> it</font><font color="#CCCCCC"> out then overly permissive</font>

494
00:17:37,760 --> 00:17:42,629
<font color="#E5E5E5">regular expressions so I'm shorter on</font>

495
00:17:40,500 --> 00:17:46,340
time so I'm not<font color="#E5E5E5"> going to go in depth</font>

496
00:17:42,630 --> 00:17:48,570
here<font color="#CCCCCC"> but basically</font><font color="#E5E5E5"> what this is is</font>

497
00:17:46,340 --> 00:17:50,010
regular expressions can be<font color="#E5E5E5"> able</font><font color="#CCCCCC"> their</font>

498
00:17:48,570 --> 00:17:50,850
source of vulnerabilities because

499
00:17:50,010 --> 00:17:52,559
they're often<font color="#E5E5E5"> you</font>

500
00:17:50,850 --> 00:17:54,090
is for access control<font color="#CCCCCC"> and input</font>

501
00:17:52,559 --> 00:17:55,470
validation<font color="#CCCCCC"> so if you're trusting your</font>

502
00:17:54,090 --> 00:17:58,830
regular expression that<font color="#E5E5E5"> you wrote</font><font color="#CCCCCC"> to</font>

503
00:17:55,470 --> 00:18:02,940
catch<font color="#E5E5E5"> everything you're probably in for</font>

504
00:17:58,830 --> 00:18:04,379
<font color="#E5E5E5">a world of</font><font color="#CCCCCC"> hurt</font><font color="#E5E5E5"> because it won't so when</font>

505
00:18:02,940 --> 00:18:07,140
they're not tuned well<font color="#CCCCCC"> it can result</font><font color="#E5E5E5"> in</font>

506
00:18:04,380 --> 00:18:08,520
you know<font color="#E5E5E5"> authorization bypasses it can</font>

507
00:18:07,140 --> 00:18:10,470
result in anomalies in your application

508
00:18:08,520 --> 00:18:12,900
you<font color="#E5E5E5"> didn't expect so here's a here's a</font>

509
00:18:10,470 --> 00:18:16,470
comics not really much to<font color="#E5E5E5"> do with</font><font color="#CCCCCC"> overly</font>

510
00:18:12,900 --> 00:18:17,370
for<font color="#E5E5E5"> them permissive reg X's but that</font>

511
00:18:16,470 --> 00:18:20,910
thought you'd enjoy<font color="#CCCCCC"> it</font>

512
00:18:17,370 --> 00:18:22,439
everyone likes<font color="#E5E5E5"> xkcd so let's move on to</font>

513
00:18:20,910 --> 00:18:23,280
<font color="#E5E5E5">some common gotchas again I'll run</font>

514
00:18:22,440 --> 00:18:25,049
<font color="#E5E5E5">through this pretty quickly</font>

515
00:18:23,280 --> 00:18:25,799
make sure you caught the right<font color="#E5E5E5"> character</font>

516
00:18:25,049 --> 00:18:28,260
case when you're using regular

517
00:18:25,799 --> 00:18:32,039
<font color="#E5E5E5">expressions because it's by default</font><font color="#CCCCCC"> is</font>

518
00:18:28,260 --> 00:18:33,809
case sensitive<font color="#E5E5E5"> so check</font><font color="#CCCCCC"> that you can</font>

519
00:18:32,039 --> 00:18:36,260
also use<font color="#CCCCCC"> flash</font><font color="#E5E5E5"> eye as a modifier to make</font>

520
00:18:33,809 --> 00:18:38,460
it insensitive weird boundaries

521
00:18:36,260 --> 00:18:40,830
<font color="#CCCCCC">basically when you're looking at a word</font>

522
00:18:38,460 --> 00:18:42,450
<font color="#E5E5E5">you want to only accept to the point</font>

523
00:18:40,830 --> 00:18:46,020
where you're<font color="#CCCCCC"> looking for so you don't</font>

524
00:18:42,450 --> 00:18:50,070
<font color="#E5E5E5">want to accept in your application admin</font>

525
00:18:46,020 --> 00:18:51,480
and administrative assistant probably

526
00:18:50,070 --> 00:18:52,889
aren't<font color="#E5E5E5"> the same role so use word</font>

527
00:18:51,480 --> 00:18:56,429
boundaries to delineate<font color="#E5E5E5"> them which is</font>

528
00:18:52,890 --> 00:18:58,980
usually<font color="#CCCCCC"> /b</font><font color="#E5E5E5"> do you really need to use</font><font color="#CCCCCC"> a</font>

529
00:18:56,429 --> 00:19:02,880
<font color="#E5E5E5">star so this is the</font><font color="#CCCCCC"> wildcard</font><font color="#E5E5E5"> that</font>

530
00:18:58,980 --> 00:19:04,049
basically accepts<font color="#CCCCCC"> 0 or any if it's if</font>

531
00:19:02,880 --> 00:19:05,730
you're using an or condition especially

532
00:19:04,049 --> 00:19:07,350
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is dangerous because if it's in the</font>

533
00:19:05,730 --> 00:19:09,240
first<font color="#CCCCCC"> condition it will usually</font><font color="#E5E5E5"> match</font>

534
00:19:07,350 --> 00:19:11,120
<font color="#E5E5E5">almost anything and then always allow</font>

535
00:19:09,240 --> 00:19:15,210
<font color="#CCCCCC">someone through</font><font color="#E5E5E5"> so here's an example</font>

536
00:19:11,120 --> 00:19:17,459
this<font color="#CCCCCC"> is a or condition where the first</font>

537
00:19:15,210 --> 00:19:21,570
<font color="#CCCCCC">match is always going</font><font color="#E5E5E5"> to be true because</font>

538
00:19:17,460 --> 00:19:23,909
<font color="#E5E5E5">it's either zero digits or any number of</font>

539
00:19:21,570 --> 00:19:25,470
<font color="#CCCCCC">digits</font><font color="#E5E5E5"> or really you know so it'll match</font>

540
00:19:23,909 --> 00:19:28,320
any of<font color="#E5E5E5"> these things</font><font color="#CCCCCC"> okay</font>

541
00:19:25,470 --> 00:19:30,390
so just be aware when you're going<font color="#E5E5E5"> to be</font>

542
00:19:28,320 --> 00:19:32,820
<font color="#E5E5E5">using the star character special</font>

543
00:19:30,390 --> 00:19:33,870
characters special characters if you

544
00:19:32,820 --> 00:19:36,149
actually<font color="#E5E5E5"> need to special characters in</font>

545
00:19:33,870 --> 00:19:39,870
regular expressions<font color="#CCCCCC"> use a backslash to</font>

546
00:19:36,150 --> 00:19:42,840
negate them and don't try to parse HTML

547
00:19:39,870 --> 00:19:45,360
with regular expressions<font color="#CCCCCC"> a is painful</font>

548
00:19:42,840 --> 00:19:46,860
and it sucks as a developer because<font color="#E5E5E5"> it's</font>

549
00:19:45,360 --> 00:19:51,090
always<font color="#CCCCCC"> changing and there's just so many</font>

550
00:19:46,860 --> 00:19:53,158
edge cases<font color="#CCCCCC"> just ask cloud</font><font color="#E5E5E5"> player just</font>

551
00:19:51,090 --> 00:19:54,480
because if you're<font color="#E5E5E5"> trying to do this to</font>

552
00:19:53,159 --> 00:19:56,190
to parse things you're<font color="#E5E5E5"> probably going to</font>

553
00:19:54,480 --> 00:19:57,630
miss something<font color="#E5E5E5"> there's a lot of really</font>

554
00:19:56,190 --> 00:20:01,409
<font color="#E5E5E5">good libraries for this so don't try to</font>

555
00:19:57,630 --> 00:20:02,520
do<font color="#E5E5E5"> it</font><font color="#CCCCCC"> on your own just</font><font color="#E5E5E5"> don't</font><font color="#CCCCCC"> exploit</font><font color="#E5E5E5"> so</font>

556
00:20:01,409 --> 00:20:04,179
let's look at some regular expression

557
00:20:02,520 --> 00:20:08,270
exploits

558
00:20:04,179 --> 00:20:09,950
so this was a<font color="#E5E5E5"> case where what so you can</font>

559
00:20:08,270 --> 00:20:12,889
actually see that this is a thing as a

560
00:20:09,950 --> 00:20:13,940
bug<font color="#E5E5E5"> Danny</font><font color="#CCCCCC"> what's basic multi line abuse</font>

561
00:20:12,890 --> 00:20:15,320
<font color="#CCCCCC">to remote code execution so they</font>

562
00:20:13,940 --> 00:20:17,450
<font color="#E5E5E5">actually got remote code execution do</font>

563
00:20:15,320 --> 00:20:19,370
this<font color="#CCCCCC"> bla so if you take</font><font color="#E5E5E5"> a look at this</font>

564
00:20:17,450 --> 00:20:21,380
regular expression<font color="#CCCCCC"> it's supposed to</font>

565
00:20:19,370 --> 00:20:25,850
match for<font color="#CCCCCC"> anything basically anything</font>

566
00:20:21,380 --> 00:20:28,279
<font color="#E5E5E5">dot</font><font color="#CCCCCC"> R</font><font color="#E5E5E5"> PT but the flaw here so it'll look</font>

567
00:20:25,850 --> 00:20:30,590
<font color="#E5E5E5">something like this will match the flaw</font>

568
00:20:28,279 --> 00:20:32,270
here is that<font color="#E5E5E5"> because it's got this</font>

569
00:20:30,590 --> 00:20:35,029
character<font color="#E5E5E5"> here there's two plus first</font>

570
00:20:32,270 --> 00:20:36,980
off its got<font color="#CCCCCC"> the</font><font color="#E5E5E5"> slash s character slash</font>

571
00:20:35,029 --> 00:20:40,309
s not<font color="#E5E5E5"> only includes spaces but it's also</font>

572
00:20:36,980 --> 00:20:42,049
tabs line breaks and form feeds<font color="#E5E5E5"> line</font>

573
00:20:40,309 --> 00:20:45,320
breaks can be<font color="#E5E5E5"> used in malicious ways</font>

574
00:20:42,049 --> 00:20:47,480
when it's passed into a command<font color="#E5E5E5"> so look</font>

575
00:20:45,320 --> 00:20:50,360
at this<font color="#E5E5E5"> if you pass this line break</font>

576
00:20:47,480 --> 00:20:53,299
right here<font color="#CCCCCC"> with the percent zero a</font><font color="#E5E5E5"> the</font>

577
00:20:50,360 --> 00:20:54,799
next command<font color="#E5E5E5"> execute will be cat SC</font>

578
00:20:53,299 --> 00:20:56,658
password which<font color="#CCCCCC"> is not good on a</font><font color="#E5E5E5"> Linux</font>

579
00:20:54,799 --> 00:20:58,279
system<font color="#E5E5E5"> and then this so this would</font>

580
00:20:56,659 --> 00:21:02,480
<font color="#CCCCCC">actually match because it actually</font><font color="#E5E5E5"> hits</font>

581
00:20:58,279 --> 00:21:04,909
be<font color="#E5E5E5"> anything matches</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> PT however</font>

582
00:21:02,480 --> 00:21:07,210
because of this<font color="#E5E5E5"> multi-line modifier here</font>

583
00:21:04,909 --> 00:21:10,220
<font color="#E5E5E5">the way that PHP handles multi-line is</font>

584
00:21:07,210 --> 00:21:12,710
that it not only checks on multiple

585
00:21:10,220 --> 00:21:14,929
lines<font color="#E5E5E5"> but it will look until it'll</font>

586
00:21:12,710 --> 00:21:16,070
accept and take<font color="#CCCCCC"> anything the</font><font color="#E5E5E5"> goal line</font>

587
00:21:14,929 --> 00:21:18,470
rather<font color="#E5E5E5"> than</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> whole string that</font>

588
00:21:16,070 --> 00:21:21,500
matches and puts it into your output so

589
00:21:18,470 --> 00:21:24,289
something like this would<font color="#CCCCCC"> also work</font>

590
00:21:21,500 --> 00:21:25,549
<font color="#E5E5E5">because it takes this this matches but</font>

591
00:21:24,289 --> 00:21:27,830
<font color="#E5E5E5">it continues for the</font><font color="#CCCCCC"> rest of</font><font color="#E5E5E5"> the line</font>

592
00:21:25,549 --> 00:21:29,570
because<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> multi-line modifier so</font>

593
00:21:27,830 --> 00:21:31,010
this will be completely valid it'll pass

594
00:21:29,570 --> 00:21:32,720
<font color="#E5E5E5">this into the command in the</font><font color="#CCCCCC"> backend it</font>

595
00:21:31,010 --> 00:21:35,600
accepts<font color="#E5E5E5"> the file</font><font color="#CCCCCC"> but then it also</font>

596
00:21:32,720 --> 00:21:39,200
executed<font color="#E5E5E5"> this this actual command to</font>

597
00:21:35,600 --> 00:21:40,340
output<font color="#E5E5E5"> your password file in Linux not</font>

598
00:21:39,200 --> 00:21:42,950
good

599
00:21:40,340 --> 00:21:44,360
oh and interesting thing about this

600
00:21:42,950 --> 00:21:47,179
vulnerability<font color="#E5E5E5"> is actually a default on</font>

601
00:21:44,360 --> 00:21:48,469
Ruby<font color="#CCCCCC"> on Rails for a while so by default</font>

602
00:21:47,179 --> 00:21:51,590
<font color="#CCCCCC">is</font><font color="#E5E5E5"> do multi lines you could actually</font>

603
00:21:48,470 --> 00:21:53,330
pass<font color="#CCCCCC"> something</font><font color="#E5E5E5"> like this</font><font color="#CCCCCC"> into a into</font>

604
00:21:51,590 --> 00:21:54,980
almost anything<font color="#CCCCCC"> that was taking a</font>

605
00:21:53,330 --> 00:21:57,408
regular<font color="#CCCCCC"> expression and if it was passing</font>

606
00:21:54,980 --> 00:22:00,830
it back to a<font color="#CCCCCC"> back-end command then it</font>

607
00:21:57,409 --> 00:22:02,029
would<font color="#E5E5E5"> execute a script or reflect back</font>

608
00:22:00,830 --> 00:22:03,770
or you<font color="#E5E5E5"> could</font><font color="#CCCCCC"> basically enter anything as</font>

609
00:22:02,029 --> 00:22:05,510
long<font color="#E5E5E5"> as</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> use the line breaks and then</font>

610
00:22:03,770 --> 00:22:06,710
would execute that command<font color="#CCCCCC"> so as long</font><font color="#E5E5E5"> as</font>

611
00:22:05,510 --> 00:22:09,289
<font color="#CCCCCC">it was</font><font color="#E5E5E5"> found somewhere and there's some</font>

612
00:22:06,710 --> 00:22:10,850
<font color="#E5E5E5">kind of valid match you could continue</font>

613
00:22:09,289 --> 00:22:12,620
it with the with the line break<font color="#E5E5E5"> and it</font>

614
00:22:10,850 --> 00:22:13,820
would also use that<font color="#E5E5E5"> it's pretty</font>

615
00:22:12,620 --> 00:22:15,799
interesting

616
00:22:13,820 --> 00:22:16,970
so this left<font color="#E5E5E5"> a bunch of websites exposed</font>

617
00:22:15,799 --> 00:22:18,830
at<font color="#E5E5E5"> the time they're using Ruby</font><font color="#CCCCCC"> on Rails</font>

618
00:22:16,970 --> 00:22:22,330
saying it was like<font color="#E5E5E5"> WordPress tumblr</font>

619
00:22:18,830 --> 00:22:22,330
<font color="#CCCCCC">github bunch of them</font>

620
00:22:22,479 --> 00:22:29,059
next one<font color="#CCCCCC"> blacklist bypass</font><font color="#E5E5E5"> so this is</font>

621
00:22:27,470 --> 00:22:31,340
pretty simple<font color="#CCCCCC"> essentially</font><font color="#E5E5E5"> reading</font><font color="#CCCCCC"> a</font>

622
00:22:29,059 --> 00:22:34,668
blacklist<font color="#CCCCCC"> that</font><font color="#E5E5E5"> this came</font><font color="#CCCCCC"> out to this but</font>

623
00:22:31,340 --> 00:22:36,470
if you tried to<font color="#CCCCCC"> do slash title</font><font color="#E5E5E5"> it was</font>

624
00:22:34,669 --> 00:22:38,239
caught by<font color="#CCCCCC"> the blacklist</font><font color="#E5E5E5"> so for those of</font>

625
00:22:36,470 --> 00:22:39,739
<font color="#E5E5E5">you that aren't familiar there's two</font>

626
00:22:38,239 --> 00:22:42,889
concepts one is a block that's one<font color="#CCCCCC"> is</font><font color="#E5E5E5"> a</font>

627
00:22:39,739 --> 00:22:45,590
whitelist<font color="#E5E5E5"> blacklist matches on things</font>

628
00:22:42,889 --> 00:22:47,988
<font color="#E5E5E5">that you specify whitelist basically</font>

629
00:22:45,590 --> 00:22:49,820
says sorry blacklist is usually<font color="#E5E5E5"> used to</font>

630
00:22:47,989 --> 00:22:52,279
say don't allow these specific<font color="#CCCCCC"> things</font>

631
00:22:49,820 --> 00:22:54,769
that<font color="#CCCCCC"> you specify whitelist is usually</font>

632
00:22:52,279 --> 00:22:56,239
used<font color="#E5E5E5"> in Reverse where it says</font><font color="#CCCCCC"> only allow</font>

633
00:22:54,769 --> 00:22:57,859
these<font color="#CCCCCC"> things that</font><font color="#E5E5E5"> you specify which</font>

634
00:22:56,239 --> 00:22:59,479
means it<font color="#E5E5E5"> catches a lot more things in it</font>

635
00:22:57,859 --> 00:23:00,830
so in this case we're<font color="#E5E5E5"> doing a blacklist</font>

636
00:22:59,479 --> 00:23:02,960
so they were specifically looking<font color="#CCCCCC"> for</font>

637
00:23:00,830 --> 00:23:04,728
<font color="#CCCCCC">the</font><font color="#E5E5E5"> flash title in the input so you</font>

638
00:23:02,960 --> 00:23:08,929
<font color="#E5E5E5">couldn't then continue</font><font color="#CCCCCC"> on and pass in</font>

639
00:23:04,729 --> 00:23:10,399
HTML<font color="#CCCCCC"> or JavaScript</font><font color="#E5E5E5"> and all you had to do</font>

640
00:23:08,929 --> 00:23:12,289
really<font color="#E5E5E5"> to bypass this was something</font><font color="#CCCCCC"> like</font>

641
00:23:10,399 --> 00:23:14,059
this where you<font color="#E5E5E5"> would pass in extra this</font>

642
00:23:12,289 --> 00:23:15,799
<font color="#E5E5E5">looks kind of convoluted because of all</font>

643
00:23:14,059 --> 00:23:20,509
the URL encoding<font color="#E5E5E5"> but basically what it</font>

644
00:23:15,799 --> 00:23:22,609
<font color="#E5E5E5">is is</font><font color="#CCCCCC"> it's it would</font><font color="#E5E5E5"> result in this so</font>

645
00:23:20,509 --> 00:23:23,960
<font color="#CCCCCC">bypassing</font><font color="#E5E5E5"> and not just a</font><font color="#CCCCCC"> flash title you</font>

646
00:23:22,609 --> 00:23:25,428
can also pass in<font color="#E5E5E5"> an ID and then a bunch</font>

647
00:23:23,960 --> 00:23:27,499
<font color="#E5E5E5">of other things</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> doesn't expect that</font>

648
00:23:25,429 --> 00:23:28,309
are valid HTML because it wasn't

649
00:23:27,499 --> 00:23:30,169
checking<font color="#E5E5E5"> for them in the regular</font>

650
00:23:28,309 --> 00:23:31,580
<font color="#E5E5E5">expression and the</font><font color="#CCCCCC"> blacklist for the</font>

651
00:23:30,169 --> 00:23:35,119
regular expression it got through and

652
00:23:31,580 --> 00:23:36,710
then you got code execution<font color="#E5E5E5"> or crossing</font>

653
00:23:35,119 --> 00:23:41,029
scripting rather so how do you actually

654
00:23:36,710 --> 00:23:42,289
<font color="#E5E5E5">test for</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> really the thing</font><font color="#CCCCCC"> that</font>

655
00:23:41,029 --> 00:23:44,840
<font color="#E5E5E5">comes to testing</font><font color="#CCCCCC"> I'll kind</font><font color="#E5E5E5"> of sum it up</font>

656
00:23:42,289 --> 00:23:47,239
right<font color="#E5E5E5"> now</font><font color="#CCCCCC"> it's most effective</font><font color="#E5E5E5"> with with</font>

657
00:23:44,840 --> 00:23:49,609
doing white box testing<font color="#CCCCCC"> because if</font>

658
00:23:47,239 --> 00:23:52,099
you're<font color="#E5E5E5"> looking</font><font color="#CCCCCC"> at if you're looking at</font>

659
00:23:49,609 --> 00:23:54,739
regular expressions<font color="#E5E5E5"> they're hard</font><font color="#CCCCCC"> to</font>

660
00:23:52,099 --> 00:23:56,629
parse if you don't see them<font color="#E5E5E5"> so you can</font>

661
00:23:54,739 --> 00:23:57,649
try fuzzing things but really the most

662
00:23:56,629 --> 00:24:01,178
effective<font color="#CCCCCC"> way is</font><font color="#E5E5E5"> to look in the source</font>

663
00:23:57,649 --> 00:24:03,469
<font color="#E5E5E5">code so</font><font color="#CCCCCC"> you can use any of</font><font color="#E5E5E5"> these tools</font>

664
00:24:01,179 --> 00:24:04,999
<font color="#E5E5E5">to check your regular expressions</font>

665
00:24:03,470 --> 00:24:05,989
they're really really<font color="#E5E5E5"> good any of these</font>

666
00:24:04,999 --> 00:24:08,330
doesn't matter it's<font color="#CCCCCC"> just kind of a</font>

667
00:24:05,989 --> 00:24:11,259
sanity check<font color="#E5E5E5"> dynamically test them with</font>

668
00:24:08,330 --> 00:24:16,119
some fuzzy<font color="#E5E5E5"> input so fuzzing is the</font>

669
00:24:11,259 --> 00:24:16,119
practice of<font color="#CCCCCC"> sending in particularly</font>

670
00:24:17,019 --> 00:24:21,830
incorrect input to see what happens and

671
00:24:19,609 --> 00:24:23,869
<font color="#E5E5E5">see how it reacts</font><font color="#CCCCCC"> there's a really good</font>

672
00:24:21,830 --> 00:24:26,178
list here<font color="#E5E5E5"> you</font><font color="#CCCCCC"> look at sec</font><font color="#E5E5E5"> lists they</font>

673
00:24:23,869 --> 00:24:27,300
have a whole section on fuzzing<font color="#E5E5E5"> I would</font>

674
00:24:26,179 --> 00:24:28,410
highly recommend checking<font color="#E5E5E5"> this</font>

675
00:24:27,300 --> 00:24:30,480
by the way<font color="#E5E5E5"> because they have a whole</font>

676
00:24:28,410 --> 00:24:32,130
<font color="#E5E5E5">bunch of polyglots</font><font color="#CCCCCC"> basically a bunch of</font>

677
00:24:30,480 --> 00:24:33,150
strings<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can use in your</font><font color="#E5E5E5"> testing for</font>

678
00:24:32,130 --> 00:24:35,160
cross-site scripting sequel injection

679
00:24:33,150 --> 00:24:36,770
things like this<font color="#E5E5E5"> so test with those in</font>

680
00:24:35,160 --> 00:24:40,820
<font color="#E5E5E5">your applications</font><font color="#CCCCCC"> see what happens</font><font color="#E5E5E5"> and</font>

681
00:24:36,770 --> 00:24:44,460
<font color="#E5E5E5">then try passing in line breaks as well</font>

682
00:24:40,820 --> 00:24:46,860
so how do you defend against this really

683
00:24:44,460 --> 00:24:48,600
<font color="#E5E5E5">all of these solutions are just kind</font><font color="#CCCCCC"> of</font>

684
00:24:46,860 --> 00:24:50,699
<font color="#E5E5E5">around best programmer programming</font>

685
00:24:48,600 --> 00:24:52,740
practices with testing sprinkled in<font color="#E5E5E5"> so</font>

686
00:24:50,700 --> 00:24:53,970
keep it simple<font color="#E5E5E5"> perform transformations</font>

687
00:24:52,740 --> 00:24:58,160
<font color="#CCCCCC">and stages</font><font color="#E5E5E5"> again I'm going to rush</font>

688
00:24:53,970 --> 00:25:00,240
<font color="#E5E5E5">through this a little bit</font><font color="#CCCCCC"> test</font><font color="#E5E5E5"> a lot and</font>

689
00:24:58,160 --> 00:25:02,310
<font color="#E5E5E5">always try</font><font color="#CCCCCC"> to have like a set of fresh</font>

690
00:25:00,240 --> 00:25:03,900
eyes on<font color="#E5E5E5"> it because it gets</font><font color="#CCCCCC"> really tiring</font>

691
00:25:02,310 --> 00:25:05,520
<font color="#E5E5E5">looking at regular expressions for a</font>

692
00:25:03,900 --> 00:25:06,930
long period of time<font color="#CCCCCC"> I know I worked on</font>

693
00:25:05,520 --> 00:25:08,940
an application<font color="#E5E5E5"> that was solely regular</font>

694
00:25:06,930 --> 00:25:11,070
expressions before<font color="#E5E5E5"> taking data passing</font>

695
00:25:08,940 --> 00:25:12,570
data interpreting data it<font color="#E5E5E5"> was a pain so</font>

696
00:25:11,070 --> 00:25:14,700
get another set of<font color="#E5E5E5"> eyes to</font><font color="#CCCCCC"> look at it</font>

697
00:25:12,570 --> 00:25:17,939
<font color="#E5E5E5">and it really helps because sometimes</font>

698
00:25:14,700 --> 00:25:19,050
you just<font color="#E5E5E5"> get lost in the forest and use</font>

699
00:25:17,940 --> 00:25:21,120
<font color="#E5E5E5">proving regular expressions so here's</font>

700
00:25:19,050 --> 00:25:23,669
one<font color="#CCCCCC"> that'll help you this</font><font color="#E5E5E5"> is a</font><font color="#CCCCCC"> IPV this</font>

701
00:25:21,120 --> 00:25:25,439
finds<font color="#E5E5E5"> an ipv4 address so just really</font>

702
00:25:23,670 --> 00:25:28,050
best<font color="#E5E5E5"> practices</font><font color="#CCCCCC"> around using</font><font color="#E5E5E5"> regular</font>

703
00:25:25,440 --> 00:25:29,430
expressions<font color="#CCCCCC"> is be modular test it as</font>

704
00:25:28,050 --> 00:25:31,379
much as<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> and have someone else</font>

705
00:25:29,430 --> 00:25:33,330
<font color="#CCCCCC">look at it and again use best practices</font>

706
00:25:31,380 --> 00:25:35,640
whenever possible which is<font color="#CCCCCC"> similes oh</font>

707
00:25:33,330 --> 00:25:39,000
and really good practice everywhere

708
00:25:35,640 --> 00:25:40,320
<font color="#CCCCCC">whitelist not blacklist</font><font color="#E5E5E5"> here's some</font>

709
00:25:39,000 --> 00:25:41,580
<font color="#CCCCCC">sources and further reading if you want</font>

710
00:25:40,320 --> 00:25:43,200
to<font color="#E5E5E5"> learn more regular expressions</font>

711
00:25:41,580 --> 00:25:44,610
there's<font color="#E5E5E5"> actually a lot to</font><font color="#CCCCCC"> it and I'm</font>

712
00:25:43,200 --> 00:25:46,500
<font color="#CCCCCC">sure if you're</font><font color="#E5E5E5"> doing bug bounty hunting</font>

713
00:25:44,610 --> 00:25:49,379
if<font color="#E5E5E5"> you are a security</font><font color="#CCCCCC"> researcher if</font>

714
00:25:46,500 --> 00:25:50,550
you're a if you're<font color="#CCCCCC"> developer</font><font color="#E5E5E5"> there's a</font>

715
00:25:49,380 --> 00:25:52,110
lot<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be found in regular expressions</font>

716
00:25:50,550 --> 00:25:53,220
<font color="#CCCCCC">because a lot of</font><font color="#E5E5E5"> people don't understand</font>

717
00:25:52,110 --> 00:25:54,750
them<font color="#E5E5E5"> and a lot of people don't want</font><font color="#CCCCCC"> to</font>

718
00:25:53,220 --> 00:25:56,280
understand them so<font color="#CCCCCC"> if you</font><font color="#E5E5E5"> get good at</font>

719
00:25:54,750 --> 00:25:57,630
<font color="#E5E5E5">this I'm sure</font><font color="#CCCCCC"> there's a lot of things</font>

720
00:25:56,280 --> 00:26:01,620
that<font color="#E5E5E5"> you can find so here's some good</font>

721
00:25:57,630 --> 00:26:02,780
useful sources<font color="#E5E5E5"> last but not least</font><font color="#CCCCCC"> server</font>

722
00:26:01,620 --> 00:26:06,389
<font color="#CCCCCC">side request forgery</font>

723
00:26:02,780 --> 00:26:08,430
so<font color="#CCCCCC"> SS RF because</font><font color="#E5E5E5"> I'm not going to say</font>

724
00:26:06,390 --> 00:26:09,810
the forward the<font color="#E5E5E5"> whole time SS RF is</font>

725
00:26:08,430 --> 00:26:11,640
basically when an attacker<font color="#E5E5E5"> can force the</font>

726
00:26:09,810 --> 00:26:14,909
server to perform<font color="#E5E5E5"> a request on their</font>

727
00:26:11,640 --> 00:26:17,640
behalf<font color="#E5E5E5"> so instead of if I were to send a</font>

728
00:26:14,910 --> 00:26:19,650
request<font color="#E5E5E5"> normally to a location and it's</font>

729
00:26:17,640 --> 00:26:21,720
blocked I can pass<font color="#E5E5E5"> it to another</font><font color="#CCCCCC"> server</font>

730
00:26:19,650 --> 00:26:23,610
<font color="#CCCCCC">it</font><font color="#E5E5E5"> basically makes a server act on your</font>

731
00:26:21,720 --> 00:26:24,120
behalf<font color="#E5E5E5"> which is kind of cool</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> has</font><font color="#CCCCCC"> some</font>

732
00:26:23,610 --> 00:26:25,889
<font color="#CCCCCC">ability</font>

733
00:26:24,120 --> 00:26:27,510
<font color="#E5E5E5">cool for the attacker bad for the</font>

734
00:26:25,890 --> 00:26:31,380
defender<font color="#E5E5E5"> but that's always the</font><font color="#CCCCCC"> case</font>

735
00:26:27,510 --> 00:26:33,240
isn't<font color="#E5E5E5"> it so how is this RF actually used</font>

736
00:26:31,380 --> 00:26:35,490
often it's<font color="#CCCCCC"> used to</font><font color="#E5E5E5"> bypass firewalls so</font>

737
00:26:33,240 --> 00:26:37,350
<font color="#E5E5E5">when you can force an application to</font>

738
00:26:35,490 --> 00:26:39,030
make<font color="#CCCCCC"> essentially</font><font color="#E5E5E5"> the application becomes</font>

739
00:26:37,350 --> 00:26:40,139
your proxy when you can force an

740
00:26:39,030 --> 00:26:40,889
application to<font color="#CCCCCC"> make a request in your</font>

741
00:26:40,140 --> 00:26:42,600
<font color="#CCCCCC">behalf</font>

742
00:26:40,890 --> 00:26:46,380
if there's a firewall<font color="#CCCCCC"> blocking your IP</font>

743
00:26:42,600 --> 00:26:48,090
or any IP except for<font color="#E5E5E5"> that server because</font>

744
00:26:46,380 --> 00:26:49,760
it's a trusted server then you<font color="#E5E5E5"> can then</font>

745
00:26:48,090 --> 00:26:51,990
bypass those firewalls<font color="#CCCCCC"> it's pretty</font><font color="#E5E5E5"> easy</font>

746
00:26:49,760 --> 00:26:55,470
<font color="#CCCCCC">but</font><font color="#E5E5E5"> not only that it gets more dangerous</font>

747
00:26:51,990 --> 00:26:57,870
<font color="#E5E5E5">when that server has has the internal</font>

748
00:26:55,470 --> 00:27:00,870
network interface exposed<font color="#E5E5E5"> so most web</font>

749
00:26:57,870 --> 00:27:02,219
servers<font color="#E5E5E5"> are really any server that are</font>

750
00:27:00,870 --> 00:27:04,229
supposed to the<font color="#CCCCCC"> internet a lot of them</font>

751
00:27:02,220 --> 00:27:06,929
have some kind<font color="#CCCCCC"> of way back into</font><font color="#E5E5E5"> the</font>

752
00:27:04,230 --> 00:27:09,000
<font color="#E5E5E5">inside the internal network</font><font color="#CCCCCC"> you probably</font>

753
00:27:06,929 --> 00:27:10,559
don't<font color="#E5E5E5"> need</font><font color="#CCCCCC"> that but if you have some</font>

754
00:27:09,000 --> 00:27:14,370
kind<font color="#CCCCCC"> of weight inside the internal</font>

755
00:27:10,559 --> 00:27:16,168
network<font color="#E5E5E5"> then you can then reach Network</font>

756
00:27:14,370 --> 00:27:17,370
<font color="#E5E5E5">a</font><font color="#CCCCCC"> network and computers that</font><font color="#E5E5E5"> aren't</font>

757
00:27:16,169 --> 00:27:20,160
accessible from anywhere<font color="#E5E5E5"> on the</font><font color="#CCCCCC"> internet</font>

758
00:27:17,370 --> 00:27:21,719
<font color="#E5E5E5">because of the stall</font><font color="#CCCCCC"> owner ability so it</font>

759
00:27:20,160 --> 00:27:24,059
opens up a lot<font color="#CCCCCC"> of vulnerabilities a lot</font>

760
00:27:21,720 --> 00:27:26,190
of further exposure to<font color="#E5E5E5"> your internal</font>

761
00:27:24,059 --> 00:27:29,100
<font color="#CCCCCC">environment and it's really</font><font color="#E5E5E5"> cool because</font>

762
00:27:26,190 --> 00:27:31,080
this allows when you find a necessary

763
00:27:29,100 --> 00:27:32,580
<font color="#CCCCCC">foul nur ability because</font><font color="#E5E5E5"> of the nature</font>

764
00:27:31,080 --> 00:27:35,220
of it it turns an application attack

765
00:27:32,580 --> 00:27:37,379
<font color="#E5E5E5">into a network attack</font><font color="#CCCCCC"> so it allows you</font>

766
00:27:35,220 --> 00:27:39,330
<font color="#E5E5E5">to essentially turn that host into a</font>

767
00:27:37,380 --> 00:27:42,809
port scanning bond or a bot on your

768
00:27:39,330 --> 00:27:44,399
behalf and because<font color="#CCCCCC"> of</font><font color="#E5E5E5"> that is useful</font><font color="#CCCCCC"> for</font>

769
00:27:42,809 --> 00:27:46,770
<font color="#E5E5E5">enumeration reconnaissance so you can</font>

770
00:27:44,400 --> 00:27:48,090
then perform<font color="#E5E5E5"> a whole bunch of scans</font><font color="#CCCCCC"> out</font>

771
00:27:46,770 --> 00:27:51,450
<font color="#CCCCCC">on the internet on the</font><font color="#E5E5E5"> internal network</font>

772
00:27:48,090 --> 00:27:54,059
<font color="#E5E5E5">without your IP being exposed and I</font>

773
00:27:51,450 --> 00:27:57,059
think that's the<font color="#E5E5E5"> next point yes</font>

774
00:27:54,059 --> 00:27:59,790
so because the destination<font color="#CCCCCC"> actually sees</font>

775
00:27:57,059 --> 00:28:02,809
only the<font color="#E5E5E5"> server's</font><font color="#CCCCCC"> address</font><font color="#E5E5E5"> not your own</font>

776
00:27:59,790 --> 00:28:05,549
<font color="#E5E5E5">attackers</font><font color="#CCCCCC"> love this because</font><font color="#E5E5E5"> then this is</font>

777
00:28:02,809 --> 00:28:08,190
another way of<font color="#E5E5E5"> them hiding their own</font>

778
00:28:05,549 --> 00:28:11,580
source address so it's really<font color="#E5E5E5"> handy to</font>

779
00:28:08,190 --> 00:28:14,850
attackers<font color="#E5E5E5"> and this is how it's often</font>

780
00:28:11,580 --> 00:28:15,960
introduced so<font color="#CCCCCC"> saint</font><font color="#E5E5E5"> sop</font><font color="#CCCCCC"> Aesop is stands</font>

781
00:28:14,850 --> 00:28:18,659
for same origin<font color="#CCCCCC"> policy</font>

782
00:28:15,960 --> 00:28:20,520
it's a browser defense that is present

783
00:28:18,660 --> 00:28:23,220
in really<font color="#E5E5E5"> all major browsers</font><font color="#CCCCCC"> that</font>

784
00:28:20,520 --> 00:28:25,080
prevents site<font color="#E5E5E5"> a for example from</font>

785
00:28:23,220 --> 00:28:28,380
reaching<font color="#E5E5E5"> out making a request to site B</font>

786
00:28:25,080 --> 00:28:31,470
and getting<font color="#E5E5E5"> getting any getting</font><font color="#CCCCCC"> some</font>

787
00:28:28,380 --> 00:28:32,490
content back<font color="#CCCCCC"> unless there's unless</font><font color="#E5E5E5"> you</font>

788
00:28:31,470 --> 00:28:35,120
have<font color="#E5E5E5"> something set</font><font color="#CCCCCC"> up which I will talk</font>

789
00:28:32,490 --> 00:28:37,230
<font color="#CCCCCC">about</font><font color="#E5E5E5"> later to actually do this properly</font>

790
00:28:35,120 --> 00:28:38,969
<font color="#E5E5E5">developers find this bothersome because</font>

791
00:28:37,230 --> 00:28:41,340
<font color="#CCCCCC">sometimes they</font><font color="#E5E5E5"> want to go to</font><font color="#CCCCCC"> site B and</font>

792
00:28:38,970 --> 00:28:42,600
get<font color="#E5E5E5"> content to return it back so one way</font>

793
00:28:41,340 --> 00:28:44,520
that<font color="#CCCCCC"> they will get around</font><font color="#E5E5E5"> this is by</font>

794
00:28:42,600 --> 00:28:48,719
potentially essentially<font color="#E5E5E5"> turning their</font>

795
00:28:44,520 --> 00:28:50,490
server<font color="#E5E5E5"> into a HTTP client for them to</font>

796
00:28:48,720 --> 00:28:51,720
make the request<font color="#E5E5E5"> behind the scenes and</font>

797
00:28:50,490 --> 00:28:53,610
then return<font color="#E5E5E5"> it back to</font><font color="#CCCCCC"> the user in</font><font color="#E5E5E5"> the</font>

798
00:28:51,720 --> 00:28:56,240
front end and I'll show<font color="#E5E5E5"> you how this can</font>

799
00:28:53,610 --> 00:28:56,240
get<font color="#E5E5E5"> dangerous later</font>

800
00:28:56,300 --> 00:29:00,120
actually I'll tell you right<font color="#CCCCCC"> now</font><font color="#E5E5E5"> it</font>

801
00:28:59,040 --> 00:29:01,560
<font color="#CCCCCC">actually can be</font><font color="#E5E5E5"> leveraged</font><font color="#CCCCCC"> to get</font>

802
00:29:00,120 --> 00:29:04,260
cross-site scripting by over the return

803
00:29:01,560 --> 00:29:06,030
<font color="#E5E5E5">content so what that means is when if an</font>

804
00:29:04,260 --> 00:29:07,920
attacker can force a server to make<font color="#CCCCCC"> a</font>

805
00:29:06,030 --> 00:29:11,100
request<font color="#E5E5E5"> to their own server and then</font>

806
00:29:07,920 --> 00:29:14,280
return<font color="#CCCCCC"> that content back</font><font color="#E5E5E5"> if that content</font>

807
00:29:11,100 --> 00:29:15,899
is their own HTML<font color="#E5E5E5"> that they've design</font>

808
00:29:14,280 --> 00:29:18,649
its scripted including<font color="#E5E5E5"> JavaScript then</font>

809
00:29:15,900 --> 00:29:21,150
they just got control<font color="#CCCCCC"> of your browser</font>

810
00:29:18,650 --> 00:29:23,490
<font color="#E5E5E5">because of that return content so it's a</font>

811
00:29:21,150 --> 00:29:25,200
way of chaining<font color="#CCCCCC"> it's a way of using</font><font color="#E5E5E5"> this</font>

812
00:29:23,490 --> 00:29:27,150
to get another vulnerability<font color="#E5E5E5"> or another</font>

813
00:29:25,200 --> 00:29:30,780
exploit as well which<font color="#E5E5E5"> is kind of cool so</font>

814
00:29:27,150 --> 00:29:32,760
let's<font color="#CCCCCC"> look at some</font><font color="#E5E5E5"> exploits so this</font>

815
00:29:30,780 --> 00:29:34,980
one's really<font color="#E5E5E5"> interesting and for all of</font>

816
00:29:32,760 --> 00:29:36,420
you<font color="#CCCCCC"> that are running on AWS</font><font color="#E5E5E5"> pay</font>

817
00:29:34,980 --> 00:29:37,620
<font color="#E5E5E5">particular attention because you will</font>

818
00:29:36,420 --> 00:29:41,190
<font color="#E5E5E5">probably learn something that you may</font>

819
00:29:37,620 --> 00:29:42,120
not<font color="#E5E5E5"> have known or you may know it and it</font>

820
00:29:41,190 --> 00:29:44,790
was<font color="#E5E5E5"> just novel to me</font>

821
00:29:42,120 --> 00:29:48,000
so attack<font color="#CCCCCC"> step what happened was the</font>

822
00:29:44,790 --> 00:29:49,920
attacker found this URL<font color="#CCCCCC"> funny</font><font color="#E5E5E5"> enough if</font>

823
00:29:48,000 --> 00:29:54,150
you ever see URL equals<font color="#E5E5E5"> in the browser</font>

824
00:29:49,920 --> 00:29:55,980
<font color="#E5E5E5">or</font><font color="#CCCCCC"> in the URL</font><font color="#E5E5E5"> try passing in other URLs</font>

825
00:29:54,150 --> 00:29:57,180
and see what comes<font color="#E5E5E5"> back because</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> can</font>

826
00:29:55,980 --> 00:29:59,370
be<font color="#E5E5E5"> an open to redirect as well but</font>

827
00:29:57,180 --> 00:30:01,080
<font color="#CCCCCC">anyways</font><font color="#E5E5E5"> they found this and they</font><font color="#CCCCCC"> found</font>

828
00:29:59,370 --> 00:30:02,909
<font color="#E5E5E5">that it only loads images so you can see</font>

829
00:30:01,080 --> 00:30:05,040
it's a media preview<font color="#E5E5E5"> function so</font><font color="#CCCCCC"> that</font>

830
00:30:02,910 --> 00:30:08,760
kind of makes<font color="#CCCCCC"> sense but it will</font><font color="#E5E5E5"> only</font>

831
00:30:05,040 --> 00:30:13,050
<font color="#CCCCCC">return back images based on whatever URL</font>

832
00:30:08,760 --> 00:30:15,000
you<font color="#E5E5E5"> pass into that parameter however if</font>

833
00:30:13,050 --> 00:30:18,919
you<font color="#E5E5E5"> just passed it it's just looking for</font>

834
00:30:15,000 --> 00:30:21,150
dot PNG<font color="#E5E5E5"> or another extension like that</font>

835
00:30:18,920 --> 00:30:22,890
<font color="#E5E5E5">which kind of relates back to the last</font>

836
00:30:21,150 --> 00:30:24,420
vulnerability we talked<font color="#CCCCCC"> about where it</font>

837
00:30:22,890 --> 00:30:26,700
was doing a<font color="#CCCCCC"> regular expression for a</font>

838
00:30:24,420 --> 00:30:28,890
<font color="#E5E5E5">specific instance and not checking other</font>

839
00:30:26,700 --> 00:30:30,300
things like<font color="#E5E5E5"> content type so in this case</font>

840
00:30:28,890 --> 00:30:32,250
it was it was<font color="#E5E5E5"> just looking for</font><font color="#CCCCCC"> dot PNG</font>

841
00:30:30,300 --> 00:30:34,310
<font color="#E5E5E5">or something like</font><font color="#CCCCCC"> that and by</font><font color="#E5E5E5"> passing in</font>

842
00:30:32,250 --> 00:30:36,540
this parameter dot PNG it does<font color="#E5E5E5"> nothing</font>

843
00:30:34,310 --> 00:30:38,520
you can just return back this<font color="#E5E5E5"> was the</font>

844
00:30:36,540 --> 00:30:41,010
attackers<font color="#E5E5E5"> website</font><font color="#CCCCCC"> saya org and I left it</font>

845
00:30:38,520 --> 00:30:43,050
in<font color="#E5E5E5"> there just kind of it was it was</font>

846
00:30:41,010 --> 00:30:45,000
<font color="#CCCCCC">there attack so I left</font><font color="#E5E5E5"> it anyways so</font>

847
00:30:43,050 --> 00:30:47,399
<font color="#CCCCCC">they can</font><font color="#E5E5E5"> return back their entire</font><font color="#CCCCCC"> web</font>

848
00:30:45,000 --> 00:30:49,140
<font color="#CCCCCC">site</font><font color="#E5E5E5"> just from this not even in an</font>

849
00:30:47,400 --> 00:30:51,360
iframe it returns<font color="#E5E5E5"> back the whole</font><font color="#CCCCCC"> web</font>

850
00:30:49,140 --> 00:30:52,800
<font color="#CCCCCC">site which gives you a lot of power</font>

851
00:30:51,360 --> 00:30:53,280
<font color="#CCCCCC">because then you</font><font color="#E5E5E5"> could do something</font><font color="#CCCCCC"> like</font>

852
00:30:52,800 --> 00:30:56,040
<font color="#E5E5E5">this</font>

853
00:30:53,280 --> 00:30:58,320
and return back your own cross-site

854
00:30:56,040 --> 00:31:02,220
scripting payload<font color="#CCCCCC"> that you want this</font><font color="#E5E5E5"> is</font>

855
00:30:58,320 --> 00:31:04,980
what<font color="#E5E5E5"> they did</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> not only that they</font>

856
00:31:02,220 --> 00:31:06,180
didn't stop here and<font color="#E5E5E5"> and hey look an</font>

857
00:31:04,980 --> 00:31:07,960
overly permissive regular expression

858
00:31:06,180 --> 00:31:10,480
<font color="#E5E5E5">they didn't stop here</font>

859
00:31:07,960 --> 00:31:11,980
after that they realized<font color="#CCCCCC"> that</font><font color="#E5E5E5"> because it</font>

860
00:31:10,480 --> 00:31:13,779
was hosted on AWS

861
00:31:11,980 --> 00:31:15,429
<font color="#CCCCCC">there is a particular end point</font><font color="#E5E5E5"> that if</font>

862
00:31:13,779 --> 00:31:16,899
you<font color="#E5E5E5"> can reach that end point from a</font>

863
00:31:15,429 --> 00:31:18,940
trusted<font color="#CCCCCC"> source</font><font color="#E5E5E5"> gives you a lot of</font>

864
00:31:16,899 --> 00:31:19,779
<font color="#E5E5E5">information</font><font color="#CCCCCC"> bonus points</font><font color="#E5E5E5"> if</font><font color="#CCCCCC"> you already</font>

865
00:31:18,940 --> 00:31:22,690
have<font color="#E5E5E5"> that in your head and you know</font>

866
00:31:19,779 --> 00:31:24,639
<font color="#E5E5E5">exactly what I'm about to say so did you</font>

867
00:31:22,690 --> 00:31:26,950
know if you query<font color="#E5E5E5"> this IP from an</font><font color="#CCCCCC"> aw</font>

868
00:31:24,639 --> 00:31:28,449
instant AWS instance<font color="#E5E5E5"> it will give you</font>

869
00:31:26,950 --> 00:31:30,730
back<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> got</font><font color="#CCCCCC"> it's basically</font><font color="#E5E5E5"> has a REST</font>

870
00:31:28,450 --> 00:31:33,399
API where you can<font color="#E5E5E5"> query a ton of</font>

871
00:31:30,730 --> 00:31:34,960
<font color="#CCCCCC">information</font><font color="#E5E5E5"> about the server</font><font color="#CCCCCC"> because</font>

872
00:31:33,399 --> 00:31:36,459
<font color="#CCCCCC">it's only only accessible</font><font color="#E5E5E5"> from that</font>

873
00:31:34,960 --> 00:31:39,970
server itself it's only a local<font color="#CCCCCC"> one</font><font color="#E5E5E5"> it's</font>

874
00:31:36,460 --> 00:31:41,559
only<font color="#E5E5E5"> internal behind it</font><font color="#CCCCCC"> but because</font><font color="#E5E5E5"> he</font>

875
00:31:39,970 --> 00:31:43,269
<font color="#CCCCCC">is the attacker was able to</font><font color="#E5E5E5"> make</font><font color="#CCCCCC"> that</font>

876
00:31:41,559 --> 00:31:45,549
server make any<font color="#CCCCCC"> request</font><font color="#E5E5E5"> on his behalf</font>

877
00:31:43,269 --> 00:31:47,980
including<font color="#CCCCCC"> to that internal</font><font color="#E5E5E5"> address he</font>

878
00:31:45,549 --> 00:31:50,559
was<font color="#E5E5E5"> able to access this so for example</font>

879
00:31:47,980 --> 00:31:52,629
they did this<font color="#E5E5E5"> and they got pretty much</font>

880
00:31:50,559 --> 00:31:54,700
<font color="#CCCCCC">everything so some of the metadata is</font>

881
00:31:52,629 --> 00:31:57,369
here I'm going<font color="#E5E5E5"> to iterate</font><font color="#CCCCCC"> through</font><font color="#E5E5E5"> some</font>

882
00:31:54,700 --> 00:31:59,769
of them<font color="#E5E5E5"> ami ID reservation ID local host</font>

883
00:31:57,369 --> 00:32:02,379
<font color="#E5E5E5">name public host name public keys open</font>

884
00:31:59,769 --> 00:32:04,840
SSH keys credential<font color="#CCCCCC"> city credentials by</font>

885
00:32:02,379 --> 00:32:06,908
<font color="#E5E5E5">role security groups user data and on</font>

886
00:32:04,840 --> 00:32:08,289
and on and<font color="#CCCCCC"> on there's a lot</font><font color="#E5E5E5"> in there and</font>

887
00:32:06,909 --> 00:32:10,629
they basically<font color="#E5E5E5"> found all</font><font color="#CCCCCC"> of it</font>

888
00:32:08,289 --> 00:32:12,369
so here's a guy that<font color="#E5E5E5"> you're going to</font>

889
00:32:10,629 --> 00:32:14,259
<font color="#E5E5E5">want to note down</font><font color="#CCCCCC"> if you're</font><font color="#E5E5E5"> running a to</font>

890
00:32:12,369 --> 00:32:16,899
the US this<font color="#E5E5E5"> is some of the functions</font>

891
00:32:14,259 --> 00:32:19,299
that you<font color="#CCCCCC"> can actually call from that at</font>

892
00:32:16,899 --> 00:32:20,709
that<font color="#CCCCCC"> endpoint</font><font color="#E5E5E5"> it's helpful it's really</font>

893
00:32:19,299 --> 00:32:23,590
valuable<font color="#CCCCCC"> if you want to</font><font color="#E5E5E5"> script out some</font>

894
00:32:20,710 --> 00:32:25,119
kind of information about especially<font color="#CCCCCC"> if</font>

895
00:32:23,590 --> 00:32:26,110
you're in like a<font color="#E5E5E5"> DevOps works workspace</font>

896
00:32:25,119 --> 00:32:29,529
where you<font color="#E5E5E5"> need to get more information</font>

897
00:32:26,110 --> 00:32:31,748
<font color="#E5E5E5">about the at the endpoint or the the</font>

898
00:32:29,529 --> 00:32:34,659
instance itself<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is gonna be really</font>

899
00:32:31,749 --> 00:32:38,889
handy<font color="#E5E5E5"> for you let's move on Google</font><font color="#CCCCCC"> Diggs</font>

900
00:32:34,659 --> 00:32:41,710
Google<font color="#E5E5E5"> Google</font><font color="#CCCCCC"> actually had a tool box</font>

901
00:32:38,889 --> 00:32:42,998
<font color="#E5E5E5">where they allowed you to do a whole</font>

902
00:32:41,710 --> 00:32:44,320
<font color="#E5E5E5">bunch of stuff you can</font><font color="#CCCCCC"> just do on your</font>

903
00:32:42,999 --> 00:32:46,960
client anyways but<font color="#E5E5E5"> do</font><font color="#CCCCCC"> it with Google</font>

904
00:32:44,320 --> 00:32:49,149
<font color="#E5E5E5">because it's</font><font color="#CCCCCC"> Google Apps so they have</font>

905
00:32:46,960 --> 00:32:50,679
<font color="#E5E5E5">this spot where was a they could you</font>

906
00:32:49,149 --> 00:32:51,879
<font color="#E5E5E5">could use a tool called</font><font color="#CCCCCC"> Digg Digg is a</font>

907
00:32:50,679 --> 00:32:54,100
command it's usually<font color="#E5E5E5"> built with most</font>

908
00:32:51,879 --> 00:32:55,600
Linux distros I don't even<font color="#E5E5E5"> this</font><font color="#CCCCCC"> windows</font>

909
00:32:54,100 --> 00:32:58,149
have it I<font color="#CCCCCC"> don't I don't</font><font color="#E5E5E5"> use my nose as</font>

910
00:32:55,600 --> 00:33:01,689
much so<font color="#CCCCCC"> Digg basically</font><font color="#E5E5E5"> it allows you to</font>

911
00:32:58,149 --> 00:33:05,110
make your<font color="#CCCCCC"> request</font><font color="#E5E5E5"> or music tool to check</font>

912
00:33:01,690 --> 00:33:06,429
a particular domain<font color="#E5E5E5"> with a name server</font>

913
00:33:05,110 --> 00:33:08,860
<font color="#E5E5E5">that you provide and it will return</font><font color="#CCCCCC"> back</font>

914
00:33:06,429 --> 00:33:12,279
<font color="#CCCCCC">the DNS information</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> that name server</font>

915
00:33:08,860 --> 00:33:13,959
<font color="#E5E5E5">or sorry for that actual</font><font color="#CCCCCC"> ad domain so</font>

916
00:33:12,279 --> 00:33:14,619
they<font color="#E5E5E5"> gave you a web</font><font color="#CCCCCC"> interface to</font><font color="#E5E5E5"> do this</font>

917
00:33:13,960 --> 00:33:18,580
<font color="#E5E5E5">because why not</font>

918
00:33:14,619 --> 00:33:21,490
<font color="#E5E5E5">Google Apps</font><font color="#CCCCCC"> and it returns</font><font color="#E5E5E5"> back</font><font color="#CCCCCC"> the</font>

919
00:33:18,580 --> 00:33:24,220
information<font color="#E5E5E5"> the interesting thing though</font>

920
00:33:21,490 --> 00:33:26,770
if you modify<font color="#E5E5E5"> the request and change</font>

921
00:33:24,220 --> 00:33:29,850
that name server to one<font color="#CCCCCC"> to</font><font color="#E5E5E5"> seven zero</font>

922
00:33:26,770 --> 00:33:32,200
zero<font color="#E5E5E5"> one</font><font color="#CCCCCC"> that's the local host and</font>

923
00:33:29,850 --> 00:33:36,550
<font color="#E5E5E5">Google</font><font color="#CCCCCC"> happen</font><font color="#E5E5E5"> to be running a DNS server</font>

924
00:33:32,200 --> 00:33:39,100
<font color="#CCCCCC">on that web application</font><font color="#E5E5E5"> so what they did</font>

925
00:33:36,550 --> 00:33:40,629
<font color="#E5E5E5">was the attacker could then just keep</font>

926
00:33:39,100 --> 00:33:43,540
making a bunch of requests<font color="#E5E5E5"> to this to</font>

927
00:33:40,630 --> 00:33:46,210
this Google Apps<font color="#E5E5E5"> this</font><font color="#CCCCCC"> Google app and</font>

928
00:33:43,540 --> 00:33:48,760
then with<font color="#CCCCCC"> that internal name server</font>

929
00:33:46,210 --> 00:33:51,730
specified they enumerated<font color="#E5E5E5"> pretty much</font>

930
00:33:48,760 --> 00:33:53,830
all of<font color="#CCCCCC"> Google's internal namespace they</font>

931
00:33:51,730 --> 00:33:56,470
<font color="#CCCCCC">could see every single</font><font color="#E5E5E5"> instance every</font>

932
00:33:53,830 --> 00:33:59,139
domain<font color="#E5E5E5"> every host name inside of Google</font>

933
00:33:56,470 --> 00:33:59,980
<font color="#CCCCCC">and fun</font><font color="#E5E5E5"> fact about this Google is</font>

934
00:33:59,140 --> 00:34:02,650
<font color="#CCCCCC">actually running a minecraft server</font>

935
00:33:59,980 --> 00:34:05,530
<font color="#E5E5E5">inside</font><font color="#CCCCCC"> turn internal network big</font>

936
00:34:02,650 --> 00:34:08,830
<font color="#CCCCCC">surprised</font><font color="#E5E5E5"> so how do you actually test</font>

937
00:34:05,530 --> 00:34:11,050
for<font color="#E5E5E5"> server side request forgery first</font>

938
00:34:08,830 --> 00:34:14,139
off if you<font color="#CCCCCC"> actually see a URL provided</font>

939
00:34:11,050 --> 00:34:15,280
<font color="#CCCCCC">in a request</font><font color="#E5E5E5"> try changing it and again</font>

940
00:34:14,139 --> 00:34:18,159
<font color="#E5E5E5">you can script</font><font color="#CCCCCC"> this out as well with</font>

941
00:34:15,280 --> 00:34:20,440
with burp<font color="#E5E5E5"> I change it to a few of the</font>

942
00:34:18,159 --> 00:34:22,000
<font color="#E5E5E5">following things one try google.com or</font>

943
00:34:20,440 --> 00:34:23,909
another remote URL see if it loads that

944
00:34:22,000 --> 00:34:26,139
<font color="#E5E5E5">or your own domain</font><font color="#CCCCCC"> see if it loads that</font>

945
00:34:23,909 --> 00:34:28,119
another one is<font color="#E5E5E5"> the loopback address like</font>

946
00:34:26,139 --> 00:34:30,460
they did in that on that last example<font color="#CCCCCC"> of</font>

947
00:34:28,119 --> 00:34:31,929
<font color="#E5E5E5">Google try seeing what else is running</font>

948
00:34:30,460 --> 00:34:33,970
<font color="#E5E5E5">on that local server because if you can</font>

949
00:34:31,929 --> 00:34:35,139
<font color="#E5E5E5">make requests on that server it's very</font>

950
00:34:33,969 --> 00:34:36,158
likely that<font color="#E5E5E5"> there's other</font><font color="#CCCCCC"> services</font>

951
00:34:35,139 --> 00:34:38,710
running on<font color="#E5E5E5"> that server because most</font>

952
00:34:36,159 --> 00:34:40,270
people don't have<font color="#CCCCCC"> the money to do a</font>

953
00:34:38,710 --> 00:34:42,070
<font color="#E5E5E5">dedicated instance for every single</font>

954
00:34:40,270 --> 00:34:43,060
<font color="#E5E5E5">service</font><font color="#CCCCCC"> they're running</font><font color="#E5E5E5"> so it's very</font>

955
00:34:42,070 --> 00:34:45,609
possible you're<font color="#CCCCCC"> going to find something</font>

956
00:34:43,060 --> 00:34:47,290
else on<font color="#E5E5E5"> that</font><font color="#CCCCCC"> local server try local IP</font>

957
00:34:45,609 --> 00:34:48,759
see if you can get behind the server<font color="#E5E5E5"> to</font>

958
00:34:47,290 --> 00:34:50,830
the local address or to the local

959
00:34:48,760 --> 00:34:52,480
address space try a different<font color="#E5E5E5"> protocol</font>

960
00:34:50,830 --> 00:34:54,639
<font color="#E5E5E5">this is interesting</font><font color="#CCCCCC"> I will come back to</font>

961
00:34:52,480 --> 00:34:56,590
this in a<font color="#CCCCCC"> little bit but basically when</font>

962
00:34:54,639 --> 00:34:58,210
you're in<font color="#E5E5E5"> your browser if you look at</font>

963
00:34:56,590 --> 00:35:00,730
the URL most of them start with HTTP or

964
00:34:58,210 --> 00:35:02,830
HTTPS but you can actually make requests

965
00:35:00,730 --> 00:35:06,550
<font color="#CCCCCC">with other URL forms such as like</font><font color="#E5E5E5"> file</font>

966
00:35:02,830 --> 00:35:09,279
<font color="#E5E5E5">SSH FTP</font><font color="#CCCCCC"> File in particular will return</font>

967
00:35:06,550 --> 00:35:11,830
back a local file the contents of<font color="#E5E5E5"> a</font>

968
00:35:09,280 --> 00:35:13,420
local file in<font color="#CCCCCC"> your browser so it can be</font>

969
00:35:11,830 --> 00:35:14,799
particularly dangerous if you can if<font color="#CCCCCC"> it</font>

970
00:35:13,420 --> 00:35:16,630
you is an attack or an attacker can

971
00:35:14,800 --> 00:35:18,550
actually use<font color="#E5E5E5"> your server to query the</font>

972
00:35:16,630 --> 00:35:20,170
local files there you can imagine

973
00:35:18,550 --> 00:35:21,520
<font color="#E5E5E5">there's probably some files you don't</font>

974
00:35:20,170 --> 00:35:23,350
<font color="#E5E5E5">want them to see</font>

975
00:35:21,520 --> 00:35:25,750
same with SSH and<font color="#E5E5E5"> FTP there's a lot</font>

976
00:35:23,350 --> 00:35:26,890
there just the<font color="#E5E5E5"> different protocol URLs</font>

977
00:35:25,750 --> 00:35:29,020
is something that a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> mobile</font>

978
00:35:26,890 --> 00:35:30,240
applications use as well so you'll see

979
00:35:29,020 --> 00:35:32,250
like custom

980
00:35:30,240 --> 00:35:34,950
<font color="#E5E5E5">some URL schemes for like for Spotify</font>

981
00:35:32,250 --> 00:35:37,050
for<font color="#E5E5E5"> Twitter</font><font color="#CCCCCC"> a number of other ones where</font>

982
00:35:34,950 --> 00:35:39,299
they little be like I don't know<font color="#E5E5E5"> Spotify</font>

983
00:35:37,050 --> 00:35:40,470
: flash flash something<font color="#E5E5E5"> and it will call</font>

984
00:35:39,300 --> 00:35:41,460
out<font color="#E5E5E5"> their mobile application</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> there</font>

985
00:35:40,470 --> 00:35:42,950
may be other<font color="#CCCCCC"> things you can</font><font color="#E5E5E5"> do there if</font>

986
00:35:41,460 --> 00:35:46,730
you can<font color="#E5E5E5"> find like a mobile app server</font>

987
00:35:42,950 --> 00:35:48,540
just<font color="#CCCCCC"> thing</font><font color="#E5E5E5"> it a lot try different port</font>

988
00:35:46,730 --> 00:35:50,130
<font color="#CCCCCC">similarly to if there's other services</font>

989
00:35:48,540 --> 00:35:52,170
running<font color="#E5E5E5"> on the same box if you try to</font>

990
00:35:50,130 --> 00:35:54,000
report<font color="#E5E5E5"> you can find basically enumerate</font>

991
00:35:52,170 --> 00:35:56,070
<font color="#CCCCCC">every service that's running on that</font><font color="#E5E5E5"> or</font>

992
00:35:54,000 --> 00:35:58,560
if you find another domain or another IP

993
00:35:56,070 --> 00:36:01,170
that's that's reachable<font color="#E5E5E5"> from that server</font>

994
00:35:58,560 --> 00:36:02,759
then<font color="#CCCCCC"> you can then find maybe there's</font>

995
00:36:01,170 --> 00:36:04,770
other<font color="#CCCCCC"> services other than just web</font>

996
00:36:02,760 --> 00:36:06,570
services running<font color="#E5E5E5"> so you can enumerate it</font>

997
00:36:04,770 --> 00:36:08,369
basically turns<font color="#E5E5E5"> this server into nmap</font>

998
00:36:06,570 --> 00:36:11,670
for you but a much<font color="#E5E5E5"> more dumbed down</font>

999
00:36:08,369 --> 00:36:13,110
version<font color="#CCCCCC"> of nmap and like I said Bert</font>

1000
00:36:11,670 --> 00:36:15,720
sweet and true to make<font color="#E5E5E5"> this really</font>

1001
00:36:13,110 --> 00:36:17,100
really<font color="#E5E5E5"> easy if you sort by response</font>

1002
00:36:15,720 --> 00:36:20,279
sizes<font color="#CCCCCC"> it'll be a lot easier</font><font color="#E5E5E5"> to kind of</font>

1003
00:36:17,100 --> 00:36:23,670
catch which things are positive<font color="#E5E5E5"> hits for</font>

1004
00:36:20,280 --> 00:36:24,810
you continued if you have not going<font color="#CCCCCC"> to</font>

1005
00:36:23,670 --> 00:36:28,730
<font color="#E5E5E5">dive in this is gonna take too long but</font>

1006
00:36:24,810 --> 00:36:30,690
if you<font color="#CCCCCC"> have XML external entities</font>

1007
00:36:28,730 --> 00:36:32,310
vulnera<font color="#CCCCCC"> SEC's poit</font>

1008
00:36:30,690 --> 00:36:34,200
then basically<font color="#E5E5E5"> it'll allow if you can</font>

1009
00:36:32,310 --> 00:36:37,980
make a request<font color="#CCCCCC"> to</font><font color="#E5E5E5"> an</font><font color="#CCCCCC"> external URL</font><font color="#E5E5E5"> that's</font>

1010
00:36:34,200 --> 00:36:40,080
also<font color="#E5E5E5"> server side request forgery you can</font>

1011
00:36:37,980 --> 00:36:42,480
check this this one out for more

1012
00:36:40,080 --> 00:36:44,580
information<font color="#E5E5E5"> on that after it's just a</font>

1013
00:36:42,480 --> 00:36:48,359
way<font color="#CCCCCC"> of using multiple</font><font color="#E5E5E5"> exploits together</font>

1014
00:36:44,580 --> 00:36:49,290
<font color="#CCCCCC">oh yes this</font><font color="#E5E5E5"> is a key point</font><font color="#CCCCCC"> here so if</font>

1015
00:36:48,359 --> 00:36:51,750
you<font color="#E5E5E5"> don't have your own server</font><font color="#CCCCCC"> set up</font>

1016
00:36:49,290 --> 00:36:54,480
<font color="#E5E5E5">that you're just just having there just</font>

1017
00:36:51,750 --> 00:36:56,580
to<font color="#E5E5E5"> listen for requests for</font><font color="#CCCCCC"> dis</font>

1018
00:36:54,480 --> 00:36:58,380
<font color="#E5E5E5">vulnerability</font><font color="#CCCCCC"> you can use burps</font>

1019
00:36:56,580 --> 00:36:59,970
<font color="#E5E5E5">collaborator servers as</font><font color="#CCCCCC"> well because</font>

1020
00:36:58,380 --> 00:37:01,500
<font color="#CCCCCC">there they will just</font><font color="#E5E5E5"> provide your free</font>

1021
00:36:59,970 --> 00:37:04,680
servers that will monitor for requests

1022
00:37:01,500 --> 00:37:05,760
to them with unique information<font color="#CCCCCC"> and then</font>

1023
00:37:04,680 --> 00:37:07,799
it will return<font color="#CCCCCC"> back in your burp</font>

1024
00:37:05,760 --> 00:37:09,150
instance<font color="#CCCCCC"> anytime</font><font color="#E5E5E5"> hears back from it even</font>

1025
00:37:07,800 --> 00:37:10,740
if it's like<font color="#E5E5E5"> way down the line let's see</font>

1026
00:37:09,150 --> 00:37:11,820
if like the you get a<font color="#E5E5E5"> vulnerability</font>

1027
00:37:10,740 --> 00:37:13,709
where it's<font color="#E5E5E5"> making a request out and it</font>

1028
00:37:11,820 --> 00:37:15,030
<font color="#E5E5E5">comes back</font><font color="#CCCCCC"> at the</font><font color="#E5E5E5"> logs or something you</font>

1029
00:37:13,710 --> 00:37:17,369
can<font color="#E5E5E5"> still get a</font><font color="#CCCCCC"> little er then</font><font color="#E5E5E5"> so burbs</font>

1030
00:37:15,030 --> 00:37:19,770
collaborator servers are really<font color="#CCCCCC"> useful I</font>

1031
00:37:17,369 --> 00:37:22,200
don't work for burp suite<font color="#E5E5E5"> I promise they</font>

1032
00:37:19,770 --> 00:37:23,460
just make<font color="#CCCCCC"> really</font><font color="#E5E5E5"> good tools so how do</font>

1033
00:37:22,200 --> 00:37:26,790
you<font color="#CCCCCC"> actually defend against herbicide</font>

1034
00:37:23,460 --> 00:37:29,640
request forgery so I mentioned<font color="#E5E5E5"> same</font>

1035
00:37:26,790 --> 00:37:32,910
<font color="#E5E5E5">origin policy</font><font color="#CCCCCC"> remember that it exists</font>

1036
00:37:29,640 --> 00:37:34,379
for<font color="#CCCCCC"> a reason I don't try</font><font color="#E5E5E5"> to use JSON P</font>

1037
00:37:32,910 --> 00:37:35,700
or<font color="#CCCCCC"> server-side workaround</font><font color="#E5E5E5"> so the</font>

1038
00:37:34,380 --> 00:37:37,560
<font color="#CCCCCC">server-side</font><font color="#E5E5E5"> workaround is basically what</font>

1039
00:37:35,700 --> 00:37:38,970
I<font color="#CCCCCC"> just described about</font><font color="#E5E5E5"> making requests</font>

1040
00:37:37,560 --> 00:37:41,070
with your server returning the content

1041
00:37:38,970 --> 00:37:42,450
back to the client<font color="#CCCCCC"> from there</font><font color="#E5E5E5"> however</font>

1042
00:37:41,070 --> 00:37:44,160
<font color="#CCCCCC">you can use something called</font><font color="#E5E5E5"> JSON P</font>

1043
00:37:42,450 --> 00:37:47,189
which<font color="#E5E5E5"> is having chase</font>

1044
00:37:44,160 --> 00:37:49,670
with padding<font color="#CCCCCC"> I came over anyways juice</font>

1045
00:37:47,190 --> 00:37:52,020
<font color="#CCCCCC">um P what it does is basically it</font>

1046
00:37:49,670 --> 00:37:54,900
<font color="#E5E5E5">exploits a situation in your browser</font>

1047
00:37:52,020 --> 00:37:58,830
where your browser can make a request<font color="#E5E5E5"> to</font>

1048
00:37:54,900 --> 00:38:00,450
another domain<font color="#E5E5E5"> for a javascript file</font>

1049
00:37:58,830 --> 00:38:02,310
maybe not for other resources<font color="#CCCCCC"> but</font><font color="#E5E5E5"> for</font>

1050
00:38:00,450 --> 00:38:04,020
<font color="#CCCCCC">JavaScript files they're allowed and so</font>

1051
00:38:02,310 --> 00:38:06,270
what this other server will do is if you

1052
00:38:04,020 --> 00:38:08,490
call a<font color="#E5E5E5"> javascript</font><font color="#CCCCCC"> file at a particular</font>

1053
00:38:06,270 --> 00:38:10,530
<font color="#E5E5E5">particular like you pass in like a</font>

1054
00:38:08,490 --> 00:38:12,120
specific<font color="#CCCCCC"> location it will return back a</font>

1055
00:38:10,530 --> 00:38:14,070
specific function for you so it's a way

1056
00:38:12,120 --> 00:38:16,290
<font color="#CCCCCC">of calling</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> function a dynamic function</font>

1057
00:38:14,070 --> 00:38:18,630
<font color="#E5E5E5">on another server and returning it back</font>

1058
00:38:16,290 --> 00:38:21,630
to you in a more roundabout<font color="#E5E5E5"> way don't do</font>

1059
00:38:18,630 --> 00:38:23,250
it<font color="#E5E5E5"> just like if you can avoid it</font><font color="#CCCCCC"> it will</font>

1060
00:38:21,630 --> 00:38:26,610
lead<font color="#CCCCCC"> to</font><font color="#E5E5E5"> things like server side request</font>

1061
00:38:23,250 --> 00:38:29,280
forgery instead use<font color="#E5E5E5"> cross-origin request</font>

1062
00:38:26,610 --> 00:38:30,930
sharing<font color="#CCCCCC"> course</font><font color="#E5E5E5"> this was made</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> for</font>

1063
00:38:29,280 --> 00:38:33,900
this<font color="#E5E5E5"> reason so if you are able to</font>

1064
00:38:30,930 --> 00:38:36,870
control server domain a.com and b.com

1065
00:38:33,900 --> 00:38:39,090
<font color="#CCCCCC">then you can set up a course rule which</font>

1066
00:38:36,870 --> 00:38:41,100
will allow from<font color="#CCCCCC"> vidcom you will allow a</font>

1067
00:38:39,090 --> 00:38:43,410
<font color="#CCCCCC">comm to make a request for javascript</font>

1068
00:38:41,100 --> 00:38:46,799
CSS whatever so you can actually use

1069
00:38:43,410 --> 00:38:49,140
<font color="#CCCCCC">cores to legitimately request resources</font>

1070
00:38:46,800 --> 00:38:53,760
<font color="#CCCCCC">from another domain and bring it back</font><font color="#E5E5E5"> in</font>

1071
00:38:49,140 --> 00:38:56,250
<font color="#E5E5E5">the client so use that and whitelist</font>

1072
00:38:53,760 --> 00:38:57,750
<font color="#CCCCCC">allow domains of protocols whitelist /</font>

1073
00:38:56,250 --> 00:38:59,400
blacklist<font color="#E5E5E5"> is important I'm going</font><font color="#CCCCCC"> to show</font>

1074
00:38:57,750 --> 00:39:02,220
<font color="#E5E5E5">you why in the next</font><font color="#CCCCCC"> set of slides</font><font color="#E5E5E5"> in</font>

1075
00:38:59,400 --> 00:39:03,480
particular in PHP this is important but

1076
00:39:02,220 --> 00:39:04,560
<font color="#E5E5E5">when you're</font><font color="#CCCCCC"> looking at domains</font><font color="#E5E5E5"> of</font>

1077
00:39:03,480 --> 00:39:07,080
protocols remember I said you<font color="#E5E5E5"> can use</font>

1078
00:39:04,560 --> 00:39:08,670
<font color="#CCCCCC">more than just HTTP when you're thinking</font>

1079
00:39:07,080 --> 00:39:09,900
<font color="#E5E5E5">about what</font><font color="#CCCCCC"> your whitelisting</font><font color="#E5E5E5"> also think</font>

1080
00:39:08,670 --> 00:39:11,190
about<font color="#E5E5E5"> what kind</font><font color="#CCCCCC"> of protocols your</font>

1081
00:39:09,900 --> 00:39:13,020
whitelist<font color="#E5E5E5"> saying if you only need to</font>

1082
00:39:11,190 --> 00:39:15,950
<font color="#E5E5E5">make a request to</font><font color="#CCCCCC"> http which is likely</font>

1083
00:39:13,020 --> 00:39:21,480
or<font color="#CCCCCC"> HTTP try weight lifting that</font><font color="#E5E5E5"> as well</font>

1084
00:39:15,950 --> 00:39:23,399
specifically<font color="#E5E5E5"> and to prevent either ear</font>

1085
00:39:21,480 --> 00:39:25,290
don't<font color="#E5E5E5"> have an internal interface on your</font>

1086
00:39:23,400 --> 00:39:27,690
your server<font color="#E5E5E5"> your web server</font><font color="#CCCCCC"> or whatever</font>

1087
00:39:25,290 --> 00:39:29,850
servers expose the internet or have<font color="#E5E5E5"> some</font>

1088
00:39:27,690 --> 00:39:31,800
kind<font color="#CCCCCC"> of firewall rules severely limiting</font>

1089
00:39:29,850 --> 00:39:33,420
what can access from<font color="#E5E5E5"> the server to the</font>

1090
00:39:31,800 --> 00:39:35,910
internal<font color="#E5E5E5"> network so</font><font color="#CCCCCC"> that if an attacker</font>

1091
00:39:33,420 --> 00:39:37,500
does get<font color="#E5E5E5"> a necessary exploit they then</font>

1092
00:39:35,910 --> 00:39:38,730
cannot enumerate and<font color="#E5E5E5"> access</font><font color="#CCCCCC"> your entire</font>

1093
00:39:37,500 --> 00:39:41,250
<font color="#E5E5E5">internal network which would otherwise</font>

1094
00:39:38,730 --> 00:39:45,510
be safe safely<font color="#E5E5E5"> hidden</font><font color="#CCCCCC"> from the dangerous</font>

1095
00:39:41,250 --> 00:39:47,400
<font color="#CCCCCC">internet and so why</font>

1096
00:39:45,510 --> 00:39:50,670
so I mentioned<font color="#CCCCCC"> whitelisting protocols I</font>

1097
00:39:47,400 --> 00:39:52,380
you get an idea why but in practice<font color="#E5E5E5"> you</font>

1098
00:39:50,670 --> 00:39:54,270
may think oh you know<font color="#E5E5E5"> you can't do this</font>

1099
00:39:52,380 --> 00:39:57,270
with most technologies well that's not

1100
00:39:54,270 --> 00:39:58,050
<font color="#E5E5E5">true because we</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> PHP so PHP actually</font>

1101
00:39:57,270 --> 00:40:02,270
<font color="#E5E5E5">supports the</font>

1102
00:39:58,050 --> 00:40:04,350
protocol URLs<font color="#E5E5E5"> by</font><font color="#CCCCCC"> default there's a lot</font>

1103
00:40:02,270 --> 00:40:06,090
<font color="#CCCCCC">you can find more information there so</font>

1104
00:40:04,350 --> 00:40:07,410
<font color="#CCCCCC">if you're using PHP be very especially</font>

1105
00:40:06,090 --> 00:40:10,320
careful<font color="#E5E5E5"> with protocol URLs that are</font>

1106
00:40:07,410 --> 00:40:10,799
being used<font color="#CCCCCC"> data seems</font><font color="#E5E5E5"> and here's some</font>

1107
00:40:10,320 --> 00:40:12,900
more

1108
00:40:10,800 --> 00:40:14,670
further reading for you I did a blog

1109
00:40:12,900 --> 00:40:16,560
<font color="#CCCCCC">post on I was doing a bunch of</font><font color="#E5E5E5"> open</font>

1110
00:40:14,670 --> 00:40:19,140
<font color="#CCCCCC">source</font><font color="#E5E5E5"> security reviews recently and</font>

1111
00:40:16,560 --> 00:40:21,240
<font color="#E5E5E5">found one where as basically a design</font>

1112
00:40:19,140 --> 00:40:22,589
level<font color="#E5E5E5"> SS RF vulnerability so if you</font>

1113
00:40:21,240 --> 00:40:23,279
check<font color="#E5E5E5"> this out I did a holdat write-up</font>

1114
00:40:22,590 --> 00:40:26,670
on it this will<font color="#CCCCCC"> give you more</font>

1115
00:40:23,280 --> 00:40:29,610
<font color="#CCCCCC">information</font><font color="#E5E5E5"> so let's review all off top</font>

1116
00:40:26,670 --> 00:40:31,590
10 2013<font color="#E5E5E5"> now I'm not going to read</font><font color="#CCCCCC"> this</font>

1117
00:40:29,610 --> 00:40:35,160
<font color="#CCCCCC">to</font><font color="#E5E5E5"> you you can read here's the top 5</font>

1118
00:40:31,590 --> 00:40:37,830
<font color="#E5E5E5">there's the next</font><font color="#CCCCCC"> 5 looking beyond</font><font color="#E5E5E5"> the</font>

1119
00:40:35,160 --> 00:40:39,890
OWASP top 10 we have HTTP parameter

1120
00:40:37,830 --> 00:40:41,940
pollution remember if you pass multiple

1121
00:40:39,890 --> 00:40:44,009
parameters with the<font color="#CCCCCC"> same name different</font>

1122
00:40:41,940 --> 00:40:45,690
values see what happens<font color="#E5E5E5"> it could result</font>

1123
00:40:44,010 --> 00:40:48,450
in anomalies<font color="#E5E5E5"> because different web</font>

1124
00:40:45,690 --> 00:40:50,580
application servers and<font color="#E5E5E5"> technologies</font>

1125
00:40:48,450 --> 00:40:52,680
handle it differently<font color="#E5E5E5"> overly permissive</font>

1126
00:40:50,580 --> 00:40:54,810
regular expression check your reg<font color="#CCCCCC"> axes</font>

1127
00:40:52,680 --> 00:40:56,339
because<font color="#E5E5E5"> if you're using it for</font><font color="#CCCCCC"> axis</font>

1128
00:40:54,810 --> 00:40:58,650
<font color="#E5E5E5">control or input validation which is</font>

1129
00:40:56,340 --> 00:41:00,000
very likely<font color="#E5E5E5"> you've got to make sure that</font>

1130
00:40:58,650 --> 00:41:02,670
it's tuned properly<font color="#E5E5E5"> otherwise it can</font>

1131
00:41:00,000 --> 00:41:05,700
allow<font color="#CCCCCC"> for easy bypasses and server side</font>

1132
00:41:02,670 --> 00:41:07,710
request forgery<font color="#E5E5E5"> be sure when you're</font>

1133
00:41:05,700 --> 00:41:10,200
making requests on behalf<font color="#CCCCCC"> of users that</font>

1134
00:41:07,710 --> 00:41:13,740
you whitelist as much as possible<font color="#CCCCCC"> and</font>

1135
00:41:10,200 --> 00:41:15,299
and<font color="#E5E5E5"> really</font><font color="#CCCCCC"> try not</font><font color="#E5E5E5"> to allow</font><font color="#CCCCCC"> access the</font>

1136
00:41:13,740 --> 00:41:16,649
internal<font color="#CCCCCC"> network because server side</font>

1137
00:41:15,300 --> 00:41:19,350
request forgery basically allows an

1138
00:41:16,650 --> 00:41:23,450
attacker<font color="#CCCCCC"> to make a request anywhere they</font>

1139
00:41:19,350 --> 00:41:25,710
want through your vulnerable machine so

1140
00:41:23,450 --> 00:41:27,569
there's<font color="#CCCCCC"> actually a release candidate for</font>

1141
00:41:25,710 --> 00:41:29,850
a<font color="#E5E5E5"> loss top 10</font><font color="#CCCCCC"> 2017</font><font color="#E5E5E5"> because the last one</font>

1142
00:41:27,570 --> 00:41:31,020
<font color="#E5E5E5">was 2013</font><font color="#CCCCCC"> there's a few changes made</font><font color="#E5E5E5"> to</font>

1143
00:41:29,850 --> 00:41:32,569
<font color="#E5E5E5">it right now it's still in public</font>

1144
00:41:31,020 --> 00:41:35,550
comments so<font color="#E5E5E5"> it's not like it's</font><font color="#CCCCCC"> not firm</font>

1145
00:41:32,570 --> 00:41:37,410
<font color="#CCCCCC">but that should</font><font color="#E5E5E5"> be available in roughly</font>

1146
00:41:35,550 --> 00:41:40,040
July or August because public comments

1147
00:41:37,410 --> 00:41:42,629
are<font color="#CCCCCC"> closed the end of June so soon and</font>

1148
00:41:40,040 --> 00:41:45,420
here's what the changes are<font color="#CCCCCC"> basically</font>

1149
00:41:42,630 --> 00:41:47,940
<font color="#E5E5E5">they added a a for broken access control</font>

1150
00:41:45,420 --> 00:41:51,810
which which combines unsecure direct

1151
00:41:47,940 --> 00:41:54,360
object references<font color="#E5E5E5"> and mixed function</font>

1152
00:41:51,810 --> 00:41:56,190
level<font color="#E5E5E5"> access control so it's a for now</font>

1153
00:41:54,360 --> 00:41:57,480
means broken access control attackers

1154
00:41:56,190 --> 00:42:01,260
can<font color="#CCCCCC"> bypass authentication and</font>

1155
00:41:57,480 --> 00:42:03,210
authorization controls<font color="#CCCCCC"> 87 is incident</font>

1156
00:42:01,260 --> 00:42:05,910
attack protection this<font color="#E5E5E5"> one's kind of</font>

1157
00:42:03,210 --> 00:42:07,260
<font color="#E5E5E5">this one's got a lot</font><font color="#CCCCCC"> of press negative</font>

1158
00:42:05,910 --> 00:42:08,520
press really because<font color="#E5E5E5"> people thought that</font>

1159
00:42:07,260 --> 00:42:10,920
it<font color="#E5E5E5"> shouldn't</font><font color="#CCCCCC"> really fall into it it's</font>

1160
00:42:08,520 --> 00:42:11,759
kind of a catch-all<font color="#E5E5E5"> basically what a 7</font>

1161
00:42:10,920 --> 00:42:14,340
insufficient attack

1162
00:42:11,760 --> 00:42:15,450
section is saying is that<font color="#E5E5E5"> developers</font>

1163
00:42:14,340 --> 00:42:18,330
should<font color="#E5E5E5"> incorporate an automatic</font>

1164
00:42:15,450 --> 00:42:21,509
detection<font color="#CCCCCC"> logging responding and even</font>

1165
00:42:18,330 --> 00:42:22,950
blocking exploit attempts<font color="#CCCCCC"> I don't know</font>

1166
00:42:21,510 --> 00:42:23,970
if it's necessarily a vulnerability<font color="#E5E5E5"> so</font>

1167
00:42:22,950 --> 00:42:24,960
I'm<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to leave it</font><font color="#E5E5E5"> up to you to</font>

1168
00:42:23,970 --> 00:42:26,430
decide whether<font color="#E5E5E5"> this</font><font color="#CCCCCC"> should be in</font><font color="#E5E5E5"> there</font>

1169
00:42:24,960 --> 00:42:27,720
add your comments<font color="#E5E5E5"> whatever look it up</font>

1170
00:42:26,430 --> 00:42:30,120
online there's a lot of<font color="#E5E5E5"> commentary on</font><font color="#CCCCCC"> it</font>

1171
00:42:27,720 --> 00:42:32,430
<font color="#E5E5E5">that's a seven and the last one</font><font color="#CCCCCC"> eight</font>

1172
00:42:30,120 --> 00:42:36,120
<font color="#CCCCCC">ten under protected EAP is basically</font>

1173
00:42:32,430 --> 00:42:37,919
means that<font color="#E5E5E5"> I protect your</font><font color="#CCCCCC"> API S which</font><font color="#E5E5E5"> is</font>

1174
00:42:36,120 --> 00:42:39,779
weird<font color="#E5E5E5"> because</font><font color="#CCCCCC"> all the other off top the</font>

1175
00:42:37,920 --> 00:42:41,460
<font color="#E5E5E5">off</font><font color="#CCCCCC"> sub</font><font color="#E5E5E5"> ten in the past has</font><font color="#CCCCCC"> really</font>

1176
00:42:39,780 --> 00:42:42,810
applied<font color="#E5E5E5"> to API is</font><font color="#CCCCCC"> just as well as web</font>

1177
00:42:41,460 --> 00:42:44,670
applications<font color="#CCCCCC"> so I don't understand where</font>

1178
00:42:42,810 --> 00:42:45,299
they were<font color="#E5E5E5"> going with this but moral of</font>

1179
00:42:44,670 --> 00:42:47,040
the story

1180
00:42:45,300 --> 00:42:48,600
all of these<font color="#CCCCCC"> vulnerabilities I talked</font>

1181
00:42:47,040 --> 00:42:52,410
<font color="#E5E5E5">about still apply even to the new</font>

1182
00:42:48,600 --> 00:42:53,400
<font color="#E5E5E5">version of the</font><font color="#CCCCCC"> oo</font><font color="#E5E5E5"> stop</font><font color="#CCCCCC"> ten so final</font>

1183
00:42:52,410 --> 00:42:57,210
message that I'm going to<font color="#E5E5E5"> leave you</font><font color="#CCCCCC"> with</font>

1184
00:42:53,400 --> 00:42:59,070
<font color="#CCCCCC">is this the OAuth top ten</font><font color="#E5E5E5"> really is a</font>

1185
00:42:57,210 --> 00:43:00,630
<font color="#E5E5E5">good start for developers for someone</font>

1186
00:42:59,070 --> 00:43:02,430
learnt new to<font color="#E5E5E5"> security web application</font>

1187
00:43:00,630 --> 00:43:04,170
security<font color="#E5E5E5"> if they want to learn more but</font>

1188
00:43:02,430 --> 00:43:06,960
there<font color="#E5E5E5"> is so much more than</font><font color="#CCCCCC"> just the</font><font color="#E5E5E5"> off</font>

1189
00:43:04,170 --> 00:43:10,050
top ten and it's really<font color="#CCCCCC"> really important</font>

1190
00:43:06,960 --> 00:43:12,060
that<font color="#E5E5E5"> as a security professional is an</font>

1191
00:43:10,050 --> 00:43:13,410
advocate<font color="#E5E5E5"> for this you should</font><font color="#CCCCCC"> always be</font>

1192
00:43:12,060 --> 00:43:15,450
<font color="#CCCCCC">learning because there is constantly</font>

1193
00:43:13,410 --> 00:43:16,410
going to<font color="#E5E5E5"> be new</font><font color="#CCCCCC"> things coming</font><font color="#E5E5E5"> out</font><font color="#CCCCCC"> there</font>

1194
00:43:15,450 --> 00:43:17,609
could easily be another<font color="#E5E5E5"> five</font>

1195
00:43:16,410 --> 00:43:22,500
vulnerability types<font color="#E5E5E5"> that I talked about</font>

1196
00:43:17,610 --> 00:43:24,150
<font color="#E5E5E5">so moral of the story understand</font><font color="#CCCCCC"> that</font>

1197
00:43:22,500 --> 00:43:25,860
<font color="#CCCCCC">it's a good start but you</font><font color="#E5E5E5"> should always</font>

1198
00:43:24,150 --> 00:43:27,390
be learning<font color="#CCCCCC"> more and</font><font color="#E5E5E5"> I think this is why</font>

1199
00:43:25,860 --> 00:43:28,980
we're<font color="#E5E5E5"> all</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> we're all here</font><font color="#CCCCCC"> because we</font>

1200
00:43:27,390 --> 00:43:32,250
want<font color="#E5E5E5"> to learn more about security</font><font color="#CCCCCC"> keep</font>

1201
00:43:28,980 --> 00:43:33,810
<font color="#E5E5E5">that up because that is what drives the</font>

1202
00:43:32,250 --> 00:43:36,090
<font color="#CCCCCC">security</font><font color="#E5E5E5"> industry that's what makes</font>

1203
00:43:33,810 --> 00:43:38,670
that's what makes us good at protecting

1204
00:43:36,090 --> 00:43:40,290
our applications so you should always be

1205
00:43:38,670 --> 00:43:41,700
<font color="#CCCCCC">able</font><font color="#E5E5E5"> trying</font><font color="#CCCCCC"> to learn more and to help</font>

1206
00:43:40,290 --> 00:43:43,110
you<font color="#E5E5E5"> out with</font><font color="#CCCCCC"> that I provided a few</font>

1207
00:43:41,700 --> 00:43:44,910
<font color="#CCCCCC">resources you can use</font><font color="#E5E5E5"> to keep learning</font>

1208
00:43:43,110 --> 00:43:47,220
<font color="#E5E5E5">these are just some things I found</font>

1209
00:43:44,910 --> 00:43:48,960
recently<font color="#E5E5E5"> too that I use more often to</font>

1210
00:43:47,220 --> 00:43:51,149
actually keep<font color="#E5E5E5"> up to date on security</font>

1211
00:43:48,960 --> 00:43:54,060
vulnerabilities and exploits<font color="#E5E5E5"> one is the</font>

1212
00:43:51,150 --> 00:43:55,920
Activity<font color="#CCCCCC"> Feed so it's a bug bounty</font>

1213
00:43:54,060 --> 00:43:58,380
platform they basically<font color="#E5E5E5"> publish a lot of</font>

1214
00:43:55,920 --> 00:44:00,570
<font color="#CCCCCC">bugs binary reports</font><font color="#E5E5E5"> Twitter is a really</font>

1215
00:43:58,380 --> 00:44:02,310
good place<font color="#E5E5E5"> to this is where I get</font><font color="#CCCCCC"> most</font>

1216
00:44:00,570 --> 00:44:03,240
of my News to be completely honest if

1217
00:44:02,310 --> 00:44:05,640
you're following<font color="#E5E5E5"> the right people you</font>

1218
00:44:03,240 --> 00:44:07,529
can usually catch security issues and

1219
00:44:05,640 --> 00:44:10,170
vulnerabilities and exploits<font color="#CCCCCC"> before</font>

1220
00:44:07,530 --> 00:44:11,250
anyone else<font color="#E5E5E5"> does if</font><font color="#CCCCCC"> your the problem</font>

1221
00:44:10,170 --> 00:44:12,390
<font color="#CCCCCC">with out</font><font color="#E5E5E5"> is you have to kind of curate</font>

1222
00:44:11,250 --> 00:44:14,400
who you're following<font color="#CCCCCC"> to get that</font>

1223
00:44:12,390 --> 00:44:15,990
information<font color="#CCCCCC"> so my advice to you would be</font>

1224
00:44:14,400 --> 00:44:17,250
to<font color="#E5E5E5"> look at who</font><font color="#CCCCCC"> is speaking</font><font color="#E5E5E5"> at this</font>

1225
00:44:15,990 --> 00:44:19,470
<font color="#CCCCCC">conference speaking at other</font><font color="#E5E5E5"> conferences</font>

1226
00:44:17,250 --> 00:44:20,700
follow them see what they follow see who

1227
00:44:19,470 --> 00:44:22,080
they like see who they retweet and

1228
00:44:20,700 --> 00:44:24,419
eventually you'll<font color="#CCCCCC"> just start to build up</font>

1229
00:44:22,080 --> 00:44:25,049
here<font color="#E5E5E5"> who where you get the information</font>

1230
00:44:24,420 --> 00:44:27,930
<font color="#E5E5E5">from</font>

1231
00:44:25,050 --> 00:44:29,580
read it I<font color="#E5E5E5"> don't really use this all</font><font color="#CCCCCC"> at</font>

1232
00:44:27,930 --> 00:44:30,540
<font color="#E5E5E5">often but it's especially beginner</font>

1233
00:44:29,580 --> 00:44:32,970
<font color="#E5E5E5">friendly so if</font><font color="#CCCCCC"> you're</font><font color="#E5E5E5"> looking</font><font color="#CCCCCC"> for</font>

1234
00:44:30,540 --> 00:44:35,040
<font color="#E5E5E5">network</font><font color="#CCCCCC"> security especially</font><font color="#E5E5E5"> kind of</font>

1235
00:44:32,970 --> 00:44:36,480
content<font color="#E5E5E5"> check that out and hacker one</font>

1236
00:44:35,040 --> 00:44:38,100
again they have a zero daily<font color="#CCCCCC"> newsletter</font>

1237
00:44:36,480 --> 00:44:41,880
which just<font color="#E5E5E5"> recently came out</font><font color="#CCCCCC"> I found</font>

1238
00:44:38,100 --> 00:44:46,440
<font color="#E5E5E5">it's actually pretty useful</font><font color="#CCCCCC"> so the point</font>

1239
00:44:41,880 --> 00:44:48,330
here<font color="#CCCCCC"> really is is that if it's a good</font>

1240
00:44:46,440 --> 00:44:50,670
start<font color="#E5E5E5"> but</font><font color="#CCCCCC"> there's so much</font><font color="#E5E5E5"> more and if</font>

1241
00:44:48,330 --> 00:44:52,200
<font color="#E5E5E5">you need help</font><font color="#CCCCCC"> understanding where</font><font color="#E5E5E5"> to</font>

1242
00:44:50,670 --> 00:44:53,730
start<font color="#E5E5E5"> from or where to continue</font><font color="#CCCCCC"> or you</font>

1243
00:44:52,200 --> 00:44:54,930
<font color="#E5E5E5">need other resources or</font><font color="#CCCCCC"> you have any</font>

1244
00:44:53,730 --> 00:44:56,520
<font color="#E5E5E5">questions around the things that I've</font>

1245
00:44:54,930 --> 00:44:58,740
talked about<font color="#E5E5E5"> please</font><font color="#CCCCCC"> feel free to reach</font>

1246
00:44:56,520 --> 00:45:00,210
<font color="#E5E5E5">out I'm I'm always open I'm pretty</font>

1247
00:44:58,740 --> 00:45:01,950
pretty<font color="#E5E5E5"> happy</font><font color="#CCCCCC"> to help</font>

1248
00:45:00,210 --> 00:45:02,760
and if I can't help you then I can

1249
00:45:01,950 --> 00:45:05,399
always<font color="#E5E5E5"> point you to the right person</font>

1250
00:45:02,760 --> 00:45:07,080
<font color="#E5E5E5">that can so I think we're all in this</font>

1251
00:45:05,400 --> 00:45:08,850
together we're all<font color="#E5E5E5"> trying to learn more</font>

1252
00:45:07,080 --> 00:45:09,810
<font color="#E5E5E5">and we want to advance</font><font color="#CCCCCC"> the security</font>

1253
00:45:08,850 --> 00:45:11,850
industry<font color="#E5E5E5"> by learning more and</font>

1254
00:45:09,810 --> 00:45:13,830
understanding that there is so<font color="#CCCCCC"> much out</font>

1255
00:45:11,850 --> 00:45:15,240
<font color="#CCCCCC">there that</font><font color="#E5E5E5"> we still need</font><font color="#CCCCCC"> to know</font><font color="#E5E5E5"> so with</font>

1256
00:45:13,830 --> 00:45:18,890
that<font color="#E5E5E5"> I want to say thank you</font><font color="#CCCCCC"> very much</font>

1257
00:45:15,240 --> 00:45:18,890
and<font color="#E5E5E5"> I appreciate you</font><font color="#CCCCCC"> coming out</font>

1258
00:45:21,690 --> 00:45:23,750
you

