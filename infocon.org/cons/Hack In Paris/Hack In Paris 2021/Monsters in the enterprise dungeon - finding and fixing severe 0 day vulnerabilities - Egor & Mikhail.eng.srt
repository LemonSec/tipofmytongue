1
00:00:01,199 --> 00:00:03,599
hello hacking paris thanks to everyone

2
00:00:03,600 --> 00:00:05,120
who's watching now

3
00:00:05,120 --> 00:00:07,359
in our talk we're gonna analyze several

4
00:00:07,359 --> 00:00:09,519
examples of critical vulnerabilities in

5
00:00:09,519 --> 00:00:11,200
enterprise products

6
00:00:11,200 --> 00:00:13,920
my name is mikhail klushnikov i'm igor

7
00:00:13,920 --> 00:00:16,800
dimitrianko hello everyone

8
00:00:16,800 --> 00:00:19,039
we work at positive technologies and we

9
00:00:19,039 --> 00:00:21,600
are members of the pt's world team our

10
00:00:21,600 --> 00:00:23,600
team does security research in all

11
00:00:23,600 --> 00:00:25,760
industries every our research is

12
00:00:25,760 --> 00:00:28,080
available to the community you can read

13
00:00:28,080 --> 00:00:32,079
about them in our blog or on twitter

14
00:00:32,079 --> 00:00:34,480
we believe that critical vulnerabilities

15
00:00:34,480 --> 00:00:36,559
and enterprise software are like

16
00:00:36,559 --> 00:00:39,280
monsters in intention that can hide for

17
00:00:39,280 --> 00:00:40,160
years

18
00:00:40,160 --> 00:00:42,879
the approach to cope with them

19
00:00:42,879 --> 00:00:45,360
involves the interaction of all sides

20
00:00:45,360 --> 00:00:48,320
researchers vendor and clients

21
00:00:48,320 --> 00:00:50,079
all the vulnerabilities that will be

22
00:00:50,079 --> 00:00:52,399
described in our talk we are responsibly

23
00:00:52,399 --> 00:00:54,480
reported to vmware

24
00:00:54,480 --> 00:00:57,039
vendor has released the page in a timely

25
00:00:57,039 --> 00:01:00,160
manner which minimizes the risks for a

26
00:01:00,160 --> 00:01:02,640
client if he installed the page as soon

27
00:01:02,640 --> 00:01:04,000
as possible

28
00:01:04,000 --> 00:01:06,400
today we present five exciting stories

29
00:01:06,400 --> 00:01:08,240
about critical vulnerabilities in

30
00:01:08,240 --> 00:01:09,920
enterprise products that can be

31
00:01:09,920 --> 00:01:14,560
exploited by unauthenticated users

32
00:01:15,040 --> 00:01:17,040
we are starting our presentation with

33
00:01:17,040 --> 00:01:20,320
the unauthenticated rc in the vmware

34
00:01:20,320 --> 00:01:21,840
vsphere

35
00:01:21,840 --> 00:01:24,400
you probably seen this software on the

36
00:01:24,400 --> 00:01:26,640
internet or in the internal

37
00:01:26,640 --> 00:01:28,400
organization's network

38
00:01:28,400 --> 00:01:30,560
a login page of the web panel can look

39
00:01:30,560 --> 00:01:33,040
different it depends on the vmware with

40
00:01:33,040 --> 00:01:35,520
fair version for example you could see

41
00:01:35,520 --> 00:01:38,560
this this or this login page of

42
00:01:38,560 --> 00:01:39,840
presenter

43
00:01:39,840 --> 00:01:42,079
vsphere and vcenter enable the

44
00:01:42,079 --> 00:01:43,600
virtualization of corporate

45
00:01:43,600 --> 00:01:45,840
infrastructure and provide means of

46
00:01:45,840 --> 00:01:47,520
control over it

47
00:01:47,520 --> 00:01:49,759
while this software can be encountered

48
00:01:49,759 --> 00:01:50,960
on the

49
00:01:50,960 --> 00:01:54,159
parameter in most cases it's located on

50
00:01:54,159 --> 00:01:57,200
internal networks

51
00:01:57,200 --> 00:02:00,240
in february of this year vmware fixed a

52
00:02:00,240 --> 00:02:02,640
critical vulnerability in vcenter that

53
00:02:02,640 --> 00:02:03,840
allowed an

54
00:02:03,840 --> 00:02:07,200
authenticated user to execute shell

55
00:02:07,200 --> 00:02:10,000
commands on the target system

56
00:02:10,000 --> 00:02:12,480
according to threat monitoring at

57
00:02:12,480 --> 00:02:16,239
positive technologies there was over 6

58
00:02:16,239 --> 00:02:19,760
000 vmware recenter devices worldwide

59
00:02:19,760 --> 00:02:22,239
that was accessible from the internet

60
00:02:22,239 --> 00:02:25,840
and contained the rc vulnerability and

61
00:02:25,840 --> 00:02:27,440
most of the servers

62
00:02:27,440 --> 00:02:30,239
were in the usa

63
00:02:30,239 --> 00:02:32,080
during the analysis of the whisper

64
00:02:32,080 --> 00:02:34,640
client we employed both the black box

65
00:02:34,640 --> 00:02:37,040
and the white box approach to testing as

66
00:02:37,040 --> 00:02:39,840
usually focused on the vulnerabilities

67
00:02:39,840 --> 00:02:42,080
that could be exploited without any

68
00:02:42,080 --> 00:02:44,720
authentication from the web panel we

69
00:02:44,720 --> 00:02:46,720
tried to send as many different requests

70
00:02:46,720 --> 00:02:49,760
as possible all without cookies header

71
00:02:49,760 --> 00:02:52,800
after sending an unauthorized request to

72
00:02:52,800 --> 00:02:55,840
slash ui slash rob's login ui rest

73
00:02:55,840 --> 00:02:58,959
services we discovered that it didn't in

74
00:02:58,959 --> 00:03:03,040
fact require any authentication

75
00:03:03,599 --> 00:03:06,319
the web application relies on plugins

76
00:03:06,319 --> 00:03:09,360
usually located in separate java files

77
00:03:09,360 --> 00:03:11,360
for some of its

78
00:03:11,360 --> 00:03:12,400
feature

79
00:03:12,400 --> 00:03:14,560
uh the rob's plugin ui plugin for

80
00:03:14,560 --> 00:03:16,800
example is implemented in the file

81
00:03:16,800 --> 00:03:20,159
rockstar guide ropes plugin service

82
00:03:20,159 --> 00:03:22,159
dot jar

83
00:03:22,159 --> 00:03:24,319
from what we understand each plugin must

84
00:03:24,319 --> 00:03:26,480
specify which of its in the points

85
00:03:26,480 --> 00:03:29,360
require authorization in the web panel

86
00:03:29,360 --> 00:03:33,440
to run and which do not this plugin was

87
00:03:33,440 --> 00:03:35,680
configured to allow unauthenticated

88
00:03:35,680 --> 00:03:39,440
users to access any url it handled

89
00:03:39,440 --> 00:03:42,080
we have started analysing the java files

90
00:03:42,080 --> 00:03:44,319
we are interested in

91
00:03:44,319 --> 00:03:47,360
say upload our function responsible for

92
00:03:47,360 --> 00:03:50,879
the url slash ui slash plugin ui slash

93
00:03:50,879 --> 00:03:53,680
rest slash services slash upload over

94
00:03:53,680 --> 00:03:55,519
picked our interest

95
00:03:55,519 --> 00:03:57,599
the handler for this path performed

96
00:03:57,599 --> 00:03:59,519
following actions

97
00:03:59,519 --> 00:04:01,760
firstly i received a post request with

98
00:04:01,760 --> 00:04:04,080
the upload file parameter

99
00:04:04,080 --> 00:04:06,640
then read and route the content of the

100
00:04:06,640 --> 00:04:11,200
parameter to the input stream variable

101
00:04:11,599 --> 00:04:14,720
open the resulting data asset active

102
00:04:14,720 --> 00:04:17,918
retrieved all the actives entries

103
00:04:17,918 --> 00:04:21,199
and while iterating over all the entries

104
00:04:21,199 --> 00:04:23,759
a copy of each current entry was created

105
00:04:23,759 --> 00:04:26,880
on disk using the file name convention

106
00:04:26,880 --> 00:04:29,600
slash tmp unicorn over there plus entry

107
00:04:29,600 --> 00:04:31,520
name

108
00:04:31,520 --> 00:04:34,160
this was where we noticed that the

109
00:04:34,160 --> 00:04:36,639
names of the tar entries

110
00:04:36,639 --> 00:04:38,960
are not filtered

111
00:04:38,960 --> 00:04:40,639
they are simply concatenated with the

112
00:04:40,639 --> 00:04:44,880
string slash tmp slash unicorn over here

113
00:04:44,880 --> 00:04:46,800
file is created at the resulting

114
00:04:46,800 --> 00:04:48,960
location

115
00:04:48,960 --> 00:04:49,919
this

116
00:04:49,919 --> 00:04:52,479
means we could create an archive entry

117
00:04:52,479 --> 00:04:54,479
containing the string dot dot slash

118
00:04:54,479 --> 00:04:56,560
which would allow us to upload an

119
00:04:56,560 --> 00:04:59,040
arbitrary file to an arbitrary directory

120
00:04:59,040 --> 00:05:00,880
on the server

121
00:05:00,880 --> 00:05:02,880
at this stage we theoretically could

122
00:05:02,880 --> 00:05:04,639
upload arbitrary files to arbitrary

123
00:05:04,639 --> 00:05:07,120
folders and then we needed to find a

124
00:05:07,120 --> 00:05:09,360
place on the system where we could

125
00:05:09,360 --> 00:05:12,320
upload the gsp file and execute it using

126
00:05:12,320 --> 00:05:15,600
a http request from an unauthenticated

127
00:05:15,600 --> 00:05:16,720
user

128
00:05:16,720 --> 00:05:19,039
in our search for a candidate location

129
00:05:19,039 --> 00:05:22,000
the folder starts report in which jsp

130
00:05:22,000 --> 00:05:25,360
file are located looks promising

131
00:05:25,360 --> 00:05:27,840
the check for unauthorized access to gsp

132
00:05:27,840 --> 00:05:30,080
scripts yield success

133
00:05:30,080 --> 00:05:33,840
so you can see it on the slide

134
00:05:34,160 --> 00:05:37,199
let's check whether westward ui user has

135
00:05:37,199 --> 00:05:40,800
write privileges to the directory

136
00:05:40,800 --> 00:05:42,560
and sure enough it does

137
00:05:42,560 --> 00:05:44,880
great now we have upload a specially

138
00:05:44,880 --> 00:05:47,199
crafted gsp file to execute commands on

139
00:05:47,199 --> 00:05:49,600
the system

140
00:05:49,600 --> 00:05:52,400
let's create an archive containing our

141
00:05:52,400 --> 00:05:55,759
craft jsp share payload and send it to

142
00:05:55,759 --> 00:05:59,600
the url that we are studying

143
00:05:59,600 --> 00:06:02,080
we created a gsp script that executes

144
00:06:02,080 --> 00:06:05,600
commands from cmd get parameter

145
00:06:05,600 --> 00:06:07,600
if target windows machine has enabled

146
00:06:07,600 --> 00:06:09,840
windows defender then you need to use

147
00:06:09,840 --> 00:06:12,000
some obfuscation techniques to save a

148
00:06:12,000 --> 00:06:14,400
malicious file on the system

149
00:06:14,400 --> 00:06:17,039
to make a tar active taking advantage of

150
00:06:17,039 --> 00:06:19,280
this quirk we used the aerial arc

151
00:06:19,280 --> 00:06:21,840
utility

152
00:06:22,000 --> 00:06:24,639
the resulting cargive contained a file

153
00:06:24,639 --> 00:06:26,960
with the name with past traversal

154
00:06:26,960 --> 00:06:30,240
so we generated a key result with

155
00:06:30,240 --> 00:06:33,199
our gsp file and uploaded it on the

156
00:06:33,199 --> 00:06:35,120
system

157
00:06:35,120 --> 00:06:37,680
and then we try to invoke the jsp script

158
00:06:37,680 --> 00:06:40,400
through get request with our with the

159
00:06:40,400 --> 00:06:43,759
cmd parameter value as who am i

160
00:06:43,759 --> 00:06:44,720
and

161
00:06:44,720 --> 00:06:47,600
boom we got another ce with nc authority

162
00:06:47,600 --> 00:06:49,120
system privileges

163
00:06:49,120 --> 00:06:50,479
based on the work with this

164
00:06:50,479 --> 00:06:52,880
vulnerability we would like to note two

165
00:06:52,880 --> 00:06:53,919
things

166
00:06:53,919 --> 00:06:56,080
the first it is necessary to combine

167
00:06:56,080 --> 00:06:59,360
both approaches to test to the analysis

168
00:06:59,360 --> 00:07:02,000
of a web application if you have such an

169
00:07:02,000 --> 00:07:03,440
opportunity

170
00:07:03,440 --> 00:07:06,720
the second any parsing of files or

171
00:07:06,720 --> 00:07:09,120
conversion from one context to another

172
00:07:09,120 --> 00:07:11,680
in the application is an important point

173
00:07:11,680 --> 00:07:14,560
since security errors are often possible

174
00:07:14,560 --> 00:07:17,120
here

175
00:07:17,120 --> 00:07:19,520
the next software we will talk about is

176
00:07:19,520 --> 00:07:22,240
the vmware view planner you'll see the

177
00:07:22,240 --> 00:07:26,479
details of an rc from an unsecured user

178
00:07:26,479 --> 00:07:29,199
vmware viewplanner is a utility for

179
00:07:29,199 --> 00:07:31,759
comparing virtual desktop deployment

180
00:07:31,759 --> 00:07:32,960
platforms

181
00:07:32,960 --> 00:07:35,120
new planner generates a measure of

182
00:07:35,120 --> 00:07:37,360
client-side desktop performance for all

183
00:07:37,360 --> 00:07:39,759
desktops being measured on the virtual

184
00:07:39,759 --> 00:07:41,440
desktop platform

185
00:07:41,440 --> 00:07:43,919
the web management interface is uh

186
00:07:43,919 --> 00:07:46,479
available to users after the starting of

187
00:07:46,479 --> 00:07:50,479
the vmware view planner utility

188
00:07:50,479 --> 00:07:53,919
the panel is working on two ports 443

189
00:07:53,919 --> 00:07:56,000
and 80

190
00:07:56,000 --> 00:07:58,400
our analysis has begun with the search

191
00:07:58,400 --> 00:07:59,919
for the processes

192
00:07:59,919 --> 00:08:03,199
that was work on the portfolio for free

193
00:08:03,199 --> 00:08:06,879
and accessible from external network

194
00:08:06,879 --> 00:08:09,120
we executed the command netstat minus

195
00:08:09,120 --> 00:08:12,080
pltm on the system to find out the

196
00:08:12,080 --> 00:08:15,280
process we are interested in

197
00:08:15,280 --> 00:08:19,199
the port 443 is a docker port

198
00:08:19,199 --> 00:08:21,440
next we required to get a list of all

199
00:08:21,440 --> 00:08:23,680
running docker containers and ports used

200
00:08:23,680 --> 00:08:26,639
by them so we executed system commands

201
00:08:26,639 --> 00:08:28,080
docker ps

202
00:08:28,080 --> 00:08:30,319
for getting this information

203
00:08:30,319 --> 00:08:32,159
as it turned out

204
00:08:32,159 --> 00:08:33,360
ports

205
00:08:33,360 --> 00:08:34,719
80 and

206
00:08:34,719 --> 00:08:37,519
443 were forwarded from the docker

207
00:08:37,519 --> 00:08:40,399
container named apache server to the

208
00:08:40,399 --> 00:08:42,479
whole system and available on all

209
00:08:42,479 --> 00:08:44,720
interfaces

210
00:08:44,720 --> 00:08:47,120
it means the web panel that was

211
00:08:47,120 --> 00:08:48,560
accessible to us

212
00:08:48,560 --> 00:08:50,800
at the beginning of the research

213
00:08:50,800 --> 00:08:53,200
was deployed in a container it is

214
00:08:53,200 --> 00:08:55,839
logical that next we got access to the

215
00:08:55,839 --> 00:08:58,480
shell of the apache server container and

216
00:08:58,480 --> 00:09:00,480
found the processes that listen the port

217
00:09:00,480 --> 00:09:02,000
443

218
00:09:02,000 --> 00:09:05,920
it turned out to be in httpd web server

219
00:09:05,920 --> 00:09:09,360
next we analyzed the web server

220
00:09:09,360 --> 00:09:11,839
service config located in the directory

221
00:09:11,839 --> 00:09:13,839
slash etc

222
00:09:13,839 --> 00:09:17,040
httpd slash conf

223
00:09:17,040 --> 00:09:19,440
our attention was called by the line

224
00:09:19,440 --> 00:09:20,240
with

225
00:09:20,240 --> 00:09:21,320
vs

226
00:09:21,320 --> 00:09:24,399
wsgi's crypt alias

227
00:09:24,399 --> 00:09:26,640
which means that pass slash lock upload

228
00:09:26,640 --> 00:09:28,959
is handled by the python script log

229
00:09:28,959 --> 00:09:32,640
upload wsgi dot pi and

230
00:09:32,640 --> 00:09:34,240
what was important

231
00:09:34,240 --> 00:09:37,440
authentication was not required to send

232
00:09:37,440 --> 00:09:40,480
a request to this pass

233
00:09:40,480 --> 00:09:42,880
we have drawn up the small schema for

234
00:09:42,880 --> 00:09:45,440
understanding how the get request for

235
00:09:45,440 --> 00:09:49,040
the pass lock upload has handled

236
00:09:49,040 --> 00:09:52,640
the rtp request comes to the external

237
00:09:52,640 --> 00:09:57,760
80 port on the vmware viewplanner server

238
00:09:57,760 --> 00:10:00,640
the external 80 port is the same port as

239
00:10:00,640 --> 00:10:01,760
the

240
00:10:01,760 --> 00:10:03,920
hd port on the apache server docker

241
00:10:03,920 --> 00:10:05,680
container

242
00:10:05,680 --> 00:10:07,839
the apache server inside the docker

243
00:10:07,839 --> 00:10:12,800
forward http request to wsgi's python

244
00:10:12,800 --> 00:10:15,279
script and the script

245
00:10:15,279 --> 00:10:19,440
log upload wsgi handles requests

246
00:10:19,440 --> 00:10:22,320
next we started analyzing the script log

247
00:10:22,320 --> 00:10:25,120
upload vsji dot pi

248
00:10:25,120 --> 00:10:27,200
this file turned out to be small and

249
00:10:27,200 --> 00:10:28,800
easy to analyze

250
00:10:28,800 --> 00:10:31,200
the application worked as follows

251
00:10:31,200 --> 00:10:34,000
it accept a post request

252
00:10:34,000 --> 00:10:35,600
parsed it

253
00:10:35,600 --> 00:10:39,040
composed a path based on a static string

254
00:10:39,040 --> 00:10:42,000
and received data data

255
00:10:42,000 --> 00:10:44,560
we would like to note that

256
00:10:44,560 --> 00:10:46,640
without any filtering

257
00:10:46,640 --> 00:10:48,560
and then created a file with the

258
00:10:48,560 --> 00:10:50,800
generated early path and the content

259
00:10:50,800 --> 00:10:54,079
that were passed from a request

260
00:10:54,079 --> 00:10:56,399
we were surprised that the received data

261
00:10:56,399 --> 00:10:58,480
is not filtered in any way which means

262
00:10:58,480 --> 00:11:00,320
we can write an arbitrary file to an

263
00:11:00,320 --> 00:11:03,040
arbitrary directory using path traversal

264
00:11:03,040 --> 00:11:04,959
or a feature of the os pass join

265
00:11:04,959 --> 00:11:08,399
function in the python language

266
00:11:08,399 --> 00:11:10,320
we created a python script that could

267
00:11:10,320 --> 00:11:12,959
allow us to execute arbitrary commands

268
00:11:12,959 --> 00:11:14,880
on the server

269
00:11:14,880 --> 00:11:17,040
at this research stage we required to

270
00:11:17,040 --> 00:11:19,839
find a path on the local system to

271
00:11:19,839 --> 00:11:24,000
upload a file which could be executed

272
00:11:24,000 --> 00:11:26,079
without thinking twice we decided to

273
00:11:26,079 --> 00:11:28,480
overwrite the current python script with

274
00:11:28,480 --> 00:11:30,720
content that could allow us to execute

275
00:11:30,720 --> 00:11:34,160
arbitrary commands on the server

276
00:11:34,160 --> 00:11:36,160
to do this we created a python script

277
00:11:36,160 --> 00:11:38,079
with malicious content which received

278
00:11:38,079 --> 00:11:40,480
the command from the post parameter and

279
00:11:40,480 --> 00:11:42,480
executed it

280
00:11:42,480 --> 00:11:44,320
and then we tried to upload it to the

281
00:11:44,320 --> 00:11:46,880
target system

282
00:11:46,880 --> 00:11:48,959
the upload was successful and thus we

283
00:11:48,959 --> 00:11:49,920
got

284
00:11:49,920 --> 00:11:52,000
arbitrary commands execution on the

285
00:11:52,000 --> 00:11:55,040
system with the privileges of apache

286
00:11:55,040 --> 00:11:56,560
user

287
00:11:56,560 --> 00:11:59,279
summing up we noted the following things

288
00:11:59,279 --> 00:12:02,000
the first sometimes you

289
00:12:02,000 --> 00:12:03,680
don't need to search for a folder for

290
00:12:03,680 --> 00:12:06,639
uploading a file you can just overwrite

291
00:12:06,639 --> 00:12:09,360
an existing script and get an rc

292
00:12:09,360 --> 00:12:10,560
and the second

293
00:12:10,560 --> 00:12:12,560
you need to be completely sure on your

294
00:12:12,560 --> 00:12:14,880
exploitation sometimes you only have one

295
00:12:14,880 --> 00:12:16,320
try

296
00:12:16,320 --> 00:12:18,000
thank you mikhail now we're going to the

297
00:12:18,000 --> 00:12:20,480
next software

298
00:12:20,480 --> 00:12:22,800
carbon black it is a part of security

299
00:12:22,800 --> 00:12:24,399
software that's supposed to make the

300
00:12:24,399 --> 00:12:27,519
infrastructure secure

301
00:12:27,760 --> 00:12:29,920
we found a way to bypass an

302
00:12:29,920 --> 00:12:32,160
authentication and get access to an

303
00:12:32,160 --> 00:12:34,959
administrative panel

304
00:12:34,959 --> 00:12:37,680
if you look at architecture of product

305
00:12:37,680 --> 00:12:40,480
we can see the following

306
00:12:40,480 --> 00:12:42,560
there is a fancy processor and void on

307
00:12:42,560 --> 00:12:44,800
the front side which pass the request

308
00:12:44,800 --> 00:12:47,440
further to the internal microservices in

309
00:12:47,440 --> 00:12:48,880
java

310
00:12:48,880 --> 00:12:50,800
pretty much common things

311
00:12:50,800 --> 00:12:53,040
let's open the configuration file for

312
00:12:53,040 --> 00:12:55,440
invoice server

313
00:12:55,440 --> 00:12:57,120
at the first launch on the invoice

314
00:12:57,120 --> 00:12:59,839
server configuration file we notice that

315
00:12:59,839 --> 00:13:03,360
the role-based access control model in

316
00:13:03,360 --> 00:13:07,360
use and come across to an unknown role

317
00:13:07,360 --> 00:13:09,760
called the service user

318
00:13:09,760 --> 00:13:11,519
we notice that his permission is

319
00:13:11,519 --> 00:13:14,160
unlimited

320
00:13:14,560 --> 00:13:17,920
so move on trying to identify the

321
00:13:17,920 --> 00:13:20,480
service user

322
00:13:20,480 --> 00:13:23,279
we examine the java service api and find

323
00:13:23,279 --> 00:13:26,880
there is a way to create json web token

324
00:13:26,880 --> 00:13:27,680
for

325
00:13:27,680 --> 00:13:28,880
so called

326
00:13:28,880 --> 00:13:31,760
service user

327
00:13:32,320 --> 00:13:34,959
interacting with java services we call

328
00:13:34,959 --> 00:13:38,639
this method and get token indeed

329
00:13:38,639 --> 00:13:39,839
we try again

330
00:13:39,839 --> 00:13:41,519
to perform the trick

331
00:13:41,519 --> 00:13:44,480
but from an external network

332
00:13:44,480 --> 00:13:47,120
through the invoice proxy server

333
00:13:47,120 --> 00:13:48,639
and we fail

334
00:13:48,639 --> 00:13:50,480
let's dive into code again and figure

335
00:13:50,480 --> 00:13:53,199
out how the invoice server

336
00:13:53,199 --> 00:13:55,519
handles the roads

337
00:13:55,519 --> 00:13:57,360
here we have to focus on the following

338
00:13:57,360 --> 00:13:59,199
two lines

339
00:13:59,199 --> 00:14:01,600
the first one is a blacklist rule and

340
00:14:01,600 --> 00:14:04,000
the second is white

341
00:14:04,000 --> 00:14:05,680
we need something that matches both

342
00:14:05,680 --> 00:14:09,199
rules some feature of invoice server

343
00:14:09,199 --> 00:14:10,800
and we found one

344
00:14:10,800 --> 00:14:12,639
documentation tell us that invoice

345
00:14:12,639 --> 00:14:15,120
server doesn't normalize characters in

346
00:14:15,120 --> 00:14:18,800
the url by default according to

347
00:14:18,800 --> 00:14:21,439
rfc

348
00:14:21,600 --> 00:14:23,040
in other words

349
00:14:23,040 --> 00:14:26,240
one invoice server pass the request

350
00:14:26,240 --> 00:14:27,600
these two lines

351
00:14:27,600 --> 00:14:28,839
are not

352
00:14:28,839 --> 00:14:31,120
identical so

353
00:14:31,120 --> 00:14:33,199
if you perform your own code of any

354
00:14:33,199 --> 00:14:35,839
characters in a previous example we

355
00:14:35,839 --> 00:14:38,000
could bypass the above rules and

356
00:14:38,000 --> 00:14:42,240
communicate with required api methods

357
00:14:42,240 --> 00:14:43,440
once again

358
00:14:43,440 --> 00:14:46,000
win code s later in the previous url

359
00:14:46,000 --> 00:14:46,959
path

360
00:14:46,959 --> 00:14:51,360
and thus bypass both verifications

361
00:14:51,360 --> 00:14:53,600
perform request and get a super user

362
00:14:53,600 --> 00:14:57,120
json web token in response

363
00:14:57,120 --> 00:15:00,800
so now we are the service user

364
00:15:00,800 --> 00:15:03,680
here is a demo

365
00:15:04,160 --> 00:15:06,480
we're trying to call the initial api

366
00:15:06,480 --> 00:15:07,600
method

367
00:15:07,600 --> 00:15:08,880
but fail

368
00:15:08,880 --> 00:15:11,680
you try again but use your coded ass

369
00:15:11,680 --> 00:15:13,920
later

370
00:15:13,920 --> 00:15:17,839
we receive a token in response

371
00:15:22,720 --> 00:15:26,160
and now trying to call another method to

372
00:15:26,160 --> 00:15:29,600
verify the token

373
00:15:31,600 --> 00:15:32,800
done

374
00:15:32,800 --> 00:15:34,480
we have access

375
00:15:34,480 --> 00:15:38,000
to another api method

376
00:15:38,399 --> 00:15:40,959
and what was that

377
00:15:40,959 --> 00:15:42,800
it was just a masculation and

378
00:15:42,800 --> 00:15:46,240
incoherence of two servers

379
00:15:46,240 --> 00:15:47,920
for the last few years

380
00:15:47,920 --> 00:15:50,959
the rhodes researchers and cves

381
00:15:50,959 --> 00:15:53,279
related to the problem of incoherence

382
00:15:53,279 --> 00:15:56,240
between servers

383
00:15:56,240 --> 00:15:57,279
so

384
00:15:57,279 --> 00:16:00,079
the documentation is a clue it shouldn't

385
00:16:00,079 --> 00:16:03,199
be overlooked because it is the only way

386
00:16:03,199 --> 00:16:07,439
to avoid this type of vulnerability

387
00:16:07,519 --> 00:16:09,600
so the next software monitoring and

388
00:16:09,600 --> 00:16:12,800
control the virtual infrastructure

389
00:16:12,800 --> 00:16:15,600
as a result of research we have found a

390
00:16:15,600 --> 00:16:17,440
vulnerability chain that consists of

391
00:16:17,440 --> 00:16:20,240
free status and lead to remote code

392
00:16:20,240 --> 00:16:22,560
execution

393
00:16:22,560 --> 00:16:25,360
we'll look at vulnerabilities separately

394
00:16:25,360 --> 00:16:27,519
in order to emphasize the role of a

395
00:16:27,519 --> 00:16:30,560
specific vulnerability as the element of

396
00:16:30,560 --> 00:16:31,680
chain

397
00:16:31,680 --> 00:16:34,880
we're going to start with the ssrf

398
00:16:34,880 --> 00:16:39,759
which means server site requests forgery

399
00:16:39,759 --> 00:16:42,160
we started examining public api and came

400
00:16:42,160 --> 00:16:44,560
across the interesting methods which

401
00:16:44,560 --> 00:16:47,040
return fingerprints of notes by their

402
00:16:47,040 --> 00:16:49,360
address

403
00:16:49,360 --> 00:16:51,920
passing out a remote address we got a

404
00:16:51,920 --> 00:16:56,399
request to our netcat server

405
00:16:56,800 --> 00:17:00,880
at the next step we launch https 0 and

406
00:17:00,880 --> 00:17:03,440
figure out that we also can control the

407
00:17:03,440 --> 00:17:04,400
url

408
00:17:04,400 --> 00:17:06,000
path of

409
00:17:06,000 --> 00:17:07,919
ssrf

410
00:17:07,919 --> 00:17:12,319
by passing question mark in url

411
00:17:12,799 --> 00:17:15,359
so at that point we were able to perform

412
00:17:15,359 --> 00:17:17,839
any get request by means of vulnerable

413
00:17:17,839 --> 00:17:20,480
application

414
00:17:21,039 --> 00:17:24,559
we started digging into internal api to

415
00:17:24,559 --> 00:17:27,359
figure out if we can catch anything

416
00:17:27,359 --> 00:17:29,918
worthwhile

417
00:17:30,559 --> 00:17:33,440
in this way we manage to receive hash of

418
00:17:33,440 --> 00:17:35,039
an administrator

419
00:17:35,039 --> 00:17:36,960
by abusing password replication

420
00:17:36,960 --> 00:17:39,840
functionality

421
00:17:40,160 --> 00:17:43,600
user admin is also associated with a

422
00:17:43,600 --> 00:17:47,600
system user on server if we restore the

423
00:17:47,600 --> 00:17:48,720
password

424
00:17:48,720 --> 00:17:51,679
we able to connect with its user body

425
00:17:51,679 --> 00:17:53,440
ssh

426
00:17:53,440 --> 00:17:56,720
in case it is enabled and doesn't use

427
00:17:56,720 --> 00:18:00,520
key based authentication

428
00:18:01,120 --> 00:18:04,000
password was sorted and hedged by ssa

429
00:18:04,000 --> 00:18:05,039
function

430
00:18:05,039 --> 00:18:07,280
so it wasn't too complicated to restore

431
00:18:07,280 --> 00:18:10,160
it from hash

432
00:18:11,200 --> 00:18:13,039
it's also about to say

433
00:18:13,039 --> 00:18:15,280
that the best practice is to use

434
00:18:15,280 --> 00:18:18,320
so-called slow hash functions

435
00:18:18,320 --> 00:18:20,480
especially when we talk about

436
00:18:20,480 --> 00:18:23,200
the administrative user

437
00:18:23,200 --> 00:18:24,240
of course

438
00:18:24,240 --> 00:18:26,400
there also can be cracked

439
00:18:26,400 --> 00:18:28,720
but as they are designed to be

440
00:18:28,720 --> 00:18:30,240
inefficient

441
00:18:30,240 --> 00:18:34,880
it requires more effort to restore them

442
00:18:34,880 --> 00:18:37,360
this approach has a high probability to

443
00:18:37,360 --> 00:18:40,559
obtain administrative control on sorrow

444
00:18:40,559 --> 00:18:44,880
but is this something more guaranteed

445
00:18:44,880 --> 00:18:47,039
let us look more closely at how the

446
00:18:47,039 --> 00:18:50,720
application handle requests

447
00:18:51,039 --> 00:18:53,120
we see that application crafts and you

448
00:18:53,120 --> 00:18:55,760
get quests from our parameters

449
00:18:55,760 --> 00:18:58,320
but how to get an access to the private

450
00:18:58,320 --> 00:19:00,880
api methods which requires an

451
00:19:00,880 --> 00:19:03,600
application

452
00:19:03,600 --> 00:19:05,679
there are a few mechanisms that could

453
00:19:05,679 --> 00:19:08,400
allow it but in this specific case

454
00:19:08,400 --> 00:19:10,480
chosen implementations wasn't secure

455
00:19:10,480 --> 00:19:12,160
enough

456
00:19:12,160 --> 00:19:15,600
so every time the runable api method was

457
00:19:15,600 --> 00:19:16,640
called

458
00:19:16,640 --> 00:19:20,080
application send http request

459
00:19:20,080 --> 00:19:24,559
with basic authentications in the header

460
00:19:24,559 --> 00:19:27,200
as for credentials the maintenance

461
00:19:27,200 --> 00:19:30,480
administrator user was used

462
00:19:30,480 --> 00:19:34,559
it's a super user in this application

463
00:19:34,559 --> 00:19:35,520
so

464
00:19:35,520 --> 00:19:38,480
there was only one credentials for each

465
00:19:38,480 --> 00:19:42,400
internal htcp request

466
00:19:42,559 --> 00:19:44,000
it's easier for us to ask the

467
00:19:44,000 --> 00:19:46,880
application to visit our remote server

468
00:19:46,880 --> 00:19:50,000
where we can steal the headers from an

469
00:19:50,000 --> 00:19:55,120
http request we set up our ssl server

470
00:19:55,120 --> 00:19:58,000
and seal the credentials by setting

471
00:19:58,000 --> 00:20:00,799
us as a ref to our eagle server

472
00:20:00,799 --> 00:20:03,760
which parses incoming headers

473
00:20:03,760 --> 00:20:06,080
we may see the request headers in the

474
00:20:06,080 --> 00:20:07,280
response

475
00:20:07,280 --> 00:20:08,400
and

476
00:20:08,400 --> 00:20:11,360
in our server logs

477
00:20:11,360 --> 00:20:15,600
so now we become a super user

478
00:20:16,400 --> 00:20:18,960
in order to escalate these findings to

479
00:20:18,960 --> 00:20:20,960
remote code execution

480
00:20:20,960 --> 00:20:22,960
there are two ways

481
00:20:22,960 --> 00:20:25,600
the first one is too rough and may lead

482
00:20:25,600 --> 00:20:26,480
to

483
00:20:26,480 --> 00:20:29,679
non-functioning because we need to reset

484
00:20:29,679 --> 00:20:32,240
administrator password

485
00:20:32,240 --> 00:20:34,880
the second way is more gentle because we

486
00:20:34,880 --> 00:20:37,360
found a path reversal vulnerability

487
00:20:37,360 --> 00:20:39,760
which led to arbitrary file uploading

488
00:20:39,760 --> 00:20:41,280
and eventually to

489
00:20:41,280 --> 00:20:44,720
remote code execution

490
00:20:44,720 --> 00:20:48,080
here is example of the first approach

491
00:20:48,080 --> 00:20:51,200
by the way if you're an ethical hacker

492
00:20:51,200 --> 00:20:53,120
we don't recommend you use this method

493
00:20:53,120 --> 00:20:55,120
on two clients

494
00:20:55,120 --> 00:20:57,280
we perform administrator password result

495
00:20:57,280 --> 00:21:00,159
and because there is the same name user

496
00:21:00,159 --> 00:21:01,440
on the server

497
00:21:01,440 --> 00:21:04,400
we simultaneously change his system

498
00:21:04,400 --> 00:21:06,880
password too

499
00:21:06,880 --> 00:21:10,559
we enable an ssh service and thus

500
00:21:10,559 --> 00:21:12,880
get access to server

501
00:21:12,880 --> 00:21:17,240
true ssh client

502
00:21:18,400 --> 00:21:20,559
for the second way which was mentioned

503
00:21:20,559 --> 00:21:23,280
as gentleway we found an api method

504
00:21:23,280 --> 00:21:25,840
vulnerable to puff traversal and file

505
00:21:25,840 --> 00:21:27,840
upload functionality

506
00:21:27,840 --> 00:21:30,159
it means that we could upload any file

507
00:21:30,159 --> 00:21:33,679
in any arbitrary directory

508
00:21:33,679 --> 00:21:36,559
so we use it to upload a web shell into

509
00:21:36,559 --> 00:21:39,120
web directory and get remote code

510
00:21:39,120 --> 00:21:42,239
execution again

511
00:21:43,520 --> 00:21:45,760
here's the main idea that even a

512
00:21:45,760 --> 00:21:48,799
vulnerability with low severity may go

513
00:21:48,799 --> 00:21:50,080
off

514
00:21:50,080 --> 00:21:54,080
so take care of all of them

515
00:21:54,400 --> 00:21:57,360
we move on to our last story

516
00:21:57,360 --> 00:21:59,919
first of all we would like to emphasize

517
00:21:59,919 --> 00:22:03,200
that this software was almost retired

518
00:22:03,200 --> 00:22:05,760
by despite of that vander released a

519
00:22:05,760 --> 00:22:09,120
patch in a few months without any excuse

520
00:22:09,120 --> 00:22:11,520
we really appreciate it

521
00:22:11,520 --> 00:22:13,760
this is a software for analytics and

522
00:22:13,760 --> 00:22:16,080
measures in infrastructure

523
00:22:16,080 --> 00:22:18,159
and we found an update functionality

524
00:22:18,159 --> 00:22:20,720
without any authorization and

525
00:22:20,720 --> 00:22:23,679
authentication

526
00:22:23,679 --> 00:22:26,480
moreover the administrator code set

527
00:22:26,480 --> 00:22:28,880
custom repositories

528
00:22:28,880 --> 00:22:30,640
the update mechanism was based on

529
00:22:30,640 --> 00:22:32,400
manifest files

530
00:22:32,400 --> 00:22:36,000
we described how the update will proceed

531
00:22:36,000 --> 00:22:38,159
the pause install script and print

532
00:22:38,159 --> 00:22:39,520
source script

533
00:22:39,520 --> 00:22:42,240
fields describes system commands

534
00:22:42,240 --> 00:22:45,280
which are instituted during the update

535
00:22:45,280 --> 00:22:47,440
this is a place where malicious code can

536
00:22:47,440 --> 00:22:50,159
be placed

537
00:22:50,960 --> 00:22:52,799
the update process consists of three

538
00:22:52,799 --> 00:22:54,559
steps

539
00:22:54,559 --> 00:22:56,880
if there is manifest file in the remote

540
00:22:56,880 --> 00:22:57,840
server

541
00:22:57,840 --> 00:23:00,880
it will be downloaded and used in the

542
00:23:00,880 --> 00:23:03,440
update

543
00:23:03,840 --> 00:23:06,240
the only challenge we had

544
00:23:06,240 --> 00:23:08,720
was a signature mechanism

545
00:23:08,720 --> 00:23:10,720
the application wanted to see the

546
00:23:10,720 --> 00:23:13,280
signature of manifest file in order to

547
00:23:13,280 --> 00:23:16,399
start update

548
00:23:16,880 --> 00:23:19,039
lack of time didn't allow us to solve

549
00:23:19,039 --> 00:23:20,640
this problem fast

550
00:23:20,640 --> 00:23:24,480
so we just found a way to bypass this

551
00:23:24,480 --> 00:23:27,280
verification

552
00:23:27,280 --> 00:23:30,240
if we open the source code we can notice

553
00:23:30,240 --> 00:23:32,880
that the parameter url isn't properly

554
00:23:32,880 --> 00:23:34,480
parsed

555
00:23:34,480 --> 00:23:36,480
and is used as is

556
00:23:36,480 --> 00:23:38,640
we see that we can inject new fields

557
00:23:38,640 --> 00:23:41,120
into the xml

558
00:23:41,120 --> 00:23:43,919
this xml file is responsible for

559
00:23:43,919 --> 00:23:46,880
pointing to remote repository

560
00:23:46,880 --> 00:23:51,840
and tells how to communicate with it

561
00:23:52,080 --> 00:23:55,279
we set a http request

562
00:23:55,279 --> 00:23:58,559
passing url parameter and injecting an

563
00:23:58,559 --> 00:24:01,200
additional property which tells the

564
00:24:01,200 --> 00:24:04,640
application to disable the verification

565
00:24:04,640 --> 00:24:06,799
as a result

566
00:24:06,799 --> 00:24:11,279
signature verification was disabled

567
00:24:11,919 --> 00:24:15,120
putting it all together

568
00:24:15,120 --> 00:24:17,840
first of all we create custom repository

569
00:24:17,840 --> 00:24:19,760
on the remote server

570
00:24:19,760 --> 00:24:23,440
we just need to set up the http server

571
00:24:23,440 --> 00:24:26,400
that contain the manifest file

572
00:24:26,400 --> 00:24:28,240
at the second step we create the

573
00:24:28,240 --> 00:24:30,240
manifest file

574
00:24:30,240 --> 00:24:33,279
and upload it into the web directory of

575
00:24:33,279 --> 00:24:36,240
our repository server

576
00:24:36,240 --> 00:24:38,720
in manifest file we write the code which

577
00:24:38,720 --> 00:24:40,720
will be executed on the vulnerable

578
00:24:40,720 --> 00:24:43,200
server

579
00:24:43,600 --> 00:24:45,679
so the next step we set the remote

580
00:24:45,679 --> 00:24:49,360
repository url and disable the signature

581
00:24:49,360 --> 00:24:52,158
verification

582
00:24:53,120 --> 00:24:54,640
at the next step

583
00:24:54,640 --> 00:24:57,600
we send http requests and tell the

584
00:24:57,600 --> 00:25:01,840
application perform their update

585
00:25:02,640 --> 00:25:03,679
so

586
00:25:03,679 --> 00:25:04,960
as a result

587
00:25:04,960 --> 00:25:08,320
common from manifest file is executed

588
00:25:08,320 --> 00:25:13,039
and we get remote code execution

589
00:25:13,440 --> 00:25:18,000
here is a demonstration of exploitation

590
00:25:18,400 --> 00:25:20,960
in this demo we copy a shadow file into

591
00:25:20,960 --> 00:25:22,799
the web directory

592
00:25:22,799 --> 00:25:24,320
so

593
00:25:24,320 --> 00:25:26,559
prepare our manifest configuration

594
00:25:26,559 --> 00:25:30,240
set the last version

595
00:25:32,320 --> 00:25:34,400
and the next step we're going to set up

596
00:25:34,400 --> 00:25:37,640
the repository

597
00:25:43,760 --> 00:25:47,440
set out custom repository

598
00:25:48,960 --> 00:25:51,440
verify

599
00:25:53,039 --> 00:25:57,320
and start to install

600
00:26:00,559 --> 00:26:03,919
and it's done we copied a shadow file

601
00:26:03,919 --> 00:26:07,360
into the web directory

602
00:26:09,039 --> 00:26:10,720
the key point here

603
00:26:10,720 --> 00:26:13,120
is that the old software must be

604
00:26:13,120 --> 00:26:16,000
maintained till the end don't forget

605
00:26:16,000 --> 00:26:18,159
about it towards the last story we

606
00:26:18,159 --> 00:26:19,600
wanted to tell

607
00:26:19,600 --> 00:26:21,679
in conclusion we like to note important

608
00:26:21,679 --> 00:26:23,840
points which were discovered during our

609
00:26:23,840 --> 00:26:24,880
work

610
00:26:24,880 --> 00:26:27,200
and which are fundamental in making

611
00:26:27,200 --> 00:26:30,000
worlds more secure

612
00:26:30,000 --> 00:26:32,240
first of all each party have to act

613
00:26:32,240 --> 00:26:33,440
together

614
00:26:33,440 --> 00:26:35,279
social should make a responsible report

615
00:26:35,279 --> 00:26:36,559
to render

616
00:26:36,559 --> 00:26:39,279
when they have to provide price in time

617
00:26:39,279 --> 00:26:41,840
and to be open to researchers

618
00:26:41,840 --> 00:26:43,760
clients are also responsible for

619
00:26:43,760 --> 00:26:46,400
software they use

620
00:26:46,400 --> 00:26:48,480
have to check for updates and timely

621
00:26:48,480 --> 00:26:50,240
install them

622
00:26:50,240 --> 00:26:52,960
in our opinion it is the only way for

623
00:26:52,960 --> 00:26:55,039
safety

624
00:26:55,039 --> 00:26:57,600
and at the second point we like to

625
00:26:57,600 --> 00:26:59,840
emphasize the following

626
00:26:59,840 --> 00:27:02,400
many security fixes by render doesn't

627
00:27:02,400 --> 00:27:05,120
always mean a best software

628
00:27:05,120 --> 00:27:06,640
but the opposite

629
00:27:06,640 --> 00:27:08,640
that cares about clients and their

630
00:27:08,640 --> 00:27:10,880
security

631
00:27:10,880 --> 00:27:13,520
and that's all we had for you today

632
00:27:13,520 --> 00:27:14,880
we want to thank

633
00:27:14,880 --> 00:27:17,279
greenware and their security team for

634
00:27:17,279 --> 00:27:18,840
responsible

635
00:27:18,840 --> 00:27:21,520
cooperation and of course thank you

636
00:27:21,520 --> 00:27:26,279
paris for letting us share our stories

