1
00:00:01,040 --> 00:00:02,720
greetings everyone

2
00:00:02,720 --> 00:00:04,640
we are very excited to be here with you

3
00:00:04,640 --> 00:00:07,440
today at hack in paris this is holding

4
00:00:07,440 --> 00:00:10,480
the stick at both ends fuzzing the rdp

5
00:00:10,480 --> 00:00:13,200
client and server and before we start

6
00:00:13,200 --> 00:00:15,280
let me just have a quick word about

7
00:00:15,280 --> 00:00:18,640
ourselves um so my name is shaked raynor

8
00:00:18,640 --> 00:00:21,119
and i'm a security researcher at cyborg

9
00:00:21,119 --> 00:00:22,000
labs

10
00:00:22,000 --> 00:00:24,400
and with me today i have orbin porat who

11
00:00:24,400 --> 00:00:26,160
is also a security researcher in my

12
00:00:26,160 --> 00:00:27,039
group

13
00:00:27,039 --> 00:00:29,119
and we are here to tell you about our

14
00:00:29,119 --> 00:00:32,558
journey of fuzzing rdp

15
00:00:32,558 --> 00:00:34,960
our agenda for this presentation will be

16
00:00:34,960 --> 00:00:36,719
as follows

17
00:00:36,719 --> 00:00:38,320
first we're going to talk about our

18
00:00:38,320 --> 00:00:40,480
motivation and we will provide some of

19
00:00:40,480 --> 00:00:43,680
the basics of rdp that will be necessary

20
00:00:43,680 --> 00:00:46,399
for our fuzzing efforts

21
00:00:46,399 --> 00:00:48,559
then we'll jump right to the deep water

22
00:00:48,559 --> 00:00:50,719
and start to build our fuzzing

23
00:00:50,719 --> 00:00:52,719
environment from the ground up

24
00:00:52,719 --> 00:00:54,719
uh we'll explain what made this fuzzing

25
00:00:54,719 --> 00:00:56,640
target unique and

26
00:00:56,640 --> 00:00:59,600
how we were able to finally fuss that

27
00:00:59,600 --> 00:01:01,199
after that we will talk about the

28
00:01:01,199 --> 00:01:03,359
results of our journey and of course we

29
00:01:03,359 --> 00:01:05,199
will dissect one of the issues that we

30
00:01:05,199 --> 00:01:07,439
were able to find in rdp

31
00:01:07,439 --> 00:01:09,920
um and finally we'll have a mandatory

32
00:01:09,920 --> 00:01:11,600
summary session

33
00:01:11,600 --> 00:01:13,920
and we will discuss some future work

34
00:01:13,920 --> 00:01:17,119
opportunities in that area

35
00:01:17,119 --> 00:01:19,439
so without any further ado let's start

36
00:01:19,439 --> 00:01:22,000
right in with rdp

37
00:01:22,000 --> 00:01:24,320
all right so this is what the end user

38
00:01:24,320 --> 00:01:27,360
usually knows as rdp or the remote

39
00:01:27,360 --> 00:01:29,360
desktop protocol

40
00:01:29,360 --> 00:01:31,759
we probably all know this flow you need

41
00:01:31,759 --> 00:01:34,000
to access a remote windows machine so

42
00:01:34,000 --> 00:01:36,320
you fire up mstsc.exe

43
00:01:36,320 --> 00:01:38,640
and you get right to it

44
00:01:38,640 --> 00:01:41,680
but we as we are soon to find out um

45
00:01:41,680 --> 00:01:43,439
there is plenty that is going on behind

46
00:01:43,439 --> 00:01:46,000
the scenes of rdp in order to make this

47
00:01:46,000 --> 00:01:48,640
remote connection possible but before we

48
00:01:48,640 --> 00:01:50,880
can get into that let's talk about the

49
00:01:50,880 --> 00:01:53,119
motivation for this project

50
00:01:53,119 --> 00:01:55,600
so using a simple showdown query

51
00:01:55,600 --> 00:01:57,680
we see that there are more than 5

52
00:01:57,680 --> 00:02:00,960
million rdp servers exposed to the

53
00:02:00,960 --> 00:02:02,799
internet alone

54
00:02:02,799 --> 00:02:04,799
um and as you may imagine there are

55
00:02:04,799 --> 00:02:07,439
probably plenty more behind firewalls

56
00:02:07,439 --> 00:02:10,160
and inside internal network

57
00:02:10,160 --> 00:02:13,440
and it is clear that rdp is widely used

58
00:02:13,440 --> 00:02:15,520
by windows users

59
00:02:15,520 --> 00:02:18,160
um so how can this serve

60
00:02:18,160 --> 00:02:19,440
an attacker

61
00:02:19,440 --> 00:02:22,480
mainly there are two attack vectors

62
00:02:22,480 --> 00:02:24,400
the first one is the more traditional

63
00:02:24,400 --> 00:02:26,319
quote-unquote vector

64
00:02:26,319 --> 00:02:28,080
in which the attacker is trying to get

65
00:02:28,080 --> 00:02:31,599
access into an internal network

66
00:02:31,599 --> 00:02:34,080
there is an rdp server in this network

67
00:02:34,080 --> 00:02:36,400
that is exposed to the internet

68
00:02:36,400 --> 00:02:38,480
but the attacker doesn't have any

69
00:02:38,480 --> 00:02:42,080
credentials for it for obvious reasons

70
00:02:42,080 --> 00:02:44,000
the attacker can then exploit a

71
00:02:44,000 --> 00:02:46,959
vulnerability potentially vulnerability

72
00:02:46,959 --> 00:02:50,160
in the rdp server and use it to gain

73
00:02:50,160 --> 00:02:52,959
unauthorized access to the server and

74
00:02:52,959 --> 00:02:56,160
from there to the entire network

75
00:02:56,160 --> 00:02:57,040
um

76
00:02:57,040 --> 00:02:57,840
so

77
00:02:57,840 --> 00:03:00,400
going to the other vector the second one

78
00:03:00,400 --> 00:03:03,599
it is not as common um and it targets

79
00:03:03,599 --> 00:03:05,519
the rdp client

80
00:03:05,519 --> 00:03:07,280
um here we have an attacker who was

81
00:03:07,280 --> 00:03:09,920
already able to gain access into some

82
00:03:09,920 --> 00:03:12,319
server or a virtual machine

83
00:03:12,319 --> 00:03:14,319
um and they can wait for an

84
00:03:14,319 --> 00:03:17,120
administrator to connect to the server

85
00:03:17,120 --> 00:03:20,080
and then exploit a vulnerability in the

86
00:03:20,080 --> 00:03:22,959
rdp client which will allow them to gain

87
00:03:22,959 --> 00:03:25,120
their privileges the administrator's

88
00:03:25,120 --> 00:03:27,680
privileges and effectively execute code

89
00:03:27,680 --> 00:03:29,120
on their machine

90
00:03:29,120 --> 00:03:30,959
now these two attack vectors are not

91
00:03:30,959 --> 00:03:33,040
merely theoretical

92
00:03:33,040 --> 00:03:34,720
there have been some real life examples

93
00:03:34,720 --> 00:03:37,519
for both of them in the last few years

94
00:03:37,519 --> 00:03:39,200
and just to name a couple

95
00:03:39,200 --> 00:03:41,120
we saw deja blue

96
00:03:41,120 --> 00:03:43,120
for the first attack vector it was an

97
00:03:43,120 --> 00:03:45,599
integer overflow bug in a decompress

98
00:03:45,599 --> 00:03:46,640
function

99
00:03:46,640 --> 00:03:49,120
in the rdp server that allowed attackers

100
00:03:49,120 --> 00:03:51,920
to run arbitrary code remotely

101
00:03:51,920 --> 00:03:53,920
and for the second attack vector we saw

102
00:03:53,920 --> 00:03:55,280
reverse rdp

103
00:03:55,280 --> 00:03:57,200
which was a past traversal bug in

104
00:03:57,200 --> 00:03:59,280
microsoft's rdp client

105
00:03:59,280 --> 00:04:02,319
that allowed rdp server to run arbitrary

106
00:04:02,319 --> 00:04:06,159
applications on a connecting client

107
00:04:06,159 --> 00:04:08,239
so we can agree that rdp can be a

108
00:04:08,239 --> 00:04:10,720
lucrative target for attackers but why

109
00:04:10,720 --> 00:04:12,720
should we fuzz it

110
00:04:12,720 --> 00:04:14,720
to answer that let's have a quick look

111
00:04:14,720 --> 00:04:16,959
at the rdp attack surveys

112
00:04:16,959 --> 00:04:19,279
so as you can see from this simple query

113
00:04:19,279 --> 00:04:23,040
here um we have more than 190 rdp

114
00:04:23,040 --> 00:04:25,840
related binaries and drivers and

115
00:04:25,840 --> 00:04:28,960
executables and so on and this is on a

116
00:04:28,960 --> 00:04:31,520
vanilla windows installation um so it's

117
00:04:31,520 --> 00:04:34,080
quite a lot of code we can agree um and

118
00:04:34,080 --> 00:04:36,400
manual review doesn't seem like a great

119
00:04:36,400 --> 00:04:39,199
option at this point and this is why we

120
00:04:39,199 --> 00:04:42,320
decided eventually to go with fuzzy

121
00:04:42,320 --> 00:04:44,240
before we can start the fuzzing let's

122
00:04:44,240 --> 00:04:48,000
understand the basics of rdp

123
00:04:48,000 --> 00:04:50,080
so on to reading the dogs

124
00:04:50,080 --> 00:04:52,320
after downloading the relevant file from

125
00:04:52,320 --> 00:04:53,759
msdn

126
00:04:53,759 --> 00:04:56,639
we had around 30 specification documents

127
00:04:56,639 --> 00:04:58,800
with hundreds of pages in each and every

128
00:04:58,800 --> 00:05:00,800
one of them and of course sadly there

129
00:05:00,800 --> 00:05:04,160
wasn't any pictures in them

130
00:05:04,320 --> 00:05:06,960
rdp is a complex protocol it relies on

131
00:05:06,960 --> 00:05:09,120
several layers of different protocols

132
00:05:09,120 --> 00:05:12,080
and standards to be able to function

133
00:05:12,080 --> 00:05:14,400
it usually runs over tcp as you can see

134
00:05:14,400 --> 00:05:17,199
here although udp can also be an option

135
00:05:17,199 --> 00:05:18,560
for it

136
00:05:18,560 --> 00:05:22,680
and rdp also uses tpkt x.224 and

137
00:05:22,680 --> 00:05:27,680
t.125 mcs for data encapsulation

138
00:05:27,680 --> 00:05:29,840
an rdp connection has some general

139
00:05:29,840 --> 00:05:31,520
features to it

140
00:05:31,520 --> 00:05:33,840
that we thought we should mention here

141
00:05:33,840 --> 00:05:35,840
the first one is negotiation

142
00:05:35,840 --> 00:05:38,080
many of the connections functionalities

143
00:05:38,080 --> 00:05:40,639
can be negotiated between the client and

144
00:05:40,639 --> 00:05:42,000
the server

145
00:05:42,000 --> 00:05:43,440
i'm talking about things like the

146
00:05:43,440 --> 00:05:45,280
security level of the connection the

147
00:05:45,280 --> 00:05:47,680
encryption and compression algorithms

148
00:05:47,680 --> 00:05:48,960
being used

149
00:05:48,960 --> 00:05:50,320
supported

150
00:05:50,320 --> 00:05:52,880
formats etc

151
00:05:52,880 --> 00:05:55,360
the second thing is data compression so

152
00:05:55,360 --> 00:05:58,319
in some of the layers of rdp the data

153
00:05:58,319 --> 00:06:00,800
being sent is compressed by the sender

154
00:06:00,800 --> 00:06:03,680
and then decompressed by the receiver

155
00:06:03,680 --> 00:06:05,600
and you know that compression code can

156
00:06:05,600 --> 00:06:07,919
be arranged many times so having a lot

157
00:06:07,919 --> 00:06:10,560
of compression in the target code is a

158
00:06:10,560 --> 00:06:12,639
great thing and this is of course me

159
00:06:12,639 --> 00:06:15,840
talking from the attacker's standpoint

160
00:06:15,840 --> 00:06:19,199
and the last one here is rtp security so

161
00:06:19,199 --> 00:06:21,199
the protocol has some security features

162
00:06:21,199 --> 00:06:22,720
built into it

163
00:06:22,720 --> 00:06:24,000
um

164
00:06:24,000 --> 00:06:24,800
it

165
00:06:24,800 --> 00:06:27,039
mandates some sort of data encryption

166
00:06:27,039 --> 00:06:29,039
level in every connection which makes

167
00:06:29,039 --> 00:06:31,039
the protocol somewhat

168
00:06:31,039 --> 00:06:33,199
secure at the base level

169
00:06:33,199 --> 00:06:35,440
so these were the general this was the

170
00:06:35,440 --> 00:06:37,039
general info we

171
00:06:37,039 --> 00:06:38,479
wanted to share

172
00:06:38,479 --> 00:06:40,800
now let's have a look at a bit of more

173
00:06:40,800 --> 00:06:41,840
details

174
00:06:41,840 --> 00:06:42,960
so

175
00:06:42,960 --> 00:06:45,840
rdp we refer to it as a protocol of

176
00:06:45,840 --> 00:06:47,199
protocols

177
00:06:47,199 --> 00:06:48,960
and this was coined by i think

178
00:06:48,960 --> 00:06:50,400
malwaretech

179
00:06:50,400 --> 00:06:52,560
and since i heard it i've been using it

180
00:06:52,560 --> 00:06:54,880
because it really describes rdp well in

181
00:06:54,880 --> 00:06:56,160
my opinion

182
00:06:56,160 --> 00:06:58,720
so an rdp connection is comprised of

183
00:06:58,720 --> 00:07:00,560
multiple different channels as you can

184
00:07:00,560 --> 00:07:04,639
see here and going from the top down

185
00:07:04,639 --> 00:07:06,960
we start with static channels

186
00:07:06,960 --> 00:07:09,360
these channels are being opened in every

187
00:07:09,360 --> 00:07:11,039
single connection

188
00:07:11,039 --> 00:07:13,680
then we have virtual static channels

189
00:07:13,680 --> 00:07:15,680
which are an extension to the static

190
00:07:15,680 --> 00:07:18,400
channels and they are optional meaning

191
00:07:18,400 --> 00:07:20,639
they are negotiated

192
00:07:20,639 --> 00:07:23,440
in the connection initialization phase

193
00:07:23,440 --> 00:07:26,240
between the client and the server

194
00:07:26,240 --> 00:07:28,319
and finally we have the dynamic virtual

195
00:07:28,319 --> 00:07:31,039
channels that can be created and

196
00:07:31,039 --> 00:07:32,880
destroyed throughout the connection

197
00:07:32,880 --> 00:07:34,080
lifetime

198
00:07:34,080 --> 00:07:36,960
upon request and those are encapsulated

199
00:07:36,960 --> 00:07:41,120
inside one other static virtual channel

200
00:07:41,120 --> 00:07:43,759
now interjews each of those channels

201
00:07:43,759 --> 00:07:45,919
serves a completely different purpose so

202
00:07:45,919 --> 00:07:47,919
you can have for example a user input

203
00:07:47,919 --> 00:07:50,240
channel a display monitor channel an

204
00:07:50,240 --> 00:07:52,720
audio channel and so on and so forth and

205
00:07:52,720 --> 00:07:55,520
every channel has its own initialization

206
00:07:55,520 --> 00:07:57,759
sequence message types and data

207
00:07:57,759 --> 00:07:59,840
structures which basically makes it its

208
00:07:59,840 --> 00:08:02,560
own protocol hands calling rdp the

209
00:08:02,560 --> 00:08:05,680
protocol of protocols

210
00:08:05,680 --> 00:08:07,599
now here we can see a quick overview of

211
00:08:07,599 --> 00:08:10,160
the actual software components at play

212
00:08:10,160 --> 00:08:13,440
in rdp connection so first on the right

213
00:08:13,440 --> 00:08:16,560
side we have the client um there we have

214
00:08:16,560 --> 00:08:18,080
mstc.exe

215
00:08:18,080 --> 00:08:21,440
and also the dll mstsc aex which

216
00:08:21,440 --> 00:08:24,080
contains most of the protocol logic on

217
00:08:24,080 --> 00:08:26,479
the client side um of course as you

218
00:08:26,479 --> 00:08:28,879
might imagine this makes it a huge

219
00:08:28,879 --> 00:08:32,719
binary with almost 19 000 functions

220
00:08:32,719 --> 00:08:34,799
at least we are lucky enough to have

221
00:08:34,799 --> 00:08:36,799
public symbols for it so we take what we

222
00:08:36,799 --> 00:08:38,880
get

223
00:08:38,880 --> 00:08:40,320
as you may imagine there's a lot of

224
00:08:40,320 --> 00:08:42,799
ground to cover on that side and this is

225
00:08:42,799 --> 00:08:44,720
one of the reasons we wanted again to go

226
00:08:44,720 --> 00:08:46,000
with fuzzing

227
00:08:46,000 --> 00:08:48,800
now onto the other side of the server

228
00:08:48,800 --> 00:08:50,959
here we have the main server service

229
00:08:50,959 --> 00:08:54,320
which is hosted inside an svc host and

230
00:08:54,320 --> 00:08:57,440
this one loads a few dlls to handle the

231
00:08:57,440 --> 00:08:59,519
protocol's logic

232
00:08:59,519 --> 00:09:01,440
other than that the server also runs a

233
00:09:01,440 --> 00:09:04,160
few other processes for handling

234
00:09:04,160 --> 00:09:05,519
different channels

235
00:09:05,519 --> 00:09:08,160
the clipboard channel for example and

236
00:09:08,160 --> 00:09:10,800
finally the server also has a few kernel

237
00:09:10,800 --> 00:09:13,279
drivers for some channels functionality

238
00:09:13,279 --> 00:09:15,200
take for example the device redirection

239
00:09:15,200 --> 00:09:18,240
channel you can see here

240
00:09:18,240 --> 00:09:20,720
so now that we have the understanding

241
00:09:20,720 --> 00:09:22,959
basic understanding of rdp let's talk

242
00:09:22,959 --> 00:09:25,279
about fuzzing

243
00:09:25,279 --> 00:09:28,320
okay so now that we understand rdp and

244
00:09:28,320 --> 00:09:30,399
the potential damage in a vulnerability

245
00:09:30,399 --> 00:09:33,120
in it let's talk about how to fuzz it

246
00:09:33,120 --> 00:09:34,880
but before we can do that let's talk

247
00:09:34,880 --> 00:09:37,360
about fuzzing in general

248
00:09:37,360 --> 00:09:39,200
so this is a classic setup of what

249
00:09:39,200 --> 00:09:41,360
fuzzing looks like on the right hand

250
00:09:41,360 --> 00:09:44,160
side we have our targets our target

251
00:09:44,160 --> 00:09:46,480
process and on the left we have the

252
00:09:46,480 --> 00:09:49,200
fuzzer that generates test cases and

253
00:09:49,200 --> 00:09:51,519
inputs them into the target

254
00:09:51,519 --> 00:09:53,680
additionally we have the code coverage

255
00:09:53,680 --> 00:09:55,680
engine that protects the execution flow

256
00:09:55,680 --> 00:09:58,000
of the target and reports it back to the

257
00:09:58,000 --> 00:09:59,120
fuzzer

258
00:09:59,120 --> 00:10:01,360
so in this example the target is a pdf

259
00:10:01,360 --> 00:10:02,399
reader

260
00:10:02,399 --> 00:10:05,120
and the fuzzer generates pdf files and

261
00:10:05,120 --> 00:10:07,440
opens them with the reader pretty

262
00:10:07,440 --> 00:10:09,760
straightforward now the question is how

263
00:10:09,760 --> 00:10:12,800
can we adapt that to the ldp case

264
00:10:12,800 --> 00:10:14,959
clearly there are some differences first

265
00:10:14,959 --> 00:10:16,720
of all we need two machines we need a

266
00:10:16,720 --> 00:10:18,800
server and a client

267
00:10:18,800 --> 00:10:21,600
secondly we don't have a very good a

268
00:10:21,600 --> 00:10:22,399
very

269
00:10:22,399 --> 00:10:24,480
clear choice of what the input files

270
00:10:24,480 --> 00:10:25,839
will be

271
00:10:25,839 --> 00:10:28,640
so what can we do

272
00:10:29,120 --> 00:10:31,200
so the first thing we had to figure out

273
00:10:31,200 --> 00:10:34,240
when trying to fuzz rdp was how can we

274
00:10:34,240 --> 00:10:37,200
send inputs to our target be it the

275
00:10:37,200 --> 00:10:38,959
server or the client

276
00:10:38,959 --> 00:10:41,440
and going into this project we had we

277
00:10:41,440 --> 00:10:43,279
had four options

278
00:10:43,279 --> 00:10:45,360
the first was to take an open source

279
00:10:45,360 --> 00:10:48,079
solution and modify it so that it will

280
00:10:48,079 --> 00:10:51,200
send our fuzzing messages as well

281
00:10:51,200 --> 00:10:53,200
the second one was to write

282
00:10:53,200 --> 00:10:55,519
everything from scratch write our own

283
00:10:55,519 --> 00:10:58,640
custom rdp client or server and use it

284
00:10:58,640 --> 00:11:00,560
to send our messages

285
00:11:00,560 --> 00:11:03,120
the third the third one was to

286
00:11:03,120 --> 00:11:04,000
use

287
00:11:04,000 --> 00:11:06,079
snapshot based fuzzing

288
00:11:06,079 --> 00:11:08,720
and basically send inputs simply by

289
00:11:08,720 --> 00:11:11,680
writing to a specific memory to specific

290
00:11:11,680 --> 00:11:14,240
location in memory

291
00:11:14,240 --> 00:11:16,399
finally we had the option of what we

292
00:11:16,399 --> 00:11:18,640
call living off the land basically

293
00:11:18,640 --> 00:11:21,200
tapping into some existing solution and

294
00:11:21,200 --> 00:11:24,320
using exported apis or code injection

295
00:11:24,320 --> 00:11:26,480
to send our messages

296
00:11:26,480 --> 00:11:28,480
and eventually what we chose to go for

297
00:11:28,480 --> 00:11:30,880
is for the client case

298
00:11:30,880 --> 00:11:33,200
we used an existing solution

299
00:11:33,200 --> 00:11:35,360
and the reason for that is that the

300
00:11:35,360 --> 00:11:38,800
server side of microsoft rdp

301
00:11:38,800 --> 00:11:42,480
allows very very convenient apis to send

302
00:11:42,480 --> 00:11:44,640
messages to the client

303
00:11:44,640 --> 00:11:46,640
and for the server size for fuzzing the

304
00:11:46,640 --> 00:11:48,720
server size we used an open source

305
00:11:48,720 --> 00:11:53,440
solution namely we modified free ldp

306
00:11:54,720 --> 00:11:57,600
so the basic setup for fuzzing ldp looks

307
00:11:57,600 --> 00:11:59,600
something like this and i should say

308
00:11:59,600 --> 00:12:01,920
that the credit for these architectures

309
00:12:01,920 --> 00:12:04,800
should go to pulk young kim and lee from

310
00:12:04,800 --> 00:12:06,639
korean university and you should really

311
00:12:06,639 --> 00:12:08,800
check out the blackhead talk that we

312
00:12:08,800 --> 00:12:10,560
linked here

313
00:12:10,560 --> 00:12:12,880
in any case what we have is again on the

314
00:12:12,880 --> 00:12:15,200
right hand side we have our target in

315
00:12:15,200 --> 00:12:17,920
this case the ldp client and as before

316
00:12:17,920 --> 00:12:21,360
the fuzzer and the code coverage

317
00:12:21,360 --> 00:12:22,800
the difference is

318
00:12:22,800 --> 00:12:24,880
that the inputs that the fuzzer

319
00:12:24,880 --> 00:12:26,000
generates

320
00:12:26,000 --> 00:12:29,360
are not directly fed into the target but

321
00:12:29,360 --> 00:12:32,959
first they go to the server side

322
00:12:32,959 --> 00:12:35,600
and an agent that we wrote reads them

323
00:12:35,600 --> 00:12:37,120
and sends them

324
00:12:37,120 --> 00:12:39,920
over the connection as if they came from

325
00:12:39,920 --> 00:12:42,560
the ldp server so this looks something

326
00:12:42,560 --> 00:12:45,040
like this

327
00:12:45,760 --> 00:12:47,920
and let me just mention that

328
00:12:47,920 --> 00:12:51,120
the the same the same setup is used for

329
00:12:51,120 --> 00:12:52,560
the server side

330
00:12:52,560 --> 00:12:54,639
fuzzing essentially we just need to

331
00:12:54,639 --> 00:12:57,440
mirror everything

332
00:12:58,079 --> 00:13:00,480
now for the client side we we optimized

333
00:13:00,480 --> 00:13:01,920
it quite a bit

334
00:13:01,920 --> 00:13:02,720
so

335
00:13:02,720 --> 00:13:04,720
it looks it looks something like this by

336
00:13:04,720 --> 00:13:07,839
the end so again on the right hand side

337
00:13:07,839 --> 00:13:10,959
we have mstsc which is the the windows

338
00:13:10,959 --> 00:13:12,639
rtp client

339
00:13:12,639 --> 00:13:15,760
and we have afl fast as our fuzzer

340
00:13:15,760 --> 00:13:18,000
and the code coverage engine is based on

341
00:13:18,000 --> 00:13:21,360
dynamo rio and win afl

342
00:13:21,360 --> 00:13:23,440
now the difference is that we use the

343
00:13:23,440 --> 00:13:26,079
mstsc instead of connecting to a remote

344
00:13:26,079 --> 00:13:27,920
server we used it to connect to

345
00:13:27,920 --> 00:13:30,320
localhost so it's connecting to the same

346
00:13:30,320 --> 00:13:31,440
machine

347
00:13:31,440 --> 00:13:33,839
and then afl fuzz can simply send the

348
00:13:33,839 --> 00:13:36,880
messages to our fuzz agent

349
00:13:36,880 --> 00:13:39,440
on the same machine and it will

350
00:13:39,440 --> 00:13:42,399
direct those messages to the target

351
00:13:42,399 --> 00:13:44,880
as if it came from the server side of

352
00:13:44,880 --> 00:13:47,600
the ldb and the upshot of that is that

353
00:13:47,600 --> 00:13:50,800
we can run concurrently many instances

354
00:13:50,800 --> 00:13:52,560
of this father and target on the same

355
00:13:52,560 --> 00:13:54,959
machine

356
00:13:57,040 --> 00:13:59,040
okay so now we can send messages we need

357
00:13:59,040 --> 00:14:01,839
to decide what will send

358
00:14:01,839 --> 00:14:04,639
and as we said practically every channel

359
00:14:04,639 --> 00:14:07,600
is its own protocol so we chose to fuzz

360
00:14:07,600 --> 00:14:09,839
on a channel by channel basis meaning

361
00:14:09,839 --> 00:14:12,720
every time we would pick one channel

362
00:14:12,720 --> 00:14:15,440
and we would only fuzz messages on that

363
00:14:15,440 --> 00:14:16,800
channel

364
00:14:16,800 --> 00:14:18,800
and for the most part that is sufficient

365
00:14:18,800 --> 00:14:20,959
because the channels are independent so

366
00:14:20,959 --> 00:14:23,120
we can cover most of their logic simply

367
00:14:23,120 --> 00:14:25,360
by fuzzing them and ignoring everything

368
00:14:25,360 --> 00:14:27,600
else

369
00:14:28,320 --> 00:14:29,519
now there's

370
00:14:29,519 --> 00:14:32,160
a a bit of a side note but when we

371
00:14:32,160 --> 00:14:35,440
wanted to fuzz the the server side then

372
00:14:35,440 --> 00:14:38,399
we needed to fast the rdp server runs on

373
00:14:38,399 --> 00:14:39,120
a

374
00:14:39,120 --> 00:14:41,360
windows service that is automatically

375
00:14:41,360 --> 00:14:43,600
executed when the machine boots

376
00:14:43,600 --> 00:14:46,320
so we have no control over the creation

377
00:14:46,320 --> 00:14:48,399
of the process

378
00:14:48,399 --> 00:14:51,519
and therefore we cannot control it with

379
00:14:51,519 --> 00:14:54,000
dynamo wheel so what we had to do is we

380
00:14:54,000 --> 00:14:57,279
had to add the ability to attach to a

381
00:14:57,279 --> 00:14:59,839
running process with dynamo rio which

382
00:14:59,839 --> 00:15:02,639
was not supported out of the box

383
00:15:02,639 --> 00:15:04,639
and if you find this useful then we're

384
00:15:04,639 --> 00:15:06,240
happy to say that we've merged this

385
00:15:06,240 --> 00:15:07,920
functionality to the main branch of

386
00:15:07,920 --> 00:15:13,000
dynamo wheel so everyone can use it now

387
00:15:14,079 --> 00:15:16,959
okay so now we can connect and we know

388
00:15:16,959 --> 00:15:18,720
what we are sending

389
00:15:18,720 --> 00:15:19,920
and

390
00:15:19,920 --> 00:15:21,440
the the next

391
00:15:21,440 --> 00:15:24,240
thing we had to co to overcome was the

392
00:15:24,240 --> 00:15:26,480
following issue we're tapping into a

393
00:15:26,480 --> 00:15:29,120
live connection so there's a lot of data

394
00:15:29,120 --> 00:15:30,880
that goes from one side to the other

395
00:15:30,880 --> 00:15:32,320
that has nothing to do with the fuzzing

396
00:15:32,320 --> 00:15:33,680
process

397
00:15:33,680 --> 00:15:38,399
basically just rdp doing rdp things

398
00:15:38,399 --> 00:15:40,880
and we somehow need to differentiate the

399
00:15:40,880 --> 00:15:43,759
normal ldp messages from our passing

400
00:15:43,759 --> 00:15:46,240
messages

401
00:15:46,800 --> 00:15:48,959
so it looks something like this

402
00:15:48,959 --> 00:15:50,399
we have some

403
00:15:50,399 --> 00:15:51,600
several

404
00:15:51,600 --> 00:15:54,560
normal messages that are transferred on

405
00:15:54,560 --> 00:15:55,680
this channel

406
00:15:55,680 --> 00:15:58,560
and the last one is our fuzzing message

407
00:15:58,560 --> 00:16:00,800
essentially a test case that the fuzzer

408
00:16:00,800 --> 00:16:01,920
generated

409
00:16:01,920 --> 00:16:04,000
but in order for coverage guided fuzzing

410
00:16:04,000 --> 00:16:06,839
to work we must maintain a one-to-one

411
00:16:06,839 --> 00:16:09,680
correspondence between the inputs the

412
00:16:09,680 --> 00:16:13,040
fuzzer generated and the code paths that

413
00:16:13,040 --> 00:16:14,560
they triggered

414
00:16:14,560 --> 00:16:16,959
and to achieve that we developed this

415
00:16:16,959 --> 00:16:18,560
background fuzzing

416
00:16:18,560 --> 00:16:21,440
essentially differentiating our messages

417
00:16:21,440 --> 00:16:23,199
from the regular messages

418
00:16:23,199 --> 00:16:25,199
and the way we did it is by adding a

419
00:16:25,199 --> 00:16:28,000
marker so in this case the marker is the

420
00:16:28,000 --> 00:16:30,079
first byte of the message as you can see

421
00:16:30,079 --> 00:16:33,519
on the normal messages it is exo20 and

422
00:16:33,519 --> 00:16:35,759
on our messages on the passing messages

423
00:16:35,759 --> 00:16:38,800
it's xrff

424
00:16:38,800 --> 00:16:41,120
and that allows the the code coverage

425
00:16:41,120 --> 00:16:42,079
engine

426
00:16:42,079 --> 00:16:44,480
to differentiate

427
00:16:44,480 --> 00:16:45,199
the

428
00:16:45,199 --> 00:16:48,480
fusing messages from normal messages

429
00:16:48,480 --> 00:16:50,399
so let's look at an example

430
00:16:50,399 --> 00:16:52,480
so this example is taken from the ldp

431
00:16:52,480 --> 00:16:55,040
sound channel which is used to redirect

432
00:16:55,040 --> 00:16:57,839
sounds from the ldp server to the ldp

433
00:16:57,839 --> 00:16:59,279
client

434
00:16:59,279 --> 00:17:01,600
and according to the docs the first byte

435
00:17:01,600 --> 00:17:03,839
of every message is the type of the

436
00:17:03,839 --> 00:17:05,919
message that we are sending

437
00:17:05,919 --> 00:17:08,079
and the supported values for the message

438
00:17:08,079 --> 00:17:12,000
for the message type is from 1 to x a d

439
00:17:12,000 --> 00:17:13,919
so what we can do in this case is use

440
00:17:13,919 --> 00:17:16,240
the most significant bit of this first

441
00:17:16,240 --> 00:17:18,880
byte as our market

442
00:17:18,880 --> 00:17:21,439
so our agent will

443
00:17:21,439 --> 00:17:24,319
turn this bit on before sending any

444
00:17:24,319 --> 00:17:26,400
fuzzing messages

445
00:17:26,400 --> 00:17:28,559
and win nfl will check if this is if

446
00:17:28,559 --> 00:17:30,840
this bit is on before the message is

447
00:17:30,840 --> 00:17:32,480
handled

448
00:17:32,480 --> 00:17:34,880
if the if the bit is on then we know

449
00:17:34,880 --> 00:17:37,120
that this is a fuzzing message

450
00:17:37,120 --> 00:17:38,799
we know that we need to track code

451
00:17:38,799 --> 00:17:41,760
coverage for it and finally we turn the

452
00:17:41,760 --> 00:17:44,000
bit off so that the execution will

453
00:17:44,000 --> 00:17:46,559
complete will continue as as as it

454
00:17:46,559 --> 00:17:49,039
should as normally does

455
00:17:49,039 --> 00:17:51,280
if the bit is off to begin with then we

456
00:17:51,280 --> 00:17:53,120
know that this message has nothing to do

457
00:17:53,120 --> 00:17:54,799
with the fuzzing process and we can

458
00:17:54,799 --> 00:17:56,960
simply ignore it then don't track any

459
00:17:56,960 --> 00:18:00,600
coverage for it

460
00:18:00,960 --> 00:18:04,320
great so now we have a running fuzzer we

461
00:18:04,320 --> 00:18:06,400
can start sending messages

462
00:18:06,400 --> 00:18:07,760
but we cannot

463
00:18:07,760 --> 00:18:09,440
across a

464
00:18:09,440 --> 00:18:11,840
a different problem essentially the

465
00:18:11,840 --> 00:18:14,559
statefulness of the connection

466
00:18:14,559 --> 00:18:16,559
basically what we found is that for some

467
00:18:16,559 --> 00:18:20,400
channels if two consecutive messages are

468
00:18:20,400 --> 00:18:21,760
invalid

469
00:18:21,760 --> 00:18:24,480
then the client will simply close the

470
00:18:24,480 --> 00:18:26,640
connection and terminate and obviously

471
00:18:26,640 --> 00:18:29,120
we cannot have that for the fuzzing this

472
00:18:29,120 --> 00:18:31,120
we cannot continue fuzzing what once

473
00:18:31,120 --> 00:18:33,679
everything is closed

474
00:18:33,679 --> 00:18:37,280
so we had two solutions to overcome this

475
00:18:37,280 --> 00:18:39,760
one was using code patches

476
00:18:39,760 --> 00:18:43,640
basically just

477
00:18:43,679 --> 00:18:46,480
stopping the the target from actually

478
00:18:46,480 --> 00:18:48,080
exiting

479
00:18:48,080 --> 00:18:49,919
and the other was using grammar

480
00:18:49,919 --> 00:18:52,240
enforcement basically

481
00:18:52,240 --> 00:18:54,720
limiting what the fuzzer can send so it

482
00:18:54,720 --> 00:18:58,400
never reaches those bad paths

483
00:18:58,400 --> 00:19:01,280
so let me explain code patches so this

484
00:19:01,280 --> 00:19:03,360
is this is an example again from the

485
00:19:03,360 --> 00:19:05,360
graphics channel

486
00:19:05,360 --> 00:19:07,120
and

487
00:19:07,120 --> 00:19:09,039
and here we can see that

488
00:19:09,039 --> 00:19:11,520
under some if some arrow is detected

489
00:19:11,520 --> 00:19:14,799
there are two options either we exit

490
00:19:14,799 --> 00:19:18,080
or we log an arrow and we reconnect

491
00:19:18,080 --> 00:19:20,400
and what we did we we basically patched

492
00:19:20,400 --> 00:19:22,480
so that we always go through the

493
00:19:22,480 --> 00:19:24,960
reconnection path and never through the

494
00:19:24,960 --> 00:19:27,120
exiting

495
00:19:27,120 --> 00:19:28,799
and the cool way to do it is using

496
00:19:28,799 --> 00:19:31,280
dynamo rear functionality that's called

497
00:19:31,280 --> 00:19:34,160
a dynamo real wrap

498
00:19:34,160 --> 00:19:36,400
basically what it does is we have this

499
00:19:36,400 --> 00:19:38,720
original pointer where we don't want to

500
00:19:38,720 --> 00:19:40,880
ever go and we have this replacement

501
00:19:40,880 --> 00:19:42,160
pointer

502
00:19:42,160 --> 00:19:43,120
so

503
00:19:43,120 --> 00:19:45,120
and we just tell the the

504
00:19:45,120 --> 00:19:47,200
we tell the program whenever you get to

505
00:19:47,200 --> 00:19:49,600
the bad path just go to the good path so

506
00:19:49,600 --> 00:19:52,559
in our case the original would be the

507
00:19:52,559 --> 00:19:54,000
exiting

508
00:19:54,000 --> 00:19:56,480
code the exiting code path and the

509
00:19:56,480 --> 00:19:58,240
replacement would be

510
00:19:58,240 --> 00:19:58,960
the

511
00:19:58,960 --> 00:20:01,840
reconnect code

512
00:20:02,080 --> 00:20:04,559
additionally as i said we've used

513
00:20:04,559 --> 00:20:06,880
grammar enforcement so basically we

514
00:20:06,880 --> 00:20:09,039
involved some size limitation of the

515
00:20:09,039 --> 00:20:10,240
messages

516
00:20:10,240 --> 00:20:12,480
some of the values the divisibility of

517
00:20:12,480 --> 00:20:15,200
the size and so forth

518
00:20:15,200 --> 00:20:16,240
and

519
00:20:16,240 --> 00:20:18,480
one question was where can we find how

520
00:20:18,480 --> 00:20:19,760
can we find

521
00:20:19,760 --> 00:20:22,159
what the grammar should look like so the

522
00:20:22,159 --> 00:20:23,600
first thing we did is read the

523
00:20:23,600 --> 00:20:26,080
documentation microsoft has great and

524
00:20:26,080 --> 00:20:28,400
vast documentation on ldp

525
00:20:28,400 --> 00:20:31,360
and we got most of the of the

526
00:20:31,360 --> 00:20:33,120
grammar from it

527
00:20:33,120 --> 00:20:35,039
and when that didn't work we had to go

528
00:20:35,039 --> 00:20:37,440
to either reverse engineering the code

529
00:20:37,440 --> 00:20:38,720
to see

530
00:20:38,720 --> 00:20:40,799
what what is what is bad what is

531
00:20:40,799 --> 00:20:43,919
regarded as as bad grammar

532
00:20:43,919 --> 00:20:46,080
and when that failed we had to trace the

533
00:20:46,080 --> 00:20:49,039
failed execution and find out what went

534
00:20:49,039 --> 00:20:52,400
wrong and how we can avoid it

535
00:20:52,480 --> 00:20:55,360
now an important remark about grammar is

536
00:20:55,360 --> 00:20:57,440
that whenever we

537
00:20:57,440 --> 00:20:59,919
narrow what the fuzzel can do we might

538
00:20:59,919 --> 00:21:02,640
miss some interesting path

539
00:21:02,640 --> 00:21:03,600
so

540
00:21:03,600 --> 00:21:06,240
what we chose to do is to enforce as

541
00:21:06,240 --> 00:21:07,919
little as we could

542
00:21:07,919 --> 00:21:09,679
but still enough to ensure that the

543
00:21:09,679 --> 00:21:13,200
connection is never closed

544
00:21:14,480 --> 00:21:16,480
okay so this is great now we have a

545
00:21:16,480 --> 00:21:19,600
running fuzzer and it says messages each

546
00:21:19,600 --> 00:21:21,919
test case is one message

547
00:21:21,919 --> 00:21:24,960
and and we we started running and after

548
00:21:24,960 --> 00:21:28,080
a while we found that the coverage was

549
00:21:28,080 --> 00:21:29,600
pretty low

550
00:21:29,600 --> 00:21:32,080
and what we realized is that most of the

551
00:21:32,080 --> 00:21:34,720
logic of an rdp channel actually depends

552
00:21:34,720 --> 00:21:37,039
on a sequence of messages not a single

553
00:21:37,039 --> 00:21:38,159
one

554
00:21:38,159 --> 00:21:40,080
so what did we decided to do is to

555
00:21:40,080 --> 00:21:42,960
create larger test case

556
00:21:42,960 --> 00:21:44,640
larger test cases that are actually

557
00:21:44,640 --> 00:21:46,960
comprised of several messages and not a

558
00:21:46,960 --> 00:21:48,240
single one

559
00:21:48,240 --> 00:21:50,799
so for example the first case test case

560
00:21:50,799 --> 00:21:52,320
might be

561
00:21:52,320 --> 00:21:54,640
three messages the second two messages

562
00:21:54,640 --> 00:21:56,840
and so

563
00:21:56,840 --> 00:22:00,240
on so let's give an example of why this

564
00:22:00,240 --> 00:22:02,480
is necessary so this is again from the

565
00:22:02,480 --> 00:22:03,919
graphics channel

566
00:22:03,919 --> 00:22:05,919
what we have here is a

567
00:22:05,919 --> 00:22:09,200
map surface to output pdu pdu being

568
00:22:09,200 --> 00:22:12,640
protocol data units so the basic message

569
00:22:12,640 --> 00:22:14,559
of this

570
00:22:14,559 --> 00:22:16,799
of the protocol

571
00:22:16,799 --> 00:22:19,120
and what it does is it maps a predefined

572
00:22:19,120 --> 00:22:21,520
surface to an output buffer

573
00:22:21,520 --> 00:22:24,000
but as you can see it accepts a surface

574
00:22:24,000 --> 00:22:25,120
id

575
00:22:25,120 --> 00:22:27,120
that has to have been

576
00:22:27,120 --> 00:22:29,919
created previously using a create

577
00:22:29,919 --> 00:22:31,520
surface pdu

578
00:22:31,520 --> 00:22:34,080
so the the map surface to output pdu

579
00:22:34,080 --> 00:22:37,360
makes no sense unless there was a create

580
00:22:37,360 --> 00:22:38,799
surface pdu

581
00:22:38,799 --> 00:22:40,400
preceding it

582
00:22:40,400 --> 00:22:42,400
that's why we had to use this

583
00:22:42,400 --> 00:22:44,080
multi-input

584
00:22:44,080 --> 00:22:46,559
solution

585
00:22:47,280 --> 00:22:49,440
so the way we implemented it is using a

586
00:22:49,440 --> 00:22:53,360
feature of win-nfl called afl dictionary

587
00:22:53,360 --> 00:22:56,400
basically afl dictionary just tells the

588
00:22:56,400 --> 00:22:58,960
fuzzer here's the sequence of bytes and

589
00:22:58,960 --> 00:23:00,880
you should try using it from time to

590
00:23:00,880 --> 00:23:04,080
time in your implementations

591
00:23:04,080 --> 00:23:05,919
and we used it in the following manner

592
00:23:05,919 --> 00:23:07,840
we used it to separate the protocol

593
00:23:07,840 --> 00:23:09,840
messages so these underscore underscore

594
00:23:09,840 --> 00:23:13,120
underscore command xx would be

595
00:23:13,120 --> 00:23:14,240
the the

596
00:23:14,240 --> 00:23:16,000
dictionary entry

597
00:23:16,000 --> 00:23:16,960
and

598
00:23:16,960 --> 00:23:20,559
the agent would use that to split the

599
00:23:20,559 --> 00:23:24,640
test case into multiple messages

600
00:23:24,640 --> 00:23:27,039
now an important remark is that the

601
00:23:27,039 --> 00:23:29,039
fuzzer will only complete the fuzzing

602
00:23:29,039 --> 00:23:31,919
iteration and create the next test case

603
00:23:31,919 --> 00:23:34,320
once the last message

604
00:23:34,320 --> 00:23:37,520
in the sequence is is sent

605
00:23:37,520 --> 00:23:39,120
so the way we did it

606
00:23:39,120 --> 00:23:42,000
we did that is by adding a second marker

607
00:23:42,000 --> 00:23:43,760
basically not just saying this is a

608
00:23:43,760 --> 00:23:46,640
fuzzing message but this is a

609
00:23:46,640 --> 00:23:48,240
fuzzing message

610
00:23:48,240 --> 00:23:50,559
that is also the last in a sequence of

611
00:23:50,559 --> 00:23:53,039
messages

612
00:23:54,880 --> 00:23:57,520
now that was great and for the most for

613
00:23:57,520 --> 00:24:00,240
most of the channels that was sufficient

614
00:24:00,240 --> 00:24:02,400
however we did come across cases in

615
00:24:02,400 --> 00:24:04,720
which we needed to to actually run on

616
00:24:04,720 --> 00:24:07,039
multiple channels for so

617
00:24:07,039 --> 00:24:08,720
for example this is from the video

618
00:24:08,720 --> 00:24:11,200
channel and as you can see

619
00:24:11,200 --> 00:24:13,760
some of the some of the data is sent on

620
00:24:13,760 --> 00:24:16,799
the control channel and some on a data

621
00:24:16,799 --> 00:24:20,799
channel into different virtual channels

622
00:24:20,799 --> 00:24:23,520
so we had to somehow create messages

623
00:24:23,520 --> 00:24:26,240
that are sent on two different channels

624
00:24:26,240 --> 00:24:28,960
and we did it in a very similar fashion

625
00:24:28,960 --> 00:24:31,039
basically the type of the message would

626
00:24:31,039 --> 00:24:32,880
also tell the agent

627
00:24:32,880 --> 00:24:36,080
on which channel to send the the next

628
00:24:36,080 --> 00:24:38,400
message so for example

629
00:24:38,400 --> 00:24:40,640
message of type 7 would go on the

630
00:24:40,640 --> 00:24:43,200
control channel message of type 2 would

631
00:24:43,200 --> 00:24:45,679
go on the data channel and message of

632
00:24:45,679 --> 00:24:47,760
type 3 would go say on the control

633
00:24:47,760 --> 00:24:50,400
channel again

634
00:24:52,320 --> 00:24:54,080
okay so

635
00:24:54,080 --> 00:24:56,080
now we have something that runs and send

636
00:24:56,080 --> 00:24:57,440
messages

637
00:24:57,440 --> 00:24:59,440
but one of the problems we had was

638
00:24:59,440 --> 00:25:02,080
actually locating our target function so

639
00:25:02,080 --> 00:25:04,400
we can send messages but we need to know

640
00:25:04,400 --> 00:25:06,320
who deals with the messages on the

641
00:25:06,320 --> 00:25:08,240
target

642
00:25:08,240 --> 00:25:11,760
and this is not so not such an easy

643
00:25:11,760 --> 00:25:12,840
problem

644
00:25:12,840 --> 00:25:16,000
because rdp has a huge code base and

645
00:25:16,000 --> 00:25:19,200
it's hard to locate the correct function

646
00:25:19,200 --> 00:25:21,600
so what we ended up doing is downloading

647
00:25:21,600 --> 00:25:24,000
all the relevant pdbs

648
00:25:24,000 --> 00:25:26,880
and extracting a the function names from

649
00:25:26,880 --> 00:25:29,200
each of them and we created a small

650
00:25:29,200 --> 00:25:31,919
database that connected a function name

651
00:25:31,919 --> 00:25:34,880
to the binary that it lives in

652
00:25:34,880 --> 00:25:37,360
now we had some luck because most of our

653
00:25:37,360 --> 00:25:39,760
target functions had the form

654
00:25:39,760 --> 00:25:43,679
c class name on data received so say c

655
00:25:43,679 --> 00:25:46,400
audio channel on data received and that

656
00:25:46,400 --> 00:25:48,480
helped speed things up

657
00:25:48,480 --> 00:25:49,360
as a

658
00:25:49,360 --> 00:25:51,600
side note i would say that it would be

659
00:25:51,600 --> 00:25:53,200
very beneficial for the security

660
00:25:53,200 --> 00:25:56,400
community to have a complete database of

661
00:25:56,400 --> 00:25:58,480
all available type info and function

662
00:25:58,480 --> 00:26:01,760
names of all the public microsoft pdbs

663
00:26:01,760 --> 00:26:03,440
and we didn't get around to it but it

664
00:26:03,440 --> 00:26:05,120
would be great if someone would take the

665
00:26:05,120 --> 00:26:07,918
glove and do it

666
00:26:09,679 --> 00:26:12,880
a few fuzzing iterations later

667
00:26:12,880 --> 00:26:16,159
we found our first fresh hurrah

668
00:26:16,159 --> 00:26:17,360
however

669
00:26:17,360 --> 00:26:18,480
we tried

670
00:26:18,480 --> 00:26:20,880
we started analyzing it and we tried to

671
00:26:20,880 --> 00:26:24,000
reproduce it just send the same messages

672
00:26:24,000 --> 00:26:26,720
and it did not reproduce

673
00:26:26,720 --> 00:26:29,039
basically what we realized is that this

674
00:26:29,039 --> 00:26:31,279
is this is a problem of the statefulness

675
00:26:31,279 --> 00:26:32,799
of the protocol

676
00:26:32,799 --> 00:26:34,240
basically

677
00:26:34,240 --> 00:26:36,559
some previous message

678
00:26:36,559 --> 00:26:39,600
put the the target in a condition that

679
00:26:39,600 --> 00:26:42,080
when the subsequent message

680
00:26:42,080 --> 00:26:44,159
arrived it crashed

681
00:26:44,159 --> 00:26:46,400
but it would not reproduce by simply

682
00:26:46,400 --> 00:26:50,080
running the same the the last message

683
00:26:50,080 --> 00:26:52,159
so we had to come up with a solution

684
00:26:52,159 --> 00:26:55,440
that would would allow us to analyze

685
00:26:55,440 --> 00:26:58,960
crashes that are not reproducible

686
00:26:58,960 --> 00:27:00,640
and this is what we came up with it's a

687
00:27:00,640 --> 00:27:04,400
bit much but don't worry um so basically

688
00:27:04,400 --> 00:27:06,960
we had this watchdog and it would wait

689
00:27:06,960 --> 00:27:09,679
until the a crash was detected

690
00:27:09,679 --> 00:27:11,919
and whenever a crash was detected it

691
00:27:11,919 --> 00:27:15,200
would generate a damp file

692
00:27:15,200 --> 00:27:18,000
now we would analyze this damp file with

693
00:27:18,000 --> 00:27:20,960
a windbag script and we would expect

694
00:27:20,960 --> 00:27:22,799
extract the

695
00:27:22,799 --> 00:27:25,600
call stack that caused the crash

696
00:27:25,600 --> 00:27:27,760
now we would compare this call stack to

697
00:27:27,760 --> 00:27:30,399
the previous call stacks that we found

698
00:27:30,399 --> 00:27:33,120
and if it's an old one then we can

699
00:27:33,120 --> 00:27:35,760
simply discard it it's a it's old news

700
00:27:35,760 --> 00:27:37,600
but if it's a new one then it would send

701
00:27:37,600 --> 00:27:40,399
us an email saying hey

702
00:27:40,399 --> 00:27:42,880
you found a crash good job go check it

703
00:27:42,880 --> 00:27:43,600
out

704
00:27:43,600 --> 00:27:46,959
and that looks something like this

705
00:27:47,679 --> 00:27:48,640
and

706
00:27:48,640 --> 00:27:49,600
now

707
00:27:49,600 --> 00:27:51,440
now that we understand how we did it i

708
00:27:51,440 --> 00:27:55,279
will let you kid explain what we found

709
00:27:55,279 --> 00:27:56,640
all right so let's talk about the

710
00:27:56,640 --> 00:27:58,960
results

711
00:27:58,960 --> 00:28:00,640
so this is an example of one of the

712
00:28:00,640 --> 00:28:02,240
channels that we thought and this is

713
00:28:02,240 --> 00:28:04,240
these are the stats for it

714
00:28:04,240 --> 00:28:07,039
um and you can see that the execution

715
00:28:07,039 --> 00:28:10,320
speed is not so fast to say the least

716
00:28:10,320 --> 00:28:12,080
however the files did manage to find

717
00:28:12,080 --> 00:28:14,080
some crashes which is what's actually

718
00:28:14,080 --> 00:28:15,600
important here

719
00:28:15,600 --> 00:28:17,679
so in a more high level view

720
00:28:17,679 --> 00:28:18,480
we

721
00:28:18,480 --> 00:28:21,120
were fuzzing for about one month of this

722
00:28:21,120 --> 00:28:24,240
is actually father's running um we first

723
00:28:24,240 --> 00:28:26,399
15 channels in both directions the

724
00:28:26,399 --> 00:28:29,200
client and the server and we found five

725
00:28:29,200 --> 00:28:30,480
bugs

726
00:28:30,480 --> 00:28:33,520
so let's now go ahead and dive into one

727
00:28:33,520 --> 00:28:35,679
of those bugs

728
00:28:35,679 --> 00:28:38,320
so this one was found in the audio

729
00:28:38,320 --> 00:28:40,559
playback channel and what is this

730
00:28:40,559 --> 00:28:43,360
channel basically it is used to play

731
00:28:43,360 --> 00:28:45,679
sounds on the client um that were

732
00:28:45,679 --> 00:28:47,840
generated on the server so basically it

733
00:28:47,840 --> 00:28:49,760
allows the client to hear what's going

734
00:28:49,760 --> 00:28:52,559
on on the server's machine

735
00:28:52,559 --> 00:28:55,200
so this is how it all started

736
00:28:55,200 --> 00:28:57,919
this was the down file that was created

737
00:28:57,919 --> 00:28:59,840
by the crashing input

738
00:28:59,840 --> 00:29:01,919
and this is the input that was

739
00:29:01,919 --> 00:29:04,159
responsible for the crash

740
00:29:04,159 --> 00:29:07,840
um so here if we take a look at this for

741
00:29:07,840 --> 00:29:10,159
a minute this is a good example for why

742
00:29:10,159 --> 00:29:12,880
the multi-input fuzzing or mentioned

743
00:29:12,880 --> 00:29:14,960
that we implemented was very helpful in

744
00:29:14,960 --> 00:29:17,440
this process um so as you can see here

745
00:29:17,440 --> 00:29:20,399
the input has four different pdus or

746
00:29:20,399 --> 00:29:21,760
four different

747
00:29:21,760 --> 00:29:24,559
rdp packets

748
00:29:24,559 --> 00:29:26,960
all right so naturally we go to the

749
00:29:26,960 --> 00:29:28,399
crushing code

750
00:29:28,399 --> 00:29:30,720
um and if we clean up the pseudocode a

751
00:29:30,720 --> 00:29:32,559
little bit of the crushing function we

752
00:29:32,559 --> 00:29:34,320
get something like this

753
00:29:34,320 --> 00:29:36,480
as you can see the crash happens in the

754
00:29:36,480 --> 00:29:39,600
last line where we have an access to an

755
00:29:39,600 --> 00:29:43,279
element of a format's array so let's try

756
00:29:43,279 --> 00:29:45,200
to understand what this array is all

757
00:29:45,200 --> 00:29:46,320
about

758
00:29:46,320 --> 00:29:48,640
before we can understand the bug we need

759
00:29:48,640 --> 00:29:49,919
to take a

760
00:29:49,919 --> 00:29:52,000
closer look at what

761
00:29:52,000 --> 00:29:54,320
a legitimate flow in this channel looks

762
00:29:54,320 --> 00:29:55,520
like

763
00:29:55,520 --> 00:29:58,640
so first the server sends a list of the

764
00:29:58,640 --> 00:30:02,159
sound formats it supports to the client

765
00:30:02,159 --> 00:30:04,720
when getting the formats list the client

766
00:30:04,720 --> 00:30:07,279
will allocate an array containing all

767
00:30:07,279 --> 00:30:09,520
the details about those formats for a

768
00:30:09,520 --> 00:30:11,760
later use when decoding sound data

769
00:30:11,760 --> 00:30:13,919
messages from the server

770
00:30:13,919 --> 00:30:16,720
then the server is practically free to

771
00:30:16,720 --> 00:30:17,840
send

772
00:30:17,840 --> 00:30:20,240
sound data in any of the formats that

773
00:30:20,240 --> 00:30:22,720
were announced before and then the

774
00:30:22,720 --> 00:30:25,440
client uses the format index to process

775
00:30:25,440 --> 00:30:26,480
the data

776
00:30:26,480 --> 00:30:28,320
um here in this example you can see

777
00:30:28,320 --> 00:30:30,640
three formats being announced and then

778
00:30:30,640 --> 00:30:33,440
one data packet that is using the third

779
00:30:33,440 --> 00:30:36,640
format so no issues here

780
00:30:36,640 --> 00:30:38,960
now based on that let's take a look at

781
00:30:38,960 --> 00:30:41,279
what the crashing input

782
00:30:41,279 --> 00:30:43,600
caused the message flow to look like and

783
00:30:43,600 --> 00:30:46,080
see what happened before they crash

784
00:30:46,080 --> 00:30:48,880
so it starts like the legitimate flow

785
00:30:48,880 --> 00:30:50,960
the server sends a list of three formats

786
00:30:50,960 --> 00:30:53,039
that it supports the client then

787
00:30:53,039 --> 00:30:55,039
allocates the array of those three

788
00:30:55,039 --> 00:30:56,559
formats

789
00:30:56,559 --> 00:30:59,039
then the server sends data in format

790
00:30:59,039 --> 00:31:01,200
three and the client can process it

791
00:31:01,200 --> 00:31:03,120
normally with no issues

792
00:31:03,120 --> 00:31:05,279
now this is where it gets interesting

793
00:31:05,279 --> 00:31:07,039
the next thing that happens is that the

794
00:31:07,039 --> 00:31:09,840
server updates the list of supported

795
00:31:09,840 --> 00:31:12,240
formats with a list that now only

796
00:31:12,240 --> 00:31:14,000
contains one format

797
00:31:14,000 --> 00:31:16,640
um basically causing the client to free

798
00:31:16,640 --> 00:31:18,480
the format array it has

799
00:31:18,480 --> 00:31:21,120
and to allocate a new one

800
00:31:21,120 --> 00:31:24,240
this time with only one format in it

801
00:31:24,240 --> 00:31:26,640
next the server sends a sound data

802
00:31:26,640 --> 00:31:29,120
message with format three

803
00:31:29,120 --> 00:31:30,720
even though the client only has one

804
00:31:30,720 --> 00:31:33,760
format to work with so

805
00:31:33,760 --> 00:31:35,519
as you can imagine the client tries to

806
00:31:35,519 --> 00:31:37,440
access deferred format

807
00:31:37,440 --> 00:31:40,080
causing an out of bound read and causing

808
00:31:40,080 --> 00:31:43,199
the client to crash

809
00:31:43,919 --> 00:31:46,480
if we take another look at the function

810
00:31:46,480 --> 00:31:47,360
again

811
00:31:47,360 --> 00:31:49,760
um in the client uh we see that the

812
00:31:49,760 --> 00:31:52,399
client does account for changes in the

813
00:31:52,399 --> 00:31:53,600
format

814
00:31:53,600 --> 00:31:56,080
um when one

815
00:31:56,080 --> 00:31:58,640
we can see that the client account for

816
00:31:58,640 --> 00:32:02,320
changes in the format when the format is

817
00:32:02,320 --> 00:32:04,559
in the current message is different from

818
00:32:04,559 --> 00:32:06,559
the format in the last message

819
00:32:06,559 --> 00:32:08,880
however here this wasn't the case in our

820
00:32:08,880 --> 00:32:11,279
crash what the fuzzer did here is not to

821
00:32:11,279 --> 00:32:13,279
change the format itself because it's

822
00:32:13,279 --> 00:32:15,440
still three it's still the same index

823
00:32:15,440 --> 00:32:17,919
but the fuzzer changed the whole format

824
00:32:17,919 --> 00:32:20,559
array uh for a smaller one so from three

825
00:32:20,559 --> 00:32:23,760
to one size over a uh which ultimately

826
00:32:23,760 --> 00:32:26,480
led to an out of bound access

827
00:32:26,480 --> 00:32:28,880
and to crashing the target

828
00:32:28,880 --> 00:32:30,960
so as you can see this is an out of

829
00:32:30,960 --> 00:32:33,919
bound read um with a very limited impact

830
00:32:33,919 --> 00:32:36,000
but it was a good example uh and it

831
00:32:36,000 --> 00:32:37,679
demonstrates how effective the

832
00:32:37,679 --> 00:32:40,640
multi-input fuzzing approach was

833
00:32:40,640 --> 00:32:42,960
all right so uh we had quite a lot of

834
00:32:42,960 --> 00:32:45,440
fun i think um so let's summarize this

835
00:32:45,440 --> 00:32:46,640
session

836
00:32:46,640 --> 00:32:49,279
the first one we'd like to make um is

837
00:32:49,279 --> 00:32:50,159
that

838
00:32:50,159 --> 00:32:51,919
we believe at least that nothing can be

839
00:32:51,919 --> 00:32:53,840
deemed unfuzzible

840
00:32:53,840 --> 00:32:55,919
um this project shows that no matter how

841
00:32:55,919 --> 00:32:58,080
complex the target might be you can

842
00:32:58,080 --> 00:33:00,320
always find a way to fuss that

843
00:33:00,320 --> 00:33:02,240
especially when you wear a

844
00:33:02,240 --> 00:33:05,039
snapshot-based fuzzers um like for

845
00:33:05,039 --> 00:33:07,519
example what the fuzz by overclock

846
00:33:07,519 --> 00:33:09,760
um and also just let the father do the

847
00:33:09,760 --> 00:33:11,440
work for you you don't really want to

848
00:33:11,440 --> 00:33:13,840
put all that effort and manually analyze

849
00:33:13,840 --> 00:33:15,279
your targets right because what's the

850
00:33:15,279 --> 00:33:17,279
fun in that

851
00:33:17,279 --> 00:33:19,440
all right regarding future work in the

852
00:33:19,440 --> 00:33:20,640
field

853
00:33:20,640 --> 00:33:22,399
we do believe that it's still worth

854
00:33:22,399 --> 00:33:25,679
putting more effort into fuzzing rdp

855
00:33:25,679 --> 00:33:28,399
our project was not ideal in many ways

856
00:33:28,399 --> 00:33:30,320
and it can be improved on in different

857
00:33:30,320 --> 00:33:33,279
aspects um due to the huge code base and

858
00:33:33,279 --> 00:33:35,279
the number of logical channels

859
00:33:35,279 --> 00:33:37,279
we bet that there are still more fun

860
00:33:37,279 --> 00:33:40,480
more stuff to find in rgb and we may go

861
00:33:40,480 --> 00:33:43,279
back to pursuing it in the near future

862
00:33:43,279 --> 00:33:45,600
the other thing is that the platform

863
00:33:45,600 --> 00:33:47,679
we've built around fuzzing rdp can be

864
00:33:47,679 --> 00:33:49,440
directed at a completely different

865
00:33:49,440 --> 00:33:52,480
target on windows um so by platform we

866
00:33:52,480 --> 00:33:54,640
mean the multi-input fuzzing the

867
00:33:54,640 --> 00:33:56,320
attaching to windows services

868
00:33:56,320 --> 00:33:58,399
automatically analyzing crashes and and

869
00:33:58,399 --> 00:34:00,159
all that other stuff

870
00:34:00,159 --> 00:34:02,559
um and we started doing just that

871
00:34:02,559 --> 00:34:04,399
for some components in the windows

872
00:34:04,399 --> 00:34:06,399
hyper-v

873
00:34:06,399 --> 00:34:07,679
and also

874
00:34:07,679 --> 00:34:10,480
for a few rpc servers on windows and we

875
00:34:10,480 --> 00:34:12,800
got some promising preliminary results

876
00:34:12,800 --> 00:34:15,520
so do expect to hear more about that in

877
00:34:15,520 --> 00:34:17,440
the near future

878
00:34:17,440 --> 00:34:19,040
we also pushed all

879
00:34:19,040 --> 00:34:20,960
of our tools to github

880
00:34:20,960 --> 00:34:22,639
all the stuff that we used and developed

881
00:34:22,639 --> 00:34:25,679
in the project um you can check them out

882
00:34:25,679 --> 00:34:29,760
uh in the url down here um you will find

883
00:34:29,760 --> 00:34:32,239
all the stuff we talked about today over

884
00:34:32,239 --> 00:34:35,520
this on this ripple um it's not an

885
00:34:35,520 --> 00:34:37,760
off-the-shelf ready-to-use type of thing

886
00:34:37,760 --> 00:34:39,839
but it can give you a jump start if

887
00:34:39,839 --> 00:34:41,599
you're looking to file something similar

888
00:34:41,599 --> 00:34:44,639
on windows and also the main features we

889
00:34:44,639 --> 00:34:47,440
added to win afl and to dynamo rio are

890
00:34:47,440 --> 00:34:49,679
now merged into the main branch of the

891
00:34:49,679 --> 00:34:52,480
tools and they are available for anyone

892
00:34:52,480 --> 00:34:53,918
to use

893
00:34:53,918 --> 00:34:55,679
finally let me just say that we

894
00:34:55,679 --> 00:34:57,760
encourage everyone to use the techniques

895
00:34:57,760 --> 00:35:00,320
and tools that we've developed in any

896
00:35:00,320 --> 00:35:02,640
way they see fit and we're happy to

897
00:35:02,640 --> 00:35:05,280
discuss everything fuzzing related so

898
00:35:05,280 --> 00:35:07,520
please reach out to us the best place to

899
00:35:07,520 --> 00:35:10,079
find us is on twitter

900
00:35:10,079 --> 00:35:11,040
and

901
00:35:11,040 --> 00:35:12,880
thank you very much i hope you enjoyed

902
00:35:12,880 --> 00:35:15,760
this session i hope you will enjoy your

903
00:35:15,760 --> 00:35:17,839
conference and thank you for the

904
00:35:17,839 --> 00:35:19,920
organizers for having us

905
00:35:19,920 --> 00:35:22,880
good day

