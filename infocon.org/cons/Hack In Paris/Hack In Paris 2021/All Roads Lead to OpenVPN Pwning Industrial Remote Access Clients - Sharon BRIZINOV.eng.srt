1
00:00:00,160 --> 00:00:02,080
hello everyone and welcome to my talk

2
00:00:02,080 --> 00:00:04,799
all roads related to openvpn pwning

3
00:00:04,799 --> 00:00:07,359
industrial remote access clients my name

4
00:00:07,359 --> 00:00:08,639
is fran brzezinov and i work at

5
00:00:08,639 --> 00:00:11,280
colorting and in this talk we'll i will

6
00:00:11,280 --> 00:00:12,719
describe

7
00:00:12,719 --> 00:00:14,559
and tell you a story behind the research

8
00:00:14,559 --> 00:00:16,239
we've conducted in our research

9
00:00:16,239 --> 00:00:17,840
department and

10
00:00:17,840 --> 00:00:20,560
clarity so let's start quickly with who

11
00:00:20,560 --> 00:00:22,960
am i so as i said my name is sharon

12
00:00:22,960 --> 00:00:25,119
brzezinov i'm a vulnerability research

13
00:00:25,119 --> 00:00:28,480
team laid at clarity and my main focus

14
00:00:28,480 --> 00:00:32,079
area of research is ics cyber security

15
00:00:32,079 --> 00:00:35,520
and as you can see here our lab we have

16
00:00:35,520 --> 00:00:38,879
a lot of ics related equipment with plcs

17
00:00:38,879 --> 00:00:41,360
hmis engineering working stations

18
00:00:41,360 --> 00:00:43,120
we have all different kind of sensors

19
00:00:43,120 --> 00:00:45,440
and field devices that we're playing

20
00:00:45,440 --> 00:00:47,360
with that's why we love to call it the

21
00:00:47,360 --> 00:00:49,039
playground

22
00:00:49,039 --> 00:00:51,840
but is the the official name is is our

23
00:00:51,840 --> 00:00:53,199
lab

24
00:00:53,199 --> 00:00:55,199
so let's start with

25
00:00:55,199 --> 00:00:57,039
the agenda for today so first of all i'm

26
00:00:57,039 --> 00:00:58,800
going to tell you the story behind this

27
00:00:58,800 --> 00:01:02,239
research then we'll go over quickly uh

28
00:01:02,239 --> 00:01:03,039
and

29
00:01:03,039 --> 00:01:05,199
we'll describe what is an industrial ot

30
00:01:05,199 --> 00:01:06,240
networks

31
00:01:06,240 --> 00:01:08,000
then we're going to discuss what are

32
00:01:08,000 --> 00:01:10,080
remote access solutions

33
00:01:10,080 --> 00:01:11,119
and

34
00:01:11,119 --> 00:01:11,920
what

35
00:01:11,920 --> 00:01:14,960
what's the relation to openvpn and what

36
00:01:14,960 --> 00:01:17,759
are the design flows that we found in

37
00:01:17,759 --> 00:01:20,159
how remote access solutions are

38
00:01:20,159 --> 00:01:24,000
implementing openvpn and why and how we

39
00:01:24,000 --> 00:01:27,200
abused and exploited this fact to gain a

40
00:01:27,200 --> 00:01:29,840
couple of vulnerabilities in cvs

41
00:01:29,840 --> 00:01:30,880
so

42
00:01:30,880 --> 00:01:32,880
with that let's start with our story

43
00:01:32,880 --> 00:01:36,320
time so uh 2020 as you all know the

44
00:01:36,320 --> 00:01:38,720
corona virus the current epidemic broke

45
00:01:38,720 --> 00:01:41,280
out around the world and people started

46
00:01:41,280 --> 00:01:42,640
to work from home

47
00:01:42,640 --> 00:01:43,520
so

48
00:01:43,520 --> 00:01:46,479
wfas work from home become very popular

49
00:01:46,479 --> 00:01:48,720
but people still still need it to work

50
00:01:48,720 --> 00:01:51,920
somehow so

51
00:01:52,479 --> 00:01:55,280
working places started to use vpns and

52
00:01:55,280 --> 00:01:57,439
vpns

53
00:01:57,439 --> 00:01:59,840
as you know allow people to connect

54
00:01:59,840 --> 00:02:02,960
remotely to other networks so uh it's a

55
00:02:02,960 --> 00:02:06,079
future private network that allows uh in

56
00:02:06,079 --> 00:02:08,399
this case employees to connect to their

57
00:02:08,399 --> 00:02:11,599
working place without being physical and

58
00:02:11,599 --> 00:02:13,200
on-site

59
00:02:13,200 --> 00:02:14,720
and

60
00:02:14,720 --> 00:02:16,879
we as a security

61
00:02:16,879 --> 00:02:18,720
cyber security firm and other

62
00:02:18,720 --> 00:02:21,200
researchers and also attackers across

63
00:02:21,200 --> 00:02:23,520
the globe started to look into vpn

64
00:02:23,520 --> 00:02:26,640
solutions and remote access solutions

65
00:02:26,640 --> 00:02:29,840
to find vulnerabilities in so

66
00:02:29,840 --> 00:02:32,080
many researchers started to

67
00:02:32,080 --> 00:02:34,239
discover vulnerabilities and attackers

68
00:02:34,239 --> 00:02:36,239
started hackers started to exploit these

69
00:02:36,239 --> 00:02:38,640
vulnerabilities

70
00:02:38,640 --> 00:02:39,519
and

71
00:02:39,519 --> 00:02:40,640
we too

72
00:02:40,640 --> 00:02:43,840
in clarity started to research these

73
00:02:43,840 --> 00:02:46,160
uh products and eventually we found a

74
00:02:46,160 --> 00:02:47,840
couple of an abilities and we got our

75
00:02:47,840 --> 00:02:48,959
cvs

76
00:02:48,959 --> 00:02:52,080
and when i'm discussing vpn so usually

77
00:02:52,080 --> 00:02:54,879
in the industrial world um we're usually

78
00:02:54,879 --> 00:02:57,760
talking about an engineer for so in this

79
00:02:57,760 --> 00:03:00,400
example we have here let's call it

80
00:03:00,400 --> 00:03:03,280
rachel the rachel the engineer and she's

81
00:03:03,280 --> 00:03:05,920
working from home it's corona time so

82
00:03:05,920 --> 00:03:07,200
her kids

83
00:03:07,200 --> 00:03:09,200
are home too and you can see the baby on

84
00:03:09,200 --> 00:03:11,840
her hands and she's trying to work

85
00:03:11,840 --> 00:03:14,400
but from home she's trying to connect uh

86
00:03:14,400 --> 00:03:18,159
to the industrial network in the factory

87
00:03:18,159 --> 00:03:19,760
uh and so

88
00:03:19,760 --> 00:03:22,879
her goal is to communicate with one of

89
00:03:22,879 --> 00:03:25,280
the devices in the network in this

90
00:03:25,280 --> 00:03:28,000
example it's a robotic arm that

91
00:03:28,000 --> 00:03:30,159
she's trying to control somehow and for

92
00:03:30,159 --> 00:03:32,799
that she needs to connect to the vpn so

93
00:03:32,799 --> 00:03:36,159
she's using she's using a vpn software

94
00:03:36,159 --> 00:03:36,959
on

95
00:03:36,959 --> 00:03:39,599
uh on her computer so on her private

96
00:03:39,599 --> 00:03:40,799
time machine

97
00:03:40,799 --> 00:03:43,280
uh and using this software she is able

98
00:03:43,280 --> 00:03:45,360
to connect through vpn tunnel to the

99
00:03:45,360 --> 00:03:47,200
network and she's able to control the

100
00:03:47,200 --> 00:03:51,200
robotic arm so our goal was

101
00:03:51,200 --> 00:03:54,080
if we can find since many researchers

102
00:03:54,080 --> 00:03:55,920
are trying to find vulnerability in the

103
00:03:55,920 --> 00:03:57,840
vpn servers

104
00:03:57,840 --> 00:04:01,680
we tried to focus this time on rachel's

105
00:04:01,680 --> 00:04:04,319
machine so we tried it to focus on the

106
00:04:04,319 --> 00:04:07,920
computer or the client side and we poked

107
00:04:07,920 --> 00:04:10,159
we poked different industrial remote

108
00:04:10,159 --> 00:04:12,400
access clans to find vulnerabilities in

109
00:04:12,400 --> 00:04:13,599
them

110
00:04:13,599 --> 00:04:14,400
so

111
00:04:14,400 --> 00:04:16,238
that's the background

112
00:04:16,238 --> 00:04:19,440
on on the research or why we started it

113
00:04:19,440 --> 00:04:21,839
and now let's talk a little bit about

114
00:04:21,839 --> 00:04:24,880
our domain field so it industrial ot

115
00:04:24,880 --> 00:04:27,280
networks and let's start with this

116
00:04:27,280 --> 00:04:28,479
diagram

117
00:04:28,479 --> 00:04:31,520
or uh image from a factory so as you can

118
00:04:31,520 --> 00:04:34,080
see here it's a starter factory we can

119
00:04:34,080 --> 00:04:36,160
see a conveyor belt here so this

120
00:04:36,160 --> 00:04:39,680
conveyor belt is just

121
00:04:41,040 --> 00:04:44,960
is just a belt that spins and used to

122
00:04:44,960 --> 00:04:48,000
move objects from one side of the plant

123
00:04:48,000 --> 00:04:50,880
or factory to the other side and across

124
00:04:50,880 --> 00:04:53,520
this belt there are a couple of sensors

125
00:04:53,520 --> 00:04:54,479
and

126
00:04:54,479 --> 00:04:57,360
actuators or motors that

127
00:04:57,360 --> 00:05:01,919
spins and tell this belt how to spin and

128
00:05:01,919 --> 00:05:04,800
what controls this entire belt and this

129
00:05:04,800 --> 00:05:08,720
entire mechanism is a device called blc

130
00:05:08,720 --> 00:05:12,160
and the plc is the brain behind actually

131
00:05:12,160 --> 00:05:13,840
every machinery that you see in the

132
00:05:13,840 --> 00:05:16,639
industrial world uh there are tons of

133
00:05:16,639 --> 00:05:19,600
different vendors of plc's and this is

134
00:05:19,600 --> 00:05:21,759
just an example i found there online but

135
00:05:21,759 --> 00:05:24,800
this plc what's important in it is it is

136
00:05:24,800 --> 00:05:27,600
that it runs logic continuously running

137
00:05:27,600 --> 00:05:30,960
logic so what happens is that the

138
00:05:30,960 --> 00:05:32,320
programmer

139
00:05:32,320 --> 00:05:34,720
writing logic to this plc transfers the

140
00:05:34,720 --> 00:05:36,720
logic to this plc

141
00:05:36,720 --> 00:05:40,080
and the programmer is using uh

142
00:05:40,080 --> 00:05:42,880
something similar to ide so

143
00:05:42,880 --> 00:05:44,960
for example this is the

144
00:05:44,960 --> 00:05:47,440
the id that the engineering is using and

145
00:05:47,440 --> 00:05:49,440
the the right terminology for this is

146
00:05:49,440 --> 00:05:51,360
engineering working station so using the

147
00:05:51,360 --> 00:05:53,600
engineer working station they're writing

148
00:05:53,600 --> 00:05:55,600
logic for example

149
00:05:55,600 --> 00:05:57,600
how to read data from different sensors

150
00:05:57,600 --> 00:05:59,360
and how to command the different

151
00:05:59,360 --> 00:06:01,680
actuators and modders so the first step

152
00:06:01,680 --> 00:06:03,440
would be to program

153
00:06:03,440 --> 00:06:05,840
the logic that will be executed on the

154
00:06:05,840 --> 00:06:08,880
plc and then the plc can

155
00:06:08,880 --> 00:06:11,440
run continuously this logic and control

156
00:06:11,440 --> 00:06:13,840
the sensors and actuators

157
00:06:13,840 --> 00:06:17,039
for example motors on the conveyor belt

158
00:06:17,039 --> 00:06:19,520
or other machinery to control it so for

159
00:06:19,520 --> 00:06:22,400
example uh the plc can receive data from

160
00:06:22,400 --> 00:06:25,039
the sensors that tells it the height of

161
00:06:25,039 --> 00:06:27,440
a certain box and then based on the

162
00:06:27,440 --> 00:06:30,160
written logic the

163
00:06:30,160 --> 00:06:31,840
plc can decide

164
00:06:31,840 --> 00:06:34,479
how to change the actuators or the are

165
00:06:34,479 --> 00:06:37,440
the motors to drive this object across

166
00:06:37,440 --> 00:06:40,720
the conveyor belt so this is the brain

167
00:06:40,720 --> 00:06:43,120
and most of the industrial networks are

168
00:06:43,120 --> 00:06:44,639
built uh

169
00:06:44,639 --> 00:06:48,400
on these plcs and this uh

170
00:06:48,400 --> 00:06:49,840
this scheme of engineering working

171
00:06:49,840 --> 00:06:51,440
station and a plc

172
00:06:51,440 --> 00:06:54,720
and again engineers are writing programs

173
00:06:54,720 --> 00:06:56,639
in the engineering working station which

174
00:06:56,639 --> 00:06:59,199
is a windows based software and through

175
00:06:59,199 --> 00:07:01,360
this software they're transferring the

176
00:07:01,360 --> 00:07:02,720
the logic

177
00:07:02,720 --> 00:07:04,479
that will be executed on the plc and

178
00:07:04,479 --> 00:07:07,199
then the plc is the one that controls

179
00:07:07,199 --> 00:07:10,000
the actual sensors or and other field

180
00:07:10,000 --> 00:07:12,240
devices

181
00:07:12,240 --> 00:07:15,520
and the goal of

182
00:07:15,520 --> 00:07:17,360
people that managing and writing

183
00:07:17,360 --> 00:07:19,280
programs to these plcs and actually

184
00:07:19,280 --> 00:07:21,759
maintaining these pcs is to

185
00:07:21,759 --> 00:07:23,919
connect to these pcs so they need

186
00:07:23,919 --> 00:07:27,199
connectivity to these these plc's and

187
00:07:27,199 --> 00:07:29,360
they're doing this with remote access

188
00:07:29,360 --> 00:07:31,759
solutions when they're working from home

189
00:07:31,759 --> 00:07:34,160
so this is a very basic scheme of how

190
00:07:34,160 --> 00:07:36,720
remote access solutions are working

191
00:07:36,720 --> 00:07:40,160
basically you can see here the engineer

192
00:07:40,160 --> 00:07:43,360
working from home and they need access

193
00:07:43,360 --> 00:07:45,360
for this in our example we're using

194
00:07:45,360 --> 00:07:48,479
rachel rachel needs access from her home

195
00:07:48,479 --> 00:07:51,039
to the factory where she can control the

196
00:07:51,039 --> 00:07:53,919
plc's hmis and other devices on the

197
00:07:53,919 --> 00:07:56,879
industrial network and to do that she's

198
00:07:56,879 --> 00:07:59,759
using she's using a vpn service or a

199
00:07:59,759 --> 00:08:02,400
remote access solution

200
00:08:02,400 --> 00:08:04,960
and it starts with a client on her

201
00:08:04,960 --> 00:08:07,759
computer which connects through a cloud

202
00:08:07,759 --> 00:08:11,199
gateway to a physical embedded device on

203
00:08:11,199 --> 00:08:12,479
the network

204
00:08:12,479 --> 00:08:13,759
and

205
00:08:13,759 --> 00:08:15,520
uh this

206
00:08:15,520 --> 00:08:17,759
this hardware appliance actually has two

207
00:08:17,759 --> 00:08:20,639
network interfaces one on the internet

208
00:08:20,639 --> 00:08:23,520
outside and one into the ulti network

209
00:08:23,520 --> 00:08:26,160
and then she has connectivity

210
00:08:26,160 --> 00:08:29,039
to the plcs she can write programs and

211
00:08:29,039 --> 00:08:32,000
change the logic on these pcs or monitor

212
00:08:32,000 --> 00:08:35,120
these plcs that will eventually control

213
00:08:35,120 --> 00:08:37,360
the actual field devices for example the

214
00:08:37,360 --> 00:08:39,519
robotic arm that we've discussed before

215
00:08:39,519 --> 00:08:41,519
so she needs this connectivity to

216
00:08:41,519 --> 00:08:43,519
control the plc which controls the

217
00:08:43,519 --> 00:08:44,959
robotic arm

218
00:08:44,959 --> 00:08:45,760
and

219
00:08:45,760 --> 00:08:48,080
this tunnel here although it looks very

220
00:08:48,080 --> 00:08:49,680
simple is actually

221
00:08:49,680 --> 00:08:51,839
not that simple so

222
00:08:51,839 --> 00:08:54,560
in the modern days we have a terminology

223
00:08:54,560 --> 00:08:56,800
called vpn a virtual private network

224
00:08:56,800 --> 00:08:59,600
which essentially creates a vpn talent

225
00:08:59,600 --> 00:09:02,080
between two places so the remote client

226
00:09:02,080 --> 00:09:04,240
can communicate

227
00:09:04,240 --> 00:09:07,040
internally on the other side with a

228
00:09:07,040 --> 00:09:08,399
remote network

229
00:09:08,399 --> 00:09:11,360
and it does this by encrypting the

230
00:09:11,360 --> 00:09:14,160
payload on the entrance to this tunnel

231
00:09:14,160 --> 00:09:16,240
so this is the packet that we want to

232
00:09:16,240 --> 00:09:19,040
send to the other side the vpn service

233
00:09:19,040 --> 00:09:20,800
will actually take this packet that we

234
00:09:20,800 --> 00:09:22,959
want to send encrypt it and then add a

235
00:09:22,959 --> 00:09:25,360
couple of more headers and then send it

236
00:09:25,360 --> 00:09:28,080
across the tunnel to the other side then

237
00:09:28,080 --> 00:09:30,240
it will be dissected

238
00:09:30,240 --> 00:09:31,920
and broken down

239
00:09:31,920 --> 00:09:34,640
all these layers will be teared off and

240
00:09:34,640 --> 00:09:37,519
then the payload our packet will be sent

241
00:09:37,519 --> 00:09:39,760
internally on the network

242
00:09:39,760 --> 00:09:40,800
and

243
00:09:40,800 --> 00:09:43,040
one of the most common solutions when

244
00:09:43,040 --> 00:09:45,760
we're talking about vpns is openvpn

245
00:09:45,760 --> 00:09:48,240
because this is a great

246
00:09:48,240 --> 00:09:50,800
open source implementation of a vpn

247
00:09:50,800 --> 00:09:53,519
protocol so it consists of client and

248
00:09:53,519 --> 00:09:55,440
server applications it consists of a

249
00:09:55,440 --> 00:09:58,200
dedicated protocol over udp

250
00:09:58,200 --> 00:10:03,760
1194 and it works and this vpn open and

251
00:10:03,760 --> 00:10:06,640
actually any other vpn application works

252
00:10:06,640 --> 00:10:09,279
as follows so we have this application

253
00:10:09,279 --> 00:10:11,680
which is not it's completely unaware of

254
00:10:11,680 --> 00:10:12,959
the vpn

255
00:10:12,959 --> 00:10:16,079
uh secure tunnel but it needs to send

256
00:10:16,079 --> 00:10:18,320
data to

257
00:10:18,320 --> 00:10:21,839
what it thinks is a nearby

258
00:10:21,839 --> 00:10:24,640
device so in our example rachel is using

259
00:10:24,640 --> 00:10:27,360
this engineer working station to send

260
00:10:27,360 --> 00:10:31,120
data or to read data from a plc

261
00:10:31,120 --> 00:10:34,240
which is actually remote on the remote

262
00:10:34,240 --> 00:10:36,880
location but this application thinks

263
00:10:36,880 --> 00:10:40,240
that the plc is nearby and what hack

264
00:10:40,240 --> 00:10:41,680
actually happens beyond the scene is

265
00:10:41,680 --> 00:10:43,360
this application tries to communicate

266
00:10:43,360 --> 00:10:44,839
with the plc

267
00:10:44,839 --> 00:10:47,680
and instead of

268
00:10:47,680 --> 00:10:49,920
instead of the network packets directly

269
00:10:49,920 --> 00:10:53,040
reaching the the plc what happens is the

270
00:10:53,040 --> 00:10:55,519
entire network traffic goes through a

271
00:10:55,519 --> 00:10:58,079
ton zero which is a virtual network

272
00:10:58,079 --> 00:11:01,920
interface and distance 0 what it does

273
00:11:01,920 --> 00:11:04,399
is redirect the

274
00:11:04,399 --> 00:11:07,440
redirect the traffic through openvpn

275
00:11:07,440 --> 00:11:10,959
instance in which the openvpn adds these

276
00:11:10,959 --> 00:11:12,480
layers of

277
00:11:12,480 --> 00:11:14,880
different headers and also encrypts the

278
00:11:14,880 --> 00:11:16,480
internal data

279
00:11:16,480 --> 00:11:19,360
and then it sends it sends it through

280
00:11:19,360 --> 00:11:21,760
the real interface and now the packet

281
00:11:21,760 --> 00:11:23,600
here is encrypted

282
00:11:23,600 --> 00:11:26,959
and goes through the vpn tunnel so

283
00:11:26,959 --> 00:11:29,680
openvpn is a great implementation for

284
00:11:29,680 --> 00:11:31,760
vpn it's very easy to use and highly

285
00:11:31,760 --> 00:11:34,560
configurable vpn system and that's why

286
00:11:34,560 --> 00:11:37,200
many remote access solutions are not

287
00:11:37,200 --> 00:11:40,000
implementing the vpn protocol themselves

288
00:11:40,000 --> 00:11:44,240
but they are uh they're using uh as a

289
00:11:44,240 --> 00:11:46,160
black box or out of the box they open

290
00:11:46,160 --> 00:11:49,120
vpn which is a great uh uh great

291
00:11:49,120 --> 00:11:51,920
implementation of the vpn and it saves

292
00:11:51,920 --> 00:11:54,880
them a great amount of time

293
00:11:54,880 --> 00:11:58,240
so uh i've recorded it recording using

294
00:11:58,240 --> 00:11:59,519
wireshark

295
00:11:59,519 --> 00:12:01,680
session with openvpn and as you can see

296
00:12:01,680 --> 00:12:04,399
here i'm sending encrypted data and

297
00:12:04,399 --> 00:12:06,560
everything is being sent encrypted

298
00:12:06,560 --> 00:12:08,480
through the vpn tunnel

299
00:12:08,480 --> 00:12:10,800
and everything works as it should so

300
00:12:10,800 --> 00:12:13,440
just to conclude openvpn

301
00:12:13,440 --> 00:12:15,680
is a great standard

302
00:12:15,680 --> 00:12:18,240
and a great implementation of vpn

303
00:12:18,240 --> 00:12:20,480
service and remote

304
00:12:20,480 --> 00:12:22,320
remote access solutions specifically in

305
00:12:22,320 --> 00:12:25,360
the industrial world instead of creating

306
00:12:25,360 --> 00:12:28,160
their own vpn implementation they're

307
00:12:28,160 --> 00:12:31,120
using openvpn out of the box which saves

308
00:12:31,120 --> 00:12:33,519
them a great amount of time

309
00:12:33,519 --> 00:12:34,480
so

310
00:12:34,480 --> 00:12:35,839
let's talk a little bit about the

311
00:12:35,839 --> 00:12:38,720
specific feature in openvpn

312
00:12:38,720 --> 00:12:41,760
which we found a kind of a problematic

313
00:12:41,760 --> 00:12:44,480
way to implement it so this feature is

314
00:12:44,480 --> 00:12:47,120
called management interface but before

315
00:12:47,120 --> 00:12:50,079
we're diving in into what is an open vpn

316
00:12:50,079 --> 00:12:52,880
management interface i want to raise an

317
00:12:52,880 --> 00:12:54,880
issue that

318
00:12:54,880 --> 00:12:57,120
remote access solution vendors itself

319
00:12:57,120 --> 00:12:59,360
software vendors encountered

320
00:12:59,360 --> 00:13:00,399
so

321
00:13:00,399 --> 00:13:03,839
the problem is that low privileged users

322
00:13:03,839 --> 00:13:05,839
need the ability to connect to the vpn

323
00:13:05,839 --> 00:13:08,000
tunnel for example rachel

324
00:13:08,000 --> 00:13:10,959
probably through the organization policy

325
00:13:10,959 --> 00:13:12,639
in her domain

326
00:13:12,639 --> 00:13:14,959
is defined as a low privileged user so

327
00:13:14,959 --> 00:13:16,959
even if her computer will get infected

328
00:13:16,959 --> 00:13:19,200
somehow by malware the malware will have

329
00:13:19,200 --> 00:13:20,959
no admin rights

330
00:13:20,959 --> 00:13:24,160
but openvpn needs admin rights to head

331
00:13:24,160 --> 00:13:26,079
routes and configurations and to

332
00:13:26,079 --> 00:13:28,399
configure them

333
00:13:28,399 --> 00:13:31,040
the virtual network interface and

334
00:13:31,040 --> 00:13:33,760
other configuration needed and for this

335
00:13:33,760 --> 00:13:36,560
configuration admin rights are needed

336
00:13:36,560 --> 00:13:39,760
for the process so for the open vpn uh

337
00:13:39,760 --> 00:13:43,279
instance that is running but rachel is

338
00:13:43,279 --> 00:13:45,600
activating the tunnel so rachel decides

339
00:13:45,600 --> 00:13:48,399
when she wants to connect to her

340
00:13:48,399 --> 00:13:51,680
to her office network and she is

341
00:13:51,680 --> 00:13:53,519
unprivileged user

342
00:13:53,519 --> 00:13:56,639
in her domain so what happens is that

343
00:13:56,639 --> 00:13:59,440
low privileged users has no ability to

344
00:13:59,440 --> 00:14:02,000
use vpns because they don't have admin

345
00:14:02,000 --> 00:14:03,760
rights to configure the different routes

346
00:14:03,760 --> 00:14:04,880
needed

347
00:14:04,880 --> 00:14:08,079
and that's why openvpn understood this

348
00:14:08,079 --> 00:14:10,160
and that's why they've created the

349
00:14:10,160 --> 00:14:13,199
openvpn management interface and

350
00:14:13,199 --> 00:14:15,360
essentially the openvpn management

351
00:14:15,360 --> 00:14:18,199
interface allows openvpn to be

352
00:14:18,199 --> 00:14:20,399
administratively controlled from an

353
00:14:20,399 --> 00:14:22,240
external program

354
00:14:22,240 --> 00:14:25,920
through a socket the tcp socket so open

355
00:14:25,920 --> 00:14:27,440
it's an openvpn feature to

356
00:14:27,440 --> 00:14:29,680
programmatically control

357
00:14:29,680 --> 00:14:32,880
a running opm vpn process through as a

358
00:14:32,880 --> 00:14:35,360
tcp socket so basically

359
00:14:35,360 --> 00:14:38,639
uh vpn processor openvpn process is

360
00:14:38,639 --> 00:14:41,199
running and his weight is listening on

361
00:14:41,199 --> 00:14:43,600
one of the tcp ports and is waiting for

362
00:14:43,600 --> 00:14:46,720
a command such as start the vpn tunnel

363
00:14:46,720 --> 00:14:48,639
using this configuration and then it

364
00:14:48,639 --> 00:14:51,040
reads the configuration and starts

365
00:14:51,040 --> 00:14:54,399
running so if we if you want to uh

366
00:14:54,399 --> 00:14:56,160
understand better the

367
00:14:56,160 --> 00:14:58,240
scheme of uh entire remote access

368
00:14:58,240 --> 00:15:00,480
solution you can you can consider this

369
00:15:00,480 --> 00:15:04,720
so we have open vpn which is initially

370
00:15:04,720 --> 00:15:08,160
started as a high privileged uh service

371
00:15:08,160 --> 00:15:09,920
so when we're talking about windows

372
00:15:09,920 --> 00:15:14,079
based machines usually the open vpn

373
00:15:14,079 --> 00:15:18,000
is is configured to run as a service

374
00:15:18,000 --> 00:15:19,760
i'm sorry it's configured to run with

375
00:15:19,760 --> 00:15:22,880
high privileges and the open vpn

376
00:15:22,880 --> 00:15:24,639
instance is waiting

377
00:15:24,639 --> 00:15:27,120
using the management interface feature

378
00:15:27,120 --> 00:15:30,160
is waiting for commands so once it will

379
00:15:30,160 --> 00:15:32,800
receive a command it will open it will

380
00:15:32,800 --> 00:15:34,800
start and open the tunnel to the home

381
00:15:34,800 --> 00:15:36,959
office which sits on the other side of

382
00:15:36,959 --> 00:15:39,839
the internet so right now we have the

383
00:15:39,839 --> 00:15:41,360
host machine

384
00:15:41,360 --> 00:15:44,079
here this is the host machine and one of

385
00:15:44,079 --> 00:15:46,880
the processes running is openvpn and it

386
00:15:46,880 --> 00:15:48,880
waits for a command

387
00:15:48,880 --> 00:15:51,040
and what happens usually when we're

388
00:15:51,040 --> 00:15:52,560
talking about the remote access

389
00:15:52,560 --> 00:15:56,000
solutions is the following diagram so we

390
00:15:56,000 --> 00:15:56,959
have

391
00:15:56,959 --> 00:15:59,199
before the openvpn

392
00:15:59,199 --> 00:16:01,759
we have a service so this is a high

393
00:16:01,759 --> 00:16:03,680
privileged service

394
00:16:03,680 --> 00:16:05,680
that is also waiting for a command

395
00:16:05,680 --> 00:16:07,920
because this is a service a windows

396
00:16:07,920 --> 00:16:11,360
service and it receives the command when

397
00:16:11,360 --> 00:16:13,920
low privileged software is being opened

398
00:16:13,920 --> 00:16:16,160
by a low privileged user

399
00:16:16,160 --> 00:16:19,040
and this low privileged user is starting

400
00:16:19,040 --> 00:16:21,040
the low privileged application which is

401
00:16:21,040 --> 00:16:23,759
just a front-end application and the

402
00:16:23,759 --> 00:16:25,120
whole purpose of the front-end

403
00:16:25,120 --> 00:16:28,399
application is to tell the service again

404
00:16:28,399 --> 00:16:31,360
through a tcp connection tcp socket

405
00:16:31,360 --> 00:16:33,759
tells the service which is always

406
00:16:33,759 --> 00:16:36,480
running in the background to start the

407
00:16:36,480 --> 00:16:38,800
openvpn instance and the openvpn

408
00:16:38,800 --> 00:16:42,399
instance is always listening for uh a

409
00:16:42,399 --> 00:16:44,959
command to start the tunnel to kill the

410
00:16:44,959 --> 00:16:48,160
tunnel and it does it again through the

411
00:16:48,160 --> 00:16:50,480
management interface feature

412
00:16:50,480 --> 00:16:54,160
and now we have this service which runs

413
00:16:54,160 --> 00:16:56,320
the backend service

414
00:16:56,320 --> 00:16:58,560
which runs with high privileges and

415
00:16:58,560 --> 00:17:01,199
since it is the one that starts the open

416
00:17:01,199 --> 00:17:03,440
vpn

417
00:17:03,440 --> 00:17:06,240
process it can control it using the

418
00:17:06,240 --> 00:17:09,760
management interface and that's why and

419
00:17:09,760 --> 00:17:13,280
how low privileged user can start the

420
00:17:13,280 --> 00:17:15,439
entire chain

421
00:17:15,439 --> 00:17:17,520
just because of this cool feature that

422
00:17:17,520 --> 00:17:20,640
allows openvpn to wait for commands and

423
00:17:20,640 --> 00:17:22,959
now of course we have low privileged

424
00:17:22,959 --> 00:17:24,240
user

425
00:17:24,240 --> 00:17:26,400
that can start vpn

426
00:17:26,400 --> 00:17:27,839
services

427
00:17:27,839 --> 00:17:29,600
if we did not have

428
00:17:29,600 --> 00:17:30,400
this

429
00:17:30,400 --> 00:17:33,840
feature of openvpn management interface

430
00:17:33,840 --> 00:17:35,440
we would have needed

431
00:17:35,440 --> 00:17:38,880
to be privileged users or admin users to

432
00:17:38,880 --> 00:17:42,160
start the the openvpn instance

433
00:17:42,160 --> 00:17:45,440
but this feature saves us the need for

434
00:17:45,440 --> 00:17:48,720
uh for being administrators on on the

435
00:17:48,720 --> 00:17:51,360
machines and even low privileged users

436
00:17:51,360 --> 00:17:53,520
can start open vpn

437
00:17:53,520 --> 00:17:55,520
uh tunnels

438
00:17:55,520 --> 00:17:58,000
so this is the basic scheme and as you

439
00:17:58,000 --> 00:18:00,320
can see here i've put a product logo

440
00:18:00,320 --> 00:18:02,799
just because we've seen this

441
00:18:02,799 --> 00:18:06,559
exact architecture or design

442
00:18:06,559 --> 00:18:09,360
layout of openvpn being controlled by a

443
00:18:09,360 --> 00:18:10,799
backend service which is being

444
00:18:10,799 --> 00:18:12,880
controlled by a front-end application

445
00:18:12,880 --> 00:18:16,000
we've seen this many times and we found

446
00:18:16,000 --> 00:18:18,640
an issue with this so now let's go on

447
00:18:18,640 --> 00:18:20,960
and describe the design flow that

448
00:18:20,960 --> 00:18:23,600
allowed us to find

449
00:18:23,600 --> 00:18:27,840
lpe and ssrf attacks and eventually

450
00:18:27,840 --> 00:18:30,559
change them up into one click rc on the

451
00:18:30,559 --> 00:18:32,400
vpn client side on different

452
00:18:32,400 --> 00:18:35,679
applications so let's discuss the flow

453
00:18:35,679 --> 00:18:38,480
as we said before we have the front-end

454
00:18:38,480 --> 00:18:40,400
application which runs in the context of

455
00:18:40,400 --> 00:18:42,160
the user because the user is double

456
00:18:42,160 --> 00:18:44,799
clicking the openvpn application this

457
00:18:44,799 --> 00:18:48,960
application sends commands to a backend

458
00:18:48,960 --> 00:18:51,679
service which runs always as a windows

459
00:18:51,679 --> 00:18:54,640
service and this windows service waits

460
00:18:54,640 --> 00:18:57,280
for command and it usually listens on a

461
00:18:57,280 --> 00:19:00,240
tcp socket once it receives

462
00:19:00,240 --> 00:19:02,799
the vendor management command

463
00:19:02,799 --> 00:19:03,919
it will

464
00:19:03,919 --> 00:19:06,960
it will send a start

465
00:19:06,960 --> 00:19:10,400
tunnel or open tunnel to the vpn which

466
00:19:10,400 --> 00:19:13,200
listens using the management interface

467
00:19:13,200 --> 00:19:16,000
feature for a command and it will send

468
00:19:16,000 --> 00:19:18,400
this this command to open vpn instance

469
00:19:18,400 --> 00:19:20,799
to start a secure tunnel

470
00:19:20,799 --> 00:19:23,440
so here we have

471
00:19:23,440 --> 00:19:25,600
the management interface commands and

472
00:19:25,600 --> 00:19:28,480
obviously openvpn will only accept the

473
00:19:28,480 --> 00:19:31,039
management interface commands which are

474
00:19:31,039 --> 00:19:32,080
kind of

475
00:19:32,080 --> 00:19:33,120
something

476
00:19:33,120 --> 00:19:33,919
like

477
00:19:33,919 --> 00:19:36,720
start encrypted tunnel or

478
00:19:36,720 --> 00:19:38,720
use this configuration or something

479
00:19:38,720 --> 00:19:41,360
similar but it will only accept specific

480
00:19:41,360 --> 00:19:43,360
keywords that were

481
00:19:43,360 --> 00:19:45,919
defined in the openvpn

482
00:19:45,919 --> 00:19:48,320
management interface protocol

483
00:19:48,320 --> 00:19:52,880
and we have this second listener which

484
00:19:52,880 --> 00:19:55,600
waits for vendor management commands

485
00:19:55,600 --> 00:19:58,799
but what we found is in many cases

486
00:19:58,799 --> 00:20:02,159
these are these commands are textual and

487
00:20:02,159 --> 00:20:05,679
very loose so the backend service is not

488
00:20:05,679 --> 00:20:08,880
doing such a great job at checking what

489
00:20:08,880 --> 00:20:11,840
commands it tries to parse and in many

490
00:20:11,840 --> 00:20:14,000
cases it will be

491
00:20:14,000 --> 00:20:16,480
very loose so if it will receive a

492
00:20:16,480 --> 00:20:19,440
command that it did not understand it

493
00:20:19,440 --> 00:20:21,120
will just

494
00:20:21,120 --> 00:20:22,640
ignore it and move

495
00:20:22,640 --> 00:20:24,799
move on to the next command

496
00:20:24,799 --> 00:20:26,960
so as you can see here again this is a

497
00:20:26,960 --> 00:20:30,000
very abstract design but since we've

498
00:20:30,000 --> 00:20:33,120
seen this across many different vendors

499
00:20:33,120 --> 00:20:34,480
specifically in the industrial

500
00:20:34,480 --> 00:20:36,880
automation world but we've seen this

501
00:20:36,880 --> 00:20:39,360
design in many uh in many different

502
00:20:39,360 --> 00:20:40,480
vendors

503
00:20:40,480 --> 00:20:43,679
so we decided to dig in and to think if

504
00:20:43,679 --> 00:20:45,520
we can find a vulnerability in this

505
00:20:45,520 --> 00:20:49,200
design and we did find a way to exploit

506
00:20:49,200 --> 00:20:52,640
it so we needed to find a way to inject

507
00:20:52,640 --> 00:20:54,880
commands into the back end

508
00:20:54,880 --> 00:20:58,240
from the outside world and luckily we

509
00:20:58,240 --> 00:21:01,039
found a couple of protocols for example

510
00:21:01,039 --> 00:21:04,320
http that are complete textual so if you

511
00:21:04,320 --> 00:21:08,320
can if you remember the http rfc this

512
00:21:08,320 --> 00:21:11,600
protocol is completely textual and what

513
00:21:11,600 --> 00:21:14,240
we can do with the textual protocol we

514
00:21:14,240 --> 00:21:16,480
can send the textual data to the backend

515
00:21:16,480 --> 00:21:18,799
service which is very loose and it will

516
00:21:18,799 --> 00:21:21,200
just ignore commands that it doesn't

517
00:21:21,200 --> 00:21:23,679
understand and it will move on until it

518
00:21:23,679 --> 00:21:25,600
reaches a command that it does

519
00:21:25,600 --> 00:21:28,400
understand so for example if we can see

520
00:21:28,400 --> 00:21:31,280
here the http request we can see

521
00:21:31,280 --> 00:21:34,480
it consists of just text or ascii based

522
00:21:34,480 --> 00:21:37,440
characters that are

523
00:21:37,440 --> 00:21:39,760
printable and we can see

524
00:21:39,760 --> 00:21:41,840
it has a very defined structure so for

525
00:21:41,840 --> 00:21:44,480
example it has the first line get and

526
00:21:44,480 --> 00:21:46,240
then the path the method and then the

527
00:21:46,240 --> 00:21:47,440
path and then the version of the

528
00:21:47,440 --> 00:21:48,880
protocol and then we have a couple of

529
00:21:48,880 --> 00:21:51,840
headers and if we if we're sending a

530
00:21:51,840 --> 00:21:55,520
post message a post post http method

531
00:21:55,520 --> 00:21:59,039
eventually we will reach the data itself

532
00:21:59,039 --> 00:22:02,159
so what what we're what we tried to

533
00:22:02,159 --> 00:22:04,799
achieve here is the following

534
00:22:04,799 --> 00:22:07,600
we uh we have this diagram again so we

535
00:22:07,600 --> 00:22:09,280
have the front end application when we

536
00:22:09,280 --> 00:22:10,960
have the back-end service and we have

537
00:22:10,960 --> 00:22:13,600
the openvpn instance which are all

538
00:22:13,600 --> 00:22:16,000
waiting for commands to start the

539
00:22:16,000 --> 00:22:17,840
openvpn tunnel

540
00:22:17,840 --> 00:22:18,640
and

541
00:22:18,640 --> 00:22:22,159
we sent to one of our victims we sent a

542
00:22:22,159 --> 00:22:25,280
malicious link to a malicious website

543
00:22:25,280 --> 00:22:29,200
once the user clicked on this link

544
00:22:29,200 --> 00:22:30,559
we

545
00:22:30,559 --> 00:22:32,320
we activated

546
00:22:32,320 --> 00:22:35,600
we activated uh

547
00:22:36,400 --> 00:22:40,880
we activated a malicious js payload

548
00:22:40,880 --> 00:22:43,440
which sent locally

549
00:22:43,440 --> 00:22:45,360
http post

550
00:22:45,360 --> 00:22:48,960
request with our controlled data so what

551
00:22:48,960 --> 00:22:51,440
we did is once the user clicked on the

552
00:22:51,440 --> 00:22:53,600
link and went on

553
00:22:53,600 --> 00:22:56,480
and visited our malicious website we

554
00:22:56,480 --> 00:22:58,240
actually sent

555
00:22:58,240 --> 00:23:00,679
locally to uh

556
00:23:00,679 --> 00:23:03,760
127.001 on the required port of the

557
00:23:03,760 --> 00:23:04,960
backend

558
00:23:04,960 --> 00:23:07,120
on the on the port that the backend is

559
00:23:07,120 --> 00:23:10,880
listening on we sent http post

560
00:23:10,880 --> 00:23:14,480
request message with our payload and it

561
00:23:14,480 --> 00:23:16,880
just read all the different headers

562
00:23:16,880 --> 00:23:19,840
ignored them and finally when it reached

563
00:23:19,840 --> 00:23:23,039
our payload it executed the payload

564
00:23:23,039 --> 00:23:27,280
and started the open vpn instance tunnel

565
00:23:27,280 --> 00:23:28,799
so let's see

566
00:23:28,799 --> 00:23:30,799
from the logs how it looks like so here

567
00:23:30,799 --> 00:23:31,760
we have

568
00:23:31,760 --> 00:23:33,679
an example of a very loose backend

569
00:23:33,679 --> 00:23:36,400
parser and you can we can see here that

570
00:23:36,400 --> 00:23:38,400
the backend

571
00:23:38,400 --> 00:23:41,039
received the message which looks

572
00:23:41,039 --> 00:23:43,360
uh unfamiliar to him so basically it

573
00:23:43,360 --> 00:23:47,919
received our malicious uh js

574
00:23:47,919 --> 00:23:50,480
http request through the json

575
00:23:50,480 --> 00:23:53,120
payload and what it did it just ignored

576
00:23:53,120 --> 00:23:55,200
this line and ignored this line and

577
00:23:55,200 --> 00:23:57,520
ignored this line and ignored the next

578
00:23:57,520 --> 00:24:00,159
line so it actually ignored the entire

579
00:24:00,159 --> 00:24:02,720
http payload

580
00:24:02,720 --> 00:24:06,240
until it it ignored all the http headers

581
00:24:06,240 --> 00:24:08,880
until it reached our payload and our

582
00:24:08,880 --> 00:24:13,440
payload was start openvpn instance with

583
00:24:13,440 --> 00:24:16,240
with this and that configuration as you

584
00:24:16,240 --> 00:24:19,279
can see here in the process monitor

585
00:24:19,279 --> 00:24:22,159
so what eventually happened is that the

586
00:24:22,159 --> 00:24:23,679
backend service

587
00:24:23,679 --> 00:24:27,039
started the openvpn service and

588
00:24:27,039 --> 00:24:28,559
it started it with a certain

589
00:24:28,559 --> 00:24:32,159
configuration that told openvpn to start

590
00:24:32,159 --> 00:24:34,880
and open a tunnel a secure tunnel so

591
00:24:34,880 --> 00:24:36,559
because the

592
00:24:36,559 --> 00:24:38,799
in many cases we encountered the backend

593
00:24:38,799 --> 00:24:40,960
service was very loose we were able to

594
00:24:40,960 --> 00:24:43,520
exploit it using a malicious http

595
00:24:43,520 --> 00:24:47,200
request with post data but you may ask

596
00:24:47,200 --> 00:24:49,760
yourself what about single

597
00:24:49,760 --> 00:24:52,080
or region policy and course across the

598
00:24:52,080 --> 00:24:54,080
region resource sharing so these

599
00:24:54,080 --> 00:24:57,520
terminologies are

600
00:24:57,840 --> 00:25:01,360
or exist to help

601
00:25:01,360 --> 00:25:02,559
clients

602
00:25:02,559 --> 00:25:03,520
not

603
00:25:03,520 --> 00:25:05,440
not to be

604
00:25:05,440 --> 00:25:08,720
exploited by malicious websites so what

605
00:25:08,720 --> 00:25:10,960
it means is if

606
00:25:10,960 --> 00:25:14,640
i'm going i'm visiting example.com and

607
00:25:14,640 --> 00:25:16,720
example.com let's say it's a malicious

608
00:25:16,720 --> 00:25:19,760
website which has fetch

609
00:25:19,760 --> 00:25:22,080
data from evil.com

610
00:25:22,080 --> 00:25:23,120
the

611
00:25:23,120 --> 00:25:26,799
same origin policy will prevent

612
00:25:26,799 --> 00:25:29,360
the browser will enforce the same origin

613
00:25:29,360 --> 00:25:32,640
policy which will prevent the web page

614
00:25:32,640 --> 00:25:35,760
from getting data from evil.com it will

615
00:25:35,760 --> 00:25:38,240
not prevent the request itself so the

616
00:25:38,240 --> 00:25:42,400
request of evil.com will be executed

617
00:25:42,400 --> 00:25:45,840
but the browser itself will enforce the

618
00:25:45,840 --> 00:25:48,880
same origin policy and will not allow

619
00:25:48,880 --> 00:25:52,000
this page of example.com to read the

620
00:25:52,000 --> 00:25:55,520
response from evil.com

621
00:25:55,520 --> 00:25:58,400
so if that's the case the request goes

622
00:25:58,400 --> 00:26:00,480
on but we can't receive the response we

623
00:26:00,480 --> 00:26:03,120
don't care because all we need is to

624
00:26:03,120 --> 00:26:04,640
send data

625
00:26:04,640 --> 00:26:05,520
to

626
00:26:05,520 --> 00:26:08,320
uh to the localhost page so in in this

627
00:26:08,320 --> 00:26:10,559
example to the local service which is a

628
00:26:10,559 --> 00:26:12,080
backend service

629
00:26:12,080 --> 00:26:15,200
waiting for vendor-specific commands so

630
00:26:15,200 --> 00:26:18,240
we don't care that this backend service

631
00:26:18,240 --> 00:26:20,559
doesn't return any response

632
00:26:20,559 --> 00:26:22,720
we we don't care that we can't even read

633
00:26:22,720 --> 00:26:25,039
these responses we only care about

634
00:26:25,039 --> 00:26:27,760
sending this request and we care about

635
00:26:27,760 --> 00:26:30,480
that our request will reach

636
00:26:30,480 --> 00:26:33,200
the backend service that could that

637
00:26:33,200 --> 00:26:35,919
could potentially parse the request and

638
00:26:35,919 --> 00:26:38,240
execute the vendor specific command

639
00:26:38,240 --> 00:26:41,440
which will start the open vpn chain so

640
00:26:41,440 --> 00:26:43,679
we didn't care we did not care at all

641
00:26:43,679 --> 00:26:45,919
about

642
00:26:45,919 --> 00:26:48,159
the response we only care about the

643
00:26:48,159 --> 00:26:50,320
request which

644
00:26:50,320 --> 00:26:53,279
soap does not prevent

645
00:26:53,279 --> 00:26:55,840
so let's do a quick recap uh what we

646
00:26:55,840 --> 00:26:58,080
have here is the same diagram that we've

647
00:26:58,080 --> 00:26:59,440
discussed before

648
00:26:59,440 --> 00:27:01,840
and what we're doing is actually we're

649
00:27:01,840 --> 00:27:04,000
injecting commands to the backend

650
00:27:04,000 --> 00:27:05,840
service from

651
00:27:05,840 --> 00:27:07,840
http

652
00:27:07,840 --> 00:27:11,200
http payload through a browser in this

653
00:27:11,200 --> 00:27:14,159
case so that's why our attacks are

654
00:27:14,159 --> 00:27:15,840
called one click because it only

655
00:27:15,840 --> 00:27:18,720
requires the victim to do one click on a

656
00:27:18,720 --> 00:27:20,960
link that we send him through whatsapp

657
00:27:20,960 --> 00:27:23,200
or facebook or whatever and once the

658
00:27:23,200 --> 00:27:26,080
victim goes onto our website we can

659
00:27:26,080 --> 00:27:29,440
start this openvpn chain

660
00:27:29,440 --> 00:27:31,520
okay so you might ask yourself okay so

661
00:27:31,520 --> 00:27:33,840
we can start an openvp

662
00:27:33,840 --> 00:27:36,000
openvpn tunnel so what

663
00:27:36,000 --> 00:27:36,880
so

664
00:27:36,880 --> 00:27:39,600
if we can control the vpn tunnel with

665
00:27:39,600 --> 00:27:41,520
the configuration there are a couple of

666
00:27:41,520 --> 00:27:44,320
very interesting

667
00:27:44,320 --> 00:27:46,240
configurations that we can use for

668
00:27:46,240 --> 00:27:47,600
example the

669
00:27:47,600 --> 00:27:49,600
app command

670
00:27:49,600 --> 00:27:50,960
allows

671
00:27:50,960 --> 00:27:53,679
configuration to consist of a specific

672
00:27:53,679 --> 00:27:56,159
command that will be executed once the

673
00:27:56,159 --> 00:27:59,279
time where tab devices are open so

674
00:27:59,279 --> 00:28:01,760
once the open vpn

675
00:28:01,760 --> 00:28:05,279
instance is started and it tries to

676
00:28:05,279 --> 00:28:08,000
configure the ton and tap

677
00:28:08,000 --> 00:28:10,159
virtual network interfaces

678
00:28:10,159 --> 00:28:13,279
if the configuration that the openvpn

679
00:28:13,279 --> 00:28:14,640
started upon

680
00:28:14,640 --> 00:28:17,679
contains the app command it will execute

681
00:28:17,679 --> 00:28:19,840
this command after

682
00:28:19,840 --> 00:28:23,279
after starting the tan or top device so

683
00:28:23,279 --> 00:28:25,440
let's see in a quick example as you can

684
00:28:25,440 --> 00:28:27,600
see here we have on the right side of

685
00:28:27,600 --> 00:28:30,720
the screen we have a very simple

686
00:28:30,720 --> 00:28:34,000
a very simple open vpn configuration

687
00:28:34,000 --> 00:28:36,480
and as you can see here we have the hub

688
00:28:36,480 --> 00:28:40,159
directive and this app directive

689
00:28:40,159 --> 00:28:43,760
forces openvpn to execute this command

690
00:28:43,760 --> 00:28:47,840
after it's opened the top devices so we

691
00:28:47,840 --> 00:28:50,640
can see here the open vpn started as you

692
00:28:50,640 --> 00:28:52,960
can see here the open vpn started with

693
00:28:52,960 --> 00:28:55,440
this configuration and once the tab

694
00:28:55,440 --> 00:28:57,679
device was opened

695
00:28:57,679 --> 00:29:00,399
the app directive executed this command

696
00:29:00,399 --> 00:29:02,480
and we have we have popped

697
00:29:02,480 --> 00:29:04,799
a calculator

698
00:29:04,799 --> 00:29:06,159
so

699
00:29:06,159 --> 00:29:08,080
i hope you understand where where we're

700
00:29:08,080 --> 00:29:10,320
going with this but this is a local

701
00:29:10,320 --> 00:29:12,320
configuration can we do something

702
00:29:12,320 --> 00:29:13,760
remotely

703
00:29:13,760 --> 00:29:16,720
so the answer is most definitely yes

704
00:29:16,720 --> 00:29:20,960
if we're using a unc path we can

705
00:29:20,960 --> 00:29:23,039
place our malicious configuration

706
00:29:23,039 --> 00:29:25,679
somewhere in the internet and then

707
00:29:25,679 --> 00:29:26,399
open

708
00:29:26,399 --> 00:29:29,760
smb 2 server so we can use for example

709
00:29:29,760 --> 00:29:34,159
in packet with python to create a new

710
00:29:34,159 --> 00:29:36,320
smb server instance

711
00:29:36,320 --> 00:29:38,320
which will

712
00:29:38,320 --> 00:29:39,279
which will

713
00:29:39,279 --> 00:29:40,559
once it will

714
00:29:40,559 --> 00:29:42,880
receive a request for a specific file it

715
00:29:42,880 --> 00:29:44,960
will return this file so for example if

716
00:29:44,960 --> 00:29:47,120
we're hosting a malicious open vpn

717
00:29:47,120 --> 00:29:50,080
configuration and we will hand

718
00:29:50,080 --> 00:29:51,520
and we will

719
00:29:51,520 --> 00:29:53,919
start the open vpn tunnel with this

720
00:29:53,919 --> 00:29:58,000
configuration the configuration will be

721
00:29:58,000 --> 00:30:01,200
pulled from our remote smb server and so

722
00:30:01,200 --> 00:30:03,840
our entire attack can be executed

723
00:30:03,840 --> 00:30:06,159
remotely

724
00:30:06,159 --> 00:30:07,120
so

725
00:30:07,120 --> 00:30:10,000
that's the base of our attack and all

726
00:30:10,000 --> 00:30:11,760
the different parts in the exploit and

727
00:30:11,760 --> 00:30:14,480
now we will see a couple of examples of

728
00:30:14,480 --> 00:30:17,279
uh vendors that implemented

729
00:30:17,279 --> 00:30:18,880
the entire chain and the entire

730
00:30:18,880 --> 00:30:20,320
architecture

731
00:30:20,320 --> 00:30:23,039
with some flows that allowed us to

732
00:30:23,039 --> 00:30:25,360
exploit them so

733
00:30:25,360 --> 00:30:28,080
let's let's start with perfect openvpn

734
00:30:28,080 --> 00:30:29,360
client

735
00:30:29,360 --> 00:30:33,360
uh so we have here ssrf uh to one click

736
00:30:33,360 --> 00:30:36,559
remote code execution let's start so

737
00:30:36,559 --> 00:30:39,360
perfect is a software company that

738
00:30:39,360 --> 00:30:42,159
develops uh professional i.t solutions

739
00:30:42,159 --> 00:30:45,520
mostly for the industrial world and we

740
00:30:45,520 --> 00:30:48,320
encountered it in one of our customers

741
00:30:48,320 --> 00:30:50,399
that's why we started to research it

742
00:30:50,399 --> 00:30:51,200
and

743
00:30:51,200 --> 00:30:54,480
the openv the openvpn clients perfect

744
00:30:54,480 --> 00:30:56,960
openvpn client is essentially what the

745
00:30:56,960 --> 00:31:00,640
users see is just a very simple gui the

746
00:31:00,640 --> 00:31:02,960
the frontend in our diagram in our

747
00:31:02,960 --> 00:31:07,039
architecture that allows users to

748
00:31:07,039 --> 00:31:10,399
to start openvpn instance using

749
00:31:10,399 --> 00:31:13,679
openvpn configuration so it has a nice

750
00:31:13,679 --> 00:31:16,840
logo of but behind the scene it uses

751
00:31:16,840 --> 00:31:20,240
openvpn and when we started the research

752
00:31:20,240 --> 00:31:21,360
we

753
00:31:21,360 --> 00:31:24,399
saw that we have a front-end application

754
00:31:24,399 --> 00:31:26,320
just like you saw before and we have a

755
00:31:26,320 --> 00:31:28,960
service so here you can see the perfect

756
00:31:28,960 --> 00:31:31,600
open vpn service and this back-end

757
00:31:31,600 --> 00:31:32,720
service

758
00:31:32,720 --> 00:31:35,440
is a windows service so you can see here

759
00:31:35,440 --> 00:31:37,840
it runs with the system privileges this

760
00:31:37,840 --> 00:31:40,159
is high privileges and

761
00:31:40,159 --> 00:31:42,559
when the the front-end application

762
00:31:42,559 --> 00:31:44,559
starts

763
00:31:44,559 --> 00:31:46,399
sends command to the

764
00:31:46,399 --> 00:31:49,519
service back-end to start the the vpn

765
00:31:49,519 --> 00:31:51,519
chain it will

766
00:31:51,519 --> 00:31:53,600
that the back-end service will start the

767
00:31:53,600 --> 00:31:55,760
open vpn instance with the configuration

768
00:31:55,760 --> 00:31:57,840
received from the

769
00:31:57,840 --> 00:32:00,880
from the front-end from the user so

770
00:32:00,880 --> 00:32:03,679
this is the backend service it runs with

771
00:32:03,679 --> 00:32:05,519
high privileges system

772
00:32:05,519 --> 00:32:06,640
and

773
00:32:06,640 --> 00:32:08,720
we wanted to exploit it

774
00:32:08,720 --> 00:32:13,200
so we saw that the backend service can

775
00:32:13,200 --> 00:32:15,279
receive a couple of commands so it can

776
00:32:15,279 --> 00:32:17,440
receive status it can receive command

777
00:32:17,440 --> 00:32:19,760
with a config with the path

778
00:32:19,760 --> 00:32:21,120
close and by

779
00:32:21,120 --> 00:32:23,279
and we were very interested with the

780
00:32:23,279 --> 00:32:25,519
config because the config receives a

781
00:32:25,519 --> 00:32:29,360
path to an open vpn configuration and it

782
00:32:29,360 --> 00:32:32,480
will start the entire opn vpn chain

783
00:32:32,480 --> 00:32:35,039
based on that configuration so the

784
00:32:35,039 --> 00:32:37,279
entire diagram looks like this we have

785
00:32:37,279 --> 00:32:39,760
the frontend application this time with

786
00:32:39,760 --> 00:32:42,880
the logo of perfect and the oh the

787
00:32:42,880 --> 00:32:45,279
front-end application connects to the

788
00:32:45,279 --> 00:32:48,000
back-end service using tcp port

789
00:32:48,000 --> 00:32:49,919
10-700

790
00:32:49,919 --> 00:32:53,760
and it sends to the back-end service

791
00:32:53,760 --> 00:32:56,720
the config with the actual openvpn

792
00:32:56,720 --> 00:32:59,919
config which will then start the openvpn

793
00:32:59,919 --> 00:33:03,279
instance and the openvpn instance will

794
00:33:03,279 --> 00:33:06,039
listen on tcp port

795
00:33:06,039 --> 00:33:08,880
10600 and it will wait for commands from

796
00:33:08,880 --> 00:33:11,200
the backend service which will tell it

797
00:33:11,200 --> 00:33:13,120
take this configuration received from

798
00:33:13,120 --> 00:33:16,559
the user and execute it or start the the

799
00:33:16,559 --> 00:33:18,960
tunnel using this configuration

800
00:33:18,960 --> 00:33:21,840
so our goal obviously was to inject the

801
00:33:21,840 --> 00:33:25,919
payload over here so our goal was to

802
00:33:25,919 --> 00:33:28,399
to force this user to open

803
00:33:28,399 --> 00:33:32,320
a web page in our control and inject

804
00:33:32,320 --> 00:33:35,279
an inject http request to the backend

805
00:33:35,279 --> 00:33:36,880
service so

806
00:33:36,880 --> 00:33:39,039
let's go over the different steps that

807
00:33:39,039 --> 00:33:41,679
we needed in order to exploit this so

808
00:33:41,679 --> 00:33:43,039
first of all we needed to prepare

809
00:33:43,039 --> 00:33:45,519
malicious open vpn config with the app

810
00:33:45,519 --> 00:33:46,799
directive

811
00:33:46,799 --> 00:33:48,640
then we needed to prepare remote

812
00:33:48,640 --> 00:33:51,679
assemble with anonymous access enabled

813
00:33:51,679 --> 00:33:52,480
so

814
00:33:52,480 --> 00:33:55,039
everyone could actually pull data from

815
00:33:55,039 --> 00:33:56,559
this server

816
00:33:56,559 --> 00:33:58,880
smb server then we needed to prepare a

817
00:33:58,880 --> 00:34:00,799
malicious website with a javascript

818
00:34:00,799 --> 00:34:02,000
payload

819
00:34:02,000 --> 00:34:04,320
and this javascript payload will

820
00:34:04,320 --> 00:34:05,519
obviously

821
00:34:05,519 --> 00:34:08,480
send a fetch a request we're sending a

822
00:34:08,480 --> 00:34:11,760
post request http request to the backend

823
00:34:11,760 --> 00:34:14,639
service and finally lure a factory

824
00:34:14,639 --> 00:34:17,040
engineer in our case rachel into our

825
00:34:17,040 --> 00:34:20,239
website and then we have a one click rc

826
00:34:20,239 --> 00:34:21,679
so let's see all the different steps

827
00:34:21,679 --> 00:34:23,679
let's start with number one preparing a

828
00:34:23,679 --> 00:34:26,560
malicious open vpn config so this is how

829
00:34:26,560 --> 00:34:29,040
we prepared our config basically what we

830
00:34:29,040 --> 00:34:32,159
have here is a very simple config with

831
00:34:32,159 --> 00:34:34,320
this command and this command what it

832
00:34:34,320 --> 00:34:36,800
does is starting a reverse shell so we

833
00:34:36,800 --> 00:34:39,040
can see here the app directive here at

834
00:34:39,040 --> 00:34:40,000
the bottom

835
00:34:40,000 --> 00:34:42,560
on line 26 you can see the up directive

836
00:34:42,560 --> 00:34:44,719
with all four command we needed to do

837
00:34:44,719 --> 00:34:47,599
some uh some cool uh kind of magic in

838
00:34:47,599 --> 00:34:50,639
here to because our reverse shell was

839
00:34:50,639 --> 00:34:52,800
kind of uh big

840
00:34:52,800 --> 00:34:55,760
so we needed to uh break it down and

841
00:34:55,760 --> 00:34:59,280
encode it and once we did that we had uh

842
00:34:59,280 --> 00:35:01,920
app directive which starts a reverse

843
00:35:01,920 --> 00:35:04,880
reverse shell to our ip to our the

844
00:35:04,880 --> 00:35:06,640
attacker's ip

845
00:35:06,640 --> 00:35:09,280
and so this is the malicious open vpn we

846
00:35:09,280 --> 00:35:12,640
configured we hosted it on a remote

847
00:35:12,640 --> 00:35:14,400
server uh

848
00:35:14,400 --> 00:35:17,920
using as smb server so it was a server

849
00:35:17,920 --> 00:35:19,839
that we started with in packet using

850
00:35:19,839 --> 00:35:21,520
python and we

851
00:35:21,520 --> 00:35:23,920
specifically asked for anonymous access

852
00:35:23,920 --> 00:35:26,000
to be enabled on it

853
00:35:26,000 --> 00:35:29,119
and so anyone can access it and ask for

854
00:35:29,119 --> 00:35:32,560
the openvpn configuration step three was

855
00:35:32,560 --> 00:35:35,040
to prepare the malicious javascript so

856
00:35:35,040 --> 00:35:36,880
we prepared here

857
00:35:36,880 --> 00:35:40,800
a javascript that fetches http request

858
00:35:40,800 --> 00:35:42,560
using a

859
00:35:42,560 --> 00:35:45,440
post method and the body of this request

860
00:35:45,440 --> 00:35:48,079
this request was config according to the

861
00:35:48,079 --> 00:35:50,160
vendor perfect uh

862
00:35:50,160 --> 00:35:52,320
protocol so config and then the

863
00:35:52,320 --> 00:35:55,599
configuration uh open config open vpn

864
00:35:55,599 --> 00:35:58,880
configuration file that we hosted on our

865
00:35:58,880 --> 00:36:02,079
controlled remote server the smb server

866
00:36:02,079 --> 00:36:05,839
and finally we alert rachel to click on

867
00:36:05,839 --> 00:36:07,920
into our website we know that rachel

868
00:36:07,920 --> 00:36:10,079
loves cats and that's why we sent her an

869
00:36:10,079 --> 00:36:11,280
image

870
00:36:11,280 --> 00:36:13,520
that once with a cat once she clicks on

871
00:36:13,520 --> 00:36:16,560
the cat she goes onto a website

872
00:36:16,560 --> 00:36:18,480
and let's see how it works

873
00:36:18,480 --> 00:36:19,920
so

874
00:36:19,920 --> 00:36:20,800
uh

875
00:36:20,800 --> 00:36:21,680
once

876
00:36:21,680 --> 00:36:24,839
rachel clicked on the cat she

877
00:36:24,839 --> 00:36:27,680
our netcat received a new connection

878
00:36:27,680 --> 00:36:31,119
with a system privileges remote shell so

879
00:36:31,119 --> 00:36:33,839
let's see a demo we have here perfect

880
00:36:33,839 --> 00:36:36,560
and then rachel goes on to our website

881
00:36:36,560 --> 00:36:37,920
and then

882
00:36:37,920 --> 00:36:40,800
stuff are starting to run and we get our

883
00:36:40,800 --> 00:36:43,920
shell here because of the injection to

884
00:36:43,920 --> 00:36:45,920
the backend service which started

885
00:36:45,920 --> 00:36:49,200
openvpn instance with our malicious

886
00:36:49,200 --> 00:36:51,040
configuration

887
00:36:51,040 --> 00:36:54,160
and now we have a logo we have we phoned

888
00:36:54,160 --> 00:36:57,839
the perfect openvpn not because openvpn

889
00:36:57,839 --> 00:36:59,520
has some issues but because the

890
00:36:59,520 --> 00:37:02,400
management interface was implemented

891
00:37:02,400 --> 00:37:04,880
wrong and we'll discuss what can be done

892
00:37:04,880 --> 00:37:06,160
better

893
00:37:06,160 --> 00:37:07,599
in the end

894
00:37:07,599 --> 00:37:10,079
next we had the siemens cinema remote

895
00:37:10,079 --> 00:37:12,960
connect which again we were able to get

896
00:37:12,960 --> 00:37:17,040
a ssrf to one click rc on it so siemens

897
00:37:17,040 --> 00:37:19,599
you all know siemens it's a very

898
00:37:19,599 --> 00:37:21,440
huge corporate

899
00:37:21,440 --> 00:37:23,040
it has a

900
00:37:23,040 --> 00:37:24,800
cinema remote connect which is a

901
00:37:24,800 --> 00:37:27,280
management platform for remote networks

902
00:37:27,280 --> 00:37:30,400
specifically to manage uh remote

903
00:37:30,400 --> 00:37:34,480
networks on site with uh plc's belonging

904
00:37:34,480 --> 00:37:37,520
to siemens and

905
00:37:37,520 --> 00:37:40,160
we started to look on this uh

906
00:37:40,160 --> 00:37:42,960
on this platform uh a couple of months

907
00:37:42,960 --> 00:37:45,920
ago and again we discovered the same

908
00:37:45,920 --> 00:37:47,760
design the same architecture the only

909
00:37:47,760 --> 00:37:49,440
difference is

910
00:37:49,440 --> 00:37:52,400
the logo here and obviously the tcp port

911
00:37:52,400 --> 00:37:55,599
was changed a bit so now it's 14 000 and

912
00:37:55,599 --> 00:37:58,480
here it's it's different as well but all

913
00:37:58,480 --> 00:38:00,320
in all it's the same we have a front-end

914
00:38:00,320 --> 00:38:02,400
application we have a back-end service

915
00:38:02,400 --> 00:38:04,000
with high privileges and we have the

916
00:38:04,000 --> 00:38:06,240
open vpn instance which runs

917
00:38:06,240 --> 00:38:10,240
after the backend service starts the uh

918
00:38:10,240 --> 00:38:11,920
the instance

919
00:38:11,920 --> 00:38:12,720
so

920
00:38:12,720 --> 00:38:15,200
yes it looks familiar and again we've

921
00:38:15,200 --> 00:38:17,760
prepared a poc just like before we

922
00:38:17,760 --> 00:38:20,320
prepared a malicious javascript this

923
00:38:20,320 --> 00:38:23,680
time take a look we used not config

924
00:38:23,680 --> 00:38:25,440
but we used a different

925
00:38:25,440 --> 00:38:28,960
keyword and this this time siemens had a

926
00:38:28,960 --> 00:38:31,920
a kind of a different protocol that was

927
00:38:31,920 --> 00:38:33,680
expected on the back end and that's why

928
00:38:33,680 --> 00:38:36,400
we used load not config but all in all

929
00:38:36,400 --> 00:38:38,720
it's very the same we're just

930
00:38:38,720 --> 00:38:40,160
in issuing

931
00:38:40,160 --> 00:38:43,680
shooting http post request to localhost

932
00:38:43,680 --> 00:38:46,400
on 14 000 locally

933
00:38:46,400 --> 00:38:48,800
through a web browser and finally we're

934
00:38:48,800 --> 00:38:50,560
getting a

935
00:38:50,560 --> 00:38:52,880
reverse shell with it so let's see a

936
00:38:52,880 --> 00:38:54,400
demo

937
00:38:54,400 --> 00:38:56,320
uh we can see here

938
00:38:56,320 --> 00:38:58,400
a quick demo as well

939
00:38:58,400 --> 00:39:00,960
we can see here the attacker

940
00:39:00,960 --> 00:39:03,119
window waiting for reverse gel we can

941
00:39:03,119 --> 00:39:04,800
see here

942
00:39:04,800 --> 00:39:08,240
cinema rc client

943
00:39:08,240 --> 00:39:10,880
waiting to be exploited and we can see

944
00:39:10,880 --> 00:39:13,359
here that the service is running as a

945
00:39:13,359 --> 00:39:14,400
system

946
00:39:14,400 --> 00:39:19,119
and we will see in shortly that rachel

947
00:39:19,119 --> 00:39:20,800
is

948
00:39:20,800 --> 00:39:24,960
trying to reach our poc website

949
00:39:25,440 --> 00:39:28,480
we wait a bit and now rachel read

950
00:39:28,480 --> 00:39:30,560
clarity rc poc

951
00:39:30,560 --> 00:39:31,440
and

952
00:39:31,440 --> 00:39:34,320
now we have a new reverse shell of

953
00:39:34,320 --> 00:39:35,599
course

954
00:39:35,599 --> 00:39:39,320
with system privileges

955
00:39:42,640 --> 00:39:45,280
um yes so now we have

956
00:39:45,280 --> 00:39:48,079
both perfect exploited and

957
00:39:48,079 --> 00:39:51,280
siemens uh remote client exploited next

958
00:39:51,280 --> 00:39:54,640
we had uh hms e1e catcher which again

959
00:39:54,640 --> 00:39:57,520
it's very similar

960
00:39:57,520 --> 00:39:58,800
this time

961
00:39:58,800 --> 00:40:01,200
we are talking about hms networks this

962
00:40:01,200 --> 00:40:02,240
is a

963
00:40:02,240 --> 00:40:03,920
large scale company international

964
00:40:03,920 --> 00:40:05,440
company in the field of industrial

965
00:40:05,440 --> 00:40:09,119
communication again and it has

966
00:40:09,119 --> 00:40:11,920
a product line named e1 which is a brand

967
00:40:11,920 --> 00:40:14,720
of hms and one and

968
00:40:14,720 --> 00:40:18,560
basically uh its entire platform uh for

969
00:40:18,560 --> 00:40:21,119
a vpn connectivity so remote

970
00:40:21,119 --> 00:40:23,359
connectivity so you can use these

971
00:40:23,359 --> 00:40:25,359
devices

972
00:40:25,359 --> 00:40:27,440
and the talk2m

973
00:40:27,440 --> 00:40:29,520
cloud to allow

974
00:40:29,520 --> 00:40:31,599
remote connectivity

975
00:40:31,599 --> 00:40:34,880
so this in this case you have both the

976
00:40:34,880 --> 00:40:37,119
cloud platform and you have the

977
00:40:37,119 --> 00:40:38,880
appliance as well

978
00:40:38,880 --> 00:40:41,520
and talk to him is just the the main

979
00:40:41,520 --> 00:40:43,920
server the cloud server

980
00:40:43,920 --> 00:40:45,359
and what

981
00:40:45,359 --> 00:40:48,640
what connects to this cloud service is a

982
00:40:48,640 --> 00:40:51,599
program the client named ecatcher so

983
00:40:51,599 --> 00:40:54,640
again we're focusing on clients vpn

984
00:40:54,640 --> 00:40:57,680
clients so we started to research

985
00:40:57,680 --> 00:41:00,400
e-catcher and what we discover is

986
00:41:00,400 --> 00:41:02,720
basically like previously we had the

987
00:41:02,720 --> 00:41:06,400
back-end listening uh locally on on this

988
00:41:06,400 --> 00:41:09,680
time port 445 it's a service windows

989
00:41:09,680 --> 00:41:12,640
service named the talk to m vpn service

990
00:41:12,640 --> 00:41:15,119
very indicative and we can see here a

991
00:41:15,119 --> 00:41:18,480
bunch of functions or commands that this

992
00:41:18,480 --> 00:41:21,040
service is waiting for

993
00:41:21,040 --> 00:41:23,040
and once it receives one of these

994
00:41:23,040 --> 00:41:25,280
commands it will execute it

995
00:41:25,280 --> 00:41:27,760
what we found we found a bug in one of

996
00:41:27,760 --> 00:41:30,640
the printing debug logs functions we

997
00:41:30,640 --> 00:41:32,560
found that if we enter a big enough

998
00:41:32,560 --> 00:41:34,800
command a stock buffer overflow will

999
00:41:34,800 --> 00:41:38,599
occur so if we send a large

1000
00:41:38,599 --> 00:41:42,480
aaa then a buffer overflow

1001
00:41:42,480 --> 00:41:45,680
will take place and

1002
00:41:45,680 --> 00:41:48,640
we could crash the program so what we

1003
00:41:48,640 --> 00:41:50,640
did here is

1004
00:41:50,640 --> 00:41:53,520
again we used http to

1005
00:41:53,520 --> 00:41:56,480
a http request to send a very large

1006
00:41:56,480 --> 00:42:00,160
request with a great amount of bytes in

1007
00:42:00,160 --> 00:42:01,200
the

1008
00:42:01,200 --> 00:42:02,800
in the url

1009
00:42:02,800 --> 00:42:05,200
and as you can see here this is what the

1010
00:42:05,200 --> 00:42:09,520
function received a get with a huge url

1011
00:42:09,520 --> 00:42:10,400
and

1012
00:42:10,400 --> 00:42:12,880
since we had the stock buffer overflow

1013
00:42:12,880 --> 00:42:16,240
we overflowed the the entire stock with

1014
00:42:16,240 --> 00:42:18,720
the url data

1015
00:42:18,720 --> 00:42:21,119
so now all we needed to do is send our

1016
00:42:21,119 --> 00:42:25,359
victim an email or html page with

1017
00:42:25,359 --> 00:42:29,119
a image tag something like this

1018
00:42:29,119 --> 00:42:31,920
because all we needed is a very long url

1019
00:42:31,920 --> 00:42:32,800
that

1020
00:42:32,800 --> 00:42:36,319
once the backend service will will get

1021
00:42:36,319 --> 00:42:38,960
this url it will try to do some stuff

1022
00:42:38,960 --> 00:42:41,440
with it in the debug log and it will

1023
00:42:41,440 --> 00:42:43,359
wrongly copy

1024
00:42:43,359 --> 00:42:46,640
and overflow some data on the stack so

1025
00:42:46,640 --> 00:42:47,520
what

1026
00:42:47,520 --> 00:42:50,800
was our plan here was to abuse

1027
00:42:50,800 --> 00:42:53,200
a mechanism named

1028
00:42:53,200 --> 00:42:55,440
s-e-h safe

1029
00:42:55,440 --> 00:42:58,880
safe exception handlers and we will not

1030
00:42:58,880 --> 00:43:01,760
get into the details of sch handlers in

1031
00:43:01,760 --> 00:43:04,400
this presentation but all i want to say

1032
00:43:04,400 --> 00:43:07,839
is there is a sch handler which is a

1033
00:43:07,839 --> 00:43:09,040
pointer

1034
00:43:09,040 --> 00:43:12,640
on the stack and our goal was to

1035
00:43:12,640 --> 00:43:15,440
overflow it with our data so our goal

1036
00:43:15,440 --> 00:43:17,680
was to do something like this

1037
00:43:17,680 --> 00:43:21,280
uh send a very large request with a long

1038
00:43:21,280 --> 00:43:22,400
url

1039
00:43:22,400 --> 00:43:26,160
and because of the stock buffer overflow

1040
00:43:26,160 --> 00:43:27,200
we would

1041
00:43:27,200 --> 00:43:30,000
overflow this pointer and eventually

1042
00:43:30,000 --> 00:43:31,119
we'll

1043
00:43:31,119 --> 00:43:33,200
will achieve code execution so this is

1044
00:43:33,200 --> 00:43:35,760
how we prepared our payload as you can

1045
00:43:35,760 --> 00:43:38,400
see here we have html page with iframe

1046
00:43:38,400 --> 00:43:43,040
source and a very very very long url and

1047
00:43:43,040 --> 00:43:44,480
we carefully

1048
00:43:44,480 --> 00:43:47,920
uh tailored made prepared this um

1049
00:43:47,920 --> 00:43:51,680
this request so only these four bytes

1050
00:43:51,680 --> 00:43:52,800
will get

1051
00:43:52,800 --> 00:43:56,400
to the specific location on the stack

1052
00:43:56,400 --> 00:43:59,119
so we carefully

1053
00:43:59,119 --> 00:44:01,680
built this payload so only

1054
00:44:01,680 --> 00:44:02,960
these

1055
00:44:02,960 --> 00:44:04,640
four bytes

1056
00:44:04,640 --> 00:44:07,280
will be placed in a very exact

1057
00:44:07,280 --> 00:44:10,000
place in in the memory on the stack and

1058
00:44:10,000 --> 00:44:12,560
eventually through this image being

1059
00:44:12,560 --> 00:44:15,680
presented on html or email we got

1060
00:44:15,680 --> 00:44:17,280
control on the

1061
00:44:17,280 --> 00:44:21,040
eip and we could still execution from

1062
00:44:21,040 --> 00:44:24,319
the programming control the execution so

1063
00:44:24,319 --> 00:44:25,599
we had

1064
00:44:25,599 --> 00:44:28,560
rce just from an email being opened on

1065
00:44:28,560 --> 00:44:30,960
the machine with ecatcher

1066
00:44:30,960 --> 00:44:34,400
client so now we have three logos on

1067
00:44:34,400 --> 00:44:35,920
rachel's

1068
00:44:35,920 --> 00:44:38,480
computer that we can control completely

1069
00:44:38,480 --> 00:44:41,520
uh take control the last one is mb

1070
00:44:41,520 --> 00:44:43,599
connect which was

1071
00:44:43,599 --> 00:44:45,520
which was a

1072
00:44:45,520 --> 00:44:47,599
local privilege escalation this was not

1073
00:44:47,599 --> 00:44:51,520
one one click remote code execution

1074
00:44:51,520 --> 00:44:54,640
so mb connect line is a company that

1075
00:44:54,640 --> 00:44:57,359
again develops uh vpn

1076
00:44:57,359 --> 00:45:01,119
services uh secure ntn connection for

1077
00:45:01,119 --> 00:45:03,760
when you need one this is uh their logo

1078
00:45:03,760 --> 00:45:06,560
so mp dial up is again a company in the

1079
00:45:06,560 --> 00:45:10,160
industrial uh automation worlds and they

1080
00:45:10,160 --> 00:45:12,800
produce and manufacture different um

1081
00:45:12,800 --> 00:45:14,560
different appliances different systems

1082
00:45:14,560 --> 00:45:16,400
and they have their own

1083
00:45:16,400 --> 00:45:19,280
vpn cloud again so we started to

1084
00:45:19,280 --> 00:45:21,920
research again the client mb dial up

1085
00:45:21,920 --> 00:45:24,960
launcher and we quickly found out that

1086
00:45:24,960 --> 00:45:27,440
it supports again the same design all

1087
00:45:27,440 --> 00:45:28,960
over the place

1088
00:45:28,960 --> 00:45:31,760
the backend service supports uh at

1089
00:45:31,760 --> 00:45:34,240
different different commands for example

1090
00:45:34,240 --> 00:45:38,480
exit who time version etc and this time

1091
00:45:38,480 --> 00:45:40,400
the windows serviced or the backend

1092
00:45:40,400 --> 00:45:44,079
service was called mb connect 24 serve

1093
00:45:44,079 --> 00:45:46,960
and it listens locally on seven eight

1094
00:45:46,960 --> 00:45:48,960
zero zero

1095
00:45:48,960 --> 00:45:49,760
now

1096
00:45:49,760 --> 00:45:51,680
we already we're already familiar with

1097
00:45:51,680 --> 00:45:54,160
this type of design so we immediately

1098
00:45:54,160 --> 00:45:56,800
started to exploit this

1099
00:45:56,800 --> 00:46:00,480
and uh we found the two vulnerabilities

1100
00:46:00,480 --> 00:46:03,200
and so for example here what we use the

1101
00:46:03,200 --> 00:46:05,440
command injection so

1102
00:46:05,440 --> 00:46:09,680
it expects the backend service expects

1103
00:46:09,680 --> 00:46:12,240
to a legitimate command for example

1104
00:46:12,240 --> 00:46:13,359
route

1105
00:46:13,359 --> 00:46:16,720
but since it runs this command through a

1106
00:46:16,720 --> 00:46:18,000
system

1107
00:46:18,000 --> 00:46:21,520
uh a system shell we could have injected

1108
00:46:21,520 --> 00:46:24,160
some more special characters for example

1109
00:46:24,160 --> 00:46:27,280
pipe pipe and then we issued our own

1110
00:46:27,280 --> 00:46:29,119
command so this is a os command

1111
00:46:29,119 --> 00:46:31,920
injection uh being injected into a

1112
00:46:31,920 --> 00:46:34,000
legitimate command and if

1113
00:46:34,000 --> 00:46:36,240
eventually we had a local privileged

1114
00:46:36,240 --> 00:46:38,160
connection because this backend service

1115
00:46:38,160 --> 00:46:39,920
is running as

1116
00:46:39,920 --> 00:46:43,119
as a service with system privileges

1117
00:46:43,119 --> 00:46:45,760
so we had lpa here too

1118
00:46:45,760 --> 00:46:48,240
and now we have four logos finally we

1119
00:46:48,240 --> 00:46:50,720
exploited all the four of uh

1120
00:46:50,720 --> 00:46:52,640
all the four applications vpn clients

1121
00:46:52,640 --> 00:46:54,960
applications different vendors across

1122
00:46:54,960 --> 00:46:58,240
all the industrial control system

1123
00:46:58,240 --> 00:46:59,280
domain

1124
00:46:59,280 --> 00:47:02,079
and we have reached our summary

1125
00:47:02,079 --> 00:47:05,040
so just to conclude here the problem is

1126
00:47:05,040 --> 00:47:08,480
not with openvpn vpn openvpn is a good

1127
00:47:08,480 --> 00:47:11,040
boy vpn is a

1128
00:47:11,040 --> 00:47:14,240
is is not the problem here the issue is

1129
00:47:14,240 --> 00:47:17,200
with the vendors implementations because

1130
00:47:17,200 --> 00:47:19,839
they have started a backend service

1131
00:47:19,839 --> 00:47:22,240
which waits for commands it's not

1132
00:47:22,240 --> 00:47:26,480
proper properly uh verifies or sanitize

1133
00:47:26,480 --> 00:47:28,559
the input and so we can control in a

1134
00:47:28,559 --> 00:47:30,800
different way whether it's uh through

1135
00:47:30,800 --> 00:47:32,800
injection because the the backend

1136
00:47:32,800 --> 00:47:35,839
service was kind of a loose and ignored

1137
00:47:35,839 --> 00:47:37,920
different commands that did not care

1138
00:47:37,920 --> 00:47:40,559
about or because we had a command

1139
00:47:40,559 --> 00:47:42,960
injection or because we exploited a

1140
00:47:42,960 --> 00:47:44,160
memory

1141
00:47:44,160 --> 00:47:46,800
memory corruption in this case it was a

1142
00:47:46,800 --> 00:47:49,440
stock buffer overflow but all in all we

1143
00:47:49,440 --> 00:47:52,720
were able to achieve ssrf to one click

1144
00:47:52,720 --> 00:47:54,480
remote code execution with the system

1145
00:47:54,480 --> 00:47:57,599
privileges or at least local privilege

1146
00:47:57,599 --> 00:48:00,640
execution as system but the main point

1147
00:48:00,640 --> 00:48:03,520
here is openvpn is not the problem the

1148
00:48:03,520 --> 00:48:04,960
issue is with the vendor's

1149
00:48:04,960 --> 00:48:08,240
implementation and once we disclosed all

1150
00:48:08,240 --> 00:48:11,280
these uh cves to the different vendors

1151
00:48:11,280 --> 00:48:14,559
we obviously worked with them to remedy

1152
00:48:14,559 --> 00:48:17,359
and solve these issues and they all

1153
00:48:17,359 --> 00:48:20,000
released patches and mitigations for the

1154
00:48:20,000 --> 00:48:21,040
users

1155
00:48:21,040 --> 00:48:22,720
the last thing i want to discuss is

1156
00:48:22,720 --> 00:48:24,960
recommendations

1157
00:48:24,960 --> 00:48:27,280
so we have a couple of recommendations

1158
00:48:27,280 --> 00:48:29,119
for the different vendors or any other

1159
00:48:29,119 --> 00:48:31,359
remote access solutions implementing

1160
00:48:31,359 --> 00:48:33,839
openvpn and specifically

1161
00:48:33,839 --> 00:48:35,760
the management interface feature so

1162
00:48:35,760 --> 00:48:37,200
first of all you can use dynamic

1163
00:48:37,200 --> 00:48:39,440
parameters for example you don't have to

1164
00:48:39,440 --> 00:48:42,960
listen always on 127.001 you can use the

1165
00:48:42,960 --> 00:48:44,079
entire

1166
00:48:44,079 --> 00:48:47,680
localhost range for example 127.123

1167
00:48:47,680 --> 00:48:50,800
you can use the security token so

1168
00:48:50,800 --> 00:48:54,559
something similar to csrf so

1169
00:48:54,559 --> 00:48:56,480
if you receive if the backend service

1170
00:48:56,480 --> 00:48:59,040
received the command without a specific

1171
00:48:59,040 --> 00:49:00,160
token

1172
00:49:00,160 --> 00:49:02,240
it will not execute this command they

1173
00:49:02,240 --> 00:49:05,520
can also add to the openvpn a policy

1174
00:49:05,520 --> 00:49:07,920
enforcement to not use

1175
00:49:07,920 --> 00:49:10,160
to not use the app command so you can

1176
00:49:10,160 --> 00:49:12,319
read the manual but uh

1177
00:49:12,319 --> 00:49:13,839
to save you some time you should look

1178
00:49:13,839 --> 00:49:15,920
for script security and set it to level

1179
00:49:15,920 --> 00:49:18,480
1 which will not allow any

1180
00:49:18,480 --> 00:49:20,960
arbitrary script to be running with the

1181
00:49:20,960 --> 00:49:24,160
directive up in the configuration and

1182
00:49:24,160 --> 00:49:25,680
you should limit the potential attack

1183
00:49:25,680 --> 00:49:28,240
surface and re refrain from executing

1184
00:49:28,240 --> 00:49:30,400
openvpn with the system privileges

1185
00:49:30,400 --> 00:49:32,319
whenever possible

1186
00:49:32,319 --> 00:49:34,880
so these are the recommendations and

1187
00:49:34,880 --> 00:49:37,359
this is was our research thank you very

1188
00:49:37,359 --> 00:49:39,599
much everyone and i hope you'll have a

1189
00:49:39,599 --> 00:49:42,839
nice day

