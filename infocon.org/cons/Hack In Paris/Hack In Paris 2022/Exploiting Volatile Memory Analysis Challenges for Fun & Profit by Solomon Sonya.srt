1
00:00:01,360 --> 00:00:03,040
okay i think i'm good to go we just

2
00:00:03,040 --> 00:00:04,080
begin

3
00:00:04,080 --> 00:00:05,920
let's dive into this well hey everyone

4
00:00:05,920 --> 00:00:08,240
good morning uh thank you so much for

5
00:00:08,240 --> 00:00:10,559
coming out to our talk here on

6
00:00:10,559 --> 00:00:12,719
exploiting advanced and volatile memory

7
00:00:12,719 --> 00:00:15,120
analysis challenges for fun and profit

8
00:00:15,120 --> 00:00:17,039
so overall the whole purpose of this is

9
00:00:17,039 --> 00:00:19,119
to see additional capabilities that we

10
00:00:19,119 --> 00:00:22,560
can create by analyzing volatile memory

11
00:00:22,560 --> 00:00:25,199
what else can we do we will also go over

12
00:00:25,199 --> 00:00:27,359
towards the end hopefully we get there

13
00:00:27,359 --> 00:00:30,000
on new ways that you can characterize

14
00:00:30,000 --> 00:00:32,000
samples new ways you can characterize

15
00:00:32,000 --> 00:00:34,559
binaries and dlls on that system in

16
00:00:34,559 --> 00:00:36,079
order to better determine if you've been

17
00:00:36,079 --> 00:00:38,640
compromised by malicious software so

18
00:00:38,640 --> 00:00:40,399
here are some things that hopefully we

19
00:00:40,399 --> 00:00:42,320
will we will cover

20
00:00:42,320 --> 00:00:44,000
just the really important thing over

21
00:00:44,000 --> 00:00:45,520
here i have the live demonstration

22
00:00:45,520 --> 00:00:48,000
gremlin and that's because i always do

23
00:00:48,000 --> 00:00:50,480
live demos so far and sometimes there's

24
00:00:50,480 --> 00:00:53,039
that live demo gremlin that um uh you

25
00:00:53,039 --> 00:00:54,559
know always creeps in so hopefully that

26
00:00:54,559 --> 00:00:56,559
does not happen but if it does i'll do

27
00:00:56,559 --> 00:00:58,960
my best to recover and then just a quick

28
00:00:58,960 --> 00:01:00,160
disclaimer

29
00:01:00,160 --> 00:01:02,079
the information that i am presenting

30
00:01:02,079 --> 00:01:04,319
here um you know it definitely does not

31
00:01:04,319 --> 00:01:05,920
represent the department of defense the

32
00:01:05,920 --> 00:01:08,400
department of the us air force or any

33
00:01:08,400 --> 00:01:10,400
government agency it's just myself just

34
00:01:10,400 --> 00:01:12,400
my own research i'm working hopefully

35
00:01:12,400 --> 00:01:14,400
it's it's useful to help

36
00:01:14,400 --> 00:01:16,479
in the field

37
00:01:16,479 --> 00:01:17,600
all right so here are some book

38
00:01:17,600 --> 00:01:20,320
references and so this talk is actually

39
00:01:20,320 --> 00:01:22,400
a highly condensed version of a

40
00:01:22,400 --> 00:01:24,479
week-long workshop that i create and run

41
00:01:24,479 --> 00:01:26,960
on volatile memory analysis and so at

42
00:01:26,960 --> 00:01:30,159
least on the top right side

43
00:01:30,159 --> 00:01:32,560
all of those books are consulted at some

44
00:01:32,560 --> 00:01:35,119
point in the creation of this research

45
00:01:35,119 --> 00:01:37,200
and the creation of the of the materials

46
00:01:37,200 --> 00:01:38,880
and so it's also provided to you in case

47
00:01:38,880 --> 00:01:40,400
you want to learn more

48
00:01:40,400 --> 00:01:42,560
an important thing to see is towards

49
00:01:42,560 --> 00:01:44,720
this side if you see a question mark and

50
00:01:44,720 --> 00:01:47,040
then some text here and that's where i'm

51
00:01:47,040 --> 00:01:48,960
putting the exact reference that we're

52
00:01:48,960 --> 00:01:51,040
taking in this research so if you want

53
00:01:51,040 --> 00:01:52,960
to learn more if there's a concept that

54
00:01:52,960 --> 00:01:54,880
is interesting to you you can reach out

55
00:01:54,880 --> 00:01:57,520
to that to those those resources there

56
00:01:57,520 --> 00:02:00,320
okay just a real quick background who am

57
00:02:00,320 --> 00:02:03,360
i right now i'm a transitioning graduate

58
00:02:03,360 --> 00:02:04,320
student

59
00:02:04,320 --> 00:02:05,840
i just transitioned from being the

60
00:02:05,840 --> 00:02:08,479
director of cyber operations training

61
00:02:08,479 --> 00:02:10,878
for a very very large organization

62
00:02:10,878 --> 00:02:12,560
before that i was an assistant professor

63
00:02:12,560 --> 00:02:14,160
of computer science at the united states

64
00:02:14,160 --> 00:02:16,319
air force academy as well as a research

65
00:02:16,319 --> 00:02:17,840
scholar at the university of southern

66
00:02:17,840 --> 00:02:19,920
california so i love doing research love

67
00:02:19,920 --> 00:02:21,680
working with students i love creating

68
00:02:21,680 --> 00:02:23,840
software and putting it out there for

69
00:02:23,840 --> 00:02:26,160
for free you know so just our community

70
00:02:26,160 --> 00:02:28,319
can enhance in in various aspects of

71
00:02:28,319 --> 00:02:31,440
cyber security and then i also uh was

72
00:02:31,440 --> 00:02:33,920
director of intrusion response as

73
00:02:33,920 --> 00:02:36,319
the you know the afzert compute

74
00:02:36,319 --> 00:02:38,560
emergency response team as well as a

75
00:02:38,560 --> 00:02:40,400
security operation center manager before

76
00:02:40,400 --> 00:02:41,680
that one i was a software reverse

77
00:02:41,680 --> 00:02:43,760
engineer as well as a software developer

78
00:02:43,760 --> 00:02:44,800
and then some

79
00:02:44,800 --> 00:02:46,560
education i like to learn and hopefully

80
00:02:46,560 --> 00:02:48,400
we can learn some things through the

81
00:02:48,400 --> 00:02:50,080
process so let's talk about the resource

82
00:02:50,080 --> 00:02:52,000
motivation why are we here what do we

83
00:02:52,000 --> 00:02:53,840
hope to learn and gain from this

84
00:02:53,840 --> 00:02:56,080
research well the first one

85
00:02:56,080 --> 00:02:58,800
is a significant understanding that as

86
00:02:58,800 --> 00:03:01,200
we talk about malware malware

87
00:03:01,200 --> 00:03:03,519
exploitation ransomware like this

88
00:03:03,519 --> 00:03:05,440
continues to increase in sophistication

89
00:03:05,440 --> 00:03:06,720
and prevalence

90
00:03:06,720 --> 00:03:08,959
there was a research study that was that

91
00:03:08,959 --> 00:03:11,519
came out around i want to say 2015 or

92
00:03:11,519 --> 00:03:13,760
2016 from a corporation in the united

93
00:03:13,760 --> 00:03:16,080
states called rand and so what this

94
00:03:16,080 --> 00:03:18,640
organization found was that the average

95
00:03:18,640 --> 00:03:20,879
lifespan of malware you know contrary to

96
00:03:20,879 --> 00:03:23,760
what our anti-virus vendors will tell us

97
00:03:23,760 --> 00:03:25,680
contrary to that but the average

98
00:03:25,680 --> 00:03:27,440
lifespan of malware that they analyzed

99
00:03:27,440 --> 00:03:29,440
was over seven years before it was

100
00:03:29,440 --> 00:03:31,760
finally detected on the victim machine

101
00:03:31,760 --> 00:03:33,680
seven years to put things into

102
00:03:33,680 --> 00:03:36,000
perspective if i am writing a malware if

103
00:03:36,000 --> 00:03:38,319
i'm able to persist or live or become

104
00:03:38,319 --> 00:03:40,640
active on a machine for about an hour

105
00:03:40,640 --> 00:03:42,239
that's an infinity for me i can do a lot

106
00:03:42,239 --> 00:03:44,799
of things in an hour talk less of seven

107
00:03:44,799 --> 00:03:47,280
years that malware is still able to

108
00:03:47,280 --> 00:03:49,280
persist and live on

109
00:03:49,280 --> 00:03:50,799
victim machines and victim networks

110
00:03:50,799 --> 00:03:52,319
before they're finally being detected

111
00:03:52,319 --> 00:03:53,840
and then

112
00:03:53,840 --> 00:03:55,760
mitigated off of the enterprise

113
00:03:55,760 --> 00:03:57,280
something else you know as i say it

114
00:03:57,280 --> 00:03:59,439
continues to advance it has advanced

115
00:03:59,439 --> 00:04:01,840
beyond the point that even the operating

116
00:04:01,840 --> 00:04:03,280
system does not even know it's it's

117
00:04:03,280 --> 00:04:05,280
executing the malware yet it is still

118
00:04:05,280 --> 00:04:07,360
doing this at the will and the behest of

119
00:04:07,360 --> 00:04:10,400
the the malware authors but one place to

120
00:04:10,400 --> 00:04:13,200
really understand where malware cannot

121
00:04:13,200 --> 00:04:15,439
easily hide and especially where malware

122
00:04:15,439 --> 00:04:17,918
like cannot hide at all is in memory and

123
00:04:17,918 --> 00:04:19,918
so if we understand how do we analyze

124
00:04:19,918 --> 00:04:21,918
how do we look through memory then we

125
00:04:21,918 --> 00:04:24,160
can actually increase our ability to

126
00:04:24,160 --> 00:04:26,639
detect and to respond to various types

127
00:04:26,639 --> 00:04:28,479
of threats that are impacting our

128
00:04:28,479 --> 00:04:31,520
enterprise machines so if we just go

129
00:04:31,520 --> 00:04:33,360
quickly through the

130
00:04:33,360 --> 00:04:36,160
memory analysis artifacts and so on the

131
00:04:36,160 --> 00:04:38,479
right side or yes on yeah i believe

132
00:04:38,479 --> 00:04:40,080
that's your right side um so there are

133
00:04:40,080 --> 00:04:41,840
three main phases and any time that we

134
00:04:41,840 --> 00:04:43,840
are conducting an investigation

135
00:04:43,840 --> 00:04:45,440
especially like a forensic type

136
00:04:45,440 --> 00:04:47,280
investigation the first one we have to

137
00:04:47,280 --> 00:04:49,120
do some sort of acquisition how do we

138
00:04:49,120 --> 00:04:50,560
acquire how do we get something that

139
00:04:50,560 --> 00:04:52,160
we're going to analyze and then we go

140
00:04:52,160 --> 00:04:54,320
into the analysis phase you know we're

141
00:04:54,320 --> 00:04:56,320
looking and conducting the investigation

142
00:04:56,320 --> 00:04:57,680
and then finally we have some sort of

143
00:04:57,680 --> 00:04:59,520
report it doesn't have to be a fancy

144
00:04:59,520 --> 00:05:01,360
report but at least we're consolidating

145
00:05:01,360 --> 00:05:04,240
our notes into a cohesive manner that

146
00:05:04,240 --> 00:05:06,639
can be used to help other people along

147
00:05:06,639 --> 00:05:07,919
the way

148
00:05:07,919 --> 00:05:10,639
so if we look at memory analysis there

149
00:05:10,639 --> 00:05:13,600
are a few artifacts that i put up here

150
00:05:13,600 --> 00:05:15,280
that i like to reference on what can we

151
00:05:15,280 --> 00:05:17,360
actually extract from memory if we know

152
00:05:17,360 --> 00:05:19,680
what to do some of those would include

153
00:05:19,680 --> 00:05:21,520
every single process or daemon that's

154
00:05:21,520 --> 00:05:23,280
running on the operating system some of

155
00:05:23,280 --> 00:05:24,880
those would include root kits that are

156
00:05:24,880 --> 00:05:26,960
on the system that has now unpacked

157
00:05:26,960 --> 00:05:29,039
itself or packed software that has

158
00:05:29,039 --> 00:05:30,880
unpacked itself that i can now dump from

159
00:05:30,880 --> 00:05:33,120
memory to begin my analysis and then

160
00:05:33,120 --> 00:05:35,120
mitigation against it some of these

161
00:05:35,120 --> 00:05:36,880
other artifacts can definitely include

162
00:05:36,880 --> 00:05:39,440
multiple descriptor tables clipboard

163
00:05:39,440 --> 00:05:41,840
artifacts different types of files and

164
00:05:41,840 --> 00:05:44,080
prefetch and caching information that we

165
00:05:44,080 --> 00:05:46,560
can extract directly from memory as well

166
00:05:46,560 --> 00:05:49,440
as network activity there are a lot of

167
00:05:49,440 --> 00:05:51,440
artifacts that we can take from memory

168
00:05:51,440 --> 00:05:53,360
if we know how to do so and then if we

169
00:05:53,360 --> 00:05:55,680
also have a process to extract it and

170
00:05:55,680 --> 00:05:58,240
then to analyze it so later on we'll get

171
00:05:58,240 --> 00:05:59,919
into the tool that i've created and

172
00:05:59,919 --> 00:06:02,000
updated that will help us do this

173
00:06:02,000 --> 00:06:03,919
automatically and then hopefully it can

174
00:06:03,919 --> 00:06:05,440
increase your understanding of what's

175
00:06:05,440 --> 00:06:07,199
going on on the

176
00:06:07,199 --> 00:06:09,280
on the victim machine

177
00:06:09,280 --> 00:06:11,120
so we have a

178
00:06:11,120 --> 00:06:13,520
memory analysis triage process so i put

179
00:06:13,520 --> 00:06:15,840
kind of these together that through my

180
00:06:15,840 --> 00:06:18,960
years of analyzing memory there and just

181
00:06:18,960 --> 00:06:21,600
looking at copious amounts of data i

182
00:06:21,600 --> 00:06:23,199
figured out that just about everything

183
00:06:23,199 --> 00:06:24,479
that we're looking at can be

184
00:06:24,479 --> 00:06:26,960
consolidated into these five main

185
00:06:26,960 --> 00:06:29,520
pillars so here's our stack of analysis

186
00:06:29,520 --> 00:06:32,240
that again we start from our acquisition

187
00:06:32,240 --> 00:06:34,080
here and then we go into our analysis

188
00:06:34,080 --> 00:06:37,120
and up to our reporting so on the first

189
00:06:37,120 --> 00:06:38,400
slide we have some sort of physical

190
00:06:38,400 --> 00:06:40,479
memory that we're going to acquire we

191
00:06:40,479 --> 00:06:42,639
take memory and then we create an image

192
00:06:42,639 --> 00:06:44,479
of this so now we can use various

193
00:06:44,479 --> 00:06:46,960
extraction routines to understand what's

194
00:06:46,960 --> 00:06:49,120
there and then to begin our analysis

195
00:06:49,120 --> 00:06:50,880
now from our different extraction

196
00:06:50,880 --> 00:06:53,680
routines this gives us just raw data

197
00:06:53,680 --> 00:06:56,000
lots of data that we now go through line

198
00:06:56,000 --> 00:06:58,000
by line or use some sort of routine in

199
00:06:58,000 --> 00:06:59,360
order to analyze

200
00:06:59,360 --> 00:07:01,280
then with various aggregation routines

201
00:07:01,280 --> 00:07:03,599
we can now consolidate these most of the

202
00:07:03,599 --> 00:07:05,520
data into our five pillars that i've

203
00:07:05,520 --> 00:07:07,520
mentioned previously some sort of

204
00:07:07,520 --> 00:07:09,120
information that relate relates to a

205
00:07:09,120 --> 00:07:11,280
process some information that relates to

206
00:07:11,280 --> 00:07:13,520
files information that might relate to a

207
00:07:13,520 --> 00:07:15,759
module like a dll or a driver other

208
00:07:15,759 --> 00:07:16,960
information that relates to network

209
00:07:16,960 --> 00:07:19,120
activity and finally which information

210
00:07:19,120 --> 00:07:21,360
is can i use as some sort of cache for

211
00:07:21,360 --> 00:07:23,440
instance a journal like your master file

212
00:07:23,440 --> 00:07:25,919
table we can call this a cache of the

213
00:07:25,919 --> 00:07:27,520
file system that i can extract from

214
00:07:27,520 --> 00:07:29,280
memory to see what's running on the

215
00:07:29,280 --> 00:07:31,360
system and then finally towards our

216
00:07:31,360 --> 00:07:33,840
reporting side this is where we take the

217
00:07:33,840 --> 00:07:35,840
data and then we convert from data into

218
00:07:35,840 --> 00:07:37,360
knowledge in order to help us make

219
00:07:37,360 --> 00:07:40,000
decisions about what we're seeing

220
00:07:40,000 --> 00:07:41,919
so just real quick here are some tools

221
00:07:41,919 --> 00:07:44,479
of the trade in order to conduct our

222
00:07:44,479 --> 00:07:46,960
acquisition analysis and then however we

223
00:07:46,960 --> 00:07:49,199
choose to report the first one there are

224
00:07:49,199 --> 00:07:51,520
different aspects that we can use in

225
00:07:51,520 --> 00:07:54,080
order to do that acquisition so there's

226
00:07:54,080 --> 00:07:57,360
a main two main kind of families of

227
00:07:57,360 --> 00:07:59,680
acquisition if we look at online you

228
00:07:59,680 --> 00:08:02,080
know the system is on it's working and

229
00:08:02,080 --> 00:08:03,680
now i'm doing a dump of the memory so i

230
00:08:03,680 --> 00:08:05,680
can begin that analysis or if it's

231
00:08:05,680 --> 00:08:07,759
offline the system has turned off at

232
00:08:07,759 --> 00:08:08,879
some point

233
00:08:08,879 --> 00:08:10,879
there are still areas that i can go into

234
00:08:10,879 --> 00:08:13,680
the non-volatile area of the hard drive

235
00:08:13,680 --> 00:08:16,319
and extract pieces of the memory that

236
00:08:16,319 --> 00:08:17,759
might have been written to disk to allow

237
00:08:17,759 --> 00:08:19,680
us to conduct that investigation

238
00:08:19,680 --> 00:08:20,879
on this

239
00:08:20,879 --> 00:08:21,840
for this

240
00:08:21,840 --> 00:08:24,960
for this talk i utilized this tool here

241
00:08:24,960 --> 00:08:27,759
called magnet ram capture so it's it's a

242
00:08:27,759 --> 00:08:30,240
really really it's a tried and true tool

243
00:08:30,240 --> 00:08:32,320
um that i've used many times in various

244
00:08:32,320 --> 00:08:34,159
investigations in order to help me

245
00:08:34,159 --> 00:08:36,640
acquire an image an exact copy of ram

246
00:08:36,640 --> 00:08:39,120
onto this onto the hard drive or onto my

247
00:08:39,120 --> 00:08:41,679
system so i can begin that analysis then

248
00:08:41,679 --> 00:08:43,839
the analysis tools um there are many

249
00:08:43,839 --> 00:08:45,680
tools that exist out there to help us

250
00:08:45,680 --> 00:08:48,880
and do analysis for for this talk we

251
00:08:48,880 --> 00:08:52,160
wrote a wrapper on top of volatility in

252
00:08:52,160 --> 00:08:53,839
order to help us just get the raw data

253
00:08:53,839 --> 00:08:55,600
and then do additional analysis from

254
00:08:55,600 --> 00:08:57,440
that standpoint and then reporting

255
00:08:57,440 --> 00:08:59,680
however whatever else we want to do with

256
00:08:59,680 --> 00:09:01,920
the data like where do we put it you can

257
00:09:01,920 --> 00:09:04,800
ingest this into like a cabana dashboard

258
00:09:04,800 --> 00:09:07,040
or an elk stack or you can just write

259
00:09:07,040 --> 00:09:08,640
your own custom template which is what i

260
00:09:08,640 --> 00:09:10,560
did i just wrote something custom real

261
00:09:10,560 --> 00:09:12,800
quick in html to allow us to better

262
00:09:12,800 --> 00:09:14,560
browse the system and see what we're

263
00:09:14,560 --> 00:09:16,320
able to extract from the

264
00:09:16,320 --> 00:09:18,000
from the machine

265
00:09:18,000 --> 00:09:19,440
so if we look into the

266
00:09:19,440 --> 00:09:21,920
data extraction as i mentioned i use my

267
00:09:21,920 --> 00:09:24,800
extraction for volatility now just as a

268
00:09:24,800 --> 00:09:27,200
spoiler i'm not talking about how to use

269
00:09:27,200 --> 00:09:29,440
volatility but just stating that that

270
00:09:29,440 --> 00:09:31,519
was a tool used to acquire the data and

271
00:09:31,519 --> 00:09:33,040
then let's do additional analysis from

272
00:09:33,040 --> 00:09:35,040
that standpoint so if we look at the

273
00:09:35,040 --> 00:09:36,720
memory analysis there's different ways

274
00:09:36,720 --> 00:09:38,880
that we want to gain information about

275
00:09:38,880 --> 00:09:41,040
the system i spoke about those five

276
00:09:41,040 --> 00:09:42,880
pillars you can see some of those here

277
00:09:42,880 --> 00:09:45,200
in which process there are different

278
00:09:45,200 --> 00:09:48,080
plug-ins wheeled collar or procedures

279
00:09:48,080 --> 00:09:50,320
that i can use to analyze the memory in

280
00:09:50,320 --> 00:09:52,480
the research you will also see this uh

281
00:09:52,480 --> 00:09:55,440
concept of a sibling so normally

282
00:09:55,440 --> 00:09:57,040
whenever there is a process that is

283
00:09:57,040 --> 00:09:59,519
instantiated on the on the

284
00:09:59,519 --> 00:10:01,600
host machine you know you have a parent

285
00:10:01,600 --> 00:10:03,200
like a parent process that was used to

286
00:10:03,200 --> 00:10:05,279
instantiate other processes but it's

287
00:10:05,279 --> 00:10:07,600
also useful to understand the sibling

288
00:10:07,600 --> 00:10:09,600
process which other processes were

289
00:10:09,600 --> 00:10:12,240
created by the same parent

290
00:10:12,240 --> 00:10:14,480
this this is applicable in certain areas

291
00:10:14,480 --> 00:10:16,720
like ransomware so if you have a system

292
00:10:16,720 --> 00:10:17,760
that's actually compromised with

293
00:10:17,760 --> 00:10:19,839
ransomware you would normally notice if

294
00:10:19,839 --> 00:10:22,399
you've ever analyzed a a computer that

295
00:10:22,399 --> 00:10:24,800
that has a like a real ransomware on it

296
00:10:24,800 --> 00:10:26,480
it's never just one process that's

297
00:10:26,480 --> 00:10:28,480
running that's allowing it to like

298
00:10:28,480 --> 00:10:30,560
encrypt the information on the hard

299
00:10:30,560 --> 00:10:32,320
drive and then show the screen you know

300
00:10:32,320 --> 00:10:34,399
all your data are belong to us unless

301
00:10:34,399 --> 00:10:36,320
you pay this this money or you you pay

302
00:10:36,320 --> 00:10:38,640
this fine it's always multiple processes

303
00:10:38,640 --> 00:10:40,320
and so if you are lucky that you're like

304
00:10:40,320 --> 00:10:42,160
ah well this is the process that's

305
00:10:42,160 --> 00:10:44,320
showing the screen you know enter go

306
00:10:44,320 --> 00:10:46,959
here call this number to

307
00:10:46,959 --> 00:10:48,399
decrypt your information on the drive if

308
00:10:48,399 --> 00:10:50,480
you try and kill that process many times

309
00:10:50,480 --> 00:10:52,720
you'll see that it will just re respawn

310
00:10:52,720 --> 00:10:55,040
like multiple programs are watching each

311
00:10:55,040 --> 00:10:55,839
other

312
00:10:55,839 --> 00:10:58,399
so that's why i've added in like this

313
00:10:58,399 --> 00:11:00,640
sibling process such that we can see

314
00:11:00,640 --> 00:11:02,399
like who are the other processes that

315
00:11:02,399 --> 00:11:04,320
are instantiated from the same parent to

316
00:11:04,320 --> 00:11:06,399
better be able to isolate where that

317
00:11:06,399 --> 00:11:08,800
ransomware other programs might be

318
00:11:08,800 --> 00:11:11,440
checking itself in order to stay alive

319
00:11:11,440 --> 00:11:13,279
then network activity i spoke about it

320
00:11:13,279 --> 00:11:16,000
before dlls files and then data carving

321
00:11:16,000 --> 00:11:17,839
there are a couple of modules that we

322
00:11:17,839 --> 00:11:20,320
could use to extract additional

323
00:11:20,320 --> 00:11:22,320
data or additional memory dumps from

324
00:11:22,320 --> 00:11:24,079
that image and then conduct our analysis

325
00:11:24,079 --> 00:11:25,920
further from that standpoint

326
00:11:25,920 --> 00:11:27,279
right now

327
00:11:27,279 --> 00:11:29,760
if any actually i i am curious as a show

328
00:11:29,760 --> 00:11:30,959
of hands if you can just let me know

329
00:11:30,959 --> 00:11:32,959
real quick has anyone ever done memory

330
00:11:32,959 --> 00:11:36,000
analysis or a used volatility or recall

331
00:11:36,000 --> 00:11:38,480
type of tool um to conduct investigation

332
00:11:38,480 --> 00:11:40,640
yeah okay all right very good so that's

333
00:11:40,640 --> 00:11:43,200
that's quite a few people so if you have

334
00:11:43,200 --> 00:11:45,279
done this before

335
00:11:45,279 --> 00:11:47,120
then i think this slide really hits home

336
00:11:47,120 --> 00:11:49,519
in which let's appreciate the difficulty

337
00:11:49,519 --> 00:11:52,160
with actually conducting memory analysis

338
00:11:52,160 --> 00:11:54,480
so for one and you will you you will

339
00:11:54,480 --> 00:11:55,920
understand this if you've used these

340
00:11:55,920 --> 00:11:58,720
types of tools that there is a deluge of

341
00:11:58,720 --> 00:12:01,120
data just raw data that comes from any

342
00:12:01,120 --> 00:12:03,040
type of memory analysis

343
00:12:03,040 --> 00:12:04,720
and so on my side every time i would run

344
00:12:04,720 --> 00:12:07,040
a plug-in or try and understand like

345
00:12:07,040 --> 00:12:08,079
just

346
00:12:08,079 --> 00:12:10,000
enact some sort of routine to extract

347
00:12:10,000 --> 00:12:11,519
data from a memory image i'll always

348
00:12:11,519 --> 00:12:13,279
save that to another file then i have to

349
00:12:13,279 --> 00:12:15,760
analyze these files line by line line by

350
00:12:15,760 --> 00:12:17,440
line what if you're in an actual

351
00:12:17,440 --> 00:12:19,279
real-life investigation

352
00:12:19,279 --> 00:12:21,120
this can be very very tedious because

353
00:12:21,120 --> 00:12:23,040
there's a lot of data that's going to be

354
00:12:23,040 --> 00:12:25,360
exchanged across these routines and so

355
00:12:25,360 --> 00:12:27,279
that's why it's like man this is an

356
00:12:27,279 --> 00:12:28,560
inefficient

357
00:12:28,560 --> 00:12:30,399
way of conducting this type of memory

358
00:12:30,399 --> 00:12:33,279
analysis but that's okay um you know the

359
00:12:33,279 --> 00:12:36,160
the good news is i saw that and i said

360
00:12:36,160 --> 00:12:37,839
there's got to be a better way that we

361
00:12:37,839 --> 00:12:40,480
can aggregate this data and that's why

362
00:12:40,480 --> 00:12:42,399
in the research you'll see this concept

363
00:12:42,399 --> 00:12:43,839
called plug-in

364
00:12:43,839 --> 00:12:46,079
aggregates or aggregate plug-ins as well

365
00:12:46,079 --> 00:12:48,880
as a data cross-referencing feature

366
00:12:48,880 --> 00:12:50,399
so this is what it looks like an

367
00:12:50,399 --> 00:12:52,639
aggregate plug-in if we want to talk

368
00:12:52,639 --> 00:12:54,480
about a process

369
00:12:54,480 --> 00:12:56,000
what does that process look like how is

370
00:12:56,000 --> 00:12:58,639
it instantiated what details are

371
00:12:58,639 --> 00:13:00,720
relevant for that specific process if

372
00:13:00,720 --> 00:13:02,399
we're using it once again a tool like

373
00:13:02,399 --> 00:13:05,760
volatility there are like over 20 or 30

374
00:13:05,760 --> 00:13:07,600
different plugins that we would have to

375
00:13:07,600 --> 00:13:09,920
run in order just to gain an

376
00:13:09,920 --> 00:13:12,320
understanding and an awareness about a

377
00:13:12,320 --> 00:13:13,440
process

378
00:13:13,440 --> 00:13:15,360
so now if we can use different aggregate

379
00:13:15,360 --> 00:13:17,200
routines we can actually just say okay

380
00:13:17,200 --> 00:13:19,519
let's analyze all that

381
00:13:19,519 --> 00:13:21,279
different information or the data from

382
00:13:21,279 --> 00:13:23,360
those different routines let's analyze

383
00:13:23,360 --> 00:13:24,720
that and now i will just show you that

384
00:13:24,720 --> 00:13:27,360
hey here is a process and now you can

385
00:13:27,360 --> 00:13:29,519
see all the information up front instead

386
00:13:29,519 --> 00:13:32,000
of having to consult so many different

387
00:13:32,000 --> 00:13:34,079
files that have been dumped in order you

388
00:13:34,079 --> 00:13:35,839
know as you're understanding this system

389
00:13:35,839 --> 00:13:38,000
right

390
00:13:38,079 --> 00:13:39,920
so that's what this is is kind of

391
00:13:39,920 --> 00:13:41,680
producing for you and i just refer

392
00:13:41,680 --> 00:13:44,720
reference it as a the xavier construct

393
00:13:44,720 --> 00:13:46,720
and now you have a user interface a

394
00:13:46,720 --> 00:13:48,959
semi-interactive interface to say okay i

395
00:13:48,959 --> 00:13:51,360
want to learn about a process a module a

396
00:13:51,360 --> 00:13:52,399
driver

397
00:13:52,399 --> 00:13:53,680
different things that are present on the

398
00:13:53,680 --> 00:13:55,680
system let me just click on that and let

399
00:13:55,680 --> 00:13:57,760
all the information be presented to me

400
00:13:57,760 --> 00:13:59,279
instead of me having to read so many

401
00:13:59,279 --> 00:14:00,480
different files so that's what that

402
00:14:00,480 --> 00:14:02,480
construct looks like all right um so

403
00:14:02,480 --> 00:14:04,560
we're gonna dive straight into

404
00:14:04,560 --> 00:14:06,399
a quick demo real quick and hopefully

405
00:14:06,399 --> 00:14:07,920
these things are going to work um

406
00:14:07,920 --> 00:14:10,160
because um we i believe we're gonna have

407
00:14:10,160 --> 00:14:12,800
at least three demos and we'll we'll see

408
00:14:12,800 --> 00:14:15,199
if it works out

409
00:14:15,199 --> 00:14:16,880
okay so everything that we are talking

410
00:14:16,880 --> 00:14:18,639
about actually

411
00:14:18,639 --> 00:14:20,800
um almost everything we're talking about

412
00:14:20,800 --> 00:14:22,880
is already present on my github and so

413
00:14:22,880 --> 00:14:24,720
if you just google my name solomon sonia

414
00:14:24,720 --> 00:14:26,959
github xavier um you'll see all of this

415
00:14:26,959 --> 00:14:29,199
code so the code the tools and how to

416
00:14:29,199 --> 00:14:31,839
run it i need to enhance the how to that

417
00:14:31,839 --> 00:14:33,279
that will come hopefully on sunday as

418
00:14:33,279 --> 00:14:35,199
i'm flying back but at least everything

419
00:14:35,199 --> 00:14:37,199
here is going to be present and this

420
00:14:37,199 --> 00:14:39,600
morning i made another update so that

421
00:14:39,600 --> 00:14:42,839
update should be live hopefully um this

422
00:14:42,839 --> 00:14:45,279
afternoon so this is what the

423
00:14:45,279 --> 00:14:47,519
the actual tool itself looks like if i

424
00:14:47,519 --> 00:14:50,720
go into uh this folder so i think the

425
00:14:50,720 --> 00:14:51,760
text is

426
00:14:51,760 --> 00:14:54,560
relatively small um but to set it up if

427
00:14:54,560 --> 00:14:56,399
you go into the github there is a jar

428
00:14:56,399 --> 00:14:58,480
file that's or a binary that's already

429
00:14:58,480 --> 00:15:00,560
created that you can use to run and so

430
00:15:00,560 --> 00:15:02,639
you'll just download that into your you

431
00:15:02,639 --> 00:15:03,760
know whichever folder you want to do

432
00:15:03,760 --> 00:15:06,959
your analysis and then inside here there

433
00:15:06,959 --> 00:15:09,360
is a separate folder that is created

434
00:15:09,360 --> 00:15:11,519
it's called xavier framework and so if

435
00:15:11,519 --> 00:15:12,399
this is the first time that you're

436
00:15:12,399 --> 00:15:13,680
running the tool you don't have to worry

437
00:15:13,680 --> 00:15:15,600
about setting up your machine just yet

438
00:15:15,600 --> 00:15:17,600
just double click it and then close and

439
00:15:17,600 --> 00:15:19,839
now your your basic folder construct

440
00:15:19,839 --> 00:15:22,240
should be set up for you and so a few

441
00:15:22,240 --> 00:15:24,639
things to understand in the export this

442
00:15:24,639 --> 00:15:27,279
is like you know the export this is the

443
00:15:27,279 --> 00:15:29,279
output from the analysis that the tool

444
00:15:29,279 --> 00:15:30,240
provides

445
00:15:30,240 --> 00:15:32,160
in the import

446
00:15:32,160 --> 00:15:33,839
in memory analysis there's a memory

447
00:15:33,839 --> 00:15:35,199
analysis directory that should be

448
00:15:35,199 --> 00:15:37,279
created and inside here this is where

449
00:15:37,279 --> 00:15:39,680
you would drop in your volatility

450
00:15:39,680 --> 00:15:42,079
tool your executable so right now this

451
00:15:42,079 --> 00:15:44,480
runs best on windows because as i'm

452
00:15:44,480 --> 00:15:46,160
developing the software i'm like you

453
00:15:46,160 --> 00:15:47,600
know i wanted to be cross-platform

454
00:15:47,600 --> 00:15:49,759
compatible but unfortunately i chose the

455
00:15:49,759 --> 00:15:51,199
hardest system to develop on which is

456
00:15:51,199 --> 00:15:53,920
actually windows versus the unix side so

457
00:15:53,920 --> 00:15:55,759
um all of these that we're doing is

458
00:15:55,759 --> 00:15:58,399
version 2.3 or just version two and so

459
00:15:58,399 --> 00:16:00,560
finally whenever you see version three

460
00:16:00,560 --> 00:16:02,480
uploaded onto github hopefully within a

461
00:16:02,480 --> 00:16:03,759
month or two that's when it's

462
00:16:03,759 --> 00:16:05,279
cross-platform compatible that runs

463
00:16:05,279 --> 00:16:07,360
fully on unix and then it also runs

464
00:16:07,360 --> 00:16:09,519
fully on windows side but at least the

465
00:16:09,519 --> 00:16:11,199
best use case right now is running this

466
00:16:11,199 --> 00:16:14,000
on your your windows machine okay so

467
00:16:14,000 --> 00:16:15,759
with your volatility tool you'll you'll

468
00:16:15,759 --> 00:16:17,839
drop the latest version of volatility

469
00:16:17,839 --> 00:16:19,120
here into the

470
00:16:19,120 --> 00:16:21,519
memory analysis folder and then in the

471
00:16:21,519 --> 00:16:23,600
memory image this is where you would put

472
00:16:23,600 --> 00:16:25,519
your image that you have already

473
00:16:25,519 --> 00:16:27,279
extracted before that we want to run the

474
00:16:27,279 --> 00:16:28,399
analysis

475
00:16:28,399 --> 00:16:31,600
now there is a help file a setup.conf

476
00:16:31,600 --> 00:16:34,000
file for your configuration and inside

477
00:16:34,000 --> 00:16:35,040
here

478
00:16:35,040 --> 00:16:37,279
a template should be written to your

479
00:16:37,279 --> 00:16:39,120
hard drive once you run this the first

480
00:16:39,120 --> 00:16:41,199
time but there are three main artifacts

481
00:16:41,199 --> 00:16:42,720
that you have to change in order to make

482
00:16:42,720 --> 00:16:45,360
this run sufficiently the first one

483
00:16:45,360 --> 00:16:47,040
is here where it says investigator name

484
00:16:47,040 --> 00:16:48,880
if you just enter your name

485
00:16:48,880 --> 00:16:50,480
or whoever is you know conducting

486
00:16:50,480 --> 00:16:52,480
investigation or doing the analysis and

487
00:16:52,480 --> 00:16:54,720
then that that key is used in every

488
00:16:54,720 --> 00:16:56,160
plugin that's run so it kind of just

489
00:16:56,160 --> 00:16:58,399
helps you like know who did what at what

490
00:16:58,399 --> 00:17:01,440
time etc then the next artifact that is

491
00:17:01,440 --> 00:17:03,360
necessary and a description of the

492
00:17:03,360 --> 00:17:04,480
investigation

493
00:17:04,480 --> 00:17:07,280
so on this side i am running a memory

494
00:17:07,280 --> 00:17:09,439
analysis and i conducted multiple

495
00:17:09,439 --> 00:17:11,280
experiments to see like what does what

496
00:17:11,280 --> 00:17:13,119
does an interpreter look like whenever

497
00:17:13,119 --> 00:17:15,199
you infect a machine like how do you

498
00:17:15,199 --> 00:17:17,119
determine um once it's there how do you

499
00:17:17,119 --> 00:17:18,799
determine like the the new

500
00:17:18,799 --> 00:17:20,799
uh process that has been compromised

501
00:17:20,799 --> 00:17:22,319
with the malware that's been dumped into

502
00:17:22,319 --> 00:17:25,119
the machine if you saw from paula she

503
00:17:25,119 --> 00:17:26,880
just mentioned that you know there are

504
00:17:26,880 --> 00:17:28,640
different types of hooking and code

505
00:17:28,640 --> 00:17:30,400
injection that could occur and she even

506
00:17:30,400 --> 00:17:31,840
mentioned metasploit i'm like that's a

507
00:17:31,840 --> 00:17:34,160
perfect um segway because we will see

508
00:17:34,160 --> 00:17:35,520
like hey what does that metasploit

509
00:17:35,520 --> 00:17:37,120
actually look like in memory and so

510
00:17:37,120 --> 00:17:38,960
that's something really cool um that we

511
00:17:38,960 --> 00:17:41,520
can um investigate but that's the image

512
00:17:41,520 --> 00:17:44,160
that we're running here just an initial

513
00:17:44,160 --> 00:17:46,080
interpreter was instantiated on the

514
00:17:46,080 --> 00:17:48,160
victim machine and at that point i took

515
00:17:48,160 --> 00:17:49,600
a dump of memory to see what does it

516
00:17:49,600 --> 00:17:51,760
look like what's there what

517
00:17:51,760 --> 00:17:53,840
keys and alerts can be provided to us

518
00:17:53,840 --> 00:17:55,120
such that now we can see how do you

519
00:17:55,120 --> 00:17:57,200
better secure your machines and then

520
00:17:57,200 --> 00:17:59,120
here the profile so volatility still

521
00:17:59,120 --> 00:18:01,360
requires a profile and so the profile

522
00:18:01,360 --> 00:18:03,919
that i am running this on is a windows 7

523
00:18:03,919 --> 00:18:07,039
i'm service pack one x64

524
00:18:07,039 --> 00:18:08,960
right

525
00:18:08,960 --> 00:18:11,200
okay and then finally packages so you

526
00:18:11,200 --> 00:18:13,039
will have to set up the packages i think

527
00:18:13,039 --> 00:18:14,559
i'll come back and

528
00:18:14,559 --> 00:18:16,320
auto download packet these packages for

529
00:18:16,320 --> 00:18:18,240
you on the windows side but there's

530
00:18:18,240 --> 00:18:20,080
dependencies that's required to just the

531
00:18:20,080 --> 00:18:22,559
dependencies executable

532
00:18:22,559 --> 00:18:25,039
graphviz and you'll see how this graphis

533
00:18:25,039 --> 00:18:26,160
is

534
00:18:26,160 --> 00:18:29,520
useful in this i believe you will

535
00:18:29,520 --> 00:18:31,280
uh we'll see we'll see what it looks

536
00:18:31,280 --> 00:18:32,400
like i don't know what we'll see it

537
00:18:32,400 --> 00:18:34,320
looks like and then strings and who is

538
00:18:34,320 --> 00:18:36,720
to do a reverse quiz look up on your on

539
00:18:36,720 --> 00:18:38,640
your computer

540
00:18:38,640 --> 00:18:40,559
right okay so when all of those are

541
00:18:40,559 --> 00:18:42,799
configured and ready to run we just

542
00:18:42,799 --> 00:18:45,200
double click our our executable and as

543
00:18:45,200 --> 00:18:48,400
soon as it runs let me

544
00:18:48,400 --> 00:18:49,520
do this

545
00:18:49,520 --> 00:18:51,919
and it will run it will now

546
00:18:51,919 --> 00:18:54,240
look at the volatility executable that

547
00:18:54,240 --> 00:18:56,559
we put into the memory analysis folder

548
00:18:56,559 --> 00:18:58,240
and then from the plugins that it learns

549
00:18:58,240 --> 00:19:01,200
it pre it provides those plugins to you

550
00:19:01,200 --> 00:19:03,520
to say okay i want to execute x y x or y

551
00:19:03,520 --> 00:19:05,039
plug in et cetera however you like to

552
00:19:05,039 --> 00:19:07,120
conduct your investigation and so this

553
00:19:07,120 --> 00:19:09,440
part i've spoken about it you know at

554
00:19:09,440 --> 00:19:11,200
for a while at other at other

555
00:19:11,200 --> 00:19:13,039
conferences but in essence if there is a

556
00:19:13,039 --> 00:19:14,640
plug-in that you really love running

557
00:19:14,640 --> 00:19:17,520
like let's say netscan or so so you can

558
00:19:17,520 --> 00:19:20,320
search um for it at this plug-in search

559
00:19:20,320 --> 00:19:21,440
and then click

560
00:19:21,440 --> 00:19:23,200
netscan or all of the plug-ins that you

561
00:19:23,200 --> 00:19:24,640
like and then when you're ready to

562
00:19:24,640 --> 00:19:26,320
execute that you can just click analyze

563
00:19:26,320 --> 00:19:28,080
as soon as you click analyze

564
00:19:28,080 --> 00:19:31,120
moving into the memory analysis

565
00:19:31,120 --> 00:19:32,960
side down here at the bottom each of the

566
00:19:32,960 --> 00:19:35,120
plugins will have its own tab that you

567
00:19:35,120 --> 00:19:37,280
can see the outputs of that but that's

568
00:19:37,280 --> 00:19:39,120
you know i mean that's that's the that's

569
00:19:39,120 --> 00:19:40,559
the old stuff you know let's talk about

570
00:19:40,559 --> 00:19:44,400
the new things here so in this um talk

571
00:19:44,400 --> 00:19:46,720
the advanced analysis that we perform

572
00:19:46,720 --> 00:19:48,320
you know i try to make it as easy as

573
00:19:48,320 --> 00:19:49,840
possible for you so once you instantiate

574
00:19:49,840 --> 00:19:51,520
the program you know everything is

575
00:19:51,520 --> 00:19:53,120
running well

576
00:19:53,120 --> 00:19:56,799
when you see different plugins here

577
00:19:56,799 --> 00:19:58,080
yeah when you see different plugins show

578
00:19:58,080 --> 00:20:00,160
up all right you're good to go um from

579
00:20:00,160 --> 00:20:02,799
that point if you look here this tells

580
00:20:02,799 --> 00:20:04,880
you details about the configuration file

581
00:20:04,880 --> 00:20:06,559
that you set up previously

582
00:20:06,559 --> 00:20:08,159
so it tells you the path to the

583
00:20:08,159 --> 00:20:11,039
volatility executable that's here as

584
00:20:11,039 --> 00:20:12,799
well as the profile that you put into

585
00:20:12,799 --> 00:20:15,039
the configuration file it says the path

586
00:20:15,039 --> 00:20:18,000
to the image that it's reading from the

587
00:20:18,000 --> 00:20:21,200
memory image folder that we went over

588
00:20:21,200 --> 00:20:23,520
attributes about that file and then this

589
00:20:23,520 --> 00:20:24,880
is the investigator name so the

590
00:20:24,880 --> 00:20:26,400
investigator name that you put in as

591
00:20:26,400 --> 00:20:28,000
well as the

592
00:20:28,000 --> 00:20:29,520
the description you know that's going to

593
00:20:29,520 --> 00:20:30,880
show up here and then it will be in

594
00:20:30,880 --> 00:20:32,240
every single one of the exports that

595
00:20:32,240 --> 00:20:34,880
come once the analysis is created and

596
00:20:34,880 --> 00:20:36,080
then from that standpoint you have to

597
00:20:36,080 --> 00:20:38,320
just hit initiate

598
00:20:38,320 --> 00:20:40,240
advanced analysis and then so you you

599
00:20:40,240 --> 00:20:42,159
click it and then you go take a long

600
00:20:42,159 --> 00:20:43,120
coffee

601
00:20:43,120 --> 00:20:45,440
because depending on your the speed of

602
00:20:45,440 --> 00:20:47,600
your machine as well as the size of the

603
00:20:47,600 --> 00:20:49,440
image that announce is going to take at

604
00:20:49,440 --> 00:20:51,679
least like 30 minutes to run through the

605
00:20:51,679 --> 00:20:53,360
majority of the plugins and then do the

606
00:20:53,360 --> 00:20:55,200
aggregation for you and then to finally

607
00:20:55,200 --> 00:20:57,200
produce that report so that's why i say

608
00:20:57,200 --> 00:20:58,559
you just click it and then like just let

609
00:20:58,559 --> 00:21:00,640
it run for some time i'm not going to do

610
00:21:00,640 --> 00:21:02,400
that because you know we'll i don't even

611
00:21:02,400 --> 00:21:04,240
have enough time for the initial

612
00:21:04,240 --> 00:21:06,159
analysis to occur but let's say i've

613
00:21:06,159 --> 00:21:08,159
clicked it 30 minutes has elapsed

614
00:21:08,159 --> 00:21:10,400
whenever it's done it will produce a

615
00:21:10,400 --> 00:21:13,360
folder that looks similar

616
00:21:13,360 --> 00:21:15,280
to

617
00:21:15,280 --> 00:21:18,320
uh let me find yep

618
00:21:18,320 --> 00:21:20,400
no

619
00:21:20,400 --> 00:21:23,120
one second

620
00:21:23,760 --> 00:21:26,760
experiment

621
00:21:32,159 --> 00:21:34,320
okay so whenever it's finished running

622
00:21:34,320 --> 00:21:36,480
and so here i'm just in another folder

623
00:21:36,480 --> 00:21:37,679
now this is where i ran one of the

624
00:21:37,679 --> 00:21:40,080
experiments looking at what is a

625
00:21:40,080 --> 00:21:42,159
an initial interpreter look like so in

626
00:21:42,159 --> 00:21:43,600
this folder you know this is where we

627
00:21:43,600 --> 00:21:45,679
set it up previously as you saw like

628
00:21:45,679 --> 00:21:47,360
there was a template we put our files

629
00:21:47,360 --> 00:21:49,280
and then we we launched the execution so

630
00:21:49,280 --> 00:21:51,039
here once it's run

631
00:21:51,039 --> 00:21:53,360
you go back into the folder you go into

632
00:21:53,360 --> 00:21:54,480
exports because you're looking at the

633
00:21:54,480 --> 00:21:56,720
data that is exported from the tool

634
00:21:56,720 --> 00:21:59,039
and then whichever dates that we ran it

635
00:21:59,039 --> 00:22:01,039
so this is the the last time i ran this

636
00:22:01,039 --> 00:22:03,600
analysis and then there are like there's

637
00:22:03,600 --> 00:22:06,159
a folder for every plugin that was run

638
00:22:06,159 --> 00:22:08,080
and on top of that if i go into

639
00:22:08,080 --> 00:22:09,280
something like

640
00:22:09,280 --> 00:22:11,280
let me just do the mfd parser and so if

641
00:22:11,280 --> 00:22:13,120
i go into a file like this like the mf2

642
00:22:13,120 --> 00:22:14,320
parser

643
00:22:14,320 --> 00:22:15,760
this is why you set up the configuration

644
00:22:15,760 --> 00:22:17,360
file so all of those details are already

645
00:22:17,360 --> 00:22:18,960
put into every file that is run and

646
00:22:18,960 --> 00:22:20,640
executed and then if you still like to

647
00:22:20,640 --> 00:22:21,919
say well i want to look at this line by

648
00:22:21,919 --> 00:22:23,840
line well you can look at the line by

649
00:22:23,840 --> 00:22:26,320
line if you desire but it's just here

650
00:22:26,320 --> 00:22:28,080
for reference and then for the tool

651
00:22:28,080 --> 00:22:30,080
itself to do the analysis

652
00:22:30,080 --> 00:22:31,919
now when it's finished two important

653
00:22:31,919 --> 00:22:34,159
folders that you care most about the

654
00:22:34,159 --> 00:22:36,320
first one is going to be the html folder

655
00:22:36,320 --> 00:22:37,679
and then the next one is going to be the

656
00:22:37,679 --> 00:22:39,440
manifest folder

657
00:22:39,440 --> 00:22:41,440
so html and manifest we'll talk about

658
00:22:41,440 --> 00:22:43,600
the manifest in in the next demo but if

659
00:22:43,600 --> 00:22:45,760
i go into the html

660
00:22:45,760 --> 00:22:47,360
this is what the report will look like

661
00:22:47,360 --> 00:22:49,440
so it says analysis report and then the

662
00:22:49,440 --> 00:22:52,400
file image that we did our analysis on

663
00:22:52,400 --> 00:22:54,400
now you will have a

664
00:22:54,400 --> 00:22:57,039
html that is produced kind of some

665
00:22:57,039 --> 00:22:59,360
practical information about the analysis

666
00:22:59,360 --> 00:23:01,120
the tool that's run et cetera that's

667
00:23:01,120 --> 00:23:02,480
going to be put up here and then you

668
00:23:02,480 --> 00:23:04,000
have different

669
00:23:04,000 --> 00:23:06,480
sections that has like more consolidated

670
00:23:06,480 --> 00:23:08,720
details about the analysis so one of the

671
00:23:08,720 --> 00:23:10,960
things if i expand each one of these and

672
00:23:10,960 --> 00:23:12,320
hopefully it's going to expand okay good

673
00:23:12,320 --> 00:23:14,559
it did expand properly um so if i expand

674
00:23:14,559 --> 00:23:16,720
each one if we look at the process tree

675
00:23:16,720 --> 00:23:18,400
for instance i always like to know like

676
00:23:18,400 --> 00:23:21,039
what is the call tree like what tool or

677
00:23:21,039 --> 00:23:22,880
what executable called the next

678
00:23:22,880 --> 00:23:24,559
executable so that's why this is here

679
00:23:24,559 --> 00:23:25,919
but that's basic we'll go into

680
00:23:25,919 --> 00:23:28,159
additional details to come

681
00:23:28,159 --> 00:23:30,640
you saw that there was a graphviz

682
00:23:30,640 --> 00:23:32,559
plugin that was provided for you and

683
00:23:32,559 --> 00:23:35,760
that graph is it just automates what the

684
00:23:35,760 --> 00:23:38,000
the call tree looks like for you so in

685
00:23:38,000 --> 00:23:41,440
case you like a basic call tree of the

686
00:23:41,440 --> 00:23:43,440
processes on the system you can click on

687
00:23:43,440 --> 00:23:45,919
this um something else as we orient

688
00:23:45,919 --> 00:23:48,960
ourselves to this interface if i go to

689
00:23:48,960 --> 00:23:51,840
the bottom right side you see each one

690
00:23:51,840 --> 00:23:53,760
of these buttons it has a

691
00:23:53,760 --> 00:23:54,480
a

692
00:23:54,480 --> 00:23:56,400
link to directly pivot to the entire

693
00:23:56,400 --> 00:23:58,080
file so if you want it to be larger you

694
00:23:58,080 --> 00:23:59,840
can just click on that so what i'll do

695
00:23:59,840 --> 00:24:01,279
i'm going to come down to the system

696
00:24:01,279 --> 00:24:03,600
information tree and so in the system

697
00:24:03,600 --> 00:24:05,919
information tree let me enlarge this in

698
00:24:05,919 --> 00:24:08,640
a in a quick second here

699
00:24:08,640 --> 00:24:11,120
right and so in this side i think this

700
00:24:11,120 --> 00:24:13,200
is this is viewable some some sort of

701
00:24:13,200 --> 00:24:15,120
way um so when we look we spoke about

702
00:24:15,120 --> 00:24:17,520
the previous pillars so in process if i

703
00:24:17,520 --> 00:24:19,039
want to see all the information about a

704
00:24:19,039 --> 00:24:21,600
process i can just click on process and

705
00:24:21,600 --> 00:24:23,200
then that process will expand and now i

706
00:24:23,200 --> 00:24:24,880
can see every process on the system you

707
00:24:24,880 --> 00:24:26,400
know you can zoom in if you like

708
00:24:26,400 --> 00:24:27,840
and then

709
00:24:27,840 --> 00:24:29,919
i'm going i know the the malicious

710
00:24:29,919 --> 00:24:31,960
process here it's

711
00:24:31,960 --> 00:24:34,640
spools1176 and you'll see why in a few

712
00:24:34,640 --> 00:24:36,960
moments but if i click on this

713
00:24:36,960 --> 00:24:39,200
process we can now expand additional

714
00:24:39,200 --> 00:24:41,039
information about that process so here

715
00:24:41,039 --> 00:24:42,880
is its parent process you know once

716
00:24:42,880 --> 00:24:45,120
again it's call tree it's sibling

717
00:24:45,120 --> 00:24:48,000
process and so this is what i meant by a

718
00:24:48,000 --> 00:24:50,240
sibling process all of these

719
00:24:50,240 --> 00:24:52,640
these processes were instantiated by the

720
00:24:52,640 --> 00:24:54,880
same parent and so this comes in very

721
00:24:54,880 --> 00:24:56,000
handy whenever you're dealing with

722
00:24:56,000 --> 00:24:58,720
ransomware that has multiple executables

723
00:24:58,720 --> 00:25:00,240
that it's working and running and so

724
00:25:00,240 --> 00:25:02,320
this is one way to quickly come in and

725
00:25:02,320 --> 00:25:04,960
see it uh okay and so if i expand here

726
00:25:04,960 --> 00:25:06,880
like for instance dlls

727
00:25:06,880 --> 00:25:09,120
when i especially as a doing reverse

728
00:25:09,120 --> 00:25:11,120
engineering on a sample

729
00:25:11,120 --> 00:25:12,799
i like to say like what are the imports

730
00:25:12,799 --> 00:25:14,320
what are the import functions what's

731
00:25:14,320 --> 00:25:16,480
coming in to this sample because this

732
00:25:16,480 --> 00:25:18,080
lets me know some of its additional

733
00:25:18,080 --> 00:25:20,480
features that it might try and execute

734
00:25:20,480 --> 00:25:22,559
once it's once it's running so you can

735
00:25:22,559 --> 00:25:24,640
click and expand each of these to gain

736
00:25:24,640 --> 00:25:26,320
additional information

737
00:25:26,320 --> 00:25:28,159
about the imports here i'm looking at

738
00:25:28,159 --> 00:25:30,799
the dlls at this site as well as import

739
00:25:30,799 --> 00:25:33,520
files so import files this will come in

740
00:25:33,520 --> 00:25:35,520
very handy when we talk about process

741
00:25:35,520 --> 00:25:37,760
injection and so in the import files you

742
00:25:37,760 --> 00:25:39,440
know there are lots of these i can click

743
00:25:39,440 --> 00:25:42,480
on each of the imports that was found

744
00:25:42,480 --> 00:25:44,400
during the analysis of the system then

745
00:25:44,400 --> 00:25:45,520
you're going to see additional details

746
00:25:45,520 --> 00:25:47,039
like what is module information it's

747
00:25:47,039 --> 00:25:49,360
file attributes and that was dumped

748
00:25:49,360 --> 00:25:51,200
other processes that could have that

749
00:25:51,200 --> 00:25:54,640
could be using the exact same dll and so

750
00:25:54,640 --> 00:25:56,480
whenever we go into again hooking or

751
00:25:56,480 --> 00:25:58,880
inject injecting if the same dll has

752
00:25:58,880 --> 00:26:00,960
been compromised you might also be able

753
00:26:00,960 --> 00:26:03,440
to find other processes that that dll is

754
00:26:03,440 --> 00:26:04,240
running

755
00:26:04,240 --> 00:26:06,159
is running from

756
00:26:06,159 --> 00:26:08,799
okay so in essence on your side you know

757
00:26:08,799 --> 00:26:10,080
there's quite a few things that we can

758
00:26:10,080 --> 00:26:11,760
click click through you know i'm just

759
00:26:11,760 --> 00:26:13,360
showing you real quick what the basic

760
00:26:13,360 --> 00:26:14,960
interface looks like

761
00:26:14,960 --> 00:26:18,159
towards the bottom side here actually i

762
00:26:18,159 --> 00:26:19,279
went there

763
00:26:19,279 --> 00:26:20,720
yeah so now we're back into the main

764
00:26:20,720 --> 00:26:23,360
output so towards the bottom and we also

765
00:26:23,360 --> 00:26:25,360
have tables so at the top side these are

766
00:26:25,360 --> 00:26:28,240
graphs and so down here these are tables

767
00:26:28,240 --> 00:26:31,120
so the tables consolidates what you have

768
00:26:31,120 --> 00:26:34,480
into a like an excel format and so you

769
00:26:34,480 --> 00:26:36,799
can take this and ingest it into another

770
00:26:36,799 --> 00:26:39,840
tool or log stash etc so if you have

771
00:26:39,840 --> 00:26:41,440
other things that or ways that you like

772
00:26:41,440 --> 00:26:42,960
to search or

773
00:26:42,960 --> 00:26:44,000
filter

774
00:26:44,000 --> 00:26:45,600
other types of details all the

775
00:26:45,600 --> 00:26:47,039
information from the processes is now

776
00:26:47,039 --> 00:26:50,559
aligned here line by line and i'm not

777
00:26:50,559 --> 00:26:53,120
online i didn't i'm not online on this

778
00:26:53,120 --> 00:26:55,279
machine um but here if you also click on

779
00:26:55,279 --> 00:26:57,679
link for each of the executables this

780
00:26:57,679 --> 00:26:59,919
should drop you into a virus total that

781
00:26:59,919 --> 00:27:01,120
looks at the

782
00:27:01,120 --> 00:27:03,200
the hash of the file and then you can

783
00:27:03,200 --> 00:27:05,200
determine like very quickly that file is

784
00:27:05,200 --> 00:27:07,200
compromised or malicious or not you know

785
00:27:07,200 --> 00:27:09,520
just one easy way to pivot

786
00:27:09,520 --> 00:27:10,880
between each of these systems that's

787
00:27:10,880 --> 00:27:12,799
provided for you and then towards the

788
00:27:12,799 --> 00:27:15,120
bottom

789
00:27:15,520 --> 00:27:17,840
under the execution plugins so these are

790
00:27:17,840 --> 00:27:19,600
each of the plugins that was executed

791
00:27:19,600 --> 00:27:21,679
previously that you know if you do like

792
00:27:21,679 --> 00:27:23,840
to come here and look at it line by line

793
00:27:23,840 --> 00:27:26,159
all that information is provided for you

794
00:27:26,159 --> 00:27:28,480
so this is one of the basic

795
00:27:28,480 --> 00:27:29,919
outputs that's provided for you you just

796
00:27:29,919 --> 00:27:31,200
have to look through this you know and

797
00:27:31,200 --> 00:27:33,120
spend some time to see if this is going

798
00:27:33,120 --> 00:27:34,960
to be useful or relevant

799
00:27:34,960 --> 00:27:37,360
in in your investigation so i'm going

800
00:27:37,360 --> 00:27:38,880
quickly and that's that's intentional

801
00:27:38,880 --> 00:27:40,480
because i want to get to the other demos

802
00:27:40,480 --> 00:27:42,559
real quick um but that's uh just you

803
00:27:42,559 --> 00:27:44,960
know we execute the advanced analysis

804
00:27:44,960 --> 00:27:46,840
that output is going to be provided for

805
00:27:46,840 --> 00:27:49,360
you okay so let's talk about the system

806
00:27:49,360 --> 00:27:51,600
manifest

807
00:27:51,600 --> 00:27:53,760
so whenever we do this type of you know

808
00:27:53,760 --> 00:27:55,919
investigation analysis to a memory image

809
00:27:55,919 --> 00:27:57,600
as i mentioned before it takes time it

810
00:27:57,600 --> 00:27:59,279
takes a lot of time especially doing

811
00:27:59,279 --> 00:28:01,039
this hand by hand you know every single

812
00:28:01,039 --> 00:28:02,799
plug-in every single type of data

813
00:28:02,799 --> 00:28:04,640
extraction is going to take some time to

814
00:28:04,640 --> 00:28:07,279
execute now the system manifest has been

815
00:28:07,279 --> 00:28:09,360
created in this research in order to

816
00:28:09,360 --> 00:28:12,960
distill a multi-gigabyte image down to

817
00:28:12,960 --> 00:28:16,399
like a a single you know a 10 to 20

818
00:28:16,399 --> 00:28:18,799
megabyte file and so that 10 or 20

819
00:28:18,799 --> 00:28:21,039
megabyte file now i can use that to

820
00:28:21,039 --> 00:28:23,200
replay the entire investigation or all

821
00:28:23,200 --> 00:28:25,039
the analysis that we had before so

822
00:28:25,039 --> 00:28:26,480
instead of always having to go back and

823
00:28:26,480 --> 00:28:29,039
do the reinvestigation and the analysis

824
00:28:29,039 --> 00:28:30,320
you know that we've done before you can

825
00:28:30,320 --> 00:28:32,559
just load a manifest file and so i will

826
00:28:32,559 --> 00:28:33,919
show you real quick what that manifest

827
00:28:33,919 --> 00:28:36,640
file looks like

828
00:28:37,039 --> 00:28:39,039
so i mentioned you know the html file

829
00:28:39,039 --> 00:28:40,559
that's the important one to look at

830
00:28:40,559 --> 00:28:42,320
whenever the analysis is complete as

831
00:28:42,320 --> 00:28:45,760
well as the manifest folder

832
00:28:45,760 --> 00:28:47,919
so in the manifest there are two files

833
00:28:47,919 --> 00:28:49,679
that will be written by default other

834
00:28:49,679 --> 00:28:51,919
files may be written later we'll see

835
00:28:51,919 --> 00:28:53,520
what's most useful to you you know just

836
00:28:53,520 --> 00:28:55,279
let me know if you need information in a

837
00:28:55,279 --> 00:28:57,600
different format but if i go into the

838
00:28:57,600 --> 00:28:58,799
timeline

839
00:28:58,799 --> 00:29:00,880
just real quick so you know yes it's raw

840
00:29:00,880 --> 00:29:03,039
data i'm showing raw lines but it's this

841
00:29:03,039 --> 00:29:04,640
there's a purpose here

842
00:29:04,640 --> 00:29:07,200
if you've also worked with volatility

843
00:29:07,200 --> 00:29:08,640
you're probably

844
00:29:08,640 --> 00:29:10,640
familiar with the super timeline this

845
00:29:10,640 --> 00:29:12,720
concept of super timeline so the super

846
00:29:12,720 --> 00:29:15,039
timeline this takes multiple plugins and

847
00:29:15,039 --> 00:29:17,440
tries to give you a single interface for

848
00:29:17,440 --> 00:29:19,440
the different events that executed on

849
00:29:19,440 --> 00:29:21,600
the machine but what i found even

850
00:29:21,600 --> 00:29:23,200
looking at that super timeline is that

851
00:29:23,200 --> 00:29:26,399
it it actually omits some critical data

852
00:29:26,399 --> 00:29:28,880
about some times on which you know some

853
00:29:28,880 --> 00:29:31,200
action executed on the machine so that's

854
00:29:31,200 --> 00:29:33,760
why i took every single other artifact

855
00:29:33,760 --> 00:29:36,000
that did have a time stamp associated

856
00:29:36,000 --> 00:29:37,440
and then you have a single interface

857
00:29:37,440 --> 00:29:39,520
here that if you were to again you know

858
00:29:39,520 --> 00:29:42,559
ingest this into another type of

859
00:29:42,559 --> 00:29:45,600
viewer like in excel logstash etc now

860
00:29:45,600 --> 00:29:47,440
you can have better filtering and then

861
00:29:47,440 --> 00:29:48,640
you can also

862
00:29:48,640 --> 00:29:51,039
better sort events based on the time

863
00:29:51,039 --> 00:29:53,840
that an occurrence happened and so here

864
00:29:53,840 --> 00:29:55,200
if you know an infection happened at

865
00:29:55,200 --> 00:29:57,679
let's say time x i usually go to that

866
00:29:57,679 --> 00:30:00,720
time x i subtract a little bit to see um

867
00:30:00,720 --> 00:30:03,039
what was the precipice for an an entire

868
00:30:03,039 --> 00:30:04,960
event or an action so i can kind of

869
00:30:04,960 --> 00:30:06,960
figure out you know in a better way you

870
00:30:06,960 --> 00:30:08,640
know you reconstruct the timeline of

871
00:30:08,640 --> 00:30:09,520
when an

872
00:30:09,520 --> 00:30:12,240
investigation or an infection occurred

873
00:30:12,240 --> 00:30:14,240
right so that's you know basic um but

874
00:30:14,240 --> 00:30:15,919
here this is the manifest file so the

875
00:30:15,919 --> 00:30:18,320
manifest file it's not created for you

876
00:30:18,320 --> 00:30:21,440
to like go in and read now i i was nice

877
00:30:21,440 --> 00:30:23,440
i did not encrypt any of the data you

878
00:30:23,440 --> 00:30:25,600
know so you can see what's there but in

879
00:30:25,600 --> 00:30:28,000
general it's actually just meant for

880
00:30:28,000 --> 00:30:30,159
you to instantiate a tool so i don't

881
00:30:30,159 --> 00:30:32,159
think i've loaded uh yeah i haven't

882
00:30:32,159 --> 00:30:33,520
loaded anything on this okay that's good

883
00:30:33,520 --> 00:30:35,360
and so it's for you to like you know

884
00:30:35,360 --> 00:30:37,440
start this up again and then if i want

885
00:30:37,440 --> 00:30:39,039
to reload an entire investigation i can

886
00:30:39,039 --> 00:30:41,360
just go to file import

887
00:30:41,360 --> 00:30:43,919
and you do have two import options one

888
00:30:43,919 --> 00:30:46,159
would be to import an entire analysis

889
00:30:46,159 --> 00:30:47,200
directory

890
00:30:47,200 --> 00:30:50,320
and so what that looks like

891
00:30:50,320 --> 00:30:52,640
is i think here yeah so this is the

892
00:30:52,640 --> 00:30:54,320
entire analysis directory so if you do

893
00:30:54,320 --> 00:30:57,039
want to re-analyze this or you archive

894
00:30:57,039 --> 00:30:58,320
this and you come back later on you want

895
00:30:58,320 --> 00:31:00,559
to see what what the details look like

896
00:31:00,559 --> 00:31:02,000
you can also if you want to do some

897
00:31:02,000 --> 00:31:04,240
searching or data cross-referencing you

898
00:31:04,240 --> 00:31:07,039
can load the entire directory once again

899
00:31:07,039 --> 00:31:09,760
or you can just load the manifest file

900
00:31:09,760 --> 00:31:12,480
and so the manifest file i'll import

901
00:31:12,480 --> 00:31:15,039
manifest

902
00:31:16,880 --> 00:31:19,200
okay um so this uh this is what would

903
00:31:19,200 --> 00:31:24,399
allow us i think i can no let me go back

904
00:31:26,240 --> 00:31:28,559
manifest yeah um so this would it allow

905
00:31:28,559 --> 00:31:30,559
us to do the the entire investigation is

906
00:31:30,559 --> 00:31:32,240
looking through all the details once

907
00:31:32,240 --> 00:31:34,480
again um that it had before and then

908
00:31:34,480 --> 00:31:38,960
when it is done it it says

909
00:31:40,640 --> 00:31:42,480
that one looks kind of small but i think

910
00:31:42,480 --> 00:31:43,840
this has the details that we need and if

911
00:31:43,840 --> 00:31:45,200
not we will

912
00:31:45,200 --> 00:31:47,279
we'll figure this out okay um so once

913
00:31:47,279 --> 00:31:48,559
you do load the

914
00:31:48,559 --> 00:31:50,720
entire system manifest you the same

915
00:31:50,720 --> 00:31:52,320
information will be provided to you as

916
00:31:52,320 --> 00:31:53,919
if you're running the investigation and

917
00:31:53,919 --> 00:31:55,200
you're waiting like the 30 minutes

918
00:31:55,200 --> 00:31:56,960
initially for it to

919
00:31:56,960 --> 00:31:58,960
grab all the data for you but there are

920
00:31:58,960 --> 00:32:01,039
multiple tabs that would show up in the

921
00:32:01,039 --> 00:32:03,840
anal advanced analysis automation here

922
00:32:03,840 --> 00:32:04,960
that says like these are the things you

923
00:32:04,960 --> 00:32:06,880
really need to look at first um so the

924
00:32:06,880 --> 00:32:09,200
first one yeah your different netstat

925
00:32:09,200 --> 00:32:12,000
activities that that was provided um

926
00:32:12,000 --> 00:32:14,480
here are your user assist entries

927
00:32:14,480 --> 00:32:16,720
and so your user assist entries are

928
00:32:16,720 --> 00:32:18,799
really useful let's say you're doing an

929
00:32:18,799 --> 00:32:20,880
a challenge a capital flight challenge

930
00:32:20,880 --> 00:32:21,919
and you kind of want to see like what

931
00:32:21,919 --> 00:32:23,600
did the user do in one instance or

932
00:32:23,600 --> 00:32:26,159
another well one quick way to see like

933
00:32:26,159 --> 00:32:29,120
what did the person like run on or what

934
00:32:29,120 --> 00:32:30,720
did they execute is looking at the user

935
00:32:30,720 --> 00:32:33,039
assists so here we can copy this i can

936
00:32:33,039 --> 00:32:35,039
put it into an excel um document now i

937
00:32:35,039 --> 00:32:37,360
can sort by time because usually the

938
00:32:37,360 --> 00:32:38,880
thing that's most important to the user

939
00:32:38,880 --> 00:32:40,640
is sorted by time so you might be able

940
00:32:40,640 --> 00:32:44,159
to see that here um at this side

941
00:32:44,159 --> 00:32:46,399
then you have two uh other outputs and

942
00:32:46,399 --> 00:32:48,960
based on the console outputs you know if

943
00:32:48,960 --> 00:32:50,559
something um

944
00:32:50,559 --> 00:32:51,840
like if something executed from the

945
00:32:51,840 --> 00:32:53,440
terminal or the command prompt and it

946
00:32:53,440 --> 00:32:55,360
was captured from memory um this is

947
00:32:55,360 --> 00:32:56,799
showing you that you know you you need

948
00:32:56,799 --> 00:32:58,399
to look at these things because this

949
00:32:58,399 --> 00:33:00,080
could be relevant to your investigation

950
00:33:00,080 --> 00:33:01,919
you could find keys you could find

951
00:33:01,919 --> 00:33:03,679
different descriptors from the malware

952
00:33:03,679 --> 00:33:05,360
on how it executed on the machine to

953
00:33:05,360 --> 00:33:07,279
help you in that investigation now to

954
00:33:07,279 --> 00:33:09,039
the right side

955
00:33:09,039 --> 00:33:11,200
and here i just have it as

956
00:33:11,200 --> 00:33:14,399
malfined entries and so in one of the

957
00:33:14,399 --> 00:33:16,240
executables or

958
00:33:16,240 --> 00:33:18,000
one of the plugins that volatility will

959
00:33:18,000 --> 00:33:20,240
run for you is malfund and so that's

960
00:33:20,240 --> 00:33:22,320
supposed to be quick for finding malware

961
00:33:22,320 --> 00:33:24,880
on the machine and before i did this

962
00:33:24,880 --> 00:33:26,000
type of

963
00:33:26,000 --> 00:33:27,200
kind of research to figure out what's

964
00:33:27,200 --> 00:33:28,720
going on i was like wow you know

965
00:33:28,720 --> 00:33:30,799
malphine is magical it's able to

966
00:33:30,799 --> 00:33:32,480
determine like hey this is malware

967
00:33:32,480 --> 00:33:33,760
that's on the machine and it points it

968
00:33:33,760 --> 00:33:36,080
out to you but really what the malphite

969
00:33:36,080 --> 00:33:38,159
is looking at are your virtual address

970
00:33:38,159 --> 00:33:40,640
descriptors that have page read write

971
00:33:40,640 --> 00:33:43,279
and execute already enabled

972
00:33:43,279 --> 00:33:45,519
now if we look at this um microsoft many

973
00:33:45,519 --> 00:33:47,279
years ago executed dep your data

974
00:33:47,279 --> 00:33:49,440
execution prevention and this was one

975
00:33:49,440 --> 00:33:51,519
way to prevent different types of

976
00:33:51,519 --> 00:33:53,279
injection code injection from occurring

977
00:33:53,279 --> 00:33:54,480
onto the machine

978
00:33:54,480 --> 00:33:56,559
so for instance if i have an executable

979
00:33:56,559 --> 00:33:59,120
or a dll they should have where there

980
00:33:59,120 --> 00:34:00,720
are three you know access rights

981
00:34:00,720 --> 00:34:03,360
possible read write and execute no three

982
00:34:03,360 --> 00:34:04,720
of those should be

983
00:34:04,720 --> 00:34:07,120
activated at the exact same time now if

984
00:34:07,120 --> 00:34:09,199
that is activated at the exact same time

985
00:34:09,199 --> 00:34:11,119
this plug-in provides it to you and says

986
00:34:11,119 --> 00:34:13,199
hey you know here is

987
00:34:13,199 --> 00:34:15,359
rewrite execute that's available because

988
00:34:15,359 --> 00:34:17,040
code could have been injected in this

989
00:34:17,040 --> 00:34:20,000
spot and so what our tool does is it

990
00:34:20,000 --> 00:34:21,679
kind of goes a bit further

991
00:34:21,679 --> 00:34:23,520
here i'm going to just copy this into

992
00:34:23,520 --> 00:34:26,320
excel real quick

993
00:34:27,359 --> 00:34:30,000
so i can do some zooming

994
00:34:30,000 --> 00:34:31,040
okay

995
00:34:31,040 --> 00:34:32,000
and so

996
00:34:32,000 --> 00:34:33,679
i think the output should have said like

997
00:34:33,679 --> 00:34:35,599
there are some

998
00:34:35,599 --> 00:34:37,760
yeah there are some specific malphine

999
00:34:37,760 --> 00:34:39,918
entries you know that were detected that

1000
00:34:39,918 --> 00:34:41,839
require your attention and so if we look

1001
00:34:41,839 --> 00:34:45,119
at these i specifically look at where

1002
00:34:45,119 --> 00:34:48,079
there could be injected code and so i'm

1003
00:34:48,079 --> 00:34:50,399
not going to open the other file but

1004
00:34:50,399 --> 00:34:52,079
like lots of data could be provided and

1005
00:34:52,079 --> 00:34:54,000
malfun and sometimes like i

1006
00:34:54,000 --> 00:34:56,079
this doesn't help me but here we really

1007
00:34:56,079 --> 00:34:59,280
do want to look at in sections in memory

1008
00:34:59,280 --> 00:35:02,000
where we can find an mz header followed

1009
00:35:02,000 --> 00:35:04,320
by other types of code and now if we can

1010
00:35:04,320 --> 00:35:06,160
think of this an mz header followed by

1011
00:35:06,160 --> 00:35:08,079
other types of code this is highly

1012
00:35:08,079 --> 00:35:10,000
suspicious you should not see this

1013
00:35:10,000 --> 00:35:12,640
normally in memory if i know where the

1014
00:35:12,640 --> 00:35:15,119
executable started then yes i can find

1015
00:35:15,119 --> 00:35:17,280
this type of header you know to the

1016
00:35:17,280 --> 00:35:19,839
start of a program but if there are

1017
00:35:19,839 --> 00:35:21,920
other regions or sections inside a

1018
00:35:21,920 --> 00:35:24,320
program that i'm now finding these mz

1019
00:35:24,320 --> 00:35:26,320
headers possible this is highly

1020
00:35:26,320 --> 00:35:28,079
indicative that code injection has

1021
00:35:28,079 --> 00:35:29,520
occurred and that's exactly what

1022
00:35:29,520 --> 00:35:30,560
happened here

1023
00:35:30,560 --> 00:35:33,280
so if i i'm quickly

1024
00:35:33,280 --> 00:35:36,000
talk about what what what's occurring

1025
00:35:36,000 --> 00:35:38,079
we see that the tool said all right we

1026
00:35:38,079 --> 00:35:39,920
really need to look at this process id

1027
00:35:39,920 --> 00:35:41,920
and on this side the process id the

1028
00:35:41,920 --> 00:35:44,920
process name is fulls

1029
00:35:44,920 --> 00:35:46,240
sv.executable you know the

1030
00:35:46,240 --> 00:35:48,320
spoolservice.exe

1031
00:35:48,320 --> 00:35:49,520
so on a

1032
00:35:49,520 --> 00:35:52,079
blue on a like unpatched windows 7

1033
00:35:52,079 --> 00:35:54,240
machine you know it's like the the next

1034
00:35:54,240 --> 00:35:56,079
greatest thing from the net api attack

1035
00:35:56,079 --> 00:35:58,560
from windows xp is blue eternal

1036
00:35:58,560 --> 00:36:00,720
eternal blue so that eternal blue is a

1037
00:36:00,720 --> 00:36:03,440
lovely exploit you know that runs on a

1038
00:36:03,440 --> 00:36:05,520
windows 7 if it's unpatched this is a

1039
00:36:05,520 --> 00:36:06,960
gift that keeps on giving that i can

1040
00:36:06,960 --> 00:36:09,359
gain access to that machine but the way

1041
00:36:09,359 --> 00:36:12,240
it works is it it compromises a

1042
00:36:12,240 --> 00:36:14,400
vulnerable service and then it writes

1043
00:36:14,400 --> 00:36:15,920
the if you're using like meterpreter

1044
00:36:15,920 --> 00:36:17,680
here it's going to write the different

1045
00:36:17,680 --> 00:36:19,680
stagers into memory and then that's

1046
00:36:19,680 --> 00:36:22,800
what's being executed for you so here

1047
00:36:22,800 --> 00:36:24,240
when i say that this is a vulnerable

1048
00:36:24,240 --> 00:36:26,000
process this is the id that that was

1049
00:36:26,000 --> 00:36:28,640
vulnerable i executed the eternal blue

1050
00:36:28,640 --> 00:36:32,078
and then on the right side

1051
00:36:33,839 --> 00:36:35,920
on the right side here where it says mz

1052
00:36:35,920 --> 00:36:38,720
present or trampoline and so the culprit

1053
00:36:38,720 --> 00:36:39,680
line

1054
00:36:39,680 --> 00:36:41,440
is it you know it's just kind of

1055
00:36:41,440 --> 00:36:43,119
pointing it out to us that hey there's a

1056
00:36:43,119 --> 00:36:44,800
file header here and that should not be

1057
00:36:44,800 --> 00:36:46,400
so this is something really that we need

1058
00:36:46,400 --> 00:36:48,400
to focus on you can now already take

1059
00:36:48,400 --> 00:36:50,000
this because the file will be

1060
00:36:50,000 --> 00:36:51,599
automatically dumped to your machine you

1061
00:36:51,599 --> 00:36:53,280
can upload this onto virustotal and then

1062
00:36:53,280 --> 00:36:54,880
usually you'll be able to see that yep

1063
00:36:54,880 --> 00:36:56,960
that's where an interpreter lies inside

1064
00:36:56,960 --> 00:36:58,320
the machine so this is something that's

1065
00:36:58,320 --> 00:37:00,560
useful um to help us look at

1066
00:37:00,560 --> 00:37:02,880
another thing that that should be

1067
00:37:02,880 --> 00:37:05,119
looked at you know focused on is is a

1068
00:37:05,119 --> 00:37:07,040
jump routine and so you're like jump

1069
00:37:07,040 --> 00:37:08,480
routine i'm well

1070
00:37:08,480 --> 00:37:10,480
the way that this works and actually why

1071
00:37:10,480 --> 00:37:13,440
i key in on this is that if i have a

1072
00:37:13,440 --> 00:37:16,000
hook this is usually for hooking that if

1073
00:37:16,000 --> 00:37:18,000
i'm trying to hook another dll that's

1074
00:37:18,000 --> 00:37:20,160
running in memory and so if i'm able to

1075
00:37:20,160 --> 00:37:22,240
overwrite some of the initial bytes i

1076
00:37:22,240 --> 00:37:24,079
can cause your machine to jump somewhere

1077
00:37:24,079 --> 00:37:25,200
else where i've already written

1078
00:37:25,200 --> 00:37:26,880
malicious code and then start to execute

1079
00:37:26,880 --> 00:37:29,119
from that standpoint and so that's why

1080
00:37:29,119 --> 00:37:30,720
the tool looks through those outputs to

1081
00:37:30,720 --> 00:37:33,920
say like hey there's a jump present and

1082
00:37:33,920 --> 00:37:36,240
as i said it's not normal that if i go

1083
00:37:36,240 --> 00:37:37,680
into an executable

1084
00:37:37,680 --> 00:37:40,160
like a library it's jumping me somewhere

1085
00:37:40,160 --> 00:37:42,000
else that's not normal and so that's why

1086
00:37:42,000 --> 00:37:43,760
we're trying to say hey this this really

1087
00:37:43,760 --> 00:37:46,079
does require your attention but that's

1088
00:37:46,079 --> 00:37:48,480
some of the initial

1089
00:37:48,480 --> 00:37:49,839
output that's going to be provided to

1090
00:37:49,839 --> 00:37:51,760
you once you launch the automated tool

1091
00:37:51,760 --> 00:37:53,839
okay um let's get further let's get

1092
00:37:53,839 --> 00:37:55,920
further along into into the slides

1093
00:37:55,920 --> 00:37:57,520
because i have another one to talk about

1094
00:37:57,520 --> 00:37:59,359
um but that's also the benefit of just

1095
00:37:59,359 --> 00:38:01,280
doing the manifest that again i can

1096
00:38:01,280 --> 00:38:03,920
always replay this or ingest an entire

1097
00:38:03,920 --> 00:38:06,240
multi-gigabyte image you know distill it

1098
00:38:06,240 --> 00:38:07,839
down to a single

1099
00:38:07,839 --> 00:38:09,839
megabyte file to

1100
00:38:09,839 --> 00:38:12,160
describe virtually everything about that

1101
00:38:12,160 --> 00:38:15,040
entire memory image now just real quick

1102
00:38:15,040 --> 00:38:16,240
i want to

1103
00:38:16,240 --> 00:38:17,440
let's talk about virtual address

1104
00:38:17,440 --> 00:38:19,119
descriptors once i'm only going to talk

1105
00:38:19,119 --> 00:38:20,480
about the single line but there are

1106
00:38:20,480 --> 00:38:21,920
actually multiple details that i put

1107
00:38:21,920 --> 00:38:23,680
into the slide in case you would like to

1108
00:38:23,680 --> 00:38:25,839
learn learn more so a virtual address

1109
00:38:25,839 --> 00:38:27,760
descriptor is that so your virtual

1110
00:38:27,760 --> 00:38:29,119
address descriptor this is a data

1111
00:38:29,119 --> 00:38:31,520
structure on your inside your memory

1112
00:38:31,520 --> 00:38:34,240
that every process uses to track

1113
00:38:34,240 --> 00:38:36,720
information about other processes or if

1114
00:38:36,720 --> 00:38:39,200
a process needs to have handles or it's

1115
00:38:39,200 --> 00:38:42,480
launched other files it has other

1116
00:38:42,480 --> 00:38:44,720
libraries that are loaded into it you'll

1117
00:38:44,720 --> 00:38:46,960
find specific entries in the virtual

1118
00:38:46,960 --> 00:38:48,880
address descriptor

1119
00:38:48,880 --> 00:38:50,320
now you know why do we care about the

1120
00:38:50,320 --> 00:38:52,240
virtual address descriptor well because

1121
00:38:52,240 --> 00:38:54,000
this leads us into better understanding

1122
00:38:54,000 --> 00:38:55,440
code injection

1123
00:38:55,440 --> 00:38:57,520
so code injection as i spoke about you

1124
00:38:57,520 --> 00:38:59,359
can think of it as i have a vulnerable

1125
00:38:59,359 --> 00:39:01,200
process i've now

1126
00:39:01,200 --> 00:39:02,560
compromised that process and i've

1127
00:39:02,560 --> 00:39:05,119
overwritten myself into that processes

1128
00:39:05,119 --> 00:39:07,040
space and then i caused that process to

1129
00:39:07,040 --> 00:39:08,800
execute my exploit that i've written

1130
00:39:08,800 --> 00:39:11,680
into memory uh previously

1131
00:39:11,680 --> 00:39:14,640
so and there are four main types of code

1132
00:39:14,640 --> 00:39:17,119
injection here this is what we will

1133
00:39:17,119 --> 00:39:18,240
really care about because this is what

1134
00:39:18,240 --> 00:39:20,240
meterpreter does if you're i'm running

1135
00:39:20,240 --> 00:39:22,560
metasploit so if you generally gain

1136
00:39:22,560 --> 00:39:24,480
access to a system metasploit and now

1137
00:39:24,480 --> 00:39:26,560
you say hey the file i want to run is my

1138
00:39:26,560 --> 00:39:28,880
interpreter that's a reflective

1139
00:39:28,880 --> 00:39:30,720
dll that is loaded onto the machine

1140
00:39:30,720 --> 00:39:32,800
that's injected into the machine not

1141
00:39:32,800 --> 00:39:34,480
only is it injected but it's injected

1142
00:39:34,480 --> 00:39:36,640
only into memory so the meterpreter like

1143
00:39:36,640 --> 00:39:38,320
never touches disk so i don't i don't

1144
00:39:38,320 --> 00:39:41,599
have something i can analyze just yet so

1145
00:39:41,599 --> 00:39:44,000
if we know like what's to look at onto

1146
00:39:44,000 --> 00:39:45,680
the machine before and after an

1147
00:39:45,680 --> 00:39:47,920
infection we can now better identify

1148
00:39:47,920 --> 00:39:50,640
these types of reflective dlls and also

1149
00:39:50,640 --> 00:39:53,280
increase the security of our machines

1150
00:39:53,280 --> 00:39:57,359
and so this leads us into the concept of

1151
00:39:57,359 --> 00:39:58,000
i

1152
00:39:58,000 --> 00:39:59,119
i'll just think about this this morning

1153
00:39:59,119 --> 00:40:01,040
like um i can say it's a process

1154
00:40:01,040 --> 00:40:03,200
characterization or module

1155
00:40:03,200 --> 00:40:04,800
characterization across your entire

1156
00:40:04,800 --> 00:40:07,599
enterprise and this is even a big data

1157
00:40:07,599 --> 00:40:09,599
problem that we have now introduced that

1158
00:40:09,599 --> 00:40:10,880
can be solved

1159
00:40:10,880 --> 00:40:13,119
and so think of it this way on an

1160
00:40:13,119 --> 00:40:15,520
enterprise machine we have hundreds you

1161
00:40:15,520 --> 00:40:16,400
know

1162
00:40:16,400 --> 00:40:18,960
many hundreds of users on a single

1163
00:40:18,960 --> 00:40:20,240
network let's say it's a large network

1164
00:40:20,240 --> 00:40:22,560
like a university or so and each of the

1165
00:40:22,560 --> 00:40:23,760
machines that are communicating

1166
00:40:23,760 --> 00:40:25,119
especially if it's like machines that

1167
00:40:25,119 --> 00:40:28,560
belong to the university there are a

1168
00:40:28,560 --> 00:40:29,920
finite

1169
00:40:29,920 --> 00:40:31,760
set of actions that you know each of

1170
00:40:31,760 --> 00:40:34,400
these processes or dlls are going to do

1171
00:40:34,400 --> 00:40:36,880
in order to load itself and to run

1172
00:40:36,880 --> 00:40:38,960
and so if we understand what's to dump

1173
00:40:38,960 --> 00:40:41,839
and analyze we can now characterize how

1174
00:40:41,839 --> 00:40:43,520
each process and module should run on

1175
00:40:43,520 --> 00:40:45,040
the computer machine

1176
00:40:45,040 --> 00:40:47,280
if we can do that this leads us better

1177
00:40:47,280 --> 00:40:49,839
into baselining to detect anomalies when

1178
00:40:49,839 --> 00:40:51,440
anomalies occur

1179
00:40:51,440 --> 00:40:52,480
for instance

1180
00:40:52,480 --> 00:40:54,880
the spool service you know that we'll go

1181
00:40:54,880 --> 00:40:57,920
over again and a a another demo here

1182
00:40:57,920 --> 00:40:59,599
hopefully that's going to work but the

1183
00:40:59,599 --> 00:41:00,960
spool service that we're using that's

1184
00:41:00,960 --> 00:41:02,880
you know been compromised there are

1185
00:41:02,880 --> 00:41:05,839
additional dlls that are required or

1186
00:41:05,839 --> 00:41:08,640
that are loaded and configured by

1187
00:41:08,640 --> 00:41:11,520
metasploit in order to you know patch or

1188
00:41:11,520 --> 00:41:13,680
bring over its additional stages to get

1189
00:41:13,680 --> 00:41:15,040
to compromise the machine to allow you

1190
00:41:15,040 --> 00:41:16,560
to do that command and control to the

1191
00:41:16,560 --> 00:41:19,599
victim machine but those dlls like it's

1192
00:41:19,599 --> 00:41:22,640
not normal to that specific process

1193
00:41:22,640 --> 00:41:25,040
and so that's why i'm saying if you can

1194
00:41:25,040 --> 00:41:27,040
characterize this across an enterprise

1195
00:41:27,040 --> 00:41:28,800
now we can better detect whenever

1196
00:41:28,800 --> 00:41:30,880
anomalies occur and so this is another

1197
00:41:30,880 --> 00:41:33,280
way that without having a signature to

1198
00:41:33,280 --> 00:41:35,520
try and scan or search your your machine

1199
00:41:35,520 --> 00:41:38,079
we can detect based off of anomalies and

1200
00:41:38,079 --> 00:41:39,920
deviations from those anomalies and

1201
00:41:39,920 --> 00:41:42,880
that's why this characterization um

1202
00:41:42,880 --> 00:41:44,000
and that's where this characterization

1203
00:41:44,000 --> 00:41:46,079
comes in and so just real quick this is

1204
00:41:46,079 --> 00:41:48,000
the you know just quick commands on

1205
00:41:48,000 --> 00:41:50,160
setting up our metasploits and our

1206
00:41:50,160 --> 00:41:51,760
interpreter to execute the eternal blue

1207
00:41:51,760 --> 00:41:54,880
exploit on an unpatched a fresh install

1208
00:41:54,880 --> 00:41:57,280
of windows 7 to get us in and as always

1209
00:41:57,280 --> 00:41:59,040
in case you've ever done an attack or

1210
00:41:59,040 --> 00:42:01,280
exploitation even to this day on a

1211
00:42:01,280 --> 00:42:02,960
system that you know is compromised you

1212
00:42:02,960 --> 00:42:05,040
must do the obligatory happy dance it

1213
00:42:05,040 --> 00:42:06,800
has to be done because we gain access to

1214
00:42:06,800 --> 00:42:07,920
a machine now once that's done you

1215
00:42:07,920 --> 00:42:09,680
configure your console yourself and then

1216
00:42:09,680 --> 00:42:11,839
you continue on with the investigation

1217
00:42:11,839 --> 00:42:14,560
okay so here's how we constructed um the

1218
00:42:14,560 --> 00:42:17,920
next types of executions on the machine

1219
00:42:17,920 --> 00:42:19,760
my attacker machine the ip address is

1220
00:42:19,760 --> 00:42:24,240
192 168 56.102 the victim machine

1221
00:42:24,240 --> 00:42:27,680
you know the last octet is dot 200 and

1222
00:42:27,680 --> 00:42:29,599
so there are multiple

1223
00:42:29,599 --> 00:42:31,280
different runs that we execute with the

1224
00:42:31,280 --> 00:42:33,599
hypothesis that hey if we have a before

1225
00:42:33,599 --> 00:42:36,000
and after baseline can you now determine

1226
00:42:36,000 --> 00:42:38,000
that an infection has occurred and if so

1227
00:42:38,000 --> 00:42:40,079
what does that look like in memory you

1228
00:42:40,079 --> 00:42:40,880
know and

1229
00:42:40,880 --> 00:42:42,720
yes you can if we construct the

1230
00:42:42,720 --> 00:42:45,119
appropriate baselines and so here i

1231
00:42:45,119 --> 00:42:47,040
actually ran multiple

1232
00:42:47,040 --> 00:42:49,520
different types of you know just

1233
00:42:49,520 --> 00:42:51,200
quick actions on the machine once we

1234
00:42:51,200 --> 00:42:55,280
gained in but what we will look at is

1235
00:42:55,280 --> 00:42:56,960
let's look at this one a migration yeah

1236
00:42:56,960 --> 00:42:59,040
because paula spoke about migrating like

1237
00:42:59,040 --> 00:43:01,359
you you migrate to another process so

1238
00:43:01,359 --> 00:43:03,359
let's see what a process migration would

1239
00:43:03,359 --> 00:43:04,560
look like and what could have been

1240
00:43:04,560 --> 00:43:06,480
detectable if we had an appropriate

1241
00:43:06,480 --> 00:43:09,119
baseline of the victim machine

1242
00:43:09,119 --> 00:43:11,680
let's see okay i think that's it

1243
00:43:11,680 --> 00:43:13,440
all right so in order to do that and

1244
00:43:13,440 --> 00:43:15,520
that comes with the manifest there is a

1245
00:43:15,520 --> 00:43:18,400
concept called snapshot analysis

1246
00:43:18,400 --> 00:43:20,400
and so in the snapshot analysis this is

1247
00:43:20,400 --> 00:43:23,040
where you ingest two previous manifest

1248
00:43:23,040 --> 00:43:24,400
and then it tells you like what are the

1249
00:43:24,400 --> 00:43:26,560
differences and what should you focus on

1250
00:43:26,560 --> 00:43:28,800
between those two

1251
00:43:28,800 --> 00:43:30,800
investigations so in order to start that

1252
00:43:30,800 --> 00:43:32,960
i just go to

1253
00:43:32,960 --> 00:43:35,119
initiate snapshot analysis and then the

1254
00:43:35,119 --> 00:43:37,280
snapshot analysis it asks you for two

1255
00:43:37,280 --> 00:43:39,520
things one it asks you for like your

1256
00:43:39,520 --> 00:43:42,000
first snapshot so the first run of this

1257
00:43:42,000 --> 00:43:44,960
in in ingest the that manifest file and

1258
00:43:44,960 --> 00:43:49,040
so what i'm going to ingest here

1259
00:43:49,040 --> 00:43:50,880
let's just this one that's how this

1260
00:43:50,880 --> 00:43:53,520
works right um so i'm ingesting a

1261
00:43:53,520 --> 00:43:56,079
snapshot before i did the the process

1262
00:43:56,079 --> 00:43:58,480
migration and then it asks you for the

1263
00:43:58,480 --> 00:44:00,240
second snapshot this is the snapshot

1264
00:44:00,240 --> 00:44:02,319
after an action has occurred and then it

1265
00:44:02,319 --> 00:44:03,839
will analyze that and tell you what the

1266
00:44:03,839 --> 00:44:07,440
results look like now the spoiler alert

1267
00:44:07,440 --> 00:44:10,079
it's raw text and it's it's very

1268
00:44:10,079 --> 00:44:12,400
noisy because it's identifying every

1269
00:44:12,400 --> 00:44:14,560
single descriptor that was different i'm

1270
00:44:14,560 --> 00:44:16,160
going to come back and write a better

1271
00:44:16,160 --> 00:44:18,240
like interface to kind of consolidate

1272
00:44:18,240 --> 00:44:20,160
the data on the data to you but there

1273
00:44:20,160 --> 00:44:21,599
are summaries that i just programmed

1274
00:44:21,599 --> 00:44:23,359
this morning and hopefully we'll see it

1275
00:44:23,359 --> 00:44:25,200
we'll see it work um so i first selected

1276
00:44:25,200 --> 00:44:26,480
the first manifest and this is the

1277
00:44:26,480 --> 00:44:28,240
second manifest um let me do that real

1278
00:44:28,240 --> 00:44:30,640
quick and i'll say open and then what

1279
00:44:30,640 --> 00:44:32,319
it's doing now is analyzing all the

1280
00:44:32,319 --> 00:44:34,400
details and then it provides it to you

1281
00:44:34,400 --> 00:44:35,680
in

1282
00:44:35,680 --> 00:44:38,480
yeah snapshot analysis and so um here

1283
00:44:38,480 --> 00:44:40,319
you know there's a lot of data here and

1284
00:44:40,319 --> 00:44:43,839
so if you click on export data

1285
00:44:43,839 --> 00:44:45,520
so export it just lets me export

1286
00:44:45,520 --> 00:44:46,960
whatever we have

1287
00:44:46,960 --> 00:44:49,119
export.txt

1288
00:44:49,119 --> 00:44:50,160
and then on the windows side it will

1289
00:44:50,160 --> 00:44:52,720
open up some of the results now if we

1290
00:44:52,720 --> 00:44:55,200
look at this real quick and so as i said

1291
00:44:55,200 --> 00:44:56,880
it's um

1292
00:44:56,880 --> 00:44:58,319
there there's some tuning because it's

1293
00:44:58,319 --> 00:45:00,480
there it identifies a lot of data so

1294
00:45:00,480 --> 00:45:02,560
again i want to help distill that down

1295
00:45:02,560 --> 00:45:04,960
to you um but overall if we look at the

1296
00:45:04,960 --> 00:45:07,839
investigation summary and so uh what

1297
00:45:07,839 --> 00:45:09,920
it's able to determine there are um

1298
00:45:09,920 --> 00:45:11,280
added processes there are missing

1299
00:45:11,280 --> 00:45:13,839
processes um i i know i'm out of time

1300
00:45:13,839 --> 00:45:15,760
just two minutes and i'll i'll be done

1301
00:45:15,760 --> 00:45:18,319
um but if we come down to on this side

1302
00:45:18,319 --> 00:45:20,480
if we look at added dlls

1303
00:45:20,480 --> 00:45:22,880
and so this is wonderful that um there

1304
00:45:22,880 --> 00:45:24,640
are different dlls that are added from

1305
00:45:24,640 --> 00:45:26,800
the previous exploit um to now that's

1306
00:45:26,800 --> 00:45:29,200
that's able to be detected so i told you

1307
00:45:29,200 --> 00:45:33,160
that this process 1176 bull sv

1308
00:45:33,160 --> 00:45:35,520
spoolservice.exe this was um what

1309
00:45:35,520 --> 00:45:37,520
meterpreter initially exploited as part

1310
00:45:37,520 --> 00:45:39,680
of that eternal blue and then i'm doing

1311
00:45:39,680 --> 00:45:41,200
the analysis it says that there are

1312
00:45:41,200 --> 00:45:44,079
additional dlls that it found on part of

1313
00:45:44,079 --> 00:45:46,160
this service that we will now see where

1314
00:45:46,160 --> 00:45:49,200
it migrates over to and so it looks like

1315
00:45:49,200 --> 00:45:51,839
explorer 2 was was compromised part of

1316
00:45:51,839 --> 00:45:53,599
this

1317
00:45:53,599 --> 00:45:56,480
migration this process migration over to

1318
00:45:56,480 --> 00:45:58,640
the victim process and so the victim

1319
00:45:58,640 --> 00:46:01,280
process i migrated to was when inits i

1320
00:46:01,280 --> 00:46:04,000
believe that's yeah 372 so here it is

1321
00:46:04,000 --> 00:46:06,720
okay so before um what what what this is

1322
00:46:06,720 --> 00:46:08,720
saying is that like these dlls were

1323
00:46:08,720 --> 00:46:10,800
added it was not found and so we see

1324
00:46:10,800 --> 00:46:13,440
that this process here it takes its dlls

1325
00:46:13,440 --> 00:46:15,839
that are used in the exploit

1326
00:46:15,839 --> 00:46:18,240
and then if we go down here to this wind

1327
00:46:18,240 --> 00:46:20,000
service because this was the process i

1328
00:46:20,000 --> 00:46:23,119
migrated to it's lovely that these are

1329
00:46:23,119 --> 00:46:26,160
the additional dlls that are required as

1330
00:46:26,160 --> 00:46:28,560
part of that payload migration

1331
00:46:28,560 --> 00:46:30,160
so you know when when you think oh i'm

1332
00:46:30,160 --> 00:46:31,599
just gonna do a migrate and it looks you

1333
00:46:31,599 --> 00:46:32,800
think it's just a process that moves

1334
00:46:32,800 --> 00:46:34,640
there are multiple dlls that are

1335
00:46:34,640 --> 00:46:36,480
involved with that compromise but this

1336
00:46:36,480 --> 00:46:37,839
is also where that characterization

1337
00:46:37,839 --> 00:46:39,200
comes from

1338
00:46:39,200 --> 00:46:40,880
so if we can do this across an entire

1339
00:46:40,880 --> 00:46:43,520
enterprise we should know that hey when

1340
00:46:43,520 --> 00:46:46,880
init does not necessarily require like

1341
00:46:46,880 --> 00:46:49,920
this web io or this url mine or you know

1342
00:46:49,920 --> 00:46:52,079
multiple dlls inside of it because

1343
00:46:52,079 --> 00:46:53,839
that's not an action that is never that

1344
00:46:53,839 --> 00:46:55,680
has ever been seen before across an

1345
00:46:55,680 --> 00:46:58,319
enterprise and so in the future as

1346
00:46:58,319 --> 00:47:00,160
malware continues to increase in

1347
00:47:00,160 --> 00:47:02,400
sophistication we we have to divorce

1348
00:47:02,400 --> 00:47:04,400
herself from always expecting to find a

1349
00:47:04,400 --> 00:47:06,240
signature we you will not always be able

1350
00:47:06,240 --> 00:47:08,640
to find a signature i remember as mr

1351
00:47:08,640 --> 00:47:10,640
winn was talking about in 2014 when i

1352
00:47:10,640 --> 00:47:11,920
went to hakon

1353
00:47:11,920 --> 00:47:13,599
i was

1354
00:47:13,599 --> 00:47:15,760
demoing like a separate botnet that i

1355
00:47:15,760 --> 00:47:16,560
wrote

1356
00:47:16,560 --> 00:47:18,480
many many years ago and so that was a

1357
00:47:18,480 --> 00:47:20,319
that was a fun project but this is the

1358
00:47:20,319 --> 00:47:22,559
issue with signatures that botnet that i

1359
00:47:22,559 --> 00:47:24,880
wrote and released open to the world my

1360
00:47:24,880 --> 00:47:27,440
own computer did not determine or detect

1361
00:47:27,440 --> 00:47:29,440
that that executable was malicious until

1362
00:47:29,440 --> 00:47:31,520
about three or four years later

1363
00:47:31,520 --> 00:47:33,200
and so that's why i'm just trying to say

1364
00:47:33,200 --> 00:47:35,119
that signatures is wrong but if we do

1365
00:47:35,119 --> 00:47:37,520
know how to characterize the processes

1366
00:47:37,520 --> 00:47:39,440
and dlls on our machine especially we

1367
00:47:39,440 --> 00:47:41,359
can use an automated tool like this then

1368
00:47:41,359 --> 00:47:43,599
this could automatically identify some

1369
00:47:43,599 --> 00:47:45,359
of the issues you know and just like

1370
00:47:45,359 --> 00:47:46,960
nope this is wrong this requires further

1371
00:47:46,960 --> 00:47:48,480
investigation

1372
00:47:48,480 --> 00:47:50,720
and that was detected we knew that that

1373
00:47:50,720 --> 00:47:52,400
was present here because this was the

1374
00:47:52,400 --> 00:47:55,440
compromise program previously but now

1375
00:47:55,440 --> 00:47:58,720
this uh the interpreter migrated into

1376
00:47:58,720 --> 00:48:01,520
winning it.exe so winning it.exe that

1377
00:48:01,520 --> 00:48:04,319
process is 372. if we look to the right

1378
00:48:04,319 --> 00:48:06,400
it has three additional

1379
00:48:06,400 --> 00:48:08,319
page descriptors that are paid read

1380
00:48:08,319 --> 00:48:11,599
write execute again this should not be

1381
00:48:11,599 --> 00:48:13,680
and so in the future if we know what

1382
00:48:13,680 --> 00:48:15,520
we're looking for this is something that

1383
00:48:15,520 --> 00:48:18,000
should immediately raise those red flags

1384
00:48:18,000 --> 00:48:19,920
you know over to your your investigators

1385
00:48:19,920 --> 00:48:21,680
to say like nope um this is wrong we

1386
00:48:21,680 --> 00:48:23,200
have to investigate further dump the

1387
00:48:23,200 --> 00:48:25,200
memory and then do additional analysis

1388
00:48:25,200 --> 00:48:27,040
because you know there's automated ways

1389
00:48:27,040 --> 00:48:28,960
to know that um you know like a breach

1390
00:48:28,960 --> 00:48:30,640
has occurred and then if i go to the

1391
00:48:30,640 --> 00:48:33,119
right it does show us that yep um there

1392
00:48:33,119 --> 00:48:36,000
are mz so very likely of code execution

1393
00:48:36,000 --> 00:48:38,000
i only show the the initial the addition

1394
00:48:38,000 --> 00:48:39,680
the initial header there are many other

1395
00:48:39,680 --> 00:48:40,880
things that we could show but you know

1396
00:48:40,880 --> 00:48:43,119
i'm trying to condense this i'm down for

1397
00:48:43,119 --> 00:48:45,920
easy consumption okay um so

1398
00:48:45,920 --> 00:48:47,920
that was very very fast honestly that

1399
00:48:47,920 --> 00:48:50,800
was very fast there is a lot um that i

1400
00:48:50,800 --> 00:48:52,880
would love to talk about or or discuss

1401
00:48:52,880 --> 00:48:54,880
but at least this is the start and so

1402
00:48:54,880 --> 00:48:56,960
now as an exercise to the experts you

1403
00:48:56,960 --> 00:48:58,800
know we're on the tool just as we've

1404
00:48:58,800 --> 00:49:01,680
spoken about you download volatility you

1405
00:49:01,680 --> 00:49:03,359
grab a dump of memory and launch the

1406
00:49:03,359 --> 00:49:05,440
tool do an action on that before and

1407
00:49:05,440 --> 00:49:07,359
after and see what you can discover you

1408
00:49:07,359 --> 00:49:08,960
can utilize this tool to help you in

1409
00:49:08,960 --> 00:49:11,359
many additional investigations as well

1410
00:49:11,359 --> 00:49:12,880
as to begin that characterization of

1411
00:49:12,880 --> 00:49:15,119
what are the anomalies across an entire

1412
00:49:15,119 --> 00:49:16,800
enterprise and then you know just stay

1413
00:49:16,800 --> 00:49:19,920
tuned i i do machine learning work now

1414
00:49:19,920 --> 00:49:22,000
and so some of my next tools will

1415
00:49:22,000 --> 00:49:23,839
actually be like how do you do this at

1416
00:49:23,839 --> 00:49:25,440
scale how do you do this across an

1417
00:49:25,440 --> 00:49:26,880
entire enterprise because the first

1418
00:49:26,880 --> 00:49:28,319
thing is you know i need to grab the

1419
00:49:28,319 --> 00:49:29,839
data first which is what we're showing

1420
00:49:29,839 --> 00:49:31,920
in this tool so now one of the

1421
00:49:31,920 --> 00:49:33,200
the last things that hey what do we

1422
00:49:33,200 --> 00:49:35,040
learn here well we learned that with

1423
00:49:35,040 --> 00:49:36,640
that snapshot analysis like this

1424
00:49:36,640 --> 00:49:38,880
introduces big data possibilities that

1425
00:49:38,880 --> 00:49:40,800
you can characterize your processes and

1426
00:49:40,800 --> 00:49:43,119
dlls across that enterprise in order to

1427
00:49:43,119 --> 00:49:45,359
better find what's malicious instead of

1428
00:49:45,359 --> 00:49:47,599
again relying on those signatures or

1429
00:49:47,599 --> 00:49:49,680
fuzzy signatures to try and determine

1430
00:49:49,680 --> 00:49:51,359
that an infection has occurred there

1431
00:49:51,359 --> 00:49:52,720
there's got to be better ways and so

1432
00:49:52,720 --> 00:49:54,640
this is one of those ways to help us in

1433
00:49:54,640 --> 00:49:57,520
the future right so in summary if you

1434
00:49:57,520 --> 00:49:59,839
are looking for other analysis tools so

1435
00:49:59,839 --> 00:50:03,040
i it's a basic website but i do have

1436
00:50:03,040 --> 00:50:05,200
other memory challenges available as

1437
00:50:05,200 --> 00:50:07,200
well as runs so i've done different

1438
00:50:07,200 --> 00:50:08,640
investigations that are available for

1439
00:50:08,640 --> 00:50:10,640
you and then you can directly pivot to

1440
00:50:10,640 --> 00:50:12,559
that challenge or you can see

1441
00:50:12,559 --> 00:50:14,000
some ways that other individuals have

1442
00:50:14,000 --> 00:50:16,000
solved that that's available on my

1443
00:50:16,000 --> 00:50:18,400
website at solomonsania.com

1444
00:50:18,400 --> 00:50:20,640
and then finally other things that if

1445
00:50:20,640 --> 00:50:22,559
you did want to learn more

1446
00:50:22,559 --> 00:50:24,319
you know then i highly suggest looking

1447
00:50:24,319 --> 00:50:25,280
at

1448
00:50:25,280 --> 00:50:27,040
material from jessica hyde she's really

1449
00:50:27,040 --> 00:50:30,079
good in forensics she works for

1450
00:50:30,079 --> 00:50:32,000
magnets and so she has a really good

1451
00:50:32,000 --> 00:50:33,760
talk on how to get started into this if

1452
00:50:33,760 --> 00:50:35,520
you've never done it before and there

1453
00:50:35,520 --> 00:50:36,960
are other challenges here like this one

1454
00:50:36,960 --> 00:50:39,440
from james smith he has a really really

1455
00:50:39,440 --> 00:50:41,119
good write-up of how do you go from the

1456
00:50:41,119 --> 00:50:42,880
beginning of an entire forensics

1457
00:50:42,880 --> 00:50:44,960
investigation towards memory analysis

1458
00:50:44,960 --> 00:50:46,160
and then you know enhancing your skill

1459
00:50:46,160 --> 00:50:47,839
set overall

1460
00:50:47,839 --> 00:50:50,319
uh cyber defenders i like their um their

1461
00:50:50,319 --> 00:50:52,720
work because like every other week or so

1462
00:50:52,720 --> 00:50:53,760
it's like they're always coming up with

1463
00:50:53,760 --> 00:50:55,760
a new challenge and so here are ways to

1464
00:50:55,760 --> 00:50:58,000
get stronger and smarter at this is you

1465
00:50:58,000 --> 00:50:59,599
take a challenge you learn from other

1466
00:50:59,599 --> 00:51:02,400
people you can look at the the solutions

1467
00:51:02,400 --> 00:51:03,680
and then you can see how do you increase

1468
00:51:03,680 --> 00:51:05,839
your skill sets um overall

1469
00:51:05,839 --> 00:51:08,559
in my previous talks i talked about

1470
00:51:08,559 --> 00:51:10,160
a specific challenge

1471
00:51:10,160 --> 00:51:12,720
memlabs so there are six like

1472
00:51:12,720 --> 00:51:14,160
educational

1473
00:51:14,160 --> 00:51:15,760
images that are created and you can

1474
00:51:15,760 --> 00:51:16,720
google

1475
00:51:16,720 --> 00:51:19,040
how to's to solve these and so this is

1476
00:51:19,040 --> 00:51:20,559
also something else that i like to

1477
00:51:20,559 --> 00:51:22,000
reference in case you've never done

1478
00:51:22,000 --> 00:51:24,000
memory analysis before to do those first

1479
00:51:24,000 --> 00:51:25,839
learn it by hand and then this tool

1480
00:51:25,839 --> 00:51:27,920
makes a lot more sense on how it can

1481
00:51:27,920 --> 00:51:30,000
help automate and speed up your your

1482
00:51:30,000 --> 00:51:31,599
process and so there are other links all

1483
00:51:31,599 --> 00:51:33,119
right i don't know if i have time for

1484
00:51:33,119 --> 00:51:34,880
questions but that's all i have if you

1485
00:51:34,880 --> 00:51:37,040
do have any questions please come find

1486
00:51:37,040 --> 00:51:38,559
me because i'd love to talk about this

1487
00:51:38,559 --> 00:51:40,960
tool in further detail um do i have time

1488
00:51:40,960 --> 00:51:43,200
for a question i don't know um kick me

1489
00:51:43,200 --> 00:51:44,800
out if i'm out of time

1490
00:51:44,800 --> 00:51:46,880
okay i can take two questions if there

1491
00:51:46,880 --> 00:51:48,240
are any questions are there any

1492
00:51:48,240 --> 00:51:50,000
questions anything that i can answer on

1493
00:51:50,000 --> 00:51:53,040
what we've covered so far

1494
00:51:55,359 --> 00:51:56,800
i can't see because there's a light i'm

1495
00:51:56,800 --> 00:51:59,359
not seeing any questions so oh

1496
00:51:59,359 --> 00:52:03,520
i'm sorry are there any do i miss anyone

1497
00:52:03,599 --> 00:52:05,520
right well thank you so much for your

1498
00:52:05,520 --> 00:52:06,720
time if you do have questions please

1499
00:52:06,720 --> 00:52:08,000
always just come find me thanks again

1500
00:52:08,000 --> 00:52:12,040
hope you have a great day thank you

