1
00:00:02,480 --> 00:00:05,260
uh

2
00:00:05,260 --> 00:00:08,500
[Music]

3
00:00:10,700 --> 00:00:21,039
[Music]

4
00:00:21,039 --> 00:00:24,039
me

5
00:00:24,410 --> 00:00:34,000
[Music]

6
00:00:34,000 --> 00:00:36,960
hello everybody um

7
00:00:36,960 --> 00:00:37,680
so

8
00:00:37,680 --> 00:00:39,760
here is the title of my talk the final

9
00:00:39,760 --> 00:00:42,320
game of vulnerability research

10
00:00:42,320 --> 00:00:45,840
please next slides

11
00:00:47,360 --> 00:00:48,399
oh i can

12
00:00:48,399 --> 00:00:50,800
okay i can move it for you

13
00:00:50,800 --> 00:00:53,038
okay

14
00:00:55,039 --> 00:00:57,600
so short introduction uh who is this guy

15
00:00:57,600 --> 00:00:58,879
in front of you

16
00:00:58,879 --> 00:01:01,920
i'm david caligaris that is my twitter

17
00:01:01,920 --> 00:01:03,199
lender

18
00:01:03,199 --> 00:01:05,920
and i work in italy for

19
00:01:05,920 --> 00:01:08,479
very long time

20
00:01:08,479 --> 00:01:10,080
i was in a company called the maze

21
00:01:10,080 --> 00:01:12,479
network that at the moment

22
00:01:12,479 --> 00:01:13,280
is

23
00:01:13,280 --> 00:01:15,680
acquired by other companies it's not

24
00:01:15,680 --> 00:01:16,880
anymore there

25
00:01:16,880 --> 00:01:18,240
and i

26
00:01:18,240 --> 00:01:20,960
was a developer of a security scanner

27
00:01:20,960 --> 00:01:23,680
called epilegion there are in this room

28
00:01:23,680 --> 00:01:26,240
other people that share with me it is

29
00:01:26,240 --> 00:01:27,759
this task

30
00:01:27,759 --> 00:01:30,000
and then i become the cto

31
00:01:30,000 --> 00:01:33,759
after that i joined in 2017 huawei in

32
00:01:33,759 --> 00:01:34,960
germany

33
00:01:34,960 --> 00:01:38,479
and i have two teams one that is working

34
00:01:38,479 --> 00:01:41,360
on fuzzing and we will talk a lot about

35
00:01:41,360 --> 00:01:43,119
that today

36
00:01:43,119 --> 00:01:46,079
and user space and kernel space area

37
00:01:46,079 --> 00:01:48,640
and then i'm running the huawei back

38
00:01:48,640 --> 00:01:51,360
bounty program on mobile phones

39
00:01:51,360 --> 00:01:54,240
so i am the guy that organized this

40
00:01:54,240 --> 00:01:56,079
secret conference in munich few years

41
00:01:56,079 --> 00:01:57,360
ago

42
00:01:57,360 --> 00:01:59,280
where we started and announced the bug

43
00:01:59,280 --> 00:02:01,040
bounty program

44
00:02:01,040 --> 00:02:03,680
if you've seen me around you can ask me

45
00:02:03,680 --> 00:02:05,920
informations about back bounty fuzzing

46
00:02:05,920 --> 00:02:08,080
whatever i'm super happy to talk with

47
00:02:08,080 --> 00:02:10,560
people working in security

48
00:02:10,560 --> 00:02:12,879
up

49
00:02:13,440 --> 00:02:16,800
one disclaimer this is my personal view

50
00:02:16,800 --> 00:02:18,560
and don't represent

51
00:02:18,560 --> 00:02:19,360
the

52
00:02:19,360 --> 00:02:23,080
view of my employee

53
00:02:23,760 --> 00:02:26,319
so what we will talk about today

54
00:02:26,319 --> 00:02:28,640
so the title of the company the final

55
00:02:28,640 --> 00:02:29,599
game

56
00:02:29,599 --> 00:02:33,440
the final game is about game theory

57
00:02:33,440 --> 00:02:35,040
and then we will speak about

58
00:02:35,040 --> 00:02:37,360
vulnerability research and we will touch

59
00:02:37,360 --> 00:02:40,000
topics like variant analysis fuzzing

60
00:02:40,000 --> 00:02:41,840
manual code analysis or manual code

61
00:02:41,840 --> 00:02:44,080
review

62
00:02:44,080 --> 00:02:46,720
game theory

63
00:02:48,560 --> 00:02:51,840
so game theory is the science of

64
00:02:51,840 --> 00:02:54,720
decision making i think you know russell

65
00:02:54,720 --> 00:02:57,519
crowe that have nothing to do with game

66
00:02:57,519 --> 00:02:58,800
theory

67
00:02:58,800 --> 00:03:01,599
but is the actor that interprets john

68
00:03:01,599 --> 00:03:04,159
nash i think that the john nash is the

69
00:03:04,159 --> 00:03:07,680
most recognizable person for game theory

70
00:03:07,680 --> 00:03:09,680
is uh something that

71
00:03:09,680 --> 00:03:11,280
pop-ups from

72
00:03:11,280 --> 00:03:12,879
john von neumann

73
00:03:12,879 --> 00:03:14,800
he was playing poker and wanna find some

74
00:03:14,800 --> 00:03:17,519
mathematical model behind it and game

75
00:03:17,519 --> 00:03:19,519
theory is the science of making

76
00:03:19,519 --> 00:03:20,959
decisions

77
00:03:20,959 --> 00:03:21,840
and then

78
00:03:21,840 --> 00:03:24,080
a game is defined

79
00:03:24,080 --> 00:03:24,959
as

80
00:03:24,959 --> 00:03:28,480
the interactions among multiple actors

81
00:03:28,480 --> 00:03:30,640
and the games of these actors are

82
00:03:30,640 --> 00:03:33,200
influence each other but for a better

83
00:03:33,200 --> 00:03:36,319
definition we have there

84
00:03:36,319 --> 00:03:38,879
and then in game theory we have two

85
00:03:38,879 --> 00:03:42,000
thinkers not more most of mathematics

86
00:03:42,000 --> 00:03:43,360
but

87
00:03:43,360 --> 00:03:45,440
influential thinkers we can say

88
00:03:45,440 --> 00:03:47,760
that they introduced the topic of finite

89
00:03:47,760 --> 00:03:50,319
and infinite games we have james cars in

90
00:03:50,319 --> 00:03:54,400
86 and then we have simon sinek in 2019

91
00:03:54,400 --> 00:03:57,200
so let's see what is a finite game and

92
00:03:57,200 --> 00:03:59,040
an infinite game

93
00:03:59,040 --> 00:04:01,040
so finite games are

94
00:04:01,040 --> 00:04:02,720
the most

95
00:04:02,720 --> 00:04:05,040
games that we know and we are used at it

96
00:04:05,040 --> 00:04:07,920
are played by no players they have fixer

97
00:04:07,920 --> 00:04:09,360
rules

98
00:04:09,360 --> 00:04:12,480
in finite games we have objects and when

99
00:04:12,480 --> 00:04:14,560
they reach these objects the games is

100
00:04:14,560 --> 00:04:16,560
ended we are all agree on that there is

101
00:04:16,560 --> 00:04:18,798
a beginning a middle and an end

102
00:04:18,798 --> 00:04:21,040
and there is a clear winner

103
00:04:21,040 --> 00:04:22,639
and a loser

104
00:04:22,639 --> 00:04:24,479
in finite games

105
00:04:24,479 --> 00:04:25,840
there are

106
00:04:25,840 --> 00:04:27,759
all the time new players coming and

107
00:04:27,759 --> 00:04:30,479
going in these games and are played by

108
00:04:30,479 --> 00:04:34,320
no no players there has no exact

109
00:04:34,320 --> 00:04:36,080
there is not a precise agreement on

110
00:04:36,080 --> 00:04:37,199
rules

111
00:04:37,199 --> 00:04:39,040
players can change how they play the

112
00:04:39,040 --> 00:04:42,639
game and find a time horizon and there

113
00:04:42,639 --> 00:04:45,199
is no clear thing what means winning or

114
00:04:45,199 --> 00:04:47,440
losing an infinite game

115
00:04:47,440 --> 00:04:50,000
the goal of infinite game is to stay in

116
00:04:50,000 --> 00:04:52,240
the game as long as possible so for

117
00:04:52,240 --> 00:04:54,639
example

118
00:04:54,639 --> 00:04:56,639
exam for example

119
00:04:56,639 --> 00:04:59,440
business is an example of infinite game

120
00:04:59,440 --> 00:05:01,039
so business

121
00:05:01,039 --> 00:05:04,240
before born before us and we land

122
00:05:04,240 --> 00:05:07,280
as we continue after our life

123
00:05:07,280 --> 00:05:10,160
but i see a lot of analogies with

124
00:05:10,160 --> 00:05:12,160
infinite games with vulnerability

125
00:05:12,160 --> 00:05:14,240
research

126
00:05:14,240 --> 00:05:16,479
so what is vulnerability research

127
00:05:16,479 --> 00:05:19,280
vulnerability research is a process

128
00:05:19,280 --> 00:05:21,039
that is

129
00:05:21,039 --> 00:05:23,120
allowing us to find

130
00:05:23,120 --> 00:05:25,759
flows in software or also hardware or we

131
00:05:25,759 --> 00:05:27,520
will see in the afternoon

132
00:05:27,520 --> 00:05:30,320
that could lead to security issues and

133
00:05:30,320 --> 00:05:33,199
the process is done by static code

134
00:05:33,199 --> 00:05:36,000
analysis dynamic testings and so on

135
00:05:36,000 --> 00:05:38,960
who is doing uh

136
00:05:38,960 --> 00:05:41,520
vulnerability research internal of your

137
00:05:41,520 --> 00:05:43,280
organization if you have a product you

138
00:05:43,280 --> 00:05:46,080
have people that are doing dust sas the

139
00:05:46,080 --> 00:05:48,720
dynamic security testing static security

140
00:05:48,720 --> 00:05:51,280
testing penetration test teams and you

141
00:05:51,280 --> 00:05:52,960
have also people that are doing

142
00:05:52,960 --> 00:05:54,479
vulnerability research out of the

143
00:05:54,479 --> 00:05:57,600
company back bounty hunters by doctors

144
00:05:57,600 --> 00:06:00,880
academia and so on

145
00:06:00,880 --> 00:06:04,000
why to do vulnerability research

146
00:06:04,000 --> 00:06:06,000
finding and of course patching

147
00:06:06,000 --> 00:06:08,639
vulnerabilities is an effective way to

148
00:06:08,639 --> 00:06:10,800
make software more secure

149
00:06:10,800 --> 00:06:13,759
and making internet a safer place for us

150
00:06:13,759 --> 00:06:15,680
for all for all of us

151
00:06:15,680 --> 00:06:18,400
and then can be quite remunerative so

152
00:06:18,400 --> 00:06:19,520
here on

153
00:06:19,520 --> 00:06:22,160
the screenshots here we see a company

154
00:06:22,160 --> 00:06:24,400
that is offering

155
00:06:24,400 --> 00:06:26,400
100 000

156
00:06:26,400 --> 00:06:29,759
usd dollars for a vulnerability in a

157
00:06:29,759 --> 00:06:31,919
chat software pigeon

158
00:06:31,919 --> 00:06:32,840
and then

159
00:06:32,840 --> 00:06:37,599
below you see a very

160
00:06:38,240 --> 00:06:39,520
i we can say

161
00:06:39,520 --> 00:06:42,240
curious reply from the maintainer of the

162
00:06:42,240 --> 00:06:44,080
software and the maintainer is saying

163
00:06:44,080 --> 00:06:47,120
that he is struggling to have 25k

164
00:06:47,120 --> 00:06:49,120
to continue the development of the

165
00:06:49,120 --> 00:06:51,360
software for one year

166
00:06:51,360 --> 00:06:54,560
and then here we see that

167
00:06:54,560 --> 00:06:56,639
a company that is acquiring zero days is

168
00:06:56,639 --> 00:06:57,599
offering

169
00:06:57,599 --> 00:07:00,720
four times the money for

170
00:07:00,720 --> 00:07:03,840
getting a vulnerability in it so

171
00:07:03,840 --> 00:07:08,000
it's a little bit disequilibrium in that

172
00:07:08,400 --> 00:07:10,960
so let's put together the idea of

173
00:07:10,960 --> 00:07:13,680
infinite game with

174
00:07:13,680 --> 00:07:16,960
vulnerability research so we have all

175
00:07:16,960 --> 00:07:19,120
the time new vulnerability researchers

176
00:07:19,120 --> 00:07:21,360
that join the game and we have also

177
00:07:21,360 --> 00:07:24,880
players playing in the defense

178
00:07:24,880 --> 00:07:26,960
vulnerability research includes only

179
00:07:26,960 --> 00:07:29,360
software only hardware we have

180
00:07:29,360 --> 00:07:31,360
spectra meltdown that they open a

181
00:07:31,360 --> 00:07:33,360
totally new area we have

182
00:07:33,360 --> 00:07:35,120
the introduction of

183
00:07:35,120 --> 00:07:37,759
memory safe language that killed a lot

184
00:07:37,759 --> 00:07:39,440
of vulnerabilities

185
00:07:39,440 --> 00:07:42,160
and this changed how players was playing

186
00:07:42,160 --> 00:07:44,160
the game we have introduction of gray

187
00:07:44,160 --> 00:07:46,400
box fuzzing

188
00:07:46,400 --> 00:07:49,520
and then do we know how

189
00:07:49,520 --> 00:07:51,440
vulnerability research will end we have

190
00:07:51,440 --> 00:07:53,599
a clear picture in mind and of course

191
00:07:53,599 --> 00:07:55,599
can we define who is a winner in cyber

192
00:07:55,599 --> 00:07:58,000
security who was the winner of last year

193
00:07:58,000 --> 00:08:01,199
the winner of pontoon the winner of

194
00:08:01,199 --> 00:08:02,720
tianfoucapp

195
00:08:02,720 --> 00:08:04,879
who is the winner we who is defining who

196
00:08:04,879 --> 00:08:08,000
is a winner or a loser

197
00:08:08,879 --> 00:08:11,919
so let's see a little bit a timeline how

198
00:08:11,919 --> 00:08:14,720
this game was player when vulnerability

199
00:08:14,720 --> 00:08:17,840
research when cyber security born

200
00:08:17,840 --> 00:08:20,080
maybe with the first paper or with

201
00:08:20,080 --> 00:08:23,520
buffer overflows in the 76 i think or

202
00:08:23,520 --> 00:08:25,759
will be the morris worm the worm that

203
00:08:25,759 --> 00:08:28,800
was moving from with exploiting a

204
00:08:28,800 --> 00:08:31,680
stuck buffer overflow on finger on a

205
00:08:31,680 --> 00:08:33,839
solaris machine

206
00:08:33,839 --> 00:08:35,839
or is uh with

207
00:08:35,839 --> 00:08:38,159
the paper smashing the stock for find

208
00:08:38,159 --> 00:08:40,240
and profit in 98

209
00:08:40,240 --> 00:08:43,200
and then here we see on the below area

210
00:08:43,200 --> 00:08:44,560
the things that are happening in

211
00:08:44,560 --> 00:08:46,800
offensive and in green area we see the

212
00:08:46,800 --> 00:08:48,800
things that are happening in

213
00:08:48,800 --> 00:08:51,360
in the defensive side and when i draw

214
00:08:51,360 --> 00:08:54,399
this line i share it with some friends

215
00:08:54,399 --> 00:08:55,279
and

216
00:08:55,279 --> 00:08:57,440
we was not agreeing on a lot of things

217
00:08:57,440 --> 00:08:59,440
so this means that

218
00:08:59,440 --> 00:09:01,600
this is an example of infinite game what

219
00:09:01,600 --> 00:09:04,000
we include or friends of mine say oh you

220
00:09:04,000 --> 00:09:06,800
must include the sandboxing oh but

221
00:09:06,800 --> 00:09:08,480
why you don't include browsers

222
00:09:08,480 --> 00:09:10,480
protections and so on so the game is

223
00:09:10,480 --> 00:09:11,920
expanding

224
00:09:11,920 --> 00:09:14,640
shrinking you they say somebody why you

225
00:09:14,640 --> 00:09:16,800
don't include some specific features

226
00:09:16,800 --> 00:09:18,720
that windows add or another operating

227
00:09:18,720 --> 00:09:20,399
system out and so on

228
00:09:20,399 --> 00:09:21,200
so

229
00:09:21,200 --> 00:09:24,640
we are not agree everybody what is

230
00:09:24,640 --> 00:09:26,640
included and so on and this make a

231
00:09:26,640 --> 00:09:29,200
perfect analogy on what is a in finite

232
00:09:29,200 --> 00:09:31,440
game

233
00:09:34,399 --> 00:09:35,360
so

234
00:09:35,360 --> 00:09:39,040
how is vulnerability resurgent we have

235
00:09:39,040 --> 00:09:41,200
some emerging techniques that

236
00:09:41,200 --> 00:09:43,279
currently are quite used

237
00:09:43,279 --> 00:09:45,680
variant analysis fuzzing and then there

238
00:09:45,680 --> 00:09:49,440
is still manual code review we will do a

239
00:09:49,440 --> 00:09:52,320
little drill down on these topics but

240
00:09:52,320 --> 00:09:54,399
after me you will have two amazing

241
00:09:54,399 --> 00:09:55,920
speakers

242
00:09:55,920 --> 00:09:57,839
one will speak and going deep about

243
00:09:57,839 --> 00:10:00,080
fuzzing that is also the area where i'm

244
00:10:00,080 --> 00:10:02,160
working and then we'll have where is the

245
00:10:02,160 --> 00:10:03,519
other speaker i don't see it in the

246
00:10:03,519 --> 00:10:06,640
audience we speak about variant analysis

247
00:10:06,640 --> 00:10:08,800
or

248
00:10:09,839 --> 00:10:11,760
variant analysis

249
00:10:11,760 --> 00:10:13,519
so

250
00:10:13,519 --> 00:10:14,640
how we come

251
00:10:14,640 --> 00:10:17,360
aware of vulnerabilities inside our

252
00:10:17,360 --> 00:10:18,560
products

253
00:10:18,560 --> 00:10:20,560
we can become aware internally

254
00:10:20,560 --> 00:10:22,160
organization or external to the

255
00:10:22,160 --> 00:10:23,360
organization

256
00:10:23,360 --> 00:10:25,040
we have coding scanning solutions

257
00:10:25,040 --> 00:10:26,720
dynamic testing

258
00:10:26,720 --> 00:10:28,959
internal security teams we can run on

259
00:10:28,959 --> 00:10:31,519
ipods that they catch exploits and then

260
00:10:31,519 --> 00:10:32,959
we can have threat intelligence

261
00:10:32,959 --> 00:10:34,160
information

262
00:10:34,160 --> 00:10:37,040
but we have also sources outside the

263
00:10:37,040 --> 00:10:39,279
company so maybe i'm a company of my

264
00:10:39,279 --> 00:10:41,600
product i can take a company that is

265
00:10:41,600 --> 00:10:43,839
very good in some vertical areas and we

266
00:10:43,839 --> 00:10:46,480
can ask them to perform a pen testing

267
00:10:46,480 --> 00:10:48,640
or we can have a back bounty program and

268
00:10:48,640 --> 00:10:51,199
we can get

269
00:10:52,000 --> 00:10:55,200
vulnerabilities via coordinated or

270
00:10:55,200 --> 00:10:57,440
responsible disclosure program

271
00:10:57,440 --> 00:11:00,160
in some cases there are not optimal but

272
00:11:00,160 --> 00:11:01,839
we can have we can become aware of

273
00:11:01,839 --> 00:11:03,839
vulnerabilities in our product via full

274
00:11:03,839 --> 00:11:06,399
disclosure or we discovered that

275
00:11:06,399 --> 00:11:10,000
there are exploited directly on the wild

276
00:11:10,000 --> 00:11:13,040
so when one of these

277
00:11:13,040 --> 00:11:14,720
vulnerabilities

278
00:11:14,720 --> 00:11:16,800
reach our organization we need to set up

279
00:11:16,800 --> 00:11:19,120
some project so first of all we need to

280
00:11:19,120 --> 00:11:20,720
patch the vulnerability this is

281
00:11:20,720 --> 00:11:22,880
something that we need to do

282
00:11:22,880 --> 00:11:25,040
to make our software more secure but

283
00:11:25,040 --> 00:11:28,399
then we need to start multiple process

284
00:11:28,399 --> 00:11:31,200
so how we can prevent similar bugs from

285
00:11:31,200 --> 00:11:33,279
happening again we need to train our

286
00:11:33,279 --> 00:11:36,320
developers to don't do that mistakes

287
00:11:36,320 --> 00:11:38,160
we need to change the language maybe

288
00:11:38,160 --> 00:11:40,640
don't write still code in c but start to

289
00:11:40,640 --> 00:11:42,800
writing rust go that are memory safe

290
00:11:42,800 --> 00:11:44,079
languages

291
00:11:44,079 --> 00:11:46,480
or can we kill the vulnerability class

292
00:11:46,480 --> 00:11:48,560
so here there are amazing examples so

293
00:11:48,560 --> 00:11:51,839
around 2008 there was a

294
00:11:51,839 --> 00:11:54,320
cambrian explosion as somebody would use

295
00:11:54,320 --> 00:11:55,040
of

296
00:11:55,040 --> 00:11:56,880
vulnerabilities that are called the null

297
00:11:56,880 --> 00:11:59,839
pointer in the linux kernel but then the

298
00:11:59,839 --> 00:12:01,920
vulnerability was the total

299
00:12:01,920 --> 00:12:03,839
vulnerability class was killed not

300
00:12:03,839 --> 00:12:05,360
allowing any more

301
00:12:05,360 --> 00:12:08,480
code execution by not allowing to map

302
00:12:08,480 --> 00:12:10,720
the new address from user space and

303
00:12:10,720 --> 00:12:13,519
redirect the execution from there

304
00:12:13,519 --> 00:12:14,320
or

305
00:12:14,320 --> 00:12:16,160
for example another thing that we do we

306
00:12:16,160 --> 00:12:17,600
can say oh

307
00:12:17,600 --> 00:12:19,680
if we cannot kill the vulnerability

308
00:12:19,680 --> 00:12:21,760
class can we make the exploitation

309
00:12:21,760 --> 00:12:22,839
harder or

310
00:12:22,839 --> 00:12:25,440
impossible but then there is another

311
00:12:25,440 --> 00:12:27,279
important question

312
00:12:27,279 --> 00:12:30,399
how we find so we note that bugs try to

313
00:12:30,399 --> 00:12:33,519
repeat and maybe a developer is making

314
00:12:33,519 --> 00:12:35,600
again again the same mistakes in other

315
00:12:35,600 --> 00:12:37,120
parts of the code

316
00:12:37,120 --> 00:12:40,240
how we can find other variations of the

317
00:12:40,240 --> 00:12:43,839
same vulnerability in our project or in

318
00:12:43,839 --> 00:12:46,560
other coded basis that this developer is

319
00:12:46,560 --> 00:12:48,880
working

320
00:12:50,240 --> 00:12:51,279
okay

321
00:12:51,279 --> 00:12:53,200
so by variant analysis we define the

322
00:12:53,200 --> 00:12:55,680
process that

323
00:12:55,680 --> 00:12:58,720
allows us to find other vulnerabilities

324
00:12:58,720 --> 00:13:01,360
using as a seed no vulnerabilities that

325
00:13:01,360 --> 00:13:04,160
we receive from the previous sources

326
00:13:04,160 --> 00:13:06,079
so here there are two examples quite

327
00:13:06,079 --> 00:13:08,000
different from each other

328
00:13:08,000 --> 00:13:09,760
and one is

329
00:13:09,760 --> 00:13:12,959
somehow geek funny because the guy says

330
00:13:12,959 --> 00:13:16,720
series in 2021 he grabbed four so in

331
00:13:16,720 --> 00:13:19,360
2021 we find vulnerabilities with graph

332
00:13:19,360 --> 00:13:22,560
this must tell us something about

333
00:13:22,560 --> 00:13:25,279
what is still cyber security

334
00:13:25,279 --> 00:13:27,600
and then in the other article you see a

335
00:13:27,600 --> 00:13:30,000
guide that is saint that is using a

336
00:13:30,000 --> 00:13:32,320
software that is called code ql to look

337
00:13:32,320 --> 00:13:34,800
at the source code

338
00:13:34,800 --> 00:13:37,920
so let's see how these softwares allow

339
00:13:37,920 --> 00:13:39,760
us to find vulnerabilities of course we

340
00:13:39,760 --> 00:13:42,240
can group use grip but maybe it's not

341
00:13:42,240 --> 00:13:44,399
the most efficient way that we can use

342
00:13:44,399 --> 00:13:45,920
for vulnerabilities but there are new

343
00:13:45,920 --> 00:13:49,519
technologies arising on the market that

344
00:13:49,519 --> 00:13:50,880
could allow us to find these

345
00:13:50,880 --> 00:13:52,800
vulnerabilities

346
00:13:52,800 --> 00:13:55,199
so we start this is the starting point

347
00:13:55,199 --> 00:13:58,079
we have our source code and we have our

348
00:13:58,079 --> 00:14:00,800
security bugs knowledge that we receive

349
00:14:00,800 --> 00:14:03,199
from all the sources that i get it that

350
00:14:03,199 --> 00:14:06,800
we i showed before and

351
00:14:06,959 --> 00:14:09,040
is there from a lot of years so it's a

352
00:14:09,040 --> 00:14:11,360
very huge archive maybe

353
00:14:11,360 --> 00:14:14,240
so we can take our source code use a

354
00:14:14,240 --> 00:14:16,480
parsing engine and these

355
00:14:16,480 --> 00:14:19,199
parsing engine can put our code in a

356
00:14:19,199 --> 00:14:21,920
sort of database and

357
00:14:21,920 --> 00:14:24,480
put in a special graph representation in

358
00:14:24,480 --> 00:14:26,320
it

359
00:14:26,320 --> 00:14:28,320
and we can take

360
00:14:28,320 --> 00:14:29,760
our

361
00:14:29,760 --> 00:14:31,360
security bugs

362
00:14:31,360 --> 00:14:33,680
knowledge and we can model that is a

363
00:14:33,680 --> 00:14:35,839
security bug knowledge in sort of

364
00:14:35,839 --> 00:14:38,880
queries of templates that allow us to

365
00:14:38,880 --> 00:14:40,720
perform

366
00:14:40,720 --> 00:14:43,199
like i would say like a sort of sql

367
00:14:43,199 --> 00:14:45,839
queries in our software and look for

368
00:14:45,839 --> 00:14:47,199
variations of the similar

369
00:14:47,199 --> 00:14:50,079
vulnerabilities

370
00:14:52,800 --> 00:14:54,880
there are several products that are

371
00:14:54,880 --> 00:14:57,279
aiming to do that there are commercial

372
00:14:57,279 --> 00:14:59,600
open source and so on we have very

373
00:14:59,600 --> 00:15:01,760
famous code ql we have some graph we

374
00:15:01,760 --> 00:15:04,160
have cochinella we have google project

375
00:15:04,160 --> 00:15:06,560
zero weekly we have shift left year and

376
00:15:06,560 --> 00:15:07,600
so on

377
00:15:07,600 --> 00:15:08,800
and

378
00:15:08,800 --> 00:15:10,639
it's uh

379
00:15:10,639 --> 00:15:13,680
from what i read and what i i'm doing is

380
00:15:13,680 --> 00:15:15,360
a quite

381
00:15:15,360 --> 00:15:16,880
effective way to identify

382
00:15:16,880 --> 00:15:19,040
vulnerabilities

383
00:15:19,040 --> 00:15:21,360
fuzzing

384
00:15:21,360 --> 00:15:24,160
so what is fuzzing so

385
00:15:24,160 --> 00:15:27,199
we can write the definition here but

386
00:15:27,199 --> 00:15:30,000
i like more explain it as i will explain

387
00:15:30,000 --> 00:15:32,079
to my grandparents

388
00:15:32,079 --> 00:15:34,239
so

389
00:15:35,040 --> 00:15:36,560
let's see

390
00:15:36,560 --> 00:15:38,880
i think that several people of you one

391
00:15:38,880 --> 00:15:41,839
they open by mistake a pdf file with

392
00:15:41,839 --> 00:15:44,480
notepad and then you see a random bunch

393
00:15:44,480 --> 00:15:46,160
of characters

394
00:15:46,160 --> 00:15:48,240
and then what happens if you take these

395
00:15:48,240 --> 00:15:50,160
characters that you see in notepad you

396
00:15:50,160 --> 00:15:51,279
change it

397
00:15:51,279 --> 00:15:54,639
and you open again it with the pdf

398
00:15:54,639 --> 00:15:55,920
editor

399
00:15:55,920 --> 00:15:58,399
actually you are performing a super

400
00:15:58,399 --> 00:16:01,360
primitive way of asking

401
00:16:01,360 --> 00:16:04,720
it's not efficient and so on but if you

402
00:16:04,720 --> 00:16:07,199
take this notepad file you change the

403
00:16:07,199 --> 00:16:08,639
data inside

404
00:16:08,639 --> 00:16:12,240
and you open again the file and the

405
00:16:12,240 --> 00:16:13,600
the

406
00:16:13,600 --> 00:16:15,120
the viewer that you are using is

407
00:16:15,120 --> 00:16:17,680
crashing you find a bug and there are

408
00:16:17,680 --> 00:16:20,480
chances that this is a security bug

409
00:16:20,480 --> 00:16:22,720
so doing this manually

410
00:16:22,720 --> 00:16:25,839
is not quite effective

411
00:16:25,839 --> 00:16:28,560
and but we can automate so here we have

412
00:16:28,560 --> 00:16:29,279
a

413
00:16:29,279 --> 00:16:32,240
pseudocode of what a fuzzer look like we

414
00:16:32,240 --> 00:16:35,440
have an enzyme in this case our while

415
00:16:35,440 --> 00:16:38,000
and then we have our mutator we can take

416
00:16:38,000 --> 00:16:40,160
the corpus change the file

417
00:16:40,160 --> 00:16:41,040
and

418
00:16:41,040 --> 00:16:42,959
corpus i mean is

419
00:16:42,959 --> 00:16:45,199
the initial archive of files that we

420
00:16:45,199 --> 00:16:46,720
have

421
00:16:46,720 --> 00:16:48,480
we can pass

422
00:16:48,480 --> 00:16:49,600
the

423
00:16:49,600 --> 00:16:52,399
the file to our software under test and

424
00:16:52,399 --> 00:16:54,880
if the software under test crash

425
00:16:54,880 --> 00:16:56,959
we have a crash detector and they say oh

426
00:16:56,959 --> 00:16:59,759
inspect it and see if this is a bug so

427
00:16:59,759 --> 00:17:01,600
this is how fuzzing work

428
00:17:01,600 --> 00:17:03,759
do you think this way is effective

429
00:17:03,759 --> 00:17:06,720
or it's too primitive

430
00:17:06,720 --> 00:17:08,640
who thinks this is effective some ends

431
00:17:08,640 --> 00:17:10,799
up

432
00:17:11,679 --> 00:17:14,160
oh thank you

433
00:17:14,160 --> 00:17:15,039
okay

434
00:17:15,039 --> 00:17:16,319
next

435
00:17:16,319 --> 00:17:18,799
is extremely effective so here we have

436
00:17:18,799 --> 00:17:20,640
several security researchers that are

437
00:17:20,640 --> 00:17:22,959
saying that they are using it and

438
00:17:22,959 --> 00:17:24,720
integrating in their vulnerability

439
00:17:24,720 --> 00:17:27,280
research life cycle and then we have

440
00:17:27,280 --> 00:17:28,960
several research also from google

441
00:17:28,960 --> 00:17:31,120
project zero that are saying that they

442
00:17:31,120 --> 00:17:33,520
are using fuzzing to find bugs

443
00:17:33,520 --> 00:17:34,640
and

444
00:17:34,640 --> 00:17:38,080
to prove that and not just to be biased

445
00:17:38,080 --> 00:17:40,160
by an opinion because we like it there

446
00:17:40,160 --> 00:17:42,880
is a project for from google that is

447
00:17:42,880 --> 00:17:45,919
called google oss fuzz that is that

448
00:17:45,919 --> 00:17:48,799
identify more 30 000 bugs in

449
00:17:48,799 --> 00:17:52,960
500 open source projects

450
00:17:54,080 --> 00:17:56,400
just a note because sometimes i speak

451
00:17:56,400 --> 00:17:58,480
about fuzzing and i see people confuse

452
00:17:58,480 --> 00:18:00,880
it because they come to me and say oh i

453
00:18:00,880 --> 00:18:03,360
found the two and i have a long list of

454
00:18:03,360 --> 00:18:06,400
directories to for web servers this is

455
00:18:06,400 --> 00:18:08,720
not this thing have the same word at the

456
00:18:08,720 --> 00:18:10,640
moment on internet but there are two

457
00:18:10,640 --> 00:18:12,799
different things this thing is

458
00:18:12,799 --> 00:18:13,840
called

459
00:18:13,840 --> 00:18:15,919
in my opinion directory brute forcing of

460
00:18:15,919 --> 00:18:18,400
web server enumeration so we are not

461
00:18:18,400 --> 00:18:22,320
talking about this type of fuzzing

462
00:18:22,799 --> 00:18:25,600
next so here are some fuzzing concepts

463
00:18:25,600 --> 00:18:28,160
that i want to introduce because will

464
00:18:28,160 --> 00:18:31,280
help to understand the things later so

465
00:18:31,280 --> 00:18:33,520
in this diagram we have something that

466
00:18:33,520 --> 00:18:36,000
is the evolution of others so we started

467
00:18:36,000 --> 00:18:38,240
black box as we then before we change

468
00:18:38,240 --> 00:18:40,960
the file without any particular

469
00:18:40,960 --> 00:18:42,640
uh

470
00:18:42,640 --> 00:18:46,160
logic and so on and then we can

471
00:18:46,160 --> 00:18:48,480
we have two branches that fuzz intake in

472
00:18:48,480 --> 00:18:50,960
the in the in the last years we have

473
00:18:50,960 --> 00:18:52,640
grammar or

474
00:18:52,640 --> 00:18:56,720
format fuzzing that was using

475
00:18:56,720 --> 00:18:59,039
the format of the file and the binary

476
00:18:59,039 --> 00:19:00,960
structures to the file to provide good

477
00:19:00,960 --> 00:19:03,360
inputs very well formatted or we have a

478
00:19:03,360 --> 00:19:05,520
feedback driven fuzzer and then the use

479
00:19:05,520 --> 00:19:08,799
of sanitizers that allows to detect

480
00:19:08,799 --> 00:19:11,280
memory violations in a better way and

481
00:19:11,280 --> 00:19:14,640
now we see a merge of these

482
00:19:14,640 --> 00:19:16,000
two approaches

483
00:19:16,000 --> 00:19:18,160
and then maybe you hear me speaking a

484
00:19:18,160 --> 00:19:20,320
lot of time about arness

485
00:19:20,320 --> 00:19:23,520
the rns if you see the three pieces of

486
00:19:23,520 --> 00:19:25,679
of the puzzle there is the piece of

487
00:19:25,679 --> 00:19:27,600
software that allows to connect the

488
00:19:27,600 --> 00:19:29,919
fuzzing engine with your software under

489
00:19:29,919 --> 00:19:32,240
test

490
00:19:32,720 --> 00:19:33,600
so

491
00:19:33,600 --> 00:19:35,200
you remember this slide at the beginning

492
00:19:35,200 --> 00:19:37,679
when we speak about variant analysis so

493
00:19:37,679 --> 00:19:39,760
here we have some questions that we need

494
00:19:39,760 --> 00:19:41,600
to do we need to patch the vulnerability

495
00:19:41,600 --> 00:19:43,840
we need to perform varian analysis to

496
00:19:43,840 --> 00:19:46,799
find other things but in my opinion

497
00:19:46,799 --> 00:19:49,200
there is another question that we should

498
00:19:49,200 --> 00:19:51,840
add in our sdlc process

499
00:19:51,840 --> 00:19:53,760
why our fathers didn't find the same

500
00:19:53,760 --> 00:19:56,799
vulnerability that we receive from the

501
00:19:56,799 --> 00:19:58,559
other sources

502
00:19:58,559 --> 00:20:01,200
and here i want to introduce a project

503
00:20:01,200 --> 00:20:03,919
that is called vulnerability rediscovery

504
00:20:03,919 --> 00:20:04,799
that

505
00:20:04,799 --> 00:20:09,120
is i can say quite well explained by uh

506
00:20:09,120 --> 00:20:11,840
live overflow in his youtube streams

507
00:20:11,840 --> 00:20:13,280
but basically

508
00:20:13,280 --> 00:20:15,200
when we receive in the back bounty

509
00:20:15,200 --> 00:20:16,720
program let's say a memory corruption

510
00:20:16,720 --> 00:20:19,600
vulnerability in the parsing of some

511
00:20:19,600 --> 00:20:21,510
image file or some other

512
00:20:21,510 --> 00:20:22,720
[Music]

513
00:20:22,720 --> 00:20:24,880
binary structure or whatever

514
00:20:24,880 --> 00:20:27,919
why our fuzzing farm didn't find it

515
00:20:27,919 --> 00:20:30,159
we didn't write the harness

516
00:20:30,159 --> 00:20:32,880
we didn't use a very good set of initial

517
00:20:32,880 --> 00:20:36,400
inputs maybe a good set of pdf files

518
00:20:36,400 --> 00:20:39,120
we don't mutate in the correct way we

519
00:20:39,120 --> 00:20:41,120
don't use the sanitizer so the thing

520
00:20:41,120 --> 00:20:42,880
that allows us to catch memory

521
00:20:42,880 --> 00:20:45,600
corruptions and so on

522
00:20:45,600 --> 00:20:48,720
and most important of all is do we have

523
00:20:48,720 --> 00:20:54,320
other parts of our code where i did not

524
00:20:54,320 --> 00:20:56,880
i used the term tame our father

525
00:20:56,880 --> 00:20:59,039
correctly where i didn't instruct my

526
00:20:59,039 --> 00:21:01,760
father to do the same thing and maybe

527
00:21:01,760 --> 00:21:04,320
i'm working on both on client and server

528
00:21:04,320 --> 00:21:06,480
in parsing a data structure

529
00:21:06,480 --> 00:21:07,840
why

530
00:21:07,840 --> 00:21:10,799
i i must maybe do the same checks also

531
00:21:10,799 --> 00:21:13,520
to the other side

532
00:21:13,520 --> 00:21:16,159
i want to introduce other two topics but

533
00:21:16,159 --> 00:21:18,640
here i need a little bit of interactions

534
00:21:18,640 --> 00:21:20,559
because everybody is sleeping at the

535
00:21:20,559 --> 00:21:21,600
moment

536
00:21:21,600 --> 00:21:22,880
and

537
00:21:22,880 --> 00:21:26,559
so this is a url and i think this is

538
00:21:26,559 --> 00:21:28,799
the best way to explain what is

539
00:21:28,799 --> 00:21:31,039
differential analysis and then we will

540
00:21:31,039 --> 00:21:32,720
see how differential analysis can be

541
00:21:32,720 --> 00:21:35,440
used also for fuzzing

542
00:21:35,440 --> 00:21:36,960
so

543
00:21:36,960 --> 00:21:41,760
what is the ip address that is a url

544
00:21:41,760 --> 00:21:42,840
that is

545
00:21:42,840 --> 00:21:46,080
input will make our browser our software

546
00:21:46,080 --> 00:21:48,799
to connect is one one one one two two

547
00:21:48,799 --> 00:21:50,559
two two three three three three some

548
00:21:50,559 --> 00:21:52,320
options some interactions please be

549
00:21:52,320 --> 00:21:53,600
alive

550
00:21:53,600 --> 00:21:55,600
who is saying one one one how many ends

551
00:21:55,600 --> 00:21:58,559
in up one two three four okay more more

552
00:21:58,559 --> 00:22:01,840
more we say two two two two

553
00:22:01,840 --> 00:22:05,600
okay less three three three three

554
00:22:05,600 --> 00:22:08,240
who say none

555
00:22:08,240 --> 00:22:10,799
who say something different

556
00:22:10,799 --> 00:22:12,400
all of them in the same time okay good

557
00:22:12,400 --> 00:22:14,720
idea

558
00:22:14,720 --> 00:22:17,280
so this is the result

559
00:22:17,280 --> 00:22:18,960
so depends on the library that you use

560
00:22:18,960 --> 00:22:21,039
you have different behaviors

561
00:22:21,039 --> 00:22:24,159
and i mean the same python libraries so

562
00:22:24,159 --> 00:22:25,679
in the same programming language so

563
00:22:25,679 --> 00:22:28,080
these are three very popular python

564
00:22:28,080 --> 00:22:30,159
libraries and when

565
00:22:30,159 --> 00:22:32,480
you pass it so let's say that i don't

566
00:22:32,480 --> 00:22:34,240
know in the front end you use one python

567
00:22:34,240 --> 00:22:36,000
library in the backend you use another

568
00:22:36,000 --> 00:22:37,760
python library or in different parts of

569
00:22:37,760 --> 00:22:39,840
the code for some needs you use

570
00:22:39,840 --> 00:22:41,679
different python libraries and you have

571
00:22:41,679 --> 00:22:43,679
different outcomes

572
00:22:43,679 --> 00:22:46,480
and this is what is

573
00:22:46,480 --> 00:22:48,559
differential analysis so you take the

574
00:22:48,559 --> 00:22:50,960
same input and then you use

575
00:22:50,960 --> 00:22:53,520
different softwares to see if they treat

576
00:22:53,520 --> 00:22:55,919
the same input in the same way

577
00:22:55,919 --> 00:22:59,440
and this is a perfect case study for

578
00:22:59,440 --> 00:23:01,440
combining fuzzing with it

579
00:23:01,440 --> 00:23:04,320
and so we see for example now

580
00:23:04,320 --> 00:23:05,919
there is a

581
00:23:05,919 --> 00:23:08,640
proposal to introduce this test in the

582
00:23:08,640 --> 00:23:10,559
linux kernel to see the different

583
00:23:10,559 --> 00:23:13,280
implementations in the syscalls

584
00:23:13,280 --> 00:23:14,320
and

585
00:23:14,320 --> 00:23:17,200
who is investing in crypto here

586
00:23:17,200 --> 00:23:19,840
ah come on alive a little bit so

587
00:23:19,840 --> 00:23:22,400
differential fuzzing is quite used to

588
00:23:22,400 --> 00:23:23,360
test

589
00:23:23,360 --> 00:23:25,280
different crypto protocols for the

590
00:23:25,280 --> 00:23:27,200
consensus and

591
00:23:27,200 --> 00:23:29,200
for finding bugs

592
00:23:29,200 --> 00:23:30,000
and

593
00:23:30,000 --> 00:23:32,240
then to see that is an effective way

594
00:23:32,240 --> 00:23:34,320
there is an article of

595
00:23:34,320 --> 00:23:37,120
i think a few weeks not one month ago i

596
00:23:37,120 --> 00:23:40,400
think more or less oh 23 september that

597
00:23:40,400 --> 00:23:43,600
is uh from google tag

598
00:23:43,600 --> 00:23:44,799
that they

599
00:23:44,799 --> 00:23:46,559
got that a group of

600
00:23:46,559 --> 00:23:50,640
bad actors was using uh different

601
00:23:50,640 --> 00:23:54,480
was exploiting how two different

602
00:23:54,480 --> 00:23:56,720
certificate parsers was treating a

603
00:23:56,720 --> 00:23:58,559
certificate and this allowed them to

604
00:23:58,559 --> 00:24:00,720
bypass some protections

605
00:24:00,720 --> 00:24:02,799
so i think that the differential fuzzing

606
00:24:02,799 --> 00:24:04,880
will be

607
00:24:04,880 --> 00:24:06,720
something that we will see growing in

608
00:24:06,720 --> 00:24:09,600
the next years especially so now we

609
00:24:09,600 --> 00:24:12,080
examinate fuzzing especially for memory

610
00:24:12,080 --> 00:24:14,320
corruption vulnerabilities but we have

611
00:24:14,320 --> 00:24:17,279
languages like go rust and so on

612
00:24:17,279 --> 00:24:18,799
that are

613
00:24:18,799 --> 00:24:20,799
not subject of memory corruptions but

614
00:24:20,799 --> 00:24:23,760
you still use fuzzing to spot bugs

615
00:24:23,760 --> 00:24:25,120
and

616
00:24:25,120 --> 00:24:27,520
i think is

617
00:24:27,520 --> 00:24:30,400
a very good thing that language starts

618
00:24:30,400 --> 00:24:32,799
to born with fuzzing capabilities from

619
00:24:32,799 --> 00:24:34,080
the beginning

620
00:24:34,080 --> 00:24:36,480
and then there is another trend that we

621
00:24:36,480 --> 00:24:39,200
see that is fuzz driven development so

622
00:24:39,200 --> 00:24:41,919
that you need to write your code that is

623
00:24:41,919 --> 00:24:45,360
more easy to perform fuzzing

624
00:24:45,360 --> 00:24:47,440
manual code review

625
00:24:47,440 --> 00:24:51,039
is one of the last points

626
00:24:51,200 --> 00:24:52,080
um

627
00:24:52,080 --> 00:24:54,880
so by discussing with several security

628
00:24:54,880 --> 00:24:56,400
researchers

629
00:24:56,400 --> 00:24:59,200
they say that oh how you find bugs so i

630
00:24:59,200 --> 00:25:01,200
speak with guys that was

631
00:25:01,200 --> 00:25:03,520
working at pawn to one competition or

632
00:25:03,520 --> 00:25:04,960
something like that

633
00:25:04,960 --> 00:25:06,640
and

634
00:25:06,640 --> 00:25:08,720
i asked them what you what how you find

635
00:25:08,720 --> 00:25:12,240
vulnerabilities what you do you are

636
00:25:12,240 --> 00:25:14,320
you are participating to pontoon so you

637
00:25:14,320 --> 00:25:16,080
must be good what is your opinion on

638
00:25:16,080 --> 00:25:17,039
that

639
00:25:17,039 --> 00:25:19,679
and for them and also for me one of the

640
00:25:19,679 --> 00:25:23,120
best uh way to find vulnerabilities is

641
00:25:23,120 --> 00:25:26,480
manual code analysis seems very old but

642
00:25:26,480 --> 00:25:28,880
still one of the most effective to find

643
00:25:28,880 --> 00:25:33,120
bugs especially because brings novelty

644
00:25:33,120 --> 00:25:34,960
there are some researchers and here we

645
00:25:34,960 --> 00:25:36,880
have different opinions i think also in

646
00:25:36,880 --> 00:25:38,799
the audience that says that fuzzing and

647
00:25:38,799 --> 00:25:41,840
variant analysis allow to find

648
00:25:41,840 --> 00:25:44,400
only two type of bugs low hanging fruit

649
00:25:44,400 --> 00:25:47,520
so bugs that are super easy to catch

650
00:25:47,520 --> 00:25:48,880
or

651
00:25:48,880 --> 00:25:50,640
harder to spot vulnerabilities i don't

652
00:25:50,640 --> 00:25:52,960
know a memory corruption in weight that

653
00:25:52,960 --> 00:25:55,760
can be fined just with hours hours hours

654
00:25:55,760 --> 00:25:58,159
of fuzzing

655
00:25:58,159 --> 00:26:00,480
and we need to think

656
00:26:00,480 --> 00:26:03,760
uh about a fact that fuzzing and variant

657
00:26:03,760 --> 00:26:06,960
analysis must not be a replacement of

658
00:26:06,960 --> 00:26:08,480
manual analysis

659
00:26:08,480 --> 00:26:11,520
must be a tool that supports our manual

660
00:26:11,520 --> 00:26:14,799
analysis to get it better

661
00:26:14,799 --> 00:26:18,000
i think this is a tweet that

662
00:26:18,000 --> 00:26:19,200
i'm

663
00:26:19,200 --> 00:26:21,279
i really like

664
00:26:21,279 --> 00:26:22,320
and

665
00:26:22,320 --> 00:26:25,200
is about a guide that is very famous on

666
00:26:25,200 --> 00:26:27,120
the fuzzing scene

667
00:26:27,120 --> 00:26:28,159
and

668
00:26:28,159 --> 00:26:31,120
says that automation is

669
00:26:31,120 --> 00:26:33,520
the result of

670
00:26:33,520 --> 00:26:36,799
understanding out automatable problem

671
00:26:36,799 --> 00:26:39,360
so if you never do the manual work

672
00:26:39,360 --> 00:26:41,679
it's very hard to identify what you need

673
00:26:41,679 --> 00:26:44,240
to automate so i think that

674
00:26:44,240 --> 00:26:47,440
a still a key for innovation research

675
00:26:47,440 --> 00:26:49,760
and to progress in teasing finite game

676
00:26:49,760 --> 00:26:53,840
should be still manual code review

677
00:26:54,640 --> 00:26:57,679
are we are with time marco

678
00:26:57,679 --> 00:27:00,880
okay perfect i have even less almost on

679
00:27:00,880 --> 00:27:03,760
the last slides

680
00:27:03,760 --> 00:27:07,480
okay conclusions

681
00:27:07,679 --> 00:27:09,039
so

682
00:27:09,039 --> 00:27:10,880
as you know i am a manager and if i

683
00:27:10,880 --> 00:27:13,440
don't have a slide with this airplane

684
00:27:13,440 --> 00:27:15,679
you don't prove that you are a manager

685
00:27:15,679 --> 00:27:16,720
so

686
00:27:16,720 --> 00:27:19,520
it's mandatory so when you become a

687
00:27:19,520 --> 00:27:21,520
there is a friend that says

688
00:27:21,520 --> 00:27:23,679
if you give a keynote you are

689
00:27:23,679 --> 00:27:25,840
a security researcher that is playing

690
00:27:25,840 --> 00:27:28,320
golf or is close to retirement

691
00:27:28,320 --> 00:27:31,440
so i hope not but yeah i need to include

692
00:27:31,440 --> 00:27:32,720
a

693
00:27:32,720 --> 00:27:34,960
management slides at the end to

694
00:27:34,960 --> 00:27:37,279
understand it so i think everybody knows

695
00:27:37,279 --> 00:27:39,279
what is this airplane

696
00:27:39,279 --> 00:27:41,120
this is the

697
00:27:41,120 --> 00:27:43,120
emblem of uh

698
00:27:43,120 --> 00:27:45,520
survival survivorship bias

699
00:27:45,520 --> 00:27:47,600
so during world war ii

700
00:27:47,600 --> 00:27:49,840
they start to

701
00:27:49,840 --> 00:27:52,320
collect data on the planes that was

702
00:27:52,320 --> 00:27:54,320
coming back to the bases and where they

703
00:27:54,320 --> 00:27:57,600
receive bullets and say oh look all the

704
00:27:57,600 --> 00:28:00,240
planes that come back to the base

705
00:28:00,240 --> 00:28:01,840
they have ballots and t's and t's and

706
00:28:01,840 --> 00:28:04,559
t's and these parts we should enforce

707
00:28:04,559 --> 00:28:07,440
these parts and we should make them more

708
00:28:07,440 --> 00:28:09,279
robust

709
00:28:09,279 --> 00:28:10,240
but

710
00:28:10,240 --> 00:28:12,559
there was a mistake in this analysis was

711
00:28:12,559 --> 00:28:14,720
the planes that was coming back to the

712
00:28:14,720 --> 00:28:17,120
base so means that these planes was

713
00:28:17,120 --> 00:28:20,159
actually good because they survived

714
00:28:20,159 --> 00:28:22,640
they didn't add the data of the planes

715
00:28:22,640 --> 00:28:24,399
that was destroyed

716
00:28:24,399 --> 00:28:27,200
and maybe maybe

717
00:28:27,200 --> 00:28:30,320
these planes was the planes that the the

718
00:28:30,320 --> 00:28:32,320
hits that these planes receive was in

719
00:28:32,320 --> 00:28:35,520
the parts that should be more protected

720
00:28:35,520 --> 00:28:37,520
so

721
00:28:37,520 --> 00:28:39,440
what i'm doing now i speak about variant

722
00:28:39,440 --> 00:28:43,279
analysis to use them as a seed and so on

723
00:28:43,279 --> 00:28:45,679
do we have a survival bias

724
00:28:45,679 --> 00:28:48,159
so we are getting these vulnerabilities

725
00:28:48,159 --> 00:28:50,240
and then we find variations but are what

726
00:28:50,240 --> 00:28:51,840
are the vulnerabilities that we don't

727
00:28:51,840 --> 00:28:54,320
catch and how we can catch these

728
00:28:54,320 --> 00:28:56,399
vulnerabilities that are not catch how

729
00:28:56,399 --> 00:28:57,440
we can

730
00:28:57,440 --> 00:28:58,720
avoid

731
00:28:58,720 --> 00:29:01,760
a scope bias and finding other

732
00:29:01,760 --> 00:29:03,440
vulnerabilities that at the moment are

733
00:29:03,440 --> 00:29:05,200
not detected

734
00:29:05,200 --> 00:29:06,720
so

735
00:29:06,720 --> 00:29:09,360
i am working with security teams and in

736
00:29:09,360 --> 00:29:12,320
research development for many years and

737
00:29:12,320 --> 00:29:15,520
is not a easy task so

738
00:29:15,520 --> 00:29:18,640
one of the things is that several teams

739
00:29:18,640 --> 00:29:21,600
focus on the wrong goals

740
00:29:21,600 --> 00:29:24,320
so they focus on oh you must find for

741
00:29:24,320 --> 00:29:26,559
the end of the year 10 vulnerabilities

742
00:29:26,559 --> 00:29:27,919
in this software

743
00:29:27,919 --> 00:29:30,000
but it's not something that you can

744
00:29:30,000 --> 00:29:31,200
control you don't know how many

745
00:29:31,200 --> 00:29:32,720
vulnerabilities you have in the software

746
00:29:32,720 --> 00:29:36,320
and so on but instead i push my team for

747
00:29:36,320 --> 00:29:38,080
something that is called novelty

748
00:29:38,080 --> 00:29:40,080
research so if you are a manager you are

749
00:29:40,080 --> 00:29:42,080
doing pen testing with your team and so

750
00:29:42,080 --> 00:29:44,720
on i really suggest that this book that

751
00:29:44,720 --> 00:29:47,679
is about novelty search

752
00:29:47,679 --> 00:29:50,720
and is about how to trigger serendipity

753
00:29:50,720 --> 00:29:53,120
discoveries in research

754
00:29:53,120 --> 00:29:56,799
in research and development teams

755
00:29:57,440 --> 00:29:58,880
other thing that

756
00:29:58,880 --> 00:30:01,600
i will suggest if you work for a vendor

757
00:30:01,600 --> 00:30:04,320
don't limit your tests with source code

758
00:30:04,320 --> 00:30:05,600
but

759
00:30:05,600 --> 00:30:08,320
perform security testing as also back

760
00:30:08,320 --> 00:30:10,880
doctors doing and not meaning to do just

761
00:30:10,880 --> 00:30:13,360
one but do both

762
00:30:13,360 --> 00:30:15,919
first of all engineers like challenges

763
00:30:15,919 --> 00:30:17,679
if you have an engineer and you say to

764
00:30:17,679 --> 00:30:20,080
him oh you have infinite money you have

765
00:30:20,080 --> 00:30:22,240
infinite time put this rocket on the

766
00:30:22,240 --> 00:30:23,120
moon

767
00:30:23,120 --> 00:30:25,360
nobody will be got on the moon because

768
00:30:25,360 --> 00:30:27,760
they find it not challenging

769
00:30:27,760 --> 00:30:30,240
say to the guy oh you need

770
00:30:30,240 --> 00:30:32,399
you have one year to do that you need to

771
00:30:32,399 --> 00:30:34,159
do the rockets super light because we

772
00:30:34,159 --> 00:30:36,559
don't have money you need to do this

773
00:30:36,559 --> 00:30:38,559
with these and these restraints

774
00:30:38,559 --> 00:30:40,640
come on the engineer is triggered i

775
00:30:40,640 --> 00:30:43,360
wanna do that if you are lucky in the

776
00:30:43,360 --> 00:30:45,360
requirements and so on you don't

777
00:30:45,360 --> 00:30:48,159
challenge the engineers enough to put

778
00:30:48,159 --> 00:30:50,799
the effort on that

779
00:30:50,799 --> 00:30:54,240
and again don't focus only on automation

780
00:30:54,240 --> 00:30:55,360
but

781
00:30:55,360 --> 00:30:58,320
go ahead also for

782
00:30:58,320 --> 00:31:00,720
manual code analysis this is what is

783
00:31:00,720 --> 00:31:04,880
trigger innovation what allows you to

784
00:31:04,880 --> 00:31:05,919
to push

785
00:31:05,919 --> 00:31:07,919
and find the new ways to test your

786
00:31:07,919 --> 00:31:11,360
software before backed actors are doing

787
00:31:11,360 --> 00:31:14,559
i want to close with this one slide so i

788
00:31:14,559 --> 00:31:17,120
had a lot of discussions about

789
00:31:17,120 --> 00:31:19,840
um

790
00:31:20,000 --> 00:31:22,480
uh this presentation with friends and so

791
00:31:22,480 --> 00:31:24,080
on during beers

792
00:31:24,080 --> 00:31:27,360
then one guy in the whatsapp group make

793
00:31:27,360 --> 00:31:28,720
a very good

794
00:31:28,720 --> 00:31:30,159
comment

795
00:31:30,159 --> 00:31:32,080
and i asked him can you tweet it and i

796
00:31:32,080 --> 00:31:34,080
will put you in the keynote and he did

797
00:31:34,080 --> 00:31:36,080
it

798
00:31:36,080 --> 00:31:38,880
so he yes is follow him on twitter now

799
00:31:38,880 --> 00:31:41,120
i'm kidding he's a good friend

800
00:31:41,120 --> 00:31:42,559
and

801
00:31:42,559 --> 00:31:45,360
he it is spot a very good point that

802
00:31:45,360 --> 00:31:47,760
normally inside the company you go oh

803
00:31:47,760 --> 00:31:49,679
find all the bugs possibles and so on

804
00:31:49,679 --> 00:31:51,679
and say instead hackers work in a

805
00:31:51,679 --> 00:31:53,600
different way or bad actors work in a

806
00:31:53,600 --> 00:31:55,840
different way

807
00:31:55,840 --> 00:31:58,720
they focus on a goal they want to have

808
00:31:58,720 --> 00:32:00,640
a receive full remote chain on the

809
00:32:00,640 --> 00:32:03,679
device and so on and this allowed them

810
00:32:03,679 --> 00:32:06,960
to enjoy a lot of wounds and then find

811
00:32:06,960 --> 00:32:09,679
other things that may be with the first

812
00:32:09,679 --> 00:32:11,440
processor missing

813
00:32:11,440 --> 00:32:12,240
so

814
00:32:12,240 --> 00:32:15,200
i think this is the perfect way how you

815
00:32:15,200 --> 00:32:17,600
should conduct vulnerability research

816
00:32:17,600 --> 00:32:19,440
inside of your team apply both

817
00:32:19,440 --> 00:32:22,000
methodologies think how to kill all the

818
00:32:22,000 --> 00:32:24,480
bugs working on source code and so on

819
00:32:24,480 --> 00:32:28,320
but then add also the

820
00:32:28,320 --> 00:32:31,679
the methodology that hackers are doing

821
00:32:31,679 --> 00:32:35,430
that's all guys questions

822
00:32:35,430 --> 00:32:43,760
[Applause]

823
00:32:43,760 --> 00:32:45,970
uh

824
00:32:45,970 --> 00:33:02,109
[Music]

825
00:33:04,720 --> 00:33:06,799
you

