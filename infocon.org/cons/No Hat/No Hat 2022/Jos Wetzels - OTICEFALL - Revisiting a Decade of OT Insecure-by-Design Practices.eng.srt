1
00:00:00,850 --> 00:00:07,310
[Music]

2
00:00:12,080 --> 00:00:15,059
stage is your event all right good luck

3
00:00:15,059 --> 00:00:18,180
so uh hello everyone and uh welcome my

4
00:00:18,180 --> 00:00:20,279
name is Jose wetzels and I'm a security

5
00:00:20,279 --> 00:00:22,740
researcher with four Scouts Federal labs

6
00:00:22,740 --> 00:00:24,960
and today I will be talking about a

7
00:00:24,960 --> 00:00:26,519
bundle of operational technology

8
00:00:26,519 --> 00:00:29,039
vulnerabilities dubbed OT ice fall which

9
00:00:29,039 --> 00:00:31,380
we released this year

10
00:00:31,380 --> 00:00:33,840
so a little bit about fatal apps where

11
00:00:33,840 --> 00:00:36,000
the threat intelligence arm of forescout

12
00:00:36,000 --> 00:00:37,860
uh we're a vendor of control and

13
00:00:37,860 --> 00:00:40,500
visibility Solutions aimed at OT iot

14
00:00:40,500 --> 00:00:43,980
medical devices and so on and we work in

15
00:00:43,980 --> 00:00:45,500
intelligence generation attack

16
00:00:45,500 --> 00:00:48,239
prediction and threat research and this

17
00:00:48,239 --> 00:00:51,899
is part of one of our research programs

18
00:00:51,899 --> 00:00:54,780
so as most of you are likely well aware

19
00:00:54,780 --> 00:00:57,480
more than a decade ago the company

20
00:00:57,480 --> 00:01:00,180
digital Bond initiated project base camp

21
00:01:00,180 --> 00:01:02,579
just for a show of hands how many people

22
00:01:02,579 --> 00:01:05,580
are familiar with project base camp

23
00:01:05,580 --> 00:01:08,640
not that many so project Basecamp was

24
00:01:08,640 --> 00:01:10,979
modeled after the fire sheet project and

25
00:01:10,979 --> 00:01:14,220
it aimed to show that most ICS OT

26
00:01:14,220 --> 00:01:17,220
devices had a basic lack of security

27
00:01:17,220 --> 00:01:20,340
control so no security whatsoever

28
00:01:20,340 --> 00:01:22,560
um they looked into multiple products by

29
00:01:22,560 --> 00:01:24,299
a lot of different vendors and they

30
00:01:24,299 --> 00:01:26,520
found what is by now common knowledge

31
00:01:26,520 --> 00:01:29,460
that a lot of OT products lack the most

32
00:01:29,460 --> 00:01:32,520
basic of security controls now this lack

33
00:01:32,520 --> 00:01:35,159
of basic security controls has its roots

34
00:01:35,159 --> 00:01:37,200
in the historical deployment of this

35
00:01:37,200 --> 00:01:39,479
kind of stuff in trusted air gap

36
00:01:39,479 --> 00:01:43,200
networks but that situation is now a

37
00:01:43,200 --> 00:01:46,200
very distant past and it and OT are more

38
00:01:46,200 --> 00:01:48,420
interconnected than ever before also as

39
00:01:48,420 --> 00:01:49,439
the previous

40
00:01:49,439 --> 00:01:52,320
um uh presentation showed and even

41
00:01:52,320 --> 00:01:54,180
Wireless and Cloud Technologies are

42
00:01:54,180 --> 00:01:56,700
making some hard way in this space

43
00:01:56,700 --> 00:02:00,180
now in the past decade a lot has changed

44
00:02:00,180 --> 00:02:02,939
in OT security too um first of all in

45
00:02:02,939 --> 00:02:04,799
terms of awareness people are aware of

46
00:02:04,799 --> 00:02:06,960
this problem now they're recognizing it

47
00:02:06,960 --> 00:02:08,340
that something should be done about it

48
00:02:08,340 --> 00:02:11,038
and secondly with the Advent of various

49
00:02:11,038 --> 00:02:13,020
standards driven security efforts such

50
00:02:13,020 --> 00:02:16,560
as IEC 62443 nerk sip you name it

51
00:02:16,560 --> 00:02:19,920
but what you see if you look at otcves

52
00:02:19,920 --> 00:02:21,959
is that diamond again trivial

53
00:02:21,959 --> 00:02:24,540
vulnerabilities continue popping up in

54
00:02:24,540 --> 00:02:27,420
OT products and since we get a lot of

55
00:02:27,420 --> 00:02:30,300
customer asks to look into or support a

56
00:02:30,300 --> 00:02:32,940
specific OT system we set out to do a

57
00:02:32,940 --> 00:02:34,980
checkup of the progress that has been

58
00:02:34,980 --> 00:02:37,620
made essentially in the past 10 years on

59
00:02:37,620 --> 00:02:40,200
the insecure by Design front by taking a

60
00:02:40,200 --> 00:02:41,760
quantitative approach in the actually

61
00:02:41,760 --> 00:02:45,000
deployed install base among various

62
00:02:45,000 --> 00:02:47,340
parties

63
00:02:47,340 --> 00:02:49,739
so the first thing you might ask is if

64
00:02:49,739 --> 00:02:51,720
insecure by Design is such a well-known

65
00:02:51,720 --> 00:02:53,760
issue why revisit it why bother talking

66
00:02:53,760 --> 00:02:56,280
about it again well the problem is that

67
00:02:56,280 --> 00:02:58,019
if you want to do effective risk

68
00:02:58,019 --> 00:03:00,480
management that is Complicated by any

69
00:03:00,480 --> 00:03:02,580
sort of opacity if you want to know

70
00:03:02,580 --> 00:03:04,920
whether real progress is being made on

71
00:03:04,920 --> 00:03:07,860
this front or what is actually under the

72
00:03:07,860 --> 00:03:09,599
hood of new security controls that are

73
00:03:09,599 --> 00:03:11,879
being introduced you will need to dig a

74
00:03:11,879 --> 00:03:13,379
little deeper than just the surface

75
00:03:13,379 --> 00:03:15,000
level assumptions that people have been

76
00:03:15,000 --> 00:03:17,459
making you cannot simply assume that

77
00:03:17,459 --> 00:03:19,319
every proprietary system that you

78
00:03:19,319 --> 00:03:21,659
encounter is and will always remain

79
00:03:21,659 --> 00:03:24,599
broken in the same ways security

80
00:03:24,599 --> 00:03:26,640
mechanisms are sometimes retrofitted

81
00:03:26,640 --> 00:03:29,040
onto insecure protocols so you know your

82
00:03:29,040 --> 00:03:30,959
judgment calls from five years ago might

83
00:03:30,959 --> 00:03:32,700
no longer hold authentication

84
00:03:32,700 --> 00:03:36,720
implementations change over time etc etc

85
00:03:36,720 --> 00:03:39,360
in addition it's also not enough to know

86
00:03:39,360 --> 00:03:41,340
whether something is insecure because

87
00:03:41,340 --> 00:03:43,500
that doesn't mean anything you need to

88
00:03:43,500 --> 00:03:46,319
know in what way it is insecure so it it

89
00:03:46,319 --> 00:03:48,780
matters a lot whether I'm able to change

90
00:03:48,780 --> 00:03:50,819
a particular set point for example

91
00:03:50,819 --> 00:03:52,799
change of temperature or pressure rating

92
00:03:52,799 --> 00:03:54,780
or if I'm able to get remote code

93
00:03:54,780 --> 00:03:57,299
execution on a device and bypass any

94
00:03:57,299 --> 00:03:59,519
sort of intrinsic limitations you will

95
00:03:59,519 --> 00:04:01,379
need to know that kind of info to

96
00:04:01,379 --> 00:04:03,540
justify the right compensating controls

97
00:04:03,540 --> 00:04:06,000
that you might need to take so it's very

98
00:04:06,000 --> 00:04:07,799
important to do this checkup now and

99
00:04:07,799 --> 00:04:08,760
then

100
00:04:08,760 --> 00:04:11,340
so let's start with a brief overview of

101
00:04:11,340 --> 00:04:13,379
the issues

102
00:04:13,379 --> 00:04:15,659
in total we uncovered 56 issues

103
00:04:15,659 --> 00:04:18,418
affecting more than 10 vendors and this

104
00:04:18,418 --> 00:04:20,459
includes all kinds of vendors and all

105
00:04:20,459 --> 00:04:23,340
kinds of Industry verticals dcss which

106
00:04:23,340 --> 00:04:25,800
are distributed control systems such as

107
00:04:25,800 --> 00:04:27,900
Emerson Delta V which is very big in oil

108
00:04:27,900 --> 00:04:30,600
and gas and Ovation which is very big in

109
00:04:30,600 --> 00:04:33,419
power generation it also includes safety

110
00:04:33,419 --> 00:04:35,040
controllers like the Honeywell safety

111
00:04:35,040 --> 00:04:37,199
manager and plcs that are used in both

112
00:04:37,199 --> 00:04:39,780
manufacturing and building control like

113
00:04:39,780 --> 00:04:42,419
the Saya Burgess PCD the Omron says Mac

114
00:04:42,419 --> 00:04:45,000
the yokugawa stardom you name it

115
00:04:45,000 --> 00:04:47,340
of the vulnerabilities that we uncovered

116
00:04:47,340 --> 00:04:49,500
while what it didn't surprise us but

117
00:04:49,500 --> 00:04:51,960
what did strike us is that the majority

118
00:04:51,960 --> 00:04:54,600
consisted of trivial issues as you can

119
00:04:54,600 --> 00:04:55,800
see on the right these are not

120
00:04:55,800 --> 00:04:58,020
complicated vulnerabilities they consist

121
00:04:58,020 --> 00:05:00,060
of compromise of credentials firmer

122
00:05:00,060 --> 00:05:02,520
manipulation issues and some very

123
00:05:02,520 --> 00:05:04,139
trivial ways to get remote code

124
00:05:04,139 --> 00:05:06,060
execution which we'll talk about a

125
00:05:06,060 --> 00:05:08,220
little bit later

126
00:05:08,220 --> 00:05:10,320
so we disclose these issues to the

127
00:05:10,320 --> 00:05:12,660
vendors through sisa which is a U.S

128
00:05:12,660 --> 00:05:14,699
government body providing a disclosure

129
00:05:14,699 --> 00:05:17,400
deadline of at least 90 days ahead of

130
00:05:17,400 --> 00:05:19,320
the release of of the report and in some

131
00:05:19,320 --> 00:05:21,720
cases extending it

132
00:05:21,720 --> 00:05:23,759
um unfortunately the vendor responses

133
00:05:23,759 --> 00:05:27,240
they varied a lot uh some acknowledge

134
00:05:27,240 --> 00:05:29,100
the receipt of our report but only

135
00:05:29,100 --> 00:05:31,139
started in-depth investigations very

136
00:05:31,139 --> 00:05:33,720
close uh to the deadlines so there was a

137
00:05:33,720 --> 00:05:35,580
little bit of a hectic situation around

138
00:05:35,580 --> 00:05:36,900
that

139
00:05:36,900 --> 00:05:39,120
um and as a result some issues are still

140
00:05:39,120 --> 00:05:42,300
in disclosure then some vendors wanted

141
00:05:42,300 --> 00:05:44,280
the details to be restricted only to

142
00:05:44,280 --> 00:05:46,500
product bulletins so that only certain

143
00:05:46,500 --> 00:05:48,300
customers would be notified and not the

144
00:05:48,300 --> 00:05:51,120
general public in other cases we had

145
00:05:51,120 --> 00:05:53,039
more pleasurable experiences where

146
00:05:53,039 --> 00:05:55,020
vendors confirmed to us that these

147
00:05:55,020 --> 00:05:56,880
reports actually invigorated their

148
00:05:56,880 --> 00:05:58,560
internal secure protocol development

149
00:05:58,560 --> 00:06:00,720
efforts so that's that's a win in my

150
00:06:00,720 --> 00:06:03,780
book if you want a detailed overview of

151
00:06:03,780 --> 00:06:05,580
all the different vulnerabilities the

152
00:06:05,580 --> 00:06:06,960
affected versions and the detailed

153
00:06:06,960 --> 00:06:09,780
mitigations on the links that are in the

154
00:06:09,780 --> 00:06:11,580
slide you can see the Caesar and the

155
00:06:11,580 --> 00:06:13,860
vendor advisories which contain a full

156
00:06:13,860 --> 00:06:16,500
guidance we did not disclose full

157
00:06:16,500 --> 00:06:17,880
technical details of all these

158
00:06:17,880 --> 00:06:19,740
vulnerabilities for the simple reason

159
00:06:19,740 --> 00:06:22,740
that a lot of these vulnerabilities are

160
00:06:22,740 --> 00:06:24,660
inherent to these system designs in some

161
00:06:24,660 --> 00:06:26,460
cases they will be essentially forever

162
00:06:26,460 --> 00:06:28,440
day some of them will not get patched

163
00:06:28,440 --> 00:06:29,819
they will only get workarounds and

164
00:06:29,819 --> 00:06:32,580
mitigations and once you are able to

165
00:06:32,580 --> 00:06:34,319
reproduce this vulnerability it's

166
00:06:34,319 --> 00:06:36,660
usually fairly trivial so there is

167
00:06:36,660 --> 00:06:38,520
really a balance to be made here whether

168
00:06:38,520 --> 00:06:40,740
you want to put that out in public in

169
00:06:40,740 --> 00:06:42,419
full

170
00:06:42,419 --> 00:06:44,880
so let's take a deeper dive into a

171
00:06:44,880 --> 00:06:46,979
recurring category of issues broken

172
00:06:46,979 --> 00:06:49,020
authentication schemes and improper

173
00:06:49,020 --> 00:06:50,460
fixes for them

174
00:06:50,460 --> 00:06:53,940
so while a lot of OT systems like any

175
00:06:53,940 --> 00:06:55,979
sort of security controls as I just

176
00:06:55,979 --> 00:06:58,020
mentioned it has become more common over

177
00:06:58,020 --> 00:07:00,360
the past decade to integrate at least

178
00:07:00,360 --> 00:07:03,060
some sort of authentication schemes to

179
00:07:03,060 --> 00:07:04,979
sensitive operator or engineering

180
00:07:04,979 --> 00:07:06,180
interfaces

181
00:07:06,180 --> 00:07:09,840
now in practice these however are often

182
00:07:09,840 --> 00:07:12,479
and not just often but almost always of

183
00:07:12,479 --> 00:07:14,400
subpar quality and I'll give some

184
00:07:14,400 --> 00:07:16,319
examples of that

185
00:07:16,319 --> 00:07:19,740
first of that is the Siemens win CC uh

186
00:07:19,740 --> 00:07:21,780
OA scada system it's a very popular

187
00:07:21,780 --> 00:07:24,180
scada system used in oil and gas and

188
00:07:24,180 --> 00:07:27,240
water management but also at CERN it has

189
00:07:27,240 --> 00:07:29,460
an operator UI which is where the the

190
00:07:29,460 --> 00:07:31,979
industrial operator think Homer Simpson

191
00:07:31,979 --> 00:07:34,500
uh he logs in and he talks essentially

192
00:07:34,500 --> 00:07:37,740
to a dedicated proxy which wraps a

193
00:07:37,740 --> 00:07:40,020
proprietary insecure protocol so this is

194
00:07:40,020 --> 00:07:41,699
a a protocol that has no security

195
00:07:41,699 --> 00:07:44,400
measures whatsoever they wrap it in TLS

196
00:07:44,400 --> 00:07:46,319
and then they have a couple of

197
00:07:46,319 --> 00:07:48,180
authentication methods on top of that

198
00:07:48,180 --> 00:07:50,639
and there's three modes for that the

199
00:07:50,639 --> 00:07:52,620
first mode is well as it says

200
00:07:52,620 --> 00:07:55,560
client-side authentication which used to

201
00:07:55,560 --> 00:07:58,500
be the default prior to version 3.17 and

202
00:07:58,500 --> 00:08:01,139
this is the preferred version for single

203
00:08:01,139 --> 00:08:02,759
sign-on integration so if you want to

204
00:08:02,759 --> 00:08:04,319
couple this kind of authentication to

205
00:08:04,319 --> 00:08:06,300
your active directory or whatever you do

206
00:08:06,300 --> 00:08:08,520
it through this mode then you have

207
00:08:08,520 --> 00:08:11,099
server site authentication that has

208
00:08:11,099 --> 00:08:13,740
become the default since 3.17 and then

209
00:08:13,740 --> 00:08:15,479
you have the option to to integrate with

210
00:08:15,479 --> 00:08:16,680
Kerberos

211
00:08:16,680 --> 00:08:18,300
the problem with client-side

212
00:08:18,300 --> 00:08:20,819
authentication is that it stores the

213
00:08:20,819 --> 00:08:23,460
credentials as database points in the

214
00:08:23,460 --> 00:08:26,520
scada database and then essentially what

215
00:08:26,520 --> 00:08:28,740
the client does is when I try to log in

216
00:08:28,740 --> 00:08:31,020
it asks the database can you give me all

217
00:08:31,020 --> 00:08:32,940
the users and the passwords and I'll

218
00:08:32,940 --> 00:08:35,458
check them locally whether you know that

219
00:08:35,458 --> 00:08:38,339
is a right fit so an attacker can just

220
00:08:38,339 --> 00:08:40,020
write a malicious client that doesn't do

221
00:08:40,020 --> 00:08:41,880
that and talk directly to the database

222
00:08:41,880 --> 00:08:43,559
and on top of that they can also fetch

223
00:08:43,559 --> 00:08:45,600
the credentials now this wouldn't be

224
00:08:45,600 --> 00:08:48,240
that much of an issue if this wasn't the

225
00:08:48,240 --> 00:08:50,160
mode that is required to get it coupled

226
00:08:50,160 --> 00:08:51,899
to your active directory so a lot of

227
00:08:51,899 --> 00:08:54,959
people are kind of stuck in in Catch-22

228
00:08:54,959 --> 00:08:56,640
here

229
00:08:56,640 --> 00:08:58,560
another thing we took a look at that was

230
00:08:58,560 --> 00:09:00,420
kind of exemplary of like failures of

231
00:09:00,420 --> 00:09:02,820
authentication is the Motorola mdlc

232
00:09:02,820 --> 00:09:04,140
protocol

233
00:09:04,140 --> 00:09:06,180
um it's a scada protocol that is used to

234
00:09:06,180 --> 00:09:07,980
communicate between the central scada

235
00:09:07,980 --> 00:09:10,680
location as you can see there to an rtu

236
00:09:10,680 --> 00:09:13,140
over a wide area network and that can be

237
00:09:13,140 --> 00:09:15,480
transported over anything from IP to

238
00:09:15,480 --> 00:09:18,180
serial to radio to microwave you name it

239
00:09:18,180 --> 00:09:20,580
now it doesn't have explicit

240
00:09:20,580 --> 00:09:23,279
authentication but there are two modes

241
00:09:23,279 --> 00:09:25,380
of encryption based on a pre-shared key

242
00:09:25,380 --> 00:09:27,839
that you program into the scada and into

243
00:09:27,839 --> 00:09:30,899
the rtu now in the newer rtus there's a

244
00:09:30,899 --> 00:09:34,440
mode that's based on aes256 but in the

245
00:09:34,440 --> 00:09:36,660
older modes there is an undocumented

246
00:09:36,660 --> 00:09:38,279
mode that turned out to use the tiny

247
00:09:38,279 --> 00:09:41,459
encryption algorithm in ECB mode and

248
00:09:41,459 --> 00:09:43,980
this mode is supported by newer rtus for

249
00:09:43,980 --> 00:09:45,899
backwards compatibility and a mixed

250
00:09:45,899 --> 00:09:49,200
Network reasons up until this disclosure

251
00:09:49,200 --> 00:09:51,060
of course people with some basic

252
00:09:51,060 --> 00:09:52,440
knowledge of cryptography they will know

253
00:09:52,440 --> 00:09:54,779
that using any block Cipher in ECB mode

254
00:09:54,779 --> 00:09:57,300
means you're opening yourself up to a

255
00:09:57,300 --> 00:09:59,760
host of of issues like known plain text

256
00:09:59,760 --> 00:10:02,399
issues block swapping attacks since it

257
00:10:02,399 --> 00:10:04,200
guarantees integrity and confidentiality

258
00:10:04,200 --> 00:10:06,420
only at the black level and and not at

259
00:10:06,420 --> 00:10:09,180
the ciphertext level as illustrated by

260
00:10:09,180 --> 00:10:13,339
the notorious ECB Penguin on the right

261
00:10:13,800 --> 00:10:16,920
um next are the Saya Burgess PCD plcs

262
00:10:16,920 --> 00:10:20,160
these are plcs that you see a lot in for

263
00:10:20,160 --> 00:10:22,500
example gas control networks but also

264
00:10:22,500 --> 00:10:24,440
the more high-tech building automation

265
00:10:24,440 --> 00:10:28,080
they use a protocol called asbas of

266
00:10:28,080 --> 00:10:32,160
report 5050 UDP it's originally a Serial

267
00:10:32,160 --> 00:10:35,459
protocol it's Master Slave based and it

268
00:10:35,459 --> 00:10:37,080
does have some sort of authentication

269
00:10:37,080 --> 00:10:39,899
what it does is essentially you perform

270
00:10:39,899 --> 00:10:42,120
a right operation to a static memory

271
00:10:42,120 --> 00:10:45,120
address and then it says you know you're

272
00:10:45,120 --> 00:10:46,740
authenticated or not

273
00:10:46,740 --> 00:10:49,380
the problem is that the authentication

274
00:10:49,380 --> 00:10:53,459
happens by sending a 32-bit hash derived

275
00:10:53,459 --> 00:10:56,820
from a CRC check to the PLC without a

276
00:10:56,820 --> 00:11:00,600
nuns so it's not a secure hash and on

277
00:11:00,600 --> 00:11:02,220
top of that there's no freshness so it's

278
00:11:02,220 --> 00:11:04,620
vulnerable to every attack in the book

279
00:11:04,620 --> 00:11:05,880
there's collisions there's replay

280
00:11:05,880 --> 00:11:08,519
attacks and to finish it off

281
00:11:08,519 --> 00:11:10,380
it doesn't really matter how well they

282
00:11:10,380 --> 00:11:11,940
would have implemented this algorithm

283
00:11:11,940 --> 00:11:13,980
because they do the authentication uh

284
00:11:13,980 --> 00:11:17,339
based on an ipwide list and it's a UDP

285
00:11:17,339 --> 00:11:21,079
protocol so yeah

286
00:11:21,240 --> 00:11:23,459
another interesting case with with some

287
00:11:23,459 --> 00:11:25,740
overlap here are the issues that we

288
00:11:25,740 --> 00:11:28,620
found with the Emerson control wave PLC

289
00:11:28,620 --> 00:11:30,600
um they're very popular in in transport

290
00:11:30,600 --> 00:11:33,660
pipeline gas transport pipeline control

291
00:11:33,660 --> 00:11:35,519
um and they use a proprietary protocol

292
00:11:35,519 --> 00:11:38,579
called bsep IP which again it's an old

293
00:11:38,579 --> 00:11:40,440
serial protocol that was lifted on top

294
00:11:40,440 --> 00:11:42,060
of Ip

295
00:11:42,060 --> 00:11:44,160
um it has password authentication for

296
00:11:44,160 --> 00:11:46,140
engineering operations like starting and

297
00:11:46,140 --> 00:11:48,540
stopping the PLC and changing the logic

298
00:11:48,540 --> 00:11:50,820
but again it enforces this using a Mac

299
00:11:50,820 --> 00:11:53,279
IP whitelist for a UDP protocol rather

300
00:11:53,279 --> 00:11:54,899
than doing at least cryptographic

301
00:11:54,899 --> 00:11:57,060
message binding for each subsequent

302
00:11:57,060 --> 00:12:00,060
message now on top of that there are

303
00:12:00,060 --> 00:12:01,980
three authentication modes here there's

304
00:12:01,980 --> 00:12:03,600
the original one which they now call

305
00:12:03,600 --> 00:12:05,880
Simple that's a one to six character

306
00:12:05,880 --> 00:12:07,800
plain text password that gets sent over

307
00:12:07,800 --> 00:12:10,800
the wire very simple indeed

308
00:12:10,800 --> 00:12:12,480
um then there is a secure mode that they

309
00:12:12,480 --> 00:12:14,940
introduced and what you do here is if I

310
00:12:14,940 --> 00:12:17,040
want to authenticate to the PLC the PLC

311
00:12:17,040 --> 00:12:20,700
sends me an 8-bit key I take that 8-bit

312
00:12:20,700 --> 00:12:22,800
key and I encrypt my password using that

313
00:12:22,800 --> 00:12:24,899
8-bit key and I send it to the PLC and

314
00:12:24,899 --> 00:12:28,380
it checks is that the same password

315
00:12:28,380 --> 00:12:30,959
well that's the uh it trivially broken

316
00:12:30,959 --> 00:12:32,940
for various reasons I mean eight bits is

317
00:12:32,940 --> 00:12:34,560
it's not much of a key plus this is not

318
00:12:34,560 --> 00:12:36,120
how you do a challenge response because

319
00:12:36,120 --> 00:12:38,100
the key goes over the wire

320
00:12:38,100 --> 00:12:41,100
now they have secure mode 2 which is

321
00:12:41,100 --> 00:12:42,899
undocumented but is used in the newest

322
00:12:42,899 --> 00:12:44,399
firmware versions and what they

323
00:12:44,399 --> 00:12:46,500
essentially just did is they now use a

324
00:12:46,500 --> 00:12:48,300
64-bit key and a slightly different

325
00:12:48,300 --> 00:12:50,040
encryption algorithm

326
00:12:50,040 --> 00:12:52,740
this is just a Showcase of a bad design

327
00:12:52,740 --> 00:12:55,440
three times over in many cases these

328
00:12:55,440 --> 00:12:57,300
systems can migrate to more secure

329
00:12:57,300 --> 00:12:59,399
versions because of reasons of backwards

330
00:12:59,399 --> 00:13:01,440
compatibility Legacy

331
00:13:01,440 --> 00:13:03,060
um the complication and updating

332
00:13:03,060 --> 00:13:05,339
firmware all that sort of stuff but

333
00:13:05,339 --> 00:13:06,839
apparently they had the chance at least

334
00:13:06,839 --> 00:13:09,180
twice here but still missed that missed

335
00:13:09,180 --> 00:13:11,339
that option

336
00:13:11,339 --> 00:13:13,200
according to Emerson however these

337
00:13:13,200 --> 00:13:15,899
issues are not vulnerabilities they feel

338
00:13:15,899 --> 00:13:18,240
these issues are adequately addressed in

339
00:13:18,240 --> 00:13:19,800
the control wave manual which you can

340
00:13:19,800 --> 00:13:22,980
see an excerpt off on on the slide and

341
00:13:22,980 --> 00:13:25,440
what they say for enhanced security you

342
00:13:25,440 --> 00:13:27,959
can install a VPN in a firewall now this

343
00:13:27,959 --> 00:13:29,940
is misleading in my opinion because

344
00:13:29,940 --> 00:13:32,639
enhanced security implies that this

345
00:13:32,639 --> 00:13:34,620
other stuff is basic security and I

346
00:13:34,620 --> 00:13:36,720
don't think that's exactly true and

347
00:13:36,720 --> 00:13:38,279
secondly if you look at the reference

348
00:13:38,279 --> 00:13:41,040
design on the right of the slide it just

349
00:13:41,040 --> 00:13:43,860
recommends a side-to-site VPN which

350
00:13:43,860 --> 00:13:45,720
doesn't solve the issue being exploited

351
00:13:45,720 --> 00:13:48,540
at the local side level and that can be

352
00:13:48,540 --> 00:13:50,339
okay that can be an acceptable risk

353
00:13:50,339 --> 00:13:52,139
trade-off but people need to be informed

354
00:13:52,139 --> 00:13:54,000
that this is the residual risk they're

355
00:13:54,000 --> 00:13:56,639
exposed to if they do it this way that

356
00:13:56,639 --> 00:13:59,120
doesn't happen

357
00:13:59,519 --> 00:14:02,940
an example of an incomplete rather than

358
00:14:02,940 --> 00:14:05,279
an improper bug fix is something we

359
00:14:05,279 --> 00:14:08,579
found in the yokogawa stardom plcs

360
00:14:08,579 --> 00:14:10,200
um they're they're very big in power and

361
00:14:10,200 --> 00:14:11,399
Mining to give you a little bit of

362
00:14:11,399 --> 00:14:13,560
context they have a telnet maintenance

363
00:14:13,560 --> 00:14:16,500
interface that has had multiple prior

364
00:14:16,500 --> 00:14:18,720
issues with hard-coded credentials two

365
00:14:18,720 --> 00:14:21,720
cves in in 2018

366
00:14:21,720 --> 00:14:24,120
even though these issues were fixed we

367
00:14:24,120 --> 00:14:26,519
found yet another set of hard-coded

368
00:14:26,519 --> 00:14:28,860
credentials affecting duplex controllers

369
00:14:28,860 --> 00:14:31,800
on the same interface in the same piece

370
00:14:31,800 --> 00:14:34,500
of the firmware and this isn't really

371
00:14:34,500 --> 00:14:35,880
interesting I mean it's hard-coded

372
00:14:35,880 --> 00:14:38,339
credentials you know whatever but what

373
00:14:38,339 --> 00:14:40,079
is interesting is that it is an

374
00:14:40,079 --> 00:14:42,540
indication that bugs are fixed Point

375
00:14:42,540 --> 00:14:45,420
wise they get a report of vulnerability

376
00:14:45,420 --> 00:14:47,100
they fix it they push a new firmware

377
00:14:47,100 --> 00:14:48,899
that's it but they don't follow it up

378
00:14:48,899 --> 00:14:50,899
with variant hunting

379
00:14:50,899 --> 00:14:53,880
in in code that is like right next to it

380
00:14:53,880 --> 00:14:55,680
and and that is really really damning in

381
00:14:55,680 --> 00:14:57,899
in my opinion here

382
00:14:57,899 --> 00:15:00,120
finally we found an example pointing

383
00:15:00,120 --> 00:15:01,920
towards a similar lack of variant

384
00:15:01,920 --> 00:15:04,139
hunting with the Emerson Delta V DCS

385
00:15:04,139 --> 00:15:06,000
controllers which are very big in oil

386
00:15:06,000 --> 00:15:07,620
and gas

387
00:15:07,620 --> 00:15:10,139
um first of all most controllers up

388
00:15:10,139 --> 00:15:11,880
until the most recent version had

389
00:15:11,880 --> 00:15:13,920
hard-coded credentials for the so-called

390
00:15:13,920 --> 00:15:17,100
read-only telnet interface in addition

391
00:15:17,100 --> 00:15:19,260
several other hard-coded credentials

392
00:15:19,260 --> 00:15:22,199
were present and they are technically

393
00:15:22,199 --> 00:15:25,160
tied on the outside to FTP and SSH

394
00:15:25,160 --> 00:15:27,480
interfaces but if you get access to

395
00:15:27,480 --> 00:15:29,100
another interface they can be used for

396
00:15:29,100 --> 00:15:30,779
privilege escalation and unfortunately

397
00:15:30,779 --> 00:15:32,579
the official advisory doesn't doesn't

398
00:15:32,579 --> 00:15:34,860
mention this so I think it's important

399
00:15:34,860 --> 00:15:36,300
to get that out

400
00:15:36,300 --> 00:15:39,300
in addition these hard-coded credentials

401
00:15:39,300 --> 00:15:41,339
um the maintenance telnet interface

402
00:15:41,339 --> 00:15:42,959
which offers shell access to the

403
00:15:42,959 --> 00:15:44,480
underlying real-time operating system

404
00:15:44,480 --> 00:15:46,980
uses an insecure authentication

405
00:15:46,980 --> 00:15:49,380
algorithm up to a fairly recent version

406
00:15:49,380 --> 00:15:52,860
after which it was silently patched this

407
00:15:52,860 --> 00:15:54,420
authentication algorithm essentially

408
00:15:54,420 --> 00:15:56,820
consists of a Homebrew cryptography

409
00:15:56,820 --> 00:16:00,839
algorithm which takes no secret just a

410
00:16:00,839 --> 00:16:02,639
very predictable seed that is smaller

411
00:16:02,639 --> 00:16:04,740
than 16 bits so as long as you know the

412
00:16:04,740 --> 00:16:06,959
algorithm you can Brute Force the seed

413
00:16:06,959 --> 00:16:08,519
or you can probably even predict it and

414
00:16:08,519 --> 00:16:10,500
you get access to a shell on this

415
00:16:10,500 --> 00:16:13,019
controller now this is not the first

416
00:16:13,019 --> 00:16:14,760
time that that Delta V has suffered from

417
00:16:14,760 --> 00:16:16,800
issues like this they've had hard-coded

418
00:16:16,800 --> 00:16:19,019
credential issues before and apparently

419
00:16:19,019 --> 00:16:21,060
they didn't follow that up by looking at

420
00:16:21,060 --> 00:16:22,800
all these low-hanging fruit that has

421
00:16:22,800 --> 00:16:25,500
been in here since at least the 2014 cve

422
00:16:25,500 --> 00:16:29,360
that was reported earlier

423
00:16:30,060 --> 00:16:31,920
um and these examples kind of lead me to

424
00:16:31,920 --> 00:16:34,139
my next point which is maybe a bit

425
00:16:34,139 --> 00:16:35,459
controversial

426
00:16:35,459 --> 00:16:37,380
um but nonetheless important

427
00:16:37,380 --> 00:16:39,720
what can we expect of OT product

428
00:16:39,720 --> 00:16:41,759
security certification today and I'll

429
00:16:41,759 --> 00:16:43,259
take a little bit of water before I'll

430
00:16:43,259 --> 00:16:45,920
get to that

431
00:16:52,920 --> 00:16:55,620
so what we found was that the majority

432
00:16:55,620 --> 00:16:57,899
of the affected product families had

433
00:16:57,899 --> 00:17:01,139
some form of security certification even

434
00:17:01,139 --> 00:17:03,000
though the the issues that they suffered

435
00:17:03,000 --> 00:17:04,919
from were fairly trivial issues I mean

436
00:17:04,919 --> 00:17:06,439
this is this stuff is not rocket science

437
00:17:06,439 --> 00:17:09,240
this is kind of problematic in my

438
00:17:09,240 --> 00:17:10,980
opinion because while security

439
00:17:10,980 --> 00:17:12,959
certifications they they obviously

440
00:17:12,959 --> 00:17:14,520
aren't guarantee that something is

441
00:17:14,520 --> 00:17:16,020
unhackable and there's a lot of like

442
00:17:16,020 --> 00:17:17,640
Nuance to at what level they get

443
00:17:17,640 --> 00:17:20,939
certified they are often seen as a seal

444
00:17:20,939 --> 00:17:22,559
of approval for meeting a certain

445
00:17:22,559 --> 00:17:24,419
minimum bar

446
00:17:24,419 --> 00:17:26,280
um which some of these products simply

447
00:17:26,280 --> 00:17:27,419
don't meet

448
00:17:27,419 --> 00:17:30,179
and in my opinion that leads to a false

449
00:17:30,179 --> 00:17:32,640
sense of security so there are several

450
00:17:32,640 --> 00:17:34,799
issues contributing to this a problem

451
00:17:34,799 --> 00:17:37,919
which I won't get into uh in detail but

452
00:17:37,919 --> 00:17:40,559
I do think it is important that for all

453
00:17:40,559 --> 00:17:42,900
of these insecure by Design issues um at

454
00:17:42,900 --> 00:17:44,760
least the ones with which are not

455
00:17:44,760 --> 00:17:47,640
broadly known there is some sort of an

456
00:17:47,640 --> 00:17:49,440
independent artifact in the form of a

457
00:17:49,440 --> 00:17:52,140
report or a cve that certification

458
00:17:52,140 --> 00:17:54,539
laboratory Auditors can refer to when

459
00:17:54,539 --> 00:17:55,980
they're doing these audits because they

460
00:17:55,980 --> 00:17:57,360
don't have a lot of time to do these

461
00:17:57,360 --> 00:17:58,860
audits they're often not subject matter

462
00:17:58,860 --> 00:18:01,740
experts on OT technology so they need

463
00:18:01,740 --> 00:18:03,419
some sort of a reference to say look

464
00:18:03,419 --> 00:18:05,400
this protocol I can look into it in

465
00:18:05,400 --> 00:18:07,679
depth but it doesn't meet the criteria

466
00:18:07,679 --> 00:18:10,460
that it should meet

467
00:18:10,919 --> 00:18:12,600
um to give a more detailed example of

468
00:18:12,600 --> 00:18:14,820
this uh going wrong let's take a look at

469
00:18:14,820 --> 00:18:17,840
the the IEC

470
00:18:17,840 --> 00:18:20,640
62443-4-2 substandard for component

471
00:18:20,640 --> 00:18:24,299
security requirements so how many people

472
00:18:24,299 --> 00:18:26,820
are familiar with this standard

473
00:18:26,820 --> 00:18:28,679
not a lot

474
00:18:28,679 --> 00:18:30,660
um so basically you have different

475
00:18:30,660 --> 00:18:32,580
security levels and at the lowest

476
00:18:32,580 --> 00:18:34,799
security level it's not really a hard

477
00:18:34,799 --> 00:18:37,340
security guarantee it's more to prevent

478
00:18:37,340 --> 00:18:39,660
inadvertent misuse and stuff like that

479
00:18:39,660 --> 00:18:41,880
but it still has some requirements that

480
00:18:41,880 --> 00:18:43,980
if they are met at the lowest security

481
00:18:43,980 --> 00:18:46,260
level they also apply to the higher one

482
00:18:46,260 --> 00:18:47,820
so once you get certified at security

483
00:18:47,820 --> 00:18:50,160
level one then usually people move on to

484
00:18:50,160 --> 00:18:51,780
security levels and they say oh this was

485
00:18:51,780 --> 00:18:53,039
already you know covered in security

486
00:18:53,039 --> 00:18:55,799
level one so it matters what what what

487
00:18:55,799 --> 00:18:57,840
people get certified for at those lower

488
00:18:57,840 --> 00:18:59,940
levels

489
00:18:59,940 --> 00:19:02,700
um now if you look at at the slide you

490
00:19:02,700 --> 00:19:04,679
can see there are requirements for human

491
00:19:04,679 --> 00:19:06,840
user identification uh there are

492
00:19:06,840 --> 00:19:09,120
requirements for software and

493
00:19:09,120 --> 00:19:10,799
information integrity and these things

494
00:19:10,799 --> 00:19:12,600
are not being met in the security sense

495
00:19:12,600 --> 00:19:15,140
so how do we rhyme these ubiquitous

496
00:19:15,140 --> 00:19:17,299
unauthenticated interfaces

497
00:19:17,299 --> 00:19:19,440
unauthenticated logic downloads and the

498
00:19:19,440 --> 00:19:21,360
ability to tamper with software with

499
00:19:21,360 --> 00:19:23,340
these requirements which apparently they

500
00:19:23,340 --> 00:19:25,559
met before they got the the stamp of

501
00:19:25,559 --> 00:19:27,840
approval

502
00:19:27,840 --> 00:19:30,360
another example would be the 4-1

503
00:19:30,360 --> 00:19:32,700
substandard which is a standard that

504
00:19:32,700 --> 00:19:34,500
governs setting up secure development

505
00:19:34,500 --> 00:19:38,160
life cycles which explicitly states that

506
00:19:38,160 --> 00:19:40,260
root cause identification and variant

507
00:19:40,260 --> 00:19:43,620
hunting are requirements of a sdlc as

508
00:19:43,620 --> 00:19:46,020
they should be then I don't have an

509
00:19:46,020 --> 00:19:47,700
answer to this but I think an important

510
00:19:47,700 --> 00:19:49,919
question is how is it possible that two

511
00:19:49,919 --> 00:19:52,980
major vendors with certified sdlcs have

512
00:19:52,980 --> 00:19:55,320
clearly failed to either identify root

513
00:19:55,320 --> 00:19:59,160
causes of Fairly trivial issues or

514
00:19:59,160 --> 00:20:01,919
failed to identify the the most simple

515
00:20:01,919 --> 00:20:03,960
related security issues like other hard

516
00:20:03,960 --> 00:20:05,160
guarded credentials on the same

517
00:20:05,160 --> 00:20:07,919
interface is this because they are still

518
00:20:07,919 --> 00:20:09,539
relatively immature is this because

519
00:20:09,539 --> 00:20:10,860
something is going wrong in these as

520
00:20:10,860 --> 00:20:13,140
DLCs I don't know exactly but I think

521
00:20:13,140 --> 00:20:15,299
people should be focusing a little bit

522
00:20:15,299 --> 00:20:17,520
more on this

523
00:20:17,520 --> 00:20:20,580
and finally regarding the same 4-1

524
00:20:20,580 --> 00:20:23,480
standard on sdlcs and slightly related

525
00:20:23,480 --> 00:20:25,919
standard by General Electric called the

526
00:20:25,919 --> 00:20:28,380
Achilles product certification standard

527
00:20:28,380 --> 00:20:30,720
and they have a requirement that states

528
00:20:30,720 --> 00:20:33,480
explicitly that an sdlc should guarantee

529
00:20:33,480 --> 00:20:36,000
products are tested for abuse cases in

530
00:20:36,000 --> 00:20:38,340
other words they should be fussed now

531
00:20:38,340 --> 00:20:41,400
the Oculus ACC certification if you look

532
00:20:41,400 --> 00:20:43,740
at the slide actually claims that using

533
00:20:43,740 --> 00:20:46,140
the Achilles test platform to do a whole

534
00:20:46,140 --> 00:20:48,840
bunch of systematic fuzzing in specific

535
00:20:48,840 --> 00:20:51,840
protocol stack layers however if you

536
00:20:51,840 --> 00:20:54,539
look at which devices are ACC certified

537
00:20:54,539 --> 00:20:57,900
even at security level 2 it includes a

538
00:20:57,900 --> 00:20:59,760
host of like real-time operating system

539
00:20:59,760 --> 00:21:02,280
and devices that in recent years have

540
00:21:02,280 --> 00:21:03,840
been found vulnerable to memory

541
00:21:03,840 --> 00:21:07,080
corruption flaws in TCP Stacks which we

542
00:21:07,080 --> 00:21:08,460
in some other security companies

543
00:21:08,460 --> 00:21:11,100
uncovered that were to be honest also

544
00:21:11,100 --> 00:21:13,200
quite trivial it didn't take a lot of

545
00:21:13,200 --> 00:21:15,299
fussing to find this so the question is

546
00:21:15,299 --> 00:21:17,460
if this is a requirement and if this is

547
00:21:17,460 --> 00:21:19,260
being done who is doing the fuzzing here

548
00:21:19,260 --> 00:21:23,299
and who who fusses the fuzzers

549
00:21:23,580 --> 00:21:26,039
um now all of these examples lead to the

550
00:21:26,039 --> 00:21:27,059
question

551
00:21:27,059 --> 00:21:28,860
um when is something actually secure by

552
00:21:28,860 --> 00:21:30,900
Design what what does this mean now in

553
00:21:30,900 --> 00:21:33,780
this research alone we found 22 cves

554
00:21:33,780 --> 00:21:35,880
related to Broken authentication while

555
00:21:35,880 --> 00:21:38,220
if we look at a selection of similar

556
00:21:38,220 --> 00:21:41,640
issues in in Prior work we could find at

557
00:21:41,640 --> 00:21:44,220
least 28 cves with similar root causes

558
00:21:44,220 --> 00:21:47,280
in the last five years so this is not a

559
00:21:47,280 --> 00:21:49,500
issue of certain vendors it is not an

560
00:21:49,500 --> 00:21:52,740
issue of a snapshot in time it is not an

561
00:21:52,740 --> 00:21:54,659
issue of of cherry picking something

562
00:21:54,659 --> 00:21:57,000
this is a broad issue among security

563
00:21:57,000 --> 00:22:00,320
controls if they are present in in OT

564
00:22:00,320 --> 00:22:03,360
that's worrying because in my opinion a

565
00:22:03,360 --> 00:22:05,039
false sense of security is actually

566
00:22:05,039 --> 00:22:06,900
worse than a clear sense of insecurity

567
00:22:06,900 --> 00:22:08,100
because if you have a clear sense of

568
00:22:08,100 --> 00:22:09,960
insecurity you can take the right

569
00:22:09,960 --> 00:22:11,760
compensated controls well if you have a

570
00:22:11,760 --> 00:22:14,280
false sense of security or if you think

571
00:22:14,280 --> 00:22:16,200
you're good well you might not be

572
00:22:16,200 --> 00:22:18,900
so what can we expect of product

573
00:22:18,900 --> 00:22:20,640
security standards well I think they

574
00:22:20,640 --> 00:22:22,380
serve a purpose this is this is not to

575
00:22:22,380 --> 00:22:24,179
say you know standards term in the bin

576
00:22:24,179 --> 00:22:25,620
that's definitely not the case they've

577
00:22:25,620 --> 00:22:27,659
Advanced Security in many areas a lot

578
00:22:27,659 --> 00:22:29,640
they have a role to play but I think

579
00:22:29,640 --> 00:22:30,840
they

580
00:22:30,840 --> 00:22:32,820
their track record deserves more

581
00:22:32,820 --> 00:22:35,700
scrutiny than it has been getting uh so

582
00:22:35,700 --> 00:22:38,120
far most standards have functional

583
00:22:38,120 --> 00:22:40,559
requirements stating that something half

584
00:22:40,559 --> 00:22:42,480
capability X or something shall have

585
00:22:42,480 --> 00:22:44,460
capability why and then it needs to be

586
00:22:44,460 --> 00:22:46,799
functionally validated so if it needs

587
00:22:46,799 --> 00:22:49,020
authentication requirements

588
00:22:49,020 --> 00:22:50,880
um people check oh is there a pop-up box

589
00:22:50,880 --> 00:22:52,980
with a password but not like how robust

590
00:22:52,980 --> 00:22:55,740
is this this in my opinion adds very

591
00:22:55,740 --> 00:22:58,620
little so yeah people should look into

592
00:22:58,620 --> 00:23:01,500
this in in more depth

593
00:23:01,500 --> 00:23:03,900
um finally secure by Design is not

594
00:23:03,900 --> 00:23:06,000
enough we need secure by default you

595
00:23:06,000 --> 00:23:07,860
shouldn't say oh you know it's not

596
00:23:07,860 --> 00:23:09,480
secure out of the box but there's these

597
00:23:09,480 --> 00:23:11,039
hardening guidance all the way at the

598
00:23:11,039 --> 00:23:13,260
end of the 600 page manual which you

599
00:23:13,260 --> 00:23:15,059
need to follow and then you also need a

600
00:23:15,059 --> 00:23:17,220
subscription to our Support Services to

601
00:23:17,220 --> 00:23:18,840
get you know the reference document with

602
00:23:18,840 --> 00:23:21,419
the reference architecture no make it

603
00:23:21,419 --> 00:23:23,520
secure by default because otherwise

604
00:23:23,520 --> 00:23:25,200
people are going to get enough rope to

605
00:23:25,200 --> 00:23:28,159
to hang themselves with

606
00:23:28,500 --> 00:23:30,720
um now doing the research there's some

607
00:23:30,720 --> 00:23:33,299
classes of issues that require a bit of

608
00:23:33,299 --> 00:23:35,159
nuance when looking at them in both

609
00:23:35,159 --> 00:23:36,780
directions

610
00:23:36,780 --> 00:23:38,940
um and their impact and and we'll

611
00:23:38,940 --> 00:23:42,320
briefly go over some of them

612
00:23:45,780 --> 00:23:48,419
so first of all there's the issue of

613
00:23:48,419 --> 00:23:50,220
supply chain vulnerabilities or

614
00:23:50,220 --> 00:23:52,559
vulnerabilities that are originate in

615
00:23:52,559 --> 00:23:54,120
some component high up the supply chain

616
00:23:54,120 --> 00:23:57,360
and end up trickling down in the past

617
00:23:57,360 --> 00:23:59,400
few years we've seen more and more of

618
00:23:59,400 --> 00:24:01,440
these issues across the technology stack

619
00:24:01,440 --> 00:24:03,419
in in OT from real-time operating

620
00:24:03,419 --> 00:24:05,640
systems to sdks the protocol Stacks to

621
00:24:05,640 --> 00:24:07,799
runtimes to remote access Solutions you

622
00:24:07,799 --> 00:24:09,840
name it now

623
00:24:09,840 --> 00:24:12,000
what typically happens is that a

624
00:24:12,000 --> 00:24:13,799
vulnerability affecting some supply

625
00:24:13,799 --> 00:24:15,539
chain component is usually not

626
00:24:15,539 --> 00:24:17,400
discovered in that component it's

627
00:24:17,400 --> 00:24:19,860
discovered in a product incorporating

628
00:24:19,860 --> 00:24:22,380
that component and then that is reported

629
00:24:22,380 --> 00:24:24,480
as belonging to that vendor it doesn't

630
00:24:24,480 --> 00:24:26,520
make its way up the supply chain let

631
00:24:26,520 --> 00:24:28,860
alone them back again to everybody else

632
00:24:28,860 --> 00:24:32,400
in the supply chain and this is a

633
00:24:32,400 --> 00:24:34,980
recurring issue also in in broader

634
00:24:34,980 --> 00:24:37,620
embedded sectors in some cases because

635
00:24:37,620 --> 00:24:40,559
the vendors don't even know who uses

636
00:24:40,559 --> 00:24:42,120
everything down the supply chain they

637
00:24:42,120 --> 00:24:44,400
might have a view of some OMS and some

638
00:24:44,400 --> 00:24:46,919
some some component vendors but then it

639
00:24:46,919 --> 00:24:49,740
goes blind for them as well so these

640
00:24:49,740 --> 00:24:51,840
kind of situations lead to unnecessary

641
00:24:51,840 --> 00:24:53,580
vulnerability collisions and risk

642
00:24:53,580 --> 00:24:55,500
blindness which we found an example of

643
00:24:55,500 --> 00:24:57,299
as well

644
00:24:57,299 --> 00:24:57,960
um

645
00:24:57,960 --> 00:25:00,539
this is the pro con OS runtime it's a

646
00:25:00,539 --> 00:25:02,039
logic runtime now owned by Phoenix

647
00:25:02,039 --> 00:25:03,960
contact and it's used by their products

648
00:25:03,960 --> 00:25:06,720
but also by many oans and integrators

649
00:25:06,720 --> 00:25:09,659
and white label vendors under many

650
00:25:09,659 --> 00:25:11,460
different integration conditions so this

651
00:25:11,460 --> 00:25:14,460
is used to execute PLC logic and you can

652
00:25:14,460 --> 00:25:16,320
use different versions of this runtime

653
00:25:16,320 --> 00:25:18,240
you can use it with your own protocol

654
00:25:18,240 --> 00:25:19,620
you can use it with two different

655
00:25:19,620 --> 00:25:22,080
versions of their protocols there's very

656
00:25:22,080 --> 00:25:24,120
complicated different setups that make

657
00:25:24,120 --> 00:25:26,820
external fingerprinting a little bit of

658
00:25:26,820 --> 00:25:28,520
a pain into something

659
00:25:28,520 --> 00:25:31,740
now what we frequently encountered is

660
00:25:31,740 --> 00:25:33,900
that a particular PLC in a customer

661
00:25:33,900 --> 00:25:35,700
environment which we were looking at

662
00:25:35,700 --> 00:25:38,159
after some investigation turned out to

663
00:25:38,159 --> 00:25:40,260
run again Pro con OS but this wasn't

664
00:25:40,260 --> 00:25:42,120
immediately clear like you couldn't find

665
00:25:42,120 --> 00:25:44,039
it in documents you can really see it

666
00:25:44,039 --> 00:25:46,980
always on the outside that clearly and

667
00:25:46,980 --> 00:25:48,960
the problem here is that broken OS like

668
00:25:48,960 --> 00:25:51,779
many of these runtimes has a history of

669
00:25:51,779 --> 00:25:53,820
vulnerabilities such as unauthenticated

670
00:25:53,820 --> 00:25:55,919
protocols remote code execution to

671
00:25:55,919 --> 00:25:57,900
unsigned logic all that kind of stuff

672
00:25:57,900 --> 00:25:59,760
and I have been proof of Concepts

673
00:25:59,760 --> 00:26:01,799
available for this on the internet for

674
00:26:01,799 --> 00:26:04,260
years in some cases issues have been

675
00:26:04,260 --> 00:26:06,720
known without assigned cves so people

676
00:26:06,720 --> 00:26:08,580
are deploying these Assets in their

677
00:26:08,580 --> 00:26:09,900
environment they think oh well there's

678
00:26:09,900 --> 00:26:12,779
no CV from my device must be good but

679
00:26:12,779 --> 00:26:13,919
under the hood you've been running

680
00:26:13,919 --> 00:26:15,600
something that you know has been

681
00:26:15,600 --> 00:26:18,659
vulnerable for for God knows how long

682
00:26:18,659 --> 00:26:21,480
now due to the lack of software builds

683
00:26:21,480 --> 00:26:23,039
of materials in this case uh

684
00:26:23,039 --> 00:26:24,419
vulnerabilities end up getting

685
00:26:24,419 --> 00:26:26,820
rediscovered for example there's a cve

686
00:26:26,820 --> 00:26:30,419
for the yokogawa stardom PLC which in no

687
00:26:30,419 --> 00:26:32,520
way seems related to this issue there's

688
00:26:32,520 --> 00:26:34,380
no details on it there's there's nothing

689
00:26:34,380 --> 00:26:36,659
no ways to detect it it's just a

690
00:26:36,659 --> 00:26:38,940
rediscovery two years later of that same

691
00:26:38,940 --> 00:26:40,860
Phoenix contact CV it's the same thing

692
00:26:40,860 --> 00:26:42,480
could have been could have been known

693
00:26:42,480 --> 00:26:45,240
already and that's that's unfortunate so

694
00:26:45,240 --> 00:26:47,340
what we did was we looked at some other

695
00:26:47,340 --> 00:26:49,440
plcs and vendors that incorporate this

696
00:26:49,440 --> 00:26:50,820
runtime and you can see that on the

697
00:26:50,820 --> 00:26:52,799
right and we hope that this eventually

698
00:26:52,799 --> 00:26:55,260
makes its way down to the right cve but

699
00:26:55,260 --> 00:26:58,580
you know time will tell

700
00:26:58,799 --> 00:27:01,919
um the next example are firmware updates

701
00:27:01,919 --> 00:27:03,539
um malicious firmware updates in OT

702
00:27:03,539 --> 00:27:06,900
context are a bit of a mixed bag on the

703
00:27:06,900 --> 00:27:09,000
one hand they're noisy you know it

704
00:27:09,000 --> 00:27:12,120
requires a reboot and will likely

705
00:27:12,120 --> 00:27:13,980
interrupt the process trigger all sorts

706
00:27:13,980 --> 00:27:16,020
of alarms but they are very powerful

707
00:27:16,020 --> 00:27:17,820
because they allow for persistence they

708
00:27:17,820 --> 00:27:19,559
allow for Mass breaking it's a powerful

709
00:27:19,559 --> 00:27:23,940
vector and we found that only 51 of the

710
00:27:23,940 --> 00:27:26,039
products that we looked at had some sort

711
00:27:26,039 --> 00:27:27,900
of authentication on the update

712
00:27:27,900 --> 00:27:31,500
interface and only 22 percent performed

713
00:27:31,500 --> 00:27:33,900
some sort of firmer signing at all and

714
00:27:33,900 --> 00:27:35,400
usually this was combined so no

715
00:27:35,400 --> 00:27:36,720
authentication in order to push the

716
00:27:36,720 --> 00:27:38,640
update and then no signing on the

717
00:27:38,640 --> 00:27:40,740
firmware and the majority of these

718
00:27:40,740 --> 00:27:43,440
updates occurred over ethernet that's

719
00:27:43,440 --> 00:27:45,960
you know a big risk factor in some cases

720
00:27:45,960 --> 00:27:47,820
the risk is a little bit reduced because

721
00:27:47,820 --> 00:27:49,740
updates were only done over USB over

722
00:27:49,740 --> 00:27:51,840
serial over SD card

723
00:27:51,840 --> 00:27:54,240
you know that reduces the risk but then

724
00:27:54,240 --> 00:27:55,799
you still need to think what about when

725
00:27:55,799 --> 00:27:57,539
a media converter or an engineering

726
00:27:57,539 --> 00:27:59,580
workstation gets compromised

727
00:27:59,580 --> 00:28:03,539
so the caveat here is that if you do

728
00:28:03,539 --> 00:28:06,059
signing as a vendor you need to do it

729
00:28:06,059 --> 00:28:07,740
right you need to do it end to end and

730
00:28:07,740 --> 00:28:10,500
you need to do it in asymmetric fashion

731
00:28:10,500 --> 00:28:12,360
an example where this doesn't go

732
00:28:12,360 --> 00:28:14,520
completely right are the Emerson Delta

733
00:28:14,520 --> 00:28:16,620
vdcs controllers that I also discussed

734
00:28:16,620 --> 00:28:18,840
earlier these controllers speak a

735
00:28:18,840 --> 00:28:21,000
variety of unauthenticated proprietary

736
00:28:21,000 --> 00:28:23,460
protocols which allow for I mean doing

737
00:28:23,460 --> 00:28:25,039
essentially everything

738
00:28:25,039 --> 00:28:28,440
in addition prior to version 14.3

739
00:28:28,440 --> 00:28:31,440
controller firmers are well signed using

740
00:28:31,440 --> 00:28:34,919
CRC so they're unsigned now Emerson

741
00:28:34,919 --> 00:28:37,740
considers this issue resolved in 14.3

742
00:28:37,740 --> 00:28:40,380
because in that version the update tool

743
00:28:40,380 --> 00:28:42,059
on the engineering workstation now

744
00:28:42,059 --> 00:28:44,520
validates an errors a signature in the

745
00:28:44,520 --> 00:28:46,440
firmware manifest file before flashing

746
00:28:46,440 --> 00:28:49,020
it to the controller but this really

747
00:28:49,020 --> 00:28:51,240
only protects the firmware as it travels

748
00:28:51,240 --> 00:28:52,919
from the vendor to the engineering

749
00:28:52,919 --> 00:28:56,640
workstation and then it's it's open it

750
00:28:56,640 --> 00:28:58,559
doesn't protect anyone in between

751
00:28:58,559 --> 00:29:00,960
Emerson considers that not to be much of

752
00:29:00,960 --> 00:29:03,120
an issue because they say well if you

753
00:29:03,120 --> 00:29:04,620
follow the reference architecture that

754
00:29:04,620 --> 00:29:06,900
we have all the controllers in the area

755
00:29:06,900 --> 00:29:08,700
control Network they're segmented away

756
00:29:08,700 --> 00:29:11,760
from the workstations by firewall ipd

757
00:29:11,760 --> 00:29:13,740
and this firewall ipd is the possibility

758
00:29:13,740 --> 00:29:17,100
to drop a message which is used to put

759
00:29:17,100 --> 00:29:19,080
them in update mode so you know you can

760
00:29:19,080 --> 00:29:20,399
be a

761
00:29:20,399 --> 00:29:23,100
segmented away from that which is fine

762
00:29:23,100 --> 00:29:26,580
90 of the time but sometimes real world

763
00:29:26,580 --> 00:29:28,980
firmware updates have to happen so an

764
00:29:28,980 --> 00:29:31,140
attacker can still lie and wait with a

765
00:29:31,140 --> 00:29:33,179
malicious firmware update until a

766
00:29:33,179 --> 00:29:34,679
legitimate window opens up in the

767
00:29:34,679 --> 00:29:37,200
firewall and then push this malicious

768
00:29:37,200 --> 00:29:39,120
firmware update and it's unfortunate

769
00:29:39,120 --> 00:29:40,860
that this is still considered somewhat

770
00:29:40,860 --> 00:29:43,080
of a non-issue in these these sensitive

771
00:29:43,080 --> 00:29:45,240
environments

772
00:29:45,240 --> 00:29:47,940
so a second point that requires some

773
00:29:47,940 --> 00:29:50,100
Nuance are vulnerabilities related to

774
00:29:50,100 --> 00:29:52,320
unsigned PLC logic

775
00:29:52,320 --> 00:29:54,179
um generally speaking as shown on the

776
00:29:54,179 --> 00:29:56,580
bottom of the slide a PLC logic is

777
00:29:56,580 --> 00:29:58,559
typically compiled to either native

778
00:29:58,559 --> 00:30:00,419
machine code for some sort of like a

779
00:30:00,419 --> 00:30:03,419
microcontroller these days a lot of PPC

780
00:30:03,419 --> 00:30:06,779
and an arm or they're translated to some

781
00:30:06,779 --> 00:30:08,399
sort of a byte code or scripting

782
00:30:08,399 --> 00:30:11,520
language that's then interpreted this is

783
00:30:11,520 --> 00:30:13,919
fed to a logic runtime and that executes

784
00:30:13,919 --> 00:30:16,620
it either directly on the CPU through

785
00:30:16,620 --> 00:30:19,200
code loader runs it on a VM or

786
00:30:19,200 --> 00:30:21,360
dispatches it to a dedicated Asic or

787
00:30:21,360 --> 00:30:25,080
fpga which which handles logic execution

788
00:30:25,080 --> 00:30:27,059
um in the controllers we looked at the

789
00:30:27,059 --> 00:30:29,340
vast majority executes their logic as

790
00:30:29,340 --> 00:30:31,799
native machine code and none of them

791
00:30:31,799 --> 00:30:34,140
signed this logic only a handful do some

792
00:30:34,140 --> 00:30:36,960
sandboxing so if you combine this fact

793
00:30:36,960 --> 00:30:39,059
with the fact that most of these plcs

794
00:30:39,059 --> 00:30:41,340
have real-time operating systems that

795
00:30:41,340 --> 00:30:43,020
lack support on part of the operating

796
00:30:43,020 --> 00:30:45,539
system or the mmu to do any sort of

797
00:30:45,539 --> 00:30:47,820
memory and privilege separation this

798
00:30:47,820 --> 00:30:49,860
leads to situations where usually the

799
00:30:49,860 --> 00:30:52,140
ability to download logic is not just

800
00:30:52,140 --> 00:30:54,840
the ability to manipulate whatever is

801
00:30:54,840 --> 00:30:57,000
going on in the ICS but to get code

802
00:30:57,000 --> 00:30:59,940
execution at a very deep level on these

803
00:30:59,940 --> 00:31:02,340
plcs it's essentially execute my shell

804
00:31:02,340 --> 00:31:04,020
code please

805
00:31:04,020 --> 00:31:05,580
um and this matters since the direct

806
00:31:05,580 --> 00:31:07,679
impact differs quite a bit between these

807
00:31:07,679 --> 00:31:09,419
architectures

808
00:31:09,419 --> 00:31:11,399
to give you an example of that uh

809
00:31:11,399 --> 00:31:13,559
considerably Omron sismac C families

810
00:31:13,559 --> 00:31:15,320
compared to the newer ant families

811
00:31:15,320 --> 00:31:17,580
essentially the difference is that on

812
00:31:17,580 --> 00:31:19,799
the older families they used an Asic for

813
00:31:19,799 --> 00:31:21,600
the execution of the byte code so if I

814
00:31:21,600 --> 00:31:23,159
can modify this bytecode because it's

815
00:31:23,159 --> 00:31:26,039
not signed I can make you know the the

816
00:31:26,039 --> 00:31:28,740
the industrial logic go Haywire but I'm

817
00:31:28,740 --> 00:31:32,100
still limited to uh whatever you know is

818
00:31:32,100 --> 00:31:34,440
being done in on on inherent safety

819
00:31:34,440 --> 00:31:36,779
checks on a device I don't have native

820
00:31:36,779 --> 00:31:38,880
code execution so I can cannot use it as

821
00:31:38,880 --> 00:31:40,799
an attack platform to maybe pivot deeper

822
00:31:40,799 --> 00:31:43,260
into serial networks and stuff like that

823
00:31:43,260 --> 00:31:44,880
that's not the case for the newer

824
00:31:44,880 --> 00:31:46,500
version of the PLC because people are

825
00:31:46,500 --> 00:31:48,179
moving away from these Asics they're

826
00:31:48,179 --> 00:31:49,500
moving away from these fpga

827
00:31:49,500 --> 00:31:51,960
architectures towards more commodity

828
00:31:51,960 --> 00:31:54,600
platforms running on an arm chip with a

829
00:31:54,600 --> 00:31:57,240
more common r2os and some cases even

830
00:31:57,240 --> 00:31:59,940
real-time Linux so that means that the

831
00:31:59,940 --> 00:32:01,380
same vulnerability has a very different

832
00:32:01,380 --> 00:32:03,600
impact between two product lines that

833
00:32:03,600 --> 00:32:05,460
you need to be aware of if you want to

834
00:32:05,460 --> 00:32:09,179
make the adequate compensating controls

835
00:32:09,179 --> 00:32:11,700
one example of of the difference in in

836
00:32:11,700 --> 00:32:13,020
the other direction is the Honeywell

837
00:32:13,020 --> 00:32:15,960
safety manager this is a cell 3 rated

838
00:32:15,960 --> 00:32:17,520
safety controller used in various

839
00:32:17,520 --> 00:32:20,279
critical applications and

840
00:32:20,279 --> 00:32:22,500
the engineering software is called

841
00:32:22,500 --> 00:32:24,360
Safety station and it compiles the

842
00:32:24,360 --> 00:32:26,100
safety instrumented function diagrams

843
00:32:26,100 --> 00:32:28,520
again to unsigned native machine code

844
00:32:28,520 --> 00:32:31,080
this is then wrapped in a project file

845
00:32:31,080 --> 00:32:33,480
and it's downloaded to the PLC to the

846
00:32:33,480 --> 00:32:36,779
PLC to an unauthenticated interface and

847
00:32:36,779 --> 00:32:39,840
after receiving this logic it transmits

848
00:32:39,840 --> 00:32:42,600
it across the back plane to the hard CPU

849
00:32:42,600 --> 00:32:44,640
module which then executes it

850
00:32:44,640 --> 00:32:47,360
essentially unconstrained now

851
00:32:47,360 --> 00:32:50,039
interestingly this issue does not apply

852
00:32:50,039 --> 00:32:52,740
to the newer generation here the S 300

853
00:32:52,740 --> 00:32:54,799
because here the safety instrument

854
00:32:54,799 --> 00:32:57,659
diagrams are compiled to bytecode which

855
00:32:57,659 --> 00:33:00,299
are executed on a VM so maybe it's

856
00:33:00,299 --> 00:33:01,980
possible to break out there but that

857
00:33:01,980 --> 00:33:03,840
takes another VM escape and that makes

858
00:33:03,840 --> 00:33:05,279
it a very different kind of

859
00:33:05,279 --> 00:33:07,880
vulnerability

860
00:33:08,520 --> 00:33:11,039
finally there are some Nuance to be made

861
00:33:11,039 --> 00:33:13,620
regarding to mode switches so what you

862
00:33:13,620 --> 00:33:15,840
typically have on a lot of plcs and

863
00:33:15,840 --> 00:33:17,399
Industrial control devices you can

864
00:33:17,399 --> 00:33:19,200
regulate the mode it is running on so I

865
00:33:19,200 --> 00:33:21,299
can say execute your logic and then I

866
00:33:21,299 --> 00:33:23,100
turn a switch and it set it in run mode

867
00:33:23,100 --> 00:33:24,899
or I can say I want to program it now

868
00:33:24,899 --> 00:33:26,700
and I put it in program mode or idle

869
00:33:26,700 --> 00:33:29,220
mode and these are

870
00:33:29,220 --> 00:33:31,140
safety measures these are not

871
00:33:31,140 --> 00:33:33,000
historically security measures these are

872
00:33:33,000 --> 00:33:34,919
ways to prevent Engineers from doing

873
00:33:34,919 --> 00:33:36,299
something very stupid while they're

874
00:33:36,299 --> 00:33:39,320
working on a plant

875
00:33:39,320 --> 00:33:42,659
but they are possible to use as a very

876
00:33:42,659 --> 00:33:46,080
good security mechanism against unwanted

877
00:33:46,080 --> 00:33:48,000
logic downloads if you have a mode

878
00:33:48,000 --> 00:33:50,700
switch that says I'm in run mode now and

879
00:33:50,700 --> 00:33:52,200
I don't accept downloads then during

880
00:33:52,200 --> 00:33:54,419
operations you're safe from malicious

881
00:33:54,419 --> 00:33:57,299
logic downloads now the pitfalls here is

882
00:33:57,299 --> 00:33:59,580
that not all of these mode switches are

883
00:33:59,580 --> 00:34:01,620
the same you want distinctness you want

884
00:34:01,620 --> 00:34:03,240
a distinct running program mode you

885
00:34:03,240 --> 00:34:04,860
don't want them combined because then

886
00:34:04,860 --> 00:34:06,120
Engineers will leave them in this

887
00:34:06,120 --> 00:34:09,060
combined mode forever you also don't

888
00:34:09,060 --> 00:34:11,219
want virtual switches which are switches

889
00:34:11,219 --> 00:34:13,260
that can be overridden in software so

890
00:34:13,260 --> 00:34:15,060
people set it in Hardware but in the

891
00:34:15,060 --> 00:34:16,379
engineering software you might still be

892
00:34:16,379 --> 00:34:18,659
able to override it

893
00:34:18,659 --> 00:34:20,820
um you also need to be wary of exception

894
00:34:20,820 --> 00:34:22,739
modes so some of them have an exception

895
00:34:22,739 --> 00:34:24,300
mode that say if you can say configure

896
00:34:24,300 --> 00:34:26,820
the PLC in this or that way then it

897
00:34:26,820 --> 00:34:28,859
ignores the mode switch

898
00:34:28,859 --> 00:34:30,300
um and finally

899
00:34:30,300 --> 00:34:31,800
um yeah you need to be wary of what are

900
00:34:31,800 --> 00:34:34,199
what are the defaults and we found that

901
00:34:34,199 --> 00:34:38,580
only a a minority 17 of the devices that

902
00:34:38,580 --> 00:34:40,679
we looked at have actually these full

903
00:34:40,679 --> 00:34:44,099
mode switch type of support

904
00:34:44,099 --> 00:34:46,320
an example of this is the again the

905
00:34:46,320 --> 00:34:48,899
Emerson control wave PLC a firmware

906
00:34:48,899 --> 00:34:51,239
update here are unsigned and this is

907
00:34:51,239 --> 00:34:53,159
troubling given that as I previously

908
00:34:53,159 --> 00:34:55,440
discussed they happen over this BCP

909
00:34:55,440 --> 00:34:57,480
protocol with all the discussed issues

910
00:34:57,480 --> 00:35:00,720
and again even despite this fact Emerson

911
00:35:00,720 --> 00:35:02,400
didn't consider this a vulnerability

912
00:35:02,400 --> 00:35:04,800
either because they said they have a key

913
00:35:04,800 --> 00:35:06,720
switch and it can be set to run mode and

914
00:35:06,720 --> 00:35:08,220
then there's a configuration setting

915
00:35:08,220 --> 00:35:11,339
which can disable any remote changes but

916
00:35:11,339 --> 00:35:13,200
the problem is that the key switch also

917
00:35:13,200 --> 00:35:15,240
has a remote mode which is a combined

918
00:35:15,240 --> 00:35:17,640
run and program mode and knowing

919
00:35:17,640 --> 00:35:19,260
Engineers for practical reasons they're

920
00:35:19,260 --> 00:35:20,880
going to leave it in that and if you

921
00:35:20,880 --> 00:35:22,920
aren't very explicit about that in the

922
00:35:22,920 --> 00:35:25,380
manual that that is going to happen

923
00:35:25,380 --> 00:35:27,359
um and then this this this configuration

924
00:35:27,359 --> 00:35:29,640
setting it's not enabled by default and

925
00:35:29,640 --> 00:35:31,380
if you enable it you can do any remote

926
00:35:31,380 --> 00:35:35,480
engineering anymore so yeah

927
00:35:35,640 --> 00:35:38,520
a final example of why there's a lot of

928
00:35:38,520 --> 00:35:41,400
ifs and buts the mode switches is the

929
00:35:41,400 --> 00:35:43,560
Honeywell safety manager again we just

930
00:35:43,560 --> 00:35:45,540
saw logic downloads are unsigned there

931
00:35:45,540 --> 00:35:47,700
and unauthenticated and they can give an

932
00:35:47,700 --> 00:35:50,099
attack a remote code execution in the

933
00:35:50,099 --> 00:35:52,500
heart of the safety controller luckily

934
00:35:52,500 --> 00:35:54,420
there's quite a few key switches

935
00:35:54,420 --> 00:35:55,859
involved and these are actually an

936
00:35:55,859 --> 00:35:58,020
example of a good design of key switches

937
00:35:58,020 --> 00:36:00,960
the safety manager they before you do a

938
00:36:00,960 --> 00:36:02,940
download you have to put it in idle mode

939
00:36:02,940 --> 00:36:05,700
then you do your downloads then you turn

940
00:36:05,700 --> 00:36:07,619
the key switch and then you have to do a

941
00:36:07,619 --> 00:36:10,619
fault reset on another module so there's

942
00:36:10,619 --> 00:36:12,000
a lot of physical interaction and

943
00:36:12,000 --> 00:36:14,280
physical presence involved that acts as

944
00:36:14,280 --> 00:36:15,839
a mitigating Factor

945
00:36:15,839 --> 00:36:18,720
except when the remote load reset

946
00:36:18,720 --> 00:36:21,000
setting is enabled and this is a setting

947
00:36:21,000 --> 00:36:22,920
that you can enable and then it

948
00:36:22,920 --> 00:36:25,440
essentially ignores these switches

949
00:36:25,440 --> 00:36:28,800
now this can be a legitimate engineering

950
00:36:28,800 --> 00:36:31,380
choice but you need to be able to be

951
00:36:31,380 --> 00:36:33,300
aware of this and you need to document

952
00:36:33,300 --> 00:36:35,280
this in your information security

953
00:36:35,280 --> 00:36:37,020
management system because otherwise you

954
00:36:37,020 --> 00:36:38,820
have a major blind spot if you think

955
00:36:38,820 --> 00:36:40,380
where you're going to be saved by these

956
00:36:40,380 --> 00:36:42,660
these key switches

957
00:36:42,660 --> 00:36:45,660
so with that let's take a quick look at

958
00:36:45,660 --> 00:36:47,220
some of the reverse engineering effort

959
00:36:47,220 --> 00:36:48,900
that went into understanding some of

960
00:36:48,900 --> 00:36:51,240
these protocols and systems analyzed as

961
00:36:51,240 --> 00:36:53,579
part of this research so we can get a

962
00:36:53,579 --> 00:36:55,320
bit of a feeling for the attacker effort

963
00:36:55,320 --> 00:36:56,880
that might be required to replicate

964
00:36:56,880 --> 00:36:59,400
these kind of capabilities

965
00:36:59,400 --> 00:37:02,579
so in terms of scada DCs and Engineering

966
00:37:02,579 --> 00:37:04,079
software

967
00:37:04,079 --> 00:37:06,540
um what we looked at were mostly Windows

968
00:37:06,540 --> 00:37:08,220
software packages that were typically

969
00:37:08,220 --> 00:37:10,320
very huge so multiple gigabytes of code

970
00:37:10,320 --> 00:37:13,320
hundreds of dlls and a lot of nasty code

971
00:37:13,320 --> 00:37:15,619
MFC ATL com

972
00:37:15,619 --> 00:37:19,380
qte libraries on top of it so quite a

973
00:37:19,380 --> 00:37:21,660
bit of reverse engineering involved the

974
00:37:21,660 --> 00:37:23,400
vast majority of it was also written in

975
00:37:23,400 --> 00:37:25,920
C plus plus which you know is sometimes

976
00:37:25,920 --> 00:37:28,680
more of a pain in the ass than actually

977
00:37:28,680 --> 00:37:31,740
obfuscation measures and while the

978
00:37:31,740 --> 00:37:33,300
embedded devices that we looked at

979
00:37:33,300 --> 00:37:35,880
typically resemble you know non-consumer

980
00:37:35,880 --> 00:37:38,220
devices increasingly armpit Linux

981
00:37:38,220 --> 00:37:42,060
something like that there are a lot of

982
00:37:42,060 --> 00:37:44,700
devices that are still power PC Plus VX

983
00:37:44,700 --> 00:37:47,400
works or qnx stuff like that and there

984
00:37:47,400 --> 00:37:49,920
are very specific Regional outliers so

985
00:37:49,920 --> 00:37:52,800
you see in Asia for example a lot of os9

986
00:37:52,800 --> 00:37:56,160
and itron on Super H and I mean if you

987
00:37:56,160 --> 00:37:57,660
don't have all the Ida scripts lying

988
00:37:57,660 --> 00:37:59,040
around for that you need to write a lot

989
00:37:59,040 --> 00:38:02,900
of stuff it comes on top of it

990
00:38:03,420 --> 00:38:05,220
um all in all the systems that we looked

991
00:38:05,220 --> 00:38:07,320
at do represent the selection of typical

992
00:38:07,320 --> 00:38:09,660
non-trivial OT code bases to reverse

993
00:38:09,660 --> 00:38:12,300
engineer regardless we looked at our

994
00:38:12,300 --> 00:38:14,339
numbers and we found that reversing a

995
00:38:14,339 --> 00:38:16,200
single proprietary protocol typically

996
00:38:16,200 --> 00:38:18,599
took anywhere between a day and two man

997
00:38:18,599 --> 00:38:21,119
weeks while reversing a complex

998
00:38:21,119 --> 00:38:23,579
multi-protocol system has taken us in

999
00:38:23,579 --> 00:38:26,040
some cases up to six man months so these

1000
00:38:26,040 --> 00:38:28,380
are the efforts that that come with just

1001
00:38:28,380 --> 00:38:30,900
reverse engineering it up to a fair high

1002
00:38:30,900 --> 00:38:33,000
point of granularity

1003
00:38:33,000 --> 00:38:35,280
in some cases essentially rebuilding

1004
00:38:35,280 --> 00:38:36,980
parsers and Crafters

1005
00:38:36,980 --> 00:38:40,320
while this is quite a bit of effort

1006
00:38:40,320 --> 00:38:42,180
um it is in my opinion within the

1007
00:38:42,180 --> 00:38:44,400
capabilities of a fairly small team with

1008
00:38:44,400 --> 00:38:46,800
the right incentives rather than being

1009
00:38:46,800 --> 00:38:48,540
the sole domain of very large

1010
00:38:48,540 --> 00:38:50,700
organizations it's different if you

1011
00:38:50,700 --> 00:38:52,560
start talking about the follow-up like

1012
00:38:52,560 --> 00:38:54,359
OT payloads and cyber physical impacts

1013
00:38:54,359 --> 00:38:56,099
that's a different ball game but when it

1014
00:38:56,099 --> 00:38:57,900
comes to developing specifically these

1015
00:38:57,900 --> 00:39:00,599
kind of capabilities it doesn't take a

1016
00:39:00,599 --> 00:39:03,859
very huge team to do this

1017
00:39:04,260 --> 00:39:05,700
um and that brings us to the mitigations

1018
00:39:05,700 --> 00:39:07,440
and the conclusions

1019
00:39:07,440 --> 00:39:09,900
in conclusion we've seen that insecure

1020
00:39:09,900 --> 00:39:12,300
by Design issues continue to persist in

1021
00:39:12,300 --> 00:39:14,160
the production install base and critical

1022
00:39:14,160 --> 00:39:16,619
infrastructure everywhere despite more

1023
00:39:16,619 --> 00:39:19,020
than a decade of harning efforts

1024
00:39:19,020 --> 00:39:21,540
um in order to address this we will need

1025
00:39:21,540 --> 00:39:23,700
to get clearer on what's secure by

1026
00:39:23,700 --> 00:39:25,859
Design actually means and it shouldn't

1027
00:39:25,859 --> 00:39:27,780
be just a buzzword that people throw out

1028
00:39:27,780 --> 00:39:28,859
there

1029
00:39:28,859 --> 00:39:31,560
for one many security controls that are

1030
00:39:31,560 --> 00:39:33,420
implemented turn out to be trivially

1031
00:39:33,420 --> 00:39:35,460
broken a first-year bachelor student

1032
00:39:35,460 --> 00:39:37,200
computer science can confine most of

1033
00:39:37,200 --> 00:39:39,660
these issues and that is across the

1034
00:39:39,660 --> 00:39:43,079
board including in certified products so

1035
00:39:43,079 --> 00:39:45,599
something to keep in mind glaring

1036
00:39:45,599 --> 00:39:47,339
vulnerabilities are sometimes still

1037
00:39:47,339 --> 00:39:49,740
dismissed because of advice pointing to

1038
00:39:49,740 --> 00:39:51,900
compensating controls and then it turns

1039
00:39:51,900 --> 00:39:53,820
out that these compensating controls not

1040
00:39:53,820 --> 00:39:56,760
always fully compensate something that

1041
00:39:56,760 --> 00:39:58,320
will also need to be addressed in my

1042
00:39:58,320 --> 00:40:01,339
opinion we see quite a few security

1043
00:40:01,339 --> 00:40:04,980
retrofits of a old Legacy protocol on

1044
00:40:04,980 --> 00:40:06,480
top of a newer protocol and that

1045
00:40:06,480 --> 00:40:07,859
completely misses the point like doing

1046
00:40:07,859 --> 00:40:10,680
IP based access control for UDP

1047
00:40:10,680 --> 00:40:12,960
protocols not knowing how challenge

1048
00:40:12,960 --> 00:40:15,480
response is supposed to work

1049
00:40:15,480 --> 00:40:18,060
um and fixes frequently don't either

1050
00:40:18,060 --> 00:40:20,099
address the root cause or they don't do

1051
00:40:20,099 --> 00:40:22,020
any sort of variant hunting and this is

1052
00:40:22,020 --> 00:40:23,760
this is really where the Jeep wins are

1053
00:40:23,760 --> 00:40:26,099
in my opinion

1054
00:40:26,099 --> 00:40:27,839
um finally like I mentioned earlier

1055
00:40:27,839 --> 00:40:30,060
devices should be secured by default out

1056
00:40:30,060 --> 00:40:32,460
of the box and I'd like to close out

1057
00:40:32,460 --> 00:40:34,140
with a common call to action that's been

1058
00:40:34,140 --> 00:40:35,940
made a gazillion times before but it's

1059
00:40:35,940 --> 00:40:38,579
going to be made gazillion times again

1060
00:40:38,579 --> 00:40:40,320
um first of all device manufacturers

1061
00:40:40,320 --> 00:40:42,599
should really start properly securing

1062
00:40:42,599 --> 00:40:45,540
these devices and these protocols asset

1063
00:40:45,540 --> 00:40:47,700
owners should actively procure for

1064
00:40:47,700 --> 00:40:49,800
secure products and not just based on

1065
00:40:49,800 --> 00:40:52,260
standards compliance but for example

1066
00:40:52,260 --> 00:40:55,079
including device pen tests in their rfps

1067
00:40:55,079 --> 00:40:56,940
when they're building new Greenfield

1068
00:40:56,940 --> 00:41:00,000
product stuff like that and the wider

1069
00:41:00,000 --> 00:41:01,740
security Community should continue to

1070
00:41:01,740 --> 00:41:03,599
ensure that security controls that pop

1071
00:41:03,599 --> 00:41:06,119
up in OT products are actually robust

1072
00:41:06,119 --> 00:41:07,800
and not just some form of potemkin

1073
00:41:07,800 --> 00:41:09,599
security so keep hammering on these

1074
00:41:09,599 --> 00:41:12,180
devices and eventually we we might get

1075
00:41:12,180 --> 00:41:15,660
there and and that's that's it

1076
00:41:15,660 --> 00:41:18,560
thank you

1077
00:41:20,840 --> 00:41:27,129
[Music]

