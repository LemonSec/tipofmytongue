1
00:00:12,019 --> 00:00:14,700
stage is yours right thank you and thank

2
00:00:14,700 --> 00:00:16,740
you for organizing all of these so

3
00:00:16,740 --> 00:00:19,380
that's web Security in 2022 or basically

4
00:00:19,380 --> 00:00:22,680
how you do web security right now

5
00:00:22,680 --> 00:00:26,220
my name is Luca I as as Marco said I run

6
00:00:26,220 --> 00:00:27,960
a company called doy insec I've done a

7
00:00:27,960 --> 00:00:29,640
bunch of different things all in the

8
00:00:29,640 --> 00:00:31,800
upsec realm

9
00:00:31,800 --> 00:00:33,180
um and I actually don't want to bother

10
00:00:33,180 --> 00:00:36,000
you too much on my uh stuff I you know I

11
00:00:36,000 --> 00:00:37,680
do want to say a bit of you know what we

12
00:00:37,680 --> 00:00:39,600
do because this presentation was born

13
00:00:39,600 --> 00:00:41,640
through some of the things that we we do

14
00:00:41,640 --> 00:00:43,680
at doing sex so we're a product security

15
00:00:43,680 --> 00:00:46,200
testing company uh we do Consulting for

16
00:00:46,200 --> 00:00:48,420
the company and fintech and you know by

17
00:00:48,420 --> 00:00:50,760
doing that we find a lot of bugs and

18
00:00:50,760 --> 00:00:52,200
when you find a lot of bugs you then

19
00:00:52,200 --> 00:00:54,120
understand Trends and so hopefully today

20
00:00:54,120 --> 00:00:55,739
I can share with you some of the trends

21
00:00:55,739 --> 00:00:57,360
and new uh techniques and

22
00:00:57,360 --> 00:00:59,100
vulnerabilities

23
00:00:59,100 --> 00:00:59,820
um

24
00:00:59,820 --> 00:01:02,100
but this is not just my work

25
00:01:02,100 --> 00:01:04,440
um so we have an event in the company uh

26
00:01:04,440 --> 00:01:07,020
so we're a full remote company 20 people

27
00:01:07,020 --> 00:01:09,659
um we all are very passionate we like to

28
00:01:09,659 --> 00:01:11,100
share knowledge and learn from each

29
00:01:11,100 --> 00:01:13,320
other and the way that we do that is by

30
00:01:13,320 --> 00:01:15,299
organizing this internal event called

31
00:01:15,299 --> 00:01:18,119
best bug it used to be once a month now

32
00:01:18,119 --> 00:01:20,460
because we are much bigger uh it's a

33
00:01:20,460 --> 00:01:23,100
weekly event where people rotate uh two

34
00:01:23,100 --> 00:01:25,320
people each Thursday they present

35
00:01:25,320 --> 00:01:26,939
quickly some some new vulnerabilities

36
00:01:26,939 --> 00:01:28,860
and techniques they discovered from the

37
00:01:28,860 --> 00:01:30,600
past weeks

38
00:01:30,600 --> 00:01:32,220
um it used to be as I said an internal

39
00:01:32,220 --> 00:01:34,500
uh meeting so we had this disclaimer

40
00:01:34,500 --> 00:01:36,180
what happens in best box stays invest

41
00:01:36,180 --> 00:01:38,520
back but then over time I realized that

42
00:01:38,520 --> 00:01:41,220
actually what I see that my people are

43
00:01:41,220 --> 00:01:43,439
doing is what it is web Security today

44
00:01:43,439 --> 00:01:45,360
and so this presentation is both a

45
00:01:45,360 --> 00:01:47,700
combination of uh you know interestingly

46
00:01:47,700 --> 00:01:49,259
uh you know interesting technical

47
00:01:49,259 --> 00:01:52,079
vulnerabilities but also uh hopefully

48
00:01:52,079 --> 00:01:54,360
like a an insight into the trends in web

49
00:01:54,360 --> 00:01:56,600
security

50
00:01:57,060 --> 00:01:59,040
um so a few disclaimers

51
00:01:59,040 --> 00:02:02,220
um it's mostly web Centric we work

52
00:02:02,220 --> 00:02:04,560
mainly with webtech which doesn't mean

53
00:02:04,560 --> 00:02:06,600
only web application I mean web is

54
00:02:06,600 --> 00:02:08,399
basically everywhere from desktop apps

55
00:02:08,399 --> 00:02:11,459
to Mobile and other stuff but of course

56
00:02:11,459 --> 00:02:13,860
the technology are you know web so we we

57
00:02:13,860 --> 00:02:17,760
talked HTT HTTP because of the industry

58
00:02:17,760 --> 00:02:19,980
we work with uh it's mainly focused on

59
00:02:19,980 --> 00:02:22,800
Tech and fintech which also

60
00:02:22,800 --> 00:02:26,160
um kind of forces us to work uh on uh

61
00:02:26,160 --> 00:02:28,260
what I would consider modern Frameworks

62
00:02:28,260 --> 00:02:29,760
so you're gonna you're not gonna see

63
00:02:29,760 --> 00:02:33,360
bugs on PHP and Java instead a lot of

64
00:02:33,360 --> 00:02:36,480
JavaScript typescript and go

65
00:02:36,480 --> 00:02:38,400
um not all of you know not these bugs

66
00:02:38,400 --> 00:02:40,739
you know not all bugs are mine um so I

67
00:02:40,739 --> 00:02:43,440
will give credits as credits due

68
00:02:43,440 --> 00:02:46,500
um also while we find uh you know

69
00:02:46,500 --> 00:02:48,239
probably several hundreds bugs every

70
00:02:48,239 --> 00:02:51,239
year it's really just a small percentage

71
00:02:51,239 --> 00:02:53,400
um you know they say there are 10 000 CV

72
00:02:53,400 --> 00:02:55,860
every year probably four five ten times

73
00:02:55,860 --> 00:02:59,459
more bugs um so clearly you know you

74
00:02:59,459 --> 00:03:01,260
shouldn't you know not consider it as a

75
00:03:01,260 --> 00:03:04,200
statistically valid uh sample uh but who

76
00:03:04,200 --> 00:03:07,260
cares not that there was Totten East

77
00:03:07,260 --> 00:03:10,800
um and then because of the 40 minutes uh

78
00:03:10,800 --> 00:03:13,200
time slot I decided to drop completed

79
00:03:13,200 --> 00:03:14,700
techniques that are definitely very

80
00:03:14,700 --> 00:03:16,739
modern and definitely widespread and

81
00:03:16,739 --> 00:03:18,659
also very interesting such as server

82
00:03:18,659 --> 00:03:20,280
status Quest forgery HTTP request

83
00:03:20,280 --> 00:03:22,200
smuggling and basically all this stuff

84
00:03:22,200 --> 00:03:25,200
did uh James uh from post-weiger

85
00:03:25,200 --> 00:03:28,200
discovers every year so instead we're

86
00:03:28,200 --> 00:03:30,780
gonna focus on other stuff uh there's a

87
00:03:30,780 --> 00:03:34,140
lot of demo as they get older I'm

88
00:03:34,140 --> 00:03:36,120
getting more Brave so today we'll do all

89
00:03:36,120 --> 00:03:38,099
live demos um let's see how it goes

90
00:03:38,099 --> 00:03:40,980
hopefully demo Gods uh and we start with

91
00:03:40,980 --> 00:03:42,780
what I think is right now my favorite

92
00:03:42,780 --> 00:03:45,780
bug class uh it's around vulnerability

93
00:03:45,780 --> 00:03:47,580
in state machine

94
00:03:47,580 --> 00:03:49,680
so what is a state machine uh it's

95
00:03:49,680 --> 00:03:51,060
basically a computational abstraction

96
00:03:51,060 --> 00:03:53,940
it's a way to describe how a system

97
00:03:53,940 --> 00:03:56,280
works for example so look at the diagram

98
00:03:56,280 --> 00:03:59,580
at the bottom there is a state A1 you

99
00:03:59,580 --> 00:04:01,920
apply an input X and you go to state two

100
00:04:01,920 --> 00:04:05,099
and uh similarly from State one you

101
00:04:05,099 --> 00:04:07,500
apply y you go to state three but you

102
00:04:07,500 --> 00:04:08,940
see for example there is no transition

103
00:04:08,940 --> 00:04:10,620
between two and three

104
00:04:10,620 --> 00:04:12,780
and so

105
00:04:12,780 --> 00:04:15,180
um you know these uh abstraction is

106
00:04:15,180 --> 00:04:18,540
actually implemented and used in many uh

107
00:04:18,540 --> 00:04:21,899
you know business logic uh components of

108
00:04:21,899 --> 00:04:24,660
a lot of things from TCP IP Stacks but

109
00:04:24,660 --> 00:04:27,600
also on more recent things like webrtc

110
00:04:27,600 --> 00:04:30,419
so when you do a zoom call a WhatsApp

111
00:04:30,419 --> 00:04:33,180
call signal call you're basically using

112
00:04:33,180 --> 00:04:35,699
webrtc what is interesting about webrtc

113
00:04:35,699 --> 00:04:39,720
is that the data channel so the uh the

114
00:04:39,720 --> 00:04:41,400
channel where the video and audio is

115
00:04:41,400 --> 00:04:44,520
streamed is this attached disconnected

116
00:04:44,520 --> 00:04:46,919
from the signaling Channel which is what

117
00:04:46,919 --> 00:04:50,520
keeps the states of of the call so

118
00:04:50,520 --> 00:04:53,460
uh the peers so the software that run on

119
00:04:53,460 --> 00:04:56,639
both peers needs to keep track of uh is

120
00:04:56,639 --> 00:04:59,639
the call and coming did the person pick

121
00:04:59,639 --> 00:05:01,320
up the phone and you know and all of

122
00:05:01,320 --> 00:05:03,840
these things so any bugs along the way

123
00:05:03,840 --> 00:05:06,000
might lead to pretty interesting bugs

124
00:05:06,000 --> 00:05:08,160
and Natalie from Project zero father

125
00:05:08,160 --> 00:05:10,440
amazing bug that's the reference it's

126
00:05:10,440 --> 00:05:12,419
way too complex I would have to spend

127
00:05:12,419 --> 00:05:14,940
the entire presentation on that but if

128
00:05:14,940 --> 00:05:16,979
you love State machine bugs that's your

129
00:05:16,979 --> 00:05:20,699
uh bug advisory to read instead we're

130
00:05:20,699 --> 00:05:22,979
going to do something a bit more

131
00:05:22,979 --> 00:05:24,259
um you know

132
00:05:24,259 --> 00:05:27,660
digestible for for today so uh this is a

133
00:05:27,660 --> 00:05:30,539
bug we found in a web application so you

134
00:05:30,539 --> 00:05:32,820
go to an authenticated page typical

135
00:05:32,820 --> 00:05:35,639
login form you give your credentials you

136
00:05:35,639 --> 00:05:38,419
go to an authenticated without 2fa state

137
00:05:38,419 --> 00:05:41,520
where the application will present a web

138
00:05:41,520 --> 00:05:43,620
form where you introduce your two you

139
00:05:43,620 --> 00:05:46,860
know to fa OTP and then if that is

140
00:05:46,860 --> 00:05:48,600
successful you go to an authenticated

141
00:05:48,600 --> 00:05:50,460
State and this was actually implemented

142
00:05:50,460 --> 00:05:52,740
a state machine and so the question from

143
00:05:52,740 --> 00:05:55,080
uh you know security researcher

144
00:05:55,080 --> 00:05:56,699
standpoint is can I go from

145
00:05:56,699 --> 00:05:59,100
authenticated to fully authenticated for

146
00:05:59,100 --> 00:06:01,440
example using a transition that does not

147
00:06:01,440 --> 00:06:04,680
involve credential or the 2fa OTP

148
00:06:04,680 --> 00:06:07,759
so let's go into code code is true so

149
00:06:07,759 --> 00:06:10,620
don't worry I'm gonna guide you so if

150
00:06:10,620 --> 00:06:12,000
you don't understand a lot it's not

151
00:06:12,000 --> 00:06:14,639
important what important is so first

152
00:06:14,639 --> 00:06:17,520
line a weight login is basically logging

153
00:06:17,520 --> 00:06:19,380
in the user you pass the email and

154
00:06:19,380 --> 00:06:20,400
password

155
00:06:20,400 --> 00:06:23,160
assuming that's successful

156
00:06:23,160 --> 00:06:25,199
um down down below where you see if

157
00:06:25,199 --> 00:06:28,020
account will Factor secret basically if

158
00:06:28,020 --> 00:06:30,720
the user has to factor enable you will

159
00:06:30,720 --> 00:06:32,100
then display the application will then

160
00:06:32,100 --> 00:06:36,360
display the you know tutp uh prompt

161
00:06:36,360 --> 00:06:38,520
and then in the same file down below

162
00:06:38,520 --> 00:06:40,919
there is a statement where if to factor

163
00:06:40,919 --> 00:06:43,620
token so if and this comes from a post

164
00:06:43,620 --> 00:06:46,199
request so it's user supplied if there

165
00:06:46,199 --> 00:06:48,419
is a two-factor token passed uh you know

166
00:06:48,419 --> 00:06:51,300
get the user by email verify the two

167
00:06:51,300 --> 00:06:53,220
factor and if successful then you're

168
00:06:53,220 --> 00:06:54,360
authenticated

169
00:06:54,360 --> 00:06:57,120
and you might have already spotted the

170
00:06:57,120 --> 00:06:58,020
bug

171
00:06:58,020 --> 00:07:00,180
um or might have guessed and the problem

172
00:07:00,180 --> 00:07:02,940
is here is that you can get into this

173
00:07:02,940 --> 00:07:04,919
state by just passing a post request

174
00:07:04,919 --> 00:07:07,919
with a two-factor token so

175
00:07:07,919 --> 00:07:09,840
basically we are from authenticated

176
00:07:09,840 --> 00:07:11,880
state to fully authenticated where the

177
00:07:11,880 --> 00:07:13,560
transition the question mark is actually

178
00:07:13,560 --> 00:07:16,259
the 2fa OTP of course has to be the

179
00:07:16,259 --> 00:07:19,800
2faotp of the user but

180
00:07:19,800 --> 00:07:22,380
bugs are always together so there was no

181
00:07:22,380 --> 00:07:23,940
rate limiting so you could basically

182
00:07:23,940 --> 00:07:26,520
brute force a six digit PIN and then log

183
00:07:26,520 --> 00:07:29,160
in and if you think about that it's

184
00:07:29,160 --> 00:07:31,139
actually uh irony of security because

185
00:07:31,139 --> 00:07:32,639
this bug which is an authentic

186
00:07:32,639 --> 00:07:35,639
authentication bypass only affects 2fa

187
00:07:35,639 --> 00:07:38,940
enabled accounts and personally for me

188
00:07:38,940 --> 00:07:41,220
was the kind of the irony of life

189
00:07:41,220 --> 00:07:43,319
um I've done the linguaji formal which

190
00:07:43,319 --> 00:07:44,880
is formal you know grammar language

191
00:07:44,880 --> 00:07:47,280
class at the political for Milan maybe

192
00:07:47,280 --> 00:07:48,660
eight times

193
00:07:48,660 --> 00:07:51,660
um I you know I was ready to drop from

194
00:07:51,660 --> 00:07:53,580
because of this exam and it's actually

195
00:07:53,580 --> 00:07:55,919
the only exam I'm using uh 20 years

196
00:07:55,919 --> 00:07:58,380
later and this book is actually on my

197
00:07:58,380 --> 00:08:00,180
desk right now as you see in the picture

198
00:08:00,180 --> 00:08:04,139
so you should study and you know enjoy

199
00:08:04,139 --> 00:08:07,400
the stuff that you weigh the most

200
00:08:07,680 --> 00:08:10,680
um the second one is my favorite quote

201
00:08:10,680 --> 00:08:13,500
uh also project zero guy

202
00:08:13,500 --> 00:08:15,599
um and the concept is when you're

203
00:08:15,599 --> 00:08:18,780
against the very R Target just think

204
00:08:18,780 --> 00:08:20,520
that if there are enough bugs it doesn't

205
00:08:20,520 --> 00:08:22,800
matter how it's designed uh all the

206
00:08:22,800 --> 00:08:25,740
design constraints can be you know broke

207
00:08:25,740 --> 00:08:29,580
by just uh having enough sufficient bugs

208
00:08:29,580 --> 00:08:31,080
basically

209
00:08:31,080 --> 00:08:34,320
we start with a demo of the exploit

210
00:08:34,320 --> 00:08:36,479
first

211
00:08:36,479 --> 00:08:39,659
so um

212
00:08:39,659 --> 00:08:42,958
because we all like

213
00:08:42,958 --> 00:08:46,560
um so this is an RC in vs code

214
00:08:46,560 --> 00:08:48,560
um

215
00:08:49,080 --> 00:08:50,580
hopefully it works

216
00:08:50,580 --> 00:08:53,220
uh it's loading and then at some point

217
00:08:53,220 --> 00:08:54,839
you should see a

218
00:08:54,839 --> 00:08:58,580
uh what is these things about

219
00:09:07,560 --> 00:09:10,800
so this box starts from a typical cross

220
00:09:10,800 --> 00:09:12,120
scripting

221
00:09:12,120 --> 00:09:15,779
um in 2021 Justin Steven greater sorcher

222
00:09:15,779 --> 00:09:18,000
you should see this GitHub repo has a

223
00:09:18,000 --> 00:09:20,339
lot of nice advisory found these cross

224
00:09:20,339 --> 00:09:22,440
scripting in this file format the

225
00:09:22,440 --> 00:09:23,640
interesting things about this file

226
00:09:23,640 --> 00:09:26,040
format in vs code it's white listed so

227
00:09:26,040 --> 00:09:28,980
you don't have the play to click uh well

228
00:09:28,980 --> 00:09:31,320
sorry click to play a prompt in vs code

229
00:09:31,320 --> 00:09:33,240
which is very interesting from an

230
00:09:33,240 --> 00:09:34,740
attacker standpoint

231
00:09:34,740 --> 00:09:36,720
uh but it's a vanilla crosstalk

232
00:09:36,720 --> 00:09:38,640
scripting right you see here

233
00:09:38,640 --> 00:09:39,839
um and

234
00:09:39,839 --> 00:09:42,600
um he uh in this blog post describe some

235
00:09:42,600 --> 00:09:44,279
of the techniques he tried but didn't

236
00:09:44,279 --> 00:09:46,860
achieve RC uh so we took as a challenge

237
00:09:46,860 --> 00:09:49,440
and that's basically the right to get

238
00:09:49,440 --> 00:09:50,700
there

239
00:09:50,700 --> 00:09:53,100
um to do that uh I need to introduce a

240
00:09:53,100 --> 00:09:55,740
bit of electron stuff uh don't worry if

241
00:09:55,740 --> 00:09:57,360
you don't know much about electron just

242
00:09:57,360 --> 00:09:59,160
think it electron is a framework that

243
00:09:59,160 --> 00:10:00,480
allows you to build

244
00:10:00,480 --> 00:10:04,740
web desktops with web Technologies

245
00:10:04,740 --> 00:10:05,700
um

246
00:10:05,700 --> 00:10:09,740
and any almost any electron Jazz exploit

247
00:10:09,740 --> 00:10:13,440
Works in three stages so you first need

248
00:10:13,440 --> 00:10:15,360
to take control of the Dom that's where

249
00:10:15,360 --> 00:10:17,519
we got with the cross scripting you then

250
00:10:17,519 --> 00:10:20,220
have to bypass isolation in order to uh

251
00:10:20,220 --> 00:10:21,839
basically do more privileged operation

252
00:10:21,839 --> 00:10:24,240
like for example accessing node.js apis

253
00:10:24,240 --> 00:10:26,100
and of course once you have access to

254
00:10:26,100 --> 00:10:28,140
node.js API you basically can write

255
00:10:28,140 --> 00:10:30,720
node.j node.js code which means it's

256
00:10:30,720 --> 00:10:32,760
game over

257
00:10:32,760 --> 00:10:35,279
uh how we do that uh well let's look at

258
00:10:35,279 --> 00:10:37,560
the design and this is a pretty complex

259
00:10:37,560 --> 00:10:40,320
and well designed uh application so you

260
00:10:40,320 --> 00:10:42,360
have an external renderer which is

261
00:10:42,360 --> 00:10:44,279
called browser window

262
00:10:44,279 --> 00:10:46,260
um that's the terminology in an electron

263
00:10:46,260 --> 00:10:48,540
and has node integration on which means

264
00:10:48,540 --> 00:10:50,459
that you can access node Primitives if

265
00:10:50,459 --> 00:10:53,640
you have content inside that

266
00:10:53,640 --> 00:10:56,579
um these uh containers so think about as

267
00:10:56,579 --> 00:10:59,760
a containers web containers has a origin

268
00:10:59,760 --> 00:11:02,459
vs code file which is equivalent to the

269
00:11:02,459 --> 00:11:04,339
file Handler

270
00:11:04,339 --> 00:11:07,920
however there is a some check in the

271
00:11:07,920 --> 00:11:10,260
code to make sure that the file cannot

272
00:11:10,260 --> 00:11:13,740
be outside the program folder so the the

273
00:11:13,740 --> 00:11:15,779
the folder where Visual Studio is

274
00:11:15,779 --> 00:11:17,399
installed

275
00:11:17,399 --> 00:11:21,120
in order to open untrusted content such

276
00:11:21,120 --> 00:11:23,940
as the files that we just dropped it

277
00:11:23,940 --> 00:11:25,860
actually used a combination of iframes

278
00:11:25,860 --> 00:11:29,220
there are in this low privileges Mode

279
00:11:29,220 --> 00:11:32,040
called the escort webview and there is

280
00:11:32,040 --> 00:11:34,200
no load integration

281
00:11:34,200 --> 00:11:35,880
um

282
00:11:35,880 --> 00:11:37,500
all of this is implemented through

283
00:11:37,500 --> 00:11:41,040
iframe with a sandbox

284
00:11:41,040 --> 00:11:43,260
so what is sandbox sandbox is basically

285
00:11:43,260 --> 00:11:45,660
a way to isolate content you use that

286
00:11:45,660 --> 00:11:47,459
when you want to load and Trust the

287
00:11:47,459 --> 00:11:51,480
content uh in in your you know page

288
00:11:51,480 --> 00:11:54,000
um and you can set some attributes

289
00:11:54,000 --> 00:11:55,500
and one of the interesting attribute

290
00:11:55,500 --> 00:11:56,760
that was set here is actually the

291
00:11:56,760 --> 00:11:58,620
alausium origin attributes which

292
00:11:58,620 --> 00:12:00,180
basically makes the communication

293
00:12:00,180 --> 00:12:04,800
possible if the the two containers run

294
00:12:04,800 --> 00:12:06,540
in the same origin

295
00:12:06,540 --> 00:12:10,500
so the area here is that if we have code

296
00:12:10,500 --> 00:12:14,100
in where they access things is and we

297
00:12:14,100 --> 00:12:16,920
can have that container in the same

298
00:12:16,920 --> 00:12:19,560
origin as the vs code file then we can

299
00:12:19,560 --> 00:12:21,779
access uh the you know node integration

300
00:12:21,779 --> 00:12:24,000
Primitives by using something like top

301
00:12:24,000 --> 00:12:25,680
dot require

302
00:12:25,680 --> 00:12:27,899
if that's confusing let's see in

303
00:12:27,899 --> 00:12:30,140
practice

304
00:12:31,140 --> 00:12:34,200
I'm just gonna kill because it's always

305
00:12:34,200 --> 00:12:37,160
better start fresh

306
00:12:38,339 --> 00:12:40,820
so

307
00:12:43,920 --> 00:12:46,820
um this is just the injection

308
00:12:46,820 --> 00:12:49,019
and you see here it's just an image

309
00:12:49,019 --> 00:12:52,820
which is loaded with a

310
00:12:52,920 --> 00:12:54,899
the image we're loading so you can

311
00:12:54,899 --> 00:12:56,940
already see here that we have three

312
00:12:56,940 --> 00:12:59,100
levels so that's actually the vs code

313
00:12:59,100 --> 00:13:02,399
and then the three the three other ones

314
00:13:02,399 --> 00:13:04,519
um

315
00:13:04,620 --> 00:13:06,120
let's see if you can quickly pick the

316
00:13:06,120 --> 00:13:08,820
iframe so you see here the injection

317
00:13:08,820 --> 00:13:13,440
if I go down above here sorry up up here

318
00:13:13,440 --> 00:13:16,200
you should see here the iframe and you

319
00:13:16,200 --> 00:13:18,060
should see here the allow same origin

320
00:13:18,060 --> 00:13:19,740
hopefully it's a

321
00:13:19,740 --> 00:13:22,320
clear enough

322
00:13:22,320 --> 00:13:23,399
um

323
00:13:23,399 --> 00:13:25,440
so let me show you in practice you know

324
00:13:25,440 --> 00:13:27,660
the things I tried to explain before so

325
00:13:27,660 --> 00:13:33,180
uh so here we are inside uh

326
00:13:33,540 --> 00:13:36,139
Trav

327
00:13:36,360 --> 00:13:38,760
we are inside the webview uh if from

328
00:13:38,760 --> 00:13:40,980
here we try to do something like top dot

329
00:13:40,980 --> 00:13:43,440
let's say require

330
00:13:43,440 --> 00:13:47,279
uh we get an error the iframe uh you

331
00:13:47,279 --> 00:13:49,200
know with specific Origins so in this

332
00:13:49,200 --> 00:13:52,139
case uh DVS code webview is blocked from

333
00:13:52,139 --> 00:13:55,279
accessing the top ones

334
00:13:55,800 --> 00:14:00,079
um now if we look at the top one

335
00:14:00,600 --> 00:14:02,459
and we do the web location you see the

336
00:14:02,459 --> 00:14:06,060
vs code one okay so to simulate and try

337
00:14:06,060 --> 00:14:08,220
what I basically told you before is let

338
00:14:08,220 --> 00:14:10,800
go let's go back to the active frame so

339
00:14:10,800 --> 00:14:12,720
that's where the injection is

340
00:14:12,720 --> 00:14:16,220
we do window.location

341
00:14:18,060 --> 00:14:21,120
you see that a refreshold the you know

342
00:14:21,120 --> 00:14:22,620
the image disappear because we just

343
00:14:22,620 --> 00:14:24,540
loaded a random HTML page which is

344
00:14:24,540 --> 00:14:25,920
actually the main container but doesn't

345
00:14:25,920 --> 00:14:29,459
matter and then if we redo now

346
00:14:29,459 --> 00:14:32,579
uh top require and we go to the proper

347
00:14:32,579 --> 00:14:34,440
context

348
00:14:34,440 --> 00:14:36,420
uh you now get a different error you get

349
00:14:36,420 --> 00:14:38,220
an error that you cannot require a

350
00:14:38,220 --> 00:14:40,380
module called a A or whatever it's

351
00:14:40,380 --> 00:14:42,300
called here because obviously this

352
00:14:42,300 --> 00:14:43,920
doesn't exist but it actually you know

353
00:14:43,920 --> 00:14:46,199
the required actually worked

354
00:14:46,199 --> 00:14:48,319
um

355
00:14:49,320 --> 00:14:51,660
all right so let's go back so at this

356
00:14:51,660 --> 00:14:53,880
point should be clear that okay if we

357
00:14:53,880 --> 00:14:55,860
have a file and it's our arbitrary

358
00:14:55,860 --> 00:14:59,279
content we can uh you know do a window

359
00:14:59,279 --> 00:15:02,699
uh location uh override and run that

360
00:15:02,699 --> 00:15:06,120
code but how do we get our code and how

361
00:15:06,120 --> 00:15:09,420
do we you know discover where it is

362
00:15:09,420 --> 00:15:12,060
uh luckily there was another bug also in

363
00:15:12,060 --> 00:15:13,500
vs code so it's kind of an interesting

364
00:15:13,500 --> 00:15:15,120
technique that is still I think

365
00:15:15,120 --> 00:15:16,680
applicable where you can do part

366
00:15:16,680 --> 00:15:18,540
traversal to bypass the vs code file

367
00:15:18,540 --> 00:15:20,579
limitation so we now are at the stage

368
00:15:20,579 --> 00:15:23,459
where we can reference any file uh but

369
00:15:23,459 --> 00:15:25,740
where is this file right it makes sense

370
00:15:25,740 --> 00:15:28,380
that the file is inside the repo because

371
00:15:28,380 --> 00:15:30,839
that's the obvious attack right you have

372
00:15:30,839 --> 00:15:33,180
a malicious repo you clone that one you

373
00:15:33,180 --> 00:15:35,220
drop the file so even the payload could

374
00:15:35,220 --> 00:15:39,300
be in that Repository where it is and it

375
00:15:39,300 --> 00:15:42,420
comes to help another technique uh or

376
00:15:42,420 --> 00:15:43,860
you know rather a function like the web

377
00:15:43,860 --> 00:15:46,440
which is uh listening to both messages

378
00:15:46,440 --> 00:15:47,940
events

379
00:15:47,940 --> 00:15:51,779
uh what that means let's see in practice

380
00:15:51,779 --> 00:15:55,519
and let me actually

381
00:15:56,940 --> 00:15:58,860
see if we have in the history so it's

382
00:15:58,860 --> 00:16:01,680
much faster for me yes okay

383
00:16:01,680 --> 00:16:05,180
yes let me try to

384
00:16:07,079 --> 00:16:09,540
uh yes I was trying to zoom a bit but

385
00:16:09,540 --> 00:16:12,360
the debugger I think started already

386
00:16:12,360 --> 00:16:14,779
so

387
00:16:18,839 --> 00:16:22,079
okay so uh hopefully you can see here um

388
00:16:22,079 --> 00:16:23,699
so this is basically kind of the

389
00:16:23,699 --> 00:16:26,160
skeleton of the final exploit

390
00:16:26,160 --> 00:16:27,540
um it's really not important I'm gonna

391
00:16:27,540 --> 00:16:29,339
go quick very quickly through it I just

392
00:16:29,339 --> 00:16:31,199
want to show you hopefully I we didn't

393
00:16:31,199 --> 00:16:34,199
miss the uh debugger breakpoint

394
00:16:34,199 --> 00:16:35,940
um like the actual point because there

395
00:16:35,940 --> 00:16:38,759
are a couple of other uh you know yeah

396
00:16:38,759 --> 00:16:41,579
breakpoints that I said before so the

397
00:16:41,579 --> 00:16:43,620
first line here is we're setting where

398
00:16:43,620 --> 00:16:45,839
the application is that's the typical

399
00:16:45,839 --> 00:16:49,199
folder for electron apps

400
00:16:49,199 --> 00:16:53,339
we then listen for the on message

401
00:16:53,339 --> 00:16:55,019
um you see at the bottom we're sending

402
00:16:55,019 --> 00:16:57,540
the post message to a do reload it

403
00:16:57,540 --> 00:16:58,740
doesn't matter what it is I mean it's

404
00:16:58,740 --> 00:17:00,959
it's a internal app functionality that

405
00:17:00,959 --> 00:17:03,720
allow you to trigger load the page and

406
00:17:03,720 --> 00:17:05,819
by doing so you're basically reloading

407
00:17:05,819 --> 00:17:07,439
all the content and do you think

408
00:17:07,439 --> 00:17:09,240
interesting things is that one of the

409
00:17:09,240 --> 00:17:11,640
events contains the actual content that

410
00:17:11,640 --> 00:17:13,439
you are rendering and inside HTML

411
00:17:13,439 --> 00:17:17,520
content you have the base href attribute

412
00:17:17,520 --> 00:17:20,760
which contains the actual file path and

413
00:17:20,760 --> 00:17:22,380
so the idea is that we extract that one

414
00:17:22,380 --> 00:17:25,559
uh you see here where did we do leak

415
00:17:25,559 --> 00:17:28,980
location we do the path traversal and

416
00:17:28,980 --> 00:17:30,900
then we wait a bit because timing is

417
00:17:30,900 --> 00:17:32,280
important when you do these things and

418
00:17:32,280 --> 00:17:34,140
then you override the location over here

419
00:17:34,140 --> 00:17:36,360
so let's see if we run the debugger

420
00:17:36,360 --> 00:17:37,559
again

421
00:17:37,559 --> 00:17:41,840
uh I think we did Miss debugger

422
00:17:41,840 --> 00:17:45,379
uh let's see

423
00:17:46,200 --> 00:17:50,419
so let me try one more time

424
00:18:09,600 --> 00:18:11,760
all right

425
00:18:11,760 --> 00:18:13,500
oh no I know why

426
00:18:13,500 --> 00:18:17,160
because we are not in the right context

427
00:18:17,160 --> 00:18:19,380
all right so we see here the debugger is

428
00:18:19,380 --> 00:18:21,179
posed

429
00:18:21,179 --> 00:18:24,179
um if we now open

430
00:18:24,179 --> 00:18:28,980
uh let's see event dot data dot art dot

431
00:18:28,980 --> 00:18:30,299
content

432
00:18:30,299 --> 00:18:34,080
uh we see that's the HTML content

433
00:18:34,080 --> 00:18:35,280
um

434
00:18:35,280 --> 00:18:37,620
okay let's see if you see the first line

435
00:18:37,620 --> 00:18:40,620
base href and you see there is less user

436
00:18:40,620 --> 00:18:43,020
ecl blah blah that's actually the path

437
00:18:43,020 --> 00:18:45,419
so we we're taking the content and

438
00:18:45,419 --> 00:18:47,700
that's what we use to know where the

439
00:18:47,700 --> 00:18:49,860
file is you put all together and that's

440
00:18:49,860 --> 00:18:51,360
basically the expert we saw at the

441
00:18:51,360 --> 00:18:53,479
beginning

442
00:18:55,380 --> 00:18:56,840
foreign

443
00:18:56,840 --> 00:19:02,160
bug is also one of my favorite bug

444
00:19:02,160 --> 00:19:06,240
it's a bug and in a signal desktop and

445
00:19:06,240 --> 00:19:08,400
I'm showing you here the patch which is

446
00:19:08,400 --> 00:19:09,720
very interesting because the patch is

447
00:19:09,720 --> 00:19:12,059
actually a change of one word and the

448
00:19:12,059 --> 00:19:14,220
word is a weight why do you need to wait

449
00:19:14,220 --> 00:19:16,679
always wait when you want to verify

450
00:19:16,679 --> 00:19:18,960
signatures so

451
00:19:18,960 --> 00:19:21,120
um verify signature is a function that

452
00:19:21,120 --> 00:19:23,340
is used to verify software updates

453
00:19:23,340 --> 00:19:26,660
and it's defined as an asynchronous

454
00:19:26,660 --> 00:19:29,400
function so you need to wait for the

455
00:19:29,400 --> 00:19:31,260
promise to return and give you the value

456
00:19:31,260 --> 00:19:34,320
if you don't do that the execution will

457
00:19:34,320 --> 00:19:36,660
continue and that's probably not what

458
00:19:36,660 --> 00:19:38,580
you want when you are supposed to verify

459
00:19:38,580 --> 00:19:41,760
the content of a file

460
00:19:41,760 --> 00:19:42,419
um

461
00:19:42,419 --> 00:19:45,780
so again very simple a means but

462
00:19:45,780 --> 00:19:47,580
obviously very interesting bug from a

463
00:19:47,580 --> 00:19:49,799
technical standpoint and I'm actually

464
00:19:49,799 --> 00:19:51,240
pretty sure there are many bugs out

465
00:19:51,240 --> 00:19:53,280
there just based on this very similar

466
00:19:53,280 --> 00:19:55,639
pattern

467
00:19:55,919 --> 00:19:58,380
uh this is a bug from Mohammed and

468
00:19:58,380 --> 00:19:59,880
Francesco they're actually somewhere

469
00:19:59,880 --> 00:20:02,520
here uh amazing bug because to me it's

470
00:20:02,520 --> 00:20:03,780
actually

471
00:20:03,780 --> 00:20:06,900
um the you know a great example of web

472
00:20:06,900 --> 00:20:08,700
and Cloud combined where you have a web

473
00:20:08,700 --> 00:20:10,620
application that is actually secure or

474
00:20:10,620 --> 00:20:12,600
you know properly implemented you have a

475
00:20:12,600 --> 00:20:14,520
cloud you know Cloud infrastructure it's

476
00:20:14,520 --> 00:20:16,200
properly uh configured so no

477
00:20:16,200 --> 00:20:18,059
misconfiguration you put them together

478
00:20:18,059 --> 00:20:20,100
and you get a bug and it's like how is

479
00:20:20,100 --> 00:20:22,559
that possible well

480
00:20:22,559 --> 00:20:27,000
um AWS credentials so AWS has an SDK

481
00:20:27,000 --> 00:20:28,799
that you use when you want to interact

482
00:20:28,799 --> 00:20:32,100
with the with their cloud services and

483
00:20:32,100 --> 00:20:33,780
to interact obviously you need to

484
00:20:33,780 --> 00:20:36,000
product credentials but has an

485
00:20:36,000 --> 00:20:37,740
interesting Behavior which if you don't

486
00:20:37,740 --> 00:20:40,620
provide credentials it will fall back to

487
00:20:40,620 --> 00:20:43,440
a set of mechanisms to retrieve those

488
00:20:43,440 --> 00:20:45,780
credentials and for example for golang

489
00:20:45,780 --> 00:20:50,820
the order is the one in the slides so

490
00:20:50,820 --> 00:20:52,620
um yeah so that basically that this is

491
00:20:52,620 --> 00:20:55,140
the behavior of the AWS SDK by the way

492
00:20:55,140 --> 00:20:56,580
if you want to know more about this bug

493
00:20:56,580 --> 00:20:58,440
or you don't understand from my two

494
00:20:58,440 --> 00:21:00,360
minutes explanation there is a blog post

495
00:21:00,360 --> 00:21:02,700
out that was released this week all the

496
00:21:02,700 --> 00:21:04,679
details and you can also play with a

497
00:21:04,679 --> 00:21:06,840
demo uh that I will be showcasing right

498
00:21:06,840 --> 00:21:07,860
now

499
00:21:07,860 --> 00:21:09,059
so

500
00:21:09,059 --> 00:21:11,160
imagine you have an app that has

501
00:21:11,160 --> 00:21:12,900
imported from S3

502
00:21:12,900 --> 00:21:14,880
it makes sense to have a code like this

503
00:21:14,880 --> 00:21:18,600
one where if uh there is some error you

504
00:21:18,600 --> 00:21:21,120
actually clean up the credentials you

505
00:21:21,120 --> 00:21:23,039
try to get stuff out

506
00:21:23,039 --> 00:21:25,200
however because of the behavior I just

507
00:21:25,200 --> 00:21:28,380
explained if you do that it the SDK will

508
00:21:28,380 --> 00:21:30,179
actually you know and the implementation

509
00:21:30,179 --> 00:21:32,100
that you have on the server side will go

510
00:21:32,100 --> 00:21:33,480
back to the chain

511
00:21:33,480 --> 00:21:36,059
and it will go you know one two three

512
00:21:36,059 --> 00:21:38,220
four and four is actually the rules that

513
00:21:38,220 --> 00:21:39,840
you have on the machine so if the

514
00:21:39,840 --> 00:21:42,480
machine that is provisioned as uh you

515
00:21:42,480 --> 00:21:45,600
know a much higher privilege role then

516
00:21:45,600 --> 00:21:47,760
you can leverage that

517
00:21:47,760 --> 00:21:49,799
uh

518
00:21:49,799 --> 00:21:53,100
so let's do let me do a check time yes

519
00:21:53,100 --> 00:21:55,020
let's see

520
00:21:55,020 --> 00:21:59,600
uh let's let's try to do a quick demo

521
00:22:05,340 --> 00:22:07,020
all right so

522
00:22:07,020 --> 00:22:12,900
uh this is the import from S3 thing uh

523
00:22:14,580 --> 00:22:16,380
let me take my notes so I don't mess

524
00:22:16,380 --> 00:22:18,600
with the

525
00:22:18,600 --> 00:22:20,640
let's use the same vulnerable vs code to

526
00:22:20,640 --> 00:22:22,860
check stuff so

527
00:22:22,860 --> 00:22:24,979
um

528
00:22:26,940 --> 00:22:29,700
so uh we let's try to do the normal case

529
00:22:29,700 --> 00:22:31,440
so the normal case obviously this

530
00:22:31,440 --> 00:22:33,600
application is you set your own bucket

531
00:22:33,600 --> 00:22:37,860
uh you set your access key uh you set

532
00:22:37,860 --> 00:22:40,280
your

533
00:22:43,640 --> 00:22:46,559
uh yes and we will revoke those keys

534
00:22:46,559 --> 00:22:48,539
just after the talk so if you want to

535
00:22:48,539 --> 00:22:50,940
run crypto Miners and stuff you have

536
00:22:50,940 --> 00:22:54,140
like 50 more minutes

537
00:22:54,360 --> 00:22:56,418
um

538
00:22:56,760 --> 00:22:58,980
so we set these things we do the data

539
00:22:58,980 --> 00:23:00,960
import internal Network server error

540
00:23:00,960 --> 00:23:05,419
fantastic uh let me see my connection

541
00:23:06,659 --> 00:23:09,659
exactly

542
00:23:18,179 --> 00:23:19,980
okay

543
00:23:19,980 --> 00:23:23,720
um of course something had to break

544
00:23:26,520 --> 00:23:30,720
actually it did work uh I think

545
00:23:30,720 --> 00:23:32,580
yes it did work because it actually

546
00:23:32,580 --> 00:23:34,559
loaded stuff

547
00:23:34,559 --> 00:23:36,678
um

548
00:23:37,260 --> 00:23:39,179
now

549
00:23:39,179 --> 00:23:40,919
um

550
00:23:40,919 --> 00:23:42,299
what happens sometimes in web

551
00:23:42,299 --> 00:23:43,860
application is that a lot of the

552
00:23:43,860 --> 00:23:45,419
references you have around or for

553
00:23:45,419 --> 00:23:47,640
example in the HTTP request you will

554
00:23:47,640 --> 00:23:50,700
have uh references from the app itself

555
00:23:50,700 --> 00:23:52,799
so if you look at for example where this

556
00:23:52,799 --> 00:23:56,418
image is hosted

557
00:23:57,000 --> 00:24:00,260
um well sorry

558
00:24:01,740 --> 00:24:04,500
copy image address

559
00:24:04,500 --> 00:24:06,360
you see that it's actually on this data

560
00:24:06,360 --> 00:24:07,980
internal private

561
00:24:07,980 --> 00:24:09,659
um that is not reachable so if you try

562
00:24:09,659 --> 00:24:12,419
to access actually this file uh which I

563
00:24:12,419 --> 00:24:14,580
know it exists on this repo

564
00:24:14,580 --> 00:24:17,400
uh it failed

565
00:24:17,400 --> 00:24:23,840
uh but if we do if we take the S3 bucket

566
00:24:24,679 --> 00:24:27,299
we don't provide credentials so that we

567
00:24:27,299 --> 00:24:29,659
want to uh simulate that

568
00:24:29,659 --> 00:24:32,340
uh and we import

569
00:24:32,340 --> 00:24:35,700
we see that the data import correctly

570
00:24:35,700 --> 00:24:37,919
and you can see now here that we can

571
00:24:37,919 --> 00:24:39,360
actually access the key

572
00:24:39,360 --> 00:24:42,419
so this is a way to basically access the

573
00:24:42,419 --> 00:24:44,700
internal S3 buckets

574
00:24:44,700 --> 00:24:46,679
um assuming obviously you can find

575
00:24:46,679 --> 00:24:48,900
credential in one of the items from the

576
00:24:48,900 --> 00:24:51,080
chain

577
00:24:55,980 --> 00:24:58,740
uh prototype pollution I know it's very

578
00:24:58,740 --> 00:25:00,780
popular it's been you know discussed a

579
00:25:00,780 --> 00:25:02,520
bit already but I think it's still

580
00:25:02,520 --> 00:25:04,620
underestimated as a you know new class

581
00:25:04,620 --> 00:25:07,020
of vulnerabilities uh what is prototype

582
00:25:07,020 --> 00:25:08,700
pollution

583
00:25:08,700 --> 00:25:11,100
uh just think about this example that's

584
00:25:11,100 --> 00:25:13,380
all you need to know you define an

585
00:25:13,380 --> 00:25:15,659
object in JavaScript with an attribute a

586
00:25:15,659 --> 00:25:17,820
name if you do a two string you would

587
00:25:17,820 --> 00:25:19,860
get object object right because you are

588
00:25:19,860 --> 00:25:21,419
trying to do a two string on an object

589
00:25:21,419 --> 00:25:23,640
but then you can override a two string

590
00:25:23,640 --> 00:25:26,400
by doing an alert so if you repeat the

591
00:25:26,400 --> 00:25:28,140
same code you haven't changed the code

592
00:25:28,140 --> 00:25:30,059
it will behave differently it will

593
00:25:30,059 --> 00:25:32,279
prompt an alert

594
00:25:32,279 --> 00:25:36,659
uh two of my folks Norbert and Victor

595
00:25:36,659 --> 00:25:39,260
found a regression bug in a very popular

596
00:25:39,260 --> 00:25:42,179
orm library for JavaScript typescript

597
00:25:42,179 --> 00:25:44,159
this is what you would normally use to

598
00:25:44,159 --> 00:25:47,460
build secure SQL query and you know deal

599
00:25:47,460 --> 00:25:50,159
with databases

600
00:25:50,159 --> 00:25:53,039
um in this Library there is a part where

601
00:25:53,039 --> 00:25:56,400
it uses a deep object assign uh it's

602
00:25:56,400 --> 00:25:59,279
basically a way to merge objects

603
00:25:59,279 --> 00:26:01,980
again let's see code

604
00:26:01,980 --> 00:26:03,900
code is

605
00:26:03,900 --> 00:26:06,919
truth so

606
00:26:12,659 --> 00:26:15,960
so this is literally a copy of the code

607
00:26:15,960 --> 00:26:17,279
of the library which is funny because

608
00:26:17,279 --> 00:26:20,299
it's a copy of stack Overflow why not

609
00:26:20,299 --> 00:26:25,200
and there is this merge deep function it

610
00:26:25,200 --> 00:26:26,760
it does a bunch of things but basically

611
00:26:26,760 --> 00:26:28,080
it's combining objects so the

612
00:26:28,080 --> 00:26:29,640
interesting things you want to know is

613
00:26:29,640 --> 00:26:32,220
Line 39 and 40 you basically create an

614
00:26:32,220 --> 00:26:33,840
object a

615
00:26:33,840 --> 00:26:36,059
uh which is an empty object then you

616
00:26:36,059 --> 00:26:38,400
create an object B using Json part Json

617
00:26:38,400 --> 00:26:40,559
parse takes Json formats and creates a

618
00:26:40,559 --> 00:26:43,500
JavaScript object you do merge deep A

619
00:26:43,500 --> 00:26:45,120
and B so that's the vulnerable function

620
00:26:45,120 --> 00:26:48,240
and then if you do uh you know the if

621
00:26:48,240 --> 00:26:49,799
basically if you create a new object and

622
00:26:49,799 --> 00:26:51,000
you check for that attribute that

623
00:26:51,000 --> 00:26:53,039
attribute is there

624
00:26:53,039 --> 00:26:53,880
um

625
00:26:53,880 --> 00:26:58,039
so again very quickly let's try to

626
00:26:59,159 --> 00:27:01,740
so if we run this one you see Pawn true

627
00:27:01,740 --> 00:27:04,200
right we've been able to overwrite now

628
00:27:04,200 --> 00:27:06,720
what is interesting here is that this

629
00:27:06,720 --> 00:27:10,620
function was used well is used inside

630
00:27:10,620 --> 00:27:14,820
um a a function that is used when you uh

631
00:27:14,820 --> 00:27:17,039
do when you save data inside the

632
00:27:17,039 --> 00:27:18,419
database

633
00:27:18,419 --> 00:27:19,860
so

634
00:27:19,860 --> 00:27:21,360
um let me actually first show you the

635
00:27:21,360 --> 00:27:23,100
code and then we can try and hopefully

636
00:27:23,100 --> 00:27:26,640
all the MySQL and stuff things that uh

637
00:27:26,640 --> 00:27:29,520
made me not sleep last night it actually

638
00:27:29,520 --> 00:27:31,440
is working

639
00:27:31,440 --> 00:27:33,559
um

640
00:27:35,520 --> 00:27:37,679
first I need to find it so okay so

641
00:27:37,679 --> 00:27:40,700
that's the SQL I

642
00:27:42,720 --> 00:27:46,200
uh uh no sorry that's not the secret I

643
00:27:46,200 --> 00:27:47,640
mean that's a sqli but it's JavaScript

644
00:27:47,640 --> 00:27:49,799
we like typescript right so we want

645
00:27:49,799 --> 00:27:52,080
typescript

646
00:27:52,080 --> 00:27:54,120
Okay so

647
00:27:54,120 --> 00:27:57,539
uh the save function uh line nine is

648
00:27:57,539 --> 00:28:00,600
where it's using the Deep merge

649
00:28:00,600 --> 00:28:02,760
um so the idea is that we create an

650
00:28:02,760 --> 00:28:05,400
object we save that object using the

651
00:28:05,400 --> 00:28:07,260
vulnerable function so because we saw

652
00:28:07,260 --> 00:28:08,820
how the function is implemented how it

653
00:28:08,820 --> 00:28:11,340
behaves it should pollute

654
00:28:11,340 --> 00:28:14,659
and then we do a find query line 13

655
00:28:14,659 --> 00:28:17,340
where we're trying to find in this case

656
00:28:17,340 --> 00:28:21,960
all the categories of host okay so

657
00:28:21,960 --> 00:28:23,220
um

658
00:28:23,220 --> 00:28:25,140
let me first run it without the

659
00:28:25,140 --> 00:28:26,039
pollution

660
00:28:26,039 --> 00:28:29,700
and then uh uh and then we can uh we can

661
00:28:29,700 --> 00:28:32,460
uh do the pollution so

662
00:28:32,460 --> 00:28:33,720
uh

663
00:28:33,720 --> 00:28:36,559
uh how do we do that

664
00:28:38,880 --> 00:28:43,039
uh so yeah let's do it this way

665
00:28:44,039 --> 00:28:45,840
um I will explain why it's in the try

666
00:28:45,840 --> 00:28:47,760
and catch stuff but uh let's see first

667
00:28:47,760 --> 00:28:50,419
if it works

668
00:28:51,960 --> 00:28:55,140
so here we're just executing uh the SQL

669
00:28:55,140 --> 00:28:58,440
uh file

670
00:28:58,440 --> 00:29:01,559
and it's connecting to the database we

671
00:29:01,559 --> 00:29:04,799
are just doing a find for all the post

672
00:29:04,799 --> 00:29:06,720
uh oh sorry all the all the categories

673
00:29:06,720 --> 00:29:09,179
so we run this one

674
00:29:09,179 --> 00:29:10,919
and we see that there are two categories

675
00:29:10,919 --> 00:29:14,039
typescript and programming

676
00:29:14,039 --> 00:29:16,260
now I don't touch uh you know I'm not

677
00:29:16,260 --> 00:29:17,820
doing anything else you know I'm just

678
00:29:17,820 --> 00:29:20,700
editing this thing so what we do is we

679
00:29:20,700 --> 00:29:23,520
do the pollution

680
00:29:23,520 --> 00:29:24,539
um

681
00:29:24,539 --> 00:29:27,899
we save right the Deep the merge deep is

682
00:29:27,899 --> 00:29:30,000
inside the save function and then

683
00:29:30,000 --> 00:29:34,020
because we are saving an object it will

684
00:29:34,020 --> 00:29:38,279
uh trigger an error it will fail and so

685
00:29:38,279 --> 00:29:39,779
um you know it will actually terminate

686
00:29:39,779 --> 00:29:41,640
but I want to show you everything so I'm

687
00:29:41,640 --> 00:29:43,799
putting this stuff inside a catch error

688
00:29:43,799 --> 00:29:45,600
the in a normal scenario what you would

689
00:29:45,600 --> 00:29:47,460
do is just do another request to the web

690
00:29:47,460 --> 00:29:49,980
server or just do another query

691
00:29:49,980 --> 00:29:52,380
um and so now we do the same find query

692
00:29:52,380 --> 00:29:56,820
so this same select you know star from

693
00:29:56,820 --> 00:30:00,899
category but this time we polluted with

694
00:30:00,899 --> 00:30:03,779
the where name equal programming which

695
00:30:03,779 --> 00:30:05,340
is here

696
00:30:05,340 --> 00:30:07,320
um so let's see if it works and if it

697
00:30:07,320 --> 00:30:11,039
works then I can explain a bit more

698
00:30:11,039 --> 00:30:13,200
no so that didn't work but because I

699
00:30:13,200 --> 00:30:16,039
didn't save I think

700
00:30:16,799 --> 00:30:19,620
yeah and you see here it's only printing

701
00:30:19,620 --> 00:30:21,899
out the programming because we made the

702
00:30:21,899 --> 00:30:23,520
select statement if we would change that

703
00:30:23,520 --> 00:30:25,200
one or we'll do any other injection that

704
00:30:25,200 --> 00:30:26,700
would work

705
00:30:26,700 --> 00:30:28,260
um and obviously this is not something

706
00:30:28,260 --> 00:30:30,120
you would expect in a library that is

707
00:30:30,120 --> 00:30:32,760
supposed to build a properly correct SQL

708
00:30:32,760 --> 00:30:34,559
queries and it's an interesting things

709
00:30:34,559 --> 00:30:37,080
where while SQL injection are you know

710
00:30:37,080 --> 00:30:40,260
dead in most modern application you know

711
00:30:40,260 --> 00:30:41,399
you can still leverage interesting

712
00:30:41,399 --> 00:30:43,260
vulability like this one to then trigger

713
00:30:43,260 --> 00:30:45,179
uh traditional vulnerabilities such as

714
00:30:45,179 --> 00:30:47,640
SQL injection

715
00:30:47,640 --> 00:30:50,360
foreign

716
00:30:51,860 --> 00:30:54,840
and hopefully then we go into the trends

717
00:30:54,840 --> 00:30:57,840
is uh parsing parsing parsing

718
00:30:57,840 --> 00:31:01,260
this is the code of a web application on

719
00:31:01,260 --> 00:31:03,899
the back end that attempts to uh

720
00:31:03,899 --> 00:31:07,860
validate URLs to prevent open redirect

721
00:31:07,860 --> 00:31:09,960
despite the name which is I took you

722
00:31:09,960 --> 00:31:11,279
know this is the original name but it's

723
00:31:11,279 --> 00:31:13,140
incorrect it's not sanitizing it's just

724
00:31:13,140 --> 00:31:14,419
validating

725
00:31:14,419 --> 00:31:18,360
it basically checks uh if the

726
00:31:18,360 --> 00:31:20,820
you know the URL that is provided after

727
00:31:20,820 --> 00:31:23,580
being parsed doesn't basically it's not

728
00:31:23,580 --> 00:31:26,580
https and it's not appsecureapp.com it

729
00:31:26,580 --> 00:31:27,779
will return

730
00:31:27,779 --> 00:31:29,520
um and you know otherwise we'll return

731
00:31:29,520 --> 00:31:31,980
you know we're returning like empty

732
00:31:31,980 --> 00:31:34,740
otherwise we'll return the actual URL uh

733
00:31:34,740 --> 00:31:36,659
the URL is then used it in a 302

734
00:31:36,659 --> 00:31:39,240
redirect which is then processed by the

735
00:31:39,240 --> 00:31:42,659
browser to do the redirection

736
00:31:42,659 --> 00:31:43,919
but

737
00:31:43,919 --> 00:31:46,500
one parsing is done on the back end and

738
00:31:46,500 --> 00:31:48,840
one parsing is done on the front end in

739
00:31:48,840 --> 00:31:52,140
this case in the browser and URL parse

740
00:31:52,140 --> 00:31:53,399
actually behaves differently because

741
00:31:53,399 --> 00:31:54,120
there are actually different

742
00:31:54,120 --> 00:31:56,760
implementation so if you

743
00:31:56,760 --> 00:31:59,179
um you know if you see the node.js side

744
00:31:59,179 --> 00:32:01,980
and you try to parse this particular URL

745
00:32:01,980 --> 00:32:04,679
with its unical character you see that

746
00:32:04,679 --> 00:32:06,320
it resolved to a host

747
00:32:06,320 --> 00:32:08,220
app.secureapp.com which is in a loud

748
00:32:08,220 --> 00:32:10,380
host but if you do the same on the

749
00:32:10,380 --> 00:32:12,299
browser which is at the end what is

750
00:32:12,299 --> 00:32:14,399
actually doing the redirection uh you

751
00:32:14,399 --> 00:32:15,960
see that it actually will already react

752
00:32:15,960 --> 00:32:17,760
to a completely different host that

753
00:32:17,760 --> 00:32:20,039
contains a domain under the track

754
00:32:20,039 --> 00:32:22,980
attacker controlled so this is just an

755
00:32:22,980 --> 00:32:26,220
example I think sweet example of parsing

756
00:32:26,220 --> 00:32:28,559
and you know parsing bugs are great so

757
00:32:28,559 --> 00:32:31,380
you should go out and find parsing bugs

758
00:32:31,380 --> 00:32:32,279
um

759
00:32:32,279 --> 00:32:34,919
so let me go into conclusion and if you

760
00:32:34,919 --> 00:32:38,279
do uh what we do uh some tips and tricks

761
00:32:38,279 --> 00:32:40,380
uh first of all

762
00:32:40,380 --> 00:32:43,200
um finally we are no more second class

763
00:32:43,200 --> 00:32:45,299
citizens uh you can do cool stuff with

764
00:32:45,299 --> 00:32:48,720
web and not spending your day on Ida or

765
00:32:48,720 --> 00:32:50,880
you know other debuggers which is

766
00:32:50,880 --> 00:32:52,620
amazing

767
00:32:52,620 --> 00:32:54,799
um

768
00:32:55,140 --> 00:32:57,779
there are a few Trends uh and good

769
00:32:57,779 --> 00:32:59,940
things good news and bad news

770
00:32:59,940 --> 00:33:02,100
um in both sense so

771
00:33:02,100 --> 00:33:04,140
I think we got to the point where we

772
00:33:04,140 --> 00:33:06,539
actually found a way to kill some bug

773
00:33:06,539 --> 00:33:07,980
classes

774
00:33:07,980 --> 00:33:09,600
um and unfortunately it's not through

775
00:33:09,600 --> 00:33:12,120
education as a you know not that you

776
00:33:12,120 --> 00:33:13,740
know education is not important but it's

777
00:33:13,740 --> 00:33:15,480
not really how we're killing class bugs

778
00:33:15,480 --> 00:33:18,120
bugs of you know classic bugs

779
00:33:18,120 --> 00:33:19,919
um the way we do is through better

780
00:33:19,919 --> 00:33:22,260
standards uh browsers uh security

781
00:33:22,260 --> 00:33:24,059
mechanisms and other things that are

782
00:33:24,059 --> 00:33:26,880
implemented by the companies uh to make

783
00:33:26,880 --> 00:33:28,919
more difficult to introduce bugs or

784
00:33:28,919 --> 00:33:31,860
mitigate those classes so crosstalkers

785
00:33:31,860 --> 00:33:34,019
forger is dead because of same side

786
00:33:34,019 --> 00:33:35,880
cookies and because of most of

787
00:33:35,880 --> 00:33:38,399
Frameworks nowadays using authentication

788
00:33:38,399 --> 00:33:41,760
based through others instead of cookies

789
00:33:41,760 --> 00:33:43,080
um

790
00:33:43,080 --> 00:33:45,960
obviously you know same side cookie is a

791
00:33:45,960 --> 00:33:47,220
relatively new technology but all

792
00:33:47,220 --> 00:33:49,320
browsers are implementing it so it you

793
00:33:49,320 --> 00:33:51,059
know it's going to die

794
00:33:51,059 --> 00:33:52,080
um

795
00:33:52,080 --> 00:33:54,480
then uh traditional exercise is also

796
00:33:54,480 --> 00:33:56,700
dying because of react and angular

797
00:33:56,700 --> 00:33:58,440
um if you have ever done any security

798
00:33:58,440 --> 00:34:00,480
audience on react apps you basically

799
00:34:00,480 --> 00:34:02,640
have to grab for like six things and

800
00:34:02,640 --> 00:34:04,200
once you've done that there is no way to

801
00:34:04,200 --> 00:34:06,179
do xss otherwise you found a bug in

802
00:34:06,179 --> 00:34:09,119
react so again better Frameworks are

803
00:34:09,119 --> 00:34:11,040
helping there

804
00:34:11,040 --> 00:34:13,020
um injection bugs are getting rare for

805
00:34:13,020 --> 00:34:15,060
the same reason so all in all better

806
00:34:15,060 --> 00:34:17,040
Frameworks and a lot more investment

807
00:34:17,040 --> 00:34:19,679
particularly around browser vendors and

808
00:34:19,679 --> 00:34:21,239
the companies

809
00:34:21,239 --> 00:34:24,300
uh but don't worry you will you can be a

810
00:34:24,300 --> 00:34:26,399
pen tester for the next 50 years uh I

811
00:34:26,399 --> 00:34:28,080
will definitely retire by why you know

812
00:34:28,080 --> 00:34:30,418
the time we solve all the problems

813
00:34:30,418 --> 00:34:32,639
um and you know there are a lot more new

814
00:34:32,639 --> 00:34:34,139
classes vulnerabilities

815
00:34:34,139 --> 00:34:35,339
um and I think the most interesting

816
00:34:35,339 --> 00:34:37,859
things here is it's now time to find a

817
00:34:37,859 --> 00:34:40,139
lot more bugs in order to do uh more

818
00:34:40,139 --> 00:34:42,359
interesting attacks so it's getting a

819
00:34:42,359 --> 00:34:44,280
bit more complicated but honestly the

820
00:34:44,280 --> 00:34:46,500
results are a lot more published online

821
00:34:46,500 --> 00:34:49,500
uh with all the bug Bounty movement so

822
00:34:49,500 --> 00:34:51,599
uh I think it's uh we're in a good state

823
00:34:51,599 --> 00:34:54,919
for jobs ability

824
00:34:55,800 --> 00:34:58,440
um some tips for Auditors

825
00:34:58,440 --> 00:34:59,820
um

826
00:34:59,820 --> 00:35:03,000
don't immediately jump into testing like

827
00:35:03,000 --> 00:35:05,280
sometimes read the manual which works on

828
00:35:05,280 --> 00:35:07,080
both sides like Defender and and

829
00:35:07,080 --> 00:35:09,000
attackers but really you can find bugs

830
00:35:09,000 --> 00:35:12,000
before you even open your burp Suite

831
00:35:12,000 --> 00:35:13,380
um there are a lot of new things out

832
00:35:13,380 --> 00:35:14,820
there like I can still learning after

833
00:35:14,820 --> 00:35:18,119
the 20 years like and that's great like

834
00:35:18,119 --> 00:35:19,619
at the beginning when I started I was

835
00:35:19,619 --> 00:35:22,140
overwhelmed by the fact that I knew I

836
00:35:22,140 --> 00:35:23,700
had to learn so much and now actually

837
00:35:23,700 --> 00:35:25,560
the more I know I need to learn the more

838
00:35:25,560 --> 00:35:28,079
I'm excited that I can never stop

839
00:35:28,079 --> 00:35:29,820
um

840
00:35:29,820 --> 00:35:32,400
very interesting things is uh which is a

841
00:35:32,400 --> 00:35:36,420
tip I usually give to my folks is uh if

842
00:35:36,420 --> 00:35:39,240
you find a bug or you have um like you

843
00:35:39,240 --> 00:35:40,920
know there is a bug look for the same

844
00:35:40,920 --> 00:35:43,020
bug in different places

845
00:35:43,020 --> 00:35:46,200
or look for different bugs in the same

846
00:35:46,200 --> 00:35:47,940
file

847
00:35:47,940 --> 00:35:50,220
and I will tell you story but in the

848
00:35:50,220 --> 00:35:51,240
next slide

849
00:35:51,240 --> 00:35:53,040
of course you know look where are

850
00:35:53,040 --> 00:35:54,780
complex things where there the system

851
00:35:54,780 --> 00:35:56,880
are interconnected like the cloud and

852
00:35:56,880 --> 00:35:59,280
the web app and we are basically parsing

853
00:35:59,280 --> 00:36:02,099
and a mismatch prone functionalities

854
00:36:02,099 --> 00:36:04,440
so the complex stuff this is where

855
00:36:04,440 --> 00:36:06,599
people makes mistake

856
00:36:06,599 --> 00:36:08,520
if you're a Defender

857
00:36:08,520 --> 00:36:09,420
um you know there are a bunch of things

858
00:36:09,420 --> 00:36:12,119
you can do they're listed here

859
00:36:12,119 --> 00:36:14,280
um you know this person then story here

860
00:36:14,280 --> 00:36:15,420
is

861
00:36:15,420 --> 00:36:18,119
um I attended a Facebook conference

862
00:36:18,119 --> 00:36:18,839
um

863
00:36:18,839 --> 00:36:21,060
which I guess the video is public

864
00:36:21,060 --> 00:36:22,980
um and one of the person that was

865
00:36:22,980 --> 00:36:25,740
responsible for the their bad Bounty uh

866
00:36:25,740 --> 00:36:28,200
was telling a story where they started

867
00:36:28,200 --> 00:36:30,060
receiving a lot of reports on certain

868
00:36:30,060 --> 00:36:32,460
files that affected certain files of the

869
00:36:32,460 --> 00:36:35,099
platform and it turned out was uh the

870
00:36:35,099 --> 00:36:37,079
same intern pushing code to production

871
00:36:37,079 --> 00:36:39,480
that was you know didn't know a lot of

872
00:36:39,480 --> 00:36:42,119
secure coding practices and so uh

873
00:36:42,119 --> 00:36:43,680
basically created a lot of bugs around

874
00:36:43,680 --> 00:36:45,000
so

875
00:36:45,000 --> 00:36:47,460
um and this is where the idea of you

876
00:36:47,460 --> 00:36:49,140
know look for different bugs in the same

877
00:36:49,140 --> 00:36:51,119
file started because someone is

878
00:36:51,119 --> 00:36:53,460
implementing a functionality and it's

879
00:36:53,460 --> 00:36:55,859
you know a one-man business uh you know

880
00:36:55,859 --> 00:36:59,220
then there might be more bugs there

881
00:36:59,220 --> 00:37:01,500
um or this person is working across

882
00:37:01,500 --> 00:37:04,380
multiple uh you know features then there

883
00:37:04,380 --> 00:37:07,320
might be uh bugs that are sparse and of

884
00:37:07,320 --> 00:37:09,480
course this happens for multiple reasons

885
00:37:09,480 --> 00:37:12,000
uh but it's uh yeah it's it's funny I

886
00:37:12,000 --> 00:37:13,020
always think that it's an intern

887
00:37:13,020 --> 00:37:15,599
creating problems uh but you should

888
00:37:15,599 --> 00:37:16,859
still do internship they're great to

889
00:37:16,859 --> 00:37:17,579
learn

890
00:37:17,579 --> 00:37:19,020
um

891
00:37:19,020 --> 00:37:21,000
and uh with that I don't know how much

892
00:37:21,000 --> 00:37:23,099
time we have

893
00:37:23,099 --> 00:37:26,660
oh well then perfect

894
00:37:31,339 --> 00:37:35,000
thank you

