1
00:00:00,850 --> 00:00:07,310
[Music]

2
00:00:11,000 --> 00:00:14,300
thank you

3
00:00:17,100 --> 00:00:18,779
thank you and good morning good morning

4
00:00:18,779 --> 00:00:20,820
Bergamo good morning Italy

5
00:00:20,820 --> 00:00:22,800
uh this is not my first time in Italy

6
00:00:22,800 --> 00:00:24,840
though but first time in Bergamo and

7
00:00:24,840 --> 00:00:27,000
what a beautiful city

8
00:00:27,000 --> 00:00:29,119
um

9
00:00:31,080 --> 00:00:32,340
so

10
00:00:32,340 --> 00:00:34,980
I come from beautiful Toronto Canada

11
00:00:34,980 --> 00:00:36,840
okay

12
00:00:36,840 --> 00:00:38,579
and

13
00:00:38,579 --> 00:00:42,059
I took an airplane to get to Bergamo

14
00:00:42,059 --> 00:00:44,160
Canada's beautiful country and Toronto

15
00:00:44,160 --> 00:00:46,500
itself I consider to be the center of

16
00:00:46,500 --> 00:00:50,280
the world okay I'm biased so and it took

17
00:00:50,280 --> 00:00:51,899
me around

18
00:00:51,899 --> 00:00:53,600
just on average

19
00:00:53,600 --> 00:00:56,940
5615 kilometer to get here okay so it

20
00:00:56,940 --> 00:00:59,839
was quite the journey

21
00:01:00,780 --> 00:01:02,219
but today we're not talking about

22
00:01:02,219 --> 00:01:04,920
geography Toronto or Bergamo I'm here to

23
00:01:04,920 --> 00:01:07,500
present crab elector which is threatonic

24
00:01:07,500 --> 00:01:09,920
framework

25
00:01:10,860 --> 00:01:13,080
so what is a private electorate

26
00:01:13,080 --> 00:01:15,540
It's a combination of two words Crowder

27
00:01:15,540 --> 00:01:18,060
and detector

28
00:01:18,060 --> 00:01:20,100
it's a threat Hunter framework designed

29
00:01:20,100 --> 00:01:22,020
for scanning websites for malicious

30
00:01:22,020 --> 00:01:23,400
objects

31
00:01:23,400 --> 00:01:25,799
primarily compromised websites

32
00:01:25,799 --> 00:01:30,180
famous as cnnia who Google or whatever

33
00:01:30,180 --> 00:01:32,759
and in particular

34
00:01:32,759 --> 00:01:35,040
you must have heard of website that have

35
00:01:35,040 --> 00:01:36,720
been used for Waterhole attacks for

36
00:01:36,720 --> 00:01:37,799
example

37
00:01:37,799 --> 00:01:40,280
military websites government websites

38
00:01:40,280 --> 00:01:44,100
that to be visited by senior

39
00:01:44,100 --> 00:01:48,420
citizens or targeted employee and of

40
00:01:48,420 --> 00:01:49,979
course you've got exploit kits such as

41
00:01:49,979 --> 00:01:53,479
drive by download type attacks

42
00:01:54,720 --> 00:01:57,060
so crowd letter what is it like at a

43
00:01:57,060 --> 00:02:00,479
very very high level in a nutshell what

44
00:02:00,479 --> 00:02:02,700
does it consist of

45
00:02:02,700 --> 00:02:04,619
the framework like

46
00:02:04,619 --> 00:02:06,659
it follows these four steps

47
00:02:06,659 --> 00:02:08,940
first you give it a list of domains

48
00:02:08,940 --> 00:02:11,280
and like this is the input

49
00:02:11,280 --> 00:02:12,900
set of Yara rules

50
00:02:12,900 --> 00:02:15,060
and then it goes into

51
00:02:15,060 --> 00:02:17,040
searching these domains

52
00:02:17,040 --> 00:02:21,420
by spidering the page slash pages

53
00:02:21,420 --> 00:02:23,400
and crawling them so there is a

54
00:02:23,400 --> 00:02:24,720
difference between a spider and Crowder

55
00:02:24,720 --> 00:02:26,040
I will explain later

56
00:02:26,040 --> 00:02:28,080
and then detect and suspicious objects

57
00:02:28,080 --> 00:02:31,020
on these pages and up on a detection it

58
00:02:31,020 --> 00:02:32,940
gives you a results okay this is a very

59
00:02:32,940 --> 00:02:34,140
very high level and then we'll get into

60
00:02:34,140 --> 00:02:36,360
the details of what each of these steps

61
00:02:36,360 --> 00:02:38,660
entail

62
00:02:39,540 --> 00:02:41,280
so the thought layout consists of the

63
00:02:41,280 --> 00:02:43,860
following key steps first the motivation

64
00:02:43,860 --> 00:02:45,840
why did I write this framework in the

65
00:02:45,840 --> 00:02:46,860
first place

66
00:02:46,860 --> 00:02:49,319
and crawler itself the framework the

67
00:02:49,319 --> 00:02:51,720
features that consist of in terms of

68
00:02:51,720 --> 00:02:55,260
design architecture and whatnot and then

69
00:02:55,260 --> 00:02:57,360
take a couple of slides talk about the

70
00:02:57,360 --> 00:02:58,739
files and folder structure of the

71
00:02:58,739 --> 00:03:00,060
framework so because it consists of a

72
00:03:00,060 --> 00:03:01,560
lot of files folders and configuration

73
00:03:01,560 --> 00:03:03,000
information

74
00:03:03,000 --> 00:03:04,980
and then the site formatted patterns

75
00:03:04,980 --> 00:03:06,599
since the input is

76
00:03:06,599 --> 00:03:09,360
domains list of domains but it accepts

77
00:03:09,360 --> 00:03:11,159
different types of domains

78
00:03:11,159 --> 00:03:13,140
and then some of the limitations which

79
00:03:13,140 --> 00:03:14,159
are

80
00:03:14,159 --> 00:03:17,360
design choices and then

81
00:03:17,360 --> 00:03:19,379
experiments to prove the effectiveness

82
00:03:19,379 --> 00:03:21,720
of the framework itself and then a demo

83
00:03:21,720 --> 00:03:24,920
if I have any time left

84
00:03:26,400 --> 00:03:28,140
so the motivation

85
00:03:28,140 --> 00:03:29,879
I always wanted to do something like

86
00:03:29,879 --> 00:03:31,319
this or write something like that just

87
00:03:31,319 --> 00:03:33,300
out of curiosity for no other reasons

88
00:03:33,300 --> 00:03:35,220
and I had the idea there's like back in

89
00:03:35,220 --> 00:03:36,420
2018

90
00:03:36,420 --> 00:03:38,519
I was wearing some colleagues on Roi and

91
00:03:38,519 --> 00:03:40,080
then I had this idea I started like

92
00:03:40,080 --> 00:03:42,959
writing taking some notes

93
00:03:42,959 --> 00:03:45,540
and by the way like this web stuff is

94
00:03:45,540 --> 00:03:47,640
out of my comfort zone this is not what

95
00:03:47,640 --> 00:03:50,099
I do for my job not even out of interest

96
00:03:50,099 --> 00:03:51,780
I'm mostly interested in reverse

97
00:03:51,780 --> 00:03:54,959
engineering compilers ips's so this was

98
00:03:54,959 --> 00:03:57,680
just like for fun

99
00:03:57,720 --> 00:04:00,659
and seriously I was excited about the

100
00:04:00,659 --> 00:04:02,159
results before the results so after I

101
00:04:02,159 --> 00:04:03,959
write this framework what do I get would

102
00:04:03,959 --> 00:04:05,879
it deal any usable information or just

103
00:04:05,879 --> 00:04:10,200
be uh I had fun doing it that's all

104
00:04:10,200 --> 00:04:12,720
and then I am a huge fan of C plus plus

105
00:04:12,720 --> 00:04:14,580
and I'm sort of deadly allergic to

106
00:04:14,580 --> 00:04:17,100
python or any of these high-level

107
00:04:17,100 --> 00:04:19,760
languages especially that are space or

108
00:04:19,760 --> 00:04:22,620
indent based especially for scoping I

109
00:04:22,620 --> 00:04:24,660
can't use them no matter how powerful or

110
00:04:24,660 --> 00:04:26,520
feature Rich

111
00:04:26,520 --> 00:04:29,160
so C plus plus

112
00:04:29,160 --> 00:04:34,139
I mean it's uh it keeps evolving and the

113
00:04:34,139 --> 00:04:36,900
standard is highly active and every now

114
00:04:36,900 --> 00:04:38,759
and then they introduce new features it

115
00:04:38,759 --> 00:04:40,620
was perfect excuse for me

116
00:04:40,620 --> 00:04:42,120
to write the framework in C plus plus

117
00:04:42,120 --> 00:04:44,520
and experiment with different features

118
00:04:44,520 --> 00:04:47,460
so that was one of the excuses

119
00:04:47,460 --> 00:04:49,620
and at the end of the day it's an

120
00:04:49,620 --> 00:04:52,740
experimental project meaning it's a it's

121
00:04:52,740 --> 00:04:54,780
a fun hobby project I can do whatever I

122
00:04:54,780 --> 00:04:58,280
want with it whenever and however

123
00:05:00,900 --> 00:05:03,600
so what it consists of

124
00:05:03,600 --> 00:05:06,120
some of the features

125
00:05:06,120 --> 00:05:08,580
first it supports spidering so first you

126
00:05:08,580 --> 00:05:10,139
have to keep in mind between like those

127
00:05:10,139 --> 00:05:12,300
two words crowling and spidering so

128
00:05:12,300 --> 00:05:15,419
spidering is restricted to finding

129
00:05:15,419 --> 00:05:17,400
additional links on the page that you're

130
00:05:17,400 --> 00:05:18,300
scanning

131
00:05:18,300 --> 00:05:22,139
okay for curling is consists of

132
00:05:22,139 --> 00:05:24,900
actually scanning whatever list of pages

133
00:05:24,900 --> 00:05:26,699
to give it irrespective of being

134
00:05:26,699 --> 00:05:29,340
restricted to that same origin page

135
00:05:29,340 --> 00:05:31,860
and by it's it's a design choice that

136
00:05:31,860 --> 00:05:34,020
I'm restricting it only to two levels

137
00:05:34,020 --> 00:05:35,699
only and this is for performance reasons

138
00:05:35,699 --> 00:05:39,440
you will see later what I mean by that

139
00:05:39,539 --> 00:05:42,000
and it uses the era which is you're all

140
00:05:42,000 --> 00:05:43,199
familiar with it

141
00:05:43,199 --> 00:05:45,900
as a back-end engine for rule scanning

142
00:05:45,900 --> 00:05:48,419
at this point like when I was designing

143
00:05:48,419 --> 00:05:51,240
like as part of the design phase whether

144
00:05:51,240 --> 00:05:54,360
to write my own domain specific language

145
00:05:54,360 --> 00:05:56,880
as part of the logic that will go on and

146
00:05:56,880 --> 00:05:59,220
detect suspicious objects on these pages

147
00:05:59,220 --> 00:06:01,860
which I did that in the past but uh

148
00:06:01,860 --> 00:06:03,840
after looking into the era especially

149
00:06:03,840 --> 00:06:07,139
the C API I decided to settle on it and

150
00:06:07,139 --> 00:06:09,120
I found it to be the perfect candidate

151
00:06:09,120 --> 00:06:11,580
for this job actually and I do vouch I'm

152
00:06:11,580 --> 00:06:13,979
not a like a developer or anything I

153
00:06:13,979 --> 00:06:16,199
just I happen to use it and find it very

154
00:06:16,199 --> 00:06:18,720
useful the C API is actually extremely

155
00:06:18,720 --> 00:06:20,820
clean and it works as expected so there

156
00:06:20,820 --> 00:06:22,979
was no issue with that so I recommend

157
00:06:22,979 --> 00:06:24,780
you to use it in your own projects so

158
00:06:24,780 --> 00:06:26,520
you don't have to reinvent the wheel and

159
00:06:26,520 --> 00:06:27,960
coming up with your own demand specific

160
00:06:27,960 --> 00:06:29,699
language and all the constructs you need

161
00:06:29,699 --> 00:06:31,259
in terms of Primitives conditions or

162
00:06:31,259 --> 00:06:33,600
whatnot era has it so you don't need to

163
00:06:33,600 --> 00:06:37,100
do any with the shenanigans

164
00:06:38,100 --> 00:06:40,319
it supports online and offline scanning

165
00:06:40,319 --> 00:06:43,080
by that I mean of course we have the

166
00:06:43,080 --> 00:06:45,780
real-time scanning of these website

167
00:06:45,780 --> 00:06:48,720
and as a post processing you can save

168
00:06:48,720 --> 00:06:50,520
these websites as part of the

169
00:06:50,520 --> 00:06:51,840
configuration file and then you can do

170
00:06:51,840 --> 00:06:53,699
post processing on existing files on the

171
00:06:53,699 --> 00:06:54,539
system

172
00:06:54,539 --> 00:06:56,520
so you don't have to query that domain

173
00:06:56,520 --> 00:06:57,840
again and again

174
00:06:57,840 --> 00:06:59,280
and of course as you see later on

175
00:06:59,280 --> 00:07:02,539
supports caching and whatnot

176
00:07:03,240 --> 00:07:05,340
it's supposed to crawling for digital

177
00:07:05,340 --> 00:07:07,500
certificates too

178
00:07:07,500 --> 00:07:10,259
so this is important you'll see later

179
00:07:10,259 --> 00:07:13,440
why uh you can get the certificate of

180
00:07:13,440 --> 00:07:15,360
the domain you're scanning and at the

181
00:07:15,360 --> 00:07:17,340
same time you can get all the attributes

182
00:07:17,340 --> 00:07:20,099
in the certificate like the issuer the

183
00:07:20,099 --> 00:07:22,380
subject information the validation all

184
00:07:22,380 --> 00:07:24,539
these attributes and the public key the

185
00:07:24,539 --> 00:07:26,520
size of the public key whether it

186
00:07:26,520 --> 00:07:28,800
contains a public key or private key all

187
00:07:28,800 --> 00:07:30,440
of the statistical information is

188
00:07:30,440 --> 00:07:33,120
important when any reason about what's

189
00:07:33,120 --> 00:07:34,940
out there on the web

190
00:07:34,940 --> 00:07:38,039
and as part of this feature actually I

191
00:07:38,039 --> 00:07:40,199
ended up writing a paper called the

192
00:07:40,199 --> 00:07:42,240
state of SSL DLS certificate usage in

193
00:07:42,240 --> 00:07:44,699
malware CNC communication which is

194
00:07:44,699 --> 00:07:48,199
available on Trend Micro thread lab

195
00:07:49,740 --> 00:07:52,380
and it supports querying URL house from

196
00:07:52,380 --> 00:07:54,900
abuse.h for finding additional malicious

197
00:07:54,900 --> 00:07:57,500
urls

198
00:07:58,319 --> 00:08:01,080
and of course as you scan these pages

199
00:08:01,080 --> 00:08:02,880
or you can save them locally on your

200
00:08:02,880 --> 00:08:05,880
disk and Z password protector or whatnot

201
00:08:05,880 --> 00:08:09,020
it's all configurable

202
00:08:09,599 --> 00:08:12,180
more on the features

203
00:08:12,180 --> 00:08:14,639
so

204
00:08:14,639 --> 00:08:17,039
there are multiple fuzzy hashing type

205
00:08:17,039 --> 00:08:21,060
algorithms and one of them is tlsh which

206
00:08:21,060 --> 00:08:23,400
is developed by Trend Micro

207
00:08:23,400 --> 00:08:25,460
and of course you have other standard

208
00:08:25,460 --> 00:08:28,740
symmetric type hashing such as md5

209
00:08:28,740 --> 00:08:32,940
chapter 56 ripe MD and among others so

210
00:08:32,940 --> 00:08:35,940
you might think that this is not just as

211
00:08:35,940 --> 00:08:39,599
simple as uh hashing the body of the

212
00:08:39,599 --> 00:08:41,760
page requesting so what's the point of

213
00:08:41,760 --> 00:08:42,899
that you will see later on like how

214
00:08:42,899 --> 00:08:44,459
important this feature is it's so simple

215
00:08:44,459 --> 00:08:46,440
to implement but it will prove its

216
00:08:46,440 --> 00:08:49,740
worthiness later on so tlsh in in

217
00:08:49,740 --> 00:08:52,500
particular on its own it might not be

218
00:08:52,500 --> 00:08:55,620
useful for you as a hash but when you

219
00:08:55,620 --> 00:08:57,120
have like you're scanning thousands of

220
00:08:57,120 --> 00:08:58,620
domains and you want to Cluster those

221
00:08:58,620 --> 00:09:01,140
domains so it becomes a useful feature

222
00:09:01,140 --> 00:09:04,260
especially if you can use like a tlsh on

223
00:09:04,260 --> 00:09:06,480
clustering code

224
00:09:06,480 --> 00:09:08,700
for finding similarities or deviation

225
00:09:08,700 --> 00:09:11,640
from what you're expecting

226
00:09:11,640 --> 00:09:13,019
and of course you can get domain

227
00:09:13,019 --> 00:09:17,040
resolution for apv4 or IPv6 and even if

228
00:09:17,040 --> 00:09:19,860
the same domain is resolving to multiple

229
00:09:19,860 --> 00:09:21,899
IP due to load balancing or proxies or

230
00:09:21,899 --> 00:09:23,700
whatnot you'll get the list of all ipv4

231
00:09:23,700 --> 00:09:26,820
and simple feature but you will get

232
00:09:26,820 --> 00:09:29,220
interesting results later on

233
00:09:29,220 --> 00:09:31,440
and the framework itself is proxy aware

234
00:09:31,440 --> 00:09:33,720
all https Communications are proxy aware

235
00:09:33,720 --> 00:09:39,080
for different proxies ntlm and whatever

236
00:09:39,779 --> 00:09:42,600
more on the on the feature side

237
00:09:42,600 --> 00:09:44,220
and this is something to keep in mind

238
00:09:44,220 --> 00:09:45,959
that

239
00:09:45,959 --> 00:09:48,180
the entire framework

240
00:09:48,180 --> 00:09:50,580
does not accept any command line it's

241
00:09:50,580 --> 00:09:52,980
all control v i can single configuration

242
00:09:52,980 --> 00:09:54,959
file it's around I don't know like a

243
00:09:54,959 --> 00:09:57,959
hundred uh line

244
00:09:57,959 --> 00:10:00,720
I based configuration file

245
00:10:00,720 --> 00:10:03,839
so you have to be cognizant of this

246
00:10:03,839 --> 00:10:06,660
feature and it's fully documented so you

247
00:10:06,660 --> 00:10:09,600
don't have to just wander around which

248
00:10:09,600 --> 00:10:10,980
feature to enable which feature to

249
00:10:10,980 --> 00:10:13,399
disable

250
00:10:13,980 --> 00:10:15,600
and

251
00:10:15,600 --> 00:10:18,240
at this point I had to decide how to

252
00:10:18,240 --> 00:10:20,339
like after scanning all these websites

253
00:10:20,339 --> 00:10:22,620
running them against gr everything is in

254
00:10:22,620 --> 00:10:24,000
real time all this information whatever

255
00:10:24,000 --> 00:10:25,800
feature you enable

256
00:10:25,800 --> 00:10:27,360
how am I going to present this

257
00:10:27,360 --> 00:10:28,740
information to you

258
00:10:28,740 --> 00:10:29,760
right

259
00:10:29,760 --> 00:10:33,360
so I decided to settle on a CSV file

260
00:10:33,360 --> 00:10:34,620
which I found it to be like the perfect

261
00:10:34,620 --> 00:10:35,760
format

262
00:10:35,760 --> 00:10:37,200
but

263
00:10:37,200 --> 00:10:40,620
uh part of my experience I suggest that

264
00:10:40,620 --> 00:10:43,500
you convert the CSV file to sql5 for

265
00:10:43,500 --> 00:10:46,440
better performance and querying

266
00:10:46,440 --> 00:10:48,540
and all the information that are

267
00:10:48,540 --> 00:10:49,920
necessary at least what I think are

268
00:10:49,920 --> 00:10:52,320
necessary for you too for investigation

269
00:10:52,320 --> 00:10:56,880
will be saved onto this CSV file

270
00:10:56,880 --> 00:11:00,600
it's one executable eh just one exe so

271
00:11:00,600 --> 00:11:02,700
there is no hellish dependence so if

272
00:11:02,700 --> 00:11:04,079
you're using python for example those

273
00:11:04,079 --> 00:11:06,240
might hate for python so you have to

274
00:11:06,240 --> 00:11:07,800
rely on oh this version oh no that

275
00:11:07,800 --> 00:11:09,480
version Oh I need this dependency oh no

276
00:11:09,480 --> 00:11:11,940
it works on Ubuntu kernel versus x no

277
00:11:11,940 --> 00:11:13,800
it's one executable it runs on all

278
00:11:13,800 --> 00:11:17,100
windows again I'm also on this biased so

279
00:11:17,100 --> 00:11:19,140
Australian C plus plus

280
00:11:19,140 --> 00:11:21,959
it's this many number of codes and it's

281
00:11:21,959 --> 00:11:24,439
evolving

282
00:11:25,680 --> 00:11:30,319
now onto the files and folder structures

283
00:11:30,360 --> 00:11:33,060
the CL sites file

284
00:11:33,060 --> 00:11:34,980
folder I should say this is where you

285
00:11:34,980 --> 00:11:36,480
gave it the list of domains that you

286
00:11:36,480 --> 00:11:38,399
want to scan

287
00:11:38,399 --> 00:11:41,220
and of course it supports uh multiple

288
00:11:41,220 --> 00:11:43,800
files and directories

289
00:11:43,800 --> 00:11:45,740
the name is not specific on anything

290
00:11:45,740 --> 00:11:48,779
crowd so as part of the spidering filter

291
00:11:48,779 --> 00:11:51,300
feature so as you're crawling a certain

292
00:11:51,300 --> 00:11:52,800
domain for finding additional links

293
00:11:52,800 --> 00:11:55,260
being be it external internal or whatnot

294
00:11:55,260 --> 00:11:57,480
depending on the configuration those

295
00:11:57,480 --> 00:12:00,360
links that it found they will be saved

296
00:12:00,360 --> 00:12:01,800
into text file so if you want to scan

297
00:12:01,800 --> 00:12:04,579
them later as well

298
00:12:05,279 --> 00:12:07,980
the list of certificates of course if

299
00:12:07,980 --> 00:12:09,000
you want to introspect those

300
00:12:09,000 --> 00:12:11,160
certificates later on they will be saved

301
00:12:11,160 --> 00:12:15,079
in this directory under the their format

302
00:12:15,180 --> 00:12:17,880
results of course this is where you get

303
00:12:17,880 --> 00:12:20,519
your pages saved the content itself

304
00:12:20,519 --> 00:12:23,779
excluding any headers

305
00:12:26,279 --> 00:12:28,620
so PG cache so you have two type of

306
00:12:28,620 --> 00:12:29,880
caches

307
00:12:29,880 --> 00:12:31,740
the program cache as well as the spider

308
00:12:31,740 --> 00:12:33,480
feature cache and this is important to

309
00:12:33,480 --> 00:12:35,519
keep in mind so the program cache this

310
00:12:35,519 --> 00:12:37,079
is specific to

311
00:12:37,079 --> 00:12:41,220
the uh like the page itself okay so as

312
00:12:41,220 --> 00:12:43,200
you're scanning the page you can save it

313
00:12:43,200 --> 00:12:44,880
locally as it is or you can save the

314
00:12:44,880 --> 00:12:47,459
cache of it why this is important so in

315
00:12:47,459 --> 00:12:49,320
case you're scanning the the same page

316
00:12:49,320 --> 00:12:51,540
again instead of making a request to the

317
00:12:51,540 --> 00:12:52,740
page in case it didn't change on the

318
00:12:52,740 --> 00:12:54,779
server you've got a local copy so the

319
00:12:54,779 --> 00:12:56,399
framework itself would load the local

320
00:12:56,399 --> 00:12:58,440
copy for you

321
00:12:58,440 --> 00:13:00,000
this is depending on whether you enable

322
00:13:00,000 --> 00:13:02,519
caching or not the CL cache this is for

323
00:13:02,519 --> 00:13:05,240
the spytrain

324
00:13:05,459 --> 00:13:07,560
you got our rule this is where you give

325
00:13:07,560 --> 00:13:10,260
it your list of URL rules

326
00:13:10,260 --> 00:13:12,959
now keep in mind you don't have to use

327
00:13:12,959 --> 00:13:15,839
Yara to validate the rules the framework

328
00:13:15,839 --> 00:13:18,060
itself would load all of your variables

329
00:13:18,060 --> 00:13:20,760
parse them validate them

330
00:13:20,760 --> 00:13:25,100
prior any prior to any execution

331
00:13:27,480 --> 00:13:28,920
now

332
00:13:28,920 --> 00:13:31,579
this is the important file it's CL

333
00:13:31,579 --> 00:13:33,839
config.ini so this is pretty much the

334
00:13:33,839 --> 00:13:37,399
orchestrator for the entire framework

335
00:13:38,700 --> 00:13:40,980
and the only command line is V which is

336
00:13:40,980 --> 00:13:44,720
version information okay

337
00:13:45,000 --> 00:13:47,399
now the logs

338
00:13:47,399 --> 00:13:50,160
like the results of the scanning

339
00:13:50,160 --> 00:13:52,980
is safe is safe procession

340
00:13:52,980 --> 00:13:57,120
okay according to this file format

341
00:13:57,120 --> 00:13:59,399
it includes information such as any

342
00:13:59,399 --> 00:14:01,680
error rule that I've triggered

343
00:14:01,680 --> 00:14:03,660
uh the offsets were triggered on the

344
00:14:03,660 --> 00:14:06,300
page the length of

345
00:14:06,300 --> 00:14:10,160
the trigger uh HTTP list of HTTP headers

346
00:14:10,160 --> 00:14:12,920
hashes the lsh hash

347
00:14:12,920 --> 00:14:15,920
uh the URL itself ID

348
00:14:15,920 --> 00:14:19,160
URL house

349
00:14:22,860 --> 00:14:26,519
and that like that one

350
00:14:26,519 --> 00:14:29,579
the CLM log this is for online scanning

351
00:14:29,579 --> 00:14:32,339
okay meaning real time scanning and then

352
00:14:32,339 --> 00:14:34,500
in case you want to scan existing files

353
00:14:34,500 --> 00:14:35,760
on the system

354
00:14:35,760 --> 00:14:38,160
it will create another session file

355
00:14:38,160 --> 00:14:40,440
called offline logs and this contains

356
00:14:40,440 --> 00:14:42,600
less information because of course if

357
00:14:42,600 --> 00:14:45,120
you're scanning something local you

358
00:14:45,120 --> 00:14:46,260
won't be able to query some of the

359
00:14:46,260 --> 00:14:47,579
information such as

360
00:14:47,579 --> 00:14:51,739
the server headers and whatnot

361
00:14:52,680 --> 00:14:56,220
and of course you get another log file

362
00:14:56,220 --> 00:14:59,579
for the search this is Standalone uh log

363
00:14:59,579 --> 00:15:02,339
file containing information specific to

364
00:15:02,339 --> 00:15:05,100
the to every digital certificate

365
00:15:05,100 --> 00:15:07,199
attributes and now here we have to keep

366
00:15:07,199 --> 00:15:09,420
in mind that if you enable the

367
00:15:09,420 --> 00:15:11,519
certificate feature it's mutually

368
00:15:11,519 --> 00:15:13,680
exclusive with respect to the rest of

369
00:15:13,680 --> 00:15:15,839
the Frameworks features

370
00:15:15,839 --> 00:15:17,339
so when you enable this feature only

371
00:15:17,339 --> 00:15:19,440
this feature will work okay and that's a

372
00:15:19,440 --> 00:15:20,820
design decision probably I will change

373
00:15:20,820 --> 00:15:23,300
it later on

374
00:15:24,839 --> 00:15:27,899
so first we'll start with one of the uh

375
00:15:27,899 --> 00:15:29,160
features

376
00:15:29,160 --> 00:15:31,019
supported by the framework which is URL

377
00:15:31,019 --> 00:15:33,360
house scanning

378
00:15:33,360 --> 00:15:35,040
so what is URL house

379
00:15:35,040 --> 00:15:37,920
so this is list of domains malicious

380
00:15:37,920 --> 00:15:39,240
domains

381
00:15:39,240 --> 00:15:42,899
provided by abuse.ch okay

382
00:15:42,899 --> 00:15:45,959
so as you're scanning page the framework

383
00:15:45,959 --> 00:15:48,660
will query This urlhouse Server get this

384
00:15:48,660 --> 00:15:50,820
list of domains automatically for you

385
00:15:50,820 --> 00:15:52,560
which at this point of time it contains

386
00:15:52,560 --> 00:15:54,600
around 113 million entries so you can

387
00:15:54,600 --> 00:15:56,220
tell how expensive it is to scan every

388
00:15:56,220 --> 00:15:57,959
page with those

389
00:15:57,959 --> 00:16:00,600
then in case of a match it's going to

390
00:16:00,600 --> 00:16:03,000
acquire urlhouse server for additional

391
00:16:03,000 --> 00:16:05,160
information on on this query on this

392
00:16:05,160 --> 00:16:06,779
detection for example

393
00:16:06,779 --> 00:16:10,320
on a domain X found on this page this

394
00:16:10,320 --> 00:16:13,440
domain belongs to malware X it is of

395
00:16:13,440 --> 00:16:16,560
this type and it falls under this phase

396
00:16:16,560 --> 00:16:18,360
for example if it is post compromise or

397
00:16:18,360 --> 00:16:20,220
pre-compromised it gives you all this

398
00:16:20,220 --> 00:16:21,959
information and of course gets populated

399
00:16:21,959 --> 00:16:24,180
in the log file

400
00:16:24,180 --> 00:16:25,860
and in case you don't want to query your

401
00:16:25,860 --> 00:16:28,560
L house like the server you can also

402
00:16:28,560 --> 00:16:31,680
give it a URL house file local to you

403
00:16:31,680 --> 00:16:35,000
local to disk

404
00:16:35,639 --> 00:16:37,620
and you have to keep this in mind that

405
00:16:37,620 --> 00:16:40,199
this feature is extremely expensive I

406
00:16:40,199 --> 00:16:41,759
mean you're scanning if you're scanning

407
00:16:41,759 --> 00:16:43,860
a thousand page imagine every page will

408
00:16:43,860 --> 00:16:46,740
be scanned against 113 million entry

409
00:16:46,740 --> 00:16:49,320
okay whether you're using the most

410
00:16:49,320 --> 00:16:50,759
powerful search algorithm or whatnot

411
00:16:50,759 --> 00:16:54,019
it's still an expensive feature

412
00:16:56,519 --> 00:16:57,839
now

413
00:16:57,839 --> 00:17:01,980
we come to the sites formatted pattern

414
00:17:01,980 --> 00:17:03,959
and this is probably one of the core

415
00:17:03,959 --> 00:17:06,959
features in terms of the input

416
00:17:06,959 --> 00:17:09,959
and it supports three types

417
00:17:09,959 --> 00:17:12,299
the easiest one is type one

418
00:17:12,299 --> 00:17:15,419
which consists of one domain per line

419
00:17:15,419 --> 00:17:17,040
you don't have to give it an ID or

420
00:17:17,040 --> 00:17:18,299
anything just give it the domain as it

421
00:17:18,299 --> 00:17:21,299
is okay irrespective of the protocol

422
00:17:21,299 --> 00:17:26,099
or uh any uh URL appended to the top

423
00:17:26,099 --> 00:17:27,839
level domain

424
00:17:27,839 --> 00:17:29,700
and of course the framework itself will

425
00:17:29,700 --> 00:17:32,580
assign a unique ID to it

426
00:17:32,580 --> 00:17:34,799
again derived from the hostname so that

427
00:17:34,799 --> 00:17:36,419
there's some work involved in how the ID

428
00:17:36,419 --> 00:17:39,000
so that it is a self-descriptive just by

429
00:17:39,000 --> 00:17:40,740
looking at the ID so that you can tell

430
00:17:40,740 --> 00:17:44,100
to which domain it belongs to

431
00:17:44,100 --> 00:17:46,620
type 2 is where you give it your own ID

432
00:17:46,620 --> 00:17:48,419
okay

433
00:17:48,419 --> 00:17:51,360
and it you can like here

434
00:17:51,360 --> 00:17:53,700
again this is design decision I decided

435
00:17:53,700 --> 00:17:56,760
that you are allowed to give it uh

436
00:17:56,760 --> 00:17:59,280
uh multiple IDs like the same ideas for

437
00:17:59,280 --> 00:18:03,000
the same domain but during evaluation

438
00:18:03,000 --> 00:18:05,760
the framework will assign a unique ID as

439
00:18:05,760 --> 00:18:07,440
well so there's no Collision involved at

440
00:18:07,440 --> 00:18:08,820
this point

441
00:18:08,820 --> 00:18:11,100
type 3 this is specific to the spider

442
00:18:11,100 --> 00:18:13,200
functionality and this is something that

443
00:18:13,200 --> 00:18:16,440
you have to understand a bit more

444
00:18:16,440 --> 00:18:19,620
it has this format so the ID follows the

445
00:18:19,620 --> 00:18:22,020
same type 2 ID format against us from

446
00:18:22,020 --> 00:18:23,640
this regex

447
00:18:23,640 --> 00:18:25,980
but between those brackets you've got

448
00:18:25,980 --> 00:18:29,760
these three conditions depth total and

449
00:18:29,760 --> 00:18:31,919
sleep

450
00:18:31,919 --> 00:18:36,059
so let's take this as an example

451
00:18:36,059 --> 00:18:38,160
so let's say I want to scan

452
00:18:38,160 --> 00:18:43,140
MF mogul.com or nohat.it right

453
00:18:43,140 --> 00:18:45,539
so you want to find additional links on

454
00:18:45,539 --> 00:18:47,940
this website how would you do that so

455
00:18:47,940 --> 00:18:49,919
first you start in the Middle with the

456
00:18:49,919 --> 00:18:53,460
total keyword that takes a digit so you

457
00:18:53,460 --> 00:18:58,500
say find me a Max of 10 links on the

458
00:18:58,500 --> 00:19:00,660
domain you're given MF mogul.com or it

459
00:19:00,660 --> 00:19:02,700
could be any other subdomains okay

460
00:19:02,700 --> 00:19:05,880
and then between every request sleep for

461
00:19:05,880 --> 00:19:09,000
X number of milliseconds

462
00:19:09,000 --> 00:19:11,940
and in case depth is enabled via the

463
00:19:11,940 --> 00:19:14,100
value 0 1 let's say it's enabled it

464
00:19:14,100 --> 00:19:15,900
takes the value one in this case depth

465
00:19:15,900 --> 00:19:17,580
one and then

466
00:19:17,580 --> 00:19:20,880
it takes the value three so out of every

467
00:19:20,880 --> 00:19:23,340
page you found in the total finally

468
00:19:23,340 --> 00:19:26,039
additional three pages

469
00:19:26,039 --> 00:19:28,740
so best case scenario you will have four

470
00:19:28,740 --> 00:19:31,860
e links found this best case why first

471
00:19:31,860 --> 00:19:33,419
you have the base 10 that you found on

472
00:19:33,419 --> 00:19:35,100
the page you're looking for and then off

473
00:19:35,100 --> 00:19:37,740
of everyone finding an additional three

474
00:19:37,740 --> 00:19:40,919
those for you

475
00:19:40,919 --> 00:19:42,980
and you might be wondering

476
00:19:42,980 --> 00:19:45,840
uh can I go like in depth higher than

477
00:19:45,840 --> 00:19:49,080
that like even after finding those 10

478
00:19:49,080 --> 00:19:51,539
and then find me three in each one of

479
00:19:51,539 --> 00:19:53,340
them you will find additional links

480
00:19:53,340 --> 00:19:54,059
right

481
00:19:54,059 --> 00:19:56,220
I mean they never

482
00:19:56,220 --> 00:19:58,020
the death never ends but it's a design

483
00:19:58,020 --> 00:20:01,460
decision to stop at depth too

484
00:20:01,919 --> 00:20:04,500
okay the framework is meant to be simple

485
00:20:04,500 --> 00:20:06,900
and it's not meant to scan the entire

486
00:20:06,900 --> 00:20:09,140
web

487
00:20:11,280 --> 00:20:13,919
now as part of the features

488
00:20:13,919 --> 00:20:18,299
let's say you're using type 3 URL

489
00:20:18,299 --> 00:20:20,840
uh but you want to use it as type 1

490
00:20:20,840 --> 00:20:23,940
right so you don't wanna

491
00:20:23,940 --> 00:20:25,799
redo some of the works just to generate

492
00:20:25,799 --> 00:20:27,960
type one I'm not talking here about one

493
00:20:27,960 --> 00:20:30,840
URL is in case we have thousands URL and

494
00:20:30,840 --> 00:20:32,280
the list of input

495
00:20:32,280 --> 00:20:34,020
so this is in the configuration file you

496
00:20:34,020 --> 00:20:37,080
know you can set a simple uh option to

497
00:20:37,080 --> 00:20:40,740
false and then you've got type 1 urls

498
00:20:40,740 --> 00:20:42,660
and of course it accepts guns and

499
00:20:42,660 --> 00:20:44,160
whatnot

500
00:20:44,160 --> 00:20:46,380
now for the spider functionality itself

501
00:20:46,380 --> 00:20:50,160
it has some like some specific features

502
00:20:50,160 --> 00:20:51,960
and these are important especially when

503
00:20:51,960 --> 00:20:54,480
you're scanning for web skimmers or

504
00:20:54,480 --> 00:20:55,980
you're looking for something specific on

505
00:20:55,980 --> 00:20:57,840
that page right you don't want to just

506
00:20:57,840 --> 00:21:00,360
collect whatever is on that page right

507
00:21:00,360 --> 00:21:02,340
so you can influence that behavior via

508
00:21:02,340 --> 00:21:04,620
these specific configuration options so

509
00:21:04,620 --> 00:21:06,360
for example you say

510
00:21:06,360 --> 00:21:09,299
on this page that I'm scanning as you're

511
00:21:09,299 --> 00:21:11,039
finding additional links exclude all

512
00:21:11,039 --> 00:21:14,280
links that ends with like it accepts

513
00:21:14,280 --> 00:21:17,039
wild cards Z exe and whatnot you're not

514
00:21:17,039 --> 00:21:19,559
interested in this stuff okay or

515
00:21:19,559 --> 00:21:23,700
include URLs that only contains checkout

516
00:21:23,700 --> 00:21:26,039
or products keywords in them why this is

517
00:21:26,039 --> 00:21:27,600
important

518
00:21:27,600 --> 00:21:29,400
perhaps your viral rules are scanning

519
00:21:29,400 --> 00:21:31,740
only for web skimmers and web skimmers

520
00:21:31,740 --> 00:21:35,159
Target check out type pages right so you

521
00:21:35,159 --> 00:21:37,080
stick it to that type of stuff you're

522
00:21:37,080 --> 00:21:38,400
looking for

523
00:21:38,400 --> 00:21:39,659
and you're probably not interested in

524
00:21:39,659 --> 00:21:43,020
HTTPS type URLs we can configure it as

525
00:21:43,020 --> 00:21:45,419
such probably you're only interested in

526
00:21:45,419 --> 00:21:48,780
external links on that page why perhaps

527
00:21:48,780 --> 00:21:50,700
you have an iframe that is pointing to a

528
00:21:50,700 --> 00:21:52,620
server that is not part of the domain

529
00:21:52,620 --> 00:21:54,720
you're looking for so this might be

530
00:21:54,720 --> 00:21:57,539
suspicious it need not be but it depends

531
00:21:57,539 --> 00:21:59,100
on what you're looking for

532
00:21:59,100 --> 00:22:02,280
and again you can like restrict it to

533
00:22:02,280 --> 00:22:03,780
external links only

534
00:22:03,780 --> 00:22:06,419
for me nothing but external links on

535
00:22:06,419 --> 00:22:08,840
that page

536
00:22:14,400 --> 00:22:17,600
so it looks it's all nice and whatnot

537
00:22:17,600 --> 00:22:19,980
perhaps you got the impression that oh

538
00:22:19,980 --> 00:22:21,360
it does a lot of stuff

539
00:22:21,360 --> 00:22:23,340
but of course not there will always be

540
00:22:23,340 --> 00:22:25,919
limitations again those are design

541
00:22:25,919 --> 00:22:27,480
decisions

542
00:22:27,480 --> 00:22:30,000
some of the limitations are it's single

543
00:22:30,000 --> 00:22:33,179
threaded why not because of technical

544
00:22:33,179 --> 00:22:35,880
limitations as much as it's a choice

545
00:22:35,880 --> 00:22:38,159
when I started it it's meant to be like

546
00:22:38,159 --> 00:22:40,799
a simple project but as I started adding

547
00:22:40,799 --> 00:22:42,600
feature I realized all some of the stuff

548
00:22:42,600 --> 00:22:43,980
definitely should be multi-threaded at

549
00:22:43,980 --> 00:22:45,299
this point in time because it's taking a

550
00:22:45,299 --> 00:22:47,100
lot a lot of time to scan some of the

551
00:22:47,100 --> 00:22:48,720
stuff and the more features you enable

552
00:22:48,720 --> 00:22:50,340
the longer it takes

553
00:22:50,340 --> 00:22:52,679
so at this time first release it's

554
00:22:52,679 --> 00:22:55,440
single threaded keep that in mind

555
00:22:55,440 --> 00:22:58,200
but I am working on multi-threading like

556
00:22:58,200 --> 00:22:59,700
the spider functionality and some of the

557
00:22:59,700 --> 00:23:02,059
other stuff

558
00:23:04,380 --> 00:23:06,480
the other key point is that is static

559
00:23:06,480 --> 00:23:08,580
detection meaning

560
00:23:08,580 --> 00:23:10,679
If You're Expecting

561
00:23:10,679 --> 00:23:12,539
the framework to evaluate some

562
00:23:12,539 --> 00:23:13,559
JavaScript

563
00:23:13,559 --> 00:23:15,780
that have like malicious not malicious

564
00:23:15,780 --> 00:23:17,159
depending on the evaluation it doesn't

565
00:23:17,159 --> 00:23:19,380
do that at this point in time

566
00:23:19,380 --> 00:23:22,440
right everything is literally based on

567
00:23:22,440 --> 00:23:25,080
this the other rule you give it it's

568
00:23:25,080 --> 00:23:29,220
simple uh static-based detection

569
00:23:29,220 --> 00:23:32,100
so there is no Dynamic evaluation of a

570
00:23:32,100 --> 00:23:35,340
given paste content okay but this this

571
00:23:35,340 --> 00:23:39,059
is stuff on the pipeline to add actually

572
00:23:39,059 --> 00:23:41,640
uh so far I don't find it to be hard to

573
00:23:41,640 --> 00:23:44,280
add even though like it is in C plus

574
00:23:44,280 --> 00:23:46,679
plus and not python considering how huge

575
00:23:46,679 --> 00:23:48,659
is the python ecosystem in terms of

576
00:23:48,659 --> 00:23:50,700
leveraging other people code but I found

577
00:23:50,700 --> 00:23:51,720
this one to be actually easy to

578
00:23:51,720 --> 00:23:54,200
implement to

579
00:23:54,780 --> 00:23:57,059
uh of course no headless browser support

580
00:23:57,059 --> 00:23:59,280
yet okay if you don't have Dynamic

581
00:23:59,280 --> 00:24:01,080
evaluation you're not going to have had

582
00:24:01,080 --> 00:24:03,860
this browser support

583
00:24:05,400 --> 00:24:07,140
okay so the framework itself that's it

584
00:24:07,140 --> 00:24:11,100
okay but as you can tell by now

585
00:24:11,100 --> 00:24:13,559
the framework I mean yeah that's fine

586
00:24:13,559 --> 00:24:15,960
I've I have this from anybody else can

587
00:24:15,960 --> 00:24:19,380
write it too but it is as good as they

588
00:24:19,380 --> 00:24:21,480
are a rule you give it what is the point

589
00:24:21,480 --> 00:24:23,039
of having all these features I'll have

590
00:24:23,039 --> 00:24:25,320
you don't have the Intel

591
00:24:25,320 --> 00:24:27,240
to detect these malicious objects on the

592
00:24:27,240 --> 00:24:29,159
web right and I started asking myself

593
00:24:29,159 --> 00:24:31,740
how can I get this list of yellows if

594
00:24:31,740 --> 00:24:33,299
you go in GitHub you go on Google you

595
00:24:33,299 --> 00:24:35,400
search you will get a list

596
00:24:35,400 --> 00:24:37,740
but some of them they are written in

597
00:24:37,740 --> 00:24:40,080
specific formats some of them are

598
00:24:40,080 --> 00:24:42,900
property attorney I mean I work I mean

599
00:24:42,900 --> 00:24:44,760
my daily job consists of working on

600
00:24:44,760 --> 00:24:46,500
ips's right intrusion prevention system

601
00:24:46,500 --> 00:24:50,100
and we have our own proprietary language

602
00:24:50,100 --> 00:24:52,799
for that right so I can't give it I

603
00:24:52,799 --> 00:24:54,179
can't give you these rules I cannot give

604
00:24:54,179 --> 00:24:56,280
you these rules and if I want to use

605
00:24:56,280 --> 00:24:57,720
them in the framework I would have to

606
00:24:57,720 --> 00:24:58,919
translate them in one way or another

607
00:24:58,919 --> 00:25:03,120
okay so one of these rules that are

608
00:25:03,120 --> 00:25:05,159
extremely important but yet extremely

609
00:25:05,159 --> 00:25:07,320
simple but powerful

610
00:25:07,320 --> 00:25:11,520
it's uh they are part of EK fiddle EK

611
00:25:11,520 --> 00:25:14,039
fiddle is a plug-in for Fiddler you must

612
00:25:14,039 --> 00:25:16,799
have heard of it it's a proxy tool for

613
00:25:16,799 --> 00:25:19,860
uh capturing web traffic you can really

614
00:25:19,860 --> 00:25:22,679
issue the same request just like burp

615
00:25:22,679 --> 00:25:24,600
Suite

616
00:25:24,600 --> 00:25:29,760
but it supports its own rule formats

617
00:25:29,760 --> 00:25:32,039
on a line by line basis and they have

618
00:25:32,039 --> 00:25:33,840
their own format

619
00:25:33,840 --> 00:25:36,600
okay they are so simple yet very

620
00:25:36,600 --> 00:25:38,520
powerful I keep repeating this I can't

621
00:25:38,520 --> 00:25:40,140
stress this enough

622
00:25:40,140 --> 00:25:42,059
you will see later

623
00:25:42,059 --> 00:25:45,020
uh

624
00:25:46,380 --> 00:25:49,919
and I ended up writing a transpiler

625
00:25:49,919 --> 00:25:52,320
that would take these rules

626
00:25:52,320 --> 00:25:54,779
and convert them together rules

627
00:25:54,779 --> 00:25:56,039
okay

628
00:25:56,039 --> 00:25:59,159
and EK fill itself the plugin provides a

629
00:25:59,159 --> 00:26:01,380
link on GitHub that would contain these

630
00:26:01,380 --> 00:26:03,900
rules under finally known as master

631
00:26:03,900 --> 00:26:05,340
regexes

632
00:26:05,340 --> 00:26:06,779
okay

633
00:26:06,779 --> 00:26:09,960
and I'm gonna make this tool available

634
00:26:09,960 --> 00:26:11,760
on GitHub 2 just right after the talk if

635
00:26:11,760 --> 00:26:13,320
not during the talk okay now it's

636
00:26:13,320 --> 00:26:14,760
available I just have to make it public

637
00:26:14,760 --> 00:26:17,159
now it's private okay

638
00:26:17,159 --> 00:26:18,539
uh

639
00:26:18,539 --> 00:26:20,460
uh the tool I mean I don't have all the

640
00:26:20,460 --> 00:26:22,020
documentation here in the slides but

641
00:26:22,020 --> 00:26:24,779
it's the fully documented on GitHub

642
00:26:24,779 --> 00:26:26,400
you can influence the generation of

643
00:26:26,400 --> 00:26:29,279
these rules whichever way you want

644
00:26:29,279 --> 00:26:31,320
and this is one of the transpilers I

645
00:26:31,320 --> 00:26:33,179
wrote I wrote another one but this one

646
00:26:33,179 --> 00:26:34,980
unfortunately I can't release it it's

647
00:26:34,980 --> 00:26:37,080
specific to my job but I needed to

648
00:26:37,080 --> 00:26:39,480
leverage existing Intel that we have in

649
00:26:39,480 --> 00:26:41,580
the format that I'm interested in

650
00:26:41,580 --> 00:26:44,039
uh funny enough like this is a bit of

651
00:26:44,039 --> 00:26:46,140
transgression here

652
00:26:46,140 --> 00:26:49,200
that they redacted together rule took me

653
00:26:49,200 --> 00:26:50,400
more time to write more than the

654
00:26:50,400 --> 00:26:53,419
framework and the EK fiddle to your

655
00:26:53,419 --> 00:26:55,200
transpiler because it's much more

656
00:26:55,200 --> 00:26:57,360
convolution and involves lots of corner

657
00:26:57,360 --> 00:26:59,640
cases on logic

658
00:26:59,640 --> 00:27:01,740
and another things keep in mind like

659
00:27:01,740 --> 00:27:03,720
this is just for the Curious when it

660
00:27:03,720 --> 00:27:05,460
comes to uh

661
00:27:05,460 --> 00:27:08,340
parsing existing regexes to be used with

662
00:27:08,340 --> 00:27:09,960
the aura so we are starting with version

663
00:27:09,960 --> 00:27:12,659
2.0 they adopted their own regex engine

664
00:27:12,659 --> 00:27:14,760
they don't rely on standard engines such

665
00:27:14,760 --> 00:27:16,620
as pcre

666
00:27:16,620 --> 00:27:19,860
so and your uh doesn't use all the

667
00:27:19,860 --> 00:27:22,620
interesting features in any regex engine

668
00:27:22,620 --> 00:27:25,140
okay so you have to account for for

669
00:27:25,140 --> 00:27:28,080
those discrepancies so if you happen to

670
00:27:28,080 --> 00:27:30,000
find a regex online and hoping that it

671
00:27:30,000 --> 00:27:31,620
will work with the era

672
00:27:31,620 --> 00:27:33,659
I mean

673
00:27:33,659 --> 00:27:35,880
change your mind on that okay

674
00:27:35,880 --> 00:27:38,940
and uh but the transpiler itself will

675
00:27:38,940 --> 00:27:40,919
massage the reject such that it works

676
00:27:40,919 --> 00:27:42,840
for the air so it posted the regex for

677
00:27:42,840 --> 00:27:44,880
you change it accordingly as best is

678
00:27:44,880 --> 00:27:47,279
good so that it works with error so

679
00:27:47,279 --> 00:27:50,659
that's another nice feature

680
00:27:51,600 --> 00:27:53,400
so we'll take as an example one of those

681
00:27:53,400 --> 00:27:55,740
rules used by EK fiddle

682
00:27:55,740 --> 00:27:57,480
and

683
00:27:57,480 --> 00:27:59,700
as you see in the highlighted one you

684
00:27:59,700 --> 00:28:02,700
got the first start with the type source

685
00:28:02,700 --> 00:28:03,600
code

686
00:28:03,600 --> 00:28:06,299
and then the rule name in this case web

687
00:28:06,299 --> 00:28:09,360
skimmer Google x-fill and then the logic

688
00:28:09,360 --> 00:28:13,080
the logic is in light yellow

689
00:28:13,080 --> 00:28:14,940
it's a Content match it's very basic

690
00:28:14,940 --> 00:28:17,580
right it's replace image CVV and then

691
00:28:17,580 --> 00:28:19,679
you get the comment optional which is

692
00:28:19,679 --> 00:28:21,059
like Twitter whatever whoever is

693
00:28:21,059 --> 00:28:23,159
referencing this logic see how simple it

694
00:28:23,159 --> 00:28:25,080
is you might think this will cause a lot

695
00:28:25,080 --> 00:28:27,240
of false positive it wouldn't detect

696
00:28:27,240 --> 00:28:28,679
anything interesting but look at it

697
00:28:28,679 --> 00:28:30,299
right you wouldn't imagine this would

698
00:28:30,299 --> 00:28:33,200
deal any useful results

699
00:28:33,240 --> 00:28:34,919
you will see later on that this proves

700
00:28:34,919 --> 00:28:39,299
the the opposite and then rule type

701
00:28:39,299 --> 00:28:42,179
contains other rule types such as the

702
00:28:42,179 --> 00:28:43,799
source code it's part of the source code

703
00:28:43,799 --> 00:28:46,140
as in the body of the page you're

704
00:28:46,140 --> 00:28:47,159
scanning

705
00:28:47,159 --> 00:28:50,640
or it's in the URI or it's an IP or it's

706
00:28:50,640 --> 00:28:52,400
a part of the headers be it in the

707
00:28:52,400 --> 00:28:56,220
request or or the response or it's a

708
00:28:56,220 --> 00:28:58,080
hash of the page itself

709
00:28:58,080 --> 00:29:00,480
or it's an extract skimmer meaning it's

710
00:29:00,480 --> 00:29:03,659
skimmer specific or extract phone as in

711
00:29:03,659 --> 00:29:06,419
like parsing a phone number

712
00:29:06,419 --> 00:29:08,700
or CMS for any content management system

713
00:29:08,700 --> 00:29:12,360
so for CMS the rule changes slightly as

714
00:29:12,360 --> 00:29:13,200
in

715
00:29:13,200 --> 00:29:15,059
if you're checking for example WordPress

716
00:29:15,059 --> 00:29:19,080
sites right so the rule expects a digit

717
00:29:19,080 --> 00:29:21,960
such that finally 10 entries of this

718
00:29:21,960 --> 00:29:24,120
same conduct match on this page and if

719
00:29:24,120 --> 00:29:25,679
you get a hit on that then only that

720
00:29:25,679 --> 00:29:27,419
you'll

721
00:29:27,419 --> 00:29:29,340
you you're sure that you're doing with

722
00:29:29,340 --> 00:29:32,700
the CMS system okay and also the uh the

723
00:29:32,700 --> 00:29:36,899
transpiler accounts for this rule type

724
00:29:36,899 --> 00:29:38,640
so we'll take this rule as an example

725
00:29:38,640 --> 00:29:40,679
and feed it into EK fiddle to your

726
00:29:40,679 --> 00:29:43,500
transpiler and see what it gives us it's

727
00:29:43,500 --> 00:29:44,940
is that some this is what you get first

728
00:29:44,940 --> 00:29:47,760
you get the rule it massages the rule

729
00:29:47,760 --> 00:29:48,419
name

730
00:29:48,419 --> 00:29:50,760
and appends to do it this random number

731
00:29:50,760 --> 00:29:52,799
because in case you have multiple rules

732
00:29:52,799 --> 00:29:54,419
under the same names and you don't want

733
00:29:54,419 --> 00:29:56,159
to end up with some Collision yet it

734
00:29:56,159 --> 00:29:58,320
Advanced this random number to it so

735
00:29:58,320 --> 00:30:00,299
just keep in mind that a random number

736
00:30:00,299 --> 00:30:03,539
will change every time you run the tool

737
00:30:03,539 --> 00:30:04,740
okay

738
00:30:04,740 --> 00:30:07,200
and then this is it

739
00:30:07,200 --> 00:30:09,240
the lot what matters here other than the

740
00:30:09,240 --> 00:30:11,760
metadata is the strings which is always

741
00:30:11,760 --> 00:30:15,240
one condition and of course you can uh

742
00:30:15,240 --> 00:30:18,179
tell it to add no case asking why basics

743
00:30:18,179 --> 00:30:20,760
for and what not okay

744
00:30:20,760 --> 00:30:22,559
just keep in mind about the Simplicity

745
00:30:22,559 --> 00:30:24,299
of this rule okay

746
00:30:24,299 --> 00:30:26,640
so it just proves the point that you

747
00:30:26,640 --> 00:30:27,960
don't have to innovate too much and go

748
00:30:27,960 --> 00:30:29,399
out of your way to come up with some

749
00:30:29,399 --> 00:30:34,559
exciting sophisticated uh rules just

750
00:30:34,559 --> 00:30:37,760
to find something interesting

751
00:30:37,980 --> 00:30:41,760
and thanks of course to uh

752
00:30:41,760 --> 00:30:45,059
all the people who wrote these rules and

753
00:30:45,059 --> 00:30:48,139
made them public actually

754
00:30:49,700 --> 00:30:52,320
experiments so at this point I'm done

755
00:30:52,320 --> 00:30:54,000
with all this I got all the rules I

756
00:30:54,000 --> 00:30:56,340
wrote the framework now what

757
00:30:56,340 --> 00:30:59,220
do I sit and wait so I have to start

758
00:30:59,220 --> 00:31:01,320
scanning some some websites that I might

759
00:31:01,320 --> 00:31:03,779
find interesting

760
00:31:03,779 --> 00:31:05,520
so I the first I decided to get a list

761
00:31:05,520 --> 00:31:07,440
of top 700

762
00:31:07,440 --> 00:31:10,679
000 Alexa websites supposed to be famous

763
00:31:10,679 --> 00:31:13,220
known

764
00:31:13,320 --> 00:31:15,779
and then additional 100 000 WordPress

765
00:31:15,779 --> 00:31:18,720
websites why because it's known that

766
00:31:18,720 --> 00:31:21,120
WordPress are easy to compromise lots of

767
00:31:21,120 --> 00:31:24,179
bugs lots of vulnerabilities right Luca

768
00:31:24,179 --> 00:31:25,919
uh

769
00:31:25,919 --> 00:31:27,600
uh so you will happen to find a lot of

770
00:31:27,600 --> 00:31:30,620
stuff on WordPress sites

771
00:31:30,659 --> 00:31:32,580
and of course the most important one is

772
00:31:32,580 --> 00:31:34,740
Magento CMS sites

773
00:31:34,740 --> 00:31:37,980
so I decided to grab the top 127

774
00:31:37,980 --> 00:31:39,720
000 websites in case you're wondering

775
00:31:39,720 --> 00:31:40,919
from where I get this list especially

776
00:31:40,919 --> 00:31:42,840
for the Magento website it's from a site

777
00:31:42,840 --> 00:31:44,580
called built with

778
00:31:44,580 --> 00:31:46,980
it's a very famous site and it has a lot

779
00:31:46,980 --> 00:31:48,779
of metadata about each of those websites

780
00:31:48,779 --> 00:31:50,760
like how much money they make some of

781
00:31:50,760 --> 00:31:52,080
the features they have enabled so they

782
00:31:52,080 --> 00:31:55,440
are really top sites and they are

783
00:31:55,440 --> 00:31:57,659
money generating machines so this

784
00:31:57,659 --> 00:31:59,460
website being compromised is a huge deal

785
00:31:59,460 --> 00:32:00,720
actually

786
00:32:00,720 --> 00:32:03,779
and just speaking like this for Giovanni

787
00:32:03,779 --> 00:32:06,299
about cryptocurrency just out of

788
00:32:06,299 --> 00:32:07,620
curiosity I don't even include this in

789
00:32:07,620 --> 00:32:10,620
the stats well like still at this point

790
00:32:10,620 --> 00:32:12,779
I still found like two websites

791
00:32:12,779 --> 00:32:14,820
compromised with coin Hive at one point

792
00:32:14,820 --> 00:32:16,860
in time used to be famous for mining

793
00:32:16,860 --> 00:32:19,140
cryptocurrency legitimately

794
00:32:19,140 --> 00:32:21,659
right by these two guys uh funny enough

795
00:32:21,659 --> 00:32:23,399
two websites still have it but according

796
00:32:23,399 --> 00:32:26,940
to public www uh site there's still

797
00:32:26,940 --> 00:32:29,039
around between 700 and 800 sites

798
00:32:29,039 --> 00:32:32,658
compromised with this script

799
00:32:32,760 --> 00:32:34,500
uh

800
00:32:34,500 --> 00:32:37,260
now we go into the actual experiment and

801
00:32:37,260 --> 00:32:39,960
this is where the fun part starts

802
00:32:39,960 --> 00:32:42,600
for example if you take this use game.me

803
00:32:42,600 --> 00:32:44,640
website funny enough the home page is

804
00:32:44,640 --> 00:32:46,620
compromised with a web shell and as you

805
00:32:46,620 --> 00:32:49,020
can see in the script here

806
00:32:49,020 --> 00:32:51,480
like between the text area you can see

807
00:32:51,480 --> 00:32:54,779
that it's expecting a parameter command

808
00:32:54,779 --> 00:32:57,779
and it uses the system shell command to

809
00:32:57,779 --> 00:32:59,520
execute the command on the system it's

810
00:32:59,520 --> 00:33:01,740
as simple as that right you don't need

811
00:33:01,740 --> 00:33:03,960
to write a complex rule to detect stuff

812
00:33:03,960 --> 00:33:06,440
like this

813
00:33:09,799 --> 00:33:13,080
so some of the other stuff here I don't

814
00:33:13,080 --> 00:33:14,820
go into details about the actual

815
00:33:14,820 --> 00:33:16,799
injected code because that's pretty much

816
00:33:16,799 --> 00:33:18,659
irrelevant you can find a lot of

817
00:33:18,659 --> 00:33:20,279
information about this stuff online

818
00:33:20,279 --> 00:33:22,860
but I want to prove the point that

819
00:33:22,860 --> 00:33:25,740
it is detecting stuff with X number of

820
00:33:25,740 --> 00:33:27,720
counts on different websites okay for

821
00:33:27,720 --> 00:33:31,440
example this rule the redirect malicious

822
00:33:31,440 --> 00:33:32,700
re chain

823
00:33:32,700 --> 00:33:36,120
it is detecting melt your stuff on these

824
00:33:36,120 --> 00:33:38,039
three websites

825
00:33:38,039 --> 00:33:39,840
and funny enough probably they all

826
00:33:39,840 --> 00:33:41,279
belong to the same threat actor because

827
00:33:41,279 --> 00:33:44,460
the injected code as shown here is the

828
00:33:44,460 --> 00:33:46,320
same on all three websites

829
00:33:46,320 --> 00:33:48,600
so the injected code is pretty much

830
00:33:48,600 --> 00:33:51,899
whatever this website points to

831
00:33:51,899 --> 00:33:56,580
and then the same goes for the other uh

832
00:33:56,580 --> 00:33:59,658
uh error rules

833
00:33:59,880 --> 00:34:03,899
uh redirectors uh web skimmers and

834
00:34:03,899 --> 00:34:06,260
whatnot

835
00:34:08,219 --> 00:34:11,520
and more on web skimmers

836
00:34:11,520 --> 00:34:13,080
and you

837
00:34:13,080 --> 00:34:15,599
the the interesting one here

838
00:34:15,599 --> 00:34:19,460
for the hex web skimmer rule

839
00:34:19,460 --> 00:34:23,339
uh which uh like one how many three

840
00:34:23,339 --> 00:34:25,739
websites

841
00:34:25,739 --> 00:34:27,719
uh

842
00:34:27,719 --> 00:34:30,719
the one in particular is you've got this

843
00:34:30,719 --> 00:34:33,719
total body care.co.uk

844
00:34:33,719 --> 00:34:35,159
I don't know what happened at this point

845
00:34:35,159 --> 00:34:37,080
it's it's a Magento side it's probably

846
00:34:37,080 --> 00:34:40,020
part of the top 700 Alexa website

847
00:34:40,020 --> 00:34:42,060
if a code is injected the malicious code

848
00:34:42,060 --> 00:34:44,339
is injected twice I don't know why

849
00:34:44,339 --> 00:34:45,839
perhaps the threat actor made a mistake

850
00:34:45,839 --> 00:34:48,239
or whatnot it's functional but it's

851
00:34:48,239 --> 00:34:50,399
injected twice

852
00:34:50,399 --> 00:34:52,619
and

853
00:34:52,619 --> 00:34:54,839
keep note of this one the Image Group

854
00:34:54,839 --> 00:34:58,940
skimmer of this website called AZ

855
00:34:58,940 --> 00:35:02,820
cosplay.com it's some Japanese website

856
00:35:02,820 --> 00:35:05,280
and keep like keep this in mind for now

857
00:35:05,280 --> 00:35:07,080
sorry for that but you have to keep in

858
00:35:07,080 --> 00:35:10,280
mind about this path media 5 icon

859
00:35:10,280 --> 00:35:13,380
badbing.png okay the the funny part is

860
00:35:13,380 --> 00:35:16,020
scanned this website long time ago and I

861
00:35:16,020 --> 00:35:17,820
visited recently again

862
00:35:17,820 --> 00:35:20,040
so the injected JavaScript code on the

863
00:35:20,040 --> 00:35:22,619
page is no longer there but

864
00:35:22,619 --> 00:35:24,960
the PNG image is still there which

865
00:35:24,960 --> 00:35:28,140
contains it uses uh it's like the actual

866
00:35:28,140 --> 00:35:30,119
malicious JavaScript is appended to this

867
00:35:30,119 --> 00:35:32,280
page it sorts to this image okay it's

868
00:35:32,280 --> 00:35:34,859
still there looks like they did not

869
00:35:34,859 --> 00:35:37,200
intentionally clean the page probably

870
00:35:37,200 --> 00:35:39,599
they reverted some other version or

871
00:35:39,599 --> 00:35:41,700
whatnot but the multi score is still

872
00:35:41,700 --> 00:35:43,680
there it's not functional because it's

873
00:35:43,680 --> 00:35:45,780
dormant in this PNG file it needs a

874
00:35:45,780 --> 00:35:49,980
script to load it but it's still there

875
00:35:49,980 --> 00:35:52,880
uh

876
00:35:55,640 --> 00:35:59,520
now you might be wondering okay so you

877
00:35:59,520 --> 00:36:01,500
find all of these perhaps you might have

878
00:36:01,500 --> 00:36:03,839
come across some false positives it can

879
00:36:03,839 --> 00:36:06,000
be all that Glory actually it all

880
00:36:06,000 --> 00:36:07,680
depends on your on the rule you give it

881
00:36:07,680 --> 00:36:10,440
right and I do happen to have some false

882
00:36:10,440 --> 00:36:11,460
positive

883
00:36:11,460 --> 00:36:13,740
and to my surprise it's one false

884
00:36:13,740 --> 00:36:15,599
positive actually it was on one of the

885
00:36:15,599 --> 00:36:16,980
rules that's supposed to match against

886
00:36:16,980 --> 00:36:19,260
some Chinese threat access JavaScript

887
00:36:19,260 --> 00:36:20,160
code

888
00:36:20,160 --> 00:36:22,500
which turned out to be not the case it's

889
00:36:22,500 --> 00:36:25,380
just one false positive out of scanning

890
00:36:25,380 --> 00:36:27,900
thousands of websites so I think

891
00:36:27,900 --> 00:36:30,680
it is good

892
00:36:34,020 --> 00:36:37,200
more on the experiments like some other

893
00:36:37,200 --> 00:36:39,780
statistics

894
00:36:39,780 --> 00:36:41,700
uh sorry again for the false positive

895
00:36:41,700 --> 00:36:43,020
there's another one for spill level

896
00:36:43,020 --> 00:36:47,460
exploit kit so you've got two so far

897
00:36:47,460 --> 00:36:49,980
I'm going to skip through this it's just

898
00:36:49,980 --> 00:36:53,420
some stats for your own reference

899
00:36:54,060 --> 00:36:56,460
I want to focus on Magento because

900
00:36:56,460 --> 00:37:00,320
Magento seems to be a big deal nowadays

901
00:37:00,540 --> 00:37:02,280
I'm pretty sure you're familiar with

902
00:37:02,280 --> 00:37:03,960
Magento just like

903
00:37:03,960 --> 00:37:05,520
WordPress and some other content

904
00:37:05,520 --> 00:37:07,079
management system but impact Magento is

905
00:37:07,079 --> 00:37:08,579
just primarily like for

906
00:37:08,579 --> 00:37:11,640
payment stuff uh like square and whatnot

907
00:37:11,640 --> 00:37:15,119
similar and then in the similar Arena

908
00:37:15,119 --> 00:37:17,160
uh

909
00:37:17,160 --> 00:37:20,339
especially for checking out your buying

910
00:37:20,339 --> 00:37:22,380
product you're entering your credentials

911
00:37:22,380 --> 00:37:24,960
and whatnot these pages that you have to

912
00:37:24,960 --> 00:37:26,040
keep in mind

913
00:37:26,040 --> 00:37:29,940
so the scanning for these top not 127 it

914
00:37:29,940 --> 00:37:31,320
depends on what's active at the time of

915
00:37:31,320 --> 00:37:32,400
scanning

916
00:37:32,400 --> 00:37:35,339
uh started like between July of this

917
00:37:35,339 --> 00:37:37,680
year July 29th

918
00:37:37,680 --> 00:37:41,040
and ended August 7th okay that's how

919
00:37:41,040 --> 00:37:43,200
long it took to scan all these sites so

920
00:37:43,200 --> 00:37:45,660
it's very recent

921
00:37:45,660 --> 00:37:48,599
so in total it took about 10 days to

922
00:37:48,599 --> 00:37:50,480
complete

923
00:37:50,480 --> 00:37:53,280
and most of the stuff that I'm looking

924
00:37:53,280 --> 00:37:56,220
for uh

925
00:37:56,220 --> 00:37:57,420
um

926
00:37:57,420 --> 00:37:59,820
uh they are

927
00:37:59,820 --> 00:38:00,780
um

928
00:38:00,780 --> 00:38:03,740
web skimmers

929
00:38:04,380 --> 00:38:07,500
the number of active websites are 104

930
00:38:07,500 --> 00:38:10,740
000 after about 127 thousands and in

931
00:38:10,740 --> 00:38:13,380
total you get 20 distincture rules fired

932
00:38:13,380 --> 00:38:17,760
against 139 139 sites and only one false

933
00:38:17,760 --> 00:38:19,079
positive

934
00:38:19,079 --> 00:38:23,099
and I'm gonna skip through this

935
00:38:23,099 --> 00:38:25,560
and then go into some of the use cases

936
00:38:25,560 --> 00:38:27,960
so you've got 26 websites infected with

937
00:38:27,960 --> 00:38:29,820
this particular URL rule again it's part

938
00:38:29,820 --> 00:38:33,240
of Mage card a web skimmer campaign

939
00:38:33,240 --> 00:38:35,160
with the same code snippet which implies

940
00:38:35,160 --> 00:38:37,320
that it's highly like it's the same

941
00:38:37,320 --> 00:38:40,619
threat actor targeting these 26 website

942
00:38:40,619 --> 00:38:42,300
except for one domain which is hair

943
00:38:42,300 --> 00:38:44,280
cube.com which we'll come to you with

944
00:38:44,280 --> 00:38:46,200
later which is detected by another

945
00:38:46,200 --> 00:38:49,740
yellow but it's still web skimming

946
00:38:49,740 --> 00:38:52,859
the WSS stands for secure websocket

947
00:38:52,859 --> 00:38:54,480
meaning that the JavaScript that's being

948
00:38:54,480 --> 00:38:55,920
injected communicates over a secure

949
00:38:55,920 --> 00:38:58,079
websocket

950
00:38:58,079 --> 00:39:02,220
and then take it as an example the

951
00:39:02,220 --> 00:39:05,760
like for the anti-sun Box rule like this

952
00:39:05,760 --> 00:39:07,859
is one of the JavaScript code injected

953
00:39:07,859 --> 00:39:10,079
into the page and which decodes to this

954
00:39:10,079 --> 00:39:12,480
page to this code

955
00:39:12,480 --> 00:39:14,760
points to the main.js which is the

956
00:39:14,760 --> 00:39:16,079
actual analysis code it's supposed to do

957
00:39:16,079 --> 00:39:18,800
actual skimming

958
00:39:18,960 --> 00:39:21,060
and then the WSS case for the

959
00:39:21,060 --> 00:39:23,280
haircube.com this is the code that's

960
00:39:23,280 --> 00:39:25,260
being injected which decodes to this one

961
00:39:25,260 --> 00:39:27,900
so that as you can see it's pointing to

962
00:39:27,900 --> 00:39:29,540
an existing

963
00:39:29,540 --> 00:39:32,420
dot Jeff image on the compromise website

964
00:39:32,420 --> 00:39:35,359
and it reads the

965
00:39:35,359 --> 00:39:38,160
JavaScript code from the end of the

966
00:39:38,160 --> 00:39:40,200
image using the slice method with the

967
00:39:40,200 --> 00:39:42,660
negative index and calling it

968
00:39:42,660 --> 00:39:44,700
so it's hiding the code in a legitimate

969
00:39:44,700 --> 00:39:48,240
looking uh image like these are some of

970
00:39:48,240 --> 00:39:49,800
the websites

971
00:39:49,800 --> 00:39:52,740
that are compromised with this Rule and

972
00:39:52,740 --> 00:39:54,780
they're all famous websites actually and

973
00:39:54,780 --> 00:39:56,640
on like at the end of the table you can

974
00:39:56,640 --> 00:40:00,359
see the uh an image of that like a logo

975
00:40:00,359 --> 00:40:02,700
of that image residing on the on the on

976
00:40:02,700 --> 00:40:04,740
the system here one thing to keep in

977
00:40:04,740 --> 00:40:07,680
mind is 0.9 like you see the I'm not

978
00:40:07,680 --> 00:40:10,800
sure if the third actor made an error or

979
00:40:10,800 --> 00:40:12,000
whatnot I don't know what happened at

980
00:40:12,000 --> 00:40:14,339
that point the path actually doesn't

981
00:40:14,339 --> 00:40:16,920
exist like this path doesn't exist on

982
00:40:16,920 --> 00:40:19,079
the compromise server nor the file name

983
00:40:19,079 --> 00:40:21,060
uh

984
00:40:21,060 --> 00:40:23,220
so yeah I've been told that my time is

985
00:40:23,220 --> 00:40:25,079
over unfortunately there's still more to

986
00:40:25,079 --> 00:40:27,000
cover

987
00:40:27,000 --> 00:40:29,579
but it is what it is I would I hope that

988
00:40:29,579 --> 00:40:30,780
you will get the time to go through the

989
00:40:30,780 --> 00:40:32,579
slides there is more about the

990
00:40:32,579 --> 00:40:36,079
experimental uh stuff

991
00:40:36,540 --> 00:40:40,859
so again more on what it found here

992
00:40:40,859 --> 00:40:43,619
like bomb skimmer you've got these like

993
00:40:43,619 --> 00:40:45,599
the top four websites those part of the

994
00:40:45,599 --> 00:40:46,619
same third active since they are

995
00:40:46,619 --> 00:40:50,359
opponent to the same exfiltration domain

996
00:40:54,240 --> 00:40:56,760
just more skimmers it found just here

997
00:40:56,760 --> 00:40:59,339
like just one interesting case

998
00:40:59,339 --> 00:41:02,160
like for detecting malicious stuff on

999
00:41:02,160 --> 00:41:05,220
domain number three dileza.com the

1000
00:41:05,220 --> 00:41:07,380
injected code was coming out it's a

1001
00:41:07,380 --> 00:41:09,060
malicious code but it was coming it out

1002
00:41:09,060 --> 00:41:10,980
on the page which I don't know why

1003
00:41:10,980 --> 00:41:13,980
and the same goes for uh four

1004
00:41:13,980 --> 00:41:16,680
the four is stands out a bit more

1005
00:41:16,680 --> 00:41:20,760
because if the injected code was

1006
00:41:20,760 --> 00:41:23,460
attempted like to be injected twice

1007
00:41:23,460 --> 00:41:26,280
whereas in the second time just a

1008
00:41:26,280 --> 00:41:27,960
snippet of it was injected not the whole

1009
00:41:27,960 --> 00:41:29,820
code as if the third actor was I know I

1010
00:41:29,820 --> 00:41:31,740
steep at that point in time drawing or I

1011
00:41:31,740 --> 00:41:33,919
don't know

1012
00:41:35,820 --> 00:41:38,579
again more on skimmers

1013
00:41:38,579 --> 00:41:40,140
just to prove the point that it's on

1014
00:41:40,140 --> 00:41:41,220
stuff

1015
00:41:41,220 --> 00:41:43,859
and this one is specific to

1016
00:41:43,859 --> 00:41:46,079
that it uses with websockets secure

1017
00:41:46,079 --> 00:41:47,640
protocol

1018
00:41:47,640 --> 00:41:49,500
it compromise these two websites that

1019
00:41:49,500 --> 00:41:51,140
belongs to business and Industrial

1020
00:41:51,140 --> 00:41:54,119
sector and this is the funny enough they

1021
00:41:54,119 --> 00:41:58,260
use the same exclusive key

1022
00:41:59,099 --> 00:42:02,700
and other rules statistics

1023
00:42:02,700 --> 00:42:06,119
Journal stats I mean

1024
00:42:06,119 --> 00:42:07,859
I will take some time I'm sorry about

1025
00:42:07,859 --> 00:42:10,740
that uh

1026
00:42:10,740 --> 00:42:12,300
I'm gonna skip through this one but this

1027
00:42:12,300 --> 00:42:13,859
one I have to take some time on it so

1028
00:42:13,859 --> 00:42:16,560
just going back to the hashing of the

1029
00:42:16,560 --> 00:42:18,780
page itself

1030
00:42:18,780 --> 00:42:21,660
so in total you get a thousand three

1031
00:42:21,660 --> 00:42:23,339
hundred and twenty eight unique caches

1032
00:42:23,339 --> 00:42:25,260
remember we're scanning one or four

1033
00:42:25,260 --> 00:42:27,300
thousand Magento websites and how come

1034
00:42:27,300 --> 00:42:29,640
we have only one three two eight unique

1035
00:42:29,640 --> 00:42:31,560
hashes

1036
00:42:31,560 --> 00:42:35,040
right you would expect 104 000 unique

1037
00:42:35,040 --> 00:42:37,560
hashes of the page content because some

1038
00:42:37,560 --> 00:42:40,079
of them are belong to the same primary

1039
00:42:40,079 --> 00:42:44,520
domain right so this this gives us like

1040
00:42:44,520 --> 00:42:46,859
a key Point here that the detection

1041
00:42:46,859 --> 00:42:48,599
ratio is not against one or four

1042
00:42:48,599 --> 00:42:51,060
thousand Pages it's against one three

1043
00:42:51,060 --> 00:42:54,300
two eight pages okay so if so you found

1044
00:42:54,300 --> 00:42:58,140
139 malicious website out of 1 328

1045
00:42:58,140 --> 00:42:59,700
websites

1046
00:42:59,700 --> 00:43:01,380
and of course if you get some notes

1047
00:43:01,380 --> 00:43:02,819
about what each of those hashes

1048
00:43:02,819 --> 00:43:05,400
represent in terms of like the number of

1049
00:43:05,400 --> 00:43:07,500
count

1050
00:43:07,500 --> 00:43:10,940
I'm gonna skip through this one

1051
00:43:13,920 --> 00:43:16,740
some other stuff

1052
00:43:16,740 --> 00:43:19,140
some of the stuff some of the libraries

1053
00:43:19,140 --> 00:43:21,618
I used

1054
00:43:22,260 --> 00:43:24,720
references

1055
00:43:24,720 --> 00:43:27,599
thanks to Jerome cigar from alright for

1056
00:43:27,599 --> 00:43:29,220
providing these rules

1057
00:43:29,220 --> 00:43:31,319
a security blog for documenting lots of

1058
00:43:31,319 --> 00:43:32,640
these web skimmers

1059
00:43:32,640 --> 00:43:34,380
sensic research

1060
00:43:34,380 --> 00:43:37,079
risk IQ group IP and various other

1061
00:43:37,079 --> 00:43:39,740
people on Twitter

1062
00:43:39,839 --> 00:43:41,700
of course not you're not going to get a

1063
00:43:41,700 --> 00:43:43,920
demo

1064
00:43:43,920 --> 00:43:45,540
conclusion

1065
00:43:45,540 --> 00:43:46,800
I guess you have to draw your own

1066
00:43:46,800 --> 00:43:49,500
conclusion by this time

1067
00:43:49,500 --> 00:43:52,640
and thank you

1068
00:43:54,720 --> 00:44:01,020
[Music]

