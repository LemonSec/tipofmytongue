1
00:00:56,320 --> 00:00:56,640
hi

2
00:00:56,640 --> 00:00:59,520
everyone welcome back this is lino

3
00:00:59,520 --> 00:01:00,160
speaking

4
00:01:00,160 --> 00:01:02,480
i will get you through this really

5
00:01:02,480 --> 00:01:04,080
intense afternoon

6
00:01:04,080 --> 00:01:06,960
this morning we saw many interesting

7
00:01:06,960 --> 00:01:07,920
talks

8
00:01:07,920 --> 00:01:11,520
from malware analysis of android malware

9
00:01:11,520 --> 00:01:15,119
to the possibility to tamper a

10
00:01:15,119 --> 00:01:18,640
executable file and to

11
00:01:18,640 --> 00:01:21,840
reverse engineer firmware

12
00:01:21,840 --> 00:01:24,960
in order to find and exploit

13
00:01:24,960 --> 00:01:28,240
vulnerabilities in this afternoon we'll

14
00:01:28,240 --> 00:01:31,920
continue this kind of deeply technical

15
00:01:31,920 --> 00:01:36,240
uh thoughts and but before to start

16
00:01:36,240 --> 00:01:40,159
i just want to provide you a couple of

17
00:01:40,159 --> 00:01:43,520
uh service information uh the first of

18
00:01:43,520 --> 00:01:44,079
all

19
00:01:44,079 --> 00:01:48,000
i will continue to uh encourage you to

20
00:01:48,000 --> 00:01:51,119
use our chatting slido in order to

21
00:01:51,119 --> 00:01:55,759
perform um question uh to our speaker

22
00:01:55,759 --> 00:01:59,200
and you can find in the general chat

23
00:01:59,200 --> 00:02:02,399
uh and a poll a sort of survey in order

24
00:02:02,399 --> 00:02:04,560
to understand from you guys

25
00:02:04,560 --> 00:02:07,680
uh which is the which was the

26
00:02:07,680 --> 00:02:11,440
most interesting uh talk on this morning

27
00:02:11,440 --> 00:02:13,200
i know that it's quite a difficult

28
00:02:13,200 --> 00:02:15,200
choice because all of them were really

29
00:02:15,200 --> 00:02:16,080
good

30
00:02:16,080 --> 00:02:18,160
but you know if you have some

31
00:02:18,160 --> 00:02:20,560
preferences please tell us

32
00:02:20,560 --> 00:02:24,160
uh secondly i know that many of you guys

33
00:02:24,160 --> 00:02:27,599
uh supported us by uh performing

34
00:02:27,599 --> 00:02:30,080
giving us some donation that is really

35
00:02:30,080 --> 00:02:32,160
really appreciated because otherwise

36
00:02:32,160 --> 00:02:34,319
we want to be able to provide to you

37
00:02:34,319 --> 00:02:36,800
this kind of conferences you know

38
00:02:36,800 --> 00:02:40,480
as well as the some sponsor support

39
00:02:40,480 --> 00:02:44,000
and many of you guys uh um

40
00:02:44,000 --> 00:02:46,560
perform the donation in order to to

41
00:02:46,560 --> 00:02:47,680
reach the

42
00:02:47,680 --> 00:02:51,200
uh t-shirt and the hoodie

43
00:02:51,200 --> 00:02:55,840
uh don't worry we are providing with uh

44
00:02:55,840 --> 00:02:59,599
the expedition of all this kind of gift

45
00:02:59,599 --> 00:03:02,640
and thanks again

46
00:03:02,640 --> 00:03:05,920
so uh i hope your lunch was good

47
00:03:05,920 --> 00:03:08,720
but even light enough because the next

48
00:03:08,720 --> 00:03:10,400
talk is one of the most

49
00:03:10,400 --> 00:03:12,800
hardcore technical thoughts of no hat

50
00:03:12,800 --> 00:03:14,319
2020.

51
00:03:14,319 --> 00:03:17,200
alexander ermulov and dmitry frolov are

52
00:03:17,200 --> 00:03:18,720
two security researchers

53
00:03:18,720 --> 00:03:21,440
highly specialized in firmware analysis

54
00:03:21,440 --> 00:03:22,400
their work about

55
00:03:22,400 --> 00:03:24,560
low-level security protection are

56
00:03:24,560 --> 00:03:26,720
absolutely amazing

57
00:03:26,720 --> 00:03:29,040
and today they will share with us their

58
00:03:29,040 --> 00:03:30,840
brand new research about the

59
00:03:30,840 --> 00:03:33,120
exploitation of vulnerabilities

60
00:03:33,120 --> 00:03:36,159
affecting intel acms i

61
00:03:36,159 --> 00:03:37,599
really think that you need to

62
00:03:37,599 --> 00:03:39,840
concentrate a lot in order to follow

63
00:03:39,840 --> 00:03:40,640
this kind of

64
00:03:40,640 --> 00:03:44,560
amazing torque so alex dimitri

65
00:03:44,560 --> 00:03:47,599
the stage is here

66
00:03:48,080 --> 00:03:49,920
hello everyone thank you for being

67
00:03:49,920 --> 00:03:52,000
online and attending to this event

68
00:03:52,000 --> 00:03:53,920
my name is alex and with the help of my

69
00:03:53,920 --> 00:03:55,439
colleague dmitry

70
00:03:55,439 --> 00:03:57,439
i'm going to deliver this research to

71
00:03:57,439 --> 00:03:59,360
you

72
00:03:59,360 --> 00:04:02,159
uh a few words about ourselves as a

73
00:04:02,159 --> 00:04:02,799
start

74
00:04:02,799 --> 00:04:05,519
i've been researching x86 platform

75
00:04:05,519 --> 00:04:06,319
security for

76
00:04:06,319 --> 00:04:08,319
quite a long time this work covers

77
00:04:08,319 --> 00:04:10,560
subjects like intel management engine

78
00:04:10,560 --> 00:04:11,439
intel google

79
00:04:11,439 --> 00:04:15,200
and ufi biosecurity

80
00:04:15,200 --> 00:04:17,839
hello everyone my name is dmitry kaloff

81
00:04:17,839 --> 00:04:19,759
i am a security researcher at digital

82
00:04:19,759 --> 00:04:20,560
security

83
00:04:20,560 --> 00:04:23,199
i specialize in firmware analysis mostly

84
00:04:23,199 --> 00:04:25,120
targeting intel embedded systems

85
00:04:25,120 --> 00:04:29,440
and technologies for example efi bias

86
00:04:29,440 --> 00:04:32,000
today we're going to talk about issues

87
00:04:32,000 --> 00:04:33,040
in low-level

88
00:04:33,040 --> 00:04:35,759
intel architecture components such as

89
00:04:35,759 --> 00:04:36,639
microcode

90
00:04:36,639 --> 00:04:39,040
authenticated code models uh the

91
00:04:39,040 --> 00:04:39,919
previous

92
00:04:39,919 --> 00:04:42,000
previous versions of this talk mostly

93
00:04:42,000 --> 00:04:43,759
were about finding and exploiting

94
00:04:43,759 --> 00:04:45,840
vulnerabilities in intel boot guard and

95
00:04:45,840 --> 00:04:48,720
intel trusted execution technology

96
00:04:48,720 --> 00:04:50,800
this time we would like to cover one of

97
00:04:50,800 --> 00:04:53,280
the most protected technologies i mean

98
00:04:53,280 --> 00:04:54,880
from the outer world

99
00:04:54,880 --> 00:04:56,880
there's so little in public about this

100
00:04:56,880 --> 00:04:58,639
one mostly because

101
00:04:58,639 --> 00:05:00,720
one of its main component is encrypted

102
00:05:00,720 --> 00:05:02,000
and nobody have

103
00:05:02,000 --> 00:05:06,160
any idea how it actually works

104
00:05:06,880 --> 00:05:10,960
and we'll start with some basics

105
00:05:10,960 --> 00:05:13,440
to make sure most listeners understand

106
00:05:13,440 --> 00:05:15,199
what we are talking about

107
00:05:15,199 --> 00:05:17,919
the first part is cpu root of trust's

108
00:05:17,919 --> 00:05:20,479
overview

109
00:05:20,479 --> 00:05:23,360
every modern cpu intel cpu has a

110
00:05:23,360 --> 00:05:24,639
processor of course

111
00:05:24,639 --> 00:05:27,840
the bootstrap processor which starts

112
00:05:27,840 --> 00:05:28,400
when

113
00:05:28,400 --> 00:05:30,880
powering on this core begins executing

114
00:05:30,880 --> 00:05:33,520
the start instructions in firmware

115
00:05:33,520 --> 00:05:36,560
the application processors which

116
00:05:36,560 --> 00:05:39,919
are started by bootstrap core

117
00:05:39,919 --> 00:05:42,000
when ready and needed an optional

118
00:05:42,000 --> 00:05:43,039
graphics core

119
00:05:43,039 --> 00:05:45,680
and integrated memory controller a level

120
00:05:45,680 --> 00:05:46,639
three cache

121
00:05:46,639 --> 00:05:49,440
shared between the course and some input

122
00:05:49,440 --> 00:05:52,160
output logic

123
00:05:52,160 --> 00:05:54,479
each cpu core has read only memory

124
00:05:54,479 --> 00:05:56,400
containing the cpu microcode

125
00:05:56,400 --> 00:05:58,720
which is programmed while manufacturing

126
00:05:58,720 --> 00:06:00,080
the device

127
00:06:00,080 --> 00:06:02,400
and this is our first route or root of

128
00:06:02,400 --> 00:06:03,440
trust

129
00:06:03,440 --> 00:06:06,160
control unit after each pouring on loads

130
00:06:06,160 --> 00:06:08,240
this micro code into a faster

131
00:06:08,240 --> 00:06:10,560
and with writable memory called control

132
00:06:10,560 --> 00:06:11,520
store some

133
00:06:11,520 --> 00:06:14,960
sources called patchrom so what is the

134
00:06:14,960 --> 00:06:16,000
microcode

135
00:06:16,000 --> 00:06:18,479
public sources tell us this is a program

136
00:06:18,479 --> 00:06:20,000
written in hardware level

137
00:06:20,000 --> 00:06:22,319
instructions to implement higher level

138
00:06:22,319 --> 00:06:23,360
instructions

139
00:06:23,360 --> 00:06:26,160
you can see an x86 inverted move ass

140
00:06:26,160 --> 00:06:28,240
instruction interpretation here for

141
00:06:28,240 --> 00:06:30,240
example

142
00:06:30,240 --> 00:06:32,240
despite back the previous example was

143
00:06:32,240 --> 00:06:34,080
taken from a science article

144
00:06:34,080 --> 00:06:36,479
this one was taken from the real system

145
00:06:36,479 --> 00:06:37,680
from the real dump

146
00:06:37,680 --> 00:06:40,560
by one of the authors of microcode red

147
00:06:40,560 --> 00:06:41,600
pill project

148
00:06:41,600 --> 00:06:44,720
who used to dump the micro code from

149
00:06:44,720 --> 00:06:46,840
apollo lake

150
00:06:46,840 --> 00:06:49,199
platform the thing is

151
00:06:49,199 --> 00:06:51,199
and it is well known for years the

152
00:06:51,199 --> 00:06:52,560
microcode can

153
00:06:52,560 --> 00:06:55,039
box whether these are security issues or

154
00:06:55,039 --> 00:06:56,160
not

155
00:06:56,160 --> 00:06:58,400
so it should be updatable remember the

156
00:06:58,400 --> 00:06:59,759
original microcodes

157
00:06:59,759 --> 00:07:01,520
is stored inside the cpu in a

158
00:07:01,520 --> 00:07:03,039
non-updatable memory

159
00:07:03,039 --> 00:07:05,759
hence the updated version of microcode

160
00:07:05,759 --> 00:07:06,880
should be replaced

161
00:07:06,880 --> 00:07:10,000
in the control store patch run

162
00:07:10,000 --> 00:07:12,639
every time cpu is powered on and you can

163
00:07:12,639 --> 00:07:14,560
notice such updates are included in

164
00:07:14,560 --> 00:07:16,080
system program

165
00:07:16,080 --> 00:07:17,759
as you can see there is a firmware

166
00:07:17,759 --> 00:07:19,680
interface table that contains

167
00:07:19,680 --> 00:07:22,479
entries pointing to a microcode updates

168
00:07:22,479 --> 00:07:23,199
please note

169
00:07:23,199 --> 00:07:28,319
these the updates are cpu model specific

170
00:07:28,319 --> 00:07:32,479
obviously uh the fit is a part of

171
00:07:32,479 --> 00:07:34,720
system firmware store on spi flash

172
00:07:34,720 --> 00:07:35,520
memory

173
00:07:35,520 --> 00:07:37,520
you can see a common image structure

174
00:07:37,520 --> 00:07:39,759
here there is a pointer at the end of

175
00:07:39,759 --> 00:07:41,759
the bias region pointing to a

176
00:07:41,759 --> 00:07:44,720
fit this is how the modern instance

177
00:07:44,720 --> 00:07:46,800
intel cpu

178
00:07:46,800 --> 00:07:49,440
finds and loads microcode update in an

179
00:07:49,440 --> 00:07:50,720
automatized way

180
00:07:50,720 --> 00:07:54,720
prior to execution of the bias

181
00:07:54,879 --> 00:07:58,080
what else do we know about fit well it

182
00:07:58,080 --> 00:07:59,360
had started to be

183
00:07:59,360 --> 00:08:01,680
a required element for intel

184
00:08:01,680 --> 00:08:02,879
architecture

185
00:08:02,879 --> 00:08:04,879
since introduction of intel google card

186
00:08:04,879 --> 00:08:06,800
technology because it contains

187
00:08:06,800 --> 00:08:09,440
contains entries to point to boot guard

188
00:08:09,440 --> 00:08:10,400
components

189
00:08:10,400 --> 00:08:12,639
allowing the cpu to verify the integrity

190
00:08:12,639 --> 00:08:13,599
of the bias

191
00:08:13,599 --> 00:08:16,960
before executing it also like i told

192
00:08:16,960 --> 00:08:19,120
before fit is used to update the cpu

193
00:08:19,120 --> 00:08:19,919
micro code

194
00:08:19,919 --> 00:08:22,080
before running any firmware and the

195
00:08:22,080 --> 00:08:23,440
force starting intel

196
00:08:23,440 --> 00:08:26,639
card now let's see

197
00:08:26,639 --> 00:08:28,720
what a microcode update binary looks

198
00:08:28,720 --> 00:08:30,160
like it starts

199
00:08:30,160 --> 00:08:32,719
with the main headers containing such

200
00:08:32,719 --> 00:08:33,519
fields as

201
00:08:33,519 --> 00:08:36,640
version date cpu model code a processor

202
00:08:36,640 --> 00:08:38,080
signature

203
00:08:38,080 --> 00:08:41,599
checksum etc this header is followed by

204
00:08:41,599 --> 00:08:44,399
an external header

205
00:08:44,399 --> 00:08:46,959
this is the external extended header

206
00:08:46,959 --> 00:08:48,080
structure

207
00:08:48,080 --> 00:08:51,360
uh seems like a common intel sign binary

208
00:08:51,360 --> 00:08:54,880
structure also used in intel csmb

209
00:08:54,880 --> 00:08:56,640
firmware for example

210
00:08:56,640 --> 00:08:59,600
it also has fields like version sizes

211
00:08:59,600 --> 00:09:02,160
processor signature security version

212
00:09:02,160 --> 00:09:02,880
number

213
00:09:02,880 --> 00:09:04,959
to deprecate loading the downgraded

214
00:09:04,959 --> 00:09:06,959
versions of microcode once the given

215
00:09:06,959 --> 00:09:08,640
version is loaded

216
00:09:08,640 --> 00:09:11,680
also this header has an rsi public key

217
00:09:11,680 --> 00:09:12,720
and signature

218
00:09:12,720 --> 00:09:15,279
allowing the cpu to verify the integrity

219
00:09:15,279 --> 00:09:17,200
of the microcode update before

220
00:09:17,200 --> 00:09:21,040
loading it the hash public key is hard

221
00:09:21,040 --> 00:09:22,720
coded into the cpu and

222
00:09:22,720 --> 00:09:25,519
based on my observations can stay the

223
00:09:25,519 --> 00:09:28,000
same for a few cpu generations

224
00:09:28,000 --> 00:09:29,839
and even for production and

225
00:09:29,839 --> 00:09:31,040
pre-production

226
00:09:31,040 --> 00:09:34,880
versions of platforms the micro code

227
00:09:34,880 --> 00:09:35,600
update

228
00:09:35,600 --> 00:09:37,920
body is unfortunately encrypted so

229
00:09:37,920 --> 00:09:39,120
almost no one

230
00:09:39,120 --> 00:09:41,120
actually knows what else the microcode

231
00:09:41,120 --> 00:09:42,320
is capable of

232
00:09:42,320 --> 00:09:44,720
besides some startup behavior like like

233
00:09:44,720 --> 00:09:46,560
code updates loading and

234
00:09:46,560 --> 00:09:49,040
intel goodguard by the way a few months

235
00:09:49,040 --> 00:09:51,040
ago the decrypted microcode image was

236
00:09:51,040 --> 00:09:52,880
dumped from a polar lake system on a

237
00:09:52,880 --> 00:09:53,200
chip

238
00:09:53,200 --> 00:09:56,959
using gtx to intel dcm it could be used

239
00:09:56,959 --> 00:10:00,160
as a start to research its contents

240
00:10:00,160 --> 00:10:04,160
i've mentioned this project before

241
00:10:04,160 --> 00:10:05,920
here are some collection of facts about

242
00:10:05,920 --> 00:10:07,600
microcode implementation

243
00:10:07,600 --> 00:10:10,640
like was told uh before it implements

244
00:10:10,640 --> 00:10:12,000
cpu and structures

245
00:10:12,000 --> 00:10:14,240
it configures the execution logic online

246
00:10:14,240 --> 00:10:16,399
that's our box like side channel

247
00:10:16,399 --> 00:10:19,760
fixed implements some

248
00:10:19,760 --> 00:10:22,640
startup behavior like fit parsing this

249
00:10:22,640 --> 00:10:25,120
is how it can look microcode update from

250
00:10:25,120 --> 00:10:29,040
fit and it also loads and executes

251
00:10:29,040 --> 00:10:31,600
google authenticated code models

252
00:10:31,600 --> 00:10:35,440
from firmware interface table or not

253
00:10:35,440 --> 00:10:39,200
a few words about acms

254
00:10:39,200 --> 00:10:41,920
these are signed and sometimes encrypted

255
00:10:41,920 --> 00:10:42,880
intel code

256
00:10:42,880 --> 00:10:46,880
models with with the similar structure

257
00:10:46,880 --> 00:10:49,040
with the common intel binary header they

258
00:10:49,040 --> 00:10:50,720
they are loaded into a

259
00:10:50,720 --> 00:10:53,920
uh shared level three cache

260
00:10:53,920 --> 00:10:56,720
i guess because of jurong is not trusted

261
00:10:56,720 --> 00:10:58,480
by the way some public

262
00:10:58,480 --> 00:11:02,720
sources call it is a serum

263
00:11:02,720 --> 00:11:05,839
these models executed from there only by

264
00:11:05,839 --> 00:11:09,040
bsp bootstrap core other cores should be

265
00:11:09,040 --> 00:11:10,320
sleeping

266
00:11:10,320 --> 00:11:14,640
they serve as a root roots of trusts

267
00:11:14,640 --> 00:11:17,279
and as an implementation for such

268
00:11:17,279 --> 00:11:18,480
technologies like

269
00:11:18,480 --> 00:11:20,959
intel boot guard intel trusted execution

270
00:11:20,959 --> 00:11:21,920
technology

271
00:11:21,920 --> 00:11:24,320
intel bias guard also known as platform

272
00:11:24,320 --> 00:11:26,480
flush armory technology

273
00:11:26,480 --> 00:11:29,120
quite interesting notice uh intel bias

274
00:11:29,120 --> 00:11:32,000
guard acm and microcode updates binary

275
00:11:32,000 --> 00:11:32,399
are

276
00:11:32,399 --> 00:11:34,959
both encrypted and signed with the same

277
00:11:34,959 --> 00:11:37,279
keys

278
00:11:38,959 --> 00:11:41,920
let's look at the acm header format we

279
00:11:41,920 --> 00:11:44,399
have already saw something similar today

280
00:11:44,399 --> 00:11:47,120
in the micro code header structure

281
00:11:47,120 --> 00:11:48,880
chipset id build which is

282
00:11:48,880 --> 00:11:51,279
always your build date security version

283
00:11:51,279 --> 00:11:53,200
number and error size signature with the

284
00:11:53,200 --> 00:11:56,160
key to verify

285
00:11:56,160 --> 00:12:00,160
so uh now we can see all cpu routes of

286
00:12:00,160 --> 00:12:02,880
trust in a single ufi biased image

287
00:12:02,880 --> 00:12:04,720
firmware the base table microcode

288
00:12:04,720 --> 00:12:06,639
updates intel

289
00:12:06,639 --> 00:12:10,800
trusted execution sm acm into bias guard

290
00:12:10,800 --> 00:12:12,399
acm and it will

291
00:12:12,399 --> 00:12:15,920
acm now let's have a tutorial talk about

292
00:12:15,920 --> 00:12:19,440
intel bios guard technology so why the

293
00:12:19,440 --> 00:12:21,200
vendors need intel bias guard

294
00:12:21,200 --> 00:12:22,880
the most common spiritual protection

295
00:12:22,880 --> 00:12:24,720
mechanisms bias lock enable and

296
00:12:24,720 --> 00:12:26,639
virus write protect bits allow to

297
00:12:26,639 --> 00:12:28,959
restrict the capability of rising bars

298
00:12:28,959 --> 00:12:30,720
so only the code running under system

299
00:12:30,720 --> 00:12:32,560
management mode can do that

300
00:12:32,560 --> 00:12:35,040
this approach has an obvious issue sram

301
00:12:35,040 --> 00:12:37,519
software stack has a lot of code written

302
00:12:37,519 --> 00:12:38,800
by different vendors

303
00:12:38,800 --> 00:12:40,959
and its quality is bad sometimes making

304
00:12:40,959 --> 00:12:42,560
smart vulnerable to privileged

305
00:12:42,560 --> 00:12:44,399
escalations from ring zero

306
00:12:44,399 --> 00:12:46,160
that's why platform flash harmonic

307
00:12:46,160 --> 00:12:47,680
technology was created

308
00:12:47,680 --> 00:12:50,240
later renamed as intel bios guard it

309
00:12:50,240 --> 00:12:51,519
introduces a small

310
00:12:51,519 --> 00:12:54,320
intel signed piece of code by asgard acm

311
00:12:54,320 --> 00:12:56,240
grand advancing capability to write to

312
00:12:56,240 --> 00:12:57,760
spi flash memory

313
00:12:57,760 --> 00:13:00,160
if this technology is enabled all right

314
00:13:00,160 --> 00:13:02,000
atoms from any other modes

315
00:13:02,000 --> 00:13:05,600
are blocked there are a few indicators

316
00:13:05,600 --> 00:13:07,680
allowing to detect if your pc has into

317
00:13:07,680 --> 00:13:08,560
bios guard

318
00:13:08,560 --> 00:13:10,560
firstly they beat 35 in platform

319
00:13:10,560 --> 00:13:12,480
information which indicates if the

320
00:13:12,480 --> 00:13:14,880
technology is supported by the hardware

321
00:13:14,880 --> 00:13:18,320
secondly the 110 emission

322
00:13:18,320 --> 00:13:20,560
we will refer to it as abuse guard

323
00:13:20,560 --> 00:13:22,079
control msr

324
00:13:22,079 --> 00:13:24,639
if bit 1 is set it means intel bios gut

325
00:13:24,639 --> 00:13:26,399
is enabled and right operations to

326
00:13:26,399 --> 00:13:27,040
especially

327
00:13:27,040 --> 00:13:29,360
memory are only possible through bias

328
00:13:29,360 --> 00:13:30,560
guard acm

329
00:13:30,560 --> 00:13:33,120
there is also a lock b to prevent

330
00:13:33,120 --> 00:13:34,160
further changes

331
00:13:34,160 --> 00:13:36,160
this register once the configuration is

332
00:13:36,160 --> 00:13:37,360
applied

333
00:13:37,360 --> 00:13:40,079
please note there are a few other wires

334
00:13:40,079 --> 00:13:41,440
guard related msrs

335
00:13:41,440 --> 00:13:43,519
we will talk about them a bit later

336
00:13:43,519 --> 00:13:45,760
however bias guard control is the only

337
00:13:45,760 --> 00:13:47,680
one from the fleece available for

338
00:13:47,680 --> 00:13:49,199
operating system

339
00:13:49,199 --> 00:13:51,760
any attempt to read the others not from

340
00:13:51,760 --> 00:13:52,399
smm

341
00:13:52,399 --> 00:13:55,040
will cause machine check exception by

342
00:13:55,040 --> 00:13:56,880
the way we have noticed that starting

343
00:13:56,880 --> 00:13:58,160
from fourth generation

344
00:13:58,160 --> 00:14:01,360
possible of intel cpus smsr cannot be

345
00:14:01,360 --> 00:14:02,560
zero at runtime

346
00:14:02,560 --> 00:14:04,079
because in case bios guard is not

347
00:14:04,079 --> 00:14:06,399
configured this register locks itself is

348
00:14:06,399 --> 00:14:09,519
setting the zero bit

349
00:14:12,160 --> 00:14:14,480
uh intel bias guard support in firmware

350
00:14:14,480 --> 00:14:17,040
is implemented in a few modules inside

351
00:14:17,040 --> 00:14:21,040
pei dxe smm pages of uefi buyers

352
00:14:21,040 --> 00:14:21,920
workflow

353
00:14:21,920 --> 00:14:23,680
however the most common module is

354
00:14:23,680 --> 00:14:25,279
biosgard services

355
00:14:25,279 --> 00:14:27,600
this one seems to be developed by intel

356
00:14:27,600 --> 00:14:29,760
and shared between all independent virus

357
00:14:29,760 --> 00:14:31,360
vendors i believe

358
00:14:31,360 --> 00:14:34,160
this module has almost all bias guard

359
00:14:34,160 --> 00:14:35,680
support logic

360
00:14:35,680 --> 00:14:38,160
however if you see this module inside

361
00:14:38,160 --> 00:14:39,600
the firmware of your pc

362
00:14:39,600 --> 00:14:41,199
this doesn't necessarily mean this

363
00:14:41,199 --> 00:14:42,800
technology is working

364
00:14:42,800 --> 00:14:44,959
only bias guard control emissary can

365
00:14:44,959 --> 00:14:48,959
tell you if it is enabled or not

366
00:14:49,680 --> 00:14:52,160
the components of bios guard technology

367
00:14:52,160 --> 00:14:52,720
are

368
00:14:52,720 --> 00:14:55,199
bias guard acm encrypted executable file

369
00:14:55,199 --> 00:14:56,880
that implements the technology

370
00:14:56,880 --> 00:14:59,120
bias guard platform data table table

371
00:14:59,120 --> 00:15:01,120
that provides some specific information

372
00:15:01,120 --> 00:15:02,480
about the system

373
00:15:02,480 --> 00:15:05,040
includes signed flash area map important

374
00:15:05,040 --> 00:15:06,480
part of the technology that we will

375
00:15:06,480 --> 00:15:07,920
discuss later

376
00:15:07,920 --> 00:15:09,920
files got update package the container

377
00:15:09,920 --> 00:15:11,120
from the data

378
00:15:11,120 --> 00:15:13,279
buyer's guard update package certificate

379
00:15:13,279 --> 00:15:14,240
and buys guard

380
00:15:14,240 --> 00:15:17,040
lock the component that allows caller to

381
00:15:17,040 --> 00:15:19,199
collect data about bios guard acm

382
00:15:19,199 --> 00:15:20,480
execution

383
00:15:20,480 --> 00:15:22,639
the part of these components is arranged

384
00:15:22,639 --> 00:15:23,760
as an array

385
00:15:23,760 --> 00:15:26,880
in smrm by bios guard services this area

386
00:15:26,880 --> 00:15:28,959
is called bias guard directory

387
00:15:28,959 --> 00:15:30,639
in the picture you can see how bios

388
00:15:30,639 --> 00:15:32,720
guard directory looks in actual isom ram

389
00:15:32,720 --> 00:15:33,440
dump

390
00:15:33,440 --> 00:15:34,880
bias guard directory can be

391
00:15:34,880 --> 00:15:38,079
distinguished by its signature bgld

392
00:15:38,079 --> 00:15:42,000
pfit on older systems after you find the

393
00:15:42,000 --> 00:15:42,720
signature

394
00:15:42,720 --> 00:15:46,639
you need to add offset 28 in hex

395
00:15:46,639 --> 00:15:48,399
each element in the bias directory

396
00:15:48,399 --> 00:15:50,880
secured seven bytes of each keyword is

397
00:15:50,880 --> 00:15:53,120
the address of the specific component

398
00:15:53,120 --> 00:15:55,120
and one last byte is the component's

399
00:15:55,120 --> 00:15:57,600
index meaning the type of the component

400
00:15:57,600 --> 00:15:59,680
you can see these indexes in the left

401
00:15:59,680 --> 00:16:01,279
column of the slide

402
00:16:01,279 --> 00:16:04,160
when running bias got acm iterates over

403
00:16:04,160 --> 00:16:05,600
this bias guard directory

404
00:16:05,600 --> 00:16:08,720
picking its components acm skips empty

405
00:16:08,720 --> 00:16:10,399
elements with index fe

406
00:16:10,399 --> 00:16:12,240
and stops iterating at elements with

407
00:16:12,240 --> 00:16:15,199
double f's index

408
00:16:16,000 --> 00:16:18,079
likewise already told the core of the

409
00:16:18,079 --> 00:16:19,360
technology is

410
00:16:19,360 --> 00:16:22,240
encrypted bias guard acm you can see its

411
00:16:22,240 --> 00:16:23,120
traction

412
00:16:23,120 --> 00:16:25,199
external header followed by internal

413
00:16:25,199 --> 00:16:26,880
header and etc

414
00:16:26,880 --> 00:16:29,279
the common header for all intel acms

415
00:16:29,279 --> 00:16:31,040
very similar to other intel science

416
00:16:31,040 --> 00:16:32,639
bindings

417
00:16:32,639 --> 00:16:34,480
interesting note collapsing external

418
00:16:34,480 --> 00:16:36,079
header will not affect the same

419
00:16:36,079 --> 00:16:37,759
execution but if you will cut out the

420
00:16:37,759 --> 00:16:39,600
internal header or created data

421
00:16:39,600 --> 00:16:41,600
the system will freeze after acm

422
00:16:41,600 --> 00:16:43,759
triggering due to verification failure

423
00:16:43,759 --> 00:16:46,399
we suppose

424
00:16:48,079 --> 00:16:50,720
as remain should be all those components

425
00:16:50,720 --> 00:16:52,320
are stored inside the bios guard

426
00:16:52,320 --> 00:16:53,199
directory

427
00:16:53,199 --> 00:16:55,040
the pointer of bioscale directory should

428
00:16:55,040 --> 00:16:58,399
be passed via msr115

429
00:16:58,399 --> 00:17:00,160
once the configuration is prepared the

430
00:17:00,160 --> 00:17:02,399
buyer's guard acm can be invoked via the

431
00:17:02,399 --> 00:17:04,799
triggering chemistry 116

432
00:17:04,799 --> 00:17:07,439
by performing any right operation to it

433
00:17:07,439 --> 00:17:08,319
it can be done

434
00:17:08,319 --> 00:17:12,079
only from smm you can see

435
00:17:12,079 --> 00:17:14,079
this procedure implemented in bios guide

436
00:17:14,079 --> 00:17:18,400
services module

437
00:17:18,400 --> 00:17:20,480
and as you can see in the picture here

438
00:17:20,480 --> 00:17:22,000
sbjpt and pdu

439
00:17:22,000 --> 00:17:23,599
which contain the updated data are

440
00:17:23,599 --> 00:17:25,760
passed to the acm

441
00:17:25,760 --> 00:17:28,880
bgbt includes sign flash area map this

442
00:17:28,880 --> 00:17:31,120
is a list of spi flash areas which can

443
00:17:31,120 --> 00:17:31,520
be

444
00:17:31,520 --> 00:17:34,400
written only with the same data with you

445
00:17:34,400 --> 00:17:34,960
with a

446
00:17:34,960 --> 00:17:38,559
valid certificate uh to protect lgbt

447
00:17:38,559 --> 00:17:41,960
integrity it's hash is stored in msrs

448
00:17:41,960 --> 00:17:44,799
111 through 114

449
00:17:44,799 --> 00:17:47,360
and once locked cannot be changed

450
00:17:47,360 --> 00:17:48,640
product

451
00:17:48,640 --> 00:17:51,520
once acm is involved it will check with

452
00:17:51,520 --> 00:17:52,080
dt

453
00:17:52,080 --> 00:17:54,960
hatch in case the purification fails it

454
00:17:54,960 --> 00:17:56,880
terminates the operation

455
00:17:56,880 --> 00:17:59,360
so to overwrite the critical areas of

456
00:17:59,360 --> 00:18:00,240
the flash

457
00:18:00,240 --> 00:18:02,400
and attack your needs to modify spam

458
00:18:02,400 --> 00:18:04,720
area but the spam area is a

459
00:18:04,720 --> 00:18:08,240
part of bjpt and bgbt is hashed in msrs

460
00:18:08,240 --> 00:18:11,600
and gets validated by acm so attacker's

461
00:18:11,600 --> 00:18:14,160
attempt will fail

462
00:18:14,160 --> 00:18:15,840
that's how bias guard is originally

463
00:18:15,840 --> 00:18:17,520
conceived by the way

464
00:18:17,520 --> 00:18:20,799
rs not marked in spam can be rewritten

465
00:18:20,799 --> 00:18:22,160
with the help of acm

466
00:18:22,160 --> 00:18:25,679
without any signatures

467
00:18:26,160 --> 00:18:28,080
to better understand the firmware update

468
00:18:28,080 --> 00:18:30,320
process let's look into amis bios got

469
00:18:30,320 --> 00:18:32,080
update capsule for example

470
00:18:32,080 --> 00:18:34,480
it represents some sort of file system

471
00:18:34,480 --> 00:18:36,559
if we look at update capsules header

472
00:18:36,559 --> 00:18:39,120
we can see this is mostly lci text that

473
00:18:39,120 --> 00:18:40,880
includes some file names

474
00:18:40,880 --> 00:18:42,799
and parameters that will be parsed

475
00:18:42,799 --> 00:18:45,360
during update process preparations

476
00:18:45,360 --> 00:18:47,840
each file is managed with bios guard

477
00:18:47,840 --> 00:18:49,280
update

478
00:18:49,280 --> 00:18:52,400
packages each video has a header

479
00:18:52,400 --> 00:18:54,480
data section updated at all writing

480
00:18:54,480 --> 00:18:56,000
dispersion in this case

481
00:18:56,000 --> 00:18:57,919
and the bias gar script section right

482
00:18:57,919 --> 00:18:59,679
after bgube header

483
00:18:59,679 --> 00:19:01,520
script section is a very interesting

484
00:19:01,520 --> 00:19:04,320
component here

485
00:19:05,120 --> 00:19:07,520
bios gas script is an instrument of

486
00:19:07,520 --> 00:19:09,039
communication between bios guard

487
00:19:09,039 --> 00:19:10,799
receiver and outer world

488
00:19:10,799 --> 00:19:12,720
it represents a powerful mechanism that

489
00:19:12,720 --> 00:19:14,320
can be used to tell acn

490
00:19:14,320 --> 00:19:16,240
what and where should be written on this

491
00:19:16,240 --> 00:19:17,440
creation memory

492
00:19:17,440 --> 00:19:19,760
with using of arithmetic operations

493
00:19:19,760 --> 00:19:21,280
comparisons conditional and

494
00:19:21,280 --> 00:19:23,360
unconditional jumps and more

495
00:19:23,360 --> 00:19:25,840
this huge functionality allows color to

496
00:19:25,840 --> 00:19:27,840
write complex programs such as presented

497
00:19:27,840 --> 00:19:28,960
on the slide

498
00:19:28,960 --> 00:19:31,120
you can see a disassembled bios gar

499
00:19:31,120 --> 00:19:33,760
script of one of the videos from

500
00:19:33,760 --> 00:19:36,160
amicabso from previous slide

501
00:19:36,160 --> 00:19:38,480
bios gas scripts functionality allows

502
00:19:38,480 --> 00:19:40,320
vendor to implement a program

503
00:19:40,320 --> 00:19:42,160
that performs necessary checks right

504
00:19:42,160 --> 00:19:44,240
when bias guard acm is executing

505
00:19:44,240 --> 00:19:46,320
and the process of flashing doesn't need

506
00:19:46,320 --> 00:19:49,520
to be interrupted for this

507
00:19:50,240 --> 00:19:52,400
but wait uh how did we manage to

508
00:19:52,400 --> 00:19:54,000
assemble it keeping in mind that the

509
00:19:54,000 --> 00:19:55,760
script interpreter is inside the

510
00:19:55,760 --> 00:19:57,360
encrypted acm

511
00:19:57,360 --> 00:20:01,520
because we got the decrypted acm

512
00:20:01,520 --> 00:20:05,840
so how did we manage to decrypt the acm

513
00:20:05,840 --> 00:20:07,200
when we ensure

514
00:20:07,200 --> 00:20:10,799
acm is executed from the cpu cache and

515
00:20:10,799 --> 00:20:13,120
in the same address space for encrypted

516
00:20:13,120 --> 00:20:14,559
acms stored

517
00:20:14,559 --> 00:20:16,640
we tried many times to dump it from the

518
00:20:16,640 --> 00:20:18,000
cache

519
00:20:18,000 --> 00:20:21,200
we tried probably everything except

520
00:20:21,200 --> 00:20:23,280
say channel attacks uh which write

521
00:20:23,280 --> 00:20:25,760
relocation of memory mapped eu

522
00:20:25,760 --> 00:20:29,919
areas corrupting input data

523
00:20:29,919 --> 00:20:33,760
and we tried even to store

524
00:20:33,760 --> 00:20:36,720
and steal the you know the acm while

525
00:20:36,720 --> 00:20:37,919
debugging

526
00:20:37,919 --> 00:20:41,440
uh through the intel dci and

527
00:20:41,440 --> 00:20:46,080
and finally we issued one last attempt

528
00:20:46,080 --> 00:20:48,640
at the spell too uh it was really hard

529
00:20:48,640 --> 00:20:50,240
to jump the encrypted acm

530
00:20:50,240 --> 00:20:52,320
intel did really a good job on

531
00:20:52,320 --> 00:20:55,679
protecting its contents

532
00:20:55,679 --> 00:20:58,080
just to give someone an opportunity to

533
00:20:58,080 --> 00:20:59,600
steal it from them

534
00:20:59,600 --> 00:21:02,480
yes the non-encrypted acm version was

535
00:21:02,480 --> 00:21:03,280
stored

536
00:21:03,280 --> 00:21:06,320
inside alder lake package for cmx along

537
00:21:06,320 --> 00:21:10,320
with many other interesting things

538
00:21:10,799 --> 00:21:14,080
still we have tried one last idea

539
00:21:14,080 --> 00:21:16,880
use the recent publication by microcode

540
00:21:16,880 --> 00:21:17,840
research team

541
00:21:17,840 --> 00:21:19,440
previously mentioned in this talk to

542
00:21:19,440 --> 00:21:21,919
create a debugging setup

543
00:21:21,919 --> 00:21:24,880
as you can see the target apollo lake

544
00:21:24,880 --> 00:21:26,080
platform supports

545
00:21:26,080 --> 00:21:29,280
pfat old bias guard name

546
00:21:29,280 --> 00:21:33,120
and this c tab allows to access

547
00:21:33,120 --> 00:21:36,320
dump to access microcode

548
00:21:36,320 --> 00:21:40,320
and dump it to modify it and

549
00:21:40,320 --> 00:21:42,640
after we manage to load bias guard acm

550
00:21:42,640 --> 00:21:44,720
for execution on the cpu with down

551
00:21:44,720 --> 00:21:48,880
small part of it acm execution consists

552
00:21:48,880 --> 00:21:50,080
of two stages

553
00:21:50,080 --> 00:21:52,480
first hardware initialization includes

554
00:21:52,480 --> 00:21:53,280
some initial

555
00:21:53,280 --> 00:21:55,760
input output msl operations and bios

556
00:21:55,760 --> 00:21:57,679
card directory parsing

557
00:21:57,679 --> 00:22:00,240
finally we have come face-to-face with

558
00:22:00,240 --> 00:22:02,400
security checks that ruined our big

559
00:22:02,400 --> 00:22:05,280
hacking plans

560
00:22:05,600 --> 00:22:07,120
the second stage is the script

561
00:22:07,120 --> 00:22:09,039
interpreter where we have found

562
00:22:09,039 --> 00:22:11,200
a lot interesting details about bios

563
00:22:11,200 --> 00:22:12,240
guard script

564
00:22:12,240 --> 00:22:14,880
each bias gun script line has fixed 8

565
00:22:14,880 --> 00:22:16,480
byte length

566
00:22:16,480 --> 00:22:18,720
instructions include 2 byte up code

567
00:22:18,720 --> 00:22:21,120
number 1 byte for the first operand

568
00:22:21,120 --> 00:22:23,039
1 byte for the second operand and 4

569
00:22:23,039 --> 00:22:25,360
bytes for the third

570
00:22:25,360 --> 00:22:27,280
method of using these operands can be

571
00:22:27,280 --> 00:22:29,600
described by some sort of a mask

572
00:22:29,600 --> 00:22:31,440
for example if you look at the byte

573
00:22:31,440 --> 00:22:33,600
representation of instruction

574
00:22:33,600 --> 00:22:37,039
set buffer 1 comma ff50 you can see that

575
00:22:37,039 --> 00:22:38,960
operand 2 is not used

576
00:22:38,960 --> 00:22:40,720
number of the buffer is passed through

577
00:22:40,720 --> 00:22:42,480
the first operand but long

578
00:22:42,480 --> 00:22:44,320
immediate value cannot be passed through

579
00:22:44,320 --> 00:22:46,400
the second operand so the third operand

580
00:22:46,400 --> 00:22:47,919
is used instead

581
00:22:47,919 --> 00:22:52,480
so operand2 can be masked as in used

582
00:22:53,039 --> 00:22:55,919
there are few types of operands used in

583
00:22:55,919 --> 00:22:57,440
bios gar script

584
00:22:57,440 --> 00:23:00,080
data buffer flash buffer register and

585
00:23:00,080 --> 00:23:01,280
immediate value

586
00:23:01,280 --> 00:23:03,280
if you look at the line 1 of the

587
00:23:03,280 --> 00:23:04,320
disassembly

588
00:23:04,320 --> 00:23:06,559
you will see an assignment of immediate

589
00:23:06,559 --> 00:23:08,400
value to the register

590
00:23:08,400 --> 00:23:12,000
and one holds a flash block size now

591
00:23:12,000 --> 00:23:14,480
then on line two a similar assignment is

592
00:23:14,480 --> 00:23:15,280
performed

593
00:23:15,280 --> 00:23:17,919
but now it's a flash buffer and

594
00:23:17,919 --> 00:23:19,200
immediate value

595
00:23:19,200 --> 00:23:21,280
this kind of operation makes flash one

596
00:23:21,280 --> 00:23:24,080
to point and flash linear address

597
00:23:24,080 --> 00:23:27,280
zero x a five zeros if the separation

598
00:23:27,280 --> 00:23:28,559
was performed on

599
00:23:28,559 --> 00:23:31,280
data buffer operand instead it will

600
00:23:31,280 --> 00:23:32,720
point to the given offset of the

601
00:23:32,720 --> 00:23:34,880
beginning of this buffer

602
00:23:34,880 --> 00:23:36,880
on line three a flashlight operation is

603
00:23:36,880 --> 00:23:38,159
performed

604
00:23:38,159 --> 00:23:41,440
uh one thousand bytes one flash at

605
00:23:41,440 --> 00:23:44,400
zero x a five zeros being copied to the

606
00:23:44,400 --> 00:23:45,760
temp buffer

607
00:23:45,760 --> 00:23:48,320
on line four buffer one being compared

608
00:23:48,320 --> 00:23:50,640
to the buffer zero i need to put a

609
00:23:50,640 --> 00:23:51,760
remark here

610
00:23:51,760 --> 00:23:53,600
buffers beginning committee number one

611
00:23:53,600 --> 00:23:54,960
are the temporal buffers

612
00:23:54,960 --> 00:23:57,679
that are cleaned and prepared to be used

613
00:23:57,679 --> 00:23:59,919
but buffer zero is the special one

614
00:23:59,919 --> 00:24:01,600
it points right to the data section of

615
00:24:01,600 --> 00:24:03,760
bg open it is not writable

616
00:24:03,760 --> 00:24:06,400
so on line 4 a comparison between actual

617
00:24:06,400 --> 00:24:07,360
vgue data

618
00:24:07,360 --> 00:24:10,400
and temp buffer being performed

619
00:24:10,400 --> 00:24:13,440
on line 5 we taking a jump in comparison

620
00:24:13,440 --> 00:24:14,720
bus fail

621
00:24:14,720 --> 00:24:17,039
all in all these pipelines are a little

622
00:24:17,039 --> 00:24:18,480
program that compares

623
00:24:18,480 --> 00:24:21,520
flash block at 0 x a 5

624
00:24:21,520 --> 00:24:25,039
0's with bgu data we can't use cmp

625
00:24:25,039 --> 00:24:26,880
instruction which you can flash pointer

626
00:24:26,880 --> 00:24:29,440
directly because flash data needs to be

627
00:24:29,440 --> 00:24:33,840
read into tempo buffer first

628
00:24:34,640 --> 00:24:36,720
unfortunately we can't cover all of the

629
00:24:36,720 --> 00:24:37,760
information about

630
00:24:37,760 --> 00:24:39,760
virus guard script during this speech

631
00:24:39,760 --> 00:24:41,520
and there is still interesting stuff

632
00:24:41,520 --> 00:24:42,480
about it

633
00:24:42,480 --> 00:24:44,880
and you can play with it yourself we are

634
00:24:44,880 --> 00:24:47,200
proud to announce buyer's gasket tool

635
00:24:47,200 --> 00:24:49,360
that gives you ability to assemble and

636
00:24:49,360 --> 00:24:51,360
disassemble bios card script

637
00:24:51,360 --> 00:24:55,200
it is already available on github

638
00:24:55,200 --> 00:24:59,440
so this is takeaways

639
00:24:59,440 --> 00:25:02,799
from covering the whole untrusted roots

640
00:25:02,799 --> 00:25:04,880
research cycle

641
00:25:04,880 --> 00:25:08,799
we we saw that the supply chain program

642
00:25:08,799 --> 00:25:10,960
problems uh the disadvantages of

643
00:25:10,960 --> 00:25:13,919
security through obscurity model

644
00:25:13,919 --> 00:25:16,240
we saw that the problem in the basic

645
00:25:16,240 --> 00:25:18,400
components compromises all technology

646
00:25:18,400 --> 00:25:21,679
serves at the root of trust and we

647
00:25:21,679 --> 00:25:23,840
as we can see we can see attendance that

648
00:25:23,840 --> 00:25:26,559
pc firmware vendors aim to protect code

649
00:25:26,559 --> 00:25:27,360
integrity

650
00:25:27,360 --> 00:25:29,279
however they still forgetting about

651
00:25:29,279 --> 00:25:31,279
other attack

652
00:25:31,279 --> 00:25:34,320
attack vectors for example data only

653
00:25:34,320 --> 00:25:35,679
attacks

654
00:25:35,679 --> 00:25:38,000
and we are going to cover this special

655
00:25:38,000 --> 00:25:38,799
subject

656
00:25:38,799 --> 00:25:42,400
in the next series of talks

657
00:25:42,400 --> 00:25:46,080
so by now thank you

658
00:25:46,080 --> 00:25:49,600
you can ask questions and we will

659
00:25:49,600 --> 00:25:53,600
answer them so thank you very much guys

660
00:25:53,600 --> 00:25:56,080
for your stunning presentation

661
00:25:56,080 --> 00:25:59,279
very awesome there are

662
00:25:59,279 --> 00:26:03,679
some questions from our audience for you

663
00:26:03,679 --> 00:26:06,880
the first one is

664
00:26:06,880 --> 00:26:09,279
how long did it take for you this

665
00:26:09,279 --> 00:26:10,240
research

666
00:26:10,240 --> 00:26:12,640
and how much important was the internal

667
00:26:12,640 --> 00:26:14,080
leakage of lace

668
00:26:14,080 --> 00:26:18,240
hybrid for your work

669
00:26:19,360 --> 00:26:22,960
it was about half

670
00:26:22,960 --> 00:26:26,240
of the year probably and

671
00:26:26,240 --> 00:26:29,360
the research i mean it take took

672
00:26:29,360 --> 00:26:33,279
uh half of the year and the leakage

673
00:26:33,279 --> 00:26:36,559
is not such important because

674
00:26:36,559 --> 00:26:40,559
we as we showed there is another way

675
00:26:40,559 --> 00:26:43,919
a technical way to dump the

676
00:26:43,919 --> 00:26:47,760
uh the decrypted acm

677
00:26:48,240 --> 00:26:51,360
okay thank you very much uh actually uh

678
00:26:51,360 --> 00:26:52,000
personally

679
00:26:52,000 --> 00:26:55,120
is i saw that it was much longer

680
00:26:55,120 --> 00:26:56,799
research because you know the feed in

681
00:26:56,799 --> 00:26:59,360
which you operate is really tough

682
00:26:59,360 --> 00:27:02,640
uh so congrats for your uh for research

683
00:27:02,640 --> 00:27:06,000
and the second the second one is

684
00:27:06,000 --> 00:27:09,840
about the possibility uh for malware to

685
00:27:09,840 --> 00:27:12,000
to exploit the vulnerabilities you found

686
00:27:12,000 --> 00:27:15,279
in order to increase persistence is like

687
00:27:15,279 --> 00:27:18,320
mosaic regressor uh recently uh

688
00:27:18,320 --> 00:27:22,080
show us share with us for waffy

689
00:27:22,080 --> 00:27:24,879
persistency

690
00:27:25,440 --> 00:27:30,559
well usually when bias guard is used

691
00:27:30,559 --> 00:27:34,000
it is equipped with a boot guard enabled

692
00:27:34,000 --> 00:27:37,520
so uh the

693
00:27:37,520 --> 00:27:39,679
the tricks showed here or any

694
00:27:39,679 --> 00:27:41,279
vulnerabilities you find in

695
00:27:41,279 --> 00:27:43,679
ac and in buyers guard vcm won't allow

696
00:27:43,679 --> 00:27:45,039
you to

697
00:27:45,039 --> 00:27:47,520
usually won't allow you to get the

698
00:27:47,520 --> 00:27:48,799
persistence

699
00:27:48,799 --> 00:27:52,159
without another vulnerability

700
00:27:52,159 --> 00:27:55,360
in boot guard technology in

701
00:27:55,360 --> 00:27:57,440
in case if you find the vulnerabilities

702
00:27:57,440 --> 00:27:59,039
in these two technologies

703
00:27:59,039 --> 00:28:02,399
yes it will allow you to get to get the

704
00:28:02,399 --> 00:28:03,440
persistence

705
00:28:03,440 --> 00:28:05,360
from the operating system from kernel

706
00:28:05,360 --> 00:28:07,678
mode

707
00:28:08,000 --> 00:28:11,279
okay really really interesting thank you

708
00:28:11,279 --> 00:28:13,840
and i don't think there are other

709
00:28:13,840 --> 00:28:14,640
questions

710
00:28:14,640 --> 00:28:17,760
in the chat but uh

711
00:28:17,760 --> 00:28:20,480
i encourage everyone that is attending

712
00:28:20,480 --> 00:28:21,520
this conference

713
00:28:21,520 --> 00:28:24,480
to uh make other questions to our

714
00:28:24,480 --> 00:28:25,120
speaker

715
00:28:25,120 --> 00:28:28,240
even in chat or even directly and we

716
00:28:28,240 --> 00:28:29,039
will share

717
00:28:29,039 --> 00:28:32,080
with you the contacts of the speaker

718
00:28:32,080 --> 00:28:35,760
and thank you very much again

719
00:28:35,760 --> 00:28:37,360
alexander and dmitry for your

720
00:28:37,360 --> 00:28:38,960
presentation it was really really

721
00:28:38,960 --> 00:28:39,760
interesting

722
00:28:39,760 --> 00:28:41,760
thank you thank you thank you for

723
00:28:41,760 --> 00:28:45,840
stepping up

