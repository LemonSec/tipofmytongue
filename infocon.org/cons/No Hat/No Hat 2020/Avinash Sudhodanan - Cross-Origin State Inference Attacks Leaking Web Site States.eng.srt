1
00:00:56,320 --> 00:00:57,039
okay

2
00:00:57,039 --> 00:01:00,320
good here we are uh our last

3
00:01:00,320 --> 00:01:02,960
session is about web security so we have

4
00:01:02,960 --> 00:01:03,440
uh

5
00:01:03,440 --> 00:01:06,320
two talks the first one is uh uh by

6
00:01:06,320 --> 00:01:07,280
avinash

7
00:01:07,280 --> 00:01:09,360
ework is a security researcher for a

8
00:01:09,360 --> 00:01:10,640
white ops

9
00:01:10,640 --> 00:01:13,600
and he's originally from india and i

10
00:01:13,600 --> 00:01:14,960
guess it would be

11
00:01:14,960 --> 00:01:18,080
q a live from india

12
00:01:18,080 --> 00:01:20,880
um he knows pretty well italy because he

13
00:01:20,880 --> 00:01:23,040
did his phd in university of trento

14
00:01:23,040 --> 00:01:25,439
uh so down here in italy trento there is

15
00:01:25,439 --> 00:01:27,360
a research lab focusing on

16
00:01:27,360 --> 00:01:29,920
security so we've been there and they've

17
00:01:29,920 --> 00:01:32,079
also been with bruno casler

18
00:01:32,079 --> 00:01:35,119
a research institute down here in italy

19
00:01:35,119 --> 00:01:38,159
after that he moved to france

20
00:01:38,159 --> 00:01:41,200
where he worked for sub lab france uh we

21
00:01:41,200 --> 00:01:42,240
have similarity

22
00:01:42,240 --> 00:01:45,520
uh between myself and himself i'm not

23
00:01:45,520 --> 00:01:45,840
sure

24
00:01:45,840 --> 00:01:47,680
amina she's aware of that but i also

25
00:01:47,680 --> 00:01:49,759
work for uh sap lab france

26
00:01:49,759 --> 00:01:52,399
in uh south france sophie antipa is

27
00:01:52,399 --> 00:01:54,079
close to nica

28
00:01:54,079 --> 00:01:57,759
and so yeah we can then you know

29
00:01:57,759 --> 00:02:00,320
offline maybe share some uh thoughts

30
00:02:00,320 --> 00:02:00,960
about

31
00:02:00,960 --> 00:02:03,200
this experience with uh uh with this

32
00:02:03,200 --> 00:02:04,159
company in the

33
00:02:04,159 --> 00:02:08,000
french riviera uh after that he worked

34
00:02:08,000 --> 00:02:11,120
as a researcher as a postdoc for

35
00:02:11,120 --> 00:02:15,280
uh india with professor juan caballero

36
00:02:15,280 --> 00:02:18,400
a good friend of mine he did a lot in

37
00:02:18,400 --> 00:02:21,440
malwa research while avinash focus

38
00:02:21,440 --> 00:02:23,599
exclusively on web so actually it's the

39
00:02:23,599 --> 00:02:25,280
first time that i hear someone

40
00:02:25,280 --> 00:02:27,920
uh working with juan but doing uh uh web

41
00:02:27,920 --> 00:02:29,200
instead of malware so

42
00:02:29,200 --> 00:02:31,840
uh very happy to know that uh you know

43
00:02:31,840 --> 00:02:33,680
that one is also looking to

44
00:02:33,680 --> 00:02:36,640
other aspects of security apart from

45
00:02:36,640 --> 00:02:38,480
malware search

46
00:02:38,480 --> 00:02:40,239
so in this presentation avinash we

47
00:02:40,239 --> 00:02:41,760
talked of

48
00:02:41,760 --> 00:02:44,879
cozy uh c-o-s-i which stand for

49
00:02:44,879 --> 00:02:47,040
cross-origin state interference

50
00:02:47,040 --> 00:02:49,760
uh he came up with this name and i'm

51
00:02:49,760 --> 00:02:50,959
very much supportive

52
00:02:50,959 --> 00:02:53,680
of having someone that formalized under

53
00:02:53,680 --> 00:02:54,560
a single

54
00:02:54,560 --> 00:02:56,959
umbrella a bunch of different attacks

55
00:02:56,959 --> 00:02:58,959
that have been present over the last

56
00:02:58,959 --> 00:03:00,480
five to six years but went with

57
00:03:00,480 --> 00:03:02,080
different terms so now

58
00:03:02,080 --> 00:03:04,400
we have a term that indicates a group a

59
00:03:04,400 --> 00:03:05,840
family of attacks

60
00:03:05,840 --> 00:03:07,680
and uh i'm looking for maybe to have

61
00:03:07,680 --> 00:03:09,519
something or an organization like owasp

62
00:03:09,519 --> 00:03:12,400
that would integrate such new term into

63
00:03:12,400 --> 00:03:12,959
their

64
00:03:12,959 --> 00:03:16,640
uh collection of uh of you know

65
00:03:16,640 --> 00:03:18,000
security and web security

66
00:03:18,000 --> 00:03:20,640
vulnerabilities all right so that's all

67
00:03:20,640 --> 00:03:22,239
my side i would say

68
00:03:22,239 --> 00:03:25,200
uh sit down relax have a coffee and

69
00:03:25,200 --> 00:03:28,480
enjoy the next presentation

70
00:03:28,480 --> 00:03:31,760
hello everyone i am avinash sudhodonan

71
00:03:31,760 --> 00:03:34,480
first of all i would like to thank the

72
00:03:34,480 --> 00:03:36,879
organizers of nohat2020

73
00:03:36,879 --> 00:03:39,040
for giving me the opportunity to present

74
00:03:39,040 --> 00:03:41,760
my research in front of such an amazing

75
00:03:41,760 --> 00:03:45,200
diverse audience so today i am going to

76
00:03:45,200 --> 00:03:46,000
be presenting

77
00:03:46,000 --> 00:03:48,080
about cross-origin state inference

78
00:03:48,080 --> 00:03:50,640
attacks so since it's a long name

79
00:03:50,640 --> 00:03:52,159
throughout this presentation i'm going

80
00:03:52,159 --> 00:03:53,760
to be referring to these types of

81
00:03:53,760 --> 00:03:56,319
attacks as cosi attacks

82
00:03:56,319 --> 00:03:59,360
so this is a joint work with sohail

83
00:03:59,360 --> 00:04:00,560
khodayari from

84
00:04:00,560 --> 00:04:04,000
cispasar broken and juan cavajero from

85
00:04:04,000 --> 00:04:07,360
india software institute in madrid

86
00:04:07,360 --> 00:04:10,799
so what is a koshi attack in a cosy

87
00:04:10,799 --> 00:04:11,280
attack

88
00:04:11,280 --> 00:04:13,680
a malicious website infers the state of

89
00:04:13,680 --> 00:04:14,480
a user

90
00:04:14,480 --> 00:04:17,120
at another website so let's see an

91
00:04:17,120 --> 00:04:18,720
example to

92
00:04:18,720 --> 00:04:21,279
further understand this attack so in

93
00:04:21,279 --> 00:04:22,479
this example

94
00:04:22,479 --> 00:04:24,639
there is a user alice who is playing the

95
00:04:24,639 --> 00:04:26,320
role of the victim

96
00:04:26,320 --> 00:04:29,600
alice has a web browser so

97
00:04:29,600 --> 00:04:32,800
alice is a security researcher so alice

98
00:04:32,800 --> 00:04:35,120
gets invites for being the reviewer of

99
00:04:35,120 --> 00:04:36,720
security conferences

100
00:04:36,720 --> 00:04:39,759
so here is a conference named foo foo

101
00:04:39,759 --> 00:04:40,639
conf

102
00:04:40,639 --> 00:04:43,680
that is using hotcrp.com for managing

103
00:04:43,680 --> 00:04:45,280
its review process

104
00:04:45,280 --> 00:04:48,639
so if any of you are into academic

105
00:04:48,639 --> 00:04:50,160
security research

106
00:04:50,160 --> 00:04:52,320
you know that most of the top security

107
00:04:52,320 --> 00:04:53,199
conferences

108
00:04:53,199 --> 00:04:55,759
now use a hot crp for managing their

109
00:04:55,759 --> 00:04:56,880
review process

110
00:04:56,880 --> 00:04:59,680
so same like that foo conf is actually

111
00:04:59,680 --> 00:05:01,520
using hotcrp.com for

112
00:05:01,520 --> 00:05:04,160
managing its review process and alice is

113
00:05:04,160 --> 00:05:07,199
one of the reviewer of this conference

114
00:05:07,199 --> 00:05:09,520
as you can see alice has been assigned

115
00:05:09,520 --> 00:05:11,600
two papers for reviewing paper number

116
00:05:11,600 --> 00:05:12,720
278

117
00:05:12,720 --> 00:05:15,280
that was unfortunately rejected by alice

118
00:05:15,280 --> 00:05:17,600
and then paper number 997 which was

119
00:05:17,600 --> 00:05:20,000
accepted by alice

120
00:05:20,000 --> 00:05:22,720
now let me introduce you malice who is

121
00:05:22,720 --> 00:05:25,039
playing the role of the attacker

122
00:05:25,039 --> 00:05:27,759
the goal of malice is to actually check

123
00:05:27,759 --> 00:05:28,320
whether

124
00:05:28,320 --> 00:05:30,240
alice is the reviewer of one of the

125
00:05:30,240 --> 00:05:33,360
papers let's say paper number 278

126
00:05:33,360 --> 00:05:36,960
but fucon fuses an anonymous review

127
00:05:36,960 --> 00:05:37,680
system

128
00:05:37,680 --> 00:05:40,240
so the authors will not know who

129
00:05:40,240 --> 00:05:41,840
reviewed their papers

130
00:05:41,840 --> 00:05:44,320
and the goal of malice is to exactly

131
00:05:44,320 --> 00:05:45,840
break this anonymity

132
00:05:45,840 --> 00:05:48,560
in the sense that malice wants to know

133
00:05:48,560 --> 00:05:49,520
who reviewed

134
00:05:49,520 --> 00:05:52,479
which paper so in this case let's say

135
00:05:52,479 --> 00:05:53,840
malice wants to know

136
00:05:53,840 --> 00:05:55,520
let's say malice was the author of paper

137
00:05:55,520 --> 00:05:57,520
number 278

138
00:05:57,520 --> 00:05:59,360
malice would like to know whether it was

139
00:05:59,360 --> 00:06:02,960
alice who actually reviewed their paper

140
00:06:02,960 --> 00:06:05,759
so in order to perform this attack

141
00:06:05,759 --> 00:06:06,639
malice first

142
00:06:06,639 --> 00:06:09,280
sends an email to alice saying

143
00:06:09,280 --> 00:06:11,520
pretending to be let's say the

144
00:06:11,520 --> 00:06:14,080
pc committee chair saying hi alice click

145
00:06:14,080 --> 00:06:15,840
here to finalize your reviews of

146
00:06:15,840 --> 00:06:19,440
foconf so alice if alice thinks

147
00:06:19,440 --> 00:06:21,520
that they should click on this link and

148
00:06:21,520 --> 00:06:23,280
accidentally clicks on this link

149
00:06:23,280 --> 00:06:25,199
then a malicious website is actually

150
00:06:25,199 --> 00:06:26,960
loaded at the web browser of

151
00:06:26,960 --> 00:06:29,680
alice so this malicious website is

152
00:06:29,680 --> 00:06:31,440
actually controlled by malice

153
00:06:31,440 --> 00:06:33,520
and it is actually through this website

154
00:06:33,520 --> 00:06:35,440
that malice

155
00:06:35,440 --> 00:06:38,080
infers whether alice is actually the

156
00:06:38,080 --> 00:06:39,360
reviewers of

157
00:06:39,360 --> 00:06:43,440
some of the papers so

158
00:06:43,440 --> 00:06:45,199
the goal of this malicious site is

159
00:06:45,199 --> 00:06:46,880
actually to infer

160
00:06:46,880 --> 00:06:50,319
cross origin across origins the state of

161
00:06:50,319 --> 00:06:53,120
alice at different websites

162
00:06:53,120 --> 00:06:55,759
so some of you must be thinking like

163
00:06:55,759 --> 00:06:58,080
what does it mean by inferring the state

164
00:06:58,080 --> 00:07:02,000
at food.hotcrp.com so let me explain

165
00:07:02,000 --> 00:07:05,039
to you what are these states so

166
00:07:05,039 --> 00:07:07,680
first let me show a simplified

167
00:07:07,680 --> 00:07:09,440
representation of the attack there is

168
00:07:09,440 --> 00:07:11,440
alice there is the web browser and the

169
00:07:11,440 --> 00:07:14,000
two websites food.hotcrp.com

170
00:07:14,000 --> 00:07:16,240
and the malsite.com which is actually

171
00:07:16,240 --> 00:07:17,680
controlled by the attacker

172
00:07:17,680 --> 00:07:19,919
and the male site's goal is to actually

173
00:07:19,919 --> 00:07:22,120
infer the state of alice at

174
00:07:22,120 --> 00:07:23,680
food.hotcrp.com

175
00:07:23,680 --> 00:07:25,680
so what are the states that can be

176
00:07:25,680 --> 00:07:27,840
inferred by mildside.com

177
00:07:27,840 --> 00:07:29,599
the first type of state is the login

178
00:07:29,599 --> 00:07:32,080
state the login state can have two

179
00:07:32,080 --> 00:07:32,880
values

180
00:07:32,880 --> 00:07:35,120
logged in state and logged out state so

181
00:07:35,120 --> 00:07:37,599
inferring the login state can be seen as

182
00:07:37,599 --> 00:07:39,680
the mail site.com inferring whether

183
00:07:39,680 --> 00:07:41,880
alice is actually logged in at

184
00:07:41,880 --> 00:07:44,919
food.crp.com or logged out of

185
00:07:44,919 --> 00:07:47,520
food.hotcrp.com so

186
00:07:47,520 --> 00:07:49,680
this type of attack where a website

187
00:07:49,680 --> 00:07:51,599
infers the login state of another

188
00:07:51,599 --> 00:07:53,680
website is commonly referred to as login

189
00:07:53,680 --> 00:07:57,680
detection attack or login oracle attack

190
00:07:57,680 --> 00:07:59,599
another type of state inference is the

191
00:07:59,599 --> 00:08:01,360
account type state inference

192
00:08:01,360 --> 00:08:03,680
that is the malsite.com inferring

193
00:08:03,680 --> 00:08:06,440
whether alice has a reviewer account at

194
00:08:06,440 --> 00:08:07,680
food.hotcrp.com

195
00:08:07,680 --> 00:08:09,919
or whether else is simply an author or

196
00:08:09,919 --> 00:08:12,240
if alice is the admin let's say the pc

197
00:08:12,240 --> 00:08:13,400
chair of

198
00:08:13,400 --> 00:08:16,080
food.hotcrp.com

199
00:08:16,080 --> 00:08:17,919
another type of state inference is the

200
00:08:17,919 --> 00:08:20,080
content ownership state in france

201
00:08:20,080 --> 00:08:22,560
so let's say if alice is the reviewer of

202
00:08:22,560 --> 00:08:23,919
paper 278

203
00:08:23,919 --> 00:08:26,800
then alice will have ownership over the

204
00:08:26,800 --> 00:08:29,520
reviews of paper 278

205
00:08:29,520 --> 00:08:31,520
however if alice is not the reviewer of

206
00:08:31,520 --> 00:08:33,519
paper 278 then alice will not have

207
00:08:33,519 --> 00:08:34,640
access to the

208
00:08:34,640 --> 00:08:38,240
reviews of paper 278.

209
00:08:38,320 --> 00:08:39,919
next state is the account ownership

210
00:08:39,919 --> 00:08:42,159
state so let's say there is

211
00:08:42,159 --> 00:08:45,600
a user account uh with the user id user

212
00:08:45,600 --> 00:08:46,880
217

213
00:08:46,880 --> 00:08:49,839
so from the string user to n7 it is not

214
00:08:49,839 --> 00:08:52,080
clear who actually owns this account

215
00:08:52,080 --> 00:08:55,120
so if mal site wants to know

216
00:08:55,120 --> 00:08:56,959
whether alice is the owner of this

217
00:08:56,959 --> 00:08:58,959
account user 217

218
00:08:58,959 --> 00:09:00,880
then that type of inference is called

219
00:09:00,880 --> 00:09:03,440
the account ownership state inference

220
00:09:03,440 --> 00:09:06,800
so this type of attack were

221
00:09:06,800 --> 00:09:09,839
a malicious party links

222
00:09:09,839 --> 00:09:11,760
an online account to a real world

223
00:09:11,760 --> 00:09:14,160
identity that is user 217

224
00:09:14,160 --> 00:09:16,440
to alice is commonly referred to as

225
00:09:16,440 --> 00:09:19,680
de-anonymization attack

226
00:09:19,680 --> 00:09:21,600
so to summarize what we discussed in the

227
00:09:21,600 --> 00:09:23,519
slide in a cozy attack

228
00:09:23,519 --> 00:09:25,600
the attacker's goal is to infer the

229
00:09:25,600 --> 00:09:27,200
state of a user

230
00:09:27,200 --> 00:09:30,880
at another website and cosi attacks have

231
00:09:30,880 --> 00:09:32,640
been known by different names such as

232
00:09:32,640 --> 00:09:34,320
login detection attack login oracle

233
00:09:34,320 --> 00:09:36,080
attack the anonymization attack and

234
00:09:36,080 --> 00:09:38,640
whatnot

235
00:09:38,800 --> 00:09:41,839
so in order to understand how cosy

236
00:09:41,839 --> 00:09:43,680
attacks can be performed

237
00:09:43,680 --> 00:09:45,600
we need to understand what are state

238
00:09:45,600 --> 00:09:46,880
dependent urls

239
00:09:46,880 --> 00:09:49,200
because in cosy attacks state dependent

240
00:09:49,200 --> 00:09:50,880
urls are leveraged

241
00:09:50,880 --> 00:09:53,600
so what are the state dependent urls so

242
00:09:53,600 --> 00:09:55,120
state dependent urls

243
00:09:55,120 --> 00:09:58,320
are those urls that return different

244
00:09:58,320 --> 00:10:00,160
http responses

245
00:10:00,160 --> 00:10:02,320
depending on the requesting browser's

246
00:10:02,320 --> 00:10:03,279
state

247
00:10:03,279 --> 00:10:04,720
let's see an example of a state

248
00:10:04,720 --> 00:10:06,800
dependent url so

249
00:10:06,800 --> 00:10:09,839
in food.hotcrp.com there is

250
00:10:09,839 --> 00:10:14,120
a url that is food.hotcrp.com

251
00:10:14,120 --> 00:10:17,519
api.php slash review question mark p

252
00:10:17,519 --> 00:10:21,120
equal to 278 so basically this

253
00:10:21,120 --> 00:10:23,600
url is pointing to the reviews of the

254
00:10:23,600 --> 00:10:26,000
paper number 278.

255
00:10:26,000 --> 00:10:29,200
so why is this a state dependent url

256
00:10:29,200 --> 00:10:31,440
it is a state dependent url because if

257
00:10:31,440 --> 00:10:33,200
you access this url

258
00:10:33,200 --> 00:10:35,279
from the state where you are logged in

259
00:10:35,279 --> 00:10:37,200
at food.hotcrp.com

260
00:10:37,200 --> 00:10:39,839
and you are logged in as a reviewer and

261
00:10:39,839 --> 00:10:42,079
you are the reviewer of the paper number

262
00:10:42,079 --> 00:10:43,279
278

263
00:10:43,279 --> 00:10:46,320
then the http response returned will

264
00:10:46,320 --> 00:10:48,640
have a status code of 200 and it will

265
00:10:48,640 --> 00:10:49,120
return

266
00:10:49,120 --> 00:10:51,200
in the response body the reviews of the

267
00:10:51,200 --> 00:10:52,399
paper

268
00:10:52,399 --> 00:10:55,279
however if you are in a state where you

269
00:10:55,279 --> 00:10:57,600
are logged in at food.hotcrp.com

270
00:10:57,600 --> 00:10:59,920
and you are a reviewer but however you

271
00:10:59,920 --> 00:11:02,720
are not the reviewer of paper number 278

272
00:11:02,720 --> 00:11:06,800
then an http response code of 403 is

273
00:11:06,800 --> 00:11:09,279
returned

274
00:11:10,640 --> 00:11:14,160
so comparing this to our example

275
00:11:14,160 --> 00:11:17,440
let's say if mal site wants to know

276
00:11:17,440 --> 00:11:19,680
whether alice is the reviewer of paper

277
00:11:19,680 --> 00:11:21,360
number 278

278
00:11:21,360 --> 00:11:23,680
then mal site can actually send a

279
00:11:23,680 --> 00:11:26,000
request to this specific

280
00:11:26,000 --> 00:11:28,079
state dependent url pointing to paper

281
00:11:28,079 --> 00:11:30,000
number 278

282
00:11:30,000 --> 00:11:33,600
and then the response returned will be

283
00:11:33,600 --> 00:11:36,560
either 200 will have the status code of

284
00:11:36,560 --> 00:11:38,399
200 or 403

285
00:11:38,399 --> 00:11:39,920
depending on whether alice is the

286
00:11:39,920 --> 00:11:42,160
reviewer of that paper number 278

287
00:11:42,160 --> 00:11:46,399
or not however one thing must be noticed

288
00:11:46,399 --> 00:11:49,600
the domains of the domain of malsite.com

289
00:11:49,600 --> 00:11:51,600
and food.hotcrp.com

290
00:11:51,600 --> 00:11:54,160
they are two different sites so they

291
00:11:54,160 --> 00:11:55,360
don't have the same

292
00:11:55,360 --> 00:11:58,720
web origin because of this difference in

293
00:11:58,720 --> 00:11:59,839
the origin

294
00:11:59,839 --> 00:12:01,839
the web browser will not allow

295
00:12:01,839 --> 00:12:03,920
mildside.com to directly read the

296
00:12:03,920 --> 00:12:04,880
response

297
00:12:04,880 --> 00:12:06,720
response headers response code and the

298
00:12:06,720 --> 00:12:08,000
response body

299
00:12:08,000 --> 00:12:10,720
so because of this restriction mild site

300
00:12:10,720 --> 00:12:12,560
will not be able to directly read the

301
00:12:12,560 --> 00:12:14,480
response and infer that

302
00:12:14,480 --> 00:12:16,560
alice is actually the reviewer of paper

303
00:12:16,560 --> 00:12:18,399
278.

304
00:12:18,399 --> 00:12:21,839
because of this restriction the attacker

305
00:12:21,839 --> 00:12:23,760
will have to come up with different ways

306
00:12:23,760 --> 00:12:25,600
to know what was the

307
00:12:25,600 --> 00:12:28,800
response status code this is

308
00:12:28,800 --> 00:12:31,440
where cross site leaks constant comes

309
00:12:31,440 --> 00:12:32,320
into play

310
00:12:32,320 --> 00:12:34,560
cross site leaks are basically browser

311
00:12:34,560 --> 00:12:35,680
side channels

312
00:12:35,680 --> 00:12:37,279
for inferring the response of

313
00:12:37,279 --> 00:12:40,720
cross-origin responses

314
00:12:41,200 --> 00:12:42,959
there are different types of cross-site

315
00:12:42,959 --> 00:12:45,040
leaks discussed in the literature

316
00:12:45,040 --> 00:12:46,880
i have actually listed some of them with

317
00:12:46,880 --> 00:12:48,800
their references

318
00:12:48,800 --> 00:12:50,480
due to lack of time we won't be able to

319
00:12:50,480 --> 00:12:52,399
go through all of them but we will

320
00:12:52,399 --> 00:12:54,480
go through one of them in very detail so

321
00:12:54,480 --> 00:12:56,160
let's go through the events fired

322
00:12:56,160 --> 00:12:58,639
cross-site leak

323
00:12:58,639 --> 00:13:01,040
so let me give you a quick background of

324
00:13:01,040 --> 00:13:02,240
what are like

325
00:13:02,240 --> 00:13:06,560
dom events or browser events so

326
00:13:06,560 --> 00:13:09,440
this is a bit basic information for

327
00:13:09,440 --> 00:13:10,480
people who are

328
00:13:10,480 --> 00:13:12,160
like already familiar with web

329
00:13:12,160 --> 00:13:13,600
applications but

330
00:13:13,600 --> 00:13:15,200
since we have a diverse audience i

331
00:13:15,200 --> 00:13:17,040
wanted to make sure that everybody

332
00:13:17,040 --> 00:13:18,880
understands what i'm saying

333
00:13:18,880 --> 00:13:21,600
so web pages are basically defined using

334
00:13:21,600 --> 00:13:22,560
the hypertext

335
00:13:22,560 --> 00:13:26,720
markup language and there are html

336
00:13:26,720 --> 00:13:27,360
elements

337
00:13:27,360 --> 00:13:29,200
that are the building blocks of these

338
00:13:29,200 --> 00:13:31,680
html pages

339
00:13:31,680 --> 00:13:34,720
and each html elements are

340
00:13:34,720 --> 00:13:37,440
actually defined using html tags for

341
00:13:37,440 --> 00:13:39,199
example there is the head tag where all

342
00:13:39,199 --> 00:13:39,920
the

343
00:13:39,920 --> 00:13:42,800
uh links to the css and javascript goes

344
00:13:42,800 --> 00:13:44,240
and then there is the body tag

345
00:13:44,240 --> 00:13:45,920
and then there is the script tag and

346
00:13:45,920 --> 00:13:48,000
there are many more tags

347
00:13:48,000 --> 00:13:51,199
and some of these html tags can load

348
00:13:51,199 --> 00:13:54,240
or include external resources for

349
00:13:54,240 --> 00:13:56,000
instance here i have actually listed

350
00:13:56,000 --> 00:13:57,040
some of the

351
00:13:57,040 --> 00:14:00,160
top html tags so

352
00:14:00,160 --> 00:14:03,199
these are the tags and they have some

353
00:14:03,199 --> 00:14:06,639
attributes that basically takes as

354
00:14:06,639 --> 00:14:09,040
values different urls

355
00:14:09,040 --> 00:14:12,480
and these urls are actually pointing to

356
00:14:12,480 --> 00:14:13,600
let's say if it is a

357
00:14:13,600 --> 00:14:17,040
alpha applet html tag which is currently

358
00:14:17,040 --> 00:14:18,000
deprecated

359
00:14:18,000 --> 00:14:20,399
uh it has this code attribute pointing

360
00:14:20,399 --> 00:14:21,440
to an

361
00:14:21,440 --> 00:14:24,320
applet so basically these are tags that

362
00:14:24,320 --> 00:14:25,519
can be used to

363
00:14:25,519 --> 00:14:30,880
include different types of resources

364
00:14:30,880 --> 00:14:34,560
so dom events can be leveraged to check

365
00:14:34,560 --> 00:14:36,399
the status of these resources

366
00:14:36,399 --> 00:14:39,279
so using those special html tags we are

367
00:14:39,279 --> 00:14:41,120
actually including different types of

368
00:14:41,120 --> 00:14:42,160
resources

369
00:14:42,160 --> 00:14:45,519
so dom events are a feature that can be

370
00:14:45,519 --> 00:14:46,480
leveraged to check

371
00:14:46,480 --> 00:14:49,040
whether these resources were loaded

372
00:14:49,040 --> 00:14:50,480
correctly or not

373
00:14:50,480 --> 00:14:52,560
let's see an example so there is the

374
00:14:52,560 --> 00:14:53,600
script

375
00:14:53,600 --> 00:14:57,120
tag that that has the attribute

376
00:14:57,120 --> 00:14:59,760
src in which you can actually point to a

377
00:14:59,760 --> 00:15:00,720
script

378
00:15:00,720 --> 00:15:03,040
javascript and then there are these

379
00:15:03,040 --> 00:15:05,360
events on load and on error

380
00:15:05,360 --> 00:15:07,839
so basically what happens is is if the

381
00:15:07,839 --> 00:15:10,160
loading of this script is success

382
00:15:10,160 --> 00:15:12,480
then the on load event is triggered and

383
00:15:12,480 --> 00:15:14,639
then as a result of that the success

384
00:15:14,639 --> 00:15:16,240
function is executed

385
00:15:16,240 --> 00:15:20,000
if this url did not return

386
00:15:20,000 --> 00:15:22,720
a javascript then the on error event is

387
00:15:22,720 --> 00:15:23,760
actually fired

388
00:15:23,760 --> 00:15:25,360
and this will result in the fail

389
00:15:25,360 --> 00:15:28,000
function being executed

390
00:15:28,000 --> 00:15:30,800
so why are we discussing about this it

391
00:15:30,800 --> 00:15:33,279
is because in the

392
00:15:33,279 --> 00:15:36,800
event fired access leak the

393
00:15:36,800 --> 00:15:39,279
dom events are basically abused by the

394
00:15:39,279 --> 00:15:40,079
attacker

395
00:15:40,079 --> 00:15:44,399
so let's see how this is done so

396
00:15:44,959 --> 00:15:48,240
in the malicious site the attacker here

397
00:15:48,240 --> 00:15:51,600
uses the embed html tag and

398
00:15:51,600 --> 00:15:54,240
points to the state dependent url that

399
00:15:54,240 --> 00:15:56,399
we discussed earlier that is pointing to

400
00:15:56,399 --> 00:15:58,639
the reviews of paper 278

401
00:15:58,639 --> 00:16:01,360
and then the attacker defines the onload

402
00:16:01,360 --> 00:16:03,360
event pointing to the reviewer

403
00:16:03,360 --> 00:16:05,600
function and the on error event pointing

404
00:16:05,600 --> 00:16:07,759
to the not reviewer function

405
00:16:07,759 --> 00:16:10,639
so what happens when there is an html

406
00:16:10,639 --> 00:16:13,839
tag defined like this

407
00:16:13,920 --> 00:16:18,000
when when the user's browser loads

408
00:16:18,000 --> 00:16:21,040
this mild site.com as a result of

409
00:16:21,040 --> 00:16:24,639
this html tag an http request will be

410
00:16:24,639 --> 00:16:25,120
sent

411
00:16:25,120 --> 00:16:29,120
to this state dependent url and

412
00:16:29,120 --> 00:16:31,360
if the user is actually logged in as the

413
00:16:31,360 --> 00:16:33,279
reviewer of paper 278

414
00:16:33,279 --> 00:16:36,320
then a 200 response code is returned

415
00:16:36,320 --> 00:16:38,880
and as a result of that the on load

416
00:16:38,880 --> 00:16:40,639
event is actually triggered because it

417
00:16:40,639 --> 00:16:42,160
was a 200 response

418
00:16:42,160 --> 00:16:43,600
and then the reviewer function is

419
00:16:43,600 --> 00:16:45,920
actually executed so this means

420
00:16:45,920 --> 00:16:48,320
alice is actually the reviewer of the

421
00:16:48,320 --> 00:16:51,279
paper 278. similarly

422
00:16:51,279 --> 00:16:54,079
if alice was not the reviewer of paper

423
00:16:54,079 --> 00:16:55,600
number 278

424
00:16:55,600 --> 00:16:58,959
then a response for of with code for not

425
00:16:58,959 --> 00:17:00,639
three is actually returned and this will

426
00:17:00,639 --> 00:17:01,519
cause the on

427
00:17:01,519 --> 00:17:04,319
error event to be triggered and the not

428
00:17:04,319 --> 00:17:06,319
reviewer function will be executed so

429
00:17:06,319 --> 00:17:09,679
in this way mal site.com cano can know

430
00:17:09,679 --> 00:17:11,520
what was the cross origin response that

431
00:17:11,520 --> 00:17:12,640
was received

432
00:17:12,640 --> 00:17:14,959
and then thereby determine whether alice

433
00:17:14,959 --> 00:17:17,599
was the reviewer of paper number 270

434
00:17:17,599 --> 00:17:21,359
paper number 278 or not

435
00:17:21,359 --> 00:17:24,079
this might seem very easy in this

436
00:17:24,079 --> 00:17:24,720
example

437
00:17:24,720 --> 00:17:26,799
however there are different challenges

438
00:17:26,799 --> 00:17:29,200
for mounting these types of attacks

439
00:17:29,200 --> 00:17:32,080
so the first challenge is that multiple

440
00:17:32,080 --> 00:17:34,320
states can have the same response

441
00:17:34,320 --> 00:17:38,080
so here i just discussed the two states

442
00:17:38,080 --> 00:17:41,039
where the user is the reviewer of paper

443
00:17:41,039 --> 00:17:44,480
278 and not the reviewer of papers 278

444
00:17:44,480 --> 00:17:46,400
and they have two different response

445
00:17:46,400 --> 00:17:49,039
code however

446
00:17:49,039 --> 00:17:51,520
what if the user was not even logged in

447
00:17:51,520 --> 00:17:52,400
at hot

448
00:17:52,400 --> 00:17:54,880
crp.com that is like the user is logged

449
00:17:54,880 --> 00:17:56,880
out of hotcrp.com

450
00:17:56,880 --> 00:17:59,600
when the attack has been performed when

451
00:17:59,600 --> 00:18:00,720
this happens

452
00:18:00,720 --> 00:18:04,320
then also a response code with

453
00:18:04,320 --> 00:18:06,559
an http response with the status code

454
00:18:06,559 --> 00:18:07,840
200 is

455
00:18:07,840 --> 00:18:10,559
returned as you can see this is the same

456
00:18:10,559 --> 00:18:11,039
as

457
00:18:11,039 --> 00:18:13,039
the case where the user is actually the

458
00:18:13,039 --> 00:18:14,640
reviewer of the paper

459
00:18:14,640 --> 00:18:17,520
so what might happen is if the user

460
00:18:17,520 --> 00:18:19,919
simply depends on the on load even being

461
00:18:19,919 --> 00:18:21,039
fired

462
00:18:21,039 --> 00:18:25,400
if the user is not even a member of

463
00:18:25,400 --> 00:18:26,880
hotzierfood.crp.com

464
00:18:26,880 --> 00:18:29,039
the attacker might think that they are

465
00:18:29,039 --> 00:18:30,640
the reviewer of the paper

466
00:18:30,640 --> 00:18:34,880
so this can lead to false positives

467
00:18:35,280 --> 00:18:38,480
so as i said

468
00:18:38,480 --> 00:18:42,559
uh the the the first and the last states

469
00:18:42,559 --> 00:18:43,039
will

470
00:18:43,039 --> 00:18:45,520
have similar uh impact that is the

471
00:18:45,520 --> 00:18:47,520
onload event being fired and

472
00:18:47,520 --> 00:18:50,799
lead to false positives so the second

473
00:18:50,799 --> 00:18:51,440
challenge

474
00:18:51,440 --> 00:18:53,600
the second challenge is that uh

475
00:18:53,600 --> 00:18:56,000
different

476
00:18:56,000 --> 00:18:58,799
exercises the same exercises access leak

477
00:18:58,799 --> 00:19:00,000
payload

478
00:19:00,000 --> 00:19:01,679
may work differently in different

479
00:19:01,679 --> 00:19:04,320
browsers so let's see an example so the

480
00:19:04,320 --> 00:19:05,200
example i

481
00:19:05,200 --> 00:19:08,480
uh showed were the attacker is actually

482
00:19:08,480 --> 00:19:11,360
using the embed.html tag to determine

483
00:19:11,360 --> 00:19:13,919
whether the user is whether alice is a

484
00:19:13,919 --> 00:19:15,760
reviewer or not a reviewer

485
00:19:15,760 --> 00:19:19,120
it actually works only in firefox

486
00:19:19,120 --> 00:19:22,480
and microsoft edge it will not work if

487
00:19:22,480 --> 00:19:24,000
alice was using

488
00:19:24,000 --> 00:19:27,120
a google chrome browser so

489
00:19:27,120 --> 00:19:29,360
in order to handle google chrome there

490
00:19:29,360 --> 00:19:30,640
is a way

491
00:19:30,640 --> 00:19:32,559
the only difference is that instead of

492
00:19:32,559 --> 00:19:33,919
the embed tag

493
00:19:33,919 --> 00:19:36,160
the link tag should be used this is

494
00:19:36,160 --> 00:19:38,160
because different tags

495
00:19:38,160 --> 00:19:41,520
and the event even events fire

496
00:19:41,520 --> 00:19:43,520
differently in different browsers

497
00:19:43,520 --> 00:19:44,960
i think this is mainly because of the

498
00:19:44,960 --> 00:19:47,039
difference in the underlying browser

499
00:19:47,039 --> 00:19:49,440
engines

500
00:19:49,520 --> 00:19:53,360
so in order to perform a cross-site

501
00:19:53,360 --> 00:19:56,720
um leak attack uh in order to perform a

502
00:19:56,720 --> 00:19:57,600
cosy attack

503
00:19:57,600 --> 00:20:01,039
uh in a robust way

504
00:20:01,039 --> 00:20:04,080
the attacker has to accommodate for

505
00:20:04,080 --> 00:20:06,960
multiple states having the same response

506
00:20:06,960 --> 00:20:07,760
and then

507
00:20:07,760 --> 00:20:10,559
the same payload behaving differently in

508
00:20:10,559 --> 00:20:13,440
different browsers

509
00:20:13,840 --> 00:20:17,360
so in order to make the job of the

510
00:20:17,360 --> 00:20:19,039
attacker easy

511
00:20:19,039 --> 00:20:22,799
or in order to help security researchers

512
00:20:22,799 --> 00:20:24,159
job easy

513
00:20:24,159 --> 00:20:27,120
we defined or we introduced what is

514
00:20:27,120 --> 00:20:27,840
known as

515
00:20:27,840 --> 00:20:30,559
cosy attack classes so what are these

516
00:20:30,559 --> 00:20:31,440
attack classes

517
00:20:31,440 --> 00:20:34,640
they have a name and they have

518
00:20:34,640 --> 00:20:37,520
the state dependent url responses that

519
00:20:37,520 --> 00:20:39,440
it can differentiate

520
00:20:39,440 --> 00:20:41,520
and then the cross site leak associated

521
00:20:41,520 --> 00:20:43,440
to the attack class

522
00:20:43,440 --> 00:20:46,159
and then the browser support details so

523
00:20:46,159 --> 00:20:47,600
let's see an example

524
00:20:47,600 --> 00:20:49,520
so this is one of the attack class that

525
00:20:49,520 --> 00:20:51,200
we defined it basically

526
00:20:51,200 --> 00:20:53,679
has the name event fires data error

527
00:20:53,679 --> 00:20:55,120
script

528
00:20:55,120 --> 00:20:59,200
it basically can differentiate between

529
00:20:59,200 --> 00:21:02,240
a response with status code 200 and

530
00:21:02,240 --> 00:21:05,360
a javascript content type and a response

531
00:21:05,360 --> 00:21:06,159
with

532
00:21:06,159 --> 00:21:10,559
a status code for xx or 5xx

533
00:21:10,559 --> 00:21:14,080
response and the excess leak that is

534
00:21:14,080 --> 00:21:16,720
used in this attack class is the script

535
00:21:16,720 --> 00:21:19,840
html tag and the manifestation

536
00:21:19,840 --> 00:21:22,640
of the difference in the response is

537
00:21:22,640 --> 00:21:23,120
actually

538
00:21:23,120 --> 00:21:25,679
visible through the on load and on error

539
00:21:25,679 --> 00:21:27,280
events being fired

540
00:21:27,280 --> 00:21:30,799
and this this attack class is basically

541
00:21:30,799 --> 00:21:32,720
supported in all the three browsers

542
00:21:32,720 --> 00:21:34,559
because we conducted various experiments

543
00:21:34,559 --> 00:21:36,799
on these browsers with this type of

544
00:21:36,799 --> 00:21:40,080
setting so same way

545
00:21:40,080 --> 00:21:42,559
we identified a lot of different attack

546
00:21:42,559 --> 00:21:43,280
classes

547
00:21:43,280 --> 00:21:45,520
we conducted a lot of experiments with

548
00:21:45,520 --> 00:21:46,960
with we tried to cover

549
00:21:46,960 --> 00:21:50,240
almost all the html tags and

550
00:21:50,240 --> 00:21:54,720
cross origin request sending

551
00:21:54,720 --> 00:21:58,000
so precisely we identified 40

552
00:21:58,000 --> 00:22:00,080
different attack classes for performing

553
00:22:00,080 --> 00:22:01,679
cosi attacks

554
00:22:01,679 --> 00:22:04,960
out of these 40 attack classes 21 of

555
00:22:04,960 --> 00:22:05,280
them

556
00:22:05,280 --> 00:22:07,520
were new attack classes in the sense

557
00:22:07,520 --> 00:22:09,280
that they were not discussed previously

558
00:22:09,280 --> 00:22:10,840
in the literature

559
00:22:10,840 --> 00:22:13,760
and in as a part of this research we

560
00:22:13,760 --> 00:22:16,080
even identified a completely noble

561
00:22:16,080 --> 00:22:18,159
cross-site leak method a browser site

562
00:22:18,159 --> 00:22:19,600
channel leak method

563
00:22:19,600 --> 00:22:21,520
it is actually based on the post message

564
00:22:21,520 --> 00:22:23,919
api so let me quickly explain to you

565
00:22:23,919 --> 00:22:25,200
what is this novel

566
00:22:25,200 --> 00:22:28,480
cross site leak method so

567
00:22:28,480 --> 00:22:30,159
in order to understand this i will have

568
00:22:30,159 --> 00:22:31,919
to quickly explain to you what is the

569
00:22:31,919 --> 00:22:33,760
post message api

570
00:22:33,760 --> 00:22:37,039
so the post message api allows windows

571
00:22:37,039 --> 00:22:39,360
browser windows to talk to each other no

572
00:22:39,360 --> 00:22:40,799
matter whether they are from the same

573
00:22:40,799 --> 00:22:42,480
origin or a different origin

574
00:22:42,480 --> 00:22:45,919
so to give you an example site1.com

575
00:22:45,919 --> 00:22:50,080
can open site2.com in a new window

576
00:22:50,080 --> 00:22:52,640
and then exchange messages with it using

577
00:22:52,640 --> 00:22:55,840
the post message api

578
00:22:56,159 --> 00:22:59,039
so this cross site leak that we

579
00:22:59,039 --> 00:22:59,919
identified

580
00:22:59,919 --> 00:23:02,720
that uses the post message api works in

581
00:23:02,720 --> 00:23:04,159
the following way

582
00:23:04,159 --> 00:23:07,200
so it is actually applicable to state

583
00:23:07,200 --> 00:23:08,960
dependent urls having the following

584
00:23:08,960 --> 00:23:10,640
property so

585
00:23:10,640 --> 00:23:15,440
let's say there is a blog website

586
00:23:15,440 --> 00:23:18,240
and there is a blog article with the id

587
00:23:18,240 --> 00:23:20,080
123

588
00:23:20,080 --> 00:23:23,200
so if someone visits this url that is

589
00:23:23,200 --> 00:23:26,320
trying to fetch the admin panel of

590
00:23:26,320 --> 00:23:29,520
this blog article then

591
00:23:29,520 --> 00:23:31,600
if they are actually logged in as the

592
00:23:31,600 --> 00:23:33,919
owner of this blog article

593
00:23:33,919 --> 00:23:37,440
then an http response containing a

594
00:23:37,440 --> 00:23:40,480
post message admin is actually returned

595
00:23:40,480 --> 00:23:41,600
in the response

596
00:23:41,600 --> 00:23:43,360
however if they are not the owner of

597
00:23:43,360 --> 00:23:45,600
this article number one two three

598
00:23:45,600 --> 00:23:48,320
then a post then a response with a post

599
00:23:48,320 --> 00:23:48,799
message

600
00:23:48,799 --> 00:23:51,840
error is actually returned when this

601
00:23:51,840 --> 00:23:52,960
happens

602
00:23:52,960 --> 00:23:56,400
uh let's say i'll let's say

603
00:23:56,400 --> 00:23:59,360
there is a controversial blog posted in

604
00:23:59,360 --> 00:24:01,600
blog.com with the id

605
00:24:01,600 --> 00:24:04,640
123 and the malicious party wants to

606
00:24:04,640 --> 00:24:05,200
know whether

607
00:24:05,200 --> 00:24:07,440
alice is actually the author of this

608
00:24:07,440 --> 00:24:09,600
this controversial blog article

609
00:24:09,600 --> 00:24:12,400
what they can do is uh from ali's web

610
00:24:12,400 --> 00:24:13,120
browser

611
00:24:13,120 --> 00:24:16,000
they can actually uh open a malicious

612
00:24:16,000 --> 00:24:16,480
site

613
00:24:16,480 --> 00:24:18,559
and this malicious site can actually

614
00:24:18,559 --> 00:24:19,679
open this

615
00:24:19,679 --> 00:24:23,520
state dependent url in a new window and

616
00:24:23,520 --> 00:24:27,039
as i said if alice is actually logged in

617
00:24:27,039 --> 00:24:28,159
as the owner of this

618
00:24:28,159 --> 00:24:31,360
article so in that case alice will have

619
00:24:31,360 --> 00:24:32,000
the state

620
00:24:32,000 --> 00:24:35,679
owner of article 123 in blog.com

621
00:24:35,679 --> 00:24:38,240
what happens is that the state dependent

622
00:24:38,240 --> 00:24:39,120
url

623
00:24:39,120 --> 00:24:41,520
that is in this window will there will

624
00:24:41,520 --> 00:24:42,240
be

625
00:24:42,240 --> 00:24:44,240
the code for sending the post message

626
00:24:44,240 --> 00:24:45,679
admin as i said

627
00:24:45,679 --> 00:24:47,679
this is the response received if the

628
00:24:47,679 --> 00:24:50,320
alice was the owner of the article 123

629
00:24:50,320 --> 00:24:53,039
and what this will cause is that since

630
00:24:53,039 --> 00:24:53,520
it's a

631
00:24:53,520 --> 00:24:56,879
broadcast post message

632
00:24:57,760 --> 00:25:00,159
this message is actually received by the

633
00:25:00,159 --> 00:25:01,200
malicious side

634
00:25:01,200 --> 00:25:02,960
it is a broadcast message so it is

635
00:25:02,960 --> 00:25:04,480
actually received by

636
00:25:04,480 --> 00:25:06,400
all the sites which are actually opening

637
00:25:06,400 --> 00:25:08,240
it and

638
00:25:08,240 --> 00:25:11,120
since the message is admin as you can

639
00:25:11,120 --> 00:25:12,000
see the message

640
00:25:12,000 --> 00:25:14,400
admin is received on if the state is

641
00:25:14,400 --> 00:25:16,720
actually the owner of article 123

642
00:25:16,720 --> 00:25:19,039
so in that way the malicious site can

643
00:25:19,039 --> 00:25:21,039
know that alice is actually the owner of

644
00:25:21,039 --> 00:25:22,480
this controversial article

645
00:25:22,480 --> 00:25:26,000
123 returned by an anonymous

646
00:25:26,000 --> 00:25:29,840
user account at blog.com

647
00:25:30,000 --> 00:25:32,000
so yeah this is basically the code to

648
00:25:32,000 --> 00:25:33,760
check whether if it's the admin

649
00:25:33,760 --> 00:25:35,279
message received then it's like the

650
00:25:35,279 --> 00:25:37,360
status that the or it is the owner of

651
00:25:37,360 --> 00:25:39,600
the article

652
00:25:39,600 --> 00:25:42,400
so there are actually a lot of related

653
00:25:42,400 --> 00:25:42,720
work

654
00:25:42,720 --> 00:25:45,520
done uh when it comes to cosy attacks

655
00:25:45,520 --> 00:25:46,159
however

656
00:25:46,159 --> 00:25:48,880
there are some limitations so it is a

657
00:25:48,880 --> 00:25:49,360
bit

658
00:25:49,360 --> 00:25:51,679
messy in the sense that different people

659
00:25:51,679 --> 00:25:53,520
call these attacks different names like

660
00:25:53,520 --> 00:25:55,840
login detection login oracle url status

661
00:25:55,840 --> 00:25:57,679
identification etc

662
00:25:57,679 --> 00:25:59,919
and there is not much discussion on the

663
00:25:59,919 --> 00:26:01,440
need to handle these

664
00:26:01,440 --> 00:26:04,480
overlapping states and then the support

665
00:26:04,480 --> 00:26:07,600
for multiple browsers that is the same

666
00:26:07,600 --> 00:26:09,600
attack payload working differently on

667
00:26:09,600 --> 00:26:11,600
different browsers and all this

668
00:26:11,600 --> 00:26:13,440
and then there is also not much

669
00:26:13,440 --> 00:26:15,840
discussion on automatic detection of

670
00:26:15,840 --> 00:26:17,039
cosy attacks

671
00:26:17,039 --> 00:26:19,520
and the automatic creation of attack

672
00:26:19,520 --> 00:26:21,919
pages

673
00:26:21,919 --> 00:26:24,000
so this is where we focused on our

674
00:26:24,000 --> 00:26:25,279
research so

675
00:26:25,279 --> 00:26:26,960
these are the contributions of our

676
00:26:26,960 --> 00:26:28,559
research

677
00:26:28,559 --> 00:26:30,240
we present cozy attacks as a

678
00:26:30,240 --> 00:26:31,679
comprehensive category

679
00:26:31,679 --> 00:26:34,320
instead of calling them different names

680
00:26:34,320 --> 00:26:36,240
and then we introduce the concept of

681
00:26:36,240 --> 00:26:37,279
attack classes

682
00:26:37,279 --> 00:26:39,360
to know which attack class works on

683
00:26:39,360 --> 00:26:40,559
which browsers and

684
00:26:40,559 --> 00:26:43,279
is based on which leak method and then

685
00:26:43,279 --> 00:26:44,320
we identify

686
00:26:44,320 --> 00:26:46,880
a new cross site leak method based on

687
00:26:46,880 --> 00:26:48,720
the post message api i explained this

688
00:26:48,720 --> 00:26:50,159
earlier

689
00:26:50,159 --> 00:26:53,919
and then uh we present bastakosi

690
00:26:53,919 --> 00:26:55,840
uh italians must be familiar with the

691
00:26:55,840 --> 00:26:57,440
name bastakosi

692
00:26:57,440 --> 00:27:00,240
uh and it that's the name of our tool

693
00:27:00,240 --> 00:27:01,679
that can be used to

694
00:27:01,679 --> 00:27:04,559
automatically identify uh kosi attacks

695
00:27:04,559 --> 00:27:06,480
and build complex attack pages

696
00:27:06,480 --> 00:27:08,320
so if you have a website you would like

697
00:27:08,320 --> 00:27:09,840
to check for

698
00:27:09,840 --> 00:27:12,320
cosy attacks you can just run basta oc

699
00:27:12,320 --> 00:27:14,799
against your website

700
00:27:14,799 --> 00:27:18,480
so once we had the tool we tested four

701
00:27:18,480 --> 00:27:21,279
standalone web applications and 500 top

702
00:27:21,279 --> 00:27:23,919
websites from the alexa top sites and we

703
00:27:23,919 --> 00:27:27,360
discovered cosy attacks on all of them

704
00:27:27,360 --> 00:27:29,919
so let me explain to you the basic

705
00:27:29,919 --> 00:27:31,679
architecture of our tool

706
00:27:31,679 --> 00:27:35,840
so the tool basically takes as input

707
00:27:35,840 --> 00:27:37,760
selenium scripts to load different

708
00:27:37,760 --> 00:27:40,480
states in web browsers

709
00:27:40,480 --> 00:27:44,000
and then after uh after we have the

710
00:27:44,000 --> 00:27:45,919
selenium scripts we know how to load the

711
00:27:45,919 --> 00:27:47,200
states in the browsers

712
00:27:47,200 --> 00:27:48,799
and then we want to collect different

713
00:27:48,799 --> 00:27:50,320
state state

714
00:27:50,320 --> 00:27:53,360
dependent urls so we leverage

715
00:27:53,360 --> 00:27:56,080
a web app crawler to in order to

716
00:27:56,080 --> 00:27:57,840
automatically identify different state

717
00:27:57,840 --> 00:28:00,000
dependent urls

718
00:28:00,000 --> 00:28:02,320
then once we have the state dependent

719
00:28:02,320 --> 00:28:04,640
urls of the application under test

720
00:28:04,640 --> 00:28:07,039
uh we identify the attack vectors that

721
00:28:07,039 --> 00:28:09,120
are perfect or suiting for these state

722
00:28:09,120 --> 00:28:10,799
dependent urls

723
00:28:10,799 --> 00:28:14,240
and then we combine these identified

724
00:28:14,240 --> 00:28:15,279
attack vectors

725
00:28:15,279 --> 00:28:16,960
and generally automatically generate

726
00:28:16,960 --> 00:28:18,320
attack pages

727
00:28:18,320 --> 00:28:22,159
and then these attack pages can be

728
00:28:22,159 --> 00:28:24,799
are like proof of concept to show that

729
00:28:24,799 --> 00:28:27,679
uh there is a cross-site cosy attack

730
00:28:27,679 --> 00:28:31,760
against the web application under test

731
00:28:31,760 --> 00:28:34,480
so as i said we conducted an evaluation

732
00:28:34,480 --> 00:28:35,919
using our tool on top

733
00:28:35,919 --> 00:28:39,760
websites so we tested four standalone

734
00:28:39,760 --> 00:28:41,120
web applications such as

735
00:28:41,120 --> 00:28:44,080
hot crp gitlab github enterprise and

736
00:28:44,080 --> 00:28:44,960
opencart

737
00:28:44,960 --> 00:28:48,000
and 58 websites from the alexa top 150

738
00:28:48,000 --> 00:28:49,360
sites

739
00:28:49,360 --> 00:28:53,520
since we since we deal with states

740
00:28:53,520 --> 00:28:56,320
we focused only on those top websites

741
00:28:56,320 --> 00:28:56,960
having

742
00:28:56,960 --> 00:29:00,159
the account creation feature the result

743
00:29:00,159 --> 00:29:02,640
was that we found at least one cosy

744
00:29:02,640 --> 00:29:04,640
attack on all the tested sites

745
00:29:04,640 --> 00:29:07,120
we responsibly disclosed uh the

746
00:29:07,120 --> 00:29:09,279
identified vulnerabilities and

747
00:29:09,279 --> 00:29:11,279
most of them were confirmed and some are

748
00:29:11,279 --> 00:29:12,559
already fixed and

749
00:29:12,559 --> 00:29:14,399
we even received bug bounties for our

750
00:29:14,399 --> 00:29:16,000
report

751
00:29:16,000 --> 00:29:18,320
so let me explain to you some of the

752
00:29:18,320 --> 00:29:19,679
most interesting ones that

753
00:29:19,679 --> 00:29:21,200
uh well vulnerabilities that we

754
00:29:21,200 --> 00:29:24,080
identified so in hotcrp.com which is

755
00:29:24,080 --> 00:29:25,679
used by most of the top

756
00:29:25,679 --> 00:29:27,600
security conferences for anonymous

757
00:29:27,600 --> 00:29:29,520
reviewing system we identified that an

758
00:29:29,520 --> 00:29:31,440
attacker can identify

759
00:29:31,440 --> 00:29:34,640
the anonymous reviewers of any paper

760
00:29:34,640 --> 00:29:37,840
and then in blogger blogger.com which is

761
00:29:37,840 --> 00:29:39,279
owned by google we

762
00:29:39,279 --> 00:29:41,600
identified that it is possible for an

763
00:29:41,600 --> 00:29:43,120
attacker to

764
00:29:43,120 --> 00:29:46,080
identify and the author of an anonymous

765
00:29:46,080 --> 00:29:47,919
blog article

766
00:29:47,919 --> 00:29:50,640
then in google drive it is possible to

767
00:29:50,640 --> 00:29:52,559
know whether the victim is the owner of

768
00:29:52,559 --> 00:29:53,279
a

769
00:29:53,279 --> 00:29:55,120
sensitive file that was uploaded to

770
00:29:55,120 --> 00:29:56,640
google drive

771
00:29:56,640 --> 00:29:59,600
and then in pornhub it was possible to

772
00:29:59,600 --> 00:29:59,919
know

773
00:29:59,919 --> 00:30:02,320
if the user the victim is the owner of a

774
00:30:02,320 --> 00:30:04,480
specific porn channel

775
00:30:04,480 --> 00:30:06,480
this can be a very sensitive information

776
00:30:06,480 --> 00:30:08,559
so for some people

777
00:30:08,559 --> 00:30:12,080
and then in websites such as imdb inger

778
00:30:12,080 --> 00:30:14,640
and linkedin we noticed that an attacker

779
00:30:14,640 --> 00:30:15,360
can

780
00:30:15,360 --> 00:30:19,679
track users by abusing cosy attacks

781
00:30:19,679 --> 00:30:21,360
across different browsers and across

782
00:30:21,360 --> 00:30:23,200
different devices this is because the

783
00:30:23,200 --> 00:30:25,600
website in website in which they are

784
00:30:25,600 --> 00:30:27,679
logged in that is imdb linkedin and

785
00:30:27,679 --> 00:30:29,919
inger are actually leaking their

786
00:30:29,919 --> 00:30:33,360
identity to other websites

787
00:30:33,360 --> 00:30:36,480
and uh just to clarify this uh

788
00:30:36,480 --> 00:30:38,880
these attacks work even if you use like

789
00:30:38,880 --> 00:30:39,679
uh

790
00:30:39,679 --> 00:30:42,720
um anonymization services such as store

791
00:30:42,720 --> 00:30:45,760
because these are like browser leaks and

792
00:30:45,760 --> 00:30:46,080
then

793
00:30:46,080 --> 00:30:48,399
in github and git lab it was possible

794
00:30:48,399 --> 00:30:50,480
for the malicious party to identify the

795
00:30:50,480 --> 00:30:52,799
roles of the victim on private reports

796
00:30:52,799 --> 00:30:55,760
so let's say there is a private github

797
00:30:55,760 --> 00:30:58,080
repository with a very

798
00:30:58,080 --> 00:31:01,600
sensitive hacking tool these

799
00:31:01,600 --> 00:31:03,840
nation states can actually determine who

800
00:31:03,840 --> 00:31:04,960
actually worked

801
00:31:04,960 --> 00:31:06,720
on those tools and who has access to

802
00:31:06,720 --> 00:31:09,760
those repositories

803
00:31:10,880 --> 00:31:15,440
so all these experiments were

804
00:31:15,440 --> 00:31:18,640
performed in a very responsible manner

805
00:31:18,640 --> 00:31:21,120
using the accounts that we controlled so

806
00:31:21,120 --> 00:31:23,200
how can we defend from cosy attacks

807
00:31:23,200 --> 00:31:25,360
so there are two types of defenses one

808
00:31:25,360 --> 00:31:27,440
is the website based defense that the

809
00:31:27,440 --> 00:31:30,480
website can actually

810
00:31:30,480 --> 00:31:32,640
use to defend against these attacks so

811
00:31:32,640 --> 00:31:33,600
the first type

812
00:31:33,600 --> 00:31:36,799
uh should be famous for people uh

813
00:31:36,799 --> 00:31:38,480
working in the web security domain that

814
00:31:38,480 --> 00:31:40,000
is same site cookies

815
00:31:40,000 --> 00:31:42,240
so same site cookies automatically

816
00:31:42,240 --> 00:31:43,120
prevent

817
00:31:43,120 --> 00:31:46,320
uh the sending uh sending of

818
00:31:46,320 --> 00:31:49,200
cookies in a third party context so we

819
00:31:49,200 --> 00:31:51,039
saw that the malicious site is sending

820
00:31:51,039 --> 00:31:52,840
requests to

821
00:31:52,840 --> 00:31:56,080
food.hotcrp.com and it is actually

822
00:31:56,080 --> 00:31:57,679
when this happens the cookies are

823
00:31:57,679 --> 00:31:59,360
automatically sent with this request so

824
00:31:59,360 --> 00:32:01,679
basically same side cookies are a way

825
00:32:01,679 --> 00:32:03,279
to prevent the automatic sending of

826
00:32:03,279 --> 00:32:05,279
these cookies and then there are other

827
00:32:05,279 --> 00:32:07,039
header based defenses such as

828
00:32:07,039 --> 00:32:09,039
cross origin resource policy fetch

829
00:32:09,039 --> 00:32:10,080
metadata and cross

830
00:32:10,080 --> 00:32:12,240
origin opener policy you can read more

831
00:32:12,240 --> 00:32:13,519
about them

832
00:32:13,519 --> 00:32:14,960
in their documentation to understand

833
00:32:14,960 --> 00:32:17,200
more of how these can be

834
00:32:17,200 --> 00:32:19,919
implemented then there are browser-based

835
00:32:19,919 --> 00:32:20,799
defenses

836
00:32:20,799 --> 00:32:25,039
that can be used uh by uh you like

837
00:32:25,039 --> 00:32:27,919
users who use the browse on the web to

838
00:32:27,919 --> 00:32:30,080
defend against cosy attacks

839
00:32:30,080 --> 00:32:33,200
so one of the defense is to enforce the

840
00:32:33,200 --> 00:32:33,919
default

841
00:32:33,919 --> 00:32:37,440
uh same site policy most

842
00:32:37,440 --> 00:32:39,840
top browsers are actually moving in this

843
00:32:39,840 --> 00:32:41,519
direction and some of them have already

844
00:32:41,519 --> 00:32:44,880
implemented this protection

845
00:32:45,279 --> 00:32:48,559
the tor browser interestingly when we

846
00:32:48,559 --> 00:32:49,519
tested

847
00:32:49,519 --> 00:32:53,039
it behaved as if it had the default

848
00:32:53,039 --> 00:32:55,760
same site protection that is not sending

849
00:32:55,760 --> 00:32:58,240
uh cookies in the third party context

850
00:32:58,240 --> 00:33:00,880
however during our experiments we notice

851
00:33:00,880 --> 00:33:01,840
that it

852
00:33:01,840 --> 00:33:04,080
this does not prevent window based

853
00:33:04,080 --> 00:33:05,760
attack such as the post message attack

854
00:33:05,760 --> 00:33:06,880
that we explained

855
00:33:06,880 --> 00:33:08,480
and there is also this other attack

856
00:33:08,480 --> 00:33:10,000
using the frame count

857
00:33:10,000 --> 00:33:12,960
so we actually responsibly reported this

858
00:33:12,960 --> 00:33:13,600
to tor

859
00:33:13,600 --> 00:33:15,039
and they actually took our report

860
00:33:15,039 --> 00:33:16,640
seriously and they are actually planning

861
00:33:16,640 --> 00:33:18,960
to fix this

862
00:33:18,960 --> 00:33:22,080
so to conclude my talk uh

863
00:33:22,080 --> 00:33:24,480
we present different cosy attacks uh as

864
00:33:24,480 --> 00:33:26,320
a comprehensive category introduced the

865
00:33:26,320 --> 00:33:28,399
concept of cosy attack classes

866
00:33:28,399 --> 00:33:30,399
we identified a new cross-site leak

867
00:33:30,399 --> 00:33:32,159
based on the post message api

868
00:33:32,159 --> 00:33:34,000
we present basta kosi a tool to

869
00:33:34,000 --> 00:33:36,320
automatically identify cosy attacks

870
00:33:36,320 --> 00:33:38,480
and then we test different standalone

871
00:33:38,480 --> 00:33:39,600
applications and

872
00:33:39,600 --> 00:33:42,000
top websites and identify cosy attacks

873
00:33:42,000 --> 00:33:44,000
on each of them

874
00:33:44,000 --> 00:33:47,600
so the technical details of our work are

875
00:33:47,600 --> 00:33:49,279
actually available

876
00:33:49,279 --> 00:33:52,559
in archive so you can click this link

877
00:33:52,559 --> 00:33:55,600
to actually get more details so

878
00:33:55,600 --> 00:33:58,799
if you have any questions please

879
00:33:58,799 --> 00:34:06,240
please let me know

880
00:34:06,240 --> 00:34:09,599
hello my friend do you hear me yeah i

881
00:34:09,599 --> 00:34:11,199
can hear you can you hear me

882
00:34:11,199 --> 00:34:13,280
yeah perfect perfect she was from italy

883
00:34:13,280 --> 00:34:15,119
i was in india

884
00:34:15,119 --> 00:34:17,199
it's fine i just got married two weeks

885
00:34:17,199 --> 00:34:20,879
ago so yeah

886
00:34:20,879 --> 00:34:22,639
you told me i was to get married with a

887
00:34:22,639 --> 00:34:25,359
lockdown yeah it was challenging but

888
00:34:25,359 --> 00:34:26,239
also

889
00:34:26,239 --> 00:34:28,879
uh it was fun because usually in india

890
00:34:28,879 --> 00:34:29,839
there are like a thousand people

891
00:34:29,839 --> 00:34:31,119
attending the wedding because of

892
00:34:31,119 --> 00:34:33,918
lockdown it came down to like 50 so it

893
00:34:33,918 --> 00:34:35,119
was less challenging

894
00:34:35,119 --> 00:34:37,520
it's okay

895
00:34:38,960 --> 00:34:42,879
yeah yeah

896
00:34:42,879 --> 00:34:46,639
cool so uh thanks for submitting to our

897
00:34:46,639 --> 00:34:47,440
conference

898
00:34:47,440 --> 00:34:50,960
and i hope you enjoyed what you've done

899
00:34:50,960 --> 00:34:51,839
so far

900
00:34:51,839 --> 00:34:54,399
uh so we had a lot of questions coming

901
00:34:54,399 --> 00:34:55,918
up i can count at least

902
00:34:55,918 --> 00:34:59,280
five of them uh so the first one here i

903
00:34:59,280 --> 00:35:00,079
can read

904
00:35:00,079 --> 00:35:03,599
is about fact that uh

905
00:35:03,599 --> 00:35:05,599
yeah you define the new term if you want

906
00:35:05,599 --> 00:35:07,440
i mean all these different

907
00:35:07,440 --> 00:35:08,880
vulnerabilities that

908
00:35:08,880 --> 00:35:11,440
were unclassified before now they go

909
00:35:11,440 --> 00:35:13,359
under the same category that you define

910
00:35:13,359 --> 00:35:14,640
as cosi

911
00:35:14,640 --> 00:35:17,920
so the question is if you add any

912
00:35:17,920 --> 00:35:20,400
feedback from always for our

913
00:35:20,400 --> 00:35:22,079
standardization community and try to

914
00:35:22,079 --> 00:35:22,880
adopt

915
00:35:22,880 --> 00:35:26,720
such new category for example in uh

916
00:35:26,720 --> 00:35:29,359
in to community vulnerabilities closure

917
00:35:29,359 --> 00:35:30,160
or

918
00:35:30,160 --> 00:35:33,520
that kind of things basically so this is

919
00:35:33,520 --> 00:35:34,560
actually a good question

920
00:35:34,560 --> 00:35:37,839
so but if you think in a critical way

921
00:35:37,839 --> 00:35:38,880
what happened was

922
00:35:38,880 --> 00:35:40,320
there are already a lot of different

923
00:35:40,320 --> 00:35:42,800
names for these attacks and although we

924
00:35:42,800 --> 00:35:45,119
systemized it we also introduced a new

925
00:35:45,119 --> 00:35:46,160
name so it's like we

926
00:35:46,160 --> 00:35:49,200
added a bit of more mess right so

927
00:35:49,200 --> 00:35:52,000
uh when we actually observed uh during

928
00:35:52,000 --> 00:35:53,920
the time this research was conducted

929
00:35:53,920 --> 00:35:55,520
there was already an active discussion

930
00:35:55,520 --> 00:35:57,119
on like you know how to call these

931
00:35:57,119 --> 00:35:58,640
attacks like you know to bring under a

932
00:35:58,640 --> 00:36:00,480
common umbrella and everything

933
00:36:00,480 --> 00:36:03,200
and uh google was actually uh taking a

934
00:36:03,200 --> 00:36:04,960
lot of effort in doing this

935
00:36:04,960 --> 00:36:08,000
and finally the term that was actually

936
00:36:08,000 --> 00:36:09,680
after a lot of service and everything

937
00:36:09,680 --> 00:36:11,359
the term that they agreed to call these

938
00:36:11,359 --> 00:36:12,720
kind of attacks was

939
00:36:12,720 --> 00:36:15,680
access leaks and recently they even

940
00:36:15,680 --> 00:36:16,720
started a website

941
00:36:16,720 --> 00:36:19,359
uh called uh access yeah access

942
00:36:19,359 --> 00:36:20,480
leaks.com

943
00:36:20,480 --> 00:36:23,280
where like uh to actually modify uh yeah

944
00:36:23,280 --> 00:36:25,119
the different ways to perform them so

945
00:36:25,119 --> 00:36:27,359
excess leaks became like the most like

946
00:36:27,359 --> 00:36:28,880
you know the common terminology that can

947
00:36:28,880 --> 00:36:29,839
be used to call the

948
00:36:29,839 --> 00:36:31,599
attack so i'm happy in a way that i

949
00:36:31,599 --> 00:36:33,599
didn't contribute to a new name and then

950
00:36:33,599 --> 00:36:34,480
like you know people had

951
00:36:34,480 --> 00:36:35,520
learned this new name but like the

952
00:36:35,520 --> 00:36:37,760
community adapted to the name which was

953
00:36:37,760 --> 00:36:39,599
mostly familiar with among a lot of

954
00:36:39,599 --> 00:36:40,000
people

955
00:36:40,000 --> 00:36:42,960
so yeah well it's a great recognition

956
00:36:42,960 --> 00:36:44,079
when you do research

957
00:36:44,079 --> 00:36:46,400
to see that what you do actually has an

958
00:36:46,400 --> 00:36:47,520
effect on

959
00:36:47,520 --> 00:36:50,880
some form right so good stuff uh

960
00:36:50,880 --> 00:36:53,760
okay great i will maybe uh discuss this

961
00:36:53,760 --> 00:36:55,760
later on with michael and giuseppe that

962
00:36:55,760 --> 00:36:57,200
come after your talk

963
00:36:57,200 --> 00:36:58,720
and they also work in web security

964
00:36:58,720 --> 00:37:00,320
domain so i want to hear their feedback

965
00:37:00,320 --> 00:37:01,119
on this

966
00:37:01,119 --> 00:37:03,359
but let's move forward with the next

967
00:37:03,359 --> 00:37:04,480
question which

968
00:37:04,480 --> 00:37:08,000
there was someone that was uh

969
00:37:08,000 --> 00:37:10,640
yeah i didn't really understood the way

970
00:37:10,640 --> 00:37:11,760
in youtube you can

971
00:37:11,760 --> 00:37:14,079
automatically map the return code to the

972
00:37:14,079 --> 00:37:16,240
different status of application

973
00:37:16,240 --> 00:37:18,160
as you saw in this show in the slide now

974
00:37:18,160 --> 00:37:20,640
if the returns code is for example 200

975
00:37:20,640 --> 00:37:21,280
then

976
00:37:21,280 --> 00:37:22,960
it means that the user is logged into

977
00:37:22,960 --> 00:37:24,400
the web application and possibly

978
00:37:24,400 --> 00:37:25,599
assigned to review a

979
00:37:25,599 --> 00:37:27,760
paper right if instead if it's for free

980
00:37:27,760 --> 00:37:30,160
is it it doesn't have a

981
00:37:30,160 --> 00:37:32,720
ground it's not granted to uh to review

982
00:37:32,720 --> 00:37:33,359
a paper

983
00:37:33,359 --> 00:37:36,560
so uh do you need to uh

984
00:37:36,560 --> 00:37:38,160
to have like access to the web

985
00:37:38,160 --> 00:37:39,920
application under test like to be able

986
00:37:39,920 --> 00:37:41,040
for example to

987
00:37:41,040 --> 00:37:42,720
load the application source code and so

988
00:37:42,720 --> 00:37:45,040
on or can you do like a black box

989
00:37:45,040 --> 00:37:48,079
testing of application to drive uh this

990
00:37:48,079 --> 00:37:49,280
mapping

991
00:37:49,280 --> 00:37:52,000
yeah sure so it is possible to actually

992
00:37:52,000 --> 00:37:52,720
do both

993
00:37:52,720 --> 00:37:55,839
in fact we did both approaches like

994
00:37:55,839 --> 00:37:58,320
uh we tested this for uh standalone

995
00:37:58,320 --> 00:37:59,599
applications

996
00:37:59,599 --> 00:38:02,320
and a lot of alexa sites and these top

997
00:38:02,320 --> 00:38:03,119
websites

998
00:38:03,119 --> 00:38:04,480
their source code is actually not

999
00:38:04,480 --> 00:38:06,400
available so we used a

1000
00:38:06,400 --> 00:38:08,480
black box approach for these top sites

1001
00:38:08,480 --> 00:38:10,720
like we created accounts in them

1002
00:38:10,720 --> 00:38:13,200
and we crawled the application and we

1003
00:38:13,200 --> 00:38:14,400
fetched a lot of these

1004
00:38:14,400 --> 00:38:16,400
state dependent urls and then we tried

1005
00:38:16,400 --> 00:38:17,760
to access these urls from

1006
00:38:17,760 --> 00:38:19,920
different states and see saw whether

1007
00:38:19,920 --> 00:38:21,440
they are returning different responses

1008
00:38:21,440 --> 00:38:21,920
or not

1009
00:38:21,920 --> 00:38:24,560
uh okay okay yeah and then for the white

1010
00:38:24,560 --> 00:38:26,480
box approach like hot crp it's actually

1011
00:38:26,480 --> 00:38:27,280
an open source

1012
00:38:27,280 --> 00:38:30,720
uh application so we actually identified

1013
00:38:30,720 --> 00:38:31,440
because

1014
00:38:31,440 --> 00:38:33,599
uh by crawling the application we did

1015
00:38:33,599 --> 00:38:35,680
not find those because we wanted to

1016
00:38:35,680 --> 00:38:37,119
know whether we can be anonymize

1017
00:38:37,119 --> 00:38:39,119
reviewers and through a black box

1018
00:38:39,119 --> 00:38:39,920
approach

1019
00:38:39,920 --> 00:38:42,720
uh we our automatic cloud did not find a

1020
00:38:42,720 --> 00:38:44,320
url that can actually do this

1021
00:38:44,320 --> 00:38:46,000
then we actually check the source code

1022
00:38:46,000 --> 00:38:47,680
to see whether there access such urls

1023
00:38:47,680 --> 00:38:49,520
and we identified the url that actually

1024
00:38:49,520 --> 00:38:50,480
showed in the

1025
00:38:50,480 --> 00:38:53,040
uh paper and then we actually through a

1026
00:38:53,040 --> 00:38:55,359
white box way we identified that url so

1027
00:38:55,359 --> 00:38:57,359
an approach that mixes both styles is

1028
00:38:57,359 --> 00:38:58,800
actually better for this

1029
00:38:58,800 --> 00:39:01,119
yeah for sure you have a you have a

1030
00:39:01,119 --> 00:39:01,839
larger

1031
00:39:01,839 --> 00:39:04,000
you know testing environment basically

1032
00:39:04,000 --> 00:39:06,000
uh that also bind also to the next

1033
00:39:06,000 --> 00:39:07,440
question which is how you select the

1034
00:39:07,440 --> 00:39:08,640
application i mean you mentioned that

1035
00:39:08,640 --> 00:39:09,839
you select the top

1036
00:39:09,839 --> 00:39:11,440
alex of replication that's a common

1037
00:39:11,440 --> 00:39:13,119
technique when you do like a research

1038
00:39:13,119 --> 00:39:14,240
just like top

1039
00:39:14,240 --> 00:39:16,240
ten top one and whatever so did you just

1040
00:39:16,240 --> 00:39:18,400
pick up the top android whatever or did

1041
00:39:18,400 --> 00:39:20,400
you go for those one uh i don't know

1042
00:39:20,400 --> 00:39:23,760
if you can elaborate on that aspect

1043
00:39:23,760 --> 00:39:26,720
sure yeah so this uh research was done

1044
00:39:26,720 --> 00:39:27,040
uh

1045
00:39:27,040 --> 00:39:29,520
mostly from like you know academic uh

1046
00:39:29,520 --> 00:39:30,320
point of view

1047
00:39:30,320 --> 00:39:31,920
but then we also wanted to have an

1048
00:39:31,920 --> 00:39:33,440
impact in the uh

1049
00:39:33,440 --> 00:39:35,119
like you know among like you know people

1050
00:39:35,119 --> 00:39:36,880
working on web security but who are not

1051
00:39:36,880 --> 00:39:38,480
very much linked to the academic

1052
00:39:38,480 --> 00:39:42,400
side so that's why we chose applications

1053
00:39:42,400 --> 00:39:44,400
in which there are sensitive states for

1054
00:39:44,400 --> 00:39:46,040
example um

1055
00:39:46,040 --> 00:39:48,640
hotcrp.com de-anonymizing the viewer is

1056
00:39:48,640 --> 00:39:50,000
interesting for like the academic

1057
00:39:50,000 --> 00:39:51,520
security side community

1058
00:39:51,520 --> 00:39:53,200
and then like you know knowing whether

1059
00:39:53,200 --> 00:39:54,560
someone wrote an

1060
00:39:54,560 --> 00:39:57,599
uh an anonymous blog is interesting for

1061
00:39:57,599 --> 00:39:59,440
like you know the general community

1062
00:39:59,440 --> 00:40:01,520
and then we wanted to show that these

1063
00:40:01,520 --> 00:40:03,680
attacks exist or these vulnerabilities

1064
00:40:03,680 --> 00:40:04,240
exist

1065
00:40:04,240 --> 00:40:06,640
on top websites so to do like a

1066
00:40:06,640 --> 00:40:08,880
systematic research we chose the top 150

1067
00:40:08,880 --> 00:40:09,359
sites

1068
00:40:09,359 --> 00:40:12,640
and as i said it's a bit uh it's a bit

1069
00:40:12,640 --> 00:40:13,520
uh

1070
00:40:13,520 --> 00:40:14,960
time consuming in the sense we have to

1071
00:40:14,960 --> 00:40:16,800
create accounts in these sites multiple

1072
00:40:16,800 --> 00:40:18,240
accounts because we want to see whether

1073
00:40:18,240 --> 00:40:20,160
one user can infer another user's

1074
00:40:20,160 --> 00:40:21,040
details

1075
00:40:21,040 --> 00:40:23,839
and then like create different states

1076
00:40:23,839 --> 00:40:25,359
and then as i said we use an automatic

1077
00:40:25,359 --> 00:40:27,119
tool so we have to like write selenium

1078
00:40:27,119 --> 00:40:28,560
scripts of these tools

1079
00:40:28,560 --> 00:40:30,400
and then like you know run the crawler

1080
00:40:30,400 --> 00:40:32,160
so it took a lot of effort this is why

1081
00:40:32,160 --> 00:40:33,760
we could only test one fixture inside

1082
00:40:33,760 --> 00:40:35,680
yeah for sure

1083
00:40:35,680 --> 00:40:38,880
so yeah understand understand yeah let's

1084
00:40:38,880 --> 00:40:40,640
also bind to the next question again

1085
00:40:40,640 --> 00:40:42,480
so you use selenium basically to test

1086
00:40:42,480 --> 00:40:43,680
the application

1087
00:40:43,680 --> 00:40:46,319
in this case uh do you find the way do

1088
00:40:46,319 --> 00:40:46,960
you think

1089
00:40:46,960 --> 00:40:48,960
it would be possible to automatically

1090
00:40:48,960 --> 00:40:50,720
patch an application to make actual

1091
00:40:50,720 --> 00:40:52,000
attack more difficult so

1092
00:40:52,000 --> 00:40:54,319
suppose the application or use different

1093
00:40:54,319 --> 00:40:55,440
return codes

1094
00:40:55,440 --> 00:40:57,520
you decide actually to merge this return

1095
00:40:57,520 --> 00:40:59,920
code so you just use a subset of

1096
00:40:59,920 --> 00:41:02,160
this return code is there a way to

1097
00:41:02,160 --> 00:41:04,800
automatically patch this application or

1098
00:41:04,800 --> 00:41:07,520
yeah so there are like uh two different

1099
00:41:07,520 --> 00:41:09,599
types of defenses as i showed like

1100
00:41:09,599 --> 00:41:12,000
the browsers can take some steps and the

1101
00:41:12,000 --> 00:41:14,079
web applications can take some steps

1102
00:41:14,079 --> 00:41:18,000
so uh uh this is what the hot crp

1103
00:41:18,000 --> 00:41:18,800
application does

1104
00:41:18,800 --> 00:41:20,480
when did when we actually reported to

1105
00:41:20,480 --> 00:41:22,720
them they actually standardized uh

1106
00:41:22,720 --> 00:41:24,480
decided to standardize their response

1107
00:41:24,480 --> 00:41:26,800
codes like so that it always returns a

1108
00:41:26,800 --> 00:41:27,920
200

1109
00:41:27,920 --> 00:41:30,160
with the same type of response body so

1110
00:41:30,160 --> 00:41:31,040
it's not

1111
00:41:31,040 --> 00:41:33,200
possible to actually infer through side

1112
00:41:33,200 --> 00:41:35,040
channels like you know what was the

1113
00:41:35,040 --> 00:41:37,599
uh response because it's always a 200.

1114
00:41:37,599 --> 00:41:39,680
so it is possible to implement these

1115
00:41:39,680 --> 00:41:40,800
kind of defenses

1116
00:41:40,800 --> 00:41:43,520
but then there is always like you know a

1117
00:41:43,520 --> 00:41:46,000
url that you did not patch or something

1118
00:41:46,000 --> 00:41:46,800
so

1119
00:41:46,800 --> 00:41:48,319
when you try to like patch the

1120
00:41:48,319 --> 00:41:49,839
application itself it becomes more

1121
00:41:49,839 --> 00:41:50,880
challenging

1122
00:41:50,880 --> 00:41:52,560
this this is the reason why like same

1123
00:41:52,560 --> 00:41:55,119
sites cookies is actually been pushed by

1124
00:41:55,119 --> 00:41:56,000
google because

1125
00:41:56,000 --> 00:41:59,119
it is like one of the defense that as

1126
00:41:59,119 --> 00:42:00,800
you can imagine it can actually break a

1127
00:42:00,800 --> 00:42:02,079
lot of applications but still

1128
00:42:02,079 --> 00:42:04,640
google decided to actually uh and a lot

1129
00:42:04,640 --> 00:42:05,359
of other

1130
00:42:05,359 --> 00:42:07,119
top browsers to decided to make it

1131
00:42:07,119 --> 00:42:09,119
default it's because like you know

1132
00:42:09,119 --> 00:42:11,520
uh it makes these attacks very difficult

1133
00:42:11,520 --> 00:42:13,760
so both sides are actually it's possible

1134
00:42:13,760 --> 00:42:14,640
to actually

1135
00:42:14,640 --> 00:42:16,720
kind of like in an automatic way reduce

1136
00:42:16,720 --> 00:42:18,720
the impact of these kind of attacks

1137
00:42:18,720 --> 00:42:20,800
yeah maybe left for future work i mean

1138
00:42:20,800 --> 00:42:22,400
it's not as easy you know this

1139
00:42:22,400 --> 00:42:23,760
automatically

1140
00:42:23,760 --> 00:42:27,119
yeah then we have someone

1141
00:42:27,119 --> 00:42:29,359
actually visual we have name okay we

1142
00:42:29,359 --> 00:42:30,560
have so many questions

1143
00:42:30,560 --> 00:42:33,119
so i will go i guess for two more

1144
00:42:33,119 --> 00:42:34,480
because we're already out of time here

1145
00:42:34,480 --> 00:42:36,160
so jennifer is asking

1146
00:42:36,160 --> 00:42:38,240
isn't csp supposed to mitigate this

1147
00:42:38,240 --> 00:42:40,319
category of attacks

1148
00:42:40,319 --> 00:42:43,119
and if it's not the case do you think it

1149
00:42:43,119 --> 00:42:46,720
should be extended to cover cozy

1150
00:42:46,720 --> 00:42:51,119
so uh like if you check the paper

1151
00:42:51,119 --> 00:42:54,319
uh if you will know that one of the side

1152
00:42:54,319 --> 00:42:54,880
channels

1153
00:42:54,880 --> 00:42:58,960
is basically csp so as a security

1154
00:42:58,960 --> 00:43:01,839
um a security feature that was actually

1155
00:43:01,839 --> 00:43:03,520
used that is actually meant to protect

1156
00:43:03,520 --> 00:43:05,200
the application is kind of can be used

1157
00:43:05,200 --> 00:43:06,800
as a side channel to leak

1158
00:43:06,800 --> 00:43:10,560
uh perform this attack so uh

1159
00:43:10,560 --> 00:43:13,680
i mean there are actually uh

1160
00:43:13,680 --> 00:43:15,440
preventive measures browser-based

1161
00:43:15,440 --> 00:43:16,960
preventive measures like csb

1162
00:43:16,960 --> 00:43:18,319
which is actually i showed in the

1163
00:43:18,319 --> 00:43:19,520
defense system there are different

1164
00:43:19,520 --> 00:43:20,160
headers

1165
00:43:20,160 --> 00:43:22,240
that are actually uh available to

1166
00:43:22,240 --> 00:43:24,000
prevent mitigate these attacks

1167
00:43:24,000 --> 00:43:26,240
but i would actually agree to this like

1168
00:43:26,240 --> 00:43:28,240
uh making it like instead of telling

1169
00:43:28,240 --> 00:43:29,440
different headers for different

1170
00:43:29,440 --> 00:43:30,240
responses

1171
00:43:30,240 --> 00:43:31,839
making it kind of like you know part of

1172
00:43:31,839 --> 00:43:34,319
let's say csp so that it can actually be

1173
00:43:34,319 --> 00:43:35,119
used to

1174
00:43:35,119 --> 00:43:37,040
uh prevent this kind of attacks it's

1175
00:43:37,040 --> 00:43:38,720
kind of like a sensible way

1176
00:43:38,720 --> 00:43:42,800
so yeah the community is actually moving

1177
00:43:42,800 --> 00:43:44,560
in that direction but csp has its own

1178
00:43:44,560 --> 00:43:45,440
problems like

1179
00:43:45,440 --> 00:43:47,040
many people are not willing to adopt it

1180
00:43:47,040 --> 00:43:48,640
because of a lot of issues

1181
00:43:48,640 --> 00:43:50,800
so there are also different challenges

1182
00:43:50,800 --> 00:43:54,000
so if you go through the csp approach

1183
00:43:54,000 --> 00:43:57,359
okay thank you and then we have uh

1184
00:43:57,359 --> 00:43:59,040
giovanni that says thank you for the

1185
00:43:59,040 --> 00:44:01,839
talk great uh would you mind clarify our

1186
00:44:01,839 --> 00:44:04,240
post message is fire when visiting

1187
00:44:04,240 --> 00:44:08,319
a targeted as the url

1188
00:44:08,319 --> 00:44:11,440
yeah so there are like post messages

1189
00:44:11,440 --> 00:44:14,720
that can be sent to specific uh domains

1190
00:44:14,720 --> 00:44:17,280
so let's say your page wants to send a

1191
00:44:17,280 --> 00:44:18,640
message to your

1192
00:44:18,640 --> 00:44:20,480
parent window you can send you can

1193
00:44:20,480 --> 00:44:22,720
verify the origin and send that message

1194
00:44:22,720 --> 00:44:25,119
however if there are ads on your page

1195
00:44:25,119 --> 00:44:26,560
ads are shown on different

1196
00:44:26,560 --> 00:44:28,640
pages right so they don't they cannot

1197
00:44:28,640 --> 00:44:30,079
send a targeted message

1198
00:44:30,079 --> 00:44:32,160
so what they do is like they broadcast

1199
00:44:32,160 --> 00:44:33,839
the message so that like

1200
00:44:33,839 --> 00:44:36,000
whichever page opened them receives that

1201
00:44:36,000 --> 00:44:36,960
message

1202
00:44:36,960 --> 00:44:39,680
so then you send a broadcast post

1203
00:44:39,680 --> 00:44:40,319
message

1204
00:44:40,319 --> 00:44:43,920
or if the sd url returns an html

1205
00:44:43,920 --> 00:44:46,319
page that broadcasts a message then it

1206
00:44:46,319 --> 00:44:47,280
can be

1207
00:44:47,280 --> 00:44:49,680
received by the attack page if it just

1208
00:44:49,680 --> 00:44:50,960
opens it in a new window

1209
00:44:50,960 --> 00:44:52,480
so this is actually the broadcast

1210
00:44:52,480 --> 00:44:54,319
feature and post message that just can

1211
00:44:54,319 --> 00:44:55,839
be that can be abused and

1212
00:44:55,839 --> 00:44:58,560
in google uh blog blogger of google this

1213
00:44:58,560 --> 00:45:00,160
was the problem like

1214
00:45:00,160 --> 00:45:01,760
the ad was actually broadcasting a

1215
00:45:01,760 --> 00:45:03,520
message and through this we were able to

1216
00:45:03,520 --> 00:45:05,359
infer the state so it's the broadcast

1217
00:45:05,359 --> 00:45:07,200
message feature

1218
00:45:07,200 --> 00:45:10,319
okay thank you uh i would say it's going

1219
00:45:10,319 --> 00:45:11,599
to conclude the last

1220
00:45:11,599 --> 00:45:14,240
question so there is someone asking if

1221
00:45:14,240 --> 00:45:14,640
this

1222
00:45:14,640 --> 00:45:16,880
basta cozy tool can be downloaded i mean

1223
00:45:16,880 --> 00:45:18,560
if you are planning to

1224
00:45:18,560 --> 00:45:20,880
release it or you are still working on

1225
00:45:20,880 --> 00:45:23,359
that so if you can elaborate on this

1226
00:45:23,359 --> 00:45:26,640
tool yeah so this was actually

1227
00:45:26,640 --> 00:45:28,800
developed as part of a larger open

1228
00:45:28,800 --> 00:45:30,240
source project on

1229
00:45:30,240 --> 00:45:33,119
testing applications so a mini minified

1230
00:45:33,119 --> 00:45:34,400
version of this

1231
00:45:34,400 --> 00:45:37,280
tool is available uh as part of this uh

1232
00:45:37,280 --> 00:45:38,720
project called elast

1233
00:45:38,720 --> 00:45:40,640
so it is already available the open

1234
00:45:40,640 --> 00:45:42,480
source but as i said it's a it's for

1235
00:45:42,480 --> 00:45:43,119
large

1236
00:45:43,119 --> 00:45:45,680
uh large type of testing like it

1237
00:45:45,680 --> 00:45:47,200
includes functionality testing

1238
00:45:47,200 --> 00:45:49,040
and normal cross browser testing and

1239
00:45:49,040 --> 00:45:50,800
everything so if you are interested you

1240
00:45:50,800 --> 00:45:52,160
can check from there otherwise it's just

1241
00:45:52,160 --> 00:45:52,640
bring me

1242
00:45:52,640 --> 00:45:54,079
right and i can send you the full

1243
00:45:54,079 --> 00:45:57,280
version uh yeah

1244
00:45:57,280 --> 00:46:00,800
okay great uh so do you have other

1245
00:46:00,800 --> 00:46:02,400
comments do you have anything to say to

1246
00:46:02,400 --> 00:46:03,359
our audience

1247
00:46:03,359 --> 00:46:06,400
or you happy with that or yeah

1248
00:46:06,400 --> 00:46:08,480
like i would like to congratulate the

1249
00:46:08,480 --> 00:46:10,160
organizers because we had so many

1250
00:46:10,160 --> 00:46:11,280
challenges

1251
00:46:11,280 --> 00:46:13,599
extending the deadlines and pandemic but

1252
00:46:13,599 --> 00:46:14,880
in the end i'm really happy that

1253
00:46:14,880 --> 00:46:16,240
everything went well

1254
00:46:16,240 --> 00:46:18,480
today and there are there's a lot of

1255
00:46:18,480 --> 00:46:20,720
participation so i'm happy to see this

1256
00:46:20,720 --> 00:46:22,720
yeah i will give some numbers in the

1257
00:46:22,720 --> 00:46:23,920
closing after

1258
00:46:23,920 --> 00:46:26,000
uh the next talk about how many people

1259
00:46:26,000 --> 00:46:27,520
participate and we're actually pretty

1260
00:46:27,520 --> 00:46:28,000
happy

1261
00:46:28,000 --> 00:46:31,040
so if you will be online you can uh

1262
00:46:31,040 --> 00:46:34,160
you can attend the closing session uh so

1263
00:46:34,160 --> 00:46:35,920
thanks a lot for being with us and i

1264
00:46:35,920 --> 00:46:37,280
hope to see you

1265
00:46:37,280 --> 00:46:40,079
again at some conference in person when

1266
00:46:40,079 --> 00:46:40,800
we have a

1267
00:46:40,800 --> 00:46:45,040
chance to travel thank you and

1268
00:46:45,040 --> 00:46:53,359
see you soon thank you

