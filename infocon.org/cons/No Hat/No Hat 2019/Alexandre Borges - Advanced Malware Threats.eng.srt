1
00:00:16,660 --> 00:00:21,439
good morning first of all thank you for

2
00:00:21,439 --> 00:00:27,349
your dish and watch my talk my name is

3
00:00:27,349 --> 00:00:32,089
Alicia Marie Borges and just talk is

4
00:00:32,089 --> 00:00:36,250
about some advances rats

5
00:00:37,030 --> 00:00:42,500
this is our agenda usually I've been

6
00:00:42,500 --> 00:00:49,070
researching and talking so many details

7
00:00:49,070 --> 00:00:52,730
about this talk because both in this

8
00:00:52,730 --> 00:00:55,340
conference I will take another approach

9
00:00:55,340 --> 00:01:00,710
I will just touch some surfaces for

10
00:01:00,710 --> 00:01:03,230
encourage you to research a bit more of

11
00:01:03,230 --> 00:01:08,090
each of these topics let's start because

12
00:01:08,090 --> 00:01:11,590
I had many slides here

13
00:01:15,729 --> 00:01:19,130
mirror tracks are everywhere

14
00:01:19,130 --> 00:01:23,149
ever ever a single piece of computer we

15
00:01:23,149 --> 00:01:29,780
can find a different kind of mirror here

16
00:01:29,780 --> 00:01:33,440
I will show you our recent example of

17
00:01:33,440 --> 00:01:35,979
infection that happened a few weeks ago

18
00:01:35,979 --> 00:01:40,369
and it's my motivation for this

19
00:01:40,369 --> 00:01:43,660
conference you see the hacker found

20
00:01:43,660 --> 00:01:50,420
vulnerability double axe ability the

21
00:01:50,420 --> 00:01:53,300
attacker made injection G's injection

22
00:01:53,300 --> 00:01:57,319
download upload this below the loader

23
00:01:57,319 --> 00:02:04,340
second payload drop there in pink this

24
00:02:04,340 --> 00:02:08,479
dropper download our third payload this

25
00:02:08,479 --> 00:02:12,860
bellows was proposed by two parts native

26
00:02:12,860 --> 00:02:15,110
code and a managed code managed code is

27
00:02:15,110 --> 00:02:19,849
dotnet code G's native code was injected

28
00:02:19,849 --> 00:02:25,370
in remote rat in I wrote read in

29
00:02:25,370 --> 00:02:27,920
Disney's injected

30
00:02:27,920 --> 00:02:31,190
loaded the manager code the amenity

31
00:02:31,190 --> 00:02:35,239
could download the real infection and

32
00:02:35,239 --> 00:02:38,930
infected systems this is a protocol and

33
00:02:38,930 --> 00:02:45,230
realizing about recent infection is it

34
00:02:45,230 --> 00:02:48,680
easy to load the managed code for

35
00:02:48,680 --> 00:02:52,580
alleged codes are I show you here the

36
00:02:52,580 --> 00:02:56,660
interfaces in api's involved this verb

37
00:02:56,660 --> 00:03:04,220
is pretty easy advanced rats have been

38
00:03:04,220 --> 00:03:08,120
using any kind of usual API is usually

39
00:03:08,120 --> 00:03:11,720
bi is it so easy to detect for example

40
00:03:11,720 --> 00:03:14,720
most advanced tracks have been using for

41
00:03:14,720 --> 00:03:18,440
example ATC injection as you know it's

42
00:03:18,440 --> 00:03:22,549
injection is a very subtle method to

43
00:03:22,549 --> 00:03:24,650
inject code in under the tracks in this

44
00:03:24,650 --> 00:03:35,840
case the malware attack it C in a PC

45
00:03:35,840 --> 00:03:38,000
from our he mocked rat this Rimmel

46
00:03:38,000 --> 00:03:42,709
threat is a it's a thread in inner tube

47
00:03:42,709 --> 00:03:46,989
estate when this read the wake up the

48
00:03:46,989 --> 00:03:49,670
disc all this force due to be voles and

49
00:03:49,670 --> 00:03:55,849
the infections begins fine in a real

50
00:03:55,849 --> 00:03:58,400
system finer threads inner tube estate

51
00:03:58,400 --> 00:04:01,060
is so easy for example you can use a

52
00:04:01,060 --> 00:04:05,239
composition of graduate contacts API and

53
00:04:05,239 --> 00:04:08,959
trying to find any kind of thread call

54
00:04:08,959 --> 00:04:12,709
it one of these functions in read these

55
00:04:12,709 --> 00:04:15,919
functions read can be a real indication

56
00:04:15,919 --> 00:04:19,820
that the thread is in a lot of a state

57
00:04:19,820 --> 00:04:25,039
so it's quite easy to do that once I am

58
00:04:25,039 --> 00:04:29,800
able to find track in a lot of estate I

59
00:04:29,800 --> 00:04:34,280
can use it we use a PC function to make

60
00:04:34,280 --> 00:04:38,320
the injection start infection

61
00:04:39,070 --> 00:04:41,950
in the same environment I found a second

62
00:04:41,950 --> 00:04:45,460
contact for example in this in this case

63
00:04:45,460 --> 00:04:50,080
that I presented here the mirror was

64
00:04:50,080 --> 00:04:52,570
infected the guy application on the

65
00:04:52,570 --> 00:04:55,120
graphic application using the basic is

66
00:04:55,120 --> 00:04:57,970
using for example here here hooks

67
00:04:57,970 --> 00:05:01,660
message hook is a event hooks and in

68
00:05:01,660 --> 00:05:08,110
both case it was it was so sooo easy to

69
00:05:08,110 --> 00:05:11,800
find the de infection bullski is both

70
00:05:11,800 --> 00:05:16,360
kind of here uses the same functions as

71
00:05:16,360 --> 00:05:19,090
Windows cookie X function so it's quite

72
00:05:19,090 --> 00:05:25,530
easy to find it my initial approach was

73
00:05:26,010 --> 00:05:31,360
trying to analyze this infection by

74
00:05:31,360 --> 00:05:33,870
using volatility so in this case I

75
00:05:33,870 --> 00:05:37,990
acquired a memory and trying to open in

76
00:05:37,990 --> 00:05:40,690
the volatility but in this case I had a

77
00:05:40,690 --> 00:05:43,360
few problems because this specific

78
00:05:43,360 --> 00:05:46,150
mirror was looking a very important

79
00:05:46,150 --> 00:05:50,080
functions here in red again functions

80
00:05:50,080 --> 00:05:53,220
using by acquisition tools it was

81
00:05:53,220 --> 00:05:57,360
possible to acquired a memory

82
00:05:57,360 --> 00:06:01,060
additionally I had an other problem here

83
00:06:01,060 --> 00:06:06,160
because this special malware I was using

84
00:06:06,160 --> 00:06:09,220
a kernel driver take another driver and

85
00:06:09,220 --> 00:06:14,320
trying to hide itself in it was

86
00:06:14,320 --> 00:06:17,410
interesting because this technique is

87
00:06:17,410 --> 00:06:21,010
well know for example when you attack a

88
00:06:21,010 --> 00:06:24,760
system and trying to hide the process by

89
00:06:24,760 --> 00:06:27,310
using the cone direct economic objective

90
00:06:27,310 --> 00:06:30,550
manipulation use the same procedural the

91
00:06:30,550 --> 00:06:33,790
same technique but in this case this is

92
00:06:33,790 --> 00:06:39,670
a special never try to hide its care or

93
00:06:39,670 --> 00:06:46,890
drive using a special technique sure as

94
00:06:46,890 --> 00:06:50,070
you know

95
00:06:51,220 --> 00:06:58,159
when you try to hide a process you you

96
00:06:58,159 --> 00:07:02,930
can use both a both current variable PS

97
00:07:02,930 --> 00:07:04,879
actually had a professor's head and

98
00:07:04,879 --> 00:07:07,639
actually process links to try to hide

99
00:07:07,639 --> 00:07:12,939
the UH process as you should remember

100
00:07:12,939 --> 00:07:16,729
process I are organized in a kind of

101
00:07:16,729 --> 00:07:21,409
chain or where it link take us to the

102
00:07:21,409 --> 00:07:24,440
next link is a double link link deletes

103
00:07:24,440 --> 00:07:30,590
and usually mirrors try to consume one

104
00:07:30,590 --> 00:07:34,340
of these links to hide the process in

105
00:07:34,340 --> 00:07:37,819
skates in the special case mirror try to

106
00:07:37,819 --> 00:07:40,310
do the same thing but using kernel

107
00:07:40,310 --> 00:07:50,990
drivers it's very interesting because we

108
00:07:50,990 --> 00:07:56,120
use this special or these global

109
00:07:56,120 --> 00:07:58,909
variables pay ApS activity process

110
00:07:58,909 --> 00:08:02,479
health and active process links hu Hydra

111
00:08:02,479 --> 00:08:05,779
process but it's possible to date to

112
00:08:05,779 --> 00:08:09,289
make the same the same thing by using

113
00:08:09,289 --> 00:08:12,560
for example PS load model is the last

114
00:08:12,560 --> 00:08:15,139
variable here global variable G scope of

115
00:08:15,139 --> 00:08:18,819
variable hold a bunch of pointers to

116
00:08:18,819 --> 00:08:22,219
each loaded driver so in this case this

117
00:08:22,219 --> 00:08:24,860
Mara trying to attack this pointer

118
00:08:24,860 --> 00:08:26,659
manipulated this pointer to hide the day

119
00:08:26,659 --> 00:08:31,899
driver is very interesting because both

120
00:08:31,899 --> 00:08:35,510
variables related to process and drivers

121
00:08:35,510 --> 00:08:43,240
are belongs to the same structure there

122
00:08:43,240 --> 00:08:49,560
in the upside as

123
00:08:49,560 --> 00:08:51,900
see checking Jesus structure by using

124
00:08:51,900 --> 00:08:55,170
volatility you can confirm that PS load

125
00:08:55,170 --> 00:09:00,080
model is is a is a global variable

126
00:09:00,080 --> 00:09:03,420
together through the PS achieve a

127
00:09:03,420 --> 00:09:05,040
process head so it's possible to

128
00:09:05,040 --> 00:09:07,860
manipulate the same structure to hide

129
00:09:07,860 --> 00:09:14,490
process and kernel drivers easily in

130
00:09:14,490 --> 00:09:19,670
this special case the attacker

131
00:09:19,670 --> 00:09:25,200
understood the day the process of

132
00:09:25,200 --> 00:09:27,779
loading a kernel model in the Windows

133
00:09:27,779 --> 00:09:30,960
systems since Windows 7 Windows 10 for

134
00:09:30,960 --> 00:09:35,310
example scales kernel drive is loaded by

135
00:09:35,310 --> 00:09:39,450
calling initial driver soon after that I

136
00:09:39,450 --> 00:09:43,080
apology drive image are you load driver

137
00:09:43,080 --> 00:09:46,740
and finally mm load system image X in

138
00:09:46,740 --> 00:09:47,910
skills

139
00:09:47,910 --> 00:09:54,750
the cat was instead of using instead of

140
00:09:54,750 --> 00:09:59,370
using the PS load model list that is

141
00:09:59,370 --> 00:10:02,670
protected by patch part G's attack we

142
00:10:02,670 --> 00:10:05,670
use another function limit mi process

143
00:10:05,670 --> 00:10:10,440
load loader entry in scales he got to

144
00:10:10,440 --> 00:10:18,030
hide the kernel driver hooking all the

145
00:10:18,030 --> 00:10:22,770
memory functions used by memory

146
00:10:22,770 --> 00:10:25,860
acquisition tools and preventing me to

147
00:10:25,860 --> 00:10:30,890
that the malware binary from the memory

148
00:10:30,890 --> 00:10:34,470
this week apparently was fix the recent

149
00:10:34,470 --> 00:10:38,400
versions of Windows 10 but three days

150
00:10:38,400 --> 00:10:41,610
ago I saw another trick using the same

151
00:10:41,610 --> 00:10:44,250
approach or almost the same approach so

152
00:10:44,250 --> 00:10:48,560
it's a very dangerous in there nowadays

153
00:10:50,880 --> 00:10:54,420
I've been working with such diversity

154
00:10:54,420 --> 00:10:57,660
techniques as you know most of

155
00:10:57,660 --> 00:10:59,399
differential protectors like the media

156
00:10:59,399 --> 00:11:03,870
at a Jo and Vee me protect the uses

157
00:11:03,870 --> 00:11:06,959
different energy person techniques for

158
00:11:06,959 --> 00:11:11,069
prevention of any kind of analysis in my

159
00:11:11,069 --> 00:11:14,100
dining work I try to be composed a

160
00:11:14,100 --> 00:11:18,870
problem by by several parts and I have

161
00:11:18,870 --> 00:11:22,019
been using for example opera and write

162
00:11:22,019 --> 00:11:26,970
some scripts to analyze and the

163
00:11:26,970 --> 00:11:30,360
obfuscated each of its parts in case

164
00:11:30,360 --> 00:11:35,009
it's pretty easy to write Ida Pro plugin

165
00:11:35,009 --> 00:11:38,579
for example here I I'm leaving my

166
00:11:38,579 --> 00:11:43,100
step-by-step procedure for helping to

167
00:11:43,100 --> 00:11:46,589
set up the either pro in your machine e

168
00:11:46,589 --> 00:11:51,000
by using Ida Pro in Visual Studio so one

169
00:11:51,000 --> 00:11:57,509
two three and here I I wrote a very

170
00:11:57,509 --> 00:12:02,430
simple example about either a plug-in in

171
00:12:02,430 --> 00:12:04,829
its case in my plugin is able to find

172
00:12:04,829 --> 00:12:07,350
the web links inside the minor e but I

173
00:12:07,350 --> 00:12:10,230
tried to come into line by line for help

174
00:12:10,230 --> 00:12:16,920
you here and as you see my plugin is

175
00:12:16,920 --> 00:12:19,259
able to find person oh it is a very

176
00:12:19,259 --> 00:12:19,920
simple

177
00:12:19,920 --> 00:12:23,149
it finally web links inside a binary

178
00:12:23,149 --> 00:12:27,750
imagine it Jesus ample expenditure much

179
00:12:27,750 --> 00:12:30,630
more complex case related the true on

180
00:12:30,630 --> 00:12:32,730
packing related to to do beef

181
00:12:32,730 --> 00:12:36,139
association so I always try to

182
00:12:36,139 --> 00:12:41,360
encouraging people to write new either

183
00:12:41,360 --> 00:12:45,829
plugins and trying to analyze complex

184
00:12:45,829 --> 00:12:52,310
members I prefer example here I pick up

185
00:12:52,310 --> 00:12:57,990
one of the domains found by plugin and

186
00:12:57,990 --> 00:13:01,589
input in my tool named overview to

187
00:13:01,589 --> 00:13:05,240
gather additional information

188
00:13:10,430 --> 00:13:13,970
I've been researching several kinds of

189
00:13:13,970 --> 00:13:18,630
obfuscators in several I I have done a

190
00:13:18,630 --> 00:13:22,529
very deep research in obfuscation and on

191
00:13:22,529 --> 00:13:30,990
traversing a differentially obfuscator

192
00:13:30,990 --> 00:13:36,839
has used several hard tricks to

193
00:13:36,839 --> 00:13:40,640
circumvent for example some office cater

194
00:13:40,640 --> 00:13:44,160
try to protect the memory for prevention

195
00:13:44,160 --> 00:13:46,860
of dumping their memory other of the

196
00:13:46,860 --> 00:13:50,070
scales are most often encrypted all of

197
00:13:50,070 --> 00:13:51,709
these drinks

198
00:13:51,709 --> 00:13:55,560
most of them trying to manipulate the

199
00:13:55,560 --> 00:13:59,700
image other stable this is a diversity

200
00:13:59,700 --> 00:14:05,220
of obfuscators usually utilize all of it

201
00:14:05,220 --> 00:14:09,360
instructors the instructions most of

202
00:14:09,360 --> 00:14:11,579
them is that the basis so is so

203
00:14:11,579 --> 00:14:13,620
complicated it's true analyzing

204
00:14:13,620 --> 00:14:20,720
aesthetically most of them trying to

205
00:14:20,720 --> 00:14:24,270
encrypt instructions in the memory so

206
00:14:24,270 --> 00:14:26,970
you you must show the equipped

207
00:14:26,970 --> 00:14:28,860
instructions in the memory before

208
00:14:28,860 --> 00:14:32,940
analyzing when I handling dotnet

209
00:14:32,940 --> 00:14:36,329
obfuscate or most most of them trying to

210
00:14:36,329 --> 00:14:39,810
rename class method fields and external

211
00:14:39,810 --> 00:14:44,760
references this opposite or present

212
00:14:44,760 --> 00:14:48,060
alike eme protects are polymorphic in

213
00:14:48,060 --> 00:14:51,300
this case one function can be turning in

214
00:14:51,300 --> 00:14:55,579
several different functions each time

215
00:14:56,750 --> 00:14:59,459
this obfuscators

216
00:14:59,459 --> 00:15:03,140
try to make some fake bash instructions

217
00:15:03,140 --> 00:15:07,320
instructions insert lots of useless

218
00:15:07,320 --> 00:15:08,120
codes

219
00:15:08,120 --> 00:15:13,320
trying to reorder the flow try to use

220
00:15:13,320 --> 00:15:15,660
code flattening that I will show you in

221
00:15:15,660 --> 00:15:17,730
the next slides

222
00:15:17,730 --> 00:15:22,560
use a very different in debugger and VM

223
00:15:22,560 --> 00:15:26,880
techniques some obvious office caters

224
00:15:26,880 --> 00:15:30,920
don't be utilized plotters and epilogues

225
00:15:30,920 --> 00:15:36,449
and here we have practical case here

226
00:15:36,449 --> 00:15:39,600
about code flattening the instructions

227
00:15:39,600 --> 00:15:45,899
are fetched the decoded there is a

228
00:15:45,899 --> 00:15:49,740
dispatcher we take us to the right

229
00:15:49,740 --> 00:15:52,620
handler and this handler is responsible

230
00:15:52,620 --> 00:15:55,290
for executing or instruction or

231
00:15:55,290 --> 00:16:01,050
brutalizing instruction a bit more

232
00:16:01,050 --> 00:16:07,740
cheaper when you analyze brutalised code

233
00:16:07,740 --> 00:16:11,730
you see several index references Jesus

234
00:16:11,730 --> 00:16:15,029
Jesus index reference take us through

235
00:16:15,029 --> 00:16:18,649
the encrypted instructions they encrypt

236
00:16:18,649 --> 00:16:22,519
instructions is decoded take us to the

237
00:16:22,519 --> 00:16:26,370
decrypt the instructions jeez decrypted

238
00:16:26,370 --> 00:16:28,680
instructions take us through the

239
00:16:28,680 --> 00:16:31,019
function pointer and finally the

240
00:16:31,019 --> 00:16:32,790
function pointer take us through the

241
00:16:32,790 --> 00:16:35,339
handler this handle is responsible for

242
00:16:35,339 --> 00:16:39,000
executing our instruction our brutalised

243
00:16:39,000 --> 00:16:43,920
instruction this is a very easy program

244
00:16:43,920 --> 00:16:50,000
as you see we have here linear execution

245
00:16:50,000 --> 00:16:55,260
but after applying called flattening you

246
00:16:55,260 --> 00:16:57,779
will see a very different picture for

247
00:16:57,779 --> 00:17:01,800
example here we have a linear execution

248
00:17:01,800 --> 00:17:08,130
in the ida pro is quite easy but after

249
00:17:08,130 --> 00:17:11,099
using called flattening we had a much

250
00:17:11,099 --> 00:17:15,000
branched execution in its case it came

251
00:17:15,000 --> 00:17:19,169
for example using alpha skater w FV m

252
00:17:19,169 --> 00:17:22,410
these are open software that you can

253
00:17:22,410 --> 00:17:26,220
apply some traversing techniques and

254
00:17:26,220 --> 00:17:30,400
among them code flattening

255
00:17:30,400 --> 00:17:34,680
at bottom I show you how to do that

256
00:17:34,860 --> 00:17:38,710
after applying coat flattening I have a

257
00:17:38,710 --> 00:17:42,670
much printed execution as you can see in

258
00:17:42,670 --> 00:17:47,980
the Ida Pro this is a another very

259
00:17:47,980 --> 00:17:52,180
common trick used by dispatchers in this

260
00:17:52,180 --> 00:17:54,730
case we have opaque predicates and

261
00:17:54,730 --> 00:17:58,770
earned the same technique as you can see

262
00:17:58,770 --> 00:18:04,270
we have false conditional instructions

263
00:18:04,270 --> 00:18:07,870
here because we have an excerpt there so

264
00:18:07,870 --> 00:18:14,760
Jesus or eax EAX make everything

265
00:18:14,760 --> 00:18:18,520
unconditional jump and additionally as

266
00:18:18,520 --> 00:18:23,230
as you can see we have entered the same

267
00:18:23,230 --> 00:18:27,840
technique there because I am juncture an

268
00:18:27,840 --> 00:18:31,240
address plus 1 and this address not

269
00:18:31,240 --> 00:18:36,520
exist so we we needed to undefined the

270
00:18:36,520 --> 00:18:40,440
code and define again is keeping abide

271
00:18:40,440 --> 00:18:45,850
here we have stack manipulation a very

272
00:18:45,850 --> 00:18:48,690
simple stachy manipulation manipulation

273
00:18:48,690 --> 00:18:52,660
technique as you see this return is a

274
00:18:52,660 --> 00:18:55,600
false return is a only a jump before the

275
00:18:55,600 --> 00:19:00,880
last instruction in red so apparently is

276
00:19:00,880 --> 00:19:03,400
jumpable both in skates

277
00:19:03,400 --> 00:19:07,929
Gee's jump is only skipping the blue

278
00:19:07,929 --> 00:19:10,240
instructions to the last instruction and

279
00:19:10,240 --> 00:19:13,150
finally I'm really turning from this

280
00:19:13,150 --> 00:19:19,840
program this is a very strange range vme

281
00:19:19,840 --> 00:19:22,620
technique that I found some weeks ago

282
00:19:22,620 --> 00:19:28,840
because this technique use temperature

283
00:19:28,840 --> 00:19:35,020
I found that Vita machinists don't have

284
00:19:35,020 --> 00:19:37,900
any kind of temperature probe

285
00:19:37,900 --> 00:19:43,510
so I try to test it in case I wrote are

286
00:19:43,510 --> 00:19:44,320
very Singh

287
00:19:44,320 --> 00:19:49,390
Paul C sharp program jeez C sharp Rahman

288
00:19:49,390 --> 00:19:53,350
was testing the temperature in a virtual

289
00:19:53,350 --> 00:19:56,620
machine as you can see at bottom I

290
00:19:56,620 --> 00:20:02,320
received a new reference exception and I

291
00:20:02,320 --> 00:20:06,090
tried to investigate this fact

292
00:20:06,090 --> 00:20:10,440
investigating I found that in fact

293
00:20:10,440 --> 00:20:13,500
indeed we don't have any kind of

294
00:20:13,500 --> 00:20:16,450
temperature probe inside there a brutal

295
00:20:16,450 --> 00:20:20,260
machine so I was able to write a new C

296
00:20:20,260 --> 00:20:24,400
sharp partner detecting if my mirror was

297
00:20:24,400 --> 00:20:28,690
or not running in a virtual machine as

298
00:20:28,690 --> 00:20:34,930
you see I I got and I have seen this

299
00:20:34,930 --> 00:20:37,720
kind of technique in very advanced

300
00:20:37,720 --> 00:20:42,550
models in the last few weeks other

301
00:20:42,550 --> 00:20:46,530
approach here is dotnet mavar's dot mark

302
00:20:46,530 --> 00:20:50,680
dotnet members are so complicated very

303
00:20:50,680 --> 00:20:54,820
complicated usually we try to make the

304
00:20:54,820 --> 00:20:59,040
same approach we try to unpack and

305
00:20:59,040 --> 00:21:02,440
decrypt the embedded research we try to

306
00:21:02,440 --> 00:21:05,950
unpack the native code from memory which

307
00:21:05,950 --> 00:21:09,520
we try should find it

308
00:21:09,520 --> 00:21:12,700
decryption working we tried should they

309
00:21:12,700 --> 00:21:15,180
compile the code by using common tools

310
00:21:15,180 --> 00:21:19,150
was almost done using some kind of

311
00:21:19,150 --> 00:21:22,210
Packard's additionally I have using

312
00:21:22,210 --> 00:21:26,290
these tools here at bottom angling to

313
00:21:26,290 --> 00:21:32,500
analyze some dotnet mirrors here we have

314
00:21:32,500 --> 00:21:36,490
some very no instructions using by

315
00:21:36,490 --> 00:21:39,490
dotnet mirrors these instructions are

316
00:21:39,490 --> 00:21:42,540
some kind of references for finds a

317
00:21:42,540 --> 00:21:48,640
malicious code inside a mirror most of

318
00:21:48,640 --> 00:21:53,230
most of the time we find hooking saying

319
00:21:53,230 --> 00:21:57,850
decryption routines inside the class

320
00:21:57,850 --> 00:22:01,000
dr. car or the instance

321
00:22:01,000 --> 00:22:06,460
constructor like zipper in both case we

322
00:22:06,460 --> 00:22:11,400
we have sometimes hard some cheapest to

323
00:22:11,400 --> 00:22:18,910
decrypt discos I believe that two months

324
00:22:18,910 --> 00:22:22,270
ago I saw a very different manner trying

325
00:22:22,270 --> 00:22:25,539
to compromise the dgg digesting time

326
00:22:25,539 --> 00:22:30,299
round time and the GG is risk is

327
00:22:30,299 --> 00:22:33,400
responsible for create the native code

328
00:22:33,400 --> 00:22:37,000
from one A to B from a managed code

329
00:22:37,000 --> 00:22:44,140
jeez this this case was very hard

330
00:22:44,140 --> 00:22:46,990
because Windows Defender wasn't able to

331
00:22:46,990 --> 00:22:51,340
detect and in the last DEFCON I talked

332
00:22:51,340 --> 00:22:55,600
to to Microsoft engineer and the

333
00:22:55,600 --> 00:22:59,770
Microsoft added G's special case in the

334
00:22:59,770 --> 00:23:04,929
new versions of Windows Defender same

335
00:23:04,929 --> 00:23:07,150
our stride should compromise the wrong

336
00:23:07,150 --> 00:23:13,169
time the.net runtime CLR here we have

337
00:23:13,169 --> 00:23:17,860
very simple manifests I try to commit

338
00:23:17,860 --> 00:23:24,000
for helping these are manifest in dotnet

339
00:23:25,049 --> 00:23:29,320
here I start a debug session to find a

340
00:23:29,320 --> 00:23:34,960
mirror so I loaded the ESO SOS extension

341
00:23:34,960 --> 00:23:40,950
I dropped the domains I

342
00:23:42,930 --> 00:23:48,030
to detract shoot read zero I least

343
00:23:48,030 --> 00:23:52,520
diminish tracks using bank threats I

344
00:23:52,520 --> 00:23:57,870
listed the stack diminished stack at

345
00:23:57,870 --> 00:24:03,120
bottom I found the main function of our

346
00:24:03,120 --> 00:24:10,560
mirror I listed a metal table from this

347
00:24:10,560 --> 00:24:13,590
mirror as you see we have different

348
00:24:13,590 --> 00:24:22,080
classes here I pick up one I dumped the

349
00:24:22,080 --> 00:24:27,570
metal table of this specific class I was

350
00:24:27,570 --> 00:24:31,950
able to find several functions in truth

351
00:24:31,950 --> 00:24:34,560
lights I pick up one of the dysfunction

352
00:24:34,560 --> 00:24:41,370
i disassemble it by using bang you and

353
00:24:41,370 --> 00:24:46,460
in the address of dysfunction as you see

354
00:24:46,460 --> 00:24:51,090
we found some interesting functions here

355
00:24:51,090 --> 00:24:56,010
at bottom I dumped the Internet

356
00:24:56,010 --> 00:24:58,650
the intermediate language of G's

357
00:24:58,650 --> 00:25:02,730
function so in this case I am able to

358
00:25:02,730 --> 00:25:09,960
make a better analysis and finally using

359
00:25:09,960 --> 00:25:13,380
we in the back I dumped it some IP

360
00:25:13,380 --> 00:25:18,630
address from from memory and I was able

361
00:25:18,630 --> 00:25:25,080
to proceed my investigation other class

362
00:25:25,080 --> 00:25:29,900
of merits are rootkits Rooskies are

363
00:25:29,900 --> 00:25:32,790
complicated because they use device

364
00:25:32,790 --> 00:25:36,470
drivers and most people don't know about

365
00:25:36,470 --> 00:25:41,880
device drivers basically rootkits

366
00:25:41,880 --> 00:25:46,980
using device drivers trying to skip the

367
00:25:46,980 --> 00:25:50,940
driver stack to avoid being detected by

368
00:25:50,940 --> 00:25:55,520
monitors and trying to talk with lower

369
00:25:55,520 --> 00:25:56,770
drive

370
00:25:56,770 --> 00:26:04,830
as I show it right it squatches to

371
00:26:04,830 --> 00:26:09,400
investigate this kind of good kids in

372
00:26:09,400 --> 00:26:11,920
this case I'm using the window back

373
00:26:11,920 --> 00:26:16,540
again I can gather some information

374
00:26:16,540 --> 00:26:22,030
about the driver I can list the device

375
00:26:22,030 --> 00:26:29,679
objects from this driver I've taken one

376
00:26:29,679 --> 00:26:35,580
and I made a an overlay to get

377
00:26:35,580 --> 00:26:41,380
additional information and I I was able

378
00:26:41,380 --> 00:26:45,179
to detect that two handlers was

379
00:26:45,179 --> 00:26:48,880
manipulated as you see all of these

380
00:26:48,880 --> 00:26:53,190
handlers are the same address except

381
00:26:53,190 --> 00:27:01,179
shortener I took more Jesus a blurred

382
00:27:01,179 --> 00:27:11,230
I found a call yellow it's the same it

383
00:27:11,230 --> 00:27:18,030
again and I was able to detect that is a

384
00:27:18,030 --> 00:27:21,850
malicious driver in space I used the

385
00:27:21,850 --> 00:27:26,740
volatility I dumped Jesus driver from

386
00:27:26,740 --> 00:27:31,929
the memory I fix the image base at

387
00:27:31,929 --> 00:27:32,860
bottom

388
00:27:32,860 --> 00:27:36,580
I collect information from the imparts

389
00:27:36,580 --> 00:27:40,510
address table and it was quite easy I

390
00:27:40,510 --> 00:27:43,990
open in the Ida Pro and I was able to

391
00:27:43,990 --> 00:27:47,800
analyze this specific mirror this is a

392
00:27:47,800 --> 00:27:51,940
very common unusual procedure to analyze

393
00:27:51,940 --> 00:27:56,950
route kids every single day in case jeez

394
00:27:56,950 --> 00:28:00,960
rootkit I was trying to hide it itself

395
00:28:00,960 --> 00:28:05,580
when we tried to listed in a directory

396
00:28:05,580 --> 00:28:09,309
but we have four

397
00:28:09,309 --> 00:28:11,379
techniques too high in the root gates

398
00:28:11,379 --> 00:28:15,549
for example some rich kids in fact your

399
00:28:15,549 --> 00:28:19,210
machine and force a reboot by using the

400
00:28:19,210 --> 00:28:24,190
special API GW is harder all the route

401
00:28:24,190 --> 00:28:27,669
kids trying to compromise this debride

402
00:28:27,669 --> 00:28:29,860
function because Jesus Peschel func

403
00:28:29,860 --> 00:28:33,129
function is rooted by several antivirus

404
00:28:33,129 --> 00:28:37,379
programs other rich kids trying to

405
00:28:37,379 --> 00:28:42,039
prevent of being unloaded by hooking the

406
00:28:42,039 --> 00:28:46,869
driving and little chains some of them

407
00:28:46,869 --> 00:28:50,350
trying to compromise the debug process

408
00:28:50,350 --> 00:28:55,179
by compromise the interrupts work and

409
00:28:55,179 --> 00:28:59,710
almost all of the modern root kits hide

410
00:28:59,710 --> 00:29:03,909
itself in a hide storage in your disk

411
00:29:03,909 --> 00:29:09,369
driver these route kids have been using

412
00:29:09,369 --> 00:29:11,679
callback functions we have several

413
00:29:11,679 --> 00:29:13,960
classes of callback functions puppet

414
00:29:13,960 --> 00:29:17,440
functions is a kind of modern hook this

415
00:29:17,440 --> 00:29:19,809
is a kind of notification when something

416
00:29:19,809 --> 00:29:25,409
happened they never take some actions

417
00:29:25,409 --> 00:29:30,149
based on the event so we have different

418
00:29:30,149 --> 00:29:36,220
callback functions here and for example

419
00:29:36,220 --> 00:29:40,629
one very famous callback functions is CM

420
00:29:40,629 --> 00:29:43,749
registered Quebec Jesus special one is

421
00:29:43,749 --> 00:29:46,090
very interesting because when you try to

422
00:29:46,090 --> 00:29:49,600
remove an entry from from the history

423
00:29:49,600 --> 00:29:52,990
they never the hood kid is able to hang

424
00:29:52,990 --> 00:30:00,909
that again we we we can list the Quebec

425
00:30:00,909 --> 00:30:04,299
functions by using extension from in the

426
00:30:04,299 --> 00:30:06,490
back for example in its case Winnipeg

427
00:30:06,490 --> 00:30:12,279
arc here at bottom I listed some image

428
00:30:12,279 --> 00:30:18,029
pop back since case no hat in yellow I

429
00:30:19,180 --> 00:30:23,980
the same Jesus special Kobach and I

430
00:30:23,980 --> 00:30:27,420
collect some information from the driver

431
00:30:27,420 --> 00:30:31,000
of course if you want you can list

432
00:30:31,000 --> 00:30:33,570
callback functions by using by using

433
00:30:33,570 --> 00:30:36,640
only win the bag without any kind of

434
00:30:36,640 --> 00:30:40,090
extension in this case we have some very

435
00:30:40,090 --> 00:30:46,140
short comments and I I mean listen here

436
00:30:46,140 --> 00:30:52,270
shoot different class of Quebec's I've

437
00:30:52,270 --> 00:30:57,880
I've seen different cities see two

438
00:30:57,880 --> 00:31:00,580
channels very used for example cobalt

439
00:31:00,580 --> 00:31:04,030
Rack is library and infection both but

440
00:31:04,030 --> 00:31:05,830
most of the Danes have been using the

441
00:31:05,830 --> 00:31:10,120
same group of api's we at API you were

442
00:31:10,120 --> 00:31:16,260
like more API call API is and windsock

443
00:31:16,650 --> 00:31:21,000
modern members have you been using

444
00:31:21,000 --> 00:31:25,350
energies network drive interface

445
00:31:25,350 --> 00:31:28,170
specifications case is very similar to

446
00:31:28,170 --> 00:31:34,179
link device driver I have two parts one

447
00:31:34,179 --> 00:31:38,830
part is responsible for short work in

448
00:31:38,830 --> 00:31:41,650
the second part is responsible for the

449
00:31:41,650 --> 00:31:45,480
hard work in case the first part is the

450
00:31:45,480 --> 00:31:48,610
mini part interrupt in the second part

451
00:31:48,610 --> 00:31:51,360
mini part interrupt d pc using

452
00:31:51,360 --> 00:31:59,950
gypsies of course most rootkit using in

453
00:31:59,950 --> 00:32:05,940
this have been using in this true or

454
00:32:06,360 --> 00:32:12,400
intersect the communication or to

455
00:32:12,400 --> 00:32:15,600
compromise any kind of monitor tools

456
00:32:15,600 --> 00:32:20,880
additionally I've seen very well we're

457
00:32:20,880 --> 00:32:24,010
neighbors using windows of the can you

458
00:32:24,010 --> 00:32:27,580
applies and super vein the most modern

459
00:32:27,580 --> 00:32:32,530
and protect systems so I

460
00:32:32,530 --> 00:32:36,120
that you can a petition on this

461
00:32:36,120 --> 00:32:45,510
functions here at bottom furthermore

462
00:32:45,510 --> 00:32:53,160
some some team members have been

463
00:32:53,160 --> 00:32:57,280
intercepting the communication with TCP

464
00:32:57,280 --> 00:33:02,440
and UDP device objects and this kind of

465
00:33:02,440 --> 00:33:05,640
members most of time are able to

466
00:33:05,640 --> 00:33:09,730
circumvent all of these verbs programs

467
00:33:09,730 --> 00:33:13,540
by using people filter drivers by the

468
00:33:13,540 --> 00:33:16,690
way is quite easy to list filter drivers

469
00:33:16,690 --> 00:33:19,030
in your machine for example here I'm

470
00:33:19,030 --> 00:33:22,450
listing the filter drivers in an

471
00:33:22,450 --> 00:33:26,620
infected machine and at bottom I'm

472
00:33:26,620 --> 00:33:28,960
listing all filter drives related the

473
00:33:28,960 --> 00:33:32,310
truth volumes way to the two disks

474
00:33:32,310 --> 00:33:36,280
dispatches to list the filter drivers by

475
00:33:36,280 --> 00:33:40,150
using window bag to win the bag in this

476
00:33:40,150 --> 00:33:44,080
case I am allowing the filter plugging

477
00:33:44,080 --> 00:33:46,960
the future extension and using the

478
00:33:46,960 --> 00:33:51,730
command filters finally BIOS and UEFI

479
00:33:51,730 --> 00:33:59,350
tracks nowadays we have members trying

480
00:33:59,350 --> 00:34:01,630
to attack the platform the attack can

481
00:34:01,630 --> 00:34:05,410
happen in everywhere in the BIOS MBR

482
00:34:05,410 --> 00:34:09,639
dweeby are a IPL boot manager or in ufi

483
00:34:09,639 --> 00:34:12,310
systems in both cases is almost

484
00:34:12,310 --> 00:34:18,010
impossible to detect i'm here i show you

485
00:34:18,010 --> 00:34:21,250
a complete overview a complete click

486
00:34:21,250 --> 00:34:27,790
picture so we have the the flash the ufi

487
00:34:27,790 --> 00:34:31,360
face the sack PE gxz

488
00:34:31,360 --> 00:34:36,668
VDS and we have the operational system

489
00:34:36,668 --> 00:34:40,270
faces in the other side windows

490
00:34:40,270 --> 00:34:42,969
bootloader kernel drivers dealer in so

491
00:34:42,969 --> 00:34:45,719
on we have some

492
00:34:45,719 --> 00:34:48,210
defense in this case the buyers wired

493
00:34:48,210 --> 00:34:51,060
booth wired ufi security butcher fi

494
00:34:51,060 --> 00:34:53,069
secure boot here and in the other side

495
00:34:53,069 --> 00:34:57,750
we have the OS 6 equal boot in all this

496
00:34:57,750 --> 00:35:00,589
case it's possible to circumvent the

497
00:35:00,589 --> 00:35:06,450
protections some people have asked me

498
00:35:06,450 --> 00:35:10,950
how to analyze are infected MBR so in

499
00:35:10,950 --> 00:35:16,099
case I show you how to extract an MBR

500
00:35:16,099 --> 00:35:19,560
open in the IDE apparent case is a clean

501
00:35:19,560 --> 00:35:25,079
MBR in the other case is a an infected

502
00:35:25,079 --> 00:35:29,700
world in this case using Pacha this

503
00:35:29,700 --> 00:35:33,829
watches issue that you analyze G's MBR

504
00:35:33,829 --> 00:35:37,890
dynamically in case I I'm using box to

505
00:35:37,890 --> 00:35:42,900
make immolation so I left for you they

506
00:35:42,900 --> 00:35:44,910
step-by-step how to set up your

507
00:35:44,910 --> 00:35:52,069
environment using box and open G's in

508
00:35:52,069 --> 00:35:57,119
disinfected MBR in box and open in the

509
00:35:57,119 --> 00:36:01,950
IDE opera and analyzing dynamic using

510
00:36:01,950 --> 00:36:06,119
the debugger in scales it's not at the

511
00:36:06,119 --> 00:36:11,730
burger is a an emulation you can use a

512
00:36:11,730 --> 00:36:16,140
debugger true in this case I left some

513
00:36:16,140 --> 00:36:21,030
step-by-step procedure here to change

514
00:36:21,030 --> 00:36:26,040
the virtual machine configuration setup

515
00:36:26,040 --> 00:36:28,550
the ida pro environment

516
00:36:28,550 --> 00:36:36,420
remember that MBR is 16-bit I setup a

517
00:36:36,420 --> 00:36:42,839
breakpoint in in the MBR in 3.7 C 0 0

518
00:36:42,839 --> 00:36:48,510
and finally I was able to debug in my in

519
00:36:48,510 --> 00:36:53,780
fact in MBR finally we

520
00:36:53,780 --> 00:36:58,670
several protections in bios nowadays all

521
00:36:58,670 --> 00:37:00,530
of this protection basically try to

522
00:37:00,530 --> 00:37:04,460
avoid any kind of model of writing into

523
00:37:04,460 --> 00:37:09,080
the BIOS it's quite easy to them they

524
00:37:09,080 --> 00:37:11,720
buy from the memory resentments case I'm

525
00:37:11,720 --> 00:37:19,130
using the chip sack and I'm dumping the

526
00:37:19,130 --> 00:37:23,570
BIOS from the memory I can open it using

527
00:37:23,570 --> 00:37:27,440
ufi to to analyze each company offices

528
00:37:27,440 --> 00:37:31,780
buyers in case in sable I'm able to

529
00:37:31,780 --> 00:37:37,240
analyze and ufi imaging in take a look

530
00:37:37,240 --> 00:37:42,830
here we have several GXE drivers and

531
00:37:42,830 --> 00:37:46,250
most of the time I am able to find

532
00:37:46,250 --> 00:37:50,570
infection in these drivers finally I

533
00:37:50,570 --> 00:37:53,810
show you how to use sac should detect

534
00:37:53,810 --> 00:37:57,200
any kind of problem in your system and

535
00:37:57,200 --> 00:38:00,680
scales my system is hoping to write BIOS

536
00:38:00,680 --> 00:38:03,470
is read right horrible because I'm

537
00:38:03,470 --> 00:38:05,180
American

538
00:38:05,180 --> 00:38:14,600
right in the BIOS using the chip sack my

539
00:38:14,600 --> 00:38:17,980
protection less MMB double P is a

540
00:38:17,980 --> 00:38:21,920
protection against any kind of trying to

541
00:38:21,920 --> 00:38:25,730
change the BIOS area is disabled sorry

542
00:38:25,730 --> 00:38:26,450
all true

543
00:38:26,450 --> 00:38:33,620
I checked the protection against any

544
00:38:33,620 --> 00:38:37,820
kind of change of SPI protector ranges

545
00:38:37,820 --> 00:38:42,400
in my case it is disabled true sorry is

546
00:38:42,400 --> 00:38:43,880
enabled here

547
00:38:43,880 --> 00:38:49,220
I checked the top swap mode protection

548
00:38:49,220 --> 00:38:54,110
top sub mode is when when I'm married

549
00:38:54,110 --> 00:38:56,900
try to attack this protection they Mary

550
00:38:56,900 --> 00:39:01,310
tried to redirect the side vector true

551
00:39:01,310 --> 00:39:04,570
alternative boot loader to load an

552
00:39:04,570 --> 00:39:07,230
infection loader

553
00:39:07,230 --> 00:39:15,450
I checked my SM error protection here

554
00:39:15,450 --> 00:39:19,920
against any kind of access to SME room

555
00:39:19,920 --> 00:39:26,040
outside of the SMM and finally I would

556
00:39:26,040 --> 00:39:32,450
like to leave some questions for you I

557
00:39:32,450 --> 00:39:37,020
will sure that your systems your dotnet

558
00:39:37,020 --> 00:39:39,170
room time is not infected

559
00:39:39,170 --> 00:39:45,030
according my experience almost almost 50

560
00:39:45,030 --> 00:39:48,839
percent is infected in great and very

561
00:39:48,839 --> 00:39:52,920
critical cases I've ever seen some

562
00:39:52,920 --> 00:39:57,990
mirrors attacking the jij most of

563
00:39:57,990 --> 00:40:04,829
systems I am able to find outdated

564
00:40:04,829 --> 00:40:09,060
drivers most of systems are not

565
00:40:09,060 --> 00:40:14,460
protected against ufi any bios members

566
00:40:14,460 --> 00:40:20,599
advanced demurrers and so trying to make

567
00:40:20,599 --> 00:40:23,310
lear investigation in your company and

568
00:40:23,310 --> 00:40:27,420
certainly if you find several kinds in

569
00:40:27,420 --> 00:40:32,250
several situation lot of infections even

570
00:40:32,250 --> 00:40:34,740
that your defenses

571
00:40:34,740 --> 00:40:41,520
don't attack anyone thank you - no head

572
00:40:41,520 --> 00:40:45,150
staff thank for you who attended my talk

573
00:40:45,150 --> 00:40:48,530
have a nice day

574
00:40:55,380 --> 00:41:00,030
Thank You Alexandra it's time for

575
00:41:00,030 --> 00:41:01,140
question again

576
00:41:01,140 --> 00:41:05,550
if you have any question these are quite

577
00:41:05,550 --> 00:41:19,530
cheese top nobody oh thank you Thank You

578
00:41:19,530 --> 00:41:20,960
Alexandra

579
00:41:20,960 --> 00:41:26,119
[Applause]

