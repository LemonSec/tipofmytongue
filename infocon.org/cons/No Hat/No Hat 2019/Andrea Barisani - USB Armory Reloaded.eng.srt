1
00:00:15,440 --> 00:00:18,430
good morning everyone.we have a

2
00:00:19,949 --> 00:00:22,000
fundamental problem of modern computer science it

3
00:00:22,000 --> 00:00:24,820
is past that projecting so

4
00:00:24,820 --> 00:00:26,020
we did it

5
00:00:26,020 --> 00:00:28,180
then i'm going to lisa neo that was there to

6
00:00:28,180 --> 00:00:29,919
be here to see all of you for me it is

7
00:00:29,919 --> 00:00:31,450
very strange to do a talk in Italian

8
00:00:31,450 --> 00:00:34,180
so if for  if my brain switches

9
00:00:34,180 --> 00:00:36,040
to english during the talk

10
00:00:36,040 --> 00:00:39,220
forgive me but it is very strange my

11
00:00:39,220 --> 00:00:40,930
technical english is much better than my

12
00:00:40,930 --> 00:00:42,670
technical italian then

13
00:00:42,670 --> 00:00:44,290
thank you also for the introduction i am

14
00:00:44,290 --> 00:00:47,589
here to tell you about our usb

15
00:00:47,589 --> 00:00:49,120
armory product which is a completely

16
00:00:49,120 --> 00:00:51,720
open source product so  I would not like

17
00:00:51,720 --> 00:00:54,400
the idea that I am here to make the pc of a

18
00:00:54,400 --> 00:00:55,750
commercial product we are talking about

19
00:00:55,750 --> 00:00:58,330
a product that is 100 percent open hardware

20
00:00:58,330 --> 00:01:01,750
and open source and I don't know how many of you

21
00:01:01,750 --> 00:01:03,850
raise your hands how many of you know what

22
00:01:03,850 --> 00:01:06,850
usb is  armory 1 how many of you have ok

23
00:01:06,850 --> 00:01:07,510
perfect

24
00:01:07,510 --> 00:01:10,960
well then a small production about

25
00:01:10,960 --> 00:01:13,240
me i am the founder of a

26
00:01:13,240 --> 00:01:15,040
company called inverce parker having

27
00:01:15,040 --> 00:01:17,920
been acquired by ex and care ee  in

28
00:01:17,920 --> 00:01:19,689
my history I have been dealing with hardware

29
00:01:19,689 --> 00:01:21,820
since 2005 so even

30
00:01:21,820 --> 00:01:24,550
before hardware was a cool thing it was

31
00:01:24,550 --> 00:01:26,140
cool to do in

32
00:01:26,140 --> 00:01:27,730
cybersecurity even before the term

33
00:01:27,730 --> 00:01:30,550
ajo cheering if it was invented and

34
00:01:30,550 --> 00:01:32,590
starting very early we got

35
00:01:32,590 --> 00:01:35,409
in  a position where we now test

36
00:01:35,409 --> 00:01:38,680
things that until a few years ago were

37
00:01:38,680 --> 00:01:40,480
considered very exotic but

38
00:01:40,480 --> 00:01:41,800
are no longer exotic like

39
00:01:41,800 --> 00:01:44,050
cars, airplanes, industrial automation

40
00:01:44,050 --> 00:01:46,000
systems and so on,

41
00:01:46,000 --> 00:01:48,880
but let's say with old age, getting

42
00:01:48,880 --> 00:01:52,600
old we are a little bit

43
00:01:52,600 --> 00:01:57,820
crazy  just to break things a

44
00:01:57,820 --> 00:02:00,909
little also arises the desire to create and

45
00:02:00,909 --> 00:02:02,979
build because it is always important to

46
00:02:02,979 --> 00:02:04,900
keep the engineering perspective

47
00:02:04,900 --> 00:02:07,030
even when doing the tests safety

48
00:02:07,030 --> 00:02:09,220
in understanding how problems can be solved

49
00:02:09,220 --> 00:02:11,019
and to always have

50
00:02:11,019 --> 00:02:12,340
the engineers' point of view too  who

51
00:02:12,340 --> 00:02:16,569
build things and therefore from this

52
00:02:16,569 --> 00:02:19,150
desire to build not only software

53
00:02:19,150 --> 00:02:22,709
but also hardware in 2014  c was born

54
00:02:22,709 --> 00:02:25,840
the idea that arose spontaneously from a

55
00:02:25,840 --> 00:02:27,340
safety test we did

56
00:02:27,340 --> 00:02:30,189
we were testing the functionality of weapons

57
00:02:30,189 --> 00:02:30,930
between stone

58
00:02:30,930 --> 00:02:33,569
an isolation system that is present

59
00:02:33,569 --> 00:02:36,599
in wired lcp and to facilitate

60
00:02:36,599 --> 00:02:38,730
our selves we wondered well it would be

61
00:02:38,730 --> 00:02:42,120
useful to have a small  core arm that

62
00:02:42,120 --> 00:02:44,340
we can access via usb on a

63
00:02:44,340 --> 00:02:46,650
laptop and we thought it

64
00:02:46,650 --> 00:02:51,060
will surely exist and it did not exist

65
00:02:51,060 --> 00:02:56,579
and then we came up with the idea of taking

66
00:02:56,579 --> 00:02:59,340
this challenge in a typical hacker style but

67
00:02:59,340 --> 00:03:01,139
then since it is not there we do it

68
00:03:01,139 --> 00:03:04,530
and  as we thought about this

69
00:03:04,530 --> 00:03:06,629
idea we found more and more

70
00:03:06,629 --> 00:03:08,760
possible security uses for

71
00:03:08,760 --> 00:03:11,849
this very banal concept of having a

72
00:03:11,849 --> 00:03:15,239
secure open computer that can be

73
00:03:15,239 --> 00:03:18,180
attached to a usb port without a cable

74
00:03:18,180 --> 00:03:19,950
this was essential something that can

75
00:03:19,950 --> 00:03:21,510
be kept in your pocket

76
00:03:21,510 --> 00:03:23,129
exactly like a drive  usb but a

77
00:03:23,129 --> 00:03:25,980
computer where anyone can launch

78
00:03:25,980 --> 00:03:28,919
code safely and so

79
00:03:28,919 --> 00:03:32,389
the idea of building usb loves was born with

80
00:03:32,389 --> 00:03:34,379
relatively little  experience

81
00:03:34,379 --> 00:03:36,690
in dealing with such

82
00:03:36,690 --> 00:03:38,430
complex supports from a hardware point of view

83
00:03:38,430 --> 00:03:42,239
in October 2014 we finally

84
00:03:42,239 --> 00:03:44,489
had the first working prototype and

85
00:03:44,489 --> 00:03:47,340
we announced the existence of dio

86
00:03:47,340 --> 00:03:51,389
spa died from the beginning even for

87
00:03:51,389 --> 00:03:53,579
people who are experts in hardware and

88
00:03:53,579 --> 00:03:55,739
it has been seen a  bit the

89
00:03:55,739 --> 00:03:57,569
completely unusual form factor for such a

90
00:03:57,569 --> 00:04:01,229
product to have a so-called

91
00:04:01,229 --> 00:04:03,209
system on chip cpi that a gpu with even

92
00:04:03,209 --> 00:04:05,699
internal peripherals put into such a

93
00:04:05,699 --> 00:04:08,699
small form factor was just a

94
00:04:08,699 --> 00:04:11,629
challenge from a purely engineering point of view

95
00:04:11,629 --> 00:04:14,159
and to maintain that too

96
00:04:14,159 --> 00:04:16,228
completely open hardware was the

97
00:04:16,228 --> 00:04:18,029
even bigger challenge because to

98
00:04:18,029 --> 00:04:19,978
keep it however we had to do

99
00:04:19,978 --> 00:04:24,419
we could not hire other

100
00:04:24,419 --> 00:04:26,490
commercial companies to create the design because

101
00:04:26,490 --> 00:04:29,009
no one uses open tools to

102
00:04:29,009 --> 00:04:32,159
create this type of car and I am here

103
00:04:32,159 --> 00:04:36,090
to tell you about the second version  of

104
00:04:36,090 --> 00:04:38,610
of this album then basically

105
00:04:38,610 --> 00:04:41,639
usb armory born as a a small

106
00:04:41,639 --> 00:04:45,330
computer  completely open that thanks

107
00:04:45,330 --> 00:04:46,830
to its form factor can be

108
00:04:46,830 --> 00:04:50,400
used as a platform

109
00:04:50,400 --> 00:04:52,380
of security applications that these

110
00:04:52,380 --> 00:04:53,910
applications are have a step

111
00:04:53,910 --> 00:04:55,940
manager have stories written stapled

112
00:04:55,940 --> 00:04:58,740
use it for authentication touches to

113
00:04:58,740 --> 00:05:00,690
keep it as a keyring for pgp

114
00:05:00,690 --> 00:05:03,360
keys for ssh keys was born as  a

115
00:05:03,360 --> 00:05:06,090
generic tool to be able to run your

116
00:05:06,090 --> 00:05:08,940
code therefore contrary to a

117
00:05:08,940 --> 00:05:12,330
closed commercial smart card where you are

118
00:05:12,330 --> 00:05:14,010
restricted only to the applets that the

119
00:05:14,010 --> 00:05:18,150
vendor provides usb armory is a

120
00:05:18,150 --> 00:05:20,190
platform to run any

121
00:05:20,190 --> 00:05:21,840
type of code but also to make it

122
00:05:21,840 --> 00:05:25,070
safe on this type on

123
00:05:25,070 --> 00:05:27,840
this type of hardware the

124
00:05:27,840 --> 00:05:30,600
previous presentation also gives me a beautiful

125
00:05:30,600 --> 00:05:31,289
marketing pc

126
00:05:31,289 --> 00:05:33,330
you are afraid of specter you are afraid of

127
00:05:33,330 --> 00:05:35,190
[ __ ] do not trust the cp you of

128
00:05:35,190 --> 00:05:37,410
your laptop usb harmony you have an

129
00:05:37,410 --> 00:05:39,240
outermost c that you can attach when

130
00:05:39,240 --> 00:05:41,910
you want it is perfect it seems  like the sale

131
00:05:41,910 --> 00:05:45,810
of the panthers and the idea of this

132
00:05:45,810 --> 00:05:48,240
device  is that it can emulate any

133
00:05:48,240 --> 00:05:51,720
usb device and mainly it can

134
00:05:51,720 --> 00:05:53,010
be seen as a server then

135
00:05:53,010 --> 00:05:54,539
attacked on laptop you can

136
00:05:54,539 --> 00:05:56,450
connect this was the very

137
00:05:56,450 --> 00:06:00,000
simple idea completely trivial at a

138
00:06:00,000 --> 00:06:02,130
certain point of view but at the time there

139
00:06:02,130 --> 00:06:04,530
was no type of hardware that

140
00:06:04,530 --> 00:06:07,200
allowed to  obtain these

141
00:06:07,200 --> 00:06:10,740
features in an easy portable way

142
00:06:10,740 --> 00:06:13,410
without having to carry carli power supplies

143
00:06:13,410 --> 00:06:15,630
and above all without having the

144
00:06:15,630 --> 00:06:18,090
transparency and openness in the code that

145
00:06:18,090 --> 00:06:23,340
in the end armory abruzzo therefore having

146
00:06:23,340 --> 00:06:26,580
created this hardware we

147
00:06:26,580 --> 00:06:28,439
checked a lot of boxes that did not

148
00:06:28,439 --> 00:06:30,090
exist before we created one of the

149
00:06:30,090 --> 00:06:32,189
singles  paul smallest computers in the

150
00:06:32,189 --> 00:06:34,919
world completely focused on

151
00:06:34,919 --> 00:06:41,069
security and we also have when doing

152
00:06:41,069 --> 00:06:42,930
research in this area especially on

153
00:06:42,930 --> 00:06:45,120
a system that is relatively complex

154
00:06:45,120 --> 00:06:47,340
we have also created a whole series of

155
00:06:47,340 --> 00:06:49,439
software and have open source applicable

156
00:06:49,439 --> 00:06:52,469
to any type of device based

157
00:06:52,469 --> 00:06:54,719
on processors  of the annex p that

158
00:06:54,719 --> 00:06:56,759
we use and therefore c  i are a whole

159
00:06:56,759 --> 00:06:59,009
series of contributions that were born that

160
00:06:59,009 --> 00:07:01,729
if not from this and then in the end

161
00:07:01,729 --> 00:07:03,960
we were privileged to have a

162
00:07:03,960 --> 00:07:05,969
huge success with the public on this

163
00:07:05,969 --> 00:07:08,039
device because let's remember created

164
00:07:08,039 --> 00:07:10,770
by three Italians in Trieste completely

165
00:07:10,770 --> 00:07:14,940
produced in Italy but it was let's say

166
00:07:14,940 --> 00:07:17,580
used by  by tens of thousands of

167
00:07:17,580 --> 00:07:21,690
people and this made us very very

168
00:07:21,690 --> 00:07:24,210
happy especially the inertia that was

169
00:07:24,210 --> 00:07:25,860
created in developing the software for

170
00:07:25,860 --> 00:07:27,270
this device and the research that

171
00:07:27,270 --> 00:07:30,539
led to it was really just

172
00:07:30,539 --> 00:07:33,360
above all expectations we have a

173
00:07:33,360 --> 00:07:35,009
section on the wiki  with all the

174
00:07:35,009 --> 00:07:37,319
external contributions repeated for university students

175
00:07:37,319 --> 00:07:41,129
who have been, let's say, stimulated to

176
00:07:41,129 --> 00:07:43,319
have this type of device and are

177
00:07:43,319 --> 00:07:44,940
in the contributions that we would never have

178
00:07:44,940 --> 00:07:48,560
to which we would never have imagined

179
00:07:49,469 --> 00:07:52,889
furthermore immediately after creating this

180
00:07:52,889 --> 00:07:54,659
device we also understood that it

181
00:07:54,659 --> 00:07:56,580
could also be used by  only

182
00:07:56,580 --> 00:07:58,050
everyone was asking us can we add the

183
00:07:58,050 --> 00:07:59,669
wifi we can use it as if it was u  n you

184
00:07:59,669 --> 00:08:02,639
then breathe alone and keeping faith with the

185
00:08:02,639 --> 00:08:03,810
name of our company that was

186
00:08:03,810 --> 00:08:04,949
done the reverse path

187
00:08:04,949 --> 00:08:06,419
we discovered that we could

188
00:08:06,419 --> 00:08:08,669
completely reverse the role of

189
00:08:08,669 --> 00:08:12,089
the usb port from a device to a host with

190
00:08:12,089 --> 00:08:14,279
this hook of adapter that

191
00:08:14,279 --> 00:08:16,379
allowed you to do it so we also

192
00:08:16,379 --> 00:08:17,909
have  ourselves we discovered some who

193
00:08:17,909 --> 00:08:19,469
skate that we never imagined we

194
00:08:19,469 --> 00:08:22,469
could do with this device

195
00:08:22,469 --> 00:08:24,150
obviously being the the first

196
00:08:24,150 --> 00:08:24,830
version

197
00:08:24,830 --> 00:08:28,650
let's say there were some not everything

198
00:08:28,650 --> 00:08:29,909
was perfect

199
00:08:29,909 --> 00:08:31,949
let's say one of the main problems is

200
00:08:31,949 --> 00:08:33,448
that the microsd slot of this

201
00:08:33,448 --> 00:08:35,149
device was not easily

202
00:08:35,149 --> 00:08:38,409
accessible  to have

203
00:08:38,409 --> 00:08:42,020
this the usb plug put in the pcp I

204
00:08:42,020 --> 00:08:44,059
call it the tipster plug because to

205
00:08:44,059 --> 00:08:46,400
save a euro on board instead of

206
00:08:46,400 --> 00:08:48,500
putting a real metal usb port

207
00:08:48,500 --> 00:08:50,480
we did it in the pci p as you can see at the

208
00:08:50,480 --> 00:08:52,010
bottom right in the end it was not

209
00:08:52,010 --> 00:08:56,050
a '  great great idea

210
00:08:56,060 --> 00:08:58,640
we have a device case

211
00:08:58,640 --> 00:09:01,760
that was only conceived after it

212
00:09:01,760 --> 00:09:03,410
was quite an incu  bo

213
00:09:03,410 --> 00:09:06,050
also now we will see how the support

214
00:09:06,050 --> 00:09:08,000
of the enix for certain types

215
00:09:08,000 --> 00:09:09,770
of security problems has not been immediately

216
00:09:09,770 --> 00:09:11,990
has needs that we had not

217
00:09:11,990 --> 00:09:14,120
anticipated such as the fact of also having

218
00:09:14,120 --> 00:09:16,880
the storage of a disk on the

219
00:09:16,880 --> 00:09:18,590
device itself, i.e. only not to

220
00:09:18,590 --> 00:09:23,450
rely on the micro sd  external

221
00:09:23,450 --> 00:09:26,360
device prevented having devices that came out of

222
00:09:26,360 --> 00:09:28,640
the manufacturer with a firmware above and

223
00:09:28,640 --> 00:09:30,800
this has a little limited

224
00:09:30,800 --> 00:09:33,320
massive uses of the device so these

225
00:09:33,320 --> 00:09:34,430
were a bit of the things we wanted to

226
00:09:34,430 --> 00:09:37,190
fix with the second version

227
00:09:37,190 --> 00:09:39,950
also mainly we do here to

228
00:09:39,950 --> 00:09:42,440
talk about security in 2017 our

229
00:09:42,440 --> 00:09:44,210
friends of quarters lav have discovered a

230
00:09:44,210 --> 00:09:47,510
critical vulnerability in the hardware of

231
00:09:47,510 --> 00:09:49,970
all processors and mx of the in xp and

232
00:09:49,970 --> 00:09:51,590
this vulnerability concerns the

233
00:09:51,590 --> 00:09:54,950
so-called secure boot sécure boot is a

234
00:09:54,950 --> 00:09:57,170
feature that is increasingly

235
00:09:57,170 --> 00:09:58,430
used nowadays in all embedded systems

236
00:09:58,430 --> 00:10:01,130
that we talk about

237
00:10:01,130 --> 00:10:05,210
phones automotive aircraft vehicles and it is a

238
00:10:05,210 --> 00:10:07,820
feature that allows you to ave  re a

239
00:10:07,820 --> 00:10:10,430
still in the same ardor and to ensure

240
00:10:10,430 --> 00:10:12,760
that the cpi from the first moment it

241
00:10:12,760 --> 00:10:15,980
starts running only authenticated code

242
00:10:15,980 --> 00:10:18,730
and this is the key to obtaining

243
00:10:18,730 --> 00:10:20,930
authentication and confidentiality of

244
00:10:20,930 --> 00:10:22,970
any firmware that runs on any

245
00:10:22,970 --> 00:10:24,560
embedded system

246
00:10:24,560 --> 00:10:27,110
without this functionality is never

247
00:10:27,110 --> 00:10:29,420
It is possible to protect a device from

248
00:10:29,420 --> 00:10:31,730
physical attacks that is, from stealing the

249
00:10:31,730 --> 00:10:33,230
device really in your own hands

250
00:10:33,230 --> 00:10:35,920
because it will always be possible to solder

251
00:10:35,920 --> 00:10:39,200
the flash the disk what you modify

252
00:10:39,200 --> 00:10:41,330
its content and in the end obtain the

253
00:10:41,330 --> 00:10:43,010
same keys that are used to

254
00:10:43,010 --> 00:10:45,720
encrypt the

255
00:10:45,720 --> 00:10:48,120
content therefore this type of  variability to

256
00:10:48,120 --> 00:10:49,439
which we too are now

257
00:10:49,439 --> 00:10:52,290
discovering several we announced a

258
00:10:52,290 --> 00:10:52,889
month ago

259
00:10:52,889 --> 00:10:55,680
a vulnerability on xilinx fga of

260
00:10:55,680 --> 00:10:56,459
this type

261
00:10:56,459 --> 00:10:58,800
we discovered other vulnerabilities in

262
00:10:58,800 --> 00:11:00,329
software that try to maintain

263
00:11:00,329 --> 00:11:02,160
secure boot are a

264
00:11:02,160 --> 00:11:04,829
particularly critical novelty because we

265
00:11:04,829 --> 00:11:06,810
always like to say that they exist  in remote

266
00:11:06,810 --> 00:11:08,579
software upgrade but not eg  I am in

267
00:11:08,579 --> 00:11:09,750
remote hardware upgrade

268
00:11:09,750 --> 00:11:11,910
so if we identify a problem

269
00:11:11,910 --> 00:11:15,600
in the rom of a gpu and this problem

270
00:11:15,600 --> 00:11:18,240
concerns the authentication of the code there

271
00:11:18,240 --> 00:11:20,990
is no other option beyond

272
00:11:20,990 --> 00:11:23,819
replacing the component and you understand

273
00:11:23,819 --> 00:11:26,610
well that if we have a cpi installed

274
00:11:26,610 --> 00:11:28,769
on  millions of vehicles on millions of

275
00:11:28,769 --> 00:11:31,980
phones on thousands of sb armory for

276
00:11:31,980 --> 00:11:36,389
example it becomes an extremely

277
00:11:36,389 --> 00:11:40,230
severe cost for the integrator of these

278
00:11:40,230 --> 00:11:44,819
devices to change the processor to

279
00:11:44,819 --> 00:11:48,839
me they are back with a correct bootrom

280
00:11:48,839 --> 00:11:50,670
fixed for these problems is a

281
00:11:50,670 --> 00:11:53,459
process that can take  from one to two

282
00:11:53,459 --> 00:11:56,550
years he never in some cases not the

283
00:11:56,550 --> 00:11:57,839
problem these problems are never

284
00:11:57,839 --> 00:11:59,189
solved

285
00:11:59,189 --> 00:12:01,740
so we found ourselves on the other side

286
00:12:01,740 --> 00:12:05,699
not on the usual side of those who

287
00:12:05,699 --> 00:12:09,990
find the bugs but to receive one and this

288
00:12:09,990 --> 00:12:11,309
is part of the rules of the game

289
00:12:11,309 --> 00:12:14,910
obviously then the usb armory 1

290
00:12:14,910 --> 00:12:17,040
the processor that was used

291
00:12:17,040 --> 00:12:18,480
later armory one like all the

292
00:12:18,480 --> 00:12:20,759
other processors of the mx series of the

293
00:12:20,759 --> 00:12:26,839
nic spi year this  this problem that

294
00:12:26,839 --> 00:12:29,370
completely prevents the

295
00:12:29,370 --> 00:12:31,980
safe use of the secure boot function

296
00:12:31,980 --> 00:12:34,500
because they throw it away from the processor when pulse

297
00:12:34,500 --> 00:12:37,170
has certified the 509 that is sent

298
00:12:37,170 --> 00:12:39,689
to verify the signification suffers

299
00:12:39,689 --> 00:12:43,970
from a very trivial buffer overflow which,

300
00:12:43,970 --> 00:12:46,550
being in the hardware, cannot be

301
00:12:46,550 --> 00:12:48,130
solved

302
00:12:48,130 --> 00:12:49,930
and since the  processor used in

303
00:12:49,930 --> 00:12:52,240
love one was a so-called legacy processor

304
00:12:52,240 --> 00:12:53,080


305
00:12:53,080 --> 00:12:54,550
there was no

306
00:12:54,550 --> 00:12:56,020
part number update so this was

307
00:12:56,020 --> 00:12:58,480
also something that pushed us even

308
00:12:58,480 --> 00:13:04,780
more to want to offer a new design for

309
00:13:04,780 --> 00:13:08,950
this type of product in the management

310
00:13:08,950 --> 00:13:11,350
of this vulnerability  what

311
00:13:11,350 --> 00:13:14,680
we did is immediately

312
00:13:14,680 --> 00:13:17,400
once we received the advisory we

313
00:13:17,400 --> 00:13:19,720
proposed a criminal advisory where we

314
00:13:19,720 --> 00:13:22,270
simply warned the community

315
00:13:22,270 --> 00:13:23,740
of the existence of this type of

316
00:13:23,740 --> 00:13:25,690
vulnerability that let's remember it impacts

317
00:13:25,690 --> 00:13:27,940
any device with this type of

318
00:13:27,940 --> 00:13:30,220
processor which are widely used and in

319
00:13:30,220 --> 00:13:32,080
addition we also have  published to

320
00:13:32,080 --> 00:13:35,050
ourselves i  The tour of concept to exploit

321
00:13:35,050 --> 00:13:38,280
this vulnerability with considerable

322
00:13:38,280 --> 00:13:41,050
resistance on the part of nxp that is

323
00:13:41,050 --> 00:13:42,550
always asked for but why do you do it you do not

324
00:13:42,550 --> 00:13:44,380
have to release more for concept it is bad to

325
00:13:44,380 --> 00:13:46,330
release the prof concept but as

326
00:13:46,330 --> 00:13:47,770
we know in security

327
00:13:47,770 --> 00:13:49,570
you must not have the illusion that the

328
00:13:49,570 --> 00:13:51,640
hiding a proof of concept can

329
00:13:51,640 --> 00:13:54,310
lead to any type of protection and it is

330
00:13:54,310 --> 00:13:56,680
always important to be realistic and

331
00:13:56,680 --> 00:13:59,410
pragmatic and to accept that if

332
00:13:59,410 --> 00:14:00,580
something

333
00:14:00,580 --> 00:14:03,160
suffers from a critical vulnerability the

334
00:14:03,160 --> 00:14:04,780
fact that there is a dive ran out

335
00:14:04,780 --> 00:14:08,110
is not a help is a must to

336
00:14:08,110 --> 00:14:10,090
allow everyone to  actually explore

337
00:14:10,090 --> 00:14:12,780
what the impact of this type of

338
00:14:12,780 --> 00:14:15,690
vulnerability is so ironically

339
00:14:15,690 --> 00:14:18,100
we have a tool that is the only open

340
00:14:18,100 --> 00:14:21,010
source tool that allows you to film

341
00:14:21,010 --> 00:14:22,840
images for the reboot bucket of

342
00:14:22,840 --> 00:14:25,570
annex pe processors this tool is also

343
00:14:25,570 --> 00:14:27,760
the only one that allows you to exploit  a

344
00:14:27,760 --> 00:14:30,430
volley deserves that it bypasses

345
00:14:30,430 --> 00:14:31,990
the securebag ta function so everything in the

346
00:14:31,990 --> 00:14:34,990
same open source tool and I

347
00:14:34,990 --> 00:14:37,270
also wrote a blog  post about braker on

348
00:14:37,270 --> 00:14:40,420
product breakpoint where we explain the

349
00:14:40,420 --> 00:14:43,870
merits for which we ourselves producers of

350
00:14:43,870 --> 00:14:45,160
this hardware wanted to

351
00:14:45,160 --> 00:14:47,320
publish a software that breaks

352
00:14:47,320 --> 00:14:49,690
our own hardware which is something

353
00:14:49,690 --> 00:14:52,210
that we say happens

354
00:14:52,210 --> 00:14:53,530
quite rarely but this is what

355
00:14:53,530 --> 00:14:55,240
happens when  the product is created

356
00:14:55,240 --> 00:14:57,490
by someone who also does

357
00:14:57,490 --> 00:14:59,170
dv tests the truth is that it has a long history

358
00:14:59,170 --> 00:15:01,990
in butter you have spoken so this is

359
00:15:01,990 --> 00:15:04,270
the tool that in addition to signing the images

360
00:15:04,270 --> 00:15:07,390
also a beautiful flag like apply mai

361
00:15:07,390 --> 00:15:08,920
ascione sput by pass

362
00:15:08,920 --> 00:15:11,470
so this is the  message we

363
00:15:11,470 --> 00:15:15,010
wanted to give with to develop

364
00:15:15,010 --> 00:15:17,020
this this in integrating this

365
00:15:17,020 --> 00:15:19,209
functionality I am here to

366
00:15:19,209 --> 00:15:20,709
tell you about the second version of usb

367
00:15:20,709 --> 00:15:24,490
armory which tries to solve the problems

368
00:15:24,490 --> 00:15:26,560
of form defects of the first armory and which

369
00:15:26,560 --> 00:15:30,580
therefore tries to build not only

370
00:15:30,580 --> 00:15:33,220
provide a processor  much safer

371
00:15:33,220 --> 00:15:35,260
but also to provide a device that is

372
00:15:35,260 --> 00:15:37,839
much more usable then for you to

373
00:15:37,839 --> 00:15:39,610
understand the challenge

374
00:15:39,610 --> 00:15:42,339
this is  pcb layout of the first usb armory

375
00:15:42,339 --> 00:15:44,140
we are talking about a very small object of this

376
00:15:44,140 --> 00:15:47,140
size and this already

377
00:15:47,140 --> 00:15:50,980
seemed to me like a very

378
00:15:50,980 --> 00:15:54,940
very very high photo density and for the second

379
00:15:54,940 --> 00:15:57,399
version we wanted to add many

380
00:15:57,399 --> 00:15:59,589
more components here we have a

381
00:15:59,589 --> 00:16:02,110
system on chip in the center  we have the blade and we have

382
00:16:02,110 --> 00:16:04,300
only behind we have an sd slot and then

383
00:16:04,300 --> 00:16:05,470
we have the components that are used to

384
00:16:05,470 --> 00:16:07,930
power on usb amori 2

385
00:16:07,930 --> 00:16:10,959
this is the situation we have the

386
00:16:10,959 --> 00:16:12,820
processor the ram a bluetooth module

387
00:16:12,820 --> 00:16:15,910
a female port a male port 2

388
00:16:15,910 --> 00:16:18,310
security element an internal flash and it

389
00:16:18,310 --> 00:16:20,800
smog nicosia of seemed impossible but

390
00:16:20,800 --> 00:16:23,079
we managed to put everything in

391
00:16:23,079 --> 00:16:26,529
the same in the same edge

392
00:16:26,529 --> 00:16:29,260
so in practice we keep the same

393
00:16:29,260 --> 00:16:31,209
principle a device that does not

394
00:16:31,209 --> 00:16:33,880
need a cable to be connected we

395
00:16:33,880 --> 00:16:36,190
move at times

396
00:16:36,190 --> 00:16:38,829
because this will be the  future and

397
00:16:38,829 --> 00:16:40,240
although it took me right now it does

398
00:16:40,240 --> 00:16:42,010
n't even have a type port yes so I have to

399
00:16:42,010 --> 00:16:44,589
use adapters is a lot  ironic and

400
00:16:44,589 --> 00:16:46,750
we have the bluetooth module

401
00:16:46,750 --> 00:16:48,700
this is the bluetooth module with

402
00:16:48,700 --> 00:16:50,860
an integrated antenna we have a

403
00:16:50,860 --> 00:16:52,930
female port integrated in the device in

404
00:16:52,930 --> 00:16:54,220
this way the device can be

405
00:16:54,220 --> 00:16:56,950
used alone powered by itself without the

406
00:16:56,950 --> 00:17:00,279
need for a laptop a server and

407
00:17:00,279 --> 00:17:01,930
you can attach other devices

408
00:17:01,930 --> 00:17:04,179
like wifi without the need for

409
00:17:04,179 --> 00:17:05,740
that adapter you saw at the beginning

410
00:17:05,740 --> 00:17:07,990
here we have the main port this is

411
00:17:07,990 --> 00:17:09,809
the processor the ram

412
00:17:09,809 --> 00:17:11,970
and we have an element bucket on this

413
00:17:11,970 --> 00:17:14,429
side and on the other side we have another

414
00:17:14,429 --> 00:17:18,839
secure element we have the microsd slot and

415
00:17:18,839 --> 00:17:21,720
we have a  16 gb storage is

416
00:17:21,720 --> 00:17:23,279
incorporated

417
00:17:23,279 --> 00:17:25,199
so all these features have

418
00:17:25,199 --> 00:17:27,240
been added to open new

419
00:17:27,240 --> 00:17:29,220
skies and then we will also have a

420
00:17:29,220 --> 00:17:32,399
case this project was done

421
00:17:32,399 --> 00:17:33,690
with an open source software

422
00:17:33,690 --> 00:17:36,600
called chi cad which allowed us with

423
00:17:36,600 --> 00:17:38,159
completely open source tools

424
00:17:38,159 --> 00:17:40,830
to create this design to send

425
00:17:40,830 --> 00:17:43,470
producers to have it produced in

426
00:17:43,470 --> 00:17:45,980
Italy our philosophy is that it makes no sense

427
00:17:45,980 --> 00:17:48,360
publishing the diagrams and layouts that

428
00:17:48,360 --> 00:17:52,980
can only be opened with

429
00:17:52,980 --> 00:17:55,440
expensive commercial software would technically be

430
00:17:55,440 --> 00:17:58,769
open hardware because it is enough to release the

431
00:17:58,769 --> 00:18:01,169
sources but if the

432
00:18:01,169 --> 00:18:04,580
dependence requires it to have an expensive commercial software

433
00:18:04,580 --> 00:18:08,009
we say that the stage falls a bit

434
00:18:08,009 --> 00:18:09,749
therefore the challenge for us that we

435
00:18:09,749 --> 00:18:11,249
wanted to use  open source tools to

436
00:18:11,249 --> 00:18:13,649
create this hardware I believe it is

437
00:18:13,649 --> 00:18:16,169
despite the complaints I can

438
00:18:16,169 --> 00:18:19,529
make about who falls about how much his

439
00:18:19,529 --> 00:18:21,869
crashes in the middle of a session are

440
00:18:21,869 --> 00:18:24,809
very uncomfortable let's put it this

441
00:18:24,809 --> 00:18:25,379
way

442
00:18:25,379 --> 00:18:27,090
I find it incredible that in

443
00:18:27,090 --> 00:18:29,759
2019  three people can create an act

444
00:18:29,759 --> 00:18:30,809
of this kind that a

445
00:18:30,809 --> 00:18:31,940
completely open source software

446
00:18:31,940 --> 00:18:36,869
I think it is a thing a remarkable thing

447
00:18:36,869 --> 00:18:38,610
this will be included that we are

448
00:18:38,610 --> 00:18:42,029
always producing in Italy and here

449
00:18:42,029 --> 00:18:43,350
we are talking about the safety features

450
00:18:43,350 --> 00:18:45,269
of this processor that

451
00:18:45,269 --> 00:18:47,730
we have chosen armory 1 used a  mx

452
00:18:47,730 --> 00:18:49,799
53 we are now using two variants

453
00:18:49,799 --> 00:18:53,490
of the x6 liam xml or lz

454
00:18:53,490 --> 00:18:55,110
are two  practically

455
00:18:55,110 --> 00:18:57,690
identical processors one faster one less fast

456
00:18:57,690 --> 00:19:00,090
and have the same

457
00:19:00,090 --> 00:19:01,889
security features with the difference that the

458
00:19:01,889 --> 00:19:04,080
slower processor can also provide

459
00:19:04,080 --> 00:19:06,779
the encryption of the ram in real time

460
00:19:06,779 --> 00:19:08,369
which is a feature that to

461
00:19:08,369 --> 00:19:12,840
implement applications such as maybe it

462
00:19:12,840 --> 00:19:14,009
can be a bit with  wallet

463
00:19:14,009 --> 00:19:17,039
applications where absolute

464
00:19:17,039 --> 00:19:19,520
security is needed even against

465
00:19:19,520 --> 00:19:21,530
extremely complicated and extremely

466
00:19:21,530 --> 00:19:23,060
advanced attacks which can be

467
00:19:23,060 --> 00:19:24,380
the interception of the ram in

468
00:19:24,380 --> 00:19:26,150
real time which is an attack that

469
00:19:26,150 --> 00:19:28,040
is not yet considered practical nowadays

470
00:19:28,040 --> 00:19:29,870
there are not many examples but from  a

471
00:19:29,870 --> 00:19:31,280
theoretical point of view and perfectly

472
00:19:31,280 --> 00:19:32,510
feasible

473
00:19:32,510 --> 00:19:35,420
therefore the slower version also offers

474
00:19:35,420 --> 00:19:37,850
this type of guarantee we have a

475
00:19:37,850 --> 00:19:41,240
built-in random number generator

476
00:19:41,240 --> 00:19:42,950
we have a photographic accelerator

477
00:19:42,950 --> 00:19:45,320
that allows you to perform

478
00:19:45,320 --> 00:19:47,420
graphics operations even accelerated from a

479
00:19:47,420 --> 00:19:48,230
hardware point of view

480
00:19:48,230 --> 00:19:50,690
we have a  reboot bucket immune from

481
00:19:50,690 --> 00:19:53,480
previously problems  reported and

482
00:19:53,480 --> 00:19:55,940
we have a unique hardware key on

483
00:19:55,940 --> 00:19:57,290
each device that allows you to

484
00:19:57,290 --> 00:20:00,410
perform individual encryption for

485
00:20:00,410 --> 00:20:02,990
each device even without the input of

486
00:20:02,990 --> 00:20:06,080
an external password this

487
00:20:06,080 --> 00:20:07,640
grammar left the diagram of a

488
00:20:07,640 --> 00:20:08,840
system on chip all these elements

489
00:20:08,840 --> 00:20:11,060
are included in the main processor

490
00:20:11,060 --> 00:20:12,260
we have a lot  of things that we do not use

491
00:20:12,260 --> 00:20:15,710
as it can be graphics card to

492
00:20:15,710 --> 00:20:18,110
control in touch panel and all ethernet

493
00:20:18,110 --> 00:20:19,640
for example that in this design are

494
00:20:19,640 --> 00:20:21,530
used and we have other components

495
00:20:21,530 --> 00:20:23,030
that instead we use as the

496
00:20:23,030 --> 00:20:24,770
controller for the microsd various

497
00:20:24,770 --> 00:20:27,340
usb controllers and so on

498
00:20:27,340 --> 00:20:29,840
then the main functionality of

499
00:20:29,840 --> 00:20:31,700
security that allows let's say to have

500
00:20:31,700 --> 00:20:34,430
all the various uses indeed the

501
00:20:34,430 --> 00:20:37,190
functions are two the first is the boot

502
00:20:37,190 --> 00:20:40,400
that is the fact of being able to merge

503
00:20:40,400 --> 00:20:43,130
cryptographic keys in an

504
00:20:43,130 --> 00:20:44,750
irreversible way on each of these

505
00:20:44,750 --> 00:20:45,650
devices

506
00:20:45,650 --> 00:20:47,990
and these keys are your keys

507
00:20:47,990 --> 00:20:50,030
they are not the keys of us  that we manufacture

508
00:20:50,030 --> 00:20:52,670
a device ie anyone who uses this

509
00:20:52,670 --> 00:20:54,140
of  device can decide to make

510
00:20:54,140 --> 00:20:56,270
provisions of your keys and

511
00:20:56,270 --> 00:20:57,890
decide that this device from that

512
00:20:57,890 --> 00:20:59,510
moment on can execute code

513
00:20:59,510 --> 00:21:01,150
that is signed by you

514
00:21:01,150 --> 00:21:04,270
the fact of the execution of

515
00:21:04,270 --> 00:21:07,250
authenticated code unlocks the use of a

516
00:21:07,250 --> 00:21:09,800
unique key that on each single

517
00:21:09,800 --> 00:21:11,960
device and  this means that each

518
00:21:11,960 --> 00:21:14,780
device can encrypt or

519
00:21:14,780 --> 00:21:19,430
encrypt data only for itself

520
00:21:19,430 --> 00:21:21,590


521
00:21:21,590 --> 00:21:23,150
so if you want to do full disk

522
00:21:23,150 --> 00:21:25,640
encryption with your password or

523
00:21:25,640 --> 00:21:28,310
without it, you can make sure that the

524
00:21:28,310 --> 00:21:30,230
micro sd has been removed and put on another

525
00:21:30,230 --> 00:21:32,679
device it will not be able to  be

526
00:21:32,679 --> 00:21:34,419
it is because even if maybe the

527
00:21:34,419 --> 00:21:36,070
key is derived from the mail from

528
00:21:36,070 --> 00:21:37,389
your password

529
00:21:37,389 --> 00:21:39,610
the derivation of the key happens with

530
00:21:39,610 --> 00:21:41,649
a secret that is unique to the hardware

531
00:21:41,649 --> 00:21:44,320
this is a basic foundation of how

532
00:21:44,320 --> 00:21:45,730
the security of embedded systems should be done

533
00:21:45,730 --> 00:21:47,320
and this is  what

534
00:21:47,320 --> 00:21:49,119
we try to promote with usb

535
00:21:49,119 --> 00:21:51,940
armory we try to integrate what

536
00:21:51,940 --> 00:21:53,769
for us is the state of the art of

537
00:21:53,769 --> 00:21:55,389
security  heness of embedded systems what

538
00:21:55,389 --> 00:21:57,759
we test we implement for

539
00:21:57,759 --> 00:21:59,230
all our customers we try to make

540
00:21:59,230 --> 00:22:01,509
this platform the open

541
00:22:01,509 --> 00:22:02,710
source software that revolves around this

542
00:22:02,710 --> 00:22:05,169
platform is the reference to

543
00:22:05,169 --> 00:22:07,659
show how the securebag and

544
00:22:07,659 --> 00:22:09,879
inclusion authentication chains for these

545
00:22:09,879 --> 00:22:12,369
embedded systems  must be

546
00:22:12,369 --> 00:22:13,509
done

547
00:22:13,509 --> 00:22:14,980
this is an example of how this

548
00:22:14,980 --> 00:22:18,700
chain of trust is maintained

549
00:22:18,700 --> 00:22:23,789
we have a laser pointer whose mouse

550
00:22:23,789 --> 00:22:26,409
this is the processor the processor

551
00:22:26,409 --> 00:22:30,629
includes a public key that you want

552
00:22:30,629 --> 00:22:32,590


553
00:22:32,590 --> 00:22:34,269
irreversibly inserted into the processor this process is called

554
00:22:34,269 --> 00:22:37,360
fusi the merging of keys  these

555
00:22:37,360 --> 00:22:39,309
keys are used to authenticate the

556
00:22:39,309 --> 00:22:42,039
bootloader that in systems and it is

557
00:22:42,039 --> 00:22:44,230
typically hobbit the bootloader that the

558
00:22:44,230 --> 00:22:45,879
software component responsible for

559
00:22:45,879 --> 00:22:48,220
launching the linux kernel

560
00:22:48,220 --> 00:22:50,230
also contains public keys

561
00:22:50,230 --> 00:22:53,409
that are used to verify the signature of the

562
00:22:53,409 --> 00:22:55,629
kernel and therefore of the operating system the

563
00:22:55,629 --> 00:22:57,909
system  operating carries u

564
00:22:57,909 --> 00:23:00,009
a the creation procedure that has also

565
00:23:00,009 --> 00:23:01,899
been authenticated so all these

566
00:23:01,899 --> 00:23:04,450
components cannot be

567
00:23:04,450 --> 00:23:06,009
modified unless they are signed with

568
00:23:06,009 --> 00:23:09,100
your keys and the

569
00:23:09,100 --> 00:23:11,009
creation procedure, as authenticated, can

570
00:23:11,009 --> 00:23:14,980
ask the processor to issue

571
00:23:14,980 --> 00:23:17,139
a unique key, not the  rather

572
00:23:17,139 --> 00:23:18,850
the use of this unique key

573
00:23:18,850 --> 00:23:22,059
is never exposed and therefore

574
00:23:22,059 --> 00:23:24,960
the creation procedure asks for the

575
00:23:24,960 --> 00:23:28,149
decryption of the key which will then be

576
00:23:28,149 --> 00:23:31,210
used to unlock the contents of

577
00:23:31,210 --> 00:23:32,649
a practice of one of an

578
00:23:32,649 --> 00:23:35,110
encrypted partition so not in

579
00:23:35,110 --> 00:23:37,059
this way what  we get we get

580
00:23:37,059 --> 00:23:41,350
a chain a chain of phases that

581
00:23:41,350 --> 00:23:43,179
allow you to ensure that what you

582
00:23:43,179 --> 00:23:45,440
perform on this device

583
00:23:45,440 --> 00:23:47,809
can be 100% authenticated

584
00:23:47,809 --> 00:23:52,340
and where there is desire even with

585
00:23:52,340 --> 00:23:55,399
confidentiality then the material

586
00:23:55,399 --> 00:23:58,429
is encrypted trivial examples

587
00:23:58,429 --> 00:24:03,429
can be just a beatle  world

588
00:24:03,429 --> 00:24:05,929
where you want the firmware to be

589
00:24:05,929 --> 00:24:07,220
authenticated

590
00:24:07,220 --> 00:24:08,990
because you want  that the film operates without

591
00:24:08,990 --> 00:24:11,360
any manipulation and you want

592
00:24:11,360 --> 00:24:13,039
your data then your private keys to

593
00:24:13,039 --> 00:24:16,159
be encrypted and

594
00:24:16,159 --> 00:24:18,049
uniquely only for that device

595
00:24:18,049 --> 00:24:19,820
all this is implemented with

596
00:24:19,820 --> 00:24:22,940
open source software and these supply chains

597
00:24:22,940 --> 00:24:25,929
are the same ones that we test and

598
00:24:25,929 --> 00:24:28,070
implement even when  we do

599
00:24:28,070 --> 00:24:30,649
consultancy and therefore here we pour

600
00:24:30,649 --> 00:24:33,889
our know-how in implementing this

601
00:24:33,889 --> 00:24:37,100
chain of trust on in a

602
00:24:37,100 --> 00:24:39,850
completely open source way

603
00:24:39,850 --> 00:24:43,309
all the tools that are used to

604
00:24:43,309 --> 00:24:47,090
create this signed content even if they

605
00:24:47,090 --> 00:24:49,009
are available from the xp

606
00:24:49,009 --> 00:24:50,990
but they are always all blogs

607
00:24:50,990 --> 00:24:53,299
very bad binaries to use you don't know what

608
00:24:53,299 --> 00:24:55,580
they do have all been implemented

609
00:24:55,580 --> 00:24:57,649
with open source software in order to give

610
00:24:57,649 --> 00:25:00,350
transparency if it is actually created as the

611
00:25:00,350 --> 00:25:02,179
signature is

612
00:25:02,179 --> 00:25:05,929
so in one case we have

613
00:25:05,929 --> 00:25:08,269
the tool that allows you to generate the

614
00:25:08,269 --> 00:25:10,340
public key that comes from the  which

615
00:25:10,340 --> 00:25:12,919
is being used because it is

616
00:25:12,919 --> 00:25:15,259
forged inside the pr  ocessor and then

617
00:25:15,259 --> 00:25:16,850
we have the tool that allows you to

618
00:25:16,850 --> 00:25:19,309
sign the bootloader

619
00:25:19,309 --> 00:25:21,740
we also wrote some drivers that

620
00:25:21,740 --> 00:25:26,559
allow you to see we have

621
00:25:35,040 --> 00:25:40,930


622
00:25:40,930 --> 00:25:42,640
epileptics go without saying we blame paolo

623
00:25:42,640 --> 00:25:44,730
not a blame but I recommend

624
00:25:44,730 --> 00:25:49,000
then we have also created and adapted

625
00:25:49,000 --> 00:25:51,810
all the drivers you need  to

626
00:25:51,810 --> 00:25:54,010
use these functions

627
00:25:54,010 --> 00:25:55,450
derived from piave

628
00:25:55,450 --> 00:25:58,120
we have taken old obsolete drivers or

629
00:25:58,120 --> 00:26:00,090
for old kernel versions

630
00:26:00,090 --> 00:26:03,610
we try to switch off and on again it is the

631
00:26:03,610 --> 00:26:11,170
secret of computer science well we have

632
00:26:11,170 --> 00:26:13,180
adapted the drivers of xp we have

633
00:26:13,180 --> 00:26:15,490
taken them we have cleaned them we have made

634
00:26:15,490 --> 00:26:17,080
an ode of  security we have brought them

635
00:26:17,080 --> 00:26:18,940
for versions of the kernel that are not

636
00:26:18,940 --> 00:26:20,560
from the 1800s

637
00:26:20,560 --> 00:26:22,240
so now they all work as

638
00:26:22,240 --> 00:26:24,460
we have written from the simple tools ingo

639
00:26:24,460 --> 00:26:26,350
that allow in a very simple way

640
00:26:26,350 --> 00:26:29,830
to derive keys so an

641
00:26:29,830 --> 00:26:31,630
example for example of this tool

642
00:26:31,630 --> 00:26:33,040
simply asks the processor to

643
00:26:33,040 --> 00:26:34,570
encrypt a  binary blog

644
00:26:34,570 --> 00:26:36,940
using the internal key in the

645
00:26:36,940 --> 00:26:37,600
processor  and

646
00:26:37,600 --> 00:26:39,670
therefore we with this procedure can

647
00:26:39,670 --> 00:26:41,800
create content that can only be

648
00:26:41,800 --> 00:26:44,740
decreed by this single processor and

649
00:26:44,740 --> 00:26:46,480
by no one else these are all the

650
00:26:46,480 --> 00:26:48,190
open source elements that allow us to

651
00:26:48,190 --> 00:26:50,080
integrate the chain that a state before

652
00:26:50,080 --> 00:26:51,790
we have a software called the

653
00:26:51,790 --> 00:26:53,440
internet that allows us  also to

654
00:26:53,440 --> 00:26:56,020
derive some keys and then let's see

655
00:26:56,020 --> 00:26:59,080
if I can show you a simple simple demo

656
00:26:59,080 --> 00:27:01,030


657
00:27:01,030 --> 00:27:03,160
now I'm connecting 1 sb harmony

658
00:27:03,160 --> 00:27:05,880
my

659
00:27:13,320 --> 00:27:15,309
laptop that's what happens

660
00:27:15,309 --> 00:27:16,559
we have

661
00:27:16,559 --> 00:27:20,309
open source which is called interlock I

662
00:27:20,309 --> 00:27:21,629
'm connecting so now I'm

663
00:27:21,629 --> 00:27:22,950
connecting a web application that is

664
00:27:22,950 --> 00:27:25,190
turning on this hard on this

665
00:27:25,190 --> 00:27:26,840
device

666
00:27:26,840 --> 00:27:29,249
this application authenticates

667
00:27:29,249 --> 00:27:32,240
my browser's certificate I

668
00:27:32,240 --> 00:27:36,779
put the name of a volume I put my

669
00:27:36,779 --> 00:27:39,090
password this password will be

670
00:27:39,090 --> 00:27:41,129
used to derive a

671
00:27:41,129 --> 00:27:44,100
unique key for this hardware and at login

672
00:27:44,100 --> 00:27:46,789
an encrypted partition is unlocked

673
00:27:46,789 --> 00:27:49,789
where I

674
00:27:49,789 --> 00:27:53,850
I can simply do multiple things including taking a

675
00:27:53,850 --> 00:27:56,419
file and  drag it and this file is

676
00:27:56,419 --> 00:27:58,669
copied to this

677
00:27:58,669 --> 00:28:01,110
encrypted partition this partition that

678
00:28:01,110 --> 00:28:03,240
will have to be made to live on the micro sd of

679
00:28:03,240 --> 00:28:06,539
this device for 90 dollars

680
00:28:06,539 --> 00:28:08,340
I took a micro sd from half the ground

681
00:28:08,340 --> 00:28:12,629
so sorry for a half for 512gb

682
00:28:12,629 --> 00:28:16,110
so the expansion capabilities for

683
00:28:16,110 --> 00:28:17,509
this reason we put  the micro sd

684
00:28:17,509 --> 00:28:21,389
are are multiple and the file has

685
00:28:21,389 --> 00:28:23,309
now landed on an

686
00:28:23,309 --> 00:28:25,740
encrypted partition another

687
00:28:25,740 --> 00:28:27,779
interlock feature that I can

688
00:28:27,779 --> 00:28:31,440
chat with dinner this software

689
00:28:31,440 --> 00:28:34,110
allows me to transfer files and

690
00:28:34,110 --> 00:28:35,879
have chats with other similar users

691
00:28:35,879 --> 00:28:37,139
this is just a  example of the

692
00:28:37,139 --> 00:28:39,179
applications that can be done

693
00:28:39,179 --> 00:28:40,860
if I log out the

694
00:28:40,860 --> 00:28:42,570
encrypted partition is closed and I can

695
00:28:42,570 --> 00:28:44,360
disconnect the device from my

696
00:28:44,360 --> 00:28:47,460
computer very trivial very very

697
00:28:47,460 --> 00:28:51,809
fast open source application that takes advantage of all

698
00:28:51,809 --> 00:28:54,419
these hardware features to give

699
00:28:54,419 --> 00:28:57,360
you something that with some open software

700
00:28:57,360 --> 00:28:57,960


701
00:28:57,960 --> 00:28:59,460
I would say is  a thousand times better than

702
00:28:59,460 --> 00:29:01,649
any commercial usb stick

703
00:29:01,649 --> 00:29:04,559
photographed that you can have we

704
00:29:04,559 --> 00:29:06,480
also wrote about the software that allows you

705
00:29:06,480 --> 00:29:12,210
to configure ifius for the securebag

706
00:29:12,210 --> 00:29:14,460
because we discovered that the

707
00:29:14,460 --> 00:29:16,559
documentation of the np and the

708
00:29:16,559 --> 00:29:20,460
available tools were a bit heart-pounding

709
00:29:20,460 --> 00:29:22,559
every time you did the closed that

710
00:29:22,559 --> 00:29:24,750
remembers an irreversible operation

711
00:29:24,750 --> 00:29:27,149
something was wrong  and the cp became

712
00:29:27,149 --> 00:29:28,269
a nice brick you have

713
00:29:28,269 --> 00:29:30,159
to try it so we wrote a

714
00:29:30,159 --> 00:29:31,629
software that allows you to

715
00:29:31,629 --> 00:29:34,239
graphically view all the spindles their

716
00:29:34,239 --> 00:29:34,899
content

717
00:29:34,899 --> 00:29:36,999
and easily perform the

718
00:29:36,999 --> 00:29:38,950
closed operation in this example for example

719
00:29:38,950 --> 00:29:42,609
we merge a mac address that for

720
00:29:42,609 --> 00:29:44,499
various needs  there may be a

721
00:29:44,499 --> 00:29:47,649
need to have a unique value on

722
00:29:47,649 --> 00:29:50,289
each gpu with a simple command you can

723
00:29:50,289 --> 00:29:52,509
write the closed read the closed and

724
00:29:52,509 --> 00:29:53,999
so on

725
00:29:53,999 --> 00:29:56,019
also the use of these fues

726
00:29:56,019 --> 00:29:58,330
also allows you to significantly

727
00:29:58,330 --> 00:29:59,950
reduce the attack surface of

728
00:29:59,950 --> 00:30:01,629
these devices and therefore to

729
00:30:01,629 --> 00:30:03,940
preventing attacks such as those that have

730
00:30:03,940 --> 00:30:06,279
been found can also be disa  For

731
00:30:06,279 --> 00:30:07,659
example, bilify all the boot

732
00:30:07,659 --> 00:30:10,269
loader features via usb you can configure the

733
00:30:10,269 --> 00:30:11,829
secure boot yes you can you can disable

734
00:30:11,829 --> 00:30:14,950
the jtag we have a very detailed guide

735
00:30:14,950 --> 00:30:17,049
that applies to all the

736
00:30:17,049 --> 00:30:18,940
processors of the knicks pmx series not

737
00:30:18,940 --> 00:30:20,859
only for the usb armo remember

738
00:30:20,859 --> 00:30:22,629
that all that  that we do which and

739
00:30:22,629 --> 00:30:23,979
can be applied on any

740
00:30:23,979 --> 00:30:25,539
hardware that uses this series of

741
00:30:25,539 --> 00:30:28,509
processors is not only limited to this

742
00:30:28,509 --> 00:30:30,039
and therefore with through these fused it is

743
00:30:30,039 --> 00:30:31,749
also possible to greatly reduce

744
00:30:31,749 --> 00:30:33,309
the attack surface of this

745
00:30:33,309 --> 00:30:35,529
device in addition to make the

746
00:30:35,529 --> 00:30:37,089
creation of images easily

747
00:30:37,089 --> 00:30:38,709
we use a framework called

748
00:30:38,709 --> 00:30:40,389
bild routh which is a framework was

749
00:30:40,389 --> 00:30:43,119
created by atmel we have profiles

750
00:30:43,119 --> 00:30:45,190
that allow with a make line for

751
00:30:45,190 --> 00:30:47,799
i to create the firmware that implements

752
00:30:47,799 --> 00:30:48,940
what we have just shown you

753
00:30:48,940 --> 00:30:50,619
what I have just shown you now

754
00:30:50,619 --> 00:30:54,940
in the demo  also fundamental to

755
00:30:54,940 --> 00:30:57,159
expand liew scales we have

756
00:30:57,159 --> 00:30:59,289
added bluetooth its  if we give the two because

757
00:30:59,289 --> 00:31:00,459
we have added bluetooth we have

758
00:31:00,459 --> 00:31:03,299
added bluetooth because we want to

759
00:31:03,299 --> 00:31:07,389
explore scenarios where it is assumed that the

760
00:31:07,389 --> 00:31:10,959
device to which usb harmony

761
00:31:10,959 --> 00:31:13,419
physically connects with usb can be

762
00:31:13,419 --> 00:31:15,729
completely compromised and therefore we

763
00:31:15,729 --> 00:31:17,409
do not want the password to be

764
00:31:17,409 --> 00:31:20,169
entered with the same keyboard on the

765
00:31:20,169 --> 00:31:23,169
which usb armory is connected to because we want to

766
00:31:23,169 --> 00:31:26,619
open ourselves to a scales where

767
00:31:26,619 --> 00:31:28,539
a weapon noise attack and an untrusted computer maybe

768
00:31:28,539 --> 00:31:30,729
I have to receive a file to that computer and

769
00:31:30,729 --> 00:31:32,589
I don't want the unlocking of the

770
00:31:32,589 --> 00:31:33,879
partition that will have to be done

771
00:31:33,879 --> 00:31:34,899
through that computer

772
00:31:34,899 --> 00:31:36,429
in short we want an out channel  of band

773
00:31:36,429 --> 00:31:39,549
a channel that is different and for this

774
00:31:39,549 --> 00:31:41,729
we have added a bluetooth chip

775
00:31:41,729 --> 00:31:45,489
that in the spirit of the most

776
00:31:45,489 --> 00:31:47,139
complete opening and a chip with a firmware that

777
00:31:47,139 --> 00:31:48,849
can be completely replaced

778
00:31:48,849 --> 00:31:51,399
by the user is a u blox chip

779
00:31:51,399 --> 00:31:54,929
whose film one however  through a procedure it

780
00:31:54,929 --> 00:31:57,839
can be can be completely

781
00:31:57,839 --> 00:32:00,339
arbitrary so it is a stand-alone soc

782
00:32:00,339 --> 00:32:04,749
with a cort  ex m4 and now I show you what

783
00:32:04,749 --> 00:32:07,629
trivially allows

784
00:32:07,629 --> 00:32:09,639
having this functionality

785
00:32:09,639 --> 00:32:11,139
then now I do the second demo

786
00:32:11,139 --> 00:32:13,029
we come if my sacrifice to the gods

787
00:32:13,029 --> 00:32:16,049
of the demo this morning worked

788
00:32:16,049 --> 00:32:19,089
because the demos the conferences you know are

789
00:32:19,089 --> 00:32:21,309
always a big problem

790
00:32:21,309 --> 00:32:26,130
then let's see

791
00:32:26,130 --> 00:32:32,580
then find out  now i'm

792
00:32:32,580 --> 00:32:35,340
connecting to my weapon ii as you can see

793
00:32:35,340 --> 00:32:37,050
i connect as you know it's

794
00:32:37,050 --> 00:32:40,590
a debian without an absolutely standard debian

795
00:32:40,590 --> 00:32:42,480
year this is just to start

796
00:32:42,480 --> 00:32:46,530
the demo then what's happening

797
00:32:46,530 --> 00:32:49,310
right now right now

798
00:32:49,310 --> 00:32:51,680
can you see armory flashing

799
00:32:51,680 --> 00:32:54,770
here there is a blue led that is flashing

800
00:32:54,770 --> 00:32:58,940
then what is happening here

801
00:33:00,140 --> 00:33:01,309
imagine

802
00:33:01,309 --> 00:33:03,470
then attach the armory to the computer and

803
00:33:03,470 --> 00:33:04,549
this is what happens

804
00:33:04,549 --> 00:33:08,990
I take my mobile I launch a very

805
00:33:08,990 --> 00:33:11,539
trivial application that allows me

806
00:33:11,539 --> 00:33:15,279
to enter a password

807
00:33:15,409 --> 00:33:17,990
now I am scanning for

808
00:33:17,990 --> 00:33:24,740
find my device there are 200

809
00:33:24,740 --> 00:33:26,659
active bluetooth devices in this

810
00:33:26,659 --> 00:33:27,259
room

811
00:33:27,259 --> 00:33:29,690
maybe there is f  we will do what I will do

812
00:33:29,690 --> 00:33:32,929
simply I am writing to the lock and

813
00:33:32,929 --> 00:33:37,190
I am sending the password rappan disco

814
00:33:37,190 --> 00:33:40,360
a usb disk has appeared

815
00:33:41,450 --> 00:33:43,429
this is the usb disk but I can use

816
00:33:43,429 --> 00:33:46,399
this drive exactly like

817
00:33:46,399 --> 00:33:50,480
any disk these files now that

818
00:33:50,480 --> 00:33:54,919
I have also sent via phone if

819
00:33:54,919 --> 00:33:58,009
I want to unlock  block the device is

820
00:33:58,009 --> 00:34:03,350
the drive disappears very simple with a

821
00:34:03,350 --> 00:34:06,679
relatively simple script and buy

822
00:34:06,679 --> 00:34:09,109
because I don't know if you know those

823
00:34:09,109 --> 00:34:10,819
usb devices with the keypad that

824
00:34:10,819 --> 00:34:12,589
you take usually have a battery

825
00:34:12,589 --> 00:34:16,609
that already breaks the boxes they cost 200

826
00:34:16,609 --> 00:34:19,280
euros and have 32 gb with this

827
00:34:19,280 --> 00:34:20,839
device you  you can have a process

828
00:34:20,839 --> 00:34:23,599
that you fully control you can

829
00:34:23,599 --> 00:34:26,119
run with 10 microsd and change them you can

830
00:34:26,119 --> 00:34:27,918
do whatever you want and you have

831
00:34:27,918 --> 00:34:30,589
double factor authentication via

832
00:34:30,589 --> 00:34:32,149
two completely different channels and we

833
00:34:32,149 --> 00:34:34,699
are talking about state of the art

834
00:34:34,699 --> 00:34:36,379
security of how it should be done

835
00:34:36,379 --> 00:34:38,869
this is exactly  the ius that for

836
00:34:38,869 --> 00:34:40,819
which this device exists and is one

837
00:34:40,819 --> 00:34:44,060
of many eg  especially on my

838
00:34:44,060 --> 00:34:45,349
windows operating system it does not require

839
00:34:45,349 --> 00:34:47,929
the installation of any driver because

840
00:34:47,929 --> 00:34:49,310
unlike the previous example

841
00:34:49,310 --> 00:34:51,710
where I connected via the web where

842
00:34:51,710 --> 00:34:53,270
a driver is needed to make it talk

843
00:34:53,270 --> 00:34:55,489
to the internet in this case it is just

844
00:34:55,489 --> 00:34:57,710
a very trivial disk no driver

845
00:34:57,710 --> 00:35:00,050
so this  it is the reason why

846
00:35:00,050 --> 00:35:03,140
we have inserted the bluetooth

847
00:35:03,140 --> 00:35:05,750
we also have two external sécure elements

848
00:35:05,750 --> 00:35:08,480
that in theory are not necessary but in

849
00:35:08,480 --> 00:35:12,650
case there will be another nxp bug of the

850
00:35:12,650 --> 00:35:14,150
boot bucket at least we have two

851
00:35:14,150 --> 00:35:14,780
devices

852
00:35:14,780 --> 00:35:17,150
where we can put keys and

853
00:35:17,150 --> 00:35:19,370
protect them imagine yourself as two smart

854
00:35:19,370 --> 00:35:21,400
cards and  we have one of the micro chip

855
00:35:21,400 --> 00:35:24,650
atmel component a 10 c 608 a and one

856
00:35:24,650 --> 00:35:27,080
of the nxp and these external components

857
00:35:27,080 --> 00:35:28,940
also give us the possibility

858
00:35:28,940 --> 00:35:30,350
to protect ourselves against a very

859
00:35:30,350 --> 00:35:31,940
advanced attack that the so-called

860
00:35:31,940 --> 00:35:34,220
firmware downgrade atac because they allow to

861
00:35:34,220 --> 00:35:35,740
have monotonix counters

862
00:35:35,740 --> 00:35:38,000
authenticated that allow our

863
00:35:38,000 --> 00:35:41,030
firmware to check if the firmware is

864
00:35:41,030 --> 00:35:43,910
up  rnato the example which is or a

865
00:35:43,910 --> 00:35:45,590
vulnerable software we do the

866
00:35:45,590 --> 00:35:47,150
firmware upgrade the software is no longer

867
00:35:47,150 --> 00:35:50,630
vulnerable what prevents the

868
00:35:50,630 --> 00:35:52,970
fact that I balances the flash emits

869
00:35:52,970 --> 00:35:54,770
a flash with the old software where

870
00:35:54,770 --> 00:35:56,840
I can exploit this vulnerability

871
00:35:56,840 --> 00:35:58,880
the only way to  protecting oneself from this

872
00:35:58,880 --> 00:36:00,350
case is to have the software

873
00:36:00,350 --> 00:36:03,080
itself control a non-

874
00:36:03,080 --> 00:36:05,120
modifiable counter and this is only possible

875
00:36:05,120 --> 00:36:07,880
if we have an external component where

876
00:36:07,880 --> 00:36:09,620
these conductors can only be

877
00:36:09,620 --> 00:36:11,060
increased in an authenticated way and

878
00:36:11,060 --> 00:36:12,950
this is exactly what these

879
00:36:12,950 --> 00:36:16,850
two components allow for the

880
00:36:16,850 --> 00:36:18,460
functionality that  allow us to

881
00:36:18,460 --> 00:36:21,380
also obtain an

882
00:36:21,380 --> 00:36:24,800
internal third-party security odit on this

883
00:36:24,800 --> 00:36:25,790
system on chip

884
00:36:25,790 --> 00:36:28,040
so let's say that this system is a

885
00:36:28,040 --> 00:36:30,080
chip and its secure

886
00:36:30,080 --> 00:36:33,230
boot implementation I think is one of the most or

887
00:36:33,230 --> 00:36:35,690
tate ones in the world and this is clearly a

888
00:36:35,690 --> 00:36:37,100
benefit also for  whoever uses

889
00:36:37,100 --> 00:36:40,280
this this this putnam for this

890
00:36:40,280 --> 00:36:43,130
I have of you has not identified al  tri

891
00:36:43,130 --> 00:36:44,780
problems in the butron however identified

892
00:36:44,780 --> 00:36:46,220
numerous problems in the drivers of the

893
00:36:46,220 --> 00:36:48,410
fresh in xp that we have solved and also

894
00:36:48,410 --> 00:36:50,120
numerous problems in the boot loader boot

895
00:36:50,120 --> 00:36:52,220
with relative cv is that we have

896
00:36:52,220 --> 00:36:55,220
identified where various software elements

897
00:36:55,220 --> 00:36:58,190
allowed to break that chain of

898
00:36:58,190 --> 00:36:59,930
trust that I have shown you that I have

899
00:36:59,930 --> 00:37:02,420
shown at the beginning there are advisors that

900
00:37:02,420 --> 00:37:04,370
we have published many cuts if you are

901
00:37:04,370 --> 00:37:05,960
interested go and see it because

902
00:37:05,960 --> 00:37:08,060
we say they apply to any

903
00:37:08,060 --> 00:37:09,530
device even completely

904
00:37:09,530 --> 00:37:12,920
disconnected from this specific hardware

905
00:37:12,920 --> 00:37:15,140
where the bootloaders must keep

906
00:37:15,140 --> 00:37:17,480
calm of schematics and pcb layout we are

907
00:37:17,480 --> 00:37:18,580
waiting for

908
00:37:18,580 --> 00:37:20,530
two final certifications within  the

909
00:37:20,530 --> 00:37:22,090
next two weeks

910
00:37:22,090 --> 00:37:24,180
this will allow anyone to

911
00:37:24,180 --> 00:37:26,770
download all the schematics and sources

912
00:37:26,770 --> 00:37:28,810
of this device and also

913
00:37:28,810 --> 00:37:30,570
apply the pre-orders for anyone who wants to

914
00:37:30,570 --> 00:37:33,160
buy this version produced by

915
00:37:33,160 --> 00:37:36,100
us all the documentation is already all

916
00:37:36,100 --> 00:37:37,840
open all the drivers are all

917
00:37:37,840 --> 00:37:39,670
published these drivers are already  in

918
00:37:39,670 --> 00:37:42,880
use d  to from other users who

919
00:37:42,880 --> 00:37:44,950
use the same chips but on other

920
00:37:44,950 --> 00:37:46,840
hardware so I want to emphasize

921
00:37:46,840 --> 00:37:49,750
that the effort the ecosystem that

922
00:37:49,750 --> 00:37:50,890
surrounds this device

923
00:37:50,890 --> 00:37:54,420
is not only functional to usb harmony but

924
00:37:54,420 --> 00:37:56,920
for the whole community of users of

925
00:37:56,920 --> 00:37:59,220
these processors that are  widely

926
00:37:59,220 --> 00:38:02,140
used we see mainly

927
00:38:02,140 --> 00:38:03,700
now we only do odt in the

928
00:38:03,700 --> 00:38:06,220
automotive and avionics field and we see that

929
00:38:06,220 --> 00:38:08,410
at least 50 percent of the devices

930
00:38:08,410 --> 00:38:09,760
we analyze have this type

931
00:38:09,760 --> 00:38:13,240
of processor all the tools to make

932
00:38:13,240 --> 00:38:15,280
spindles increase the boot bucket are

933
00:38:15,280 --> 00:38:16,900
all published

934
00:38:16,900 --> 00:38:19,330
and also the software  interlock that what

935
00:38:19,330 --> 00:38:21,190
I showed you before the demo that

936
00:38:21,190 --> 00:38:23,830
gives you an encrypted frontend via web

937
00:38:23,830 --> 00:38:25,750
and also public and you can also run it

938
00:38:25,750 --> 00:38:27,370
on a ras for the poles on any

939
00:38:27,370 --> 00:38:32,290
hardware you want so this is we have

940
00:38:32,290 --> 00:38:34,840
thirty seconds just perfect timing

941
00:38:34,840 --> 00:38:37,960
this is how clearly  I am here

942
00:38:37,960 --> 00:38:40,810
mainly not for these 45 minutes

943
00:38:40,810 --> 00:38:42,550
but also to show you this

944
00:38:42,550 --> 00:38:47,890
device from v  I therefore encourage you

945
00:38:47,890 --> 00:38:51,250
to if you are interested in contacting me

946
00:38:51,250 --> 00:38:52,630
I will explain everything you want about this

947
00:38:52,630 --> 00:38:55,000
device and thank you very much for

948
00:38:55,000 --> 00:38:56,890
your attention and now I am ready for

949
00:38:56,890 --> 00:38:59,050
any question you may have thanks

950
00:38:59,050 --> 00:38:59,640
millions

951
00:38:59,640 --> 00:39:10,509
[Applause]

952
00:39:13,130 --> 00:39:16,080
a question where are

953
00:39:16,080 --> 00:39:22,080
you here yes if yes  should the card spoil

954
00:39:22,080 --> 00:39:22,590


955
00:39:22,590 --> 00:39:26,790
yes I encrypted the data on the sim

956
00:39:26,790 --> 00:39:29,910
card via micro sd

957
00:39:29,910 --> 00:39:33,660
the micro sd again the processor excuse

958
00:39:33,660 --> 00:39:34,380


959
00:39:34,380 --> 00:39:35,820
if those data are no longer recoverable

960
00:39:35,820 --> 00:39:38,280
in any other way then it depends on how you

961
00:39:38,280 --> 00:39:40,590
want to use the beauty of using

962
00:39:40,590 --> 00:39:42,930
the notions fight who system because  it will

963
00:39:42,930 --> 00:39:44,370
have to make the protections that you can have

964
00:39:44,370 --> 00:39:47,100
more than one key you can have 5 10

965
00:39:47,100 --> 00:39:50,430
20 30 50 100 keys it is not certain that

966
00:39:50,430 --> 00:39:52,920
all these must be derived from

967
00:39:52,920 --> 00:39:55,770
the functionality that grabs the key

968
00:39:55,770 --> 00:39:57,270
in the hardware what I do

969
00:39:57,270 --> 00:39:59,130
personally I keep a nice

970
00:39:59,130 --> 00:40:01,320
key  long of admissions that I print

971
00:40:01,320 --> 00:40:03,120
somewhere that is the second

972
00:40:03,120 --> 00:40:05,550
key of the partition and instead for

973
00:40:05,550 --> 00:40:07,170
normal use uti  I am willing to call some

974
00:40:07,170 --> 00:40:09,150
high ardor in this way

975
00:40:09,150 --> 00:40:11,280
if the device breaks I can take

976
00:40:11,280 --> 00:40:14,100
out the micro sd and make admissions with

977
00:40:14,100 --> 00:40:18,110
a well-defined procedure for other uses

978
00:40:18,110 --> 00:40:20,580
maybe this is not desirable and

979
00:40:20,580 --> 00:40:23,520
so yes the answer is that if

980
00:40:23,520 --> 00:40:25,920
the  device you can no longer access

981
00:40:25,920 --> 00:40:27,960
the data but this is a feature it is not

982
00:40:27,960 --> 00:40:28,470
a bug

983
00:40:28,470 --> 00:40:30,600
the important thing is to give the possibility to

984
00:40:30,600 --> 00:40:33,529
do both

985
00:40:40,590 --> 00:40:43,170
a question rather than a question but

986
00:40:43,170 --> 00:40:44,820
clarification I have seen the

987
00:40:44,820 --> 00:40:47,430
bluetooth module and bluetooth low energy site 6b

988
00:40:47,430 --> 00:40:50,610
l ok  therefore I have seen that several devices

989
00:40:50,610 --> 00:40:52,020
have security problems I imagine

990
00:40:52,020 --> 00:40:54,420
how much then it is a verified read the

991
00:40:54,420 --> 00:40:57,450
way to use the dl is the following it is

992
00:40:57,450 --> 00:40:59,790
always important to give a

993
00:40:59,790 --> 00:41:01,170
communication channel with the modem that does not

994
00:41:01,170 --> 00:41:03,240
allow excessive trash

995
00:41:03,240 --> 00:41:04,440
towards the cpi

996
00:41:04,440 --> 00:41:05,910
we used this  module because

997
00:41:05,910 --> 00:41:07,980
the communication is pure serial there is

998
00:41:07,980 --> 00:41:09,510
no dna there is

999
00:41:09,510 --> 00:41:11,760
no blitz running on our stack

1000
00:41:11,760 --> 00:41:13,440
which is usually a

1001
00:41:13,440 --> 00:41:15,720
very high attack surface  to this is done because we

1002
00:41:15,720 --> 00:41:17,370
assume that there may be a

1003
00:41:17,370 --> 00:41:20,310
procedure unknown to us by the

1004
00:41:20,310 --> 00:41:21,570
manufacturer that allows via

1005
00:41:21,570 --> 00:41:23,040
bluetooth and to put

1006
00:41:23,040 --> 00:41:25,080
arbitrary firmware on the bluetooth module but

1007
00:41:25,080 --> 00:41:26,640
we protect ourselves because towards

1008
00:41:26,640 --> 00:41:28,260
the cpi that an

1009
00:41:28,260 --> 00:41:31,410
extremely narrow serial channel also when

1010
00:41:31,410 --> 00:41:33,210
we  we will do the firmware this

1011
00:41:33,210 --> 00:41:37,260
bluetooth demo done production grade all

1012
00:41:37,260 --> 00:41:38,460
the encryption and

1013
00:41:38,460 --> 00:41:40,050
authentication part of that channel will be

1014
00:41:40,050 --> 00:41:41,910
application will be inside the message and

1015
00:41:41,910 --> 00:41:42,420
bluetooth

1016
00:41:42,420 --> 00:41:46,650
when using modems that are 5g 4g 3g

1017
00:41:46,650 --> 00:41:49,590
gsm bluetooth you must always or wifi

1018
00:41:49,590 --> 00:41:51,930
you must always ignore the security of the

1019
00:41:51,930 --> 00:41:53,760
transport because transport security

1020
00:41:53,760 --> 00:41:54,990
is always something that is

1021
00:41:54,990 --> 00:41:58,230
delegated to standard stack and modems that

1022
00:41:58,230 --> 00:42:00,360
we do not control so we must

1023
00:42:00,360 --> 00:42:01,890
always consider the first hop

1024
00:42:01,890 --> 00:42:04,140
compromised and we

1025
00:42:04,140 --> 00:42:06,030
do the encryption on the top of the packet so

1026
00:42:06,030 --> 00:42:07,380
the security of the bluetooth module

1027
00:42:07,380 --> 00:42:09,450
is relevant for us can  be completely

1028
00:42:09,450 --> 00:42:11,880
compromised in adj  iunta you can put

1029
00:42:11,880 --> 00:42:13,350
the film you want in it

1030
00:42:13,350 --> 00:42:15,600
so this gives even more transparency

1031
00:42:15,600 --> 00:42:18,480
we used the dl it is because we do not have

1032
00:42:18,480 --> 00:42:20,070
this urge to use the

1033
00:42:20,070 --> 00:42:21,960
bluetooth module to send large amounts of

1034
00:42:21,960 --> 00:42:22,320
data

1035
00:42:22,320 --> 00:42:23,730
we only need it for one channel to

1036
00:42:23,730 --> 00:42:26,160
send koman commands in control

1037
00:42:26,160 --> 00:42:27,720
of anything  more then this was the

1038
00:42:27,720 --> 00:42:29,550
reason for choosing the dl not

1039
00:42:29,550 --> 00:42:33,170
something more complicated

