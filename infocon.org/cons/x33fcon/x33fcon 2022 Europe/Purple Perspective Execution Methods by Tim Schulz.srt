1
00:00:01,850 --> 00:00:07,039
[Music]

2
00:00:07,040 --> 00:00:07,839
okay

3
00:00:07,839 --> 00:00:09,280
well thank you so much for having me

4
00:00:09,280 --> 00:00:12,639
today uh i'm excited to speak here at

5
00:00:12,639 --> 00:00:14,480
zeefcon uh sorry i couldn't be there in

6
00:00:14,480 --> 00:00:17,039
person but it looks like a lot of the

7
00:00:17,039 --> 00:00:18,800
conference attendees are having a good

8
00:00:18,800 --> 00:00:21,680
time with my colleagues george ortiz and

9
00:00:21,680 --> 00:00:23,439
chris peacock so it's been good to at

10
00:00:23,439 --> 00:00:24,800
least catch up and see some of those

11
00:00:24,800 --> 00:00:26,400
pictures on twitter

12
00:00:26,400 --> 00:00:28,640
uh today i'm going to get to talk about

13
00:00:28,640 --> 00:00:31,760
one of uh probably the most uh fun

14
00:00:31,760 --> 00:00:33,600
things for me is talking a little bit

15
00:00:33,600 --> 00:00:36,000
more about execution methods and diving

16
00:00:36,000 --> 00:00:38,160
deep onto the specific topic because i

17
00:00:38,160 --> 00:00:39,440
think it's something that's not quite

18
00:00:39,440 --> 00:00:41,520
visited enough uh when we're talking

19
00:00:41,520 --> 00:00:43,440
about some of our purple teaming and how

20
00:00:43,440 --> 00:00:45,680
we're changing some of what we're doing

21
00:00:45,680 --> 00:00:47,120
as we test

22
00:00:47,120 --> 00:00:49,039
so a little bit about myself i'm the

23
00:00:49,039 --> 00:00:50,960
adversary emulation lead at scythe

24
00:00:50,960 --> 00:00:52,960
currently uh i've been here about a year

25
00:00:52,960 --> 00:00:54,879
and a half now prior to my time at

26
00:00:54,879 --> 00:00:57,760
scythe i did security research at sandia

27
00:00:57,760 --> 00:00:59,199
national labs did a little bit of

28
00:00:59,199 --> 00:01:01,920
everything i also worked at mitre which

29
00:01:01,920 --> 00:01:03,199
most people are familiar with because of

30
00:01:03,199 --> 00:01:05,600
miter attack so i worked with that team

31
00:01:05,600 --> 00:01:07,520
uh the attack evaluations team and that

32
00:01:07,520 --> 00:01:09,520
was really where uh getting into the

33
00:01:09,520 --> 00:01:11,200
sort of open source

34
00:01:11,200 --> 00:01:13,840
focus of cyber threat intelligence as

35
00:01:13,840 --> 00:01:15,520
well as tying that to adversary

36
00:01:15,520 --> 00:01:18,000
emulation and some of our testing so

37
00:01:18,000 --> 00:01:20,560
i've uh i've been around in this space

38
00:01:20,560 --> 00:01:23,200
for probably about a decade now and uh

39
00:01:23,200 --> 00:01:25,520
excited to at least share some of what

40
00:01:25,520 --> 00:01:26,799
i've been doing over the past couple

41
00:01:26,799 --> 00:01:27,759
years

42
00:01:27,759 --> 00:01:29,840
so three big things that i hope you'll

43
00:01:29,840 --> 00:01:32,159
take away from this talk is the first of

44
00:01:32,159 --> 00:01:34,880
course is why execution methods are a

45
00:01:34,880 --> 00:01:37,200
hard problem it's why they make security

46
00:01:37,200 --> 00:01:39,680
challenging because they're sort of the

47
00:01:39,680 --> 00:01:42,320
uh the ground floor of everything else

48
00:01:42,320 --> 00:01:44,720
that we build things on uh

49
00:01:44,720 --> 00:01:46,799
second thing would be the mindset for

50
00:01:46,799 --> 00:01:49,439
how you can do some tests and depth of

51
00:01:49,439 --> 00:01:51,680
testing with different execution methods

52
00:01:51,680 --> 00:01:54,720
we often focus on different types of

53
00:01:54,720 --> 00:01:57,600
techniques or and working across miter

54
00:01:57,600 --> 00:01:59,280
attack matrix in this instance and i

55
00:01:59,280 --> 00:02:01,680
really want to focus on trying to drill

56
00:02:01,680 --> 00:02:03,920
down on a few specific ones

57
00:02:03,920 --> 00:02:04,719
and

58
00:02:04,719 --> 00:02:06,560
focus our testing there and then of

59
00:02:06,560 --> 00:02:08,318
course like a lot of talks i want to

60
00:02:08,318 --> 00:02:09,280
make sure that there's a ton of

61
00:02:09,280 --> 00:02:10,959
resources for you to work off of so

62
00:02:10,959 --> 00:02:12,400
regardless of whether you're able to

63
00:02:12,400 --> 00:02:14,480
apply this in an enterprise environment

64
00:02:14,480 --> 00:02:16,800
or you're a student or someone that's

65
00:02:16,800 --> 00:02:18,319
working from home or in your own lab

66
00:02:18,319 --> 00:02:20,480
environment that you still have a lot of

67
00:02:20,480 --> 00:02:22,400
different options to choose from when

68
00:02:22,400 --> 00:02:23,680
you're trying to learn more about this

69
00:02:23,680 --> 00:02:25,200
topic

70
00:02:25,200 --> 00:02:27,920
so what are execution methods so i took

71
00:02:27,920 --> 00:02:31,160
this from

72
00:03:10,080 --> 00:03:13,360
all right let's talk about uh execution

73
00:03:13,360 --> 00:03:16,080
methods and just to give an example here

74
00:03:16,080 --> 00:03:18,400
uh let's talk about process discovery

75
00:03:18,400 --> 00:03:21,200
so process discovery is t1057 for those

76
00:03:21,200 --> 00:03:23,440
of you that aren't familiar with it uh

77
00:03:23,440 --> 00:03:25,519
we there's a bunch of different ways to

78
00:03:25,519 --> 00:03:27,120
execute it and so if you've followed me

79
00:03:27,120 --> 00:03:29,440
you've seen some of this before where

80
00:03:29,440 --> 00:03:30,239
there's

81
00:03:30,239 --> 00:03:31,920
tons of different ways to execute it

82
00:03:31,920 --> 00:03:34,560
we've got task lists get process you can

83
00:03:34,560 --> 00:03:36,799
use other tools and the difference

84
00:03:36,799 --> 00:03:38,480
between all of these even though they're

85
00:03:38,480 --> 00:03:42,400
all tie into the exact same uh technique

86
00:03:42,400 --> 00:03:44,080
is the execution methods whether it's

87
00:03:44,080 --> 00:03:47,680
command line powershell wmi or the

88
00:03:47,680 --> 00:03:50,560
windows native api and so that's one of

89
00:03:50,560 --> 00:03:52,159
the things that when i talk about

90
00:03:52,159 --> 00:03:53,840
variants and i talk about depth and

91
00:03:53,840 --> 00:03:56,400
execution methods it's about how we can

92
00:03:56,400 --> 00:03:58,080
change those and how of course those are

93
00:03:58,080 --> 00:04:00,159
going to impact our ability to detect

94
00:04:00,159 --> 00:04:02,319
them and this is how adversaries have

95
00:04:02,319 --> 00:04:03,200
been

96
00:04:03,200 --> 00:04:05,360
more and more moving towards changing

97
00:04:05,360 --> 00:04:07,280
what they're doing

98
00:04:07,280 --> 00:04:08,480
so

99
00:04:08,480 --> 00:04:10,480
why do they matter

100
00:04:10,480 --> 00:04:12,159
one of the big things that execution

101
00:04:12,159 --> 00:04:14,480
methods give us or give anyone is

102
00:04:14,480 --> 00:04:17,918
flexibility and expertise this is across

103
00:04:17,918 --> 00:04:19,199
across everything whether it's

104
00:04:19,199 --> 00:04:21,199
legitimate use cases system

105
00:04:21,199 --> 00:04:22,720
administrators

106
00:04:22,720 --> 00:04:25,120
operating systems are designed to have a

107
00:04:25,120 --> 00:04:26,800
wide number of use cases and a wide

108
00:04:26,800 --> 00:04:28,639
number of users so when we get to

109
00:04:28,639 --> 00:04:30,479
execution methods just touching on some

110
00:04:30,479 --> 00:04:32,240
of the ones we talked about previously

111
00:04:32,240 --> 00:04:34,479
command line was obviously used first

112
00:04:34,479 --> 00:04:36,880
for systems administration things like

113
00:04:36,880 --> 00:04:39,759
that we then of course have powershell

114
00:04:39,759 --> 00:04:42,000
it's another big one that came along and

115
00:04:42,000 --> 00:04:44,320
so those are some of the ways that we're

116
00:04:44,320 --> 00:04:46,800
able to uh that the operating systems

117
00:04:46,800 --> 00:04:48,080
are able to sort of meet people where

118
00:04:48,080 --> 00:04:50,720
they're at and also provide new features

119
00:04:50,720 --> 00:04:52,800
while of course especially in windows

120
00:04:52,800 --> 00:04:55,759
providing a lot of old legacy features

121
00:04:55,759 --> 00:04:57,600
so that people are able

122
00:04:57,600 --> 00:04:59,840
to continue to leverage it

123
00:04:59,840 --> 00:05:01,919
telemetry inconsistencies and this is

124
00:05:01,919 --> 00:05:04,000
sort of the heart of why execution

125
00:05:04,000 --> 00:05:05,680
methods matter is that getting

126
00:05:05,680 --> 00:05:07,919
information from each of them is a

127
00:05:07,919 --> 00:05:10,160
little bit different and so being able

128
00:05:10,160 --> 00:05:12,479
to write detections relies on that

129
00:05:12,479 --> 00:05:15,199
information and of course more and more

130
00:05:15,199 --> 00:05:17,280
adversaries or red team

131
00:05:17,280 --> 00:05:19,680
research is done in order to try and

132
00:05:19,680 --> 00:05:22,080
find execution methods that don't have

133
00:05:22,080 --> 00:05:24,000
any sort of telemetry or have low

134
00:05:24,000 --> 00:05:26,800
telemetry for defenders to work off of

135
00:05:26,800 --> 00:05:28,960
and so part of that is you have to

136
00:05:28,960 --> 00:05:31,199
determine the intent behind the action

137
00:05:31,199 --> 00:05:33,520
because these are leveraging different

138
00:05:33,520 --> 00:05:35,039
technologies that are part of an

139
00:05:35,039 --> 00:05:36,400
operating system that are there for

140
00:05:36,400 --> 00:05:39,199
legitimate use cases we have people you

141
00:05:39,199 --> 00:05:41,680
have to determine whether or not it is a

142
00:05:41,680 --> 00:05:43,759
typical program at just a windows

143
00:05:43,759 --> 00:05:46,800
application that's doing that specific

144
00:05:46,800 --> 00:05:48,720
behavior or whether it's an adversary

145
00:05:48,720 --> 00:05:50,960
trying to abuse it in the blend end

146
00:05:50,960 --> 00:05:52,960
and then that's where i've been talking

147
00:05:52,960 --> 00:05:54,479
about this and the whole sort of

148
00:05:54,479 --> 00:05:56,080
underlying thing is that operating

149
00:05:56,080 --> 00:05:59,280
systems offer a ton of ways to execute

150
00:05:59,280 --> 00:06:02,160
different code that's really uh and you

151
00:06:02,160 --> 00:06:03,759
can install even more right and you can

152
00:06:03,759 --> 00:06:05,840
continue to extend it and that's

153
00:06:05,840 --> 00:06:07,840
something that i think is is sort of at

154
00:06:07,840 --> 00:06:10,000
the the heart of the problem is that we

155
00:06:10,000 --> 00:06:12,479
have such a large attack surface when

156
00:06:12,479 --> 00:06:14,000
we're talking about execution methods

157
00:06:14,000 --> 00:06:15,840
because there are more and more ways

158
00:06:15,840 --> 00:06:19,280
being invented uh to execute code

159
00:06:19,280 --> 00:06:21,280
to meet developers and technology as it

160
00:06:21,280 --> 00:06:23,840
continues to grow

161
00:06:23,840 --> 00:06:25,520
now a quick roadmap of what we're

162
00:06:25,520 --> 00:06:27,199
covering today we're going to go over a

163
00:06:27,199 --> 00:06:29,280
quick cycle of execution methods as a

164
00:06:29,280 --> 00:06:31,840
whole uh how they sort of build on top

165
00:06:31,840 --> 00:06:33,520
of each other we're going to go over a

166
00:06:33,520 --> 00:06:35,919
bunch of resources on sort of what

167
00:06:35,919 --> 00:06:37,440
you're going to need for testing and

168
00:06:37,440 --> 00:06:38,400
tools

169
00:06:38,400 --> 00:06:39,759
then we're going to dive deep into

170
00:06:39,759 --> 00:06:42,400
windows powershell and the different

171
00:06:42,400 --> 00:06:44,400
execution method variants you can do in

172
00:06:44,400 --> 00:06:46,319
order to sort of thoroughly test it and

173
00:06:46,319 --> 00:06:47,440
then we're going to talk a little bit

174
00:06:47,440 --> 00:06:49,759
about the law bass project and ms build

175
00:06:49,759 --> 00:06:52,160
to sort of close it out

176
00:06:52,160 --> 00:06:54,080
now the cycle of execution methods this

177
00:06:54,080 --> 00:06:56,080
is something that i picked powershell

178
00:06:56,080 --> 00:06:59,520
for sort of my main my main uh examples

179
00:06:59,520 --> 00:07:01,280
here and partially because it's been

180
00:07:01,280 --> 00:07:03,759
sort of so well documented and a lot of

181
00:07:03,759 --> 00:07:05,759
uh people in the space have a pretty

182
00:07:05,759 --> 00:07:07,520
good history of it

183
00:07:07,520 --> 00:07:09,520
so when we are talking about a life

184
00:07:09,520 --> 00:07:11,599
cycle let's talk about how something

185
00:07:11,599 --> 00:07:14,319
comes in uh to being an execution method

186
00:07:14,319 --> 00:07:16,240
part of it is its creation and so

187
00:07:16,240 --> 00:07:18,080
powershell version one was released back

188
00:07:18,080 --> 00:07:19,680
in 2006.

189
00:07:19,680 --> 00:07:21,840
now something to remember though is that

190
00:07:21,840 --> 00:07:23,520
every time something's released doesn't

191
00:07:23,520 --> 00:07:26,319
necessarily mean it's used this was at a

192
00:07:26,319 --> 00:07:27,599
point in powershell's life where you

193
00:07:27,599 --> 00:07:30,479
still had to download and install it and

194
00:07:30,479 --> 00:07:32,720
then it wasn't as widely adapted and so

195
00:07:32,720 --> 00:07:34,800
that's something that comes into sort of

196
00:07:34,800 --> 00:07:36,720
the maturity of each of these different

197
00:07:36,720 --> 00:07:38,960
methods is whether or not they're widely

198
00:07:38,960 --> 00:07:40,720
adopted and so when we look at

199
00:07:40,720 --> 00:07:42,720
powershell version two that was released

200
00:07:42,720 --> 00:07:44,800
three years later it was included in

201
00:07:44,800 --> 00:07:47,759
windows 7 by default now having default

202
00:07:47,759 --> 00:07:50,160
installs is something that is going to

203
00:07:50,160 --> 00:07:52,879
increase your user base by a lot and

204
00:07:52,879 --> 00:07:54,639
that's where we have this intended use

205
00:07:54,639 --> 00:07:55,520
of

206
00:07:55,520 --> 00:07:57,440
powershell through system administrators

207
00:07:57,440 --> 00:07:59,199
that now have this tool that was widely

208
00:07:59,199 --> 00:08:00,720
deployed by default that they could

209
00:08:00,720 --> 00:08:01,919
leverage

210
00:08:01,919 --> 00:08:03,680
now of course the next step is what you

211
00:08:03,680 --> 00:08:05,360
can probably guess the you know

212
00:08:05,360 --> 00:08:06,960
information security community always

213
00:08:06,960 --> 00:08:09,120
has this part in it it's the unintended

214
00:08:09,120 --> 00:08:11,840
use of the execution method and so while

215
00:08:11,840 --> 00:08:14,080
these aren't necessarily the the pure

216
00:08:14,080 --> 00:08:16,319
points uh of where these things turned

217
00:08:16,319 --> 00:08:18,240
right it's key thing to remember is that

218
00:08:18,240 --> 00:08:20,319
research happens before publishing and

219
00:08:20,319 --> 00:08:22,000
so these things typically probably

220
00:08:22,000 --> 00:08:24,960
happen even years before the actual uh

221
00:08:24,960 --> 00:08:27,039
talks but there was a derby contact that

222
00:08:27,039 --> 00:08:28,960
went over powershell and was like oh my

223
00:08:28,960 --> 00:08:31,120
gosh and so that was dave kennedy and

224
00:08:31,120 --> 00:08:34,000
josh kelly back in 2013 and then of

225
00:08:34,000 --> 00:08:34,880
course

226
00:08:34,880 --> 00:08:37,120
empire was one of the big first

227
00:08:37,120 --> 00:08:39,200
well-known command and control projects

228
00:08:39,200 --> 00:08:41,039
that sort of came out and focused on

229
00:08:41,039 --> 00:08:42,719
some of those post exploitation

230
00:08:42,719 --> 00:08:45,120
activities sort of opposed to metasploit

231
00:08:45,120 --> 00:08:46,160
at the time

232
00:08:46,160 --> 00:08:47,920
and so cobalt strike had obviously made

233
00:08:47,920 --> 00:08:51,040
some of those uh just c2 in general a

234
00:08:51,040 --> 00:08:53,120
big topic but powershell empire was sort

235
00:08:53,120 --> 00:08:54,560
of the first one of the first ones that

236
00:08:54,560 --> 00:08:57,200
sort of came out that was used uh

237
00:08:57,200 --> 00:08:58,399
widespread

238
00:08:58,399 --> 00:09:01,440
now with that of course comes more and

239
00:09:01,440 --> 00:09:03,040
more people abusing these systems in

240
00:09:03,040 --> 00:09:05,200
powershell and that is where we get

241
00:09:05,200 --> 00:09:07,920
better logging in telemetry from the

242
00:09:07,920 --> 00:09:10,160
vendor in this case microsoft and so

243
00:09:10,160 --> 00:09:12,320
they had a lot of enhanced logging that

244
00:09:12,320 --> 00:09:14,720
they did in powershells version 3 4 and

245
00:09:14,720 --> 00:09:17,040
5 through the windows management

246
00:09:17,040 --> 00:09:19,200
framework and really the things here

247
00:09:19,200 --> 00:09:21,440
that you might be familiar with are uh

248
00:09:21,440 --> 00:09:23,279
are of course the script block login

249
00:09:23,279 --> 00:09:24,959
we're going to talk about that a lot

250
00:09:24,959 --> 00:09:27,120
like module logging and then of course

251
00:09:27,120 --> 00:09:28,800
the constrained language mode and some

252
00:09:28,800 --> 00:09:31,279
of that so that's really what where we

253
00:09:31,279 --> 00:09:33,519
saw this sort of reaction uh from

254
00:09:33,519 --> 00:09:35,839
microsoft in that case they released an

255
00:09:35,839 --> 00:09:38,399
entire blog post about how you know uh

256
00:09:38,399 --> 00:09:40,560
powershell loves the blue team too and

257
00:09:40,560 --> 00:09:42,080
so you can go check and read through

258
00:09:42,080 --> 00:09:44,320
some of that but the idea was to give

259
00:09:44,320 --> 00:09:48,080
defenders uh an ability to monitor and

260
00:09:48,080 --> 00:09:49,920
try and lock down a lot of powershell's

261
00:09:49,920 --> 00:09:51,360
features

262
00:09:51,360 --> 00:09:53,760
now the next thing is of course people

263
00:09:53,760 --> 00:09:56,080
look for new execution methods whether

264
00:09:56,080 --> 00:09:59,040
it's native api calls uh when doing that

265
00:09:59,040 --> 00:10:01,360
through different methods like c sharp

266
00:10:01,360 --> 00:10:03,120
uh or some of the other red team

267
00:10:03,120 --> 00:10:05,279
research that you've probably seen

268
00:10:05,279 --> 00:10:07,680
but the idea behind this entire life

269
00:10:07,680 --> 00:10:10,160
cycle is that typically this is how

270
00:10:10,160 --> 00:10:12,000
people are going to go through and and

271
00:10:12,000 --> 00:10:14,320
look for things especially when when

272
00:10:14,320 --> 00:10:15,760
you're talking about adversaries are

273
00:10:15,760 --> 00:10:18,079
trying to accomplish a lot of similar

274
00:10:18,079 --> 00:10:20,240
things even across time their methods

275
00:10:20,240 --> 00:10:21,680
just change a little bit and that's

276
00:10:21,680 --> 00:10:23,680
really what it comes down to

277
00:10:23,680 --> 00:10:25,120
so uh

278
00:10:25,120 --> 00:10:26,880
this is a compounding problem because

279
00:10:26,880 --> 00:10:29,120
things keep uh adding to it we're

280
00:10:29,120 --> 00:10:30,640
covering you have to cover all the

281
00:10:30,640 --> 00:10:32,560
previous execution methods

282
00:10:32,560 --> 00:10:35,040
while also tackling new ones that come

283
00:10:35,040 --> 00:10:37,440
out and so that's something that is

284
00:10:37,440 --> 00:10:39,920
challenging for any organization because

285
00:10:39,920 --> 00:10:41,839
it means you need people that at least

286
00:10:41,839 --> 00:10:43,040
are plugged into some of those

287
00:10:43,040 --> 00:10:45,360
communities can understand what are some

288
00:10:45,360 --> 00:10:47,200
of the challenges and of course this is

289
00:10:47,200 --> 00:10:49,120
why development's still happening right

290
00:10:49,120 --> 00:10:50,959
powershell in this case is still a

291
00:10:50,959 --> 00:10:53,360
problem uh even all these years later

292
00:10:53,360 --> 00:10:54,959
because there is active development

293
00:10:54,959 --> 00:10:57,360
there are things that you can still use

294
00:10:57,360 --> 00:10:59,360
and so that's where you have to have a

295
00:10:59,360 --> 00:11:02,160
team or a strategy for tackling some of

296
00:11:02,160 --> 00:11:05,200
those and of course if your data changes

297
00:11:05,200 --> 00:11:07,760
whether you're swapping out edr's or

298
00:11:07,760 --> 00:11:09,279
other defensive vendors this is going to

299
00:11:09,279 --> 00:11:11,440
be something that com like makes your

300
00:11:11,440 --> 00:11:13,839
challenge even harder is how do we make

301
00:11:13,839 --> 00:11:15,519
sure we maintain consistency in our

302
00:11:15,519 --> 00:11:17,600
detections across all these execution

303
00:11:17,600 --> 00:11:19,600
methods while adding and taking away

304
00:11:19,600 --> 00:11:21,040
tools

305
00:11:21,040 --> 00:11:23,279
so the purple perspective here is that

306
00:11:23,279 --> 00:11:25,519
it can be a good thing because execution

307
00:11:25,519 --> 00:11:27,519
methods tend to be what we see

308
00:11:27,519 --> 00:11:29,200
and talk about when we're talking about

309
00:11:29,200 --> 00:11:32,160
adversary maturity and so this provides

310
00:11:32,160 --> 00:11:35,279
defenders with a maturity map for how

311
00:11:35,279 --> 00:11:37,920
they can look at their own testing so

312
00:11:37,920 --> 00:11:40,320
you can use execution methods as a way

313
00:11:40,320 --> 00:11:42,800
to see what level of maturity you're at

314
00:11:42,800 --> 00:11:44,399
and so from like command line to

315
00:11:44,399 --> 00:11:47,120
powershell to windows api calls and

316
00:11:47,120 --> 00:11:49,040
there's a couple in between there too

317
00:11:49,040 --> 00:11:50,320
you can essentially track how

318
00:11:50,320 --> 00:11:52,000
adversaries are

319
00:11:52,000 --> 00:11:54,079
building their own capabilities and then

320
00:11:54,079 --> 00:11:56,480
map that to your ability to

321
00:11:56,480 --> 00:11:58,880
not only track but log and detect off of

322
00:11:58,880 --> 00:12:01,120
the behaviors being executed with those

323
00:12:01,120 --> 00:12:03,920
specific execution methods so there is a

324
00:12:03,920 --> 00:12:06,000
positive here now how do we solve all of

325
00:12:06,000 --> 00:12:06,800
this

326
00:12:06,800 --> 00:12:08,720
uh this is of course a purple team

327
00:12:08,720 --> 00:12:10,880
conference so through purple team

328
00:12:10,880 --> 00:12:12,720
testing so let's next we're going to

329
00:12:12,720 --> 00:12:14,959
talk about different testing methods and

330
00:12:14,959 --> 00:12:16,399
tools

331
00:12:16,399 --> 00:12:18,639
so a little bit of advice here from

332
00:12:18,639 --> 00:12:19,760
somebody who's been doing this for a

333
00:12:19,760 --> 00:12:21,279
little while is focus especially if

334
00:12:21,279 --> 00:12:23,680
you're new to doing either purple team

335
00:12:23,680 --> 00:12:26,000
exercises or to security testing in

336
00:12:26,000 --> 00:12:28,320
general is to focus on one question at a

337
00:12:28,320 --> 00:12:29,120
time

338
00:12:29,120 --> 00:12:30,880
now you have to break your big questions

339
00:12:30,880 --> 00:12:32,240
and the smaller ones and i've got an

340
00:12:32,240 --> 00:12:34,399
example here that we'll walk through but

341
00:12:34,399 --> 00:12:35,920
the big thing here is to pick a

342
00:12:35,920 --> 00:12:37,360
technique and you're not going to

343
00:12:37,360 --> 00:12:40,079
deviate from it for this set of testing

344
00:12:40,079 --> 00:12:41,839
if you're testing execution methods you

345
00:12:41,839 --> 00:12:43,600
want to change one variable at a time

346
00:12:43,600 --> 00:12:45,360
the variable you're changing is the

347
00:12:45,360 --> 00:12:47,279
execution method and not the technique

348
00:12:47,279 --> 00:12:48,240
itself

349
00:12:48,240 --> 00:12:50,399
and so discovery techniques are a really

350
00:12:50,399 --> 00:12:52,800
good starting point because they tend to

351
00:12:52,800 --> 00:12:55,440
have something that you can execute on

352
00:12:55,440 --> 00:12:57,360
on the endpoint for instance powershell

353
00:12:57,360 --> 00:12:59,760
command line wmi that kind of thing it

354
00:12:59,760 --> 00:13:02,399
might have a one or two

355
00:13:02,399 --> 00:13:05,680
command execution where other techniques

356
00:13:05,680 --> 00:13:07,920
are going to require a bit more effort

357
00:13:07,920 --> 00:13:10,560
and so for this one our big question and

358
00:13:10,560 --> 00:13:12,000
this might not seem like a big question

359
00:13:12,000 --> 00:13:13,920
all of you is will process discovery

360
00:13:13,920 --> 00:13:16,880
t1057 generate an alert so let's look at

361
00:13:16,880 --> 00:13:18,639
how we want to break this down

362
00:13:18,639 --> 00:13:20,000
there's a couple different things we

363
00:13:20,000 --> 00:13:21,920
want to focus on here one is how do we

364
00:13:21,920 --> 00:13:24,399
execute the technique uh we'll get into

365
00:13:24,399 --> 00:13:26,079
a little bit about how this can get more

366
00:13:26,079 --> 00:13:28,639
complicated but overall part of the

367
00:13:28,639 --> 00:13:30,800
thing here is making sure that you have

368
00:13:30,800 --> 00:13:32,560
the current skills and expertise to

369
00:13:32,560 --> 00:13:34,560
execute it now for something like

370
00:13:34,560 --> 00:13:36,720
process discovery or the other discovery

371
00:13:36,720 --> 00:13:38,959
techniques they're a great way to start

372
00:13:38,959 --> 00:13:41,040
because they don't take a whole lot here

373
00:13:41,040 --> 00:13:43,199
of course you can execute it

374
00:13:43,199 --> 00:13:44,959
in fact a lot of them are used by

375
00:13:44,959 --> 00:13:47,680
programs so that it is even going to

376
00:13:47,680 --> 00:13:49,440
allow you to execute it uh through

377
00:13:49,440 --> 00:13:51,120
potential uh

378
00:13:51,120 --> 00:13:53,120
protections and those new mechanisms

379
00:13:53,120 --> 00:13:55,760
that microsoft's put into powershell

380
00:13:55,760 --> 00:13:57,440
the other thing and this is going to be

381
00:13:57,440 --> 00:13:58,639
where uh

382
00:13:58,639 --> 00:14:00,079
it's going to take some time effort and

383
00:14:00,079 --> 00:14:02,240
energy is what artifacts are generated

384
00:14:02,240 --> 00:14:04,959
on the endpoint in this case uh by what

385
00:14:04,959 --> 00:14:06,480
you're executing in the course of

386
00:14:06,480 --> 00:14:08,320
process discovery it'll depend on how

387
00:14:08,320 --> 00:14:10,240
we're executing it but this is where you

388
00:14:10,240 --> 00:14:12,399
need to at least be thinking of what are

389
00:14:12,399 --> 00:14:14,000
some of the things that happen when i

390
00:14:14,000 --> 00:14:15,440
type in that command

391
00:14:15,440 --> 00:14:17,680
and then of course what changes can you

392
00:14:17,680 --> 00:14:20,399
make that would potentially impact that

393
00:14:20,399 --> 00:14:21,279
alert

394
00:14:21,279 --> 00:14:23,440
and then going over to what is probably

395
00:14:23,440 --> 00:14:25,279
a little bit more on the detection side

396
00:14:25,279 --> 00:14:26,800
is where are you going to get your data

397
00:14:26,800 --> 00:14:28,399
what's that data source you have for

398
00:14:28,399 --> 00:14:31,040
your execution method uh and of course

399
00:14:31,040 --> 00:14:32,560
being able to correlate that with other

400
00:14:32,560 --> 00:14:34,639
data this gets more into that last point

401
00:14:34,639 --> 00:14:36,399
which is analysis and how much you want

402
00:14:36,399 --> 00:14:38,000
to be able to do versus being able to

403
00:14:38,000 --> 00:14:40,079
just see that you have the data that

404
00:14:40,079 --> 00:14:42,240
you're collecting and depending on where

405
00:14:42,240 --> 00:14:44,480
you are in this in sort of your own

406
00:14:44,480 --> 00:14:46,639
testing maturity process you might not

407
00:14:46,639 --> 00:14:48,160
be able to answer all these and that's

408
00:14:48,160 --> 00:14:50,320
okay i just want to at least put these

409
00:14:50,320 --> 00:14:51,680
out there as this is a way that you can

410
00:14:51,680 --> 00:14:53,120
break down that big question into

411
00:14:53,120 --> 00:14:54,480
smaller ones that you need to tackle

412
00:14:54,480 --> 00:14:56,320
individually

413
00:14:56,320 --> 00:14:58,480
now our testing setup is going to have

414
00:14:58,480 --> 00:15:00,880
three key components here an environment

415
00:15:00,880 --> 00:15:02,639
uh and of course using something like

416
00:15:02,639 --> 00:15:04,720
the cloud is is what a lot of testers

417
00:15:04,720 --> 00:15:06,160
are moving to at least for standing up

418
00:15:06,160 --> 00:15:07,680
test beds and i'll talk about those a

419
00:15:07,680 --> 00:15:09,680
little bit in a minute you of course

420
00:15:09,680 --> 00:15:11,440
need to collect data from that

421
00:15:11,440 --> 00:15:13,680
environment and so data collection tools

422
00:15:13,680 --> 00:15:15,440
some of them are can be built in other

423
00:15:15,440 --> 00:15:18,079
ones are specific projects and then of

424
00:15:18,079 --> 00:15:19,440
course the last thing is our data

425
00:15:19,440 --> 00:15:21,440
generation and that's really how these

426
00:15:21,440 --> 00:15:23,839
things break down we often times think

427
00:15:23,839 --> 00:15:25,440
of it in red team tools or blue team

428
00:15:25,440 --> 00:15:26,959
tools or things like that but at its

429
00:15:26,959 --> 00:15:28,720
core that's really what we're doing in

430
00:15:28,720 --> 00:15:29,839
an environment is we're trying to

431
00:15:29,839 --> 00:15:32,639
generate data for us to work off of

432
00:15:32,639 --> 00:15:35,759
now test environments if you are working

433
00:15:35,759 --> 00:15:37,279
at an enterprise is ideal your

434
00:15:37,279 --> 00:15:39,199
production environment because you want

435
00:15:39,199 --> 00:15:41,199
all that noise you want all those things

436
00:15:41,199 --> 00:15:42,800
in play because you may find out that

437
00:15:42,800 --> 00:15:44,800
the execution method you're testing is

438
00:15:44,800 --> 00:15:46,880
used all across your environment and

439
00:15:46,880 --> 00:15:48,240
that is going to make it really

440
00:15:48,240 --> 00:15:50,560
difficult in order uh to write

441
00:15:50,560 --> 00:15:53,600
detections uh just in a vacuum if you're

442
00:15:53,600 --> 00:15:55,839
in your own test bed now if you're not

443
00:15:55,839 --> 00:15:57,759
of course doing able to do it in your

444
00:15:57,759 --> 00:15:59,360
own production environment there's a lot

445
00:15:59,360 --> 00:16:01,040
of other options and these continue to

446
00:16:01,040 --> 00:16:03,360
grow which is actually great because it

447
00:16:03,360 --> 00:16:05,040
provides a lot of opportunities for more

448
00:16:05,040 --> 00:16:08,880
and more people to uh to learn about how

449
00:16:08,880 --> 00:16:11,199
how enterprise networks work and how

450
00:16:11,199 --> 00:16:13,199
testing can work in them so virtual

451
00:16:13,199 --> 00:16:15,360
machines cyber ranges that kind of thing

452
00:16:15,360 --> 00:16:17,120
cloud providers has already went over

453
00:16:17,120 --> 00:16:19,680
are sort of those key uh key components

454
00:16:19,680 --> 00:16:21,120
when you're looking at building a

455
00:16:21,120 --> 00:16:22,959
different test environments now i've got

456
00:16:22,959 --> 00:16:24,480
a couple here

457
00:16:24,480 --> 00:16:26,480
that i'll i'll talk to you attack range

458
00:16:26,480 --> 00:16:28,160
by splunk this has been a really popular

459
00:16:28,160 --> 00:16:29,600
one that's continued to grow and be

460
00:16:29,600 --> 00:16:31,440
supported and this sets up sort of

461
00:16:31,440 --> 00:16:33,759
everything for you uh so this sets up

462
00:16:33,759 --> 00:16:35,440
your data collectors this sets up your

463
00:16:35,440 --> 00:16:36,399
uh

464
00:16:36,399 --> 00:16:38,480
your data generators and of course gives

465
00:16:38,480 --> 00:16:40,079
you the environment it does require a

466
00:16:40,079 --> 00:16:42,399
combination of virtual machines and

467
00:16:42,399 --> 00:16:44,560
cloud infrastructure so this is one of

468
00:16:44,560 --> 00:16:46,000
those you know bring your own credit

469
00:16:46,000 --> 00:16:49,120
card uh in order to set set some of this

470
00:16:49,120 --> 00:16:50,800
up and that's when we're talking about

471
00:16:50,800 --> 00:16:52,480
these cloud environments a lot of times

472
00:16:52,480 --> 00:16:54,079
that is what you have to do you're

473
00:16:54,079 --> 00:16:55,440
setting up the environment in your own

474
00:16:55,440 --> 00:16:57,360
personal cloud account so you can do

475
00:16:57,360 --> 00:16:59,040
testing but i would say watch out for

476
00:16:59,040 --> 00:17:01,279
that bill uh at the end of the month

477
00:17:01,279 --> 00:17:03,440
because there's a lot of stories online

478
00:17:03,440 --> 00:17:05,199
of people that forget that they leave

479
00:17:05,199 --> 00:17:06,959
something up and then

480
00:17:06,959 --> 00:17:08,160
have a lot of money that they have to

481
00:17:08,160 --> 00:17:09,520
spend

482
00:17:09,520 --> 00:17:11,439
game of active directory this was also

483
00:17:11,439 --> 00:17:13,599
recently updated by orange cyber defense

484
00:17:13,599 --> 00:17:15,679
they've released version two and so this

485
00:17:15,679 --> 00:17:17,760
is a intentionally vulnerable active

486
00:17:17,760 --> 00:17:19,839
directory setup and the idea behind this

487
00:17:19,839 --> 00:17:22,000
is looking at the

488
00:17:22,000 --> 00:17:23,599
the types of environments you want to

489
00:17:23,599 --> 00:17:25,199
test on and the types of execution

490
00:17:25,199 --> 00:17:26,480
methods you want to test active

491
00:17:26,480 --> 00:17:28,079
directory could be a key component to

492
00:17:28,079 --> 00:17:30,000
some of that so setting up some of these

493
00:17:30,000 --> 00:17:32,160
ranges allows for it detection lab is

494
00:17:32,160 --> 00:17:34,480
another really popular one that came out

495
00:17:34,480 --> 00:17:37,840
by chris long uh and this is has a it's

496
00:17:37,840 --> 00:17:39,600
probably the most censored environment

497
00:17:39,600 --> 00:17:41,120
out of everything here

498
00:17:41,120 --> 00:17:42,960
and that's something that of course

499
00:17:42,960 --> 00:17:44,400
people have used if you are trying to

500
00:17:44,400 --> 00:17:46,559
figure out exactly what artifacts get

501
00:17:46,559 --> 00:17:47,600
generated

502
00:17:47,600 --> 00:17:49,679
now if you've never used it before a

503
00:17:49,679 --> 00:17:51,840
word of caution here is that if you

504
00:17:51,840 --> 00:17:54,240
start doing too many uh things at once

505
00:17:54,240 --> 00:17:55,679
you're going to get a flood of data and

506
00:17:55,679 --> 00:17:56,960
you're not going to know necessarily

507
00:17:56,960 --> 00:18:00,000
what to look for so again keeping your

508
00:18:00,000 --> 00:18:01,919
testing small if you're using detection

509
00:18:01,919 --> 00:18:03,280
lab for the first time is going to be

510
00:18:03,280 --> 00:18:04,320
key

511
00:18:04,320 --> 00:18:06,640
now there's uh snap labs which is now

512
00:18:06,640 --> 00:18:08,640
part of immersive labs uh also has

513
00:18:08,640 --> 00:18:10,160
active directory ranges they have a

514
00:18:10,160 --> 00:18:12,160
community edition where you again can

515
00:18:12,160 --> 00:18:13,919
plug in your own credentials and they

516
00:18:13,919 --> 00:18:16,720
will uh they essentially have all these

517
00:18:16,720 --> 00:18:18,640
a lot of these things templated out so

518
00:18:18,640 --> 00:18:20,240
you can just click deploy and they'll

519
00:18:20,240 --> 00:18:21,360
they'll host it on your own

520
00:18:21,360 --> 00:18:23,120
infrastructure so it's kind of a cool

521
00:18:23,120 --> 00:18:25,760
way to set it up and then the last thing

522
00:18:25,760 --> 00:18:28,080
here is a book and that's uh building

523
00:18:28,080 --> 00:18:29,919
virtual machine labs a hands-on guide by

524
00:18:29,919 --> 00:18:32,559
tony robinson and this walks through if

525
00:18:32,559 --> 00:18:33,919
you've never built virtual machines

526
00:18:33,919 --> 00:18:35,440
before you're just interested in

527
00:18:35,440 --> 00:18:36,960
learning more about the depth that you

528
00:18:36,960 --> 00:18:38,559
can customize and how you can build some

529
00:18:38,559 --> 00:18:40,400
of these environments yourself that's a

530
00:18:40,400 --> 00:18:42,480
good uh starting point

531
00:18:42,480 --> 00:18:44,080
now let's talk about data generators

532
00:18:44,080 --> 00:18:45,760
these three questions are the big things

533
00:18:45,760 --> 00:18:48,240
that i already talked to earlier

534
00:18:48,240 --> 00:18:50,559
and the first the first and last are

535
00:18:50,559 --> 00:18:52,640
going to be your big things here because

536
00:18:52,640 --> 00:18:54,320
how to execute the technique just

537
00:18:54,320 --> 00:18:56,000
knowing how you're able to execute it

538
00:18:56,000 --> 00:18:59,200
with that tool as well as what changes

539
00:18:59,200 --> 00:19:01,360
and customizations can you make it's not

540
00:19:01,360 --> 00:19:02,640
always something you're going to be able

541
00:19:02,640 --> 00:19:04,640
to there's there's changes that might be

542
00:19:04,640 --> 00:19:06,799
limited because of how the tools built

543
00:19:06,799 --> 00:19:08,080
so that's something that you've got to

544
00:19:08,080 --> 00:19:10,000
think of or at least

545
00:19:10,000 --> 00:19:11,600
test out and try out when you're going

546
00:19:11,600 --> 00:19:13,360
through your testing

547
00:19:13,360 --> 00:19:15,200
now there's a bunch of different ones

548
00:19:15,200 --> 00:19:16,559
i'll give a shout out here to the c2

549
00:19:16,559 --> 00:19:18,160
matrix that's sort of an aggregation of

550
00:19:18,160 --> 00:19:20,160
a ton of different projects

551
00:19:20,160 --> 00:19:22,400
sans also released a slingshot vm that's

552
00:19:22,400 --> 00:19:24,720
a c2 matrix edition that has a bunch of

553
00:19:24,720 --> 00:19:26,880
those uh commanding controls

554
00:19:26,880 --> 00:19:28,240
automatically set up for you because

555
00:19:28,240 --> 00:19:30,480
some of them do take builds

556
00:19:30,480 --> 00:19:32,640
and then you can just work from that so

557
00:19:32,640 --> 00:19:34,400
sort of ease of deployment that might be

558
00:19:34,400 --> 00:19:36,640
one way to do it now atomic red team is

559
00:19:36,640 --> 00:19:38,320
probably the most well-known data

560
00:19:38,320 --> 00:19:40,480
generator because it is probably the

561
00:19:40,480 --> 00:19:43,200
most straightforward to use although

562
00:19:43,200 --> 00:19:45,760
something to mention is of course uh if

563
00:19:45,760 --> 00:19:46,960
you're not if you're just using an

564
00:19:46,960 --> 00:19:48,960
atomic red team and sort of copy pasting

565
00:19:48,960 --> 00:19:51,280
off of that or use you may not generate

566
00:19:51,280 --> 00:19:53,120
network traffic which might be something

567
00:19:53,120 --> 00:19:54,720
that is again important to your

568
00:19:54,720 --> 00:19:57,919
detection for your execution method

569
00:19:57,919 --> 00:19:59,840
caldera by miter it's another big one

570
00:19:59,840 --> 00:20:02,000
that's a personal project that i i

571
00:20:02,000 --> 00:20:04,000
really like uh because i worked on it

572
00:20:04,000 --> 00:20:05,440
somewhere was that miter and it was sort

573
00:20:05,440 --> 00:20:06,320
of

574
00:20:06,320 --> 00:20:08,400
something i really enjoyed uh purple

575
00:20:08,400 --> 00:20:10,400
sharp i think mauricio talked earlier

576
00:20:10,400 --> 00:20:12,480
today and maybe even highlighted purple

577
00:20:12,480 --> 00:20:14,720
sharp some so i'll give a shout out

578
00:20:14,720 --> 00:20:16,640
shout out to him and to the project

579
00:20:16,640 --> 00:20:18,400
there it's another one to check out and

580
00:20:18,400 --> 00:20:20,159
then to continue on with a book

581
00:20:20,159 --> 00:20:22,480
recommendation uh there's black cat

582
00:20:22,480 --> 00:20:25,200
python and black hat go on by no starch

583
00:20:25,200 --> 00:20:27,120
press walk you through how to create a

584
00:20:27,120 --> 00:20:28,559
command and control framework with

585
00:20:28,559 --> 00:20:30,960
either python or go so that you're able

586
00:20:30,960 --> 00:20:33,840
to see exactly how things work and you

587
00:20:33,840 --> 00:20:35,440
are essentially writing some of the code

588
00:20:35,440 --> 00:20:36,640
that's going to do that date of

589
00:20:36,640 --> 00:20:38,880
generation so depending on what level

590
00:20:38,880 --> 00:20:40,159
you're trying to learn whether you're

591
00:20:40,159 --> 00:20:41,840
trying to just get something done

592
00:20:41,840 --> 00:20:43,520
quickly or build your own there's a

593
00:20:43,520 --> 00:20:45,440
whole bunch of options here pick one or

594
00:20:45,440 --> 00:20:47,520
two and try them out i think that's more

595
00:20:47,520 --> 00:20:48,640
important than trying to pick the

596
00:20:48,640 --> 00:20:50,720
perfect one

597
00:20:50,720 --> 00:20:52,799
now data collection again we went over

598
00:20:52,799 --> 00:20:55,440
these uh and this is just to understand

599
00:20:55,440 --> 00:20:56,640
how are you going to be getting this

600
00:20:56,640 --> 00:20:59,520
data that you're you're testing in

601
00:20:59,520 --> 00:21:00,720
and so there's a couple of different

602
00:21:00,720 --> 00:21:02,080
things here if you are in that

603
00:21:02,080 --> 00:21:04,720
production environment and edr or other

604
00:21:04,720 --> 00:21:06,559
production tooling are going to give you

605
00:21:06,559 --> 00:21:08,480
a lot of data already now if you're

606
00:21:08,480 --> 00:21:10,320
missing some it might be as simple as

607
00:21:10,320 --> 00:21:11,840
turning on a feature instead of having

608
00:21:11,840 --> 00:21:14,240
to install something completely new

609
00:21:14,240 --> 00:21:15,600
and this is where i mentioned before

610
00:21:15,600 --> 00:21:18,240
that for lab environments leveraging uh

611
00:21:18,240 --> 00:21:20,080
detection lab or attack range is

612
00:21:20,080 --> 00:21:21,840
something that will automatically answer

613
00:21:21,840 --> 00:21:23,840
from in it for you uh so it has a bunch

614
00:21:23,840 --> 00:21:26,400
of sensors already they also on the

615
00:21:26,400 --> 00:21:28,559
pages for the projects give you a list

616
00:21:28,559 --> 00:21:30,400
of the different technologies so that's

617
00:21:30,400 --> 00:21:32,080
something that you can of course uh

618
00:21:32,080 --> 00:21:33,919
leverage now if you're building your own

619
00:21:33,919 --> 00:21:35,520
or if you're working in your own work

620
00:21:35,520 --> 00:21:37,600
environment everyone talks about sysmon

621
00:21:37,600 --> 00:21:39,200
and cismond is great

622
00:21:39,200 --> 00:21:41,440
but a lot of organizations still haven't

623
00:21:41,440 --> 00:21:44,159
deployed it widely so edr's essentially

624
00:21:44,159 --> 00:21:45,520
use uh

625
00:21:45,520 --> 00:21:47,280
similar collection methods to it so it's

626
00:21:47,280 --> 00:21:48,880
a it's a good way to at least get

627
00:21:48,880 --> 00:21:51,039
started and of course these are the two

628
00:21:51,039 --> 00:21:53,280
major recommendations swift on security

629
00:21:53,280 --> 00:21:56,159
and then olaf's uh modular sysmon

630
00:21:56,159 --> 00:21:58,080
project are both really really good

631
00:21:58,080 --> 00:21:59,840
places to start if you haven't used

632
00:21:59,840 --> 00:22:01,760
sysmon before

633
00:22:01,760 --> 00:22:03,600
so and then the last thing i want to

634
00:22:03,600 --> 00:22:05,280
talk about here is of course network

635
00:22:05,280 --> 00:22:07,120
data this is something that a lot of

636
00:22:07,120 --> 00:22:09,360
what we're going to talk about and test

637
00:22:09,360 --> 00:22:12,320
on is the host but network data can

638
00:22:12,320 --> 00:22:14,720
become a key element when you are

639
00:22:14,720 --> 00:22:16,159
writing your detections in your

640
00:22:16,159 --> 00:22:18,240
environment so this is something that

641
00:22:18,240 --> 00:22:20,640
it's going to depend on what sort of

642
00:22:20,640 --> 00:22:23,039
insights you have and this is going to

643
00:22:23,039 --> 00:22:24,720
be your your mileage may vary depending

644
00:22:24,720 --> 00:22:27,280
on your setup but as you are maturing

645
00:22:27,280 --> 00:22:28,960
and learning more about this if you are

646
00:22:28,960 --> 00:22:31,200
building your own test bed linking and

647
00:22:31,200 --> 00:22:33,520
correlating both the host-based uh

648
00:22:33,520 --> 00:22:35,840
information and the network base is

649
00:22:35,840 --> 00:22:37,280
going to be key

650
00:22:37,280 --> 00:22:39,679
and so you have the zeek project is one

651
00:22:39,679 --> 00:22:42,640
of those uh formerly bro and then of

652
00:22:42,640 --> 00:22:44,159
course this is something i just like to

653
00:22:44,159 --> 00:22:45,600
talk about the data collectors because

654
00:22:45,600 --> 00:22:47,520
the elk stack is pretty popular and so

655
00:22:47,520 --> 00:22:49,280
you have all the beats

656
00:22:49,280 --> 00:22:51,360
so win log beats is one one of those

657
00:22:51,360 --> 00:22:54,000
data collection methods

658
00:22:54,000 --> 00:22:56,400
now as far as when you start maturing

659
00:22:56,400 --> 00:22:58,320
and get to the point where you're beyond

660
00:22:58,320 --> 00:23:00,000
data collection and you want to do some

661
00:23:00,000 --> 00:23:02,559
of that analysis uh the key question

662
00:23:02,559 --> 00:23:04,640
here is what data can you group together

663
00:23:04,640 --> 00:23:06,640
that sort of improves your analysis or

664
00:23:06,640 --> 00:23:09,679
might allow you to make uh make a

665
00:23:09,679 --> 00:23:11,360
detection that says this is for sure

666
00:23:11,360 --> 00:23:13,840
malicious uh or reduces the false

667
00:23:13,840 --> 00:23:15,840
positive rate that you have to deal with

668
00:23:15,840 --> 00:23:18,080
and so that's where you enrich the data

669
00:23:18,080 --> 00:23:20,240
that you already have maybe uh it's a

670
00:23:20,240 --> 00:23:21,360
specific

671
00:23:21,360 --> 00:23:24,159
uh process that executes and then is

672
00:23:24,159 --> 00:23:25,840
paired with network data so you

673
00:23:25,840 --> 00:23:27,679
understand at least what what is that

674
00:23:27,679 --> 00:23:30,080
host name or uh url that it's calling

675
00:23:30,080 --> 00:23:32,000
out to those types of things can give

676
00:23:32,000 --> 00:23:34,559
you more information than something

677
00:23:34,559 --> 00:23:37,039
that's sort of isolated and by itself

678
00:23:37,039 --> 00:23:39,039
now there's a couple of things here uh

679
00:23:39,039 --> 00:23:41,600
security onion is a big one that's that

680
00:23:41,600 --> 00:23:44,159
is very popular and then the elk stack

681
00:23:44,159 --> 00:23:45,520
as i mentioned before is something that

682
00:23:45,520 --> 00:23:47,679
has been built on a lot and so i'll give

683
00:23:47,679 --> 00:23:49,679
a shout out to uh you know we've seen

684
00:23:49,679 --> 00:23:52,240
the hulk um although i put the sans elk

685
00:23:52,240 --> 00:23:54,640
stack because it is more uh recently

686
00:23:54,640 --> 00:23:56,400
updated and then i want to give a shout

687
00:23:56,400 --> 00:23:58,559
out to outflank for red elk which is

688
00:23:58,559 --> 00:24:02,000
sort of uh a red team view of the elk

689
00:24:02,000 --> 00:24:03,679
stack and sort of doing some of that

690
00:24:03,679 --> 00:24:06,159
offensive monitoring which i think uh

691
00:24:06,159 --> 00:24:07,679
this was sort of the first time that

692
00:24:07,679 --> 00:24:10,159
that came out that uh a project came out

693
00:24:10,159 --> 00:24:11,760
publicly that talked about doing some

694
00:24:11,760 --> 00:24:14,159
more data analysis uh for red teams

695
00:24:14,159 --> 00:24:15,520
which i think is really good so that's

696
00:24:15,520 --> 00:24:16,640
why i wanted to highlight that

697
00:24:16,640 --> 00:24:18,640
specifically

698
00:24:18,640 --> 00:24:20,400
now alert generation this is where

699
00:24:20,400 --> 00:24:23,039
things start to uh there's not as many

700
00:24:23,039 --> 00:24:25,440
free resource sources out there

701
00:24:25,440 --> 00:24:27,600
edrs have varying degrees out of the box

702
00:24:27,600 --> 00:24:29,120
it just depends on the vendor and your

703
00:24:29,120 --> 00:24:32,080
setup but sigma has become a massive

704
00:24:32,080 --> 00:24:34,159
project uh by florian

705
00:24:34,159 --> 00:24:35,600
and so that's something i just want to

706
00:24:35,600 --> 00:24:38,000
give a shout out there and so you can

707
00:24:38,000 --> 00:24:40,400
also port those sigma rules to other

708
00:24:40,400 --> 00:24:42,799
formats and he also has built his own

709
00:24:42,799 --> 00:24:45,440
edr that has a community edition so that

710
00:24:45,440 --> 00:24:47,279
will tell you at least what sigma rules

711
00:24:47,279 --> 00:24:49,200
you triggered with some of your uh

712
00:24:49,200 --> 00:24:51,840
different testing and then elastic has

713
00:24:51,840 --> 00:24:53,440
actually released their detection rules

714
00:24:53,440 --> 00:24:55,279
and those are also widely available so

715
00:24:55,279 --> 00:24:57,120
when we're talking about detections for

716
00:24:57,120 --> 00:24:59,279
some of these different methods we want

717
00:24:59,279 --> 00:25:02,960
to look at uh look at those

718
00:25:02,960 --> 00:25:05,520
now let's dive let's start diving into

719
00:25:05,520 --> 00:25:06,799
how you would test something like

720
00:25:06,799 --> 00:25:08,240
powershell

721
00:25:08,240 --> 00:25:10,320
and powershell is still a problem as i

722
00:25:10,320 --> 00:25:12,880
mentioned in 2022

723
00:25:12,880 --> 00:25:14,400
the way we're gonna execute it for this

724
00:25:14,400 --> 00:25:16,559
test and sort of talking through it is

725
00:25:16,559 --> 00:25:19,279
with get process through atomic red team

726
00:25:19,279 --> 00:25:21,440
test number three uh and so i've got

727
00:25:21,440 --> 00:25:22,880
links there at the bottom if you wanted

728
00:25:22,880 --> 00:25:25,120
to try and follow along but the key

729
00:25:25,120 --> 00:25:27,120
thing here again is now we know how

730
00:25:27,120 --> 00:25:28,960
we're executing it following through all

731
00:25:28,960 --> 00:25:30,880
of those questions looking at how are we

732
00:25:30,880 --> 00:25:32,320
going to get information from that

733
00:25:32,320 --> 00:25:35,039
execution method well we have sysmon

734
00:25:35,039 --> 00:25:36,799
installed so we have sysmon event id

735
00:25:36,799 --> 00:25:38,400
once we're going to be spawning a new

736
00:25:38,400 --> 00:25:40,799
process as well as having something like

737
00:25:40,799 --> 00:25:43,200
script block blogging uh which might be

738
00:25:43,200 --> 00:25:46,640
overkill for this specific uh technique

739
00:25:46,640 --> 00:25:48,640
but it's important because of some of

740
00:25:48,640 --> 00:25:50,320
the things we're gonna do a little bit

741
00:25:50,320 --> 00:25:51,360
later

742
00:25:51,360 --> 00:25:53,679
and then looking at this sort of asking

743
00:25:53,679 --> 00:25:55,440
ourselves the question is what pieces

744
00:25:55,440 --> 00:25:57,760
are missing uh you know do we have

745
00:25:57,760 --> 00:25:59,440
processed trees if this is something

746
00:25:59,440 --> 00:26:01,120
that this is the first time you're

747
00:26:01,120 --> 00:26:02,720
you're looking at it processed trees are

748
00:26:02,720 --> 00:26:04,880
gonna help you a ton because it's gonna

749
00:26:04,880 --> 00:26:06,880
you're gonna understand what artifacts

750
00:26:06,880 --> 00:26:09,039
are left on the system and so process

751
00:26:09,039 --> 00:26:10,799
explorer from the assist internals

752
00:26:10,799 --> 00:26:13,440
project by windows is really good and so

753
00:26:13,440 --> 00:26:14,799
this is one of those things where you

754
00:26:14,799 --> 00:26:17,600
know opening and executing uh something

755
00:26:17,600 --> 00:26:20,320
from uh from just a windows gui might

756
00:26:20,320 --> 00:26:22,480
have explorer as a parent process versus

757
00:26:22,480 --> 00:26:24,880
something that's not a beacon.exe

758
00:26:24,880 --> 00:26:26,640
and so this is where you'll see the

759
00:26:26,640 --> 00:26:28,159
differences between something like

760
00:26:28,159 --> 00:26:30,640
atomic red team versus a c2 framework

761
00:26:30,640 --> 00:26:32,159
and you should be able to test out those

762
00:26:32,159 --> 00:26:33,760
differences and at least spot a couple

763
00:26:33,760 --> 00:26:35,279
of key ones

764
00:26:35,279 --> 00:26:37,200
and something that people that are that

765
00:26:37,200 --> 00:26:38,480
are looking at this always should we

766
00:26:38,480 --> 00:26:40,640
just disable powershell it seems like a

767
00:26:40,640 --> 00:26:42,880
problem uh and i'm gonna say probably

768
00:26:42,880 --> 00:26:44,799
not uh maybe you can in your

769
00:26:44,799 --> 00:26:46,799
organization but more and more people

770
00:26:46,799 --> 00:26:49,120
still continue to use powershell uh and

771
00:26:49,120 --> 00:26:50,799
there's this guy that was released on

772
00:26:50,799 --> 00:26:52,960
keeping powershell security measures to

773
00:26:52,960 --> 00:26:54,960
use and embrace in order to make sure

774
00:26:54,960 --> 00:26:57,039
that it won't be abused and so this was

775
00:26:57,039 --> 00:26:58,960
released um by a joint set of

776
00:26:58,960 --> 00:27:00,080
governments

777
00:27:00,080 --> 00:27:02,960
i think although five eyes

778
00:27:02,960 --> 00:27:05,279
so let's talk about once you've executed

779
00:27:05,279 --> 00:27:07,360
that we've maybe gotten some detections

780
00:27:07,360 --> 00:27:09,360
uh you know are you done and the answer

781
00:27:09,360 --> 00:27:11,279
of course is no this is where we're

782
00:27:11,279 --> 00:27:13,600
actually just getting started and

783
00:27:13,600 --> 00:27:15,600
there's these are the key variations

784
00:27:15,600 --> 00:27:17,600
that you want to focus on for execution

785
00:27:17,600 --> 00:27:19,200
methods and you can probably come up

786
00:27:19,200 --> 00:27:21,200
with some other ones as well but these

787
00:27:21,200 --> 00:27:22,960
are the ones that have historically sort

788
00:27:22,960 --> 00:27:25,520
of been used by attackers or researchers

789
00:27:25,520 --> 00:27:27,760
in order to bypass different techniques

790
00:27:27,760 --> 00:27:29,520
and so some of the key questions we want

791
00:27:29,520 --> 00:27:31,440
to look at is like can we run something

792
00:27:31,440 --> 00:27:33,840
without it being logged can we obfuscate

793
00:27:33,840 --> 00:27:36,000
what we run so that even if somebody is

794
00:27:36,000 --> 00:27:38,159
able to collect it they they have to

795
00:27:38,159 --> 00:27:39,760
maybe do some analysis of their own to

796
00:27:39,760 --> 00:27:42,240
determine what it even does can we copy

797
00:27:42,240 --> 00:27:44,799
and move it can we rename and can we

798
00:27:44,799 --> 00:27:46,320
bring our own there's a bunch of

799
00:27:46,320 --> 00:27:47,919
different things here that you can test

800
00:27:47,919 --> 00:27:49,760
out and really what this is is you're

801
00:27:49,760 --> 00:27:51,840
exploring the features and capabilities

802
00:27:51,840 --> 00:27:54,159
of your execution method that's really

803
00:27:54,159 --> 00:27:56,080
what it comes down to some of them like

804
00:27:56,080 --> 00:27:57,919
powershell are pretty well documented

805
00:27:57,919 --> 00:27:59,760
because they've they've been around for

806
00:27:59,760 --> 00:28:01,760
a long time now i mean powershell has

807
00:28:01,760 --> 00:28:04,799
been around since 2006 as we said and so

808
00:28:04,799 --> 00:28:06,799
that versus maybe the newer execution

809
00:28:06,799 --> 00:28:09,600
methods that might not be uh official

810
00:28:09,600 --> 00:28:11,919
even are going to be really poorly

811
00:28:11,919 --> 00:28:14,080
documented and so that might require a

812
00:28:14,080 --> 00:28:16,960
lot of research and discovery uh on on

813
00:28:16,960 --> 00:28:18,960
your own or with a team

814
00:28:18,960 --> 00:28:20,960
and then this also is testing your

815
00:28:20,960 --> 00:28:23,360
assumption about how that method works

816
00:28:23,360 --> 00:28:24,720
and as you'll see with powershell

817
00:28:24,720 --> 00:28:26,720
there's a lot of things that uh

818
00:28:26,720 --> 00:28:28,640
variations that essentially came out

819
00:28:28,640 --> 00:28:30,799
from people testing uh testing their

820
00:28:30,799 --> 00:28:32,640
assumptions

821
00:28:32,640 --> 00:28:34,240
now let's talk about writing something

822
00:28:34,240 --> 00:28:35,919
without being logged how would we tackle

823
00:28:35,919 --> 00:28:38,640
this um now remember when i was going

824
00:28:38,640 --> 00:28:41,200
through our cycle here powershell didn't

825
00:28:41,200 --> 00:28:43,120
start getting really good or better

826
00:28:43,120 --> 00:28:46,080
logging in controls until versions uh

827
00:28:46,080 --> 00:28:48,320
three four and five which came out a bit

828
00:28:48,320 --> 00:28:50,799
later but powershell version two was

829
00:28:50,799 --> 00:28:52,960
installed by default for backwards

830
00:28:52,960 --> 00:28:55,840
compatibility up until i think last year

831
00:28:55,840 --> 00:28:58,480
and even now a lot of

832
00:28:58,480 --> 00:29:01,360
different laptops or windows machines

833
00:29:01,360 --> 00:29:03,120
that get shipped still have version tool

834
00:29:03,120 --> 00:29:05,440
enabled and so this is something that

835
00:29:05,440 --> 00:29:07,520
you can do a downgrade attack and this

836
00:29:07,520 --> 00:29:09,679
is where you just tack on that you want

837
00:29:09,679 --> 00:29:11,440
version two you're gonna run the same

838
00:29:11,440 --> 00:29:13,360
thing and this is before all of that

839
00:29:13,360 --> 00:29:15,600
logging happens and so that's something

840
00:29:15,600 --> 00:29:17,520
that uh this still happens in a lot of

841
00:29:17,520 --> 00:29:18,720
environments especially when we're doing

842
00:29:18,720 --> 00:29:20,880
purple teaming we see this a lot

843
00:29:20,880 --> 00:29:23,039
the other thing is truncating logging

844
00:29:23,039 --> 00:29:25,279
this is something that environments and

845
00:29:25,279 --> 00:29:26,960
especially if you're in an enterprise

846
00:29:26,960 --> 00:29:28,640
that's trying to conserve the amount of

847
00:29:28,640 --> 00:29:30,799
data that they're storing especially

848
00:29:30,799 --> 00:29:32,320
depending on how you're storing it maybe

849
00:29:32,320 --> 00:29:34,880
in the cloud versus on-prem and so they

850
00:29:34,880 --> 00:29:37,600
might truncate to uh the first 500

851
00:29:37,600 --> 00:29:39,200
characters of something and figure that

852
00:29:39,200 --> 00:29:41,760
they can that's all they need and so in

853
00:29:41,760 --> 00:29:44,640
this case you could just put and prepend

854
00:29:44,640 --> 00:29:48,399
500 spaces before your uh before your

855
00:29:48,399 --> 00:29:49,679
test and see

856
00:29:49,679 --> 00:29:51,600
am i able to still see that

857
00:29:51,600 --> 00:29:53,760
uh now this is where

858
00:29:53,760 --> 00:29:55,360
some things like script block logging

859
00:29:55,360 --> 00:29:57,520
might have that minimized command that

860
00:29:57,520 --> 00:29:59,840
we'll talk about that that get past this

861
00:29:59,840 --> 00:30:01,360
but these are still a lot of different

862
00:30:01,360 --> 00:30:03,279
good variations to prove whether or not

863
00:30:03,279 --> 00:30:05,120
those are working or not and so that's

864
00:30:05,120 --> 00:30:06,960
really the question asked every time

865
00:30:06,960 --> 00:30:08,559
after you run one of these does my

866
00:30:08,559 --> 00:30:10,559
telemetry change does my detection

867
00:30:10,559 --> 00:30:13,039
ability change or my alerting which is

868
00:30:13,039 --> 00:30:15,600
really what we're trying to work towards

869
00:30:15,600 --> 00:30:17,919
now can we obfuscate when we what we run

870
00:30:17,919 --> 00:30:20,320
base64 encoding this is something that's

871
00:30:20,320 --> 00:30:23,360
very much inbuilt and part of powershell

872
00:30:23,360 --> 00:30:25,200
and is widely used for legitimate use

873
00:30:25,200 --> 00:30:26,960
cases too

874
00:30:26,960 --> 00:30:28,240
uh

875
00:30:28,240 --> 00:30:29,760
encoding commands in general is

876
00:30:29,760 --> 00:30:30,960
something that

877
00:30:30,960 --> 00:30:33,520
a lot of especially automation and

878
00:30:33,520 --> 00:30:35,360
provisioning tools use

879
00:30:35,360 --> 00:30:36,640
just to help make sure they're they're

880
00:30:36,640 --> 00:30:38,240
getting everything consistently across

881
00:30:38,240 --> 00:30:41,440
the network and this is why base64

882
00:30:41,440 --> 00:30:44,080
encoding is is so popular also with

883
00:30:44,080 --> 00:30:46,240
adversaries is because encoded commands

884
00:30:46,240 --> 00:30:48,080
require at least one more step of

885
00:30:48,080 --> 00:30:50,880
analysis whether it's just decoding it

886
00:30:50,880 --> 00:30:52,559
before you try and understand whether it

887
00:30:52,559 --> 00:30:54,880
works so you can check that and see

888
00:30:54,880 --> 00:30:56,320
whether or not you have an analyst

889
00:30:56,320 --> 00:30:58,399
that's either going to maybe the edr

890
00:30:58,399 --> 00:31:01,200
does it for you or maybe you have to

891
00:31:01,200 --> 00:31:02,720
pull up cyber chef or something like

892
00:31:02,720 --> 00:31:04,480
that in order to decode the command to

893
00:31:04,480 --> 00:31:06,159
understand what it does

894
00:31:06,159 --> 00:31:08,159
now invoke obfuscation is another one of

895
00:31:08,159 --> 00:31:10,799
my favorite uh projects to talk about uh

896
00:31:10,799 --> 00:31:13,600
and that's by daniel bohannon and this

897
00:31:13,600 --> 00:31:16,240
is where he sort of took to the extreme

898
00:31:16,240 --> 00:31:19,120
some of the uh obfuscation techniques

899
00:31:19,120 --> 00:31:20,799
that you can do with programming

900
00:31:20,799 --> 00:31:22,399
language because you can insert null

901
00:31:22,399 --> 00:31:24,320
characters and things like that and the

902
00:31:24,320 --> 00:31:27,120
compiler or the uh interpreter will

903
00:31:27,120 --> 00:31:29,360
ignore them because that's it's just

904
00:31:29,360 --> 00:31:32,480
trying to get at uh what is that thing

905
00:31:32,480 --> 00:31:34,480
you're trying to execute but of course

906
00:31:34,480 --> 00:31:36,960
us looking as humans looking at it uh

907
00:31:36,960 --> 00:31:38,320
this and this is an example where you

908
00:31:38,320 --> 00:31:40,480
can at least still tell what's going on

909
00:31:40,480 --> 00:31:42,960
uh you can see all right let's get

910
00:31:42,960 --> 00:31:44,559
process but that might break some

911
00:31:44,559 --> 00:31:46,159
detections that are based on just

912
00:31:46,159 --> 00:31:49,200
looking for a get process string

913
00:31:49,200 --> 00:31:52,080
other things how about copy or moving

914
00:31:52,080 --> 00:31:54,080
the powershell executable we've we've

915
00:31:54,080 --> 00:31:55,600
been assuming that we're using the

916
00:31:55,600 --> 00:31:58,480
system uh path that's executing

917
00:31:58,480 --> 00:32:00,080
powershell.exe

918
00:32:00,080 --> 00:32:02,720
and so what if we copy and move it to

919
00:32:02,720 --> 00:32:05,360
just the user profile that you have and

920
00:32:05,360 --> 00:32:07,360
execute the same thing is this going to

921
00:32:07,360 --> 00:32:09,679
break any policies or detections because

922
00:32:09,679 --> 00:32:12,080
people are looking for that specific

923
00:32:12,080 --> 00:32:15,440
path of powershell.exe and so again

924
00:32:15,440 --> 00:32:16,960
these are some of those variations you

925
00:32:16,960 --> 00:32:18,720
have to think through and especially

926
00:32:18,720 --> 00:32:20,559
when we start getting into other

927
00:32:20,559 --> 00:32:23,360
execution methods these can break a lot

928
00:32:23,360 --> 00:32:25,519
of what are sort of fragile detections

929
00:32:25,519 --> 00:32:26,720
in the area

930
00:32:26,720 --> 00:32:29,120
same with renaming uh this is something

931
00:32:29,120 --> 00:32:31,519
if people are looking for powershell.exe

932
00:32:31,519 --> 00:32:33,679
maybe they decided that regardless of

933
00:32:33,679 --> 00:32:35,679
where it's executed on the system if you

934
00:32:35,679 --> 00:32:38,240
find powershell.exe you need to detect

935
00:32:38,240 --> 00:32:40,399
on it and this is where rename of course

936
00:32:40,399 --> 00:32:42,720
is going to get past that so every

937
00:32:42,720 --> 00:32:44,640
environment and every set of detections

938
00:32:44,640 --> 00:32:46,240
that have been implemented are probably

939
00:32:46,240 --> 00:32:48,240
going to be different that's sort of the

940
00:32:48,240 --> 00:32:49,919
reality there's some people that can

941
00:32:49,919 --> 00:32:51,760
take all of sigma rules are part of

942
00:32:51,760 --> 00:32:53,200
sigma rules in addition to their own

943
00:32:53,200 --> 00:32:55,039
custom rules or what they have in the

944
00:32:55,039 --> 00:32:57,519
edrs out of the box but these are what

945
00:32:57,519 --> 00:32:59,120
you're testing is all those assumptions

946
00:32:59,120 --> 00:33:00,799
about what work in

947
00:33:00,799 --> 00:33:02,720
in environments

948
00:33:02,720 --> 00:33:04,480
now let's talk about unmanaged power

949
00:33:04,480 --> 00:33:07,840
shell which is sort of uh works by

950
00:33:07,840 --> 00:33:09,919
uh it was it was initially sort of

951
00:33:09,919 --> 00:33:13,039
coined by lee christiansen uh in 2014

952
00:33:13,039 --> 00:33:15,679
had the unmanaged powershell project uh

953
00:33:15,679 --> 00:33:18,080
power pick became a cobalt strike so it

954
00:33:18,080 --> 00:33:20,720
was really easy to swap over i think uh

955
00:33:20,720 --> 00:33:23,279
empire also supports this of course now

956
00:33:23,279 --> 00:33:25,679
it does but the idea with this is that

957
00:33:25,679 --> 00:33:28,080
typically your normal powershell

958
00:33:28,080 --> 00:33:29,519
execution and this is sort of a

959
00:33:29,519 --> 00:33:31,840
simplified version uh was calling was

960
00:33:31,840 --> 00:33:33,440
run through powershell.exe and

961
00:33:33,440 --> 00:33:36,000
powershell would then reference a dll

962
00:33:36,000 --> 00:33:38,720
and so the idea was let's just skip

963
00:33:38,720 --> 00:33:40,880
using that exe all together and call the

964
00:33:40,880 --> 00:33:42,559
dll uh

965
00:33:42,559 --> 00:33:45,360
straight and that's something that broke

966
00:33:45,360 --> 00:33:47,760
a lot of detections and still continues

967
00:33:47,760 --> 00:33:50,159
to break detections uh because people

968
00:33:50,159 --> 00:33:52,320
are focused on building detections

969
00:33:52,320 --> 00:33:55,120
around that powershell executable and so

970
00:33:55,120 --> 00:33:57,279
that's something that uh this like i

971
00:33:57,279 --> 00:33:59,679
said still is a problem uh to this day

972
00:33:59,679 --> 00:34:01,200
for a lot of organizations is dealing

973
00:34:01,200 --> 00:34:02,960
with unmanaged powershell

974
00:34:02,960 --> 00:34:05,120
so i highly encourage people to check

975
00:34:05,120 --> 00:34:07,039
things out this is where of course when

976
00:34:07,039 --> 00:34:09,440
we get to uh when we talked about

977
00:34:09,440 --> 00:34:11,040
choosing a tool that allows you to have

978
00:34:11,040 --> 00:34:13,359
these level of variances some things are

979
00:34:13,359 --> 00:34:14,879
going to be changing just those

980
00:34:14,879 --> 00:34:16,239
characters others are going to be

981
00:34:16,239 --> 00:34:18,079
changing that underlying method in this

982
00:34:18,079 --> 00:34:20,399
case but it's still power shell so this

983
00:34:20,399 --> 00:34:23,040
is still uh in minor attack the power

984
00:34:23,040 --> 00:34:27,119
shell execution still falls under this

985
00:34:27,119 --> 00:34:29,119
so the other things of course and this

986
00:34:29,119 --> 00:34:31,440
is going to get to uh sort of the more

987
00:34:31,440 --> 00:34:33,040
advanced

988
00:34:33,040 --> 00:34:35,280
variants is can you bring your own and

989
00:34:35,280 --> 00:34:37,280
so this is where can you download and

990
00:34:37,280 --> 00:34:40,000
and bring or upload i guess as part of

991
00:34:40,000 --> 00:34:42,960
your attack your own dll and reference

992
00:34:42,960 --> 00:34:43,760
that

993
00:34:43,760 --> 00:34:45,599
so that's something that if people are

994
00:34:45,599 --> 00:34:48,079
looking at the different paths and say

995
00:34:48,079 --> 00:34:49,280
they're looking for everything that's

996
00:34:49,280 --> 00:34:52,320
powershell.exe and that system

997
00:34:52,320 --> 00:34:54,639
automation dll you could of course

998
00:34:54,639 --> 00:34:56,960
rename it and it's still going to retain

999
00:34:56,960 --> 00:34:59,200
all of the features and functionality

1000
00:34:59,200 --> 00:35:01,760
and microsoft signature

1001
00:35:01,760 --> 00:35:03,760
because you download and you're going to

1002
00:35:03,760 --> 00:35:06,160
be using it uh the same as anything else

1003
00:35:06,160 --> 00:35:07,760
would so if you bring your own and

1004
00:35:07,760 --> 00:35:09,359
reference it people might have to figure

1005
00:35:09,359 --> 00:35:11,680
out what you're calling updater.dll

1006
00:35:11,680 --> 00:35:14,160
and they are either going to have to try

1007
00:35:14,160 --> 00:35:16,320
and look for artifacts that indicate

1008
00:35:16,320 --> 00:35:19,119
that this is a powershell dll or they're

1009
00:35:19,119 --> 00:35:20,560
going to have to potentially reverse

1010
00:35:20,560 --> 00:35:22,079
engineer it or something like that or

1011
00:35:22,079 --> 00:35:23,680
they just won't know

1012
00:35:23,680 --> 00:35:25,599
and then the last thing is taking that

1013
00:35:25,599 --> 00:35:27,040
one step further

1014
00:35:27,040 --> 00:35:28,560
because what we've seen is a lot of

1015
00:35:28,560 --> 00:35:30,880
organizations will have a

1016
00:35:30,880 --> 00:35:33,839
set of allow listed dlls uh or

1017
00:35:33,839 --> 00:35:35,599
uh by

1018
00:35:35,599 --> 00:35:38,079
hash or they will do hash blocking and

1019
00:35:38,079 --> 00:35:40,320
so of course changing the hash on files

1020
00:35:40,320 --> 00:35:43,040
is pretty easy but the key thing here is

1021
00:35:43,040 --> 00:35:45,200
to change the hash while maintaining

1022
00:35:45,200 --> 00:35:47,440
that signed microsoft signed binary

1023
00:35:47,440 --> 00:35:49,440
status and so that's where there's a

1024
00:35:49,440 --> 00:35:52,720
project uh by mr unicoder that is called

1025
00:35:52,720 --> 00:35:54,400
windows sign binary that will tell you

1026
00:35:54,400 --> 00:35:56,960
which bytes you can change

1027
00:35:56,960 --> 00:35:57,760
in

1028
00:35:57,760 --> 00:36:00,640
some of these dlls or other execution

1029
00:36:00,640 --> 00:36:02,640
methods that are signed by microsoft

1030
00:36:02,640 --> 00:36:05,839
without affecting that specific uh

1031
00:36:05,839 --> 00:36:07,920
signature so you'll still have you know

1032
00:36:07,920 --> 00:36:10,240
assigned binary and it still works but

1033
00:36:10,240 --> 00:36:12,720
it won't have that hash so just ways

1034
00:36:12,720 --> 00:36:14,640
that you can continue to sort of scale

1035
00:36:14,640 --> 00:36:16,640
up what you're doing

1036
00:36:16,640 --> 00:36:19,119
now a couple of additional resources bc

1037
00:36:19,119 --> 00:36:21,040
security forked empire after it was

1038
00:36:21,040 --> 00:36:22,800
sunset by spectrops a number of years

1039
00:36:22,800 --> 00:36:25,440
ago they added a gui called star killer

1040
00:36:25,440 --> 00:36:27,440
and that's one additional resource when

1041
00:36:27,440 --> 00:36:28,720
you're specifically looking at

1042
00:36:28,720 --> 00:36:31,359
powershell uh now spectrops also

1043
00:36:31,359 --> 00:36:33,280
deprecated and released their free

1044
00:36:33,280 --> 00:36:35,599
adversary tactics powershell course

1045
00:36:35,599 --> 00:36:36,960
check it out if you want there's a lot

1046
00:36:36,960 --> 00:36:38,960
of good exercises labs all of the slides

1047
00:36:38,960 --> 00:36:41,040
are there too and it's a four day class

1048
00:36:41,040 --> 00:36:43,839
i took it back in 2017

1049
00:36:43,839 --> 00:36:45,920
and so that was a good class i still

1050
00:36:45,920 --> 00:36:47,839
recommend checking it out

1051
00:36:47,839 --> 00:36:49,920
now let's talk about law bas uh here to

1052
00:36:49,920 --> 00:36:51,680
sort of wrap things up

1053
00:36:51,680 --> 00:36:53,839
uh this was start off as living off the

1054
00:36:53,839 --> 00:36:55,920
land binaries the wall bins and it was

1055
00:36:55,920 --> 00:36:58,560
initially coined by by matt graber and

1056
00:36:58,560 --> 00:37:00,640
and that team and a lot of the early

1057
00:37:00,640 --> 00:37:02,560
public research was done by casey smith

1058
00:37:02,560 --> 00:37:04,079
so i just wanted to give especially

1059
00:37:04,079 --> 00:37:05,520
casey a lot of shout outs because if you

1060
00:37:05,520 --> 00:37:07,599
go through the wall bass project you'll

1061
00:37:07,599 --> 00:37:09,760
see a lot of references with casey as

1062
00:37:09,760 --> 00:37:11,040
the contributor

1063
00:37:11,040 --> 00:37:14,000
and it's great in sort of listing all of

1064
00:37:14,000 --> 00:37:16,240
those microsoft signed binaries that

1065
00:37:16,240 --> 00:37:17,920
allow you to execute something else and

1066
00:37:17,920 --> 00:37:19,520
so that's what i couldn't you know could

1067
00:37:19,520 --> 00:37:20,800
do it justice better than what they

1068
00:37:20,800 --> 00:37:22,640
already had in the github

1069
00:37:22,640 --> 00:37:24,320
and basically the idea is there's

1070
00:37:24,320 --> 00:37:27,280
unexpected functionality that might be

1071
00:37:27,280 --> 00:37:30,320
useful to a red team or threat actor

1072
00:37:30,320 --> 00:37:33,040
and that's something that we're going to

1073
00:37:33,040 --> 00:37:34,960
dive into a little bit more and part of

1074
00:37:34,960 --> 00:37:37,599
the reason i want to dive into this is

1075
00:37:37,599 --> 00:37:39,680
because it challenges some of our

1076
00:37:39,680 --> 00:37:41,839
assumptions with that first question uh

1077
00:37:41,839 --> 00:37:43,599
with powershell and what we chose this

1078
00:37:43,599 --> 00:37:46,240
last for our last example it's super

1079
00:37:46,240 --> 00:37:48,560
easy to execute that in the command line

1080
00:37:48,560 --> 00:37:50,800
by executing payloads for ms build if

1081
00:37:50,800 --> 00:37:52,720
you've never done it before is something

1082
00:37:52,720 --> 00:37:54,240
that is going to require a little bit

1083
00:37:54,240 --> 00:37:56,640
more effort so what you see at the top

1084
00:37:56,640 --> 00:37:58,240
there that top blue bar is going to be

1085
00:37:58,240 --> 00:38:00,000
what you see with the wall bass project

1086
00:38:00,000 --> 00:38:03,119
it says what those specific uh that wall

1087
00:38:03,119 --> 00:38:05,680
blast can do it can in this case execute

1088
00:38:05,680 --> 00:38:07,200
and it's an application white listing

1089
00:38:07,200 --> 00:38:08,320
bypass

1090
00:38:08,320 --> 00:38:10,400
and so uh while

1091
00:38:10,400 --> 00:38:13,440
ms build is not on windows uh out of the

1092
00:38:13,440 --> 00:38:15,359
box it tends to get installed even if

1093
00:38:15,359 --> 00:38:17,280
you don't mean it to because of other

1094
00:38:17,280 --> 00:38:18,960
applications that are either building or

1095
00:38:18,960 --> 00:38:20,640
installing things on

1096
00:38:20,640 --> 00:38:22,320
on the endpoint so even if it's not

1097
00:38:22,320 --> 00:38:24,880
there uh or if it shouldn't be there it

1098
00:38:24,880 --> 00:38:26,240
it might be there

1099
00:38:26,240 --> 00:38:27,839
now the other thing when we're talking

1100
00:38:27,839 --> 00:38:29,680
about variants that we're talk what that

1101
00:38:29,680 --> 00:38:32,079
i didn't touch on before is 32 versus

1102
00:38:32,079 --> 00:38:34,400
64-bit versions and that's something

1103
00:38:34,400 --> 00:38:36,400
that you can see here there is that

1104
00:38:36,400 --> 00:38:38,800
variance in the two so again you have

1105
00:38:38,800 --> 00:38:40,960
different executables in this case or

1106
00:38:40,960 --> 00:38:43,200
different file paths that might impact

1107
00:38:43,200 --> 00:38:44,800
your detection so make sure to look at

1108
00:38:44,800 --> 00:38:46,320
that and of course it's going to impact

1109
00:38:46,320 --> 00:38:48,400
your ability to execute payloads because

1110
00:38:48,400 --> 00:38:50,480
you need to tailor your payload to the

1111
00:38:50,480 --> 00:38:54,079
version of uh ms build

1112
00:38:54,079 --> 00:38:56,400
so one of the things is that i mentioned

1113
00:38:56,400 --> 00:38:57,839
before that's going to be more difficult

1114
00:38:57,839 --> 00:39:00,560
to pay on your technique is is how to

1115
00:39:00,560 --> 00:39:02,240
execute it and you may not have the

1116
00:39:02,240 --> 00:39:04,640
expertise right now like just sitting

1117
00:39:04,640 --> 00:39:07,359
there to be able to execute a ms build

1118
00:39:07,359 --> 00:39:09,599
uh one and so that's where i wanted to

1119
00:39:09,599 --> 00:39:10,880
at least touch on something that's a

1120
00:39:10,880 --> 00:39:13,040
little bit harder in order to build up

1121
00:39:13,040 --> 00:39:15,440
tests and this is where the law bass

1122
00:39:15,440 --> 00:39:17,599
project does give you a bunch of

1123
00:39:17,599 --> 00:39:20,400
examples of how to execute them and

1124
00:39:20,400 --> 00:39:22,560
there are all their blog posts uh tools

1125
00:39:22,560 --> 00:39:24,160
like metasploit will help you build that

1126
00:39:24,160 --> 00:39:26,240
initial payload but again this is where

1127
00:39:26,240 --> 00:39:27,920
i emphasize making sure that initial

1128
00:39:27,920 --> 00:39:29,760
payload only tests

1129
00:39:29,760 --> 00:39:31,280
you know in this case like the get

1130
00:39:31,280 --> 00:39:32,800
process technique

1131
00:39:32,800 --> 00:39:34,160
so that you're still testing your

1132
00:39:34,160 --> 00:39:36,079
execution methods and so this might take

1133
00:39:36,079 --> 00:39:37,440
you some time to figure out what you're

1134
00:39:37,440 --> 00:39:39,920
doing but that is normal you're going to

1135
00:39:39,920 --> 00:39:40,960
have to

1136
00:39:40,960 --> 00:39:42,480
figure these out before you can even

1137
00:39:42,480 --> 00:39:44,079
start doing those variances that i

1138
00:39:44,079 --> 00:39:46,000
talked about for the execution method

1139
00:39:46,000 --> 00:39:47,119
you're gonna have to figure out how to

1140
00:39:47,119 --> 00:39:49,520
execute it and so that's just something

1141
00:39:49,520 --> 00:39:52,640
i i want to you know address because as

1142
00:39:52,640 --> 00:39:54,960
you get into the more complex techniques

1143
00:39:54,960 --> 00:39:56,160
you're going to have to spend some

1144
00:39:56,160 --> 00:39:58,000
research time to even get your initial

1145
00:39:58,000 --> 00:39:59,839
test case going and that's something

1146
00:39:59,839 --> 00:40:01,119
that especially if you're new to this

1147
00:40:01,119 --> 00:40:03,040
might be a frustrating experience but

1148
00:40:03,040 --> 00:40:04,880
know that everyone goes through it at

1149
00:40:04,880 --> 00:40:07,200
one time or another

1150
00:40:07,200 --> 00:40:08,079
now

1151
00:40:08,079 --> 00:40:10,560
again that those variations can we move

1152
00:40:10,560 --> 00:40:13,839
it can we uh run it a different way

1153
00:40:13,839 --> 00:40:15,280
these are things that you should explore

1154
00:40:15,280 --> 00:40:17,119
with every execution method and this

1155
00:40:17,119 --> 00:40:18,960
tends to break a lot of the detections

1156
00:40:18,960 --> 00:40:20,560
especially when we're talking about wall

1157
00:40:20,560 --> 00:40:23,040
bass um so powershell has been something

1158
00:40:23,040 --> 00:40:25,280
that with newer versions does tend to be

1159
00:40:25,280 --> 00:40:27,920
pretty well uh documented so it's really

1160
00:40:27,920 --> 00:40:31,359
about uh figuring out what is your

1161
00:40:31,359 --> 00:40:33,839
threshold for risk and what types of

1162
00:40:33,839 --> 00:40:35,280
adversaries do you think are going to be

1163
00:40:35,280 --> 00:40:36,880
targeting your organization because the

1164
00:40:36,880 --> 00:40:38,480
more advanced they are the more they're

1165
00:40:38,480 --> 00:40:39,599
going to be doing some of these

1166
00:40:39,599 --> 00:40:41,520
variations because adversaries don't

1167
00:40:41,520 --> 00:40:43,599
want to rebuild capability they really

1168
00:40:43,599 --> 00:40:46,800
want to focus on uh minimal effort in

1169
00:40:46,800 --> 00:40:48,640
order to get have that maximal gain and

1170
00:40:48,640 --> 00:40:50,480
that's why they tend to choose and

1171
00:40:50,480 --> 00:40:52,560
change out execution methods rather than

1172
00:40:52,560 --> 00:40:55,040
entire new techniques

1173
00:40:55,040 --> 00:40:57,599
so there are also you know a bunch of

1174
00:40:57,599 --> 00:40:59,200
different detections listed on the wall

1175
00:40:59,200 --> 00:41:01,280
best project page i heavily recommend

1176
00:41:01,280 --> 00:41:02,720
you check those out because i think

1177
00:41:02,720 --> 00:41:05,280
that's sort of a key uh a key part of

1178
00:41:05,280 --> 00:41:06,480
this

1179
00:41:06,480 --> 00:41:08,480
correlation is really needed uh for

1180
00:41:08,480 --> 00:41:10,000
these this is where i talked about those

1181
00:41:10,000 --> 00:41:12,160
network connections being key uh you

1182
00:41:12,160 --> 00:41:15,040
know my my uh historic example here is

1183
00:41:15,040 --> 00:41:17,920
meterpreter from metasploit i

1184
00:41:17,920 --> 00:41:20,960
tended to spawn notepad.exe calling back

1185
00:41:20,960 --> 00:41:23,520
on uh port four four four four and so

1186
00:41:23,520 --> 00:41:24,880
that's something that if you saw in your

1187
00:41:24,880 --> 00:41:26,640
network you knew that that was probably

1188
00:41:26,640 --> 00:41:29,920
a malicious uh actor or tester and

1189
00:41:29,920 --> 00:41:32,319
that's in that case something that takes

1190
00:41:32,319 --> 00:41:35,359
correlation and contacts with notepad

1191
00:41:35,359 --> 00:41:36,560
probably shouldn't be calling out to the

1192
00:41:36,560 --> 00:41:38,640
internet and same with you and your

1193
00:41:38,640 --> 00:41:40,240
environment trying to understand what

1194
00:41:40,240 --> 00:41:42,000
are some of those law based techniques

1195
00:41:42,000 --> 00:41:43,440
should they be calling out to the

1196
00:41:43,440 --> 00:41:45,440
internet or spawning network connections

1197
00:41:45,440 --> 00:41:47,200
and if not that's probably a good place

1198
00:41:47,200 --> 00:41:49,599
to start for your detections

1199
00:41:49,599 --> 00:41:51,440
though there's always more there's a ton

1200
00:41:51,440 --> 00:41:53,440
of different ones i've only covered you

1201
00:41:53,440 --> 00:41:54,560
know uh

1202
00:41:54,560 --> 00:41:57,680
really two big ones here uh one in depth

1203
00:41:57,680 --> 00:42:00,400
and so i always invite you to go and do

1204
00:42:00,400 --> 00:42:02,079
some of your own research to explore

1205
00:42:02,079 --> 00:42:03,200
some of these because that's how you're

1206
00:42:03,200 --> 00:42:06,800
gonna find new and uh undocumented ways

1207
00:42:06,800 --> 00:42:09,520
uh that haven't been discovered yet so

1208
00:42:09,520 --> 00:42:11,119
uh check them out there's a lot of good

1209
00:42:11,119 --> 00:42:12,640
research out there being done give

1210
00:42:12,640 --> 00:42:15,599
another shout out here to mdset for also

1211
00:42:15,599 --> 00:42:17,280
doing a lot of good research and they've

1212
00:42:17,280 --> 00:42:19,040
got some great blogs that that give a

1213
00:42:19,040 --> 00:42:20,560
technical breakdown on how you can do

1214
00:42:20,560 --> 00:42:22,319
some of these things

1215
00:42:22,319 --> 00:42:24,560
so with that uh i hope you took away at

1216
00:42:24,560 --> 00:42:27,119
least what made these uh challenging as

1217
00:42:27,119 --> 00:42:29,839
a test uh test part just how you can go

1218
00:42:29,839 --> 00:42:31,599
and sort of do some more in-depth

1219
00:42:31,599 --> 00:42:33,599
testing of execution methods and of

1220
00:42:33,599 --> 00:42:35,680
course um there are a ton of resources

1221
00:42:35,680 --> 00:42:37,119
here so hopefully you picked up at least

1222
00:42:37,119 --> 00:42:39,040
one new one uh or at least have a couple

1223
00:42:39,040 --> 00:42:41,119
of things that that you can try out uh

1224
00:42:41,119 --> 00:42:41,920
later

1225
00:42:41,920 --> 00:42:45,839
with that thanks so much

