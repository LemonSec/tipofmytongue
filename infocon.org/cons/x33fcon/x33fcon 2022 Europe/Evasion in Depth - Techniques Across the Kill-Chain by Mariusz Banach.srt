1
00:00:01,850 --> 00:00:07,520
[Music]

2
00:00:07,520 --> 00:00:10,880
all right off we go so um hello all

3
00:00:10,880 --> 00:00:12,799
um

4
00:00:12,799 --> 00:00:15,040
my name is marius and i'm a red teamer

5
00:00:15,040 --> 00:00:18,000
bakken ing we are doing this like global

6
00:00:18,000 --> 00:00:20,000
real world rectum engagements and

7
00:00:20,000 --> 00:00:22,000
therefore we have collected a bunch of

8
00:00:22,000 --> 00:00:23,519
tricks that

9
00:00:23,519 --> 00:00:26,160
were were useful during our endeavors

10
00:00:26,160 --> 00:00:27,920
and as well as

11
00:00:27,920 --> 00:00:30,160
since i'm especially inclined towards

12
00:00:30,160 --> 00:00:32,880
the malware because i used to analyze

13
00:00:32,880 --> 00:00:34,800
and dissect malware samples as well as

14
00:00:34,800 --> 00:00:37,200
write my own therefore i am more

15
00:00:37,200 --> 00:00:39,840
interested into devising more stuff so i

16
00:00:39,840 --> 00:00:41,840
would like to share with you with you a

17
00:00:41,840 --> 00:00:43,760
little bit of tricks and tactics that we

18
00:00:43,760 --> 00:00:44,960
could use

19
00:00:44,960 --> 00:00:47,280
malware wise towards uh increasing our

20
00:00:47,280 --> 00:00:48,960
chances during directing

21
00:00:48,960 --> 00:00:50,960
operations that we'll be having

22
00:00:50,960 --> 00:00:53,680
so um what we what we'll be sharing uh

23
00:00:53,680 --> 00:00:55,199
today is

24
00:00:55,199 --> 00:00:57,199
a little of a few tricks about the

25
00:00:57,199 --> 00:01:00,079
phishing as well as uh how can we um

26
00:01:00,079 --> 00:01:02,079
approach the initial access stage during

27
00:01:02,079 --> 00:01:03,120
the

28
00:01:03,120 --> 00:01:05,519
in the more highly secure environments

29
00:01:05,519 --> 00:01:07,119
as well as

30
00:01:07,119 --> 00:01:09,600
a little a little more into

31
00:01:09,600 --> 00:01:12,080
into the evasion ideas

32
00:01:12,080 --> 00:01:14,880
because as we as as we might imagine the

33
00:01:14,880 --> 00:01:16,560
innovation is really important in order

34
00:01:16,560 --> 00:01:20,400
to um to survive the multiple stages of

35
00:01:20,400 --> 00:01:22,400
detection and and

36
00:01:22,400 --> 00:01:25,119
sensing dodgy stuff therefore we might

37
00:01:25,119 --> 00:01:28,159
be um might want to uh cover some of the

38
00:01:28,159 --> 00:01:30,720
more recent ideas how to combat them

39
00:01:30,720 --> 00:01:32,000
and

40
00:01:32,000 --> 00:01:33,920
as a disclaimer of course um there are

41
00:01:33,920 --> 00:01:36,640
no fancy no no fancy new tactics in this

42
00:01:36,640 --> 00:01:39,040
talk we've got a bunch of stuff that we

43
00:01:39,040 --> 00:01:41,759
use and keep privately low profile so

44
00:01:41,759 --> 00:01:43,439
that we can operate still within our

45
00:01:43,439 --> 00:01:46,000
networks but among the things that i can

46
00:01:46,000 --> 00:01:49,680
show to you to you today um will be uh

47
00:01:49,680 --> 00:01:52,960
will be covering a few ideas that um

48
00:01:52,960 --> 00:01:56,719
that are already uh quite known but yet

49
00:01:56,719 --> 00:01:59,280
can be still weaponized and used

50
00:01:59,280 --> 00:02:00,960
during the um during the engagement so

51
00:02:00,960 --> 00:02:02,880
one one of the tricks that we really

52
00:02:02,880 --> 00:02:05,360
like abusing is to use the legitimate

53
00:02:05,360 --> 00:02:07,360
first party third-party services to just

54
00:02:07,360 --> 00:02:09,520
for instance linkedin and there there

55
00:02:09,520 --> 00:02:12,239
abuse them to smuggle the urls so that

56
00:02:12,239 --> 00:02:14,959
the employees who are not that sensitive

57
00:02:14,959 --> 00:02:17,520
about conversating with the mind like

58
00:02:17,520 --> 00:02:18,239
that

59
00:02:18,239 --> 00:02:21,120
might like um experts from all over

60
00:02:21,120 --> 00:02:23,200
all around the world are more inclined

61
00:02:23,200 --> 00:02:25,280
into opening actually this kind of stuff

62
00:02:25,280 --> 00:02:28,239
so um smuggling the demolition malicious

63
00:02:28,239 --> 00:02:29,840
payloads within the attachments is no

64
00:02:29,840 --> 00:02:32,160
more no more a viable approach towards

65
00:02:32,160 --> 00:02:34,640
targeting companies because the amos

66
00:02:34,640 --> 00:02:36,959
email scanning systems are so good at

67
00:02:36,959 --> 00:02:39,200
detecting sensors dodgy stuff within the

68
00:02:39,200 --> 00:02:41,120
attachments therefore uh we would

69
00:02:41,120 --> 00:02:43,840
consider to uh to just sticking away

70
00:02:43,840 --> 00:02:46,080
from the attachments based malware and

71
00:02:46,080 --> 00:02:48,800
sticking more into the urls and urls

72
00:02:48,800 --> 00:02:51,040
have this like a little bit of a problem

73
00:02:51,040 --> 00:02:52,080
behind

74
00:02:52,080 --> 00:02:53,840
a little bit

75
00:02:53,840 --> 00:02:55,440
that are like causing this a little bit

76
00:02:55,440 --> 00:02:57,440
of a problem for the security scanning

77
00:02:57,440 --> 00:02:59,760
and the proxies and systems because

78
00:02:59,760 --> 00:03:01,519
there's hard to tell the intention of

79
00:03:01,519 --> 00:03:03,920
the landing page that the user is about

80
00:03:03,920 --> 00:03:06,159
to hit so um

81
00:03:06,159 --> 00:03:09,040
so there's very hard logic to to be

82
00:03:09,040 --> 00:03:11,360
implemented towards sensic whether the

83
00:03:11,360 --> 00:03:13,680
url attached to the email is going to be

84
00:03:13,680 --> 00:03:15,360
dodgy or not

85
00:03:15,360 --> 00:03:17,519
and among the other tricks that we might

86
00:03:17,519 --> 00:03:19,680
chain altogether within the email or the

87
00:03:19,680 --> 00:03:21,120
conversation that we'll be trying to

88
00:03:21,120 --> 00:03:23,680
develop are the things like the right

89
00:03:23,680 --> 00:03:25,760
left override trick which still works

90
00:03:25,760 --> 00:03:27,760
quite nice during the and during the

91
00:03:27,760 --> 00:03:30,000
most recent times even though that was

92
00:03:30,000 --> 00:03:32,959
like designed or devised like 10 or 20

93
00:03:32,959 --> 00:03:36,000
years ago so still keeps on giving

94
00:03:36,000 --> 00:03:37,200
and also

95
00:03:37,200 --> 00:03:40,239
we consider that these like um a little

96
00:03:40,239 --> 00:03:43,280
bit of um not more so not so developed

97
00:03:43,280 --> 00:03:46,239
kind of fishing ideas for just firing a

98
00:03:46,239 --> 00:03:48,319
single email and forgetting about it and

99
00:03:48,319 --> 00:03:50,720
just waiting for the user to get and to

100
00:03:50,720 --> 00:03:54,159
get infected are no more longer um

101
00:03:54,159 --> 00:03:56,080
so much successful anymore because

102
00:03:56,080 --> 00:03:58,080
because users are not so much inclined

103
00:03:58,080 --> 00:04:00,319
into clicking on the very first email

104
00:04:00,319 --> 00:04:01,840
that they have received from this

105
00:04:01,840 --> 00:04:04,959
particular sender

106
00:04:05,599 --> 00:04:07,280
in order to better understand what we

107
00:04:07,280 --> 00:04:09,840
are dealing with while we are delivering

108
00:04:09,840 --> 00:04:11,200
the email message

109
00:04:11,200 --> 00:04:13,680
we came to the effort to just actually

110
00:04:13,680 --> 00:04:15,920
send like hundreds of emails towards the

111
00:04:15,920 --> 00:04:18,720
office 365 uh email scanning system the

112
00:04:18,720 --> 00:04:20,880
microsoft defender for office 365 and

113
00:04:20,880 --> 00:04:23,040
we've been trying to conclude

114
00:04:23,040 --> 00:04:25,840
what were the what were the smtp headers

115
00:04:25,840 --> 00:04:26,880
backing

116
00:04:26,880 --> 00:04:28,400
getting back to us

117
00:04:28,400 --> 00:04:30,639
when we uh when we're trying to um to

118
00:04:30,639 --> 00:04:32,880
analyze and examine the results during

119
00:04:32,880 --> 00:04:35,680
our internal analysis efforts and we

120
00:04:35,680 --> 00:04:37,840
came to the observation that there were

121
00:04:37,840 --> 00:04:42,560
like more than 20 um 20 smtp

122
00:04:42,560 --> 00:04:45,199
church threat rules and rules numbers

123
00:04:45,199 --> 00:04:48,400
that we could actually with a great with

124
00:04:48,400 --> 00:04:50,320
a great deal of

125
00:04:50,320 --> 00:04:53,440
certainty um established that the rules

126
00:04:53,440 --> 00:04:55,759
are getting back to this

127
00:04:55,759 --> 00:04:57,600
particular observations within and

128
00:04:57,600 --> 00:05:00,000
related to the emails so for instance

129
00:05:00,000 --> 00:05:03,199
having the so existence of the a url

130
00:05:03,199 --> 00:05:05,680
within delhi with within the mail is

131
00:05:05,680 --> 00:05:08,240
going to trigger back on the a single

132
00:05:08,240 --> 00:05:11,280
single on this anti-anti-spam or threat

133
00:05:11,280 --> 00:05:13,840
rule so so we could just um like we

134
00:05:13,840 --> 00:05:15,520
could just imagine but there are like a

135
00:05:15,520 --> 00:05:18,160
bunch of others that will be um will be

136
00:05:18,160 --> 00:05:20,560
hitting back on our emails that we could

137
00:05:20,560 --> 00:05:22,960
be aware of so i think that this is like

138
00:05:22,960 --> 00:05:26,080
a valuable idea to to try to learn how

139
00:05:26,080 --> 00:05:28,720
um how our males are getting scanned and

140
00:05:28,720 --> 00:05:30,720
what end drums are are being extracted

141
00:05:30,720 --> 00:05:33,280
out from our emails

142
00:05:33,280 --> 00:05:34,800
and then before we actually deliver

143
00:05:34,800 --> 00:05:36,720
something we could be applying this idea

144
00:05:36,720 --> 00:05:38,720
of linting our our phishing emails

145
00:05:38,720 --> 00:05:42,240
before we actually fire them away and by

146
00:05:42,240 --> 00:05:44,800
the linking will we mean to have this

147
00:05:44,800 --> 00:05:46,800
like couple of safe checks implemented

148
00:05:46,800 --> 00:05:49,600
within our scriptings so for instance uh

149
00:05:49,600 --> 00:05:50,880
stuff like

150
00:05:50,880 --> 00:05:52,960
how many url parameters are there in the

151
00:05:52,960 --> 00:05:55,280
in the url that we are about to attach

152
00:05:55,280 --> 00:05:58,479
into the into the mail message this this

153
00:05:58,479 --> 00:06:00,080
this is the concept that still matters

154
00:06:00,080 --> 00:06:03,360
because we have observed just let me get

155
00:06:03,360 --> 00:06:04,880
back to the previous slide we have

156
00:06:04,880 --> 00:06:06,880
observed by by going through all of

157
00:06:06,880 --> 00:06:09,680
these rules that there were some rules

158
00:06:09,680 --> 00:06:11,840
there were like more rules being um

159
00:06:11,840 --> 00:06:13,840
being provided back to us when we

160
00:06:13,840 --> 00:06:16,400
provided the url containing multiple get

161
00:06:16,400 --> 00:06:19,039
parameters whereas while we kept it

162
00:06:19,039 --> 00:06:21,600
short long lean and mean quite

163
00:06:21,600 --> 00:06:23,840
consistent url it will get back with

164
00:06:23,840 --> 00:06:26,720
less amount of of of anti anti-spam

165
00:06:26,720 --> 00:06:28,960
rules in smtp headers therefore we

166
00:06:28,960 --> 00:06:30,720
concluded that we we will be better off

167
00:06:30,720 --> 00:06:33,280
with keeping our urls nice and shiny and

168
00:06:33,280 --> 00:06:35,199
tidy

169
00:06:35,199 --> 00:06:37,759
and among the other tricks that we found

170
00:06:37,759 --> 00:06:41,280
is that there has to be html smuggling

171
00:06:41,280 --> 00:06:44,479
involved when we targeting office 365

172
00:06:44,479 --> 00:06:45,600
environments

173
00:06:45,600 --> 00:06:47,600
because just simply pointing towards the

174
00:06:47,600 --> 00:06:50,080
file would obviously get that file being

175
00:06:50,080 --> 00:06:52,479
fetched by the automated sandboxing

176
00:06:52,479 --> 00:06:54,639
mechanism and therefore it might get

177
00:06:54,639 --> 00:06:57,440
detonated and of course burnt before we

178
00:06:57,440 --> 00:06:59,840
even try before we then reach out to the

179
00:06:59,840 --> 00:07:02,160
very first employee that we try to

180
00:07:02,160 --> 00:07:04,479
target

181
00:07:04,960 --> 00:07:06,960
so

182
00:07:06,960 --> 00:07:09,680
well stating the obvious we cannot have

183
00:07:09,680 --> 00:07:13,199
this kind of bad smells within our urls

184
00:07:13,199 --> 00:07:15,120
so just like pointing to

185
00:07:15,120 --> 00:07:17,120
directly pointing to the extension

186
00:07:17,120 --> 00:07:19,520
because obviously the automated and

187
00:07:19,520 --> 00:07:21,759
especially during the in the machine

188
00:07:21,759 --> 00:07:24,080
learning times automated models are

189
00:07:24,080 --> 00:07:25,919
going to be very sensitive about it

190
00:07:25,919 --> 00:07:27,840
therefore we are applying this this idea

191
00:07:27,840 --> 00:07:29,840
of linting our phishing males before we

192
00:07:29,840 --> 00:07:32,479
actually fire them away so that we won't

193
00:07:32,479 --> 00:07:34,960
be leaving this kind of smelly traces

194
00:07:34,960 --> 00:07:37,199
and among the others what we found is

195
00:07:37,199 --> 00:07:39,440
that for instance

196
00:07:39,440 --> 00:07:42,080
even even such an idea of embedding

197
00:07:42,080 --> 00:07:45,759
images and encoded within us the base64

198
00:07:45,759 --> 00:07:49,039
blobs within the html is going to impact

199
00:07:49,039 --> 00:07:50,560
the number of

200
00:07:50,560 --> 00:07:53,120
anti-spam rules being matched on our

201
00:07:53,120 --> 00:07:56,400
email so we found that it's so much

202
00:07:56,400 --> 00:07:59,360
easier and it's so much safer to just um

203
00:07:59,360 --> 00:08:01,440
point to the remotely hosted images

204
00:08:01,440 --> 00:08:04,000
while still risking the the notion that

205
00:08:04,000 --> 00:08:06,160
the employee might not enable fetching

206
00:08:06,160 --> 00:08:08,400
remote resources we are okay with that

207
00:08:08,400 --> 00:08:09,599
as well as

208
00:08:09,599 --> 00:08:12,160
trying to maybe attach them to the email

209
00:08:12,160 --> 00:08:14,080
just as the just there's just the way

210
00:08:14,080 --> 00:08:16,240
our as we are attaching the images

211
00:08:16,240 --> 00:08:18,400
within the signature

212
00:08:18,400 --> 00:08:21,759
so the base64 is now is is a not so not

213
00:08:21,759 --> 00:08:23,840
so stable approach to go about designing

214
00:08:23,840 --> 00:08:25,360
htmls

215
00:08:25,360 --> 00:08:26,479
and

216
00:08:26,479 --> 00:08:28,479
it might be a little bit hard to explain

217
00:08:28,479 --> 00:08:30,400
but what we found during our trials and

218
00:08:30,400 --> 00:08:32,719
errors was that this like convoluted

219
00:08:32,719 --> 00:08:34,799
approach of free next hop servers

220
00:08:34,799 --> 00:08:37,120
targeting the the office 365

221
00:08:37,120 --> 00:08:39,360
environments worked the best for us so

222
00:08:39,360 --> 00:08:40,799
the first one will be having this like

223
00:08:40,799 --> 00:08:43,039
goldfish on the ec2 instance then there

224
00:08:43,039 --> 00:08:46,160
is going to be this like vanilla empty

225
00:08:46,160 --> 00:08:49,200
ec2 redirector that that just pushes

226
00:08:49,200 --> 00:08:51,600
during and just pushes on the health of

227
00:08:51,600 --> 00:08:54,320
of on behalf of soccer all the emails um

228
00:08:54,320 --> 00:08:56,800
targeting the 586

229
00:08:56,800 --> 00:09:00,000
57 tcp port and then redirecting them

230
00:09:00,000 --> 00:09:02,320
away to the smtp which is a high

231
00:09:02,320 --> 00:09:05,519
reputational well-trusted mail delivery

232
00:09:05,519 --> 00:09:07,680
system and therefore office 365 will

233
00:09:07,680 --> 00:09:09,760
just send us back all the way all the

234
00:09:09,760 --> 00:09:11,360
way to the very beginning

235
00:09:11,360 --> 00:09:13,680
on the from

236
00:09:13,680 --> 00:09:16,000
on the received service examination so

237
00:09:16,000 --> 00:09:18,240
it will sense that okay this is the smt

238
00:09:18,240 --> 00:09:19,839
and this is the gmail that provided me

239
00:09:19,839 --> 00:09:21,680
that email and gmail is going to do the

240
00:09:21,680 --> 00:09:24,720
same about our our vanilla ec2 and

241
00:09:24,720 --> 00:09:26,480
instance and it's not going to sense

242
00:09:26,480 --> 00:09:28,320
anything dodgy about it because it's

243
00:09:28,320 --> 00:09:30,959
like the ipv points back to the aws and

244
00:09:30,959 --> 00:09:33,440
state therefore well this kind of like

245
00:09:33,440 --> 00:09:36,160
um this might be

246
00:09:36,160 --> 00:09:39,839
well at a well well trusted ip pool so

247
00:09:39,839 --> 00:09:42,560
gmail may be not so picky about it and

248
00:09:42,560 --> 00:09:44,640
therefore we can we can deliver the

249
00:09:44,640 --> 00:09:46,399
emails to the office 365 at least this

250
00:09:46,399 --> 00:09:48,480
is what i what we are speculating how

251
00:09:48,480 --> 00:09:49,920
this might work because obviously it's

252
00:09:49,920 --> 00:09:51,839
like black box therefore we cannot be

253
00:09:51,839 --> 00:09:54,880
sure also what we observed is that after

254
00:09:54,880 --> 00:09:56,399
after delivering like this fourth of

255
00:09:56,399 --> 00:09:58,560
five emails the defender is going to

256
00:09:58,560 --> 00:10:01,360
cool down on us but then after like

257
00:10:01,360 --> 00:10:03,120
waiting a few hours we'll be able to to

258
00:10:03,120 --> 00:10:06,000
to to bring back on the same domain that

259
00:10:06,000 --> 00:10:08,320
we used to deliver this first emails

260
00:10:08,320 --> 00:10:10,959
now with regards to the initial access

261
00:10:10,959 --> 00:10:12,800
there are a few approaches that still

262
00:10:12,800 --> 00:10:15,920
work and and of course this is very very

263
00:10:15,920 --> 00:10:17,120
highly

264
00:10:17,120 --> 00:10:19,120
environment as well as company

265
00:10:19,120 --> 00:10:21,519
independent therefore some of the tricks

266
00:10:21,519 --> 00:10:23,200
might work for your environment whereas

267
00:10:23,200 --> 00:10:26,640
they won't work for hour so um the gift

268
00:10:26,640 --> 00:10:28,959
that keeps on giving is the

269
00:10:28,959 --> 00:10:32,000
is the idea to fish to persist instead

270
00:10:32,000 --> 00:10:34,160
of fishing to access and it was and

271
00:10:34,160 --> 00:10:36,640
there was this very nicely nicely put up

272
00:10:36,640 --> 00:10:38,720
the article uh coming from madhan from

273
00:10:38,720 --> 00:10:40,880
spectre ops which is exactly the

274
00:10:40,880 --> 00:10:42,480
described what we were thinking about

275
00:10:42,480 --> 00:10:45,040
for the past month but not in but but we

276
00:10:45,040 --> 00:10:46,959
couldn't just put up in this elegant

277
00:10:46,959 --> 00:10:49,839
words wording as he did so um

278
00:10:49,839 --> 00:10:51,920
for instance it's so much better it's so

279
00:10:51,920 --> 00:10:54,160
much more reliable to just say drop the

280
00:10:54,160 --> 00:10:56,880
dll into a very specific sweet spot and

281
00:10:56,880 --> 00:10:59,680
have that dll follow the proxy or this

282
00:10:59,680 --> 00:11:02,399
side loading idea so for instance we

283
00:11:02,399 --> 00:11:03,120
could

284
00:11:03,120 --> 00:11:06,880
we could very easily weaponize um the uh

285
00:11:06,880 --> 00:11:09,040
the side loading against themes where we

286
00:11:09,040 --> 00:11:11,120
can just easily find that it teams is

287
00:11:11,120 --> 00:11:13,519
trying to load up the version dll coming

288
00:11:13,519 --> 00:11:16,560
out from this from its microsoft teams

289
00:11:16,560 --> 00:11:18,560
directory within the local app data

290
00:11:18,560 --> 00:11:20,480
therefore we can easily craft our own

291
00:11:20,480 --> 00:11:24,480
dodgy dll and just persist from the from

292
00:11:24,480 --> 00:11:27,200
inside of the vb script or the vba just

293
00:11:27,200 --> 00:11:29,120
easily while still the chaining the file

294
00:11:29,120 --> 00:11:32,399
of right and exact steps

295
00:11:32,399 --> 00:11:35,120
yeah so um i wouldn't be so inclined

296
00:11:35,120 --> 00:11:37,200
into using the typical windows script

297
00:11:37,200 --> 00:11:40,000
host kind of file vectors things like

298
00:11:40,000 --> 00:11:43,120
hta's jscrips and db scripts used to

299
00:11:43,120 --> 00:11:45,440
work for for for many more for many

300
00:11:45,440 --> 00:11:48,800
years but but now when we have the era

301
00:11:48,800 --> 00:11:52,160
of of very aggressively configured edrs

302
00:11:52,160 --> 00:11:55,040
or epp products as well as proxies that

303
00:11:55,040 --> 00:11:57,680
that even tries to pull the to extract

304
00:11:57,680 --> 00:11:59,680
the files and and and pass them to the

305
00:11:59,680 --> 00:12:01,920
automated data nation detonation

306
00:12:01,920 --> 00:12:04,480
environments so that's such as we can we

307
00:12:04,480 --> 00:12:07,440
can um we can just briefly mention about

308
00:12:07,440 --> 00:12:09,600
the z-scaler who is having this like

309
00:12:09,600 --> 00:12:10,800
apex

310
00:12:10,800 --> 00:12:12,079
sandbox

311
00:12:12,079 --> 00:12:15,040
bundled within it so some of the proxy

312
00:12:15,040 --> 00:12:17,200
systems are very aggressively

313
00:12:17,200 --> 00:12:19,360
aggressive towards the files therefore

314
00:12:19,360 --> 00:12:22,320
using that kind of all the vectors might

315
00:12:22,320 --> 00:12:24,880
not be reliable for our highly

316
00:12:24,880 --> 00:12:27,440
scrutinized environments so for instance

317
00:12:27,440 --> 00:12:30,480
um oh well obviously transmitting the

318
00:12:30,480 --> 00:12:33,600
executable ones to just msc msi files

319
00:12:33,600 --> 00:12:36,240
installation and installation systems as

320
00:12:36,240 --> 00:12:39,680
well as executables just simply exists

321
00:12:39,680 --> 00:12:42,240
well however however this was convenient

322
00:12:42,240 --> 00:12:44,480
for pretty long time it's not much more

323
00:12:44,480 --> 00:12:46,800
and reliable as we can already know it

324
00:12:46,800 --> 00:12:48,880
and there was this like very nice

325
00:12:48,880 --> 00:12:50,560
research coming from the george and

326
00:12:50,560 --> 00:12:53,040
constantinos back like maybe a year or

327
00:12:53,040 --> 00:12:55,600
two years ago and they have described

328
00:12:55,600 --> 00:12:57,360
this like this

329
00:12:57,360 --> 00:13:01,040
very nice and hefty ideas for bypassing

330
00:13:01,040 --> 00:13:03,680
specific products and we've been trying

331
00:13:03,680 --> 00:13:06,560
to um we've been like heavily utilizing

332
00:13:06,560 --> 00:13:09,360
their their outcomes and what we can for

333
00:13:09,360 --> 00:13:12,160
instance uh say here that some of the

334
00:13:12,160 --> 00:13:14,079
executable files will just slip through

335
00:13:14,079 --> 00:13:16,079
the product because of some unknown

336
00:13:16,079 --> 00:13:18,160
reasons and this is the exact exactly

337
00:13:18,160 --> 00:13:19,360
the same

338
00:13:19,360 --> 00:13:21,600
for the crowd strike which is like known

339
00:13:21,600 --> 00:13:24,480
to be susceptible to having these cpl

340
00:13:24,480 --> 00:13:27,360
files and the cpl file is just just it's

341
00:13:27,360 --> 00:13:30,000
just a simple dll that exposes merely a

342
00:13:30,000 --> 00:13:32,560
single export and also there is this

343
00:13:32,560 --> 00:13:34,959
idea that we shouldn't be reliable on

344
00:13:34,959 --> 00:13:37,760
having plain dlls having this the

345
00:13:37,760 --> 00:13:40,480
malicious code within ddl dll main is

346
00:13:40,480 --> 00:13:42,000
going to cause us a lot of problems

347
00:13:42,000 --> 00:13:43,600
because of the loader lock issues

348
00:13:43,600 --> 00:13:45,360
therefore you might be better off

349
00:13:45,360 --> 00:13:48,399
finding primitives to to run your dodgy

350
00:13:48,399 --> 00:13:50,320
code from from from the exported

351
00:13:50,320 --> 00:13:52,320
functionality instead of dll main

352
00:13:52,320 --> 00:13:53,839
because you'll be try you'll be

353
00:13:53,839 --> 00:13:55,440
experiencing this like

354
00:13:55,440 --> 00:13:57,600
this like undefined unpredictable

355
00:13:57,600 --> 00:13:59,360
behaviors when you try to load your

356
00:13:59,360 --> 00:14:01,199
shell code from inside of the dln just

357
00:14:01,199 --> 00:14:02,560
because of this loader locations

358
00:14:02,560 --> 00:14:04,880
therefore cpl is like perfect idea to

359
00:14:04,880 --> 00:14:08,160
weaponize that kind of thinking about

360
00:14:08,160 --> 00:14:09,680
the dlls

361
00:14:09,680 --> 00:14:12,880
and also the ln car files the ln case

362
00:14:12,880 --> 00:14:15,760
are such such a detailed dedicated

363
00:14:15,760 --> 00:14:18,480
threat we cannot even think about um we

364
00:14:18,480 --> 00:14:21,040
cannot even imagine why is that why is

365
00:14:21,040 --> 00:14:23,360
that threat still do i notice during the

366
00:14:23,360 --> 00:14:26,160
2022 where microsoft is so aggressive

367
00:14:26,160 --> 00:14:27,920
towards the macros and he's so

368
00:14:27,920 --> 00:14:30,399
aggressive towards applying the mark of

369
00:14:30,399 --> 00:14:32,959
the web idea towards plenty other

370
00:14:32,959 --> 00:14:35,680
other file formats why don't why do they

371
00:14:35,680 --> 00:14:37,519
don't do the same thing about the alien

372
00:14:37,519 --> 00:14:40,720
case like we've been trying to come up

373
00:14:40,720 --> 00:14:43,760
with observation how much common is for

374
00:14:43,760 --> 00:14:46,639
our employees to to use to transmit ln

375
00:14:46,639 --> 00:14:50,000
card files and we've seen uh as as as as

376
00:14:50,000 --> 00:14:52,079
it was also from my talks with with the

377
00:14:52,079 --> 00:14:54,320
bluetooth guys who have been trying to

378
00:14:54,320 --> 00:14:56,480
to do this like thread hunting queries

379
00:14:56,480 --> 00:14:59,040
that the ln case could be

380
00:14:59,040 --> 00:15:00,880
could be quite easily blocked on the

381
00:15:00,880 --> 00:15:02,800
perimeter of the customers therefore we

382
00:15:02,800 --> 00:15:04,480
might be just suggesting them to to

383
00:15:04,480 --> 00:15:06,639
block that extension right away without

384
00:15:06,639 --> 00:15:08,959
losing without losing any business use

385
00:15:08,959 --> 00:15:09,920
cases

386
00:15:09,920 --> 00:15:13,319
so yeah

387
00:15:14,480 --> 00:15:17,279
as well as html files the html

388
00:15:17,279 --> 00:15:19,519
are not so anticipated as the malware

389
00:15:19,519 --> 00:15:21,920
vector and still they can be delivered

390
00:15:21,920 --> 00:15:24,320
even in even inside of the attachment

391
00:15:24,320 --> 00:15:26,639
and the html can easily contain the

392
00:15:26,639 --> 00:15:29,040
smuggling payload therefore constituting

393
00:15:29,040 --> 00:15:31,440
all the rest of the infection chain just

394
00:15:31,440 --> 00:15:34,639
from inside of the ht of the simple

395
00:15:34,639 --> 00:15:36,800
email attachment and what's funny about

396
00:15:36,800 --> 00:15:39,199
the this email attachments is that we

397
00:15:39,199 --> 00:15:41,920
can apply this this really old trick of

398
00:15:41,920 --> 00:15:44,560
just inputting this this this dandy

399
00:15:44,560 --> 00:15:47,199
unicode byte into the uni into the file

400
00:15:47,199 --> 00:15:49,600
name so that it will mangle with with

401
00:15:49,600 --> 00:15:51,680
with how the file name is being

402
00:15:51,680 --> 00:15:54,399
printed and represented back to the user

403
00:15:54,399 --> 00:15:56,800
and therefore like trying to

404
00:15:56,800 --> 00:15:59,120
to um to fool

405
00:15:59,120 --> 00:16:01,680
the more tech savvy users into thinking

406
00:16:01,680 --> 00:16:03,680
that they are dealing with this like

407
00:16:03,680 --> 00:16:05,440
maybe a little bit more legitimate files

408
00:16:05,440 --> 00:16:09,079
such as fax one

409
00:16:12,480 --> 00:16:13,680
also

410
00:16:13,680 --> 00:16:14,800
demo

411
00:16:14,800 --> 00:16:17,839
the vba amount bba malware well we

412
00:16:17,839 --> 00:16:20,639
consider that the vba isn't going any

413
00:16:20,639 --> 00:16:21,600
anyway

414
00:16:21,600 --> 00:16:24,639
isn't going away anymore soon because of

415
00:16:24,639 --> 00:16:25,360
the

416
00:16:25,360 --> 00:16:29,680
how much is it used by the big players

417
00:16:29,680 --> 00:16:31,440
to just be

418
00:16:31,440 --> 00:16:33,440
such as hedge funds companies and the

419
00:16:33,440 --> 00:16:36,560
financial sector and the brokers i even

420
00:16:36,560 --> 00:16:39,360
have my my friend who is a lawyer and he

421
00:16:39,360 --> 00:16:41,519
told to me that he's so used to working

422
00:16:41,519 --> 00:16:43,759
with vba macros even lawyers like

423
00:16:43,759 --> 00:16:45,600
colleague lawyers are using that kind

424
00:16:45,600 --> 00:16:46,959
and that that mechanism that

425
00:16:46,959 --> 00:16:49,120
functionality because they they also

426
00:16:49,120 --> 00:16:51,360
have their own automated excel

427
00:16:51,360 --> 00:16:53,680
spreadsheets that somebody has written

428
00:16:53,680 --> 00:16:55,759
like years ago that they are using

429
00:16:55,759 --> 00:16:58,079
inside of their companies therefore it

430
00:16:58,079 --> 00:17:01,279
is still a viable approach targeting

431
00:17:01,279 --> 00:17:02,720
lesser

432
00:17:02,720 --> 00:17:05,039
lesser aware users

433
00:17:05,039 --> 00:17:07,839
that the yellow ribbon enabling them

434
00:17:07,839 --> 00:17:10,319
making them enable macros is not so it's

435
00:17:10,319 --> 00:17:12,160
not so scary after all because we've

436
00:17:12,160 --> 00:17:14,160
used to work with this kind of files

437
00:17:14,160 --> 00:17:16,160
therefore we can we can go about it and

438
00:17:16,160 --> 00:17:18,559
there was this also very nice podcast

439
00:17:18,559 --> 00:17:20,959
with risky business where the ceo of

440
00:17:20,959 --> 00:17:22,959
crowdstrike shares

441
00:17:22,959 --> 00:17:26,160
some of his insights with what he

442
00:17:26,160 --> 00:17:28,799
what what he learned about

443
00:17:28,799 --> 00:17:31,200
from talking with microsoft on this

444
00:17:31,200 --> 00:17:34,240
pushing back on macro's decision and i

445
00:17:34,240 --> 00:17:35,760
highly recommend to going back and

446
00:17:35,760 --> 00:17:37,280
listening to that podcast because it's

447
00:17:37,280 --> 00:17:39,120
very insightful

448
00:17:39,120 --> 00:17:40,240
and also

449
00:17:40,240 --> 00:17:42,720
we can think of like millions of ways we

450
00:17:42,720 --> 00:17:45,200
could actually weaponize dba to bring us

451
00:17:45,200 --> 00:17:47,280
the code execution primitive but

452
00:17:47,280 --> 00:17:48,960
according to our according to our

453
00:17:48,960 --> 00:17:50,160
researchers

454
00:17:50,160 --> 00:17:53,520
we have this like maybe 20 of different

455
00:17:53,520 --> 00:17:55,360
um code patterns implemented within the

456
00:17:55,360 --> 00:17:58,000
vba and and the three ones that are the

457
00:17:58,000 --> 00:17:59,520
most effective

458
00:17:59,520 --> 00:18:01,440
that we found the most effective were

459
00:18:01,440 --> 00:18:04,480
the were the simple file droppers as

460
00:18:04,480 --> 00:18:07,440
well as the idea of james forshaw

461
00:18:07,440 --> 00:18:10,000
for for having the serialization from

462
00:18:10,000 --> 00:18:12,559
inside of the vba code through the use

463
00:18:12,559 --> 00:18:14,640
of.net interoperability

464
00:18:14,640 --> 00:18:17,440
interfaces and xsl transfer mode which

465
00:18:17,440 --> 00:18:19,120
which applies the same

466
00:18:19,120 --> 00:18:21,039
which applies the same

467
00:18:21,039 --> 00:18:22,000
logic

468
00:18:22,000 --> 00:18:24,320
also there are some more or less and

469
00:18:24,320 --> 00:18:26,799
more more or less anticipated file

470
00:18:26,799 --> 00:18:29,520
formats so just just plain simple word

471
00:18:29,520 --> 00:18:31,840
we all are aware of the remote template

472
00:18:31,840 --> 00:18:33,760
trick within the words when we can we

473
00:18:33,760 --> 00:18:36,880
can just deliver these the plain simple

474
00:18:36,880 --> 00:18:39,120
docs file without the macros which will

475
00:18:39,120 --> 00:18:40,080
then be

476
00:18:40,080 --> 00:18:42,240
having having this like a reference to

477
00:18:42,240 --> 00:18:44,160
the remotely hosted template the

478
00:18:44,160 --> 00:18:46,160
template can have arbitrary example

479
00:18:46,160 --> 00:18:48,960
meaning we don't need to follow this dm

480
00:18:48,960 --> 00:18:51,600
kind of kind of naming therefore we

481
00:18:51,600 --> 00:18:53,679
could dechain the infection into two

482
00:18:53,679 --> 00:18:55,679
stages first delivering the macro less

483
00:18:55,679 --> 00:18:58,400
document then having the macro enabled

484
00:18:58,400 --> 00:19:01,440
payload delivered back to us during the

485
00:19:01,440 --> 00:19:03,280
during the remotely remote resources

486
00:19:03,280 --> 00:19:04,960
fetching and the same approach can be

487
00:19:04,960 --> 00:19:07,200
applied to the excels by the use of

488
00:19:07,200 --> 00:19:09,280
mechanisms called custom ui

489
00:19:09,280 --> 00:19:11,039
which was designed to provide the

490
00:19:11,039 --> 00:19:13,280
customers the ability to customize the

491
00:19:13,280 --> 00:19:15,600
ribbon within the office applications

492
00:19:15,600 --> 00:19:17,760
and also powerpoint powerpoint is also

493
00:19:17,760 --> 00:19:19,840
not so much anticipated format and we

494
00:19:19,840 --> 00:19:21,600
found that in our communi

495
00:19:21,600 --> 00:19:23,440
and i found that in while working with

496
00:19:23,440 --> 00:19:26,240
my customers that they haven't been

497
00:19:26,240 --> 00:19:28,720
experiencing macro enabled power points

498
00:19:28,720 --> 00:19:30,160
therefore they never considered that the

499
00:19:30,160 --> 00:19:33,120
powerpoint might be the dangerous one

500
00:19:33,120 --> 00:19:36,080
and also the same observation applies to

501
00:19:36,080 --> 00:19:38,160
lesser known and more even exotic

502
00:19:38,160 --> 00:19:41,600
formats but they don't share the same

503
00:19:41,600 --> 00:19:44,320
risk exposure because the visual or the

504
00:19:44,320 --> 00:19:46,480
project is not so commonly pre-installed

505
00:19:46,480 --> 00:19:47,760
there are these like additional

506
00:19:47,760 --> 00:19:49,520
applications but still we need to be

507
00:19:49,520 --> 00:19:51,600
aware that while targeting critical

508
00:19:51,600 --> 00:19:52,640
infrastructure

509
00:19:52,640 --> 00:19:54,799
sectors there are these architects and

510
00:19:54,799 --> 00:19:56,799
engineers who are used to work with cad

511
00:19:56,799 --> 00:19:59,760
software and cad software typically um

512
00:19:59,760 --> 00:20:02,000
has this backward compatibility with the

513
00:20:02,000 --> 00:20:04,080
visual diagrams therefore devising

514
00:20:04,080 --> 00:20:06,960
malware for visio will get the power

515
00:20:06,960 --> 00:20:09,919
plant uh sector infected as well because

516
00:20:09,919 --> 00:20:11,679
of the software that the that the

517
00:20:11,679 --> 00:20:13,679
engineers and architects are using there

518
00:20:13,679 --> 00:20:16,320
so we are so we see that there are

519
00:20:16,320 --> 00:20:18,880
plenty more of of dodgy extensions that

520
00:20:18,880 --> 00:20:21,919
we could be aware of and therefore

521
00:20:21,919 --> 00:20:24,000
instruct our customers to protect

522
00:20:24,000 --> 00:20:26,720
themselves from

523
00:20:29,360 --> 00:20:31,760
and to just support what we have

524
00:20:31,760 --> 00:20:33,760
what we have already said the dba

525
00:20:33,760 --> 00:20:36,400
runtime engine is not only present

526
00:20:36,400 --> 00:20:39,039
within the microsoft products it is very

527
00:20:39,039 --> 00:20:42,480
very ubiquitous among the among the

528
00:20:42,480 --> 00:20:44,240
architects and engineers especially in

529
00:20:44,240 --> 00:20:47,200
cad software as well as other

530
00:20:47,200 --> 00:20:50,000
exotic ones such as um arcmap g-s

531
00:20:50,000 --> 00:20:53,039
templates and and even oscilloscopes may

532
00:20:53,039 --> 00:20:57,200
have this support for vba vba code which

533
00:20:57,200 --> 00:20:59,039
which is like kind of an interesting

534
00:20:59,039 --> 00:21:01,440
therefore this increases the threat

535
00:21:01,440 --> 00:21:03,200
surface that there is actually behind

536
00:21:03,200 --> 00:21:06,159
the vba story

537
00:21:06,480 --> 00:21:09,120
and now a little bit backstory of the of

538
00:21:09,120 --> 00:21:12,000
the containerization idea

539
00:21:12,000 --> 00:21:13,919
so we we

540
00:21:13,919 --> 00:21:15,919
so i assume that we are aware of the

541
00:21:15,919 --> 00:21:18,640
fact that microsoft tried to apply this

542
00:21:18,640 --> 00:21:21,600
this quite a nicely sounding logic of

543
00:21:21,600 --> 00:21:23,919
blocking macros where they

544
00:21:23,919 --> 00:21:25,760
when whenever they have this like taint

545
00:21:25,760 --> 00:21:28,159
flag that they are marked that they came

546
00:21:28,159 --> 00:21:29,919
from the internet therefore this these

547
00:21:29,919 --> 00:21:31,440
files cannot be trusted because they

548
00:21:31,440 --> 00:21:33,679
come from the untrusted source so the

549
00:21:33,679 --> 00:21:35,360
macro is decided so the office

550
00:21:35,360 --> 00:21:37,679
applications are deciding that well

551
00:21:37,679 --> 00:21:40,000
since that file uh file source cannot be

552
00:21:40,000 --> 00:21:42,240
trusted therefore i am not willing to

553
00:21:42,240 --> 00:21:44,880
run its code therefore i'll i'll make

554
00:21:44,880 --> 00:21:47,120
the decision for the employee instead

555
00:21:47,120 --> 00:21:49,679
for the user instead and just and just

556
00:21:49,679 --> 00:21:51,679
make him unable to even

557
00:21:51,679 --> 00:21:54,720
to even enable macros so since we've

558
00:21:54,720 --> 00:21:56,320
been trying to find that kind of

559
00:21:56,320 --> 00:21:59,440
functionality applied to the office 365

560
00:21:59,440 --> 00:22:00,960
we've seen the uh microsoft

561
00:22:00,960 --> 00:22:03,120
representatives telling that they have

562
00:22:03,120 --> 00:22:05,520
this very robust protection again

563
00:22:05,520 --> 00:22:07,679
against the mark of the web

564
00:22:07,679 --> 00:22:09,840
well i couldn't find the proper version

565
00:22:09,840 --> 00:22:12,400
of the office 365 environment

566
00:22:12,400 --> 00:22:14,559
environment maybe you can just approach

567
00:22:14,559 --> 00:22:15,280
me

568
00:22:15,280 --> 00:22:17,280
after this talk and and and point me to

569
00:22:17,280 --> 00:22:19,679
the specific installation that has this

570
00:22:19,679 --> 00:22:21,520
up that has this feature enforced but i

571
00:22:21,520 --> 00:22:23,360
couldn't just um

572
00:22:23,360 --> 00:22:26,080
just just reproduce it so um so we

573
00:22:26,080 --> 00:22:28,640
didn't yet found the the exactly running

574
00:22:28,640 --> 00:22:31,039
and working idea for blocking

575
00:22:31,039 --> 00:22:32,640
motevo enabled

576
00:22:32,640 --> 00:22:35,280
documents but so so in practice it means

577
00:22:35,280 --> 00:22:37,679
that currently this doesn't really act

578
00:22:37,679 --> 00:22:39,440
as in the evasion we have the evasion

579
00:22:39,440 --> 00:22:41,039
before even the the security

580
00:22:41,039 --> 00:22:42,640
measurements was implemented at least

581
00:22:42,640 --> 00:22:45,520
this is like my point of view but it can

582
00:22:45,520 --> 00:22:48,159
act as the way of showing to the

583
00:22:48,159 --> 00:22:50,480
customers that there are way more much

584
00:22:50,480 --> 00:22:52,000
more extensions that should be

585
00:22:52,000 --> 00:22:54,559
considered us as dangerous and therefore

586
00:22:54,559 --> 00:22:58,080
untrusted such as isos or even imgs

587
00:22:58,080 --> 00:23:00,240
which are not so popular as the concept

588
00:23:00,240 --> 00:23:03,360
of iso and img is simply a synonym to

589
00:23:03,360 --> 00:23:05,039
the iso we can just simply rename the

590
00:23:05,039 --> 00:23:06,799
extension and we will have the same iso

591
00:23:06,799 --> 00:23:09,760
inside of it and we will be probably

592
00:23:09,760 --> 00:23:11,440
aware that the files within the

593
00:23:11,440 --> 00:23:13,679
container will not have the mark of the

594
00:23:13,679 --> 00:23:14,799
web file

595
00:23:14,799 --> 00:23:18,080
paint flag propagated therefore even if

596
00:23:18,080 --> 00:23:20,640
the container itself is considered as

597
00:23:20,640 --> 00:23:22,400
coming from untrusted the file inside of

598
00:23:22,400 --> 00:23:25,039
that containment container won't apply

599
00:23:25,039 --> 00:23:26,000
the same

600
00:23:26,000 --> 00:23:28,159
the same observation

601
00:23:28,159 --> 00:23:30,480
and also uh it was quite surprising to

602
00:23:30,480 --> 00:23:33,440
us that during the actual engagement

603
00:23:33,440 --> 00:23:35,600
while we were constantly observing the

604
00:23:35,600 --> 00:23:37,679
print screens coming from back of our

605
00:23:37,679 --> 00:23:40,159
beacons we just like observed these

606
00:23:40,159 --> 00:23:42,640
employees that were you that were

607
00:23:42,640 --> 00:23:45,679
working with these pdf files that had

608
00:23:45,679 --> 00:23:48,240
like 10 and more files embedded inside

609
00:23:48,240 --> 00:23:50,640
of them and that was this uh and and

610
00:23:50,640 --> 00:23:53,520
this was the eureka idea for us that hey

611
00:23:53,520 --> 00:23:55,760
since the employees are using and and do

612
00:23:55,760 --> 00:23:58,080
know they are familiarized with this

613
00:23:58,080 --> 00:24:00,240
mechanism of having files embedded into

614
00:24:00,240 --> 00:24:02,400
the pdf we are going to weaponize that

615
00:24:02,400 --> 00:24:04,799
and we we're going to reuse that idea

616
00:24:04,799 --> 00:24:07,600
for our endeavors and it kind of worked

617
00:24:07,600 --> 00:24:09,600
so we can also store files within the

618
00:24:09,600 --> 00:24:11,840
pdfs and have even them quite

619
00:24:11,840 --> 00:24:14,480
automatically um popped in front of the

620
00:24:14,480 --> 00:24:16,640
user as and and as you can see from the

621
00:24:16,640 --> 00:24:18,400
social engineering perspective

622
00:24:18,400 --> 00:24:20,559
that prompt is already having this like

623
00:24:20,559 --> 00:24:22,880
secure defaults and the

624
00:24:22,880 --> 00:24:24,960
enabling button is already is already

625
00:24:24,960 --> 00:24:26,320
highlighted therefore just simply

626
00:24:26,320 --> 00:24:28,320
hitting enter or just simply forgetting

627
00:24:28,320 --> 00:24:30,640
about to read all of this known all of

628
00:24:30,640 --> 00:24:32,559
this boring stuff that is on the

629
00:24:32,559 --> 00:24:35,840
dialogue is enough to get ones infected

630
00:24:35,840 --> 00:24:37,600
and now comes the beauty of html

631
00:24:37,600 --> 00:24:40,880
smuggling so the idea of html html

632
00:24:40,880 --> 00:24:43,440
smuggling is now for a couple of years

633
00:24:43,440 --> 00:24:44,960
and we all learned

634
00:24:44,960 --> 00:24:47,039
i guess that at this i have learned

635
00:24:47,039 --> 00:24:49,279
about this idea from from the outside

636
00:24:49,279 --> 00:24:51,440
guys who just shared this very cool

637
00:24:51,440 --> 00:24:54,240
research about the uh about the notion

638
00:24:54,240 --> 00:24:56,240
of having malware embedded within the

639
00:24:56,240 --> 00:24:59,360
html which which in fro

640
00:24:59,360 --> 00:25:01,520
which in turn contains this javascript

641
00:25:01,520 --> 00:25:03,440
so there is this javascript automation

642
00:25:03,440 --> 00:25:06,159
that will unpack the file and drop it to

643
00:25:06,159 --> 00:25:08,480
the hard drive uh during the during the

644
00:25:08,480 --> 00:25:10,880
drive by uh occasion

645
00:25:10,880 --> 00:25:13,440
and it is just so this is just so

646
00:25:13,440 --> 00:25:14,480
surprising

647
00:25:14,480 --> 00:25:16,080
that this idea

648
00:25:16,080 --> 00:25:18,480
get our malicious files regardless of

649
00:25:18,480 --> 00:25:20,240
their extension regardless of their

650
00:25:20,240 --> 00:25:22,000
contents uh

651
00:25:22,000 --> 00:25:24,640
easily just right into the

652
00:25:24,640 --> 00:25:27,200
into the victim's hard drive because the

653
00:25:27,200 --> 00:25:30,159
proxies as well as any other network

654
00:25:30,159 --> 00:25:32,480
network positioned systems have no way

655
00:25:32,480 --> 00:25:34,320
to differentiate whether the html or

656
00:25:34,320 --> 00:25:37,039
javascript is dodgy and even if they

657
00:25:37,039 --> 00:25:38,960
even if they were trying to

658
00:25:38,960 --> 00:25:41,919
to just hook into this like dodgy words

659
00:25:41,919 --> 00:25:43,919
we could apply heavy javascript

660
00:25:43,919 --> 00:25:46,159
obfuscations therefore this is not the

661
00:25:46,159 --> 00:25:49,120
um it's not the best idea for them to to

662
00:25:49,120 --> 00:25:51,360
to even try to sense dodginess within

663
00:25:51,360 --> 00:25:53,440
the javascript and

664
00:25:53,440 --> 00:25:55,760
the only way to protect against it is to

665
00:25:55,760 --> 00:25:58,080
is to come up with clever and robust

666
00:25:58,080 --> 00:26:00,640
hips rules on the downloads directory

667
00:26:00,640 --> 00:26:02,400
that the customers could apply so for

668
00:26:02,400 --> 00:26:04,640
instance running the cpl files from the

669
00:26:04,640 --> 00:26:06,799
downloads directory this is an anomaly

670
00:26:06,799 --> 00:26:08,559
that we could that we could model our

671
00:26:08,559 --> 00:26:10,159
detections around therefore we could

672
00:26:10,159 --> 00:26:12,320
kill it by by simply denying system to

673
00:26:12,320 --> 00:26:14,559
even to even think about running cpls

674
00:26:14,559 --> 00:26:17,120
from the downloads ones

675
00:26:17,120 --> 00:26:19,120
but also the this idea will only be

676
00:26:19,120 --> 00:26:21,600
effective if we up if we anticipate if

677
00:26:21,600 --> 00:26:24,720
we if we model the fact that our landing

678
00:26:24,720 --> 00:26:26,640
pages are going to be heavily scanned by

679
00:26:26,640 --> 00:26:29,120
the automated sandboxes proxies and even

680
00:26:29,120 --> 00:26:30,880
the prime guys of bluetooth analysis so

681
00:26:30,880 --> 00:26:32,000
we need to come up with this

682
00:26:32,000 --> 00:26:35,279
anti-headless timing device even even

683
00:26:35,279 --> 00:26:39,279
the post post delivery and redirection

684
00:26:39,279 --> 00:26:40,960
as well as we might be thinking about

685
00:26:40,960 --> 00:26:42,559
deploying decoy documents so-called

686
00:26:42,559 --> 00:26:46,320
plausible deniability something

687
00:26:46,320 --> 00:26:48,159
and then as you can see as we can see

688
00:26:48,159 --> 00:26:50,640
all there is like so much so much to

689
00:26:50,640 --> 00:26:54,159
protect against like um during my uh my

690
00:26:54,159 --> 00:26:56,400
my attempt to collect every extensions

691
00:26:56,400 --> 00:26:59,039
that i would see uh quite nicely

692
00:26:59,039 --> 00:27:03,120
weaponized i came up with this 70 73

693
00:27:03,120 --> 00:27:05,840
extensions list maybe there's much more

694
00:27:05,840 --> 00:27:08,159
these are at least the ones that i think

695
00:27:08,159 --> 00:27:09,679
that i would be able to weaponize

696
00:27:09,679 --> 00:27:11,840
therefore they they pose actual risk to

697
00:27:11,840 --> 00:27:14,240
the customers that we are protecting so

698
00:27:14,240 --> 00:27:16,880
just simply just simply trying to um to

699
00:27:16,880 --> 00:27:18,320
discuss with them

700
00:27:18,320 --> 00:27:20,399
the the possibility of blocking these

701
00:27:20,399 --> 00:27:23,120
extensions um if there is no business

702
00:27:23,120 --> 00:27:25,520
business um case for for having them

703
00:27:25,520 --> 00:27:27,919
coming from the internet would be a nice

704
00:27:27,919 --> 00:27:29,520
mitigation

705
00:27:29,520 --> 00:27:32,080
strategy

706
00:27:32,960 --> 00:27:35,200
now let's get to the second part of this

707
00:27:35,200 --> 00:27:37,840
talk the evasion in depth

708
00:27:37,840 --> 00:27:40,559
so um in order to maximize our chances

709
00:27:40,559 --> 00:27:42,559
for the for this successful breach we

710
00:27:42,559 --> 00:27:44,399
need to be thinking about evasions at

711
00:27:44,399 --> 00:27:46,399
every step of the kill chain that we

712
00:27:46,399 --> 00:27:48,720
that we try to simulate so every step of

713
00:27:48,720 --> 00:27:50,880
the kill chain comes with its new unique

714
00:27:50,880 --> 00:27:52,799
challenges that we need to combat and

715
00:27:52,799 --> 00:27:55,200
the all and all of these challenges when

716
00:27:55,200 --> 00:27:57,679
we are trying to to emulate them

717
00:27:57,679 --> 00:27:59,919
inappropriately we'll be leaving traces

718
00:27:59,919 --> 00:28:02,000
behind behind us and therefore we should

719
00:28:02,000 --> 00:28:04,559
be trying to first test our samples

720
00:28:04,559 --> 00:28:06,559
within our environments up like the

721
00:28:06,559 --> 00:28:08,080
threat hunting

722
00:28:08,080 --> 00:28:10,640
as well as as well as threat detection

723
00:28:10,640 --> 00:28:12,720
ideas ourselves within our lab

724
00:28:12,720 --> 00:28:15,120
environments so that we can be

725
00:28:15,120 --> 00:28:17,360
in advanced compared to our blue team

726
00:28:17,360 --> 00:28:19,679
colleagues and see what our what our

727
00:28:19,679 --> 00:28:21,440
marvel samples are leaving behind and

728
00:28:21,440 --> 00:28:24,480
try to address that traces and that

729
00:28:24,480 --> 00:28:26,480
leftovers ourselves

730
00:28:26,480 --> 00:28:28,320
so starting

731
00:28:28,320 --> 00:28:30,720
starting with the delivery

732
00:28:30,720 --> 00:28:32,799
we found that hosting our payloads

733
00:28:32,799 --> 00:28:34,640
within the highly um

734
00:28:34,640 --> 00:28:36,399
within the good reputation

735
00:28:36,399 --> 00:28:39,360
servers such as clouds are the best way

736
00:28:39,360 --> 00:28:41,360
to get into the company because of

737
00:28:41,360 --> 00:28:43,600
course this isn't that simple to just

738
00:28:43,600 --> 00:28:46,399
block entire windows.net domain

739
00:28:46,399 --> 00:28:49,039
therefore we might be abusing multiple

740
00:28:49,039 --> 00:28:51,360
different for instance azure survivors

741
00:28:51,360 --> 00:28:53,840
to host our payloads and there is no

742
00:28:53,840 --> 00:28:56,320
clear idea what to do about it

743
00:28:56,320 --> 00:28:58,159
when you think about

744
00:28:58,159 --> 00:29:01,039
companies large-scale solutions to this

745
00:29:01,039 --> 00:29:02,000
problem

746
00:29:02,000 --> 00:29:05,919
therefore i guess that uh it is it is a

747
00:29:05,919 --> 00:29:08,960
beneficial to to to come over to come

748
00:29:08,960 --> 00:29:11,360
over that threat to try to model it and

749
00:29:11,360 --> 00:29:12,880
try to see if there is anything that we

750
00:29:12,880 --> 00:29:14,799
could do about it so for instance i know

751
00:29:14,799 --> 00:29:17,600
that some customers can simply block

752
00:29:17,600 --> 00:29:20,320
entire amazon aws.net because they are

753
00:29:20,320 --> 00:29:22,399
not using a aws

754
00:29:22,399 --> 00:29:24,720
resources therefore at least minimizing

755
00:29:24,720 --> 00:29:29,120
the threat surface of that of that cloud

756
00:29:29,120 --> 00:29:31,360
and also mr docks has this very cool

757
00:29:31,360 --> 00:29:33,200
project called living of trusted sites

758
00:29:33,200 --> 00:29:36,960
when he tries to to to collect every

759
00:29:36,960 --> 00:29:39,679
domain every service internet service

760
00:29:39,679 --> 00:29:40,960
that could be

761
00:29:40,960 --> 00:29:44,240
reused and reproposed for the file

762
00:29:44,240 --> 00:29:45,600
file storage

763
00:29:45,600 --> 00:29:48,240
primitive so for instance

764
00:29:48,240 --> 00:29:51,120
he he just disclosed to us that we can

765
00:29:51,120 --> 00:29:54,240
simply upload the file to the as the

766
00:29:54,240 --> 00:29:56,640
attachments while while while working on

767
00:29:56,640 --> 00:29:59,120
the email within the office 365 outlook

768
00:29:59,120 --> 00:30:00,240
and that

769
00:30:00,240 --> 00:30:02,559
and that file will then be

770
00:30:02,559 --> 00:30:04,640
immediately host uploaded to the azure

771
00:30:04,640 --> 00:30:06,720
cloud and will get back to us with this

772
00:30:06,720 --> 00:30:07,720
nice

773
00:30:07,720 --> 00:30:11,279
outlooklife.net domain url so it will be

774
00:30:11,279 --> 00:30:13,919
quite trusted but yet it comes with this

775
00:30:13,919 --> 00:30:15,440
uh very

776
00:30:15,440 --> 00:30:18,080
very short um validity of 10 minutes

777
00:30:18,080 --> 00:30:19,840
something like that so it's not that

778
00:30:19,840 --> 00:30:22,880
useful but there are plenty other ideas

779
00:30:22,880 --> 00:30:26,159
also before we actually um deliver the

780
00:30:26,159 --> 00:30:28,000
the office document for instance we

781
00:30:28,000 --> 00:30:30,080
should be applying multiple evasions on

782
00:30:30,080 --> 00:30:32,480
the file level as well so for instance

783
00:30:32,480 --> 00:30:35,279
vba purging which works very good even

784
00:30:35,279 --> 00:30:38,000
even now during the 2022

785
00:30:38,000 --> 00:30:41,279
year but yet there this this look there

786
00:30:41,279 --> 00:30:42,880
is this like i would call it the back

787
00:30:42,880 --> 00:30:45,039
door if you uh if you check out the

788
00:30:45,039 --> 00:30:47,919
official repository on the on the github

789
00:30:47,919 --> 00:30:50,159
with the office purge there is this like

790
00:30:50,159 --> 00:30:53,520
left idea for having um yara signature

791
00:30:53,520 --> 00:30:56,080
being appliable on the file on on the on

792
00:30:56,080 --> 00:30:58,159
the documents purged with that tool

793
00:30:58,159 --> 00:31:00,640
therefore i would be advising to find

794
00:31:00,640 --> 00:31:03,120
another tour that was there's a fork one

795
00:31:03,120 --> 00:31:05,760
that will get your files

796
00:31:05,760 --> 00:31:08,480
a little bit more stealthier as compared

797
00:31:08,480 --> 00:31:10,399
to office purging one and the office

798
00:31:10,399 --> 00:31:12,480
document encryption is a terrific

799
00:31:12,480 --> 00:31:14,240
approach to just cut down on the

800
00:31:14,240 --> 00:31:16,159
detection to the very zero level when

801
00:31:16,159 --> 00:31:18,559
you just apply your custom password or

802
00:31:18,559 --> 00:31:20,480
even the hard-coded default one velvet

803
00:31:20,480 --> 00:31:23,519
sweatshop will cut it because um

804
00:31:23,519 --> 00:31:25,440
as long as the victim provides his own

805
00:31:25,440 --> 00:31:27,679
password the anti-viruses and edr staff

806
00:31:27,679 --> 00:31:30,240
are unable to sense anything out of it

807
00:31:30,240 --> 00:31:32,159
and also when it comes to what we

808
00:31:32,159 --> 00:31:35,600
actually can do with with the vba net2js

809
00:31:35,600 --> 00:31:37,760
is a still gift that keeps on giving and

810
00:31:37,760 --> 00:31:40,480
even uh even when it comes to microsoft

811
00:31:40,480 --> 00:31:42,159
attack surface reduction rules there's

812
00:31:42,159 --> 00:31:43,519
this rule called block office

813
00:31:43,519 --> 00:31:45,120
applications from injecting into other

814
00:31:45,120 --> 00:31:48,399
processes and we found that these isr

815
00:31:48,399 --> 00:31:50,960
rules are ineffective against net2js.net

816
00:31:50,960 --> 00:31:54,559
loaded in the serialized assemblies

817
00:31:54,559 --> 00:31:55,919
also

818
00:31:55,919 --> 00:31:58,399
the idea that we really like is to use

819
00:31:58,399 --> 00:32:00,880
the xsl transform node that we can see

820
00:32:00,880 --> 00:32:03,600
on the right hand side higher image

821
00:32:03,600 --> 00:32:06,080
we are just providing the url or even we

822
00:32:06,080 --> 00:32:09,519
can provide the entire vbs xml and that

823
00:32:09,519 --> 00:32:11,200
xml xsl

824
00:32:11,200 --> 00:32:13,200
rather can contain the vbscript or the

825
00:32:13,200 --> 00:32:16,000
jscript and that one will be will be

826
00:32:16,000 --> 00:32:17,279
launched the serialized within the

827
00:32:17,279 --> 00:32:19,360
memory therefore giving us this like low

828
00:32:19,360 --> 00:32:22,000
footprint quite stealthy code execution

829
00:32:22,000 --> 00:32:23,679
primitive from the from from inside of

830
00:32:23,679 --> 00:32:25,600
the vba

831
00:32:25,600 --> 00:32:28,000
and also if we want to do actually if

832
00:32:28,000 --> 00:32:29,440
you want to actually run something

833
00:32:29,440 --> 00:32:31,840
inside of the system try to use the

834
00:32:31,840 --> 00:32:34,159
chained execution approach so instead of

835
00:32:34,159 --> 00:32:35,039
running

836
00:32:35,039 --> 00:32:36,399
running your commands inside of the

837
00:32:36,399 --> 00:32:38,240
child processes try to look for the

838
00:32:38,240 --> 00:32:40,720
primitives that will let you detain the

839
00:32:40,720 --> 00:32:42,720
parent-child relationship and also don't

840
00:32:42,720 --> 00:32:45,039
evade mc from inside of the vba just

841
00:32:45,039 --> 00:32:47,360
look for the other ways around it like

842
00:32:47,360 --> 00:32:49,039
for instance using the more

843
00:32:49,039 --> 00:32:51,120
sophisticated vba implementations

844
00:32:51,120 --> 00:32:52,960
instead of trying to patch the memory of

845
00:32:52,960 --> 00:32:55,039
the mc this is not the way to go so this

846
00:32:55,039 --> 00:32:58,320
is this is not a scalable way to go and

847
00:32:58,320 --> 00:33:00,399
another thing is that using the

848
00:33:00,399 --> 00:33:02,799
commodity malware which which cobalt

849
00:33:02,799 --> 00:33:05,120
strike is now right now considered us as

850
00:33:05,120 --> 00:33:07,279
well as the metasploits one covenants

851
00:33:07,279 --> 00:33:08,000
one

852
00:33:08,000 --> 00:33:10,080
they are used as these benchmarks for

853
00:33:10,080 --> 00:33:13,600
edrs the ers are need to fine-tune their

854
00:33:13,600 --> 00:33:15,200
own detections towards these products

855
00:33:15,200 --> 00:33:17,200
because the entire community expects

856
00:33:17,200 --> 00:33:19,840
that for instance the edr easy rexed

857
00:33:19,840 --> 00:33:21,679
will be sensing cobalt strike within the

858
00:33:21,679 --> 00:33:24,000
memory regardless of how well was it

859
00:33:24,000 --> 00:33:26,559
hidden therefore the cobas strike will

860
00:33:26,559 --> 00:33:29,519
get us at some point probably detected

861
00:33:29,519 --> 00:33:32,159
so uh so we can we can think about

862
00:33:32,159 --> 00:33:35,120
moving towards another another c2

863
00:33:35,120 --> 00:33:37,360
implants such as for instance metic c2

864
00:33:37,360 --> 00:33:39,760
which is open source one and it's really

865
00:33:39,760 --> 00:33:41,679
really affordable to just try to work

866
00:33:41,679 --> 00:33:43,679
with it and come up with our custom

867
00:33:43,679 --> 00:33:45,519
implant for the mythic and keep it in

868
00:33:45,519 --> 00:33:47,360
house just for case and also if you work

869
00:33:47,360 --> 00:33:49,919
with sliver just just think about the

870
00:33:49,919 --> 00:33:51,600
the idea that execute assembly which is

871
00:33:51,600 --> 00:33:53,919
very convenient follows the fork and

872
00:33:53,919 --> 00:33:55,679
run approach which is which is something

873
00:33:55,679 --> 00:33:58,159
i'm going to briefly cover about just in

874
00:33:58,159 --> 00:34:00,159
in just about seconds this is quite a

875
00:34:00,159 --> 00:34:03,760
loud idea for for running our.nets

876
00:34:03,760 --> 00:34:06,240
when we think about delivering the

877
00:34:06,240 --> 00:34:08,399
executables also bear in mind that there

878
00:34:08,399 --> 00:34:10,079
is this prevalence and reputation

879
00:34:10,079 --> 00:34:13,440
analysis that our executable regardless

880
00:34:13,440 --> 00:34:15,918
of how sophisticated that was was only

881
00:34:15,918 --> 00:34:17,839
seen in the two inst and two devices

882
00:34:17,839 --> 00:34:19,839
worldwide therefore it is considered as

883
00:34:19,839 --> 00:34:22,079
anomalous because it's so uncommon so it

884
00:34:22,079 --> 00:34:22,960
will be

885
00:34:22,960 --> 00:34:25,679
so it will be detected and and mitigated

886
00:34:25,679 --> 00:34:28,079
contained even before it has changed to

887
00:34:28,079 --> 00:34:29,599
shine and chance to apply all its

888
00:34:29,599 --> 00:34:32,079
sophisticated evasions in patches and so

889
00:34:32,079 --> 00:34:34,719
on so strive for the dls side load the

890
00:34:34,719 --> 00:34:36,159
hijack income hijacking whatever you

891
00:34:36,159 --> 00:34:39,199
want it just don't use excess

892
00:34:39,199 --> 00:34:41,440
also if you if you want to deliver the

893
00:34:41,440 --> 00:34:43,599
action the actual executable you can

894
00:34:43,599 --> 00:34:45,760
think about of heavily obfuscating your

895
00:34:45,760 --> 00:34:48,399
stuff so um so there is this concept of

896
00:34:48,399 --> 00:34:51,119
skaters and protectors i'm sure that we

897
00:34:51,119 --> 00:34:53,040
that that we worked with you pay xs and

898
00:34:53,040 --> 00:34:55,839
confusor x before the um the only idea

899
00:34:55,839 --> 00:34:58,320
that i wanted to kind of enhance and

900
00:34:58,320 --> 00:35:00,079
release to our to to my red team

901
00:35:00,079 --> 00:35:02,400
colleagues is to apply the entire daisy

902
00:35:02,400 --> 00:35:05,760
chained um daisy chained load of

903
00:35:05,760 --> 00:35:08,560
full of the packers so so that we can

904
00:35:08,560 --> 00:35:11,040
have the result of one packer being fed

905
00:35:11,040 --> 00:35:13,119
to the another puck and packer and then

906
00:35:13,119 --> 00:35:15,440
even further complicated stuff and even

907
00:35:15,440 --> 00:35:17,839
maybe just apply some other stages to

908
00:35:17,839 --> 00:35:20,240
just signing files using the scarecrow

909
00:35:20,240 --> 00:35:22,079
or the mangle one

910
00:35:22,079 --> 00:35:25,200
or even removing repair resources using

911
00:35:25,200 --> 00:35:27,280
a reset ins for instance or even

912
00:35:27,280 --> 00:35:29,760
backdoor the files using the package one

913
00:35:29,760 --> 00:35:32,079
and also um when we are talking about

914
00:35:32,079 --> 00:35:34,320
responsibly delivering our cyber weapons

915
00:35:34,320 --> 00:35:36,240
think about watermarking your implants

916
00:35:36,240 --> 00:35:38,720
so just intentionally inject some some

917
00:35:38,720 --> 00:35:40,480
signatures into your implants so then

918
00:35:40,480 --> 00:35:42,480
when the blue team will we'll get back

919
00:35:42,480 --> 00:35:45,280
to you in about half of a year later and

920
00:35:45,280 --> 00:35:47,200
they will ask you is that yours you'll

921
00:35:47,200 --> 00:35:49,359
be comfortable with saying yes that yes

922
00:35:49,359 --> 00:35:52,400
that is ours because we extracted this

923
00:35:52,400 --> 00:35:54,720
is json blob from

924
00:35:54,720 --> 00:35:56,960
from inside of that executable and we

925
00:35:56,960 --> 00:35:59,599
were able to apply our hard coded pass

926
00:35:59,599 --> 00:36:01,119
our password that we have documented

927
00:36:01,119 --> 00:36:02,800
somewhere in our systems and therefore

928
00:36:02,800 --> 00:36:04,880
we can extract the metadata out of the

929
00:36:04,880 --> 00:36:07,200
out of the beacon or out of the malware

930
00:36:07,200 --> 00:36:08,720
ourselves

931
00:36:08,720 --> 00:36:10,960
so ideas where to store where to stop

932
00:36:10,960 --> 00:36:12,800
that kind of watermarking

933
00:36:12,800 --> 00:36:15,359
are are very simple just use the

934
00:36:15,359 --> 00:36:18,000
p headers maybe resources maybe just

935
00:36:18,000 --> 00:36:20,160
stick up with the additional p section

936
00:36:20,160 --> 00:36:23,839
maybe even tamper with the dos stop in

937
00:36:23,839 --> 00:36:27,400
the step instead

938
00:36:28,000 --> 00:36:29,760
also if you want to bugger something

939
00:36:29,760 --> 00:36:31,520
because you like feeling that you really

940
00:36:31,520 --> 00:36:33,680
need to have this this informative of a

941
00:36:33,680 --> 00:36:36,320
shell code but you still would like to

942
00:36:36,320 --> 00:36:38,320
to like to leverage to abuse the fact

943
00:36:38,320 --> 00:36:39,760
that there are like plenty of rich

944
00:36:39,760 --> 00:36:42,640
resources icons cursors and so on you

945
00:36:42,640 --> 00:36:44,640
could try to inject your payload into

946
00:36:44,640 --> 00:36:47,680
the legitimate library using quite a few

947
00:36:47,680 --> 00:36:50,640
uh quite a few ideas for writing and and

948
00:36:50,640 --> 00:36:53,119
and executing your your shell codes and

949
00:36:53,119 --> 00:36:55,119
these two tools the backdoor one

950
00:36:55,119 --> 00:36:57,520
watermarker one are bundled within the

951
00:36:57,520 --> 00:36:59,359
protect my tooling package so if you

952
00:36:59,359 --> 00:37:01,280
fancy using them check out the github

953
00:37:01,280 --> 00:37:02,960
repository that that contains them

954
00:37:02,960 --> 00:37:04,480
already and

955
00:37:04,480 --> 00:37:05,440
one of

956
00:37:05,440 --> 00:37:07,839
among the among the ideas that i would

957
00:37:07,839 --> 00:37:10,480
recommend would be to uh try to store

958
00:37:10,480 --> 00:37:12,240
your shell code in the middle of the

959
00:37:12,240 --> 00:37:13,839
first code section so that we don't

960
00:37:13,839 --> 00:37:16,320
introduce yet another one as long as the

961
00:37:16,320 --> 00:37:18,960
shell code is not overly overly long and

962
00:37:18,960 --> 00:37:21,200
then try to hijack branching instruction

963
00:37:21,200 --> 00:37:23,200
from the original entry point and then

964
00:37:23,200 --> 00:37:24,720
point it towards the shell code that you

965
00:37:24,720 --> 00:37:26,720
just injected so that we don't even

966
00:37:26,720 --> 00:37:28,720
tamper with the address of entry point

967
00:37:28,720 --> 00:37:31,359
pe header structure and even there is

968
00:37:31,359 --> 00:37:33,119
this like funny thing about just

969
00:37:33,119 --> 00:37:35,440
applying fake code signatures onto our

970
00:37:35,440 --> 00:37:37,920
our implants so for instance here we

971
00:37:37,920 --> 00:37:39,680
here we are taking this idea and

972
00:37:39,680 --> 00:37:41,280
implementation and an exported

973
00:37:41,280 --> 00:37:44,000
certificate uh from manifestation madrid

974
00:37:44,000 --> 00:37:46,160
from spectrops and we are just taking

975
00:37:46,160 --> 00:37:48,079
his fake code certificate we are

976
00:37:48,079 --> 00:37:50,160
applying it on the apollo and as we can

977
00:37:50,160 --> 00:37:52,240
see apollo before before signing 30

978
00:37:52,240 --> 00:37:53,920
detections after

979
00:37:53,920 --> 00:37:55,920
signing with fake

980
00:37:55,920 --> 00:37:59,359
still stolen certificates ate less and

981
00:37:59,359 --> 00:38:02,880
it just happens that a few products were

982
00:38:02,880 --> 00:38:04,480
were sustainable sustainable

983
00:38:04,480 --> 00:38:09,280
to this kind of of fooling around them

984
00:38:09,359 --> 00:38:12,160
um there is this also like quite a fresh

985
00:38:12,160 --> 00:38:15,040
idea of pumping and bloating our our

986
00:38:15,040 --> 00:38:17,040
mower samples i haven't played with that

987
00:38:17,040 --> 00:38:18,560
much uh

988
00:38:18,560 --> 00:38:21,280
with with them myself yet but we've

989
00:38:21,280 --> 00:38:24,320
heard that we can just inject

990
00:38:24,320 --> 00:38:27,920
the plenty of words and of english words

991
00:38:27,920 --> 00:38:30,079
to the very end of the executable so

992
00:38:30,079 --> 00:38:33,680
that we can try to um strive towards

993
00:38:33,680 --> 00:38:36,240
to towards lowered an effective entropy

994
00:38:36,240 --> 00:38:38,720
of the entire file so that is the idea

995
00:38:38,720 --> 00:38:40,880
behind file pumping and the file

996
00:38:40,880 --> 00:38:43,200
bloating if we have the implant that we

997
00:38:43,200 --> 00:38:45,599
then that will be and that will act as

998
00:38:45,599 --> 00:38:48,720
our persistent persistent one and we

999
00:38:48,720 --> 00:38:50,480
and we leave it on our hard drive how

1000
00:38:50,480 --> 00:38:52,160
about just increasing in size into

1001
00:38:52,160 --> 00:38:54,160
something ridiculous such as maybe 50

1002
00:38:54,160 --> 00:38:56,880
max and just leave it out there so that

1003
00:38:56,880 --> 00:39:00,240
uh maybe some avs and edrs will just

1004
00:39:00,240 --> 00:39:02,000
look at this size and say that this is

1005
00:39:02,000 --> 00:39:04,800
not something for me

1006
00:39:05,760 --> 00:39:07,760
among the strategies that we can apply

1007
00:39:07,760 --> 00:39:10,800
is to try to of course time delay the

1008
00:39:10,800 --> 00:39:13,040
execution primitives that we have when

1009
00:39:13,040 --> 00:39:15,760
we during our shell code execution there

1010
00:39:15,760 --> 00:39:18,160
is this allocation right and execution

1011
00:39:18,160 --> 00:39:21,040
steps we could apply heavy delays among

1012
00:39:21,040 --> 00:39:22,320
among these

1013
00:39:22,320 --> 00:39:24,800
these subsequent steps following the the

1014
00:39:24,800 --> 00:39:28,079
drip loader style of injecting stuff it

1015
00:39:28,079 --> 00:39:30,480
is quite effective to us towards the

1016
00:39:30,480 --> 00:39:32,960
crowdstrike even today but just requires

1017
00:39:32,960 --> 00:39:35,359
a little bit of love for refactoring it

1018
00:39:35,359 --> 00:39:37,040
and playing with the source code and

1019
00:39:37,040 --> 00:39:38,400
then also

1020
00:39:38,400 --> 00:39:40,240
we could apply uh we could apply some

1021
00:39:40,240 --> 00:39:42,240
blending in to just find the remote

1022
00:39:42,240 --> 00:39:44,079
process if we really want to go about a

1023
00:39:44,079 --> 00:39:46,240
remote injection and to find about

1024
00:39:46,240 --> 00:39:49,119
process that the doo has already pre and

1025
00:39:49,119 --> 00:39:53,040
pre-loaded clr win http cred ui so that

1026
00:39:53,040 --> 00:39:55,280
um so that we will be living inside of

1027
00:39:55,280 --> 00:39:58,800
the quite legitimate process but in

1028
00:39:58,800 --> 00:40:01,920
instead i would advise against injecting

1029
00:40:01,920 --> 00:40:03,680
into remote processes because it is so

1030
00:40:03,680 --> 00:40:05,599
complicated to do is right without

1031
00:40:05,599 --> 00:40:08,480
leaving without leaving many many traces

1032
00:40:08,480 --> 00:40:10,400
behind even the sole idea of direct

1033
00:40:10,400 --> 00:40:13,520
syscalls can be uh can be implemented uh

1034
00:40:13,520 --> 00:40:15,359
inappropriately there are four living

1035
00:40:15,359 --> 00:40:17,520
traces and the detection primitives so

1036
00:40:17,520 --> 00:40:19,599
just try to stay in process in line

1037
00:40:19,599 --> 00:40:21,200
instead of injecting forget about the

1038
00:40:21,200 --> 00:40:22,800
injecting and anything we don't need to

1039
00:40:22,800 --> 00:40:26,160
inject anymore if we stay inside if we

1040
00:40:26,160 --> 00:40:28,160
operate inside of the dll that was

1041
00:40:28,160 --> 00:40:29,839
loaded to the team server there is just

1042
00:40:29,839 --> 00:40:31,760
no need for us to keep on keep on

1043
00:40:31,760 --> 00:40:33,520
injecting outside of the teams because

1044
00:40:33,520 --> 00:40:35,440
we are already living in the legitimate

1045
00:40:35,440 --> 00:40:37,040
process right

1046
00:40:37,040 --> 00:40:40,079
so um in order to push back on the dom's

1047
00:40:40,079 --> 00:40:42,960
yara signatures we could even try to uh

1048
00:40:42,960 --> 00:40:45,119
unlink our malware pa models from the

1049
00:40:45,119 --> 00:40:47,200
pap during sleep just just just just

1050
00:40:47,200 --> 00:40:49,119
before that so that there is this no

1051
00:40:49,119 --> 00:40:52,000
credit ui knowing win http and i guess

1052
00:40:52,000 --> 00:40:53,920
that this might even push back on some

1053
00:40:53,920 --> 00:40:55,680
of the some of the detection ideas

1054
00:40:55,680 --> 00:40:57,280
coming from the ideas as well we can

1055
00:40:57,280 --> 00:41:00,720
also apply the decal stack spoofers and

1056
00:41:00,720 --> 00:41:02,319
approaches as well as shellcode

1057
00:41:02,319 --> 00:41:05,119
fluctuation which tries to to to leave

1058
00:41:05,119 --> 00:41:08,560
our shell code within the read write or

1059
00:41:08,560 --> 00:41:11,040
not access not accessible memory pages

1060
00:41:11,040 --> 00:41:12,960
because we don't want to leave we don't

1061
00:41:12,960 --> 00:41:15,040
want to reside and we don't want to have

1062
00:41:15,040 --> 00:41:17,119
our beacons

1063
00:41:17,119 --> 00:41:20,079
left at the executable places because as

1064
00:41:20,079 --> 00:41:22,960
soon as the antivirus memory scanner

1065
00:41:22,960 --> 00:41:25,520
sweeps comes in we don't want to be

1066
00:41:25,520 --> 00:41:27,760
scanned even in the first place and the

1067
00:41:27,760 --> 00:41:29,520
antiviruses out of the performance

1068
00:41:29,520 --> 00:41:30,960
reason are going to skip on the

1069
00:41:30,960 --> 00:41:34,000
executable pages because they are not

1070
00:41:34,000 --> 00:41:36,400
skip not executable pages because they

1071
00:41:36,400 --> 00:41:38,720
don't fancy scanning every virtual

1072
00:41:38,720 --> 00:41:40,480
memory allocations out there so they

1073
00:41:40,480 --> 00:41:42,319
should be trying this performance

1074
00:41:42,319 --> 00:41:43,920
optimizations idea for scanning only the

1075
00:41:43,920 --> 00:41:46,160
executable ones so just keep your shell

1076
00:41:46,160 --> 00:41:48,720
code with outside of the executable

1077
00:41:48,720 --> 00:41:53,040
memory location when you don't operate

1078
00:41:53,200 --> 00:41:55,760
and also if you if you fancy about

1079
00:41:55,760 --> 00:41:58,800
patching mc and etw don't do it because

1080
00:41:58,800 --> 00:41:59,760
the

1081
00:41:59,760 --> 00:42:02,240
the corruption of mc.dll is being picked

1082
00:42:02,240 --> 00:42:04,000
up by the different by the defender

1083
00:42:04,000 --> 00:42:05,839
lately as well as crowdstrike according

1084
00:42:05,839 --> 00:42:08,400
to my um to my observations therefore we

1085
00:42:08,400 --> 00:42:09,920
will be better off pulling these

1086
00:42:09,920 --> 00:42:12,000
hardware breakpoints kind of a trick

1087
00:42:12,000 --> 00:42:14,560
where we apply the idea of having

1088
00:42:14,560 --> 00:42:18,000
four uh four break points that would

1089
00:42:18,000 --> 00:42:20,400
then trigger during uh while entering

1090
00:42:20,400 --> 00:42:23,680
the mc or etw um detection function so

1091
00:42:23,680 --> 00:42:26,640
just mc scan buffer and then from inside

1092
00:42:26,640 --> 00:42:28,880
of that from inside of that exception

1093
00:42:28,880 --> 00:42:30,240
handler that will be triggered because

1094
00:42:30,240 --> 00:42:31,760
there is going to there's going to be a

1095
00:42:31,760 --> 00:42:33,839
single step exception triggered as soon

1096
00:42:33,839 --> 00:42:36,079
as us as the system enters the

1097
00:42:36,079 --> 00:42:38,960
mcdetection function we'll be trying to

1098
00:42:38,960 --> 00:42:41,680
just conveniently swiftly

1099
00:42:41,680 --> 00:42:43,599
step and just jump outside of that

1100
00:42:43,599 --> 00:42:44,400
function

1101
00:42:44,400 --> 00:42:46,480
while not touching any byte on the disk

1102
00:42:46,480 --> 00:42:48,640
or in in the memory therefore not

1103
00:42:48,640 --> 00:42:51,280
triggering these anti-related detections

1104
00:42:51,280 --> 00:42:54,240
also a cool trick we can we can even

1105
00:42:54,240 --> 00:42:57,040
convert windows handles into process

1106
00:42:57,040 --> 00:42:59,440
handles and we can even apply the james

1107
00:42:59,440 --> 00:43:01,920
forshaw idea for turning a little bit of

1108
00:43:01,920 --> 00:43:04,240
limited process handle permissions into

1109
00:43:04,240 --> 00:43:07,520
the full access ones so there is this

1110
00:43:07,520 --> 00:43:10,000
very cool idea for having explorer

1111
00:43:10,000 --> 00:43:11,040
process

1112
00:43:11,040 --> 00:43:12,960
handle without calling to the open

1113
00:43:12,960 --> 00:43:14,960
process api

1114
00:43:14,960 --> 00:43:15,920
one

1115
00:43:15,920 --> 00:43:18,560
one of the bunker trick about mcafee is

1116
00:43:18,560 --> 00:43:20,880
that we can try to map out every

1117
00:43:20,880 --> 00:43:23,359
possible process that the antivirus or

1118
00:43:23,359 --> 00:43:25,599
edr has and try to see which ones are

1119
00:43:25,599 --> 00:43:27,920
not covered with this self

1120
00:43:27,920 --> 00:43:30,240
with the self defense uh kernel

1121
00:43:30,240 --> 00:43:32,319
primitives and find that there are these

1122
00:43:32,319 --> 00:43:34,800
like gui processes that the antivirus

1123
00:43:34,800 --> 00:43:37,119
have running and they won't be protected

1124
00:43:37,119 --> 00:43:39,520
by the self defense modules therefore we

1125
00:43:39,520 --> 00:43:41,920
can abuse them to just store our beacons

1126
00:43:41,920 --> 00:43:43,440
inside of these processes because they

1127
00:43:43,440 --> 00:43:45,040
are going to be considered as trusted

1128
00:43:45,040 --> 00:43:46,800
because it's them because they're

1129
00:43:46,800 --> 00:43:49,440
related to antivirus so so just simply

1130
00:43:49,440 --> 00:43:51,040
find the fcnm

1131
00:43:51,040 --> 00:43:54,079
process and inject just right inside

1132
00:43:54,079 --> 00:43:56,400
inside of that one and mcafee will will

1133
00:43:56,400 --> 00:43:59,599
will um shoot at least remind speechless

1134
00:43:59,599 --> 00:44:02,400
about our beacon operating and then

1135
00:44:02,400 --> 00:44:04,880
and also funny thing is that your

1136
00:44:04,880 --> 00:44:07,520
products might be storing this

1137
00:44:07,520 --> 00:44:09,839
log files within the file system and

1138
00:44:09,839 --> 00:44:11,920
this is the case for the mcafee which

1139
00:44:11,920 --> 00:44:14,240
stores the quite verbose logging

1140
00:44:14,240 --> 00:44:16,720
facility within the program data and you

1141
00:44:16,720 --> 00:44:18,079
can just simply

1142
00:44:18,079 --> 00:44:19,760
review the outcomes

1143
00:44:19,760 --> 00:44:21,599
the contents of these log files and just

1144
00:44:21,599 --> 00:44:23,520
see for yourself that there are mentions

1145
00:44:23,520 --> 00:44:26,079
about excluded processes therefore as

1146
00:44:26,079 --> 00:44:28,240
soon as we have this idea that some

1147
00:44:28,240 --> 00:44:30,400
process is excluded from scanning we can

1148
00:44:30,400 --> 00:44:32,319
just abuse this pawn to within the

1149
00:44:32,319 --> 00:44:34,880
beacon and just put our task inside of

1150
00:44:34,880 --> 00:44:37,119
that excluded from scanning process

1151
00:44:37,119 --> 00:44:41,119
therefore surviving attack from avs

1152
00:44:41,119 --> 00:44:43,839
also command control wise just don't

1153
00:44:43,839 --> 00:44:46,000
apply just don't follow the fork and run

1154
00:44:46,000 --> 00:44:46,800
approach

1155
00:44:46,800 --> 00:44:48,960
any longer the executive execute

1156
00:44:48,960 --> 00:44:50,560
assembly one is going to create this

1157
00:44:50,560 --> 00:44:52,400
sacrificial process it's going to inject

1158
00:44:52,400 --> 00:44:54,240
reflective dll injection the shell coat

1159
00:44:54,240 --> 00:44:56,319
in there it's going to it's going to

1160
00:44:56,319 --> 00:44:58,319
reflectively load itself and then

1161
00:44:58,319 --> 00:45:00,400
connect back to the beacon and beacon

1162
00:45:00,400 --> 00:45:02,400
process over the name pipe this is so

1163
00:45:02,400 --> 00:45:04,640
loud this is so um

1164
00:45:04,640 --> 00:45:06,240
this is not so stealthy approach we can

1165
00:45:06,240 --> 00:45:08,480
do we can be smarter about it and just

1166
00:45:08,480 --> 00:45:10,560
follow the living inside of the process

1167
00:45:10,560 --> 00:45:12,640
idea sorry about it

1168
00:45:12,640 --> 00:45:15,520
it means that i need to hurry up

1169
00:45:15,520 --> 00:45:16,400
all right

1170
00:45:16,400 --> 00:45:19,520
so um just quickly uh quickly summing up

1171
00:45:19,520 --> 00:45:21,920
on this one just use the buffnet from

1172
00:45:21,920 --> 00:45:24,079
the um buffnet from the c-cop from

1173
00:45:24,079 --> 00:45:26,720
spectrops also be aware that this there

1174
00:45:26,720 --> 00:45:29,680
is this like a private enhanced fork of

1175
00:45:29,680 --> 00:45:32,400
that buffnet which i am the humble like

1176
00:45:32,400 --> 00:45:34,800
contributor to which gives us this

1177
00:45:34,800 --> 00:45:36,560
execute assembly and job assembly

1178
00:45:36,560 --> 00:45:38,880
primitives that work that work just like

1179
00:45:38,880 --> 00:45:40,960
a breeze so you can try to figure out

1180
00:45:40,960 --> 00:45:42,640
where to find that one and use them

1181
00:45:42,640 --> 00:45:44,240
during your operations

1182
00:45:44,240 --> 00:45:46,480
to just live inside your ins inside that

1183
00:45:46,480 --> 00:45:47,839
becomes process

1184
00:45:47,839 --> 00:45:50,400
um a few slides a few slides left when

1185
00:45:50,400 --> 00:45:52,319
you think about aggressing aggress over

1186
00:45:52,319 --> 00:45:53,359
highly repo

1187
00:45:53,359 --> 00:45:55,599
high reputational services such as one

1188
00:45:55,599 --> 00:45:57,760
drive maybe github slack and if you

1189
00:45:57,760 --> 00:45:58,839
think about

1190
00:45:58,839 --> 00:46:01,599
um connecting within the intranet

1191
00:46:01,599 --> 00:46:02,720
instead

1192
00:46:02,720 --> 00:46:05,040
instead of using smb which might be rpc

1193
00:46:05,040 --> 00:46:07,599
firewalled we could be better off using

1194
00:46:07,599 --> 00:46:10,000
the primitives of ldap since when there

1195
00:46:10,000 --> 00:46:11,839
is this when there is this domain joint

1196
00:46:11,839 --> 00:46:13,680
system and there is another domain joint

1197
00:46:13,680 --> 00:46:15,760
system even in in the highly separated

1198
00:46:15,760 --> 00:46:17,839
networks with a swift segment they still

1199
00:46:17,839 --> 00:46:19,280
need to connect back to the domain to

1200
00:46:19,280 --> 00:46:20,800
the same domain controller and we could

1201
00:46:20,800 --> 00:46:23,839
use it to constitute a nice and hefty

1202
00:46:23,839 --> 00:46:26,800
command and control channel and also use

1203
00:46:26,800 --> 00:46:29,040
the um serverless redirectors we've been

1204
00:46:29,040 --> 00:46:31,119
piggybacking on the aws lambdas for a

1205
00:46:31,119 --> 00:46:33,040
long time by now and they come at real

1206
00:46:33,040 --> 00:46:35,520
cheap like five five bucks or so for

1207
00:46:35,520 --> 00:46:38,640
four months long engagements and they

1208
00:46:38,640 --> 00:46:41,119
and they just constitute the sole idea

1209
00:46:41,119 --> 00:46:44,800
of addressing to the more more trusted

1210
00:46:44,800 --> 00:46:45,920
domains

1211
00:46:45,920 --> 00:46:47,599
and when you when you think about

1212
00:46:47,599 --> 00:46:49,200
explitrating stuff

1213
00:46:49,200 --> 00:46:50,560
when you just

1214
00:46:50,560 --> 00:46:52,720
dump this very nice

1215
00:46:52,720 --> 00:46:55,119
process memory or maybe you even extract

1216
00:46:55,119 --> 00:46:57,599
that entire team's cash

1217
00:46:57,599 --> 00:47:00,400
that the team stores you might be trying

1218
00:47:00,400 --> 00:47:03,680
to compress it using a nice and handy

1219
00:47:03,680 --> 00:47:06,880
zip p or zipper instead um primitive and

1220
00:47:06,880 --> 00:47:08,720
then when you have this like one gigs

1221
00:47:08,720 --> 00:47:10,880
long of a zip file you could just copy

1222
00:47:10,880 --> 00:47:13,359
it to the onedrive sync directory wait a

1223
00:47:13,359 --> 00:47:15,599
little and then get back to get back to

1224
00:47:15,599 --> 00:47:18,240
the office 365 using the stolen primary

1225
00:47:18,240 --> 00:47:20,160
refresh token and then just simply

1226
00:47:20,160 --> 00:47:22,000
download the file out of the

1227
00:47:22,000 --> 00:47:25,359
onedrive web ui um console because the

1228
00:47:25,359 --> 00:47:27,520
onedrive did the did the job for you for

1229
00:47:27,520 --> 00:47:29,359
syncing back and accelerating the file

1230
00:47:29,359 --> 00:47:30,319
anyway

1231
00:47:30,319 --> 00:47:32,319
and you didn't have to even care for the

1232
00:47:32,319 --> 00:47:34,559
employee to keep a little while longer

1233
00:47:34,559 --> 00:47:36,720
in the job so that your file gets

1234
00:47:36,720 --> 00:47:38,640
accelerated properly because onedrive

1235
00:47:38,640 --> 00:47:41,200
does everything that of that for you now

1236
00:47:41,200 --> 00:47:42,800
is a summary there are a little bit of

1237
00:47:42,800 --> 00:47:44,960
more slides but i i just anticipate that

1238
00:47:44,960 --> 00:47:46,880
i won't be able to cover all of them and

1239
00:47:46,880 --> 00:47:49,440
all of the slides are accessible at

1240
00:47:49,440 --> 00:47:51,920
at my blog already you can just you you

1241
00:47:51,920 --> 00:47:54,240
can go out and and check out the slides

1242
00:47:54,240 --> 00:47:56,559
for yourself as well as uh try to use

1243
00:47:56,559 --> 00:47:57,839
the product by tooling tool which i

1244
00:47:57,839 --> 00:47:59,839
consider that could enhance our

1245
00:47:59,839 --> 00:48:01,760
operations outcomes

1246
00:48:01,760 --> 00:48:03,280
and also um

1247
00:48:03,280 --> 00:48:06,240
what i want to convey is that the what

1248
00:48:06,240 --> 00:48:08,640
they call it the art of evasion um is

1249
00:48:08,640 --> 00:48:11,440
only us as uh as successful as the

1250
00:48:11,440 --> 00:48:13,760
number of tries we are applying so we'll

1251
00:48:13,760 --> 00:48:16,160
be failing like like 100 of the times

1252
00:48:16,160 --> 00:48:18,000
but then we'll we'll find eventually

1253
00:48:18,000 --> 00:48:21,040
this once like when this this one nice

1254
00:48:21,040 --> 00:48:23,040
fancy bypass for the product that we are

1255
00:48:23,040 --> 00:48:25,119
against to so just don't forget

1256
00:48:25,119 --> 00:48:27,359
so just don't give up and keep on trying

1257
00:48:27,359 --> 00:48:29,040
and also be respectful to your blue team

1258
00:48:29,040 --> 00:48:30,880
colleagues even if you even if you

1259
00:48:30,880 --> 00:48:33,280
breach the company don't be braggy about

1260
00:48:33,280 --> 00:48:35,119
it just try to work with them deliver

1261
00:48:35,119 --> 00:48:37,680
all the ttps all the samples just share

1262
00:48:37,680 --> 00:48:39,040
with them with the cool stuff that you

1263
00:48:39,040 --> 00:48:41,599
devised because after all we all want to

1264
00:48:41,599 --> 00:48:43,760
progress and we all want to adapt and

1265
00:48:43,760 --> 00:48:45,440
keep on researching

1266
00:48:45,440 --> 00:48:49,160
and that would be all i guess

