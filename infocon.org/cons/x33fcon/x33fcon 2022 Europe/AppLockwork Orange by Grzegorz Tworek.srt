1
00:00:03,439 --> 00:00:05,600
right now so again i'm jay garcia review

2
00:00:05,600 --> 00:00:07,680
prefer uh just greg

3
00:00:07,680 --> 00:00:08,639
and

4
00:00:08,639 --> 00:00:10,559
at some point i had to protect some

5
00:00:10,559 --> 00:00:13,360
assets using applocker so i decided to

6
00:00:13,360 --> 00:00:15,360
dig a bit deeper scratch the surface to

7
00:00:15,360 --> 00:00:17,279
under identify

8
00:00:17,279 --> 00:00:18,880
if a blocker is

9
00:00:18,880 --> 00:00:22,160
for fruit good enough for our things and

10
00:00:22,160 --> 00:00:24,240
what i would like to cover today two

11
00:00:24,240 --> 00:00:26,080
uplocker

12
00:00:26,080 --> 00:00:29,359
internal mechanisms giving you somehow

13
00:00:29,359 --> 00:00:31,039
unexpected

14
00:00:31,039 --> 00:00:32,159
results

15
00:00:32,159 --> 00:00:35,440
so let's go for the first one

16
00:00:35,440 --> 00:00:37,600
when it comes to the blocker itself

17
00:00:37,600 --> 00:00:39,200
a blocker consists of couple of

18
00:00:39,200 --> 00:00:41,040
components of course we have some

19
00:00:41,040 --> 00:00:44,640
management it is a kernel mechanism but

20
00:00:44,640 --> 00:00:47,280
it stores its own database it is managed

21
00:00:47,280 --> 00:00:49,360
from user mode there is a special

22
00:00:49,360 --> 00:00:51,280
service translating

23
00:00:51,280 --> 00:00:53,520
uh the database from the user mode to

24
00:00:53,520 --> 00:00:56,480
the kernel mode the the app id svc which

25
00:00:56,480 --> 00:00:57,680
must be running to have a blocker

26
00:00:57,680 --> 00:01:00,160
running but the full thing within a

27
00:01:00,160 --> 00:01:03,199
blocker protection is done by the driver

28
00:01:03,199 --> 00:01:05,199
running within the kernel

29
00:01:05,199 --> 00:01:07,439
applocker can work in

30
00:01:07,439 --> 00:01:09,360
enforcement mode

31
00:01:09,360 --> 00:01:10,560
meaning

32
00:01:10,560 --> 00:01:13,119
non-listed apps non-white listed apps

33
00:01:13,119 --> 00:01:15,520
are not allowed to be run and in the

34
00:01:15,520 --> 00:01:17,759
audit mode meaning

35
00:01:17,759 --> 00:01:20,320
any single application will run but

36
00:01:20,320 --> 00:01:22,240
there will be a warning within the log

37
00:01:22,240 --> 00:01:24,880
telling me it would be blocked if i play

38
00:01:24,880 --> 00:01:27,439
seriously when it comes to rules a

39
00:01:27,439 --> 00:01:29,040
blocker can use

40
00:01:29,040 --> 00:01:31,680
first very big thing about a blocker

41
00:01:31,680 --> 00:01:35,920
comparing for them example to wdac is it

42
00:01:35,920 --> 00:01:39,040
can rely on user identity

43
00:01:39,040 --> 00:01:41,360
but generally saying rules can be made

44
00:01:41,360 --> 00:01:44,399
for a path so if the path matches the

45
00:01:44,399 --> 00:01:47,759
application is allowed or not a rule can

46
00:01:47,759 --> 00:01:51,280
be made based on a hash so the hash of

47
00:01:51,280 --> 00:01:53,439
the file is being calculated and if the

48
00:01:53,439 --> 00:01:55,520
hash much much as the application is

49
00:01:55,520 --> 00:01:57,520
being allowed and on the digital

50
00:01:57,520 --> 00:02:01,280
signature i will focus on harsh rules as

51
00:02:01,280 --> 00:02:02,399
those are

52
00:02:02,399 --> 00:02:04,960
the simplest one to show you today what

53
00:02:04,960 --> 00:02:06,399
i want to show you

54
00:02:06,399 --> 00:02:09,199
okay let's go to the imperfection number

55
00:02:09,199 --> 00:02:10,479
one

56
00:02:10,479 --> 00:02:13,280
because uh generally saying

57
00:02:13,280 --> 00:02:15,120
i have my applocker up and running it is

58
00:02:15,120 --> 00:02:17,120
working in the audit mode i can quickly

59
00:02:17,120 --> 00:02:19,760
verify it here going to properties i can

60
00:02:19,760 --> 00:02:22,480
see it is for executable only configured

61
00:02:22,480 --> 00:02:24,319
within the audit

62
00:02:24,319 --> 00:02:25,520
only mode

63
00:02:25,520 --> 00:02:28,879
and i have kind of a typical

64
00:02:28,879 --> 00:02:30,720
configuration meaning

65
00:02:30,720 --> 00:02:31,440
if

66
00:02:31,440 --> 00:02:33,440
something is within the program files it

67
00:02:33,440 --> 00:02:35,440
is allowed to be run as regular user

68
00:02:35,440 --> 00:02:38,640
cannot drop software there

69
00:02:38,640 --> 00:02:40,400
and if something is within windows

70
00:02:40,400 --> 00:02:43,280
folder is also allowed to be run if i

71
00:02:43,280 --> 00:02:47,519
run anything let's do this with

72
00:02:47,519 --> 00:02:49,760
char map my favorite

73
00:02:49,760 --> 00:02:52,640
is even better better than calculator

74
00:02:52,640 --> 00:02:54,480
charm up is up and running if i go to

75
00:02:54,480 --> 00:02:55,760
the even block

76
00:02:55,760 --> 00:02:58,000
f5 i can see

77
00:02:58,000 --> 00:03:00,000
char map was allowed

78
00:03:00,000 --> 00:03:02,480
to run which is quite obvious as it

79
00:03:02,480 --> 00:03:05,840
stays within the windows folder

80
00:03:05,920 --> 00:03:08,000
usually

81
00:03:08,000 --> 00:03:09,920
for the simplicity

82
00:03:09,920 --> 00:03:11,760
when a blocker is being deployed at

83
00:03:11,760 --> 00:03:14,400
least at the initial stage we are not

84
00:03:14,400 --> 00:03:17,120
deploying rules for dll files we are

85
00:03:17,120 --> 00:03:19,200
focusing on executable files on exist

86
00:03:19,200 --> 00:03:20,080
only

87
00:03:20,080 --> 00:03:22,400
because it is simpler

88
00:03:22,400 --> 00:03:25,040
when we go deeper into that blocker we

89
00:03:25,040 --> 00:03:27,440
can realize one thing

90
00:03:27,440 --> 00:03:30,879
if within the token of the process there

91
00:03:30,879 --> 00:03:34,400
is a seat present s156

92
00:03:34,400 --> 00:03:37,840
a blocker totally ignores such

93
00:03:37,840 --> 00:03:39,519
executable file

94
00:03:39,519 --> 00:03:40,640
so

95
00:03:40,640 --> 00:03:43,360
i can steal such token or i can use a

96
00:03:43,360 --> 00:03:45,440
trick allowing me to

97
00:03:45,440 --> 00:03:47,599
have such token without

98
00:03:47,599 --> 00:03:48,879
being blocked

99
00:03:48,879 --> 00:03:51,440
i will

100
00:03:51,680 --> 00:03:53,280
elevate

101
00:03:53,280 --> 00:03:54,000
to

102
00:03:54,000 --> 00:03:57,519
my process using this token using a dll

103
00:03:57,519 --> 00:04:01,040
so it will be basically run dll32 as

104
00:04:01,040 --> 00:04:03,519
this one is allowed as is in the windows

105
00:04:03,519 --> 00:04:05,680
folder and i rarely can find

106
00:04:05,680 --> 00:04:07,519
environments where it can can be

107
00:04:07,519 --> 00:04:08,959
actually blocked

108
00:04:08,959 --> 00:04:12,879
and then there is a dll

109
00:04:13,200 --> 00:04:15,920
ignore pocket.tll there is a function do

110
00:04:15,920 --> 00:04:16,639
it

111
00:04:16,639 --> 00:04:18,160
and then c

112
00:04:18,160 --> 00:04:21,199
windows system 32

113
00:04:21,199 --> 00:04:23,600
and then cmd

114
00:04:23,600 --> 00:04:27,199
and the cmd is being launched if i

115
00:04:27,199 --> 00:04:30,320
try to investigate what is inside

116
00:04:30,320 --> 00:04:32,639
who am i slash all

117
00:04:32,639 --> 00:04:34,560
i can find

118
00:04:34,560 --> 00:04:38,479
the seed i mentioned s156 here it is a

119
00:04:38,479 --> 00:04:40,479
special seed for a service

120
00:04:40,479 --> 00:04:42,560
so i have launched first process right

121
00:04:42,560 --> 00:04:44,479
now i can say the second one the cmd

122
00:04:44,479 --> 00:04:47,440
itself the who am i process i can launch

123
00:04:47,440 --> 00:04:50,240
whatever notepad

124
00:04:50,240 --> 00:04:52,479
uh it is allowed

125
00:04:52,479 --> 00:04:54,880
on my desktop i have

126
00:04:54,880 --> 00:04:56,960
yet another

127
00:04:56,960 --> 00:04:59,759
special application right aaa special

128
00:04:59,759 --> 00:05:03,440
application writing 100 a letters which

129
00:05:03,440 --> 00:05:05,759
is perfectly well working if i refresh

130
00:05:05,759 --> 00:05:07,600
the log

131
00:05:07,600 --> 00:05:10,479
absolutely nothing about this is

132
00:05:10,479 --> 00:05:12,479
appearing within the lock the last thing

133
00:05:12,479 --> 00:05:15,199
that appeared was run dll which is

134
00:05:15,199 --> 00:05:17,039
allowed absolutely everywhere

135
00:05:17,039 --> 00:05:19,600
so if you are able

136
00:05:19,600 --> 00:05:22,160
to launch a process

137
00:05:22,160 --> 00:05:25,680
having s156 within the token it will be

138
00:05:25,680 --> 00:05:28,080
just ignored by the applocker not

139
00:05:28,080 --> 00:05:30,960
enforced not logged not

140
00:05:30,960 --> 00:05:33,360
audited not blocked whatever

141
00:05:33,360 --> 00:05:36,400
it will just totally ignore and is it is

142
00:05:36,400 --> 00:05:39,680
for this single particular seat so

143
00:05:39,680 --> 00:05:42,720
it is good to monitor somehow if you

144
00:05:42,720 --> 00:05:45,919
have a process running with the seat

145
00:05:45,919 --> 00:05:47,840
under normal conditions

146
00:05:47,840 --> 00:05:50,479
it is only about services it is a legal

147
00:05:50,479 --> 00:05:53,039
seat for services

148
00:05:53,039 --> 00:05:55,759
but not for interactive applications so

149
00:05:55,759 --> 00:05:57,600
you have to find your way to monitor

150
00:05:57,600 --> 00:05:58,639
somehow

151
00:05:58,639 --> 00:06:01,120
okay let's go to the

152
00:06:01,120 --> 00:06:04,240
second a poker nice thing is about the

153
00:06:04,240 --> 00:06:08,080
speed because i mentioned hashes

154
00:06:08,080 --> 00:06:10,479
calculating a hash

155
00:06:10,479 --> 00:06:13,520
is somehow i would say time consuming

156
00:06:13,520 --> 00:06:14,319
why

157
00:06:14,319 --> 00:06:16,400
not only because of the calculation

158
00:06:16,400 --> 00:06:19,199
itself but about the need of reading

159
00:06:19,199 --> 00:06:21,600
entire file from the disk

160
00:06:21,600 --> 00:06:24,880
uh windows introduces prefetch etc all

161
00:06:24,880 --> 00:06:26,319
for the

162
00:06:26,319 --> 00:06:28,720
speed at the same time using a blocker

163
00:06:28,720 --> 00:06:30,080
with

164
00:06:30,080 --> 00:06:32,880
hashing every single executable file or

165
00:06:32,880 --> 00:06:34,639
dll file

166
00:06:34,639 --> 00:06:36,960
being launched would

167
00:06:36,960 --> 00:06:40,160
slow down the computer significantly so

168
00:06:40,160 --> 00:06:43,600
i will create a rule based on hash for

169
00:06:43,600 --> 00:06:44,319
the

170
00:06:44,319 --> 00:06:46,960
file i already have run so create new

171
00:06:46,960 --> 00:06:49,039
role

172
00:06:49,039 --> 00:06:51,840
next allo for everyone

173
00:06:51,840 --> 00:06:53,280
file hash

174
00:06:53,280 --> 00:06:54,400
next

175
00:06:54,400 --> 00:06:56,960
browse files i will go to my file i have

176
00:06:56,960 --> 00:06:58,400
it on the desktop

177
00:06:58,400 --> 00:07:00,880
this is the one right aaa

178
00:07:00,880 --> 00:07:05,280
open next create i have a rule for it

179
00:07:05,280 --> 00:07:07,440
if i i will close this one as this one

180
00:07:07,440 --> 00:07:08,319
is

181
00:07:08,319 --> 00:07:11,680
ignored anyway i will go here

182
00:07:11,680 --> 00:07:14,560
i will run this piece of code

183
00:07:14,560 --> 00:07:15,840
right

184
00:07:15,840 --> 00:07:18,639
100 letter a appears on the screen

185
00:07:18,639 --> 00:07:19,919
f5

186
00:07:19,919 --> 00:07:21,759
it was allowed to run

187
00:07:21,759 --> 00:07:24,080
right now which is perfectly according

188
00:07:24,080 --> 00:07:26,000
to our

189
00:07:26,000 --> 00:07:28,479
expectations what i will do now i will

190
00:07:28,479 --> 00:07:31,599
do a virtual uh

191
00:07:31,599 --> 00:07:34,319
way of unplugging my hard disk

192
00:07:34,319 --> 00:07:36,560
manipulating it on the another computer

193
00:07:36,560 --> 00:07:39,759
and then tagging it back to my laptop so

194
00:07:39,759 --> 00:07:42,639
how i will achieve this

195
00:07:42,639 --> 00:07:44,720
i will go here

196
00:07:44,720 --> 00:07:47,759
attach vhd

197
00:07:49,680 --> 00:07:52,080
and then the name is

198
00:07:52,080 --> 00:07:53,000
x

199
00:07:53,000 --> 00:07:54,720
vhdx

200
00:07:54,720 --> 00:07:58,639
and new x drive appears within my system

201
00:07:58,639 --> 00:08:00,240
i will go here

202
00:08:00,240 --> 00:08:03,120
i will copy

203
00:08:03,680 --> 00:08:06,639
right iaa into the x drive

204
00:08:06,639 --> 00:08:09,440
it was copied if i run it from the x

205
00:08:09,440 --> 00:08:10,560
drive

206
00:08:10,560 --> 00:08:13,199
obviously it will run and it will be

207
00:08:13,199 --> 00:08:14,240
allowed

208
00:08:14,240 --> 00:08:16,479
to be run x right ia

209
00:08:16,479 --> 00:08:18,240
because the hash

210
00:08:18,240 --> 00:08:19,919
clearly matches

211
00:08:19,919 --> 00:08:22,000
i will manipulate this disk offline

212
00:08:22,000 --> 00:08:23,840
right now by

213
00:08:23,840 --> 00:08:26,160
detaching the vhd

214
00:08:26,160 --> 00:08:27,680
yes

215
00:08:27,680 --> 00:08:30,479
going to

216
00:08:31,199 --> 00:08:33,360
hex editor

217
00:08:33,360 --> 00:08:35,679
loading the vhd

218
00:08:35,679 --> 00:08:37,279
finding

219
00:08:37,279 --> 00:08:39,120
the pattern

220
00:08:39,120 --> 00:08:41,599
it is here and i will replace the

221
00:08:41,599 --> 00:08:42,719
pattern

222
00:08:42,719 --> 00:08:44,880
within the executable file couple of my

223
00:08:44,880 --> 00:08:46,959
a letters with a

224
00:08:46,959 --> 00:08:48,959
x letter

225
00:08:48,959 --> 00:08:50,480
close

226
00:08:50,480 --> 00:08:54,200
reattach it

227
00:08:56,000 --> 00:08:58,080
sorry it is c

228
00:08:58,080 --> 00:08:59,519
temp

229
00:08:59,519 --> 00:09:03,120
x v h the x

230
00:09:03,120 --> 00:09:05,200
okay

231
00:09:05,200 --> 00:09:06,720
it appeared again

232
00:09:06,720 --> 00:09:09,200
and i will run

233
00:09:09,200 --> 00:09:12,000
the same x right iaa

234
00:09:12,000 --> 00:09:15,279
with the image being manipulated offline

235
00:09:15,279 --> 00:09:17,200
and not the big surprise i have couple

236
00:09:17,200 --> 00:09:19,440
of x letter

237
00:09:19,440 --> 00:09:20,880
over here

238
00:09:20,880 --> 00:09:23,040
do the hash of the executable file match

239
00:09:23,040 --> 00:09:25,040
the previous one

240
00:09:25,040 --> 00:09:26,880
not really

241
00:09:26,880 --> 00:09:29,680
if i take a look into the log

242
00:09:29,680 --> 00:09:31,360
over here

243
00:09:31,360 --> 00:09:33,120
f5

244
00:09:33,120 --> 00:09:34,240
here

245
00:09:34,240 --> 00:09:36,720
hex editor was not allowed to be run not

246
00:09:36,720 --> 00:09:39,519
a big surprise but the right aaa the

247
00:09:39,519 --> 00:09:42,160
manipulated one was perfectly well

248
00:09:42,160 --> 00:09:44,720
allowed to be run

249
00:09:44,720 --> 00:09:45,839
it means

250
00:09:45,839 --> 00:09:49,600
the hash of the file is being cached

251
00:09:49,600 --> 00:09:51,600
somewhere

252
00:09:51,600 --> 00:09:53,279
i will try to find it

253
00:09:53,279 --> 00:09:56,320
okay let's go for the hashes first

254
00:09:56,320 --> 00:09:59,120
cls and i will go

255
00:09:59,120 --> 00:10:01,440
powershell

256
00:10:01,440 --> 00:10:02,399
and

257
00:10:02,399 --> 00:10:03,839
get

258
00:10:03,839 --> 00:10:05,279
file hash

259
00:10:05,279 --> 00:10:07,920
for right iaa the original one still

260
00:10:07,920 --> 00:10:09,680
staying on my desktop

261
00:10:09,680 --> 00:10:13,680
has a hash d35 and so on the manipulated

262
00:10:13,680 --> 00:10:15,600
one

263
00:10:15,600 --> 00:10:19,360
get file hash x

264
00:10:19,360 --> 00:10:21,600
right ia has a totally different one

265
00:10:21,600 --> 00:10:23,200
which is not the big

266
00:10:23,200 --> 00:10:24,399
surprise

267
00:10:24,399 --> 00:10:26,800
it is just a different executable file

268
00:10:26,800 --> 00:10:28,720
let's take a look on the powershell rule

269
00:10:28,720 --> 00:10:30,240
2 on the

270
00:10:30,240 --> 00:10:31,680
applocker rules

271
00:10:31,680 --> 00:10:32,800
right now

272
00:10:32,800 --> 00:10:33,600
so

273
00:10:33,600 --> 00:10:34,800
it would be

274
00:10:34,800 --> 00:10:36,160
get

275
00:10:36,160 --> 00:10:38,240
applocker policy

276
00:10:38,240 --> 00:10:40,720
local

277
00:10:41,519 --> 00:10:43,440
and then

278
00:10:43,440 --> 00:10:45,600
to xml

279
00:10:45,600 --> 00:10:48,160
and here i can find the

280
00:10:48,160 --> 00:10:49,120
hash

281
00:10:49,120 --> 00:10:51,040
being allowed

282
00:10:51,040 --> 00:10:53,680
does it match any of those

283
00:10:53,680 --> 00:10:56,640
it is strato56 obviously

284
00:10:56,640 --> 00:10:58,079
it is

285
00:10:58,079 --> 00:10:59,200
something

286
00:10:59,200 --> 00:11:00,880
else not the first one not the second

287
00:11:00,880 --> 00:11:03,839
one it is because uh the beauty of that

288
00:11:03,839 --> 00:11:05,600
blocker it lies about the hashing

289
00:11:05,600 --> 00:11:08,959
algorithm it is not schwa five six

290
00:11:08,959 --> 00:11:12,560
it is so cold it is not officially

291
00:11:12,560 --> 00:11:15,839
stated but it is so called

292
00:11:15,839 --> 00:11:19,040
executable hash or authentic code hash

293
00:11:19,040 --> 00:11:21,519
and so on the algorithm is documented

294
00:11:21,519 --> 00:11:24,000
but no one is clearly saying a blocker

295
00:11:24,000 --> 00:11:26,240
is using it so it is yet totally

296
00:11:26,240 --> 00:11:28,240
different hash

297
00:11:28,240 --> 00:11:30,560
by the way if you have hashes of your

298
00:11:30,560 --> 00:11:33,040
files and you want to create a proper

299
00:11:33,040 --> 00:11:35,600
rules based on your hashes you will fail

300
00:11:35,600 --> 00:11:37,839
because applocker will not use real

301
00:11:37,839 --> 00:11:39,360
strato56

302
00:11:39,360 --> 00:11:42,000
there is undocumented xml parameter

303
00:11:42,000 --> 00:11:44,240
called strat256 flat

304
00:11:44,240 --> 00:11:47,440
being actually strato56 at the same time

305
00:11:47,440 --> 00:11:51,040
i would not rely on this too much

306
00:11:51,040 --> 00:11:54,320
as it is undocumented so

307
00:11:54,320 --> 00:11:56,480
how to calculate this hash if you have a

308
00:11:56,480 --> 00:11:57,600
file

309
00:11:57,600 --> 00:11:59,839
get a block

310
00:11:59,839 --> 00:12:01,839
up

311
00:12:01,839 --> 00:12:04,160
locker file information

312
00:12:04,160 --> 00:12:07,040
and then you can specify a file

313
00:12:07,040 --> 00:12:08,000
and

314
00:12:08,000 --> 00:12:09,120
the hash

315
00:12:09,120 --> 00:12:10,560
you can see on the beginning i will not

316
00:12:10,560 --> 00:12:12,639
format it nicely over here but you can

317
00:12:12,639 --> 00:12:15,760
see it is exactly the harsh over here

318
00:12:15,760 --> 00:12:19,200
not being schwa 256 at all despite what

319
00:12:19,200 --> 00:12:21,839
microsoft is telling to telling us

320
00:12:21,839 --> 00:12:23,200
okay

321
00:12:23,200 --> 00:12:25,360
so this is the about hashing algorithm

322
00:12:25,360 --> 00:12:27,120
now about the

323
00:12:27,120 --> 00:12:30,000
how the hash is being stored where is

324
00:12:30,000 --> 00:12:31,040
the hash

325
00:12:31,040 --> 00:12:33,600
and uh how it was manipulated

326
00:12:33,600 --> 00:12:35,839
the hash for applocker

327
00:12:35,839 --> 00:12:37,360
is being

328
00:12:37,360 --> 00:12:40,959
stored within so-called ntfs extended

329
00:12:40,959 --> 00:12:42,480
attributes

330
00:12:42,480 --> 00:12:45,360
you can think about ntfs extended

331
00:12:45,360 --> 00:12:48,240
attributes somehow like you think about

332
00:12:48,240 --> 00:12:50,880
alternate data stream is not the same

333
00:12:50,880 --> 00:12:53,120
but it is somehow comparable to this

334
00:12:53,120 --> 00:12:54,240
kind of

335
00:12:54,240 --> 00:12:56,399
alternate data stream on steroids and so

336
00:12:56,399 --> 00:12:59,600
on so if you want to display i will exit

337
00:12:59,600 --> 00:13:02,399
my powershell

338
00:13:02,480 --> 00:13:04,320
if you want to display

339
00:13:04,320 --> 00:13:06,480
extended attributes i will launch one

340
00:13:06,480 --> 00:13:08,480
console more it will be useful in a

341
00:13:08,480 --> 00:13:09,519
moment

342
00:13:09,519 --> 00:13:10,080
um

343
00:13:10,080 --> 00:13:11,360
[Music]

344
00:13:11,360 --> 00:13:13,920
desktop

345
00:13:13,920 --> 00:13:15,839
fsu till

346
00:13:15,839 --> 00:13:18,079
fsu till

347
00:13:18,079 --> 00:13:19,760
file

348
00:13:19,760 --> 00:13:21,600
extended attrib

349
00:13:21,600 --> 00:13:26,000
fsutil file and there is a query aaa

350
00:13:26,000 --> 00:13:29,519
parameter for querying

351
00:13:29,519 --> 00:13:31,360
extended attributes if you specify a

352
00:13:31,360 --> 00:13:34,639
file let's say right aaa

353
00:13:34,639 --> 00:13:36,720
you will see extended attributes

354
00:13:36,720 --> 00:13:38,959
displayed over here you can see the

355
00:13:38,959 --> 00:13:40,560
attribute

356
00:13:40,560 --> 00:13:42,720
hash info

357
00:13:42,720 --> 00:13:44,320
containing a

358
00:13:44,320 --> 00:13:48,320
cache of the hash and if we if you

359
00:13:48,320 --> 00:13:49,760
remember the hash

360
00:13:49,760 --> 00:13:52,880
uh the one visible over here

361
00:13:52,880 --> 00:13:55,920
six e3 and so on you can clearly find it

362
00:13:55,920 --> 00:13:58,560
over here as as well this is the a

363
00:13:58,560 --> 00:14:00,639
blocker hash of the file being stored

364
00:14:00,639 --> 00:14:03,279
within the extended attribute so if you

365
00:14:03,279 --> 00:14:06,320
manipulate the file offline the extended

366
00:14:06,320 --> 00:14:08,800
attribute is not updated there is no

367
00:14:08,800 --> 00:14:10,320
reason of doing it

368
00:14:10,320 --> 00:14:12,800
and it means that

369
00:14:12,800 --> 00:14:15,360
the extended attribute contains the old

370
00:14:15,360 --> 00:14:17,360
hash which is perfectly well trusted by

371
00:14:17,360 --> 00:14:19,360
the blocker driver

372
00:14:19,360 --> 00:14:20,560
so

373
00:14:20,560 --> 00:14:22,480
how we can manipulate

374
00:14:22,480 --> 00:14:25,279
the hash slightly better way is not that

375
00:14:25,279 --> 00:14:27,920
easy the idea of extended attribute is i

376
00:14:27,920 --> 00:14:30,480
would say well documented

377
00:14:30,480 --> 00:14:33,199
and there are two things over here

378
00:14:33,199 --> 00:14:36,240
within the name of the extended

379
00:14:36,240 --> 00:14:38,320
attribute the first thing within the

380
00:14:38,320 --> 00:14:41,120
name is the dollar kernel

381
00:14:41,120 --> 00:14:44,240
the attribute if the attribute name

382
00:14:44,240 --> 00:14:46,959
starts with the dollar kernel it is

383
00:14:46,959 --> 00:14:49,279
allowed to be manipulated only by the

384
00:14:49,279 --> 00:14:52,399
kernel modules so you cannot create

385
00:14:52,399 --> 00:14:55,040
manipulate change delete whatever such

386
00:14:55,040 --> 00:14:57,600
attribute from the user mode

387
00:14:57,600 --> 00:14:59,600
it is why it may be easier to manipulate

388
00:14:59,600 --> 00:15:02,160
the drive offline or if you want to

389
00:15:02,160 --> 00:15:04,320
plant your own driver into a kernel up

390
00:15:04,320 --> 00:15:05,360
to you

391
00:15:05,360 --> 00:15:08,639
another thing within the

392
00:15:08,720 --> 00:15:11,760
extended attribute is the part part of

393
00:15:11,760 --> 00:15:14,639
the name when you can see the part

394
00:15:14,639 --> 00:15:17,199
within the name after dollar kernel

395
00:15:17,199 --> 00:15:21,199
it is a signal for the ntfs ntfs.sys

396
00:15:21,199 --> 00:15:23,000
driver telling

397
00:15:23,000 --> 00:15:24,639
ntfs.driver

398
00:15:24,639 --> 00:15:27,760
if the file content is being manipulated

399
00:15:27,760 --> 00:15:28,800
anyway

400
00:15:28,800 --> 00:15:31,839
the extended attribute must be removed

401
00:15:31,839 --> 00:15:34,720
totally it is why i cannot change the

402
00:15:34,720 --> 00:15:36,240
file

403
00:15:36,240 --> 00:15:37,279
online

404
00:15:37,279 --> 00:15:40,160
i have to go under ntfs driver

405
00:15:40,160 --> 00:15:42,639
if i can do this online under the ntfs

406
00:15:42,639 --> 00:15:45,120
driver it will be perfectly legit for my

407
00:15:45,120 --> 00:15:49,279
purposes doing it on the vhd x drive is

408
00:15:49,279 --> 00:15:52,480
just simpler and easier to

409
00:15:52,480 --> 00:15:55,120
demonstrate so if i manipulate the file

410
00:15:55,120 --> 00:15:57,120
the extended attribute will disappear

411
00:15:57,120 --> 00:15:58,880
and if i run the file again the hash

412
00:15:58,880 --> 00:16:01,680
will be calculated the new extended

413
00:16:01,680 --> 00:16:03,279
attribute will be established and

414
00:16:03,279 --> 00:16:06,160
applocker will start relying on this

415
00:16:06,160 --> 00:16:08,639
extended attribute

416
00:16:08,639 --> 00:16:10,959
i know manipulating the string within

417
00:16:10,959 --> 00:16:13,279
the file it is not that complex but

418
00:16:13,279 --> 00:16:15,440
sometimes it may be

419
00:16:15,440 --> 00:16:17,759
sometimes maybe something more

420
00:16:17,759 --> 00:16:20,560
sophisticated is needed for this purpose

421
00:16:20,560 --> 00:16:22,480
i can plant

422
00:16:22,480 --> 00:16:25,040
this particular

423
00:16:25,040 --> 00:16:26,240
hash

424
00:16:26,240 --> 00:16:28,800
within the extended attribute so i will

425
00:16:28,800 --> 00:16:29,920
copy

426
00:16:29,920 --> 00:16:30,959
my

427
00:16:30,959 --> 00:16:33,920
hacking application to the x drive

428
00:16:33,920 --> 00:16:37,519
and i will use

429
00:16:37,519 --> 00:16:41,759
a setup locker a hash cache

430
00:16:41,759 --> 00:16:43,360
file i have created

431
00:16:43,360 --> 00:16:44,720
created

432
00:16:44,720 --> 00:16:46,399
for the x

433
00:16:46,399 --> 00:16:48,639
my hacking application and i will place

434
00:16:48,639 --> 00:16:51,360
the hash over here i'm doing a simple

435
00:16:51,360 --> 00:16:54,800
trick here as i said i cannot create a

436
00:16:54,800 --> 00:16:56,720
dollar kernel extended attribute it is

437
00:16:56,720 --> 00:16:58,000
not allowed for

438
00:16:58,000 --> 00:17:01,120
mermortals at the same time i can create

439
00:17:01,120 --> 00:17:04,079
a hush kernel and so on extended

440
00:17:04,079 --> 00:17:07,280
attribute and this is what i did and i'm

441
00:17:07,280 --> 00:17:08,720
displaying a nice

442
00:17:08,720 --> 00:17:11,839
message now it is your job to rename it

443
00:17:11,839 --> 00:17:13,839
somehow from the hash corner into the

444
00:17:13,839 --> 00:17:15,439
dollar kernel

445
00:17:15,439 --> 00:17:16,640
so

446
00:17:16,640 --> 00:17:18,480
to do this

447
00:17:18,480 --> 00:17:20,480
i will again

448
00:17:20,480 --> 00:17:22,480
detach vhd

449
00:17:22,480 --> 00:17:25,839
okay i will again run

450
00:17:25,839 --> 00:17:28,879
a hex editor

451
00:17:29,039 --> 00:17:31,280
reopen the same

452
00:17:31,280 --> 00:17:32,960
file

453
00:17:32,960 --> 00:17:35,840
and use ctrl r for replace and i will

454
00:17:35,840 --> 00:17:38,960
replace replace hash

455
00:17:38,960 --> 00:17:41,440
kernel

456
00:17:41,440 --> 00:17:44,559
dot into the dollar kernel

457
00:17:44,559 --> 00:17:45,840
dot

458
00:17:45,840 --> 00:17:48,799
replace all

459
00:17:49,120 --> 00:17:50,720
and

460
00:17:50,720 --> 00:17:53,200
it was replaced you can see

461
00:17:53,200 --> 00:17:54,960
it was this occurrence so it is probably

462
00:17:54,960 --> 00:17:56,880
the right one it was the hash

463
00:17:56,880 --> 00:17:58,400
something would be

464
00:17:58,400 --> 00:18:00,799
dollar

465
00:18:00,799 --> 00:18:03,039
something i will close it i will

466
00:18:03,039 --> 00:18:04,960
reattach my

467
00:18:04,960 --> 00:18:06,160
virtual

468
00:18:06,160 --> 00:18:08,080
drive attach

469
00:18:08,080 --> 00:18:09,120
c

470
00:18:09,120 --> 00:18:10,400
temp

471
00:18:10,400 --> 00:18:14,120
x vhdx

472
00:18:16,160 --> 00:18:18,080
again

473
00:18:18,080 --> 00:18:20,640
attach once i have

474
00:18:20,640 --> 00:18:22,960
edited one file and attach another one

475
00:18:22,960 --> 00:18:25,120
it is even worse than misspelling the

476
00:18:25,120 --> 00:18:27,280
path c temp

477
00:18:27,280 --> 00:18:30,559
x v hd x

478
00:18:30,559 --> 00:18:34,799
it appeared i have my

479
00:18:35,840 --> 00:18:38,720
hacking application x

480
00:18:38,720 --> 00:18:40,320
p w n x

481
00:18:40,320 --> 00:18:41,600
dot x z

482
00:18:41,600 --> 00:18:42,799
it run

483
00:18:42,799 --> 00:18:45,200
if you take a look into the log

484
00:18:45,200 --> 00:18:47,440
it was perfectly well

485
00:18:47,440 --> 00:18:48,480
allowed

486
00:18:48,480 --> 00:18:52,080
to be run even if it's obviously it

487
00:18:52,080 --> 00:18:54,799
or it should be obviously

488
00:18:54,799 --> 00:18:56,880
being blocked by a blocker this warning

489
00:18:56,880 --> 00:18:59,679
is about the hex editor which for reason

490
00:18:59,679 --> 00:19:01,919
is being displayed here as it's not

491
00:19:01,919 --> 00:19:03,120
covered by

492
00:19:03,120 --> 00:19:06,400
any rule so it is not

493
00:19:06,400 --> 00:19:09,039
effectively allowed so

494
00:19:09,039 --> 00:19:11,600
what does it mean

495
00:19:11,600 --> 00:19:14,160
we can manipulate the stuff

496
00:19:14,160 --> 00:19:16,320
a blocker is

497
00:19:16,320 --> 00:19:19,200
using some undocumented

498
00:19:19,200 --> 00:19:21,039
internals

499
00:19:21,039 --> 00:19:23,840
the first one i would mention is it is

500
00:19:23,840 --> 00:19:26,240
ignoring s156

501
00:19:26,240 --> 00:19:27,120
pre

502
00:19:27,120 --> 00:19:29,840
processes when the token has

503
00:19:29,840 --> 00:19:32,240
s156 on the list on the group being very

504
00:19:32,240 --> 00:19:33,280
precise

505
00:19:33,280 --> 00:19:38,000
the second thing is it relies on hashes

506
00:19:38,000 --> 00:19:40,720
and the hash does not really match

507
00:19:40,720 --> 00:19:43,600
schwa256 even if a blocker tries to tell

508
00:19:43,600 --> 00:19:46,640
you so the second thing it relies on the

509
00:19:46,640 --> 00:19:48,640
cache of the hashes

510
00:19:48,640 --> 00:19:51,200
and on the cache of the

511
00:19:51,200 --> 00:19:53,600
digital signature as well because for

512
00:19:53,600 --> 00:19:55,600
the hashes it doesn't look like very

513
00:19:55,600 --> 00:19:57,840
practical but we can use exactly the

514
00:19:57,840 --> 00:20:00,320
same technique and it will work to

515
00:20:00,320 --> 00:20:01,679
falsify

516
00:20:01,679 --> 00:20:04,840
the digital signature

517
00:20:04,840 --> 00:20:08,400
of for microsoft for example because if

518
00:20:08,400 --> 00:20:11,760
the file is being digitally signed

519
00:20:11,760 --> 00:20:13,840
here you can see

520
00:20:13,840 --> 00:20:15,360
where is my

521
00:20:15,360 --> 00:20:18,000
f7 uh

522
00:20:18,000 --> 00:20:19,679
okay i will type the very complex

523
00:20:19,679 --> 00:20:22,559
command again fsu till

524
00:20:22,559 --> 00:20:26,240
file query

525
00:20:27,760 --> 00:20:29,039
x

526
00:20:29,039 --> 00:20:31,280
write aaa if the file is being digitally

527
00:20:31,280 --> 00:20:33,440
signed i have digitally signed my

528
00:20:33,440 --> 00:20:34,799
application

529
00:20:34,799 --> 00:20:38,000
the digital signature will be stored

530
00:20:38,000 --> 00:20:41,520
within the aid 3 stream and the extended

531
00:20:41,520 --> 00:20:43,520
attribute will be called kernel purge

532
00:20:43,520 --> 00:20:46,400
not very surprising app id for applocker

533
00:20:46,400 --> 00:20:49,280
and then signer info you can manipulate

534
00:20:49,280 --> 00:20:51,840
this particular piece of information as

535
00:20:51,840 --> 00:20:55,440
well effectively meaning that

536
00:20:55,440 --> 00:20:57,679
if you are using a blocker probably

537
00:20:57,679 --> 00:20:59,600
whitelist some applications on the

538
00:20:59,600 --> 00:21:01,520
digital signature very common practice

539
00:21:01,520 --> 00:21:04,159
is to whitelist microsoft things

540
00:21:04,159 --> 00:21:06,559
because microsoft tries to store stuff

541
00:21:06,559 --> 00:21:08,799
within the user profile update and so on

542
00:21:08,799 --> 00:21:09,919
so it is

543
00:21:09,919 --> 00:21:10,960
safe

544
00:21:10,960 --> 00:21:13,360
to whitelist anything from microsoft

545
00:21:13,360 --> 00:21:15,840
effectively if you are able to

546
00:21:15,840 --> 00:21:18,720
offline put such cash information about

547
00:21:18,720 --> 00:21:20,640
microsoft signature

548
00:21:20,640 --> 00:21:22,559
onto a file

549
00:21:22,559 --> 00:21:24,880
on the offline media

550
00:21:24,880 --> 00:21:28,320
if you plug the media in back and if you

551
00:21:28,320 --> 00:21:31,120
run the executable file applocker will

552
00:21:31,120 --> 00:21:33,600
believe it is perfectly

553
00:21:33,600 --> 00:21:36,640
legit because it is digitally signed by

554
00:21:36,640 --> 00:21:39,919
microsoft by the way yet another uh

555
00:21:39,919 --> 00:21:42,159
beautiful thing within applocker we have

556
00:21:42,159 --> 00:21:44,400
a powershell commandlet

557
00:21:44,400 --> 00:21:46,799
about testing a blocker policy tesla

558
00:21:46,799 --> 00:21:49,280
blocker police you have to specify xml

559
00:21:49,280 --> 00:21:51,440
file and then executable file name and

560
00:21:51,440 --> 00:21:53,840
you will see if this file will be

561
00:21:53,840 --> 00:21:56,880
allowed to be run or not already the app

562
00:21:56,880 --> 00:21:58,880
test applocker

563
00:21:58,880 --> 00:22:00,320
policy

564
00:22:00,320 --> 00:22:03,440
commandlet is using a real

565
00:22:03,440 --> 00:22:06,000
calculated on-demand

566
00:22:06,000 --> 00:22:09,520
hash of the file and not the stored one

567
00:22:09,520 --> 00:22:11,679
so it is perfectly possible

568
00:22:11,679 --> 00:22:14,559
to see i will not export xml policy and

569
00:22:14,559 --> 00:22:17,840
so on but it is very easy my file with

570
00:22:17,840 --> 00:22:20,240
the manipulated

571
00:22:20,240 --> 00:22:21,280
hash

572
00:22:21,280 --> 00:22:24,000
will run as a blocker will trust it if i

573
00:22:24,000 --> 00:22:26,320
test it through powershell i will see

574
00:22:26,320 --> 00:22:28,000
information it will be not allowed to be

575
00:22:28,000 --> 00:22:28,799
run

576
00:22:28,799 --> 00:22:31,200
because the test command relies on the

577
00:22:31,200 --> 00:22:33,039
real content of the file and the

578
00:22:33,039 --> 00:22:35,120
applocker itself relies on it on its

579
00:22:35,120 --> 00:22:36,000
hash

580
00:22:36,000 --> 00:22:38,320
they went too fast a bit i would say

581
00:22:38,320 --> 00:22:41,360
when it comes to resources um there is a

582
00:22:41,360 --> 00:22:44,320
short write-up somewhere there is a file

583
00:22:44,320 --> 00:22:46,559
for copying extended attributes from one

584
00:22:46,559 --> 00:22:49,120
file to another one something i i didn't

585
00:22:49,120 --> 00:22:51,919
present but also working there is also

586
00:22:51,919 --> 00:22:54,320
short demonstration on youtube i have

587
00:22:54,320 --> 00:22:56,640
recorded if you are quick enough you can

588
00:22:56,640 --> 00:22:58,880
type it in if you prefer go to the list

589
00:22:58,880 --> 00:23:01,520
of those links you can go

590
00:23:01,520 --> 00:23:04,080
by the code and that's basically it

591
00:23:04,080 --> 00:23:06,960
thank you very much

