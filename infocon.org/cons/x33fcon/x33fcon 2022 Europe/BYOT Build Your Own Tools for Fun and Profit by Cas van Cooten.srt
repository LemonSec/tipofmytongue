1
00:00:01,850 --> 00:00:07,119
[Music]

2
00:00:07,120 --> 00:00:09,360
so good afternoon everyone uh it's

3
00:00:09,360 --> 00:00:12,400
friday uh friday afternoon uh second to

4
00:00:12,400 --> 00:00:15,440
last talk of uh i hope you'll have some

5
00:00:15,440 --> 00:00:17,840
energy left to uh sit through these uh

6
00:00:17,840 --> 00:00:20,320
these last two talks uh i'll try not to

7
00:00:20,320 --> 00:00:22,800
ramble on uh too long

8
00:00:22,800 --> 00:00:25,599
so we've had a lot of excellent uh talks

9
00:00:25,599 --> 00:00:28,160
today mostly quite technical so for this

10
00:00:28,160 --> 00:00:30,480
talk i would like to kind of take a step

11
00:00:30,480 --> 00:00:33,120
back and go a bit higher level and talk

12
00:00:33,120 --> 00:00:34,559
about the

13
00:00:34,559 --> 00:00:36,880
necessity really of a offensive

14
00:00:36,880 --> 00:00:40,320
development capability for for red teams

15
00:00:40,320 --> 00:00:42,559
before i go into that i would like to

16
00:00:42,559 --> 00:00:44,719
introduce myself and also kind of

17
00:00:44,719 --> 00:00:45,680
explain

18
00:00:45,680 --> 00:00:46,719
why

19
00:00:46,719 --> 00:00:48,399
you have to listen to me ramble on this

20
00:00:48,399 --> 00:00:50,640
topic for 45 minutes

21
00:00:50,640 --> 00:00:54,000
uh so my name is kas von kota i'm a red

22
00:00:54,000 --> 00:00:56,480
teamer at a large financial institution

23
00:00:56,480 --> 00:00:59,039
in in the netherlands that also explains

24
00:00:59,039 --> 00:01:01,039
my accent so sorry about that the dutch

25
00:01:01,039 --> 00:01:04,640
english accent is really horrible

26
00:01:04,879 --> 00:01:07,119
i actually started out as a security

27
00:01:07,119 --> 00:01:08,960
consultant so

28
00:01:08,960 --> 00:01:11,119
i studied information science which is

29
00:01:11,119 --> 00:01:13,200
uh not at all very technical it's more

30
00:01:13,200 --> 00:01:16,320
business oriented so i started also as a

31
00:01:16,320 --> 00:01:18,479
cyber security consultant

32
00:01:18,479 --> 00:01:20,320
talking about privilege access

33
00:01:20,320 --> 00:01:22,560
management implementations and

34
00:01:22,560 --> 00:01:25,360
security policies rather than actually

35
00:01:25,360 --> 00:01:27,280
doing the hands-on work

36
00:01:27,280 --> 00:01:29,119
but a couple of years into my career i

37
00:01:29,119 --> 00:01:31,280
realized that that hacking was was way

38
00:01:31,280 --> 00:01:32,720
more fun

39
00:01:32,720 --> 00:01:34,240
so i kind of

40
00:01:34,240 --> 00:01:37,119
did a lot of courses did ocp osep a

41
00:01:37,119 --> 00:01:38,479
couple of others

42
00:01:38,479 --> 00:01:41,680
and uh uh rolled into the the dark side

43
00:01:41,680 --> 00:01:44,640
of security being uh being red teaming

44
00:01:44,640 --> 00:01:48,000
uh so nowadays i am uh i am the bad guy

45
00:01:48,000 --> 00:01:51,439
um and i uh yeah i focus on researching

46
00:01:51,439 --> 00:01:53,360
and thinking like the bad guys and

47
00:01:53,360 --> 00:01:55,920
bringing these attacks into practice

48
00:01:55,920 --> 00:01:57,920
and when i started doing that i also got

49
00:01:57,920 --> 00:02:00,079
an interest in in the field of malware

50
00:02:00,079 --> 00:02:03,040
and specifically malware development

51
00:02:03,040 --> 00:02:04,719
but because i

52
00:02:04,719 --> 00:02:07,200
i am not that technical still

53
00:02:07,200 --> 00:02:09,758
i really avoided learning learning c so

54
00:02:09,758 --> 00:02:11,920
i picked up the nim programming language

55
00:02:11,920 --> 00:02:13,120
which is like

56
00:02:13,120 --> 00:02:15,520
a higher level version of c and c plus

57
00:02:15,520 --> 00:02:17,760
plus we will talk about it a couple of

58
00:02:17,760 --> 00:02:19,520
times during this talk

59
00:02:19,520 --> 00:02:21,760
i will also have a defcon talk on this

60
00:02:21,760 --> 00:02:23,280
topic at the first revillage so if

61
00:02:23,280 --> 00:02:25,840
you're there come find me

62
00:02:25,840 --> 00:02:27,760
and i built a couple of tools that i

63
00:02:27,760 --> 00:02:30,080
published in nim as well so we will

64
00:02:30,080 --> 00:02:32,400
discuss two of them today an impact and

65
00:02:32,400 --> 00:02:34,000
an implant

66
00:02:34,000 --> 00:02:35,760
but i also release a couple of other

67
00:02:35,760 --> 00:02:38,480
random tools like cloud labs id which is

68
00:02:38,480 --> 00:02:41,200
a online lab environment

69
00:02:41,200 --> 00:02:43,280
like the ones that tim just mentioned

70
00:02:43,280 --> 00:02:45,920
and also a bug bounty scanner which i

71
00:02:45,920 --> 00:02:48,239
wrote back in the day

72
00:02:48,239 --> 00:02:49,840
if you want to follow me you can find me

73
00:02:49,840 --> 00:02:52,000
on the various social media i mostly

74
00:02:52,000 --> 00:02:55,440
focus on uh uh posting on twitter uh not

75
00:02:55,440 --> 00:02:58,640
too good at managing the other feats um

76
00:02:58,640 --> 00:03:01,440
and i i like to post uh about half memes

77
00:03:01,440 --> 00:03:03,200
there and have a

78
00:03:03,200 --> 00:03:04,959
technical content

79
00:03:04,959 --> 00:03:07,120
so let's also take a minute to discuss

80
00:03:07,120 --> 00:03:09,040
what i am not i already mentioned that

81
00:03:09,040 --> 00:03:10,959
i'm not too technical

82
00:03:10,959 --> 00:03:13,200
i am also not a developer

83
00:03:13,200 --> 00:03:14,800
which may sound weird because i'm giving

84
00:03:14,800 --> 00:03:17,280
a talk uh 45 minutes about offensive

85
00:03:17,280 --> 00:03:18,720
development right

86
00:03:18,720 --> 00:03:20,720
but i'm actually convinced that to get

87
00:03:20,720 --> 00:03:22,879
into this field you do not need to be a

88
00:03:22,879 --> 00:03:24,799
developer right or

89
00:03:24,799 --> 00:03:26,319
you do not need to be a software

90
00:03:26,319 --> 00:03:27,680
engineer

91
00:03:27,680 --> 00:03:30,560
so i'm mostly self-taught so if any of

92
00:03:30,560 --> 00:03:32,799
you are actual developers and you look

93
00:03:32,799 --> 00:03:34,239
through my code

94
00:03:34,239 --> 00:03:36,239
probably you will have several cringe

95
00:03:36,239 --> 00:03:37,360
moments

96
00:03:37,360 --> 00:03:39,680
because i know nothing about actually

97
00:03:39,680 --> 00:03:42,080
properly structuring your code i know

98
00:03:42,080 --> 00:03:44,319
very little about design patterns

99
00:03:44,319 --> 00:03:46,720
stuff like this uh but i make my code

100
00:03:46,720 --> 00:03:48,640
work right and if it works it hopefully

101
00:03:48,640 --> 00:03:50,319
ain't too stupid

102
00:03:50,319 --> 00:03:52,640
uh so i would also like to give this uh

103
00:03:52,640 --> 00:03:54,640
to you if you want to get into the field

104
00:03:54,640 --> 00:03:57,200
of malware development uh don't be

105
00:03:57,200 --> 00:03:58,879
stopped by the fact that you may not

106
00:03:58,879 --> 00:04:01,120
know a lot about development before you

107
00:04:01,120 --> 00:04:03,120
start

108
00:04:03,120 --> 00:04:06,319
so before we get into uh what offensive

109
00:04:06,319 --> 00:04:08,480
development is let's talk a little bit

110
00:04:08,480 --> 00:04:10,400
about

111
00:04:10,400 --> 00:04:12,720
what red theming is and why the red

112
00:04:12,720 --> 00:04:14,720
teamers love tools so much because we

113
00:04:14,720 --> 00:04:15,840
all know

114
00:04:15,840 --> 00:04:17,358
the red teams love tools they use them

115
00:04:17,358 --> 00:04:19,680
all the time why is that

116
00:04:19,680 --> 00:04:21,680
that stems actually from a couple of

117
00:04:21,680 --> 00:04:24,960
challenges that we have as red teamers

118
00:04:24,960 --> 00:04:26,960
of course as red teamers we are very

119
00:04:26,960 --> 00:04:28,800
proud of our field of work we like to

120
00:04:28,800 --> 00:04:31,120
brag about the cool hacks that we do and

121
00:04:31,120 --> 00:04:32,479
how lead we are

122
00:04:32,479 --> 00:04:34,240
but red team has a couple of challenges

123
00:04:34,240 --> 00:04:35,759
so first of all

124
00:04:35,759 --> 00:04:38,800
red teaming is quite hard

125
00:04:38,800 --> 00:04:41,280
there is a lot to learn especially when

126
00:04:41,280 --> 00:04:43,440
you're starting out as a red teamer

127
00:04:43,440 --> 00:04:46,080
but even for experienced red teamers

128
00:04:46,080 --> 00:04:48,000
there's a high pace of

129
00:04:48,000 --> 00:04:49,840
information that you need to keep up

130
00:04:49,840 --> 00:04:52,080
with in order to stay advanced or stay

131
00:04:52,080 --> 00:04:54,720
ahead of the blue teams

132
00:04:54,720 --> 00:04:56,639
you need to know a lot of technical

133
00:04:56,639 --> 00:05:00,080
information uh and you need to know uh

134
00:05:00,080 --> 00:05:02,320
kind of the balance between the commands

135
00:05:02,320 --> 00:05:03,759
you're running and the the risk of

136
00:05:03,759 --> 00:05:05,840
detection for example so just as a kind

137
00:05:05,840 --> 00:05:08,880
of thought experiment uh by show of hand

138
00:05:08,880 --> 00:05:10,720
how many of you are in offensive

139
00:05:10,720 --> 00:05:12,080
security

140
00:05:12,080 --> 00:05:14,960
or like red teaming

141
00:05:14,960 --> 00:05:17,280
about half out of those people that just

142
00:05:17,280 --> 00:05:19,120
raised their hand how many of you

143
00:05:19,120 --> 00:05:22,160
understand kerberos

144
00:05:22,320 --> 00:05:24,320
you guys are lying no one understands

145
00:05:24,320 --> 00:05:27,199
kerberos and i am convinced of it uh

146
00:05:27,199 --> 00:05:29,600
which is kind of a a nice case in point

147
00:05:29,600 --> 00:05:32,080
right uh of course i'm joking there

148
00:05:32,080 --> 00:05:34,240
but kerberos is one of the things like

149
00:05:34,240 --> 00:05:36,720
the protocols that's very complex and

150
00:05:36,720 --> 00:05:38,400
especially if you're just starting out

151
00:05:38,400 --> 00:05:39,120
in

152
00:05:39,120 --> 00:05:40,560
in red teaming

153
00:05:40,560 --> 00:05:42,800
and someone starts talking to you about

154
00:05:42,800 --> 00:05:45,680
tgt's service tickets delegation all

155
00:05:45,680 --> 00:05:47,360
this type of stuff

156
00:05:47,360 --> 00:05:49,120
that's a lot of information coming at

157
00:05:49,120 --> 00:05:51,039
you and you need to keep up with this

158
00:05:51,039 --> 00:05:52,560
stuff so that's kind of the first

159
00:05:52,560 --> 00:05:54,960
challenge of red teaming

160
00:05:54,960 --> 00:05:57,520
another challenge is that uh during red

161
00:05:57,520 --> 00:06:00,160
team ops there is a lot of risk

162
00:06:00,160 --> 00:06:02,319
and i mean risk in two senses of the

163
00:06:02,319 --> 00:06:05,039
world so in the first sense

164
00:06:05,039 --> 00:06:08,000
as red teamers we are almost exclusively

165
00:06:08,000 --> 00:06:11,280
testing in production so we are touching

166
00:06:11,280 --> 00:06:13,199
client systems or touching systems

167
00:06:13,199 --> 00:06:15,120
within our internal company

168
00:06:15,120 --> 00:06:16,800
that are probably business critical

169
00:06:16,800 --> 00:06:19,600
right and they are production systems

170
00:06:19,600 --> 00:06:20,400
so

171
00:06:20,400 --> 00:06:21,919
you all know the phrase don't test in

172
00:06:21,919 --> 00:06:23,440
production we are doing the exact

173
00:06:23,440 --> 00:06:26,319
opposite so every action we take has a

174
00:06:26,319 --> 00:06:29,199
availability risk so if we mess up if we

175
00:06:29,199 --> 00:06:31,840
accidentally run the shutdown command

176
00:06:31,840 --> 00:06:33,520
or do something that

177
00:06:33,520 --> 00:06:35,440
crashes an essential process on the

178
00:06:35,440 --> 00:06:37,039
system

179
00:06:37,039 --> 00:06:38,400
we are actually

180
00:06:38,400 --> 00:06:40,880
affecting production services which can

181
00:06:40,880 --> 00:06:43,039
be very bad news right especially for

182
00:06:43,039 --> 00:06:45,680
companies that are operations focused

183
00:06:45,680 --> 00:06:48,800
the other sense of the word risky is the

184
00:06:48,800 --> 00:06:51,199
opsec risk the operational security risk

185
00:06:51,199 --> 00:06:53,440
so we

186
00:06:53,440 --> 00:06:55,440
are trying to stay undetected as red

187
00:06:55,440 --> 00:06:58,240
teamers and every action that we run

188
00:06:58,240 --> 00:07:00,319
kind of has a implication

189
00:07:00,319 --> 00:07:02,800
for the operational security uh in other

190
00:07:02,800 --> 00:07:05,039
words for every action or a command that

191
00:07:05,039 --> 00:07:08,400
we run we have a very unlike varying

192
00:07:08,400 --> 00:07:10,880
level of risk to be detected and as a

193
00:07:10,880 --> 00:07:13,120
red teamer you need to kind of know

194
00:07:13,120 --> 00:07:15,280
at every step you're taking

195
00:07:15,280 --> 00:07:17,360
for both these types of risks what the

196
00:07:17,360 --> 00:07:18,800
implications are

197
00:07:18,800 --> 00:07:20,319
that's also hard to pick up if you're

198
00:07:20,319 --> 00:07:22,880
just just starting out

199
00:07:22,880 --> 00:07:24,000
further

200
00:07:24,000 --> 00:07:25,599
we don't like to admit it but parts of

201
00:07:25,599 --> 00:07:27,919
our job really are repetitive

202
00:07:27,919 --> 00:07:29,360
for example if we are scanning the

203
00:07:29,360 --> 00:07:31,759
external perimeter of a company there

204
00:07:31,759 --> 00:07:33,759
are tens of thousands of web facing

205
00:07:33,759 --> 00:07:36,080
machines and we want to know what is

206
00:07:36,080 --> 00:07:37,599
running on all these machines we are of

207
00:07:37,599 --> 00:07:39,280
course not going to do that by hand

208
00:07:39,280 --> 00:07:41,759
right so we are trying to automate

209
00:07:41,759 --> 00:07:45,440
this type of repetitive task so why am i

210
00:07:45,440 --> 00:07:46,800
telling you all this

211
00:07:46,800 --> 00:07:48,080
i'm telling you all this because

212
00:07:48,080 --> 00:07:50,479
basically tools can help at every step

213
00:07:50,479 --> 00:07:52,560
of this process

214
00:07:52,560 --> 00:07:53,360
so

215
00:07:53,360 --> 00:07:54,720
the hard part

216
00:07:54,720 --> 00:07:56,800
of the job we can learn from tools right

217
00:07:56,800 --> 00:07:58,240
if you're starting out and you're trying

218
00:07:58,240 --> 00:08:00,879
to understand for example kerberos what

219
00:08:00,879 --> 00:08:02,800
you can do is you can go to github and

220
00:08:02,800 --> 00:08:04,879
analyze some of the tools that are there

221
00:08:04,879 --> 00:08:06,240
that

222
00:08:06,240 --> 00:08:08,400
exploit attacks against kerberos or

223
00:08:08,400 --> 00:08:10,560
interact with it in some other way

224
00:08:10,560 --> 00:08:11,440
you can

225
00:08:11,440 --> 00:08:13,199
kind of make a collection of these two

226
00:08:13,199 --> 00:08:15,120
tools that you find interesting and you

227
00:08:15,120 --> 00:08:18,400
can analyze them and learn from it

228
00:08:18,400 --> 00:08:20,319
tools can also help with the the risky

229
00:08:20,319 --> 00:08:22,160
part of our job

230
00:08:22,160 --> 00:08:23,759
most notably

231
00:08:23,759 --> 00:08:26,560
one of the big advantages of using tools

232
00:08:26,560 --> 00:08:28,400
is that we can verify what they are

233
00:08:28,400 --> 00:08:29,280
doing

234
00:08:29,280 --> 00:08:32,000
so if we run either a availability risk

235
00:08:32,000 --> 00:08:34,479
or an operational security risk we can

236
00:08:34,479 --> 00:08:35,360
kind of

237
00:08:35,360 --> 00:08:37,519
make that into a tool we can verify with

238
00:08:37,519 --> 00:08:39,519
other red teamers maybe what do you

239
00:08:39,519 --> 00:08:41,440
think the risk of running this tool is

240
00:08:41,440 --> 00:08:42,240
and

241
00:08:42,240 --> 00:08:44,399
we can then run it if something goes

242
00:08:44,399 --> 00:08:46,399
wrong we can also analyze the tool and

243
00:08:46,399 --> 00:08:48,320
kind of see at what step

244
00:08:48,320 --> 00:08:50,720
the the mistake have been has been made

245
00:08:50,720 --> 00:08:52,880
so it's also traceable

246
00:08:52,880 --> 00:08:54,880
and of course the repetitive task i

247
00:08:54,880 --> 00:08:57,120
already mentioned we can automate so if

248
00:08:57,120 --> 00:08:59,279
there's 10 000 machines we need to scan

249
00:08:59,279 --> 00:09:01,440
we can just run a scanner and we can

250
00:09:01,440 --> 00:09:03,760
also run tools to automatically analyze

251
00:09:03,760 --> 00:09:06,800
the output so in short uh red teamers

252
00:09:06,800 --> 00:09:08,560
love tools because it makes our job a

253
00:09:08,560 --> 00:09:10,000
lot easier

254
00:09:10,000 --> 00:09:12,800
and it also makes a good red teamer to

255
00:09:12,800 --> 00:09:14,959
to know your tools know to find the

256
00:09:14,959 --> 00:09:18,480
right tools and know how to use them

257
00:09:18,480 --> 00:09:21,200
then the next question kind of becomes

258
00:09:21,200 --> 00:09:23,920
where do we get these tools

259
00:09:23,920 --> 00:09:26,000
you all know this struggle especially if

260
00:09:26,000 --> 00:09:28,959
you're in offensive security

261
00:09:28,959 --> 00:09:31,760
if you go to github you download let's

262
00:09:31,760 --> 00:09:34,160
say rubius to to do something on your

263
00:09:34,160 --> 00:09:36,240
target system and you load it on the

264
00:09:36,240 --> 00:09:38,399
target system you will get this nice

265
00:09:38,399 --> 00:09:40,560
defender pop-up that says malware has

266
00:09:40,560 --> 00:09:42,560
been prevented

267
00:09:42,560 --> 00:09:44,560
it is no longer an option

268
00:09:44,560 --> 00:09:46,800
for us attackers to

269
00:09:46,800 --> 00:09:49,279
just use tools that are off the shelf

270
00:09:49,279 --> 00:09:51,120
especially if they're malicious

271
00:09:51,120 --> 00:09:52,800
sometimes you can get away with them if

272
00:09:52,800 --> 00:09:54,800
they have some kind of legitimate use

273
00:09:54,800 --> 00:09:57,440
case right we just talked about a law

274
00:09:57,440 --> 00:09:58,880
bus for example

275
00:09:58,880 --> 00:10:00,480
there are some edge cases where tools

276
00:10:00,480 --> 00:10:02,800
off the shelf they do work

277
00:10:02,800 --> 00:10:04,640
but that's that's a matter of tradecraft

278
00:10:04,640 --> 00:10:05,600
but

279
00:10:05,600 --> 00:10:07,519
in general the the blue team is

280
00:10:07,519 --> 00:10:09,920
advancing uh so quickly luckily because

281
00:10:09,920 --> 00:10:11,839
that's also part of our job uh it's

282
00:10:11,839 --> 00:10:13,519
advancing so quickly that all these

283
00:10:13,519 --> 00:10:15,120
tools that we

284
00:10:15,120 --> 00:10:16,800
know and love

285
00:10:16,800 --> 00:10:19,360
don't cut it anymore so uh basically

286
00:10:19,360 --> 00:10:20,880
just grabbing these tools copy pasting

287
00:10:20,880 --> 00:10:22,320
them on our target environment is no

288
00:10:22,320 --> 00:10:24,880
longer an option then what is the the

289
00:10:24,880 --> 00:10:27,440
option that we have to get these tools

290
00:10:27,440 --> 00:10:30,839
there are a couple um so first of all we

291
00:10:30,839 --> 00:10:34,399
can take the effort to actually

292
00:10:34,399 --> 00:10:36,160
build the tool from scratch right we can

293
00:10:36,160 --> 00:10:38,640
develop it ourselves

294
00:10:38,640 --> 00:10:40,560
that already implies quite a big

295
00:10:40,560 --> 00:10:41,839
investment

296
00:10:41,839 --> 00:10:43,680
in terms of time and we all know time is

297
00:10:43,680 --> 00:10:45,279
money so for

298
00:10:45,279 --> 00:10:47,200
probably your employer that's a big

299
00:10:47,200 --> 00:10:48,959
money investment

300
00:10:48,959 --> 00:10:52,240
but it comes at the advantage of having

301
00:10:52,240 --> 00:10:53,920
full control over

302
00:10:53,920 --> 00:10:56,000
over techniques and

303
00:10:56,000 --> 00:10:57,680
yeah the procedures that you can apply

304
00:10:57,680 --> 00:10:59,279
on the target system so there's a

305
00:10:59,279 --> 00:11:01,440
trade-off between effort and reward

306
00:11:01,440 --> 00:11:02,720
there

307
00:11:02,720 --> 00:11:04,480
if you do not want to make that

308
00:11:04,480 --> 00:11:05,680
investment

309
00:11:05,680 --> 00:11:07,680
what we can do is we can take the the

310
00:11:07,680 --> 00:11:09,200
open source tools

311
00:11:09,200 --> 00:11:10,959
maybe some closed source tools that you

312
00:11:10,959 --> 00:11:12,320
have access to

313
00:11:12,320 --> 00:11:14,480
and we can modify them instead so you

314
00:11:14,480 --> 00:11:16,640
take an existing code base and you

315
00:11:16,640 --> 00:11:19,360
modify it to fill your needs

316
00:11:19,360 --> 00:11:20,880
likely that's going to be evading

317
00:11:20,880 --> 00:11:22,959
defenses right because we just mentioned

318
00:11:22,959 --> 00:11:25,120
that if you deploy a known tool on the

319
00:11:25,120 --> 00:11:27,200
target it will get detected so we can

320
00:11:27,200 --> 00:11:29,360
tweak it so that it's not detected

321
00:11:29,360 --> 00:11:30,800
anymore

322
00:11:30,800 --> 00:11:34,079
a little bit less of a time investment

323
00:11:34,079 --> 00:11:35,279
there so

324
00:11:35,279 --> 00:11:37,200
the investment also in terms of money is

325
00:11:37,200 --> 00:11:38,480
lower

326
00:11:38,480 --> 00:11:40,640
but you also hand in some of the

327
00:11:40,640 --> 00:11:43,120
advantages that actual development gives

328
00:11:43,120 --> 00:11:44,399
you

329
00:11:44,399 --> 00:11:45,600
finally

330
00:11:45,600 --> 00:11:48,480
we can decide that we either

331
00:11:48,480 --> 00:11:50,399
are not in the mood for development or

332
00:11:50,399 --> 00:11:52,959
we just don't have the capability and we

333
00:11:52,959 --> 00:11:55,040
can just throw a bag of money

334
00:11:55,040 --> 00:11:57,600
at the problem to make it go away i.e

335
00:11:57,600 --> 00:11:59,200
buying tools from other parties so

336
00:11:59,200 --> 00:12:00,720
there's a couple of colleagues in this

337
00:12:00,720 --> 00:12:03,440
corner here that that

338
00:12:03,440 --> 00:12:05,120
basically provide the service so for

339
00:12:05,120 --> 00:12:08,639
example outflank has the ost proposition

340
00:12:08,639 --> 00:12:10,880
where you can basically buy their

341
00:12:10,880 --> 00:12:13,680
offensive tools as a service but

342
00:12:13,680 --> 00:12:16,399
a very common uh bought capability for

343
00:12:16,399 --> 00:12:18,079
red teams is of course the command and

344
00:12:18,079 --> 00:12:20,320
control solution so also shout out to

345
00:12:20,320 --> 00:12:22,839
nighthawk in the same corner there

346
00:12:22,839 --> 00:12:26,480
um you can buy these tools to

347
00:12:26,480 --> 00:12:28,639
not make the effort yourself right and

348
00:12:28,639 --> 00:12:30,800
the advantage of that is

349
00:12:30,800 --> 00:12:33,120
you are basically outsourcing the issue

350
00:12:33,120 --> 00:12:35,839
of continuously modifying this tool to

351
00:12:35,839 --> 00:12:37,120
stay on top of

352
00:12:37,120 --> 00:12:38,560
signatures and

353
00:12:38,560 --> 00:12:40,399
the latest evasions

354
00:12:40,399 --> 00:12:43,200
there were a lot of talks on for example

355
00:12:43,200 --> 00:12:45,200
sleep time encryption or call stack

356
00:12:45,200 --> 00:12:47,680
spoofing you don't have to get

357
00:12:47,680 --> 00:12:49,600
what is actually happening you just need

358
00:12:49,600 --> 00:12:50,399
to

359
00:12:50,399 --> 00:12:52,720
know how to use the problem or the how

360
00:12:52,720 --> 00:12:55,839
to use the tool in a proper way

361
00:12:55,839 --> 00:12:57,200
so these are kind of the options that

362
00:12:57,200 --> 00:13:00,399
you have to uh to use tools as a red

363
00:13:00,399 --> 00:13:03,200
teamer in a modern environment

364
00:13:03,200 --> 00:13:05,600
i would like to zoom in a little bit on

365
00:13:05,600 --> 00:13:08,079
the actual topic of development

366
00:13:08,079 --> 00:13:09,600
because this talk is

367
00:13:09,600 --> 00:13:11,760
titled build your own tools so we're

368
00:13:11,760 --> 00:13:13,680
going to discuss a little bit on what

369
00:13:13,680 --> 00:13:15,279
the advantage of that is so we're

370
00:13:15,279 --> 00:13:18,800
zooming in on the first first block here

371
00:13:18,800 --> 00:13:21,200
i already mentioned that development is

372
00:13:21,200 --> 00:13:22,399
the biggest

373
00:13:22,399 --> 00:13:24,480
investment of them all but of course

374
00:13:24,480 --> 00:13:26,240
there are a couple of

375
00:13:26,240 --> 00:13:28,320
advantages there that you can

376
00:13:28,320 --> 00:13:31,760
reap the benefits of so first of all

377
00:13:31,760 --> 00:13:34,240
developing a tool gives you full control

378
00:13:34,240 --> 00:13:35,200
over

379
00:13:35,200 --> 00:13:37,600
whatever you are doing that makes sense

380
00:13:37,600 --> 00:13:39,440
right you you develop it so you can

381
00:13:39,440 --> 00:13:40,880
decide

382
00:13:40,880 --> 00:13:42,959
from the ground up which design

383
00:13:42,959 --> 00:13:45,040
decisions you take to to fulfill your

384
00:13:45,040 --> 00:13:46,480
goals

385
00:13:46,480 --> 00:13:48,720
of course in the context of red teaming

386
00:13:48,720 --> 00:13:51,199
and especially adversary emulation this

387
00:13:51,199 --> 00:13:52,560
means that you can

388
00:13:52,560 --> 00:13:56,320
exactly decide which ttps or which iocs

389
00:13:56,320 --> 00:13:57,279
you

390
00:13:57,279 --> 00:13:59,920
apply and this gives you also full

391
00:13:59,920 --> 00:14:02,480
flexibility to for example emulate known

392
00:14:02,480 --> 00:14:05,040
threat actors if that is your goal

393
00:14:05,040 --> 00:14:07,839
or to stay away from known bad behaviors

394
00:14:07,839 --> 00:14:09,600
to evade defenses for example so it

395
00:14:09,600 --> 00:14:12,480
gives you full control

396
00:14:12,480 --> 00:14:14,000
secondly

397
00:14:14,000 --> 00:14:15,680
and i already mentioned that actually it

398
00:14:15,680 --> 00:14:17,920
helps with defensive asian so uh

399
00:14:17,920 --> 00:14:21,199
defenders are doing a great job um shout

400
00:14:21,199 --> 00:14:24,000
out to all the blue teamers in this room

401
00:14:24,000 --> 00:14:26,240
and of course our job as a red teamer is

402
00:14:26,240 --> 00:14:29,120
to help that and the way we do that is

403
00:14:29,120 --> 00:14:31,519
to challenge them right is to to stay

404
00:14:31,519 --> 00:14:34,160
undetected in ways that also teach the

405
00:14:34,160 --> 00:14:37,360
defenders uh new new techniques

406
00:14:37,360 --> 00:14:40,639
so um if you develop your own tools

407
00:14:40,639 --> 00:14:42,800
because of this flexibility that you get

408
00:14:42,800 --> 00:14:44,320
that means that you can stay away from

409
00:14:44,320 --> 00:14:46,079
all the known bad that is used by

410
00:14:46,079 --> 00:14:48,560
defenders to to kind of

411
00:14:48,560 --> 00:14:50,160
identify that you're doing something

412
00:14:50,160 --> 00:14:51,519
malicious

413
00:14:51,519 --> 00:14:54,160
so it helps with defensive action

414
00:14:54,160 --> 00:14:56,079
it's a great learning experience

415
00:14:56,079 --> 00:14:58,000
i already mentioned i'm basically

416
00:14:58,000 --> 00:15:00,480
self-taught in in programming uh that's

417
00:15:00,480 --> 00:15:03,519
all because i kind of like to to build

418
00:15:03,519 --> 00:15:05,839
this malware myself and at first i had

419
00:15:05,839 --> 00:15:07,839
no idea what i'm doing i'm just looking

420
00:15:07,839 --> 00:15:10,160
at github scripts kind of throwing it

421
00:15:10,160 --> 00:15:11,760
all together to to come up with

422
00:15:11,760 --> 00:15:14,320
something and i noticed uh hey that that

423
00:15:14,320 --> 00:15:16,480
works against defenses right but in the

424
00:15:16,480 --> 00:15:18,800
meantime you're also discovering a

425
00:15:18,800 --> 00:15:21,199
programming language in my case uh i

426
00:15:21,199 --> 00:15:23,360
learned nim by just starting to program

427
00:15:23,360 --> 00:15:24,880
in him

428
00:15:24,880 --> 00:15:26,480
and you're learning about all these

429
00:15:26,480 --> 00:15:28,399
these topics that we mentioned for

430
00:15:28,399 --> 00:15:30,720
example call stack spoofing or

431
00:15:30,720 --> 00:15:32,480
yeah whatever technical topic you want

432
00:15:32,480 --> 00:15:34,560
to learn right if you implement it

433
00:15:34,560 --> 00:15:36,560
you have a really

434
00:15:36,560 --> 00:15:38,800
intimate experience with with

435
00:15:38,800 --> 00:15:41,279
understanding how it works and how to

436
00:15:41,279 --> 00:15:43,199
execute it in practice so there's no

437
00:15:43,199 --> 00:15:45,360
better way to learn these techniques

438
00:15:45,360 --> 00:15:46,800
than to actually implement them in the

439
00:15:46,800 --> 00:15:48,160
tool

440
00:15:48,160 --> 00:15:50,560
and finally it's fun

441
00:15:50,560 --> 00:15:52,480
yeah and it can be long or short about

442
00:15:52,480 --> 00:15:53,759
that one but

443
00:15:53,759 --> 00:15:56,560
if you like programming uh i know a lot

444
00:15:56,560 --> 00:15:58,399
of red teamers whose hobby it actually

445
00:15:58,399 --> 00:16:00,639
is to to program stuff in your free time

446
00:16:00,639 --> 00:16:02,639
if you like doing this stuff uh that

447
00:16:02,639 --> 00:16:04,800
means that yeah it's it's also fun to to

448
00:16:04,800 --> 00:16:06,480
write malware right and

449
00:16:06,480 --> 00:16:09,279
our job is basically uh a giant game of

450
00:16:09,279 --> 00:16:11,040
cat and mouse uh the same goes for

451
00:16:11,040 --> 00:16:12,639
malware development so

452
00:16:12,639 --> 00:16:15,519
um it's it's fun to see your malware

453
00:16:15,519 --> 00:16:18,399
evade defenses right and it's fun to uh

454
00:16:18,399 --> 00:16:21,680
try to identify uh what allows the

455
00:16:21,680 --> 00:16:24,160
defenders to detect you and then try to

456
00:16:24,160 --> 00:16:26,880
get around that so it's it's overall

457
00:16:26,880 --> 00:16:29,199
a large investment but it has many

458
00:16:29,199 --> 00:16:33,040
benefits and it's uh fun as well

459
00:16:33,040 --> 00:16:35,040
so we're talking about offensive

460
00:16:35,040 --> 00:16:36,639
development

461
00:16:36,639 --> 00:16:37,600
and

462
00:16:37,600 --> 00:16:40,240
another term that you hear often is

463
00:16:40,240 --> 00:16:42,079
malware development

464
00:16:42,079 --> 00:16:44,079
in my eyes these are not the same so i

465
00:16:44,079 --> 00:16:44,800
have

466
00:16:44,800 --> 00:16:47,680
tried to make a bit of a definition

467
00:16:47,680 --> 00:16:49,680
on the difference between the two a

468
00:16:49,680 --> 00:16:51,600
small disclaimer with this slide is that

469
00:16:51,600 --> 00:16:54,000
i basically pulled it out of somewhere

470
00:16:54,000 --> 00:16:56,160
the sun doesn't shine i made up this

471
00:16:56,160 --> 00:16:58,240
definition myself so

472
00:16:58,240 --> 00:16:59,759
this is definitely an arguable

473
00:16:59,759 --> 00:17:01,920
definition but

474
00:17:01,920 --> 00:17:04,000
i would still like to show it to kind of

475
00:17:04,000 --> 00:17:06,319
distinguish between the two so

476
00:17:06,319 --> 00:17:08,559
i mentioned offensive development

477
00:17:08,559 --> 00:17:10,640
which in my eyes kind of is the superset

478
00:17:10,640 --> 00:17:13,199
of all development that is used to

479
00:17:13,199 --> 00:17:16,319
support any offensive operations

480
00:17:16,319 --> 00:17:18,559
so a good example might be

481
00:17:18,559 --> 00:17:20,400
network scanners right

482
00:17:20,400 --> 00:17:23,199
i wouldn't consider them malware per se

483
00:17:23,199 --> 00:17:25,439
but they can be used to support red

484
00:17:25,439 --> 00:17:28,000
teaming engagements or even pen tests if

485
00:17:28,000 --> 00:17:29,440
you want to so

486
00:17:29,440 --> 00:17:31,360
building a network scanner is not

487
00:17:31,360 --> 00:17:33,200
malware development but it is offensive

488
00:17:33,200 --> 00:17:35,120
development

489
00:17:35,120 --> 00:17:37,200
now within that that field of offensive

490
00:17:37,200 --> 00:17:39,520
development uh we also have the field of

491
00:17:39,520 --> 00:17:41,039
malware development

492
00:17:41,039 --> 00:17:43,280
um i kind of gave it the arbitrary

493
00:17:43,280 --> 00:17:45,039
definition of

494
00:17:45,039 --> 00:17:47,440
any malicious tools or tools with

495
00:17:47,440 --> 00:17:49,840
malicious intent that are intended to be

496
00:17:49,840 --> 00:17:52,000
ran on a target system

497
00:17:52,000 --> 00:17:54,640
of course there are a lot of varieties

498
00:17:54,640 --> 00:17:57,200
of this still

499
00:17:57,200 --> 00:18:00,480
but yeah it kind of narrows down uh the

500
00:18:00,480 --> 00:18:02,240
the the difference right so if you look

501
00:18:02,240 --> 00:18:03,600
at for example

502
00:18:03,600 --> 00:18:04,720
um

503
00:18:04,720 --> 00:18:07,760
a c2 framework we have the c2 server

504
00:18:07,760 --> 00:18:08,720
which is

505
00:18:08,720 --> 00:18:10,160
running on your infrastructure right

506
00:18:10,160 --> 00:18:12,400
it's not touching the target per se

507
00:18:12,400 --> 00:18:14,960
uh i wouldn't consider writing the c2

508
00:18:14,960 --> 00:18:16,160
server

509
00:18:16,160 --> 00:18:18,880
actually malware development

510
00:18:18,880 --> 00:18:21,280
however we have the c2 implant as well

511
00:18:21,280 --> 00:18:23,679
and the c2 implant of course is designed

512
00:18:23,679 --> 00:18:26,640
to run on the target system

513
00:18:26,640 --> 00:18:29,120
notably it's designed to run covertly so

514
00:18:29,120 --> 00:18:31,840
without detection uh so i would then say

515
00:18:31,840 --> 00:18:33,760
that that writing the actual implant of

516
00:18:33,760 --> 00:18:36,400
a c2 is malware development

517
00:18:36,400 --> 00:18:37,840
the reason i'm i'm making this

518
00:18:37,840 --> 00:18:40,720
distinction is that

519
00:18:40,720 --> 00:18:42,960
if we look at malware development uh

520
00:18:42,960 --> 00:18:44,640
specifically we

521
00:18:44,640 --> 00:18:46,240
we kind of have a whole different

522
00:18:46,240 --> 00:18:48,799
implication of the way that we need to

523
00:18:48,799 --> 00:18:51,280
think about our code right so we are

524
00:18:51,280 --> 00:18:54,080
trying to be evasive so uh everything

525
00:18:54,080 --> 00:18:55,440
that we do

526
00:18:55,440 --> 00:18:57,679
in in malware development is centered

527
00:18:57,679 --> 00:18:59,600
around this kind of upset cost that i

528
00:18:59,600 --> 00:19:02,240
also mentioned before so

529
00:19:02,240 --> 00:19:04,320
we are trying probably to minimize the

530
00:19:04,320 --> 00:19:05,840
amount of

531
00:19:05,840 --> 00:19:07,760
code right minimize our footprint on the

532
00:19:07,760 --> 00:19:09,120
target

533
00:19:09,120 --> 00:19:10,960
in an operational sense we are trying to

534
00:19:10,960 --> 00:19:13,600
stay off disk and in memory

535
00:19:13,600 --> 00:19:15,679
and all these kind of implications are

536
00:19:15,679 --> 00:19:17,919
uh that are very important for for for

537
00:19:17,919 --> 00:19:19,600
malware development

538
00:19:19,600 --> 00:19:21,120
with this definition of course there are

539
00:19:21,120 --> 00:19:24,240
some kind of edge cases slash exceptions

540
00:19:24,240 --> 00:19:26,799
for example if you look at mimikats i

541
00:19:26,799 --> 00:19:29,120
would consider the the memory dumping

542
00:19:29,120 --> 00:19:31,280
part which runs on the target to to dump

543
00:19:31,280 --> 00:19:32,960
lsus for example

544
00:19:32,960 --> 00:19:35,520
i would consider the malware part but if

545
00:19:35,520 --> 00:19:37,280
you take it offline and analyze it on

546
00:19:37,280 --> 00:19:39,200
your gali machine for example then

547
00:19:39,200 --> 00:19:41,360
you're looking at offensive development

548
00:19:41,360 --> 00:19:42,720
there's a there's a couple of other

549
00:19:42,720 --> 00:19:44,160
examples here

550
00:19:44,160 --> 00:19:46,960
again slightly arbitrary definition so

551
00:19:46,960 --> 00:19:50,480
feel free to argue with me on that topic

552
00:19:50,480 --> 00:19:52,720
but that's just to to clarify the

553
00:19:52,720 --> 00:19:54,960
distinction

554
00:19:54,960 --> 00:19:57,760
so um zooming in on malware development

555
00:19:57,760 --> 00:19:59,760
a little bit um

556
00:19:59,760 --> 00:20:02,159
i often get the the question when i tell

557
00:20:02,159 --> 00:20:05,280
people that i teach about malware

558
00:20:05,280 --> 00:20:07,039
especially from people outside of the

559
00:20:07,039 --> 00:20:09,840
industry i get the question uh why uh

560
00:20:09,840 --> 00:20:11,679
why are you teaching people something

561
00:20:11,679 --> 00:20:13,200
that is uh

562
00:20:13,200 --> 00:20:15,600
by definition malicious uh and that's a

563
00:20:15,600 --> 00:20:17,039
that's a good question right everyone

564
00:20:17,039 --> 00:20:18,400
kind of has an

565
00:20:18,400 --> 00:20:20,159
opinion on this

566
00:20:20,159 --> 00:20:22,080
some would argue that you're giving the

567
00:20:22,080 --> 00:20:24,480
bad guys the knowledge that they need to

568
00:20:24,480 --> 00:20:25,760
do bad things

569
00:20:25,760 --> 00:20:28,400
uh i would kind of argue that of course

570
00:20:28,400 --> 00:20:29,600
to make this

571
00:20:29,600 --> 00:20:31,360
transparent is good for the entire

572
00:20:31,360 --> 00:20:32,320
industry

573
00:20:32,320 --> 00:20:34,640
i hope you all being uh industry

574
00:20:34,640 --> 00:20:36,320
professionals you kind of agree with me

575
00:20:36,320 --> 00:20:38,960
uh there again we can have a debate

576
00:20:38,960 --> 00:20:41,200
about that uh over beer later this

577
00:20:41,200 --> 00:20:44,799
afternoon um but yeah i would argue that

578
00:20:44,799 --> 00:20:46,559
that having this knowledge freely

579
00:20:46,559 --> 00:20:47,679
available

580
00:20:47,679 --> 00:20:50,000
especially if it's already out there

581
00:20:50,000 --> 00:20:52,320
being abused by bad guys is good for the

582
00:20:52,320 --> 00:20:53,919
industry and that

583
00:20:53,919 --> 00:20:55,840
everyone in this room kind of picking up

584
00:20:55,840 --> 00:20:57,919
this this field of

585
00:20:57,919 --> 00:21:00,400
interest and applying it for a good

586
00:21:00,400 --> 00:21:03,200
purpose i.e growing our defenses right

587
00:21:03,200 --> 00:21:05,919
maturing our defenses uh that's a good

588
00:21:05,919 --> 00:21:07,919
thing for for us as industry so that's

589
00:21:07,919 --> 00:21:09,600
also why i'm very open about the fact

590
00:21:09,600 --> 00:21:11,760
that i write malware right

591
00:21:11,760 --> 00:21:13,039
i also

592
00:21:13,039 --> 00:21:15,360
open source most of the malware that i

593
00:21:15,360 --> 00:21:17,200
write unless i use it in active

594
00:21:17,200 --> 00:21:18,559
operations

595
00:21:18,559 --> 00:21:20,400
and i would encourage you all to do the

596
00:21:20,400 --> 00:21:22,400
same

597
00:21:22,400 --> 00:21:24,640
so if you get into malware development

598
00:21:24,640 --> 00:21:26,400
there's a very

599
00:21:26,400 --> 00:21:29,039
important decision to make and that is

600
00:21:29,039 --> 00:21:31,520
what programming language to use

601
00:21:31,520 --> 00:21:33,840
for people that already do development

602
00:21:33,840 --> 00:21:37,919
this may be an easy question to answer

603
00:21:37,919 --> 00:21:39,919
but there is underwater there's a lot of

604
00:21:39,919 --> 00:21:42,559
considerations that you need to

605
00:21:42,559 --> 00:21:45,600
take to to decide which programming

606
00:21:45,600 --> 00:21:47,919
language uh that you use because

607
00:21:47,919 --> 00:21:49,919
essentially as a malware developer you

608
00:21:49,919 --> 00:21:52,000
can use any language that you want uh

609
00:21:52,000 --> 00:21:53,679
but they all have their benefits and

610
00:21:53,679 --> 00:21:55,600
they all have their drawbacks right so a

611
00:21:55,600 --> 00:21:57,840
couple of considerations uh when when

612
00:21:57,840 --> 00:21:59,679
choosing a programming language are

613
00:21:59,679 --> 00:22:01,120
shown here

614
00:22:01,120 --> 00:22:03,919
and one of the the most important ones

615
00:22:03,919 --> 00:22:06,720
for malware development developers

616
00:22:06,720 --> 00:22:08,320
is

617
00:22:08,320 --> 00:22:10,400
how high level is the the the

618
00:22:10,400 --> 00:22:13,440
programming language that you use

619
00:22:13,440 --> 00:22:14,880
so for example i know some seasoned

620
00:22:14,880 --> 00:22:16,960
malware developers in that corner they

621
00:22:16,960 --> 00:22:17,919
prefer

622
00:22:17,919 --> 00:22:20,400
going as low as possible

623
00:22:20,400 --> 00:22:22,000
meaning in this case

624
00:22:22,000 --> 00:22:24,240
using a language like c or c plus plus

625
00:22:24,240 --> 00:22:25,120
that

626
00:22:25,120 --> 00:22:27,440
is a pain in the ass to learn

627
00:22:27,440 --> 00:22:29,360
but it gives you

628
00:22:29,360 --> 00:22:31,200
the most flexibility that you can get

629
00:22:31,200 --> 00:22:32,640
because there's there's very little

630
00:22:32,640 --> 00:22:34,960
abstraction in the language

631
00:22:34,960 --> 00:22:36,720
there's also very little guidance in the

632
00:22:36,720 --> 00:22:38,880
language but it just gives you the role

633
00:22:38,880 --> 00:22:40,400
tools that you need to interact with the

634
00:22:40,400 --> 00:22:41,919
operating system for example that's

635
00:22:41,919 --> 00:22:44,320
that's what c or c plus is

636
00:22:44,320 --> 00:22:45,760
on the other end of the spectrum you

637
00:22:45,760 --> 00:22:47,440
have the high level languages these are

638
00:22:47,440 --> 00:22:49,120
the languages that

639
00:22:49,120 --> 00:22:51,440
add layers of abstraction to make your

640
00:22:51,440 --> 00:22:53,120
life easier so they're easier to

641
00:22:53,120 --> 00:22:54,480
understand they're easier to read

642
00:22:54,480 --> 00:22:56,159
they're easier to write

643
00:22:56,159 --> 00:22:59,120
but these levels of abstraction also

644
00:22:59,120 --> 00:23:00,720
make it so that you have less control

645
00:23:00,720 --> 00:23:02,799
over what your program is actually doing

646
00:23:02,799 --> 00:23:04,720
a good example of that would be python

647
00:23:04,720 --> 00:23:06,159
where

648
00:23:06,159 --> 00:23:08,480
almost the syntax of python is

649
00:23:08,480 --> 00:23:10,320
similar to english language right even

650
00:23:10,320 --> 00:23:12,400
if you don't know python at all there

651
00:23:12,400 --> 00:23:14,799
are chances that you can read a python

652
00:23:14,799 --> 00:23:16,640
program kind of understand the logic and

653
00:23:16,640 --> 00:23:18,400
see what it's doing

654
00:23:18,400 --> 00:23:20,400
but in order to implement that it's it's

655
00:23:20,400 --> 00:23:22,480
sacrificing a lot of the the control

656
00:23:22,480 --> 00:23:24,080
that you have in lower level languages

657
00:23:24,080 --> 00:23:27,679
such as c or c plus plus

658
00:23:27,679 --> 00:23:29,440
another important consideration is

659
00:23:29,440 --> 00:23:31,440
whether a language is interpreted or

660
00:23:31,440 --> 00:23:32,880
compiled

661
00:23:32,880 --> 00:23:34,880
i think most of the people in this room

662
00:23:34,880 --> 00:23:36,960
would be familiar with the difference in

663
00:23:36,960 --> 00:23:39,280
short interpreted means that you uh run

664
00:23:39,280 --> 00:23:42,480
a binary like python.xy or you install a

665
00:23:42,480 --> 00:23:45,279
binary like python.xd on your system

666
00:23:45,279 --> 00:23:48,000
and when you run a program basically

667
00:23:48,000 --> 00:23:49,919
this this interpreter will read your

668
00:23:49,919 --> 00:23:52,159
code line by line and kind of uh

669
00:23:52,159 --> 00:23:54,400
interpret it so see what does this line

670
00:23:54,400 --> 00:23:56,880
mean and execute it

671
00:23:56,880 --> 00:23:58,240
on the other end of the spectrum we have

672
00:23:58,240 --> 00:23:59,760
compiled languages

673
00:23:59,760 --> 00:24:01,520
this means that if you wrote your code

674
00:24:01,520 --> 00:24:03,919
and you're happy with it you will run a

675
00:24:03,919 --> 00:24:05,440
compiler

676
00:24:05,440 --> 00:24:08,000
which kind of at that moment looks at

677
00:24:08,000 --> 00:24:09,679
your code

678
00:24:09,679 --> 00:24:11,440
looks at the entire snippet or like the

679
00:24:11,440 --> 00:24:14,000
entire source code and decides okay how

680
00:24:14,000 --> 00:24:16,400
can i translate this into machine code

681
00:24:16,400 --> 00:24:18,000
while optimizing it so there's one

682
00:24:18,000 --> 00:24:20,240
moment where you press compile

683
00:24:20,240 --> 00:24:22,400
and at that moment your source code will

684
00:24:22,400 --> 00:24:26,640
be translated into a machine code

685
00:24:26,720 --> 00:24:28,799
that has the advantage that once you

686
00:24:28,799 --> 00:24:31,279
generated your your binary so on windows

687
00:24:31,279 --> 00:24:33,600
the famous example would be the xc

688
00:24:33,600 --> 00:24:34,960
executable

689
00:24:34,960 --> 00:24:36,640
once you press compile and you get the

690
00:24:36,640 --> 00:24:39,120
binary you can run it more or less

691
00:24:39,120 --> 00:24:41,360
everywhere

692
00:24:41,360 --> 00:24:43,840
in malware development we often look at

693
00:24:43,840 --> 00:24:45,440
compiled languages

694
00:24:45,440 --> 00:24:48,320
because of this this portability right

695
00:24:48,320 --> 00:24:49,679
so if we

696
00:24:49,679 --> 00:24:51,360
want to run python code on the client

697
00:24:51,360 --> 00:24:52,799
that means we also have to ship the

698
00:24:52,799 --> 00:24:54,320
python interpreter

699
00:24:54,320 --> 00:24:56,080
if that's not expected in a client

700
00:24:56,080 --> 00:24:58,000
environment that may not suit our goals

701
00:24:58,000 --> 00:25:01,200
right because just dropping python.xy

702
00:25:01,200 --> 00:25:03,440
on a accountant's computer could be very

703
00:25:03,440 --> 00:25:05,360
very suspicious

704
00:25:05,360 --> 00:25:07,600
we can also of course make advantage of

705
00:25:07,600 --> 00:25:09,679
that if we hit a developer machine which

706
00:25:09,679 --> 00:25:11,919
already has python installed suddenly

707
00:25:11,919 --> 00:25:13,679
that suspicion is gone so we can make

708
00:25:13,679 --> 00:25:14,799
use of that

709
00:25:14,799 --> 00:25:16,240
but that's i would say in our

710
00:25:16,240 --> 00:25:18,240
development more of the exception

711
00:25:18,240 --> 00:25:20,400
so we look mainly at the compiled

712
00:25:20,400 --> 00:25:21,840
languages

713
00:25:21,840 --> 00:25:23,600
then we have two more points so we have

714
00:25:23,600 --> 00:25:26,000
a developer experience which is kind of

715
00:25:26,000 --> 00:25:28,559
my catch-all to describe

716
00:25:28,559 --> 00:25:31,039
how happy you are or how sad you are

717
00:25:31,039 --> 00:25:33,440
while writing a language so this

718
00:25:33,440 --> 00:25:34,559
includes

719
00:25:34,559 --> 00:25:36,080
that high or low level as i just

720
00:25:36,080 --> 00:25:38,159
mentioned it but it also includes

721
00:25:38,159 --> 00:25:40,080
how good the documentation of a language

722
00:25:40,080 --> 00:25:42,720
is and very importantly how big the

723
00:25:42,720 --> 00:25:44,080
community is

724
00:25:44,080 --> 00:25:46,400
so for python again a good example of a

725
00:25:46,400 --> 00:25:48,640
great developer experience where if you

726
00:25:48,640 --> 00:25:50,720
just type a very niche question into

727
00:25:50,720 --> 00:25:52,080
google

728
00:25:52,080 --> 00:25:53,919
you will probably get a answer to that

729
00:25:53,919 --> 00:25:55,760
very nice question in the form of

730
00:25:55,760 --> 00:25:57,600
someone on stack overflow that they did

731
00:25:57,600 --> 00:25:59,760
in 2011 and just based on the code

732
00:25:59,760 --> 00:26:02,240
snippet that you can reuse so this makes

733
00:26:02,240 --> 00:26:04,960
a very good developer experience

734
00:26:04,960 --> 00:26:07,360
excuse me a very good developer

735
00:26:07,360 --> 00:26:09,200
experience right where you can just look

736
00:26:09,200 --> 00:26:10,799
at this code and learn from it and

737
00:26:10,799 --> 00:26:12,559
implement it yourself

738
00:26:12,559 --> 00:26:16,159
and the final point is prevalence which

739
00:26:16,159 --> 00:26:18,799
kind of describes how often or how much

740
00:26:18,799 --> 00:26:21,840
is a language actually used

741
00:26:21,840 --> 00:26:24,240
and especially the prevalence in malware

742
00:26:24,240 --> 00:26:26,159
development is interesting because if a

743
00:26:26,159 --> 00:26:28,400
language is used a lot for malware that

744
00:26:28,400 --> 00:26:30,240
means that defenders will also kind of

745
00:26:30,240 --> 00:26:31,679
move their spotlights to look at that

746
00:26:31,679 --> 00:26:33,039
language right

747
00:26:33,039 --> 00:26:35,600
so c and c plus is i think one of the

748
00:26:35,600 --> 00:26:36,960
most prominent

749
00:26:36,960 --> 00:26:38,799
languages for malware

750
00:26:38,799 --> 00:26:40,240
which means that

751
00:26:40,240 --> 00:26:42,159
that defenders are also kind of

752
00:26:42,159 --> 00:26:44,880
scrutinizing binaries generated in these

753
00:26:44,880 --> 00:26:47,600
languages to try and identify what makes

754
00:26:47,600 --> 00:26:49,360
us malicious

755
00:26:49,360 --> 00:26:50,960
this point is also

756
00:26:50,960 --> 00:26:53,600
the point that kind of causes the the

757
00:26:53,600 --> 00:26:55,679
the interestingness of newer languages

758
00:26:55,679 --> 00:26:58,159
like go nim or rust

759
00:26:58,159 --> 00:27:00,640
because if a new language is released

760
00:27:00,640 --> 00:27:02,720
basically no one gets it right

761
00:27:02,720 --> 00:27:05,039
including defenders so if a binary has a

762
00:27:05,039 --> 00:27:07,279
certain format that is not

763
00:27:07,279 --> 00:27:09,600
very well known yet

764
00:27:09,600 --> 00:27:12,000
then you can make or kind of abuse that

765
00:27:12,000 --> 00:27:15,360
to slip through the cracks of defenders

766
00:27:15,360 --> 00:27:17,440
and that's exactly what threat actors

767
00:27:17,440 --> 00:27:19,600
are are doing currently so if you look

768
00:27:19,600 --> 00:27:21,679
at the kind of trend lines of which

769
00:27:21,679 --> 00:27:24,399
languages are used for for malware

770
00:27:24,399 --> 00:27:26,720
of course i mentioned cec plus plus

771
00:27:26,720 --> 00:27:29,360
is kind of the all-time high and still

772
00:27:29,360 --> 00:27:31,120
remaining that way

773
00:27:31,120 --> 00:27:33,360
but you also see that threat actors are

774
00:27:33,360 --> 00:27:35,360
moving towards the the younger and the

775
00:27:35,360 --> 00:27:36,720
the newer

776
00:27:36,720 --> 00:27:39,039
languages right because of these evasion

777
00:27:39,039 --> 00:27:42,320
benefits that it gives

778
00:27:42,320 --> 00:27:44,640
so the landscape i would say looks a

779
00:27:44,640 --> 00:27:46,880
little bit like this currently i'm sure

780
00:27:46,880 --> 00:27:48,480
i'm offending a couple of people that

781
00:27:48,480 --> 00:27:50,640
look at other languages for malware

782
00:27:50,640 --> 00:27:53,039
development right now and this is by far

783
00:27:53,039 --> 00:27:55,200
not an exclusive list of course but i

784
00:27:55,200 --> 00:27:57,120
think that especially the kind of right

785
00:27:57,120 --> 00:27:59,679
part of this slide are the the languages

786
00:27:59,679 --> 00:28:01,760
that we see the most for for our

787
00:28:01,760 --> 00:28:03,520
development now

788
00:28:03,520 --> 00:28:05,279
and especially a shout out of course to

789
00:28:05,279 --> 00:28:08,480
the younger languages rus nim and go

790
00:28:08,480 --> 00:28:09,840
which are

791
00:28:09,840 --> 00:28:11,760
being abused by these threat actors in

792
00:28:11,760 --> 00:28:15,279
an increasing fashion

793
00:28:15,440 --> 00:28:17,360
now we discussed uh

794
00:28:17,360 --> 00:28:19,600
the reason why people are switching to

795
00:28:19,600 --> 00:28:21,360
these uh these newer and younger

796
00:28:21,360 --> 00:28:23,360
languages right which is uh defensive

797
00:28:23,360 --> 00:28:27,039
asian and i kind of want to

798
00:28:27,039 --> 00:28:28,840
summarize uh

799
00:28:28,840 --> 00:28:32,240
briefly what if defensive asian is we've

800
00:28:32,240 --> 00:28:34,640
had two days of talks on novel

801
00:28:34,640 --> 00:28:36,720
techniques with which also help with the

802
00:28:36,720 --> 00:28:38,000
evasion

803
00:28:38,000 --> 00:28:40,000
but just kind of let's take a helicopter

804
00:28:40,000 --> 00:28:41,840
view and look at what exactly are we

805
00:28:41,840 --> 00:28:45,039
trying uh to achieve with with evasion

806
00:28:45,039 --> 00:28:47,039
why are we even developing our own

807
00:28:47,039 --> 00:28:49,919
malware in the first place

808
00:28:49,919 --> 00:28:52,960
in short it's to to to avoid these

809
00:28:52,960 --> 00:28:55,679
areas of defenses right

810
00:28:55,679 --> 00:28:58,559
especially in malware development

811
00:28:58,559 --> 00:29:00,320
what we are dealing with

812
00:29:00,320 --> 00:29:03,200
prominently is antivirus and edr so

813
00:29:03,200 --> 00:29:04,480
antivirus

814
00:29:04,480 --> 00:29:06,240
of course you all have it installed on

815
00:29:06,240 --> 00:29:07,679
your own computer

816
00:29:07,679 --> 00:29:09,440
typically on windows it would be windows

817
00:29:09,440 --> 00:29:11,760
defender av

818
00:29:11,760 --> 00:29:13,919
it's it's often kind of

819
00:29:13,919 --> 00:29:16,640
ridiculed even in the malware

820
00:29:16,640 --> 00:29:19,679
developer field because it's fairly easy

821
00:29:19,679 --> 00:29:21,440
to bypass

822
00:29:21,440 --> 00:29:24,080
because antivirus kind of makes a habit

823
00:29:24,080 --> 00:29:24,880
of

824
00:29:24,880 --> 00:29:26,399
trying to fingerprint

825
00:29:26,399 --> 00:29:27,840
known bad

826
00:29:27,840 --> 00:29:28,880
and also

827
00:29:28,880 --> 00:29:32,080
very often uh antivirus is static right

828
00:29:32,080 --> 00:29:33,919
so it's looking at artifacts on disk for

829
00:29:33,919 --> 00:29:36,320
example maybe it's it's speaking into

830
00:29:36,320 --> 00:29:38,240
memory here and there to try to

831
00:29:38,240 --> 00:29:41,520
determine uh which processes show known

832
00:29:41,520 --> 00:29:43,279
bad indicators

833
00:29:43,279 --> 00:29:46,640
but because it's it's it's fairly static

834
00:29:46,640 --> 00:29:49,919
it's also easy to modify your code

835
00:29:49,919 --> 00:29:51,919
in a way that bypasses these kind of

836
00:29:51,919 --> 00:29:53,360
static

837
00:29:53,360 --> 00:29:54,799
indicators

838
00:29:54,799 --> 00:29:57,200
the more challenging counterpart of av

839
00:29:57,200 --> 00:29:58,880
is edr

840
00:29:58,880 --> 00:30:00,799
of course edr is

841
00:30:00,799 --> 00:30:02,880
much broader than just the the part that

842
00:30:02,880 --> 00:30:05,760
looks at malware on the host machine

843
00:30:05,760 --> 00:30:09,679
but in a very basic sense edr looks at

844
00:30:09,679 --> 00:30:12,480
the dynamics of

845
00:30:12,480 --> 00:30:14,559
a program that is running it looks into

846
00:30:14,559 --> 00:30:17,279
the memory and even if it's not known

847
00:30:17,279 --> 00:30:18,320
bad

848
00:30:18,320 --> 00:30:20,559
but it exhibits indicators that might

849
00:30:20,559 --> 00:30:23,520
indicate bad behavior it either

850
00:30:23,520 --> 00:30:26,159
kills process or it goes to the sock and

851
00:30:26,159 --> 00:30:27,760
alerts

852
00:30:27,760 --> 00:30:29,760
so as malware developers we are trying

853
00:30:29,760 --> 00:30:31,279
to

854
00:30:31,279 --> 00:30:32,720
kind of slip through these cracks right

855
00:30:32,720 --> 00:30:34,720
to

856
00:30:34,720 --> 00:30:38,000
make our binary in a way that it uh at

857
00:30:38,000 --> 00:30:40,320
least gets past these two

858
00:30:40,320 --> 00:30:42,399
of course there are a lot more defenses

859
00:30:42,399 --> 00:30:43,919
uh again

860
00:30:43,919 --> 00:30:45,520
shout out to the blue team the people

861
00:30:45,520 --> 00:30:47,679
actually sitting in the sock to look at

862
00:30:47,679 --> 00:30:50,880
all the alerts that are coming in

863
00:30:51,520 --> 00:30:53,440
when once these people actually get to

864
00:30:53,440 --> 00:30:55,919
see an alert which shouts out your

865
00:30:55,919 --> 00:30:56,880
malware

866
00:30:56,880 --> 00:30:59,120
basically you are screwed right you are

867
00:30:59,120 --> 00:31:01,519
burning your your first line of access

868
00:31:01,519 --> 00:31:02,960
and hopefully you have

869
00:31:02,960 --> 00:31:05,120
another line there so again what we're

870
00:31:05,120 --> 00:31:07,200
trying to do is staying away from the

871
00:31:07,200 --> 00:31:08,559
blue team

872
00:31:08,559 --> 00:31:10,480
how do we actually do that uh there's a

873
00:31:10,480 --> 00:31:12,559
couple of decisions that we can take

874
00:31:12,559 --> 00:31:15,679
there um at a very high level uh we have

875
00:31:15,679 --> 00:31:17,840
these these decisions

876
00:31:17,840 --> 00:31:21,200
to make so a very obvious first decision

877
00:31:21,200 --> 00:31:24,799
on evading defenses is avoiding defenses

878
00:31:24,799 --> 00:31:26,640
sounds like kicking in an open door and

879
00:31:26,640 --> 00:31:27,919
it kind of is

880
00:31:27,919 --> 00:31:29,279
but if we

881
00:31:29,279 --> 00:31:31,679
operate in a environment that

882
00:31:31,679 --> 00:31:33,279
that has

883
00:31:33,279 --> 00:31:35,120
for example edr installed on the

884
00:31:35,120 --> 00:31:36,399
endpoint

885
00:31:36,399 --> 00:31:38,880
and we can avoid the endpoints

886
00:31:38,880 --> 00:31:40,559
altogether so for example instead of

887
00:31:40,559 --> 00:31:42,559
running

888
00:31:42,559 --> 00:31:44,880
our our malware or like our malware

889
00:31:44,880 --> 00:31:47,200
implant on a system with edr installed

890
00:31:47,200 --> 00:31:49,440
we can proxy into the network and run it

891
00:31:49,440 --> 00:31:50,880
over the network

892
00:31:50,880 --> 00:31:53,039
then we avoid the defense altogether

893
00:31:53,039 --> 00:31:54,399
right

894
00:31:54,399 --> 00:31:56,799
this is great and this is probably one

895
00:31:56,799 --> 00:31:58,640
of the most efficient ways to bypass

896
00:31:58,640 --> 00:32:00,960
defenses but unfortunately it's not

897
00:32:00,960 --> 00:32:02,480
always possible because of course the

898
00:32:02,480 --> 00:32:03,760
blue team is

899
00:32:03,760 --> 00:32:05,760
trying to continuously increase their

900
00:32:05,760 --> 00:32:07,360
their coverage

901
00:32:07,360 --> 00:32:09,919
on both a host level and a network level

902
00:32:09,919 --> 00:32:11,760
so hopefully in your organization the

903
00:32:11,760 --> 00:32:13,279
places where you can actually do this

904
00:32:13,279 --> 00:32:15,679
are fairly limited

905
00:32:15,679 --> 00:32:17,440
we can also blend in

906
00:32:17,440 --> 00:32:21,600
blending in i would define as uh either

907
00:32:21,600 --> 00:32:23,679
slipping through the cracks so making

908
00:32:23,679 --> 00:32:26,399
your malware behave in a way that is

909
00:32:26,399 --> 00:32:28,399
believable enough to be

910
00:32:28,399 --> 00:32:30,559
let through by av and edr

911
00:32:30,559 --> 00:32:33,360
uh or making clever use of the blind

912
00:32:33,360 --> 00:32:36,080
spots of defensive products uh that kind

913
00:32:36,080 --> 00:32:38,320
of ties into the previous point as well

914
00:32:38,320 --> 00:32:40,799
uh but another point could be that that

915
00:32:40,799 --> 00:32:43,840
only endpoint even if there is uh uh av

916
00:32:43,840 --> 00:32:46,559
installed but not edr that means that we

917
00:32:46,559 --> 00:32:48,799
can uh kind of dive into the the memory

918
00:32:48,799 --> 00:32:51,440
level to go around the defenses that are

919
00:32:51,440 --> 00:32:54,000
installed right to to blend in in a way

920
00:32:54,000 --> 00:32:56,399
that even if some telemetry is gathered

921
00:32:56,399 --> 00:32:59,120
from our malware it's not alerted on at

922
00:32:59,120 --> 00:33:02,000
the very least as malicious

923
00:33:02,000 --> 00:33:04,559
finally we can also sabotage the the

924
00:33:04,559 --> 00:33:06,480
defenses that are there

925
00:33:06,480 --> 00:33:08,960
a common example of that in the case of

926
00:33:08,960 --> 00:33:12,000
edr is for example to unhook

927
00:33:12,000 --> 00:33:14,720
the the apis that we use so hooking is

928
00:33:14,720 --> 00:33:16,880
of course a defensive mechanism

929
00:33:16,880 --> 00:33:18,559
applied by edrs

930
00:33:18,559 --> 00:33:21,039
if we unhook it we basically kick the

931
00:33:21,039 --> 00:33:23,279
edr so that it gathers a little bit less

932
00:33:23,279 --> 00:33:26,399
telemetry and hopefully then we can use

933
00:33:26,399 --> 00:33:30,080
that as a crack to slip through

934
00:33:30,080 --> 00:33:30,960
again

935
00:33:30,960 --> 00:33:31,919
this is

936
00:33:31,919 --> 00:33:33,120
can be

937
00:33:33,120 --> 00:33:34,880
effective depending on the defensive

938
00:33:34,880 --> 00:33:36,799
products that you're up against

939
00:33:36,799 --> 00:33:39,519
but not always possible so so

940
00:33:39,519 --> 00:33:40,880
in general

941
00:33:40,880 --> 00:33:43,360
defense evasion is a combination

942
00:33:43,360 --> 00:33:45,279
of these three depending on the target

943
00:33:45,279 --> 00:33:48,559
environment that you're up against

944
00:33:48,559 --> 00:33:49,519
so

945
00:33:49,519 --> 00:33:52,000
i mentioned i had two two case studies

946
00:33:52,000 --> 00:33:55,120
of tools that i built uh the first is an

947
00:33:55,120 --> 00:33:57,279
implant which is a

948
00:33:57,279 --> 00:33:58,480
basic

949
00:33:58,480 --> 00:34:00,880
first stage command and control

950
00:34:00,880 --> 00:34:02,559
implant built in nim

951
00:34:02,559 --> 00:34:04,399
it has a accompanying

952
00:34:04,399 --> 00:34:07,600
c2 server built in python because i'm

953
00:34:07,600 --> 00:34:09,280
as i mentioned not too technical so i'm

954
00:34:09,280 --> 00:34:11,679
still most comfortable with python some

955
00:34:11,679 --> 00:34:13,839
people would probably shame me for that

956
00:34:13,839 --> 00:34:15,599
but i think it's an interesting case to

957
00:34:15,599 --> 00:34:18,079
discuss because it is kind of a prime

958
00:34:18,079 --> 00:34:19,679
example of

959
00:34:19,679 --> 00:34:21,280
what slipping through the cracks looks

960
00:34:21,280 --> 00:34:22,639
like

961
00:34:22,639 --> 00:34:24,320
because i'm very confident in saying

962
00:34:24,320 --> 00:34:26,480
that the reason that an implant bypasses

963
00:34:26,480 --> 00:34:28,159
defenses at all

964
00:34:28,159 --> 00:34:29,918
is that it's not public

965
00:34:29,918 --> 00:34:32,000
it's a tool that i built right as i

966
00:34:32,000 --> 00:34:34,159
mentioned at the start

967
00:34:34,159 --> 00:34:35,839
building this tool kind of gave me the

968
00:34:35,839 --> 00:34:38,320
full flexibility to implement for

969
00:34:38,320 --> 00:34:40,000
example the way it does

970
00:34:40,000 --> 00:34:42,320
c2 communications in the way that that i

971
00:34:42,320 --> 00:34:44,879
wanted it to and defenders haven't seen

972
00:34:44,879 --> 00:34:47,359
this so even though this tool isn't that

973
00:34:47,359 --> 00:34:48,480
advanced

974
00:34:48,480 --> 00:34:51,679
it still evades defenses uh because uh

975
00:34:51,679 --> 00:34:53,599
well the the behavior is not known bad

976
00:34:53,599 --> 00:34:56,159
right it makes use of kind of this this

977
00:34:56,159 --> 00:34:57,920
uh this slipping through the cracks

978
00:34:57,920 --> 00:35:01,359
mechanism to uh to to bypass av even

979
00:35:01,359 --> 00:35:02,400
bypass

980
00:35:02,400 --> 00:35:04,800
edr and it works for that reason really

981
00:35:04,800 --> 00:35:05,839
well in

982
00:35:05,839 --> 00:35:07,680
operations even in

983
00:35:07,680 --> 00:35:09,839
mature environments like the bank that i

984
00:35:09,839 --> 00:35:12,320
work at

985
00:35:13,280 --> 00:35:14,320
so

986
00:35:14,320 --> 00:35:16,160
one of the lessons learned if i if i

987
00:35:16,160 --> 00:35:19,440
look back at uh at designing implant

988
00:35:19,440 --> 00:35:20,960
um is that

989
00:35:20,960 --> 00:35:22,640
it is worth the effort to actually think

990
00:35:22,640 --> 00:35:24,800
about what you want to achieve ahead of

991
00:35:24,800 --> 00:35:27,680
time so uh i started this project like

992
00:35:27,680 --> 00:35:29,359
really eagerly and i basically just

993
00:35:29,359 --> 00:35:32,000
started rattling on my keyboard to build

994
00:35:32,000 --> 00:35:34,000
some of the the cool functionality that

995
00:35:34,000 --> 00:35:36,240
i wanted to implement

996
00:35:36,240 --> 00:35:37,920
if you actually want to use these tools

997
00:35:37,920 --> 00:35:39,520
i would not recommend that because i had

998
00:35:39,520 --> 00:35:41,599
to go back a couple of times

999
00:35:41,599 --> 00:35:43,599
to actually shave off

1000
00:35:43,599 --> 00:35:45,280
some of the the that i had

1001
00:35:45,280 --> 00:35:47,200
written in this code and

1002
00:35:47,200 --> 00:35:49,359
optimize it and

1003
00:35:49,359 --> 00:35:51,440
also make it more evasive because some

1004
00:35:51,440 --> 00:35:53,280
of the things i did at the start were

1005
00:35:53,280 --> 00:35:55,599
just really dumb design decisions

1006
00:35:55,599 --> 00:35:57,520
so if you want to do a pick up a project

1007
00:35:57,520 --> 00:35:59,200
like this

1008
00:35:59,200 --> 00:36:01,680
take a day or something to think about

1009
00:36:01,680 --> 00:36:03,200
the design right think about the

1010
00:36:03,200 --> 00:36:05,200
functionality that you want to implement

1011
00:36:05,200 --> 00:36:06,800
and think about how you are going to

1012
00:36:06,800 --> 00:36:08,720
make it evasive

1013
00:36:08,720 --> 00:36:11,280
a quick example of what that looks like

1014
00:36:11,280 --> 00:36:12,960
here's the the front end of an implant

1015
00:36:12,960 --> 00:36:15,440
which i'm quite proud of because i

1016
00:36:15,440 --> 00:36:17,359
actually rewrote it myself

1017
00:36:17,359 --> 00:36:19,440
so that was a nice foray in the field of

1018
00:36:19,440 --> 00:36:22,079
front-end development and here you can

1019
00:36:22,079 --> 00:36:23,680
actually see a

1020
00:36:23,680 --> 00:36:25,839
example of why i don't like the term

1021
00:36:25,839 --> 00:36:27,520
fully undetected

1022
00:36:27,520 --> 00:36:29,280
because even though an implant and in

1023
00:36:29,280 --> 00:36:32,000
this case the the self-deleting dropper

1024
00:36:32,000 --> 00:36:34,400
that an implant includes

1025
00:36:34,400 --> 00:36:37,599
is not detected by av or edr

1026
00:36:37,599 --> 00:36:39,839
or in this case defender for endpoint

1027
00:36:39,839 --> 00:36:41,280
i should specify

1028
00:36:41,280 --> 00:36:43,440
um we can see that if we look into the

1029
00:36:43,440 --> 00:36:45,599
telemetry that's actually generated it's

1030
00:36:45,599 --> 00:36:48,240
still spotted right so in this case the

1031
00:36:48,240 --> 00:36:50,240
the execution of an unsigned

1032
00:36:50,240 --> 00:36:52,079
executable of course

1033
00:36:52,079 --> 00:36:54,800
is suspicious and uh you can see that

1034
00:36:54,800 --> 00:36:58,000
the the the the attributes of the pe uh

1035
00:36:58,000 --> 00:37:00,880
themselves are also marked as suspicious

1036
00:37:00,880 --> 00:37:03,359
uh but combined this was not enough for

1037
00:37:03,359 --> 00:37:05,040
defender for endpoint to say okay i'm

1038
00:37:05,040 --> 00:37:06,640
gonna raise an alert

1039
00:37:06,640 --> 00:37:09,920
so again uh you don't have to be fully

1040
00:37:09,920 --> 00:37:12,160
undetected all the time as long as you

1041
00:37:12,160 --> 00:37:13,920
slip through the cracks and and keep

1042
00:37:13,920 --> 00:37:16,079
these indicators as low and slow as

1043
00:37:16,079 --> 00:37:18,240
possible so that that alert is not

1044
00:37:18,240 --> 00:37:20,839
generated and it does not reach the blue

1045
00:37:20,839 --> 00:37:24,079
team a kind of more interesting example

1046
00:37:24,079 --> 00:37:27,040
in the sense of evasion is an impact

1047
00:37:27,040 --> 00:37:29,440
an impact is a packer that i wrote

1048
00:37:29,440 --> 00:37:31,040
actually wrote it twice

1049
00:37:31,040 --> 00:37:33,520
open sourced the previous version and at

1050
00:37:33,520 --> 00:37:34,880
the same time

1051
00:37:34,880 --> 00:37:37,920
started a full rewrite because again

1052
00:37:37,920 --> 00:37:39,760
i just started coding and

1053
00:37:39,760 --> 00:37:41,520
after a while realized that the initial

1054
00:37:41,520 --> 00:37:42,880
code that it has

1055
00:37:42,880 --> 00:37:44,800
wasn't cutting it anymore

1056
00:37:44,800 --> 00:37:47,200
but what an impact does is it takes code

1057
00:37:47,200 --> 00:37:49,520
that is typically known bad

1058
00:37:49,520 --> 00:37:52,400
so let's say for example a cobalt strike

1059
00:37:52,400 --> 00:37:54,079
beacon shellcode

1060
00:37:54,079 --> 00:37:56,000
if you drop that unencrypted on a target

1061
00:37:56,000 --> 00:37:57,599
system of course it will be flagged and

1062
00:37:57,599 --> 00:37:59,040
it will be removed

1063
00:37:59,040 --> 00:38:01,040
so what an impact tries to do is to take

1064
00:38:01,040 --> 00:38:03,200
this this known bed

1065
00:38:03,200 --> 00:38:06,400
ingest it and wrap it in a way that it

1066
00:38:06,400 --> 00:38:08,079
can be executed

1067
00:38:08,079 --> 00:38:10,000
on a target system

1068
00:38:10,000 --> 00:38:11,760
i should note there that

1069
00:38:11,760 --> 00:38:13,760
an impact is only used in cases where

1070
00:38:13,760 --> 00:38:15,839
you actually want to drop

1071
00:38:15,839 --> 00:38:17,440
on disk of the target system so it

1072
00:38:17,440 --> 00:38:19,359
generates for example a dll or something

1073
00:38:19,359 --> 00:38:21,599
that you can use so it's not not always

1074
00:38:21,599 --> 00:38:22,640
ideal

1075
00:38:22,640 --> 00:38:23,839
but it is

1076
00:38:23,839 --> 00:38:26,400
very handy if you want to run something

1077
00:38:26,400 --> 00:38:27,920
on the target system and you don't want

1078
00:38:27,920 --> 00:38:28,640
to

1079
00:38:28,640 --> 00:38:31,599
pack it manually every single time

1080
00:38:31,599 --> 00:38:32,560
again

1081
00:38:32,560 --> 00:38:34,400
the lesson learned as i mentioned i

1082
00:38:34,400 --> 00:38:36,720
started coding like a like a monkey on

1083
00:38:36,720 --> 00:38:38,720
my keyboard and

1084
00:38:38,720 --> 00:38:41,040
it worked kinda for

1085
00:38:41,040 --> 00:38:43,440
for the first couple of uh

1086
00:38:43,440 --> 00:38:44,800
months

1087
00:38:44,800 --> 00:38:47,520
but uh i would encourage you if you want

1088
00:38:47,520 --> 00:38:49,599
to pick something up like this to

1089
00:38:49,599 --> 00:38:51,680
first of all keep it simple uh so use

1090
00:38:51,680 --> 00:38:54,960
the the kiss principle there and uh

1091
00:38:54,960 --> 00:38:57,200
also look at the the modularity of your

1092
00:38:57,200 --> 00:38:59,200
code because uh especially in a tool

1093
00:38:59,200 --> 00:39:02,160
like this you may want to replace the

1094
00:39:02,160 --> 00:39:04,560
functionality that it has every so often

1095
00:39:04,560 --> 00:39:06,720
right you want to implement the latest

1096
00:39:06,720 --> 00:39:09,440
and greatest loading methods and fancy

1097
00:39:09,440 --> 00:39:11,359
functionality like call stack spoofing

1098
00:39:11,359 --> 00:39:13,359
or a sleep encryption

1099
00:39:13,359 --> 00:39:16,160
but if you write like a giant monolith

1100
00:39:16,160 --> 00:39:18,240
of a script that's going to be hard to

1101
00:39:18,240 --> 00:39:19,760
implement and

1102
00:39:19,760 --> 00:39:22,400
it's going to keep getting worse so

1103
00:39:22,400 --> 00:39:24,160
for a project like this think about

1104
00:39:24,160 --> 00:39:25,839
modularity and how you're going to

1105
00:39:25,839 --> 00:39:28,000
interchange the various parts of your

1106
00:39:28,000 --> 00:39:29,119
code

1107
00:39:29,119 --> 00:39:32,000
once you start building up on it

1108
00:39:32,000 --> 00:39:34,640
again this is what it looks like

1109
00:39:34,640 --> 00:39:37,680
an impact of course is a bit harder to

1110
00:39:37,680 --> 00:39:39,520
slip through the cracks with because if

1111
00:39:39,520 --> 00:39:41,680
it is spotted the behavior that it

1112
00:39:41,680 --> 00:39:44,320
exhibits is very suspicious so think for

1113
00:39:44,320 --> 00:39:47,520
example process injection could be

1114
00:39:47,520 --> 00:39:49,440
if it is followed by an edr

1115
00:39:49,440 --> 00:39:51,760
very quickly marked as malicious with

1116
00:39:51,760 --> 00:39:53,440
fairly high certainty

1117
00:39:53,440 --> 00:39:54,720
and you can see here that that's

1118
00:39:54,720 --> 00:39:56,720
actually exactly what happened

1119
00:39:56,720 --> 00:39:58,560
but even in this scenario which i

1120
00:39:58,560 --> 00:40:00,000
wouldn't really use in production

1121
00:40:00,000 --> 00:40:02,640
because i did this as a demo uh to kind

1122
00:40:02,640 --> 00:40:04,640
of show the difference between alerting

1123
00:40:04,640 --> 00:40:06,240
and telemetry

1124
00:40:06,240 --> 00:40:08,160
even if you look at these these events

1125
00:40:08,160 --> 00:40:09,760
that are generated by defender for

1126
00:40:09,760 --> 00:40:11,520
endpoint indr

1127
00:40:11,520 --> 00:40:13,680
if you look at it and you you know it's

1128
00:40:13,680 --> 00:40:14,720
malware

1129
00:40:14,720 --> 00:40:17,440
that's like why did it not alert

1130
00:40:17,440 --> 00:40:18,720
and i'm actually still thinking that

1131
00:40:18,720 --> 00:40:20,000
looking at this

1132
00:40:20,000 --> 00:40:21,839
but no alert was raised right and even

1133
00:40:21,839 --> 00:40:24,160
for this for this process injection that

1134
00:40:24,160 --> 00:40:27,279
it exhibited

1135
00:40:27,440 --> 00:40:30,160
it slipped through the cracks again

1136
00:40:30,160 --> 00:40:32,800
so a couple of final words for the

1137
00:40:32,800 --> 00:40:34,960
people that actually want to get started

1138
00:40:34,960 --> 00:40:37,359
in the malware development field i think

1139
00:40:37,359 --> 00:40:39,440
i already touched upon

1140
00:40:39,440 --> 00:40:40,800
the the

1141
00:40:40,800 --> 00:40:42,160
the some of the points that are on the

1142
00:40:42,160 --> 00:40:43,680
slides here

1143
00:40:43,680 --> 00:40:46,880
but just just do it just get started

1144
00:40:46,880 --> 00:40:49,440
if you write ugly code some people may

1145
00:40:49,440 --> 00:40:51,839
ridicule you for it if you use nim or

1146
00:40:51,839 --> 00:40:54,079
python some people may ridicule you for

1147
00:40:54,079 --> 00:40:56,079
it but it's better to have ugly code

1148
00:40:56,079 --> 00:40:58,319
that works then not have any code at all

1149
00:40:58,319 --> 00:41:01,119
right or get detected using only public

1150
00:41:01,119 --> 00:41:02,800
tools

1151
00:41:02,800 --> 00:41:05,119
as i mentioned a lot of people are not

1152
00:41:05,119 --> 00:41:06,800
shy at all about the fact that they

1153
00:41:06,800 --> 00:41:09,119
write ripe malware so there's a great

1154
00:41:09,119 --> 00:41:11,200
community i'm very active on twitter for

1155
00:41:11,200 --> 00:41:13,359
example but you also have the bloodhound

1156
00:41:13,359 --> 00:41:15,839
slack or even communities for specific

1157
00:41:15,839 --> 00:41:18,240
languages and make use of that so if you

1158
00:41:18,240 --> 00:41:20,560
get stuck just ask people

1159
00:41:20,560 --> 00:41:22,400
that are in the space on

1160
00:41:22,400 --> 00:41:24,400
what's what you could try to to get out

1161
00:41:24,400 --> 00:41:26,800
of that that's all you are stuck in

1162
00:41:26,800 --> 00:41:27,920
and of course there are a lot of

1163
00:41:27,920 --> 00:41:29,599
excellent resources

1164
00:41:29,599 --> 00:41:32,480
on github and gitlab and stuff like this

1165
00:41:32,480 --> 00:41:35,119
one note on that is never blindly copy

1166
00:41:35,119 --> 00:41:36,240
and paste

1167
00:41:36,240 --> 00:41:37,359
because

1168
00:41:37,359 --> 00:41:39,359
first of all as we mentioned at the

1169
00:41:39,359 --> 00:41:41,680
start public code is

1170
00:41:41,680 --> 00:41:43,599
almost always fingerprinted if it's a

1171
00:41:43,599 --> 00:41:45,119
malware so you will just get those

1172
00:41:45,119 --> 00:41:47,680
fingerprints into your own code

1173
00:41:47,680 --> 00:41:49,280
and additionally you won't learn from it

1174
00:41:49,280 --> 00:41:50,240
right

1175
00:41:50,240 --> 00:41:52,240
instead of copy pasting try

1176
00:41:52,240 --> 00:41:53,920
reading the code understanding what it

1177
00:41:53,920 --> 00:41:56,800
does and then implementing that yourself

1178
00:41:56,800 --> 00:41:59,119
a couple of resources

1179
00:41:59,119 --> 00:42:01,680
side note i will publish these slides on

1180
00:42:01,680 --> 00:42:03,440
my my github as well with clickable

1181
00:42:03,440 --> 00:42:05,440
links so you don't have to

1182
00:42:05,440 --> 00:42:06,720
remember this

1183
00:42:06,720 --> 00:42:07,760
but

1184
00:42:07,760 --> 00:42:09,760
one of the things i have to

1185
00:42:09,760 --> 00:42:11,680
give a shout out to myself because i

1186
00:42:11,680 --> 00:42:14,640
just recently published a workshop

1187
00:42:14,640 --> 00:42:16,640
maldef for dummies

1188
00:42:16,640 --> 00:42:18,640
which kind of discusses the the early

1189
00:42:18,640 --> 00:42:20,800
steps into malware development

1190
00:42:20,800 --> 00:42:22,960
specifically focusing on writing your

1191
00:42:22,960 --> 00:42:25,359
your first shellcode loader

1192
00:42:25,359 --> 00:42:27,280
it was designed for c sharp and nim but

1193
00:42:27,280 --> 00:42:29,359
actually this week someone submitted a

1194
00:42:29,359 --> 00:42:31,599
pull request for golang as well

1195
00:42:31,599 --> 00:42:33,119
so if you're interested in those

1196
00:42:33,119 --> 00:42:35,040
languages check that out but the the

1197
00:42:35,040 --> 00:42:36,800
workshop is designed to be

1198
00:42:36,800 --> 00:42:39,599
generic so you can just use any pro

1199
00:42:39,599 --> 00:42:40,800
programming language that you're

1200
00:42:40,800 --> 00:42:42,560
familiar with

1201
00:42:42,560 --> 00:42:45,839
i also listed a couple of uh other uh uh

1202
00:42:45,839 --> 00:42:48,400
resources with the respective languages

1203
00:42:48,400 --> 00:42:50,079
uh shout out to sector seven for the

1204
00:42:50,079 --> 00:42:52,640
excellent malware development courses uh

1205
00:42:52,640 --> 00:42:54,400
i listed essentials here but there are a

1206
00:42:54,400 --> 00:42:56,319
couple of chapters that kind of take you

1207
00:42:56,319 --> 00:42:58,800
from zero to hero really in the malware

1208
00:42:58,800 --> 00:43:00,400
development space

1209
00:43:00,400 --> 00:43:01,920
and other than that there are a lot of

1210
00:43:01,920 --> 00:43:04,400
resources as i mentioned on on github

1211
00:43:04,400 --> 00:43:05,920
depending on the language that you want

1212
00:43:05,920 --> 00:43:06,880
to use

1213
00:43:06,880 --> 00:43:10,319
you could even go to google and just

1214
00:43:10,319 --> 00:43:12,640
randomly search for shellcode loader

1215
00:43:12,640 --> 00:43:14,880
plus programming language name and find

1216
00:43:14,880 --> 00:43:17,440
interesting examples

1217
00:43:17,440 --> 00:43:19,760
so summarizing this into a defensive

1218
00:43:19,760 --> 00:43:22,560
implications

1219
00:43:22,640 --> 00:43:25,040
small sidenote i am a red teamer so

1220
00:43:25,040 --> 00:43:26,800
probably this is kicking in a lot of

1221
00:43:26,800 --> 00:43:29,200
open doors uh for you uh but i think

1222
00:43:29,200 --> 00:43:31,200
it's it's nicely summarized in the the

1223
00:43:31,200 --> 00:43:32,960
talk that that chris peacock had

1224
00:43:32,960 --> 00:43:34,560
yesterday in the department of pain

1225
00:43:34,560 --> 00:43:36,079
right so

1226
00:43:36,079 --> 00:43:38,480
looking at hashes is near worthless

1227
00:43:38,480 --> 00:43:40,720
because as we saw it's very easy to make

1228
00:43:40,720 --> 00:43:43,040
malware that's different every time

1229
00:43:43,040 --> 00:43:45,599
so try to focus on the the ttps instead

1230
00:43:45,599 --> 00:43:48,800
of uh yeah the specific tools

1231
00:43:48,800 --> 00:43:51,440
to to detect this type of stuff and very

1232
00:43:51,440 --> 00:43:52,720
importantly

1233
00:43:52,720 --> 00:43:54,720
attackers also follow trends so if

1234
00:43:54,720 --> 00:43:56,640
someone goes on twitter and says hey

1235
00:43:56,640 --> 00:43:59,040
sliver is the new cool uh

1236
00:43:59,040 --> 00:44:00,800
lots of people will try sliver right and

1237
00:44:00,800 --> 00:44:02,319
the same goes for malware development if

1238
00:44:02,319 --> 00:44:04,400
someone goes and says hey nim is really

1239
00:44:04,400 --> 00:44:06,160
cool for malware development lots of

1240
00:44:06,160 --> 00:44:08,000
people will try that so try to stay on

1241
00:44:08,000 --> 00:44:09,680
top of this in the form of that

1242
00:44:09,680 --> 00:44:11,839
intelligence or other feats

1243
00:44:11,839 --> 00:44:13,680
to understand what attackers are doing

1244
00:44:13,680 --> 00:44:15,359
and focus your detections on that

1245
00:44:15,359 --> 00:44:17,200
because that may be the next big thing

1246
00:44:17,200 --> 00:44:19,680
that is abused

1247
00:44:19,680 --> 00:44:22,480
finally some takeaways um i think it can

1248
00:44:22,480 --> 00:44:24,720
all be summarized in uh

1249
00:44:24,720 --> 00:44:27,680
in in one takeaway really which is if

1250
00:44:27,680 --> 00:44:29,599
you think this is interesting just get

1251
00:44:29,599 --> 00:44:31,680
started uh malware development and

1252
00:44:31,680 --> 00:44:34,160
offensive development in general

1253
00:44:34,160 --> 00:44:36,640
is no longer a optional capability for

1254
00:44:36,640 --> 00:44:38,079
red teams

1255
00:44:38,079 --> 00:44:40,240
defenses are maturing and so should your

1256
00:44:40,240 --> 00:44:42,480
development capability that doesn't mean

1257
00:44:42,480 --> 00:44:44,800
that you have to do everything yourself

1258
00:44:44,800 --> 00:44:46,079
of course you can

1259
00:44:46,079 --> 00:44:49,040
develop modify or just buy your your

1260
00:44:49,040 --> 00:44:50,640
offensive capability

1261
00:44:50,640 --> 00:44:52,960
uh but it's definitely no longer

1262
00:44:52,960 --> 00:44:56,319
optional so just look into this field uh

1263
00:44:56,319 --> 00:44:58,160
motivate your colleagues to to start

1264
00:44:58,160 --> 00:45:00,240
working on this stuff and

1265
00:45:00,240 --> 00:45:02,079
improve your your next

1266
00:45:02,079 --> 00:45:03,760
red team

1267
00:45:03,760 --> 00:45:05,200
operation

1268
00:45:05,200 --> 00:45:07,680
that's it from my side thank you very

1269
00:45:07,680 --> 00:45:10,680
much

