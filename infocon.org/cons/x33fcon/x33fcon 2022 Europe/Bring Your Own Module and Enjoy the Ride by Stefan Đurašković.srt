1
00:00:01,850 --> 00:00:06,719
[Music]

2
00:00:06,720 --> 00:00:08,160
yeah hi everyone

3
00:00:08,160 --> 00:00:10,240
welcome to my talk bring your module and

4
00:00:10,240 --> 00:00:11,679
enjoy the ride

5
00:00:11,679 --> 00:00:13,440
it will be covering the little hijacking

6
00:00:13,440 --> 00:00:14,559
and proxying

7
00:00:14,559 --> 00:00:16,160
basically how it works under the hood

8
00:00:16,160 --> 00:00:17,039
and

9
00:00:17,039 --> 00:00:18,640
we'll also check it from the defensive

10
00:00:18,640 --> 00:00:19,600
side

11
00:00:19,600 --> 00:00:21,039
uh it's really an honor to be here and

12
00:00:21,039 --> 00:00:22,880
be able to talk about this and big

13
00:00:22,880 --> 00:00:24,800
thanks to the organizers of zifcon for

14
00:00:24,800 --> 00:00:27,119
the invite

15
00:00:27,119 --> 00:00:29,760
um as stated here all opinions expressed

16
00:00:29,760 --> 00:00:31,439
are my own and have nothing to do with

17
00:00:31,439 --> 00:00:32,719
my employer

18
00:00:32,719 --> 00:00:35,040
and also i don't claim any ownership of

19
00:00:35,040 --> 00:00:37,040
this technique and these are just my

20
00:00:37,040 --> 00:00:38,960
thoughts on the topic so

21
00:00:38,960 --> 00:00:40,559
they might be inaccurate to some extent

22
00:00:40,559 --> 00:00:42,079
and in that case i

23
00:00:42,079 --> 00:00:44,399
welcome any critical questions and

24
00:00:44,399 --> 00:00:45,920
thoughts as they help me learn and

25
00:00:45,920 --> 00:00:48,239
improve

26
00:00:50,800 --> 00:00:53,039
the agenda for today

27
00:00:53,039 --> 00:00:55,360
is as follows so

28
00:00:55,360 --> 00:00:57,039
we'll quickly check why it's still

29
00:00:57,039 --> 00:00:58,719
interesting for

30
00:00:58,719 --> 00:01:00,239
attackers more advanced and less

31
00:01:00,239 --> 00:01:02,480
advanced one and red teamers

32
00:01:02,480 --> 00:01:04,799
uh we'll quickly over go some basics of

33
00:01:04,799 --> 00:01:06,240
dynamic link library just to get

34
00:01:06,240 --> 00:01:08,880
familiar with how they work and after

35
00:01:08,880 --> 00:01:10,400
that we'll see how we can hijack them in

36
00:01:10,400 --> 00:01:12,720
proxy proxy them

37
00:01:12,720 --> 00:01:14,880
uh from from that point we'll check how

38
00:01:14,880 --> 00:01:17,759
far we can go with proxying

39
00:01:17,759 --> 00:01:19,520
and we'll see what i mean by that in a

40
00:01:19,520 --> 00:01:20,560
bit

41
00:01:20,560 --> 00:01:22,560
and after that we'll compare it to the

42
00:01:22,560 --> 00:01:25,520
dll proxy and classic injection uh

43
00:01:25,520 --> 00:01:27,520
we'll wrap it up with some detections

44
00:01:27,520 --> 00:01:29,680
and a very simple trick i call

45
00:01:29,680 --> 00:01:31,520
disappearing proxy

46
00:01:31,520 --> 00:01:33,360
uh but before all that

47
00:01:33,360 --> 00:01:35,040
it's a quick introduction

48
00:01:35,040 --> 00:01:36,880
my name is stephanie raschkeich and uh

49
00:01:36,880 --> 00:01:39,040
i'm currently a member of a small but a

50
00:01:39,040 --> 00:01:41,680
very amazing red team so

51
00:01:41,680 --> 00:01:44,000
over a very large enterprise and

52
00:01:44,000 --> 00:01:46,720
there i mostly work on defense evasion

53
00:01:46,720 --> 00:01:50,159
and covert operation windows

54
00:01:50,159 --> 00:01:51,840
my earlier background includes some

55
00:01:51,840 --> 00:01:53,439
system administration and web

56
00:01:53,439 --> 00:01:55,439
application pen testing

57
00:01:55,439 --> 00:01:57,040
oh okay sorry

58
00:01:57,040 --> 00:01:58,479
my

59
00:01:58,479 --> 00:02:00,799
my uh yeah background includes some uh

60
00:02:00,799 --> 00:02:02,479
web application pad testing and assisted

61
00:02:02,479 --> 00:02:05,280
mining and before i joined the

62
00:02:05,280 --> 00:02:07,600
red theme so my my dream job i was

63
00:02:07,600 --> 00:02:09,758
currently i was a member of uh

64
00:02:09,758 --> 00:02:12,080
the same organization's blue team

65
00:02:12,080 --> 00:02:14,800
so overall it was a fun fun path

66
00:02:14,800 --> 00:02:17,040
um

67
00:02:17,040 --> 00:02:18,800
and that kind of brings us to why uh why

68
00:02:18,800 --> 00:02:20,400
is this still kind of relevant and

69
00:02:20,400 --> 00:02:22,640
interesting to talk about

70
00:02:22,640 --> 00:02:24,319
it's because transactors are doing it

71
00:02:24,319 --> 00:02:26,080
for more than 20 years and

72
00:02:26,080 --> 00:02:28,720
they're actively doing it even today

73
00:02:28,720 --> 00:02:30,560
more advanced

74
00:02:30,560 --> 00:02:32,560
and even less advanced ones are bringing

75
00:02:32,560 --> 00:02:34,480
their own modules and these are some

76
00:02:34,480 --> 00:02:36,319
just some of the examples that uh caught

77
00:02:36,319 --> 00:02:37,519
my eye

78
00:02:37,519 --> 00:02:39,680
uh basically in the first case well the

79
00:02:39,680 --> 00:02:41,280
module that was used by solarwinds

80
00:02:41,280 --> 00:02:43,519
application was back toward by by threat

81
00:02:43,519 --> 00:02:47,200
actor and in the second case the

82
00:02:47,200 --> 00:02:48,720
dropper was actually

83
00:02:48,720 --> 00:02:51,040
dropping the legit windows defender

84
00:02:51,040 --> 00:02:52,560
that's an older version of windows

85
00:02:52,560 --> 00:02:54,760
defender that would sideload the

86
00:02:54,760 --> 00:02:56,319
mps3cdll

87
00:02:56,319 --> 00:02:58,560
which was actually the real

88
00:02:58,560 --> 00:03:00,959
loader

89
00:03:02,239 --> 00:03:03,519
and also

90
00:03:03,519 --> 00:03:04,959
another very good reason comes from the

91
00:03:04,959 --> 00:03:06,400
fact that

92
00:03:06,400 --> 00:03:08,879
it's very hard to detect and basically

93
00:03:08,879 --> 00:03:11,680
distinguish from legit activities uh

94
00:03:11,680 --> 00:03:13,760
from both analysts perspective and the

95
00:03:13,760 --> 00:03:15,120
and automation

96
00:03:15,120 --> 00:03:17,440
because uh once the dll is basically

97
00:03:17,440 --> 00:03:18,800
written to the desk all he needs to do

98
00:03:18,800 --> 00:03:20,959
is just wait there and sit

99
00:03:20,959 --> 00:03:22,800
uh for a process to start and actually

100
00:03:22,800 --> 00:03:24,879
hold it in its memory space and once

101
00:03:24,879 --> 00:03:27,360
that happens all malicious callbacks are

102
00:03:27,360 --> 00:03:29,200
actually coming from the now let's say

103
00:03:29,200 --> 00:03:30,799
backward process

104
00:03:30,799 --> 00:03:32,799
and eventually if an alert comes in and

105
00:03:32,799 --> 00:03:34,879
the investigation starts people will be

106
00:03:34,879 --> 00:03:36,400
looking at the process

107
00:03:36,400 --> 00:03:39,120
not at the module itself so

108
00:03:39,120 --> 00:03:41,040
uh for us with siblings

109
00:03:41,040 --> 00:03:43,040
that was kind of familiar

110
00:03:43,040 --> 00:03:44,720
and

111
00:03:44,720 --> 00:03:45,680
uh

112
00:03:45,680 --> 00:03:47,360
because we're talking about all that

113
00:03:47,360 --> 00:03:49,760
let's quickly go over some uh basics of

114
00:03:49,760 --> 00:03:52,959
dynamic link libraries just

115
00:03:52,959 --> 00:03:54,959
just to know what uh what we're bringing

116
00:03:54,959 --> 00:03:57,840
in this case um

117
00:03:57,840 --> 00:04:00,000
dynamic link libraries are microsoft's

118
00:04:00,000 --> 00:04:01,760
way of basically sharing reusing code

119
00:04:01,760 --> 00:04:04,720
between applications uh

120
00:04:04,720 --> 00:04:07,439
and they're of typical uh format you

121
00:04:07,439 --> 00:04:09,599
will accept portable executable format

122
00:04:09,599 --> 00:04:12,879
that you would expect

123
00:04:12,879 --> 00:04:16,160
there are portable executables that uh

124
00:04:16,160 --> 00:04:17,918
that basically have a typical format

125
00:04:17,918 --> 00:04:20,079
some headers some sections

126
00:04:20,079 --> 00:04:22,240
uh like text section which should uh

127
00:04:22,240 --> 00:04:24,560
which contain the uh

128
00:04:24,560 --> 00:04:26,639
executable data our data section and

129
00:04:26,639 --> 00:04:28,400
data section with the initial

130
00:04:28,400 --> 00:04:29,840
initialized variables and all these

131
00:04:29,840 --> 00:04:31,120
things

132
00:04:31,120 --> 00:04:34,080
uh what else they they also have import

133
00:04:34,080 --> 00:04:36,639
and experts are stable and both are very

134
00:04:36,639 --> 00:04:38,479
important but for the processing

135
00:04:38,479 --> 00:04:39,759
purposes

136
00:04:39,759 --> 00:04:42,479
we'll mostly be focusing on the exports

137
00:04:42,479 --> 00:04:44,720
are stable and we'll see why that that's

138
00:04:44,720 --> 00:04:46,320
in a bit

139
00:04:46,320 --> 00:04:48,720
and finally they are uh microsoft calls

140
00:04:48,720 --> 00:04:49,840
them the

141
00:04:49,840 --> 00:04:50,560
uh

142
00:04:50,560 --> 00:04:52,240
application extensions so they're not

143
00:04:52,240 --> 00:04:54,479
really like uh

144
00:04:54,479 --> 00:04:56,800
they provide additional functionalities

145
00:04:56,800 --> 00:04:58,479
to the main module the

146
00:04:58,479 --> 00:05:00,240
main xe loads them to get some

147
00:05:00,240 --> 00:05:02,960
additional functionalities from them

148
00:05:02,960 --> 00:05:04,479
and

149
00:05:04,479 --> 00:05:06,400
since we were talking about the import

150
00:05:06,400 --> 00:05:08,240
and expert address tables here are just

151
00:05:08,240 --> 00:05:13,199
some snippets of both for version dll

152
00:05:13,199 --> 00:05:14,000
and

153
00:05:14,000 --> 00:05:15,600
i'm not going to be going too much into

154
00:05:15,600 --> 00:05:17,840
detail i'm just going to

155
00:05:17,840 --> 00:05:19,360
say what i keep in mind when you when i

156
00:05:19,360 --> 00:05:20,880
deal with these structures

157
00:05:20,880 --> 00:05:22,560
in the first case the import address

158
00:05:22,560 --> 00:05:23,680
table is

159
00:05:23,680 --> 00:05:25,919
just a list of functions that are

160
00:05:25,919 --> 00:05:28,560
imported from another module and used by

161
00:05:28,560 --> 00:05:29,600
this one

162
00:05:29,600 --> 00:05:31,360
and the expert address table is

163
00:05:31,360 --> 00:05:32,880
basically a list of functions that are

164
00:05:32,880 --> 00:05:36,479
exported by by the module

165
00:05:36,479 --> 00:05:39,199
they're exported by their function names

166
00:05:39,199 --> 00:05:40,160
and

167
00:05:40,160 --> 00:05:42,639
ordinals which is basically their number

168
00:05:42,639 --> 00:05:45,360
like first second fifth whatever

169
00:05:45,360 --> 00:05:47,600
and uh that's so that the loader

170
00:05:47,600 --> 00:05:50,400
eventually can easily look them up uh

171
00:05:50,400 --> 00:05:53,360
basically resolve their addresses and uh

172
00:05:53,360 --> 00:05:55,440
note uh basically make a correction in

173
00:05:55,440 --> 00:05:57,520
the import address table of the loading

174
00:05:57,520 --> 00:05:58,479
module

175
00:05:58,479 --> 00:06:00,800
to make all this a bit clearer uh we'll

176
00:06:00,800 --> 00:06:03,280
also see how the loading process

177
00:06:03,280 --> 00:06:04,479
actually works

178
00:06:04,479 --> 00:06:07,520
there are a couple of steps um

179
00:06:07,520 --> 00:06:09,680
the loader starts by searching uh for a

180
00:06:09,680 --> 00:06:12,160
module by a specific name once it finds

181
00:06:12,160 --> 00:06:14,400
it it checks their its headers and

182
00:06:14,400 --> 00:06:16,720
determines the size the architecture and

183
00:06:16,720 --> 00:06:18,000
after that

184
00:06:18,000 --> 00:06:19,759
uh it basically allocates some space in

185
00:06:19,759 --> 00:06:21,520
the memory memory space of the process

186
00:06:21,520 --> 00:06:24,800
which and then maps the dll in that

187
00:06:24,800 --> 00:06:26,319
in that memory space

188
00:06:26,319 --> 00:06:28,080
after that it performs relocations

189
00:06:28,080 --> 00:06:29,199
because uh

190
00:06:29,199 --> 00:06:30,319
well

191
00:06:30,319 --> 00:06:32,000
it's pro dll is probably not going to be

192
00:06:32,000 --> 00:06:35,840
loaded in its preferred base address so

193
00:06:36,479 --> 00:06:37,840
it needs to be

194
00:06:37,840 --> 00:06:39,680
reallocated so that everything aligns

195
00:06:39,680 --> 00:06:41,280
nice and memory and after it's done with

196
00:06:41,280 --> 00:06:42,479
that

197
00:06:42,479 --> 00:06:44,720
it will go ahead and

198
00:06:44,720 --> 00:06:46,639
load the dependencies so it will

199
00:06:46,639 --> 00:06:48,560
basically just check the

200
00:06:48,560 --> 00:06:49,919
import address table of the loaded

201
00:06:49,919 --> 00:06:51,199
module

202
00:06:51,199 --> 00:06:53,440
it will see the list of functions that

203
00:06:53,440 --> 00:06:55,039
it's importing and the modules from

204
00:06:55,039 --> 00:06:56,800
where they're imported so it will go

205
00:06:56,800 --> 00:07:00,000
ahead and just find them load them so

206
00:07:00,000 --> 00:07:02,639
basically repeat the first couple of

207
00:07:02,639 --> 00:07:04,400
steps after that this will bind the

208
00:07:04,400 --> 00:07:06,400
imports uh essentially it's going to

209
00:07:06,400 --> 00:07:07,759
resolve the

210
00:07:07,759 --> 00:07:08,800
addresses

211
00:07:08,800 --> 00:07:10,639
of the functions that are used by the

212
00:07:10,639 --> 00:07:12,160
application and

213
00:07:12,160 --> 00:07:13,520
make those correction in the import that

214
00:07:13,520 --> 00:07:15,919
are stable of the loading modules and

215
00:07:15,919 --> 00:07:18,160
finally it's going to call dll main to

216
00:07:18,160 --> 00:07:21,120
just let the dll itself initialize

217
00:07:21,120 --> 00:07:24,160
and for dll hijacking and proxying we're

218
00:07:24,160 --> 00:07:25,440
going to be

219
00:07:25,440 --> 00:07:27,039
using the first step in this chain which

220
00:07:27,039 --> 00:07:30,400
is the finding dll so let's see how the

221
00:07:30,400 --> 00:07:33,198
loader does that

222
00:07:34,639 --> 00:07:37,039
here's a list of locations and basically

223
00:07:37,039 --> 00:07:39,840
the order in which loader checks them

224
00:07:39,840 --> 00:07:41,520
so apart from the modules that are

225
00:07:41,520 --> 00:07:43,360
already in memory

226
00:07:43,360 --> 00:07:45,680
and the modules that are stored under

227
00:07:45,680 --> 00:07:48,160
the known dlls registry key the loader

228
00:07:48,160 --> 00:07:49,360
will check these

229
00:07:49,360 --> 00:07:52,080
six locations from top to bottom

230
00:07:52,080 --> 00:07:53,840
uh it will search for a module of a

231
00:07:53,840 --> 00:07:55,840
particular name and if it finds it it

232
00:07:55,840 --> 00:07:58,720
will load it from that location

233
00:07:58,720 --> 00:08:00,080
um

234
00:08:00,080 --> 00:08:01,759
and that that kind of brings us to the

235
00:08:01,759 --> 00:08:03,759
first requirement the loader has

236
00:08:03,759 --> 00:08:06,960
so it needs a module of a specific name

237
00:08:06,960 --> 00:08:09,759
in a specific place any of these ones

238
00:08:09,759 --> 00:08:12,240
uh and that's that's where basically the

239
00:08:12,240 --> 00:08:17,919
hijacking comes in and proxies later so

240
00:08:17,919 --> 00:08:20,160
if we would run uh procmond with these

241
00:08:20,160 --> 00:08:21,759
filters set and we would run any of

242
00:08:21,759 --> 00:08:23,759
these applications uh

243
00:08:23,759 --> 00:08:25,759
we'll basically see a bunch of

244
00:08:25,759 --> 00:08:28,000
missing dlls or brooklyn would say

245
00:08:28,000 --> 00:08:29,520
they're missing but essentially

246
00:08:29,520 --> 00:08:31,599
application still continues to run

247
00:08:31,599 --> 00:08:34,159
which just basically means that the dll

248
00:08:34,159 --> 00:08:35,839
is missing from the location where it

249
00:08:35,839 --> 00:08:37,919
was first checked but it was also found

250
00:08:37,919 --> 00:08:39,519
in another location so

251
00:08:39,519 --> 00:08:41,200
somewhere later in the search order for

252
00:08:41,200 --> 00:08:42,958
for these modules it's actually in

253
00:08:42,958 --> 00:08:45,360
system 32 or 6464

254
00:08:45,360 --> 00:08:47,279
depending if we're looking on signal or

255
00:08:47,279 --> 00:08:48,800
discord

256
00:08:48,800 --> 00:08:52,880
um because one is 64-bit one is 32-bit

257
00:08:52,880 --> 00:08:54,480
application

258
00:08:54,480 --> 00:08:55,360
so

259
00:08:55,360 --> 00:08:56,240
um

260
00:08:56,240 --> 00:08:57,920
technically if we would

261
00:08:57,920 --> 00:08:59,360
we see that the

262
00:08:59,360 --> 00:09:01,279
loader is actually trying to load the

263
00:09:01,279 --> 00:09:02,880
module from from this path with the

264
00:09:02,880 --> 00:09:04,399
specific name if we would create a

265
00:09:04,399 --> 00:09:06,160
module

266
00:09:06,160 --> 00:09:08,320
drop it in any of these paths and name

267
00:09:08,320 --> 00:09:11,440
it give it any name from this list the

268
00:09:11,440 --> 00:09:13,440
uh the application would at runtime try

269
00:09:13,440 --> 00:09:15,040
to load it and that's basically how the

270
00:09:15,040 --> 00:09:17,519
hijack occurs

271
00:09:17,519 --> 00:09:19,279
um also what's what's kind of important

272
00:09:19,279 --> 00:09:21,360
to keep in mind in this case that

273
00:09:21,360 --> 00:09:23,120
if we would just create a random module

274
00:09:23,120 --> 00:09:25,200
that would do something we want

275
00:09:25,200 --> 00:09:27,600
like run our shell code or a

276
00:09:27,600 --> 00:09:29,200
pop-up message box or pretty much

277
00:09:29,200 --> 00:09:30,320
anything

278
00:09:30,320 --> 00:09:33,279
that would not work because the

279
00:09:33,279 --> 00:09:34,720
requirement for the name would be

280
00:09:34,720 --> 00:09:36,560
fulfilled in terms of

281
00:09:36,560 --> 00:09:38,080
the application we'll see there is a

282
00:09:38,080 --> 00:09:40,640
module of a particular name it fits

283
00:09:40,640 --> 00:09:42,720
let's try to load it

284
00:09:42,720 --> 00:09:43,600
but

285
00:09:43,600 --> 00:09:46,080
it wouldn't work because we previously

286
00:09:46,080 --> 00:09:48,160
said that the

287
00:09:48,160 --> 00:09:50,000
dlls are actually application extensions

288
00:09:50,000 --> 00:09:53,200
so the loader has some uh expectations

289
00:09:53,200 --> 00:09:54,160
from

290
00:09:54,160 --> 00:09:56,000
from the module it loads

291
00:09:56,000 --> 00:09:57,920
and for us to not actually have to

292
00:09:57,920 --> 00:10:00,399
implement every single function and

293
00:10:00,399 --> 00:10:02,320
comply with the loader we just

294
00:10:02,320 --> 00:10:04,399
need to rely on proxy

295
00:10:04,399 --> 00:10:06,720
and i i kind of find the processing

296
00:10:06,720 --> 00:10:09,279
easiest to explain in a practical

297
00:10:09,279 --> 00:10:10,560
example

298
00:10:10,560 --> 00:10:14,320
so let's say we have a target exe and

299
00:10:14,320 --> 00:10:16,399
target exe wants to work with get file

300
00:10:16,399 --> 00:10:20,079
version info a from version dll it will

301
00:10:20,079 --> 00:10:22,480
do some basic steps it's gonna load

302
00:10:22,480 --> 00:10:24,240
version dll memory

303
00:10:24,240 --> 00:10:26,000
after that it's gonna walk through its

304
00:10:26,000 --> 00:10:29,360
export other stable parse it finds the

305
00:10:29,360 --> 00:10:31,680
piezo functions it needs and it's going

306
00:10:31,680 --> 00:10:33,120
to resolve it

307
00:10:33,120 --> 00:10:34,880
fine the function is there ready ready

308
00:10:34,880 --> 00:10:36,959
to be used and that's perfectly fine in

309
00:10:36,959 --> 00:10:38,320
cases where you

310
00:10:38,320 --> 00:10:40,320
have actually a physical address of the

311
00:10:40,320 --> 00:10:42,160
function so where the function itself is

312
00:10:42,160 --> 00:10:44,320
implemented in the module

313
00:10:44,320 --> 00:10:46,399
in some cases like uh where language

314
00:10:46,399 --> 00:10:48,720
name a uh the function is not

315
00:10:48,720 --> 00:10:51,519
implemented in the module it just has a

316
00:10:51,519 --> 00:10:53,440
pointer to another module where the

317
00:10:53,440 --> 00:10:56,079
function actually is implemented

318
00:10:56,079 --> 00:10:57,920
so the loader will actually have to

319
00:10:57,920 --> 00:11:00,399
repeat the steps so it will try to find

320
00:11:00,399 --> 00:11:02,160
that module uh

321
00:11:02,160 --> 00:11:03,920
it will try if it's not already in

322
00:11:03,920 --> 00:11:05,680
memory it's going to load it and it's

323
00:11:05,680 --> 00:11:07,360
going to go through its export address

324
00:11:07,360 --> 00:11:08,240
table

325
00:11:08,240 --> 00:11:10,560
find the function it needs

326
00:11:10,560 --> 00:11:12,560
this is a very good feature from the

327
00:11:12,560 --> 00:11:14,720
perspective of

328
00:11:14,720 --> 00:11:17,279
maintaining backwards compatibility

329
00:11:17,279 --> 00:11:19,200
because

330
00:11:19,200 --> 00:11:21,760
let's say we have a module and module b

331
00:11:21,760 --> 00:11:23,600
some function some functionality is

332
00:11:23,600 --> 00:11:25,360
implemented in module a

333
00:11:25,360 --> 00:11:27,600
and we decide to for some reason move it

334
00:11:27,600 --> 00:11:30,480
to module b instead of actually

335
00:11:30,480 --> 00:11:32,399
refactoring the whole thing we just have

336
00:11:32,399 --> 00:11:34,880
to put the pointer and say hey loader

337
00:11:34,880 --> 00:11:36,240
next time you need it

338
00:11:36,240 --> 00:11:38,160
look for it in module b and that that's

339
00:11:38,160 --> 00:11:39,839
that's pretty much it

340
00:11:39,839 --> 00:11:43,120
uh so how can it be abused

341
00:11:43,120 --> 00:11:45,440
essentially uh we would want to repeat

342
00:11:45,440 --> 00:11:47,120
the same steps as

343
00:11:47,120 --> 00:11:49,519
windows does in legit cases

344
00:11:49,519 --> 00:11:50,399
and

345
00:11:50,399 --> 00:11:52,079
we'll want to do that

346
00:11:52,079 --> 00:11:54,720
in a way so

347
00:11:54,720 --> 00:11:56,560
we know that we need a

348
00:11:56,560 --> 00:11:57,600
dll

349
00:11:57,600 --> 00:11:58,399
uh

350
00:11:58,399 --> 00:12:00,160
of a particular name we saw that one of

351
00:12:00,160 --> 00:12:02,560
the dlls from the list was version dll

352
00:12:02,560 --> 00:12:05,040
so let's go ahead and create a dll

353
00:12:05,040 --> 00:12:06,160
that's going to

354
00:12:06,160 --> 00:12:08,399
run shell code or whatever

355
00:12:08,399 --> 00:12:10,480
um name it version

356
00:12:10,480 --> 00:12:13,279
and we also need to take so we also need

357
00:12:13,279 --> 00:12:15,760
to take the original version dll from

358
00:12:15,760 --> 00:12:17,600
from the system and put it in the let's

359
00:12:17,600 --> 00:12:19,920
say application folder

360
00:12:19,920 --> 00:12:20,800
and

361
00:12:20,800 --> 00:12:23,200
we need to make sure that

362
00:12:23,200 --> 00:12:24,800
our version dll that's going to be

363
00:12:24,800 --> 00:12:26,480
loaded has

364
00:12:26,480 --> 00:12:28,240
all the functionalities that original

365
00:12:28,240 --> 00:12:29,760
version has

366
00:12:29,760 --> 00:12:31,200
and

367
00:12:31,200 --> 00:12:34,480
instead of actually implementing the

368
00:12:34,480 --> 00:12:36,959
every single function we we basically

369
00:12:36,959 --> 00:12:38,240
just put a bunch of pointers in the

370
00:12:38,240 --> 00:12:39,760
exportators table

371
00:12:39,760 --> 00:12:40,560
so

372
00:12:40,560 --> 00:12:42,959
when the process starts it loads version

373
00:12:42,959 --> 00:12:44,959
it sees that hey

374
00:12:44,959 --> 00:12:47,360
all the functions we don't have any but

375
00:12:47,360 --> 00:12:48,720
they're going to be in another module in

376
00:12:48,720 --> 00:12:50,480
this case we're dll

377
00:12:50,480 --> 00:12:51,519
so

378
00:12:51,519 --> 00:12:53,920
the loader will there then try to reach

379
00:12:53,920 --> 00:12:56,639
for vert dll and actually load it uh

380
00:12:56,639 --> 00:12:58,399
resolve all the functions

381
00:12:58,399 --> 00:12:59,839
with this will basically achieve two

382
00:12:59,839 --> 00:13:03,440
things uh we were able to get our in

383
00:13:03,440 --> 00:13:05,360
this case malicious module running in a

384
00:13:05,360 --> 00:13:08,320
memory of a process

385
00:13:08,320 --> 00:13:09,279
and

386
00:13:09,279 --> 00:13:11,279
we also were able to keep the process

387
00:13:11,279 --> 00:13:12,480
running without breaking anything

388
00:13:12,480 --> 00:13:14,240
because process eventually found what it

389
00:13:14,240 --> 00:13:15,519
needs and

390
00:13:15,519 --> 00:13:18,880
it continues to run business as usual

391
00:13:18,880 --> 00:13:21,440
so for proxing for us to work we need to

392
00:13:21,440 --> 00:13:23,519
focus on on kind of two things first one

393
00:13:23,519 --> 00:13:25,120
is um

394
00:13:25,120 --> 00:13:27,279
we need to export we need to make sure

395
00:13:27,279 --> 00:13:29,600
our exports are actually pointing to our

396
00:13:29,600 --> 00:13:30,959
module and

397
00:13:30,959 --> 00:13:33,040
uh to those functions and that's kind of

398
00:13:33,040 --> 00:13:35,760
easy to do with the

399
00:13:35,760 --> 00:13:38,240
program directives or we basically

400
00:13:38,240 --> 00:13:40,399
define it in the dev file

401
00:13:40,399 --> 00:13:42,560
and the second thing that's a bit more

402
00:13:42,560 --> 00:13:44,480
trick here is we have to deal with dll

403
00:13:44,480 --> 00:13:46,160
main

404
00:13:46,160 --> 00:13:48,079
microsoft says that there are there is a

405
00:13:48,079 --> 00:13:51,279
bunch of of uh things that

406
00:13:51,279 --> 00:13:54,480
can and cannot be done from dll main uh

407
00:13:54,480 --> 00:13:56,560
there's a small amount of things that

408
00:13:56,560 --> 00:13:58,320
can safely be done from dll main because

409
00:13:58,320 --> 00:13:59,199
of the

410
00:13:59,199 --> 00:14:01,519
potential of deadlocks

411
00:14:01,519 --> 00:14:03,279
but they also say that we can

412
00:14:03,279 --> 00:14:04,880
potentially create a thread as long as

413
00:14:04,880 --> 00:14:06,880
we don't synchronize it with

414
00:14:06,880 --> 00:14:08,639
other threads

415
00:14:08,639 --> 00:14:10,880
so here's we're basically doing that

416
00:14:10,880 --> 00:14:12,880
here um

417
00:14:12,880 --> 00:14:14,800
we created a small function that's gonna

418
00:14:14,800 --> 00:14:16,800
just pop up a message box and we are

419
00:14:16,800 --> 00:14:19,040
going to call it from uh

420
00:14:19,040 --> 00:14:21,600
from our dll main in case where the dll

421
00:14:21,600 --> 00:14:24,160
is loaded so that's pretty much it uh

422
00:14:24,160 --> 00:14:26,000
for our proof of concept

423
00:14:26,000 --> 00:14:26,800
and

424
00:14:26,800 --> 00:14:29,440
when we set the stage just by dropping

425
00:14:29,440 --> 00:14:33,120
the version dll uh our messagebox proxy

426
00:14:33,120 --> 00:14:36,160
and we're dll in the signal directory we

427
00:14:36,160 --> 00:14:38,480
run the signal and yeah we see a bunch

428
00:14:38,480 --> 00:14:41,440
of pop-ups which is fine

429
00:14:41,440 --> 00:14:43,440
we also see that

430
00:14:43,440 --> 00:14:45,279
rockmoon is not really complaining about

431
00:14:45,279 --> 00:14:46,800
it because

432
00:14:46,800 --> 00:14:48,639
both version and word dll are

433
00:14:48,639 --> 00:14:50,399
successfully loaded

434
00:14:50,399 --> 00:14:52,560
and this kind of proves that our code is

435
00:14:52,560 --> 00:14:54,639
working but

436
00:14:54,639 --> 00:14:57,279
how far can we actually go with it

437
00:14:57,279 --> 00:14:59,040
and

438
00:14:59,040 --> 00:15:01,120
uh when i initially started to play

439
00:15:01,120 --> 00:15:03,279
around with yellow proxima guy i i was

440
00:15:03,279 --> 00:15:05,199
just going through procman output and i

441
00:15:05,199 --> 00:15:06,720
saw that

442
00:15:06,720 --> 00:15:09,120
brockmon shows that signal is using a

443
00:15:09,120 --> 00:15:10,839
create file to

444
00:15:10,839 --> 00:15:13,600
actually start open and read and load

445
00:15:13,600 --> 00:15:14,720
the module

446
00:15:14,720 --> 00:15:15,920
so

447
00:15:15,920 --> 00:15:18,480
essentially as we can see here and

448
00:15:18,480 --> 00:15:20,320
microsoft documentation says that both

449
00:15:20,320 --> 00:15:22,000
load library and create file can

450
00:15:22,000 --> 00:15:23,600
actually work with

451
00:15:23,600 --> 00:15:25,279
full pass in this case it's a full path

452
00:15:25,279 --> 00:15:26,560
to up

453
00:15:26,560 --> 00:15:28,800
to another folder so

454
00:15:28,800 --> 00:15:30,560
in this case system 32

455
00:15:30,560 --> 00:15:32,720
but would it also work in case

456
00:15:32,720 --> 00:15:33,759
of

457
00:15:33,759 --> 00:15:37,279
full path to another share smb or web

458
00:15:37,279 --> 00:15:39,440
let's find out

459
00:15:39,440 --> 00:15:43,920
so the idea is essentially this uh

460
00:15:43,920 --> 00:15:45,920
in uh in the application directory we

461
00:15:45,920 --> 00:15:48,480
don't drop a proxy module whose exports

462
00:15:48,480 --> 00:15:51,600
are stable is pointing to a

463
00:15:51,600 --> 00:15:53,199
module that's hosted on an external

464
00:15:53,199 --> 00:15:56,480
share made with smb or webdav

465
00:15:56,480 --> 00:15:58,639
so when the

466
00:15:58,639 --> 00:16:01,680
discord starts it sees the first module

467
00:16:01,680 --> 00:16:03,519
it says okay we're going to try to load

468
00:16:03,519 --> 00:16:05,519
it the expertise table is actually

469
00:16:05,519 --> 00:16:07,279
pointing to

470
00:16:07,279 --> 00:16:09,600
version x that's hosted on the

471
00:16:09,600 --> 00:16:10,800
remote share

472
00:16:10,800 --> 00:16:13,120
and that version x has like a let's say

473
00:16:13,120 --> 00:16:14,399
in this case

474
00:16:14,399 --> 00:16:16,399
c2 shellcode or whatever we decide to

475
00:16:16,399 --> 00:16:17,680
put in it

476
00:16:17,680 --> 00:16:20,160
so the module the discord is actually

477
00:16:20,160 --> 00:16:22,880
going to try to go there and load that

478
00:16:22,880 --> 00:16:24,800
from the external share

479
00:16:24,800 --> 00:16:26,959
but that also leaves us with the

480
00:16:26,959 --> 00:16:28,480
need for

481
00:16:28,480 --> 00:16:30,079
like a

482
00:16:30,079 --> 00:16:32,160
for the full circle to be completed

483
00:16:32,160 --> 00:16:33,120
because

484
00:16:33,120 --> 00:16:35,040
we need to make sure that our export

485
00:16:35,040 --> 00:16:37,440
exports from version x dll

486
00:16:37,440 --> 00:16:39,440
are actually giving the discord what it

487
00:16:39,440 --> 00:16:41,680
needs so to implement that we would just

488
00:16:41,680 --> 00:16:44,399
basically provide the path to

489
00:16:44,399 --> 00:16:46,480
local version dll

490
00:16:46,480 --> 00:16:48,959
so the discord like goes to one place

491
00:16:48,959 --> 00:16:50,399
sees it's not there goes to another

492
00:16:50,399 --> 00:16:52,000
places it's not there but in the third

493
00:16:52,000 --> 00:16:54,720
place maybe i try that and it finds all

494
00:16:54,720 --> 00:16:56,480
the functionalities in it needs locally

495
00:16:56,480 --> 00:16:58,720
on the disk well we still still have our

496
00:16:58,720 --> 00:17:01,920
two additional modules loaded in memory

497
00:17:01,920 --> 00:17:02,959
and

498
00:17:02,959 --> 00:17:06,000
in case of smb it's uh pretty

499
00:17:06,000 --> 00:17:07,599
straightforward to do we actually need

500
00:17:07,599 --> 00:17:10,400
to provide a path to uh

501
00:17:10,400 --> 00:17:13,199
to a module hosted on the smb sure so we

502
00:17:13,199 --> 00:17:15,119
need to give a full path we also need to

503
00:17:15,119 --> 00:17:17,520
host the module obviously

504
00:17:17,520 --> 00:17:19,280
and uh

505
00:17:19,280 --> 00:17:21,359
yeah for for these tests i was using the

506
00:17:21,359 --> 00:17:23,679
impacted but sharp web server

507
00:17:23,679 --> 00:17:26,400
also ran good in couple of tests

508
00:17:26,400 --> 00:17:27,359
and

509
00:17:27,359 --> 00:17:28,960
once we actually compiled the proxy

510
00:17:28,960 --> 00:17:30,840
module with these

511
00:17:30,840 --> 00:17:33,520
exports uh we drop it in the discord up

512
00:17:33,520 --> 00:17:35,600
directory when we're on discord we see

513
00:17:35,600 --> 00:17:37,600
our message boxes popping up

514
00:17:37,600 --> 00:17:40,240
on the attacker's side we see um smb

515
00:17:40,240 --> 00:17:42,000
authentication and

516
00:17:42,000 --> 00:17:43,919
after not so much we see a cobble strike

517
00:17:43,919 --> 00:17:46,799
beacon coming back very cool right

518
00:17:46,799 --> 00:17:47,679
and

519
00:17:47,679 --> 00:17:51,360
uh essentially for webdav the process is

520
00:17:51,360 --> 00:17:53,200
exactly the same we just need to provide

521
00:17:53,200 --> 00:17:54,799
a full path to the

522
00:17:54,799 --> 00:17:57,120
module this time hosted on the

523
00:17:57,120 --> 00:17:58,799
web dev share we need to provide the

524
00:17:58,799 --> 00:18:00,320
port on which the web service is

525
00:18:00,320 --> 00:18:02,559
listening

526
00:18:02,559 --> 00:18:04,720
so we do that through ad port and again

527
00:18:04,720 --> 00:18:08,640
we host it but this time on a web.share

528
00:18:08,640 --> 00:18:10,960
essentially the same thing

529
00:18:10,960 --> 00:18:13,840
so once again we run it we drop the

530
00:18:13,840 --> 00:18:15,440
proxy module

531
00:18:15,440 --> 00:18:18,000
we run around discord

532
00:18:18,000 --> 00:18:19,760
this time we again see message boxes

533
00:18:19,760 --> 00:18:22,080
which is a good initial sign and on the

534
00:18:22,080 --> 00:18:23,679
attacker's side we see

535
00:18:23,679 --> 00:18:25,600
web dev traffic some

536
00:18:25,600 --> 00:18:28,320
requests and finally again a callback

537
00:18:28,320 --> 00:18:29,840
which is good

538
00:18:29,840 --> 00:18:31,840
and expected but

539
00:18:31,840 --> 00:18:35,200
in both cases smb and webdav the

540
00:18:35,200 --> 00:18:38,240
version x module is exactly the same so

541
00:18:38,240 --> 00:18:41,280
there's no differences between the cases

542
00:18:41,280 --> 00:18:44,000
it just exports the functions from uh

543
00:18:44,000 --> 00:18:45,520
shows that the exports

544
00:18:45,520 --> 00:18:47,200
are now pointing to the

545
00:18:47,200 --> 00:18:50,240
module in syslog 64.

546
00:18:50,240 --> 00:18:52,000
and

547
00:18:52,000 --> 00:18:54,400
what else yeah we basically put our in

548
00:18:54,400 --> 00:18:56,480
this case i'm saying encrypted shellcode

549
00:18:56,480 --> 00:18:57,840
because when they started to work on

550
00:18:57,840 --> 00:19:00,960
this uh for bypassing the defender

551
00:19:00,960 --> 00:19:03,679
it was uh enough if we just reverse the

552
00:19:03,679 --> 00:19:04,720
bytes

553
00:19:04,720 --> 00:19:07,120
reverse the order of bytes so that the

554
00:19:07,120 --> 00:19:08,640
defender doesn't really recognize the

555
00:19:08,640 --> 00:19:11,600
shellcode initially but after some time

556
00:19:11,600 --> 00:19:13,360
it actually started picking up on it so

557
00:19:13,360 --> 00:19:15,120
i had to implement like a full aes

558
00:19:15,120 --> 00:19:17,280
encryption encryption for that

559
00:19:17,280 --> 00:19:19,280
uh we instruct the

560
00:19:19,280 --> 00:19:21,280
compiler to put our shock code in the

561
00:19:21,280 --> 00:19:23,280
text section of the module so bundle it

562
00:19:23,280 --> 00:19:26,000
with the rest of the executable code

563
00:19:26,000 --> 00:19:27,520
and

564
00:19:27,520 --> 00:19:29,440
we're also talking about a new child so

565
00:19:29,440 --> 00:19:31,679
we basically create a

566
00:19:31,679 --> 00:19:33,760
we basically call uh

567
00:19:33,760 --> 00:19:36,320
the runway function from a

568
00:19:36,320 --> 00:19:39,440
from version x dll once it's loaded and

569
00:19:39,440 --> 00:19:40,799
we run that function in a separate

570
00:19:40,799 --> 00:19:43,039
thread and that function only does uh

571
00:19:43,039 --> 00:19:44,799
just a couple of things

572
00:19:44,799 --> 00:19:47,760
it checks if if a beacon is already

573
00:19:47,760 --> 00:19:50,000
running on the host and if not

574
00:19:50,000 --> 00:19:52,160
it basically changes the permissions of

575
00:19:52,160 --> 00:19:53,679
uh

576
00:19:53,679 --> 00:19:55,679
of the beacon section there are shell

577
00:19:55,679 --> 00:19:57,280
code section to

578
00:19:57,280 --> 00:19:58,720
page execute read write so it can

579
00:19:58,720 --> 00:19:59,919
decrypt it

580
00:19:59,919 --> 00:20:02,159
uh after decryption it changes it back

581
00:20:02,159 --> 00:20:04,400
to read and execute which is a normal

582
00:20:04,400 --> 00:20:06,080
text section permission and if it all

583
00:20:06,080 --> 00:20:07,360
goes well it

584
00:20:07,360 --> 00:20:10,000
just runs the show code

585
00:20:10,000 --> 00:20:10,880
um

586
00:20:10,880 --> 00:20:13,440
and a couple of things to consider uh

587
00:20:13,440 --> 00:20:16,080
for these use cases uh in case of web

588
00:20:16,080 --> 00:20:17,280
dev

589
00:20:17,280 --> 00:20:18,480
so

590
00:20:18,480 --> 00:20:20,159
the web client service might not be

591
00:20:20,159 --> 00:20:22,400
actually running by default so we need

592
00:20:22,400 --> 00:20:24,480
to find a way to start it

593
00:20:24,480 --> 00:20:26,480
uh and

594
00:20:26,480 --> 00:20:27,919
it's very good if we're running in a

595
00:20:27,919 --> 00:20:29,600
high integrity level and we can actually

596
00:20:29,600 --> 00:20:30,640
just

597
00:20:30,640 --> 00:20:32,480
run the service but

598
00:20:32,480 --> 00:20:34,320
when that's not the case i i did some

599
00:20:34,320 --> 00:20:35,760
research and there was a really cool

600
00:20:35,760 --> 00:20:38,159
project of uh called web.delivery by

601
00:20:38,159 --> 00:20:39,200
arnox

602
00:20:39,200 --> 00:20:41,600
and that project basically taught me a

603
00:20:41,600 --> 00:20:43,600
lot about uh

604
00:20:43,600 --> 00:20:44,559
the

605
00:20:44,559 --> 00:20:45,760
about webdav

606
00:20:45,760 --> 00:20:47,120
one of the things that we'll see later

607
00:20:47,120 --> 00:20:49,520
is how we can basically taken from that

608
00:20:49,520 --> 00:20:51,760
project how we can force start the uh

609
00:20:51,760 --> 00:20:54,799
web does service from medium integrity

610
00:20:54,799 --> 00:20:58,400
and also the dll that's pulled from a

611
00:20:58,400 --> 00:21:00,880
web share is going to be cached locally

612
00:21:00,880 --> 00:21:02,799
so it's going to be cached under a

613
00:21:02,799 --> 00:21:05,280
service profiles local service update a

614
00:21:05,280 --> 00:21:07,200
dfs staff folder there

615
00:21:07,200 --> 00:21:08,799
and if we want to avoid leaving any

616
00:21:08,799 --> 00:21:10,880
traces we actually have to remove that

617
00:21:10,880 --> 00:21:13,280
manually

618
00:21:13,280 --> 00:21:15,120
in smb case

619
00:21:15,120 --> 00:21:17,120
depending on the operating system which

620
00:21:17,120 --> 00:21:19,520
we're operating on uh guest access will

621
00:21:19,520 --> 00:21:20,960
probably be disabled if we're not

622
00:21:20,960 --> 00:21:22,720
talking about windows 10 home or windows

623
00:21:22,720 --> 00:21:24,080
10 pro

624
00:21:24,080 --> 00:21:27,200
uh that can kind of be circulated with

625
00:21:27,200 --> 00:21:29,360
setting up a proper share with a

626
00:21:29,360 --> 00:21:31,600
username and password

627
00:21:31,600 --> 00:21:34,720
and also compar in contrast to webdav

628
00:21:34,720 --> 00:21:36,559
the module that's going to be loaded

629
00:21:36,559 --> 00:21:39,520
through this is actually not going to be

630
00:21:39,520 --> 00:21:40,799
cached anywhere so it's going to be

631
00:21:40,799 --> 00:21:42,159
loaded directly

632
00:21:42,159 --> 00:21:43,200
but

633
00:21:43,200 --> 00:21:45,600
also we'll have a outbound smb traffic

634
00:21:45,600 --> 00:21:47,840
which is something to look for if you're

635
00:21:47,840 --> 00:21:50,080
a defender and potentially even block it

636
00:21:50,080 --> 00:21:52,400
if it's not already

637
00:21:52,400 --> 00:21:53,840
and

638
00:21:53,840 --> 00:21:56,159
i basically started with some uh earlier

639
00:21:56,159 --> 00:21:58,000
research i did not have too much time to

640
00:21:58,000 --> 00:21:59,760
tinker about it but

641
00:21:59,760 --> 00:22:01,600
smbore quick looks like a potential

642
00:22:01,600 --> 00:22:03,840
future candidate and

643
00:22:03,840 --> 00:22:05,039
something that

644
00:22:05,039 --> 00:22:08,320
may come up in the in the future

645
00:22:09,600 --> 00:22:12,720
so yeah to conclude this this now this

646
00:22:12,720 --> 00:22:15,360
for now we are basically able to

647
00:22:15,360 --> 00:22:18,159
uh underwrite circumstances load up load

648
00:22:18,159 --> 00:22:20,559
uh and execute modules from different

649
00:22:20,559 --> 00:22:22,720
directories or even different shares

650
00:22:22,720 --> 00:22:24,559
uh we can even force the application to

651
00:22:24,559 --> 00:22:26,880
hold multiple modules and

652
00:22:26,880 --> 00:22:28,400
we just need to be make sure that the

653
00:22:28,400 --> 00:22:30,559
application actually finds what it needs

654
00:22:30,559 --> 00:22:33,919
at the end of that redirection chain

655
00:22:33,919 --> 00:22:35,280
and since we're

656
00:22:35,280 --> 00:22:36,880
this whole time talking about running

657
00:22:36,880 --> 00:22:38,720
our code in the memory space of another

658
00:22:38,720 --> 00:22:41,280
process um let's compare the dlo proximi

659
00:22:41,280 --> 00:22:43,120
with just plain classic vanilla

660
00:22:43,120 --> 00:22:44,880
injection

661
00:22:44,880 --> 00:22:45,760
um

662
00:22:45,760 --> 00:22:47,520
for this for this part of the talk i was

663
00:22:47,520 --> 00:22:49,360
just i decided to go with the

664
00:22:49,360 --> 00:22:51,280
message box shock code because

665
00:22:51,280 --> 00:22:53,280
c2 shock code is usually reflective

666
00:22:53,280 --> 00:22:56,000
loaded it's going to run from

667
00:22:56,000 --> 00:22:58,000
there are some additional

668
00:22:58,000 --> 00:23:00,159
memory locations and writing performed

669
00:23:00,159 --> 00:23:02,559
for the let's say the final implant

670
00:23:02,559 --> 00:23:05,200
shock code and

671
00:23:05,840 --> 00:23:07,600
the location from which that shell code

672
00:23:07,600 --> 00:23:09,200
would be running would be

673
00:23:09,200 --> 00:23:11,280
basically selected by the reflective

674
00:23:11,280 --> 00:23:12,799
loader

675
00:23:12,799 --> 00:23:14,960
we can potentially manipulate it with

676
00:23:14,960 --> 00:23:16,960
that with hooking the functions that the

677
00:23:16,960 --> 00:23:19,760
loader uses or

678
00:23:19,760 --> 00:23:22,000
or writing our own reflective dll

679
00:23:22,000 --> 00:23:23,440
reflective loader

680
00:23:23,440 --> 00:23:24,159
but

681
00:23:24,159 --> 00:23:25,919
for the sake of simplicity i went with

682
00:23:25,919 --> 00:23:28,000
the basic message box shock code from

683
00:23:28,000 --> 00:23:31,039
msf wenham and here it's bundled in the

684
00:23:31,039 --> 00:23:32,559
text section so

685
00:23:32,559 --> 00:23:33,360
um

686
00:23:33,360 --> 00:23:35,840
basically back to disk looks like a

687
00:23:35,840 --> 00:23:37,600
regular normal text section nothing

688
00:23:37,600 --> 00:23:38,880
really

689
00:23:38,880 --> 00:23:40,400
odd it's modeled with the rest of the

690
00:23:40,400 --> 00:23:43,760
executable code from the module

691
00:23:44,320 --> 00:23:46,000
and as we've seen earlier when i

692
00:23:46,000 --> 00:23:48,880
detailed the version x

693
00:23:48,880 --> 00:23:50,240
we will be creating a new thread to run

694
00:23:50,240 --> 00:23:52,159
the show code and in this case in the

695
00:23:52,159 --> 00:23:53,919
first case it's going to be a shock or

696
00:23:53,919 --> 00:23:57,120
travel with the trade id of 4 t12

697
00:23:57,120 --> 00:24:00,000
um the start address is going to be

698
00:24:00,000 --> 00:24:01,520
pointing somewhere to somewhere in our

699
00:24:01,520 --> 00:24:03,200
module

700
00:24:03,200 --> 00:24:05,440
to uh let's say some offset in the in

701
00:24:05,440 --> 00:24:08,480
our module and as we can see here we uh

702
00:24:08,480 --> 00:24:10,080
the thread the thread stack is showing

703
00:24:10,080 --> 00:24:12,240
the functions that are called by the

704
00:24:12,240 --> 00:24:14,240
uh the show code itself

705
00:24:14,240 --> 00:24:15,039
the

706
00:24:15,039 --> 00:24:17,200
uh in the order they're called and the

707
00:24:17,200 --> 00:24:19,840
um

708
00:24:20,720 --> 00:24:21,520
and

709
00:24:21,520 --> 00:24:23,039
the offsets are actually marking the

710
00:24:23,039 --> 00:24:25,440
return return addresses of them if we

711
00:24:25,440 --> 00:24:27,679
want to make that a bit more legit in

712
00:24:27,679 --> 00:24:28,720
memory

713
00:24:28,720 --> 00:24:31,279
we can actually export the run runway

714
00:24:31,279 --> 00:24:33,840
function and then we get the start start

715
00:24:33,840 --> 00:24:36,799
address looking a bit like this

716
00:24:36,799 --> 00:24:39,679
both are perfectly legit both look

717
00:24:39,679 --> 00:24:42,799
look really relatively

718
00:24:42,799 --> 00:24:44,080
legit because

719
00:24:44,080 --> 00:24:46,799
as as we saw previously everything is

720
00:24:46,799 --> 00:24:50,080
backed uh by a physical dll1 disk

721
00:24:50,080 --> 00:24:51,760
and

722
00:24:51,760 --> 00:24:53,200
if we compare that to classical

723
00:24:53,200 --> 00:24:56,000
injection uh we we have a very similar

724
00:24:56,000 --> 00:24:57,760
process so

725
00:24:57,760 --> 00:25:00,159
steps are uh we allocate some so our

726
00:25:00,159 --> 00:25:02,080
process allocates some space in the

727
00:25:02,080 --> 00:25:03,919
process of for choosing let's say

728
00:25:03,919 --> 00:25:05,440
notepad

729
00:25:05,440 --> 00:25:07,039
uh the

730
00:25:07,039 --> 00:25:09,039
then it writes the shock code there and

731
00:25:09,039 --> 00:25:10,960
finally it creates a thread that runs

732
00:25:10,960 --> 00:25:12,559
our shell code

733
00:25:12,559 --> 00:25:14,480
here we can see the execution and

734
00:25:14,480 --> 00:25:17,200
message box popping up but

735
00:25:17,200 --> 00:25:19,760
when we actually check the

736
00:25:19,760 --> 00:25:21,360
memory and threads we see something

737
00:25:21,360 --> 00:25:23,919
different so

738
00:25:23,919 --> 00:25:25,279
we have a new

739
00:25:25,279 --> 00:25:27,760
uh read execute region which is not

740
00:25:27,760 --> 00:25:29,520
backed by anything

741
00:25:29,520 --> 00:25:31,279
and in case of a message box shock code

742
00:25:31,279 --> 00:25:32,640
it's

743
00:25:32,640 --> 00:25:34,480
it's relatively small

744
00:25:34,480 --> 00:25:36,799
so even some memory scanners are going

745
00:25:36,799 --> 00:25:37,600
to

746
00:25:37,600 --> 00:25:41,279
miss it but in cases of actual c2

747
00:25:41,279 --> 00:25:42,320
shell shellcode

748
00:25:42,320 --> 00:25:44,080
these sections would be larger and will

749
00:25:44,080 --> 00:25:46,640
definitely stand more out

750
00:25:46,640 --> 00:25:49,600
and also um

751
00:25:49,600 --> 00:25:52,320
looking at the the whole thread stack

752
00:25:52,320 --> 00:25:54,080
we can see it's our thread stack is

753
00:25:54,080 --> 00:25:55,600
pointing to uh

754
00:25:55,600 --> 00:25:57,279
somewhere

755
00:25:57,279 --> 00:25:59,360
in that memory region so we know it's

756
00:25:59,360 --> 00:26:00,640
it's going to lead us to our shell code

757
00:26:00,640 --> 00:26:01,840
eventually

758
00:26:01,840 --> 00:26:03,919
and what's more interesting is this the

759
00:26:03,919 --> 00:26:05,679
start address in this case is pointing

760
00:26:05,679 --> 00:26:07,600
to

761
00:26:07,600 --> 00:26:10,320
the address of the rt rtl user thread

762
00:26:10,320 --> 00:26:12,480
start function that's implemented in

763
00:26:12,480 --> 00:26:14,320
anti-dll

764
00:26:14,320 --> 00:26:16,799
this is a solid indicator that the

765
00:26:16,799 --> 00:26:18,320
thread was actually created from a

766
00:26:18,320 --> 00:26:20,480
remote process and

767
00:26:20,480 --> 00:26:21,520
lately

768
00:26:21,520 --> 00:26:23,200
i noticed that there are some there are

769
00:26:23,200 --> 00:26:24,799
some edr's that are actually picking up

770
00:26:24,799 --> 00:26:25,919
on it so

771
00:26:25,919 --> 00:26:27,760
they're not complaining about writing to

772
00:26:27,760 --> 00:26:29,360
a remote process they're not complaining

773
00:26:29,360 --> 00:26:31,440
about memory allocation

774
00:26:31,440 --> 00:26:32,799
but um

775
00:26:32,799 --> 00:26:34,559
they're very very loud when we actually

776
00:26:34,559 --> 00:26:36,320
try to create a thread that's gonna run

777
00:26:36,320 --> 00:26:39,840
the run the shot code

778
00:26:39,919 --> 00:26:40,799
um

779
00:26:40,799 --> 00:26:42,559
yeah and that kind of

780
00:26:42,559 --> 00:26:44,400
to compare and summarize that

781
00:26:44,400 --> 00:26:46,799
in case of dll proxy we can

782
00:26:46,799 --> 00:26:48,400
everything is happening locally within

783
00:26:48,400 --> 00:26:51,120
the process we can even avoid some

784
00:26:51,120 --> 00:26:53,120
some api calls like allocation and

785
00:26:53,120 --> 00:26:54,799
writing

786
00:26:54,799 --> 00:26:56,880
will have a executable memory that's

787
00:26:56,880 --> 00:26:59,679
backed by something on disk

788
00:26:59,679 --> 00:27:01,760
and that's that looks pretty legit

789
00:27:01,760 --> 00:27:04,080
and yeah try this created locally

790
00:27:04,080 --> 00:27:05,840
compared to classical injection we have

791
00:27:05,840 --> 00:27:08,240
process a injecting into process b

792
00:27:08,240 --> 00:27:11,840
writing allocating so a memory section

793
00:27:11,840 --> 00:27:13,279
that's used to

794
00:27:13,279 --> 00:27:14,880
receive the short code from our process

795
00:27:14,880 --> 00:27:15,760
a

796
00:27:15,760 --> 00:27:16,799
can be

797
00:27:16,799 --> 00:27:18,640
read execute or read write execute and

798
00:27:18,640 --> 00:27:20,240
if we don't apply some module stomping

799
00:27:20,240 --> 00:27:22,720
it's going to be

800
00:27:22,799 --> 00:27:24,080
it's going to be not backed by anything

801
00:27:24,080 --> 00:27:27,039
on this can it's going to stick out

802
00:27:27,039 --> 00:27:30,159
and finally process if we're not using

803
00:27:30,159 --> 00:27:32,799
some other technique like tread hijack

804
00:27:32,799 --> 00:27:34,960
or a

805
00:27:34,960 --> 00:27:37,840
apc interaction or something like that

806
00:27:37,840 --> 00:27:39,279
the thread that's running the shockwave

807
00:27:39,279 --> 00:27:41,840
is is going to be notice noticeable it's

808
00:27:41,840 --> 00:27:45,520
created from a remote process

809
00:27:45,520 --> 00:27:47,360
and all these indicators kind of led us

810
00:27:47,360 --> 00:27:49,600
to detections

811
00:27:49,600 --> 00:27:50,799
there are many things that can be

812
00:27:50,799 --> 00:27:53,279
combined to write relatively robust and

813
00:27:53,279 --> 00:27:54,559
uh

814
00:27:54,559 --> 00:27:56,480
precise detections and avoid the number

815
00:27:56,480 --> 00:27:58,799
of false positives but i'm gonna try to

816
00:27:58,799 --> 00:28:00,799
stick to only two things that are in my

817
00:28:00,799 --> 00:28:03,279
opinion mostly important to

818
00:28:03,279 --> 00:28:06,240
relevant to dll hijacking and proxy

819
00:28:06,240 --> 00:28:08,480
and not other behaviors that would

820
00:28:08,480 --> 00:28:10,960
result as a exploitation of this let's

821
00:28:10,960 --> 00:28:12,080
say issue

822
00:28:12,080 --> 00:28:13,840
and the first one is obviously file

823
00:28:13,840 --> 00:28:15,440
writing so

824
00:28:15,440 --> 00:28:17,279
the core initializing the attacker's

825
00:28:17,279 --> 00:28:19,039
ability to

826
00:28:19,039 --> 00:28:21,120
actually write a

827
00:28:21,120 --> 00:28:22,640
module to a place where the location

828
00:28:22,640 --> 00:28:24,960
will load it from where the application

829
00:28:24,960 --> 00:28:26,240
will load it from

830
00:28:26,240 --> 00:28:27,760
and

831
00:28:27,760 --> 00:28:28,799
so

832
00:28:28,799 --> 00:28:30,640
we can use data from

833
00:28:30,640 --> 00:28:33,120
proc one in this case

834
00:28:33,120 --> 00:28:36,000
to create a alert that would basically

835
00:28:36,000 --> 00:28:38,240
trigger if a module of a specific name

836
00:28:38,240 --> 00:28:40,799
is written to uh

837
00:28:40,799 --> 00:28:43,360
to a specific location in this case the

838
00:28:43,360 --> 00:28:45,919
signal application uh folder

839
00:28:45,919 --> 00:28:48,320
uh we can also because we know that

840
00:28:48,320 --> 00:28:50,000
eventually signal will find the module

841
00:28:50,000 --> 00:28:51,520
it needs we can also just create a

842
00:28:51,520 --> 00:28:54,080
comparison uh basically like a list of

843
00:28:54,080 --> 00:28:57,440
names from sysfos64 or system32

844
00:28:57,440 --> 00:28:59,200
and cross reference that list of names

845
00:28:59,200 --> 00:29:01,440
with the names of the modules written if

846
00:29:01,440 --> 00:29:04,480
we have a match we alert on that that's

847
00:29:04,480 --> 00:29:06,320
that's definitely far from bulletproof

848
00:29:06,320 --> 00:29:08,320
and

849
00:29:08,320 --> 00:29:10,240
something that can be circumated by

850
00:29:10,240 --> 00:29:12,960
breaking some more steps but

851
00:29:12,960 --> 00:29:14,240
it's it's a good start it gives us

852
00:29:14,240 --> 00:29:16,240
something to monitor

853
00:29:16,240 --> 00:29:17,840
uh and look for

854
00:29:17,840 --> 00:29:20,320
and the second thing is uh the exports

855
00:29:20,320 --> 00:29:23,360
are stable of the

856
00:29:23,360 --> 00:29:26,240
of the module itself so one quick look

857
00:29:26,240 --> 00:29:28,080
at it and we'll basically know

858
00:29:28,080 --> 00:29:29,200
everything we need to know about the

859
00:29:29,200 --> 00:29:32,240
module in case of proxy proxy dlls for

860
00:29:32,240 --> 00:29:33,600
the upper one

861
00:29:33,600 --> 00:29:35,440
we can see that all functions are

862
00:29:35,440 --> 00:29:38,799
forwarded somewhere else to

863
00:29:38,799 --> 00:29:41,279
in this case to version that system

864
00:29:41,279 --> 00:29:44,159
system 32 in case of legit modules most

865
00:29:44,159 --> 00:29:46,000
of the functions will have their rbas or

866
00:29:46,000 --> 00:29:47,760
their physical addresses

867
00:29:47,760 --> 00:29:50,559
and only a handful like one or two maybe

868
00:29:50,559 --> 00:29:52,240
will be forwarded to another module

869
00:29:52,240 --> 00:29:55,840
usually in the same directory

870
00:29:57,200 --> 00:29:59,760
and that brings us to the disappearing

871
00:29:59,760 --> 00:30:01,760
proxy which is

872
00:30:01,760 --> 00:30:03,360
just a

873
00:30:03,360 --> 00:30:08,439
very very basic use of dll main

874
00:30:17,279 --> 00:30:19,279
okay

875
00:30:19,279 --> 00:30:22,919
it's not really

876
00:30:27,919 --> 00:30:30,159
so

877
00:30:32,640 --> 00:30:34,559
the font is definitely not not ideal

878
00:30:34,559 --> 00:30:35,600
here but

879
00:30:35,600 --> 00:30:37,279
i'll be uploading this somewhere so if

880
00:30:37,279 --> 00:30:40,000
anybody's interested they can see it

881
00:30:40,000 --> 00:30:42,240
the setup here is as follows we

882
00:30:42,240 --> 00:30:44,320
basically have a

883
00:30:44,320 --> 00:30:46,640
have our proxy deal written in

884
00:30:46,640 --> 00:30:51,279
signal directory we named it version dll

885
00:30:51,279 --> 00:30:52,399
we are

886
00:30:52,399 --> 00:30:53,919
at this point

887
00:30:53,919 --> 00:30:54,960
running in

888
00:30:54,960 --> 00:30:57,919
medium integrity

889
00:30:57,919 --> 00:31:00,159
and

890
00:31:01,279 --> 00:31:03,440
we also have an up-to-date defender

891
00:31:03,440 --> 00:31:04,640
so

892
00:31:04,640 --> 00:31:08,159
everything is on no no explosions and

893
00:31:08,159 --> 00:31:10,000
automatic sample submission it doesn't

894
00:31:10,000 --> 00:31:12,000
really matter because this whole

895
00:31:12,000 --> 00:31:14,080
environment is in inland so it doesn't

896
00:31:14,080 --> 00:31:15,760
really matter but that's how you keep

897
00:31:15,760 --> 00:31:18,559
the environment for testing

898
00:31:18,559 --> 00:31:20,480
from the attacker side we're serving the

899
00:31:20,480 --> 00:31:22,399
d-protect dll

900
00:31:22,399 --> 00:31:25,440
which is essentially a module that has a

901
00:31:25,440 --> 00:31:28,480
cobble strike shell code hosted in it

902
00:31:28,480 --> 00:31:30,640
and

903
00:31:31,120 --> 00:31:33,840
we also

904
00:31:33,840 --> 00:31:36,640
we also have a cobblestrike server

905
00:31:36,640 --> 00:31:39,600
with zero callbacks at this point

906
00:31:39,600 --> 00:31:41,919
so if we go back to the victim victim

907
00:31:41,919 --> 00:31:42,960
machine and

908
00:31:42,960 --> 00:31:45,600
we try running signal

909
00:31:45,600 --> 00:31:47,279
it will it will fail

910
00:31:47,279 --> 00:31:48,720
and

911
00:31:48,720 --> 00:31:51,600
uh it will fail because the service we

912
00:31:51,600 --> 00:31:54,080
need in this case web web service is not

913
00:31:54,080 --> 00:31:55,919
really running

914
00:31:55,919 --> 00:31:58,159
um and instead of elevating privileges

915
00:31:58,159 --> 00:31:59,679
and moving to

916
00:31:59,679 --> 00:32:02,159
generating more events uh

917
00:32:02,159 --> 00:32:03,919
i basically just use this this handy

918
00:32:03,919 --> 00:32:06,000
trick uh one liner to actually push

919
00:32:06,000 --> 00:32:07,440
start the

920
00:32:07,440 --> 00:32:10,000
the web web service and

921
00:32:10,000 --> 00:32:12,159
as you can see the web client service is

922
00:32:12,159 --> 00:32:14,720
now running so

923
00:32:14,720 --> 00:32:16,960
we should be successful and at this

924
00:32:16,960 --> 00:32:19,200
point uh keep an eye out on version dll

925
00:32:19,200 --> 00:32:21,120
so what happens when it's actually

926
00:32:21,120 --> 00:32:22,480
loaded

927
00:32:22,480 --> 00:32:26,000
when it's when a signal runs so

928
00:32:26,000 --> 00:32:27,440
and it's gone

929
00:32:27,440 --> 00:32:29,840
um

930
00:32:29,840 --> 00:32:31,279
we go back to our

931
00:32:31,279 --> 00:32:33,840
attacker host we see some webdav traffic

932
00:32:33,840 --> 00:32:35,519
and the deep protect was actually

933
00:32:35,519 --> 00:32:36,640
retrieved

934
00:32:36,640 --> 00:32:38,960
and we see a callback from uh

935
00:32:38,960 --> 00:32:40,159
overstrike

936
00:32:40,159 --> 00:32:44,720
which is a pretty good thing

937
00:32:44,720 --> 00:32:46,880
if you're a teamer um

938
00:32:46,880 --> 00:32:48,640
actually we uh we i'm gonna run some

939
00:32:48,640 --> 00:32:50,320
commands here just to actually prove

940
00:32:50,320 --> 00:32:52,240
that we can execute some uh some code on

941
00:32:52,240 --> 00:32:54,840
the on the endpoint

942
00:32:54,840 --> 00:32:56,720
and

943
00:32:56,720 --> 00:32:58,799
we'll go quickly back to process hacker

944
00:32:58,799 --> 00:33:02,559
to inspect the load modules in signal

945
00:33:02,559 --> 00:33:04,880
we're interested in in two modules

946
00:33:04,880 --> 00:33:07,279
actually three but two in this case uh

947
00:33:07,279 --> 00:33:09,519
the first one is d protect and it's

948
00:33:09,519 --> 00:33:11,519
actually loaded from a remote share as

949
00:33:11,519 --> 00:33:12,720
we can see here

950
00:33:12,720 --> 00:33:14,240
um

951
00:33:14,240 --> 00:33:15,840
it's clearly shown

952
00:33:15,840 --> 00:33:18,159
and the second one so the

953
00:33:18,159 --> 00:33:20,320
version dll

954
00:33:20,320 --> 00:33:22,880
we only have one version dll

955
00:33:22,880 --> 00:33:25,279
and it's from

956
00:33:25,279 --> 00:33:27,600
system 32

957
00:33:27,600 --> 00:33:29,440
so

958
00:33:29,440 --> 00:33:30,960
what kind of happened what happened with

959
00:33:30,960 --> 00:33:32,080
our

960
00:33:32,080 --> 00:33:33,679
module

961
00:33:33,679 --> 00:33:36,240
any guesses

962
00:33:37,279 --> 00:33:39,200
it just basically

963
00:33:39,200 --> 00:33:44,240
renamed itself at runtime to mcdla

964
00:33:45,440 --> 00:33:47,200
and yeah we can see here that it's

965
00:33:47,200 --> 00:33:49,600
actually

966
00:33:49,600 --> 00:33:52,720
the masquerade module loaded from the

967
00:33:52,720 --> 00:33:55,519
absolute when we exit a signal

968
00:33:55,519 --> 00:33:56,640
gracefully

969
00:33:56,640 --> 00:33:58,480
so without any forcing the

970
00:33:58,480 --> 00:34:01,039
mz will return itself to version dll in

971
00:34:01,039 --> 00:34:03,120
this case

972
00:34:03,120 --> 00:34:05,840
and yeah we have the

973
00:34:05,840 --> 00:34:07,039
execution

974
00:34:07,039 --> 00:34:08,320
so

975
00:34:08,320 --> 00:34:11,359
going back to the slides

976
00:34:13,359 --> 00:34:16,159
the disappearing proxy is

977
00:34:16,159 --> 00:34:18,079
essentially nothing more than one one

978
00:34:18,079 --> 00:34:22,719
api call just just in the right place

979
00:34:22,719 --> 00:34:24,639
it's a it's a move file call basically

980
00:34:24,639 --> 00:34:25,520
we are

981
00:34:25,520 --> 00:34:27,760
providing a full path to our module

982
00:34:27,760 --> 00:34:30,719
and we're naming it to mcdl and

983
00:34:30,719 --> 00:34:32,839
it's all wrapped in in switcher and

984
00:34:32,839 --> 00:34:35,280
switchvac so those functions are

985
00:34:35,280 --> 00:34:37,440
basically called in two cases in first

986
00:34:37,440 --> 00:34:39,679
case the switcher so the

987
00:34:39,679 --> 00:34:42,639
renaming from version dll to mcdl

988
00:34:42,639 --> 00:34:43,440
is

989
00:34:43,440 --> 00:34:45,918
called when the proxy dll is actually

990
00:34:45,918 --> 00:34:48,480
loaded so that when the signal starts

991
00:34:48,480 --> 00:34:50,480
and loads version dll

992
00:34:50,480 --> 00:34:53,679
and the switchback is called uh in case

993
00:34:53,679 --> 00:34:56,320
when the dll is unloaded from memory i

994
00:34:56,320 --> 00:34:58,400
also implemented a very quick and dirty

995
00:34:58,400 --> 00:35:00,240
cleanup

996
00:35:00,240 --> 00:35:02,240
really bad practice but for my purposes

997
00:35:02,240 --> 00:35:04,640
uh it did the job basically we just

998
00:35:04,640 --> 00:35:07,359
clean up the tfs stuff directory uh we

999
00:35:07,359 --> 00:35:09,760
remove all the dlls from uh

1000
00:35:09,760 --> 00:35:11,200
from there

1001
00:35:11,200 --> 00:35:13,520
that would be cached

1002
00:35:13,520 --> 00:35:14,720
and

1003
00:35:14,720 --> 00:35:18,919
i guess that's all for me

