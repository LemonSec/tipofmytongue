1
00:00:01,850 --> 00:00:07,039
[Music]

2
00:00:07,040 --> 00:00:09,679
all right so good morning zivkon today's

3
00:00:09,679 --> 00:00:11,599
presentation is i can see an apple

4
00:00:11,599 --> 00:00:13,679
behind your windows read the mink

5
00:00:13,679 --> 00:00:16,160
markers environments

6
00:00:16,160 --> 00:00:18,720
my name is wojciech regua and i'm a head

7
00:00:18,720 --> 00:00:21,600
of mobile security at securing i'm

8
00:00:21,600 --> 00:00:24,000
mostly focused on ios and mac os

9
00:00:24,000 --> 00:00:26,080
application security

10
00:00:26,080 --> 00:00:28,640
i also run a blog in my free time

11
00:00:28,640 --> 00:00:30,720
that's of course about apple security so

12
00:00:30,720 --> 00:00:33,680
if you like to read some more about it

13
00:00:33,680 --> 00:00:35,360
feel free to visit it the link is on the

14
00:00:35,360 --> 00:00:36,880
slide

15
00:00:36,880 --> 00:00:39,120
somebody of you may also know me from

16
00:00:39,120 --> 00:00:42,399
ios security suite that i'm an author of

17
00:00:42,399 --> 00:00:45,120
ios security suite is a free

18
00:00:45,120 --> 00:00:48,160
swift open source library uh that helps

19
00:00:48,160 --> 00:00:50,960
you making sure that your application

20
00:00:50,960 --> 00:00:55,039
is run on a secure iphone or ipad um and

21
00:00:55,039 --> 00:00:57,840
recently like for for one year uh we've

22
00:00:57,840 --> 00:01:00,000
started in securing a new service that

23
00:01:00,000 --> 00:01:02,160
is a macos environment security

24
00:01:02,160 --> 00:01:04,000
verification

25
00:01:04,000 --> 00:01:05,438
and on the right of the slide you can

26
00:01:05,438 --> 00:01:08,799
see uh the pres the the conferences that

27
00:01:08,799 --> 00:01:09,439
i

28
00:01:09,439 --> 00:01:10,840
attended in the

29
00:01:10,840 --> 00:01:12,400
past

30
00:01:12,400 --> 00:01:14,080
all right so

31
00:01:14,080 --> 00:01:16,320
when i was creating this talk i had an

32
00:01:16,320 --> 00:01:19,119
idea uh in my mind to provide a

33
00:01:19,119 --> 00:01:21,119
presentation about marcus red teaming

34
00:01:21,119 --> 00:01:23,200
that is like a typical rhetoric

35
00:01:23,200 --> 00:01:26,400
presentation i'd like after this talk uh

36
00:01:26,400 --> 00:01:28,000
to have in in

37
00:01:28,000 --> 00:01:31,040
your minds uh a feeling that oh

38
00:01:31,040 --> 00:01:33,360
that's the very same attack scenarios

39
00:01:33,360 --> 00:01:36,079
that are present on windows but they

40
00:01:36,079 --> 00:01:38,640
also work on macs so that was the the

41
00:01:38,640 --> 00:01:42,159
main idea that i'd like to to

42
00:01:42,159 --> 00:01:45,040
incept to your minds right uh so we'll

43
00:01:45,040 --> 00:01:48,240
start from uh introduction um

44
00:01:48,240 --> 00:01:50,560
and then we're gonna compare a max in

45
00:01:50,560 --> 00:01:53,280
corporate environments

46
00:01:53,280 --> 00:01:55,439
then i will share uh my thoughts on

47
00:01:55,439 --> 00:01:58,640
mythic uh that's a c2 framework for for

48
00:01:58,640 --> 00:02:02,399
for mostly for macs um and when we will

49
00:02:02,399 --> 00:02:04,240
have everything set our environment will

50
00:02:04,240 --> 00:02:06,840
be set up uh we'll start from initial

51
00:02:06,840 --> 00:02:09,919
access then persistence

52
00:02:09,919 --> 00:02:11,680
and when we when we have the persistence

53
00:02:11,680 --> 00:02:13,440
like standard data collection lateral

54
00:02:13,440 --> 00:02:14,480
movement

55
00:02:14,480 --> 00:02:17,200
and because i don't like given talks

56
00:02:17,200 --> 00:02:19,350
without recommendations in the end

57
00:02:19,350 --> 00:02:20,640
[Music]

58
00:02:20,640 --> 00:02:23,040
i'll give you some some ideas on how to

59
00:02:23,040 --> 00:02:26,720
harden your markus environments

60
00:02:26,720 --> 00:02:28,959
all right i i know it's hard after after

61
00:02:28,959 --> 00:02:30,480
the after party

62
00:02:30,480 --> 00:02:31,200
but

63
00:02:31,200 --> 00:02:33,760
i i will um

64
00:02:33,760 --> 00:02:36,879
i'll try to to move your hands

65
00:02:36,879 --> 00:02:39,440
so so the first question uh raise your

66
00:02:39,440 --> 00:02:42,080
hands if there is at least one mark in

67
00:02:42,080 --> 00:02:44,879
your companies

68
00:02:45,200 --> 00:02:47,760
oh i would say like 70 that's that's

69
00:02:47,760 --> 00:02:50,640
good

70
00:02:50,640 --> 00:02:53,920
and the and the second question uh

71
00:02:53,920 --> 00:02:55,440
raise your hand again

72
00:02:55,440 --> 00:02:57,200
if those macs

73
00:02:57,200 --> 00:03:00,080
have access to your company's resources

74
00:03:00,080 --> 00:03:04,200
like other windows machines

75
00:03:04,879 --> 00:03:06,080
okay that's

76
00:03:06,080 --> 00:03:08,159
i would say like ev everybody who rolls

77
00:03:08,159 --> 00:03:10,400
the their hand in the first question

78
00:03:10,400 --> 00:03:11,920
raised their hand in the second question

79
00:03:11,920 --> 00:03:14,400
right something that's

80
00:03:14,400 --> 00:03:16,720
uh it only proves that

81
00:03:16,720 --> 00:03:19,760
this stock was was correct in in the

82
00:03:19,760 --> 00:03:22,879
assumption in the assumptions um so why

83
00:03:22,879 --> 00:03:26,159
did i decide to to make this talk

84
00:03:26,159 --> 00:03:28,879
because marks are getting more common in

85
00:03:28,879 --> 00:03:31,760
corporate environments

86
00:03:31,760 --> 00:03:33,840
developers use them

87
00:03:33,840 --> 00:03:39,519
ux guys designers uh managers etc uh

88
00:03:39,519 --> 00:03:42,239
there are companies uh like software

89
00:03:42,239 --> 00:03:45,440
houses or i.t companies in in general

90
00:03:45,440 --> 00:03:48,480
that have a large percentage of macs in

91
00:03:48,480 --> 00:03:50,480
their environments

92
00:03:50,480 --> 00:03:53,280
and and the problem is that those macs

93
00:03:53,280 --> 00:03:56,159
are usually not symmetrically secured

94
00:03:56,159 --> 00:04:00,080
compared to um to windows machines right

95
00:04:00,080 --> 00:04:01,439
so

96
00:04:01,439 --> 00:04:02,720
we probably

97
00:04:02,720 --> 00:04:05,060
if you have max in your company

98
00:04:05,060 --> 00:04:06,959
[Music]

99
00:04:06,959 --> 00:04:08,959
you probably know that that you know

100
00:04:08,959 --> 00:04:11,120
that but there are sometimes people that

101
00:04:11,120 --> 00:04:13,280
tell me

102
00:04:13,280 --> 00:04:16,320
i work in a huge bank we don't have macs

103
00:04:16,320 --> 00:04:18,880
and i say okay but do you have a ios

104
00:04:18,880 --> 00:04:21,358
application for example a mobile banking

105
00:04:21,358 --> 00:04:23,280
application and they say yes we have we

106
00:04:23,280 --> 00:04:24,639
do have that

107
00:04:24,639 --> 00:04:27,199
and i asked them all right so how is

108
00:04:27,199 --> 00:04:28,800
this application developed because you

109
00:04:28,800 --> 00:04:30,160
cannot compile

110
00:04:30,160 --> 00:04:33,360
an ios application on on on windows so

111
00:04:33,360 --> 00:04:35,840
probably somewhere in the infrastructure

112
00:04:35,840 --> 00:04:36,639
the

113
00:04:36,639 --> 00:04:38,400
you have macs and you probably even

114
00:04:38,400 --> 00:04:40,960
don't know it about it

115
00:04:40,960 --> 00:04:44,080
and if you have macs in in that company

116
00:04:44,080 --> 00:04:47,040
are they symmetrically secured uh are

117
00:04:47,040 --> 00:04:48,560
they bound to the id

118
00:04:48,560 --> 00:04:50,320
um

119
00:04:50,320 --> 00:04:53,520
is stock monitoring those macs so

120
00:04:53,520 --> 00:04:56,400
they are usually a blind spot that's

121
00:04:56,400 --> 00:04:59,199
that's why i decided to make this stock

122
00:04:59,199 --> 00:05:01,039
and what are the

123
00:05:01,039 --> 00:05:03,840
what are the main problems that

124
00:05:03,840 --> 00:05:06,000
we determined after

125
00:05:06,000 --> 00:05:08,320
investigating some macos environments in

126
00:05:08,320 --> 00:05:09,919
huge companies

127
00:05:09,919 --> 00:05:13,120
so there were old and vulnerable markers

128
00:05:13,120 --> 00:05:16,320
versions like everywhere

129
00:05:16,320 --> 00:05:20,400
i even met recently a mac that was not

130
00:05:20,400 --> 00:05:22,080
updated for

131
00:05:22,080 --> 00:05:24,800
four years and it was used by a person

132
00:05:24,800 --> 00:05:25,680
who

133
00:05:25,680 --> 00:05:27,919
uh was responsible in that company for

134
00:05:27,919 --> 00:05:31,440
making payments to the employees

135
00:05:31,919 --> 00:05:34,240
um yeah the second problem is maca

136
00:05:34,240 --> 00:05:37,039
system firewall

137
00:05:37,039 --> 00:05:39,680
is usually disabled and that's that's

138
00:05:39,680 --> 00:05:41,840
because this uh default configuration

139
00:05:41,840 --> 00:05:44,479
mark so if you buy a brand new mac

140
00:05:44,479 --> 00:05:47,120
you configure it you will you will see

141
00:05:47,120 --> 00:05:50,320
that the firewall is disabled by default

142
00:05:50,320 --> 00:05:52,639
anti-malware uh

143
00:05:52,639 --> 00:05:55,759
oh i can see there is a delay between my

144
00:05:55,759 --> 00:05:57,520
laptop because i'm displaying other

145
00:05:57,520 --> 00:05:59,919
slides

146
00:06:02,000 --> 00:06:03,680
yeah but

147
00:06:03,680 --> 00:06:05,520
i'm on the new slide for like three

148
00:06:05,520 --> 00:06:07,840
minutes

149
00:06:12,639 --> 00:06:15,600
already hacked right

150
00:06:15,919 --> 00:06:19,318
let's try reconnect

151
00:06:23,840 --> 00:06:26,840
so

152
00:06:39,039 --> 00:06:40,639
that's apple magic that's what we call

153
00:06:40,639 --> 00:06:43,880
apple magic

154
00:06:50,160 --> 00:06:53,160
okay

155
00:07:12,479 --> 00:07:14,080
all right so that was the slide that i

156
00:07:14,080 --> 00:07:16,479
was on

157
00:07:17,440 --> 00:07:20,080
so yeah i i stopped on talking about

158
00:07:20,080 --> 00:07:22,960
malware so do even mac have viruses yes

159
00:07:22,960 --> 00:07:24,000
they have

160
00:07:24,000 --> 00:07:26,000
and there are a lot of types of malware

161
00:07:26,000 --> 00:07:28,720
on macos even we have our run somewhere

162
00:07:28,720 --> 00:07:32,319
so yeah there is malware on max

163
00:07:32,400 --> 00:07:34,960
standard users working on administrative

164
00:07:34,960 --> 00:07:36,720
accounts that was everywhere because

165
00:07:36,720 --> 00:07:38,479
that's again the default configuration

166
00:07:38,479 --> 00:07:40,160
if you create a new user it

167
00:07:40,160 --> 00:07:42,319
automatically becomes an admin

168
00:07:42,319 --> 00:07:44,560
uh not even saying about

169
00:07:44,560 --> 00:07:46,800
application white listing

170
00:07:46,800 --> 00:07:48,160
and uh

171
00:07:48,160 --> 00:07:49,919
one of the worst things

172
00:07:49,919 --> 00:07:52,080
uh in

173
00:07:52,080 --> 00:07:55,039
small and mid-sized companies uh those

174
00:07:55,039 --> 00:07:59,440
mugs were not even enrolled to mdm so

175
00:07:59,440 --> 00:08:02,240
the users could apply any policies they

176
00:08:02,240 --> 00:08:04,879
wanted to

177
00:08:05,280 --> 00:08:06,960
all right so now

178
00:08:06,960 --> 00:08:09,199
let's compare

179
00:08:09,199 --> 00:08:12,479
macos environments so typically

180
00:08:12,479 --> 00:08:13,759
we have uh

181
00:08:13,759 --> 00:08:15,840
windows most most mostly windows

182
00:08:15,840 --> 00:08:17,120
environments

183
00:08:17,120 --> 00:08:19,039
when all the computers are bound to the

184
00:08:19,039 --> 00:08:20,080
id

185
00:08:20,080 --> 00:08:23,280
and there are macs that also could be

186
00:08:23,280 --> 00:08:25,199
bound to the d because there are native

187
00:08:25,199 --> 00:08:27,840
mechanisms in in mac os that allow doing

188
00:08:27,840 --> 00:08:30,080
that however for example if you bound

189
00:08:30,080 --> 00:08:32,479
your max to ad

190
00:08:32,479 --> 00:08:34,719
you cannot enforce for example gpos that

191
00:08:34,719 --> 00:08:37,200
are crucial right for for for

192
00:08:37,200 --> 00:08:40,000
laptop management

193
00:08:40,000 --> 00:08:44,000
the second situation uh that's the

194
00:08:44,000 --> 00:08:45,680
more common situation than that than the

195
00:08:45,680 --> 00:08:49,200
first one is that you have a d in your

196
00:08:49,200 --> 00:08:51,440
infrastructure um

197
00:08:51,440 --> 00:08:53,200
however those marks are not directly

198
00:08:53,200 --> 00:08:54,800
banned with it

199
00:08:54,800 --> 00:08:56,720
but you still want to use kerberos for

200
00:08:56,720 --> 00:08:58,160
example

201
00:08:58,160 --> 00:09:01,200
so there is a neat plugin called nomad

202
00:09:01,200 --> 00:09:03,360
that handles the kerberos so that's the

203
00:09:03,360 --> 00:09:05,279
that's the second

204
00:09:05,279 --> 00:09:07,279
type of environment of macos

205
00:09:07,279 --> 00:09:08,480
environments

206
00:09:08,480 --> 00:09:10,720
and uh and the third one and the last

207
00:09:10,720 --> 00:09:13,120
one that i'm going to talk about uh is

208
00:09:13,120 --> 00:09:15,760
the situation where there is no ide uh

209
00:09:15,760 --> 00:09:17,920
we have for example a software house

210
00:09:17,920 --> 00:09:19,279
that that

211
00:09:19,279 --> 00:09:22,160
this is a relatively new company and

212
00:09:22,160 --> 00:09:23,839
they they wanted to build their

213
00:09:23,839 --> 00:09:25,920
infrastructure without ad

214
00:09:25,920 --> 00:09:27,120
so they

215
00:09:27,120 --> 00:09:29,120
they have all the services in the cloud

216
00:09:29,120 --> 00:09:31,200
and they use sso like for example octa

217
00:09:31,200 --> 00:09:34,240
so there is no no ad band

218
00:09:34,240 --> 00:09:37,120
okay so with having those three um

219
00:09:37,120 --> 00:09:40,080
setups in mind uh let's take a look on

220
00:09:40,080 --> 00:09:41,839
the target because as i told you at the

221
00:09:41,839 --> 00:09:44,320
beginning uh i wanted to

222
00:09:44,320 --> 00:09:46,320
give you a presentation that is like

223
00:09:46,320 --> 00:09:49,200
typical retuning presentation uh we

224
00:09:49,200 --> 00:09:51,600
we're gonna go from zero to hero so

225
00:09:51,600 --> 00:09:54,480
we're gonna hack this um this kind of

226
00:09:54,480 --> 00:09:56,399
infrastructure so we have a mac

227
00:09:56,399 --> 00:10:00,880
uh that via openvpn connects to uh

228
00:10:00,880 --> 00:10:03,760
to the company's intranet and gets

229
00:10:03,760 --> 00:10:06,000
access to active directory because of

230
00:10:06,000 --> 00:10:08,640
the active directory uh it connects to

231
00:10:08,640 --> 00:10:11,839
active directory federational services

232
00:10:11,839 --> 00:10:14,640
that what provides sso and in the end

233
00:10:14,640 --> 00:10:17,440
the uh the person that uses that mac has

234
00:10:17,440 --> 00:10:20,880
access to jira or google workspace

235
00:10:20,880 --> 00:10:22,880
let's imagine that the person that we're

236
00:10:22,880 --> 00:10:24,079
going to hack

237
00:10:24,079 --> 00:10:27,200
uses also aws so there are somewhere on

238
00:10:27,200 --> 00:10:31,279
the mac aws key stored

239
00:10:31,760 --> 00:10:34,880
regarding social media

240
00:10:34,880 --> 00:10:38,320
administrators mostly uh do not hide

241
00:10:38,320 --> 00:10:40,560
them behind the ssl because it's kind of

242
00:10:40,560 --> 00:10:43,120
problematic especially for example if

243
00:10:43,120 --> 00:10:44,959
you use marketing team

244
00:10:44,959 --> 00:10:47,920
if you have a marketing team that mostly

245
00:10:47,920 --> 00:10:51,120
uses their own personal accounts to uh

246
00:10:51,120 --> 00:10:53,040
to manage your company's social media

247
00:10:53,040 --> 00:10:55,200
that's why the social medias are usually

248
00:10:55,200 --> 00:10:57,279
not behind the sso

249
00:10:57,279 --> 00:10:58,240
so

250
00:10:58,240 --> 00:11:00,560
they have like for example firefox that

251
00:11:00,560 --> 00:11:02,720
connects to that social medias

252
00:11:02,720 --> 00:11:06,160
um that company also heard that using

253
00:11:06,160 --> 00:11:09,600
signal is secure uh so for for uh

254
00:11:09,600 --> 00:11:11,440
communication purposes they they use

255
00:11:11,440 --> 00:11:13,040
signal

256
00:11:13,040 --> 00:11:15,120
and there are also some protected

257
00:11:15,120 --> 00:11:18,720
documents in in desktop or or downloads

258
00:11:18,720 --> 00:11:21,040
or documents direct

259
00:11:21,040 --> 00:11:22,560
so we have

260
00:11:22,560 --> 00:11:25,200
this target

261
00:11:25,200 --> 00:11:26,959
um so

262
00:11:26,959 --> 00:11:29,200
if you would like to to start a red

263
00:11:29,200 --> 00:11:32,560
teeming exercise we have to have a

264
00:11:32,560 --> 00:11:35,519
c2 so i really recommend for for macros

265
00:11:35,519 --> 00:11:38,160
redeeming purposes using mythic

266
00:11:38,160 --> 00:11:40,480
that's really great uh created by kodi

267
00:11:40,480 --> 00:11:44,560
thomas it's it's open source

268
00:11:44,560 --> 00:11:47,760
and why i really like mythic is that it

269
00:11:47,760 --> 00:11:50,560
has really extensive docs so like

270
00:11:50,560 --> 00:11:52,800
everything he in the the method provides

271
00:11:52,800 --> 00:11:54,720
you can read about it on the on the

272
00:11:54,720 --> 00:11:56,480
internet in the docs watch is really

273
00:11:56,480 --> 00:11:58,480
great

274
00:11:58,480 --> 00:12:02,079
so let's take a look at demo

275
00:12:02,800 --> 00:12:05,760
that's a default configuration of methic

276
00:12:05,760 --> 00:12:09,120
so we log into operator

277
00:12:09,760 --> 00:12:14,160
we're going to use upfell a standard jxa

278
00:12:14,160 --> 00:12:16,560
payload and for the communication with

279
00:12:16,560 --> 00:12:18,720
the c2 we're going to use

280
00:12:18,720 --> 00:12:22,320
standard unencrypted http but also mavic

281
00:12:22,320 --> 00:12:25,200
provides https of course websockets etc

282
00:12:25,200 --> 00:12:27,920
i just wanted to keep it simple

283
00:12:27,920 --> 00:12:30,800
so we are creating a new payload uh we

284
00:12:30,800 --> 00:12:33,440
use we're going to use upfill

285
00:12:33,440 --> 00:12:36,079
we include all the commands to have

286
00:12:36,079 --> 00:12:38,160
all the features that it provides we're

287
00:12:38,160 --> 00:12:39,839
gonna as i told you

288
00:12:39,839 --> 00:12:44,079
we're gonna connect via the http

289
00:12:44,800 --> 00:12:48,160
we set our ip address

290
00:12:51,040 --> 00:12:53,120
and we create next

291
00:12:53,120 --> 00:12:53,920
week

292
00:12:53,920 --> 00:12:55,920
we have created the payload

293
00:12:55,920 --> 00:12:59,440
and now we can download it

294
00:12:59,440 --> 00:13:00,800
all right but

295
00:13:00,800 --> 00:13:02,959
we we have our payload but then we have

296
00:13:02,959 --> 00:13:05,760
to somehow deliver it right

297
00:13:05,760 --> 00:13:06,720
so

298
00:13:06,720 --> 00:13:10,320
this is where the the problems uh start

299
00:13:10,320 --> 00:13:11,760
so

300
00:13:11,760 --> 00:13:16,160
uh in in in recent years apple wanted to

301
00:13:16,160 --> 00:13:17,600
limit the applications that are

302
00:13:17,600 --> 00:13:20,000
downloaded directly from the internet

303
00:13:20,000 --> 00:13:21,040
because

304
00:13:21,040 --> 00:13:23,440
that was a really easy way to malware to

305
00:13:23,440 --> 00:13:26,480
to infect users um so they started

306
00:13:26,480 --> 00:13:29,120
requiring notarization

307
00:13:29,120 --> 00:13:32,000
and what has to be notarized so mac os

308
00:13:32,000 --> 00:13:34,160
applications bundles like kernel

309
00:13:34,160 --> 00:13:35,519
extensions

310
00:13:35,519 --> 00:13:38,720
desk images or flat installer packages

311
00:13:38,720 --> 00:13:42,720
that was with the extension pkg

312
00:13:42,720 --> 00:13:44,639
and what does it mean

313
00:13:44,639 --> 00:13:47,680
that the software has to be notarized so

314
00:13:47,680 --> 00:13:50,720
notarization is is a is a mechanism

315
00:13:50,720 --> 00:13:53,360
where you have a paid developer account

316
00:13:53,360 --> 00:13:55,360
it's pay developer i can't it's not that

317
00:13:55,360 --> 00:13:57,480
much because it's like um

318
00:13:57,480 --> 00:14:00,320
100 dollars per year

319
00:14:00,320 --> 00:14:02,250
but still you have to pay for it

320
00:14:02,250 --> 00:14:03,760
[Music]

321
00:14:03,760 --> 00:14:05,519
so when you have a paid developer

322
00:14:05,519 --> 00:14:07,920
account uh you create your application

323
00:14:07,920 --> 00:14:10,639
you send it to apple and apple confirms

324
00:14:10,639 --> 00:14:12,480
that this application is free of malware

325
00:14:12,480 --> 00:14:14,560
that's of course an automate it's

326
00:14:14,560 --> 00:14:17,120
automate scan uh be happy behind the

327
00:14:17,120 --> 00:14:20,320
apple's infrastructure so uh you can of

328
00:14:20,320 --> 00:14:23,920
course trick this scans to

329
00:14:23,920 --> 00:14:26,480
to stop all your malware uh but that's

330
00:14:26,480 --> 00:14:29,040
not what we are gonna cover in in this

331
00:14:29,040 --> 00:14:31,519
stock for this talk i just wanted you to

332
00:14:31,519 --> 00:14:33,360
know that there is a notarization

333
00:14:33,360 --> 00:14:35,760
mechanism so if you want to

334
00:14:35,760 --> 00:14:38,959
uh create a dropper uh and if and you

335
00:14:38,959 --> 00:14:41,120
want to do it in legitimate way let's

336
00:14:41,120 --> 00:14:44,560
say it has to be notarized so it will be

337
00:14:44,560 --> 00:14:46,320
sent to apple and verified against

338
00:14:46,320 --> 00:14:48,800
malware

339
00:14:48,880 --> 00:14:50,720
and what happens if you don't do not

340
00:14:50,720 --> 00:14:53,680
notarize your your application so when

341
00:14:53,680 --> 00:14:54,959
the user

342
00:14:54,959 --> 00:14:56,959
double clicks on the application right

343
00:14:56,959 --> 00:14:59,040
after it's downloaded from the internet

344
00:14:59,040 --> 00:15:01,600
uh there will be a prompt that the

345
00:15:01,600 --> 00:15:03,199
application cannot be opened because the

346
00:15:03,199 --> 00:15:05,839
developer cannot be verified so mac os

347
00:15:05,839 --> 00:15:08,639
will simply block it so without

348
00:15:08,639 --> 00:15:10,880
the developer certificate you are

349
00:15:10,880 --> 00:15:15,040
not able to deliver a legitimate payload

350
00:15:15,440 --> 00:15:18,399
however there are some solutions

351
00:15:18,399 --> 00:15:20,720
so the first one is of course delivering

352
00:15:20,720 --> 00:15:21,600
a

353
00:15:21,600 --> 00:15:23,199
package file

354
00:15:23,199 --> 00:15:24,839
that is

355
00:15:24,839 --> 00:15:27,440
notarized however we risk our

356
00:15:27,440 --> 00:15:29,920
certificate being revoked by apple right

357
00:15:29,920 --> 00:15:33,519
so in in red teaming we we don't want to

358
00:15:33,519 --> 00:15:37,279
risk it and there are services that

359
00:15:37,279 --> 00:15:39,440
use stolen

360
00:15:39,440 --> 00:15:41,920
developer certificates for that purposes

361
00:15:41,920 --> 00:15:42,800
but

362
00:15:42,800 --> 00:15:44,959
yeah if you do internal red teaming you

363
00:15:44,959 --> 00:15:47,120
probably do not want to use stolen

364
00:15:47,120 --> 00:15:49,519
certificates right

365
00:15:49,519 --> 00:15:50,639
so

366
00:15:50,639 --> 00:15:53,199
the first the first idea

367
00:15:53,199 --> 00:15:54,399
the second idea

368
00:15:54,399 --> 00:15:58,560
is a technique commonly used by malware

369
00:15:58,560 --> 00:16:01,040
so this these two screenshots are from

370
00:16:01,040 --> 00:16:04,800
real malware um and what it does

371
00:16:04,800 --> 00:16:06,399
it's it's

372
00:16:06,399 --> 00:16:09,199
delivering the the dropper inside of the

373
00:16:09,199 --> 00:16:10,720
dmg file

374
00:16:10,720 --> 00:16:13,680
the dmg file doesn't have to be

375
00:16:13,680 --> 00:16:16,320
signed doesn't have to be notarized so

376
00:16:16,320 --> 00:16:18,720
the only thing that has to be notarized

377
00:16:18,720 --> 00:16:21,519
uh is the application

378
00:16:21,519 --> 00:16:24,480
that's it's inside of the dmg

379
00:16:24,480 --> 00:16:28,000
but the big plus of delivering dmg

380
00:16:28,000 --> 00:16:30,880
is that you can set a custom background

381
00:16:30,880 --> 00:16:31,839
which is

382
00:16:31,839 --> 00:16:33,519
which is a png

383
00:16:33,519 --> 00:16:34,560
image

384
00:16:34,560 --> 00:16:37,199
and this png image as you can see

385
00:16:37,199 --> 00:16:40,320
provides an instruction to victims

386
00:16:40,320 --> 00:16:41,040
so

387
00:16:41,040 --> 00:16:43,040
in the first part there is a dmg with

388
00:16:43,040 --> 00:16:45,440
the unsigned package file

389
00:16:45,440 --> 00:16:47,680
and on the right you can see that

390
00:16:47,680 --> 00:16:50,079
there's an instruction to right click on

391
00:16:50,079 --> 00:16:52,480
that and press open and that's the

392
00:16:52,480 --> 00:16:54,880
mechanism that bypasses notarization

393
00:16:54,880 --> 00:16:56,480
requirements

394
00:16:56,480 --> 00:16:58,880
there will be additional prompt

395
00:16:58,880 --> 00:17:00,480
that this application has been

396
00:17:00,480 --> 00:17:02,720
downloaded from the internet and cannot

397
00:17:02,720 --> 00:17:05,520
be verified so you make the user accept

398
00:17:05,520 --> 00:17:08,000
the risk of getting infected but come on

399
00:17:08,000 --> 00:17:10,000
when you're doing red teaming you know

400
00:17:10,000 --> 00:17:13,359
that this prompt doesn't work right

401
00:17:15,520 --> 00:17:19,199
okay so there is also a third way

402
00:17:19,199 --> 00:17:21,280
but it requires us

403
00:17:21,280 --> 00:17:23,760
from us having a zero day so so the

404
00:17:23,760 --> 00:17:26,079
mechanism that verifies the notarization

405
00:17:26,079 --> 00:17:28,319
on the user's end

406
00:17:28,319 --> 00:17:30,480
it's called gatekeeper

407
00:17:30,480 --> 00:17:32,480
there are of course zero days for that

408
00:17:32,480 --> 00:17:34,960
i've even found one as you can see on

409
00:17:34,960 --> 00:17:38,000
the slide however it still uh requires

410
00:17:38,000 --> 00:17:41,440
having having you it requires having a

411
00:17:41,440 --> 00:17:44,000
zero day

412
00:17:44,080 --> 00:17:45,840
and then and the

413
00:17:45,840 --> 00:17:47,679
last way that that i'm gonna share

414
00:17:47,679 --> 00:17:49,840
during this talk is infection via

415
00:17:49,840 --> 00:17:52,720
microsoft office macro and that's what

416
00:17:52,720 --> 00:17:57,120
you are probably uh used to um

417
00:17:57,120 --> 00:17:57,919
so

418
00:17:57,919 --> 00:17:59,440
on mac os

419
00:17:59,440 --> 00:18:02,480
that there are white listed extensions

420
00:18:02,480 --> 00:18:04,000
that doesn't have to be notarized

421
00:18:04,000 --> 00:18:05,840
because you know it would be really dumb

422
00:18:05,840 --> 00:18:07,360
if you download for example a picture

423
00:18:07,360 --> 00:18:09,280
from the internet you double click on it

424
00:18:09,280 --> 00:18:11,760
and you have a prompt oh this this

425
00:18:11,760 --> 00:18:13,760
picture has not been inside by the real

426
00:18:13,760 --> 00:18:15,280
developer right so it would be really

427
00:18:15,280 --> 00:18:17,520
dumb so there is a white list that

428
00:18:17,520 --> 00:18:20,000
bypasses the gatekeeper requirements and

429
00:18:20,000 --> 00:18:23,600
one of these examples is is docs file so

430
00:18:23,600 --> 00:18:26,559
you deliver a word document with macro

431
00:18:26,559 --> 00:18:28,320
you double click on it and there will be

432
00:18:28,320 --> 00:18:31,360
no gatekeeper bypass however

433
00:18:31,360 --> 00:18:34,240
it's not that easy

434
00:18:34,480 --> 00:18:38,400
so how does it look like from the

435
00:18:38,400 --> 00:18:40,400
from the inside

436
00:18:40,400 --> 00:18:42,480
so on macos we have a visual basic

437
00:18:42,480 --> 00:18:45,120
subroutine that's called auto open so

438
00:18:45,120 --> 00:18:50,240
right after user accepts macros on uh

439
00:18:50,240 --> 00:18:52,000
in the document that i that they are

440
00:18:52,000 --> 00:18:55,039
about to open uh this macro is being

441
00:18:55,039 --> 00:18:57,760
automatically called

442
00:18:57,760 --> 00:18:59,600
and usually

443
00:18:59,600 --> 00:19:02,160
we use maxscript function and what

444
00:19:02,160 --> 00:19:05,840
maxscript does is uh spawning a shell

445
00:19:05,840 --> 00:19:09,120
like bash or zsh

446
00:19:09,120 --> 00:19:13,039
so in in this example uh we download uh

447
00:19:13,039 --> 00:19:15,760
from our c2 server the the payload the

448
00:19:15,760 --> 00:19:17,919
app file js uh

449
00:19:17,919 --> 00:19:20,000
we use h mode on it

450
00:19:20,000 --> 00:19:22,240
and with oscript with specifying

451
00:19:22,240 --> 00:19:24,480
language to javascript we

452
00:19:24,480 --> 00:19:26,640
we run this totally not a virus

453
00:19:26,640 --> 00:19:29,600
javascript file

454
00:19:30,240 --> 00:19:32,400
but that's not the end of the of the

455
00:19:32,400 --> 00:19:34,400
macro story

456
00:19:34,400 --> 00:19:35,200
as

457
00:19:35,200 --> 00:19:38,480
microsoft word on mac os is sandboxed

458
00:19:38,480 --> 00:19:39,679
so we

459
00:19:39,679 --> 00:19:42,559
get a code execution on macs that

460
00:19:42,559 --> 00:19:44,480
doesn't have to be notarized so you

461
00:19:44,480 --> 00:19:47,679
don't have to send this payload to apple

462
00:19:47,679 --> 00:19:48,799
however

463
00:19:48,799 --> 00:19:50,799
yeah this is this is sunbox code

464
00:19:50,799 --> 00:19:54,000
execution so this is not what we'd like

465
00:19:54,000 --> 00:19:55,520
to have right because we don't have

466
00:19:55,520 --> 00:19:58,640
still access to users directories

467
00:19:58,640 --> 00:20:02,159
which is which is not really good for us

468
00:20:02,159 --> 00:20:05,360
but there is a there is a bypass for it

469
00:20:05,360 --> 00:20:07,360
uh matka bad shared a really cool

470
00:20:07,360 --> 00:20:10,320
technique that

471
00:20:10,320 --> 00:20:12,080
that makes you able to escape the word

472
00:20:12,080 --> 00:20:14,960
sandbox however it requires you to

473
00:20:14,960 --> 00:20:17,520
reboot the machine your machine so you

474
00:20:17,520 --> 00:20:19,440
infect the user

475
00:20:19,440 --> 00:20:21,360
you create a

476
00:20:21,360 --> 00:20:24,080
let's say a sandbox escape you you you

477
00:20:24,080 --> 00:20:26,320
start to persist on that machine but

478
00:20:26,320 --> 00:20:29,600
this unsung box code won't be executed

479
00:20:29,600 --> 00:20:32,400
until the user reboots the mac so

480
00:20:32,400 --> 00:20:35,120
you know it's from there from one side

481
00:20:35,120 --> 00:20:37,280
it's good but from the other side we

482
00:20:37,280 --> 00:20:39,360
usually during red team they don't have

483
00:20:39,360 --> 00:20:41,600
time to uh to wait for the user to

484
00:20:41,600 --> 00:20:44,480
reboot their max right but

485
00:20:44,480 --> 00:20:45,679
i don't know

486
00:20:45,679 --> 00:20:46,720
what was the last thing when you

487
00:20:46,720 --> 00:20:48,640
rebooted your mac

488
00:20:48,640 --> 00:20:51,840
i do it only when i update my my

489
00:20:51,840 --> 00:20:55,120
computer is that also your case

490
00:20:55,120 --> 00:20:57,680
yeah so that's

491
00:20:57,680 --> 00:20:59,039
[Music]

492
00:20:59,039 --> 00:21:02,640
useless mostly that this bypass rain

493
00:21:02,640 --> 00:21:05,919
maybe if if your company has automated

494
00:21:05,919 --> 00:21:07,919
update process and you know that

495
00:21:07,919 --> 00:21:11,440
there will be an update uh with what

496
00:21:11,440 --> 00:21:14,480
which will be forced by by gps or or

497
00:21:14,480 --> 00:21:16,720
other policies and right before the

498
00:21:16,720 --> 00:21:18,799
update you you start infecting users

499
00:21:18,799 --> 00:21:21,360
maybe that makes sense but

500
00:21:21,360 --> 00:21:23,440
in general it doesn't

501
00:21:23,440 --> 00:21:26,720
however we have our own zero days

502
00:21:26,720 --> 00:21:27,919
so

503
00:21:27,919 --> 00:21:29,840
during this talk i will present a demo

504
00:21:29,840 --> 00:21:31,200
of my marcus sandbox escape

505
00:21:31,200 --> 00:21:32,960
vulnerability

506
00:21:32,960 --> 00:21:35,360
unfortunately it's still a zero day

507
00:21:35,360 --> 00:21:38,080
apple didn't fix it on time so

508
00:21:38,080 --> 00:21:42,158
i'm sorry without code just the demo

509
00:21:43,280 --> 00:21:47,280
so here we have the uh the document file

510
00:21:47,280 --> 00:21:50,000
that that's a regular uh file downloaded

511
00:21:50,000 --> 00:21:52,320
from the internet regular uh word file

512
00:21:52,320 --> 00:21:53,840
download from the internet with this

513
00:21:53,840 --> 00:21:56,640
with this macro um

514
00:21:56,640 --> 00:21:57,440
so

515
00:21:57,440 --> 00:22:00,000
let's the demo start

516
00:22:00,000 --> 00:22:02,159
the user double clicks on it

517
00:22:02,159 --> 00:22:03,840
it has to

518
00:22:03,840 --> 00:22:05,440
enable macros

519
00:22:05,440 --> 00:22:07,360
as you can see the terminal will spawn

520
00:22:07,360 --> 00:22:09,600
if we do of course don't don't need to

521
00:22:09,600 --> 00:22:11,919
spawn it but i wanted to show you that

522
00:22:11,919 --> 00:22:14,000
it worked

523
00:22:14,000 --> 00:22:15,360
and

524
00:22:15,360 --> 00:22:16,640
as we

525
00:22:16,640 --> 00:22:19,120
have the code execution

526
00:22:19,120 --> 00:22:21,440
let's check if it's really on sandbox so

527
00:22:21,440 --> 00:22:23,520
we verify the user it

528
00:22:23,520 --> 00:22:26,159
runs with my user's permissions

529
00:22:26,159 --> 00:22:29,919
and i think we just spawn shell here

530
00:22:29,919 --> 00:22:32,960
and then we use ls to to list current

531
00:22:32,960 --> 00:22:35,360
users

532
00:22:35,840 --> 00:22:38,879
let's wait a while

533
00:22:39,039 --> 00:22:40,960
so yeah uh

534
00:22:40,960 --> 00:22:43,440
our infected machine responded with two

535
00:22:43,440 --> 00:22:46,080
users what means that we have our code

536
00:22:46,080 --> 00:22:47,840
on some box because we were able to list

537
00:22:47,840 --> 00:22:50,799
users right so yeah that was the series

538
00:22:50,799 --> 00:22:55,240
but i'm sorry no details this time

539
00:22:56,000 --> 00:22:58,320
and by the way it's it's not a zero day

540
00:22:58,320 --> 00:22:59,919
only for

541
00:22:59,919 --> 00:23:02,799
microsoft office it's a zero day for

542
00:23:02,799 --> 00:23:05,039
macos unboxing system so it bypasses all

543
00:23:05,039 --> 00:23:09,000
kinds of sandboxes on mac

544
00:23:09,039 --> 00:23:11,440
all right so we have our code

545
00:23:11,440 --> 00:23:14,720
unsung boxed and executed on the victims

546
00:23:14,720 --> 00:23:17,039
machine so now we have to somehow

547
00:23:17,039 --> 00:23:18,320
persist

548
00:23:18,320 --> 00:23:20,400
and there are many techniques like

549
00:23:20,400 --> 00:23:23,760
launch agents launch demons login items

550
00:23:23,760 --> 00:23:26,720
this three are commonly used by malware

551
00:23:26,720 --> 00:23:28,720
cron jobs login logout hooks

552
00:23:28,720 --> 00:23:32,159
authorization plugins but there are

553
00:23:32,159 --> 00:23:34,320
many many more like

554
00:23:34,320 --> 00:23:35,600
30

555
00:23:35,600 --> 00:23:38,480
plus techniques uh and they are

556
00:23:38,480 --> 00:23:40,480
well documented on my friend's chaba's

557
00:23:40,480 --> 00:23:42,799
blog what ling which link you have on in

558
00:23:42,799 --> 00:23:45,440
the end of the slide

559
00:23:45,440 --> 00:23:47,600
all right so now let's try to persist

560
00:23:47,600 --> 00:23:49,760
with mythic

561
00:23:49,760 --> 00:23:52,559
so there's a common persist launch and

562
00:23:52,559 --> 00:23:55,039
we will be creating a launch agent

563
00:23:55,039 --> 00:23:55,919
uh

564
00:23:55,919 --> 00:23:58,559
so again we start with the parameters

565
00:23:58,559 --> 00:24:00,400
that will be passed to to this launch

566
00:24:00,400 --> 00:24:02,960
agent so we want to run other script to

567
00:24:02,960 --> 00:24:04,559
run our

568
00:24:04,559 --> 00:24:06,240
js payload

569
00:24:06,240 --> 00:24:10,000
and we have to somehow point to

570
00:24:10,000 --> 00:24:11,840
to the paint load that was

571
00:24:11,840 --> 00:24:14,799
saved uh we start with daf dot because

572
00:24:14,799 --> 00:24:17,360
on mac it works exactly the same like

573
00:24:17,360 --> 00:24:19,279
like it works on linux so if you start

574
00:24:19,279 --> 00:24:20,480
with dot

575
00:24:20,480 --> 00:24:22,880
that file will be hidden

576
00:24:22,880 --> 00:24:24,960
uh we set a custom label

577
00:24:24,960 --> 00:24:26,960
and

578
00:24:26,960 --> 00:24:28,640
in a while

579
00:24:28,640 --> 00:24:32,520
methic will return

580
00:24:33,440 --> 00:24:34,400
yeah

581
00:24:34,400 --> 00:24:35,760
the result that the file has been

582
00:24:35,760 --> 00:24:37,520
written to to the launch agents

583
00:24:37,520 --> 00:24:39,679
directory okay so we have our launch

584
00:24:39,679 --> 00:24:41,360
agent already there

585
00:24:41,360 --> 00:24:42,720
now we have to

586
00:24:42,720 --> 00:24:45,919
to load it so after user reboots there

587
00:24:45,919 --> 00:24:47,760
the machine or kills the process it will

588
00:24:47,760 --> 00:24:50,080
be automatically spawned

589
00:24:50,080 --> 00:24:52,640
so with launch ctl

590
00:24:52,640 --> 00:24:54,960
load we provide the

591
00:24:54,960 --> 00:24:57,279
path

592
00:24:57,760 --> 00:25:00,400
and in the moment we will see that there

593
00:25:00,400 --> 00:25:01,520
will be

594
00:25:01,520 --> 00:25:03,760
another active callback

595
00:25:03,760 --> 00:25:04,640
yeah

596
00:25:04,640 --> 00:25:06,400
so as you can see we have another active

597
00:25:06,400 --> 00:25:08,880
callback

598
00:25:10,880 --> 00:25:15,120
and recently apple um

599
00:25:15,120 --> 00:25:17,919
pushed their their new mac os

600
00:25:17,919 --> 00:25:19,919
beta which is marcus ventura that will

601
00:25:19,919 --> 00:25:22,480
be available in this fall

602
00:25:22,480 --> 00:25:24,320
and they made some changes to the

603
00:25:24,320 --> 00:25:26,720
operating system and now if you go to

604
00:25:26,720 --> 00:25:29,840
system settings and go to general

605
00:25:29,840 --> 00:25:31,360
you will see

606
00:25:31,360 --> 00:25:33,440
launch agents launch daemons and login

607
00:25:33,440 --> 00:25:36,080
items that are installed on the machine

608
00:25:36,080 --> 00:25:37,919
so this technique the launch agent

609
00:25:37,919 --> 00:25:40,480
technique will become more noisy because

610
00:25:40,480 --> 00:25:42,559
user will be able to not from the

611
00:25:42,559 --> 00:25:44,480
command line but from the user interface

612
00:25:44,480 --> 00:25:47,520
verify what launch agents are registered

613
00:25:47,520 --> 00:25:49,679
so this technique this technique

614
00:25:49,679 --> 00:25:52,320
probably will change in the future

615
00:25:52,320 --> 00:25:54,320
but as i told you there are a lot of

616
00:25:54,320 --> 00:25:56,080
techniques to persist on mac os and

617
00:25:56,080 --> 00:25:58,080
apple covers like for now four

618
00:25:58,080 --> 00:26:00,080
techniques maybe that will be displayed

619
00:26:00,080 --> 00:26:01,520
here so

620
00:26:01,520 --> 00:26:03,440
we have unlimited

621
00:26:03,440 --> 00:26:05,600
method methods

622
00:26:05,600 --> 00:26:08,080
to steal the persistent mac still

623
00:26:08,080 --> 00:26:10,480
all right so we have our unsung box code

624
00:26:10,480 --> 00:26:13,840
execution uh we know that uh

625
00:26:13,840 --> 00:26:15,440
it

626
00:26:15,440 --> 00:26:18,159
the the persistence is provided so let's

627
00:26:18,159 --> 00:26:20,640
get back to to our target because

628
00:26:20,640 --> 00:26:23,760
uh now we wanna attack the the services

629
00:26:23,760 --> 00:26:25,520
installed on the machine

630
00:26:25,520 --> 00:26:28,000
so what we are interested in

631
00:26:28,000 --> 00:26:30,480
uh of course vpn credentials of course

632
00:26:30,480 --> 00:26:33,279
id credentials but also signal messages

633
00:26:33,279 --> 00:26:36,480
browser cookies keychain entries aws and

634
00:26:36,480 --> 00:26:39,840
other cloud keys and desktop document

635
00:26:39,840 --> 00:26:42,240
documents files

636
00:26:42,240 --> 00:26:45,279
let's start from the openvpn

637
00:26:45,279 --> 00:26:47,520
so openvpn

638
00:26:47,520 --> 00:26:50,400
saves its profiles

639
00:26:50,400 --> 00:26:53,440
that you install in it as a flat file

640
00:26:53,440 --> 00:26:58,000
without any additional protections so if

641
00:26:58,000 --> 00:26:59,679
in your profile

642
00:26:59,679 --> 00:27:01,679
there are all the users credentials that

643
00:27:01,679 --> 00:27:04,080
are required to connect to

644
00:27:04,080 --> 00:27:06,480
your internal network

645
00:27:06,480 --> 00:27:07,440
it's

646
00:27:07,440 --> 00:27:08,640
it's over

647
00:27:08,640 --> 00:27:10,559
however it's not a really common case

648
00:27:10,559 --> 00:27:12,400
usually uh the profiles contain

649
00:27:12,400 --> 00:27:16,159
certificates etc but users user has to

650
00:27:16,159 --> 00:27:18,559
log in with their login and passwords or

651
00:27:18,559 --> 00:27:20,399
or something else in

652
00:27:20,399 --> 00:27:23,520
in the prompt that will be

653
00:27:23,520 --> 00:27:26,559
displayed during the the connection

654
00:27:26,559 --> 00:27:27,840
so we have to

655
00:27:27,840 --> 00:27:29,840
um

656
00:27:29,840 --> 00:27:31,600
we have this profile but we also will

657
00:27:31,600 --> 00:27:35,360
need to have the user login and password

658
00:27:35,360 --> 00:27:39,360
um so how to do that with openvpn on mac

659
00:27:39,360 --> 00:27:41,200
as i told you there is an authorization

660
00:27:41,200 --> 00:27:43,840
process so openvpn as it is an

661
00:27:43,840 --> 00:27:45,520
application downloaded from the internet

662
00:27:45,520 --> 00:27:47,440
it has to be notarized

663
00:27:47,440 --> 00:27:49,360
and notarization

664
00:27:49,360 --> 00:27:51,279
requires the of course the anti-malware

665
00:27:51,279 --> 00:27:54,240
checks but also requires the developers

666
00:27:54,240 --> 00:27:56,320
to to harden the runtime of the

667
00:27:56,320 --> 00:27:58,240
application they distribute and

668
00:27:58,240 --> 00:28:00,880
hardening runtime

669
00:28:00,880 --> 00:28:03,840
nowadays

670
00:28:06,159 --> 00:28:07,840
mitigate

671
00:28:07,840 --> 00:28:10,320
code injection vulnerabilities

672
00:28:10,320 --> 00:28:11,600
however

673
00:28:11,600 --> 00:28:14,799
there are special entitlements

674
00:28:14,799 --> 00:28:16,640
that will

675
00:28:16,640 --> 00:28:18,880
make the this hardened run time not

676
00:28:18,880 --> 00:28:20,799
really hardened and the code injection

677
00:28:20,799 --> 00:28:23,840
attacks will be still possible um and

678
00:28:23,840 --> 00:28:27,679
openvpn deliberately like on purpose uh

679
00:28:27,679 --> 00:28:29,360
implements those two variables variable

680
00:28:29,360 --> 00:28:30,240
enviro

681
00:28:30,240 --> 00:28:31,919
this entitlements

682
00:28:31,919 --> 00:28:33,520
and the first one is allow built

683
00:28:33,520 --> 00:28:35,760
environment variables what allows us

684
00:28:35,760 --> 00:28:38,399
performing an attack like ld preload on

685
00:28:38,399 --> 00:28:40,799
linux so we can provide a dynamic

686
00:28:40,799 --> 00:28:42,559
library that will be loaded to the to

687
00:28:42,559 --> 00:28:44,640
the process context and the second one

688
00:28:44,640 --> 00:28:47,120
is disable library validation so this

689
00:28:47,120 --> 00:28:48,799
this library doesn't even have to be

690
00:28:48,799 --> 00:28:53,840
signed so we can inject you to open vpn

691
00:28:56,799 --> 00:29:00,640
so when we can inject to the openvpn you

692
00:29:00,640 --> 00:29:02,399
can for example use my universal

693
00:29:02,399 --> 00:29:04,720
application keylogger

694
00:29:04,720 --> 00:29:07,039
and what's uh what's the idea behind

695
00:29:07,039 --> 00:29:10,159
this universal keylogger is that

696
00:29:10,159 --> 00:29:12,080
generally if you'd like to listen for

697
00:29:12,080 --> 00:29:14,880
keystrokes on mac os you will need a

698
00:29:14,880 --> 00:29:16,880
special permission from the user so you

699
00:29:16,880 --> 00:29:18,480
have to register to listening to all

700
00:29:18,480 --> 00:29:21,520
keystrokes to all application with which

701
00:29:21,520 --> 00:29:23,600
of course has implications on user

702
00:29:23,600 --> 00:29:26,880
security and privacy so apple decided to

703
00:29:26,880 --> 00:29:29,200
make an architectural

704
00:29:29,200 --> 00:29:32,480
decision to when you start listening for

705
00:29:32,480 --> 00:29:34,320
all keystrokes on the machine there will

706
00:29:34,320 --> 00:29:36,080
be a special prompt and you want to

707
00:29:36,080 --> 00:29:37,600
avoid that

708
00:29:37,600 --> 00:29:39,279
so this keylogger what this keylogger

709
00:29:39,279 --> 00:29:41,760
does it's a dynamic library which

710
00:29:41,760 --> 00:29:44,640
injects to a process and it only gets

711
00:29:44,640 --> 00:29:47,120
the keystrokes from the from the openvpn

712
00:29:47,120 --> 00:29:48,880
so there will be no additional prompt

713
00:29:48,880 --> 00:29:50,960
because you know a developer may decide

714
00:29:50,960 --> 00:29:52,960
to to

715
00:29:52,960 --> 00:29:54,559
to get the keystrokes information when

716
00:29:54,559 --> 00:29:56,240
for example they develop a game right

717
00:29:56,240 --> 00:29:57,919
because they they they want to have

718
00:29:57,919 --> 00:30:00,000
control of what keystrokes are are sent

719
00:30:00,000 --> 00:30:02,559
to the application so that that's the

720
00:30:02,559 --> 00:30:04,720
code it's it's publicly available on

721
00:30:04,720 --> 00:30:09,039
github so um feel free to use it so

722
00:30:09,039 --> 00:30:10,559
with this technique

723
00:30:10,559 --> 00:30:12,960
on the first screenshot you can see that

724
00:30:12,960 --> 00:30:15,039
we were able to with the build insert

725
00:30:15,039 --> 00:30:16,240
libraries

726
00:30:16,240 --> 00:30:18,399
we were able to inject to open vpn

727
00:30:18,399 --> 00:30:20,240
without again without any additional

728
00:30:20,240 --> 00:30:23,600
permission no root no anything more

729
00:30:23,600 --> 00:30:25,200
and then in the

730
00:30:25,200 --> 00:30:27,120
on the second screenshot

731
00:30:27,120 --> 00:30:28,000
this disk

732
00:30:28,000 --> 00:30:30,000
keylogger is really simple

733
00:30:30,000 --> 00:30:32,640
it just locks any

734
00:30:32,640 --> 00:30:35,120
any keystroke that was pressed

735
00:30:35,120 --> 00:30:37,200
so as you can see a recorded string

736
00:30:37,200 --> 00:30:38,880
password so we were able without any

737
00:30:38,880 --> 00:30:40,480
additional permission to inject to open

738
00:30:40,480 --> 00:30:42,640
vpn and listen for the user's

739
00:30:42,640 --> 00:30:44,720
credentials

740
00:30:44,720 --> 00:30:46,080
okay so

741
00:30:46,080 --> 00:30:47,440
we have our

742
00:30:47,440 --> 00:30:50,240
we have the access to to the vpn so now

743
00:30:50,240 --> 00:30:52,880
let's focus on on on nomad and active

744
00:30:52,880 --> 00:30:55,039
directory

745
00:30:55,039 --> 00:30:57,120
so nomad

746
00:30:57,120 --> 00:30:58,960
saves your id credentials to macos

747
00:30:58,960 --> 00:31:01,279
keychain which is good that's the

748
00:31:01,279 --> 00:31:03,120
that's the storage developers are

749
00:31:03,120 --> 00:31:05,679
supposed to store their secret in like

750
00:31:05,679 --> 00:31:08,399
on mac os in ios and apple tv and other

751
00:31:08,399 --> 00:31:10,799
apple devices keychain is the is the

752
00:31:10,799 --> 00:31:14,080
place where you want to have your

753
00:31:14,080 --> 00:31:16,840
your credentials your secret data

754
00:31:16,840 --> 00:31:19,600
certain however the the keychain has a

755
00:31:19,600 --> 00:31:21,840
flow and apple knows about it

756
00:31:21,840 --> 00:31:23,919
that allows getting

757
00:31:23,919 --> 00:31:26,159
from it entries without any additional

758
00:31:26,159 --> 00:31:28,000
problem to root access or user's

759
00:31:28,000 --> 00:31:30,880
password and i've even documented it on

760
00:31:30,880 --> 00:31:33,679
my blog so if you are interested in this

761
00:31:33,679 --> 00:31:35,600
topic feel free to

762
00:31:35,600 --> 00:31:37,600
visit the string markers apps kitchen

763
00:31:37,600 --> 00:31:40,159
entries post

764
00:31:40,159 --> 00:31:42,559
and especially for my new markers red

765
00:31:42,559 --> 00:31:45,039
teaming series i've created a nomad

766
00:31:45,039 --> 00:31:46,640
credential steeler tool that is of

767
00:31:46,640 --> 00:31:49,120
course again open source and free to use

768
00:31:49,120 --> 00:31:50,880
which will use this

769
00:31:50,880 --> 00:31:53,840
tricky keychain

770
00:31:53,840 --> 00:31:56,000
flow to

771
00:31:56,000 --> 00:31:58,640
to take the the keychain entries

772
00:31:58,640 --> 00:32:00,640
so in the nomad case

773
00:32:00,640 --> 00:32:03,519
uh the this this entries will be your 80

774
00:32:03,519 --> 00:32:06,159
login and id password so again without

775
00:32:06,159 --> 00:32:08,000
any additional prompt without root

776
00:32:08,000 --> 00:32:10,399
permission you run this tool and if

777
00:32:10,399 --> 00:32:12,559
somebody uses nomad it gets the id

778
00:32:12,559 --> 00:32:14,640
credentials so yeah

779
00:32:14,640 --> 00:32:15,679
we have

780
00:32:15,679 --> 00:32:17,440
access to the openvpn we have our

781
00:32:17,440 --> 00:32:18,799
credentials

782
00:32:18,799 --> 00:32:21,360
and in most cases

783
00:32:21,360 --> 00:32:23,200
in such an infrastructure we will have

784
00:32:23,200 --> 00:32:25,519
access because we have id credentials we

785
00:32:25,519 --> 00:32:26,960
will have access to active directory

786
00:32:26,960 --> 00:32:29,279
federational service federation services

787
00:32:29,279 --> 00:32:32,480
and because it's an sso uh the company's

788
00:32:32,480 --> 00:32:33,840
resources

789
00:32:33,840 --> 00:32:36,960
are now available to us

790
00:32:36,960 --> 00:32:40,080
all right so now let's

791
00:32:40,080 --> 00:32:42,880
let's focus on on

792
00:32:42,880 --> 00:32:45,760
signal messages

793
00:32:46,960 --> 00:32:49,919
is signal secure

794
00:32:50,159 --> 00:32:52,960
that's a question to you

795
00:32:52,960 --> 00:32:54,480
huh

796
00:32:54,480 --> 00:32:57,279
you hope so

797
00:32:57,279 --> 00:32:58,799
i hope so too

798
00:32:58,799 --> 00:33:01,039
but

799
00:33:01,039 --> 00:33:03,600
signal is really good messenger

800
00:33:03,600 --> 00:33:06,480
i personally use it

801
00:33:06,480 --> 00:33:08,080
however

802
00:33:08,080 --> 00:33:11,519
as signal claims they only provide

803
00:33:11,519 --> 00:33:13,440
security for

804
00:33:13,440 --> 00:33:14,159
for

805
00:33:14,159 --> 00:33:15,679
for transit

806
00:33:15,679 --> 00:33:17,840
for transit so they don't care about

807
00:33:17,840 --> 00:33:19,679
your endpoint security

808
00:33:19,679 --> 00:33:20,080
uh

809
00:33:20,080 --> 00:33:21,440
[Music]

810
00:33:21,440 --> 00:33:24,240
however the signal data that

811
00:33:24,240 --> 00:33:27,440
that you add on mac is encrypted

812
00:33:27,440 --> 00:33:29,840
this the the messages are stored in an

813
00:33:29,840 --> 00:33:32,720
sqlite database which is encrypted

814
00:33:32,720 --> 00:33:36,080
however what about the key

815
00:33:36,080 --> 00:33:38,720
the key is start in a flat file that you

816
00:33:38,720 --> 00:33:41,279
can access without again any additional

817
00:33:41,279 --> 00:33:42,480
permissions

818
00:33:42,480 --> 00:33:43,840
so

819
00:33:43,840 --> 00:33:45,679
you take the database

820
00:33:45,679 --> 00:33:48,399
you go to library application support

821
00:33:48,399 --> 00:33:51,840
signal config.json you provide the key

822
00:33:51,840 --> 00:33:54,159
that's marked on the red to the

823
00:33:54,159 --> 00:33:56,320
to the db browser for example and you

824
00:33:56,320 --> 00:33:58,000
have access to all the signal messages

825
00:33:58,000 --> 00:34:02,039
without any additional permission

826
00:34:07,279 --> 00:34:09,119
for other signal implementations i know

827
00:34:09,119 --> 00:34:11,599
that on windows it worked the same i

828
00:34:11,599 --> 00:34:13,839
know i don't know how it works now

829
00:34:13,839 --> 00:34:14,639
uh

830
00:34:14,639 --> 00:34:16,079
so i will repeat the question the

831
00:34:16,079 --> 00:34:19,199
question was if on other platforms

832
00:34:19,199 --> 00:34:21,599
signal works the same

833
00:34:21,599 --> 00:34:24,079
and as far as i know on on windows it

834
00:34:24,079 --> 00:34:25,679
worked the same

835
00:34:25,679 --> 00:34:27,918
and on linux probably also

836
00:34:27,918 --> 00:34:28,719
but

837
00:34:28,719 --> 00:34:31,679
that's a presentation about mac so

838
00:34:31,679 --> 00:34:35,199
on mac it's it's a in flat file

839
00:34:35,199 --> 00:34:37,359
all right so we have access to to the

840
00:34:37,359 --> 00:34:39,520
company's resources we have access to

841
00:34:39,520 --> 00:34:40,800
signal

842
00:34:40,800 --> 00:34:43,119
let's now focus on firefox

843
00:34:43,119 --> 00:34:44,960
so firefox

844
00:34:44,960 --> 00:34:47,760
stores saved logins and passwords in an

845
00:34:47,760 --> 00:34:49,440
encrypted form

846
00:34:49,440 --> 00:34:51,520
so it is encrypted however if master

847
00:34:51,520 --> 00:34:53,280
password is not set and that's the

848
00:34:53,280 --> 00:34:55,280
default configuration

849
00:34:55,280 --> 00:34:57,599
those credentials can be dumped without

850
00:34:57,599 --> 00:35:01,040
root again any additional permissions

851
00:35:01,040 --> 00:35:02,400
and there's even a tool

852
00:35:02,400 --> 00:35:05,119
uh this time not coded by me but by you

853
00:35:05,119 --> 00:35:08,320
note um firefox decrypt it's really

854
00:35:08,320 --> 00:35:09,520
simple

855
00:35:09,520 --> 00:35:12,800
let me show you a demo

856
00:35:13,520 --> 00:35:14,839
so we're on

857
00:35:14,839 --> 00:35:18,240
python we choose the profile that we

858
00:35:18,240 --> 00:35:19,760
want to dump

859
00:35:19,760 --> 00:35:21,839
and yeah all the credentials saved in

860
00:35:21,839 --> 00:35:24,800
the firefox are are dumped without any

861
00:35:24,800 --> 00:35:27,680
additional permission

862
00:35:28,839 --> 00:35:31,200
okay so

863
00:35:31,200 --> 00:35:34,240
that's the situation we have now

864
00:35:34,240 --> 00:35:36,640
and let's go to um

865
00:35:36,640 --> 00:35:40,400
to the tcc so if you have iphones or

866
00:35:40,400 --> 00:35:41,680
macs

867
00:35:41,680 --> 00:35:42,800
and you

868
00:35:42,800 --> 00:35:44,960
install an application a new application

869
00:35:44,960 --> 00:35:47,920
like for example microsoft teams or or a

870
00:35:47,920 --> 00:35:51,839
browser and you join a video call

871
00:35:51,839 --> 00:35:53,440
and at the first time you will see a

872
00:35:53,440 --> 00:35:55,200
prompt that

873
00:35:55,200 --> 00:35:56,800
this application wants to access your

874
00:35:56,800 --> 00:35:58,640
camera and you have to click on that

875
00:35:58,640 --> 00:36:00,720
prompt right to in order to give give

876
00:36:00,720 --> 00:36:03,040
the application access and this this

877
00:36:03,040 --> 00:36:05,760
this mechanism on on mac and ios is

878
00:36:05,760 --> 00:36:07,599
called tcc

879
00:36:07,599 --> 00:36:09,839
so on the screenshot you can see that i

880
00:36:09,839 --> 00:36:11,920
tried to list

881
00:36:11,920 --> 00:36:13,440
address book

882
00:36:13,440 --> 00:36:14,880
from the terminal

883
00:36:14,880 --> 00:36:17,440
and mac has displayed me a prompt

884
00:36:17,440 --> 00:36:19,119
that the terminal would like to access

885
00:36:19,119 --> 00:36:21,680
your contacts and what's really good

886
00:36:21,680 --> 00:36:24,800
about tcc is that apple wanted to make

887
00:36:24,800 --> 00:36:27,040
sure that there is a clear user consent

888
00:36:27,040 --> 00:36:28,960
on doing it

889
00:36:28,960 --> 00:36:32,160
so even if you for example have root

890
00:36:32,160 --> 00:36:34,000
you cannot bypass this prompt because

891
00:36:34,000 --> 00:36:36,240
apple wanted to know that there is user

892
00:36:36,240 --> 00:36:39,040
that clicks on the prompt before

893
00:36:39,040 --> 00:36:42,160
opening your camera

894
00:36:42,320 --> 00:36:43,440
and

895
00:36:43,440 --> 00:36:46,880
each each each mac os huge update apple

896
00:36:46,880 --> 00:36:48,000
adds

897
00:36:48,000 --> 00:36:50,320
new resources that are protected by tcc

898
00:36:50,320 --> 00:36:51,440
so like

899
00:36:51,440 --> 00:36:54,320
desktop documents downloads camera

900
00:36:54,320 --> 00:36:56,560
microphones screen sharing contacts

901
00:36:56,560 --> 00:36:59,359
automation bluetooth photos and a lot of

902
00:36:59,359 --> 00:37:01,520
stuff is now protected by the tcc so

903
00:37:01,520 --> 00:37:03,920
yeah on macas you are not a gut if you

904
00:37:03,920 --> 00:37:07,160
have root

905
00:37:08,480 --> 00:37:11,599
so let's confirm it with mythic so again

906
00:37:11,599 --> 00:37:14,800
let's let's run a shell

907
00:37:15,119 --> 00:37:17,520
and we we're gonna list for example

908
00:37:17,520 --> 00:37:20,079
desktop

909
00:37:21,680 --> 00:37:22,720
we

910
00:37:22,720 --> 00:37:24,079
schedule a task and you will see the

911
00:37:24,079 --> 00:37:25,520
prompt

912
00:37:25,520 --> 00:37:28,079
of your user doesn't allow on it and you

913
00:37:28,079 --> 00:37:30,640
will see that we have an error that

914
00:37:30,640 --> 00:37:33,680
operation is not permitted

915
00:37:35,040 --> 00:37:38,560
um yeah so as i told you um accessing

916
00:37:38,560 --> 00:37:40,720
desktop documents microphone etc and

917
00:37:40,720 --> 00:37:42,480
other sensitive resources will spawn the

918
00:37:42,480 --> 00:37:43,680
prompt

919
00:37:43,680 --> 00:37:45,760
but the good thing is that there are

920
00:37:45,760 --> 00:37:49,599
tons of dcc bypasses and last year

921
00:37:49,599 --> 00:37:51,520
i i was a co-speaking a presentation on

922
00:37:51,520 --> 00:37:53,599
black hat us in las vegas about

923
00:37:53,599 --> 00:37:56,880
bypassing uh macos privacy mechanisms we

924
00:37:56,880 --> 00:38:00,960
found we found like 20 tcc bypasses

925
00:38:00,960 --> 00:38:03,680
uh but yeah still there are they are all

926
00:38:03,680 --> 00:38:06,640
now fixed um apple pays for for for the

927
00:38:06,640 --> 00:38:08,560
tcc bypasses in their back bounty

928
00:38:08,560 --> 00:38:10,400
program so there is a lot of pressure on

929
00:38:10,400 --> 00:38:11,920
securing tcc

930
00:38:11,920 --> 00:38:12,880
um

931
00:38:12,880 --> 00:38:14,640
so you know you can of course find your

932
00:38:14,640 --> 00:38:16,240
own zero day but that's that's kind of

933
00:38:16,240 --> 00:38:18,560
problematic

934
00:38:18,560 --> 00:38:19,520
so

935
00:38:19,520 --> 00:38:21,599
we will find another way which is

936
00:38:21,599 --> 00:38:22,720
abusing

937
00:38:22,720 --> 00:38:25,839
applications that are already installed

938
00:38:25,839 --> 00:38:27,920
on your mac machines

939
00:38:27,920 --> 00:38:30,079
and typically i also made a lot of blog

940
00:38:30,079 --> 00:38:32,160
posts about bypassing tcc but for

941
00:38:32,160 --> 00:38:34,720
example most electron applications are

942
00:38:34,720 --> 00:38:36,079
now

943
00:38:36,079 --> 00:38:38,800
vulnerable to

944
00:38:38,800 --> 00:38:41,200
to code injections and those because we

945
00:38:41,200 --> 00:38:43,760
will be executing code in the electron

946
00:38:43,760 --> 00:38:45,839
apps context

947
00:38:45,839 --> 00:38:47,520
we will have all the permissions that

948
00:38:47,520 --> 00:38:48,800
were already granted to those

949
00:38:48,800 --> 00:38:50,720
applications so for example let's

950
00:38:50,720 --> 00:38:53,280
imagine you want to access a camera on

951
00:38:53,280 --> 00:38:55,119
your victim's machine

952
00:38:55,119 --> 00:38:56,640
and that victim

953
00:38:56,640 --> 00:38:59,839
uses in their company microsoft teams so

954
00:38:59,839 --> 00:39:02,800
we can expect that those microsoft teams

955
00:39:02,800 --> 00:39:04,800
have

956
00:39:04,800 --> 00:39:08,400
uh have the camera screen sharing and

957
00:39:08,400 --> 00:39:10,880
recording already already granted right

958
00:39:10,880 --> 00:39:12,720
so we can inject to microsoft teams and

959
00:39:12,720 --> 00:39:16,000
use its permissions to bypass the tc

960
00:39:16,000 --> 00:39:19,520
however there is even more uh the there

961
00:39:19,520 --> 00:39:21,520
is even a better trick

962
00:39:21,520 --> 00:39:23,520
that works in

963
00:39:23,520 --> 00:39:25,680
marcus environments

964
00:39:25,680 --> 00:39:28,160
because macs are usually

965
00:39:28,160 --> 00:39:31,760
managed via the ssh and because the ssh

966
00:39:31,760 --> 00:39:35,040
is used for administrative purposes uh

967
00:39:35,040 --> 00:39:37,680
the the remote login usually on those

968
00:39:37,680 --> 00:39:40,400
macs have the allow full disk access for

969
00:39:40,400 --> 00:39:43,040
remote users i will show it to you

970
00:39:43,040 --> 00:39:45,440
so that's that's the that's the problem

971
00:39:45,440 --> 00:39:47,200
that that's the checkbox that is usually

972
00:39:47,200 --> 00:39:49,760
checked on on the mac os

973
00:39:49,760 --> 00:39:52,480
machines in huge companies environments

974
00:39:52,480 --> 00:39:54,400
and if the

975
00:39:54,400 --> 00:39:56,880
shell has full disk access it means that

976
00:39:56,880 --> 00:39:58,720
the administrator because it's an

977
00:39:58,720 --> 00:40:02,400
administrator right can do like

978
00:40:02,400 --> 00:40:05,119
almost everything on on the mac machines

979
00:40:05,119 --> 00:40:07,280
um what's really interesting

980
00:40:07,280 --> 00:40:09,040
like there is no tcc when you have full

981
00:40:09,040 --> 00:40:11,839
risk actors this shell can can access

982
00:40:11,839 --> 00:40:14,560
your desktop spawn a camera etc etc

983
00:40:14,560 --> 00:40:16,960
without any additional prompt

984
00:40:16,960 --> 00:40:19,760
but yeah that's for administrators right

985
00:40:19,760 --> 00:40:21,200
however

986
00:40:21,200 --> 00:40:23,359
there's a trick

987
00:40:23,359 --> 00:40:25,520
let's imagine that we don't have user's

988
00:40:25,520 --> 00:40:27,040
password to

989
00:40:27,040 --> 00:40:27,760
uh

990
00:40:27,760 --> 00:40:30,400
to the victim's machine we have only the

991
00:40:30,400 --> 00:40:31,839
code execution that sends boss

992
00:40:31,839 --> 00:40:33,680
unsunboxed we have the persistence

993
00:40:33,680 --> 00:40:36,400
already uh achieved but we want to

994
00:40:36,400 --> 00:40:38,400
access that that ssh

995
00:40:38,400 --> 00:40:40,319
how we can do this

996
00:40:40,319 --> 00:40:43,359
do you have any idea

997
00:40:45,839 --> 00:40:47,119
once again

998
00:40:47,119 --> 00:40:48,560
drop us a stage

999
00:40:48,560 --> 00:40:50,480
that's that's a good idea however there

1000
00:40:50,480 --> 00:40:53,040
will be another ssh that will be not the

1001
00:40:53,040 --> 00:40:55,040
system ssh so with the full disk access

1002
00:40:55,040 --> 00:40:59,119
for that ssh will not be granted

1003
00:40:59,440 --> 00:41:01,440
yes yes yes

1004
00:41:01,440 --> 00:41:02,880
yeah so

1005
00:41:02,880 --> 00:41:05,680
when we are when we are user

1006
00:41:05,680 --> 00:41:08,240
we can add our own key to authorized

1007
00:41:08,240 --> 00:41:10,800
keys right to the ssh authorized keys

1008
00:41:10,800 --> 00:41:13,760
and ssh to localhost without providing a

1009
00:41:13,760 --> 00:41:15,200
password

1010
00:41:15,200 --> 00:41:18,560
so let me show you a demo

1011
00:41:18,560 --> 00:41:21,200
so yeah we go to desktop the operation

1012
00:41:21,200 --> 00:41:25,200
is not permitted because of the tcc

1013
00:41:25,680 --> 00:41:28,480
however let's let's create our own ssh

1014
00:41:28,480 --> 00:41:29,359
keygen

1015
00:41:29,359 --> 00:41:33,799
our as our own ssh key

1016
00:41:39,520 --> 00:41:42,640
as you can see we provide empty password

1017
00:41:42,640 --> 00:41:45,119
passphrase

1018
00:41:45,119 --> 00:41:47,520
then we copy the the id

1019
00:41:47,520 --> 00:41:49,520
that we've created

1020
00:41:49,520 --> 00:41:52,640
to the autorescues

1021
00:41:53,359 --> 00:41:57,279
we set up the permissions of it

1022
00:41:58,720 --> 00:42:03,520
and now using ssh and the users account

1023
00:42:03,520 --> 00:42:06,880
we ssh localhost

1024
00:42:10,319 --> 00:42:12,880
all right so we have the ssh

1025
00:42:12,880 --> 00:42:14,319
session

1026
00:42:14,319 --> 00:42:17,520
and now if you go to desktop

1027
00:42:17,520 --> 00:42:19,680
you will see that we can access it

1028
00:42:19,680 --> 00:42:22,560
without raising tcc because of the

1029
00:42:22,560 --> 00:42:26,078
of the full disk access permission

1030
00:42:27,760 --> 00:42:30,640
that is for administrative purposes

1031
00:42:30,640 --> 00:42:32,079
all right so

1032
00:42:32,079 --> 00:42:33,839
we bypassed the tcc

1033
00:42:33,839 --> 00:42:38,319
um but what about the ssh keys aws azure

1034
00:42:38,319 --> 00:42:40,720
google cloud credentials etc

1035
00:42:40,720 --> 00:42:43,520
that's a another good news for you

1036
00:42:43,520 --> 00:42:44,480
there are

1037
00:42:44,480 --> 00:42:47,040
by default stored in in home directory

1038
00:42:47,040 --> 00:42:49,760
which is not protected by the tcc so you

1039
00:42:49,760 --> 00:42:52,960
don't even have to care about it

1040
00:42:53,359 --> 00:42:54,560
all right so

1041
00:42:54,560 --> 00:42:56,880
that was the last step and we have taken

1042
00:42:56,880 --> 00:43:01,680
over the uh the the macas machine

1043
00:43:03,119 --> 00:43:05,440
and because i don't want to leave you

1044
00:43:05,440 --> 00:43:08,000
without any recommendations uh there are

1045
00:43:08,000 --> 00:43:09,359
six that

1046
00:43:09,359 --> 00:43:11,520
i know that that implementing all those

1047
00:43:11,520 --> 00:43:13,680
these mechanisms is a process but there

1048
00:43:13,680 --> 00:43:15,440
are the six points that you at least

1049
00:43:15,440 --> 00:43:18,079
have to implement in the infrastructures

1050
00:43:18,079 --> 00:43:20,480
so the first one i know they're really

1051
00:43:20,480 --> 00:43:23,280
obvious but i i repeated

1052
00:43:23,280 --> 00:43:25,280
every every talk about market security

1053
00:43:25,280 --> 00:43:29,599
so and enroll your max uh to mdm you you

1054
00:43:29,599 --> 00:43:30,520
need to

1055
00:43:30,520 --> 00:43:33,839
centralizedly uh manage those macs right

1056
00:43:33,839 --> 00:43:36,160
keep them updated as you can see macs

1057
00:43:36,160 --> 00:43:38,560
have zero days have vulnerabilities you

1058
00:43:38,560 --> 00:43:41,520
have to update your max enforce policies

1059
00:43:41,520 --> 00:43:43,520
like system integrity protection for

1060
00:43:43,520 --> 00:43:44,880
example without system integrity

1061
00:43:44,880 --> 00:43:47,359
protection uh you can elevate your

1062
00:43:47,359 --> 00:43:50,000
privileges to root uh you can bypass the

1063
00:43:50,000 --> 00:43:52,640
tcc or maybe not even maybe not even

1064
00:43:52,640 --> 00:43:55,760
bypass because if sip is disabled

1065
00:43:55,760 --> 00:43:59,119
there is even no tcc the tcc is disabled

1066
00:43:59,119 --> 00:44:01,040
too as well uh

1067
00:44:01,040 --> 00:44:04,000
enforce firewall gatekeeper which makes

1068
00:44:04,000 --> 00:44:05,520
sure that all the applications are

1069
00:44:05,520 --> 00:44:08,079
notorious before before opening file

1070
00:44:08,079 --> 00:44:09,599
vault which is responsible for

1071
00:44:09,599 --> 00:44:12,720
encryption etc etc

1072
00:44:12,720 --> 00:44:15,760
i bet that nowadays in when you have a

1073
00:44:15,760 --> 00:44:17,760
mac os environment

1074
00:44:17,760 --> 00:44:21,599
people do not use word macros mostly

1075
00:44:21,599 --> 00:44:23,520
because they are quite limited comparing

1076
00:44:23,520 --> 00:44:26,079
to to windows macros so

1077
00:44:26,079 --> 00:44:27,119
if your

1078
00:44:27,119 --> 00:44:29,680
company doesn't use macros on macs you

1079
00:44:29,680 --> 00:44:32,240
can disable it globally

1080
00:44:32,240 --> 00:44:34,640
install an antimatter solution optimal

1081
00:44:34,640 --> 00:44:37,359
resolution because as you as as you can

1082
00:44:37,359 --> 00:44:38,160
see

1083
00:44:38,160 --> 00:44:40,800
as as you could see during the dock uh

1084
00:44:40,800 --> 00:44:44,000
there is malware for max and because of

1085
00:44:44,000 --> 00:44:47,040
the zero days monitor your mac machines

1086
00:44:47,040 --> 00:44:49,920
um they are not 100 secure if you follow

1087
00:44:49,920 --> 00:44:52,400
the first five steps

1088
00:44:52,400 --> 00:44:55,440
and if you'd like to uh to verify your

1089
00:44:55,440 --> 00:44:57,680
mac os environment security or do a red

1090
00:44:57,680 --> 00:45:00,800
teaming scenarios in your infrastructure

1091
00:45:00,800 --> 00:45:02,000
uh

1092
00:45:02,000 --> 00:45:05,119
uh you can hire us to do that

1093
00:45:05,119 --> 00:45:06,560
all right so

1094
00:45:06,560 --> 00:45:09,839
summing up that will be the the quickest

1095
00:45:09,839 --> 00:45:11,760
sum up ever

1096
00:45:11,760 --> 00:45:13,359
max like other

1097
00:45:13,359 --> 00:45:15,359
machines can be infected if you have

1098
00:45:15,359 --> 00:45:17,599
macs in your machine if you have mac

1099
00:45:17,599 --> 00:45:19,440
machines in your environment

1100
00:45:19,440 --> 00:45:22,000
don't make them a blind spot

1101
00:45:22,000 --> 00:45:23,760
not seen by your socks

1102
00:45:23,760 --> 00:45:27,240
thank you very much

