1
00:00:01,850 --> 00:00:07,439
[Music]

2
00:00:07,440 --> 00:00:10,559
thank you all for coming

3
00:00:10,960 --> 00:00:13,200
in this presentation i'd like to take

4
00:00:13,200 --> 00:00:15,280
you on a journey to explore some

5
00:00:15,280 --> 00:00:18,480
uncharted legacy features of excel

6
00:00:18,480 --> 00:00:20,640
that resulted in a vulnerability that

7
00:00:20,640 --> 00:00:22,160
allows an attacker

8
00:00:22,160 --> 00:00:25,519
to craft a signed phishing payload

9
00:00:25,519 --> 00:00:28,000
this payload would result

10
00:00:28,000 --> 00:00:28,800
in

11
00:00:28,800 --> 00:00:31,679
the user seeing a legitimate microsoft

12
00:00:31,679 --> 00:00:33,680
signed document

13
00:00:33,680 --> 00:00:37,760
or no security warning at all

14
00:00:37,760 --> 00:00:39,440
we're going to see that it is possible

15
00:00:39,440 --> 00:00:42,399
to inject code into a microsoft document

16
00:00:42,399 --> 00:00:45,120
without invalidating the signature and

17
00:00:45,120 --> 00:00:47,360
thus effectively reusing

18
00:00:47,360 --> 00:00:49,360
this microsoft sign document as if the

19
00:00:49,360 --> 00:00:50,399
code

20
00:00:50,399 --> 00:00:53,199
as if code signing

21
00:00:53,199 --> 00:00:55,760
microsoft assigned a cve for it in the

22
00:00:55,760 --> 00:00:58,559
category remote code execution

23
00:00:58,559 --> 00:01:01,280
but before diving into the content

24
00:01:01,280 --> 00:01:04,800
first a quick introduction

25
00:01:05,040 --> 00:01:07,040
my name is diema von nawau

26
00:01:07,040 --> 00:01:09,520
i'm a red teamer and offensive developer

27
00:01:09,520 --> 00:01:11,600
at outflank

28
00:01:11,600 --> 00:01:13,439
i really like to

29
00:01:13,439 --> 00:01:16,400
develop things that break things and

30
00:01:16,400 --> 00:01:19,280
then using them in operations

31
00:01:19,280 --> 00:01:21,280
at outflank we're specialized in red

32
00:01:21,280 --> 00:01:22,400
teaming

33
00:01:22,400 --> 00:01:24,240
giving trainings and offensive security

34
00:01:24,240 --> 00:01:25,280
tooling

35
00:01:25,280 --> 00:01:28,240
and we also put stuff on our github and

36
00:01:28,240 --> 00:01:31,040
perform research for instance in the ca

37
00:01:31,040 --> 00:01:32,560
in the fields

38
00:01:32,560 --> 00:01:33,520
of

39
00:01:33,520 --> 00:01:34,640
fishing

40
00:01:34,640 --> 00:01:37,200
and office

41
00:01:37,200 --> 00:01:40,320
this inspires me to start my own journey

42
00:01:40,320 --> 00:01:41,600
into this

43
00:01:41,600 --> 00:01:44,000
field

44
00:01:46,560 --> 00:01:48,320
i'd like to start this presentation with

45
00:01:48,320 --> 00:01:49,520
a little bit more background on the

46
00:01:49,520 --> 00:01:54,000
journey then some background on office

47
00:01:54,000 --> 00:01:56,719
to give a more context about why this

48
00:01:56,719 --> 00:01:58,240
was interesting

49
00:01:58,240 --> 00:02:01,600
then i'd like to go from identifying a

50
00:02:01,600 --> 00:02:03,200
vulnerability

51
00:02:03,200 --> 00:02:04,079
then

52
00:02:04,079 --> 00:02:06,079
moving into creating a very first proof

53
00:02:06,079 --> 00:02:07,680
of concept

54
00:02:07,680 --> 00:02:09,758
into fully weaponizing this

55
00:02:09,758 --> 00:02:12,080
vulnerability that is also allowing me

56
00:02:12,080 --> 00:02:15,440
to use it in client engagements

57
00:02:15,440 --> 00:02:17,280
and then later we'll see what microsoft

58
00:02:17,280 --> 00:02:19,840
did this did to mitigate and pitch this

59
00:02:19,840 --> 00:02:22,640
issue

60
00:02:22,640 --> 00:02:24,800
the story started simple

61
00:02:24,800 --> 00:02:26,800
with a simple problem statement

62
00:02:26,800 --> 00:02:28,560
i would like to create a better phishing

63
00:02:28,560 --> 00:02:30,239
payload

64
00:02:30,239 --> 00:02:32,400
and a phishing payload needs to have a

65
00:02:32,400 --> 00:02:35,360
few properties right it needs to have a

66
00:02:35,360 --> 00:02:36,640
cool icon

67
00:02:36,640 --> 00:02:38,400
and it needs to be double clickable

68
00:02:38,400 --> 00:02:41,200
because i want user convenience for my

69
00:02:41,200 --> 00:02:44,000
phishing targets

70
00:02:44,800 --> 00:02:47,840
the process i wanted to apply is

71
00:02:47,840 --> 00:02:50,879
i would like to look around learn stuff

72
00:02:50,879 --> 00:02:52,800
and understand things better

73
00:02:52,800 --> 00:02:53,840
and then

74
00:02:53,840 --> 00:02:56,000
search for

75
00:02:56,000 --> 00:02:58,159
something that feels a bit off feels a

76
00:02:58,159 --> 00:03:00,959
bit weird funny shady

77
00:03:00,959 --> 00:03:03,200
and then dive deeper into it

78
00:03:03,200 --> 00:03:05,040
and then repeat this process over and

79
00:03:05,040 --> 00:03:06,159
over

80
00:03:06,159 --> 00:03:07,920
and my starting point

81
00:03:07,920 --> 00:03:10,879
was office file types

82
00:03:10,879 --> 00:03:13,680
like i wanted to identify and understand

83
00:03:13,680 --> 00:03:16,640
office file types and i started out with

84
00:03:16,640 --> 00:03:19,680
using the file and the save as dialog so

85
00:03:19,680 --> 00:03:22,480
i save a specific file

86
00:03:22,480 --> 00:03:25,599
as with a different extension each time

87
00:03:25,599 --> 00:03:28,080
and do some comparisons between that

88
00:03:28,080 --> 00:03:30,319
furthermore i downloaded all kind of

89
00:03:30,319 --> 00:03:33,200
random stuff from the internet and i

90
00:03:33,200 --> 00:03:35,920
searched in the c program files office

91
00:03:35,920 --> 00:03:38,959
installation directory

92
00:03:38,959 --> 00:03:40,319
when looking through the installation

93
00:03:40,319 --> 00:03:42,239
directory of office

94
00:03:42,239 --> 00:03:45,720
there were some example files let's say

95
00:03:45,720 --> 00:03:49,760
xlam files no clue what those were

96
00:03:49,760 --> 00:03:50,480
but

97
00:03:50,480 --> 00:03:52,879
there were a few of them around

98
00:03:52,879 --> 00:03:55,439
and they had a cool icon so let's see

99
00:03:55,439 --> 00:03:56,799
what those were

100
00:03:56,799 --> 00:03:58,959
but there was also one file that caught

101
00:03:58,959 --> 00:04:01,599
my attention that i was all too familiar

102
00:04:01,599 --> 00:04:04,239
with an xll file

103
00:04:04,239 --> 00:04:05,439
so

104
00:04:05,439 --> 00:04:07,760
what is going on here what what are

105
00:04:07,760 --> 00:04:10,400
these files consuming or using this xll

106
00:04:10,400 --> 00:04:11,760
file or what

107
00:04:11,760 --> 00:04:15,840
what what is an excel am file anyway

108
00:04:16,160 --> 00:04:18,160
an xlam file

109
00:04:18,160 --> 00:04:19,120
is in

110
00:04:19,120 --> 00:04:21,358
excel add-in

111
00:04:21,358 --> 00:04:23,759
an add-in is not really a sheet

112
00:04:23,759 --> 00:04:26,000
it's an add-in it adds functionality to

113
00:04:26,000 --> 00:04:26,960
excel

114
00:04:26,960 --> 00:04:29,040
and in this case

115
00:04:29,040 --> 00:04:31,520
atp vba

116
00:04:31,520 --> 00:04:33,600
is the analysis

117
00:04:33,600 --> 00:04:34,880
tool pack

118
00:04:34,880 --> 00:04:36,400
add-in

119
00:04:36,400 --> 00:04:38,080
it adds a button

120
00:04:38,080 --> 00:04:40,800
to the excel

121
00:04:40,800 --> 00:04:44,639
bar well if you click on it you can

122
00:04:44,639 --> 00:04:47,040
you get more options and you can

123
00:04:47,040 --> 00:04:49,680
do all kind of analysis

124
00:04:49,680 --> 00:04:52,240
on your cells or your worksheets and

125
00:04:52,240 --> 00:04:56,040
perform other cool calculations

126
00:04:59,040 --> 00:05:01,840
so what happens if i just copy paste

127
00:05:01,840 --> 00:05:02,720
this

128
00:05:02,720 --> 00:05:05,520
this xlam into another directory like c

129
00:05:05,520 --> 00:05:07,759
temp

130
00:05:07,759 --> 00:05:09,440
upon opening double clicking which

131
00:05:09,440 --> 00:05:11,840
worked i got a security warning and the

132
00:05:11,840 --> 00:05:14,560
security warning said a couple of things

133
00:05:14,560 --> 00:05:16,720
it said that the digital signature is

134
00:05:16,720 --> 00:05:17,919
valid

135
00:05:17,919 --> 00:05:20,560
and that it contains macros and if i

136
00:05:20,560 --> 00:05:24,600
wanted to enable them or not

137
00:05:25,039 --> 00:05:27,199
so i enabled them and then the

138
00:05:27,199 --> 00:05:29,360
functionality kept working

139
00:05:29,360 --> 00:05:31,680
possibly implying that it could load

140
00:05:31,680 --> 00:05:33,759
maybe some other resources from the

141
00:05:33,759 --> 00:05:37,120
office installation directory

142
00:05:37,440 --> 00:05:38,880
but then i was thinking like what

143
00:05:38,880 --> 00:05:39,919
happened

144
00:05:39,919 --> 00:05:42,560
if i also put an xll

145
00:05:42,560 --> 00:05:45,720
in the same directory with the

146
00:05:45,720 --> 00:05:48,000
analysis32.xll name

147
00:05:48,000 --> 00:05:50,240
but instead of using the one from office

148
00:05:50,240 --> 00:05:51,919
installation directory i just create my

149
00:05:51,919 --> 00:05:55,680
own malicious unsigned xll and hit the

150
00:05:55,680 --> 00:05:58,400
enable button

151
00:05:58,479 --> 00:05:59,360
bam

152
00:05:59,360 --> 00:06:02,000
my xll opens

153
00:06:02,000 --> 00:06:03,759
this is really interesting so my

154
00:06:03,759 --> 00:06:07,280
malicious unsigned xll is loaded from a

155
00:06:07,280 --> 00:06:10,479
signed context

156
00:06:10,720 --> 00:06:13,120
and it loads in this case an explorer of

157
00:06:13,120 --> 00:06:17,759
a cmd window and a smart popup

158
00:06:18,880 --> 00:06:20,639
let's

159
00:06:20,639 --> 00:06:24,800
do a small recap so far so

160
00:06:25,360 --> 00:06:26,160
we

161
00:06:26,160 --> 00:06:27,120
we looked through the office

162
00:06:27,120 --> 00:06:28,720
installation directory and it contains

163
00:06:28,720 --> 00:06:32,639
some signed files

164
00:06:32,880 --> 00:06:35,759
this designed excel add-ins can be moved

165
00:06:35,759 --> 00:06:36,880
to another

166
00:06:36,880 --> 00:06:38,319
directory without invalidating a

167
00:06:38,319 --> 00:06:40,319
signature

168
00:06:40,319 --> 00:06:45,280
and i can also replace the xll

169
00:06:45,280 --> 00:06:48,240
by my unsigned xll and the add-in will

170
00:06:48,240 --> 00:06:49,759
then run

171
00:06:49,759 --> 00:06:51,840
from a signed context

172
00:06:51,840 --> 00:06:54,560
an unsigned xll

173
00:06:54,560 --> 00:06:55,759
and this is

174
00:06:55,759 --> 00:06:58,240
this is potentially really interesting

175
00:06:58,240 --> 00:06:59,199
because

176
00:06:59,199 --> 00:07:02,800
if a user will see that something is

177
00:07:02,800 --> 00:07:04,800
signed by microsoft

178
00:07:04,800 --> 00:07:07,360
and the signature is valid then it must

179
00:07:07,360 --> 00:07:08,880
be legitimate right this could be

180
00:07:08,880 --> 00:07:12,319
potentially great for phishing

181
00:07:12,880 --> 00:07:14,639
so let's see what happens

182
00:07:14,639 --> 00:07:16,800
let's do first a little bit of office

183
00:07:16,800 --> 00:07:18,080
background

184
00:07:18,080 --> 00:07:22,000
and specifically excel

185
00:07:22,800 --> 00:07:25,199
excel is not only amazing for normal

186
00:07:25,199 --> 00:07:27,520
users to create really cool spreadsheets

187
00:07:27,520 --> 00:07:30,160
and do whatever they do but also great

188
00:07:30,160 --> 00:07:33,759
for programmers to automate

189
00:07:33,759 --> 00:07:36,960
things in various ways

190
00:07:36,960 --> 00:07:39,440
and these various ways leads to a kind

191
00:07:39,440 --> 00:07:41,520
of various file types

192
00:07:41,520 --> 00:07:43,759
an office has many security features to

193
00:07:43,759 --> 00:07:45,919
protect users

194
00:07:45,919 --> 00:07:49,360
from malicious actors

195
00:07:49,360 --> 00:07:51,120
while still allowing

196
00:07:51,120 --> 00:07:52,879
normal programmers to automate these

197
00:07:52,879 --> 00:07:54,319
things

198
00:07:54,319 --> 00:07:55,919
and i'd like to go through a few of

199
00:07:55,919 --> 00:07:56,960
those

200
00:07:56,960 --> 00:07:59,599
protections first we'll talk about excel

201
00:07:59,599 --> 00:08:01,280
security dialogs

202
00:08:01,280 --> 00:08:04,160
then we talk about various file types

203
00:08:04,160 --> 00:08:08,160
and then about the trust flow

204
00:08:09,120 --> 00:08:10,840
this is a security

205
00:08:10,840 --> 00:08:14,080
warning this is the normal macro warning

206
00:08:14,080 --> 00:08:15,919
from xlsm

207
00:08:15,919 --> 00:08:18,240
this is a slightly different one this is

208
00:08:18,240 --> 00:08:21,440
if you combine macros with

209
00:08:21,440 --> 00:08:24,720
active remote content

210
00:08:24,720 --> 00:08:27,759
this is a warning from an add-in

211
00:08:27,759 --> 00:08:30,319
it looks it looks totally different

212
00:08:30,319 --> 00:08:31,440
and

213
00:08:31,440 --> 00:08:34,799
it's more like prominent it asks it to

214
00:08:34,799 --> 00:08:37,120
enable macros or disable or leave them

215
00:08:37,120 --> 00:08:39,200
disabled

216
00:08:39,200 --> 00:08:41,760
and this is a security warning for an

217
00:08:41,760 --> 00:08:43,440
xll

218
00:08:43,440 --> 00:08:46,080
this doesn't contain the scary words

219
00:08:46,080 --> 00:08:47,680
macro

220
00:08:47,680 --> 00:08:49,680
but it just mentions

221
00:08:49,680 --> 00:08:50,720
edin

222
00:08:50,720 --> 00:08:55,320
which already sounds a lot nicer

223
00:08:56,240 --> 00:08:57,920
so let's do a little bit of a file type

224
00:08:57,920 --> 00:08:59,440
comparison

225
00:08:59,440 --> 00:09:02,000
because these security warnings that

226
00:09:02,000 --> 00:09:04,480
they're they're influenced by also file

227
00:09:04,480 --> 00:09:05,600
types

228
00:09:05,600 --> 00:09:08,080
so this is the normal xlsx is a

229
00:09:08,080 --> 00:09:09,120
worksheet

230
00:09:09,120 --> 00:09:11,519
then you have two file types that have

231
00:09:11,519 --> 00:09:13,600
macros embedded into them

232
00:09:13,600 --> 00:09:17,040
and microcode can be signed

233
00:09:17,040 --> 00:09:19,279
so and if you have a valid signature it

234
00:09:19,279 --> 00:09:23,519
will result in a different dialog

235
00:09:24,080 --> 00:09:26,560
and there is an xll which is an excel

236
00:09:26,560 --> 00:09:29,279
add-in it can also contain code but not

237
00:09:29,279 --> 00:09:32,160
in the way you would possibly expect it

238
00:09:32,160 --> 00:09:33,120
and the

239
00:09:33,120 --> 00:09:36,480
extension can be important for fishing

240
00:09:36,480 --> 00:09:38,560
because

241
00:09:38,560 --> 00:09:41,600
if you have a more mature

242
00:09:41,600 --> 00:09:44,080
target you might want to take a

243
00:09:44,080 --> 00:09:45,360
different

244
00:09:45,360 --> 00:09:46,560
extension

245
00:09:46,560 --> 00:09:48,640
like something that is less common

246
00:09:48,640 --> 00:09:50,480
or something that i possibly not have

247
00:09:50,480 --> 00:09:53,519
had in the training or an extension like

248
00:09:53,519 --> 00:09:54,880
xls

249
00:09:54,880 --> 00:09:57,440
that you do not necessarily see from the

250
00:09:57,440 --> 00:10:02,120
outside if it contains macros or not

251
00:10:04,320 --> 00:10:07,600
so what is this xll this xll

252
00:10:07,600 --> 00:10:10,079
is actually a dll

253
00:10:10,079 --> 00:10:13,040
a portable executable

254
00:10:13,040 --> 00:10:16,480
and xlr can only be loaded if you have

255
00:10:16,480 --> 00:10:19,760
an xll that is the same business

256
00:10:19,760 --> 00:10:22,160
as your host process

257
00:10:22,160 --> 00:10:25,920
so if you have a 64-bit uh excel version

258
00:10:25,920 --> 00:10:27,920
running then you also need

259
00:10:27,920 --> 00:10:32,079
to fish your target with the 64-bit xll

260
00:10:32,079 --> 00:10:34,399
and likewise if you have if your target

261
00:10:34,399 --> 00:10:36,560
has a 32-bit office

262
00:10:36,560 --> 00:10:39,120
then you need to fish with a 32-bit xlr

263
00:10:39,120 --> 00:10:41,920
of a xll yes

264
00:10:41,920 --> 00:10:44,640
what what is also interesting

265
00:10:44,640 --> 00:10:45,600
is

266
00:10:45,600 --> 00:10:48,640
of just just to get back to the xll it's

267
00:10:48,640 --> 00:10:50,959
really interesting to use one of those

268
00:10:50,959 --> 00:10:53,440
because you can just natively program

269
00:10:53,440 --> 00:10:55,760
you can use object safe c plus plus with

270
00:10:55,760 --> 00:10:57,519
direct system calls all your code

271
00:10:57,519 --> 00:11:00,240
obfuscation and anti-reversing whatever

272
00:11:00,240 --> 00:11:01,600
you want

273
00:11:01,600 --> 00:11:05,040
it provides great benefits

274
00:11:05,519 --> 00:11:07,600
what's also interesting is is that it

275
00:11:07,600 --> 00:11:10,560
doesn't support mark of the web

276
00:11:10,560 --> 00:11:12,720
a mark of the web is

277
00:11:12,720 --> 00:11:14,959
is a security attribute that is set on a

278
00:11:14,959 --> 00:11:16,720
file if you download it from the

279
00:11:16,720 --> 00:11:17,760
internet

280
00:11:17,760 --> 00:11:20,720
or if you save it from an attachment for

281
00:11:20,720 --> 00:11:23,120
instance

282
00:11:24,079 --> 00:11:25,760
basically prevent of

283
00:11:25,760 --> 00:11:27,519
allowing office to choose a different

284
00:11:27,519 --> 00:11:29,839
dialogue

285
00:11:30,240 --> 00:11:32,800
let's quickly look into the file format

286
00:11:32,800 --> 00:11:36,399
of the left three files the open office

287
00:11:36,399 --> 00:11:41,480
of the office open xml file format

288
00:11:42,079 --> 00:11:44,560
is basically a zip so you can unzip it

289
00:11:44,560 --> 00:11:46,399
using just

290
00:11:46,399 --> 00:11:50,320
your default zip tool or 7-zip and it

291
00:11:50,320 --> 00:11:53,519
contains all kinds of xml files

292
00:11:53,519 --> 00:11:55,120
while browsing through it you'll see a

293
00:11:55,120 --> 00:11:56,800
couple of files

294
00:11:56,800 --> 00:11:58,079
such as

295
00:11:58,079 --> 00:12:01,680
the vba project in bin file and possibly

296
00:12:01,680 --> 00:12:05,040
if it's signed a signature pen bin file

297
00:12:05,040 --> 00:12:07,440
and this is the part of the document

298
00:12:07,440 --> 00:12:10,399
that assigned

299
00:12:10,399 --> 00:12:13,120
and in theory well

300
00:12:13,120 --> 00:12:16,000
all the other xml files and all the

301
00:12:16,000 --> 00:12:17,680
other directories are not signed and in

302
00:12:17,680 --> 00:12:20,079
theory you can even transplant the

303
00:12:20,079 --> 00:12:22,839
assigned files into another

304
00:12:22,839 --> 00:12:27,279
file and thus left on the security uh

305
00:12:27,279 --> 00:12:29,040
the security notifications and the

306
00:12:29,040 --> 00:12:31,440
signing

307
00:12:31,440 --> 00:12:33,600
when looking at the excel am file there

308
00:12:33,600 --> 00:12:35,200
was also another thing that was

309
00:12:35,200 --> 00:12:38,320
interesting to note

310
00:12:38,320 --> 00:12:41,440
the difference between an excel am

311
00:12:41,440 --> 00:12:42,399
add-in

312
00:12:42,399 --> 00:12:44,079
and the xlsm

313
00:12:44,079 --> 00:12:47,440
sheet was just one word

314
00:12:47,440 --> 00:12:49,920
in one of the xml files

315
00:12:49,920 --> 00:12:52,639
so by replacing this

316
00:12:52,639 --> 00:12:55,279
add-in words with the word sheet

317
00:12:55,279 --> 00:12:57,519
i can also just quickly change the

318
00:12:57,519 --> 00:12:59,360
extension of the file

319
00:12:59,360 --> 00:13:02,399
and thus move from one file to another

320
00:13:02,399 --> 00:13:04,240
and then from an xls

321
00:13:04,240 --> 00:13:04,959
m

322
00:13:04,959 --> 00:13:07,600
i can use the file save as dialog in

323
00:13:07,600 --> 00:13:08,560
excel

324
00:13:08,560 --> 00:13:11,920
to then move to other file formats

325
00:13:11,920 --> 00:13:14,880
and thus gain flexibility on

326
00:13:14,880 --> 00:13:17,680
uh on fishing my target with different

327
00:13:17,680 --> 00:13:21,160
kind of extensions

328
00:13:23,279 --> 00:13:25,120
let's look at the trust flow

329
00:13:25,120 --> 00:13:27,760
so if a user opens a file that has

330
00:13:27,760 --> 00:13:30,320
macros enabled in it

331
00:13:30,320 --> 00:13:32,399
and it's and the file has the mark of

332
00:13:32,399 --> 00:13:34,480
the web attribute so meaning that it

333
00:13:34,480 --> 00:13:36,079
comes from the internet

334
00:13:36,079 --> 00:13:37,760
then

335
00:13:37,760 --> 00:13:41,519
excel or office in this case would

336
00:13:41,519 --> 00:13:43,920
go through a certain flow querying all

337
00:13:43,920 --> 00:13:46,480
kind of register options and whatnot to

338
00:13:46,480 --> 00:13:48,639
verify if

339
00:13:48,639 --> 00:13:51,680
it should run the macro or not or give a

340
00:13:51,680 --> 00:13:53,440
dialogue

341
00:13:53,440 --> 00:13:55,839
so if it's in a trusted location then

342
00:13:55,839 --> 00:13:57,839
macros are enabled for sure

343
00:13:57,839 --> 00:13:59,839
if it's digitally signed and the trusted

344
00:13:59,839 --> 00:14:02,480
publisher is on the pc

345
00:14:02,480 --> 00:14:05,360
then macros are enabled and so forth and

346
00:14:05,360 --> 00:14:08,399
so on and so forth

347
00:14:09,600 --> 00:14:12,399
but how does this work with xlls because

348
00:14:12,399 --> 00:14:14,240
they don't have

349
00:14:14,240 --> 00:14:15,040
the

350
00:14:15,040 --> 00:14:17,680
mark of the web

351
00:14:17,680 --> 00:14:20,480
then you'll enter a different flow

352
00:14:20,480 --> 00:14:22,000
and like this

353
00:14:22,000 --> 00:14:24,959
microsoft office has various flows and

354
00:14:24,959 --> 00:14:28,240
nuances and exceptions that allows you

355
00:14:28,240 --> 00:14:31,440
as an attacker to work and try to bypass

356
00:14:31,440 --> 00:14:34,480
the different things

357
00:14:34,720 --> 00:14:36,320
what i would like you to remember from

358
00:14:36,320 --> 00:14:39,680
this slide is that the the trust flow

359
00:14:39,680 --> 00:14:42,240
has many nuances and exceptions and it's

360
00:14:42,240 --> 00:14:45,519
quite a complex thing

361
00:14:45,519 --> 00:14:48,800
so small recap

362
00:14:49,360 --> 00:14:51,120
most of the office

363
00:14:51,120 --> 00:14:55,440
file types are ooxmls so our zips

364
00:14:55,440 --> 00:14:56,839
and are

365
00:14:56,839 --> 00:14:59,920
openable only the macro is signed

366
00:14:59,920 --> 00:15:01,839
so all the worksheets

367
00:15:01,839 --> 00:15:03,920
they can be freely edited without

368
00:15:03,920 --> 00:15:06,560
invalidating the signature

369
00:15:06,560 --> 00:15:11,760
an xll is an excel add-in dll

370
00:15:11,760 --> 00:15:15,199
which is uh which is really interested

371
00:15:15,199 --> 00:15:16,959
really interesting as a file type

372
00:15:16,959 --> 00:15:19,360
because it's different and it can allow

373
00:15:19,360 --> 00:15:22,880
you as an attacker to have various opsec

374
00:15:22,880 --> 00:15:24,720
safety features

375
00:15:24,720 --> 00:15:26,399
and there's different file types and

376
00:15:26,399 --> 00:15:28,320
dialogues

377
00:15:28,320 --> 00:15:31,279
furthermore the trust flow is is complex

378
00:15:31,279 --> 00:15:35,360
and has many nuances and exceptions

379
00:15:35,440 --> 00:15:37,759
let's do a deep dive in the analysis

380
00:15:37,759 --> 00:15:41,920
tool pack what is it how does it work

381
00:15:41,920 --> 00:15:44,240
is it vulnerable can we exploit it can

382
00:15:44,240 --> 00:15:47,279
we misuse it some way to fish

383
00:15:47,279 --> 00:15:52,040
a target in an interesting way

384
00:15:55,360 --> 00:15:56,240
first

385
00:15:56,240 --> 00:15:58,000
when i would try to look into this i

386
00:15:58,000 --> 00:16:00,639
used excel and i wanted to try to go to

387
00:16:00,639 --> 00:16:03,759
the macro editor and extract the vba

388
00:16:03,759 --> 00:16:06,399
code or look at the vba code well this

389
00:16:06,399 --> 00:16:08,639
was password protected so i had to use

390
00:16:08,639 --> 00:16:10,000
another trick

391
00:16:10,000 --> 00:16:12,480
on another tool

392
00:16:12,480 --> 00:16:14,880
i used ole vba to

393
00:16:14,880 --> 00:16:17,600
extract the macros of course out of the

394
00:16:17,600 --> 00:16:18,720
document

395
00:16:18,720 --> 00:16:21,199
all of vba is a really nice tool and it

396
00:16:21,199 --> 00:16:24,079
will just print the micro code and also

397
00:16:24,079 --> 00:16:25,920
give you a nice summary

398
00:16:25,920 --> 00:16:28,880
and the summary mentioned auto execute

399
00:16:28,880 --> 00:16:30,320
how to open

400
00:16:30,320 --> 00:16:34,079
suspicious run register

401
00:16:34,079 --> 00:16:38,399
and execute excel for macro

402
00:16:38,399 --> 00:16:39,279
so

403
00:16:39,279 --> 00:16:41,440
this is all the more reason to continue

404
00:16:41,440 --> 00:16:44,320
deep diving into this this document and

405
00:16:44,320 --> 00:16:47,600
to see what is going on

406
00:16:48,240 --> 00:16:50,399
looking at the vba code

407
00:16:50,399 --> 00:16:51,360
if you

408
00:16:51,360 --> 00:16:54,240
distill it down there's only a hundreds

409
00:16:54,240 --> 00:16:55,920
or so

410
00:16:55,920 --> 00:16:59,040
interesting lines of code left

411
00:16:59,040 --> 00:17:00,959
so let's analyze these

412
00:17:00,959 --> 00:17:04,480
let's start at the beginning

413
00:17:04,480 --> 00:17:06,400
in the beginning you'll see that a

414
00:17:06,400 --> 00:17:07,679
couple of

415
00:17:07,679 --> 00:17:10,480
cells are kind of named and

416
00:17:10,480 --> 00:17:13,199
referenced

417
00:17:13,760 --> 00:17:16,000
it has an auto open function as we

418
00:17:16,000 --> 00:17:18,880
already figured out which calls four

419
00:17:18,880 --> 00:17:20,720
more functions

420
00:17:20,720 --> 00:17:22,160
the first function isn't really

421
00:17:22,160 --> 00:17:24,559
interesting it just contains a lot of

422
00:17:24,559 --> 00:17:27,280
constant values and doesn't really do

423
00:17:27,280 --> 00:17:28,559
that much

424
00:17:28,559 --> 00:17:30,840
but the second function is already a bit

425
00:17:30,840 --> 00:17:34,320
bigger it's the big platform function

426
00:17:34,320 --> 00:17:35,919
and this

427
00:17:35,919 --> 00:17:39,919
function is aware is windows or mac os

428
00:17:39,919 --> 00:17:42,400
aware

429
00:17:43,840 --> 00:17:45,360
hinting that's

430
00:17:45,360 --> 00:17:48,000
both windows and mac os are supported

431
00:17:48,000 --> 00:17:51,200
and possibly vulnerable

432
00:17:51,520 --> 00:17:54,720
and then you'll see that a few

433
00:17:54,720 --> 00:17:55,919
cells

434
00:17:55,919 --> 00:17:58,480
are being referenced and the value of

435
00:17:58,480 --> 00:18:00,960
within the cell is being saved within a

436
00:18:00,960 --> 00:18:03,440
variable

437
00:18:05,039 --> 00:18:06,320
interesting

438
00:18:06,320 --> 00:18:09,039
so how would that look like

439
00:18:09,039 --> 00:18:12,000
so the xlam if you perform a for excel

440
00:18:12,000 --> 00:18:15,520
am if you convert it to a sheet and then

441
00:18:15,520 --> 00:18:17,600
unhide the

442
00:18:17,600 --> 00:18:19,200
the work

443
00:18:19,200 --> 00:18:23,039
spaces you'll find that it has some

444
00:18:23,039 --> 00:18:24,960
xll names and

445
00:18:24,960 --> 00:18:27,039
directory separators and whatnot saved

446
00:18:27,039 --> 00:18:29,840
into the cells

447
00:18:30,000 --> 00:18:30,960
and

448
00:18:30,960 --> 00:18:33,280
for this talk

449
00:18:33,280 --> 00:18:35,280
we can basically exploit all the

450
00:18:35,280 --> 00:18:37,200
functionality within this

451
00:18:37,200 --> 00:18:40,840
add-in by just using cell

452
00:18:40,840 --> 00:18:43,760
b8 the xll name

453
00:18:43,760 --> 00:18:47,360
nls 32.xll

454
00:18:47,360 --> 00:18:48,960
so for the remainder of the talk we're

455
00:18:48,960 --> 00:18:53,039
going to focus on cell b8

456
00:18:55,600 --> 00:18:58,160
so how is an xll being loaded then how

457
00:18:58,160 --> 00:19:00,160
is this

458
00:19:00,160 --> 00:19:02,960
xll name being consumed by the rest of

459
00:19:02,960 --> 00:19:05,840
the vba code

460
00:19:05,840 --> 00:19:07,440
so we already figured out that the code

461
00:19:07,440 --> 00:19:08,799
runs on open

462
00:19:08,799 --> 00:19:11,679
and then after the pic platform function

463
00:19:11,679 --> 00:19:14,720
the verify open function is being called

464
00:19:14,720 --> 00:19:17,600
the cell value is being stored in a

465
00:19:17,600 --> 00:19:20,400
variable called excel name

466
00:19:20,400 --> 00:19:23,280
and then later being consumed by this

467
00:19:23,280 --> 00:19:27,760
function called register xll

468
00:19:27,760 --> 00:19:28,880
pretty much

469
00:19:28,880 --> 00:19:30,480
without any

470
00:19:30,480 --> 00:19:34,480
input validation or so whatsoever

471
00:19:37,280 --> 00:19:38,960
if you look to the remainder of the

472
00:19:38,960 --> 00:19:41,840
function you'll see that all the other

473
00:19:41,840 --> 00:19:44,480
variables and code flows

474
00:19:44,480 --> 00:19:46,799
that load that use the register xlr

475
00:19:46,799 --> 00:19:50,559
function are also vulnerable

476
00:19:50,559 --> 00:19:53,280
and important to notice is that

477
00:19:53,280 --> 00:19:58,000
if the if no valid xll is found

478
00:19:58,000 --> 00:20:00,000
the worksheet

479
00:20:00,000 --> 00:20:02,799
is closed

480
00:20:03,200 --> 00:20:04,720
and

481
00:20:04,720 --> 00:20:08,000
all micro code execution will stop

482
00:20:08,000 --> 00:20:10,400
so any further

483
00:20:10,400 --> 00:20:12,960
vba code will not be called so this is

484
00:20:12,960 --> 00:20:15,760
like a hard process exit

485
00:20:15,760 --> 00:20:17,840
so it is important that this macro code

486
00:20:17,840 --> 00:20:22,158
will find a valid xll

487
00:20:22,799 --> 00:20:25,039
so small recap

488
00:20:25,039 --> 00:20:28,159
analysis tool pack runs on open

489
00:20:28,159 --> 00:20:30,559
it will load an xll

490
00:20:30,559 --> 00:20:32,840
and the name in the from the name in the

491
00:20:32,840 --> 00:20:35,039
worksheet cells are not part of the

492
00:20:35,039 --> 00:20:37,600
signature so they can be freely edited

493
00:20:37,600 --> 00:20:40,799
without invalidating it

494
00:20:40,799 --> 00:20:44,240
register xlr loads on xll

495
00:20:44,240 --> 00:20:46,240
also unsigned ones

496
00:20:46,240 --> 00:20:47,120
and

497
00:20:47,120 --> 00:20:49,120
office for mac also seems to be

498
00:20:49,120 --> 00:20:50,960
supported hinting that it's also

499
00:20:50,960 --> 00:20:53,520
vulnerable

500
00:20:54,559 --> 00:20:58,159
we're going to focus on windows for now

501
00:20:58,159 --> 00:21:00,640
let's try to make a very first proof of

502
00:21:00,640 --> 00:21:05,120
concept so how would that look like

503
00:21:05,120 --> 00:21:07,360
as an attacker i would like

504
00:21:07,360 --> 00:21:09,600
to change the file name of the analysis

505
00:21:09,600 --> 00:21:13,039
tool pack add-in to something else

506
00:21:13,039 --> 00:21:14,240
possibly

507
00:21:14,240 --> 00:21:16,159
it's something that would for instance

508
00:21:16,159 --> 00:21:17,039
uh

509
00:21:17,039 --> 00:21:21,039
complement my phishing storyline

510
00:21:21,039 --> 00:21:23,120
possibly also changing the file

511
00:21:23,120 --> 00:21:25,600
extension

512
00:21:25,600 --> 00:21:27,120
i would like to change the file name of

513
00:21:27,120 --> 00:21:29,280
the xll

514
00:21:29,280 --> 00:21:30,880
and uh

515
00:21:30,880 --> 00:21:33,760
maybe also the the extension of the xll

516
00:21:33,760 --> 00:21:37,039
to steer the user away from clicking on

517
00:21:37,039 --> 00:21:39,600
it because it's in science and to steer

518
00:21:39,600 --> 00:21:41,919
them towards clicking the signed

519
00:21:41,919 --> 00:21:43,120
excel

520
00:21:43,120 --> 00:21:44,000
i am

521
00:21:44,000 --> 00:21:47,120
the add-in micro

522
00:21:47,120 --> 00:21:48,720
this is to lower this

523
00:21:48,720 --> 00:21:51,360
lower if any lower suspicion

524
00:21:51,360 --> 00:21:53,039
for instance

525
00:21:53,039 --> 00:21:56,080
and i would like to load the correct

526
00:21:56,080 --> 00:21:57,280
business

527
00:21:57,280 --> 00:21:59,919
of xll according to

528
00:21:59,919 --> 00:22:04,000
the environment that we're running in so

529
00:22:04,000 --> 00:22:05,840
i would like the

530
00:22:05,840 --> 00:22:08,240
the add-in to choose whether to load a

531
00:22:08,240 --> 00:22:13,320
64-bit or a 32-bit xll

532
00:22:13,760 --> 00:22:15,840
let's try to make a very first proof of

533
00:22:15,840 --> 00:22:18,240
concept so this is the original version

534
00:22:18,240 --> 00:22:20,159
this is the normal flow

535
00:22:20,159 --> 00:22:22,320
and in the normal flow this analysis 32

536
00:22:22,320 --> 00:22:25,039
point xl is obtained from cell b8 and

537
00:22:25,039 --> 00:22:25,840
then

538
00:22:25,840 --> 00:22:26,960
used in

539
00:22:26,960 --> 00:22:29,120
register xll

540
00:22:29,120 --> 00:22:31,600
let's change the value within the cell

541
00:22:31,600 --> 00:22:36,240
into demo of demo 64 pen dot

542
00:22:36,240 --> 00:22:37,679
success

543
00:22:37,679 --> 00:22:38,880
so

544
00:22:38,880 --> 00:22:40,400
we can change the name

545
00:22:40,400 --> 00:22:42,880
and the extension and the xlr still

546
00:22:42,880 --> 00:22:44,559
loads

547
00:22:44,559 --> 00:22:47,039
okay let's continue

548
00:22:47,039 --> 00:22:50,320
let's use instead of a static string

549
00:22:50,320 --> 00:22:52,960
let's use a formula

550
00:22:52,960 --> 00:22:56,559
inside of my cell to calculate wherever

551
00:22:56,559 --> 00:22:59,600
whether our current excel host process

552
00:22:59,600 --> 00:23:03,120
is 64-bit or 32-bit

553
00:23:03,120 --> 00:23:06,240
and that also worked so for a 64-bit

554
00:23:06,240 --> 00:23:09,120
excel demo 64 would be loaded and a

555
00:23:09,120 --> 00:23:11,360
32-bit

556
00:23:11,360 --> 00:23:14,080
excel demo 32

557
00:23:14,080 --> 00:23:16,799
was loaded

558
00:23:18,240 --> 00:23:20,640
let's use the previous trick

559
00:23:20,640 --> 00:23:24,320
to go from an excel am to an xlsm by

560
00:23:24,320 --> 00:23:26,640
changing this single word and also

561
00:23:26,640 --> 00:23:28,080
changing the

562
00:23:28,080 --> 00:23:30,480
extension and then using the file save

563
00:23:30,480 --> 00:23:32,000
as dialog

564
00:23:32,000 --> 00:23:34,240
to go to an xls

565
00:23:34,240 --> 00:23:36,240
and the reason why i would like to

566
00:23:36,240 --> 00:23:38,480
change to an xls is because from the

567
00:23:38,480 --> 00:23:39,600
outside

568
00:23:39,600 --> 00:23:42,000
you don't necessarily see that it

569
00:23:42,000 --> 00:23:44,080
contains macros

570
00:23:44,080 --> 00:23:46,960
contrary to an xlsm where you see that

571
00:23:46,960 --> 00:23:48,840
it has possibly

572
00:23:48,840 --> 00:23:51,440
macros and this is how a very first

573
00:23:51,440 --> 00:23:54,159
proof of concept would look like

574
00:23:54,159 --> 00:23:57,039
it has two files that are not clickable

575
00:23:57,039 --> 00:23:59,360
well on a normal system not clickable

576
00:23:59,360 --> 00:24:00,320
and an

577
00:24:00,320 --> 00:24:02,400
xls file that is

578
00:24:02,400 --> 00:24:04,720
and if you could bundle them up in a zip

579
00:24:04,720 --> 00:24:07,760
or a 7-zip or easo or image whatever we

580
00:24:07,760 --> 00:24:11,919
can send it to a client and then

581
00:24:11,919 --> 00:24:13,600
possibly

582
00:24:13,600 --> 00:24:17,320
gain initial foothold

583
00:24:19,360 --> 00:24:21,440
so our smart recap analysis tool pack

584
00:24:21,440 --> 00:24:24,960
loads in xll from a local uh path

585
00:24:24,960 --> 00:24:27,520
you can you can use a

586
00:24:27,520 --> 00:24:30,480
like a relative path or absolute part

587
00:24:30,480 --> 00:24:33,039
you can change file names and extensions

588
00:24:33,039 --> 00:24:36,080
and you can use formulas to calculate uh

589
00:24:36,080 --> 00:24:40,000
your your current business 64 32-bit

590
00:24:40,000 --> 00:24:41,600
and it's possible to change to a

591
00:24:41,600 --> 00:24:44,480
different file type

592
00:24:44,559 --> 00:24:46,559
and that would be the end of the story

593
00:24:46,559 --> 00:24:47,919
if i just wanted to make a proof of

594
00:24:47,919 --> 00:24:49,120
concept

595
00:24:49,120 --> 00:24:50,720
because this in theory is already

596
00:24:50,720 --> 00:24:53,279
sufficient to report to microsoft that

597
00:24:53,279 --> 00:24:55,520
there is something interesting here

598
00:24:55,520 --> 00:24:56,880
and

599
00:24:56,880 --> 00:24:58,840
that would be basically

600
00:24:58,840 --> 00:25:00,960
ended or

601
00:25:00,960 --> 00:25:03,679
we can try to fully weaponize it

602
00:25:03,679 --> 00:25:04,480
and

603
00:25:04,480 --> 00:25:06,320
make it as powerful and dangerous as

604
00:25:06,320 --> 00:25:08,640
possible and see how deep this rabbit

605
00:25:08,640 --> 00:25:10,960
hole goes

606
00:25:10,960 --> 00:25:14,159
so let's do that

607
00:25:14,159 --> 00:25:15,919
approve um

608
00:25:15,919 --> 00:25:18,080
let's improve upon our

609
00:25:18,080 --> 00:25:21,200
current proof of concept by not

610
00:25:21,200 --> 00:25:23,360
providing three files in a zip or

611
00:25:23,360 --> 00:25:24,880
something like that or providing

612
00:25:24,880 --> 00:25:27,840
multiple files but to actually load this

613
00:25:27,840 --> 00:25:31,600
xll from a remote location

614
00:25:31,600 --> 00:25:33,279
but then we run into our very first

615
00:25:33,279 --> 00:25:35,120
problem

616
00:25:35,120 --> 00:25:38,080
register xll does not accept any uris or

617
00:25:38,080 --> 00:25:40,799
urls so you cannot start with http or

618
00:25:40,799 --> 00:25:42,720
https because

619
00:25:42,720 --> 00:25:44,880
well for obvious reasons

620
00:25:44,880 --> 00:25:47,440
excel doesn't want you to load from

621
00:25:47,440 --> 00:25:49,840
a remote dll

622
00:25:49,840 --> 00:25:52,640
over https

623
00:25:52,640 --> 00:25:57,039
but luckily unc paths like also

624
00:25:57,039 --> 00:25:59,360
including smb were allowed

625
00:25:59,360 --> 00:26:02,000
and this gave another uh interesting

626
00:26:02,000 --> 00:26:04,799
appro of another interesting possibility

627
00:26:04,799 --> 00:26:06,880
is to use webdav

628
00:26:06,880 --> 00:26:08,840
through uh

629
00:26:08,840 --> 00:26:10,640
unc

630
00:26:10,640 --> 00:26:14,000
though webdav requires you to have the

631
00:26:14,000 --> 00:26:16,240
web client service on the target pc

632
00:26:16,240 --> 00:26:18,159
running

633
00:26:18,159 --> 00:26:20,640
and starting web clients requires a

634
00:26:20,640 --> 00:26:23,039
manual trigger or the manual start of

635
00:26:23,039 --> 00:26:25,520
this service because it doesn't start

636
00:26:25,520 --> 00:26:29,440
automatically when the system boots up

637
00:26:29,440 --> 00:26:30,799
furthermore it also requires

638
00:26:30,799 --> 00:26:33,360
administrative privileges to start it

639
00:26:33,360 --> 00:26:34,880
manually

640
00:26:34,880 --> 00:26:36,080
luckily

641
00:26:36,080 --> 00:26:38,720
the trigger the the way there is ways to

642
00:26:38,720 --> 00:26:40,480
start it using a trigger that do not

643
00:26:40,480 --> 00:26:43,200
require administrative privileges

644
00:26:43,200 --> 00:26:44,159
so

645
00:26:44,159 --> 00:26:46,960
we have a choice now either to send uh

646
00:26:46,960 --> 00:26:48,880
an additional file or something that

647
00:26:48,880 --> 00:26:49,840
would

648
00:26:49,840 --> 00:26:52,559
maybe trigger

649
00:26:52,640 --> 00:26:54,720
the web client service

650
00:26:54,720 --> 00:26:56,080
for instance

651
00:26:56,080 --> 00:26:58,720
a word document with a remote template

652
00:26:58,720 --> 00:27:00,480
could work

653
00:27:00,480 --> 00:27:03,360
or we create a small excel gadget to

654
00:27:03,360 --> 00:27:07,039
start this web client service

655
00:27:07,039 --> 00:27:09,200
let's do that

656
00:27:09,200 --> 00:27:11,760
so there's a couple of gadgets you can

657
00:27:11,760 --> 00:27:14,000
use in excel to trigger the web client

658
00:27:14,000 --> 00:27:16,320
service and one of which

659
00:27:16,320 --> 00:27:19,200
is a very simple one you just reference

660
00:27:19,200 --> 00:27:20,799
a remote cell

661
00:27:20,799 --> 00:27:23,360
so instead of typing a formula or

662
00:27:23,360 --> 00:27:25,039
instead of

663
00:27:25,039 --> 00:27:27,840
just putting some text into a cell you

664
00:27:27,840 --> 00:27:30,799
just tell excel look the content of the

665
00:27:30,799 --> 00:27:32,000
cell

666
00:27:32,000 --> 00:27:33,760
we have it but it's just all the way

667
00:27:33,760 --> 00:27:36,880
over there on this http address

668
00:27:36,880 --> 00:27:39,360
and excel with fetched content

669
00:27:39,360 --> 00:27:42,559
this triggering web client

670
00:27:42,559 --> 00:27:47,279
and we could use this in a certain way

671
00:27:47,279 --> 00:27:49,440
like remember that the workbook would

672
00:27:49,440 --> 00:27:51,039
close

673
00:27:51,039 --> 00:27:54,000
when no valid excel is found

674
00:27:54,000 --> 00:27:56,240
we can abuse the error message being

675
00:27:56,240 --> 00:27:58,320
shown just before that so

676
00:27:58,320 --> 00:28:01,679
the first time a user would double click

677
00:28:01,679 --> 00:28:03,120
on this

678
00:28:03,120 --> 00:28:05,679
infected add-in

679
00:28:05,679 --> 00:28:09,440
register xll would not be able to reach

680
00:28:09,440 --> 00:28:10,640
the webdav

681
00:28:10,640 --> 00:28:12,559
location because web client is not

682
00:28:12,559 --> 00:28:13,760
running

683
00:28:13,760 --> 00:28:16,320
it would try to load an error message

684
00:28:16,320 --> 00:28:18,880
from this remote location

685
00:28:18,880 --> 00:28:20,960
triggering web clients and then the

686
00:28:20,960 --> 00:28:23,360
workbook would close

687
00:28:23,360 --> 00:28:26,640
the second time our target would double

688
00:28:26,640 --> 00:28:30,080
click on this add-in

689
00:28:30,080 --> 00:28:32,880
register xll will be able to find this

690
00:28:32,880 --> 00:28:35,919
remote webdav location over http or

691
00:28:35,919 --> 00:28:37,360
https

692
00:28:37,360 --> 00:28:39,919
and then our malicious xll is loaded

693
00:28:39,919 --> 00:28:41,919
into the excel memory

694
00:28:41,919 --> 00:28:45,840
of course this would require some

695
00:28:45,840 --> 00:28:48,080
social engineering or phishing or just a

696
00:28:48,080 --> 00:28:50,159
user that is just really happy to see

697
00:28:50,159 --> 00:28:51,440
what we have

698
00:28:51,440 --> 00:28:52,399
in this

699
00:28:52,399 --> 00:28:54,880
excel sheet

700
00:28:54,880 --> 00:28:57,200
so this requires a user to

701
00:28:57,200 --> 00:29:00,480
open this file twice

702
00:29:00,480 --> 00:29:03,200
which is good it's already better

703
00:29:03,200 --> 00:29:04,960
but we want something more

704
00:29:04,960 --> 00:29:07,279
we just want something really nice like

705
00:29:07,279 --> 00:29:10,640
one file that fully exploits the targets

706
00:29:10,640 --> 00:29:12,960
just after this enable macro button is

707
00:29:12,960 --> 00:29:16,640
clicked that works on any office version

708
00:29:16,640 --> 00:29:21,919
any windows host version 32-bit 64-bit

709
00:29:21,919 --> 00:29:24,840
we basically want a golden

710
00:29:24,840 --> 00:29:28,080
bullet let's see if we can find that

711
00:29:28,080 --> 00:29:30,559
luckily there is one function we haven't

712
00:29:30,559 --> 00:29:33,200
looked into yet

713
00:29:33,200 --> 00:29:35,039
let's do a small recap so the first

714
00:29:35,039 --> 00:29:37,440
function has some constants then there

715
00:29:37,440 --> 00:29:38,559
is some

716
00:29:38,559 --> 00:29:40,720
os variables being set

717
00:29:40,720 --> 00:29:43,520
then we have our vulnerable register xl

718
00:29:43,520 --> 00:29:45,840
function and then the last function is

719
00:29:45,840 --> 00:29:48,640
actually very short

720
00:29:48,640 --> 00:29:51,600
the last function

721
00:29:52,640 --> 00:29:54,559
does a register

722
00:29:54,559 --> 00:29:56,480
id of a

723
00:29:56,480 --> 00:29:59,760
performs and execute xl4 macro

724
00:29:59,760 --> 00:30:02,000
on a concatenated string

725
00:30:02,000 --> 00:30:04,399
and this string that is being fed into

726
00:30:04,399 --> 00:30:05,120
the

727
00:30:05,120 --> 00:30:09,840
uh execute xl4 macro function

728
00:30:10,399 --> 00:30:12,559
is being concatenated from some static

729
00:30:12,559 --> 00:30:14,640
content and some content that was

730
00:30:14,640 --> 00:30:17,919
originally found in the cells

731
00:30:18,080 --> 00:30:21,200
this is a classic command injection

732
00:30:21,200 --> 00:30:24,399
an interesting one because excel 4

733
00:30:24,399 --> 00:30:26,720
macros at the time did not have any amsi

734
00:30:26,720 --> 00:30:28,159
support

735
00:30:28,159 --> 00:30:30,559
um z anti-malware scanning interface is

736
00:30:30,559 --> 00:30:32,399
an interface for

737
00:30:32,399 --> 00:30:36,000
uh for instance av and edr vendors to

738
00:30:36,000 --> 00:30:38,240
hook into and try to detect malicious

739
00:30:38,240 --> 00:30:39,440
activity

740
00:30:39,440 --> 00:30:42,000
so this is a stealthy way to continue

741
00:30:42,000 --> 00:30:45,440
our our fishing

742
00:30:45,600 --> 00:30:48,959
let's look at the normal flow

743
00:30:49,039 --> 00:30:50,799
and looking at the normal flow you'll

744
00:30:50,799 --> 00:30:52,000
see that

745
00:30:52,000 --> 00:30:54,799
register of the the verify open function

746
00:30:54,799 --> 00:30:57,519
with register xll provides some kind of

747
00:30:57,519 --> 00:31:00,320
uh input validation

748
00:31:00,320 --> 00:31:04,080
because if no valid xll is found

749
00:31:04,080 --> 00:31:05,600
and then

750
00:31:05,600 --> 00:31:07,519
we're not well we're going to close the

751
00:31:07,519 --> 00:31:10,399
workbook and end our execution before

752
00:31:10,399 --> 00:31:12,480
register function id

753
00:31:12,480 --> 00:31:15,760
function is being called

754
00:31:15,919 --> 00:31:18,640
so we already need to know in advance

755
00:31:18,640 --> 00:31:19,600
what's

756
00:31:19,600 --> 00:31:22,799
our target that our target has a valid

757
00:31:22,799 --> 00:31:23,840
xll

758
00:31:23,840 --> 00:31:26,559
and where it is located

759
00:31:26,559 --> 00:31:29,679
luckily we don't really need to

760
00:31:29,679 --> 00:31:30,880
because

761
00:31:30,880 --> 00:31:34,320
excel has a custom xll and dll search

762
00:31:34,320 --> 00:31:35,519
path

763
00:31:35,519 --> 00:31:38,000
so it also takes into account its own

764
00:31:38,000 --> 00:31:39,760
installation directory

765
00:31:39,760 --> 00:31:42,159
and using the default values

766
00:31:42,159 --> 00:31:44,080
we already know where

767
00:31:44,080 --> 00:31:47,200
an xll is located it's located in the

768
00:31:47,200 --> 00:31:50,240
library analysis folder

769
00:31:50,240 --> 00:31:52,480
so we're going to use that

770
00:31:52,480 --> 00:31:55,039
let's see if we can

771
00:31:55,039 --> 00:31:56,880
still use this path

772
00:31:56,880 --> 00:31:58,399
but also

773
00:31:58,399 --> 00:32:02,000
add some malicious code into that

774
00:32:02,000 --> 00:32:05,039
let's see if we can pop a calculator

775
00:32:05,039 --> 00:32:07,679
application

776
00:32:07,919 --> 00:32:09,840
we're going to try to do that by

777
00:32:09,840 --> 00:32:12,000
injecting some code

778
00:32:12,000 --> 00:32:16,399
and then dear traversing it back

779
00:32:16,399 --> 00:32:18,480
so we're going to try we're going to put

780
00:32:18,480 --> 00:32:20,480
our code in a dirt reversal

781
00:32:20,480 --> 00:32:24,000
register xll will perform path uh

782
00:32:24,000 --> 00:32:26,399
simplification normalization

783
00:32:26,399 --> 00:32:27,440
and thus

784
00:32:27,440 --> 00:32:29,120
remove the code

785
00:32:29,120 --> 00:32:31,519
ending up with a valid path

786
00:32:31,519 --> 00:32:32,480
but

787
00:32:32,480 --> 00:32:35,840
register of execute excel 4 macro will

788
00:32:35,840 --> 00:32:38,399
concatenate everything together as if it

789
00:32:38,399 --> 00:32:40,080
is a normal string

790
00:32:40,080 --> 00:32:42,399
and then feed it to the function we can

791
00:32:42,399 --> 00:32:43,679
escape

792
00:32:43,679 --> 00:32:45,919
the quotes

793
00:32:45,919 --> 00:32:47,120
and

794
00:32:47,120 --> 00:32:50,000
basically get code execution so a new

795
00:32:50,000 --> 00:32:52,480
excel window of a new

796
00:32:52,480 --> 00:32:55,120
calculator window is opening we learned

797
00:32:55,120 --> 00:32:56,559
we can put

798
00:32:56,559 --> 00:32:59,760
malicious code into a dirt reversal

799
00:32:59,760 --> 00:33:00,640
now

800
00:33:00,640 --> 00:33:01,679
let's go

801
00:33:01,679 --> 00:33:03,679
to

802
00:33:03,679 --> 00:33:06,640
uh remote code execution

803
00:33:06,640 --> 00:33:09,360
let's host our xll on a web.share

804
00:33:09,360 --> 00:33:14,159
and use the same trick to register it

805
00:33:14,159 --> 00:33:15,760
we have to escape

806
00:33:15,760 --> 00:33:17,840
we have to perform some more

807
00:33:17,840 --> 00:33:19,200
traversal because we're using

808
00:33:19,200 --> 00:33:20,880
backslashes

809
00:33:20,880 --> 00:33:22,880
a string call will look like this and

810
00:33:22,880 --> 00:33:25,600
this will get executed

811
00:33:25,600 --> 00:33:27,440
and that would work sometimes

812
00:33:27,440 --> 00:33:28,880
because

813
00:33:28,880 --> 00:33:30,240
here as well

814
00:33:30,240 --> 00:33:32,399
register is not allowed

815
00:33:32,399 --> 00:33:34,159
to

816
00:33:34,159 --> 00:33:36,840
to start the web client

817
00:33:36,840 --> 00:33:40,320
service but luckily we can use

818
00:33:40,320 --> 00:33:43,120
the same trick by referencing a remote

819
00:33:43,120 --> 00:33:44,480
cell

820
00:33:44,480 --> 00:33:46,240
we are going to

821
00:33:46,240 --> 00:33:48,559
use the function run

822
00:33:48,559 --> 00:33:51,519
so we are going to use a function run on

823
00:33:51,519 --> 00:33:53,440
a remote

824
00:33:53,440 --> 00:33:55,039
excel sheet

825
00:33:55,039 --> 00:33:58,080
and reference for instance an empty cell

826
00:33:58,080 --> 00:34:00,720
and then we're going to use register and

827
00:34:00,720 --> 00:34:03,120
this one works

828
00:34:03,120 --> 00:34:05,519
victory

829
00:34:05,519 --> 00:34:07,840
run triggers the web client service and

830
00:34:07,840 --> 00:34:11,760
register loads to 64-bit xll

831
00:34:11,760 --> 00:34:12,960
so now

832
00:34:12,960 --> 00:34:15,040
we want to make our final proof of

833
00:34:15,040 --> 00:34:17,119
concept

834
00:34:17,119 --> 00:34:19,359
before that i also want to mention that

835
00:34:19,359 --> 00:34:22,159
it's also possible to load an uh add-in

836
00:34:22,159 --> 00:34:23,599
macro or a

837
00:34:23,599 --> 00:34:26,320
a macro sheet enabled sheet

838
00:34:26,320 --> 00:34:28,639
and well this would be an option and

839
00:34:28,639 --> 00:34:30,800
maybe a bit of an easier one but you

840
00:34:30,800 --> 00:34:31,839
will still

841
00:34:31,839 --> 00:34:34,960
remain in in macro land i want to load a

842
00:34:34,960 --> 00:34:37,440
portable executable

843
00:34:37,440 --> 00:34:38,800
let's do that

844
00:34:38,800 --> 00:34:40,239
so first

845
00:34:40,239 --> 00:34:40,960
we're

846
00:34:40,960 --> 00:34:43,599
we're going to start with a string like

847
00:34:43,599 --> 00:34:45,199
the first part of our exploit string

848
00:34:45,199 --> 00:34:47,359
will be put in a cell then we're going

849
00:34:47,359 --> 00:34:49,520
to take another cell that will be a

850
00:34:49,520 --> 00:34:52,320
formula that will calculate which url to

851
00:34:52,320 --> 00:34:56,399
use a 64-bit url or 32-bit url and then

852
00:34:56,399 --> 00:34:58,640
we'll gonna end with another static

853
00:34:58,640 --> 00:35:01,040
string we're going to concatenate those

854
00:35:01,040 --> 00:35:03,119
three cells together

855
00:35:03,119 --> 00:35:06,720
and then thus have our exploit code

856
00:35:06,720 --> 00:35:09,280
and this worked brilliantly well against

857
00:35:09,280 --> 00:35:13,359
64 bits xlls 32 bits of a 64-bit excel

858
00:35:13,359 --> 00:35:16,160
32-bit excel on various platforms and

859
00:35:16,160 --> 00:35:18,720
oss

860
00:35:18,880 --> 00:35:19,680
so

861
00:35:19,680 --> 00:35:22,960
we found xl4 micro injection

862
00:35:22,960 --> 00:35:25,839
we used the verify open bypass

863
00:35:25,839 --> 00:35:28,560
of we bypassed verify open by using a

864
00:35:28,560 --> 00:35:31,599
dir traversal and by referencing a

865
00:35:31,599 --> 00:35:33,520
remote

866
00:35:33,520 --> 00:35:35,760
relative reference

867
00:35:35,760 --> 00:35:38,079
and we now have one file that we can

868
00:35:38,079 --> 00:35:41,119
send to our target

869
00:35:42,240 --> 00:35:44,320
this is interesting because it allows

870
00:35:44,320 --> 00:35:46,240
for little to no pre

871
00:35:46,240 --> 00:35:47,280
knowledge

872
00:35:47,280 --> 00:35:50,400
to perform our fishing

873
00:35:50,960 --> 00:35:53,040
and when we tried it

874
00:35:53,040 --> 00:35:57,960
we noticed something something strange

875
00:35:58,640 --> 00:36:00,880
when this when testing our

876
00:36:00,880 --> 00:36:03,520
weaponized version during engagements

877
00:36:03,520 --> 00:36:05,280
we noticed that

878
00:36:05,280 --> 00:36:08,720
the users of some of our clients

879
00:36:08,720 --> 00:36:12,000
did not receive any warning message or

880
00:36:12,000 --> 00:36:14,480
security notification at all

881
00:36:14,480 --> 00:36:16,640
while they should have

882
00:36:16,640 --> 00:36:20,720
according to the settings that we saw

883
00:36:20,800 --> 00:36:23,119
and this is because the publisher

884
00:36:23,119 --> 00:36:24,960
that signed the

885
00:36:24,960 --> 00:36:28,640
analysis tool pack macro was already

886
00:36:28,640 --> 00:36:31,040
noted as trusted

887
00:36:31,040 --> 00:36:33,200
and this was required in a few very

888
00:36:33,200 --> 00:36:34,320
weird

889
00:36:34,320 --> 00:36:38,000
few special border cases if you want to

890
00:36:38,000 --> 00:36:39,520
install

891
00:36:39,520 --> 00:36:41,440
visual studio of if you want to do an

892
00:36:41,440 --> 00:36:44,240
offline installation of visual studio

893
00:36:44,240 --> 00:36:47,200
on older operating systems or if you

894
00:36:47,200 --> 00:36:49,200
have some security patches that you want

895
00:36:49,200 --> 00:36:51,119
to install offline

896
00:36:51,119 --> 00:36:53,119
then you need to add this certificate to

897
00:36:53,119 --> 00:36:55,440
your trust store as well

898
00:36:55,440 --> 00:36:56,480
though

899
00:36:56,480 --> 00:36:59,440
you only have to add it to your

900
00:36:59,440 --> 00:37:02,160
your operating systems trust store

901
00:37:02,160 --> 00:37:03,119
not

902
00:37:03,119 --> 00:37:05,280
additionally to your office

903
00:37:05,280 --> 00:37:06,240
store

904
00:37:06,240 --> 00:37:08,720
and also not on all end points just on

905
00:37:08,720 --> 00:37:10,320
the relevant ones

906
00:37:10,320 --> 00:37:11,480
so there were also some

907
00:37:11,480 --> 00:37:15,839
misconfigurations found at these clients

908
00:37:19,119 --> 00:37:20,720
and these misconfigurations led to a

909
00:37:20,720 --> 00:37:22,880
very dangerous situation because if i

910
00:37:22,880 --> 00:37:25,359
would make an xls

911
00:37:25,359 --> 00:37:26,160
then

912
00:37:26,160 --> 00:37:28,160
it would not be possible or it would be

913
00:37:28,160 --> 00:37:30,160
very difficult for end user to see if

914
00:37:30,160 --> 00:37:32,960
there's macros in enabled or not because

915
00:37:32,960 --> 00:37:34,400
once you double click you don't get a

916
00:37:34,400 --> 00:37:38,320
warning and it just opens

917
00:37:39,760 --> 00:37:43,280
so how did microsoft mitigate and patch

918
00:37:43,280 --> 00:37:45,680
this issue

919
00:37:45,680 --> 00:37:48,079
this wasn't necessarily an easy issue to

920
00:37:48,079 --> 00:37:49,280
patch

921
00:37:49,280 --> 00:37:50,800
because

922
00:37:50,800 --> 00:37:52,119
every

923
00:37:52,119 --> 00:37:54,480
semi-semi-annual release

924
00:37:54,480 --> 00:37:57,119
there were new micro new add-in sheets

925
00:37:57,119 --> 00:38:00,000
signed by microsoft

926
00:38:00,000 --> 00:38:02,640
furthermore looking at the samples we

927
00:38:02,640 --> 00:38:04,800
found online we noticed that this

928
00:38:04,800 --> 00:38:07,040
vulnerability and these signatures were

929
00:38:07,040 --> 00:38:10,480
out there already for more than 10 years

930
00:38:10,480 --> 00:38:11,760
furthermore

931
00:38:11,760 --> 00:38:14,000
these signatures or this these sheets

932
00:38:14,000 --> 00:38:16,160
were timestamped signs

933
00:38:16,160 --> 00:38:18,160
meaning that the signature is valid

934
00:38:18,160 --> 00:38:20,560
indefinitely

935
00:38:20,560 --> 00:38:21,520
and

936
00:38:21,520 --> 00:38:24,000
office doesn't support any certificate

937
00:38:24,000 --> 00:38:26,000
revocation list

938
00:38:26,000 --> 00:38:28,079
meaning that by design

939
00:38:28,079 --> 00:38:32,760
there is no revocation option

940
00:38:33,280 --> 00:38:34,480
it took

941
00:38:34,480 --> 00:38:37,280
it took microsoft quite a while to

942
00:38:37,280 --> 00:38:39,119
come up with a patch and in the meantime

943
00:38:39,119 --> 00:38:41,280
they assigned a cve

944
00:38:41,280 --> 00:38:43,760
in the category remote code execution

945
00:38:43,760 --> 00:38:45,920
and they patched it using a couple of

946
00:38:45,920 --> 00:38:50,079
different methods combined together

947
00:38:50,079 --> 00:38:53,200
the first one of course is they

948
00:38:53,200 --> 00:38:55,920
patched the vulnerable vba code

949
00:38:55,920 --> 00:38:58,800
now instead of using cell references

950
00:38:58,800 --> 00:38:59,839
they just

951
00:38:59,839 --> 00:39:02,560
hard coded the correct values into the

952
00:39:02,560 --> 00:39:05,839
vba that was signed

953
00:39:06,800 --> 00:39:10,640
the execute excel 4 macro function

954
00:39:10,640 --> 00:39:12,800
did not need much more

955
00:39:12,800 --> 00:39:14,720
much more patching after that after

956
00:39:14,720 --> 00:39:17,040
everything was hard coded but even then

957
00:39:17,040 --> 00:39:19,040
they also did

958
00:39:19,040 --> 00:39:22,800
like as quote escaping

959
00:39:23,599 --> 00:39:25,119
and

960
00:39:25,119 --> 00:39:28,560
they hardcoded blocked all the old

961
00:39:28,560 --> 00:39:29,680
add-ins

962
00:39:29,680 --> 00:39:32,480
from from running

963
00:39:32,480 --> 00:39:34,960
and they added another option with a

964
00:39:34,960 --> 00:39:36,480
registry setting

965
00:39:36,480 --> 00:39:39,200
to prevent any signing downgrade

966
00:39:39,200 --> 00:39:40,400
so now

967
00:39:40,400 --> 00:39:42,880
you cannot go from a science

968
00:39:42,880 --> 00:39:44,000
context

969
00:39:44,000 --> 00:39:46,800
into an unsigned context so you cannot

970
00:39:46,800 --> 00:39:49,599
load an unsigned xll from a science

971
00:39:49,599 --> 00:39:53,560
add-in for instance

972
00:39:56,000 --> 00:39:58,480
let's wrap it up with uh with the main

973
00:39:58,480 --> 00:40:01,680
takeaways from this talk

974
00:40:03,440 --> 00:40:04,800
we accomplished

975
00:40:04,800 --> 00:40:07,040
to explore some of the uncharted legacy

976
00:40:07,040 --> 00:40:09,280
features of excel

977
00:40:09,280 --> 00:40:11,119
these resulted in a vulnerability that

978
00:40:11,119 --> 00:40:12,720
allowed an attacker

979
00:40:12,720 --> 00:40:13,440
to

980
00:40:13,440 --> 00:40:15,839
craft signed phishing payloads where

981
00:40:15,839 --> 00:40:17,920
users would see that it would be

982
00:40:17,920 --> 00:40:20,720
microsoft signed by microsoft or no

983
00:40:20,720 --> 00:40:22,720
warning at all

984
00:40:22,720 --> 00:40:24,960
it would work against almost any windows

985
00:40:24,960 --> 00:40:27,520
machine with office installed

986
00:40:27,520 --> 00:40:28,400
and

987
00:40:28,400 --> 00:40:31,040
it worked by injecting code into parts

988
00:40:31,040 --> 00:40:32,400
of the document

989
00:40:32,400 --> 00:40:34,720
which weren't signed so without

990
00:40:34,720 --> 00:40:37,359
invalidating a signature

991
00:40:37,359 --> 00:40:39,359
this vulnerability was in more than 10

992
00:40:39,359 --> 00:40:40,960
years

993
00:40:40,960 --> 00:40:43,119
and

994
00:40:43,119 --> 00:40:44,960
we believe that there is many more of

995
00:40:44,960 --> 00:40:47,200
these kind of documents signed documents

996
00:40:47,200 --> 00:40:49,599
or other legacy features out there that

997
00:40:49,599 --> 00:40:51,520
are vulnerable

998
00:40:51,520 --> 00:40:54,640
so i hope that my talk was inspiring to

999
00:40:54,640 --> 00:40:57,040
you to go and find out

1000
00:40:57,040 --> 00:41:00,480
some of these more legacy features

1001
00:41:00,480 --> 00:41:03,960
thank you all

1002
00:41:06,800 --> 00:41:08,880
you

