1
00:00:01,850 --> 00:00:07,119
[Music]

2
00:00:07,120 --> 00:00:09,840
hello everyone my name is golan today

3
00:00:09,840 --> 00:00:11,599
we're going to explore the topic of

4
00:00:11,599 --> 00:00:13,040
digital signatures

5
00:00:13,040 --> 00:00:15,920
specifically we'll talk about pe files

6
00:00:15,920 --> 00:00:18,080
it's my first time here at zifcon i'm

7
00:00:18,080 --> 00:00:21,439
very glad to be here glad to see you all

8
00:00:21,439 --> 00:00:23,600
and let's begin

9
00:00:23,600 --> 00:00:24,320
now

10
00:00:24,320 --> 00:00:26,640
it's only fair that you also get to know

11
00:00:26,640 --> 00:00:29,199
me so a little bit about myself

12
00:00:29,199 --> 00:00:31,199
my name is golan cohen i work at

13
00:00:31,199 --> 00:00:33,680
checkpoint which is based in tel aviv

14
00:00:33,680 --> 00:00:35,920
israel

15
00:00:35,920 --> 00:00:38,399
today i'm in charge of researching and

16
00:00:38,399 --> 00:00:40,879
protecting infections that originate

17
00:00:40,879 --> 00:00:43,360
from documents and email

18
00:00:43,360 --> 00:00:46,320
but at the time of this research i was a

19
00:00:46,320 --> 00:00:47,840
malware analyst

20
00:00:47,840 --> 00:00:50,239
and as part of my job i monitored

21
00:00:50,239 --> 00:00:52,239
suspicious files and our clients

22
00:00:52,239 --> 00:00:54,320
telemetry

23
00:00:54,320 --> 00:00:56,879
we also wrote protections and behavior

24
00:00:56,879 --> 00:01:00,559
rules to detect those threats

25
00:01:00,559 --> 00:01:02,559
also i recently became a father and here

26
00:01:02,559 --> 00:01:04,000
you can see my daughter helped me

27
00:01:04,000 --> 00:01:06,400
helping me out with this presentation

28
00:01:06,400 --> 00:01:09,520
and on my free time i like to

29
00:01:09,520 --> 00:01:11,920
explore electronics i like to take

30
00:01:11,920 --> 00:01:14,000
things apart try to put them back

31
00:01:14,000 --> 00:01:16,320
together

32
00:01:16,320 --> 00:01:18,000
and that's it let's

33
00:01:18,000 --> 00:01:19,280
begin

34
00:01:19,280 --> 00:01:22,479
this is our agenda for the talk uh first

35
00:01:22,479 --> 00:01:24,960
i'll explain how this research started

36
00:01:24,960 --> 00:01:27,439
why we got into this

37
00:01:27,439 --> 00:01:29,680
next we'll talk about the infection

38
00:01:29,680 --> 00:01:31,920
chain this all started with a specific

39
00:01:31,920 --> 00:01:34,000
campaign that we found so we'll go

40
00:01:34,000 --> 00:01:35,439
through uh this

41
00:01:35,439 --> 00:01:37,360
each of the steps that the threat actor

42
00:01:37,360 --> 00:01:38,799
took

43
00:01:38,799 --> 00:01:40,799
i'll uh explain what uh digital

44
00:01:40,799 --> 00:01:42,640
signatures are and why they're important

45
00:01:42,640 --> 00:01:45,200
specifically again for pe files

46
00:01:45,200 --> 00:01:46,960
we'll talk about the file signature

47
00:01:46,960 --> 00:01:49,920
vulnerability that was used in this case

48
00:01:49,920 --> 00:01:52,240
which is very easy to uh

49
00:01:52,240 --> 00:01:53,759
to exploit and i'll show you how to do

50
00:01:53,759 --> 00:01:54,479
that

51
00:01:54,479 --> 00:01:57,200
and at last we'll summarize and uh i'll

52
00:01:57,200 --> 00:02:00,479
give my conclusions

53
00:02:00,640 --> 00:02:04,560
so um how did this research start um

54
00:02:04,560 --> 00:02:07,360
somewhere in september 2021 one of my

55
00:02:07,360 --> 00:02:10,080
teammates sent me this article article

56
00:02:10,080 --> 00:02:11,280
this article

57
00:02:11,280 --> 00:02:14,160
was written by sentinel one labs

58
00:02:14,160 --> 00:02:16,879
and it was about a particular uh malware

59
00:02:16,879 --> 00:02:18,239
campaign

60
00:02:18,239 --> 00:02:20,400
a z-loader campaign uh we'll get to what

61
00:02:20,400 --> 00:02:23,120
z-loader is in a few slides it's a

62
00:02:23,120 --> 00:02:25,440
basically a banking trojan

63
00:02:25,440 --> 00:02:28,080
and just as a high overview of that uh

64
00:02:28,080 --> 00:02:30,400
the previous campaign

65
00:02:30,400 --> 00:02:33,280
it started with an installer um it's a

66
00:02:33,280 --> 00:02:36,280
teamviewer.msi

67
00:02:36,319 --> 00:02:39,200
next we see that we ran the thread

68
00:02:39,200 --> 00:02:42,080
actors ran some batch scripts

69
00:02:42,080 --> 00:02:44,400
we see they disabled windows defender

70
00:02:44,400 --> 00:02:46,720
service and made some modifications to

71
00:02:46,720 --> 00:02:48,720
it and at last

72
00:02:48,720 --> 00:02:51,840
z loader payload was injected into msi

73
00:02:51,840 --> 00:02:53,040
exec

74
00:02:53,040 --> 00:02:56,720
using a specific malicious dll so just

75
00:02:56,720 --> 00:02:58,959
remember this high overview because

76
00:02:58,959 --> 00:03:00,560
we're going to see similar steps that

77
00:03:00,560 --> 00:03:04,959
are taken in the the next campaign

78
00:03:04,959 --> 00:03:06,400
um

79
00:03:06,400 --> 00:03:08,560
this is also from this article this is

80
00:03:08,560 --> 00:03:10,560
uh one of the scripts that the thread

81
00:03:10,560 --> 00:03:13,920
actors ran on the machine uh this script

82
00:03:13,920 --> 00:03:16,239
was in charge of making some changes to

83
00:03:16,239 --> 00:03:18,640
windows defender adding some exclusions

84
00:03:18,640 --> 00:03:21,760
to it i'm sorry for for the small font

85
00:03:21,760 --> 00:03:25,280
but um you can see some pretty malicious

86
00:03:25,280 --> 00:03:28,480
commands here like trying to exclude all

87
00:03:28,480 --> 00:03:30,400
dot exit files from being scanned by

88
00:03:30,400 --> 00:03:32,959
windows defender

89
00:03:32,959 --> 00:03:36,000
another funny thing that i found

90
00:03:36,000 --> 00:03:38,480
is like many of us we jump into writing

91
00:03:38,480 --> 00:03:40,560
code without reading the documentation

92
00:03:40,560 --> 00:03:44,000
first they try to also exclude exit and

93
00:03:44,000 --> 00:03:47,040
dll files using a wildcard but

94
00:03:47,040 --> 00:03:49,120
this argument does not accept a wildcard

95
00:03:49,120 --> 00:03:52,080
so it's it's a funny thing that uh

96
00:03:52,080 --> 00:03:54,720
that i found

97
00:03:55,599 --> 00:03:58,560
so based on this script that we just saw

98
00:03:58,560 --> 00:04:01,040
i wanted to search and try to look for

99
00:04:01,040 --> 00:04:02,640
similar scripts that

100
00:04:02,640 --> 00:04:04,000
are using the same

101
00:04:04,000 --> 00:04:05,920
same type of attack

102
00:04:05,920 --> 00:04:07,360
and i found

103
00:04:07,360 --> 00:04:10,080
another script that was similar but had

104
00:04:10,080 --> 00:04:12,959
some other commands so this first

105
00:04:12,959 --> 00:04:15,519
detection that i found

106
00:04:15,519 --> 00:04:18,399
we see also exclusion for msi exec if

107
00:04:18,399 --> 00:04:19,759
you recall

108
00:04:19,759 --> 00:04:21,600
what the threat actors did is they

109
00:04:21,600 --> 00:04:24,080
injected the malicious payload into msi

110
00:04:24,080 --> 00:04:25,199
exec

111
00:04:25,199 --> 00:04:27,360
they disabled the scanning of downloaded

112
00:04:27,360 --> 00:04:28,880
files and attachments by windows

113
00:04:28,880 --> 00:04:30,960
defender they disable real-time

114
00:04:30,960 --> 00:04:33,280
monitoring and many many other commands

115
00:04:33,280 --> 00:04:34,639
we'll take a look at them in just a

116
00:04:34,639 --> 00:04:38,160
second but from this first detection we

117
00:04:38,160 --> 00:04:40,400
were able to map out the entire new

118
00:04:40,400 --> 00:04:43,600
campaign of z-loader

119
00:04:43,600 --> 00:04:46,560
so this is what this new campaign looked

120
00:04:46,560 --> 00:04:48,240
like

121
00:04:48,240 --> 00:04:51,120
we'll go through each of the steps

122
00:04:51,120 --> 00:04:52,960
briefly

123
00:04:52,960 --> 00:04:54,880
at first we see

124
00:04:54,880 --> 00:04:56,960
there's a process called a terror agent

125
00:04:56,960 --> 00:04:59,199
that ran on the machine

126
00:04:59,199 --> 00:05:01,280
this attack agent ran a few batch

127
00:05:01,280 --> 00:05:02,639
scripts

128
00:05:02,639 --> 00:05:05,440
we see some downloaded downloading of

129
00:05:05,440 --> 00:05:07,520
executable files and dlls

130
00:05:07,520 --> 00:05:10,720
and at last we see also a malicious dll

131
00:05:10,720 --> 00:05:15,039
that injects z-loader into msi example

132
00:05:15,039 --> 00:05:15,919
so

133
00:05:15,919 --> 00:05:19,680
um what is zotero a terra agent a simple

134
00:05:19,680 --> 00:05:22,560
google search led us to atera's website

135
00:05:22,560 --> 00:05:25,440
atera is a software company also based

136
00:05:25,440 --> 00:05:28,080
in israel so close to home

137
00:05:28,080 --> 00:05:31,120
and what they do is they do rmm software

138
00:05:31,120 --> 00:05:33,680
which is for it professionals what is

139
00:05:33,680 --> 00:05:36,240
rmm it's remote monitoring and

140
00:05:36,240 --> 00:05:38,880
management software it allows them for

141
00:05:38,880 --> 00:05:41,360
remote access and controlling of their

142
00:05:41,360 --> 00:05:43,360
customers computers

143
00:05:43,360 --> 00:05:45,440
and you can also try this software for

144
00:05:45,440 --> 00:05:47,600
free you can sign up on the website and

145
00:05:47,600 --> 00:05:50,479
get your free trial account by the way

146
00:05:50,479 --> 00:05:52,639
we'll use this minimap on the top right

147
00:05:52,639 --> 00:05:55,199
to keep track of where we are in this

148
00:05:55,199 --> 00:05:57,199
infection chain

149
00:05:57,199 --> 00:06:00,479
and just a nice anecdote

150
00:06:00,479 --> 00:06:03,039
terra has been known to use uh to be

151
00:06:03,039 --> 00:06:05,440
have been used previously by the conti

152
00:06:05,440 --> 00:06:06,560
group

153
00:06:06,560 --> 00:06:08,560
as an additional backdoor to computers

154
00:06:08,560 --> 00:06:11,120
that they've infected alongside with a

155
00:06:11,120 --> 00:06:13,759
cobol strike

156
00:06:13,759 --> 00:06:16,160
so uh we signed up for a free account on

157
00:06:16,160 --> 00:06:17,919
atera and we wanted to take a look at

158
00:06:17,919 --> 00:06:20,639
the functions that you could do on

159
00:06:20,639 --> 00:06:22,080
computers that have this software

160
00:06:22,080 --> 00:06:24,560
installed on there

161
00:06:24,560 --> 00:06:26,000
on the left here you can see some of the

162
00:06:26,000 --> 00:06:27,919
functions that

163
00:06:27,919 --> 00:06:30,319
you can run on the machine you can

164
00:06:30,319 --> 00:06:32,720
view the task manager you can

165
00:06:32,720 --> 00:06:35,520
start install processes you can

166
00:06:35,520 --> 00:06:37,840
download and upload files to the machine

167
00:06:37,840 --> 00:06:40,560
run scripts run powershell commands and

168
00:06:40,560 --> 00:06:43,120
many other actions

169
00:06:43,120 --> 00:06:45,120
and when you sign up for an account you

170
00:06:45,120 --> 00:06:47,680
can also create a custom installer this

171
00:06:47,680 --> 00:06:50,000
installer when installed on the machine

172
00:06:50,000 --> 00:06:51,759
will automatically connect that machine

173
00:06:51,759 --> 00:06:54,160
to your atera account so you will be

174
00:06:54,160 --> 00:06:57,039
able to control it

175
00:06:58,479 --> 00:07:00,400
next we see

176
00:07:00,400 --> 00:07:03,039
the atari agent process ran two scripts

177
00:07:03,039 --> 00:07:04,479
this is one of them it's called

178
00:07:04,479 --> 00:07:06,479
defender.bet defender with two r's

179
00:07:06,479 --> 00:07:08,639
that's how the uh

180
00:07:08,639 --> 00:07:11,599
adversaries uh called this script and we

181
00:07:11,599 --> 00:07:14,800
can see uh it had a it has about 10 more

182
00:07:14,800 --> 00:07:16,400
commands than the previous

183
00:07:16,400 --> 00:07:19,440
campaign that we saw

184
00:07:19,440 --> 00:07:22,000
we see at the bottom the exclusion for

185
00:07:22,000 --> 00:07:23,759
msi exec

186
00:07:23,759 --> 00:07:26,240
and we see at the top that they still

187
00:07:26,240 --> 00:07:28,080
didn't read the documentation and tried

188
00:07:28,080 --> 00:07:31,479
to use wildcards

189
00:07:32,240 --> 00:07:35,120
next we see a tear agent calling the

190
00:07:35,120 --> 00:07:39,039
loader.script now as uh

191
00:07:39,039 --> 00:07:40,639
it's pretty obvious this script is in

192
00:07:40,639 --> 00:07:43,440
charge of loading another script at the

193
00:07:43,440 --> 00:07:44,879
top we see

194
00:07:44,879 --> 00:07:47,759
this new script being downloaded and at

195
00:07:47,759 --> 00:07:50,400
the bottom we see some commands the some

196
00:07:50,400 --> 00:07:52,720
implementation of a trial and error way

197
00:07:52,720 --> 00:07:53,759
to uh

198
00:07:53,759 --> 00:07:57,039
to run this new script using a self ping

199
00:07:57,039 --> 00:07:58,960
instead of a sleep timer a sleep

200
00:07:58,960 --> 00:08:00,560
function

201
00:08:00,560 --> 00:08:02,160
now let's take a look at what this uh

202
00:08:02,160 --> 00:08:06,240
new script that they downloaded uh does

203
00:08:06,479 --> 00:08:09,280
now the this script is called new.bat

204
00:08:09,280 --> 00:08:10,720
and

205
00:08:10,720 --> 00:08:12,879
here they made us our job a little bit

206
00:08:12,879 --> 00:08:15,840
easier for us and they left us comments

207
00:08:15,840 --> 00:08:18,240
so from those comments we can easily see

208
00:08:18,240 --> 00:08:20,160
that the script

209
00:08:20,160 --> 00:08:21,440
first checks

210
00:08:21,440 --> 00:08:24,080
for admin privileges

211
00:08:24,080 --> 00:08:26,560
if we don't have admin then we kindly

212
00:08:26,560 --> 00:08:28,240
request the user to give us admin

213
00:08:28,240 --> 00:08:29,759
permissions

214
00:08:29,759 --> 00:08:31,840
once we have those permissions

215
00:08:31,840 --> 00:08:35,200
we download a new script and run it with

216
00:08:35,200 --> 00:08:38,240
elevated permissions

217
00:08:38,719 --> 00:08:41,519
now this uh new script this is where the

218
00:08:41,519 --> 00:08:43,360
money is this is where the the brain of

219
00:08:43,360 --> 00:08:45,920
the infection infection is

220
00:08:45,920 --> 00:08:48,399
and we'll break it down uh into a few

221
00:08:48,399 --> 00:08:50,800
categories

222
00:08:50,800 --> 00:08:52,880
at the top we can see we're adding some

223
00:08:52,880 --> 00:08:56,800
more exclusions into windows defender

224
00:08:56,800 --> 00:08:59,600
these exclusions are for certain folders

225
00:08:59,600 --> 00:09:01,920
where we will download some executable

226
00:09:01,920 --> 00:09:04,560
files and dlls

227
00:09:04,560 --> 00:09:07,360
we download those those files into

228
00:09:07,360 --> 00:09:09,839
our app data folder

229
00:09:09,839 --> 00:09:12,640
next we make some changes to the machine

230
00:09:12,640 --> 00:09:14,959
that we're infecting in order to make

231
00:09:14,959 --> 00:09:17,360
analyzing that machine just a little bit

232
00:09:17,360 --> 00:09:18,560
harder

233
00:09:18,560 --> 00:09:21,040
we disable task manager we disable

234
00:09:21,040 --> 00:09:22,480
command line

235
00:09:22,480 --> 00:09:25,839
registry tools and

236
00:09:25,839 --> 00:09:29,360
also disable run from the menu

237
00:09:29,360 --> 00:09:31,600
next we make some changes into the boot

238
00:09:31,600 --> 00:09:34,480
configuration

239
00:09:34,640 --> 00:09:37,519
now this line will dive into this line

240
00:09:37,519 --> 00:09:39,440
in the next slide it's a pretty

241
00:09:39,440 --> 00:09:41,680
important uh command

242
00:09:41,680 --> 00:09:44,399
i'll skip it for now and at last we will

243
00:09:44,399 --> 00:09:45,760
take care of

244
00:09:45,760 --> 00:09:48,240
persistence and download a bad script

245
00:09:48,240 --> 00:09:51,360
into the startup folder so what is this

246
00:09:51,360 --> 00:09:53,120
command that we skipped

247
00:09:53,120 --> 00:09:57,040
we see this command is running mshta on

248
00:09:57,040 --> 00:09:59,600
a file a dll file that we that was just

249
00:09:59,600 --> 00:10:02,160
downloaded

250
00:10:02,640 --> 00:10:04,800
now um if you're not familiar with the

251
00:10:04,800 --> 00:10:09,279
mshta mshta is a a program that is built

252
00:10:09,279 --> 00:10:12,079
into the operating system to windows and

253
00:10:12,079 --> 00:10:15,040
it stands for microsoft html application

254
00:10:15,040 --> 00:10:17,920
it's used to run hta files

255
00:10:17,920 --> 00:10:19,839
so the first question that we should be

256
00:10:19,839 --> 00:10:23,920
asking ourselves is how is mshta run on

257
00:10:23,920 --> 00:10:26,320
a dll file it's supposed to run on a dot

258
00:10:26,320 --> 00:10:29,040
hta file maybe this is actually an hta

259
00:10:29,040 --> 00:10:31,839
file and they just change the extension

260
00:10:31,839 --> 00:10:34,320
no it's a dll file

261
00:10:34,320 --> 00:10:36,399
so how is that possible

262
00:10:36,399 --> 00:10:39,519
now the next question that we had

263
00:10:39,519 --> 00:10:43,519
is uh mshta is as i said built into the

264
00:10:43,519 --> 00:10:45,440
to the operating system inside a system

265
00:10:45,440 --> 00:10:49,200
32 folder and it's assigned a program by

266
00:10:49,200 --> 00:10:50,800
microsoft

267
00:10:50,800 --> 00:10:52,600
and when we took a look at the

268
00:10:52,600 --> 00:10:55,760
app.contest.dll the file was downloaded

269
00:10:55,760 --> 00:10:58,240
by the script we saw that

270
00:10:58,240 --> 00:11:00,800
it was a dll and it was also signed by

271
00:11:00,800 --> 00:11:03,680
microsoft was a with a valid signature

272
00:11:03,680 --> 00:11:06,240
but when running these uh this command

273
00:11:06,240 --> 00:11:08,800
together we get the malicious payload

274
00:11:08,800 --> 00:11:12,560
injected into uh msi exec

275
00:11:12,560 --> 00:11:15,040
so how's that possible

276
00:11:15,040 --> 00:11:17,440
i don't think that microsoft released a

277
00:11:17,440 --> 00:11:18,480
malware

278
00:11:18,480 --> 00:11:20,800
so we wanted to uh to take a look at

279
00:11:20,800 --> 00:11:21,680
this

280
00:11:21,680 --> 00:11:23,440
a bit further

281
00:11:23,440 --> 00:11:25,680
but first um let's talk a little bit

282
00:11:25,680 --> 00:11:28,399
about digital signatures

283
00:11:28,399 --> 00:11:29,839
so

284
00:11:29,839 --> 00:11:31,680
what's a digital signature it's a

285
00:11:31,680 --> 00:11:34,000
mathematical mathematical scheme for

286
00:11:34,000 --> 00:11:36,320
verifying the authenticity of

287
00:11:36,320 --> 00:11:38,160
digital files

288
00:11:38,160 --> 00:11:40,079
it allows us to confirm that the file

289
00:11:40,079 --> 00:11:42,160
originated from the signer and has not

290
00:11:42,160 --> 00:11:44,640
been tampered with or changed since it

291
00:11:44,640 --> 00:11:47,279
left the steiner's computer

292
00:11:47,279 --> 00:11:48,880
and there's this entity called

293
00:11:48,880 --> 00:11:51,200
certificate authority which

294
00:11:51,200 --> 00:11:53,839
gives out and issues

295
00:11:53,839 --> 00:11:56,480
digital certificates in order to

296
00:11:56,480 --> 00:11:59,440
have us sign those files

297
00:11:59,440 --> 00:12:02,320
so how does the this whole process works

298
00:12:02,320 --> 00:12:06,079
we have a user a software developer um

299
00:12:06,079 --> 00:12:08,079
he wants to sign his software so he

300
00:12:08,079 --> 00:12:11,519
contacts one of many third-party

301
00:12:11,519 --> 00:12:14,079
trusted certificate authorities and

302
00:12:14,079 --> 00:12:16,160
registers with him once he registers

303
00:12:16,160 --> 00:12:18,959
with them he can get this digital

304
00:12:18,959 --> 00:12:22,240
certificate that will allow him to sign

305
00:12:22,240 --> 00:12:24,480
files

306
00:12:24,480 --> 00:12:28,160
um if we uh take another step and

307
00:12:28,160 --> 00:12:29,839
understand this process

308
00:12:29,839 --> 00:12:31,760
then we have joe joe is a software

309
00:12:31,760 --> 00:12:33,440
developer and he wants to sign his

310
00:12:33,440 --> 00:12:34,639
software

311
00:12:34,639 --> 00:12:37,360
so um he will use his personal private

312
00:12:37,360 --> 00:12:38,880
key

313
00:12:38,880 --> 00:12:41,360
and using this private key he can sign

314
00:12:41,360 --> 00:12:43,120
his file

315
00:12:43,120 --> 00:12:46,320
now we have bob who wants to use joe's

316
00:12:46,320 --> 00:12:49,279
software and make sure that the software

317
00:12:49,279 --> 00:12:51,839
is uh is valid and digitally signed by

318
00:12:51,839 --> 00:12:53,360
uh by joe

319
00:12:53,360 --> 00:12:55,120
so he will take joe's digital

320
00:12:55,120 --> 00:12:58,240
certificate that was uh given to him by

321
00:12:58,240 --> 00:13:01,440
the ca on this digital certificate uh it

322
00:13:01,440 --> 00:13:04,000
holds joe's public key

323
00:13:04,000 --> 00:13:07,200
and using that public key he can decrypt

324
00:13:07,200 --> 00:13:10,240
the uh digital signature and make sure

325
00:13:10,240 --> 00:13:13,839
that the file is legitimate

326
00:13:14,320 --> 00:13:16,240
now let's see how this looks on the file

327
00:13:16,240 --> 00:13:19,600
itself this is an abstract view of a pe

328
00:13:19,600 --> 00:13:21,040
file

329
00:13:21,040 --> 00:13:22,959
um

330
00:13:22,959 --> 00:13:26,000
the file is divided into the pe headers

331
00:13:26,000 --> 00:13:28,639
and the actual data data that we're not

332
00:13:28,639 --> 00:13:30,000
going to go into the different sections

333
00:13:30,000 --> 00:13:31,839
because it's not relevant for for our

334
00:13:31,839 --> 00:13:34,240
case here but uh in general we have the

335
00:13:34,240 --> 00:13:37,279
pe data and the uh that p headers and

336
00:13:37,279 --> 00:13:39,839
the data itself uh p headers holds

337
00:13:39,839 --> 00:13:42,560
information like a time of uh

338
00:13:42,560 --> 00:13:45,120
when the file was compiled uh entry

339
00:13:45,120 --> 00:13:47,600
point of the file different addresses of

340
00:13:47,600 --> 00:13:51,199
the different sections and so on

341
00:13:51,839 --> 00:13:53,519
now when we want to sign this file the

342
00:13:53,519 --> 00:13:55,360
first step that we need to take is we

343
00:13:55,360 --> 00:13:57,519
need to compute the digest of the file

344
00:13:57,519 --> 00:13:59,839
uh digest of the file is also called the

345
00:13:59,839 --> 00:14:02,720
image hash of the file it's a little bit

346
00:14:02,720 --> 00:14:05,440
different than the actual hash of the

347
00:14:05,440 --> 00:14:07,760
file because it doesn't take into

348
00:14:07,760 --> 00:14:10,000
account the checksum and the signature

349
00:14:10,000 --> 00:14:13,199
data that is present on the file itself

350
00:14:13,199 --> 00:14:16,560
so we compute the digest

351
00:14:16,560 --> 00:14:19,199
next we will take this digest and

352
00:14:19,199 --> 00:14:22,320
encrypt it using our private key

353
00:14:22,320 --> 00:14:24,639
and this data will be appended to the

354
00:14:24,639 --> 00:14:27,680
file and along with some other

355
00:14:27,680 --> 00:14:30,880
metadata for the signature this will be

356
00:14:30,880 --> 00:14:33,040
our signature and now the file the file

357
00:14:33,040 --> 00:14:35,120
is signed

358
00:14:35,120 --> 00:14:37,920
now when bob wants to verify that this

359
00:14:37,920 --> 00:14:39,760
file is signed what's happening behind

360
00:14:39,760 --> 00:14:41,440
the scenes

361
00:14:41,440 --> 00:14:44,560
is again bob will compute the digest of

362
00:14:44,560 --> 00:14:47,600
the file excluding the signature data

363
00:14:47,600 --> 00:14:50,160
and the checksum of the file

364
00:14:50,160 --> 00:14:53,680
he will take the signature and decrypt

365
00:14:53,680 --> 00:14:57,279
the signature using the joe's public key

366
00:14:57,279 --> 00:14:59,920
and compare the two if they are the same

367
00:14:59,920 --> 00:15:02,000
then the file is valid and digitally

368
00:15:02,000 --> 00:15:04,320
signed

369
00:15:04,639 --> 00:15:07,440
now before we go back to our campaign

370
00:15:07,440 --> 00:15:09,600
why are we even talking about digital

371
00:15:09,600 --> 00:15:12,000
signatures why is this important for us

372
00:15:12,000 --> 00:15:13,920
you may be asking this

373
00:15:13,920 --> 00:15:17,360
so um digital signature has been

374
00:15:17,360 --> 00:15:20,399
digital signatures have been used for uh

375
00:15:20,399 --> 00:15:22,160
evading detection

376
00:15:22,160 --> 00:15:24,959
many security products and edr's rely on

377
00:15:24,959 --> 00:15:28,560
digital signatures to verify files and

378
00:15:28,560 --> 00:15:31,519
as was said here in previous talks

379
00:15:31,519 --> 00:15:34,480
if a file is signed by microsoft then it

380
00:15:34,480 --> 00:15:37,279
is a little safer

381
00:15:37,279 --> 00:15:38,480
so

382
00:15:38,480 --> 00:15:41,120
some of the minor techniques that we can

383
00:15:41,120 --> 00:15:43,360
see that use digital signatures

384
00:15:43,360 --> 00:15:47,360
are uh masquerading so you can append a

385
00:15:47,360 --> 00:15:49,839
digital signature to a file uh just any

386
00:15:49,839 --> 00:15:51,759
digital signature the file will show up

387
00:15:51,759 --> 00:15:54,160
as having a digital certificate even

388
00:15:54,160 --> 00:15:56,480
though this digital certificate is not

389
00:15:56,480 --> 00:16:00,399
valid it will also show that

390
00:16:00,399 --> 00:16:02,480
there's code signing so some threat

391
00:16:02,480 --> 00:16:04,399
actors and adversaries have been known

392
00:16:04,399 --> 00:16:05,360
to

393
00:16:05,360 --> 00:16:06,880
make up bogus

394
00:16:06,880 --> 00:16:09,199
companies and sign up with

395
00:16:09,199 --> 00:16:11,680
cas to receive digital certificates

396
00:16:11,680 --> 00:16:14,560
until they are revoked or there have

397
00:16:14,560 --> 00:16:17,040
have been also instances of

398
00:16:17,040 --> 00:16:19,279
adversaries stealing

399
00:16:19,279 --> 00:16:22,079
legitimate digital certificates and

400
00:16:22,079 --> 00:16:24,560
using that certificate to sign their

401
00:16:24,560 --> 00:16:26,240
malware

402
00:16:26,240 --> 00:16:27,519
and there's some

403
00:16:27,519 --> 00:16:29,199
sub techniques

404
00:16:29,199 --> 00:16:32,560
that are also mentioned like using uh

405
00:16:32,560 --> 00:16:34,959
system binaries that are signed in order

406
00:16:34,959 --> 00:16:38,079
to run malicious code

407
00:16:38,079 --> 00:16:40,880
so let's get go back to our

408
00:16:40,880 --> 00:16:42,800
our campaign

409
00:16:42,800 --> 00:16:45,160
we have mshda running on

410
00:16:45,160 --> 00:16:47,519
appcontest.dllo the dll that was found

411
00:16:47,519 --> 00:16:48,880
downloaded

412
00:16:48,880 --> 00:16:51,120
if we look at the properties of the dll

413
00:16:51,120 --> 00:16:53,759
we see that it is signed

414
00:16:53,759 --> 00:16:56,560
and signed by microsoft windows

415
00:16:56,560 --> 00:16:58,800
and we also see that the original file

416
00:16:58,800 --> 00:17:01,240
name of this dll is app

417
00:17:01,240 --> 00:17:03,199
resolver.dll

418
00:17:03,199 --> 00:17:06,160
so now we wanted to uh investigate and

419
00:17:06,160 --> 00:17:08,959
see what is this app resolver file

420
00:17:08,959 --> 00:17:11,280
this file is also found on our computers

421
00:17:11,280 --> 00:17:14,880
it's a dll file that is in charge of

422
00:17:14,880 --> 00:17:16,839
resolving apps to

423
00:17:16,839 --> 00:17:19,679
extensions so we found this file and we

424
00:17:19,679 --> 00:17:21,439
compared the two

425
00:17:21,439 --> 00:17:24,799
i said using this simple comparison we

426
00:17:24,799 --> 00:17:26,720
see that the files are different in just

427
00:17:26,720 --> 00:17:29,840
a few places in the pe headers

428
00:17:29,840 --> 00:17:31,600
on the left you can see the original

429
00:17:31,600 --> 00:17:33,679
apersolar file and on the right you see

430
00:17:33,679 --> 00:17:36,160
the malicious dll and you can see that

431
00:17:36,160 --> 00:17:38,960
the malicious dll has a vbscript

432
00:17:38,960 --> 00:17:41,039
appended to it

433
00:17:41,039 --> 00:17:43,919
in this vbscript you can see the

434
00:17:43,919 --> 00:17:46,480
malicious command that is used to inject

435
00:17:46,480 --> 00:17:50,480
the malicious payload into msi exec

436
00:17:50,480 --> 00:17:54,240
so this would explain how mshta

437
00:17:54,240 --> 00:17:56,240
ran this code it looked for the script

438
00:17:56,240 --> 00:17:59,200
tag and ran the code that's inside it

439
00:17:59,200 --> 00:18:01,360
but the question that we should be

440
00:18:01,360 --> 00:18:04,000
asking now is how is that possible how

441
00:18:04,000 --> 00:18:06,880
did the adversaries make a modification

442
00:18:06,880 --> 00:18:10,240
to the file while keeping the digital

443
00:18:10,240 --> 00:18:13,280
signature valid

444
00:18:13,280 --> 00:18:15,600
so we need to ask ourselves can we trust

445
00:18:15,600 --> 00:18:18,000
a file's digital signature

446
00:18:18,000 --> 00:18:20,480
and uh let's see how they did that so we

447
00:18:20,480 --> 00:18:23,679
go back to our abstract view of a pe

448
00:18:23,679 --> 00:18:25,200
file

449
00:18:25,200 --> 00:18:27,520
again divide it into the p headers and

450
00:18:27,520 --> 00:18:30,320
the data itself

451
00:18:30,320 --> 00:18:33,039
inside the p headers we have a security

452
00:18:33,039 --> 00:18:34,400
directory

453
00:18:34,400 --> 00:18:36,640
this directory holds information about

454
00:18:36,640 --> 00:18:39,120
the digital signature of the file

455
00:18:39,120 --> 00:18:42,080
it has the size of the signature and its

456
00:18:42,080 --> 00:18:43,679
location

457
00:18:43,679 --> 00:18:44,960
on the file

458
00:18:44,960 --> 00:18:47,760
in this case here this piece file is not

459
00:18:47,760 --> 00:18:50,640
signed so the signature size field

460
00:18:50,640 --> 00:18:55,200
inside the security directory is zero

461
00:18:55,200 --> 00:18:58,640
now when we sign this file this field

462
00:18:58,640 --> 00:18:59,440
will

463
00:18:59,440 --> 00:19:01,840
correspond to the actual signature size

464
00:19:01,840 --> 00:19:03,840
of the file

465
00:19:03,840 --> 00:19:06,799
now once we make a change to the file

466
00:19:06,799 --> 00:19:08,799
here we appended a malicious script it

467
00:19:08,799 --> 00:19:10,720
could be any data that we append to the

468
00:19:10,720 --> 00:19:12,160
file this

469
00:19:12,160 --> 00:19:15,280
digital signature is no longer valid

470
00:19:15,280 --> 00:19:18,000
so how do we

471
00:19:18,000 --> 00:19:20,400
go about and fix this and make the

472
00:19:20,400 --> 00:19:22,720
signature valid

473
00:19:22,720 --> 00:19:26,160
we can compute uh a new signature size

474
00:19:26,160 --> 00:19:28,320
so what we do we take the original size

475
00:19:28,320 --> 00:19:31,919
of the signature we compute in bytes uh

476
00:19:31,919 --> 00:19:33,919
the length of the data that we appended

477
00:19:33,919 --> 00:19:37,039
to the file and we just changed this

478
00:19:37,039 --> 00:19:39,200
secure signature size inside the p

479
00:19:39,200 --> 00:19:40,080
header

480
00:19:40,080 --> 00:19:42,720
and all of a sudden our file is valid

481
00:19:42,720 --> 00:19:44,400
and digitally signed

482
00:19:44,400 --> 00:19:46,240
so this is what happened in this

483
00:19:46,240 --> 00:19:49,039
particular instance

484
00:19:49,039 --> 00:19:51,679
now when we found this we were ecstatic

485
00:19:51,679 --> 00:19:54,880
we thought this is a a great cve that we

486
00:19:54,880 --> 00:19:57,520
can report and we were very happy with

487
00:19:57,520 --> 00:19:59,760
it but apparently

488
00:19:59,760 --> 00:20:01,520
this is not new

489
00:20:01,520 --> 00:20:03,280
there are three different cves that talk

490
00:20:03,280 --> 00:20:05,039
about this issue

491
00:20:05,039 --> 00:20:07,760
first one is from 2012.

492
00:20:07,760 --> 00:20:08,720
now

493
00:20:08,720 --> 00:20:12,799
after the cve in 2012 microsoft actually

494
00:20:12,799 --> 00:20:16,480
released the fix for this issue in 2013

495
00:20:16,480 --> 00:20:18,240
the fix um

496
00:20:18,240 --> 00:20:20,960
actually makes uh a more exhaustive

497
00:20:20,960 --> 00:20:23,520
check for the digital signature

498
00:20:23,520 --> 00:20:26,559
and it actually fixes this issue so if

499
00:20:26,559 --> 00:20:28,960
it fixes the issue how do we find this

500
00:20:28,960 --> 00:20:31,200
now in 2021

501
00:20:31,200 --> 00:20:32,840
uh this was in

502
00:20:32,840 --> 00:20:36,880
2021 but it's also relevant today

503
00:20:36,880 --> 00:20:40,000
so what happened is in 2014 just a year

504
00:20:40,000 --> 00:20:40,960
later

505
00:20:40,960 --> 00:20:43,200
microsoft removed this fix as default

506
00:20:43,200 --> 00:20:45,679
behavior you have to actively change a

507
00:20:45,679 --> 00:20:47,600
few registry keys in order to have this

508
00:20:47,600 --> 00:20:48,480
fix

509
00:20:48,480 --> 00:20:51,440
applied to your machine

510
00:20:51,440 --> 00:20:53,520
what they said in their blog post is

511
00:20:53,520 --> 00:20:55,679
that impact to existing software could

512
00:20:55,679 --> 00:20:57,440
be high and

513
00:20:57,440 --> 00:21:00,559
we prefer not to uh do this as default

514
00:21:00,559 --> 00:21:02,400
behavior

515
00:21:02,400 --> 00:21:04,720
you just saw in the previous slide how

516
00:21:04,720 --> 00:21:05,679
easily

517
00:21:05,679 --> 00:21:08,960
exploitable this issue is and as we said

518
00:21:08,960 --> 00:21:12,240
before many security products rely on

519
00:21:12,240 --> 00:21:15,799
on digital signatures

520
00:21:16,240 --> 00:21:18,400
so uh let's go uh

521
00:21:18,400 --> 00:21:22,240
back to our uh campaign um just uh touch

522
00:21:22,240 --> 00:21:25,280
on a few uh more issues what is z loader

523
00:21:25,280 --> 00:21:28,880
uh z loader is uh uh malware uh banking

524
00:21:28,880 --> 00:21:31,039
trojan slash botnet

525
00:21:31,039 --> 00:21:33,200
it borrows a lot of functionality from

526
00:21:33,200 --> 00:21:35,280
the infamous zeus

527
00:21:35,280 --> 00:21:37,280
banking malware they're

528
00:21:37,280 --> 00:21:39,200
very similar

529
00:21:39,200 --> 00:21:42,400
it is a very stealthy uh malware and

530
00:21:42,400 --> 00:21:45,039
they improve their uh evasion from one

531
00:21:45,039 --> 00:21:47,440
campaign to another um

532
00:21:47,440 --> 00:21:50,799
very uh sophisticated

533
00:21:51,440 --> 00:21:53,760
uh what's a banking malware in just a

534
00:21:53,760 --> 00:21:55,360
few uh words

535
00:21:55,360 --> 00:21:59,039
um it's uh usually a banking trojan it's

536
00:21:59,039 --> 00:22:00,799
a file pretending to be uh something

537
00:22:00,799 --> 00:22:03,440
else uh they perform man in the browser

538
00:22:03,440 --> 00:22:05,600
attack so they inject uh code into your

539
00:22:05,600 --> 00:22:07,840
browser to look for certain websites

540
00:22:07,840 --> 00:22:09,919
where you uh would input a sense of

541
00:22:09,919 --> 00:22:12,400
information like your password and uh

542
00:22:12,400 --> 00:22:13,600
and username

543
00:22:13,600 --> 00:22:16,159
usually it would be for banking sites

544
00:22:16,159 --> 00:22:18,000
and they would send this information to

545
00:22:18,000 --> 00:22:21,039
their c2 servers

546
00:22:22,240 --> 00:22:24,080
just to sum up some of the defense

547
00:22:24,080 --> 00:22:25,600
evasion techniques that we saw in this

548
00:22:25,600 --> 00:22:27,360
campaign

549
00:22:27,360 --> 00:22:30,080
there was this at first we saw terra the

550
00:22:30,080 --> 00:22:32,400
use of legitimate software in order to

551
00:22:32,400 --> 00:22:35,039
uh backdoor the machine and installed

552
00:22:35,039 --> 00:22:36,720
our scripts

553
00:22:36,720 --> 00:22:39,039
we saw the impairing of defenses all

554
00:22:39,039 --> 00:22:42,159
those commands that we saw to

555
00:22:42,159 --> 00:22:45,760
turn off basically windows defender

556
00:22:45,760 --> 00:22:47,760
injection techniques to inject our

557
00:22:47,760 --> 00:22:49,520
malicious payload into

558
00:22:49,520 --> 00:22:52,320
msi exec

559
00:22:52,320 --> 00:22:55,039
system binary proxy execution is the use

560
00:22:55,039 --> 00:22:58,080
of mshta to run this

561
00:22:58,080 --> 00:22:59,600
malicious code

562
00:22:59,600 --> 00:23:02,559
and we also see the use of a decade old

563
00:23:02,559 --> 00:23:04,960
vulnerability that is not

564
00:23:04,960 --> 00:23:08,440
fixed by default

565
00:23:08,480 --> 00:23:10,880
so now after we went through the entire

566
00:23:10,880 --> 00:23:12,880
campaign and we talked about the

567
00:23:12,880 --> 00:23:15,840
signature vulnerability we had just one

568
00:23:15,840 --> 00:23:18,159
other question uh to answer

569
00:23:18,159 --> 00:23:19,200
um

570
00:23:19,200 --> 00:23:22,320
where did a terror agent come from did

571
00:23:22,320 --> 00:23:25,280
the malicious actors install this on the

572
00:23:25,280 --> 00:23:27,600
machine themselves and connect it to

573
00:23:27,600 --> 00:23:29,679
their account did they

574
00:23:29,679 --> 00:23:31,760
were they able to take over an existing

575
00:23:31,760 --> 00:23:34,720
account and use that legitimate account

576
00:23:34,720 --> 00:23:37,440
to run those scripts

577
00:23:37,440 --> 00:23:39,919
so we found out that there was uh they

578
00:23:39,919 --> 00:23:43,279
installed it themselves the those actors

579
00:23:43,279 --> 00:23:46,480
they used a file called java.msi

580
00:23:46,480 --> 00:23:48,799
and z loader has been known to

581
00:23:48,799 --> 00:23:51,360
masquerade itself as java

582
00:23:51,360 --> 00:23:54,799
zoom and teamviewer as we saw in

583
00:23:54,799 --> 00:23:57,039
in the previous campaign

584
00:23:57,039 --> 00:23:59,919
how do we find this out

585
00:23:59,919 --> 00:24:01,760
when we signed up to

586
00:24:01,760 --> 00:24:04,159
the free account we downloaded the

587
00:24:04,159 --> 00:24:06,400
custom installer that would connect the

588
00:24:06,400 --> 00:24:09,120
machine to our account and we analyzed

589
00:24:09,120 --> 00:24:10,240
it

590
00:24:10,240 --> 00:24:12,960
and what we found on this on this

591
00:24:12,960 --> 00:24:14,159
installer

592
00:24:14,159 --> 00:24:16,640
we actually found the email that we used

593
00:24:16,640 --> 00:24:18,400
to sign up to the account

594
00:24:18,400 --> 00:24:20,159
followed by the string

595
00:24:20,159 --> 00:24:22,400
integrator login

596
00:24:22,400 --> 00:24:24,240
what this is is basically when the

597
00:24:24,240 --> 00:24:26,320
installer runs on the machine it creates

598
00:24:26,320 --> 00:24:27,760
a registry key

599
00:24:27,760 --> 00:24:30,640
this registry key will hold the email of

600
00:24:30,640 --> 00:24:32,159
the account that that machine is

601
00:24:32,159 --> 00:24:33,840
connected to

602
00:24:33,840 --> 00:24:35,679
and this gave us something tangible to

603
00:24:35,679 --> 00:24:37,760
look for um

604
00:24:37,760 --> 00:24:40,080
when we wanted to find this suspicious

605
00:24:40,080 --> 00:24:43,200
suspicious uh insta installation

606
00:24:43,200 --> 00:24:45,520
so we wanted to look for suspicious

607
00:24:45,520 --> 00:24:48,400
installations of a terra agent

608
00:24:48,400 --> 00:24:51,200
and uh we found this uh installation

609
00:24:51,200 --> 00:24:53,120
right here

610
00:24:53,120 --> 00:24:55,840
when the account name

611
00:24:55,840 --> 00:24:59,360
sorry account email is antique.corp at

612
00:24:59,360 --> 00:25:01,279
mailto dot plus

613
00:25:01,279 --> 00:25:04,000
uh now mailto dot plus is a

614
00:25:04,000 --> 00:25:06,960
temporary uh email email service that

615
00:25:06,960 --> 00:25:08,559
you can sign up you don't even need to

616
00:25:08,559 --> 00:25:10,400
sign up you just go on the website you

617
00:25:10,400 --> 00:25:12,640
can specify whatever name you want for

618
00:25:12,640 --> 00:25:15,760
the email it will be at mailto.plus and

619
00:25:15,760 --> 00:25:18,080
you will have this email address for the

620
00:25:18,080 --> 00:25:21,279
next 15 minutes

621
00:25:21,840 --> 00:25:23,600
now when we

622
00:25:23,600 --> 00:25:26,159
looked for this email address on vt we

623
00:25:26,159 --> 00:25:29,440
actually found the java.msi it only had

624
00:25:29,440 --> 00:25:31,520
three detections and all those

625
00:25:31,520 --> 00:25:34,240
detections were for potentially unwanted

626
00:25:34,240 --> 00:25:36,400
software

627
00:25:36,400 --> 00:25:40,400
and remote agent installer

628
00:25:40,400 --> 00:25:42,320
when we installed this msi on our

629
00:25:42,320 --> 00:25:44,320
machine we actually saw all the

630
00:25:44,320 --> 00:25:48,720
infection chain running on our computer

631
00:25:50,000 --> 00:25:52,320
so let's talk a little bit about the

632
00:25:52,320 --> 00:25:55,600
extent of the campaign and

633
00:25:55,600 --> 00:25:58,000
we found out that this campaign

634
00:25:58,000 --> 00:26:01,440
affected over 2 000 victims from 116

635
00:26:01,440 --> 00:26:03,360
different countries mainly from the

636
00:26:03,360 --> 00:26:05,520
united states and canada

637
00:26:05,520 --> 00:26:07,200
now you may ask yourself

638
00:26:07,200 --> 00:26:08,960
how do we find this out

639
00:26:08,960 --> 00:26:11,919
well again the attackers

640
00:26:11,919 --> 00:26:15,360
gave us clues we found an open directory

641
00:26:15,360 --> 00:26:17,039
for

642
00:26:17,039 --> 00:26:18,400
on the domain that they hosted their

643
00:26:18,400 --> 00:26:20,880
malicious files and one of those file

644
00:26:20,880 --> 00:26:23,039
files was entries

645
00:26:23,039 --> 00:26:24,480
that's what it was called it was

646
00:26:24,480 --> 00:26:27,039
basically a log of all of the infected

647
00:26:27,039 --> 00:26:29,039
machines that the they were able to

648
00:26:29,039 --> 00:26:32,240
infect for each machine it had the date

649
00:26:32,240 --> 00:26:35,600
of time date and time of infection um

650
00:26:35,600 --> 00:26:38,799
the ip address country and the user

651
00:26:38,799 --> 00:26:41,520
agent that was used in order to download

652
00:26:41,520 --> 00:26:43,840
the malicious files

653
00:26:43,840 --> 00:26:46,320
so we parsed this file and created this

654
00:26:46,320 --> 00:26:48,639
graph

655
00:26:50,000 --> 00:26:51,520
let's talk a little bit about a little

656
00:26:51,520 --> 00:26:53,360
bit about the impact

657
00:26:53,360 --> 00:26:55,440
that we had after publishing our

658
00:26:55,440 --> 00:26:57,440
research

659
00:26:57,440 --> 00:26:58,720
so here

660
00:26:58,720 --> 00:27:01,279
at the top you can see the malicious dll

661
00:27:01,279 --> 00:27:02,720
with the script

662
00:27:02,720 --> 00:27:05,120
on virustotal

663
00:27:05,120 --> 00:27:08,960
you can see that in december this uh dll

664
00:27:08,960 --> 00:27:12,080
had a sign tag on virustotal and just a

665
00:27:12,080 --> 00:27:13,919
few months later after we published our

666
00:27:13,919 --> 00:27:16,559
research the sign tag is no longer

667
00:27:16,559 --> 00:27:19,279
present on this file we contacted

668
00:27:19,279 --> 00:27:21,840
virustotal and we were told that after

669
00:27:21,840 --> 00:27:24,880
our research was published they decided

670
00:27:24,880 --> 00:27:27,760
to apply microsoft's fix to their system

671
00:27:27,760 --> 00:27:30,799
and now files that make changes to those

672
00:27:30,799 --> 00:27:33,120
uh to the signature

673
00:27:33,120 --> 00:27:36,159
for pe files will no longer show up as

674
00:27:36,159 --> 00:27:37,120
signed

675
00:27:37,120 --> 00:27:39,360
so we're pretty uh proud of that and

676
00:27:39,360 --> 00:27:42,559
also during the research um

677
00:27:42,559 --> 00:27:44,240
when we found the campaign we were also

678
00:27:44,240 --> 00:27:46,480
in contact with atera

679
00:27:46,480 --> 00:27:48,799
and they blocked of course the malicious

680
00:27:48,799 --> 00:27:51,440
account and also the use of temporary

681
00:27:51,440 --> 00:27:52,640
email address

682
00:27:52,640 --> 00:27:54,399
to be signed up for that

683
00:27:54,399 --> 00:27:56,879
service

684
00:28:01,360 --> 00:28:04,320
okay so um let's summarize what we went

685
00:28:04,320 --> 00:28:06,000
through um

686
00:28:06,000 --> 00:28:08,399
returning to our original question

687
00:28:08,399 --> 00:28:11,360
can we trust a digital signature

688
00:28:11,360 --> 00:28:13,279
we sort of can

689
00:28:13,279 --> 00:28:14,799
you just don't know if there's any

690
00:28:14,799 --> 00:28:17,120
additional data that can be appended to

691
00:28:17,120 --> 00:28:18,880
the script

692
00:28:18,880 --> 00:28:20,960
during our checks we saw that most

693
00:28:20,960 --> 00:28:22,240
environments are

694
00:28:22,240 --> 00:28:24,000
vulnerable to this

695
00:28:24,000 --> 00:28:25,840
exploit

696
00:28:25,840 --> 00:28:27,360
i haven't seen a single computer that

697
00:28:27,360 --> 00:28:30,720
applied microsoft's fix

698
00:28:30,720 --> 00:28:32,320
by themselves

699
00:28:32,320 --> 00:28:33,120
this

700
00:28:33,120 --> 00:28:35,279
as i said would require them to change

701
00:28:35,279 --> 00:28:38,480
only two registry keys

702
00:28:38,480 --> 00:28:40,399
so we recommend that you apply this

703
00:28:40,399 --> 00:28:43,520
fixed and you previously saw how easy it

704
00:28:43,520 --> 00:28:46,559
is to exploit this vulnerability it can

705
00:28:46,559 --> 00:28:48,159
be used for

706
00:28:48,159 --> 00:28:50,720
code execution delivery or data

707
00:28:50,720 --> 00:28:52,960
exfiltration as well

708
00:28:52,960 --> 00:28:55,840
so um

709
00:28:56,159 --> 00:28:59,840
yep that's it

