1
00:00:06,410 --> 00:00:11,280
[Music]

2
00:00:08,660 --> 00:00:13,680
<font color="#E5E5E5">all right so last session I'm gonna try</font>

3
00:00:11,280 --> 00:00:15,539
to<font color="#E5E5E5"> bring the energy up</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> on an</font>

4
00:00:13,680 --> 00:00:17,490
energetic note if not a high note

5
00:00:15,539 --> 00:00:19,980
today I'm going to<font color="#E5E5E5"> be</font><font color="#CCCCCC"> talking about dev</font>

6
00:00:17,490 --> 00:00:21,779
<font color="#CCCCCC">SEC defense</font><font color="#E5E5E5"> I'm looking at some</font><font color="#CCCCCC"> deficit</font>

7
00:00:19,980 --> 00:00:23,910
principles that we as defenders<font color="#E5E5E5"> can use</font>

8
00:00:21,780 --> 00:00:25,200
<font color="#E5E5E5">when we're going about developing</font>

9
00:00:23,910 --> 00:00:27,930
detection<font color="#CCCCCC"> zazz well it's kind of</font><font color="#E5E5E5"> the</font>

10
00:00:25,200 --> 00:00:32,360
full<font color="#E5E5E5"> lifecycle</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> developing tuning</font>

11
00:00:27,930 --> 00:00:34,710
maintaining detection so I work<font color="#E5E5E5"> for</font>

12
00:00:32,360 --> 00:00:36,899
<font color="#CCCCCC">mandiant</font><font color="#E5E5E5"> fire I started doing instant</font>

13
00:00:34,710 --> 00:00:38,339
response on the<font color="#E5E5E5"> mandiant consulting side</font>

14
00:00:36,899 --> 00:00:40,350
and then moved<font color="#E5E5E5"> into an apply to research</font>

15
00:00:38,339 --> 00:00:43,800
position<font color="#E5E5E5"> basically doing detection stuff</font>

16
00:00:40,350 --> 00:00:45,749
<font color="#E5E5E5">all</font><font color="#CCCCCC"> day</font><font color="#E5E5E5"> long</font><font color="#CCCCCC"> I I like writing office</font>

17
00:00:43,800 --> 00:00:47,428
keishon stuff here's a couple<font color="#E5E5E5"> of</font>

18
00:00:45,749 --> 00:00:48,929
projects<font color="#E5E5E5"> that I've</font><font color="#CCCCCC"> worked on</font><font color="#E5E5E5"> cradle</font>

19
00:00:47,429 --> 00:00:51,659
<font color="#E5E5E5">crafter was actually released here last</font>

20
00:00:48,929 --> 00:00:53,969
<font color="#CCCCCC">year</font><font color="#E5E5E5"> and then also really like writing</font>

21
00:00:51,659 --> 00:00:55,920
detection stuff which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the reason I do</font>

22
00:00:53,969 --> 00:00:58,819
office<font color="#CCCCCC"> Gatien which we'll look at in</font>

23
00:00:55,920 --> 00:01:00,780
<font color="#E5E5E5">this talk so my motivation</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> this</font>

24
00:00:58,819 --> 00:01:03,329
<font color="#CCCCCC">we're really</font><font color="#E5E5E5"> gonna kind of do a deep</font>

25
00:01:00,780 --> 00:01:04,229
<font color="#CCCCCC">dive on three case studies</font><font color="#E5E5E5"> and we're</font>

26
00:01:03,329 --> 00:01:06,570
gonna<font color="#E5E5E5"> kind of walk</font><font color="#CCCCCC"> through my</font>

27
00:01:04,229 --> 00:01:07,830
methodology<font color="#E5E5E5"> as a defender</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> mean looking</font>

28
00:01:06,570 --> 00:01:10,139
at<font color="#E5E5E5"> some</font><font color="#CCCCCC"> of the tool sets and some of the</font>

29
00:01:07,830 --> 00:01:12,030
<font color="#CCCCCC">frameworks that</font><font color="#E5E5E5"> I use to kind of</font>

30
00:01:10,140 --> 00:01:13,260
automate<font color="#E5E5E5"> some of the process around</font>

31
00:01:12,030 --> 00:01:15,930
detection development and<font color="#E5E5E5"> kind of</font>

32
00:01:13,260 --> 00:01:19,700
numerating problem spaces<font color="#E5E5E5"> so that</font><font color="#CCCCCC"> I can</font>

33
00:01:15,930 --> 00:01:19,700
be developing<font color="#E5E5E5"> more resilient detection</font>

34
00:01:20,990 --> 00:01:26,550
so I started<font color="#E5E5E5"> out in IT operations</font><font color="#CCCCCC"> then I</font>

35
00:01:24,810 --> 00:01:29,070
moved<font color="#E5E5E5"> into security</font><font color="#CCCCCC"> and as I</font><font color="#E5E5E5"> said I've</font>

36
00:01:26,550 --> 00:01:30,509
been<font color="#E5E5E5"> moved into consulting</font><font color="#CCCCCC"> and then now</font>

37
00:01:29,070 --> 00:01:32,699
I'm in kind<font color="#CCCCCC"> of Applied Research and</font>

38
00:01:30,510 --> 00:01:33,990
<font color="#CCCCCC">Development at scale for all the</font><font color="#E5E5E5"> the</font>

39
00:01:32,700 --> 00:01:35,220
product suite that<font color="#E5E5E5"> we haven't fire on</font>

40
00:01:33,990 --> 00:01:36,839
all the<font color="#E5E5E5"> tools that we use as mainly</font><font color="#CCCCCC"> in</font>

41
00:01:35,220 --> 00:01:38,880
consultants but<font color="#CCCCCC"> there been two things</font>

42
00:01:36,840 --> 00:01:41,970
that have remained<font color="#CCCCCC"> consistent across all</font>

43
00:01:38,880 --> 00:01:44,100
these changes one is very<font color="#E5E5E5"> very high</font>

44
00:01:41,970 --> 00:01:46,170
quality<font color="#E5E5E5"> coffee</font><font color="#CCCCCC"> I'm a huge coffee snob</font>

45
00:01:44,100 --> 00:01:49,380
<font color="#E5E5E5">and the other one is an aspiring</font>

46
00:01:46,170 --> 00:01:52,470
<font color="#E5E5E5">powershell aficionado now why do I say</font>

47
00:01:49,380 --> 00:01:53,429
<font color="#CCCCCC">this well</font><font color="#E5E5E5"> hackers love PowerShell as</font>

48
00:01:52,470 --> 00:01:55,800
well and this<font color="#E5E5E5"> is kind of what got me</font>

49
00:01:53,430 --> 00:01:58,680
<font color="#CCCCCC">started into</font><font color="#E5E5E5"> detection work is seeing</font>

50
00:01:55,800 --> 00:01:59,970
<font color="#E5E5E5">this tool that I'd used for for I would</font>

51
00:01:58,680 --> 00:02:02,220
<font color="#E5E5E5">say legitimate purposes for</font>

52
00:01:59,970 --> 00:02:03,900
operationalizing tasks and<font color="#CCCCCC"> ICS</font><font color="#E5E5E5"> hackers</font>

53
00:02:02,220 --> 00:02:06,090
<font color="#E5E5E5">using and I really got curious how can I</font>

54
00:02:03,900 --> 00:02:07,920
better detect<font color="#E5E5E5"> this and there's a</font><font color="#CCCCCC"> lot of</font>

55
00:02:06,090 --> 00:02:10,709
offensive<font color="#E5E5E5"> tradecraft available for</font>

56
00:02:07,920 --> 00:02:12,690
attackers<font color="#E5E5E5"> for free</font><font color="#CCCCCC"> and a lot</font><font color="#E5E5E5"> of times</font>

57
00:02:10,709 --> 00:02:13,980
you'll see<font color="#CCCCCC"> in a ton of our</font>

58
00:02:12,690 --> 00:02:15,819
investigations<font color="#CCCCCC"> we'll see two attackers</font>

59
00:02:13,980 --> 00:02:18,010
just doing a<font color="#E5E5E5"> really simple one-liner</font>

60
00:02:15,819 --> 00:02:20,619
download cradles<font color="#E5E5E5"> this would only work on</font>

61
00:02:18,010 --> 00:02:22,269
<font color="#E5E5E5">PowerShell</font><font color="#CCCCCC"> three for this iwrs invoke</font>

62
00:02:20,620 --> 00:02:23,650
<font color="#CCCCCC">read web</font><font color="#E5E5E5"> request but typically you see</font>

63
00:02:22,269 --> 00:02:28,299
attackers do something<font color="#E5E5E5"> more like this</font>

64
00:02:23,650 --> 00:02:30,040
<font color="#E5E5E5">and</font><font color="#CCCCCC"> stay</font><font color="#E5E5E5"> PowerShell 2o compliant so when</font>

65
00:02:28,299 --> 00:02:31,900
I<font color="#E5E5E5"> started to see this I said</font><font color="#CCCCCC"> ok where</font>

66
00:02:30,040 --> 00:02:33,879
<font color="#E5E5E5">are the artifacts what are the behaviors</font>

67
00:02:31,900 --> 00:02:35,260
what are the heuristics I can use to

68
00:02:33,879 --> 00:02:38,768
<font color="#E5E5E5">start to detect this kind</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> malicious</font>

69
00:02:35,260 --> 00:02:41,888
activity<font color="#E5E5E5"> and a big distinction I want</font><font color="#CCCCCC"> to</font>

70
00:02:38,769 --> 00:02:44,200
make is rigid signatures<font color="#CCCCCC"> versus</font>

71
00:02:41,889 --> 00:02:47,139
resilient detection<font color="#E5E5E5"> and there's a very</font>

72
00:02:44,200 --> 00:02:49,298
very<font color="#CCCCCC"> big difference</font><font color="#E5E5E5"> one is is very</font>

73
00:02:47,139 --> 00:02:50,680
<font color="#E5E5E5">reactive</font><font color="#CCCCCC"> it's saying I saw this thing</font>

74
00:02:49,299 --> 00:02:53,709
<font color="#E5E5E5">and there's a time and</font><font color="#CCCCCC"> a place</font><font color="#E5E5E5"> for that</font>

75
00:02:50,680 --> 00:02:57,099
<font color="#CCCCCC">I saw this thing I want</font><font color="#E5E5E5"> to detect just</font>

76
00:02:53,709 --> 00:02:59,680
this thing<font color="#E5E5E5"> we have a very focused IOC or</font>

77
00:02:57,099 --> 00:03:01,448
<font color="#CCCCCC">yaar a rule or snort signature for this</font>

78
00:02:59,680 --> 00:03:04,480
one thing maybe it's a<font color="#E5E5E5"> family maybe it's</font>

79
00:03:01,449 --> 00:03:06,760
a tool but then we<font color="#E5E5E5"> should also step back</font>

80
00:03:04,480 --> 00:03:08,768
and say well might<font color="#CCCCCC"> the attacker ever</font>

81
00:03:06,760 --> 00:03:10,929
<font color="#E5E5E5">changed something about this how can</font><font color="#CCCCCC"> we</font>

82
00:03:08,769 --> 00:03:12,540
<font color="#CCCCCC">take</font><font color="#E5E5E5"> a step back with a second detection</font>

83
00:03:10,930 --> 00:03:15,010
and say how can we<font color="#E5E5E5"> detect this</font>

84
00:03:12,540 --> 00:03:18,608
categorically or from methodology

85
00:03:15,010 --> 00:03:21,728
perspective and as attacker<font color="#E5E5E5"> TTP's</font>

86
00:03:18,609 --> 00:03:24,159
<font color="#CCCCCC">changed</font><font color="#E5E5E5"> so should our detection</font><font color="#CCCCCC"> x'</font><font color="#E5E5E5"> kind</font>

87
00:03:21,729 --> 00:03:25,720
of some detection<font color="#CCCCCC"> x'</font><font color="#E5E5E5"> maybe don't need to</font>

88
00:03:24,159 --> 00:03:28,209
change<font color="#E5E5E5"> because they're resilient enough</font>

89
00:03:25,720 --> 00:03:30,189
<font color="#E5E5E5">they're broad enough but others do just</font>

90
00:03:28,209 --> 00:03:31,780
as in the last talk we saw that<font color="#E5E5E5"> kid</font><font color="#CCCCCC"> is</font>

91
00:03:30,189 --> 00:03:33,578
<font color="#E5E5E5">Casey Smith or</font><font color="#CCCCCC"> subti tweeting out</font>

92
00:03:31,780 --> 00:03:36,549
something<font color="#E5E5E5"> was being used by fin 7 within</font>

93
00:03:33,579 --> 00:03:38,439
24 hours<font color="#E5E5E5"> like we need to stay on</font><font color="#CCCCCC"> top of</font>

94
00:03:36,549 --> 00:03:40,840
this kind<font color="#E5E5E5"> of stuff and say</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> did this</font>

95
00:03:38,439 --> 00:03:43,540
new<font color="#E5E5E5"> technique that that just became more</font>

96
00:03:40,840 --> 00:03:45,549
broadly communicated<font color="#E5E5E5"> did it</font><font color="#CCCCCC"> affect our</font>

97
00:03:43,540 --> 00:03:47,319
existing detections and<font color="#E5E5E5"> if so which ones</font>

98
00:03:45,549 --> 00:03:49,389
and do we need to<font color="#E5E5E5"> modify an existing one</font>

99
00:03:47,319 --> 00:03:51,668
or<font color="#E5E5E5"> add a new</font><font color="#CCCCCC"> one or is it covered under</font>

100
00:03:49,389 --> 00:03:54,040
a larger<font color="#CCCCCC"> umbrella of more methodology</font>

101
00:03:51,669 --> 00:03:56,019
based<font color="#E5E5E5"> detection</font><font color="#CCCCCC"> z'</font><font color="#E5E5E5"> so what is this talk</font>

102
00:03:54,040 --> 00:03:58,689
is<font color="#CCCCCC"> about</font><font color="#E5E5E5"> automation dev</font><font color="#CCCCCC"> sec isn't the</font>

103
00:03:56,019 --> 00:04:00,250
title<font color="#CCCCCC"> so you</font><font color="#E5E5E5"> some DevOps wizard</font><font color="#CCCCCC"> know is</font>

104
00:03:58,689 --> 00:04:02,078
it<font color="#E5E5E5"> about detection development and the</font>

105
00:04:00,250 --> 00:04:07,269
answer is<font color="#E5E5E5"> kind of yes to</font><font color="#CCCCCC"> all three of</font>

106
00:04:02,079 --> 00:04:10,359
those so we're gonna look at three case

107
00:04:07,269 --> 00:04:12,129
<font color="#CCCCCC">studies I got</font><font color="#E5E5E5"> more laughs out of this</font>

108
00:04:10,359 --> 00:04:13,930
one<font color="#CCCCCC"> than the only</font><font color="#E5E5E5"> other time</font><font color="#CCCCCC"> I've use</font>

109
00:04:12,129 --> 00:04:17,079
this this meme so I'm glad<font color="#E5E5E5"> that a couple</font>

110
00:04:13,930 --> 00:04:18,608
<font color="#CCCCCC">people thought it was funny</font><font color="#E5E5E5"> I got like a</font>

111
00:04:17,079 --> 00:04:20,108
lot<font color="#E5E5E5"> of mixed results</font><font color="#CCCCCC"> in the office when</font>

112
00:04:18,608 --> 00:04:22,388
I asked but<font color="#E5E5E5"> I was like I'm gonna use it</font>

113
00:04:20,108 --> 00:04:23,620
<font color="#E5E5E5">and see what happens</font><font color="#CCCCCC"> so I want to</font><font color="#E5E5E5"> talk</font>

114
00:04:22,389 --> 00:04:24,610
about my<font color="#CCCCCC"> methodology for crafting</font>

115
00:04:23,620 --> 00:04:26,440
detection surround<font color="#E5E5E5"> each of these</font>

116
00:04:24,610 --> 00:04:27,729
<font color="#CCCCCC">categories and specifically</font><font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> gonna</font>

117
00:04:26,440 --> 00:04:29,950
<font color="#E5E5E5">kind of pull back the curtains on some</font>

118
00:04:27,729 --> 00:04:31,930
of the tools that I've built<font color="#E5E5E5"> as well as</font>

119
00:04:29,950 --> 00:04:33,520
that are publicly available<font color="#CCCCCC"> the kind</font><font color="#E5E5E5"> of</font>

120
00:04:31,930 --> 00:04:35,760
frameworks<font color="#CCCCCC"> that</font><font color="#E5E5E5"> are used to help me with</font>

121
00:04:33,520 --> 00:04:40,330
this development<font color="#E5E5E5"> process</font>

122
00:04:35,760 --> 00:04:42,310
<font color="#E5E5E5">so first</font><font color="#CCCCCC"> powershell obfuscation whenever</font>

123
00:04:40,330 --> 00:04:44,440
whenever<font color="#CCCCCC"> i'm approaching a problem of</font>

124
00:04:42,310 --> 00:04:45,340
<font color="#CCCCCC">detection it's</font><font color="#E5E5E5"> important to define what</font>

125
00:04:44,440 --> 00:04:47,650
the problem is

126
00:04:45,340 --> 00:04:49,419
how prevalent is it<font color="#E5E5E5"> what are the tools</font>

127
00:04:47,650 --> 00:04:52,210
<font color="#E5E5E5">that we have at our disposal</font><font color="#CCCCCC"> to detect</font>

128
00:04:49,420 --> 00:04:53,580
this and what tools might we if we had

129
00:04:52,210 --> 00:04:55,539
<font color="#E5E5E5">we do a better</font><font color="#CCCCCC"> job of</font><font color="#E5E5E5"> detecting</font>

130
00:04:53,580 --> 00:04:57,760
<font color="#E5E5E5">sometimes we need to build tools if they</font>

131
00:04:55,540 --> 00:05:00,100
<font color="#E5E5E5">don't exist</font><font color="#CCCCCC"> I'm and then obviously</font>

132
00:04:57,760 --> 00:05:02,409
develop protections<font color="#E5E5E5"> and go back and test</font>

133
00:05:00,100 --> 00:05:05,380
and see does this need<font color="#E5E5E5"> to be tuned to</font>

134
00:05:02,410 --> 00:05:06,520
<font color="#E5E5E5">make it more effective so the problem is</font>

135
00:05:05,380 --> 00:05:08,290
<font color="#E5E5E5">PowerShell argument in script</font>

136
00:05:06,520 --> 00:05:10,750
confiscation<font color="#E5E5E5"> can evade a lot of rigid</font>

137
00:05:08,290 --> 00:05:12,910
detection so to kind of<font color="#E5E5E5"> quickly show</font>

138
00:05:10,750 --> 00:05:14,230
that<font color="#CCCCCC"> if we have an attacker</font><font color="#E5E5E5"> the remote</font>

139
00:05:12,910 --> 00:05:15,640
download cradle let's say we<font color="#CCCCCC"> create a</font>

140
00:05:14,230 --> 00:05:17,350
<font color="#E5E5E5">simple</font><font color="#CCCCCC"> yarr rule looking for all these</font>

141
00:05:15,640 --> 00:05:18,580
<font color="#E5E5E5">strings to be present that would detect</font>

142
00:05:17,350 --> 00:05:21,220
<font color="#E5E5E5">this command but there's a lot of things</font>

143
00:05:18,580 --> 00:05:24,280
<font color="#E5E5E5">that</font><font color="#CCCCCC"> attackers can do like concatenated</font>

144
00:05:21,220 --> 00:05:26,440
strings or PowerShell is very is<font color="#E5E5E5"> very</font>

145
00:05:24,280 --> 00:05:28,840
compliant<font color="#E5E5E5"> with slashes so when you have</font>

146
00:05:26,440 --> 00:05:31,230
HTTP<font color="#E5E5E5"> colon you can</font><font color="#CCCCCC"> actually have</font>

147
00:05:28,840 --> 00:05:34,030
<font color="#E5E5E5">mismatched slashes and it still works</font>

148
00:05:31,230 --> 00:05:36,070
<font color="#E5E5E5">um download string is if you actually</font>

149
00:05:34,030 --> 00:05:37,929
tokenize a<font color="#E5E5E5"> powershell command this is</font>

150
00:05:36,070 --> 00:05:39,370
<font color="#E5E5E5">called a member token and so you can</font>

151
00:05:37,930 --> 00:05:40,870
actually put<font color="#E5E5E5"> single</font><font color="#CCCCCC"> quotes around</font><font color="#E5E5E5"> it and</font>

152
00:05:39,370 --> 00:05:42,340
double quotes<font color="#E5E5E5"> and then if you have</font>

153
00:05:40,870 --> 00:05:43,990
double quotes<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> put a tick mark in</font>

154
00:05:42,340 --> 00:05:45,549
front<font color="#CCCCCC"> of it</font><font color="#E5E5E5"> that's because</font><font color="#CCCCCC"> the tick mark</font>

155
00:05:43,990 --> 00:05:46,900
is the escape<font color="#CCCCCC"> character for powershell</font>

156
00:05:45,550 --> 00:05:49,720
and<font color="#CCCCCC"> if it's escaping</font><font color="#E5E5E5"> something that is</font>

157
00:05:46,900 --> 00:05:52,239
not<font color="#CCCCCC"> 0</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> b FN RTV and I think in</font>

158
00:05:49,720 --> 00:05:53,800
<font color="#E5E5E5">PowerShell 6 they</font><font color="#CCCCCC"> introduce you as</font>

159
00:05:52,240 --> 00:05:54,940
another<font color="#E5E5E5"> character if you escape</font>

160
00:05:53,800 --> 00:05:56,710
<font color="#E5E5E5">something that's not one of those</font>

161
00:05:54,940 --> 00:05:58,990
special<font color="#E5E5E5"> characters then it doesn't have</font>

162
00:05:56,710 --> 00:06:00,789
any meaning<font color="#CCCCCC"> at all and the problem</font><font color="#E5E5E5"> is it</font>

163
00:05:58,990 --> 00:06:03,070
still appears<font color="#E5E5E5"> in the arguments and the</font>

164
00:06:00,790 --> 00:06:04,810
script<font color="#E5E5E5"> lock logs so you can put a lot of</font>

165
00:06:03,070 --> 00:06:07,900
tick marks in there<font color="#E5E5E5"> as long</font><font color="#CCCCCC"> as you stay</font>

166
00:06:04,810 --> 00:06:09,520
away<font color="#CCCCCC"> from the</font><font color="#E5E5E5"> ABF and</font><font color="#CCCCCC"> RTV and 0 but</font><font color="#E5E5E5"> if</font>

167
00:06:07,900 --> 00:06:10,630
you<font color="#CCCCCC"> really want to put ticks in front of</font>

168
00:06:09,520 --> 00:06:12,280
those all you have to do<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> uppercase</font>

169
00:06:10,630 --> 00:06:14,020
it and now<font color="#CCCCCC"> ticks will work there</font>

170
00:06:12,280 --> 00:06:16,960
fortunately is no<font color="#CCCCCC"> uppercase</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> 0 so</font><font color="#E5E5E5"> that</font>

171
00:06:14,020 --> 00:06:18,820
one<font color="#E5E5E5"> still can't really do but we can as</font>

172
00:06:16,960 --> 00:06:20,739
<font color="#E5E5E5">an attacker we can really screw around</font>

173
00:06:18,820 --> 00:06:24,219
<font color="#E5E5E5">with</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of the data set that we as</font>

174
00:06:20,740 --> 00:06:25,810
defenders rely on so what if we wanted

175
00:06:24,220 --> 00:06:27,130
to treat<font color="#E5E5E5"> this truly as a string all we</font>

176
00:06:25,810 --> 00:06:28,780
have<font color="#E5E5E5"> to do is now encapsulate it with</font>

177
00:06:27,130 --> 00:06:30,640
parentheses and then<font color="#E5E5E5"> we could</font><font color="#CCCCCC"> just</font>

178
00:06:28,780 --> 00:06:32,200
concatenate<font color="#CCCCCC"> it like a string</font><font color="#E5E5E5"> now if</font>

179
00:06:30,640 --> 00:06:33,700
you're using<font color="#E5E5E5"> PowerShell</font><font color="#CCCCCC"> 2 you're gonna</font>

180
00:06:32,200 --> 00:06:35,440
<font color="#E5E5E5">need to add a dot invoke member but</font>

181
00:06:33,700 --> 00:06:37,030
PowerShell 3 or later<font color="#E5E5E5"> totally doesn't</font>

182
00:06:35,440 --> 00:06:39,460
<font color="#E5E5E5">you can</font><font color="#CCCCCC"> actually have a</font><font color="#E5E5E5"> sin that</font>

183
00:06:37,030 --> 00:06:41,020
location<font color="#E5E5E5"> but we'll leave</font><font color="#CCCCCC"> 'don't invoke</font>

184
00:06:39,460 --> 00:06:42,940
in there so it works because<font color="#CCCCCC"> attackers</font>

185
00:06:41,020 --> 00:06:43,510
love<font color="#E5E5E5"> powershell 2 because that's the</font>

186
00:06:42,940 --> 00:06:45,190
kind<font color="#CCCCCC"> of</font><font color="#E5E5E5"> low</font>

187
00:06:43,510 --> 00:06:47,349
common<font color="#E5E5E5"> denominator</font><font color="#CCCCCC"> on all the</font><font color="#E5E5E5"> systems</font>

188
00:06:45,190 --> 00:06:49,630
that<font color="#E5E5E5"> they might hit so we can catenate</font>

189
00:06:47,350 --> 00:06:51,820
it<font color="#E5E5E5"> we can use</font><font color="#CCCCCC"> the dash</font><font color="#E5E5E5"> F format operator</font>

190
00:06:49,630 --> 00:06:53,710
and start to<font color="#E5E5E5"> reorder the string again</font>

191
00:06:51,820 --> 00:06:55,030
this is just<font color="#CCCCCC"> taking download string</font><font color="#E5E5E5"> we</font>

192
00:06:53,710 --> 00:06:56,289
could even go a step<font color="#E5E5E5"> further and say why</font>

193
00:06:55,030 --> 00:06:58,390
don't<font color="#E5E5E5"> we just have an array of</font><font color="#CCCCCC"> ASCII</font>

194
00:06:56,290 --> 00:07:00,430
character values and then convert it

195
00:06:58,390 --> 00:07:02,830
back in memory<font color="#CCCCCC"> and that's download</font>

196
00:07:00,430 --> 00:07:05,350
string now so how else could<font color="#E5E5E5"> we</font><font color="#CCCCCC"> produce</font>

197
00:07:02,830 --> 00:07:07,479
a string<font color="#E5E5E5"> download string like where did</font>

198
00:07:05,350 --> 00:07:10,060
<font color="#E5E5E5">these ideas come from</font><font color="#CCCCCC"> so I thought it</font>

199
00:07:07,480 --> 00:07:13,480
<font color="#E5E5E5">would be cool to kind of walk through</font><font color="#CCCCCC"> a</font>

200
00:07:10,060 --> 00:07:14,860
demo<font color="#CCCCCC"> of one of the ways</font><font color="#E5E5E5"> I thought was</font>

201
00:07:13,480 --> 00:07:16,900
okay<font color="#CCCCCC"> well what if</font><font color="#E5E5E5"> I to say new object</font>

202
00:07:14,860 --> 00:07:18,700
<font color="#CCCCCC">knit that web client</font><font color="#E5E5E5"> it creates the</font>

203
00:07:16,900 --> 00:07:20,560
object what am i pipe it<font color="#CCCCCC"> to get member</font>

204
00:07:18,700 --> 00:07:22,060
tell me something<font color="#CCCCCC"> about this object</font>

205
00:07:20,560 --> 00:07:24,430
there's tons of methods<font color="#E5E5E5"> and one of them</font>

206
00:07:22,060 --> 00:07:26,470
happens to be<font color="#E5E5E5"> download string okay that</font>

207
00:07:24,430 --> 00:07:27,940
makes<font color="#E5E5E5"> sense that's what I want</font><font color="#CCCCCC"> um so let</font>

208
00:07:26,470 --> 00:07:30,250
me actually filter down and get just

209
00:07:27,940 --> 00:07:32,860
that<font color="#E5E5E5"> method name so I'm going to say hey</font>

210
00:07:30,250 --> 00:07:35,160
give this<font color="#E5E5E5"> data and just let me have the</font>

211
00:07:32,860 --> 00:07:38,260
object with a name matches or like

212
00:07:35,160 --> 00:07:39,700
download string boom there we<font color="#E5E5E5"> go and</font>

213
00:07:38,260 --> 00:07:41,260
<font color="#E5E5E5">actually I'm only interested in the name</font>

214
00:07:39,700 --> 00:07:44,020
field<font color="#CCCCCC"> so let me go and</font><font color="#E5E5E5"> add parentheses</font>

215
00:07:41,260 --> 00:07:48,310
dot name so we'll<font color="#E5E5E5"> just return the string</font>

216
00:07:44,020 --> 00:07:49,960
download string perfect<font color="#E5E5E5"> now how can we</font>

217
00:07:48,310 --> 00:07:52,630
office<font color="#CCCCCC"> case this well since light is</font>

218
00:07:49,960 --> 00:07:54,250
like a match<font color="#E5E5E5"> regular expression we can</font>

219
00:07:52,630 --> 00:07:57,430
use wildcards like that and we still<font color="#E5E5E5"> get</font>

220
00:07:54,250 --> 00:07:59,410
download stream okay<font color="#CCCCCC"> I like and see like</font>

221
00:07:57,430 --> 00:08:00,760
is case sensitive and case insensitive

222
00:07:59,410 --> 00:08:02,740
<font color="#CCCCCC">most people don't write de sections for</font>

223
00:08:00,760 --> 00:08:04,210
that dollar<font color="#CCCCCC"> sign underscore is current</font>

224
00:08:02,740 --> 00:08:05,770
variable so we can do a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> different</font>

225
00:08:04,210 --> 00:08:07,120
<font color="#E5E5E5">things like do a directory</font><font color="#CCCCCC"> listing on a</font>

226
00:08:05,770 --> 00:08:09,280
<font color="#E5E5E5">variable name of underscore then</font><font color="#CCCCCC"> enter</font>

227
00:08:07,120 --> 00:08:11,530
dot value<font color="#E5E5E5"> where object we can replace</font>

228
00:08:09,280 --> 00:08:13,150
this with<font color="#CCCCCC"> a question mark if we want get</font>

229
00:08:11,530 --> 00:08:14,619
<font color="#E5E5E5">member you can just remove get</font><font color="#CCCCCC"> dash from</font>

230
00:08:13,150 --> 00:08:16,270
<font color="#E5E5E5">any powershell commandlets it</font>

231
00:08:14,620 --> 00:08:19,090
automatically interprets it as the

232
00:08:16,270 --> 00:08:20,859
correct name you can<font color="#E5E5E5"> also use GM or you</font>

233
00:08:19,090 --> 00:08:22,900
can do<font color="#CCCCCC"> GAO which is the alias for get</font>

234
00:08:20,860 --> 00:08:24,130
alias and pipe GM and then<font color="#E5E5E5"> pipe that</font>

235
00:08:22,900 --> 00:08:27,130
<font color="#E5E5E5">into an invocation operator and now</font>

236
00:08:24,130 --> 00:08:28,900
let's get<font color="#CCCCCC"> member</font><font color="#E5E5E5"> alright we're still</font>

237
00:08:27,130 --> 00:08:30,190
going for an argument<font color="#CCCCCC"> and that's how it</font>

238
00:08:28,900 --> 00:08:31,659
web client we can throw<font color="#E5E5E5"> a parentheses</font>

239
00:08:30,190 --> 00:08:33,640
around<font color="#E5E5E5"> it and we can just</font><font color="#CCCCCC"> concatenate it</font>

240
00:08:31,660 --> 00:08:35,380
in line<font color="#CCCCCC"> it still works</font>

241
00:08:33,640 --> 00:08:36,848
and lastly<font color="#CCCCCC"> i'll go back to new object</font>

242
00:08:35,380 --> 00:08:39,039
which is a command<font color="#E5E5E5"> lit and in this case</font>

243
00:08:36,849 --> 00:08:40,570
we'll just use the dash F format

244
00:08:39,039 --> 00:08:42,189
operator and we're<font color="#E5E5E5"> gonna invoke it with</font>

245
00:08:40,570 --> 00:08:44,290
a dot you<font color="#CCCCCC"> could also use an ampersand</font>

246
00:08:42,190 --> 00:08:45,760
that's are<font color="#E5E5E5"> both invocation operators so</font>

247
00:08:44,290 --> 00:08:48,610
we're basically going to say<font color="#E5E5E5"> chop it</font>

248
00:08:45,760 --> 00:08:50,620
<font color="#E5E5E5">into two sub strings and then reverse</font>

249
00:08:48,610 --> 00:08:53,020
<font color="#CCCCCC">the order of</font><font color="#E5E5E5"> those two sub strings to</font>

250
00:08:50,620 --> 00:08:55,540
<font color="#E5E5E5">get it to work perfect</font><font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is</font>

251
00:08:53,020 --> 00:08:57,430
download string now<font color="#E5E5E5"> so let's copy this</font>

252
00:08:55,540 --> 00:08:59,170
and let's<font color="#CCCCCC"> create just the simple down</font>

253
00:08:57,430 --> 00:09:03,339
cradle<font color="#E5E5E5"> again something an attacker might</font>

254
00:08:59,170 --> 00:09:05,829
use let's just make sure<font color="#CCCCCC"> that it works</font>

255
00:09:03,339 --> 00:09:09,520
<font color="#CCCCCC">and we're gonna</font><font color="#E5E5E5"> use the</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> bitly</font>

256
00:09:05,830 --> 00:09:12,760
totally legit<font color="#E5E5E5"> link</font><font color="#CCCCCC"> I should</font><font color="#E5E5E5"> just print</font>

257
00:09:09,520 --> 00:09:14,020
out<font color="#E5E5E5"> a green statement perfect now let's</font>

258
00:09:12,760 --> 00:09:15,399
go back and<font color="#CCCCCC"> let's</font><font color="#E5E5E5"> replace that download</font>

259
00:09:14,020 --> 00:09:17,319
string<font color="#E5E5E5"> we'll just throw in our</font>

260
00:09:15,399 --> 00:09:19,750
<font color="#CCCCCC">parentheses and then paste in our</font>

261
00:09:17,320 --> 00:09:24,160
<font color="#E5E5E5">payload here adjust for</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> new line</font>

262
00:09:19,750 --> 00:09:26,920
hit<font color="#E5E5E5"> enter and our command works so we</font>

263
00:09:24,160 --> 00:09:30,310
<font color="#CCCCCC">can iterate like that when I say we I</font>

264
00:09:26,920 --> 00:09:32,709
mean attackers can do that so how does

265
00:09:30,310 --> 00:09:34,089
this affect my data as a defender<font color="#E5E5E5"> how</font>

266
00:09:32,709 --> 00:09:39,760
does this<font color="#E5E5E5"> affect my detections as a</font>

267
00:09:34,089 --> 00:09:41,620
defender so let's paste that<font color="#E5E5E5"> in this is</font>

268
00:09:39,760 --> 00:09:43,060
now download string and I'm kind<font color="#E5E5E5"> of</font>

269
00:09:41,620 --> 00:09:47,649
calling<font color="#E5E5E5"> this member</font><font color="#CCCCCC"> and numeration or</font>

270
00:09:43,060 --> 00:09:51,160
like string substitution obfuscation<font color="#E5E5E5"> and</font>

271
00:09:47,649 --> 00:09:52,770
we can keep going<font color="#E5E5E5"> at ticks there</font><font color="#CCCCCC"> yeah</font>

272
00:09:51,160 --> 00:09:56,410
let's<font color="#E5E5E5"> just keep going</font><font color="#CCCCCC"> a new object</font>

273
00:09:52,770 --> 00:09:58,180
format operator ASCII<font color="#E5E5E5"> in this case we're</font>

274
00:09:56,410 --> 00:09:59,560
using<font color="#CCCCCC"> git command a new object with some</font>

275
00:09:58,180 --> 00:10:02,550
wild<font color="#CCCCCC"> cards that invoking</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> the</font>

276
00:09:59,560 --> 00:10:04,660
dot from<font color="#E5E5E5"> the object that's returned and</font>

277
00:10:02,550 --> 00:10:06,699
invoke expression is the kind<font color="#E5E5E5"> of</font>

278
00:10:04,660 --> 00:10:08,380
<font color="#CCCCCC">them.the the intelligible piece of</font>

279
00:10:06,700 --> 00:10:10,060
what's left<font color="#E5E5E5"> here</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> there's a ton of</font>

280
00:10:08,380 --> 00:10:12,610
ways<font color="#E5E5E5"> that you can actually invoke code</font>

281
00:10:10,060 --> 00:10:15,010
<font color="#E5E5E5">so let's just let's just take the whole</font>

282
00:10:12,610 --> 00:10:16,630
body the<font color="#CCCCCC"> rest of the command I'll</font><font color="#E5E5E5"> store</font>

283
00:10:15,010 --> 00:10:18,339
<font color="#CCCCCC">it in this expression variable and let's</font>

284
00:10:16,630 --> 00:10:20,380
walk<font color="#CCCCCC"> through</font><font color="#E5E5E5"> some ways we can invoke the</font>

285
00:10:18,339 --> 00:10:22,209
contents of that<font color="#E5E5E5"> expression variable so</font>

286
00:10:20,380 --> 00:10:24,490
since it's a commandment we can use tick

287
00:10:22,209 --> 00:10:26,410
marks we can invoke<font color="#CCCCCC"> it with the</font>

288
00:10:24,490 --> 00:10:28,470
invocation operator<font color="#E5E5E5"> and just it</font>

289
00:10:26,410 --> 00:10:31,029
basically<font color="#E5E5E5"> any way we can get</font><font color="#CCCCCC"> ie X</font><font color="#E5E5E5"> right</font>

290
00:10:28,470 --> 00:10:33,160
concatenation reordering<font color="#E5E5E5"> ASCII</font>

291
00:10:31,029 --> 00:10:34,810
conversion in this case we're saying let

292
00:10:33,160 --> 00:10:37,689
<font color="#E5E5E5">me take a string in this</font><font color="#CCCCCC"> case it's an</font>

293
00:10:34,810 --> 00:10:39,040
empty string<font color="#E5E5E5"> and let me see this member</font>

294
00:10:37,690 --> 00:10:40,420
now this member happens to be an

295
00:10:39,040 --> 00:10:42,550
<font color="#E5E5E5">overloaded member so it will</font><font color="#CCCCCC"> show us</font>

296
00:10:40,420 --> 00:10:44,949
many members let me take that<font color="#CCCCCC"> cast all</font>

297
00:10:42,550 --> 00:10:46,900
that text<font color="#CCCCCC"> to a string and then</font><font color="#E5E5E5"> the 84th</font>

298
00:10:44,950 --> 00:10:48,550
<font color="#E5E5E5">11th and the 80th indexes are gonna be</font>

299
00:10:46,900 --> 00:10:50,829
ie<font color="#E5E5E5"> and X so we're going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> join</font><font color="#CCCCCC"> that</font>

300
00:10:48,550 --> 00:10:52,569
back together and invoke it that is ie X

301
00:10:50,829 --> 00:10:54,040
so as you can<font color="#E5E5E5"> see</font><font color="#CCCCCC"> there's</font><font color="#E5E5E5"> really no end</font>

302
00:10:52,570 --> 00:10:55,660
<font color="#E5E5E5">there's no limit you were just</font>

303
00:10:54,040 --> 00:10:58,630
manipulating<font color="#CCCCCC"> strings and pulling the</font>

304
00:10:55,660 --> 00:11:00,790
<font color="#E5E5E5">data from weird places</font><font color="#CCCCCC"> we could also use</font>

305
00:10:58,630 --> 00:11:02,680
<font color="#CCCCCC">git command or get alias</font><font color="#E5E5E5"> or their</font>

306
00:11:00,790 --> 00:11:05,290
<font color="#E5E5E5">aliases themselves and use wildcards</font>

307
00:11:02,680 --> 00:11:07,689
there<font color="#E5E5E5"> we can take expressions cast in</font>

308
00:11:05,290 --> 00:11:10,290
the script blocks<font color="#E5E5E5"> run spaces in bocas</font>

309
00:11:07,690 --> 00:11:12,779
workflow this is<font color="#CCCCCC"> powershell 3</font><font color="#E5E5E5"> year later</font>

310
00:11:10,290 --> 00:11:14,519
we can also go<font color="#CCCCCC"> to powershell 1 and use</font>

311
00:11:12,779 --> 00:11:16,259
this<font color="#E5E5E5"> execution context this is</font><font color="#CCCCCC"> an</font>

312
00:11:14,519 --> 00:11:19,019
automatic variable and<font color="#CCCCCC"> powershell and</font>

313
00:11:16,259 --> 00:11:20,910
there are tons<font color="#E5E5E5"> of ways that you can</font>

314
00:11:19,019 --> 00:11:22,649
execute code and do a lot of<font color="#E5E5E5"> stuff and</font>

315
00:11:20,910 --> 00:11:24,419
<font color="#E5E5E5">I've still I've still</font><font color="#CCCCCC"> only seen like one</font>

316
00:11:22,649 --> 00:11:25,589
or two<font color="#E5E5E5"> attackers use this and I bet you</font>

317
00:11:24,419 --> 00:11:27,629
a<font color="#CCCCCC"> lot of</font><font color="#E5E5E5"> defenders aren't looking</font><font color="#CCCCCC"> for</font>

318
00:11:25,589 --> 00:11:29,789
execution context<font color="#CCCCCC"> which you should be</font>

319
00:11:27,629 --> 00:11:31,979
but if you are<font color="#E5E5E5"> attackers could just to</font>

320
00:11:29,789 --> 00:11:33,449
<font color="#E5E5E5">do that and it's kind</font><font color="#CCCCCC"> of like like how</font>

321
00:11:31,979 --> 00:11:35,819
do you<font color="#E5E5E5"> deal with that right and this is</font>

322
00:11:33,449 --> 00:11:37,228
using<font color="#E5E5E5"> that substitution office</font><font color="#CCCCCC"> keishon</font>

323
00:11:35,819 --> 00:11:38,939
<font color="#E5E5E5">so basically there's a lot</font><font color="#CCCCCC"> of ways you</font>

324
00:11:37,229 --> 00:11:42,059
<font color="#E5E5E5">can obfuscate any component of</font>

325
00:11:38,939 --> 00:11:44,998
PowerShell um<font color="#E5E5E5"> within</font><font color="#CCCCCC"> an invoke</font><font color="#E5E5E5"> cradle</font>

326
00:11:42,059 --> 00:11:46,919
crafter<font color="#E5E5E5"> which I talked about last year</font><font color="#CCCCCC"> I</font>

327
00:11:44,999 --> 00:11:48,389
<font color="#CCCCCC">basically built out this a huge an</font>

328
00:11:46,919 --> 00:11:50,160
<font color="#E5E5E5">invocation list where</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can go through</font>

329
00:11:48,389 --> 00:11:52,049
and enumerate any of these<font color="#CCCCCC"> options to</font>

330
00:11:50,160 --> 00:11:53,549
kind of have each of these components

331
00:11:52,049 --> 00:11:55,559
randomized so you can basically say as a

332
00:11:53,549 --> 00:11:57,689
defender crap do I detect this or what

333
00:11:55,559 --> 00:11:59,368
<font color="#CCCCCC">if I just generate a thousand payloads</font>

334
00:11:57,689 --> 00:12:00,779
with all these<font color="#E5E5E5"> options</font><font color="#CCCCCC"> how many of these</font>

335
00:11:59,369 --> 00:12:03,600
would I detect based on<font color="#E5E5E5"> invocation</font>

336
00:12:00,779 --> 00:12:05,009
syntax<font color="#E5E5E5"> the important thing</font><font color="#CCCCCC"> to note is</font>

337
00:12:03,600 --> 00:12:06,899
that<font color="#E5E5E5"> PowerShell logging is awesome</font>

338
00:12:05,009 --> 00:12:12,779
<font color="#E5E5E5">module logs are not affected by this</font>

339
00:12:06,899 --> 00:12:15,619
obfuscation<font color="#E5E5E5"> but script block logs are so</font>

340
00:12:12,779 --> 00:12:19,859
invoke obfuscation invoke cradle crafter

341
00:12:15,619 --> 00:12:21,119
<font color="#CCCCCC">are two</font><font color="#E5E5E5"> are the the first two office</font>

342
00:12:19,859 --> 00:12:23,759
keishon frameworks that<font color="#E5E5E5"> I wrote to make</font>

343
00:12:21,119 --> 00:12:26,519
this<font color="#E5E5E5"> kind of stuff easy</font><font color="#CCCCCC"> and again for</font><font color="#E5E5E5"> me</font>

344
00:12:23,759 --> 00:12:29,879
<font color="#CCCCCC">I basically wrote</font><font color="#E5E5E5"> these as like custom</font>

345
00:12:26,519 --> 00:12:31,919
fuzzers kind of so<font color="#E5E5E5"> that if I know if I</font>

346
00:12:29,879 --> 00:12:33,689
know<font color="#E5E5E5"> something is able to be executed or</font>

347
00:12:31,919 --> 00:12:35,279
moved<font color="#CCCCCC"> around in a certain way if I</font><font color="#E5E5E5"> can</font>

348
00:12:33,689 --> 00:12:36,899
<font color="#E5E5E5">build that logic into an automated tool</font>

349
00:12:35,279 --> 00:12:38,910
then I can<font color="#E5E5E5"> generate thousands of</font>

350
00:12:36,899 --> 00:12:41,939
<font color="#CCCCCC">examples that still execute properly and</font>

351
00:12:38,910 --> 00:12:44,009
then write my detections off of that so

352
00:12:41,939 --> 00:12:45,358
we<font color="#E5E5E5"> input</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> simple right host command and</font>

353
00:12:44,009 --> 00:12:47,039
we can go<font color="#E5E5E5"> through each</font><font color="#CCCCCC"> of the tokens</font>

354
00:12:45,359 --> 00:12:51,419
let's say obfuscate the strings<font color="#CCCCCC"> off</font>

355
00:12:47,039 --> 00:12:53,809
<font color="#CCCCCC">escape the command</font><font color="#E5E5E5"> the members etc or we</font>

356
00:12:51,419 --> 00:12:57,059
can<font color="#E5E5E5"> just obfuscate all of it</font><font color="#CCCCCC"> together</font><font color="#E5E5E5"> as</font>

357
00:12:53,809 --> 00:12:59,399
many<font color="#CCCCCC"> times as we want it'll</font><font color="#E5E5E5"> randomly go</font>

358
00:12:57,059 --> 00:13:00,839
through and<font color="#E5E5E5"> obfuscate all those and at</font>

359
00:12:59,399 --> 00:13:02,579
any point<font color="#CCCCCC"> you can go back and say let me</font>

360
00:13:00,839 --> 00:13:03,989
<font color="#E5E5E5">wrap all that and as a string layer</font>

361
00:13:02,579 --> 00:13:05,219
office<font color="#CCCCCC"> Gatien to treat the whole thing</font>

362
00:13:03,989 --> 00:13:06,209
as a string in this<font color="#E5E5E5"> case let's</font><font color="#CCCCCC"> just</font>

363
00:13:05,220 --> 00:13:08,339
reverse the whole<font color="#E5E5E5"> command and</font>

364
00:13:06,209 --> 00:13:09,809
<font color="#CCCCCC">concatenate it</font><font color="#E5E5E5"> and you can do that many</font>

365
00:13:08,339 --> 00:13:11,129
<font color="#E5E5E5">times over and over</font><font color="#CCCCCC"> again and it still</font>

366
00:13:09,809 --> 00:13:12,629
<font color="#E5E5E5">works but hey we're almost at three</font>

367
00:13:11,129 --> 00:13:14,759
thousand characters maybe we should

368
00:13:12,629 --> 00:13:16,769
compress it and save some space<font color="#CCCCCC"> that's a</font>

369
00:13:14,759 --> 00:13:17,850
function<font color="#E5E5E5"> I added a couple months ago so</font>

370
00:13:16,769 --> 00:13:19,470
we<font color="#E5E5E5"> just chopped off a thousand</font>

371
00:13:17,850 --> 00:13:21,509
characters perfect<font color="#CCCCCC"> one</font><font color="#E5E5E5"> grab it to the</font>

372
00:13:19,470 --> 00:13:24,300
clipboard<font color="#E5E5E5"> copy and PowerShell and our</font>

373
00:13:21,509 --> 00:13:26,290
testing one two three still works

374
00:13:24,300 --> 00:13:28,420
so let's remove all<font color="#E5E5E5"> that let's go to</font>

375
00:13:26,290 --> 00:13:31,300
encoding<font color="#E5E5E5"> there's a ton of encoding here</font>

376
00:13:28,420 --> 00:13:33,459
the two ones<font color="#CCCCCC"> I released last</font><font color="#E5E5E5"> year our</font>

377
00:13:31,300 --> 00:13:35,498
special character<font color="#CCCCCC"> only so</font><font color="#E5E5E5"> 100% special</font>

378
00:13:33,459 --> 00:13:37,599
characters<font color="#E5E5E5"> this was originally found by</font>

379
00:13:35,499 --> 00:13:40,600
a<font color="#E5E5E5"> Japanese researcher back in 2010</font>

380
00:13:37,600 --> 00:13:42,220
<font color="#E5E5E5">payload still works it's a really</font>

381
00:13:40,600 --> 00:13:43,749
brilliant way that he he came up with

382
00:13:42,220 --> 00:13:45,639
<font color="#CCCCCC">that</font><font color="#E5E5E5"> and then this is whitespace</font>

383
00:13:43,749 --> 00:13:48,100
encoding<font color="#CCCCCC"> star entire command is white</font>

384
00:13:45,639 --> 00:13:49,540
space<font color="#CCCCCC"> and</font><font color="#E5E5E5"> delimited by tabs or tabs</font>

385
00:13:48,100 --> 00:13:51,670
delimited<font color="#CCCCCC"> by white space and then</font>

386
00:13:49,540 --> 00:13:54,248
decoded<font color="#E5E5E5"> by a stub at the end as you can</font>

387
00:13:51,670 --> 00:13:57,279
see it still works<font color="#E5E5E5"> defenders in the</font>

388
00:13:54,249 --> 00:14:00,339
<font color="#E5E5E5">house film pretty good yeah</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> right</font>

389
00:13:57,279 --> 00:14:02,170
<font color="#E5E5E5">Rob's feeling good so as a cradle</font>

390
00:14:00,339 --> 00:14:03,279
crafter<font color="#E5E5E5"> you can basically</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> say okay</font>

391
00:14:02,170 --> 00:14:05,110
well let me<font color="#E5E5E5"> take a completely different</font>

392
00:14:03,279 --> 00:14:06,999
<font color="#E5E5E5">approach</font><font color="#CCCCCC"> maybe I don't want tick marks</font>

393
00:14:05,110 --> 00:14:09,069
and<font color="#CCCCCC"> stuff on my command</font><font color="#E5E5E5"> maybe I just</font>

394
00:14:06,999 --> 00:14:10,529
want to feed<font color="#E5E5E5"> a URL to</font><font color="#CCCCCC"> that same bitly</font>

395
00:14:09,069 --> 00:14:13,719
link and then kind of explore<font color="#CCCCCC"> that</font>

396
00:14:10,529 --> 00:14:15,429
substitution office<font color="#CCCCCC"> Gatien so in this</font>

397
00:14:13,720 --> 00:14:16,839
case we'll just<font color="#E5E5E5"> set our URL to that link</font>

398
00:14:15,429 --> 00:14:18,970
we can<font color="#E5E5E5"> choose between memory or disk</font>

399
00:14:16,839 --> 00:14:21,299
<font color="#CCCCCC">based cradles</font><font color="#E5E5E5"> we'll just go to the the</font>

400
00:14:18,970 --> 00:14:24,160
<font color="#CCCCCC">kind</font><font color="#E5E5E5"> of regular download string option</font>

401
00:14:21,299 --> 00:14:26,079
<font color="#E5E5E5">and we can</font><font color="#CCCCCC"> basically similarly choose</font>

402
00:14:24,160 --> 00:14:27,279
between different<font color="#E5E5E5"> token types and</font>

403
00:14:26,079 --> 00:14:28,689
<font color="#E5E5E5">obfuscate that and it kind of highlights</font>

404
00:14:27,279 --> 00:14:30,399
<font color="#E5E5E5">at yellow so you can see the changes</font>

405
00:14:28,689 --> 00:14:32,110
that<font color="#E5E5E5"> happened so now we're using git</font>

406
00:14:30,399 --> 00:14:33,790
command<font color="#E5E5E5"> and kind of showing</font><font color="#CCCCCC"> it's</font>

407
00:14:32,110 --> 00:14:35,199
producing<font color="#E5E5E5"> different options there or we</font>

408
00:14:33,790 --> 00:14:37,089
<font color="#E5E5E5">can use PowerShell one of those syntax</font>

409
00:14:35,199 --> 00:14:39,429
which I can it's<font color="#CCCCCC"> really crazy really</font>

410
00:14:37,089 --> 00:14:41,259
<font color="#E5E5E5">fast and as you can</font><font color="#CCCCCC"> see it</font><font color="#E5E5E5"> that</font>

411
00:14:39,429 --> 00:14:42,790
downloaded<font color="#E5E5E5"> the the code</font><font color="#CCCCCC"> it didn't</font>

412
00:14:41,259 --> 00:14:45,100
actually invoke it because we didn't add

413
00:14:42,790 --> 00:14:46,269
an invocation syntax<font color="#CCCCCC"> but</font><font color="#E5E5E5"> for that this</font>

414
00:14:45,100 --> 00:14:48,189
<font color="#CCCCCC">is what the screenshot</font><font color="#E5E5E5"> was earlier</font>

415
00:14:46,269 --> 00:14:52,019
here's the invocation<font color="#E5E5E5"> menu we'll just</font>

416
00:14:48,189 --> 00:14:52,019
choose one of<font color="#E5E5E5"> those and that now is ie X</font>

417
00:14:52,649 --> 00:14:56,259
so again<font color="#E5E5E5"> it gets pretty crazy</font><font color="#CCCCCC"> pretty</font>

418
00:14:55,089 --> 00:14:58,449
<font color="#E5E5E5">fast and as you can see that</font><font color="#CCCCCC"> commands</font>

419
00:14:56,259 --> 00:14:59,980
still<font color="#E5E5E5"> works but what you can do is you</font>

420
00:14:58,449 --> 00:15:01,809
<font color="#E5E5E5">can just</font><font color="#CCCCCC"> go to all and</font><font color="#E5E5E5"> just run that as</font>

421
00:14:59,980 --> 00:15:03,879
many times<font color="#CCCCCC"> as</font><font color="#E5E5E5"> you want and have</font><font color="#CCCCCC"> it go</font>

422
00:15:01,809 --> 00:15:06,879
<font color="#CCCCCC">through all the pieces</font><font color="#E5E5E5"> and randomize all</font>

423
00:15:03,879 --> 00:15:07,990
<font color="#E5E5E5">those but then after testing you make</font>

424
00:15:06,879 --> 00:15:11,679
<font color="#E5E5E5">sure it still</font><font color="#CCCCCC"> works you can put it in</font>

425
00:15:07,990 --> 00:15:13,990
the clipboard<font color="#CCCCCC"> and then</font><font color="#E5E5E5"> you can set</font><font color="#CCCCCC"> it</font>

426
00:15:11,679 --> 00:15:15,249
back in to invoke confiscation<font color="#E5E5E5"> and say</font>

427
00:15:13,990 --> 00:15:17,259
I've used<font color="#CCCCCC"> cradle crafter to</font><font color="#E5E5E5"> get</font>

428
00:15:15,249 --> 00:15:18,910
substitution<font color="#E5E5E5"> office keishon let me take</font>

429
00:15:17,259 --> 00:15:21,069
it back<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the invoke obfuscation and do</font>

430
00:15:18,910 --> 00:15:22,689
token layer obfuscation<font color="#E5E5E5"> then let me go</font>

431
00:15:21,069 --> 00:15:24,128
back<font color="#E5E5E5"> it's going through randomly all the</font>

432
00:15:22,689 --> 00:15:25,899
<font color="#E5E5E5">tokens that are there which is a lot</font>

433
00:15:24,129 --> 00:15:27,819
<font color="#E5E5E5">more than the original</font><font color="#CCCCCC"> one then you can</font>

434
00:15:25,899 --> 00:15:29,879
<font color="#E5E5E5">go back and add all that string layer</font>

435
00:15:27,819 --> 00:15:32,079
<font color="#E5E5E5">encoding layer all that kind of stuff</font>

436
00:15:29,879 --> 00:15:34,269
<font color="#E5E5E5">and PowerShell script</font><font color="#CCCCCC"> block</font><font color="#E5E5E5"> logs will</font>

437
00:15:32,079 --> 00:15:35,919
log every unwrapped layer except for the

438
00:15:34,269 --> 00:15:38,850
very<font color="#E5E5E5"> last one and all that office</font><font color="#CCCCCC"> Gatien</font>

439
00:15:35,919 --> 00:15:38,850
is still going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> present</font>

440
00:15:38,910 --> 00:15:43,329
so<font color="#E5E5E5"> okay now that we know that attackers</font>

441
00:15:41,980 --> 00:15:45,790
<font color="#E5E5E5">can do that with a few clicks of a</font>

442
00:15:43,329 --> 00:15:47,199
button<font color="#CCCCCC"> why did you do that it's</font><font color="#E5E5E5"> like how</font>

443
00:15:45,790 --> 00:15:48,998
do we<font color="#E5E5E5"> detect this well again as</font>

444
00:15:47,199 --> 00:15:49,569
defenders let's assess our tools<font color="#CCCCCC"> what do</font>

445
00:15:48,999 --> 00:15:51,879
<font color="#E5E5E5">we have</font>

446
00:15:49,569 --> 00:15:53,800
well Microsoft has given<font color="#CCCCCC"> us</font><font color="#E5E5E5"> awesome</font>

447
00:15:51,879 --> 00:15:56,050
<font color="#E5E5E5">PowerShell logging module script lock</font>

448
00:15:53,800 --> 00:15:57,399
transcription logs but you have to know

449
00:15:56,050 --> 00:15:59,469
some of<font color="#E5E5E5"> the limitations there in terms</font>

450
00:15:57,399 --> 00:16:03,040
of<font color="#E5E5E5"> how the data</font><font color="#CCCCCC"> is still polluted at</font>

451
00:15:59,470 --> 00:16:04,569
that last level<font color="#E5E5E5"> the abstract syntax tree</font>

452
00:16:03,040 --> 00:16:07,269
and<font color="#CCCCCC"> the PS script analyzer are the two</font>

453
00:16:04,569 --> 00:16:09,189
<font color="#E5E5E5">ones I want to focus on here if you take</font>

454
00:16:07,269 --> 00:16:10,809
a<font color="#E5E5E5"> PowerShell</font><font color="#CCCCCC"> command in PowerShell - you</font>

455
00:16:09,189 --> 00:16:13,540
could use the dotnet language parser<font color="#CCCCCC"> -</font>

456
00:16:10,809 --> 00:16:14,860
tokenize it say in this command<font color="#E5E5E5"> this is</font>

457
00:16:13,540 --> 00:16:18,099
your parentheses this is a format

458
00:16:14,860 --> 00:16:19,779
operator this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a string</font><font color="#E5E5E5"> etc but with</font>

459
00:16:18,100 --> 00:16:20,980
abstract syntax tree you get all that

460
00:16:19,779 --> 00:16:23,769
<font color="#CCCCCC">information but</font><font color="#E5E5E5"> you actually</font><font color="#CCCCCC"> it's</font>

461
00:16:20,980 --> 00:16:25,929
relationship<font color="#E5E5E5"> now this is really really</font>

462
00:16:23,769 --> 00:16:28,929
<font color="#CCCCCC">cool</font><font color="#E5E5E5"> one way</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you can actually</font>

463
00:16:25,929 --> 00:16:30,490
<font color="#E5E5E5">explore the ast is through that this ast</font>

464
00:16:28,929 --> 00:16:31,600
Explorer which<font color="#E5E5E5"> is a nice little</font><font color="#CCCCCC"> GUI tool</font>

465
00:16:30,490 --> 00:16:33,149
that you can just<font color="#CCCCCC"> throw commands</font><font color="#E5E5E5"> in</font>

466
00:16:31,600 --> 00:16:38,379
there and kind<font color="#CCCCCC"> of graphically explore</font>

467
00:16:33,149 --> 00:16:40,629
<font color="#CCCCCC">how</font><font color="#E5E5E5"> can use</font><font color="#CCCCCC"> AST one thing we can do is</font>

468
00:16:38,379 --> 00:16:42,100
we can<font color="#CCCCCC"> use it in rickroll because AST</font>

469
00:16:40,629 --> 00:16:44,679
conveniently is in the name rick astley

470
00:16:42,100 --> 00:16:46,119
<font color="#CCCCCC">alright that unfortunately isn't</font><font color="#E5E5E5"> help</font>

471
00:16:44,679 --> 00:16:47,499
you find evil it just kind<font color="#CCCCCC"> of makes new</font>

472
00:16:46,119 --> 00:16:50,439
<font color="#CCCCCC">friends or enemies depending on how the</font>

473
00:16:47,499 --> 00:16:54,009
person<font color="#E5E5E5"> received it but we</font><font color="#CCCCCC"> can also</font><font color="#E5E5E5"> use</font>

474
00:16:50,439 --> 00:16:55,449
the ast<font color="#CCCCCC"> -</font><font color="#E5E5E5"> - to basically extract</font>

475
00:16:54,009 --> 00:16:57,189
<font color="#CCCCCC">features to say tell me something about</font>

476
00:16:55,449 --> 00:16:58,628
<font color="#E5E5E5">this powershell</font><font color="#CCCCCC"> commander script and</font>

477
00:16:57,189 --> 00:17:00,279
this<font color="#E5E5E5"> is some research</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> lee holmes</font>

478
00:16:58,629 --> 00:17:02,740
and<font color="#E5E5E5"> i worked on last year where we</font>

479
00:17:00,279 --> 00:17:04,390
basically assembled a corpus of four

480
00:17:02,740 --> 00:17:05,859
<font color="#E5E5E5">hundred and eight thousand publicly</font>

481
00:17:04,390 --> 00:17:08,350
available<font color="#CCCCCC"> powershell scripts</font><font color="#E5E5E5"> from github</font>

482
00:17:05,859 --> 00:17:11,229
<font color="#CCCCCC">TechNet</font><font color="#E5E5E5"> posh code powershell gallery etc</font>

483
00:17:08,349 --> 00:17:13,839
and then we<font color="#CCCCCC"> labeled portions</font><font color="#E5E5E5"> of those</font>

484
00:17:11,230 --> 00:17:16,360
scripts as obfuscated or not obfuscated

485
00:17:13,839 --> 00:17:19,029
<font color="#E5E5E5">and then we basically use the</font><font color="#CCCCCC"> ast to be</font>

486
00:17:16,359 --> 00:17:21,549
<font color="#CCCCCC">able</font><font color="#E5E5E5"> to lift and extract</font><font color="#CCCCCC"> features over</font>

487
00:17:19,029 --> 00:17:25,000
<font color="#CCCCCC">5,000 features from all of these input</font>

488
00:17:21,549 --> 00:17:26,408
<font color="#CCCCCC">powershell scripts</font><font color="#E5E5E5"> so then use it for</font>

489
00:17:25,000 --> 00:17:26,859
detection purposes now what do I<font color="#E5E5E5"> mean by</font>

490
00:17:26,409 --> 00:17:28,840
<font color="#E5E5E5">that</font>

491
00:17:26,859 --> 00:17:30,850
well in this<font color="#E5E5E5"> case let's say that we use</font>

492
00:17:28,840 --> 00:17:33,158
<font color="#CCCCCC">this as our download string</font><font color="#E5E5E5"> office</font>

493
00:17:30,850 --> 00:17:35,590
keishon well maybe as a defender<font color="#E5E5E5"> I would</font>

494
00:17:33,159 --> 00:17:37,350
say well how many in any given member

495
00:17:35,590 --> 00:17:39,668
<font color="#E5E5E5">how many</font><font color="#CCCCCC"> of the characters should be</font>

496
00:17:37,350 --> 00:17:41,289
<font color="#E5E5E5">alphanumeric</font><font color="#CCCCCC"> versus special characters</font>

497
00:17:39,669 --> 00:17:42,909
<font color="#E5E5E5">so here's just a little one-liner in</font>

498
00:17:41,289 --> 00:17:44,169
<font color="#E5E5E5">power</font><font color="#CCCCCC"> show in this</font><font color="#E5E5E5"> case</font><font color="#CCCCCC"> almost half of</font>

499
00:17:42,909 --> 00:17:46,270
<font color="#E5E5E5">the characters in this example are</font>

500
00:17:44,169 --> 00:17:48,250
special characters<font color="#E5E5E5"> that's really weird</font>

501
00:17:46,270 --> 00:17:50,830
in a member right that shouldn't be the

502
00:17:48,250 --> 00:17:51,100
<font color="#CCCCCC">case</font><font color="#E5E5E5"> but I shouldn't be trying to figure</font>

503
00:17:50,830 --> 00:17:53,169
<font color="#CCCCCC">out</font>

504
00:17:51,100 --> 00:17:55,449
well how much<font color="#E5E5E5"> is too</font><font color="#CCCCCC"> much right if we</font>

505
00:17:53,170 --> 00:17:57,220
have this huge corpus of scripts<font color="#E5E5E5"> we can</font>

506
00:17:55,450 --> 00:17:59,650
use data science techniques to basically

507
00:17:57,220 --> 00:18:00,760
let it decide how important is the

508
00:17:59,650 --> 00:18:03,310
countless special characters<font color="#E5E5E5"> or the</font>

509
00:18:00,760 --> 00:18:05,110
ratio<font color="#CCCCCC"> or</font><font color="#E5E5E5"> maybe the ratio of uppercase to</font>

510
00:18:03,310 --> 00:18:07,360
lowercase<font color="#E5E5E5"> and all these kinds of things</font>

511
00:18:05,110 --> 00:18:09,189
<font color="#CCCCCC">are what we did and pull out of every</font>

512
00:18:07,360 --> 00:18:13,870
single<font color="#E5E5E5"> powershell script and command as</font>

513
00:18:09,190 --> 00:18:15,610
features to say is this obfuscated or is

514
00:18:13,870 --> 00:18:17,350
it not<font color="#CCCCCC"> and what that looks</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> and the</font>

515
00:18:15,610 --> 00:18:18,909
end result is in this case we're

516
00:18:17,350 --> 00:18:21,929
pointing at two directory of event log

517
00:18:18,910 --> 00:18:24,160
files<font color="#E5E5E5"> or saying take these n log files</font>

518
00:18:21,930 --> 00:18:26,320
<font color="#E5E5E5">reassemble</font><font color="#CCCCCC"> PowerShell scripts</font><font color="#E5E5E5"> out of the</font>

519
00:18:24,160 --> 00:18:28,270
script block<font color="#CCCCCC"> logs the</font><font color="#E5E5E5"> 4104 and then pipe</font>

520
00:18:26,320 --> 00:18:30,790
that into<font color="#CCCCCC"> this measure r vo obfuscation</font>

521
00:18:28,270 --> 00:18:31,840
function and store that<font color="#E5E5E5"> in res and as</font>

522
00:18:30,790 --> 00:18:33,700
you can<font color="#E5E5E5"> see here it's going through</font>

523
00:18:31,840 --> 00:18:35,050
<font color="#E5E5E5">these scripts and it's extracting</font><font color="#CCCCCC"> 5,000</font>

524
00:18:33,700 --> 00:18:36,970
features it's measuring them and saying

525
00:18:35,050 --> 00:18:39,190
<font color="#E5E5E5">are you office gated are you not based</font>

526
00:18:36,970 --> 00:18:41,470
on the<font color="#E5E5E5"> learning model</font><font color="#CCCCCC"> that we built and</font>

527
00:18:39,190 --> 00:18:42,910
then as you can<font color="#E5E5E5"> see we have the full</font>

528
00:18:41,470 --> 00:18:45,340
contents of the<font color="#CCCCCC"> scripts that's labeled</font>

529
00:18:42,910 --> 00:18:47,190
as malicious<font color="#E5E5E5"> or as obfuscated so in this</font>

530
00:18:45,340 --> 00:18:49,570
case this is one<font color="#CCCCCC"> of</font><font color="#E5E5E5"> those white space</font>

531
00:18:47,190 --> 00:18:50,950
white space only<font color="#CCCCCC"> payloads</font><font color="#E5E5E5"> this is the</font>

532
00:18:49,570 --> 00:18:53,770
second stage this<font color="#CCCCCC"> is actually</font><font color="#E5E5E5"> what that</font>

533
00:18:50,950 --> 00:18:59,920
<font color="#E5E5E5">white space only resolves</font><font color="#CCCCCC"> to and script</font>

534
00:18:53,770 --> 00:19:02,020
block logging<font color="#E5E5E5"> captures that and then</font>

535
00:18:59,920 --> 00:19:03,940
also in the<font color="#CCCCCC"> data we</font><font color="#E5E5E5"> have all</font><font color="#CCCCCC"> 5,000</font>

536
00:19:02,020 --> 00:19:06,070
features<font color="#E5E5E5"> and all the values associated</font>

537
00:19:03,940 --> 00:19:07,480
<font color="#E5E5E5">with that as well as things like how</font>

538
00:19:06,070 --> 00:19:08,740
much time<font color="#CCCCCC"> did</font><font color="#E5E5E5"> it take to extract</font><font color="#CCCCCC"> those</font>

539
00:19:07,480 --> 00:19:16,120
features how much time did<font color="#E5E5E5"> it take to</font>

540
00:19:08,740 --> 00:19:17,860
measure<font color="#E5E5E5"> all that fun stuff so</font><font color="#CCCCCC"> if you're</font>

541
00:19:16,120 --> 00:19:19,840
<font color="#E5E5E5">interested in</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> then Lee and I</font>

542
00:19:17,860 --> 00:19:21,219
published a<font color="#CCCCCC"> blog post on</font><font color="#E5E5E5"> this or you can</font>

543
00:19:19,840 --> 00:19:22,600
watch us ramble on about<font color="#E5E5E5"> this or just</font>

544
00:19:21,220 --> 00:19:24,220
<font color="#E5E5E5">check out the source code for yourself</font>

545
00:19:22,600 --> 00:19:25,540
<font color="#E5E5E5">or</font><font color="#CCCCCC"> just on</font>

546
00:19:24,220 --> 00:19:27,910
if you open<font color="#CCCCCC"> a PowerShell in just</font><font color="#E5E5E5"> do</font>

547
00:19:25,540 --> 00:19:29,379
install - module<font color="#E5E5E5"> revoke - obfuscation</font>

548
00:19:27,910 --> 00:19:31,270
then you'll pull<font color="#CCCCCC"> it from the</font><font color="#E5E5E5"> PowerShell</font>

549
00:19:29,380 --> 00:19:35,740
gallery<font color="#E5E5E5"> and use it be up and</font><font color="#CCCCCC"> running</font><font color="#E5E5E5"> in</font>

550
00:19:31,270 --> 00:19:39,129
like<font color="#E5E5E5"> 20 seconds so attackers could also</font>

551
00:19:35,740 --> 00:19:40,540
use the<font color="#E5E5E5"> ast</font><font color="#CCCCCC"> Ryan Cobb</font><font color="#E5E5E5"> is a consultant</font>

552
00:19:39,130 --> 00:19:42,190
<font color="#E5E5E5">out in</font><font color="#CCCCCC"> Texas who's done some really</font>

553
00:19:40,540 --> 00:19:44,560
interesting<font color="#E5E5E5"> work</font><font color="#CCCCCC"> he released this tool</font>

554
00:19:42,190 --> 00:19:46,630
<font color="#E5E5E5">called</font><font color="#CCCCCC"> PSM Z at Derby</font><font color="#E5E5E5"> con last year</font>

555
00:19:44,560 --> 00:19:49,149
conference in Kentucky I mean<font color="#CCCCCC"> basically</font>

556
00:19:46,630 --> 00:19:50,860
he is<font color="#E5E5E5"> the ast and impaired it with so</font><font color="#CCCCCC"> AM</font>

557
00:19:49,150 --> 00:19:52,750
G's the anti-malware scan<font color="#CCCCCC"> interfaces</font>

558
00:19:50,860 --> 00:19:54,879
<font color="#E5E5E5">Microsoft's</font><font color="#CCCCCC"> interfaces</font><font color="#E5E5E5"> say hey any</font>

559
00:19:52,750 --> 00:19:57,160
registered AV vendors<font color="#E5E5E5"> you're welcome to</font>

560
00:19:54,880 --> 00:19:59,200
interface with<font color="#E5E5E5"> this and actually get in</font>

561
00:19:57,160 --> 00:20:00,850
get<font color="#E5E5E5"> visibility into all this awesome</font>

562
00:19:59,200 --> 00:20:02,560
script<font color="#E5E5E5"> lock logging for</font><font color="#CCCCCC"> powershell</font><font color="#E5E5E5"> and</font>

563
00:20:00,850 --> 00:20:04,310
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> additional visibility</font><font color="#CCCCCC"> into a lot</font><font color="#E5E5E5"> of</font>

564
00:20:02,560 --> 00:20:06,740
<font color="#E5E5E5">other scripting languages</font><font color="#CCCCCC"> to actually</font>

565
00:20:04,310 --> 00:20:08,570
make in memory<font color="#E5E5E5"> that have in</font><font color="#CCCCCC"> nomura</font>

566
00:20:06,740 --> 00:20:09,950
visibility to make<font color="#E5E5E5"> block no block</font>

567
00:20:08,570 --> 00:20:12,350
decisions on whether something<font color="#E5E5E5"> is</font>

568
00:20:09,950 --> 00:20:15,050
<font color="#E5E5E5">malicious or not so what he found was</font>

569
00:20:12,350 --> 00:20:16,790
<font color="#E5E5E5">okay well before</font><font color="#CCCCCC"> we as</font><font color="#E5E5E5"> attackers could</font>

570
00:20:15,050 --> 00:20:19,010
just obfuscate everything with all these

571
00:20:16,790 --> 00:20:21,110
<font color="#E5E5E5">tools and no one detected us but now</font>

572
00:20:19,010 --> 00:20:22,790
with<font color="#E5E5E5"> this like</font><font color="#CCCCCC"> sciency kind of stuff</font>

573
00:20:21,110 --> 00:20:25,040
it's actually<font color="#CCCCCC"> really easy</font><font color="#E5E5E5"> to detect</font>

574
00:20:22,790 --> 00:20:27,980
super<font color="#CCCCCC"> Optus gated stuff so his thought</font>

575
00:20:25,040 --> 00:20:30,350
process was<font color="#CCCCCC"> I can actually</font><font color="#E5E5E5"> use the ast</font>

576
00:20:27,980 --> 00:20:32,960
and<font color="#CCCCCC"> say okay registered</font><font color="#E5E5E5"> AV vendor you</font>

577
00:20:30,350 --> 00:20:34,669
say invoke mimikatz<font color="#E5E5E5"> is malicious</font><font color="#CCCCCC"> I'm</font>

578
00:20:32,960 --> 00:20:37,370
<font color="#E5E5E5">gonna office gate it okay well you still</font>

579
00:20:34,670 --> 00:20:39,530
say it's office gated<font color="#E5E5E5"> okay well maybe</font>

580
00:20:37,370 --> 00:20:41,300
I'll take the plain<font color="#E5E5E5"> text version and let</font>

581
00:20:39,530 --> 00:20:42,680
me let me traverse the tree<font color="#E5E5E5"> and hand you</font>

582
00:20:41,300 --> 00:20:43,820
every piece<font color="#CCCCCC"> of the tree and say do you</font>

583
00:20:42,680 --> 00:20:46,070
<font color="#E5E5E5">think this part of the script is</font>

584
00:20:43,820 --> 00:20:47,780
obfuscated<font color="#CCCCCC"> no</font><font color="#E5E5E5"> okay that's clean I</font><font color="#CCCCCC"> don't</font>

585
00:20:46,070 --> 00:20:49,129
have to obfuscate any of that but you

586
00:20:47,780 --> 00:20:50,420
say<font color="#E5E5E5"> this one is office</font><font color="#CCCCCC"> gated all right</font>

587
00:20:49,130 --> 00:20:52,040
let me find<font color="#E5E5E5"> what pieces</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the script</font>

588
00:20:50,420 --> 00:20:53,990
<font color="#CCCCCC">obfuscated</font><font color="#E5E5E5"> okay so it's this one chunk</font>

589
00:20:52,040 --> 00:20:55,879
<font color="#E5E5E5">here in one chunk here then he just</font>

590
00:20:53,990 --> 00:20:58,240
office<font color="#CCCCCC"> Cates</font><font color="#E5E5E5"> just those two chunks</font><font color="#CCCCCC"> so</font>

591
00:20:55,880 --> 00:21:00,770
<font color="#CCCCCC">he's used the ast to basically</font>

592
00:20:58,240 --> 00:21:03,230
systematically minimally obfuscate

593
00:21:00,770 --> 00:21:06,110
<font color="#CCCCCC">PowerShell scripts based on</font><font color="#E5E5E5"> signatures</font>

594
00:21:03,230 --> 00:21:08,810
for an AV vendor<font color="#E5E5E5"> that's really cool so</font>

595
00:21:06,110 --> 00:21:10,820
<font color="#CCCCCC">and he actually demonstrated on stage</font><font color="#E5E5E5"> a</font>

596
00:21:08,810 --> 00:21:13,960
minimally obfuscated script that

597
00:21:10,820 --> 00:21:16,850
bypassed our revoke obfuscation

598
00:21:13,960 --> 00:21:18,650
framework<font color="#E5E5E5"> that was really cool a really</font>

599
00:21:16,850 --> 00:21:20,540
neat way to<font color="#E5E5E5"> use</font><font color="#CCCCCC"> AST so that got me</font>

600
00:21:18,650 --> 00:21:23,210
<font color="#CCCCCC">thinking how can</font><font color="#E5E5E5"> we use the</font><font color="#CCCCCC"> s</font><font color="#E5E5E5"> to detect</font>

601
00:21:20,540 --> 00:21:24,889
<font color="#E5E5E5">minimal obfuscation using purely</font>

602
00:21:23,210 --> 00:21:27,200
<font color="#E5E5E5">signature based approach</font><font color="#CCCCCC"> for an entire</font>

603
00:21:24,890 --> 00:21:28,970
<font color="#CCCCCC">powershell script</font><font color="#E5E5E5"> you can bypass that so</font>

604
00:21:27,200 --> 00:21:30,740
<font color="#E5E5E5">many different ways do we still do</font><font color="#CCCCCC"> it</font>

605
00:21:28,970 --> 00:21:33,680
<font color="#E5E5E5">better believe we do because we still</font>

606
00:21:30,740 --> 00:21:35,780
get value out of<font color="#CCCCCC"> that if we</font><font color="#E5E5E5"> use Revo</font>

607
00:21:33,680 --> 00:21:37,610
confiscation<font color="#E5E5E5"> or something like that then</font>

608
00:21:35,780 --> 00:21:38,690
we<font color="#E5E5E5"> can detect office gated scripts but</font>

609
00:21:37,610 --> 00:21:41,270
<font color="#E5E5E5">what about people who are</font><font color="#CCCCCC"> really</font>

610
00:21:38,690 --> 00:21:42,980
<font color="#E5E5E5">fine-tuning and minimally obfuscating</font>

611
00:21:41,270 --> 00:21:45,110
well the<font color="#E5E5E5"> ast will let us write</font>

612
00:21:42,980 --> 00:21:46,790
signatures not on the whole script<font color="#E5E5E5"> but</font>

613
00:21:45,110 --> 00:21:48,919
we can drill down<font color="#CCCCCC"> on very specific</font>

614
00:21:46,790 --> 00:21:52,610
components of<font color="#E5E5E5"> any powershell script or</font>

615
00:21:48,920 --> 00:21:54,320
command so in this case this is<font color="#CCCCCC"> a this</font>

616
00:21:52,610 --> 00:21:56,060
<font color="#E5E5E5">is basically using PS script analyzer</font>

617
00:21:54,320 --> 00:21:58,250
it's a framework that lets<font color="#E5E5E5"> you write</font><font color="#CCCCCC"> ast</font>

618
00:21:56,060 --> 00:21:59,540
based rules and<font color="#E5E5E5"> most people on the</font>

619
00:21:58,250 --> 00:22:01,190
PowerShell world will use it<font color="#CCCCCC"> to</font>

620
00:21:59,540 --> 00:22:03,470
basically<font color="#E5E5E5"> do syntax checking and stuff</font>

621
00:22:01,190 --> 00:22:05,000
like that but<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can actually use it</font>

622
00:22:03,470 --> 00:22:07,250
for security<font color="#E5E5E5"> so I'm basically saying</font>

623
00:22:05,000 --> 00:22:10,280
take any<font color="#E5E5E5"> powershell script and give me</font>

624
00:22:07,250 --> 00:22:12,350
its abstract<font color="#CCCCCC"> syntax tree</font><font color="#E5E5E5"> and then pull</font>

625
00:22:10,280 --> 00:22:14,360
<font color="#CCCCCC">out all the</font><font color="#E5E5E5"> member expressions all those</font>

626
00:22:12,350 --> 00:22:16,129
download strings<font color="#E5E5E5"> and if any of them</font>

627
00:22:14,360 --> 00:22:16,820
contain a tick mark return is true and

628
00:22:16,130 --> 00:22:18,590
say

629
00:22:16,820 --> 00:22:21,320
this has<font color="#CCCCCC"> tick usage this is suspicious</font>

630
00:22:18,590 --> 00:22:22,970
<font color="#CCCCCC">and</font><font color="#E5E5E5"> on top</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> that why don't</font><font color="#CCCCCC"> we say how</font>

631
00:22:21,320 --> 00:22:25,399
<font color="#CCCCCC">many non alphanumeric characters</font><font color="#E5E5E5"> would</font>

632
00:22:22,970 --> 00:22:28,340
we expect<font color="#E5E5E5"> to see in methods or in</font>

633
00:22:25,399 --> 00:22:30,199
members sorry<font color="#CCCCCC"> and so with this corpus of</font>

634
00:22:28,340 --> 00:22:31,639
almost half a million scripts<font color="#CCCCCC"> I have all</font>

635
00:22:30,200 --> 00:22:32,960
this data I can<font color="#E5E5E5"> play with him block well</font>

636
00:22:31,639 --> 00:22:34,549
let me<font color="#E5E5E5"> see how common this</font><font color="#CCCCCC"> is and</font>

637
00:22:32,960 --> 00:22:36,620
actually there<font color="#E5E5E5"> are some cases</font><font color="#CCCCCC"> in which</font>

638
00:22:34,549 --> 00:22:39,250
<font color="#E5E5E5">these trims and trim starts and stuff</font>

639
00:22:36,620 --> 00:22:43,428
<font color="#E5E5E5">like that are used</font><font color="#CCCCCC"> for but basically</font>

640
00:22:39,250 --> 00:22:46,070
with with this talk I've released these

641
00:22:43,429 --> 00:22:49,309
just<font color="#E5E5E5"> six kind of starter detection rules</font>

642
00:22:46,070 --> 00:22:50,658
<font color="#E5E5E5">and in there as script</font><font color="#CCCCCC"> analyzer rules so</font>

643
00:22:49,309 --> 00:22:52,129
you<font color="#E5E5E5"> can just run invoke script analyzer</font>

644
00:22:50,659 --> 00:22:54,110
and<font color="#E5E5E5"> it will run all these but then I</font>

645
00:22:52,129 --> 00:22:55,759
wrote this<font color="#E5E5E5"> wrapper function</font><font color="#CCCCCC"> so basically</font>

646
00:22:54,110 --> 00:22:59,120
this<font color="#CCCCCC"> wrapping module</font><font color="#E5E5E5"> makes it easier to</font>

647
00:22:55,759 --> 00:23:01,279
<font color="#E5E5E5">kind of visualize what these rules are</font>

648
00:22:59,120 --> 00:23:03,168
and how they're hitting so what do I

649
00:23:01,279 --> 00:23:05,450
<font color="#E5E5E5">mean by that well in this huge corpus of</font>

650
00:23:03,169 --> 00:23:08,179
obfuscated scripts<font color="#E5E5E5"> we have ones that are</font>

651
00:23:05,450 --> 00:23:10,279
obfuscated within<font color="#CCCCCC"> Bo confiscation um</font>

652
00:23:08,179 --> 00:23:11,690
invoke<font color="#CCCCCC"> cradle crafter ISE steroids a few</font>

653
00:23:10,279 --> 00:23:14,000
different<font color="#CCCCCC"> ones</font><font color="#E5E5E5"> and that's</font><font color="#CCCCCC"> what running</font>

654
00:23:11,690 --> 00:23:16,490
<font color="#CCCCCC">it you can see it's showing</font><font color="#E5E5E5"> hey here's</font>

655
00:23:14,000 --> 00:23:18,529
the number<font color="#E5E5E5"> of times this this element</font>

656
00:23:16,490 --> 00:23:21,190
<font color="#E5E5E5">was in this member was in your script</font>

657
00:23:18,529 --> 00:23:25,460
<font color="#E5E5E5">here's the rule that it was matched on</font>

658
00:23:21,190 --> 00:23:27,799
<font color="#E5E5E5">and I think it's</font><font color="#CCCCCC"> number</font><font color="#E5E5E5"> 22 I think is</font>

659
00:23:25,460 --> 00:23:28,940
using the special characters<font color="#CCCCCC"> only and so</font>

660
00:23:27,799 --> 00:23:31,190
it's gonna have<font color="#E5E5E5"> like hundreds of</font>

661
00:23:28,940 --> 00:23:33,019
<font color="#CCCCCC">examples of variables of actually</font>

662
00:23:31,190 --> 00:23:34,129
methods that are variables that<font color="#E5E5E5"> are</font><font color="#CCCCCC"> just</font>

663
00:23:33,019 --> 00:23:39,399
<font color="#E5E5E5">special characters like those right</font>

664
00:23:34,129 --> 00:23:39,399
<font color="#CCCCCC">there</font><font color="#E5E5E5"> 500 samples</font><font color="#CCCCCC"> of those really</font><font color="#E5E5E5"> crazy</font>

665
00:23:41,230 --> 00:23:45,860
and then if you go through<font color="#E5E5E5"> the clean</font>

666
00:23:44,269 --> 00:23:47,000
samples<font color="#CCCCCC"> then it just shows</font><font color="#E5E5E5"> clean but</font>

667
00:23:45,860 --> 00:23:48,860
it's basically kind<font color="#CCCCCC"> of a way</font><font color="#E5E5E5"> to say</font><font color="#CCCCCC"> okay</font>

668
00:23:47,000 --> 00:23:49,940
what kinds of<font color="#E5E5E5"> rules like</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> invoke</font>

669
00:23:48,860 --> 00:23:51,019
<font color="#CCCCCC">Cradle crafts</font><font color="#E5E5E5"> are the kinds of rules</font>

670
00:23:49,940 --> 00:23:53,240
<font color="#E5E5E5">that we're</font><font color="#CCCCCC"> hitting our</font><font color="#E5E5E5"> ones that</font><font color="#CCCCCC"> were</font>

671
00:23:51,019 --> 00:23:55,580
<font color="#E5E5E5">looking for</font><font color="#CCCCCC"> really long member values</font>

672
00:23:53,240 --> 00:23:57,470
like that's not<font color="#CCCCCC"> normal</font><font color="#E5E5E5"> the average</font>

673
00:23:55,580 --> 00:23:59,559
member value is like<font color="#CCCCCC"> 22 characters why</font>

674
00:23:57,470 --> 00:24:02,990
are you over<font color="#E5E5E5"> a hundred that's weird</font><font color="#CCCCCC"> so</font>

675
00:23:59,559 --> 00:24:05,210
<font color="#CCCCCC">again it it's it's allowing you to write</font>

676
00:24:02,990 --> 00:24:07,009
signature like things but very

677
00:24:05,210 --> 00:24:08,480
<font color="#CCCCCC">fine-tuned focused on certain</font><font color="#E5E5E5"> elements</font>

678
00:24:07,009 --> 00:24:10,820
<font color="#CCCCCC">of the language</font><font color="#E5E5E5"> and I</font><font color="#CCCCCC"> think that's</font>

679
00:24:08,480 --> 00:24:12,440
really<font color="#E5E5E5"> cool</font><font color="#CCCCCC"> and this</font><font color="#E5E5E5"> is a way</font><font color="#CCCCCC"> that we</font>

680
00:24:10,820 --> 00:24:14,360
can<font color="#E5E5E5"> detect this minimally obfuscated</font>

681
00:24:12,440 --> 00:24:16,850
stuff just<font color="#E5E5E5"> by saying let's try to define</font>

682
00:24:14,360 --> 00:24:18,620
what<font color="#E5E5E5"> normal is</font><font color="#CCCCCC"> for members</font><font color="#E5E5E5"> and then look</font>

683
00:24:16,850 --> 00:24:20,719
<font color="#E5E5E5">for anything that deviates from that or</font>

684
00:24:18,620 --> 00:24:22,459
what normal is<font color="#CCCCCC"> for Strings or commands</font>

685
00:24:20,720 --> 00:24:24,860
or arrayed sizes or things of<font color="#E5E5E5"> that</font>

686
00:24:22,460 --> 00:24:27,200
<font color="#CCCCCC">nature</font><font color="#E5E5E5"> anything you can</font><font color="#CCCCCC"> dream up with</font>

687
00:24:24,860 --> 00:24:30,620
<font color="#E5E5E5">the</font><font color="#CCCCCC"> ast you can plug in</font><font color="#E5E5E5"> to that kind of</font>

688
00:24:27,200 --> 00:24:32,480
detection<font color="#CCCCCC"> alright enough of</font><font color="#E5E5E5"> PowerShell</font>

689
00:24:30,620 --> 00:24:35,149
<font color="#E5E5E5">nation what can you possibly do with</font>

690
00:24:32,480 --> 00:24:37,250
this well defining the problem you can

691
00:24:35,150 --> 00:24:39,470
obfuscate<font color="#CCCCCC"> commanda AXYZ</font><font color="#E5E5E5"> arguments to</font>

692
00:24:37,250 --> 00:24:41,059
evade rigid detections<font color="#CCCCCC"> and the tools</font>

693
00:24:39,470 --> 00:24:42,620
were<font color="#E5E5E5"> going to use our pester which is</font>

694
00:24:41,059 --> 00:24:45,920
another<font color="#CCCCCC"> powershell framework to</font><font color="#E5E5E5"> the for</font>

695
00:24:42,620 --> 00:24:47,360
unit testing as well<font color="#E5E5E5"> as the concept of</font>

696
00:24:45,920 --> 00:24:51,860
<font color="#CCCCCC">building a custom fuzzer which I alluded</font>

697
00:24:47,360 --> 00:24:54,199
<font color="#CCCCCC">to earlier so attackers are already</font>

698
00:24:51,860 --> 00:24:56,959
doing<font color="#E5E5E5"> all cool kinds of</font><font color="#CCCCCC"> obfuscation</font><font color="#E5E5E5"> I</font>

699
00:24:54,200 --> 00:24:58,880
<font color="#CCCCCC">obsessive for this everyday</font><font color="#E5E5E5"> Finn seventh</font>

700
00:24:56,960 --> 00:25:00,470
<font color="#CCCCCC">innate</font><font color="#E5E5E5"> and apt to do some really cool</font>

701
00:24:58,880 --> 00:25:02,630
stuff<font color="#CCCCCC"> Finn seven and thirty-two</font>

702
00:25:00,470 --> 00:25:04,490
continually<font color="#E5E5E5"> vie for</font><font color="#CCCCCC"> first place in my</font>

703
00:25:02,630 --> 00:25:06,590
heart of<font color="#E5E5E5"> favorite obfuscators they do</font>

704
00:25:04,490 --> 00:25:10,220
some<font color="#E5E5E5"> really tasteful stuff so to</font>

705
00:25:06,590 --> 00:25:11,629
enumerate<font color="#E5E5E5"> the problem space</font><font color="#CCCCCC"> or to create</font>

706
00:25:10,220 --> 00:25:13,910
<font color="#E5E5E5">better detection so I wanted to see what</font>

707
00:25:11,630 --> 00:25:17,150
what's all possible here<font color="#E5E5E5"> and what got me</font>

708
00:25:13,910 --> 00:25:18,980
<font color="#CCCCCC">started down this path was last June</font><font color="#E5E5E5"> we</font>

709
00:25:17,150 --> 00:25:20,600
<font color="#E5E5E5">basically discovered Finn</font><font color="#CCCCCC"> 7 testing some</font>

710
00:25:18,980 --> 00:25:22,820
payloads<font color="#E5E5E5"> have some JavaScript</font>

711
00:25:20,600 --> 00:25:25,270
<font color="#E5E5E5">obfuscation here instead of email they</font>

712
00:25:22,820 --> 00:25:28,189
have this nice<font color="#E5E5E5"> ASCII conversion from 101</font>

713
00:25:25,270 --> 00:25:30,980
<font color="#E5E5E5">but these two boxes in red here this is</font>

714
00:25:28,190 --> 00:25:33,950
dumped<font color="#E5E5E5"> from a malicious link file this</font>

715
00:25:30,980 --> 00:25:36,500
really had me confused<font color="#E5E5E5"> what's going on</font>

716
00:25:33,950 --> 00:25:38,360
here well they're setting this<font color="#E5E5E5"> w script</font>

717
00:25:36,500 --> 00:25:40,910
command into this<font color="#E5E5E5"> environment variable X</font>

718
00:25:38,360 --> 00:25:42,169
and then<font color="#CCCCCC"> at the end</font><font color="#E5E5E5"> there echoing that</font>

719
00:25:40,910 --> 00:25:43,760
<font color="#E5E5E5">into command</font><font color="#CCCCCC"> okay that</font><font color="#E5E5E5"> makes sense</font>

720
00:25:42,170 --> 00:25:45,170
command is<font color="#CCCCCC"> doing this stuff</font><font color="#E5E5E5"> and then</font>

721
00:25:43,760 --> 00:25:47,240
it's launching<font color="#E5E5E5"> a child process of</font>

722
00:25:45,170 --> 00:25:48,980
command<font color="#E5E5E5"> and echoing the contents in but</font>

723
00:25:47,240 --> 00:25:50,360
what I didn't get was they had these

724
00:25:48,980 --> 00:25:53,300
garbage<font color="#CCCCCC"> des limiters they</font><font color="#E5E5E5"> had these at</font>

725
00:25:50,360 --> 00:25:55,370
<font color="#CCCCCC">science put in W</font><font color="#E5E5E5"> script and jscript</font><font color="#CCCCCC"> and</font>

726
00:25:53,300 --> 00:25:56,600
this<font color="#CCCCCC"> doesn't work when you</font><font color="#E5E5E5"> run it</font><font color="#CCCCCC"> it</font>

727
00:25:55,370 --> 00:25:58,219
didn't make<font color="#CCCCCC"> any sense but what you'll</font>

728
00:25:56,600 --> 00:26:01,129
notice<font color="#E5E5E5"> is at the end when they echo that</font>

729
00:25:58,220 --> 00:26:02,900
<font color="#E5E5E5">X it actually creates space after the</font>

730
00:26:01,130 --> 00:26:05,780
<font color="#E5E5E5">variable name and then they insert this</font>

731
00:26:02,900 --> 00:26:08,240
syntax<font color="#E5E5E5"> which is amazing it's a string</font>

732
00:26:05,780 --> 00:26:10,280
replacement syntax native to command<font color="#E5E5E5"> XE</font>

733
00:26:08,240 --> 00:26:12,679
that says replace the string in this

734
00:26:10,280 --> 00:26:13,970
<font color="#E5E5E5">case it's just the @ sign replace that</font>

735
00:26:12,679 --> 00:26:15,620
with<font color="#CCCCCC"> whatever's from the</font><font color="#E5E5E5"> right side of</font>

736
00:26:13,970 --> 00:26:17,809
the equal sign<font color="#E5E5E5"> which in this case is</font>

737
00:26:15,620 --> 00:26:20,330
nothing so in<font color="#E5E5E5"> memory it's saying take</font>

738
00:26:17,809 --> 00:26:22,790
the variable<font color="#CCCCCC"> X</font><font color="#E5E5E5"> remove all the @ signs</font>

739
00:26:20,330 --> 00:26:25,370
and then that's<font color="#E5E5E5"> your value</font><font color="#CCCCCC"> now this is</font>

740
00:26:22,790 --> 00:26:26,210
<font color="#E5E5E5">really cool when I saw this I was like</font>

741
00:26:25,370 --> 00:26:28,790
crap

742
00:26:26,210 --> 00:26:30,770
what finesse<font color="#CCCCCC"> how</font><font color="#E5E5E5"> awesome is that this</font>

743
00:26:28,790 --> 00:26:32,570
this can evade static detection looking

744
00:26:30,770 --> 00:26:35,059
for common<font color="#CCCCCC"> w</font><font color="#E5E5E5"> script strings in this</font>

745
00:26:32,570 --> 00:26:37,159
example but<font color="#E5E5E5"> it removes it</font><font color="#CCCCCC"> in memory and</font>

746
00:26:35,059 --> 00:26:40,280
I had no<font color="#CCCCCC"> idea</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> manda</font><font color="#E5E5E5"> actually was</font>

747
00:26:37,160 --> 00:26:42,170
capable of this so<font color="#CCCCCC"> basically I spent the</font>

748
00:26:40,280 --> 00:26:43,730
next<font color="#E5E5E5"> nine months researching it</font><font color="#CCCCCC"> and</font>

749
00:26:42,170 --> 00:26:44,630
obsessing over and be<font color="#E5E5E5"> like what else can</font>

750
00:26:43,730 --> 00:26:46,640
<font color="#CCCCCC">you do with command</font>

751
00:26:44,630 --> 00:26:48,860
see and just last month<font color="#E5E5E5"> I released a</font>

752
00:26:46,640 --> 00:26:50,660
<font color="#E5E5E5">white</font><font color="#CCCCCC"> paper on</font><font color="#E5E5E5"> this if you have trouble</font>

753
00:26:48,860 --> 00:26:52,100
<font color="#E5E5E5">sleeping it's 36 pages and it will put</font>

754
00:26:50,660 --> 00:26:54,620
you to<font color="#E5E5E5"> sleep unless you're crazy about</font>

755
00:26:52,100 --> 00:26:56,929
obfuscation<font color="#E5E5E5"> also releases tool called</font>

756
00:26:54,620 --> 00:26:59,179
<font color="#CCCCCC">invoke dot sophistication why</font><font color="#E5E5E5"> why in the</font>

757
00:26:56,930 --> 00:27:01,040
world did I do this well for me<font color="#E5E5E5"> when</font><font color="#CCCCCC"> it</font>

758
00:26:59,180 --> 00:27:03,320
<font color="#E5E5E5">comes to obfuscation it gets so deep</font>

759
00:27:01,040 --> 00:27:05,270
that<font color="#E5E5E5"> I</font><font color="#CCCCCC"> can't keep all</font><font color="#E5E5E5"> of the pieces</font><font color="#CCCCCC"> in</font>

760
00:27:03,320 --> 00:27:06,860
my<font color="#E5E5E5"> head to know what's</font><font color="#CCCCCC"> possible</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> I</font>

761
00:27:05,270 --> 00:27:10,129
<font color="#E5E5E5">know I'm gonna miss things</font><font color="#CCCCCC"> so basically</font>

762
00:27:06,860 --> 00:27:12,860
<font color="#CCCCCC">as I discover a possibility like</font><font color="#E5E5E5"> with</font>

763
00:27:10,130 --> 00:27:15,290
<font color="#E5E5E5">that string replacement the best way for</font>

764
00:27:12,860 --> 00:27:19,340
me<font color="#CCCCCC"> to</font><font color="#E5E5E5"> track that is to code it if I can</font>

765
00:27:15,290 --> 00:27:22,250
write<font color="#CCCCCC"> that</font><font color="#E5E5E5"> law or that rule as code then</font>

766
00:27:19,340 --> 00:27:24,709
I can get it<font color="#E5E5E5"> out of my brain</font><font color="#CCCCCC"> and know my</font>

767
00:27:22,250 --> 00:27:26,030
code knows this now and it<font color="#E5E5E5"> will produce</font>

768
00:27:24,710 --> 00:27:27,920
this for me at the click of a button

769
00:27:26,030 --> 00:27:29,720
<font color="#CCCCCC">heck it'll produce a thousand of these</font>

770
00:27:27,920 --> 00:27:30,920
at the click of a button<font color="#E5E5E5"> and as you</font>

771
00:27:29,720 --> 00:27:33,320
start<font color="#E5E5E5"> to build all these little</font>

772
00:27:30,920 --> 00:27:35,480
discoveries<font color="#E5E5E5"> into this tool that's how it</font>

773
00:27:33,320 --> 00:27:36,980
starts to mush<font color="#E5E5E5"> all this stuff together</font>

774
00:27:35,480 --> 00:27:39,020
and<font color="#CCCCCC"> as long as</font><font color="#E5E5E5"> you're checking that it's</font>

775
00:27:36,980 --> 00:27:40,250
still<font color="#E5E5E5"> producing valid</font><font color="#CCCCCC"> output then your</font>

776
00:27:39,020 --> 00:27:41,960
tool will starting to find<font color="#CCCCCC"> things</font><font color="#E5E5E5"> you</font>

777
00:27:40,250 --> 00:27:43,760
<font color="#E5E5E5">never thought</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> and find these</font>

778
00:27:41,960 --> 00:27:45,920
really<font color="#E5E5E5"> weird fringe</font><font color="#CCCCCC"> cases that as a</font>

779
00:27:43,760 --> 00:27:47,210
defender is awesome because it's finding

780
00:27:45,920 --> 00:27:50,530
the things<font color="#E5E5E5"> I wouldn't have thought about</font>

781
00:27:47,210 --> 00:27:52,610
doing<font color="#E5E5E5"> except that I built it to do that</font>

782
00:27:50,530 --> 00:27:54,440
so what you can do with this tool is you

783
00:27:52,610 --> 00:27:57,379
can take<font color="#E5E5E5"> any</font><font color="#CCCCCC"> arbitrary</font><font color="#E5E5E5"> input to command</font>

784
00:27:54,440 --> 00:27:59,960
<font color="#E5E5E5">and you can add layer upon layer upon</font>

785
00:27:57,380 --> 00:28:02,290
<font color="#CCCCCC">layer of office Gatien to get something</font>

786
00:27:59,960 --> 00:28:06,710
that<font color="#CCCCCC"> looks like</font><font color="#E5E5E5"> that</font>

787
00:28:02,290 --> 00:28:08,420
so I suffer from FOMO<font color="#E5E5E5"> except for me it's</font>

788
00:28:06,710 --> 00:28:10,160
a fear of<font color="#E5E5E5"> missing obfuscation</font><font color="#CCCCCC"> because I</font>

789
00:28:08,420 --> 00:28:14,570
love<font color="#CCCCCC"> it and I love learning</font><font color="#E5E5E5"> how other</font>

790
00:28:10,160 --> 00:28:16,610
people<font color="#CCCCCC"> are office gating so with</font><font color="#E5E5E5"> invoke</font>

791
00:28:14,570 --> 00:28:18,530
<font color="#CCCCCC">da sophistication this I built as a</font>

792
00:28:16,610 --> 00:28:22,550
custom fuzzing framework and also<font color="#CCCCCC"> to</font>

793
00:28:18,530 --> 00:28:25,070
automate my detection<font color="#CCCCCC"> the the ability to</font>

794
00:28:22,550 --> 00:28:27,139
<font color="#E5E5E5">kind</font><font color="#CCCCCC"> of have to build a corpus</font><font color="#E5E5E5"> because</font>

795
00:28:25,070 --> 00:28:29,090
the stuff<font color="#E5E5E5"> basically we'd not seen it</font>

796
00:28:27,140 --> 00:28:30,290
used in<font color="#CCCCCC"> the</font><font color="#E5E5E5"> wild so how do you build a</font>

797
00:28:29,090 --> 00:28:32,600
corpus<font color="#E5E5E5"> of things that</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> even exist</font>

798
00:28:30,290 --> 00:28:34,370
<font color="#E5E5E5">yet well you build a tool to make it and</font>

799
00:28:32,600 --> 00:28:36,530
then<font color="#E5E5E5"> you build that corpus yourself</font><font color="#CCCCCC"> and</font>

800
00:28:34,370 --> 00:28:37,909
so I use pester to basically<font color="#E5E5E5"> say</font><font color="#CCCCCC"> anytime</font>

801
00:28:36,530 --> 00:28:40,310
<font color="#CCCCCC">I found a new capability</font>

802
00:28:37,910 --> 00:28:41,180
I'd<font color="#CCCCCC"> write pester</font><font color="#E5E5E5"> tests to basically say</font>

803
00:28:40,310 --> 00:28:43,669
make<font color="#CCCCCC"> sure this doesn't</font><font color="#E5E5E5"> break</font>

804
00:28:41,180 --> 00:28:45,080
functionality<font color="#E5E5E5"> and it would whenever I'd</font>

805
00:28:43,670 --> 00:28:46,340
introduce something<font color="#CCCCCC"> that did</font><font color="#E5E5E5"> pastor</font>

806
00:28:45,080 --> 00:28:47,780
would say hey here's<font color="#E5E5E5"> exactly where you</font>

807
00:28:46,340 --> 00:28:50,209
<font color="#E5E5E5">broke this you need to go into the</font>

808
00:28:47,780 --> 00:28:52,250
<font color="#CCCCCC">framework and fix that and also a</font><font color="#E5E5E5"> pester</font>

809
00:28:50,210 --> 00:28:53,050
<font color="#E5E5E5">can say hey are you detecting this kind</font>

810
00:28:52,250 --> 00:28:56,480
<font color="#E5E5E5">of obfuscation</font>

811
00:28:53,050 --> 00:28:58,010
but the obfuscation was so many layers

812
00:28:56,480 --> 00:29:00,890
deep I needed something<font color="#CCCCCC"> more</font>

813
00:28:58,010 --> 00:29:02,990
so similar<font color="#CCCCCC"> to the last example</font><font color="#E5E5E5"> I created</font>

814
00:29:00,890 --> 00:29:05,360
a<font color="#CCCCCC"> rapper in vogue dose</font><font color="#E5E5E5"> test harness</font>

815
00:29:02,990 --> 00:29:08,419
which wraps around<font color="#E5E5E5"> these detection</font><font color="#CCCCCC"> x'</font>

816
00:29:05,360 --> 00:29:10,580
<font color="#E5E5E5">and this is actually what I've done with</font>

817
00:29:08,419 --> 00:29:11,540
all my<font color="#E5E5E5"> office</font><font color="#CCCCCC"> Gatien frameworks is I've</font>

818
00:29:10,580 --> 00:29:13,159
done<font color="#E5E5E5"> this kind of stuff behind the</font>

819
00:29:11,540 --> 00:29:14,570
<font color="#E5E5E5">scenes</font><font color="#CCCCCC"> but with invoke da sophistication</font>

820
00:29:13,160 --> 00:29:17,090
<font color="#E5E5E5">this is the first time actually released</font>

821
00:29:14,570 --> 00:29:18,409
and built like a legit test harness and

822
00:29:17,090 --> 00:29:20,899
<font color="#E5E5E5">release it so other people could benefit</font>

823
00:29:18,410 --> 00:29:22,340
from<font color="#CCCCCC"> it</font><font color="#E5E5E5"> so here's the animated ASCII art</font>

824
00:29:20,900 --> 00:29:26,210
from<font color="#CCCCCC"> invoke da sophistication let's do</font>

825
00:29:22,340 --> 00:29:28,280
<font color="#E5E5E5">just a quick simple demo of that but</font>

826
00:29:26,210 --> 00:29:30,710
<font color="#E5E5E5">again you can input any arbitrary</font>

827
00:29:28,280 --> 00:29:33,440
command<font color="#E5E5E5"> so in this case we'll</font><font color="#CCCCCC"> just do an</font>

828
00:29:30,710 --> 00:29:35,600
echo testing<font color="#E5E5E5"> da sophistication will go</font>

829
00:29:33,440 --> 00:29:38,059
straight<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the payload</font><font color="#E5E5E5"> there's four</font>

830
00:29:35,600 --> 00:29:40,250
main like it payload encoding options

831
00:29:38,059 --> 00:29:42,379
<font color="#CCCCCC">and so we'll go thin</font><font color="#E5E5E5"> coding or thin</font>

832
00:29:40,250 --> 00:29:44,059
<font color="#E5E5E5">seven style encoding and we'll just</font>

833
00:29:42,380 --> 00:29:45,770
choose the option<font color="#E5E5E5"> three which is the</font>

834
00:29:44,059 --> 00:29:47,270
highest level<font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of we'll get to that</font>

835
00:29:45,770 --> 00:29:48,950
<font color="#CCCCCC">in a second</font><font color="#E5E5E5"> and it produces something</font>

836
00:29:47,270 --> 00:29:50,600
<font color="#E5E5E5">like that it will copy that to the</font>

837
00:29:48,950 --> 00:29:56,630
clipboard throat into<font color="#E5E5E5"> command prompt and</font>

838
00:29:50,600 --> 00:29:58,668
as you can<font color="#E5E5E5"> see it works fun</font><font color="#CCCCCC"> right so as</font>

839
00:29:56,630 --> 00:30:01,010
<font color="#E5E5E5">the</font><font color="#CCCCCC"> offenders</font><font color="#E5E5E5"> this is what you want to</font>

840
00:29:58,669 --> 00:30:02,840
do though you want<font color="#E5E5E5"> to say invoke pester</font>

841
00:30:01,010 --> 00:30:04,520
<font color="#E5E5E5">and say okay this is</font><font color="#CCCCCC"> checking</font><font color="#E5E5E5"> to make</font>

842
00:30:02,840 --> 00:30:06,409
sure all the stuff you built still works

843
00:30:04,520 --> 00:30:07,960
<font color="#E5E5E5">and it's still</font><font color="#CCCCCC"> producing valid code and</font>

844
00:30:06,410 --> 00:30:10,309
it<font color="#E5E5E5"> will show</font><font color="#CCCCCC"> some kind of basic</font>

845
00:30:07,960 --> 00:30:12,500
<font color="#CCCCCC">detection of did your rules detect this</font>

846
00:30:10,309 --> 00:30:14,870
<font color="#E5E5E5">office gated thing but the real thing</font>

847
00:30:12,500 --> 00:30:18,169
you want to<font color="#E5E5E5"> do is run invoke</font><font color="#CCCCCC"> DOS test</font>

848
00:30:14,870 --> 00:30:19,939
harness and what<font color="#E5E5E5"> this will do</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> mean and</font>

849
00:30:18,169 --> 00:30:22,040
the the<font color="#E5E5E5"> version I released contains the</font>

850
00:30:19,940 --> 00:30:24,830
exact commands<font color="#CCCCCC"> that</font><font color="#E5E5E5"> I use for</font><font color="#CCCCCC"> all of</font><font color="#E5E5E5"> my</font>

851
00:30:22,040 --> 00:30:26,540
testing exact commands<font color="#E5E5E5"> and it will</font>

852
00:30:24,830 --> 00:30:28,790
basically go through<font color="#E5E5E5"> and generate office</font>

853
00:30:26,540 --> 00:30:30,230
gated versions<font color="#E5E5E5"> and I'll pause this</font><font color="#CCCCCC"> for a</font>

854
00:30:28,790 --> 00:30:31,879
second<font color="#E5E5E5"> in the tool you basically get to</font>

855
00:30:30,230 --> 00:30:33,950
choose<font color="#E5E5E5"> between one two and three</font><font color="#CCCCCC"> for</font>

856
00:30:31,880 --> 00:30:35,750
<font color="#E5E5E5">like low medium high that's choosing</font>

857
00:30:33,950 --> 00:30:37,340
like a profile there's like over<font color="#CCCCCC"> 20</font>

858
00:30:35,750 --> 00:30:38,900
<font color="#CCCCCC">different knobs</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can adjust for every</font>

859
00:30:37,340 --> 00:30:40,549
single<font color="#E5E5E5"> one of these</font><font color="#CCCCCC"> functions</font><font color="#E5E5E5"> and it's</font>

860
00:30:38,900 --> 00:30:43,010
kind of<font color="#E5E5E5"> choosing a set slightly</font>

861
00:30:40,549 --> 00:30:45,410
<font color="#E5E5E5">randomized profile but when you run</font>

862
00:30:43,010 --> 00:30:47,450
invoke<font color="#CCCCCC"> DOS test harness it</font><font color="#E5E5E5"> randomly</font>

863
00:30:45,410 --> 00:30:48,919
chooses<font color="#E5E5E5"> every</font><font color="#CCCCCC"> single time all 20 of</font>

864
00:30:47,450 --> 00:30:50,929
<font color="#CCCCCC">those flips just</font><font color="#E5E5E5"> like like a kid and</font>

865
00:30:48,919 --> 00:30:52,040
elevators flips<font color="#E5E5E5"> all of them so that when</font>

866
00:30:50,929 --> 00:30:55,160
you actually<font color="#E5E5E5"> run the test</font><font color="#CCCCCC"> harness you</font>

867
00:30:52,040 --> 00:30:57,320
get a much richer obfuscation range than

868
00:30:55,160 --> 00:31:00,770
you ever would as an attacker using the

869
00:30:57,320 --> 00:31:02,299
tool interactively<font color="#E5E5E5"> so again I try to</font>

870
00:31:00,770 --> 00:31:03,740
<font color="#E5E5E5">make the tool more user friendly for</font>

871
00:31:02,299 --> 00:31:06,440
defenders and attackers because that's

872
00:31:03,740 --> 00:31:07,970
who I made it for<font color="#E5E5E5"> and hopefully this</font>

873
00:31:06,440 --> 00:31:09,409
test harness helps with that<font color="#E5E5E5"> but</font>

874
00:31:07,970 --> 00:31:10,830
<font color="#E5E5E5">basically as</font><font color="#CCCCCC"> us generating payloads</font>

875
00:31:09,409 --> 00:31:12,480
<font color="#E5E5E5">you'll notice there's just</font>

876
00:31:10,830 --> 00:31:13,620
action function and this<font color="#E5E5E5"> is the only</font>

877
00:31:12,480 --> 00:31:16,140
<font color="#CCCCCC">difference in when</font><font color="#E5E5E5"> I released I didn't</font>

878
00:31:13,620 --> 00:31:17,399
<font color="#E5E5E5">release my</font><font color="#CCCCCC"> full rule set because my</font>

879
00:31:16,140 --> 00:31:18,870
company<font color="#E5E5E5"> spent a lot of money</font><font color="#CCCCCC"> for me to</font>

880
00:31:17,399 --> 00:31:20,370
<font color="#E5E5E5">spend nine</font><font color="#CCCCCC"> months building</font><font color="#E5E5E5"> that rule set</font>

881
00:31:18,870 --> 00:31:21,840
<font color="#E5E5E5">but the concept is the same you</font>

882
00:31:20,370 --> 00:31:24,418
basically put in a rule in<font color="#E5E5E5"> this</font><font color="#CCCCCC"> case is</font>

883
00:31:21,840 --> 00:31:26,250
just<font color="#E5E5E5"> a regex</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> say let me say what</font>

884
00:31:24,419 --> 00:31:29,789
this rule is looking for and then add

885
00:31:26,250 --> 00:31:31,710
the regex<font color="#CCCCCC"> in</font><font color="#E5E5E5"> a fast word just a second</font>

886
00:31:29,789 --> 00:31:33,600
<font color="#E5E5E5">and when it's done generating all these</font>

887
00:31:31,710 --> 00:31:35,340
payloads<font color="#E5E5E5"> what its gonna do is it will</font>

888
00:31:33,600 --> 00:31:36,480
execute the command locally just<font color="#E5E5E5"> to say</font>

889
00:31:35,340 --> 00:31:37,980
<font color="#E5E5E5">I want to make</font><font color="#CCCCCC"> sure this thing actually</font>

890
00:31:36,480 --> 00:31:40,409
runs and it's producing the correct

891
00:31:37,980 --> 00:31:42,809
<font color="#CCCCCC">output and then it's gonna check the</font>

892
00:31:40,409 --> 00:31:45,630
detection rules and say did this payload

893
00:31:42,809 --> 00:31:47,549
match on anything<font color="#E5E5E5"> and as you can</font><font color="#CCCCCC"> see it</font>

894
00:31:45,630 --> 00:31:49,080
several<font color="#E5E5E5"> these</font><font color="#CCCCCC"> matched on a lot of them</font><font color="#E5E5E5"> I</font>

895
00:31:47,549 --> 00:31:51,570
removed a couple<font color="#CCCCCC"> of my rules so that hey</font>

896
00:31:49,080 --> 00:31:53,010
these two<font color="#E5E5E5"> didn't match on anything now</font>

897
00:31:51,570 --> 00:31:54,418
why is this important<font color="#CCCCCC"> well</font><font color="#E5E5E5"> this is</font>

898
00:31:53,010 --> 00:31:56,190
important because<font color="#E5E5E5"> when I run a couple</font>

899
00:31:54,419 --> 00:31:57,990
thousand commands when I go to bed and I

900
00:31:56,190 --> 00:32:00,059
wake<font color="#E5E5E5"> up and see a few that I missed my</font>

901
00:31:57,990 --> 00:32:03,299
tool just<font color="#E5E5E5"> helped me find a false</font>

902
00:32:00,059 --> 00:32:04,889
negative<font color="#CCCCCC"> I</font><font color="#E5E5E5"> thought I had covered but I</font>

903
00:32:03,299 --> 00:32:07,049
didn't so then I get<font color="#CCCCCC"> to look</font><font color="#E5E5E5"> at it</font><font color="#CCCCCC"> okay</font>

904
00:32:04,889 --> 00:32:09,149
what<font color="#E5E5E5"> about this evaded my detection was</font>

905
00:32:07,049 --> 00:32:11,639
the new<font color="#E5E5E5"> thing I added last night this</font>

906
00:32:09,149 --> 00:32:13,110
new this<font color="#E5E5E5"> new</font><font color="#CCCCCC"> capability and then you can</font>

907
00:32:11,639 --> 00:32:14,789
see some<font color="#CCCCCC"> of these rules</font><font color="#E5E5E5"> some of these</font>

908
00:32:13,110 --> 00:32:17,158
commands<font color="#E5E5E5"> actually had over</font><font color="#CCCCCC"> ten different</font>

909
00:32:14,789 --> 00:32:18,990
hits awesome<font color="#E5E5E5"> I like detecting stuff over</font>

910
00:32:17,159 --> 00:32:21,269
<font color="#CCCCCC">ten</font><font color="#E5E5E5"> different ways but</font><font color="#CCCCCC"> that some only</font>

911
00:32:18,990 --> 00:32:23,070
had one or two<font color="#E5E5E5"> that means an attacker</font>

912
00:32:21,269 --> 00:32:25,500
<font color="#E5E5E5">only has to change those two pieces to</font>

913
00:32:23,070 --> 00:32:27,720
evade so I really want multiple hits on

914
00:32:25,500 --> 00:32:31,860
<font color="#CCCCCC">all these detections or on all these</font>

915
00:32:27,720 --> 00:32:34,110
samples so that's how<font color="#E5E5E5"> I use</font><font color="#CCCCCC"> the test</font>

916
00:32:31,860 --> 00:32:35,850
<font color="#CCCCCC">harness</font><font color="#E5E5E5"> and that's the concept I really</font>

917
00:32:34,110 --> 00:32:37,620
do apply<font color="#E5E5E5"> to all the obfuscation stuff I</font>

918
00:32:35,850 --> 00:32:40,740
do the very last one<font color="#CCCCCC"> is framework</font>

919
00:32:37,620 --> 00:32:42,719
fuzzing so<font color="#E5E5E5"> I there's people will add</font>

920
00:32:40,740 --> 00:32:43,980
office<font color="#CCCCCC"> keishon</font><font color="#E5E5E5"> two frameworks publicly</font>

921
00:32:42,720 --> 00:32:45,769
available frameworks and<font color="#E5E5E5"> the tools we</font>

922
00:32:43,980 --> 00:32:47,940
have<font color="#E5E5E5"> here are called</font><font color="#CCCCCC"> ctrl-c and ctrl-v</font>

923
00:32:45,769 --> 00:32:50,190
<font color="#E5E5E5">to copy source code because</font><font color="#CCCCCC"> that's</font>

924
00:32:47,940 --> 00:32:51,960
<font color="#E5E5E5">really nice and then the for loop of any</font>

925
00:32:50,190 --> 00:32:53,610
sort you're choosing to basically say

926
00:32:51,960 --> 00:32:55,730
let<font color="#CCCCCC"> me generate a lot</font><font color="#E5E5E5"> of this thing and</font>

927
00:32:53,610 --> 00:32:58,019
see what the results<font color="#CCCCCC"> kind of look like</font>

928
00:32:55,730 --> 00:33:00,029
<font color="#E5E5E5">why did we do this well</font><font color="#CCCCCC"> because</font>

929
00:32:58,019 --> 00:33:01,470
developing a custom<font color="#CCCCCC"> fuzzer</font><font color="#E5E5E5"> takes a lot</font>

930
00:33:00,029 --> 00:33:02,880
<font color="#CCCCCC">of time took</font><font color="#E5E5E5"> me nine</font><font color="#CCCCCC"> months</font><font color="#E5E5E5"> to do</font><font color="#CCCCCC"> that</font>

931
00:33:01,470 --> 00:33:04,740
da sophistication stuff<font color="#E5E5E5"> and now the</font>

932
00:33:02,880 --> 00:33:06,720
<font color="#E5E5E5">community can benefit from it with zero</font>

933
00:33:04,740 --> 00:33:08,220
hours of<font color="#E5E5E5"> effort but there's a lot of</font>

934
00:33:06,720 --> 00:33:11,309
tools<font color="#E5E5E5"> out there that you don't have to</font>

935
00:33:08,220 --> 00:33:13,740
actually<font color="#E5E5E5"> build any custom stuff and so</font>

936
00:33:11,309 --> 00:33:15,450
no just so no tool<font color="#E5E5E5"> developers would</font>

937
00:33:13,740 --> 00:33:16,169
think I'm<font color="#E5E5E5"> picking on them I'm picking on</font>

938
00:33:15,450 --> 00:33:18,240
<font color="#E5E5E5">my own tool</font>

939
00:33:16,169 --> 00:33:20,490
I said invoke obfuscation does that

940
00:33:18,240 --> 00:33:21,809
crazy IEX stuff right<font color="#E5E5E5"> so let me go to</font>

941
00:33:20,490 --> 00:33:24,690
<font color="#E5E5E5">the source code of this invoke office</font>

942
00:33:21,809 --> 00:33:26,100
<font color="#CCCCCC">keishon project</font><font color="#E5E5E5"> lines 873 through 888</font>

943
00:33:24,690 --> 00:33:28,230
contain these several<font color="#CCCCCC"> wines that are</font>

944
00:33:26,100 --> 00:33:31,560
<font color="#E5E5E5">basically for</font><font color="#CCCCCC"> every loop</font><font color="#E5E5E5"> it adds six</font>

945
00:33:28,230 --> 00:33:34,080
<font color="#E5E5E5">randomly generated payload options for</font>

946
00:33:31,560 --> 00:33:35,370
office gated<font color="#E5E5E5"> IEX I'm gonna run this ten</font>

947
00:33:34,080 --> 00:33:38,639
times which means<font color="#E5E5E5"> running to get ten</font>

948
00:33:35,370 --> 00:33:40,469
times<font color="#CCCCCC"> 660 samples</font><font color="#E5E5E5"> and then going to sort</font>

949
00:33:38,640 --> 00:33:42,270
and unique them and then there's output

950
00:33:40,470 --> 00:33:45,410
here's how many<font color="#E5E5E5"> samples we created and</font>

951
00:33:42,270 --> 00:33:47,970
here's how many samples<font color="#E5E5E5"> were unique</font><font color="#CCCCCC"> and</font>

952
00:33:45,410 --> 00:33:51,180
<font color="#CCCCCC">this is just</font><font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of generating</font><font color="#E5E5E5"> just the</font>

953
00:33:47,970 --> 00:33:53,910
sample<font color="#E5E5E5"> dataset so with</font><font color="#CCCCCC"> sixty</font>

954
00:33:51,180 --> 00:33:56,310
we got 39 let's<font color="#E5E5E5"> increase</font><font color="#CCCCCC"> it to 100 so</font>

955
00:33:53,910 --> 00:33:57,750
when 600 we get<font color="#E5E5E5"> 56</font><font color="#CCCCCC"> let's</font><font color="#E5E5E5"> increase it</font>

956
00:33:56,310 --> 00:33:59,909
<font color="#E5E5E5">more and see if we get more</font><font color="#CCCCCC"> than 56 I'm</font>

957
00:33:57,750 --> 00:34:01,380
kind of enumerated us problem space<font color="#E5E5E5"> so I</font>

958
00:33:59,910 --> 00:34:03,690
can get the<font color="#E5E5E5"> complete list of what's</font>

959
00:34:01,380 --> 00:34:04,980
<font color="#CCCCCC">possible with this exact code</font><font color="#E5E5E5"> alright so</font>

960
00:34:03,690 --> 00:34:06,570
<font color="#E5E5E5">56 seems to be the one that we're</font>

961
00:34:04,980 --> 00:34:07,830
hitting there and one<font color="#E5E5E5"> thing I can</font><font color="#CCCCCC"> do is</font>

962
00:34:06,570 --> 00:34:09,060
say let<font color="#CCCCCC"> me</font><font color="#E5E5E5"> just remove white space</font>

963
00:34:07,830 --> 00:34:10,679
because I know that's gonna be randomly

964
00:34:09,060 --> 00:34:13,949
<font color="#E5E5E5">added in and see if that reduces our</font>

965
00:34:10,679 --> 00:34:16,379
<font color="#CCCCCC">data</font><font color="#E5E5E5"> set and when we do we'll see it</font>

966
00:34:13,949 --> 00:34:18,509
goes<font color="#E5E5E5"> from 56 down</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> 28 perfect</font>

967
00:34:16,380 --> 00:34:21,150
so it's stored in<font color="#CCCCCC"> this unique</font><font color="#E5E5E5"> syntaxes</font>

968
00:34:18,510 --> 00:34:23,120
<font color="#E5E5E5">so here's all the different syntaxes of</font>

969
00:34:21,150 --> 00:34:27,780
IEX that this source<font color="#E5E5E5"> code will produce</font>

970
00:34:23,120 --> 00:34:30,449
<font color="#E5E5E5">now</font><font color="#CCCCCC"> it's gonna jump</font><font color="#E5E5E5"> over and basically</font>

971
00:34:27,780 --> 00:34:32,130
apply this same the same idea that<font color="#E5E5E5"> the</font>

972
00:34:30,449 --> 00:34:35,069
test<font color="#E5E5E5"> harness was which let me just have</font>

973
00:34:32,130 --> 00:34:37,830
an array of<font color="#E5E5E5"> reg X's to look at this and</font>

974
00:34:35,070 --> 00:34:40,290
say would<font color="#CCCCCC"> I detect any of these payloads</font>

975
00:34:37,830 --> 00:34:42,779
or any of these<font color="#E5E5E5"> syntaxes and then kind</font>

976
00:34:40,290 --> 00:34:44,790
of output just<font color="#E5E5E5"> the detection rate so if</font>

977
00:34:42,780 --> 00:34:46,680
we run<font color="#E5E5E5"> it</font><font color="#CCCCCC"> right now with</font><font color="#E5E5E5"> the regex being</font>

978
00:34:44,790 --> 00:34:48,540
detection reg X goes here surprisingly

979
00:34:46,679 --> 00:34:50,489
we catch none of it makes<font color="#E5E5E5"> sense</font><font color="#CCCCCC"> all</font>

980
00:34:48,540 --> 00:34:51,690
<font color="#CCCCCC">right we call it</font><font color="#E5E5E5"> zero so let's</font><font color="#CCCCCC"> look at</font>

981
00:34:50,489 --> 00:34:53,009
some<font color="#E5E5E5"> of this and</font><font color="#CCCCCC"> kind of scroll through</font>

982
00:34:51,690 --> 00:34:55,830
and see okay what are some<font color="#CCCCCC"> patterns we</font>

983
00:34:53,010 --> 00:34:57,120
see<font color="#CCCCCC"> all right</font><font color="#E5E5E5"> well</font><font color="#CCCCCC"> I see some variables</font>

984
00:34:55,830 --> 00:34:59,490
that<font color="#E5E5E5"> are being</font><font color="#CCCCCC"> added so</font><font color="#E5E5E5"> let's just go</font>

985
00:34:57,120 --> 00:35:00,210
<font color="#CCCCCC">with this first</font><font color="#E5E5E5"> one pshome the numbers</font>

986
00:34:59,490 --> 00:35:02,009
are kind<font color="#E5E5E5"> of different</font>

987
00:35:00,210 --> 00:35:08,520
sometimes it's one character two

988
00:35:02,010 --> 00:35:10,320
characters<font color="#CCCCCC"> but let's</font><font color="#E5E5E5"> just go with it so</font>

989
00:35:08,520 --> 00:35:11,220
in this case we're using reg X when we

990
00:35:10,320 --> 00:35:12,630
want to make sure<font color="#E5E5E5"> we</font><font color="#CCCCCC"> escape our</font>

991
00:35:11,220 --> 00:35:15,149
characters<font color="#CCCCCC"> escape the dollar sign the</font>

992
00:35:12,630 --> 00:35:16,560
brackets instead<font color="#CCCCCC"> of</font><font color="#E5E5E5"> trying to find all</font>

993
00:35:15,150 --> 00:35:17,730
the exact characters maybe an attacker

994
00:35:16,560 --> 00:35:20,070
is gonna actually go in<font color="#E5E5E5"> and</font><font color="#CCCCCC"> change</font><font color="#E5E5E5"> some</font>

995
00:35:17,730 --> 00:35:21,960
<font color="#CCCCCC">of those</font><font color="#E5E5E5"> so let me</font><font color="#CCCCCC"> just use digits one</font>

996
00:35:20,070 --> 00:35:26,250
<font color="#CCCCCC">two to go through do some more escaping</font>

997
00:35:21,960 --> 00:35:28,440
and then when we run this will see that

998
00:35:26,250 --> 00:35:31,530
detection rate go from<font color="#E5E5E5"> zero up</font><font color="#CCCCCC"> to eight</font>

999
00:35:28,440 --> 00:35:33,750
eight of<font color="#E5E5E5"> 28 we detected awesome let me</font>

1000
00:35:31,530 --> 00:35:35,970
go<font color="#E5E5E5"> back and add in the potential white</font>

1001
00:35:33,750 --> 00:35:37,840
space in between<font color="#E5E5E5"> the</font><font color="#CCCCCC"> brackets on either</font>

1002
00:35:35,970 --> 00:35:39,430
side of the plus sign

1003
00:35:37,840 --> 00:35:41,140
and make<font color="#CCCCCC"> sure that I didn't mess that</font><font color="#E5E5E5"> up</font>

1004
00:35:39,430 --> 00:35:49,000
and run<font color="#E5E5E5"> it again</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> hopefully we'll</font>

1005
00:35:41,140 --> 00:35:50,740
still<font color="#E5E5E5"> get those</font><font color="#CCCCCC"> eight detection x' so we</font>

1006
00:35:49,000 --> 00:35:52,840
<font color="#CCCCCC">add the whitespace in our rule</font><font color="#E5E5E5"> run again</font>

1007
00:35:50,740 --> 00:35:54,759
eight<font color="#E5E5E5"> detections perfect</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> I</font>

1008
00:35:52,840 --> 00:35:55,660
don't<font color="#E5E5E5"> see any more pshome let's go and</font>

1009
00:35:54,760 --> 00:35:57,940
look<font color="#E5E5E5"> looks like we're doing a very</font>

1010
00:35:55,660 --> 00:36:00,339
<font color="#E5E5E5">similar thing with the shell ID so maybe</font>

1011
00:35:57,940 --> 00:36:01,900
we'll<font color="#E5E5E5"> just tackle that</font><font color="#CCCCCC"> next</font><font color="#E5E5E5"> in this case</font>

1012
00:36:00,340 --> 00:36:03,130
you could put it all in<font color="#E5E5E5"> one</font><font color="#CCCCCC"> regex I like</font>

1013
00:36:01,900 --> 00:36:04,270
to kind of<font color="#E5E5E5"> have a</font><font color="#CCCCCC"> separator doubt just</font>

1014
00:36:03,130 --> 00:36:06,370
<font color="#CCCCCC">to kind of think a little more clearly</font>

1015
00:36:04,270 --> 00:36:07,690
<font color="#CCCCCC">but we'll just</font><font color="#E5E5E5"> change pshome the shell</font>

1016
00:36:06,370 --> 00:36:09,310
ID and run that we're<font color="#E5E5E5"> gonna go from</font>

1017
00:36:07,690 --> 00:36:12,340
<font color="#CCCCCC">eight detections up to</font><font color="#E5E5E5"> ten detection x'</font>

1018
00:36:09,310 --> 00:36:13,600
perfect<font color="#E5E5E5"> now just keep popping off the</font>

1019
00:36:12,340 --> 00:36:15,850
<font color="#E5E5E5">queue</font><font color="#CCCCCC"> and say</font><font color="#E5E5E5"> all right what do I detect</font>

1020
00:36:13,600 --> 00:36:17,950
<font color="#E5E5E5">next again can an attacker go and change</font>

1021
00:36:15,850 --> 00:36:20,020
the<font color="#E5E5E5"> source code absolutely how many</font>

1022
00:36:17,950 --> 00:36:22,000
people do that<font color="#E5E5E5"> now all of them most</font>

1023
00:36:20,020 --> 00:36:25,210
<font color="#E5E5E5">don't</font><font color="#CCCCCC"> and here's a way</font><font color="#E5E5E5"> you can just very</font>

1024
00:36:22,000 --> 00:36:27,220
simply<font color="#E5E5E5"> enumerate find the code enumerate</font>

1025
00:36:25,210 --> 00:36:29,080
<font color="#E5E5E5">to create your corpus your data set and</font>

1026
00:36:27,220 --> 00:36:30,850
then start to apply<font color="#E5E5E5"> this logic</font><font color="#CCCCCC"> to say</font>

1027
00:36:29,080 --> 00:36:33,520
would I detect this<font color="#E5E5E5"> here's just</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> couple</font>

1028
00:36:30,850 --> 00:36:35,650
sample rules<font color="#CCCCCC"> that I built to say alright</font>

1029
00:36:33,520 --> 00:36:37,030
this<font color="#E5E5E5"> this if you had these rules looking</font>

1030
00:36:35,650 --> 00:36:39,400
it would detect every single instance of

1031
00:36:37,030 --> 00:36:41,920
in obfuscated<font color="#CCCCCC"> IEX produced by the public</font>

1032
00:36:39,400 --> 00:36:44,260
<font color="#CCCCCC">version of invoke obfuscation</font><font color="#E5E5E5"> that's</font>

1033
00:36:41,920 --> 00:36:46,300
pretty easy<font color="#E5E5E5"> right that's awesome</font>

1034
00:36:44,260 --> 00:36:48,760
and this is just looking<font color="#E5E5E5"> at public code</font>

1035
00:36:46,300 --> 00:36:49,810
and<font color="#E5E5E5"> just running it and looking at the</font>

1036
00:36:48,760 --> 00:36:58,030
<font color="#E5E5E5">data that comes out and then</font>

1037
00:36:49,810 --> 00:37:01,680
systematically<font color="#E5E5E5"> tackling it</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> right</font>

1038
00:36:58,030 --> 00:37:03,520
key takeaways<font color="#CCCCCC"> I know that was a lot</font>

1039
00:37:01,680 --> 00:37:06,490
offensive research for detection

1040
00:37:03,520 --> 00:37:08,320
development there's some components<font color="#E5E5E5"> that</font>

1041
00:37:06,490 --> 00:37:09,910
are reactive<font color="#CCCCCC"> when KC tweets something</font>

1042
00:37:08,320 --> 00:37:11,590
<font color="#CCCCCC">then you</font><font color="#E5E5E5"> do</font><font color="#CCCCCC"> a look at</font><font color="#E5E5E5"> it and maybe you</font>

1043
00:37:09,910 --> 00:37:13,240
need a new detection for it but we can

1044
00:37:11,590 --> 00:37:14,890
<font color="#CCCCCC">actually be very</font><font color="#E5E5E5"> proactive we can go out</font>

1045
00:37:13,240 --> 00:37:16,629
<font color="#E5E5E5">and say there's this code that exists</font>

1046
00:37:14,890 --> 00:37:18,700
<font color="#E5E5E5">that I've never seen an attacker used</font>

1047
00:37:16,630 --> 00:37:20,320
before<font color="#E5E5E5"> but they very well could so let</font>

1048
00:37:18,700 --> 00:37:21,580
me take<font color="#CCCCCC"> that code let me put</font><font color="#E5E5E5"> in a for</font>

1049
00:37:20,320 --> 00:37:24,790
loop<font color="#CCCCCC"> and</font><font color="#E5E5E5"> see what it generates</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> lead</font>

1050
00:37:21,580 --> 00:37:26,830
write some detection for it<font color="#CCCCCC"> just as as</font>

1051
00:37:24,790 --> 00:37:28,600
tom<font color="#CCCCCC"> was saying earlier</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> know looking</font>

1052
00:37:26,830 --> 00:37:30,220
at<font color="#E5E5E5"> this</font><font color="#CCCCCC"> dde stuff let's create a yarder</font>

1053
00:37:28,600 --> 00:37:32,049
rule and search fires total and see if

1054
00:37:30,220 --> 00:37:33,580
we<font color="#E5E5E5"> see any hits like looking for things</font>

1055
00:37:32,050 --> 00:37:35,170
<font color="#CCCCCC">you've never</font><font color="#E5E5E5"> seen</font><font color="#CCCCCC"> before it's like the</font>

1056
00:37:33,580 --> 00:37:38,470
<font color="#E5E5E5">most exciting part of my day besides</font>

1057
00:37:35,170 --> 00:37:40,090
<font color="#E5E5E5">making coffee</font><font color="#CCCCCC"> for my team and I this is</font>

1058
00:37:38,470 --> 00:37:41,919
<font color="#CCCCCC">the most</font><font color="#E5E5E5"> exciting</font><font color="#CCCCCC"> part of my day when</font><font color="#E5E5E5"> it</font>

1059
00:37:40,090 --> 00:37:43,870
comes to work it's really<font color="#E5E5E5"> fun and we as</font>

1060
00:37:41,920 --> 00:37:46,630
defenders actually have an active<font color="#CCCCCC"> role</font>

1061
00:37:43,870 --> 00:37:48,940
in not only detecting attacker activity

1062
00:37:46,630 --> 00:37:51,079
but also<font color="#CCCCCC"> in a weird way kind of shaping</font>

1063
00:37:48,940 --> 00:37:53,180
it<font color="#E5E5E5"> like</font>

1064
00:37:51,079 --> 00:37:55,640
when it comes to obfuscation<font color="#E5E5E5"> attackers</font>

1065
00:37:53,180 --> 00:37:57,348
are enticed<font color="#E5E5E5"> in a lot of scenarios to use</font>

1066
00:37:55,640 --> 00:37:58,999
obfuscation because it'll evade a lot of

1067
00:37:57,349 --> 00:38:01,819
things<font color="#E5E5E5"> but they basically taking this</font>

1068
00:37:58,999 --> 00:38:03,649
huge wider range of let's say powershell

1069
00:38:01,819 --> 00:38:06,558
syntax they could be using<font color="#E5E5E5"> and they</font>

1070
00:38:03,650 --> 00:38:08,650
funnel it all down into<font color="#CCCCCC"> this</font><font color="#E5E5E5"> really ugly</font>

1071
00:38:06,559 --> 00:38:10,969
<font color="#E5E5E5">disgusting like funnel</font><font color="#CCCCCC"> of obfuscation</font>

1072
00:38:08,650 --> 00:38:13,819
<font color="#CCCCCC">but we basically just reduced what they</font>

1073
00:38:10,969 --> 00:38:15,140
could be<font color="#E5E5E5"> doing to this now what I forgot</font>

1074
00:38:13,819 --> 00:38:16,969
really good at<font color="#CCCCCC"> detecting this</font><font color="#E5E5E5"> at a lot</font>

1075
00:38:15,140 --> 00:38:18,348
<font color="#E5E5E5">of differing goals they're actually</font>

1076
00:38:16,969 --> 00:38:20,900
<font color="#CCCCCC">shaping and encouraging attacker</font>

1077
00:38:18,349 --> 00:38:22,609
activity the fact that<font color="#E5E5E5"> attackers that</font>

1078
00:38:20,900 --> 00:38:25,940
good attackers love<font color="#E5E5E5"> using stuff that</font>

1079
00:38:22,609 --> 00:38:27,410
<font color="#E5E5E5">Casey Smith tweets that's awesome that's</font>

1080
00:38:25,940 --> 00:38:28,009
<font color="#CCCCCC">chafing attacker activity we should be</font>

1081
00:38:27,410 --> 00:38:33,009
looking for<font color="#CCCCCC"> that</font>

1082
00:38:28,009 --> 00:38:33,009
those are wins for us<font color="#E5E5E5"> that dog thinks so</font>

1083
00:38:33,130 --> 00:38:39,859
where do<font color="#E5E5E5"> we start somewhere you don't</font>

1084
00:38:37,309 --> 00:38:41,299
detect everything right at once and we

1085
00:38:39,859 --> 00:38:43,700
<font color="#E5E5E5">always miss stuff like that that's a</font>

1086
00:38:41,299 --> 00:38:45,229
<font color="#E5E5E5">given we can't detect every single thing</font>

1087
00:38:43,700 --> 00:38:48,288
under<font color="#CCCCCC"> the Sun but</font><font color="#E5E5E5"> we detect what we can</font>

1088
00:38:45,229 --> 00:38:51,379
and<font color="#E5E5E5"> we continually improve and we do it</font>

1089
00:38:48,289 --> 00:38:55,670
piece by<font color="#E5E5E5"> piece</font><font color="#CCCCCC"> and this</font><font color="#E5E5E5"> at this point is</font>

1090
00:38:51,380 --> 00:38:58,729
may seem odd but<font color="#CCCCCC"> automate testing to</font>

1091
00:38:55,670 --> 00:39:00,859
preserve brain cycles<font color="#E5E5E5"> pester testing</font>

1092
00:38:58,729 --> 00:39:03,319
saved brain cycles from<font color="#E5E5E5"> you</font><font color="#CCCCCC"> because</font>

1093
00:39:00,859 --> 00:39:05,029
instead of<font color="#E5E5E5"> looking at a result</font><font color="#CCCCCC"> in sin</font>

1094
00:39:03,319 --> 00:39:06,859
thinking just just<font color="#E5E5E5"> for a quick second to</font>

1095
00:39:05,029 --> 00:39:09,799
<font color="#E5E5E5">me like is that right to this detection</font>

1096
00:39:06,859 --> 00:39:11,479
match<font color="#CCCCCC"> okay yet did we run again is</font><font color="#E5E5E5"> this</font>

1097
00:39:09,799 --> 00:39:13,880
right did it match<font color="#E5E5E5"> okay yeah</font><font color="#CCCCCC"> it did</font>

1098
00:39:11,479 --> 00:39:16,218
that's stealing creative brain cycles

1099
00:39:13,880 --> 00:39:18,920
<font color="#E5E5E5">for me if I</font><font color="#CCCCCC"> can put that in the test in</font>

1100
00:39:16,219 --> 00:39:21,380
a unit test<font color="#E5E5E5"> and automate it I never have</font>

1101
00:39:18,920 --> 00:39:22,640
to think<font color="#CCCCCC"> about that again</font><font color="#E5E5E5"> unless it</font>

1102
00:39:21,380 --> 00:39:25,099
<font color="#E5E5E5">comes up in bright red said hey this</font>

1103
00:39:22,640 --> 00:39:26,328
didn't match you missed this<font color="#CCCCCC"> and this is</font>

1104
00:39:25,099 --> 00:39:28,430
what allows<font color="#CCCCCC"> me to not</font><font color="#E5E5E5"> to look at</font>

1105
00:39:26,329 --> 00:39:30,440
thousands and thousands<font color="#E5E5E5"> of payloads and</font>

1106
00:39:28,430 --> 00:39:33,319
see did it I detect it<font color="#E5E5E5"> but</font><font color="#CCCCCC"> just to run a</font>

1107
00:39:30,440 --> 00:39:34,489
test and<font color="#CCCCCC"> go to bed</font><font color="#E5E5E5"> or go for a run</font><font color="#CCCCCC"> and</font>

1108
00:39:33,319 --> 00:39:37,099
<font color="#CCCCCC">then come back and be like</font><font color="#E5E5E5"> did I miss</font>

1109
00:39:34,489 --> 00:39:39,170
anything<font color="#E5E5E5"> no awesome</font><font color="#CCCCCC"> hey I missed one out</font>

1110
00:39:37,099 --> 00:39:42,140
<font color="#CCCCCC">of a thousand sweet let me look at that</font>

1111
00:39:39,170 --> 00:39:44,479
<font color="#E5E5E5">one</font><font color="#CCCCCC"> it's like it seems</font><font color="#E5E5E5"> simple</font><font color="#CCCCCC"> and like</font>

1112
00:39:42,140 --> 00:39:45,859
maybe like over<font color="#E5E5E5"> overlooked but</font><font color="#CCCCCC"> it really</font>

1113
00:39:44,479 --> 00:39:47,419
makes<font color="#E5E5E5"> a huge</font><font color="#CCCCCC"> difference I'm always</font>

1114
00:39:45,859 --> 00:39:49,578
<font color="#E5E5E5">thinking of</font><font color="#CCCCCC"> ways I can</font><font color="#E5E5E5"> preserve brain</font>

1115
00:39:47,420 --> 00:39:52,699
cycles to have the<font color="#E5E5E5"> creative energy to</font>

1116
00:39:49,579 --> 00:39:54,259
<font color="#E5E5E5">cope with detection and finally we</font>

1117
00:39:52,699 --> 00:39:56,569
should<font color="#E5E5E5"> be sharing</font><font color="#CCCCCC"> our successes</font><font color="#E5E5E5"> our</font>

1118
00:39:54,259 --> 00:39:58,130
failures our<font color="#E5E5E5"> methods our toolings etc</font>

1119
00:39:56,569 --> 00:39:59,690
and I really hope<font color="#CCCCCC"> that's obvious in in</font>

1120
00:39:58,130 --> 00:40:01,999
the office<font color="#CCCCCC"> Gatien tools that</font><font color="#E5E5E5"> I write</font>

1121
00:39:59,690 --> 00:40:03,319
<font color="#E5E5E5">because I'm trying to share that</font>

1122
00:40:01,999 --> 00:40:04,169
research so other<font color="#CCCCCC"> people</font><font color="#E5E5E5"> don't have to</font>

1123
00:40:03,319 --> 00:40:05,849
go and stumble

1124
00:40:04,170 --> 00:40:07,940
<font color="#CCCCCC">through all</font><font color="#E5E5E5"> that development but</font><font color="#CCCCCC"> that</font>

1125
00:40:05,849 --> 00:40:10,500
they can benefit from it<font color="#E5E5E5"> right away</font>

1126
00:40:07,940 --> 00:40:13,319
so in summary detection development<font color="#E5E5E5"> it's</font>

1127
00:40:10,500 --> 00:40:14,730
an iterative<font color="#E5E5E5"> art in</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> science and people</font>

1128
00:40:13,319 --> 00:40:16,259
do<font color="#E5E5E5"> it differently we all have different</font>

1129
00:40:14,730 --> 00:40:17,940
tools<font color="#E5E5E5"> and that's awesome</font>

1130
00:40:16,260 --> 00:40:19,500
and we<font color="#E5E5E5"> shouldn't</font><font color="#CCCCCC"> be mad about tool</font>

1131
00:40:17,940 --> 00:40:20,730
differences we should learn from<font color="#CCCCCC"> one</font>

1132
00:40:19,500 --> 00:40:22,700
another<font color="#E5E5E5"> and see what works better in</font>

1133
00:40:20,730 --> 00:40:24,990
some<font color="#CCCCCC"> scenarios</font><font color="#E5E5E5"> and all improve together</font>

1134
00:40:22,700 --> 00:40:27,419
<font color="#E5E5E5">dev set principles empower more</font>

1135
00:40:24,990 --> 00:40:29,640
effective detection<font color="#CCCCCC"> Rd it definitely has</font>

1136
00:40:27,420 --> 00:40:31,079
for me<font color="#E5E5E5"> there's a lot of</font><font color="#CCCCCC"> awesome and sexy</font>

1137
00:40:29,640 --> 00:40:33,509
<font color="#E5E5E5">PowerShell tooling that makes this</font>

1138
00:40:31,079 --> 00:40:36,540
really doable<font color="#CCCCCC"> for me I'm a big</font>

1139
00:40:33,510 --> 00:40:38,400
<font color="#CCCCCC">PowerShell guru</font><font color="#E5E5E5"> but you don't have to</font>

1140
00:40:36,540 --> 00:40:40,079
use PowerShell<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then again automate</font>

1141
00:40:38,400 --> 00:40:43,260
<font color="#E5E5E5">point-in-time thinking to free up those</font>

1142
00:40:40,079 --> 00:40:44,849
creative brain cycles um<font color="#E5E5E5"> the the</font><font color="#CCCCCC"> last</font>

1143
00:40:43,260 --> 00:40:47,460
<font color="#E5E5E5">points I'll say is it's important</font><font color="#CCCCCC"> to</font>

1144
00:40:44,849 --> 00:40:48,660
<font color="#CCCCCC">have</font><font color="#E5E5E5"> data</font><font color="#CCCCCC"> if you can't</font><font color="#E5E5E5"> collect</font><font color="#CCCCCC"> public</font>

1145
00:40:47,460 --> 00:40:50,819
data of the thing you're<font color="#CCCCCC"> trying to</font>

1146
00:40:48,660 --> 00:40:52,500
<font color="#CCCCCC">detect</font><font color="#E5E5E5"> then copy that code and generate</font>

1147
00:40:50,819 --> 00:40:54,359
it or if it's something so crazy

1148
00:40:52,500 --> 00:40:56,670
obfuscation thing that doesn't exist<font color="#E5E5E5"> yet</font>

1149
00:40:54,359 --> 00:40:59,400
build a thing to do that<font color="#E5E5E5"> and then create</font>

1150
00:40:56,670 --> 00:41:01,079
the data and<font color="#E5E5E5"> finally these techniques</font>

1151
00:40:59,400 --> 00:41:02,250
are tool and language agnostic I know

1152
00:41:01,079 --> 00:41:03,569
I've been<font color="#CCCCCC"> kind of focusing</font><font color="#E5E5E5"> on the</font>

1153
00:41:02,250 --> 00:41:05,910
PowerShell component<font color="#E5E5E5"> that's just what I</font>

1154
00:41:03,569 --> 00:41:07,770
like<font color="#E5E5E5"> but you can use any tool to</font>

1155
00:41:05,910 --> 00:41:10,140
<font color="#E5E5E5">generate that data</font><font color="#CCCCCC"> and also</font><font color="#E5E5E5"> the</font>

1156
00:41:07,770 --> 00:41:11,970
detection<font color="#CCCCCC"> we just use</font><font color="#E5E5E5"> reg exes but maybe</font>

1157
00:41:10,140 --> 00:41:15,299
that<font color="#CCCCCC"> doesn't work for you</font><font color="#E5E5E5"> but you can</font>

1158
00:41:11,970 --> 00:41:17,069
put<font color="#E5E5E5"> that logic in an</font><font color="#CCCCCC"> IOC</font><font color="#E5E5E5"> or a yaw roll</font>

1159
00:41:15,299 --> 00:41:18,990
or a spunk query or a<font color="#E5E5E5"> carbon black</font>

1160
00:41:17,069 --> 00:41:21,599
filter all these different<font color="#CCCCCC"> things</font><font color="#E5E5E5"> it's</font>

1161
00:41:18,990 --> 00:41:23,160
just<font color="#E5E5E5"> providing</font><font color="#CCCCCC"> an avenue to explore</font><font color="#E5E5E5"> the</font>

1162
00:41:21,599 --> 00:41:24,630
concepts that<font color="#E5E5E5"> you can then translate</font>

1163
00:41:23,160 --> 00:41:27,930
into whatever<font color="#E5E5E5"> tools you have at</font><font color="#CCCCCC"> your</font>

1164
00:41:24,630 --> 00:41:29,250
disposal<font color="#E5E5E5"> so here's some of the</font>

1165
00:41:27,930 --> 00:41:31,230
references of<font color="#CCCCCC"> some of the frameworks and</font>

1166
00:41:29,250 --> 00:41:33,480
stuff off<font color="#E5E5E5"> all the modules and the demo</font>

1167
00:41:31,230 --> 00:41:39,869
scripts<font color="#CCCCCC"> that I'd that I did</font><font color="#E5E5E5"> are in this</font>

1168
00:41:33,480 --> 00:41:41,299
<font color="#CCCCCC">dev site defense on my github and that</font>

1169
00:41:39,869 --> 00:41:46,049
reference<font color="#E5E5E5"> is here</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> this next</font><font color="#CCCCCC"> slide</font>

1170
00:41:41,299 --> 00:41:48,270
<font color="#E5E5E5">again</font><font color="#CCCCCC"> it's my Twitter</font><font color="#E5E5E5"> github blog</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> just</font>

1171
00:41:46,049 --> 00:41:50,130
want to say I'm again just super<font color="#E5E5E5"> honored</font>

1172
00:41:48,270 --> 00:41:51,569
to be here last year<font color="#E5E5E5"> the first edition</font>

1173
00:41:50,130 --> 00:41:53,520
<font color="#E5E5E5">was awesome I'm honored to be here</font><font color="#CCCCCC"> for</font>

1174
00:41:51,569 --> 00:41:56,720
the second edition<font color="#CCCCCC"> and I just want to</font>

1175
00:41:53,520 --> 00:41:56,720
say thank<font color="#E5E5E5"> you so much for your time</font>

1176
00:42:02,460 --> 00:42:10,200
thank you it's awesome<font color="#CCCCCC"> good to have you</font>

1177
00:42:06,299 --> 00:42:13,440
here<font color="#CCCCCC"> Daniel again so thank you</font><font color="#E5E5E5"> any</font>

1178
00:42:10,200 --> 00:42:18,359
<font color="#E5E5E5">questions from the</font><font color="#CCCCCC"> audience just</font><font color="#E5E5E5"> raise</font>

1179
00:42:13,440 --> 00:42:23,190
your hand it could<font color="#CCCCCC"> be about a Hoffy too</font>

1180
00:42:18,359 --> 00:42:24,660
if you want<font color="#E5E5E5"> okay I guess not</font><font color="#CCCCCC"> I think</font>

1181
00:42:23,190 --> 00:42:27,779
<font color="#CCCCCC">last year the very first question was</font>

1182
00:42:24,660 --> 00:42:30,930
<font color="#CCCCCC">how much coffee do you drink</font><font color="#E5E5E5"> because I</font>

1183
00:42:27,779 --> 00:42:31,619
was hyper last year so yeah awesome<font color="#E5E5E5"> well</font>

1184
00:42:30,930 --> 00:42:33,029
thank you<font color="#CCCCCC"> again</font>

1185
00:42:31,619 --> 00:42:36,730
<font color="#CCCCCC">okay here</font>

1186
00:42:33,030 --> 00:42:39,880
[Applause]

1187
00:42:36,730 --> 00:42:39,880
[Music]

