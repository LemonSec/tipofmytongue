1
00:00:10,559 --> 00:00:13,360
my name is greg or gregostvorek i'm

2
00:00:12,480 --> 00:00:15,200
working

3
00:00:13,360 --> 00:00:17,520
in standard chartered as malware

4
00:00:15,200 --> 00:00:19,680
security security lead engineer and

5
00:00:17,520 --> 00:00:20,560
deeply in my heart i'm on the blue side

6
00:00:19,680 --> 00:00:22,800
and i'm

7
00:00:20,560 --> 00:00:24,160
digging into internals of windows and

8
00:00:22,800 --> 00:00:27,279
this is what i do

9
00:00:24,160 --> 00:00:30,400
both for work and for fun and

10
00:00:27,279 --> 00:00:31,920
today the agenda is quite simple because

11
00:00:30,400 --> 00:00:33,600
i would like to talk about the

12
00:00:31,920 --> 00:00:36,880
monitoring in windows

13
00:00:33,600 --> 00:00:37,280
briefly go through possible options and

14
00:00:36,880 --> 00:00:40,399
then

15
00:00:37,280 --> 00:00:41,520
talk about etw and then the rest of the

16
00:00:40,399 --> 00:00:43,920
time will be

17
00:00:41,520 --> 00:00:44,719
some demonstration of practical aspects

18
00:00:43,920 --> 00:00:48,079
of the

19
00:00:44,719 --> 00:00:50,640
etw so when it comes to monitoring

20
00:00:48,079 --> 00:00:52,640
we have a lot of possibilities of a lot

21
00:00:50,640 --> 00:00:56,000
of

22
00:00:52,640 --> 00:00:59,199
ways how windows is trying to tell us

23
00:00:56,000 --> 00:01:01,359
what it is doing so first

24
00:00:59,199 --> 00:01:03,199
the best known are event logs in the

25
00:01:01,359 --> 00:01:05,519
past we had three event logs

26
00:01:03,199 --> 00:01:08,320
right now we have hundreds of them it is

27
00:01:05,519 --> 00:01:13,840
relatively easy to ask about all of them

28
00:01:08,320 --> 00:01:13,839
uh using powershell using um

29
00:01:16,640 --> 00:01:23,520
parameter and you will see this like 400

30
00:01:20,320 --> 00:01:25,199
is not unusual number then we have

31
00:01:23,520 --> 00:01:26,798
performance counters

32
00:01:25,200 --> 00:01:28,560
this is something we can observe in

33
00:01:26,799 --> 00:01:33,040
performance and

34
00:01:28,560 --> 00:01:35,040
here number is coming into thousands and

35
00:01:33,040 --> 00:01:37,040
i'm talking only about those provided by

36
00:01:35,040 --> 00:01:40,159
the operating system itself

37
00:01:37,040 --> 00:01:43,920
some other applications are doing

38
00:01:40,159 --> 00:01:43,920
their own monitoring

39
00:01:44,399 --> 00:01:48,560
thing through those interfaces if you

40
00:01:46,560 --> 00:01:51,040
are developing some applications

41
00:01:48,560 --> 00:01:51,840
it would be great if you do the same way

42
00:01:51,040 --> 00:01:54,720
as

43
00:01:51,840 --> 00:01:55,200
it is it is great well known and well

44
00:01:54,720 --> 00:01:56,880
known

45
00:01:55,200 --> 00:01:58,320
also for administrators so they are

46
00:01:56,880 --> 00:02:01,679
relatively

47
00:01:58,320 --> 00:02:03,199
well fitted to monitor um

48
00:02:01,680 --> 00:02:06,000
the stuff you are trying to share with

49
00:02:03,200 --> 00:02:06,640
them next we are going to some less

50
00:02:06,000 --> 00:02:08,959
known

51
00:02:06,640 --> 00:02:10,000
uh things within windows the first thing

52
00:02:08,959 --> 00:02:13,680
is the

53
00:02:10,000 --> 00:02:16,800
debug channel the debug output because

54
00:02:13,680 --> 00:02:18,959
an application can print something

55
00:02:16,800 --> 00:02:20,640
into a debug channel it is not appearing

56
00:02:18,959 --> 00:02:24,000
anyway anywhere

57
00:02:20,640 --> 00:02:26,480
on the screen and if

58
00:02:24,000 --> 00:02:29,040
you want you can monitor this if you run

59
00:02:26,480 --> 00:02:31,040
your application within debugger

60
00:02:29,040 --> 00:02:33,440
the debug output will appear in the

61
00:02:31,040 --> 00:02:36,480
debugger console

62
00:02:33,440 --> 00:02:38,959
if you want to stay more on some

63
00:02:36,480 --> 00:02:40,079
on the administrator side not on the

64
00:02:38,959 --> 00:02:42,239
developer side

65
00:02:40,080 --> 00:02:43,280
you can launch debug view from sys

66
00:02:42,239 --> 00:02:45,440
internals and

67
00:02:43,280 --> 00:02:48,080
also observe what application are

68
00:02:45,440 --> 00:02:51,280
talking about what is happening inside

69
00:02:48,080 --> 00:02:53,680
interesting fact is some

70
00:02:51,280 --> 00:02:56,239
release application not being intended

71
00:02:53,680 --> 00:02:59,760
to monitor what is happening inside

72
00:02:56,239 --> 00:03:00,000
are pretty talkative using debug output

73
00:02:59,760 --> 00:03:02,399
and

74
00:03:00,000 --> 00:03:03,760
debug view can display you what is

75
00:03:02,400 --> 00:03:07,120
happening inside

76
00:03:03,760 --> 00:03:08,319
including number of the line in the code

77
00:03:07,120 --> 00:03:11,519
etc

78
00:03:08,319 --> 00:03:13,839
so um it is

79
00:03:11,519 --> 00:03:16,959
good exercise to make it running but for

80
00:03:13,840 --> 00:03:19,519
your application and for

81
00:03:16,959 --> 00:03:20,480
uh third party application if you are

82
00:03:19,519 --> 00:03:22,480
developers

83
00:03:20,480 --> 00:03:24,480
writing to debug view is not very

84
00:03:22,480 --> 00:03:25,440
complicated it is well documented it is

85
00:03:24,480 --> 00:03:28,079
done through api

86
00:03:25,440 --> 00:03:28,879
it is slightly more complex through from

87
00:03:28,080 --> 00:03:32,720
powershell

88
00:03:28,879 --> 00:03:36,079
but is way better than spitting

89
00:03:32,720 --> 00:03:38,879
message boxes or logging into

90
00:03:36,080 --> 00:03:39,920
a text file for your own purpose how the

91
00:03:38,879 --> 00:03:41,920
code is going

92
00:03:39,920 --> 00:03:43,359
doing this through debug channel is way

93
00:03:41,920 --> 00:03:46,879
more convenient

94
00:03:43,360 --> 00:03:49,120
next we have a slightly

95
00:03:46,879 --> 00:03:49,920
more hidden features the first one is

96
00:03:49,120 --> 00:03:52,799
wpp

97
00:03:49,920 --> 00:03:53,119
windows software trace preprocessor it

98
00:03:52,799 --> 00:03:57,040
is

99
00:03:53,120 --> 00:04:00,080
intended for developers the idea of wpp

100
00:03:57,040 --> 00:04:01,760
is to provide developers a way of

101
00:04:00,080 --> 00:04:03,599
testing what is happening within the

102
00:04:01,760 --> 00:04:07,040
application is

103
00:04:03,599 --> 00:04:08,000
slightly more structured than the debug

104
00:04:07,040 --> 00:04:11,200
view

105
00:04:08,000 --> 00:04:15,840
debug output so it may be used

106
00:04:11,200 --> 00:04:17,680
for tests for pre-releases and so on

107
00:04:15,840 --> 00:04:19,120
on the top of wpp there is one

108
00:04:17,680 --> 00:04:21,519
interesting feature

109
00:04:19,120 --> 00:04:23,919
so called in-flight trace recorder it is

110
00:04:21,519 --> 00:04:26,960
somehow documented by microsoft

111
00:04:23,919 --> 00:04:30,080
and with ifr

112
00:04:26,960 --> 00:04:33,359
you can relatively easily

113
00:04:30,080 --> 00:04:36,719
find the log the

114
00:04:33,360 --> 00:04:38,080
size of the log for ifr is relatively

115
00:04:36,720 --> 00:04:39,919
small

116
00:04:38,080 --> 00:04:42,159
but at the same time it is kept in the

117
00:04:39,919 --> 00:04:45,520
memory in a circular

118
00:04:42,160 --> 00:04:49,280
form and when the dump is

119
00:04:45,520 --> 00:04:52,639
created the data from the ifr is going

120
00:04:49,280 --> 00:04:54,400
into well-determined place so

121
00:04:52,639 --> 00:04:56,080
it is a great feature especially if you

122
00:04:54,400 --> 00:04:59,120
are doing some

123
00:04:56,080 --> 00:05:00,080
kernel development because if your os

124
00:04:59,120 --> 00:05:03,520
crashes

125
00:05:00,080 --> 00:05:05,280
you open the dump and you can relatively

126
00:05:03,520 --> 00:05:09,520
easily

127
00:05:05,280 --> 00:05:13,359
read what went to

128
00:05:09,520 --> 00:05:16,880
ifr so seeing the last actions about

129
00:05:13,360 --> 00:05:18,400
your software uh what it did before the

130
00:05:16,880 --> 00:05:20,719
os crashed

131
00:05:18,400 --> 00:05:22,840
uh we have also some kernel black boxes

132
00:05:20,720 --> 00:05:26,320
for monitoring those are not

133
00:05:22,840 --> 00:05:29,119
exposed actually

134
00:05:26,320 --> 00:05:29,599
only two of those are documented and one

135
00:05:29,120 --> 00:05:32,800
is for

136
00:05:29,600 --> 00:05:34,160
the boot process and another one is for

137
00:05:32,800 --> 00:05:37,360
services

138
00:05:34,160 --> 00:05:40,720
and those can be read through

139
00:05:37,360 --> 00:05:42,479
extensions for the debugger the boot

140
00:05:40,720 --> 00:05:44,479
process is

141
00:05:42,479 --> 00:05:47,280
not very deeply covered in the modern

142
00:05:44,479 --> 00:05:49,199
version of operating systems

143
00:05:47,280 --> 00:05:50,559
services are talking about what is

144
00:05:49,199 --> 00:05:53,440
happening and

145
00:05:50,560 --> 00:05:54,240
you can read the data or report the data

146
00:05:53,440 --> 00:05:57,120
through this

147
00:05:54,240 --> 00:05:57,520
as well and the final one last but not

148
00:05:57,120 --> 00:06:01,120
least

149
00:05:57,520 --> 00:06:04,080
is uh event tracing for windows or

150
00:06:01,120 --> 00:06:04,960
etw and when it comes to etw the

151
00:06:04,080 --> 00:06:08,639
architecture

152
00:06:04,960 --> 00:06:11,039
is well documented by microsoft it

153
00:06:08,639 --> 00:06:14,000
appeared

154
00:06:11,039 --> 00:06:14,800
for the first time in windows vista at

155
00:06:14,000 --> 00:06:19,360
the beginning

156
00:06:14,800 --> 00:06:20,000
it has a lower number of sessions so if

157
00:06:19,360 --> 00:06:23,360
someone

158
00:06:20,000 --> 00:06:23,360
uh listened to

159
00:06:23,840 --> 00:06:31,039
etw uh stuff others cannot listen to it

160
00:06:27,759 --> 00:06:32,319
right now it is relatively easy because

161
00:06:31,039 --> 00:06:36,000
we have

162
00:06:32,319 --> 00:06:38,960
higher numbers of of session

163
00:06:36,000 --> 00:06:39,840
available and within the structure we

164
00:06:38,960 --> 00:06:43,440
have the the

165
00:06:39,840 --> 00:06:46,080
engine itself the block

166
00:06:43,440 --> 00:06:46,800
in the middle of the diagram we have

167
00:06:46,080 --> 00:06:52,000
some

168
00:06:46,800 --> 00:06:55,919
controllers on the top controllers are

169
00:06:52,000 --> 00:06:59,520
applications mainly telling to the etw

170
00:06:55,919 --> 00:07:02,639
engine what to do which providers

171
00:06:59,520 --> 00:07:06,080
to use where to store the data

172
00:07:02,639 --> 00:07:08,880
going through etw and so on we have

173
00:07:06,080 --> 00:07:09,440
providers i will cover them in a moment

174
00:07:08,880 --> 00:07:13,039
and

175
00:07:09,440 --> 00:07:16,319
we have consumers someone who is pushing

176
00:07:13,039 --> 00:07:20,800
a set of messages

177
00:07:16,319 --> 00:07:23,919
into the etw engine and someone

178
00:07:20,800 --> 00:07:26,800
obtaining a messages out of the

179
00:07:23,919 --> 00:07:28,799
of the engine and of course it is also

180
00:07:26,800 --> 00:07:30,240
possible to store the data coming out of

181
00:07:28,800 --> 00:07:32,160
the atw

182
00:07:30,240 --> 00:07:33,360
into a file on a drive with some

183
00:07:32,160 --> 00:07:35,680
parameters

184
00:07:33,360 --> 00:07:38,160
specifying what is the maximum size if

185
00:07:35,680 --> 00:07:38,160
it's a

186
00:07:38,639 --> 00:07:45,520
circular log etc etc and we can also

187
00:07:42,160 --> 00:07:48,240
specify which events we want to collect

188
00:07:45,520 --> 00:07:49,840
both in terms of which provider we want

189
00:07:48,240 --> 00:07:53,440
to

190
00:07:49,840 --> 00:07:57,679
listen to and which type of events

191
00:07:53,440 --> 00:08:01,520
from this particular providers are

192
00:07:57,680 --> 00:08:04,720
interesting uh for us

193
00:08:01,520 --> 00:08:07,520
okay uh the next slide is

194
00:08:04,720 --> 00:08:07,520
actually uh

195
00:08:08,000 --> 00:08:12,479
almost the last one because right now i

196
00:08:10,879 --> 00:08:16,479
will go more through

197
00:08:12,479 --> 00:08:19,919
this nice bluish console

198
00:08:16,479 --> 00:08:23,120
so uh to start let's see

199
00:08:19,919 --> 00:08:26,159
what what which providers uh and

200
00:08:23,120 --> 00:08:29,360
which sessions within the etw

201
00:08:26,160 --> 00:08:31,520
infrastructure are present right now

202
00:08:29,360 --> 00:08:34,080
the main command which is built into the

203
00:08:31,520 --> 00:08:38,319
operating system is log on command

204
00:08:34,080 --> 00:08:41,519
and its syntax is not very obvious

205
00:08:38,320 --> 00:08:43,120
but there is some built-in head there is

206
00:08:41,519 --> 00:08:46,240
some documentation

207
00:08:43,120 --> 00:08:50,800
what i like to do is

208
00:08:46,240 --> 00:08:53,360
to perform logman query

209
00:08:50,800 --> 00:08:54,160
minus ets minus ets generally saying

210
00:08:53,360 --> 00:08:57,760
means

211
00:08:54,160 --> 00:09:02,160
do it right now for for live

212
00:08:57,760 --> 00:09:06,480
monitoring so ets

213
00:09:02,160 --> 00:09:08,959
this is the set of sessions being

214
00:09:06,480 --> 00:09:10,000
currently active within the operating

215
00:09:08,959 --> 00:09:13,279
systems

216
00:09:10,000 --> 00:09:16,399
uh you can see from here

217
00:09:13,279 --> 00:09:17,360
that even some uh data going into the

218
00:09:16,399 --> 00:09:20,640
event log

219
00:09:17,360 --> 00:09:23,920
is actually a writing a file

220
00:09:20,640 --> 00:09:27,040
uh based on the some on some

221
00:09:23,920 --> 00:09:30,240
etw data i can

222
00:09:27,040 --> 00:09:33,599
uh check the security um

223
00:09:30,240 --> 00:09:38,560
for example as this one would be smaller

224
00:09:33,600 --> 00:09:41,760
and i can do load man query

225
00:09:38,560 --> 00:09:44,959
and then name of the log and then

226
00:09:41,760 --> 00:09:46,319
yes and i can name of the session and i

227
00:09:44,959 --> 00:09:49,119
can observe

228
00:09:46,320 --> 00:09:50,320
how events in the even log security are

229
00:09:49,120 --> 00:09:54,160
appearing

230
00:09:50,320 --> 00:09:58,000
they are coming from the

231
00:09:54,160 --> 00:09:59,680
real time trace and there is some

232
00:09:58,000 --> 00:10:01,200
data where the data is collected and

233
00:09:59,680 --> 00:10:04,479
then is transferred to the

234
00:10:01,200 --> 00:10:07,839
to the event log if i do the same

235
00:10:04,480 --> 00:10:11,519
for um application

236
00:10:07,839 --> 00:10:13,660
even log i will probably see a lot of

237
00:10:11,519 --> 00:10:16,320
providers which means

238
00:10:13,660 --> 00:10:20,319
[Music]

239
00:10:16,320 --> 00:10:20,320
i will want a new console um

240
00:10:20,800 --> 00:10:27,599
because it may take some time um

241
00:10:24,160 --> 00:10:30,399
even log application eps and

242
00:10:27,600 --> 00:10:32,480
this probably will return some result in

243
00:10:30,399 --> 00:10:35,519
a moment showing us how

244
00:10:32,480 --> 00:10:38,880
stuff is going to application uh

245
00:10:35,519 --> 00:10:42,920
event law if we want to display

246
00:10:38,880 --> 00:10:47,839
just providers there is a command

247
00:10:42,920 --> 00:10:47,839
logman query providers

248
00:10:48,480 --> 00:10:57,120
displaying us who is willing to talk

249
00:10:52,880 --> 00:11:00,210
to the epw engine

250
00:10:57,120 --> 00:11:02,560
i will launch

251
00:11:00,210 --> 00:11:07,040
[Music]

252
00:11:02,560 --> 00:11:07,040
also i get it

253
00:11:07,680 --> 00:11:14,479
and within regedit i can show you

254
00:11:10,880 --> 00:11:17,040
where this those pro providers

255
00:11:14,480 --> 00:11:18,079
are registered i have those under

256
00:11:17,040 --> 00:11:21,279
publishers

257
00:11:18,079 --> 00:11:24,640
and here you can see the list of

258
00:11:21,279 --> 00:11:27,680
guides with all those

259
00:11:24,640 --> 00:11:30,000
providers being registered

260
00:11:27,680 --> 00:11:31,599
if i return to the result of my command

261
00:11:30,000 --> 00:11:35,040
log query providers

262
00:11:31,600 --> 00:11:35,040
you can see the set of

263
00:11:35,200 --> 00:11:39,040
my providers you can see that this is

264
00:11:37,839 --> 00:11:41,680
quite long it's

265
00:11:39,040 --> 00:11:42,640
usually more than one 000 different

266
00:11:41,680 --> 00:11:44,319
providers

267
00:11:42,640 --> 00:11:47,680
for different functionalities within the

268
00:11:44,320 --> 00:11:52,959
operating system reporting their data

269
00:11:47,680 --> 00:11:52,959
into the into the

270
00:11:54,480 --> 00:12:01,120
to the uh etw engine uh so

271
00:11:57,519 --> 00:12:04,240
uh gosh we have a uh

272
00:12:01,120 --> 00:12:08,000
ask from the attendees don't see

273
00:12:04,240 --> 00:12:11,120
yeah yeah okay i hope this one is

274
00:12:08,000 --> 00:12:13,680
enough um

275
00:12:11,120 --> 00:12:14,399
if not please let me know i prefer do

276
00:12:13,680 --> 00:12:16,800
not zoom

277
00:12:14,399 --> 00:12:18,160
do not zoom in and out and the comment

278
00:12:16,800 --> 00:12:22,160
uh here was

279
00:12:18,160 --> 00:12:22,160
uh this one logman query providers

280
00:12:22,800 --> 00:12:29,599
so it works for some time and then

281
00:12:25,839 --> 00:12:33,519
uh reports the the data from

282
00:12:29,600 --> 00:12:37,120
providers providers are registered here

283
00:12:33,519 --> 00:12:40,240
you can see some of those um

284
00:12:37,120 --> 00:12:41,839
for such provider there is a manifest

285
00:12:40,240 --> 00:12:44,399
being published so if i

286
00:12:41,839 --> 00:12:46,000
took if i take this one let's say i have

287
00:12:44,399 --> 00:12:49,600
no idea what is this

288
00:12:46,000 --> 00:12:54,000
about i will copy it to the desktop as

289
00:12:49,600 --> 00:12:56,800
copying it um is needed because

290
00:12:54,000 --> 00:12:58,800
i will use resource hacker which is not

291
00:12:56,800 --> 00:12:59,439
working properly with hard links and the

292
00:12:58,800 --> 00:13:02,399
files

293
00:12:59,440 --> 00:13:04,839
within the windows system 32 folder are

294
00:13:02,399 --> 00:13:07,519
actually hard links

295
00:13:04,839 --> 00:13:10,959
so copy

296
00:13:07,519 --> 00:13:14,000
this file to desktop

297
00:13:10,959 --> 00:13:15,439
resource hacker which i have on the

298
00:13:14,000 --> 00:13:20,399
desktop

299
00:13:15,440 --> 00:13:24,320
and then i ctrl o and i will open the uh

300
00:13:20,399 --> 00:13:25,279
dll i have copied open and within the

301
00:13:24,320 --> 00:13:28,720
dll

302
00:13:25,279 --> 00:13:29,279
i cannot see the thing i see the first

303
00:13:28,720 --> 00:13:32,399
one

304
00:13:29,279 --> 00:13:35,839
is a wevt template and this one

305
00:13:32,399 --> 00:13:39,199
is actually about the manifest about

306
00:13:35,839 --> 00:13:41,120
events uh being reported to w you can

307
00:13:39,199 --> 00:13:44,160
see this one is pretty short

308
00:13:41,120 --> 00:13:45,839
uh but we have longest one as well well

309
00:13:44,160 --> 00:13:47,360
you develop your software actually are

310
00:13:45,839 --> 00:13:50,639
compiling

311
00:13:47,360 --> 00:13:56,079
your xml description into this format

312
00:13:50,639 --> 00:13:59,120
this format is not really documented so

313
00:13:56,079 --> 00:14:02,638
seeing it from this perspective may be

314
00:13:59,120 --> 00:14:06,160
challenging but you can have some data

315
00:14:02,639 --> 00:14:10,720
or idea which way

316
00:14:06,160 --> 00:14:15,600
to go okay i can

317
00:14:10,720 --> 00:14:19,279
ask for some specific

318
00:14:15,600 --> 00:14:20,160
provider i had the list on the screen a

319
00:14:19,279 --> 00:14:23,279
moment ago

320
00:14:20,160 --> 00:14:26,480
i will refer to the

321
00:14:23,279 --> 00:14:27,760
provider responsible for powershell for

322
00:14:26,480 --> 00:14:29,680
example so

323
00:14:27,760 --> 00:14:31,680
there is a special provider for the

324
00:14:29,680 --> 00:14:35,359
powershell only

325
00:14:31,680 --> 00:14:38,079
logman aquari

326
00:14:35,360 --> 00:14:38,079
providers

327
00:14:39,279 --> 00:14:42,320
and the name of the

328
00:14:42,399 --> 00:14:46,800
powershell provider is microsoft

329
00:14:47,760 --> 00:14:54,480
a windows power shell

330
00:14:52,320 --> 00:14:56,399
and i will see some data about this

331
00:14:54,480 --> 00:14:57,839
particular provider so the name of the

332
00:14:56,399 --> 00:15:01,120
provider the

333
00:14:57,839 --> 00:15:01,680
id of the provider some data being

334
00:15:01,120 --> 00:15:06,000
useful

335
00:15:01,680 --> 00:15:08,560
for filtering the

336
00:15:06,000 --> 00:15:10,480
events coming to our consumer so i can

337
00:15:08,560 --> 00:15:13,518
specify flags

338
00:15:10,480 --> 00:15:16,639
which type of the message from the

339
00:15:13,519 --> 00:15:19,440
this provider i'm interested in

340
00:15:16,639 --> 00:15:20,639
so i can see only run space or using

341
00:15:19,440 --> 00:15:23,360
just a mask

342
00:15:20,639 --> 00:15:23,920
and another mask i can use is the mask

343
00:15:23,360 --> 00:15:27,600
for

344
00:15:23,920 --> 00:15:30,000
the level of the the message

345
00:15:27,600 --> 00:15:31,759
because it may be interesting to listen

346
00:15:30,000 --> 00:15:34,160
only to errors or whatever

347
00:15:31,759 --> 00:15:36,240
this is the reason for this so if you

348
00:15:34,160 --> 00:15:39,600
are registering for a provider

349
00:15:36,240 --> 00:15:41,279
for registering for listening to some

350
00:15:39,600 --> 00:15:42,399
providers you are also specifying this

351
00:15:41,279 --> 00:15:46,000
data

352
00:15:42,399 --> 00:15:47,920
and it there is no general rule it is up

353
00:15:46,000 --> 00:15:51,279
to the developer of the

354
00:15:47,920 --> 00:15:54,399
provider what it means sometimes it is

355
00:15:51,279 --> 00:15:56,480
well described sometimes not really

356
00:15:54,399 --> 00:15:57,600
and if you are creating your own

357
00:15:56,480 --> 00:16:01,279
providers uh

358
00:15:57,600 --> 00:16:04,800
it would be great to provide this

359
00:16:01,279 --> 00:16:08,880
description in a reasonable way

360
00:16:04,800 --> 00:16:11,439
if i start

361
00:16:08,880 --> 00:16:12,639
powershell and if i issue the same

362
00:16:11,440 --> 00:16:16,399
command again

363
00:16:12,639 --> 00:16:20,079
uh i will also see and a list of

364
00:16:16,399 --> 00:16:23,440
images using this

365
00:16:20,079 --> 00:16:26,079
provider actively right now

366
00:16:23,440 --> 00:16:27,120
a list of processes and responsible

367
00:16:26,079 --> 00:16:30,319
images

368
00:16:27,120 --> 00:16:30,959
i can also specify a pid as a parameter

369
00:16:30,320 --> 00:16:34,240
for

370
00:16:30,959 --> 00:16:37,839
logman query providers with the

371
00:16:34,240 --> 00:16:37,839
minus pid parameter

372
00:16:38,000 --> 00:16:41,120
but sometimes it is not working properly

373
00:16:40,800 --> 00:16:43,680
i

374
00:16:41,120 --> 00:16:44,399
have no idea why it is working sometimes

375
00:16:43,680 --> 00:16:46,638
and

376
00:16:44,399 --> 00:16:48,000
sometimes not and it may take a lot of

377
00:16:46,639 --> 00:16:51,120
time

378
00:16:48,000 --> 00:16:53,759
to process it

379
00:16:51,120 --> 00:16:54,639
okay let's use those providers as we

380
00:16:53,759 --> 00:16:58,079
have

381
00:16:54,639 --> 00:17:01,759
some theory behind behind it

382
00:16:58,079 --> 00:17:04,000
it would be great to play with those

383
00:17:01,759 --> 00:17:05,039
the first thing i would like to cover

384
00:17:04,000 --> 00:17:07,439
maybe not

385
00:17:05,039 --> 00:17:08,480
directly playing but by explaining

386
00:17:07,439 --> 00:17:10,240
things

387
00:17:08,480 --> 00:17:11,599
we can of course manipulate those

388
00:17:10,240 --> 00:17:13,760
registrations are

389
00:17:11,599 --> 00:17:15,119
as those registration if we remove

390
00:17:13,760 --> 00:17:18,079
something it will

391
00:17:15,119 --> 00:17:19,198
will be unregistered and we will have

392
00:17:18,079 --> 00:17:22,240
some

393
00:17:19,199 --> 00:17:25,520
issues this provider will not talk to

394
00:17:22,240 --> 00:17:26,799
us anymore so we can blind our

395
00:17:25,520 --> 00:17:30,559
monitoring tools

396
00:17:26,799 --> 00:17:33,039
using this way now another thing if

397
00:17:30,559 --> 00:17:33,918
i go to auto loggers which is in the

398
00:17:33,039 --> 00:17:37,520
registry

399
00:17:33,919 --> 00:17:40,799
over here here we have the set of

400
00:17:37,520 --> 00:17:44,480
those automatic loggers i uh show i

401
00:17:40,799 --> 00:17:47,120
i demonstrated at the very beginning so

402
00:17:44,480 --> 00:17:48,320
the currently running run automatically

403
00:17:47,120 --> 00:17:52,000
by the operating system

404
00:17:48,320 --> 00:17:55,439
to register to monitor uh stuff

405
00:17:52,000 --> 00:17:58,160
happening uh within the operating system

406
00:17:55,440 --> 00:17:59,840
during its normal usage and here is

407
00:17:58,160 --> 00:18:03,520
pretty nice uh

408
00:17:59,840 --> 00:18:08,159
think because maybe not this one i

409
00:18:03,520 --> 00:18:10,400
we try to find some maybe

410
00:18:08,160 --> 00:18:12,080
defender will be good enough because if

411
00:18:10,400 --> 00:18:15,120
i go to particular

412
00:18:12,080 --> 00:18:16,879
good responsible for some provider there

413
00:18:15,120 --> 00:18:20,159
is a value

414
00:18:16,880 --> 00:18:22,799
registry value called enable set one

415
00:18:20,160 --> 00:18:23,440
we can play with those uh switching

416
00:18:22,799 --> 00:18:27,280
those to

417
00:18:23,440 --> 00:18:31,520
num1 which means those

418
00:18:27,280 --> 00:18:31,520
auto providers will uh

419
00:18:31,679 --> 00:18:38,080
i will um not monitor this

420
00:18:35,520 --> 00:18:39,840
uh i can see the question uh on the chat

421
00:18:38,080 --> 00:18:41,678
does reduce removal to get rid of

422
00:18:39,840 --> 00:18:45,039
logging require system restart

423
00:18:41,679 --> 00:18:47,919
yes for this type of the registering

424
00:18:45,039 --> 00:18:50,240
providers by removing register entries

425
00:18:47,919 --> 00:18:51,120
it requires reloading the entire engine

426
00:18:50,240 --> 00:18:53,360
which which

427
00:18:51,120 --> 00:18:54,479
requires system restart for this

428
00:18:53,360 --> 00:18:57,799
particular

429
00:18:54,480 --> 00:19:01,679
method it's yes most of

430
00:18:57,799 --> 00:19:04,160
manipulations uh related to the atw

431
00:19:01,679 --> 00:19:05,520
will require restart if you want to

432
00:19:04,160 --> 00:19:09,280
manipulate them

433
00:19:05,520 --> 00:19:12,720
kind of illegal way

434
00:19:09,280 --> 00:19:16,080
yet another thing i can mention here

435
00:19:12,720 --> 00:19:19,679
um is under security

436
00:19:16,080 --> 00:19:21,360
uh so it is here it is local machine

437
00:19:19,679 --> 00:19:22,960
system current controller set control

438
00:19:21,360 --> 00:19:25,439
wmi security

439
00:19:22,960 --> 00:19:26,480
and here you can see a list of all

440
00:19:25,440 --> 00:19:29,520
providers

441
00:19:26,480 --> 00:19:32,640
actually the viewers and then the data

442
00:19:29,520 --> 00:19:35,600
and the data for every single provider

443
00:19:32,640 --> 00:19:37,840
is a security descriptor if you like to

444
00:19:35,600 --> 00:19:38,799
play with binary security descriptors

445
00:19:37,840 --> 00:19:43,039
you can

446
00:19:38,799 --> 00:19:47,760
do this right here but i have also

447
00:19:43,039 --> 00:19:47,760
prepared a small script

448
00:19:48,559 --> 00:19:55,280
reading those registry values and then

449
00:19:52,240 --> 00:20:00,400
trying to decrypt those permissions

450
00:19:55,280 --> 00:20:00,399
into a bit more human readable

451
00:20:01,840 --> 00:20:06,320
things the important thing i'm

452
00:20:04,000 --> 00:20:06,960
specifying within comments for my

453
00:20:06,320 --> 00:20:10,639
scripts

454
00:20:06,960 --> 00:20:10,640
is if there is no

455
00:20:10,799 --> 00:20:16,879
access control list for some particular

456
00:20:14,480 --> 00:20:18,559
provider it means there is a special

457
00:20:16,880 --> 00:20:21,039
guide being a template

458
00:20:18,559 --> 00:20:23,280
so there if there is no explicitly

459
00:20:21,039 --> 00:20:26,158
specified security for some provider

460
00:20:23,280 --> 00:20:28,799
it will be inherited from this gui if i

461
00:20:26,159 --> 00:20:28,799
run the script

462
00:20:29,600 --> 00:20:37,840
i'm not an admin which happens

463
00:20:34,720 --> 00:20:41,679
i will run isa as admin

464
00:20:37,840 --> 00:20:43,840
um digging through this registry part is

465
00:20:41,679 --> 00:20:47,280
not for everyone

466
00:20:43,840 --> 00:20:50,158
so i will run right here

467
00:20:47,280 --> 00:20:52,639
after some time it will spit the output

468
00:20:50,159 --> 00:20:57,679
into two grid views one will provide

469
00:20:52,640 --> 00:20:59,760
um sddls for permissions and another one

470
00:20:57,679 --> 00:21:02,880
will try to

471
00:20:59,760 --> 00:21:05,600
provide acls into a bit more human

472
00:21:02,880 --> 00:21:05,600
readable form

473
00:21:06,400 --> 00:21:10,080
here you can see those here you can see

474
00:21:09,039 --> 00:21:13,120
one guide with

475
00:21:10,080 --> 00:21:14,799
couple of entries specifying what is

476
00:21:13,120 --> 00:21:16,719
allowed for the system local service

477
00:21:14,799 --> 00:21:19,039
administrators and user and so on for

478
00:21:16,720 --> 00:21:22,480
every single provider being

479
00:21:19,039 --> 00:21:25,679
listed there we have this um

480
00:21:22,480 --> 00:21:27,600
set over here those are not decrypted by

481
00:21:25,679 --> 00:21:30,799
my script for some reason i

482
00:21:27,600 --> 00:21:32,158
i have no idea why i didn't spot this

483
00:21:30,799 --> 00:21:35,520
previously but

484
00:21:32,159 --> 00:21:39,120
it happens probably requires some

485
00:21:35,520 --> 00:21:42,000
reading what those flags actually

486
00:21:39,120 --> 00:21:43,760
mean and here you can see the same stuff

487
00:21:42,000 --> 00:21:46,320
within sddl form

488
00:21:43,760 --> 00:21:47,840
which is way more readable for someone

489
00:21:46,320 --> 00:21:51,280
used to it

490
00:21:47,840 --> 00:21:52,799
specifying one provider and then one set

491
00:21:51,280 --> 00:21:56,960
of permissions

492
00:21:52,799 --> 00:22:00,639
cc for authenticated users this

493
00:21:56,960 --> 00:22:02,960
mask for local system local service

494
00:22:00,640 --> 00:22:04,799
network service built in admins and so

495
00:22:02,960 --> 00:22:08,000
on and so on is about

496
00:22:04,799 --> 00:22:11,120
sddl syntax so we can

497
00:22:08,000 --> 00:22:14,480
play with permissions for etw providers

498
00:22:11,120 --> 00:22:16,000
who can read those who can write into

499
00:22:14,480 --> 00:22:19,200
those

500
00:22:16,000 --> 00:22:22,640
through those providers etc

501
00:22:19,200 --> 00:22:25,679
as sometimes pretty sensitive

502
00:22:22,640 --> 00:22:29,520
stuff is transferred over there so

503
00:22:25,679 --> 00:22:32,320
usually it is for

504
00:22:29,520 --> 00:22:34,240
only for admins to be to be read under

505
00:22:32,320 --> 00:22:36,158
um

506
00:22:34,240 --> 00:22:37,840
normal conditions within the normally

507
00:22:36,159 --> 00:22:41,760
installed

508
00:22:37,840 --> 00:22:44,959
operating system interesting thing is

509
00:22:41,760 --> 00:22:48,080
there is there's something to play with

510
00:22:44,960 --> 00:22:51,440
because it is mostly about comb-based

511
00:22:48,080 --> 00:22:51,439
application there is a

512
00:22:53,600 --> 00:23:00,399
system uh environment uh variable

513
00:22:57,280 --> 00:23:03,918
i'm thinking how to show it to you

514
00:23:00,400 --> 00:23:07,919
um it it would be good to you can play

515
00:23:03,919 --> 00:23:09,840
with this on your own with the um

516
00:23:07,919 --> 00:23:12,080
process explorer for example

517
00:23:09,840 --> 00:23:12,959
because if you start powershell you will

518
00:23:12,080 --> 00:23:16,399
see some

519
00:23:12,960 --> 00:23:18,480
dotnet details within the on the

520
00:23:16,400 --> 00:23:20,240
tabs of the process explorer details of

521
00:23:18,480 --> 00:23:23,840
the of the process

522
00:23:20,240 --> 00:23:25,919
if you set a special

523
00:23:23,840 --> 00:23:26,879
not so long time discovered by adam

524
00:23:25,919 --> 00:23:30,240
chester

525
00:23:26,880 --> 00:23:33,840
um environment variable

526
00:23:30,240 --> 00:23:38,320
com plus and

527
00:23:33,840 --> 00:23:38,320
underscore etw enable

528
00:23:38,880 --> 00:23:46,400
a command 0

529
00:23:42,400 --> 00:23:50,559
right now i set this variable within the

530
00:23:46,400 --> 00:23:53,200
cmd and if i run run powershell

531
00:23:50,559 --> 00:23:53,200
from here

532
00:23:54,240 --> 00:23:58,799
it will inherit i'm within the

533
00:23:57,440 --> 00:24:01,760
powershell

534
00:23:58,799 --> 00:24:04,240
but it inherits the environment from the

535
00:24:01,760 --> 00:24:06,960
parent process

536
00:24:04,240 --> 00:24:06,960
which means

537
00:24:08,240 --> 00:24:16,640
which means etw

538
00:24:12,400 --> 00:24:16,640
is somehow blind within this

539
00:24:16,840 --> 00:24:23,918
process uh maybe not this one i will

540
00:24:20,799 --> 00:24:23,918
try to launch

541
00:24:24,240 --> 00:24:28,880
live asus internals.com

542
00:24:27,610 --> 00:24:33,039
[Music]

543
00:24:28,880 --> 00:24:35,120
demonstrate it to you

544
00:24:33,039 --> 00:24:37,279
oh come on this is what i'm doing when

545
00:24:35,120 --> 00:24:40,320
i'm

546
00:24:37,279 --> 00:24:44,000
at um

547
00:24:40,320 --> 00:24:46,720
i think um and

548
00:24:44,000 --> 00:24:48,240
process explorer is the thing i would

549
00:24:46,720 --> 00:24:53,200
like to launch

550
00:24:48,240 --> 00:24:53,200
so process run

551
00:24:53,600 --> 00:24:57,199
i can switch it to

552
00:24:59,600 --> 00:25:04,000
of course i have to agree i never did

553
00:25:01,919 --> 00:25:07,919
before on this machine

554
00:25:04,000 --> 00:25:07,919
i will switch it to um

555
00:25:08,640 --> 00:25:14,880
admin token and

556
00:25:11,760 --> 00:25:15,840
if i try to find the powershell right

557
00:25:14,880 --> 00:25:19,120
now

558
00:25:15,840 --> 00:25:23,439
i can use this one for example and

559
00:25:19,120 --> 00:25:26,959
um powershell is the child process

560
00:25:23,440 --> 00:25:30,559
i'm curious which one i will

561
00:25:26,960 --> 00:25:33,279
close this one to make it simpler

562
00:25:30,559 --> 00:25:34,399
and this powershell finally i'm here you

563
00:25:33,279 --> 00:25:37,760
can see

564
00:25:34,400 --> 00:25:41,360
um here you can see

565
00:25:37,760 --> 00:25:46,200
no information if i'm right it is

566
00:25:41,360 --> 00:25:47,279
blind uh this way uh if i do the same

567
00:25:46,200 --> 00:25:50,720
[Music]

568
00:25:47,279 --> 00:25:52,080
without this variable i will obtain more

569
00:25:50,720 --> 00:25:54,559
information so

570
00:25:52,080 --> 00:25:57,120
you can see absolutely nothing within

571
00:25:54,559 --> 00:26:01,760
net assemblies for the powershell

572
00:25:57,120 --> 00:26:06,559
exit um i will set this to nothing

573
00:26:01,760 --> 00:26:08,720
run powershell again go again here

574
00:26:06,559 --> 00:26:10,240
go to powershell and within.net

575
00:26:08,720 --> 00:26:13,200
assemblies i can see because those are

576
00:26:10,240 --> 00:26:16,240
reported to um

577
00:26:13,200 --> 00:26:18,480
to process explorer

578
00:26:16,240 --> 00:26:21,039
with etw if you are just listening to

579
00:26:18,480 --> 00:26:25,039
etw you will see the similar effect

580
00:26:21,039 --> 00:26:29,600
it will be nothing coming out of

581
00:26:25,039 --> 00:26:32,720
here the question i can see

582
00:26:29,600 --> 00:26:35,918
is can i

583
00:26:32,720 --> 00:26:39,279
modify logging providers customers with

584
00:26:35,919 --> 00:26:39,679
some api yes there is a published mp api

585
00:26:39,279 --> 00:26:42,320
for

586
00:26:39,679 --> 00:26:43,919
this you can register for events you

587
00:26:42,320 --> 00:26:47,600
cannot

588
00:26:43,919 --> 00:26:47,919
modify what some provider is reporting

589
00:26:47,600 --> 00:26:50,000
as

590
00:26:47,919 --> 00:26:51,440
is just throwing the data into the the

591
00:26:50,000 --> 00:26:53,919
engine

592
00:26:51,440 --> 00:26:55,679
but you can register your own stuff

593
00:26:53,919 --> 00:26:56,400
asking for the particular stuff and so

594
00:26:55,679 --> 00:26:59,440
on

595
00:26:56,400 --> 00:27:02,320
and i hope it answers your

596
00:26:59,440 --> 00:27:03,039
question at least partially some of the

597
00:27:02,320 --> 00:27:07,039
stuff

598
00:27:03,039 --> 00:27:10,158
within the api is not really

599
00:27:07,039 --> 00:27:13,600
documented i will show you one of those

600
00:27:10,159 --> 00:27:18,480
in a second which data is coming

601
00:27:13,600 --> 00:27:18,480
out of of those providers

602
00:27:19,440 --> 00:27:23,720
there is a lot of information coming

603
00:27:21,360 --> 00:27:26,799
from different components of the

604
00:27:23,720 --> 00:27:28,880
windows operating system uh

605
00:27:26,799 --> 00:27:30,639
some of those related to hard disk drive

606
00:27:28,880 --> 00:27:34,559
some others there is a provider

607
00:27:30,640 --> 00:27:35,440
responsible for reporting to etw every

608
00:27:34,559 --> 00:27:38,000
single

609
00:27:35,440 --> 00:27:39,520
it turned ethernet frame going through

610
00:27:38,000 --> 00:27:43,200
the network interface so

611
00:27:39,520 --> 00:27:43,840
epw has a built-in sniffer maybe not etw

612
00:27:43,200 --> 00:27:46,880
itself but

613
00:27:43,840 --> 00:27:49,600
there is a provider acting constantly as

614
00:27:46,880 --> 00:27:51,520
a sniffer and the only thing to do is to

615
00:27:49,600 --> 00:27:54,719
listen to it

616
00:27:51,520 --> 00:27:56,080
and you will have the sniffer

617
00:27:54,720 --> 00:27:57,919
up and running within the operating

618
00:27:56,080 --> 00:28:00,158
system using only built-in stuff

619
00:27:57,919 --> 00:28:02,080
right now we have yet another sniffer

620
00:28:00,159 --> 00:28:04,159
built into the operating system but in

621
00:28:02,080 --> 00:28:07,360
the past it was an option

622
00:28:04,159 --> 00:28:10,559
we have win inet which is quite often

623
00:28:07,360 --> 00:28:11,439
demonstrated when inet provider is the

624
00:28:10,559 --> 00:28:15,520
one

625
00:28:11,440 --> 00:28:18,559
responsible for throwing the data

626
00:28:15,520 --> 00:28:20,639
to the ssl tunnel so if

627
00:28:18,559 --> 00:28:22,240
your web page is trying to send

628
00:28:20,640 --> 00:28:26,080
something through https

629
00:28:22,240 --> 00:28:27,600
uh in our encrypted way you can sniff to

630
00:28:26,080 --> 00:28:30,320
it through etw

631
00:28:27,600 --> 00:28:32,639
before it goes into the tunnel which

632
00:28:30,320 --> 00:28:36,399
means you will obtain a clear text

633
00:28:32,640 --> 00:28:39,440
sniffing for the https transmission

634
00:28:36,399 --> 00:28:40,799
yet another example before i start my

635
00:28:39,440 --> 00:28:44,000
own

636
00:28:40,799 --> 00:28:47,679
is sniffing to usb

637
00:28:44,000 --> 00:28:48,880
because we have some sniffers related to

638
00:28:47,679 --> 00:28:52,320
usb

639
00:28:48,880 --> 00:28:55,520
buses which means we can

640
00:28:52,320 --> 00:28:59,279
listen to all messages going through usb

641
00:28:55,520 --> 00:29:02,559
and nowadays most of keyboards keyboards

642
00:28:59,279 --> 00:29:04,640
is connected through usb

643
00:29:02,559 --> 00:29:06,399
which means we have the data entered on

644
00:29:04,640 --> 00:29:10,240
turkey board i can see the question

645
00:29:06,399 --> 00:29:12,239
on the chat do we need admin rights to

646
00:29:10,240 --> 00:29:15,120
sniff using etw

647
00:29:12,240 --> 00:29:17,440
generally saying yes but we can

648
00:29:15,120 --> 00:29:18,879
manipulate somehow permissions for the

649
00:29:17,440 --> 00:29:22,159
etw providers

650
00:29:18,880 --> 00:29:24,960
as i demonstrated with registry with

651
00:29:22,159 --> 00:29:26,159
security descriptors and uh the script

652
00:29:24,960 --> 00:29:29,440
this uh

653
00:29:26,159 --> 00:29:30,000
somehow uh decoding it but generally

654
00:29:29,440 --> 00:29:32,640
saying

655
00:29:30,000 --> 00:29:34,480
it is a stuff for admin mainly due to

656
00:29:32,640 --> 00:29:37,840
the sensitivity of the

657
00:29:34,480 --> 00:29:41,840
data going there um my

658
00:29:37,840 --> 00:29:45,760
uh demonstration about

659
00:29:41,840 --> 00:29:51,760
about etw some something i

660
00:29:45,760 --> 00:29:51,760
played with i i found is related to

661
00:29:52,480 --> 00:29:55,919
one of those providers we have it is a

662
00:29:55,360 --> 00:30:01,520
log

663
00:29:55,919 --> 00:30:05,200
man query providers

664
00:30:01,520 --> 00:30:09,120
and the one is microsoft

665
00:30:05,200 --> 00:30:11,919
windows oh sk

666
00:30:09,120 --> 00:30:12,799
and we have such provider you can see it

667
00:30:11,919 --> 00:30:16,480
is relatively

668
00:30:12,799 --> 00:30:19,679
um small when it comes to

669
00:30:16,480 --> 00:30:20,159
granularity of the data you can try to

670
00:30:19,679 --> 00:30:23,760
guess

671
00:30:20,159 --> 00:30:28,559
what is osk i will

672
00:30:23,760 --> 00:30:28,559
start and this is how we do

673
00:30:30,720 --> 00:30:34,880
how we register for storing the stuff

674
00:30:33,679 --> 00:30:38,320
from the etw

675
00:30:34,880 --> 00:30:41,039
using command line so

676
00:30:38,320 --> 00:30:41,600
i will leave the name and the syntax is

677
00:30:41,039 --> 00:30:44,399
first

678
00:30:41,600 --> 00:30:45,760
is coming the name log man i will name

679
00:30:44,399 --> 00:30:48,639
the session

680
00:30:45,760 --> 00:30:50,640
osk i will use my new sp provider

681
00:30:48,640 --> 00:30:53,679
microsoft windows osk

682
00:30:50,640 --> 00:30:56,880
i will use minus o for

683
00:30:53,679 --> 00:31:01,440
output i will use a root osk

684
00:30:56,880 --> 00:31:04,000
pl etl is traditionally used for

685
00:31:01,440 --> 00:31:05,600
storing the data coming from traces

686
00:31:04,000 --> 00:31:08,559
especially for

687
00:31:05,600 --> 00:31:09,918
etw and i will issue important part of

688
00:31:08,559 --> 00:31:13,279
it which is ets

689
00:31:09,919 --> 00:31:17,600
which means please do it right

690
00:31:13,279 --> 00:31:23,360
now and with

691
00:31:17,600 --> 00:31:23,360
with what i did log man start

692
00:31:23,519 --> 00:31:30,320
uh so now it started now it uh

693
00:31:26,559 --> 00:31:33,120
works i finally launched osk

694
00:31:30,320 --> 00:31:33,760
if you have no idea what is osk you can

695
00:31:33,120 --> 00:31:36,959
see it

696
00:31:33,760 --> 00:31:40,320
right now it is on-screen keyboard

697
00:31:36,960 --> 00:31:45,039
and i will press some keys like

698
00:31:40,320 --> 00:31:45,039
x 3 3 f

699
00:31:45,200 --> 00:31:50,480
con and enter

700
00:31:48,559 --> 00:31:53,918
of course it went here it is not

701
00:31:50,480 --> 00:31:53,919
recognized i can close that

702
00:31:54,720 --> 00:31:57,919
on screen keyboard it would be great to

703
00:31:57,360 --> 00:32:02,559
stop

704
00:31:57,919 --> 00:32:07,919
the the session registering

705
00:32:02,559 --> 00:32:11,360
events into the etl file so log man

706
00:32:07,919 --> 00:32:15,840
log man stop osk

707
00:32:11,360 --> 00:32:15,840
minus ets and

708
00:32:16,720 --> 00:32:22,000
you can see osk etl have some data

709
00:32:19,440 --> 00:32:24,799
collected this file is a binary file

710
00:32:22,000 --> 00:32:26,399
so the thing to be done is uh definitely

711
00:32:24,799 --> 00:32:30,000
to convert it to something

712
00:32:26,399 --> 00:32:31,199
more human readable if if this is what

713
00:32:30,000 --> 00:32:33,519
we want to

714
00:32:31,200 --> 00:32:35,039
do right now there is another built in

715
00:32:33,519 --> 00:32:38,640
windows command

716
00:32:35,039 --> 00:32:41,760
trace rpt choice rpt

717
00:32:38,640 --> 00:32:44,480
and you have to provide os

718
00:32:41,760 --> 00:32:45,679
etl the input file and minus all the

719
00:32:44,480 --> 00:32:49,519
output file

720
00:32:45,679 --> 00:32:53,120
osk xml

721
00:32:49,519 --> 00:32:55,840
and usually we have some errors

722
00:32:53,120 --> 00:32:57,600
we can have some errors it is quite rare

723
00:32:55,840 --> 00:32:57,918
i cannot see any errors here but you

724
00:32:57,600 --> 00:33:01,039
know

725
00:32:57,919 --> 00:33:06,000
that some events were not not not

726
00:33:01,039 --> 00:33:06,000
recognized okay if i do notepad

727
00:33:06,919 --> 00:33:14,159
oskxml you can see messages from

728
00:33:10,960 --> 00:33:18,720
epw from this particular provider being

729
00:33:14,159 --> 00:33:22,480
nicely described in the

730
00:33:18,720 --> 00:33:24,960
xml what i can do i know

731
00:33:22,480 --> 00:33:26,320
there are fields within those properties

732
00:33:24,960 --> 00:33:29,760
within those

733
00:33:26,320 --> 00:33:34,879
dxml files within those messages called

734
00:33:29,760 --> 00:33:38,158
tcid so i do find a str

735
00:33:34,880 --> 00:33:41,600
pc id within the os k

736
00:33:38,159 --> 00:33:45,600
xm xml and i can see

737
00:33:41,600 --> 00:33:48,639
the stuff over here

738
00:33:45,600 --> 00:33:54,399
if i try to

739
00:33:48,640 --> 00:33:59,279
convert those to hex values as those are

740
00:33:54,399 --> 00:33:59,279
decimal values it would be to be

741
00:33:59,360 --> 00:34:07,439
0 4 0 4

742
00:34:03,039 --> 00:34:10,719
3 means to 1 and then

743
00:34:07,440 --> 00:34:15,119
2 e 1 8

744
00:34:10,719 --> 00:34:18,799
and 3 1 and then

745
00:34:15,119 --> 00:34:19,520
the enter key i have pressed as the last

746
00:34:18,800 --> 00:34:22,720
one

747
00:34:19,520 --> 00:34:25,040
and what are

748
00:34:22,719 --> 00:34:25,040
those

749
00:34:26,159 --> 00:34:31,359
it is about how keyboards are working

750
00:34:29,040 --> 00:34:34,879
within the pc

751
00:34:31,359 --> 00:34:39,598
machine because keyboard is not uh

752
00:34:34,879 --> 00:34:39,598
sending asi characters to uh

753
00:34:40,079 --> 00:34:44,639
to the uh hardware but keyboard is

754
00:34:43,359 --> 00:34:49,359
sending so-called

755
00:34:44,639 --> 00:34:53,200
so-called uh scan codes

756
00:34:49,359 --> 00:34:57,598
so you can find a list of scan codes

757
00:34:53,199 --> 00:35:00,960
wherever over the internet control f

758
00:34:57,599 --> 00:35:04,079
2d was x

759
00:35:00,960 --> 00:35:08,079
then 0 4 it was 3

760
00:35:04,079 --> 00:35:11,359
twice then 2 1

761
00:35:08,079 --> 00:35:15,200
f and what the surprise to e for

762
00:35:11,359 --> 00:35:18,960
c and 1 8

763
00:35:15,200 --> 00:35:22,319
for o and three one all hex

764
00:35:18,960 --> 00:35:24,480
for n i do not like seeing scan codes in

765
00:35:22,320 --> 00:35:27,839
the decimal form but you have those

766
00:35:24,480 --> 00:35:29,760
so you can try to sniff

767
00:35:27,839 --> 00:35:32,960
the on-screen keyboard which is

768
00:35:29,760 --> 00:35:36,160
sometimes used as a kind of a security

769
00:35:32,960 --> 00:35:38,560
improvement please use your on-screen

770
00:35:36,160 --> 00:35:39,118
keyboard to do not allow others to cv

771
00:35:38,560 --> 00:35:42,160
whatever

772
00:35:39,119 --> 00:35:47,760
well it depends where you try to sleep

773
00:35:42,160 --> 00:35:52,799
okay i will go to the command chrome

774
00:35:47,760 --> 00:35:52,800
cls i will make it bigger uh

775
00:35:53,200 --> 00:35:57,598
priv uh i'm a regular user with a

776
00:35:55,760 --> 00:36:01,680
limited token not

777
00:35:57,599 --> 00:36:03,200
not elevated and

778
00:36:01,680 --> 00:36:06,160
windows is not activated not the

779
00:36:03,200 --> 00:36:10,879
surprise as i have installed it today

780
00:36:06,160 --> 00:36:14,480
um and um i will try to start

781
00:36:10,880 --> 00:36:17,599
one of the services uh

782
00:36:14,480 --> 00:36:19,520
let's start s vc

783
00:36:17,599 --> 00:36:21,359
there is a service for reporting errors

784
00:36:19,520 --> 00:36:24,480
windows reporting services

785
00:36:21,359 --> 00:36:27,200
as a regular user i obtain

786
00:36:24,480 --> 00:36:29,040
error five which is access denied if i

787
00:36:27,200 --> 00:36:32,319
go as an admin

788
00:36:29,040 --> 00:36:33,759
um i can try to verify why i

789
00:36:32,320 --> 00:36:35,599
have access denied which is not a big

790
00:36:33,760 --> 00:36:41,359
surprise but i can do this with

791
00:36:35,599 --> 00:36:43,440
sc as the show uh as we see

792
00:36:41,359 --> 00:36:44,400
here you can see sdbl again for a reason

793
00:36:43,440 --> 00:36:48,480
you can see

794
00:36:44,400 --> 00:36:51,839
um in you can see

795
00:36:48,480 --> 00:36:54,400
regular users here use for

796
00:36:51,839 --> 00:36:55,279
everyone this is for local system built

797
00:36:54,400 --> 00:36:59,119
in admins

798
00:36:55,280 --> 00:37:02,960
the key here is our pwp

799
00:36:59,119 --> 00:37:04,960
on the sddl meaning who can

800
00:37:02,960 --> 00:37:06,720
uh start and stop the service and

801
00:37:04,960 --> 00:37:10,240
regular users usually cannot

802
00:37:06,720 --> 00:37:12,560
start the service so if i

803
00:37:10,240 --> 00:37:13,598
dig deeper into this service i can

804
00:37:12,560 --> 00:37:19,359
display something

805
00:37:13,599 --> 00:37:22,800
called triggers scq trigger info

806
00:37:19,359 --> 00:37:26,480
w here as we see and you can see

807
00:37:22,800 --> 00:37:30,240
this particular service will start

808
00:37:26,480 --> 00:37:33,520
when receiving an etw message

809
00:37:30,240 --> 00:37:36,879
with this provider because services can

810
00:37:33,520 --> 00:37:39,839
start on message being

811
00:37:36,880 --> 00:37:41,200
services can be triggered with a message

812
00:37:39,839 --> 00:37:44,000
and the interesting thing

813
00:37:41,200 --> 00:37:44,879
is i'm not allowed to start a service as

814
00:37:44,000 --> 00:37:48,400
a user

815
00:37:44,880 --> 00:37:52,160
this particular one by i'm

816
00:37:48,400 --> 00:37:56,280
perfectly allowed to send this message

817
00:37:52,160 --> 00:37:58,960
sc query

818
00:37:56,280 --> 00:38:02,800
wlvc

819
00:37:58,960 --> 00:38:05,839
the service is stopped and

820
00:38:02,800 --> 00:38:05,839
using my

821
00:38:05,920 --> 00:38:08,480
tiny

822
00:38:12,000 --> 00:38:16,800
application i can send the w message and

823
00:38:15,280 --> 00:38:18,960
hopefully i will see

824
00:38:16,800 --> 00:38:21,040
it is running right now i have no

825
00:38:18,960 --> 00:38:23,599
permission to send a start command but i

826
00:38:21,040 --> 00:38:25,119
have permission to send an etw message

827
00:38:23,599 --> 00:38:27,359
and this particular service is

828
00:38:25,119 --> 00:38:30,000
configured in a way

829
00:38:27,359 --> 00:38:30,880
making it making actually servicemen

830
00:38:30,000 --> 00:38:34,079
manager

831
00:38:30,880 --> 00:38:36,560
react on this message i'm

832
00:38:34,079 --> 00:38:38,800
sharing the code for this it is

833
00:38:36,560 --> 00:38:42,960
relatively

834
00:38:38,800 --> 00:38:47,920
simple with the only thing here

835
00:38:42,960 --> 00:38:52,480
i'm using etw even right no registration

836
00:38:47,920 --> 00:38:54,960
from the exported by np dll

837
00:38:52,480 --> 00:38:56,000
and the thing here is this function is

838
00:38:54,960 --> 00:38:59,359
not documented

839
00:38:56,000 --> 00:39:00,000
because because of microsoft but you can

840
00:38:59,359 --> 00:39:03,279
use it

841
00:39:00,000 --> 00:39:06,480
and it works i'm sharing the code so

842
00:39:03,280 --> 00:39:09,680
uh it is not very hard to

843
00:39:06,480 --> 00:39:10,960
uh follow me somehow okay let's go

844
00:39:09,680 --> 00:39:13,440
further

845
00:39:10,960 --> 00:39:14,560
here you can see the list of uh the

846
00:39:13,440 --> 00:39:17,680
stuff

847
00:39:14,560 --> 00:39:19,680
being helpful so you have to win those

848
00:39:17,680 --> 00:39:20,640
commands logman and tracerpt you have a

849
00:39:19,680 --> 00:39:23,279
chance to

850
00:39:20,640 --> 00:39:25,359
see those during our session microsoft

851
00:39:23,280 --> 00:39:27,680
is also providing message analyzer

852
00:39:25,359 --> 00:39:30,000
well i'm used to say the message

853
00:39:27,680 --> 00:39:32,720
analyzer for a reason starts

854
00:39:30,000 --> 00:39:35,359
starts with a mess i do not like this

855
00:39:32,720 --> 00:39:38,319
application it's definitely too heavy to

856
00:39:35,359 --> 00:39:40,880
sniff utw but it can do this there is a

857
00:39:38,320 --> 00:39:44,079
trace view within sdk wdk

858
00:39:40,880 --> 00:39:46,480
so download from microsoft

859
00:39:44,079 --> 00:39:47,839
it is not always working fingers crossed

860
00:39:46,480 --> 00:39:51,040
for you

861
00:39:47,839 --> 00:39:54,960
and some third party stuff silkytw

862
00:39:51,040 --> 00:39:57,680
by fireeye it is a dotnet wrapper for

863
00:39:54,960 --> 00:39:59,040
etw so if you are more dotnet people you

864
00:39:57,680 --> 00:40:02,240
can try to

865
00:39:59,040 --> 00:40:02,880
run this way there is etw explorer made

866
00:40:02,240 --> 00:40:05,439
by

867
00:40:02,880 --> 00:40:07,440
pavel yosefovich the co author of the

868
00:40:05,440 --> 00:40:08,800
latest edition of the windows internals

869
00:40:07,440 --> 00:40:11,440
book

870
00:40:08,800 --> 00:40:13,200
so etw explorer allows you to browse

871
00:40:11,440 --> 00:40:15,200
through etw providers

872
00:40:13,200 --> 00:40:16,240
using graphical interface if you really

873
00:40:15,200 --> 00:40:18,879
do not like

874
00:40:16,240 --> 00:40:21,759
command line for some reason uh power

875
00:40:18,880 --> 00:40:21,760
crops etw

876
00:40:22,079 --> 00:40:28,960
open source on github by zac brown

877
00:40:25,920 --> 00:40:32,319
is a wrapper for etw to powershell

878
00:40:28,960 --> 00:40:34,560
to allow you directly manipulate

879
00:40:32,319 --> 00:40:36,000
with etw using powershell which may be

880
00:40:34,560 --> 00:40:39,119
somehow

881
00:40:36,000 --> 00:40:39,599
beneficial wind shark is made by airbus

882
00:40:39,119 --> 00:40:43,520
cert

883
00:40:39,599 --> 00:40:46,560
and it is about this airbus

884
00:40:43,520 --> 00:40:49,359
it's about their response team

885
00:40:46,560 --> 00:40:50,160
within airbus and windshark is a plug-in

886
00:40:49,359 --> 00:40:53,440
to wire

887
00:40:50,160 --> 00:40:56,000
shark where you can can configure

888
00:40:53,440 --> 00:40:58,079
etw providers and those will appear

889
00:40:56,000 --> 00:41:00,560
within the wireshark uh as

890
00:40:58,079 --> 00:41:01,280
uh some data coming to wireshark it may

891
00:41:00,560 --> 00:41:04,560
be the

892
00:41:01,280 --> 00:41:08,880
the interface the querying the whatever

893
00:41:04,560 --> 00:41:10,319
uh or the format of files etc may be

894
00:41:08,880 --> 00:41:13,839
more friendly for some

895
00:41:10,319 --> 00:41:14,720
of users using wireshark on a regular

896
00:41:13,839 --> 00:41:18,240
basis

897
00:41:14,720 --> 00:41:20,640
and there is also github repository

898
00:41:18,240 --> 00:41:23,118
i'm trying to maintain it is not only

899
00:41:20,640 --> 00:41:25,839
about etw but some etw

900
00:41:23,119 --> 00:41:27,440
may happen there if you try to search

901
00:41:25,839 --> 00:41:31,279
for etw you will find

902
00:41:27,440 --> 00:41:34,480
uh the stuff for sure

903
00:41:31,280 --> 00:41:37,920
and that's basically it i tried to make

904
00:41:34,480 --> 00:41:41,119
you a crash course against etw

905
00:41:37,920 --> 00:41:44,560
my idea was to

906
00:41:41,119 --> 00:41:45,920
make you willing to play with it because

907
00:41:44,560 --> 00:41:49,040
the rest is on your own

908
00:41:45,920 --> 00:41:51,040
probably the audience is still

909
00:41:49,040 --> 00:41:53,520
very different probably have some

910
00:41:51,040 --> 00:41:55,359
developers red team bluetooth and so on

911
00:41:53,520 --> 00:41:57,680
so there is no one session useful for

912
00:41:55,359 --> 00:41:59,839
everyone and it's the same about the

913
00:41:57,680 --> 00:42:02,000
level of

914
00:41:59,839 --> 00:42:04,160
your knowledge of the etw and operating

915
00:42:02,000 --> 00:42:04,880
system some of you are just admin some

916
00:42:04,160 --> 00:42:07,920
of those

917
00:42:04,880 --> 00:42:08,640
some of you are kernel developers and

918
00:42:07,920 --> 00:42:10,960
for sure

919
00:42:08,640 --> 00:42:12,480
a different part of the entire scope

920
00:42:10,960 --> 00:42:16,400
will be interesting for you

921
00:42:12,480 --> 00:42:20,319
but i tried to provide you

922
00:42:16,400 --> 00:42:23,440
kind of the door into the etw world

923
00:42:20,319 --> 00:42:26,000
and now it is on you and

924
00:42:23,440 --> 00:42:26,560
on your responsibility thank you very

925
00:42:26,000 --> 00:42:31,839
much

926
00:42:26,560 --> 00:42:31,839
and hopefully see you soon

