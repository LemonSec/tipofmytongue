1
00:00:01,150 --> 00:00:04,330
[Applause]

2
00:00:10,040 --> 00:00:16,560
<font color="#E5E5E5">okay so that was my hometown</font><font color="#CCCCCC"> so you all</font>

3
00:00:14,759 --> 00:00:17,940
<font color="#E5E5E5">get</font><font color="#CCCCCC"> a welcome</font><font color="#E5E5E5"> if you had around drop me</font>

4
00:00:16,560 --> 00:00:22,140
a note I<font color="#E5E5E5"> would love to show you a rock</font>

5
00:00:17,940 --> 00:00:28,080
now<font color="#CCCCCC"> oh yeah we have a security</font>

6
00:00:22,140 --> 00:00:31,109
<font color="#CCCCCC">conference</font><font color="#E5E5E5"> there so</font><font color="#CCCCCC"> uh actually the</font><font color="#E5E5E5"> CFCs</font>

7
00:00:28,080 --> 00:00:36,329
<font color="#CCCCCC">was just opened so you could just</font><font color="#E5E5E5"> type C</font>

8
00:00:31,109 --> 00:00:38,610
0 C 0<font color="#E5E5E5"> n yeah so okay</font><font color="#CCCCCC"> I could give you</font>

9
00:00:36,329 --> 00:00:41,610
more info if you hit me<font color="#E5E5E5"> up later that</font>

10
00:00:38,610 --> 00:00:46,530
after the<font color="#E5E5E5"> doc all</font><font color="#CCCCCC"> right so now let's get</font>

11
00:00:41,610 --> 00:00:49,350
<font color="#E5E5E5">started all right all right</font><font color="#CCCCCC"> my name is</font>

12
00:00:46,530 --> 00:00:52,110
<font color="#CCCCCC">Andrew Joseph I am a security engineer</font>

13
00:00:49,350 --> 00:00:54,930
<font color="#E5E5E5">at Intel and I have been a speaker and</font>

14
00:00:52,110 --> 00:00:57,030
trainer at<font color="#CCCCCC"> this</font><font color="#E5E5E5"> conferences</font>

15
00:00:54,930 --> 00:00:59,280
my current interest include machine

16
00:00:57,030 --> 00:01:03,930
learning program analysis and mobile

17
00:00:59,280 --> 00:01:08,280
security<font color="#E5E5E5"> so today we</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> talking</font><font color="#CCCCCC"> about</font>

18
00:01:03,930 --> 00:01:10,409
<font color="#E5E5E5">symbolic execution</font><font color="#CCCCCC"> have any of you tried</font>

19
00:01:08,280 --> 00:01:13,200
<font color="#E5E5E5">doing anything related to symbolic</font>

20
00:01:10,409 --> 00:01:18,049
execution<font color="#E5E5E5"> here I see a hand okay</font><font color="#CCCCCC"> that's</font>

21
00:01:13,200 --> 00:01:20,790
it<font color="#CCCCCC"> all right</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> to people all right</font>

22
00:01:18,049 --> 00:01:22,979
I'm sure<font color="#CCCCCC"> you guys have heard</font><font color="#E5E5E5"> about the</font>

23
00:01:20,790 --> 00:01:24,090
fiber<font color="#CCCCCC"> grand challenge right more people</font>

24
00:01:22,979 --> 00:01:27,810
here<font color="#E5E5E5"> I guess</font>

25
00:01:24,090 --> 00:01:31,009
oh yes okay so it's the<font color="#E5E5E5"> worst first all</font>

26
00:01:27,810 --> 00:01:35,369
machine hacking tournament so

27
00:01:31,009 --> 00:01:38,299
exploitation<font color="#E5E5E5"> mainly used to be a manual</font>

28
00:01:35,369 --> 00:01:42,030
<font color="#E5E5E5">task</font><font color="#CCCCCC"> I like finding a rope chain</font>

29
00:01:38,299 --> 00:01:45,509
<font color="#E5E5E5">exploiting a binary the way you do a CDF</font>

30
00:01:42,030 --> 00:01:48,180
it's mostly done<font color="#E5E5E5"> by</font><font color="#CCCCCC"> human the fiber</font>

31
00:01:45,509 --> 00:01:51,119
<font color="#E5E5E5">Grand Challenge proposed this idea of</font>

32
00:01:48,180 --> 00:01:53,909
machines<font color="#CCCCCC"> doing this and this happened at</font>

33
00:01:51,119 --> 00:01:55,619
Def Con<font color="#E5E5E5"> last year I was there and I was</font>

34
00:01:53,909 --> 00:01:59,579
<font color="#E5E5E5">really</font><font color="#CCCCCC"> happy to</font><font color="#E5E5E5"> see</font><font color="#CCCCCC"> that happening</font><font color="#E5E5E5"> and</font>

35
00:01:55,619 --> 00:02:02,670
one of the teams in<font color="#CCCCCC"> the competition the</font>

36
00:01:59,579 --> 00:02:03,089
<font color="#E5E5E5">self-esteem</font><font color="#CCCCCC"> open sourced one of their</font>

37
00:02:02,670 --> 00:02:06,990
tools

38
00:02:03,090 --> 00:02:09,810
it's called anger and one of the main

39
00:02:06,990 --> 00:02:11,819
components<font color="#E5E5E5"> of anger is symbolic</font>

40
00:02:09,810 --> 00:02:13,860
execution<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> not the only component</font>

41
00:02:11,819 --> 00:02:17,280
<font color="#E5E5E5">but it it is one of</font><font color="#CCCCCC"> the main</font>

42
00:02:13,860 --> 00:02:20,670
and I want<font color="#E5E5E5"> to discuss what symbolic</font>

43
00:02:17,280 --> 00:02:24,060
execution<font color="#CCCCCC"> can do in vulnerability</font>

44
00:02:20,670 --> 00:02:27,839
research how can it better help us to do

45
00:02:24,060 --> 00:02:31,350
good stuff<font color="#E5E5E5"> fine</font><font color="#CCCCCC"> bucks</font><font color="#E5E5E5"> that's what I</font>

46
00:02:27,840 --> 00:02:35,820
meant<font color="#E5E5E5"> by good stuff okay</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> this is a</font>

47
00:02:31,350 --> 00:02:40,260
very simple program<font color="#E5E5E5"> how many of you have</font>

48
00:02:35,820 --> 00:02:43,799
used a<font color="#E5E5E5"> fossil before okay how much long</font>

49
00:02:40,260 --> 00:02:46,200
do you think<font color="#E5E5E5"> fsor would take to hit the</font>

50
00:02:43,800 --> 00:02:48,030
<font color="#E5E5E5">vulnerability over</font><font color="#CCCCCC"> there if this is the</font>

51
00:02:46,200 --> 00:02:52,709
code that<font color="#CCCCCC"> has been</font><font color="#E5E5E5"> compiled and then and</font>

52
00:02:48,030 --> 00:02:56,280
I am<font color="#E5E5E5"> just passing it</font><font color="#CCCCCC"> give it</font><font color="#E5E5E5"> a average</font>

53
00:02:52,709 --> 00:02:58,470
of I<font color="#E5E5E5"> don't know would would a father</font>

54
00:02:56,280 --> 00:03:01,050
figure<font color="#E5E5E5"> out that the first condition has</font>

55
00:02:58,470 --> 00:03:03,990
to be<font color="#CCCCCC"> one two three four for it to</font>

56
00:03:01,050 --> 00:03:06,530
bypass the the first check and<font color="#CCCCCC"> then get</font>

57
00:03:03,990 --> 00:03:09,330
to<font color="#E5E5E5"> the vulnerable endpoint</font>

58
00:03:06,530 --> 00:03:12,060
so today's course off<font color="#E5E5E5"> days are</font><font color="#CCCCCC"> really</font>

59
00:03:09,330 --> 00:03:15,800
complex right we can first all we want

60
00:03:12,060 --> 00:03:18,530
<font color="#CCCCCC">but if we have a simple check then you</font>

61
00:03:15,800 --> 00:03:24,019
<font color="#CCCCCC">might not be</font><font color="#E5E5E5"> hitting the right endpoint</font>

62
00:03:18,530 --> 00:03:31,640
<font color="#E5E5E5">so symbolic execution is is a way</font><font color="#CCCCCC"> of</font>

63
00:03:24,019 --> 00:03:31,640
solving formulas<font color="#CCCCCC"> let me explain it with</font>

64
00:03:34,040 --> 00:03:43,140
an<font color="#E5E5E5"> example like this so let's consider</font>

65
00:03:39,480 --> 00:03:47,130
that this<font color="#CCCCCC"> is a free program and you can</font>

66
00:03:43,140 --> 00:03:53,220
<font color="#CCCCCC">see that we</font><font color="#E5E5E5"> are modeling small equations</font>

67
00:03:47,130 --> 00:03:57,180
and getting<font color="#CCCCCC"> answers towards the end</font><font color="#E5E5E5"> we</font>

68
00:03:53,220 --> 00:04:02,120
are<font color="#E5E5E5"> not concretely inputting any numbers</font>

69
00:03:57,180 --> 00:04:04,890
in<font color="#E5E5E5"> there so let's look at this section</font>

70
00:04:02,120 --> 00:04:11,340
this particular this particular<font color="#E5E5E5"> section</font>

71
00:04:04,890 --> 00:04:15,089
<font color="#E5E5E5">so it says if X is</font><font color="#CCCCCC"> greater</font><font color="#E5E5E5"> than</font><font color="#CCCCCC"> zero</font><font color="#E5E5E5"> its</font>

72
00:04:11,340 --> 00:04:18,478
<font color="#E5E5E5">X has been confirmed as a plus five a</font>

73
00:04:15,090 --> 00:04:22,229
consider a as<font color="#CCCCCC"> a symbolic variable okay</font>

74
00:04:18,478 --> 00:04:24,659
and now it adds another<font color="#E5E5E5"> constraint which</font>

75
00:04:22,229 --> 00:04:26,190
is X should be greater<font color="#E5E5E5"> than zero</font><font color="#CCCCCC"> so they</font>

76
00:04:24,660 --> 00:04:26,770
just say that a plus<font color="#E5E5E5"> five is greater</font>

77
00:04:26,190 --> 00:04:30,160
than the

78
00:04:26,770 --> 00:04:34,000
and be flowers<font color="#E5E5E5"> we travels all</font><font color="#CCCCCC"> the way</font>

79
00:04:30,160 --> 00:04:38,039
and we can<font color="#E5E5E5"> explore all the parts of a</font>

80
00:04:34,000 --> 00:04:41,110
program<font color="#E5E5E5"> this way it does not make</font><font color="#CCCCCC"> sense</font>

81
00:04:38,039 --> 00:04:44,050
so it is instead of<font color="#CCCCCC"> just randomly</font>

82
00:04:41,110 --> 00:04:48,130
<font color="#E5E5E5">fussing if a thing might get you</font>

83
00:04:44,050 --> 00:04:51,190
somewhere like maybe here it's just

84
00:04:48,130 --> 00:04:53,560
arbitrary where you get<font color="#CCCCCC"> while fussing</font>

85
00:04:51,190 --> 00:04:57,400
<font color="#E5E5E5">but with symbolic</font><font color="#CCCCCC"> execution you can</font>

86
00:04:53,560 --> 00:05:01,419
trace all<font color="#E5E5E5"> the branches of a program so</font>

87
00:04:57,400 --> 00:05:03,698
here we can specify which<font color="#CCCCCC"> endpoint</font><font color="#E5E5E5"> we</font>

88
00:05:01,419 --> 00:05:07,448
want to reach and the symbolic<font color="#E5E5E5"> execution</font>

89
00:05:03,699 --> 00:05:11,229
<font color="#E5E5E5">engine can craft a formula something</font>

90
00:05:07,449 --> 00:05:15,340
like this and solve<font color="#E5E5E5"> it for us</font><font color="#CCCCCC"> so what</font>

91
00:05:11,229 --> 00:05:19,030
<font color="#E5E5E5">does that mean so we have symbolic</font>

92
00:05:15,340 --> 00:05:23,080
<font color="#CCCCCC">execution tools and these rely on</font>

93
00:05:19,030 --> 00:05:28,960
<font color="#E5E5E5">something called as SMT solvers</font><font color="#CCCCCC"> z3 is an</font>

94
00:05:23,080 --> 00:05:33,400
very famous symbolic execution<font color="#E5E5E5"> tool that</font>

95
00:05:28,960 --> 00:05:38,138
you could<font color="#CCCCCC"> use to solve</font><font color="#E5E5E5"> symbolic</font>

96
00:05:33,400 --> 00:05:40,409
equations so let me just show you<font color="#E5E5E5"> the</font>

97
00:05:38,139 --> 00:05:40,409
demo

98
00:06:01,410 --> 00:06:04,410
<font color="#E5E5E5">okay</font>

99
00:06:06,860 --> 00:06:12,099
<font color="#E5E5E5">I didn't realize it was not</font><font color="#CCCCCC"> this</font>

100
00:06:34,600 --> 00:06:43,430
if this is another so<font color="#E5E5E5"> z3 as I said</font><font color="#CCCCCC"> if</font>

101
00:06:40,310 --> 00:06:47,180
from<font color="#E5E5E5"> my is from Microsoft</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> it's free</font>

102
00:06:43,430 --> 00:06:50,720
and<font color="#CCCCCC"> it it's an</font><font color="#E5E5E5"> SM it's an SMT solver so</font>

103
00:06:47,180 --> 00:06:55,190
<font color="#CCCCCC">if what</font><font color="#E5E5E5"> I have written right</font><font color="#CCCCCC"> over</font><font color="#E5E5E5"> here</font>

104
00:06:50,720 --> 00:06:58,270
is the SMP language it's<font color="#E5E5E5"> very readable</font>

105
00:06:55,190 --> 00:07:00,800
<font color="#CCCCCC">and it has Python bindings of</font><font color="#E5E5E5"> course</font>

106
00:06:58,270 --> 00:07:03,560
here you<font color="#CCCCCC"> can see that I am</font><font color="#E5E5E5"> trying to</font>

107
00:07:00,800 --> 00:07:06,020
solve a<font color="#E5E5E5"> simple equation the X</font><font color="#CCCCCC"> plus y has</font>

108
00:07:03,560 --> 00:07:07,700
to<font color="#E5E5E5"> be greater than 5 and X has to be</font>

109
00:07:06,020 --> 00:07:10,760
greater<font color="#E5E5E5"> than 1 and Y</font><font color="#CCCCCC"> has to be greater</font>

110
00:07:07,700 --> 00:07:14,630
<font color="#CCCCCC">than</font><font color="#E5E5E5"> 1 so from the earlier diagram</font><font color="#CCCCCC"> you</font>

111
00:07:10,760 --> 00:07:17,780
could get an<font color="#CCCCCC"> idea that something like</font>

112
00:07:14,630 --> 00:07:24,469
this would be<font color="#E5E5E5"> the</font><font color="#CCCCCC"> result of one of the</font>

113
00:07:17,780 --> 00:07:28,809
<font color="#CCCCCC">path of a</font><font color="#E5E5E5"> program execution like if you</font>

114
00:07:24,470 --> 00:07:36,200
consider one path<font color="#E5E5E5"> one path would have</font>

115
00:07:28,810 --> 00:07:39,170
such a a such a constraint<font color="#E5E5E5"> and this</font>

116
00:07:36,200 --> 00:07:42,229
needs to<font color="#E5E5E5"> be solved so this is like a</font>

117
00:07:39,170 --> 00:07:46,250
problem<font color="#E5E5E5"> that should be solved and the</font>

118
00:07:42,230 --> 00:07:48,560
solution will be<font color="#E5E5E5"> the</font><font color="#CCCCCC"> solution will be</font>

119
00:07:46,250 --> 00:07:53,140
<font color="#E5E5E5">your input</font><font color="#CCCCCC"> so that you can reach that</font>

120
00:07:48,560 --> 00:07:53,140
<font color="#CCCCCC">particular</font><font color="#E5E5E5"> end point so let's run this</font>

121
00:07:56,890 --> 00:07:59,890
<font color="#E5E5E5">ok</font>

122
00:08:01,739 --> 00:08:08,919
okay so the felt<font color="#E5E5E5"> they just figured out</font>

123
00:08:05,679 --> 00:08:11,799
<font color="#CCCCCC">the solution which says Y can be 4 and X</font>

124
00:08:08,919 --> 00:08:14,739
is equal<font color="#CCCCCC"> to 2 and it works out all right</font>

125
00:08:11,799 --> 00:08:17,318
so this<font color="#E5E5E5"> is very simple and it</font><font color="#CCCCCC"> works with</font>

126
00:08:14,739 --> 00:08:20,078
<font color="#E5E5E5">type programs like this so how do you</font>

127
00:08:17,319 --> 00:08:24,909
<font color="#E5E5E5">implement something</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> this in</font>

128
00:08:20,079 --> 00:08:27,069
<font color="#E5E5E5">real-world programs so we have mainly</font>

129
00:08:24,909 --> 00:08:29,889
two popular symbolic execution

130
00:08:27,069 --> 00:08:33,629
frameworks one is anger or<font color="#E5E5E5"> scores from</font>

131
00:08:29,889 --> 00:08:36,459
the<font color="#CCCCCC"> shelf extreme and then we have key I</font>

132
00:08:33,629 --> 00:08:39,579
<font color="#E5E5E5">personally have done some</font><font color="#CCCCCC"> work with T</font>

133
00:08:36,458 --> 00:08:42,518
<font color="#E5E5E5">because I use</font><font color="#CCCCCC"> it for some of my projects</font>

134
00:08:39,578 --> 00:08:45,430
so I will give you<font color="#E5E5E5"> some ideas on</font><font color="#CCCCCC"> how to</font>

135
00:08:42,519 --> 00:08:49,120
<font color="#E5E5E5">use</font><font color="#CCCCCC"> clean symbolic virtual machine to</font>

136
00:08:45,430 --> 00:08:55,599
find vulnerabilities<font color="#CCCCCC"> in functions</font><font color="#E5E5E5"> simple</font>

137
00:08:49,120 --> 00:08:58,059
programs<font color="#E5E5E5"> CTF and even</font><font color="#CCCCCC"> volt GNU programs</font>

138
00:08:55,600 --> 00:09:00,189
so it's going<font color="#E5E5E5"> to be a lot</font><font color="#CCCCCC"> of demos and</font>

139
00:08:58,059 --> 00:09:04,930
this<font color="#CCCCCC"> stitch didn't have much love</font>

140
00:09:00,189 --> 00:09:13,559
towards demos<font color="#CCCCCC"> today I'm just gonna try</font>

141
00:09:04,930 --> 00:09:13,559
<font color="#E5E5E5">it out</font><font color="#CCCCCC"> ok so this is a sample program</font>

142
00:09:15,750 --> 00:09:21,300
<font color="#E5E5E5">how many</font><font color="#CCCCCC"> possible outputs does this</font>

143
00:09:18,639 --> 00:09:21,300
program<font color="#E5E5E5"> have</font>

144
00:09:24,760 --> 00:09:41,529
anyone<font color="#E5E5E5"> - see</font><font color="#CCCCCC"> it's a kind of oldest</font>

145
00:09:28,930 --> 00:09:43,779
<font color="#E5E5E5">language yeah Sharples better</font><font color="#CCCCCC"> oh it</font>

146
00:09:41,529 --> 00:09:51,939
<font color="#E5E5E5">just gives a</font>

147
00:09:43,779 --> 00:10:02,970
that's<font color="#E5E5E5"> what</font><font color="#CCCCCC"> what okay</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> Bend out the</font>

148
00:09:51,940 --> 00:10:02,970
directory<font color="#CCCCCC"> the time should be good</font><font color="#E5E5E5"> right</font>

149
00:10:06,060 --> 00:10:10,160
what are the possible outcomes<font color="#CCCCCC"> of this</font>

150
00:10:08,730 --> 00:10:12,840
program

151
00:10:10,160 --> 00:10:23,100
how many outputs does<font color="#E5E5E5"> this program have</font>

152
00:10:12,840 --> 00:10:25,710
as in sorry<font color="#E5E5E5"> okay okay so three</font><font color="#CCCCCC"> pros are</font>

153
00:10:23,100 --> 00:10:29,040
three outputs<font color="#E5E5E5"> right yeah so let's do</font>

154
00:10:25,710 --> 00:10:33,500
this the<font color="#E5E5E5"> cleavage and see if we can you</font>

155
00:10:29,040 --> 00:10:37,589
know let's see how to do it<font color="#CCCCCC"> with click</font>

156
00:10:33,500 --> 00:10:42,360
<font color="#E5E5E5">okay so the first part of doing symbolic</font>

157
00:10:37,590 --> 00:10:45,120
execution using click is to get the LLVM

158
00:10:42,360 --> 00:10:48,330
bit code<font color="#CCCCCC"> how</font><font color="#E5E5E5"> many people are familiar</font>

159
00:10:45,120 --> 00:10:51,450
with<font color="#CCCCCC"> LLVM you alright so it's</font><font color="#E5E5E5"> a compiler</font>

160
00:10:48,330 --> 00:10:54,110
tool shame and it's pretty<font color="#E5E5E5"> good at</font><font color="#CCCCCC"> what</font>

161
00:10:51,450 --> 00:10:57,450
it does<font color="#CCCCCC"> it has very security centric</font>

162
00:10:54,110 --> 00:11:00,240
<font color="#CCCCCC">tools</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> Lib further and all that hi</font>

163
00:10:57,450 --> 00:11:03,570
so I just be you guys explore<font color="#CCCCCC"> it it's a</font>

164
00:11:00,240 --> 00:11:06,600
very<font color="#CCCCCC"> good puzzle</font><font color="#E5E5E5"> and I'm using</font><font color="#CCCCCC"> LLVM so</font>

165
00:11:03,570 --> 00:11:09,390
the LLVM<font color="#CCCCCC"> front-end</font><font color="#E5E5E5"> 4c compilation is</font>

166
00:11:06,600 --> 00:11:13,350
called<font color="#CCCCCC"> feel'n</font><font color="#E5E5E5"> so I will use</font><font color="#CCCCCC"> freelance</font><font color="#E5E5E5"> to</font>

167
00:11:09,390 --> 00:11:15,270
compile this particular C file and gets

168
00:11:13,350 --> 00:11:21,210
the bit code<font color="#CCCCCC"> so this is the bit code</font>

169
00:11:15,270 --> 00:11:26,819
file<font color="#E5E5E5"> get sign under dot</font><font color="#CCCCCC"> BC so so it's</font>

170
00:11:21,210 --> 00:11:29,160
<font color="#CCCCCC">LLVM IR bit code it's not</font><font color="#E5E5E5"> readable there</font>

171
00:11:26,820 --> 00:11:35,610
is a dot ll version that is readable if

172
00:11:29,160 --> 00:11:38,810
you<font color="#CCCCCC"> wanna and I'll just delete these</font>

173
00:11:35,610 --> 00:11:38,810
folders from<font color="#E5E5E5"> the last</font><font color="#CCCCCC"> one</font>

174
00:11:42,300 --> 00:11:44,930
yeah

175
00:11:50,960 --> 00:11:54,920
so this is how you would compile the

176
00:11:54,350 --> 00:11:57,680
program

177
00:11:54,920 --> 00:11:59,510
so all this happens inside the docker

178
00:11:57,680 --> 00:12:00,829
container that I have<font color="#E5E5E5"> so if you guys</font>

179
00:11:59,510 --> 00:12:02,810
want to<font color="#E5E5E5"> try this out later</font>

180
00:12:00,830 --> 00:12:05,600
I<font color="#E5E5E5"> can upload the docker containers</font>

181
00:12:02,810 --> 00:12:07,969
somewhere and then<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> have all</font>

182
00:12:05,600 --> 00:12:09,800
the examples<font color="#E5E5E5"> to yourselves so you can</font>

183
00:12:07,970 --> 00:12:11,180
<font color="#E5E5E5">just do a history on the terminal and</font>

184
00:12:09,800 --> 00:12:18,260
<font color="#CCCCCC">you can get all the comments</font><font color="#E5E5E5"> that I have</font>

185
00:12:11,180 --> 00:12:25,969
typed<font color="#E5E5E5"> it so okay</font><font color="#CCCCCC"> so that generates the</font>

186
00:12:18,260 --> 00:12:32,060
bit<font color="#E5E5E5"> code file now you use CLE to</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> trait</font>

187
00:12:25,970 --> 00:12:34,850
over it and the the simplest<font color="#E5E5E5"> the</font>

188
00:12:32,060 --> 00:12:37,130
<font color="#E5E5E5">symbolic execution solver</font><font color="#CCCCCC"> that clean</font>

189
00:12:34,850 --> 00:12:38,810
internally<font color="#E5E5E5"> uses is called SCP it's</font>

190
00:12:37,130 --> 00:12:41,750
different from centric but that's

191
00:12:38,810 --> 00:12:44,149
something that<font color="#CCCCCC"> CLE uses and you can see</font>

192
00:12:41,750 --> 00:12:47,600
that there<font color="#CCCCCC"> are 31 instructions that were</font>

193
00:12:44,149 --> 00:12:50,149
executed<font color="#CCCCCC"> and the program had three parts</font>

194
00:12:47,600 --> 00:12:52,610
<font color="#E5E5E5">so</font><font color="#CCCCCC"> it figured that if the program has</font>

195
00:12:50,149 --> 00:12:54,709
<font color="#E5E5E5">three parts</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> the best part is it</font>

196
00:12:52,610 --> 00:13:02,360
<font color="#E5E5E5">generates this it generates test cases</font>

197
00:12:54,709 --> 00:13:05,060
for<font color="#E5E5E5"> those three parts</font><font color="#CCCCCC"> so if you see this</font>

198
00:13:02,360 --> 00:13:07,930
these three files are the test cases

199
00:13:05,060 --> 00:13:12,459
<font color="#E5E5E5">that it generated for those three parts</font>

200
00:13:07,930 --> 00:13:12,459
now let's see what's inside there

201
00:13:24,050 --> 00:13:38,089
so that to<font color="#CCCCCC"> zero the one what</font><font color="#E5E5E5"> is this</font>

202
00:13:39,500 --> 00:13:46,170
okay let's just check the run the

203
00:13:42,720 --> 00:13:49,100
program and see<font color="#CCCCCC"> what's the exit status</font>

204
00:13:46,170 --> 00:13:49,099
status

205
00:13:55,460 --> 00:14:10,040
so you can specify<font color="#E5E5E5"> okay</font>

206
00:14:05,730 --> 00:14:17,300
so the first one is a zero as we<font color="#CCCCCC"> sir</font>

207
00:14:10,040 --> 00:14:17,300
said the<font color="#CCCCCC"> second one is a higher</font><font color="#E5E5E5"> number</font>

208
00:14:17,870 --> 00:14:24,120
third number is<font color="#E5E5E5"> a</font><font color="#CCCCCC"> negative number so it</font>

209
00:14:21,660 --> 00:14:27,000
generated<font color="#E5E5E5"> test cases for all three</font>

210
00:14:24,120 --> 00:14:32,040
possible<font color="#CCCCCC"> parts</font><font color="#E5E5E5"> of that program</font>

211
00:14:27,000 --> 00:14:34,650
now this is a very simple function<font color="#CCCCCC"> it's</font>

212
00:14:32,040 --> 00:14:36,569
not really that scalable and you need

213
00:14:34,650 --> 00:14:42,750
the source code for<font color="#E5E5E5"> it so let's do</font>

214
00:14:36,570 --> 00:14:44,610
<font color="#E5E5E5">something</font><font color="#CCCCCC"> better if at any point</font><font color="#E5E5E5"> that</font>

215
00:14:42,750 --> 00:14:47,180
<font color="#CCCCCC">you have a doubt please feel free to</font>

216
00:14:44,610 --> 00:14:47,180
stop<font color="#CCCCCC"> me</font>

217
00:14:57,860 --> 00:15:03,649
it<font color="#CCCCCC"> Mase is a much more complex program</font>

218
00:15:00,620 --> 00:15:05,779
<font color="#CCCCCC">I'll just show you what it is so this is</font>

219
00:15:03,649 --> 00:15:08,959
how the mace program look like<font color="#E5E5E5"> and you</font>

220
00:15:05,779 --> 00:15:10,760
can use<font color="#CCCCCC"> that characters WASD</font><font color="#E5E5E5"> if you have</font>

221
00:15:08,959 --> 00:15:13,310
<font color="#CCCCCC">a</font><font color="#E5E5E5"> played Counter Strike you would know I</font>

222
00:15:10,760 --> 00:15:16,370
mean all the games right<font color="#E5E5E5"> WASD to move</font>

223
00:15:13,310 --> 00:15:19,430
around the<font color="#E5E5E5"> mix and you</font><font color="#CCCCCC"> should figure</font><font color="#E5E5E5"> out</font>

224
00:15:16,370 --> 00:15:21,709
what is the right combination<font color="#CCCCCC"> of the</font>

225
00:15:19,430 --> 00:15:25,880
keys<font color="#CCCCCC"> that you have to use to</font><font color="#E5E5E5"> get to the</font>

226
00:15:21,709 --> 00:15:31,910
end point<font color="#E5E5E5"> which is a</font><font color="#CCCCCC"> pounding so I would</font>

227
00:15:25,880 --> 00:15:38,060
<font color="#CCCCCC">try some random Keys and see how it</font>

228
00:15:31,910 --> 00:15:42,829
works<font color="#E5E5E5"> okay all right I went ahead and I</font>

229
00:15:38,060 --> 00:15:46,219
<font color="#E5E5E5">got blocked so it was a fail so can we</font>

230
00:15:42,829 --> 00:15:48,589
try to<font color="#CCCCCC"> implement Clee here so that it</font>

231
00:15:46,220 --> 00:15:50,510
kinds it kind of finds the solution<font color="#E5E5E5"> for</font>

232
00:15:48,589 --> 00:15:53,089
us<font color="#E5E5E5"> that's the that's what</font><font color="#CCCCCC"> they are</font>

233
00:15:50,510 --> 00:15:57,760
<font color="#E5E5E5">trying to do before that</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> will</font><font color="#CCCCCC"> just</font>

234
00:15:53,089 --> 00:15:57,760
show you<font color="#E5E5E5"> the source</font><font color="#CCCCCC"> code</font><font color="#E5E5E5"> of this program</font>

235
00:15:59,980 --> 00:16:09,589
<font color="#CCCCCC">so it is a small C program we just use</font>

236
00:16:05,480 --> 00:16:12,110
read statements to read input from the

237
00:16:09,589 --> 00:16:15,949
keyboard<font color="#E5E5E5"> and then just move it</font>

238
00:16:12,110 --> 00:16:22,930
accordingly<font color="#CCCCCC"> and that</font><font color="#E5E5E5"> this is the maze</font>

239
00:16:15,949 --> 00:16:22,930
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> being drawn</font><font color="#CCCCCC"> okay</font>

240
00:16:27,620 --> 00:16:38,940
so let's so what's our<font color="#E5E5E5"> goal</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> the</font>

241
00:16:36,149 --> 00:16:41,040
goal is<font color="#CCCCCC"> to reach the</font><font color="#E5E5E5"> first</font><font color="#CCCCCC"> respect how</font>

242
00:16:38,940 --> 00:16:45,630
do we tell<font color="#E5E5E5"> our symbolic execution</font>

243
00:16:41,040 --> 00:16:47,760
program to figure out a path that that

244
00:16:45,630 --> 00:16:51,240
can get us there<font color="#CCCCCC"> so in the code</font>

245
00:16:47,760 --> 00:16:53,730
<font color="#CCCCCC">obviously we will add something</font><font color="#E5E5E5"> this is</font>

246
00:16:51,240 --> 00:16:56,910
this is the section<font color="#CCCCCC"> where you basically</font>

247
00:16:53,730 --> 00:16:58,709
win<font color="#E5E5E5"> so I just add an assert statement</font><font color="#CCCCCC"> an</font>

248
00:16:56,910 --> 00:17:02,160
<font color="#CCCCCC">assert statement</font>

249
00:16:58,709 --> 00:17:04,800
<font color="#E5E5E5">it just works like in it like</font><font color="#CCCCCC"> regular</font><font color="#E5E5E5"> C</font>

250
00:17:02,160 --> 00:17:07,109
<font color="#CCCCCC">assert</font><font color="#E5E5E5"> statement so I added an assert</font>

251
00:17:04,800 --> 00:17:09,809
statement here to indicate<font color="#CCCCCC"> that this is</font>

252
00:17:07,109 --> 00:17:18,448
<font color="#E5E5E5">the</font><font color="#CCCCCC"> section of</font><font color="#E5E5E5"> the code that I have to</font>

253
00:17:09,809 --> 00:17:21,660
reach and I just added the header file

254
00:17:18,449 --> 00:17:23,670
for click and then<font color="#E5E5E5"> you just compile it</font>

255
00:17:21,660 --> 00:17:28,410
to the bit code and you<font color="#CCCCCC"> can see the bit</font>

256
00:17:23,670 --> 00:17:41,070
code<font color="#E5E5E5"> file here again using this si Lang</font>

257
00:17:28,410 --> 00:17:44,910
program and executed<font color="#CCCCCC"> C so it tries</font><font color="#E5E5E5"> out</font>

258
00:17:41,070 --> 00:17:47,520
lots of variations by solving the

259
00:17:44,910 --> 00:17:52,559
constraints that<font color="#E5E5E5"> this particular</font><font color="#CCCCCC"> LLVM</font>

260
00:17:47,520 --> 00:17:54,900
bit code had and it has<font color="#E5E5E5"> taken it has</font>

261
00:17:52,559 --> 00:17:57,120
figured out<font color="#CCCCCC"> three not</font><font color="#E5E5E5"> meant</font><font color="#CCCCCC"> paths and</font><font color="#E5E5E5"> it</font>

262
00:17:54,900 --> 00:18:01,080
generated<font color="#E5E5E5"> around three not six test</font>

263
00:17:57,120 --> 00:18:03,178
cases<font color="#CCCCCC"> okay now let's see if we have a</font>

264
00:18:01,080 --> 00:18:06,629
<font color="#E5E5E5">winning condition so the assert</font>

265
00:18:03,179 --> 00:18:11,540
statement<font color="#E5E5E5"> makes the program to cause an</font>

266
00:18:06,630 --> 00:18:11,540
error<font color="#E5E5E5"> I will explain what that is</font>

267
00:18:28,080 --> 00:18:33,909
<font color="#CCCCCC">okay so</font><font color="#E5E5E5"> seems like we have an error and</font>

268
00:18:30,990 --> 00:18:37,030
let's just look at the number<font color="#CCCCCC"> of test</font>

269
00:18:33,910 --> 00:18:42,040
cases<font color="#CCCCCC"> that we</font><font color="#E5E5E5"> generated it's a lot so</font>

270
00:18:37,030 --> 00:18:45,430
<font color="#E5E5E5">that's why I did the</font><font color="#CCCCCC"> okay now let's see</font>

271
00:18:42,040 --> 00:18:47,580
what is the input<font color="#E5E5E5"> that's causing the</font>

272
00:18:45,430 --> 00:18:47,580
error

273
00:19:09,580 --> 00:19:15,580
<font color="#E5E5E5">okay so seems like this is the output</font>

274
00:19:12,960 --> 00:19:19,090
<font color="#E5E5E5">input that's causing the error means</font>

275
00:19:15,580 --> 00:19:23,678
this is the<font color="#CCCCCC"> input that</font><font color="#E5E5E5"> gets us to the</font>

276
00:19:19,090 --> 00:19:29,639
effort statement okay now let's just<font color="#E5E5E5"> try</font>

277
00:19:23,679 --> 00:19:33,700
<font color="#E5E5E5">it out and see if</font><font color="#CCCCCC"> it's okay</font>

278
00:19:29,639 --> 00:19:44,820
executed the program pasted in solution

279
00:19:33,700 --> 00:19:48,580
<font color="#CCCCCC">oh wow Oh</font><font color="#E5E5E5"> exactly</font>

280
00:19:44,820 --> 00:19:51,820
now<font color="#E5E5E5"> do after this do you really wanna</font>

281
00:19:48,580 --> 00:19:53,559
test programs like with hand<font color="#E5E5E5"> though you</font>

282
00:19:51,820 --> 00:19:55,720
want<font color="#E5E5E5"> to do code reviews or Jesus just</font>

283
00:19:53,559 --> 00:19:57,600
want to do this is this the only

284
00:19:55,720 --> 00:20:01,059
possible solution

285
00:19:57,600 --> 00:20:03,340
the thing that<font color="#E5E5E5"> cleaves it kind of</font><font color="#CCCCCC"> holds</font>

286
00:20:01,059 --> 00:20:06,158
<font color="#E5E5E5">at the first attempt where it is</font>

287
00:20:03,340 --> 00:20:09,899
successful<font color="#CCCCCC"> so we gonna tell it to</font><font color="#E5E5E5"> give</font>

288
00:20:06,159 --> 00:20:09,899
us<font color="#E5E5E5"> other test cases where it is not</font>

289
00:20:24,170 --> 00:20:33,750
yeah<font color="#E5E5E5"> okay so I</font><font color="#CCCCCC"> just gave it an argument</font>

290
00:20:31,320 --> 00:20:36,570
which<font color="#CCCCCC"> says omit all</font><font color="#E5E5E5"> errors so it which</font>

291
00:20:33,750 --> 00:20:40,410
makes it<font color="#E5E5E5"> try all the possibilities that</font>

292
00:20:36,570 --> 00:20:42,480
causes an error condition<font color="#CCCCCC"> and now you</font>

293
00:20:40,410 --> 00:20:43,920
can see<font color="#E5E5E5"> that it generated three not man</font>

294
00:20:42,480 --> 00:20:46,800
test cases later

295
00:20:43,920 --> 00:20:49,440
earlier it was three not six<font color="#E5E5E5"> okay so we</font>

296
00:20:46,800 --> 00:21:06,090
have<font color="#E5E5E5"> three more bugs here</font>

297
00:20:49,440 --> 00:21:09,090
I think let's see<font color="#E5E5E5"> okay so I was right we</font>

298
00:21:06,090 --> 00:21:11,070
have three<font color="#E5E5E5"> additional inputs that would</font>

299
00:21:09,090 --> 00:21:13,939
get<font color="#CCCCCC"> us to the winning condition</font><font color="#E5E5E5"> so let's</font>

300
00:21:11,070 --> 00:21:13,939
test them out

301
00:21:24,150 --> 00:21:28,860
<font color="#CCCCCC">okay let's test this one</font>

302
00:21:33,760 --> 00:21:46,908
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> this is this is long and I</font><font color="#E5E5E5"> think</font>

303
00:21:39,679 --> 00:21:59,470
this is the right solution<font color="#E5E5E5"> see how this</font>

304
00:21:46,909 --> 00:21:59,470
works out<font color="#CCCCCC"> I guess this is the right</font><font color="#E5E5E5"> one</font>

305
00:22:06,430 --> 00:22:16,620
oh<font color="#E5E5E5"> yeah I always get wrong okay now</font>

306
00:22:13,620 --> 00:22:16,620
let's

307
00:22:33,120 --> 00:22:37,969
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> I guess this must be it</font>

308
00:22:42,419 --> 00:22:47,340
what

309
00:22:44,710 --> 00:22:47,340
yeah

310
00:22:49,030 --> 00:23:01,440
<font color="#CCCCCC">I think this should be</font><font color="#E5E5E5"> this is</font><font color="#CCCCCC"> really</font>

311
00:22:52,270 --> 00:23:01,440
long okay

312
00:23:18,160 --> 00:23:27,430
yeah I guess this is the one yay

313
00:23:24,340 --> 00:23:29,980
so and there is also one<font color="#CCCCCC"> more solution</font>

314
00:23:27,430 --> 00:23:33,820
<font color="#E5E5E5">so this is all in your docker container</font>

315
00:23:29,980 --> 00:23:36,910
so<font color="#E5E5E5"> you can just try it out and it's</font><font color="#CCCCCC"> very</font>

316
00:23:33,820 --> 00:23:38,889
simple<font color="#CCCCCC"> how that I just modified two</font>

317
00:23:36,910 --> 00:23:41,650
lines in this program<font color="#E5E5E5"> and then I could</font>

318
00:23:38,890 --> 00:23:44,380
figure out three additional conditions

319
00:23:41,650 --> 00:23:47,020
that the programmer didn't indent<font color="#E5E5E5"> okay</font>

320
00:23:44,380 --> 00:23:55,360
and this<font color="#E5E5E5"> is again a</font><font color="#CCCCCC"> Thai</font><font color="#E5E5E5"> program let's</font>

321
00:23:47,020 --> 00:24:01,840
do something<font color="#E5E5E5"> CTF level right</font><font color="#CCCCCC"> okay which</font>

322
00:23:55,360 --> 00:24:05,379
one do I choose<font color="#E5E5E5"> okay let's go this okay</font>

323
00:24:01,840 --> 00:24:07,600
this<font color="#E5E5E5"> and this is an noe do hack CTF and</font>

324
00:24:05,380 --> 00:24:11,020
<font color="#CCCCCC">there's a right about there I'm just</font>

325
00:24:07,600 --> 00:24:15,939
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to write out</font><font color="#E5E5E5"> okay</font>

326
00:24:11,020 --> 00:24:20,889
<font color="#E5E5E5">so it's an</font><font color="#CCCCCC"> 64 bit else</font><font color="#E5E5E5"> executable and I</font>

327
00:24:15,940 --> 00:24:25,720
guess it asks for<font color="#E5E5E5"> a password</font><font color="#CCCCCC"> let's try</font>

328
00:24:20,890 --> 00:24:28,330
something<font color="#CCCCCC"> okay that's</font><font color="#E5E5E5"> not it now we</font>

329
00:24:25,720 --> 00:24:31,300
don't have<font color="#E5E5E5"> the source code for this</font>

330
00:24:28,330 --> 00:24:33,820
particular<font color="#E5E5E5"> file so what do we do I mean</font>

331
00:24:31,300 --> 00:24:37,030
how do we<font color="#E5E5E5"> approach programs that doesn't</font>

332
00:24:33,820 --> 00:24:45,689
have source code and we still<font color="#E5E5E5"> want to do</font>

333
00:24:37,030 --> 00:24:45,690
CLE with it any idea sorry

334
00:24:46,810 --> 00:24:55,350
I mean how do we<font color="#CCCCCC"> get the source code</font>

335
00:24:49,890 --> 00:24:55,350
<font color="#E5E5E5">because yeah exactly</font><font color="#CCCCCC"> so what do we</font><font color="#E5E5E5"> use</font>

336
00:24:55,830 --> 00:25:04,899
hey does this look<font color="#CCCCCC"> familiar</font>

337
00:24:59,280 --> 00:25:09,520
so we just loaded the<font color="#E5E5E5"> program in</font><font color="#CCCCCC"> Ida Pro</font>

338
00:25:04,900 --> 00:25:14,500
which is the<font color="#CCCCCC"> D compiler and the DISA</font><font color="#E5E5E5"> and</font>

339
00:25:09,520 --> 00:25:18,190
here we just<font color="#E5E5E5"> translated the assembly</font>

340
00:25:14,500 --> 00:25:19,900
code to<font color="#E5E5E5"> C code using the hi Chris so it</font>

341
00:25:18,190 --> 00:25:23,250
<font color="#E5E5E5">just gives you it gives you a very</font>

342
00:25:19,900 --> 00:25:27,400
readable code<font color="#E5E5E5"> so here you can see that</font>

343
00:25:23,250 --> 00:25:30,910
something<font color="#CCCCCC"> happens</font><font color="#E5E5E5"> else try again so we</font>

344
00:25:27,400 --> 00:25:31,930
want this to<font color="#CCCCCC"> happen right</font><font color="#E5E5E5"> all right so</font>

345
00:25:30,910 --> 00:25:33,750
where do<font color="#CCCCCC"> we put the</font>

346
00:25:31,930 --> 00:25:37,510
statement now we just put it over<font color="#E5E5E5"> there</font>

347
00:25:33,750 --> 00:25:46,600
<font color="#E5E5E5">okay this is compiled ability code so</font>

348
00:25:37,510 --> 00:25:48,550
that<font color="#CCCCCC"> is what you can see here yeah</font><font color="#E5E5E5"> no</font>

349
00:25:46,600 --> 00:25:50,980
changes I just put<font color="#E5E5E5"> the</font><font color="#CCCCCC"> CLIA third</font>

350
00:25:48,550 --> 00:25:54,159
statement<font color="#E5E5E5"> here because this is the this</font>

351
00:25:50,980 --> 00:25:57,070
<font color="#CCCCCC">is where good stuff happens</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> you</font>

352
00:25:54,160 --> 00:26:00,040
<font color="#CCCCCC">don't want to go anywhere</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> just</font>

353
00:25:57,070 --> 00:26:02,350
add the<font color="#CCCCCC"> CLE dot H file here</font><font color="#E5E5E5"> and put in</font>

354
00:26:00,040 --> 00:26:06,730
the function<font color="#CCCCCC"> body</font><font color="#E5E5E5"> copy paste it over</font>

355
00:26:02,350 --> 00:26:11,050
here<font color="#CCCCCC"> and compiled with feeling obviously</font>

356
00:26:06,730 --> 00:26:17,860
you'll get the bit code file now I'll

357
00:26:11,050 --> 00:26:20,950
run it with CLE<font color="#CCCCCC"> okay now it wants me</font>

358
00:26:17,860 --> 00:26:25,750
about something<font color="#CCCCCC"> it's it's saying calling</font>

359
00:26:20,950 --> 00:26:28,810
external<font color="#E5E5E5"> printers so CLE works on</font><font color="#CCCCCC"> LLVM</font>

360
00:26:25,750 --> 00:26:31,120
bit code right can<font color="#E5E5E5"> it understands what</font>

361
00:26:28,810 --> 00:26:36,700
<font color="#CCCCCC">printf is because where does printers</font>

362
00:26:31,120 --> 00:26:39,969
come from anyone let's<font color="#E5E5E5"> see exactly</font><font color="#CCCCCC"> so we</font>

363
00:26:36,700 --> 00:26:43,060
need to have a version of<font color="#CCCCCC"> Lipsy that the</font>

364
00:26:39,970 --> 00:26:45,280
key can't instrument so<font color="#CCCCCC"> CLE</font><font color="#E5E5E5"> actually</font>

365
00:26:43,060 --> 00:26:50,320
provides you that<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> called you</font><font color="#CCCCCC"> Lib C</font>

366
00:26:45,280 --> 00:26:52,470
and you can just specify it let<font color="#E5E5E5"> us do</font>

367
00:26:50,320 --> 00:26:52,470
<font color="#CCCCCC">that</font>

368
00:27:24,830 --> 00:27:33,800
<font color="#E5E5E5">okay so now that's sorted now it has a</font>

369
00:27:30,140 --> 00:27:36,470
warning<font color="#E5E5E5"> and it says the usage is</font><font color="#CCCCCC"> Maine</font>

370
00:27:33,800 --> 00:27:38,389
dot<font color="#E5E5E5"> BC and then the</font><font color="#CCCCCC"> pass so in fact if</font>

371
00:27:36,470 --> 00:27:40,910
it's an argument<font color="#E5E5E5"> that you had to give</font>

372
00:27:38,390 --> 00:27:45,710
this program<font color="#E5E5E5"> it's a</font><font color="#CCCCCC"> command-line</font>

373
00:27:40,910 --> 00:27:48,050
<font color="#E5E5E5">argument that you have to provide so how</font>

374
00:27:45,710 --> 00:27:51,680
do<font color="#E5E5E5"> we make the command-line</font><font color="#CCCCCC"> arguments</font>

375
00:27:48,050 --> 00:27:55,820
symbolic so that the<font color="#E5E5E5"> pre tries to figure</font>

376
00:27:51,680 --> 00:28:05,240
<font color="#E5E5E5">out what</font><font color="#CCCCCC"> exactly needs to be the</font><font color="#E5E5E5"> input</font>

377
00:27:55,820 --> 00:28:07,700
so this so you<font color="#E5E5E5"> just add - -</font><font color="#CCCCCC"> CIN Arg</font><font color="#E5E5E5"> 100</font>

378
00:28:05,240 --> 00:28:09,020
so 100 is just<font color="#CCCCCC"> the character size I just</font>

379
00:28:07,700 --> 00:28:11,240
know<font color="#E5E5E5"> I</font><font color="#CCCCCC"> don't know what does</font>

380
00:28:09,020 --> 00:28:13,670
what's the number<font color="#CCCCCC"> of</font><font color="#E5E5E5"> characters</font><font color="#CCCCCC"> that it</font>

381
00:28:11,240 --> 00:28:15,620
<font color="#E5E5E5">takes to get the key</font><font color="#CCCCCC"> so I just provide</font>

382
00:28:13,670 --> 00:28:18,440
an arbitrary number which is 100 if it

383
00:28:15,620 --> 00:28:22,340
<font color="#E5E5E5">can be 80 whatever that you think it is</font>

384
00:28:18,440 --> 00:28:24,890
so this should<font color="#CCCCCC"> be clear now Libby we</font>

385
00:28:22,340 --> 00:28:28,639
provide Lib C here<font color="#E5E5E5"> and we provide the</font>

386
00:28:24,890 --> 00:28:30,830
POSIX environment<font color="#E5E5E5"> so some functions like</font>

387
00:28:28,640 --> 00:28:31,940
the right are implemented by<font color="#CCCCCC"> the</font>

388
00:28:30,830 --> 00:28:34,939
operating system

389
00:28:31,940 --> 00:28:39,070
<font color="#E5E5E5">so</font><font color="#CCCCCC"> we gives you functionality to execute</font>

390
00:28:34,940 --> 00:28:42,740
code which<font color="#CCCCCC"> has system</font><font color="#E5E5E5"> calls</font><font color="#CCCCCC"> awesome and</font>

391
00:28:39,070 --> 00:28:46,939
then you provide the<font color="#E5E5E5"> bit code and I am</font>

392
00:28:42,740 --> 00:28:50,360
since this<font color="#E5E5E5"> are this bit code takes</font>

393
00:28:46,940 --> 00:28:53,300
<font color="#CCCCCC">arguments from the command line I am</font>

394
00:28:50,360 --> 00:28:56,810
<font color="#CCCCCC">providing it as</font><font color="#E5E5E5"> a simple a symbolic</font>

395
00:28:53,300 --> 00:29:00,620
<font color="#E5E5E5">argument which is which can</font><font color="#CCCCCC"> be a hundred</font>

396
00:28:56,810 --> 00:29:05,090
<font color="#E5E5E5">character under hundred characters so I</font>

397
00:29:00,620 --> 00:29:11,090
just give<font color="#CCCCCC"> it a go and I just</font><font color="#E5E5E5"> saw</font>

398
00:29:05,090 --> 00:29:14,840
something<font color="#CCCCCC"> in</font><font color="#E5E5E5"> blink this is I</font><font color="#CCCCCC"> think it</font>

399
00:29:11,090 --> 00:29:19,459
was for<font color="#CCCCCC"> 200 points</font><font color="#E5E5E5"> it's pretty cool</font><font color="#CCCCCC"> that</font>

400
00:29:14,840 --> 00:29:22,040
I can<font color="#E5E5E5"> solve it</font><font color="#CCCCCC"> on the stage so if we</font>

401
00:29:19,460 --> 00:29:25,930
have an assertion<font color="#CCCCCC"> fails</font><font color="#E5E5E5"> right here let's</font>

402
00:29:22,040 --> 00:29:25,930
figure out what this is

403
00:29:32,610 --> 00:29:40,709
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> so we have a test case that kind of</font>

404
00:29:35,710 --> 00:29:40,710
gets us to that<font color="#E5E5E5"> point okay test</font>

405
00:29:48,080 --> 00:29:55,289
<font color="#E5E5E5">okay it is finally</font><font color="#CCCCCC"> Panda I don't know if</font>

406
00:29:54,330 --> 00:30:04,820
it's a French<font color="#E5E5E5"> thing</font>

407
00:29:55,289 --> 00:30:13,408
but yeah okay so let's try<font color="#CCCCCC"> it</font><font color="#E5E5E5"> out and</font>

408
00:30:04,820 --> 00:30:23,639
verify if you are right yeah I should

409
00:30:13,409 --> 00:30:26,539
oh yes so yeah we just<font color="#E5E5E5"> solved</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> CTF</font>

410
00:30:23,639 --> 00:30:30,570
challenge<font color="#E5E5E5"> no biggie</font>

411
00:30:26,539 --> 00:30:35,039
now yes<font color="#CCCCCC"> this is this is pretty</font><font color="#E5E5E5"> easy</font>

412
00:30:30,570 --> 00:30:40,729
<font color="#CCCCCC">right now</font><font color="#E5E5E5"> let's do some slides now</font><font color="#CCCCCC"> I</font>

413
00:30:35,039 --> 00:30:40,729
have been doing demos<font color="#CCCCCC"> forever right</font>

414
00:30:47,060 --> 00:30:54,649
like we covered<font color="#E5E5E5"> this and these are the</font>

415
00:30:50,510 --> 00:30:57,850
other symbolic<font color="#E5E5E5"> and arguments that you</font>

416
00:30:54,650 --> 00:31:01,250
could<font color="#E5E5E5"> provide and these are the it can</font>

417
00:30:57,850 --> 00:31:07,490
not just be<font color="#CCCCCC"> argument it can be files too</font>

418
00:31:01,250 --> 00:31:08,990
and clay<font color="#E5E5E5"> also supports sockets</font><font color="#CCCCCC"> IPC etc</font>

419
00:31:07,490 --> 00:31:14,170
so it's pretty good

420
00:31:08,990 --> 00:31:14,170
<font color="#E5E5E5">and</font><font color="#CCCCCC"> yeah this is</font><font color="#E5E5E5"> the list</font>

421
00:31:16,090 --> 00:31:22,250
so you see<font color="#CCCCCC"> Lipsy is a modified version</font>

422
00:31:18,710 --> 00:31:27,050
of Lib C<font color="#E5E5E5"> which a click and instrument so</font>

423
00:31:22,250 --> 00:31:29,900
when the control flow transfers from<font color="#E5E5E5"> the</font>

424
00:31:27,050 --> 00:31:31,850
bit code<font color="#E5E5E5"> to something that something</font>

425
00:31:29,900 --> 00:31:33,740
<font color="#CCCCCC">that's the</font><font color="#E5E5E5"> system library click can't</font>

426
00:31:31,850 --> 00:31:36,500
really understand what's going<font color="#CCCCCC"> on there</font>

427
00:31:33,740 --> 00:31:39,140
so<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> why we have to have something</font>

428
00:31:36,500 --> 00:31:42,700
<font color="#CCCCCC">like you</font><font color="#E5E5E5"> see lives in there and the same</font>

429
00:31:39,140 --> 00:31:47,960
applies for<font color="#E5E5E5"> the POSIX runtime as well</font>

430
00:31:42,700 --> 00:31:51,650
now I think<font color="#E5E5E5"> GN is coreutils and the</font>

431
00:31:47,960 --> 00:31:54,260
binutils has been<font color="#E5E5E5"> digested softest</font><font color="#CCCCCC"> you'd</font>

432
00:31:51,650 --> 00:31:58,070
ever because it's easy to compile<font color="#E5E5E5"> you</font>

433
00:31:54,260 --> 00:32:00,310
can run all the<font color="#E5E5E5"> process tutorials comes</font>

434
00:31:58,070 --> 00:32:03,860
with it<font color="#E5E5E5"> so it has been pretty tested and</font>

435
00:32:00,310 --> 00:32:07,460
surprisingly the developers<font color="#CCCCCC"> asked</font><font color="#E5E5E5"> Lee</font>

436
00:32:03,860 --> 00:32:10,969
were able to find around<font color="#CCCCCC"> two to three</font><font color="#E5E5E5"> C</font>

437
00:32:07,460 --> 00:32:14,150
we are high severity bugs in this<font color="#E5E5E5"> tool</font>

438
00:32:10,970 --> 00:32:16,940
so and this is kind of an indication

439
00:32:14,150 --> 00:32:19,550
that<font color="#E5E5E5"> the that this project is mature</font>

440
00:32:16,940 --> 00:32:22,370
enough<font color="#CCCCCC"> to actually find production</font>

441
00:32:19,550 --> 00:32:26,690
quality bugs so let's figure out how<font color="#E5E5E5"> to</font>

442
00:32:22,370 --> 00:32:30,739
do<font color="#E5E5E5"> that the</font><font color="#CCCCCC"> first part of doing</font>

443
00:32:26,690 --> 00:32:35,660
<font color="#E5E5E5">something like that is how do we compile</font>

444
00:32:30,740 --> 00:32:37,430
all these programs<font color="#E5E5E5"> this</font><font color="#CCCCCC"> ll geom</font><font color="#E5E5E5"> some of</font>

445
00:32:35,660 --> 00:32:40,310
them have their own build systems and

446
00:32:37,430 --> 00:32:43,490
<font color="#E5E5E5">that might not</font><font color="#CCCCCC"> work together</font><font color="#E5E5E5"> etc so we</font>

447
00:32:40,310 --> 00:32:45,830
use something called as<font color="#CCCCCC"> wll VM so it's a</font>

448
00:32:43,490 --> 00:32:50,030
bold program<font color="#CCCCCC"> LLVM which lets you compile</font>

449
00:32:45,830 --> 00:32:53,270
entire<font color="#CCCCCC"> source packages with LLVM it's</font>

450
00:32:50,030 --> 00:32:57,680
not a magic<font color="#E5E5E5"> SWAT it works most of the</font>

451
00:32:53,270 --> 00:32:59,570
<font color="#CCCCCC">time and it kind of puts in the LLVM bit</font>

452
00:32:57,680 --> 00:33:00,860
code in the<font color="#E5E5E5"> binary that it compels which</font>

453
00:32:59,570 --> 00:33:02,419
you can later<font color="#E5E5E5"> extract</font>

454
00:33:00,860 --> 00:33:05,570
the tool<font color="#E5E5E5"> that they give is called</font>

455
00:33:02,420 --> 00:33:07,520
<font color="#CCCCCC">extract</font><font color="#E5E5E5"> BC so once you do that you will</font>

456
00:33:05,570 --> 00:33:09,799
<font color="#CCCCCC">have the bit code of the files that</font><font color="#E5E5E5"> you</font>

457
00:33:07,520 --> 00:33:11,660
have compiled with<font color="#CCCCCC"> LLVM and then you</font>

458
00:33:09,799 --> 00:33:13,990
follow<font color="#E5E5E5"> the same steps that you have done</font>

459
00:33:11,660 --> 00:33:13,990
<font color="#CCCCCC">before</font>

460
00:33:27,470 --> 00:33:32,960
<font color="#CCCCCC">okay so</font><font color="#E5E5E5"> before</font><font color="#CCCCCC"> we go into the GNU one</font>

461
00:33:30,480 --> 00:33:38,270
it's a bit complex<font color="#E5E5E5"> let's do a little</font>

462
00:33:32,960 --> 00:33:46,429
better<font color="#E5E5E5"> one which is the AIS</font><font color="#CCCCCC"> 3 crack me</font>

463
00:33:38,270 --> 00:33:49,260
<font color="#CCCCCC">ok so again this program</font><font color="#E5E5E5"> doesn't have</font>

464
00:33:46,429 --> 00:33:51,270
any source code<font color="#CCCCCC"> to it as</font><font color="#E5E5E5"> and we don't</font>

465
00:33:49,260 --> 00:33:53,970
have the source code<font color="#CCCCCC"> to</font><font color="#E5E5E5"> it how do we</font>

466
00:33:51,270 --> 00:33:56,429
plan on hacking in hacking<font color="#E5E5E5"> this because</font>

467
00:33:53,970 --> 00:34:00,059
this has<font color="#CCCCCC"> been kind</font><font color="#E5E5E5"> of office gated and</font>

468
00:33:56,429 --> 00:34:02,190
code<font color="#CCCCCC"> as little</font><font color="#E5E5E5"> tricky so we</font><font color="#CCCCCC"> can't</font><font color="#E5E5E5"> really</font>

469
00:34:00,059 --> 00:34:04,590
<font color="#E5E5E5">copy from hex</font><font color="#CCCCCC"> race and then do the</font>

470
00:34:02,190 --> 00:34:06,450
<font color="#E5E5E5">whatever it did with clean so we will</font>

471
00:34:04,590 --> 00:34:10,350
<font color="#E5E5E5">try to use a different tool which is</font>

472
00:34:06,450 --> 00:34:15,350
called<font color="#E5E5E5"> anger and I have anger in another</font>

473
00:34:10,350 --> 00:34:15,350
docker container so<font color="#E5E5E5"> let us try</font><font color="#CCCCCC"> that</font>

474
00:34:16,040 --> 00:34:22,889
before we try anger let's understand

475
00:34:19,110 --> 00:34:24,600
what this program does so how have<font color="#E5E5E5"> you</font>

476
00:34:22,889 --> 00:34:26,820
heard of<font color="#CCCCCC"> Raider</font><font color="#E5E5E5"> it's a free tool it's</font>

477
00:34:24,600 --> 00:34:29,069
<font color="#CCCCCC">our</font><font color="#E5E5E5"> pre-installed you can do similar</font>

478
00:34:26,820 --> 00:34:40,619
<font color="#E5E5E5">things with</font><font color="#CCCCCC"> Ida</font><font color="#E5E5E5"> but then this is totally</font>

479
00:34:29,070 --> 00:34:43,760
<font color="#E5E5E5">free so hey so I just loaded it up did</font>

480
00:34:40,619 --> 00:34:48,889
some basic analysis with it so<font color="#CCCCCC"> AAA does</font>

481
00:34:43,760 --> 00:34:48,889
lots<font color="#E5E5E5"> of analysis</font><font color="#CCCCCC"> on the binary</font><font color="#E5E5E5"> and then</font>

482
00:34:50,750 --> 00:34:56,070
<font color="#CCCCCC">AFL prints all the functions in</font><font color="#E5E5E5"> this</font>

483
00:34:53,399 --> 00:35:00,900
particular binary and the main is always

484
00:34:56,070 --> 00:35:04,010
a good starting point right<font color="#CCCCCC"> so we would</font>

485
00:35:00,900 --> 00:35:04,010
go to me

486
00:35:06,840 --> 00:35:15,300
and we have the control flow so this<font color="#E5E5E5"> is</font>

487
00:35:11,490 --> 00:35:17,609
like a very nice representation<font color="#E5E5E5"> we know</font>

488
00:35:15,300 --> 00:35:19,560
that this is the<font color="#E5E5E5"> control flow we can</font>

489
00:35:17,610 --> 00:35:21,630
take the false branch and then it goes

490
00:35:19,560 --> 00:35:25,560
here<font color="#E5E5E5"> and</font><font color="#CCCCCC"> then the true branch</font><font color="#E5E5E5"> goes here</font>

491
00:35:21,630 --> 00:35:29,220
<font color="#E5E5E5">and end of the day this this is where</font>

492
00:35:25,560 --> 00:35:33,000
you want to land<font color="#E5E5E5"> right this is where you</font>

493
00:35:29,220 --> 00:35:35,609
want to land<font color="#E5E5E5"> and this is the false</font>

494
00:35:33,000 --> 00:35:39,840
condition<font color="#CCCCCC"> so take a</font><font color="#E5E5E5"> good note of this</font>

495
00:35:35,610 --> 00:35:42,530
<font color="#E5E5E5">and</font><font color="#CCCCCC"> I'll just show you</font><font color="#E5E5E5"> how complex it is</font>

496
00:35:39,840 --> 00:35:42,530
<font color="#CCCCCC">to</font><font color="#E5E5E5"> solve this</font>

497
00:35:57,750 --> 00:36:00,750
yeah

498
00:36:05,290 --> 00:36:13,029
so we just load this is a<font color="#E5E5E5"> Python script</font>

499
00:36:09,040 --> 00:36:16,180
<font color="#CCCCCC">that uses</font><font color="#E5E5E5"> anger and it's another</font>

500
00:36:13,030 --> 00:36:17,470
<font color="#E5E5E5">symbolic execution engine and this is</font>

501
00:36:16,180 --> 00:36:20,799
where you<font color="#E5E5E5"> just create a project it has</font>

502
00:36:17,470 --> 00:36:26,049
<font color="#CCCCCC">been</font><font color="#E5E5E5"> heavily commented so you can get an</font>

503
00:36:20,800 --> 00:36:31,240
<font color="#E5E5E5">idea and this is</font><font color="#CCCCCC"> the one line that we it</font>

504
00:36:26,050 --> 00:36:33,820
matters<font color="#CCCCCC"> path group dot</font><font color="#E5E5E5"> explore find four</font>

505
00:36:31,240 --> 00:36:34,870
thousand six zero two<font color="#E5E5E5"> so that's where</font>

506
00:36:33,820 --> 00:36:37,600
the key is

507
00:36:34,870 --> 00:36:43,690
we just tell anger to figure out how to

508
00:36:37,600 --> 00:36:46,210
get<font color="#E5E5E5"> to this</font><font color="#CCCCCC"> particular offset okay we</font>

509
00:36:43,690 --> 00:36:48,940
have no idea<font color="#CCCCCC"> about</font><font color="#E5E5E5"> this binary we don't</font>

510
00:36:46,210 --> 00:36:51,790
know what it<font color="#CCCCCC"> does</font><font color="#E5E5E5"> all we saw was a</font>

511
00:36:48,940 --> 00:36:57,810
<font color="#CCCCCC">string in the control flow that this is</font>

512
00:36:51,790 --> 00:37:00,969
where<font color="#E5E5E5"> it is so let's run that okay and</font>

513
00:36:57,810 --> 00:37:00,969
[Music]

514
00:37:04,320 --> 00:37:16,360
three<font color="#CCCCCC"> things crossed</font>

515
00:37:08,290 --> 00:37:19,980
<font color="#CCCCCC">oh yes</font><font color="#E5E5E5"> okay that seems like this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> the</font>

516
00:37:16,360 --> 00:37:19,980
key let's

517
00:37:23,419 --> 00:37:26,419
<font color="#E5E5E5">okay</font>

518
00:37:27,299 --> 00:37:30,949
I need to

519
00:37:36,440 --> 00:37:40,569
<font color="#E5E5E5">oh I need</font><font color="#CCCCCC"> to paste it</font><font color="#E5E5E5"> with data</font><font color="#CCCCCC"> one</font>

520
00:37:52,200 --> 00:37:58,589
oh yes so we didn't have<font color="#CCCCCC"> any source code</font>

521
00:37:56,670 --> 00:38:01,079
we didn't do any<font color="#CCCCCC"> D compilation all we</font>

522
00:37:58,589 --> 00:38:02,940
<font color="#E5E5E5">did was just do a string and then we</font>

523
00:38:01,079 --> 00:38:05,849
figured that<font color="#E5E5E5"> this is where we want to</font>

524
00:38:02,940 --> 00:38:08,220
<font color="#E5E5E5">reach we politely tells anger that we</font>

525
00:38:05,849 --> 00:38:10,559
figure out<font color="#E5E5E5"> a way and girded it for us</font>

526
00:38:08,220 --> 00:38:14,759
and<font color="#E5E5E5"> we</font><font color="#CCCCCC"> just face the CTS in the city of</font>

527
00:38:10,559 --> 00:38:16,470
<font color="#CCCCCC">C in</font><font color="#E5E5E5"> the end yeah that on going so do</font>

528
00:38:14,760 --> 00:38:20,059
you find this really interesting<font color="#E5E5E5"> that I</font>

529
00:38:16,470 --> 00:38:26,118
can solve CTF challenges just<font color="#E5E5E5"> like that</font>

530
00:38:20,059 --> 00:38:32,150
isn't that cool<font color="#CCCCCC"> this</font><font color="#E5E5E5"> isn't cool what if</font>

531
00:38:26,119 --> 00:38:37,440
<font color="#CCCCCC">and surprisingly</font><font color="#E5E5E5"> all the devil's work I</font>

532
00:38:32,150 --> 00:38:39,119
am surprised<font color="#E5E5E5"> all right okay so I'm going</font>

533
00:38:37,440 --> 00:38:51,450
<font color="#E5E5E5">I'm going to push my luck and do this</font>

534
00:38:39,119 --> 00:38:54,329
<font color="#E5E5E5">again okay let's do the example one this</font>

535
00:38:51,450 --> 00:38:58,140
<font color="#E5E5E5">I don't have good</font><font color="#CCCCCC"> successes</font><font color="#E5E5E5"> with it</font>

536
00:38:54,329 --> 00:39:01,589
but then let's give it a try<font color="#CCCCCC"> so again</font>

537
00:38:58,140 --> 00:39:03,930
this we we have source code for it but

538
00:39:01,589 --> 00:39:06,240
right<font color="#CCCCCC"> now</font><font color="#E5E5E5"> let's try</font><font color="#CCCCCC"> to solve</font><font color="#E5E5E5"> it without</font>

539
00:39:03,930 --> 00:39:08,160
using<font color="#E5E5E5"> the source code and we will try</font><font color="#CCCCCC"> in</font>

540
00:39:06,240 --> 00:39:10,709
<font color="#CCCCCC">clean with using the source code so we</font>

541
00:39:08,160 --> 00:39:13,348
can<font color="#CCCCCC"> see both</font><font color="#E5E5E5"> the versions so this is</font>

542
00:39:10,710 --> 00:39:15,720
again another CTF I just took all these

543
00:39:13,349 --> 00:39:18,329
<font color="#CCCCCC">features from the anger examples</font>

544
00:39:15,720 --> 00:39:24,390
directory and is used it for clear sir

545
00:39:18,329 --> 00:39:30,569
and let's see<font color="#E5E5E5"> okay it asked me to go</font>

546
00:39:24,390 --> 00:39:31,828
<font color="#E5E5E5">away pretty</font><font color="#CCCCCC"> good now let's see what's</font>

547
00:39:30,569 --> 00:39:40,109
inside

548
00:39:31,829 --> 00:39:42,660
<font color="#CCCCCC">Sall dot py</font><font color="#E5E5E5"> okay this is all these lines</font>

549
00:39:40,109 --> 00:39:44,819
are<font color="#CCCCCC"> wider by default</font><font color="#E5E5E5"> you don't have to</font>

550
00:39:42,660 --> 00:39:49,140
bother<font color="#E5E5E5"> because</font><font color="#CCCCCC"> this is the anger</font><font color="#E5E5E5"> setup</font>

551
00:39:44,819 --> 00:39:56,759
and if you<font color="#CCCCCC"> D compare</font><font color="#E5E5E5"> let's decompile</font>

552
00:39:49,140 --> 00:40:00,650
this oh yeah

553
00:39:56,760 --> 00:40:00,650
radar is installed in this thing

554
00:40:12,780 --> 00:40:16,710
<font color="#E5E5E5">okay or that okay</font>

555
00:40:26,450 --> 00:40:30,578
<font color="#E5E5E5">okay there is a main function nice</font>

556
00:40:40,090 --> 00:40:48,820
yeah<font color="#E5E5E5"> okay so there is some there</font><font color="#CCCCCC"> is</font>

557
00:40:47,650 --> 00:40:51,600
something<font color="#E5E5E5"> that is happening</font><font color="#CCCCCC"> with the</font>

558
00:40:48,820 --> 00:40:51,600
passwords here

559
00:40:57,820 --> 00:41:03,160
<font color="#E5E5E5">okay and then it has a false and a true</font>

560
00:41:00,400 --> 00:41:05,470
condition<font color="#CCCCCC"> and then it just gets you know</font>

561
00:41:03,160 --> 00:41:07,390
it<font color="#E5E5E5"> just prints out stuff so this program</font>

562
00:41:05,470 --> 00:41:10,390
<font color="#CCCCCC">just has one false and one true</font>

563
00:41:07,390 --> 00:41:15,670
condition<font color="#E5E5E5"> right so how many pass groups</font>

564
00:41:10,390 --> 00:41:19,930
does this<font color="#E5E5E5"> program can have it</font><font color="#CCCCCC"> just has</font>

565
00:41:15,670 --> 00:41:25,240
two branches it can have two<font color="#CCCCCC"> pug groups</font>

566
00:41:19,930 --> 00:41:27,520
so in anger way of speaking<font color="#E5E5E5"> it has two</font>

567
00:41:25,240 --> 00:41:33,970
<font color="#CCCCCC">path groups</font><font color="#E5E5E5"> so that's what you can see</font>

568
00:41:27,520 --> 00:41:36,730
<font color="#E5E5E5">here there is one path group that is the</font>

569
00:41:33,970 --> 00:41:38,350
active<font color="#CCCCCC"> all</font><font color="#E5E5E5"> zero and then the other path</font>

570
00:41:36,730 --> 00:41:40,240
group which is the active of one because

571
00:41:38,350 --> 00:41:44,740
<font color="#E5E5E5">this</font><font color="#CCCCCC"> program can only</font><font color="#E5E5E5"> have two path</font>

572
00:41:40,240 --> 00:41:47,529
groups<font color="#E5E5E5"> now we just save both the input I</font>

573
00:41:44,740 --> 00:41:49,569
mean the result of these path groups to

574
00:41:47,530 --> 00:41:52,600
a<font color="#E5E5E5"> variable this is input</font><font color="#CCCCCC"> undergo zero</font>

575
00:41:49,570 --> 00:41:56,920
and then we just we are here we are just

576
00:41:52,600 --> 00:42:05,310
<font color="#E5E5E5">testing if it is the correct</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> or not</font>

577
00:41:56,920 --> 00:42:07,360
<font color="#E5E5E5">we'll just execute Python salt dot</font><font color="#CCCCCC"> pie I</font>

578
00:42:05,310 --> 00:42:09,100
don't even know what's the operation

579
00:42:07,360 --> 00:42:14,500
<font color="#E5E5E5">that they are doing but then this I know</font>

580
00:42:09,100 --> 00:42:17,020
<font color="#E5E5E5">that this is the key so sneaky right so</font>

581
00:42:14,500 --> 00:42:18,820
I didn't know what they are<font color="#E5E5E5"> doing</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> just</font>

582
00:42:17,020 --> 00:42:20,410
know that there are two paths groups and

583
00:42:18,820 --> 00:42:23,070
just printed out what's in the<font color="#E5E5E5"> path</font>

584
00:42:20,410 --> 00:42:26,890
groups and this happens<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be the key</font>

585
00:42:23,070 --> 00:42:28,570
let's just make<font color="#E5E5E5"> sure</font><font color="#CCCCCC"> that okay I don't</font>

586
00:42:26,890 --> 00:42:37,480
<font color="#E5E5E5">know what's the</font><font color="#CCCCCC"> username but</font><font color="#E5E5E5"> then I'll</font>

587
00:42:28,570 --> 00:42:40,090
<font color="#E5E5E5">just give the password we go okay so</font>

588
00:42:37,480 --> 00:42:46,750
<font color="#CCCCCC">there</font><font color="#E5E5E5"> is no</font><font color="#CCCCCC"> username</font><font color="#E5E5E5"> it was the reverse</font>

589
00:42:40,090 --> 00:42:50,760
<font color="#E5E5E5">of new</font><font color="#CCCCCC"> bigstock now let's solve it while</font>

590
00:42:46,750 --> 00:42:50,760
we have<font color="#CCCCCC"> the source</font><font color="#E5E5E5"> code</font>

591
00:42:54,780 --> 00:43:07,330
<font color="#E5E5E5">okay so this is how the source source</font>

592
00:43:01,360 --> 00:43:11,230
code looks and apparently<font color="#E5E5E5"> if there's a</font>

593
00:43:07,330 --> 00:43:14,380
<font color="#E5E5E5">string comparison okay</font><font color="#CCCCCC"> and it does</font>

594
00:43:11,230 --> 00:43:16,210
<font color="#CCCCCC">substring comparison and if</font><font color="#E5E5E5"> accepted it</font>

595
00:43:14,380 --> 00:43:18,610
prints<font color="#E5E5E5"> something like welcome</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font>

596
00:43:16,210 --> 00:43:20,820
admin console<font color="#CCCCCC"> so if you have the source</font>

597
00:43:18,610 --> 00:43:24,670
code<font color="#E5E5E5"> what is the first thing that you do</font>

598
00:43:20,820 --> 00:43:26,260
where do you want to reach where do you

599
00:43:24,670 --> 00:43:28,180
wanna reach put an assert statement<font color="#CCCCCC"> over</font>

600
00:43:26,260 --> 00:43:31,690
<font color="#CCCCCC">that include the header</font><font color="#E5E5E5"> file</font><font color="#CCCCCC"> when you</font>

601
00:43:28,180 --> 00:43:34,839
<font color="#E5E5E5">compile it it's pretty standard</font><font color="#CCCCCC"> and here</font>

602
00:43:31,690 --> 00:43:35,830
we have inputs<font color="#E5E5E5"> the input is the</font><font color="#CCCCCC"> username</font>

603
00:43:34,840 --> 00:43:39,820
<font color="#E5E5E5">and</font><font color="#CCCCCC"> the password</font>

604
00:43:35,830 --> 00:43:44,830
<font color="#E5E5E5">so we have to make if it was a PDF</font>

605
00:43:39,820 --> 00:43:47,560
<font color="#E5E5E5">program that would take a input from the</font>

606
00:43:44,830 --> 00:43:49,720
terminal you<font color="#CCCCCC"> can give it as you can</font>

607
00:43:47,560 --> 00:43:51,880
either give it<font color="#E5E5E5"> as symbolic arguments</font>

608
00:43:49,720 --> 00:43:53,919
with the - - thing that we did earlier

609
00:43:51,880 --> 00:44:04,980
or we<font color="#CCCCCC"> can</font><font color="#E5E5E5"> just modify it right over here</font>

610
00:43:53,920 --> 00:44:14,920
so I will<font color="#CCCCCC"> just modify the</font><font color="#E5E5E5"> program oh I</font>

611
00:44:04,980 --> 00:44:19,470
haven't<font color="#E5E5E5"> done much</font><font color="#CCCCCC"> light clip yet this</font>

612
00:44:14,920 --> 00:44:23,050
could clean dot<font color="#E5E5E5"> C so as I said I just</font>

613
00:44:19,470 --> 00:44:25,569
<font color="#E5E5E5">modify the</font><font color="#CCCCCC"> read statements to symbolic</font>

614
00:44:23,050 --> 00:44:27,880
<font color="#E5E5E5">arguments so the</font><font color="#CCCCCC"> username I made it as</font>

615
00:44:25,570 --> 00:44:29,500
symbolic<font color="#E5E5E5"> and the password I made it a</font>

616
00:44:27,880 --> 00:44:31,030
symbolic<font color="#CCCCCC"> because these are the things</font>

617
00:44:29,500 --> 00:44:32,530
that<font color="#E5E5E5"> I</font><font color="#CCCCCC"> don't know and it's a good</font><font color="#E5E5E5"> idea</font>

618
00:44:31,030 --> 00:44:35,380
to<font color="#E5E5E5"> make the things that you don't know</font>

619
00:44:32,530 --> 00:44:37,680
as symbolic<font color="#E5E5E5"> so that they cleared</font><font color="#CCCCCC"> up the</font>

620
00:44:35,380 --> 00:44:37,680
hard work

621
00:44:37,710 --> 00:44:42,580
<font color="#E5E5E5">okay and I don't</font><font color="#CCCCCC"> wanna</font><font color="#E5E5E5"> go away so I just</font>

622
00:44:41,350 --> 00:44:45,640
<font color="#E5E5E5">don't put that</font><font color="#CCCCCC"> search statement over</font>

623
00:44:42,580 --> 00:44:50,049
there<font color="#CCCCCC"> I want to get the admin console so</font>

624
00:44:45,640 --> 00:44:53,040
that's what I hope<font color="#CCCCCC"> I compile it just</font>

625
00:44:50,050 --> 00:44:53,040
like you<font color="#E5E5E5"> would and</font>

626
00:45:05,999 --> 00:45:15,808
<font color="#E5E5E5">okay and instead</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> doing the symbolic</font>

627
00:45:11,639 --> 00:45:18,739
<font color="#E5E5E5">argument I'll just run the</font><font color="#CCCCCC"> big bit code</font>

628
00:45:15,809 --> 00:45:22,979
because<font color="#E5E5E5"> we have already made those</font>

629
00:45:18,739 --> 00:45:26,309
arguments<font color="#E5E5E5"> symbolic so it would be</font>

630
00:45:22,979 --> 00:45:31,919
something like Fox<font color="#E5E5E5"> where</font><font color="#CCCCCC"> underscored</font>

631
00:45:26,309 --> 00:45:34,529
<font color="#CCCCCC">Klee dot BC</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> okay so we have lots of</font>

632
00:45:31,919 --> 00:45:37,558
go<font color="#E5E5E5"> away if it's really angry at us but</font>

633
00:45:34,529 --> 00:45:39,319
let's let me see okay I<font color="#E5E5E5"> did do I see</font>

634
00:45:37,559 --> 00:45:42,499
something<font color="#CCCCCC"> here</font>

635
00:45:39,319 --> 00:45:51,479
welcome to the admin console<font color="#E5E5E5"> so</font>

636
00:45:42,499 --> 00:45:57,979
obviously I would just go<font color="#CCCCCC"> caters tool P</font>

637
00:45:51,479 --> 00:45:57,979
<font color="#E5E5E5">- latest star dot er</font><font color="#CCCCCC"> are what</font>

638
00:46:21,730 --> 00:46:33,880
oh yes<font color="#E5E5E5"> okay so clean figured out that</font>

639
00:46:27,850 --> 00:46:36,370
<font color="#E5E5E5">that</font><font color="#CCCCCC"> key in just three tries so the</font>

640
00:46:33,880 --> 00:46:39,340
first one was something<font color="#E5E5E5"> we can look it</font>

641
00:46:36,370 --> 00:46:41,259
up<font color="#E5E5E5"> but then on the third try it it kind</font>

642
00:46:39,340 --> 00:46:44,140
of figured out what is the key<font color="#E5E5E5"> so that's</font>

643
00:46:41,260 --> 00:46:46,330
the best<font color="#E5E5E5"> thing about</font><font color="#CCCCCC"> clean you it's not</font>

644
00:46:44,140 --> 00:46:48,700
<font color="#E5E5E5">a brute</font><font color="#CCCCCC"> force solution it knows what it</font>

645
00:46:46,330 --> 00:46:52,450
is doing<font color="#E5E5E5"> and since it was a simple</font>

646
00:46:48,700 --> 00:46:54,129
<font color="#E5E5E5">strength comparison it knows that mango</font>

647
00:46:52,450 --> 00:46:55,359
equals mango<font color="#E5E5E5"> there is nothing that</font>

648
00:46:54,130 --> 00:46:57,760
equals to mango

649
00:46:55,360 --> 00:47:03,730
I really like<font color="#E5E5E5"> mango so I don't know why</font>

650
00:46:57,760 --> 00:47:15,090
I<font color="#E5E5E5"> said that okay</font><font color="#CCCCCC"> so let's look up what</font>

651
00:47:03,730 --> 00:47:18,970
this is<font color="#E5E5E5"> get a stool okay so so sneaky</font>

652
00:47:15,090 --> 00:47:21,640
<font color="#E5E5E5">again so we solved it with anger we</font>

653
00:47:18,970 --> 00:47:25,230
solved it<font color="#CCCCCC"> plea and you</font><font color="#E5E5E5"> found that this</font>

654
00:47:21,640 --> 00:47:29,100
is<font color="#CCCCCC"> pretty easy</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> do this</font><font color="#E5E5E5"> is black magic</font>

655
00:47:25,230 --> 00:47:36,880
so I guess<font color="#E5E5E5"> hi that's all the time I have</font>

656
00:47:29,100 --> 00:47:39,880
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> I will just do some slides</font><font color="#E5E5E5"> okay so</font>

657
00:47:36,880 --> 00:47:43,510
what<font color="#E5E5E5"> are the limitations</font><font color="#CCCCCC"> of click path</font>

658
00:47:39,880 --> 00:47:45,400
explosion if we have n number<font color="#CCCCCC"> of parts</font>

659
00:47:43,510 --> 00:47:47,770
and if you have obfuscation in the

660
00:47:45,400 --> 00:47:50,320
binary<font color="#E5E5E5"> the clean</font><font color="#CCCCCC"> would it's</font><font color="#E5E5E5"> not a</font>

661
00:47:47,770 --> 00:47:54,220
limitation<font color="#CCCCCC"> is just a</font><font color="#E5E5E5"> restriction that</font>

662
00:47:50,320 --> 00:47:56,350
the<font color="#E5E5E5"> hardware is imposed</font><font color="#CCCCCC"> because it just</font>

663
00:47:54,220 --> 00:47:58,540
takes<font color="#CCCCCC"> so much time</font><font color="#E5E5E5"> for clay to solve</font>

664
00:47:56,350 --> 00:48:01,270
everything<font color="#E5E5E5"> so when you are trying this</font>

665
00:47:58,540 --> 00:48:04,570
out<font color="#E5E5E5"> in city of are in your products and</font>

666
00:48:01,270 --> 00:48:06,130
if you have the source code<font color="#CCCCCC"> try to do it</font>

667
00:48:04,570 --> 00:48:08,830
with your source code<font color="#E5E5E5"> or if you don't</font>

668
00:48:06,130 --> 00:48:11,200
have the source code<font color="#CCCCCC"> try to single</font><font color="#E5E5E5"> out</font>

669
00:48:08,830 --> 00:48:13,390
that<font color="#E5E5E5"> particular function which is</font>

670
00:48:11,200 --> 00:48:15,669
critical<font color="#E5E5E5"> and just try to solve it</font>

671
00:48:13,390 --> 00:48:18,220
don't try to symbolically execute the

672
00:48:15,670 --> 00:48:19,870
bold program<font color="#CCCCCC"> so that's</font><font color="#E5E5E5"> something</font><font color="#CCCCCC"> that we</font>

673
00:48:18,220 --> 00:48:23,410
<font color="#CCCCCC">should take</font><font color="#E5E5E5"> care</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> just</font>

674
00:48:19,870 --> 00:48:26,740
<font color="#CCCCCC">adds so much time try</font><font color="#E5E5E5"> to minimize the</font>

675
00:48:23,410 --> 00:48:29,109
function as much as possible<font color="#E5E5E5"> and don't</font>

676
00:48:26,740 --> 00:48:30,640
try to figure<font color="#E5E5E5"> out what</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> sha-1 hash of</font>

677
00:48:29,110 --> 00:48:33,849
whatever<font color="#E5E5E5"> be using symbolic</font><font color="#CCCCCC"> execution</font>

678
00:48:30,640 --> 00:48:37,959
<font color="#CCCCCC">because that will</font><font color="#E5E5E5"> take forever</font>

679
00:48:33,849 --> 00:48:40,269
and program depend efficiency because if

680
00:48:37,959 --> 00:48:42,308
the program happens<font color="#E5E5E5"> to take just a</font>

681
00:48:40,269 --> 00:48:44,379
single<font color="#CCCCCC"> part the whole point of</font><font color="#E5E5E5"> doing</font>

682
00:48:42,309 --> 00:48:46,930
symbolic execution is lost because<font color="#CCCCCC"> it's</font>

683
00:48:44,380 --> 00:48:49,390
about taking multiple paths and figuring

684
00:48:46,930 --> 00:48:51,279
out the different<font color="#CCCCCC"> solutions the</font>

685
00:48:49,390 --> 00:48:54,160
environment interactions are right now

686
00:48:51,279 --> 00:48:56,650
limited to<font color="#E5E5E5"> file operation sockets IPC</font>

687
00:48:54,160 --> 00:48:58,538
etc so if you have if you<font color="#CCCCCC"> have a program</font>

688
00:48:56,650 --> 00:49:00,219
<font color="#CCCCCC">that does something</font><font color="#E5E5E5"> else that part of</font>

689
00:48:58,539 --> 00:49:02,410
the program<font color="#CCCCCC"> might not be symbolically</font>

690
00:49:00,219 --> 00:49:07,180
executed so that's something<font color="#E5E5E5"> that we</font>

691
00:49:02,410 --> 00:49:10,449
have to take care<font color="#E5E5E5"> of and countermeasures</font>

692
00:49:07,180 --> 00:49:12,819
<font color="#E5E5E5">this is something that people keep</font>

693
00:49:10,449 --> 00:49:16,509
asking<font color="#E5E5E5"> me so it's not really an at that</font>

694
00:49:12,819 --> 00:49:19,749
it's<font color="#E5E5E5"> just a way of doing things and if</font>

695
00:49:16,509 --> 00:49:22,599
you<font color="#CCCCCC"> happen to have</font><font color="#E5E5E5"> a license validation</font>

696
00:49:19,749 --> 00:49:24,339
in your program<font color="#E5E5E5"> symbolic execution might</font>

697
00:49:22,599 --> 00:49:28,539
be something that<font color="#CCCCCC"> you should care</font><font color="#E5E5E5"> about</font>

698
00:49:24,339 --> 00:49:31,058
<font color="#E5E5E5">so code obfuscation</font><font color="#CCCCCC"> and not just jargon</font>

699
00:49:28,539 --> 00:49:33,910
as and you just<font color="#E5E5E5"> don't put in jargon code</font>

700
00:49:31,059 --> 00:49:37,660
which is dead good because it<font color="#E5E5E5"> Klee has</font>

701
00:49:33,910 --> 00:49:40,029
this<font color="#CCCCCC"> a dead code elimination thing so</font>

702
00:49:37,660 --> 00:49:42,279
they they<font color="#CCCCCC"> both they'll just skip ahead</font>

703
00:49:40,029 --> 00:49:44,349
that dead code so if you have code<font color="#CCCCCC"> that</font>

704
00:49:42,279 --> 00:49:47,229
depends<font color="#E5E5E5"> upon the</font><font color="#CCCCCC"> input</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> that's some</font>

705
00:49:44,349 --> 00:49:49,059
transformations<font color="#E5E5E5"> and then you can make it</font>

706
00:49:47,229 --> 00:49:51,129
to use something<font color="#CCCCCC"> like a path explosion</font>

707
00:49:49,059 --> 00:49:54,069
and make it really<font color="#CCCCCC"> difficult for</font><font color="#E5E5E5"> a</font>

708
00:49:51,130 --> 00:49:56,529
symbolic<font color="#E5E5E5"> execution engine to pass it in</font>

709
00:49:54,069 --> 00:49:59,038
limited time<font color="#E5E5E5"> so that's the best you can</font>

710
00:49:56,529 --> 00:50:03,309
do<font color="#E5E5E5"> and this is a research paper that</font>

711
00:49:59,039 --> 00:50:05,019
<font color="#E5E5E5">talks in much more detail I don't really</font>

712
00:50:03,309 --> 00:50:13,470
have<font color="#CCCCCC"> the time to go in detail about that</font>

713
00:50:05,019 --> 00:50:14,950
<font color="#E5E5E5">and yeah I guess</font>

714
00:50:13,470 --> 00:50:29,209
[Music]

715
00:50:14,950 --> 00:50:30,770
yep<font color="#E5E5E5"> thank you so if you have I think I</font>

716
00:50:29,210 --> 00:50:34,750
am running<font color="#E5E5E5"> out of time</font>

717
00:50:30,770 --> 00:50:34,750
<font color="#E5E5E5">so if you have any questions I'll</font><font color="#CCCCCC"> be</font>

