1
00:00:00,920 --> 00:00:04,130
[Music]

2
00:00:08,119 --> 00:00:14,190
so welcome err well welcome again and

3
00:00:11,639 --> 00:00:17,609
this is the last presentation on the

4
00:00:14,190 --> 00:00:21,840
event and today I'm gonna talk about

5
00:00:17,609 --> 00:00:23,400
attacking AWS and the kill chain I'm

6
00:00:21,840 --> 00:00:26,250
going to present is a little bit

7
00:00:23,400 --> 00:00:28,470
interactive and if you want to decide

8
00:00:26,250 --> 00:00:32,000
which steps should be taken please

9
00:00:28,470 --> 00:00:36,030
follow this link slides should be

10
00:00:32,000 --> 00:00:38,610
changed automatically should me because

11
00:00:36,030 --> 00:00:42,059
this is the first this is my experiment

12
00:00:38,610 --> 00:00:47,489
with this presentation so we'll see how

13
00:00:42,059 --> 00:00:50,190
it works with you so I'm working in

14
00:00:47,489 --> 00:00:53,120
securing company and I'm doing on my

15
00:00:50,190 --> 00:00:57,530
daily basis I'm doing penetration tests

16
00:00:53,120 --> 00:01:00,030
and also cloud security assessment and

17
00:00:57,530 --> 00:01:06,270
regarding this cloud security assessment

18
00:01:00,030 --> 00:01:08,640
today I will share my experience so the

19
00:01:06,270 --> 00:01:10,920
link to the interactive part you can see

20
00:01:08,640 --> 00:01:14,820
here it is still the same on every

21
00:01:10,920 --> 00:01:17,280
question so it is not changed but my

22
00:01:14,820 --> 00:01:21,298
first question to you is how comfortable

23
00:01:17,280 --> 00:01:23,880
do you feel in AWS so we'll give you a

24
00:01:21,299 --> 00:01:28,110
little moment for for making a decision

25
00:01:23,880 --> 00:01:30,798
on your smart phones or laptops so let's

26
00:01:28,110 --> 00:01:30,799
see the results

27
00:01:31,100 --> 00:01:39,630
whoops sorry

28
00:01:33,229 --> 00:01:44,189
here's the question so yeah make it make

29
00:01:39,630 --> 00:01:46,939
a decision and yeah let's let's let's

30
00:01:44,189 --> 00:01:46,939
see the results

31
00:01:53,180 --> 00:02:07,200
sorry yeah so my impression is that a

32
00:02:03,210 --> 00:02:10,530
lot of security folks well while they

33
00:02:07,200 --> 00:02:13,850
are well there are cool in any other

34
00:02:10,530 --> 00:02:18,570
security field in cloud there is a big

35
00:02:13,850 --> 00:02:23,820
big gap so let's see how it works for

36
00:02:18,570 --> 00:02:32,660
you now we can see the we should see the

37
00:02:23,820 --> 00:02:37,190
results so yeah most of the most of you

38
00:02:32,660 --> 00:02:39,930
vote for I use it from time to time and

39
00:02:37,190 --> 00:02:46,650
basically that's the same impression I

40
00:02:39,930 --> 00:02:48,959
have however more and more companies are

41
00:02:46,650 --> 00:02:51,240
going into cloud and we can see on the

42
00:02:48,959 --> 00:02:53,959
global market of cloud computing so

43
00:02:51,240 --> 00:02:56,540
every year more and more companies are

44
00:02:53,959 --> 00:03:00,480
putting their services into cloud

45
00:02:56,540 --> 00:03:04,470
however they don't realize about the

46
00:03:00,480 --> 00:03:08,730
security risks related with clouds so

47
00:03:04,470 --> 00:03:11,459
the first example is from Tesla so they

48
00:03:08,730 --> 00:03:15,420
basically they put the kubernetes

49
00:03:11,459 --> 00:03:17,459
console and this console was publicly

50
00:03:15,420 --> 00:03:20,880
available without any authentication

51
00:03:17,459 --> 00:03:23,570
this console was for managing their

52
00:03:20,880 --> 00:03:27,000
applications which were hosted on cloud

53
00:03:23,570 --> 00:03:30,049
but so for for managing those

54
00:03:27,000 --> 00:03:34,739
applications they had to give the proper

55
00:03:30,049 --> 00:03:38,010
permissions those permissions so the AWS

56
00:03:34,739 --> 00:03:42,600
access keys were taken by the attackers

57
00:03:38,010 --> 00:03:46,019
and they put cryptocurrency miner for

58
00:03:42,600 --> 00:03:51,680
what it was paid by Tesla so Tesla paid

59
00:03:46,019 --> 00:03:56,160
for for this and articles get money

60
00:03:51,680 --> 00:03:58,920
another example is from uber so they the

61
00:03:56,160 --> 00:04:02,190
articles gained access to their private

62
00:03:58,920 --> 00:04:04,890
repository in github and they saw that

63
00:04:02,190 --> 00:04:10,380
in their in their code there are

64
00:04:04,890 --> 00:04:14,549
coded AWS secrets so using those AWS

65
00:04:10,380 --> 00:04:19,680
secrets they were able to link data

66
00:04:14,550 --> 00:04:22,890
about the ubers customers but it can be

67
00:04:19,680 --> 00:04:25,919
worse and here's the example how such

68
00:04:22,890 --> 00:04:30,300
situation hypothetically may look like

69
00:04:25,919 --> 00:04:32,669
so manager want to you know want to sell

70
00:04:30,300 --> 00:04:36,480
everything when do you have as much

71
00:04:32,669 --> 00:04:39,630
power as much money as possible so the

72
00:04:36,480 --> 00:04:42,890
customer asked about AWS expertise but

73
00:04:39,630 --> 00:04:48,900
the developers didn't have it so the

74
00:04:42,890 --> 00:04:52,110
manager found a great a great idea to

75
00:04:48,900 --> 00:04:57,060
put their testing environment into cloud

76
00:04:52,110 --> 00:05:01,800
so developers can learn AWS on the on

77
00:04:57,060 --> 00:05:05,330
the live organism but in the other end

78
00:05:01,800 --> 00:05:09,450
of the internet there's a hacker man who

79
00:05:05,330 --> 00:05:15,900
in this presentation will be you so the

80
00:05:09,450 --> 00:05:18,810
application looks like like this so this

81
00:05:15,900 --> 00:05:20,669
is the application on the on the testing

82
00:05:18,810 --> 00:05:23,580
environment and basically you are

83
00:05:20,669 --> 00:05:27,690
putting a domain name and then in the

84
00:05:23,580 --> 00:05:31,859
output like Google PL and in the output

85
00:05:27,690 --> 00:05:34,530
the application gives you all the threat

86
00:05:31,860 --> 00:05:39,690
artifacts related with this with the

87
00:05:34,530 --> 00:05:40,890
certain domain this output if you know

88
00:05:39,690 --> 00:05:43,460
the webpage

89
00:05:40,890 --> 00:05:47,520
Fred crowd dot org this example is

90
00:05:43,460 --> 00:05:53,310
written in hacker one so I took it to

91
00:05:47,520 --> 00:05:55,890
show you what may go wrong so if you put

92
00:05:53,310 --> 00:06:00,360
instead of the main name the IP address

93
00:05:55,890 --> 00:06:05,250
you can see that it is reflected so this

94
00:06:00,360 --> 00:06:08,720
is this is the first hint and what is

95
00:06:05,250 --> 00:06:13,560
more there are publicly available

96
00:06:08,720 --> 00:06:16,800
AWS IP ranges so based on the IP address

97
00:06:13,560 --> 00:06:18,590
you can know what AWS service is

98
00:06:16,800 --> 00:06:21,650
actually used by disciple

99
00:06:18,590 --> 00:06:26,690
address and you can see that our domain

100
00:06:21,650 --> 00:06:30,770
analytics dot online uses this range so

101
00:06:26,690 --> 00:06:35,060
it's the region and the elastic cloud

102
00:06:30,770 --> 00:06:38,539
computing service if you want to find

103
00:06:35,060 --> 00:06:43,600
it's in JSON format and the tool to easy

104
00:06:38,540 --> 00:06:47,500
to reach ability test here are the links

105
00:06:43,600 --> 00:06:50,570
so what do we have the hacker man I'll

106
00:06:47,500 --> 00:06:53,780
just draw the picture so we have the web

107
00:06:50,570 --> 00:06:56,120
application which is publicly available

108
00:06:53,780 --> 00:07:01,299
so the security group is like the

109
00:06:56,120 --> 00:07:04,460
firewall in a in AWS in Asia also and

110
00:07:01,300 --> 00:07:07,180
you have to explicitly define that this

111
00:07:04,460 --> 00:07:12,859
port will be open so it is hosted in

112
00:07:07,180 --> 00:07:15,440
elastic cloud computing so now question

113
00:07:12,860 --> 00:07:17,630
to you what would you do find

114
00:07:15,440 --> 00:07:19,400
vulnerability in the web application or

115
00:07:17,630 --> 00:07:23,120
rather find vulnerability in other

116
00:07:19,400 --> 00:07:32,109
services please vote I will give you a

117
00:07:23,120 --> 00:07:32,110
moment and let's see the results

118
00:07:44,110 --> 00:07:53,479
yeah well yeah

119
00:07:48,800 --> 00:07:56,599
Dino's so I can see well you can see on

120
00:07:53,479 --> 00:07:58,998
your smartphones the results so most of

121
00:07:56,599 --> 00:08:02,438
you find vulnerability in the web

122
00:07:58,999 --> 00:08:06,219
application so let's see

123
00:08:02,439 --> 00:08:12,409
so which vulnerability you may you think

124
00:08:06,219 --> 00:08:14,930
that is more beneficial from the ethical

125
00:08:12,409 --> 00:08:18,849
perspective cross-site scripting or

126
00:08:14,930 --> 00:08:18,849
rather server site request forgery

127
00:08:20,620 --> 00:08:26,770
please vote and let's see the results so

128
00:08:26,919 --> 00:08:30,859
most of you yeah

129
00:08:28,939 --> 00:08:32,979
that's the correct answer most of you

130
00:08:30,860 --> 00:08:35,089
choose the server site request forgery

131
00:08:32,979 --> 00:08:37,550
cross-site scripting is the client-side

132
00:08:35,089 --> 00:08:46,459
attack so nothing fancy with attacking

133
00:08:37,549 --> 00:08:52,279
cloud infrastructure so let's see so we

134
00:08:46,459 --> 00:08:55,609
have here the web application so we can

135
00:08:52,279 --> 00:08:58,279
change the address to the address 169

136
00:08:55,610 --> 00:09:03,380
two five four one sixty nine to five for

137
00:08:58,279 --> 00:09:05,779
what is special about this address this

138
00:09:03,380 --> 00:09:08,209
is actually link local address which is

139
00:09:05,779 --> 00:09:11,570
actually accessible only from the

140
00:09:08,209 --> 00:09:16,550
elastic cloud computing instance so it's

141
00:09:11,570 --> 00:09:19,089
not root of all and the same and it's

142
00:09:16,550 --> 00:09:22,969
the same for all elastic cloud computing

143
00:09:19,089 --> 00:09:26,089
instances and other AWS services using

144
00:09:22,970 --> 00:09:28,220
it you can refer to the identity and

145
00:09:26,089 --> 00:09:32,300
access management which actually means

146
00:09:28,220 --> 00:09:34,390
that you can access the instance profile

147
00:09:32,300 --> 00:09:36,829
and get permissions so using the

148
00:09:34,390 --> 00:09:41,240
vulnerabilities like server site request

149
00:09:36,829 --> 00:09:44,779
forgery and XML external entity or

150
00:09:41,240 --> 00:09:47,329
remote code execution you can find that

151
00:09:44,779 --> 00:09:53,180
there is a web server role and when you

152
00:09:47,329 --> 00:09:56,870
go there you will see the holy grail so

153
00:09:53,180 --> 00:10:00,709
there are the AWS keys which are

154
00:09:56,870 --> 00:10:03,460
used by the instance to allow them for

155
00:10:00,710 --> 00:10:11,029
some actions let's go

156
00:10:03,460 --> 00:10:13,880
but what is actually metadata metadata

157
00:10:11,029 --> 00:10:16,070
are is the information about the

158
00:10:13,880 --> 00:10:19,670
instance so any internal information

159
00:10:16,070 --> 00:10:25,190
about a about the instance like internal

160
00:10:19,670 --> 00:10:28,510
IP addresses like hostname but and its

161
00:10:25,190 --> 00:10:32,330
link local address what means it is

162
00:10:28,510 --> 00:10:35,689
accessible only from the one which works

163
00:10:32,330 --> 00:10:38,620
only in the one network segment from the

164
00:10:35,690 --> 00:10:42,650
security perspective the most valuable

165
00:10:38,620 --> 00:10:44,570
part is going into ID and access

166
00:10:42,650 --> 00:10:51,140
management security credentials and

167
00:10:44,570 --> 00:10:54,589
there is stored the AWS access keys so

168
00:10:51,140 --> 00:10:58,279
let's sum up actually if you choose

169
00:10:54,589 --> 00:11:02,510
other path there there is actually all

170
00:10:58,279 --> 00:11:05,900
ports are open so security group is set

171
00:11:02,510 --> 00:11:09,170
to be publicly available but using this

172
00:11:05,900 --> 00:11:11,600
you can access the instance profile so

173
00:11:09,170 --> 00:11:13,969
let's say the web application gives you

174
00:11:11,600 --> 00:11:17,779
the functionality of uploading files

175
00:11:13,970 --> 00:11:22,550
then you have to give the ac2 permission

176
00:11:17,779 --> 00:11:26,450
to write objects to for example as free

177
00:11:22,550 --> 00:11:29,810
bucket let's see but we don't know what

178
00:11:26,450 --> 00:11:32,900
we are allowed to do with that so here's

179
00:11:29,810 --> 00:11:36,290
the PACU and the PACU is like the

180
00:11:32,900 --> 00:11:39,800
Metasploit for clouds so it's very

181
00:11:36,290 --> 00:11:43,099
similar and guys from Rhyno security

182
00:11:39,800 --> 00:11:48,979
labs they are inspired by Metasploit and

183
00:11:43,100 --> 00:11:51,860
we will be using it a lot today so let

184
00:11:48,980 --> 00:11:56,720
me show you what how how the pack look

185
00:11:51,860 --> 00:12:00,080
like it's written in Python 3 you can

186
00:11:56,720 --> 00:12:03,140
set your you can choose the name for

187
00:12:00,080 --> 00:12:06,620
each session so what is cool because if

188
00:12:03,140 --> 00:12:09,339
you are doing like me parallely a few

189
00:12:06,620 --> 00:12:10,610
projects then all the findings are

190
00:12:09,339 --> 00:12:14,559
separate

191
00:12:10,610 --> 00:12:18,889
from each other so what do we have here

192
00:12:14,559 --> 00:12:22,219
you can you can list all the modules by

193
00:12:18,889 --> 00:12:24,949
simply comment alas if you don't know

194
00:12:22,220 --> 00:12:28,730
what the module means then use help all

195
00:12:24,949 --> 00:12:34,219
the output from this forum enumeration

196
00:12:28,730 --> 00:12:37,970
is accessible using data so you can take

197
00:12:34,220 --> 00:12:42,949
the keys you found and import it to the

198
00:12:37,970 --> 00:12:49,399
PACU so let's do it here I will call I

199
00:12:42,949 --> 00:12:53,269
will call our victim Daisy to pivot then

200
00:12:49,399 --> 00:12:56,239
you are then you are just putting the

201
00:12:53,269 --> 00:12:58,279
access key ID secret access key and the

202
00:12:56,239 --> 00:13:02,679
security token because instance profiles

203
00:12:58,279 --> 00:13:06,920
also use STS token which is required

204
00:13:02,679 --> 00:13:10,670
which expires so from time to time you

205
00:13:06,920 --> 00:13:13,160
have to use it then you can set region

206
00:13:10,670 --> 00:13:18,799
and we know that our application our

207
00:13:13,160 --> 00:13:22,639
target is based in European region here

208
00:13:18,799 --> 00:13:26,389
are just just quickly what modules you

209
00:13:22,639 --> 00:13:30,290
can find so a lot of modules for

210
00:13:26,389 --> 00:13:35,089
enumeration for privilege escalation for

211
00:13:30,290 --> 00:13:36,980
lateral movement and to exploit we will

212
00:13:35,089 --> 00:13:38,980
use couple of them so you will see them

213
00:13:36,980 --> 00:13:44,389
in action

214
00:13:38,980 --> 00:13:47,029
alright so how to enumerate permissions

215
00:13:44,389 --> 00:13:49,100
in PACU there's a module called Identity

216
00:13:47,029 --> 00:13:52,369
and Access Management anyone permissions

217
00:13:49,100 --> 00:13:54,970
and using it you can display the

218
00:13:52,369 --> 00:14:00,259
permissions which you are allowed to do

219
00:13:54,970 --> 00:14:02,509
but to be able to display although all

220
00:14:00,259 --> 00:14:06,259
your permissions you have to have

221
00:14:02,509 --> 00:14:08,929
assigned those two permissions for these

222
00:14:06,259 --> 00:14:11,689
two actions which is actually at least

223
00:14:08,929 --> 00:14:15,019
from my experience it seems that it is

224
00:14:11,689 --> 00:14:20,410
very there is a little possibility to

225
00:14:15,019 --> 00:14:20,410
find it in the instance profile but

226
00:14:22,500 --> 00:14:31,020
so here's the another question what we

227
00:14:26,940 --> 00:14:33,570
can do if we don't have any identity and

228
00:14:31,020 --> 00:14:34,140
access management permissions what can

229
00:14:33,570 --> 00:14:37,890
we do

230
00:14:34,140 --> 00:14:40,189
we found keys what what what is the next

231
00:14:37,890 --> 00:14:40,189
step

232
00:14:44,150 --> 00:14:52,079
there's an own exploit well the sad

233
00:14:48,480 --> 00:14:54,390
thing is there is not any known exploit

234
00:14:52,080 --> 00:14:57,090
and the only thing you can do is

235
00:14:54,390 --> 00:15:00,510
actually brute forcing permissions which

236
00:14:57,090 --> 00:15:06,990
is super loud but if the configuration

237
00:15:00,510 --> 00:15:09,000
is is bad then you can you can run the

238
00:15:06,990 --> 00:15:11,850
Identity and Access Management brute

239
00:15:09,000 --> 00:15:15,420
force permissions and simply brute force

240
00:15:11,850 --> 00:15:17,730
operations in Paco only supported

241
00:15:15,420 --> 00:15:20,819
services is the elastic cloud computing

242
00:15:17,730 --> 00:15:23,640
and simple storage service and if to

243
00:15:20,820 --> 00:15:27,180
enumerate permissions for other services

244
00:15:23,640 --> 00:15:32,610
you can use just just a simple script to

245
00:15:27,180 --> 00:15:36,239
try every action and in fact it seems

246
00:15:32,610 --> 00:15:39,150
that for our web server role there's a

247
00:15:36,240 --> 00:15:41,640
site policy which allows for any action

248
00:15:39,150 --> 00:15:45,650
in elastic cloud computing and this

249
00:15:41,640 --> 00:15:48,600
wildcard is super common developers

250
00:15:45,650 --> 00:15:52,949
developers prefers to put a wild-card

251
00:15:48,600 --> 00:15:55,800
because then it always work so you don't

252
00:15:52,950 --> 00:15:58,380
have to you know specify each each

253
00:15:55,800 --> 00:16:00,300
action just a wild card and it just

254
00:15:58,380 --> 00:16:07,290
works it's a testing environment right

255
00:16:00,300 --> 00:16:09,719
so what's the risk in PACU again we we

256
00:16:07,290 --> 00:16:14,099
are using the elastic cloud computing a

257
00:16:09,720 --> 00:16:17,880
new module which is actually taking all

258
00:16:14,100 --> 00:16:22,800
the information using your keys about

259
00:16:17,880 --> 00:16:26,160
any other services about the ec2 service

260
00:16:22,800 --> 00:16:30,630
then we can access it using data in situ

261
00:16:26,160 --> 00:16:33,510
so what what did we find there's a

262
00:16:30,630 --> 00:16:35,490
stopped instance with the ID like this

263
00:16:33,510 --> 00:16:37,709
but this time

264
00:16:35,490 --> 00:16:41,730
the stopped I stopped instance have

265
00:16:37,709 --> 00:16:45,119
assigned admin profile and actually this

266
00:16:41,730 --> 00:16:49,170
example is taken from from one of our

267
00:16:45,120 --> 00:16:52,220
customer so let's see on this great

268
00:16:49,170 --> 00:16:56,760
picture so we found the web server role

269
00:16:52,220 --> 00:17:01,040
there is stopped instance we we know

270
00:16:56,760 --> 00:17:07,470
that there is a stopped instance but the

271
00:17:01,040 --> 00:17:12,659
what can we do question to you yeah

272
00:17:07,470 --> 00:17:15,179
please vote what would you do with in

273
00:17:12,660 --> 00:17:18,240
such scenario either you will run the

274
00:17:15,179 --> 00:17:22,350
ec2 instance completely new with the SSH

275
00:17:18,240 --> 00:17:31,770
keys or you will update the user data of

276
00:17:22,349 --> 00:17:37,169
the stopped instance let's see update

277
00:17:31,770 --> 00:17:39,480
user data exactly first of all first of

278
00:17:37,170 --> 00:17:43,140
all what is user data it's the list of

279
00:17:39,480 --> 00:17:49,100
bash bash comments which will be

280
00:17:43,140 --> 00:17:52,980
executed once the instance is is started

281
00:17:49,100 --> 00:17:55,139
but it will be run only once but there

282
00:17:52,980 --> 00:17:57,690
is a special trick how to do that this

283
00:17:55,140 --> 00:18:04,100
user data will be run every time the

284
00:17:57,690 --> 00:18:04,100
instance is restarted so let's do it

285
00:18:04,670 --> 00:18:16,500
sorry this one yeah so in PACU there's a

286
00:18:15,300 --> 00:18:18,629
module called

287
00:18:16,500 --> 00:18:22,350
easy to startup shell script which will

288
00:18:18,630 --> 00:18:26,130
basically update user data for you so

289
00:18:22,350 --> 00:18:28,169
what can we do yeah so let's see the

290
00:18:26,130 --> 00:18:31,050
help of this module you are given a

291
00:18:28,170 --> 00:18:33,120
script so what actions what bash

292
00:18:31,050 --> 00:18:36,200
comments should be executed once the

293
00:18:33,120 --> 00:18:40,500
instance is restarted and an instance ID

294
00:18:36,200 --> 00:18:46,429
in size of our stopped ID so here I'm

295
00:18:40,500 --> 00:18:49,170
verifying my external IP address and

296
00:18:46,429 --> 00:18:51,630
knowing that I created the

297
00:18:49,170 --> 00:18:53,490
shell which is basically the Bosch

298
00:18:51,630 --> 00:18:56,550
one-liner which gives me the reverse

299
00:18:53,490 --> 00:19:02,210
shell okay so I'm starting the netcat

300
00:18:56,550 --> 00:19:06,780
listener and I'm listening for only port

301
00:19:02,210 --> 00:19:10,200
then I'm starting the module easy to

302
00:19:06,780 --> 00:19:14,610
startup shell script to update user data

303
00:19:10,200 --> 00:19:17,610
with the ref shell and yeah we got the

304
00:19:14,610 --> 00:19:21,290
output that instance is modified so if

305
00:19:17,610 --> 00:19:26,280
we are lucky this rep shell should be

306
00:19:21,290 --> 00:19:30,180
given to our hacker man it takes a

307
00:19:26,280 --> 00:19:32,490
little if you are familiar with starting

308
00:19:30,180 --> 00:19:36,960
issue two instances you know that it is

309
00:19:32,490 --> 00:19:39,350
not work it it doesn't work like very

310
00:19:36,960 --> 00:19:44,670
quickly but you have to give it a time

311
00:19:39,350 --> 00:19:49,590
and now what is what is the trick okay

312
00:19:44,670 --> 00:19:51,920
let's wait with this so a little little

313
00:19:49,590 --> 00:19:51,919
pulse

314
00:19:53,300 --> 00:20:03,870
as I said it's starting quit but yeah we

315
00:19:59,310 --> 00:20:06,030
finally got the the shell so again using

316
00:20:03,870 --> 00:20:08,969
the same trick we can access the

317
00:20:06,030 --> 00:20:11,760
metadata but this time gained the

318
00:20:08,970 --> 00:20:16,830
credentials of instance profile which is

319
00:20:11,760 --> 00:20:19,920
called admin so the trick I told you

320
00:20:16,830 --> 00:20:24,090
that it will allow for running the the

321
00:20:19,920 --> 00:20:27,030
instance running the user data every

322
00:20:24,090 --> 00:20:29,760
time you restart the machine is to add

323
00:20:27,030 --> 00:20:31,950
the directive cloud boot hook once you

324
00:20:29,760 --> 00:20:34,020
add it in the beginning of user data it

325
00:20:31,950 --> 00:20:37,860
will be every time executed once you

326
00:20:34,020 --> 00:20:40,560
restart the machine so let's let's

327
00:20:37,860 --> 00:20:42,510
summary so using the web server role

328
00:20:40,560 --> 00:20:43,560
which we get using the server side

329
00:20:42,510 --> 00:20:46,470
request forgery

330
00:20:43,560 --> 00:20:48,929
we started easy to stop easy to way

331
00:20:46,470 --> 00:20:51,840
change the user data which gave us the

332
00:20:48,930 --> 00:20:57,330
reverse shell and finally we got the

333
00:20:51,840 --> 00:20:59,550
admin permissions now we got admin

334
00:20:57,330 --> 00:21:00,929
permissions but that's not the end of

335
00:20:59,550 --> 00:21:06,210
the story

336
00:21:00,930 --> 00:21:09,210
by default the AWS cloud trail service

337
00:21:06,210 --> 00:21:12,620
is responsible for logging all the

338
00:21:09,210 --> 00:21:16,410
actions and by default it monitors all

339
00:21:12,620 --> 00:21:19,110
AWS regions and the logs is going into

340
00:21:16,410 --> 00:21:22,410
this free bucket so what the article can

341
00:21:19,110 --> 00:21:24,899
do there is a special flag which I will

342
00:21:22,410 --> 00:21:27,390
show you in a moment that you can set

343
00:21:24,900 --> 00:21:30,870
the cloud trail to observe only one

344
00:21:27,390 --> 00:21:34,110
region so if the administrators works

345
00:21:30,870 --> 00:21:38,010
only at work in only one region they

346
00:21:34,110 --> 00:21:41,040
will not they will don't see any any

347
00:21:38,010 --> 00:21:44,420
changes so the logs will be still given

348
00:21:41,040 --> 00:21:47,159
but you can do whatever you want in

349
00:21:44,420 --> 00:21:52,070
absolutely every region and it is not

350
00:21:47,160 --> 00:21:55,020
detected by the by the administrators

351
00:21:52,070 --> 00:21:57,480
what else you can you can remove the as

352
00:21:55,020 --> 00:22:00,600
free bucket but it is pretty pretty loud

353
00:21:57,480 --> 00:22:06,390
or you can disable cloud train service

354
00:22:00,600 --> 00:22:09,149
which is also quite loud so again with

355
00:22:06,390 --> 00:22:12,000
PACU there's a module which is called

356
00:22:09,150 --> 00:22:15,780
detection and new services so using the

357
00:22:12,000 --> 00:22:18,900
admin account I'm running the detection

358
00:22:15,780 --> 00:22:21,780
anam services to get all the information

359
00:22:18,900 --> 00:22:28,320
about the cloud trail settings and cloud

360
00:22:21,780 --> 00:22:32,520
wood settings in a moment you can see

361
00:22:28,320 --> 00:22:35,090
that the PACU we discovered that there

362
00:22:32,520 --> 00:22:38,580
is a one cloud train service set and

363
00:22:35,090 --> 00:22:42,240
there is the cloud watch alarm also

364
00:22:38,580 --> 00:22:45,570
found so using the data cloud trail you

365
00:22:42,240 --> 00:22:48,390
can get the configuration so include

366
00:22:45,570 --> 00:22:53,189
global service events it is set to true

367
00:22:48,390 --> 00:22:55,770
which means it monitors all the regions

368
00:22:53,190 --> 00:23:00,420
so then we are running the module

369
00:22:55,770 --> 00:23:03,000
detection disruption thanks to which you

370
00:23:00,420 --> 00:23:05,940
can not only disable or delete cloud

371
00:23:03,000 --> 00:23:10,710
trails but you can minimize sir or also

372
00:23:05,940 --> 00:23:13,310
set those flags to only monitor only one

373
00:23:10,710 --> 00:23:13,310
region

374
00:23:15,280 --> 00:23:22,570
what is more that the service also

375
00:23:18,090 --> 00:23:25,149
discovered the be link alarm so building

376
00:23:22,570 --> 00:23:28,810
alarm is something that if you are for

377
00:23:25,150 --> 00:23:33,700
example used to get five dollars for all

378
00:23:28,810 --> 00:23:36,070
your AWS usage then if if someone will

379
00:23:33,700 --> 00:23:39,760
run the cryptocurrency miner you will

380
00:23:36,070 --> 00:23:42,280
quickly be notified that there is

381
00:23:39,760 --> 00:23:43,870
something bad but you can simply using

382
00:23:42,280 --> 00:23:47,080
the admin permissions you can of course

383
00:23:43,870 --> 00:23:52,810
simply just remove it and PACU allows

384
00:23:47,080 --> 00:23:56,439
for it so after running the minimize I

385
00:23:52,810 --> 00:24:01,300
again enumerate the monitoring services

386
00:23:56,440 --> 00:24:04,030
and then you can see that include global

387
00:24:01,300 --> 00:24:09,970
service events flock is set to false and

388
00:24:04,030 --> 00:24:12,639
the others also so now once we disabled

389
00:24:09,970 --> 00:24:16,630
all the monitoring services it's time

390
00:24:12,640 --> 00:24:20,680
for persisting access there are a few

391
00:24:16,630 --> 00:24:24,070
ways to do it but in my opinion that the

392
00:24:20,680 --> 00:24:27,670
most interesting ones is the add extra

393
00:24:24,070 --> 00:24:30,820
keys to existing users how does it look

394
00:24:27,670 --> 00:24:35,070
like you are running the I am backdoor

395
00:24:30,820 --> 00:24:40,570
users keys and then another keepers is

396
00:24:35,070 --> 00:24:43,840
assigned to each of the user what is

397
00:24:40,570 --> 00:24:48,010
actually not a bad but it is a Amazon

398
00:24:43,840 --> 00:24:50,560
feature so you can use it's a feature

399
00:24:48,010 --> 00:24:54,820
that you can use to separate keepers

400
00:24:50,560 --> 00:24:57,700
under one account and Amazon says that

401
00:24:54,820 --> 00:25:03,730
ok it's it's cool because thanks to it

402
00:24:57,700 --> 00:25:07,000
see they don't share the keys well I

403
00:25:03,730 --> 00:25:08,650
also want to show you how does it look

404
00:25:07,000 --> 00:25:10,870
like from the administrator perspective

405
00:25:08,650 --> 00:25:15,730
if you are using services like guard

406
00:25:10,870 --> 00:25:19,120
duty which are the intelligent threat

407
00:25:15,730 --> 00:25:22,870
detection service it will tell you

408
00:25:19,120 --> 00:25:26,770
nothing because creating additional

409
00:25:22,870 --> 00:25:28,510
keeper is nothing nothing

410
00:25:26,770 --> 00:25:29,889
Bish's from the guard duty perspective

411
00:25:28,510 --> 00:25:31,360
how does it look like from the

412
00:25:29,890 --> 00:25:35,380
administrator perspective you can see

413
00:25:31,360 --> 00:25:37,540
that access key H is five days right and

414
00:25:35,380 --> 00:25:38,590
there is also assigned to multi-factor

415
00:25:37,540 --> 00:25:39,909
authentication

416
00:25:38,590 --> 00:25:43,149
however multi-factor authentication

417
00:25:39,910 --> 00:25:47,920
that's only aside for the console so

418
00:25:43,150 --> 00:25:52,210
using the web but using the key keepers

419
00:25:47,920 --> 00:25:55,510
then MFA is not supported yet but Amazon

420
00:25:52,210 --> 00:25:58,810
so you can see that the access key H

421
00:25:55,510 --> 00:26:01,980
five days is actually referring to the

422
00:25:58,810 --> 00:26:07,379
older key keeper so the administrator

423
00:26:01,980 --> 00:26:10,270
really have to do a big work to see that

424
00:26:07,380 --> 00:26:16,570
current user is using actually two

425
00:26:10,270 --> 00:26:20,950
keepers so let's analyze what what went

426
00:26:16,570 --> 00:26:23,320
wrong first of all there was for sure

427
00:26:20,950 --> 00:26:26,350
the publicly available vulnerable

428
00:26:23,320 --> 00:26:29,679
application but there was also the test

429
00:26:26,350 --> 00:26:32,620
instance with admin permissions no

430
00:26:29,680 --> 00:26:35,800
matter if it is stopped or not missing

431
00:26:32,620 --> 00:26:38,639
monitoring services and improperly

432
00:26:35,800 --> 00:26:46,800
configured services like cloud trail or

433
00:26:38,640 --> 00:26:51,130
security groups so I want to present you

434
00:26:46,800 --> 00:26:54,790
the method ich I'm using so to make the

435
00:26:51,130 --> 00:26:57,400
complete cloud security assessment it is

436
00:26:54,790 --> 00:27:00,550
not only verifying the configuration but

437
00:26:57,400 --> 00:27:03,010
also first of all doing the

438
00:27:00,550 --> 00:27:07,090
architectural review to verify if there

439
00:27:03,010 --> 00:27:09,129
are no special extra resources and we

440
00:27:07,090 --> 00:27:14,220
have from my experience will we found

441
00:27:09,130 --> 00:27:17,320
once the extra cryptocurrency miner that

442
00:27:14,220 --> 00:27:19,960
customer wasn't aware of then the

443
00:27:17,320 --> 00:27:23,379
configuration review there is the AWS

444
00:27:19,960 --> 00:27:27,820
C's foundation benchmark so it's a list

445
00:27:23,380 --> 00:27:30,970
of steps which you can basically you can

446
00:27:27,820 --> 00:27:32,950
verify if your configuration is set up

447
00:27:30,970 --> 00:27:35,920
correctly

448
00:27:32,950 --> 00:27:39,950
finally pen test sensitive services like

449
00:27:35,920 --> 00:27:43,940
the web applications or the server list

450
00:27:39,950 --> 00:27:47,330
called several s securities is a huge

451
00:27:43,940 --> 00:27:53,659
topic which could be for for the whole

452
00:27:47,330 --> 00:27:55,908
presentation and finally the cloud

453
00:27:53,659 --> 00:27:59,779
security assessments should also include

454
00:27:55,909 --> 00:28:04,039
the verifying monitoring processes so is

455
00:27:59,779 --> 00:28:06,919
it is that the sensitive actions are the

456
00:28:04,039 --> 00:28:10,190
sensitive actions are really monitored

457
00:28:06,919 --> 00:28:11,750
and if so will you be notified if

458
00:28:10,190 --> 00:28:14,659
something if you are for example

459
00:28:11,750 --> 00:28:19,850
employee is trying to do something

460
00:28:14,659 --> 00:28:22,100
mulches so in practice if we do the

461
00:28:19,850 --> 00:28:25,428
configuration review for example using

462
00:28:22,100 --> 00:28:28,610
Prowler it will quickly detect that

463
00:28:25,429 --> 00:28:31,250
there are there are miss configurations

464
00:28:28,610 --> 00:28:34,959
in cloud trail service because actually

465
00:28:31,250 --> 00:28:39,049
it should be that the bucket should be

466
00:28:34,960 --> 00:28:41,899
managed by other AWS accounts so even if

467
00:28:39,049 --> 00:28:44,750
someone will escalate his privilege to

468
00:28:41,899 --> 00:28:47,750
administrator he still cannot do

469
00:28:44,750 --> 00:28:50,450
anything wrong with the logs of course

470
00:28:47,750 --> 00:28:55,130
the logs should be also signed and

471
00:28:50,450 --> 00:28:58,159
encrypted then pentesting sensitive

472
00:28:55,130 --> 00:29:01,340
service it would be pretty easy to

473
00:28:58,159 --> 00:29:04,159
detect this vulnerable web web

474
00:29:01,340 --> 00:29:07,730
application and if you remember the at

475
00:29:04,159 --> 00:29:12,200
the beginning the application it did

476
00:29:07,730 --> 00:29:14,779
this example came from fred crowd dot

477
00:29:12,200 --> 00:29:18,799
org you can find the report on hacker

478
00:29:14,779 --> 00:29:24,230
one but guess how the administrators of

479
00:29:18,799 --> 00:29:29,110
a fred crowd how they blocked how they

480
00:29:24,230 --> 00:29:29,110
fixed this vulnerability any ideas

481
00:29:29,740 --> 00:29:36,169
basically they black blacklisted the d

482
00:29:33,769 --> 00:29:39,470
address one sixty nine two five four one

483
00:29:36,169 --> 00:29:47,529
six nine two five four so any ideas how

484
00:29:39,470 --> 00:29:49,610
to bypass we are used to use the decimal

485
00:29:47,529 --> 00:29:52,250
representation of the IP address but

486
00:29:49,610 --> 00:29:53,179
always remember that we can the same

487
00:29:52,250 --> 00:29:55,700
address we can

488
00:29:53,180 --> 00:30:00,370
represented using the hexadecimal using

489
00:29:55,700 --> 00:30:02,900
binary so so a guy who reported it then

490
00:30:00,370 --> 00:30:06,560
after after reporting that it these

491
00:30:02,900 --> 00:30:11,830
Peaks can be very easily bypassed then

492
00:30:06,560 --> 00:30:16,460
they fix it correctly then monitoring

493
00:30:11,830 --> 00:30:19,699
monitoring sensitive processors would

494
00:30:16,460 --> 00:30:21,500
also notify it should also be a finding

495
00:30:19,700 --> 00:30:24,500
from the cloud security assessment

496
00:30:21,500 --> 00:30:27,020
perspective and then there shouldn't be

497
00:30:24,500 --> 00:30:31,130
any test instance with admin permissions

498
00:30:27,020 --> 00:30:36,560
and really trust me it is it was running

499
00:30:31,130 --> 00:30:38,450
on the on the production application so

500
00:30:36,560 --> 00:30:41,030
there were production application with

501
00:30:38,450 --> 00:30:44,150
the limited permissions but there was

502
00:30:41,030 --> 00:30:46,970
one test instance which which was

503
00:30:44,150 --> 00:30:52,100
stopped so such kill chain was was

504
00:30:46,970 --> 00:30:56,540
possible and at the end this is the

505
00:30:52,100 --> 00:31:00,949
Gartner report and through 2022 at least

506
00:30:56,540 --> 00:31:04,850
95% percent of cloud security failures

507
00:31:00,950 --> 00:31:08,210
will be the customers fault so Amazon

508
00:31:04,850 --> 00:31:14,120
will will say hey we are doing good job

509
00:31:08,210 --> 00:31:15,980
the failure is they will blame you in

510
00:31:14,120 --> 00:31:20,570
the end if you are interesting in

511
00:31:15,980 --> 00:31:23,720
attacking AWS here are a few extras so

512
00:31:20,570 --> 00:31:26,840
Cloud goat is the platform

513
00:31:23,720 --> 00:31:32,450
which you are deploying under your AWS

514
00:31:26,840 --> 00:31:35,209
account some vulnerable AWS services and

515
00:31:32,450 --> 00:31:38,660
your goal is to exploit all those

516
00:31:35,210 --> 00:31:42,860
vulnerabilities if you don't want don't

517
00:31:38,660 --> 00:31:46,460
know how to start I also created the 5

518
00:31:42,860 --> 00:31:51,439
articles - how to work with it how to

519
00:31:46,460 --> 00:31:54,680
find vulnerabilities of course Paco try

520
00:31:51,440 --> 00:31:57,760
it I also created the capture the flag

521
00:31:54,680 --> 00:31:59,930
game which is called Karaka analytic and

522
00:31:57,760 --> 00:32:03,410
when you want to play if you want to

523
00:31:59,930 --> 00:32:05,630
play just just say it and there are

524
00:32:03,410 --> 00:32:07,309
vulnerabilities related with simple

525
00:32:05,630 --> 00:32:10,730
storage service

526
00:32:07,309 --> 00:32:13,549
also to to do the cloud security

527
00:32:10,730 --> 00:32:16,820
assessment are very helpful can be cloud

528
00:32:13,549 --> 00:32:19,029
mapper which will display you all

529
00:32:16,820 --> 00:32:24,158
resources and also if there are any

530
00:32:19,029 --> 00:32:27,580
possible paths to escalate your

531
00:32:24,159 --> 00:32:32,450
privileges and the Prowler will do

532
00:32:27,580 --> 00:32:36,559
automatically will detect automatically

533
00:32:32,450 --> 00:32:43,580
any misconfigurations in your AWS

534
00:32:36,559 --> 00:32:53,350
services so that's all from my site if

535
00:32:43,580 --> 00:32:53,350
you have any questions I'm open yep

536
00:32:57,789 --> 00:33:02,960
hello thank you for the presentation was

537
00:33:00,320 --> 00:33:04,970
quite instinct if we're talking about

538
00:33:02,960 --> 00:33:07,690
like full kill child of the attack

539
00:33:04,970 --> 00:33:10,429
incredible yes I'm wondering how

540
00:33:07,690 --> 00:33:12,320
difficult or easy our actions on

541
00:33:10,429 --> 00:33:14,360
objective in terms of cloud and cloud

542
00:33:12,320 --> 00:33:16,610
environment for example if attacker

543
00:33:14,360 --> 00:33:19,760
would start to exfiltrate data or

544
00:33:16,610 --> 00:33:21,860
started using resources is it easier or

545
00:33:19,760 --> 00:33:26,270
harder to detect for the owner of the

546
00:33:21,860 --> 00:33:30,678
instance compared to per metal well it

547
00:33:26,270 --> 00:33:33,918
is harder because for example there is

548
00:33:30,679 --> 00:33:36,590
something like virtual private will to

549
00:33:33,919 --> 00:33:38,780
out private cloud which generally makes

550
00:33:36,590 --> 00:33:41,689
you a private cloud and it should be

551
00:33:38,780 --> 00:33:43,668
separated but there are features like

552
00:33:41,690 --> 00:33:47,150
for example even if you are using the V

553
00:33:43,669 --> 00:33:50,270
PC flow logs it is still possible the V

554
00:33:47,150 --> 00:33:52,789
PC flow locks are not monitoring any DNS

555
00:33:50,270 --> 00:33:56,260
records by default and you can

556
00:33:52,789 --> 00:34:00,169
exfiltrate all the data I think DNS and

557
00:33:56,260 --> 00:34:03,049
there there are knots and by default if

558
00:34:00,169 --> 00:34:05,929
you don't change some some things you

559
00:34:03,049 --> 00:34:10,040
will you you will be not not notified

560
00:34:05,929 --> 00:34:14,330
and regarding exfiltrating data it is

561
00:34:10,040 --> 00:34:17,179
pretty difficult because you know

562
00:34:14,330 --> 00:34:18,980
normally you are using like you are

563
00:34:17,179 --> 00:34:21,950
accessing some simple storage service

564
00:34:18,980 --> 00:34:26,119
and from my experience it seems that all

565
00:34:21,949 --> 00:34:30,469
the users can display all the content of

566
00:34:26,119 --> 00:34:34,250
the buckets and if you treat it not as a

567
00:34:30,469 --> 00:34:38,989
normal behavior then you will not see

568
00:34:34,250 --> 00:34:43,060
any animality in this that some objects

569
00:34:38,989 --> 00:34:50,918
were accessed and the and then

570
00:34:43,060 --> 00:34:50,918
exfiltrated thank you anyone else

571
00:34:53,580 --> 00:34:57,230
all right thank you okay thank you very

572
00:34:56,770 --> 00:35:05,380
much

573
00:34:57,230 --> 00:35:05,380
[Applause]

574
00:35:06,690 --> 00:35:08,750
you

