1
00:00:09,290 --> 00:00:14,518
hello everyone

2
00:00:11,190 --> 00:00:16,070
last year I gave gave a talk about pen

3
00:00:14,519 --> 00:00:20,070
testing as applications without

4
00:00:16,070 --> 00:00:22,650
jailbreak in this year I decided to

5
00:00:20,070 --> 00:00:27,840
change the site and show you how to

6
00:00:22,650 --> 00:00:31,140
build modernize applications securely so

7
00:00:27,840 --> 00:00:31,890
my name is Virginie Gua as I was

8
00:00:31,140 --> 00:00:34,890
introduced

9
00:00:31,890 --> 00:00:39,210
I'm a senior IT security consultant at

10
00:00:34,890 --> 00:00:43,230
securing where I'm mostly focused on iOS

11
00:00:39,210 --> 00:00:45,870
app security and in free time I I run a

12
00:00:43,230 --> 00:00:48,959
block and the link that you can see on

13
00:00:45,870 --> 00:00:51,390
the slide and is also mostly focused on

14
00:00:48,960 --> 00:00:55,230
iOS applications and Mac OS applications

15
00:00:51,390 --> 00:00:57,989
security and somebody of you may know me

16
00:00:55,230 --> 00:01:02,910
from our security knowledge framework

17
00:00:57,989 --> 00:01:05,580
that I contributed to ok so this

18
00:01:02,910 --> 00:01:08,670
presentation will be about most frequent

19
00:01:05,580 --> 00:01:11,220
vulnerabilities in new iOS applications

20
00:01:08,670 --> 00:01:14,100
that we find during conducting

21
00:01:11,220 --> 00:01:16,890
penetration tests we don't have of

22
00:01:14,100 --> 00:01:20,009
course time to talk about everything so

23
00:01:16,890 --> 00:01:23,189
I selected the most interesting ones and

24
00:01:20,009 --> 00:01:25,590
my Twitter and Mail will be displayed

25
00:01:23,189 --> 00:01:27,960
hold the presentation on the top of the

26
00:01:25,590 --> 00:01:31,740
slide so if you have any questions feel

27
00:01:27,960 --> 00:01:35,429
free to ask me or ping me on Twitter all

28
00:01:31,740 --> 00:01:38,880
right so I introduce myself now I want

29
00:01:35,430 --> 00:01:46,369
to know something about you so who of

30
00:01:38,880 --> 00:01:52,140
you are from security divisions or write

31
00:01:46,369 --> 00:01:58,710
almost 30 percent I think and what about

32
00:01:52,140 --> 00:02:03,420
developers are there any ok so about 20

33
00:01:58,710 --> 00:02:06,539
percent I think all right so the persons

34
00:02:03,420 --> 00:02:10,170
are almost equal I think so I will focus

35
00:02:06,540 --> 00:02:13,500
both on the security the offensive and

36
00:02:10,169 --> 00:02:16,829
defensive side of this ok so

37
00:02:13,500 --> 00:02:20,700
agenda at first we will talk about iOS

38
00:02:16,830 --> 00:02:23,400
platform myths and reality then I go

39
00:02:20,700 --> 00:02:26,190
through mobile application verification

40
00:02:23,400 --> 00:02:28,110
standard then in each category I will

41
00:02:26,190 --> 00:02:31,710
show you the vulnerabilities then we

42
00:02:28,110 --> 00:02:35,790
have frequent find we'll show you also

43
00:02:31,710 --> 00:02:38,520
the solution and we'll also discuss the

44
00:02:35,790 --> 00:02:43,620
features that were presented on the

45
00:02:38,520 --> 00:02:46,950
latest WWDC in the first point I will

46
00:02:43,620 --> 00:02:50,750
present you my new library this is the

47
00:02:46,950 --> 00:02:50,750
first announcement of this library so

48
00:02:50,780 --> 00:03:00,030
watch carefully and at the end I will

49
00:02:57,630 --> 00:03:03,750
show the developers especially

50
00:03:00,030 --> 00:03:08,130
developers short and long term things to

51
00:03:03,750 --> 00:03:10,820
implement in your code and I will say

52
00:03:08,130 --> 00:03:13,769
about quick summary of the

53
00:03:10,820 --> 00:03:17,370
vulnerabilities that we were talking

54
00:03:13,770 --> 00:03:20,280
about all right so we're going to part 1

55
00:03:17,370 --> 00:03:23,510
platform apps and reality and this block

56
00:03:20,280 --> 00:03:29,070
I will show you that we cannot rely on

57
00:03:23,510 --> 00:03:33,810
iOS platform 100% so the first myth is

58
00:03:29,070 --> 00:03:37,709
that Apple's review is 100% readable and

59
00:03:33,810 --> 00:03:40,950
it's not true guys from Guardian Mobile

60
00:03:37,709 --> 00:03:43,500
firewall find application that they

61
00:03:40,950 --> 00:03:47,459
reversed let it's a malicious

62
00:03:43,500 --> 00:03:50,250
application and what this code snippet

63
00:03:47,459 --> 00:03:53,459
does is it checks whether the

64
00:03:50,250 --> 00:03:56,640
application was run in Cupertino where

65
00:03:53,459 --> 00:03:59,670
are of course Apple is based and if they

66
00:03:56,640 --> 00:04:04,859
do a dynamic review they the

67
00:03:59,670 --> 00:04:08,310
functionality it was hidden so yeah it

68
00:04:04,860 --> 00:04:13,110
was pretty neat bypass of app review so

69
00:04:08,310 --> 00:04:16,380
we cannot rely on this 100% the second

70
00:04:13,110 --> 00:04:19,260
myth there is no jailbreak for iOS 11

71
00:04:16,380 --> 00:04:22,830
plus and it's also again not true

72
00:04:19,260 --> 00:04:25,620
because we have undisclosed that is open

73
00:04:22,830 --> 00:04:27,270
source jailbreak so if you are curious

74
00:04:25,620 --> 00:04:32,690
how does it how it work

75
00:04:27,270 --> 00:04:36,389
you can check it on on this github site

76
00:04:32,690 --> 00:04:40,080
alright and third myth no jailbreak

77
00:04:36,389 --> 00:04:45,210
means no reversing apps and it's again

78
00:04:40,080 --> 00:04:48,180
not true because from from probably one

79
00:04:45,210 --> 00:04:53,280
year we have a Curie Liam that fully

80
00:04:48,180 --> 00:04:55,860
virtualized iOS so all you need to do is

81
00:04:53,280 --> 00:04:58,500
just to you know create a new device

82
00:04:55,860 --> 00:05:01,860
select the iOS version it maybe even the

83
00:04:58,500 --> 00:05:05,490
newest one tick whether the device

84
00:05:01,860 --> 00:05:09,569
should be broken or not and then you

85
00:05:05,490 --> 00:05:12,949
just can access it via SSH so and dump

86
00:05:09,569 --> 00:05:16,050
the application as regular pandas we do

87
00:05:12,949 --> 00:05:20,159
okay so you have probably convinced that

88
00:05:16,050 --> 00:05:22,169
iOS platform is not will not do security

89
00:05:20,159 --> 00:05:25,740
for us so we have to do it for ourselves

90
00:05:22,169 --> 00:05:30,359
so this is the part to secure

91
00:05:25,740 --> 00:05:32,840
development and first category in mobile

92
00:05:30,360 --> 00:05:36,630
application of verification standard as

93
00:05:32,840 --> 00:05:41,429
architecture and when we start talking

94
00:05:36,630 --> 00:05:44,120
about our architecture we usually have

95
00:05:41,430 --> 00:05:48,360
to decide in which language we want

96
00:05:44,120 --> 00:05:51,060
write our code and Swift is of course

97
00:05:48,360 --> 00:05:55,469
the newest one and Objective C Objective

98
00:05:51,060 --> 00:05:57,509
C is by the way just wrapper and C

99
00:05:55,469 --> 00:06:00,930
because when you compile Objective C

100
00:05:57,509 --> 00:06:04,740
code its first translated to pure C and

101
00:06:00,930 --> 00:06:07,110
then compiled so all the vulnerabilities

102
00:06:04,740 --> 00:06:10,199
that are coming to C programming

103
00:06:07,110 --> 00:06:14,009
language exists also in Objective C and

104
00:06:10,199 --> 00:06:16,380
comparing into Swift for example when we

105
00:06:14,009 --> 00:06:19,259
have integer overflow every overflow of

106
00:06:16,380 --> 00:06:24,419
the integer it causes runtime errors so

107
00:06:19,259 --> 00:06:26,819
it it won't accept bugs like that we

108
00:06:24,419 --> 00:06:29,880
don't have a direct memory access of

109
00:06:26,819 --> 00:06:32,940
course there are unsafe methods but they

110
00:06:29,880 --> 00:06:36,620
are explicitly named like for example

111
00:06:32,940 --> 00:06:40,580
unsafe pointer and about format strings

112
00:06:36,620 --> 00:06:43,009
Kevin to see they are mitigated through

113
00:06:40,580 --> 00:06:47,530
drink interpolation so we just do

114
00:06:43,009 --> 00:06:49,909
backslash you know braces and mm the

115
00:06:47,530 --> 00:06:53,330
parameter that will be of course

116
00:06:49,909 --> 00:06:56,750
interpolate all right and when

117
00:06:53,330 --> 00:06:59,719
developing apps in Swift we also have

118
00:06:56,750 --> 00:07:02,930
few myths and the first one I wanted to

119
00:06:59,719 --> 00:07:05,810
present you is that Swift obfuscates

120
00:07:02,930 --> 00:07:12,490
itself it's of course not true I had the

121
00:07:05,810 --> 00:07:16,009
situation from my client where they said

122
00:07:12,490 --> 00:07:19,580
they don't need to appreciate the area's

123
00:07:16,009 --> 00:07:22,520
applications because obfuscate does it

124
00:07:19,580 --> 00:07:24,409
itself it's out of skates itself of

125
00:07:22,520 --> 00:07:27,080
course is not true

126
00:07:24,409 --> 00:07:29,659
what's with does its name mangling and

127
00:07:27,080 --> 00:07:35,198
you probably may know it from for

128
00:07:29,659 --> 00:07:39,069
example C++ so let's imagine we have

129
00:07:35,199 --> 00:07:43,550
this piece of code the test class and

130
00:07:39,069 --> 00:07:46,819
it's just a clock it's every 1 second in

131
00:07:43,550 --> 00:07:49,240
it prints incrementing number so we have

132
00:07:46,819 --> 00:07:52,819
one class one instance variable

133
00:07:49,240 --> 00:07:57,830
constructor and two methods and when we

134
00:07:52,819 --> 00:08:00,169
compile this code we can use an M the

135
00:07:57,830 --> 00:08:02,539
Swift ester and grab for test class that

136
00:08:00,169 --> 00:08:07,039
was the name of the class and as you can

137
00:08:02,539 --> 00:08:09,259
see this strings means something it's

138
00:08:07,039 --> 00:08:11,710
not an obfuscation and as you can see

139
00:08:09,259 --> 00:08:14,449
the underscore dollar for example

140
00:08:11,710 --> 00:08:18,169
indicates that a swift symbol and we

141
00:08:14,449 --> 00:08:22,000
have length of the name of the module

142
00:08:18,169 --> 00:08:27,919
name so on so on and return values etc

143
00:08:22,000 --> 00:08:30,080
but even Apple provides a tool that will

144
00:08:27,919 --> 00:08:34,669
automatically do mangle the names for

145
00:08:30,080 --> 00:08:38,179
you so when you this grabbed test class

146
00:08:34,669 --> 00:08:42,228
strings pass to the experience with the

147
00:08:38,179 --> 00:08:45,589
mango you can see how this weird strings

148
00:08:42,229 --> 00:08:51,560
will be translated to human readable

149
00:08:45,589 --> 00:08:54,350
form okay and another method Swift is

150
00:08:51,560 --> 00:08:58,040
that Swift methods cannot be

151
00:08:54,350 --> 00:09:00,640
make the change it's not true because we

152
00:08:58,040 --> 00:09:03,500
can use Freda and just hook it symbol

153
00:09:00,640 --> 00:09:04,130
for those who are not familiar with

154
00:09:03,500 --> 00:09:06,650
Freda

155
00:09:04,130 --> 00:09:10,460
it's just dynamic instrumentation

156
00:09:06,650 --> 00:09:12,560
toolkit for developers so we have to

157
00:09:10,460 --> 00:09:16,990
create a script like this

158
00:09:12,560 --> 00:09:20,420
and as you can see we just attach to the

159
00:09:16,990 --> 00:09:23,750
program we find export by name we pass

160
00:09:20,420 --> 00:09:26,780
the symbol and whenever our clock

161
00:09:23,750 --> 00:09:29,930
returns the the value we just replace it

162
00:09:26,780 --> 00:09:43,360
with lead so it's a demo time that I

163
00:09:29,930 --> 00:09:43,359
will show you how it works so what first

164
00:09:43,390 --> 00:09:54,380
I'll try to run this ok can you see it

165
00:09:49,030 --> 00:09:57,350
yes okay so when I run the Swift tester

166
00:09:54,380 --> 00:10:01,280
as you can see it just prints the number

167
00:09:57,350 --> 00:10:03,500
that's increasing and then we'll open

168
00:10:01,280 --> 00:10:12,829
the freedom of the script that I shown

169
00:10:03,500 --> 00:10:17,680
you okay we zoom it and as you can see

170
00:10:12,830 --> 00:10:28,070
the number is replaced with lead that we

171
00:10:17,680 --> 00:10:32,209
wanted to to do okay open and take away

172
00:10:28,070 --> 00:10:34,520
from this module is that in Swift

173
00:10:32,210 --> 00:10:37,040
protects your application against basic

174
00:10:34,520 --> 00:10:40,100
binary vulnerabilities as you as you can

175
00:10:37,040 --> 00:10:42,740
see can see Swift and forces the

176
00:10:40,100 --> 00:10:44,960
liberate usage of insecure and methods

177
00:10:42,740 --> 00:10:49,970
like for example unsafe pointer and

178
00:10:44,960 --> 00:10:52,970
there is no obfuscation if you treat you

179
00:10:49,970 --> 00:10:55,040
to it if you consider that someone will

180
00:10:52,970 --> 00:10:57,830
reverse engineer your application that

181
00:10:55,040 --> 00:10:59,569
you don't want to you can use obfuscator

182
00:10:57,830 --> 00:11:02,990
like swift shield that it's free open

183
00:10:59,570 --> 00:11:07,709
source and good as for rock Bruno for

184
00:11:02,990 --> 00:11:11,730
doing this ok and the WWC feature from

185
00:11:07,709 --> 00:11:15,479
this block is the is automated SMS code

186
00:11:11,730 --> 00:11:18,209
input so it's a little bit controversial

187
00:11:15,480 --> 00:11:22,050
because let's imagine we have an iPhone

188
00:11:18,209 --> 00:11:25,469
SMS in comes to our phone and Apple

189
00:11:22,050 --> 00:11:28,469
process does some magic let's say and it

190
00:11:25,470 --> 00:11:35,009
retrieves the for example to FA talk and

191
00:11:28,470 --> 00:11:37,559
from this SMS and it passes it to your

192
00:11:35,009 --> 00:11:40,259
native application so when you tick on

193
00:11:37,559 --> 00:11:43,379
this SMS code it is passed to that for

194
00:11:40,259 --> 00:11:47,249
example input value so the input value

195
00:11:43,379 --> 00:11:51,120
if you want to retrieve the token just

196
00:11:47,249 --> 00:11:53,759
needs need to be set with this text

197
00:11:51,120 --> 00:11:58,680
content type one time code and iPhone

198
00:11:53,759 --> 00:12:02,309
will automatically get will

199
00:11:58,680 --> 00:12:06,109
automatically give you the than the

200
00:12:02,309 --> 00:12:08,459
talking from the SMS and on demo I

201
00:12:06,110 --> 00:12:12,689
wanted to present you that any

202
00:12:08,459 --> 00:12:15,329
application is able to do this so there

203
00:12:12,689 --> 00:12:18,719
is no connection between from which

204
00:12:15,329 --> 00:12:20,370
number the SMS code should be passed to

205
00:12:18,720 --> 00:12:24,029
your application any application that

206
00:12:20,370 --> 00:12:26,819
has this text content type set can

207
00:12:24,029 --> 00:12:30,110
retrieve the token if you press it so

208
00:12:26,819 --> 00:12:33,449
there is a possibility that someone will

209
00:12:30,110 --> 00:12:36,240
trick and malicious will trick the user

210
00:12:33,449 --> 00:12:42,508
to pass the token into the malicious

211
00:12:36,240 --> 00:12:45,000
application so it works like this on the

212
00:12:42,509 --> 00:12:47,100
background there is the code of the

213
00:12:45,000 --> 00:12:51,439
application that that can be seen on the

214
00:12:47,100 --> 00:12:56,160
right and now I'm sending the iMessage

215
00:12:51,439 --> 00:13:00,719
message and as you can see this this

216
00:12:56,160 --> 00:13:06,420
token is shown here and is passed to the

217
00:13:00,720 --> 00:13:11,360
text input field okay so now we're going

218
00:13:06,420 --> 00:13:15,628
to data storage the second most category

219
00:13:11,360 --> 00:13:20,429
and the most common issue that we find

220
00:13:15,629 --> 00:13:21,210
in data storage our API keys like for

221
00:13:20,429 --> 00:13:24,689
example

222
00:13:21,210 --> 00:13:28,850
private keys that shouldn't be there SSH

223
00:13:24,690 --> 00:13:32,910
keys cloud credentials like AWS Keys or

224
00:13:28,850 --> 00:13:35,340
Google Cloud Keys and sometimes even a

225
00:13:32,910 --> 00:13:38,459
credential credentials from test

226
00:13:35,340 --> 00:13:42,900
environment that works on production as

227
00:13:38,460 --> 00:13:45,030
well so there was maybe some of you know

228
00:13:42,900 --> 00:13:48,540
that there was a similar issue in one of

229
00:13:45,030 --> 00:13:50,970
the Polish banks were the credential

230
00:13:48,540 --> 00:13:53,010
from test from test environment work on

231
00:13:50,970 --> 00:13:56,070
the production and you know had an

232
00:13:53,010 --> 00:13:59,430
access to real money so yeah it's it's a

233
00:13:56,070 --> 00:14:03,990
issue that we find some find frequently

234
00:13:59,430 --> 00:14:08,040
and sensitive data may be in securely

235
00:14:03,990 --> 00:14:11,250
stored in info panelists user defaults

236
00:14:08,040 --> 00:14:13,920
in regular files then KB can be even

237
00:14:11,250 --> 00:14:17,640
hard coded into binary as just a strings

238
00:14:13,920 --> 00:14:20,939
in a binary and we all know that

239
00:14:17,640 --> 00:14:23,460
keychain is the place that you know the

240
00:14:20,940 --> 00:14:26,430
small secrets should be saved it's the

241
00:14:23,460 --> 00:14:29,070
it's the way how Apple has in in

242
00:14:26,430 --> 00:14:33,000
documentation that we have to write the

243
00:14:29,070 --> 00:14:35,340
secrets in but some of the data that I

244
00:14:33,000 --> 00:14:38,340
shown you before shouldn't be at all on

245
00:14:35,340 --> 00:14:43,380
divas never on the device and placing

246
00:14:38,340 --> 00:14:49,010
them into the keychain is wrong too ok

247
00:14:43,380 --> 00:14:53,670
so secure a famous a security researcher

248
00:14:49,010 --> 00:14:56,640
shared his research where he summarizes

249
00:14:53,670 --> 00:15:00,530
the iOS spyware and as you can see there

250
00:14:56,640 --> 00:15:03,840
are a lot of kinds of spyware that

251
00:15:00,530 --> 00:15:09,480
retrieves the user data from iCloud

252
00:15:03,840 --> 00:15:12,810
backups so we have to know which data

253
00:15:09,480 --> 00:15:16,560
from iOS application are actually back

254
00:15:12,810 --> 00:15:21,239
backed up and this directories are for

255
00:15:16,560 --> 00:15:24,890
example documents library application

256
00:15:21,240 --> 00:15:28,770
support library preference and any other

257
00:15:24,890 --> 00:15:33,239
directories in library without caches

258
00:15:28,770 --> 00:15:40,420
and of course temporary is not backed up

259
00:15:33,239 --> 00:15:42,819
okay so WWC feature from the last

260
00:15:40,420 --> 00:15:46,779
conference is credential provider

261
00:15:42,819 --> 00:15:49,149
extension so it allows you to use iCloud

262
00:15:46,779 --> 00:15:51,459
keychain and your external password

263
00:15:49,149 --> 00:15:56,230
managers like one password or an pass

264
00:15:51,459 --> 00:15:59,378
also in native applications and the case

265
00:15:56,230 --> 00:16:03,220
is similar like with automated SMS code

266
00:15:59,379 --> 00:16:05,230
input you just need to add the UI text

267
00:16:03,220 --> 00:16:08,079
content type and set you know the

268
00:16:05,230 --> 00:16:09,999
username text field to be username and

269
00:16:08,079 --> 00:16:14,290
password to be content type password

270
00:16:09,999 --> 00:16:18,790
it's as simple as that and takeaways

271
00:16:14,290 --> 00:16:21,579
from this part that always check if any

272
00:16:18,790 --> 00:16:25,449
sensitive data is not saved in your

273
00:16:21,579 --> 00:16:27,519
applications for sensitive data stored

274
00:16:25,449 --> 00:16:31,029
in keachi that you don't want to be

275
00:16:27,519 --> 00:16:32,920
saved in iCloud use this long string

276
00:16:31,029 --> 00:16:35,049
Kasich attribute excessively when with

277
00:16:32,920 --> 00:16:36,819
this device only that will make sure

278
00:16:35,049 --> 00:16:39,670
that the sensitive data from the kitchen

279
00:16:36,819 --> 00:16:42,910
I won't leave your device and if you

280
00:16:39,670 --> 00:16:44,618
need to store something in regular files

281
00:16:42,910 --> 00:16:48,549
the bigger ones that can you know

282
00:16:44,619 --> 00:16:50,230
kitchen cane can contain consider using

283
00:16:48,549 --> 00:16:55,269
you like heat protection that will

284
00:16:50,230 --> 00:16:57,730
encrypt the files on the IRS and you can

285
00:16:55,269 --> 00:17:00,369
also improve your text input to help

286
00:16:57,730 --> 00:17:05,980
credential providers work well with your

287
00:17:00,369 --> 00:17:08,470
applications okay so first block

288
00:17:05,980 --> 00:17:12,189
cryptography and the most frequent

289
00:17:08,470 --> 00:17:16,750
vulnerability that we can find here is

290
00:17:12,189 --> 00:17:19,179
insecure token generation I give you as

291
00:17:16,750 --> 00:17:25,179
exact as example at birth case that I

292
00:17:19,179 --> 00:17:28,720
found so the bare aloud is alternative

293
00:17:25,179 --> 00:17:32,169
to Evernote so it stores that your note

294
00:17:28,720 --> 00:17:37,899
and it had F it has actual functionality

295
00:17:32,169 --> 00:17:41,320
when it handles URL scheme to to which

296
00:17:37,899 --> 00:17:45,219
any application could could communicate

297
00:17:41,320 --> 00:17:46,600
with and retrieve your notes and you

298
00:17:45,220 --> 00:17:48,520
need an access token to

299
00:17:46,600 --> 00:17:51,580
of course application to make sure that

300
00:17:48,520 --> 00:17:55,360
any malicious or unwanted application

301
00:17:51,580 --> 00:18:00,570
one twitch of your note and token the

302
00:17:55,360 --> 00:18:00,570
generation mechanism looked like this I

303
00:18:00,660 --> 00:18:09,370
rewrote this code to be to exploit this

304
00:18:05,710 --> 00:18:11,140
vulnerability and without reading it and

305
00:18:09,370 --> 00:18:13,539
going to the details as you can see on

306
00:18:11,140 --> 00:18:18,280
the beginning it takes a date the

307
00:18:13,539 --> 00:18:23,049
current date does md5 from this date and

308
00:18:18,280 --> 00:18:24,850
then some magic bit shuffles on them so

309
00:18:23,049 --> 00:18:27,539
as you can see the vulnerability here is

310
00:18:24,850 --> 00:18:30,129
that predicting the date or even

311
00:18:27,539 --> 00:18:33,429
brute-forcing it it's not it's not a

312
00:18:30,130 --> 00:18:37,090
really hard job to do so I wrote full

313
00:18:33,429 --> 00:18:41,200
exploit on Mac OS that could retrieve

314
00:18:37,090 --> 00:18:46,000
your notes if you are interested in how

315
00:18:41,200 --> 00:18:49,960
I did it with details you can visit my

316
00:18:46,000 --> 00:18:53,820
blog and enter it about this so I'll

317
00:18:49,960 --> 00:18:53,820
give you a few seconds to make a photo

318
00:19:02,330 --> 00:19:14,279
alright okay I think everyone don't they

319
00:19:10,200 --> 00:19:16,980
took this photo and the WWC feature from

320
00:19:14,279 --> 00:19:20,159
cryptography is that mentioned before

321
00:19:16,980 --> 00:19:24,269
autofill can now create new passwords

322
00:19:20,159 --> 00:19:27,480
connected with your domain and you are

323
00:19:24,269 --> 00:19:30,450
able to natively set the policy that

324
00:19:27,480 --> 00:19:32,100
will be applied on the password so as

325
00:19:30,450 --> 00:19:34,139
you can see there is UI text input

326
00:19:32,100 --> 00:19:37,289
password rules and you pass the string

327
00:19:34,139 --> 00:19:41,279
what's required so for example one upper

328
00:19:37,289 --> 00:19:44,879
one lower the the digits some characters

329
00:19:41,279 --> 00:19:47,249
consecutive and minimum length so now

330
00:19:44,879 --> 00:19:51,149
from now you can do it natively which is

331
00:19:47,249 --> 00:19:53,789
what is a great feature and take away

332
00:19:51,149 --> 00:19:56,070
from from this block is that do not

333
00:19:53,789 --> 00:19:59,720
create your homemade ciphers because

334
00:19:56,070 --> 00:20:02,820
it's really hard to do this securely and

335
00:19:59,720 --> 00:20:05,039
treat your encryption algorithm as a

336
00:20:02,820 --> 00:20:07,889
public because you know any application

337
00:20:05,039 --> 00:20:11,999
can be reversed and the algorithm may be

338
00:20:07,889 --> 00:20:16,519
may be known by the attacker and you

339
00:20:11,999 --> 00:20:20,489
don't need more to use first part

340
00:20:16,519 --> 00:20:23,369
encryption libraries because this method

341
00:20:20,489 --> 00:20:27,330
Saiki create encrypted data is now

342
00:20:23,369 --> 00:20:33,720
native mechanism that allows Swift to do

343
00:20:27,330 --> 00:20:35,639
a s or RSA encryption and if if you deal

344
00:20:33,720 --> 00:20:38,129
with passwords you can now use native

345
00:20:35,639 --> 00:20:40,340
password policy that will be you know

346
00:20:38,129 --> 00:20:44,279
much easier to maintain in the future

347
00:20:40,340 --> 00:20:47,939
alright and session management the most

348
00:20:44,279 --> 00:20:50,549
frequent box again is here local access

349
00:20:47,940 --> 00:20:53,519
control is of course made locally and

350
00:20:50,549 --> 00:20:56,809
the the proper way how to do this is of

351
00:20:53,519 --> 00:21:00,869
course do every check on server-side and

352
00:20:56,809 --> 00:21:07,350
whenever the application deals with

353
00:21:00,869 --> 00:21:10,918
sessions and they are start in JWT we

354
00:21:07,350 --> 00:21:14,580
have to make sure that we sign of course

355
00:21:10,919 --> 00:21:16,770
the the whole JSON and

356
00:21:14,580 --> 00:21:19,050
we have to of course verifying this

357
00:21:16,770 --> 00:21:22,139
signature because there are a lot of

358
00:21:19,050 --> 00:21:25,110
cases where the signature was applied on

359
00:21:22,140 --> 00:21:26,450
the JWT but it was not checked on the

360
00:21:25,110 --> 00:21:30,540
server-side

361
00:21:26,450 --> 00:21:35,820
all right and five-block network

362
00:21:30,540 --> 00:21:38,730
communication and here is theirs

363
00:21:35,820 --> 00:21:41,870
you know simple solution and the the

364
00:21:38,730 --> 00:21:45,270
most frequent box we can find here is a

365
00:21:41,870 --> 00:21:52,050
plain HTTP connections so try to avoid

366
00:21:45,270 --> 00:21:56,400
this and use HTTPS and from iOS 9 there

367
00:21:52,050 --> 00:22:00,480
is a transport security that is now by

368
00:21:56,400 --> 00:22:04,350
default feature that enforces for

369
00:22:00,480 --> 00:22:09,450
example usage of HTTPS and a lot of

370
00:22:04,350 --> 00:22:11,639
developers used to just turn turn it off

371
00:22:09,450 --> 00:22:14,250
just other than your this domain which

372
00:22:11,640 --> 00:22:18,690
application communicate communicate - as

373
00:22:14,250 --> 00:22:21,420
an exclusion so it causes as you

374
00:22:18,690 --> 00:22:26,010
probably know a lot of different

375
00:22:21,420 --> 00:22:29,430
problems so another bug that we find in

376
00:22:26,010 --> 00:22:32,610
network communication is that if you use

377
00:22:29,430 --> 00:22:36,990
HTTPS always check if the certificate is

378
00:22:32,610 --> 00:22:39,209
trusted and what's interesting the

379
00:22:36,990 --> 00:22:41,880
problem exists really common when

380
00:22:39,210 --> 00:22:46,380
developers implement certificate pinning

381
00:22:41,880 --> 00:22:47,940
mechanism and you know when we have an

382
00:22:46,380 --> 00:22:51,120
app when we have applications with

383
00:22:47,940 --> 00:22:53,730
certificate pinning it's usually the

384
00:22:51,120 --> 00:22:57,270
certificates usual is not trusted so

385
00:22:53,730 --> 00:23:00,660
developers have to manually turn off the

386
00:22:57,270 --> 00:23:04,980
certificate verification check and the

387
00:23:00,660 --> 00:23:08,490
problem exists when they you know stop

388
00:23:04,980 --> 00:23:12,150
support certificate pinning and but but

389
00:23:08,490 --> 00:23:17,360
they don't turn on the the certificate

390
00:23:12,150 --> 00:23:19,910
trust check and what it causes that

391
00:23:17,360 --> 00:23:22,350
attackers are of course able to

392
00:23:19,910 --> 00:23:25,140
intercept the SSL traffic because they

393
00:23:22,350 --> 00:23:27,199
can provide any SSL certificate that

394
00:23:25,140 --> 00:23:28,630
will be trusted by the application and

395
00:23:27,200 --> 00:23:32,080
from a

396
00:23:28,630 --> 00:23:34,360
life example for example Twitter had a

397
00:23:32,080 --> 00:23:38,530
similar problem and as you can see the

398
00:23:34,360 --> 00:23:44,350
bug bounty that was paid was over two

399
00:23:38,530 --> 00:23:48,850
thousand dollars okay and next category

400
00:23:44,350 --> 00:23:52,780
is platform interaction in Apple

401
00:23:48,850 --> 00:23:54,459
environment the most frequent used inter

402
00:23:52,780 --> 00:23:57,460
application communication or inter

403
00:23:54,460 --> 00:24:02,800
process communication are ex PC and Mac

404
00:23:57,460 --> 00:24:06,270
messages they are widely used in iOS as

405
00:24:02,800 --> 00:24:09,550
well but you as a developer don't have

406
00:24:06,270 --> 00:24:13,840
you know a direct access to it so we

407
00:24:09,550 --> 00:24:16,470
won't cover it in my class when you use

408
00:24:13,840 --> 00:24:21,730
X PC or Mac messages at the point the

409
00:24:16,470 --> 00:24:25,480
most important thing here is to verify

410
00:24:21,730 --> 00:24:29,800
if very verify if the sender is that one

411
00:24:25,480 --> 00:24:32,860
that you expect on iOS we use URL

412
00:24:29,800 --> 00:24:35,399
schemes airdrop and clipboard but please

413
00:24:32,860 --> 00:24:39,129
do not do clipboard for inter-process

414
00:24:35,400 --> 00:24:42,460
communication I so it into wild many

415
00:24:39,130 --> 00:24:45,220
times and it's it's not a good way how

416
00:24:42,460 --> 00:24:46,690
to do this because every time you put

417
00:24:45,220 --> 00:24:48,760
something in the clipboard any

418
00:24:46,690 --> 00:24:51,460
application can have access to it and

419
00:24:48,760 --> 00:24:54,690
even modify it so as you can probably

420
00:24:51,460 --> 00:24:58,210
think about this it's not an expected

421
00:24:54,690 --> 00:25:03,010
behavior all right and examples from

422
00:24:58,210 --> 00:25:05,800
real life for example a grub had similar

423
00:25:03,010 --> 00:25:11,890
problem with URL schemes and they paid

424
00:25:05,800 --> 00:25:16,450
they paid over seven thousand dollars

425
00:25:11,890 --> 00:25:19,900
for it and again Twitter that it was

426
00:25:16,450 --> 00:25:22,060
just interesting back that iOS

427
00:25:19,900 --> 00:25:24,100
application can establish FaceTime calls

428
00:25:22,060 --> 00:25:27,760
without users permission very

429
00:25:24,100 --> 00:25:30,550
interesting and take away from the sixth

430
00:25:27,760 --> 00:25:34,180
category is that check if a message

431
00:25:30,550 --> 00:25:37,629
comes from expected sender strictly

432
00:25:34,180 --> 00:25:41,230
strictly validate the parameters and if

433
00:25:37,630 --> 00:25:42,130
this URL scheme and the parameters that

434
00:25:41,230 --> 00:25:45,760
that

435
00:25:42,130 --> 00:25:48,100
schemes contain the our past directive

436
00:25:45,760 --> 00:25:53,169
the webview please check the permissions

437
00:25:48,100 --> 00:25:58,030
of this webview because it can lead to

438
00:25:53,169 --> 00:26:04,480
serious consequences okay and seventh

439
00:25:58,030 --> 00:26:08,678
category that is code quality so there

440
00:26:04,480 --> 00:26:11,770
are the three main things to take about

441
00:26:08,679 --> 00:26:17,110
to take care about so the first one is

442
00:26:11,770 --> 00:26:19,570
do not use deprecated api's libraries

443
00:26:17,110 --> 00:26:21,309
that use may also have owner abilities

444
00:26:19,570 --> 00:26:24,939
that i will show you on the next slide

445
00:26:21,309 --> 00:26:27,850
and if you use any dependency managers

446
00:26:24,940 --> 00:26:31,330
like cocoa pods or cartage please do not

447
00:26:27,850 --> 00:26:33,850
hard code the fixed versions so if you

448
00:26:31,330 --> 00:26:36,600
open for example the pot file and you

449
00:26:33,850 --> 00:26:38,980
see the library name equals some number

450
00:26:36,600 --> 00:26:43,719
it's not how it should be done because

451
00:26:38,980 --> 00:26:46,770
this libraries can also have owner

452
00:26:43,720 --> 00:26:50,140
abilities as you can see on this example

453
00:26:46,770 --> 00:26:53,799
the if' networking library and this

454
00:26:50,140 --> 00:26:57,570
version allowed to perform and in the

455
00:26:53,799 --> 00:27:02,980
middle attack because as you can see

456
00:26:57,570 --> 00:27:05,379
without going the details it was the

457
00:27:02,980 --> 00:27:09,280
example that i described before

458
00:27:05,380 --> 00:27:11,230
when the safe networking to take care

459
00:27:09,280 --> 00:27:12,580
about the self it being and if the

460
00:27:11,230 --> 00:27:15,600
certificate thing was disabled

461
00:27:12,580 --> 00:27:22,260
certificate the ssl certificate was not

462
00:27:15,600 --> 00:27:27,158
checked if it's trusted or not okay and

463
00:27:22,260 --> 00:27:31,510
in WWDC apple deprecated the uiwebview

464
00:27:27,159 --> 00:27:34,840
and it's it's it's a good news for us

465
00:27:31,510 --> 00:27:38,919
because UI webview wasn't actually

466
00:27:34,840 --> 00:27:45,970
really secure because it handled file

467
00:27:38,919 --> 00:27:50,350
handler so any XSS when of course

468
00:27:45,970 --> 00:27:53,530
attacker could exploit the XSS they were

469
00:27:50,350 --> 00:27:55,240
they was able to they were able to steal

470
00:27:53,530 --> 00:27:55,908
a local files from the from the

471
00:27:55,240 --> 00:28:00,529
container

472
00:27:55,909 --> 00:28:03,769
and by the way were WebKit web view has

473
00:28:00,529 --> 00:28:07,249
also this file have functionality but

474
00:28:03,769 --> 00:28:10,659
it's it's not turned on by default so we

475
00:28:07,249 --> 00:28:14,389
have to do this manually and the

476
00:28:10,659 --> 00:28:18,440
interesting thing is that I found this

477
00:28:14,389 --> 00:28:22,908
box in real Apple applications the first

478
00:28:18,440 --> 00:28:27,259
one I want to show you is the the maca

479
00:28:22,909 --> 00:28:31,639
standard the dictionary so without going

480
00:28:27,259 --> 00:28:33,979
into the details it was really old

481
00:28:31,639 --> 00:28:36,349
technology because when you wanted to

482
00:28:33,979 --> 00:28:41,899
create a new dictionary you had to

483
00:28:36,349 --> 00:28:44,208
compile it so the the most of time that

484
00:28:41,899 --> 00:28:47,779
I spent to exploit this vulnerability

485
00:28:44,209 --> 00:28:52,129
took me to compile this dictionary so so

486
00:28:47,779 --> 00:28:57,619
it was really really hard to do and the

487
00:28:52,129 --> 00:29:01,609
exploit looked like this so you just

488
00:28:57,619 --> 00:29:05,539
create create a malicious entry insert

489
00:29:01,609 --> 00:29:09,649
the script tags and using Ajax just

490
00:29:05,539 --> 00:29:13,129
steal the ATC password and send it to my

491
00:29:09,649 --> 00:29:25,879
listeners so it was as simple as that so

492
00:29:13,129 --> 00:29:29,569
the demo I run the net cut and now I'm

493
00:29:25,879 --> 00:29:33,259
opening the mulches entry and as you can

494
00:29:29,569 --> 00:29:37,879
see the ATC password was sent to my

495
00:29:33,259 --> 00:29:41,389
listener so just a simple Ajax script

496
00:29:37,879 --> 00:29:46,009
that allowed to still local files from

497
00:29:41,389 --> 00:29:48,079
the user and the second apples

498
00:29:46,009 --> 00:29:51,499
application that I wanted to show you as

499
00:29:48,079 --> 00:29:53,509
hat viewer and at first I wanted to cut

500
00:29:51,499 --> 00:29:55,549
those lucky heart from Google project

501
00:29:53,509 --> 00:29:59,329
zero that find this vulnerability like

502
00:29:55,549 --> 00:30:03,249
one month before me but it happened that

503
00:29:59,329 --> 00:30:06,918
Apple didn't fix the core of the issue

504
00:30:03,249 --> 00:30:09,350
so it was again usage of UI webview the

505
00:30:06,919 --> 00:30:13,669
head and access to local files so

506
00:30:09,350 --> 00:30:19,629
I find another way to exploit this

507
00:30:13,669 --> 00:30:25,009
vulnerability in this case I created

508
00:30:19,630 --> 00:30:30,309
malicious documentation that could be

509
00:30:25,009 --> 00:30:38,899
open using the help exhaled URL scheme I

510
00:30:30,309 --> 00:30:46,370
pass some JavaScript and just send it

511
00:30:38,899 --> 00:30:50,418
via iMessage and whenever the victim

512
00:30:46,370 --> 00:30:52,908
clicks on it it launches the script and

513
00:30:50,419 --> 00:30:55,759
opens the calculator because what was

514
00:30:52,909 --> 00:30:58,879
interesting in Hell viewer it had

515
00:30:55,759 --> 00:31:01,850
registered few additional URL schemes

516
00:30:58,879 --> 00:31:08,149
that allowed to open arbitrary file on

517
00:31:01,850 --> 00:31:08,928
the ma class okay and example from

518
00:31:08,149 --> 00:31:13,279
non-apple

519
00:31:08,929 --> 00:31:18,919
applications for example Yahoo iOS

520
00:31:13,279 --> 00:31:21,620
application had this use UI webview - to

521
00:31:18,919 --> 00:31:26,149
preview some some data so for example

522
00:31:21,620 --> 00:31:29,299
when you send some XML it's run it's

523
00:31:26,149 --> 00:31:32,539
like a real HTML and it the attacker was

524
00:31:29,299 --> 00:31:38,960
able to steal user cookies from your

525
00:31:32,539 --> 00:31:42,879
yahoo email on on iOS ok and last

526
00:31:38,960 --> 00:31:46,840
category that is resiliency requirements

527
00:31:42,879 --> 00:31:50,649
and when we talk about resigning

528
00:31:46,840 --> 00:31:54,230
resiliency requirements the most common

529
00:31:50,649 --> 00:31:58,399
issue here is problem with anti

530
00:31:54,230 --> 00:32:00,919
tampering so anti tampering is for those

531
00:31:58,399 --> 00:32:02,299
who don't want their application to be

532
00:32:00,919 --> 00:32:05,570
tampered with

533
00:32:02,299 --> 00:32:08,389
for those who include model risk in the

534
00:32:05,570 --> 00:32:11,899
threat model that were probably when

535
00:32:08,389 --> 00:32:14,600
there is a malware it will probably at

536
00:32:11,899 --> 00:32:17,750
first jailbreak your device and then

537
00:32:14,600 --> 00:32:19,668
exploit something and some of the

538
00:32:17,750 --> 00:32:22,010
developers of course just need to be

539
00:32:19,669 --> 00:32:23,240
compliant with our small mobile

540
00:32:22,010 --> 00:32:24,980
application security very

541
00:32:23,240 --> 00:32:29,740
vacation standard during the pen tests

542
00:32:24,980 --> 00:32:34,070
so this is the first announcement of my

543
00:32:29,740 --> 00:32:38,090
new library for developers iOS security

544
00:32:34,070 --> 00:32:41,480
suit that detects the je breaks with new

545
00:32:38,090 --> 00:32:45,889
indicators because things have changed

546
00:32:41,480 --> 00:32:49,610
since iOS 10 it checks for attach

547
00:32:45,890 --> 00:32:52,910
debuggers the common use tampering tools

548
00:32:49,610 --> 00:32:56,719
like for example Frida or needle or any

549
00:32:52,910 --> 00:33:00,610
Frida based reverse engineering tool

550
00:32:56,720 --> 00:33:05,030
that is used on iOS and in this version

551
00:33:00,610 --> 00:33:08,479
1.0 it also checks if your application

552
00:33:05,030 --> 00:33:12,170
was run in the emulator so if you want

553
00:33:08,480 --> 00:33:15,590
to download it it's accessible on a

554
00:33:12,170 --> 00:33:32,850
github so I'll give you a few seconds to

555
00:33:15,590 --> 00:33:34,059
do a photo all right and now live demo I

556
00:33:32,850 --> 00:33:39,110
[Music]

557
00:33:34,059 --> 00:33:42,379
wanted to make it really easy to use for

558
00:33:39,110 --> 00:33:48,250
developers so everything you need to do

559
00:33:42,380 --> 00:33:51,950
is to just download it via cartage or

560
00:33:48,250 --> 00:33:58,270
cocoapods import the iOS acuity suit and

561
00:33:51,950 --> 00:34:02,059
for example we can check whether our

562
00:33:58,270 --> 00:34:10,239
application is for example run in

563
00:34:02,059 --> 00:34:14,389
emulator so I'll build this and lunch

564
00:34:10,239 --> 00:34:16,850
and as you can see the similar it opened

565
00:34:14,389 --> 00:34:18,950
and it's returned true because it's

566
00:34:16,850 --> 00:34:22,699
emulator so it's returned through of

567
00:34:18,949 --> 00:34:25,600
course so it's pretty easy to use for

568
00:34:22,699 --> 00:34:28,899
developers and may increase your

569
00:34:25,600 --> 00:34:28,899
application security

570
00:34:29,109 --> 00:34:43,098
okay so here we come to the summary and

571
00:34:37,569 --> 00:34:46,699
summary for pen testers and other people

572
00:34:43,099 --> 00:34:49,429
from offensive security divisions so the

573
00:34:46,699 --> 00:34:52,759
most common vulnerabilities that we find

574
00:34:49,429 --> 00:34:54,619
in modernist application sensitive data

575
00:34:52,759 --> 00:34:58,009
without any protection that may be

576
00:34:54,619 --> 00:35:00,289
backup API sqeeze cloud credential

577
00:34:58,009 --> 00:35:03,200
working on production test accounting

578
00:35:00,289 --> 00:35:05,390
application package as I said network

579
00:35:03,200 --> 00:35:08,569
issues up transport security miss

580
00:35:05,390 --> 00:35:11,960
configuration poorly protected URL

581
00:35:08,569 --> 00:35:16,729
schemes and fixed library versions so if

582
00:35:11,960 --> 00:35:21,229
you do the security assessments of iOS

583
00:35:16,729 --> 00:35:25,009
applications you can focus on on this

584
00:35:21,229 --> 00:35:28,538
point because they they are the most

585
00:35:25,009 --> 00:35:31,279
frequent ones and as I promised

586
00:35:28,539 --> 00:35:34,640
recommendations for developers

587
00:35:31,279 --> 00:35:37,039
so in short short term you can optimize

588
00:35:34,640 --> 00:35:39,828
your application to work properly with

589
00:35:37,039 --> 00:35:42,140
password managers and autofill if you're

590
00:35:39,829 --> 00:35:46,940
of course if your application users for

591
00:35:42,140 --> 00:35:50,089
example SMS as 2fa and if you are

592
00:35:46,940 --> 00:35:55,160
developing a high-risk application you

593
00:35:50,089 --> 00:35:59,180
should consider anti tampering tools to

594
00:35:55,160 --> 00:36:02,629
protect your application more deeply and

595
00:35:59,180 --> 00:36:06,288
in long term if you use UI webview you

596
00:36:02,630 --> 00:36:08,680
should probably think about WK webview

597
00:36:06,289 --> 00:36:15,559
now because UI webview is as I said

598
00:36:08,680 --> 00:36:18,649
deprecated now if you if you use native

599
00:36:15,559 --> 00:36:20,839
use passwords to login into your

600
00:36:18,650 --> 00:36:23,390
application you can now use native

601
00:36:20,839 --> 00:36:26,019
password policy and if your application

602
00:36:23,390 --> 00:36:29,328
is wrote in objective-c

603
00:36:26,019 --> 00:36:32,049
it's probably a good time since Swift is

604
00:36:29,329 --> 00:36:33,289
more and more stable to think about

605
00:36:32,049 --> 00:36:36,880
Swift

606
00:36:33,289 --> 00:36:40,069
I don't say that you have from now

607
00:36:36,880 --> 00:36:41,190
rewrite your applications to suite

608
00:36:40,069 --> 00:36:44,099
because

609
00:36:41,190 --> 00:36:47,490
I know the reality but it's a good time

610
00:36:44,099 --> 00:36:51,660
to start thinking about it all right and

611
00:36:47,490 --> 00:36:54,769
basing on our experience in almost in

612
00:36:51,660 --> 00:36:57,629
almost all applications that we test

613
00:36:54,769 --> 00:37:00,479
vulnerabilities exist and I think and

614
00:36:57,630 --> 00:37:03,089
it's my personal opinion that most of

615
00:37:00,480 --> 00:37:06,509
these vulnerabilities can be fixed by

616
00:37:03,089 --> 00:37:10,019
security aware developers but if you

617
00:37:06,509 --> 00:37:14,039
develop a high-risk application it's a

618
00:37:10,019 --> 00:37:19,288
probably good practice to conduct pen

619
00:37:14,039 --> 00:37:21,900
tests anyway so for developers again we

620
00:37:19,289 --> 00:37:23,819
prepared with my colleagues mobile

621
00:37:21,900 --> 00:37:28,190
applications security best practices

622
00:37:23,819 --> 00:37:31,319
that is general guideline how to create

623
00:37:28,190 --> 00:37:33,630
secure secure mobile applications so

624
00:37:31,319 --> 00:37:44,069
again I will give you a few seconds to

625
00:37:33,630 --> 00:37:46,950
make a photo all right and this is the

626
00:37:44,069 --> 00:37:49,470
end of this presentation if somebody

627
00:37:46,950 --> 00:37:53,669
want to have this presentation on me at

628
00:37:49,470 --> 00:37:56,220
mail please leave me business cards so I

629
00:37:53,670 --> 00:38:00,200
can send your you the presentation and

630
00:37:56,220 --> 00:38:00,200
thank you very much for your attention

631
00:38:01,090 --> 00:38:02,720
[Music]

632
00:38:01,390 --> 00:38:04,200
[Applause]

633
00:38:02,720 --> 00:38:06,259
[Music]

634
00:38:04,200 --> 00:38:06,259
you

