1
00:00:09,440 --> 00:00:13,920
thank you and good morning as you can

2
00:00:12,330 --> 00:00:17,130
see a tide of our talk is apt attack

3
00:00:13,920 --> 00:00:18,240
based purple teaming using attack you

4
00:00:17,130 --> 00:00:19,799
might have noticed attack is in there

5
00:00:18,240 --> 00:00:22,650
twice it's not an accident we are big

6
00:00:19,800 --> 00:00:26,430
fans of attack as introduction and said

7
00:00:22,650 --> 00:00:28,409
we are from mitre before we continue to

8
00:00:26,430 --> 00:00:30,150
a formal introduction my name is Jamie

9
00:00:28,410 --> 00:00:32,880
Williams I'm an adversarial engineer

10
00:00:30,150 --> 00:00:34,739
mitre I do mostly research an adversary

11
00:00:32,880 --> 00:00:37,050
emulation as well as behavior detection

12
00:00:34,739 --> 00:00:39,239
and some of the work you might have seen

13
00:00:37,050 --> 00:00:42,559
in public space that I work on mitre

14
00:00:39,239 --> 00:00:48,120
attack as well as attack evaluations

15
00:00:42,559 --> 00:00:50,430
I'll get a little okay that's a lot

16
00:00:48,120 --> 00:00:52,980
better I can hear myself now and I'm

17
00:00:50,430 --> 00:00:54,239
Daniel Weiss cyber security engineer at

18
00:00:52,980 --> 00:00:57,538
mitre as well have been there for just

19
00:00:54,239 --> 00:01:01,078
about three years I do both red and blue

20
00:00:57,539 --> 00:01:03,439
spit split almost 50/50 right now and

21
00:01:01,079 --> 00:01:05,760
I'm also on the attack evaluations team

22
00:01:03,439 --> 00:01:08,189
so I said you might have noticed from

23
00:01:05,760 --> 00:01:10,110
the title of our deck we are continuing

24
00:01:08,189 --> 00:01:12,059
a conversation or presentation from last

25
00:01:10,110 --> 00:01:14,010
year so if you recognize those gentlemen

26
00:01:12,060 --> 00:01:16,350
as Cody and Chris good friends of ours

27
00:01:14,010 --> 00:01:18,330
they were here last year briefing on the

28
00:01:16,350 --> 00:01:19,470
same topic so basically in that shaped

29
00:01:18,330 --> 00:01:21,240
our talk today is we're basically

30
00:01:19,470 --> 00:01:23,420
picking up where that conversation left

31
00:01:21,240 --> 00:01:26,220
off and giving a little more example and

32
00:01:23,420 --> 00:01:28,829
depth into threat based purple teaming

33
00:01:26,220 --> 00:01:30,060
using attack so before we continue or do

34
00:01:28,829 --> 00:01:33,600
a quick recap of what they talked about

35
00:01:30,060 --> 00:01:35,880
last year so you know I think what is

36
00:01:33,600 --> 00:01:38,908
attack that's a great start the guys

37
00:01:35,880 --> 00:01:39,839
from atomic threat coverage did a pretty

38
00:01:38,909 --> 00:01:41,720
good job yesterday

39
00:01:39,840 --> 00:01:43,850
describing attack but at a high level

40
00:01:41,720 --> 00:01:46,560
attack is our knowledge base of

41
00:01:43,850 --> 00:01:48,780
adversary behavior I basically the idea

42
00:01:46,560 --> 00:01:50,520
is we have this idea called threat

43
00:01:48,780 --> 00:01:52,259
inform defense basically if you

44
00:01:50,520 --> 00:01:53,520
understand what threats are doing you

45
00:01:52,259 --> 00:01:56,850
are better equipped to make good

46
00:01:53,520 --> 00:01:58,439
decisions in terms of defense one of my

47
00:01:56,850 --> 00:02:01,079
favorite things about attack is it's not

48
00:01:58,439 --> 00:02:02,789
theoretical everything that is an attack

49
00:02:01,079 --> 00:02:04,408
while the behavior is captured there are

50
00:02:02,790 --> 00:02:06,060
documented real behavior so things

51
00:02:04,409 --> 00:02:09,450
adversaries are actually doing in the

52
00:02:06,060 --> 00:02:11,400
wild we're not selling attack it's free

53
00:02:09,449 --> 00:02:12,810
global open so you can go to the website

54
00:02:11,400 --> 00:02:13,620
and read everything for free there's no

55
00:02:12,810 --> 00:02:16,230
subscription

56
00:02:13,620 --> 00:02:18,540
there's no money in exchange as well as

57
00:02:16,230 --> 00:02:20,160
you can check out our analysis as well

58
00:02:18,540 --> 00:02:22,349
as we reference everything so you can

59
00:02:20,160 --> 00:02:23,549
check out the sources that we read to

60
00:02:22,349 --> 00:02:25,379
make these analysis and all these

61
00:02:23,550 --> 00:02:26,569
judgments so you reference everything to

62
00:02:25,379 --> 00:02:29,190
click it and go to the ground truth

63
00:02:26,569 --> 00:02:31,950
intelligence there and final point here

64
00:02:29,190 --> 00:02:33,900
is community driven so if you've never

65
00:02:31,950 --> 00:02:35,849
noticed a lot of attack comes from what

66
00:02:33,900 --> 00:02:37,560
we call contributions so we have our

67
00:02:35,849 --> 00:02:39,329
contact information there it's a tacit

68
00:02:37,560 --> 00:02:41,190
mitered org for email and our Twitter

69
00:02:39,330 --> 00:02:43,319
account definitely we're always looking

70
00:02:41,190 --> 00:02:45,060
for if you guys see things in the wild

71
00:02:43,319 --> 00:02:46,230
that are missing from attack I think

72
00:02:45,060 --> 00:02:47,940
there was a mention of that yesterday as

73
00:02:46,230 --> 00:02:51,149
well as there's a talk later today about

74
00:02:47,940 --> 00:02:52,500
you know cloud behaviors those type of

75
00:02:51,150 --> 00:02:55,769
things we're always looking for a new

76
00:02:52,500 --> 00:02:56,970
content so definitely reach out so to

77
00:02:55,769 --> 00:02:58,200
kind of give you an overview of the

78
00:02:56,970 --> 00:03:00,090
structure attack

79
00:02:58,200 --> 00:03:02,339
normally you see attacked in what we

80
00:03:00,090 --> 00:03:03,390
call the matrix view so I D composed

81
00:03:02,340 --> 00:03:06,180
that to kind of make it make more sense

82
00:03:03,390 --> 00:03:08,429
so starting with the tactics or what we

83
00:03:06,180 --> 00:03:10,470
call the adversary goals so these are as

84
00:03:08,430 --> 00:03:14,010
you see across the top we have the 12

85
00:03:10,470 --> 00:03:15,989
what we call tactics what's special here

86
00:03:14,010 --> 00:03:18,540
is this is not a kill chain so there's

87
00:03:15,989 --> 00:03:20,489
no linear or like set order of these

88
00:03:18,540 --> 00:03:21,569
these are just basically the different

89
00:03:20,489 --> 00:03:22,769
that various different things an

90
00:03:21,569 --> 00:03:25,290
adversary would do in an environment

91
00:03:22,769 --> 00:03:26,880
once they're like post compromised so

92
00:03:25,290 --> 00:03:28,470
things like gaining initial access

93
00:03:26,880 --> 00:03:30,599
executing things moving laterally

94
00:03:28,470 --> 00:03:32,940
exfilling and then on the end we

95
00:03:30,599 --> 00:03:35,399
actually have as of last week our latest

96
00:03:32,940 --> 00:03:38,190
tactic impacts so attacks against

97
00:03:35,400 --> 00:03:39,780
availability and integrity coming down

98
00:03:38,190 --> 00:03:42,030
from every tactic we have what we call

99
00:03:39,780 --> 00:03:43,859
techniques so these are implementations

100
00:03:42,030 --> 00:03:46,380
of how an adversary actually achieve

101
00:03:43,859 --> 00:03:48,180
those goals so for example we look at

102
00:03:46,380 --> 00:03:50,340
credit access you see things like brute

103
00:03:48,180 --> 00:03:52,169
forcing passwords dumping passwords or

104
00:03:50,340 --> 00:03:55,319
input capture which is basically key

105
00:03:52,169 --> 00:03:58,669
logging so capturing keystrokes to gain

106
00:03:55,319 --> 00:04:00,450
access to credentials with each

107
00:03:58,669 --> 00:04:01,980
technique we have what we call

108
00:04:00,450 --> 00:04:03,060
procedures so if you click if you go to

109
00:04:01,980 --> 00:04:04,798
this page and website and click on

110
00:04:03,060 --> 00:04:05,910
individual one you'll see a full

111
00:04:04,799 --> 00:04:07,530
write-up and what we mean by that

112
00:04:05,910 --> 00:04:10,290
technique as well as what we call

113
00:04:07,530 --> 00:04:12,419
procedures which are actual malware or

114
00:04:10,290 --> 00:04:13,918
groups that have done this specific

115
00:04:12,419 --> 00:04:15,359
technique so in this case we're

116
00:04:13,919 --> 00:04:17,849
highlighting accessibility features as

117
00:04:15,359 --> 00:04:20,450
you see that technique spans multiple

118
00:04:17,849 --> 00:04:22,890
tactics so it's profess and privileged

119
00:04:20,450 --> 00:04:24,900
persistence so if you take a look at the

120
00:04:22,890 --> 00:04:26,550
procedures it's kind of small so but

121
00:04:24,900 --> 00:04:27,159
basically you see how different groups

122
00:04:26,550 --> 00:04:28,690
have

123
00:04:27,160 --> 00:04:30,610
and accessibility features for

124
00:04:28,690 --> 00:04:32,740
persistence so in in the case of a PT

125
00:04:30,610 --> 00:04:35,110
three they replace the SC binary with

126
00:04:32,740 --> 00:04:36,730
their own payload so when you go to an

127
00:04:35,110 --> 00:04:39,190
RTP desktop or a login page and hit

128
00:04:36,730 --> 00:04:41,020
shift 5 times CMD will pop or the

129
00:04:39,190 --> 00:04:42,430
payload launches as well as there's an

130
00:04:41,020 --> 00:04:44,469
Empire module that can do something

131
00:04:42,430 --> 00:04:47,170
similar it replaces the magnify binary

132
00:04:44,470 --> 00:04:49,090
with scene D so you go to the like a

133
00:04:47,170 --> 00:04:51,160
login page and you like open a little

134
00:04:49,090 --> 00:04:52,810
like magnifying glass and instead of

135
00:04:51,160 --> 00:04:55,300
seeing like a zoomed in thing you see

136
00:04:52,810 --> 00:04:58,180
like a scene B pop and that's obviously

137
00:04:55,300 --> 00:04:59,980
malicious so getting back to what Cody

138
00:04:58,180 --> 00:05:01,000
and Chris talked about last year one of

139
00:04:59,980 --> 00:05:02,590
the things that were really excited

140
00:05:01,000 --> 00:05:04,690
about is what we call emulation plans

141
00:05:02,590 --> 00:05:07,119
this is actually a new concept recently

142
00:05:04,690 --> 00:05:10,240
well basically the idea is taking these

143
00:05:07,120 --> 00:05:12,340
tactics from attack and mapping them

144
00:05:10,240 --> 00:05:14,110
into a structure for how you would

145
00:05:12,340 --> 00:05:15,880
emulate an adversary so in this case

146
00:05:14,110 --> 00:05:18,520
what they released the last SIEF Khan

147
00:05:15,880 --> 00:05:21,100
was a BT 3 so they basically did a lot

148
00:05:18,520 --> 00:05:22,510
of research into the actual cadence of

149
00:05:21,100 --> 00:05:24,190
apt 3 how they actually maneuver

150
00:05:22,510 --> 00:05:26,200
starting with like the different phases

151
00:05:24,190 --> 00:05:28,150
so getting their payloads ready and

152
00:05:26,200 --> 00:05:29,770
delivering it to a victim what they do

153
00:05:28,150 --> 00:05:32,080
when they compromise a host so you see

154
00:05:29,770 --> 00:05:33,820
evading defenses discovery privilege

155
00:05:32,080 --> 00:05:35,770
escalation so there's various techniques

156
00:05:33,820 --> 00:05:38,050
within those tactics and then phase 3

157
00:05:35,770 --> 00:05:40,530
you know collecting X fill and like

158
00:05:38,050 --> 00:05:42,730
compressing and staging their data

159
00:05:40,530 --> 00:05:45,820
another talk a big point they talked

160
00:05:42,730 --> 00:05:48,250
about last year was using attack to

161
00:05:45,820 --> 00:05:50,110
evaluate specific techniques so in the

162
00:05:48,250 --> 00:05:51,430
case in this case we have like what we

163
00:05:50,110 --> 00:05:53,200
call our Navigator this is basically

164
00:05:51,430 --> 00:05:54,910
allows you to make filters or highlight

165
00:05:53,200 --> 00:05:57,520
specific techniques and make your own

166
00:05:54,910 --> 00:05:59,230
matrix so what they were talking about

167
00:05:57,520 --> 00:06:01,900
was basically you know you select the

168
00:05:59,230 --> 00:06:04,330
techniques you're interested in or even

169
00:06:01,900 --> 00:06:06,520
just one and you use this purple teaming

170
00:06:04,330 --> 00:06:08,469
model to evaluate that so basically the

171
00:06:06,520 --> 00:06:10,000
idea is you start with emulating a

172
00:06:08,470 --> 00:06:12,280
technique so figure out in this case

173
00:06:10,000 --> 00:06:13,720
executions your API you figure out how

174
00:06:12,280 --> 00:06:15,400
an adversary but actually execute that

175
00:06:13,720 --> 00:06:18,040
and you'd run it in your environment and

176
00:06:15,400 --> 00:06:20,320
on the blue perspective you detect that

177
00:06:18,040 --> 00:06:22,510
or defend it however you choose but the

178
00:06:20,320 --> 00:06:23,860
big point here is this transparency

179
00:06:22,510 --> 00:06:25,240
between each and so the red team is

180
00:06:23,860 --> 00:06:26,770
sharing with the blue exactly what

181
00:06:25,240 --> 00:06:28,480
happened exactly when they did it and

182
00:06:26,770 --> 00:06:30,219
completely telling you there's no

183
00:06:28,480 --> 00:06:31,690
blackbox testing so telling you exactly

184
00:06:30,220 --> 00:06:35,140
what happened and when where and how

185
00:06:31,690 --> 00:06:37,300
blue team defends it based on all that

186
00:06:35,140 --> 00:06:39,070
knowledge pushes their defense back to

187
00:06:37,300 --> 00:06:40,460
red so basically the challenge there is

188
00:06:39,070 --> 00:06:41,690
to up

189
00:06:40,460 --> 00:06:44,180
okay now that I know you're defending it

190
00:06:41,690 --> 00:06:46,969
this way can I do that same technique or

191
00:06:44,180 --> 00:06:48,259
behavior and bypass your new defense so

192
00:06:46,970 --> 00:06:50,020
that iterative process going back and

193
00:06:48,259 --> 00:06:53,180
forth as you can probably tell like

194
00:06:50,020 --> 00:06:57,198
seeing the level of like complexity and

195
00:06:53,180 --> 00:06:58,250
like resiliency increases each time so I

196
00:06:57,199 --> 00:06:59,569
know you're probably thinking right now

197
00:06:58,250 --> 00:07:01,729
like am I gonna spend the entire time

198
00:06:59,569 --> 00:07:04,849
talking about what happened last year No

199
00:07:01,729 --> 00:07:05,810
so thankfully we do have some new

200
00:07:04,849 --> 00:07:07,340
content here it's actually pretty

201
00:07:05,810 --> 00:07:09,380
exciting for us where a guy she can take

202
00:07:07,340 --> 00:07:10,698
a deeper dive into the science of what

203
00:07:09,380 --> 00:07:13,520
we're talking about by emulation and

204
00:07:10,699 --> 00:07:15,050
this purple teaming approach sort of

205
00:07:13,520 --> 00:07:15,948
high-level just kind of give you an

206
00:07:15,050 --> 00:07:18,320
overview what we're gonna talk about

207
00:07:15,949 --> 00:07:20,150
today we're going to pick a specific

208
00:07:18,320 --> 00:07:22,219
technique based on its specific scenario

209
00:07:20,150 --> 00:07:24,258
and then we're going to walk you through

210
00:07:22,220 --> 00:07:25,880
an example of the purple teaming

211
00:07:24,259 --> 00:07:28,009
approach so emulating that behavior

212
00:07:25,880 --> 00:07:30,860
defending against it emulating again

213
00:07:28,009 --> 00:07:33,199
defending against it etc but the big

214
00:07:30,860 --> 00:07:34,610
point here is transparency so we'll talk

215
00:07:33,199 --> 00:07:36,050
about purple teaming the most important

216
00:07:34,610 --> 00:07:37,610
thing is that each side is talking to

217
00:07:36,050 --> 00:07:38,630
each other so hopefully through our

218
00:07:37,610 --> 00:07:40,130
demonstration we'll show you the

219
00:07:38,630 --> 00:07:44,449
importance of that and the value added

220
00:07:40,130 --> 00:07:46,009
by doing that one assumption here is the

221
00:07:44,449 --> 00:07:48,080
technique that we're testing we have

222
00:07:46,009 --> 00:07:50,960
we're starting from scratch so we have

223
00:07:48,080 --> 00:07:52,099
no like like something that we can apply

224
00:07:50,960 --> 00:07:54,789
is defense so we're starting from

225
00:07:52,099 --> 00:07:59,360
basically nothing for defending this

226
00:07:54,789 --> 00:08:01,280
technique okay so yeah we're researchers

227
00:07:59,360 --> 00:08:02,599
so we kind of heads in the clouds very

228
00:08:01,280 --> 00:08:04,340
often so one more thing we got to cover

229
00:08:02,599 --> 00:08:09,469
before we get like into the

230
00:08:04,340 --> 00:08:11,060
demonstrations so it helps before you

231
00:08:09,469 --> 00:08:13,099
start thinking about emulation it helps

232
00:08:11,060 --> 00:08:15,620
to think about like your emulation

233
00:08:13,099 --> 00:08:16,699
target in this case of a havior what we

234
00:08:15,620 --> 00:08:18,560
talked about a behavior we're not

235
00:08:16,699 --> 00:08:21,469
talking about things like static values

236
00:08:18,560 --> 00:08:22,820
like hashes ip's domains strings things

237
00:08:21,469 --> 00:08:24,830
like that when we want to do it what we

238
00:08:22,820 --> 00:08:26,419
call it emulation we're emulating the

239
00:08:24,830 --> 00:08:27,729
action or the behavior what the NAD

240
00:08:26,419 --> 00:08:29,960
versary

241
00:08:27,729 --> 00:08:31,490
actually does if you're familiar with

242
00:08:29,960 --> 00:08:33,708
the pyramid of pain this is like more of

243
00:08:31,490 --> 00:08:36,469
the high level things that are really

244
00:08:33,708 --> 00:08:38,869
hard to capture so this is kind of like

245
00:08:36,469 --> 00:08:40,039
a nebulous concept so a really

246
00:08:38,870 --> 00:08:41,060
interesting way to help you like

247
00:08:40,039 --> 00:08:42,588
understand what we talked mean by

248
00:08:41,059 --> 00:08:44,810
behavior is thinking about it in terms

249
00:08:42,589 --> 00:08:47,060
of attack so like I said before we have

250
00:08:44,810 --> 00:08:48,229
the tactics techniques and procedures we

251
00:08:47,060 --> 00:08:50,739
think behavior were more or less

252
00:08:48,230 --> 00:08:52,970
thinking the techniques and procedures

253
00:08:50,740 --> 00:08:53,870
excuse the pun but like we think that's

254
00:08:52,970 --> 00:08:56,180
like more or less the

255
00:08:53,870 --> 00:09:00,080
of a behavior it's the variation of the

256
00:08:56,180 --> 00:09:02,359
house and what's this is really

257
00:09:00,080 --> 00:09:04,940
important for emulation another way to

258
00:09:02,360 --> 00:09:06,710
think about it behavior is in stages so

259
00:09:04,940 --> 00:09:08,960
if you think about like anything in the

260
00:09:06,710 --> 00:09:10,940
world there's like before during and

261
00:09:08,960 --> 00:09:12,500
after so in terms of a behavior you can

262
00:09:10,940 --> 00:09:14,180
think about this like apply that same

263
00:09:12,500 --> 00:09:15,890
model for behavior and think about you

264
00:09:14,180 --> 00:09:18,229
know the prerequisites so what happens

265
00:09:15,890 --> 00:09:20,089
before a behavior happens the mechanics

266
00:09:18,230 --> 00:09:22,010
so what happens during the behavior and

267
00:09:20,089 --> 00:09:25,100
then the artifacts so what's left behind

268
00:09:22,010 --> 00:09:26,839
after a behavior so mapping that to

269
00:09:25,100 --> 00:09:29,089
system on events we can think about like

270
00:09:26,839 --> 00:09:32,060
prerequisites like things like image or

271
00:09:29,089 --> 00:09:33,470
driver loads mechanics being things like

272
00:09:32,060 --> 00:09:36,819
you know process creates process

273
00:09:33,470 --> 00:09:38,930
terminates remote like memory reads

274
00:09:36,820 --> 00:09:41,170
threads being created things like that

275
00:09:38,930 --> 00:09:44,390
so actually things happening and then

276
00:09:41,170 --> 00:09:46,969
the artifacts being like more of the

277
00:09:44,390 --> 00:09:48,410
forensic side so registry changes file

278
00:09:46,970 --> 00:09:50,960
changes as well as if you're talking

279
00:09:48,410 --> 00:09:52,430
about like beacons or rats network

280
00:09:50,960 --> 00:09:56,029
connections that are left over that are

281
00:09:52,430 --> 00:09:57,680
like established CT channels so you know

282
00:09:56,029 --> 00:09:58,959
a lot of theory at this point but at

283
00:09:57,680 --> 00:10:01,849
this point we try to get our hands dirty

284
00:09:58,959 --> 00:10:03,890
we decided not to trust the demo gods so

285
00:10:01,850 --> 00:10:05,660
we like pre-recorded all of our demos

286
00:10:03,890 --> 00:10:07,370
but hopefully it's still kind of cool so

287
00:10:05,660 --> 00:10:10,339
at this point I'm gonna hand over to Dan

288
00:10:07,370 --> 00:10:11,959
sweet Thanks so now that we know what a

289
00:10:10,339 --> 00:10:14,660
behavior is we're gonna actually jump in

290
00:10:11,959 --> 00:10:16,790
into emulating one before we do I'm just

291
00:10:14,660 --> 00:10:18,140
going to touch on how to do that there's

292
00:10:16,790 --> 00:10:20,329
a bunch of open source frameworks out

293
00:10:18,140 --> 00:10:22,819
there to actually do that the two I have

294
00:10:20,330 --> 00:10:25,910
up there are up there for a reason one

295
00:10:22,820 --> 00:10:27,260
is because we open sourced it and the

296
00:10:25,910 --> 00:10:30,740
other is because they kind of represent

297
00:10:27,260 --> 00:10:32,450
two sides of the emulation spectrum you

298
00:10:30,740 --> 00:10:35,270
have the atomic red team side which is

299
00:10:32,450 --> 00:10:36,529
on purposely made to be simple and easy

300
00:10:35,270 --> 00:10:38,779
to execute a lot of the stuff that

301
00:10:36,529 --> 00:10:40,880
atomic red team are one-liner so you can

302
00:10:38,779 --> 00:10:42,589
copy and paste and run into your beat

303
00:10:40,880 --> 00:10:44,270
and paste into your beacon or into a

304
00:10:42,589 --> 00:10:46,580
command prompt or PowerShell for example

305
00:10:44,270 --> 00:10:48,260
and just run and then do and then go

306
00:10:46,580 --> 00:10:50,330
through that purple teaming process on

307
00:10:48,260 --> 00:10:52,790
the other side you have a tool like

308
00:10:50,330 --> 00:10:56,140
caldera which is completely automated

309
00:10:52,790 --> 00:11:02,270
adversary emulation that does end to end

310
00:10:56,140 --> 00:11:04,870
attacks and so as part of our demo we're

311
00:11:02,270 --> 00:11:07,069
kind of going to devise a scenario where

312
00:11:04,870 --> 00:11:07,650
we're gonna demo in direct command

313
00:11:07,070 --> 00:11:09,600
execute

314
00:11:07,650 --> 00:11:11,430
and indirect minute execution basically

315
00:11:09,600 --> 00:11:16,110
says that we want to have a command line

316
00:11:11,430 --> 00:11:17,370
style interface without invoking CMD at

317
00:11:16,110 --> 00:11:19,620
that same time we're also are going to

318
00:11:17,370 --> 00:11:22,890
avoid PowerShell so as you can see in

319
00:11:19,620 --> 00:11:27,839
this example running CMD is also blocked

320
00:11:22,890 --> 00:11:29,310
in this environment so jumping to the

321
00:11:27,839 --> 00:11:33,180
atomic red team which is what we use for

322
00:11:29,310 --> 00:11:35,099
this demo for the easy side if you go to

323
00:11:33,180 --> 00:11:36,540
indirect command execution on the atomic

324
00:11:35,100 --> 00:11:39,120
red team he actually had or they

325
00:11:36,540 --> 00:11:41,339
actually have two different atomic tests

326
00:11:39,120 --> 00:11:43,080
that you can run the first one is taking

327
00:11:41,339 --> 00:11:46,260
advantage of the program compatibility

328
00:11:43,080 --> 00:11:48,420
assistant and the second one is for

329
00:11:46,260 --> 00:11:51,450
files on the first one the program

330
00:11:48,420 --> 00:11:53,040
compatibility assistant allows you to

331
00:11:51,450 --> 00:11:55,500
have that command line style interface

332
00:11:53,040 --> 00:11:58,410
you just have to specify the - a flag

333
00:11:55,500 --> 00:12:00,900
and for both demos we are going to do

334
00:11:58,410 --> 00:12:04,079
the default value of just popping Kalki

335
00:12:00,900 --> 00:12:05,430
on the second one the four files there's

336
00:12:04,080 --> 00:12:07,860
three different command-line arguments

337
00:12:05,430 --> 00:12:10,260
that we use the first one is /p which is

338
00:12:07,860 --> 00:12:11,880
the search path the second one is /m

339
00:12:10,260 --> 00:12:14,100
which is the search mask so that

340
00:12:11,880 --> 00:12:17,160
basically says it's a for loop and says

341
00:12:14,100 --> 00:12:19,440
our search path is system32 and the mask

342
00:12:17,160 --> 00:12:21,990
our search mask is notepad.exe so for

343
00:12:19,440 --> 00:12:24,120
every notepad.exe that you see inside of

344
00:12:21,990 --> 00:12:27,000
system 32 i want you to run the command

345
00:12:24,120 --> 00:12:29,279
after slash c which is kalki and since

346
00:12:27,000 --> 00:12:33,060
there's only one notepad dot exe in

347
00:12:29,279 --> 00:12:35,910
system 32 it's gonna pop one calc and so

348
00:12:33,060 --> 00:12:39,000
just for the simple demo on the left is

349
00:12:35,910 --> 00:12:42,000
the pca lua dot exe popping calc I'm

350
00:12:39,000 --> 00:12:44,100
just doing it from the run window so it

351
00:12:42,000 --> 00:12:47,370
pops through Explorer and then on the

352
00:12:44,100 --> 00:12:49,529
second side you can see four files also

353
00:12:47,370 --> 00:12:53,270
running through the run window and that

354
00:12:49,529 --> 00:12:57,570
also pop pops calc so sweet simple demo

355
00:12:53,270 --> 00:12:59,790
so now you see a pretty simple emulation

356
00:12:57,570 --> 00:13:01,800
of a technique or a behavior two

357
00:12:59,790 --> 00:13:04,790
different ways and so now we'll jump

358
00:13:01,800 --> 00:13:07,500
into the blue side or the detection side

359
00:13:04,790 --> 00:13:09,300
and so Before we jump into those two

360
00:13:07,500 --> 00:13:10,920
instances of detection I just want to

361
00:13:09,300 --> 00:13:12,630
jump back and talk about how you

362
00:13:10,920 --> 00:13:14,310
actually come to a detection so if you

363
00:13:12,630 --> 00:13:16,200
think of it from a pyramid style layer

364
00:13:14,310 --> 00:13:17,280
the bottom layer is going to be your

365
00:13:16,200 --> 00:13:18,660
data sources that's going to be the

366
00:13:17,280 --> 00:13:19,520
source of your information so process

367
00:13:18,660 --> 00:13:22,370
monitoring

368
00:13:19,520 --> 00:13:23,839
it's dll's all those types of things the

369
00:13:22,370 --> 00:13:26,570
second layer of that pyramid is gonna be

370
00:13:23,839 --> 00:13:28,520
the sensors so what actually is pulling

371
00:13:26,570 --> 00:13:29,959
or what's actually collecting the

372
00:13:28,520 --> 00:13:31,790
information from those data sources and

373
00:13:29,959 --> 00:13:33,709
then the third is going to be your

374
00:13:31,790 --> 00:13:36,680
analysis on top of that's basically to

375
00:13:33,709 --> 00:13:38,839
formulate the detection z' we have the

376
00:13:36,680 --> 00:13:41,180
cyber analytic repository card or gets

377
00:13:38,839 --> 00:13:43,339
not list up there but that is one open

378
00:13:41,180 --> 00:13:46,130
source example of analysis on top of

379
00:13:43,339 --> 00:13:49,279
those sensors and then just as a side

380
00:13:46,130 --> 00:13:50,899
step I'll talk about detection lab real

381
00:13:49,279 --> 00:13:52,339
quick we use that for all the demos it's

382
00:13:50,899 --> 00:13:54,470
an awesome purple teaming environment

383
00:13:52,339 --> 00:13:57,290
red teamers can use it blue teamers can

384
00:13:54,470 --> 00:13:58,550
use it it's at a high level it's just

385
00:13:57,290 --> 00:14:01,670
basically a Windows domain that you can

386
00:13:58,550 --> 00:14:03,290
stand up comes with a Splunk server and

387
00:14:01,670 --> 00:14:06,170
you can customize it however you want so

388
00:14:03,290 --> 00:14:07,760
usually how I run it is I throw a system

389
00:14:06,170 --> 00:14:10,010
on on there I open up system on to look

390
00:14:07,760 --> 00:14:11,990
like proc Mon I enable a bunch of the

391
00:14:10,010 --> 00:14:13,580
advanced audit policies so you get a

392
00:14:11,990 --> 00:14:15,830
whole bunch of Windows Event log besides

393
00:14:13,580 --> 00:14:18,709
the standard ones and then you can run a

394
00:14:15,830 --> 00:14:20,270
detect a emulation of a behavior like we

395
00:14:18,709 --> 00:14:21,979
just did in the previous slide and

396
00:14:20,270 --> 00:14:23,600
you'll see literally everything that

397
00:14:21,980 --> 00:14:28,250
goes on underneath the hood of Windows

398
00:14:23,600 --> 00:14:30,770
operating system ok so jumping into that

399
00:14:28,250 --> 00:14:33,800
first test which those which is the PCL

400
00:14:30,770 --> 00:14:35,360
Lua XE on the right we have just a

401
00:14:33,800 --> 00:14:37,449
pretty simple process for you so both of

402
00:14:35,360 --> 00:14:40,730
these tests are pretty straightforward

403
00:14:37,450 --> 00:14:42,470
Explorer is going to pop the indirect

404
00:14:40,730 --> 00:14:45,170
command execution binary that we use and

405
00:14:42,470 --> 00:14:49,070
that's actually going to pop the Cal so

406
00:14:45,170 --> 00:14:50,990
going back to the data sources if you

407
00:14:49,070 --> 00:14:56,149
want to detect the first test that we

408
00:14:50,990 --> 00:14:59,329
ran the first data store the three data

409
00:14:56,149 --> 00:15:02,510
sources that you need for this behavior

410
00:14:59,329 --> 00:15:03,920
of t1 202 is obviously process

411
00:15:02,510 --> 00:15:06,290
monitoring you're going to want to

412
00:15:03,920 --> 00:15:08,750
monitor for process creations of the PC

413
00:15:06,290 --> 00:15:10,610
at Lua binary the command line parameter

414
00:15:08,750 --> 00:15:13,730
so you have to specify that flag that

415
00:15:10,610 --> 00:15:15,770
the - a to run a process to start a

416
00:15:13,730 --> 00:15:18,079
process or to run your payload and then

417
00:15:15,770 --> 00:15:19,370
like Windows Event log 4 6 8 it

418
00:15:18,079 --> 00:15:23,239
obviously process creation will give you

419
00:15:19,370 --> 00:15:25,070
that also system money event ID 1 which

420
00:15:23,240 --> 00:15:27,880
is process creation first this one and

421
00:15:25,070 --> 00:15:32,120
then jumping to for files so same thing

422
00:15:27,880 --> 00:15:33,170
pretty simple for files popped calc so

423
00:15:32,120 --> 00:15:36,379
you want to monitor

424
00:15:33,170 --> 00:15:38,420
the four files binary or executable and

425
00:15:36,379 --> 00:15:40,970
then from the command line parameter

426
00:15:38,420 --> 00:15:43,729
standpoint for files we use three in our

427
00:15:40,970 --> 00:15:45,499
test so when you start doing this purple

428
00:15:43,730 --> 00:15:47,989
teaming an iterative cycle you try to

429
00:15:45,499 --> 00:15:49,669
kind of break the detection so in first

430
00:15:47,989 --> 00:15:52,819
if we were looking for those three

431
00:15:49,669 --> 00:15:55,009
process command line parameter flags the

432
00:15:52,819 --> 00:15:56,419
red team actually could devise a way

433
00:15:55,009 --> 00:15:58,999
that they can realize that they actually

434
00:15:56,419 --> 00:16:01,249
don't need those first two flags

435
00:15:58,999 --> 00:16:03,049
so /p the search path you don't need a

436
00:16:01,249 --> 00:16:04,519
defaults to the current directory and

437
00:16:03,049 --> 00:16:06,049
you also don't need the slash and the

438
00:16:04,519 --> 00:16:08,389
search mask it just defaults to a

439
00:16:06,049 --> 00:16:09,980
wild-card so star so if you're if you're

440
00:16:08,389 --> 00:16:12,679
in a directory that has for example

441
00:16:09,980 --> 00:16:16,609
three files it'll run your command three

442
00:16:12,679 --> 00:16:18,858
times and you can also do it slash C or

443
00:16:16,609 --> 00:16:21,230
dash D it doesn't matter and then

444
00:16:18,859 --> 00:16:22,879
obviously the Windows Event log data

445
00:16:21,230 --> 00:16:24,499
source so four six eight eight that

446
00:16:22,879 --> 00:16:27,309
event or if you're using system on even

447
00:16:24,499 --> 00:16:29,419
I did one will give you this information

448
00:16:27,309 --> 00:16:31,759
so we take an opportunity to talk about

449
00:16:29,419 --> 00:16:34,220
the product we mentioned earlier attack

450
00:16:31,759 --> 00:16:36,799
evaluation so you've never seen this the

451
00:16:34,220 --> 00:16:39,259
same kind of like red vs. blue scenario

452
00:16:36,799 --> 00:16:41,660
we basically for attack evaluations we

453
00:16:39,259 --> 00:16:43,519
ran that same scenario against EDR

454
00:16:41,660 --> 00:16:45,499
products so the URL is in the bottom if

455
00:16:43,519 --> 00:16:47,779
you check it out but basically we put

456
00:16:45,499 --> 00:16:51,079
together a twenty step red team script

457
00:16:47,779 --> 00:16:52,910
based on abt three ranted had our vendor

458
00:16:51,079 --> 00:16:54,829
set up the product we ran that emulation

459
00:16:52,910 --> 00:16:56,689
against those products and then provided

460
00:16:54,829 --> 00:16:58,849
the output to those EDI products

461
00:16:56,689 --> 00:17:01,488
specifically focusing on detection so if

462
00:16:58,850 --> 00:17:02,779
you see as highlighted up there you see

463
00:17:01,489 --> 00:17:04,639
on the right on the left you see the red

464
00:17:02,779 --> 00:17:06,619
tide so transparency we're telling you

465
00:17:04,638 --> 00:17:07,879
exactly what we did on the right we're

466
00:17:06,619 --> 00:17:10,099
showing you what the EDR product

467
00:17:07,880 --> 00:17:11,630
actually captured so like in terms of

468
00:17:10,099 --> 00:17:13,428
every technique that we tested as well

469
00:17:11,630 --> 00:17:15,139
as what was captured there so this is a

470
00:17:13,429 --> 00:17:17,269
pretty good like vignette for you know

471
00:17:15,138 --> 00:17:19,789
using this operationally or outside of

472
00:17:17,269 --> 00:17:22,970
just testing techniques also going

473
00:17:19,789 --> 00:17:24,919
forward like I said Dan showed you he

474
00:17:22,970 --> 00:17:26,389
said he said exactly what we tested and

475
00:17:24,919 --> 00:17:28,159
he took that to the detection side and

476
00:17:26,388 --> 00:17:29,779
using those command-line arguments was

477
00:17:28,159 --> 00:17:32,450
able to detect everything I'm actually a

478
00:17:29,779 --> 00:17:34,789
huge fan of using like the red vs. blue

479
00:17:32,450 --> 00:17:36,889
sparring analogy I think it's great a

480
00:17:34,789 --> 00:17:38,500
big point here though is it's really

481
00:17:36,889 --> 00:17:41,029
important sometimes to make blue miss

482
00:17:38,500 --> 00:17:43,010
not just like for shaming or anything

483
00:17:41,029 --> 00:17:45,169
like that but actually like it's a good

484
00:17:43,010 --> 00:17:46,670
opportunity for leveling up so just

485
00:17:45,169 --> 00:17:49,070
showing them something that they

486
00:17:46,670 --> 00:17:51,470
ever seen to help them enable like

487
00:17:49,070 --> 00:17:53,060
growth and like learning so big point

488
00:17:51,470 --> 00:17:54,500
here though is you're not just showing

489
00:17:53,060 --> 00:17:56,450
them things they've never seen but

490
00:17:54,500 --> 00:17:57,950
scoping it to the realm of like real

491
00:17:56,450 --> 00:18:00,350
behaviors so things they've seen that

492
00:17:57,950 --> 00:18:01,910
real adversaries are actually doing so

493
00:18:00,350 --> 00:18:04,580
the next step in this emulation process

494
00:18:01,910 --> 00:18:06,830
is to emulate that same behavior but

495
00:18:04,580 --> 00:18:08,210
better the first step in that process is

496
00:18:06,830 --> 00:18:10,010
looking at the way the previous

497
00:18:08,210 --> 00:18:12,380
detection works so like Dan just

498
00:18:10,010 --> 00:18:13,580
highlighted everything basically bit on

499
00:18:12,380 --> 00:18:16,130
the EPAct Lou and the four files

500
00:18:13,580 --> 00:18:17,659
detection was process based so looking

501
00:18:16,130 --> 00:18:19,640
at process creations as well as process

502
00:18:17,660 --> 00:18:20,960
command-line arguments so immediately as

503
00:18:19,640 --> 00:18:23,870
you start diving into the next level

504
00:18:20,960 --> 00:18:26,690
emulation your first prerequisite is hey

505
00:18:23,870 --> 00:18:27,800
I cannot live in that process land so

506
00:18:26,690 --> 00:18:30,770
first thing comes to mind for me

507
00:18:27,800 --> 00:18:33,379
avoiding processes is net for many

508
00:18:30,770 --> 00:18:35,150
reasons firstly it says it's pretty

509
00:18:33,380 --> 00:18:37,370
great in terms of like functionality as

510
00:18:35,150 --> 00:18:39,620
access to the low level like win32 api

511
00:18:37,370 --> 00:18:41,540
so you can do a lot of really creative

512
00:18:39,620 --> 00:18:43,449
things in general a lot of the

513
00:18:41,540 --> 00:18:45,800
detections for dotnet is immature

514
00:18:43,450 --> 00:18:47,570
unfortunately it's really complex under

515
00:18:45,800 --> 00:18:50,450
the hood so there's really not a lot of

516
00:18:47,570 --> 00:18:52,520
great like automation and deep analysis

517
00:18:50,450 --> 00:18:55,190
and logic based on the mechanics that's

518
00:18:52,520 --> 00:18:56,870
going on in there as well as I mean

519
00:18:55,190 --> 00:18:58,940
dotnet isn't like inherently malicious

520
00:18:56,870 --> 00:19:01,699
its installed by default on I think

521
00:18:58,940 --> 00:19:02,840
everything past Vista so there's a lot

522
00:19:01,700 --> 00:19:03,470
of noise and opportunities for false

523
00:19:02,840 --> 00:19:05,149
positives

524
00:19:03,470 --> 00:19:06,230
so from an emulator a Red Team it's a

525
00:19:05,150 --> 00:19:08,200
really great place to hide because

526
00:19:06,230 --> 00:19:10,730
there's a lot of the normal activity

527
00:19:08,200 --> 00:19:12,110
happening that realm we call that like

528
00:19:10,730 --> 00:19:13,850
living off the land so taking something

529
00:19:12,110 --> 00:19:16,909
that's already available and using it

530
00:19:13,850 --> 00:19:18,679
for malicious purposes and finally while

531
00:19:16,910 --> 00:19:20,660
this is a great emulation target is if

532
00:19:18,680 --> 00:19:22,970
you've followed a lot of like recent red

533
00:19:20,660 --> 00:19:24,340
team developments or frameworks they're

534
00:19:22,970 --> 00:19:27,170
actually moving towards dotnet

535
00:19:24,340 --> 00:19:28,760
specifically c-sharp to avoid like power

536
00:19:27,170 --> 00:19:31,760
show which is also lives in that process

537
00:19:28,760 --> 00:19:32,990
level detection realm and also like

538
00:19:31,760 --> 00:19:35,810
thread actors have moved here so we've

539
00:19:32,990 --> 00:19:38,570
seen Chinese as well as Iranian actors

540
00:19:35,810 --> 00:19:42,649
leveraging dotnet vs c-sharp for their

541
00:19:38,570 --> 00:19:43,580
malware kits so looking starting to do

542
00:19:42,650 --> 00:19:45,380
research and how we're actually gonna

543
00:19:43,580 --> 00:19:48,260
emulate this like in direct Kemetic you

544
00:19:45,380 --> 00:19:50,420
ssin that avoids CMD we start taking a

545
00:19:48,260 --> 00:19:52,310
look and we come across this blog post

546
00:19:50,420 --> 00:19:56,270
about spoofing parent kids

547
00:19:52,310 --> 00:19:58,639
so basically c-sharp net enables us to

548
00:19:56,270 --> 00:20:00,020
start calling API functions one

549
00:19:58,640 --> 00:20:02,090
interesting function is create

550
00:20:00,020 --> 00:20:03,860
is an interesting characteristic of

551
00:20:02,090 --> 00:20:06,199
create process obviously it creates a

552
00:20:03,860 --> 00:20:08,120
process but one of the parameters allows

553
00:20:06,200 --> 00:20:11,150
you to specify a particular parent pit

554
00:20:08,120 --> 00:20:11,989
so that's super interesting so we like a

555
00:20:11,150 --> 00:20:14,110
that's something that we could

556
00:20:11,990 --> 00:20:16,760
potentially use to get past that CMD

557
00:20:14,110 --> 00:20:18,080
requirement taking a deeper look into

558
00:20:16,760 --> 00:20:19,820
this we come across the proof of concept

559
00:20:18,080 --> 00:20:21,800
code so if you've ever seen this it's

560
00:20:19,820 --> 00:20:23,480
called select my parent but basically I

561
00:20:21,800 --> 00:20:26,060
think this was a Python script but

562
00:20:23,480 --> 00:20:27,500
basically the idea is it implements that

563
00:20:26,060 --> 00:20:30,740
parent pit spoofing so what it allows

564
00:20:27,500 --> 00:20:32,270
you to do is even though the top you

565
00:20:30,740 --> 00:20:34,160
give it a command and then you give it a

566
00:20:32,270 --> 00:20:37,100
parent pit and it basically launches

567
00:20:34,160 --> 00:20:39,440
that command as a sub process of that

568
00:20:37,100 --> 00:20:41,480
pit so if you look at the the bottom

569
00:20:39,440 --> 00:20:44,900
it's actually like proc Mon process

570
00:20:41,480 --> 00:20:46,760
Explorer be able to see via this code

571
00:20:44,900 --> 00:20:48,350
you were able to launch notepad from

572
00:20:46,760 --> 00:20:50,210
Alsace which is really weird and

573
00:20:48,350 --> 00:20:51,709
probably should never happen but it's a

574
00:20:50,210 --> 00:20:55,250
really interesting like characteristic

575
00:20:51,710 --> 00:20:56,960
of the way this API call works so taking

576
00:20:55,250 --> 00:20:59,540
that tour emulation we're able to do is

577
00:20:56,960 --> 00:21:01,730
we found another POC for this written in

578
00:20:59,540 --> 00:21:05,540
C sharp and we're able to launch that

579
00:21:01,730 --> 00:21:07,940
same cow payload but from Explorer so

580
00:21:05,540 --> 00:21:09,409
for the sake of demonstration we left

581
00:21:07,940 --> 00:21:11,060
the command-line arguments there as you

582
00:21:09,410 --> 00:21:12,920
can see them but basically what's

583
00:21:11,060 --> 00:21:16,040
happening is we're launching like calc

584
00:21:12,920 --> 00:21:18,680
from the parent pit of Explorer and Dan

585
00:21:16,040 --> 00:21:20,180
will take a look at this on the

586
00:21:18,680 --> 00:21:21,260
detection side but this is like a really

587
00:21:20,180 --> 00:21:23,060
cool moment when you're doing this like

588
00:21:21,260 --> 00:21:24,320
iterative emulation because like you

589
00:21:23,060 --> 00:21:25,600
finally found something that works and

590
00:21:24,320 --> 00:21:28,159
like you think it's really hard to

591
00:21:25,600 --> 00:21:30,889
detect that you like toss the ball back

592
00:21:28,160 --> 00:21:34,070
over to the blue side okay good luck

593
00:21:30,890 --> 00:21:36,410
with that and so we'll accept the

594
00:21:34,070 --> 00:21:38,480
challenge of trying to detect this

595
00:21:36,410 --> 00:21:40,100
what's really cool is C sharp and

596
00:21:38,480 --> 00:21:43,910
PowerShell both used the same underlying

597
00:21:40,100 --> 00:21:46,820
dotnet framework but C sharp doesn't

598
00:21:43,910 --> 00:21:48,320
have all the from a defender side C

599
00:21:46,820 --> 00:21:50,300
sharp doesn't have the same PowerShell

600
00:21:48,320 --> 00:21:54,169
logging that is kind of why we want to

601
00:21:50,300 --> 00:21:57,230
avoid that as well so basically what

602
00:21:54,170 --> 00:22:00,320
Jamie just explained is it's the same

603
00:21:57,230 --> 00:22:02,510
demo that we did before but our C sharp

604
00:22:00,320 --> 00:22:04,040
payload is popping calc

605
00:22:02,510 --> 00:22:06,500
but we're spoofing the parent page so

606
00:22:04,040 --> 00:22:08,780
it's actually spawning from Explorer and

607
00:22:06,500 --> 00:22:10,790
going back to the data sources the two

608
00:22:08,780 --> 00:22:12,450
that we used in the first two demos

609
00:22:10,790 --> 00:22:15,180
process monitoring and

610
00:22:12,450 --> 00:22:18,060
command-line parameters are not as

611
00:22:15,180 --> 00:22:19,410
useful in this case one you don't know

612
00:22:18,060 --> 00:22:21,090
what the process is going to be called

613
00:22:19,410 --> 00:22:24,120
what it's going to be called when it's

614
00:22:21,090 --> 00:22:26,310
created I guess you could search for if

615
00:22:24,120 --> 00:22:27,989
it's a if it's an unsigned process being

616
00:22:26,310 --> 00:22:30,389
started or an untrusted process being

617
00:22:27,990 --> 00:22:31,680
started but that from a malware

618
00:22:30,390 --> 00:22:33,480
standpoint might not always be the case

619
00:22:31,680 --> 00:22:36,840
and then as far as command-line

620
00:22:33,480 --> 00:22:38,100
parameters those are arbitrary we could

621
00:22:36,840 --> 00:22:39,870
have obviously obvious gated those we

622
00:22:38,100 --> 00:22:42,060
could have put them in base64 and then

623
00:22:39,870 --> 00:22:43,500
decoded them on the fly so from a

624
00:22:42,060 --> 00:22:49,679
command line parameter perspective

625
00:22:43,500 --> 00:22:51,890
there's not much there fortunately you

626
00:22:49,680 --> 00:22:54,510
can go by some other data sources to

627
00:22:51,890 --> 00:22:57,810
kind of have some insight into dotnet

628
00:22:54,510 --> 00:22:59,850
being executed so I actually first I

629
00:22:57,810 --> 00:23:01,860
think I saw these on Twitter first I'll

630
00:22:59,850 --> 00:23:07,469
have it there the source in there after

631
00:23:01,860 --> 00:23:10,560
but the two day or two system on event

632
00:23:07,470 --> 00:23:12,180
IDs 7 and 11 so image load so the data

633
00:23:10,560 --> 00:23:15,350
source is tied back to like loaded DLLs

634
00:23:12,180 --> 00:23:18,660
and dll monitoring there's actually two

635
00:23:15,350 --> 00:23:21,540
being loaded when you run a c-sharp or

636
00:23:18,660 --> 00:23:23,310
net assembly so it's the common language

637
00:23:21,540 --> 00:23:28,440
runtime DLL and run just-in-time

638
00:23:23,310 --> 00:23:30,179
compiler DLL so those two are loaded in

639
00:23:28,440 --> 00:23:32,900
when you run your dotnet assembly and

640
00:23:30,180 --> 00:23:36,150
then when you run your dotnet assembly a

641
00:23:32,900 --> 00:23:39,000
usage log file gets dropped into the

642
00:23:36,150 --> 00:23:41,370
User Profile app data a common language

643
00:23:39,000 --> 00:23:43,500
runtime usage log directory so just

644
00:23:41,370 --> 00:23:47,489
interesting things that happen when you

645
00:23:43,500 --> 00:23:49,680
run dotnet so if that's not enough to

646
00:23:47,490 --> 00:23:52,410
convince you that dotnet was running you

647
00:23:49,680 --> 00:23:54,600
can also jump into ET w which is event

648
00:23:52,410 --> 00:23:57,540
tracing for Windows which is essentially

649
00:23:54,600 --> 00:24:00,870
a kernel level function or facility that

650
00:23:57,540 --> 00:24:03,680
enables you to log kernel and/or

651
00:24:00,870 --> 00:24:05,850
application to find events to a log file

652
00:24:03,680 --> 00:24:09,570
so there's three different providers

653
00:24:05,850 --> 00:24:12,719
that will kind of dive into for this

654
00:24:09,570 --> 00:24:14,790
purpose of detecting that demo the first

655
00:24:12,720 --> 00:24:16,590
two obviously have to have to do with a

656
00:24:14,790 --> 00:24:18,330
detection of dotnet and the third one

657
00:24:16,590 --> 00:24:20,290
the kernel process is going to be more

658
00:24:18,330 --> 00:24:23,020
as a bonus just

659
00:24:20,290 --> 00:24:26,980
show that we can see the spoof

660
00:24:23,020 --> 00:24:28,510
Parenthood and then simply to capture or

661
00:24:26,980 --> 00:24:30,540
view these easy to W events there's a

662
00:24:28,510 --> 00:24:33,760
bunch of different ways there's built-in

663
00:24:30,540 --> 00:24:35,139
command line log man and tracer PT so

664
00:24:33,760 --> 00:24:37,629
you can run those built-in from the

665
00:24:35,140 --> 00:24:39,280
command line and there's also some open

666
00:24:37,630 --> 00:24:42,190
source things to fire I released a PI

667
00:24:39,280 --> 00:24:46,600
win trace which is essentially a Python

668
00:24:42,190 --> 00:24:48,880
wrapper around etw and so for this demo

669
00:24:46,600 --> 00:24:51,459
we actually are using another open

670
00:24:48,880 --> 00:24:53,860
source Python script called dotnet

671
00:24:51,460 --> 00:24:57,400
runtime e to W which is made by counter

672
00:24:53,860 --> 00:25:01,000
cept and it is a Python script that uses

673
00:24:57,400 --> 00:25:02,770
the dotnet runtime etw provider but it

674
00:25:01,000 --> 00:25:08,070
also leverages the PI win trace wrapper

675
00:25:02,770 --> 00:25:10,660
that fire I made and so when we ran that

676
00:25:08,070 --> 00:25:13,740
to capture there's a common language

677
00:25:10,660 --> 00:25:16,300
runtime events and all dotnet events

678
00:25:13,740 --> 00:25:17,980
this is kind of a blow out of what it

679
00:25:16,300 --> 00:25:21,070
looks like so you do get a lot of data

680
00:25:17,980 --> 00:25:23,800
but it is indicative of dotnet running

681
00:25:21,070 --> 00:25:26,139
so you can see the JIT events on the top

682
00:25:23,800 --> 00:25:28,750
you can you can actually see like the

683
00:25:26,140 --> 00:25:31,390
XIV con demo like the name space and the

684
00:25:28,750 --> 00:25:32,740
class and also the function so main

685
00:25:31,390 --> 00:25:35,050
function and they create process

686
00:25:32,740 --> 00:25:37,540
function that were actually started you

687
00:25:35,050 --> 00:25:40,300
can also see the module loads and stuff

688
00:25:37,540 --> 00:25:44,889
related to the done net framework as

689
00:25:40,300 --> 00:25:46,180
well as at the bottom you can Interop

690
00:25:44,890 --> 00:25:49,120
services as well so all pretty

691
00:25:46,180 --> 00:25:51,700
indicative of dotnet being run and then

692
00:25:49,120 --> 00:25:54,610
as a bonus I also said that I talked

693
00:25:51,700 --> 00:25:56,920
about how to spoof that parent pin how

694
00:25:54,610 --> 00:25:59,500
to detect it so that third etw provider

695
00:25:56,920 --> 00:26:00,970
which was the kernel process there's

696
00:25:59,500 --> 00:26:05,140
another script it's essentially just a

697
00:26:00,970 --> 00:26:07,180
wrapper it'll run this ECW provider for

698
00:26:05,140 --> 00:26:10,420
you and then parse it out and show you

699
00:26:07,180 --> 00:26:12,310
the process spawned the parent at spawn

700
00:26:10,420 --> 00:26:15,880
from them and also the spoof parent so

701
00:26:12,310 --> 00:26:19,590
if you use this etw provider at the

702
00:26:15,880 --> 00:26:22,570
kernel process etw you can see

703
00:26:19,590 --> 00:26:24,520
effectively what happens and it's in

704
00:26:22,570 --> 00:26:26,620
there for a reason it's for UAC so if

705
00:26:24,520 --> 00:26:28,210
you launch something from elevated

706
00:26:26,620 --> 00:26:34,409
prompt and you click yes through the

707
00:26:28,210 --> 00:26:34,410
consent that he actually this exists

708
00:26:34,820 --> 00:26:40,230
the parent-child relationships match up

709
00:26:37,409 --> 00:26:42,150
even though the elevated process is

710
00:26:40,230 --> 00:26:44,130
spawned from an SVC host so this is

711
00:26:42,150 --> 00:26:45,480
actually so there are false positives in

712
00:26:44,130 --> 00:26:49,289
here but it's still cool that you can

713
00:26:45,480 --> 00:26:51,600
see the spoofed parent and with that you

714
00:26:49,289 --> 00:26:53,580
can do yourself a pedal look back that

715
00:26:51,600 --> 00:26:55,709
was really cool but in reality like

716
00:26:53,580 --> 00:26:57,240
scale that into an environment like take

717
00:26:55,710 --> 00:26:59,100
that and deploy it to 50,000 hosts

718
00:26:57,240 --> 00:27:02,010
probably a nightmare

719
00:26:59,100 --> 00:27:03,809
so the next step in this is like looking

720
00:27:02,010 --> 00:27:06,390
at that detection and actually detecting

721
00:27:03,809 --> 00:27:08,309
better behaviors better so a big point

722
00:27:06,390 --> 00:27:09,840
here is the realization that you know

723
00:27:08,309 --> 00:27:12,658
maybe not every behavior is something

724
00:27:09,840 --> 00:27:13,860
that you should detect in real time for

725
00:27:12,659 --> 00:27:16,289
various reasons such as like you know

726
00:27:13,860 --> 00:27:18,389
things like cost or noise like like Dan

727
00:27:16,289 --> 00:27:20,220
was saying false positives for that type

728
00:27:18,390 --> 00:27:21,600
of detection would be like horrific you

729
00:27:20,220 --> 00:27:23,460
probably lose a lot of sock analysts

730
00:27:21,600 --> 00:27:25,350
just quitting the dashboard would light

731
00:27:23,460 --> 00:27:27,270
up immediately with all these like very

732
00:27:25,350 --> 00:27:28,678
benign things happening in the system

733
00:27:27,270 --> 00:27:30,658
because everything we're dealing with

734
00:27:28,679 --> 00:27:35,039
here is built into the system and

735
00:27:30,659 --> 00:27:36,210
natural they're also so you know you're

736
00:27:35,039 --> 00:27:38,370
if you're not detecting things in real

737
00:27:36,210 --> 00:27:40,650
time this may be an opportunity for you

738
00:27:38,370 --> 00:27:42,899
to leverage other business processes so

739
00:27:40,650 --> 00:27:44,220
things like hunt or IR so if you're not

740
00:27:42,900 --> 00:27:45,750
gonna detect in real time maybe that's

741
00:27:44,220 --> 00:27:47,730
something your hunt team or your IR team

742
00:27:45,750 --> 00:27:50,330
will take responsibility for and say you

743
00:27:47,730 --> 00:27:52,620
know I'll they'll pick up where like the

744
00:27:50,330 --> 00:27:54,030
detections are missing another

745
00:27:52,620 --> 00:27:56,549
opportunity here would be something like

746
00:27:54,030 --> 00:27:58,559
protections so an example of that would

747
00:27:56,549 --> 00:28:01,168
be if you looked at the most recent

748
00:27:58,559 --> 00:28:03,330
release of dotnet they implemented a MSI

749
00:28:01,169 --> 00:28:06,120
within the dotnet runtime so basically

750
00:28:03,330 --> 00:28:07,770
if that means is Windows Defender and AV

751
00:28:06,120 --> 00:28:10,559
products that are looking for signature

752
00:28:07,770 --> 00:28:12,450
based malware and other heuristic

753
00:28:10,559 --> 00:28:14,370
behaviors are actually communicating

754
00:28:12,450 --> 00:28:16,230
with the dotnet runtime and can give it

755
00:28:14,370 --> 00:28:18,840
like tips and hints on you know what's

756
00:28:16,230 --> 00:28:20,970
bad what's good and kind of like maybe

757
00:28:18,840 --> 00:28:24,299
prevent things that are super malicious

758
00:28:20,970 --> 00:28:26,190
or super obvious so getting back to what

759
00:28:24,299 --> 00:28:28,860
we talked about before that the stages

760
00:28:26,190 --> 00:28:30,690
of behavior and mapping this like better

761
00:28:28,860 --> 00:28:32,370
detection to this it actually will kind

762
00:28:30,690 --> 00:28:34,980
of help us scope like what's a realistic

763
00:28:32,370 --> 00:28:36,840
way to handle this so mapping everything

764
00:28:34,980 --> 00:28:40,559
Dan just covered in the last last

765
00:28:36,840 --> 00:28:41,699
session section to these stages so the

766
00:28:40,559 --> 00:28:44,158
prerequisites the first thing you would

767
00:28:41,700 --> 00:28:45,990
see like dan said those dll's associate

768
00:28:44,159 --> 00:28:47,140
without net being loaded those would be

769
00:28:45,990 --> 00:28:48,730
pre Rex

770
00:28:47,140 --> 00:28:50,230
in the mechanics you would see things

771
00:28:48,730 --> 00:28:53,380
like the process of being created as

772
00:28:50,230 --> 00:28:56,410
well as the events from the etw and then

773
00:28:53,380 --> 00:28:57,790
the artifacts being you know those log

774
00:28:56,410 --> 00:28:59,860
files written by the just-in-time

775
00:28:57,790 --> 00:29:02,800
compiler as well as that log file and

776
00:28:59,860 --> 00:29:05,199
the user profile so individually all of

777
00:29:02,800 --> 00:29:07,090
these might be not great candidates or

778
00:29:05,200 --> 00:29:08,860
something to Alert on but if you map it

779
00:29:07,090 --> 00:29:10,899
out like this you can kind of see a

780
00:29:08,860 --> 00:29:13,030
potential like an and I'm calling it a

781
00:29:10,900 --> 00:29:14,500
notional defensive approach but a way

782
00:29:13,030 --> 00:29:16,930
you can actually build this into your

783
00:29:14,500 --> 00:29:18,580
defenses so maybe a first step is you

784
00:29:16,930 --> 00:29:20,500
know rather than firing on every time

785
00:29:18,580 --> 00:29:22,750
one of these individual things happen

786
00:29:20,500 --> 00:29:25,540
maybe you set an alert for any time a

787
00:29:22,750 --> 00:29:26,920
process that is specifically unsigned is

788
00:29:25,540 --> 00:29:29,080
loading dotnet dll's

789
00:29:26,920 --> 00:29:32,050
so maybe that might be outside of the

790
00:29:29,080 --> 00:29:33,220
scope of what real organic dotnet

791
00:29:32,050 --> 00:29:34,870
execution looks like because obviously

792
00:29:33,220 --> 00:29:37,870
everything the system is probably a

793
00:29:34,870 --> 00:29:39,189
Microsoft signed a second step to that

794
00:29:37,870 --> 00:29:41,050
would be every time you fire an alert

795
00:29:39,190 --> 00:29:43,630
seeing an unsigned process loading the

796
00:29:41,050 --> 00:29:45,280
dotnet dll's you have an analyst follow

797
00:29:43,630 --> 00:29:46,900
up and take a look at those like very

798
00:29:45,280 --> 00:29:49,030
grainy log files which would be a

799
00:29:46,900 --> 00:29:51,040
nightmare to parse and scale but maybe

800
00:29:49,030 --> 00:29:52,600
an analyst has time to go look at those

801
00:29:51,040 --> 00:29:54,580
and actually do like an in-depth

802
00:29:52,600 --> 00:29:57,399
analysis and for your hunters in the

803
00:29:54,580 --> 00:29:59,350
room proactively look for the stuff so

804
00:29:57,400 --> 00:30:01,570
inform your hunt team on all of this

805
00:29:59,350 --> 00:30:03,520
behavior understand all these mechanics

806
00:30:01,570 --> 00:30:04,720
and as they go around in the course of

807
00:30:03,520 --> 00:30:06,280
their normal behavior and look for

808
00:30:04,720 --> 00:30:08,020
things they can think of look for these

809
00:30:06,280 --> 00:30:09,730
type of artifacts and do that kind of

810
00:30:08,020 --> 00:30:13,660
analysis before in these behaviors

811
00:30:09,730 --> 00:30:15,630
actually happen so kind of in conclusion

812
00:30:13,660 --> 00:30:18,490
wrapping up what we talked about today

813
00:30:15,630 --> 00:30:20,710
getting back to that attack matrix

814
00:30:18,490 --> 00:30:22,720
basically what we did was it's kind of

815
00:30:20,710 --> 00:30:25,120
nuanced and small but that one technique

816
00:30:22,720 --> 00:30:26,410
that we're focused on we based on what

817
00:30:25,120 --> 00:30:28,570
we did we're pretty sure we can take it

818
00:30:26,410 --> 00:30:30,910
from what we call low confidence to like

819
00:30:28,570 --> 00:30:32,770
medium so we're not 100% sure we can't

820
00:30:30,910 --> 00:30:34,300
act that but based on this iterative

821
00:30:32,770 --> 00:30:36,730
process we feel like pretty comfortable

822
00:30:34,300 --> 00:30:38,500
that like we understand the behavior and

823
00:30:36,730 --> 00:30:40,780
how to detect it or defend against it

824
00:30:38,500 --> 00:30:42,730
whether it's hunt IR protections in our

825
00:30:40,780 --> 00:30:44,139
environment so the next step would be

826
00:30:42,730 --> 00:30:47,140
rinse and repeat

827
00:30:44,140 --> 00:30:49,120
so scale this same like process and

828
00:30:47,140 --> 00:30:51,310
activity out to all of the techniques

829
00:30:49,120 --> 00:30:52,929
that you care about another way of doing

830
00:30:51,310 --> 00:30:55,360
this is getting back to coding Chris

831
00:30:52,930 --> 00:30:56,950
from last year chain them together into

832
00:30:55,360 --> 00:30:58,719
a full campaign so rather than doing

833
00:30:56,950 --> 00:30:59,879
each individual one you can actually

834
00:30:58,720 --> 00:31:02,399
write like an email

835
00:30:59,879 --> 00:31:04,649
plan that ties these together into like

836
00:31:02,399 --> 00:31:06,208
a cohesive like flow that goes over a

837
00:31:04,649 --> 00:31:08,698
you know a couple days or a week and

838
00:31:06,209 --> 00:31:10,919
then run all of this detection against

839
00:31:08,699 --> 00:31:14,129
the entire campaign based on those

840
00:31:10,919 --> 00:31:15,839
specific techniques so this is our last

841
00:31:14,129 --> 00:31:18,119
slide we'll leave this up there's some

842
00:31:15,839 --> 00:31:20,579
good resources here the top one is a

843
00:31:18,119 --> 00:31:22,678
link to attack so everything else you

844
00:31:20,579 --> 00:31:24,239
could link from there but specific

845
00:31:22,679 --> 00:31:26,849
things we want to call out is our medium

846
00:31:24,239 --> 00:31:28,829
blog so we have blog posts there for

847
00:31:26,849 --> 00:31:30,509
attack and attack evaluations as well as

848
00:31:28,829 --> 00:31:33,178
like various use cases such as like blue

849
00:31:30,509 --> 00:31:35,339
teaming hunting sock work automation etc

850
00:31:33,179 --> 00:31:37,529
and the bottom two are our contact

851
00:31:35,339 --> 00:31:39,119
information so our emo and our Twitter

852
00:31:37,529 --> 00:31:41,089
if you want to reach out about

853
00:31:39,119 --> 00:31:43,109
contributions or you got questions or

854
00:31:41,089 --> 00:31:44,519
definitely tweet us with memes we love

855
00:31:43,109 --> 00:31:46,439
memes if you didn't notice by our slide

856
00:31:44,519 --> 00:31:47,639
deck or like eat sleep meme just

857
00:31:46,440 --> 00:31:50,399
constantly trying to make each other

858
00:31:47,639 --> 00:31:52,529
laugh so I think we have a couple

859
00:31:50,399 --> 00:31:53,248
minutes for questions otherwise thank

860
00:31:52,529 --> 00:31:55,230
you for your time and your attention

861
00:31:53,249 --> 00:32:02,210
thank you

862
00:31:55,230 --> 00:32:02,210
[Applause]

863
00:32:03,460 --> 00:32:05,520
you

