1
00:00:07,400 --> 00:00:13,320
all right thanks everyone so I'm gonna

2
00:00:10,830 --> 00:00:16,230
be talking to about breaking a Bitcoin

3
00:00:13,320 --> 00:00:19,800
wallet with EMF I my name is Colin

4
00:00:16,230 --> 00:00:21,689
Oakland I had sort of two roles I deal

5
00:00:19,800 --> 00:00:24,750
with so I have a startup doing a

6
00:00:21,689 --> 00:00:25,859
technology and I'm also a assistant

7
00:00:24,750 --> 00:00:28,948
professor at the local university

8
00:00:25,859 --> 00:00:31,140
Dalhousie University so I admit this

9
00:00:28,949 --> 00:00:33,960
version of the slide isn't the one I was

10
00:00:31,140 --> 00:00:37,140
trying to give the version I was trying

11
00:00:33,960 --> 00:00:39,390
to give I discovered has some logistical

12
00:00:37,140 --> 00:00:41,460
issues because what I've always wanted

13
00:00:39,390 --> 00:00:43,260
to use is to prove that you know it

14
00:00:41,460 --> 00:00:46,649
doesn't matter how fancy or visuals are

15
00:00:43,260 --> 00:00:49,589
just some basic slides because all you

16
00:00:46,649 --> 00:00:54,840
really need so this is the version that

17
00:00:49,590 --> 00:00:56,670
I hoped you could see there you go so

18
00:00:54,840 --> 00:00:59,070
you can also do this presentation the

19
00:00:56,670 --> 00:01:00,989
issue is as soon as you want photos what

20
00:00:59,070 --> 00:01:02,370
happens is this if you try to put

21
00:01:00,989 --> 00:01:05,369
anything beside some of the Nights

22
00:01:02,370 --> 00:01:07,350
clipart no resources insufficient

23
00:01:05,369 --> 00:01:08,939
resources so because it's nice to show

24
00:01:07,350 --> 00:01:13,439
you things I decided to give you photos

25
00:01:08,939 --> 00:01:18,539
in a recent version of PowerPoint all

26
00:01:13,439 --> 00:01:20,460
right so the tube rolls I have with a

27
00:01:18,540 --> 00:01:22,830
university they basically have a new

28
00:01:20,460 --> 00:01:25,710
thing called the idea and this is

29
00:01:22,830 --> 00:01:26,939
designed to help startups as part of

30
00:01:25,710 --> 00:01:28,919
that I mean in the electrical and

31
00:01:26,939 --> 00:01:30,570
computer engineering department I'm

32
00:01:28,920 --> 00:01:32,009
working on cybersecurity research so

33
00:01:30,570 --> 00:01:34,289
some of the stuff I'm talking about and

34
00:01:32,009 --> 00:01:36,000
also helping local embedded startup to

35
00:01:34,290 --> 00:01:39,030
deal with cyber security threats really

36
00:01:36,000 --> 00:01:41,250
specific to embedded systems meister new

37
00:01:39,030 --> 00:01:43,770
technology has an open source project

38
00:01:41,250 --> 00:01:46,380
called chip Westberg which I'm extremely

39
00:01:43,770 --> 00:01:48,720
skeptical of this claim but hacker one

40
00:01:46,380 --> 00:01:51,089
showed it as the fourth most used tool

41
00:01:48,720 --> 00:01:52,679
and Penta so I don't I barely believe

42
00:01:51,090 --> 00:01:54,869
that but anyway it's something someone

43
00:01:52,680 --> 00:01:57,299
else claimed so I can put that there so

44
00:01:54,869 --> 00:01:59,369
we sell physical hardware as well as

45
00:01:57,299 --> 00:02:03,149
training and stuff like that related to

46
00:01:59,369 --> 00:02:04,770
hardware security as sort of a side note

47
00:02:03,149 --> 00:02:06,780
you know this talking includes Bitcoin

48
00:02:04,770 --> 00:02:08,190
blockchain whenever include like Bitcoin

49
00:02:06,780 --> 00:02:09,959
or blockchain you always get people

50
00:02:08,190 --> 00:02:11,099
asking you questions and all of a sudden

51
00:02:09,959 --> 00:02:12,360
they want to have you advised in their

52
00:02:11,099 --> 00:02:13,230
blockchain so I have to make it clear

53
00:02:12,360 --> 00:02:16,890
then

54
00:02:13,230 --> 00:02:19,768
I don't care about blockchain in 2010 I

55
00:02:16,890 --> 00:02:21,029
downloaded the wallet when the website

56
00:02:19,769 --> 00:02:23,549
looked like this and you got a few

57
00:02:21,030 --> 00:02:26,670
Bitcoin just for signing up and I said

58
00:02:23,549 --> 00:02:30,650
to myself this is dumb and I deleted it

59
00:02:26,670 --> 00:02:30,649
and I never looked back I regret nothing

60
00:02:30,680 --> 00:02:34,890
they've intersected again so blockchain

61
00:02:33,299 --> 00:02:37,019
and Bitcoin have intersected with

62
00:02:34,890 --> 00:02:39,720
embedded systems I care about amendment

63
00:02:37,019 --> 00:02:43,560
systems and this is why bitcoin is in

64
00:02:39,720 --> 00:02:45,209
the talk itself there's no way to go

65
00:02:43,560 --> 00:02:47,790
through though without a really brief

66
00:02:45,209 --> 00:02:50,489
background to what it's blockchain so

67
00:02:47,790 --> 00:02:53,280
it's useful to have kind of an idea of

68
00:02:50,489 --> 00:02:56,910
what we're talking about so blockchain

69
00:02:53,280 --> 00:02:58,739
really briefly you have two things so

70
00:02:56,910 --> 00:03:01,650
you have a block this is like your

71
00:02:58,739 --> 00:03:04,019
standard concrete masonry unit block and

72
00:03:01,650 --> 00:03:06,540
you have a chain this is like a straight

73
00:03:04,019 --> 00:03:08,430
link oil chain so if you wanted to do

74
00:03:06,540 --> 00:03:10,798
something like secure a voting booth

75
00:03:08,430 --> 00:03:13,049
right it's very easy to steal this modem

76
00:03:10,799 --> 00:03:14,730
booth so you could use blockchain to

77
00:03:13,049 --> 00:03:17,160
secure the voting booth to the ground

78
00:03:14,730 --> 00:03:19,380
with a very heavy concrete block now the

79
00:03:17,160 --> 00:03:22,500
problem is you know if you want to move

80
00:03:19,380 --> 00:03:24,900
this around it's a bit large there's

81
00:03:22,500 --> 00:03:26,910
another interesting history the actual

82
00:03:24,900 --> 00:03:29,489
first implementation of it is by H

83
00:03:26,910 --> 00:03:31,590
Simpson in May 2008 so this predates the

84
00:03:29,489 --> 00:03:33,630
more well-known computer based

85
00:03:31,590 --> 00:03:35,130
implementation and these timelines are

86
00:03:33,630 --> 00:03:37,880
legitimate you can check that out so

87
00:03:35,130 --> 00:03:40,139
this is the real beginning of blockchain

88
00:03:37,880 --> 00:03:41,910
alright so how do we do embedded

89
00:03:40,139 --> 00:03:44,099
blockchain this is where we started

90
00:03:41,910 --> 00:03:45,418
looking at embedded hardware wallets so

91
00:03:44,099 --> 00:03:48,149
you know it's hard to transport these

92
00:03:45,419 --> 00:03:50,430
block chains around stuff like that so

93
00:03:48,150 --> 00:03:52,169
then we have the embedded blockchain so

94
00:03:50,430 --> 00:03:54,540
these are very small portable block

95
00:03:52,169 --> 00:03:58,590
chains that can be used for securing

96
00:03:54,540 --> 00:04:00,510
your embedded systems and embedded

97
00:03:58,590 --> 00:04:03,780
blockchain has given rise to all sorts

98
00:04:00,510 --> 00:04:05,578
of really cool secure wallets

99
00:04:03,780 --> 00:04:07,620
the most well-known you might have heard

100
00:04:05,579 --> 00:04:09,060
of John McAfee he had his bit by wallet

101
00:04:07,620 --> 00:04:11,370
and they were sort of this series of

102
00:04:09,060 --> 00:04:13,230
tweets where John McAfee said bit fines

103
00:04:11,370 --> 00:04:15,750
unbreakable there's no way anyone can

104
00:04:13,230 --> 00:04:17,370
hack it you know then someone hacked it

105
00:04:15,750 --> 00:04:19,949
and they said by the way I guess maybe

106
00:04:17,370 --> 00:04:22,860
it's not unbreakable there's some pretty

107
00:04:19,949 --> 00:04:25,620
cool other wallets out there so a sick

108
00:04:22,860 --> 00:04:29,280
vault this is a real legitimate so you

109
00:04:25,620 --> 00:04:30,930
look at this stuff a sick vault labels

110
00:04:29,280 --> 00:04:33,570
itself the first physically secure

111
00:04:30,930 --> 00:04:36,510
cryptocurrency vault sounds good

112
00:04:33,570 --> 00:04:37,949
how does it work well what they've done

113
00:04:36,510 --> 00:04:40,199
is they've taken the key derivation

114
00:04:37,949 --> 00:04:41,850
function which would be used to convert

115
00:04:40,199 --> 00:04:44,639
your pin code into the encryption key

116
00:04:41,850 --> 00:04:46,830
and normally things like these little

117
00:04:44,639 --> 00:04:48,210
other software wallets I'm talking about

118
00:04:46,830 --> 00:04:50,909
would run that key derivation function

119
00:04:48,210 --> 00:04:53,070
like 2,000 times so what they've done is

120
00:04:50,910 --> 00:04:55,550
they actually made an ASIC that Hardware

121
00:04:53,070 --> 00:04:57,449
accelerates the key derivation function

122
00:04:55,550 --> 00:04:59,580
so this is kind of interesting because

123
00:04:57,449 --> 00:05:01,169
if you wanted to break their wallet what

124
00:04:59,580 --> 00:05:02,909
you'd really want to break their wallet

125
00:05:01,169 --> 00:05:04,979
is an ASIC that accelerates the key

126
00:05:02,910 --> 00:05:06,479
derivation function what they give you

127
00:05:04,979 --> 00:05:07,979
as an ASIC that accelerates the key

128
00:05:06,479 --> 00:05:09,270
derivation function so you can use a

129
00:05:07,979 --> 00:05:12,090
second version of their wallet to

130
00:05:09,270 --> 00:05:14,000
probably attack the first version they

131
00:05:12,090 --> 00:05:17,219
also have some pretty cool stuff like

132
00:05:14,000 --> 00:05:19,440
depending how much you pay for the base

133
00:05:17,220 --> 00:05:22,050
wallet and also how much you pay per

134
00:05:19,440 --> 00:05:24,030
month changes how many times they run

135
00:05:22,050 --> 00:05:25,620
that key derivation function so if

136
00:05:24,030 --> 00:05:27,659
you're a sucker and only pay 10 euros

137
00:05:25,620 --> 00:05:29,729
per month you only get a million key

138
00:05:27,660 --> 00:05:31,410
derivation rounds but if you pay more

139
00:05:29,729 --> 00:05:35,039
they give you 3 million key derivation

140
00:05:31,410 --> 00:05:37,950
round so a lot of this stuff is like you

141
00:05:35,039 --> 00:05:39,180
know very you wonder where investors got

142
00:05:37,950 --> 00:05:42,960
involved in this because it's always

143
00:05:39,180 --> 00:05:45,120
these crazy business models which also

144
00:05:42,960 --> 00:05:46,560
sort of brings up you know like how big

145
00:05:45,120 --> 00:05:49,410
is this market for real there's there's

146
00:05:46,560 --> 00:05:52,349
more Bitcoin wallets around so another

147
00:05:49,410 --> 00:05:55,650
company ledger has claimed to sold a

148
00:05:52,349 --> 00:05:58,530
million wallets and they're at least

149
00:05:55,650 --> 00:05:59,969
$100 each so and that's just one of the

150
00:05:58,530 --> 00:06:02,039
companies these are this is actually a

151
00:05:59,970 --> 00:06:04,320
pretty big market for these little

152
00:06:02,039 --> 00:06:06,270
Bitcoin wallets which to me was pretty

153
00:06:04,320 --> 00:06:10,229
surprising because I as I said wasn't

154
00:06:06,270 --> 00:06:13,469
really involved in this stuff all right

155
00:06:10,229 --> 00:06:15,510
so now talking about more real things

156
00:06:13,470 --> 00:06:17,639
what I'm actually gonna be looking at is

157
00:06:15,510 --> 00:06:21,380
the treszura Bitcoin wallet so this is

158
00:06:17,639 --> 00:06:24,090
another Bitcoin wallet that has an

159
00:06:21,380 --> 00:06:26,610
ability to store bitcoins on some

160
00:06:24,090 --> 00:06:28,260
physical device so the idea is someone

161
00:06:26,610 --> 00:06:30,330
can't hack your computer to recover your

162
00:06:28,260 --> 00:06:33,389
bitcoins they have to hack this physical

163
00:06:30,330 --> 00:06:36,510
wallet and they list all sorts of really

164
00:06:33,389 --> 00:06:38,400
nice security features so you know they

165
00:06:36,510 --> 00:06:41,400
say ok there's all these different paths

166
00:06:38,400 --> 00:06:43,409
fermer verification even stuff like an

167
00:06:41,400 --> 00:06:45,239
ultrasound hardware seal and some of

168
00:06:43,410 --> 00:06:46,740
these features sound really good but

169
00:06:45,240 --> 00:06:47,550
it's kind of interesting to see what

170
00:06:46,740 --> 00:06:49,560
they look like

171
00:06:47,550 --> 00:06:52,110
in real life when you start looking at

172
00:06:49,560 --> 00:07:00,060
these things so let's take a look at

173
00:06:52,110 --> 00:07:02,610
that I'm sorry cliff or - I did have a

174
00:07:00,060 --> 00:07:05,009
document camera this morning but I felt

175
00:07:02,610 --> 00:07:08,660
like the video camera version was a lot

176
00:07:05,009 --> 00:07:12,990
more fun so if you look at one of their

177
00:07:08,660 --> 00:07:15,449
Bitcoin wallets this is a there we go

178
00:07:12,990 --> 00:07:17,370
at Razer Bitcoin wallet and so they have

179
00:07:15,449 --> 00:07:19,800
this ultrasonic seal is basically how

180
00:07:17,370 --> 00:07:21,960
the plastic is joined so you can see

181
00:07:19,800 --> 00:07:23,220
it's two pieces that's molded and one of

182
00:07:21,960 --> 00:07:25,159
the initial claims is that you know it

183
00:07:23,220 --> 00:07:28,710
would be very hard to break that case

184
00:07:25,160 --> 00:07:34,530
and reseal it because of that they can

185
00:07:28,710 --> 00:07:35,820
focus so if you want you can see it

186
00:07:34,530 --> 00:07:37,770
later it's a bit hard with the lighting

187
00:07:35,820 --> 00:07:40,080
okay there we go

188
00:07:37,770 --> 00:07:42,780
so you can see that seal there now this

189
00:07:40,080 --> 00:07:45,389
particular one actually previously has

190
00:07:42,780 --> 00:07:48,239
been broken and you can see that in fact

191
00:07:45,389 --> 00:07:50,310
it it can break and join back up pretty

192
00:07:48,240 --> 00:07:53,220
easily so you know some of this stuff is

193
00:07:50,310 --> 00:07:56,130
maybe a little oversold with how easily

194
00:07:53,220 --> 00:07:58,620
it would be to to break these in real

195
00:07:56,130 --> 00:08:00,690
life but of course that's not what we're

196
00:07:58,620 --> 00:08:02,520
solely interested in we want to see how

197
00:08:00,690 --> 00:08:05,599
how well could we actually recover

198
00:08:02,520 --> 00:08:05,599
bitcoins from this thing

199
00:08:11,710 --> 00:08:14,948
so and that's kind of like you'd be

200
00:08:13,509 --> 00:08:17,530
initial you know analysis is what's

201
00:08:14,949 --> 00:08:18,880
inside this thing this device is

202
00:08:17,530 --> 00:08:20,919
actually really nice because it's open

203
00:08:18,880 --> 00:08:22,330
source so you can take the device you

204
00:08:20,919 --> 00:08:25,690
can modify the source code you can

205
00:08:22,330 --> 00:08:27,219
reprogram it do whatever you want and it

206
00:08:25,690 --> 00:08:29,139
also means lessons learned on the

207
00:08:27,220 --> 00:08:31,419
treasure can be applied outside of just

208
00:08:29,139 --> 00:08:32,890
Bitcoin wallets so some of the source

209
00:08:31,419 --> 00:08:35,529
code or much of the source code they're

210
00:08:32,890 --> 00:08:37,029
using is reused in other areas and so

211
00:08:35,529 --> 00:08:38,799
it's actually a pretty nice target

212
00:08:37,029 --> 00:08:40,570
because it's a really good device to

213
00:08:38,799 --> 00:08:43,059
learn lessons on and set up to talk

214
00:08:40,570 --> 00:08:44,410
about embedded security in general what

215
00:08:43,059 --> 00:08:46,300
I'm talking about in particular was

216
00:08:44,410 --> 00:08:48,579
fixed with a firmware patch like a month

217
00:08:46,300 --> 00:08:50,529
or two ago so the exact issue I'm

218
00:08:48,580 --> 00:08:54,459
disclosing has also been fixed on this

219
00:08:50,529 --> 00:08:57,100
hardware itself so what I'm looking at

220
00:08:54,459 --> 00:08:59,410
is something called the recovery seat so

221
00:08:57,100 --> 00:09:01,180
from the treasurer documentation up here

222
00:08:59,410 --> 00:09:03,279
what it tells you is that the recovery

223
00:09:01,180 --> 00:09:06,910
seed is this critical element for

224
00:09:03,279 --> 00:09:08,950
security of the wallet if you basically

225
00:09:06,910 --> 00:09:13,899
this seed let someone else clone the

226
00:09:08,950 --> 00:09:15,640
wallet so if you figure out what this

227
00:09:13,899 --> 00:09:17,290
recovery seat is someone else can see

228
00:09:15,640 --> 00:09:19,660
what's in your wallet and steal friends

229
00:09:17,290 --> 00:09:21,400
funds from it this is pretty cool

230
00:09:19,660 --> 00:09:22,630
because it means if someone gets access

231
00:09:21,400 --> 00:09:25,449
to it you don't even know they'd have

232
00:09:22,630 --> 00:09:26,500
access to it so they could steal this

233
00:09:25,450 --> 00:09:28,480
recovery seed

234
00:09:26,500 --> 00:09:29,860
well you're still actively using your

235
00:09:28,480 --> 00:09:31,930
wallet and wait for you to have money in

236
00:09:29,860 --> 00:09:34,089
it so it's a pretty sensitive piece of

237
00:09:31,930 --> 00:09:35,529
information and they basically have this

238
00:09:34,089 --> 00:09:36,910
seed with the idea being that when you

239
00:09:35,529 --> 00:09:39,520
set up the wall that you write it down

240
00:09:36,910 --> 00:09:42,790
and then if your wallet is destroyed you

241
00:09:39,520 --> 00:09:44,529
have a way to recover the funds you can

242
00:09:42,790 --> 00:09:46,089
also password protect that so this isn't

243
00:09:44,529 --> 00:09:48,520
done by default but there's an option to

244
00:09:46,089 --> 00:09:50,170
include a password and this C and if

245
00:09:48,520 --> 00:09:52,260
there's a password it basically makes

246
00:09:50,170 --> 00:09:54,160
the attack I'm talking about not work

247
00:09:52,260 --> 00:09:55,930
because all of a sudden you have some

248
00:09:54,160 --> 00:09:57,670
information that's not stored on the

249
00:09:55,930 --> 00:10:01,180
device that's required required to

250
00:09:57,670 --> 00:10:02,650
recover it so inside I just showed you

251
00:10:01,180 --> 00:10:04,420
what these guys look like but there's a

252
00:10:02,650 --> 00:10:06,850
bit of a better photo there's basically

253
00:10:04,420 --> 00:10:08,589
one microcontroller and one of the

254
00:10:06,850 --> 00:10:10,000
issues is that the this main

255
00:10:08,589 --> 00:10:11,860
microcontroller is not what we call a

256
00:10:10,000 --> 00:10:14,500
secure device it's kind of a standard

257
00:10:11,860 --> 00:10:16,000
off-the-shelf microcontroller you can

258
00:10:14,500 --> 00:10:20,110
buy it I can buy it anyone get

259
00:10:16,000 --> 00:10:22,120
information on it if you're storing you

260
00:10:20,110 --> 00:10:23,860
know millions of dollars on this

261
00:10:22,120 --> 00:10:25,180
microcontroller there's a lot of

262
00:10:23,860 --> 00:10:29,560
different ways to get

263
00:10:25,180 --> 00:10:31,810
out of that device so if it cost $50,000

264
00:10:29,560 --> 00:10:34,119
to get the information out that's pretty

265
00:10:31,810 --> 00:10:36,459
reasonable to do so if you know there's

266
00:10:34,120 --> 00:10:38,440
millions of dollars stored on that exact

267
00:10:36,460 --> 00:10:41,680
microcontroller that's one of the

268
00:10:38,440 --> 00:10:43,360
fundamental problems and this was kind

269
00:10:41,680 --> 00:10:46,390
of a lesson that was learned so there's

270
00:10:43,360 --> 00:10:48,520
a really good book on the pay-tv packing

271
00:10:46,390 --> 00:10:50,110
industry basically there's really

272
00:10:48,520 --> 00:10:52,300
interesting so I always highly recommend

273
00:10:50,110 --> 00:10:55,090
it maybe these lessons were learned in

274
00:10:52,300 --> 00:10:57,640
satellite TV hacking times your credit

275
00:10:55,090 --> 00:11:01,090
card has a secure microcontroller in it

276
00:10:57,640 --> 00:11:02,740
so the types of attacks that can be used

277
00:11:01,090 --> 00:11:04,540
pretty easily in the treasurer would not

278
00:11:02,740 --> 00:11:06,430
work on something like a credit card

279
00:11:04,540 --> 00:11:10,120
because there's an incentive to hack the

280
00:11:06,430 --> 00:11:12,250
device and it becomes very easy to

281
00:11:10,120 --> 00:11:18,070
quantify how secure should we make this

282
00:11:12,250 --> 00:11:20,590
device with the Bitcoin wallet is the

283
00:11:18,070 --> 00:11:23,050
incentive there it's kind of less clear

284
00:11:20,590 --> 00:11:25,240
on what the incentive with the Bitcoin

285
00:11:23,050 --> 00:11:28,240
wallet is and that's really the problem

286
00:11:25,240 --> 00:11:30,190
with with this type of thing is that you

287
00:11:28,240 --> 00:11:31,900
know at the end of the day these are

288
00:11:30,190 --> 00:11:34,960
consumer devices that are being trying

289
00:11:31,900 --> 00:11:37,270
to sell for as small a cost as possible

290
00:11:34,960 --> 00:11:39,880
well also you know having some claim

291
00:11:37,270 --> 00:11:42,220
level of security but there's no you

292
00:11:39,880 --> 00:11:44,740
know standard for what the security is

293
00:11:42,220 --> 00:11:46,000
within the Bitcoin domain so that's

294
00:11:44,740 --> 00:11:48,100
where it sort of becomes a problem of

295
00:11:46,000 --> 00:11:54,820
you know you just have to trust what's

296
00:11:48,100 --> 00:11:57,760
written here is valid and make sense all

297
00:11:54,820 --> 00:12:01,180
right so there was a talk this was sort

298
00:11:57,760 --> 00:12:04,750
of inspired by a talk in December at 35c

299
00:12:01,180 --> 00:12:07,300
3 also looking at these same devices so

300
00:12:04,750 --> 00:12:09,550
three guys Demetri dodge and Thomas they

301
00:12:07,300 --> 00:12:11,229
actually attacked the treszura Bitcoin

302
00:12:09,550 --> 00:12:14,469
wallet as well and they were able to

303
00:12:11,230 --> 00:12:17,290
recover this information from SRAM in

304
00:12:14,470 --> 00:12:19,450
the device so it was a different attack

305
00:12:17,290 --> 00:12:22,120
that was patched a different way but

306
00:12:19,450 --> 00:12:23,710
basically in talking to Dimitri he had

307
00:12:22,120 --> 00:12:25,780
told me about you know hey this this

308
00:12:23,710 --> 00:12:27,640
works you can just get the data out of

309
00:12:25,780 --> 00:12:29,560
the device so it was pretty clear that

310
00:12:27,640 --> 00:12:34,150
this recovery information was actually

311
00:12:29,560 --> 00:12:35,560
stored inside the device itself that

312
00:12:34,150 --> 00:12:36,910
that talk actually looked at a few other

313
00:12:35,560 --> 00:12:38,229
vulnerabilities as well but for

314
00:12:36,910 --> 00:12:39,100
treasurer specifically what you

315
00:12:38,230 --> 00:12:41,260
basically have

316
00:12:39,100 --> 00:12:45,010
is this special recovery seed you could

317
00:12:41,260 --> 00:12:48,040
copy to SRAM once it's in SRAM there's a

318
00:12:45,010 --> 00:12:49,990
way to read out this backup a required

319
00:12:48,040 --> 00:12:52,839
physical access to the PCB so you open

320
00:12:49,990 --> 00:12:55,540
the enclosure attach some probes do some

321
00:12:52,840 --> 00:12:58,090
voltage fault injection to to allow you

322
00:12:55,540 --> 00:12:59,530
to read the SRAM and dump it out but it

323
00:12:58,090 --> 00:13:01,300
was pretty reliable so this was a nice

324
00:12:59,530 --> 00:13:03,240
thing is that if you had the device it

325
00:13:01,300 --> 00:13:05,979
was pretty easy to dump it very quickly

326
00:13:03,240 --> 00:13:08,140
where's where I wanted to look at is is

327
00:13:05,980 --> 00:13:10,630
how else could you get it hopefully in a

328
00:13:08,140 --> 00:13:12,880
way that doesn't involve actually

329
00:13:10,630 --> 00:13:14,260
opening the device up so you think like

330
00:13:12,880 --> 00:13:16,960
with a screwdriver to your head

331
00:13:14,260 --> 00:13:19,300
apparently in this stock photo and you

332
00:13:16,960 --> 00:13:22,240
think of other ways that you could get

333
00:13:19,300 --> 00:13:26,260
information out of this device and in

334
00:13:22,240 --> 00:13:28,150
particularly the recovery season and the

335
00:13:26,260 --> 00:13:31,300
recovery seat and also the device pin

336
00:13:28,150 --> 00:13:33,010
are stored in flash memory and we know

337
00:13:31,300 --> 00:13:34,599
what the flash memory layout looks like

338
00:13:33,010 --> 00:13:38,500
in this case it's open source so it's

339
00:13:34,600 --> 00:13:40,990
super easy to get the delay out and we

340
00:13:38,500 --> 00:13:43,060
know it's at this location here and what

341
00:13:40,990 --> 00:13:43,690
I was looking at is what happens in the

342
00:13:43,060 --> 00:13:47,739
bootloader

343
00:13:43,690 --> 00:13:50,200
a little bit before that so what's going

344
00:13:47,740 --> 00:13:51,910
on in the bootloader code and is there

345
00:13:50,200 --> 00:13:56,410
anything in the bootloader code that we

346
00:13:51,910 --> 00:13:58,750
could actually access and basically one

347
00:13:56,410 --> 00:14:01,270
of the things in the bootloader code is

348
00:13:58,750 --> 00:14:02,790
these USB device descriptors so when you

349
00:14:01,270 --> 00:14:05,380
plug your USB device into your computer

350
00:14:02,790 --> 00:14:07,810
it says you know hey what I'm I am a

351
00:14:05,380 --> 00:14:09,850
webcam something like that it does this

352
00:14:07,810 --> 00:14:11,680
in the device descriptor which is

353
00:14:09,850 --> 00:14:14,650
basically a big binary chunk of data

354
00:14:11,680 --> 00:14:16,780
that's sent over USB and these are all

355
00:14:14,650 --> 00:14:18,520
part of the USB standard each of the

356
00:14:16,780 --> 00:14:21,579
descriptors has a certain length and

357
00:14:18,520 --> 00:14:23,140
includes many optional components so the

358
00:14:21,580 --> 00:14:25,570
computer has to ask the device please

359
00:14:23,140 --> 00:14:27,189
send me you know as much data as I need

360
00:14:25,570 --> 00:14:30,700
to understand what you're what you are

361
00:14:27,190 --> 00:14:32,350
and how I talk to you this is done in

362
00:14:30,700 --> 00:14:36,100
this request so there's this get

363
00:14:32,350 --> 00:14:39,310
descriptor request and it returns

364
00:14:36,100 --> 00:14:42,880
basically some information on what the

365
00:14:39,310 --> 00:14:45,189
actual device is set up as you know one

366
00:14:42,880 --> 00:14:49,660
of the requests part of the request is

367
00:14:45,190 --> 00:14:51,400
this W length field which basically says

368
00:14:49,660 --> 00:14:52,540
how many bytes do I want to return from

369
00:14:51,400 --> 00:14:55,090
the descriptor

370
00:14:52,540 --> 00:14:56,800
and the reason we need this is on the

371
00:14:55,090 --> 00:14:59,140
computer side it may only want to read

372
00:14:56,800 --> 00:15:00,790
the first you know 60 bytes or 100 bytes

373
00:14:59,140 --> 00:15:02,710
because it doesn't care about a very

374
00:15:00,790 --> 00:15:04,420
large descriptor so it's gonna say

375
00:15:02,710 --> 00:15:06,610
please give me up to a hundred bytes of

376
00:15:04,420 --> 00:15:08,530
the descriptor the end device will

377
00:15:06,610 --> 00:15:10,930
basically say I will give you either as

378
00:15:08,530 --> 00:15:13,000
much data as you requested or if my

379
00:15:10,930 --> 00:15:14,560
descriptor smaller than that I'm only

380
00:15:13,000 --> 00:15:17,290
going to give you the size of the actual

381
00:15:14,560 --> 00:15:18,880
struct in memory so it's sort of this or

382
00:15:17,290 --> 00:15:21,449
condition right where it says okay what

383
00:15:18,880 --> 00:15:25,630
do we do we give you whatever the

384
00:15:21,450 --> 00:15:29,350
required size you need so how is this

385
00:15:25,630 --> 00:15:31,120
done in software this is done with this

386
00:15:29,350 --> 00:15:34,690
simple min call so basically what you

387
00:15:31,120 --> 00:15:38,040
have is you see that this Len

388
00:15:34,690 --> 00:15:40,810
here is the W length from the USB

389
00:15:38,040 --> 00:15:45,010
request so we have the length requested

390
00:15:40,810 --> 00:15:49,449
from the computer or the size of the

391
00:15:45,010 --> 00:15:51,310
descriptor stored in flash memory this

392
00:15:49,450 --> 00:15:54,340
length is a 16-bit value so

393
00:15:51,310 --> 00:15:56,680
theoretically you can request up to 65 K

394
00:15:54,340 --> 00:15:58,660
but the end device is gonna limit you to

395
00:15:56,680 --> 00:16:01,089
however much memories actually in the

396
00:15:58,660 --> 00:16:04,719
flash itself or the size of the

397
00:16:01,090 --> 00:16:06,910
descriptor in the flash itself so if we

398
00:16:04,720 --> 00:16:09,430
could corrupt this what this would mean

399
00:16:06,910 --> 00:16:11,650
all of a sudden is that it's going to

400
00:16:09,430 --> 00:16:13,780
think the descriptor is much larger than

401
00:16:11,650 --> 00:16:16,060
it is because I can request 65 K of

402
00:16:13,780 --> 00:16:18,760
memory if we had crept that value such

403
00:16:16,060 --> 00:16:20,410
that it thinks this descriptor is much

404
00:16:18,760 --> 00:16:22,630
larger it's all of a sudden going to

405
00:16:20,410 --> 00:16:25,000
return a huge chunk of memory directly

406
00:16:22,630 --> 00:16:26,920
over USB and you'll notice for example

407
00:16:25,000 --> 00:16:29,830
this whole section here this bootloader

408
00:16:26,920 --> 00:16:31,810
code is only 32 K so we can in fact

409
00:16:29,830 --> 00:16:34,480
guarantee from the bootloader if we

410
00:16:31,810 --> 00:16:36,989
could return 65 K we could guarantee

411
00:16:34,480 --> 00:16:39,250
that we could read the entire metadata

412
00:16:36,990 --> 00:16:41,710
which includes all the important

413
00:16:39,250 --> 00:16:43,000
information we're trying to recover so

414
00:16:41,710 --> 00:16:45,730
that's really what the attack is trying

415
00:16:43,000 --> 00:16:48,100
to do how this happens is that at the

416
00:16:45,730 --> 00:16:49,780
assembly language level when we look at

417
00:16:48,100 --> 00:16:51,630
that compiled code again it's open

418
00:16:49,780 --> 00:16:54,430
source so we can really easily do this

419
00:16:51,630 --> 00:16:57,340
what you have is it's now comparing

420
00:16:54,430 --> 00:17:00,699
write the input data to the known struct

421
00:16:57,340 --> 00:17:03,160
length which is hex 92 here this known

422
00:17:00,700 --> 00:17:04,930
struc length of hex 92 width then says

423
00:17:03,160 --> 00:17:06,250
well compare which one's bigger we'll

424
00:17:04,930 --> 00:17:09,909
put the smaller one

425
00:17:06,250 --> 00:17:12,130
into the variable that we pieced at so

426
00:17:09,909 --> 00:17:15,760
what you could do is that if you could

427
00:17:12,130 --> 00:17:17,860
skip this single move instruction right

428
00:17:15,760 --> 00:17:20,289
when it's copying the value over when

429
00:17:17,859 --> 00:17:21,490
it's copying the smaller value over we

430
00:17:20,289 --> 00:17:23,049
would all of a sudden be able to return

431
00:17:21,490 --> 00:17:25,870
as much data as we want and that's

432
00:17:23,049 --> 00:17:28,150
basically the idea the next thing about

433
00:17:25,869 --> 00:17:30,580
the treasure it's open source as I

434
00:17:28,150 --> 00:17:32,020
mentioned so you can be super lazy you

435
00:17:30,580 --> 00:17:34,720
can do something like this which is to

436
00:17:32,020 --> 00:17:36,429
use an external debugger get a device

437
00:17:34,720 --> 00:17:38,049
you know reprogram it you have to change

438
00:17:36,429 --> 00:17:39,970
the tip out because the default ones

439
00:17:38,049 --> 00:17:42,429
have the JTAG lock down change the chip

440
00:17:39,970 --> 00:17:46,210
and we can simulate this glitch so what

441
00:17:42,429 --> 00:17:48,010
I can do is I request 65k of data I get

442
00:17:46,210 --> 00:17:51,340
the expected response most of the time

443
00:17:48,010 --> 00:17:54,010
146 bites coming back but sometimes it

444
00:17:51,340 --> 00:17:56,320
sends back 65 K or not sometimes the

445
00:17:54,010 --> 00:17:58,570
time that I crept at that comparison so

446
00:17:56,320 --> 00:18:00,250
I use the debugger just sort of skip

447
00:17:58,570 --> 00:18:01,928
that comparison so now I know that if I

448
00:18:00,250 --> 00:18:03,820
skip the comparison it's going to work

449
00:18:01,929 --> 00:18:07,360
exactly as I expect it's gonna let me

450
00:18:03,820 --> 00:18:10,059
return all that data and we can also

451
00:18:07,360 --> 00:18:12,370
confirm that inside that data basically

452
00:18:10,059 --> 00:18:14,799
the way Bitcoin is recording the

453
00:18:12,370 --> 00:18:17,889
recovery seed is it actually records

454
00:18:14,799 --> 00:18:20,350
these like English language phrases so

455
00:18:17,890 --> 00:18:22,659
we can actually see those strings in the

456
00:18:20,350 --> 00:18:24,280
data that we sent back there would be a

457
00:18:22,659 --> 00:18:25,900
pin here but I didn't actually set a pin

458
00:18:24,280 --> 00:18:28,750
on this device so it doesn't show up in

459
00:18:25,900 --> 00:18:30,549
memory but this is the metadata section

460
00:18:28,750 --> 00:18:33,070
there's their special store tag and

461
00:18:30,549 --> 00:18:36,760
stuff like that so basically this with

462
00:18:33,070 --> 00:18:40,090
read over the USB from doing a simulated

463
00:18:36,760 --> 00:18:41,408
glitch which was faded one okay so how

464
00:18:40,090 --> 00:18:43,030
are we gonna get a real glitch how are

465
00:18:41,409 --> 00:18:45,190
we actually going to cause this to

466
00:18:43,030 --> 00:18:48,879
happen in real life not in my chintzy

467
00:18:45,190 --> 00:18:50,700
simulator here what we're gonna do is

468
00:18:48,880 --> 00:18:53,650
we're gonna use something called EMF I

469
00:18:50,700 --> 00:18:55,720
so EMF i electromagnetic fault injection

470
00:18:53,650 --> 00:18:58,059
basically says we're gonna take a coil

471
00:18:55,720 --> 00:18:59,919
we're gonna drive a current through it

472
00:18:58,059 --> 00:19:02,049
driving a current through it generates a

473
00:18:59,919 --> 00:19:04,120
strong magnetic field that magnetic

474
00:19:02,049 --> 00:19:07,059
field is going to induce a voltage in a

475
00:19:04,120 --> 00:19:08,590
nearby device such as the treasure and

476
00:19:07,059 --> 00:19:10,870
the induced field is going to corrupt

477
00:19:08,590 --> 00:19:12,220
memory or corrupt something else so in

478
00:19:10,870 --> 00:19:13,899
this case it could corrupt the program

479
00:19:12,220 --> 00:19:15,789
counter to skip over instructions

480
00:19:13,900 --> 00:19:19,210
there's all sorts of nice effects that

481
00:19:15,789 --> 00:19:20,080
can give us the desired result the coils

482
00:19:19,210 --> 00:19:21,929
themselves I mean it

483
00:19:20,080 --> 00:19:24,100
they look like kind of standard coils

484
00:19:21,929 --> 00:19:25,870
these are actually just standard

485
00:19:24,100 --> 00:19:28,000
off-the-shelf type inductors but you

486
00:19:25,870 --> 00:19:29,620
have a coil of water around this ferrite

487
00:19:28,000 --> 00:19:31,390
so this is a magnetic material that

488
00:19:29,620 --> 00:19:35,559
helps to concentrate the flux over a

489
00:19:31,390 --> 00:19:37,570
smaller area people sometimes ask me you

490
00:19:35,559 --> 00:19:39,580
know why do you need a high voltage you

491
00:19:37,570 --> 00:19:42,730
put a high voltage across the current to

492
00:19:39,580 --> 00:19:47,199
get a very strong field because sort of

493
00:19:42,730 --> 00:19:48,850
nature hates you basically we just want

494
00:19:47,200 --> 00:19:50,919
a high rate of change of current through

495
00:19:48,850 --> 00:19:54,219
the coil which doesn't necessarily mean

496
00:19:50,919 --> 00:19:56,409
a high voltage but we also want a lot of

497
00:19:54,220 --> 00:19:58,840
turns of wire around the coil to get a

498
00:19:56,409 --> 00:20:01,480
stronger magnetic field the inductance

499
00:19:58,840 --> 00:20:03,309
increases with the number of turns the

500
00:20:01,480 --> 00:20:06,240
higher inductance means we need a higher

501
00:20:03,309 --> 00:20:08,559
voltage to get this fast current change

502
00:20:06,240 --> 00:20:10,840
so there's some trade-off of winding a

503
00:20:08,559 --> 00:20:13,389
lot of turns of wire but also wanting a

504
00:20:10,840 --> 00:20:15,428
very fast rate of change of current and

505
00:20:13,389 --> 00:20:17,320
we want this fast rate of change because

506
00:20:15,429 --> 00:20:19,570
if you look back to this code rate I

507
00:20:17,320 --> 00:20:20,799
only want to have this fault effect a

508
00:20:19,570 --> 00:20:22,330
very small section of the

509
00:20:20,799 --> 00:20:25,029
microcontroller running I only want it

510
00:20:22,330 --> 00:20:27,279
to affect you know 10 or 20 nanoseconds

511
00:20:25,029 --> 00:20:29,200
of the time that it's actually executing

512
00:20:27,279 --> 00:20:32,889
these instructions otherwise it should

513
00:20:29,200 --> 00:20:35,620
be operating as normal so this is what

514
00:20:32,889 --> 00:20:40,090
it looks like basically this is a setup

515
00:20:35,620 --> 00:20:43,029
to do EMF ion the tracer the device on

516
00:20:40,090 --> 00:20:45,279
the top is chip shutter so this is

517
00:20:43,029 --> 00:20:47,350
something I designed that charges a

518
00:20:45,279 --> 00:20:49,299
capacitor bank up to high voltage and

519
00:20:47,350 --> 00:20:52,600
with very precise trigger and is able to

520
00:20:49,299 --> 00:20:55,600
dump it into this coil here and this

521
00:20:52,600 --> 00:20:57,158
coil you can see is just placed over top

522
00:20:55,600 --> 00:20:58,658
of the outside of the case so I haven't

523
00:20:57,159 --> 00:21:02,830
actually had to open the case of this

524
00:20:58,659 --> 00:21:04,389
device there's two screws that just push

525
00:21:02,830 --> 00:21:05,860
against the buttons to force it into

526
00:21:04,389 --> 00:21:07,809
bootloader mode so when the buttons are

527
00:21:05,860 --> 00:21:12,309
pressed down and the USB cables turned

528
00:21:07,809 --> 00:21:15,399
on it enters blue to trigger it it's

529
00:21:12,309 --> 00:21:18,220
triggered from a logic special USB

530
00:21:15,399 --> 00:21:20,289
analyzer a total phase beagle 480 this

531
00:21:18,220 --> 00:21:22,929
is basically a device that can see

532
00:21:20,289 --> 00:21:25,299
physical data going across the USB bus I

533
00:21:22,929 --> 00:21:27,880
can set up a trigger based on some

534
00:21:25,299 --> 00:21:30,010
specific packets the trigger that's set

535
00:21:27,880 --> 00:21:32,049
up based on some specific packets is

536
00:21:30,010 --> 00:21:33,830
when I'm doing that read request so when

537
00:21:32,049 --> 00:21:36,590
I'm requesting the description

538
00:21:33,830 --> 00:21:39,500
I keep requesting it with my 65k of of

539
00:21:36,590 --> 00:21:41,299
data I want send back and I use that to

540
00:21:39,500 --> 00:21:43,130
know roughly when to insert the glitch

541
00:21:41,299 --> 00:21:45,379
and then I'm just gonna kind of sweep

542
00:21:43,130 --> 00:21:46,880
around because it's not gonna be exactly

543
00:21:45,380 --> 00:21:48,380
that time that it's doing it and I'm

544
00:21:46,880 --> 00:21:50,960
just gonna keep trying so it's not

545
00:21:48,380 --> 00:21:52,850
perfectly reliable but if it works once

546
00:21:50,960 --> 00:21:56,510
it gives me the required data to break

547
00:21:52,850 --> 00:21:58,520
the device there's a second project -

548
00:21:56,510 --> 00:22:00,320
that's not ready for this talk but if I

549
00:21:58,520 --> 00:22:02,179
whisper USB so this is like an

550
00:22:00,320 --> 00:22:02,840
open-source hardware software tool I'm

551
00:22:02,179 --> 00:22:05,059
working on

552
00:22:02,840 --> 00:22:06,620
it'll basically help you do this type of

553
00:22:05,059 --> 00:22:10,428
triggering so you can watch out for that

554
00:22:06,620 --> 00:22:11,928
in the coming months so this is what the

555
00:22:10,429 --> 00:22:14,679
full setup looked like so you have the

556
00:22:11,929 --> 00:22:17,720
treasure here I already showed you that

557
00:22:14,679 --> 00:22:19,460
we had this is using chip whisperer

558
00:22:17,720 --> 00:22:21,350
solely to do a trigger

559
00:22:19,460 --> 00:22:23,210
search so it's totally using this to

560
00:22:21,350 --> 00:22:25,549
delay the trigger to insert it at the

561
00:22:23,210 --> 00:22:28,309
right moment in time the Beagle 480 I

562
00:22:25,549 --> 00:22:30,679
mentioned we need to use that to

563
00:22:28,309 --> 00:22:32,480
generate the trigger signal and finally

564
00:22:30,679 --> 00:22:35,210
there's the USB switch here so this is

565
00:22:32,480 --> 00:22:37,340
just used to power cycle that rezar when

566
00:22:35,210 --> 00:22:38,929
the tribes are detects fault conditions

567
00:22:37,340 --> 00:22:40,939
it sort of goes into a hard loop and you

568
00:22:38,929 --> 00:22:46,940
have to power cycle it to get it back to

569
00:22:40,940 --> 00:22:50,840
working all right so I don't have that

570
00:22:46,940 --> 00:22:52,490
full set up here so what I'm gonna show

571
00:22:50,840 --> 00:22:55,220
you instead is just sort of what happens

572
00:22:52,490 --> 00:23:05,240
with EMF five so here's one of the

573
00:22:55,220 --> 00:23:07,779
Bitcoin wallets and if we plug it in and

574
00:23:05,240 --> 00:23:10,190
there's no worry about that

575
00:23:07,779 --> 00:23:11,590
so if I hold these buttons down it's

576
00:23:10,190 --> 00:23:13,640
instead gonna go into bootloader mode

577
00:23:11,590 --> 00:23:16,490
and you can see it gives you there's a

578
00:23:13,640 --> 00:23:17,659
hash of whatever the current I think

579
00:23:16,490 --> 00:23:19,220
it's the current bootloader or something

580
00:23:17,659 --> 00:23:20,750
like that is so the idea is you can

581
00:23:19,220 --> 00:23:26,600
verify what's running on it the whole

582
00:23:20,750 --> 00:23:28,549
time all right so to insert a glitched

583
00:23:26,600 --> 00:23:32,000
as you I showed you before there's this

584
00:23:28,549 --> 00:23:35,179
device that generates a high voltage put

585
00:23:32,000 --> 00:23:36,470
across that coil there and in this case

586
00:23:35,179 --> 00:23:39,500
what I'm gonna do is I'm just gonna hold

587
00:23:36,470 --> 00:23:41,899
down this button when it's generate the

588
00:23:39,500 --> 00:23:43,940
pulse so what you'll see with this guy

589
00:23:41,899 --> 00:23:45,469
is that as I you know you have to get

590
00:23:43,940 --> 00:23:46,700
quite close for this to work but

591
00:23:45,470 --> 00:23:47,460
eventually it's actually going to

592
00:23:46,700 --> 00:23:52,409
corrupt

593
00:23:47,460 --> 00:23:53,669
some stuff and it should enter so if you

594
00:23:52,409 --> 00:23:56,789
can read that it says herd fault

595
00:23:53,669 --> 00:23:58,409
detected please unplug the device so

596
00:23:56,789 --> 00:24:00,479
this is just triggering some memory

597
00:23:58,409 --> 00:24:02,729
corruption of routine so you have to get

598
00:24:00,479 --> 00:24:04,950
the timing exactly right to not corrupt

599
00:24:02,729 --> 00:24:10,469
memory during regular usage

600
00:24:04,950 --> 00:24:12,119
yeah memory fault detected you can see

601
00:24:10,469 --> 00:24:13,679
that of course if so you have to get the

602
00:24:12,119 --> 00:24:16,049
time you just rate to corrupt just that

603
00:24:13,679 --> 00:24:17,399
comparison without causing any of these

604
00:24:16,049 --> 00:24:18,629
error conditions to happen so that's

605
00:24:17,399 --> 00:24:20,908
kind of the trick right and that's why I

606
00:24:18,629 --> 00:24:22,769
need this power cycle is that I don't

607
00:24:20,909 --> 00:24:24,719
really know the exact timing I'm just

608
00:24:22,769 --> 00:24:30,539
gonna set it up to do a whole bunch of

609
00:24:24,719 --> 00:24:31,830
glitching detected and so far so you

610
00:24:30,539 --> 00:24:32,999
basically set this up and leave it

611
00:24:31,830 --> 00:24:37,739
running for quite some time and

612
00:24:32,999 --> 00:24:41,070
eventually it wiii give me the correct u

613
00:24:37,739 --> 00:24:42,570
at USB traffic going back there's a

614
00:24:41,070 --> 00:24:44,070
third error I'm seein if I can get the

615
00:24:42,570 --> 00:24:46,820
third error so there's also like a stack

616
00:24:44,070 --> 00:24:49,889
smashing detected which is basically

617
00:24:46,820 --> 00:24:51,359
default when it detects that some of the

618
00:24:49,889 --> 00:24:52,738
stack has been corrupted so it's also

619
00:24:51,359 --> 00:24:53,249
trying to prevent various types of

620
00:24:52,739 --> 00:24:55,139
attack

621
00:24:53,249 --> 00:24:57,779
so all these countermeasures were

622
00:24:55,139 --> 00:24:59,668
already present when I looked at it so

623
00:24:57,779 --> 00:25:00,960
it's these don't stop the attack from

624
00:24:59,669 --> 00:25:03,769
working just the fact that they had

625
00:25:00,960 --> 00:25:07,759
turned on a lot of the various

626
00:25:03,769 --> 00:25:07,759
countermeasures available in the device

627
00:25:08,690 --> 00:25:13,049
so how did they affect it there's

628
00:25:11,309 --> 00:25:14,580
basically a few ways they they were able

629
00:25:13,049 --> 00:25:17,279
to fix it

630
00:25:14,580 --> 00:25:20,580
the first thing they did is there's a

631
00:25:17,279 --> 00:25:22,739
memory protection unit in the stm32 so

632
00:25:20,580 --> 00:25:24,330
we armor the sensitive data with invalid

633
00:25:22,739 --> 00:25:28,399
memory segments so where we have that

634
00:25:24,330 --> 00:25:28,399
sense of metadata if you look way back

635
00:25:31,249 --> 00:25:36,379
the issue is I can read from the

636
00:25:33,719 --> 00:25:39,479
bootloader right into that metadata so

637
00:25:36,379 --> 00:25:41,399
what they were able to do is insert

638
00:25:39,479 --> 00:25:43,289
invalid memory segments in between that

639
00:25:41,399 --> 00:25:44,849
with the idea being that if you read

640
00:25:43,289 --> 00:25:47,789
from the bootloader and just scanned

641
00:25:44,849 --> 00:25:49,649
forward as I'm forced to do basically it

642
00:25:47,789 --> 00:25:51,929
wouldn't hit the metadata so if you

643
00:25:49,649 --> 00:25:53,488
could corrupt where the pointer was you

644
00:25:51,929 --> 00:25:55,469
know you could get lucky and maybe hit

645
00:25:53,489 --> 00:25:58,859
the metadata but it's a much much less

646
00:25:55,469 --> 00:26:00,990
likely attack to work that's actually

647
00:25:58,859 --> 00:26:02,699
the the main thing they did

648
00:26:00,990 --> 00:26:05,580
you could theoretically move the memory

649
00:26:02,700 --> 00:26:07,200
later around right so we could put the

650
00:26:05,580 --> 00:26:09,570
metadata at the beginning so there's no

651
00:26:07,200 --> 00:26:11,130
pointers that point ahead of it this

652
00:26:09,570 --> 00:26:13,020
isn't quite as useful because if you're

653
00:26:11,130 --> 00:26:14,580
if you ended up with a variable that

654
00:26:13,020 --> 00:26:16,080
looped around in memory or something

655
00:26:14,580 --> 00:26:18,240
like that you could still get access to

656
00:26:16,080 --> 00:26:20,070
it the other thing that would be really

657
00:26:18,240 --> 00:26:22,800
good would obviously be taking trip this

658
00:26:20,070 --> 00:26:24,810
in place and one of the problems is it's

659
00:26:22,800 --> 00:26:27,180
completely raw data when you dump the

660
00:26:24,810 --> 00:26:29,100
memory it's extremely obvious where this

661
00:26:27,180 --> 00:26:30,810
recovery seed is located because it's

662
00:26:29,100 --> 00:26:33,719
just a string you just look for these

663
00:26:30,810 --> 00:26:36,899
strings and you're able to get this

664
00:26:33,720 --> 00:26:39,690
critical data out of it so this was

665
00:26:36,900 --> 00:26:42,450
fixed as I mentioned in the latest

666
00:26:39,690 --> 00:26:43,680
firmware patch and it didn't affect

667
00:26:42,450 --> 00:26:45,110
people using passphrase so they have a

668
00:26:43,680 --> 00:26:47,850
blog post where they also talk about

669
00:26:45,110 --> 00:26:51,629
what yeah what some of these fixes were

670
00:26:47,850 --> 00:26:53,969
so that's sort of what I wanted to show

671
00:26:51,630 --> 00:26:55,620
you to share with you as a note to if

672
00:26:53,970 --> 00:26:56,850
you are sort of interested in software

673
00:26:55,620 --> 00:26:59,070
development we're going to be looking

674
00:26:56,850 --> 00:27:02,490
for software developers in the near

675
00:26:59,070 --> 00:27:04,169
future feel free to say hi if there's

676
00:27:02,490 --> 00:27:05,430
any questions I sort of tried to leave

677
00:27:04,170 --> 00:27:07,500
it a bit early so there's time for

678
00:27:05,430 --> 00:27:09,290
questions and I could have prizes for

679
00:27:07,500 --> 00:27:13,080
like the best three questions I have a

680
00:27:09,290 --> 00:27:18,149
few of these blockchains here so if you

681
00:27:13,080 --> 00:27:20,629
wanted small blockchain you have to ask

682
00:27:18,150 --> 00:27:20,630
a question

