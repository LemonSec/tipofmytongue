1
00:00:00,390 --> 00:00:13,200
[Music]

2
00:00:13,200 --> 00:00:16,759
da da

3
00:00:22,720 --> 00:00:25,720
uh

4
00:00:36,320 --> 00:00:39,320
uh

5
00:00:58,470 --> 00:01:01,640
[Music]

6
00:01:08,010 --> 00:01:10,560
[Music]

7
00:01:10,560 --> 00:01:13,040
okay hello everybody

8
00:01:13,040 --> 00:01:15,840
and uh welcome to our second day of work

9
00:01:15,840 --> 00:01:16,960
36

10
00:01:16,960 --> 00:01:21,360
uh i'm olesh and i am in the pc for the

11
00:01:21,360 --> 00:01:23,360
forework and we

12
00:01:23,360 --> 00:01:26,400
really happy to have you here today um

13
00:01:26,400 --> 00:01:28,720
and with that we dive right into our

14
00:01:28,720 --> 00:01:30,880
first speaker geo viewstem is talking

15
00:01:30,880 --> 00:01:33,040
about measurements of the nsx validation

16
00:01:33,040 --> 00:01:34,520
with rsa

17
00:01:34,520 --> 00:01:36,479
4096.

18
00:01:36,479 --> 00:01:37,680
please jeff

19
00:01:37,680 --> 00:01:40,400
start sharing your slides and

20
00:01:40,400 --> 00:01:42,560
off we go thank you very much and uh

21
00:01:42,560 --> 00:01:45,520
good morning all it's uh good to be here

22
00:01:45,520 --> 00:01:49,040
um this is a relatively quick talk about

23
00:01:49,040 --> 00:01:52,560
dns sec and in particular the rsa crypto

24
00:01:52,560 --> 00:01:55,759
algorithm and looking at the extended

25
00:01:55,759 --> 00:01:57,840
key sizes with rsa

26
00:01:57,840 --> 00:01:59,920
the issue is of course that rsa is not

27
00:01:59,920 --> 00:02:02,880
what you'd call a dense algorithm in

28
00:02:02,880 --> 00:02:04,960
order to get a high security level you

29
00:02:04,960 --> 00:02:07,680
actually need a relatively long key

30
00:02:07,680 --> 00:02:08,639
length

31
00:02:08,639 --> 00:02:10,800
um and as you can see on the slide

32
00:02:10,800 --> 00:02:13,760
what's the security level well

33
00:02:13,760 --> 00:02:16,000
a security level of n means that you

34
00:02:16,000 --> 00:02:18,160
need to perform two to the n operations

35
00:02:18,160 --> 00:02:20,959
in order to solve the problem posed by

36
00:02:20,959 --> 00:02:23,840
the cryptographic uh deck so

37
00:02:23,840 --> 00:02:27,200
a security level of 140

38
00:02:27,200 --> 00:02:29,760
means you need to have two to the 140th

39
00:02:29,760 --> 00:02:31,120
operations

40
00:02:31,120 --> 00:02:31,920
uh

41
00:02:31,920 --> 00:02:33,080
for an

42
00:02:33,080 --> 00:02:36,480
rsa4096 encoded piece of text the

43
00:02:36,480 --> 00:02:38,239
problem is not really the fact that

44
00:02:38,239 --> 00:02:39,680
computers are getting faster it's the

45
00:02:39,680 --> 00:02:42,000
real issue of quantum computers

46
00:02:42,000 --> 00:02:44,879
and although we really don't know how

47
00:02:44,879 --> 00:02:47,599
quickly and how big uh the theoretical

48
00:02:47,599 --> 00:02:49,280
work proceeds

49
00:02:49,280 --> 00:02:52,720
using a mia a mere 20 million cubic

50
00:02:52,720 --> 00:02:54,480
quantum computer if we're ever going to

51
00:02:54,480 --> 00:02:56,640
make something that massive evidently

52
00:02:56,640 --> 00:02:59,519
2048 bit rsa could be solved in eight

53
00:02:59,519 --> 00:03:00,720
hours

54
00:03:00,720 --> 00:03:02,959
but that's a huge amount of horsepower

55
00:03:02,959 --> 00:03:04,800
now you might be concerned about this

56
00:03:04,800 --> 00:03:06,400
you might want to protect your data for

57
00:03:06,400 --> 00:03:08,480
longer than eight hours and

58
00:03:08,480 --> 00:03:10,319
you might believe that quantum computers

59
00:03:10,319 --> 00:03:11,840
are going to happen really really

60
00:03:11,840 --> 00:03:16,319
quickly they might i have no idea

61
00:03:16,319 --> 00:03:18,720
you might also have an issue with ecdsa

62
00:03:18,720 --> 00:03:20,159
because it's a slightly lower level of

63
00:03:20,159 --> 00:03:22,159
quantum resistance so

64
00:03:22,159 --> 00:03:25,440
well maybe you should try rsa with 4096

65
00:03:25,440 --> 00:03:27,599
bit keys yeah

66
00:03:27,599 --> 00:03:29,680
well let's have a look

67
00:03:29,680 --> 00:03:30,959
um

68
00:03:30,959 --> 00:03:32,040
certainly

69
00:03:32,040 --> 00:03:34,959
rsa4096 is big the private key is of

70
00:03:34,959 --> 00:03:37,360
course massive uh 3

71
00:03:37,360 --> 00:03:39,920
300 bytes but the things that impact the

72
00:03:39,920 --> 00:03:42,720
dns is actually the public key and the

73
00:03:42,720 --> 00:03:45,280
signature and again as you see there

74
00:03:45,280 --> 00:03:47,440
they're both pretty large uh the private

75
00:03:47,440 --> 00:03:51,280
key up to a kilobit uh the signature 744

76
00:03:51,280 --> 00:03:54,480
bit so you know you're paying a penalty

77
00:03:54,480 --> 00:03:55,920
for that degree

78
00:03:55,920 --> 00:03:57,760
what about performance

79
00:03:57,760 --> 00:03:58,640
um

80
00:03:58,640 --> 00:04:01,040
it's very slow to sign on my computer i

81
00:04:01,040 --> 00:04:03,760
was signing 500 000 entries and i used a

82
00:04:03,760 --> 00:04:06,519
number of algorithms and as you see the

83
00:04:06,519 --> 00:04:09,200
rsa4096 is kind of a dog

84
00:04:09,200 --> 00:04:11,840
uh validation times however

85
00:04:11,840 --> 00:04:14,560
uh and i was validating uh 50 000

86
00:04:14,560 --> 00:04:17,279
responses using a very small internet in

87
00:04:17,279 --> 00:04:19,680
other words across my room and the

88
00:04:19,680 --> 00:04:22,560
validation times i think is dominated by

89
00:04:22,560 --> 00:04:24,479
all the rest of the dns activity so

90
00:04:24,479 --> 00:04:26,080
they're largely

91
00:04:26,080 --> 00:04:28,560
largely similar um

92
00:04:28,560 --> 00:04:30,960
but the issue is

93
00:04:30,960 --> 00:04:33,720
the response sizes and in particular for

94
00:04:33,720 --> 00:04:37,199
rsa4096 it's the dns key response size

95
00:04:37,199 --> 00:04:39,680
for those of you with i don't know media

96
00:04:39,680 --> 00:04:42,400
memories you might remember october last

97
00:04:42,400 --> 00:04:45,199
year with dns flag day 2020

98
00:04:45,199 --> 00:04:47,600
proposed a maximum dns payload

99
00:04:47,600 --> 00:04:49,800
unfragmented of

100
00:04:49,800 --> 00:04:52,840
1232 octets if you're using

101
00:04:52,840 --> 00:04:55,440
rsa4096 you've just bumped over the top

102
00:04:55,440 --> 00:04:57,520
of that by

103
00:04:57,520 --> 00:05:02,160
13 octets whereas ecdsa p256 of course

104
00:05:02,160 --> 00:05:05,199
comes in easily at 347. so is that a

105
00:05:05,199 --> 00:05:06,240
problem

106
00:05:06,240 --> 00:05:08,240
because in this point you're going to be

107
00:05:08,240 --> 00:05:11,280
delivering truncated answers and doing a

108
00:05:11,280 --> 00:05:13,360
flip into tcp

109
00:05:13,360 --> 00:05:15,039
we actually had a bigger look at this

110
00:05:15,039 --> 00:05:17,360
whole issue of offered edness zero

111
00:05:17,360 --> 00:05:18,960
buffer sizes

112
00:05:18,960 --> 00:05:20,320
and this measurement was taken in

113
00:05:20,320 --> 00:05:22,080
september of this year

114
00:05:22,080 --> 00:05:26,000
and 17 of users not resolvers

115
00:05:26,000 --> 00:05:27,280
users

116
00:05:27,280 --> 00:05:30,000
query via recursive resolvers that use a

117
00:05:30,000 --> 00:05:31,919
udp buffer size of less than one two

118
00:05:31,919 --> 00:05:35,199
four five uh octets so

119
00:05:35,199 --> 00:05:38,160
this larger key will have a time impact

120
00:05:38,160 --> 00:05:40,800
for around 70 percent of users as far as

121
00:05:40,800 --> 00:05:41,919
we can tell

122
00:05:41,919 --> 00:05:43,759
give or take a bit because the user

123
00:05:43,759 --> 00:05:46,000
might be using more than one resolver

124
00:05:46,000 --> 00:05:47,759
but you notice that the jump points one

125
00:05:47,759 --> 00:05:52,880
two three two uh 1400 1472 and 4096

126
00:05:52,880 --> 00:05:56,080
appear to be the four major uh udp udp

127
00:05:56,080 --> 00:05:58,880
uh buffer sizes at the moment at dns

128
00:05:58,880 --> 00:06:00,720
at tess rig i've been through this many

129
00:06:00,720 --> 00:06:03,199
times before it's an ad we do around 12

130
00:06:03,199 --> 00:06:05,520
million samples a day

131
00:06:05,520 --> 00:06:08,560
we sort folk into two classes

132
00:06:08,560 --> 00:06:10,720
either they're validating in which case

133
00:06:10,720 --> 00:06:12,560
we see all the right queries they fetch

134
00:06:12,560 --> 00:06:14,800
a validly signed object and they do not

135
00:06:14,800 --> 00:06:16,960
fetch an invalidly signed object because

136
00:06:16,960 --> 00:06:19,120
the dns is basically not answering it

137
00:06:19,120 --> 00:06:21,199
and there's a mixed validating class

138
00:06:21,199 --> 00:06:23,520
where they do all the right queries but

139
00:06:23,520 --> 00:06:25,919
when they get back a dns validation

140
00:06:25,919 --> 00:06:27,600
failure a serve fail from their

141
00:06:27,600 --> 00:06:29,759
recursive resolver they just go and ask

142
00:06:29,759 --> 00:06:32,400
another resolver that doesn't validate

143
00:06:32,400 --> 00:06:33,919
and they get the answer and go and fetch

144
00:06:33,919 --> 00:06:35,759
the invalidly signed

145
00:06:35,759 --> 00:06:37,840
about 27 percent of users validate

146
00:06:37,840 --> 00:06:39,120
around 10

147
00:06:39,120 --> 00:06:42,319
of users are mixed validators

148
00:06:42,319 --> 00:06:44,319
so let's have a look at this using two

149
00:06:44,319 --> 00:06:49,919
algorithms rsa 1024 versus rsa4096

150
00:06:49,919 --> 00:06:53,440
validating 29.7 percent of users

151
00:06:53,440 --> 00:06:57,680
worldwide uh for 102.4 and a very small

152
00:06:57,680 --> 00:07:00,880
change 0.3 of a change downward for rsa

153
00:07:00,880 --> 00:07:05,360
409.6 and a slight uptick in mixed

154
00:07:05,360 --> 00:07:07,520
so this was across 84 million samples

155
00:07:07,520 --> 00:07:09,360
over a seven day period

156
00:07:09,360 --> 00:07:10,560
um

157
00:07:10,560 --> 00:07:13,440
what we actually found was that not 17

158
00:07:13,440 --> 00:07:15,360
of users but 26 which is a little bit

159
00:07:15,360 --> 00:07:18,639
higher had a smaller udp buffer size and

160
00:07:18,639 --> 00:07:21,840
were given a truncated response

161
00:07:21,840 --> 00:07:23,039
most of them

162
00:07:23,039 --> 00:07:26,319
most of them followed up using tcp

163
00:07:26,319 --> 00:07:30,080
2.5 didn't they just didn't do the tcp

164
00:07:30,080 --> 00:07:31,520
and of those

165
00:07:31,520 --> 00:07:34,400
most of them four fifths said oh look

166
00:07:34,400 --> 00:07:36,400
this is just getting too silly i'm going

167
00:07:36,400 --> 00:07:38,479
to use a different resolver that had a

168
00:07:38,479 --> 00:07:41,919
larger udp buffer size all good because

169
00:07:41,919 --> 00:07:43,520
everyone provisions with more than one

170
00:07:43,520 --> 00:07:46,080
recursive it all works but a very small

171
00:07:46,080 --> 00:07:47,919
amount point five percent

172
00:07:47,919 --> 00:07:50,160
failed that dns resolution they just

173
00:07:50,160 --> 00:07:52,800
couldn't find a way out because the tcp

174
00:07:52,800 --> 00:07:55,039
follow-up was not working for them this

175
00:07:55,039 --> 00:07:56,800
point five percent inside the

176
00:07:56,800 --> 00:07:58,960
experimental error range or a

177
00:07:58,960 --> 00:08:01,280
significant number i tend to think it

178
00:08:01,280 --> 00:08:03,680
falls towards experimental error

179
00:08:03,680 --> 00:08:05,680
but i also think this test is a little

180
00:08:05,680 --> 00:08:06,720
bit fake

181
00:08:06,720 --> 00:08:09,120
i don't know and i think folk like ed

182
00:08:09,120 --> 00:08:12,000
lewis and uh and victor the covney spent

183
00:08:12,000 --> 00:08:13,680
a lot more time looking at this than i

184
00:08:13,680 --> 00:08:16,400
do but there is a lot of a fashion out

185
00:08:16,400 --> 00:08:18,720
there to separate your keys and use a

186
00:08:18,720 --> 00:08:20,639
separate uh zone signing key and key

187
00:08:20,639 --> 00:08:22,720
signing key but what that does mean is

188
00:08:22,720 --> 00:08:25,840
your dns key record now gets larger and

189
00:08:25,840 --> 00:08:27,759
it gets a lot larger when you're doing a

190
00:08:27,759 --> 00:08:30,240
key role because old signs you and

191
00:08:30,240 --> 00:08:31,840
you're going to then have three of these

192
00:08:31,840 --> 00:08:34,399
keys in your dns key record for a while

193
00:08:34,399 --> 00:08:37,039
so let's have a look at those responses

194
00:08:37,039 --> 00:08:39,120
immediately you're jumping up

195
00:08:39,120 --> 00:08:41,039
hundred seventeen hundred to twenty two

196
00:08:41,039 --> 00:08:42,159
hundred

197
00:08:42,159 --> 00:08:44,880
and the validation outcomes are now all

198
00:08:44,880 --> 00:08:46,800
showing that that stress

199
00:08:46,800 --> 00:08:49,600
when we go above fifteen hundred we tend

200
00:08:49,600 --> 00:08:50,720
to lose

201
00:08:50,720 --> 00:08:53,200
just under two percent of users there

202
00:08:53,200 --> 00:08:56,000
because what goes on is more and more

203
00:08:56,000 --> 00:08:58,080
folk are now trying to flip the tcp and

204
00:08:58,080 --> 00:09:01,360
they're not making it but what's curious

205
00:09:01,360 --> 00:09:06,080
is a much bigger jump from 1700 to 2400

206
00:09:06,080 --> 00:09:06,959
i

207
00:09:06,959 --> 00:09:09,040
have no idea

208
00:09:09,040 --> 00:09:11,200
it shouldn't happen like that

209
00:09:11,200 --> 00:09:13,279
what's going on well

210
00:09:13,279 --> 00:09:15,360
are people lying about the udp buffer

211
00:09:15,360 --> 00:09:17,680
size and when we send 2400 it goes oh my

212
00:09:17,680 --> 00:09:19,680
god i didn't i didn't mean it don't send

213
00:09:19,680 --> 00:09:20,880
that to me

214
00:09:20,880 --> 00:09:24,000
um is the 2400 a path into you mismatch

215
00:09:24,000 --> 00:09:26,560
and the frag i don't think so

216
00:09:26,560 --> 00:09:28,720
is there some other security policy

217
00:09:28,720 --> 00:09:31,279
receive a buffer limit am i are your

218
00:09:31,279 --> 00:09:33,920
front-end firewalls going look i'm sorry

219
00:09:33,920 --> 00:09:36,000
no one sends that bigger dns i'm just

220
00:09:36,000 --> 00:09:37,839
going to throw out the packet because

221
00:09:37,839 --> 00:09:40,800
i'm a firewall and i do such things i

222
00:09:40,800 --> 00:09:43,760
have no idea but it is odd

223
00:09:43,760 --> 00:09:46,880
it could be a tcp problem but again

224
00:09:46,880 --> 00:09:49,519
i just don't understand why

225
00:09:49,519 --> 00:09:52,320
it could be a book dns implementation or

226
00:09:52,320 --> 00:09:54,480
load distribution front-end size filters

227
00:09:54,480 --> 00:09:56,320
which might be more like it where the

228
00:09:56,320 --> 00:09:58,320
load distributor is going people don't

229
00:09:58,320 --> 00:10:00,240
send that kind of size packet i'm just

230
00:10:00,240 --> 00:10:03,200
going to give up because you know no

231
00:10:03,200 --> 00:10:04,480
um

232
00:10:04,480 --> 00:10:05,680
so

233
00:10:05,680 --> 00:10:09,279
failure to reconnect with tcp also rises

234
00:10:09,279 --> 00:10:11,760
and this is failure to complete the tcp

235
00:10:11,760 --> 00:10:13,040
transaction

236
00:10:13,040 --> 00:10:15,600
but again it seems odd tcp doesn't know

237
00:10:15,600 --> 00:10:17,839
in advance and i'm trying to jam down 2

238
00:10:17,839 --> 00:10:19,760
200 bytes

239
00:10:19,760 --> 00:10:21,279
but i get a much higher failure rate

240
00:10:21,279 --> 00:10:23,279
nevertheless

241
00:10:23,279 --> 00:10:25,839
either tcp is really prescient

242
00:10:25,839 --> 00:10:27,760
or there's more going on in the dns

243
00:10:27,760 --> 00:10:30,320
infrastructure than a simple model of a

244
00:10:30,320 --> 00:10:32,480
simple resolver would indicate with a

245
00:10:32,480 --> 00:10:34,640
lot more front-end and processing which

246
00:10:34,640 --> 00:10:37,519
is actually size sensitive and that's

247
00:10:37,519 --> 00:10:39,360
kind of curious

248
00:10:39,360 --> 00:10:40,800
so

249
00:10:40,800 --> 00:10:42,959
where is it a problem

250
00:10:42,959 --> 00:10:44,640
well

251
00:10:44,640 --> 00:10:45,760
the winner

252
00:10:45,760 --> 00:10:48,000
the winner today is portugal

253
00:10:48,000 --> 00:10:51,920
68 of users validate with rsa 1024 and

254
00:10:51,920 --> 00:10:55,040
when i use two keys in rsa4096

255
00:10:55,040 --> 00:10:58,480
that drops by a phenomenal 28 percent

256
00:10:58,480 --> 00:10:59,440
uh

257
00:10:59,440 --> 00:11:01,519
uh you can read the rest too

258
00:11:01,519 --> 00:11:04,240
but you know that's just by country yeah

259
00:11:04,240 --> 00:11:05,600
okay

260
00:11:05,600 --> 00:11:08,399
here are a few isps where the recursive

261
00:11:08,399 --> 00:11:10,880
resolver inside that isp is really

262
00:11:10,880 --> 00:11:15,120
having problem uh p4u mts in poland uh

263
00:11:15,120 --> 00:11:18,079
is a massive drop er common island again

264
00:11:18,079 --> 00:11:19,120
massive

265
00:11:19,120 --> 00:11:21,040
but you can read that as as much as

266
00:11:21,040 --> 00:11:23,760
anyone else uh i do have larger lists on

267
00:11:23,760 --> 00:11:27,040
request but you know yes this does seem

268
00:11:27,040 --> 00:11:30,399
to be an issue with some isp resolvers

269
00:11:30,399 --> 00:11:32,079
just not handling it

270
00:11:32,079 --> 00:11:35,279
jeff you've got so many of your q a

271
00:11:35,279 --> 00:11:36,720
yeah i'm just coming into the end now

272
00:11:36,720 --> 00:11:39,360
does rsa4096 have a future

273
00:11:39,360 --> 00:11:41,279
yeah

274
00:11:41,279 --> 00:11:43,440
maybe we should be looking at something

275
00:11:43,440 --> 00:11:44,320
else

276
00:11:44,320 --> 00:11:46,959
because i think it's also unwarranted

277
00:11:46,959 --> 00:11:48,800
you only need to keep a secret for the

278
00:11:48,800 --> 00:11:51,839
lifetime of your keys in dns set as long

279
00:11:51,839 --> 00:11:55,200
as you roll your keys frequently then

280
00:11:55,200 --> 00:11:57,040
you don't need to have long security

281
00:11:57,040 --> 00:11:58,320
lifetimes

282
00:11:58,320 --> 00:12:01,360
now rsa1024 can't do 10 years that's

283
00:12:01,360 --> 00:12:02,160
true

284
00:12:02,160 --> 00:12:03,680
but it can certainly do a couple of

285
00:12:03,680 --> 00:12:07,600
months even six months and for dns sec

286
00:12:07,600 --> 00:12:11,279
that's long enough so all this idea that

287
00:12:11,279 --> 00:12:13,680
i need to get nest level 20 gear

288
00:12:13,680 --> 00:12:16,160
security for dns sec is actually

289
00:12:16,160 --> 00:12:19,600
misdirection it isn't valid for this

290
00:12:19,600 --> 00:12:21,360
application

291
00:12:21,360 --> 00:12:22,560
the other thing is with quantum

292
00:12:22,560 --> 00:12:24,240
computing you also have to understand a

293
00:12:24,240 --> 00:12:26,560
different concept dimly understood

294
00:12:26,560 --> 00:12:28,399
called quantum resilience

295
00:12:28,399 --> 00:12:30,079
rsa is thought to be more quantum

296
00:12:30,079 --> 00:12:33,760
resilient than ecdsa even though ecdsa

297
00:12:33,760 --> 00:12:36,480
is much more compact

298
00:12:36,480 --> 00:12:39,200
but if you're worried about that uh

299
00:12:39,200 --> 00:12:40,399
jeez i would thought there are more

300
00:12:40,399 --> 00:12:42,800
things to worry about than that anyway

301
00:12:42,800 --> 00:12:44,399
we have enough time for some questions

302
00:12:44,399 --> 00:12:46,160
now so i'll hand it back thank you very

303
00:12:46,160 --> 00:12:48,480
much

304
00:12:48,560 --> 00:12:49,760
thank you jeff

305
00:12:49,760 --> 00:12:53,600
that was a really interesting talk and

306
00:12:53,600 --> 00:12:56,000
please everybody write your questions in

307
00:12:56,000 --> 00:12:57,519
the q a pod

308
00:12:57,519 --> 00:13:00,000
and if you want to speak up raise your

309
00:13:00,000 --> 00:13:01,440
hand and we

310
00:13:01,440 --> 00:13:03,360
give give you the microphone

311
00:13:03,360 --> 00:13:06,360
and

312
00:13:06,399 --> 00:13:07,680
oh we have a

313
00:13:07,680 --> 00:13:10,160
we have a command

314
00:13:10,160 --> 00:13:11,360
here

315
00:13:11,360 --> 00:13:15,279
uh from greg trolls and it says command

316
00:13:15,279 --> 00:13:17,920
not a question large dns responses may

317
00:13:17,920 --> 00:13:20,320
be broken because dns network and

318
00:13:20,320 --> 00:13:22,399
security people are not working together

319
00:13:22,399 --> 00:13:24,720
to make sure it works every time

320
00:13:24,720 --> 00:13:26,639
experience shows that network people

321
00:13:26,639 --> 00:13:29,040
tend to use ping to validate

322
00:13:29,040 --> 00:13:32,240
pmtu and dns works most of the time so

323
00:13:32,240 --> 00:13:34,880
it's okay right

324
00:13:34,880 --> 00:13:36,880
yeah i know what you're saying but the

325
00:13:36,880 --> 00:13:39,440
big threshold is 1500 octets which is

326
00:13:39,440 --> 00:13:42,079
the typical mtu of the public internet

327
00:13:42,079 --> 00:13:43,839
and my question is

328
00:13:43,839 --> 00:13:48,000
why when we move from 1700 which is big

329
00:13:48,000 --> 00:13:49,920
and it's over fifteen hundred to twenty

330
00:13:49,920 --> 00:13:51,199
two hundred

331
00:13:51,199 --> 00:13:53,839
which is still just big it's more than

332
00:13:53,839 --> 00:13:56,240
fifteen hundred so the real thing is so

333
00:13:56,240 --> 00:13:57,199
what

334
00:13:57,199 --> 00:13:58,800
they should be the same

335
00:13:58,800 --> 00:14:00,399
but they're not

336
00:14:00,399 --> 00:14:02,880
and it's that issue that kind of gets me

337
00:14:02,880 --> 00:14:04,720
because i don't understand why there's

338
00:14:04,720 --> 00:14:07,279
differentiation between those two values

339
00:14:07,279 --> 00:14:08,959
that's the bit that i don't understand

340
00:14:08,959 --> 00:14:12,560
there's something in the middle here

341
00:14:13,760 --> 00:14:15,920
but my guess is from the lack of comment

342
00:14:15,920 --> 00:14:18,959
nobody here is either willing to own up

343
00:14:18,959 --> 00:14:21,519
or understands what's in the middle of

344
00:14:21,519 --> 00:14:23,839
the mess that we call a resolver in

345
00:14:23,839 --> 00:14:25,760
today's rather complex dns

346
00:14:25,760 --> 00:14:27,040
infrastructure

347
00:14:27,040 --> 00:14:28,959
this mess of load balancing and front

348
00:14:28,959 --> 00:14:31,199
ends and you know pre-processing of

349
00:14:31,199 --> 00:14:34,560
queries and pre-caching probably causes

350
00:14:34,560 --> 00:14:37,680
a huge amount of hidden side effects

351
00:14:37,680 --> 00:14:39,760
with larger packets that are just not

352
00:14:39,760 --> 00:14:41,120
well handled

353
00:14:41,120 --> 00:14:43,120
and we only stress it out when we

354
00:14:43,120 --> 00:14:45,920
actually push the response size up into

355
00:14:45,920 --> 00:14:48,560
that space that is not normal

356
00:14:48,560 --> 00:14:50,399
so you know

357
00:14:50,399 --> 00:14:54,480
bcdsa everyone stay on the safe side

358
00:14:54,480 --> 00:14:55,839
yes so

359
00:14:55,839 --> 00:14:56,560
i

360
00:14:56,560 --> 00:14:58,639
would like to remind everybody please

361
00:14:58,639 --> 00:15:00,800
answer the poll that is up should be up

362
00:15:00,800 --> 00:15:02,800
on your screen right now

363
00:15:02,800 --> 00:15:05,440
and we have another question here from

364
00:15:05,440 --> 00:15:06,959
peter thomason

365
00:15:06,959 --> 00:15:09,040
in your ad net study how did you

366
00:15:09,040 --> 00:15:11,360
distinguish failed validation from other

367
00:15:11,360 --> 00:15:14,240
error conditions

368
00:15:14,399 --> 00:15:17,040
failed validation i can actually see

369
00:15:17,040 --> 00:15:19,920
because we use a particular form of

370
00:15:19,920 --> 00:15:21,199
query name

371
00:15:21,199 --> 00:15:24,160
where i can see both dns key and ds key

372
00:15:24,160 --> 00:15:27,600
queries because they're uniquely named

373
00:15:27,600 --> 00:15:29,519
caching won't work

374
00:15:29,519 --> 00:15:33,519
so i'm actually looking for the ds dns

375
00:15:33,519 --> 00:15:34,320
key

376
00:15:34,320 --> 00:15:37,519
and quad a queries down at that sort of

377
00:15:37,519 --> 00:15:40,240
bottom two labels to actually understand

378
00:15:40,240 --> 00:15:42,240
that someone is trying to validate

379
00:15:42,240 --> 00:15:43,360
they're not trying to validate they

380
00:15:43,360 --> 00:15:45,920
won't ask for dnsd and ds key i've

381
00:15:45,920 --> 00:15:48,720
certain ds records so that's why i know

382
00:15:48,720 --> 00:15:49,920
they're trying

383
00:15:49,920 --> 00:15:52,079
and i actually give them two parallel

384
00:15:52,079 --> 00:15:55,040
problems to solve one is validly signed

385
00:15:55,040 --> 00:15:57,759
one is invalidly signed i should see the

386
00:15:57,759 --> 00:16:01,680
ds and dns key for both names

387
00:16:01,680 --> 00:16:03,279
but i should never see a fetch of the

388
00:16:03,279 --> 00:16:05,360
one that's invalidly signed because that

389
00:16:05,360 --> 00:16:07,680
will always deliver serve fail so that's

390
00:16:07,680 --> 00:16:10,000
the way i do the distinguishing

391
00:16:10,000 --> 00:16:11,279
yes there's a certain amount of

392
00:16:11,279 --> 00:16:13,279
experimental error in this

393
00:16:13,279 --> 00:16:15,440
because the link between dns and web

394
00:16:15,440 --> 00:16:18,079
fetching has a certain drop rate but

395
00:16:18,079 --> 00:16:19,839
that's the best you can do in this kind

396
00:16:19,839 --> 00:16:20,639
of

397
00:16:20,639 --> 00:16:22,959
server based experiment where i can't

398
00:16:22,959 --> 00:16:25,839
instrument the client

399
00:16:29,519 --> 00:16:32,560
okay and then we have a question from la

400
00:16:32,560 --> 00:16:35,600
tour la tour

401
00:16:35,600 --> 00:16:38,079
not awake yet but it's uh anyone

402
00:16:38,079 --> 00:16:40,399
thinking of writing a paper to state the

403
00:16:40,399 --> 00:16:43,120
quantum resilience of dns rotating keys

404
00:16:43,120 --> 00:16:44,240
monthly

405
00:16:44,240 --> 00:16:46,320
either is good enough for the next

406
00:16:46,320 --> 00:16:49,360
couple of years at least

407
00:16:49,360 --> 00:16:51,360
well that that's the kind of conclusion

408
00:16:51,360 --> 00:16:54,079
and i must admit i keep on hearing from

409
00:16:54,079 --> 00:16:56,240
some of the security folk oh you can't

410
00:16:56,240 --> 00:16:59,920
use 1024 rsa1024 and dns it's just not

411
00:16:59,920 --> 00:17:02,720
secure says nist i'm sort of going

412
00:17:02,720 --> 00:17:05,839
you're looking for 20-year protection

413
00:17:05,839 --> 00:17:07,599
but when you're rolling your keys every

414
00:17:07,599 --> 00:17:11,439
six months or one year that's irrelevant

415
00:17:11,439 --> 00:17:14,559
because this key only has if you will

416
00:17:14,559 --> 00:17:16,799
a lifetime of vulnerability when the

417
00:17:16,799 --> 00:17:19,839
parent is busy saying this is valid

418
00:17:19,839 --> 00:17:22,000
because once the parent key rolls all

419
00:17:22,000 --> 00:17:24,079
that old keying information doesn't

420
00:17:24,079 --> 00:17:28,000
matter anymore dns sec doesn't encrypt

421
00:17:28,000 --> 00:17:30,640
it merely protects authenticity

422
00:17:30,640 --> 00:17:32,400
and so this whole argument which is

423
00:17:32,400 --> 00:17:35,440
around dane that all we can't use dnsec

424
00:17:35,440 --> 00:17:37,360
with rsa 1024

425
00:17:37,360 --> 00:17:39,440
is actually just specious ignorant

426
00:17:39,440 --> 00:17:40,880
nonsense

427
00:17:40,880 --> 00:17:43,360
understand the nature of the way dnsec

428
00:17:43,360 --> 00:17:45,760
works and understand the reason why

429
00:17:45,760 --> 00:17:47,919
we're using cryptography will give you

430
00:17:47,919 --> 00:17:50,400
much better guidance on key sizes

431
00:17:50,400 --> 00:17:52,400
you don't need to protect the

432
00:17:52,400 --> 00:17:54,559
cryptography you're protecting

433
00:17:54,559 --> 00:17:57,039
authenticity for the duration of the key

434
00:17:57,039 --> 00:18:01,480
lifetime they're different concepts

435
00:18:01,919 --> 00:18:02,880
okay

436
00:18:02,880 --> 00:18:05,600
we have another question jarl friedrich

437
00:18:05,600 --> 00:18:08,080
greipsland asked would it be useful to

438
00:18:08,080 --> 00:18:10,320
try and pinpoint exactly what udp

439
00:18:10,320 --> 00:18:12,320
package sizes causes steps in the

440
00:18:12,320 --> 00:18:15,120
successful validation rate

441
00:18:15,120 --> 00:18:16,240
he

442
00:18:16,240 --> 00:18:18,960
fine-tuned the key size in steps of one

443
00:18:18,960 --> 00:18:20,160
byte

444
00:18:20,160 --> 00:18:22,799
[Laughter]

445
00:18:22,799 --> 00:18:24,240
wow

446
00:18:24,240 --> 00:18:26,720
these are difficult experiments to set

447
00:18:26,720 --> 00:18:29,440
up um joao demas who's on this on this

448
00:18:29,440 --> 00:18:31,600
call has worked with me on this time he

449
00:18:31,600 --> 00:18:34,480
will attest the these are incredibly

450
00:18:34,480 --> 00:18:36,400
hard to set up they take us some months

451
00:18:36,400 --> 00:18:39,360
to get tuned and accurate to run for

452
00:18:39,360 --> 00:18:41,840
even a couple of weeks and stably uh

453
00:18:41,840 --> 00:18:43,280
there's a lot of work that goes on

454
00:18:43,280 --> 00:18:45,679
behind it the amount of work to try and

455
00:18:45,679 --> 00:18:48,480
get 100 million or 80 million queries

456
00:18:48,480 --> 00:18:51,280
for each one byte step i'm sorry this is

457
00:18:51,280 --> 00:18:53,280
not enough time you know in the day it

458
00:18:53,280 --> 00:18:55,679
just can't do that so

459
00:18:55,679 --> 00:18:58,000
you know no i'm sorry just just not a

460
00:18:58,000 --> 00:19:00,000
feasible approach

461
00:19:00,000 --> 00:19:01,840
but you're welcome to try please you

462
00:19:01,840 --> 00:19:04,720
know be my guest

463
00:19:06,720 --> 00:19:09,120
okay and then we have a question from

464
00:19:09,120 --> 00:19:12,240
magnus sandberg and he asked i think

465
00:19:12,240 --> 00:19:15,280
darwin will sort this out when dns uses

466
00:19:15,280 --> 00:19:18,160
more tcp and modern transport methods

467
00:19:18,160 --> 00:19:20,640
failing firewalls or dsl modems will be

468
00:19:20,640 --> 00:19:21,919
replaced

469
00:19:21,919 --> 00:19:24,400
i agree they can't

470
00:19:24,400 --> 00:19:27,039
do as much as we can darwin will do the

471
00:19:27,039 --> 00:19:28,799
rest for us

472
00:19:28,799 --> 00:19:30,880
unfortunately if you might remember

473
00:19:30,880 --> 00:19:32,880
peter spacex uh

474
00:19:32,880 --> 00:19:36,160
oh our contribution one or two acts ago

475
00:19:36,160 --> 00:19:39,039
we suggest that even simple tcp

476
00:19:39,039 --> 00:19:42,080
adds a a penalty where the throughput

477
00:19:42,080 --> 00:19:44,320
drops by 30

478
00:19:44,320 --> 00:19:46,400
the whole issue is that the dns is an

479
00:19:46,400 --> 00:19:50,320
economic nightmare it is a failed market

480
00:19:50,320 --> 00:19:52,480
almost 70 percent of users

481
00:19:52,480 --> 00:19:55,360
use their isps resolver and from the

482
00:19:55,360 --> 00:19:58,320
isp's perspective the dns is a cost

483
00:19:58,320 --> 00:20:00,880
center not a revenue raiser

484
00:20:00,880 --> 00:20:02,720
there is no

485
00:20:02,720 --> 00:20:05,760
no economic interest in dns over tcp

486
00:20:05,760 --> 00:20:08,000
magnus so unfortunately while it sounds

487
00:20:08,000 --> 00:20:09,440
great

488
00:20:09,440 --> 00:20:12,159
the incentive to use it out there in

489
00:20:12,159 --> 00:20:15,520
people spending money land is zero we

490
00:20:15,520 --> 00:20:18,640
are stuck with udp we have cemented it

491
00:20:18,640 --> 00:20:20,640
and bolted it down which is really

492
00:20:20,640 --> 00:20:21,840
depressing

493
00:20:21,840 --> 00:20:24,960
but quite frankly isps don't care

494
00:20:24,960 --> 00:20:27,120
you don't choose your isp because the

495
00:20:27,120 --> 00:20:29,440
gold-plated wonderful version of the dns

496
00:20:29,440 --> 00:20:31,760
resolver they're running for you

497
00:20:31,760 --> 00:20:32,799
god no

498
00:20:32,799 --> 00:20:34,480
so they run crap

499
00:20:34,480 --> 00:20:36,720
because you'll still be their customer

500
00:20:36,720 --> 00:20:40,080
and you'll still pay the money so no dns

501
00:20:40,080 --> 00:20:43,039
over tcp is a distraction

502
00:20:43,039 --> 00:20:44,480
unfortunately

503
00:20:44,480 --> 00:20:46,960
in geekland it might sound great but it

504
00:20:46,960 --> 00:20:48,720
just ain't gonna happen

505
00:20:48,720 --> 00:20:51,200
it's gonna take forever to get there if

506
00:20:51,200 --> 00:20:52,720
we get there at all

507
00:20:52,720 --> 00:20:55,679
well that's my personal opinion anyway

508
00:20:55,679 --> 00:20:58,400
one of many

509
00:20:59,360 --> 00:21:01,919
good thank you jeff i think with that we

510
00:21:01,919 --> 00:21:04,159
have come to the last question and uh

511
00:21:04,159 --> 00:21:05,600
we're right on time

512
00:21:05,600 --> 00:21:08,000
so it's a pleasure thank you very much

513
00:21:08,000 --> 00:21:09,520
thank you

514
00:21:09,520 --> 00:21:11,679
and uh

515
00:21:11,679 --> 00:21:15,039
so uh we go right on to our next speaker

516
00:21:15,039 --> 00:21:17,679
james richards is talking about an

517
00:21:17,679 --> 00:21:19,840
analysis of the nsx sign domains

518
00:21:19,840 --> 00:21:21,919
appearing within a large web cross data

519
00:21:21,919 --> 00:21:22,720
set

520
00:21:22,720 --> 00:21:26,400
james please start sharing your slides

521
00:21:26,400 --> 00:21:28,640
yes i can see your slides

522
00:21:28,640 --> 00:21:31,039
can you hear me okay and i can hear you

523
00:21:31,039 --> 00:21:32,960
please go ahead

524
00:21:32,960 --> 00:21:35,200
uh so hello everybody um my name is

525
00:21:35,200 --> 00:21:37,919
james richards i work as a researcher at

526
00:21:37,919 --> 00:21:39,919
nominet here in the uk

527
00:21:39,919 --> 00:21:41,200
i normally do

528
00:21:41,200 --> 00:21:43,280
dns threat intelligence for nominex

529
00:21:43,280 --> 00:21:45,200
customers but i'm talking today about a

530
00:21:45,200 --> 00:21:46,559
personal project i've been working on

531
00:21:46,559 --> 00:21:48,000
for a couple of months

532
00:21:48,000 --> 00:21:50,320
to study um dns set deployment within

533
00:21:50,320 --> 00:21:53,679
the common crawl data set

534
00:21:53,679 --> 00:21:56,000
so um what is it that i'm studying here

535
00:21:56,000 --> 00:21:56,720
so

536
00:21:56,720 --> 00:21:59,360
many dns set deployment studies focus on

537
00:21:59,360 --> 00:22:01,360
lists of domains such as those occurring

538
00:22:01,360 --> 00:22:03,280
in a tld perhaps

539
00:22:03,280 --> 00:22:05,120
i often see the results range you know

540
00:22:05,120 --> 00:22:07,039
somewhere in the in the low figures five

541
00:22:07,039 --> 00:22:09,840
to ten percent maybe dns sec deployment

542
00:22:09,840 --> 00:22:12,640
however if we consider the web users are

543
00:22:12,640 --> 00:22:14,000
rarely delivered

544
00:22:14,000 --> 00:22:15,679
all the website content from one single

545
00:22:15,679 --> 00:22:17,679
domain name often multiple domains are

546
00:22:17,679 --> 00:22:19,679
utilized so if we have a look here on

547
00:22:19,679 --> 00:22:21,200
the right this is our corporate website

548
00:22:21,200 --> 00:22:23,520
nominee.uk

549
00:22:23,520 --> 00:22:24,559
but there's actually quite a lot of

550
00:22:24,559 --> 00:22:26,480
domains used to deliver content from

551
00:22:26,480 --> 00:22:28,400
other places images or scripts or

552
00:22:28,400 --> 00:22:30,400
analytics et cetera

553
00:22:30,400 --> 00:22:31,120
so

554
00:22:31,120 --> 00:22:33,120
the question i've been asking myself is

555
00:22:33,120 --> 00:22:35,200
how do the dns sec prevailance

556
00:22:35,200 --> 00:22:36,880
statistics change

557
00:22:36,880 --> 00:22:38,400
when you include all of these other

558
00:22:38,400 --> 00:22:40,799
domains and how interesting you know

559
00:22:40,799 --> 00:22:42,799
what interesting methods could we use to

560
00:22:42,799 --> 00:22:46,080
to quantify it i guess

561
00:22:46,080 --> 00:22:47,440
so separately

562
00:22:47,440 --> 00:22:50,640
i uh came across the common cruel data

563
00:22:50,640 --> 00:22:51,440
set

564
00:22:51,440 --> 00:22:52,960
a while a while back and i've been

565
00:22:52,960 --> 00:22:54,159
meaning to make use of it in an

566
00:22:54,159 --> 00:22:55,760
interesting fashion it's a

567
00:22:55,760 --> 00:22:58,960
free-to-access data set hosted in s3 and

568
00:22:58,960 --> 00:23:00,480
it's got data going back quite a long

569
00:23:00,480 --> 00:23:02,320
time many years

570
00:23:02,320 --> 00:23:04,799
i did my study in october november of

571
00:23:04,799 --> 00:23:06,000
this year

572
00:23:06,000 --> 00:23:07,280
using the

573
00:23:07,280 --> 00:23:09,919
july august common crawl data

574
00:23:09,919 --> 00:23:11,840
and it comes in a few different formats

575
00:23:11,840 --> 00:23:14,480
so the raw web crawl data comes in a

576
00:23:14,480 --> 00:23:15,760
walk format

577
00:23:15,760 --> 00:23:17,919
and this is essentially the uh the raw

578
00:23:17,919 --> 00:23:20,080
web script data from their crawler

579
00:23:20,080 --> 00:23:22,080
but i've been working with the wac data

580
00:23:22,080 --> 00:23:25,200
which is um basically computed metadata

581
00:23:25,200 --> 00:23:26,799
in json format

582
00:23:26,799 --> 00:23:28,159
so what you can see there on the right

583
00:23:28,159 --> 00:23:29,280
is that each

584
00:23:29,280 --> 00:23:31,200
resource is basically associated with a

585
00:23:31,200 --> 00:23:33,200
json element so you can see there's a

586
00:23:33,200 --> 00:23:35,840
there's a style tag and some css that

587
00:23:35,840 --> 00:23:38,320
would be used in the web page to load

588
00:23:38,320 --> 00:23:40,080
you know whatever formatting you have on

589
00:23:40,080 --> 00:23:42,320
that style tag from that

590
00:23:42,320 --> 00:23:44,400
that resource so we can extract domain

591
00:23:44,400 --> 00:23:46,000
names from this quite easily and do some

592
00:23:46,000 --> 00:23:47,520
interesting work

593
00:23:47,520 --> 00:23:49,039
i found it quite interesting and useful

594
00:23:49,039 --> 00:23:50,480
data set to work with because it's been

595
00:23:50,480 --> 00:23:51,919
it's been put together really really

596
00:23:51,919 --> 00:23:54,320
nicely

597
00:23:55,200 --> 00:23:56,960
so what i'm trying to do here is analyze

598
00:23:56,960 --> 00:23:58,720
domains that are used to deliver content

599
00:23:58,720 --> 00:24:01,520
to a website

600
00:24:01,600 --> 00:24:02,880
this is obviously going to require some

601
00:24:02,880 --> 00:24:04,559
judgment and you know we could probably

602
00:24:04,559 --> 00:24:06,960
debate what is in his content but i've

603
00:24:06,960 --> 00:24:08,159
kind of gone down the line of thinking

604
00:24:08,159 --> 00:24:09,679
that a hyperlink is an example of a

605
00:24:09,679 --> 00:24:11,760
domain that appears within a web page

606
00:24:11,760 --> 00:24:13,919
but it doesn't necessarily get resolved

607
00:24:13,919 --> 00:24:16,080
at the load time with intent to deliver

608
00:24:16,080 --> 00:24:18,559
content like an image for instance i was

609
00:24:18,559 --> 00:24:19,919
in comparison a domain that's used to

610
00:24:19,919 --> 00:24:22,240
load images is itself a source of

611
00:24:22,240 --> 00:24:23,760
content for that web page it's being

612
00:24:23,760 --> 00:24:25,039
rendered

613
00:24:25,039 --> 00:24:26,559
so i've done my best to categorize these

614
00:24:26,559 --> 00:24:28,080
domains and i'd actually be quite

615
00:24:28,080 --> 00:24:29,279
interested in hearing from the audience

616
00:24:29,279 --> 00:24:30,640
if anybody else has tried to do this and

617
00:24:30,640 --> 00:24:32,960
had success with it i'm going to define

618
00:24:32,960 --> 00:24:34,320
two types of domain for this

619
00:24:34,320 --> 00:24:35,520
presentation

620
00:24:35,520 --> 00:24:37,520
uh the primary domain which i'm going to

621
00:24:37,520 --> 00:24:38,960
say that's what users type into their

622
00:24:38,960 --> 00:24:40,480
search bar at the top so in this

623
00:24:40,480 --> 00:24:42,480
instance nominate.uk

624
00:24:42,480 --> 00:24:44,400
i'm going to define content domains as

625
00:24:44,400 --> 00:24:46,559
being those which you use to load stuff

626
00:24:46,559 --> 00:24:47,919
that we see

627
00:24:47,919 --> 00:24:51,039
whether that be images scripts you know

628
00:24:51,039 --> 00:24:52,480
all manner of odd and wonderful things

629
00:24:52,480 --> 00:24:53,600
that web developers put in their

630
00:24:53,600 --> 00:24:55,520
websites um

631
00:24:55,520 --> 00:24:57,039
basically things that are used to

632
00:24:57,039 --> 00:25:00,760
actually create the page

633
00:25:01,360 --> 00:25:03,520
so how have i done this um

634
00:25:03,520 --> 00:25:04,559
well there are lots of different types

635
00:25:04,559 --> 00:25:06,799
of html tag and you know i didn't have

636
00:25:06,799 --> 00:25:08,000
time to learn about all of them

637
00:25:08,000 --> 00:25:10,240
unfortunately as much as i'd like to

638
00:25:10,240 --> 00:25:11,919
because being a dns person and not a web

639
00:25:11,919 --> 00:25:13,840
developer i wanted to find a way to

640
00:25:13,840 --> 00:25:16,000
scale this out quickly so i've been

641
00:25:16,000 --> 00:25:20,159
using the mozilla mdn elements library

642
00:25:20,159 --> 00:25:22,000
so essentially this allows you to

643
00:25:22,000 --> 00:25:24,080
categorize each tag into it into a broad

644
00:25:24,080 --> 00:25:25,840
category and then i've been using those

645
00:25:25,840 --> 00:25:28,400
categories to extract what i believe is

646
00:25:28,400 --> 00:25:31,120
related to content so you know scripts

647
00:25:31,120 --> 00:25:34,159
multimedia that type of thing

648
00:25:34,159 --> 00:25:35,520
i'm thinking in this way i can more

649
00:25:35,520 --> 00:25:36,960
easily determine which domains i should

650
00:25:36,960 --> 00:25:38,799
include in my study

651
00:25:38,799 --> 00:25:40,960
um but there is a lot of odd stuff as

652
00:25:40,960 --> 00:25:42,480
you as i'm sure you'd expect working

653
00:25:42,480 --> 00:25:45,360
with um internet scraped data and

654
00:25:45,360 --> 00:25:47,200
there's a lot of esoteric tags kind of

655
00:25:47,200 --> 00:25:49,120
niche website content you know i found

656
00:25:49,120 --> 00:25:50,880
some augmented reality frames which i've

657
00:25:50,880 --> 00:25:53,039
never seen before which were pretty cool

658
00:25:53,039 --> 00:25:54,400
there's a lot of websites with a high

659
00:25:54,400 --> 00:25:56,559
number of unique domains um there's a

660
00:25:56,559 --> 00:25:58,240
whole variety of reasons this is the

661
00:25:58,240 --> 00:26:00,720
case but they do exist out there

662
00:26:00,720 --> 00:26:02,000
they popped out quite quickly when i was

663
00:26:02,000 --> 00:26:03,760
doing the analysis

664
00:26:03,760 --> 00:26:05,840
we see domains that don't resolve

665
00:26:05,840 --> 00:26:07,039
and obviously we see a difference

666
00:26:07,039 --> 00:26:09,520
sometimes between what's been crawled

667
00:26:09,520 --> 00:26:11,760
from a automated machine versus what

668
00:26:11,760 --> 00:26:13,279
would be rendered from a real browser

669
00:26:13,279 --> 00:26:15,039
with a real pair of human eyeballs on it

670
00:26:15,039 --> 00:26:15,760
so

671
00:26:15,760 --> 00:26:16,880
these are just challenges we have to

672
00:26:16,880 --> 00:26:18,320
live with for the study but i've tried

673
00:26:18,320 --> 00:26:20,240
to make some assumptions that remove

674
00:26:20,240 --> 00:26:22,320
that variability

675
00:26:22,320 --> 00:26:23,520
so

676
00:26:23,520 --> 00:26:26,240
the data i worked with comprised of 72

677
00:26:26,240 --> 00:26:29,440
000 files nearly 22 terabytes of data so

678
00:26:29,440 --> 00:26:31,440
it is a big data set and there's a lot

679
00:26:31,440 --> 00:26:33,760
of these discrete data sets of that size

680
00:26:33,760 --> 00:26:35,200
on this platform which is which is good

681
00:26:35,200 --> 00:26:36,400
to work with

682
00:26:36,400 --> 00:26:38,640
i pro i processed them in batches of 48

683
00:26:38,640 --> 00:26:41,039
over a period of a few weeks

684
00:26:41,039 --> 00:26:43,520
i began by iterating through each file

685
00:26:43,520 --> 00:26:45,279
and selecting those domains below and i

686
00:26:45,279 --> 00:26:46,640
can suffix

687
00:26:46,640 --> 00:26:49,039
and at the root directory of a website

688
00:26:49,039 --> 00:26:50,480
um so there's a lot of websites

689
00:26:50,480 --> 00:26:52,720
presented at a sub domain level or on a

690
00:26:52,720 --> 00:26:54,720
specific path maybe like a specific blog

691
00:26:54,720 --> 00:26:56,559
article for instance um i didn't want to

692
00:26:56,559 --> 00:26:57,840
double count

693
00:26:57,840 --> 00:26:58,880
so i'm hoping that this kind of

694
00:26:58,880 --> 00:27:00,720
normalization step i'm doing it two and

695
00:27:00,720 --> 00:27:01,600
three

696
00:27:01,600 --> 00:27:04,880
allows me to compare apples with apples

697
00:27:04,880 --> 00:27:06,799
for each website that passed those tests

698
00:27:06,799 --> 00:27:07,840
i

699
00:27:07,840 --> 00:27:09,440
um looked at the primary domain with the

700
00:27:09,440 --> 00:27:11,120
dns set bit set see if there's a

701
00:27:11,120 --> 00:27:12,559
signature present

702
00:27:12,559 --> 00:27:14,880
i then analyzed all the tags and the

703
00:27:14,880 --> 00:27:18,080
hype links uh within the um the content

704
00:27:18,080 --> 00:27:19,760
of the website itself and look those up

705
00:27:19,760 --> 00:27:23,600
with the dns sec bit set as well

706
00:27:23,600 --> 00:27:25,840
um i then threw away any of the content

707
00:27:25,840 --> 00:27:27,360
that wasn't required so any of those

708
00:27:27,360 --> 00:27:30,159
kind of you know inline text elements

709
00:27:30,159 --> 00:27:33,440
that wouldn't be associated with content

710
00:27:33,440 --> 00:27:34,720
and then i assumed anything that came

711
00:27:34,720 --> 00:27:36,320
off of a relative references from the

712
00:27:36,320 --> 00:27:37,520
primary domain so you can see if their

713
00:27:37,520 --> 00:27:39,279
slash picture would have been an example

714
00:27:39,279 --> 00:27:41,120
of coming off the primary domain as a

715
00:27:41,120 --> 00:27:43,440
relative reference

716
00:27:43,440 --> 00:27:44,880
so this provided me a data set as

717
00:27:44,880 --> 00:27:46,720
follows so you basically have rows of

718
00:27:46,720 --> 00:27:50,320
data that are for unique tag and content

719
00:27:50,320 --> 00:27:52,240
domain pairs so

720
00:27:52,240 --> 00:27:54,000
we've got information

721
00:27:54,000 --> 00:27:55,520
uh such as the primary domain whether

722
00:27:55,520 --> 00:27:58,559
it's signed with dns sec or not um which

723
00:27:58,559 --> 00:28:02,960
class of element that html tag came from

724
00:28:02,960 --> 00:28:04,880
what domain name was being used to load

725
00:28:04,880 --> 00:28:06,960
that element and then some dns second

726
00:28:06,960 --> 00:28:08,799
information about that

727
00:28:08,799 --> 00:28:10,720
content domain as well

728
00:28:10,720 --> 00:28:12,000
so you can imagine the data set i

729
00:28:12,000 --> 00:28:14,000
derived was basically millions of rows

730
00:28:14,000 --> 00:28:15,360
for lots of different websites to look a

731
00:28:15,360 --> 00:28:16,880
bit like this

732
00:28:16,880 --> 00:28:18,799
um i threw away any rows of data for

733
00:28:18,799 --> 00:28:21,440
domains that didn't resolve or had nx

734
00:28:21,440 --> 00:28:23,760
domain or serve fail um it didn't make a

735
00:28:23,760 --> 00:28:25,360
lot of sense to me to include those but

736
00:28:25,360 --> 00:28:26,880
i suppose we could probably debate

737
00:28:26,880 --> 00:28:28,240
whether they should have been included

738
00:28:28,240 --> 00:28:29,840
but this is kind of what i was working

739
00:28:29,840 --> 00:28:32,000
with to derive a lot of my results

740
00:28:32,000 --> 00:28:35,210
[Music]

741
00:28:36,000 --> 00:28:37,760
so here are some high level statistics

742
00:28:37,760 --> 00:28:38,799
so

743
00:28:38,799 --> 00:28:41,039
in total i analyzed 13 and a half

744
00:28:41,039 --> 00:28:43,120
million domains across over a thousand

745
00:28:43,120 --> 00:28:44,399
tlds

746
00:28:44,399 --> 00:28:46,960
a majority of the data was in com org

747
00:28:46,960 --> 00:28:49,120
net and cctlds

748
00:28:49,120 --> 00:28:52,240
there was a small amount in gtlds

749
00:28:52,240 --> 00:28:54,399
within each of these websites in total i

750
00:28:54,399 --> 00:28:57,120
found 16 million content domains so 16

751
00:28:57,120 --> 00:28:59,360
million domains used to deliver images

752
00:28:59,360 --> 00:29:00,640
or scripts

753
00:29:00,640 --> 00:29:02,399
similar things to that

754
00:29:02,399 --> 00:29:05,600
um 7.7 of the websites of the primary

755
00:29:05,600 --> 00:29:08,000
domains were signed this kind of aligns

756
00:29:08,000 --> 00:29:09,679
with other studies i've seen so i

757
00:29:09,679 --> 00:29:10,799
thought that was a good result because

758
00:29:10,799 --> 00:29:12,159
it hopefully means i'm on the right line

759
00:29:12,159 --> 00:29:13,679
here

760
00:29:13,679 --> 00:29:15,440
of those domains that were signed we see

761
00:29:15,440 --> 00:29:17,520
a split in the algorithm between

762
00:29:17,520 --> 00:29:19,600
13 and 8 which again i think is is

763
00:29:19,600 --> 00:29:20,799
largely a good thing i think those are

764
00:29:20,799 --> 00:29:22,480
the most popular algorithms that i'm

765
00:29:22,480 --> 00:29:23,760
unfamiliar with

766
00:29:23,760 --> 00:29:24,720
um

767
00:29:24,720 --> 00:29:26,559
so hopefully that that kind of validates

768
00:29:26,559 --> 00:29:27,919
some of the collection techniques i was

769
00:29:27,919 --> 00:29:30,880
using here were working as i expected

770
00:29:30,880 --> 00:29:31,600
um

771
00:29:31,600 --> 00:29:32,960
the graph on the right here is quite

772
00:29:32,960 --> 00:29:35,039
interesting it shows how many content

773
00:29:35,039 --> 00:29:36,080
domains

774
00:29:36,080 --> 00:29:38,240
there were per website or per primary

775
00:29:38,240 --> 00:29:41,120
domain i guess um so the majority of the

776
00:29:41,120 --> 00:29:42,720
websites we looked at had five or less

777
00:29:42,720 --> 00:29:44,799
content domains so five or less domains

778
00:29:44,799 --> 00:29:46,720
used to load images or scripts for

779
00:29:46,720 --> 00:29:48,159
instance

780
00:29:48,159 --> 00:29:49,360
there were a very small number of

781
00:29:49,360 --> 00:29:52,080
domains that had thousands of sources

782
00:29:52,080 --> 00:29:52,799
and

783
00:29:52,799 --> 00:29:54,159
they're quite fun to go and look at why

784
00:29:54,159 --> 00:29:56,000
they're there but they were few and far

785
00:29:56,000 --> 00:29:58,080
between by far the majority of the

786
00:29:58,080 --> 00:29:59,840
websites had had a kind of smallish

787
00:29:59,840 --> 00:30:02,559
number of domains

788
00:30:03,440 --> 00:30:04,880
and this is the answer i really wanted

789
00:30:04,880 --> 00:30:06,960
to get to in my study so if we split if

790
00:30:06,960 --> 00:30:09,039
we split the results into

791
00:30:09,039 --> 00:30:10,799
categories we can see how it breaks down

792
00:30:10,799 --> 00:30:13,360
so 78.2 percent of the websites had no

793
00:30:13,360 --> 00:30:15,760
dns set at all so not on the primary

794
00:30:15,760 --> 00:30:18,799
domain and not in any of the content

795
00:30:18,799 --> 00:30:20,960
14.1 percent of the websites weren't

796
00:30:20,960 --> 00:30:23,520
signed that had at least one piece of

797
00:30:23,520 --> 00:30:25,760
signed content

798
00:30:25,760 --> 00:30:28,080
if we move over to the top right

799
00:30:28,080 --> 00:30:30,480
6.1 of the websites were signed a

800
00:30:30,480 --> 00:30:32,480
primary domain level

801
00:30:32,480 --> 00:30:34,640
but had at least one piece of content

802
00:30:34,640 --> 00:30:36,960
that wasn't signed

803
00:30:36,960 --> 00:30:38,720
and then the kind of um

804
00:30:38,720 --> 00:30:40,399
the perfect example down in the bottom

805
00:30:40,399 --> 00:30:43,039
right there where the website itself was

806
00:30:43,039 --> 00:30:45,039
signed and all of the content that was

807
00:30:45,039 --> 00:30:46,640
being loaded

808
00:30:46,640 --> 00:30:50,559
1.6 of websites uh were

809
00:30:50,559 --> 00:30:52,640
in that category so we've got quite

810
00:30:52,640 --> 00:30:54,080
different numbers on the page here it

811
00:30:54,080 --> 00:30:55,720
could be anything from

812
00:30:55,720 --> 00:30:57,279
21.8

813
00:30:57,279 --> 00:30:59,840
which is if there's some dns sec present

814
00:30:59,840 --> 00:31:01,200
anywhere

815
00:31:01,200 --> 00:31:03,039
all the way down to 1.6

816
00:31:03,039 --> 00:31:05,679
if it's completely dns sex secure

817
00:31:05,679 --> 00:31:06,960
and obviously there's that middle number

818
00:31:06,960 --> 00:31:09,760
there 7.7 if we just look at the

819
00:31:09,760 --> 00:31:12,159
list of websites that we scanned

820
00:31:12,159 --> 00:31:14,159
so really this gives us quite a lot of

821
00:31:14,159 --> 00:31:15,840
different perspectives on on how we

822
00:31:15,840 --> 00:31:17,279
could measure it or what's most

823
00:31:17,279 --> 00:31:19,039
meaningful to people and i found it

824
00:31:19,039 --> 00:31:20,399
interesting that

825
00:31:20,399 --> 00:31:22,240
the number of websites that dns sec

826
00:31:22,240 --> 00:31:24,880
impacts on in some way is three times

827
00:31:24,880 --> 00:31:26,640
higher than the

828
00:31:26,640 --> 00:31:28,320
rate of signed primary domains would

829
00:31:28,320 --> 00:31:29,919
necessarily give you from just

830
00:31:29,919 --> 00:31:32,720
evaluating a list of tlds for instance

831
00:31:32,720 --> 00:31:34,559
so it might affect how we think about

832
00:31:34,559 --> 00:31:36,559
risk or other or other features of the

833
00:31:36,559 --> 00:31:39,039
protocol

834
00:31:40,320 --> 00:31:43,360
so how much of a website was signed

835
00:31:43,360 --> 00:31:44,559
so this could be measured in lots of

836
00:31:44,559 --> 00:31:46,399
different ways right how many kilobytes

837
00:31:46,399 --> 00:31:48,000
of data were delivered to users with

838
00:31:48,000 --> 00:31:49,840
signed domains or how many unique

839
00:31:49,840 --> 00:31:52,880
domains or screen real estate may be but

840
00:31:52,880 --> 00:31:54,240
um these are probably topics for a

841
00:31:54,240 --> 00:31:55,840
future study what i've done here is just

842
00:31:55,840 --> 00:31:57,360
present the data that i've i've

843
00:31:57,360 --> 00:32:00,000
discussed on previous slides for those

844
00:32:00,000 --> 00:32:02,480
unsigned websites so unsigned primary

845
00:32:02,480 --> 00:32:03,919
domains

846
00:32:03,919 --> 00:32:06,240
that have some dns sec in them it's

847
00:32:06,240 --> 00:32:08,080
normally not very much dns sec so you

848
00:32:08,080 --> 00:32:10,880
can see all there almost 100 of the

849
00:32:10,880 --> 00:32:12,799
data in the blue category is inhabiting

850
00:32:12,799 --> 00:32:15,440
the lowest bin on the graph there so if

851
00:32:15,440 --> 00:32:17,039
you've signed your website if you've if

852
00:32:17,039 --> 00:32:19,039
you if you're using an unsigned website

853
00:32:19,039 --> 00:32:20,640
domain and you've got one one or two

854
00:32:20,640 --> 00:32:22,159
bits of content in there that's that's

855
00:32:22,159 --> 00:32:23,360
where you'll be in that in that bottom

856
00:32:23,360 --> 00:32:24,480
bin

857
00:32:24,480 --> 00:32:26,960
if we look at websites that are signed

858
00:32:26,960 --> 00:32:28,880
at the primary domain

859
00:32:28,880 --> 00:32:30,559
you're much more likely to get more

860
00:32:30,559 --> 00:32:32,559
content signed

861
00:32:32,559 --> 00:32:35,440
uh from other dns sex sources or indeed

862
00:32:35,440 --> 00:32:37,440
from the primary domain itself so you

863
00:32:37,440 --> 00:32:38,960
can see here on the on the right with

864
00:32:38,960 --> 00:32:40,399
the orange

865
00:32:40,399 --> 00:32:41,440
chart

866
00:32:41,440 --> 00:32:42,640
quite a lot of the websites that were

867
00:32:42,640 --> 00:32:44,559
signed actually are fully signed with

868
00:32:44,559 --> 00:32:45,840
all of the content being delivered from

869
00:32:45,840 --> 00:32:48,559
dns source domains um so really getting

870
00:32:48,559 --> 00:32:50,480
that primary domain signed so that all

871
00:32:50,480 --> 00:32:52,799
your relative references delivered from

872
00:32:52,799 --> 00:32:57,559
dns secure sources is quite important

873
00:32:59,200 --> 00:33:01,200
so in this figure i've broken down the

874
00:33:01,200 --> 00:33:03,120
signed rate per

875
00:33:03,120 --> 00:33:05,600
mozilla mdn category

876
00:33:05,600 --> 00:33:06,799
so you can see how varied the different

877
00:33:06,799 --> 00:33:08,559
categories are with some types of

878
00:33:08,559 --> 00:33:10,320
content quite unlikely to be delivered

879
00:33:10,320 --> 00:33:12,080
from dns sex sources and other types of

880
00:33:12,080 --> 00:33:14,559
content much more likely to be

881
00:33:14,559 --> 00:33:16,320
note that the graph starts at 80 so

882
00:33:16,320 --> 00:33:17,840
we're still talking at quite small

883
00:33:17,840 --> 00:33:19,360
numbers here

884
00:33:19,360 --> 00:33:20,880
um i've not analyzed this view of the

885
00:33:20,880 --> 00:33:22,399
data in lots of detail there's quite a

886
00:33:22,399 --> 00:33:24,399
lot going on here but i've been through

887
00:33:24,399 --> 00:33:25,919
and pulled out some anecdotes about

888
00:33:25,919 --> 00:33:27,519
different um domains within each

889
00:33:27,519 --> 00:33:28,640
category

890
00:33:28,640 --> 00:33:30,399
so if we look on the right hand side we

891
00:33:30,399 --> 00:33:33,279
can see obsolete and deprecated elements

892
00:33:33,279 --> 00:33:35,120
now i would have imagined that obsolete

893
00:33:35,120 --> 00:33:36,559
web page components wouldn't have been

894
00:33:36,559 --> 00:33:37,519
signed maybe they're kind of

895
00:33:37,519 --> 00:33:39,039
old-fashioned and

896
00:33:39,039 --> 00:33:40,559
weren't being looked after but actually

897
00:33:40,559 --> 00:33:42,240
they're the most likely to have a dns

898
00:33:42,240 --> 00:33:45,039
sex signature out of all of them

899
00:33:45,039 --> 00:33:46,960
um i think this is occurring because

900
00:33:46,960 --> 00:33:49,760
there's various um features like

901
00:33:49,760 --> 00:33:51,919
parked pages so there's one tld in

902
00:33:51,919 --> 00:33:53,279
particular which has quite a lot of

903
00:33:53,279 --> 00:33:54,799
parked pages

904
00:33:54,799 --> 00:33:56,480
and within their template they have a

905
00:33:56,480 --> 00:33:58,880
frame with a signed domain inside to

906
00:33:58,880 --> 00:34:01,200
deliver content with inside that frame

907
00:34:01,200 --> 00:34:03,120
and the frame object was removed from

908
00:34:03,120 --> 00:34:05,279
html5 which is why it's considered

909
00:34:05,279 --> 00:34:06,399
obsolete

910
00:34:06,399 --> 00:34:07,360
so i think that has quite a

911
00:34:07,360 --> 00:34:09,359
disproportionate impact on that category

912
00:34:09,359 --> 00:34:11,040
because there's obviously a lot of those

913
00:34:11,040 --> 00:34:14,480
part pages that were being scanned

914
00:34:14,480 --> 00:34:16,480
similarly if we look at scripts

915
00:34:16,480 --> 00:34:18,239
there are a couple of cdns that are very

916
00:34:18,239 --> 00:34:20,000
popular that are used to deliver scripts

917
00:34:20,000 --> 00:34:22,639
to website templates that people use

918
00:34:22,639 --> 00:34:24,079
and i think disproportionately that's

919
00:34:24,079 --> 00:34:26,239
had a positive effect on

920
00:34:26,239 --> 00:34:28,879
the impact of script delivery in in web

921
00:34:28,879 --> 00:34:31,760
in the websites that we've scanned

922
00:34:31,760 --> 00:34:33,839
so if we look conversely over at the

923
00:34:33,839 --> 00:34:36,320
left hand side you can see that embedded

924
00:34:36,320 --> 00:34:38,960
content is the the least represented in

925
00:34:38,960 --> 00:34:40,879
the dns sec um

926
00:34:40,879 --> 00:34:42,800
charts here

927
00:34:42,800 --> 00:34:44,159
i've been through some of these domains

928
00:34:44,159 --> 00:34:45,520
in this category and a lot of them look

929
00:34:45,520 --> 00:34:47,359
like kind of trackers or analytic

930
00:34:47,359 --> 00:34:49,119
systems that might tell you what users

931
00:34:49,119 --> 00:34:51,119
are visiting your website and a lot of

932
00:34:51,119 --> 00:34:52,560
those domains don't look like they're

933
00:34:52,560 --> 00:34:53,520
signed

934
00:34:53,520 --> 00:34:54,879
um which again disproportionately

935
00:34:54,879 --> 00:34:56,239
affects this category because those

936
00:34:56,239 --> 00:34:58,160
domains are seen all over the internet

937
00:34:58,160 --> 00:34:59,359
and therefore you're going to get quite

938
00:34:59,359 --> 00:35:01,920
a lot of that content affecting this um

939
00:35:01,920 --> 00:35:04,880
statistical outcome

940
00:35:05,200 --> 00:35:07,599
so it's a kind of similar story with the

941
00:35:07,599 --> 00:35:09,520
algorithms so we can break down the

942
00:35:09,520 --> 00:35:11,440
algorithms per

943
00:35:11,440 --> 00:35:12,560
category because we collected that

944
00:35:12,560 --> 00:35:14,160
information

945
00:35:14,160 --> 00:35:15,599
it's a bit less varied than the previous

946
00:35:15,599 --> 00:35:17,520
graph but again we do see some some

947
00:35:17,520 --> 00:35:20,000
differences um

948
00:35:20,000 --> 00:35:22,000
i suspect that again this is driven by a

949
00:35:22,000 --> 00:35:24,000
lot of those um

950
00:35:24,000 --> 00:35:26,079
commonly seen domains that are deployed

951
00:35:26,079 --> 00:35:27,520
across multiple websites in kind of

952
00:35:27,520 --> 00:35:29,119
template fashion

953
00:35:29,119 --> 00:35:31,599
um but nonetheless we do see quite a lot

954
00:35:31,599 --> 00:35:33,440
of algorithm 1813 which is kind of

955
00:35:33,440 --> 00:35:35,040
similar to the results we saw earlier

956
00:35:35,040 --> 00:35:36,400
which again i think is expected because

957
00:35:36,400 --> 00:35:37,920
these are the most um

958
00:35:37,920 --> 00:35:39,920
popular domains uh sorry popular signing

959
00:35:39,920 --> 00:35:44,359
algorithms that i'm unaware of

960
00:35:46,079 --> 00:35:48,880
so on the topic of common domains um

961
00:35:48,880 --> 00:35:50,560
it's not a surprise that we see the same

962
00:35:50,560 --> 00:35:52,800
domain used across multiple websites you

963
00:35:52,800 --> 00:35:54,160
know it makes a lot of sense that

964
00:35:54,160 --> 00:35:56,079
developers would do that they use common

965
00:35:56,079 --> 00:35:58,640
supply chains and common cdns allows

966
00:35:58,640 --> 00:36:00,960
them to scale their websites quickly

967
00:36:00,960 --> 00:36:03,200
within the data set the top 10 common

968
00:36:03,200 --> 00:36:07,040
domains are seen within 68 of websites

969
00:36:07,040 --> 00:36:08,560
so that's that's quite a high number

970
00:36:08,560 --> 00:36:09,520
it's much higher than i actually

971
00:36:09,520 --> 00:36:10,560
expected

972
00:36:10,560 --> 00:36:12,720
and of those top 10 domains only one of

973
00:36:12,720 --> 00:36:14,720
them is actually signed

974
00:36:14,720 --> 00:36:17,040
so these are mostly populous

975
00:36:17,040 --> 00:36:18,800
james you've got five minutes till your

976
00:36:18,800 --> 00:36:21,200
q a brilliant thank you

977
00:36:21,200 --> 00:36:23,119
um

978
00:36:23,119 --> 00:36:24,640
most of these kind of popular cdns

979
00:36:24,640 --> 00:36:27,280
analytics and other services um i'm not

980
00:36:27,280 --> 00:36:28,560
going to comment on whether these should

981
00:36:28,560 --> 00:36:30,160
be signed or not you know each company

982
00:36:30,160 --> 00:36:31,359
has its own

983
00:36:31,359 --> 00:36:32,960
business drivers or their own reasons

984
00:36:32,960 --> 00:36:34,880
for deploying domains as they see fit

985
00:36:34,880 --> 00:36:36,560
depending on their infrastructure so

986
00:36:36,560 --> 00:36:38,160
i've obfuscated the domains because i'm

987
00:36:38,160 --> 00:36:39,839
not really interested in individual

988
00:36:39,839 --> 00:36:41,359
cases i'm more interested in the kind of

989
00:36:41,359 --> 00:36:43,440
trend and the behavior but you can see

990
00:36:43,440 --> 00:36:45,200
there that the what this view of the

991
00:36:45,200 --> 00:36:47,119
data is basically telling me

992
00:36:47,119 --> 00:36:49,520
is that um

993
00:36:49,520 --> 00:36:51,760
as you move from the left image

994
00:36:51,760 --> 00:36:54,400
where the primary domain isn't signed

995
00:36:54,400 --> 00:36:56,000
to the right image where all of the

996
00:36:56,000 --> 00:36:57,520
domains are signed and all the content

997
00:36:57,520 --> 00:36:59,119
is signed as well this is going to be

998
00:36:59,119 --> 00:37:01,119
heavily influenced by i think these

999
00:37:01,119 --> 00:37:03,200
commonly seen domains

1000
00:37:03,200 --> 00:37:04,720
it may be a struggle for some website

1001
00:37:04,720 --> 00:37:06,240
owners to actually reach that right hand

1002
00:37:06,240 --> 00:37:08,240
side if they're relying on a lot of

1003
00:37:08,240 --> 00:37:09,520
these common tools they may not

1004
00:37:09,520 --> 00:37:11,359
necessarily have the choice of dns sex

1005
00:37:11,359 --> 00:37:13,839
sign domains to provide this content

1006
00:37:13,839 --> 00:37:15,200
if there's a lot of inertia in the

1007
00:37:15,200 --> 00:37:18,400
industry to use certain tools or certain

1008
00:37:18,400 --> 00:37:22,599
classes of application

1009
00:37:24,240 --> 00:37:26,400
so

1010
00:37:26,400 --> 00:37:27,920
something slightly different that i

1011
00:37:27,920 --> 00:37:29,760
didn't use the common cruel data set for

1012
00:37:29,760 --> 00:37:31,839
was redirect analysis

1013
00:37:31,839 --> 00:37:33,440
so i was kind of interested in how many

1014
00:37:33,440 --> 00:37:35,520
domains how many websites redirect from

1015
00:37:35,520 --> 00:37:38,240
signed to unsigned domains so for

1016
00:37:38,240 --> 00:37:39,680
instance i could navigate to a website

1017
00:37:39,680 --> 00:37:41,599
and i might receive a 301 redirect to

1018
00:37:41,599 --> 00:37:42,800
another domain

1019
00:37:42,800 --> 00:37:44,240
the question i wanted to answer was how

1020
00:37:44,240 --> 00:37:46,079
often are those redirects

1021
00:37:46,079 --> 00:37:48,240
to unsigned domains

1022
00:37:48,240 --> 00:37:50,400
so i did a rudimentary study using the

1023
00:37:50,400 --> 00:37:52,240
python requests library so i basically

1024
00:37:52,240 --> 00:37:54,640
asked it to follow all of the redirects

1025
00:37:54,640 --> 00:37:57,280
in a chain for all of the signed domains

1026
00:37:57,280 --> 00:37:58,960
that were crawled

1027
00:37:58,960 --> 00:38:00,640
i then took that list of redirects and

1028
00:38:00,640 --> 00:38:02,320
checked whether all of them were signed

1029
00:38:02,320 --> 00:38:05,040
and then extracted those that uh where

1030
00:38:05,040 --> 00:38:06,720
there was a break in the in the chain of

1031
00:38:06,720 --> 00:38:09,680
redirects between um dns signed domains

1032
00:38:09,680 --> 00:38:11,680
i was only able to analyze 75 of the

1033
00:38:11,680 --> 00:38:13,359
data because to be honest i ran out of

1034
00:38:13,359 --> 00:38:14,960
time i would have liked to got to 100

1035
00:38:14,960 --> 00:38:18,400
but i'm hoping 75 gives us a good idea

1036
00:38:18,400 --> 00:38:21,440
i found that less than 0.1 of the

1037
00:38:21,440 --> 00:38:24,079
signed websites redirected to unsigned

1038
00:38:24,079 --> 00:38:25,040
domains

1039
00:38:25,040 --> 00:38:27,359
uh which is much better than i expected

1040
00:38:27,359 --> 00:38:28,880
um i don't know why i was expecting it

1041
00:38:28,880 --> 00:38:30,960
to be worse but i i i thought this might

1042
00:38:30,960 --> 00:38:32,960
be a kind of a gotcha but it turns out

1043
00:38:32,960 --> 00:38:35,280
not to be it's actually quite good

1044
00:38:35,280 --> 00:38:37,520
statistically

1045
00:38:37,520 --> 00:38:38,960
um i think there's probably more work to

1046
00:38:38,960 --> 00:38:40,480
do here around redirects and the

1047
00:38:40,480 --> 00:38:42,720
interaction between that and dns section

1048
00:38:42,720 --> 00:38:45,440
domains particularly content domains so

1049
00:38:45,440 --> 00:38:47,119
some of the statistics i presented

1050
00:38:47,119 --> 00:38:49,280
earlier we're talking about

1051
00:38:49,280 --> 00:38:52,160
you know prevalence of certain um

1052
00:38:52,160 --> 00:38:53,920
types of content within websites i

1053
00:38:53,920 --> 00:38:54,960
didn't obviously do the redirect

1054
00:38:54,960 --> 00:38:56,880
analysis on those so maybe we should do

1055
00:38:56,880 --> 00:39:00,760
that next time around as well

1056
00:39:02,079 --> 00:39:04,480
so in conclusion

1057
00:39:04,480 --> 00:39:05,760
what is it that we actually want to

1058
00:39:05,760 --> 00:39:06,800
measure

1059
00:39:06,800 --> 00:39:09,359
so if we're concerned about any dns sec

1060
00:39:09,359 --> 00:39:11,920
at all being present within a website

1061
00:39:11,920 --> 00:39:13,680
the deployment statistics could be as

1062
00:39:13,680 --> 00:39:16,000
high as 21.8

1063
00:39:16,000 --> 00:39:18,160
now that's a much much higher number

1064
00:39:18,160 --> 00:39:20,880
than 7.7 which is just the raw list of

1065
00:39:20,880 --> 00:39:23,440
domains from the tlds that we um we

1066
00:39:23,440 --> 00:39:25,280
measured

1067
00:39:25,280 --> 00:39:27,280
but obviously this includes any dns

1068
00:39:27,280 --> 00:39:29,200
section content no matter how small or

1069
00:39:29,200 --> 00:39:31,599
insignificant however if we want to be

1070
00:39:31,599 --> 00:39:34,240
purist and sign every domain for every

1071
00:39:34,240 --> 00:39:35,839
piece of content that's loaded on my web

1072
00:39:35,839 --> 00:39:36,640
page

1073
00:39:36,640 --> 00:39:39,760
it could be as low as 1.58

1074
00:39:39,760 --> 00:39:41,280
now that's obviously much much less than

1075
00:39:41,280 --> 00:39:44,240
7.7 so that's maybe a bit of a unhappy

1076
00:39:44,240 --> 00:39:45,920
or worrying number

1077
00:39:45,920 --> 00:39:47,359
neither of these numbers are necessarily

1078
00:39:47,359 --> 00:39:49,599
right or wrong but i would be interested

1079
00:39:49,599 --> 00:39:50,960
in the opinions of the audience as to

1080
00:39:50,960 --> 00:39:52,720
which number is more meaningful to you

1081
00:39:52,720 --> 00:39:53,920
do you care more about the number on the

1082
00:39:53,920 --> 00:39:54,960
left or do you care more about the

1083
00:39:54,960 --> 00:39:57,359
number on the right i'm sort of in two

1084
00:39:57,359 --> 00:39:59,680
minds about it really

1085
00:39:59,680 --> 00:40:01,520
the positive news is that

1086
00:40:01,520 --> 00:40:03,040
i saw

1087
00:40:03,040 --> 00:40:05,599
websites rarely redirecting from

1088
00:40:05,599 --> 00:40:08,720
signed to unsigned domains which is good

1089
00:40:08,720 --> 00:40:10,880
but unsurprisingly uh

1090
00:40:10,880 --> 00:40:12,480
a small number of popular domains were

1091
00:40:12,480 --> 00:40:14,560
seen in lots of different websites and

1092
00:40:14,560 --> 00:40:16,640
only one of those was signed

1093
00:40:16,640 --> 00:40:18,000
so i've been kind of thinking since i

1094
00:40:18,000 --> 00:40:19,760
completed some of these statistics like

1095
00:40:19,760 --> 00:40:21,760
to what extent does a website owner

1096
00:40:21,760 --> 00:40:24,400
actually have control over their dns set

1097
00:40:24,400 --> 00:40:25,520
posture

1098
00:40:25,520 --> 00:40:27,200
so if you're a large enterprise that's

1099
00:40:27,200 --> 00:40:30,079
running your own cdn or hosting all of

1100
00:40:30,079 --> 00:40:31,920
the infrastructure you use off of

1101
00:40:31,920 --> 00:40:33,839
domains that you can control

1102
00:40:33,839 --> 00:40:36,240
you could possibly get to 100 if you're

1103
00:40:36,240 --> 00:40:38,160
if you're driven to do that if it's

1104
00:40:38,160 --> 00:40:39,440
appropriate if you want to for your

1105
00:40:39,440 --> 00:40:41,119
business model

1106
00:40:41,119 --> 00:40:42,560
if you're a smaller

1107
00:40:42,560 --> 00:40:44,319
outfit um or if you're building your own

1108
00:40:44,319 --> 00:40:45,680
personal websites you might rely on

1109
00:40:45,680 --> 00:40:47,680
common supply chains to do that

1110
00:40:47,680 --> 00:40:49,760
certainly i do when i build websites i i

1111
00:40:49,760 --> 00:40:50,960
rely on all those tools that are out

1112
00:40:50,960 --> 00:40:52,240
there i might not necessarily have a

1113
00:40:52,240 --> 00:40:54,000
choice of using dns sex sign domains for

1114
00:40:54,000 --> 00:40:56,720
a lot of those tools

1115
00:40:57,520 --> 00:40:58,960
if we did the study again there's lots

1116
00:40:58,960 --> 00:41:00,240
that we could improve perhaps use

1117
00:41:00,240 --> 00:41:02,000
headless browsers maybe scan from user

1118
00:41:02,000 --> 00:41:05,280
endpoints i would couple the dns and web

1119
00:41:05,280 --> 00:41:06,720
data collection much more closely

1120
00:41:06,720 --> 00:41:07,839
together there was a bit of a lag

1121
00:41:07,839 --> 00:41:09,680
between those two because of how i was

1122
00:41:09,680 --> 00:41:10,720
doing it

1123
00:41:10,720 --> 00:41:12,720
um and i'd probably build a more robust

1124
00:41:12,720 --> 00:41:15,200
html tag dictionary just to more

1125
00:41:15,200 --> 00:41:16,480
accurately measure some of this stuff

1126
00:41:16,480 --> 00:41:18,560
but i think the results i got certainly

1127
00:41:18,560 --> 00:41:19,920
answered my initial question and i was

1128
00:41:19,920 --> 00:41:22,640
quite happy with that um so i'd be happy

1129
00:41:22,640 --> 00:41:25,040
to answer any questions you have

1130
00:41:25,040 --> 00:41:28,560
okay thank you james um

1131
00:41:28,800 --> 00:41:29,599
well

1132
00:41:29,599 --> 00:41:32,000
a very large study it must have taken

1133
00:41:32,000 --> 00:41:34,400
some time actually

1134
00:41:34,400 --> 00:41:37,760
yes i think i i had a a 48 core machine

1135
00:41:37,760 --> 00:41:40,319
running in aws for about three and a

1136
00:41:40,319 --> 00:41:43,119
half weeks or so

1137
00:41:45,280 --> 00:41:47,440
yes so we we already have some questions

1138
00:41:47,440 --> 00:41:48,720
here and

1139
00:41:48,720 --> 00:41:51,359
maybe comments we see here

1140
00:41:51,359 --> 00:41:54,079
you have a question from hadel smiths if

1141
00:41:54,079 --> 00:41:56,640
i understood correctly

1142
00:41:56,640 --> 00:42:00,000
and the polls coming so

1143
00:42:00,000 --> 00:42:03,359
please everybody answer the polls and i

1144
00:42:03,359 --> 00:42:05,359
read the question here

1145
00:42:05,359 --> 00:42:07,359
if i understand correctly this data set

1146
00:42:07,359 --> 00:42:10,160
is based on approximately 30 million

1147
00:42:10,160 --> 00:42:14,160
domains how do these uptake percentages

1148
00:42:14,160 --> 00:42:17,280
compare to those for popular domains

1149
00:42:17,280 --> 00:42:18,880
i'm sure but the reality

1150
00:42:18,880 --> 00:42:21,200
most relevant metric would be here is

1151
00:42:21,200 --> 00:42:24,640
alexa top 500 still relevant

1152
00:42:24,640 --> 00:42:26,560
that is a really good question um i was

1153
00:42:26,560 --> 00:42:28,640
considering comparing these statistics

1154
00:42:28,640 --> 00:42:29,359
to

1155
00:42:29,359 --> 00:42:31,119
something like tranco you're right or

1156
00:42:31,119 --> 00:42:33,440
open dns or alexa um i didn't get around

1157
00:42:33,440 --> 00:42:35,040
to it so i don't have the numbers off

1158
00:42:35,040 --> 00:42:37,359
the top of my head but um

1159
00:42:37,359 --> 00:42:39,280
normally when people do be in a sec

1160
00:42:39,280 --> 00:42:40,960
deployment studies i expect to see

1161
00:42:40,960 --> 00:42:42,400
something in the sort of five to ten

1162
00:42:42,400 --> 00:42:44,640
percent or five to fifteen percent range

1163
00:42:44,640 --> 00:42:46,560
so i wouldn't be surprised if if those

1164
00:42:46,560 --> 00:42:48,400
numbers came out similar or maybe

1165
00:42:48,400 --> 00:42:50,640
slightly lower but um yeah that's that's

1166
00:42:50,640 --> 00:42:54,000
a question we should we should look at

1167
00:42:54,160 --> 00:42:55,920
and then we have a command from magnus

1168
00:42:55,920 --> 00:42:57,440
sunberg

1169
00:42:57,440 --> 00:42:59,440
comment on redirects i guess a lot of

1170
00:42:59,440 --> 00:43:00,800
redirects are within the same

1171
00:43:00,800 --> 00:43:03,200
organization if you sign one domain you

1172
00:43:03,200 --> 00:43:06,000
sign all your domains

1173
00:43:06,000 --> 00:43:08,640
yeah absolutely and i think

1174
00:43:08,640 --> 00:43:10,079
one of the things i enjoyed about this

1175
00:43:10,079 --> 00:43:11,359
study is that i went in with some

1176
00:43:11,359 --> 00:43:12,720
assumptions and they were challenged

1177
00:43:12,720 --> 00:43:14,720
quite heavily by the results i saw so i

1178
00:43:14,720 --> 00:43:16,400
think the comment that i put on that

1179
00:43:16,400 --> 00:43:17,920
slide about there being more work to do

1180
00:43:17,920 --> 00:43:19,680
around the redirects and the interaction

1181
00:43:19,680 --> 00:43:21,040
i think you're completely right that

1182
00:43:21,040 --> 00:43:23,040
definitely needs more more detailed

1183
00:43:23,040 --> 00:43:24,400
examination

1184
00:43:24,400 --> 00:43:25,520
um

1185
00:43:25,520 --> 00:43:27,040
certainly sometimes when you you've got

1186
00:43:27,040 --> 00:43:28,160
a

1187
00:43:28,160 --> 00:43:30,560
a complicated situation it deserves a

1188
00:43:30,560 --> 00:43:33,119
little bit more um you know fine grain

1189
00:43:33,119 --> 00:43:34,640
analysis so that might be something i

1190
00:43:34,640 --> 00:43:36,240
can do on on the next round if i if i

1191
00:43:36,240 --> 00:43:38,880
get a chance to do it again

1192
00:43:38,880 --> 00:43:41,440
okay and people i i we're closing the q

1193
00:43:41,440 --> 00:43:42,480
a line

1194
00:43:42,480 --> 00:43:44,880
and uh but if you have more questions

1195
00:43:44,880 --> 00:43:46,560
write them in the chat i think james

1196
00:43:46,560 --> 00:43:48,720
will answer them and with that we go to

1197
00:43:48,720 --> 00:43:51,119
peter lexis he has a question please

1198
00:43:51,119 --> 00:43:54,640
peter you can ask a question

1199
00:43:54,640 --> 00:43:56,720
yeah thank you uh thank you james for uh

1200
00:43:56,720 --> 00:43:58,319
for this it's pretty cool so you

1201
00:43:58,319 --> 00:44:00,240
mentioned both the redirects and did you

1202
00:44:00,240 --> 00:44:03,119
look for rr6 on the a record did you

1203
00:44:03,119 --> 00:44:05,280
also check if the dns exchange was valid

1204
00:44:05,280 --> 00:44:08,240
if there were c names involved

1205
00:44:08,240 --> 00:44:09,760
yeah so that's a good question so i did

1206
00:44:09,760 --> 00:44:11,599
a quite because i wanted to analyze a

1207
00:44:11,599 --> 00:44:13,280
large amount of data in a small amount

1208
00:44:13,280 --> 00:44:15,599
of time i basically just looked up with

1209
00:44:15,599 --> 00:44:18,480
the dns sec bit set on an a record

1210
00:44:18,480 --> 00:44:20,800
um so there are situations you write

1211
00:44:20,800 --> 00:44:22,880
where you know c names would compress

1212
00:44:22,880 --> 00:44:24,960
down into one response for that type of

1213
00:44:24,960 --> 00:44:27,040
query and i didn't i didn't analyze that

1214
00:44:27,040 --> 00:44:28,640
in detail i just accepted that single

1215
00:44:28,640 --> 00:44:30,640
response back from the resolver

1216
00:44:30,640 --> 00:44:32,960
so um yeah there's definitely

1217
00:44:32,960 --> 00:44:34,880
um some expansion we could do on the

1218
00:44:34,880 --> 00:44:37,119
results there but i think my

1219
00:44:37,119 --> 00:44:38,720
i wanted to just take an initial stab at

1220
00:44:38,720 --> 00:44:40,240
this data set and kind of see what i got

1221
00:44:40,240 --> 00:44:42,000
out and these kind of suggestions are

1222
00:44:42,000 --> 00:44:43,760
the kind of things i'd like to

1223
00:44:43,760 --> 00:44:45,520
review next time around if i if i get a

1224
00:44:45,520 --> 00:44:47,280
chance to do it again right right so i

1225
00:44:47,280 --> 00:44:49,280
actually looked at the rr sig and not if

1226
00:44:49,280 --> 00:44:51,599
the ad bit was set on the

1227
00:44:51,599 --> 00:44:53,599
from the from the recursive to you

1228
00:44:53,599 --> 00:44:55,680
yes yeah so when i got a response back i

1229
00:44:55,680 --> 00:44:57,040
iterated through all the answers and

1230
00:44:57,040 --> 00:44:58,560
checked whether an a record was present

1231
00:44:58,560 --> 00:45:01,359
and whether an rr6 record was present

1232
00:45:01,359 --> 00:45:02,400
all right

1233
00:45:02,400 --> 00:45:05,040
thanks

1234
00:45:05,040 --> 00:45:07,200
okay and then we have another question

1235
00:45:07,200 --> 00:45:09,359
from la tour it would be interesting to

1236
00:45:09,359 --> 00:45:13,920
see how ipv6 is doing in that framework

1237
00:45:14,880 --> 00:45:16,560
yes yeah

1238
00:45:16,560 --> 00:45:18,640
yeah so i didn't scan for quad a records

1239
00:45:18,640 --> 00:45:20,240
so again that's another that's obviously

1240
00:45:20,240 --> 00:45:23,839
another um blind spot i guess um i think

1241
00:45:23,839 --> 00:45:25,680
my assumption here was that

1242
00:45:25,680 --> 00:45:28,000
um the a record would be a good proxy

1243
00:45:28,000 --> 00:45:29,839
for maybe some of these results but um

1244
00:45:29,839 --> 00:45:31,040
you're right

1245
00:45:31,040 --> 00:45:32,400
more results would be quite interesting

1246
00:45:32,400 --> 00:45:34,240
to compare between the two that might be

1247
00:45:34,240 --> 00:45:35,440
something i can ever look at next time

1248
00:45:35,440 --> 00:45:37,680
around

1249
00:45:40,079 --> 00:45:41,760
and then we have a question from peter

1250
00:45:41,760 --> 00:45:42,800
hessler

1251
00:45:42,800 --> 00:45:44,000
and

1252
00:45:44,000 --> 00:45:46,240
did you do any analysis on how many

1253
00:45:46,240 --> 00:45:48,480
partially signed pages would go fully

1254
00:45:48,480 --> 00:45:49,839
signed

1255
00:45:49,839 --> 00:45:52,240
if the 10 most popular content providers

1256
00:45:52,240 --> 00:45:54,880
were signed

1257
00:45:54,880 --> 00:45:57,680
no so that so i had grand plans for

1258
00:45:57,680 --> 00:45:59,520
doing all sorts of differential analysis

1259
00:45:59,520 --> 00:46:01,599
on that data set but it turned out to be

1260
00:46:01,599 --> 00:46:03,760
quite large and when you're doing lots

1261
00:46:03,760 --> 00:46:06,160
and lots of comparisons between

1262
00:46:06,160 --> 00:46:07,839
um

1263
00:46:07,839 --> 00:46:10,160
data sets you you know it basically i

1264
00:46:10,160 --> 00:46:11,760
kind of ran out of compute resources at

1265
00:46:11,760 --> 00:46:13,280
that point so i think

1266
00:46:13,280 --> 00:46:14,480
some of the

1267
00:46:14,480 --> 00:46:16,400
some of the more interesting questions i

1268
00:46:16,400 --> 00:46:17,760
think we need to design some kind of

1269
00:46:17,760 --> 00:46:20,160
analysis framework for because i think

1270
00:46:20,160 --> 00:46:21,760
certainly when you're loading 13 million

1271
00:46:21,760 --> 00:46:22,960
domains and all of their content

1272
00:46:22,960 --> 00:46:25,520
references into a into an object it does

1273
00:46:25,520 --> 00:46:27,440
become quite challenging so um the

1274
00:46:27,440 --> 00:46:28,880
answer is no but it is something i

1275
00:46:28,880 --> 00:46:31,359
really wanted to do and hopefully i'll

1276
00:46:31,359 --> 00:46:32,640
get the opportunity to do it if we can

1277
00:46:32,640 --> 00:46:34,640
design some way of computing you know

1278
00:46:34,640 --> 00:46:36,000
achieving it in a computer engine that

1279
00:46:36,000 --> 00:46:38,560
makes sense

1280
00:46:39,119 --> 00:46:40,480
good and then we come to the last

1281
00:46:40,480 --> 00:46:43,040
question arson stasic

1282
00:46:43,040 --> 00:46:45,440
asks how many sub-domains signed if the

1283
00:46:45,440 --> 00:46:48,640
parent domain is signed

1284
00:46:49,920 --> 00:46:52,000
how many sub-domains are signed so the

1285
00:46:52,000 --> 00:46:54,160
study i've done is based on

1286
00:46:54,160 --> 00:46:55,839
the domain name we saw within the web

1287
00:46:55,839 --> 00:46:57,520
page so of course

1288
00:46:57,520 --> 00:46:59,920
dns sec might be probably is present in

1289
00:46:59,920 --> 00:47:01,520
the vast majority of these domains at a

1290
00:47:01,520 --> 00:47:03,280
parent level certainly all the tlds are

1291
00:47:03,280 --> 00:47:04,160
signed

1292
00:47:04,160 --> 00:47:06,400
well nearly all the tlds are signed so

1293
00:47:06,400 --> 00:47:08,079
dns sec will play a role in all of those

1294
00:47:08,079 --> 00:47:09,839
different statistical outcomes but i was

1295
00:47:09,839 --> 00:47:11,280
only analyzing the

1296
00:47:11,280 --> 00:47:12,079
um

1297
00:47:12,079 --> 00:47:14,480
the actual domain as it was you know

1298
00:47:14,480 --> 00:47:16,480
with sub-domain or not as it was seen

1299
00:47:16,480 --> 00:47:17,920
within the web page

1300
00:47:17,920 --> 00:47:19,680
um so yeah i don't have any statistics

1301
00:47:19,680 --> 00:47:21,839
on on the interaction with the parent

1302
00:47:21,839 --> 00:47:24,480
zone i guess at this point

1303
00:47:24,480 --> 00:47:26,319
okay

1304
00:47:26,319 --> 00:47:30,079
okay and with that i say thank you james

1305
00:47:30,079 --> 00:47:32,319
certainly very interesting study

1306
00:47:32,319 --> 00:47:33,280
and

1307
00:47:33,280 --> 00:47:34,880
with that we have come to our first

1308
00:47:34,880 --> 00:47:36,559
break we have

1309
00:47:36,559 --> 00:47:39,920
we reconvene at 11 utc

1310
00:47:39,920 --> 00:47:40,800
and

1311
00:47:40,800 --> 00:47:43,359
hope to see you all back

1312
00:47:43,359 --> 00:47:46,880
good and that off to coffee

1313
00:47:48,559 --> 00:47:51,680
hello everybody welcome back

1314
00:47:51,680 --> 00:47:53,200
i hope you

1315
00:47:53,200 --> 00:47:55,599
used your break well and

1316
00:47:55,599 --> 00:47:58,480
we dive right in with peter thomason and

1317
00:47:58,480 --> 00:48:00,480
the statues update on authenticated

1318
00:48:00,480 --> 00:48:03,359
bootstrapping of the nsx delegations

1319
00:48:03,359 --> 00:48:05,599
please peter share your slides

1320
00:48:05,599 --> 00:48:07,839
yes

1321
00:48:08,400 --> 00:48:12,000
hello everybody can you see my slides

1322
00:48:12,000 --> 00:48:13,680
yes we can

1323
00:48:13,680 --> 00:48:15,040
see your slides and we can hear you

1324
00:48:15,040 --> 00:48:17,520
please go ahead peter good hi i'm peter

1325
00:48:17,520 --> 00:48:20,079
thomason from dcsec and secure systems

1326
00:48:20,079 --> 00:48:21,599
engineering i'm going to give a short

1327
00:48:21,599 --> 00:48:23,280
status update on our

1328
00:48:23,280 --> 00:48:24,960
internet draft for authenticated

1329
00:48:24,960 --> 00:48:27,440
bootstrapping of dnessic delegations

1330
00:48:27,440 --> 00:48:29,200
um i guess many of you have heard about

1331
00:48:29,200 --> 00:48:31,839
it so i'll keep it a bit more concise

1332
00:48:31,839 --> 00:48:35,280
than in previous presentations

1333
00:48:35,280 --> 00:48:36,640
um so for those who don't know what it

1334
00:48:36,640 --> 00:48:38,800
is yet um here's an overview

1335
00:48:38,800 --> 00:48:41,359
um if you enable dns for a delegation

1336
00:48:41,359 --> 00:48:43,040
you have to convey your ds records to

1337
00:48:43,040 --> 00:48:46,160
the parent and it's usually um not very

1338
00:48:46,160 --> 00:48:47,520
clear how to do that there's various

1339
00:48:47,520 --> 00:48:49,359
ways of doing it often involving the

1340
00:48:49,359 --> 00:48:50,880
registrant

1341
00:48:50,880 --> 00:48:52,400
and that

1342
00:48:52,400 --> 00:48:54,400
we think is one reason for the low

1343
00:48:54,400 --> 00:48:56,559
deployment rate of dns which is around

1344
00:48:56,559 --> 00:48:58,079
five six percent

1345
00:48:58,079 --> 00:48:59,359
on the ds

1346
00:48:59,359 --> 00:49:00,800
securing side

1347
00:49:00,800 --> 00:49:02,880
so um the draft that we have um provides

1348
00:49:02,880 --> 00:49:05,119
in-band authentication for um

1349
00:49:05,119 --> 00:49:07,280
bootstrapping a secured delegation to

1350
00:49:07,280 --> 00:49:09,440
publish a ds record for the first time

1351
00:49:09,440 --> 00:49:11,200
and if you have that authentication you

1352
00:49:11,200 --> 00:49:14,160
can automate the whole process and um

1353
00:49:14,160 --> 00:49:16,960
hopefully increase the prevalence of dns

1354
00:49:16,960 --> 00:49:18,240
delegations

1355
00:49:18,240 --> 00:49:20,160
the proposal is based on

1356
00:49:20,160 --> 00:49:22,480
cds and cdns key records at the child

1357
00:49:22,480 --> 00:49:24,400
apex so for example if you have

1358
00:49:24,400 --> 00:49:26,960
example.com you can publish next to the

1359
00:49:26,960 --> 00:49:30,480
soa record in the example.com zone cds

1360
00:49:30,480 --> 00:49:32,640
records and cdnsq records which

1361
00:49:32,640 --> 00:49:35,359
indicated the parent

1362
00:49:35,359 --> 00:49:37,760
um how to construct the ds record and

1363
00:49:37,760 --> 00:49:39,680
put in the dot com zone

1364
00:49:39,680 --> 00:49:42,160
and um the

1365
00:49:42,160 --> 00:49:43,280
process we're proposing is for the

1366
00:49:43,280 --> 00:49:44,880
parent to verify that the contents of

1367
00:49:44,880 --> 00:49:45,680
those

1368
00:49:45,680 --> 00:49:47,280
cds and cdsq records haven't been

1369
00:49:47,280 --> 00:49:48,559
tampered with

1370
00:49:48,559 --> 00:49:49,839
the verification happens through a trail

1371
00:49:49,839 --> 00:49:51,440
of trust to the dns separator that has

1372
00:49:51,440 --> 00:49:53,920
to be pre-existing um we use the

1373
00:49:53,920 --> 00:49:55,680
operator's name server domains for that

1374
00:49:55,680 --> 00:49:58,160
which are known from the ns record set

1375
00:49:58,160 --> 00:50:00,240
and so what's required is that you use

1376
00:50:00,240 --> 00:50:03,200
the nsx for the name server domains

1377
00:50:03,200 --> 00:50:05,359
um yeah so this is um something we've

1378
00:50:05,359 --> 00:50:07,760
proposed to the dns up working group of

1379
00:50:07,760 --> 00:50:10,880
the itf and let's see how it goes

1380
00:50:10,880 --> 00:50:12,400
um so here's a very quick overview how

1381
00:50:12,400 --> 00:50:14,640
it works um i said initially that you

1382
00:50:14,640 --> 00:50:16,800
need um to have this pre-established

1383
00:50:16,800 --> 00:50:18,800
chain of trust to do the signaling to

1384
00:50:18,800 --> 00:50:20,240
the parent so you need the signaling

1385
00:50:20,240 --> 00:50:21,599
mechanism

1386
00:50:21,599 --> 00:50:22,960
um it

1387
00:50:22,960 --> 00:50:24,640
has two general properties it allows

1388
00:50:24,640 --> 00:50:26,480
publishing arbitrary information about

1389
00:50:26,480 --> 00:50:28,720
zones they um you know the the dna

1390
00:50:28,720 --> 00:50:30,640
separator is authoritative for we will

1391
00:50:30,640 --> 00:50:32,640
use this for dns bootstrapping but the

1392
00:50:32,640 --> 00:50:34,880
mechanism could be used for something

1393
00:50:34,880 --> 00:50:36,640
something else in the future

1394
00:50:36,640 --> 00:50:38,720
and it's authenticated and can be done

1395
00:50:38,720 --> 00:50:41,359
on a per per-zone basis

1396
00:50:41,359 --> 00:50:43,119
it works by using the namespace under

1397
00:50:43,119 --> 00:50:45,520
each nameserver hostname so for example

1398
00:50:45,520 --> 00:50:49,839
one of our name services ns1.esec.io

1399
00:50:49,839 --> 00:50:50,800
and we

1400
00:50:50,800 --> 00:50:52,400
are proposing to reserve the underscore

1401
00:50:52,400 --> 00:50:55,680
dsof label and underneath that

1402
00:50:55,680 --> 00:50:57,119
you would have the signaling stuff going

1403
00:50:57,119 --> 00:50:58,559
on

1404
00:50:58,559 --> 00:51:01,280
as i said before it requires in sec

1405
00:51:01,280 --> 00:51:03,440
and yeah so you can make

1406
00:51:03,440 --> 00:51:05,520
announcements

1407
00:51:05,520 --> 00:51:08,160
over the dns sorry on the dns domains

1408
00:51:08,160 --> 00:51:09,359
that you host

1409
00:51:09,359 --> 00:51:11,200
by encoding those announcements in

1410
00:51:11,200 --> 00:51:13,680
sub-domains of the dsof

1411
00:51:13,680 --> 00:51:15,839
label

1412
00:51:15,839 --> 00:51:17,440
so um

1413
00:51:17,440 --> 00:51:19,119
here's how to do it

1414
00:51:19,119 --> 00:51:21,119
specifically for dynastic bootstrapping

1415
00:51:21,119 --> 00:51:22,880
we start with the cds and cd and sq

1416
00:51:22,880 --> 00:51:24,720
records at the apex of the target zone

1417
00:51:24,720 --> 00:51:27,280
that is supposed to be

1418
00:51:27,280 --> 00:51:29,280
that is in the process of being secured

1419
00:51:29,280 --> 00:51:30,720
and then we just co-published these

1420
00:51:30,720 --> 00:51:32,960
records identically using the signaling

1421
00:51:32,960 --> 00:51:35,119
mechanism under the namespace that i

1422
00:51:35,119 --> 00:51:36,319
explained above so you would have

1423
00:51:36,319 --> 00:51:38,000
example.com

1424
00:51:38,000 --> 00:51:41,960
dot underscore dsof.ns1.dsec.io

1425
00:51:42,079 --> 00:51:43,440
and the interesting point here is that

1426
00:51:43,440 --> 00:51:45,839
these records would be signed with the

1427
00:51:45,839 --> 00:51:48,240
dynastic keys of the nameserver zone and

1428
00:51:48,240 --> 00:51:50,720
not of the target zone so you can

1429
00:51:50,720 --> 00:51:52,400
validate that stuff with the

1430
00:51:52,400 --> 00:51:54,160
pre-existing chain of trust to the name

1431
00:51:54,160 --> 00:51:56,400
server domain

1432
00:51:56,400 --> 00:51:58,720
um yeah so once the parent does that

1433
00:51:58,720 --> 00:52:01,359
um they can check whether um

1434
00:52:01,359 --> 00:52:03,839
everything is fine stuff validates check

1435
00:52:03,839 --> 00:52:05,520
this against all the different name

1436
00:52:05,520 --> 00:52:07,440
server host names that are provided in

1437
00:52:07,440 --> 00:52:08,880
the name server record set and if all is

1438
00:52:08,880 --> 00:52:09,839
fine

1439
00:52:09,839 --> 00:52:11,920
transfer um

1440
00:52:11,920 --> 00:52:13,760
trust can be transferred to the target

1441
00:52:13,760 --> 00:52:15,440
domain that's how we call it so you you

1442
00:52:15,440 --> 00:52:17,359
could take these cds records and cns

1443
00:52:17,359 --> 00:52:18,800
keys

1444
00:52:18,800 --> 00:52:20,400
construct the a circuit set from that

1445
00:52:20,400 --> 00:52:22,079
and publish it at the parent

1446
00:52:22,079 --> 00:52:24,000
one important thing not to forget is to

1447
00:52:24,000 --> 00:52:26,000
clean up the records when you're done

1448
00:52:26,000 --> 00:52:26,800
so

1449
00:52:26,800 --> 00:52:30,640
to keep the bootstrapping zones small

1450
00:52:30,640 --> 00:52:31,520
yeah

1451
00:52:31,520 --> 00:52:32,800
here's a

1452
00:52:32,800 --> 00:52:33,680
quick

1453
00:52:33,680 --> 00:52:35,440
illustration for for those who like

1454
00:52:35,440 --> 00:52:38,079
pictures more so let's say we have um

1455
00:52:38,079 --> 00:52:40,319
the root zone which is secure and the

1456
00:52:40,319 --> 00:52:42,160
net and comptia least which are also

1457
00:52:42,160 --> 00:52:45,839
secure and we have a provider with

1458
00:52:45,839 --> 00:52:46,839
zone and

1459
00:52:46,839 --> 00:52:48,960
dns1.provided.net namesteverhostname

1460
00:52:48,960 --> 00:52:51,359
let's assume all of this has dns

1461
00:52:51,359 --> 00:52:53,280
and now the customer comes and registers

1462
00:52:53,280 --> 00:52:55,520
example.com it will usually not be

1463
00:52:55,520 --> 00:52:56,559
secure

1464
00:52:56,559 --> 00:53:01,119
but um the dns provider may add the cds

1465
00:53:01,119 --> 00:53:03,119
and cd and sq records to the

1466
00:53:03,119 --> 00:53:05,520
customer zone which is um

1467
00:53:05,520 --> 00:53:07,599
what is usually done already according

1468
00:53:07,599 --> 00:53:10,079
to well not usually but there is an rc

1469
00:53:10,079 --> 00:53:12,079
for it um and we're proposing to

1470
00:53:12,079 --> 00:53:13,839
co-publish these records under the

1471
00:53:13,839 --> 00:53:15,359
nameserver hostname

1472
00:53:15,359 --> 00:53:16,400
um

1473
00:53:16,400 --> 00:53:17,119
to

1474
00:53:17,119 --> 00:53:18,880
use the dns chain of trust on the left

1475
00:53:18,880 --> 00:53:20,720
here to validate what's in the child

1476
00:53:20,720 --> 00:53:21,760
zone

1477
00:53:21,760 --> 00:53:23,440
so then the registry and registrar can

1478
00:53:23,440 --> 00:53:25,119
come look at the child zone validate

1479
00:53:25,119 --> 00:53:26,640
that against the

1480
00:53:26,640 --> 00:53:28,400
records in the name server providers

1481
00:53:28,400 --> 00:53:29,680
zone

1482
00:53:29,680 --> 00:53:31,839
and secure the customer's delegation at

1483
00:53:31,839 --> 00:53:33,680
the parent so we use an established

1484
00:53:33,680 --> 00:53:35,119
chain of trust on the left to take a

1485
00:53:35,119 --> 00:53:37,040
detour and we get an authenticated

1486
00:53:37,040 --> 00:53:39,440
immediate way for publishing

1487
00:53:39,440 --> 00:53:42,160
ds records at the parent that is that is

1488
00:53:42,160 --> 00:53:45,040
resilient against on wire attackers

1489
00:53:45,040 --> 00:53:47,920
active on wire attackers

1490
00:53:47,920 --> 00:53:50,000
some technical considerations so there's

1491
00:53:50,000 --> 00:53:51,520
no collision with

1492
00:53:51,520 --> 00:53:52,400
with the

1493
00:53:52,400 --> 00:53:54,480
original use of cds or cdnsk records

1494
00:53:54,480 --> 00:53:56,160
because those are at the apex only and

1495
00:53:56,160 --> 00:53:58,400
we're proposing to add a new use case

1496
00:53:58,400 --> 00:54:00,720
for these records on non-apex names and

1497
00:54:00,720 --> 00:54:04,160
the subdomains of the underscore dsof

1498
00:54:04,160 --> 00:54:05,440
domain

1499
00:54:05,440 --> 00:54:07,280
we also yeah so so this is what i

1500
00:54:07,280 --> 00:54:09,599
suppose um to to put this label in

1501
00:54:09,599 --> 00:54:10,480
between

1502
00:54:10,480 --> 00:54:13,280
and to have some kind of technical um

1503
00:54:13,280 --> 00:54:14,720
separation between the nameserver

1504
00:54:14,720 --> 00:54:16,880
hostname itself and the bootstrapping

1505
00:54:16,880 --> 00:54:18,800
stuff that's going on underneath

1506
00:54:18,800 --> 00:54:19,760
um

1507
00:54:19,760 --> 00:54:21,599
this enables delegating the signaling

1508
00:54:21,599 --> 00:54:23,599
data to a separate zone

1509
00:54:23,599 --> 00:54:25,839
and

1510
00:54:26,319 --> 00:54:29,440
so so if you think about the the

1511
00:54:29,440 --> 00:54:31,040
technical aspects of how to run this

1512
00:54:31,040 --> 00:54:33,440
operationally

1513
00:54:33,440 --> 00:54:35,040
having this separation removes the risk

1514
00:54:35,040 --> 00:54:36,319
of accidentally modifying the name

1515
00:54:36,319 --> 00:54:38,160
servers ip records for example because

1516
00:54:38,160 --> 00:54:39,119
you don't even have to touch the

1517
00:54:39,119 --> 00:54:41,119
nameserver zone to do bootstrapping

1518
00:54:41,119 --> 00:54:43,040
stuff it reduces the turn on the name

1519
00:54:43,040 --> 00:54:45,280
server zone um in the last splitting of

1520
00:54:45,280 --> 00:54:47,280
dns operation as i said before you're so

1521
00:54:47,280 --> 00:54:49,200
you could do online signing with a

1522
00:54:49,200 --> 00:54:50,720
different key you could even synthesize

1523
00:54:50,720 --> 00:54:53,520
the answers and

1524
00:54:53,520 --> 00:54:55,760
if you use anzac walks so if you use n

1525
00:54:55,760 --> 00:54:58,000
seconds of n63 in the bootstrapping zone

1526
00:54:58,000 --> 00:54:59,680
you could have a parent

1527
00:54:59,680 --> 00:55:01,119
um

1528
00:55:01,119 --> 00:55:03,280
walk the to-do list so to speak so for

1529
00:55:03,280 --> 00:55:05,599
example dot com could come look at com

1530
00:55:05,599 --> 00:55:07,520
dot underscore yes off and do an insect

1531
00:55:07,520 --> 00:55:09,680
walk and find that there is example.com

1532
00:55:09,680 --> 00:55:12,559
to be bootstrapped similarly if you do

1533
00:55:12,559 --> 00:55:13,680
allow

1534
00:55:13,680 --> 00:55:15,280
public zone transfers the parent could

1535
00:55:15,280 --> 00:55:17,359
come and retrieve

1536
00:55:17,359 --> 00:55:19,040
this subsection of the bootstrapping

1537
00:55:19,040 --> 00:55:20,960
tree if that is a separate zone and

1538
00:55:20,960 --> 00:55:22,960
perform the different boots jumping

1539
00:55:22,960 --> 00:55:26,160
tasks that have to be done

1540
00:55:26,400 --> 00:55:28,319
um some numbers in the bootstrap ability

1541
00:55:28,319 --> 00:55:30,880
in the tranquil top million so we

1542
00:55:30,880 --> 00:55:33,440
investigated the top million in october

1543
00:55:33,440 --> 00:55:36,240
um we had about 2.3 failure rate

1544
00:55:36,240 --> 00:55:38,400
timeouts and all that we didn't spend

1545
00:55:38,400 --> 00:55:40,240
much time on improving that we found

1546
00:55:40,240 --> 00:55:42,559
that five or six percent of um zones are

1547
00:55:42,559 --> 00:55:46,319
secure um and or assigned so secures if

1548
00:55:46,319 --> 00:55:48,400
you actually have the validation path

1549
00:55:48,400 --> 00:55:49,680
and signed as if you don't have ds

1550
00:55:49,680 --> 00:55:51,520
records but r6

1551
00:55:51,520 --> 00:55:53,280
um so this

1552
00:55:53,280 --> 00:55:54,559
this is just a cross check and we found

1553
00:55:54,559 --> 00:55:57,440
that about 25 of those 10 million

1554
00:55:57,440 --> 00:55:58,400
domains

1555
00:55:58,400 --> 00:56:01,839
do um already have name servers which

1556
00:56:01,839 --> 00:56:04,079
are secure themselves or the domains are

1557
00:56:04,079 --> 00:56:06,160
secure so those are

1558
00:56:06,160 --> 00:56:07,920
already suitable for

1559
00:56:07,920 --> 00:56:10,079
performing the bootstrapping mechanism

1560
00:56:10,079 --> 00:56:12,400
and if we take those and we also require

1561
00:56:12,400 --> 00:56:14,480
that the domain hosted on it is not yet

1562
00:56:14,480 --> 00:56:15,520
secure

1563
00:56:15,520 --> 00:56:17,760
then one could use

1564
00:56:17,760 --> 00:56:19,599
those name servers to do the signaling

1565
00:56:19,599 --> 00:56:21,520
and to secure the domain that they host

1566
00:56:21,520 --> 00:56:24,720
this is the case for about 22 or 25

1567
00:56:24,720 --> 00:56:26,319
of domains in the top million so that

1568
00:56:26,319 --> 00:56:28,160
would mean that if this is employed

1569
00:56:28,160 --> 00:56:30,160
universally which of course it wouldn't

1570
00:56:30,160 --> 00:56:32,960
be but maybe significantly then up to

1571
00:56:32,960 --> 00:56:34,960
around 200 000 domains could be secured

1572
00:56:34,960 --> 00:56:37,040
with it right now without anyone having

1573
00:56:37,040 --> 00:56:38,400
to change

1574
00:56:38,400 --> 00:56:42,000
the name server dns configurations

1575
00:56:42,000 --> 00:56:43,440
in the backup slides if you want to look

1576
00:56:43,440 --> 00:56:45,920
later there is a breakdown by um dns

1577
00:56:45,920 --> 00:56:47,599
operator and all that um

1578
00:56:47,599 --> 00:56:48,720
we can skip that now there are some

1579
00:56:48,720 --> 00:56:50,240
limitations

1580
00:56:50,240 --> 00:56:52,160
um so some edge cases cannot be

1581
00:56:52,160 --> 00:56:54,319
accommodated by the design so for

1582
00:56:54,319 --> 00:56:56,240
example if you consider the domain foo

1583
00:56:56,240 --> 00:57:00,400
dot bar dot net dot underscore ds off

1584
00:57:00,400 --> 00:57:02,240
then bar.net would be the signaling name

1585
00:57:02,240 --> 00:57:03,680
for the bar.net

1586
00:57:03,680 --> 00:57:06,079
delegation and food.bar.net would be the

1587
00:57:06,079 --> 00:57:07,839
signaling name for that one

1588
00:57:07,839 --> 00:57:11,680
and so now if you had a zone cut at

1589
00:57:11,680 --> 00:57:13,599
underscore dsr for some reason if you

1590
00:57:13,599 --> 00:57:15,280
had that then there would be a semantic

1591
00:57:15,280 --> 00:57:17,280
collision because the cds record there

1592
00:57:17,280 --> 00:57:20,440
would also be at the apex of this

1593
00:57:20,440 --> 00:57:23,200
bar.net.underscore dsof delegation so

1594
00:57:23,200 --> 00:57:24,880
you couldn't use it at the same time for

1595
00:57:24,880 --> 00:57:26,559
signaling for bar.net so that's not a

1596
00:57:26,559 --> 00:57:28,480
huge restriction it's just worth

1597
00:57:28,480 --> 00:57:30,799
pointing out

1598
00:57:30,799 --> 00:57:32,240
the model also doesn't work when the

1599
00:57:32,240 --> 00:57:34,319
target name is excessively long or has

1600
00:57:34,319 --> 00:57:36,480
too many labels because we append

1601
00:57:36,480 --> 00:57:38,880
something to the target name so

1602
00:57:38,880 --> 00:57:40,880
it could be possible to run into the

1603
00:57:40,880 --> 00:57:42,799
length restrictions it's also unlikely

1604
00:57:42,799 --> 00:57:44,720
to happen but it's also

1605
00:57:44,720 --> 00:57:46,559
a restriction technically and also it

1606
00:57:46,559 --> 00:57:48,319
doesn't work to bootstrap

1607
00:57:48,319 --> 00:57:50,559
domains which are in bailiwick because

1608
00:57:50,559 --> 00:57:52,799
if you have a domain that's in bellywick

1609
00:57:52,799 --> 00:57:54,319
and you need to bootstrap it that means

1610
00:57:54,319 --> 00:57:56,400
that you don't have the validation path

1611
00:57:56,400 --> 00:57:58,240
yet otherwise you wouldn't be trying to

1612
00:57:58,240 --> 00:57:59,440
bootstrap it

1613
00:57:59,440 --> 00:58:00,559
and if you don't have the validation

1614
00:58:00,559 --> 00:58:02,480
path yet however you can't do this kind

1615
00:58:02,480 --> 00:58:06,160
of authentication that we're proposing

1616
00:58:06,559 --> 00:58:09,200
about five minutes until your q a

1617
00:58:09,200 --> 00:58:12,240
thank you i'm actually almost done um

1618
00:58:12,240 --> 00:58:14,079
so um here's the status and outlook we

1619
00:58:14,079 --> 00:58:17,200
presented this at the itf um

1620
00:58:17,200 --> 00:58:19,359
one

1621
00:58:19,440 --> 00:58:21,839
112 meeting and gathered some valuable

1622
00:58:21,839 --> 00:58:22,960
feedback

1623
00:58:22,960 --> 00:58:23,839
and

1624
00:58:23,839 --> 00:58:25,440
based on that yesterday we uploaded a

1625
00:58:25,440 --> 00:58:27,599
new version of the draft to the itf data

1626
00:58:27,599 --> 00:58:29,920
tracker in case anyone wants to look the

1627
00:58:29,920 --> 00:58:31,680
most significant changes are that

1628
00:58:31,680 --> 00:58:33,040
earlier

1629
00:58:33,040 --> 00:58:35,040
the signaling names which were encoded

1630
00:58:35,040 --> 00:58:38,319
in the subdomains of underscore dsof

1631
00:58:38,319 --> 00:58:41,040
had a component that was hashed which

1632
00:58:41,040 --> 00:58:43,119
gives some edge case advantages but was

1633
00:58:43,119 --> 00:58:44,799
considered to be too complex so the

1634
00:58:44,799 --> 00:58:47,119
protocol was simplified and now we only

1635
00:58:47,119 --> 00:58:48,720
prepend the

1636
00:58:48,720 --> 00:58:51,200
the verbatim name of the target domain

1637
00:58:51,200 --> 00:58:52,400
to this

1638
00:58:52,400 --> 00:58:54,559
bootstrapping domain name so that's the

1639
00:58:54,559 --> 00:58:56,640
simplification it's now much easier to

1640
00:58:56,640 --> 00:58:58,480
for example query these things using dig

1641
00:58:58,480 --> 00:59:00,079
without having

1642
00:59:00,079 --> 00:59:01,119
to use

1643
00:59:01,119 --> 00:59:02,240
some hashing

1644
00:59:02,240 --> 00:59:05,280
tooling or something um the intermediate

1645
00:59:05,280 --> 00:59:07,599
level underscore dot sorry underscore ds

1646
00:59:07,599 --> 00:59:09,760
auth was also called underscore boot

1647
00:59:09,760 --> 00:59:12,000
previously and we changed that um

1648
00:59:12,000 --> 00:59:13,359
because it was considered to be too

1649
00:59:13,359 --> 00:59:15,280
generic the underscore dearest auth is

1650
00:59:15,280 --> 00:59:17,200
also just a proposal which i think is

1651
00:59:17,200 --> 00:59:18,720
well fitting

1652
00:59:18,720 --> 00:59:21,280
but if other people have opinions on it

1653
00:59:21,280 --> 00:59:22,640
it's not

1654
00:59:22,640 --> 00:59:24,480
not set in stone

1655
00:59:24,480 --> 00:59:25,920
we also clarified the importance of

1656
00:59:25,920 --> 00:59:27,760
cleaning up bootstrapping records and we

1657
00:59:27,760 --> 00:59:29,520
added a section on the limitations and

1658
00:59:29,520 --> 00:59:31,520
just explained

1659
00:59:31,520 --> 00:59:33,359
we're looking forward to having more

1660
00:59:33,359 --> 00:59:34,720
discussion on this which is why we're

1661
00:59:34,720 --> 00:59:36,559
presenting it here and not only at the

1662
00:59:36,559 --> 00:59:37,680
itf

1663
00:59:37,680 --> 00:59:38,720
if

1664
00:59:38,720 --> 00:59:40,079
anyone is interested in giving us

1665
00:59:40,079 --> 00:59:42,960
feedback that would be highly

1666
00:59:42,960 --> 00:59:44,240
welcome

1667
00:59:44,240 --> 00:59:45,680
and otherwise we're looking for dns

1668
00:59:45,680 --> 00:59:48,480
operators um and registries registrars

1669
00:59:48,480 --> 00:59:50,240
who are interested in exploring and

1670
00:59:50,240 --> 00:59:52,640
deploying this protocol experimentally

1671
00:59:52,640 --> 00:59:53,440
um

1672
00:59:53,440 --> 00:59:55,359
we think the protocol is

1673
00:59:55,359 --> 00:59:58,079
kind of taking shape and

1674
00:59:58,079 --> 01:00:01,119
coming more close to its final form and

1675
01:00:01,119 --> 01:00:03,680
um i think the the adoption by the itf

1676
01:00:03,680 --> 01:00:06,480
dns ops weapon group um

1677
01:00:06,480 --> 01:00:07,920
may happen in the next few weeks i think

1678
01:00:07,920 --> 01:00:09,119
the call

1679
01:00:09,119 --> 01:00:10,799
was announced to be started in a few

1680
01:00:10,799 --> 01:00:12,640
weeks or something so we're we're

1681
01:00:12,640 --> 01:00:14,240
getting closer to implementation phase

1682
01:00:14,240 --> 01:00:15,920
and would be highly interested

1683
01:00:15,920 --> 01:00:17,040
in

1684
01:00:17,040 --> 01:00:19,200
operators and registries and registrars

1685
01:00:19,200 --> 01:00:21,200
would be interested in

1686
01:00:21,200 --> 01:00:22,720
working on this from the publication and

1687
01:00:22,720 --> 01:00:25,440
from the processing side

1688
01:00:25,440 --> 01:00:27,680
yeah thank you for your attention

1689
01:00:27,680 --> 01:00:29,680
and i'm ready to take your questions

1690
01:00:29,680 --> 01:00:31,839
if there's any questions

1691
01:00:31,839 --> 01:00:34,558
thank you peter

1692
01:00:35,119 --> 01:00:37,119
well i have been following your work so

1693
01:00:37,119 --> 01:00:40,640
i i abstain from commenting

1694
01:00:40,640 --> 01:00:43,599
but uh please people uh write your

1695
01:00:43,599 --> 01:00:45,680
questions in the q a pod

1696
01:00:45,680 --> 01:00:48,000
and or raise your hand if you want to

1697
01:00:48,000 --> 01:00:50,880
ask your questions yourself and uh

1698
01:00:50,880 --> 01:00:53,920
please vote in the polls that should be

1699
01:00:53,920 --> 01:00:58,160
up on your screen right now and

1700
01:00:59,920 --> 01:01:02,000
well in the meantime peter have you done

1701
01:01:02,000 --> 01:01:05,040
any implementation of your own

1702
01:01:05,040 --> 01:01:08,720
yes um so we run this at dsec so you can

1703
01:01:08,720 --> 01:01:11,839
go to um well like these underscore

1704
01:01:11,839 --> 01:01:13,119
names and then you can prefer an insect

1705
01:01:13,119 --> 01:01:17,119
walk for example for our own um

1706
01:01:17,119 --> 01:01:19,520
dynastic bootstrapping but it is not yet

1707
01:01:19,520 --> 01:01:21,760
adapted to um the new label so we still

1708
01:01:21,760 --> 01:01:23,520
use the underscore boot label not at the

1709
01:01:23,520 --> 01:01:24,960
underscore source level and still we

1710
01:01:24,960 --> 01:01:27,040
also have the hashing

1711
01:01:27,040 --> 01:01:28,079
in the

1712
01:01:28,079 --> 01:01:30,160
owner name of the bootstrapping stuff so

1713
01:01:30,160 --> 01:01:32,240
we will update this in the next days

1714
01:01:32,240 --> 01:01:33,920
to

1715
01:01:33,920 --> 01:01:35,359
accommodate what's

1716
01:01:35,359 --> 01:01:37,200
in the draft since yesterday

1717
01:01:37,200 --> 01:01:39,440
and yeah so

1718
01:01:39,440 --> 01:01:41,119
that's what we currently have there's

1719
01:01:41,119 --> 01:01:42,720
also a tool for performing this insect

1720
01:01:42,720 --> 01:01:44,960
walk and extracting

1721
01:01:44,960 --> 01:01:46,720
these

1722
01:01:46,720 --> 01:01:48,240
information from the bootstrapping zones

1723
01:01:48,240 --> 01:01:48,960
and

1724
01:01:48,960 --> 01:01:51,520
output a list of ds records that one

1725
01:01:51,520 --> 01:01:53,359
could use um to put in the parents so

1726
01:01:53,359 --> 01:01:56,000
this would be a tool a parent could run

1727
01:01:56,000 --> 01:01:57,280
to see

1728
01:01:57,280 --> 01:01:59,200
what is missing

1729
01:01:59,200 --> 01:02:01,440
for securing the delegations and just

1730
01:02:01,440 --> 01:02:02,799
have all the validation done by the

1731
01:02:02,799 --> 01:02:04,480
tooling i know that that obviously

1732
01:02:04,480 --> 01:02:05,920
people would be running their own

1733
01:02:05,920 --> 01:02:07,760
tooling and integrate it into their own

1734
01:02:07,760 --> 01:02:09,440
cds scanners and all that stuff but we

1735
01:02:09,440 --> 01:02:10,960
wanted to give a proof of concept of

1736
01:02:10,960 --> 01:02:11,760
that

1737
01:02:11,760 --> 01:02:13,760
um yeah so that's it

1738
01:02:13,760 --> 01:02:15,039
as far as our implementation is

1739
01:02:15,039 --> 01:02:17,200
concerned and i also know that

1740
01:02:17,200 --> 01:02:18,640
probably most questions on this have

1741
01:02:18,640 --> 01:02:20,480
been asked before so i'm not going to be

1742
01:02:20,480 --> 01:02:22,319
angry if there's no questions

1743
01:02:22,319 --> 01:02:25,520
we have a question here magnus sunberg

1744
01:02:25,520 --> 01:02:26,319
is

1745
01:02:26,319 --> 01:02:28,960
asking how broken is epp or the

1746
01:02:28,960 --> 01:02:32,240
communications via the registrars

1747
01:02:32,240 --> 01:02:33,760
you have to have some trusted

1748
01:02:33,760 --> 01:02:36,000
communication either via your registrar

1749
01:02:36,000 --> 01:02:39,200
or your ns provider

1750
01:02:39,920 --> 01:02:40,880
um

1751
01:02:40,880 --> 01:02:43,119
so

1752
01:02:44,960 --> 01:02:46,240
let me see if i understand the question

1753
01:02:46,240 --> 01:02:49,839
correctly so um this um

1754
01:02:49,839 --> 01:02:51,119
these bootstrapping records have to be

1755
01:02:51,119 --> 01:02:53,440
processed by some parental agent so to

1756
01:02:53,440 --> 01:02:54,960
speak and that could be the registry or

1757
01:02:54,960 --> 01:02:56,799
it could be the registrar

1758
01:02:56,799 --> 01:02:58,319
i think for for the generic top-level

1759
01:02:58,319 --> 01:03:01,119
domains um or the non-cctlds it would

1760
01:03:01,119 --> 01:03:02,559
always be the registrar because the

1761
01:03:02,559 --> 01:03:04,400
registry is not supposed to have any

1762
01:03:04,400 --> 01:03:06,640
relationship with the domain owner and

1763
01:03:06,640 --> 01:03:10,319
the dns operator so um let's assume we

1764
01:03:10,319 --> 01:03:12,000
have dot berlin or whatever and the

1765
01:03:12,000 --> 01:03:15,039
registrar let's say for example godaddy

1766
01:03:15,039 --> 01:03:17,200
is going to scan whether the child

1767
01:03:17,200 --> 01:03:18,480
domain has

1768
01:03:18,480 --> 01:03:20,240
this bootstrapping stuff configured then

1769
01:03:20,240 --> 01:03:22,079
they would be fetching it and validating

1770
01:03:22,079 --> 01:03:23,039
it

1771
01:03:23,039 --> 01:03:24,960
and then later they would have to pass

1772
01:03:24,960 --> 01:03:25,760
on

1773
01:03:25,760 --> 01:03:28,720
the ds configuration via a via epp to

1774
01:03:28,720 --> 01:03:31,119
the registry now the question is how

1775
01:03:31,119 --> 01:03:32,400
broken

1776
01:03:32,400 --> 01:03:34,559
that is i'm not sure if this is exactly

1777
01:03:34,559 --> 01:03:36,240
the question um

1778
01:03:36,240 --> 01:03:37,839
but so earlier there were some concerns

1779
01:03:37,839 --> 01:03:40,000
but people for example if

1780
01:03:40,000 --> 01:03:42,240
the registry would parse this

1781
01:03:42,240 --> 01:03:44,000
then they would be updating the ds

1782
01:03:44,000 --> 01:03:45,920
record set in the parent

1783
01:03:45,920 --> 01:03:47,760
and the registrar wouldn't know about it

1784
01:03:47,760 --> 01:03:49,119
so maybe if they would have their own

1785
01:03:49,119 --> 01:03:51,599
database at the registrar level that

1786
01:03:51,599 --> 01:03:53,599
could be out of sync with the registry

1787
01:03:53,599 --> 01:03:56,079
um so that is true in that sense one

1788
01:03:56,079 --> 01:03:58,000
could say it's broken but that also

1789
01:03:58,000 --> 01:04:00,000
applies to any cds update generally not

1790
01:04:00,000 --> 01:04:01,680
just for bootstrapping so this is

1791
01:04:01,680 --> 01:04:03,039
something to be sorted out between

1792
01:04:03,039 --> 01:04:05,039
registry and registrar

1793
01:04:05,039 --> 01:04:05,839
and

1794
01:04:05,839 --> 01:04:07,359
i don't think it has specifically to do

1795
01:04:07,359 --> 01:04:09,039
with epp

1796
01:04:09,039 --> 01:04:10,240
now if we go back to the case where the

1797
01:04:10,240 --> 01:04:12,400
registrar does the parsing and pass it

1798
01:04:12,400 --> 01:04:16,640
passes things on to the registry via epp

1799
01:04:16,640 --> 01:04:18,960
um i'm not an expert on that but i would

1800
01:04:18,960 --> 01:04:21,760
think there's some tls um there is some

1801
01:04:21,760 --> 01:04:23,119
other transport

1802
01:04:23,119 --> 01:04:23,920
um

1803
01:04:23,920 --> 01:04:26,720
encryption and authentication so um it's

1804
01:04:26,720 --> 01:04:28,400
not clear to me exactly what's meant

1805
01:04:28,400 --> 01:04:30,400
with the question how you know how far

1806
01:04:30,400 --> 01:04:31,839
that's broken

1807
01:04:31,839 --> 01:04:33,920
magnus has a follow-up and he says okay

1808
01:04:33,920 --> 01:04:35,359
if you have a good contact with your

1809
01:04:35,359 --> 01:04:36,559
registrar

1810
01:04:36,559 --> 01:04:38,880
and the epp with the registry works you

1811
01:04:38,880 --> 01:04:41,839
don't need this

1812
01:04:42,480 --> 01:04:44,240
yes that is true

1813
01:04:44,240 --> 01:04:46,480
but the thing is that usually

1814
01:04:46,480 --> 01:04:47,440
most

1815
01:04:47,440 --> 01:04:48,559
people

1816
01:04:48,559 --> 01:04:50,720
especially domain owners like companies

1817
01:04:50,720 --> 01:04:52,640
registered in registering some random

1818
01:04:52,640 --> 01:04:54,160
domain name they don't even know they

1819
01:04:54,160 --> 01:04:55,839
have a registrar right they have some

1820
01:04:55,839 --> 01:04:57,440
web hosting company that does everything

1821
01:04:57,440 --> 01:04:58,640
in the background

1822
01:04:58,640 --> 01:05:00,640
and ideally it would be nice if the

1823
01:05:00,640 --> 01:05:02,799
registrant wouldn't have to do anything

1824
01:05:02,799 --> 01:05:05,119
to have dns enabled if the dns operator

1825
01:05:05,119 --> 01:05:08,160
could just decide that by themselves

1826
01:05:08,160 --> 01:05:11,440
so our take is that the setup to enable

1827
01:05:11,440 --> 01:05:15,599
bnsec currently is too complicated

1828
01:05:19,920 --> 01:05:22,640
does that answer the question

1829
01:05:22,640 --> 01:05:24,880
another

1830
01:05:24,880 --> 01:05:26,960
employee of a registry i can agree with

1831
01:05:26,960 --> 01:05:29,119
you

1832
01:05:30,880 --> 01:05:32,640
well i think we have answered all the

1833
01:05:32,640 --> 01:05:33,839
questions

1834
01:05:33,839 --> 01:05:34,839
thank you

1835
01:05:34,839 --> 01:05:38,319
peter yep thanks

1836
01:05:38,319 --> 01:05:42,000
and with that we come to our

1837
01:05:42,079 --> 01:05:46,000
next speaker another peter peter alexis

1838
01:05:46,000 --> 01:05:46,960
and

1839
01:05:46,960 --> 01:05:48,799
he is going to talk about the proxy

1840
01:05:48,799 --> 01:05:50,559
protocol

1841
01:05:50,559 --> 01:05:53,839
please peter sharer's lights

1842
01:05:54,240 --> 01:05:56,480
yes i can see your slides

1843
01:05:56,480 --> 01:05:57,680
all right thank you so welcome to the

1844
01:05:57,680 --> 01:05:59,599
peter show indeed

1845
01:05:59,599 --> 01:06:02,240
i'm pete alexis peter van dyke is

1846
01:06:02,240 --> 01:06:03,760
co-presenting here with me because he

1847
01:06:03,760 --> 01:06:05,280
did most of the

1848
01:06:05,280 --> 01:06:07,280
technical implementations so if you have

1849
01:06:07,280 --> 01:06:09,200
any implementation questions then you

1850
01:06:09,200 --> 01:06:10,960
can probably answer them better than i

1851
01:06:10,960 --> 01:06:12,079
can

1852
01:06:12,079 --> 01:06:14,079
so we'll be discussing the proxy v2

1853
01:06:14,079 --> 01:06:17,039
protocol for use in dns

1854
01:06:17,039 --> 01:06:19,520
and uh first of all what is the problem

1855
01:06:19,520 --> 01:06:21,359
that we are trying to solve

1856
01:06:21,359 --> 01:06:25,359
uh many dns setups can be or are fronted

1857
01:06:25,359 --> 01:06:28,160
by load balancers and proxies

1858
01:06:28,160 --> 01:06:31,359
for for various uh reasons be it

1859
01:06:31,359 --> 01:06:33,599
be it firewalling be it

1860
01:06:33,599 --> 01:06:36,160
dropping packets early etc etc or maybe

1861
01:06:36,160 --> 01:06:38,640
putting just the cache very close to the

1862
01:06:38,640 --> 01:06:40,319
to the end user

1863
01:06:40,319 --> 01:06:42,559
um unfortunately many of the backend

1864
01:06:42,559 --> 01:06:44,480
servers that are

1865
01:06:44,480 --> 01:06:46,079
that are fronted by these load balancers

1866
01:06:46,079 --> 01:06:48,640
and proxies they require the actual

1867
01:06:48,640 --> 01:06:50,480
client ip address

1868
01:06:50,480 --> 01:06:54,720
for acls views other purposes like

1869
01:06:54,720 --> 01:06:56,960
filtering or policies

1870
01:06:56,960 --> 01:06:58,720
and

1871
01:06:58,720 --> 01:07:00,880
many proxies don't actually want to do

1872
01:07:00,880 --> 01:07:03,760
uh expensive uh parsing of the nest

1873
01:07:03,760 --> 01:07:05,760
packets because uh well they either

1874
01:07:05,760 --> 01:07:07,039
can't or

1875
01:07:07,039 --> 01:07:09,760
uh it is just very uh very cpu intensive

1876
01:07:09,760 --> 01:07:11,359
to parse the packet in your load

1877
01:07:11,359 --> 01:07:12,799
balancer and then again

1878
01:07:12,799 --> 01:07:15,760
on the other side um it is also quite

1879
01:07:15,760 --> 01:07:18,000
possible that a back end might want to

1880
01:07:18,000 --> 01:07:20,079
know about the transport being used and

1881
01:07:20,079 --> 01:07:22,000
including port numbers for instance for

1882
01:07:22,000 --> 01:07:24,960
uh cg net purposes or

1883
01:07:24,960 --> 01:07:26,400
knowing that something was requested

1884
01:07:26,400 --> 01:07:28,960
over a secure secure channel

1885
01:07:28,960 --> 01:07:32,720
and there are some uh solutions for this

1886
01:07:32,720 --> 01:07:35,039
one of them is abusing edns client

1887
01:07:35,039 --> 01:07:36,400
subnet

1888
01:07:36,400 --> 01:07:39,440
one of them is the x proxy 4 or xpf

1889
01:07:39,440 --> 01:07:40,960
record that can be added to the

1890
01:07:40,960 --> 01:07:42,400
additional section

1891
01:07:42,400 --> 01:07:44,319
and then there's of course private and

1892
01:07:44,319 --> 01:07:46,960
bespoke eds options that you put in the

1893
01:07:46,960 --> 01:07:49,440
in the dns packet from the load balancer

1894
01:07:49,440 --> 01:07:51,440
to the back end

1895
01:07:51,440 --> 01:07:55,119
and these have several drawbacks

1896
01:07:55,119 --> 01:07:57,119
one of the drawbacks of using

1897
01:07:57,119 --> 01:07:58,880
of course client subnet is that you're

1898
01:07:58,880 --> 01:08:01,119
squatting on an existing option

1899
01:08:01,119 --> 01:08:04,319
which is usually a terrible idea

1900
01:08:04,319 --> 01:08:06,720
it also requires the load balancer to

1901
01:08:06,720 --> 01:08:09,039
parse the dns packet in flight and

1902
01:08:09,039 --> 01:08:11,119
modifying it

1903
01:08:11,119 --> 01:08:14,240
maybe even breaking tsig

1904
01:08:14,240 --> 01:08:15,920
so you would have to

1905
01:08:15,920 --> 01:08:17,920
strip it out at the at the back end

1906
01:08:17,920 --> 01:08:19,920
again

1907
01:08:19,920 --> 01:08:22,238
and there is so the backend also has to

1908
01:08:22,238 --> 01:08:25,359
be modified there's also no way

1909
01:08:25,359 --> 01:08:27,359
to pat then pass

1910
01:08:27,359 --> 01:08:30,000
enos client subnet through

1911
01:08:30,000 --> 01:08:32,238
your proxy because

1912
01:08:32,238 --> 01:08:34,319
the proxy has to add its own edness

1913
01:08:34,319 --> 01:08:37,520
client subnet to the out in the back end

1914
01:08:37,520 --> 01:08:39,439
there is no port information in there

1915
01:08:39,439 --> 01:08:41,520
and there's also no transport protocol

1916
01:08:41,520 --> 01:08:43,120
information of course the edins client

1917
01:08:43,120 --> 01:08:45,600
subnet

1918
01:08:45,600 --> 01:08:46,560
then

1919
01:08:46,560 --> 01:08:49,040
the drawbacks of xpf and other options

1920
01:08:49,040 --> 01:08:50,479
xpf

1921
01:08:50,479 --> 01:08:53,040
had the information about uh ports had

1922
01:08:53,040 --> 01:08:54,479
the information about transport

1923
01:08:54,479 --> 01:08:55,679
mechanisms

1924
01:08:55,679 --> 01:08:59,040
however uh the draft expired at the ietf

1925
01:08:59,040 --> 01:09:02,158
and there seems to be no real

1926
01:09:02,158 --> 01:09:04,960
momentum behind it anymore

1927
01:09:04,960 --> 01:09:06,640
and of course it also requires parsing

1928
01:09:06,640 --> 01:09:08,080
and modifying

1929
01:09:08,080 --> 01:09:10,238
dns packets in flight

1930
01:09:10,238 --> 01:09:12,479
and also requires some special handling

1931
01:09:12,479 --> 01:09:14,799
to not break tsig

1932
01:09:14,799 --> 01:09:16,479
and then there's a private edness

1933
01:09:16,479 --> 01:09:20,479
options or bespoke edns options and this

1934
01:09:20,479 --> 01:09:23,120
requires changes to all the software in

1935
01:09:23,120 --> 01:09:24,880
the chain

1936
01:09:24,880 --> 01:09:28,479
and of course it is not a standard or or

1937
01:09:28,479 --> 01:09:30,880
or well documented and of course it can

1938
01:09:30,880 --> 01:09:33,520
be very hard to debug with any of the of

1939
01:09:33,520 --> 01:09:36,960
these standard tools that that exist

1940
01:09:36,960 --> 01:09:40,640
um so this is why uh for powerdns dns

1941
01:09:40,640 --> 01:09:43,198
vist we have implemented the proxy v2

1942
01:09:43,198 --> 01:09:44,799
protocol and

1943
01:09:44,799 --> 01:09:46,640
we hope of course other

1944
01:09:46,640 --> 01:09:49,040
implementers will do this as well

1945
01:09:49,040 --> 01:09:51,439
this is a binary protocol

1946
01:09:51,439 --> 01:09:53,839
that prefixes the data that is being

1947
01:09:53,839 --> 01:09:55,280
proxied

1948
01:09:55,280 --> 01:09:57,600
and it only lives between the proxy and

1949
01:09:57,600 --> 01:09:59,440
the back end and the backend does not

1950
01:09:59,440 --> 01:10:00,960
even respond with

1951
01:10:00,960 --> 01:10:02,719
prefix data

1952
01:10:02,719 --> 01:10:05,679
it can pass ipv4 ipv6 addresses ports

1953
01:10:05,679 --> 01:10:09,520
and protocol like tcp and udp

1954
01:10:09,520 --> 01:10:11,840
it is extensible

1955
01:10:11,840 --> 01:10:14,080
using any tag length value fields for

1956
01:10:14,080 --> 01:10:15,520
instance to pass

1957
01:10:15,520 --> 01:10:18,880
the doh path or to pass tls information

1958
01:10:18,880 --> 01:10:21,360
from the from the client

1959
01:10:21,360 --> 01:10:22,239
many

1960
01:10:22,239 --> 01:10:23,760
load balancers already support this

1961
01:10:23,760 --> 01:10:25,280
protocol

1962
01:10:25,280 --> 01:10:27,280
and of course it goes very well together

1963
01:10:27,280 --> 01:10:29,920
with edins client subnet

1964
01:10:29,920 --> 01:10:31,920
in the in the original packet because

1965
01:10:31,920 --> 01:10:34,080
there is no modification of dns packets

1966
01:10:34,080 --> 01:10:37,440
by the uh by the intermediate proxy

1967
01:10:37,440 --> 01:10:39,520
uh where are exactly these headers

1968
01:10:39,520 --> 01:10:42,800
placed uh these are uh the two

1969
01:10:42,800 --> 01:10:44,640
most most

1970
01:10:44,640 --> 01:10:46,960
implemented options so the client will

1971
01:10:46,960 --> 01:10:49,360
send a query that comes to the load

1972
01:10:49,360 --> 01:10:51,120
balancer proxy

1973
01:10:51,120 --> 01:10:53,760
then the proxy will prepend

1974
01:10:53,760 --> 01:10:56,719
the proxy header and send the original

1975
01:10:56,719 --> 01:10:58,480
query to the backend server which then

1976
01:10:58,480 --> 01:11:01,199
responds without any proxy information

1977
01:11:01,199 --> 01:11:02,560
to the load balancer and then the load

1978
01:11:02,560 --> 01:11:04,560
balancer passes on that response to the

1979
01:11:04,560 --> 01:11:06,640
client

1980
01:11:06,640 --> 01:11:09,440
you could also have direct server return

1981
01:11:09,440 --> 01:11:11,679
we have not implemented this because we

1982
01:11:11,679 --> 01:11:15,360
like having our proxy to keep statistics

1983
01:11:15,360 --> 01:11:17,760
but there it's exactly the same client

1984
01:11:17,760 --> 01:11:19,360
sends a query

1985
01:11:19,360 --> 01:11:21,120
proxy sends the query off to the back

1986
01:11:21,120 --> 01:11:22,800
end pre-pending

1987
01:11:22,800 --> 01:11:24,480
the proxy header and then the response

1988
01:11:24,480 --> 01:11:27,839
immediately goes back to the client

1989
01:11:28,960 --> 01:11:30,800
there are many implementations of the

1990
01:11:30,800 --> 01:11:32,880
proxy v2 protocol already

1991
01:11:32,880 --> 01:11:34,719
many load balancers also open source

1992
01:11:34,719 --> 01:11:36,719
like aj proxy

1993
01:11:36,719 --> 01:11:37,840
support it

1994
01:11:37,840 --> 01:11:40,640
actually this protocol originated at

1995
01:11:40,640 --> 01:11:42,239
haproxy

1996
01:11:42,239 --> 01:11:44,560
although they do tcp only whereas

1997
01:11:44,560 --> 01:11:48,000
we also do udp of course

1998
01:11:48,640 --> 01:11:50,800
there's a bunch of web servers like

1999
01:11:50,800 --> 01:11:52,640
nginx and apache that support it also

2000
01:11:52,640 --> 01:11:54,640
only tcp

2001
01:11:54,640 --> 01:11:57,199
we've implemented this in dynasties 1.5

2002
01:11:57,199 --> 01:11:58,640
for outgoing

2003
01:11:58,640 --> 01:12:01,199
dns disc 1.6 also supports proxy

2004
01:12:01,199 --> 01:12:03,360
protocol incoming so you could have a

2005
01:12:03,360 --> 01:12:05,840
chain of proxies there

2006
01:12:05,840 --> 01:12:08,159
power dns authoritative server 46 and

2007
01:12:08,159 --> 01:12:09,679
recursor4

2008
01:12:09,679 --> 01:12:12,560
support inbound proxy protocol as well

2009
01:12:12,560 --> 01:12:14,880
and use it to populate their structures

2010
01:12:14,880 --> 01:12:17,600
of the original addresses

2011
01:12:17,600 --> 01:12:18,640
um

2012
01:12:18,640 --> 01:12:20,560
bind nine and unbound have this on the

2013
01:12:20,560 --> 01:12:22,159
roadmap

2014
01:12:22,159 --> 01:12:24,480
i think believe unbound wants to do

2015
01:12:24,480 --> 01:12:26,320
the first half of next year for a proper

2016
01:12:26,320 --> 01:12:28,960
implementation uh and by nine

2017
01:12:28,960 --> 01:12:31,280
uh so ise is working on it but don't

2018
01:12:31,280 --> 01:12:33,520
have uh have anything promised

2019
01:12:33,520 --> 01:12:36,239
and not dns the auf uh has an

2020
01:12:36,239 --> 01:12:39,520
experimental patch as well

2021
01:12:39,520 --> 01:12:42,880
uh i'll now go into some description of

2022
01:12:42,880 --> 01:12:45,280
the proxy protocol uh it's it's like i

2023
01:12:45,280 --> 01:12:47,360
said it's relatively simple

2024
01:12:47,360 --> 01:12:48,880
there is a header

2025
01:12:48,880 --> 01:12:51,520
that identifies this traffic as being

2026
01:12:51,520 --> 01:12:52,719
proxied

2027
01:12:52,719 --> 01:12:55,440
it then is followed by the proxy address

2028
01:12:55,440 --> 01:12:56,960
the source address destination address

2029
01:12:56,960 --> 01:12:59,679
including all the ports

2030
01:12:59,679 --> 01:13:02,400
then you can set any arbitrary data

2031
01:13:02,400 --> 01:13:04,640
stack length value and then just the

2032
01:13:04,640 --> 01:13:07,840
original data follows after that

2033
01:13:07,840 --> 01:13:08,719
the

2034
01:13:08,719 --> 01:13:11,040
header is prefixed for every query over

2035
01:13:11,040 --> 01:13:12,239
udp

2036
01:13:12,239 --> 01:13:13,360
and

2037
01:13:13,360 --> 01:13:15,040
when you do a tcp connection to the

2038
01:13:15,040 --> 01:13:16,080
backend

2039
01:13:16,080 --> 01:13:18,480
the header is

2040
01:13:18,480 --> 01:13:20,640
sent only once at the beginning of the

2041
01:13:20,640 --> 01:13:22,320
tcp connection

2042
01:13:22,320 --> 01:13:23,760
um

2043
01:13:23,760 --> 01:13:24,719
so

2044
01:13:24,719 --> 01:13:27,360
this data is valid for the entire tcp

2045
01:13:27,360 --> 01:13:28,800
transaction even if there are multiple

2046
01:13:28,800 --> 01:13:31,600
queries over that over that connection

2047
01:13:31,600 --> 01:13:33,120
there's no header in the reply so there

2048
01:13:33,120 --> 01:13:35,360
is no information from the back end

2049
01:13:35,360 --> 01:13:37,440
going back to the proxy

2050
01:13:37,440 --> 01:13:39,679
and as i said there is no tcp reuse to

2051
01:13:39,679 --> 01:13:41,120
the back end if you have different

2052
01:13:41,120 --> 01:13:43,440
clients

2053
01:13:43,440 --> 01:13:46,480
the header is a rather rather simple it

2054
01:13:46,480 --> 01:13:48,960
contains a 12 byte signature

2055
01:13:48,960 --> 01:13:51,199
and if you would send this to a regular

2056
01:13:51,199 --> 01:13:53,679
dns server it would end up in a form

2057
01:13:53,679 --> 01:13:55,040
error

2058
01:13:55,040 --> 01:13:57,280
response because it does not parse

2059
01:13:57,280 --> 01:14:00,880
properly as a as a dns header

2060
01:14:00,880 --> 01:14:02,000
then there is

2061
01:14:02,000 --> 01:14:03,040
some

2062
01:14:03,040 --> 01:14:05,199
information about the protocol that was

2063
01:14:05,199 --> 01:14:06,719
that was used

2064
01:14:06,719 --> 01:14:08,880
so this is set to the number two because

2065
01:14:08,880 --> 01:14:10,719
this is proxy protocol v2 and then the

2066
01:14:10,719 --> 01:14:11,760
command

2067
01:14:11,760 --> 01:14:13,600
there's only two commands there is proxy

2068
01:14:13,600 --> 01:14:15,199
and there is local

2069
01:14:15,199 --> 01:14:17,040
local means

2070
01:14:17,040 --> 01:14:19,360
i i don't actually have proxied data

2071
01:14:19,360 --> 01:14:21,280
following but i i'm doing some local

2072
01:14:21,280 --> 01:14:24,719
command we use this for instance for the

2073
01:14:24,719 --> 01:14:27,199
for the times that we do health checks

2074
01:14:27,199 --> 01:14:28,960
then there's the protocol family and

2075
01:14:28,960 --> 01:14:32,320
socket family and then a length field

2076
01:14:32,320 --> 01:14:34,800
he said it's relatively simple the proxy

2077
01:14:34,800 --> 01:14:37,440
address is just a union

2078
01:14:37,440 --> 01:14:39,520
this is this is how it looks you have

2079
01:14:39,520 --> 01:14:41,679
all the source information and

2080
01:14:41,679 --> 01:14:44,560
destination information depending on

2081
01:14:44,560 --> 01:14:47,199
the protocol that is that is in used and

2082
01:14:47,199 --> 01:14:49,040
yeah you can even do things over unix

2083
01:14:49,040 --> 01:14:52,400
sockets if you if you really want to

2084
01:14:52,400 --> 01:14:54,880
the tag length values again you have a

2085
01:14:54,880 --> 01:14:57,360
type field you have two length fields

2086
01:14:57,360 --> 01:14:59,600
and then the total value

2087
01:14:59,600 --> 01:15:01,440
and this can be used

2088
01:15:01,440 --> 01:15:03,760
to send more information to the back end

2089
01:15:03,760 --> 01:15:05,440
if that would be uh required and of

2090
01:15:05,440 --> 01:15:08,080
course the back end supports this

2091
01:15:08,080 --> 01:15:10,000
because unknown types will be will be

2092
01:15:10,000 --> 01:15:12,640
ignored uh within the protocol there are

2093
01:15:12,640 --> 01:15:15,920
12 types already defined uh like

2094
01:15:15,920 --> 01:15:18,320
the sni that was used

2095
01:15:18,320 --> 01:15:20,000
mostly for tls

2096
01:15:20,000 --> 01:15:22,960
of course the alpn information some

2097
01:15:22,960 --> 01:15:26,159
client certificate information etc etc

2098
01:15:26,159 --> 01:15:28,400
and within the nest disk we support

2099
01:15:28,400 --> 01:15:29,440
adding

2100
01:15:29,440 --> 01:15:30,800
your own

2101
01:15:30,800 --> 01:15:34,000
tag length value fields onto the proxy

2102
01:15:34,000 --> 01:15:36,480
proxy header and on the recursor end in

2103
01:15:36,480 --> 01:15:38,960
the scripting engine it's also possible

2104
01:15:38,960 --> 01:15:41,120
to extract this information

2105
01:15:41,120 --> 01:15:43,040
peter you've got five minutes left until

2106
01:15:43,040 --> 01:15:44,640
your q a

2107
01:15:44,640 --> 01:15:46,719
excellent i will have q a after this

2108
01:15:46,719 --> 01:15:47,860
slide um

2109
01:15:47,860 --> 01:15:49,199
[Music]

2110
01:15:49,199 --> 01:15:50,239
i have some further reading i've

2111
01:15:50,239 --> 01:15:52,080
uploaded the slides all these things are

2112
01:15:52,080 --> 01:15:54,080
the links you can read the

2113
01:15:54,080 --> 01:15:56,719
protocol specification it is written in

2114
01:15:56,719 --> 01:15:59,120
an rfc style document except it's more

2115
01:15:59,120 --> 01:16:01,040
like a blog post than uh

2116
01:16:01,040 --> 01:16:02,960
than than a spec but it is it's very

2117
01:16:02,960 --> 01:16:05,120
good to uh to go through and very easy

2118
01:16:05,120 --> 01:16:06,800
to read

2119
01:16:06,800 --> 01:16:08,560
some documentation on how to actually

2120
01:16:08,560 --> 01:16:10,560
use it if you're if you're using dns

2121
01:16:10,560 --> 01:16:11,520
lists

2122
01:16:11,520 --> 01:16:13,280
and some links to the

2123
01:16:13,280 --> 01:16:14,719
issues for

2124
01:16:14,719 --> 01:16:17,440
the other open source name servers

2125
01:16:17,440 --> 01:16:19,040
where you can

2126
01:16:19,040 --> 01:16:21,280
ask them to please implement this or or

2127
01:16:21,280 --> 01:16:23,760
have or help help testing

2128
01:16:23,760 --> 01:16:26,400
and uh if there are any questions i will

2129
01:16:26,400 --> 01:16:29,360
be happy to take him

2130
01:16:29,520 --> 01:16:32,159
thank you peter

2131
01:16:32,320 --> 01:16:34,640
that was uh actually a new idea for me

2132
01:16:34,640 --> 01:16:37,120
but uh

2133
01:16:37,199 --> 01:16:39,120
well we have some questions uh halo

2134
01:16:39,120 --> 01:16:40,239
smith

2135
01:16:40,239 --> 01:16:41,679
asks

2136
01:16:41,679 --> 01:16:43,920
in a direct server return case your

2137
01:16:43,920 --> 01:16:45,920
backend would already need to be able to

2138
01:16:45,920 --> 01:16:46,960
speak

2139
01:16:46,960 --> 01:16:49,360
for the vip

2140
01:16:49,360 --> 01:16:52,159
the rest came in toward would there

2141
01:16:52,159 --> 01:16:54,560
their benefits to the proxy 2 protocol

2142
01:16:54,560 --> 01:16:57,280
in that case versus using for example

2143
01:16:57,280 --> 01:17:00,719
the gre end cap

2144
01:17:00,840 --> 01:17:04,239
um i don't know that is my uh my honest

2145
01:17:04,239 --> 01:17:06,239
answer um

2146
01:17:06,239 --> 01:17:07,360
hello

2147
01:17:07,360 --> 01:17:08,239
oh

2148
01:17:08,239 --> 01:17:10,000
probably patreon so the the direct

2149
01:17:10,000 --> 01:17:12,719
server return case is of very limited

2150
01:17:12,719 --> 01:17:15,199
use because most proxy situations these

2151
01:17:15,199 --> 01:17:17,520
days or at least many of them

2152
01:17:17,520 --> 01:17:19,440
actually involve protocol translation

2153
01:17:19,440 --> 01:17:24,400
like dot to plain tcp etc uh so the dsr

2154
01:17:24,400 --> 01:17:26,880
case is quite niche

2155
01:17:26,880 --> 01:17:27,840
and

2156
01:17:27,840 --> 01:17:29,760
but i think you're right that in the

2157
01:17:29,760 --> 01:17:33,199
cases where dsr could work the gre encap

2158
01:17:33,199 --> 01:17:35,360
would work just as well

2159
01:17:35,360 --> 01:17:37,679
except i'm not aware of any name servers

2160
01:17:37,679 --> 01:17:39,120
that can

2161
01:17:39,120 --> 01:17:41,360
parse those gre headers

2162
01:17:41,360 --> 01:17:43,760
so you'd have to do that outside in the

2163
01:17:43,760 --> 01:17:46,560
operating system

2164
01:17:51,440 --> 01:17:55,678
and then hazel says thanks for the work

2165
01:17:56,080 --> 01:17:57,600
you're welcome

2166
01:17:57,600 --> 01:17:58,800
and uh

2167
01:17:58,800 --> 01:18:00,960
we have actually stefan wanting to ask a

2168
01:18:00,960 --> 01:18:04,000
question please stephan go ahead

2169
01:18:04,000 --> 01:18:06,400
yeah uh thank you for the presentation

2170
01:18:06,400 --> 01:18:08,560
stefano bing from srdn

2171
01:18:08,560 --> 01:18:11,360
um i would

2172
01:18:11,360 --> 01:18:13,760
i'd like to know how it would work for

2173
01:18:13,760 --> 01:18:16,159
the direct server return because the

2174
01:18:16,159 --> 01:18:17,760
client will get response from a

2175
01:18:17,760 --> 01:18:19,280
different ip

2176
01:18:19,280 --> 01:18:20,400
and

2177
01:18:20,400 --> 01:18:22,960
if it's is if the

2178
01:18:22,960 --> 01:18:25,600
setup is a tcp question

2179
01:18:25,600 --> 01:18:28,000
it should not be able to really answer

2180
01:18:28,000 --> 01:18:29,440
to the

2181
01:18:29,440 --> 01:18:31,840
resolver that is asking the question

2182
01:18:31,840 --> 01:18:33,199
how does it work

2183
01:18:33,199 --> 01:18:34,960
in in normal

2184
01:18:34,960 --> 01:18:37,679
direct server return cases the server

2185
01:18:37,679 --> 01:18:39,040
has the

2186
01:18:39,040 --> 01:18:41,120
ip of the load balancer configured as

2187
01:18:41,120 --> 01:18:42,960
well so it can respond from that address

2188
01:18:42,960 --> 01:18:45,280
of course you need some networking

2189
01:18:45,280 --> 01:18:47,760
your network to support that as well

2190
01:18:47,760 --> 01:18:50,960
and within the tlv you can usually

2191
01:18:50,960 --> 01:18:53,440
put all the tcp information that the

2192
01:18:53,440 --> 01:18:55,120
original client has sent like the the

2193
01:18:55,120 --> 01:18:57,760
window sizes the the syn

2194
01:18:57,760 --> 01:18:59,600
scene information etc so then the back

2195
01:18:59,600 --> 01:19:01,360
end will set up the connection

2196
01:19:01,360 --> 01:19:04,000
for you then load balancer will only

2197
01:19:04,000 --> 01:19:04,800
uh

2198
01:19:04,800 --> 01:19:07,440
point or send the information to the

2199
01:19:07,440 --> 01:19:09,360
back end and the backend will then

2200
01:19:09,360 --> 01:19:10,960
do all the handshaking and then your

2201
01:19:10,960 --> 01:19:12,400
network

2202
01:19:12,400 --> 01:19:15,120
usually knows what's going on there

2203
01:19:15,120 --> 01:19:16,800
okay thank you very much all right

2204
01:19:16,800 --> 01:19:18,800
you're welcome

2205
01:19:18,800 --> 01:19:21,199
okay um i would like to remind everybody

2206
01:19:21,199 --> 01:19:23,120
to answer the poll it should be up on

2207
01:19:23,120 --> 01:19:24,480
your screen

2208
01:19:24,480 --> 01:19:25,600
um

2209
01:19:25,600 --> 01:19:27,040
there's a few

2210
01:19:27,040 --> 01:19:28,880
few votes missing so

2211
01:19:28,880 --> 01:19:31,520
go please go ahead don't be shy and with

2212
01:19:31,520 --> 01:19:33,360
that we come to brett brett breeze go

2213
01:19:33,360 --> 01:19:35,440
ahead

2214
01:19:35,440 --> 01:19:37,120
all right peter yes thanks for the uh

2215
01:19:37,120 --> 01:19:38,640
presentation it's the second time i've

2216
01:19:38,640 --> 01:19:39,679
seen it in a week because i started the

2217
01:19:39,679 --> 01:19:41,840
right meeting last week uh and i'm gonna

2218
01:19:41,840 --> 01:19:43,440
ask the same questions i asked there

2219
01:19:43,440 --> 01:19:45,520
because i think it might be useful for

2220
01:19:45,520 --> 01:19:47,600
people here to hear it um so i'm just

2221
01:19:47,600 --> 01:19:49,520
wondering if there's any plans to

2222
01:19:49,520 --> 01:19:52,159
standardize this at the itf and

2223
01:19:52,159 --> 01:19:54,400
if not why not

2224
01:19:54,400 --> 01:19:55,920
um so

2225
01:19:55,920 --> 01:19:57,840
i'll give you the same answer i gave

2226
01:19:57,840 --> 01:20:00,560
david right the answer is no first of

2227
01:20:00,560 --> 01:20:02,800
all the protocol is already implemented

2228
01:20:02,800 --> 01:20:05,199
widely so the only thing that you could

2229
01:20:05,199 --> 01:20:07,199
do is make an informational rfc saying

2230
01:20:07,199 --> 01:20:08,960
hey it works like this

2231
01:20:08,960 --> 01:20:10,880
and last time we were trying to

2232
01:20:10,880 --> 01:20:13,600
standardize some of this which was xpf

2233
01:20:13,600 --> 01:20:17,199
the privacy advocates were not having it

2234
01:20:17,199 --> 01:20:19,120
i think i think it's um

2235
01:20:19,120 --> 01:20:20,080
uh

2236
01:20:20,080 --> 01:20:22,480
that that in itself is a commentary on

2237
01:20:22,480 --> 01:20:25,440
the ihf being dysfunctional if we are

2238
01:20:25,440 --> 01:20:28,000
swerving away from standardizing things

2239
01:20:28,000 --> 01:20:31,360
because the atf is going to be

2240
01:20:31,360 --> 01:20:32,719
um

2241
01:20:32,719 --> 01:20:36,400
uh aggressive towards them shall we say

2242
01:20:36,400 --> 01:20:39,520
it seems like the thing end of a wedge

2243
01:20:39,520 --> 01:20:42,080
you can you can take that comment as uh

2244
01:20:42,080 --> 01:20:45,440
uh as as you wish um although uh on the

2245
01:20:45,440 --> 01:20:46,960
other hand the protocol already exists

2246
01:20:46,960 --> 01:20:48,960
so like i said only an informational rfc

2247
01:20:48,960 --> 01:20:50,639
would make sense because uh

2248
01:20:50,639 --> 01:20:52,719
implementations won't change

2249
01:20:52,719 --> 01:20:54,639
yeah but i think that itself might be

2250
01:20:54,639 --> 01:20:56,639
useful but you know if

2251
01:20:56,639 --> 01:20:58,159
if if we think it's gonna be a waste of

2252
01:20:58,159 --> 01:20:59,840
time i think that i think you might be

2253
01:20:59,840 --> 01:21:01,920
right about that um

2254
01:21:01,920 --> 01:21:03,120
but i think that's a commentary on the

2255
01:21:03,120 --> 01:21:05,440
itf which maybe needs addressing some

2256
01:21:05,440 --> 01:21:07,679
work right so we we don't have any plans

2257
01:21:07,679 --> 01:21:10,000
to to start the standardizes but we're

2258
01:21:10,000 --> 01:21:11,600
open to uh

2259
01:21:11,600 --> 01:21:13,760
to voicing our support if somebody would

2260
01:21:13,760 --> 01:21:16,159
let's put it like that all right thank

2261
01:21:16,159 --> 01:21:18,320
you

2262
01:21:18,960 --> 01:21:21,520
okay thank you brad and

2263
01:21:21,520 --> 01:21:24,080
we have a question from ralph wieber and

2264
01:21:24,080 --> 01:21:26,480
i am understanding correct that this is

2265
01:21:26,480 --> 01:21:28,960
not multiplexing requests meaning you

2266
01:21:28,960 --> 01:21:30,880
have to have one connection per client

2267
01:21:30,880 --> 01:21:34,239
from the proxy to the back end for tcp

2268
01:21:34,239 --> 01:21:36,639
uh that is correct uh that is how this

2269
01:21:36,639 --> 01:21:38,639
uh this protocol works

2270
01:21:38,639 --> 01:21:40,000
uh and that is also how it is

2271
01:21:40,000 --> 01:21:43,360
implemented in um

2272
01:21:43,360 --> 01:21:46,239
in the http world so on the on the age

2273
01:21:46,239 --> 01:21:47,440
proxy level

2274
01:21:47,440 --> 01:21:50,080
however we are discussing

2275
01:21:50,080 --> 01:21:51,840
with the original

2276
01:21:51,840 --> 01:21:53,920
authors to maybe do a

2277
01:21:53,920 --> 01:21:55,440
updated version

2278
01:21:55,440 --> 01:21:59,120
where you could prefix multiple

2279
01:21:59,120 --> 01:22:00,159
multiple

2280
01:22:00,159 --> 01:22:02,880
queries or requests within the same tcp

2281
01:22:02,880 --> 01:22:03,840
stream

2282
01:22:03,840 --> 01:22:05,360
but that is just not in the protocol

2283
01:22:05,360 --> 01:22:08,519
right now

2284
01:22:10,159 --> 01:22:12,080
okay and then we have a comment from

2285
01:22:12,080 --> 01:22:13,440
greyballis

2286
01:22:13,440 --> 01:22:16,600
and he says privacy objections

2287
01:22:16,600 --> 01:22:19,440
unwarranted imho were what killed the

2288
01:22:19,440 --> 01:22:22,919
xpf draft

2289
01:22:24,080 --> 01:22:26,800
uh yes that is uh absolutely right uh

2290
01:22:26,800 --> 01:22:29,120
the privacy objections were were quite

2291
01:22:29,120 --> 01:22:31,360
fierce uh and

2292
01:22:31,360 --> 01:22:34,159
uh and indeed quite unwarranted because

2293
01:22:34,159 --> 01:22:35,440
the protocol was

2294
01:22:35,440 --> 01:22:37,600
explicitly specified to only work

2295
01:22:37,600 --> 01:22:38,400
between

2296
01:22:38,400 --> 01:22:40,000
a

2297
01:22:40,000 --> 01:22:44,080
between two servers and not end to end

2298
01:22:44,080 --> 01:22:48,320
so yeah i fully agree with ray

2299
01:22:50,159 --> 01:22:53,440
good and i think we have come to the end

2300
01:22:53,440 --> 01:22:54,719
of the questions

2301
01:22:54,719 --> 01:22:56,719
all right excellent

2302
01:22:56,719 --> 01:22:58,719
and thank you very much for having us

2303
01:22:58,719 --> 01:23:01,360
thank you peter and peter

2304
01:23:01,360 --> 01:23:04,239
and uh i hope everybody uh followed this

2305
01:23:04,239 --> 01:23:06,400
note correctly because we will be going

2306
01:23:06,400 --> 01:23:09,520
back to the first peter

2307
01:23:09,520 --> 01:23:13,040
and peter thomason is talking about

2308
01:23:13,040 --> 01:23:15,280
the querying the public suffix list via

2309
01:23:15,280 --> 01:23:18,800
the dns trust welcome back peter

2310
01:23:18,800 --> 01:23:20,960
yes peter peter peter

2311
01:23:20,960 --> 01:23:23,199
um let me share my screen

2312
01:23:23,199 --> 01:23:24,880
okay

2313
01:23:24,880 --> 01:23:27,040
can you see my screen

2314
01:23:27,040 --> 01:23:27,920
yes

2315
01:23:27,920 --> 01:23:29,679
and we can hear you

2316
01:23:29,679 --> 01:23:32,960
okay so i'm the same feeder as before

2317
01:23:32,960 --> 01:23:34,719
from the second secure systems

2318
01:23:34,719 --> 01:23:36,560
engineering

2319
01:23:36,560 --> 01:23:39,120
yes i will give a talk on the public

2320
01:23:39,120 --> 01:23:41,360
suffix list and how it can be

2321
01:23:41,360 --> 01:23:42,960
implemented

2322
01:23:42,960 --> 01:23:45,280
or mapped onto the dns and

2323
01:23:45,280 --> 01:23:48,320
on the dns query service that we run for

2324
01:23:48,320 --> 01:23:49,520
it

2325
01:23:49,520 --> 01:23:51,120
so here's a quick

2326
01:23:51,120 --> 01:23:53,600
public suffix list introduction a public

2327
01:23:53,600 --> 01:23:56,239
suffix is a suffix or domain suffix

2328
01:23:56,239 --> 01:23:58,960
under which internet users can or could

2329
01:23:58,960 --> 01:24:01,199
directly register names some examples of

2330
01:24:01,199 --> 01:24:03,520
public suffixes are dot com dot co dot

2331
01:24:03,520 --> 01:24:04,400
uk

2332
01:24:04,400 --> 01:24:06,560
and longer ones like

2333
01:24:06,560 --> 01:24:07,760
you know more common than this one

2334
01:24:07,760 --> 01:24:08,880
probably s

2335
01:24:08,880 --> 01:24:12,080
is s3 dot amazon aws.com

2336
01:24:12,080 --> 01:24:14,000
and the public suffix list is a list of

2337
01:24:14,000 --> 01:24:15,360
all those

2338
01:24:15,360 --> 01:24:17,360
suffixes that are known

2339
01:24:17,360 --> 01:24:19,040
yeah so what does it mean um the public

2340
01:24:19,040 --> 01:24:21,600
suffix list informs about policy and

2341
01:24:21,600 --> 01:24:23,600
organizational boundaries in the domain

2342
01:24:23,600 --> 01:24:24,719
space

2343
01:24:24,719 --> 01:24:26,880
um it supports all kinds of things

2344
01:24:26,880 --> 01:24:29,040
including wild cards and exceptions from

2345
01:24:29,040 --> 01:24:30,239
wildcards

2346
01:24:30,239 --> 01:24:32,560
and it's maintained by the community

2347
01:24:32,560 --> 01:24:33,440
um

2348
01:24:33,440 --> 01:24:34,880
on github and

2349
01:24:34,880 --> 01:24:37,040
the regular mode is provided as a text

2350
01:24:37,040 --> 01:24:38,639
file

2351
01:24:38,639 --> 01:24:40,800
yeah so that's the public suffix list

2352
01:24:40,800 --> 01:24:43,280
what's it used for um so browsers use it

2353
01:24:43,280 --> 01:24:45,280
um for scripting scoping and cookie

2354
01:24:45,280 --> 01:24:47,440
scoping um it's called the same origin

2355
01:24:47,440 --> 01:24:49,040
policy i think

2356
01:24:49,040 --> 01:24:50,719
for domain highlighting in the address

2357
01:24:50,719 --> 01:24:55,280
bar so that you can see when you are at

2358
01:24:57,600 --> 01:24:58,080
for paypal.com.somethingelse.com

2359
01:24:58,080 --> 01:25:00,560
prevention it's used by by

2360
01:25:00,560 --> 01:25:02,480
certificate authorities

2361
01:25:02,480 --> 01:25:04,560
to ensure that people don't get wild

2362
01:25:04,560 --> 01:25:06,880
cards for public suffixes

2363
01:25:06,880 --> 01:25:10,159
it's also used by dns operators like us

2364
01:25:10,159 --> 01:25:12,320
to prevent in a multi-tenant setup that

2365
01:25:12,320 --> 01:25:14,080
people register public suffixes and

2366
01:25:14,080 --> 01:25:15,679
therefore block other customers from

2367
01:25:15,679 --> 01:25:16,639
creating

2368
01:25:16,639 --> 01:25:18,880
um zones underneath the public suffix

2369
01:25:18,880 --> 01:25:20,639
like c-o-d-k

2370
01:25:20,639 --> 01:25:22,239
and it's used by other technical

2371
01:25:22,239 --> 01:25:23,920
standards like dmarc to identify the

2372
01:25:23,920 --> 01:25:26,400
organizational domain which is the one

2373
01:25:26,400 --> 01:25:28,639
before the public suffix some called it

2374
01:25:28,639 --> 01:25:30,719
the registrable domain

2375
01:25:30,719 --> 01:25:32,480
and it's used for

2376
01:25:32,480 --> 01:25:33,760
email policy

2377
01:25:33,760 --> 01:25:36,480
boundaries here

2378
01:25:36,719 --> 01:25:38,239
so the question is why would it need a

2379
01:25:38,239 --> 01:25:41,760
piece a psl query service

2380
01:25:41,760 --> 01:25:43,520
from the dns i mean all the applications

2381
01:25:43,520 --> 01:25:46,159
i just mentioned already do work

2382
01:25:46,159 --> 01:25:47,600
but there are some downsides if you

2383
01:25:47,600 --> 01:25:49,520
don't have a query service so first of

2384
01:25:49,520 --> 01:25:51,199
all applications have to bring a copy of

2385
01:25:51,199 --> 01:25:52,719
the list and they need to keep it up to

2386
01:25:52,719 --> 01:25:53,600
date

2387
01:25:53,600 --> 01:25:54,960
they have to parse it which is not

2388
01:25:54,960 --> 01:25:57,199
trivial because extracting information

2389
01:25:57,199 --> 01:25:59,360
from the psl requires an algorithm that

2390
01:25:59,360 --> 01:26:01,600
has six or seven steps i believe you can

2391
01:26:01,600 --> 01:26:04,000
check it up check it out on the public

2392
01:26:04,000 --> 01:26:05,840
suffix.org website

2393
01:26:05,840 --> 01:26:07,679
and if you do have a dns based query

2394
01:26:07,679 --> 01:26:09,920
service um you don't need to parse and

2395
01:26:09,920 --> 01:26:12,560
refresh anything and it would be nice

2396
01:26:12,560 --> 01:26:15,040
to have the capability to just use that

2397
01:26:15,040 --> 01:26:17,360
query service to retrieve any domain's

2398
01:26:17,360 --> 01:26:19,280
public suffix ad hoc with a simple

2399
01:26:19,280 --> 01:26:20,400
lookup

2400
01:26:20,400 --> 01:26:22,400
and even have that cacheable

2401
01:26:22,400 --> 01:26:25,440
and yeah so it also means you can use

2402
01:26:25,440 --> 01:26:28,000
standard dns tooling or libraries which

2403
01:26:28,000 --> 01:26:29,360
is usually around and you don't need

2404
01:26:29,360 --> 01:26:32,719
special specialized tooling

2405
01:26:32,800 --> 01:26:36,199
so here's how

2406
01:26:36,400 --> 01:26:38,239
here's how we thought this could work so

2407
01:26:38,239 --> 01:26:41,600
we created a special zone

2408
01:26:41,600 --> 01:26:42,639
and

2409
01:26:42,639 --> 01:26:44,400
iterate over this public suffix list and

2410
01:26:44,400 --> 01:26:46,880
take each public suffix and create a ptr

2411
01:26:46,880 --> 01:26:48,080
record for it

2412
01:26:48,080 --> 01:26:50,639
and we use the public suffix both as

2413
01:26:50,639 --> 01:26:51,840
the owner name

2414
01:26:51,840 --> 01:26:54,800
under this zone and also as the value of

2415
01:26:54,800 --> 01:26:56,000
the um

2416
01:26:56,000 --> 01:26:58,000
the ptr record so that means if you

2417
01:26:58,000 --> 01:27:00,800
would query the ptr record for co.uk dot

2418
01:27:00,800 --> 01:27:02,000
whatever the

2419
01:27:02,000 --> 01:27:03,440
zone you're using is

2420
01:27:03,440 --> 01:27:05,600
it would mean that the response would be

2421
01:27:05,600 --> 01:27:07,920
the public suffix of c o dot uk is c out

2422
01:27:07,920 --> 01:27:09,120
of uk

2423
01:27:09,120 --> 01:27:10,320
um

2424
01:27:10,320 --> 01:27:12,239
that in itself is not very informative

2425
01:27:12,239 --> 01:27:14,880
but on other names um that you could

2426
01:27:14,880 --> 01:27:15,920
think of

2427
01:27:15,920 --> 01:27:17,920
um we configured such that they have a

2428
01:27:17,920 --> 01:27:19,600
cname record or are covered by a

2429
01:27:19,600 --> 01:27:21,840
wildcard cname record and that means

2430
01:27:21,840 --> 01:27:23,360
anytime you query something else for

2431
01:27:23,360 --> 01:27:26,080
example example dot co dot dk

2432
01:27:26,080 --> 01:27:26,960
dot

2433
01:27:26,960 --> 01:27:27,760
the

2434
01:27:27,760 --> 01:27:29,520
lookup zone

2435
01:27:29,520 --> 01:27:30,960
the cnames would take care of the

2436
01:27:30,960 --> 01:27:33,600
routing and you would still end up at

2437
01:27:33,600 --> 01:27:35,440
this ptr record i just mentioned so you

2438
01:27:35,440 --> 01:27:36,960
can

2439
01:27:36,960 --> 01:27:38,560
very easily retrieve

2440
01:27:38,560 --> 01:27:40,239
any domains public suffix by just

2441
01:27:40,239 --> 01:27:42,719
querying by prefixing that domain to the

2442
01:27:42,719 --> 01:27:44,840
lookup zone and then querying the ptr

2443
01:27:44,840 --> 01:27:48,080
record um in some cases several rules

2444
01:27:48,080 --> 01:27:52,000
apply um to one domain name and then

2445
01:27:52,000 --> 01:27:53,360
of these several rules one will be the

2446
01:27:53,360 --> 01:27:55,120
winning one for example if you have a

2447
01:27:55,120 --> 01:27:56,560
white card and then there's a wildcard

2448
01:27:56,560 --> 01:27:59,760
exception which the ps the psl

2449
01:27:59,760 --> 01:28:02,320
specification does allow in that case

2450
01:28:02,320 --> 01:28:03,840
only the final outcome will be given in

2451
01:28:03,840 --> 01:28:07,120
the ptr record and for documentation or

2452
01:28:07,120 --> 01:28:09,040
studies or whatever people want to do we

2453
01:28:09,040 --> 01:28:11,280
give the other rules um as txt records

2454
01:28:11,280 --> 01:28:13,679
on the same names

2455
01:28:13,679 --> 01:28:15,360
um we implemented the whole thing under

2456
01:28:15,360 --> 01:28:17,440
query.publicsuffix.zone

2457
01:28:17,440 --> 01:28:22,000
and authenticity is provided by dnssec

2458
01:28:22,080 --> 01:28:23,360
during implementation there were some

2459
01:28:23,360 --> 01:28:25,120
challenges so as i said before the

2460
01:28:25,120 --> 01:28:27,360
parsing algorithm is not trivial

2461
01:28:27,360 --> 01:28:29,120
there is a bunch of precedence rules and

2462
01:28:29,120 --> 01:28:30,400
all that

2463
01:28:30,400 --> 01:28:33,600
um also the psl rules almost match dns

2464
01:28:33,600 --> 01:28:35,679
data structures but not quite

2465
01:28:35,679 --> 01:28:38,080
so there's things like inline wildcards

2466
01:28:38,080 --> 01:28:40,639
that i will get to later

2467
01:28:40,639 --> 01:28:42,719
and also if you have say the public

2468
01:28:42,719 --> 01:28:45,920
suffix com which um gets a ptr record in

2469
01:28:45,920 --> 01:28:47,679
our case and then you have something

2470
01:28:47,679 --> 01:28:50,480
like s3 dot dual stack dot west europe

2471
01:28:50,480 --> 01:28:53,199
dot amazon aws that's something there

2472
01:28:53,199 --> 01:28:55,199
will be a lot of empty non-terminals in

2473
01:28:55,199 --> 01:28:57,199
between so you need to have a cname

2474
01:28:57,199 --> 01:28:59,199
chain to fix those up to be able to

2475
01:28:59,199 --> 01:29:01,280
answer all the different

2476
01:29:01,280 --> 01:29:02,719
questions for public suffixes on the

2477
01:29:02,719 --> 01:29:04,480
intermediate level

2478
01:29:04,480 --> 01:29:05,440
um

2479
01:29:05,440 --> 01:29:09,520
yeah and so if you look at the 20k

2480
01:29:09,520 --> 01:29:11,280
records that are necessary for psl

2481
01:29:11,280 --> 01:29:14,000
mapping itself um

2482
01:29:14,000 --> 01:29:16,560
which includes the ptrs and the cnames

2483
01:29:16,560 --> 01:29:18,159
and there will be an additional 55k

2484
01:29:18,159 --> 01:29:19,360
records for

2485
01:29:19,360 --> 01:29:21,600
signing and nsec and all that stuff and

2486
01:29:21,600 --> 01:29:23,520
so there's a pretty large zone that

2487
01:29:23,520 --> 01:29:24,960
results from this and if you do an

2488
01:29:24,960 --> 01:29:27,199
incremental update you have to calculate

2489
01:29:27,199 --> 01:29:29,040
a very large diff and all that so so

2490
01:29:29,040 --> 01:29:31,199
that was a little bit of a challenge too

2491
01:29:31,199 --> 01:29:33,760
but it was also quite a nice exercise to

2492
01:29:33,760 --> 01:29:38,080
work our dsec api on which we host this

2493
01:29:38,080 --> 01:29:40,719
yeah so this is a very

2494
01:29:40,719 --> 01:29:42,719
quick screenshot of the code that does

2495
01:29:42,719 --> 01:29:44,400
the central processing it's just to

2496
01:29:44,400 --> 01:29:46,560
illustrate how many steps there are and

2497
01:29:46,560 --> 01:29:48,560
essentially all of them

2498
01:29:48,560 --> 01:29:50,960
correspond to one of the steps in the

2499
01:29:50,960 --> 01:29:54,000
algorithm from publicsuffix.org

2500
01:29:54,000 --> 01:29:56,159
here's a bunch of examples

2501
01:29:56,159 --> 01:29:58,000
how to do these lookups um so standard

2502
01:29:58,000 --> 01:30:00,400
case would be to do a ptr lookup on

2503
01:30:00,400 --> 01:30:02,960
indico.dnsoarc.net

2504
01:30:02,960 --> 01:30:06,080
um dot query.publicsuffix.zone

2505
01:30:06,080 --> 01:30:07,679
and as you can see you immediately get

2506
01:30:07,679 --> 01:30:09,199
covered by the

2507
01:30:09,199 --> 01:30:11,840
wildcard.net

2508
01:30:11,840 --> 01:30:15,120
ptr s4c name record which isn't shown as

2509
01:30:15,120 --> 01:30:16,880
the white card here but of course the

2510
01:30:16,880 --> 01:30:19,520
indie code of dns arc will fall under

2511
01:30:19,520 --> 01:30:22,080
that and it directs you to the net

2512
01:30:22,080 --> 01:30:22,960
um

2513
01:30:22,960 --> 01:30:24,719
ptr record and then that is getting

2514
01:30:24,719 --> 01:30:28,239
looked up and the result is that net

2515
01:30:28,239 --> 01:30:31,080
is the public suffix of in the code of

2516
01:30:31,080 --> 01:30:32,880
dnsr.net

2517
01:30:32,880 --> 01:30:35,199
um another example would be a longer one

2518
01:30:35,199 --> 01:30:37,600
that i mentioned before s3.dualstack eos

2519
01:30:37,600 --> 01:30:39,679
1 amazon aws.com

2520
01:30:39,679 --> 01:30:43,520
if you look that up you will

2521
01:30:44,159 --> 01:30:45,920
because that is a public suffix you will

2522
01:30:45,920 --> 01:30:48,000
immediately hit the ptr record and we'll

2523
01:30:48,000 --> 01:30:50,880
just get that response however s4 for

2524
01:30:50,880 --> 01:30:52,960
example is not a public suffix so if you

2525
01:30:52,960 --> 01:30:55,280
query for that as i mentioned before we

2526
01:30:55,280 --> 01:30:56,639
have to fill up all these different

2527
01:30:56,639 --> 01:30:59,040
empty non-terminals with cname chains

2528
01:30:59,040 --> 01:31:00,960
and so you get directed from s4 to dual

2529
01:31:00,960 --> 01:31:03,120
stack and from dual stack to eu s1 and

2530
01:31:03,120 --> 01:31:05,199
so on and so forth and in the end it

2531
01:31:05,199 --> 01:31:06,719
tells you that the

2532
01:31:06,719 --> 01:31:09,040
public suffix of that name is dot com so

2533
01:31:09,040 --> 01:31:11,280
one could say that's not very elegant

2534
01:31:11,280 --> 01:31:13,120
but if you want to do this in the dns as

2535
01:31:13,120 --> 01:31:14,480
far as i'm aware that's the only way of

2536
01:31:14,480 --> 01:31:17,120
doing it

2537
01:31:17,120 --> 01:31:18,800
to give you an example of having

2538
01:31:18,800 --> 01:31:20,400
additional

2539
01:31:20,400 --> 01:31:22,480
rules documented in text records we can

2540
01:31:22,480 --> 01:31:24,480
look at wildcards with exceptions so

2541
01:31:24,480 --> 01:31:27,679
here we're looking at www.ck

2542
01:31:27,679 --> 01:31:29,360
and you can see that the result of that

2543
01:31:29,360 --> 01:31:30,560
is

2544
01:31:30,560 --> 01:31:33,600
that the public suffix is star dot so

2545
01:31:33,600 --> 01:31:34,639
that means

2546
01:31:34,639 --> 01:31:35,440
um

2547
01:31:35,440 --> 01:31:38,080
the last label is the public suffix just

2548
01:31:38,080 --> 01:31:39,280
ck

2549
01:31:39,280 --> 01:31:40,880
um so your application needs to know

2550
01:31:40,880 --> 01:31:42,800
that but that's kind of simple and we

2551
01:31:42,800 --> 01:31:45,280
also wrote a library that

2552
01:31:45,280 --> 01:31:46,719
interprets things accordingly you don't

2553
01:31:46,719 --> 01:31:48,960
have to know it yourself

2554
01:31:48,960 --> 01:31:51,600
so all top-level domains by definition

2555
01:31:51,600 --> 01:31:53,360
are public suffixes

2556
01:31:53,360 --> 01:31:54,560
it's not my definition it's the

2557
01:31:54,560 --> 01:31:56,719
definition of public suffix.org

2558
01:31:56,719 --> 01:31:58,719
and so ck would be the public suffix

2559
01:31:58,719 --> 01:32:01,679
here however um

2560
01:32:01,679 --> 01:32:03,719
there is a text record telling you that

2561
01:32:03,719 --> 01:32:06,320
star.ck is also public suffixes so for

2562
01:32:06,320 --> 01:32:08,719
example fubar.ck would be a public

2563
01:32:08,719 --> 01:32:11,920
suffix but there is an exception www.ck

2564
01:32:11,920 --> 01:32:14,239
is not a public suffix so

2565
01:32:14,239 --> 01:32:16,239
the parent public suffix applies which

2566
01:32:16,239 --> 01:32:17,600
is the top-level domain so this is how

2567
01:32:17,600 --> 01:32:18,800
this

2568
01:32:18,800 --> 01:32:21,120
wildcard exception stuff works as far as

2569
01:32:21,120 --> 01:32:22,400
applications are concerned they would

2570
01:32:22,400 --> 01:32:26,599
only have to look at the ptr record

2571
01:32:26,639 --> 01:32:29,040
um we implemented this under query the

2572
01:32:29,040 --> 01:32:30,960
public suffix.org so you can try out

2573
01:32:30,960 --> 01:32:32,400
these things with dig

2574
01:32:32,400 --> 01:32:34,800
um yourself if you like um we also have

2575
01:32:34,800 --> 01:32:37,120
a website um on public suffix dot zone

2576
01:32:37,120 --> 01:32:39,280
which has a live demo it's just a form

2577
01:32:39,280 --> 01:32:40,960
that sends javascript requests to

2578
01:32:40,960 --> 01:32:43,920
google's uh resolver and displays the

2579
01:32:43,920 --> 01:32:46,320
ptr answer on the page and there's a

2580
01:32:46,320 --> 01:32:48,560
python implementation it has a library

2581
01:32:48,560 --> 01:32:49,760
and a cli

2582
01:32:49,760 --> 01:32:53,040
for both doing lookups and

2583
01:32:53,040 --> 01:32:54,560
and interpreting things accordingly and

2584
01:32:54,560 --> 01:32:55,679
showing the text records if you're

2585
01:32:55,679 --> 01:32:58,639
interested it also um knows how to pass

2586
01:32:58,639 --> 01:33:01,120
the psl and output

2587
01:33:01,120 --> 01:33:03,360
um

2588
01:33:03,440 --> 01:33:06,080
api payload to do the updates in the dns

2589
01:33:06,080 --> 01:33:09,679
using our own diesel api but the library

2590
01:33:09,679 --> 01:33:11,120
itself is agnostic

2591
01:33:11,120 --> 01:33:12,239
of the

2592
01:33:12,239 --> 01:33:14,239
dns provider so if somebody

2593
01:33:14,239 --> 01:33:16,159
else wanted to set up a zone like that

2594
01:33:16,159 --> 01:33:18,080
and a different dns provided would be

2595
01:33:18,080 --> 01:33:20,000
quite trivial one would have to write

2596
01:33:20,000 --> 01:33:22,880
one function that transforms the

2597
01:33:22,880 --> 01:33:24,400
output in the corresponding json or

2598
01:33:24,400 --> 01:33:26,560
whatever the api needs and then put it

2599
01:33:26,560 --> 01:33:28,800
in as a very simple class and then the

2600
01:33:28,800 --> 01:33:32,080
same library can be used in this

2601
01:33:32,560 --> 01:33:35,360
there are some limitations

2602
01:33:35,360 --> 01:33:37,199
so as i said before

2603
01:33:37,199 --> 01:33:40,159
the psl does support inline wildcards

2604
01:33:40,159 --> 01:33:43,120
like foo dot wildcard.example.com

2605
01:33:43,120 --> 01:33:45,440
and the dns doesn't support that um so

2606
01:33:45,440 --> 01:33:47,920
if you ask for

2607
01:33:47,920 --> 01:33:48,840
a

2608
01:33:48,840 --> 01:33:50,560
um

2609
01:33:50,560 --> 01:33:52,480
for the public suffix of such a domain

2610
01:33:52,480 --> 01:33:54,239
you will not get a ptr record you will

2611
01:33:54,239 --> 01:33:55,920
only get the tax records telling you

2612
01:33:55,920 --> 01:33:57,360
that those are the rules that apply and

2613
01:33:57,360 --> 01:33:59,920
it can't really be mapped into the dns

2614
01:33:59,920 --> 01:34:02,400
however the good thing is that the psl

2615
01:34:02,400 --> 01:34:04,400
doesn't actually contain such entries at

2616
01:34:04,400 --> 01:34:05,440
the moment

2617
01:34:05,440 --> 01:34:07,600
and the maintainers are considering to

2618
01:34:07,600 --> 01:34:09,760
drop this

2619
01:34:09,760 --> 01:34:12,639
feature so to speak so um

2620
01:34:12,639 --> 01:34:14,239
this limitation isn't really a

2621
01:34:14,239 --> 01:34:16,800
limitation currently practically and it

2622
01:34:16,800 --> 01:34:18,400
probably also will not be limitation

2623
01:34:18,400 --> 01:34:20,400
anymore theoretically in the future

2624
01:34:20,400 --> 01:34:22,560
so in practice the dns information the

2625
01:34:22,560 --> 01:34:24,800
dns implementation fully covers all

2626
01:34:24,800 --> 01:34:26,159
public suffixes that are currently

2627
01:34:26,159 --> 01:34:27,440
defined

2628
01:34:27,440 --> 01:34:29,600
other limitations are on updates and we

2629
01:34:29,600 --> 01:34:30,639
currently

2630
01:34:30,639 --> 01:34:32,480
trigger updates manually

2631
01:34:32,480 --> 01:34:33,600
um

2632
01:34:33,600 --> 01:34:35,280
that's because

2633
01:34:35,280 --> 01:34:36,800
the public suffix list usually in

2634
01:34:36,800 --> 01:34:38,560
applications isn't up to date anyways

2635
01:34:38,560 --> 01:34:40,159
because you have to

2636
01:34:40,159 --> 01:34:42,159
install a new version of let's say

2637
01:34:42,159 --> 01:34:45,199
chrome or firefox and to

2638
01:34:45,199 --> 01:34:46,560
get the updates so it doesn't really

2639
01:34:46,560 --> 01:34:48,639
depend on the day but it could easily be

2640
01:34:48,639 --> 01:34:50,239
automated using a github action or a

2641
01:34:50,239 --> 01:34:51,760
github adam feed because the whole

2642
01:34:51,760 --> 01:34:54,880
thing's managed on github

2643
01:34:54,880 --> 01:34:57,280
you've got two videos

2644
01:34:57,280 --> 01:34:58,639
yeah thank you

2645
01:34:58,639 --> 01:35:01,119
um the question is um

2646
01:35:01,119 --> 01:35:02,560
what

2647
01:35:02,560 --> 01:35:04,159
should be done with this um so for us it

2648
01:35:04,159 --> 01:35:05,600
works perfectly well for the internal

2649
01:35:05,600 --> 01:35:06,880
use case

2650
01:35:06,880 --> 01:35:09,920
at the esec to keep customers from

2651
01:35:09,920 --> 01:35:11,760
registering public suffixes and messing

2652
01:35:11,760 --> 01:35:13,600
with other people's um

2653
01:35:13,600 --> 01:35:15,520
attempts to register zones underneath

2654
01:35:15,520 --> 01:35:16,480
them

2655
01:35:16,480 --> 01:35:18,159
so that's fine so we're completely

2656
01:35:18,159 --> 01:35:19,520
satisfied it works pretty well has been

2657
01:35:19,520 --> 01:35:21,199
working for two three years

2658
01:35:21,199 --> 01:35:22,000
um

2659
01:35:22,000 --> 01:35:23,679
however we

2660
01:35:23,679 --> 01:35:26,159
are very happy to to make this

2661
01:35:26,159 --> 01:35:27,520
a service that is of greater use to the

2662
01:35:27,520 --> 01:35:28,480
community

2663
01:35:28,480 --> 01:35:30,320
the question is if there are such use

2664
01:35:30,320 --> 01:35:32,159
cases and whether they would need

2665
01:35:32,159 --> 01:35:33,679
automated zone updates in which case we

2666
01:35:33,679 --> 01:35:35,440
could implement that also the public

2667
01:35:35,440 --> 01:35:37,840
suffix list um first has the section of

2668
01:35:37,840 --> 01:35:38,880
icon

2669
01:35:38,880 --> 01:35:39,679
um

2670
01:35:39,679 --> 01:35:41,280
tlds and all that and then the private

2671
01:35:41,280 --> 01:35:43,600
section like the amazon stuff is

2672
01:35:43,600 --> 01:35:46,560
currently not mapped onto the dns

2673
01:35:46,560 --> 01:35:48,480
i mean this this flag is not mapped so

2674
01:35:48,480 --> 01:35:50,880
you can see from the dns lookup to what

2675
01:35:50,880 --> 01:35:53,679
section the public suffix belongs so one

2676
01:35:53,679 --> 01:35:54,880
could also think about whether that

2677
01:35:54,880 --> 01:35:57,760
should be changed and so if this should

2678
01:35:57,760 --> 01:35:58,400
be

2679
01:35:58,400 --> 01:36:00,320
made a more useful

2680
01:36:00,320 --> 01:36:02,159
service for the community

2681
01:36:02,159 --> 01:36:04,080
we're also happy to discuss how it could

2682
01:36:04,080 --> 01:36:05,119
be run

2683
01:36:05,119 --> 01:36:06,880
maybe there should be

2684
01:36:06,880 --> 01:36:08,000
some

2685
01:36:08,000 --> 01:36:09,360
i don't know

2686
01:36:09,360 --> 01:36:11,040
somebody

2687
01:36:11,040 --> 01:36:13,119
having the hat on or maybe maybe it's

2688
01:36:13,119 --> 01:36:14,719
enough if we do that or all that we just

2689
01:36:14,719 --> 01:36:16,960
wanted to put um the idea out um and

2690
01:36:16,960 --> 01:36:19,199
they're happy to discuss all that

2691
01:36:19,199 --> 01:36:21,760
um there are also um some privacy

2692
01:36:21,760 --> 01:36:24,000
concerns obviously because the psl

2693
01:36:24,000 --> 01:36:26,480
lookup authoritative server

2694
01:36:26,480 --> 01:36:27,520
would learn

2695
01:36:27,520 --> 01:36:29,199
the domain names that people query so

2696
01:36:29,199 --> 01:36:31,440
maybe it wouldn't be a great idea to use

2697
01:36:31,440 --> 01:36:33,040
this stuff in

2698
01:36:33,040 --> 01:36:35,360
a browser for example

2699
01:36:35,360 --> 01:36:38,639
just like ocsp would be leaking things

2700
01:36:38,639 --> 01:36:40,480
however

2701
01:36:40,480 --> 01:36:43,119
one one

2702
01:36:43,199 --> 01:36:45,119
measure to prevent that would be that a

2703
01:36:45,119 --> 01:36:46,560
resolver could have a local copy for

2704
01:36:46,560 --> 01:36:48,400
example of this zone i'm not saying this

2705
01:36:48,400 --> 01:36:50,159
should be done but there's various ways

2706
01:36:50,159 --> 01:36:52,400
of handling those kinds of concerns i

2707
01:36:52,400 --> 01:36:54,400
have a backup slide on that if that is

2708
01:36:54,400 --> 01:36:56,000
what everybody's interested in

2709
01:36:56,000 --> 01:36:57,840
and otherwise i'm happy to take your

2710
01:36:57,840 --> 01:37:00,239
questions

2711
01:37:03,840 --> 01:37:07,440
oh thank you peter and as always please

2712
01:37:07,440 --> 01:37:10,080
type your questions in the q a pod

2713
01:37:10,080 --> 01:37:11,760
or raise your hand

2714
01:37:11,760 --> 01:37:15,280
and we will open the mics for you

2715
01:37:15,280 --> 01:37:16,880
and um

2716
01:37:16,880 --> 01:37:18,239
and as always

2717
01:37:18,239 --> 01:37:21,760
answer the polls we really would like to

2718
01:37:21,760 --> 01:37:22,880
get

2719
01:37:22,880 --> 01:37:25,040
information back and from

2720
01:37:25,040 --> 01:37:26,000
to the

2721
01:37:26,000 --> 01:37:30,159
program committee to see if our

2722
01:37:31,440 --> 01:37:34,000
assessment of the speakers matches what

2723
01:37:34,000 --> 01:37:35,440
the attendees

2724
01:37:35,440 --> 01:37:38,639
say so and that's you we do this for so

2725
01:37:38,639 --> 01:37:41,440
please give us some hints what you like

2726
01:37:41,440 --> 01:37:42,320
um

2727
01:37:42,320 --> 01:37:43,840
yes so we have a first question here

2728
01:37:43,840 --> 01:37:45,040
peter

2729
01:37:45,040 --> 01:37:46,880
greg charles asked

2730
01:37:46,880 --> 01:37:49,760
what with the s4 example

2731
01:37:49,760 --> 01:37:52,239
do you have to have c names for every

2732
01:37:52,239 --> 01:37:54,559
level

2733
01:37:57,920 --> 01:38:00,400
i think so

2734
01:38:00,880 --> 01:38:05,040
so the alternative would be um to have

2735
01:38:07,119 --> 01:38:10,320
a cname at let's say a star.com right

2736
01:38:10,320 --> 01:38:12,159
just like star.net

2737
01:38:12,159 --> 01:38:13,920
earlier

2738
01:38:13,920 --> 01:38:15,679
and

2739
01:38:15,679 --> 01:38:17,840
my understanding is if you have star.com

2740
01:38:17,840 --> 01:38:18,880
cname

2741
01:38:18,880 --> 01:38:20,800
you know pointing to the com

2742
01:38:20,800 --> 01:38:24,239
entry and then you add

2743
01:38:24,239 --> 01:38:27,040
the s3 ptr record

2744
01:38:27,040 --> 01:38:29,520
with all the intermediate layers here

2745
01:38:29,520 --> 01:38:32,239
then that would make the

2746
01:38:32,239 --> 01:38:34,239
wildcard not apply on the intermediate

2747
01:38:34,239 --> 01:38:36,080
levels i think

2748
01:38:36,080 --> 01:38:37,360
at least i believe i tried that and it

2749
01:38:37,360 --> 01:38:38,960
didn't work or at least didn't work

2750
01:38:38,960 --> 01:38:40,239
reliably

2751
01:38:40,239 --> 01:38:42,239
but maybe somebody else who knows more

2752
01:38:42,239 --> 01:38:44,639
about dns resolution

2753
01:38:44,639 --> 01:38:46,080
can

2754
01:38:46,080 --> 01:38:47,040
weigh in

2755
01:38:47,040 --> 01:38:48,400
hello this is peter van dyke

2756
01:38:48,400 --> 01:38:51,119
powerdayness what you say is correct

2757
01:38:51,119 --> 01:38:52,800
those empty non-terminals would

2758
01:38:52,800 --> 01:38:53,920
otherwise

2759
01:38:53,920 --> 01:38:56,239
avoid wildcard matching

2760
01:38:56,239 --> 01:38:58,800
so yeah that's because those notes

2761
01:38:58,800 --> 01:39:00,880
yeah those notes exist in the dns well

2762
01:39:00,880 --> 01:39:02,639
without the s3 they wouldn't be existing

2763
01:39:02,639 --> 01:39:04,000
so they would be covered by the wild

2764
01:39:04,000 --> 01:39:05,840
card yeah i remember exactly so as far

2765
01:39:05,840 --> 01:39:07,520
as i can tell you do need all those c

2766
01:39:07,520 --> 01:39:10,000
names yes

2767
01:39:11,280 --> 01:39:12,880
good and then we

2768
01:39:12,880 --> 01:39:15,360
uh have a question from jar friedrich

2769
01:39:15,360 --> 01:39:16,639
greipsland

2770
01:39:16,639 --> 01:39:17,600
and

2771
01:39:17,600 --> 01:39:19,440
wouldn't it make more sense to have the

2772
01:39:19,440 --> 01:39:21,440
zone operators publish something like

2773
01:39:21,440 --> 01:39:23,920
this for their own zones

2774
01:39:23,920 --> 01:39:25,679
in the zones maybe

2775
01:39:25,679 --> 01:39:27,760
then one could do away with the central

2776
01:39:27,760 --> 01:39:30,159
management of the psl and just rely on

2777
01:39:30,159 --> 01:39:34,159
existing dns delegation infrastructure

2778
01:39:35,600 --> 01:39:38,080
i think there is um

2779
01:39:38,080 --> 01:39:39,840
discussion about that on the psl mailing

2780
01:39:39,840 --> 01:39:41,920
list the discussion is i think three

2781
01:39:41,920 --> 01:39:43,520
years old or something

2782
01:39:43,520 --> 01:39:45,119
i don't remember

2783
01:39:45,119 --> 01:39:47,360
the different arguments

2784
01:39:47,360 --> 01:39:48,960
um

2785
01:39:48,960 --> 01:39:50,159
somehow

2786
01:39:50,159 --> 01:39:51,280
apparently

2787
01:39:51,280 --> 01:39:53,440
participants of the discussion

2788
01:39:53,440 --> 01:39:55,280
reached the conclusion that the psl is

2789
01:39:55,280 --> 01:39:56,560
still

2790
01:39:56,560 --> 01:40:00,080
beneficial needed or necessary

2791
01:40:00,080 --> 01:40:01,360
and

2792
01:40:01,360 --> 01:40:03,920
by the fact that it's used in browsers

2793
01:40:03,920 --> 01:40:05,600
i would think that probably that is

2794
01:40:05,600 --> 01:40:07,520
correct but i can't give you any precise

2795
01:40:07,520 --> 01:40:09,920
reasons so i would refer you to the psl

2796
01:40:09,920 --> 01:40:12,239
mailing list which is um i think

2797
01:40:12,239 --> 01:40:14,199
announced or advertised on

2798
01:40:14,199 --> 01:40:16,560
publicsuffix.org and there's also the

2799
01:40:16,560 --> 01:40:19,760
github repository um where the pls the

2800
01:40:19,760 --> 01:40:21,760
psl is maintained and they have a bunch

2801
01:40:21,760 --> 01:40:24,320
of issues for improving the psl for

2802
01:40:24,320 --> 01:40:26,480
example dropping this inline wildcard

2803
01:40:26,480 --> 01:40:27,440
stuff

2804
01:40:27,440 --> 01:40:28,719
and if i

2805
01:40:28,719 --> 01:40:30,719
remember correctly there is also an

2806
01:40:30,719 --> 01:40:33,280
issue about the question you raised so i

2807
01:40:33,280 --> 01:40:37,080
would also refer you there

2808
01:40:39,440 --> 01:40:40,960
good

2809
01:40:40,960 --> 01:40:42,639
well i don't see any more questions

2810
01:40:42,639 --> 01:40:44,960
peter

2811
01:40:45,280 --> 01:40:46,400
thank you

2812
01:40:46,400 --> 01:40:48,480
thank you very much

2813
01:40:48,480 --> 01:40:50,560
and so um that

2814
01:40:50,560 --> 01:40:52,719
concludes our morning session

2815
01:40:52,719 --> 01:40:54,960
uh um thank you for having me as your

2816
01:40:54,960 --> 01:40:58,000
host uh we now have a long break lunch

2817
01:40:58,000 --> 01:41:01,679
break and we will convene back at

2818
01:41:01,679 --> 01:41:03,600
1 30 utc

2819
01:41:03,600 --> 01:41:05,280
so

2820
01:41:05,280 --> 01:41:07,119
yeah enjoy your lunch

2821
01:41:07,119 --> 01:41:08,000
and

2822
01:41:08,000 --> 01:41:09,199
see you

2823
01:41:09,199 --> 01:41:12,080
at 130.

2824
01:41:12,159 --> 01:41:14,880
hello everyone um jacob zach on behalf

2825
01:41:14,880 --> 01:41:17,440
of the dnso arc program committee i'd

2826
01:41:17,440 --> 01:41:19,920
like to welcome you back to

2827
01:41:19,920 --> 01:41:23,280
orc 36 day two session three

2828
01:41:23,280 --> 01:41:25,679
um our timekeeper for this session is

2829
01:41:25,679 --> 01:41:27,280
william turp

2830
01:41:27,280 --> 01:41:29,679
and uh we'd like to thank our sponsor

2831
01:41:29,679 --> 01:41:31,840
farisai

2832
01:41:31,840 --> 01:41:34,960
like to welcome tj chung from virginia

2833
01:41:34,960 --> 01:41:37,280
tech who will be presenting

2834
01:41:37,280 --> 01:41:39,280
understanding dns sect debugging

2835
01:41:39,280 --> 01:41:42,000
patterns using dns fizz

2836
01:41:42,000 --> 01:41:43,360
tj whenever you're ready you can share

2837
01:41:43,360 --> 01:41:44,719
your slides

2838
01:41:44,719 --> 01:41:48,800
yep there you go perfect all right

2839
01:41:48,800 --> 01:41:50,719
yeah thanks for the introduction jacob

2840
01:41:50,719 --> 01:41:51,520
so

2841
01:41:51,520 --> 01:41:54,080
um i'd like to talk about understanding

2842
01:41:54,080 --> 01:41:56,480
the title is understanding dns debugging

2843
01:41:56,480 --> 01:41:57,840
pattern using the united views and the

2844
01:41:57,840 --> 01:42:00,159
subtitle is dns challenges from the

2845
01:42:00,159 --> 01:42:02,560
administrator's point of view so this is

2846
01:42:02,560 --> 01:42:05,040
joint work with um casey dco from

2847
01:42:05,040 --> 01:42:07,360
freedom young university so let me start

2848
01:42:07,360 --> 01:42:08,800
it

2849
01:42:08,800 --> 01:42:11,280
so we all know that dns is really

2850
01:42:11,280 --> 01:42:13,840
important so that's why we are here so

2851
01:42:13,840 --> 01:42:16,719
the nsx provides integrity and

2852
01:42:16,719 --> 01:42:19,199
authenticity of dns messages

2853
01:42:19,199 --> 01:42:22,080
but the thing is there are recently more

2854
01:42:22,080 --> 01:42:24,800
and more new internet security protocols

2855
01:42:24,800 --> 01:42:28,239
introduced that rely on dns and dns

2856
01:42:28,239 --> 01:42:31,840
in email security domain mtasts

2857
01:42:31,840 --> 01:42:35,840
dain tlsa records and bme are introduced

2858
01:42:35,840 --> 01:42:39,280
for https performance and security

2859
01:42:39,280 --> 01:42:44,159
https record also recently introduced

2860
01:42:44,159 --> 01:42:46,320
and also this is really great news that

2861
01:42:46,320 --> 01:42:49,119
dnsec deployment trade is increasing so

2862
01:42:49,119 --> 01:42:51,920
this status this that is from borrowed

2863
01:42:51,920 --> 01:42:54,080
from dnsctools.org

2864
01:42:54,080 --> 01:42:56,159
so when you consider the most recent

2865
01:42:56,159 --> 01:42:58,480
snapshots the number of these domain

2866
01:42:58,480 --> 01:43:02,560
names with ds record set is over uh 17

2867
01:43:02,560 --> 01:43:04,960
million which is really great

2868
01:43:04,960 --> 01:43:08,320
and um i briefly mentioned bain

2869
01:43:08,320 --> 01:43:12,560
um then is to secure email uh protocols

2870
01:43:12,560 --> 01:43:13,679
using

2871
01:43:13,679 --> 01:43:15,920
introducing a new dns record type which

2872
01:43:15,920 --> 01:43:17,920
is called tlsa records

2873
01:43:17,920 --> 01:43:20,560
as you can tell the percentage of

2874
01:43:20,560 --> 01:43:23,520
domains with tlsa records

2875
01:43:23,520 --> 01:43:25,440
is really increasing so when you

2876
01:43:25,440 --> 01:43:28,239
consider for example dot s e

2877
01:43:28,239 --> 01:43:30,960
nearly forty percent of uh domains with

2878
01:43:30,960 --> 01:43:35,679
mx records they enable dane as well

2879
01:43:35,679 --> 01:43:37,760
but the thing is uh server side

2880
01:43:37,760 --> 01:43:40,719
management dns management is sometimes

2881
01:43:40,719 --> 01:43:43,199
challenging so left figure shows the

2882
01:43:43,199 --> 01:43:45,280
percentage of domains with specific

2883
01:43:45,280 --> 01:43:47,679
failure reason so this graph is a little

2884
01:43:47,679 --> 01:43:50,560
bit outdated so most recent snapshot is

2885
01:43:50,560 --> 01:43:53,040
december 2016.

2886
01:43:53,040 --> 01:43:55,760
so for example expired and is invalid

2887
01:43:55,760 --> 01:43:58,400
signatures ratio is under one percent

2888
01:43:58,400 --> 01:44:00,639
which is not that bad but when you can

2889
01:44:00,639 --> 01:44:03,280
consider the percent of domains missing

2890
01:44:03,280 --> 01:44:06,239
ds record is sometimes over 30 so which

2891
01:44:06,239 --> 01:44:08,400
means there must be something wrong

2892
01:44:08,400 --> 01:44:10,080
and also

2893
01:44:10,080 --> 01:44:12,400
if you attended yesterday talk we all

2894
01:44:12,400 --> 01:44:15,360
know that slack.com experienced some dns

2895
01:44:15,360 --> 01:44:18,840
outage because of its bogus status and

2896
01:44:18,840 --> 01:44:23,199
nsf.gov is also was experienced outage

2897
01:44:23,199 --> 01:44:25,679
for two days

2898
01:44:25,679 --> 01:44:27,920
so in this research we would like to

2899
01:44:27,920 --> 01:44:30,639
understand what is the most challenging

2900
01:44:30,639 --> 01:44:34,480
things for dns administrators to manage

2901
01:44:34,480 --> 01:44:36,400
dns sex

2902
01:44:36,400 --> 01:44:38,719
so so far there have been lots of

2903
01:44:38,719 --> 01:44:42,719
approaches to understand this specific

2904
01:44:42,719 --> 01:44:45,679
questions using a passive or active

2905
01:44:45,679 --> 01:44:47,440
scans but the thing is they're time

2906
01:44:47,440 --> 01:44:49,679
granularity between the scan is a little

2907
01:44:49,679 --> 01:44:52,320
bit long such as a day or sometimes a

2908
01:44:52,320 --> 01:44:53,440
week

2909
01:44:53,440 --> 01:44:56,400
um so we decided to use dns fees if

2910
01:44:56,400 --> 01:44:58,320
you're not familiar with dns business

2911
01:44:58,320 --> 01:45:00,880
please check this website dnsplus.net it

2912
01:45:00,880 --> 01:45:04,000
is a really awesome tool for visualizing

2913
01:45:04,000 --> 01:45:07,199
uh the status of dns zone and it is

2914
01:45:07,199 --> 01:45:09,840
built and managed by case disio and it

2915
01:45:09,840 --> 01:45:12,000
helps dns administrators deploy and

2916
01:45:12,000 --> 01:45:15,040
manage the nsx so i am a big fan of dnsb

2917
01:45:15,040 --> 01:45:19,040
so if i if i manage my domain name if my

2918
01:45:19,040 --> 01:45:21,360
server setting dns exciting is something

2919
01:45:21,360 --> 01:45:24,560
wrong i go to this website and check the

2920
01:45:24,560 --> 01:45:26,400
status my domain name if it's still

2921
01:45:26,400 --> 01:45:28,159
something wrong i change some

2922
01:45:28,159 --> 01:45:30,080
configuration in my solver and i check

2923
01:45:30,080 --> 01:45:32,639
this website again

2924
01:45:32,639 --> 01:45:36,800
so if you type dns or net on dns fees

2925
01:45:36,800 --> 01:45:39,600
then it what it does is it basically

2926
01:45:39,600 --> 01:45:42,960
fetches a numerous dns records from your

2927
01:45:42,960 --> 01:45:44,960
authority of dns servers and based on

2928
01:45:44,960 --> 01:45:47,840
the research you analyze this the domain

2929
01:45:47,840 --> 01:45:49,880
name because

2930
01:45:49,880 --> 01:45:52,400
dns.dnswork.net is managed perfectly you

2931
01:45:52,400 --> 01:45:54,239
don't see anything you know wrong with

2932
01:45:54,239 --> 01:45:58,480
it but if you type dnssec.fail.org

2933
01:45:58,480 --> 01:46:01,040
you can immediately notice that oh dns

2934
01:46:01,040 --> 01:46:04,159
key is not matched with the ds record so

2935
01:46:04,159 --> 01:46:06,800
the chain of truss is basically broken

2936
01:46:06,800 --> 01:46:09,360
so all the dns records signed by dns

2937
01:46:09,360 --> 01:46:12,400
keys cannot be verified so the status is

2938
01:46:12,400 --> 01:46:14,719
bogus

2939
01:46:14,719 --> 01:46:16,159
so how's the

2940
01:46:16,159 --> 01:46:19,119
dns business data set looks like so

2941
01:46:19,119 --> 01:46:23,520
it spans from 2014 2021 so it is quite

2942
01:46:23,520 --> 01:46:26,639
longitudinal and the number of domains

2943
01:46:26,639 --> 01:46:27,679
um

2944
01:46:27,679 --> 01:46:29,440
scan

2945
01:46:29,440 --> 01:46:32,000
inputted by user is eight a hundred

2946
01:46:32,000 --> 01:46:34,800
thousand and the percentage of signed

2947
01:46:34,800 --> 01:46:37,679
domains is nearly thirty percent so when

2948
01:46:37,679 --> 01:46:39,280
you consider

2949
01:46:39,280 --> 01:46:40,159
that

2950
01:46:40,159 --> 01:46:42,880
the percentage of signed domains under

2951
01:46:42,880 --> 01:46:44,880
for example.com second level domain

2952
01:46:44,880 --> 01:46:46,960
names under dot com is nearly one

2953
01:46:46,960 --> 01:46:49,600
percent it shows that lots of dns

2954
01:46:49,600 --> 01:46:52,560
administrators actually use this website

2955
01:46:52,560 --> 01:46:55,119
for their debugging or managing their

2956
01:46:55,119 --> 01:46:57,759
dns access

2957
01:46:58,000 --> 01:47:01,679
but i mentioned briefly that we are only

2958
01:47:01,679 --> 01:47:04,400
interested in dns videos analysis

2959
01:47:04,400 --> 01:47:07,600
requested by actual administrators but

2960
01:47:07,600 --> 01:47:10,560
thing is dns visa is publicly available

2961
01:47:10,560 --> 01:47:13,199
so anyone can just go to website in the

2962
01:47:13,199 --> 01:47:14,159
uh

2963
01:47:14,159 --> 01:47:15,840
type of random domain names as i

2964
01:47:15,840 --> 01:47:17,679
introduced so

2965
01:47:17,679 --> 01:47:21,119
distinguishing this domain name from the

2966
01:47:21,119 --> 01:47:22,400
analysis

2967
01:47:22,400 --> 01:47:24,960
requested by actual administrator is

2968
01:47:24,960 --> 01:47:26,880
really challenging

2969
01:47:26,880 --> 01:47:29,360
so our first approach is we would like

2970
01:47:29,360 --> 01:47:32,000
to filter some popular popular domain

2971
01:47:32,000 --> 01:47:34,880
name so this graph shows the average

2972
01:47:34,880 --> 01:47:37,760
number of snapshots of domains depending

2973
01:47:37,760 --> 01:47:39,679
on their popularity

2974
01:47:39,679 --> 01:47:40,560
so

2975
01:47:40,560 --> 01:47:42,880
as you can tell the the more you know

2976
01:47:42,880 --> 01:47:45,440
popular domain names seems to have the

2977
01:47:45,440 --> 01:47:47,679
more domain names analysis so for

2978
01:47:47,679 --> 01:47:48,800
example

2979
01:47:48,800 --> 01:47:50,480
because random users just go to the

2980
01:47:50,480 --> 01:47:52,480
website and type google.com in

2981
01:47:52,480 --> 01:47:55,040
facebook.com so

2982
01:47:55,040 --> 01:47:58,639
we would like to filter out such

2983
01:47:58,639 --> 01:48:02,880
popular domain names from our analysis

2984
01:48:02,880 --> 01:48:05,679
and second one is um dns release

2985
01:48:05,679 --> 01:48:06,800
remaining

2986
01:48:06,800 --> 01:48:08,639
three minutes remaining until your five

2987
01:48:08,639 --> 01:48:11,520
minutes q a time all right thank you uh

2988
01:48:11,520 --> 01:48:14,400
dns views used to self scan so they used

2989
01:48:14,400 --> 01:48:17,360
to scan some domain names every 48 hours

2990
01:48:17,360 --> 01:48:19,840
or eight hours so we've decided to

2991
01:48:19,840 --> 01:48:22,000
remove such domain names

2992
01:48:22,000 --> 01:48:24,960
only if this domain names have

2993
01:48:24,960 --> 01:48:27,360
analysis of which time differences

2994
01:48:27,360 --> 01:48:30,159
between consecutive to analysis are 48

2995
01:48:30,159 --> 01:48:32,960
or 8 hours yeah

2996
01:48:32,960 --> 01:48:35,440
so the domain names we're interested in

2997
01:48:35,440 --> 01:48:39,520
now is uh 94 000 and the percentage of

2998
01:48:39,520 --> 01:48:42,000
sign domains is nearly 85 percent which

2999
01:48:42,000 --> 01:48:44,080
is really great but the thing is the

3000
01:48:44,080 --> 01:48:46,159
percentage of signed whatever bogus

3001
01:48:46,159 --> 01:48:48,639
domain name sometimes they uh

3002
01:48:48,639 --> 01:48:50,639
their domain names uh

3003
01:48:50,639 --> 01:48:52,639
turned to in the books domain name so

3004
01:48:52,639 --> 01:48:55,040
administrators go to the website to

3005
01:48:55,040 --> 01:48:57,119
change uh to fix their problem so the

3006
01:48:57,119 --> 01:48:59,119
percentage of this domain name is over

3007
01:48:59,119 --> 01:49:02,560
twenty six percent and percent of signed

3008
01:49:02,560 --> 01:49:04,159
but ever unsigned which means they

3009
01:49:04,159 --> 01:49:07,440
retracted dns that is nearly 10

3010
01:49:07,440 --> 01:49:10,960
so the first freeman only analysis is is

3011
01:49:10,960 --> 01:49:14,560
really helpful so we simply uh

3012
01:49:14,560 --> 01:49:15,679
try to

3013
01:49:15,679 --> 01:49:18,400
compare the only first snapshots of the

3014
01:49:18,400 --> 01:49:20,639
domain name analysis and compare them

3015
01:49:20,639 --> 01:49:23,199
with the only last snapshots of their

3016
01:49:23,199 --> 01:49:25,920
domain names analysis so as you can tell

3017
01:49:25,920 --> 01:49:28,159
this graph shows the status of the

3018
01:49:28,159 --> 01:49:30,639
percentage of status of domain names we

3019
01:49:30,639 --> 01:49:31,920
can see

3020
01:49:31,920 --> 01:49:34,800
the valid percentages jumped nearly 20

3021
01:49:34,800 --> 01:49:36,880
so the answer is actually you know

3022
01:49:36,880 --> 01:49:40,400
helpful for administrators to fix their

3023
01:49:40,400 --> 01:49:42,320
adders

3024
01:49:42,320 --> 01:49:45,760
and we can also uh estimate the most

3025
01:49:45,760 --> 01:49:48,480
common letters so as we might expect it

3026
01:49:48,480 --> 01:49:52,159
the missing ds record is over for uh 57

3027
01:49:52,159 --> 01:49:55,040
which is not not a good news

3028
01:49:55,040 --> 01:49:57,360
um and also because the domain name

3029
01:49:57,360 --> 01:49:58,400
owners

3030
01:49:58,400 --> 01:50:01,920
use dns views multiple times to fix the

3031
01:50:01,920 --> 01:50:04,239
until they fix their errors so we can

3032
01:50:04,239 --> 01:50:06,639
briefly uh estimate how long does it

3033
01:50:06,639 --> 01:50:08,639
take to fix a

3034
01:50:08,639 --> 01:50:10,880
specific address so

3035
01:50:10,880 --> 01:50:13,760
uh unknown algorithm which shows the uh

3036
01:50:13,760 --> 01:50:17,599
the longest time um this is the address

3037
01:50:17,599 --> 01:50:20,000
when the uh algorithm number is not

3038
01:50:20,000 --> 01:50:23,040
defined in rfc so it rarely fit it is

3039
01:50:23,040 --> 01:50:25,599
rarely fixed and after that we can also

3040
01:50:25,599 --> 01:50:27,520
tell the missing ds record is the second

3041
01:50:27,520 --> 01:50:29,599
ranked uh the address that takes the

3042
01:50:29,599 --> 01:50:32,239
longest time

3043
01:50:32,239 --> 01:50:35,679
so we have um so i have

3044
01:50:35,679 --> 01:50:37,760
shown you some criminal analysis using

3045
01:50:37,760 --> 01:50:40,719
dns vis so our future step is we try to

3046
01:50:40,719 --> 01:50:42,320
understand the relationship between each

3047
01:50:42,320 --> 01:50:44,480
other's because the nsa may

3048
01:50:44,480 --> 01:50:47,520
one adder may cause another adders so if

3049
01:50:47,520 --> 01:50:49,679
we could figure out what the root causes

3050
01:50:49,679 --> 01:50:51,920
of these errors then we we can expect

3051
01:50:51,920 --> 01:50:54,400
that this analysis may help for

3052
01:50:54,400 --> 01:50:56,560
administrators to fix the subsequent

3053
01:50:56,560 --> 01:50:57,679
adders

3054
01:50:57,679 --> 01:51:00,880
and we expect that um the depending on

3055
01:51:00,880 --> 01:51:03,520
the managing entity so for example who

3056
01:51:03,520 --> 01:51:05,280
manages the dns software such as

3057
01:51:05,280 --> 01:51:06,400
registrar

3058
01:51:06,400 --> 01:51:09,440
or domain name owners or third-party dns

3059
01:51:09,440 --> 01:51:11,920
operators we might expect that the dns

3060
01:51:11,920 --> 01:51:13,679
management quality

3061
01:51:13,679 --> 01:51:15,599
might be different

3062
01:51:15,599 --> 01:51:18,719
um so yep this is it and uh

3063
01:51:18,719 --> 01:51:20,320
it would be really great if i could hear

3064
01:51:20,320 --> 01:51:23,679
some suggestion or the comments of this

3065
01:51:23,679 --> 01:51:27,360
analysis thank you so much

3066
01:51:27,360 --> 01:51:29,599
thank you tj uh everybody you should see

3067
01:51:29,599 --> 01:51:32,000
a survey pop up shortly

3068
01:51:32,000 --> 01:51:34,320
for tj's presentation this helps the

3069
01:51:34,320 --> 01:51:35,760
program committee

3070
01:51:35,760 --> 01:51:38,239
um you know compare our numbers uh

3071
01:51:38,239 --> 01:51:39,920
versus yours

3072
01:51:39,920 --> 01:51:41,760
okay so we do have some questions

3073
01:51:41,760 --> 01:51:43,119
already cued

3074
01:51:43,119 --> 01:51:45,199
uh i recall there were times when data

3075
01:51:45,199 --> 01:51:47,599
wasn't collected by dns viz is it

3076
01:51:47,599 --> 01:51:51,199
continuous collection from 2014 on asks

3077
01:51:51,199 --> 01:51:52,880
allison menken

3078
01:51:52,880 --> 01:51:53,599
uh

3079
01:51:53,599 --> 01:51:55,520
that is a really great question so as

3080
01:51:55,520 --> 01:51:59,840
far as i know near the 2018 there was a

3081
01:51:59,840 --> 01:52:00,880
um

3082
01:52:00,880 --> 01:52:05,040
uh some uh the missing snapchats

3083
01:52:05,040 --> 01:52:08,560
around a year i guess so 20 near the end

3084
01:52:08,560 --> 01:52:12,080
of 2018 or so

3085
01:52:14,239 --> 01:52:17,199
okay uh peter thomason asks how can

3086
01:52:17,199 --> 01:52:20,320
there be greater than 200 analysis per

3087
01:52:20,320 --> 01:52:23,520
domain on average when only the top

3088
01:52:23,520 --> 01:52:26,560
alexa bin is above 200.

3089
01:52:26,560 --> 01:52:28,560
let me try to understand the question uh

3090
01:52:28,560 --> 01:52:31,280
how can there be more than 200 analysis

3091
01:52:31,280 --> 01:52:33,520
per domain

3092
01:52:33,520 --> 01:52:36,960
on average when only the top alexa binge

3093
01:52:36,960 --> 01:52:40,800
is above 200. so um the aleks have been

3094
01:52:40,800 --> 01:52:45,520
above 200 millions um if the bin is 200

3095
01:52:45,520 --> 01:52:46,960
it means the

3096
01:52:46,960 --> 01:52:50,000
the the domain name is really popular so

3097
01:52:50,000 --> 01:52:51,119
the

3098
01:52:51,119 --> 01:52:51,840
with

3099
01:52:51,840 --> 01:52:54,320
it means throughout the period entire

3100
01:52:54,320 --> 01:52:56,400
six or eight years we found that this

3101
01:52:56,400 --> 01:52:59,199
domain at least has been scanned by dns

3102
01:52:59,199 --> 01:53:01,119
this at least 200 times

3103
01:53:01,119 --> 01:53:03,440
so yeah i hope this answers your

3104
01:53:03,440 --> 01:53:04,639
questions

3105
01:53:04,639 --> 01:53:06,880
okay uh peter thompson

3106
01:53:06,880 --> 01:53:10,000
also asks on slide 16 uh what's the

3107
01:53:10,000 --> 01:53:12,320
difference between insecure and not

3108
01:53:12,320 --> 01:53:14,239
deployed oh this is really great

3109
01:53:14,239 --> 01:53:17,360
question so um not deployed is a not

3110
01:53:17,360 --> 01:53:19,599
specific you know defined term in rfc so

3111
01:53:19,599 --> 01:53:22,719
insecure is uh the the

3112
01:53:22,719 --> 01:53:25,119
ds record is simply not unloaded but not

3113
01:53:25,119 --> 01:53:27,040
deployed is

3114
01:53:27,040 --> 01:53:29,199
i'm sorry insecure means even if a

3115
01:53:29,199 --> 01:53:32,239
domain name has a dns key but if it does

3116
01:53:32,239 --> 01:53:35,520
not have a ds record it is insecure but

3117
01:53:35,520 --> 01:53:38,239
not deployed in our definition is it

3118
01:53:38,239 --> 01:53:41,199
never tries to deploy dns at all so not

3119
01:53:41,199 --> 01:53:44,239
introducing any dns related dna

3120
01:53:44,239 --> 01:53:46,718
records

3121
01:53:46,960 --> 01:53:49,599
okay um moritz muller asks what is the

3122
01:53:49,599 --> 01:53:51,599
most common error of domain names that

3123
01:53:51,599 --> 01:53:54,239
got fixed yeah this is really a funny

3124
01:53:54,239 --> 01:53:55,679
answer so

3125
01:53:55,679 --> 01:53:59,760
if the um the signature is premature not

3126
01:53:59,760 --> 01:54:02,800
yet valid then it is automatically fixed

3127
01:54:02,800 --> 01:54:05,679
as time goes by

3128
01:54:06,080 --> 01:54:09,360
uh kathy almond asks does your analysis

3129
01:54:09,360 --> 01:54:11,920
consider that dns biz may also be used

3130
01:54:11,920 --> 01:54:13,599
for checking delegation and other

3131
01:54:13,599 --> 01:54:16,400
potential issues and not only for dns

3132
01:54:16,400 --> 01:54:20,000
sects signed status validity

3133
01:54:20,080 --> 01:54:22,960
did you consider

3134
01:54:22,960 --> 01:54:24,880
um

3135
01:54:24,880 --> 01:54:28,159
so we are only relying on dns validation

3136
01:54:28,159 --> 01:54:32,080
status so i have to check um with

3137
01:54:32,080 --> 01:54:35,119
um case uh the ultimate uh the developer

3138
01:54:35,119 --> 01:54:37,520
case do seo if it also has some

3139
01:54:37,520 --> 01:54:40,320
resources such as if the uh the solver

3140
01:54:40,320 --> 01:54:42,800
experience they're simply outage or the

3141
01:54:42,800 --> 01:54:45,360
server is offline but

3142
01:54:45,360 --> 01:54:47,920
the current analysis are just based on

3143
01:54:47,920 --> 01:54:50,480
dns validity so by validating all the

3144
01:54:50,480 --> 01:54:53,040
dns records

3145
01:54:53,040 --> 01:54:55,040
okay and we have a live question from

3146
01:54:55,040 --> 01:54:57,280
matthew poundset i'm going to allow you

3147
01:54:57,280 --> 01:54:59,920
to speak matt so you want to

3148
01:54:59,920 --> 01:55:01,599
unmute yourself

3149
01:55:01,599 --> 01:55:05,199
hi uh thanks tj that um the uh

3150
01:55:05,199 --> 01:55:08,320
you sort of expressed uh it sounded like

3151
01:55:08,320 --> 01:55:11,119
disappointment at the high missing ds uh

3152
01:55:11,119 --> 01:55:14,719
statistic um i think if you yeah if you

3153
01:55:14,719 --> 01:55:16,480
if you sort of look at the way people

3154
01:55:16,480 --> 01:55:18,800
will ten operators will tend to use this

3155
01:55:18,800 --> 01:55:21,520
then that shouldn't really be surprising

3156
01:55:21,520 --> 01:55:23,920
um so if somebody's deploying the nsx

3157
01:55:23,920 --> 01:55:25,760
they're going to

3158
01:55:25,760 --> 01:55:27,920
go and check their unsigned zone make

3159
01:55:27,920 --> 01:55:30,560
sure everything is good then sign it and

3160
01:55:30,560 --> 01:55:32,159
they'll check it again to make sure all

3161
01:55:32,159 --> 01:55:33,760
the signatures look right and everything

3162
01:55:33,760 --> 01:55:35,920
and then add des records and then check

3163
01:55:35,920 --> 01:55:38,960
it again so so you you'll always see a

3164
01:55:38,960 --> 01:55:42,639
high rate of um things like missing dns

3165
01:55:42,639 --> 01:55:45,360
missing ds and missing rrcigs and and

3166
01:55:45,360 --> 01:55:46,639
things like that

3167
01:55:46,639 --> 01:55:49,920
um and and and sort of actually to

3168
01:55:49,920 --> 01:55:53,119
add a bit to that previous question um

3169
01:55:53,119 --> 01:55:53,920
yes

3170
01:55:53,920 --> 01:55:57,199
dns vis gets used a lot by people who

3171
01:55:57,199 --> 01:55:58,000
are

3172
01:55:58,000 --> 01:56:00,400
not interested in testing their dns sec

3173
01:56:00,400 --> 01:56:02,239
they're they're testing their domain and

3174
01:56:02,239 --> 01:56:03,360
and so

3175
01:56:03,360 --> 01:56:04,800
yeah there will be a lot of that in

3176
01:56:04,800 --> 01:56:05,920
there as well

3177
01:56:05,920 --> 01:56:09,760
yep um regarding your first comment so

3178
01:56:09,760 --> 01:56:12,719
um if we uh do you think it is kind of

3179
01:56:12,719 --> 01:56:14,960
hard to say it would be worth it by

3180
01:56:14,960 --> 01:56:17,159
measuring how long does it take for

3181
01:56:17,159 --> 01:56:18,719
administrators

3182
01:56:18,719 --> 01:56:19,760
um

3183
01:56:19,760 --> 01:56:21,679
to let their

3184
01:56:21,679 --> 01:56:24,320
dns you know seek outer seeds

3185
01:56:24,320 --> 01:56:25,360
um

3186
01:56:25,360 --> 01:56:28,159
you know served but without actually

3187
01:56:28,159 --> 01:56:30,000
serving ds record

3188
01:56:30,000 --> 01:56:32,800
so basically try to measure how long it

3189
01:56:32,800 --> 01:56:34,480
takes to prepare

3190
01:56:34,480 --> 01:56:37,599
um actual dns deployment

3191
01:56:37,599 --> 01:56:39,840
yeah you might be able to identify you

3192
01:56:39,840 --> 01:56:42,159
might be able to pick out people who are

3193
01:56:42,159 --> 01:56:44,639
using it to test a deployment versus

3194
01:56:44,639 --> 01:56:46,560
just generally testing their domains

3195
01:56:46,560 --> 01:56:49,280
that way um but yeah by looking for sort

3196
01:56:49,280 --> 01:56:51,679
of short periods of time

3197
01:56:51,679 --> 01:56:53,360
as they progress through these steps of

3198
01:56:53,360 --> 01:56:56,400
deploying rrsigs and then deploying ds

3199
01:56:56,400 --> 01:56:57,920
gotcha

3200
01:56:57,920 --> 01:57:01,440
thank you so much for the comment yeah

3201
01:57:02,400 --> 01:57:03,920
all right it looks like there are no

3202
01:57:03,920 --> 01:57:05,840
further questions uh thank you very much

3203
01:57:05,840 --> 01:57:07,599
tj for your presentation

3204
01:57:07,599 --> 01:57:09,119
yep thank you so much for this

3205
01:57:09,119 --> 01:57:11,839
opportunity

3206
01:57:11,920 --> 01:57:14,320
right our next speaker is

3207
01:57:14,320 --> 01:57:17,280
oh i'm sorry uh a poll will pop up i

3208
01:57:17,280 --> 01:57:19,280
think i mentioned that earlier uh our

3209
01:57:19,280 --> 01:57:21,920
next speaker is uh kundana polari from

3210
01:57:21,920 --> 01:57:24,560
uc irvine and salesforce who will be

3211
01:57:24,560 --> 01:57:26,960
giving a presentation on

3212
01:57:26,960 --> 01:57:29,520
uh or titled a dns anomaly detection

3213
01:57:29,520 --> 01:57:32,320
model to identify unusual lagging and

3214
01:57:32,320 --> 01:57:33,840
zone updates

3215
01:57:33,840 --> 01:57:36,400
kundana if you want to

3216
01:57:36,400 --> 01:57:38,960
show yourself

3217
01:57:39,199 --> 01:57:42,239
hi everyone um i'm kudana pilari i'm

3218
01:57:42,239 --> 01:57:44,719
currently a second year student at uc

3219
01:57:44,719 --> 01:57:48,000
irvine majoring in cs and um this past

3220
01:57:48,000 --> 01:57:50,080
summer i worked as a suite intern at

3221
01:57:50,080 --> 01:57:53,119
salesforce in the public dns team where

3222
01:57:53,119 --> 01:57:55,760
my project involved building a dns

3223
01:57:55,760 --> 01:57:58,320
anomaly detection model to identify

3224
01:57:58,320 --> 01:58:00,560
unusual lagging in zone updates which is

3225
01:58:00,560 --> 01:58:02,480
also going to be the topic of my talk

3226
01:58:02,480 --> 01:58:05,480
today

3227
01:58:07,119 --> 01:58:09,520
so just some background in large scale

3228
01:58:09,520 --> 01:58:12,159
dns deployments zone updates are made by

3229
01:58:12,159 --> 01:58:14,400
demons hosting services on short time

3230
01:58:14,400 --> 01:58:17,040
scales to large number of servers and

3231
01:58:17,040 --> 01:58:19,280
it's normal for these updates to be

3232
01:58:19,280 --> 01:58:21,280
somewhat asynchronous from each other

3233
01:58:21,280 --> 01:58:23,199
but for our organization customer

3234
01:58:23,199 --> 01:58:25,920
sensitivity to sale information is high

3235
01:58:25,920 --> 01:58:28,320
and we want to take action by asking the

3236
01:58:28,320 --> 01:58:30,080
hosting services to check for server

3237
01:58:30,080 --> 01:58:35,080
problems when they are anonymous lags

3238
01:58:36,239 --> 01:58:37,040
so

3239
01:58:37,040 --> 01:58:39,440
the question here is which lags are

3240
01:58:39,440 --> 01:58:41,040
anomalous and

3241
01:58:41,040 --> 01:58:42,880
what threshold of difference in these so

3242
01:58:42,880 --> 01:58:45,360
serial numbers indicates a problem

3243
01:58:45,360 --> 01:58:47,599
so to solve this problem i

3244
01:58:47,599 --> 01:58:49,520
used an unsupervised machine learning

3245
01:58:49,520 --> 01:58:52,320
algorithm to identify the anomalous data

3246
01:58:52,320 --> 01:58:54,800
points in the monitor logs to help with

3247
01:58:54,800 --> 01:58:58,480
the question of what is actionable

3248
01:58:58,480 --> 01:59:01,360
so scope of anomaly detection in dns

3249
01:59:01,360 --> 01:59:03,599
this is the zone infrastructure at

3250
01:59:03,599 --> 01:59:06,000
salesforce athena is a system built by

3251
01:59:06,000 --> 01:59:08,639
the public dns team at salesforce that

3252
01:59:08,639 --> 01:59:10,719
sends dynamic updates to a hidden

3253
01:59:10,719 --> 01:59:12,800
internal server call saver which then

3254
01:59:12,800 --> 01:59:15,040
updates the external servers and the

3255
01:59:15,040 --> 01:59:16,800
particular servers i looked into are

3256
01:59:16,800 --> 01:59:19,840
ultra dns and pch

3257
01:59:19,840 --> 01:59:22,719
so the scope of my work is to find

3258
01:59:22,719 --> 01:59:24,400
update latency anomalies in these

3259
01:59:24,400 --> 01:59:28,159
external servers and in this process

3260
01:59:28,239 --> 01:59:30,400
so initially i explored through multiple

3261
01:59:30,400 --> 01:59:32,320
platforms and algorithms to build my

3262
01:59:32,320 --> 01:59:35,119
model and this includes looking at

3263
01:59:35,119 --> 01:59:38,960
tensorflow pytorch and also pi caret

3264
01:59:38,960 --> 01:59:41,679
ultimately i decided to use the pi caret

3265
01:59:41,679 --> 01:59:44,000
open source machine learning library

3266
01:59:44,000 --> 01:59:45,920
mainly because they have more algorithms

3267
01:59:45,920 --> 01:59:47,520
geared towards unsupervised learnings

3268
01:59:47,520 --> 01:59:51,199
and more specifically anomaly detection

3269
01:59:51,199 --> 01:59:52,880
so in machine learning there are two

3270
01:59:52,880 --> 01:59:54,560
types of learnings supervised and

3271
01:59:54,560 --> 01:59:56,400
unsupervised and in unsupervised

3272
01:59:56,400 --> 01:59:58,080
learning you're not giving a specific

3273
01:59:58,080 --> 02:00:00,400
target for the model to focus on

3274
02:00:00,400 --> 02:00:02,159
instead the model uses clustering

3275
02:00:02,159 --> 02:00:04,400
methods to learn on itself

3276
02:00:04,400 --> 02:00:06,080
different trends and patterns in the

3277
02:00:06,080 --> 02:00:08,400
data set

3278
02:00:08,400 --> 02:00:10,880
so there are many algorithms regarding

3279
02:00:10,880 --> 02:00:12,719
unsupervised learning and this includes

3280
02:00:12,719 --> 02:00:15,040
k n e support vector machines principal

3281
02:00:15,040 --> 02:00:17,520
component analysis and also isolation

3282
02:00:17,520 --> 02:00:19,520
forest

3283
02:00:19,520 --> 02:00:22,560
so i decided to use the isolation forest

3284
02:00:22,560 --> 02:00:25,119
or also known as i forest machine

3285
02:00:25,119 --> 02:00:26,800
learning algorithm mainly because it

3286
02:00:26,800 --> 02:00:28,880
requires less memory and it's faster in

3287
02:00:28,880 --> 02:00:30,880
performance and also traditionally used

3288
02:00:30,880 --> 02:00:34,719
for anomaly detection for these reasons

3289
02:00:35,199 --> 02:00:37,119
so just some background about isolation

3290
02:00:37,119 --> 02:00:39,679
forest it identifies anomalies by

3291
02:00:39,679 --> 02:00:41,679
basically isolating the outliers in the

3292
02:00:41,679 --> 02:00:43,920
data it works on the principle of the

3293
02:00:43,920 --> 02:00:46,400
decision tree algorithm which randomly

3294
02:00:46,400 --> 02:00:48,000
selects a feature from a given set of

3295
02:00:48,000 --> 02:00:50,400
features and forms decision trees using

3296
02:00:50,400 --> 02:00:51,920
those combinations

3297
02:00:51,920 --> 02:00:54,080
and outliers are basically the ones that

3298
02:00:54,080 --> 02:00:55,840
are closer to the root node and they're

3299
02:00:55,840 --> 02:00:58,320
easy to isolate and regulate data points

3300
02:00:58,320 --> 02:00:59,760
are the ones that are farther from the

3301
02:00:59,760 --> 02:01:03,679
root node and difficult to isolate

3302
02:01:03,920 --> 02:01:06,239
so my model was trained on the monitor

3303
02:01:06,239 --> 02:01:08,239
logs more specifically the may and june

3304
02:01:08,239 --> 02:01:11,119
monitor locks and i only looked to three

3305
02:01:11,119 --> 02:01:12,760
production zones those were

3306
02:01:12,760 --> 02:01:14,880
my.salesforce.com salesforce.com and

3307
02:01:14,880 --> 02:01:17,760
force.com and i only looked to the sewer

3308
02:01:17,760 --> 02:01:18,800
records

3309
02:01:18,800 --> 02:01:20,480
so the key details in the data set that

3310
02:01:20,480 --> 02:01:22,560
i focused on are the probe time that is

3311
02:01:22,560 --> 02:01:24,560
the timestamp and also the details

3312
02:01:24,560 --> 02:01:27,040
section where each server is represented

3313
02:01:27,040 --> 02:01:28,880
by a serial number that indicates

3314
02:01:28,880 --> 02:01:31,040
there's some version

3315
02:01:31,040 --> 02:01:33,199
so to improve my model's performance i

3316
02:01:33,199 --> 02:01:35,040
also fine-tuned it with the supervised

3317
02:01:35,040 --> 02:01:37,360
target giving it as a probe time to

3318
02:01:37,360 --> 02:01:38,960
control the learning process a little

3319
02:01:38,960 --> 02:01:42,480
bit and improve the performance

3320
02:01:43,199 --> 02:01:45,280
so the output from the model is the same

3321
02:01:45,280 --> 02:01:46,880
data you feed it into it but

3322
02:01:46,880 --> 02:01:49,360
additionally it marks each data point as

3323
02:01:49,360 --> 02:01:51,520
normal or anomaly

3324
02:01:51,520 --> 02:01:53,280
and additionally it also gives you a

3325
02:01:53,280 --> 02:01:55,520
specific anomaly score where the higher

3326
02:01:55,520 --> 02:01:59,440
the score the more normal data point

3327
02:01:59,440 --> 02:02:01,679
so going into analysis

3328
02:02:01,679 --> 02:02:02,639
i looked

3329
02:02:02,639 --> 02:02:03,920
the idea was to look at the serial

3330
02:02:03,920 --> 02:02:06,159
numbers or these inversions

3331
02:02:06,159 --> 02:02:08,000
and so i found the average differences

3332
02:02:08,000 --> 02:02:09,679
between the normal and the anomalous

3333
02:02:09,679 --> 02:02:12,800
data points and for comparison i also

3334
02:02:12,800 --> 02:02:14,320
found the average differences just

3335
02:02:14,320 --> 02:02:16,560
between the normal data points so here

3336
02:02:16,560 --> 02:02:18,800
for example for salesforce.com you can

3337
02:02:18,800 --> 02:02:20,080
see that the difference between the

3338
02:02:20,080 --> 02:02:22,960
normal and the anomalous is around 63

3339
02:02:22,960 --> 02:02:24,960
but just between the normal data points

3340
02:02:24,960 --> 02:02:28,239
is around 0.27 so this gives you an idea

3341
02:02:28,239 --> 02:02:30,400
of how much lagging there is and how and

3342
02:02:30,400 --> 02:02:34,000
how different it is for all three zones

3343
02:02:34,000 --> 02:02:35,760
so yeah using the upper from the model

3344
02:02:35,760 --> 02:02:37,599
we can learn different trends and

3345
02:02:37,599 --> 02:02:39,920
patterns in our zone updates and more

3346
02:02:39,920 --> 02:02:41,840
specifically get the thresholds for our

3347
02:02:41,840 --> 02:02:44,080
zones which we can integrate in our

3348
02:02:44,080 --> 02:02:47,360
monitoring system

3349
02:02:47,360 --> 02:02:49,840
so as i mentioned before the main goal

3350
02:02:49,840 --> 02:02:52,080
was of this project was to provide good

3351
02:02:52,080 --> 02:02:54,480
numeric thresholds for how much lag was

3352
02:02:54,480 --> 02:02:57,199
normal and how much lag was enormous and

3353
02:02:57,199 --> 02:02:59,199
this was more important because

3354
02:02:59,199 --> 02:03:01,040
previously the thresholds were

3355
02:03:01,040 --> 02:03:03,360
guesstimates made by the team and they

3356
02:03:03,360 --> 02:03:05,760
were same for all three zones but the

3357
02:03:05,760 --> 02:03:07,840
output from the model clearly shows that

3358
02:03:07,840 --> 02:03:10,000
the anomalous behavior for all these

3359
02:03:10,000 --> 02:03:11,920
zones are extremely different and it

3360
02:03:11,920 --> 02:03:14,719
usually depends on the

3361
02:03:14,719 --> 02:03:17,280
zone sizes and how frequently the zones

3362
02:03:17,280 --> 02:03:19,920
were updated

3363
02:03:20,800 --> 02:03:23,760
so the next steps in my project was to

3364
02:03:23,760 --> 02:03:26,719
include dynamic texting and this is to

3365
02:03:26,719 --> 02:03:28,080
writing a python script that

3366
02:03:28,080 --> 02:03:29,920
periodically calls the models on new

3367
02:03:29,920 --> 02:03:32,639
data points to generate new thresholds

3368
02:03:32,639 --> 02:03:34,639
and then integrate them back in the

3369
02:03:34,639 --> 02:03:36,960
refocus dashboard that is our monitoring

3370
02:03:36,960 --> 02:03:38,719
system at salesforce

3371
02:03:38,719 --> 02:03:41,760
and also to have logs to preserve

3372
02:03:41,760 --> 02:03:44,159
previous thresholds

3373
02:03:44,159 --> 02:03:46,080
additionally another idea was to send

3374
02:03:46,080 --> 02:03:47,920
alerts for the highest

3375
02:03:47,920 --> 02:03:49,760
anomalous data points this is through

3376
02:03:49,760 --> 02:03:53,040
email or pagerduty

3377
02:03:53,360 --> 02:03:56,159
so overall ml has been used on dns data

3378
02:03:56,159 --> 02:03:59,440
frequently but it mainly focused on dns

3379
02:03:59,440 --> 02:04:01,679
attacks and security

3380
02:04:01,679 --> 02:04:04,239
however this work focuses on

3381
02:04:04,239 --> 02:04:06,000
dns availability

3382
02:04:06,000 --> 02:04:08,719
and ml models both unsupervised and

3383
02:04:08,719 --> 02:04:10,639
supervised can be valuable to many other

3384
02:04:10,639 --> 02:04:13,440
areas in dns operators

3385
02:04:13,440 --> 02:04:16,159
have data in real time in future and

3386
02:04:16,159 --> 02:04:17,840
this project is just one of the

3387
02:04:17,840 --> 02:04:20,239
applications of ml and dns

3388
02:04:20,239 --> 02:04:21,440
which helps us to understand the

3389
02:04:21,440 --> 02:04:23,440
abundance of data that we get from the

3390
02:04:23,440 --> 02:04:25,839
infrastructure

3391
02:04:26,079 --> 02:04:27,679
so thank you that was the end of my

3392
02:04:27,679 --> 02:04:29,520
presentation

3393
02:04:29,520 --> 02:04:31,440
if you have any questions i'll be happy

3394
02:04:31,440 --> 02:04:34,079
to answer them

3395
02:04:34,480 --> 02:04:37,119
thank you kundana there should be a

3396
02:04:37,119 --> 02:04:39,760
survey popping up for everyone uh if you

3397
02:04:39,760 --> 02:04:41,040
can't fill that out that would be

3398
02:04:41,040 --> 02:04:42,560
wonderful

3399
02:04:42,560 --> 02:04:45,119
and uh our first question from peter

3400
02:04:45,119 --> 02:04:46,320
thomason

3401
02:04:46,320 --> 02:04:48,639
great research how come the thresholds

3402
02:04:48,639 --> 02:04:50,960
depend so much on what zone it is you

3403
02:04:50,960 --> 02:04:53,520
mentioned zone size as a reason should

3404
02:04:53,520 --> 02:04:56,320
that really play a role when using ixfr

3405
02:04:56,320 --> 02:04:59,520
as stated on slide four

3406
02:04:59,520 --> 02:05:02,800
yeah so i i think um from our uh from

3407
02:05:02,800 --> 02:05:05,159
the model like um let's say for

3408
02:05:05,159 --> 02:05:06,719
my.talesforce.com it's one of the

3409
02:05:06,719 --> 02:05:09,599
biggest zones but for forest.com which

3410
02:05:09,599 --> 02:05:12,079
is a really small zone we saw that um

3411
02:05:12,079 --> 02:05:13,760
for big zones there were there was much

3412
02:05:13,760 --> 02:05:16,639
lagging but for really small zones they

3413
02:05:16,639 --> 02:05:20,000
there wasn't much lagging at all so um

3414
02:05:20,000 --> 02:05:23,040
it really it really tells us that um

3415
02:05:23,040 --> 02:05:24,800
you know how often they were updated and

3416
02:05:24,800 --> 02:05:27,360
the zone sizes play a huge role and this

3417
02:05:27,360 --> 02:05:29,280
was just one of the

3418
02:05:29,280 --> 02:05:32,159
um understandings from our project

3419
02:05:32,159 --> 02:05:34,960
so uh

3420
02:05:36,880 --> 02:05:39,840
okay i see a question from stefan ubink

3421
02:05:39,840 --> 02:05:42,880
if you can unmute yourself

3422
02:05:42,880 --> 02:05:45,760
hello stefano srdn um i was

3423
02:05:45,760 --> 02:05:48,400
wondering if your research only was

3424
02:05:48,400 --> 02:05:49,760
applied to

3425
02:05:49,760 --> 02:05:52,480
logs that you have or was it also

3426
02:05:52,480 --> 02:05:54,239
applied to a

3427
02:05:54,239 --> 02:05:55,679
real time

3428
02:05:55,679 --> 02:05:59,199
analysis of the current state of the dns

3429
02:05:59,199 --> 02:06:00,639
setup of

3430
02:06:00,639 --> 02:06:02,239
salesforce

3431
02:06:02,239 --> 02:06:04,880
yeah this project was uh just based on

3432
02:06:04,880 --> 02:06:07,520
the logs that i had and actually the

3433
02:06:07,520 --> 02:06:09,599
another step was also to integrate that

3434
02:06:09,599 --> 02:06:12,320
in real time through the dynamic testing

3435
02:06:12,320 --> 02:06:13,119
but

3436
02:06:13,119 --> 02:06:14,880
i didn't have much time in my internship

3437
02:06:14,880 --> 02:06:17,040
to work on that so i just focused on the

3438
02:06:17,040 --> 02:06:18,800
logs

3439
02:06:18,800 --> 02:06:21,520
thank you very much

3440
02:06:21,920 --> 02:06:23,840
all right and we i see a question from

3441
02:06:23,840 --> 02:06:25,840
brett carr if you would like to unmute

3442
02:06:25,840 --> 02:06:28,079
yourself

3443
02:06:28,079 --> 02:06:30,400
i can under um i think this is a really

3444
02:06:30,400 --> 02:06:32,239
really great application of machine

3445
02:06:32,239 --> 02:06:34,719
learning um certainly from uh

3446
02:06:34,719 --> 02:06:37,520
somebody who's been operating dns in uh

3447
02:06:37,520 --> 02:06:38,880
infrastructure

3448
02:06:38,880 --> 02:06:41,280
for tld for many years we've often

3449
02:06:41,280 --> 02:06:42,840
suffered from uh

3450
02:06:42,840 --> 02:06:45,280
from um propagation of zones lagging

3451
02:06:45,280 --> 02:06:47,520
behind and and alerts going off and then

3452
02:06:47,520 --> 02:06:50,000
catch you up again and wondering why

3453
02:06:50,000 --> 02:06:51,920
uh and so i think you know we'd really

3454
02:06:51,920 --> 02:06:53,040
like to take a look at this i was

3455
02:06:53,040 --> 02:06:54,880
wondering if you're planning to um

3456
02:06:54,880 --> 02:06:56,800
open source any of your code or anything

3457
02:06:56,800 --> 02:06:59,199
like that so we could uh maybe take it

3458
02:06:59,199 --> 02:07:02,079
and uh help you improve it et cetera

3459
02:07:02,079 --> 02:07:05,119
oh yeah for sure

3460
02:07:05,119 --> 02:07:08,400
okay good thank you

3461
02:07:10,320 --> 02:07:13,119
all right i see uh just i guess one

3462
02:07:13,119 --> 02:07:15,520
additional comment from allison menken

3463
02:07:15,520 --> 02:07:18,639
uh saying additionally the bigger zones

3464
02:07:18,639 --> 02:07:20,880
change more frequently peter thomas

3465
02:07:20,880 --> 02:07:23,440
thomason and there are many ixfrs to get

3466
02:07:23,440 --> 02:07:26,440
disseminated

3467
02:07:28,719 --> 02:07:32,239
i guess that's not a question

3468
02:07:32,880 --> 02:07:34,800
all right any further questions for

3469
02:07:34,800 --> 02:07:37,360
kundana

3470
02:07:39,360 --> 02:07:40,480
well thank you very much for your

3471
02:07:40,480 --> 02:07:42,400
presentation kundana

3472
02:07:42,400 --> 02:07:44,799
thank you

3473
02:07:45,199 --> 02:07:47,760
and next uh we'd like to welcome stefan

3474
02:07:47,760 --> 02:07:50,400
ubink from sidn who will be presenting

3475
02:07:50,400 --> 02:07:55,199
uh disaster recovery with deanna sack

3476
02:07:55,199 --> 02:07:58,159
hello my name is stefan ebink and i'm a

3477
02:07:58,159 --> 02:08:01,280
dns system engineer at srdn

3478
02:08:01,280 --> 02:08:04,320
and our srdn is the registry for the

3479
02:08:04,320 --> 02:08:07,599
nail zone which also reaches the cctob

3480
02:08:07,599 --> 02:08:09,840
for the netherlands we also

3481
02:08:09,840 --> 02:08:12,719
host a few other kilds

3482
02:08:12,719 --> 02:08:14,719
and

3483
02:08:14,719 --> 02:08:16,719
this is an overview of the things i'm

3484
02:08:16,719 --> 02:08:18,560
going to talk about

3485
02:08:18,560 --> 02:08:19,840
today

3486
02:08:19,840 --> 02:08:20,880
and

3487
02:08:20,880 --> 02:08:23,679
we've got right onto it

3488
02:08:23,679 --> 02:08:24,480
so

3489
02:08:24,480 --> 02:08:27,280
why this talk uh earlier this year we

3490
02:08:27,280 --> 02:08:29,360
replaced our hdms

3491
02:08:29,360 --> 02:08:31,280
and to get a better understanding of

3492
02:08:31,280 --> 02:08:33,199
what we have to do in case of an

3493
02:08:33,199 --> 02:08:36,239
emergency we created some what-if

3494
02:08:36,239 --> 02:08:37,760
scenarios

3495
02:08:37,760 --> 02:08:40,159
and one of the scenarios was where we

3496
02:08:40,159 --> 02:08:42,560
would lose all our keys

3497
02:08:42,560 --> 02:08:44,960
since we make a backup of our keys we

3498
02:08:44,960 --> 02:08:46,800
could recover from that incident by

3499
02:08:46,800 --> 02:08:48,840
restoring the keys from the

3500
02:08:48,840 --> 02:08:51,360
backup or not

3501
02:08:51,360 --> 02:08:53,199
because we don't create the backup of

3502
02:08:53,199 --> 02:08:56,960
every csk it was a possible issue here

3503
02:08:56,960 --> 02:08:59,679
the ksk is long has a longer

3504
02:08:59,679 --> 02:09:02,159
lifetime and is available in every

3505
02:09:02,159 --> 02:09:04,560
backup we make

3506
02:09:04,560 --> 02:09:07,840
so the case k could be restored always

3507
02:09:07,840 --> 02:09:12,159
but the zsk not always

3508
02:09:13,360 --> 02:09:15,199
here i have a

3509
02:09:15,199 --> 02:09:18,880
picture of our sinus setup it uses two

3510
02:09:18,880 --> 02:09:21,599
data centers and in both data centers

3511
02:09:21,599 --> 02:09:23,040
there is a change

3512
02:09:23,040 --> 02:09:24,800
chain of systems

3513
02:09:24,800 --> 02:09:26,960
that leads to a signed zone which is

3514
02:09:26,960 --> 02:09:28,880
published

3515
02:09:28,880 --> 02:09:31,280
the most relevant parts are the sinus

3516
02:09:31,280 --> 02:09:33,280
and the hsms

3517
02:09:33,280 --> 02:09:34,960
here noted as

3518
02:09:34,960 --> 02:09:41,040
iron2 hsm b1 and onto sine b1

3519
02:09:41,040 --> 02:09:42,719
for one

3520
02:09:42,719 --> 02:09:44,960
setup of one data center

3521
02:09:44,960 --> 02:09:47,440
and the other data center is either 1

3522
02:09:47,440 --> 02:09:49,679
sine

3523
02:09:49,679 --> 02:09:54,480
b1 and 81 hsm b1

3524
02:09:55,520 --> 02:09:58,639
the hsms in this setup are in high

3525
02:09:58,639 --> 02:10:00,159
availability

3526
02:10:00,159 --> 02:10:01,199
cluster

3527
02:10:01,199 --> 02:10:04,960
so when one hsm

3528
02:10:05,119 --> 02:10:07,840
falls out because the data center goes

3529
02:10:07,840 --> 02:10:08,719
away

3530
02:10:08,719 --> 02:10:12,840
the keys are still available

3531
02:10:14,480 --> 02:10:17,119
if you lose

3532
02:10:17,119 --> 02:10:19,280
the keys

3533
02:10:19,280 --> 02:10:22,560
there will be a start of loss of service

3534
02:10:22,560 --> 02:10:25,119
because no updates for the zone can be

3535
02:10:25,119 --> 02:10:27,760
done until the keys are back

3536
02:10:27,760 --> 02:10:30,159
and if you don't take any action

3537
02:10:30,159 --> 02:10:32,639
domains will start to fail because the

3538
02:10:32,639 --> 02:10:36,239
rs6 will expire and the last rx6 that

3539
02:10:36,239 --> 02:10:38,719
will expire will be the one of the

3540
02:10:38,719 --> 02:10:40,320
server records

3541
02:10:40,320 --> 02:10:42,639
in the previous setup the case k was

3542
02:10:42,639 --> 02:10:45,199
over always in the backup

3543
02:10:45,199 --> 02:10:47,679
so we would be able to restore that

3544
02:10:47,679 --> 02:10:49,280
but the status game might not be in the

3545
02:10:49,280 --> 02:10:52,400
backup and if that cannot be restored

3546
02:10:52,400 --> 02:10:56,400
the zsk um the new status que has to be

3547
02:10:56,400 --> 02:10:58,800
introduced this will mean that all the

3548
02:10:58,800 --> 02:11:02,320
nsx find zones will be unavailable

3549
02:11:02,320 --> 02:11:05,199
for the ttl of the dnsec key and or our

3550
02:11:05,199 --> 02:11:06,719
saves

3551
02:11:06,719 --> 02:11:08,960
for dotted now this means an outage of

3552
02:11:08,960 --> 02:11:10,560
at least one hour

3553
02:11:10,560 --> 02:11:12,239
and because of sixty percent of the

3554
02:11:12,239 --> 02:11:14,560
resolvers used in the landlord's

3555
02:11:14,560 --> 02:11:15,679
validate

3556
02:11:15,679 --> 02:11:18,960
dns answers a lot of people will notice

3557
02:11:18,960 --> 02:11:19,840
it

3558
02:11:19,840 --> 02:11:21,360
yesterday there was a remark in

3559
02:11:21,360 --> 02:11:22,719
nethermost

3560
02:11:22,719 --> 02:11:24,320
that

3561
02:11:24,320 --> 02:11:26,239
press is always good but i don't think

3562
02:11:26,239 --> 02:11:30,638
this will be good press for srdn

3563
02:11:33,360 --> 02:11:34,960
so

3564
02:11:34,960 --> 02:11:36,560
what have we done to

3565
02:11:36,560 --> 02:11:37,599
prevent

3566
02:11:37,599 --> 02:11:40,400
this from happening

3567
02:11:40,400 --> 02:11:43,360
we could remove the ds from the parents

3568
02:11:43,360 --> 02:11:44,800
but that doesn't

3569
02:11:44,800 --> 02:11:46,159
make it possible

3570
02:11:46,159 --> 02:11:48,239
and this will make it possible to

3571
02:11:48,239 --> 02:11:51,360
publish a new enzyme zone

3572
02:11:51,360 --> 02:11:55,440
after the ds dtl has expired at parents

3573
02:11:55,440 --> 02:11:58,159
but this is only a last resort and will

3574
02:11:58,159 --> 02:12:01,520
mean that every other zone zone on the

3575
02:12:01,520 --> 02:12:04,079
nl will go insecure

3576
02:12:04,079 --> 02:12:05,040
so

3577
02:12:05,040 --> 02:12:08,000
the items mentioned earlier today like

3578
02:12:08,000 --> 02:12:11,280
tdsa records will no longer work and

3579
02:12:11,280 --> 02:12:12,480
this will be a

3580
02:12:12,480 --> 02:12:15,759
be a big impact

3581
02:12:16,000 --> 02:12:18,960
to be able to restore from the backup

3582
02:12:18,960 --> 02:12:20,800
we would have to make a backup every

3583
02:12:20,800 --> 02:12:23,520
time a zsk is created

3584
02:12:23,520 --> 02:12:26,480
4.0 this is every 90 days

3585
02:12:26,480 --> 02:12:29,280
but we also have other tlbs like i

3586
02:12:29,280 --> 02:12:31,920
mentioned before so that we need a lot

3587
02:12:31,920 --> 02:12:34,960
more backups

3588
02:12:34,960 --> 02:12:35,920
and

3589
02:12:35,920 --> 02:12:39,280
we not do not really want to do that

3590
02:12:39,280 --> 02:12:40,480
that often

3591
02:12:40,480 --> 02:12:43,360
because it's manual process and needs

3592
02:12:43,360 --> 02:12:45,360
some people outside

3593
02:12:45,360 --> 02:12:46,719
at the

3594
02:12:46,719 --> 02:12:49,719
office

3595
02:12:50,079 --> 02:12:51,679
to be able to do

3596
02:12:51,679 --> 02:12:53,599
everything correctly

3597
02:12:53,599 --> 02:12:56,000
we have to have a correct fitting

3598
02:12:56,000 --> 02:12:57,360
procedure

3599
02:12:57,360 --> 02:13:00,400
which we can follow to create but also

3600
02:13:00,400 --> 02:13:03,199
restore the backups

3601
02:13:03,199 --> 02:13:04,560
and you have to

3602
02:13:04,560 --> 02:13:08,159
test these regularly

3603
02:13:08,960 --> 02:13:12,880
we found that opendns sac which we use

3604
02:13:12,880 --> 02:13:15,760
has a good way to prevent not backing

3605
02:13:15,760 --> 02:13:18,239
backing up

3606
02:13:18,400 --> 02:13:21,599
for not forgetting to back up the zsk

3607
02:13:21,599 --> 02:13:24,560
um we made some adjustments and to the

3608
02:13:24,560 --> 02:13:26,079
configuration

3609
02:13:26,079 --> 02:13:28,719
by setting the required backup option

3610
02:13:28,719 --> 02:13:31,040
and setting an automatic key generation

3611
02:13:31,040 --> 02:13:33,760
period to with a good value

3612
02:13:33,760 --> 02:13:36,000
what a good value is depends on your

3613
02:13:36,000 --> 02:13:37,440
situation

3614
02:13:37,440 --> 02:13:38,560
for us

3615
02:13:38,560 --> 02:13:39,679
this

3616
02:13:39,679 --> 02:13:42,639
is one year so we can generate

3617
02:13:42,639 --> 02:13:44,400
satisfaction in advance

3618
02:13:44,400 --> 02:13:47,360
or open the insect will generate

3619
02:13:47,360 --> 02:13:50,000
keys for one year in advance

3620
02:13:50,000 --> 02:13:52,159
and we will make sure

3621
02:13:52,159 --> 02:13:55,040
that we make a backup every half an hour

3622
02:13:55,040 --> 02:13:58,360
half a year

3623
02:13:58,480 --> 02:14:00,320
um if you

3624
02:14:00,320 --> 02:14:01,360
uh

3625
02:14:01,360 --> 02:14:02,880
use the wrong

3626
02:14:02,880 --> 02:14:04,880
value there open the insect will create

3627
02:14:04,880 --> 02:14:07,040
a lot of keys and during

3628
02:14:07,040 --> 02:14:08,560
deployments

3629
02:14:08,560 --> 02:14:12,159
in acceptance we notice that

3630
02:14:12,159 --> 02:14:13,199
it

3631
02:14:13,199 --> 02:14:16,880
generated 4000 keys which made

3632
02:14:16,880 --> 02:14:20,239
some tools a bit slow

3633
02:14:21,760 --> 02:14:23,840
to make sure that we

3634
02:14:23,840 --> 02:14:26,960
do create the backups at the right time

3635
02:14:26,960 --> 02:14:29,599
we created scheduled tickets

3636
02:14:29,599 --> 02:14:30,639
for

3637
02:14:30,639 --> 02:14:33,679
creating the backups

3638
02:14:33,840 --> 02:14:35,679
and we also

3639
02:14:35,679 --> 02:14:38,000
changed the

3640
02:14:38,000 --> 02:14:41,679
timers for the

3641
02:14:41,679 --> 02:14:45,840
refresh and the resign time

3642
02:14:45,840 --> 02:14:48,480
because as you can see in this picture

3643
02:14:48,480 --> 02:14:50,560
there is a reaction time in which you

3644
02:14:50,560 --> 02:14:53,119
have to react and

3645
02:14:53,119 --> 02:14:55,599
otherwise the zone will be

3646
02:14:55,599 --> 02:14:58,159
in problem

3647
02:14:58,320 --> 02:15:01,199
will have a problem

3648
02:15:01,599 --> 02:15:06,400
we decided to have seven days

3649
02:15:06,400 --> 02:15:09,760
of reaction time because we uh

3650
02:15:09,760 --> 02:15:12,480
think uh we don't want to uh

3651
02:15:12,480 --> 02:15:15,440
have to break off our christmas dinner

3652
02:15:15,440 --> 02:15:18,480
because there's some issue with the zone

3653
02:15:18,480 --> 02:15:20,719
and we

3654
02:15:20,719 --> 02:15:25,040
calculated seven days would be a good

3655
02:15:25,119 --> 02:15:29,199
value to prevent this

3656
02:15:33,199 --> 02:15:36,110
i would like to thank bobby von

3657
02:15:36,110 --> 02:15:37,440
[Music]

3658
02:15:37,440 --> 02:15:40,159
for providing very excellent explanation

3659
02:15:40,159 --> 02:15:42,400
about the possible impact and ways to

3660
02:15:42,400 --> 02:15:43,679
act

3661
02:15:43,679 --> 02:15:45,840
in this what-if scenario

3662
02:15:45,840 --> 02:15:48,320
and i would like to thank my as a dn

3663
02:15:48,320 --> 02:15:50,560
colleagues for helping improving our d

3664
02:15:50,560 --> 02:15:53,119
necessary

3665
02:15:53,280 --> 02:15:56,239
and i'm glad to answer any questions

3666
02:15:56,239 --> 02:15:58,320
that are

3667
02:15:58,320 --> 02:16:01,360
available for me

3668
02:16:02,400 --> 02:16:04,800
great thank you stefan uh a survey

3669
02:16:04,800 --> 02:16:06,639
should pop up shortly for everyone to

3670
02:16:06,639 --> 02:16:08,400
rate this talk

3671
02:16:08,400 --> 02:16:10,560
and uh are there any questions for

3672
02:16:10,560 --> 02:16:13,040
stefan

3673
02:16:13,040 --> 02:16:15,440
i suppose i will start with one so i

3674
02:16:15,440 --> 02:16:18,880
similarly had an issue with dns sec

3675
02:16:18,880 --> 02:16:20,159
where

3676
02:16:20,159 --> 02:16:21,280
there were

3677
02:16:21,280 --> 02:16:23,280
many many thousands of extra keys

3678
02:16:23,280 --> 02:16:26,400
created and i i guess i'm curious

3679
02:16:26,400 --> 02:16:29,119
do your hsms talk to each other or were

3680
02:16:29,119 --> 02:16:31,280
they created on one hsm and not the

3681
02:16:31,280 --> 02:16:32,959
other and how did you deal with that

3682
02:16:32,959 --> 02:16:34,318
scenario

3683
02:16:34,318 --> 02:16:38,478
um we have a separate hsm for our

3684
02:16:38,478 --> 02:16:41,760
acceptance environment and

3685
02:16:41,760 --> 02:16:44,959
it created the keys in on both

3686
02:16:44,959 --> 02:16:47,200
hsms because they are in high

3687
02:16:47,200 --> 02:16:49,439
availability mode so if you create one

3688
02:16:49,439 --> 02:16:53,359
on one html it will also automatically

3689
02:16:53,359 --> 02:16:55,599
create it in in the other one as well

3690
02:16:55,599 --> 02:16:57,760
but if you delete it on one it also

3691
02:16:57,760 --> 02:17:00,240
deleted another one so that was very

3692
02:17:00,240 --> 02:17:03,840
easy and when we noticed that much

3693
02:17:03,840 --> 02:17:05,920
keys in acceptance we just removed the

3694
02:17:05,920 --> 02:17:08,240
petition created a new partition and

3695
02:17:08,240 --> 02:17:10,318
started from scratch

3696
02:17:10,318 --> 02:17:14,119
that was the easy way

3697
02:17:14,718 --> 02:17:17,040
sounds like what i would do

3698
02:17:17,040 --> 02:17:17,920
all right

3699
02:17:17,920 --> 02:17:21,439
any other questions for stefan

3700
02:17:23,679 --> 02:17:25,040
all right well thank you very much

3701
02:17:25,040 --> 02:17:26,080
stefan

3702
02:17:26,080 --> 02:17:28,879
great presentation

3703
02:17:28,879 --> 02:17:31,920
and uh with that we will go into our

3704
02:17:31,920 --> 02:17:32,959
break

3705
02:17:32,959 --> 02:17:36,080
uh the break begins now uh we'll call it

3706
02:17:36,080 --> 02:17:38,478
uh 18 minutes instead of 15 minutes we

3707
02:17:38,478 --> 02:17:41,120
will be returning at

3708
02:17:41,120 --> 02:17:43,760
14 30 utc sharp

3709
02:17:43,760 --> 02:17:45,519
uh once again we would like to thank our

3710
02:17:45,519 --> 02:17:48,000
workshop sponsor verisign

3711
02:17:48,000 --> 02:17:51,920
see you at 14 30.

3712
02:17:52,240 --> 02:17:55,679
hello everyone uh welcome back to orc 36

3713
02:17:55,679 --> 02:17:57,599
day two session four

3714
02:17:57,599 --> 02:18:02,160
i'd like to welcome brad ellis from the

3715
02:18:02,160 --> 02:18:05,200
uh center for

3716
02:18:05,200 --> 02:18:07,280
i'm sorry center of excellence and next

3717
02:18:07,280 --> 02:18:09,200
generation networks who will be

3718
02:18:09,200 --> 02:18:11,318
presenting independent performance

3719
02:18:11,318 --> 02:18:15,599
verification of xtp accelerated not dns

3720
02:18:15,599 --> 02:18:17,120
brad if you'd like to start sharing your

3721
02:18:17,120 --> 02:18:19,840
slides everything looks good thanks jake

3722
02:18:19,840 --> 02:18:21,840
are you okay

3723
02:18:21,840 --> 02:18:23,679
audio is good sir please

3724
02:18:23,679 --> 02:18:25,200
thank you

3725
02:18:25,200 --> 02:18:27,599
uh hi everyone my name is brad ellis i'm

3726
02:18:27,599 --> 02:18:30,160
a solutions engineer at senjen i'm going

3727
02:18:30,160 --> 02:18:31,439
to take you through the independent

3728
02:18:31,439 --> 02:18:36,080
verification of xcp accelerate not dns

3729
02:18:36,080 --> 02:18:36,840
um

3730
02:18:36,840 --> 02:18:39,040
so uh

3731
02:18:39,040 --> 02:18:40,959
about me i'm a solution engineer at

3732
02:18:40,959 --> 02:18:43,200
senjen uh we are

3733
02:18:43,200 --> 02:18:45,840
a not-for-profit based in canada

3734
02:18:45,840 --> 02:18:48,879
our mission is to aid the

3735
02:18:48,879 --> 02:18:51,599
um commercialization and growth of

3736
02:18:51,599 --> 02:18:54,799
canadian startups and overcome technical

3737
02:18:54,799 --> 02:18:56,398
challenges that are currently inhibiting

3738
02:18:56,398 --> 02:18:57,439
them

3739
02:18:57,439 --> 02:18:59,120
we're funded partially by the government

3740
02:18:59,120 --> 02:19:01,519
but also largely from industry uh

3741
02:19:01,519 --> 02:19:04,080
through memberships a summit that we do

3742
02:19:04,080 --> 02:19:05,359
similar to

3743
02:19:05,359 --> 02:19:06,799
orc

3744
02:19:06,799 --> 02:19:09,519
and a couple of private revenue projects

3745
02:19:09,519 --> 02:19:11,760
as well

3746
02:19:11,760 --> 02:19:13,519
oops

3747
02:19:13,519 --> 02:19:14,799
uh so

3748
02:19:14,799 --> 02:19:16,240
just an agenda we're going to go over

3749
02:19:16,240 --> 02:19:18,478
the test methodology of what we did some

3750
02:19:18,478 --> 02:19:21,359
of the background a couple attempts some

3751
02:19:21,359 --> 02:19:23,519
technologies that we uh

3752
02:19:23,519 --> 02:19:25,040
investigated

3753
02:19:25,040 --> 02:19:26,558
and then finally some performance

3754
02:19:26,558 --> 02:19:29,040
results and uh you know we're going to

3755
02:19:29,040 --> 02:19:30,240
measure

3756
02:19:30,240 --> 02:19:32,398
up to cesa nick the the guys who

3757
02:19:32,398 --> 02:19:35,359
actually wrote not and compared to their

3758
02:19:35,359 --> 02:19:38,160
results as well

3759
02:19:39,200 --> 02:19:40,799
so for a little background on this

3760
02:19:40,799 --> 02:19:41,920
project

3761
02:19:41,920 --> 02:19:44,318
uh sierra the canadian internet

3762
02:19:44,318 --> 02:19:46,240
registration authority

3763
02:19:46,240 --> 02:19:47,760
reached out to us

3764
02:19:47,760 --> 02:19:50,560
to see if we could help them achieve

3765
02:19:50,560 --> 02:19:53,040
their goal of 10 gigabits per second or

3766
02:19:53,040 --> 02:19:54,399
line rate

3767
02:19:54,399 --> 02:19:57,200
of udp dns responses

3768
02:19:57,200 --> 02:20:00,000
um or get as close as possible

3769
02:20:00,000 --> 02:20:02,160
um doing that we'd want to document

3770
02:20:02,160 --> 02:20:03,840
setup procedures

3771
02:20:03,840 --> 02:20:06,000
and then ultimately recommend system

3772
02:20:06,000 --> 02:20:08,319
sizing in order to do that so

3773
02:20:08,319 --> 02:20:09,680
if you're going to go and buy new

3774
02:20:09,680 --> 02:20:12,240
servers you want to get

3775
02:20:12,240 --> 02:20:14,000
the cheapest ones or the smallest ones

3776
02:20:14,000 --> 02:20:15,439
possible

3777
02:20:15,439 --> 02:20:18,080
to achieve the the ultimate goal of line

3778
02:20:18,080 --> 02:20:20,720
rate gdp responses

3779
02:20:20,720 --> 02:20:22,479
in addition we're going to do what we

3780
02:20:22,479 --> 02:20:24,560
could to investigate the possible speed

3781
02:20:24,560 --> 02:20:25,280
up

3782
02:20:25,280 --> 02:20:30,040
of tcp responses as well

3783
02:20:30,399 --> 02:20:32,640
so in our test topology and you know i'm

3784
02:20:32,640 --> 02:20:34,240
sorry for the ascii but it was kind of

3785
02:20:34,240 --> 02:20:36,640
the best way to get all the data

3786
02:20:36,640 --> 02:20:38,960
in a nice concise format

3787
02:20:38,960 --> 02:20:42,640
um we have three dns load generators

3788
02:20:42,640 --> 02:20:44,560
uh through which will run multiple

3789
02:20:44,560 --> 02:20:47,040
instances of a load generator

3790
02:20:47,040 --> 02:20:50,160
and pump all that towards one single dns

3791
02:20:50,160 --> 02:20:51,920
server

3792
02:20:51,920 --> 02:20:54,960
on that server we're going to vary

3793
02:20:54,960 --> 02:20:57,680
the amount of cpu cores enabled so that

3794
02:20:57,680 --> 02:21:00,160
we can try and find that sweet spot of

3795
02:21:00,160 --> 02:21:02,319
you know how much cpu is needed

3796
02:21:02,319 --> 02:21:04,399
and then measure memory usage and so on

3797
02:21:04,399 --> 02:21:05,920
to try and find that perfect system

3798
02:21:05,920 --> 02:21:08,319
sizing

3799
02:21:08,319 --> 02:21:10,240
as well doing this we wanted to make

3800
02:21:10,240 --> 02:21:11,600
sure that

3801
02:21:11,600 --> 02:21:13,359
since the the dns server would be like

3802
02:21:13,359 --> 02:21:15,840
multi-threaded we wanted to multi-thread

3803
02:21:15,840 --> 02:21:18,399
and multi-cue the load generators to

3804
02:21:18,399 --> 02:21:20,479
make sure those weren't ever the the

3805
02:21:20,479 --> 02:21:22,479
bottleneck we want to make sure it was

3806
02:21:22,479 --> 02:21:26,438
always that one server

3807
02:21:27,200 --> 02:21:29,600
so on the load generators as i mentioned

3808
02:21:29,600 --> 02:21:31,280
earlier we have multiple instances run

3809
02:21:31,280 --> 02:21:32,720
across them

3810
02:21:32,720 --> 02:21:34,960
um we'll use scripts to start those

3811
02:21:34,960 --> 02:21:36,800
instances stop them

3812
02:21:36,800 --> 02:21:38,800
uh collect results aggregate them and

3813
02:21:38,800 --> 02:21:41,040
get kind of a final number of

3814
02:21:41,040 --> 02:21:42,960
uh the number of responses we got you

3815
02:21:42,960 --> 02:21:47,040
know per second or or total

3816
02:21:47,040 --> 02:21:50,160
each load generator had a dictionary

3817
02:21:50,160 --> 02:21:52,080
that was derived from

3818
02:21:52,080 --> 02:21:54,640
the full zone that we were testing

3819
02:21:54,640 --> 02:21:57,200
um the records were requested at random

3820
02:21:57,200 --> 02:21:59,359
and we made sure to only have 100

3821
02:21:59,359 --> 02:22:01,280
outstanding queries

3822
02:22:01,280 --> 02:22:04,640
uh to try and keep results somewhat fair

3823
02:22:04,640 --> 02:22:06,080
uh rather than just like hammering the

3824
02:22:06,080 --> 02:22:08,720
server you know blocking it down and

3825
02:22:08,720 --> 02:22:10,000
just waiting for a bunch of things to

3826
02:22:10,000 --> 02:22:11,920
time out that might give us

3827
02:22:11,920 --> 02:22:15,680
a less accurate uh response

3828
02:22:15,680 --> 02:22:16,720
what's worth

3829
02:22:16,720 --> 02:22:19,840
noting is that even though we used a

3830
02:22:19,840 --> 02:22:22,160
dictionary drive from the full zone we

3831
02:22:22,160 --> 02:22:24,000
didn't find an appreciable difference

3832
02:22:24,000 --> 02:22:26,960
between using a full dictionary or using

3833
02:22:26,960 --> 02:22:29,200
a smaller dictionary of only

3834
02:22:29,200 --> 02:22:33,200
say a thousand different queries to send

3835
02:22:33,200 --> 02:22:36,000
we just made sure that we were doing a

3836
02:22:36,000 --> 02:22:38,240
number of different types of uh record

3837
02:22:38,240 --> 02:22:41,280
requests so like a's quad a's

3838
02:22:41,280 --> 02:22:44,560
ns yes etc

3839
02:22:46,000 --> 02:22:48,720
so with the baseline we we replicated

3840
02:22:48,720 --> 02:22:52,319
what sarah had set up and we tried to

3841
02:22:52,319 --> 02:22:53,760
achieve a number similar to what they

3842
02:22:53,760 --> 02:22:55,040
were achieving to make sure that we were

3843
02:22:55,040 --> 02:22:57,359
starting on even ground

3844
02:22:57,359 --> 02:22:59,680
so this was a wine line authoritative

3845
02:22:59,680 --> 02:23:01,760
top-level domain

3846
02:23:01,760 --> 02:23:04,720
running a full real zone

3847
02:23:04,720 --> 02:23:07,439
and once we got that all set up and we

3848
02:23:07,439 --> 02:23:09,840
ran some tests against it we're seeing

3849
02:23:09,840 --> 02:23:13,280
roughly 120 000 queries per second

3850
02:23:13,280 --> 02:23:15,520
uh response

3851
02:23:15,520 --> 02:23:17,200
um so that was about what sarah was

3852
02:23:17,200 --> 02:23:19,520
seeing uh we found that we had low

3853
02:23:19,520 --> 02:23:21,640
network utilization like

3854
02:23:21,640 --> 02:23:24,640
168 megabits per second

3855
02:23:24,640 --> 02:23:27,680
and relatively low memory and cpu

3856
02:23:27,680 --> 02:23:29,600
utilization

3857
02:23:29,600 --> 02:23:31,840
we saw no obvious hardware bottlenecks

3858
02:23:31,840 --> 02:23:33,600
preventing us from

3859
02:23:33,600 --> 02:23:35,040
going to higher scale who are running

3860
02:23:35,040 --> 02:23:37,680
out of cpu or memory anything like that

3861
02:23:37,680 --> 02:23:40,240
um so this was where the real challenge

3862
02:23:40,240 --> 02:23:42,399
started is figuring out what was

3863
02:23:42,399 --> 02:23:45,040
limiting us how to get around that how

3864
02:23:45,040 --> 02:23:47,840
to increase that number

3865
02:23:48,960 --> 02:23:49,920
so

3866
02:23:49,920 --> 02:23:53,200
first we did a couple hardware

3867
02:23:53,200 --> 02:23:54,720
tweaks you know

3868
02:23:54,720 --> 02:23:59,040
changing bios profiles etc

3869
02:23:59,040 --> 02:24:00,720
we kind of ran through a bunch of those

3870
02:24:00,720 --> 02:24:03,200
and eventually landed on an io optimized

3871
02:24:03,200 --> 02:24:04,640
profile

3872
02:24:04,640 --> 02:24:06,960
we turned hyper threading off

3873
02:24:06,960 --> 02:24:08,160
and we

3874
02:24:08,160 --> 02:24:11,200
saw like just over 100 improvement and

3875
02:24:11,200 --> 02:24:13,200
now we were able to get around

3876
02:24:13,200 --> 02:24:16,160
250 000 queries per second

3877
02:24:16,160 --> 02:24:19,040
although that did up the cpu utilization

3878
02:24:19,040 --> 02:24:21,359
to about 60

3879
02:24:21,359 --> 02:24:23,280
so with that we started to see a bit of

3880
02:24:23,280 --> 02:24:25,200
an issue where we could get better

3881
02:24:25,200 --> 02:24:26,640
numbers but

3882
02:24:26,640 --> 02:24:28,479
uh cpu was growing

3883
02:24:28,479 --> 02:24:32,399
uh kind of roughly linearly with those

3884
02:24:32,399 --> 02:24:33,520
so

3885
02:24:33,520 --> 02:24:35,120
what we did is we

3886
02:24:35,120 --> 02:24:37,520
decided to expand on that we made the

3887
02:24:37,520 --> 02:24:39,680
application cloud native

3888
02:24:39,680 --> 02:24:42,000
so we deployed this in kubernetes by

3889
02:24:42,000 --> 02:24:42,960
building

3890
02:24:42,960 --> 02:24:45,920
a binding pod and the custom deployment

3891
02:24:45,920 --> 02:24:47,840
with load balancing

3892
02:24:47,840 --> 02:24:48,880
auto

3893
02:24:48,880 --> 02:24:52,240
replicas and so on to scale that out

3894
02:24:52,240 --> 02:24:54,160
this was successful in that we were able

3895
02:24:54,160 --> 02:24:56,399
to fully utilize the hosts

3896
02:24:56,399 --> 02:24:58,000
and it

3897
02:24:58,000 --> 02:25:00,319
accelerated kind of the the management

3898
02:25:00,319 --> 02:25:01,920
or adding a lot of more hosts and

3899
02:25:01,920 --> 02:25:03,760
getting them going

3900
02:25:03,760 --> 02:25:06,560
however we still only saw about 500 000

3901
02:25:06,560 --> 02:25:08,319
queries per second

3902
02:25:08,319 --> 02:25:10,560
still less than a gigabit per second per

3903
02:25:10,560 --> 02:25:11,920
host

3904
02:25:11,920 --> 02:25:14,000
um so

3905
02:25:14,000 --> 02:25:16,800
it was an improvement but obviously not

3906
02:25:16,800 --> 02:25:19,359
quite what we were looking for

3907
02:25:19,359 --> 02:25:20,560
so

3908
02:25:20,560 --> 02:25:21,760
we started looking at some new

3909
02:25:21,760 --> 02:25:23,840
technologies that might

3910
02:25:23,840 --> 02:25:25,600
help us along because clearly we're not

3911
02:25:25,600 --> 02:25:28,319
cpu limited or something like that

3912
02:25:28,319 --> 02:25:30,800
and we found that

3913
02:25:30,800 --> 02:25:32,560
one technology

3914
02:25:32,560 --> 02:25:33,920
xdp

3915
02:25:33,920 --> 02:25:36,479
i would be very useful in kind of what

3916
02:25:36,479 --> 02:25:39,600
we think is going on here so

3917
02:25:39,600 --> 02:25:42,720
uh xdp stands for express data path

3918
02:25:42,720 --> 02:25:44,880
and ultimately it's there to improve in

3919
02:25:44,880 --> 02:25:46,640
our performance

3920
02:25:46,640 --> 02:25:48,560
the way it works is it moves many

3921
02:25:48,560 --> 02:25:51,280
functions lower in

3922
02:25:51,280 --> 02:25:53,200
the networking stack so

3923
02:25:53,200 --> 02:25:55,359
for example to kernel level

3924
02:25:55,359 --> 02:25:57,840
or even in some cases some network cards

3925
02:25:57,840 --> 02:25:59,760
actually have hardware that can run xdp

3926
02:25:59,760 --> 02:26:00,880
programs

3927
02:26:00,880 --> 02:26:03,520
which can greatly speed up

3928
02:26:03,520 --> 02:26:06,080
like network throughput packet decisions

3929
02:26:06,080 --> 02:26:08,080
and so on

3930
02:26:08,080 --> 02:26:08,960
so

3931
02:26:08,960 --> 02:26:11,120
the the result of this is it frees up

3932
02:26:11,120 --> 02:26:13,120
quite a bit of cpu

3933
02:26:13,120 --> 02:26:15,040
uh it moves things lower in the stack it

3934
02:26:15,040 --> 02:26:16,560
means that some actions can happen

3935
02:26:16,560 --> 02:26:18,800
sooner uh since fewer things need to be

3936
02:26:18,800 --> 02:26:20,960
punted up to the cpu

3937
02:26:20,960 --> 02:26:23,520
and in many many applications this is

3938
02:26:23,520 --> 02:26:25,200
used for

3939
02:26:25,200 --> 02:26:27,040
doing routing decisions

3940
02:26:27,040 --> 02:26:29,600
packet filtering and so on so it can be

3941
02:26:29,600 --> 02:26:31,760
very effective in

3942
02:26:31,760 --> 02:26:33,840
many many packets coming in making

3943
02:26:33,840 --> 02:26:37,359
decisions and sending them out

3944
02:26:37,840 --> 02:26:40,640
xtp however comes with a fair few number

3945
02:26:40,640 --> 02:26:42,640
of limitations

3946
02:26:42,640 --> 02:26:44,000
so

3947
02:26:44,000 --> 02:26:46,880
the first is that xcp needs direct

3948
02:26:46,880 --> 02:26:48,880
access to the network cart

3949
02:26:48,880 --> 02:26:49,680
um

3950
02:26:49,680 --> 02:26:51,600
this can be quite difficult in a

3951
02:26:51,600 --> 02:26:54,240
virtualized environment still possible

3952
02:26:54,240 --> 02:26:55,520
but

3953
02:26:55,520 --> 02:26:58,960
it means that in our case we stuck with

3954
02:26:58,960 --> 02:27:00,319
instead of running virtual machines

3955
02:27:00,319 --> 02:27:03,200
running on like bare metal servers

3956
02:27:03,200 --> 02:27:04,960
another huge one is that we need

3957
02:27:04,960 --> 02:27:07,280
symmetrical packet paths

3958
02:27:07,280 --> 02:27:09,040
which means that you need to make sure

3959
02:27:09,040 --> 02:27:11,920
that a packet coming in on one interface

3960
02:27:11,920 --> 02:27:14,399
the response goes out on the same

3961
02:27:14,399 --> 02:27:17,439
so we can't do things like nick teaming

3962
02:27:17,439 --> 02:27:20,240
uh or in the case of kubernetes

3963
02:27:20,240 --> 02:27:22,960
uh it's very hard to make sure that a

3964
02:27:22,960 --> 02:27:25,359
request coming in on one server is

3965
02:27:25,359 --> 02:27:26,880
responded

3966
02:27:26,880 --> 02:27:28,720
by that same server so

3967
02:27:28,720 --> 02:27:30,720
the load balancer can create a problem

3968
02:27:30,720 --> 02:27:33,040
then the load balancer itself becomes a

3969
02:27:33,040 --> 02:27:35,280
bottleneck

3970
02:27:35,280 --> 02:27:37,040
uh and then finally

3971
02:27:37,040 --> 02:27:39,280
like the kernel has to support xtp and

3972
02:27:39,280 --> 02:27:41,359
have it enabled this is no longer an

3973
02:27:41,359 --> 02:27:43,760
issue it's enabled by default on

3974
02:27:43,760 --> 02:27:46,000
all the latest kernels for shipping with

3975
02:27:46,000 --> 02:27:49,359
distros at the time though it wasn't so

3976
02:27:49,359 --> 02:27:51,600
i had to find one that had it enabled i

3977
02:27:51,600 --> 02:27:52,960
had to

3978
02:27:52,960 --> 02:27:55,359
sometimes recompile the the kernel to

3979
02:27:55,359 --> 02:27:58,880
make sure that was enabled as well

3980
02:27:58,880 --> 02:28:01,439
as i alluded to with kubernetes it's

3981
02:28:01,439 --> 02:28:03,359
hard to

3982
02:28:03,359 --> 02:28:04,960
enforce that

3983
02:28:04,960 --> 02:28:07,760
that symmetric packet path

3984
02:28:07,760 --> 02:28:09,840
and you also need a network plug-in that

3985
02:28:09,840 --> 02:28:11,840
will do the xtp in place of the

3986
02:28:11,840 --> 02:28:13,280
application

3987
02:28:13,280 --> 02:28:14,000
uh

3988
02:28:14,000 --> 02:28:17,200
because kubernetes has more of the

3989
02:28:17,200 --> 02:28:18,880
context of

3990
02:28:18,880 --> 02:28:20,399
like what pods are running on what hosts

3991
02:28:20,399 --> 02:28:22,240
and so on it really needs to take care

3992
02:28:22,240 --> 02:28:23,439
of that so

3993
02:28:23,439 --> 02:28:26,800
you do lose some performance in that

3994
02:28:26,800 --> 02:28:31,119
pod to a network plug-in interface

3995
02:28:32,640 --> 02:28:34,640
so

3996
02:28:34,640 --> 02:28:37,920
now that we have xdp as a target

3997
02:28:37,920 --> 02:28:40,160
we were looking for ways to get this

3998
02:28:40,160 --> 02:28:43,520
enabled um we tried the kubernetes route

3999
02:28:43,520 --> 02:28:45,760
it didn't really work for us

4000
02:28:45,760 --> 02:28:48,640
uh and then we reached out to caesar.net

4001
02:28:48,640 --> 02:28:51,200
uh the guys who wrote not

4002
02:28:51,200 --> 02:28:54,640
because they had it enabled in not and

4003
02:28:54,640 --> 02:28:56,560
we worked with them over the past year

4004
02:28:56,560 --> 02:28:57,600
or so

4005
02:28:57,600 --> 02:29:00,399
to get that going

4006
02:29:00,399 --> 02:29:02,960
and as it turns out it's incredibly easy

4007
02:29:02,960 --> 02:29:05,760
to enable xdp and not

4008
02:29:05,760 --> 02:29:07,520
because they have a yaml yaml-based

4009
02:29:07,520 --> 02:29:08,800
configuration

4010
02:29:08,800 --> 02:29:10,880
all it takes is

4011
02:29:10,880 --> 02:29:14,080
you know a top-level element of xcp you

4012
02:29:14,080 --> 02:29:16,240
turn on listen and then you're already

4013
02:29:16,240 --> 02:29:18,960
working with udp

4014
02:29:18,960 --> 02:29:21,120
tcp there's just a couple more options

4015
02:29:21,120 --> 02:29:24,399
to configure i just say tcp on and then

4016
02:29:24,399 --> 02:29:26,319
you know max clients buffer size and so

4017
02:29:26,319 --> 02:29:27,359
on

4018
02:29:27,359 --> 02:29:30,399
these numbers are really about tuning so

4019
02:29:30,399 --> 02:29:31,920
i have some examples here they won't

4020
02:29:31,920 --> 02:29:33,520
necessarily work the best for you if you

4021
02:29:33,520 --> 02:29:35,280
go to replicate this

4022
02:29:35,280 --> 02:29:38,240
but it is an example

4023
02:29:38,319 --> 02:29:39,840
and then finally

4024
02:29:39,840 --> 02:29:42,800
with a faster dns server we need a

4025
02:29:42,800 --> 02:29:44,800
faster tester

4026
02:29:44,800 --> 02:29:46,960
so historically we're using dns perf

4027
02:29:46,960 --> 02:29:51,280
which was a great tool um it gave great

4028
02:29:51,280 --> 02:29:53,200
results output at the end

4029
02:29:53,200 --> 02:29:55,680
however it just could not keep up with

4030
02:29:55,680 --> 02:29:57,200
the new server so

4031
02:29:57,200 --> 02:29:59,280
i think we're able to get like 200 000

4032
02:29:59,280 --> 02:30:01,200
queries per second

4033
02:30:01,200 --> 02:30:04,960
from each dns per instance uh but if

4034
02:30:04,960 --> 02:30:05,760
we're

4035
02:30:05,760 --> 02:30:08,319
kind of extending this to new orders of

4036
02:30:08,319 --> 02:30:11,200
magnitude with xtp we need an xdp

4037
02:30:11,200 --> 02:30:14,000
enabled load generator

4038
02:30:14,000 --> 02:30:17,280
which is what kxcp gun does

4039
02:30:17,280 --> 02:30:18,399
and then

4040
02:30:18,399 --> 02:30:19,200
uh

4041
02:30:19,200 --> 02:30:21,840
we also discovered that kxep gun

4042
02:30:21,840 --> 02:30:23,359
automatically

4043
02:30:23,359 --> 02:30:25,040
creates a number of threads equal to the

4044
02:30:25,040 --> 02:30:27,520
number of cues configured on the neck

4045
02:30:27,520 --> 02:30:29,359
uh so we didn't have to do any extra

4046
02:30:29,359 --> 02:30:31,680
work to make sure that matched and it

4047
02:30:31,680 --> 02:30:34,560
was optimally there

4048
02:30:36,319 --> 02:30:37,200
so

4049
02:30:37,200 --> 02:30:40,560
once we had the xdp gun enabled and not

4050
02:30:40,560 --> 02:30:43,120
with xdp enabled on the servers

4051
02:30:43,120 --> 02:30:44,560
we were able to get some performance

4052
02:30:44,560 --> 02:30:46,160
results

4053
02:30:46,160 --> 02:30:49,120
and uh we ultimately hit 16 million

4054
02:30:49,120 --> 02:30:50,720
queries per second

4055
02:30:50,720 --> 02:30:54,319
uh using roughly 92 cpu

4056
02:30:54,319 --> 02:30:56,399
um and the reason that we couldn't go

4057
02:30:56,399 --> 02:30:59,520
higher than say 92 is because 16 million

4058
02:30:59,520 --> 02:31:01,040
queries per second

4059
02:31:01,040 --> 02:31:03,920
uh was 25 gigabits per second which was

4060
02:31:03,920 --> 02:31:06,000
the size of the network card we had

4061
02:31:06,000 --> 02:31:09,520
uh so we hit a network card saturation

4062
02:31:09,520 --> 02:31:11,680
and we hit this actually at only 32

4063
02:31:11,680 --> 02:31:14,479
cores when we had 36 available so

4064
02:31:14,479 --> 02:31:16,080
there's room for a little bit more

4065
02:31:16,080 --> 02:31:17,439
improvement there

4066
02:31:17,439 --> 02:31:20,880
although that's the limit of what we hit

4067
02:31:20,880 --> 02:31:24,080
um for some context this is like 133

4068
02:31:24,080 --> 02:31:25,120
times

4069
02:31:25,120 --> 02:31:27,920
our baseline number so this was like a

4070
02:31:27,920 --> 02:31:30,560
great performance result that we got a

4071
02:31:30,560 --> 02:31:33,279
great improvement

4072
02:31:34,080 --> 02:31:37,040
next uh we're going to focus on

4073
02:31:37,040 --> 02:31:39,600
tcp results so this is a little bit

4074
02:31:39,600 --> 02:31:40,640
harder

4075
02:31:40,640 --> 02:31:42,880
it takes more tuning and so on

4076
02:31:42,880 --> 02:31:45,760
um our baseline was around 40 000

4077
02:31:45,760 --> 02:31:47,359
queries per second

4078
02:31:47,359 --> 02:31:49,359
without xtp on

4079
02:31:49,359 --> 02:31:50,240
so

4080
02:31:50,240 --> 02:31:53,040
when we were doing this uh not didn't

4081
02:31:53,040 --> 02:31:54,880
actually have xdp

4082
02:31:54,880 --> 02:31:56,720
for tcp

4083
02:31:56,720 --> 02:31:58,160
so we collaborate them and i don't want

4084
02:31:58,160 --> 02:31:59,840
to overstate how much we work with them

4085
02:31:59,840 --> 02:32:00,800
but

4086
02:32:00,800 --> 02:32:02,800
they were a great group

4087
02:32:02,800 --> 02:32:05,760
to work with always answering questions

4088
02:32:05,760 --> 02:32:07,520
we did what we could to test new

4089
02:32:07,520 --> 02:32:08,800
features

4090
02:32:08,800 --> 02:32:11,040
new config changes you know file bugs if

4091
02:32:11,040 --> 02:32:12,479
we found them

4092
02:32:12,479 --> 02:32:14,080
and

4093
02:32:14,080 --> 02:32:15,760
towards the end once kind of everything

4094
02:32:15,760 --> 02:32:16,960
was working

4095
02:32:16,960 --> 02:32:19,120
we actually achieved the maximum 1.3

4096
02:32:19,120 --> 02:32:22,560
million queries per second with tcp

4097
02:32:22,560 --> 02:32:23,520
um

4098
02:32:23,520 --> 02:32:26,560
you know like 32 times our baseline

4099
02:32:26,560 --> 02:32:28,399
and what i've shown here in the in the

4100
02:32:28,399 --> 02:32:30,560
graph it may be a little confusing but

4101
02:32:30,560 --> 02:32:33,120
because tcp with its back off and stuff

4102
02:32:33,120 --> 02:32:34,399
like that

4103
02:32:34,399 --> 02:32:37,120
uh we we graphed like kind of the the

4104
02:32:37,120 --> 02:32:39,280
high result and the low results

4105
02:32:39,280 --> 02:32:41,040
this is over something like 100

4106
02:32:41,040 --> 02:32:42,560
iterations so

4107
02:32:42,560 --> 02:32:43,920
we actually found some pretty good

4108
02:32:43,920 --> 02:32:45,200
consistency

4109
02:32:45,200 --> 02:32:48,160
uh graph the average here

4110
02:32:48,160 --> 02:32:49,120
um

4111
02:32:49,120 --> 02:32:50,560
and that's

4112
02:32:50,560 --> 02:32:53,280
yeah that's what we had there

4113
02:32:53,280 --> 02:32:56,080
so finally because our numbers don't

4114
02:32:56,080 --> 02:32:58,240
match up with what sees it nick

4115
02:32:58,240 --> 02:33:00,080
published because our server is

4116
02:33:00,080 --> 02:33:01,600
completely different

4117
02:33:01,600 --> 02:33:03,359
we had to try and find a way to compare

4118
02:33:03,359 --> 02:33:04,640
these

4119
02:33:04,640 --> 02:33:05,359
so

4120
02:33:05,359 --> 02:33:08,319
we had different like cpu counts

4121
02:33:08,319 --> 02:33:11,040
different cpu speeds and architectures

4122
02:33:11,040 --> 02:33:13,040
like intel versus amd

4123
02:33:13,040 --> 02:33:14,800
uh as well we had different knick speeds

4124
02:33:14,800 --> 02:33:16,560
so it sees that done nick had a 40

4125
02:33:16,560 --> 02:33:20,880
gigabit nick but we only had 25 gigabit

4126
02:33:20,880 --> 02:33:21,760
so

4127
02:33:21,760 --> 02:33:22,640
the

4128
02:33:22,640 --> 02:33:25,120
the best effort of what we could do

4129
02:33:25,120 --> 02:33:27,200
is try and find a way to break this down

4130
02:33:27,200 --> 02:33:30,399
to a more fundamental element and so we

4131
02:33:30,399 --> 02:33:32,399
attempted that with

4132
02:33:32,399 --> 02:33:36,000
queries per second per chord gigahertz

4133
02:33:36,000 --> 02:33:37,120
uh so

4134
02:33:37,120 --> 02:33:39,600
that would be like if i had 36 chords at

4135
02:33:39,600 --> 02:33:42,560
2.3 gigahertz i would divide my queries

4136
02:33:42,560 --> 02:33:43,680
per second

4137
02:33:43,680 --> 02:33:47,680
across 36 times 2.3

4138
02:33:47,680 --> 02:33:48,560
it's

4139
02:33:48,560 --> 02:33:50,080
a very

4140
02:33:50,080 --> 02:33:52,319
crude simplification it doesn't account

4141
02:33:52,319 --> 02:33:55,439
for uh pneuma nodes for example like

4142
02:33:55,439 --> 02:33:58,319
number of cpus versus cores

4143
02:33:58,319 --> 02:34:01,439
and it won't be linear in that

4144
02:34:01,439 --> 02:34:03,280
you know the higher you scale you're

4145
02:34:03,280 --> 02:34:06,000
gonna get less uh per per core per core

4146
02:34:06,000 --> 02:34:07,200
gigahertz

4147
02:34:07,200 --> 02:34:09,040
but it at least gets us on somewhat even

4148
02:34:09,040 --> 02:34:11,040
ground so we can see hey are we doing

4149
02:34:11,040 --> 02:34:13,520
this right are we on the right track

4150
02:34:13,520 --> 02:34:16,399
um did changing one thing actually make

4151
02:34:16,399 --> 02:34:19,040
a meaningful difference

4152
02:34:19,040 --> 02:34:20,000
and so

4153
02:34:20,000 --> 02:34:21,760
uh we were able to find that even though

4154
02:34:21,760 --> 02:34:23,200
cz nick

4155
02:34:23,200 --> 02:34:25,760
had uh like i'd say a much more powerful

4156
02:34:25,760 --> 02:34:28,240
processor than we did uh and a faster

4157
02:34:28,240 --> 02:34:31,359
network card um with udp we're actually

4158
02:34:31,359 --> 02:34:34,000
able to slightly eke out a little bit

4159
02:34:34,000 --> 02:34:34,880
more

4160
02:34:34,880 --> 02:34:37,200
uh you know queries per second per core

4161
02:34:37,200 --> 02:34:39,120
gigahertz

4162
02:34:39,120 --> 02:34:41,680
uh but on the tcp front we're a little

4163
02:34:41,680 --> 02:34:45,760
bit behind there so that indicates that

4164
02:34:45,760 --> 02:34:48,479
um we're mostly doing it right but in

4165
02:34:48,479 --> 02:34:51,680
our test setup we actually need to

4166
02:34:51,680 --> 02:34:55,040
tune that tcp server a little bit more

4167
02:34:55,040 --> 02:34:58,720
to try and get that number up

4168
02:34:58,720 --> 02:34:59,920
uh so

4169
02:34:59,920 --> 02:35:02,319
i think i'm doing pretty well on time

4170
02:35:02,319 --> 02:35:05,200
uh i'm open to questions now

4171
02:35:05,200 --> 02:35:07,359
um i've also kind of included a couple

4172
02:35:07,359 --> 02:35:08,479
links to

4173
02:35:08,479 --> 02:35:10,960
you know our company to sierra cz nick

4174
02:35:10,960 --> 02:35:15,519
and the utilities and tools that we used

4175
02:35:18,399 --> 02:35:20,240
all right thank you brad everybody you

4176
02:35:20,240 --> 02:35:22,800
should see a survey pop up for this talk

4177
02:35:22,800 --> 02:35:25,280
please feel free to rate this talk as

4178
02:35:25,280 --> 02:35:26,960
it's very important to the program

4179
02:35:26,960 --> 02:35:28,160
committee

4180
02:35:28,160 --> 02:35:30,880
i do see a couple questions here

4181
02:35:30,880 --> 02:35:33,120
hazel smith asks

4182
02:35:33,120 --> 02:35:36,000
qps over core gigahertz have you

4183
02:35:36,000 --> 02:35:39,920
considered qps over watt as a measure

4184
02:35:39,920 --> 02:35:41,920
that is something i considered uh

4185
02:35:41,920 --> 02:35:44,240
although we weren't uh

4186
02:35:44,240 --> 02:35:46,720
at the time were not set up to

4187
02:35:46,720 --> 02:35:48,960
uh measure what so

4188
02:35:48,960 --> 02:35:51,439
um i could do it based on you know like

4189
02:35:51,439 --> 02:35:54,560
uh the published

4190
02:35:54,560 --> 02:35:56,880
like thermal dispersion unity

4191
02:35:56,880 --> 02:35:58,800
of cpus

4192
02:35:58,800 --> 02:36:01,040
but that wouldn't be realistic unless i

4193
02:36:01,040 --> 02:36:02,160
actually had

4194
02:36:02,160 --> 02:36:04,560
you know calibrated test equipment to

4195
02:36:04,560 --> 02:36:06,240
measure the actual power used by the

4196
02:36:06,240 --> 02:36:07,680
server

4197
02:36:07,680 --> 02:36:08,800
as well

4198
02:36:08,800 --> 02:36:10,399
i could measure that but i have nothing

4199
02:36:10,399 --> 02:36:12,240
to compare it against because it's not

4200
02:36:12,240 --> 02:36:14,720
something normally uh published by other

4201
02:36:14,720 --> 02:36:17,040
people doing these sorts of tests so

4202
02:36:17,040 --> 02:36:19,680
um great question a good like next step

4203
02:36:19,680 --> 02:36:21,280
perhaps but it's not something that

4204
02:36:21,280 --> 02:36:23,840
we've done yet

4205
02:36:23,920 --> 02:36:26,800
okay uh kathy almond asks out of

4206
02:36:26,800 --> 02:36:29,040
curiosity what version of bind nine were

4207
02:36:29,040 --> 02:36:31,600
you testing before moving on to xtp with

4208
02:36:31,600 --> 02:36:32,880
naught

4209
02:36:32,880 --> 02:36:36,000
um i don't recall this was about a year

4210
02:36:36,000 --> 02:36:38,479
and a half ago but it was the latest uh

4211
02:36:38,479 --> 02:36:40,000
like um

4212
02:36:40,000 --> 02:36:42,000
version in like app or

4213
02:36:42,000 --> 02:36:44,399
any of the other repositories that way

4214
02:36:44,399 --> 02:36:47,200
um i didn't you know download from git

4215
02:36:47,200 --> 02:36:50,160
or anything like that

4216
02:36:50,160 --> 02:36:52,000
okay um

4217
02:36:52,000 --> 02:36:54,160
greg schule

4218
02:36:54,160 --> 02:36:55,040
uh

4219
02:36:55,040 --> 02:36:57,520
comments uh very interesting uh he asks

4220
02:36:57,520 --> 02:37:00,160
as well which version of buy nine uh he

4221
02:37:00,160 --> 02:37:02,640
then asks did you consider thousands ten

4222
02:37:02,640 --> 02:37:05,439
thousands a hundred thousands etc of

4223
02:37:05,439 --> 02:37:06,960
different queries

4224
02:37:06,960 --> 02:37:10,640
uh 16 million qps at 25 gigabits per

4225
02:37:10,640 --> 02:37:12,080
second looks like

4226
02:37:12,080 --> 02:37:15,439
1500 byte responses

4227
02:37:15,439 --> 02:37:19,120
uh good question so uh we set our m2 to

4228
02:37:19,120 --> 02:37:21,359
9000 so that it wouldn't be kind of

4229
02:37:21,359 --> 02:37:24,080
limited to a specific 1500

4230
02:37:24,080 --> 02:37:27,439
uh the average query response was 112

4231
02:37:27,439 --> 02:37:28,960
bytes

4232
02:37:28,960 --> 02:37:30,800
so that did vary

4233
02:37:30,800 --> 02:37:33,760
and for the number of different queries

4234
02:37:33,760 --> 02:37:36,160
i think you're referring to the the

4235
02:37:36,160 --> 02:37:38,000
dictionary that we used

4236
02:37:38,000 --> 02:37:41,040
uh so we used on the order of tens of

4237
02:37:41,040 --> 02:37:43,040
thousands of different

4238
02:37:43,040 --> 02:37:45,760
um queries in that dictionary that were

4239
02:37:45,760 --> 02:37:47,520
then chosen at random

4240
02:37:47,520 --> 02:37:49,840
although uh you know through iteration

4241
02:37:49,840 --> 02:37:51,120
and testing

4242
02:37:51,120 --> 02:37:53,760
when we're converting between dns perf

4243
02:37:53,760 --> 02:37:54,800
and

4244
02:37:54,800 --> 02:37:57,920
kxtp gun which use slightly different

4245
02:37:57,920 --> 02:38:00,560
syntax in their dictionaries we tried a

4246
02:38:00,560 --> 02:38:02,880
short dictionary and we found that

4247
02:38:02,880 --> 02:38:04,399
there's no appreciable difference as

4248
02:38:04,399 --> 02:38:06,240
long as we had

4249
02:38:06,240 --> 02:38:08,000
say roughly a thousand or so just to

4250
02:38:08,000 --> 02:38:09,920
make sure that we had a large enough

4251
02:38:09,920 --> 02:38:14,600
sample to get different types of queries

4252
02:38:14,800 --> 02:38:16,479
okay we have a few questions left at

4253
02:38:16,479 --> 02:38:17,920
this point i think i'll cut off the

4254
02:38:17,920 --> 02:38:20,960
question line uh peter hessler asks when

4255
02:38:20,960 --> 02:38:23,120
you switched the dns server software to

4256
02:38:23,120 --> 02:38:26,080
not for xdp did you rerun the baseline

4257
02:38:26,080 --> 02:38:29,280
tests using not instead of buying nine

4258
02:38:29,280 --> 02:38:32,080
uh we did uh they weren't comparable

4259
02:38:32,080 --> 02:38:34,160
like not was actually a little bit what

4260
02:38:34,160 --> 02:38:36,160
was actually quite a bit more performant

4261
02:38:36,160 --> 02:38:38,080
even without xtp

4262
02:38:38,080 --> 02:38:40,960
um although not recorded here because

4263
02:38:40,960 --> 02:38:42,960
the ultimate goal of this was to compare

4264
02:38:42,960 --> 02:38:45,280
against uh sierra's

4265
02:38:45,280 --> 02:38:46,800
baseline so

4266
02:38:46,800 --> 02:38:48,960
we recorded the data points

4267
02:38:48,960 --> 02:38:50,960
um didn't find it super relevant and

4268
02:38:50,960 --> 02:38:52,560
just kind of stormed ahead to get that

4269
02:38:52,560 --> 02:38:55,520
maximum performance

4270
02:38:55,520 --> 02:38:58,160
all right uh peter lexus asks and this

4271
02:38:58,160 --> 02:39:00,479
may be answered already of the qps

4272
02:39:00,479 --> 02:39:02,399
measured was this for one queue name

4273
02:39:02,399 --> 02:39:04,560
random sub domains existing names in the

4274
02:39:04,560 --> 02:39:06,399
zone etc

4275
02:39:06,399 --> 02:39:07,680
uh this was for

4276
02:39:07,680 --> 02:39:10,479
existing records in a zone it was only

4277
02:39:10,479 --> 02:39:12,399
the top level zone

4278
02:39:12,399 --> 02:39:16,080
so no sub domains or anything like that

4279
02:39:16,240 --> 02:39:19,520
okay and tebow dubli asks how are dns

4280
02:39:19,520 --> 02:39:21,520
query stats collected when xdp is

4281
02:39:21,520 --> 02:39:23,359
enabled

4282
02:39:23,359 --> 02:39:25,359
that's a good question so i don't know

4283
02:39:25,359 --> 02:39:27,680
the specifics of how exactly they do it

4284
02:39:27,680 --> 02:39:28,560
but

4285
02:39:28,560 --> 02:39:31,439
um i'm using the output given by kxdp

4286
02:39:31,439 --> 02:39:32,640
again so

4287
02:39:32,640 --> 02:39:34,640
uh similar to the way dns perf will give

4288
02:39:34,640 --> 02:39:36,880
you a summary at the end of you know

4289
02:39:36,880 --> 02:39:38,880
queries per second you know query sent

4290
02:39:38,880 --> 02:39:40,399
failed etc

4291
02:39:40,399 --> 02:39:43,200
uh kxcp gun does the same so

4292
02:39:43,200 --> 02:39:46,479
uh because it's done at xtp uh because

4293
02:39:46,479 --> 02:39:48,319
it's done with xdp

4294
02:39:48,319 --> 02:39:50,720
uh there's not something i can do to

4295
02:39:50,720 --> 02:39:53,600
say uh like do a packet capture and see

4296
02:39:53,600 --> 02:39:56,000
how things are are coming in i had to

4297
02:39:56,000 --> 02:40:00,000
depend on the output from kxtp gun

4298
02:40:00,000 --> 02:40:00,800
um

4299
02:40:00,800 --> 02:40:03,439
and then from there i aggregated them

4300
02:40:03,439 --> 02:40:04,720
and you know added them up for the

4301
02:40:04,720 --> 02:40:07,120
multiple instances

4302
02:40:07,120 --> 02:40:10,080
okay robert's story asks did you do any

4303
02:40:10,080 --> 02:40:12,240
testing with multiple nics on the server

4304
02:40:12,240 --> 02:40:14,000
side

4305
02:40:14,000 --> 02:40:16,479
uh we attempted to at first so

4306
02:40:16,479 --> 02:40:19,200
that was one way to try and make sure

4307
02:40:19,200 --> 02:40:22,240
that we weren't a network card

4308
02:40:22,240 --> 02:40:24,000
limited so

4309
02:40:24,000 --> 02:40:26,000
we tested with

4310
02:40:26,000 --> 02:40:27,840
an intel 10 gig

4311
02:40:27,840 --> 02:40:30,720
as well as nfl 25 gig and

4312
02:40:30,720 --> 02:40:33,840
also a melanox 10 gig

4313
02:40:33,840 --> 02:40:34,960
we saw

4314
02:40:34,960 --> 02:40:36,240
nothing

4315
02:40:36,240 --> 02:40:38,319
we saw no differences because at the

4316
02:40:38,319 --> 02:40:41,040
time we were still limited by the server

4317
02:40:41,040 --> 02:40:44,319
um once we went to xcp

4318
02:40:44,319 --> 02:40:46,160
we very quickly realized hey we're going

4319
02:40:46,160 --> 02:40:47,520
to hit like

4320
02:40:47,520 --> 02:40:49,520
network card saturation so we went with

4321
02:40:49,520 --> 02:40:51,520
the fastest card that we had available

4322
02:40:51,520 --> 02:40:55,200
which was that intel 25 gig

4323
02:40:55,279 --> 02:40:57,279
okay a couple more questions from kathy

4324
02:40:57,279 --> 02:40:58,160
allman

4325
02:40:58,160 --> 02:41:00,160
a potentially silly question but when

4326
02:41:00,160 --> 02:41:02,880
collecting stats on qps did you sanity

4327
02:41:02,880 --> 02:41:05,520
check that the query responses were good

4328
02:41:05,520 --> 02:41:08,399
i.e not serve fails potentially due to

4329
02:41:08,399 --> 02:41:10,720
resource issues on the server

4330
02:41:10,720 --> 02:41:12,399
yes um

4331
02:41:12,399 --> 02:41:16,640
like both of dns perf and kxp gun i gave

4332
02:41:16,640 --> 02:41:19,279
a listing of how many responses of what

4333
02:41:19,279 --> 02:41:20,479
type

4334
02:41:20,479 --> 02:41:21,439
so

4335
02:41:21,439 --> 02:41:24,319
in kxp gun especially we made sure to

4336
02:41:24,319 --> 02:41:25,680
use

4337
02:41:25,680 --> 02:41:28,479
the responses of essentially ok

4338
02:41:28,479 --> 02:41:29,359
where

4339
02:41:29,359 --> 02:41:32,399
uh it removed uh no responses it removed

4340
02:41:32,399 --> 02:41:36,000
surf fail and so on uh so we received

4341
02:41:36,000 --> 02:41:37,120
more

4342
02:41:37,120 --> 02:41:40,479
responses than put here but i only

4343
02:41:40,479 --> 02:41:42,640
responded with i only

4344
02:41:42,640 --> 02:41:44,640
collected and reported on the the good

4345
02:41:44,640 --> 02:41:47,040
responses

4346
02:41:47,040 --> 02:41:49,040
okay and uh follow up from kathy may

4347
02:41:49,040 --> 02:41:51,279
already be answered actually uh what

4348
02:41:51,279 --> 02:41:53,359
kind of answers were you testing for

4349
02:41:53,359 --> 02:41:57,120
example nx domain no error etc

4350
02:41:57,120 --> 02:42:01,040
uh yeah so we we used um

4351
02:42:01,040 --> 02:42:03,520
uh first a file provided by sierra

4352
02:42:03,520 --> 02:42:05,760
saying here's the test that they used

4353
02:42:05,760 --> 02:42:07,520
and that included

4354
02:42:07,520 --> 02:42:10,640
uh you know a bunch of like nx

4355
02:42:10,640 --> 02:42:12,880
a quad a

4356
02:42:12,880 --> 02:42:14,560
ds and so on

4357
02:42:14,560 --> 02:42:17,600
um so i i don't think i can respond too

4358
02:42:17,600 --> 02:42:19,920
much far than that as i'm myself not a

4359
02:42:19,920 --> 02:42:21,600
dns expert

4360
02:42:21,600 --> 02:42:23,359
but i think i did my best to make sure

4361
02:42:23,359 --> 02:42:25,760
that we got a wide range of types of

4362
02:42:25,760 --> 02:42:27,279
queries

4363
02:42:27,279 --> 02:42:29,600
so for that if you can

4364
02:42:29,600 --> 02:42:32,080
put your question in the matter most i

4365
02:42:32,080 --> 02:42:34,160
can do my best to go research that and

4366
02:42:34,160 --> 02:42:37,120
come back and let you know

4367
02:42:37,120 --> 02:42:39,520
all right and one final question from a

4368
02:42:39,520 --> 02:42:41,600
live question from brett carr brett if

4369
02:42:41,600 --> 02:42:44,240
you'd like to unmute yourself

4370
02:42:44,240 --> 02:42:46,160
hi brad yes this is really interesting

4371
02:42:46,160 --> 02:42:48,160
work and the numbers that you're getting

4372
02:42:48,160 --> 02:42:51,600
here are terrifyingly large which is uh

4373
02:42:51,600 --> 02:42:53,279
which is quite exciting compared to what

4374
02:42:53,279 --> 02:42:54,479
we think our infrastructure our

4375
02:42:54,479 --> 02:42:56,960
infrastructure could do currently um but

4376
02:42:56,960 --> 02:42:59,279
my question really is um you kind of

4377
02:42:59,279 --> 02:43:00,640
glossed over the fact that you thought

4378
02:43:00,640 --> 02:43:02,640
this would be difficult to do

4379
02:43:02,640 --> 02:43:05,359
using virtualization uh and our

4380
02:43:05,359 --> 02:43:06,960
infrastructure is completely virtualized

4381
02:43:06,960 --> 02:43:08,880
currently so i wondered if you could

4382
02:43:08,880 --> 02:43:10,720
maybe expand on that very very quickly

4383
02:43:10,720 --> 02:43:12,640
and and if you've got any thoughts on

4384
02:43:12,640 --> 02:43:14,240
you know it would be possible on this

4385
02:43:14,240 --> 02:43:15,920
type of virtualized infrastructure and

4386
02:43:15,920 --> 02:43:19,439
not possible this type of virtualization

4387
02:43:19,439 --> 02:43:21,279
a great question yeah thank you i did

4388
02:43:21,279 --> 02:43:23,200
gloss over that in the interest of time

4389
02:43:23,200 --> 02:43:24,080
but

4390
02:43:24,080 --> 02:43:26,000
uh once we figured out that we

4391
02:43:26,000 --> 02:43:28,000
essentially had to do x tp to get

4392
02:43:28,000 --> 02:43:30,800
further numbers and i agree these

4393
02:43:30,800 --> 02:43:32,319
when i first saw the result i thought i

4394
02:43:32,319 --> 02:43:34,720
did something wrong but it turns out it

4395
02:43:34,720 --> 02:43:36,720
is correct um

4396
02:43:36,720 --> 02:43:39,439
so for virtualization the

4397
02:43:39,439 --> 02:43:42,000
uh the application needs to program the

4398
02:43:42,000 --> 02:43:45,040
network card with an xtp program

4399
02:43:45,040 --> 02:43:47,279
and in order to do that it needs to be

4400
02:43:47,279 --> 02:43:48,560
able to

4401
02:43:48,560 --> 02:43:50,479
access the network card at least

4402
02:43:50,479 --> 02:43:52,399
somewhat directly

4403
02:43:52,399 --> 02:43:55,200
um at the time and in the private cloud

4404
02:43:55,200 --> 02:43:57,040
that my company has built

4405
02:43:57,040 --> 02:43:59,920
we didn't have the ability to

4406
02:43:59,920 --> 02:44:03,279
expose that let's say xdp interface

4407
02:44:03,279 --> 02:44:05,840
to a virtual machine to do that

4408
02:44:05,840 --> 02:44:07,920
so it is possible but we found it

4409
02:44:07,920 --> 02:44:10,640
incredibly difficult and instead decided

4410
02:44:10,640 --> 02:44:12,960
to swarm on with uh

4411
02:44:12,960 --> 02:44:16,080
with actual like hardware bare metal

4412
02:44:16,080 --> 02:44:18,960
it can be done i've done some research

4413
02:44:18,960 --> 02:44:22,000
um but it required kind of reconfiguring

4414
02:44:22,000 --> 02:44:23,680
uh the cloud that we built which was

4415
02:44:23,680 --> 02:44:25,120
openstack

4416
02:44:25,120 --> 02:44:28,160
um i do know that vmware uh actually

4417
02:44:28,160 --> 02:44:29,279
makes this

4418
02:44:29,279 --> 02:44:31,200
a little bit easier

4419
02:44:31,200 --> 02:44:33,680
although it is a paid offering

4420
02:44:33,680 --> 02:44:35,680
um so it's possible but it's something

4421
02:44:35,680 --> 02:44:38,240
that we decided was too difficult

4422
02:44:38,240 --> 02:44:40,000
uh given that

4423
02:44:40,000 --> 02:44:42,640
ultimately uh sierra who you know hired

4424
02:44:42,640 --> 02:44:44,080
us to do this

4425
02:44:44,080 --> 02:44:46,720
are looking for like bare metal

4426
02:44:46,720 --> 02:44:48,399
it's called pizza boxes that they can

4427
02:44:48,399 --> 02:44:49,840
install so

4428
02:44:49,840 --> 02:44:52,960
uh solving the virtualization problem

4429
02:44:52,960 --> 02:44:56,240
uh wasn't one of our main goals

4430
02:44:56,240 --> 02:44:57,840
okay well i think maybe we gained

4431
02:44:57,840 --> 02:44:59,439
contact after this because that might be

4432
02:44:59,439 --> 02:45:01,439
something we'd be interested in engaging

4433
02:45:01,439 --> 02:45:03,040
with you on further

4434
02:45:03,040 --> 02:45:04,240
absolutely

4435
02:45:04,240 --> 02:45:07,199
okay thanks bro

4436
02:45:07,680 --> 02:45:09,359
right thank you very much brad great

4437
02:45:09,359 --> 02:45:10,560
presentation

4438
02:45:10,560 --> 02:45:12,240
great thank you very much

4439
02:45:12,240 --> 02:45:14,399
alright next we will move on to our

4440
02:45:14,399 --> 02:45:16,720
first lightning talk uh that'll be uh

4441
02:45:16,720 --> 02:45:20,160
peter specchik from isc uh presenting uh

4442
02:45:20,160 --> 02:45:23,760
on the ns i'm sorry nsac breakage survey

4443
02:45:23,760 --> 02:45:25,439
peter

4444
02:45:25,439 --> 02:45:28,160
hello can you hear me i can audio's good

4445
02:45:28,160 --> 02:45:29,600
slides are there please proceed

4446
02:45:29,600 --> 02:45:30,640
excellent

4447
02:45:30,640 --> 02:45:33,680
uh welcome to talk about nsec breakage

4448
02:45:33,680 --> 02:45:37,040
it basically follows up the slack talks

4449
02:45:37,040 --> 02:45:39,680
and the main motivation for the talk is

4450
02:45:39,680 --> 02:45:42,000
that in the next version of bind which

4451
02:45:42,000 --> 02:45:44,560
is coming out soon we're going to enable

4452
02:45:44,560 --> 02:45:46,000
the aggressive

4453
02:45:46,000 --> 02:45:49,120
use of cache so we just wanted to know

4454
02:45:49,120 --> 02:45:53,200
what will break next slide please

4455
02:45:53,680 --> 02:45:55,600
just a quick recap

4456
02:45:55,600 --> 02:45:58,720
the type bitmap is a list of types which

4457
02:45:58,720 --> 02:46:00,560
exist on a given name

4458
02:46:00,560 --> 02:46:03,120
so here on slide we have the precise

4459
02:46:03,120 --> 02:46:05,439
type bitmap so we can see that on the

4460
02:46:05,439 --> 02:46:07,399
name

4461
02:46:07,399 --> 02:46:10,880
users.isc.org only three types do exist

4462
02:46:10,880 --> 02:46:12,160
it's the a

4463
02:46:12,160 --> 02:46:14,240
and mandatory are second and a second

4464
02:46:14,240 --> 02:46:15,439
that's it

4465
02:46:15,439 --> 02:46:19,600
this is like the book rfc standard nsec

4466
02:46:19,600 --> 02:46:20,800
record

4467
02:46:20,800 --> 02:46:23,840
and the biggest advantage is that it

4468
02:46:23,840 --> 02:46:25,200
allows

4469
02:46:25,200 --> 02:46:28,000
resolvers to effectively use the cache

4470
02:46:28,000 --> 02:46:30,240
because the resolvers can synthesize new

4471
02:46:30,240 --> 02:46:33,120
data answers when necessary

4472
02:46:33,120 --> 02:46:36,080
next slide please

4473
02:46:36,080 --> 02:46:39,200
an alternative how to do that is

4474
02:46:39,200 --> 02:46:41,680
use so-called blacklist for example used

4475
02:46:41,680 --> 02:46:43,040
by cloudflare

4476
02:46:43,040 --> 02:46:43,920
and

4477
02:46:43,920 --> 02:46:47,040
in principle the authoritative servers

4478
02:46:47,040 --> 02:46:50,560
uh return nsx record with like the huge

4479
02:46:50,560 --> 02:46:52,560
list of types practically all the time

4480
02:46:52,560 --> 02:46:54,319
the server supports

4481
02:46:54,319 --> 02:46:58,399
and it just flips down the bit for the

4482
02:46:58,399 --> 02:47:01,600
type asked by the client so here in the

4483
02:47:01,600 --> 02:47:04,000
on the first line the client is asking

4484
02:47:04,000 --> 02:47:05,600
for tlsa

4485
02:47:05,600 --> 02:47:06,880
and the

4486
02:47:06,880 --> 02:47:09,600
type of bitmap has all the type except

4487
02:47:09,600 --> 02:47:12,960
for the dlsa

4488
02:47:12,960 --> 02:47:15,359
again when the client asks for s mime a

4489
02:47:15,359 --> 02:47:18,160
we can see that the type bitmap is again

4490
02:47:18,160 --> 02:47:22,399
huge but it has flipped a bit for s mime

4491
02:47:22,399 --> 02:47:25,680
a which is not present and the tlsa is

4492
02:47:25,680 --> 02:47:27,520
there even though it wasn't there in the

4493
02:47:27,520 --> 02:47:30,080
previous query

4494
02:47:30,080 --> 02:47:31,520
this type is

4495
02:47:31,520 --> 02:47:33,920
fine in a sense that it doesn't break

4496
02:47:33,920 --> 02:47:34,880
anything

4497
02:47:34,880 --> 02:47:36,240
it works

4498
02:47:36,240 --> 02:47:38,880
the clear disadvantage is that it

4499
02:47:38,880 --> 02:47:41,439
doesn't allow any aggressive use of cash

4500
02:47:41,439 --> 02:47:42,720
because the

4501
02:47:42,720 --> 02:47:45,359
from this proof of non-existence there

4502
02:47:45,359 --> 02:47:46,880
is no way how the resolver can

4503
02:47:46,880 --> 02:47:49,760
synthesize anything use anything useful

4504
02:47:49,760 --> 02:47:51,120
so it just

4505
02:47:51,120 --> 02:47:53,359
you know clutters cache and that's it

4506
02:47:53,359 --> 02:47:56,319
but it works it doesn't bring anything

4507
02:47:56,319 --> 02:47:59,880
next slide please

4508
02:48:07,600 --> 02:48:10,160
met could you advance slide please maybe

4509
02:48:10,160 --> 02:48:12,880
you are trying

4510
02:48:13,680 --> 02:48:15,920
okay

4511
02:48:15,920 --> 02:48:17,120
the problem

4512
02:48:17,120 --> 02:48:19,600
problems start when you know someone

4513
02:48:19,600 --> 02:48:21,200
takes a shortcut

4514
02:48:21,200 --> 02:48:24,000
and use uh uses a type a bitmap which

4515
02:48:24,000 --> 02:48:26,000
doesn't contain all the types which are

4516
02:48:26,000 --> 02:48:28,479
present the cloudflare is sending all

4517
02:48:28,479 --> 02:48:31,120
the types which are present plus some

4518
02:48:31,120 --> 02:48:33,040
types which are not actually there which

4519
02:48:33,040 --> 02:48:34,560
is not a problem

4520
02:48:34,560 --> 02:48:37,120
here we have the subset

4521
02:48:37,120 --> 02:48:38,640
of types so

4522
02:48:38,640 --> 02:48:41,279
we the type bitmap is not listing all

4523
02:48:41,279 --> 02:48:44,240
the types so for example the client is

4524
02:48:44,240 --> 02:48:46,080
asking for quote a

4525
02:48:46,080 --> 02:48:48,000
and the answer coming back has proof of

4526
02:48:48,000 --> 02:48:51,040
non-existence which doesn't list a

4527
02:48:51,040 --> 02:48:53,600
and code a so neither a nor code a

4528
02:48:53,600 --> 02:48:56,160
should exist according to this proof of

4529
02:48:56,160 --> 02:48:57,760
non-existence

4530
02:48:57,760 --> 02:48:59,600
the problem is

4531
02:48:59,600 --> 02:49:03,520
that when the client asks directly for a

4532
02:49:03,520 --> 02:49:05,279
it the authorizative server will

4533
02:49:05,279 --> 02:49:07,200
actually return a record and

4534
02:49:07,200 --> 02:49:09,600
corresponding rrsik

4535
02:49:09,600 --> 02:49:14,399
so imagine that we are a resolver

4536
02:49:14,399 --> 02:49:16,640
and the client is doing happy ables and

4537
02:49:16,640 --> 02:49:18,560
sends two queries in parallel one for

4538
02:49:18,560 --> 02:49:21,760
quad a and the other one for one a

4539
02:49:21,760 --> 02:49:22,880
and now

4540
02:49:22,880 --> 02:49:24,960
for some reason there is over you know

4541
02:49:24,960 --> 02:49:27,760
this size to resolve the code a first

4542
02:49:27,760 --> 02:49:30,479
and it gets this proof of non-existence

4543
02:49:30,479 --> 02:49:32,720
that proof of non-existence gets put

4544
02:49:32,720 --> 02:49:34,720
into the resolver's cache

4545
02:49:34,720 --> 02:49:37,200
and then the resolver moves on to

4546
02:49:37,200 --> 02:49:39,120
resolve the a query

4547
02:49:39,120 --> 02:49:41,520
but the data is already in the cache so

4548
02:49:41,520 --> 02:49:43,359
there is over happily synthetize there's

4549
02:49:43,359 --> 02:49:45,040
no data answer

4550
02:49:45,040 --> 02:49:46,640
and obviously

4551
02:49:46,640 --> 02:49:47,760
the

4552
02:49:47,760 --> 02:49:50,080
site will be unavailable because i'm

4553
02:49:50,080 --> 02:49:52,560
pretty sure that the domain owner didn't

4554
02:49:52,560 --> 02:49:55,920
intend to send no data for ace

4555
02:49:55,920 --> 02:49:57,120
so

4556
02:49:57,120 --> 02:50:00,080
in this slide please

4557
02:50:00,080 --> 02:50:02,479
we can see that this is one type of

4558
02:50:02,479 --> 02:50:04,319
breakage where the

4559
02:50:04,319 --> 02:50:06,240
this incomplete type bitmap breaks the

4560
02:50:06,240 --> 02:50:08,560
aggressive cache but also

4561
02:50:08,560 --> 02:50:09,840
it's kind of

4562
02:50:09,840 --> 02:50:12,000
hidden security

4563
02:50:12,000 --> 02:50:14,319
vulnerability because it practically

4564
02:50:14,319 --> 02:50:17,120
allows an attacker to take the broken

4565
02:50:17,120 --> 02:50:20,240
bitmap or complete you know proof of

4566
02:50:20,240 --> 02:50:22,080
non-existence including the broken

4567
02:50:22,080 --> 02:50:24,479
bitmap and replay it

4568
02:50:24,479 --> 02:50:26,800
in an answer to a query which would

4569
02:50:26,800 --> 02:50:29,840
otherwise result it in a proper answer

4570
02:50:29,840 --> 02:50:32,319
including the data and anarchy

4571
02:50:32,319 --> 02:50:33,439
so

4572
02:50:33,439 --> 02:50:36,240
yeah it's just broken so we need to fix

4573
02:50:36,240 --> 02:50:39,120
it the question is how broken it is next

4574
02:50:39,120 --> 02:50:41,760
slide please

4575
02:50:41,760 --> 02:50:44,240
to measure that we have taken tranco

4576
02:50:44,240 --> 02:50:46,720
dataset which has one million of domains

4577
02:50:46,720 --> 02:50:49,040
ranked from top to the bottom

4578
02:50:49,040 --> 02:50:51,600
according to their popularity whatever

4579
02:50:51,600 --> 02:50:53,120
it is

4580
02:50:53,120 --> 02:50:55,439
then we're in a scan looking for signed

4581
02:50:55,439 --> 02:50:57,920
domains so from this data set of one

4582
02:50:57,920 --> 02:51:01,200
million domains we found like 35 and a

4583
02:51:01,200 --> 02:51:04,000
half thousand domains which are signed

4584
02:51:04,000 --> 02:51:07,040
the next slide please

4585
02:51:08,160 --> 02:51:10,080
and then with this list of signed

4586
02:51:10,080 --> 02:51:11,200
domains

4587
02:51:11,200 --> 02:51:14,240
uh we run dns based on all of them

4588
02:51:14,240 --> 02:51:16,000
dns with

4589
02:51:16,000 --> 02:51:19,359
in the very recent versions have a check

4590
02:51:19,359 --> 02:51:22,240
which explicitly queries for supposedly

4591
02:51:22,240 --> 02:51:24,880
non-existing types and the types which

4592
02:51:24,880 --> 02:51:26,960
are listed in the msac

4593
02:51:26,960 --> 02:51:29,040
type bitmap and checks whether there are

4594
02:51:29,040 --> 02:51:30,800
any discrepancies

4595
02:51:30,800 --> 02:51:34,880
so dns swiss was reporting 187 broken

4596
02:51:34,880 --> 02:51:38,160
domains in our data set which is roughly

4597
02:51:38,160 --> 02:51:40,720
half a percent of signed domains

4598
02:51:40,720 --> 02:51:43,600
uh which is well could be better but

4599
02:51:43,600 --> 02:51:47,439
it's not like a huge practical problem

4600
02:51:47,439 --> 02:51:50,080
in terms of counts of broken domains if

4601
02:51:50,080 --> 02:51:52,399
you look at the big picture because it's

4602
02:51:52,399 --> 02:51:55,359
like in practice it's less than one out

4603
02:51:55,359 --> 02:51:57,920
of five thousand domains overall in the

4604
02:51:57,920 --> 02:52:00,160
data set so it's not really a common

4605
02:52:00,160 --> 02:52:02,479
problem

4606
02:52:02,479 --> 02:52:05,600
of course domains are not made equal so

4607
02:52:05,600 --> 02:52:08,000
if the problem was affecting google or

4608
02:52:08,000 --> 02:52:10,479
facebook it would be fire

4609
02:52:10,479 --> 02:52:12,640
everything would be on fire but

4610
02:52:12,640 --> 02:52:15,279
tenco gives us the ranking for every

4611
02:52:15,279 --> 02:52:17,520
single domain name in it

4612
02:52:17,520 --> 02:52:19,600
and we can see that the first

4613
02:52:19,600 --> 02:52:22,080
domain with this type of problem has a

4614
02:52:22,080 --> 02:52:24,319
rank thousand and five so it's not like

4615
02:52:24,319 --> 02:52:27,200
site everyone goes every day

4616
02:52:27,200 --> 02:52:30,479
and it was some us government website

4617
02:52:30,479 --> 02:52:34,560
well next site uh next slide please

4618
02:52:34,560 --> 02:52:36,880
but so you have two minutes remaining

4619
02:52:36,880 --> 02:52:39,040
until q a time

4620
02:52:39,040 --> 02:52:41,200
yeah that's fine thanks

4621
02:52:41,200 --> 02:52:43,040
uh if we

4622
02:52:43,040 --> 02:52:45,279
break down the breakage by n seconds

4623
02:52:45,279 --> 02:52:48,000
insect 3 we can see that it's

4624
02:52:48,000 --> 02:52:49,359
quite different

4625
02:52:49,359 --> 02:52:51,760
and the next slide please aggression was

4626
02:52:51,760 --> 02:52:53,520
why

4627
02:52:53,520 --> 02:52:56,399
the reason is that the for insect the

4628
02:52:56,399 --> 02:52:58,720
breakage is concentrated with four

4629
02:52:58,720 --> 02:53:00,160
operators

4630
02:53:00,160 --> 02:53:02,080
and each operator had a little bit

4631
02:53:02,080 --> 02:53:04,319
different type of breakage so that hints

4632
02:53:04,319 --> 02:53:06,479
that they are using custom code which

4633
02:53:06,479 --> 02:53:09,359
didn't get the corner cases correct

4634
02:53:09,359 --> 02:53:10,960
and

4635
02:53:10,960 --> 02:53:13,520
i have to say that the nick b air

4636
02:53:13,520 --> 02:53:16,399
vr fixed the problem in two hours since

4637
02:53:16,399 --> 02:53:18,479
reporting it so that's like super

4638
02:53:18,479 --> 02:53:20,960
impressive the other three were alerted

4639
02:53:20,960 --> 02:53:22,720
and we'll see what happens

4640
02:53:22,720 --> 02:53:25,840
next slide please

4641
02:53:26,720 --> 02:53:28,880
for nsk3 the landscape is very different

4642
02:53:28,880 --> 02:53:32,080
because there is no clear clustering

4643
02:53:32,080 --> 02:53:33,840
by operator the only

4644
02:53:33,840 --> 02:53:36,000
like larger cluster of domains is u.s

4645
02:53:36,000 --> 02:53:37,200
treasury

4646
02:53:37,200 --> 02:53:39,920
but all the rest is like little breakage

4647
02:53:39,920 --> 02:53:41,920
here and there

4648
02:53:41,920 --> 02:53:45,200
and we can speculate why i i believe

4649
02:53:45,200 --> 02:53:46,000
that

4650
02:53:46,000 --> 02:53:48,479
because this type of breakage is caused

4651
02:53:48,479 --> 02:53:50,560
by an appliance or possibly more

4652
02:53:50,560 --> 02:53:52,479
appliances

4653
02:53:52,479 --> 02:53:53,520
and

4654
02:53:53,520 --> 02:53:56,240
my bet would be that it's the old f5 bug

4655
02:53:56,240 --> 02:53:57,840
which is like more than two years old

4656
02:53:57,840 --> 02:54:00,319
but either people didn't upgrade or

4657
02:54:00,319 --> 02:54:02,319
didn't configure the appliance correctly

4658
02:54:02,319 --> 02:54:04,880
after the upgrade because the

4659
02:54:04,880 --> 02:54:07,840
the fake so-called fix from f5 actually

4660
02:54:07,840 --> 02:54:09,600
requires manual configuration to

4661
02:54:09,600 --> 02:54:11,840
generate proper bitmaps next slide

4662
02:54:11,840 --> 02:54:14,160
please

4663
02:54:15,040 --> 02:54:17,520
so to conclude

4664
02:54:17,520 --> 02:54:20,399
the next version of bind will enable

4665
02:54:20,399 --> 02:54:22,960
aggressive use of cash

4666
02:54:22,960 --> 02:54:23,760
and

4667
02:54:23,760 --> 02:54:25,439
there is just a couple domains which are

4668
02:54:25,439 --> 02:54:27,840
broken but these domains will be hit

4669
02:54:27,840 --> 02:54:30,560
even harder when we release so please

4670
02:54:30,560 --> 02:54:32,080
fix your domains

4671
02:54:32,080 --> 02:54:34,000
and i'm happy to accept questions if we

4672
02:54:34,000 --> 02:54:36,240
still have time for them

4673
02:54:36,240 --> 02:54:38,399
all right thank you peter um any

4674
02:54:38,399 --> 02:54:40,720
questions can be asked by

4675
02:54:40,720 --> 02:54:43,200
the q a tab and or raising your hand if

4676
02:54:43,200 --> 02:54:45,359
you'd like to ask the question in person

4677
02:54:45,359 --> 02:54:47,200
and you should see a survey pop up

4678
02:54:47,200 --> 02:54:49,120
shortly

4679
02:54:49,120 --> 02:54:51,439
that you can rate this talk

4680
02:54:51,439 --> 02:54:53,680
all right our first question is from

4681
02:54:53,680 --> 02:54:57,920
peter alexis you say for nsac will nsec3

4682
02:54:57,920 --> 02:55:00,240
be supported later

4683
02:55:00,240 --> 02:55:02,560
that's a good question uh yes the next

4684
02:55:02,560 --> 02:55:05,439
upcoming major version will enable nsac

4685
02:55:05,439 --> 02:55:08,000
in like 142 or something

4686
02:55:08,000 --> 02:55:10,319
and the nf3 will be in pipeline but

4687
02:55:10,319 --> 02:55:12,399
that's not going to be in the 0.0

4688
02:55:12,399 --> 02:55:15,399
release

4689
02:55:19,600 --> 02:55:22,000
all right uh last call for questions for

4690
02:55:22,000 --> 02:55:23,920
peter oh there we go

4691
02:55:23,920 --> 02:55:24,720
uh

4692
02:55:24,720 --> 02:55:27,120
sam weiler asks did you find the

4693
02:55:27,120 --> 02:55:29,840
breakage at route 53 that slack reported

4694
02:55:29,840 --> 02:55:32,399
yesterday

4695
02:55:32,720 --> 02:55:35,760
funnily enough this lightning talk is a

4696
02:55:35,760 --> 02:55:38,080
coincidence of me doing the

4697
02:55:38,080 --> 02:55:40,720
research not for org but for our

4698
02:55:40,720 --> 02:55:42,479
purposes and the test was running

4699
02:55:42,479 --> 02:55:45,040
yesterday and the reported layout 53

4700
02:55:45,040 --> 02:55:46,960
already fixed the problem and i didn't

4701
02:55:46,960 --> 02:55:48,080
see it so

4702
02:55:48,080 --> 02:55:50,720
things fixed

4703
02:55:52,800 --> 02:55:53,760
all right

4704
02:55:53,760 --> 02:55:57,680
i am seeing no hands raised and we got a

4705
02:55:57,680 --> 02:56:00,240
raised hand all right uh ulric visser if

4706
02:56:00,240 --> 02:56:02,240
you would like to unmute yourself and

4707
02:56:02,240 --> 02:56:03,840
ask a question

4708
02:56:03,840 --> 02:56:04,960
yeah hi

4709
02:56:04,960 --> 02:56:07,680
sorry for being sold out here

4710
02:56:07,680 --> 02:56:09,279
peter i wanted to ask

4711
02:56:09,279 --> 02:56:10,960
if i want to test

4712
02:56:10,960 --> 02:56:13,840
my own domains if they're doing well

4713
02:56:13,840 --> 02:56:16,080
what do i have to do to run the dns base

4714
02:56:16,080 --> 02:56:17,040
because

4715
02:56:17,040 --> 02:56:19,120
i don't think it shows up on the web

4716
02:56:19,120 --> 02:56:21,439
of dns miss does it

4717
02:56:21,439 --> 02:56:23,520
well on the web you have to click

4718
02:56:23,520 --> 02:56:25,200
through the options and there is a

4719
02:56:25,200 --> 02:56:27,359
checkbox like denial of existence and

4720
02:56:27,359 --> 02:56:28,960
you have to you know click on it and

4721
02:56:28,960 --> 02:56:30,800
enable it explicitly and then it will

4722
02:56:30,800 --> 02:56:32,479
show up on the web

4723
02:56:32,479 --> 02:56:34,000
but i was using the command line

4724
02:56:34,000 --> 02:56:35,279
interface

4725
02:56:35,279 --> 02:56:37,520
so yeah

4726
02:56:37,520 --> 02:56:38,560
thank you

4727
02:56:38,560 --> 02:56:40,720
and the command for the command line

4728
02:56:40,720 --> 02:56:43,120
interface is in the slide so anyone who

4729
02:56:43,120 --> 02:56:44,160
can

4730
02:56:44,160 --> 02:56:47,279
uh who wants to scan a larger list can

4731
02:56:47,279 --> 02:56:49,680
use this

4732
02:56:52,160 --> 02:56:54,880
all right well thank you very much peter

4733
02:56:54,880 --> 02:56:57,040
for your presentation

4734
02:56:57,040 --> 02:57:00,080
we will move on to our next lightning

4735
02:57:00,080 --> 02:57:03,200
talk uh this will be brian summers from

4736
02:57:03,200 --> 02:57:06,840
open dns sec cisco umbrella who will be

4737
02:57:06,840 --> 02:57:10,000
presenting uh bringing up dough

4738
02:57:10,000 --> 02:57:13,200
brian if you'd like to share your slides

4739
02:57:13,200 --> 02:57:15,200
okay thank you um

4740
02:57:15,200 --> 02:57:18,880
yep so i'm brian summers from opendns uh

4741
02:57:18,880 --> 02:57:21,120
which is um by cisco these days

4742
02:57:21,120 --> 02:57:23,520
and i'm going to talk about our uh

4743
02:57:23,520 --> 02:57:26,000
efforts to bring up the dose service uh

4744
02:57:26,000 --> 02:57:28,399
on our resolver infrastructure

4745
02:57:28,399 --> 02:57:31,520
uh next slide please

4746
02:57:31,520 --> 02:57:34,640
so we took the uh the kind of

4747
02:57:34,640 --> 02:57:37,359
slow approach um by

4748
02:57:37,359 --> 02:57:38,880
starting with proxy

4749
02:57:38,880 --> 02:57:40,960
and we brought this up around the start

4750
02:57:40,960 --> 02:57:43,279
of 2020

4751
02:57:43,279 --> 02:57:44,880
and the proxy was reasonably

4752
02:57:44,880 --> 02:57:47,840
straightforward to to set up and it was

4753
02:57:47,840 --> 02:57:49,920
a python programmer essentially that

4754
02:57:49,920 --> 02:57:50,960
points

4755
02:57:50,960 --> 02:57:52,720
queries to the back end

4756
02:57:52,720 --> 02:57:56,000
adds a little special edns and to say

4757
02:57:56,000 --> 02:57:59,040
who was talking to us

4758
02:57:59,200 --> 02:58:01,840
which was interestingly uh talked about

4759
02:58:01,840 --> 02:58:03,439
earlier in the proxy

4760
02:58:03,439 --> 02:58:04,720
presentation

4761
02:58:04,720 --> 02:58:06,960
as a little special edness to tell the

4762
02:58:06,960 --> 02:58:08,479
resolver who's talking to us so that it

4763
02:58:08,479 --> 02:58:10,479
can treat them as special if it needs to

4764
02:58:10,479 --> 02:58:11,920
treat them as special

4765
02:58:11,920 --> 02:58:14,319
as you probably know our service

4766
02:58:14,319 --> 02:58:16,399
and does all sorts of filtering as well

4767
02:58:16,399 --> 02:58:19,520
for our clients um

4768
02:58:19,520 --> 02:58:21,600
and of course the proxy

4769
02:58:21,600 --> 02:58:25,760
does all of the udp and truncation tcp

4770
02:58:25,760 --> 02:58:26,800
querying

4771
02:58:26,800 --> 02:58:28,640
so ultimately the

4772
02:58:28,640 --> 02:58:31,040
tcp client on the front of the proxy

4773
02:58:31,040 --> 02:58:33,520
will just get

4774
02:58:33,520 --> 02:58:36,399
responses over tcp regardless of of any

4775
02:58:36,399 --> 02:58:38,160
packet sizes

4776
02:58:38,160 --> 02:58:40,960
um so that kind of ran for

4777
02:58:40,960 --> 02:58:43,279
i guess the best part of a year year and

4778
02:58:43,279 --> 02:58:45,600
a half

4779
02:58:45,760 --> 02:58:48,560
it was a problem for us and as people

4780
02:58:48,560 --> 02:58:51,120
started using dough more and more

4781
02:58:51,120 --> 02:58:53,520
and it used up more and more resources

4782
02:58:53,520 --> 02:58:55,680
and the the number of resources that it

4783
02:58:55,680 --> 02:58:58,640
used per query was quite startling

4784
02:58:58,640 --> 02:59:01,840
so next slide please

4785
02:59:02,160 --> 02:59:04,479
so around about the end of 2000 start of

4786
02:59:04,479 --> 02:59:06,880
2001 we decided okay we need some

4787
02:59:06,880 --> 02:59:08,640
negative support here in the resolver

4788
02:59:08,640 --> 02:59:10,560
and there's there's too many queries too

4789
02:59:10,560 --> 02:59:12,640
much infrastructure being used so we we

4790
02:59:12,640 --> 02:59:14,720
looked at what was actually involved

4791
02:59:14,720 --> 02:59:16,640
and i thought it was fairly exciting

4792
02:59:16,640 --> 02:59:18,399
that we could

4793
02:59:18,399 --> 02:59:21,680
detect tls connections um on

4794
02:59:21,680 --> 02:59:23,439
port 443

4795
02:59:23,439 --> 02:59:25,760
and we already listened on port 443

4796
02:59:25,760 --> 02:59:28,720
because we do dns scripts over that port

4797
02:59:28,720 --> 02:59:30,399
and so we had to have a way of

4798
02:59:30,399 --> 02:59:33,359
supporting dns script and tls sessions

4799
02:59:33,359 --> 02:59:36,000
for dough on the same port

4800
02:59:36,000 --> 02:59:37,840
it was reasonably straightforward so we

4801
02:59:37,840 --> 02:59:39,840
thought okay we're off to the races to

4802
02:59:39,840 --> 02:59:41,120
do this

4803
02:59:41,120 --> 02:59:43,920
um so we've got a few kind of things to

4804
02:59:43,920 --> 02:59:46,560
deal with the first was out of order tcp

4805
02:59:46,560 --> 02:59:48,000
pipelining

4806
02:59:48,000 --> 02:59:48,880
and

4807
02:59:48,880 --> 02:59:51,200
having an operating system make a tcp

4808
02:59:51,200 --> 02:59:53,200
connection to our resolvers and then try

4809
02:59:53,200 --> 02:59:54,560
to query

4810
02:59:54,560 --> 02:59:57,040
things through that tcp connection

4811
02:59:57,040 --> 02:59:59,279
kind of requires out of order tcp

4812
02:59:59,279 --> 03:00:02,399
pipelining if that doesn't work then all

4813
03:00:02,399 --> 03:00:04,080
bets are off there's no point in using

4814
03:00:04,080 --> 03:00:06,479
gcp if everything's serialized as soon

4815
03:00:06,479 --> 03:00:08,800
as you bump into a non-responding

4816
03:00:08,800 --> 03:00:10,399
upstream name server

4817
03:00:10,399 --> 03:00:11,680
you're in trouble because all of the

4818
03:00:11,680 --> 03:00:14,479
queries are going to pile up behind it

4819
03:00:14,479 --> 03:00:17,600
tcp pipelining was difficult and we had

4820
03:00:17,600 --> 03:00:19,760
lots of camel problems trying to get

4821
03:00:19,760 --> 03:00:20,640
this

4822
03:00:20,640 --> 03:00:23,680
get this running the camel problems were

4823
03:00:23,680 --> 03:00:27,040
most viciously around

4824
03:00:27,040 --> 03:00:29,920
when you have one client connected

4825
03:00:29,920 --> 03:00:32,800
via tcp they've got two queries to the

4826
03:00:32,800 --> 03:00:34,720
same thing upstream

4827
03:00:34,720 --> 03:00:37,840
and those two queries are cued behind

4828
03:00:37,840 --> 03:00:40,160
one cued one behind the other

4829
03:00:40,160 --> 03:00:40,960
so

4830
03:00:40,960 --> 03:00:42,640
both are waiting for the same response

4831
03:00:42,640 --> 03:00:44,080
from upstream

4832
03:00:44,080 --> 03:00:45,920
and then the response from upstream

4833
03:00:45,920 --> 03:00:47,439
times out

4834
03:00:47,439 --> 03:00:50,399
and we fail to respond because something

4835
03:00:50,399 --> 03:00:53,760
else goes wrong and you end up with a

4836
03:00:53,760 --> 03:00:56,479
tear down scenario where a query

4837
03:00:56,479 --> 03:00:58,720
tears down another query which tears

4838
03:00:58,720 --> 03:01:00,399
down the first query

4839
03:01:00,399 --> 03:01:02,160
and you can get yourself into a little

4840
03:01:02,160 --> 03:01:03,439
bit of

4841
03:01:03,439 --> 03:01:05,200
trouble that way so there's lots of

4842
03:01:05,200 --> 03:01:07,840
confusion in the in the internals of the

4843
03:01:07,840 --> 03:01:10,399
resolver to get out of order tcp

4844
03:01:10,399 --> 03:01:12,319
pipelining working

4845
03:01:12,319 --> 03:01:14,640
then i guess the next step was um the

4846
03:01:14,640 --> 03:01:17,279
the whole protocol there um

4847
03:01:17,279 --> 03:01:19,920
so http1 is easy and you just read a

4848
03:01:19,920 --> 03:01:22,640
bunch of headers and then go find the

4849
03:01:22,640 --> 03:01:24,240
the query in those headers whether it's

4850
03:01:24,240 --> 03:01:27,120
a get request or a or a post request

4851
03:01:27,120 --> 03:01:29,920
and so my first implementation was just

4852
03:01:29,920 --> 03:01:31,760
using http one

4853
03:01:31,760 --> 03:01:35,120
because http 2 looked much harder

4854
03:01:35,120 --> 03:01:35,920
and

4855
03:01:35,920 --> 03:01:38,720
so i implemented doe using http 1

4856
03:01:38,720 --> 03:01:40,479
initially

4857
03:01:40,479 --> 03:01:43,120
fairly straightforward http 2 is a

4858
03:01:43,120 --> 03:01:45,279
binary protocol as i'm sure

4859
03:01:45,279 --> 03:01:47,200
many people know

4860
03:01:47,200 --> 03:01:50,160
we ended up using ng http 2 which is a

4861
03:01:50,160 --> 03:01:52,560
library that's that's available that um

4862
03:01:52,560 --> 03:01:54,319
nginx uses i guess that's where it gets

4863
03:01:54,319 --> 03:01:55,920
the ng from

4864
03:01:55,920 --> 03:01:58,560
um and this this kind of fit reasonably

4865
03:01:58,560 --> 03:02:01,840
well into the resolver and our use of

4866
03:02:01,840 --> 03:02:04,319
the tls layer and of course that was the

4867
03:02:04,319 --> 03:02:06,000
big um

4868
03:02:06,000 --> 03:02:07,359
awkwardness

4869
03:02:07,359 --> 03:02:08,319
in

4870
03:02:08,319 --> 03:02:10,000
getting all of this stuff to work was

4871
03:02:10,000 --> 03:02:12,240
the cls layer itself

4872
03:02:12,240 --> 03:02:13,600
and we had to deal with ciphers and

4873
03:02:13,600 --> 03:02:14,880
protocols

4874
03:02:14,880 --> 03:02:16,640
it turns out that some servers are bad

4875
03:02:16,640 --> 03:02:19,279
some ciphers are good and some protocols

4876
03:02:19,279 --> 03:02:21,600
like old ssl 2 and

4877
03:02:21,600 --> 03:02:23,279
things like that are bad

4878
03:02:23,279 --> 03:02:26,880
and you have to use tls 1.2 1.3

4879
03:02:26,880 --> 03:02:28,000
um

4880
03:02:28,000 --> 03:02:29,359
so there was there was a little bit of a

4881
03:02:29,359 --> 03:02:31,120
quagmire there but

4882
03:02:31,120 --> 03:02:33,279
working for cisco they already had a ton

4883
03:02:33,279 --> 03:02:34,880
of requirements around this so they

4884
03:02:34,880 --> 03:02:36,319
basically spelled out exactly what

4885
03:02:36,319 --> 03:02:37,760
ciphers and protocols were allowed to

4886
03:02:37,760 --> 03:02:39,439
use so that was reasonably

4887
03:02:39,439 --> 03:02:41,279
straightforward once i got my head

4888
03:02:41,279 --> 03:02:43,520
around exactly how to program the

4889
03:02:43,520 --> 03:02:46,080
openssl layer with this

4890
03:02:46,080 --> 03:02:48,479
big surprises came when

4891
03:02:48,479 --> 03:02:52,640
i saw how open ssl buffering works

4892
03:02:52,640 --> 03:02:56,080
you can't just get a ssl thing and do

4893
03:02:56,080 --> 03:02:57,920
reads and writes to it when you do a

4894
03:02:57,920 --> 03:03:00,560
read of of you know two bytes and then

4895
03:03:00,560 --> 03:03:03,920
do a read of of whatever that size is

4896
03:03:03,920 --> 03:03:06,240
um well actually that's that's a dot

4897
03:03:06,240 --> 03:03:08,800
thing but when you do a read an open ssl

4898
03:03:08,800 --> 03:03:11,920
you can you can get 512 bytes and

4899
03:03:11,920 --> 03:03:15,120
actually it's read 10k in the background

4900
03:03:15,120 --> 03:03:16,800
and if you don't go back to the ssl

4901
03:03:16,800 --> 03:03:18,479
layer and say hey if you've got any more

4902
03:03:18,479 --> 03:03:20,319
data in your buffer

4903
03:03:20,319 --> 03:03:22,800
then go trying to select a file

4904
03:03:22,800 --> 03:03:24,399
descriptor you'll be disappointed

4905
03:03:24,399 --> 03:03:25,840
because that file descriptor may never

4906
03:03:25,840 --> 03:03:26,960
wake up

4907
03:03:26,960 --> 03:03:28,399
so there were lots of

4908
03:03:28,399 --> 03:03:30,080
issues around understanding exactly what

4909
03:03:30,080 --> 03:03:32,240
openssl was doing on the buffering layer

4910
03:03:32,240 --> 03:03:34,479
um and and making sure that we dealt

4911
03:03:34,479 --> 03:03:36,399
with that and of course certificate

4912
03:03:36,399 --> 03:03:39,600
management was a little bit awkward but

4913
03:03:39,600 --> 03:03:41,520
i mean we all know how to deal with

4914
03:03:41,520 --> 03:03:42,960
certificates so

4915
03:03:42,960 --> 03:03:45,359
it was reasonably straightforward

4916
03:03:45,359 --> 03:03:47,680
and there are caveats um to that

4917
03:03:47,680 --> 03:03:49,120
reasonably straightforward that i'm

4918
03:03:49,120 --> 03:03:50,479
bumping into now

4919
03:03:50,479 --> 03:03:53,760
but that's for another talk

4920
03:03:53,760 --> 03:03:55,760
and then right at the last knockings we

4921
03:03:55,760 --> 03:03:58,399
bumped into two other things one was ddr

4922
03:03:58,399 --> 03:04:01,520
and microsoft and apple are looking at

4923
03:04:01,520 --> 03:04:03,840
ways of

4924
03:04:03,840 --> 03:04:05,279
discovering

4925
03:04:05,279 --> 03:04:07,600
equivalent resolvers that can do

4926
03:04:07,600 --> 03:04:08,800
encryption

4927
03:04:08,800 --> 03:04:11,120
and and they're they're basically

4928
03:04:11,120 --> 03:04:12,560
working with things like

4929
03:04:12,560 --> 03:04:15,600
these svcb records and that publish

4930
03:04:15,600 --> 03:04:17,120
alternate um

4931
03:04:17,120 --> 03:04:19,840
interfaces to the same service

4932
03:04:19,840 --> 03:04:22,319
and so so we had to support svcb records

4933
03:04:22,319 --> 03:04:24,319
and https records which are the same

4934
03:04:24,319 --> 03:04:25,680
thing really

4935
03:04:25,680 --> 03:04:26,640
um

4936
03:04:26,640 --> 03:04:28,479
which was a last-minute thing that we

4937
03:04:28,479 --> 03:04:30,000
found that we had to do

4938
03:04:30,000 --> 03:04:32,880
and then one other kind of nasty

4939
03:04:32,880 --> 03:04:37,359
rotten um http technology is ocsp

4940
03:04:37,359 --> 03:04:39,600
and ocsp is

4941
03:04:39,600 --> 03:04:41,359
a way of

4942
03:04:41,359 --> 03:04:42,720
stapling

4943
03:04:42,720 --> 03:04:44,240
um

4944
03:04:44,240 --> 03:04:46,960
an answer to your your your tls

4945
03:04:46,960 --> 03:04:49,600
negotiation or a piece of data to your

4946
03:04:49,600 --> 03:04:52,720
tls negotiation that says and by the way

4947
03:04:52,720 --> 03:04:54,399
here's some signed proof that i haven't

4948
03:04:54,399 --> 03:04:55,760
been revoked

4949
03:04:55,760 --> 03:04:57,600
and this is necessary because if an

4950
03:04:57,600 --> 03:04:59,439
operator if at the operating system

4951
03:04:59,439 --> 03:05:01,040
there you're connecting to a dose

4952
03:05:01,040 --> 03:05:03,520
service and you don't yet have enough

4953
03:05:03,520 --> 03:05:06,479
dns then you can't go and look up um

4954
03:05:06,479 --> 03:05:08,640
revocation lists because you don't yet

4955
03:05:08,640 --> 03:05:10,800
have dns so you need the resolver to be

4956
03:05:10,800 --> 03:05:12,560
able to prove that they haven't been

4957
03:05:12,560 --> 03:05:14,880
revoked or that they haven't been

4958
03:05:14,880 --> 03:05:16,000
revoked

4959
03:05:16,000 --> 03:05:19,359
um within a given time period

4960
03:05:19,359 --> 03:05:22,640
and next slide please

4961
03:05:23,439 --> 03:05:26,080
so of course once we got all of this uh

4962
03:05:26,080 --> 03:05:29,600
in place and the rollout which was

4963
03:05:29,600 --> 03:05:31,680
something that i was kind of expecting

4964
03:05:31,680 --> 03:05:32,560
to

4965
03:05:32,560 --> 03:05:34,720
provide lots and lots of problems

4966
03:05:34,720 --> 03:05:37,520
and it didn't once we actually got our

4967
03:05:37,520 --> 03:05:39,200
resolvers up and running and accepting

4968
03:05:39,200 --> 03:05:40,479
though connections

4969
03:05:40,479 --> 03:05:42,479
we wanted to take over the proxy

4970
03:05:42,479 --> 03:05:45,040
addresses we had four anycast proxy

4971
03:05:45,040 --> 03:05:47,200
addresses and

4972
03:05:47,200 --> 03:05:50,240
it just went completely smoothly and we

4973
03:05:50,240 --> 03:05:52,640
brought resolver

4974
03:05:52,640 --> 03:05:54,560
listeners up in all of the data centers

4975
03:05:54,560 --> 03:05:56,960
that we didn't already have proxies in

4976
03:05:56,960 --> 03:05:58,800
and that just worked

4977
03:05:58,800 --> 03:06:01,600
and then we went through an iterative

4978
03:06:01,600 --> 03:06:03,680
kind of day-by-day process where we took

4979
03:06:03,680 --> 03:06:06,479
down three data centers and took proxies

4980
03:06:06,479 --> 03:06:08,560
down in three data centers and then

4981
03:06:08,560 --> 03:06:10,479
brought resolvers up in those three data

4982
03:06:10,479 --> 03:06:12,560
centers for the proxy addresses

4983
03:06:12,560 --> 03:06:15,359
and it just worked um so it was a great

4984
03:06:15,359 --> 03:06:17,359
success story at the end but of course

4985
03:06:17,359 --> 03:06:18,399
there was

4986
03:06:18,399 --> 03:06:20,640
a whole bunch of uh failures in

4987
03:06:20,640 --> 03:06:22,960
development and and again this is a

4988
03:06:22,960 --> 03:06:24,560
lightning talk so you don't get to know

4989
03:06:24,560 --> 03:06:26,640
much about the failures

4990
03:06:26,640 --> 03:06:28,880
um so yeah that's that's about all i've

4991
03:06:28,880 --> 03:06:31,279
got and i'm happy to answer any

4992
03:06:31,279 --> 03:06:33,680
questions

4993
03:06:34,160 --> 03:06:35,920
all right everyone you should see a

4994
03:06:35,920 --> 03:06:38,399
survey pop up shortly uh to rate this

4995
03:06:38,399 --> 03:06:41,120
poll and uh if you have any questions

4996
03:06:41,120 --> 03:06:44,080
please do so in the q a tab and or by

4997
03:06:44,080 --> 03:06:45,520
raising your hand if you would like to

4998
03:06:45,520 --> 03:06:48,479
ask it verbally

4999
03:06:48,560 --> 03:06:50,080
i i guess my question while we're

5000
03:06:50,080 --> 03:06:52,560
waiting brian you mentioned certificate

5001
03:06:52,560 --> 03:06:54,720
management in particular being on the

5002
03:06:54,720 --> 03:06:57,600
annoying side is there uh one piece of

5003
03:06:57,600 --> 03:06:59,680
it in particular or a recurring problem

5004
03:06:59,680 --> 03:07:01,200
that you've seen that

5005
03:07:01,200 --> 03:07:03,760
you'd like to advise us all about

5006
03:07:03,760 --> 03:07:05,370
and yeah i guess um

5007
03:07:05,370 --> 03:07:07,040
[Music]

5008
03:07:07,040 --> 03:07:09,279
there's awkwardness and because of the

5009
03:07:09,279 --> 03:07:11,840
way i ended up doing it and so there are

5010
03:07:11,840 --> 03:07:13,760
three kind of pieces of certificate

5011
03:07:13,760 --> 03:07:16,160
there's the key there's the search and

5012
03:07:16,160 --> 03:07:18,160
then there's this ocsp data and the

5013
03:07:18,160 --> 03:07:20,319
reason the ocsp data is part of the

5014
03:07:20,319 --> 03:07:22,319
certificate is because

5015
03:07:22,319 --> 03:07:25,279
when we distribute data to our resolvers

5016
03:07:25,279 --> 03:07:27,600
we want the same data to be on all of

5017
03:07:27,600 --> 03:07:29,040
the resolvers there's lots and lots of

5018
03:07:29,040 --> 03:07:30,960
resolvers around the world

5019
03:07:30,960 --> 03:07:33,920
so we we distribute the ocsp data but of

5020
03:07:33,920 --> 03:07:36,720
course the ocsp data is based upon the

5021
03:07:36,720 --> 03:07:38,880
certificate and the certificate is based

5022
03:07:38,880 --> 03:07:40,479
upon the key

5023
03:07:40,479 --> 03:07:42,479
so if we want to change the certificate

5024
03:07:42,479 --> 03:07:45,120
well so the problem the mistake i made

5025
03:07:45,120 --> 03:07:46,319
was

5026
03:07:46,319 --> 03:07:49,760
the ocsp data is generated by

5027
03:07:49,760 --> 03:07:53,359
a aws lambda because that was just the

5028
03:07:53,359 --> 03:07:54,800
easy way to do it

5029
03:07:54,800 --> 03:07:57,359
the search is configured manually and

5030
03:07:57,359 --> 03:08:00,399
pushed via our our stratus system

5031
03:08:00,399 --> 03:08:02,640
and the key is held in aws secrets

5032
03:08:02,640 --> 03:08:04,080
manager

5033
03:08:04,080 --> 03:08:05,680
so they they all come from three

5034
03:08:05,680 --> 03:08:08,319
different places so it's easy to update

5035
03:08:08,319 --> 03:08:10,800
the ocsp data which is

5036
03:08:10,800 --> 03:08:13,040
our automated job but once we have a

5037
03:08:13,040 --> 03:08:14,880
cert to update well now we have to kind

5038
03:08:14,880 --> 03:08:18,399
of glue that with some new ocsp data

5039
03:08:18,399 --> 03:08:20,080
so that they're introduced at the same

5040
03:08:20,080 --> 03:08:21,920
time and if the key changes at the same

5041
03:08:21,920 --> 03:08:24,080
time they all have to change at the same

5042
03:08:24,080 --> 03:08:25,840
time but they all come from different

5043
03:08:25,840 --> 03:08:26,960
places

5044
03:08:26,960 --> 03:08:29,279
so i need to sort that out and and

5045
03:08:29,279 --> 03:08:31,359
habits so that when they need to come

5046
03:08:31,359 --> 03:08:32,800
from different places they're all

5047
03:08:32,800 --> 03:08:35,600
consolidated and placed in one place at

5048
03:08:35,600 --> 03:08:39,359
one time so that it all works

5049
03:08:40,960 --> 03:08:43,840
all right i'm not seeing any other

5050
03:08:43,840 --> 03:08:46,000
questions so i will thank you very much

5051
03:08:46,000 --> 03:08:48,560
brian for your presentation

5052
03:08:48,560 --> 03:08:51,359
and uh again on behalf of the entire

5053
03:08:51,359 --> 03:08:54,000
program committee i'd like to thank uh

5054
03:08:54,000 --> 03:08:57,120
everyone our speakers and our attendees

5055
03:08:57,120 --> 03:08:59,279
and with that i will hand things back to

5056
03:08:59,279 --> 03:09:02,160
keith mitchell keith

5057
03:09:02,160 --> 03:09:05,040
okay thank you very much jake

5058
03:09:05,040 --> 03:09:07,359
great workshop thank you everybody um

5059
03:09:07,359 --> 03:09:09,279
that just went so smoothly and um and

5060
03:09:09,279 --> 03:09:10,720
there was some really good content and

5061
03:09:10,720 --> 03:09:11,920
interaction

5062
03:09:11,920 --> 03:09:14,000
um before we finish for today i just

5063
03:09:14,000 --> 03:09:17,920
want to run through a few wrap-up points

5064
03:09:17,920 --> 03:09:19,520
first of all what are we doing about

5065
03:09:19,520 --> 03:09:21,600
nick's workshops um well before we think

5066
03:09:21,600 --> 03:09:22,960
about the knicks workshops we'd love to

5067
03:09:22,960 --> 03:09:25,439
get your feedback on this workshop um so

5068
03:09:25,439 --> 03:09:28,160
there's the survey link please um

5069
03:09:28,160 --> 03:09:29,920
if you haven't already um there's your

5070
03:09:29,920 --> 03:09:31,359
chance to give general feedback on

5071
03:09:31,359 --> 03:09:33,520
meeting logistics and format and and

5072
03:09:33,520 --> 03:09:34,720
such like

5073
03:09:34,720 --> 03:09:36,560
the priority for our meetings um

5074
03:09:36,560 --> 03:09:38,960
throughout 2021 where we decided to do

5075
03:09:38,960 --> 03:09:40,800
everything fully online

5076
03:09:40,800 --> 03:09:43,040
and um you know we'll be adhering to

5077
03:09:43,040 --> 03:09:45,200
that principle throughout next year and

5078
03:09:45,200 --> 03:09:47,040
for as long as it takes is that we want

5079
03:09:47,040 --> 03:09:48,560
everybody to be able to participate we

5080
03:09:48,560 --> 03:09:49,920
want everybody able to participate

5081
03:09:49,920 --> 03:09:51,200
safely

5082
03:09:51,200 --> 03:09:53,200
um so 2022 we're going to start doing

5083
03:09:53,200 --> 03:09:54,800
hybrid events obviously this is all

5084
03:09:54,800 --> 03:09:57,520
subject to um pandemic conditions on

5085
03:09:57,520 --> 03:10:00,640
whatever omicron does to us all um

5086
03:10:00,640 --> 03:10:02,800
we will see but we we want to try doing

5087
03:10:02,800 --> 03:10:05,120
some hybrid events um

5088
03:10:05,120 --> 03:10:07,359
and um where our events have an

5089
03:10:07,359 --> 03:10:09,279
in-person element then there will be

5090
03:10:09,279 --> 03:10:10,800
pandemic precautions to protect

5091
03:10:10,800 --> 03:10:13,200
attendees we have some ideas what we

5092
03:10:13,200 --> 03:10:14,479
want to do about that and a little bit

5093
03:10:14,479 --> 03:10:16,399
experience from other organizations but

5094
03:10:16,399 --> 03:10:17,840
we would very much like you your

5095
03:10:17,840 --> 03:10:19,439
feedback um

5096
03:10:19,439 --> 03:10:21,920
on the meeting format meeting juric

5097
03:10:21,920 --> 03:10:24,000
duration meeting frequency and in

5098
03:10:24,000 --> 03:10:26,960
particular safety items um i think that

5099
03:10:26,960 --> 03:10:29,040
we did a couple of um short online

5100
03:10:29,040 --> 03:10:32,319
workshops in 2020 and one this year and

5101
03:10:32,319 --> 03:10:34,239
i think that we we may continue with

5102
03:10:34,239 --> 03:10:36,560
that format from time to time um

5103
03:10:36,560 --> 03:10:39,359
whatever the conditions are um but um

5104
03:10:39,359 --> 03:10:41,439
but that that that's the overall sort of

5105
03:10:41,439 --> 03:10:44,319
big picture plan in terms of specifics

5106
03:10:44,319 --> 03:10:45,040
we

5107
03:10:45,040 --> 03:10:47,439
are planning and hope that we will do

5108
03:10:47,439 --> 03:10:51,120
work 37 in austin in texas in february

5109
03:10:51,120 --> 03:10:54,239
2022 collocated with nanogate 84 which

5110
03:10:54,239 --> 03:10:56,399
has always been the plan and the idea is

5111
03:10:56,399 --> 03:10:58,399
this will be our first physical virtual

5112
03:10:58,399 --> 03:10:59,920
hybrid event

5113
03:10:59,920 --> 03:11:02,720
um as i said um yesterday donation and i

5114
03:11:02,720 --> 03:11:04,160
will be doing a site visit there next

5115
03:11:04,160 --> 03:11:05,120
week

5116
03:11:05,120 --> 03:11:06,800
and we hope to come back with much more

5117
03:11:06,800 --> 03:11:08,800
concrete ideas about what's feasible

5118
03:11:08,800 --> 03:11:10,239
what's safe

5119
03:11:10,239 --> 03:11:11,120
and

5120
03:11:11,120 --> 03:11:12,880
what we'll be able to do there

5121
03:11:12,880 --> 03:11:14,960
um so while we digest that and the board

5122
03:11:14,960 --> 03:11:17,600
makes some decisions um we'll the the

5123
03:11:17,600 --> 03:11:19,439
cfp the registration the pandemic

5124
03:11:19,439 --> 03:11:21,040
precautions will all be published and

5125
03:11:21,040 --> 03:11:24,000
announced no later than early january

5126
03:11:24,000 --> 03:11:27,040
um as i said yesterday hopefully um the

5127
03:11:27,040 --> 03:11:29,680
plan is that work 38 will be in may

5128
03:11:29,680 --> 03:11:31,760
collocating with the idea icon ids

5129
03:11:31,760 --> 03:11:33,840
workshop getting back to that

5130
03:11:33,840 --> 03:11:35,439
um and

5131
03:11:35,439 --> 03:11:37,600
we very much hope that we will be um

5132
03:11:37,600 --> 03:11:40,000
co-locating or 39 with ripe 85 and

5133
03:11:40,000 --> 03:11:41,920
center tech in europe in the fall of

5134
03:11:41,920 --> 03:11:43,760
2022

5135
03:11:43,760 --> 03:11:44,880
so

5136
03:11:44,880 --> 03:11:47,520
that's looking forward um i think you

5137
03:11:47,520 --> 03:11:49,120
know the final thing to do is just to

5138
03:11:49,120 --> 03:11:51,120
thank everybody that made this workshop

5139
03:11:51,120 --> 03:11:53,760
possible um in particular virus as a

5140
03:11:53,760 --> 03:11:55,600
sponsor both for this workshop and

5141
03:11:55,600 --> 03:11:57,040
throughout the year

5142
03:11:57,040 --> 03:11:59,359
all our members and supporters whose

5143
03:11:59,359 --> 03:12:02,319
support has been solid for work um for a

5144
03:12:02,319 --> 03:12:04,640
very long time now um the program

5145
03:12:04,640 --> 03:12:06,239
committee who put a great program

5146
03:12:06,239 --> 03:12:07,760
together um and they haven't just put a

5147
03:12:07,760 --> 03:12:09,279
great program together from a content

5148
03:12:09,279 --> 03:12:10,720
point of view they've been actively

5149
03:12:10,720 --> 03:12:13,359
helping out with the various um

5150
03:12:13,359 --> 03:12:14,880
logistics of the meeting and the

5151
03:12:14,880 --> 03:12:18,080
rehearsals um special shout out to

5152
03:12:18,080 --> 03:12:21,120
mauricio um as a crew member um who has

5153
03:12:21,120 --> 03:12:23,120
um once again done all her social media

5154
03:12:23,120 --> 03:12:25,279
postings today and yesterday

5155
03:12:25,279 --> 03:12:27,279
um i'd like to thank ulrich and jake as

5156
03:12:27,279 --> 03:12:30,880
a session cheers to jay today and um

5157
03:12:30,880 --> 03:12:33,439
brett and willem is the time keepers um

5158
03:12:33,439 --> 03:12:35,120
thank you all for your your feedback in

5159
03:12:35,120 --> 03:12:36,720
the polls we've got good response to

5160
03:12:36,720 --> 03:12:38,160
that which will give good data for the

5161
03:12:38,160 --> 03:12:40,319
program committee going forward

5162
03:12:40,319 --> 03:12:41,600
um

5163
03:12:41,600 --> 03:12:44,239
and um you know a special mention to our

5164
03:12:44,239 --> 03:12:46,319
outgoing program committee members um

5165
03:12:46,319 --> 03:12:48,239
jan for his three years on the programme

5166
03:12:48,239 --> 03:12:49,840
committee and um everything he's done

5167
03:12:49,840 --> 03:12:52,720
for this workshop and for his um

5168
03:12:52,720 --> 03:12:54,880
contribution and service as the uh the

5169
03:12:54,880 --> 03:12:57,200
peace chair for the past year um jake

5170
03:12:57,200 --> 03:12:59,040
for his past three years of service on

5171
03:12:59,040 --> 03:13:01,279
the pc and brett for his his past year

5172
03:13:01,279 --> 03:13:03,279
of service so so thank you to all of

5173
03:13:03,279 --> 03:13:04,239
them

5174
03:13:04,239 --> 03:13:05,200
um

5175
03:13:05,200 --> 03:13:07,600
and that is basically it i mean you know

5176
03:13:07,600 --> 03:13:09,760
there are lots of i'm sorry i forgot to

5177
03:13:09,760 --> 03:13:12,000
thank our speakers um our speakers um

5178
03:13:12,000 --> 03:13:13,439
without whom we would not have these

5179
03:13:13,439 --> 03:13:15,600
meetings um just because we're not

5180
03:13:15,600 --> 03:13:17,279
dragging them around the world on their

5181
03:13:17,279 --> 03:13:19,200
own expense tab to have a meeting

5182
03:13:19,200 --> 03:13:21,120
doesn't mean that they don't do extra

5183
03:13:21,120 --> 03:13:22,640
work in terms of rehearsals and

5184
03:13:22,640 --> 03:13:24,960
preparation for um for the online so

5185
03:13:24,960 --> 03:13:26,319
thank you i really enjoyed some great

5186
03:13:26,319 --> 03:13:28,080
talks this time so thank you to all our

5187
03:13:28,080 --> 03:13:29,359
speakers

5188
03:13:29,359 --> 03:13:31,279
um and as i say

5189
03:13:31,279 --> 03:13:33,120
um you know there are other ways you can

5190
03:13:33,120 --> 03:13:36,479
support work events um via sponsorship

5191
03:13:36,479 --> 03:13:39,120
or or patronage for a year um or indeed

5192
03:13:39,120 --> 03:13:40,560
as a donation

5193
03:13:40,560 --> 03:13:44,960
so um that covers or 36. um thank you

5194
03:13:44,960 --> 03:13:46,960
all very much and i look forward to

5195
03:13:46,960 --> 03:13:48,479
seeing at least some of you in person

5196
03:13:48,479 --> 03:13:50,720
for work 37 um

5197
03:13:50,720 --> 03:13:53,120
have a great holiday season and take

5198
03:13:53,120 --> 03:13:54,140
care

5199
03:13:54,140 --> 03:13:57,310
[Music]

5200
03:13:58,239 --> 03:14:01,239
uh

5201
03:14:11,920 --> 03:14:14,920
uh

5202
03:14:20,460 --> 03:14:23,580
[Music]

5203
03:14:28,430 --> 03:14:31,489
[Music]

5204
03:14:42,030 --> 03:14:45,209
[Music]

5205
03:14:51,580 --> 03:14:53,040
[Music]

5206
03:14:53,040 --> 03:14:56,040
uh

5207
03:14:56,680 --> 03:15:08,600
[Music]

