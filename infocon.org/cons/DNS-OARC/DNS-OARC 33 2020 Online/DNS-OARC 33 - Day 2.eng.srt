1
00:00:01,030 --> 00:00:14,920
[Music]

2
00:00:14,920 --> 00:00:16,020
um

3
00:00:16,020 --> 00:00:30,189
[Music]

4
00:00:34,450 --> 00:00:42,710
[Music]

5
00:00:47,750 --> 00:01:10,840
[Music]

6
00:01:10,840 --> 00:01:12,740
do

7
00:01:12,740 --> 00:01:20,548
[Music]

8
00:01:23,680 --> 00:01:24,840
[Music]

9
00:01:24,840 --> 00:01:27,840
my

10
00:01:29,010 --> 00:01:32,159
[Music]

11
00:01:38,290 --> 00:01:49,849
[Music]

12
00:01:55,510 --> 00:01:57,040
[Music]

13
00:01:57,040 --> 00:01:59,759
hello everyone welcome to the second day

14
00:01:59,759 --> 00:02:01,920
of dnsr33

15
00:02:01,920 --> 00:02:04,880
and my name is young chuak i'm on the

16
00:02:04,880 --> 00:02:06,560
program committee and i will be helping

17
00:02:06,560 --> 00:02:07,360
to run

18
00:02:07,360 --> 00:02:09,840
this session so this morning we will

19
00:02:09,840 --> 00:02:11,840
have four presentation total

20
00:02:11,840 --> 00:02:13,760
uh two and two with a short break in

21
00:02:13,760 --> 00:02:15,760
between um

22
00:02:15,760 --> 00:02:17,680
if you want to participate please use

23
00:02:17,680 --> 00:02:19,680
the chat for general discussion

24
00:02:19,680 --> 00:02:22,239
but if you want to ask questions and

25
00:02:22,239 --> 00:02:23,840
want them to be answered by

26
00:02:23,840 --> 00:02:26,319
by the speaker please use the q a

27
00:02:26,319 --> 00:02:27,280
feature in zoom

28
00:02:27,280 --> 00:02:29,599
you'll find the q a button at the bottom

29
00:02:29,599 --> 00:02:31,120
in in the window

30
00:02:31,120 --> 00:02:34,720
zoom at the bottom of the zoom window

31
00:02:34,720 --> 00:02:37,440
with that i would like to introduce the

32
00:02:37,440 --> 00:02:38,319
first speaker

33
00:02:38,319 --> 00:02:40,480
uh our first speaker is uh shannon

34
00:02:40,480 --> 00:02:43,440
bayrick of ns1 and he will talk about

35
00:02:43,440 --> 00:02:46,080
uh packadvisor 3 summarizing traffic

36
00:02:46,080 --> 00:02:48,080
with sketch algorithms for observability

37
00:02:48,080 --> 00:02:49,680
and ddos mitigation

38
00:02:49,680 --> 00:02:51,120
so shannon if you're already please

39
00:02:51,120 --> 00:02:54,160
share your screen and

40
00:02:56,319 --> 00:02:59,360
go ahead yes hello everybody can you

41
00:02:59,360 --> 00:03:00,319
hear me

42
00:03:00,319 --> 00:03:03,840
yeah okay very good uh hello my name is

43
00:03:03,840 --> 00:03:04,720
shannon weirich

44
00:03:04,720 --> 00:03:07,040
and i work at ns1 and i'm going to talk

45
00:03:07,040 --> 00:03:08,879
about our newly released tool called

46
00:03:08,879 --> 00:03:10,560
pack advisor

47
00:03:10,560 --> 00:03:13,680
so jumping in what is pack advisor

48
00:03:13,680 --> 00:03:16,319
uh pac advisor is a network visibility

49
00:03:16,319 --> 00:03:16,800
tool

50
00:03:16,800 --> 00:03:18,800
this is uh sort of another tool to put

51
00:03:18,800 --> 00:03:20,720
in your observability

52
00:03:20,720 --> 00:03:23,840
observability tool stack um and its

53
00:03:23,840 --> 00:03:25,519
whole goal is to summarize traffic in

54
00:03:25,519 --> 00:03:26,480
real time

55
00:03:26,480 --> 00:03:28,400
directly at the edges and it does that

56
00:03:28,400 --> 00:03:30,159
with these things called data sketches

57
00:03:30,159 --> 00:03:31,280
which i'm going to talk about a little

58
00:03:31,280 --> 00:03:32,640
bit

59
00:03:32,640 --> 00:03:33,840
and there's two different ways that it

60
00:03:33,840 --> 00:03:35,519
presents the summary information so it

61
00:03:35,519 --> 00:03:37,760
includes a command line interface

62
00:03:37,760 --> 00:03:40,159
and this lets you be directly on a node

63
00:03:40,159 --> 00:03:41,920
and in a terminal program and

64
00:03:41,920 --> 00:03:44,319
updating watching the the information in

65
00:03:44,319 --> 00:03:45,120
real time

66
00:03:45,120 --> 00:03:47,840
and it also exposes an http api and this

67
00:03:47,840 --> 00:03:48,879
is used for collecting

68
00:03:48,879 --> 00:03:50,319
the summary of information to a central

69
00:03:50,319 --> 00:03:52,159
location and this is so you can get that

70
00:03:52,159 --> 00:03:53,760
global view of all the nodes that you're

71
00:03:53,760 --> 00:03:56,720
monitoring back into a central database

72
00:03:56,720 --> 00:03:59,120
and do graphing with something like

73
00:03:59,120 --> 00:04:01,200
grafana for example

74
00:04:01,200 --> 00:04:02,879
just to give a quick preview of what

75
00:04:02,879 --> 00:04:04,799
types of metrics we're talking about

76
00:04:04,799 --> 00:04:07,519
in terms of summary so it's got layer 3

77
00:04:07,519 --> 00:04:08,879
packet information so a lot of packet

78
00:04:08,879 --> 00:04:10,080
counts and rates

79
00:04:10,080 --> 00:04:12,640
breakdowns by protocols and so forth

80
00:04:12,640 --> 00:04:14,239
then it gets into deeper

81
00:04:14,239 --> 00:04:16,560
uh packet inspection and so obviously we

82
00:04:16,560 --> 00:04:18,798
care a lot about dns and so

83
00:04:18,798 --> 00:04:20,720
we get into dns counts and rates and

84
00:04:20,720 --> 00:04:22,240
breakdowns by protocol and response code

85
00:04:22,240 --> 00:04:23,040
there

86
00:04:23,040 --> 00:04:24,240
but then we start to get into some of

87
00:04:24,240 --> 00:04:25,759
the more interesting ways we can

88
00:04:25,759 --> 00:04:27,600
summarize with the data sketches

89
00:04:27,600 --> 00:04:30,720
so for example uh cardinality is is

90
00:04:30,720 --> 00:04:32,000
interesting to us and

91
00:04:32,000 --> 00:04:34,080
this might be how many source or

92
00:04:34,080 --> 00:04:36,160
destination ip addresses have we seen in

93
00:04:36,160 --> 00:04:37,680
inside of a time window or how many

94
00:04:37,680 --> 00:04:39,199
unique dns queue names have we seen

95
00:04:39,199 --> 00:04:41,199
inside of a time window

96
00:04:41,199 --> 00:04:42,720
it can also do things like track dns

97
00:04:42,720 --> 00:04:44,639
transactions so watching query and reply

98
00:04:44,639 --> 00:04:46,800
pairs and and getting timings out of it

99
00:04:46,800 --> 00:04:48,880
um and then one of the the main ones

100
00:04:48,880 --> 00:04:50,560
also is heavy hitters

101
00:04:50,560 --> 00:04:53,040
or frequent items and so we care a lot

102
00:04:53,040 --> 00:04:53,759
about

103
00:04:53,759 --> 00:04:55,759
what are the top 10 ips that we've seen

104
00:04:55,759 --> 00:04:57,199
in the window what are the top 10 ports

105
00:04:57,199 --> 00:04:59,280
cue names and so forth

106
00:04:59,280 --> 00:05:01,280
so i'll go into more detail on some of

107
00:05:01,280 --> 00:05:04,400
these stats a little later in the talk

108
00:05:04,400 --> 00:05:07,360
just to give you a quick view of what

109
00:05:07,360 --> 00:05:08,800
the terminal program likes just to just

110
00:05:08,800 --> 00:05:10,080
to throw you in and sort of wet your

111
00:05:10,080 --> 00:05:11,039
appetite

112
00:05:11,039 --> 00:05:12,880
this is what it looks like uh you can

113
00:05:12,880 --> 00:05:14,080
see a lot of information

114
00:05:14,080 --> 00:05:16,240
kind of crammed into one view there's a

115
00:05:16,240 --> 00:05:17,520
lot of information going by in the

116
00:05:17,520 --> 00:05:19,039
header that's a lot of counters and so

117
00:05:19,039 --> 00:05:19,680
forth and then

118
00:05:19,680 --> 00:05:21,199
most of the real estate is taken up by

119
00:05:21,199 --> 00:05:22,960
these uh these heavy hitters these top

120
00:05:22,960 --> 00:05:24,400
10 lists that i mentioned

121
00:05:24,400 --> 00:05:25,520
and this is just the on node view this

122
00:05:25,520 --> 00:05:27,039
is the terminal view i'll go through

123
00:05:27,039 --> 00:05:29,010
also the global view

124
00:05:29,010 --> 00:05:30,240
[Music]

125
00:05:30,240 --> 00:05:32,160
so i want to set up a little motivation

126
00:05:32,160 --> 00:05:33,360
for

127
00:05:33,360 --> 00:05:34,960
where our pack advisor came from so the

128
00:05:34,960 --> 00:05:36,560
newest version that's out is v3 there

129
00:05:36,560 --> 00:05:38,080
was a v1

130
00:05:38,080 --> 00:05:39,680
and that goes all the way back to 2014

131
00:05:39,680 --> 00:05:41,919
and you know when ns1 was still a pretty

132
00:05:41,919 --> 00:05:42,800
new company

133
00:05:42,800 --> 00:05:45,039
and we needed visibility across our uh

134
00:05:45,039 --> 00:05:46,560
our global anycast network

135
00:05:46,560 --> 00:05:48,160
so we are a managed dns provider we

136
00:05:48,160 --> 00:05:49,759
provide authoritative dns

137
00:05:49,759 --> 00:05:52,560
we have 26 pops around the world in our

138
00:05:52,560 --> 00:05:54,479
and our main network that

139
00:05:54,479 --> 00:05:56,240
that we operate and you know the

140
00:05:56,240 --> 00:05:57,919
visibility is good for of course just

141
00:05:57,919 --> 00:05:59,680
nominal operations what are our nominal

142
00:05:59,680 --> 00:06:01,199
traffic patterns what's the seasonality

143
00:06:01,199 --> 00:06:02,639
look like and so forth

144
00:06:02,639 --> 00:06:05,759
um and debugging is is another useful

145
00:06:05,759 --> 00:06:06,000
thing

146
00:06:06,000 --> 00:06:07,199
if we're bringing up a new node or we

147
00:06:07,199 --> 00:06:09,120
have some problem uh with a particular

148
00:06:09,120 --> 00:06:09,840
node

149
00:06:09,840 --> 00:06:12,000
um and then finally ddos right or really

150
00:06:12,000 --> 00:06:13,360
just understanding

151
00:06:13,360 --> 00:06:15,440
uh malicious traffic right is this

152
00:06:15,440 --> 00:06:17,039
traffic spike we're seeing malicious or

153
00:06:17,039 --> 00:06:18,319
not and and if it is what are the

154
00:06:18,319 --> 00:06:19,759
properties of that so

155
00:06:19,759 --> 00:06:22,240
so we can mitigate the attack the

156
00:06:22,240 --> 00:06:23,280
original version is a

157
00:06:23,280 --> 00:06:25,199
fork of netsniff ng which is an open

158
00:06:25,199 --> 00:06:28,000
source traffic analyzer

159
00:06:28,000 --> 00:06:30,560
the uh the first version we made was

160
00:06:30,560 --> 00:06:31,440
pretty much just

161
00:06:31,440 --> 00:06:33,600
bolting on dns functionality to this

162
00:06:33,600 --> 00:06:35,360
tool and it did provide this

163
00:06:35,360 --> 00:06:37,280
this terminal dns top like functionality

164
00:06:37,280 --> 00:06:38,560
with some of the information that we

165
00:06:38,560 --> 00:06:39,440
talked about

166
00:06:39,440 --> 00:06:41,360
um it's remains open source you can find

167
00:06:41,360 --> 00:06:44,240
it on the ns1 page if you're interested

168
00:06:44,240 --> 00:06:47,120
um it was mostly used on node we did set

169
00:06:47,120 --> 00:06:48,960
it up to do some central collection

170
00:06:48,960 --> 00:06:51,599
uh but it did have uh it wasn't the

171
00:06:51,599 --> 00:06:52,880
easiest to do basically it wasn't made

172
00:06:52,880 --> 00:06:53,440
for that

173
00:06:53,440 --> 00:06:55,599
um and and trying to collect the

174
00:06:55,599 --> 00:06:57,120
information coming out of it was was

175
00:06:57,120 --> 00:06:58,479
hard all right so that was one thing

176
00:06:58,479 --> 00:06:59,199
that

177
00:06:59,199 --> 00:07:01,440
we wanted to correct um you know some of

178
00:07:01,440 --> 00:07:02,479
the other problems that we had with the

179
00:07:02,479 --> 00:07:03,280
original version

180
00:07:03,280 --> 00:07:04,960
um one of the gaping holes is that it

181
00:07:04,960 --> 00:07:07,199
just didn't support ipv6 and tcp

182
00:07:07,199 --> 00:07:08,800
so obviously that was something we we

183
00:07:08,800 --> 00:07:11,440
needed to correct um

184
00:07:11,440 --> 00:07:12,960
it uh it didn't track the transactions

185
00:07:12,960 --> 00:07:14,000
as we're talking about so it didn't

186
00:07:14,000 --> 00:07:15,440
match up create reply

187
00:07:15,440 --> 00:07:16,960
pairs and that was we knew we were

188
00:07:16,960 --> 00:07:19,039
losing some some information

189
00:07:19,039 --> 00:07:21,039
and just resource usage in general uh

190
00:07:21,039 --> 00:07:22,880
was a bit of a challenge

191
00:07:22,880 --> 00:07:25,039
so as we thought about rewriting this um

192
00:07:25,039 --> 00:07:26,319
there were a couple of guidelines

193
00:07:26,319 --> 00:07:28,560
uh that i wanted to adhere to so the

194
00:07:28,560 --> 00:07:30,800
first is that we want to summarize data

195
00:07:30,800 --> 00:07:32,240
this this particular tool is about

196
00:07:32,240 --> 00:07:34,000
summarizing it's not about collecting

197
00:07:34,000 --> 00:07:36,400
uh all packets and so as i say here we

198
00:07:36,400 --> 00:07:37,520
were interested in that it's

199
00:07:37,520 --> 00:07:39,360
a distilled signal right so not the raw

200
00:07:39,360 --> 00:07:40,880
stream

201
00:07:40,880 --> 00:07:42,479
and we're interested in two views we

202
00:07:42,479 --> 00:07:44,160
want to be able to understand real-time

203
00:07:44,160 --> 00:07:45,759
information that's directly on these

204
00:07:45,759 --> 00:07:46,479
nodes

205
00:07:46,479 --> 00:07:47,840
and we also want to understand the

206
00:07:47,840 --> 00:07:50,080
global view uh which we know

207
00:07:50,080 --> 00:07:51,599
is a bit lagged right like it'll take a

208
00:07:51,599 --> 00:07:52,879
little time to get that information in

209
00:07:52,879 --> 00:07:54,400
but we have that global view

210
00:07:54,400 --> 00:07:55,919
and so these these two different views

211
00:07:55,919 --> 00:07:58,479
of understanding this information were

212
00:07:58,479 --> 00:08:00,240
important

213
00:08:00,240 --> 00:08:02,400
secondly sliding time window with a json

214
00:08:02,400 --> 00:08:03,680
interface and this really comes down to

215
00:08:03,680 --> 00:08:05,840
just having you know a clear way to

216
00:08:05,840 --> 00:08:07,759
track the traffic over time and to

217
00:08:07,759 --> 00:08:09,199
expose it so that we can automate it

218
00:08:09,199 --> 00:08:09,840
against

219
00:08:09,840 --> 00:08:13,120
against it easily and then finally

220
00:08:13,120 --> 00:08:15,120
fix the holes right so obviously ipv6

221
00:08:15,120 --> 00:08:17,520
and tcp needed to be first class

222
00:08:17,520 --> 00:08:20,479
efficiency and getting new metrics in

223
00:08:20,479 --> 00:08:21,680
was a cool

224
00:08:21,680 --> 00:08:23,599
so i'll dive into those a little bit

225
00:08:23,599 --> 00:08:25,520
deeper

226
00:08:25,520 --> 00:08:28,879
so this solution uh was not meant to be

227
00:08:28,879 --> 00:08:29,120
for

228
00:08:29,120 --> 00:08:31,039
for data warehousing right and so

229
00:08:31,039 --> 00:08:32,958
intentionally it was not meant to be

230
00:08:32,958 --> 00:08:34,719
an audit log of all the packet

231
00:08:34,719 --> 00:08:35,839
information that's coming into the

232
00:08:35,839 --> 00:08:38,159
network all the time

233
00:08:38,159 --> 00:08:39,519
there are other solutions for that

234
00:08:39,519 --> 00:08:41,200
obviously including we're talking about

235
00:08:41,200 --> 00:08:42,880
some at this very conference

236
00:08:42,880 --> 00:08:45,360
um but but this is about summarizing and

237
00:08:45,360 --> 00:08:45,920
so

238
00:08:45,920 --> 00:08:48,160
the goal is to summarize with counters

239
00:08:48,160 --> 00:08:49,839
and with these data sketches

240
00:08:49,839 --> 00:08:52,000
directly on the edge and so distill that

241
00:08:52,000 --> 00:08:54,399
signal at all the edges

242
00:08:54,399 --> 00:08:55,680
and the good thing about this is that it

243
00:08:55,680 --> 00:08:57,760
reduces complexity right and so there's

244
00:08:57,760 --> 00:08:59,279
there's fewer data requirements the data

245
00:08:59,279 --> 00:09:00,240
requirements are

246
00:09:00,240 --> 00:09:01,839
much lighter weight and and also it's a

247
00:09:01,839 --> 00:09:04,240
less complex distributed system

248
00:09:04,240 --> 00:09:07,200
right so enable to uh in order to pull

249
00:09:07,200 --> 00:09:08,080
the information out

250
00:09:08,080 --> 00:09:09,920
and uh and get it back into a central

251
00:09:09,920 --> 00:09:11,360
location get into a database

252
00:09:11,360 --> 00:09:13,200
there's just fewer moving parts going on

253
00:09:13,200 --> 00:09:14,640
here

254
00:09:14,640 --> 00:09:16,080
but that's at the expense of querying

255
00:09:16,080 --> 00:09:17,760
flexibility of course right where you're

256
00:09:17,760 --> 00:09:19,680
not able to ask this just arbitrary

257
00:09:19,680 --> 00:09:21,200
questions on the raw data

258
00:09:21,200 --> 00:09:22,720
the questions you can ask it have to do

259
00:09:22,720 --> 00:09:24,720
with the things we're summarizing of

260
00:09:24,720 --> 00:09:26,480
course

261
00:09:26,480 --> 00:09:29,440
one really nice uh thing is that we can

262
00:09:29,440 --> 00:09:30,880
get fast dashboards out of this right

263
00:09:30,880 --> 00:09:32,399
because the data requirements are so

264
00:09:32,399 --> 00:09:34,399
quick it's it's it's really nice to pull

265
00:09:34,399 --> 00:09:35,760
up like a couple months worth of summary

266
00:09:35,760 --> 00:09:36,080
in

267
00:09:36,080 --> 00:09:39,200
a few seconds and um

268
00:09:39,200 --> 00:09:41,360
you know in terms of the actual data

269
00:09:41,360 --> 00:09:42,880
rates we're talking about so

270
00:09:42,880 --> 00:09:44,640
a single summary that we're exposing an

271
00:09:44,640 --> 00:09:46,080
adjacent for a single node

272
00:09:46,080 --> 00:09:48,399
is something like seven kilobytes of of

273
00:09:48,399 --> 00:09:50,800
json uncompressed and so if you imagine

274
00:09:50,800 --> 00:09:52,959
an edge network that had 100 hosts in it

275
00:09:52,959 --> 00:09:54,720
you're only collecting something like

276
00:09:54,720 --> 00:09:56,560
one megabyte per minute right so like

277
00:09:56,560 --> 00:09:58,560
call it a gigabyte a day

278
00:09:58,560 --> 00:10:00,880
and that's uncompressed and another

279
00:10:00,880 --> 00:10:02,320
really nice property of this system is

280
00:10:02,320 --> 00:10:03,040
that

281
00:10:03,040 --> 00:10:05,120
that that data rate is is not a function

282
00:10:05,120 --> 00:10:06,320
of the traffic rates

283
00:10:06,320 --> 00:10:08,079
it's a function of the number of hosts

284
00:10:08,079 --> 00:10:09,680
right so even if you had zero traffic on

285
00:10:09,680 --> 00:10:10,399
your network

286
00:10:10,399 --> 00:10:12,560
this would be your data rate uh and and

287
00:10:12,560 --> 00:10:13,920
on the other hand if you had a giant

288
00:10:13,920 --> 00:10:15,839
ddos or a bunch of spikes it's also

289
00:10:15,839 --> 00:10:18,160
your data rate right so so i think

290
00:10:18,160 --> 00:10:20,959
that's a nice property

291
00:10:22,240 --> 00:10:24,160
so the information is exposed in this

292
00:10:24,160 --> 00:10:25,920
sliding time window and the way we do it

293
00:10:25,920 --> 00:10:26,399
is to

294
00:10:26,399 --> 00:10:29,200
keep an individual minutes and by

295
00:10:29,200 --> 00:10:30,880
default we keep five minutes

296
00:10:30,880 --> 00:10:32,399
of information and each one of these

297
00:10:32,399 --> 00:10:33,839
buckets includes all of the summary

298
00:10:33,839 --> 00:10:35,839
information

299
00:10:35,839 --> 00:10:37,440
and the way it works is that we're able

300
00:10:37,440 --> 00:10:39,040
to expose two views we're able to expose

301
00:10:39,040 --> 00:10:40,800
a merge view so you can get the entire

302
00:10:40,800 --> 00:10:41,279
window

303
00:10:41,279 --> 00:10:42,800
where these buckets merge together and

304
00:10:42,800 --> 00:10:44,560
show like a five minute view a five

305
00:10:44,560 --> 00:10:45,600
minute summary

306
00:10:45,600 --> 00:10:47,279
and you can also pull an individual

307
00:10:47,279 --> 00:10:50,160
bucket uh from from the api

308
00:10:50,160 --> 00:10:53,040
and we use both of these things in the

309
00:10:53,040 --> 00:10:54,800
command line version when the terminal

310
00:10:54,800 --> 00:10:56,320
is following the traffic what you want

311
00:10:56,320 --> 00:10:57,519
is as an operator you want to be

312
00:10:57,519 --> 00:10:58,399
watching

313
00:10:58,399 --> 00:10:59,519
you know what is this sliding

314
00:10:59,519 --> 00:11:01,440
five-minute time window of samurai of

315
00:11:01,440 --> 00:11:04,079
summary real-time information

316
00:11:04,079 --> 00:11:05,440
um on the other hand when you collect

317
00:11:05,440 --> 00:11:07,200
centrally you're interested in

318
00:11:07,200 --> 00:11:09,920
a collecting a single full minute at a

319
00:11:09,920 --> 00:11:10,640
time

320
00:11:10,640 --> 00:11:12,399
and so that exposes the most recent full

321
00:11:12,399 --> 00:11:14,720
bucket number one here in the graph

322
00:11:14,720 --> 00:11:17,279
and uh it pulls that every minute on

323
00:11:17,279 --> 00:11:18,640
every on every node

324
00:11:18,640 --> 00:11:22,000
into that central database and because

325
00:11:22,000 --> 00:11:22,480
we're just

326
00:11:22,480 --> 00:11:25,040
you know using http to expose json it's

327
00:11:25,040 --> 00:11:26,720
not opinionated at all on what kind of

328
00:11:26,720 --> 00:11:28,079
collector is used

329
00:11:28,079 --> 00:11:30,079
or what kind of central database is used

330
00:11:30,079 --> 00:11:31,600
you can work it into your

331
00:11:31,600 --> 00:11:34,640
your observability stack

332
00:11:36,720 --> 00:11:39,200
so you know the last guiding principle

333
00:11:39,200 --> 00:11:39,839
here

334
00:11:39,839 --> 00:11:41,120
plug the holes and make it better right

335
00:11:41,120 --> 00:11:43,600
so so ipv6 and tcp are now fully

336
00:11:43,600 --> 00:11:45,360
supported in this version

337
00:11:45,360 --> 00:11:48,079
um with the with the original version we

338
00:11:48,079 --> 00:11:48,800
had the

339
00:11:48,800 --> 00:11:50,880
the problem where running every time you

340
00:11:50,880 --> 00:11:52,880
ran v1 it would run a new analyzer would

341
00:11:52,880 --> 00:11:54,160
run a new sniffer basically right now it

342
00:11:54,160 --> 00:11:55,760
takes a lot of resources

343
00:11:55,760 --> 00:11:57,360
now since we're just running a single

344
00:11:57,360 --> 00:11:59,279
daemon per node and it's exposing

345
00:11:59,279 --> 00:12:00,800
information on http

346
00:12:00,800 --> 00:12:02,320
uh it's very efficient you can have

347
00:12:02,320 --> 00:12:04,480
operators connect to to the node

348
00:12:04,480 --> 00:12:07,839
no problem this version is tracking dns

349
00:12:07,839 --> 00:12:09,279
transactions now so it's watching for

350
00:12:09,279 --> 00:12:10,720
query and reply pairs and it's getting

351
00:12:10,720 --> 00:12:12,160
information out of it

352
00:12:12,160 --> 00:12:14,639
um it can also work on a pcap so it

353
00:12:14,639 --> 00:12:16,240
doesn't just have to be live capture it

354
00:12:16,240 --> 00:12:16,880
can

355
00:12:16,880 --> 00:12:18,880
uh it can be fed a pcap if you if you've

356
00:12:18,880 --> 00:12:20,000
got a system that's

357
00:12:20,000 --> 00:12:21,040
capturing those and you would want to

358
00:12:21,040 --> 00:12:22,320
summarize them you could automate that

359
00:12:22,320 --> 00:12:24,320
and you can get the summary by running

360
00:12:24,320 --> 00:12:26,000
it on pcaps

361
00:12:26,000 --> 00:12:27,360
and then the sketches we keep talking

362
00:12:27,360 --> 00:12:29,040
about so we get these new interesting

363
00:12:29,040 --> 00:12:30,560
metrics cardinality and

364
00:12:30,560 --> 00:12:32,160
quantiles and again i'll get to that

365
00:12:32,160 --> 00:12:34,079
soon

366
00:12:34,079 --> 00:12:35,360
and there's the concept of sample rate

367
00:12:35,360 --> 00:12:36,880
too it turns out that you don't have to

368
00:12:36,880 --> 00:12:37,440
deeply

369
00:12:37,440 --> 00:12:39,600
fully inspect every single packet to

370
00:12:39,600 --> 00:12:40,959
pull the summary information that we're

371
00:12:40,959 --> 00:12:42,399
interested in and so we can save some

372
00:12:42,399 --> 00:12:44,720
resources by having a sample rate

373
00:12:44,720 --> 00:12:46,000
that the rate right now is currently

374
00:12:46,000 --> 00:12:48,079
manual but this is something we're

375
00:12:48,079 --> 00:12:51,279
thinking about even even making dynamic

376
00:12:51,279 --> 00:12:52,720
and if it's not doing the sample it'll

377
00:12:52,720 --> 00:12:54,639
still continue to update some of the

378
00:12:54,639 --> 00:12:55,680
summary information like the pac

379
00:12:55,680 --> 00:12:58,290
accounts and the simple counters

380
00:12:58,290 --> 00:13:00,480
[Music]

381
00:13:00,480 --> 00:13:02,000
so under the hood what does it look like

382
00:13:02,000 --> 00:13:03,760
so the there are there are two

383
00:13:03,760 --> 00:13:05,920
binaries essentially that get built as

384
00:13:05,920 --> 00:13:06,880
part of this

385
00:13:06,880 --> 00:13:08,560
system and the first is the capture

386
00:13:08,560 --> 00:13:10,399
daemon right or the agent

387
00:13:10,399 --> 00:13:13,200
and this is written in c plus and then

388
00:13:13,200 --> 00:13:14,800
there's the terminal side of it and this

389
00:13:14,800 --> 00:13:15,600
is

390
00:13:15,600 --> 00:13:18,160
a simple golang program uh it's using

391
00:13:18,160 --> 00:13:18,959
this

392
00:13:18,959 --> 00:13:21,519
in curses like library here which is

393
00:13:21,519 --> 00:13:22,720
which is very good

394
00:13:22,720 --> 00:13:24,959
um and its job really is just to spin up

395
00:13:24,959 --> 00:13:26,800
that uh that terminal program

396
00:13:26,800 --> 00:13:28,800
connect to the load to a local or remote

397
00:13:28,800 --> 00:13:30,639
dame and get that summary information

398
00:13:30,639 --> 00:13:31,600
and expose it to you

399
00:13:31,600 --> 00:13:34,480
in this you know top like one second

400
00:13:34,480 --> 00:13:36,880
updating

401
00:13:37,120 --> 00:13:41,199
refresh and then we get to the two main

402
00:13:41,199 --> 00:13:43,600
libraries that that sort of make packet

403
00:13:43,600 --> 00:13:45,760
visor go so pcapp plus plus

404
00:13:45,760 --> 00:13:48,480
is the capture library it is an

405
00:13:48,480 --> 00:13:50,240
abstraction layer over

406
00:13:50,240 --> 00:13:52,399
uh packet capture and provides some

407
00:13:52,399 --> 00:13:53,680
other nice functionality like tcp

408
00:13:53,680 --> 00:13:55,120
reassembly

409
00:13:55,120 --> 00:13:58,560
um it is uh you know we're focused on

410
00:13:58,560 --> 00:13:59,040
the leap

411
00:13:59,040 --> 00:14:02,560
lib pcap back end uh but it actually

412
00:14:02,560 --> 00:14:03,440
does expose

413
00:14:03,440 --> 00:14:05,279
other backends so you can you can use it

414
00:14:05,279 --> 00:14:07,920
with pf ring you can use it with dpdk

415
00:14:07,920 --> 00:14:09,600
uh which we haven't experimented with

416
00:14:09,600 --> 00:14:11,199
but there's interesting possibilities

417
00:14:11,199 --> 00:14:12,000
there

418
00:14:12,000 --> 00:14:13,519
so that's how we get the packets into

419
00:14:13,519 --> 00:14:15,279
the system and then uh

420
00:14:15,279 --> 00:14:16,720
it's all about counting and summarizing

421
00:14:16,720 --> 00:14:19,279
right so apache data sketches is

422
00:14:19,279 --> 00:14:21,040
uh is an open source library that's out

423
00:14:21,040 --> 00:14:22,800
there um for

424
00:14:22,800 --> 00:14:24,480
uh that exposes these these data

425
00:14:24,480 --> 00:14:26,160
structures um

426
00:14:26,160 --> 00:14:27,760
and that's what we use to do the

427
00:14:27,760 --> 00:14:29,519
summarizing uh and i'll talk about that

428
00:14:29,519 --> 00:14:31,680
in the next slide

429
00:14:31,680 --> 00:14:33,920
it's got optional max mine support uh

430
00:14:33,920 --> 00:14:35,519
that'll give guip and

431
00:14:35,519 --> 00:14:38,320
asn information into those uh top end

432
00:14:38,320 --> 00:14:39,680
tables

433
00:14:39,680 --> 00:14:42,240
uh it's a pretty you know small and a

434
00:14:42,240 --> 00:14:43,839
new code base i tried to keep the

435
00:14:43,839 --> 00:14:45,440
dependencies light so really the only

436
00:14:45,440 --> 00:14:46,959
library dependency is this pcap

437
00:14:46,959 --> 00:14:48,480
plus plus everything else is header only

438
00:14:48,480 --> 00:14:50,079
so it's super easy to build yourself if

439
00:14:50,079 --> 00:14:51,600
you'd like

440
00:14:51,600 --> 00:14:53,760
and at ns1 we use a lot of containers we

441
00:14:53,760 --> 00:14:54,720
use a lot of docker

442
00:14:54,720 --> 00:14:56,720
and so this is docker first if you will

443
00:14:56,720 --> 00:14:58,720
it's available on docker hub

444
00:14:58,720 --> 00:15:00,880
super easy to to pull that and run it

445
00:15:00,880 --> 00:15:02,320
and try it out if you've already got

446
00:15:02,320 --> 00:15:03,920
docker installed

447
00:15:03,920 --> 00:15:06,079
so in terms of performance um you know

448
00:15:06,079 --> 00:15:08,240
not something that's been a big focus

449
00:15:08,240 --> 00:15:12,320
in the 3x brand so far but um but

450
00:15:12,320 --> 00:15:15,760
but uh to talk about memory and cpu real

451
00:15:15,760 --> 00:15:16,480
quick so

452
00:15:16,480 --> 00:15:18,880
um when there's no load on it it starts

453
00:15:18,880 --> 00:15:20,240
at something like 13 megs of resident

454
00:15:20,240 --> 00:15:21,120
ram

455
00:15:21,120 --> 00:15:22,639
on a fully loaded production window you

456
00:15:22,639 --> 00:15:23,920
might expect this to go up to something

457
00:15:23,920 --> 00:15:25,360
like 200 megs of ram

458
00:15:25,360 --> 00:15:26,639
and how much memory it uses is a

459
00:15:26,639 --> 00:15:27,839
property of how you tune these data

460
00:15:27,839 --> 00:15:29,440
sketches uh so that that's actually

461
00:15:29,440 --> 00:15:31,040
tunable but there's a

462
00:15:31,040 --> 00:15:34,079
there's a known limit to that uh in

463
00:15:34,079 --> 00:15:35,040
terms of

464
00:15:35,040 --> 00:15:37,199
um packets it can capture so it's been

465
00:15:37,199 --> 00:15:38,880
measured at better than 100 000

466
00:15:38,880 --> 00:15:41,120
qps on a single node in a single

467
00:15:41,120 --> 00:15:42,959
instance before it starts

468
00:15:42,959 --> 00:15:44,320
dropping some information from the

469
00:15:44,320 --> 00:15:46,560
buffer um nothing goes wrong with this

470
00:15:46,560 --> 00:15:47,199
except that

471
00:15:47,199 --> 00:15:49,279
the summary starts to become inaccurate

472
00:15:49,279 --> 00:15:50,639
and there's several ways we can think

473
00:15:50,639 --> 00:15:54,639
about optimizing this as we go forward

474
00:15:54,639 --> 00:15:56,800
so sorry so the data sketches um again

475
00:15:56,800 --> 00:15:58,880
rely on apache data sketch

476
00:15:58,880 --> 00:16:01,120
library and so what data sketches are

477
00:16:01,120 --> 00:16:02,079
these are these

478
00:16:02,079 --> 00:16:04,480
fast and probabilistic data structures

479
00:16:04,480 --> 00:16:08,000
and these are designed for for streaming

480
00:16:08,000 --> 00:16:09,680
you feed it big data essentially and it

481
00:16:09,680 --> 00:16:11,600
summarizes for you in real time

482
00:16:11,600 --> 00:16:14,000
and what probabilistic means is that all

483
00:16:14,000 --> 00:16:15,920
of the results that it's feeding

484
00:16:15,920 --> 00:16:17,920
wind up being approximate right so if

485
00:16:17,920 --> 00:16:19,519
you need a tool that's giving you exact

486
00:16:19,519 --> 00:16:21,839
counters

487
00:16:21,839 --> 00:16:24,079
sketches are are not the right tool but

488
00:16:24,079 --> 00:16:25,360
if you only need a summary if you if

489
00:16:25,360 --> 00:16:26,160
you're okay with

490
00:16:26,160 --> 00:16:28,639
approximations then they're excellent um

491
00:16:28,639 --> 00:16:29,519
and

492
00:16:29,519 --> 00:16:32,240
the approximations are within defined

493
00:16:32,240 --> 00:16:33,839
error bounds right so you can actually

494
00:16:33,839 --> 00:16:35,279
choose as you spin up your data

495
00:16:35,279 --> 00:16:36,240
structures

496
00:16:36,240 --> 00:16:39,600
uh how big you might want that error

497
00:16:39,600 --> 00:16:40,240
percentage

498
00:16:40,240 --> 00:16:41,600
and right now pac advisor kind of hard

499
00:16:41,600 --> 00:16:44,800
codes a good balance hopefully

500
00:16:44,800 --> 00:16:46,399
but they do provide to us you know

501
00:16:46,399 --> 00:16:47,680
outside of the the counters which come

502
00:16:47,680 --> 00:16:49,279
for free we get cardinality we get these

503
00:16:49,279 --> 00:16:50,880
heavy hitters these frequent items

504
00:16:50,880 --> 00:16:54,079
and we get the quantiles and so

505
00:16:54,079 --> 00:16:55,360
the data sketches themselves are

506
00:16:55,360 --> 00:16:56,560
designed to be merged and that's how we

507
00:16:56,560 --> 00:16:57,839
support the time window

508
00:16:57,839 --> 00:17:00,240
and so when we have those five minute

509
00:17:00,240 --> 00:17:01,040
buckets it's got

510
00:17:01,040 --> 00:17:04,640
five separate data sketch structures per

511
00:17:04,640 --> 00:17:06,000
and then it merges them together

512
00:17:06,000 --> 00:17:07,359
so we can get that view and this is a

513
00:17:07,359 --> 00:17:09,039
built-in functionality to the sketches

514
00:17:09,039 --> 00:17:10,319
and an interesting piece of

515
00:17:10,319 --> 00:17:11,599
functionality we can get out of this is

516
00:17:11,599 --> 00:17:13,520
to think about merging

517
00:17:13,520 --> 00:17:15,359
exposing this raw binary sketch data and

518
00:17:15,359 --> 00:17:16,959
merging that across

519
00:17:16,959 --> 00:17:19,280
not just you know right now it's merging

520
00:17:19,280 --> 00:17:20,559
a single process that we could merge

521
00:17:20,559 --> 00:17:21,359
across

522
00:17:21,359 --> 00:17:23,760
nodes in a day in a data center or even

523
00:17:23,760 --> 00:17:27,280
merging across data centers itself

524
00:17:28,079 --> 00:17:29,760
okay i'm going to get into showing off

525
00:17:29,760 --> 00:17:31,120
some of the

526
00:17:31,120 --> 00:17:32,400
some of the things are summarizing a

527
00:17:32,400 --> 00:17:33,600
little more detail so here's the command

528
00:17:33,600 --> 00:17:34,559
line ui

529
00:17:34,559 --> 00:17:36,320
um again it's it's visualizing all the

530
00:17:36,320 --> 00:17:38,160
summary stats in the time window the

531
00:17:38,160 --> 00:17:40,240
sliding time window on a single node

532
00:17:40,240 --> 00:17:41,600
in real time right so it's the most

533
00:17:41,600 --> 00:17:44,640
up-to-date real-time information

534
00:17:44,640 --> 00:17:46,720
and you can run this locally on the node

535
00:17:46,720 --> 00:17:48,480
or because it's in the end just hitting

536
00:17:48,480 --> 00:17:49,919
an http server

537
00:17:49,919 --> 00:17:52,160
uh you can also connect remotely to on

538
00:17:52,160 --> 00:17:54,000
the packet browser daemon if you'd like

539
00:17:54,000 --> 00:17:55,679
it's it's efficient for multiple

540
00:17:55,679 --> 00:17:57,360
operators to use the same one

541
00:17:57,360 --> 00:18:00,559
for the same reason uh it's

542
00:18:00,559 --> 00:18:02,160
updating once per second right so back

543
00:18:02,160 --> 00:18:04,240
to this view i'm sorry about the the

544
00:18:04,240 --> 00:18:05,600
sample data i didn't have great sample

545
00:18:05,600 --> 00:18:06,880
data this is actually just a capture

546
00:18:06,880 --> 00:18:08,160
from my local network

547
00:18:08,160 --> 00:18:10,240
but it you know exposes most of the

548
00:18:10,240 --> 00:18:11,840
interesting information here so if you

549
00:18:11,840 --> 00:18:13,760
look at the top

550
00:18:13,760 --> 00:18:15,760
all of the packet information is

551
00:18:15,760 --> 00:18:17,280
highlighted

552
00:18:17,280 --> 00:18:19,679
uh and so this is like your l3 data

553
00:18:19,679 --> 00:18:21,280
basically it's how many packets

554
00:18:21,280 --> 00:18:23,440
what are the breakdown by by some

555
00:18:23,440 --> 00:18:24,640
protocols

556
00:18:24,640 --> 00:18:27,120
it does understand ingress and egress

557
00:18:27,120 --> 00:18:28,160
and

558
00:18:28,160 --> 00:18:30,160
at the top right we see deep samples and

559
00:18:30,160 --> 00:18:31,520
that's the sampling functionality i

560
00:18:31,520 --> 00:18:32,480
talked about where

561
00:18:32,480 --> 00:18:35,039
it's you can select how many times is it

562
00:18:35,039 --> 00:18:36,720
fully deeply inspecting the packet and

563
00:18:36,720 --> 00:18:38,960
filling all the data sketches out

564
00:18:38,960 --> 00:18:42,000
and that can be a lower percentage uh

565
00:18:42,000 --> 00:18:43,840
and then we have packet rates and so

566
00:18:43,840 --> 00:18:46,000
uh here we see packet rate in 37 per

567
00:18:46,000 --> 00:18:47,360
second the 37 per second is an

568
00:18:47,360 --> 00:18:48,799
instantaneous rate

569
00:18:48,799 --> 00:18:51,840
uh and what we see next to it is is um

570
00:18:51,840 --> 00:18:53,200
percentiles right so this where it gets

571
00:18:53,200 --> 00:18:53,840
into the

572
00:18:53,840 --> 00:18:56,240
the quantile sketches and um and what

573
00:18:56,240 --> 00:18:58,000
we're seeing here is that

574
00:18:58,000 --> 00:19:01,280
uh in the time window which is shown

575
00:19:01,280 --> 00:19:02,480
uh it's actually in the next section

576
00:19:02,480 --> 00:19:03,840
down but we see exactly what the time

577
00:19:03,840 --> 00:19:05,200
window is

578
00:19:05,200 --> 00:19:07,760
in this time window the p50 of the

579
00:19:07,760 --> 00:19:09,360
packets per second we saw was

580
00:19:09,360 --> 00:19:13,520
zero on up to the p90 p95 p99

581
00:19:13,520 --> 00:19:15,440
and so we get that information in a very

582
00:19:15,440 --> 00:19:18,720
quick glance for both ingress and egress

583
00:19:18,720 --> 00:19:19,600
and then next to that we have

584
00:19:19,600 --> 00:19:22,160
cardinality and so this is

585
00:19:22,160 --> 00:19:24,480
super useful information so we see that

586
00:19:24,480 --> 00:19:25,919
uh what were the

587
00:19:25,919 --> 00:19:27,360
it answers the question how many unique

588
00:19:27,360 --> 00:19:29,600
ips have we seen in this time window

589
00:19:29,600 --> 00:19:32,559
for both ingress and egress um and you

590
00:19:32,559 --> 00:19:32,880
know

591
00:19:32,880 --> 00:19:34,160
it's it's kind of hard to see in this

592
00:19:34,160 --> 00:19:35,760
view but when you do collect this as a

593
00:19:35,760 --> 00:19:36,080
time

594
00:19:36,080 --> 00:19:37,760
series you can see it as a graph over

595
00:19:37,760 --> 00:19:39,600
time you can see seasonality and you can

596
00:19:39,600 --> 00:19:41,039
see spikes when when

597
00:19:41,039 --> 00:19:43,120
uh you know both non-malicious and

598
00:19:43,120 --> 00:19:45,250
malicious traffic comes in

599
00:19:45,250 --> 00:19:47,840
[Music]

600
00:19:47,840 --> 00:19:49,600
and so the section below that gets into

601
00:19:49,600 --> 00:19:51,280
the dns specific

602
00:19:51,280 --> 00:19:53,919
stats and so we see a similar breakdown

603
00:19:53,919 --> 00:19:55,520
in terms of how many dns wire packets

604
00:19:55,520 --> 00:19:57,120
udp

605
00:19:57,120 --> 00:19:59,360
tcp so forth now we see query and

606
00:19:59,360 --> 00:20:01,039
response counts

607
00:20:01,039 --> 00:20:02,960
and then uh transactions so it is

608
00:20:02,960 --> 00:20:04,880
matching up those queries and responses

609
00:20:04,880 --> 00:20:07,280
and it's it's tracking it differently

610
00:20:07,280 --> 00:20:09,120
from in and out right where in would be

611
00:20:09,120 --> 00:20:11,520
we're running a server uh a dns server

612
00:20:11,520 --> 00:20:12,880
on our node and

613
00:20:12,880 --> 00:20:15,679
clients requiring us and out would be um

614
00:20:15,679 --> 00:20:17,200
either the operating system is going out

615
00:20:17,200 --> 00:20:18,480
and making a call or

616
00:20:18,480 --> 00:20:19,760
uh you know we're running a recursive

617
00:20:19,760 --> 00:20:21,120
resolver on our system that's going out

618
00:20:21,120 --> 00:20:22,880
and making a call

619
00:20:22,880 --> 00:20:24,320
um and we have timings on both of those

620
00:20:24,320 --> 00:20:26,960
so now we're using quantiles here for

621
00:20:26,960 --> 00:20:29,520
the timing information so what it's

622
00:20:29,520 --> 00:20:30,880
saying is that

623
00:20:30,880 --> 00:20:33,679
the p50 of all the incoming dns queries

624
00:20:33,679 --> 00:20:35,039
is 20 milliseconds

625
00:20:35,039 --> 00:20:38,000
right and so on up to the p99 of 318

626
00:20:38,000 --> 00:20:38,880
milliseconds

627
00:20:38,880 --> 00:20:40,320
and again this is all this is all done

628
00:20:40,320 --> 00:20:42,000
in real time for the time window that

629
00:20:42,000 --> 00:20:43,840
we're seeing

630
00:20:43,840 --> 00:20:46,320
and finally on the right side we see uh

631
00:20:46,320 --> 00:20:47,760
another cardinality so this answers the

632
00:20:47,760 --> 00:20:48,000
question

633
00:20:48,000 --> 00:20:49,760
how many unique queue names have we seen

634
00:20:49,760 --> 00:20:51,039
in this time window

635
00:20:51,039 --> 00:20:52,559
right and again really interesting

636
00:20:52,559 --> 00:20:54,000
information if you have this as a time

637
00:20:54,000 --> 00:20:54,640
series

638
00:20:54,640 --> 00:20:56,000
and you can see the seasonality and you

639
00:20:56,000 --> 00:20:57,760
can see when spikes happen

640
00:20:57,760 --> 00:20:59,520
and we compare that information again to

641
00:20:59,520 --> 00:21:01,120
look for attacks i'll go into that for a

642
00:21:01,120 --> 00:21:01,760
second

643
00:21:01,760 --> 00:21:04,159
in a second below that we just have

644
00:21:04,159 --> 00:21:05,200
counters for

645
00:21:05,200 --> 00:21:07,280
the archos that are coming out and again

646
00:21:07,280 --> 00:21:08,640
here's the time window so we're saying

647
00:21:08,640 --> 00:21:09,120
that as

648
00:21:09,120 --> 00:21:10,320
you know as an operator i'm seeing

649
00:21:10,320 --> 00:21:11,520
exactly the information that's been

650
00:21:11,520 --> 00:21:15,120
summarized from 643 to 647 here

651
00:21:15,120 --> 00:21:18,559
and exactly how long the period is

652
00:21:18,640 --> 00:21:20,640
and then finally at the bottom we see

653
00:21:20,640 --> 00:21:22,320
the uh the heavy hitters

654
00:21:22,320 --> 00:21:24,480
the top end right so um right now we're

655
00:21:24,480 --> 00:21:27,039
storing or the api exposes the top ten

656
00:21:27,039 --> 00:21:28,400
i think the ui right now is showing the

657
00:21:28,400 --> 00:21:31,360
top seven just to fit everything in

658
00:21:31,360 --> 00:21:33,760
but we have um you know a lot of

659
00:21:33,760 --> 00:21:34,799
interesting information that we care

660
00:21:34,799 --> 00:21:36,559
about as dns operators

661
00:21:36,559 --> 00:21:38,080
including dns summary information the

662
00:21:38,080 --> 00:21:39,440
queue names at different aggregation

663
00:21:39,440 --> 00:21:40,720
levels

664
00:21:40,720 --> 00:21:42,799
the the timings the queue types and so

665
00:21:42,799 --> 00:21:45,280
forth there were no nx's or serve fails

666
00:21:45,280 --> 00:21:46,640
in this time period but those would be

667
00:21:46,640 --> 00:21:47,280
listed

668
00:21:47,280 --> 00:21:49,520
in terms of counters for the top 10 that

669
00:21:49,520 --> 00:21:51,360
we saw also for refused

670
00:21:51,360 --> 00:21:53,280
there's some generic ip information and

671
00:21:53,280 --> 00:21:54,880
dns port information and then

672
00:21:54,880 --> 00:21:56,799
at the bottom we see the max mind

673
00:21:56,799 --> 00:21:59,600
information that i mentioned

674
00:21:59,600 --> 00:22:01,520
and for the slow in and for the slow out

675
00:22:01,520 --> 00:22:02,880
it's actually using the

676
00:22:02,880 --> 00:22:05,679
um the p90 of the timings that we that

677
00:22:05,679 --> 00:22:06,640
it's tracking

678
00:22:06,640 --> 00:22:08,320
to figure out which q names it saw that

679
00:22:08,320 --> 00:22:10,400
were above the p90 and so any that were

680
00:22:10,400 --> 00:22:10,720
above

681
00:22:10,720 --> 00:22:12,960
that were slower than the p90 show up in

682
00:22:12,960 --> 00:22:16,000
this top 10 list over here

683
00:22:16,240 --> 00:22:18,080
shannon this is the timekeeper there's

684
00:22:18,080 --> 00:22:20,000
five minutes left in this presentation

685
00:22:20,000 --> 00:22:22,159
and five minutes of questions following

686
00:22:22,159 --> 00:22:25,440
very good thank you okay central

687
00:22:25,440 --> 00:22:27,520
centralized operations so the way we do

688
00:22:27,520 --> 00:22:28,720
centralized operation

689
00:22:28,720 --> 00:22:31,200
is to um collect that summary

690
00:22:31,200 --> 00:22:32,960
information with telegraph which is open

691
00:22:32,960 --> 00:22:33,600
source

692
00:22:33,600 --> 00:22:35,760
there's a generic telegraph http input

693
00:22:35,760 --> 00:22:36,799
plugin that

694
00:22:36,799 --> 00:22:38,720
once a minute we'll pull a full metric

695
00:22:38,720 --> 00:22:40,400
bucket from all of our nodes

696
00:22:40,400 --> 00:22:42,720
it uses rabbitmq to get that information

697
00:22:42,720 --> 00:22:44,720
back to our to our core

698
00:22:44,720 --> 00:22:47,120
and uh we're using elasticsearch as our

699
00:22:47,120 --> 00:22:48,799
as our main central database and there's

700
00:22:48,799 --> 00:22:50,720
a again a generic plugin

701
00:22:50,720 --> 00:22:51,840
to get that information into the

702
00:22:51,840 --> 00:22:54,000
database so it's a really simple setup

703
00:22:54,000 --> 00:22:55,679
and you can like i say you can work this

704
00:22:55,679 --> 00:22:57,760
into whatever observability stack you

705
00:22:57,760 --> 00:22:59,039
happen to have

706
00:22:59,039 --> 00:23:02,320
on your own systems and

707
00:23:02,320 --> 00:23:04,080
here's what the global view looks like

708
00:23:04,080 --> 00:23:06,320
like a lot of people here i think we use

709
00:23:06,320 --> 00:23:08,799
grafana to visualize a lot of things and

710
00:23:08,799 --> 00:23:10,320
so this is one of the dashboards with

711
00:23:10,320 --> 00:23:12,240
some sample data in it

712
00:23:12,240 --> 00:23:14,400
and so you know you see global packet

713
00:23:14,400 --> 00:23:16,080
rates this is a mix of all the nodes

714
00:23:16,080 --> 00:23:16,480
across

715
00:23:16,480 --> 00:23:19,600
all the pops aggregating together uh

716
00:23:19,600 --> 00:23:21,039
a couple of these graphs are done such

717
00:23:21,039 --> 00:23:22,559
that they're they're symmetrical with

718
00:23:22,559 --> 00:23:23,360
the

719
00:23:23,360 --> 00:23:25,200
ingress and the positive and the egress

720
00:23:25,200 --> 00:23:27,360
at the negative um so it makes it easy

721
00:23:27,360 --> 00:23:29,039
to see make sure that we're sending and

722
00:23:29,039 --> 00:23:30,320
receiving data properly

723
00:23:30,320 --> 00:23:32,080
um in particular this is graphing the

724
00:23:32,080 --> 00:23:33,520
the p95

725
00:23:33,520 --> 00:23:35,360
uh in in the main graph and then the

726
00:23:35,360 --> 00:23:37,520
dots represent the p99 so we can see

727
00:23:37,520 --> 00:23:40,240
spikes that happened uh above and below

728
00:23:40,240 --> 00:23:40,720
that

729
00:23:40,720 --> 00:23:42,799
we see similar for the the packet rates

730
00:23:42,799 --> 00:23:44,720
for for pops and for query response

731
00:23:44,720 --> 00:23:45,200
pairs

732
00:23:45,200 --> 00:23:46,559
here we can see the nice seasonality of

733
00:23:46,559 --> 00:23:48,960
the pops uh

734
00:23:48,960 --> 00:23:50,960
yeah there's a dns protocol breakdown we

735
00:23:50,960 --> 00:23:52,480
can see you know what traffic is coming

736
00:23:52,480 --> 00:23:54,559
in across everything

737
00:23:54,559 --> 00:23:56,640
and then um global nx attack view this

738
00:23:56,640 --> 00:23:58,080
is where we start to marry some of that

739
00:23:58,080 --> 00:23:59,679
interesting information and so here we

740
00:23:59,679 --> 00:24:01,840
have cardinality of the ips that are

741
00:24:01,840 --> 00:24:02,880
querying the system

742
00:24:02,880 --> 00:24:04,799
we have cardinality of the queue names

743
00:24:04,799 --> 00:24:06,159
that are coming into the system

744
00:24:06,159 --> 00:24:08,159
and then we have the rates of nx domain

745
00:24:08,159 --> 00:24:10,240
responses and so

746
00:24:10,240 --> 00:24:11,520
probably most of you recognize what

747
00:24:11,520 --> 00:24:13,039
we're going for here is that our random

748
00:24:13,039 --> 00:24:14,799
label attacks that are so possible

749
00:24:14,799 --> 00:24:18,480
so happen so often this helps us spot

750
00:24:18,480 --> 00:24:19,760
that right we

751
00:24:19,760 --> 00:24:20,799
for all those things if it's a

752
00:24:20,799 --> 00:24:22,720
distributed attack we will expect ip

753
00:24:22,720 --> 00:24:24,000
cardinality to spike

754
00:24:24,000 --> 00:24:25,919
we will expect q names cardinality to

755
00:24:25,919 --> 00:24:27,200
spike and we will expect

756
00:24:27,200 --> 00:24:33,120
nx domain responses to spike

757
00:24:33,120 --> 00:24:34,880
uh just another view of some of the

758
00:24:34,880 --> 00:24:36,640
information here's the dns transaction

759
00:24:36,640 --> 00:24:38,880
timing so we can see the the incoming

760
00:24:38,880 --> 00:24:39,840
and the outgoing

761
00:24:39,840 --> 00:24:41,760
timings graphed again with some dots

762
00:24:41,760 --> 00:24:43,679
showing p99s and p50s

763
00:24:43,679 --> 00:24:45,039
and then here's another attack view

764
00:24:45,039 --> 00:24:46,240
where i just happened to call out where

765
00:24:46,240 --> 00:24:48,559
we saw a spike in source ip cardinality

766
00:24:48,559 --> 00:24:50,720
but not a spike in q name cardinality

767
00:24:50,720 --> 00:24:52,480
and that means it wasn't a random label

768
00:24:52,480 --> 00:24:54,320
attack in particular this happened to be

769
00:24:54,320 --> 00:24:57,130
a tcp syn attack

770
00:24:57,130 --> 00:24:58,799
[Music]

771
00:24:58,799 --> 00:25:00,240
okay centralized top end one thing i

772
00:25:00,240 --> 00:25:01,919
didn't show for global was the

773
00:25:01,919 --> 00:25:03,919
ability to show these these top end

774
00:25:03,919 --> 00:25:05,919
tables across the entire network so it

775
00:25:05,919 --> 00:25:07,600
turns out that this requires mapreduce

776
00:25:07,600 --> 00:25:10,240
job and um that's not supported in

777
00:25:10,240 --> 00:25:12,720
grafana or cabana unfortunately

778
00:25:12,720 --> 00:25:14,320
but it is supported in elasticsearch and

779
00:25:14,320 --> 00:25:16,320
so you can find on github

780
00:25:16,320 --> 00:25:18,400
a uh script that will do this for you it

781
00:25:18,400 --> 00:25:20,080
calculates the global top end

782
00:25:20,080 --> 00:25:23,200
for the selected nodes um but unable to

783
00:25:23,200 --> 00:25:24,559
put it in the dashboard we want so

784
00:25:24,559 --> 00:25:26,080
uh there's a there's a separate

785
00:25:26,080 --> 00:25:28,320
dashboard that's in progress

786
00:25:28,320 --> 00:25:31,120
on github to to show this for now until

787
00:25:31,120 --> 00:25:34,399
grifan and kamana can support it

788
00:25:35,440 --> 00:25:37,120
okay that's most of the summary so this

789
00:25:37,120 --> 00:25:38,880
is an open source project

790
00:25:38,880 --> 00:25:40,480
of course we welcome collaborators

791
00:25:40,480 --> 00:25:42,240
anybody who's interested in trying it

792
00:25:42,240 --> 00:25:42,720
out

793
00:25:42,720 --> 00:25:44,080
giving us feedback and or helping

794
00:25:44,080 --> 00:25:47,919
develop please contact us

795
00:25:47,919 --> 00:25:50,960
there is some documentation for

796
00:25:50,960 --> 00:25:53,840
the api that's exposed uh it's in

797
00:25:53,840 --> 00:25:55,440
progress but uh it's available

798
00:25:55,440 --> 00:25:57,360
in open api format and on swaggerhub

799
00:25:57,360 --> 00:25:59,600
here

800
00:26:00,240 --> 00:26:02,320
and just quickly on some of the future

801
00:26:02,320 --> 00:26:03,279
plans and ideas

802
00:26:03,279 --> 00:26:06,720
um so so a control plane is is one idea

803
00:26:06,720 --> 00:26:08,799
so being able to

804
00:26:08,799 --> 00:26:10,960
not just pull summary information from

805
00:26:10,960 --> 00:26:12,960
the api but be able to write to it and

806
00:26:12,960 --> 00:26:14,720
set up dynamic policies and talk about

807
00:26:14,720 --> 00:26:16,320
exactly what we'd like to summarize

808
00:26:16,320 --> 00:26:18,720
in any particular time is is one idea

809
00:26:18,720 --> 00:26:20,640
allowing other types of streams and so

810
00:26:20,640 --> 00:26:22,080
um it doesn't have to be a packet

811
00:26:22,080 --> 00:26:23,200
capture necessarily we could be

812
00:26:23,200 --> 00:26:24,960
summarizing things from message queue or

813
00:26:24,960 --> 00:26:25,520
a pipe

814
00:26:25,520 --> 00:26:28,320
so we could consider that an abstraction

815
00:26:28,320 --> 00:26:29,840
uh and also same with other protocols so

816
00:26:29,840 --> 00:26:31,360
so dns obviously we're very interested

817
00:26:31,360 --> 00:26:32,480
in but there are other protocols that it

818
00:26:32,480 --> 00:26:33,760
might make sense to

819
00:26:33,760 --> 00:26:35,840
uh to have as modules that can that can

820
00:26:35,840 --> 00:26:37,360
summarize things

821
00:26:37,360 --> 00:26:39,520
and maybe new you know new new ways to

822
00:26:39,520 --> 00:26:41,520
probe so ebpf probes that are looking

823
00:26:41,520 --> 00:26:43,360
for application information is an idea

824
00:26:43,360 --> 00:26:44,159
that's come up

825
00:26:44,159 --> 00:26:47,120
to explore and of course optimization is

826
00:26:47,120 --> 00:26:48,559
is always interesting and

827
00:26:48,559 --> 00:26:50,799
being able to target a single node to

828
00:26:50,799 --> 00:26:53,039
support up to hundreds of thousands with

829
00:26:53,039 --> 00:26:55,200
with the dynamic sampling rate is uh is

830
00:26:55,200 --> 00:26:56,720
on the backlog

831
00:26:56,720 --> 00:26:58,720
and that's uh about all i have so thank

832
00:26:58,720 --> 00:26:59,679
you very much i hope this was

833
00:26:59,679 --> 00:27:00,720
interesting and i'd

834
00:27:00,720 --> 00:27:02,159
be happy to answer any questions if

835
00:27:02,159 --> 00:27:04,240
they're happening

836
00:27:04,240 --> 00:27:05,840
thank you shannon uh that was nice

837
00:27:05,840 --> 00:27:07,440
presentation and

838
00:27:07,440 --> 00:27:09,200
at this moment we have three questions

839
00:27:09,200 --> 00:27:10,480
in so

840
00:27:10,480 --> 00:27:13,039
i will read them to you uh so the first

841
00:27:13,039 --> 00:27:13,840
question is by

842
00:27:13,840 --> 00:27:16,320
matthew poundset is the command line ui

843
00:27:16,320 --> 00:27:17,360
screenshot

844
00:27:17,360 --> 00:27:20,000
you shared single host information or is

845
00:27:20,000 --> 00:27:22,080
that summary data

846
00:27:22,080 --> 00:27:24,799
so it is a single host but it's

847
00:27:24,799 --> 00:27:26,480
summarizing

848
00:27:26,480 --> 00:27:29,520
it's it's summarizing the time window uh

849
00:27:29,520 --> 00:27:30,880
but it is a single host yeah so the

850
00:27:30,880 --> 00:27:32,399
command line interface will always be a

851
00:27:32,399 --> 00:27:33,919
single host it could be local it could

852
00:27:33,919 --> 00:27:34,720
be remote

853
00:27:34,720 --> 00:27:36,480
and it's summarizing the time window as

854
00:27:36,480 --> 00:27:39,440
it shows here for example 643 to 647.

855
00:27:39,440 --> 00:27:44,000
but single host okay thank you

856
00:27:44,000 --> 00:27:47,039
the next question is by rob weber

857
00:27:47,039 --> 00:27:49,679
cool tool thanks a lot uh would it make

858
00:27:49,679 --> 00:27:51,360
sense to split domains based on the

859
00:27:51,360 --> 00:27:52,640
public suffix slates

860
00:27:52,640 --> 00:27:55,840
rather than just number of labels

861
00:27:55,840 --> 00:27:58,159
uh it absolutely could that's that's one

862
00:27:58,159 --> 00:27:59,840
of the nice possibilities about pac

863
00:27:59,840 --> 00:28:00,480
advisors

864
00:28:00,480 --> 00:28:01,600
it could make sense to do a lot of

865
00:28:01,600 --> 00:28:03,039
different types of summaries right and

866
00:28:03,039 --> 00:28:04,799
this is where you get into that

867
00:28:04,799 --> 00:28:06,399
that line between having you know

868
00:28:06,399 --> 00:28:07,600
collecting all the packets and being

869
00:28:07,600 --> 00:28:09,279
able to ask any questions later

870
00:28:09,279 --> 00:28:10,720
versus what we're summering is like you

871
00:28:10,720 --> 00:28:11,919
have to pick things in the end that you

872
00:28:11,919 --> 00:28:13,279
want to summarize

873
00:28:13,279 --> 00:28:15,520
what i'd like for it to be is a way to

874
00:28:15,520 --> 00:28:16,559
summarize a lot of

875
00:28:16,559 --> 00:28:18,559
different uh a lot of different things

876
00:28:18,559 --> 00:28:20,399
in pac advisor but have the ability to

877
00:28:20,399 --> 00:28:21,600
choose what you're summarizing right

878
00:28:21,600 --> 00:28:22,720
like you don't need

879
00:28:22,720 --> 00:28:24,399
a summary of all the options or not

880
00:28:24,399 --> 00:28:25,840
every use case means you need all the

881
00:28:25,840 --> 00:28:26,399
options

882
00:28:26,399 --> 00:28:27,520
and so what i'd like to see is we

883
00:28:27,520 --> 00:28:28,799
support a lot of different ways to

884
00:28:28,799 --> 00:28:29,520
summarize

885
00:28:29,520 --> 00:28:31,120
different protocols and to different

886
00:28:31,120 --> 00:28:33,039
depths of things and then have a control

887
00:28:33,039 --> 00:28:34,080
plane that can control what we're

888
00:28:34,080 --> 00:28:37,120
summarizing dynamically

889
00:28:37,600 --> 00:28:40,880
okay thank you and

890
00:28:40,880 --> 00:28:44,240
the last question is by tamash kriejek

891
00:28:44,240 --> 00:28:46,720
is it possible to monitor dns or tls or

892
00:28:46,720 --> 00:28:48,720
dns over http queries as well

893
00:28:48,720 --> 00:28:50,559
and it wants to support it tl sessions

894
00:28:50,559 --> 00:28:52,399
keys could be locked temporarily

895
00:28:52,399 --> 00:28:56,159
and the traffic decrypted yes so we're

896
00:28:56,159 --> 00:28:57,760
absolutely interested in that kind of

897
00:28:57,760 --> 00:29:00,080
support it doesn't do that at the moment

898
00:29:00,080 --> 00:29:02,880
um so i'm interested in working with

899
00:29:02,880 --> 00:29:03,840
folks on on

900
00:29:03,840 --> 00:29:05,360
the best way to do that right like one

901
00:29:05,360 --> 00:29:07,440
way to do it would be to put

902
00:29:07,440 --> 00:29:09,679
pac advisor between some kind of

903
00:29:09,679 --> 00:29:10,880
termination

904
00:29:10,880 --> 00:29:12,480
and where it's sending to so behind a

905
00:29:12,480 --> 00:29:14,000
proxy that's the only way it could work

906
00:29:14,000 --> 00:29:15,120
right now it doesn't understand the keys

907
00:29:15,120 --> 00:29:16,559
it cannot encrypt

908
00:29:16,559 --> 00:29:18,000
but if there was native support for that

909
00:29:18,000 --> 00:29:21,360
i think that could be super interesting

910
00:29:21,600 --> 00:29:24,080
okay and as you were answering we

911
00:29:24,080 --> 00:29:25,360
received the

912
00:29:25,360 --> 00:29:28,320
question from chung toad following on

913
00:29:28,320 --> 00:29:29,760
the last question

914
00:29:29,760 --> 00:29:31,279
what would be lost if the collection

915
00:29:31,279 --> 00:29:35,679
model was converted to dns set

916
00:29:36,080 --> 00:29:37,600
what would be lost if the collection

917
00:29:37,600 --> 00:29:40,240
model was converted to dns stat

918
00:29:40,240 --> 00:29:42,159
i fortunately don't know the answer that

919
00:29:42,159 --> 00:29:46,399
because i'm not as familiar with dns dat

920
00:29:46,799 --> 00:29:48,720
okay so hopefully we'll be able to

921
00:29:48,720 --> 00:29:50,559
follow offline

922
00:29:50,559 --> 00:29:53,440
and yet another question by ray bellis

923
00:29:53,440 --> 00:29:54,559
uh where's the bottleneck

924
00:29:54,559 --> 00:29:56,799
in the capture process uh is it done

925
00:29:56,799 --> 00:29:58,320
similar captures at

926
00:29:58,320 --> 00:30:01,520
oh i have done similar captures at 4.5

927
00:30:01,520 --> 00:30:02,080
times

928
00:30:02,080 --> 00:30:05,200
your code rate yeah it

929
00:30:05,200 --> 00:30:07,360
it's it has to do with the deep

930
00:30:07,360 --> 00:30:08,799
inspection i think how

931
00:30:08,799 --> 00:30:10,399
how deeply are we inspecting all of the

932
00:30:10,399 --> 00:30:12,640
packets and how many different

933
00:30:12,640 --> 00:30:14,080
for example sketch algorithms are we

934
00:30:14,080 --> 00:30:15,760
putting them into because remember we're

935
00:30:15,760 --> 00:30:17,120
doing a lot of processing with these

936
00:30:17,120 --> 00:30:19,039
sketch algorithms in the end

937
00:30:19,039 --> 00:30:20,399
and they're built to be fast they're

938
00:30:20,399 --> 00:30:22,320
built to work with streaming

939
00:30:22,320 --> 00:30:25,360
um but they they do take cpu right so i

940
00:30:25,360 --> 00:30:26,880
think it's it's a matter of how deeply

941
00:30:26,880 --> 00:30:28,000
you're analyzing that's why i think it's

942
00:30:28,000 --> 00:30:29,120
also important

943
00:30:29,120 --> 00:30:31,679
to provide some kind of control to

944
00:30:31,679 --> 00:30:32,640
select

945
00:30:32,640 --> 00:30:35,200
um the type of analysis we're interested

946
00:30:35,200 --> 00:30:35,760
in

947
00:30:35,760 --> 00:30:38,720
so we can balance that

948
00:30:39,520 --> 00:30:42,159
okay thank you um that's all the

949
00:30:42,159 --> 00:30:43,039
questions we got

950
00:30:43,039 --> 00:30:45,200
uh thank you shannon again for your

951
00:30:45,200 --> 00:30:47,440
presentation

952
00:30:47,440 --> 00:30:50,640
and with that uh we'll move

953
00:30:50,640 --> 00:30:53,120
to the next speaker the next speaker is

954
00:30:53,120 --> 00:30:54,480
robert jeffer

955
00:30:54,480 --> 00:30:57,039
and uh the title of this presentation is

956
00:30:57,039 --> 00:30:58,640
neural networks and challenges in

957
00:30:58,640 --> 00:31:00,480
detection of malicious dns traffic and

958
00:31:00,480 --> 00:31:01,200
bga

959
00:31:01,200 --> 00:31:04,000
malware so robert if you are ready to

960
00:31:04,000 --> 00:31:06,960
share your slides

961
00:31:08,720 --> 00:31:11,760
yes uh sharing it right now okay can you

962
00:31:11,760 --> 00:31:12,480
see it yeah

963
00:31:12,480 --> 00:31:14,240
yeah i can see it i can hear you so the

964
00:31:14,240 --> 00:31:16,720
stage or virtual stage is yours

965
00:31:16,720 --> 00:31:20,720
thank you thank you okay i would like to

966
00:31:20,720 --> 00:31:23,600
i would like to to dive into what we are

967
00:31:23,600 --> 00:31:24,159
doing

968
00:31:24,159 --> 00:31:27,440
on on our dns resolvers

969
00:31:27,440 --> 00:31:31,200
uh in regards of detection malicious

970
00:31:31,200 --> 00:31:35,039
traffic or infected hosts so

971
00:31:35,039 --> 00:31:37,840
the presentation is about the machine

972
00:31:37,840 --> 00:31:39,039
learning

973
00:31:39,039 --> 00:31:42,480
we are doing to detect domain generation

974
00:31:42,480 --> 00:31:44,159
algorithm

975
00:31:44,159 --> 00:31:47,120
or algorithms different ones to to

976
00:31:47,120 --> 00:31:47,840
detect

977
00:31:47,840 --> 00:31:50,559
sequences of of malware generated uh

978
00:31:50,559 --> 00:31:51,360
domains

979
00:31:51,360 --> 00:31:55,120
among a regular traffic uh

980
00:31:55,760 --> 00:31:58,159
there are multiple challenges uh of

981
00:31:58,159 --> 00:31:59,120
course we see

982
00:31:59,120 --> 00:32:02,080
uh most of the traffic is actually a

983
00:32:02,080 --> 00:32:02,960
benign one

984
00:32:02,960 --> 00:32:05,600
the the valid one and in some parts some

985
00:32:05,600 --> 00:32:06,480
some domains

986
00:32:06,480 --> 00:32:11,120
are uh generated by the infected hosts

987
00:32:11,120 --> 00:32:14,240
uh by the domain generation algorithms

988
00:32:14,240 --> 00:32:17,919
we don't really know if behind a single

989
00:32:17,919 --> 00:32:19,039
ip that's uh

990
00:32:19,039 --> 00:32:21,600
communicating with our resolver if there

991
00:32:21,600 --> 00:32:24,159
is a single device or if it's a if it's

992
00:32:24,159 --> 00:32:27,919
a house or if it's a whole large network

993
00:32:27,919 --> 00:32:28,799
so this is

994
00:32:28,799 --> 00:32:30,720
also one of the challenges it could be a

995
00:32:30,720 --> 00:32:32,960
whole a lot of traffic from from a

996
00:32:32,960 --> 00:32:34,799
single ip or or

997
00:32:34,799 --> 00:32:38,879
a few queries during the day

998
00:32:39,120 --> 00:32:42,480
and uh our ultimate goal at the at the

999
00:32:42,480 --> 00:32:42,799
end

1000
00:32:42,799 --> 00:32:45,919
is uh to detect and to point towards the

1001
00:32:45,919 --> 00:32:48,720
infected clients and to tell okay there

1002
00:32:48,720 --> 00:32:49,200
is

1003
00:32:49,200 --> 00:32:52,640
an infected client behind this ip

1004
00:32:52,640 --> 00:32:56,080
uh even without actually knowing

1005
00:32:56,080 --> 00:33:00,240
uh what botnet is uh is running there

1006
00:33:00,240 --> 00:33:03,600
uh without the prior knowledge of those

1007
00:33:03,600 --> 00:33:06,320
specific domains so the first step to to

1008
00:33:06,320 --> 00:33:07,039
do this

1009
00:33:07,039 --> 00:33:10,080
uh for us was to try

1010
00:33:10,080 --> 00:33:12,399
the the per domain dga detection to

1011
00:33:12,399 --> 00:33:14,000
actually decide

1012
00:33:14,000 --> 00:33:17,679
is this particular domain uh

1013
00:33:17,679 --> 00:33:20,960
dga or not uh

1014
00:33:20,960 --> 00:33:24,159
of course this is it's a bit tricky uh

1015
00:33:24,159 --> 00:33:27,360
so what we what we tried uh we

1016
00:33:27,360 --> 00:33:30,559
we asked a university uh to hop on board

1017
00:33:30,559 --> 00:33:31,360
for this

1018
00:33:31,360 --> 00:33:34,880
for this research uh it uh was

1019
00:33:34,880 --> 00:33:38,640
led by by the gentleman catania

1020
00:33:38,640 --> 00:33:41,840
sebastian garcia and pablo torres there

1021
00:33:41,840 --> 00:33:42,960
are

1022
00:33:42,960 --> 00:33:46,000
from technical university in bragg and

1023
00:33:46,000 --> 00:33:49,360
universidad mendoza from argentina

1024
00:33:49,360 --> 00:33:52,640
and what they brought

1025
00:33:52,640 --> 00:33:56,799
inside as a data set uh with our help

1026
00:33:56,799 --> 00:33:59,679
uh was over one million of clean domains

1027
00:33:59,679 --> 00:34:00,799
and almost two

1028
00:34:00,799 --> 00:34:04,159
millions of dga domains from 51

1029
00:34:04,159 --> 00:34:06,720
malware different malware families you

1030
00:34:06,720 --> 00:34:08,399
can you can see the list of the of the

1031
00:34:08,399 --> 00:34:11,040
malware families on the right

1032
00:34:11,040 --> 00:34:13,839
there is a whole paper available uh

1033
00:34:13,839 --> 00:34:14,879
available

1034
00:34:14,879 --> 00:34:17,199
on the url on the on the bottom of this

1035
00:34:17,199 --> 00:34:17,918
slide

1036
00:34:17,918 --> 00:34:20,560
uh i i'm not authorized to redistribute

1037
00:34:20,560 --> 00:34:21,520
the paper

1038
00:34:21,520 --> 00:34:24,639
uh but it's it's available there

1039
00:34:24,639 --> 00:34:27,599
and i encourage you to to read it uh

1040
00:34:27,599 --> 00:34:28,639
it's quite interesting

1041
00:34:28,639 --> 00:34:31,918
i will just point out a few uh things

1042
00:34:31,918 --> 00:34:32,320
out

1043
00:34:32,320 --> 00:34:35,760
of that paper the neural network

1044
00:34:35,760 --> 00:34:39,760
that is actually is actually deciding

1045
00:34:39,760 --> 00:34:41,040
whether the domain

1046
00:34:41,040 --> 00:34:45,199
is dja or not starts with the embedding

1047
00:34:45,199 --> 00:34:46,480
layer

1048
00:34:46,480 --> 00:34:49,599
which creates a whole lot of vectors

1049
00:34:49,599 --> 00:34:52,000
uh out of every single domain so it

1050
00:34:52,000 --> 00:34:53,599
vectorizes the input

1051
00:34:53,599 --> 00:34:56,960
to have uh i think 256 uh

1052
00:34:56,960 --> 00:35:00,640
vectors for any domain you throw at it

1053
00:35:00,640 --> 00:35:03,599
then there is a a single dimension

1054
00:35:03,599 --> 00:35:05,200
convolutional layer

1055
00:35:05,200 --> 00:35:08,240
uh that extract the features

1056
00:35:08,240 --> 00:35:10,880
out of these vectors and at the end

1057
00:35:10,880 --> 00:35:12,720
there is a multi-layer perceptron

1058
00:35:12,720 --> 00:35:13,680
network

1059
00:35:13,680 --> 00:35:16,720
that's doing the final uh

1060
00:35:16,720 --> 00:35:19,599
the final decision is this a dga domain

1061
00:35:19,599 --> 00:35:20,240
or not

1062
00:35:20,240 --> 00:35:23,040
so the basically the the whole output is

1063
00:35:23,040 --> 00:35:24,160
a probability

1064
00:35:24,160 --> 00:35:27,359
and the result through false dga

1065
00:35:27,359 --> 00:35:30,960
or or normal so that's uh

1066
00:35:30,960 --> 00:35:32,640
that's quite nice and this is this is

1067
00:35:32,640 --> 00:35:34,400
how it how it works on the

1068
00:35:34,400 --> 00:35:37,359
uh on the data set uh with the true

1069
00:35:37,359 --> 00:35:38,800
positive rate

1070
00:35:38,800 --> 00:35:41,920
uh about 97 percent and fault

1071
00:35:41,920 --> 00:35:45,440
false positive rate about 0.7 percent

1072
00:35:45,440 --> 00:35:48,640
which is still quite large if you if you

1073
00:35:48,640 --> 00:35:50,960
imagine the dns traffic

1074
00:35:50,960 --> 00:35:54,960
uh the false positive rate at this level

1075
00:35:54,960 --> 00:35:57,599
it's not really uh not really good not

1076
00:35:57,599 --> 00:35:58,160
really

1077
00:35:58,160 --> 00:36:00,720
the only thing you would like to rely on

1078
00:36:00,720 --> 00:36:01,280
uh

1079
00:36:01,280 --> 00:36:03,440
so we have we have improved uh the

1080
00:36:03,440 --> 00:36:04,320
neural network

1081
00:36:04,320 --> 00:36:06,800
over the time a bit on top what was the

1082
00:36:06,800 --> 00:36:09,359
result of this particular research

1083
00:36:09,359 --> 00:36:12,240
but uh at the end it's as i mentioned

1084
00:36:12,240 --> 00:36:14,320
it's really tricky to to do the decision

1085
00:36:14,320 --> 00:36:14,720
on

1086
00:36:14,720 --> 00:36:17,839
on a single domain i'll explain

1087
00:36:17,839 --> 00:36:21,520
right away uh why

1088
00:36:22,240 --> 00:36:24,240
doing the decision just based on the

1089
00:36:24,240 --> 00:36:25,760
domains

1090
00:36:25,760 --> 00:36:30,079
led to to a real false positives so

1091
00:36:30,079 --> 00:36:33,280
we have decided we need something on top

1092
00:36:33,280 --> 00:36:35,920
of those of those labels on the

1093
00:36:35,920 --> 00:36:36,560
individual

1094
00:36:36,560 --> 00:36:38,480
individual domains that will that would

1095
00:36:38,480 --> 00:36:40,320
evaluate the behavior

1096
00:36:40,320 --> 00:36:43,599
of the of the individual hosts and ip

1097
00:36:43,599 --> 00:36:45,119
addresses communicating with the

1098
00:36:45,119 --> 00:36:46,560
resolver

1099
00:36:46,560 --> 00:36:50,000
uh i have i have a few examples

1100
00:36:50,000 --> 00:36:53,520
here of the of some of the domains

1101
00:36:53,520 --> 00:36:56,800
that are actually valid uh domains i've

1102
00:36:56,800 --> 00:36:58,320
picked the domains from

1103
00:36:58,320 --> 00:37:01,599
from czech republic uh from czech domain

1104
00:37:01,599 --> 00:37:04,560
and i really like them the the domains

1105
00:37:04,560 --> 00:37:05,119
here in

1106
00:37:05,119 --> 00:37:08,240
marketing red they are valid domains

1107
00:37:08,240 --> 00:37:12,240
of schools of public institutions uh

1108
00:37:12,240 --> 00:37:15,599
that are of course they have been

1109
00:37:15,599 --> 00:37:18,400
uh they have been marked as dga by the

1110
00:37:18,400 --> 00:37:20,160
neural network because

1111
00:37:20,160 --> 00:37:23,040
i mean even even me i would i would put

1112
00:37:23,040 --> 00:37:23,920
them in the

1113
00:37:23,920 --> 00:37:26,880
in the dji bucket if i uh if i uh see

1114
00:37:26,880 --> 00:37:28,880
them for the for the first time

1115
00:37:28,880 --> 00:37:32,079
so uh our idea

1116
00:37:32,079 --> 00:37:35,280
was okay let's not rely on just

1117
00:37:35,280 --> 00:37:37,839
the the neural network that's uh

1118
00:37:37,839 --> 00:37:39,200
labeling the domains

1119
00:37:39,200 --> 00:37:42,240
but we need something on on top of that

1120
00:37:42,240 --> 00:37:47,520
and we have labeled manually sequences

1121
00:37:47,520 --> 00:37:50,560
uh sequences for of the

1122
00:37:50,560 --> 00:37:55,240
uh of the traffic for uh

1123
00:37:55,240 --> 00:37:58,160
240 dga

1124
00:37:58,160 --> 00:38:02,320
sequences over several days and then

1125
00:38:02,320 --> 00:38:05,760
clean dns traffic almost 250

1126
00:38:05,760 --> 00:38:08,640
uh samples of different clients

1127
00:38:08,640 --> 00:38:10,640
different volumes

1128
00:38:10,640 --> 00:38:13,520
uh to have uh to have different

1129
00:38:13,520 --> 00:38:15,680
sequences of dns traffic and to be able

1130
00:38:15,680 --> 00:38:16,240
to

1131
00:38:16,240 --> 00:38:19,760
feed those uh to a machine learning

1132
00:38:19,760 --> 00:38:20,720
algorithm

1133
00:38:20,720 --> 00:38:22,800
that would be able to decide okay this

1134
00:38:22,800 --> 00:38:24,560
ip address is infected

1135
00:38:24,560 --> 00:38:27,920
or not uh this is one of the

1136
00:38:27,920 --> 00:38:30,160
uh one of the point of views that we got

1137
00:38:30,160 --> 00:38:31,599
from the

1138
00:38:31,599 --> 00:38:34,800
from the data set the cluster

1139
00:38:34,800 --> 00:38:38,160
on the right uh the dga cluster on the

1140
00:38:38,160 --> 00:38:39,680
right are the data sets

1141
00:38:39,680 --> 00:38:42,800
where there are actually really many

1142
00:38:42,800 --> 00:38:43,680
queries

1143
00:38:43,680 --> 00:38:46,480
from the infected hosts so they are

1144
00:38:46,480 --> 00:38:48,000
easily distinguishable

1145
00:38:48,000 --> 00:38:50,560
from the rest so it's a it's a it's a

1146
00:38:50,560 --> 00:38:51,119
flat

1147
00:38:51,119 --> 00:38:54,720
of the of dj queries and uh it's easy to

1148
00:38:54,720 --> 00:38:55,839
distinguish them

1149
00:38:55,839 --> 00:38:58,720
but uh the cluster on the left uh based

1150
00:38:58,720 --> 00:39:00,160
on the volume uh

1151
00:39:00,160 --> 00:39:03,359
this is much more tricky uh

1152
00:39:03,359 --> 00:39:06,240
the the dgas here are generating just a

1153
00:39:06,240 --> 00:39:06,720
few

1154
00:39:06,720 --> 00:39:10,160
uh domains per hour or uh

1155
00:39:10,160 --> 00:39:13,280
or per day and it's base is basically

1156
00:39:13,280 --> 00:39:14,000
overlapping

1157
00:39:14,000 --> 00:39:17,040
with the with the regular traffic our

1158
00:39:17,040 --> 00:39:22,160
experience is that 0.01

1159
00:39:22,160 --> 00:39:25,839
of the traffic is labeled as a dga

1160
00:39:25,839 --> 00:39:28,480
so it's it's not it's not a huge it's

1161
00:39:28,480 --> 00:39:29,920
not a huge amount

1162
00:39:29,920 --> 00:39:33,119
and uh this is the most tricky part to

1163
00:39:33,119 --> 00:39:34,240
distinguish the

1164
00:39:34,240 --> 00:39:37,200
the clean from the from the dj this is

1165
00:39:37,200 --> 00:39:40,640
uh these are the results from from our

1166
00:39:40,640 --> 00:39:45,119
um sequence uh sequence analysis

1167
00:39:45,119 --> 00:39:47,839
uh that's working with the dj label uh

1168
00:39:47,839 --> 00:39:48,320
on on

1169
00:39:48,320 --> 00:39:51,760
long term traffic on on at least several

1170
00:39:51,760 --> 00:39:52,720
hours

1171
00:39:52,720 --> 00:39:56,079
uh or maybe uh

1172
00:39:56,079 --> 00:39:59,200
several days and actually we got really

1173
00:39:59,200 --> 00:39:59,599
good

1174
00:39:59,599 --> 00:40:02,320
uh really good results based on that

1175
00:40:02,320 --> 00:40:04,160
more than 99

1176
00:40:04,160 --> 00:40:07,599
uh precision uh based on the

1177
00:40:07,599 --> 00:40:10,000
on the time sequences so we are really

1178
00:40:10,000 --> 00:40:10,960
confident about

1179
00:40:10,960 --> 00:40:13,839
pointing towards the uh the infected ip

1180
00:40:13,839 --> 00:40:16,560
addresses there

1181
00:40:16,560 --> 00:40:18,560
uh how does it look like in the in the

1182
00:40:18,560 --> 00:40:20,800
real world uh

1183
00:40:20,800 --> 00:40:24,480
i have a i have a few examples here

1184
00:40:24,480 --> 00:40:26,400
this is one of my favorites actually

1185
00:40:26,400 --> 00:40:27,760
this is a really

1186
00:40:27,760 --> 00:40:32,240
aggressive in terms of number of uh

1187
00:40:32,240 --> 00:40:35,520
number of queries monero miner

1188
00:40:35,520 --> 00:40:38,800
which is sending queries towards

1189
00:40:38,800 --> 00:40:41,359
these domains uh the author of the

1190
00:40:41,359 --> 00:40:43,680
malware is using these domains or one of

1191
00:40:43,680 --> 00:40:44,079
these

1192
00:40:44,079 --> 00:40:47,680
one of these domains uh from time to

1193
00:40:47,680 --> 00:40:49,200
time to update

1194
00:40:49,200 --> 00:40:51,760
the malware and the top-level domains

1195
00:40:51,760 --> 00:40:52,319
are

1196
00:40:52,319 --> 00:40:55,119
uh it's a combination of hosting or

1197
00:40:55,119 --> 00:40:57,280
black friday tickets and feedback

1198
00:40:57,280 --> 00:40:59,599
and we actually see this malware active

1199
00:40:59,599 --> 00:41:00,480
for uh

1200
00:41:00,480 --> 00:41:03,520
for like two years and uh in

1201
00:41:03,520 --> 00:41:06,319
in many many networks there are still a

1202
00:41:06,319 --> 00:41:08,240
huge number of infected

1203
00:41:08,240 --> 00:41:11,359
infected clients you can see that

1204
00:41:11,359 --> 00:41:14,240
during one hour such an infected client

1205
00:41:14,240 --> 00:41:16,079
is able to see

1206
00:41:16,079 --> 00:41:19,119
sent about 30

1207
00:41:19,119 --> 00:41:22,560
000 queries uh even more uh we have seen

1208
00:41:22,560 --> 00:41:24,640
we have seen occasions where it was like

1209
00:41:24,640 --> 00:41:27,680
almost 100 thousands

1210
00:41:27,680 --> 00:41:30,000
uh there are much much more famous like

1211
00:41:30,000 --> 00:41:32,800
botnets like neckers botnet

1212
00:41:32,800 --> 00:41:35,599
they are a bit more cautious uh as you

1213
00:41:35,599 --> 00:41:35,920
can

1214
00:41:35,920 --> 00:41:39,200
as you can see here every column uh is

1215
00:41:39,200 --> 00:41:42,319
one hour uh on the timeline uh

1216
00:41:42,319 --> 00:41:44,800
neckers uses a large set of different

1217
00:41:44,800 --> 00:41:46,640
tlds

1218
00:41:46,640 --> 00:41:49,920
and here um we are able to see that per

1219
00:41:49,920 --> 00:41:53,839
hour uh the the traffic uh includes like

1220
00:41:53,839 --> 00:41:57,040
300 uh 300 different dga

1221
00:41:57,040 --> 00:42:00,480
queries and there are also uh

1222
00:42:00,480 --> 00:42:02,800
some other botnets much more cautious uh

1223
00:42:02,800 --> 00:42:04,160
this one is unknown

1224
00:42:04,160 --> 00:42:06,400
uh our disadvantage is that we cannot

1225
00:42:06,400 --> 00:42:07,760
really decide whether

1226
00:42:07,760 --> 00:42:11,119
uh whether it's a uh what type of botnet

1227
00:42:11,119 --> 00:42:11,680
this is

1228
00:42:11,680 --> 00:42:13,440
if we don't know actually if we don't

1229
00:42:13,440 --> 00:42:14,720
have the binary

1230
00:42:14,720 --> 00:42:16,640
if we don't if we cannot link it to a

1231
00:42:16,640 --> 00:42:18,400
particular algorithm

1232
00:42:18,400 --> 00:42:21,040
we just can tell okay this is a dga it's

1233
00:42:21,040 --> 00:42:22,160
an infected host

1234
00:42:22,160 --> 00:42:24,480
but we are not sure about the particular

1235
00:42:24,480 --> 00:42:25,839
botnet so this is

1236
00:42:25,839 --> 00:42:28,000
for us it's an unknown botnet but still

1237
00:42:28,000 --> 00:42:30,240
we can tell this is an infected

1238
00:42:30,240 --> 00:42:32,959
machine here

1239
00:42:34,000 --> 00:42:37,119
so as a summary

1240
00:42:37,119 --> 00:42:39,760
we are very happy with the with the dji

1241
00:42:39,760 --> 00:42:40,800
detection

1242
00:42:40,800 --> 00:42:43,839
based on the two layers first the the

1243
00:42:43,839 --> 00:42:45,200
domain based uh

1244
00:42:45,200 --> 00:42:48,480
labeling and then uh taking the

1245
00:42:48,480 --> 00:42:50,880
the whole sequences of the uh of the

1246
00:42:50,880 --> 00:42:51,520
traffic

1247
00:42:51,520 --> 00:42:54,000
and and running them against uh the

1248
00:42:54,000 --> 00:42:54,720
clean and

1249
00:42:54,720 --> 00:42:58,400
and uh infected traffic uh it gives

1250
00:42:58,400 --> 00:43:01,520
very precise uh output uh

1251
00:43:01,520 --> 00:43:05,200
our challenge uh what we would like to

1252
00:43:05,200 --> 00:43:07,359
solve in the future is to do the

1253
00:43:07,359 --> 00:43:08,880
real-time prevention

1254
00:43:08,880 --> 00:43:12,800
so uh directly on the resolver

1255
00:43:12,800 --> 00:43:16,720
to be able to mark the infected clients

1256
00:43:16,720 --> 00:43:21,280
and for them to block and to prevent

1257
00:43:21,280 --> 00:43:23,760
only the dga traffic but keep them

1258
00:43:23,760 --> 00:43:25,040
online

1259
00:43:25,040 --> 00:43:27,040
keep them online without preventing them

1260
00:43:27,040 --> 00:43:29,040
the regular dns resolution

1261
00:43:29,040 --> 00:43:31,520
it's quite challenging performance wise

1262
00:43:31,520 --> 00:43:32,319
uh

1263
00:43:32,319 --> 00:43:35,040
but it's something that we would like to

1264
00:43:35,040 --> 00:43:35,760
manage

1265
00:43:35,760 --> 00:43:40,160
and we are looking into into this deeper

1266
00:43:40,160 --> 00:43:43,359
thank you thank you for your attention

1267
00:43:43,359 --> 00:43:46,079
if there are any questions i'm here to

1268
00:43:46,079 --> 00:43:47,920
answer them

1269
00:43:47,920 --> 00:43:51,040
thank you robert uh we didn't get any

1270
00:43:51,040 --> 00:43:54,319
questions yet into zoom

1271
00:43:54,319 --> 00:43:57,520
but i will have one question uh so

1272
00:43:57,520 --> 00:43:59,440
this is not really dina's questions but

1273
00:43:59,440 --> 00:44:01,760
i'm uh interested in

1274
00:44:01,760 --> 00:44:04,160
if you uh if you managed to identify

1275
00:44:04,160 --> 00:44:05,200
some botnet

1276
00:44:05,200 --> 00:44:08,079
um and you were i am well can you can

1277
00:44:08,079 --> 00:44:10,240
you like reverse the algorithm that is

1278
00:44:10,240 --> 00:44:12,480
generating these dj algorithms uh can

1279
00:44:12,480 --> 00:44:13,599
you then like

1280
00:44:13,599 --> 00:44:17,520
uh prevent all queries generated by

1281
00:44:17,520 --> 00:44:19,599
uh this mother or do you still have to

1282
00:44:19,599 --> 00:44:20,839
rely on

1283
00:44:20,839 --> 00:44:23,920
uh solution like this uh

1284
00:44:23,920 --> 00:44:25,760
that just like estimates whether whether

1285
00:44:25,760 --> 00:44:27,440
the query is dj or not

1286
00:44:27,440 --> 00:44:29,599
right well we cannot we cannot revise

1287
00:44:29,599 --> 00:44:31,359
that without the without the actual

1288
00:44:31,359 --> 00:44:32,400
binary

1289
00:44:32,400 --> 00:44:35,520
so we can just uh we can just guest

1290
00:44:35,520 --> 00:44:38,640
guess most of the queries uh that are

1291
00:44:38,640 --> 00:44:39,599
that are dj

1292
00:44:39,599 --> 00:44:42,400
but it's not it's not usable to reverse

1293
00:44:42,400 --> 00:44:42,800
the

1294
00:44:42,800 --> 00:44:46,480
algorithm behind it okay thank you

1295
00:44:46,480 --> 00:44:50,000
um eli hussain uh asked

1296
00:44:50,000 --> 00:44:52,400
would it be good to use hois records in

1297
00:44:52,400 --> 00:44:56,079
real time to predict dja domains

1298
00:44:57,280 --> 00:45:00,640
um not sure not sure about uh

1299
00:45:00,640 --> 00:45:03,599
about the answer to this i mean most of

1300
00:45:03,599 --> 00:45:05,599
the domains actually

1301
00:45:05,599 --> 00:45:08,240
don't exist at the time of the of the

1302
00:45:08,240 --> 00:45:08,960
queries

1303
00:45:08,960 --> 00:45:12,079
so so the who is uh is a bit tricky so

1304
00:45:12,079 --> 00:45:13,680
you can you can do it for the existing

1305
00:45:13,680 --> 00:45:15,270
ones

1306
00:45:15,270 --> 00:45:17,200
[Music]

1307
00:45:17,200 --> 00:45:22,160
but not for the prediction uh i mean

1308
00:45:22,160 --> 00:45:23,920
i'm not sure how how this would help

1309
00:45:23,920 --> 00:45:27,839
with the uh with the labeling

1310
00:45:28,000 --> 00:45:31,040
okay thank you uh we have two more

1311
00:45:31,040 --> 00:45:32,400
questions uh

1312
00:45:32,400 --> 00:45:35,680
some channel is asking do you take into

1313
00:45:35,680 --> 00:45:37,200
account the response code

1314
00:45:37,200 --> 00:45:39,599
for example index domain responses for

1315
00:45:39,599 --> 00:45:40,720
the traffic analysis

1316
00:45:40,720 --> 00:45:42,960
botnet polling is often associated with

1317
00:45:42,960 --> 00:45:44,960
high nx domain accounts

1318
00:45:44,960 --> 00:45:48,079
right i agree uh it is but

1319
00:45:48,079 --> 00:45:51,359
we decided not to take this into account

1320
00:45:51,359 --> 00:45:52,160
uh

1321
00:45:52,160 --> 00:45:55,520
for the for the purposes of botnets that

1322
00:45:55,520 --> 00:45:57,680
have a low volume of domains

1323
00:45:57,680 --> 00:46:00,960
and all are actually all are actually

1324
00:46:00,960 --> 00:46:04,319
existing so we have seen some uh

1325
00:46:04,319 --> 00:46:06,480
one of one of the one of the botnets i

1326
00:46:06,480 --> 00:46:07,599
remember is a

1327
00:46:07,599 --> 00:46:10,000
the infected c cleaner which is like

1328
00:46:10,000 --> 00:46:11,760
four years ago maybe

1329
00:46:11,760 --> 00:46:14,960
uh they actually cycled

1330
00:46:14,960 --> 00:46:18,319
only one or two domains per week and

1331
00:46:18,319 --> 00:46:21,440
the attacker has already bought all of

1332
00:46:21,440 --> 00:46:23,599
them so all of the domains were existing

1333
00:46:23,599 --> 00:46:25,359
and this is one of the examples where

1334
00:46:25,359 --> 00:46:27,119
this would be

1335
00:46:27,119 --> 00:46:30,160
uh would be a bad idea to to take into

1336
00:46:30,160 --> 00:46:30,800
account

1337
00:46:30,800 --> 00:46:35,040
the response okay thank you

1338
00:46:35,040 --> 00:46:36,640
and the last question we got was a

1339
00:46:36,640 --> 00:46:39,680
duplicate of the first one

1340
00:46:39,680 --> 00:46:42,720
so we have to one more minute so if

1341
00:46:42,720 --> 00:46:44,640
anyone wants to ask questions you still

1342
00:46:44,640 --> 00:46:47,440
have a bit of time

1343
00:46:53,040 --> 00:46:56,720
and if not i will just hand this over to

1344
00:46:56,720 --> 00:46:57,839
keith because he

1345
00:46:57,839 --> 00:47:00,240
will have some short announcements and

1346
00:47:00,240 --> 00:47:01,520
thank you again robert for your

1347
00:47:01,520 --> 00:47:02,480
presentation

1348
00:47:02,480 --> 00:47:04,800
thank you

1349
00:47:05,599 --> 00:47:08,240
yes thank you um jan and jake for um

1350
00:47:08,240 --> 00:47:10,000
running this morning exam session

1351
00:47:10,000 --> 00:47:11,520
and thank you to shannon and robert for

1352
00:47:11,520 --> 00:47:13,119
your your talks

1353
00:47:13,119 --> 00:47:15,520
um have a few announcements um first of

1354
00:47:15,520 --> 00:47:16,960
all i'd just like to thank

1355
00:47:16,960 --> 00:47:20,240
ns1 as our sponsor of this event um

1356
00:47:20,240 --> 00:47:21,920
today and yesterday

1357
00:47:21,920 --> 00:47:23,920
um they're doing a survey still where

1358
00:47:23,920 --> 00:47:25,359
you can um potentially

1359
00:47:25,359 --> 00:47:28,240
be awarded um something some swag um

1360
00:47:28,240 --> 00:47:30,160
also to acknowledge verizon as our

1361
00:47:30,160 --> 00:47:30,960
patreon for

1362
00:47:30,960 --> 00:47:34,000
all our workshops during 2020. um a

1363
00:47:34,000 --> 00:47:34,720
reminder

1364
00:47:34,720 --> 00:47:36,559
that we very much appreciate getting

1365
00:47:36,559 --> 00:47:38,319
feedback both on the talks

1366
00:47:38,319 --> 00:47:40,559
and the event um so you'll see the on

1367
00:47:40,559 --> 00:47:42,000
the survey links in the

1368
00:47:42,000 --> 00:47:43,839
rolling slides would appreciate feedback

1369
00:47:43,839 --> 00:47:46,319
on that and also if you're not member

1370
00:47:46,319 --> 00:47:47,359
and you have not

1371
00:47:47,359 --> 00:47:50,640
registered for the orc agm then

1372
00:47:50,640 --> 00:47:53,760
there's still time to do so um again

1373
00:47:53,760 --> 00:47:54,559
they um

1374
00:47:54,559 --> 00:47:56,720
you should have received a link for that

1375
00:47:56,720 --> 00:47:57,839
um and

1376
00:47:57,839 --> 00:48:00,640
um just to be clear that the orc atm

1377
00:48:00,640 --> 00:48:02,480
voting tokens will not be sent out until

1378
00:48:02,480 --> 00:48:04,480
midnight utc tonight that's slightly

1379
00:48:04,480 --> 00:48:06,240
different from previous announcements on

1380
00:48:06,240 --> 00:48:07,040
that

1381
00:48:07,040 --> 00:48:09,200
um we're now going to break for 15

1382
00:48:09,200 --> 00:48:10,319
minutes

1383
00:48:10,319 --> 00:48:15,040
and we will resume at um

1384
00:48:16,880 --> 00:48:20,079
1500 utc in

1385
00:48:20,079 --> 00:48:22,880
15 minutes

1386
00:48:23,440 --> 00:48:28,720
okay thank you so hello and welcome back

1387
00:48:28,720 --> 00:48:31,760
so we have two talks remaining

1388
00:48:31,760 --> 00:48:34,079
and without any further delays i will

1389
00:48:34,079 --> 00:48:36,000
hand over to brian summers

1390
00:48:36,000 --> 00:48:38,000
who will talk about dna script securing

1391
00:48:38,000 --> 00:48:40,880
traffic from the stop to the resolver

1392
00:48:40,880 --> 00:48:44,400
so brian if you're ready

1393
00:48:44,400 --> 00:48:49,839
thank you i'll just share my screen here

1394
00:48:53,680 --> 00:48:56,640
hopefully you can see that

1395
00:48:57,280 --> 00:49:03,839
we cannot

1396
00:49:07,420 --> 00:49:10,510
[Music]

1397
00:49:14,839 --> 00:49:18,960
oh let me try that again

1398
00:49:24,480 --> 00:49:27,680
still i think oh something's coming up

1399
00:49:27,680 --> 00:49:31,839
yes we can see a screen

1400
00:49:32,160 --> 00:49:34,720
okay apparently uh helps when you click

1401
00:49:34,720 --> 00:49:36,880
share

1402
00:49:36,880 --> 00:49:40,559
okay um my name is brian summers

1403
00:49:40,559 --> 00:49:43,599
um i work at open dns or umbrella which

1404
00:49:43,599 --> 00:49:45,280
is a part of cisco

1405
00:49:45,280 --> 00:49:48,000
and i'm going to talk today about dns

1406
00:49:48,000 --> 00:49:48,480
script

1407
00:49:48,480 --> 00:49:51,440
and securing the dns traffic from the

1408
00:49:51,440 --> 00:49:54,480
stub to the resolver

1409
00:49:54,800 --> 00:49:58,640
um i'm going to cover a number of topics

1410
00:49:58,640 --> 00:50:01,440
starting with the landscape what the dns

1411
00:50:01,440 --> 00:50:03,280
landscape looks like at the moment

1412
00:50:03,280 --> 00:50:05,200
and where the different security zones

1413
00:50:05,200 --> 00:50:06,880
are and

1414
00:50:06,880 --> 00:50:09,680
what's missing in terms of security from

1415
00:50:09,680 --> 00:50:12,480
for dns end to end i'll then

1416
00:50:12,480 --> 00:50:15,200
look into how dns crypt actually works

1417
00:50:15,200 --> 00:50:16,160
um

1418
00:50:16,160 --> 00:50:18,240
and what it looks like in the wild and

1419
00:50:18,240 --> 00:50:19,760
then i'll summarize what we've talked

1420
00:50:19,760 --> 00:50:22,079
about

1421
00:50:24,400 --> 00:50:26,960
so the landscape um well back in the day

1422
00:50:26,960 --> 00:50:27,440
i think

1423
00:50:27,440 --> 00:50:30,480
uh many of us uh started connecting to

1424
00:50:30,480 --> 00:50:32,880
the internet over 2400 board modem

1425
00:50:32,880 --> 00:50:36,240
um we had an environment whereby

1426
00:50:36,240 --> 00:50:38,960
we either connected to the internet from

1427
00:50:38,960 --> 00:50:40,559
the office or from home

1428
00:50:40,559 --> 00:50:43,760
um our resolver was on our isp or maybe

1429
00:50:43,760 --> 00:50:45,119
if we're a little bit more tactically

1430
00:50:45,119 --> 00:50:46,240
minded

1431
00:50:46,240 --> 00:50:50,000
it was in our home or in our office

1432
00:50:50,000 --> 00:50:52,800
and the resolver would talk to name

1433
00:50:52,800 --> 00:50:54,640
servers and the main servers are out in

1434
00:50:54,640 --> 00:50:55,520
the wild

1435
00:50:55,520 --> 00:50:57,440
[Music]

1436
00:50:57,440 --> 00:51:00,480
the wild got wilder as the internet grew

1437
00:51:00,480 --> 00:51:04,079
and dnsec was invented and dns was

1438
00:51:04,079 --> 00:51:07,040
invented really to secure that

1439
00:51:07,040 --> 00:51:08,480
that data between the resolver and the

1440
00:51:08,480 --> 00:51:10,480
name servers it takes the

1441
00:51:10,480 --> 00:51:12,400
name server data and authenticates it

1442
00:51:12,400 --> 00:51:13,920
and makes sure that it's uh

1443
00:51:13,920 --> 00:51:16,000
it's actually the stuff distributed by

1444
00:51:16,000 --> 00:51:18,480
the zone owners

1445
00:51:18,480 --> 00:51:20,800
but of course moving towards the modern

1446
00:51:20,800 --> 00:51:22,000
world um

1447
00:51:22,000 --> 00:51:24,640
really everything's in the cloud all of

1448
00:51:24,640 --> 00:51:25,839
the clients are in the cloud

1449
00:51:25,839 --> 00:51:27,920
the resolvers in the cloud clients move

1450
00:51:27,920 --> 00:51:30,160
around the place

1451
00:51:30,160 --> 00:51:32,319
and the only thing that's really secured

1452
00:51:32,319 --> 00:51:33,680
in dns these days

1453
00:51:33,680 --> 00:51:36,079
is the path between the resolver and the

1454
00:51:36,079 --> 00:51:36,960
name servers

1455
00:51:36,960 --> 00:51:39,520
it's secured in terms of being

1456
00:51:39,520 --> 00:51:41,440
authenticated it's not encrypted

1457
00:51:41,440 --> 00:51:43,280
and it doesn't need to be encrypted

1458
00:51:43,280 --> 00:51:44,559
because there's very little

1459
00:51:44,559 --> 00:51:46,720
data leakage from the resolver to the

1460
00:51:46,720 --> 00:51:49,200
name servers with regard to what the uh

1461
00:51:49,200 --> 00:51:52,640
or who the clients actually are

1462
00:51:53,680 --> 00:51:56,240
so what's good about uh having a remote

1463
00:51:56,240 --> 00:51:57,680
resolver rather than running it all

1464
00:51:57,680 --> 00:51:58,640
locally on your

1465
00:51:58,640 --> 00:52:02,240
your machine well um remote resolvers

1466
00:52:02,240 --> 00:52:03,119
give you

1467
00:52:03,119 --> 00:52:05,760
excuse me remote resolvers give us good

1468
00:52:05,760 --> 00:52:06,800
caching

1469
00:52:06,800 --> 00:52:08,160
and because there's lots and lots of

1470
00:52:08,160 --> 00:52:10,319
clients talking to that one resolver

1471
00:52:10,319 --> 00:52:12,240
the data that you're looking up in the

1472
00:52:12,240 --> 00:52:14,400
uh against the resolver is likely to

1473
00:52:14,400 --> 00:52:16,079
already be there

1474
00:52:16,079 --> 00:52:20,319
and high possibility of uh of cachets

1475
00:52:20,319 --> 00:52:22,240
and you've got privacy and the

1476
00:52:22,240 --> 00:52:23,839
authorities learn very little about

1477
00:52:23,839 --> 00:52:25,839
delegated lookups they don't really know

1478
00:52:25,839 --> 00:52:28,000
who's querying the uh

1479
00:52:28,000 --> 00:52:30,160
[Music]

1480
00:52:30,160 --> 00:52:33,200
the specific name um and with q a

1481
00:52:33,200 --> 00:52:34,880
minimization they don't even know what

1482
00:52:34,880 --> 00:52:36,559
the specific name is they just know the

1483
00:52:36,559 --> 00:52:39,760
next zone down from themselves

1484
00:52:39,760 --> 00:52:41,760
and generally with enterprise level

1485
00:52:41,760 --> 00:52:43,680
resolvers you get low latency

1486
00:52:43,680 --> 00:52:46,319
most of them run on any cast addresses

1487
00:52:46,319 --> 00:52:47,920
so if they've got a reasonably

1488
00:52:47,920 --> 00:52:50,960
uh good data center spread then you're

1489
00:52:50,960 --> 00:52:51,839
likely to get

1490
00:52:51,839 --> 00:52:54,640
uh and get to talk to a local resolver

1491
00:52:54,640 --> 00:52:56,319
and have low latency

1492
00:52:56,319 --> 00:52:59,200
high availability of course um most of

1493
00:52:59,200 --> 00:53:00,880
these big dns

1494
00:53:00,880 --> 00:53:03,359
companies will have massive redundancy

1495
00:53:03,359 --> 00:53:04,880
and they're able to deal with

1496
00:53:04,880 --> 00:53:07,920
um most denial of service attacks that

1497
00:53:07,920 --> 00:53:09,520
uh that hit them

1498
00:53:09,520 --> 00:53:11,520
and of course security enhancements and

1499
00:53:11,520 --> 00:53:13,359
dns sec validation is just about

1500
00:53:13,359 --> 00:53:14,319
everywhere now

1501
00:53:14,319 --> 00:53:16,559
um unfortunately not all zones are dns

1502
00:53:16,559 --> 00:53:17,520
signed

1503
00:53:17,520 --> 00:53:21,040
but eventually that will come

1504
00:53:21,040 --> 00:53:22,720
but also a lot of these resolver

1505
00:53:22,720 --> 00:53:24,240
services will

1506
00:53:24,240 --> 00:53:26,000
protect you against things like malware

1507
00:53:26,000 --> 00:53:27,359
and phishing and

1508
00:53:27,359 --> 00:53:29,280
also doing content protection and that

1509
00:53:29,280 --> 00:53:31,839
sort of stuff

1510
00:53:32,880 --> 00:53:35,200
so the missing piece um well the bit

1511
00:53:35,200 --> 00:53:36,160
between the

1512
00:53:36,160 --> 00:53:38,640
and the stub or the client and the

1513
00:53:38,640 --> 00:53:39,839
resolver

1514
00:53:39,839 --> 00:53:42,240
is not secured it's not really secured

1515
00:53:42,240 --> 00:53:43,359
in any way

1516
00:53:43,359 --> 00:53:46,640
and so if your resolver is not local

1517
00:53:46,640 --> 00:53:48,800
then your traffic is going out in the

1518
00:53:48,800 --> 00:53:50,240
internet it's

1519
00:53:50,240 --> 00:53:54,079
um visible by everybody to everybody

1520
00:53:54,079 --> 00:53:56,400
there's no authentication the dns sec

1521
00:53:56,400 --> 00:53:58,079
adbit can't be trusted

1522
00:53:58,079 --> 00:53:59,599
well we can't really trust the data at

1523
00:53:59,599 --> 00:54:01,599
all because it can be attacked

1524
00:54:01,599 --> 00:54:03,680
and most of the queries go out these

1525
00:54:03,680 --> 00:54:04,720
days with uh

1526
00:54:04,720 --> 00:54:08,000
4k um buff sizes although that's being

1527
00:54:08,000 --> 00:54:09,520
addressed

1528
00:54:09,520 --> 00:54:11,280
early next month in the next couple of

1529
00:54:11,280 --> 00:54:12,640
days in fact

1530
00:54:12,640 --> 00:54:15,359
and by reducing that buff size down to

1531
00:54:15,359 --> 00:54:16,559
something more reasonable that will

1532
00:54:16,559 --> 00:54:18,720
avoid fragmentation

1533
00:54:18,720 --> 00:54:21,280
um but there's really no privacy and

1534
00:54:21,280 --> 00:54:22,559
everything's in plain sight

1535
00:54:22,559 --> 00:54:26,480
and you really don't know who's watching

1536
00:54:28,960 --> 00:54:32,000
so dns crypt to the rescue and dns crypt

1537
00:54:32,000 --> 00:54:34,400
is the piece that is

1538
00:54:34,400 --> 00:54:38,319
is there to plug that gap and dns crypt

1539
00:54:38,319 --> 00:54:39,839
is something that lives locally so it

1540
00:54:39,839 --> 00:54:41,359
might be a local network service

1541
00:54:41,359 --> 00:54:43,920
and some server in your local network

1542
00:54:43,920 --> 00:54:45,440
that

1543
00:54:45,440 --> 00:54:48,720
takes your plain text dns traffic and

1544
00:54:48,720 --> 00:54:50,240
encrypts it before saying that sending

1545
00:54:50,240 --> 00:54:51,040
it out in the

1546
00:54:51,040 --> 00:54:54,160
big bad internet it might be a local

1547
00:54:54,160 --> 00:54:55,520
process on your machine

1548
00:54:55,520 --> 00:54:58,640
so laptops may have local processors

1549
00:54:58,640 --> 00:54:59,599
that are doing this

1550
00:54:59,599 --> 00:55:02,480
uh dns script or it might even be built

1551
00:55:02,480 --> 00:55:04,160
into the stub library i don't

1552
00:55:04,160 --> 00:55:06,000
know of any implementations that do that

1553
00:55:06,000 --> 00:55:07,680
yet but that will be a nice thing in the

1554
00:55:07,680 --> 00:55:09,040
future

1555
00:55:09,040 --> 00:55:12,319
um dns crypt supports udp and tcp and so

1556
00:55:12,319 --> 00:55:13,200
it's very

1557
00:55:13,200 --> 00:55:16,240
dns like it's it doesn't try to do

1558
00:55:16,240 --> 00:55:19,920
dns over tcp or anything weird like that

1559
00:55:19,920 --> 00:55:20,880
and it allows

1560
00:55:20,880 --> 00:55:24,079
a 4k udp buff size um which is a really

1561
00:55:24,079 --> 00:55:25,440
good thing

1562
00:55:25,440 --> 00:55:27,440
if somebody does attack second and

1563
00:55:27,440 --> 00:55:28,720
subsequent fragments

1564
00:55:28,720 --> 00:55:30,400
well they're just going to spoil the

1565
00:55:30,400 --> 00:55:32,079
response they're not going to be able to

1566
00:55:32,079 --> 00:55:33,119
corrupt

1567
00:55:33,119 --> 00:55:37,319
or poison the response dnscript uses

1568
00:55:37,319 --> 00:55:40,240
et25519 and which is

1569
00:55:40,240 --> 00:55:42,640
relatively fast encryption it's the

1570
00:55:42,640 --> 00:55:44,160
fastest encryption option that we've got

1571
00:55:44,160 --> 00:55:45,599
these days

1572
00:55:45,599 --> 00:55:48,880
um it does mean that the cpu cost

1573
00:55:48,880 --> 00:55:51,599
is probably between two and three times

1574
00:55:51,599 --> 00:55:52,799
um

1575
00:55:52,799 --> 00:55:55,920
what it is at the moment um but

1576
00:55:55,920 --> 00:55:58,319
well that's that's the uh the price we

1577
00:55:58,319 --> 00:55:59,839
paid

1578
00:55:59,839 --> 00:56:02,319
and uh dns script has had no known

1579
00:56:02,319 --> 00:56:04,240
protocol vulnerabilities it was invented

1580
00:56:04,240 --> 00:56:05,359
in 2008

1581
00:56:05,359 --> 00:56:07,440
and nothing has ever been reported

1582
00:56:07,440 --> 00:56:09,920
against it

1583
00:56:10,720 --> 00:56:12,640
so i'll go into um describing exactly

1584
00:56:12,640 --> 00:56:14,319
what dns script is

1585
00:56:14,319 --> 00:56:17,119
and so dns crypts kind of has three

1586
00:56:17,119 --> 00:56:18,240
different players

1587
00:56:18,240 --> 00:56:20,720
um there's the provider the provider is

1588
00:56:20,720 --> 00:56:21,440
the uh

1589
00:56:21,440 --> 00:56:24,079
the the entity that owns the resolvers

1590
00:56:24,079 --> 00:56:27,040
and there might be multiple resolvers

1591
00:56:27,040 --> 00:56:29,520
um and then there's the resolver itself

1592
00:56:29,520 --> 00:56:31,119
and there's the client

1593
00:56:31,119 --> 00:56:33,280
and each of these entities has its own

1594
00:56:33,280 --> 00:56:34,480
key pair

1595
00:56:34,480 --> 00:56:38,240
so we're using public key encryption

1596
00:56:38,480 --> 00:56:41,520
in each of these places the provider key

1597
00:56:41,520 --> 00:56:42,480
is used

1598
00:56:42,480 --> 00:56:45,040
for signing and the other two keys are

1599
00:56:45,040 --> 00:56:46,240
used for encryption

1600
00:56:46,240 --> 00:56:48,240
the client and the resolver so the

1601
00:56:48,240 --> 00:56:49,760
client and

1602
00:56:49,760 --> 00:56:52,240
well the provider creates a provider

1603
00:56:52,240 --> 00:56:53,040
public key

1604
00:56:53,040 --> 00:56:56,400
he stores one half of it um privately

1605
00:56:56,400 --> 00:56:59,040
and he distributes the um the public

1606
00:56:59,040 --> 00:57:00,079
side to the client

1607
00:57:00,079 --> 00:57:02,480
and that client side will be used for

1608
00:57:02,480 --> 00:57:04,079
authentication

1609
00:57:04,079 --> 00:57:06,160
so what are the moving pieces um how

1610
00:57:06,160 --> 00:57:07,680
does this all kind of

1611
00:57:07,680 --> 00:57:10,880
uh play out in the real world and so it

1612
00:57:10,880 --> 00:57:12,240
starts with um

1613
00:57:12,240 --> 00:57:14,240
a very infrequent operation which is the

1614
00:57:14,240 --> 00:57:15,520
provider creating itself

1615
00:57:15,520 --> 00:57:18,319
a provider key so that might be done

1616
00:57:18,319 --> 00:57:18,720
once

1617
00:57:18,720 --> 00:57:21,760
every 10 15 years um

1618
00:57:21,760 --> 00:57:23,839
the provider will create this key pair

1619
00:57:23,839 --> 00:57:25,839
it will take its private key put it in

1620
00:57:25,839 --> 00:57:28,559
the safe somewhere and not let anybody

1621
00:57:28,559 --> 00:57:30,559
access it and then it will take the

1622
00:57:30,559 --> 00:57:32,079
public side of the key and it will

1623
00:57:32,079 --> 00:57:33,920
publicize it to as many clients as

1624
00:57:33,920 --> 00:57:37,680
possible stick it in its website etc

1625
00:57:38,240 --> 00:57:40,559
then once every few months or maybe at

1626
00:57:40,559 --> 00:57:41,599
most a year

1627
00:57:41,599 --> 00:57:43,359
and the provider will generate a new

1628
00:57:43,359 --> 00:57:45,119
resolver key pair so the resolver key

1629
00:57:45,119 --> 00:57:46,640
pair will be used for

1630
00:57:46,640 --> 00:57:50,640
encryption of resolver queries um

1631
00:57:50,640 --> 00:57:53,040
so the pro the resolver will install the

1632
00:57:53,040 --> 00:57:55,280
private parts on the resolver itself

1633
00:57:55,280 --> 00:57:57,520
and it will take the public part and it

1634
00:57:57,520 --> 00:57:59,440
will insert it into a thing called a dns

1635
00:57:59,440 --> 00:58:00,880
grid certificate

1636
00:58:00,880 --> 00:58:03,440
so dns certificate has lots of

1637
00:58:03,440 --> 00:58:04,960
interesting data in it but the most

1638
00:58:04,960 --> 00:58:06,240
interesting thing is the

1639
00:58:06,240 --> 00:58:09,040
resolver public key and that resolve a

1640
00:58:09,040 --> 00:58:11,119
public key is signed by the provider's

1641
00:58:11,119 --> 00:58:12,640
private key the one that he's stuck in

1642
00:58:12,640 --> 00:58:13,760
safe somewhere and

1643
00:58:13,760 --> 00:58:16,400
doesn't let anybody have access to so

1644
00:58:16,400 --> 00:58:18,640
he'll sign that public key and then

1645
00:58:18,640 --> 00:58:21,920
um distribute the public key for the um

1646
00:58:21,920 --> 00:58:22,240
or

1647
00:58:22,240 --> 00:58:24,880
the dns certificate with the public key

1648
00:58:24,880 --> 00:58:26,079
as part of dns

1649
00:58:26,079 --> 00:58:30,480
so it will be published as a dns text rr

1650
00:58:31,680 --> 00:58:34,720
so then from the client's perspective

1651
00:58:34,720 --> 00:58:36,480
the client wants to talk to the resolver

1652
00:58:36,480 --> 00:58:38,799
so every hour and this is based on the

1653
00:58:38,799 --> 00:58:39,440
um

1654
00:58:39,440 --> 00:58:42,480
the dns certificate text are our sets

1655
00:58:42,480 --> 00:58:45,040
ttl so every hour the client will

1656
00:58:45,040 --> 00:58:46,880
refresh that um

1657
00:58:46,880 --> 00:58:49,280
that rr set and we'll choose out of the

1658
00:58:49,280 --> 00:58:50,880
rr set its favorite key

1659
00:58:50,880 --> 00:58:53,119
so it's favorite key will usually be the

1660
00:58:53,119 --> 00:58:54,960
uh the key with the highest version

1661
00:58:54,960 --> 00:58:55,920
number

1662
00:58:55,920 --> 00:58:59,119
um well certainly the one that's uh and

1663
00:58:59,119 --> 00:59:00,960
that's got valid dates but

1664
00:59:00,960 --> 00:59:03,119
the one with validates and the highest

1665
00:59:03,119 --> 00:59:04,640
version number

1666
00:59:04,640 --> 00:59:06,880
and it will keep that in its back pocket

1667
00:59:06,880 --> 00:59:08,240
ready for

1668
00:59:08,240 --> 00:59:11,119
encrypting things and it's most or it's

1669
00:59:11,119 --> 00:59:13,359
only interested in the provider publicly

1670
00:59:13,359 --> 00:59:15,200
sorry the resolver publicly at this

1671
00:59:15,200 --> 00:59:17,040
point

1672
00:59:17,040 --> 00:59:20,079
so then periodically um once per session

1673
00:59:20,079 --> 00:59:22,000
but more often than not months for query

1674
00:59:22,000 --> 00:59:25,280
the client will generate a client keeper

1675
00:59:25,280 --> 00:59:27,440
so what the client then does as it talks

1676
00:59:27,440 --> 00:59:29,359
dns script to the resolver

1677
00:59:29,359 --> 00:59:31,920
it will encrypt every query that it

1678
00:59:31,920 --> 00:59:32,880
wants to send

1679
00:59:32,880 --> 00:59:35,359
using the resolver public key it will

1680
00:59:35,359 --> 00:59:36,400
add the

1681
00:59:36,400 --> 00:59:39,359
client public key to that that query and

1682
00:59:39,359 --> 00:59:41,599
it will send it off to the resolver

1683
00:59:41,599 --> 00:59:43,520
the resolver will then decrypt it using

1684
00:59:43,520 --> 00:59:45,520
its private key of course

1685
00:59:45,520 --> 00:59:48,480
and we'll go and find what the answer is

1686
00:59:48,480 --> 00:59:49,200
to that

1687
00:59:49,200 --> 00:59:51,520
that query and then it will take the

1688
00:59:51,520 --> 00:59:53,440
response and we'll encrypt it using the

1689
00:59:53,440 --> 00:59:55,040
client's public key

1690
00:59:55,040 --> 00:59:57,040
and send it back to the client the

1691
00:59:57,040 --> 00:59:59,040
client of course

1692
00:59:59,040 --> 01:00:00,960
owns the client private key and is able

1693
01:00:00,960 --> 01:00:02,480
to decrypt that

1694
01:00:02,480 --> 01:00:05,520
so we have a situation where the um

1695
01:00:05,520 --> 01:00:07,440
resolver is the only thing able to

1696
01:00:07,440 --> 01:00:09,920
decrypt the query and the client to see

1697
01:00:09,920 --> 01:00:11,359
anything able to decrypt

1698
01:00:11,359 --> 01:00:14,079
the response and all of the gory detail

1699
01:00:14,079 --> 01:00:16,160
can be found on the dns crypto info

1700
01:00:16,160 --> 01:00:19,200
um website

1701
01:00:20,240 --> 01:00:22,480
so what does this look like in real life

1702
01:00:22,480 --> 01:00:23,920
so um

1703
01:00:23,920 --> 01:00:25,920
as i said at the start i work for open

1704
01:00:25,920 --> 01:00:26,960
dns

1705
01:00:26,960 --> 01:00:29,520
back in the day in 2011 when we deployed

1706
01:00:29,520 --> 01:00:31,040
all of this stuff

1707
01:00:31,040 --> 01:00:33,680
we were just open dns and we started

1708
01:00:33,680 --> 01:00:36,079
encouraging all of our clients to

1709
01:00:36,079 --> 01:00:39,280
run dns script as a way of securing that

1710
01:00:39,280 --> 01:00:42,770
that last mile of dns traffic

1711
01:00:42,770 --> 01:00:44,640
[Music]

1712
01:00:44,640 --> 01:00:47,200
so in the last nine years we've been

1713
01:00:47,200 --> 01:00:48,400
pushing hard at this

1714
01:00:48,400 --> 01:00:52,079
and we've given all sorts of solutions

1715
01:00:52,079 --> 01:00:53,040
to clients

1716
01:00:53,040 --> 01:00:56,400
with respect to running uh

1717
01:00:56,400 --> 01:00:59,200
dns script services in their network or

1718
01:00:59,200 --> 01:01:01,119
on their local machines

1719
01:01:01,119 --> 01:01:02,799
and this is what our landscape currently

1720
01:01:02,799 --> 01:01:04,319
looks like and this is a

1721
01:01:04,319 --> 01:01:07,119
cross section of our dns servers so in

1722
01:01:07,119 --> 01:01:07,680
the

1723
01:01:07,680 --> 01:01:09,920
graph here you can see the graph goes

1724
01:01:09,920 --> 01:01:10,960
across one week

1725
01:01:10,960 --> 01:01:13,119
and the light blue at the bottom is our

1726
01:01:13,119 --> 01:01:14,640
unencrypted queries

1727
01:01:14,640 --> 01:01:16,000
the dark blue in the middle is our

1728
01:01:16,000 --> 01:01:18,240
encrypted queries and then the yellow at

1729
01:01:18,240 --> 01:01:20,000
the top is the authoritative

1730
01:01:20,000 --> 01:01:22,160
data that's being sent upstream which is

1731
01:01:22,160 --> 01:01:24,480
all of course unencrypted

1732
01:01:24,480 --> 01:01:26,960
um the people with good eyesight will be

1733
01:01:26,960 --> 01:01:28,240
able to see there are a few other

1734
01:01:28,240 --> 01:01:29,920
interesting things on this graph

1735
01:01:29,920 --> 01:01:33,359
um talking about a process called dnat

1736
01:01:33,359 --> 01:01:36,720
and that's um where our resolvers

1737
01:01:36,720 --> 01:01:38,400
talk to each other when they're having

1738
01:01:38,400 --> 01:01:41,200
difficulty resolving resolving queries

1739
01:01:41,200 --> 01:01:44,559
and that dna service also uses deep dns

1740
01:01:44,559 --> 01:01:46,960
script

1741
01:01:49,280 --> 01:01:53,200
so dns script what does it give us

1742
01:01:53,200 --> 01:01:56,000
so in our environment we basically see

1743
01:01:56,000 --> 01:01:58,000
that dns clip gives us privacy

1744
01:01:58,000 --> 01:02:00,559
and captured traffic can't be

1745
01:02:00,559 --> 01:02:01,359
interpreted

1746
01:02:01,359 --> 01:02:03,599
and the traffic between the client and

1747
01:02:03,599 --> 01:02:05,520
the resolver

1748
01:02:05,520 --> 01:02:08,640
is all encrypted and if it is captured

1749
01:02:08,640 --> 01:02:10,240
by anybody they can't

1750
01:02:10,240 --> 01:02:11,599
interpret it unless they have the

1751
01:02:11,599 --> 01:02:13,359
resolve a private key

1752
01:02:13,359 --> 01:02:15,280
and upstream traffic that goes from the

1753
01:02:15,280 --> 01:02:17,200
resolver to the

1754
01:02:17,200 --> 01:02:20,319
name servers is

1755
01:02:20,319 --> 01:02:22,960
um certainly visible but is not

1756
01:02:22,960 --> 01:02:23,920
necessarily

1757
01:02:23,920 --> 01:02:26,079
something that you can do with because

1758
01:02:26,079 --> 01:02:28,400
and there's no evidence

1759
01:02:28,400 --> 01:02:30,960
in the packet as to what the um who the

1760
01:02:30,960 --> 01:02:33,599
client is that we're asking for it

1761
01:02:33,599 --> 01:02:36,480
dns script gives us authentication um

1762
01:02:36,480 --> 01:02:38,240
the adbit can be trusted

1763
01:02:38,240 --> 01:02:41,280
so when we receive a dns set response

1764
01:02:41,280 --> 01:02:42,559
from a resolver

1765
01:02:42,559 --> 01:02:46,839
the id of adbit says if the data is

1766
01:02:46,839 --> 01:02:49,039
authenticated with independent data

1767
01:02:49,039 --> 01:02:53,440
and that can be trusted and people can

1768
01:02:53,440 --> 01:02:55,760
act accordingly with respect to dns

1769
01:02:55,760 --> 01:02:58,319
policies etc

1770
01:02:58,319 --> 01:03:00,000
and the most important thing is it gives

1771
01:03:00,000 --> 01:03:01,680
us administrative sanity

1772
01:03:01,680 --> 01:03:03,839
so there's no increased packet counts

1773
01:03:03,839 --> 01:03:05,200
and it's

1774
01:03:05,200 --> 01:03:07,119
pretty much the same sort of dns

1775
01:03:07,119 --> 01:03:08,720
protocol there there are

1776
01:03:08,720 --> 01:03:11,359
udp queries being sent out they all have

1777
01:03:11,359 --> 01:03:14,160
4k buffer sizes rather than

1778
01:03:14,160 --> 01:03:15,520
short buffer sizes to avoid

1779
01:03:15,520 --> 01:03:17,680
fragmentation but other than that

1780
01:03:17,680 --> 01:03:20,480
um if the response is too big then it's

1781
01:03:20,480 --> 01:03:20,880
uh

1782
01:03:20,880 --> 01:03:23,359
it's required over tcp as you'd expect

1783
01:03:23,359 --> 01:03:24,240
with normal

1784
01:03:24,240 --> 01:03:27,680
dns um all of the

1785
01:03:27,680 --> 01:03:30,960
um dns traffic or the dns crypt dns

1786
01:03:30,960 --> 01:03:31,599
traffic

1787
01:03:31,599 --> 01:03:34,960
um usually goes over port 443 but

1788
01:03:34,960 --> 01:03:36,480
certainly in our environment it can go

1789
01:03:36,480 --> 01:03:39,839
over port 5053 as well

1790
01:03:39,839 --> 01:03:43,839
um and one of the other nice things

1791
01:03:43,839 --> 01:03:44,319
about

1792
01:03:44,319 --> 01:03:45,839
dns script is the traffic is

1793
01:03:45,839 --> 01:03:47,839
identifiable each of the queries and the

1794
01:03:47,839 --> 01:03:49,280
responses have a magic

1795
01:03:49,280 --> 01:03:52,400
um first eight bytes in them so you can

1796
01:03:52,400 --> 01:03:53,200
actually uh

1797
01:03:53,200 --> 01:03:55,440
identify this traffic um even if it is

1798
01:03:55,440 --> 01:03:56,839
on port 443

1799
01:03:56,839 --> 01:04:00,160
and act accordingly in terms of

1800
01:04:00,160 --> 01:04:02,240
generating graphs and

1801
01:04:02,240 --> 01:04:04,879
statistics

1802
01:04:06,400 --> 01:04:09,839
so next steps um

1803
01:04:10,079 --> 01:04:14,160
yeah there's a site dns script.info i'd

1804
01:04:14,160 --> 01:04:15,599
encourage everybody to have a look at

1805
01:04:15,599 --> 01:04:16,240
that

1806
01:04:16,240 --> 01:04:19,359
um there's an implementations page

1807
01:04:19,359 --> 01:04:20,799
some of those implementations also

1808
01:04:20,799 --> 01:04:23,039
support do and dot

1809
01:04:23,039 --> 01:04:24,880
and and i'd encourage people to do

1810
01:04:24,880 --> 01:04:27,680
comparisons and dns crypt has a lot to

1811
01:04:27,680 --> 01:04:30,880
to offer as opposed to joe and dot which

1812
01:04:30,880 --> 01:04:31,440
are

1813
01:04:31,440 --> 01:04:33,680
producing a lot of waves in the

1814
01:04:33,680 --> 01:04:35,520
community at the moment

1815
01:04:35,520 --> 01:04:36,960
and there are a number of public

1816
01:04:36,960 --> 01:04:38,559
services available not just

1817
01:04:38,559 --> 01:04:41,359
the open dns resolvers and tons of

1818
01:04:41,359 --> 01:04:41,760
different

1819
01:04:41,760 --> 01:04:44,240
resolver implementations support dns

1820
01:04:44,240 --> 01:04:45,200
script

1821
01:04:45,200 --> 01:04:47,760
and most if not all of them are listed

1822
01:04:47,760 --> 01:04:48,720
here

1823
01:04:48,720 --> 01:04:50,799
and there's a faq there as well and

1824
01:04:50,799 --> 01:04:51,760
that's definitely

1825
01:04:51,760 --> 01:04:54,240
worth having a look at and what are the

1826
01:04:54,240 --> 01:04:55,520
next steps well

1827
01:04:55,520 --> 01:04:58,799
really i would like to work on getting a

1828
01:04:58,799 --> 01:05:00,079
dns script rfc

1829
01:05:00,079 --> 01:05:01,920
together it's one of the only things

1830
01:05:01,920 --> 01:05:03,520
that dns crypt has

1831
01:05:03,520 --> 01:05:06,720
never actually managed over the last

1832
01:05:06,720 --> 01:05:08,319
what 12 years that it's been in

1833
01:05:08,319 --> 01:05:10,880
existence

1834
01:05:11,039 --> 01:05:13,200
so a little early but um that's pretty

1835
01:05:13,200 --> 01:05:14,799
much all i've got so i'm

1836
01:05:14,799 --> 01:05:17,839
open for questions

1837
01:05:17,839 --> 01:05:20,559
thank you brian um so we have received a

1838
01:05:20,559 --> 01:05:22,720
couple questions and

1839
01:05:22,720 --> 01:05:25,599
i hope we'll get some more but paul

1840
01:05:25,599 --> 01:05:26,160
hoffman

1841
01:05:26,160 --> 01:05:29,680
is asking why do you feel that dns or

1842
01:05:29,680 --> 01:05:30,400
tls

1843
01:05:30,400 --> 01:05:36,559
is something weird like that

1844
01:05:36,559 --> 01:05:40,000
um sorry the dns server tls is

1845
01:05:40,000 --> 01:05:41,760
something weird like that uh i think he

1846
01:05:41,760 --> 01:05:43,359
refers to the

1847
01:05:43,359 --> 01:05:47,119
part about dna script using udp

1848
01:05:47,119 --> 01:05:51,280
and tcp um

1849
01:05:51,280 --> 01:05:54,000
and you mentioned that in a script is

1850
01:05:54,000 --> 01:05:56,960
not using something weird like that

1851
01:05:56,960 --> 01:06:00,640
oh um yeah so um i personally find it

1852
01:06:00,640 --> 01:06:02,880
um a bit strange to take something like

1853
01:06:02,880 --> 01:06:04,960
dns which is one of the protocols that

1854
01:06:04,960 --> 01:06:06,240
lives at the bottom layer of the

1855
01:06:06,240 --> 01:06:07,760
protocol stack

1856
01:06:07,760 --> 01:06:10,960
and yank it out of there and

1857
01:06:10,960 --> 01:06:13,920
place it over tcp which is a much higher

1858
01:06:13,920 --> 01:06:15,119
layer

1859
01:06:15,119 --> 01:06:18,319
and certainly dns talks over

1860
01:06:18,319 --> 01:06:22,240
udp and tcp as as we currently see it

1861
01:06:22,240 --> 01:06:24,319
and but putting everything over tcp with

1862
01:06:24,319 --> 01:06:26,720
a another protocol there in between

1863
01:06:26,720 --> 01:06:30,160
seems like the wrong way to go

1864
01:06:30,160 --> 01:06:32,799
okay thank you i hope it answers paul's

1865
01:06:32,799 --> 01:06:34,079
question

1866
01:06:34,079 --> 01:06:37,119
uh brett carr is asking obvious question

1867
01:06:37,119 --> 01:06:38,799
but do you think venus script is losing

1868
01:06:38,799 --> 01:06:41,119
its relevancy with the emergence of doh

1869
01:06:41,119 --> 01:06:42,000
and dod

1870
01:06:42,000 --> 01:06:44,160
do you think it should or can coexist

1871
01:06:44,160 --> 01:06:47,359
with the new kids on the block

1872
01:06:47,359 --> 01:06:51,039
um i would

1873
01:06:51,039 --> 01:06:53,680
i would like to think that it is a

1874
01:06:53,680 --> 01:06:54,720
competitor

1875
01:06:54,720 --> 01:06:58,799
and i think that the browser owners that

1876
01:06:58,799 --> 01:06:59,599
have created

1877
01:06:59,599 --> 01:07:01,680
things like dough are pushing it way

1878
01:07:01,680 --> 01:07:03,359
harder than dns script has ever been

1879
01:07:03,359 --> 01:07:04,400
pushed

1880
01:07:04,400 --> 01:07:06,880
and dns crypt has kind of lived in the

1881
01:07:06,880 --> 01:07:09,520
landscape for the last 12 years but

1882
01:07:09,520 --> 01:07:11,359
hasn't really gone anywhere my

1883
01:07:11,359 --> 01:07:12,960
understanding

1884
01:07:12,960 --> 01:07:14,640
is that there were politics around it

1885
01:07:14,640 --> 01:07:16,000
originally

1886
01:07:16,000 --> 01:07:18,799
and i don't have a great deal of

1887
01:07:18,799 --> 01:07:19,599
understanding

1888
01:07:19,599 --> 01:07:22,799
and most of it's hearsay um

1889
01:07:22,799 --> 01:07:24,799
but i'd like to kind of turn that around

1890
01:07:24,799 --> 01:07:27,520
and at least make it a viable candidate

1891
01:07:27,520 --> 01:07:31,039
to be honest i would like to see um

1892
01:07:31,039 --> 01:07:34,960
doe and dot lose to dns crypt

1893
01:07:34,960 --> 01:07:37,200
which is one of the reasons why i'm

1894
01:07:37,200 --> 01:07:38,799
talking here today

1895
01:07:38,799 --> 01:07:42,480
and just on the basis that i

1896
01:07:42,480 --> 01:07:45,599
do feel that it it makes the job of a

1897
01:07:45,599 --> 01:07:47,599
network operator very difficult

1898
01:07:47,599 --> 01:07:50,240
and it also completely circumvents the

1899
01:07:50,240 --> 01:07:51,119
ability to

1900
01:07:51,119 --> 01:07:54,720
do any dns level

1901
01:07:54,880 --> 01:07:58,319
security operations

1902
01:07:58,319 --> 01:08:00,640
okay thank you on that note i will

1903
01:08:00,640 --> 01:08:02,640
actually ask a question because you

1904
01:08:02,640 --> 01:08:04,480
mentioned in your talk that you think

1905
01:08:04,480 --> 01:08:06,000
that encryption between

1906
01:08:06,000 --> 01:08:08,880
resolver and alternative is not needed

1907
01:08:08,880 --> 01:08:09,440
and

1908
01:08:09,440 --> 01:08:12,480
dod definitely has or there are at least

1909
01:08:12,480 --> 01:08:13,599
some efforts

1910
01:08:13,599 --> 01:08:16,319
to encrypt between uh resolver and

1911
01:08:16,319 --> 01:08:17,759
authoritative

1912
01:08:17,759 --> 01:08:20,238
so do you think dns script as this would

1913
01:08:20,238 --> 01:08:21,439
be applicable to that

1914
01:08:21,439 --> 01:08:26,080
or would it require huge changes

1915
01:08:26,080 --> 01:08:29,120
um yeah so

1916
01:08:29,120 --> 01:08:32,080
so i guess the the issue about the way

1917
01:08:32,080 --> 01:08:34,158
dns script works is that the client

1918
01:08:34,158 --> 01:08:36,238
really needs to know upfront what the

1919
01:08:36,238 --> 01:08:38,158
provider key is otherwise it can't

1920
01:08:38,158 --> 01:08:40,880
trust the resolver key which is signed

1921
01:08:40,880 --> 01:08:42,560
by the provider

1922
01:08:42,560 --> 01:08:44,560
and so in in the scenario between the

1923
01:08:44,560 --> 01:08:45,839
resolver and the name

1924
01:08:45,839 --> 01:08:47,839
server dns script isn't terribly

1925
01:08:47,839 --> 01:08:49,920
appropriate there is another protocol

1926
01:08:49,920 --> 01:08:51,839
called dns curve which is way more

1927
01:08:51,839 --> 01:08:53,920
appropriate where the name of the name

1928
01:08:53,920 --> 01:08:56,960
server is the key

1929
01:08:56,960 --> 01:08:59,198
and

1930
01:09:00,238 --> 01:09:03,198
that is used for encryption and again

1931
01:09:03,198 --> 01:09:04,439
that's another

1932
01:09:04,439 --> 01:09:08,000
ec25519 algorithm and

1933
01:09:08,000 --> 01:09:10,880
we did support that and there seems to

1934
01:09:10,880 --> 01:09:12,080
be very lit

1935
01:09:12,080 --> 01:09:15,359
very few name servers um in the wild

1936
01:09:15,359 --> 01:09:16,479
that actually support it

1937
01:09:16,479 --> 01:09:18,560
and bjb who originally invented the

1938
01:09:18,560 --> 01:09:19,600
algorithm

1939
01:09:19,600 --> 01:09:22,640
seems to not support it anymore so

1940
01:09:22,640 --> 01:09:27,040
we've since disabled the dns curve in

1941
01:09:27,040 --> 01:09:29,759
our environment i think as a general

1942
01:09:29,759 --> 01:09:30,799
rule

1943
01:09:30,799 --> 01:09:33,679
communications between the resolver and

1944
01:09:33,679 --> 01:09:34,080
the

1945
01:09:34,080 --> 01:09:37,839
name servers and you could argue don't

1946
01:09:37,839 --> 01:09:41,679
need um encryption um

1947
01:09:41,679 --> 01:09:44,560
sorry i'll just stop my timer there and

1948
01:09:44,560 --> 01:09:46,399
they don't need encryption because

1949
01:09:46,399 --> 01:09:49,359
um as a general rule the the name server

1950
01:09:49,359 --> 01:09:51,279
doesn't know who the client is that's

1951
01:09:51,279 --> 01:09:52,000
querying

1952
01:09:52,000 --> 01:09:53,920
and with q name minimization all the

1953
01:09:53,920 --> 01:09:55,360
name server gets to see

1954
01:09:55,360 --> 01:09:58,159
is the next level down from a recursive

1955
01:09:58,159 --> 01:09:59,360
resolver

1956
01:09:59,360 --> 01:10:01,840
and so if i'm the com name server all

1957
01:10:01,840 --> 01:10:02,480
i'll see

1958
01:10:02,480 --> 01:10:06,960
is a query for opendns.com

1959
01:10:06,960 --> 01:10:08,800
and so i know that that resolver is

1960
01:10:08,800 --> 01:10:10,800
interested in opendns.com i have no

1961
01:10:10,800 --> 01:10:12,239
visibility into

1962
01:10:12,239 --> 01:10:15,679
where the client is going or

1963
01:10:15,679 --> 01:10:17,040
specifically the client is going or who

1964
01:10:17,040 --> 01:10:19,120
the client is and so

1965
01:10:19,120 --> 01:10:23,120
it's very um use useless information

1966
01:10:23,120 --> 01:10:26,159
and that's received the name server

1967
01:10:26,159 --> 01:10:29,360
encryption of course is is always better

1968
01:10:29,360 --> 01:10:30,400
than no encryption

1969
01:10:30,400 --> 01:10:32,960
so i i don't disagree with the dns curve

1970
01:10:32,960 --> 01:10:34,159
approach

1971
01:10:34,159 --> 01:10:37,199
if people want to hide that traffic okay

1972
01:10:37,199 --> 01:10:40,480
thank you uh why who sign what is the

1973
01:10:40,480 --> 01:10:42,480
adoption statistics of dns script how

1974
01:10:42,480 --> 01:10:44,640
many resolvers are using this

1975
01:10:44,640 --> 01:10:46,480
what about performance in the case as

1976
01:10:46,480 --> 01:10:50,080
compared to dlt and doh

1977
01:10:50,480 --> 01:10:51,600
there's actually a whole ton of

1978
01:10:51,600 --> 01:10:54,000
resolvers so you can see in this page

1979
01:10:54,000 --> 01:10:56,080
under many services there's a url that

1980
01:10:56,080 --> 01:10:57,280
lists all of the

1981
01:10:57,280 --> 01:11:01,280
public servers that that do this is

1982
01:11:01,280 --> 01:11:04,880
personally at home i use some software

1983
01:11:04,880 --> 01:11:06,640
called dns script

1984
01:11:06,640 --> 01:11:09,280
proxy and dns grip proxy comes with a

1985
01:11:09,280 --> 01:11:11,199
configuration file stuffed full of all

1986
01:11:11,199 --> 01:11:12,640
these public servers

1987
01:11:12,640 --> 01:11:14,239
and you can literally go through them

1988
01:11:14,239 --> 01:11:16,080
and decide which one you and you want to

1989
01:11:16,080 --> 01:11:17,040
use

1990
01:11:17,040 --> 01:11:19,920
and in terms of numbers there's there's

1991
01:11:19,920 --> 01:11:20,560
tens

1992
01:11:20,560 --> 01:11:24,880
of servers there and

1993
01:11:24,880 --> 01:11:26,960
so yeah i'd encourage people to have a

1994
01:11:26,960 --> 01:11:30,080
look at the the list

1995
01:11:30,960 --> 01:11:35,120
okay um did you answer the part about

1996
01:11:35,120 --> 01:11:35,920
performance

1997
01:11:35,920 --> 01:11:38,159
comparison videot on doh or do you want

1998
01:11:38,159 --> 01:11:40,239
to answer that um

1999
01:11:40,239 --> 01:11:42,560
yeah sure uh sorry i didn't hear that

2000
01:11:42,560 --> 01:11:44,400
piece um

2001
01:11:44,400 --> 01:11:47,600
yeah that's the uh and one of the

2002
01:11:47,600 --> 01:11:50,800
the downsides of using encryption and it

2003
01:11:50,800 --> 01:11:51,760
costs

2004
01:11:51,760 --> 01:11:55,760
um even ec25519 which dns encrypt uses

2005
01:11:55,760 --> 01:11:58,320
um it costs i would estimate between two

2006
01:11:58,320 --> 01:11:59,360
and three times

2007
01:11:59,360 --> 01:12:02,719
the amount of cpu to process a query

2008
01:12:02,719 --> 01:12:05,760
so that's the query and response traffic

2009
01:12:05,760 --> 01:12:10,080
encryption and decryption okay thank you

2010
01:12:10,080 --> 01:12:14,080
joe able is asking or commenting

2011
01:12:14,080 --> 01:12:15,679
there's an upswell of activity

2012
01:12:15,679 --> 01:12:17,360
implementing doh on

2013
01:12:17,360 --> 01:12:20,560
application endpoints in some cases with

2014
01:12:20,560 --> 01:12:22,080
extensive support in developer

2015
01:12:22,080 --> 01:12:23,040
frameworks

2016
01:12:23,040 --> 01:12:24,800
i haven't noticed as much interest in

2017
01:12:24,800 --> 01:12:27,440
dnascript what benefits does dnscrip

2018
01:12:27,440 --> 01:12:29,679
provide in the world where doh

2019
01:12:29,679 --> 01:12:32,000
is becoming prevalent you mentioned that

2020
01:12:32,000 --> 01:12:33,679
advantages exist but

2021
01:12:33,679 --> 01:12:37,600
not what they are

2022
01:12:37,600 --> 01:12:40,400
well i guess i mean again looking at the

2023
01:12:40,400 --> 01:12:42,880
dns crypto info site there are a bunch

2024
01:12:42,880 --> 01:12:44,480
of pros and cons for each of the

2025
01:12:44,480 --> 01:12:47,199
uh the protocols and it includes doh and

2026
01:12:47,199 --> 01:12:49,520
drt

2027
01:12:49,520 --> 01:12:52,000
i think one of the main things that's uh

2028
01:12:52,000 --> 01:12:52,640
that

2029
01:12:52,640 --> 01:12:54,719
kind of attracts me to dns script is

2030
01:12:54,719 --> 01:12:55,760
that it's

2031
01:12:55,760 --> 01:12:58,560
it doesn't um spoil the administrative

2032
01:12:58,560 --> 01:12:59,679
landscape

2033
01:12:59,679 --> 01:13:02,480
in that we still have um a client

2034
01:13:02,480 --> 01:13:03,600
talking to

2035
01:13:03,600 --> 01:13:06,480
a resolver and a resolver talking to a

2036
01:13:06,480 --> 01:13:08,480
set of name servers so dns crypt

2037
01:13:08,480 --> 01:13:11,920
just um owns that client to resolve our

2038
01:13:11,920 --> 01:13:15,679
data path and you can still see udp

2039
01:13:15,679 --> 01:13:16,640
traffic

2040
01:13:16,640 --> 01:13:18,800
and tcp traffic you can identify that as

2041
01:13:18,800 --> 01:13:20,159
being dns traffic

2042
01:13:20,159 --> 01:13:23,280
and you can block it and do any

2043
01:13:23,280 --> 01:13:24,719
administrative things that you want to

2044
01:13:24,719 --> 01:13:27,199
do with it

2045
01:13:27,280 --> 01:13:29,280
the thing i dislike about the the other

2046
01:13:29,280 --> 01:13:30,960
approaches and where we

2047
01:13:30,960 --> 01:13:33,520
we send everything over tcp from the

2048
01:13:33,520 --> 01:13:34,719
client

2049
01:13:34,719 --> 01:13:36,400
is that it's very difficult to police

2050
01:13:36,400 --> 01:13:38,480
that client and the client can connect

2051
01:13:38,480 --> 01:13:40,400
to anything it can do its queries over

2052
01:13:40,400 --> 01:13:41,360
anything

2053
01:13:41,360 --> 01:13:44,960
and really you know in in my kind of

2054
01:13:44,960 --> 01:13:48,080
view of the world where a resolver gets

2055
01:13:48,080 --> 01:13:50,320
an opportunity to provide security to

2056
01:13:50,320 --> 01:13:51,520
the client

2057
01:13:51,520 --> 01:13:54,400
well that's all gone the the the end

2058
01:13:54,400 --> 01:13:55,360
user or the

2059
01:13:55,360 --> 01:13:57,520
sorry the zone operator is the thing

2060
01:13:57,520 --> 01:13:59,040
that's actually

2061
01:13:59,040 --> 01:14:02,560
managing security the tcp

2062
01:14:02,560 --> 01:14:04,880
kind of approaches things like adaptive

2063
01:14:04,880 --> 01:14:06,719
dns

2064
01:14:06,719 --> 01:14:10,239
is even exploring the ability for

2065
01:14:10,239 --> 01:14:12,840
zone operators to publish things like

2066
01:14:12,840 --> 01:14:14,960
https

2067
01:14:14,960 --> 01:14:18,560
q type records that tell the client

2068
01:14:18,560 --> 01:14:20,880
which

2069
01:14:21,760 --> 01:14:26,480
dot or doe service to use as a resolver

2070
01:14:26,480 --> 01:14:28,000
which is appalling because that

2071
01:14:28,000 --> 01:14:30,159
completely circumvents any ability to do

2072
01:14:30,159 --> 01:14:31,280
any security

2073
01:14:31,280 --> 01:14:34,480
at the network level um but again we're

2074
01:14:34,480 --> 01:14:36,880
kind of moving into opinion rather than

2075
01:14:36,880 --> 01:14:38,640
anything else i think i think that the

2076
01:14:38,640 --> 01:14:40,640
the most thing i think i most like about

2077
01:14:40,640 --> 01:14:43,040
dns crypt is the fact that it's just

2078
01:14:43,040 --> 01:14:45,120
owning that that's hole in terms of

2079
01:14:45,120 --> 01:14:46,800
security rather than trying to replace

2080
01:14:46,800 --> 01:14:48,560
the protocol

2081
01:14:48,560 --> 01:14:52,159
okay thank you another question

2082
01:14:52,159 --> 01:14:55,040
is from red car why do you think there

2083
01:14:55,040 --> 01:14:56,000
has never been any

2084
01:14:56,000 --> 01:14:59,760
rfcs published for dnscript

2085
01:14:59,760 --> 01:15:01,280
well i mean there's there's lots of

2086
01:15:01,280 --> 01:15:03,520
congester conjecture around that

2087
01:15:03,520 --> 01:15:06,640
um my understanding is that back in the

2088
01:15:06,640 --> 01:15:07,679
day in

2089
01:15:07,679 --> 01:15:10,960
around 2010 david olivich who owned

2090
01:15:10,960 --> 01:15:14,400
open dns and had arguments with various

2091
01:15:14,400 --> 01:15:15,679
members of dnso

2092
01:15:15,679 --> 01:15:19,600
arc and and decided to kind of step

2093
01:15:19,600 --> 01:15:21,840
back from the whole open source

2094
01:15:21,840 --> 01:15:23,440
community thing

2095
01:15:23,440 --> 01:15:26,800
and i'm not really sure how much

2096
01:15:26,800 --> 01:15:30,239
dns crypt was open dns only at the time

2097
01:15:30,239 --> 01:15:34,080
but it seemed to me that that he kind of

2098
01:15:34,080 --> 01:15:36,000
basically threw his toys out of the pram

2099
01:15:36,000 --> 01:15:37,199
and and

2100
01:15:37,199 --> 01:15:39,840
wouldn't play with anybody and ever

2101
01:15:39,840 --> 01:15:40,800
since then

2102
01:15:40,800 --> 01:15:44,480
no d no rc has been has been written

2103
01:15:44,480 --> 01:15:46,800
and this is conjecture this is entirely

2104
01:15:46,800 --> 01:15:48,080
my own opinion though so

2105
01:15:48,080 --> 01:15:51,600
um please don't uh um

2106
01:15:51,600 --> 01:15:53,760
don't take that with a pinch of salt

2107
01:15:53,760 --> 01:15:55,679
basically

2108
01:15:55,679 --> 01:15:59,120
okay thank you uh we have i think

2109
01:15:59,120 --> 01:16:01,679
three more questions and some more are

2110
01:16:01,679 --> 01:16:02,159
coming

2111
01:16:02,159 --> 01:16:03,679
so i will just close the mic line

2112
01:16:03,679 --> 01:16:06,640
because uh we are running out of time

2113
01:16:06,640 --> 01:16:09,520
but the next question is by uh paul

2114
01:16:09,520 --> 01:16:11,040
musheen muchin sorry

2115
01:16:11,040 --> 01:16:13,440
maybe i'm mispronouncing it uh any

2116
01:16:13,440 --> 01:16:14,880
vulnerabilities discovered in data

2117
01:16:14,880 --> 01:16:16,560
script so far

2118
01:16:16,560 --> 01:16:18,960
for example an attempt to decipher the

2119
01:16:18,960 --> 01:16:20,800
encrypted queries using crypto analysis

2120
01:16:20,800 --> 01:16:23,920
or side channel attacks

2121
01:16:23,920 --> 01:16:27,520
um so i did

2122
01:16:27,679 --> 01:16:30,719
there is a paragraph on wikipedia that

2123
01:16:30,719 --> 01:16:32,080
claims that there have been no known

2124
01:16:32,080 --> 01:16:34,000
vulnerabilities in dns

2125
01:16:34,000 --> 01:16:37,280
corrupt since its inception in 2008

2126
01:16:37,280 --> 01:16:40,560
um i haven't heard of any um i don't

2127
01:16:40,560 --> 01:16:42,640
know of any side channel attacks

2128
01:16:42,640 --> 01:16:45,280
um apart from actually doing some sort

2129
01:16:45,280 --> 01:16:49,360
of social attack to try to obtain the uh

2130
01:16:49,360 --> 01:16:52,159
the keys that are necessary and maybe

2131
01:16:52,159 --> 01:16:52,719
getting the

2132
01:16:52,719 --> 01:16:55,600
getting your hands in the private

2133
01:16:55,600 --> 01:16:57,040
provider private key and

2134
01:16:57,040 --> 01:16:59,440
and generating certificates to use up

2135
01:16:59,440 --> 01:17:01,199
the existing ones

2136
01:17:01,199 --> 01:17:03,679
um or getting into a resolver and

2137
01:17:03,679 --> 01:17:04,400
stealing

2138
01:17:04,400 --> 01:17:08,719
its private key and the protocol itself

2139
01:17:08,719 --> 01:17:11,280
i don't believe well i don't know of any

2140
01:17:11,280 --> 01:17:13,520
attacks that have been made against it

2141
01:17:13,520 --> 01:17:16,719
okay thank you uh samuel wheeler is

2142
01:17:16,719 --> 01:17:17,920
asking

2143
01:17:17,920 --> 01:17:19,280
how does a resolver know that they

2144
01:17:19,280 --> 01:17:21,120
should expect the resolver to speak dns

2145
01:17:21,120 --> 01:17:22,800
script or how do you prevent downgrade

2146
01:17:22,800 --> 01:17:24,880
attacks

2147
01:17:24,880 --> 01:17:27,840
um the resolver and code path inside the

2148
01:17:27,840 --> 01:17:28,719
resolver is

2149
01:17:28,719 --> 01:17:32,080
is remarkably simple to uh to process

2150
01:17:32,080 --> 01:17:35,280
so this the first eight bytes of a dns

2151
01:17:35,280 --> 01:17:36,080
quick query

2152
01:17:36,080 --> 01:17:37,600
and the first eight bytes of the dns

2153
01:17:37,600 --> 01:17:39,679
script response will have some magic in

2154
01:17:39,679 --> 01:17:40,400
them

2155
01:17:40,400 --> 01:17:42,400
so the queries always start with q and

2156
01:17:42,400 --> 01:17:44,320
then seven other characters

2157
01:17:44,320 --> 01:17:48,560
and that's um that kind of magic string

2158
01:17:48,560 --> 01:17:51,520
is based on the dns script um or on the

2159
01:17:51,520 --> 01:17:52,719
resolver public key

2160
01:17:52,719 --> 01:17:54,320
well actually on the dns crit

2161
01:17:54,320 --> 01:17:56,480
certificate and

2162
01:17:56,480 --> 01:17:58,000
so generally the resolver will be

2163
01:17:58,000 --> 01:17:59,760
configured to know about

2164
01:17:59,760 --> 01:18:02,000
specific query magics that it

2165
01:18:02,000 --> 01:18:03,440
understands

2166
01:18:03,440 --> 01:18:05,440
and then it takes the packet and it

2167
01:18:05,440 --> 01:18:07,280
attempts to decrypt it and if it manages

2168
01:18:07,280 --> 01:18:08,239
to decrypt it

2169
01:18:08,239 --> 01:18:10,400
it's good and if it doesn't manage to

2170
01:18:10,400 --> 01:18:12,159
decrypt it then it has a look and

2171
01:18:12,159 --> 01:18:14,000
tries to interpret it as a regular dns

2172
01:18:14,000 --> 01:18:15,280
packet

2173
01:18:15,280 --> 01:18:17,360
um and it's as simple as that and the

2174
01:18:17,360 --> 01:18:19,199
client of course

2175
01:18:19,199 --> 01:18:22,320
will then use the response magic to

2176
01:18:22,320 --> 01:18:25,040
know that it's dns script and should be

2177
01:18:25,040 --> 01:18:25,840
behaving

2178
01:18:25,840 --> 01:18:27,840
in a way that says well i sent a query

2179
01:18:27,840 --> 01:18:30,320
encrypted it must be

2180
01:18:30,320 --> 01:18:33,360
encrypted in the response okay

2181
01:18:33,360 --> 01:18:36,400
thank you uh brian wickinson uh

2182
01:18:36,400 --> 01:18:37,920
the data is encrypted directly with the

2183
01:18:37,920 --> 01:18:40,159
public key of the resolver there is no

2184
01:18:40,159 --> 01:18:43,120
perfect forward secret say unlike the

2185
01:18:43,120 --> 01:18:45,440
dox protocols

2186
01:18:45,440 --> 01:18:47,679
this means future loss of the private

2187
01:18:47,679 --> 01:18:49,920
key exposes all past capture traffic

2188
01:18:49,920 --> 01:18:53,120
any comment on this risk

2189
01:18:53,120 --> 01:18:55,120
um yeah it's something that's worried me

2190
01:18:55,120 --> 01:18:56,640
in the past and

2191
01:18:56,640 --> 01:18:59,760
and i've developed some uh some

2192
01:18:59,760 --> 01:19:01,760
utilities to kind of help in the process

2193
01:19:01,760 --> 01:19:03,040
around that

2194
01:19:03,040 --> 01:19:06,080
um i think as a general rule when

2195
01:19:06,080 --> 01:19:07,440
encryption is involved

2196
01:19:07,440 --> 01:19:10,320
there is a problem with losing your keys

2197
01:19:10,320 --> 01:19:11,040
or

2198
01:19:11,040 --> 01:19:14,640
or compromising your keys in some way

2199
01:19:14,640 --> 01:19:17,840
and there is no date

2200
01:19:17,840 --> 01:19:20,640
per se on the private key or the

2201
01:19:20,640 --> 01:19:22,159
provider key

2202
01:19:22,159 --> 01:19:26,879
and so it's similar in a way to um

2203
01:19:27,600 --> 01:19:30,880
dns dns sec i guess in that

2204
01:19:30,880 --> 01:19:34,800
if you generate some ksk and then

2205
01:19:34,800 --> 01:19:36,719
divulge that information to somebody

2206
01:19:36,719 --> 01:19:39,440
else they can own your domain

2207
01:19:39,440 --> 01:19:42,159
and you're only well i guess in the

2208
01:19:42,159 --> 01:19:44,560
dnsec world you can then contact your

2209
01:19:44,560 --> 01:19:47,840
your registrar and

2210
01:19:48,080 --> 01:19:52,159
use real words to actually reuse

2211
01:19:52,159 --> 01:19:55,600
regain control of that domain um

2212
01:19:55,600 --> 01:19:57,280
i don't have any great answer for this

2213
01:19:57,280 --> 01:19:59,840
in the the dns script world

2214
01:19:59,840 --> 01:20:02,400
and if people continue to trust that old

2215
01:20:02,400 --> 01:20:04,239
provider key and the provider key

2216
01:20:04,239 --> 01:20:06,800
becomes compromised there's no clean way

2217
01:20:06,800 --> 01:20:08,080
of

2218
01:20:08,080 --> 01:20:10,800
kind of revoking that provider public

2219
01:20:10,800 --> 01:20:13,040
key

2220
01:20:13,679 --> 01:20:16,000
okay thank you and as we are over the

2221
01:20:16,000 --> 01:20:16,960
time

2222
01:20:16,960 --> 01:20:18,960
i will allow one more question which is

2223
01:20:18,960 --> 01:20:20,000
by

2224
01:20:20,000 --> 01:20:23,600
eric z gast in countries countries where

2225
01:20:23,600 --> 01:20:25,199
government monitoring is common or

2226
01:20:25,199 --> 01:20:26,080
required do

2227
01:20:26,080 --> 01:20:28,880
find that white era dns crypt traffic is

2228
01:20:28,880 --> 01:20:32,000
routinely blocked

2229
01:20:32,000 --> 01:20:35,920
um the only experience i've i've seen of

2230
01:20:35,920 --> 01:20:37,520
dns crypts being blocked

2231
01:20:37,520 --> 01:20:40,639
is um i believe

2232
01:20:40,639 --> 01:20:44,400
um areas in china probably all of china

2233
01:20:44,400 --> 01:20:47,760
and that will and block um

2234
01:20:47,760 --> 01:20:52,000
certain ports or try to use up um

2235
01:20:52,000 --> 01:20:55,440
queries to certain ip numbers and

2236
01:20:55,440 --> 01:20:58,159
our marketing people have um have played

2237
01:20:58,159 --> 01:20:59,679
with that in terms of us

2238
01:20:59,679 --> 01:21:01,199
listening on different ports so that

2239
01:21:01,199 --> 01:21:02,880
they can kind of squeeze information

2240
01:21:02,880 --> 01:21:06,400
by that that won't be seen by the uh

2241
01:21:06,400 --> 01:21:10,159
and the country in question um

2242
01:21:10,159 --> 01:21:14,000
yeah i mean dns curve can talk on on

2243
01:21:14,000 --> 01:21:15,520
whatever port you want to configure it

2244
01:21:15,520 --> 01:21:18,000
to talk on and really that's that's your

2245
01:21:18,000 --> 01:21:18,960
your recourse

2246
01:21:18,960 --> 01:21:22,239
um yeah um

2247
01:21:22,239 --> 01:21:24,239
i don't really have a better answer than

2248
01:21:24,239 --> 01:21:25,600
that

2249
01:21:25,600 --> 01:21:27,360
it's fine thank you thank you a lot uh

2250
01:21:27,360 --> 01:21:28,960
thank you for your presentation and also

2251
01:21:28,960 --> 01:21:29,760
for answering

2252
01:21:29,760 --> 01:21:33,040
our questions so extensively

2253
01:21:33,040 --> 01:21:36,400
and with that we will go

2254
01:21:36,400 --> 01:21:39,679
to the next presentation which is a

2255
01:21:39,679 --> 01:21:41,440
presentation titled a new traffic

2256
01:21:41,440 --> 01:21:43,760
capture and visualization tool

2257
01:21:43,760 --> 01:21:47,760
for imrs by jim hake

2258
01:21:47,760 --> 01:21:50,960
so jim if you're ready

2259
01:21:51,360 --> 01:21:54,719
nice yes thanks uh yeah awesome

2260
01:21:54,719 --> 01:21:56,239
all right can you hear this can you see

2261
01:21:56,239 --> 01:21:57,760
the slides

2262
01:21:57,760 --> 01:21:59,199
oh it's good i can see the slice and i

2263
01:21:59,199 --> 01:22:00,800
can hear you excellent

2264
01:22:00,800 --> 01:22:03,600
well let's get going one last one last

2265
01:22:03,600 --> 01:22:04,639
talk for the day

2266
01:22:04,639 --> 01:22:06,880
i'm going to be talking on a new traffic

2267
01:22:06,880 --> 01:22:09,760
capture and visualization tool for nrs

2268
01:22:09,760 --> 01:22:11,840
my name is jim hague i'm one of the team

2269
01:22:11,840 --> 01:22:12,960
at cinema

2270
01:22:12,960 --> 01:22:15,760
so without any further ado let's get

2271
01:22:15,760 --> 01:22:16,960
underway

2272
01:22:16,960 --> 01:22:20,159
um let's quick overview of what i'm

2273
01:22:20,159 --> 01:22:21,840
going to be talking about today first of

2274
01:22:21,840 --> 01:22:23,360
all we better get the question of

2275
01:22:23,360 --> 01:22:26,639
what is imrs out of the way imrs

2276
01:22:26,639 --> 01:22:30,159
is the icann managed root server

2277
01:22:30,159 --> 01:22:32,159
for those in the dns world this is the

2278
01:22:32,159 --> 01:22:33,920
root server you will formally know

2279
01:22:33,920 --> 01:22:38,080
as elrod we're capturing traffic

2280
01:22:38,080 --> 01:22:42,080
on for iron imrs

2281
01:22:42,080 --> 01:22:45,440
and writing it to cdns files

2282
01:22:45,440 --> 01:22:48,159
cdns being a cbore based dns specific

2283
01:22:48,159 --> 01:22:50,400
file format for traffic capture

2284
01:22:50,400 --> 01:22:52,400
which pairs queries and responses and

2285
01:22:52,400 --> 01:22:53,440
indexes

2286
01:22:53,440 --> 01:22:56,480
uh common data we're using this

2287
01:22:56,480 --> 01:22:59,520
because it generates much smaller files

2288
01:22:59,520 --> 01:23:01,760
than pcapp but with most of the same

2289
01:23:01,760 --> 01:23:03,440
information

2290
01:23:03,440 --> 01:23:07,120
and finally we're visualizing the data

2291
01:23:07,120 --> 01:23:09,360
by importing it into the click house

2292
01:23:09,360 --> 01:23:10,800
online analytic

2293
01:23:10,800 --> 01:23:13,840
database and displaying in grafana

2294
01:23:13,840 --> 01:23:15,679
and at this point i'll just note that

2295
01:23:15,679 --> 01:23:17,520
aggregation of data

2296
01:23:17,520 --> 01:23:19,440
is an important factor here and we'll be

2297
01:23:19,440 --> 01:23:20,960
talking more about that

2298
01:23:20,960 --> 01:23:25,040
later on a bit of background

2299
01:23:25,040 --> 01:23:27,920
on the project um senator and we here at

2300
01:23:27,920 --> 01:23:30,239
synodon contract for the icann dns

2301
01:23:30,239 --> 01:23:31,280
engineering team

2302
01:23:31,280 --> 01:23:34,800
the team responsible for managing imrs

2303
01:23:34,800 --> 01:23:37,280
traffic capture is all done by open

2304
01:23:37,280 --> 01:23:40,000
source code developed through dns stats

2305
01:23:40,000 --> 01:23:42,159
and historically this function has been

2306
01:23:42,159 --> 01:23:44,719
performed by using a combination of

2307
01:23:44,719 --> 01:23:48,719
dsc so dscxml files

2308
01:23:48,719 --> 01:23:51,199
some pcap and a previous synod and

2309
01:23:51,199 --> 01:23:52,960
solution hedgehog

2310
01:23:52,960 --> 01:23:56,320
however imrs has now migrated to

2311
01:23:56,320 --> 01:24:00,000
an end-to-end system cdns to click house

2312
01:24:00,000 --> 01:24:04,080
to grafana uh i presented cdns

2313
01:24:04,080 --> 01:24:07,880
back in dear oh dear pre-covered days at

2314
01:24:07,880 --> 01:24:09,679
oarc29

2315
01:24:09,679 --> 01:24:12,400
the only major update we have on the

2316
01:24:12,400 --> 01:24:14,159
state of the cdns since that

2317
01:24:14,159 --> 01:24:15,040
presentation

2318
01:24:15,040 --> 01:24:18,320
is the cdns rfc rfc 8618

2319
01:24:18,320 --> 01:24:21,600
was published month or two after uh

2320
01:24:21,600 --> 01:24:25,120
oauth 29 as in september

2321
01:24:25,120 --> 01:24:28,239
2019. today's talk i'm going to focus

2322
01:24:28,239 --> 01:24:30,480
more on the full solution if you want to

2323
01:24:30,480 --> 01:24:32,560
know more specifically about cdns i

2324
01:24:32,560 --> 01:24:34,239
suggest you go and look at

2325
01:24:34,239 --> 01:24:38,159
look up the talk from our 29

2326
01:24:39,120 --> 01:24:42,159
so a brief overview

2327
01:24:42,159 --> 01:24:45,199
of imrs because cgns was designed

2328
01:24:45,199 --> 01:24:47,120
specifically to target

2329
01:24:47,120 --> 01:24:50,800
the use case for imrs

2330
01:24:50,800 --> 01:24:55,280
imrs is roughly 280

2331
01:24:55,280 --> 01:24:59,600
hosted servers in

2332
01:24:59,600 --> 01:25:01,920
we i'm describing it here as challenging

2333
01:25:01,920 --> 01:25:03,199
environments

2334
01:25:03,199 --> 01:25:05,440
um the servers are grouped into roughly

2335
01:25:05,440 --> 01:25:06,639
170

2336
01:25:06,639 --> 01:25:09,360
we call them instances in different

2337
01:25:09,360 --> 01:25:10,560
locations

2338
01:25:10,560 --> 01:25:13,760
and they are icann servers but installed

2339
01:25:13,760 --> 01:25:18,960
into a donor data center

2340
01:25:18,960 --> 01:25:21,679
and at the time at present the total

2341
01:25:21,679 --> 01:25:22,400
traffic

2342
01:25:22,400 --> 01:25:25,760
uh captured through imrs is in the order

2343
01:25:25,760 --> 01:25:28,000
of 17 billion queries

2344
01:25:28,000 --> 01:25:31,199
every day now a bit more about why i

2345
01:25:31,199 --> 01:25:33,440
describe the environment as challenging

2346
01:25:33,440 --> 01:25:35,840
well the big thing here is that all data

2347
01:25:35,840 --> 01:25:36,639
collection

2348
01:25:36,639 --> 01:25:39,920
is happening on the same hardware as the

2349
01:25:39,920 --> 01:25:40,239
name

2350
01:25:40,239 --> 01:25:43,440
server that hardware is typically a one

2351
01:25:43,440 --> 01:25:43,920
ru

2352
01:25:43,920 --> 01:25:46,719
server the job of that server obviously

2353
01:25:46,719 --> 01:25:47,760
is primarily

2354
01:25:47,760 --> 01:25:51,440
to run the name server so it's important

2355
01:25:51,440 --> 01:25:53,600
that data collection which is a

2356
01:25:53,600 --> 01:25:56,719
secondary activity

2357
01:25:56,719 --> 01:25:58,239
there is it's important there is a

2358
01:25:58,239 --> 01:26:01,920
minimal resource conflict

2359
01:26:01,920 --> 01:26:05,280
further the collected data is stored

2360
01:26:05,280 --> 01:26:08,480
on the same hardware again as the name

2361
01:26:08,480 --> 01:26:12,320
server and periodically upload it

2362
01:26:12,320 --> 01:26:16,639
to what's icon servers and that upload

2363
01:26:16,639 --> 01:26:19,679
is also constrained to use the same

2364
01:26:19,679 --> 01:26:22,639
network interface as is being used to

2365
01:26:22,639 --> 01:26:23,600
serve

2366
01:26:23,600 --> 01:26:27,280
the dns traffic so therefore

2367
01:26:27,280 --> 01:26:30,320
it's important that

2368
01:26:30,320 --> 01:26:33,280
as well as resources on the server that

2369
01:26:33,280 --> 01:26:35,199
the size of the uploads

2370
01:26:35,199 --> 01:26:39,520
is kept to the minimum practical

2371
01:26:39,520 --> 01:26:41,600
and if we have a quick overview quick

2372
01:26:41,600 --> 01:26:44,000
look at what cdns does for your file

2373
01:26:44,000 --> 01:26:44,719
sizes

2374
01:26:44,719 --> 01:26:48,400
i'm presenting here tables of file sizes

2375
01:26:48,400 --> 01:26:51,920
against pcap um

2376
01:26:51,920 --> 01:26:54,080
now you will notice that obviously there

2377
01:26:54,080 --> 01:26:56,480
is a huge difference in size between

2378
01:26:56,480 --> 01:26:58,800
raw uncompressed cv and sn raw and

2379
01:26:58,800 --> 01:27:00,480
compressed pcap

2380
01:27:00,480 --> 01:27:03,920
um however importantly um of course

2381
01:27:03,920 --> 01:27:04,800
everybody

2382
01:27:04,800 --> 01:27:06,560
uses general purpose compression to

2383
01:27:06,560 --> 01:27:08,320
compress pcap

2384
01:27:08,320 --> 01:27:11,920
and cdns maintains a size advantage

2385
01:27:11,920 --> 01:27:15,760
a notable size advantage um even when

2386
01:27:15,760 --> 01:27:19,199
compressed quite strongly with

2387
01:27:19,199 --> 01:27:23,520
the example here is xz um

2388
01:27:23,520 --> 01:27:25,440
the important points here are first of

2389
01:27:25,440 --> 01:27:27,440
all that cdns

2390
01:27:27,440 --> 01:27:30,639
after compression is still only 30 40

2391
01:27:30,639 --> 01:27:34,880
of the size of the equivalent p cap

2392
01:27:34,880 --> 01:27:38,080
and just as important the amount of cpu

2393
01:27:38,080 --> 01:27:41,280
required to do that compression is a lot

2394
01:27:41,280 --> 01:27:42,000
smaller

2395
01:27:42,000 --> 01:27:44,320
than required to compress pcap because

2396
01:27:44,320 --> 01:27:46,159
cdns has already

2397
01:27:46,159 --> 01:27:49,360
aggregated and commoned up a lot of the

2398
01:27:49,360 --> 01:27:50,800
data that you're compressing the

2399
01:27:50,800 --> 01:27:54,080
compressor has less to do

2400
01:27:54,719 --> 01:27:57,840
implementation status for cdns if you go

2401
01:27:57,840 --> 01:27:59,840
to the dns stats github you'll find a

2402
01:27:59,840 --> 01:28:01,280
project compactor

2403
01:28:01,280 --> 01:28:04,639
and compact has two components

2404
01:28:04,639 --> 01:28:07,520
the autonomously named compactor program

2405
01:28:07,520 --> 01:28:09,280
which is responsible for capturing and

2406
01:28:09,280 --> 01:28:10,480
compressing traffic

2407
01:28:10,480 --> 01:28:14,080
to cdms format and it will also

2408
01:28:14,080 --> 01:28:17,199
perform a general purpose compression

2409
01:28:17,199 --> 01:28:21,600
as well uh traffic capture is either

2410
01:28:21,600 --> 01:28:24,800
off the network or it can convert pcap

2411
01:28:24,800 --> 01:28:26,000
files

2412
01:28:26,000 --> 01:28:28,800
and its counterpart inspector reads cdns

2413
01:28:28,800 --> 01:28:29,520
files

2414
01:28:29,520 --> 01:28:32,159
um and can produce two types of output

2415
01:28:32,159 --> 01:28:33,679
the primary

2416
01:28:33,679 --> 01:28:36,159
type i'm going to talk about today is

2417
01:28:36,159 --> 01:28:38,639
templated text output

2418
01:28:38,639 --> 01:28:40,480
which we use to generate files for

2419
01:28:40,480 --> 01:28:43,600
imports to a database you supply a text

2420
01:28:43,600 --> 01:28:46,159
template with field values in it

2421
01:28:46,159 --> 01:28:48,880
and the contents of that text template

2422
01:28:48,880 --> 01:28:50,960
are produced for every single

2423
01:28:50,960 --> 01:28:54,239
cdns record cdns record is a

2424
01:28:54,239 --> 01:28:57,280
query and response pair

2425
01:28:57,280 --> 01:29:00,280
inspector can also perform a pcap

2426
01:29:00,280 --> 01:29:02,159
reconstruction

2427
01:29:02,159 --> 01:29:04,400
which is important in this context

2428
01:29:04,400 --> 01:29:05,840
because

2429
01:29:05,840 --> 01:29:08,880
octo requires us to supply them with

2430
01:29:08,880 --> 01:29:10,639
keycap files i've described this as

2431
01:29:10,639 --> 01:29:11,360
lossy

2432
01:29:11,360 --> 01:29:13,600
in this particular case it's lossy in

2433
01:29:13,600 --> 01:29:14,719
the same at the

2434
01:29:14,719 --> 01:29:17,440
transport level we so for example we do

2435
01:29:17,440 --> 01:29:18,960
not precisely recreate

2436
01:29:18,960 --> 01:29:22,560
tcp sessions we will create a tcp

2437
01:29:22,560 --> 01:29:24,639
session when regenerating the pcap but

2438
01:29:24,639 --> 01:29:27,040
it won't necessarily match the original

2439
01:29:27,040 --> 01:29:29,600
key conversation um and just for the

2440
01:29:29,600 --> 01:29:30,239
sake of

2441
01:29:30,239 --> 01:29:33,440
full disclosure currently the version of

2442
01:29:33,440 --> 01:29:34,239
compact

2443
01:29:34,239 --> 01:29:39,440
running on imrs is a pre 1.0

2444
01:29:39,440 --> 01:29:44,080
release that supports a pre-roc

2445
01:29:44,080 --> 01:29:47,920
draft cdns format uh however it's been

2446
01:29:47,920 --> 01:29:49,760
some months now since we released

2447
01:29:49,760 --> 01:29:53,040
version 1.0 of compactor which writes

2448
01:29:53,040 --> 01:29:56,560
the rfc format and the 1.0 version of

2449
01:29:56,560 --> 01:29:57,440
inspector

2450
01:29:57,440 --> 01:30:00,000
reads both the rfc format and previous

2451
01:30:00,000 --> 01:30:00,639
draft

2452
01:30:00,639 --> 01:30:03,280
formats and we will be transitioning

2453
01:30:03,280 --> 01:30:08,400
imrs to using the 1.0 in the near future

2454
01:30:08,800 --> 01:30:12,080
so a quick overview

2455
01:30:12,080 --> 01:30:15,760
of the entire processing chain

2456
01:30:15,760 --> 01:30:18,800
that i'm talking about today so we start

2457
01:30:18,800 --> 01:30:20,639
on each of the individual

2458
01:30:20,639 --> 01:30:23,679
dns servers we have compactor running

2459
01:30:23,679 --> 01:30:26,880
generating cdns files

2460
01:30:26,880 --> 01:30:30,639
compressed with xz which is built into

2461
01:30:30,639 --> 01:30:34,400
compactor and periodically these files

2462
01:30:34,400 --> 01:30:36,719
are uploaded

2463
01:30:36,719 --> 01:30:39,760
to some icann

2464
01:30:39,760 --> 01:30:42,800
central data servers once on those

2465
01:30:42,800 --> 01:30:44,000
servers

2466
01:30:44,000 --> 01:30:47,600
um cdns is supplied

2467
01:30:47,600 --> 01:30:51,760
to octo primarily convert cdns

2468
01:30:51,760 --> 01:30:54,080
to pcap because that's the standard

2469
01:30:54,080 --> 01:30:56,320
input format for their analysis tools

2470
01:30:56,320 --> 01:30:58,239
however they are starting

2471
01:30:58,239 --> 01:31:02,719
to explore reading cdns directly

2472
01:31:02,719 --> 01:31:05,440
for analysis what i'm going to be

2473
01:31:05,440 --> 01:31:07,360
focusing on for the rest of this talk

2474
01:31:07,360 --> 01:31:08,000
though

2475
01:31:08,000 --> 01:31:13,440
is the um is the other processing chain

2476
01:31:13,440 --> 01:31:16,000
importing the data into a click house

2477
01:31:16,000 --> 01:31:17,199
cluster

2478
01:31:17,199 --> 01:31:18,960
from where it can be viewed through a

2479
01:31:18,960 --> 01:31:22,000
grafana server

2480
01:31:23,600 --> 01:31:27,679
so looking recapping a little on the

2481
01:31:27,679 --> 01:31:31,360
compactor deployment the compactor

2482
01:31:31,360 --> 01:31:35,280
is constrained to use a single cpu

2483
01:31:35,280 --> 01:31:38,960
on the dns server we have configured it

2484
01:31:38,960 --> 01:31:39,520
to

2485
01:31:39,520 --> 01:31:44,159
collect all dns data um

2486
01:31:44,159 --> 01:31:46,480
that cdns will support which is

2487
01:31:46,480 --> 01:31:47,199
basically

2488
01:31:47,199 --> 01:31:50,400
all dns data and for those who've not

2489
01:31:50,400 --> 01:31:53,520
looked at the rfc or explore the tool

2490
01:31:53,520 --> 01:31:56,639
you can configure it to omit

2491
01:31:56,639 --> 01:32:02,239
uh unrequired items of dns data

2492
01:32:02,239 --> 01:32:04,560
we write x8 compress files to local

2493
01:32:04,560 --> 01:32:06,960
storage these files are rotated once

2494
01:32:06,960 --> 01:32:08,239
every five minutes

2495
01:32:08,239 --> 01:32:12,800
that of course is configurable um

2496
01:32:12,800 --> 01:32:16,800
and the maximum query rates

2497
01:32:16,800 --> 01:32:19,600
that we can sustain um it's very

2498
01:32:19,600 --> 01:32:21,040
difficult to quantify because it's

2499
01:32:21,040 --> 01:32:22,400
largely dependent

2500
01:32:22,400 --> 01:32:24,719
on the core that you actually have on

2501
01:32:24,719 --> 01:32:27,360
your server and the compression

2502
01:32:27,360 --> 01:32:28,719
the level of compression that you're

2503
01:32:28,719 --> 01:32:30,719
applying but

2504
01:32:30,719 --> 01:32:34,000
typically on the single cpu we're quite

2505
01:32:34,000 --> 01:32:35,600
happy handling rates or

2506
01:32:35,600 --> 01:32:38,639
up to about 80 kilo queries

2507
01:32:38,639 --> 01:32:43,600
per second so that's 160 kilo packets

2508
01:32:43,600 --> 01:32:46,800
per second um compactor itself is

2509
01:32:46,800 --> 01:32:48,560
multi-threaded internally

2510
01:32:48,560 --> 01:32:50,480
and given more resources can go

2511
01:32:50,480 --> 01:32:52,719
considerably faster

2512
01:32:52,719 --> 01:32:54,480
as i've said periodically files are

2513
01:32:54,480 --> 01:32:56,320
uploaded to place central collection

2514
01:32:56,320 --> 01:32:58,480
server

2515
01:32:58,480 --> 01:33:01,920
on that collection server the deployment

2516
01:33:01,920 --> 01:33:02,880
that we have

2517
01:33:02,880 --> 01:33:05,760
for uh

2518
01:33:05,920 --> 01:33:09,840
processing cdns

2519
01:33:10,800 --> 01:33:14,480
is like this we're using

2520
01:33:14,480 --> 01:33:17,679
a gear man job server

2521
01:33:17,679 --> 01:33:21,520
and a suite of python a small python

2522
01:33:21,520 --> 01:33:22,480
programs

2523
01:33:22,480 --> 01:33:26,080
um to handle

2524
01:33:26,080 --> 01:33:28,560
the data processing i'll emphasize again

2525
01:33:28,560 --> 01:33:29,600
that each of the

2526
01:33:29,600 --> 01:33:32,400
python programs is small no more than

2527
01:33:32,400 --> 01:33:34,000
200 lines

2528
01:33:34,000 --> 01:33:37,920
or so uh the incoming cdns files

2529
01:33:37,920 --> 01:33:41,440
are uploaded to um designated name

2530
01:33:41,440 --> 01:33:43,600
directories and periodically we scan

2531
01:33:43,600 --> 01:33:44,800
those directories

2532
01:33:44,800 --> 01:33:48,800
and add new files to gearman

2533
01:33:48,800 --> 01:33:52,239
job cues for processing we have

2534
01:33:52,239 --> 01:33:54,560
three separate queues the primary cue

2535
01:33:54,560 --> 01:33:55,360
converts

2536
01:33:55,360 --> 01:33:59,920
cdns to tab separated value files

2537
01:33:59,920 --> 01:34:02,880
using the inspector text templating for

2538
01:34:02,880 --> 01:34:03,440
import

2539
01:34:03,440 --> 01:34:06,639
into click house on the successful

2540
01:34:06,639 --> 01:34:07,360
conversion

2541
01:34:07,360 --> 01:34:11,120
cdns file is archived and the tsv is

2542
01:34:11,120 --> 01:34:12,800
added to a separate queue

2543
01:34:12,800 --> 01:34:15,920
for import we maintain a separate queue

2544
01:34:15,920 --> 01:34:18,080
for tsv imports because

2545
01:34:18,080 --> 01:34:20,719
tsv import is a lot quicker process than

2546
01:34:20,719 --> 01:34:21,199
the

2547
01:34:21,199 --> 01:34:23,120
conversion and this helps us balance the

2548
01:34:23,120 --> 01:34:25,040
job

2549
01:34:25,040 --> 01:34:28,560
the job processing better additionally

2550
01:34:28,560 --> 01:34:29,280
we have

2551
01:34:29,280 --> 01:34:32,000
a third queue which can be optionally

2552
01:34:32,000 --> 01:34:34,960
used to convert cdns to anonymized

2553
01:34:34,960 --> 01:34:37,520
pcap

2554
01:34:38,000 --> 01:34:40,320
you can you can activate this queue

2555
01:34:40,320 --> 01:34:41,440
based on

2556
01:34:41,440 --> 01:34:44,320
a date range and a particular range of

2557
01:34:44,320 --> 01:34:44,960
servers

2558
01:34:44,960 --> 01:34:46,639
and so forth and this is typically used

2559
01:34:46,639 --> 01:34:48,480
for preparing inputs for

2560
01:34:48,480 --> 01:34:50,879
digital

2561
01:34:51,840 --> 01:34:54,080
right let's turn now to the next stage

2562
01:34:54,080 --> 01:34:54,960
in the chain

2563
01:34:54,960 --> 01:34:57,199
click outs and now for those who haven't

2564
01:34:57,199 --> 01:34:58,880
come across it click house

2565
01:34:58,880 --> 01:35:01,920
is an online analytic database

2566
01:35:01,920 --> 01:35:04,080
it's open source it's focused very much

2567
01:35:04,080 --> 01:35:06,800
on time series data

2568
01:35:06,800 --> 01:35:10,719
it's column oriented and it uses

2569
01:35:10,719 --> 01:35:14,320
pretty much standard sql and for our

2570
01:35:14,320 --> 01:35:15,360
purposes

2571
01:35:15,360 --> 01:35:17,600
it also scores because there is a

2572
01:35:17,600 --> 01:35:19,920
refinement plugin available so grafana

2573
01:35:19,920 --> 01:35:23,199
can access click house databases

2574
01:35:23,199 --> 01:35:26,960
for graphing a clickhouse is used by

2575
01:35:26,960 --> 01:35:29,679
a variety of other projects in the dns

2576
01:35:29,679 --> 01:35:30,480
world

2577
01:35:30,480 --> 01:35:33,840
notably cloudflare but i it's also

2578
01:35:33,840 --> 01:35:36,480
used by registries in chile and new

2579
01:35:36,480 --> 01:35:37,600
zealand for certain

2580
01:35:37,600 --> 01:35:40,080
and i suspect very widely used elsewhere

2581
01:35:40,080 --> 01:35:42,719
as well

2582
01:35:42,719 --> 01:35:45,119
we're using a very simple schema within

2583
01:35:45,119 --> 01:35:46,239
click house

2584
01:35:46,239 --> 01:35:49,360
we have a single main table holding

2585
01:35:49,360 --> 01:35:52,719
essentially raw cdns data

2586
01:35:52,719 --> 01:35:56,159
i.e one query response

2587
01:35:56,159 --> 01:35:59,199
pair of prepared data

2588
01:35:59,199 --> 01:36:04,080
record per query and response

2589
01:36:04,719 --> 01:36:07,119
the important thing here is that once

2590
01:36:07,119 --> 01:36:09,760
data is entered into the main table

2591
01:36:09,760 --> 01:36:11,360
click house is configured

2592
01:36:11,360 --> 01:36:14,800
to perform on insert aggregation of this

2593
01:36:14,800 --> 01:36:16,000
data

2594
01:36:16,000 --> 01:36:18,719
and currently we're aggregating into

2595
01:36:18,719 --> 01:36:19,440
separate

2596
01:36:19,440 --> 01:36:22,840
one second and five minute aggregation

2597
01:36:22,840 --> 01:36:25,199
tables and aggregation

2598
01:36:25,199 --> 01:36:28,960
is a simple a

2599
01:36:28,960 --> 01:36:31,280
simple process selecting data to be

2600
01:36:31,280 --> 01:36:32,400
aggregated via

2601
01:36:32,400 --> 01:36:36,080
a sql materialized view but married with

2602
01:36:36,080 --> 01:36:38,400
specialized storage engines that perform

2603
01:36:38,400 --> 01:36:40,159
the aggregation

2604
01:36:40,159 --> 01:36:42,880
there's quite a lot to read on the

2605
01:36:42,880 --> 01:36:43,760
subject of

2606
01:36:43,760 --> 01:36:45,760
click house aggregation i've included a

2607
01:36:45,760 --> 01:36:47,520
link within these slides for those who

2608
01:36:47,520 --> 01:36:48,159
would like to

2609
01:36:48,159 --> 01:36:50,799
learn more

2610
01:36:52,080 --> 01:36:54,800
the click house deployment for imrs is a

2611
01:36:54,800 --> 01:36:56,560
six server cluster

2612
01:36:56,560 --> 01:36:59,040
um the import process as we've said is

2613
01:36:59,040 --> 01:37:01,199
handling roughly 17 billion records

2614
01:37:01,199 --> 01:37:04,320
every day disk usage currently is

2615
01:37:04,320 --> 01:37:05,199
working out

2616
01:37:05,199 --> 01:37:09,119
about one terabyte per the 39 billion

2617
01:37:09,119 --> 01:37:10,880
records which is a bit over two days of

2618
01:37:10,880 --> 01:37:13,280
raw data

2619
01:37:13,280 --> 01:37:16,239
the management tools that we provide

2620
01:37:16,239 --> 01:37:17,440
which again are these

2621
01:37:17,440 --> 01:37:20,719
small python programs provide

2622
01:37:20,719 --> 01:37:22,800
options to retain configurable amounts

2623
01:37:22,800 --> 01:37:24,639
of each type of data

2624
01:37:24,639 --> 01:37:27,280
so we can have different data retention

2625
01:37:27,280 --> 01:37:28,639
periods

2626
01:37:28,639 --> 01:37:31,760
for each each type of raw

2627
01:37:31,760 --> 01:37:35,679
or aggregated data and finally the click

2628
01:37:35,679 --> 01:37:36,880
house

2629
01:37:36,880 --> 01:37:40,080
cluster serves multiple grafana

2630
01:37:40,080 --> 01:37:41,840
front-ends

2631
01:37:41,840 --> 01:37:43,679
and as well as grafana of course there

2632
01:37:43,679 --> 01:37:44,960
is a command line

2633
01:37:44,960 --> 01:37:47,119
sql interface which can be used for ad

2634
01:37:47,119 --> 01:37:48,239
hoc queries

2635
01:37:48,239 --> 01:37:51,679
for data analysis to give you some

2636
01:37:51,679 --> 01:37:53,199
numbers show you what click house is

2637
01:37:53,199 --> 01:37:54,560
capable of

2638
01:37:54,560 --> 01:37:57,760
when it really gets going um let's take

2639
01:37:57,760 --> 01:37:59,440
a sample query of counting just

2640
01:37:59,440 --> 01:38:01,119
a simple thing of just counting all the

2641
01:38:01,119 --> 01:38:02,560
quad a queries

2642
01:38:02,560 --> 01:38:05,840
received in a week and you'll see that

2643
01:38:05,840 --> 01:38:08,480
even working on the raw data where click

2644
01:38:08,480 --> 01:38:10,159
house has to chew through

2645
01:38:10,159 --> 01:38:13,199
123 billion records or four terabytes

2646
01:38:13,199 --> 01:38:16,639
of data it completes that query in 22

2647
01:38:16,639 --> 01:38:20,239
seconds which is not too shabby

2648
01:38:20,239 --> 01:38:23,199
moving to the one second aggregation we

2649
01:38:23,199 --> 01:38:24,000
see

2650
01:38:24,000 --> 01:38:26,880
uh considerable reduction in the number

2651
01:38:26,880 --> 01:38:28,719
of rows to be processed

2652
01:38:28,719 --> 01:38:30,239
which in turn leads to an order of

2653
01:38:30,239 --> 01:38:32,239
magnitude reduction in the time that it

2654
01:38:32,239 --> 01:38:34,320
takes the query

2655
01:38:34,320 --> 01:38:37,040
to process the data there is a reduction

2656
01:38:37,040 --> 01:38:38,880
in the size of data stored

2657
01:38:38,880 --> 01:38:41,840
um it's less than the reduction you see

2658
01:38:41,840 --> 01:38:43,679
in the number of rows because of the

2659
01:38:43,679 --> 01:38:44,560
various diff

2660
01:38:44,560 --> 01:38:47,199
all the different aggregations that we

2661
01:38:47,199 --> 01:38:48,239
are currently

2662
01:38:48,239 --> 01:38:50,400
making and at the moment we have pretty

2663
01:38:50,400 --> 01:38:51,760
much a full set

2664
01:38:51,760 --> 01:38:56,719
of aggregations replicating the dsc

2665
01:38:56,880 --> 01:39:00,000
data summaries and

2666
01:39:00,000 --> 01:39:01,679
if we then move to a five minute

2667
01:39:01,679 --> 01:39:03,119
aggregation

2668
01:39:03,119 --> 01:39:05,040
you can see there's further impressive

2669
01:39:05,040 --> 01:39:06,800
drops in the number of rows to be

2670
01:39:06,800 --> 01:39:07,679
processed

2671
01:39:07,679 --> 01:39:11,119
and the query speed and indeed the data

2672
01:39:11,119 --> 01:39:12,800
size to be retained

2673
01:39:12,800 --> 01:39:16,000
as the larger five-minute gap allows the

2674
01:39:16,000 --> 01:39:17,199
aggregation

2675
01:39:17,199 --> 01:39:21,599
to really crunch down the data

2676
01:39:24,320 --> 01:39:27,360
so we have the data in click house

2677
01:39:27,360 --> 01:39:29,760
it's been aggravate aggregated and we

2678
01:39:29,760 --> 01:39:31,440
can now move on and talk about

2679
01:39:31,440 --> 01:39:33,280
visualization for which we're using

2680
01:39:33,280 --> 01:39:35,600
grafana now i'm sure you've all

2681
01:39:35,600 --> 01:39:37,600
seen a grafana screen you might not have

2682
01:39:37,600 --> 01:39:39,440
known it as grafana

2683
01:39:39,440 --> 01:39:42,639
but it's it's a very well-known

2684
01:39:42,639 --> 01:39:45,840
web-based visualization platforms

2685
01:39:45,840 --> 01:39:49,119
we're using uh three different

2686
01:39:49,119 --> 01:39:51,679
plot types within grafana first and

2687
01:39:51,679 --> 01:39:53,760
foremost is the time series plots for

2688
01:39:53,760 --> 01:39:54,000
which

2689
01:39:54,000 --> 01:39:57,520
grafana was designed in the first place

2690
01:39:57,520 --> 01:40:01,440
um we do have uh

2691
01:40:01,440 --> 01:40:04,320
several plots that are bar charts

2692
01:40:04,320 --> 01:40:05,119
however

2693
01:40:05,119 --> 01:40:07,679
now and not time series and if you've

2694
01:40:07,679 --> 01:40:09,920
ever tried to do a non-time series bar

2695
01:40:09,920 --> 01:40:10,480
chart

2696
01:40:10,480 --> 01:40:13,679
in grafana and you realize you will know

2697
01:40:13,679 --> 01:40:14,080
that

2698
01:40:14,080 --> 01:40:17,040
um this is not a straightforward process

2699
01:40:17,040 --> 01:40:18,880
the solution we've adopted

2700
01:40:18,880 --> 01:40:21,360
is to pick up one of the existing

2701
01:40:21,360 --> 01:40:22,880
standard profound clock

2702
01:40:22,880 --> 01:40:26,480
uh grafana plugins uh which

2703
01:40:26,480 --> 01:40:29,199
enables you to make time series plots

2704
01:40:29,199 --> 01:40:30,480
with the plotly

2705
01:40:30,480 --> 01:40:33,520
library and extend that plugin to

2706
01:40:33,520 --> 01:40:36,880
provide access to plotlist bar chart

2707
01:40:36,880 --> 01:40:40,159
capabilities we've submitted our

2708
01:40:40,159 --> 01:40:41,280
modifications

2709
01:40:41,280 --> 01:40:45,199
to the um authors of the plexi plug-in

2710
01:40:45,199 --> 01:40:45,840
but

2711
01:40:45,840 --> 01:40:48,840
to date they have been very very bad at

2712
01:40:48,840 --> 01:40:50,639
uh

2713
01:40:50,639 --> 01:40:54,880
taking processing merge requests

2714
01:40:54,880 --> 01:40:57,840
so i've included a link direct to our

2715
01:40:57,840 --> 01:40:59,520
repository

2716
01:40:59,520 --> 01:41:02,639
we're also displaying map data using a

2717
01:41:02,639 --> 01:41:03,600
standard

2718
01:41:03,600 --> 01:41:06,639
grafana plug-in um

2719
01:41:06,639 --> 01:41:08,159
other plug-ins we're using is obviously

2720
01:41:08,159 --> 01:41:10,159
the click-ass data access plug-in and an

2721
01:41:10,159 --> 01:41:12,000
image rendering plug-in which you now

2722
01:41:12,000 --> 01:41:14,239
need if you want to download

2723
01:41:14,239 --> 01:41:19,360
uh pngs of grafana

2724
01:41:19,360 --> 01:41:22,400
graphs you can go and look now

2725
01:41:22,400 --> 01:41:26,440
at the live public interface at

2726
01:41:26,440 --> 01:41:27,600
stats.dnsikan.org

2727
01:41:27,600 --> 01:41:29,360
and you'll find it reproduces various

2728
01:41:29,360 --> 01:41:31,040
dlc-like plots

2729
01:41:31,040 --> 01:41:33,199
currently this is exposing just five

2730
01:41:33,199 --> 01:41:34,159
minute data

2731
01:41:34,159 --> 01:41:36,320
and there is a maximum time duration

2732
01:41:36,320 --> 01:41:37,520
window

2733
01:41:37,520 --> 01:41:40,239
as we assess the performance impact on

2734
01:41:40,239 --> 01:41:42,560
the cluster

2735
01:41:42,560 --> 01:41:45,679
i can staff internally have access to

2736
01:41:45,679 --> 01:41:46,159
diff

2737
01:41:46,159 --> 01:41:50,320
to a different performance setup with

2738
01:41:50,320 --> 01:41:53,119
access to plots based on one second

2739
01:41:53,119 --> 01:41:54,159
aggregation

2740
01:41:54,159 --> 01:41:58,840
and various other non-public

2741
01:41:58,840 --> 01:42:02,400
graphs so i'll conclude with just a

2742
01:42:02,400 --> 01:42:04,080
quick run through some screenshots so

2743
01:42:04,080 --> 01:42:05,520
you can see what you're likely to be up

2744
01:42:05,520 --> 01:42:06,880
against

2745
01:42:06,880 --> 01:42:10,560
grafana has limited

2746
01:42:10,560 --> 01:42:14,159
facilities for menus and so forth

2747
01:42:14,159 --> 01:42:17,119
um so here's our here's the landing page

2748
01:42:17,119 --> 01:42:18,239
as you can see

2749
01:42:18,239 --> 01:42:20,320
we've just grouped all these plots into

2750
01:42:20,320 --> 01:42:21,840
various different categories or

2751
01:42:21,840 --> 01:42:25,360
dashboards as grafana calls them

2752
01:42:25,360 --> 01:42:28,560
let's look first at a typical profound

2753
01:42:28,560 --> 01:42:30,719
time series graph this is

2754
01:42:30,719 --> 01:42:33,119
queries plotted by different regions

2755
01:42:33,119 --> 01:42:35,360
above the graph you will see some drop

2756
01:42:35,360 --> 01:42:36,239
downs

2757
01:42:36,239 --> 01:42:39,440
these drop downs enable you to restrict

2758
01:42:39,440 --> 01:42:40,239
the graph

2759
01:42:40,239 --> 01:42:44,960
to subsets of the total available data

2760
01:42:44,960 --> 01:42:47,119
this graph and the next few screenshots

2761
01:42:47,119 --> 01:42:48,560
are taken off one of the internal

2762
01:42:48,560 --> 01:42:49,199
systems

2763
01:42:49,199 --> 01:42:52,000
so you'll see that the end category is

2764
01:42:52,000 --> 01:42:53,040
node that's an

2765
01:42:53,040 --> 01:42:56,400
individual server

2766
01:42:56,400 --> 01:42:58,480
for the public system you can only

2767
01:42:58,480 --> 01:42:59,600
filter as far as

2768
01:42:59,600 --> 01:43:02,719
instance and

2769
01:43:02,719 --> 01:43:05,199
here's a dashboard with several time

2770
01:43:05,199 --> 01:43:05,920
series

2771
01:43:05,920 --> 01:43:08,400
plots on it all very familiar grafana

2772
01:43:08,400 --> 01:43:10,880
type plots

2773
01:43:10,880 --> 01:43:13,440
i mentioned earlier we can do bar charts

2774
01:43:13,440 --> 01:43:14,080
so

2775
01:43:14,080 --> 01:43:16,080
here's a bar chart well here's two bar

2776
01:43:16,080 --> 01:43:17,440
charts

2777
01:43:17,440 --> 01:43:20,480
indeed i'll mention at this point

2778
01:43:20,480 --> 01:43:24,080
that geographic client

2779
01:43:24,080 --> 01:43:27,840
data and client asn look up

2780
01:43:27,840 --> 01:43:30,880
we're doing via inspector template mod

2781
01:43:30,880 --> 01:43:34,239
output modifiers which look at

2782
01:43:34,239 --> 01:43:37,600
perform lookups in max9 geolight

2783
01:43:37,600 --> 01:43:39,840
data

2784
01:43:40,639 --> 01:43:44,080
and this obviously is done at tsv

2785
01:43:44,080 --> 01:43:48,159
generation time on the icann servers

2786
01:43:48,639 --> 01:43:51,679
here's a more complex bar chart uh

2787
01:43:51,679 --> 01:43:54,800
i will frankly admit that this the data

2788
01:43:54,800 --> 01:43:55,440
for this

2789
01:43:55,440 --> 01:43:57,520
has to arrive in a certain predetermined

2790
01:43:57,520 --> 01:44:00,159
order and you can

2791
01:44:00,159 --> 01:44:01,920
find yourself writing some rather

2792
01:44:01,920 --> 01:44:04,000
interesting sequel but nonetheless this

2793
01:44:04,000 --> 01:44:04,320
is

2794
01:44:04,320 --> 01:44:05,600
a very good example of what it's

2795
01:44:05,600 --> 01:44:08,880
possible to achieve with bar charts

2796
01:44:08,880 --> 01:44:11,760
in this system

2797
01:44:12,560 --> 01:44:16,159
a quick look at the geographic location

2798
01:44:16,159 --> 01:44:18,559
plots

2799
01:44:18,840 --> 01:44:21,840
and and finally uh

2800
01:44:21,840 --> 01:44:24,000
as i mentioned i think i mentioned

2801
01:44:24,000 --> 01:44:25,119
earlier um

2802
01:44:25,119 --> 01:44:28,159
we have a series of plots for all um

2803
01:44:28,159 --> 01:44:31,280
rsac information

2804
01:44:31,280 --> 01:44:34,800
uh the system also generates rsac

2805
01:44:34,800 --> 01:44:36,000
reports

2806
01:44:36,000 --> 01:44:39,119
automatically again this is done by

2807
01:44:39,119 --> 01:44:43,280
some of the python management tools

2808
01:44:43,360 --> 01:44:46,800
and these reports include required

2809
01:44:46,800 --> 01:44:47,679
images

2810
01:44:47,679 --> 01:44:49,600
of these graphs which is the reason that

2811
01:44:49,600 --> 01:44:51,600
we require the grafana

2812
01:44:51,600 --> 01:44:54,800
imaging plug-in but that's the grafana

2813
01:44:54,800 --> 01:44:55,760
implementation

2814
01:44:55,760 --> 01:44:59,199
detail so

2815
01:44:59,199 --> 01:45:02,960
in summary for us cdns clickhouse and

2816
01:45:02,960 --> 01:45:03,840
grafana

2817
01:45:03,840 --> 01:45:06,000
provide a nice flexible package for

2818
01:45:06,000 --> 01:45:09,119
traffic capture and visualization

2819
01:45:09,119 --> 01:45:11,520
crucially click house aggregations give

2820
01:45:11,520 --> 01:45:13,280
you a great deal of flexibility in

2821
01:45:13,280 --> 01:45:15,360
producing trade-offs between storage and

2822
01:45:15,360 --> 01:45:17,679
performance

2823
01:45:17,679 --> 01:45:20,080
and grafana can reproduce dsc like

2824
01:45:20,080 --> 01:45:21,199
graphs

2825
01:45:21,199 --> 01:45:24,960
given the right plugins finally

2826
01:45:24,960 --> 01:45:28,400
the intention is that tools and

2827
01:45:28,400 --> 01:45:30,800
schema and so forth will be open sourced

2828
01:45:30,800 --> 01:45:32,080
unfortunately we're not

2829
01:45:32,080 --> 01:45:36,000
quite there yet we probably will not be

2830
01:45:36,000 --> 01:45:37,280
open sourcing

2831
01:45:37,280 --> 01:45:40,320
the complete imrs solution because it's

2832
01:45:40,320 --> 01:45:42,960
very specific to imrs but instead

2833
01:45:42,960 --> 01:45:46,159
a toolkit allowing you to build a system

2834
01:45:46,159 --> 01:45:46,960
like this

2835
01:45:46,960 --> 01:45:49,679
yourself so thank you very much for your

2836
01:45:49,679 --> 01:45:50,400
patience

2837
01:45:50,400 --> 01:45:52,800
and listening to the last thought of

2838
01:45:52,800 --> 01:45:53,600
this over

2839
01:45:53,600 --> 01:45:56,719
any questions thank you jen that was

2840
01:45:56,719 --> 01:45:58,960
really nice overview of all the tools

2841
01:45:58,960 --> 01:46:02,320
we actually have some questions here uh

2842
01:46:02,320 --> 01:46:05,119
stephan ublink is asking does the

2843
01:46:05,119 --> 01:46:06,400
reconstructed pcap

2844
01:46:06,400 --> 01:46:08,560
have the information to calculate the

2845
01:46:08,560 --> 01:46:11,119
tcp rtt

2846
01:46:11,119 --> 01:46:14,719
uh no it i don't think it does

2847
01:46:14,719 --> 01:46:18,960
um the reconstruct the tcp sessions

2848
01:46:18,960 --> 01:46:22,000
are um a complete reconstruction i

2849
01:46:22,000 --> 01:46:24,719
i'm faking it up inside inspector the

2850
01:46:24,719 --> 01:46:26,080
only timing that we have

2851
01:46:26,080 --> 01:46:29,360
is the time stamps of uh each

2852
01:46:29,360 --> 01:46:33,040
each individual query or response

2853
01:46:33,040 --> 01:46:36,719
which is efficient to regenerate rt to

2854
01:46:36,719 --> 01:46:41,440
recover rtt transport level information

2855
01:46:41,440 --> 01:46:45,199
okay thank you uh thomas krieger asks

2856
01:46:45,199 --> 01:46:46,719
you mentioned that you are able to

2857
01:46:46,719 --> 01:46:48,560
process about 80k

2858
01:46:48,560 --> 01:46:52,080
qps with cdns and

2859
01:46:52,080 --> 01:46:54,800
xz compression on a single cpu you have

2860
01:46:54,800 --> 01:46:56,560
an estimate of the throughput over the

2861
01:46:56,560 --> 01:47:00,159
cdns without any compression

2862
01:47:00,159 --> 01:47:03,600
um again it's difficult to tell a lot of

2863
01:47:03,600 --> 01:47:04,000
the

2864
01:47:04,000 --> 01:47:05,920
overhead a lot a lot of the problems i

2865
01:47:05,920 --> 01:47:07,119
have there are

2866
01:47:07,119 --> 01:47:09,600
um first of all the overhead of pcap

2867
01:47:09,600 --> 01:47:10,480
itself

2868
01:47:10,480 --> 01:47:14,000
um but i off the top of my head

2869
01:47:14,000 --> 01:47:16,639
numbers in the region of um a hundred

2870
01:47:16,639 --> 01:47:17,840
thousand

2871
01:47:17,840 --> 01:47:21,280
careers per second i think are possible

2872
01:47:21,280 --> 01:47:22,800
but again

2873
01:47:22,800 --> 01:47:26,239
you can only at that kind of level apply

2874
01:47:26,239 --> 01:47:30,560
uh quite light compression um

2875
01:47:30,560 --> 01:47:33,920
in fact um varying the exo compression

2876
01:47:33,920 --> 01:47:36,239
level if you're using xz

2877
01:47:36,239 --> 01:47:39,840
makes a considerable difference and

2878
01:47:39,840 --> 01:47:43,040
we've also been looking at z-standard

2879
01:47:43,040 --> 01:47:46,159
compression as a

2880
01:47:46,159 --> 01:47:49,119
as better compression than gzip but with

2881
01:47:49,119 --> 01:47:50,400
the same cpu

2882
01:47:50,400 --> 01:47:52,719
overhead as usual zed standard isn't

2883
01:47:52,719 --> 01:47:54,320
currently part of the

2884
01:47:54,320 --> 01:47:57,360
compactor standard build but we're

2885
01:47:57,360 --> 01:47:59,280
looking at it

2886
01:47:59,280 --> 01:48:02,800
okay thank you martin blink

2887
01:48:02,800 --> 01:48:04,880
asked hi hygiene interesting work did

2888
01:48:04,880 --> 01:48:06,400
you look at other databases but out

2889
01:48:06,400 --> 01:48:07,119
besides

2890
01:48:07,119 --> 01:48:09,360
click house and also nice graphene

2891
01:48:09,360 --> 01:48:11,760
dashboards i have noticed you are using

2892
01:48:11,760 --> 01:48:12,719
free jio ip

2893
01:48:12,719 --> 01:48:15,760
database from max mind why not use the

2894
01:48:15,760 --> 01:48:17,360
baked version it's not expensive and it

2895
01:48:17,360 --> 01:48:19,280
supports max mind

2896
01:48:19,280 --> 01:48:22,480
it's just simply the light is adequate

2897
01:48:22,480 --> 01:48:24,320
for our purposes at the moment

2898
01:48:24,320 --> 01:48:27,360
uh we've obviously we can use the page

2899
01:48:27,360 --> 01:48:29,840
we can use the paid version um it just

2900
01:48:29,840 --> 01:48:31,119
so happens that

2901
01:48:31,119 --> 01:48:33,119
up to now i can't have the masters for

2902
01:48:33,119 --> 01:48:35,520
it um

2903
01:48:35,520 --> 01:48:39,360
okay and uh other other other place than

2904
01:48:39,360 --> 01:48:40,960
besides clean house oh yes

2905
01:48:40,960 --> 01:48:42,880
when we when we when we started this

2906
01:48:42,880 --> 01:48:45,920
project we uh we looked at several other

2907
01:48:45,920 --> 01:48:46,239
uh

2908
01:48:46,239 --> 01:48:49,760
databases we looked at um hadoop

2909
01:48:49,760 --> 01:48:54,130
and slack

2910
01:48:54,130 --> 01:48:55,600
[Music]

2911
01:48:55,600 --> 01:48:59,040
essentially what we found was typically

2912
01:48:59,040 --> 01:49:02,080
um import speed

2913
01:49:02,080 --> 01:49:05,040
into other databases was was a problem

2914
01:49:05,040 --> 01:49:07,520
uh several of the databases we evaluated

2915
01:49:07,520 --> 01:49:09,600
we found it very very difficult

2916
01:49:09,600 --> 01:49:12,719
to import more than 15

2917
01:49:12,719 --> 01:49:15,920
20 000 queries a second which was

2918
01:49:15,920 --> 01:49:17,840
obviously going to be grossly inadequate

2919
01:49:17,840 --> 01:49:21,440
and click house was basically very easy

2920
01:49:21,440 --> 01:49:22,560
to set up

2921
01:49:22,560 --> 01:49:27,199
and get running and um

2922
01:49:27,199 --> 01:49:30,400
and to date we have had no reason

2923
01:49:30,400 --> 01:49:33,679
to uh reconsider that decision we're

2924
01:49:33,679 --> 01:49:36,159
very pleased with the click house

2925
01:49:36,159 --> 01:49:39,440
okay thank you uh and the last question

2926
01:49:39,440 --> 01:49:41,679
is from brian dickinson are there any

2927
01:49:41,679 --> 01:49:43,760
other transport level details from tcp

2928
01:49:43,760 --> 01:49:44,960
that are captured

2929
01:49:44,960 --> 01:49:48,400
such as mtu options anything else

2930
01:49:48,400 --> 01:49:51,520
no not not at night as i said the

2931
01:49:51,520 --> 01:49:54,960
cdns is focused very much

2932
01:49:54,960 --> 01:49:58,639
on just capturing uh dns

2933
01:49:58,639 --> 01:50:01,679
dns level data rather than transport

2934
01:50:01,679 --> 01:50:05,119
data okay so

2935
01:50:05,119 --> 01:50:08,400
we haven't built that stuff in basically

2936
01:50:08,400 --> 01:50:10,560
okay thank you for your presentation

2937
01:50:10,560 --> 01:50:12,639
thank you for answering the questions

2938
01:50:12,639 --> 01:50:15,679
um and with that uh

2939
01:50:15,679 --> 01:50:17,840
this session concludes uh i would like

2940
01:50:17,840 --> 01:50:18,960
to uh

2941
01:50:18,960 --> 01:50:22,480
thank to jack jake uh who's doing the

2942
01:50:22,480 --> 01:50:25,199
timekeeping duties and i forgot to

2943
01:50:25,199 --> 01:50:26,400
mention him at the beginning of the

2944
01:50:26,400 --> 01:50:28,159
session

2945
01:50:28,159 --> 01:50:30,480
please write the presentations because

2946
01:50:30,480 --> 01:50:32,320
we really

2947
01:50:32,320 --> 01:50:35,199
enjoy the feedback and it helps us next

2948
01:50:35,199 --> 01:50:37,119
time when we will be

2949
01:50:37,119 --> 01:50:40,159
uploading future submissions for the

2950
01:50:40,159 --> 01:50:42,880
future workshops

2951
01:50:42,880 --> 01:50:45,520
and with that i will hand over to keith

2952
01:50:45,520 --> 01:50:46,159
with some

2953
01:50:46,159 --> 01:50:50,320
closing notes for this blog thank you

2954
01:50:50,639 --> 01:50:53,440
okay thank you jan and um thank you to

2955
01:50:53,440 --> 01:50:56,159
all of our speakers this morning indeed

2956
01:50:56,159 --> 01:50:58,000
um we've got to the end of the workshop

2957
01:50:58,000 --> 01:51:00,159
so it's time to thank a bunch of people

2958
01:51:00,159 --> 01:51:03,360
uh once again i'd like to thank um

2959
01:51:03,360 --> 01:51:06,719
ns1 um as being our our late breaking

2960
01:51:06,719 --> 01:51:07,840
sponsor for this event

2961
01:51:07,840 --> 01:51:10,560
very much appreciated um we're certainly

2962
01:51:10,560 --> 01:51:12,560
interested in sponsors for your future

2963
01:51:12,560 --> 01:51:13,760
online events

2964
01:51:13,760 --> 01:51:15,920
i'd like to thank verisign for being our

2965
01:51:15,920 --> 01:51:17,920
promoter workshop patron for all of our

2966
01:51:17,920 --> 01:51:19,040
workshops during

2967
01:51:19,040 --> 01:51:22,560
2020 online and offline all work members

2968
01:51:22,560 --> 01:51:23,520
and supporters

2969
01:51:23,520 --> 01:51:25,679
um whose commitment to work has been

2970
01:51:25,679 --> 01:51:27,760
outstanding during this very strange

2971
01:51:27,760 --> 01:51:28,480
year

2972
01:51:28,480 --> 01:51:30,159
all the grant funding and donors that

2973
01:51:30,159 --> 01:51:31,920
we've received this year

2974
01:51:31,920 --> 01:51:33,760
our program committee who worked really

2975
01:51:33,760 --> 01:51:36,239
hard um under um quite challenging they

2976
01:51:36,239 --> 01:51:37,679
definitely had to do more than they

2977
01:51:37,679 --> 01:51:39,520
signed up for a year ago

2978
01:51:39,520 --> 01:51:40,880
again we're looking for program

2979
01:51:40,880 --> 01:51:43,360
committee volunteers for 2021

2980
01:51:43,360 --> 01:51:45,520
and a special thank you to to schumann

2981
01:51:45,520 --> 01:51:47,280
um who has um served on the program

2982
01:51:47,280 --> 01:51:49,119
committee for three years now and

2983
01:51:49,119 --> 01:51:52,239
has been chair recently um i'd like to

2984
01:51:52,239 --> 01:51:53,920
thank all of our speakers

2985
01:51:53,920 --> 01:51:57,040
um again um

2986
01:51:57,040 --> 01:51:59,040
it's on their own time their own effort

2987
01:51:59,040 --> 01:52:00,080
um they do this

2988
01:52:00,080 --> 01:52:02,159
um for the online workshops is actually

2989
01:52:02,159 --> 01:52:03,760
more of their time because we do things

2990
01:52:03,760 --> 01:52:05,360
like rehearsals and ask additional

2991
01:52:05,360 --> 01:52:06,960
information from them so a big thank you

2992
01:52:06,960 --> 01:52:08,800
to all of our speakers

2993
01:52:08,800 --> 01:52:11,119
um and um you know please consider

2994
01:52:11,119 --> 01:52:12,480
supporting an online

2995
01:52:12,480 --> 01:52:15,040
work event uh via sponsorship patronage

2996
01:52:15,040 --> 01:52:16,000
or or

2997
01:52:16,000 --> 01:52:19,840
donation um a reminder

2998
01:52:19,840 --> 01:52:22,639
to please complete the surveys for the

2999
01:52:22,639 --> 01:52:23,760
uh the workshop

3000
01:52:23,760 --> 01:52:25,440
we appreciate feedback both on the

3001
01:52:25,440 --> 01:52:27,119
content which the program committee can

3002
01:52:27,119 --> 01:52:28,840
use to

3003
01:52:28,840 --> 01:52:32,719
um the program committee can use

3004
01:52:32,719 --> 01:52:36,239
to um generate feedback um and make sure

3005
01:52:36,239 --> 01:52:37,280
that the content is

3006
01:52:37,280 --> 01:52:39,199
is matched up what they rate and what

3007
01:52:39,199 --> 01:52:42,320
the audience rates is is compatible

3008
01:52:42,320 --> 01:52:44,800
um and also on the logistics of the

3009
01:52:44,800 --> 01:52:46,480
meeting where you appreciate your input

3010
01:52:46,480 --> 01:52:48,239
and feedback on the format particularly

3011
01:52:48,239 --> 01:52:50,639
with the online

3012
01:52:50,639 --> 01:52:53,360
environment that we're working in um

3013
01:52:53,360 --> 01:52:54,800
that's it for me for now

3014
01:52:54,800 --> 01:52:57,280
a reminder that work 34 will be taking

3015
01:52:57,280 --> 01:52:58,880
place almost certainly online in

3016
01:52:58,880 --> 01:52:59,679
february

3017
01:52:59,679 --> 01:53:01,440
um they call for presentations that will

3018
01:53:01,440 --> 01:53:04,239
open shortly the work agm begins

3019
01:53:04,239 --> 01:53:06,320
in one hour for orc members and

3020
01:53:06,320 --> 01:53:07,760
supporters only

3021
01:53:07,760 --> 01:53:12,560
at 1500 utc um so thank you all and um

3022
01:53:12,560 --> 01:53:27,840
see you at the agm see you next time

3023
01:53:28,719 --> 01:53:30,800
you

