1
00:00:00,390 --> 00:00:10,880
[Music]

2
00:00:10,880 --> 00:00:13,740
oh yeah

3
00:00:13,740 --> 00:00:15,960
okay

4
00:00:15,960 --> 00:00:18,600
I think we're ready Matt good to go

5
00:00:18,600 --> 00:00:21,720
okay good morning everybody Welcome to

6
00:00:21,720 --> 00:00:25,619
day two of uh dinosaur Arc 38. um this

7
00:00:25,619 --> 00:00:28,320
morning's first session is uh has two

8
00:00:28,320 --> 00:00:30,539
talks each 25 minutes and our time

9
00:00:30,539 --> 00:00:32,940
keeper this morning Suzanne Wolfe

10
00:00:32,940 --> 00:00:34,620
um thanks to Comcast as the workshop and

11
00:00:34,620 --> 00:00:36,600
connectivity sponsor and verisign is the

12
00:00:36,600 --> 00:00:39,660
2022 workshops Patron

13
00:00:39,660 --> 00:00:42,059
um a reminder for both of the speakers

14
00:00:42,059 --> 00:00:43,680
this morning that you'll see we've got a

15
00:00:43,680 --> 00:00:45,480
poll that comes up on your screen and

16
00:00:45,480 --> 00:00:47,520
please do fill that out it helps us in

17
00:00:47,520 --> 00:00:49,260
the program committee

18
00:00:49,260 --> 00:00:50,700
um

19
00:00:50,700 --> 00:00:52,500
figure out how we're going to best

20
00:00:52,500 --> 00:00:56,160
curate content for the next talks a note

21
00:00:56,160 --> 00:00:58,940
for the presenters on the Q a any remote

22
00:00:58,940 --> 00:01:01,199
participants I'll be reading out the

23
00:01:01,199 --> 00:01:03,539
questions during the Q a please

24
00:01:03,539 --> 00:01:06,240
preference preface your questions with

25
00:01:06,240 --> 00:01:07,979
the pound questions hashtag so they're

26
00:01:07,979 --> 00:01:10,380
visible in the workshops Channel and of

27
00:01:10,380 --> 00:01:11,640
course anybody here in the room can come

28
00:01:11,640 --> 00:01:14,100
up to the microphone so with that our

29
00:01:14,100 --> 00:01:16,500
first speaker is uh Jeff Houston with

30
00:01:16,500 --> 00:01:17,939
the resolvers we use

31
00:01:17,939 --> 00:01:19,560
thanks a lot for that John and good

32
00:01:19,560 --> 00:01:21,540
morning everyone hopefully I am clear

33
00:01:21,540 --> 00:01:24,240
and you can hear me right

34
00:01:24,240 --> 00:01:26,460
it's weird no fall back up here okay my

35
00:01:26,460 --> 00:01:28,020
name is Jeff Houston I'm with ap Nick

36
00:01:28,020 --> 00:01:29,759
and this is work that I've done uh in

37
00:01:29,759 --> 00:01:31,740
collaboration with joa Damas who's also

38
00:01:31,740 --> 00:01:33,479
with ap Nick

39
00:01:33,479 --> 00:01:35,640
um based around that area

40
00:01:35,640 --> 00:01:37,619
of the intersection

41
00:01:37,619 --> 00:01:41,939
between measurement and policy

42
00:01:41,939 --> 00:01:45,060
you see as far as I can tell

43
00:01:45,060 --> 00:01:47,640
no one said this

44
00:01:47,640 --> 00:01:50,040
but they probably thought it

45
00:01:50,040 --> 00:01:52,619
because particularly if you're in the in

46
00:01:52,619 --> 00:01:55,799
the EU region and you actually look at

47
00:01:55,799 --> 00:02:00,479
what resolvers do folk use in the EU to

48
00:02:00,479 --> 00:02:02,340
get their DNS names

49
00:02:02,340 --> 00:02:04,619
then there's one entity

50
00:02:04,619 --> 00:02:07,680
that just dominates the environment as a

51
00:02:07,680 --> 00:02:10,258
single resolver class and of course

52
00:02:10,258 --> 00:02:13,560
that's run by Google it's enormous now

53
00:02:13,560 --> 00:02:15,360
there's no contract

54
00:02:15,360 --> 00:02:17,040
there's no agreement

55
00:02:17,040 --> 00:02:19,980
no one signs up to do this with Google

56
00:02:19,980 --> 00:02:22,980
and Google acknowledges you just aim

57
00:02:22,980 --> 00:02:25,379
yourself at all eights right

58
00:02:25,379 --> 00:02:28,560
and it's almost permissionless

59
00:02:28,560 --> 00:02:31,980
and as far as I can tell looking at the

60
00:02:31,980 --> 00:02:34,680
sad story of quad nine and its brush

61
00:02:34,680 --> 00:02:37,260
with the EU judicial system

62
00:02:37,260 --> 00:02:39,660
Google doesn't seem to have that

63
00:02:39,660 --> 00:02:42,720
applicability it's a US company working

64
00:02:42,720 --> 00:02:45,000
out of the U.S obligations in the

65
00:02:45,000 --> 00:02:47,400
international treaty space and that is

66
00:02:47,400 --> 00:02:50,400
slightly outside of what applies to

67
00:02:50,400 --> 00:02:52,140
companies who are effectively

68
00:02:52,140 --> 00:02:54,780
corporately domiciled in the EU itself

69
00:02:54,780 --> 00:02:56,819
so they're slightly outside the

70
00:02:56,819 --> 00:02:58,379
regulatory framework

71
00:02:58,379 --> 00:03:01,800
yet they dominate totally dominate

72
00:03:01,800 --> 00:03:04,440
and this is essential

73
00:03:04,440 --> 00:03:06,599
I make as I was reading this morning God

74
00:03:06,599 --> 00:03:09,120
Knows Why the blurb about dnso Arc you

75
00:03:09,120 --> 00:03:11,159
know why does it exist and inside that

76
00:03:11,159 --> 00:03:12,599
blurb was the thought experiment what

77
00:03:12,599 --> 00:03:14,819
would happen if we turned it off

78
00:03:14,819 --> 00:03:16,860
the DNS just turned it off and the

79
00:03:16,860 --> 00:03:19,140
answer is that's it there's nothing left

80
00:03:19,140 --> 00:03:21,659
it's gone the internet itself

81
00:03:21,659 --> 00:03:24,420
and so you can understand at a policy

82
00:03:24,420 --> 00:03:25,920
level

83
00:03:25,920 --> 00:03:28,140
having your entire infrastructure

84
00:03:28,140 --> 00:03:30,720
dependent on folk who really aren't

85
00:03:30,720 --> 00:03:33,659
accountable inside your framework is not

86
00:03:33,659 --> 00:03:36,239
the best and most ideal solution

87
00:03:36,239 --> 00:03:38,640
and when we look at the motivations

88
00:03:38,640 --> 00:03:41,040
behind that recent proposal which is

89
00:03:41,040 --> 00:03:43,799
still active on DNS for EU

90
00:03:43,799 --> 00:03:47,879
it seems to me personally that

91
00:03:47,879 --> 00:03:50,099
some of that thinking was there even

92
00:03:50,099 --> 00:03:52,500
though no one said it even though no one

93
00:03:52,500 --> 00:03:53,459
said it

94
00:03:53,459 --> 00:03:56,040
and it's kind of interesting because

95
00:03:56,040 --> 00:03:59,220
the key sentence in that entire thing is

96
00:03:59,220 --> 00:04:03,959
this measurement of the resolvers we use

97
00:04:03,959 --> 00:04:05,879
what does it mean

98
00:04:05,879 --> 00:04:08,159
and you know in the DNS almost nothing

99
00:04:08,159 --> 00:04:09,900
happens at face value

100
00:04:09,900 --> 00:04:13,620
and if you really want to measure the

101
00:04:13,620 --> 00:04:15,959
resolvers we use

102
00:04:15,959 --> 00:04:18,660
then the question is what should we

103
00:04:18,660 --> 00:04:19,918
measure

104
00:04:19,918 --> 00:04:21,899
and what does that measurement actually

105
00:04:21,899 --> 00:04:24,960
inform us in a policy sense and that's

106
00:04:24,960 --> 00:04:26,580
sort of where we embarked in this

107
00:04:26,580 --> 00:04:28,800
process to try and understand what's

108
00:04:28,800 --> 00:04:29,820
going on

109
00:04:29,820 --> 00:04:32,040
now as I think all of you would know by

110
00:04:32,040 --> 00:04:34,500
now and if you're not see me later we

111
00:04:34,500 --> 00:04:37,500
use a massive measurement platform based

112
00:04:37,500 --> 00:04:39,660
around Google ads

113
00:04:39,660 --> 00:04:41,639
ads are everywhere you've seen them

114
00:04:41,639 --> 00:04:43,860
everyone sees them very hard to stop

115
00:04:43,860 --> 00:04:46,800
them in most places and the ad has a

116
00:04:46,800 --> 00:04:47,699
script

117
00:04:47,699 --> 00:04:50,460
all ads have scripts and the script runs

118
00:04:50,460 --> 00:04:52,139
when the ad is impressed you don't have

119
00:04:52,139 --> 00:04:53,580
to click you don't have to do anything

120
00:04:53,580 --> 00:04:57,180
the ad just does stuff now we launched

121
00:04:57,180 --> 00:04:59,520
about 20 million of these ads a day and

122
00:04:59,520 --> 00:05:02,220
Google very politely splashes them all

123
00:05:02,220 --> 00:05:04,440
over the planet even in the Pharaoh

124
00:05:04,440 --> 00:05:05,820
Islands

125
00:05:05,820 --> 00:05:07,500
um and so we get a relatively

126
00:05:07,500 --> 00:05:09,780
comprehensive and Broad View

127
00:05:09,780 --> 00:05:13,139
of the network of all of the network at

128
00:05:13,139 --> 00:05:16,620
the level of users and browsers

129
00:05:16,620 --> 00:05:20,280
iot no any other piece of infrastructure

130
00:05:20,280 --> 00:05:23,100
no this is about where ADS go so with

131
00:05:23,100 --> 00:05:25,560
that filter in mind this is what we're

132
00:05:25,560 --> 00:05:26,639
looking at

133
00:05:26,639 --> 00:05:29,400
now the way the ad works is actually

134
00:05:29,400 --> 00:05:32,039
interesting in this respect that when

135
00:05:32,039 --> 00:05:34,039
the ad is impressed

136
00:05:34,039 --> 00:05:38,280
we over there in the ad Factory that

137
00:05:38,280 --> 00:05:40,620
actually created the campaign get a

138
00:05:40,620 --> 00:05:42,060
notification

139
00:05:42,060 --> 00:05:46,259
so we see a message coming out as a URL

140
00:05:46,259 --> 00:05:50,220
fetch from the party running the ad

141
00:05:50,220 --> 00:05:53,100
so to the extent that IP addresses are

142
00:05:53,100 --> 00:05:54,960
you and in the world of private relay

143
00:05:54,960 --> 00:05:57,840
and vpns that's not strictly true for a

144
00:05:57,840 --> 00:06:00,300
lot of folk but to the extent that

145
00:06:00,300 --> 00:06:03,360
that's possible we geolocate we try and

146
00:06:03,360 --> 00:06:05,820
figure the country the we certainly try

147
00:06:05,820 --> 00:06:07,560
and figure the origin as we try and

148
00:06:07,560 --> 00:06:09,600
figure out where this ad is being placed

149
00:06:09,600 --> 00:06:10,800
yay

150
00:06:10,800 --> 00:06:14,039
and we account in the domain name system

151
00:06:14,039 --> 00:06:16,080
that the DNS queries that come

152
00:06:16,080 --> 00:06:18,720
afterwards all of the queries that user

153
00:06:18,720 --> 00:06:20,940
is going to make when they run the test

154
00:06:20,940 --> 00:06:22,979
these names are unique

155
00:06:22,979 --> 00:06:25,259
the DNS labels is actually a piece of

156
00:06:25,259 --> 00:06:27,900
microcode because if you do your server

157
00:06:27,900 --> 00:06:29,400
right you can embed a whole bunch of

158
00:06:29,400 --> 00:06:31,800
information in the query that affects

159
00:06:31,800 --> 00:06:34,199
the way the server is going to answer

160
00:06:34,199 --> 00:06:36,180
the user asks the question to the

161
00:06:36,180 --> 00:06:37,979
recursive resolver it's a unique

162
00:06:37,979 --> 00:06:40,440
question there is no case to look up

163
00:06:40,440 --> 00:06:43,080
because it's Unique so it comes to our

164
00:06:43,080 --> 00:06:45,479
authoritative service sooner or later

165
00:06:45,479 --> 00:06:48,780
what we see is the recursive resolver

166
00:06:48,780 --> 00:06:51,419
that asks a question and that embedded

167
00:06:51,419 --> 00:06:53,880
identifier that we put in the DNS query

168
00:06:53,880 --> 00:06:56,400
name that says I know where this came

169
00:06:56,400 --> 00:06:57,660
from originally

170
00:06:57,660 --> 00:06:59,880
so now in this measurement we're able to

171
00:06:59,880 --> 00:07:04,560
match some approximation of the user

172
00:07:04,560 --> 00:07:07,680
vpns Etc notwithstanding to the

173
00:07:07,680 --> 00:07:09,960
recursive resolver that actually

174
00:07:09,960 --> 00:07:12,840
generated that query that we saw in our

175
00:07:12,840 --> 00:07:14,699
authoritative server

176
00:07:14,699 --> 00:07:18,060
now we made this one unlike other tests

177
00:07:18,060 --> 00:07:19,919
where we deliberately muck around and go

178
00:07:19,919 --> 00:07:22,199
nah you didn't want to know that we

179
00:07:22,199 --> 00:07:24,419
answer all the time immediately you know

180
00:07:24,419 --> 00:07:26,400
immediately Al quad a here's an answer

181
00:07:26,400 --> 00:07:28,080
and it's a good answer you can use it

182
00:07:28,080 --> 00:07:31,020
it's unsigned and everything is small

183
00:07:31,020 --> 00:07:34,199
neatly within 512 no fragmentation here

184
00:07:34,199 --> 00:07:36,479
and what we're trying to do is to

185
00:07:36,479 --> 00:07:38,819
minimize all of the reasons why DNS

186
00:07:38,819 --> 00:07:40,740
tries again tries different resolvers

187
00:07:40,740 --> 00:07:43,740
yada yada you ask you get an answer fast

188
00:07:43,740 --> 00:07:45,539
as we can

189
00:07:45,539 --> 00:07:46,560
um

190
00:07:46,560 --> 00:07:48,180
we also

191
00:07:48,180 --> 00:07:52,020
try to understand which resolver are you

192
00:07:52,020 --> 00:07:53,639
actually using now of course Google

193
00:07:53,639 --> 00:07:55,919
doesn't ask authoritatives from all

194
00:07:55,919 --> 00:07:58,080
eights as a source there's a whole bunch

195
00:07:58,080 --> 00:08:01,020
of engines with their own addresses and

196
00:08:01,020 --> 00:08:03,960
uncovering them sometimes is easy

197
00:08:03,960 --> 00:08:06,720
Google published those addresses and

198
00:08:06,720 --> 00:08:09,000
sometimes not so easy

199
00:08:09,000 --> 00:08:11,400
some do some don't and the ones that

200
00:08:11,400 --> 00:08:14,160
don't we actually use ripe Atlas and we

201
00:08:14,160 --> 00:08:16,199
actually seed a whole bunch of queries

202
00:08:16,199 --> 00:08:19,680
across where ripe Atlas is to these open

203
00:08:19,680 --> 00:08:22,500
recursive resolvers against our resolver

204
00:08:22,500 --> 00:08:24,360
and what we what we actually see at the

205
00:08:24,360 --> 00:08:26,639
authoritative server are all of the back

206
00:08:26,639 --> 00:08:28,560
end addresses that are used by those

207
00:08:28,560 --> 00:08:31,139
open recursor resolvers so that's how we

208
00:08:31,139 --> 00:08:34,140
can map IP addresses of recursives into

209
00:08:34,140 --> 00:08:36,958
the front-end service for things like

210
00:08:36,958 --> 00:08:40,620
Open DNS ad guard etc etc

211
00:08:40,620 --> 00:08:43,979
so we can now map based on those IP

212
00:08:43,979 --> 00:08:45,060
addresses

213
00:08:45,060 --> 00:08:48,540
the resolvers that people use

214
00:08:48,540 --> 00:08:51,480
to the as of the end user that got the

215
00:08:51,480 --> 00:08:53,339
ad

216
00:08:53,339 --> 00:08:55,440
um now we actually do a number of

217
00:08:55,440 --> 00:08:57,360
classifications here and and they're

218
00:08:57,360 --> 00:08:59,760
pretty broad because I don't think I

219
00:08:59,760 --> 00:09:02,519
care what resolver you individually use

220
00:09:02,519 --> 00:09:04,200
that's not really the name of the game

221
00:09:04,200 --> 00:09:07,680
it's all about big numbers I care if

222
00:09:07,680 --> 00:09:11,279
you're using the resolver your ISP gave

223
00:09:11,279 --> 00:09:14,339
you or something else in the same as

224
00:09:14,339 --> 00:09:16,740
which pretty much suggests you haven't

225
00:09:16,740 --> 00:09:18,600
mucked with a thing it's just the

226
00:09:18,600 --> 00:09:21,779
default knock yourself out right

227
00:09:21,779 --> 00:09:24,899
I care if it's a known Open DNS resolver

228
00:09:24,899 --> 00:09:27,540
now what is a known Open DNS resolver

229
00:09:27,540 --> 00:09:29,640
there are probably still millions that

230
00:09:29,640 --> 00:09:31,740
are open DNS resolvers but most of them

231
00:09:31,740 --> 00:09:34,680
are accidental so we found about 20 that

232
00:09:34,680 --> 00:09:37,200
seem pretty common oddly enough a whole

233
00:09:37,200 --> 00:09:39,660
bunch of them are Chinese and only work

234
00:09:39,660 --> 00:09:41,700
in the Chinese Community but there are

235
00:09:41,700 --> 00:09:44,399
others and we kind of got a arbitrary

236
00:09:44,399 --> 00:09:45,720
list

237
00:09:45,720 --> 00:09:49,080
um we also look for resolvers that

238
00:09:49,080 --> 00:09:52,320
aren't in the same as are not but

239
00:09:52,320 --> 00:09:54,720
geolocate to the extent geolocation

240
00:09:54,720 --> 00:09:57,480
Works into the same country as the user

241
00:09:57,480 --> 00:09:59,760
now sometimes the ISP and there's a

242
00:09:59,760 --> 00:10:01,800
couple in Sweden that put their DNS

243
00:10:01,800 --> 00:10:04,080
resolvers into a different as but it's

244
00:10:04,080 --> 00:10:05,519
all in Sweden

245
00:10:05,519 --> 00:10:07,620
so in some ways that's kind of same

246
00:10:07,620 --> 00:10:10,500
country but different as is almost the

247
00:10:10,500 --> 00:10:12,839
same case the same as and last but not

248
00:10:12,839 --> 00:10:15,839
least those weirdos ones where the

249
00:10:15,839 --> 00:10:17,880
resolver seems to be from somewhere

250
00:10:17,880 --> 00:10:21,420
whales and the user is you know in a

251
00:10:21,420 --> 00:10:22,500
different country in a different

252
00:10:22,500 --> 00:10:24,420
continent so those are the categories we

253
00:10:24,420 --> 00:10:27,060
use this slide you need to actually look

254
00:10:27,060 --> 00:10:28,800
online but I've summarized the outcome

255
00:10:28,800 --> 00:10:31,560
is what we've seen in the EU region for

256
00:10:31,560 --> 00:10:35,160
the last uh 18 months the blue line at

257
00:10:35,160 --> 00:10:38,339
the top says around about 70 of

258
00:10:38,339 --> 00:10:39,899
measurements and I'll use the word

259
00:10:39,899 --> 00:10:41,519
measurement because this is really what

260
00:10:41,519 --> 00:10:44,760
does it mean see around 70 of

261
00:10:44,760 --> 00:10:46,980
measurements are the same as

262
00:10:46,980 --> 00:10:49,260
you're not mucking with the defaults the

263
00:10:49,260 --> 00:10:50,760
next one the red line

264
00:10:50,760 --> 00:10:53,899
is where the query reappears from Google

265
00:10:53,899 --> 00:10:55,680
sixteen percent

266
00:10:55,680 --> 00:10:58,380
which is relatively significant uh eight

267
00:10:58,380 --> 00:11:01,320
percent is it came from the same country

268
00:11:01,320 --> 00:11:04,680
not the same as and five percent is the

269
00:11:04,680 --> 00:11:06,899
next open resolver there are more but

270
00:11:06,899 --> 00:11:08,579
five percent that the next the next

271
00:11:08,579 --> 00:11:11,220
largest which is the cloudflare all ones

272
00:11:11,220 --> 00:11:15,480
open recursive resolver so 70 16 8 and

273
00:11:15,480 --> 00:11:16,920
5.

274
00:11:16,920 --> 00:11:19,680
for the measurements we did

275
00:11:19,680 --> 00:11:22,680
and it's a single query just one query

276
00:11:22,680 --> 00:11:25,500
one unique domain name only appears once

277
00:11:25,500 --> 00:11:26,760
in the DNS

278
00:11:26,760 --> 00:11:30,060
now you'd think because I'm answering as

279
00:11:30,060 --> 00:11:32,579
fast as I can there's one query being

280
00:11:32,579 --> 00:11:34,980
seen at the authoritative server you'd

281
00:11:34,980 --> 00:11:37,079
be wrong that only happens 30 of the

282
00:11:37,079 --> 00:11:39,779
time because not only is the DNS

283
00:11:39,779 --> 00:11:41,940
designed by folk or obsessive compulsive

284
00:11:41,940 --> 00:11:44,459
it's designed by folk who are incredibly

285
00:11:44,459 --> 00:11:47,459
impatient and even when you ask hey you

286
00:11:47,459 --> 00:11:50,279
tend to ask b as well and c and d and e

287
00:11:50,279 --> 00:11:52,019
and so

288
00:11:52,019 --> 00:11:54,420
30 of the time even if there are

289
00:11:54,420 --> 00:11:56,040
multiple queries they come from the same

290
00:11:56,040 --> 00:11:59,060
IP address but sixty percent of the time

291
00:11:59,060 --> 00:12:02,760
two or more IP addresses are involved in

292
00:12:02,760 --> 00:12:04,500
making that query

293
00:12:04,500 --> 00:12:07,980
right most of the time it's all in the

294
00:12:07,980 --> 00:12:09,540
same as

295
00:12:09,540 --> 00:12:11,700
it's as if they're a server farms and

296
00:12:11,700 --> 00:12:13,200
server Farms are pretty common in the

297
00:12:13,200 --> 00:12:15,600
DNS but the load balancing is not

298
00:12:15,600 --> 00:12:18,000
exactly clean and the query is getting

299
00:12:18,000 --> 00:12:20,220
replicated that's a cumulative

300
00:12:20,220 --> 00:12:23,279
distribution look closely uh

301
00:12:23,279 --> 00:12:26,279
it's even too vague for me to see but in

302
00:12:26,279 --> 00:12:27,600
the far right

303
00:12:27,600 --> 00:12:30,660
there's always outliers One initial

304
00:12:30,660 --> 00:12:33,300
query and I see more than a hundred

305
00:12:33,300 --> 00:12:35,300
different IP addresses coming back

306
00:12:35,300 --> 00:12:37,800
within 20 seconds going

307
00:12:37,800 --> 00:12:39,779
answer answer answer answer answer this

308
00:12:39,779 --> 00:12:41,700
is a really pressing question and it's

309
00:12:41,700 --> 00:12:43,440
kind of bizarre that there's some

310
00:12:43,440 --> 00:12:46,800
relatively big amplification tiny amount

311
00:12:46,800 --> 00:12:49,920
but almost inexplicable why the query

312
00:12:49,920 --> 00:12:51,839
gets farmed across so many different IP

313
00:12:51,839 --> 00:12:53,459
addresses

314
00:12:53,459 --> 00:12:57,180
lots of theories including Dynamic

315
00:12:57,180 --> 00:13:00,240
Source addressing where a resolver will

316
00:13:00,240 --> 00:13:01,860
use a different Source address and it's

317
00:13:01,860 --> 00:13:04,380
possible in V6 to go through that for

318
00:13:04,380 --> 00:13:06,540
every single query because you know you

319
00:13:06,540 --> 00:13:07,560
can

320
00:13:07,560 --> 00:13:09,360
um

321
00:13:09,360 --> 00:13:11,220
most of us

322
00:13:11,220 --> 00:13:14,339
see these individual what I call stub

323
00:13:14,339 --> 00:13:15,839
queries that

324
00:13:15,839 --> 00:13:19,500
for each query domain 3.23 distinct

325
00:13:19,500 --> 00:13:22,079
resolver addresses and the real question

326
00:13:22,079 --> 00:13:23,399
is

327
00:13:23,399 --> 00:13:27,139
if you are using two resolvers or three

328
00:13:27,139 --> 00:13:30,079
should I count them all

329
00:13:30,079 --> 00:13:33,600
they're seeing your queries

330
00:13:33,600 --> 00:13:36,959
but what does it mean in the measurement

331
00:13:36,959 --> 00:13:39,120
do we sort of say oh you're using Google

332
00:13:39,120 --> 00:13:41,579
and cloudflare and your ISP so we'll put

333
00:13:41,579 --> 00:13:43,019
a one in every box

334
00:13:43,019 --> 00:13:45,300
or do we decide between them or we do a

335
00:13:45,300 --> 00:13:47,700
third of a hit for each so what do you

336
00:13:47,700 --> 00:13:49,380
do with these kind of multiples that

337
00:13:49,380 --> 00:13:51,660
happen sixty percent of the time

338
00:13:51,660 --> 00:13:53,519
ER

339
00:13:53,519 --> 00:13:55,500
okay so we don't know what we're

340
00:13:55,500 --> 00:13:57,180
measuring

341
00:13:57,180 --> 00:13:58,740
we really don't know what we're

342
00:13:58,740 --> 00:13:59,700
measuring

343
00:13:59,700 --> 00:14:01,980
so is the question

344
00:14:01,980 --> 00:14:05,399
who might see your query

345
00:14:05,399 --> 00:14:08,399
who could possibly see your query and

346
00:14:08,399 --> 00:14:11,220
that's a question we thought okay let's

347
00:14:11,220 --> 00:14:14,940
go down that path to see how many folk

348
00:14:14,940 --> 00:14:17,700
could possibly send their queries to

349
00:14:17,700 --> 00:14:20,040
Google cloudflare or anyone else

350
00:14:20,040 --> 00:14:21,540
so

351
00:14:21,540 --> 00:14:24,540
what we do is we always answer serve

352
00:14:24,540 --> 00:14:25,440
fail

353
00:14:25,440 --> 00:14:28,260
because serve fail at the moment

354
00:14:28,260 --> 00:14:31,279
extended DNS error codes of your enemy

355
00:14:31,279 --> 00:14:33,540
servile causes the client and the

356
00:14:33,540 --> 00:14:35,700
recursives to try the next authoritative

357
00:14:35,700 --> 00:14:37,920
server they they sort of tried an X

358
00:14:37,920 --> 00:14:40,019
recursive at the client side so what

359
00:14:40,019 --> 00:14:41,820
we're doing is making sure the client by

360
00:14:41,820 --> 00:14:43,920
always answering server fail goes

361
00:14:43,920 --> 00:14:46,199
through all of the locally configured

362
00:14:46,199 --> 00:14:48,480
recursive resolvers they'll cycle

363
00:14:48,480 --> 00:14:50,579
through until they find an answer there

364
00:14:50,579 --> 00:14:52,860
is no answer they'll either time out or

365
00:14:52,860 --> 00:14:54,779
exhaust the list

366
00:14:54,779 --> 00:14:58,339
so now we measure that

367
00:14:58,339 --> 00:15:02,040
72 percent use their local ISP the

368
00:15:02,040 --> 00:15:04,860
Google number is climbed by 10 percent

369
00:15:04,860 --> 00:15:09,180
around 26 of our measurement samples now

370
00:15:09,180 --> 00:15:10,920
are seen by Google

371
00:15:10,920 --> 00:15:13,740
but we are pushing it's always serve

372
00:15:13,740 --> 00:15:15,240
file so if Google is number two or

373
00:15:15,240 --> 00:15:17,519
number three if all else fails let's try

374
00:15:17,519 --> 00:15:20,880
Google all else has failed let's try

375
00:15:20,880 --> 00:15:23,040
Google so it is an artificial

376
00:15:23,040 --> 00:15:24,899
measurement cloudflare has risen to six

377
00:15:24,899 --> 00:15:27,180
percent by that methodology

378
00:15:27,180 --> 00:15:29,959
so this is the folk who might be looking

379
00:15:29,959 --> 00:15:32,699
if you're asking a dud question

380
00:15:32,699 --> 00:15:34,199
if you're asking a question that

381
00:15:34,199 --> 00:15:36,360
actually results in serve fail if all

382
00:15:36,360 --> 00:15:38,220
else fails they might see your queries

383
00:15:38,220 --> 00:15:41,399
so subtly different question

384
00:15:41,399 --> 00:15:43,620
who sees the resolver now because we're

385
00:15:43,620 --> 00:15:46,019
doing serve fail most folk do have

386
00:15:46,019 --> 00:15:49,860
backups so only 12 of the time do we see

387
00:15:49,860 --> 00:15:52,560
that single IP address making the query

388
00:15:52,560 --> 00:15:55,339
only 12 percent of folk have no plan B

389
00:15:55,339 --> 00:15:58,139
everyone else has a plan B of some sort

390
00:15:58,139 --> 00:16:00,540
where we get the query from different IP

391
00:16:00,540 --> 00:16:03,360
addresses 30 percent of cases are two or

392
00:16:03,360 --> 00:16:05,459
more and the number goes all the way out

393
00:16:05,459 --> 00:16:08,639
to a little over a thousand different IP

394
00:16:08,639 --> 00:16:11,940
addresses in 20 seconds on that extreme

395
00:16:11,940 --> 00:16:13,560
Edge case

396
00:16:13,560 --> 00:16:16,380
I don't know who it is good luck to them

397
00:16:16,380 --> 00:16:17,540
you know

398
00:16:17,540 --> 00:16:19,800
disproportionate amount of traffic are

399
00:16:19,800 --> 00:16:22,740
we there not really because now we

400
00:16:22,740 --> 00:16:24,600
actually want to know who do you believe

401
00:16:24,600 --> 00:16:27,899
not who sees you who do you believe

402
00:16:27,899 --> 00:16:29,579
and so in the third pass what we

403
00:16:29,579 --> 00:16:31,740
actually do is just simply look at the

404
00:16:31,740 --> 00:16:33,839
first result of the the first resolver

405
00:16:33,839 --> 00:16:36,180
that asks us the question because we're

406
00:16:36,180 --> 00:16:37,579
going to answer everyone

407
00:16:37,579 --> 00:16:40,199
presumably the first recursive that gets

408
00:16:40,199 --> 00:16:41,820
it is the one that passes back to the

409
00:16:41,820 --> 00:16:43,800
user we can't tell but that's what we're

410
00:16:43,800 --> 00:16:44,940
trying to see

411
00:16:44,940 --> 00:16:47,100
that's the answer

412
00:16:47,100 --> 00:16:49,019
and all of a sudden it looks very

413
00:16:49,019 --> 00:16:51,959
different Google is now back to 15 on

414
00:16:51,959 --> 00:16:55,680
first answerer it sees far fewer of our

415
00:16:55,680 --> 00:16:57,779
sample measurements and so we can try

416
00:16:57,779 --> 00:16:59,279
and put this together

417
00:16:59,279 --> 00:17:02,639
and what's Google's share in the EU

418
00:17:02,639 --> 00:17:05,280
and if you try and think of users

419
00:17:05,280 --> 00:17:07,380
then the real question is who might see

420
00:17:07,380 --> 00:17:09,660
you Google might see 26 of these

421
00:17:09,660 --> 00:17:10,740
measurements

422
00:17:10,740 --> 00:17:13,559
who is going to see you even if you

423
00:17:13,559 --> 00:17:16,140
don't believe him it's down to 16 who do

424
00:17:16,140 --> 00:17:19,319
you believe first answer uh Google's

425
00:17:19,319 --> 00:17:21,119
down to 15 percent

426
00:17:21,119 --> 00:17:23,099
but who's we

427
00:17:23,099 --> 00:17:25,079
because we is a really interesting

428
00:17:25,079 --> 00:17:27,000
question there are Enterprise users

429
00:17:27,000 --> 00:17:29,400
there are you and I as mass-market

430
00:17:29,400 --> 00:17:31,860
consumer users and all of these

431
00:17:31,860 --> 00:17:33,780
Enterprise customers if you look at the

432
00:17:33,780 --> 00:17:36,780
DNS are much more prone to actually

433
00:17:36,780 --> 00:17:38,880
changing their DNS

434
00:17:38,880 --> 00:17:42,240
let's take the big consumer isps and

435
00:17:42,240 --> 00:17:44,820
only look at them as the origin as so I

436
00:17:44,820 --> 00:17:46,799
get rid of a whole bunch of data centers

437
00:17:46,799 --> 00:17:49,080
Enterprise users and just look at the

438
00:17:49,080 --> 00:17:51,600
folk who oddly enough aren't doing vpns

439
00:17:51,600 --> 00:17:54,360
either I'm actually seeing those folk

440
00:17:54,360 --> 00:17:57,840
located in their home consumer Network

441
00:17:57,840 --> 00:17:59,700
wow

442
00:17:59,700 --> 00:18:01,559
if you look at it now Google's down to

443
00:18:01,559 --> 00:18:03,539
almost nothing four percent cloudflow

444
00:18:03,539 --> 00:18:04,980
down at one percent

445
00:18:04,980 --> 00:18:07,559
the same I same as is now all the way up

446
00:18:07,559 --> 00:18:11,460
to 87 most consumers don't play with the

447
00:18:11,460 --> 00:18:14,400
buttons and certainly in the EU most

448
00:18:14,400 --> 00:18:17,760
isps do their own resolution they don't

449
00:18:17,760 --> 00:18:19,500
forward off to some other resolver

450
00:18:19,500 --> 00:18:21,840
different in Africa but EU that's the

451
00:18:21,840 --> 00:18:24,720
case so where are we I can add a fourth

452
00:18:24,720 --> 00:18:27,299
column that kind of goes in the consumer

453
00:18:27,299 --> 00:18:30,360
World 87 just use the default Google

454
00:18:30,360 --> 00:18:32,520
share in that consumer world is all the

455
00:18:32,520 --> 00:18:34,919
way down to four percent of users most

456
00:18:34,919 --> 00:18:37,020
consumers don't play

457
00:18:37,020 --> 00:18:41,419
so most users use their ISP resolver

458
00:18:41,419 --> 00:18:44,640
additional users they use resolvers in

459
00:18:44,640 --> 00:18:45,840
different networks but in the same

460
00:18:45,840 --> 00:18:49,080
country Enterprises are different

461
00:18:49,080 --> 00:18:51,419
what we didn't actually look at

462
00:18:51,419 --> 00:18:54,179
who gets to process your query over time

463
00:18:54,179 --> 00:18:57,360
who passes queries on to others there's

464
00:18:57,360 --> 00:19:00,120
a huge business in query log farming we

465
00:19:00,120 --> 00:19:01,679
could see it but we didn't look in this

466
00:19:01,679 --> 00:19:03,299
particular exercise

467
00:19:03,299 --> 00:19:05,580
what we did do though

468
00:19:05,580 --> 00:19:08,760
is actually look at the time

469
00:19:08,760 --> 00:19:10,980
because the query has the time the

470
00:19:10,980 --> 00:19:12,780
original query was the query name was

471
00:19:12,780 --> 00:19:15,900
formed and we go who's replaying logs at

472
00:19:15,900 --> 00:19:18,360
us and how many are being replayed

473
00:19:18,360 --> 00:19:20,640
and the answer is a lot

474
00:19:20,640 --> 00:19:23,580
one day we get 612 million DNS queries

475
00:19:23,580 --> 00:19:26,700
23 million or around four percent are

476
00:19:26,700 --> 00:19:28,080
older than an hour

477
00:19:28,080 --> 00:19:29,760
the original ad has long since

478
00:19:29,760 --> 00:19:32,039
disappeared the reason for the query has

479
00:19:32,039 --> 00:19:34,679
gone away yet we're seeing this savagely

480
00:19:34,679 --> 00:19:37,860
persistent Replay that most of the 50

481
00:19:37,860 --> 00:19:41,280
are between 1 and 12 days old some are

482
00:19:41,280 --> 00:19:43,860
all the way out to years some of your

483
00:19:43,860 --> 00:19:46,320
logs that you replay are old and

484
00:19:46,320 --> 00:19:48,600
venerable logs delete them they're not

485
00:19:48,600 --> 00:19:50,100
very good

486
00:19:50,100 --> 00:19:52,860
um the responses that we do have ttls of

487
00:19:52,860 --> 00:19:54,600
only 60 seconds so the original case

488
00:19:54,600 --> 00:19:56,940
should have gone so the DNS is

489
00:19:56,940 --> 00:19:59,340
phenomenally persistent but that's kind

490
00:19:59,340 --> 00:20:01,860
of a different idea who gets to see your

491
00:20:01,860 --> 00:20:04,679
query as distinct from who do you

492
00:20:04,679 --> 00:20:06,600
believe who are you going to actually

493
00:20:06,600 --> 00:20:08,580
take as an answer

494
00:20:08,580 --> 00:20:11,700
so back to DNS for EU

495
00:20:11,700 --> 00:20:14,340
is Google dominant in the consumer world

496
00:20:14,340 --> 00:20:17,460
of the European Union in the consumer

497
00:20:17,460 --> 00:20:19,919
world not the Enterprise world and the

498
00:20:19,919 --> 00:20:21,720
real answer is well

499
00:20:21,720 --> 00:20:26,640
yes no or if you like No And yes it's

500
00:20:26,640 --> 00:20:29,760
very hard to tell and quite frankly most

501
00:20:29,760 --> 00:20:32,640
users are actually led by their ISP

502
00:20:32,640 --> 00:20:35,520
divided provided default DNS resolver

503
00:20:35,520 --> 00:20:38,400
there's certainly an undeniable issue

504
00:20:38,400 --> 00:20:43,020
about the way the DNS resolution Market

505
00:20:43,020 --> 00:20:45,480
is dominated by a single us player

506
00:20:45,480 --> 00:20:48,419
that's undeniable but to what extent it

507
00:20:48,419 --> 00:20:50,760
creates policy issues for all other

508
00:20:50,760 --> 00:20:52,919
countries and their issues around

509
00:20:52,919 --> 00:20:55,620
consumer protection that's a much harder

510
00:20:55,620 --> 00:20:57,720
question to answer because when you look

511
00:20:57,720 --> 00:20:59,940
at this data what superficially might

512
00:20:59,940 --> 00:21:02,700
look like wow 25 of European users are

513
00:21:02,700 --> 00:21:04,080
sending all their information to Google

514
00:21:04,080 --> 00:21:06,480
is not correct

515
00:21:06,480 --> 00:21:09,240
it really isn't it's not like that and

516
00:21:09,240 --> 00:21:11,280
what it really I suppose means is that

517
00:21:11,280 --> 00:21:14,400
measurement is interesting measurement

518
00:21:14,400 --> 00:21:17,220
is difficult but interpreting that

519
00:21:17,220 --> 00:21:19,200
measurement is perhaps even more

520
00:21:19,200 --> 00:21:20,940
challenging than setting the measurement

521
00:21:20,940 --> 00:21:23,280
up in the first place because these

522
00:21:23,280 --> 00:21:25,380
numbers can mislead you in all kinds of

523
00:21:25,380 --> 00:21:28,020
odd ways and I'm not saying that DNS for

524
00:21:28,020 --> 00:21:29,820
EU is based on that or not that's not

525
00:21:29,820 --> 00:21:32,100
the issue but what I am trying to say is

526
00:21:32,100 --> 00:21:34,320
when you start doing this measurement

527
00:21:34,320 --> 00:21:36,780
qualifying and precisely quantifying

528
00:21:36,780 --> 00:21:38,760
that measurement and aiding its

529
00:21:38,760 --> 00:21:40,980
interpretation is essential

530
00:21:40,980 --> 00:21:43,559
and I think I've done it in two minutes

531
00:21:43,559 --> 00:21:46,940
for questions thank you

532
00:21:47,220 --> 00:21:49,400
wow four and a half

533
00:21:49,400 --> 00:21:52,820
thank you very much

534
00:21:53,220 --> 00:21:54,659
I thought the protocol was we all

535
00:21:54,659 --> 00:21:56,159
entered our questions in matter most but

536
00:21:56,159 --> 00:21:58,200
I'm here at the mic you said I'm pretty

537
00:21:58,200 --> 00:21:59,760
sure I heard you say that extended DNS

538
00:21:59,760 --> 00:22:01,559
errors were your enemy would you like to

539
00:22:01,559 --> 00:22:03,780
elaborate on that

540
00:22:03,780 --> 00:22:07,500
um the issue is serve fail has been used

541
00:22:07,500 --> 00:22:11,220
by dnssec and a lot of other cases and I

542
00:22:11,220 --> 00:22:13,200
actually rely on that to do a whole

543
00:22:13,200 --> 00:22:14,520
bunch of other tests particularly about

544
00:22:14,520 --> 00:22:17,220
the way dnssec works and I was relying

545
00:22:17,220 --> 00:22:19,260
on a similar mechanism where I basically

546
00:22:19,260 --> 00:22:21,659
say back to the client it's actually not

547
00:22:21,659 --> 00:22:24,900
a Serv fail it's a keep going through

548
00:22:24,900 --> 00:22:27,299
the list kind of error and that's what I

549
00:22:27,299 --> 00:22:29,280
really mean and when you start to get

550
00:22:29,280 --> 00:22:31,500
extended errors that go actually this

551
00:22:31,500 --> 00:22:34,620
went wrong and you should only do a much

552
00:22:34,620 --> 00:22:37,860
smaller response because like validation

553
00:22:37,860 --> 00:22:40,260
failure you're retrying a different

554
00:22:40,260 --> 00:22:41,640
resolver

555
00:22:41,640 --> 00:22:44,340
doesn't really make a lot of sense and

556
00:22:44,340 --> 00:22:47,280
things like Google for example don't

557
00:22:47,280 --> 00:22:49,919
and so for this kind of experiment where

558
00:22:49,919 --> 00:22:52,799
I'm trying to flush out everything I

559
00:22:52,799 --> 00:22:54,360
need an error condition that kind of

560
00:22:54,360 --> 00:22:56,940
goes just press on you know the answer

561
00:22:56,940 --> 00:22:58,740
is coming if only you found the right

562
00:22:58,740 --> 00:23:00,840
recursive to answer it

563
00:23:00,840 --> 00:23:03,120
not really but you know that's what's

564
00:23:03,120 --> 00:23:04,919
going on in the experiment so that was

565
00:23:04,919 --> 00:23:07,340
the only reason why it was ingest

566
00:23:07,340 --> 00:23:10,980
extended error is a good thing right for

567
00:23:10,980 --> 00:23:13,080
everyone except me

568
00:23:13,080 --> 00:23:14,940
unless you want to build Jeff's DNS

569
00:23:14,940 --> 00:23:17,100
which you know would be great but

570
00:23:17,100 --> 00:23:21,470
wouldn't either okay thank you very much

571
00:23:21,470 --> 00:23:25,009
[Applause]

572
00:23:25,559 --> 00:23:28,860
Jeff our next speaker is

573
00:23:28,860 --> 00:23:30,240
very low

574
00:23:30,240 --> 00:23:33,059
with uh the title which is near and dear

575
00:23:33,059 --> 00:23:35,640
to my heart the bizarre and unusual uses

576
00:23:35,640 --> 00:23:36,960
of DNS

577
00:23:36,960 --> 00:23:39,559
Peter

578
00:23:42,780 --> 00:23:44,580
hi everyone

579
00:23:44,580 --> 00:23:46,559
uh my name is Peter Lowe I'm the

580
00:23:46,559 --> 00:23:48,720
principal security researcher at DNS

581
00:23:48,720 --> 00:23:49,559
filter

582
00:23:49,559 --> 00:23:51,299
and I spent a lot of time looking at

583
00:23:51,299 --> 00:23:53,880
domain names and stuff

584
00:23:53,880 --> 00:23:56,520
my talk is bizarre and unusual uses of

585
00:23:56,520 --> 00:24:00,000
DNS subtitle is rule 53 if you can think

586
00:24:00,000 --> 00:24:04,100
of it then someone's done it in the DNS

587
00:24:06,419 --> 00:24:07,559
so I thought of a bunch of different

588
00:24:07,559 --> 00:24:09,720
titles for this talk and spent a while

589
00:24:09,720 --> 00:24:11,760
on that actually the things people do

590
00:24:11,760 --> 00:24:13,919
with DNS or 20 wacky DNS tricks number

591
00:24:13,919 --> 00:24:16,440
five will shock you but I went with

592
00:24:16,440 --> 00:24:17,820
something a bit clickbaity in the end

593
00:24:17,820 --> 00:24:19,320
because I was hoping to get people to

594
00:24:19,320 --> 00:24:21,500
listen

595
00:24:21,780 --> 00:24:23,340
um so I should explain why I put this

596
00:24:23,340 --> 00:24:25,260
talk together is mostly John's fault

597
00:24:25,260 --> 00:24:29,340
John Todd he uh suggested that it might

598
00:24:29,340 --> 00:24:31,320
be possible for malware people to

599
00:24:31,320 --> 00:24:34,440
distribute actual malware via DNS which

600
00:24:34,440 --> 00:24:35,880
I think is a dangerous thing because now

601
00:24:35,880 --> 00:24:38,400
it's actually going to happen this is

602
00:24:38,400 --> 00:24:41,159
all part of our DNS abuse Sig work which

603
00:24:41,159 --> 00:24:44,520
we do for the thirst.org so if you are

604
00:24:44,520 --> 00:24:46,559
not familiar with that have a look

605
00:24:46,559 --> 00:24:49,860
um rule 34 implies that just thinking of

606
00:24:49,860 --> 00:24:52,919
something brings it into existence so

607
00:24:52,919 --> 00:24:54,780
please don't suggest anything too crazy

608
00:24:54,780 --> 00:24:57,840
because it might actually cause it to

609
00:24:57,840 --> 00:24:59,700
exist

610
00:24:59,700 --> 00:25:01,679
couple of notes and most of these things

611
00:25:01,679 --> 00:25:02,700
that I'm going to talk about aren't

612
00:25:02,700 --> 00:25:05,039
around anymore unfortunately

613
00:25:05,039 --> 00:25:06,840
um I thought I would have more time for

614
00:25:06,840 --> 00:25:08,520
this talk as well so there's quite a few

615
00:25:08,520 --> 00:25:10,200
slides and I hope we're going to get

616
00:25:10,200 --> 00:25:11,940
through them all and there's a bunch of

617
00:25:11,940 --> 00:25:13,500
links at the end for anybody who wants

618
00:25:13,500 --> 00:25:14,940
to download or check them out later on

619
00:25:14,940 --> 00:25:16,740
also I'm terrible at slides so I

620
00:25:16,740 --> 00:25:19,520
apologize in advance

621
00:25:19,740 --> 00:25:21,960
so we'll start off with some Trace

622
00:25:21,960 --> 00:25:23,880
routes these aren't technically a

623
00:25:23,880 --> 00:25:26,220
hundred percent DNS but

624
00:25:26,220 --> 00:25:29,520
um they qualify for the purposes of this

625
00:25:29,520 --> 00:25:31,260
talk at least anyway

626
00:25:31,260 --> 00:25:31,980
foreign

627
00:25:31,980 --> 00:25:34,200
this is the first one that I ever came

628
00:25:34,200 --> 00:25:37,440
across it's uh uh trace route that shows

629
00:25:37,440 --> 00:25:39,480
the scrolling text from Star Wars

630
00:25:39,480 --> 00:25:41,940
episode 4. it's by a guy called Ryan

631
00:25:41,940 --> 00:25:45,240
Weber from beagle.net and it popped up

632
00:25:45,240 --> 00:25:49,260
in uh 2013 is down now there's a story

633
00:25:49,260 --> 00:25:51,659
around about it where it went down

634
00:25:51,659 --> 00:25:55,440
because of a DDOS but some IPv6 versions

635
00:25:55,440 --> 00:25:58,020
appeared later on and it's gone but not

636
00:25:58,020 --> 00:26:00,539
forgotten

637
00:26:00,539 --> 00:26:02,700
another one is an extension that uses

638
00:26:02,700 --> 00:26:05,340
IPv6

639
00:26:05,340 --> 00:26:07,080
um apparently if you increase the number

640
00:26:07,080 --> 00:26:08,460
of hops then you get even more of it

641
00:26:08,460 --> 00:26:10,799
which I I didn't check out myself but

642
00:26:10,799 --> 00:26:12,659
it's a mysterious and kind of surreal

643
00:26:12,659 --> 00:26:17,640
hand it's the black hander is uh uh

644
00:26:17,640 --> 00:26:21,140
stealing your data apparently

645
00:26:21,299 --> 00:26:23,760
one of my favorite ones is um Sebastian

646
00:26:23,760 --> 00:26:25,200
Haas who's done a bunch of different

647
00:26:25,200 --> 00:26:28,559
things with uh DNS uh he put he's

648
00:26:28,559 --> 00:26:30,360
created a piece of software called Faker

649
00:26:30,360 --> 00:26:32,640
tea or fake I'm not sure how to

650
00:26:32,640 --> 00:26:34,620
pronounce that it creates a ton device

651
00:26:34,620 --> 00:26:38,520
locally that can uh fake a trace route

652
00:26:38,520 --> 00:26:41,520
and what he used this to set up the live

653
00:26:41,520 --> 00:26:43,740
scores for the Euro 2020 when it was

654
00:26:43,740 --> 00:26:46,559
happening his underscore sahas on

655
00:26:46,559 --> 00:26:48,419
Twitter he's got a bunch of interesting

656
00:26:48,419 --> 00:26:50,720
things

657
00:26:51,600 --> 00:26:54,900
um another one is makerforce dot IO uh

658
00:26:54,900 --> 00:26:57,419
by I got good Ambrose tour this has got

659
00:26:57,419 --> 00:27:00,659
the uh alternative lyrics to American

660
00:27:00,659 --> 00:27:02,400
Pie in it which I thought was kind of

661
00:27:02,400 --> 00:27:04,520
fun

662
00:27:06,659 --> 00:27:08,460
um and I think this is the last one

663
00:27:08,460 --> 00:27:10,020
there if you're familiar with Dr

664
00:27:10,020 --> 00:27:12,779
Horrible's Sing-Along there's a thing

665
00:27:12,779 --> 00:27:14,520
that comes up every now and again which

666
00:27:14,520 --> 00:27:15,960
is the

667
00:27:15,960 --> 00:27:18,419
um bad horse so if you try to trace

668
00:27:18,419 --> 00:27:20,279
route a bad horse you'll get this and if

669
00:27:20,279 --> 00:27:21,960
you want a bonus check out the

670
00:27:21,960 --> 00:27:23,940
certificate chain from sign Dot

671
00:27:23,940 --> 00:27:25,799
bad.horse online because there's another

672
00:27:25,799 --> 00:27:28,580
little Easter egg there

673
00:27:28,580 --> 00:27:32,279
and lastly this was requested by Andrew

674
00:27:32,279 --> 00:27:33,720
Kaplan because the last time I did this

675
00:27:33,720 --> 00:27:35,820
was around Christmas

676
00:27:35,820 --> 00:27:38,279
um it's a Christmas themed trace route

677
00:27:38,279 --> 00:27:40,460
so

678
00:27:40,460 --> 00:27:42,480
completely inappropriate now because can

679
00:27:42,480 --> 00:27:43,620
you speak a little closer oh I'm sorry

680
00:27:43,620 --> 00:27:46,320
there we go sorry

681
00:27:46,320 --> 00:27:48,299
uh yeah completely inappropriate now

682
00:27:48,299 --> 00:27:49,260
because we're in the middle of summer

683
00:27:49,260 --> 00:27:51,659
but uh Happy Christmas for anybody

684
00:27:51,659 --> 00:27:55,020
watching it six months from now

685
00:27:55,020 --> 00:27:58,380
a more interesting category of DNS uh

686
00:27:58,380 --> 00:28:02,400
misuses is the tools and toys

687
00:28:02,400 --> 00:28:05,520
here's one from postel.org which

688
00:28:05,520 --> 00:28:07,740
unfortunately isn't around anymore it's

689
00:28:07,740 --> 00:28:10,320
a simple calculator I really like it

690
00:28:10,320 --> 00:28:11,880
because you can just look at it and see

691
00:28:11,880 --> 00:28:13,500
what kind of output you should expect to

692
00:28:13,500 --> 00:28:15,539
get from it there is a version of this

693
00:28:15,539 --> 00:28:18,779
or a reverse polis calculator that's out

694
00:28:18,779 --> 00:28:20,400
there which I don't quite understand

695
00:28:20,400 --> 00:28:22,500
someone explained it to me once and um

696
00:28:22,500 --> 00:28:25,940
didn't stick

697
00:28:26,700 --> 00:28:29,159
um a couple more useful tools are the my

698
00:28:29,159 --> 00:28:31,860
IP things I don't know if you guys are

699
00:28:31,860 --> 00:28:34,460
familiar with the Googling what's my IP

700
00:28:34,460 --> 00:28:37,500
you can do it via the DNS there's a

701
00:28:37,500 --> 00:28:39,179
couple of examples here from Google and

702
00:28:39,179 --> 00:28:41,400
one from open DNS these actually still

703
00:28:41,400 --> 00:28:43,679
work so I've used these before when I've

704
00:28:43,679 --> 00:28:47,000
connected to another Wi-Fi network

705
00:28:47,000 --> 00:28:50,400
and I think out of all of these things

706
00:28:50,400 --> 00:28:52,799
that I'm going to talk about the Google

707
00:28:52,799 --> 00:28:55,620
what is my IP uh tool will probably

708
00:28:55,620 --> 00:28:57,360
exist longer than all of the others

709
00:28:57,360 --> 00:29:00,480
because as uh we all know that is the

710
00:29:00,480 --> 00:29:04,100
only service that they really care about

711
00:29:04,679 --> 00:29:07,200
one of the uh tools here from Team

712
00:29:07,200 --> 00:29:09,539
kumaru I actually I don't know how to

713
00:29:09,539 --> 00:29:12,000
pronounce them uh properly Tim Camry

714
00:29:12,000 --> 00:29:14,580
Camry uh

715
00:29:14,580 --> 00:29:17,520
come read thank you

716
00:29:17,520 --> 00:29:19,980
um is IP to ASN mapping this is actually

717
00:29:19,980 --> 00:29:22,260
really useful and it's got a bunch of

718
00:29:22,260 --> 00:29:24,059
different ways it can be used it's kind

719
00:29:24,059 --> 00:29:26,700
of like who is but um faster and you can

720
00:29:26,700 --> 00:29:30,419
interpret the results programmatically

721
00:29:30,659 --> 00:29:32,880
oh sorry yeah I think I put duplicate

722
00:29:32,880 --> 00:29:34,679
slides in here I put some made some last

723
00:29:34,679 --> 00:29:36,600
minute modifications to the slides and

724
00:29:36,600 --> 00:29:39,539
uh forgot to delete this one

725
00:29:39,539 --> 00:29:43,020
another little tool here is um postcodes

726
00:29:43,020 --> 00:29:45,659
so you can look up a postcode and get

727
00:29:45,659 --> 00:29:48,360
the geolocation from it I don't know why

728
00:29:48,360 --> 00:29:49,799
that would be useful but if you're

729
00:29:49,799 --> 00:29:53,220
planning to uh find somewhere then

730
00:29:53,220 --> 00:29:55,679
perhaps that could be useful this is

731
00:29:55,679 --> 00:30:00,000
from uh JP men's jumpy

732
00:30:00,539 --> 00:30:02,659
and there's a site out there called

733
00:30:02,659 --> 00:30:05,820
dns.toys which popped up recently and

734
00:30:05,820 --> 00:30:07,380
this has a whole bunch of things it's

735
00:30:07,380 --> 00:30:09,480
got a conversion currency uh currency

736
00:30:09,480 --> 00:30:12,299
conversion sorry world time uh another

737
00:30:12,299 --> 00:30:14,399
what is my IP

738
00:30:14,399 --> 00:30:17,700
um and numbers to words as well which is

739
00:30:17,700 --> 00:30:20,220
kind of weird and that's by a guy called

740
00:30:20,220 --> 00:30:23,340
kylish kailash NAD who's the CTO of

741
00:30:23,340 --> 00:30:26,299
zoroda

742
00:30:26,520 --> 00:30:29,700
one of my favorites is this geocaching

743
00:30:29,700 --> 00:30:31,080
hint

744
00:30:31,080 --> 00:30:32,220
um if you're not familiar with

745
00:30:32,220 --> 00:30:33,480
geocaching it's where you get a location

746
00:30:33,480 --> 00:30:36,120
and go and find a little well a geocache

747
00:30:36,120 --> 00:30:37,320
somewhere in the world there's a couple

748
00:30:37,320 --> 00:30:40,380
of million worldwide and the description

749
00:30:40,380 --> 00:30:43,679
for one of them is a hostname and if you

750
00:30:43,679 --> 00:30:45,960
look at the text record for it you get a

751
00:30:45,960 --> 00:30:46,980
hint

752
00:30:46,980 --> 00:30:48,960
um to that points you in the right

753
00:30:48,960 --> 00:30:51,179
direction to find it which I love the

754
00:30:51,179 --> 00:30:52,559
name of the

755
00:30:52,559 --> 00:30:56,760
um uh of the cash each Cash's name is a

756
00:30:56,760 --> 00:30:58,880
reference to Dr Paul mokapetris

757
00:30:58,880 --> 00:31:01,679
unfortunately I was told that he isn't

758
00:31:01,679 --> 00:31:03,840
the owner of this geocache but um it's

759
00:31:03,840 --> 00:31:07,039
kind of kind of cool anyway

760
00:31:07,679 --> 00:31:10,640
another category is DNS tunneling

761
00:31:10,640 --> 00:31:13,080
there's some debate as to the exact

762
00:31:13,080 --> 00:31:14,460
definition of what tunneling

763
00:31:14,460 --> 00:31:16,980
encapsulates but um here's some things

764
00:31:16,980 --> 00:31:19,620
which I thought might uh might feel fall

765
00:31:19,620 --> 00:31:21,960
into that category

766
00:31:21,960 --> 00:31:24,899
so the general idea of tunneling is to

767
00:31:24,899 --> 00:31:29,159
um uh uh send data over another protocol

768
00:31:29,159 --> 00:31:31,500
which it wasn't intended to be so it was

769
00:31:31,500 --> 00:31:33,000
discussed I tried to find the references

770
00:31:33,000 --> 00:31:35,039
to it for DNS tunneling in particular

771
00:31:35,039 --> 00:31:37,919
and I found something on uh Slash Dot

772
00:31:37,919 --> 00:31:40,919
from back in 2000 he's probably been uh

773
00:31:40,919 --> 00:31:43,620
going on a lot longer than that but um

774
00:31:43,620 --> 00:31:46,020
yeah if you're not familiar with it

775
00:31:46,020 --> 00:31:48,000
um I guess all you guys probably are but

776
00:31:48,000 --> 00:31:50,220
some people who might be watching this

777
00:31:50,220 --> 00:31:54,419
uh could use this explanation

778
00:31:54,419 --> 00:31:58,500
so one example is to Tunnel a Wikipedia

779
00:31:58,500 --> 00:32:00,240
over

780
00:32:00,240 --> 00:32:02,399
um over DNS

781
00:32:02,399 --> 00:32:07,200
this is I I mean it works I'm not sure

782
00:32:07,200 --> 00:32:09,360
when you would ever need it but perhaps

783
00:32:09,360 --> 00:32:10,679
if you're in an airport and need to look

784
00:32:10,679 --> 00:32:12,360
up something from Wikipedia and don't

785
00:32:12,360 --> 00:32:14,100
have full internet access this might be

786
00:32:14,100 --> 00:32:16,440
something you could do

787
00:32:16,440 --> 00:32:19,140
this is by uh David Ledbetter I think

788
00:32:19,140 --> 00:32:20,340
that's how you pronounce his name sorry

789
00:32:20,340 --> 00:32:22,799
I forgot that wrong David

790
00:32:22,799 --> 00:32:25,279
uh this is a great great example

791
00:32:25,279 --> 00:32:28,200
blogging over DNS

792
00:32:28,200 --> 00:32:30,179
um this is a great system where you can

793
00:32:30,179 --> 00:32:32,940
publish a txt record which then

794
00:32:32,940 --> 00:32:36,860
publishes in air quotes uh a blog post

795
00:32:36,860 --> 00:32:39,960
you can list the posts that are there

796
00:32:39,960 --> 00:32:42,000
and you can read a specific post by

797
00:32:42,000 --> 00:32:45,559
querying a specific record

798
00:32:46,559 --> 00:32:48,539
Eric Ackman

799
00:32:48,539 --> 00:32:52,460
um created uh this s

800
00:32:52,460 --> 00:32:54,720
tool I suppose you could call it called

801
00:32:54,720 --> 00:32:56,399
iodine

802
00:32:56,399 --> 00:32:59,279
um which is a full implementation of Ip

803
00:32:59,279 --> 00:33:03,059
over DNS it's ipv4 only inside the

804
00:33:03,059 --> 00:33:04,919
tunnel and

805
00:33:04,919 --> 00:33:08,480
um but the server can listen to IPv6

806
00:33:08,480 --> 00:33:11,520
basically you run a a server and a

807
00:33:11,520 --> 00:33:12,840
client and then the client can interact

808
00:33:12,840 --> 00:33:15,419
with the server but via DNS it's pretty

809
00:33:15,419 --> 00:33:17,399
cool it's called iodine which I like

810
00:33:17,399 --> 00:33:21,620
because it has the atomic number of 53.

811
00:33:22,140 --> 00:33:25,260
there's also an implementation here of

812
00:33:25,260 --> 00:33:28,200
HTTP over DNS

813
00:33:28,200 --> 00:33:31,140
um this is called browser tunnel by

814
00:33:31,140 --> 00:33:32,940
Jessie Lee who's veggie defender on

815
00:33:32,940 --> 00:33:34,580
GitHub

816
00:33:34,580 --> 00:33:39,000
and yeah it's I I think this is maybe

817
00:33:39,000 --> 00:33:40,919
going a bit too far although I would

818
00:33:40,919 --> 00:33:42,179
have said that if I hadn't seen some of

819
00:33:42,179 --> 00:33:43,220
the other things

820
00:33:43,220 --> 00:33:46,200
and it raises the interesting idea of

821
00:33:46,200 --> 00:33:52,440
HTTP over DNS over https which is

822
00:33:52,440 --> 00:33:53,100
um

823
00:33:53,100 --> 00:33:55,860
and interesting concept and probably

824
00:33:55,860 --> 00:33:58,939
should be explored more

825
00:33:59,399 --> 00:34:01,679
lastly I think there's a uh something I

826
00:34:01,679 --> 00:34:03,179
haven't actually checked out it's an

827
00:34:03,179 --> 00:34:06,419
Android app called slow DNS uh this

828
00:34:06,419 --> 00:34:08,399
contains ads I should have warn uh it's

829
00:34:08,399 --> 00:34:11,460
in the Google app store and it allows

830
00:34:11,460 --> 00:34:15,000
you to use DNS or use the internet from

831
00:34:15,000 --> 00:34:17,760
if you have access to DNS it's an action

832
00:34:17,760 --> 00:34:20,219
it's like a VPN and it works uh through

833
00:34:20,219 --> 00:34:22,020
DNS which

834
00:34:22,020 --> 00:34:25,619
is I think could have real uses

835
00:34:25,619 --> 00:34:27,060
um especially as I've been traveling a

836
00:34:27,060 --> 00:34:28,619
bit recently in the airport so I'm going

837
00:34:28,619 --> 00:34:30,119
to try it when I go

838
00:34:30,119 --> 00:34:32,899
um go back tomorrow

839
00:34:33,359 --> 00:34:35,159
oh sorry not finally

840
00:34:35,159 --> 00:34:36,540
um there's also a tool out there called

841
00:34:36,540 --> 00:34:39,659
dnscat 2 uh the successor is the DNS cat

842
00:34:39,659 --> 00:34:43,859
one I imagine uh by lagox86 on GitHub or

843
00:34:43,859 --> 00:34:46,918
run it doesn't need a domain and it

844
00:34:46,918 --> 00:34:48,659
works the same way as iodine in that you

845
00:34:48,659 --> 00:34:51,000
have a server and a client it's really

846
00:34:51,000 --> 00:34:53,760
interesting because it looks exactly

847
00:34:53,760 --> 00:34:56,099
like a normal DNS server you can set up

848
00:34:56,099 --> 00:34:57,900
anywhere you like and it can tunnel

849
00:34:57,900 --> 00:35:00,320
basically anything any kind of

850
00:35:00,320 --> 00:35:02,760
data or it can send signals it's got

851
00:35:02,760 --> 00:35:04,320
messaging

852
00:35:04,320 --> 00:35:07,380
um it's got a lot of potential uses I

853
00:35:07,380 --> 00:35:08,760
think especially in the malware world

854
00:35:08,760 --> 00:35:10,980
where it's already been or something

855
00:35:10,980 --> 00:35:12,680
like this is already being kind of used

856
00:35:12,680 --> 00:35:15,720
to exfiltrate data send beacons that

857
00:35:15,720 --> 00:35:17,579
kind of thing

858
00:35:17,579 --> 00:35:19,440
um and it's very hard to detect I think

859
00:35:19,440 --> 00:35:21,960
because it does um as much as it can to

860
00:35:21,960 --> 00:35:25,520
look like just normal DNS traffic

861
00:35:26,280 --> 00:35:28,920
so some of the other things that I came

862
00:35:28,920 --> 00:35:31,260
across sorry

863
00:35:31,260 --> 00:35:34,920
um Corey Quinn who's um hilarious by the

864
00:35:34,920 --> 00:35:37,920
way is corny Pig on Twitter he has

865
00:35:37,920 --> 00:35:40,740
suggested using Route 53 for config

866
00:35:40,740 --> 00:35:42,599
management

867
00:35:42,599 --> 00:35:45,240
um so I think actually there is a proof

868
00:35:45,240 --> 00:35:47,700
of concept out there where

869
00:35:47,700 --> 00:35:50,579
um it's entirely everything that that

870
00:35:50,579 --> 00:35:52,859
you do on a standard internet for

871
00:35:52,859 --> 00:35:55,500
configuration management you can do via

872
00:35:55,500 --> 00:35:57,540
Route 53 and have a system that works on

873
00:35:57,540 --> 00:35:59,280
top of that

874
00:35:59,280 --> 00:36:01,920
um he posted it as a kind of thought

875
00:36:01,920 --> 00:36:04,140
experiment I think at the time but

876
00:36:04,140 --> 00:36:06,420
um I think some people have gone ahead

877
00:36:06,420 --> 00:36:09,740
and done something like that

878
00:36:10,260 --> 00:36:11,579
there's also something out there called

879
00:36:11,579 --> 00:36:15,660
Bimi which I uh when I did this put this

880
00:36:15,660 --> 00:36:18,060
all together originally I thought it was

881
00:36:18,060 --> 00:36:20,099
kind of crazy but it's kind of it's come

882
00:36:20,099 --> 00:36:20,940
back

883
00:36:20,940 --> 00:36:23,400
really all it is is uh just a bunch of

884
00:36:23,400 --> 00:36:25,560
txt Records which uh start with the

885
00:36:25,560 --> 00:36:28,200
underscore Bimi and it's all to do with

886
00:36:28,200 --> 00:36:30,000
brand indicators so when you receive an

887
00:36:30,000 --> 00:36:32,820
email there's a lookup done uh under the

888
00:36:32,820 --> 00:36:35,160
underscore me.logo I think something

889
00:36:35,160 --> 00:36:37,260
like that and you get a logo back and

890
00:36:37,260 --> 00:36:38,820
it's a way of kind of

891
00:36:38,820 --> 00:36:40,500
um showing that you're from a verified

892
00:36:40,500 --> 00:36:42,540
sender with a logo and that kind of

893
00:36:42,540 --> 00:36:44,940
thing I wasn't so sure how successful

894
00:36:44,940 --> 00:36:47,400
that would be but it's still around so

895
00:36:47,400 --> 00:36:51,200
maybe more successful than I thought

896
00:36:51,300 --> 00:36:53,400
uh another way another thing that

897
00:36:53,400 --> 00:36:55,500
somebody did is a contacts database

898
00:36:55,500 --> 00:36:57,060
there's

899
00:36:57,060 --> 00:36:59,520
um a site called numprotocol.com and a

900
00:36:59,520 --> 00:37:02,119
company in the UK called num technology

901
00:37:02,119 --> 00:37:06,599
which uh has implemented a full uh

902
00:37:06,599 --> 00:37:08,940
version of the UK Yellow Pages

903
00:37:08,940 --> 00:37:12,780
um on Via DNS and it's basically just a

904
00:37:12,780 --> 00:37:16,020
big contacts directory and I'm not sure

905
00:37:16,020 --> 00:37:18,420
this kind of thing seems to

906
00:37:18,420 --> 00:37:19,980
um because it's picking backing on other

907
00:37:19,980 --> 00:37:21,960
people's infrastructure I think it's

908
00:37:21,960 --> 00:37:24,900
kind of unfair because it's going to be

909
00:37:24,900 --> 00:37:27,480
very fast and very quick uh and very

910
00:37:27,480 --> 00:37:29,880
reliable but it's using

911
00:37:29,880 --> 00:37:31,619
um these anycast networks which other

912
00:37:31,619 --> 00:37:33,599
people have set up and

913
00:37:33,599 --> 00:37:36,540
um yeah and I think it's they maybe

914
00:37:36,540 --> 00:37:39,839
should be um if it succeeds then maybe

915
00:37:39,839 --> 00:37:43,200
we'll be start to uh to get blocked

916
00:37:43,200 --> 00:37:45,060
but it's interesting

917
00:37:45,060 --> 00:37:47,880
and dnskv.com is a full implementation

918
00:37:47,880 --> 00:37:51,839
of a key Value Store done over DNS

919
00:37:51,839 --> 00:37:54,240
uh I would this is really interesting

920
00:37:54,240 --> 00:37:55,500
and it's got some great documentation

921
00:37:55,500 --> 00:37:57,660
I'm not sure who is behind this I've

922
00:37:57,660 --> 00:37:59,880
been trying to credit the people uh who

923
00:37:59,880 --> 00:38:01,260
created these things as I've been going

924
00:38:01,260 --> 00:38:02,940
along

925
00:38:02,940 --> 00:38:05,339
um this is it's actually very cool it's

926
00:38:05,339 --> 00:38:07,320
persistent it works across

927
00:38:07,320 --> 00:38:09,900
um different networks uh it's got a full

928
00:38:09,900 --> 00:38:13,680
kind of KV functionality and

929
00:38:13,680 --> 00:38:16,380
um is actually something I think I might

930
00:38:16,380 --> 00:38:20,960
use uh for my own personal data

931
00:38:21,720 --> 00:38:25,740
um Ben Cox from benjojo.co.uk has also

932
00:38:25,740 --> 00:38:27,900
implemented something called dnsfs which

933
00:38:27,900 --> 00:38:31,320
is a full file system that works over

934
00:38:31,320 --> 00:38:35,220
DNS again it's persistent and it has a

935
00:38:35,220 --> 00:38:40,740
cache and it can works with txt records

936
00:38:40,740 --> 00:38:43,980
um and it actually works really well

937
00:38:43,980 --> 00:38:45,720
um it's

938
00:38:45,720 --> 00:38:47,700
I I don't know when I first started

939
00:38:47,700 --> 00:38:49,200
looking at this sort of things after

940
00:38:49,200 --> 00:38:51,359
John prompted me I didn't think that I

941
00:38:51,359 --> 00:38:53,040
would come across anything this Advanced

942
00:38:53,040 --> 00:38:56,640
but I suppose if you think about it and

943
00:38:56,640 --> 00:38:59,520
build from first principles then you can

944
00:38:59,520 --> 00:39:01,440
end up with anything you like over and

945
00:39:01,440 --> 00:39:04,680
this is a full file system

946
00:39:04,680 --> 00:39:07,800
one of the uses of DNS FS that Ben Cox

947
00:39:07,800 --> 00:39:09,240
was even surprised himself to see

948
00:39:09,240 --> 00:39:14,040
working was streaming MP3s over DNS

949
00:39:14,040 --> 00:39:17,280
so there's MP3s over a file system which

950
00:39:17,280 --> 00:39:19,380
works on DNS

951
00:39:19,380 --> 00:39:22,200
um uh using dig

952
00:39:22,200 --> 00:39:26,220
and I think this may be one or two

953
00:39:26,220 --> 00:39:29,460
levels of complexity too far

954
00:39:29,460 --> 00:39:32,400
um but it has been done and

955
00:39:32,400 --> 00:39:34,859
um yeah is

956
00:39:34,859 --> 00:39:38,040
amazing as far as I'm concerned

957
00:39:38,040 --> 00:39:40,020
that's pretty much it

958
00:39:40,020 --> 00:39:42,240
um a bunch of links at the end here if

959
00:39:42,240 --> 00:39:44,220
anybody wants to take a look I think

960
00:39:44,220 --> 00:39:46,560
I've covered everything

961
00:39:46,560 --> 00:39:48,660
um I went through a bit quicker than I

962
00:39:48,660 --> 00:39:53,579
expected so if anybody has any questions

963
00:39:53,579 --> 00:39:57,240
hey Neil from gsec I know did you keep

964
00:39:57,240 --> 00:39:59,460
any statistics on how many of these

965
00:39:59,460 --> 00:40:02,820
Services did use dnsic oh no I didn't

966
00:40:02,820 --> 00:40:04,980
actually but that would be a really

967
00:40:04,980 --> 00:40:07,020
interesting thing to look into I think

968
00:40:07,020 --> 00:40:09,660
Oh see now you've mentioned dnsic I'm

969
00:40:09,660 --> 00:40:10,800
gonna have to go and see if there are

970
00:40:10,800 --> 00:40:12,780
any other toys out there which use dnsic

971
00:40:12,780 --> 00:40:14,400
because I think that introduces another

972
00:40:14,400 --> 00:40:19,820
level of complexity which can be misused

973
00:40:20,579 --> 00:40:22,500
but yeah that's another a good

974
00:40:22,500 --> 00:40:24,300
subsection I'm kind of glad that I got

975
00:40:24,300 --> 00:40:25,619
through all the slides I was a bit

976
00:40:25,619 --> 00:40:27,240
worried because

977
00:40:27,240 --> 00:40:29,700
um I thought I had 30 minutes and that's

978
00:40:29,700 --> 00:40:31,859
how long it took me last time and then I

979
00:40:31,859 --> 00:40:33,660
tried to sort of rush through it for 20

980
00:40:33,660 --> 00:40:34,980
minutes

981
00:40:34,980 --> 00:40:36,540
um but now this just means that I can

982
00:40:36,540 --> 00:40:38,579
next time I do it I can put more stuff

983
00:40:38,579 --> 00:40:40,320
in there's a whole load of things more

984
00:40:40,320 --> 00:40:41,820
also

985
00:40:41,820 --> 00:40:43,980
um if you look on Twitter I have a

986
00:40:43,980 --> 00:40:46,020
pinned tweet for anybody who uses

987
00:40:46,020 --> 00:40:48,300
Twitter a pin tweet which is a thread of

988
00:40:48,300 --> 00:40:50,280
all these different things there

989
00:40:50,280 --> 00:40:52,640
we've got a question online from Patrick

990
00:40:52,640 --> 00:40:56,220
meduzek his question is why singling out

991
00:40:56,220 --> 00:40:58,920
Bimi as an abuser of txt Records there

992
00:40:58,920 --> 00:41:00,960
are so many other guilty cases oh yeah

993
00:41:00,960 --> 00:41:02,880
no sorry there are tons of other things

994
00:41:02,880 --> 00:41:04,700
out there as well I do apologize for

995
00:41:04,700 --> 00:41:07,560
seeming to single out Bimi

996
00:41:07,560 --> 00:41:08,400
um it was something that I wasn't

997
00:41:08,400 --> 00:41:10,079
familiar with so it seemed kind of um

998
00:41:10,079 --> 00:41:12,060
shocking to me at the time but

999
00:41:12,060 --> 00:41:15,359
I'm sorry we have a question here

1000
00:41:15,359 --> 00:41:17,300
oh that that's it

1001
00:41:17,300 --> 00:41:21,480
so I I wanted to know uh what angle you

1002
00:41:21,480 --> 00:41:24,119
had for doing this research did you do

1003
00:41:24,119 --> 00:41:26,460
this research uh sorry so I'm pallavi uh

1004
00:41:26,460 --> 00:41:29,700
uh did you do this research from a

1005
00:41:29,700 --> 00:41:32,460
security point of view or trying to find

1006
00:41:32,460 --> 00:41:34,200
something that is bad from security

1007
00:41:34,200 --> 00:41:38,099
standpoint no it was purely for fun I it

1008
00:41:38,099 --> 00:41:39,839
was after a conversation where John

1009
00:41:39,839 --> 00:41:42,780
suggested as a joke that people might be

1010
00:41:42,780 --> 00:41:45,420
Distributing malware uh via DNS there's

1011
00:41:45,420 --> 00:41:47,460
a kind of you know file distribution

1012
00:41:47,460 --> 00:41:50,040
system uh which I thought oh nobody

1013
00:41:50,040 --> 00:41:51,900
would do that oh dear they probably are

1014
00:41:51,900 --> 00:41:53,640
and then we started talking about other

1015
00:41:53,640 --> 00:41:55,320
things so it was really just for love

1016
00:41:55,320 --> 00:41:56,880
there are some interesting techniques

1017
00:41:56,880 --> 00:41:59,579
that are used in um that can be used for

1018
00:41:59,579 --> 00:42:00,780
for

1019
00:42:00,780 --> 00:42:03,540
um in malware

1020
00:42:03,540 --> 00:42:05,520
um and I probably should split them up

1021
00:42:05,520 --> 00:42:08,280
but uh yeah yeah because there is

1022
00:42:08,280 --> 00:42:11,160
sometimes we get some issues which are

1023
00:42:11,160 --> 00:42:13,320
related to sub domain takeover or

1024
00:42:13,320 --> 00:42:14,760
something like that so I was thinking

1025
00:42:14,760 --> 00:42:16,079
whether you're doing from that

1026
00:42:16,079 --> 00:42:17,579
perspective to find different ways

1027
00:42:17,579 --> 00:42:20,400
people can exploit Yes actually as part

1028
00:42:20,400 --> 00:42:23,040
of the DNS abusing for first what we're

1029
00:42:23,040 --> 00:42:24,599
working on is

1030
00:42:24,599 --> 00:42:28,680
um an incident and technique taxonomy so

1031
00:42:28,680 --> 00:42:30,780
we look into all the different

1032
00:42:30,780 --> 00:42:33,300
um types of DNS abuse that cover things

1033
00:42:33,300 --> 00:42:36,359
like DNS beaconing DNS exfiltration

1034
00:42:36,359 --> 00:42:37,380
um all these kind of tunneling

1035
00:42:37,380 --> 00:42:40,260
techniques and um so if you want to join

1036
00:42:40,260 --> 00:42:42,839
the Sig outside members are welcome as

1037
00:42:42,839 --> 00:42:44,400
well if anybody wants to

1038
00:42:44,400 --> 00:42:47,700
check it out so thank you thanks

1039
00:42:47,700 --> 00:42:49,740
another question online from Rick

1040
00:42:49,740 --> 00:42:52,140
Wilhelm uh when doing this research did

1041
00:42:52,140 --> 00:42:53,579
you get a sore neck from shaking your

1042
00:42:53,579 --> 00:42:54,980
head

1043
00:42:54,980 --> 00:42:58,800
yes I did okay actually a question that

1044
00:42:58,800 --> 00:42:59,700
I'll ask

1045
00:42:59,700 --> 00:43:03,480
um is uh given the a lot of these tools

1046
00:43:03,480 --> 00:43:05,220
seem to be one query run response

1047
00:43:05,220 --> 00:43:06,480
meaning that they're not useful for any

1048
00:43:06,480 --> 00:43:08,640
other respondents this is a subjective

1049
00:43:08,640 --> 00:43:11,099
question should these kind of things be

1050
00:43:11,099 --> 00:43:13,140
encouraged or discouraged

1051
00:43:13,140 --> 00:43:15,839
I think in general experimenting with

1052
00:43:15,839 --> 00:43:17,400
protocols is fun and should be

1053
00:43:17,400 --> 00:43:19,319
encouraged every protocol that I've ever

1054
00:43:19,319 --> 00:43:21,839
come across as soon as it's been you

1055
00:43:21,839 --> 00:43:24,900
know started to be used for real it

1056
00:43:24,900 --> 00:43:27,060
starts to be misused which is just human

1057
00:43:27,060 --> 00:43:29,280
nature but I think there's a point at

1058
00:43:29,280 --> 00:43:31,680
which these things go a bit too far I

1059
00:43:31,680 --> 00:43:33,359
mentioned it earlier refer to it where I

1060
00:43:33,359 --> 00:43:34,980
think that once you start to build a

1061
00:43:34,980 --> 00:43:37,140
company that's based on technology which

1062
00:43:37,140 --> 00:43:39,420
enables you know a fully distributed

1063
00:43:39,420 --> 00:43:41,760
hierarchical highly available incredibly

1064
00:43:41,760 --> 00:43:43,740
fast protocol that's using other

1065
00:43:43,740 --> 00:43:46,980
people's money that they've used to

1066
00:43:46,980 --> 00:43:48,900
build these networks that's a bit too

1067
00:43:48,900 --> 00:43:51,060
much but then those people have the

1068
00:43:51,060 --> 00:43:53,520
option of blocking these things you know

1069
00:43:53,520 --> 00:43:55,740
when it becomes a point that um a drain

1070
00:43:55,740 --> 00:43:57,359
on their resources so

1071
00:43:57,359 --> 00:44:03,020
in general yes but um there is a limit

1072
00:44:03,060 --> 00:44:05,099
okay

1073
00:44:05,099 --> 00:44:06,599
any other questions

1074
00:44:06,599 --> 00:44:08,099
not seeing anything

1075
00:44:08,099 --> 00:44:10,560
all right so thank you Peter

1076
00:44:10,560 --> 00:44:13,160
thanks guys

1077
00:44:16,020 --> 00:44:18,000
um so thank you to both speakers we'll

1078
00:44:18,000 --> 00:44:20,339
now have a break of 30 minutes uh we'll

1079
00:44:20,339 --> 00:44:24,060
be restarting at 15 20 UTC or 11 20

1080
00:44:24,060 --> 00:44:26,520
Eastern I'd like another to make another

1081
00:44:26,520 --> 00:44:27,960
announcements here palavia is going to

1082
00:44:27,960 --> 00:44:29,400
be setting up a table at lunch today for

1083
00:44:29,400 --> 00:44:32,220
women at orc for in-person women

1084
00:44:32,220 --> 00:44:34,079
attendees and allies if you'd like to

1085
00:44:34,079 --> 00:44:35,520
find her and meet with her that would be

1086
00:44:35,520 --> 00:44:37,920
great thanks again to the workshop and

1087
00:44:37,920 --> 00:44:39,900
connectivity sponsor Comcast and the

1088
00:44:39,900 --> 00:44:44,240
2022 workshops Patron verisign thank you

1089
00:44:52,500 --> 00:44:55,500
right great thanks everyone welcome back

1090
00:44:55,500 --> 00:44:58,440
to session two of day two

1091
00:44:58,440 --> 00:45:01,319
um I'm John Todd and we'll be doing this

1092
00:45:01,319 --> 00:45:02,700
format is going to be slightly different

1093
00:45:02,700 --> 00:45:05,160
than the rest in the uh conference where

1094
00:45:05,160 --> 00:45:06,420
we're going to be doing a vendor

1095
00:45:06,420 --> 00:45:09,480
discussion panel and an overview so this

1096
00:45:09,480 --> 00:45:10,619
is going to be an hour and 15 minute

1097
00:45:10,619 --> 00:45:11,819
long session

1098
00:45:11,819 --> 00:45:13,619
um the first hour of which is going to

1099
00:45:13,619 --> 00:45:15,420
be taken up by four of the different

1100
00:45:15,420 --> 00:45:18,599
open source vendors of DNS software

1101
00:45:18,599 --> 00:45:20,280
giving a brief update of what they've

1102
00:45:20,280 --> 00:45:21,839
done in the last year and what some of

1103
00:45:21,839 --> 00:45:23,760
their upcoming ideas are each of them is

1104
00:45:23,760 --> 00:45:25,500
going to have about 12 minutes to give

1105
00:45:25,500 --> 00:45:27,240
the overview which is unfortunately a

1106
00:45:27,240 --> 00:45:28,440
little rush but that's the kind of time

1107
00:45:28,440 --> 00:45:30,480
we have and then a three minute section

1108
00:45:30,480 --> 00:45:32,400
after each one for Q a from the audience

1109
00:45:32,400 --> 00:45:34,800
both online and in here in person after

1110
00:45:34,800 --> 00:45:36,359
that we'll have about a 15-minute

1111
00:45:36,359 --> 00:45:37,380
discussion

1112
00:45:37,380 --> 00:45:39,420
um talking about general questions and

1113
00:45:39,420 --> 00:45:41,099
so I'll do some introduction questions

1114
00:45:41,099 --> 00:45:42,900
but also take any suggestions from the

1115
00:45:42,900 --> 00:45:45,300
audience through mattermost on panel

1116
00:45:45,300 --> 00:45:47,700
discussion issues so without any further

1117
00:45:47,700 --> 00:45:50,400
delay um Venom you would like to come up

1118
00:45:50,400 --> 00:45:52,740
and start uh this is uh benoinda from

1119
00:45:52,740 --> 00:45:57,078
nlnet Labs thank you

1120
00:45:58,980 --> 00:46:00,180
so

1121
00:46:00,180 --> 00:46:01,859
welcome

1122
00:46:01,859 --> 00:46:04,319
um better off Reiner

1123
00:46:04,319 --> 00:46:07,079
Chief cook bottle washer at the internet

1124
00:46:07,079 --> 00:46:09,240
Labs with the interest in DNS and

1125
00:46:09,240 --> 00:46:11,339
routing

1126
00:46:11,339 --> 00:46:14,640
um good so Defender update of our DNS

1127
00:46:14,640 --> 00:46:15,720
software

1128
00:46:15,720 --> 00:46:18,240
so as you might know we have an

1129
00:46:18,240 --> 00:46:20,160
authoritative and a recursor at the

1130
00:46:20,160 --> 00:46:22,920
knowledge Labs NSD and Unbound first we

1131
00:46:22,920 --> 00:46:25,380
go to the latest features understood

1132
00:46:25,380 --> 00:46:27,540
well the Strategic decisions we make for

1133
00:46:27,540 --> 00:46:30,319
NSD the authoritative name server

1134
00:46:30,319 --> 00:46:32,460
yeah yeah

1135
00:46:32,460 --> 00:46:34,980
I will

1136
00:46:34,980 --> 00:46:38,520
lower might not lower my voice but lower

1137
00:46:38,520 --> 00:46:41,040
my face Hennessy

1138
00:46:41,040 --> 00:46:43,980
recent results so what we what we're

1139
00:46:43,980 --> 00:46:47,640
thinking about NSD uh as a product for

1140
00:46:47,640 --> 00:46:50,160
the industry and how it can be useful

1141
00:46:50,160 --> 00:46:52,859
and as these uh name server

1142
00:46:52,859 --> 00:46:56,180
authoritative name server reduced stable

1143
00:46:56,180 --> 00:46:59,040
but doesn't do DNA sex signing and won't

1144
00:46:59,040 --> 00:47:01,500
do that in the future but still we

1145
00:47:01,500 --> 00:47:03,660
wanted to bring it closer to the

1146
00:47:03,660 --> 00:47:05,819
provisioning systems so we were thinking

1147
00:47:05,819 --> 00:47:07,319
about what is useful for the industry

1148
00:47:07,319 --> 00:47:08,760
and how can it be used in different

1149
00:47:08,760 --> 00:47:11,160
scenarios than a very fast secondary

1150
00:47:11,160 --> 00:47:13,740
name server

1151
00:47:13,740 --> 00:47:17,760
um so but still primary focus of NSD is

1152
00:47:17,760 --> 00:47:19,859
stability and performance because that

1153
00:47:19,859 --> 00:47:22,800
is what it does very well

1154
00:47:22,800 --> 00:47:25,859
um besides the Strategic decisions and

1155
00:47:25,859 --> 00:47:28,740
things we think about uh of course we

1156
00:47:28,740 --> 00:47:30,839
keep up with the latest ITF standards so

1157
00:47:30,839 --> 00:47:33,359
in the past years past year we

1158
00:47:33,359 --> 00:47:36,000
implemented extended DNS errors service

1159
00:47:36,000 --> 00:47:37,619
binding HP

1160
00:47:37,619 --> 00:47:41,520
s sorry uh the interoperable or the DNS

1161
00:47:41,520 --> 00:47:44,520
cookies very useful uh needs presented

1162
00:47:44,520 --> 00:47:48,720
yesterday about the value of DNS cookies

1163
00:47:48,720 --> 00:47:52,800
um and also uh sort so DNS Zone transfer

1164
00:47:52,800 --> 00:47:54,359
of TLS

1165
00:47:54,359 --> 00:47:57,119
so we keep up with the a lot of

1166
00:47:57,119 --> 00:47:59,280
development is driven by rfcs and

1167
00:47:59,280 --> 00:48:00,660
standards of course

1168
00:48:00,660 --> 00:48:03,780
good other thing features we released

1169
00:48:03,780 --> 00:48:06,540
recently in the past month is IX figure

1170
00:48:06,540 --> 00:48:10,980
out so energy could receive incremental

1171
00:48:10,980 --> 00:48:13,200
job transfers but they don't couldn't

1172
00:48:13,200 --> 00:48:14,520
forward them

1173
00:48:14,520 --> 00:48:16,859
so uh there was always a full Zone

1174
00:48:16,859 --> 00:48:20,700
transfer to the next name server so we

1175
00:48:20,700 --> 00:48:22,740
now have also an incremental Zone

1176
00:48:22,740 --> 00:48:24,839
transfer out it's a kind of a best

1177
00:48:24,839 --> 00:48:27,240
effort or kind of it's the best effort

1178
00:48:27,240 --> 00:48:31,160
so it it has some history of experience

1179
00:48:31,160 --> 00:48:34,920
uh and we'll assemble that but there's a

1180
00:48:34,920 --> 00:48:37,619
limit at some point you just receive an

1181
00:48:37,619 --> 00:48:41,880
axvr instead of the an aggregated ixvr

1182
00:48:41,880 --> 00:48:45,720
but with that we got also into well not

1183
00:48:45,720 --> 00:48:47,640
introduced really is an interesting

1184
00:48:47,640 --> 00:48:48,660
feature

1185
00:48:48,660 --> 00:48:50,460
and we called that was formerly known as

1186
00:48:50,460 --> 00:48:51,660
credence

1187
00:48:51,660 --> 00:48:55,980
Zone verification so you can do you see

1188
00:48:55,980 --> 00:48:59,339
it on the picture here there's an hidden

1189
00:48:59,339 --> 00:49:02,700
primary so where the zone is can be

1190
00:49:02,700 --> 00:49:04,920
signed for example well for example

1191
00:49:04,920 --> 00:49:07,680
where the zone is signed it's sent to

1192
00:49:07,680 --> 00:49:11,220
fire regular ixcr or axvi do a verifying

1193
00:49:11,220 --> 00:49:12,960
NSD

1194
00:49:12,960 --> 00:49:15,300
and that will load the zone

1195
00:49:15,300 --> 00:49:18,540
spawn a process and that can be queried

1196
00:49:18,540 --> 00:49:21,720
locally by an external process that can

1197
00:49:21,720 --> 00:49:24,240
be held in this verify zone or zone for

1198
00:49:24,240 --> 00:49:26,640
it but it can also be a resolver like

1199
00:49:26,640 --> 00:49:30,480
bind bio paudinous recursor uh not

1200
00:49:30,480 --> 00:49:33,720
resolver or or Unbound

1201
00:49:33,720 --> 00:49:36,359
so it you can use different tools we

1202
00:49:36,359 --> 00:49:37,859
deliberately chose not to do the

1203
00:49:37,859 --> 00:49:39,900
verification ourselves so the operator

1204
00:49:39,900 --> 00:49:42,240
can choose between different tools

1205
00:49:42,240 --> 00:49:45,599
to verify the validity of the zone and

1206
00:49:45,599 --> 00:49:48,300
if all boxes are green

1207
00:49:48,300 --> 00:49:50,760
and I actually are outs is sent to the

1208
00:49:50,760 --> 00:49:53,400
public facing name service so that can

1209
00:49:53,400 --> 00:49:55,680
be some nice bump in the wire feature

1210
00:49:55,680 --> 00:49:57,780
you can use

1211
00:49:57,780 --> 00:50:01,020
good other plans for next year for this

1212
00:50:01,020 --> 00:50:03,240
year next year well we have a number of

1213
00:50:03,240 --> 00:50:07,079
performance features uh improving Zone

1214
00:50:07,079 --> 00:50:09,359
parsing and Zone loading especially for

1215
00:50:09,359 --> 00:50:12,480
the large zones it can take up to 10 20

1216
00:50:12,480 --> 00:50:14,880
30 minutes

1217
00:50:14,880 --> 00:50:15,540
um

1218
00:50:15,540 --> 00:50:19,619
we are exploring or prototyping and new

1219
00:50:19,619 --> 00:50:21,359
data structures traditionally we're

1220
00:50:21,359 --> 00:50:24,300
using red black trees and red X3 red

1221
00:50:24,300 --> 00:50:26,819
black is more memory efficient

1222
00:50:26,819 --> 00:50:29,280
red extreme or time efficient and

1223
00:50:29,280 --> 00:50:31,319
adaptive Radix 3 is a combination of

1224
00:50:31,319 --> 00:50:32,700
both

1225
00:50:32,700 --> 00:50:35,700
somewhat uh well somewhat more memory

1226
00:50:35,700 --> 00:50:37,740
efficient and performance

1227
00:50:37,740 --> 00:50:40,319
we were also experimenting with Express

1228
00:50:40,319 --> 00:50:43,319
data path supports XDP but more

1229
00:50:43,319 --> 00:50:45,540
augmenting NSD with that so kind of

1230
00:50:45,540 --> 00:50:47,640
process in front of it for the DNS

1231
00:50:47,640 --> 00:50:50,579
cookies for example or for rate limiting

1232
00:50:50,579 --> 00:50:53,280
response rate limiting but now I also

1233
00:50:53,280 --> 00:50:56,420
want to internalize this protocol in NSD

1234
00:50:56,420 --> 00:50:58,980
for the provisioning

1235
00:50:58,980 --> 00:51:02,400
catalog sounds is in the process so it's

1236
00:51:02,400 --> 00:51:05,040
worked soon to be soon working group

1237
00:51:05,040 --> 00:51:07,200
last call the catalog is out draft in

1238
00:51:07,200 --> 00:51:08,660
DNS op

1239
00:51:08,660 --> 00:51:10,380
and

1240
00:51:10,380 --> 00:51:12,480
um also something on the roadmap is

1241
00:51:12,480 --> 00:51:14,520
Dina's offer quick

1242
00:51:14,520 --> 00:51:18,240
uh dot is already supported uh the

1243
00:51:18,240 --> 00:51:20,220
probing signaling is not there yet but

1244
00:51:20,220 --> 00:51:21,839
we have good hopes

1245
00:51:21,839 --> 00:51:24,180
that the current unilateral probe being

1246
00:51:24,180 --> 00:51:27,059
drafted in deprive will reach the finish

1247
00:51:27,059 --> 00:51:27,960
line

1248
00:51:27,960 --> 00:51:30,240
thank you Paul

1249
00:51:30,240 --> 00:51:35,299
and other authors dkg and Joey

1250
00:51:35,359 --> 00:51:39,558
how do we time wise

1251
00:51:40,440 --> 00:51:43,980
good Suzanne TimeWise still good okay

1252
00:51:43,980 --> 00:51:45,119
cool

1253
00:51:45,119 --> 00:51:47,640
uh again for unbounds we have of course

1254
00:51:47,640 --> 00:51:49,079
the regular

1255
00:51:49,079 --> 00:51:51,839
RFC standards development but also think

1256
00:51:51,839 --> 00:51:53,760
where is Unbound being used and where

1257
00:51:53,760 --> 00:51:56,099
can it be useful so

1258
00:51:56,099 --> 00:51:58,200
this the inbound resiliency is kind of

1259
00:51:58,200 --> 00:52:01,140
ongoing process you get reports by users

1260
00:52:01,140 --> 00:52:04,380
your cves and so some of them you have

1261
00:52:04,380 --> 00:52:06,260
already seen in our release now it says

1262
00:52:06,260 --> 00:52:08,880
operational behavior of a number of C

1263
00:52:08,880 --> 00:52:12,000
names is it how far how many C names do

1264
00:52:12,000 --> 00:52:15,119
I have can I follow or must inbound

1265
00:52:15,119 --> 00:52:17,640
follow until it becomes a details factor

1266
00:52:17,640 --> 00:52:19,520
that kind of things

1267
00:52:19,520 --> 00:52:21,960
so we'll think about that but also in

1268
00:52:21,960 --> 00:52:23,280
Enterprise there's different

1269
00:52:23,280 --> 00:52:26,220
requirements than others so rpz has been

1270
00:52:26,220 --> 00:52:28,260
introduced in the past and we extended

1271
00:52:28,260 --> 00:52:31,319
the number of triggers this winter I

1272
00:52:31,319 --> 00:52:32,520
think we're going to release with

1273
00:52:32,520 --> 00:52:34,280
additional triggers

1274
00:52:34,280 --> 00:52:37,260
uh we have something like few per

1275
00:52:37,260 --> 00:52:40,380
interface it's not exactly views it's

1276
00:52:40,380 --> 00:52:43,319
more limited more specific and hcl's

1277
00:52:43,319 --> 00:52:45,599
access lists Access Control list per

1278
00:52:45,599 --> 00:52:47,579
interface very useful for big

1279
00:52:47,579 --> 00:52:49,800
Enterprises how to direct their queries

1280
00:52:49,800 --> 00:52:52,380
to different instances internal

1281
00:52:52,380 --> 00:52:55,319
resolving external resolving Etc and of

1282
00:52:55,319 --> 00:52:59,099
course resolvers you know are well cdns

1283
00:52:59,099 --> 00:53:01,140
and Cloud profiles are really heavily

1284
00:53:01,140 --> 00:53:04,020
depending on resolvers so there are also

1285
00:53:04,020 --> 00:53:06,780
diff a resolver in the CDN or in a data

1286
00:53:06,780 --> 00:53:07,859
center it's something else than the

1287
00:53:07,859 --> 00:53:10,079
resolver that's trying to resolve names

1288
00:53:10,079 --> 00:53:12,420
over the world or through the world they

1289
00:53:12,420 --> 00:53:15,599
want to have this either cache hit or

1290
00:53:15,599 --> 00:53:17,760
the nearest name server maybe in the

1291
00:53:17,760 --> 00:53:20,520
data center most likely so it is all has

1292
00:53:20,520 --> 00:53:22,079
to be fast fast

1293
00:53:22,079 --> 00:53:24,900
so we made also some kind of changes to

1294
00:53:24,900 --> 00:53:27,240
inbound to facilitate that

1295
00:53:27,240 --> 00:53:30,059
recent results shown MD presented

1296
00:53:30,059 --> 00:53:33,059
yesterday also by by Dwayne

1297
00:53:33,059 --> 00:53:36,260
service binding support

1298
00:53:36,260 --> 00:53:39,839
something some optimizations for DOT so

1299
00:53:39,839 --> 00:53:43,980
we'd call that stream reuse so when you

1300
00:53:43,980 --> 00:53:46,800
do some queries Upstream it will all

1301
00:53:46,800 --> 00:53:49,619
keep the stream open and also out of

1302
00:53:49,619 --> 00:53:51,839
order processing on the stream for DOT

1303
00:53:51,839 --> 00:53:53,880
so it's a performance Improvement for

1304
00:53:53,880 --> 00:53:57,180
DOT and recently also extended DNS

1305
00:53:57,180 --> 00:54:00,300
errors in about good roadmap for the

1306
00:54:00,300 --> 00:54:00,960
future

1307
00:54:00,960 --> 00:54:02,540
for the next year

1308
00:54:02,540 --> 00:54:05,280
under developments we are now

1309
00:54:05,280 --> 00:54:07,740
implementing the dinesha for quick for

1310
00:54:07,740 --> 00:54:10,079
the client side downward it's a GitHub

1311
00:54:10,079 --> 00:54:13,200
you can look for a feature get a feature

1312
00:54:13,200 --> 00:54:15,300
Brands sorry

1313
00:54:15,300 --> 00:54:19,319
um also soon proxy protocol version two

1314
00:54:19,319 --> 00:54:21,119
it's useful in combination for example

1315
00:54:21,119 --> 00:54:23,700
with DNS disk so we get the client IP

1316
00:54:23,700 --> 00:54:26,280
address fire DNS list via proxy protocol

1317
00:54:26,280 --> 00:54:29,180
at um bouncer for ECS and other kind of

1318
00:54:29,180 --> 00:54:32,220
information you might want to be into or

1319
00:54:32,220 --> 00:54:34,800
you're interested in acelper interface I

1320
00:54:34,800 --> 00:54:36,740
already mentioned that Dina's cookies

1321
00:54:36,740 --> 00:54:39,780
and DNS error reporting that has been

1322
00:54:39,780 --> 00:54:43,559
implemented during the ITF this this ITF

1323
00:54:43,559 --> 00:54:45,780
during the hackathon is currently the

1324
00:54:45,780 --> 00:54:48,720
happy path uh working on it to get it

1325
00:54:48,720 --> 00:54:51,780
somewhere released later this year

1326
00:54:51,780 --> 00:54:56,040
future work doq Upstream to the tortive

1327
00:54:56,040 --> 00:54:58,079
again the inilateral probing is

1328
00:54:58,079 --> 00:55:00,240
important here uh

1329
00:55:00,240 --> 00:55:03,300
we think Prometheus metrics are useful

1330
00:55:03,300 --> 00:55:05,339
it's the way kind of the standard

1331
00:55:05,339 --> 00:55:07,619
industrial standard to get some

1332
00:55:07,619 --> 00:55:09,839
monitoring data statistics of your

1333
00:55:09,839 --> 00:55:12,780
system we now have proprietary commands

1334
00:55:12,780 --> 00:55:14,940
to get statistics from inbound but I

1335
00:55:14,940 --> 00:55:16,800
think Community is better served with

1336
00:55:16,800 --> 00:55:19,260
the standards yeah thank you

1337
00:55:19,260 --> 00:55:21,960
and DNS fuse the generic one we have a

1338
00:55:21,960 --> 00:55:24,420
pull request it's a big one we have

1339
00:55:24,420 --> 00:55:26,280
refueled it but we still have to plan

1340
00:55:26,280 --> 00:55:30,059
this DNS fuse uh uh well to be

1341
00:55:30,059 --> 00:55:32,220
integrated in and release it's it's

1342
00:55:32,220 --> 00:55:34,140
there in the GitHub you have can have a

1343
00:55:34,140 --> 00:55:35,700
look at it

1344
00:55:35,700 --> 00:55:37,619
that's it oh

1345
00:55:37,619 --> 00:55:40,619
we have two minutes for questions

1346
00:55:40,619 --> 00:55:42,960
for specific development plans or

1347
00:55:42,960 --> 00:55:45,800
comments

1348
00:55:46,319 --> 00:55:48,359
okay but

1349
00:55:48,359 --> 00:55:52,380
maybe Libor and Vladimir can use that

1350
00:55:52,380 --> 00:55:54,480
um and otherwise we have the panel

1351
00:55:54,480 --> 00:55:58,140
discussion uh at the end of the session

1352
00:55:58,140 --> 00:55:59,400
thank you

1353
00:55:59,400 --> 00:56:01,819
great

1354
00:56:05,400 --> 00:56:08,280
so let me verify with Matt are we going

1355
00:56:08,280 --> 00:56:13,220
to do the remote for uh great okay

1356
00:56:15,359 --> 00:56:17,520
a lot of our developments you can find

1357
00:56:17,520 --> 00:56:20,540
it in our on our blog so

1358
00:56:20,540 --> 00:56:22,680
blog.nlnetlabs.nl and we also have a

1359
00:56:22,680 --> 00:56:24,000
newsletter we keep the community

1360
00:56:24,000 --> 00:56:26,520
informed about this kind of new features

1361
00:56:26,520 --> 00:56:28,140
we develop and things we're thinking

1362
00:56:28,140 --> 00:56:29,579
about so

1363
00:56:29,579 --> 00:56:33,359
visit our blog for news or subscribe to

1364
00:56:33,359 --> 00:56:36,259
the newsletter thanks

1365
00:56:37,800 --> 00:56:39,240
thank you

1366
00:56:39,240 --> 00:56:43,680
um next up uh from CZ or nick.cz sorry

1367
00:56:43,680 --> 00:56:47,940
uh is Liber Pelton and Vladimir chunat

1368
00:56:47,940 --> 00:56:49,260
um and we're going to be doing half of

1369
00:56:49,260 --> 00:56:52,260
this remotely so uh Libre you are first

1370
00:56:52,260 --> 00:56:54,660
yes and then the other half will be done

1371
00:56:54,660 --> 00:56:57,059
by Vladimir uh and hopefully that's all

1372
00:56:57,059 --> 00:56:58,160
going to go right

1373
00:56:58,160 --> 00:57:00,599
thank you

1374
00:57:00,599 --> 00:57:02,780
thank you

1375
00:57:03,059 --> 00:57:05,940
hello I'm liberal paltan I will be

1376
00:57:05,940 --> 00:57:07,380
talking about the news in the

1377
00:57:07,380 --> 00:57:10,380
authoritative node DNS and immediately

1378
00:57:10,380 --> 00:57:12,540
following will be my colleague Vladimir

1379
00:57:12,540 --> 00:57:14,099
chunath who will tell you something

1380
00:57:14,099 --> 00:57:16,740
about the news in not resolver

1381
00:57:16,740 --> 00:57:18,420
so let me start with the authoritative

1382
00:57:18,420 --> 00:57:19,920
server

1383
00:57:19,920 --> 00:57:24,420
yeah we keep releasing new versions in a

1384
00:57:24,420 --> 00:57:27,780
yearly schedule so it's usually the end

1385
00:57:27,780 --> 00:57:30,000
of the summer you can expect the next

1386
00:57:30,000 --> 00:57:33,960
release 3.2 in like a next month

1387
00:57:33,960 --> 00:57:36,119
uh we keep a

1388
00:57:36,119 --> 00:57:39,780
supporting our releases for roughly two

1389
00:57:39,780 --> 00:57:41,940
years so if you use the distribution

1390
00:57:41,940 --> 00:57:44,940
repositories for example from Debian or

1391
00:57:44,940 --> 00:57:46,440
redhead they are probably pretty old

1392
00:57:46,440 --> 00:57:47,760
versions that are not no longer

1393
00:57:47,760 --> 00:57:50,220
supported so we encourage everyone to

1394
00:57:50,220 --> 00:57:53,040
use our own repositories where there are

1395
00:57:53,040 --> 00:57:56,640
always the latest versions available

1396
00:57:56,640 --> 00:58:00,300
yeah in the last years we really focused

1397
00:58:00,300 --> 00:58:03,900
on performance and XDP technology helps

1398
00:58:03,900 --> 00:58:08,160
us a lot so for the basic DNS over UDP

1399
00:58:08,160 --> 00:58:10,800
which is the most common case the XDP is

1400
00:58:10,800 --> 00:58:12,300
already stable

1401
00:58:12,300 --> 00:58:15,420
it's been used by some companies and

1402
00:58:15,420 --> 00:58:17,160
they are happy with that

1403
00:58:17,160 --> 00:58:21,000
regarding the fallback to TCP the xdptcp

1404
00:58:21,000 --> 00:58:23,940
is still under development it improves

1405
00:58:23,940 --> 00:58:26,700
in the next version

1406
00:58:26,700 --> 00:58:30,500
it shall bring the resilience against

1407
00:58:30,500 --> 00:58:32,760
denial of service attacks and other

1408
00:58:32,760 --> 00:58:35,339
research exhaustion attacks for public

1409
00:58:35,339 --> 00:58:37,020
facing servers

1410
00:58:37,020 --> 00:58:41,160
but yeah it has the limitation that it

1411
00:58:41,160 --> 00:58:43,500
does not Implement outgoing congestion

1412
00:58:43,500 --> 00:58:45,240
control so it's not recommended to use

1413
00:58:45,240 --> 00:58:48,480
it for outgoing Zone transfers anyway

1414
00:58:48,480 --> 00:58:51,680
I'm not aware that anyone would use it

1415
00:58:51,680 --> 00:58:56,099
yet it's maybe because the the users are

1416
00:58:56,099 --> 00:58:58,559
simply not really scared about such

1417
00:58:58,559 --> 00:59:01,440
attacks and that it shall mitigate so

1418
00:59:01,440 --> 00:59:06,180
once they will it's ready for them and

1419
00:59:06,180 --> 00:59:11,598
XDP and quick over XDP is B

1420
00:59:11,640 --> 00:59:14,339
is going to be reduced as well the first

1421
00:59:14,339 --> 00:59:16,500
usable version

1422
00:59:16,500 --> 00:59:19,500
and this includes the utilities that can

1423
00:59:19,500 --> 00:59:23,520
debug KDK and kxdp gun

1424
00:59:23,520 --> 00:59:27,119
I talked about this in the yesterday's

1425
00:59:27,119 --> 00:59:28,859
talk

1426
00:59:28,859 --> 00:59:32,099
yeah we also focus on our users many of

1427
00:59:32,099 --> 00:59:34,200
them operate

1428
00:59:34,200 --> 00:59:36,839
quite many zones like hundreds of

1429
00:59:36,839 --> 00:59:39,480
thousands of zones and this operation of

1430
00:59:39,480 --> 00:59:43,200
such many zones on one server has many

1431
00:59:43,200 --> 00:59:45,839
operational quirks and they really need

1432
00:59:45,839 --> 00:59:49,260
our software to work work like a charm

1433
00:59:49,260 --> 00:59:51,299
and also support them

1434
00:59:51,299 --> 00:59:54,660
even tiny details when it goes to 100 of

1435
00:59:54,660 --> 00:59:55,859
thousand zones

1436
00:59:55,859 --> 00:59:59,040
it really matters so we keep

1437
00:59:59,040 --> 01:00:02,400
adding or slightly improving some

1438
01:00:02,400 --> 01:00:06,380
some functionality and features for them

1439
01:00:06,540 --> 01:00:08,940
next topic is catalog zones

1440
01:00:08,940 --> 01:00:12,240
this is also improved in the like last

1441
01:00:12,240 --> 01:00:13,740
three versions

1442
01:00:13,740 --> 01:00:16,020
I guess we are the first software that

1443
01:00:16,020 --> 01:00:19,200
uh completely implemented consumption

1444
01:00:19,200 --> 01:00:21,960
and generation of catalog zones

1445
01:00:21,960 --> 01:00:24,059
we also implemented the group property

1446
01:00:24,059 --> 01:00:27,000
and it seems already pretty usable we

1447
01:00:27,000 --> 01:00:29,520
have users of this and we are happy to

1448
01:00:29,520 --> 01:00:31,859
cooperate in on this feature with all

1449
01:00:31,859 --> 01:00:33,839
the other vendors

1450
01:00:33,839 --> 01:00:36,359
we cooperate on the IDF and we also

1451
01:00:36,359 --> 01:00:40,020
cooperate like in our channels

1452
01:00:40,020 --> 01:00:42,599
so I'm happy that we cooperate on this

1453
01:00:42,599 --> 01:00:45,059
and there are many other

1454
01:00:45,059 --> 01:00:46,680
many more

1455
01:00:46,680 --> 01:00:48,540
other features that we implemented in

1456
01:00:48,540 --> 01:00:50,400
the last version

1457
01:00:50,400 --> 01:00:53,640
and I must admit to that when the next

1458
01:00:53,640 --> 01:00:56,400
version is coming I look through the

1459
01:00:56,400 --> 01:00:58,680
changelog and I think yeah this this

1460
01:00:58,680 --> 01:01:00,480
release is related one that is the

1461
01:01:00,480 --> 01:01:02,040
Milestone that there are so many new

1462
01:01:02,040 --> 01:01:02,819
things

1463
01:01:02,819 --> 01:01:04,740
but this happens repeatedly every year

1464
01:01:04,740 --> 01:01:07,280
with every new release so

1465
01:01:07,280 --> 01:01:10,440
3.2 will not be an exception and there

1466
01:01:10,440 --> 01:01:14,640
are quite many things to look forward

1467
01:01:14,640 --> 01:01:16,859
for example

1468
01:01:16,859 --> 01:01:19,440
the memory consumption in when

1469
01:01:19,440 --> 01:01:21,359
processing the big changes big change

1470
01:01:21,359 --> 01:01:24,059
set to Big Zone improved like a two-fold

1471
01:01:24,059 --> 01:01:25,020
and

1472
01:01:25,020 --> 01:01:27,780
yeah and small helpers that can help

1473
01:01:27,780 --> 01:01:29,400
anyone

1474
01:01:29,400 --> 01:01:32,579
so let's hand over to Vladimir who will

1475
01:01:32,579 --> 01:01:37,280
talk I will tell you about not resolver

1476
01:01:41,579 --> 01:01:46,099
yes so so for some some

1477
01:01:46,099 --> 01:01:49,740
subset of notable changes you know not

1478
01:01:49,740 --> 01:01:52,500
resolver in the past

1479
01:01:52,500 --> 01:01:55,319
year or two

1480
01:01:55,319 --> 01:02:00,500
there's the first thing is

1481
01:02:01,079 --> 01:02:05,599
about name server choice

1482
01:02:07,619 --> 01:02:09,480
the

1483
01:02:09,480 --> 01:02:13,980
what is it so in the many

1484
01:02:13,980 --> 01:02:16,500
situations that there are multiple

1485
01:02:16,500 --> 01:02:20,119
options what the resolver can do when

1486
01:02:20,119 --> 01:02:25,160
resolving a client's query which is

1487
01:02:26,040 --> 01:02:29,460
um usually ask one of the IP addresses

1488
01:02:29,460 --> 01:02:33,260
of a name server set or even

1489
01:02:33,260 --> 01:02:36,299
continue discovering some of those

1490
01:02:36,299 --> 01:02:38,960
addresses

1491
01:02:42,059 --> 01:02:44,280
and

1492
01:02:44,280 --> 01:02:45,799
the

1493
01:02:45,799 --> 01:02:47,359
original

1494
01:02:47,359 --> 01:02:49,980
algorithm that we had in there was a

1495
01:02:49,980 --> 01:02:52,020
very magical

1496
01:02:52,020 --> 01:02:56,339
and in some edge cases it makes choices

1497
01:02:56,339 --> 01:03:00,240
that we did not like at all so that

1498
01:03:00,240 --> 01:03:03,119
around a year ago it was

1499
01:03:03,119 --> 01:03:06,480
for everything and released

1500
01:03:06,480 --> 01:03:08,480
and

1501
01:03:08,480 --> 01:03:13,020
my kind of visible results or measurable

1502
01:03:13,020 --> 01:03:17,160
result is that we can get a bit better

1503
01:03:17,160 --> 01:03:21,119
latency on Cache misses due to the

1504
01:03:21,119 --> 01:03:24,140
choices being a bit better

1505
01:03:24,140 --> 01:03:26,640
usually just to

1506
01:03:26,640 --> 01:03:30,660
service that answer faster

1507
01:03:30,660 --> 01:03:33,059
due to being closer

1508
01:03:33,059 --> 01:03:36,900
and consequently using fewer packets due

1509
01:03:36,900 --> 01:03:41,160
to change to retransmission strategy

1510
01:03:41,160 --> 01:03:45,619
a part of this is uh also that the

1511
01:03:45,619 --> 01:03:49,440
decisions could be better thanks to now

1512
01:03:49,440 --> 01:03:53,520
sharing these stats among our single

1513
01:03:53,520 --> 01:03:57,059
credit processes that compose of the

1514
01:03:57,059 --> 01:03:59,240
service

1515
01:04:03,720 --> 01:04:06,540
okay so that's what

1516
01:04:06,540 --> 01:04:10,500
rewriting choosing of name servers

1517
01:04:10,500 --> 01:04:15,440
and let's have a look at the next slide

1518
01:04:20,040 --> 01:04:23,058
and the

1519
01:04:31,319 --> 01:04:32,599
okay

1520
01:04:32,599 --> 01:04:35,660
so we

1521
01:04:35,660 --> 01:04:38,059
changed our

1522
01:04:38,059 --> 01:04:42,359
uh thinking around assertions

1523
01:04:42,359 --> 01:04:46,640
uh so that is so when we

1524
01:04:46,640 --> 01:04:49,099
encounter some

1525
01:04:49,099 --> 01:04:54,059
inconsistency in some of our checks

1526
01:04:54,059 --> 01:04:57,059
uh so that's internal inconsistency that

1527
01:04:57,059 --> 01:05:02,040
means if we found this it means we run

1528
01:05:02,040 --> 01:05:07,339
into some Mark of ours not due to

1529
01:05:07,339 --> 01:05:10,559
unexpected behavior of service

1530
01:05:10,559 --> 01:05:14,819
but our bad code and there we often had

1531
01:05:14,819 --> 01:05:19,700
a dilemma of what to do about it

1532
01:05:20,480 --> 01:05:25,460
uh because one major option is to abort

1533
01:05:25,460 --> 01:05:29,460
this process because that allows us to

1534
01:05:29,460 --> 01:05:31,619
gather more information the generated

1535
01:05:31,619 --> 01:05:36,119
core dump assuming the user will be

1536
01:05:36,119 --> 01:05:39,240
sharing the core dump with us it it's

1537
01:05:39,240 --> 01:05:43,799
often very helpful in fixing these bugs

1538
01:05:43,799 --> 01:05:46,579
and

1539
01:05:47,160 --> 01:05:48,559
and

1540
01:05:48,559 --> 01:05:51,420
the other major choice is to try

1541
01:05:51,420 --> 01:05:54,420
recovering from the situation because

1542
01:05:54,420 --> 01:05:59,280
usually we can judge that the

1543
01:05:59,280 --> 01:06:02,579
disturbance in the state only affects

1544
01:06:02,579 --> 01:06:06,960
single requests so we can just in the

1545
01:06:06,960 --> 01:06:08,640
worst case serve file the single request

1546
01:06:08,640 --> 01:06:10,680
but continue with everything else

1547
01:06:10,680 --> 01:06:12,440
undisturbed

1548
01:06:12,440 --> 01:06:16,619
and it turned out that we can actually

1549
01:06:16,619 --> 01:06:20,040
simply do both of these at once

1550
01:06:20,040 --> 01:06:23,880
uh in the way that we Fork the child

1551
01:06:23,880 --> 01:06:26,039
immediately aborts to generate the core

1552
01:06:26,039 --> 01:06:28,319
dump and parent

1553
01:06:28,319 --> 01:06:31,319
process recovers

1554
01:06:31,319 --> 01:06:34,200
so uh users can

1555
01:06:34,200 --> 01:06:39,319
do this since a recent release

1556
01:06:39,539 --> 01:06:43,640
okay next slide please

1557
01:06:45,359 --> 01:06:47,480
and we

1558
01:06:47,480 --> 01:06:52,460
also restructured our logging

1559
01:06:52,740 --> 01:06:54,260
oh

1560
01:06:54,260 --> 01:06:57,839
one well Rewritten how it looks so it's

1561
01:06:57,839 --> 01:07:01,140
a bit more uniform but also edit uh

1562
01:07:01,140 --> 01:07:03,960
metadata

1563
01:07:03,960 --> 01:07:09,119
so that the logger can filter based on

1564
01:07:09,119 --> 01:07:11,520
priorities of these logs

1565
01:07:11,520 --> 01:07:16,020
and even contain

1566
01:07:17,099 --> 01:07:18,839
uh

1567
01:07:18,839 --> 01:07:21,780
in a system decays contain extra

1568
01:07:21,780 --> 01:07:24,960
position of the the origin of the log

1569
01:07:24,960 --> 01:07:28,140
like Source line

1570
01:07:28,140 --> 01:07:32,460
and yeah and logging groups that is so

1571
01:07:32,460 --> 01:07:35,660
the the back locks are generally

1572
01:07:35,660 --> 01:07:38,460
extremely verbose so

1573
01:07:38,460 --> 01:07:41,420
users can choose to debug just some

1574
01:07:41,420 --> 01:07:45,960
subsystems of not resolver

1575
01:07:45,960 --> 01:07:50,579
okay so then next final slide

1576
01:07:50,579 --> 01:07:52,020
and

1577
01:07:52,020 --> 01:07:56,160
there are also lots of many changes that

1578
01:07:56,160 --> 01:07:57,900
I did not mention

1579
01:07:57,900 --> 01:08:01,260
but some other notable small changes is

1580
01:08:01,260 --> 01:08:06,020
that we now do extended DNS error codes

1581
01:08:06,020 --> 01:08:10,260
uh trying to choose the one that

1582
01:08:10,260 --> 01:08:13,200
fits most to the particular situation

1583
01:08:13,200 --> 01:08:16,679
because often it's not clear at all

1584
01:08:16,679 --> 01:08:20,819
or we have a some code for Zone MD

1585
01:08:20,819 --> 01:08:22,460
verification

1586
01:08:22,460 --> 01:08:27,000
uh in our root prefilling code but that

1587
01:08:27,000 --> 01:08:30,479
can be or we didn't choose to activate

1588
01:08:30,479 --> 01:08:34,259
it yet because the record is not there

1589
01:08:34,259 --> 01:08:37,738
yet in the root

1590
01:08:37,738 --> 01:08:40,560
so but we can do that quickly when that

1591
01:08:40,560 --> 01:08:41,520
happens

1592
01:08:41,520 --> 01:08:45,660
and we edit support for proxy V2

1593
01:08:45,660 --> 01:08:50,339
so that's good to preserve the IP

1594
01:08:50,339 --> 01:08:52,020
address of the

1595
01:08:52,020 --> 01:08:56,100
client behind the reverse proxy in case

1596
01:08:56,100 --> 01:08:59,299
you use it and

1597
01:09:00,779 --> 01:09:03,299
and use of course that is what is then

1598
01:09:03,299 --> 01:09:07,560
used in ACLS and and such things

1599
01:09:07,560 --> 01:09:09,540
so

1600
01:09:09,540 --> 01:09:11,819
okay I think that's

1601
01:09:11,819 --> 01:09:14,600
about it

1602
01:09:16,439 --> 01:09:18,060
complicated for this

1603
01:09:18,060 --> 01:09:20,100
um so with that

1604
01:09:20,100 --> 01:09:24,299
we ever go we'll move on to uh Peter Van

1605
01:09:24,299 --> 01:09:29,420
Dyke with power DNS open Exchange

1606
01:09:31,738 --> 01:09:36,060
okay I am on uh thank you hello my name

1607
01:09:36,060 --> 01:09:38,399
is Peter Van Dyke I'm an engineer at

1608
01:09:38,399 --> 01:09:41,580
Power DNS I will be going over a couple

1609
01:09:41,580 --> 01:09:43,198
of the things we've been doing for the

1610
01:09:43,198 --> 01:09:45,779
last 12 to 14 months because it's been a

1611
01:09:45,779 --> 01:09:48,238
while since we gave such an update uh

1612
01:09:48,238 --> 01:09:51,139
slide two please

1613
01:09:52,500 --> 01:09:53,759
okay

1614
01:09:53,759 --> 01:09:55,980
um one General thing as many of you many

1615
01:09:55,980 --> 01:09:59,100
of you might know uh Unix time T used to

1616
01:09:59,100 --> 01:10:03,960
be 32 bits and this will run out in 2038

1617
01:10:03,960 --> 01:10:06,719
to mitigate any trouble arising from

1618
01:10:06,719 --> 01:10:09,960
that we have decided to only allow our

1619
01:10:09,960 --> 01:10:12,420
software to compile on platforms with a

1620
01:10:12,420 --> 01:10:15,420
64-bit time T since summer last year

1621
01:10:15,420 --> 01:10:16,860
depending on

1622
01:10:16,860 --> 01:10:20,760
which uh products got a release when

1623
01:10:20,760 --> 01:10:23,159
this means we currently do not share

1624
01:10:23,159 --> 01:10:26,820
current software for 32-bit Debian Red

1625
01:10:26,820 --> 01:10:31,199
Hat Etc however Alpine openwrt and

1626
01:10:31,199 --> 01:10:33,600
various other distributions that are

1627
01:10:33,600 --> 01:10:36,840
more current with this C libraries

1628
01:10:36,840 --> 01:10:41,820
do still run our software with a 64-bit

1629
01:10:41,820 --> 01:10:45,659
time t on the 32-bit platform

1630
01:10:45,659 --> 01:10:48,360
uh and we are hoping the Deviant 12 and

1631
01:10:48,360 --> 01:10:51,060
maybe red hat 10 when it comes out so I

1632
01:10:51,060 --> 01:10:53,100
guess it will be a while uh will allow

1633
01:10:53,100 --> 01:10:55,380
us to ship for those 32-bit platforms

1634
01:10:55,380 --> 01:10:56,880
again as well

1635
01:10:56,880 --> 01:11:00,960
uh last year sent to S8 went end of life

1636
01:11:00,960 --> 01:11:03,679
quite suddenly

1637
01:11:03,679 --> 01:11:06,600
we have decided to switch our bills for

1638
01:11:06,600 --> 01:11:08,340
that to Oracle Linux at the time because

1639
01:11:08,340 --> 01:11:11,699
Rocky and Alma Etc were not mature yet

1640
01:11:11,699 --> 01:11:14,880
we might revisit this change later we

1641
01:11:14,880 --> 01:11:16,679
have done a bunch of experiments and

1642
01:11:16,679 --> 01:11:21,060
testing regarding binary compatibility

1643
01:11:21,480 --> 01:11:23,820
uh and it appears that all of these

1644
01:11:23,820 --> 01:11:27,120
Reddit derivatives are quite compatible

1645
01:11:27,120 --> 01:11:29,040
now we've seen minor differences in

1646
01:11:29,040 --> 01:11:32,100
libraries but nothing major

1647
01:11:32,100 --> 01:11:35,219
at The Last Arc I think Niels presented

1648
01:11:35,219 --> 01:11:38,460
uh an implementation of Falcon 512 a

1649
01:11:38,460 --> 01:11:39,719
post quantum

1650
01:11:39,719 --> 01:11:42,380
algorithm in power DNS

1651
01:11:42,380 --> 01:11:45,179
we are looking forward to see what nist

1652
01:11:45,179 --> 01:11:47,280
will decide what the DNS Community will

1653
01:11:47,280 --> 01:11:49,920
decide I was we were very happy to see

1654
01:11:49,920 --> 01:11:52,500
that it was very easy to implement a new

1655
01:11:52,500 --> 01:11:55,199
algorithm in power DNS

1656
01:11:55,199 --> 01:11:57,840
uh besides all that we've been working

1657
01:11:57,840 --> 01:12:01,380
over all our products to uh make

1658
01:12:01,380 --> 01:12:03,900
embedded deployment easier so on systems

1659
01:12:03,900 --> 01:12:08,159
like open wrt systems with only 60 100

1660
01:12:08,159 --> 01:12:11,400
megabytes of Ram uh and we hope to in

1661
01:12:11,400 --> 01:12:13,620
the future see DNS this run on some home

1662
01:12:13,620 --> 01:12:16,380
routers like DNS mask and not resolver

1663
01:12:16,380 --> 01:12:20,420
are doing now slide three please

1664
01:12:25,640 --> 01:12:28,679
recursor is probably the product where

1665
01:12:28,679 --> 01:12:31,199
we see the biggest edition of new

1666
01:12:31,199 --> 01:12:34,080
features over every release last year we

1667
01:12:34,080 --> 01:12:36,600
added aggressive and SEC uh Indiana zero

1668
01:12:36,600 --> 01:12:39,239
padding to clients we enabled dnsic

1669
01:12:39,239 --> 01:12:41,460
validation by default we had validation

1670
01:12:41,460 --> 01:12:43,280
for quite some time already

1671
01:12:43,280 --> 01:12:45,600
defaulting to only when clients

1672
01:12:45,600 --> 01:12:47,460
requested but with this version we were

1673
01:12:47,460 --> 01:12:49,820
confident about enabling it by default

1674
01:12:49,820 --> 01:12:52,320
both in terms of the quality of our

1675
01:12:52,320 --> 01:12:54,900
implementation and the general quality

1676
01:12:54,900 --> 01:12:58,320
of dnsic deployments on the internet we

1677
01:12:58,320 --> 01:13:00,300
added extended error supports support

1678
01:13:00,300 --> 01:13:02,460
support for refetching things that

1679
01:13:02,460 --> 01:13:05,159
almost expire assuming they are being

1680
01:13:05,159 --> 01:13:06,659
queried

1681
01:13:06,659 --> 01:13:09,239
outgoing TCP first opened was quite

1682
01:13:09,239 --> 01:13:11,520
interesting Otto ended up writing a blog

1683
01:13:11,520 --> 01:13:14,640
post about that Google ended up fixing

1684
01:13:14,640 --> 01:13:16,380
some things in their stack there on the

1685
01:13:16,380 --> 01:13:17,699
outside

1686
01:13:17,699 --> 01:13:20,400
and finally there was a tsunami issue

1687
01:13:20,400 --> 01:13:22,980
which we were not vulnerable to but we

1688
01:13:22,980 --> 01:13:25,500
did find that we could do better in

1689
01:13:25,500 --> 01:13:27,780
terms of remembering name servers that

1690
01:13:27,780 --> 01:13:32,000
were not cooperating next slide please

1691
01:13:34,140 --> 01:13:36,480
in December we did another recursor

1692
01:13:36,480 --> 01:13:39,239
release we do releases every six months

1693
01:13:39,239 --> 01:13:41,520
for us three major products

1694
01:13:41,520 --> 01:13:44,400
uh one thing that I find very cute is

1695
01:13:44,400 --> 01:13:45,780
that some people have their out

1696
01:13:45,780 --> 01:13:47,580
deployments between which they use

1697
01:13:47,580 --> 01:13:50,040
notifiers on transfers to transfer

1698
01:13:50,040 --> 01:13:51,600
updated zones

1699
01:13:51,600 --> 01:13:54,420
and they have recursor that's running in

1700
01:13:54,420 --> 01:13:56,100
your network or at least is being used

1701
01:13:56,100 --> 01:13:58,860
by your network but it is out of date so

1702
01:13:58,860 --> 01:14:01,280
recursor can also flush

1703
01:14:01,280 --> 01:14:03,840
data for Israel when it receives a

1704
01:14:03,840 --> 01:14:07,199
notify there's an ACL for that Etc we

1705
01:14:07,199 --> 01:14:10,500
enabled DNS of TLS to authoritives in

1706
01:14:10,500 --> 01:14:12,780
4.6 this was still strictly manual

1707
01:14:12,780 --> 01:14:14,040
configuration

1708
01:14:14,040 --> 01:14:16,739
uh and along with that we added

1709
01:14:16,739 --> 01:14:19,739
connection reuse for DCP and TLS because

1710
01:14:19,739 --> 01:14:21,900
especially with TLS if you don't reuse

1711
01:14:21,900 --> 01:14:24,780
your connections things get extensive

1712
01:14:24,780 --> 01:14:26,400
quite quickly

1713
01:14:26,400 --> 01:14:28,620
inspired by how not resolver is doing

1714
01:14:28,620 --> 01:14:30,659
this we had it at a Zone to Cache

1715
01:14:30,659 --> 01:14:32,820
feature that will periodically take a

1716
01:14:32,820 --> 01:14:34,980
Zone from some source and insert

1717
01:14:34,980 --> 01:14:37,140
everything that's in that zone into the

1718
01:14:37,140 --> 01:14:40,140
cache which is roughly an implementation

1719
01:14:40,140 --> 01:14:41,940
of local routes

1720
01:14:41,940 --> 01:14:44,760
but with some smart small minor

1721
01:14:44,760 --> 01:14:47,520
differences next slide

1722
01:14:47,520 --> 01:14:51,420
the 407 released quite recently we added

1723
01:14:51,420 --> 01:14:52,800
some support for giving clients

1724
01:14:52,800 --> 01:14:56,040
additional records such as IP phones

1725
01:14:56,040 --> 01:14:58,020
that might get some SRV or laptop

1726
01:14:58,020 --> 01:15:00,060
records they would love to also get some

1727
01:15:00,060 --> 01:15:03,300
a records with that and assuming things

1728
01:15:03,300 --> 01:15:06,540
are in cash 4.7 users can ship those

1729
01:15:06,540 --> 01:15:08,520
records to their users

1730
01:15:08,520 --> 01:15:10,800
we uh updated our human minimization

1731
01:15:10,800 --> 01:15:13,080
implementation to the recommendations in

1732
01:15:13,080 --> 01:15:15,960
the new RFC version We Now actively go

1733
01:15:15,960 --> 01:15:18,360
out to fetch IPv6 blue before we're

1734
01:15:18,360 --> 01:15:21,600
quite lazy about that which means we now

1735
01:15:21,600 --> 01:15:24,540
get more name server IPs to choose from

1736
01:15:24,540 --> 01:15:27,360
based on speeds and generally we will be

1737
01:15:27,360 --> 01:15:29,580
using IPv6 more

1738
01:15:29,580 --> 01:15:31,920
uh one thing that we are very excited

1739
01:15:31,920 --> 01:15:34,320
about is unilateral dot probing

1740
01:15:34,320 --> 01:15:37,620
sadly deprive has not been able to reach

1741
01:15:37,620 --> 01:15:40,800
any consensus on an actual signal so

1742
01:15:40,800 --> 01:15:43,199
there's a draft now for for probing and

1743
01:15:43,199 --> 01:15:44,880
we have implemented something in the

1744
01:15:44,880 --> 01:15:47,280
spirit of it not necessarily to the

1745
01:15:47,280 --> 01:15:48,060
letter

1746
01:15:48,060 --> 01:15:50,159
and finally the zone to Cache feature

1747
01:15:50,159 --> 01:15:52,380
introduced in the previous version can

1748
01:15:52,380 --> 01:15:54,780
now validate Zone MD

1749
01:15:54,780 --> 01:15:57,540
next slide please

1750
01:15:57,540 --> 01:16:00,600
the authoritative is not nearly growing

1751
01:16:00,600 --> 01:16:02,580
features as fast as the recursor but

1752
01:16:02,580 --> 01:16:05,760
there are still some a 4.5 we grew a

1753
01:16:05,760 --> 01:16:09,360
Zone name cache so I'll explain what

1754
01:16:09,360 --> 01:16:11,219
that means power DNS tends to be

1755
01:16:11,219 --> 01:16:14,280
database backed sometimes SQL sometimes

1756
01:16:14,280 --> 01:16:17,159
it's something fast and local and your

1757
01:16:17,159 --> 01:16:19,380
server may also get a lot of requests

1758
01:16:19,380 --> 01:16:21,659
for those you don't host at all with

1759
01:16:21,659 --> 01:16:24,480
this cache we periodically fetch a list

1760
01:16:24,480 --> 01:16:28,679
of zones from the database and

1761
01:16:28,679 --> 01:16:31,140
remember that nothing outside of that

1762
01:16:31,140 --> 01:16:32,880
set exists

1763
01:16:32,880 --> 01:16:35,760
besides that we got a priority ordering

1764
01:16:35,760 --> 01:16:38,400
for the incoming soundtrack for queue

1765
01:16:38,400 --> 01:16:40,980
because our signature refreshes which

1766
01:16:40,980 --> 01:16:43,080
happened every Thursday Were Soldiers

1767
01:16:43,080 --> 01:16:45,120
drowning out actual changes that people

1768
01:16:45,120 --> 01:16:46,860
cared about

1769
01:16:46,860 --> 01:16:49,699
next slide please

1770
01:16:49,980 --> 01:16:53,219
in 4.6 we got incoming proxy V2 support

1771
01:16:53,219 --> 01:16:55,800
I saw Paul asking what that was I know

1772
01:16:55,800 --> 01:16:58,199
Punit answered him but I will answer for

1773
01:16:58,199 --> 01:16:59,940
the benefit of the rest of the audience

1774
01:16:59,940 --> 01:17:03,179
if you run a setup with a server let's

1775
01:17:03,179 --> 01:17:05,219
say an authoritative and you have

1776
01:17:05,219 --> 01:17:07,260
something like the DNS disk in front or

1777
01:17:07,260 --> 01:17:09,600
some other proxy or low balancer the

1778
01:17:09,600 --> 01:17:11,520
authoritative no longer sees the actual

1779
01:17:11,520 --> 01:17:16,080
client IPS with the proxy protocol DNS

1780
01:17:16,080 --> 01:17:17,699
this when talking to the back end like

1781
01:17:17,699 --> 01:17:19,920
the authoritative will pretend a small

1782
01:17:19,920 --> 01:17:21,980
header that shares that information

1783
01:17:21,980 --> 01:17:24,120
allow the authoritative to make

1784
01:17:24,120 --> 01:17:26,400
decisions based on the actual client IP

1785
01:17:26,400 --> 01:17:28,860
and the same goes when the recursor is

1786
01:17:28,860 --> 01:17:31,380
behind the Innes list and I'm very happy

1787
01:17:31,380 --> 01:17:34,080
to see that many of the vendors have now

1788
01:17:34,080 --> 01:17:36,120
agreed that proxy V2 is the right

1789
01:17:36,120 --> 01:17:38,820
protocol for this after previously

1790
01:17:38,820 --> 01:17:42,420
failed drops in the ITF like xpf

1791
01:17:42,420 --> 01:17:45,239
uh we added edina's cookie Sports

1792
01:17:45,239 --> 01:17:47,219
according to the latest documents the

1793
01:17:47,219 --> 01:17:49,560
latest RC uh so this should be

1794
01:17:49,560 --> 01:17:52,199
interoperable with the other vendors

1795
01:17:52,199 --> 01:17:54,780
and we change the default n63 parameters

1796
01:17:54,780 --> 01:18:00,000
uh according to the draft by Wes and

1797
01:18:00,000 --> 01:18:01,980
Victor I think which was discussed

1798
01:18:01,980 --> 01:18:03,900
yesterday

1799
01:18:03,900 --> 01:18:06,860
next slide please

1800
01:18:07,560 --> 01:18:11,100
uh in Authority server 4.7 which we hope

1801
01:18:11,100 --> 01:18:14,400
to release within say a month we expect

1802
01:18:14,400 --> 01:18:16,260
to ship an implementation of catalog

1803
01:18:16,260 --> 01:18:17,699
zones it is finished

1804
01:18:17,699 --> 01:18:20,880
uh many people have commented on the

1805
01:18:20,880 --> 01:18:22,560
code already we are doing a bit more

1806
01:18:22,560 --> 01:18:25,199
testing and I actually hope to merge it

1807
01:18:25,199 --> 01:18:28,140
and release an alpha version later this

1808
01:18:28,140 --> 01:18:29,400
week

1809
01:18:29,400 --> 01:18:32,100
next slide

1810
01:18:32,100 --> 01:18:34,920
then there's DNS disks our low balancer

1811
01:18:34,920 --> 01:18:39,480
proxy front-end Etc uh also quite often

1812
01:18:39,480 --> 01:18:41,760
used in front of other name servers that

1813
01:18:41,760 --> 01:18:43,199
are not powered DNS

1814
01:18:43,199 --> 01:18:45,239
last year we released out of order

1815
01:18:45,239 --> 01:18:48,060
processing proxy V2 support both

1816
01:18:48,060 --> 01:18:51,360
incoming and outgoing and those who use

1817
01:18:51,360 --> 01:18:53,280
DNS test might know that you can write

1818
01:18:53,280 --> 01:18:56,280
policies for load balancing in Lua

1819
01:18:56,280 --> 01:18:59,520
before this version those all ran in a

1820
01:18:59,520 --> 01:19:01,320
single thread limiting performance

1821
01:19:01,320 --> 01:19:03,840
starting with this version you can write

1822
01:19:03,840 --> 01:19:06,840
those policies as a bit of Lua that runs

1823
01:19:06,840 --> 01:19:08,760
separately in several threads at the

1824
01:19:08,760 --> 01:19:09,719
same time

1825
01:19:09,719 --> 01:19:12,900
uh and also we made the packet guy cache

1826
01:19:12,900 --> 01:19:15,659
cookie blinds which AIDS debugging a lot

1827
01:19:15,659 --> 01:19:18,840
because many users

1828
01:19:18,840 --> 01:19:21,000
were seeing

1829
01:19:21,000 --> 01:19:23,400
um cached results from the insist and

1830
01:19:23,400 --> 01:19:25,080
then you as the operator go and test

1831
01:19:25,080 --> 01:19:27,300
with d which sends cookies you get

1832
01:19:27,300 --> 01:19:29,340
something fresh

1833
01:19:29,340 --> 01:19:32,159
um so with the cash being cookie blinds

1834
01:19:32,159 --> 01:19:34,739
the Dig experience matches the user

1835
01:19:34,739 --> 01:19:37,280
experience slightly more slightly closer

1836
01:19:37,280 --> 01:19:40,020
and also this does just just saves a lot

1837
01:19:40,020 --> 01:19:41,520
of memory and improves the cash head

1838
01:19:41,520 --> 01:19:45,199
ratios next slide

1839
01:19:46,679 --> 01:19:49,679
in 1.7 released earlier this year we now

1840
01:19:49,679 --> 01:19:52,080
support connecting to upstreams over dot

1841
01:19:52,080 --> 01:19:55,040
and Doh DNS list already supported

1842
01:19:55,040 --> 01:19:59,239
serving clients via DOT and Doh

1843
01:19:59,239 --> 01:20:02,159
we can now send truncated responses via

1844
01:20:02,159 --> 01:20:04,920
XDP based on policies also defined in

1845
01:20:04,920 --> 01:20:07,340
Lua

1846
01:20:07,500 --> 01:20:10,080
okay two minutes left

1847
01:20:10,080 --> 01:20:14,659
um DNS lists oh previous slide please

1848
01:20:15,000 --> 01:20:18,540
uh DNS disk can now itself serve svcb or

1849
01:20:18,540 --> 01:20:21,360
https records for clients that want to

1850
01:20:21,360 --> 01:20:24,380
upgrade from the o53 to dot or Doh

1851
01:20:24,380 --> 01:20:27,120
previously you would need to points need

1852
01:20:27,120 --> 01:20:28,860
to put an out or recursor behind the

1853
01:20:28,860 --> 01:20:30,900
internet to serve those records

1854
01:20:30,900 --> 01:20:33,840
uh and in 1.7 we get lockless custom

1855
01:20:33,840 --> 01:20:36,179
actions in Lua which is a similar story

1856
01:20:36,179 --> 01:20:38,940
to the locals low balancing policies in

1857
01:20:38,940 --> 01:20:40,380
1.6

1858
01:20:40,380 --> 01:20:43,140
uh that was my last slide uh finally I

1859
01:20:43,140 --> 01:20:46,260
would like to add that DNS list is a

1860
01:20:46,260 --> 01:20:48,840
Google summer of code program this year

1861
01:20:48,840 --> 01:20:51,600
and we are expecting outcoming the

1862
01:20:51,600 --> 01:20:54,560
outgoing doq to come to us through that

1863
01:20:54,560 --> 01:20:57,179
uh and we hope that shortly after that

1864
01:20:57,179 --> 01:20:59,159
we will also be able to offer incoming

1865
01:20:59,159 --> 01:21:03,080
doq uh do doq from recursor to outs Etc

1866
01:21:03,080 --> 01:21:04,739
thank you

1867
01:21:04,739 --> 01:21:08,880
then I see I have one question

1868
01:21:08,880 --> 01:21:11,880
nist Victor recovery asks nist warns

1869
01:21:11,880 --> 01:21:13,500
that Falcon is difficult to implement

1870
01:21:13,500 --> 01:21:15,719
correctly I am guessing you're using the

1871
01:21:15,719 --> 01:21:17,219
reference implementation of the

1872
01:21:17,219 --> 01:21:19,320
underlying crypto

1873
01:21:19,320 --> 01:21:21,239
um the implementation was done by Niels

1874
01:21:21,239 --> 01:21:23,219
and friends and I know Niels is in the

1875
01:21:23,219 --> 01:21:24,300
room with you

1876
01:21:24,300 --> 01:21:27,060
so maybe he can answer at some opportune

1877
01:21:27,060 --> 01:21:29,239
time

1878
01:21:30,900 --> 01:21:34,020
I think I'm the last

1879
01:21:34,020 --> 01:21:37,380
uh Vicki from ISC there are a number of

1880
01:21:37,380 --> 01:21:39,900
other folks here from ISC including Mark

1881
01:21:39,900 --> 01:21:41,900
so if you have any difficult questions

1882
01:21:41,900 --> 01:21:44,820
I'll get him to answer those

1883
01:21:44,820 --> 01:21:46,980
so um this is a

1884
01:21:46,980 --> 01:21:51,600
a Twitter post that uh Andre found and I

1885
01:21:51,600 --> 01:21:53,940
think that uh he sometimes feels like

1886
01:21:53,940 --> 01:21:57,659
this is his role in by nine you know uh

1887
01:21:57,659 --> 01:22:00,540
vacuuming the vast uh

1888
01:22:00,540 --> 01:22:05,580
uh desert of uh Tech debt in um

1889
01:22:05,580 --> 01:22:08,580
in by nine

1890
01:22:08,580 --> 01:22:12,000
I however see it completely differently

1891
01:22:12,000 --> 01:22:14,100
um this is uh

1892
01:22:14,100 --> 01:22:15,780
uh

1893
01:22:15,780 --> 01:22:19,860
uh to my mind represents our really

1894
01:22:19,860 --> 01:22:22,860
strong uh QA team that we have we have

1895
01:22:22,860 --> 01:22:26,460
now built up a a team of four really

1896
01:22:26,460 --> 01:22:29,219
talented uh test Engineers so this is

1897
01:22:29,219 --> 01:22:31,980
now almost one QA person to every two

1898
01:22:31,980 --> 01:22:34,260
developers in the buying team this is

1899
01:22:34,260 --> 01:22:35,880
stuff that you don't see in the release

1900
01:22:35,880 --> 01:22:37,679
notes and you wouldn't know otherwise

1901
01:22:37,679 --> 01:22:40,440
but we have really substantially beefed

1902
01:22:40,440 --> 01:22:42,300
up our test capability in the past few

1903
01:22:42,300 --> 01:22:46,199
years or continuous integration runs a

1904
01:22:46,199 --> 01:22:47,820
huge Suite of tests it's more than 70

1905
01:22:47,820 --> 01:22:50,640
tests on every version of every merch

1906
01:22:50,640 --> 01:22:51,659
request

1907
01:22:51,659 --> 01:22:54,239
and um we're constantly adding new tests

1908
01:22:54,239 --> 01:22:55,920
when I asked right when I was producing

1909
01:22:55,920 --> 01:23:00,000
these slides uh Mikhail kepian described

1910
01:23:00,000 --> 01:23:02,880
to me a new test that we put together to

1911
01:23:02,880 --> 01:23:06,120
find memory links in addition every day

1912
01:23:06,120 --> 01:23:08,699
the QA team runs additional tests that

1913
01:23:08,699 --> 01:23:12,000
run on a daily basis including uh resp

1914
01:23:12,000 --> 01:23:13,860
diff which I'm going to talk about in a

1915
01:23:13,860 --> 01:23:17,040
second obviously

1916
01:23:17,040 --> 01:23:19,320
it's easy to run a lot of tests the

1917
01:23:19,320 --> 01:23:21,239
difficulty comes in finding the time to

1918
01:23:21,239 --> 01:23:23,280
actually look at the test failures and

1919
01:23:23,280 --> 01:23:25,560
figure out what sort of problem you have

1920
01:23:25,560 --> 01:23:27,179
and that's something that we really

1921
01:23:27,179 --> 01:23:29,219
focus on with the monthly snapshot

1922
01:23:29,219 --> 01:23:31,080
releases

1923
01:23:31,080 --> 01:23:31,679
um

1924
01:23:31,679 --> 01:23:35,520
uh we have had for years uh an

1925
01:23:35,520 --> 01:23:37,620
authoritative performance test bed that

1926
01:23:37,620 --> 01:23:40,560
Ray Bellis designed perflab and last

1927
01:23:40,560 --> 01:23:43,860
year uh Peter spot check built us an uh

1928
01:23:43,860 --> 01:23:45,600
performance test bed for resolver

1929
01:23:45,600 --> 01:23:48,300
testing and we run that on an ongoing

1930
01:23:48,300 --> 01:23:50,040
basis and check that also with the

1931
01:23:50,040 --> 01:23:52,440
monthly releases one thing we haven't

1932
01:23:52,440 --> 01:23:55,320
been able to do until recently is do

1933
01:23:55,320 --> 01:23:57,719
stress testing with a high loads of TCP

1934
01:23:57,719 --> 01:23:59,100
traffic and that's something that we're

1935
01:23:59,100 --> 01:24:02,000
working on right now

1936
01:24:03,860 --> 01:24:07,260
uh rest if for anyone who doesn't know

1937
01:24:07,260 --> 01:24:09,960
is just what it sounds like it looks at

1938
01:24:09,960 --> 01:24:12,320
different responses from different

1939
01:24:12,320 --> 01:24:15,060
resolvers right now we're comparing name

1940
01:24:15,060 --> 01:24:19,440
d with the not resolver 551 Unbound 113

1941
01:24:19,440 --> 01:24:23,880
1 and power DNS recursor 459. and we

1942
01:24:23,880 --> 01:24:27,840
have set a ratio of a half a percent and

1943
01:24:27,840 --> 01:24:29,760
if we see more than a half a percent of

1944
01:24:29,760 --> 01:24:31,739
discrepancies between bind and the other

1945
01:24:31,739 --> 01:24:33,960
three we consider that maybe there's an

1946
01:24:33,960 --> 01:24:36,300
error in bind

1947
01:24:36,300 --> 01:24:37,860
um the way that this is calculated

1948
01:24:37,860 --> 01:24:39,719
though all three of the other

1949
01:24:39,719 --> 01:24:41,699
implementations have to have one answer

1950
01:24:41,699 --> 01:24:44,219
and then bind returns a different answer

1951
01:24:44,219 --> 01:24:46,860
if everybody has a different answer we

1952
01:24:46,860 --> 01:24:50,340
don't consider that's a bind error

1953
01:24:50,340 --> 01:24:52,860
I just looked at one of the most recent

1954
01:24:52,860 --> 01:24:56,400
jobs and typically a typical uh result

1955
01:24:56,400 --> 01:24:59,400
is that almost exactly a third of a

1956
01:24:59,400 --> 01:25:01,380
percent of the time you get a different

1957
01:25:01,380 --> 01:25:03,179
answer with name d than with the other

1958
01:25:03,179 --> 01:25:06,840
three systems this I think is pretty

1959
01:25:06,840 --> 01:25:10,679
impressive agreement because buried in

1960
01:25:10,679 --> 01:25:12,900
this one-third of a percent almost 40

1961
01:25:12,900 --> 01:25:15,060
percent of those are timing differences

1962
01:25:15,060 --> 01:25:17,460
and we're running these tests on the

1963
01:25:17,460 --> 01:25:19,500
open internet as you all know if you run

1964
01:25:19,500 --> 01:25:23,400
the same test the subsequent um runs of

1965
01:25:23,400 --> 01:25:25,699
the exact same test with the exact same

1966
01:25:25,699 --> 01:25:28,020
software same queries you will get

1967
01:25:28,020 --> 01:25:30,980
timing differences

1968
01:25:33,179 --> 01:25:35,540
Andre wanted to make sure that I mention

1969
01:25:35,540 --> 01:25:39,060
that 918 which is our current stable

1970
01:25:39,060 --> 01:25:43,620
branch is quite a bit faster than 916. I

1971
01:25:43,620 --> 01:25:45,420
went through the results and I have to

1972
01:25:45,420 --> 01:25:47,460
say for authoritative it's about the

1973
01:25:47,460 --> 01:25:52,199
same but for recursive in fact we we do

1974
01:25:52,199 --> 01:25:53,460
have a pretty good performance

1975
01:25:53,460 --> 01:25:55,920
Improvement this is a relatively

1976
01:25:55,920 --> 01:25:58,620
complicated chart but anyone who's seen

1977
01:25:58,620 --> 01:26:01,080
one of Peter spot check's presentations

1978
01:26:01,080 --> 01:26:04,219
on resolver testing might recognize it

1979
01:26:04,219 --> 01:26:08,280
the scale is logarithmic on each axis on

1980
01:26:08,280 --> 01:26:10,679
the vertical axis that's the response

1981
01:26:10,679 --> 01:26:14,820
time and across the bottom uh it is the

1982
01:26:14,820 --> 01:26:17,520
percentile of queries that are responded

1983
01:26:17,520 --> 01:26:21,719
to and basically the orange line is 918

1984
01:26:21,719 --> 01:26:24,659
the blue line is 9 16.

1985
01:26:24,659 --> 01:26:27,719
um further to the left is better

1986
01:26:27,719 --> 01:26:31,199
um four percent of the queries uh sent

1987
01:26:31,199 --> 01:26:33,780
by 918 were answered in less than 10

1988
01:26:33,780 --> 01:26:36,120
milliseconds and there were five times

1989
01:26:36,120 --> 01:26:38,760
as many queries that took that long or

1990
01:26:38,760 --> 01:26:42,780
longer with 916.

1991
01:26:45,719 --> 01:26:48,540
um we're not just obviously testing and

1992
01:26:48,540 --> 01:26:51,060
fixing bugs for a long time we have had

1993
01:26:51,060 --> 01:26:55,080
a program of continuous refactoring

1994
01:26:55,080 --> 01:26:58,260
in bind and this year and next year

1995
01:26:58,260 --> 01:27:00,360
we're focusing on the red black tree

1996
01:27:00,360 --> 01:27:03,659
database some of you know that Tony

1997
01:27:03,659 --> 01:27:06,600
Finch joined ISE earlier this year and

1998
01:27:06,600 --> 01:27:09,239
he is taking the lead and tackling this

1999
01:27:09,239 --> 01:27:11,880
project the main thing that we're trying

2000
01:27:11,880 --> 01:27:15,780
to accomplish is code simplification for

2001
01:27:15,780 --> 01:27:18,840
the development team but of course at

2002
01:27:18,840 --> 01:27:20,159
the same time we're trying to make sure

2003
01:27:20,159 --> 01:27:22,920
that we're not incurring a performance

2004
01:27:22,920 --> 01:27:24,540
penalty we're not slowing down bind

2005
01:27:24,540 --> 01:27:26,880
we're not chewing up more memory the

2006
01:27:26,880 --> 01:27:28,920
main thing that users will see as a

2007
01:27:28,920 --> 01:27:31,679
benefit we hope is reduce blocking so

2008
01:27:31,679 --> 01:27:33,600
that when you're doing large Zone

2009
01:27:33,600 --> 01:27:36,500
transfers you don't inhibit the

2010
01:27:36,500 --> 01:27:40,139
responsiveness of bind at the same time

2011
01:27:40,139 --> 01:27:43,500
um Tony invented this QP tree data

2012
01:27:43,500 --> 01:27:46,440
structure back in 20 uh I think it was

2013
01:27:46,440 --> 01:27:49,080
actually before 2015 but in any case I

2014
01:27:49,080 --> 01:27:51,420
know that the not DNS team implemented

2015
01:27:51,420 --> 01:27:53,580
implemented that or version of that in

2016
01:27:53,580 --> 01:27:56,880
2016. Tony's done experiments with NSD

2017
01:27:56,880 --> 01:27:59,580
since then and uh he's continued to

2018
01:27:59,580 --> 01:28:01,380
improve this

2019
01:28:01,380 --> 01:28:02,460
um

2020
01:28:02,460 --> 01:28:05,699
his Focus has been on reducing the

2021
01:28:05,699 --> 01:28:07,440
memory looking at lots of different

2022
01:28:07,440 --> 01:28:09,900
compression techniques improving the

2023
01:28:09,900 --> 01:28:12,780
multi-threading and uh the improving the

2024
01:28:12,780 --> 01:28:14,820
multiversion concurrency and that is

2025
01:28:14,820 --> 01:28:17,280
again so that you can have one version

2026
01:28:17,280 --> 01:28:19,199
that you're updating at while you're

2027
01:28:19,199 --> 01:28:21,000
serving the information from another

2028
01:28:21,000 --> 01:28:22,199
version

2029
01:28:22,199 --> 01:28:25,500
and he's got uh what sounds like a

2030
01:28:25,500 --> 01:28:28,440
conservative plan for replacing the

2031
01:28:28,440 --> 01:28:32,100
rbtdb in stages and again this is of

2032
01:28:32,100 --> 01:28:33,840
course going to happen in our

2033
01:28:33,840 --> 01:28:37,460
experimental development version

2034
01:28:38,159 --> 01:28:41,400
he has some very early test data in the

2035
01:28:41,400 --> 01:28:43,260
small print there I've got a link to his

2036
01:28:43,260 --> 01:28:46,639
blog where he blogs about his progress

2037
01:28:46,639 --> 01:28:49,920
this is very promising so far he has

2038
01:28:49,920 --> 01:28:52,199
been able to achieve some performance

2039
01:28:52,199 --> 01:28:54,659
improvements and significantly cut back

2040
01:28:54,659 --> 01:28:58,020
on the memory requirement

2041
01:28:58,020 --> 01:29:00,239
um it's not merged yet uh we're

2042
01:29:00,239 --> 01:29:01,679
expecting he's going to be merging it

2043
01:29:01,679 --> 01:29:04,100
this fall

2044
01:29:04,320 --> 01:29:06,780
uh we are of course working on a lot of

2045
01:29:06,780 --> 01:29:08,580
other projects I don't have a long list

2046
01:29:08,580 --> 01:29:10,860
of every feature we've added in the last

2047
01:29:10,860 --> 01:29:13,440
uh year or year and a half

2048
01:29:13,440 --> 01:29:16,020
um we started on extended errors in 9 18

2049
01:29:16,020 --> 01:29:18,300
we're adding more extended errors in the

2050
01:29:18,300 --> 01:29:20,540
current development branch

2051
01:29:20,540 --> 01:29:23,639
the or catalog zones update to the 06

2052
01:29:23,639 --> 01:29:25,440
draft should be in the next monthly

2053
01:29:25,440 --> 01:29:27,980
snapshot

2054
01:29:28,620 --> 01:29:30,260
um

2055
01:29:30,260 --> 01:29:35,219
uh we are sponsoring an external uh

2056
01:29:35,219 --> 01:29:38,460
contractor to work on an open SSL 3.0

2057
01:29:38,460 --> 01:29:42,540
pkcs 11. provider engine because the API

2058
01:29:42,540 --> 01:29:46,519
has changed since last the last version

2059
01:29:46,560 --> 01:29:49,320
um our engineer who has been working on

2060
01:29:49,320 --> 01:29:52,139
the new transport who implemented our go

2061
01:29:52,139 --> 01:29:55,219
and Dot support is actually already

2062
01:29:55,219 --> 01:29:57,719
refactoring and this is because he

2063
01:29:57,719 --> 01:30:01,440
realized that we had uh support for TCP

2064
01:30:01,440 --> 01:30:04,560
support for TCP DNS support for DNS over

2065
01:30:04,560 --> 01:30:08,580
TLS and a lot of changes were having to

2066
01:30:08,580 --> 01:30:10,320
be repeated in each of those three

2067
01:30:10,320 --> 01:30:13,440
completely separate transports so he's

2068
01:30:13,440 --> 01:30:16,320
trying to unify them and he's also of

2069
01:30:16,320 --> 01:30:19,739
course keeping an eye on the status of

2070
01:30:19,739 --> 01:30:22,040
the quick implementations out there

2071
01:30:22,040 --> 01:30:25,400
we're also planning to use the

2072
01:30:25,400 --> 01:30:29,460
ngtcp2 library that Libor discussed and

2073
01:30:29,460 --> 01:30:31,380
we're very grateful that he's doing the

2074
01:30:31,380 --> 01:30:34,739
experiment so we can learn from that

2075
01:30:34,739 --> 01:30:36,540
um another thing we're doing which is

2076
01:30:36,540 --> 01:30:38,580
not really a release note item we've

2077
01:30:38,580 --> 01:30:40,020
we're starting to put a lot of work into

2078
01:30:40,020 --> 01:30:42,659
the arm as Suzanne goldless who's here

2079
01:30:42,659 --> 01:30:45,659
this this uh orc also has been working

2080
01:30:45,659 --> 01:30:48,179
on that and we've recruited Ron Atchison

2081
01:30:48,179 --> 01:30:50,880
who many of you may remember

2082
01:30:50,880 --> 01:30:53,460
from the pro DNS and buying books and

2083
01:30:53,460 --> 01:30:57,120
the zitrac zitrax website uh to help us

2084
01:30:57,120 --> 01:31:00,120
out uh in making the arm

2085
01:31:00,120 --> 01:31:02,699
more user-friendly and provide more

2086
01:31:02,699 --> 01:31:05,340
description of what commands you might

2087
01:31:05,340 --> 01:31:07,679
want to actually look into

2088
01:31:07,679 --> 01:31:09,239
um

2089
01:31:09,239 --> 01:31:13,020
uh he pushed Us in particular and Peter

2090
01:31:13,020 --> 01:31:15,060
did Peter spot check did a lot of this

2091
01:31:15,060 --> 01:31:18,300
work actually but he pushed us so that

2092
01:31:18,300 --> 01:31:20,100
um Now everywhere where we mention a

2093
01:31:20,100 --> 01:31:22,500
command in the arm it links directly to

2094
01:31:22,500 --> 01:31:25,739
the command reference and we also have

2095
01:31:25,739 --> 01:31:28,199
added categories for all the commands so

2096
01:31:28,199 --> 01:31:30,060
you can find all the categories related

2097
01:31:30,060 --> 01:31:33,060
to a particular function in fact we're

2098
01:31:33,060 --> 01:31:34,800
also planning to add a category we

2099
01:31:34,800 --> 01:31:36,540
haven't yet but

2100
01:31:36,540 --> 01:31:38,219
there's something along the lines of

2101
01:31:38,219 --> 01:31:42,300
caution or expert or don't use this

2102
01:31:42,300 --> 01:31:44,040
command unless you're sure you know what

2103
01:31:44,040 --> 01:31:46,400
you're doing

2104
01:31:48,120 --> 01:31:49,080
um

2105
01:31:49,080 --> 01:31:51,000
we haven't made any decision on this but

2106
01:31:51,000 --> 01:31:52,560
we have started having some internal

2107
01:31:52,560 --> 01:31:56,760
discussions about should we uh

2108
01:31:56,760 --> 01:31:59,520
become more parent-centric so it feels

2109
01:31:59,520 --> 01:32:02,280
like it's a lot of work to constantly be

2110
01:32:02,280 --> 01:32:05,340
checking with the child and

2111
01:32:05,340 --> 01:32:07,860
um uh

2112
01:32:07,860 --> 01:32:09,659
uh determining what to do if the child

2113
01:32:09,659 --> 01:32:11,120
is not updated

2114
01:32:11,120 --> 01:32:13,739
and we have an open git lab issue if

2115
01:32:13,739 --> 01:32:15,900
people want to comment on that as I said

2116
01:32:15,900 --> 01:32:17,699
it's just something we're discussing

2117
01:32:17,699 --> 01:32:19,739
internally

2118
01:32:19,739 --> 01:32:21,719
and um

2119
01:32:21,719 --> 01:32:24,120
this is our current status the current

2120
01:32:24,120 --> 01:32:26,520
stable version is 9 18. we came out with

2121
01:32:26,520 --> 01:32:28,920
that in January that will be our stable

2122
01:32:28,920 --> 01:32:31,080
Branch for two years we switched to a

2123
01:32:31,080 --> 01:32:34,980
two-year cycle with the 918 version

2124
01:32:34,980 --> 01:32:37,440
um in summary we have better recursive

2125
01:32:37,440 --> 01:32:41,300
performance we have better memory usage

2126
01:32:41,300 --> 01:32:44,460
this is the release that has the stable

2127
01:32:44,460 --> 01:32:49,980
Deployable versions of Doh dot transfers

2128
01:32:49,980 --> 01:32:53,040
over TLS dig is updated so we have a dig

2129
01:32:53,040 --> 01:32:56,820
plus TLS option we have of course the

2130
01:32:56,820 --> 01:32:59,760
key and signing policy tool in there

2131
01:32:59,760 --> 01:33:01,440
which we're continuing to improve

2132
01:33:01,440 --> 01:33:04,620
support for openssl 3.0

2133
01:33:04,620 --> 01:33:07,739
uh we're adding extended errors and we

2134
01:33:07,739 --> 01:33:10,920
have continued a program of

2135
01:33:10,920 --> 01:33:14,420
gradually deprecating

2136
01:33:14,420 --> 01:33:17,420
features that we feel are obsolete

2137
01:33:17,420 --> 01:33:19,440
one of the biggest things that we

2138
01:33:19,440 --> 01:33:21,360
deprecated in 918 was support for

2139
01:33:21,360 --> 01:33:23,040
Windows

2140
01:33:23,040 --> 01:33:24,780
um this uh

2141
01:33:24,780 --> 01:33:26,820
we got some

2142
01:33:26,820 --> 01:33:28,620
protests on the mailing list but nobody

2143
01:33:28,620 --> 01:33:31,139
was interested in picking it up and it's

2144
01:33:31,139 --> 01:33:33,120
increasingly hard to support

2145
01:33:33,120 --> 01:33:35,820
operating systems that um

2146
01:33:35,820 --> 01:33:39,060
don't have some of the packages that we

2147
01:33:39,060 --> 01:33:42,960
rely on in the network area and that are

2148
01:33:42,960 --> 01:33:45,780
difficult for our recursive

2149
01:33:45,780 --> 01:33:48,600
continuous integration testing so that's

2150
01:33:48,600 --> 01:33:51,060
the end I've got a few links here

2151
01:33:51,060 --> 01:33:52,860
and um

2152
01:33:52,860 --> 01:33:55,580
I'll take questions

2153
01:33:56,699 --> 01:33:58,080
um somebody asked if are there any

2154
01:33:58,080 --> 01:34:01,260
improvements made to cash in 9.18 stale

2155
01:34:01,260 --> 01:34:03,800
cash especially

2156
01:34:03,800 --> 01:34:06,719
I know we did just make a change in this

2157
01:34:06,719 --> 01:34:10,560
in the handling of stale cash in 919 I

2158
01:34:10,560 --> 01:34:12,179
don't know Mark do you know if we back

2159
01:34:12,179 --> 01:34:15,120
ported that to 918

2160
01:34:15,120 --> 01:34:16,139
foreign

2161
01:34:16,139 --> 01:34:19,980
I know there is a change in um the the

2162
01:34:19,980 --> 01:34:24,239
most recent monthly version of 919

2163
01:34:24,239 --> 01:34:27,179
um I don't know if we backported it uh I

2164
01:34:27,179 --> 01:34:28,560
actually think we did if you can tell me

2165
01:34:28,560 --> 01:34:30,000
who asked the question I can follow up

2166
01:34:30,000 --> 01:34:32,239
later

2167
01:34:35,100 --> 01:34:37,920
okay if you if you if you check the

2168
01:34:37,920 --> 01:34:41,280
release notes for the most recent uh 919

2169
01:34:41,280 --> 01:34:43,860
version and I think it was in the mo in

2170
01:34:43,860 --> 01:34:46,080
last months that uh

2171
01:34:46,080 --> 01:34:50,940
the June uh 919 version as well

2172
01:34:50,940 --> 01:34:54,320
and this was uh

2173
01:34:54,360 --> 01:34:57,840
limiting the uh maintenance of negative

2174
01:34:57,840 --> 01:35:00,960
answers in the cash I think

2175
01:35:00,960 --> 01:35:03,360
okay so we'll move into the panel

2176
01:35:03,360 --> 01:35:04,980
discussion part of this

2177
01:35:04,980 --> 01:35:07,440
um and so uh we've got I think about 15

2178
01:35:07,440 --> 01:35:09,659
minutes is that right Suzanne roughly

2179
01:35:09,659 --> 01:35:10,800
great

2180
01:35:10,800 --> 01:35:13,860
um so uh to kind of kick things off

2181
01:35:13,860 --> 01:35:16,199
um I wanted to ask the panel about quick

2182
01:35:16,199 --> 01:35:19,800
we see a lot of activity now with each

2183
01:35:19,800 --> 01:35:21,659
one of you said something or at least uh

2184
01:35:21,659 --> 01:35:22,920
actually that's not true so we'll just

2185
01:35:22,920 --> 01:35:25,380
says something about quick what's the

2186
01:35:25,380 --> 01:35:27,960
what's the agenda for quick what do you

2187
01:35:27,960 --> 01:35:29,040
think when do you think that's going to

2188
01:35:29,040 --> 01:35:30,739
become a production ready

2189
01:35:30,739 --> 01:35:34,080
tool on your platform or are there plans

2190
01:35:34,080 --> 01:35:36,420
at all for it so I guess I'll open up

2191
01:35:36,420 --> 01:35:38,159
the floor to whoever wants to comment on

2192
01:35:38,159 --> 01:35:40,020
that first

2193
01:35:40,020 --> 01:35:40,980
um

2194
01:35:40,980 --> 01:35:42,780
and I'll keep my eye on the channel here

2195
01:35:42,780 --> 01:35:45,559
to convert audio

2196
01:35:47,340 --> 01:35:49,739
well thank you

2197
01:35:49,739 --> 01:35:51,420
oh sorry

2198
01:35:51,420 --> 01:35:55,260
um So currently I think like others we

2199
01:35:55,260 --> 01:35:57,420
are now developing DNS Alpha quick for

2200
01:35:57,420 --> 01:36:00,659
the client side downside

2201
01:36:00,659 --> 01:36:02,639
um we expect to release at the end of

2202
01:36:02,639 --> 01:36:03,840
this year

2203
01:36:03,840 --> 01:36:06,560
maybe still some experimental code

2204
01:36:06,560 --> 01:36:10,739
but for sure uh moving to next year uh

2205
01:36:10,739 --> 01:36:13,800
have it in production

2206
01:36:13,800 --> 01:36:16,020
um we didn't start working on DNS have a

2207
01:36:16,020 --> 01:36:18,420
quick Upstream because well with current

2208
01:36:18,420 --> 01:36:21,719
discussions or progress in in deprive we

2209
01:36:21,719 --> 01:36:24,540
have seen four drafts on

2210
01:36:24,540 --> 01:36:27,659
authority of DNS of TLS and the

2211
01:36:27,659 --> 01:36:30,300
signaling and the probing there was not

2212
01:36:30,300 --> 01:36:31,860
much consensus in the Deep private

2213
01:36:31,860 --> 01:36:34,860
working group now we have an uh a draft

2214
01:36:34,860 --> 01:36:36,060
that

2215
01:36:36,060 --> 01:36:38,639
can make definite well I just made it we

2216
01:36:38,639 --> 01:36:40,560
have good hopes it will reach the Finish

2217
01:36:40,560 --> 01:36:43,320
Line I think that will be the first step

2218
01:36:43,320 --> 01:36:47,760
to also Implement and deploy Dot

2219
01:36:47,760 --> 01:36:50,699
to the authoritative and doq is the same

2220
01:36:50,699 --> 01:36:54,260
the probing so that will be scheduled

2221
01:36:54,260 --> 01:36:56,880
next year early next year and both for

2222
01:36:56,880 --> 01:37:00,600
inbound upstream and for NSD as an

2223
01:37:00,600 --> 01:37:02,420
authoritative names

2224
01:37:02,420 --> 01:37:08,219
yeah so I think 2033 we will see both

2225
01:37:08,219 --> 01:37:12,300
doq uh upstream and client side

2226
01:37:12,300 --> 01:37:16,760
being available in in our products

2227
01:37:20,100 --> 01:37:23,780
today presentation foreign

2228
01:37:23,780 --> 01:37:26,940
topic number one so we have already

2229
01:37:26,940 --> 01:37:29,520
implemented this with XDP it's going to

2230
01:37:29,520 --> 01:37:32,760
be released soon and we are going to

2231
01:37:32,760 --> 01:37:36,000
continue with the like conventional

2232
01:37:36,000 --> 01:37:39,840
there is over quick in DNS I hope that

2233
01:37:39,840 --> 01:37:42,659
later on my colleagues from not resolver

2234
01:37:42,659 --> 01:37:45,900
will take over this code base to also

2235
01:37:45,900 --> 01:37:48,000
implement it in the reservoir but this

2236
01:37:48,000 --> 01:37:49,560
will be postponed

2237
01:37:49,560 --> 01:37:51,900
and also I would like to mention the

2238
01:37:51,900 --> 01:37:54,960
tools that we have the KDK implements

2239
01:37:54,960 --> 01:37:58,739
quick as well so you can debug any

2240
01:37:58,739 --> 01:38:01,560
super quick server with this utility and

2241
01:38:01,560 --> 01:38:04,139
kxdp gun so you can not only debug it

2242
01:38:04,139 --> 01:38:08,040
but also measure its its performance

2243
01:38:08,040 --> 01:38:10,679
so there is much ongoing work

2244
01:38:10,679 --> 01:38:13,380
and it's some of it will be very soon

2245
01:38:13,380 --> 01:38:15,239
and some of it will be released in the

2246
01:38:15,239 --> 01:38:18,320
next year I guess

2247
01:38:18,900 --> 01:38:21,120
so it sounds like we are the slowest to

2248
01:38:21,120 --> 01:38:23,219
the group but doing quick

2249
01:38:23,219 --> 01:38:27,900
um I I like the sound of 2023 I

2250
01:38:27,900 --> 01:38:29,820
mentioned that we're already doing some

2251
01:38:29,820 --> 01:38:34,500
refactoring in the transport area and in

2252
01:38:34,500 --> 01:38:37,020
our last major stable version we really

2253
01:38:37,020 --> 01:38:39,239
we replaced all of the network interface

2254
01:38:39,239 --> 01:38:41,940
so we have had quite a lot of change

2255
01:38:41,940 --> 01:38:44,940
there and we will be obviously looking

2256
01:38:44,940 --> 01:38:46,920
at quick when we think that the

2257
01:38:46,920 --> 01:38:49,739
libraries are mature and are ready

2258
01:38:49,739 --> 01:38:51,480
um

2259
01:38:51,480 --> 01:38:53,699
I

2260
01:38:53,699 --> 01:38:55,679
uh I personally question whether just

2261
01:38:55,679 --> 01:38:57,000
you know

2262
01:38:57,000 --> 01:38:59,880
slapping in a new transport is going to

2263
01:38:59,880 --> 01:39:03,300
provide enough support for a a good

2264
01:39:03,300 --> 01:39:05,940
stable new service and and maybe it's my

2265
01:39:05,940 --> 01:39:07,860
limitation but um

2266
01:39:07,860 --> 01:39:10,860
uh you know previously we had just UDP

2267
01:39:10,860 --> 01:39:13,380
and TCP and

2268
01:39:13,380 --> 01:39:15,380
um we have a lot of features that

2269
01:39:15,380 --> 01:39:20,340
provide Implement quotas do throttling

2270
01:39:20,340 --> 01:39:21,500
um

2271
01:39:21,500 --> 01:39:25,620
abuse mitigation features you know fall

2272
01:39:25,620 --> 01:39:27,780
back to TCP

2273
01:39:27,780 --> 01:39:30,179
um and I'm thinking now when we have so

2274
01:39:30,179 --> 01:39:32,760
many more choices what do we do about

2275
01:39:32,760 --> 01:39:35,520
some of those features you know do we

2276
01:39:35,520 --> 01:39:38,239
fall back to quick instead of

2277
01:39:38,239 --> 01:39:42,659
DNS over TCP I don't know our statistics

2278
01:39:42,659 --> 01:39:45,300
certainly haven't caught up yet with the

2279
01:39:45,300 --> 01:39:47,760
multitude of transports and some of

2280
01:39:47,760 --> 01:39:49,199
these things we're not even sure how to

2281
01:39:49,199 --> 01:39:52,500
count them you know is it is a doe is it

2282
01:39:52,500 --> 01:39:59,040
a TCP is a doe is it house so

2283
01:39:59,219 --> 01:40:01,560
I'm happy not to be the very first out

2284
01:40:01,560 --> 01:40:03,300
of the block with the quick support and

2285
01:40:03,300 --> 01:40:05,580
I will say even though I know in this

2286
01:40:05,580 --> 01:40:08,280
audience everybody's very excited about

2287
01:40:08,280 --> 01:40:11,280
the new transports among our users we've

2288
01:40:11,280 --> 01:40:13,380
seen very little interest in deploying

2289
01:40:13,380 --> 01:40:18,300
Dot and do and very little requests for

2290
01:40:18,300 --> 01:40:21,300
quick as well yeah

2291
01:40:21,300 --> 01:40:23,639
yeah please go ahead

2292
01:40:23,639 --> 01:40:26,100
this Center I would like to have a

2293
01:40:26,100 --> 01:40:27,739
question for my

2294
01:40:27,739 --> 01:40:30,719
co-panelists if they are interested in

2295
01:40:30,719 --> 01:40:34,020
zone transfers over quick I haven't

2296
01:40:34,020 --> 01:40:36,300
started implementing them yet but I

2297
01:40:36,300 --> 01:40:39,000
think this is really a reasonable

2298
01:40:39,000 --> 01:40:42,120
that the alternative server can offer if

2299
01:40:42,120 --> 01:40:43,860
they interoperate with the entire space

2300
01:40:43,860 --> 01:40:45,719
over quick

2301
01:40:45,719 --> 01:40:48,179
thanks we'll have a look at it maybe

2302
01:40:48,179 --> 01:40:50,880
good idea if hackathon project for next

2303
01:40:50,880 --> 01:40:55,020
year so but so and I was

2304
01:40:55,020 --> 01:40:56,760
quite interested in your presentation

2305
01:40:56,760 --> 01:40:59,040
yesterday also the presentation by Edgar

2306
01:40:59,040 --> 01:41:02,460
that the cryptography in Greek is not

2307
01:41:02,460 --> 01:41:05,760
for free for sure and that's that's

2308
01:41:05,760 --> 01:41:08,100
for for nominal

2309
01:41:08,100 --> 01:41:11,460
uh uses it's fine but you said probably

2310
01:41:11,460 --> 01:41:14,280
if it goes to the detail side

2311
01:41:14,280 --> 01:41:17,400
you definitely pay for the crimson and

2312
01:41:17,400 --> 01:41:19,500
that's something we should well my

2313
01:41:19,500 --> 01:41:21,420
question to Libra was is that something

2314
01:41:21,420 --> 01:41:23,100
with the immaturity of the libraries or

2315
01:41:23,100 --> 01:41:25,620
is it inherent to the protocol that is

2316
01:41:25,620 --> 01:41:26,880
something we have to look at it

2317
01:41:26,880 --> 01:41:28,920
carefully and

2318
01:41:28,920 --> 01:41:30,120
uh

2319
01:41:30,120 --> 01:41:32,100
all the people here at the table and

2320
01:41:32,100 --> 01:41:36,119
Beethoven deck remote we are well we

2321
01:41:36,119 --> 01:41:38,219
have a good collaboration and that I

2322
01:41:38,219 --> 01:41:40,440
want probably most of you know that

2323
01:41:40,440 --> 01:41:42,420
already we do

2324
01:41:42,420 --> 01:41:45,480
coordinate things uh well got it with

2325
01:41:45,480 --> 01:41:49,080
coding interrupt testing the exchange

2326
01:41:49,080 --> 01:41:51,719
experiences but we definitely keep out

2327
01:41:51,719 --> 01:41:54,659
of either each other's code so we have

2328
01:41:54,659 --> 01:41:56,219
code diversity we don't make the same

2329
01:41:56,219 --> 01:41:58,139
mistakes here everybody makes their own

2330
01:41:58,139 --> 01:42:01,380
mistakes that's good yeah I I also was

2331
01:42:01,380 --> 01:42:04,639
very interested in your talk yesterday

2332
01:42:09,239 --> 01:42:13,619
a doe and Dot the primary concern is uh

2333
01:42:13,619 --> 01:42:16,080
are we going to blow up their current

2334
01:42:16,080 --> 01:42:20,280
installations uh with connections that

2335
01:42:20,280 --> 01:42:21,179
are

2336
01:42:21,179 --> 01:42:23,280
much more CPU intensive or memory

2337
01:42:23,280 --> 01:42:24,380
intensity

2338
01:42:24,380 --> 01:42:27,239
people have an investment in a deployed

2339
01:42:27,239 --> 01:42:28,739
infrastructure and they want to run

2340
01:42:28,739 --> 01:42:30,360
these new protocols on that same

2341
01:42:30,360 --> 01:42:32,699
infrastructure

2342
01:42:32,699 --> 01:42:35,340
I'd like to have us cut over to uh later

2343
01:42:35,340 --> 01:42:36,780
if we can

2344
01:42:36,780 --> 01:42:38,460
hello there

2345
01:42:38,460 --> 01:42:40,560
um I briefly mentioned quick during my

2346
01:42:40,560 --> 01:42:41,760
talk

2347
01:42:41,760 --> 01:42:44,580
we hope to get outgoing quick in the

2348
01:42:44,580 --> 01:42:47,520
United States this year we hope to edit

2349
01:42:47,520 --> 01:42:49,739
in every other place it makes sense

2350
01:42:49,739 --> 01:42:51,119
after that

2351
01:42:51,119 --> 01:42:54,300
right now DNS test uses the H2O library

2352
01:42:54,300 --> 01:42:59,400
to serve Doh while we use NG HTTP 2 to

2353
01:42:59,400 --> 01:43:02,100
do Upstream Doh I believe all the other

2354
01:43:02,100 --> 01:43:05,280
vendors are all are also using NG http

2355
01:43:05,280 --> 01:43:07,380
2.

2356
01:43:07,380 --> 01:43:11,040
um so it would be good if we found

2357
01:43:11,040 --> 01:43:13,800
one or two other competent libraries for

2358
01:43:13,800 --> 01:43:15,900
that but I'm not optimistic

2359
01:43:15,900 --> 01:43:19,199
so it looks like we might get some

2360
01:43:19,199 --> 01:43:20,940
um

2361
01:43:20,940 --> 01:43:23,219
we might get some common attack surface

2362
01:43:23,219 --> 01:43:26,340
there which would be a Pity but I'm not

2363
01:43:26,340 --> 01:43:27,780
sure it's avoidable

2364
01:43:27,780 --> 01:43:31,619
also I feel the client side

2365
01:43:31,619 --> 01:43:34,260
uh the client-side's quick is not really

2366
01:43:34,260 --> 01:43:36,600
coming along yet it's not in Android

2367
01:43:36,600 --> 01:43:39,480
it's not in browsers it's not in systemd

2368
01:43:39,480 --> 01:43:40,920
resolve the

2369
01:43:40,920 --> 01:43:43,860
uh so I am not sure how useful quick

2370
01:43:43,860 --> 01:43:46,980
will be until that happens

2371
01:43:46,980 --> 01:43:49,560
that's all for me for now

2372
01:43:49,560 --> 01:43:52,500
okay great uh cutting back to here

2373
01:43:52,500 --> 01:43:54,300
um so I guess my next question for the

2374
01:43:54,300 --> 01:43:56,400
group assembled is that it's been quite

2375
01:43:56,400 --> 01:43:59,940
a while since we've had a Flag Day

2376
01:43:59,940 --> 01:44:02,159
um so I'm interested in what any of you

2377
01:44:02,159 --> 01:44:04,500
think about uh what are the things that

2378
01:44:04,500 --> 01:44:06,840
might be considered as a flag day are

2379
01:44:06,840 --> 01:44:08,580
there anything is there anything that we

2380
01:44:08,580 --> 01:44:10,199
need to look at I mean we shouldn't have

2381
01:44:10,199 --> 01:44:11,760
a flag day just to have it right but

2382
01:44:11,760 --> 01:44:13,199
there are some things that were useful

2383
01:44:13,199 --> 01:44:14,940
in the past are there any things that

2384
01:44:14,940 --> 01:44:16,500
you think are useful in the future to

2385
01:44:16,500 --> 01:44:18,540
consider as a Flag Day conversion for

2386
01:44:18,540 --> 01:44:20,580
the vendor and operator Community to

2387
01:44:20,580 --> 01:44:22,500
consider

2388
01:44:22,500 --> 01:44:25,340
foreign

2389
01:44:25,880 --> 01:44:29,360
who wants to kick off here yeah

2390
01:44:29,360 --> 01:44:32,340
so I'll just say uh

2391
01:44:32,340 --> 01:44:33,480
perspective

2392
01:44:33,480 --> 01:44:35,159
uh

2393
01:44:35,159 --> 01:44:37,619
Flag Day is not a magic wand they're

2394
01:44:37,619 --> 01:44:39,840
limited things that there's things that

2395
01:44:39,840 --> 01:44:41,639
we would all like to change out in the

2396
01:44:41,639 --> 01:44:44,219
DNS but we can only control how strict

2397
01:44:44,219 --> 01:44:48,000
we are in what we tolerate and we have

2398
01:44:48,000 --> 01:44:50,340
actually made find quite a bit stricter

2399
01:44:50,340 --> 01:44:52,800
in the past couple of years we've

2400
01:44:52,800 --> 01:44:55,920
tightened up our q a minimization we've

2401
01:44:55,920 --> 01:44:59,880
tightened up a number of things but um

2402
01:44:59,880 --> 01:45:02,100
I think

2403
01:45:02,100 --> 01:45:04,320
we would like to see more people

2404
01:45:04,320 --> 01:45:07,639
deploy cookies

2405
01:45:07,800 --> 01:45:10,920
but I don't really see a a Flag Day

2406
01:45:10,920 --> 01:45:12,480
operation that's kind of forced people

2407
01:45:12,480 --> 01:45:16,320
to do something like that and um I think

2408
01:45:16,320 --> 01:45:18,060
I also I think it's a more effective

2409
01:45:18,060 --> 01:45:22,739
tool if it's not just every October you

2410
01:45:22,739 --> 01:45:24,239
know the open source DNS providers

2411
01:45:24,239 --> 01:45:26,280
decide to break everything you know we

2412
01:45:26,280 --> 01:45:28,920
have to have a pretty good candidate

2413
01:45:28,920 --> 01:45:31,080
and anyway I personally don't have one

2414
01:45:31,080 --> 01:45:32,580
in mind I did ask the question

2415
01:45:32,580 --> 01:45:35,219
internally and um

2416
01:45:35,219 --> 01:45:37,380
uh

2417
01:45:37,380 --> 01:45:39,780
Mark and some others commented they'd

2418
01:45:39,780 --> 01:45:42,119
like to see people implement in 34 and

2419
01:45:42,119 --> 01:45:44,639
1035 but I'm not sure that we could have

2420
01:45:44,639 --> 01:45:47,639
a Flag Day that would accomplish that

2421
01:45:47,639 --> 01:45:51,679
all right anniversary maybe yeah

2422
01:45:55,260 --> 01:45:56,340
hello

2423
01:45:56,340 --> 01:45:57,060
um

2424
01:45:57,060 --> 01:45:59,280
yesterday there was some talk about the

2425
01:45:59,280 --> 01:46:02,400
new recommendations for nc3 parameters

2426
01:46:02,400 --> 01:46:04,619
and some people suggested that that

2427
01:46:04,619 --> 01:46:08,280
might be worthy of a flag day but it is

2428
01:46:08,280 --> 01:46:09,600
something that we can do quite

2429
01:46:09,600 --> 01:46:12,960
incrementally can monitor quite well the

2430
01:46:12,960 --> 01:46:15,179
big problems right now are mostly TLD

2431
01:46:15,179 --> 01:46:18,060
zones uh Victor is keeping good tabs on

2432
01:46:18,060 --> 01:46:19,560
that

2433
01:46:19,560 --> 01:46:22,139
uh so I'm not sure that warrants a flag

2434
01:46:22,139 --> 01:46:24,780
day and I agree with Vicky you can't go

2435
01:46:24,780 --> 01:46:26,719
around breaking things every year

2436
01:46:26,719 --> 01:46:29,460
besides that I have seen and I help

2437
01:46:29,460 --> 01:46:31,199
others see that as well that since the

2438
01:46:31,199 --> 01:46:33,000
last two flag dates

2439
01:46:33,000 --> 01:46:34,920
we haven't had many

2440
01:46:34,920 --> 01:46:37,860
large-scale problems with authoritives

2441
01:46:37,860 --> 01:46:40,500
not behaving well there's still small

2442
01:46:40,500 --> 01:46:44,000
skill things but it just gets fixed and

2443
01:46:44,000 --> 01:46:47,520
like buying spartiness has also gotten

2444
01:46:47,520 --> 01:46:50,400
stricter with things over time and we

2445
01:46:50,400 --> 01:46:53,400
appear to just be getting away with that

2446
01:46:53,400 --> 01:46:56,100
yeah so no I do not have a concrete idea

2447
01:46:56,100 --> 01:46:58,800
for a next Flag Day

2448
01:46:58,800 --> 01:47:02,340
let me just check the workshops Channel

2449
01:47:02,340 --> 01:47:05,540
okay nothing for me

2450
01:47:08,219 --> 01:47:11,699
no yeah I I remember indeed that I think

2451
01:47:11,699 --> 01:47:14,100
west of Victor reacted on the

2452
01:47:14,100 --> 01:47:15,780
suggestions

2453
01:47:15,780 --> 01:47:17,580
they're working towards the zero

2454
01:47:17,580 --> 01:47:20,580
iterations but we're not there yet so

2455
01:47:20,580 --> 01:47:22,560
maybe you can come up to the microphone

2456
01:47:22,560 --> 01:47:24,659
and thought well maybe it's not a good

2457
01:47:24,659 --> 01:47:26,340
candidate for a flag day because we're

2458
01:47:26,340 --> 01:47:28,980
still in progress to get to this hero

2459
01:47:28,980 --> 01:47:30,900
and if we

2460
01:47:30,900 --> 01:47:33,780
well maybe too early to

2461
01:47:33,780 --> 01:47:38,300
kick office and do this Flag Day on this

2462
01:47:39,480 --> 01:47:42,420
thank you so

2463
01:47:42,420 --> 01:47:43,080
um

2464
01:47:43,080 --> 01:47:45,119
I mean it is a good question that the

2465
01:47:45,119 --> 01:47:46,739
the thing I think that the presentation

2466
01:47:46,739 --> 01:47:48,119
yesterday was saying that if everybody

2467
01:47:48,119 --> 01:47:50,460
switched to zero immediately it would be

2468
01:47:50,460 --> 01:47:51,719
chaos

2469
01:47:51,719 --> 01:47:54,480
uh that should not be done and and the

2470
01:47:54,480 --> 01:47:56,760
draft very carefully says that should

2471
01:47:56,760 --> 01:47:58,500
not be done

2472
01:47:58,500 --> 01:48:00,900
a Flag Day might be helpful if everybody

2473
01:48:00,900 --> 01:48:03,619
you know at the table and virtual agreed

2474
01:48:03,619 --> 01:48:06,600
this is the starting value right this

2475
01:48:06,600 --> 01:48:08,639
and if you look at Victor's very careful

2476
01:48:08,639 --> 01:48:11,159
analysis of where things might start

2477
01:48:11,159 --> 01:48:13,619
breaking there's some very safe values

2478
01:48:13,619 --> 01:48:15,780
if you remember in the discussion

2479
01:48:15,780 --> 01:48:17,820
Indiana shop in the draft we started

2480
01:48:17,820 --> 01:48:20,340
with let's set it at a hundred and then

2481
01:48:20,340 --> 01:48:22,199
we agreed No it should really go to zero

2482
01:48:22,199 --> 01:48:24,000
over time and maybe there should be

2483
01:48:24,000 --> 01:48:26,699
multiple flag days right that's probably

2484
01:48:26,699 --> 01:48:28,500
the right path forward we should start

2485
01:48:28,500 --> 01:48:31,340
with a hundred or some agreed upon value

2486
01:48:31,340 --> 01:48:35,100
it will affect you know only a few zones

2487
01:48:35,100 --> 01:48:37,500
and then you know a couple years go to

2488
01:48:37,500 --> 01:48:39,360
50 in a couple years 10 or something

2489
01:48:39,360 --> 01:48:41,219
like that and but you know it would take

2490
01:48:41,219 --> 01:48:42,719
all of you to agree on what that value

2491
01:48:42,719 --> 01:48:45,060
should be but I don't disagree with

2492
01:48:45,060 --> 01:48:46,320
there so you should be a flag day but

2493
01:48:46,320 --> 01:48:47,820
there should probably be like five I

2494
01:48:47,820 --> 01:48:49,520
don't know

2495
01:48:49,520 --> 01:48:54,780
thank you and in oh sorry and and indeed

2496
01:48:54,780 --> 01:48:56,760
in the past year I think most of the

2497
01:48:56,760 --> 01:49:00,420
open source developers already decreased

2498
01:49:00,420 --> 01:49:03,060
the maximum or well the maximum

2499
01:49:03,060 --> 01:49:04,320
iterations

2500
01:49:04,320 --> 01:49:06,420
to something like hundreds

2501
01:49:06,420 --> 01:49:09,300
uh it might not be officially announced

2502
01:49:09,300 --> 01:49:10,739
but it was in the release notes of

2503
01:49:10,739 --> 01:49:12,719
different resolvers

2504
01:49:12,719 --> 01:49:15,360
so maybe implicitly there have been

2505
01:49:15,360 --> 01:49:17,900
already some

2506
01:49:18,960 --> 01:49:21,900
without you Nancy that is that might be

2507
01:49:21,900 --> 01:49:24,080
good

2508
01:49:24,960 --> 01:49:29,159
I just have a question oh wow Echo uh

2509
01:49:29,159 --> 01:49:31,980
how often do people want to see sort of

2510
01:49:31,980 --> 01:49:35,100
large surveys redone they take some

2511
01:49:35,100 --> 01:49:36,900
efforts I don't want to be doing it once

2512
01:49:36,900 --> 01:49:40,679
a week uh but you know twice a year is

2513
01:49:40,679 --> 01:49:43,380
viable more often would take some effort

2514
01:49:43,380 --> 01:49:47,340
uh but you know if if people don't act

2515
01:49:47,340 --> 01:49:50,159
on these you know in short time scales

2516
01:49:50,159 --> 01:49:52,139
it probably once years enough

2517
01:49:52,139 --> 01:49:54,840
but if people want to see 19 million

2518
01:49:54,840 --> 01:49:58,699
domains rescamped tomorrow let me know

2519
01:50:02,040 --> 01:50:05,820
I I think that's our time yes fantastic

2520
01:50:05,820 --> 01:50:07,020
thank you very much to all the

2521
01:50:07,020 --> 01:50:08,340
participants of the panel remote and

2522
01:50:08,340 --> 01:50:09,600
local

2523
01:50:09,600 --> 01:50:11,460
um and then a few more housekeeping

2524
01:50:11,460 --> 01:50:12,719
announcements here

2525
01:50:12,719 --> 01:50:14,760
um again we have

2526
01:50:14,760 --> 01:50:17,520
um uh lunch upcoming uh and then

2527
01:50:17,520 --> 01:50:19,320
actually there's a table again I'll

2528
01:50:19,320 --> 01:50:21,719
announce the women at orc table

2529
01:50:21,719 --> 01:50:23,219
um thank you again to our workshop and

2530
01:50:23,219 --> 01:50:24,960
connectivity sponsor which is Comcast

2531
01:50:24,960 --> 01:50:28,260
and our 2022 workshops Patron verisign

2532
01:50:28,260 --> 01:50:31,320
um I from Sportsland and write down the

2533
01:50:31,320 --> 01:50:32,820
start time of our next session but I

2534
01:50:32,820 --> 01:50:33,719
think it's going to be the end of line

2535
01:50:33,719 --> 01:50:35,219
so it'll be fairly obvious thank you

2536
01:50:35,219 --> 01:50:37,080
again to our speakers and panelists and

2537
01:50:37,080 --> 01:50:38,600
we'll see you at lunch

2538
01:50:38,600 --> 01:50:46,199
[Applause]

2539
01:50:48,900 --> 01:50:52,560
okay it looks like we're ready to go

2540
01:50:52,560 --> 01:50:55,440
welcome back everybody

2541
01:50:55,440 --> 01:50:57,420
um I'm Suzanne Wolfe I'm on the program

2542
01:50:57,420 --> 01:50:59,639
committee and I will be

2543
01:50:59,639 --> 01:51:03,900
moderating these last couple of sessions

2544
01:51:03,900 --> 01:51:06,420
first we have is a

2545
01:51:06,420 --> 01:51:08,699
better thanks

2546
01:51:08,699 --> 01:51:11,760
and before we go on thanks very much to

2547
01:51:11,760 --> 01:51:14,159
Comcast as our workshop and con and

2548
01:51:14,159 --> 01:51:17,280
connectivity sponsor and verisign as the

2549
01:51:17,280 --> 01:51:20,880
2022 workshops Patron thanks so much for

2550
01:51:20,880 --> 01:51:22,980
supporting oark

2551
01:51:22,980 --> 01:51:27,060
now we are ready with the first talk

2552
01:51:27,060 --> 01:51:29,699
um Paul Grubbs we'll be talking about

2553
01:51:29,699 --> 01:51:33,500
zero knowledge middle boxes

2554
01:51:33,900 --> 01:51:37,139
all right I believe that everybody can

2555
01:51:37,139 --> 01:51:38,940
hear me and see me now uh so I'm just

2556
01:51:38,940 --> 01:51:40,170
going to go for it

2557
01:51:40,170 --> 01:51:41,400
[Music]

2558
01:51:41,400 --> 01:51:44,400
um uh thank you so much to uh DNS orc

2559
01:51:44,400 --> 01:51:45,780
and the program committee for inviting

2560
01:51:45,780 --> 01:51:47,820
me to share my research uh today with

2561
01:51:47,820 --> 01:51:48,780
you

2562
01:51:48,780 --> 01:51:49,980
um so as Suzanne mentioned I'm going to

2563
01:51:49,980 --> 01:51:51,780
talk about zero knowledge middleboxes uh

2564
01:51:51,780 --> 01:51:52,920
this is some research that I've done

2565
01:51:52,920 --> 01:51:56,000
recently with uh with my co-authors

2566
01:51:56,000 --> 01:51:58,920
Joseph and no Mike wallfish Zac de

2567
01:51:58,920 --> 01:52:01,639
Stefano and Colin Zhang foreign

2568
01:52:01,639 --> 01:52:03,659
so this talk is going to be about

2569
01:52:03,659 --> 01:52:05,580
resolving a kind of fundamental tension

2570
01:52:05,580 --> 01:52:07,440
between privacy and and policy

2571
01:52:07,440 --> 01:52:09,179
enforcement and networks

2572
01:52:09,179 --> 01:52:10,980
um so we all know that encryption is now

2573
01:52:10,980 --> 01:52:12,719
becoming really really ubiquitous for

2574
01:52:12,719 --> 01:52:14,699
Network traffic so protocols like TLS

2575
01:52:14,699 --> 01:52:17,219
1.3 where the client and the server

2576
01:52:17,219 --> 01:52:18,659
first perform some kind of a handshake

2577
01:52:18,659 --> 01:52:20,580
to share a cryptographic key and then

2578
01:52:20,580 --> 01:52:22,800
use it to encrypt their traffic are

2579
01:52:22,800 --> 01:52:24,360
becoming really ubiquitous on the

2580
01:52:24,360 --> 01:52:25,739
internet so these protocols hide the

2581
01:52:25,739 --> 01:52:27,239
contents of traffic but increasingly

2582
01:52:27,239 --> 01:52:29,159
they're also being used to hide the

2583
01:52:29,159 --> 01:52:30,840
metadata of traffic and one important

2584
01:52:30,840 --> 01:52:32,820
kind of metadata for this talk is DNS

2585
01:52:32,820 --> 01:52:35,239
queries

2586
01:52:35,280 --> 01:52:37,980
um so encryption makes the basic task of

2587
01:52:37,980 --> 01:52:40,440
of enforcing Network policies uh really

2588
01:52:40,440 --> 01:52:41,760
really difficult

2589
01:52:41,760 --> 01:52:43,679
um today networks use middle boxes which

2590
01:52:43,679 --> 01:52:45,480
we can just sort of Imagine as any kind

2591
01:52:45,480 --> 01:52:47,280
of net in-network device that can

2592
01:52:47,280 --> 01:52:49,139
perform general purpose computation on

2593
01:52:49,139 --> 01:52:51,300
on traffic uh they use these middle

2594
01:52:51,300 --> 01:52:54,600
boxes to enforce uh policies by scanning

2595
01:52:54,600 --> 01:52:56,940
traffic directly so when a client sends

2596
01:52:56,940 --> 01:52:58,260
some some traffic to the network the

2597
01:52:58,260 --> 01:52:59,580
middle box sort of scans it and then

2598
01:52:59,580 --> 01:53:00,719
checks whether it's compliant with the

2599
01:53:00,719 --> 01:53:02,340
policy and if it is then it forwards the

2600
01:53:02,340 --> 01:53:03,600
traffic and if it's not then it sort of

2601
01:53:03,600 --> 01:53:05,100
blocks trapping maybe takes an

2602
01:53:05,100 --> 01:53:06,719
additional action

2603
01:53:06,719 --> 01:53:08,400
um so this basic middle box enforcement

2604
01:53:08,400 --> 01:53:10,080
pattern is used to enforce like dozens

2605
01:53:10,080 --> 01:53:11,400
and dozens of different kinds of network

2606
01:53:11,400 --> 01:53:13,380
security policies today so like data

2607
01:53:13,380 --> 01:53:15,420
loss prevention DNS filtering

2608
01:53:15,420 --> 01:53:16,860
um and a lot more

2609
01:53:16,860 --> 01:53:18,900
so the the motivating question of this

2610
01:53:18,900 --> 01:53:22,199
work is like can we resolve this what

2611
01:53:22,199 --> 01:53:23,639
seems to be a really really fundamental

2612
01:53:23,639 --> 01:53:26,159
tension between the Privacy offered by

2613
01:53:26,159 --> 01:53:28,560
encryption for Network traffic uh and a

2614
01:53:28,560 --> 01:53:30,780
Network's ability to enforce uh policies

2615
01:53:30,780 --> 01:53:32,460
in their Network so this is a really

2616
01:53:32,460 --> 01:53:34,679
really uh complex and polarizing

2617
01:53:34,679 --> 01:53:35,760
question

2618
01:53:35,760 --> 01:53:37,380
um many Network administrators would

2619
01:53:37,380 --> 01:53:38,639
probably argue that encryption should

2620
01:53:38,639 --> 01:53:40,260
just be disallowed in networks where

2621
01:53:40,260 --> 01:53:42,540
policy enforcement is needed um whereas

2622
01:53:42,540 --> 01:53:44,040
people maybe more like me like

2623
01:53:44,040 --> 01:53:45,360
cryptographers and privacy Advocates

2624
01:53:45,360 --> 01:53:47,580
would probably say that networks should

2625
01:53:47,580 --> 01:53:48,900
only enforce policies that don't require

2626
01:53:48,900 --> 01:53:51,540
actually decrypting traffic

2627
01:53:51,540 --> 01:53:53,639
so if we want to resolve this tension

2628
01:53:53,639 --> 01:53:55,800
and sort of make both parties happy

2629
01:53:55,800 --> 01:53:57,060
um any solution that we come up with

2630
01:53:57,060 --> 01:53:59,400
should have a few basic requirements uh

2631
01:53:59,400 --> 01:54:00,780
the first is that we shouldn't really

2632
01:54:00,780 --> 01:54:02,400
need to weaken encryption it should be

2633
01:54:02,400 --> 01:54:04,619
possible to have just as much privacy as

2634
01:54:04,619 --> 01:54:06,960
we did before except for sort of letting

2635
01:54:06,960 --> 01:54:09,179
the network know whether traffic is or

2636
01:54:09,179 --> 01:54:10,619
isn't compliant

2637
01:54:10,619 --> 01:54:12,300
so the second requirement is that the

2638
01:54:12,300 --> 01:54:14,159
network should still be able to enforce

2639
01:54:14,159 --> 01:54:15,360
the policies that they were able to

2640
01:54:15,360 --> 01:54:16,920
before and in particular they should be

2641
01:54:16,920 --> 01:54:19,139
able to identify and block non-compliant

2642
01:54:19,139 --> 01:54:20,820
traffic

2643
01:54:20,820 --> 01:54:23,040
the third requirement is that we

2644
01:54:23,040 --> 01:54:25,320
shouldn't really require any any server

2645
01:54:25,320 --> 01:54:27,600
changes to make this protocol Deployable

2646
01:54:27,600 --> 01:54:29,040
ideally it should be the case that the

2647
01:54:29,040 --> 01:54:30,300
server doesn't even need to know that

2648
01:54:30,300 --> 01:54:32,100
the protocol is happening so we

2649
01:54:32,100 --> 01:54:33,600
prioritize this because there's a lot of

2650
01:54:33,600 --> 01:54:35,699
good evidence that changing clients is a

2651
01:54:35,699 --> 01:54:37,320
lot easier and faster today than

2652
01:54:37,320 --> 01:54:39,719
changing servers so for example in

2653
01:54:39,719 --> 01:54:42,900
January of this year only 51 of TLS

2654
01:54:42,900 --> 01:54:44,880
server supported TLS 1.3 which is a

2655
01:54:44,880 --> 01:54:46,619
four-year-old protocol

2656
01:54:46,619 --> 01:54:49,199
um in contrast about 50 of chrome users

2657
01:54:49,199 --> 01:54:51,900
already supported Chrome 97 which was

2658
01:54:51,900 --> 01:54:53,580
only one month old at the time so it

2659
01:54:53,580 --> 01:54:56,520
seems like clients are are faster uh um

2660
01:54:56,520 --> 01:54:59,100
to to update so to make this Deployable

2661
01:54:59,100 --> 01:55:00,659
we should prioritize client client

2662
01:55:00,659 --> 01:55:02,340
change but maybe keep servers the way

2663
01:55:02,340 --> 01:55:04,380
they are a corollary of this is we also

2664
01:55:04,380 --> 01:55:06,000
don't want to introduce any additional

2665
01:55:06,000 --> 01:55:07,920
trust assumptions into our architecture

2666
01:55:07,920 --> 01:55:09,659
here so we don't want to have to sort of

2667
01:55:09,659 --> 01:55:11,460
trust additional PLS certificates or

2668
01:55:11,460 --> 01:55:13,139
introduce trusted Hardware that the

2669
01:55:13,139 --> 01:55:15,960
clients have to run or things like that

2670
01:55:15,960 --> 01:55:17,940
so there's been some academic work on

2671
01:55:17,940 --> 01:55:19,199
sort of resolving these tensions but

2672
01:55:19,199 --> 01:55:21,840
they've all failed to to meet at least

2673
01:55:21,840 --> 01:55:23,159
one of these requirements so some of

2674
01:55:23,159 --> 01:55:24,900
them use trusted Hardware like their sgx

2675
01:55:24,900 --> 01:55:27,119
base and the others involve changing

2676
01:55:27,119 --> 01:55:28,679
protocols and also weakening them to

2677
01:55:28,679 --> 01:55:30,239
sort of allow the networks to do the

2678
01:55:30,239 --> 01:55:32,580
scanning um directly on the encrypted

2679
01:55:32,580 --> 01:55:34,880
traffic

2680
01:55:34,920 --> 01:55:36,179
um so I just want to mention one

2681
01:55:36,179 --> 01:55:38,280
non-requirement that we that we kind of

2682
01:55:38,280 --> 01:55:40,020
articulated in this work so what we

2683
01:55:40,020 --> 01:55:43,139
don't want to do is create a tool that

2684
01:55:43,139 --> 01:55:45,900
can be misused for censorship so what we

2685
01:55:45,900 --> 01:55:47,159
want to do is sort of maintain the

2686
01:55:47,159 --> 01:55:49,199
status quo that exists today

2687
01:55:49,199 --> 01:55:51,300
um for for unencrypted traffic which is

2688
01:55:51,300 --> 01:55:54,119
that tech savvy users can use a tour or

2689
01:55:54,119 --> 01:55:56,159
VPN to sort of circumvent the blocking

2690
01:55:56,159 --> 01:55:58,800
but most people won't do this because we

2691
01:55:58,800 --> 01:55:59,820
don't want to build something that can

2692
01:55:59,820 --> 01:56:02,400
sort of be misused for for censorship

2693
01:56:02,400 --> 01:56:04,260
um

2694
01:56:04,260 --> 01:56:06,719
um so in short what we want is some way

2695
01:56:06,719 --> 01:56:08,460
for the client to reveal nothing about

2696
01:56:08,460 --> 01:56:10,380
their plain text traffic to the to the

2697
01:56:10,380 --> 01:56:12,480
middle box except for convincing the

2698
01:56:12,480 --> 01:56:14,400
middle box that the traffic is policy

2699
01:56:14,400 --> 01:56:15,540
compliant

2700
01:56:15,540 --> 01:56:17,159
um and so it turns out that there's a

2701
01:56:17,159 --> 01:56:18,600
cryptographic primitive that's very well

2702
01:56:18,600 --> 01:56:20,940
suited to solve this problem for us it's

2703
01:56:20,940 --> 01:56:22,679
called zero knowledge proofs so it's

2704
01:56:22,679 --> 01:56:24,000
going to kind of come to our rescue like

2705
01:56:24,000 --> 01:56:25,020
Superman

2706
01:56:25,020 --> 01:56:26,340
um so as your knowledge you're not

2707
01:56:26,340 --> 01:56:28,560
familiar is a cryptographic primitive uh

2708
01:56:28,560 --> 01:56:30,000
that that takes place between approver

2709
01:56:30,000 --> 01:56:32,340
and a verifier it allows the approver to

2710
01:56:32,340 --> 01:56:34,380
convince the verifier of the truth of

2711
01:56:34,380 --> 01:56:37,260
some public statement uh in a way that

2712
01:56:37,260 --> 01:56:39,000
has two kind of security guarantees that

2713
01:56:39,000 --> 01:56:40,739
are important for us uh the first is

2714
01:56:40,739 --> 01:56:42,179
that the approver doesn't have to tell

2715
01:56:42,179 --> 01:56:43,920
the verifier why the statement is true

2716
01:56:43,920 --> 01:56:45,840
it only needs to convince the verifier

2717
01:56:45,840 --> 01:56:47,639
that it is true so this is a sort of the

2718
01:56:47,639 --> 01:56:49,619
zero knowledge guarantee and the second

2719
01:56:49,619 --> 01:56:52,139
requirement of a guarantee rather of a

2720
01:56:52,139 --> 01:56:53,460
zero knowledge proof is that the

2721
01:56:53,460 --> 01:56:55,139
approver can only convince the verifier

2722
01:56:55,139 --> 01:56:56,760
if the statement is actually true so

2723
01:56:56,760 --> 01:56:58,980
this guarantee is called sounds

2724
01:56:58,980 --> 01:57:01,199
uh concretely you can think of a zero

2725
01:57:01,199 --> 01:57:02,760
knowledge proof as just being a single

2726
01:57:02,760 --> 01:57:04,260
message protocol where approver

2727
01:57:04,260 --> 01:57:06,540
generates and sends a zero knowledge

2728
01:57:06,540 --> 01:57:07,980
proof which is like a just a binary

2729
01:57:07,980 --> 01:57:10,440
string to a verifier uh and the verifier

2730
01:57:10,440 --> 01:57:12,119
checks the zero nodes using some kind of

2731
01:57:12,119 --> 01:57:13,920
special checking procedure um that

2732
01:57:13,920 --> 01:57:15,360
outputs true or false and if it outputs

2733
01:57:15,360 --> 01:57:17,099
true then we said that is convinced of

2734
01:57:17,099 --> 01:57:19,020
the statement and output is false in the

2735
01:57:19,020 --> 01:57:21,960
verifiers not convinced

2736
01:57:21,960 --> 01:57:23,820
um so with this cryptographic primitive

2737
01:57:23,820 --> 01:57:25,020
is you're not proof we're going to

2738
01:57:25,020 --> 01:57:27,659
introduce a sort of General architecture

2739
01:57:27,659 --> 01:57:29,099
for solving these kinds of privacy

2740
01:57:29,099 --> 01:57:31,320
versus policy problems and we call it

2741
01:57:31,320 --> 01:57:32,460
architecture is zero knowledge

2742
01:57:32,460 --> 01:57:34,679
middleblocks in a zero Automotive box or

2743
01:57:34,679 --> 01:57:36,239
ZK and B which I'll use as an

2744
01:57:36,239 --> 01:57:38,340
abbreviation the clients are given when

2745
01:57:38,340 --> 01:57:39,960
they join the network a description of

2746
01:57:39,960 --> 01:57:41,880
the policy that the network wants to

2747
01:57:41,880 --> 01:57:44,400
enforce on their on their traffic

2748
01:57:44,400 --> 01:57:47,099
the clients then establish keys and

2749
01:57:47,099 --> 01:57:49,020
communicate using standard encryption

2750
01:57:49,020 --> 01:57:51,360
protocols like keyless 1.3 but in

2751
01:57:51,360 --> 01:57:52,739
addition to using these protocols to

2752
01:57:52,739 --> 01:57:54,360
send their data they also use a zero

2753
01:57:54,360 --> 01:57:56,940
knowledge proof protocol to convince the

2754
01:57:56,940 --> 01:57:59,520
middle box of the truth of the statement

2755
01:57:59,520 --> 01:58:02,300
my ciphertext contains compliant traffic

2756
01:58:02,300 --> 01:58:04,619
so they use this year knowledge proof to

2757
01:58:04,619 --> 01:58:06,000
act as the proverb to sort of convince

2758
01:58:06,000 --> 01:58:08,760
the middle box as a verifier that even

2759
01:58:08,760 --> 01:58:10,679
though the verifier can't see this this

2760
01:58:10,679 --> 01:58:12,239
underlying plain text traffic it

2761
01:58:12,239 --> 01:58:13,860
nonetheless is compliant with the policy

2762
01:58:13,860 --> 01:58:15,780
that it that is specified

2763
01:58:15,780 --> 01:58:17,760
and finally the middle box can verify

2764
01:58:17,760 --> 01:58:19,320
these groups and if the proofs don't

2765
01:58:19,320 --> 01:58:23,040
verify it can just block the traffic

2766
01:58:23,040 --> 01:58:25,020
block the connection from the client and

2767
01:58:25,020 --> 01:58:26,760
if it does it can just sort of strip out

2768
01:58:26,760 --> 01:58:28,619
the proof and forward the traffic onto

2769
01:58:28,619 --> 01:58:31,020
the onto the destination

2770
01:58:31,020 --> 01:58:33,840
so we'll just very quickly uh check that

2771
01:58:33,840 --> 01:58:35,699
the three requirements are are upheld

2772
01:58:35,699 --> 01:58:38,159
here uh first uh the requirement is that

2773
01:58:38,159 --> 01:58:40,440
we don't weaken encryption so we we

2774
01:58:40,440 --> 01:58:42,239
succeed in this because we just use

2775
01:58:42,239 --> 01:58:43,679
standard encryption and the zero

2776
01:58:43,679 --> 01:58:44,880
knowledge property of the zero knowledge

2777
01:58:44,880 --> 01:58:47,820
proof hides the plaintext traffic of the

2778
01:58:47,820 --> 01:58:50,159
of the client so the middle box can

2779
01:58:50,159 --> 01:58:51,659
still uh and the network can still

2780
01:58:51,659 --> 01:58:53,460
enforce policies this is enforced by the

2781
01:58:53,460 --> 01:58:54,719
soundness guarantee of the zero

2782
01:58:54,719 --> 01:58:56,340
knowledge proof so the so the client

2783
01:58:56,340 --> 01:58:58,080
acting as Proverbs the sound is

2784
01:58:58,080 --> 01:58:59,940
guaranteed prevents the client from

2785
01:58:59,940 --> 01:59:02,219
lying about the policy compliance of its

2786
01:59:02,219 --> 01:59:04,520
traffic so if the verifier sort of

2787
01:59:04,520 --> 01:59:07,380
accepts this proof that the client sends

2788
01:59:07,380 --> 01:59:09,900
then that means that the the traffic

2789
01:59:09,900 --> 01:59:12,300
actually is is

2790
01:59:12,300 --> 01:59:15,119
and finally because the the server

2791
01:59:15,119 --> 01:59:16,320
doesn't really know about this

2792
01:59:16,320 --> 01:59:17,520
interaction like it doesn't even really

2793
01:59:17,520 --> 01:59:19,500
see the proofs uh so this this

2794
01:59:19,500 --> 01:59:21,179
interaction it's your knowledge

2795
01:59:21,179 --> 01:59:22,500
middlebox interaction doesn't require

2796
01:59:22,500 --> 01:59:24,420
any server changes the server doesn't

2797
01:59:24,420 --> 01:59:26,580
even really need to know that that it's

2798
01:59:26,580 --> 01:59:28,800
happening

2799
01:59:28,800 --> 01:59:30,420
um so when we started this research

2800
01:59:30,420 --> 01:59:32,400
project we we sort of sketched this

2801
01:59:32,400 --> 01:59:33,960
architecture we weren't even really sure

2802
01:59:33,960 --> 01:59:36,179
that it was going to uh work so most

2803
01:59:36,179 --> 01:59:37,619
prior efforts to make zero knowledge

2804
01:59:37,619 --> 01:59:39,300
proof sufficient enough for for real

2805
01:59:39,300 --> 01:59:41,040
applications like like in cryptocurrency

2806
01:59:41,040 --> 01:59:42,239
for example

2807
01:59:42,239 --> 01:59:44,460
um really rely on being able to tailor

2808
01:59:44,460 --> 01:59:46,440
the computation that is proven in the

2809
01:59:46,440 --> 01:59:49,080
zero knowledge proof to be sort of uh

2810
01:59:49,080 --> 01:59:51,119
like compatible in some sense with the

2811
01:59:51,119 --> 01:59:53,099
with the proof Machinery but because we

2812
01:59:53,099 --> 01:59:54,480
want to work with standard Protocols of

2813
01:59:54,480 --> 01:59:57,300
TLS 1.3 really don't have this luxury uh

2814
01:59:57,300 --> 01:59:58,860
and these Protocols are really really

2815
01:59:58,860 --> 02:00:00,540
complex and large and they're not really

2816
02:00:00,540 --> 02:00:01,920
designed to be efficient in a zero

2817
02:00:01,920 --> 02:00:03,840
knowledge proof so for example just as a

2818
02:00:03,840 --> 02:00:06,239
proof of the protocols being complex

2819
02:00:06,239 --> 02:00:08,340
here's the just the key schedule part of

2820
02:00:08,340 --> 02:00:11,580
the TLs 1.3 uh protocol it's very very

2821
02:00:11,580 --> 02:00:14,820
complicated and very hairy uh diagram

2822
02:00:14,820 --> 02:00:17,580
um so this this is a very daunting it

2823
02:00:17,580 --> 02:00:19,380
seems like a very daunting task to

2824
02:00:19,380 --> 02:00:21,300
develop zero knowledge proofs that are

2825
02:00:21,300 --> 02:00:23,580
that can be efficient enough for for

2826
02:00:23,580 --> 02:00:25,860
real protocols and real applications but

2827
02:00:25,860 --> 02:00:27,540
when we when we implemented our our

2828
02:00:27,540 --> 02:00:29,280
research and sort of did benchmarks we

2829
02:00:29,280 --> 02:00:31,080
found that the performance is really

2830
02:00:31,080 --> 02:00:33,239
surprisingly good and while the

2831
02:00:33,239 --> 02:00:34,739
performance isn't really practical yet

2832
02:00:34,739 --> 02:00:36,659
we found that the performance is really

2833
02:00:36,659 --> 02:00:38,159
really much better than we thought and

2834
02:00:38,159 --> 02:00:40,440
we we think that that our our research

2835
02:00:40,440 --> 02:00:41,699
is really pretty close to practical

2836
02:00:41,699 --> 02:00:43,679
already uh today

2837
02:00:43,679 --> 02:00:46,020
uh so in the remainder of this talk I

2838
02:00:46,020 --> 02:00:48,420
will uh describe first a little bit

2839
02:00:48,420 --> 02:00:50,219
about the the kind of cryptographic

2840
02:00:50,219 --> 02:00:51,900
challenges that go into building as your

2841
02:00:51,900 --> 02:00:53,760
knowledge mailbox protocol in particular

2842
02:00:53,760 --> 02:00:55,139
this one cryptographic component called

2843
02:00:55,139 --> 02:00:57,300
a channel opening protocol

2844
02:00:57,300 --> 02:00:59,580
um then I will explain how we built

2845
02:00:59,580 --> 02:01:01,080
xeronauts middle boxes for some

2846
02:01:01,080 --> 02:01:02,820
applications to encrypted DNS and then

2847
02:01:02,820 --> 02:01:04,739
finally I'll talk about some future work

2848
02:01:04,739 --> 02:01:06,960
um that we're working on right now

2849
02:01:06,960 --> 02:01:09,060
so to explain the cryptographic

2850
02:01:09,060 --> 02:01:10,380
challenges I first need to go into a

2851
02:01:10,380 --> 02:01:11,580
little bit more detail about the kind of

2852
02:01:11,580 --> 02:01:13,920
Machinery of a zero knowledge proof

2853
02:01:13,920 --> 02:01:15,719
um so in a zero knowledge proof this

2854
02:01:15,719 --> 02:01:17,820
this statement uh this public statement

2855
02:01:17,820 --> 02:01:19,380
that's being proven is just certain some

2856
02:01:19,380 --> 02:01:21,659
sort of public arithmetic circuit and if

2857
02:01:21,659 --> 02:01:22,619
you don't know what an arithmetic

2858
02:01:22,619 --> 02:01:24,060
circuit is you can just imagine it like

2859
02:01:24,060 --> 02:01:25,500
a regular circuit from from Hardware

2860
02:01:25,500 --> 02:01:27,540
it's it's not that much different

2861
02:01:27,540 --> 02:01:29,820
um so the circuit uh takes us input some

2862
02:01:29,820 --> 02:01:32,520
public in inputs and additionally some

2863
02:01:32,520 --> 02:01:34,739
private Witnesses which are the the

2864
02:01:34,739 --> 02:01:36,540
values that are that are kind of private

2865
02:01:36,540 --> 02:01:38,219
to The Proven are hidden by the zero

2866
02:01:38,219 --> 02:01:39,840
knowledge guarantee

2867
02:01:39,840 --> 02:01:42,480
um so this this uh protocol

2868
02:01:42,480 --> 02:01:44,099
um works by having this prove algorithm

2869
02:01:44,099 --> 02:01:45,960
that takes his input the circuit the

2870
02:01:45,960 --> 02:01:47,940
inputs and the witnesses and generates

2871
02:01:47,940 --> 02:01:49,920
this this proof string and then the

2872
02:01:49,920 --> 02:01:51,719
approver can send the inputs along with

2873
02:01:51,719 --> 02:01:53,880
the proof to the verifier which can run

2874
02:01:53,880 --> 02:01:55,980
a verification algorithm that takes his

2875
02:01:55,980 --> 02:01:57,960
input the circuit the input and the

2876
02:01:57,960 --> 02:01:58,980
proof

2877
02:01:58,980 --> 02:02:01,139
and this this algorithm output is like

2878
02:02:01,139 --> 02:02:03,119
true or false zero one

2879
02:02:03,119 --> 02:02:06,060
um and so the just to restate this in in

2880
02:02:06,060 --> 02:02:07,860
this notation the zero knowledge

2881
02:02:07,860 --> 02:02:09,840
guarantee guarantees that the verifier

2882
02:02:09,840 --> 02:02:11,400
can't learn anything about the witnesses

2883
02:02:11,400 --> 02:02:13,980
from this from this proof uh but it also

2884
02:02:13,980 --> 02:02:15,960
prevents approver from generating a

2885
02:02:15,960 --> 02:02:17,580
proof uh for which there are no

2886
02:02:17,580 --> 02:02:19,260
Witnesses or for which the statement is

2887
02:02:19,260 --> 02:02:21,179
false so like no Witnesses would make

2888
02:02:21,179 --> 02:02:22,920
the statement true for for a certain

2889
02:02:22,920 --> 02:02:25,280
input

2890
02:02:25,560 --> 02:02:28,020
um so to build a circuit like like an

2891
02:02:28,020 --> 02:02:29,699
arithmetic circuit for a zero knowledge

2892
02:02:29,699 --> 02:02:31,739
middle box uh what we need to do at a

2893
02:02:31,739 --> 02:02:34,619
high level is take as input the the the

2894
02:02:34,619 --> 02:02:37,739
the clients encrypted traffic

2895
02:02:37,739 --> 02:02:40,020
um and also take as witness the private

2896
02:02:40,020 --> 02:02:41,760
witness the key that it uses to decrypt

2897
02:02:41,760 --> 02:02:43,440
that traffic and what the circuit needs

2898
02:02:43,440 --> 02:02:44,880
to do roughly is sort of decrypt this

2899
02:02:44,880 --> 02:02:48,119
traffic and then extract the the data

2900
02:02:48,119 --> 02:02:49,500
which is relevant to the policy and then

2901
02:02:49,500 --> 02:02:51,599
sort of verify its compliance uh with

2902
02:02:51,599 --> 02:02:53,639
the with the policy

2903
02:02:53,639 --> 02:02:55,920
so because these circuits are pretty

2904
02:02:55,920 --> 02:02:56,820
large

2905
02:02:56,820 --> 02:02:58,199
um they're complicated and they're also

2906
02:02:58,199 --> 02:02:59,580
policy specific we broke this down in

2907
02:02:59,580 --> 02:03:01,800
the paper into three steps uh so the the

2908
02:03:01,800 --> 02:03:03,420
channel opening handles the like the

2909
02:03:03,420 --> 02:03:05,099
cryptographic question of decrypting the

2910
02:03:05,099 --> 02:03:07,560
traffic and then Parson extract extracts

2911
02:03:07,560 --> 02:03:08,639
the information that's relevant for the

2912
02:03:08,639 --> 02:03:10,440
policy and finally policy check actually

2913
02:03:10,440 --> 02:03:13,020
checks the policy relevant data now puts

2914
02:03:13,020 --> 02:03:14,820
a zero or a one

2915
02:03:14,820 --> 02:03:17,760
so I just want to like briefly yeah um

2916
02:03:17,760 --> 02:03:20,159
yes very briefly go into some detail

2917
02:03:20,159 --> 02:03:21,960
about the channel opening uh protocol so

2918
02:03:21,960 --> 02:03:23,880
for TLS 1.3 if you want to build a

2919
02:03:23,880 --> 02:03:26,040
channel opening protocol uh the most

2920
02:03:26,040 --> 02:03:27,900
obvious way of doing it is to just run

2921
02:03:27,900 --> 02:03:30,239
the TLs 1.3 decryption algorithm in this

2922
02:03:30,239 --> 02:03:32,159
zero knowledge proof

2923
02:03:32,159 --> 02:03:33,420
um there's a there's a really

2924
02:03:33,420 --> 02:03:35,400
interesting and uh challenging problem

2925
02:03:35,400 --> 02:03:37,020
with this though which is that the TLs

2926
02:03:37,020 --> 02:03:39,599
1.3 aeds don't have a cryptographic

2927
02:03:39,599 --> 02:03:41,460
property which prevents the client from

2928
02:03:41,460 --> 02:03:43,619
crafting uh ciphertext that have

2929
02:03:43,619 --> 02:03:45,420
multiple different decryptions and so

2930
02:03:45,420 --> 02:03:47,280
because they lack this property which to

2931
02:03:47,280 --> 02:03:49,139
be clear is not really required for

2932
02:03:49,139 --> 02:03:51,300
standard operation of TLS 1.3 so this is

2933
02:03:51,300 --> 02:03:53,219
no weakness as a protocol it's just

2934
02:03:53,219 --> 02:03:54,480
something that wasn't really a design

2935
02:03:54,480 --> 02:03:58,560
requirement to feel but because this TLS

2936
02:03:58,560 --> 02:04:01,380
1.3 record layer lacks this property a

2937
02:04:01,380 --> 02:04:03,179
client could Craft

2938
02:04:03,179 --> 02:04:04,800
um ciphertext that have one decryption

2939
02:04:04,800 --> 02:04:06,000
that's compliant and one decryption

2940
02:04:06,000 --> 02:04:07,139
that's not compliant and sort of evade

2941
02:04:07,139 --> 02:04:09,060
the policy so we really need to prevent

2942
02:04:09,060 --> 02:04:10,860
the client from exploiting this this

2943
02:04:10,860 --> 02:04:13,380
lack of binding and so in the paper we

2944
02:04:13,380 --> 02:04:15,840
sketch a way of fixing this by adding an

2945
02:04:15,840 --> 02:04:17,760
additional constraint check to the

2946
02:04:17,760 --> 02:04:19,260
circuit and in a sense what this

2947
02:04:19,260 --> 02:04:21,060
constraint check does is requires the

2948
02:04:21,060 --> 02:04:23,940
client to prove how it obtained the key

2949
02:04:23,940 --> 02:04:26,099
which is its witness how it obtained

2950
02:04:26,099 --> 02:04:27,780
this key from the cryptographic

2951
02:04:27,780 --> 02:04:30,179
handshake that the client and the server

2952
02:04:30,179 --> 02:04:32,460
performed to establish the key in the

2953
02:04:32,460 --> 02:04:34,260
first place so this is kind of a check

2954
02:04:34,260 --> 02:04:36,599
of consistency between the handshake

2955
02:04:36,599 --> 02:04:38,159
which the middle box can see kind of

2956
02:04:38,159 --> 02:04:40,260
going across on the wire and the key

2957
02:04:40,260 --> 02:04:43,619
that is derived from that handshake

2958
02:04:43,619 --> 02:04:45,060
um and so by doing this we sort of

2959
02:04:45,060 --> 02:04:46,260
prevent the client from lying about the

2960
02:04:46,260 --> 02:04:47,280
key but then of course the question is

2961
02:04:47,280 --> 02:04:48,780
how do we craft this key consistency

2962
02:04:48,780 --> 02:04:51,780
check for TLS 1.3 and because we don't

2963
02:04:51,780 --> 02:04:53,940
have time and because it would it would

2964
02:04:53,940 --> 02:04:55,619
be very complicated to explain I'm just

2965
02:04:55,619 --> 02:04:57,659
going to give a very high level summary

2966
02:04:57,659 --> 02:04:59,280
um so there's a simple and inefficient

2967
02:04:59,280 --> 02:05:01,500
way to do this which is to just rederive

2968
02:05:01,500 --> 02:05:03,480
all of the cryptographic values from the

2969
02:05:03,480 --> 02:05:07,860
TLs 1.3 handshake in the circuit but

2970
02:05:07,860 --> 02:05:09,300
this is really slow in particular

2971
02:05:09,300 --> 02:05:10,500
because you have to do public key

2972
02:05:10,500 --> 02:05:11,940
cryptography in the circuit and public

2973
02:05:11,940 --> 02:05:14,460
key photography it's description as a

2974
02:05:14,460 --> 02:05:15,900
circuit is very large which leads to a

2975
02:05:15,900 --> 02:05:17,820
slope proof generation

2976
02:05:17,820 --> 02:05:19,440
so in the paper we make an observation

2977
02:05:19,440 --> 02:05:21,540
which is very useful which is that the

2978
02:05:21,540 --> 02:05:23,099
TLs handshake has a special property

2979
02:05:23,099 --> 02:05:25,320
which means that it sends a value during

2980
02:05:25,320 --> 02:05:27,420
the handshake that actually acts as a

2981
02:05:27,420 --> 02:05:28,980
commitment to some of the intermediate

2982
02:05:28,980 --> 02:05:31,440
steps of the key derivation and so by

2983
02:05:31,440 --> 02:05:34,920
using this value as a kind of check on

2984
02:05:34,920 --> 02:05:37,139
the values in the circuit we can short

2985
02:05:37,139 --> 02:05:39,300
shortcut most of the expensive

2986
02:05:39,300 --> 02:05:41,099
operations involved in sort of either

2987
02:05:41,099 --> 02:05:43,260
checking the consistency of the key

2988
02:05:43,260 --> 02:05:45,300
and one one thing that will be important

2989
02:05:45,300 --> 02:05:47,159
later when I talk about evaluation is

2990
02:05:47,159 --> 02:05:48,900
that this key consistency check because

2991
02:05:48,900 --> 02:05:51,780
TLS 1.3 session keys don't change

2992
02:05:51,780 --> 02:05:54,000
generally during a TLS 1.3 session if

2993
02:05:54,000 --> 02:05:56,159
you have a long-lived session

2994
02:05:56,159 --> 02:05:57,780
um then the work of generating this key

2995
02:05:57,780 --> 02:05:59,340
consistent future can be amortized

2996
02:05:59,340 --> 02:06:01,800
across all messages you send in this in

2997
02:06:01,800 --> 02:06:03,900
the session so you can sort of do it

2998
02:06:03,900 --> 02:06:05,760
once at the beginning and without going

2999
02:06:05,760 --> 02:06:07,080
into too much detail the middle box and

3000
02:06:07,080 --> 02:06:08,880
sort of remember a value

3001
02:06:08,880 --> 02:06:10,800
um that sort of commits you to the the

3002
02:06:10,800 --> 02:06:13,440
thing that you um the the key that you

3003
02:06:13,440 --> 02:06:15,300
proved consistency of and then you can

3004
02:06:15,300 --> 02:06:16,739
sort of refer back to this as you

3005
02:06:16,739 --> 02:06:20,178
generate subsequent proofs

3006
02:06:20,580 --> 02:06:22,380
um so now that we're done with the more

3007
02:06:22,380 --> 02:06:24,060
technical cryptographic portion of the

3008
02:06:24,060 --> 02:06:25,679
talk I just want to pop pop back up to

3009
02:06:25,679 --> 02:06:27,540
the to the high level and and take stock

3010
02:06:27,540 --> 02:06:28,860
of where we are

3011
02:06:28,860 --> 02:06:30,900
um so I just told you a bit about how we

3012
02:06:30,900 --> 02:06:32,940
at a cryptographics or protocol level

3013
02:06:32,940 --> 02:06:35,460
build zkmbs and and how we Define them

3014
02:06:35,460 --> 02:06:37,320
protocols but I haven't really told you

3015
02:06:37,320 --> 02:06:38,639
about what kinds of applications

3016
02:06:38,639 --> 02:06:40,739
zkampies are useful for

3017
02:06:40,739 --> 02:06:41,880
um so in the next portion of the talk

3018
02:06:41,880 --> 02:06:43,739
I'm going to tell you about applications

3019
02:06:43,739 --> 02:06:44,940
of the zero knowledge middlebox

3020
02:06:44,940 --> 02:06:46,500
framework to

3021
02:06:46,500 --> 02:06:48,960
um to problems in encrypted DNS policy

3022
02:06:48,960 --> 02:06:51,440
enforcement

3023
02:06:51,540 --> 02:06:54,000
um so I don't probably need to explain

3024
02:06:54,000 --> 02:06:56,580
what encrypted DNS is to this audience

3025
02:06:56,580 --> 02:06:58,679
um but just to just to be clear and to

3026
02:06:58,679 --> 02:07:01,560
establishmentation encrypted DNS is a

3027
02:07:01,560 --> 02:07:04,080
way for clients to encrypt their DNS

3028
02:07:04,080 --> 02:07:06,480
queries to resolvers that generally are

3029
02:07:06,480 --> 02:07:08,580
not the one that their local network is

3030
02:07:08,580 --> 02:07:10,320
is run

3031
02:07:10,320 --> 02:07:12,480
um so the generally the way this works

3032
02:07:12,480 --> 02:07:14,280
is that the client and the DNS resolver

3033
02:07:14,280 --> 02:07:16,139
established https session and then they

3034
02:07:16,139 --> 02:07:18,000
use the key uh to encrypt their DNS

3035
02:07:18,000 --> 02:07:21,260
queries and and the results

3036
02:07:22,080 --> 02:07:25,500
um because the DNS has a lot of privacy

3037
02:07:25,500 --> 02:07:27,480
implications uh people are very excited

3038
02:07:27,480 --> 02:07:28,860
about this this way we can use

3039
02:07:28,860 --> 02:07:30,119
encryption to sort of improve the

3040
02:07:30,119 --> 02:07:33,300
privacy of DNS uh on on the network

3041
02:07:33,300 --> 02:07:35,820
um and in particular like

3042
02:07:35,820 --> 02:07:38,820
um browsers like like Firefox and chrome

3043
02:07:38,820 --> 02:07:40,619
and Edge uh to sort of protect the

3044
02:07:40,619 --> 02:07:42,300
privacy of their users uh they're

3045
02:07:42,300 --> 02:07:44,580
increasingly rolling out encrypted DNS

3046
02:07:44,580 --> 02:07:47,159
as a sort of default mode for DNS

3047
02:07:47,159 --> 02:07:48,360
resolution

3048
02:07:48,360 --> 02:07:51,920
um in in various forms

3049
02:07:53,639 --> 02:07:55,260
um but but by Design

3050
02:07:55,260 --> 02:07:56,940
um encrypted DNS causes a really really

3051
02:07:56,940 --> 02:07:58,619
challenging tension between between

3052
02:07:58,619 --> 02:08:00,300
policy enforcement and the network and

3053
02:08:00,300 --> 02:08:01,800
and privacy

3054
02:08:01,800 --> 02:08:03,239
um it prevents the network from

3055
02:08:03,239 --> 02:08:05,880
enforcing um all dns-based policies like

3056
02:08:05,880 --> 02:08:07,980
in particular like content filtering or

3057
02:08:07,980 --> 02:08:09,960
like like malware scanning or or

3058
02:08:09,960 --> 02:08:12,060
anything like that so when the network

3059
02:08:12,060 --> 02:08:13,980
if it has a block list of domains that

3060
02:08:13,980 --> 02:08:15,179
it doesn't want the clients to be able

3061
02:08:15,179 --> 02:08:17,280
to resolve in the network the encryption

3062
02:08:17,280 --> 02:08:18,900
prevents the network from seeing whether

3063
02:08:18,900 --> 02:08:19,980
the clients are actually trying to

3064
02:08:19,980 --> 02:08:23,419
resolve those those domains

3065
02:08:24,179 --> 02:08:26,460
um so this is this caused and is causing

3066
02:08:26,460 --> 02:08:28,980
a lot of opposition to encrypted DNS uh

3067
02:08:28,980 --> 02:08:30,300
especially from administrators of

3068
02:08:30,300 --> 02:08:31,860
networks where filtering is legally

3069
02:08:31,860 --> 02:08:33,900
required so for example in the United

3070
02:08:33,900 --> 02:08:35,219
States there's a law called the

3071
02:08:35,219 --> 02:08:36,780
children's internet Protection Law which

3072
02:08:36,780 --> 02:08:38,400
was passed in 2000 that requires

3073
02:08:38,400 --> 02:08:41,639
operators of educational and Library

3074
02:08:41,639 --> 02:08:45,060
networks in particular to filter out

3075
02:08:45,060 --> 02:08:47,639
um kind of obscene or or objectionable

3076
02:08:47,639 --> 02:08:49,560
traffic from the networks

3077
02:08:49,560 --> 02:08:51,719
um and the a common way this is enforced

3078
02:08:51,719 --> 02:08:54,900
is using DNS filtering so when in in

3079
02:08:54,900 --> 02:08:57,119
2019 and 2020 when Firefox wanted to

3080
02:08:57,119 --> 02:08:59,040
actually turn on encrypted DNS by

3081
02:08:59,040 --> 02:09:01,199
default for all its users opposition of

3082
02:09:01,199 --> 02:09:04,199
this kind forced Firefox to build a sort

3083
02:09:04,199 --> 02:09:07,020
of network level mechanism to allow

3084
02:09:07,020 --> 02:09:09,540
networks to disable DNS uh if the

3085
02:09:09,540 --> 02:09:10,800
networks believe that they need to

3086
02:09:10,800 --> 02:09:12,840
observe DNS

3087
02:09:12,840 --> 02:09:16,080
um uh queries so by sending the

3088
02:09:16,080 --> 02:09:17,460
technical details here are so important

3089
02:09:17,460 --> 02:09:20,099
so but by default Firefox if it uses

3090
02:09:20,099 --> 02:09:23,219
encrypted DNS and it resolves a record

3091
02:09:23,219 --> 02:09:25,080
um to an NX domain not use application

3092
02:09:25,080 --> 02:09:27,840
DNS it will prevent the user from using

3093
02:09:27,840 --> 02:09:29,580
encrypted DNS and just send their their

3094
02:09:29,580 --> 02:09:31,380
queries unencrypted to the to the local

3095
02:09:31,380 --> 02:09:34,219
network resolver

3096
02:09:34,500 --> 02:09:36,300
um so to resolve these these really

3097
02:09:36,300 --> 02:09:37,800
challenging tensions in the paper we

3098
02:09:37,800 --> 02:09:40,679
sketch an architecture for a zero

3099
02:09:40,679 --> 02:09:42,480
knowledge Moodle box that can allow uh

3100
02:09:42,480 --> 02:09:44,159
networks to filter encrypted DNS without

3101
02:09:44,159 --> 02:09:47,219
seeing DNS queries so the way this uh

3102
02:09:47,219 --> 02:09:49,139
will work is that the the network will

3103
02:09:49,139 --> 02:09:51,000
first decide on their DNS block list and

3104
02:09:51,000 --> 02:09:53,400
create a circuit that will sort of allow

3105
02:09:53,400 --> 02:09:55,380
the client to sort of check and prove

3106
02:09:55,380 --> 02:09:57,540
compliance with this block list of their

3107
02:09:57,540 --> 02:09:58,440
traffic

3108
02:09:58,440 --> 02:10:00,000
and then when the client joins the

3109
02:10:00,000 --> 02:10:01,560
network as I said it'll receive the

3110
02:10:01,560 --> 02:10:03,179
circuit and as well a description of the

3111
02:10:03,179 --> 02:10:05,040
block list itself

3112
02:10:05,040 --> 02:10:07,440
and then the client and the and the and

3113
02:10:07,440 --> 02:10:09,119
the destination resolver will establish

3114
02:10:09,119 --> 02:10:11,280
a handshake just as before

3115
02:10:11,280 --> 02:10:13,380
um uh and establish a key and then use

3116
02:10:13,380 --> 02:10:14,940
it to encrypt their DNS queries but when

3117
02:10:14,940 --> 02:10:17,099
the client sends an encrypted DNS query

3118
02:10:17,099 --> 02:10:19,139
it will send in addition to its included

3119
02:10:19,139 --> 02:10:22,139
traffic a proof that the underlying DNS

3120
02:10:22,139 --> 02:10:25,260
query uh of this connection that the

3121
02:10:25,260 --> 02:10:26,699
underlying DNS query that it wants to

3122
02:10:26,699 --> 02:10:30,659
resolve is not up on the block list

3123
02:10:30,659 --> 02:10:33,119
so the way this works is not super

3124
02:10:33,119 --> 02:10:35,159
germane for for this talk and we're a

3125
02:10:35,159 --> 02:10:37,139
little short on time anyway so

3126
02:10:37,139 --> 02:10:39,659
um basically the way it works is we we

3127
02:10:39,659 --> 02:10:41,460
just sort of parse partially partially

3128
02:10:41,460 --> 02:10:43,080
the DNS query in this circuit and

3129
02:10:43,080 --> 02:10:44,940
extract a domain name and then use a

3130
02:10:44,940 --> 02:10:46,440
standard technique to sort of prove that

3131
02:10:46,440 --> 02:10:48,960
it is not in the set of block domains

3132
02:10:48,960 --> 02:10:50,699
and the way this works there are a

3133
02:10:50,699 --> 02:10:51,900
little bit of there's a little bit of

3134
02:10:51,900 --> 02:10:54,719
difference between DNS over TLS and DNS

3135
02:10:54,719 --> 02:10:57,420
over https but the difference we'll see

3136
02:10:57,420 --> 02:11:00,420
is is not not so not so relevant so

3137
02:11:00,420 --> 02:11:02,400
those protocol level details uh don't

3138
02:11:02,400 --> 02:11:04,260
make a humongous difference and there's

3139
02:11:04,260 --> 02:11:07,380
also a way to uh maintain the privacy of

3140
02:11:07,380 --> 02:11:09,360
the block list itself so if if the

3141
02:11:09,360 --> 02:11:11,580
broadcast is proprietary uh or the

3142
02:11:11,580 --> 02:11:12,900
network doesn't want to share it we

3143
02:11:12,900 --> 02:11:15,540
sketch a protocol in our paper that

3144
02:11:15,540 --> 02:11:17,280
allows hiding this block list but we

3145
02:11:17,280 --> 02:11:18,599
didn't implement this protocol and we

3146
02:11:18,599 --> 02:11:20,219
believe that it's concrete cost would be

3147
02:11:20,219 --> 02:11:21,540
quite High

3148
02:11:21,540 --> 02:11:23,340
um so I think there's there's more

3149
02:11:23,340 --> 02:11:24,719
research needed here but there is at

3150
02:11:24,719 --> 02:11:26,699
least like like it is feasible to do

3151
02:11:26,699 --> 02:11:29,340
this on some level

3152
02:11:29,340 --> 02:11:30,840
um so I want to just quickly sketch one

3153
02:11:30,840 --> 02:11:32,760
other application from our paper and

3154
02:11:32,760 --> 02:11:35,340
that is to a resolver allow listing in

3155
02:11:35,340 --> 02:11:36,599
oblivious d-wage so if you're not

3156
02:11:36,599 --> 02:11:38,400
familiar oblivious Doh is basically a

3157
02:11:38,400 --> 02:11:42,540
way to proxy a a DNS over https so the

3158
02:11:42,540 --> 02:11:45,659
goal of this is to hide the the identity

3159
02:11:45,659 --> 02:11:47,099
of the client from the destination

3160
02:11:47,099 --> 02:11:49,199
resolver to sort of solve the problem of

3161
02:11:49,199 --> 02:11:51,480
uh one centralized resolver seeing

3162
02:11:51,480 --> 02:11:53,699
everybody's DNS queries and their

3163
02:11:53,699 --> 02:11:55,739
identities so the way it works is that

3164
02:11:55,739 --> 02:11:57,659
the clients will establish basically

3165
02:11:57,659 --> 02:12:00,000
like in a sense like two encrypted

3166
02:12:00,000 --> 02:12:03,119
connections one with a proxy that will

3167
02:12:03,119 --> 02:12:04,500
forward its traffic and then one with

3168
02:12:04,500 --> 02:12:06,300
the destination resolver and then when

3169
02:12:06,300 --> 02:12:08,340
it sends its DNS queries it encrypts

3170
02:12:08,340 --> 02:12:11,219
them sort of twice it encrypts the query

3171
02:12:11,219 --> 02:12:12,179
itself

3172
02:12:12,179 --> 02:12:13,500
um with the key for the destination

3173
02:12:13,500 --> 02:12:15,300
resolver and then it encrypts that

3174
02:12:15,300 --> 02:12:17,520
ciphertext in the destination kind of

3175
02:12:17,520 --> 02:12:19,679
again with https and it sends it in an

3176
02:12:19,679 --> 02:12:22,380
https connection to the odh proxy and

3177
02:12:22,380 --> 02:12:24,000
then the proxy decrypts it and then

3178
02:12:24,000 --> 02:12:25,800
forwards the encrypted query onto the

3179
02:12:25,800 --> 02:12:27,119
destination resolver and then does the

3180
02:12:27,119 --> 02:12:29,659
same thing for the for the reply

3181
02:12:29,659 --> 02:12:31,199
foreign

3182
02:12:31,199 --> 02:12:33,840
so the the question that we wanted to

3183
02:12:33,840 --> 02:12:36,119
resolve in in our paper is it seems like

3184
02:12:36,119 --> 02:12:37,739
it's really hard in this architecture

3185
02:12:37,739 --> 02:12:39,780
for networks to verify that their

3186
02:12:39,780 --> 02:12:41,580
clients are using a filtered DNS

3187
02:12:41,580 --> 02:12:43,020
resolver so if the networks want to

3188
02:12:43,020 --> 02:12:45,480
Outsource the filtering oduh because it

3189
02:12:45,480 --> 02:12:47,340
hides the destination solver from the

3190
02:12:47,340 --> 02:12:49,320
network uh makes it really hard for the

3191
02:12:49,320 --> 02:12:51,239
for the for the network to do that so

3192
02:12:51,239 --> 02:12:53,639
the way we solve we're solving this with

3193
02:12:53,639 --> 02:12:55,500
the zero knowledge middle boxes for

3194
02:12:55,500 --> 02:12:57,960
example if the if the policy is that the

3195
02:12:57,960 --> 02:13:00,000
network wants their clients to go to

3196
02:13:00,000 --> 02:13:01,739
clean browsing.org we can do the same as

3197
02:13:01,739 --> 02:13:03,599
your knowledge bitterbox setup and give

3198
02:13:03,599 --> 02:13:04,980
the description of the circuit that

3199
02:13:04,980 --> 02:13:06,900
checks whether the destination is Queen

3200
02:13:06,900 --> 02:13:09,360
browsing.org to the Ser to the client

3201
02:13:09,360 --> 02:13:12,119
and then after it uh establishes its

3202
02:13:12,119 --> 02:13:13,199
keys and sends its traffic it

3203
02:13:13,199 --> 02:13:14,579
additionally includes this is your

3204
02:13:14,579 --> 02:13:17,040
knowledge proof that if the the when it

3205
02:13:17,040 --> 02:13:19,380
decrypts the the the when it decrypts

3206
02:13:19,380 --> 02:13:21,960
the https request and compares the

3207
02:13:21,960 --> 02:13:23,520
destination resolver to clean

3208
02:13:23,520 --> 02:13:26,159
browsing.org this comparison uh passes

3209
02:13:26,159 --> 02:13:28,739
so so basically this this proves that

3210
02:13:28,739 --> 02:13:30,179
the underlying traffic is destined for

3211
02:13:30,179 --> 02:13:31,920
for a filtered resolver without without

3212
02:13:31,920 --> 02:13:33,960
reviewing it

3213
02:13:33,960 --> 02:13:35,520
um so I'll just briefly talk about some

3214
02:13:35,520 --> 02:13:37,980
experimental results here we implemented

3215
02:13:37,980 --> 02:13:40,079
all of our protocols using a the Groth

3216
02:13:40,079 --> 02:13:42,599
16 zero knowledge proof backend which is

3217
02:13:42,599 --> 02:13:44,820
a common one used in in the zcash

3218
02:13:44,820 --> 02:13:46,619
cryptocurrency in particular

3219
02:13:46,619 --> 02:13:49,199
um and we first implemented our this key

3220
02:13:49,199 --> 02:13:50,579
consistency group that I told you about

3221
02:13:50,579 --> 02:13:52,260
before and we implemented a sort of

3222
02:13:52,260 --> 02:13:53,940
naive Baseline and we implemented our

3223
02:13:53,940 --> 02:13:56,639
optimize protocol and with the optimized

3224
02:13:56,639 --> 02:13:58,920
protocol our performance was about 16

3225
02:13:58,920 --> 02:14:01,440
and a half seconds to generate approved

3226
02:14:01,440 --> 02:14:04,260
so we can imagine this as every time the

3227
02:14:04,260 --> 02:14:06,659
client opens a TLS session it

3228
02:14:06,659 --> 02:14:08,159
additionally needs to do 16 and a half

3229
02:14:08,159 --> 02:14:09,840
seconds of work to generate this

3230
02:14:09,840 --> 02:14:13,380
one-time proof that that the that the

3231
02:14:13,380 --> 02:14:15,780
the key is consistent with the with the

3232
02:14:15,780 --> 02:14:16,860
handshake

3233
02:14:16,860 --> 02:14:20,460
and so uh after this this initial setup

3234
02:14:20,460 --> 02:14:23,460
um we can do we can do generate proofs

3235
02:14:23,460 --> 02:14:26,639
for the the uh DNS filtering zero

3236
02:14:26,639 --> 02:14:27,840
knowledge that I told you about before

3237
02:14:27,840 --> 02:14:30,900
for DOT in about three seconds

3238
02:14:30,900 --> 02:14:33,300
um so while this this three second

3239
02:14:33,300 --> 02:14:36,780
number and 16.5 seconds are still a bit

3240
02:14:36,780 --> 02:14:39,420
too high to use to use in practice

3241
02:14:39,420 --> 02:14:40,800
um there are a lot of ways to get these

3242
02:14:40,800 --> 02:14:43,079
numbers uh down like for example we can

3243
02:14:43,079 --> 02:14:45,179
use new uh newer zero knowledge proof

3244
02:14:45,179 --> 02:14:46,199
systems that have better concrete

3245
02:14:46,199 --> 02:14:48,860
performance is

3246
02:14:49,020 --> 02:14:50,639
um so what I'll tell you about right now

3247
02:14:50,639 --> 02:14:51,840
is a little bit of future work we're

3248
02:14:51,840 --> 02:14:54,179
doing currently to reduce the the prover

3249
02:14:54,179 --> 02:14:55,920
overhead of these schemes

3250
02:14:55,920 --> 02:14:57,900
um so we implement we re-implemented our

3251
02:14:57,900 --> 02:15:00,000
protocols in a newer zero knowledge

3252
02:15:00,000 --> 02:15:02,520
proof backend called Spartan

3253
02:15:02,520 --> 02:15:05,099
um and we we saw a huge reduction in the

3254
02:15:05,099 --> 02:15:06,719
proving time for this key consistency

3255
02:15:06,719 --> 02:15:09,179
check so we saw about a 10x reduction in

3256
02:15:09,179 --> 02:15:10,920
the amount of time it takes the client

3257
02:15:10,920 --> 02:15:13,260
when it opens a new TLS session to

3258
02:15:13,260 --> 02:15:15,659
generate this key consistency proof

3259
02:15:15,659 --> 02:15:18,239
um so one difference here and one sort

3260
02:15:18,239 --> 02:15:20,040
of research challenge is that the proofs

3261
02:15:20,040 --> 02:15:21,840
themselves that the client has to send

3262
02:15:21,840 --> 02:15:23,460
to the mailbox are quite a bit larger so

3263
02:15:23,460 --> 02:15:26,219
they're about 49 kilobytes with Spartan

3264
02:15:26,219 --> 02:15:27,960
um we we don't think this is actually a

3265
02:15:27,960 --> 02:15:30,540
huge problem because 49 kilobytes is

3266
02:15:30,540 --> 02:15:33,960
still quite small as these things go

3267
02:15:33,960 --> 02:15:36,060
um but it is the pre-star substantially

3268
02:15:36,060 --> 02:15:37,440
larger than they were before so this is

3269
02:15:37,440 --> 02:15:38,699
something that we're thinking about um

3270
02:15:38,699 --> 02:15:42,119
how to fix and with Spartan we we

3271
02:15:42,119 --> 02:15:44,219
re-implemented part of our our protocol

3272
02:15:44,219 --> 02:15:46,020
just the sort of decryption's Channel

3273
02:15:46,020 --> 02:15:48,480
opening step um and we found that the

3274
02:15:48,480 --> 02:15:51,239
the cost again comes down hugely

3275
02:15:51,239 --> 02:15:53,219
um this channel opening part of our our

3276
02:15:53,219 --> 02:15:55,440
decryption proof um only takes about uh

3277
02:15:55,440 --> 02:15:57,480
two-tenths of a second generated proof

3278
02:15:57,480 --> 02:15:59,340
and again here that the proofs are are

3279
02:15:59,340 --> 02:16:01,560
larger but we have some ideas on how to

3280
02:16:01,560 --> 02:16:04,579
get this down that we're working on

3281
02:16:04,860 --> 02:16:06,599
um so in conclusion uh in this work my

3282
02:16:06,599 --> 02:16:09,420
co-workers and I initiated a a new line

3283
02:16:09,420 --> 02:16:10,980
of work on zero knowledge middle boxes

3284
02:16:10,980 --> 02:16:12,659
uh which used zero knowledge proofs to

3285
02:16:12,659 --> 02:16:14,219
enable privacy preserving enforcement

3286
02:16:14,219 --> 02:16:15,900
and network policies

3287
02:16:15,900 --> 02:16:18,119
um so one application that we gave in is

3288
02:16:18,119 --> 02:16:21,119
DNS filtering which allows uh a network

3289
02:16:21,119 --> 02:16:22,739
to enforce a block listing policy

3290
02:16:22,739 --> 02:16:24,900
without having to see DNS queries and we

3291
02:16:24,900 --> 02:16:26,460
also implemented a zero knowledge model

3292
02:16:26,460 --> 02:16:28,679
box for allow listing resolvers for

3293
02:16:28,679 --> 02:16:30,780
oblivious Doh and in the paper we gave

3294
02:16:30,780 --> 02:16:33,240
one further case study on https

3295
02:16:33,240 --> 02:16:34,978
firewalling

3296
02:16:34,978 --> 02:16:36,299
um we're really really excited about

3297
02:16:36,299 --> 02:16:38,160
this research and I hope now you are too

3298
02:16:38,160 --> 02:16:39,840
um we think zero knowledge metal boxes

3299
02:16:39,840 --> 02:16:41,340
are really really fascinating new

3300
02:16:41,340 --> 02:16:43,320
abstraction for for building network

3301
02:16:43,320 --> 02:16:46,320
security and while enabling privacy and

3302
02:16:46,320 --> 02:16:47,580
and they raise a lot of really really

3303
02:16:47,580 --> 02:16:49,799
fascinating questions in like networking

3304
02:16:49,799 --> 02:16:53,099
and systems and also in cryptography I'm

3305
02:16:53,099 --> 02:16:55,379
secured um so with that I will conclude

3306
02:16:55,379 --> 02:16:57,058
and if you want to read the paper I've

3307
02:16:57,058 --> 02:16:58,679
given a URL here and if you have any

3308
02:16:58,679 --> 02:17:01,200
more questions about my work um my email

3309
02:17:01,200 --> 02:17:03,179
is right here so thanks so much for

3310
02:17:03,179 --> 02:17:04,320
listening and for inviting me to speak

3311
02:17:04,320 --> 02:17:06,000
here today um and I'll take any

3312
02:17:06,000 --> 02:17:06,959
questions

3313
02:17:06,959 --> 02:17:10,740
and now we have our next

3314
02:17:10,740 --> 02:17:13,740
talk Shannon Warwick talking about on

3315
02:17:13,740 --> 02:17:17,058
the edge of small data

3316
02:17:17,218 --> 02:17:19,820
good afternoon

3317
02:17:19,978 --> 02:17:21,599
okay I'm sorry my Shannon my name is

3318
02:17:21,599 --> 02:17:23,879
Shannon Wyrick and uh the title of my

3319
02:17:23,879 --> 02:17:27,120
talk today is on the edge of small data

3320
02:17:27,120 --> 02:17:29,760
so I'm going to talk about an open

3321
02:17:29,760 --> 02:17:31,740
source observability tool that I've been

3322
02:17:31,740 --> 02:17:33,240
working on

3323
02:17:33,240 --> 02:17:35,340
but first i'm going to talk a bit about

3324
02:17:35,340 --> 02:17:37,080
this concept of

3325
02:17:37,080 --> 02:17:39,478
uh small data that I've been developing

3326
02:17:39,478 --> 02:17:43,398
and see if it resonates with you folks

3327
02:17:44,760 --> 02:17:46,320
so I'm going to do that through the lens

3328
02:17:46,320 --> 02:17:48,840
of the company that I work for so I work

3329
02:17:48,840 --> 02:17:52,019
for ns1 we're a managed authoritative

3330
02:17:52,019 --> 02:17:55,080
DNS provider we run a anycast network to

3331
02:17:55,080 --> 02:17:58,260
deliver our our DNS as many of you do

3332
02:17:58,260 --> 02:17:59,580
and we're doing something on the order

3333
02:17:59,580 --> 02:18:02,879
of 100 billion DNS queries per average

3334
02:18:02,879 --> 02:18:04,799
day and that's something like

3335
02:18:04,799 --> 02:18:07,439
call it 30 terabytes of of raw DNS

3336
02:18:07,439 --> 02:18:09,420
traffic that's traversing our Edge

3337
02:18:09,420 --> 02:18:13,379
network uh every day and So within this

3338
02:18:13,379 --> 02:18:15,478
raw data there's information that we

3339
02:18:15,478 --> 02:18:16,620
care about right there's information

3340
02:18:16,620 --> 02:18:19,080
that we want to extract that's going to

3341
02:18:19,080 --> 02:18:20,760
help us operate our Network

3342
02:18:20,760 --> 02:18:23,459
debug it protect it scale it

3343
02:18:23,459 --> 02:18:25,320
and so the question arises

3344
02:18:25,320 --> 02:18:28,260
how do we extract that information how

3345
02:18:28,260 --> 02:18:29,760
do we extract those insights how do we

3346
02:18:29,760 --> 02:18:31,920
extract that signal from that stream of

3347
02:18:31,920 --> 02:18:33,359
data that's going on

3348
02:18:33,359 --> 02:18:35,340
and we thought about this in different

3349
02:18:35,340 --> 02:18:36,660
ways

3350
02:18:36,660 --> 02:18:38,280
over time

3351
02:18:38,280 --> 02:18:41,120
and

3352
02:18:42,840 --> 02:18:44,580
and

3353
02:18:44,580 --> 02:18:47,099
I think when your your approach with

3354
02:18:47,099 --> 02:18:48,840
this question of how do we extract this

3355
02:18:48,840 --> 02:18:50,040
you you have to build some kind of

3356
02:18:50,040 --> 02:18:53,398
system to do it and initially as as we

3357
02:18:53,398 --> 02:18:55,558
did uh you often think well what I want

3358
02:18:55,558 --> 02:18:58,320
to do is capture as much Telemetry as

3359
02:18:58,320 --> 02:19:00,359
possible as much data as possible let me

3360
02:19:00,359 --> 02:19:02,459
try to collect it and put it into some

3361
02:19:02,459 --> 02:19:04,320
kind of data warehousing system so that

3362
02:19:04,320 --> 02:19:07,679
I can ask any question that I want a bit

3363
02:19:07,679 --> 02:19:09,240
and that's very reasonable and there's a

3364
02:19:09,240 --> 02:19:10,920
lot of good use cases for that

3365
02:19:10,920 --> 02:19:13,379
but what we found over time is

3366
02:19:13,379 --> 02:19:15,179
what we want is actually the insights

3367
02:19:15,179 --> 02:19:16,978
that we extract from that data right

3368
02:19:16,978 --> 02:19:18,959
it's not the raw data that that we

3369
02:19:18,959 --> 02:19:20,760
necessarily need it's the insights that

3370
02:19:20,760 --> 02:19:22,558
are going to help us operate and debug

3371
02:19:22,558 --> 02:19:24,120
and scale our Networks

3372
02:19:24,120 --> 02:19:26,040
and we found that there's there are

3373
02:19:26,040 --> 02:19:28,558
prices to pay for call it these the Big

3374
02:19:28,558 --> 02:19:31,218
Data Solutions

3375
02:19:32,638 --> 02:19:34,320
so some of the things that we've seen in

3376
02:19:34,320 --> 02:19:36,780
terms of downsides include pipelines

3377
02:19:36,780 --> 02:19:38,099
right you have to set up some kind of

3378
02:19:38,099 --> 02:19:40,558
system to extract things that might be

3379
02:19:40,558 --> 02:19:42,120
pipelines that are sort of complicated

3380
02:19:42,120 --> 02:19:45,599
or fragile and especially in the face of

3381
02:19:45,599 --> 02:19:48,660
uh increased traffic or tax and so forth

3382
02:19:48,660 --> 02:19:49,920
and then you have to get the data

3383
02:19:49,920 --> 02:19:51,180
somewhere and then process it right

3384
02:19:51,180 --> 02:19:52,560
because again the raw data is not

3385
02:19:52,560 --> 02:19:54,359
particularly valuable if you're

3386
02:19:54,359 --> 02:19:56,280
collecting for example packet captures

3387
02:19:56,280 --> 02:19:59,040
you need to process it and and extract

3388
02:19:59,040 --> 02:20:00,540
the insights from it somehow to make it

3389
02:20:00,540 --> 02:20:02,160
actionable

3390
02:20:02,160 --> 02:20:04,979
and if it's a lot of data sometimes it

3391
02:20:04,979 --> 02:20:07,859
can be tough to make sense of it or uh

3392
02:20:07,859 --> 02:20:09,240
or to take advantage of it right if you

3393
02:20:09,240 --> 02:20:10,500
build a big system and you have a lot of

3394
02:20:10,500 --> 02:20:11,640
data you want to feel that you're

3395
02:20:11,640 --> 02:20:13,680
getting the value out of it

3396
02:20:13,680 --> 02:20:16,020
another thing we've seen is it can lead

3397
02:20:16,020 --> 02:20:17,899
to short retention times right you may

3398
02:20:17,899 --> 02:20:20,160
just due to the volume of the data only

3399
02:20:20,160 --> 02:20:22,140
be able to keep a certain amount of it

3400
02:20:22,140 --> 02:20:24,180
before you have to rotate it

3401
02:20:24,180 --> 02:20:26,160
can lead to slow dashboards

3402
02:20:26,160 --> 02:20:28,080
and also things like

3403
02:20:28,080 --> 02:20:29,760
um slow reaction times right if you if

3404
02:20:29,760 --> 02:20:31,560
you use this data to protect your

3405
02:20:31,560 --> 02:20:33,780
network and it takes time to go through

3406
02:20:33,780 --> 02:20:35,479
that pipeline then you're potentially

3407
02:20:35,479 --> 02:20:37,920
losing time when you need to understand

3408
02:20:37,920 --> 02:20:39,240
what's happening on your internet work

3409
02:20:39,240 --> 02:20:41,520
very quickly and of course it could just

3410
02:20:41,520 --> 02:20:45,120
be costly to ship data around two

3411
02:20:45,120 --> 02:20:48,060
so I want to uh talk about this idea of

3412
02:20:48,060 --> 02:20:49,800
of Shifting something and I call it this

3413
02:20:49,800 --> 02:20:51,899
the small data approach but really it's

3414
02:20:51,899 --> 02:20:54,120
just to push the conversion of raw data

3415
02:20:54,120 --> 02:20:56,700
to actionable data out to the edge where

3416
02:20:56,700 --> 02:20:59,399
the events are taking place

3417
02:20:59,399 --> 02:21:01,859
and if we think about that strategical

3418
02:21:01,859 --> 02:21:04,620
shift or architectural shift there are

3419
02:21:04,620 --> 02:21:06,300
several benefits

3420
02:21:06,300 --> 02:21:08,760
so one is that we can react quicker

3421
02:21:08,760 --> 02:21:10,439
because we do have the insights now

3422
02:21:10,439 --> 02:21:11,340
available

3423
02:21:11,340 --> 02:21:13,080
much closer to where the events are

3424
02:21:13,080 --> 02:21:14,580
happening and so we can take advantage

3425
02:21:14,580 --> 02:21:17,160
of that locally but we can also collect

3426
02:21:17,160 --> 02:21:19,380
those insights into a central database

3427
02:21:19,380 --> 02:21:22,380
still and have a global view of our of

3428
02:21:22,380 --> 02:21:23,939
our Edge Networks

3429
02:21:23,939 --> 02:21:25,920
and because we're extracting those

3430
02:21:25,920 --> 02:21:27,899
insights at the edge we're just dealing

3431
02:21:27,899 --> 02:21:30,060
with less data now because we're dealing

3432
02:21:30,060 --> 02:21:33,300
with uh call it the signal as opposed to

3433
02:21:33,300 --> 02:21:36,120
the noise and so we've we've collected

3434
02:21:36,120 --> 02:21:38,640
uh the the data that we're collecting

3435
02:21:38,640 --> 02:21:40,500
and processing and storing is just

3436
02:21:40,500 --> 02:21:42,240
smaller in volume

3437
02:21:42,240 --> 02:21:44,220
and so one analogy is that instead of

3438
02:21:44,220 --> 02:21:46,680
collecting the haystack and searching

3439
02:21:46,680 --> 02:21:48,180
for the needle later what we're trying

3440
02:21:48,180 --> 02:21:49,380
to do with this system is just collect

3441
02:21:49,380 --> 02:21:51,479
the needles

3442
02:21:51,479 --> 02:21:54,960
but to make that work uh we also need

3443
02:21:54,960 --> 02:21:57,060
the ability to decide what the signal is

3444
02:21:57,060 --> 02:21:58,859
at any time right it's not going to be a

3445
02:21:58,859 --> 02:22:00,180
static thing

3446
02:22:00,180 --> 02:22:02,340
and so we need a dynamic system for

3447
02:22:02,340 --> 02:22:04,319
deciding what this signal is how to

3448
02:22:04,319 --> 02:22:05,760
analyze it how to extract it we need to

3449
02:22:05,760 --> 02:22:07,140
change our minds about that and change

3450
02:22:07,140 --> 02:22:08,580
it in real time across our Network in

3451
02:22:08,580 --> 02:22:10,399
real time

3452
02:22:10,399 --> 02:22:14,100
so uh so yes Shannon Wyrick I've been in

3453
02:22:14,100 --> 02:22:15,660
the industry for quite some time I've

3454
02:22:15,660 --> 02:22:18,180
been at ns1 for about eight years and

3455
02:22:18,180 --> 02:22:19,319
for the last year and a half I've been

3456
02:22:19,319 --> 02:22:21,359
working on this open source project

3457
02:22:21,359 --> 02:22:23,220
called orb

3458
02:22:23,220 --> 02:22:24,960
so let's dive into

3459
02:22:24,960 --> 02:22:27,359
what that is so I'm going to put right

3460
02:22:27,359 --> 02:22:30,120
up front a sort of quick summary if

3461
02:22:30,120 --> 02:22:31,500
there's one takeaway about the project

3462
02:22:31,500 --> 02:22:34,020
uh please let it be this

3463
02:22:34,020 --> 02:22:36,180
so orb is an observability tool that's

3464
02:22:36,180 --> 02:22:38,100
been just designed for distributed Edge

3465
02:22:38,100 --> 02:22:40,380
networks it uses this small data

3466
02:22:40,380 --> 02:22:42,359
Paradigm that I've talked about and it

3467
02:22:42,359 --> 02:22:43,920
combines it with this idea of dynamic

3468
02:22:43,920 --> 02:22:45,960
policy orchestration

3469
02:22:45,960 --> 02:22:48,120
and the goal is to collect insights

3470
02:22:48,120 --> 02:22:50,340
across the data that's flowing through a

3471
02:22:50,340 --> 02:22:51,780
distributed Edge

3472
02:22:51,780 --> 02:22:53,600
it's been designed to work with modern

3473
02:22:53,600 --> 02:22:56,640
observability stacks and it is free and

3474
02:22:56,640 --> 02:23:00,080
open source backed by ns1

3475
02:23:01,020 --> 02:23:03,840
so here's a grafana dashboard of some of

3476
02:23:03,840 --> 02:23:07,620
the data that orb can collect and this

3477
02:23:07,620 --> 02:23:09,180
probably looks familiar to you you

3478
02:23:09,180 --> 02:23:10,560
probably have systems that that show

3479
02:23:10,560 --> 02:23:12,720
this type of information and so the

3480
02:23:12,720 --> 02:23:14,939
difference is going to be that this data

3481
02:23:14,939 --> 02:23:17,700
was analyzed at the edge and we

3482
02:23:17,700 --> 02:23:19,620
collected all these insights

3483
02:23:19,620 --> 02:23:22,319
in real time and it does this with deep

3484
02:23:22,319 --> 02:23:24,600
streaming analysis again directly on the

3485
02:23:24,600 --> 02:23:25,640
edge

3486
02:23:25,640 --> 02:23:28,280
there are multiple handlers that can

3487
02:23:28,280 --> 02:23:31,020
deeply inspect the data it's doing this

3488
02:23:31,020 --> 02:23:34,080
across several different types of inputs

3489
02:23:34,080 --> 02:23:35,760
that we'll go through a bit but

3490
02:23:35,760 --> 02:23:37,939
currently it's focused around extracting

3491
02:23:37,939 --> 02:23:42,180
metrics for Network l2l3 DNS and also

3492
02:23:42,180 --> 02:23:43,620
flow

3493
02:23:43,620 --> 02:23:45,960
and the idea is that we want to collect

3494
02:23:45,960 --> 02:23:48,359
more interesting metrics here so in

3495
02:23:48,359 --> 02:23:49,920
particular we're able to do things like

3496
02:23:49,920 --> 02:23:53,160
top KW headers so we can get top IPS and

3497
02:23:53,160 --> 02:23:55,859
Geo and q names and so forth again

3498
02:23:55,859 --> 02:23:57,780
directly at the edge we can do

3499
02:23:57,780 --> 02:24:00,180
cardinality we can do percentiles and

3500
02:24:00,180 --> 02:24:03,420
rates and and timings and all all sorts

3501
02:24:03,420 --> 02:24:05,819
of useful information again that we need

3502
02:24:05,819 --> 02:24:09,420
to to run our Networks

3503
02:24:09,420 --> 02:24:10,620
foreign

3504
02:24:10,620 --> 02:24:13,260
okay so orb really has two parts to it

3505
02:24:13,260 --> 02:24:15,000
there's the control plane side of things

3506
02:24:15,000 --> 02:24:17,340
and then there's the edge analyzer so

3507
02:24:17,340 --> 02:24:18,780
I'll go through both

3508
02:24:18,780 --> 02:24:21,600
this is the control uh tower for the

3509
02:24:21,600 --> 02:24:23,819
edge we call it so this is the

3510
02:24:23,819 --> 02:24:26,580
um this is the part of orb that uh

3511
02:24:26,580 --> 02:24:29,399
offers several different services for

3512
02:24:29,399 --> 02:24:32,280
controlling the obser observability

3513
02:24:32,280 --> 02:24:36,600
so uh of course it includes a rest API

3514
02:24:36,600 --> 02:24:38,580
so it's all API driven it's meant to be

3515
02:24:38,580 --> 02:24:40,740
it's meant to be automated against we do

3516
02:24:40,740 --> 02:24:42,840
include a user interface so there's a

3517
02:24:42,840 --> 02:24:44,520
there's a portal

3518
02:24:44,520 --> 02:24:45,720
and then there's the different services

3519
02:24:45,720 --> 02:24:48,000
that make it work right so the first

3520
02:24:48,000 --> 02:24:49,800
part is Fleet Management and this is

3521
02:24:49,800 --> 02:24:51,899
because since it's an edge service we

3522
02:24:51,899 --> 02:24:54,060
have a lot of different or agents that

3523
02:24:54,060 --> 02:24:56,340
are uh distributed across the network

3524
02:24:56,340 --> 02:24:57,720
that are doing the analyzing and so you

3525
02:24:57,720 --> 02:24:58,920
need a way to

3526
02:24:58,920 --> 02:25:00,720
um to manage them right you need them to

3527
02:25:00,720 --> 02:25:02,580
connect into the control plane we need

3528
02:25:02,580 --> 02:25:04,080
to organize them and tag them and so

3529
02:25:04,080 --> 02:25:04,920
forth

3530
02:25:04,920 --> 02:25:07,680
so that's the Fleet Management System

3531
02:25:07,680 --> 02:25:10,439
and then the dynamic piece being able to

3532
02:25:10,439 --> 02:25:12,000
tell it in real time what we'd like to

3533
02:25:12,000 --> 02:25:14,100
analyze that's the policy system and so

3534
02:25:14,100 --> 02:25:15,899
we can think of these as recipes for

3535
02:25:15,899 --> 02:25:18,300
what to analyze

3536
02:25:18,300 --> 02:25:21,060
and which agents should be analyzing as

3537
02:25:21,060 --> 02:25:23,220
well so part of it is that we don't have

3538
02:25:23,220 --> 02:25:25,380
just a a simple way to send to

3539
02:25:25,380 --> 02:25:26,819
everywhere we can split them up into

3540
02:25:26,819 --> 02:25:28,380
groups and and

3541
02:25:28,380 --> 02:25:30,600
um and decide exactly which agents are

3542
02:25:30,600 --> 02:25:33,540
analyzing uh which data

3543
02:25:33,540 --> 02:25:35,700
and also built into the system is a way

3544
02:25:35,700 --> 02:25:38,160
to collect the results of it and get it

3545
02:25:38,160 --> 02:25:40,500
into a Time series database or some

3546
02:25:40,500 --> 02:25:41,939
other kind of database so that you can

3547
02:25:41,939 --> 02:25:44,819
have your Central View as well so call

3548
02:25:44,819 --> 02:25:48,439
that data collection and syncing

3549
02:25:50,580 --> 02:25:53,640
here's a architecture overview that

3550
02:25:53,640 --> 02:25:56,040
shows how the system works and so the

3551
02:25:56,040 --> 02:25:57,420
control plane piece that I was just

3552
02:25:57,420 --> 02:25:59,340
going through is the sort of big cloud

3553
02:25:59,340 --> 02:26:00,720
in the middle

3554
02:26:00,720 --> 02:26:03,540
so this is a microservice architecture

3555
02:26:03,540 --> 02:26:05,640
uh setup each of the services that I

3556
02:26:05,640 --> 02:26:06,899
mentioned in the last slide are

3557
02:26:06,899 --> 02:26:09,720
contained within there it runs on

3558
02:26:09,720 --> 02:26:11,280
kubernetes this is something that you

3559
02:26:11,280 --> 02:26:12,600
can sell folks you can deploy and run

3560
02:26:12,600 --> 02:26:15,479
yourself we do also offer a sash version

3561
02:26:15,479 --> 02:26:17,819
of this at orb.live which you can check

3562
02:26:17,819 --> 02:26:19,979
out anytime

3563
02:26:19,979 --> 02:26:21,420
and so that's the control plane piece

3564
02:26:21,420 --> 02:26:22,979
that has the API that's how you could

3565
02:26:22,979 --> 02:26:24,120
automate against it that's where the

3566
02:26:24,120 --> 02:26:26,580
portal lives and then along the top row

3567
02:26:26,580 --> 02:26:29,460
we see the edge analyzers right and the

3568
02:26:29,460 --> 02:26:31,260
idea is that these get deployed into

3569
02:26:31,260 --> 02:26:34,920
hybrid typology it might be Cloud it

3570
02:26:34,920 --> 02:26:37,979
might be your own infrastructure

3571
02:26:37,979 --> 02:26:39,479
um it might be paired with DNS servers

3572
02:26:39,479 --> 02:26:41,280
that you have and we're able to analyze

3573
02:26:41,280 --> 02:26:43,680
different types of input streams and

3574
02:26:43,680 --> 02:26:44,939
collect the metrics according to the

3575
02:26:44,939 --> 02:26:47,280
policies that have been sent to it back

3576
02:26:47,280 --> 02:26:49,020
into the system and then sync them out

3577
02:26:49,020 --> 02:26:50,580
into

3578
02:26:50,580 --> 02:26:53,340
databases right and so a key point of

3579
02:26:53,340 --> 02:26:54,899
this right now is that orb does not

3580
02:26:54,899 --> 02:26:57,000
include a database you do plug this into

3581
02:26:57,000 --> 02:27:00,600
your existing tools for for

3582
02:27:00,600 --> 02:27:02,819
observability for time series databases

3583
02:27:02,819 --> 02:27:04,500
in particular right now we're focused on

3584
02:27:04,500 --> 02:27:06,600
Prometheus compatible that's what's

3585
02:27:06,600 --> 02:27:07,979
built in right now but we're switching

3586
02:27:07,979 --> 02:27:10,620
our Telemetry system to use open

3587
02:27:10,620 --> 02:27:13,140
Telemetry which is a standard that will

3588
02:27:13,140 --> 02:27:16,620
support many different types of syncs

3589
02:27:16,620 --> 02:27:18,540
and then you visualize an action on the

3590
02:27:18,540 --> 02:27:20,700
data using again your observability

3591
02:27:20,700 --> 02:27:23,120
stack

3592
02:27:25,200 --> 02:27:26,939
so I'm not going to go through all these

3593
02:27:26,939 --> 02:27:29,040
but just to give a quick sense of what

3594
02:27:29,040 --> 02:27:31,740
the portal looks like uh and again if

3595
02:27:31,740 --> 02:27:33,300
you go to orb.live you can log in and

3596
02:27:33,300 --> 02:27:34,680
see all this it's a very quick sign up

3597
02:27:34,680 --> 02:27:36,240
process no credit card or anything like

3598
02:27:36,240 --> 02:27:38,040
that it's just just this open source

3599
02:27:38,040 --> 02:27:40,080
system running here

3600
02:27:40,080 --> 02:27:41,580
part of it is the Fleet Management this

3601
02:27:41,580 --> 02:27:43,080
is where you organize the agents that

3602
02:27:43,080 --> 02:27:44,939
you've connected into your system we do

3603
02:27:44,939 --> 02:27:46,680
have a way to tag them and organize them

3604
02:27:46,680 --> 02:27:49,200
you're able to understand which of your

3605
02:27:49,200 --> 02:27:51,000
agents are online whether they're

3606
02:27:51,000 --> 02:27:52,200
heartbeating and what they're running

3607
02:27:52,200 --> 02:27:55,140
and so forth so that's all built in

3608
02:27:55,140 --> 02:27:56,880
then we have the policy management side

3609
02:27:56,880 --> 02:27:59,100
of it so this is the list of again the

3610
02:27:59,100 --> 02:28:01,080
types of column recipes for what we're

3611
02:28:01,080 --> 02:28:03,240
interested in observing you can organize

3612
02:28:03,240 --> 02:28:05,479
those

3613
02:28:06,300 --> 02:28:07,859
you connect in where you want to send

3614
02:28:07,859 --> 02:28:10,380
the data so this um this is the sort of

3615
02:28:10,380 --> 02:28:13,560
pipelining aspect of it and it uh uh is

3616
02:28:13,560 --> 02:28:16,260
able to form fairly complex pipelines so

3617
02:28:16,260 --> 02:28:18,180
you can decide for policy exactly where

3618
02:28:18,180 --> 02:28:19,859
you'd like to send you can send to

3619
02:28:19,859 --> 02:28:21,120
different databases you can send to

3620
02:28:21,120 --> 02:28:24,380
multiple multiple databases

3621
02:28:26,100 --> 02:28:28,439
and the last piece is this sort of

3622
02:28:28,439 --> 02:28:30,600
configuration management aspect right

3623
02:28:30,600 --> 02:28:33,720
again we have a system for deciding

3624
02:28:33,720 --> 02:28:35,640
which policies go out to which groups of

3625
02:28:35,640 --> 02:28:37,080
Agents there's an agent grouping system

3626
02:28:37,080 --> 02:28:39,540
it does use a simple tagging system so

3627
02:28:39,540 --> 02:28:43,680
we can for example tap uh tag by pop

3628
02:28:43,680 --> 02:28:45,540
location right so geographic location I

3629
02:28:45,540 --> 02:28:47,520
can send policies to

3630
02:28:47,520 --> 02:28:50,899
um to certain pops for example

3631
02:28:53,100 --> 02:28:54,840
and then finally as we said get them

3632
02:28:54,840 --> 02:28:57,420
into the sinks for dashboarding and

3633
02:28:57,420 --> 02:28:59,899
learning

3634
02:29:00,780 --> 02:29:02,580
okay so moving to the edge side of

3635
02:29:02,580 --> 02:29:04,319
things so what does the edge agent look

3636
02:29:04,319 --> 02:29:05,640
like how does it do its streaming

3637
02:29:05,640 --> 02:29:07,200
analysis so this is where you would

3638
02:29:07,200 --> 02:29:09,960
install this agent either directly on

3639
02:29:09,960 --> 02:29:12,180
nodes that are serving or nearby and and

3640
02:29:12,180 --> 02:29:15,080
stream data to it

3641
02:29:16,140 --> 02:29:19,020
so its job is to tap into these data

3642
02:29:19,020 --> 02:29:20,340
streams and it's able to do that

3643
02:29:20,340 --> 02:29:22,680
concurrently for several different data

3644
02:29:22,680 --> 02:29:24,060
streams according to the policies that

3645
02:29:24,060 --> 02:29:26,220
have been sent to it it uses fast

3646
02:29:26,220 --> 02:29:28,080
streaming algorithms to do its analysis

3647
02:29:28,080 --> 02:29:31,260
it uses data sketch algorithms to to

3648
02:29:31,260 --> 02:29:32,640
collect the metrics that I mentioned

3649
02:29:32,640 --> 02:29:33,540
before

3650
02:29:33,540 --> 02:29:35,399
and its job is to efficiently summarize

3651
02:29:35,399 --> 02:29:37,380
and gather these insights right extract

3652
02:29:37,380 --> 02:29:39,359
the signal so to speak and generate

3653
02:29:39,359 --> 02:29:40,740
these metrics

3654
02:29:40,740 --> 02:29:42,780
and so it's the thing that gets

3655
02:29:42,780 --> 02:29:44,280
programmed in real time if you bring up

3656
02:29:44,280 --> 02:29:46,200
an agent from scratch it's not doing

3657
02:29:46,200 --> 02:29:47,580
anything because you haven't sent it a

3658
02:29:47,580 --> 02:29:49,260
policy yet so that's what the orb

3659
02:29:49,260 --> 02:29:51,840
control plane does you decide uh and

3660
02:29:51,840 --> 02:29:54,660
tell it what to do in real time

3661
02:29:54,660 --> 02:29:57,000
um the agent has been built to be as

3662
02:29:57,000 --> 02:29:58,800
efficient as possible it's able to both

3663
02:29:58,800 --> 02:30:01,319
scale up and scale down we've scaled it

3664
02:30:01,319 --> 02:30:03,240
down as far as running on a Raspberry Pi

3665
02:30:03,240 --> 02:30:06,140
for example and it's able to scale up by

3666
02:30:06,140 --> 02:30:08,460
taking advantage of multiple cores as

3667
02:30:08,460 --> 02:30:10,800
well as just sort of scaling

3668
02:30:10,800 --> 02:30:12,420
horizontally with multiple processes as

3669
02:30:12,420 --> 02:30:14,399
well because we can control the fleet

3670
02:30:14,399 --> 02:30:17,240
from the control plane

3671
02:30:18,960 --> 02:30:20,640
so what types of things are we tapping

3672
02:30:20,640 --> 02:30:23,939
into so uh it's inside of ns1 we've

3673
02:30:23,939 --> 02:30:25,380
mostly used packet capture to date

3674
02:30:25,380 --> 02:30:26,760
you're able to program it with BPF

3675
02:30:26,760 --> 02:30:28,620
filters so this is sort of a you know a

3676
02:30:28,620 --> 02:30:30,780
TCP dump style

3677
02:30:30,780 --> 02:30:31,620
um

3678
02:30:31,620 --> 02:30:34,740
it also uh now works with DNS tap so

3679
02:30:34,740 --> 02:30:36,899
both via socket or streaming to it via

3680
02:30:36,899 --> 02:30:40,100
TCP and it uses the same analyzer engine

3681
02:30:40,100 --> 02:30:41,819
regardless of whether it's packet

3682
02:30:41,819 --> 02:30:43,920
capture or DNS tap we've also started

3683
02:30:43,920 --> 02:30:46,920
processing flow data as well and there's

3684
02:30:46,920 --> 02:30:48,060
a series of metrics that can come

3685
02:30:48,060 --> 02:30:50,399
directly from flow data

3686
02:30:50,399 --> 02:30:52,920
and this is an expandable system so uh

3687
02:30:52,920 --> 02:30:54,899
it's it's a modular system that we have

3688
02:30:54,899 --> 02:30:56,580
uh plans to support many different types

3689
02:30:56,580 --> 02:30:59,960
of inputs in the future as well

3690
02:31:02,640 --> 02:31:04,979
so the types of analysis that it's doing

3691
02:31:04,979 --> 02:31:06,780
uh as we saw a little earlier it's

3692
02:31:06,780 --> 02:31:10,080
focused on L2 and L3 Network metrics DNS

3693
02:31:10,080 --> 02:31:13,080
we do have a DHCP analyzer and we have

3694
02:31:13,080 --> 02:31:16,439
the flow analyzer as well it's able to

3695
02:31:16,439 --> 02:31:18,840
do deep packet inspection essentially so

3696
02:31:18,840 --> 02:31:21,540
it could support any protocol that it's

3697
02:31:21,540 --> 02:31:24,359
able to dissect and analyze and the list

3698
02:31:24,359 --> 02:31:26,399
of metrics is is always growing right

3699
02:31:26,399 --> 02:31:28,200
this is a key area that we're expecting

3700
02:31:28,200 --> 02:31:29,580
that contributors could come in and say

3701
02:31:29,580 --> 02:31:30,859
you know they're interested in

3702
02:31:30,859 --> 02:31:32,760
extracting different metrics and we can

3703
02:31:32,760 --> 02:31:36,060
get that into the modules themselves and

3704
02:31:36,060 --> 02:31:37,680
the policies themselves are also very

3705
02:31:37,680 --> 02:31:40,080
granular so you do not have to turn on

3706
02:31:40,080 --> 02:31:43,920
every uh analyzer for every policy you

3707
02:31:43,920 --> 02:31:47,340
can pick and choose exactly which types

3708
02:31:47,340 --> 02:31:48,720
of metrics you'd like to extract when

3709
02:31:48,720 --> 02:31:50,280
you create your policies

3710
02:31:50,280 --> 02:31:51,960
and again this is a modular system and

3711
02:31:51,960 --> 02:31:54,120
so the list of analyzers and so forth

3712
02:31:54,120 --> 02:31:57,319
will will grow in the future

3713
02:31:59,399 --> 02:32:03,120
so just to give an idea of the view from

3714
02:32:03,120 --> 02:32:05,880
the orb agent and how it's processing

3715
02:32:05,880 --> 02:32:07,500
the streams in real time

3716
02:32:07,500 --> 02:32:09,720
this is based on a tool called pack

3717
02:32:09,720 --> 02:32:13,140
advisor which is a uh I gave a talk on

3718
02:32:13,140 --> 02:32:16,020
an orc 33 I think and so I went into

3719
02:32:16,020 --> 02:32:18,359
detail there I won't go into too much

3720
02:32:18,359 --> 02:32:22,080
detail here but the idea is that based

3721
02:32:22,080 --> 02:32:23,399
on the policies that have come in in

3722
02:32:23,399 --> 02:32:24,720
this example there are three different

3723
02:32:24,720 --> 02:32:25,979
policies running

3724
02:32:25,979 --> 02:32:28,740
uh it's focused on two different Taps

3725
02:32:28,740 --> 02:32:31,260
one is a packet capture tap with some

3726
02:32:31,260 --> 02:32:34,260
filters on it one is a flow tap again

3727
02:32:34,260 --> 02:32:36,600
with some filters on it and so each of

3728
02:32:36,600 --> 02:32:38,700
those data streams is filtered

3729
02:32:38,700 --> 02:32:41,040
at the tap level and then you have the

3730
02:32:41,040 --> 02:32:43,020
analyzers based on the policies have

3731
02:32:43,020 --> 02:32:45,180
been told to create metrics for

3732
02:32:45,180 --> 02:32:47,340
different dimensions of data right the

3733
02:32:47,340 --> 02:32:49,859
first policy is looking at only DNS

3734
02:32:49,859 --> 02:32:52,560
traffic that has an rcode of NX domain

3735
02:32:52,560 --> 02:32:54,240
the second one is focused on a

3736
02:32:54,240 --> 02:32:56,460
particular queue name and the third one

3737
02:32:56,460 --> 02:32:58,800
is is looking at flow data and so all of

3738
02:32:58,800 --> 02:33:00,600
these are running concurrently in the

3739
02:33:00,600 --> 02:33:02,399
pack advisor in the orb agent and

3740
02:33:02,399 --> 02:33:03,600
they're each generating their own time

3741
02:33:03,600 --> 02:33:06,000
series metrics and then we're collecting

3742
02:33:06,000 --> 02:33:07,920
that back out through the orb agent back

3743
02:33:07,920 --> 02:33:09,720
through the orb control plane and

3744
02:33:09,720 --> 02:33:12,000
syncing it into the time series

3745
02:33:12,000 --> 02:33:15,899
databases that you've told it to go to

3746
02:33:15,899 --> 02:33:17,880
and again it's really important that

3747
02:33:17,880 --> 02:33:19,680
these policies can come and go at any

3748
02:33:19,680 --> 02:33:21,600
time right this is a this is a real-time

3749
02:33:21,600 --> 02:33:23,280
system

3750
02:33:23,280 --> 02:33:25,319
a further note is that

3751
02:33:25,319 --> 02:33:27,660
um currently it is focused around uh

3752
02:33:27,660 --> 02:33:29,340
operators essentially creating policies

3753
02:33:29,340 --> 02:33:31,620
and sending them out but the goal is

3754
02:33:31,620 --> 02:33:34,200
that uh we start adding more automation

3755
02:33:34,200 --> 02:33:35,520
we want the ability for the system

3756
02:33:35,520 --> 02:33:38,399
itself to decide when for example an

3757
02:33:38,399 --> 02:33:40,740
anomaly has occurred and itch itself

3758
02:33:40,740 --> 02:33:42,540
should fire up a new policy and start

3759
02:33:42,540 --> 02:33:46,160
recording interesting metrics for us

3760
02:33:47,880 --> 02:33:49,680
so real quickly this is another view of

3761
02:33:49,680 --> 02:33:51,960
it so if uh you know particular DNS use

3762
02:33:51,960 --> 02:33:54,479
case analysis we have raw DNS traffic

3763
02:33:54,479 --> 02:33:56,939
streaming into this this orb agent this

3764
02:33:56,939 --> 02:33:58,680
packet visor agent

3765
02:33:58,680 --> 02:34:00,060
um and you know it's coming in and sort

3766
02:34:00,060 --> 02:34:02,520
of waves and it's important to note that

3767
02:34:02,520 --> 02:34:05,340
the output of this is always a steady

3768
02:34:05,340 --> 02:34:07,740
summary right so

3769
02:34:07,740 --> 02:34:10,800
um even if you know you have a small

3770
02:34:10,800 --> 02:34:14,040
amount of traffic it's generating uh the

3771
02:34:14,040 --> 02:34:15,660
the summary of interesting information

3772
02:34:15,660 --> 02:34:17,939
that you told it to top queries and so

3773
02:34:17,939 --> 02:34:20,160
forth uh and by default in one minute

3774
02:34:20,160 --> 02:34:23,700
buckets but even in the case of a

3775
02:34:23,700 --> 02:34:25,920
monster amount of traffic it's not

3776
02:34:25,920 --> 02:34:28,859
generating any more data is generating

3777
02:34:28,859 --> 02:34:30,000
the same amount of data because it's

3778
02:34:30,000 --> 02:34:32,819
still summarizing uh the the information

3779
02:34:32,819 --> 02:34:35,399
that it's seeing and

3780
02:34:35,399 --> 02:34:38,580
um and if it if it does do too much work

3781
02:34:38,580 --> 02:34:40,620
it tries to degrade gracefully and still

3782
02:34:40,620 --> 02:34:43,160
keep on working

3783
02:34:44,479 --> 02:34:47,819
okay so project status so the the core

3784
02:34:47,819 --> 02:34:49,260
technology the pack advisor technology

3785
02:34:49,260 --> 02:34:51,300
has actually been in use inside of ns1

3786
02:34:51,300 --> 02:34:53,340
operationally for many years

3787
02:34:53,340 --> 02:34:55,020
um so it's it's well considered

3788
02:34:55,020 --> 02:34:57,240
production the orb technology the orb

3789
02:34:57,240 --> 02:34:58,979
control plane is a bit newer uh but

3790
02:34:58,979 --> 02:35:01,080
we're already starting to power DNS

3791
02:35:01,080 --> 02:35:05,040
products uh inside of ns1 with it

3792
02:35:05,040 --> 02:35:06,479
um it is open source all of our work is

3793
02:35:06,479 --> 02:35:08,640
done on on GitHub so you're able to

3794
02:35:08,640 --> 02:35:10,140
track that and use our history tracker

3795
02:35:10,140 --> 02:35:12,600
and so forth and we're looking for those

3796
02:35:12,600 --> 02:35:14,160
in the industry to

3797
02:35:14,160 --> 02:35:15,540
um who have interesting use cases where

3798
02:35:15,540 --> 02:35:18,120
this technology and the strategy uh is

3799
02:35:18,120 --> 02:35:19,140
interesting and we're starting to

3800
02:35:19,140 --> 02:35:21,180
partner with them and uh and help

3801
02:35:21,180 --> 02:35:23,040
develop out the product

3802
02:35:23,040 --> 02:35:24,660
and if that fits one of your use cases

3803
02:35:24,660 --> 02:35:27,740
certainly we'd like to talk with you

3804
02:35:28,859 --> 02:35:30,060
um there's a lot we're looking at doing

3805
02:35:30,060 --> 02:35:31,680
of course we're we're looking to get it

3806
02:35:31,680 --> 02:35:33,300
out into the community and get feedback

3807
02:35:33,300 --> 02:35:35,040
we've got a whole list of input

3808
02:35:35,040 --> 02:35:37,020
analyzers and streams we'd like to do

3809
02:35:37,020 --> 02:35:39,960
machine learning uh is a big part of it

3810
02:35:39,960 --> 02:35:41,359
we definitely want things to be

3811
02:35:41,359 --> 02:35:43,700
automated in the future

3812
02:35:43,700 --> 02:35:44,100
[Music]

3813
02:35:44,100 --> 02:35:45,060
um

3814
02:35:45,060 --> 02:35:47,220
policies at the uh sorry actions at the

3815
02:35:47,220 --> 02:35:49,020
edge is also important to us using that

3816
02:35:49,020 --> 02:35:51,720
local information at the node so that we

3817
02:35:51,720 --> 02:35:54,300
can uh we can action on it immediately

3818
02:35:54,300 --> 02:35:56,100
in real time is really interesting and

3819
02:35:56,100 --> 02:35:57,780
of course there's there's probably other

3820
02:35:57,780 --> 02:36:00,560
ideas as well

3821
02:36:02,939 --> 02:36:06,540
okay so just to wind up

3822
02:36:06,540 --> 02:36:09,000
again uh this is an observability tool

3823
02:36:09,000 --> 02:36:10,979
it's been designed for distributed Edge

3824
02:36:10,979 --> 02:36:13,560
networks it's using this small data

3825
02:36:13,560 --> 02:36:15,540
Paradigm combining it with Dynamic

3826
02:36:15,540 --> 02:36:17,760
policy orchestration

3827
02:36:17,760 --> 02:36:20,160
collecting insights from the data flow

3828
02:36:20,160 --> 02:36:21,780
on our distributed edges and integrating

3829
02:36:21,780 --> 02:36:24,359
it with modern observability stacks and

3830
02:36:24,359 --> 02:36:27,439
it's all free and open source

3831
02:36:27,899 --> 02:36:29,580
I've got some links here we do have a

3832
02:36:29,580 --> 02:36:31,380
community website where there's more

3833
02:36:31,380 --> 02:36:34,080
information and some link to for example

3834
02:36:34,080 --> 02:36:37,140
our slack and some other things we do

3835
02:36:37,140 --> 02:36:38,700
have the SAS version that's out there

3836
02:36:38,700 --> 02:36:41,100
again this is really just the hosted

3837
02:36:41,100 --> 02:36:42,620
version of what you can do

3838
02:36:42,620 --> 02:36:45,840
self-hosted but just makes it easier to

3839
02:36:45,840 --> 02:36:48,300
to try out and and POC and certainly

3840
02:36:48,300 --> 02:36:49,620
we'd love your feedback if you do try

3841
02:36:49,620 --> 02:36:50,520
that

3842
02:36:50,520 --> 02:36:52,620
uh please start our project on GitHub if

3843
02:36:52,620 --> 02:36:54,600
uh if this is interesting to you and

3844
02:36:54,600 --> 02:36:57,000
again contact us if uh if the project

3845
02:36:57,000 --> 02:36:59,520
looked interesting

3846
02:36:59,520 --> 02:37:01,920
that's about all I have so uh thank you

3847
02:37:01,920 --> 02:37:05,600
very much and I I'll take some questions

3848
02:37:08,340 --> 02:37:10,819
okay

3849
02:37:17,939 --> 02:37:19,380
okay so the question was what's the

3850
02:37:19,380 --> 02:37:21,300
maximum number of QPS we push through

3851
02:37:21,300 --> 02:37:25,500
one node of the orb agent so the the orb

3852
02:37:25,500 --> 02:37:28,500
agent uh I've tried to

3853
02:37:28,500 --> 02:37:31,680
set a standard of processing to some

3854
02:37:31,680 --> 02:37:34,260
degree of depth uh about a hundred

3855
02:37:34,260 --> 02:37:36,899
thousand packets per second per CPU

3856
02:37:36,899 --> 02:37:39,660
and now it can do uh it can use multiple

3857
02:37:39,660 --> 02:37:42,540
CPUs and so theoretically it could do

3858
02:37:42,540 --> 02:37:43,920
that times the number of cores you have

3859
02:37:43,920 --> 02:37:45,960
on the system

3860
02:37:45,960 --> 02:37:47,520
um yeah that's the standard I'm trying

3861
02:37:47,520 --> 02:37:48,420
to go for

3862
02:37:48,420 --> 02:37:50,600
sure

3863
02:37:51,060 --> 02:37:54,899
okay but there's a sec wants to know

3864
02:37:54,899 --> 02:37:57,060
what takes priority if a node is

3865
02:37:57,060 --> 02:38:00,840
overloaded traffic or monitoring

3866
02:38:00,840 --> 02:38:03,240
what takes priority if it's overloaded

3867
02:38:03,240 --> 02:38:06,600
traffic or monitoring so uh

3868
02:38:06,600 --> 02:38:09,120
it's been designed to have a zero blast

3869
02:38:09,120 --> 02:38:11,460
radius right so it should never affect

3870
02:38:11,460 --> 02:38:13,620
the serving of traffic if that's what

3871
02:38:13,620 --> 02:38:15,899
the question means so

3872
02:38:15,899 --> 02:38:18,240
um it's meant to passively tap into the

3873
02:38:18,240 --> 02:38:21,899
data sources uh so yeah it should never

3874
02:38:21,899 --> 02:38:23,880
affect actual serving

3875
02:38:23,880 --> 02:38:27,000
of traffic of course if you if you do

3876
02:38:27,000 --> 02:38:28,979
put it on a machine that's competing

3877
02:38:28,979 --> 02:38:31,819
with Resources with uh

3878
02:38:31,819 --> 02:38:34,140
the you know something that's serving

3879
02:38:34,140 --> 02:38:35,580
the data you do have to be careful about

3880
02:38:35,580 --> 02:38:37,920
that or will not will not help you with

3881
02:38:37,920 --> 02:38:39,840
that the way we've done it is to limit

3882
02:38:39,840 --> 02:38:41,819
it to certain CPUs while we limit

3883
02:38:41,819 --> 02:38:43,740
serving to other CPUs if we do run it on

3884
02:38:43,740 --> 02:38:46,200
the same node

3885
02:38:46,200 --> 02:38:47,939
thanks again to our sponsors

3886
02:38:47,939 --> 02:38:51,060
connectivity and networking um

3887
02:38:51,060 --> 02:38:54,300
from Comcast and verisign as our 2022

3888
02:38:54,300 --> 02:38:55,439
Workshop

3889
02:38:55,439 --> 02:38:57,840
sponsors

3890
02:38:57,840 --> 02:39:00,180
and I guess that's it this will be the

3891
02:39:00,180 --> 02:39:02,520
last break and then we'll come back for

3892
02:39:02,520 --> 02:39:04,680
the last session of the day

3893
02:39:04,680 --> 02:39:05,490
all right thank you everybody

3894
02:39:05,490 --> 02:39:12,789
[Applause]

3895
02:39:12,960 --> 02:39:15,180
well welcome back everybody from the

3896
02:39:15,180 --> 02:39:17,460
final break of the day for the final

3897
02:39:17,460 --> 02:39:19,319
session of the day

3898
02:39:19,319 --> 02:39:21,660
thanks once more to Comcast as the

3899
02:39:21,660 --> 02:39:23,399
workshop sponsor and the connectivity

3900
02:39:23,399 --> 02:39:26,160
sponsor and to verisign as the 2022

3901
02:39:26,160 --> 02:39:29,000
workshops Patron

3902
02:39:29,000 --> 02:39:31,680
we have two speakers for the price of

3903
02:39:31,680 --> 02:39:34,020
one today we have Schumann Huck and

3904
02:39:34,020 --> 02:39:35,700
Victor Duchovny

3905
02:39:35,700 --> 02:39:38,760
talking about Dane for the latest

3906
02:39:38,760 --> 02:39:41,580
installment of the DNS talk series

3907
02:39:41,580 --> 02:39:44,580
so good afternoon everyone I'm Schumann

3908
02:39:44,580 --> 02:39:45,420
Huck

3909
02:39:45,420 --> 02:39:47,340
um and as Suzanne mentioned I was

3910
02:39:47,340 --> 02:39:49,200
invited by the program committee to do

3911
02:39:49,200 --> 02:39:52,380
give a talk on Dane as part of the new

3912
02:39:52,380 --> 02:39:56,040
DNS talk series and as you figured out I

3913
02:39:56,040 --> 02:39:58,920
also recruited my collaborator Victor

3914
02:39:58,920 --> 02:40:01,260
Duchovny to join me to help me

3915
02:40:01,260 --> 02:40:03,840
do this talk and specifically to speak

3916
02:40:03,840 --> 02:40:06,780
about the Dane survey project he's been

3917
02:40:06,780 --> 02:40:09,859
running for a number of years

3918
02:40:11,280 --> 02:40:12,899
um okay so what are we actually talking

3919
02:40:12,899 --> 02:40:16,260
about Dane is an acronym for dns-based

3920
02:40:16,260 --> 02:40:19,620
authentication of named entities and

3921
02:40:19,620 --> 02:40:21,359
what it basically means

3922
02:40:21,359 --> 02:40:25,140
is employing DNS SEC that is signed DNS

3923
02:40:25,140 --> 02:40:28,020
records to securely associate

3924
02:40:28,020 --> 02:40:31,260
cryptographic keys or certificates with

3925
02:40:31,260 --> 02:40:33,540
domain names for applications

3926
02:40:33,540 --> 02:40:36,479
applications can then use the DNS to

3927
02:40:36,479 --> 02:40:39,660
securely obtain and verify those keys

3928
02:40:39,660 --> 02:40:41,040
and use them in application security

3929
02:40:41,040 --> 02:40:43,880
protocols

3930
02:40:44,399 --> 02:40:46,680
all right so what do we hope to achieve

3931
02:40:46,680 --> 02:40:49,260
with this new system well the main goal

3932
02:40:49,260 --> 02:40:52,200
is to securely associate domain names

3933
02:40:52,200 --> 02:40:55,979
with cryptographic credentials but using

3934
02:40:55,979 --> 02:40:58,640
a system that naturally supports

3935
02:40:58,640 --> 02:41:01,740
namespace constraints so the only domain

3936
02:41:01,740 --> 02:41:04,920
owners can issue these associations for

3937
02:41:04,920 --> 02:41:08,220
names that they control and nobody else

3938
02:41:08,220 --> 02:41:11,880
so this can provide at least in theory a

3939
02:41:11,880 --> 02:41:15,540
complete replacement for today's public

3940
02:41:15,540 --> 02:41:17,880
CA system that's a system of

3941
02:41:17,880 --> 02:41:19,740
certification authorities

3942
02:41:19,740 --> 02:41:22,800
or it could be used in a mode where it

3943
02:41:22,800 --> 02:41:24,960
applies constraints on the use of the

3944
02:41:24,960 --> 02:41:26,819
public CA system and I'll explain how it

3945
02:41:26,819 --> 02:41:28,560
does that a little bit later

3946
02:41:28,560 --> 02:41:30,540
there are additional benefits we can

3947
02:41:30,540 --> 02:41:33,060
enable applications to use

3948
02:41:33,060 --> 02:41:35,460
features and certificates that are not

3949
02:41:35,460 --> 02:41:38,460
well supported or not supported all by

3950
02:41:38,460 --> 02:41:40,140
the public CA system

3951
02:41:40,140 --> 02:41:43,620
and lastly we can enable the secure use

3952
02:41:43,620 --> 02:41:47,700
of authenticated raw public keys that is

3953
02:41:47,700 --> 02:41:50,420
public keys without needing the

3954
02:41:50,420 --> 02:41:54,740
certificate Machinery around them

3955
02:41:55,740 --> 02:41:58,439
um so by way of motivating the need for

3956
02:41:58,439 --> 02:42:00,180
Dane I wanted to spend a little bit of

3957
02:42:00,180 --> 02:42:02,100
time talking about the current Internet

3958
02:42:02,100 --> 02:42:05,280
pki that's the public key infrastructure

3959
02:42:05,280 --> 02:42:08,220
and its limitations so the situation we

3960
02:42:08,220 --> 02:42:10,380
have today is that a very large number

3961
02:42:10,380 --> 02:42:12,200
of application Services

3962
02:42:12,200 --> 02:42:16,140
authenticate server names with x509

3963
02:42:16,140 --> 02:42:19,380
certificates most commonly using the

3964
02:42:19,380 --> 02:42:21,720
underlying TLS layer and just to throw

3965
02:42:21,720 --> 02:42:24,240
out a few examples we have HTTP IMAP

3966
02:42:24,240 --> 02:42:27,899
SMTP sip xmpp there are many others and

3967
02:42:27,899 --> 02:42:30,240
these certificates are issued and signed

3968
02:42:30,240 --> 02:42:32,340
by the internet pki

3969
02:42:32,340 --> 02:42:35,280
which is composed of a set of globally

3970
02:42:35,280 --> 02:42:40,760
trusted public certification authorities

3971
02:42:41,700 --> 02:42:43,020
um

3972
02:42:43,020 --> 02:42:45,600
so the first and most glaring weakness

3973
02:42:45,600 --> 02:42:49,080
is that we need to trust a very large

3974
02:42:49,080 --> 02:42:50,880
number of CAS

3975
02:42:50,880 --> 02:42:53,340
and they are effectively unconstrained

3976
02:42:53,340 --> 02:42:56,220
in scope that means any of them can

3977
02:42:56,220 --> 02:42:58,680
issue certificates for any entity on the

3978
02:42:58,680 --> 02:43:00,660
internet

3979
02:43:00,660 --> 02:43:01,859
um

3980
02:43:01,859 --> 02:43:03,359
it doesn't matter if you have an

3981
02:43:03,359 --> 02:43:05,040
explicit business relationship with them

3982
02:43:05,040 --> 02:43:06,960
or not so our collective security

3983
02:43:06,960 --> 02:43:09,720
basically is equivalent to the weakest

3984
02:43:09,720 --> 02:43:10,920
one of them

3985
02:43:10,920 --> 02:43:13,020
so I don't think I need to tell this

3986
02:43:13,020 --> 02:43:15,240
audience but that's an absolutely

3987
02:43:15,240 --> 02:43:17,399
terrible characteristic for any security

3988
02:43:17,399 --> 02:43:19,680
system to have right so usually want the

3989
02:43:19,680 --> 02:43:21,960
complete opposite you want a system that

3990
02:43:21,960 --> 02:43:23,640
operates with the principle of least

3991
02:43:23,640 --> 02:43:25,620
privilege

3992
02:43:25,620 --> 02:43:28,620
um if you look at the root certificate

3993
02:43:28,620 --> 02:43:32,280
store on your operating system or a web

3994
02:43:32,280 --> 02:43:34,740
browser you'll probably see about 200 to

3995
02:43:34,740 --> 02:43:37,800
300 route Cas but the problem is it a

3996
02:43:37,800 --> 02:43:40,140
lot larger than that a lot of these root

3997
02:43:40,140 --> 02:43:42,600
Cas additionally

3998
02:43:42,600 --> 02:43:45,479
signs subseas under them typically for

3999
02:43:45,479 --> 02:43:47,760
Enterprise cas

4000
02:43:47,760 --> 02:43:49,680
um again typically with no name

4001
02:43:49,680 --> 02:43:51,479
namespace constraints so there's an

4002
02:43:51,479 --> 02:43:53,399
excellent paper it's a little bit dated

4003
02:43:53,399 --> 02:43:56,939
from 2013. the analysis of the https

4004
02:43:56,939 --> 02:43:59,840
certificate ecosystem which goes into

4005
02:43:59,840 --> 02:44:03,020
surveys the landscape and you can see

4006
02:44:03,020 --> 02:44:06,060
you know the extent of the problem and

4007
02:44:06,060 --> 02:44:07,859
just the sheer size of the attack

4008
02:44:07,859 --> 02:44:10,939
surface evolved

4009
02:44:11,580 --> 02:44:12,240
um

4010
02:44:12,240 --> 02:44:15,300
so the next issue also very important is

4011
02:44:15,300 --> 02:44:17,700
revocation and that's the process for

4012
02:44:17,700 --> 02:44:20,280
invalidating certificates or keys that

4013
02:44:20,280 --> 02:44:23,040
may have been compromised and this

4014
02:44:23,040 --> 02:44:24,899
worked very poorly in the internet pki

4015
02:44:24,899 --> 02:44:27,960
today certificates generally have quite

4016
02:44:27,960 --> 02:44:30,500
lengthy validity periods

4017
02:44:30,500 --> 02:44:33,420
certificate revocationalists of crls

4018
02:44:33,420 --> 02:44:35,700
these are lists of certificates that

4019
02:44:35,700 --> 02:44:37,200
have been compromised that the ca has

4020
02:44:37,200 --> 02:44:39,420
published they're kind of ungainly and

4021
02:44:39,420 --> 02:44:40,740
difficult to deal with in real time

4022
02:44:40,740 --> 02:44:43,740
there is a real-time mechanism to look

4023
02:44:43,740 --> 02:44:45,359
up the status of certificates this is

4024
02:44:45,359 --> 02:44:47,100
called ocsp

4025
02:44:47,100 --> 02:44:50,100
but that has a significant privacy

4026
02:44:50,100 --> 02:44:52,859
leakage problem so the ca that operates

4027
02:44:52,859 --> 02:44:56,220
an ocsp responder effectively is in a

4028
02:44:56,220 --> 02:44:57,300
position

4029
02:44:57,300 --> 02:45:00,479
to Monitor and track every site that you

4030
02:45:00,479 --> 02:45:02,280
visit so that's no good

4031
02:45:02,280 --> 02:45:05,040
there is a mechanism to deal with this

4032
02:45:05,040 --> 02:45:07,500
this is called stapled ocsp where the

4033
02:45:07,500 --> 02:45:10,140
statuses are stapled into the TLs

4034
02:45:10,140 --> 02:45:12,899
handshake this is not widely deployed

4035
02:45:12,899 --> 02:45:15,420
but it also requires surrounding

4036
02:45:15,420 --> 02:45:17,399
Machinery to mandate the use of the

4037
02:45:17,399 --> 02:45:19,620
stapling and that's very difficult to

4038
02:45:19,620 --> 02:45:20,600
deploy

4039
02:45:20,600 --> 02:45:23,479
incrementally and furthermore it doesn't

4040
02:45:23,479 --> 02:45:27,540
address use cases that don't involve the

4041
02:45:27,540 --> 02:45:30,380
TLs protocol

4042
02:45:30,740 --> 02:45:33,899
again there are functional deficiencies

4043
02:45:33,899 --> 02:45:36,899
that have security implications too so

4044
02:45:36,899 --> 02:45:39,479
most Cas today are only capable of

4045
02:45:39,479 --> 02:45:43,319
issuing certificates with the very basic

4046
02:45:43,319 --> 02:45:45,899
capability so if you need to use use

4047
02:45:45,899 --> 02:45:49,080
Advanced features like alternative name

4048
02:45:49,080 --> 02:45:52,560
forms or certificate extensions you're

4049
02:45:52,560 --> 02:45:55,200
basically out of luck and we really need

4050
02:45:55,200 --> 02:45:57,479
to be using these features because if

4051
02:45:57,479 --> 02:45:59,460
you think about it ideally we need to be

4052
02:45:59,460 --> 02:46:01,700
able to com

4053
02:46:01,700 --> 02:46:03,840
compartmentalize the security of

4054
02:46:03,840 --> 02:46:06,479
distinct application protocols that may

4055
02:46:06,479 --> 02:46:08,939
be located at the same domain name

4056
02:46:08,939 --> 02:46:11,760
uh technically it is possible to do that

4057
02:46:11,760 --> 02:46:14,700
if certificates use what are called

4058
02:46:14,700 --> 02:46:17,340
application specific identities like URI

4059
02:46:17,340 --> 02:46:20,040
or SRV name there are a few others but

4060
02:46:20,040 --> 02:46:23,520
today no public CA is able to support

4061
02:46:23,520 --> 02:46:26,520
any of his features

4062
02:46:26,520 --> 02:46:29,220
um all right so of course there's a

4063
02:46:29,220 --> 02:46:31,640
fundamental Reliance on the DNS as well

4064
02:46:31,640 --> 02:46:35,340
ultimately the internet pki relies on

4065
02:46:35,340 --> 02:46:37,319
domain names after all application

4066
02:46:37,319 --> 02:46:40,439
services are identified by domain names

4067
02:46:40,439 --> 02:46:43,260
today and those need to be thoroughly

4068
02:46:43,260 --> 02:46:46,020
secured and trusted and really the best

4069
02:46:46,020 --> 02:46:48,540
way we have to do that is by using

4070
02:46:48,540 --> 02:46:52,399
mechanisms like Diana's second day

4071
02:46:53,399 --> 02:46:55,380
um so these vulnerabilities that I've

4072
02:46:55,380 --> 02:46:57,240
outlined these are of course not

4073
02:46:57,240 --> 02:47:00,600
theoretical there's a long storied

4074
02:47:00,600 --> 02:47:03,120
history of security compromises that you

4075
02:47:03,120 --> 02:47:05,819
may know about many of some of them are

4076
02:47:05,819 --> 02:47:08,640
due to malicious actors but many of them

4077
02:47:08,640 --> 02:47:11,880
are also due to sheer incompetence or

4078
02:47:11,880 --> 02:47:13,680
negligence on the part of the ca so I'm

4079
02:47:13,680 --> 02:47:15,600
not going to go through the entire list

4080
02:47:15,600 --> 02:47:17,640
I'm going to show you here but I have

4081
02:47:17,640 --> 02:47:21,859
several Pages where I've uh put links to

4082
02:47:21,859 --> 02:47:24,899
ca compromises that have been visibly in

4083
02:47:24,899 --> 02:47:26,460
the news so we have

4084
02:47:26,460 --> 02:47:30,359
uh Komodo did you notar trustwave

4085
02:47:30,359 --> 02:47:33,300
Turk trust Helia sonera

4086
02:47:33,300 --> 02:47:37,380
Francis a n SSI Komodo CN Nick semantic

4087
02:47:37,380 --> 02:47:38,640
low sign

4088
02:47:38,640 --> 02:47:40,859
semantic again

4089
02:47:40,859 --> 02:47:44,040
digicert and the list goes on so

4090
02:47:44,040 --> 02:47:45,780
um if you're not familiar you can read

4091
02:47:45,780 --> 02:47:49,560
it up in your at your leisure but I'm

4092
02:47:49,560 --> 02:47:51,660
going to move on so if you talk to pki

4093
02:47:51,660 --> 02:47:54,840
folks they will point out sometimes that

4094
02:47:54,840 --> 02:47:57,479
the peacock system does support name

4095
02:47:57,479 --> 02:48:00,300
constraints and that is in fact true the

4096
02:48:00,300 --> 02:48:03,300
problem is they are very seldom used and

4097
02:48:03,300 --> 02:48:05,760
even in cases where they are used there

4098
02:48:05,760 --> 02:48:08,100
are issues namely because they are type

4099
02:48:08,100 --> 02:48:09,300
specific

4100
02:48:09,300 --> 02:48:11,760
the the way that they are deployed today

4101
02:48:11,760 --> 02:48:14,640
is uh they aren't marked the extension

4102
02:48:14,640 --> 02:48:17,160
is marked not critical which means that

4103
02:48:17,160 --> 02:48:19,500
you cannot enforce their use and that's

4104
02:48:19,500 --> 02:48:22,800
critical for for security but uh it

4105
02:48:22,800 --> 02:48:24,720
doesn't really matter I mean even if the

4106
02:48:24,720 --> 02:48:26,460
system technically supports name

4107
02:48:26,460 --> 02:48:27,660
constraints

4108
02:48:27,660 --> 02:48:31,200
it is not generally amenable to the

4109
02:48:31,200 --> 02:48:33,800
business model of the public CA system

4110
02:48:33,800 --> 02:48:37,680
where every public CA wants to be able

4111
02:48:37,680 --> 02:48:40,979
to issue certificates for a global

4112
02:48:40,979 --> 02:48:43,380
population of potentially paying

4113
02:48:43,380 --> 02:48:45,660
customers right so it'll never work but

4114
02:48:45,660 --> 02:48:48,300
even if you wanted to design redesign

4115
02:48:48,300 --> 02:48:50,399
the system to do that well we would have

4116
02:48:50,399 --> 02:48:54,420
to do is to deploy a hierarchical pki

4117
02:48:54,420 --> 02:48:56,160
and that at that point it's better to

4118
02:48:56,160 --> 02:48:59,460
use dnsc because it's already it already

4119
02:48:59,460 --> 02:49:01,920
has that feature

4120
02:49:01,920 --> 02:49:04,859
so um there are things that have been

4121
02:49:04,859 --> 02:49:07,740
developed like certificate transparency

4122
02:49:07,740 --> 02:49:10,800
which and deployed actually and what

4123
02:49:10,800 --> 02:49:13,859
they do is they offer a crypto

4124
02:49:13,859 --> 02:49:17,520
graphically verifiable and unalterable

4125
02:49:17,520 --> 02:49:20,700
log of every certificate that has been

4126
02:49:20,700 --> 02:49:22,920
issued by the public cas

4127
02:49:22,920 --> 02:49:25,920
so but essentially this is kind of a

4128
02:49:25,920 --> 02:49:28,740
Band-Aid because what they can be used

4129
02:49:28,740 --> 02:49:33,000
is to retroactively detect uh Miss

4130
02:49:33,000 --> 02:49:35,160
issuance or fraudulently issued

4131
02:49:35,160 --> 02:49:38,040
certificates but what we really need as

4132
02:49:38,040 --> 02:49:41,819
a system that proactively prevents the

4133
02:49:41,819 --> 02:49:43,859
Mis issuance of certificates in the

4134
02:49:43,859 --> 02:49:45,899
first place

4135
02:49:45,899 --> 02:49:47,160
um and then we have another problem

4136
02:49:47,160 --> 02:49:48,840
because with the introduction of this

4137
02:49:48,840 --> 02:49:49,740
system

4138
02:49:49,740 --> 02:49:52,319
we have in addition to the public Cas

4139
02:49:52,319 --> 02:49:56,220
themselves we have yet another set of

4140
02:49:56,220 --> 02:49:58,380
trusted uh parties that we have to trust

4141
02:49:58,380 --> 02:50:01,620
right so that again I don't know if that

4142
02:50:01,620 --> 02:50:03,660
makes the situation any better because

4143
02:50:03,660 --> 02:50:06,300
we have more points of attacks and an

4144
02:50:06,300 --> 02:50:08,880
increasingly larger surface area for

4145
02:50:08,880 --> 02:50:10,260
those attacks

4146
02:50:10,260 --> 02:50:12,540
so what about CAA records these actually

4147
02:50:12,540 --> 02:50:15,540
can help on the margins a little bit so

4148
02:50:15,540 --> 02:50:18,359
what the dnscaa record does if you're

4149
02:50:18,359 --> 02:50:22,200
familiar with it is allow a domain owner

4150
02:50:22,200 --> 02:50:26,160
to publish which Cas are authorized to

4151
02:50:26,160 --> 02:50:28,859
issue certificates for names in their

4152
02:50:28,859 --> 02:50:32,040
domain so what this can do is it can

4153
02:50:32,040 --> 02:50:33,800
prevent

4154
02:50:33,800 --> 02:50:37,920
accidental Mass issuance of certificates

4155
02:50:37,920 --> 02:50:41,340
by well-behaved Cas that carefully check

4156
02:50:41,340 --> 02:50:44,040
these records but it does absolutely

4157
02:50:44,040 --> 02:50:46,680
nothing to prevent attacks by malicious

4158
02:50:46,680 --> 02:50:47,640
cas

4159
02:50:47,640 --> 02:50:50,760
and also it's a issue or side check only

4160
02:50:50,760 --> 02:50:53,640
what we really need is an application

4161
02:50:53,640 --> 02:50:55,920
verifier site check which is exactly

4162
02:50:55,920 --> 02:50:58,680
what Dane provides

4163
02:50:58,680 --> 02:51:01,740
so what how can the DNS folks help well

4164
02:51:01,740 --> 02:51:04,800
Dane can help by placing certificates in

4165
02:51:04,800 --> 02:51:07,560
public keys or references to them

4166
02:51:07,560 --> 02:51:09,420
in the DNS where they can be

4167
02:51:09,420 --> 02:51:12,180
authenticated with the NSX signatures

4168
02:51:12,180 --> 02:51:18,120
and DNS and by implication DNS set has a

4169
02:51:18,120 --> 02:51:20,580
hierarchical and decentralized

4170
02:51:20,580 --> 02:51:23,640
administration with a single route not

4171
02:51:23,640 --> 02:51:27,300
like 400 routes which is very strongly

4172
02:51:27,300 --> 02:51:29,760
defended and well secure

4173
02:51:29,760 --> 02:51:33,120
and crucially the DNS system

4174
02:51:33,120 --> 02:51:35,760
has names namespace constraints that are

4175
02:51:35,760 --> 02:51:38,939
built in right so a domain owner can

4176
02:51:38,939 --> 02:51:41,460
only make modifications to records in

4177
02:51:41,460 --> 02:51:43,080
their own Zone they can't do it to any

4178
02:51:43,080 --> 02:51:45,300
other organizations that's what I mean

4179
02:51:45,300 --> 02:51:47,640
by namespace constraints

4180
02:51:47,640 --> 02:51:52,800
the dns-based systems like Dane have

4181
02:51:52,800 --> 02:51:55,740
much more timely revocation mechanisms

4182
02:51:55,740 --> 02:51:58,800
which you can achieve by shrinking the

4183
02:51:58,800 --> 02:52:01,500
TTL and removing records that's all you

4184
02:52:01,500 --> 02:52:03,300
have to do that's the equivalent of

4185
02:52:03,300 --> 02:52:05,819
certificate revocation in the Dane world

4186
02:52:05,819 --> 02:52:08,340
and it's also better suited to a class

4187
02:52:08,340 --> 02:52:11,340
of applications that use certain types

4188
02:52:11,340 --> 02:52:14,819
of DNS redirection mechanisms like

4189
02:52:14,819 --> 02:52:18,540
MX and SRV and and down the road newer

4190
02:52:18,540 --> 02:52:22,080
types of Records like svcb

4191
02:52:22,080 --> 02:52:25,080
so is uh Dane practical though

4192
02:52:25,080 --> 02:52:28,200
I would say that uh gradually it is

4193
02:52:28,200 --> 02:52:30,359
becoming so deployed infrastructure is

4194
02:52:30,359 --> 02:52:32,100
becoming real

4195
02:52:32,100 --> 02:52:34,920
the the root of the DNS and most of the

4196
02:52:34,920 --> 02:52:37,979
tlds are signed today so I think that's

4197
02:52:37,979 --> 02:52:41,760
all of the gtlds and almost all of the

4198
02:52:41,760 --> 02:52:45,240
cctlds so organizations under them can

4199
02:52:45,240 --> 02:52:47,720
sign their zones and have a intact

4200
02:52:47,720 --> 02:52:50,220
authentication chain from the root zones

4201
02:52:50,220 --> 02:52:51,540
trust actor

4202
02:52:51,540 --> 02:52:54,479
validation is also widespread and

4203
02:52:54,479 --> 02:52:57,479
growing however Diana SEC deployment

4204
02:52:57,479 --> 02:52:59,819
under the tlds is still relatively

4205
02:52:59,819 --> 02:53:02,279
sparse so I think Victor can tell you

4206
02:53:02,279 --> 02:53:04,160
more about the measurements but I think

4207
02:53:04,160 --> 02:53:08,220
if you look at the um zones under the

4208
02:53:08,220 --> 02:53:10,200
effective tlds right so tlds are

4209
02:53:10,200 --> 02:53:11,939
effective tlds the penetration is about

4210
02:53:11,939 --> 02:53:13,380
five percent

4211
02:53:13,380 --> 02:53:15,660
and application Protocols of course will

4212
02:53:15,660 --> 02:53:18,180
need changes to work with Dane and

4213
02:53:18,180 --> 02:53:19,859
that's a process that's been going on

4214
02:53:19,859 --> 02:53:21,899
for a while some applications supported

4215
02:53:21,899 --> 02:53:24,060
other applications will definitely need

4216
02:53:24,060 --> 02:53:24,899
work

4217
02:53:24,899 --> 02:53:26,939
all right so

4218
02:53:26,939 --> 02:53:29,340
um this is just for reference these are

4219
02:53:29,340 --> 02:53:31,760
the main ietf protocol specifications

4220
02:53:31,760 --> 02:53:35,220
that Define how Dane works

4221
02:53:35,220 --> 02:53:37,500
and let's talk about the first one which

4222
02:53:37,500 --> 02:53:39,840
is RFC 6698

4223
02:53:39,840 --> 02:53:42,779
this defined a new DNS record called the

4224
02:53:42,779 --> 02:53:44,399
tlsa record

4225
02:53:44,399 --> 02:53:48,380
that allows you to put

4226
02:53:48,380 --> 02:53:51,479
certificates or public keys or hashes of

4227
02:53:51,479 --> 02:53:54,720
them into a DNS record signed by dnssec

4228
02:53:54,720 --> 02:53:59,100
and also specifies how you use them

4229
02:53:59,100 --> 02:54:02,040
right so there are modes of Dane where

4230
02:54:02,040 --> 02:54:04,740
you can use it in conjunction with the

4231
02:54:04,740 --> 02:54:06,060
public CA system

4232
02:54:06,060 --> 02:54:07,920
and there are modes in which you can use

4233
02:54:07,920 --> 02:54:09,479
them entirely without so everything is

4234
02:54:09,479 --> 02:54:12,359
authenticated in in the DNS system

4235
02:54:12,359 --> 02:54:13,560
entirely

4236
02:54:13,560 --> 02:54:15,359
the other document you should probably

4237
02:54:15,359 --> 02:54:19,080
read is RFC 7671 which updates the

4238
02:54:19,080 --> 02:54:21,240
original specific specification with

4239
02:54:21,240 --> 02:54:24,439
additional operational guidance

4240
02:54:25,080 --> 02:54:26,760
um so I'm gonna instead of going through

4241
02:54:26,760 --> 02:54:28,620
all the details I'm going to do it with

4242
02:54:28,620 --> 02:54:30,240
an example but I just want to talk about

4243
02:54:30,240 --> 02:54:32,700
the first parameter first which is the

4244
02:54:32,700 --> 02:54:34,020
usage field

4245
02:54:34,020 --> 02:54:36,420
so um

4246
02:54:36,420 --> 02:54:39,479
there are two types of usage that allow

4247
02:54:39,479 --> 02:54:42,479
Dane to coexist and strengthen the

4248
02:54:42,479 --> 02:54:43,859
public seeing system

4249
02:54:43,859 --> 02:54:46,260
and there are two modes the second two

4250
02:54:46,260 --> 02:54:49,200
that allow Dane to operate entirely

4251
02:54:49,200 --> 02:54:52,100
Indiana sec

4252
02:54:52,140 --> 02:54:56,279
so the first two pksta and pkx ee are

4253
02:54:56,279 --> 02:54:58,200
what are called the pkx constraining

4254
02:54:58,200 --> 02:55:01,920
modes and they use Dane to apply

4255
02:55:01,920 --> 02:55:04,819
constraints on the use of the public Cas

4256
02:55:04,819 --> 02:55:08,580
so the first one you can use a dainty

4257
02:55:08,580 --> 02:55:10,800
LSA record to specify

4258
02:55:10,800 --> 02:55:14,700
that only a specific public CA should be

4259
02:55:14,700 --> 02:55:17,399
trusted for the service certificate for

4260
02:55:17,399 --> 02:55:19,800
that domain and the second one you can

4261
02:55:19,800 --> 02:55:20,880
nail down

4262
02:55:20,880 --> 02:55:24,000
uh even more granularly only a specific

4263
02:55:24,000 --> 02:55:25,859
service certificate that is

4264
02:55:25,859 --> 02:55:28,560
authenticated with through the public CA

4265
02:55:28,560 --> 02:55:29,580
system

4266
02:55:29,580 --> 02:55:31,800
but only that one could be trusted so

4267
02:55:31,800 --> 02:55:33,540
that's called Peak it's e

4268
02:55:33,540 --> 02:55:36,359
the last two uh the first one usage mode

4269
02:55:36,359 --> 02:55:37,500
two

4270
02:55:37,500 --> 02:55:41,000
is Dane ta that's where you can specify

4271
02:55:41,000 --> 02:55:44,700
a CA that you run or like a local

4272
02:55:44,700 --> 02:55:46,859
Enterprise CA that is completely

4273
02:55:46,859 --> 02:55:49,439
independent of the public CA system and

4274
02:55:49,439 --> 02:55:52,020
you can nail it down in the DNS and

4275
02:55:52,020 --> 02:55:54,720
specify its certificate or public key

4276
02:55:54,720 --> 02:55:56,939
and say that is trusted to issue

4277
02:55:56,939 --> 02:55:59,700
certificates for your application domain

4278
02:55:59,700 --> 02:56:03,720
names and the date e mode specifies not

4279
02:56:03,720 --> 02:56:06,120
the trust anchor of the root CA but the

4280
02:56:06,120 --> 02:56:07,979
actual Leaf certificate the certificate

4281
02:56:07,979 --> 02:56:10,979
for the application service itself all

4282
02:56:10,979 --> 02:56:12,720
right so

4283
02:56:12,720 --> 02:56:15,359
um I'll highlight the details of the

4284
02:56:15,359 --> 02:56:16,800
tlsa record

4285
02:56:16,800 --> 02:56:19,800
by means of an example so here's an

4286
02:56:19,800 --> 02:56:22,800
example of a tlsa record for the mail

4287
02:56:22,800 --> 02:56:25,319
service at example.com

4288
02:56:25,319 --> 02:56:27,240
so it has a bunch of components if you

4289
02:56:27,240 --> 02:56:30,180
look on the at the owner name of the DNS

4290
02:56:30,180 --> 02:56:31,500
record so that's the thing on the left

4291
02:56:31,500 --> 02:56:32,640
hand side

4292
02:56:32,640 --> 02:56:34,800
it's composed of a number of piece

4293
02:56:34,800 --> 02:56:38,700
pieces so it has two prefix labels in

4294
02:56:38,700 --> 02:56:40,560
the beginning the first one identifies

4295
02:56:40,560 --> 02:56:43,500
the port number that's Port 25

4296
02:56:43,500 --> 02:56:46,380
and the second one identifies the

4297
02:56:46,380 --> 02:56:48,180
transport protocol in use in this case

4298
02:56:48,180 --> 02:56:51,960
gcp and the remaining labels identified

4299
02:56:51,960 --> 02:56:53,819
the domain name of the application

4300
02:56:53,819 --> 02:56:55,200
endpoint in this case it's

4301
02:56:55,200 --> 02:56:58,200
mail.example.com

4302
02:57:00,000 --> 02:57:03,779
uh so if you look at the resource data

4303
02:57:03,779 --> 02:57:05,640
the r data of the record

4304
02:57:05,640 --> 02:57:07,859
you'll see it starts with three

4305
02:57:07,859 --> 02:57:09,359
parameters these are one octet

4306
02:57:09,359 --> 02:57:11,040
parameters each

4307
02:57:11,040 --> 02:57:14,399
the first one is the usage parameters so

4308
02:57:14,399 --> 02:57:15,779
those are the things that I just

4309
02:57:15,779 --> 02:57:18,479
mentioned the pkx modes of the date mode

4310
02:57:18,479 --> 02:57:20,819
so which mode you operate

4311
02:57:20,819 --> 02:57:22,319
date in

4312
02:57:22,319 --> 02:57:24,560
the next one is called the selector

4313
02:57:24,560 --> 02:57:27,660
which identifies what you're putting in

4314
02:57:27,660 --> 02:57:29,700
the DNS record where it's whether or not

4315
02:57:29,700 --> 02:57:33,600
it's the entire x5009 certificate

4316
02:57:33,600 --> 02:57:36,600
or the public key

4317
02:57:36,600 --> 02:57:38,760
embedded in the certificate but it could

4318
02:57:38,760 --> 02:57:41,100
be a raw public key too which doesn't

4319
02:57:41,100 --> 02:57:43,200
have a certificate

4320
02:57:43,200 --> 02:57:45,240
and the third parameter is what's called

4321
02:57:45,240 --> 02:57:46,620
a matching type

4322
02:57:46,620 --> 02:57:51,779
so this says the data in the TLs record

4323
02:57:51,779 --> 02:57:54,420
uh what kind of data is it is it the

4324
02:57:54,420 --> 02:57:57,020
full selector so is it the full

4325
02:57:57,020 --> 02:57:59,340
certificate or is it the entire public

4326
02:57:59,340 --> 02:58:02,640
key that's the raw binary data for those

4327
02:58:02,640 --> 02:58:04,740
uh for a certificate it would be in your

4328
02:58:04,740 --> 02:58:07,200
form for example or whether it's a

4329
02:58:07,200 --> 02:58:09,120
cryptographic hash of it and the two

4330
02:58:09,120 --> 02:58:11,220
hashes that are supported today are

4331
02:58:11,220 --> 02:58:14,700
sha-256 that's matching type 1 and sha

4332
02:58:14,700 --> 02:58:17,160
512 which is matching type 2. so in this

4333
02:58:17,160 --> 02:58:21,359
example we're using a sha-256 hash

4334
02:58:21,359 --> 02:58:24,240
and lastly The Blob of data right at the

4335
02:58:24,240 --> 02:58:28,040
end is the certificate Association data

4336
02:58:28,040 --> 02:58:31,800
and uh in this case it's hex encoded in

4337
02:58:31,800 --> 02:58:34,500
this case since we're using if we go

4338
02:58:34,500 --> 02:58:35,399
back

4339
02:58:35,399 --> 02:58:38,760
we see we're using selector one so this

4340
02:58:38,760 --> 02:58:39,960
is a

4341
02:58:39,960 --> 02:58:42,060
public key

4342
02:58:42,060 --> 02:58:46,020
and Shop with 256 so this is a sha-256

4343
02:58:46,020 --> 02:58:48,840
encoding of the public key of the

4344
02:58:48,840 --> 02:58:51,240
certificate for that service and it's

4345
02:58:51,240 --> 02:58:53,580
hex encoded so that's uh what is it it's

4346
02:58:53,580 --> 02:58:55,800
like 64 characters right so it's 156

4347
02:58:55,800 --> 02:59:00,380
bytes bits and that needs 64 characters

4348
02:59:00,380 --> 02:59:04,560
represented so if we put all of this uh

4349
02:59:04,560 --> 02:59:05,640
together

4350
02:59:05,640 --> 02:59:08,840
what we can say is that this Dane record

4351
02:59:08,840 --> 02:59:12,779
specifies the sha-256 hash of the public

4352
02:59:12,779 --> 02:59:15,479
key of the certificate that should match

4353
02:59:15,479 --> 02:59:17,819
the server certificate

4354
02:59:17,819 --> 02:59:20,340
for the mail service running at

4355
02:59:20,340 --> 02:59:22,920
mail.example

4356
02:59:22,920 --> 02:59:25,560
authenticated entirely in the DNS

4357
02:59:25,560 --> 02:59:28,740
because it's using pick it it's using

4358
02:59:28,740 --> 02:59:31,439
usage mode 3 Dane e right so it has no

4359
02:59:31,439 --> 02:59:35,700
Reliance on the public CA system

4360
02:59:35,700 --> 02:59:38,100
um okay so I wanted to show this uh kind

4361
02:59:38,100 --> 02:59:40,319
of amusing cartoon at least amusing to

4362
02:59:40,319 --> 02:59:43,200
me um this is probably eight years old

4363
02:59:43,200 --> 02:59:45,180
now and this was a way in early

4364
02:59:45,180 --> 02:59:48,180
presentations to get peacocks folks to

4365
02:59:48,180 --> 02:59:50,460
warm up the idea of Dane invading their

4366
02:59:50,460 --> 02:59:54,120
territory so what it says is that the

4367
02:59:54,120 --> 02:59:56,399
day record for nlnet labs

4368
02:59:56,399 --> 03:00:00,840
is identifying out of the range of you

4369
03:00:00,840 --> 03:00:05,160
know 200 300 pkis which CA and which CA

4370
03:00:05,160 --> 03:00:06,899
alone is authorized to issue

4371
03:00:06,899 --> 03:00:08,640
certificates for my services right so

4372
03:00:08,640 --> 03:00:11,220
it's pointing to you know that CA in the

4373
03:00:11,220 --> 03:00:12,600
brown shirt with the funny hair only

4374
03:00:12,600 --> 03:00:14,939
that CA no other CA is allowed to issue

4375
03:00:14,939 --> 03:00:18,060
certificates for me

4376
03:00:18,060 --> 03:00:20,100
um okay so what applications can use

4377
03:00:20,100 --> 03:00:22,260
Dane potentially many of them any

4378
03:00:22,260 --> 03:00:24,120
anything that uses the TLs protocol

4379
03:00:24,120 --> 03:00:26,640
could use it in practice today it's only

4380
03:00:26,640 --> 03:00:29,600
used by a few predominantly

4381
03:00:29,600 --> 03:00:32,460
SMTP and to a smaller extent jabber

4382
03:00:32,460 --> 03:00:35,520
which is the xmpp protocol uh Victor

4383
03:00:35,520 --> 03:00:37,859
told me recently there's some browser

4384
03:00:37,859 --> 03:00:39,660
blockchain folks

4385
03:00:39,660 --> 03:00:42,120
interested in maybe using it already but

4386
03:00:42,120 --> 03:00:44,100
we'll fill in details later when we get

4387
03:00:44,100 --> 03:00:46,340
to that

4388
03:00:46,380 --> 03:00:48,660
um so let's talk about Dane for SMTP

4389
03:00:48,660 --> 03:00:50,760
Transport Security this is one area

4390
03:00:50,760 --> 03:00:53,760
where there has been uh I would say

4391
03:00:53,760 --> 03:00:56,700
significant uptake of Dane this is

4392
03:00:56,700 --> 03:00:59,580
defined in RFC 7672

4393
03:00:59,580 --> 03:01:02,760
and what it uh specifies as a way to use

4394
03:01:02,760 --> 03:01:06,240
Dane to authenticate the server side of

4395
03:01:06,240 --> 03:01:08,640
connections between SMTP servers

4396
03:01:08,640 --> 03:01:11,040
specifically mtas or message transfer

4397
03:01:11,040 --> 03:01:12,060
agents

4398
03:01:12,060 --> 03:01:14,640
so without daying the situation today is

4399
03:01:14,640 --> 03:01:16,920
that most connections between SMTP

4400
03:01:16,920 --> 03:01:19,439
servers use encryption opportunistically

4401
03:01:19,439 --> 03:01:22,920
and even when it does use it it is

4402
03:01:22,920 --> 03:01:25,319
vulnerable to attack so attackers could

4403
03:01:25,319 --> 03:01:27,840
strip away the TLs capability

4404
03:01:27,840 --> 03:01:31,020
advertisement from the SMTP protocol

4405
03:01:31,020 --> 03:01:34,020
negotiation and then download grade the

4406
03:01:34,020 --> 03:01:36,800
connection effectively to plain text and

4407
03:01:36,800 --> 03:01:39,000
TLS connections are also often

4408
03:01:39,000 --> 03:01:41,460
unauthenticated

4409
03:01:41,460 --> 03:01:44,460
so what Dane does is addresses the

4410
03:01:44,460 --> 03:01:48,180
security Gap by authenticating the SMTP

4411
03:01:48,180 --> 03:01:51,420
server's certificate using assigned tlsa

4412
03:01:51,420 --> 03:01:54,180
record and additionally to prevent

4413
03:01:54,180 --> 03:01:57,540
downgrade to plaintext it uses the

4414
03:01:57,540 --> 03:02:00,240
presence of the tlsa record as an

4415
03:02:00,240 --> 03:02:03,420
indicator that TLS must be used

4416
03:02:03,420 --> 03:02:06,120
there's already a range of software that

4417
03:02:06,120 --> 03:02:09,240
supports today in SMTP today postfix

4418
03:02:09,240 --> 03:02:13,380
exim and a bunch of others listed here

4419
03:02:13,380 --> 03:02:15,660
um here's an example

4420
03:02:15,660 --> 03:02:18,960
so what we see here is the MX record for

4421
03:02:18,960 --> 03:02:20,939
example.com

4422
03:02:20,939 --> 03:02:22,760
points to

4423
03:02:22,760 --> 03:02:26,220
mail.example.com so what we do is we

4424
03:02:26,220 --> 03:02:28,380
provision the tlsa record at the

4425
03:02:28,380 --> 03:02:29,779
application endpoint name

4426
03:02:29,779 --> 03:02:34,920
mail.example.com it uses uh Port 25 TCP

4427
03:02:34,920 --> 03:02:37,800
so it has the prefixed labels on

4428
03:02:37,800 --> 03:02:40,740
prepended to it and in this case we're

4429
03:02:40,740 --> 03:02:43,140
using parameters three one one right

4430
03:02:43,140 --> 03:02:45,359
which is daily

4431
03:02:45,359 --> 03:02:49,560
uh public key and Char 256. so both of

4432
03:02:49,560 --> 03:02:52,620
these things must be signed and I

4433
03:02:52,620 --> 03:02:56,880
believe for Dane SMTP only the Dane

4434
03:02:56,880 --> 03:02:59,220
usage modes are recommended the Pix

4435
03:02:59,220 --> 03:03:02,160
modes are not recommended but I can't

4436
03:03:02,160 --> 03:03:04,859
specifically remember why so maybe I

4437
03:03:04,859 --> 03:03:06,479
don't know if you want to chime in on on

4438
03:03:06,479 --> 03:03:09,960
that or later okay we'll keep going

4439
03:03:09,960 --> 03:03:13,260
um so there is a big email provider that

4440
03:03:13,260 --> 03:03:15,359
has recently announced that they support

4441
03:03:15,359 --> 03:03:18,300
uh are supporting Dane that's Microsoft

4442
03:03:18,300 --> 03:03:20,540
and you can read about it here

4443
03:03:20,540 --> 03:03:23,399
it wasn't clear for me from reading this

4444
03:03:23,399 --> 03:03:25,880
announcement whether it's just Dane

4445
03:03:25,880 --> 03:03:29,580
uh outbound or inbound two so if you

4446
03:03:29,580 --> 03:03:31,200
read the note it says that they were

4447
03:03:31,200 --> 03:03:34,380
going to do both directions by late 2021

4448
03:03:34,380 --> 03:03:36,840
but it's kind of old information so if

4449
03:03:36,840 --> 03:03:39,000
anyone knows actually what they're doing

4450
03:03:39,000 --> 03:03:40,800
that would be interested to know but

4451
03:03:40,800 --> 03:03:42,960
here's a big provider that it's doing it

4452
03:03:42,960 --> 03:03:45,540
on their Production service

4453
03:03:45,540 --> 03:03:49,080
okay so the next application is uh kind

4454
03:03:49,080 --> 03:03:51,600
of there's a generic specification for

4455
03:03:51,600 --> 03:03:53,520
supporting Dane authentication for any

4456
03:03:53,520 --> 03:03:56,160
application service that uses SRV

4457
03:03:56,160 --> 03:03:58,080
records and that's described

4458
03:03:58,080 --> 03:04:01,580
in RFC is at

4459
03:04:01,580 --> 03:04:06,300
76.72 I think right 73 right

4460
03:04:06,300 --> 03:04:07,020
um

4461
03:04:07,020 --> 03:04:11,399
so the basic idea is very similar to

4462
03:04:11,399 --> 03:04:12,359
um

4463
03:04:12,359 --> 03:04:16,680
uh to SMTP you place the tlsa record at

4464
03:04:16,680 --> 03:04:19,080
the application endpoint name prefix

4465
03:04:19,080 --> 03:04:20,399
with the port number and the transport

4466
03:04:20,399 --> 03:04:23,100
protocol used by that application and

4467
03:04:23,100 --> 03:04:25,080
the resource data on the right side is

4468
03:04:25,080 --> 03:04:27,120
is kind of the same you have the kind of

4469
03:04:27,120 --> 03:04:29,720
the same options

4470
03:04:30,120 --> 03:04:31,800
um Okay so

4471
03:04:31,800 --> 03:04:34,500
what about Dane TLS for the web so a lot

4472
03:04:34,500 --> 03:04:36,240
of people wanted this to happen some

4473
03:04:36,240 --> 03:04:37,260
people think

4474
03:04:37,260 --> 03:04:39,240
that this could have been the killer app

4475
03:04:39,240 --> 03:04:42,479
for uh for Dane and this CA security

4476
03:04:42,479 --> 03:04:45,120
incidents that I outlined previously

4477
03:04:45,120 --> 03:04:48,120
almost all related to the webpki so so

4478
03:04:48,120 --> 03:04:49,500
Dane would have been an excellent

4479
03:04:49,500 --> 03:04:50,880
solution to the problems in that

4480
03:04:50,880 --> 03:04:51,779
landscape

4481
03:04:51,779 --> 03:04:54,660
but it has always been a challenging

4482
03:04:54,660 --> 03:04:57,600
proposition to tackle uh this task

4483
03:04:57,600 --> 03:04:59,399
because it involves

4484
03:04:59,399 --> 03:05:02,100
uh introducing a competitor

4485
03:05:02,100 --> 03:05:06,180
to a highly dominant authentication

4486
03:05:06,180 --> 03:05:09,540
system which has many powerful entrance

4487
03:05:09,540 --> 03:05:12,300
interests right nevertheless there were

4488
03:05:12,300 --> 03:05:13,620
a lot of people

4489
03:05:13,620 --> 03:05:15,660
who are interested in trying to make

4490
03:05:15,660 --> 03:05:17,700
that happen and there were early

4491
03:05:17,700 --> 03:05:19,740
attempts even by Google

4492
03:05:19,740 --> 03:05:23,040
to authenticate x509 certificates in in

4493
03:05:23,040 --> 03:05:26,100
the DNS so I should say that this was a

4494
03:05:26,100 --> 03:05:28,200
pre-dained effort but essentially the

4495
03:05:28,200 --> 03:05:30,899
idea was the same to try to authenticate

4496
03:05:30,899 --> 03:05:33,180
keys and certificates in the DNS

4497
03:05:33,180 --> 03:05:35,160
ultimately that didn't go anywhere and

4498
03:05:35,160 --> 03:05:37,439
they they withdrew that experiment but

4499
03:05:37,439 --> 03:05:39,180
there was a second

4500
03:05:39,180 --> 03:05:42,300
more complete attempt to standardize

4501
03:05:42,300 --> 03:05:44,340
this in the ITF that I was involved in

4502
03:05:44,340 --> 03:05:46,439
Victor was involved in a bunch of people

4503
03:05:46,439 --> 03:05:47,540
were

4504
03:05:47,540 --> 03:05:51,960
called the TLs DNS chain extension and

4505
03:05:51,960 --> 03:05:55,620
it was a more Dynamic way to deliver the

4506
03:05:55,620 --> 03:05:59,160
complete chain of dnsack records that

4507
03:05:59,160 --> 03:06:01,020
you would need to authenticate a tlsa

4508
03:06:01,020 --> 03:06:01,800
record

4509
03:06:01,800 --> 03:06:05,479
inside a TLS handshake

4510
03:06:05,479 --> 03:06:08,760
so the question you might ask is why

4511
03:06:08,760 --> 03:06:11,279
would you need this kind of mechanism

4512
03:06:11,279 --> 03:06:14,460
why don't web browsers just query

4513
03:06:14,460 --> 03:06:18,420
Dane records like everyone else and the

4514
03:06:18,420 --> 03:06:20,220
answer is that web browser folks have

4515
03:06:20,220 --> 03:06:22,740
very specific needs where the normal way

4516
03:06:22,740 --> 03:06:24,899
of doing day inquiries just wouldn't

4517
03:06:24,899 --> 03:06:25,800
work

4518
03:06:25,800 --> 03:06:28,920
so browsers are often need to deal with

4519
03:06:28,920 --> 03:06:31,620
middle boxes that impede their ability

4520
03:06:31,620 --> 03:06:34,979
to look up Dade and DNS records this is

4521
03:06:34,979 --> 03:06:36,720
actually a real problem

4522
03:06:36,720 --> 03:06:40,080
and the second one which is kind of

4523
03:06:40,080 --> 03:06:42,779
disputed is they want they don't want

4524
03:06:42,779 --> 03:06:45,240
any additional latency right so DNS SEC

4525
03:06:45,240 --> 03:06:47,640
involves many more queries and having

4526
03:06:47,640 --> 03:06:50,399
the TLs server build up the complete

4527
03:06:50,399 --> 03:06:53,040
authentication chain and deliver it in

4528
03:06:53,040 --> 03:06:55,800
one shot to the client through the TLs

4529
03:06:55,800 --> 03:06:58,680
handshake takes care of eliminating this

4530
03:06:58,680 --> 03:07:00,180
additional latency

4531
03:07:00,180 --> 03:07:02,399
and then uh there's a there's another

4532
03:07:02,399 --> 03:07:05,040
reason if you have it delivered in the

4533
03:07:05,040 --> 03:07:07,380
TLs chain the end station just has to

4534
03:07:07,380 --> 03:07:09,899
verify the signatures it doesn't need to

4535
03:07:09,899 --> 03:07:12,420
run a full validating stub resolver

4536
03:07:12,420 --> 03:07:15,120
which is not very common or it doesn't

4537
03:07:15,120 --> 03:07:17,640
need a secure connection to an external

4538
03:07:17,640 --> 03:07:20,279
full validating resolver which is also

4539
03:07:20,279 --> 03:07:22,260
not very commonly done

4540
03:07:22,260 --> 03:07:25,140
so what's the status of that work so

4541
03:07:25,140 --> 03:07:28,020
ultimately this effort failed in the ITF

4542
03:07:28,020 --> 03:07:29,340
because of heated technical

4543
03:07:29,340 --> 03:07:32,100
disagreements which I won't go into here

4544
03:07:32,100 --> 03:07:33,960
but if you want to know details feel

4545
03:07:33,960 --> 03:07:36,000
free to come over and chat with me and

4546
03:07:36,000 --> 03:07:38,939
Victor but the spec has been published

4547
03:07:38,939 --> 03:07:41,279
it wasn't published as a standard stack

4548
03:07:41,279 --> 03:07:42,479
RFC it was published on the

4549
03:07:42,479 --> 03:07:44,640
informational track and even though the

4550
03:07:44,640 --> 03:07:46,500
web will not be using Dane in the

4551
03:07:46,500 --> 03:07:48,720
immediate future as a result other

4552
03:07:48,720 --> 03:07:50,939
applications are indeed looking at it

4553
03:07:50,939 --> 03:07:53,160
so there are things like

4554
03:07:53,160 --> 03:07:56,399
um uh day TLS were encrypted DNS that's

4555
03:07:56,399 --> 03:07:58,399
where it could play a role

4556
03:07:58,399 --> 03:08:01,800
for client to resolver I think

4557
03:08:01,800 --> 03:08:04,260
Dane probably won't happen because DNS

4558
03:08:04,260 --> 03:08:07,319
over https is probably going to be the

4559
03:08:07,319 --> 03:08:09,060
dominant way to protect those queries

4560
03:08:09,060 --> 03:08:13,080
but for recursive to authoritative DNS

4561
03:08:13,080 --> 03:08:15,660
Dane TLS could have a role including the

4562
03:08:15,660 --> 03:08:17,100
chain extension

4563
03:08:17,100 --> 03:08:21,180
right so here's a second type of Dane

4564
03:08:21,180 --> 03:08:23,880
record called open pgp key

4565
03:08:23,880 --> 03:08:26,279
so

4566
03:08:26,279 --> 03:08:28,680
all right so this is a way to securely

4567
03:08:28,680 --> 03:08:31,380
publish open pgp public keys in the DNS

4568
03:08:31,380 --> 03:08:33,720
and the way we do that is I'll give you

4569
03:08:33,720 --> 03:08:37,319
an example using my openpgp key record

4570
03:08:37,319 --> 03:08:39,840
so what we do is we take the identifier

4571
03:08:39,840 --> 03:08:42,779
in the pgp key which is an email address

4572
03:08:42,779 --> 03:08:44,040
typically

4573
03:08:44,040 --> 03:08:48,899
we transform the local part by creating

4574
03:08:48,899 --> 03:08:51,319
a truncated hash

4575
03:08:51,319 --> 03:08:53,580
and put it in the first label the second

4576
03:08:53,580 --> 03:08:56,460
label is the fixturing open pgp key and

4577
03:08:56,460 --> 03:08:58,140
the rest is the domain name right so we

4578
03:08:58,140 --> 03:09:00,240
have an example there

4579
03:09:00,240 --> 03:09:03,960
and these things can get very large

4580
03:09:03,960 --> 03:09:06,420
if you see the example where I look up

4581
03:09:06,420 --> 03:09:08,779
my key it's about

4582
03:09:08,779 --> 03:09:12,540
2000 K so TCP should excuse to fetch

4583
03:09:12,540 --> 03:09:15,359
them Schumann yes we are a little bit

4584
03:09:15,359 --> 03:09:17,040
behind time oh okay all right so I'll

4585
03:09:17,040 --> 03:09:20,340
speed up so s my May is another method

4586
03:09:20,340 --> 03:09:24,540
to uh put uh s mime keys or certificates

4587
03:09:24,540 --> 03:09:27,080
in the DNS and here's another example

4588
03:09:27,080 --> 03:09:30,300
uh and let me go through it a little bit

4589
03:09:30,300 --> 03:09:32,760
fast how much time do I have

4590
03:09:32,760 --> 03:09:34,800
right all right

4591
03:09:34,800 --> 03:09:35,819
um

4592
03:09:35,819 --> 03:09:39,660
and in that case let me go

4593
03:09:39,660 --> 03:09:42,600
straight to let me skip over this stuff

4594
03:09:42,600 --> 03:09:46,279
and let me allow

4595
03:09:46,800 --> 03:09:50,660
Victor to talk about the dating survey

4596
03:09:55,200 --> 03:09:58,020
hi uh so I've been operating a Dane

4597
03:09:58,020 --> 03:10:03,359
survey since October 2017. uh it's uh

4598
03:10:03,359 --> 03:10:08,100
yes uh its goal is to make sure that the

4599
03:10:08,100 --> 03:10:09,859
early Dane adopters

4600
03:10:09,859 --> 03:10:12,720
don't through negligence and having

4601
03:10:12,720 --> 03:10:14,580
insufficient pressure on them keeping

4602
03:10:14,580 --> 03:10:16,859
their data correct kind of sort of spoil

4603
03:10:16,859 --> 03:10:19,319
ecosystem so that people who come along

4604
03:10:19,319 --> 03:10:21,300
and want to deployed them fine that it's

4605
03:10:21,300 --> 03:10:23,640
mostly all bad records and broken

4606
03:10:23,640 --> 03:10:28,439
uh and so consequently uh because the uh

4607
03:10:28,439 --> 03:10:30,899
adoption growth was very slow and

4608
03:10:30,899 --> 03:10:33,000
anticipated to be slow there needed to

4609
03:10:33,000 --> 03:10:35,640
be some artificial uh means to let

4610
03:10:35,640 --> 03:10:37,979
people know that their data is wrong uh

4611
03:10:37,979 --> 03:10:39,540
so it would be corrected and would

4612
03:10:39,540 --> 03:10:41,700
facilitate further adoption

4613
03:10:41,700 --> 03:10:45,600
uh and so the goal is really to notify

4614
03:10:45,600 --> 03:10:47,880
people who mess up but as a side effect

4615
03:10:47,880 --> 03:10:51,420
of the survey uh it also publishes uh

4616
03:10:51,420 --> 03:10:53,460
ongoing data on adoption that may in

4617
03:10:53,460 --> 03:10:57,899
fact encourage others to uh join in

4618
03:10:57,899 --> 03:11:00,120
uh so the data collected there's all

4619
03:11:00,120 --> 03:11:01,740
kinds of interesting DNS data but

4620
03:11:01,740 --> 03:11:03,420
there's many signed domains as I can get

4621
03:11:03,420 --> 03:11:06,359
my hands on uh currently about 19.1

4622
03:11:06,359 --> 03:11:09,420
million but also reaches out to SMTP

4623
03:11:09,420 --> 03:11:11,880
servers of the various signed domains

4624
03:11:11,880 --> 03:11:14,160
and make sure that their tlsa records

4625
03:11:14,160 --> 03:11:16,439
are correct or if not uh reach out to

4626
03:11:16,439 --> 03:11:18,140
them and notify them

4627
03:11:18,140 --> 03:11:22,260
this graph shows you dnsic growth over

4628
03:11:22,260 --> 03:11:24,960
time uh you can see that sometime in

4629
03:11:24,960 --> 03:11:27,479
Spring of 2020 the adoption rate picked

4630
03:11:27,479 --> 03:11:30,779
up a few signers decided to sign domains

4631
03:11:30,779 --> 03:11:33,060
more aggressively and it's been somewhat

4632
03:11:33,060 --> 03:11:36,359
linear ever since and hopefully more

4633
03:11:36,359 --> 03:11:37,979
domains will be signed and the slope

4634
03:11:37,979 --> 03:11:40,080
will pick up but over the last you know

4635
03:11:40,080 --> 03:11:42,359
a year or two we've had fairly steady

4636
03:11:42,359 --> 03:11:44,220
growth soon to reach 20 million before

4637
03:11:44,220 --> 03:11:46,100
the end of this year

4638
03:11:46,100 --> 03:11:49,200
uh the survey as you see collects

4639
03:11:49,200 --> 03:11:51,600
interesting metrics on DNS SEC we see

4640
03:11:51,600 --> 03:11:53,700
that algorithm 8 is by far the most

4641
03:11:53,700 --> 03:11:57,720
popular a 13 ecdsa is the next one it's

4642
03:11:57,720 --> 03:11:59,939
pretty close and then we see at the

4643
03:11:59,939 --> 03:12:01,620
bottom you know algorithm seven and five

4644
03:12:01,620 --> 03:12:04,380
which are deprecated are still hanging

4645
03:12:04,380 --> 03:12:06,600
in there they've both Fallen by 90

4646
03:12:06,600 --> 03:12:09,060
actually more than 90 from their Peak

4647
03:12:09,060 --> 03:12:11,220
deployment but now they've reached a

4648
03:12:11,220 --> 03:12:13,260
long tail and those numbers are barely

4649
03:12:13,260 --> 03:12:15,479
budging anybody still using algorithm

4650
03:12:15,479 --> 03:12:18,720
five and seven please move along but uh

4651
03:12:18,720 --> 03:12:21,180
most of them are staying with them for

4652
03:12:21,180 --> 03:12:22,020
now

4653
03:12:22,020 --> 03:12:25,560
uh the other thing I'm tracking is you

4654
03:12:25,560 --> 03:12:28,319
know uh DNS set adoption by various tlds

4655
03:12:28,319 --> 03:12:30,300
again maybe to encourage those tlds to

4656
03:12:30,300 --> 03:12:32,939
promote Dane not surprisingly we see

4657
03:12:32,939 --> 03:12:34,560
that.com is by far the biggest

4658
03:12:34,560 --> 03:12:38,220
deployment at 5.2 million uh NL and CH

4659
03:12:38,220 --> 03:12:42,000
have incentivized the use of Dane and so

4660
03:12:42,000 --> 03:12:43,920
we can see that uh they're they're

4661
03:12:43,920 --> 03:12:46,020
pretty high on the list and you can

4662
03:12:46,020 --> 03:12:48,600
check the data on the survey page and

4663
03:12:48,600 --> 03:12:51,060
look up your favorite TLD

4664
03:12:51,060 --> 03:12:53,880
uh this is this shows you growth over

4665
03:12:53,880 --> 03:12:56,580
time for.com you can find the data for

4666
03:12:56,580 --> 03:12:58,439
each of the tlds that have at least a

4667
03:12:58,439 --> 03:13:01,080
thousand signed domains uh here you see

4668
03:13:01,080 --> 03:13:03,899
the introduction of incentives for the

4669
03:13:03,899 --> 03:13:06,120
Swiss domain all of a sudden the slope

4670
03:13:06,120 --> 03:13:08,040
change radically and then you see

4671
03:13:08,040 --> 03:13:10,080
adoption by a few providers we decided

4672
03:13:10,080 --> 03:13:12,779
to cash in and take advantage of the

4673
03:13:12,779 --> 03:13:14,939
discounted rates and registrations

4674
03:13:14,939 --> 03:13:19,200
uh heres.dev uh and you know it's by far

4675
03:13:19,200 --> 03:13:21,960
the smoothest ride of all the uh TLD

4676
03:13:21,960 --> 03:13:24,600
signing no blips just steady growth over

4677
03:13:24,600 --> 03:13:25,620
time

4678
03:13:25,620 --> 03:13:29,340
uh here is uh the the survey supports

4679
03:13:29,340 --> 03:13:31,319
drilling down to look at your particular

4680
03:13:31,319 --> 03:13:34,260
domain or your particular TLD uh and

4681
03:13:34,260 --> 03:13:37,200
here we see itf.org and we see that

4682
03:13:37,200 --> 03:13:39,540
iitf.org has some deprecated algorithms

4683
03:13:39,540 --> 03:13:42,960
to take care of uh and we see their tlsa

4684
03:13:42,960 --> 03:13:44,399
records but you can also look at their

4685
03:13:44,399 --> 03:13:46,859
dnski records and how old they are in

4686
03:13:46,859 --> 03:13:48,479
their DS records and whether the

4687
03:13:48,479 --> 03:13:51,120
certificates match the tlsa records and

4688
03:13:51,120 --> 03:13:52,500
all that kind of fun

4689
03:13:52,500 --> 03:13:55,859
uh and finally here we see some

4690
03:13:55,859 --> 03:13:57,540
providers who host a lot of email

4691
03:13:57,540 --> 03:14:00,359
customer domains and whether their

4692
03:14:00,359 --> 03:14:02,279
domains are whether they're mixed hosts

4693
03:14:02,279 --> 03:14:04,500
are signed and if so whether they have

4694
03:14:04,500 --> 03:14:06,540
tlsa records and we're seeing some

4695
03:14:06,540 --> 03:14:08,580
significant progress on dainty LSA

4696
03:14:08,580 --> 03:14:10,560
adoption by providers who host lots of

4697
03:14:10,560 --> 03:14:13,200
signed domains so once we remove Google

4698
03:14:13,200 --> 03:14:15,840
and ovh from the top two you'll see that

4699
03:14:15,840 --> 03:14:18,600
Dane is quite prominent uh from there on

4700
03:14:18,600 --> 03:14:21,060
down there are a few gaps but certainly

4701
03:14:21,060 --> 03:14:25,800
one.com and hostpoint.ch and so on are

4702
03:14:25,800 --> 03:14:27,840
fully data enabled and outlook.com will

4703
03:14:27,840 --> 03:14:30,720
join them sometime yeah in a I think

4704
03:14:30,720 --> 03:14:33,180
it's early 2023 or maybe it's even late

4705
03:14:33,180 --> 03:14:35,640
this year I don't remember uh so anyway

4706
03:14:35,640 --> 03:14:38,340
that's uh that's it question time if

4707
03:14:38,340 --> 03:14:39,420
there are if there's time for any

4708
03:14:39,420 --> 03:14:40,979
questions hours

4709
03:14:40,979 --> 03:14:44,660
yeah there's a few minutes for questions

4710
03:14:46,380 --> 03:14:48,359
all right it looks like

4711
03:14:48,359 --> 03:14:52,140
actually John has a question go for it

4712
03:14:52,140 --> 03:14:53,760
oh it's working

4713
03:14:53,760 --> 03:14:56,640
um so what do you see as the next it

4714
03:14:56,640 --> 03:14:58,200
seems like web browsers have sort of

4715
03:14:58,200 --> 03:14:59,640
reached a dead end that they're not the

4716
03:14:59,640 --> 03:15:02,399
next obvious thing to implement Dane is

4717
03:15:02,399 --> 03:15:03,899
there an application that you would see

4718
03:15:03,899 --> 03:15:05,819
as an obvious adopter for this that

4719
03:15:05,819 --> 03:15:07,140
would try to accelerate the process

4720
03:15:07,140 --> 03:15:09,240
since SMTP seems to be going rather

4721
03:15:09,240 --> 03:15:11,580
smoothly what's the next what's the next

4722
03:15:11,580 --> 03:15:13,439
application you'd say would be obvious

4723
03:15:13,439 --> 03:15:16,020
for this you mentioned uh recursive to

4724
03:15:16,020 --> 03:15:18,120
authoritative but that's relatively

4725
03:15:18,120 --> 03:15:20,420
small

4726
03:15:20,819 --> 03:15:23,778
yeah so that

4727
03:15:26,760 --> 03:15:28,800
yeah so recursive to the authoritative

4728
03:15:28,800 --> 03:15:30,899
is kind of the obvious one that comes to

4729
03:15:30,899 --> 03:15:32,520
mind

4730
03:15:32,520 --> 03:15:35,700
um I don't know what uh

4731
03:15:35,700 --> 03:15:38,520
what are the other obvious ones so uh

4732
03:15:38,520 --> 03:15:41,160
increasing uptake where we have some

4733
03:15:41,160 --> 03:15:43,859
some penetration like xmpp and jabber

4734
03:15:43,859 --> 03:15:45,439
but that might also be a small

4735
03:15:45,439 --> 03:15:47,399
application Community I don't know

4736
03:15:47,399 --> 03:15:52,039
Victor do you have any other suggestions

4737
03:15:53,939 --> 03:15:57,960
so uh while ADOT may be a special a

4738
03:15:57,960 --> 03:15:59,520
niche application it's still high volume

4739
03:15:59,520 --> 03:16:02,340
and it matters so if that happens that'd

4740
03:16:02,340 --> 03:16:06,920
be great uh we may see a particular

4741
03:16:06,920 --> 03:16:09,359
applications you know their apps on

4742
03:16:09,359 --> 03:16:10,979
phones and so on that decide to do it I

4743
03:16:10,979 --> 03:16:12,960
know Apple has just released support for

4744
03:16:12,960 --> 03:16:14,939
dnsic that applications can opt into

4745
03:16:14,939 --> 03:16:16,979
maybe some of them will have creative

4746
03:16:16,979 --> 03:16:20,580
uses the hash DNS people not that I

4747
03:16:20,580 --> 03:16:22,620
particularly think blockchain DNS is

4748
03:16:22,620 --> 03:16:25,260
going anywhere but they are using it so

4749
03:16:25,260 --> 03:16:28,920
I think it'll be creative New Uses uh is

4750
03:16:28,920 --> 03:16:32,220
uh other than SMTP uh is where where

4751
03:16:32,220 --> 03:16:33,840
it's going to go

4752
03:16:33,840 --> 03:16:37,200
yeah and uh just to follow and I just

4753
03:16:37,200 --> 03:16:38,939
occurred to me the the other

4754
03:16:38,939 --> 03:16:42,359
uh area where we could see some uptake

4755
03:16:42,359 --> 03:16:44,760
is a new activity so we're also I didn't

4756
03:16:44,760 --> 03:16:46,740
have time to go over it but it's in my

4757
03:16:46,740 --> 03:16:49,200
slides we're talking about using Dane to

4758
03:16:49,200 --> 03:16:52,740
authenticate uh TLS clients too and

4759
03:16:52,740 --> 03:16:54,240
there is definitely some interest in

4760
03:16:54,240 --> 03:16:56,060
that so there are some application

4761
03:16:56,060 --> 03:16:58,380
applications that are looking at that so

4762
03:16:58,380 --> 03:17:00,000
that's relatively new it hasn't been

4763
03:17:00,000 --> 03:17:02,279
deployed yet but that's where I think

4764
03:17:02,279 --> 03:17:04,800
Dane will receive some additional

4765
03:17:04,800 --> 03:17:06,420
deployment

4766
03:17:06,420 --> 03:17:08,939
okay um there's a question in the chat

4767
03:17:08,939 --> 03:17:11,100
give me a second

4768
03:17:11,100 --> 03:17:13,680
would it make sense to get RFC 9102

4769
03:17:13,680 --> 03:17:17,040
implemented in openssl and gnu TLS so we

4770
03:17:17,040 --> 03:17:19,560
can at least experiment with it

4771
03:17:19,560 --> 03:17:21,779
IMHO the hard part is the crypto

4772
03:17:21,779 --> 03:17:23,100
libraries

4773
03:17:23,100 --> 03:17:25,260
resolvers are easier to do at least for

4774
03:17:25,260 --> 03:17:27,439
us

4775
03:17:32,399 --> 03:17:38,100
uh so uh yeah sure uh it would be nice

4776
03:17:38,100 --> 03:17:40,200
to see at least one application show up

4777
03:17:40,200 --> 03:17:42,960
and say we we will do it so long as the

4778
03:17:42,960 --> 03:17:48,540
extension is in uh mostly the the most

4779
03:17:48,540 --> 03:17:50,220
of the complexity of the extension isn't

4780
03:17:50,220 --> 03:17:53,760
parsing uh the the wire form DNS content

4781
03:17:53,760 --> 03:17:55,859
most of the SSL libraries don't have

4782
03:17:55,859 --> 03:17:57,600
that kind of thing in them so I would

4783
03:17:57,600 --> 03:18:00,359
expect to find the implementation not so

4784
03:18:00,359 --> 03:18:02,040
much in open SSL which generically

4785
03:18:02,040 --> 03:18:04,140
supports extensions but in the

4786
03:18:04,140 --> 03:18:06,960
dns-centric library so something like

4787
03:18:06,960 --> 03:18:09,779
ldns is probably perhaps a better home

4788
03:18:09,779 --> 03:18:13,700
for it than openssl

4789
03:18:20,580 --> 03:18:22,740
Paul Hoffman so I'd like to speak

4790
03:18:22,740 --> 03:18:24,979
because both of you had mentioned ADOT

4791
03:18:24,979 --> 03:18:28,080
as a possible use but that's only if

4792
03:18:28,080 --> 03:18:30,359
that's going to be authenticated instead

4793
03:18:30,359 --> 03:18:31,140
of

4794
03:18:31,140 --> 03:18:34,020
um you know the way that everyone in the

4795
03:18:34,020 --> 03:18:36,180
working group wants which is that it at

4796
03:18:36,180 --> 03:18:37,800
this point that there's going to be no

4797
03:18:37,800 --> 03:18:40,200
authentication so you don't need in fact

4798
03:18:40,200 --> 03:18:42,779
this that I would really hope that you

4799
03:18:42,779 --> 03:18:45,779
wouldn't push that forwards because it

4800
03:18:45,779 --> 03:18:47,100
will confuse

4801
03:18:47,100 --> 03:18:49,439
the discussion of us trying to get it

4802
03:18:49,439 --> 03:18:51,899
all at the point where

4803
03:18:51,899 --> 03:18:55,020
there is a desire for authenticated

4804
03:18:55,020 --> 03:18:57,720
um uh resolver to authoritative it's an

4805
03:18:57,720 --> 03:19:01,319
obvious solution but there's there's so

4806
03:19:01,319 --> 03:19:03,060
little interest in it and the people the

4807
03:19:03,060 --> 03:19:05,760
proponents of it couldn't even agree on

4808
03:19:05,760 --> 03:19:09,240
how to do it I would say it it I I would

4809
03:19:09,240 --> 03:19:11,399
prefer that it was not brought up as a

4810
03:19:11,399 --> 03:19:14,460
solution for ADOT until there is any

4811
03:19:14,460 --> 03:19:17,100
interest in authentication yeah I'm

4812
03:19:17,100 --> 03:19:18,899
thinking longer term but yeah I

4813
03:19:18,899 --> 03:19:20,760
understand the situation

4814
03:19:20,760 --> 03:19:22,920
Paul I don't think there's any threat to

4815
03:19:22,920 --> 03:19:26,040
probing and unauthenticated ADOT if some

4816
03:19:26,040 --> 03:19:28,439
sort of signaling is introduced uh

4817
03:19:28,439 --> 03:19:31,080
people will adopt it slowly and as they

4818
03:19:31,080 --> 03:19:33,359
see fit uh people will continue to

4819
03:19:33,359 --> 03:19:35,700
either ignore the signal or not publish

4820
03:19:35,700 --> 03:19:38,640
it we will see largely unauthenticated

4821
03:19:38,640 --> 03:19:42,120
ADOT for quite some time the signaling

4822
03:19:42,120 --> 03:19:44,399
activity can start now it's not

4823
03:19:44,399 --> 03:19:47,160
threatening the ongoing adoption and I

4824
03:19:47,160 --> 03:19:48,180
don't think there'll be any confusion

4825
03:19:48,180 --> 03:19:50,700
either I understand you we disagree we

4826
03:19:50,700 --> 03:19:51,960
disagree on that at least from the

4827
03:19:51,960 --> 03:19:53,760
mailing list people got very confused

4828
03:19:53,760 --> 03:19:56,279
right I'm not suggesting that there's

4829
03:19:56,279 --> 03:19:58,439
anything morally wrong with people who

4830
03:19:58,439 --> 03:20:01,560
do unauthenticated thank you

4831
03:20:01,560 --> 03:20:03,300
I feel Vindicated

4832
03:20:03,300 --> 03:20:05,640
let's do one final question and call it

4833
03:20:05,640 --> 03:20:07,560
a wrap

4834
03:20:07,560 --> 03:20:09,840
last question is there any chance that

4835
03:20:09,840 --> 03:20:12,359
unilateral publication obtained tlsa

4836
03:20:12,359 --> 03:20:14,760
records for web servers would or could

4837
03:20:14,760 --> 03:20:18,479
put pressure on browsers to support this

4838
03:20:18,479 --> 03:20:21,899
so I think people have been publishing

4839
03:20:21,899 --> 03:20:24,720
Dane records for web servers for a long

4840
03:20:24,720 --> 03:20:28,319
time right in I guess in the hope of uh

4841
03:20:28,319 --> 03:20:30,540
it happening someday because I have one

4842
03:20:30,540 --> 03:20:33,359
on my personal website since 2012 right

4843
03:20:33,359 --> 03:20:35,880
but and I'm not the only one but it

4844
03:20:35,880 --> 03:20:39,920
hasn't it hasn't really made a dent

4845
03:20:40,439 --> 03:20:43,680
uh I don't see that pressure as being

4846
03:20:43,680 --> 03:20:45,660
particularly effective also there used

4847
03:20:45,660 --> 03:20:47,880
to be extensions for browsers or plugins

4848
03:20:47,880 --> 03:20:49,200
that would do data authentication

4849
03:20:49,200 --> 03:20:52,020
they've mostly died out uh so at this

4850
03:20:52,020 --> 03:20:53,760
point the incentives for publishing

4851
03:20:53,760 --> 03:20:56,760
those are very low

4852
03:20:56,760 --> 03:20:59,760
um yeah uh I think we would need to

4853
03:20:59,760 --> 03:21:02,220
succeed much more strongly for SMTP and

4854
03:21:02,220 --> 03:21:05,220
really demonstrate that Dane is that

4855
03:21:05,220 --> 03:21:07,740
more a lot more domains assigned and the

4856
03:21:07,740 --> 03:21:09,300
Dane is practical and a lot more

4857
03:21:09,300 --> 03:21:12,060
adoption of a DOT and sorry of Doh and

4858
03:21:12,060 --> 03:21:16,080
Dot to get past the broken cpes for Dane

4859
03:21:16,080 --> 03:21:19,500
to become practical on the browser it's

4860
03:21:19,500 --> 03:21:22,160
sometime off

4861
03:21:23,279 --> 03:21:26,460
yeah and I think the the other way the

4862
03:21:26,460 --> 03:21:29,220
middle box problem could be overcome

4863
03:21:29,220 --> 03:21:32,700
is by moving stub queries to secure

4864
03:21:32,700 --> 03:21:34,920
transports like dough which could

4865
03:21:34,920 --> 03:21:37,740
conceivably Traverse middle boxes so

4866
03:21:37,740 --> 03:21:40,500
that might be an effort worth investing

4867
03:21:40,500 --> 03:21:44,359
resourcing resources in

4868
03:21:47,460 --> 03:21:49,439
okay

4869
03:21:49,439 --> 03:21:53,700
I think that all we have time for

4870
03:21:53,700 --> 03:21:55,920
much thanks to all of the speakers and

4871
03:21:55,920 --> 03:21:57,540
to everybody who contributed to the

4872
03:21:57,540 --> 03:21:59,460
discussion in the room and and remotely

4873
03:21:59,460 --> 03:22:02,100
and I will now turn things over to Keith

4874
03:22:02,100 --> 03:22:05,250
to wrap up

4875
03:22:05,250 --> 03:22:12,750
[Applause]

4876
03:22:14,040 --> 03:22:16,380
okay thank you um

4877
03:22:16,380 --> 03:22:18,720
Sherman and Victor and Suzanne for this

4878
03:22:18,720 --> 03:22:20,580
afternoon

4879
03:22:20,580 --> 03:22:21,240
um

4880
03:22:21,240 --> 03:22:24,260
so we're done we've got another uh or

4881
03:22:24,260 --> 03:22:27,740
Workshop in the bag

4882
03:22:27,960 --> 03:22:30,359
um so it's really just that time to to

4883
03:22:30,359 --> 03:22:32,880
wrap things up and to thank all the

4884
03:22:32,880 --> 03:22:35,358
various people

4885
03:22:36,660 --> 03:22:39,180
so um where are we where are we with

4886
03:22:39,180 --> 03:22:40,859
future workshops

4887
03:22:40,859 --> 03:22:43,439
um all our events last year were online

4888
03:22:43,439 --> 03:22:45,660
um we've managed to hybrid events this

4889
03:22:45,660 --> 03:22:47,279
year uh they're both very much been

4890
03:22:47,279 --> 03:22:49,500
learning exercises

4891
03:22:49,500 --> 03:22:50,640
um we've certainly had a few glitches

4892
03:22:50,640 --> 03:22:52,380
over the past two days so I thank you

4893
03:22:52,380 --> 03:22:54,600
for your patience uh while we figured

4894
03:22:54,600 --> 03:22:56,279
these out

4895
03:22:56,279 --> 03:22:58,399
um we're going to continue with whatever

4896
03:22:58,399 --> 03:23:00,720
pandemic precautions are appropriate for

4897
03:23:00,720 --> 03:23:02,340
in-person events with a foreseeable

4898
03:23:02,340 --> 03:23:03,720
future and we're going to continue with

4899
03:23:03,720 --> 03:23:05,279
a hybrid format for the foreseeable

4900
03:23:05,279 --> 03:23:07,800
future as well

4901
03:23:07,800 --> 03:23:09,239
um and obviously that's a work in

4902
03:23:09,239 --> 03:23:11,160
progress but we'd appreciate your

4903
03:23:11,160 --> 03:23:13,500
feedback uh via the survey or if you

4904
03:23:13,500 --> 03:23:14,939
just want to get in touch with us about

4905
03:23:14,939 --> 03:23:16,739
things like the format of the meetings

4906
03:23:16,739 --> 03:23:18,779
how long they are how frequent they are

4907
03:23:18,779 --> 03:23:20,460
the safety precautions that we're

4908
03:23:20,460 --> 03:23:22,500
putting in place

4909
03:23:22,500 --> 03:23:23,819
um as I mentioned at the start of the

4910
03:23:23,819 --> 03:23:25,680
workshop um the plan is that the next

4911
03:23:25,680 --> 03:23:28,200
one to work 35 will again be hybrid it

4912
03:23:28,200 --> 03:23:30,420
will be co-located with the rep 85

4913
03:23:30,420 --> 03:23:33,359
meeting in Belgrade Serbia we'll be

4914
03:23:33,359 --> 03:23:36,120
doing joint programming the center Tech

4915
03:23:36,120 --> 03:23:37,620
um and hopefully we'll be working with

4916
03:23:37,620 --> 03:23:40,920
our partners in Serbia as well Port 40

4917
03:23:40,920 --> 03:23:42,899
we'll be back in the States uh we

4918
03:23:42,899 --> 03:23:46,140
perform commitment to co-locate with 987

4919
03:23:46,140 --> 03:23:48,840
okay you need microphone closer sure

4920
03:23:48,840 --> 03:23:53,100
um 9087 in Atlanta in February next year

4921
03:23:53,100 --> 03:23:54,300
so

4922
03:23:54,300 --> 03:23:55,979
um lots of thank you

4923
03:23:55,979 --> 03:23:57,899
um thank you to all award members and

4924
03:23:57,899 --> 03:23:59,580
supporters that have continued to

4925
03:23:59,580 --> 03:24:01,500
support or through these on strange

4926
03:24:01,500 --> 03:24:04,319
times special thank you to Comcast uh

4927
03:24:04,319 --> 03:24:06,359
for being not just the sponsor of this

4928
03:24:06,359 --> 03:24:08,040
Workshop but also for all the local

4929
03:24:08,040 --> 03:24:10,260
support and for extending the ITF

4930
03:24:10,260 --> 03:24:13,080
connectivity for us and also the Paris

4931
03:24:13,080 --> 03:24:15,540
line for being our Patron for workshops

4932
03:24:15,540 --> 03:24:18,479
for 2022. program committee program

4933
03:24:18,479 --> 03:24:20,279
committee has worked really hard this

4934
03:24:20,279 --> 03:24:22,319
time there's been a lot of stuff that

4935
03:24:22,319 --> 03:24:24,359
they've had to deal with

4936
03:24:24,359 --> 03:24:26,700
um so um really appreciate everything

4937
03:24:26,700 --> 03:24:28,800
they've done for the programming I

4938
03:24:28,800 --> 03:24:30,899
really appreciate um enjoying doing the

4939
03:24:30,899 --> 03:24:32,939
the panel palabi has been busy driving

4940
03:24:32,939 --> 03:24:35,160
the laptop presenter laptop on top of

4941
03:24:35,160 --> 03:24:37,920
all our other duties as PC chair uh

4942
03:24:37,920 --> 03:24:39,779
special thank you to Hazel

4943
03:24:39,779 --> 03:24:42,239
um who has been our single remote

4944
03:24:42,239 --> 03:24:44,340
program Committee Member she's been busy

4945
03:24:44,340 --> 03:24:47,340
doing a great job of social media over

4946
03:24:47,340 --> 03:24:49,260
the past two days and also hosting the

4947
03:24:49,260 --> 03:24:53,279
online social event last night

4948
03:24:53,279 --> 03:24:55,800
um a bunch of people helped us out with

4949
03:24:55,800 --> 03:24:58,859
um Logistics I like to thank ITF um and

4950
03:24:58,859 --> 03:25:01,739
the MSL including Stephanie there uh for

4951
03:25:01,739 --> 03:25:03,300
all the help um they've really just

4952
03:25:03,300 --> 03:25:05,580
bolted us on to the ITF meeting and then

4953
03:25:05,580 --> 03:25:07,500
it was just been very straightforward so

4954
03:25:07,500 --> 03:25:09,420
we appreciate that

4955
03:25:09,420 --> 03:25:11,340
um also Colin line speed has been

4956
03:25:11,340 --> 03:25:13,140
awesome keeping things um keeping the

4957
03:25:13,140 --> 03:25:15,840
network working throughout the weekend

4958
03:25:15,840 --> 03:25:17,819
um and The Encore guys for all the on

4959
03:25:17,819 --> 03:25:19,979
the AV help as well

4960
03:25:19,979 --> 03:25:21,239
um and you know I'd just like to thank

4961
03:25:21,239 --> 03:25:23,460
the Oreck staff as well I mean I've

4962
03:25:23,460 --> 03:25:25,020
really enjoyed having everyone in the

4963
03:25:25,020 --> 03:25:27,239
same place for the first time in in in

4964
03:25:27,239 --> 03:25:29,939
infoever including our two new team

4965
03:25:29,939 --> 03:25:31,800
members um I hope you've enjoyed that

4966
03:25:31,800 --> 03:25:34,680
and I hope you found it useful as well

4967
03:25:34,680 --> 03:25:36,479
um and you know special thanks to uh to

4968
03:25:36,479 --> 03:25:38,460
Matt and Mike for driving all the um the

4969
03:25:38,460 --> 03:25:40,920
webcasts and audio stuff which is

4970
03:25:40,920 --> 03:25:42,600
certainly been numb

4971
03:25:42,600 --> 03:25:46,020
a challenging learning exercise

4972
03:25:46,020 --> 03:25:47,880
um and um in all our future workshops

4973
03:25:47,880 --> 03:25:49,380
they're open to sponsorship or a

4974
03:25:49,380 --> 03:25:51,180
patronage

4975
03:25:51,180 --> 03:25:54,000
um so if you're interested in extending

4976
03:25:54,000 --> 03:25:55,920
going beyond your membership then you

4977
03:25:55,920 --> 03:25:57,660
want to hop out by supporting a workshop

4978
03:25:57,660 --> 03:25:59,279
or sponsoring it

4979
03:25:59,279 --> 03:26:01,439
um then please talk to Dinesh or Steve

4980
03:26:01,439 --> 03:26:04,200
and they're able to help you with that

4981
03:26:04,200 --> 03:26:07,859
that's it so a few wrap-up things

4982
03:26:07,859 --> 03:26:10,140
um thanks for all the talk rating

4983
03:26:10,140 --> 03:26:12,000
um that your data is very useful to the

4984
03:26:12,000 --> 03:26:13,500
program committee and also to the

4985
03:26:13,500 --> 03:26:15,420
speakers

4986
03:26:15,420 --> 03:26:18,060
um and for General feedback on the

4987
03:26:18,060 --> 03:26:20,279
workshop there is a survey

4988
03:26:20,279 --> 03:26:22,319
um so please use that to complete your

4989
03:26:22,319 --> 03:26:24,180
feedback

4990
03:26:24,180 --> 03:26:25,620
um when you leave

4991
03:26:25,620 --> 03:26:28,500
um we have a bunch of tests and masks

4992
03:26:28,500 --> 03:26:29,160
um

4993
03:26:29,160 --> 03:26:31,800
feel free to take one or two away with

4994
03:26:31,800 --> 03:26:33,600
you much rather you took them away and

4995
03:26:33,600 --> 03:26:35,640
didn't expose family members on the way

4996
03:26:35,640 --> 03:26:36,660
back

4997
03:26:36,660 --> 03:26:38,520
um so that's helpful

4998
03:26:38,520 --> 03:26:40,560
um by the same token we do not want to

4999
03:26:40,560 --> 03:26:43,080
recycle your badges or lanyards please

5000
03:26:43,080 --> 03:26:45,060
keep these away and dispose of them we

5001
03:26:45,060 --> 03:26:46,380
don't want them to be a vector for

5002
03:26:46,380 --> 03:26:49,080
covid-19 or monkey pox or or or or

5003
03:26:49,080 --> 03:26:51,359
whatever

5004
03:26:51,359 --> 03:26:54,380
um it's gfp for walk 39 is open already

5005
03:26:54,380 --> 03:26:57,600
so if you're inspired over the past two

5006
03:26:57,600 --> 03:26:59,399
days to submit something yourself then

5007
03:26:59,399 --> 03:27:01,200
please go ahead and the the program

5008
03:27:01,200 --> 03:27:02,700
committee will review that in your

5009
03:27:02,700 --> 03:27:04,319
course

5010
03:27:04,319 --> 03:27:07,800
um and um that's it from me I wish you

5011
03:27:07,800 --> 03:27:09,960
all a safe journey home and look forward

5012
03:27:09,960 --> 03:27:11,939
to seeing you next time so thank you

5013
03:27:11,939 --> 03:27:12,440
everyone

5014
03:27:12,440 --> 03:27:12,830
[Music]

5015
03:27:12,830 --> 03:27:17,170
[Applause]

5016
03:27:17,520 --> 03:27:20,110
foreign

5017
03:27:20,110 --> 03:27:25,719
[Music]

5018
03:27:27,760 --> 03:27:30,919
[Music]

5019
03:27:43,660 --> 03:27:46,860
[Music]

